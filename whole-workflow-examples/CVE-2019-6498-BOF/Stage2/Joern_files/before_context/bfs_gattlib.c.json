{
  "calleeMethods": [["<empty>", "<operator>.equals", "<operator>.equals", "", 1], ["gattlib_common.c", "gattlib_string_to_uuid", "gattlib_string_to_uuid", "int gattlib_string_to_uuid(const char *str, size_t n, uuid_t *uuid) { /* <=== gattlib_string_to_uuid */ \n\tbt_uuid_t bt_uuid;\n\n\tint ret = bt_string_to_uuid(&bt_uuid, str);\n\tif (ret == 0) {\n\t\tbt_uuid_to_uuid(&bt_uuid, uuid);\n\t}\n\n\treturn ret;\n}", 1], ["<empty>", "malloc", "malloc", "", 1], ["bluez/bluez4/lib/uuid.c", "bt_string_to_uuid", "bt_string_to_uuid", "int bt_string_to_uuid(bt_uuid_t *uuid, const char *string) /* <=== bt_string_to_uuid */ \n{\n\tif (is_uuid128(string))\n\t\treturn bt_string_to_uuid128(uuid, string);\n\telse if (is_uuid32(string))\n\t\treturn bt_string_to_uuid32(uuid, string);\n\telse if (is_uuid16(string))\n\t\treturn bt_string_to_uuid16(uuid, string);\n\n\treturn -EINVAL;\n}", 2], ["<empty>", "<operator>.addressOf", "<operator>.addressOf", "", 1], ["<empty>", "org_bluez_gatt_service1_get_primary", "org_bluez_gatt_service1_get_primary", "", 1], ["bluez/bluez4/lib/uuid.c", "is_uuid32", "is_uuid32", "static inline int is_uuid32(const char *string) /* <=== is_uuid32 */ \n{\n\treturn (strlen(string) == 8 || strlen(string) == 10);\n}", 3], ["<empty>", "printf", "printf", "", 1], ["bluez/bluez4/lib/uuid.c", "bt_string_to_uuid32", "bt_string_to_uuid32", "static int bt_string_to_uuid32(bt_uuid_t *uuid, const char *string) /* <=== bt_string_to_uuid32 */ \n{\n\tuint32_t u32;\n\tchar *endptr = NULL;\n\n\tu32 = strtol(string, &endptr, 16);\n\tif (endptr && *endptr == '\\0') {\n\t\tbt_uuid32_create(uuid, u32);\n\t\treturn 0;\n\t}\n\n\treturn -EINVAL;\n}", 3], ["<empty>", "<operator>.indirectIndexAccess", "<operator>.indirectIndexAccess", "", 1], ["examples/gatttool/gatttool.c", "bt_uuid_to_uuid", "bt_uuid_to_uuid", "static void bt_uuid_to_uuid(bt_uuid_t* bt_uuid, uuid_t* uuid) { /* <=== bt_uuid_to_uuid */ \n\tmemcpy(&uuid->value, &bt_uuid->value, sizeof(uuid->value));\n\tif (bt_uuid->type == BT_UUID16) {\n\t\tuuid->type = SDP_UUID16;\n\t} else if (bt_uuid->type == BT_UUID32) {\n\t\tuuid->type = SDP_UUID32;\n\t} else if (bt_uuid->type == BT_UUID128) {\n\t\tuuid->type = SDP_UUID128;\n\t} else {\n\t\tuuid->type = SDP_UUID_UNSPEC;\n\t}\n}", 2], ["bluez/bluez4/lib/uuid.c", "bt_string_to_uuid128", "bt_string_to_uuid128", "static int bt_string_to_uuid128(bt_uuid_t *uuid, const char *string) /* <=== bt_string_to_uuid128 */ \n{\n\tuint32_t data0, data4;\n\tuint16_t data1, data2, data3, data5;\n\tuint128_t n128, u128;\n\tuint8_t *val = (uint8_t *) &n128;\n\n\tif (sscanf(string, \"%08x-%04hx-%04hx-%04hx-%08x%04hx\",\n\t\t\t\t&data0, &data1, &data2,\n\t\t\t\t&data3, &data4, &data5) != 6)\n\t\treturn -EINVAL;\n\n\tdata0 = htonl(data0);\n\tdata1 = htons(data1);\n\tdata2 = htons(data2);\n\tdata3 = htons(data3);\n\tdata4 = htonl(data4);\n\tdata5 = htons(data5);\n\n\tmemcpy(&val[0], &data0, 4);\n\tmemcpy(&val[4], &data1, 2);\n\tmemcpy(&val[6], &data2, 2);\n\tmemcpy(&val[8], &data3, 2);\n\tmemcpy(&val[10], &data4, 4);\n\tmemcpy(&val[14], &data5, 2);\n\n\tntoh128(&n128, &u128);\n\n\tbt_uuid128_create(uuid, u128);\n\n\treturn 0;\n}", 3], ["<empty>", "<operator>.fieldAccess", "<operator>.fieldAccess", "", 1], ["bluez/bluez4/lib/uuid.c", "is_uuid16", "is_uuid16", "static inline int is_uuid16(const char *string) /* <=== is_uuid16 */ \n{\n\treturn (strlen(string) == 4 || strlen(string) == 6);\n}", 3], ["<empty>", "<operator>.addition", "<operator>.addition", "", 1], ["dbus/bluez5/lib/uuid.h", "MAX_LEN_UUID_STR", "dbus/bluez5/lib/uuid.h:165:165:MAX_LEN_UUID_STR:0", "#define MAX_LEN_UUID_STR 37 /* <=== dbus/bluez5/lib/uuid.h:165:165:MAX_LEN_UUID_STR:0 */ ", 1], ["<empty>", "org_bluez_device1_get_gatt_services", "org_bluez_device1_get_gatt_services", "", 1], ["<empty>", "<operator>.notEquals", "<operator>.notEquals", "", 1], ["<empty>", "<operator>.sizeOf", "<operator>.sizeOf", "", 1], ["<empty>", "<operator>.multiplication", "<operator>.multiplication", "", 1], ["bluez/bluez4/lib/uuid.c", "bt_string_to_uuid16", "bt_string_to_uuid16", "static int bt_string_to_uuid16(bt_uuid_t *uuid, const char *string) /* <=== bt_string_to_uuid16 */ \n{\n\tuint16_t u16;\n\tchar *endptr = NULL;\n\n\tu16 = strtol(string, &endptr, 16);\n\tif (endptr && *endptr == '\\0') {\n\t\tbt_uuid16_create(uuid, u16);\n\t\treturn 0;\n\t}\n\n\treturn -EINVAL;\n}", 3], ["<empty>", "<operator>.assignment", "<operator>.assignment", "", 1], ["<empty>", "org_bluez_gatt_service1_get_uuid", "org_bluez_gatt_service1_get_uuid", "", 1], ["bluez/bluez4/lib/uuid.c", "is_uuid128", "is_uuid128", "static inline int is_uuid128(const char *string) /* <=== is_uuid128 */ \n{\n\treturn (strlen(string) == 36 &&\n\t\t\tstring[8] == '-' &&\n\t\t\tstring[13] == '-' &&\n\t\t\tstring[18] == '-' &&\n\t\t\tstring[23] == '-');\n}", 3], ["<empty>", "<operator>.indirection", "<operator>.indirection", "", 1], ["<empty>", "<operator>.postIncrement", "<operator>.postIncrement", "", 1], ["<empty>", "<operator>.indirectFieldAccess", "<operator>.indirectFieldAccess", "", 1], ["<empty>", "g_object_unref", "g_object_unref", "", 1], ["<empty>", "org_bluez_gatt_service1_proxy_new_for_bus_sync", "org_bluez_gatt_service1_proxy_new_for_bus_sync", "", 1]],
  "globalVars": [],
  "importContext": ["#include <glib.h>", "#include <stdbool.h>", "#include <stdlib.h>", "#include \"gattlib_internal.h\""],
  "typeDefs": [["typedef struct _gatt_connection_t {\n\tvoid* context;\n\n\tgattlib_event_handler_t notification_handler;\n\tvoid* notification_user_data;\n\n\tgattlib_event_handler_t indication_handler;\n\tvoid* indication_user_data;\n} gatt_connection_t;", "gatt_connection_t"], ["typedef struct {\n\tGIOChannel*               io;\n\tGAttrib*                  attrib;\n\n\t// We keep a list of characteristics to make the correspondence handle/UUID.\n\tgattlib_characteristic_t* characteristics;\n\tint                       characteristic_count;\n}", "gattlib_context_t"], ["typedef struct {\n\tuint16_t  attr_handle_start;\n\tuint16_t  attr_handle_end;\n\tuuid_t    uuid;\n}", "gattlib_primary_service_t"]],
  "visitedLines": [[347, "gattlib_discover_primary", "dbus/gattlib.c"], [345, "gattlib_discover_primary", "dbus/gattlib.c"], [341, "gattlib_discover_primary", "dbus/gattlib.c"], [364, "gattlib_discover_primary", "dbus/gattlib.c"], [322, "gattlib_discover_primary", "dbus/gattlib.c"], [335, "gattlib_discover_primary", "dbus/gattlib.c"], [342, "gattlib_discover_primary", "dbus/gattlib.c"], [344, "gattlib_discover_primary", "dbus/gattlib.c"], [354, "gattlib_discover_primary", "dbus/gattlib.c"], [315, "gattlib_discover_primary", "dbus/gattlib.c"], [349, "gattlib_discover_primary", "dbus/gattlib.c"], [340, "gattlib_discover_primary", "dbus/gattlib.c"], [314, "gattlib_discover_primary", "dbus/gattlib.c"], [331, "gattlib_discover_primary", "dbus/gattlib.c"], [355, "gattlib_discover_primary", "dbus/gattlib.c"], [358, "gattlib_discover_primary", "dbus/gattlib.c"], [346, "gattlib_discover_primary", "dbus/gattlib.c"], [348, "gattlib_discover_primary", "dbus/gattlib.c"], [360, "gattlib_discover_primary", "dbus/gattlib.c"], [357, "gattlib_discover_primary", "dbus/gattlib.c"], [361, "gattlib_discover_primary", "dbus/gattlib.c"], [343, "gattlib_discover_primary", "dbus/gattlib.c"], [316, "gattlib_discover_primary", "dbus/gattlib.c"], [330, "gattlib_discover_primary", "dbus/gattlib.c"], [320, "gattlib_discover_primary", "dbus/gattlib.c"], [368, "gattlib_discover_primary", "dbus/gattlib.c"], [334, "gattlib_discover_primary", "dbus/gattlib.c"], [329, "gattlib_discover_primary", "dbus/gattlib.c"], [359, "gattlib_discover_primary", "dbus/gattlib.c"], [353, "gattlib_discover_primary", "dbus/gattlib.c"], [318, "gattlib_discover_primary", "dbus/gattlib.c"], [339, "gattlib_discover_primary", "dbus/gattlib.c"]],
  "visitedParams": [["gatt_connection_t* connection", "gattlib_discover_primary", "dbus/gattlib.c"]],
  "vulnerableMethods": [["dbus/gattlib.c", "gattlib_discover_primary", "int gattlib_discover_primary(gatt_connection_t* connection, gattlib_primary_service_t** services, int* services_count) { /* <=== gattlib_discover_primary<duplicate>0 */ \n\tgattlib_context_t* conn_context = connection->context;\n\tOrgBluezDevice1* device = conn_context->device;\n\tconst gchar* const* service_str;\n\tGError *error = NULL;\n\n\tconst gchar* const* service_strs = org_bluez_device1_get_gatt_services(device);\n\n\tif (service_strs == NULL) {\n\t\t*services       = NULL;\n\t\t*services_count = 0;\n\t\treturn 0;\n\t}\n\n\t// Maximum number of primary services\n\tint count_max = 0, count = 0;\n\tfor (service_str = service_strs; *service_str != NULL; service_str++) {\n\t\tcount_max++;\n\t}\n\n\tgattlib_primary_service_t* primary_services = malloc(count_max * sizeof(gattlib_primary_service_t));\n\tif (primary_services == NULL) {\n\t\treturn 1;\n\t}\n\n\tfor (service_str = service_strs; *service_str != NULL; service_str++) {\n\t\terror = NULL;\n\t\tOrgBluezGattService1* service_proxy = org_bluez_gatt_service1_proxy_new_for_bus_sync(\n\t\t\t\tG_BUS_TYPE_SYSTEM,\n\t\t\t\tG_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_NONE,\n\t\t\t\t\"org.bluez\",\n\t\t\t\t*service_str,\n\t\t\t\tNULL,\n\t\t\t\t&error);\n\t\tif (service_proxy == NULL) {\n\t\t\tprintf(\"Failed to open service '%s'.\\n\", *service_str);\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (org_bluez_gatt_service1_get_primary(service_proxy)) {\n\t\t\tprimary_services[count].attr_handle_start = 0;\n\t\t\tprimary_services[count].attr_handle_end   = 0;\n\n\t\t\tgattlib_string_to_uuid(\n\t\t\t\t\torg_bluez_gatt_service1_get_uuid(service_proxy),\n\t\t\t\t\tMAX_LEN_UUID_STR + 1,\n\t\t\t\t\t&primary_services[count].uuid);\n\t\t\tcount++;\n\t\t}\n\n\t\tg_object_unref(service_proxy);\n\t}\n\n\t*services       = primary_services;\n\t*services_count = count;\n\treturn 0;\n}", 314], ["dbus/gattlib.c", "gattlib_discover_primary", "int gattlib_discover_primary(gatt_connection_t* connection, gattlib_primary_service_t** services, int* services_count) { /* <=== gattlib_discover_primary<duplicate>1 */ \n\tgattlib_context_t* conn_context = connection->context;\n\tOrgBluezDevice1* device = conn_context->device;\n\tconst gchar* const* service_str;\n\tGError *error = NULL;\n\n\tconst gchar* const* service_strs = org_bluez_device1_get_uuids(device);\n\n\tif (service_strs == NULL) {\n\t\t*services       = NULL;\n\t\t*services_count = 0;\n\t\treturn 0;\n\t}\n\n\t// Maximum number of primary services\n\tint count_max = 0, count = 0;\n\tfor (service_str = service_strs; *service_str != NULL; service_str++) {\n\t\tcount_max++;\n\t}\n\n\tgattlib_primary_service_t* primary_services = malloc(count_max * sizeof(gattlib_primary_service_t));\n\tif (primary_services == NULL) {\n\t\treturn 1;\n\t}\n\n\tGDBusObjectManager *device_manager = g_dbus_object_manager_client_new_for_bus_sync (\n\t\t\tG_BUS_TYPE_SYSTEM,\n\t\t\tG_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_NONE,\n\t\t\t\"org.bluez\",\n\t\t\t\"/\",\n\t\t\tNULL, NULL, NULL, NULL,\n\t\t\t&error);\n\tif (device_manager == NULL) {\n\t\tputs(\"Failed to get Bluez Device Manager.\");\n\t\treturn 1;\n\t}\n\n\tGList *objects = g_dbus_object_manager_get_objects(device_manager);\n\tGList *l;\n\tfor (l = objects; l != NULL; l = l->next)  {\n\t\tGDBusObject *object = l->data;\n\t\tconst char* object_path = g_dbus_object_get_object_path(G_DBUS_OBJECT(object));\n\n\t\tGDBusInterface *interface = g_dbus_object_manager_get_interface(device_manager, object_path, \"org.bluez.GattService1\");\n\t\tif (!interface) {\n\t\t\tcontinue;\n\t\t}\n\n\t\terror = NULL;\n\t\tOrgBluezGattService1* service_proxy = org_bluez_gatt_service1_proxy_new_for_bus_sync(\n\t\t\t\tG_BUS_TYPE_SYSTEM,\n\t\t\t\tG_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_NONE,\n\t\t\t\t\"org.bluez\",\n\t\t\t\tobject_path,\n\t\t\t\tNULL,\n\t\t\t\t&error);\n\t\tif (service_proxy == NULL) {\n\t\t\tprintf(\"Failed to open service '%s'.\\n\", object_path);\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Ensure the service is attached to this device\n\t\tif (strcmp(conn_context->device_object_path, org_bluez_gatt_service1_get_device(service_proxy))) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (org_bluez_gatt_service1_get_primary(service_proxy)) {\n\t\t\tprimary_services[count].attr_handle_start = 0;\n\t\t\tprimary_services[count].attr_handle_end   = 0;\n\n\t\t\tgattlib_string_to_uuid(\n\t\t\t\t\torg_bluez_gatt_service1_get_uuid(service_proxy),\n\t\t\t\t\tMAX_LEN_UUID_STR + 1,\n\t\t\t\t\t&primary_services[count].uuid);\n\t\t\tcount++;\n\t\t}\n\t}\n\n\tg_list_free_full(objects, g_object_unref);\n\tg_object_unref(device_manager);\n\n\t*services       = primary_services;\n\t*services_count = count;\n\treturn 0;\n}", 372]]
}