{
  "id": 1,
  "language": "cc",
  "cwe": "",
  "commit_url": "https://github.com/blusno1/chromium-1/commit/a3e2afaedd8190398ae45ccef34fcdee00fb19aa",
  "commit_sha": "a3e2afaedd8190398ae45ccef34fcdee00fb19aa",
  "commit_msg": "Fixed crash related to cellular network payment plan retreival.\n\nBUG=chromium-os:8864\nTEST=none\n\nReview URL: http://codereview.chromium.org/4690002\n\ngit-svn-id: svn://svn.chromium.org/chrome/trunk/src@65405 0039d316-1c4b-4281-b951-d872f2087c98",
  "pr_url": null,
  "pr_info": null,
  "file_name": "chrome/browser/chromeos/cros/network_library.cc",
  "func_name": "",
  "raw_func_from_json": "  void UpdateNetworkManagerStatus() {\n    if (!BrowserThread::CurrentlyOn(BrowserThread::UI)) {\n      BrowserThread::PostTask(\n          BrowserThread::UI, FROM_HERE,\n          NewRunnableMethod(this,\n                            &NetworkLibraryImpl::UpdateNetworkManagerStatus));\n      return;\n    }\n\n    SystemInfo* system = GetSystemInfo();\n    if (!system)\n      return;\n\n\n    std::string prev_cellular_service_path = cellular_ ?\n        cellular_->service_path() : std::string();\n\n    ClearNetworks();\n\n    ParseSystem(system, &ethernet_, &wifi_networks_, &cellular_networks_,\n                &remembered_wifi_networks_);\n\n    wifi_ = NULL;\n    for (size_t i = 0; i < wifi_networks_.size(); i++) {\n      if (wifi_networks_[i]->connecting_or_connected()) {\n        wifi_ = wifi_networks_[i];\n        break;  // There is only one connected or connecting wifi network.\n      }\n    }\n    cellular_ = NULL;\n     for (size_t i = 0; i < cellular_networks_.size(); i++) {\n       if (cellular_networks_[i]->connecting_or_connected()) {\n         cellular_ = cellular_networks_[i];\n         if (cellular_networks_[i]->service_path() !=\n                 prev_cellular_service_path) {\n          CellularDataPlanList* list = RetrieveCellularDataPlans(\n              cellular_->service_path().c_str());\n          UpdateCellularDataPlan(list);\n          FreeCellularDataPlanList(list);\n         }\n         break;  // There is only one connected or connecting cellular network.\n       }\n    }\n\n    available_devices_ = system->available_technologies;\n    enabled_devices_ = system->enabled_technologies;\n    connected_devices_ = system->connected_technologies;\n    offline_mode_ = system->offline_mode;\n\n    NotifyNetworkManagerChanged();\n    FreeSystemInfo(system);\n  }\n",
  "diff_func": "@@ -1406,13 +1406,10 @@ class NetworkLibraryImpl : public NetworkLibrary  {\n     for (size_t i = 0; i < cellular_networks_.size(); i++) {\n       if (cellular_networks_[i]->connecting_or_connected()) {\n         cellular_ = cellular_networks_[i];\n-        // If new cellular, then update data plan list.\n+        // If new cellular, then request update of the data plan list.\n         if (cellular_networks_[i]->service_path() !=\n                 prev_cellular_service_path) {\n-          CellularDataPlanList* list = RetrieveCellularDataPlans(\n-              cellular_->service_path().c_str());\n-          UpdateCellularDataPlan(list);\n-          FreeCellularDataPlanList(list);\n+          RefreshCellularDataPlans(cellular_);\n         }\n         break;  // There is only one connected or connecting cellular network.\n       }",
  "project": "Chrome",
  "commit_id": "a3e2afaedd8190398ae45ccef34fcdee00fb19aa",
  "target": 1,
  "func": "  void UpdateNetworkManagerStatus() {\n    if (!BrowserThread::CurrentlyOn(BrowserThread::UI)) {\n      BrowserThread::PostTask(\n          BrowserThread::UI, FROM_HERE,\n          NewRunnableMethod(this,\n                            &NetworkLibraryImpl::UpdateNetworkManagerStatus));\n      return;\n    }\n\n    SystemInfo* system = GetSystemInfo();\n    if (!system)\n      return;\n\n\n    std::string prev_cellular_service_path = cellular_ ?\n        cellular_->service_path() : std::string();\n\n    ClearNetworks();\n\n    ParseSystem(system, &ethernet_, &wifi_networks_, &cellular_networks_,\n                &remembered_wifi_networks_);\n\n    wifi_ = NULL;\n    for (size_t i = 0; i < wifi_networks_.size(); i++) {\n      if (wifi_networks_[i]->connecting_or_connected()) {\n        wifi_ = wifi_networks_[i];\n        break;  // There is only one connected or connecting wifi network.\n      }\n    }\n    cellular_ = NULL;\n     for (size_t i = 0; i < cellular_networks_.size(); i++) {\n       if (cellular_networks_[i]->connecting_or_connected()) {\n         cellular_ = cellular_networks_[i];\n         if (cellular_networks_[i]->service_path() !=\n                 prev_cellular_service_path) {\n          CellularDataPlanList* list = RetrieveCellularDataPlans(\n              cellular_->service_path().c_str());\n          UpdateCellularDataPlan(list);\n          FreeCellularDataPlanList(list);\n         }\n         break;  // There is only one connected or connecting cellular network.\n       }\n    }\n\n    available_devices_ = system->available_technologies;\n    enabled_devices_ = system->enabled_technologies;\n    connected_devices_ = system->connected_technologies;\n    offline_mode_ = system->offline_mode;\n\n    NotifyNetworkManagerChanged();\n    FreeSystemInfo(system);\n  }\n",
  "big_vul_idx": 183616,
  "idx": 4681,
  "hash": 176851565339666412051409584687167623341
}