{
  "id": 538,
  "language": "c",
  "cwe": "CWE-20",
  "commit_url": "https://github.com/ljalves/linux_media/commit/2def2ef2ae5f3990aabdbe8a755911902707d268",
  "commit_sha": "2def2ef2ae5f3990aabdbe8a755911902707d268",
  "commit_msg": "x86, x32: Correct invalid use of user timespec in the kernel\n\nThe x32 case for the recvmsg() timout handling is broken:\n\n  asmlinkage long compat_sys_recvmmsg(int fd, struct compat_mmsghdr __user *mmsg,\n                                      unsigned int vlen, unsigned int flags,\n                                      struct compat_timespec __user *timeout)\n  {\n          int datagrams;\n          struct timespec ktspec;\n\n          if (flags & MSG_CMSG_COMPAT)\n                  return -EINVAL;\n\n          if (COMPAT_USE_64BIT_TIME)\n                  return __sys_recvmmsg(fd, (struct mmsghdr __user *)mmsg, vlen,\n                                        flags | MSG_CMSG_COMPAT,\n                                        (struct timespec *) timeout);\n          ...\n\nThe timeout pointer parameter is provided by userland (hence the __user\nannotation) but for x32 syscalls it's simply cast to a kernel pointer\nand is passed to __sys_recvmmsg which will eventually directly\ndereference it for both reading and writing.  Other callers to\n__sys_recvmmsg properly copy from userland to the kernel first.\n\nThe bug was introduced by commit ee4fa23c4bfc (\"compat: Use\nCOMPAT_USE_64BIT_TIME in net/compat.c\") and should affect all kernels\nsince 3.4 (and perhaps vendor kernels if they backported x32 support\nalong with this code).\n\nNote that CONFIG_X86_X32_ABI gets enabled at build time and only if\nCONFIG_X86_X32 is enabled and ld can build x32 executables.\n\nOther uses of COMPAT_USE_64BIT_TIME seem fine.\n\nThis addresses CVE-2014-0038.\n\nSigned-off-by: PaX Team <pageexec@freemail.hu>\nSigned-off-by: H. Peter Anvin <hpa@linux.intel.com>\nCc: <stable@vger.kernel.org> # v3.4+\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
  "pr_url": null,
  "pr_info": null,
  "file_name": "net/compat.c",
  "func_name": "",
  "raw_func_from_json": "asmlinkage long compat_sys_recvmmsg(int fd, struct compat_mmsghdr __user *mmsg,\n\t\t\t\t    unsigned int vlen, unsigned int flags,\n\t\t\t\t    struct compat_timespec __user *timeout)\n{\n\tint datagrams;\n\tstruct timespec ktspec;\n\n \tif (flags & MSG_CMSG_COMPAT)\n \t\treturn -EINVAL;\n \n\tif (COMPAT_USE_64BIT_TIME)\n\t\treturn __sys_recvmmsg(fd, (struct mmsghdr __user *)mmsg, vlen,\n\t\t\t\t      flags | MSG_CMSG_COMPAT,\n\t\t\t\t      (struct timespec *) timeout);\n \tif (timeout == NULL)\n \t\treturn __sys_recvmmsg(fd, (struct mmsghdr __user *)mmsg, vlen,\n \t\t\t\t      flags | MSG_CMSG_COMPAT, NULL);\n \n\tif (get_compat_timespec(&ktspec, timeout))\n \t\treturn -EFAULT;\n \n \tdatagrams = __sys_recvmmsg(fd, (struct mmsghdr __user *)mmsg, vlen,\n \t\t\t\t   flags | MSG_CMSG_COMPAT, &ktspec);\n\tif (datagrams > 0 && put_compat_timespec(&ktspec, timeout))\n \t\tdatagrams = -EFAULT;\n \n \treturn datagrams;\n}\n",
  "diff_func": "@@ -780,21 +780,16 @@ asmlinkage long compat_sys_recvmmsg(int fd, struct compat_mmsghdr __user *mmsg,\n \tif (flags & MSG_CMSG_COMPAT)\n \t\treturn -EINVAL;\n \n-\tif (COMPAT_USE_64BIT_TIME)\n-\t\treturn __sys_recvmmsg(fd, (struct mmsghdr __user *)mmsg, vlen,\n-\t\t\t\t      flags | MSG_CMSG_COMPAT,\n-\t\t\t\t      (struct timespec *) timeout);\n-\n \tif (timeout == NULL)\n \t\treturn __sys_recvmmsg(fd, (struct mmsghdr __user *)mmsg, vlen,\n \t\t\t\t      flags | MSG_CMSG_COMPAT, NULL);\n \n-\tif (get_compat_timespec(&ktspec, timeout))\n+\tif (compat_get_timespec(&ktspec, timeout))\n \t\treturn -EFAULT;\n \n \tdatagrams = __sys_recvmmsg(fd, (struct mmsghdr __user *)mmsg, vlen,\n \t\t\t\t   flags | MSG_CMSG_COMPAT, &ktspec);\n-\tif (datagrams > 0 && put_compat_timespec(&ktspec, timeout))\n+\tif (datagrams > 0 && compat_put_timespec(&ktspec, timeout))\n \t\tdatagrams = -EFAULT;\n \n \treturn datagrams;",
  "project": "linux",
  "commit_id": "2def2ef2ae5f3990aabdbe8a755911902707d268",
  "target": 1,
  "func": "asmlinkage long compat_sys_recvmmsg(int fd, struct compat_mmsghdr __user *mmsg,\n\t\t\t\t    unsigned int vlen, unsigned int flags,\n\t\t\t\t    struct compat_timespec __user *timeout)\n{\n\tint datagrams;\n\tstruct timespec ktspec;\n\n \tif (flags & MSG_CMSG_COMPAT)\n \t\treturn -EINVAL;\n \n\tif (COMPAT_USE_64BIT_TIME)\n\t\treturn __sys_recvmmsg(fd, (struct mmsghdr __user *)mmsg, vlen,\n\t\t\t\t      flags | MSG_CMSG_COMPAT,\n\t\t\t\t      (struct timespec *) timeout);\n \tif (timeout == NULL)\n \t\treturn __sys_recvmmsg(fd, (struct mmsghdr __user *)mmsg, vlen,\n \t\t\t\t      flags | MSG_CMSG_COMPAT, NULL);\n \n\tif (get_compat_timespec(&ktspec, timeout))\n \t\treturn -EFAULT;\n \n \tdatagrams = __sys_recvmmsg(fd, (struct mmsghdr __user *)mmsg, vlen,\n \t\t\t\t   flags | MSG_CMSG_COMPAT, &ktspec);\n\tif (datagrams > 0 && put_compat_timespec(&ktspec, timeout))\n \t\tdatagrams = -EFAULT;\n \n \treturn datagrams;\n}\n",
  "big_vul_idx": 179639,
  "idx": 1345,
  "hash": 89530709225040186143754865631195577925
}