{
  "id": 762,
  "language": "c",
  "cwe": "",
  "commit_url": "https://github.com/ljalves/linux_media/commit/4ec0ef3a82125efc36173062a50624550a900ae0",
  "commit_sha": "4ec0ef3a82125efc36173062a50624550a900ae0",
  "commit_msg": "USB: iowarrior: fix oops with malicious USB descriptors\n\nThe iowarrior driver expects at least one valid endpoint.  If given\nmalicious descriptors that specify 0 for the number of endpoints,\nit will crash in the probe function.  Ensure there is at least\none endpoint on the interface before using it.\n\nThe full report of this issue can be found here:\nhttp://seclists.org/bugtraq/2016/Mar/87\n\nReported-by: Ralf Spenneberg <ralf@spenneberg.net>\nCc: stable <stable@vger.kernel.org>\nSigned-off-by: Josh Boyer <jwboyer@fedoraproject.org>\nSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>",
  "pr_url": null,
  "pr_info": null,
  "file_name": "drivers/usb/misc/iowarrior.c",
  "func_name": "",
  "raw_func_from_json": "static int iowarrior_probe(struct usb_interface *interface,\n\t\t\t   const struct usb_device_id *id)\n{\n\tstruct usb_device *udev = interface_to_usbdev(interface);\n\tstruct iowarrior *dev = NULL;\n\tstruct usb_host_interface *iface_desc;\n\tstruct usb_endpoint_descriptor *endpoint;\n\tint i;\n\tint retval = -ENOMEM;\n\n\t/* allocate memory for our device state and initialize it */\n\tdev = kzalloc(sizeof(struct iowarrior), GFP_KERNEL);\n\tif (dev == NULL) {\n\t\tdev_err(&interface->dev, \"Out of memory\\n\");\n\t\treturn retval;\n\t}\n\n\tmutex_init(&dev->mutex);\n\n\tatomic_set(&dev->intr_idx, 0);\n\tatomic_set(&dev->read_idx, 0);\n\tspin_lock_init(&dev->intr_idx_lock);\n\tatomic_set(&dev->overflow_flag, 0);\n\tinit_waitqueue_head(&dev->read_wait);\n\tatomic_set(&dev->write_busy, 0);\n\tinit_waitqueue_head(&dev->write_wait);\n\n\tdev->udev = udev;\n\tdev->interface = interface;\n\n \tiface_desc = interface->cur_altsetting;\n \tdev->product_id = le16_to_cpu(udev->descriptor.idProduct);\n \n \t/* set up the endpoint information */\n \tfor (i = 0; i < iface_desc->desc.bNumEndpoints; ++i) {\n \t\tendpoint = &iface_desc->endpoint[i].desc;\n\n\t\tif (usb_endpoint_is_int_in(endpoint))\n\t\t\tdev->int_in_endpoint = endpoint;\n\t\tif (usb_endpoint_is_int_out(endpoint))\n\t\t\t/* this one will match for the IOWarrior56 only */\n\t\t\tdev->int_out_endpoint = endpoint;\n\t}\n\t/* we have to check the report_size often, so remember it in the endianness suitable for our machine */\n\tdev->report_size = usb_endpoint_maxp(dev->int_in_endpoint);\n\tif ((dev->interface->cur_altsetting->desc.bInterfaceNumber == 0) &&\n\t    (dev->product_id == USB_DEVICE_ID_CODEMERCS_IOW56))\n\t\t/* IOWarrior56 has wMaxPacketSize different from report size */\n\t\tdev->report_size = 7;\n\n\t/* create the urb and buffer for reading */\n\tdev->int_in_urb = usb_alloc_urb(0, GFP_KERNEL);\n\tif (!dev->int_in_urb) {\n\t\tdev_err(&interface->dev, \"Couldn't allocate interrupt_in_urb\\n\");\n\t\tgoto error;\n\t}\n\tdev->int_in_buffer = kmalloc(dev->report_size, GFP_KERNEL);\n\tif (!dev->int_in_buffer) {\n\t\tdev_err(&interface->dev, \"Couldn't allocate int_in_buffer\\n\");\n\t\tgoto error;\n\t}\n\tusb_fill_int_urb(dev->int_in_urb, dev->udev,\n\t\t\t usb_rcvintpipe(dev->udev,\n\t\t\t\t\tdev->int_in_endpoint->bEndpointAddress),\n\t\t\t dev->int_in_buffer, dev->report_size,\n\t\t\t iowarrior_callback, dev,\n\t\t\t dev->int_in_endpoint->bInterval);\n\t/* create an internal buffer for interrupt data from the device */\n\tdev->read_queue =\n\t    kmalloc(((dev->report_size + 1) * MAX_INTERRUPT_BUFFER),\n\t\t    GFP_KERNEL);\n\tif (!dev->read_queue) {\n\t\tdev_err(&interface->dev, \"Couldn't allocate read_queue\\n\");\n\t\tgoto error;\n\t}\n\t/* Get the serial-number of the chip */\n\tmemset(dev->chip_serial, 0x00, sizeof(dev->chip_serial));\n\tusb_string(udev, udev->descriptor.iSerialNumber, dev->chip_serial,\n\t\t   sizeof(dev->chip_serial));\n\tif (strlen(dev->chip_serial) != 8)\n\t\tmemset(dev->chip_serial, 0x00, sizeof(dev->chip_serial));\n\n\t/* Set the idle timeout to 0, if this is interface 0 */\n\tif (dev->interface->cur_altsetting->desc.bInterfaceNumber == 0) {\n\t    usb_control_msg(udev, usb_sndctrlpipe(udev, 0),\n\t\t\t    0x0A,\n\t\t\t    USB_TYPE_CLASS | USB_RECIP_INTERFACE, 0,\n\t\t\t    0, NULL, 0, USB_CTRL_SET_TIMEOUT);\n\t}\n\t/* allow device read and ioctl */\n\tdev->present = 1;\n\n\t/* we can register the device now, as it is ready */\n\tusb_set_intfdata(interface, dev);\n\n\tretval = usb_register_dev(interface, &iowarrior_class);\n\tif (retval) {\n\t\t/* something prevented us from registering this driver */\n\t\tdev_err(&interface->dev, \"Not able to get a minor for this device.\\n\");\n\t\tusb_set_intfdata(interface, NULL);\n\t\tgoto error;\n\t}\n\n\tdev->minor = interface->minor;\n\n\t/* let the user know what node this device is now attached to */\n\tdev_info(&interface->dev, \"IOWarrior product=0x%x, serial=%s interface=%d \"\n\t\t \"now attached to iowarrior%d\\n\", dev->product_id, dev->chip_serial,\n\t\t iface_desc->desc.bInterfaceNumber, dev->minor - IOWARRIOR_MINOR_BASE);\n\treturn retval;\n\nerror:\n\tiowarrior_delete(dev);\n\treturn retval;\n}\n",
  "diff_func": "@@ -787,6 +787,12 @@ static int iowarrior_probe(struct usb_interface *interface,\n \tiface_desc = interface->cur_altsetting;\n \tdev->product_id = le16_to_cpu(udev->descriptor.idProduct);\n \n+\tif (iface_desc->desc.bNumEndpoints < 1) {\n+\t\tdev_err(&interface->dev, \"Invalid number of endpoints\\n\");\n+\t\tretval = -EINVAL;\n+\t\tgoto error;\n+\t}\n+\n \t/* set up the endpoint information */\n \tfor (i = 0; i < iface_desc->desc.bNumEndpoints; ++i) {\n \t\tendpoint = &iface_desc->endpoint[i].desc;",
  "project": "linux",
  "commit_id": "4ec0ef3a82125efc36173062a50624550a900ae0",
  "target": 1,
  "func": "static int iowarrior_probe(struct usb_interface *interface,\n\t\t\t   const struct usb_device_id *id)\n{\n\tstruct usb_device *udev = interface_to_usbdev(interface);\n\tstruct iowarrior *dev = NULL;\n\tstruct usb_host_interface *iface_desc;\n\tstruct usb_endpoint_descriptor *endpoint;\n\tint i;\n\tint retval = -ENOMEM;\n\n\t/* allocate memory for our device state and initialize it */\n\tdev = kzalloc(sizeof(struct iowarrior), GFP_KERNEL);\n\tif (dev == NULL) {\n\t\tdev_err(&interface->dev, \"Out of memory\\n\");\n\t\treturn retval;\n\t}\n\n\tmutex_init(&dev->mutex);\n\n\tatomic_set(&dev->intr_idx, 0);\n\tatomic_set(&dev->read_idx, 0);\n\tspin_lock_init(&dev->intr_idx_lock);\n\tatomic_set(&dev->overflow_flag, 0);\n\tinit_waitqueue_head(&dev->read_wait);\n\tatomic_set(&dev->write_busy, 0);\n\tinit_waitqueue_head(&dev->write_wait);\n\n\tdev->udev = udev;\n\tdev->interface = interface;\n\n \tiface_desc = interface->cur_altsetting;\n \tdev->product_id = le16_to_cpu(udev->descriptor.idProduct);\n \n \t/* set up the endpoint information */\n \tfor (i = 0; i < iface_desc->desc.bNumEndpoints; ++i) {\n \t\tendpoint = &iface_desc->endpoint[i].desc;\n\n\t\tif (usb_endpoint_is_int_in(endpoint))\n\t\t\tdev->int_in_endpoint = endpoint;\n\t\tif (usb_endpoint_is_int_out(endpoint))\n\t\t\t/* this one will match for the IOWarrior56 only */\n\t\t\tdev->int_out_endpoint = endpoint;\n\t}\n\t/* we have to check the report_size often, so remember it in the endianness suitable for our machine */\n\tdev->report_size = usb_endpoint_maxp(dev->int_in_endpoint);\n\tif ((dev->interface->cur_altsetting->desc.bInterfaceNumber == 0) &&\n\t    (dev->product_id == USB_DEVICE_ID_CODEMERCS_IOW56))\n\t\t/* IOWarrior56 has wMaxPacketSize different from report size */\n\t\tdev->report_size = 7;\n\n\t/* create the urb and buffer for reading */\n\tdev->int_in_urb = usb_alloc_urb(0, GFP_KERNEL);\n\tif (!dev->int_in_urb) {\n\t\tdev_err(&interface->dev, \"Couldn't allocate interrupt_in_urb\\n\");\n\t\tgoto error;\n\t}\n\tdev->int_in_buffer = kmalloc(dev->report_size, GFP_KERNEL);\n\tif (!dev->int_in_buffer) {\n\t\tdev_err(&interface->dev, \"Couldn't allocate int_in_buffer\\n\");\n\t\tgoto error;\n\t}\n\tusb_fill_int_urb(dev->int_in_urb, dev->udev,\n\t\t\t usb_rcvintpipe(dev->udev,\n\t\t\t\t\tdev->int_in_endpoint->bEndpointAddress),\n\t\t\t dev->int_in_buffer, dev->report_size,\n\t\t\t iowarrior_callback, dev,\n\t\t\t dev->int_in_endpoint->bInterval);\n\t/* create an internal buffer for interrupt data from the device */\n\tdev->read_queue =\n\t    kmalloc(((dev->report_size + 1) * MAX_INTERRUPT_BUFFER),\n\t\t    GFP_KERNEL);\n\tif (!dev->read_queue) {\n\t\tdev_err(&interface->dev, \"Couldn't allocate read_queue\\n\");\n\t\tgoto error;\n\t}\n\t/* Get the serial-number of the chip */\n\tmemset(dev->chip_serial, 0x00, sizeof(dev->chip_serial));\n\tusb_string(udev, udev->descriptor.iSerialNumber, dev->chip_serial,\n\t\t   sizeof(dev->chip_serial));\n\tif (strlen(dev->chip_serial) != 8)\n\t\tmemset(dev->chip_serial, 0x00, sizeof(dev->chip_serial));\n\n\t/* Set the idle timeout to 0, if this is interface 0 */\n\tif (dev->interface->cur_altsetting->desc.bInterfaceNumber == 0) {\n\t    usb_control_msg(udev, usb_sndctrlpipe(udev, 0),\n\t\t\t    0x0A,\n\t\t\t    USB_TYPE_CLASS | USB_RECIP_INTERFACE, 0,\n\t\t\t    0, NULL, 0, USB_CTRL_SET_TIMEOUT);\n\t}\n\t/* allow device read and ioctl */\n\tdev->present = 1;\n\n\t/* we can register the device now, as it is ready */\n\tusb_set_intfdata(interface, dev);\n\n\tretval = usb_register_dev(interface, &iowarrior_class);\n\tif (retval) {\n\t\t/* something prevented us from registering this driver */\n\t\tdev_err(&interface->dev, \"Not able to get a minor for this device.\\n\");\n\t\tusb_set_intfdata(interface, NULL);\n\t\tgoto error;\n\t}\n\n\tdev->minor = interface->minor;\n\n\t/* let the user know what node this device is now attached to */\n\tdev_info(&interface->dev, \"IOWarrior product=0x%x, serial=%s interface=%d \"\n\t\t \"now attached to iowarrior%d\\n\", dev->product_id, dev->chip_serial,\n\t\t iface_desc->desc.bInterfaceNumber, dev->minor - IOWARRIOR_MINOR_BASE);\n\treturn retval;\n\nerror:\n\tiowarrior_delete(dev);\n\treturn retval;\n}\n",
  "big_vul_idx": 180602,
  "idx": 2179,
  "hash": 184277450702665195019753334820549686314
}