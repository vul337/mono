{
  "id": 989,
  "language": "cpp",
  "cwe": "",
  "commit_url": "https://github.com/openjdk/jdk17u/commit/860464e46105b98ccf21e98abe2dc6e80155887c",
  "commit_sha": "860464e46105b98ccf21e98abe2dc6e80155887c",
  "commit_msg": "8281866: Enhance MethodHandle invocations\n\nReviewed-by: mbaesken\nBackport-of: d974d9da365f787f67971d88c79371c8b0769f75",
  "pr_url": null,
  "pr_info": null,
  "file_name": "src/hotspot/share/interpreter/linkResolver.cpp",
  "func_name": "",
  "raw_func_from_json": "void LinkResolver::resolve_handle_call(CallInfo& result,\n                                       const LinkInfo& link_info,\n                                       TRAPS) {\n  // JSR 292:  this must be an implicitly generated method MethodHandle.invokeExact(*...) or similar\n  Klass* resolved_klass = link_info.resolved_klass();\n  assert(resolved_klass == vmClasses::MethodHandle_klass() ||\n         resolved_klass == vmClasses::VarHandle_klass(), \"\");\n  assert(MethodHandles::is_signature_polymorphic_name(link_info.name()), \"\");\n  Handle resolved_appendix;\n  Method* resolved_method = lookup_polymorphic_method(link_info, &resolved_appendix, CHECK);\n  result.set_handle(resolved_klass, methodHandle(THREAD, resolved_method), resolved_appendix, CHECK);\n}",
  "diff_func": "@@ -1709,8 +1709,31 @@ void LinkResolver::resolve_handle_call(CallInfo& result,\n          resolved_klass == vmClasses::VarHandle_klass(), \"\");\n   assert(MethodHandles::is_signature_polymorphic_name(link_info.name()), \"\");\n   Handle resolved_appendix;\n-  Method* resolved_method = lookup_polymorphic_method(link_info, &resolved_appendix, CHECK);\n-  result.set_handle(resolved_klass, methodHandle(THREAD, resolved_method), resolved_appendix, CHECK);\n+  Method* m = lookup_polymorphic_method(link_info, &resolved_appendix, CHECK);\n+  methodHandle resolved_method(THREAD, m);\n+\n+  if (link_info.check_access()) {\n+    Symbol* name = link_info.name();\n+    vmIntrinsics::ID iid = MethodHandles::signature_polymorphic_name_id(name);\n+    if (MethodHandles::is_signature_polymorphic_intrinsic(iid)) {\n+      // Check if method can be accessed by the referring class.\n+      // MH.linkTo* invocations are not rewritten to invokehandle.\n+      assert(iid == vmIntrinsicID::_invokeBasic, \"%s\", vmIntrinsics::name_at(iid));\n+\n+      Klass* current_klass = link_info.current_klass();\n+      assert(current_klass != NULL , \"current_klass should not be null\");\n+      check_method_accessability(current_klass,\n+                                 resolved_klass,\n+                                 resolved_method->method_holder(),\n+                                 resolved_method,\n+                                 CHECK);\n+    } else {\n+      // Java code is free to arbitrarily link signature-polymorphic invokers.\n+      assert(iid == vmIntrinsics::_invokeGeneric, \"not an invoker: %s\", vmIntrinsics::name_at(iid));\n+      assert(MethodHandles::is_signature_polymorphic_public_name(resolved_klass, name), \"not public\");\n+    }\n+  }\n+  result.set_handle(resolved_klass, resolved_method, resolved_appendix, CHECK);\n }\n \n void LinkResolver::resolve_invokedynamic(CallInfo& result, const constantPoolHandle& pool, int indy_index, TRAPS) {",
  "func": "void LinkResolver::resolve_handle_call(CallInfo& result,\n                                       const LinkInfo& link_info,\n                                       TRAPS) {\n  // JSR 292:  this must be an implicitly generated method MethodHandle.invokeExact(*...) or similar\n  Klass* resolved_klass = link_info.resolved_klass();\n  assert(resolved_klass == vmClasses::MethodHandle_klass() ||\n         resolved_klass == vmClasses::VarHandle_klass(), \"\");\n  assert(MethodHandles::is_signature_polymorphic_name(link_info.name()), \"\");\n  Handle resolved_appendix;\n  Method* resolved_method = lookup_polymorphic_method(link_info, &resolved_appendix, CHECK);\n  result.set_handle(resolved_klass, methodHandle(THREAD, resolved_method), resolved_appendix, CHECK);\n}",
  "project": "jdk17u",
  "hash": 30695701720337285266835790248006528789,
  "size": 12,
  "commit_id": "860464e46105b98ccf21e98abe2dc6e80155887c",
  "message": "8281866: Enhance MethodHandle invocations\n\nReviewed-by: mbaesken\nBackport-of: d974d9da365f787f67971d88c79371c8b0769f75",
  "target": 1,
  "dataset": "other",
  "idx": 208699
}