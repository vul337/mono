{
  "id": 855,
  "language": "cpp",
  "cwe": "",
  "commit_url": "https://github.com/RGB-loop/spice/commit/ca5bbc5692e052159bce1a75f55dc60b36078749",
  "commit_sha": "ca5bbc5692e052159bce1a75f55dc60b36078749",
  "commit_msg": "With OpenSSL 1.1: Disable client-initiated renegotiation.\n\nFixes issue #49\nFixes BZ#1904459\n\nSigned-off-by: Julien Ropé <jrope@redhat.com>\nReported-by: BlackKD\nAcked-by: Frediano Ziglio <fziglio@redhat.com>",
  "pr_url": null,
  "pr_info": null,
  "file_name": "server/reds.cpp",
  "func_name": "",
  "raw_func_from_json": "static int reds_init_ssl(RedsState *reds)\n{\n    const SSL_METHOD *ssl_method;\n    int return_code;\n    /* Limit connection to TLSv1.1 or newer.\n     * When some other SSL/TLS version becomes obsolete, add it to this\n     * variable. */\n    long ssl_options = SSL_OP_NO_SSLv2 | SSL_OP_NO_SSLv3 | SSL_OP_NO_COMPRESSION | SSL_OP_NO_TLSv1;\n\n    /* Global system initialization*/\n    openssl_global_init();\n\n    /* Create our context*/\n    /* SSLv23_method() handles TLSv1.x in addition to SSLv2/v3 */\n    ssl_method = SSLv23_method();\n    reds->ctx = SSL_CTX_new(ssl_method);\n    if (!reds->ctx) {\n        spice_warning(\"Could not allocate new SSL context\");\n        red_dump_openssl_errors();\n        return -1;\n    }\n\n    SSL_CTX_set_options(reds->ctx, ssl_options);\n#if HAVE_DECL_SSL_CTX_SET_ECDH_AUTO || defined(SSL_CTX_set_ecdh_auto)\n    SSL_CTX_set_ecdh_auto(reds->ctx, 1);\n#endif\n\n    /* Load our keys and certificates*/\n    return_code = SSL_CTX_use_certificate_chain_file(reds->ctx, reds->config->ssl_parameters.certs_file);\n    if (return_code == 1) {\n        spice_debug(\"Loaded certificates from %s\", reds->config->ssl_parameters.certs_file);\n    } else {\n        spice_warning(\"Could not load certificates from %s\", reds->config->ssl_parameters.certs_file);\n        red_dump_openssl_errors();\n        return -1;\n    }\n\n    SSL_CTX_set_default_passwd_cb(reds->ctx, ssl_password_cb);\n    SSL_CTX_set_default_passwd_cb_userdata(reds->ctx, reds);\n\n    return_code = SSL_CTX_use_PrivateKey_file(reds->ctx, reds->config->ssl_parameters.private_key_file,\n                                              SSL_FILETYPE_PEM);\n    if (return_code == 1) {\n        spice_debug(\"Using private key from %s\", reds->config->ssl_parameters.private_key_file);\n    } else {\n        spice_warning(\"Could not use private key file\");\n        return -1;\n    }\n\n    /* Load the CAs we trust*/\n    return_code = SSL_CTX_load_verify_locations(reds->ctx, reds->config->ssl_parameters.ca_certificate_file, 0);\n    if (return_code == 1) {\n        spice_debug(\"Loaded CA certificates from %s\", reds->config->ssl_parameters.ca_certificate_file);\n    } else {\n        spice_warning(\"Could not use CA file %s\", reds->config->ssl_parameters.ca_certificate_file);\n        red_dump_openssl_errors();\n        return -1;\n    }\n\n    if (strlen(reds->config->ssl_parameters.dh_key_file) > 0) {\n        if (load_dh_params(reds->ctx, reds->config->ssl_parameters.dh_key_file) < 0) {\n            return -1;\n        }\n    }\n\n    SSL_CTX_set_session_id_context(reds->ctx, (const unsigned char *)\"SPICE\", 5);\n    if (strlen(reds->config->ssl_parameters.ciphersuite) > 0) {\n        if (!SSL_CTX_set_cipher_list(reds->ctx, reds->config->ssl_parameters.ciphersuite)) {\n            return -1;\n        }\n    }\n\n    return 0;\n}",
  "diff_func": "@@ -2753,6 +2753,10 @@ static int reds_init_ssl(RedsState *reds)\n      * When some other SSL/TLS version becomes obsolete, add it to this\n      * variable. */\n     long ssl_options = SSL_OP_NO_SSLv2 | SSL_OP_NO_SSLv3 | SSL_OP_NO_COMPRESSION | SSL_OP_NO_TLSv1;\n+#ifdef SSL_OP_NO_RENEGOTIATION\n+    // With OpenSSL 1.1: Disable all renegotiation in TLSv1.2 and earlier\n+    ssl_options |= SSL_OP_NO_RENEGOTIATION;\n+#endif\n \n     /* Global system initialization*/\n     openssl_global_init();",
  "func": "static int reds_init_ssl(RedsState *reds)\n{\n    const SSL_METHOD *ssl_method;\n    int return_code;\n    /* Limit connection to TLSv1.1 or newer.\n     * When some other SSL/TLS version becomes obsolete, add it to this\n     * variable. */\n    long ssl_options = SSL_OP_NO_SSLv2 | SSL_OP_NO_SSLv3 | SSL_OP_NO_COMPRESSION | SSL_OP_NO_TLSv1;\n\n    /* Global system initialization*/\n    openssl_global_init();\n\n    /* Create our context*/\n    /* SSLv23_method() handles TLSv1.x in addition to SSLv2/v3 */\n    ssl_method = SSLv23_method();\n    reds->ctx = SSL_CTX_new(ssl_method);\n    if (!reds->ctx) {\n        spice_warning(\"Could not allocate new SSL context\");\n        red_dump_openssl_errors();\n        return -1;\n    }\n\n    SSL_CTX_set_options(reds->ctx, ssl_options);\n#if HAVE_DECL_SSL_CTX_SET_ECDH_AUTO || defined(SSL_CTX_set_ecdh_auto)\n    SSL_CTX_set_ecdh_auto(reds->ctx, 1);\n#endif\n\n    /* Load our keys and certificates*/\n    return_code = SSL_CTX_use_certificate_chain_file(reds->ctx, reds->config->ssl_parameters.certs_file);\n    if (return_code == 1) {\n        spice_debug(\"Loaded certificates from %s\", reds->config->ssl_parameters.certs_file);\n    } else {\n        spice_warning(\"Could not load certificates from %s\", reds->config->ssl_parameters.certs_file);\n        red_dump_openssl_errors();\n        return -1;\n    }\n\n    SSL_CTX_set_default_passwd_cb(reds->ctx, ssl_password_cb);\n    SSL_CTX_set_default_passwd_cb_userdata(reds->ctx, reds);\n\n    return_code = SSL_CTX_use_PrivateKey_file(reds->ctx, reds->config->ssl_parameters.private_key_file,\n                                              SSL_FILETYPE_PEM);\n    if (return_code == 1) {\n        spice_debug(\"Using private key from %s\", reds->config->ssl_parameters.private_key_file);\n    } else {\n        spice_warning(\"Could not use private key file\");\n        return -1;\n    }\n\n    /* Load the CAs we trust*/\n    return_code = SSL_CTX_load_verify_locations(reds->ctx, reds->config->ssl_parameters.ca_certificate_file, 0);\n    if (return_code == 1) {\n        spice_debug(\"Loaded CA certificates from %s\", reds->config->ssl_parameters.ca_certificate_file);\n    } else {\n        spice_warning(\"Could not use CA file %s\", reds->config->ssl_parameters.ca_certificate_file);\n        red_dump_openssl_errors();\n        return -1;\n    }\n\n    if (strlen(reds->config->ssl_parameters.dh_key_file) > 0) {\n        if (load_dh_params(reds->ctx, reds->config->ssl_parameters.dh_key_file) < 0) {\n            return -1;\n        }\n    }\n\n    SSL_CTX_set_session_id_context(reds->ctx, (const unsigned char *)\"SPICE\", 5);\n    if (strlen(reds->config->ssl_parameters.ciphersuite) > 0) {\n        if (!SSL_CTX_set_cipher_list(reds->ctx, reds->config->ssl_parameters.ciphersuite)) {\n            return -1;\n        }\n    }\n\n    return 0;\n}",
  "project": "spice",
  "hash": 122101275279986190714681083473068742276,
  "size": 74,
  "commit_id": "ca5bbc5692e052159bce1a75f55dc60b36078749",
  "message": "With OpenSSL 1.1: Disable client-initiated renegotiation.\n\nFixes issue #49\nFixes BZ#1904459\n\nSigned-off-by: Julien Ropé <jrope@redhat.com>\nReported-by: BlackKD\nAcked-by: Frediano Ziglio <fziglio@redhat.com>",
  "target": 1,
  "dataset": "other",
  "idx": 202678
}