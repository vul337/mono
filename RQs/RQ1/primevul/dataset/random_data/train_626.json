{
  "id": 626,
  "language": "c",
  "cwe": "CWE-362",
  "commit_url": "https://github.com/viaembedded/arm-soc/commit/a3a8784454692dd72e5d5d34dcdab17b4420e74c",
  "commit_sha": "a3a8784454692dd72e5d5d34dcdab17b4420e74c",
  "commit_msg": "KEYS: close race between key lookup and freeing\n\nWhen a key is being garbage collected, it's key->user would get put before\nthe ->destroy() callback is called, where the key is removed from it's\nrespective tracking structures.\n\nThis leaves a key hanging in a semi-invalid state which leaves a window open\nfor a different task to try an access key->user. An example is\nfind_keyring_by_name() which would dereference key->user for a key that is\nin the process of being garbage collected (where key->user was freed but\n->destroy() wasn't called yet - so it's still present in the linked list).\n\nThis would cause either a panic, or corrupt memory.\n\nFixes CVE-2014-9529.\n\nSigned-off-by: Sasha Levin <sasha.levin@oracle.com>\nSigned-off-by: David Howells <dhowells@redhat.com>",
  "pr_url": null,
  "pr_info": null,
  "file_name": "security/keys/gc.c",
  "func_name": "",
  "raw_func_from_json": "static noinline void key_gc_unused_keys(struct list_head *keys)\n{\n\twhile (!list_empty(keys)) {\n\t\tstruct key *key =\n\t\t\tlist_entry(keys->next, struct key, graveyard_link);\n\t\tlist_del(&key->graveyard_link);\n\n\t\tkdebug(\"- %u\", key->serial);\n\t\tkey_check(key);\n\n\t\tsecurity_key_free(key);\n\n\t\t/* deal with the user's key tracking and quota */\n\t\tif (test_bit(KEY_FLAG_IN_QUOTA, &key->flags)) {\n\t\t\tspin_lock(&key->user->lock);\n\t\t\tkey->user->qnkeys--;\n\t\t\tkey->user->qnbytes -= key->quotalen;\n\t\t\tspin_unlock(&key->user->lock);\n\t\t}\n\n\t\tatomic_dec(&key->user->nkeys);\n \t\tif (test_bit(KEY_FLAG_INSTANTIATED, &key->flags))\n \t\t\tatomic_dec(&key->user->nikeys);\n \n\t\tkey_user_put(key->user);\n \t\t/* now throw away the key memory */\n \t\tif (key->type->destroy)\n \t\t\tkey->type->destroy(key);\n \n \t\tkfree(key->description);\n \n #ifdef KEY_DEBUGGING\n\t\tkey->magic = KEY_DEBUG_MAGIC_X;\n#endif\n\t\tkmem_cache_free(key_jar, key);\n\t}\n}\n",
  "diff_func": "@@ -148,12 +148,12 @@ static noinline void key_gc_unused_keys(struct list_head *keys)\n \t\tif (test_bit(KEY_FLAG_INSTANTIATED, &key->flags))\n \t\t\tatomic_dec(&key->user->nikeys);\n \n-\t\tkey_user_put(key->user);\n-\n \t\t/* now throw away the key memory */\n \t\tif (key->type->destroy)\n \t\t\tkey->type->destroy(key);\n \n+\t\tkey_user_put(key->user);\n+\n \t\tkfree(key->description);\n \n #ifdef KEY_DEBUGGING",
  "project": "linux",
  "commit_id": "a3a8784454692dd72e5d5d34dcdab17b4420e74c",
  "target": 1,
  "func": "static noinline void key_gc_unused_keys(struct list_head *keys)\n{\n\twhile (!list_empty(keys)) {\n\t\tstruct key *key =\n\t\t\tlist_entry(keys->next, struct key, graveyard_link);\n\t\tlist_del(&key->graveyard_link);\n\n\t\tkdebug(\"- %u\", key->serial);\n\t\tkey_check(key);\n\n\t\tsecurity_key_free(key);\n\n\t\t/* deal with the user's key tracking and quota */\n\t\tif (test_bit(KEY_FLAG_IN_QUOTA, &key->flags)) {\n\t\t\tspin_lock(&key->user->lock);\n\t\t\tkey->user->qnkeys--;\n\t\t\tkey->user->qnbytes -= key->quotalen;\n\t\t\tspin_unlock(&key->user->lock);\n\t\t}\n\n\t\tatomic_dec(&key->user->nkeys);\n \t\tif (test_bit(KEY_FLAG_INSTANTIATED, &key->flags))\n \t\t\tatomic_dec(&key->user->nikeys);\n \n\t\tkey_user_put(key->user);\n \t\t/* now throw away the key memory */\n \t\tif (key->type->destroy)\n \t\t\tkey->type->destroy(key);\n \n \t\tkfree(key->description);\n \n #ifdef KEY_DEBUGGING\n\t\tkey->magic = KEY_DEBUG_MAGIC_X;\n#endif\n\t\tkmem_cache_free(key_jar, key);\n\t}\n}\n",
  "big_vul_idx": 179955,
  "idx": 1612,
  "hash": 146841926446616660897180057921874652596
}