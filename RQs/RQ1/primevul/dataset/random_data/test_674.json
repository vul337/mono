{
  "id": 674,
  "language": "cc",
  "cwe": "",
  "commit_url": "https://github.com/VicFlores/Drogon-Api/commit/3c785326c63a34aa1799a639ae185bc9453cb447",
  "commit_sha": "3c785326c63a34aa1799a639ae185bc9453cb447",
  "commit_msg": "Prevent malformed upload path causing arbitrary write (#1174)",
  "pr_url": null,
  "pr_info": null,
  "file_name": "lib/src/HttpFileImpl.cc",
  "func_name": "",
  "raw_func_from_json": "int HttpFileImpl::save(const std::string &path) const\n{\n    assert(!path.empty());\n    if (fileName_.empty())\n        return -1;\n    filesystem::path fsPath(utils::toNativePath(path));\n    if (!fsPath.is_absolute() &&\n        (!fsPath.has_parent_path() ||\n         (fsPath.begin()->string() != \".\" && fsPath.begin()->string() != \"..\")))\n    {\n        filesystem::path fsUploadPath(utils::toNativePath(\n            HttpAppFrameworkImpl::instance().getUploadPath()));\n        fsPath = fsUploadPath / fsPath;\n    }\n    filesystem::path fsFileName(utils::toNativePath(fileName_));\n    if (!filesystem::exists(fsPath))\n    {\n        LOG_TRACE << \"create path:\" << fsPath;\n        drogon::error_code err;\n        filesystem::create_directories(fsPath, err);\n        if (err)\n        {\n            LOG_SYSERR;\n            return -1;\n        }\n    }\n    return saveTo(fsPath / fsFileName);\n}",
  "diff_func": "@@ -18,6 +18,7 @@\n #include <drogon/MultiPart.h>\n #include <fstream>\n #include <iostream>\n+#include <algorithm>\n \n using namespace drogon;\n \n@@ -31,28 +32,45 @@ int HttpFileImpl::save(const std::string &path) const\n     assert(!path.empty());\n     if (fileName_.empty())\n         return -1;\n-    filesystem::path fsPath(utils::toNativePath(path));\n-    if (!fsPath.is_absolute() &&\n-        (!fsPath.has_parent_path() ||\n-         (fsPath.begin()->string() != \".\" && fsPath.begin()->string() != \"..\")))\n+    filesystem::path fsUploadDir(utils::toNativePath(path));\n+\n+    if (!fsUploadDir.is_absolute() && (!fsUploadDir.has_parent_path() ||\n+                                       (fsUploadDir.begin()->string() != \".\" &&\n+                                        fsUploadDir.begin()->string() != \"..\")))\n     {\n-        filesystem::path fsUploadPath(utils::toNativePath(\n-            HttpAppFrameworkImpl::instance().getUploadPath()));\n-        fsPath = fsUploadPath / fsPath;\n+        fsUploadDir = utils::toNativePath(\n+                          HttpAppFrameworkImpl::instance().getUploadPath()) /\n+                      fsUploadDir;\n     }\n-    filesystem::path fsFileName(utils::toNativePath(fileName_));\n-    if (!filesystem::exists(fsPath))\n+\n+    fsUploadDir = filesystem::weakly_canonical(fsUploadDir);\n+\n+    if (!filesystem::exists(fsUploadDir))\n     {\n-        LOG_TRACE << \"create path:\" << fsPath;\n+        LOG_TRACE << \"create path:\" << fsUploadDir;\n         drogon::error_code err;\n-        filesystem::create_directories(fsPath, err);\n+        filesystem::create_directories(fsUploadDir, err);\n         if (err)\n         {\n             LOG_SYSERR;\n             return -1;\n         }\n     }\n-    return saveTo(fsPath / fsFileName);\n+\n+    filesystem::path fsSaveToPath(filesystem::weakly_canonical(\n+        fsUploadDir / utils::toNativePath(fileName_)));\n+\n+    if (!std::equal(fsUploadDir.begin(),\n+                    fsUploadDir.end(),\n+                    fsSaveToPath.begin()))\n+    {\n+        LOG_ERROR\n+            << \"Attempt writing outside of upload directory detected. Path: \"\n+            << fileName_;\n+        return -1;\n+    }\n+\n+    return saveTo(fsSaveToPath);\n }\n int HttpFileImpl::saveAs(const std::string &fileName) const\n {",
  "func": "int HttpFileImpl::save(const std::string &path) const\n{\n    assert(!path.empty());\n    if (fileName_.empty())\n        return -1;\n    filesystem::path fsPath(utils::toNativePath(path));\n    if (!fsPath.is_absolute() &&\n        (!fsPath.has_parent_path() ||\n         (fsPath.begin()->string() != \".\" && fsPath.begin()->string() != \"..\")))\n    {\n        filesystem::path fsUploadPath(utils::toNativePath(\n            HttpAppFrameworkImpl::instance().getUploadPath()));\n        fsPath = fsUploadPath / fsPath;\n    }\n    filesystem::path fsFileName(utils::toNativePath(fileName_));\n    if (!filesystem::exists(fsPath))\n    {\n        LOG_TRACE << \"create path:\" << fsPath;\n        drogon::error_code err;\n        filesystem::create_directories(fsPath, err);\n        if (err)\n        {\n            LOG_SYSERR;\n            return -1;\n        }\n    }\n    return saveTo(fsPath / fsFileName);\n}",
  "project": "drogon",
  "hash": 300389952786254526295960796960160809202,
  "size": 28,
  "commit_id": "3c785326c63a34aa1799a639ae185bc9453cb447",
  "message": "Prevent malformed upload path causing arbitrary write (#1174)",
  "target": 1,
  "dataset": "other",
  "idx": 197057
}