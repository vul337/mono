{
  "id": 923,
  "language": "c",
  "cwe": "CWE-125",
  "commit_url": "https://github.com/merlinepedra/TCPDUMP/commit/39582c04cc5e34054b2936b423072fb9df2ff6ef",
  "commit_sha": "39582c04cc5e34054b2936b423072fb9df2ff6ef",
  "commit_msg": "CVE-2017-13042/HNCP: add DHCPv6-Data bounds checks\n\nhncp_print_rec() validates each HNCP TLV to be within the declared as\nwell as the on-the-wire packet space. However, dhcpv6_print() in the same\nfile didn't do the same for the DHCPv6 options within the HNCP\nDHCPv6-Data TLV value, which could cause an out-of-bounds read when\ndecoding an invalid packet. Add missing checks to dhcpv6_print().\n\nThis fixes a buffer over-read discovered by Bhargava Shastry,\nSecT/TU Berlin.\n\nAdd a test using the capture file supplied by the reporter(s).",
  "pr_url": null,
  "pr_info": null,
  "file_name": "print-hncp.c",
  "func_name": "",
  "raw_func_from_json": "dhcpv6_print(netdissect_options *ndo,\n             const u_char *cp, u_int length, int indent)\n{\n    u_int i, t;\n    const u_char *tlv, *value;\n    uint16_t type, optlen;\n \n     i = 0;\n     while (i < length) {\n         tlv = cp + i;\n         type = EXTRACT_16BITS(tlv);\n         optlen = EXTRACT_16BITS(tlv + 2);\n        value = tlv + 4;\n\n        ND_PRINT((ndo, \"\\n\"));\n        for (t = indent; t > 0; t--)\n            ND_PRINT((ndo, \"\\t\"));\n \n         ND_PRINT((ndo, \"%s\", tok2str(dh6opt_str, \"Unknown\", type)));\n         ND_PRINT((ndo,\" (%u)\", optlen + 4 ));\n \n         switch (type) {\n             case DH6OPT_DNS_SERVERS:\n            case DH6OPT_SNTP_SERVERS: {\n                if (optlen % 16 != 0) {\n                    ND_PRINT((ndo, \" %s\", istr));\n                    return -1;\n                }\n                for (t = 0; t < optlen; t += 16)\n                    ND_PRINT((ndo, \" %s\", ip6addr_string(ndo, value + t)));\n            }\n                break;\n            case DH6OPT_DOMAIN_LIST: {\n                const u_char *tp = value;\n                while (tp < value + optlen) {\n                    ND_PRINT((ndo, \" \"));\n                    if ((tp = ns_nprint(ndo, tp, value + optlen)) == NULL)\n                        return -1;\n                }\n            }\n                break;\n        }\n\n        i += 4 + optlen;\n    }\n    return 0;\n}\n",
  "diff_func": "@@ -318,6 +318,8 @@ dhcpv6_print(netdissect_options *ndo,\n \n     i = 0;\n     while (i < length) {\n+        if (i + 4 > length)\n+            return -1;\n         tlv = cp + i;\n         type = EXTRACT_16BITS(tlv);\n         optlen = EXTRACT_16BITS(tlv + 2);\n@@ -329,6 +331,8 @@ dhcpv6_print(netdissect_options *ndo,\n \n         ND_PRINT((ndo, \"%s\", tok2str(dh6opt_str, \"Unknown\", type)));\n         ND_PRINT((ndo,\" (%u)\", optlen + 4 ));\n+        if (i + 4 + optlen > length)\n+            return -1;\n \n         switch (type) {\n             case DH6OPT_DNS_SERVERS:",
  "project": "tcpdump",
  "commit_id": "39582c04cc5e34054b2936b423072fb9df2ff6ef",
  "target": 1,
  "func": "dhcpv6_print(netdissect_options *ndo,\n             const u_char *cp, u_int length, int indent)\n{\n    u_int i, t;\n    const u_char *tlv, *value;\n    uint16_t type, optlen;\n \n     i = 0;\n     while (i < length) {\n         tlv = cp + i;\n         type = EXTRACT_16BITS(tlv);\n         optlen = EXTRACT_16BITS(tlv + 2);\n        value = tlv + 4;\n\n        ND_PRINT((ndo, \"\\n\"));\n        for (t = indent; t > 0; t--)\n            ND_PRINT((ndo, \"\\t\"));\n \n         ND_PRINT((ndo, \"%s\", tok2str(dh6opt_str, \"Unknown\", type)));\n         ND_PRINT((ndo,\" (%u)\", optlen + 4 ));\n \n         switch (type) {\n             case DH6OPT_DNS_SERVERS:\n            case DH6OPT_SNTP_SERVERS: {\n                if (optlen % 16 != 0) {\n                    ND_PRINT((ndo, \" %s\", istr));\n                    return -1;\n                }\n                for (t = 0; t < optlen; t += 16)\n                    ND_PRINT((ndo, \" %s\", ip6addr_string(ndo, value + t)));\n            }\n                break;\n            case DH6OPT_DOMAIN_LIST: {\n                const u_char *tp = value;\n                while (tp < value + optlen) {\n                    ND_PRINT((ndo, \" \"));\n                    if ((tp = ns_nprint(ndo, tp, value + optlen)) == NULL)\n                        return -1;\n                }\n            }\n                break;\n        }\n\n        i += 4 + optlen;\n    }\n    return 0;\n}\n",
  "big_vul_idx": 181005,
  "idx": 2529,
  "hash": 233671212710950643381288983627178979627
}