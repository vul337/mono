{
  "id": 477,
  "language": "c",
  "cwe": "CWE-119",
  "commit_url": "https://github.com/Hitsxx/Combiner_cgminer/commit/e1c5050734123973b99d181c45e74b2cbb00272e",
  "commit_sha": "e1c5050734123973b99d181c45e74b2cbb00272e",
  "commit_msg": "Do some random sanity checking for stratum message parsing",
  "pr_url": null,
  "pr_info": null,
  "file_name": "util.c",
  "func_name": "",
  "raw_func_from_json": "bool extract_sockaddr(char *url, char **sockaddr_url, char **sockaddr_port)\n{\n\tchar *url_begin, *url_end, *ipv6_begin, *ipv6_end, *port_start = NULL;\n\tchar url_address[256], port[6];\n\tint url_len, port_len = 0;\n\n\t*sockaddr_url = url;\n\turl_begin = strstr(url, \"//\");\n\tif (!url_begin)\n\t\turl_begin = url;\n\telse\n\t\turl_begin += 2;\n\n\t/* Look for numeric ipv6 entries */\n\tipv6_begin = strstr(url_begin, \"[\");\n\tipv6_end = strstr(url_begin, \"]\");\n\tif (ipv6_begin && ipv6_end && ipv6_end > ipv6_begin)\n\t\turl_end = strstr(ipv6_end, \":\");\n\telse\n\t\turl_end = strstr(url_begin, \":\");\n\tif (url_end) {\n\t\turl_len = url_end - url_begin;\n\t\tport_len = strlen(url_begin) - url_len - 1;\n\t\tif (port_len < 1)\n\t\t\treturn false;\n\t\tport_start = url_end + 1;\n\t} else\n\t\turl_len = strlen(url_begin);\n\n \tif (url_len < 1)\n \t\treturn false;\n \n\tsprintf(url_address, \"%.*s\", url_len, url_begin);\n \n \tif (port_len) {\n \t\tchar *slash;\n\n\t\tsnprintf(port, 6, \"%.*s\", port_len, port_start);\n\t\tslash = strchr(port, '/');\n\t\tif (slash)\n\t\t\t*slash = '\\0';\n\t} else\n\t\tstrcpy(port, \"80\");\n\n\t*sockaddr_port = strdup(port);\n\t*sockaddr_url = strdup(url_address);\n\n\treturn true;\n}\n",
  "diff_func": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2011-2013 Con Kolivas\n+ * Copyright 2011-2014 Con Kolivas\n  * Copyright 2010 Jeff Garzik\n  *\n  * This program is free software; you can redistribute it and/or modify it\n@@ -720,6 +720,34 @@ bool hex2bin(unsigned char *p, const char *hexstr, size_t len)\n \treturn ret;\n }\n \n+static bool _valid_hex(char *s, const char *file, const char *func, const int line)\n+{\n+\tbool ret = false;\n+\tint i, len;\n+\n+\tif (unlikely(!s)) {\n+\t\tapplog(LOG_ERR, \"Null string passed to valid_hex from\"IN_FMT_FFL, file, func, line);\n+\t\treturn ret;\n+\t}\n+\tlen = strlen(s);\n+\tif (unlikely(!len)) {\n+\t\tapplog(LOG_ERR, \"Zero length string passed to valid_hex from\"IN_FMT_FFL, file, func, line);\n+\t\treturn ret;\n+\t}\n+\tfor (i = 0; i < len; i++) {\n+\t\tunsigned char idx = s[i];\n+\n+\t\tif (unlikely(hex2bin_tbl[idx] < 0)) {\n+\t\t\tapplog(LOG_ERR, \"Invalid char %x passed to valid_hex from\"IN_FMT_FFL, idx, file, func, line);\n+\t\t\treturn ret;\n+\t\t}\n+\t}\n+\tret = true;\n+\treturn ret;\n+}\n+\n+#define valid_hex(s) _valid_hex(s, __FILE__, __func__, __LINE__)\n+\n static const int b58tobin_tbl[] = {\n \t-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n \t-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n@@ -1375,7 +1403,7 @@ bool extract_sockaddr(char *url, char **sockaddr_url, char **sockaddr_port)\n \tif (url_len < 1)\n \t\treturn false;\n \n-\tsprintf(url_address, \"%.*s\", url_len, url_begin);\n+\tsnprintf(url_address, 254, \"%.*s\", url_len, url_begin);\n \n \tif (port_len) {\n \t\tchar *slash;\n@@ -1685,14 +1713,13 @@ static bool parse_notify(struct pool *pool, json_t *val)\n \tntime = __json_array_string(val, 7);\n \tclean = json_is_true(json_array_get(val, 8));\n \n-\tif (!job_id || !prev_hash || !coinbase1 || !coinbase2 || !bbversion || !nbit || !ntime) {\n+\tif (!valid_hex(job_id) || !valid_hex(prev_hash) || !valid_hex(coinbase1) ||\n+\t    !valid_hex(coinbase2) || !valid_hex(bbversion) || !valid_hex(nbit) ||\n+\t    !valid_hex(ntime)) {\n \t\t/* Annoying but we must not leak memory */\n-\t\tif (job_id)\n-\t\t\tfree(job_id);\n-\t\tif (coinbase1)\n-\t\t\tfree(coinbase1);\n-\t\tif (coinbase2)\n-\t\t\tfree(coinbase2);\n+\t\tfree(job_id);\n+\t\tfree(coinbase1);\n+\t\tfree(coinbase2);\n \t\tgoto out;\n \t}\n \n@@ -1880,7 +1907,7 @@ static bool parse_reconnect(struct pool *pool, json_t *val)\n \tif (!port)\n \t\tport = pool->stratum_port;\n \n-\tsprintf(address, \"%s:%s\", url, port);\n+\tsnprintf(address, 254, \"%s:%s\", url, port);\n \n \tif (!extract_sockaddr(address, &sockaddr_url, &stratum_port))\n \t\treturn false;\n@@ -2551,14 +2578,14 @@ bool initiate_stratum(struct pool *pool)\n \tif (!sessionid)\n \t\tapplog(LOG_DEBUG, \"Failed to get sessionid in initiate_stratum\");\n \tnonce1 = json_array_string(res_val, 1);\n-\tif (!nonce1) {\n-\t\tapplog(LOG_INFO, \"Failed to get nonce1 in initiate_stratum\");\n+\tif (!valid_hex(nonce1)) {\n+\t\tapplog(LOG_INFO, \"Failed to get valid nonce1 in initiate_stratum\");\n \t\tfree(sessionid);\n \t\tgoto out;\n \t}\n \tn2size = json_integer_value(json_array_get(res_val, 2));\n-\tif (!n2size) {\n-\t\tapplog(LOG_INFO, \"Failed to get n2size in initiate_stratum\");\n+\tif (n2size < 2 || n2size > 16) {\n+\t\tapplog(LOG_INFO, \"Failed to get valid n2size in initiate_stratum\");\n \t\tfree(sessionid);\n \t\tfree(nonce1);\n \t\tgoto out;",
  "project": "cgminer",
  "commit_id": "e1c5050734123973b99d181c45e74b2cbb00272e",
  "target": 1,
  "func": "bool extract_sockaddr(char *url, char **sockaddr_url, char **sockaddr_port)\n{\n\tchar *url_begin, *url_end, *ipv6_begin, *ipv6_end, *port_start = NULL;\n\tchar url_address[256], port[6];\n\tint url_len, port_len = 0;\n\n\t*sockaddr_url = url;\n\turl_begin = strstr(url, \"//\");\n\tif (!url_begin)\n\t\turl_begin = url;\n\telse\n\t\turl_begin += 2;\n\n\t/* Look for numeric ipv6 entries */\n\tipv6_begin = strstr(url_begin, \"[\");\n\tipv6_end = strstr(url_begin, \"]\");\n\tif (ipv6_begin && ipv6_end && ipv6_end > ipv6_begin)\n\t\turl_end = strstr(ipv6_end, \":\");\n\telse\n\t\turl_end = strstr(url_begin, \":\");\n\tif (url_end) {\n\t\turl_len = url_end - url_begin;\n\t\tport_len = strlen(url_begin) - url_len - 1;\n\t\tif (port_len < 1)\n\t\t\treturn false;\n\t\tport_start = url_end + 1;\n\t} else\n\t\turl_len = strlen(url_begin);\n\n \tif (url_len < 1)\n \t\treturn false;\n \n\tsprintf(url_address, \"%.*s\", url_len, url_begin);\n \n \tif (port_len) {\n \t\tchar *slash;\n\n\t\tsnprintf(port, 6, \"%.*s\", port_len, port_start);\n\t\tslash = strchr(port, '/');\n\t\tif (slash)\n\t\t\t*slash = '\\0';\n\t} else\n\t\tstrcpy(port, \"80\");\n\n\t*sockaddr_port = strdup(port);\n\t*sockaddr_url = strdup(url_address);\n\n\treturn true;\n}\n",
  "big_vul_idx": 179476,
  "idx": 1236,
  "hash": 268425937881460227077617707628391335121
}