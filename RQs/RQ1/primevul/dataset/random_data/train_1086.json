{
  "id": 1086,
  "language": "c",
  "cwe": "CWE-125",
  "commit_url": "https://github.com/verdammelt/tnef/commit/8dccf79857ceeb7a6d3e42c1e762e7b865d5344d",
  "commit_sha": "8dccf79857ceeb7a6d3e42c1e762e7b865d5344d",
  "commit_msg": "Check types to avoid invalid reads/writes.",
  "pr_url": "https://github.com/verdammelt/tnef/pull/14",
  "pr_info": "Security Fixes.",
  "file_name": "src/file.c",
  "func_name": "",
  "raw_func_from_json": "file_add_mapi_attrs (File* file, MAPI_Attr** attrs)\n{\n    int i;\n    for (i = 0; attrs[i]; i++)\n    {\n\tMAPI_Attr* a = attrs[i];\n\n\tif (a->num_values)\n\t{\n\n \t    switch (a->name)\n \t    {\n \t    case MAPI_ATTACH_LONG_FILENAME:\n \t\tif (file->name) XFREE(file->name);\n \t\tfile->name = strdup( (char*)a->values[0].data.buf );\n \t\tbreak;\n \n \t    case MAPI_ATTACH_DATA_OBJ:\n \t\tfile->len = a->values[0].len;\n \t\tif (file->data) XFREE (file->data);\n \t\tfile->data = CHECKED_XMALLOC (unsigned char, file->len);\n \t\tmemmove (file->data, a->values[0].data.buf, file->len);\n \t\tbreak;\n \n              case MAPI_ATTACH_MIME_TAG:\n \t\tif (file->mime_type) XFREE (file->mime_type);\n \t\tfile->mime_type = CHECKED_XMALLOC (char, a->values[0].len);\n \t\tmemmove (file->mime_type, a->values[0].data.buf, a->values[0].len);\n \t\tbreak;\n \n                 case MAPI_ATTACH_CONTENT_ID:\n                     if (file->content_id) XFREE(file->content_id);\n                     file->content_id = CHECKED_XMALLOC (char, a->values[0].len);\n                     memmove (file->content_id, a->values[0].data.buf, a->values[0].len);\n                    break;\n\n\t    default:\n\t\tbreak;\n\t    }\n\t}\n    }\n}\n",
  "diff_func": "@@ -173,24 +173,28 @@ file_add_mapi_attrs (File* file, MAPI_Attr** attrs)\n \t    switch (a->name)\n \t    {\n \t    case MAPI_ATTACH_LONG_FILENAME:\n+\t\tassert(a->type == szMAPI_STRING);\n \t\tif (file->name) XFREE(file->name);\n \t\tfile->name = strdup( (char*)a->values[0].data.buf );\n \t\tbreak;\n \n \t    case MAPI_ATTACH_DATA_OBJ:\n+\t\tassert((a->type == szMAPI_BINARY) || (a->type == szMAPI_OBJECT));\n \t\tfile->len = a->values[0].len;\n \t\tif (file->data) XFREE (file->data);\n \t\tfile->data = CHECKED_XMALLOC (unsigned char, file->len);\n \t\tmemmove (file->data, a->values[0].data.buf, file->len);\n \t\tbreak;\n \n              case MAPI_ATTACH_MIME_TAG:\n+\t\tassert(a->type == szMAPI_STRING);\n \t\tif (file->mime_type) XFREE (file->mime_type);\n \t\tfile->mime_type = CHECKED_XMALLOC (char, a->values[0].len);\n \t\tmemmove (file->mime_type, a->values[0].data.buf, a->values[0].len);\n \t\tbreak;\n \n                 case MAPI_ATTACH_CONTENT_ID:\n+                    assert(a->type == szMAPI_STRING);\n                     if (file->content_id) XFREE(file->content_id);\n                     file->content_id = CHECKED_XMALLOC (char, a->values[0].len);\n                     memmove (file->content_id, a->values[0].data.buf, a->values[0].len);",
  "project": "tnef",
  "commit_id": "8dccf79857ceeb7a6d3e42c1e762e7b865d5344d",
  "target": 1,
  "func": "file_add_mapi_attrs (File* file, MAPI_Attr** attrs)\n{\n    int i;\n    for (i = 0; attrs[i]; i++)\n    {\n\tMAPI_Attr* a = attrs[i];\n\n\tif (a->num_values)\n\t{\n\n \t    switch (a->name)\n \t    {\n \t    case MAPI_ATTACH_LONG_FILENAME:\n \t\tif (file->name) XFREE(file->name);\n \t\tfile->name = strdup( (char*)a->values[0].data.buf );\n \t\tbreak;\n \n \t    case MAPI_ATTACH_DATA_OBJ:\n \t\tfile->len = a->values[0].len;\n \t\tif (file->data) XFREE (file->data);\n \t\tfile->data = CHECKED_XMALLOC (unsigned char, file->len);\n \t\tmemmove (file->data, a->values[0].data.buf, file->len);\n \t\tbreak;\n \n              case MAPI_ATTACH_MIME_TAG:\n \t\tif (file->mime_type) XFREE (file->mime_type);\n \t\tfile->mime_type = CHECKED_XMALLOC (char, a->values[0].len);\n \t\tmemmove (file->mime_type, a->values[0].data.buf, a->values[0].len);\n \t\tbreak;\n \n                 case MAPI_ATTACH_CONTENT_ID:\n                     if (file->content_id) XFREE(file->content_id);\n                     file->content_id = CHECKED_XMALLOC (char, a->values[0].len);\n                     memmove (file->content_id, a->values[0].data.buf, a->values[0].len);\n                    break;\n\n\t    default:\n\t\tbreak;\n\t    }\n\t}\n    }\n}\n",
  "big_vul_idx": 181523,
  "idx": 2971,
  "hash": 96018736304519736876908342301399418658
}