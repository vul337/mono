{
  "id": 1115,
  "language": "unknown",
  "cwe": "CWE-532",
  "commit_url": "https://github.com/monetor/monetor-0.3.2.10/commit/09ea89764a4d3a907808ed7d4fe42abfe64bd486",
  "commit_sha": "09ea89764a4d3a907808ed7d4fe42abfe64bd486",
  "commit_msg": "Fix log-uninitialized-stack bug in rend_service_intro_established.\n\nFixes bug 23490; bugfix on 0.2.7.2-alpha.\n\nTROVE-2017-008\nCVE-2017-0380",
  "pr_url": null,
  "pr_info": null,
  "file_name": "changes/trove-2017-008",
  "func_name": "",
  "raw_func_from_json": "rend_service_intro_established(origin_circuit_t *circuit,\n                               const uint8_t *request,\n                               size_t request_len)\n{\n  rend_service_t *service;\n  rend_intro_point_t *intro;\n  char serviceid[REND_SERVICE_ID_LEN_BASE32+1];\n  (void) request;\n  (void) request_len;\n  tor_assert(circuit->rend_data);\n  /* XXX: This is version 2 specific (only supported one for now). */\n  const char *rend_pk_digest =\n    (char *) rend_data_get_pk_digest(circuit->rend_data, NULL);\n\n  if (circuit->base_.purpose != CIRCUIT_PURPOSE_S_ESTABLISH_INTRO) {\n    log_warn(LD_PROTOCOL,\n             \"received INTRO_ESTABLISHED cell on non-intro circuit.\");\n    goto err;\n  }\n  service = rend_service_get_by_pk_digest(rend_pk_digest);\n  if (!service) {\n    log_warn(LD_REND, \"Unknown service on introduction circuit %u.\",\n              (unsigned)circuit->base_.n_circ_id);\n     goto err;\n   }\n   /* We've just successfully established a intro circuit to one of our\n    * introduction point, account for it. */\n   intro = find_intro_point(circuit);\n  if (intro == NULL) {\n    log_warn(LD_REND,\n             \"Introduction circuit established without a rend_intro_point_t \"\n             \"object for service %s on circuit %u\",\n             safe_str_client(serviceid), (unsigned)circuit->base_.n_circ_id);\n    goto err;\n  }\n  intro->circuit_established = 1;\n  /* We might not have every introduction point ready but at this point we\n   * know that the descriptor needs to be uploaded. */\n   service->desc_is_dirty = time(NULL);\n   circuit_change_purpose(TO_CIRCUIT(circuit), CIRCUIT_PURPOSE_S_INTRO);\n \n  base32_encode(serviceid, REND_SERVICE_ID_LEN_BASE32 + 1,\n                rend_pk_digest, REND_SERVICE_ID_LEN);\n   log_info(LD_REND,\n            \"Received INTRO_ESTABLISHED cell on circuit %u for service %s\",\n            (unsigned)circuit->base_.n_circ_id, serviceid);\n\n  /* Getting a valid INTRODUCE_ESTABLISHED means we've successfully\n   * used the circ */\n  pathbias_mark_use_success(circuit);\n\n  return 0;\n err:\n  circuit_mark_for_close(TO_CIRCUIT(circuit), END_CIRC_REASON_TORPROTOCOL);\n  return -1;\n}\n",
  "diff_func": "@@ -0,0 +1,5 @@\n+  o Major bugfixes (security, hidden services, loggging):\n+    - Fix a bug where we could log uninitialized stack when a certain\n+      hidden service error occurred while SafeLogging was disabled.\n+      Fixes bug #23490; bugfix on 0.2.7.2-alpha.\n+      This is also tracked as TROVE-2017-008 and CVE-2017-0380.",
  "project": "tor",
  "commit_id": "09ea89764a4d3a907808ed7d4fe42abfe64bd486",
  "target": 1,
  "func": "rend_service_intro_established(origin_circuit_t *circuit,\n                               const uint8_t *request,\n                               size_t request_len)\n{\n  rend_service_t *service;\n  rend_intro_point_t *intro;\n  char serviceid[REND_SERVICE_ID_LEN_BASE32+1];\n  (void) request;\n  (void) request_len;\n  tor_assert(circuit->rend_data);\n  /* XXX: This is version 2 specific (only supported one for now). */\n  const char *rend_pk_digest =\n    (char *) rend_data_get_pk_digest(circuit->rend_data, NULL);\n\n  if (circuit->base_.purpose != CIRCUIT_PURPOSE_S_ESTABLISH_INTRO) {\n    log_warn(LD_PROTOCOL,\n             \"received INTRO_ESTABLISHED cell on non-intro circuit.\");\n    goto err;\n  }\n  service = rend_service_get_by_pk_digest(rend_pk_digest);\n  if (!service) {\n    log_warn(LD_REND, \"Unknown service on introduction circuit %u.\",\n              (unsigned)circuit->base_.n_circ_id);\n     goto err;\n   }\n   /* We've just successfully established a intro circuit to one of our\n    * introduction point, account for it. */\n   intro = find_intro_point(circuit);\n  if (intro == NULL) {\n    log_warn(LD_REND,\n             \"Introduction circuit established without a rend_intro_point_t \"\n             \"object for service %s on circuit %u\",\n             safe_str_client(serviceid), (unsigned)circuit->base_.n_circ_id);\n    goto err;\n  }\n  intro->circuit_established = 1;\n  /* We might not have every introduction point ready but at this point we\n   * know that the descriptor needs to be uploaded. */\n   service->desc_is_dirty = time(NULL);\n   circuit_change_purpose(TO_CIRCUIT(circuit), CIRCUIT_PURPOSE_S_INTRO);\n \n  base32_encode(serviceid, REND_SERVICE_ID_LEN_BASE32 + 1,\n                rend_pk_digest, REND_SERVICE_ID_LEN);\n   log_info(LD_REND,\n            \"Received INTRO_ESTABLISHED cell on circuit %u for service %s\",\n            (unsigned)circuit->base_.n_circ_id, serviceid);\n\n  /* Getting a valid INTRODUCE_ESTABLISHED means we've successfully\n   * used the circ */\n  pathbias_mark_use_success(circuit);\n\n  return 0;\n err:\n  circuit_mark_for_close(TO_CIRCUIT(circuit), END_CIRC_REASON_TORPROTOCOL);\n  return -1;\n}\n",
  "big_vul_idx": 181621,
  "idx": 3052,
  "hash": 331095980763480211917997488027859436305
}