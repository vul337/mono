{
  "id": 84,
  "language": "c",
  "cwe": "CWE-835",
  "commit_url": "https://github.com/ceph/samba/commit/10c3e3923022485c720f322ca4f0aca5d7501310",
  "commit_sha": "10c3e3923022485c720f322ca4f0aca5d7501310",
  "commit_msg": "s3: smbd: Don't loop infinitely on bad-symlink resolution.\n\nIn the FILE_OPEN_IF case we have O_CREAT, but not\nO_EXCL. Previously we went into a loop trying first\n~(O_CREAT|O_EXCL), and if that returned ENOENT\ntry (O_CREAT|O_EXCL). We kept looping indefinately\nuntil we got an error, or the file was created or\nopened.\n\nThe big problem here is dangling symlinks. Opening\nwithout O_NOFOLLOW means both bad symlink\nand missing path return -1, ENOENT from open(). As POSIX\nis pathname based it's not possible to tell\nthe difference between these two cases in a\nnon-racy way, so change to try only two attempts before\ngiving up.\n\nWe don't have this problem for the O_NOFOLLOW\ncase as we just return NT_STATUS_OBJECT_PATH_NOT_FOUND\nmapped from the ELOOP POSIX error and immediately\nreturned.\n\nUnroll the loop logic to two tries instead.\n\nBUG: https://bugzilla.samba.org/show_bug.cgi?id=12572\n\nPair-programmed-with: Ralph Boehme <slow@samba.org>\n\nSigned-off-by: Jeremy Allison <jra@samba.org>\nSigned-off-by: Ralph Boehme <slow@samba.org>\nReviewed-by: Ralph Boehme <slow@samba.org>",
  "pr_url": null,
  "pr_info": null,
  "file_name": "source3/smbd/open.c",
  "func_name": "",
  "raw_func_from_json": "static NTSTATUS fd_open_atomic(struct connection_struct *conn,\n\t\t\tfiles_struct *fsp,\n\t\t\tint flags,\n\t\t\tmode_t mode,\n                        bool *file_created)\n {\n        NTSTATUS status = NT_STATUS_UNSUCCESSFUL;\n        bool file_existed = VALID_STAT(fsp->fsp_name->st);\n \n        *file_created = false;\n \n\t\t * We're not creating the file, just pass through.\n\t\t */\n\t\treturn fd_open(conn, fsp, flags, mode);\n\t}\n",
  "diff_func": "@@ -640,7 +640,9 @@ static NTSTATUS fd_open_atomic(struct connection_struct *conn,\n \t\t\tbool *file_created)\n {\n \tNTSTATUS status = NT_STATUS_UNSUCCESSFUL;\n+\tNTSTATUS retry_status;\n \tbool file_existed = VALID_STAT(fsp->fsp_name->st);\n+\tint curr_flags;\n \n \t*file_created = false;\n \n@@ -672,59 +674,65 @@ static NTSTATUS fd_open_atomic(struct connection_struct *conn,\n \t * we can never call O_CREAT without O_EXCL. So if\n \t * we think the file existed, try without O_CREAT|O_EXCL.\n \t * If we think the file didn't exist, try with\n-\t * O_CREAT|O_EXCL. Keep bouncing between these two\n-\t * requests until either the file is created, or\n-\t * opened. Either way, we keep going until we get\n-\t * a returnable result (error, or open/create).\n+\t * O_CREAT|O_EXCL.\n+\t *\n+\t * The big problem here is dangling symlinks. Opening\n+\t * without O_NOFOLLOW means both bad symlink\n+\t * and missing path return -1, ENOENT from open(). As POSIX\n+\t * is pathname based it's not possible to tell\n+\t * the difference between these two cases in a\n+\t * non-racy way, so change to try only two attempts before\n+\t * giving up.\n+\t *\n+\t * We don't have this problem for the O_NOFOLLOW\n+\t * case as it just returns NT_STATUS_OBJECT_PATH_NOT_FOUND\n+\t * mapped from the ELOOP POSIX error.\n \t */\n \n-\twhile(1) {\n-\t\tint curr_flags = flags;\n+\tcurr_flags = flags;\n \n-\t\tif (file_existed) {\n-\t\t\t/* Just try open, do not create. */\n-\t\t\tcurr_flags &= ~(O_CREAT);\n-\t\t\tstatus = fd_open(conn, fsp, curr_flags, mode);\n-\t\t\tif (NT_STATUS_EQUAL(status,\n-\t\t\t\t\tNT_STATUS_OBJECT_NAME_NOT_FOUND)) {\n-\t\t\t\t/*\n-\t\t\t\t * Someone deleted it in the meantime.\n-\t\t\t\t * Retry with O_EXCL.\n-\t\t\t\t */\n-\t\t\t\tfile_existed = false;\n-\t\t\t\tDEBUG(10,(\"fd_open_atomic: file %s existed. \"\n-\t\t\t\t\t\"Retry.\\n\",\n-\t\t\t\t\tsmb_fname_str_dbg(fsp->fsp_name)));\n-\t\t\t\t\tcontinue;\n-\t\t\t}\n-\t\t} else {\n-\t\t\t/* Try create exclusively, fail if it exists. */\n-\t\t\tcurr_flags |= O_EXCL;\n-\t\t\tstatus = fd_open(conn, fsp, curr_flags, mode);\n-\t\t\tif (NT_STATUS_EQUAL(status,\n-\t\t\t\t\tNT_STATUS_OBJECT_NAME_COLLISION)) {\n-\t\t\t\t/*\n-\t\t\t\t * Someone created it in the meantime.\n-\t\t\t\t * Retry without O_CREAT.\n-\t\t\t\t */\n-\t\t\t\tfile_existed = true;\n-\t\t\t\tDEBUG(10,(\"fd_open_atomic: file %s \"\n-\t\t\t\t\t\"did not exist. Retry.\\n\",\n-\t\t\t\t\tsmb_fname_str_dbg(fsp->fsp_name)));\n-\t\t\t\tcontinue;\n-\t\t\t}\n-\t\t\tif (NT_STATUS_IS_OK(status)) {\n-\t\t\t\t/*\n-\t\t\t\t * Here we've opened with O_CREAT|O_EXCL\n-\t\t\t\t * and got success. We *know* we created\n-\t\t\t\t * this file.\n-\t\t\t\t */\n-\t\t\t\t*file_created = true;\n-\t\t\t}\n+\tif (file_existed) {\n+\t\tcurr_flags &= ~(O_CREAT);\n+\t\tretry_status = NT_STATUS_OBJECT_NAME_NOT_FOUND;\n+\t} else {\n+\t\tcurr_flags |= O_EXCL;\n+\t\tretry_status = NT_STATUS_OBJECT_NAME_COLLISION;\n+\t}\n+\n+\tstatus = fd_open(conn, fsp, curr_flags, mode);\n+\tif (NT_STATUS_IS_OK(status)) {\n+\t\tif (!file_existed) {\n+\t\t\t*file_created = true;\n \t\t}\n-\t\t/* Create is done, or failed. */\n-\t\tbreak;\n+\t\treturn NT_STATUS_OK;\n \t}\n+\tif (!NT_STATUS_EQUAL(status, retry_status)) {\n+\t\treturn status;\n+\t}\n+\n+\tcurr_flags = flags;\n+\n+\t/*\n+\t * Keep file_existed up to date for clarity.\n+\t */\n+\tif (NT_STATUS_EQUAL(status, NT_STATUS_OBJECT_NAME_NOT_FOUND)) {\n+\t\tfile_existed = false;\n+\t\tcurr_flags |= O_EXCL;\n+\t\tDBG_DEBUG(\"file %s did not exist. Retry.\\n\",\n+\t\t\tsmb_fname_str_dbg(fsp->fsp_name));\n+\t} else {\n+\t\tfile_existed = true;\n+\t\tcurr_flags &= ~(O_CREAT);\n+\t\tDBG_DEBUG(\"file %s existed. Retry.\\n\",\n+\t\t\tsmb_fname_str_dbg(fsp->fsp_name));\n+\t}\n+\n+\tstatus = fd_open(conn, fsp, curr_flags, mode);\n+\n+\tif (NT_STATUS_IS_OK(status) && (!file_existed)) {\n+\t\t*file_created = true;\n+\t}\n+\n \treturn status;\n }\n ",
  "project": "samba",
  "commit_id": "10c3e3923022485c720f322ca4f0aca5d7501310",
  "target": 1,
  "func": "static NTSTATUS fd_open_atomic(struct connection_struct *conn,\n\t\t\tfiles_struct *fsp,\n\t\t\tint flags,\n\t\t\tmode_t mode,\n                        bool *file_created)\n {\n        NTSTATUS status = NT_STATUS_UNSUCCESSFUL;\n        bool file_existed = VALID_STAT(fsp->fsp_name->st);\n \n        *file_created = false;\n \n\t\t * We're not creating the file, just pass through.\n\t\t */\n\t\treturn fd_open(conn, fsp, flags, mode);\n\t}\n",
  "big_vul_idx": 177966,
  "idx": 147,
  "hash": 161881144216406607325428562477641633507
}