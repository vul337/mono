{
  "id": 911,
  "language": "c",
  "cwe": "CWE-125",
  "commit_url": "https://github.com/merlinepedra/TCPDUMP/commit/e6511cc1a950fe1566b2236329d6b4bd0826cc7a",
  "commit_sha": "e6511cc1a950fe1566b2236329d6b4bd0826cc7a",
  "commit_msg": "CVE-2017-13054/LLDP: add a missing length check\n\nIn lldp_private_8023_print() the case block for subtype 4 (Maximum Frame\nSize TLV, IEEE 802.3bc-2009 Section 79.3.4) did not include the length\ncheck and could over-read the input buffer, put it right.\n\nThis fixes a buffer over-read discovered by Bhargava Shastry,\nSecT/TU Berlin.\n\nAdd a test using the capture file supplied by the reporter(s).",
  "pr_url": null,
  "pr_info": null,
  "file_name": "print-lldp.c",
  "func_name": "",
  "raw_func_from_json": "lldp_private_8023_print(netdissect_options *ndo,\n                        const u_char *tptr, u_int tlv_len)\n{\n    int subtype, hexdump = FALSE;\n\n    if (tlv_len < 4) {\n        return hexdump;\n    }\n    subtype = *(tptr+3);\n\n    ND_PRINT((ndo, \"\\n\\t  %s Subtype (%u)\",\n           tok2str(lldp_8023_subtype_values, \"unknown\", subtype),\n           subtype));\n\n    switch (subtype) {\n    case LLDP_PRIVATE_8023_SUBTYPE_MACPHY:\n        if (tlv_len < 9) {\n            return hexdump;\n        }\n        ND_PRINT((ndo, \"\\n\\t    autonegotiation [%s] (0x%02x)\",\n               bittok2str(lldp_8023_autonegotiation_values, \"none\", *(tptr+4)),\n               *(tptr + 4)));\n        ND_PRINT((ndo, \"\\n\\t    PMD autoneg capability [%s] (0x%04x)\",\n               bittok2str(lldp_pmd_capability_values,\"unknown\", EXTRACT_16BITS(tptr+5)),\n               EXTRACT_16BITS(tptr + 5)));\n        ND_PRINT((ndo, \"\\n\\t    MAU type %s (0x%04x)\",\n               tok2str(lldp_mau_types_values, \"unknown\", EXTRACT_16BITS(tptr+7)),\n               EXTRACT_16BITS(tptr + 7)));\n        break;\n\n    case LLDP_PRIVATE_8023_SUBTYPE_MDIPOWER:\n        if (tlv_len < 7) {\n            return hexdump;\n        }\n        ND_PRINT((ndo, \"\\n\\t    MDI power support [%s], power pair %s, power class %s\",\n               bittok2str(lldp_mdi_values, \"none\", *(tptr+4)),\n               tok2str(lldp_mdi_power_pairs_values, \"unknown\", *(tptr+5)),\n               tok2str(lldp_mdi_power_class_values, \"unknown\", *(tptr + 6))));\n        break;\n\n    case LLDP_PRIVATE_8023_SUBTYPE_LINKAGGR:\n        if (tlv_len < 9) {\n            return hexdump;\n        }\n        ND_PRINT((ndo, \"\\n\\t    aggregation status [%s], aggregation port ID %u\",\n               bittok2str(lldp_aggregation_values, \"none\", *(tptr+4)),\n               EXTRACT_32BITS(tptr + 5)));\n         break;\n \n     case LLDP_PRIVATE_8023_SUBTYPE_MTU:\n         ND_PRINT((ndo, \"\\n\\t    MTU size %u\", EXTRACT_16BITS(tptr + 4)));\n         break;\n \n    default:\n        hexdump = TRUE;\n        break;\n    }\n\n    return hexdump;\n}\n",
  "diff_func": "@@ -898,6 +898,9 @@ lldp_private_8023_print(netdissect_options *ndo,\n         break;\n \n     case LLDP_PRIVATE_8023_SUBTYPE_MTU:\n+        if (tlv_len < 6) {\n+            return hexdump;\n+        }\n         ND_PRINT((ndo, \"\\n\\t    MTU size %u\", EXTRACT_16BITS(tptr + 4)));\n         break;\n ",
  "project": "tcpdump",
  "commit_id": "e6511cc1a950fe1566b2236329d6b4bd0826cc7a",
  "target": 1,
  "func": "lldp_private_8023_print(netdissect_options *ndo,\n                        const u_char *tptr, u_int tlv_len)\n{\n    int subtype, hexdump = FALSE;\n\n    if (tlv_len < 4) {\n        return hexdump;\n    }\n    subtype = *(tptr+3);\n\n    ND_PRINT((ndo, \"\\n\\t  %s Subtype (%u)\",\n           tok2str(lldp_8023_subtype_values, \"unknown\", subtype),\n           subtype));\n\n    switch (subtype) {\n    case LLDP_PRIVATE_8023_SUBTYPE_MACPHY:\n        if (tlv_len < 9) {\n            return hexdump;\n        }\n        ND_PRINT((ndo, \"\\n\\t    autonegotiation [%s] (0x%02x)\",\n               bittok2str(lldp_8023_autonegotiation_values, \"none\", *(tptr+4)),\n               *(tptr + 4)));\n        ND_PRINT((ndo, \"\\n\\t    PMD autoneg capability [%s] (0x%04x)\",\n               bittok2str(lldp_pmd_capability_values,\"unknown\", EXTRACT_16BITS(tptr+5)),\n               EXTRACT_16BITS(tptr + 5)));\n        ND_PRINT((ndo, \"\\n\\t    MAU type %s (0x%04x)\",\n               tok2str(lldp_mau_types_values, \"unknown\", EXTRACT_16BITS(tptr+7)),\n               EXTRACT_16BITS(tptr + 7)));\n        break;\n\n    case LLDP_PRIVATE_8023_SUBTYPE_MDIPOWER:\n        if (tlv_len < 7) {\n            return hexdump;\n        }\n        ND_PRINT((ndo, \"\\n\\t    MDI power support [%s], power pair %s, power class %s\",\n               bittok2str(lldp_mdi_values, \"none\", *(tptr+4)),\n               tok2str(lldp_mdi_power_pairs_values, \"unknown\", *(tptr+5)),\n               tok2str(lldp_mdi_power_class_values, \"unknown\", *(tptr + 6))));\n        break;\n\n    case LLDP_PRIVATE_8023_SUBTYPE_LINKAGGR:\n        if (tlv_len < 9) {\n            return hexdump;\n        }\n        ND_PRINT((ndo, \"\\n\\t    aggregation status [%s], aggregation port ID %u\",\n               bittok2str(lldp_aggregation_values, \"none\", *(tptr+4)),\n               EXTRACT_32BITS(tptr + 5)));\n         break;\n \n     case LLDP_PRIVATE_8023_SUBTYPE_MTU:\n         ND_PRINT((ndo, \"\\n\\t    MTU size %u\", EXTRACT_16BITS(tptr + 4)));\n         break;\n \n    default:\n        hexdump = TRUE;\n        break;\n    }\n\n    return hexdump;\n}\n",
  "big_vul_idx": 180991,
  "idx": 2515,
  "hash": 329045721089300022533495726517784131267
}