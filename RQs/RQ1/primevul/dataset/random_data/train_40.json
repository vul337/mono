{
  "id": 40,
  "language": "c",
  "cwe": "CWE-59",
  "commit_url": "https://github.com/sa-dummy/patch/commit/dce4683cbbe107a95f1f0d45fabc304acfb5d71a",
  "commit_sha": "dce4683cbbe107a95f1f0d45fabc304acfb5d71a",
  "commit_msg": "Don't follow symlinks unless --follow-symlinks is given\n\n* src/inp.c (plan_a, plan_b), src/util.c (copy_to_fd, copy_file,\nappend_to_file): Unless the --follow-symlinks option is given, open files with\nthe O_NOFOLLOW flag to avoid following symlinks.  So far, we were only doing\nthat consistently for input files.\n* src/util.c (create_backup): When creating empty backup files, (re)create them\nwith O_CREAT | O_EXCL to avoid following symlinks in that case as well.",
  "pr_url": null,
  "pr_info": null,
  "file_name": "src/inp.c",
  "func_name": "",
  "raw_func_from_json": "plan_a (char const *filename)\n{\n  char const *s;\n  char const *lim;\n  char const **ptr;\n  char *buffer;\n  lin iline;\n  size_t size = instat.st_size;\n\n  /* Fail if the file size doesn't fit in a size_t,\n     or if storage isn't available.  */\n  if (! (size == instat.st_size\n\t && (buffer = malloc (size ? size : (size_t) 1))))\n    return false;\n\n  /* Read the input file, but don't bother reading it if it's empty.\n     When creating files, the files do not actually exist.  */\n  if (size)\n     {\n       if (S_ISREG (instat.st_mode))\n         {\n\t  int ifd = safe_open (filename, O_RDONLY|binary_transput, 0);\n \t  size_t buffered = 0, n;\n \t  if (ifd < 0)\n \t    pfatal (\"can't open file %s\", quotearg (filename));\n \n\t\t  /* Some non-POSIX hosts exaggerate st_size in text mode;\n\t\t     or the file may have shrunk!  */\n\t\t  size = buffered;\n\t\t  break;\n\t\t}\n\t      if (n == (size_t) -1)\n\t\t{\n\t\t  /* Perhaps size is too large for this host.  */\n\t\t  close (ifd);\n\t\t  free (buffer);\n\t\t  return false;\n\t\t}\n\t      buffered += n;\n\t    }\n\n\t  if (close (ifd) != 0)\n\t    read_fatal ();\n\t}\n",
  "diff_func": "@@ -238,8 +238,13 @@ plan_a (char const *filename)\n     {\n       if (S_ISREG (instat.st_mode))\n         {\n-\t  int ifd = safe_open (filename, O_RDONLY|binary_transput, 0);\n+\t  int flags = O_RDONLY | binary_transput;\n \t  size_t buffered = 0, n;\n+\t  int ifd;\n+\n+\t  if (! follow_symlinks)\n+\t    flags |= O_NOFOLLOW;\n+\t  ifd = safe_open (filename, flags, 0);\n \t  if (ifd < 0)\n \t    pfatal (\"can't open file %s\", quotearg (filename));\n \n@@ -340,6 +345,7 @@ plan_a (char const *filename)\n static void\n plan_b (char const *filename)\n {\n+  int flags = O_RDONLY | binary_transput;\n   int ifd;\n   FILE *ifp;\n   int c;\n@@ -353,7 +359,9 @@ plan_b (char const *filename)\n \n   if (instat.st_size == 0)\n     filename = NULL_DEVICE;\n-  if ((ifd = safe_open (filename, O_RDONLY | binary_transput, 0)) < 0\n+  if (! follow_symlinks)\n+    flags |= O_NOFOLLOW;\n+  if ((ifd = safe_open (filename, flags, 0)) < 0\n       || ! (ifp = fdopen (ifd, binary_transput ? \"rb\" : \"r\")))\n     pfatal (\"Can't open file %s\", quotearg (filename));\n   if (TMPINNAME_needs_removal)",
  "project": "savannah",
  "commit_id": "dce4683cbbe107a95f1f0d45fabc304acfb5d71a",
  "target": 1,
  "func": "plan_a (char const *filename)\n{\n  char const *s;\n  char const *lim;\n  char const **ptr;\n  char *buffer;\n  lin iline;\n  size_t size = instat.st_size;\n\n  /* Fail if the file size doesn't fit in a size_t,\n     or if storage isn't available.  */\n  if (! (size == instat.st_size\n\t && (buffer = malloc (size ? size : (size_t) 1))))\n    return false;\n\n  /* Read the input file, but don't bother reading it if it's empty.\n     When creating files, the files do not actually exist.  */\n  if (size)\n     {\n       if (S_ISREG (instat.st_mode))\n         {\n\t  int ifd = safe_open (filename, O_RDONLY|binary_transput, 0);\n \t  size_t buffered = 0, n;\n \t  if (ifd < 0)\n \t    pfatal (\"can't open file %s\", quotearg (filename));\n \n\t\t  /* Some non-POSIX hosts exaggerate st_size in text mode;\n\t\t     or the file may have shrunk!  */\n\t\t  size = buffered;\n\t\t  break;\n\t\t}\n\t      if (n == (size_t) -1)\n\t\t{\n\t\t  /* Perhaps size is too large for this host.  */\n\t\t  close (ifd);\n\t\t  free (buffer);\n\t\t  return false;\n\t\t}\n\t      buffered += n;\n\t    }\n\n\t  if (close (ifd) != 0)\n\t    read_fatal ();\n\t}\n",
  "big_vul_idx": 177857,
  "idx": 83,
  "hash": 8366090498822481813911553841981995710
}