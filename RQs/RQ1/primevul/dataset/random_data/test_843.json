{
  "id": 843,
  "language": "c",
  "cwe": "",
  "commit_url": "https://github.com/HKL-Kevin/msm8998-mainline/commit/e6a21a14106d9718aa4f8e115b1e474888eeba44",
  "commit_sha": "e6a21a14106d9718aa4f8e115b1e474888eeba44",
  "commit_msg": "media: vidtv: Check for null return of vzalloc\n\nAs the possible failure of the vzalloc(), e->encoder_buf might be NULL.\nTherefore, it should be better to check it in order\nto guarantee the success of the initialization.\nIf fails, we need to free not only 'e' but also 'e->name'.\nAlso, if the allocation for ctx fails, we need to free 'e->encoder_buf'\nelse.\n\nFixes: f90cf6079bf6 (\"media: vidtv: add a bridge driver\")\nSigned-off-by: Jiasheng Jiang <jiasheng@iscas.ac.cn>\nSigned-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>\nSigned-off-by: Mauro Carvalho Chehab <mchehab@kernel.org>",
  "pr_url": null,
  "pr_info": null,
  "file_name": "drivers/media/test-drivers/vidtv/vidtv_s302m.c",
  "func_name": "",
  "raw_func_from_json": "*vidtv_s302m_encoder_init(struct vidtv_s302m_encoder_init_args args)\n{\n\tu32 priv_sz = sizeof(struct vidtv_s302m_ctx);\n\tstruct vidtv_s302m_ctx *ctx;\n\tstruct vidtv_encoder *e;\n\n\te = kzalloc(sizeof(*e), GFP_KERNEL);\n\tif (!e)\n\t\treturn NULL;\n\n\te->id = S302M;\n\n\tif (args.name)\n\t\te->name = kstrdup(args.name, GFP_KERNEL);\n\n\te->encoder_buf = vzalloc(VIDTV_S302M_BUF_SZ);\n\te->encoder_buf_sz = VIDTV_S302M_BUF_SZ;\n\te->encoder_buf_offset = 0;\n\n\te->sample_count = 0;\n\n\te->src_buf = (args.src_buf) ? args.src_buf : NULL;\n\te->src_buf_sz = (args.src_buf) ? args.src_buf_sz : 0;\n\te->src_buf_offset = 0;\n\n\te->is_video_encoder = false;\n\n\tctx = kzalloc(priv_sz, GFP_KERNEL);\n\tif (!ctx) {\n\t\tkfree(e);\n\t\treturn NULL;\n\t}\n\n\te->ctx = ctx;\n\tctx->last_duration = 0;\n\n\te->encode = vidtv_s302m_encode;\n\te->clear = vidtv_s302m_clear;\n\n\te->es_pid = cpu_to_be16(args.es_pid);\n\te->stream_id = cpu_to_be16(PES_PRIVATE_STREAM_1);\n\n\te->sync = args.sync;\n\te->sampling_rate_hz = S302M_SAMPLING_RATE_HZ;\n\n\te->last_sample_cb = args.last_sample_cb;\n\n\te->destroy = vidtv_s302m_encoder_destroy;\n\n\tif (args.head) {\n\t\twhile (args.head->next)\n\t\t\targs.head = args.head->next;\n\n\t\targs.head->next = e;\n\t}\n\n\te->next = NULL;\n\n\treturn e;\n}",
  "diff_func": "@@ -455,6 +455,9 @@ struct vidtv_encoder\n \t\te->name = kstrdup(args.name, GFP_KERNEL);\n \n \te->encoder_buf = vzalloc(VIDTV_S302M_BUF_SZ);\n+\tif (!e->encoder_buf)\n+\t\tgoto out_kfree_e;\n+\n \te->encoder_buf_sz = VIDTV_S302M_BUF_SZ;\n \te->encoder_buf_offset = 0;\n \n@@ -467,10 +470,8 @@ struct vidtv_encoder\n \te->is_video_encoder = false;\n \n \tctx = kzalloc(priv_sz, GFP_KERNEL);\n-\tif (!ctx) {\n-\t\tkfree(e);\n-\t\treturn NULL;\n-\t}\n+\tif (!ctx)\n+\t\tgoto out_kfree_buf;\n \n \te->ctx = ctx;\n \tctx->last_duration = 0;\n@@ -498,6 +499,14 @@ struct vidtv_encoder\n \te->next = NULL;\n \n \treturn e;\n+\n+out_kfree_buf:\n+\tkfree(e->encoder_buf);\n+\n+out_kfree_e:\n+\tkfree(e->name);\n+\tkfree(e);\n+\treturn NULL;\n }\n \n void vidtv_s302m_encoder_destroy(struct vidtv_encoder *e)",
  "func": "*vidtv_s302m_encoder_init(struct vidtv_s302m_encoder_init_args args)\n{\n\tu32 priv_sz = sizeof(struct vidtv_s302m_ctx);\n\tstruct vidtv_s302m_ctx *ctx;\n\tstruct vidtv_encoder *e;\n\n\te = kzalloc(sizeof(*e), GFP_KERNEL);\n\tif (!e)\n\t\treturn NULL;\n\n\te->id = S302M;\n\n\tif (args.name)\n\t\te->name = kstrdup(args.name, GFP_KERNEL);\n\n\te->encoder_buf = vzalloc(VIDTV_S302M_BUF_SZ);\n\te->encoder_buf_sz = VIDTV_S302M_BUF_SZ;\n\te->encoder_buf_offset = 0;\n\n\te->sample_count = 0;\n\n\te->src_buf = (args.src_buf) ? args.src_buf : NULL;\n\te->src_buf_sz = (args.src_buf) ? args.src_buf_sz : 0;\n\te->src_buf_offset = 0;\n\n\te->is_video_encoder = false;\n\n\tctx = kzalloc(priv_sz, GFP_KERNEL);\n\tif (!ctx) {\n\t\tkfree(e);\n\t\treturn NULL;\n\t}\n\n\te->ctx = ctx;\n\tctx->last_duration = 0;\n\n\te->encode = vidtv_s302m_encode;\n\te->clear = vidtv_s302m_clear;\n\n\te->es_pid = cpu_to_be16(args.es_pid);\n\te->stream_id = cpu_to_be16(PES_PRIVATE_STREAM_1);\n\n\te->sync = args.sync;\n\te->sampling_rate_hz = S302M_SAMPLING_RATE_HZ;\n\n\te->last_sample_cb = args.last_sample_cb;\n\n\te->destroy = vidtv_s302m_encoder_destroy;\n\n\tif (args.head) {\n\t\twhile (args.head->next)\n\t\t\targs.head = args.head->next;\n\n\t\targs.head->next = e;\n\t}\n\n\te->next = NULL;\n\n\treturn e;\n}",
  "project": "linux",
  "hash": 220376165242545767374971532665904547126,
  "size": 60,
  "commit_id": "e6a21a14106d9718aa4f8e115b1e474888eeba44",
  "message": "media: vidtv: Check for null return of vzalloc\n\nAs the possible failure of the vzalloc(), e->encoder_buf might be NULL.\nTherefore, it should be better to check it in order\nto guarantee the success of the initialization.\nIf fails, we need to free not only 'e' but also 'e->name'.\nAlso, if the allocation for ctx fails, we need to free 'e->encoder_buf'\nelse.\n\nFixes: f90cf6079bf6 (\"media: vidtv: add a bridge driver\")\nSigned-off-by: Jiasheng Jiang <jiasheng@iscas.ac.cn>\nSigned-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>\nSigned-off-by: Mauro Carvalho Chehab <mchehab@kernel.org>",
  "target": 1,
  "dataset": "other",
  "idx": 201925
}