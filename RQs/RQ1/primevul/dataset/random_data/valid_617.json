{
  "id": 617,
  "language": "unknown",
  "cwe": "",
  "commit_url": "https://github.com/val-verde/gnulib/commit/5513b40999149090987a0341c018d05d3eea1272",
  "commit_sha": "5513b40999149090987a0341c018d05d3eea1272",
  "commit_msg": "Diagnose ERE '()|\\1'\n\nProblem reported by Hanno Böck in: http://bugs.gnu.org/21513\n* lib/regcomp.c (parse_reg_exp): While parsing alternatives, keep\ntrack of the set of previously-completed subexpressions available\nbefore the first alternative, and restore this set just before\nparsing each subsequent alternative.  This lets us diagnose the\ninvalid back-reference in the ERE '()|\\1'.",
  "pr_url": null,
  "pr_info": null,
  "file_name": "ChangeLog",
  "func_name": "",
  "raw_func_from_json": "parse_reg_exp (re_string_t *regexp, regex_t *preg, re_token_t *token,\n\t       reg_syntax_t syntax, Idx nest, reg_errcode_t *err)\n{\n  re_dfa_t *dfa = preg->buffer;\n  bin_tree_t *tree, *branch = NULL;\n  tree = parse_branch (regexp, preg, token, syntax, nest, err);\n  if (BE (*err != REG_NOERROR && tree == NULL, 0))\n    return NULL;\n\n  while (token->type == OP_ALT)\n    {\n      fetch_token (token, regexp, syntax | RE_CARET_ANCHORS_HERE);\n      if (token->type != OP_ALT && token->type != END_OF_RE\n\t  && (nest == 0 || token->type != OP_CLOSE_SUBEXP))\n\t{\n\t  branch = parse_branch (regexp, preg, token, syntax, nest, err);\n\t  if (BE (*err != REG_NOERROR && branch == NULL, 0))\n\t    {\n\t      if (tree != NULL)\n\t\tpostorder (tree, free_tree, NULL);\n\t      return NULL;\n\t    }\n\t}\n      else\n\tbranch = NULL;\n      tree = create_tree (dfa, tree, branch, OP_ALT);\n      if (BE (tree == NULL, 0))\n\t{\n\t  *err = REG_ESPACE;\n\t  return NULL;\n\t}\n    }\n  return tree;\n}",
  "diff_func": "@@ -1,5 +1,13 @@\n 2015-09-19  Paul Eggert  <eggert@cs.ucla.edu>\n \n+\tDiagnose ERE '()|\\1'\n+\tProblem reported by Hanno Böck in: http://bugs.gnu.org/21513\n+\t* lib/regcomp.c (parse_reg_exp): While parsing alternatives, keep\n+\ttrack of the set of previously-completed subexpressions available\n+\tbefore the first alternative, and restore this set just before\n+\tparsing each subsequent alternative.  This lets us diagnose the\n+\tinvalid back-reference in the ERE '()|\\1'.\n+\n \tregex: merge patches from libc\n \n \t2015-09-08  Joseph Myers  <joseph@codesourcery.com>",
  "func": "parse_reg_exp (re_string_t *regexp, regex_t *preg, re_token_t *token,\n\t       reg_syntax_t syntax, Idx nest, reg_errcode_t *err)\n{\n  re_dfa_t *dfa = preg->buffer;\n  bin_tree_t *tree, *branch = NULL;\n  tree = parse_branch (regexp, preg, token, syntax, nest, err);\n  if (BE (*err != REG_NOERROR && tree == NULL, 0))\n    return NULL;\n\n  while (token->type == OP_ALT)\n    {\n      fetch_token (token, regexp, syntax | RE_CARET_ANCHORS_HERE);\n      if (token->type != OP_ALT && token->type != END_OF_RE\n\t  && (nest == 0 || token->type != OP_CLOSE_SUBEXP))\n\t{\n\t  branch = parse_branch (regexp, preg, token, syntax, nest, err);\n\t  if (BE (*err != REG_NOERROR && branch == NULL, 0))\n\t    {\n\t      if (tree != NULL)\n\t\tpostorder (tree, free_tree, NULL);\n\t      return NULL;\n\t    }\n\t}\n      else\n\tbranch = NULL;\n      tree = create_tree (dfa, tree, branch, OP_ALT);\n      if (BE (tree == NULL, 0))\n\t{\n\t  *err = REG_ESPACE;\n\t  return NULL;\n\t}\n    }\n  return tree;\n}",
  "project": "gnulib",
  "hash": 273676495705910113330018924005947558068,
  "size": 34,
  "commit_id": "5513b40999149090987a0341c018d05d3eea1272",
  "message": "Diagnose ERE '()|\\1'\n\nProblem reported by Hanno Böck in: http://bugs.gnu.org/21513\n* lib/regcomp.c (parse_reg_exp): While parsing alternatives, keep\ntrack of the set of previously-completed subexpressions available\nbefore the first alternative, and restore this set just before\nparsing each subsequent alternative.  This lets us diagnose the\ninvalid back-reference in the ERE '()|\\1'.",
  "target": 1,
  "dataset": "other",
  "idx": 198942
}