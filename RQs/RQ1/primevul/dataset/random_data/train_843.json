{
  "id": 843,
  "language": "c",
  "cwe": "CWE-119",
  "commit_url": "https://github.com/etemesi254/ffmpeg-ht/commit/cd4663dc80323ba64989d0c103d51ad3ee0e9c2f",
  "commit_sha": "cd4663dc80323ba64989d0c103d51ad3ee0e9c2f",
  "commit_msg": "smacker: add sanity check for length in smacker_decode_tree()\n\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>\n\nBug-Id: 1098\nCc: libav-stable@libav.org\nSigned-off-by: Sean McGovern <gseanmcg@gmail.com>",
  "pr_url": null,
  "pr_info": null,
  "file_name": "libavcodec/smacker.c",
  "func_name": "",
  "raw_func_from_json": " static int smacker_decode_tree(BitstreamContext *bc, HuffContext *hc,\n                                uint32_t prefix, int length)\n {\n     if (!bitstream_read_bit(bc)) { // Leaf\n         if(hc->current >= 256){\n             av_log(NULL, AV_LOG_ERROR, \"Tree size exceeded!\\n\");\n            return AVERROR_INVALIDDATA;\n        }\n        if(length){\n            hc->bits[hc->current] = prefix;\n            hc->lengths[hc->current] = length;\n        } else {\n            hc->bits[hc->current] = 0;\n            hc->lengths[hc->current] = 0;\n        }\n        hc->values[hc->current] = bitstream_read(bc, 8);\n        hc->current++;\n        if(hc->maxlength < length)\n            hc->maxlength = length;\n        return 0;\n    } else { //Node\n        int r;\n        length++;\n        r = smacker_decode_tree(bc, hc, prefix, length);\n        if(r)\n            return r;\n        return smacker_decode_tree(bc, hc, prefix | (1 << (length - 1)), length);\n    }\n}\n",
  "diff_func": "@@ -43,7 +43,7 @@\n \n #define SMKTREE_BITS 9\n #define SMK_NODE 0x80000000\n-\n+#define SMKTREE_DECODE_MAX_RECURSION 32\n \n typedef struct SmackVContext {\n     AVCodecContext *avctx;\n@@ -97,6 +97,11 @@ enum SmkBlockTypes {\n static int smacker_decode_tree(BitstreamContext *bc, HuffContext *hc,\n                                uint32_t prefix, int length)\n {\n+    if (length > SMKTREE_DECODE_MAX_RECURSION) {\n+        av_log(NULL, AV_LOG_ERROR, \"Maximum tree recursion level exceeded.\\n\");\n+        return AVERROR_INVALIDDATA;\n+    }\n+\n     if (!bitstream_read_bit(bc)) { // Leaf\n         if(hc->current >= 256){\n             av_log(NULL, AV_LOG_ERROR, \"Tree size exceeded!\\n\");",
  "project": "libav",
  "commit_id": "cd4663dc80323ba64989d0c103d51ad3ee0e9c2f",
  "target": 1,
  "func": " static int smacker_decode_tree(BitstreamContext *bc, HuffContext *hc,\n                                uint32_t prefix, int length)\n {\n     if (!bitstream_read_bit(bc)) { // Leaf\n         if(hc->current >= 256){\n             av_log(NULL, AV_LOG_ERROR, \"Tree size exceeded!\\n\");\n            return AVERROR_INVALIDDATA;\n        }\n        if(length){\n            hc->bits[hc->current] = prefix;\n            hc->lengths[hc->current] = length;\n        } else {\n            hc->bits[hc->current] = 0;\n            hc->lengths[hc->current] = 0;\n        }\n        hc->values[hc->current] = bitstream_read(bc, 8);\n        hc->current++;\n        if(hc->maxlength < length)\n            hc->maxlength = length;\n        return 0;\n    } else { //Node\n        int r;\n        length++;\n        r = smacker_decode_tree(bc, hc, prefix, length);\n        if(r)\n            return r;\n        return smacker_decode_tree(bc, hc, prefix | (1 << (length - 1)), length);\n    }\n}\n",
  "big_vul_idx": 180843,
  "idx": 2396,
  "hash": 123413656536164614730473477667931906703
}