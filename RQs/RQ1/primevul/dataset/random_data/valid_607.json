{
  "id": 607,
  "language": "c",
  "cwe": "",
  "commit_url": "https://github.com/ImageMagick/ImageMagick6/commit/072d7b10dbe74d1cf4ec0d008990c1a28c076f9e",
  "commit_sha": "072d7b10dbe74d1cf4ec0d008990c1a28c076f9e",
  "commit_msg": "https://github.com/ImageMagick/ImageMagick/issues/3332",
  "pr_url": null,
  "pr_info": null,
  "file_name": "magick/statistic.c",
  "func_name": "",
  "raw_func_from_json": "static Quantum ApplyFunction(Quantum pixel,const MagickFunction function,\n  const size_t number_parameters,const double *parameters,\n  ExceptionInfo *exception)\n{\n  MagickRealType\n    result;\n\n  ssize_t\n    i;\n\n  (void) exception;\n  result=0.0;\n  switch (function)\n  {\n    case PolynomialFunction:\n    {\n      /*\n       * Polynomial\n       * Parameters:   polynomial constants,  highest to lowest order\n       *   For example:      c0*x^3 + c1*x^2 + c2*x  + c3\n       */\n      result=0.0;\n      for (i=0; i < (ssize_t) number_parameters; i++)\n        result=result*QuantumScale*pixel + parameters[i];\n      result*=QuantumRange;\n      break;\n    }\n    case SinusoidFunction:\n    {\n      /* Sinusoid Function\n       * Parameters:   Freq, Phase, Ampl, bias\n       */\n      double  freq,phase,ampl,bias;\n      freq  = ( number_parameters >= 1 ) ? parameters[0] : 1.0;\n      phase = ( number_parameters >= 2 ) ? parameters[1] : 0.0;\n      ampl  = ( number_parameters >= 3 ) ? parameters[2] : 0.5;\n      bias  = ( number_parameters >= 4 ) ? parameters[3] : 0.5;\n      result=(MagickRealType) (QuantumRange*(ampl*sin((double) (2.0*MagickPI*\n        (freq*QuantumScale*pixel + phase/360.0) )) + bias ) );\n      break;\n    }\n    case ArcsinFunction:\n    {\n      /* Arcsin Function  (peged at range limits for invalid results)\n       * Parameters:   Width, Center, Range, Bias\n       */\n      double  width,range,center,bias;\n      width  = ( number_parameters >= 1 ) ? parameters[0] : 1.0;\n      center = ( number_parameters >= 2 ) ? parameters[1] : 0.5;\n      range  = ( number_parameters >= 3 ) ? parameters[2] : 1.0;\n      bias   = ( number_parameters >= 4 ) ? parameters[3] : 0.5;\n      result = 2.0/width*(QuantumScale*pixel - center);\n      if ( result <= -1.0 )\n        result = bias - range/2.0;\n      else if ( result >= 1.0 )\n        result = bias + range/2.0;\n      else\n        result=(MagickRealType) (range/MagickPI*asin((double) result)+bias);\n      result *= QuantumRange;\n      break;\n    }\n    case ArctanFunction:\n    {\n      /* Arctan Function\n       * Parameters:   Slope, Center, Range, Bias\n       */\n      double  slope,range,center,bias;\n      slope  = ( number_parameters >= 1 ) ? parameters[0] : 1.0;\n      center = ( number_parameters >= 2 ) ? parameters[1] : 0.5;\n      range  = ( number_parameters >= 3 ) ? parameters[2] : 1.0;\n      bias   = ( number_parameters >= 4 ) ? parameters[3] : 0.5;\n      result=(MagickRealType) (MagickPI*slope*(QuantumScale*pixel-center));\n      result=(MagickRealType) (QuantumRange*(range/MagickPI*atan((double)\n                  result) + bias ) );\n      break;\n    }\n    case UndefinedFunction:\n      break;\n  }\n  return(ClampToQuantum(result));\n}",
  "diff_func": "@@ -1040,22 +1040,28 @@ static Quantum ApplyFunction(Quantum pixel,const MagickFunction function,\n     }\n     case ArcsinFunction:\n     {\n+      double\n+        bias,\n+        center,\n+        range,\n+        width;\n+\n       /* Arcsin Function  (peged at range limits for invalid results)\n        * Parameters:   Width, Center, Range, Bias\n        */\n-      double  width,range,center,bias;\n-      width  = ( number_parameters >= 1 ) ? parameters[0] : 1.0;\n-      center = ( number_parameters >= 2 ) ? parameters[1] : 0.5;\n-      range  = ( number_parameters >= 3 ) ? parameters[2] : 1.0;\n-      bias   = ( number_parameters >= 4 ) ? parameters[3] : 0.5;\n-      result = 2.0/width*(QuantumScale*pixel - center);\n-      if ( result <= -1.0 )\n-        result = bias - range/2.0;\n-      else if ( result >= 1.0 )\n-        result = bias + range/2.0;\n+      width=(number_parameters >= 1) ? parameters[0] : 1.0;\n+      center=(number_parameters >= 2) ? parameters[1] : 0.5;\n+      range=(number_parameters >= 3) ? parameters[2] : 1.0;\n+      bias=(number_parameters >= 4) ? parameters[3] : 0.5;\n+      result=2.0*PerceptibleReciprocal(width)*(QuantumScale*pixel-center);\n+      if (result <= -1.0)\n+        result=bias-range/2.0;\n       else\n-        result=(MagickRealType) (range/MagickPI*asin((double) result)+bias);\n-      result *= QuantumRange;\n+        if (result >= 1.0)\n+          result=bias+range/2.0;\n+        else\n+          result=(MagickRealType) (range/MagickPI*asin((double) result)+bias);\n+      result*=QuantumRange;\n       break;\n     }\n     case ArctanFunction:",
  "func": "static Quantum ApplyFunction(Quantum pixel,const MagickFunction function,\n  const size_t number_parameters,const double *parameters,\n  ExceptionInfo *exception)\n{\n  MagickRealType\n    result;\n\n  ssize_t\n    i;\n\n  (void) exception;\n  result=0.0;\n  switch (function)\n  {\n    case PolynomialFunction:\n    {\n      /*\n       * Polynomial\n       * Parameters:   polynomial constants,  highest to lowest order\n       *   For example:      c0*x^3 + c1*x^2 + c2*x  + c3\n       */\n      result=0.0;\n      for (i=0; i < (ssize_t) number_parameters; i++)\n        result=result*QuantumScale*pixel + parameters[i];\n      result*=QuantumRange;\n      break;\n    }\n    case SinusoidFunction:\n    {\n      /* Sinusoid Function\n       * Parameters:   Freq, Phase, Ampl, bias\n       */\n      double  freq,phase,ampl,bias;\n      freq  = ( number_parameters >= 1 ) ? parameters[0] : 1.0;\n      phase = ( number_parameters >= 2 ) ? parameters[1] : 0.0;\n      ampl  = ( number_parameters >= 3 ) ? parameters[2] : 0.5;\n      bias  = ( number_parameters >= 4 ) ? parameters[3] : 0.5;\n      result=(MagickRealType) (QuantumRange*(ampl*sin((double) (2.0*MagickPI*\n        (freq*QuantumScale*pixel + phase/360.0) )) + bias ) );\n      break;\n    }\n    case ArcsinFunction:\n    {\n      /* Arcsin Function  (peged at range limits for invalid results)\n       * Parameters:   Width, Center, Range, Bias\n       */\n      double  width,range,center,bias;\n      width  = ( number_parameters >= 1 ) ? parameters[0] : 1.0;\n      center = ( number_parameters >= 2 ) ? parameters[1] : 0.5;\n      range  = ( number_parameters >= 3 ) ? parameters[2] : 1.0;\n      bias   = ( number_parameters >= 4 ) ? parameters[3] : 0.5;\n      result = 2.0/width*(QuantumScale*pixel - center);\n      if ( result <= -1.0 )\n        result = bias - range/2.0;\n      else if ( result >= 1.0 )\n        result = bias + range/2.0;\n      else\n        result=(MagickRealType) (range/MagickPI*asin((double) result)+bias);\n      result *= QuantumRange;\n      break;\n    }\n    case ArctanFunction:\n    {\n      /* Arctan Function\n       * Parameters:   Slope, Center, Range, Bias\n       */\n      double  slope,range,center,bias;\n      slope  = ( number_parameters >= 1 ) ? parameters[0] : 1.0;\n      center = ( number_parameters >= 2 ) ? parameters[1] : 0.5;\n      range  = ( number_parameters >= 3 ) ? parameters[2] : 1.0;\n      bias   = ( number_parameters >= 4 ) ? parameters[3] : 0.5;\n      result=(MagickRealType) (MagickPI*slope*(QuantumScale*pixel-center));\n      result=(MagickRealType) (QuantumRange*(range/MagickPI*atan((double)\n                  result) + bias ) );\n      break;\n    }\n    case UndefinedFunction:\n      break;\n  }\n  return(ClampToQuantum(result));\n}",
  "project": "ImageMagick6",
  "hash": 304799564303649187232279385135928444641,
  "size": 81,
  "commit_id": "072d7b10dbe74d1cf4ec0d008990c1a28c076f9e",
  "message": "https://github.com/ImageMagick/ImageMagick/issues/3332",
  "target": 1,
  "dataset": "other",
  "idx": 198640
}