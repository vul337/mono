{
  "id": 157,
  "language": "cpp",
  "cwe": "CWE-200",
  "commit_url": "https://github.com/benemorius/plasma-workspace/commit/8164beac15ea34ec0d1564f0557fe3e742bdd938",
  "commit_sha": "8164beac15ea34ec0d1564f0557fe3e742bdd938",
  "commit_msg": "[Notifications] Fix grouping\n\nSanitize the body before doing anything else.\nCleanup grouping logic.\n\nDifferential Revision: https://phabricator.kde.org/D10315",
  "pr_url": null,
  "pr_info": null,
  "file_name": "dataengines/notifications/notificationsengine.cpp",
  "func_name": "",
  "raw_func_from_json": "uint NotificationsEngine::Notify(const QString &app_name, uint replaces_id,\n                                 const QString &app_icon, const QString &summary, const QString &body,\n                                 const QStringList &actions, const QVariantMap &hints, int timeout)\n{\n    uint partOf = 0;\n    const QString appRealName = hints[QStringLiteral(\"x-kde-appname\")].toString();\n    const QString eventId = hints[QStringLiteral(\"x-kde-eventId\")].toString();\n    const bool skipGrouping = hints[QStringLiteral(\"x-kde-skipGrouping\")].toBool();\n\n    if (!replaces_id && m_activeNotifications.values().contains(app_name + summary) && !skipGrouping && !m_alwaysReplaceAppsList.contains(app_name)) {\n        partOf = m_activeNotifications.key(app_name + summary).midRef(13).toUInt();\n    }\n\n     qDebug() << \"Currrent active notifications:\" << m_activeNotifications;\n     qDebug() << \"Guessing partOf as:\" << partOf;\n     qDebug() << \" New Notification: \" << summary << body << timeout << \"& Part of:\" << partOf;\n    QString _body;\n \n     if (partOf > 0) {\n         const QString source = QStringLiteral(\"notification %1\").arg(partOf);\n         Plasma::DataContainer *container = containerForSource(source);\n         if (container) {\n            _body = container->data()[QStringLiteral(\"body\")].toString();\n            if (_body != body) {\n                _body.append(\"\\n\").append(body);\n            } else {\n                _body = body;\n             }\n \n             replaces_id = partOf;\n            CloseNotification(partOf);\n        }\n    }\n\n    uint id = replaces_id ? replaces_id : m_nextId++;\n\n    if (m_alwaysReplaceAppsList.contains(app_name)) {\n        if (m_notificationsFromReplaceableApp.contains(app_name)) {\n            id = m_notificationsFromReplaceableApp.value(app_name);\n        } else {\n            m_notificationsFromReplaceableApp.insert(app_name, id);\n        }\n    }\n\n    QString appname_str = app_name;\n    if (appname_str.isEmpty()) {\n        appname_str = i18n(\"Unknown Application\");\n    }\n\n    bool isPersistent = timeout == 0;\n\n \n     const int AVERAGE_WORD_LENGTH = 6;\n     const int WORD_PER_MINUTE = 250;\n    int count = summary.length() + body.length();\n \n        timeout = 60000 * count / AVERAGE_WORD_LENGTH / WORD_PER_MINUTE;\n\n        timeout = 2000 + qMax(timeout, 3000);\n    }\n",
  "diff_func": "@@ -202,18 +202,19 @@ uint NotificationsEngine::Notify(const QString &app_name, uint replaces_id,\n     qDebug() << \"Currrent active notifications:\" << m_activeNotifications;\n     qDebug() << \"Guessing partOf as:\" << partOf;\n     qDebug() << \" New Notification: \" << summary << body << timeout << \"& Part of:\" << partOf;\n-    QString _body;\n+    QString bodyFinal = NotificationSanitizer::parse(body);\n \n     if (partOf > 0) {\n         const QString source = QStringLiteral(\"notification %1\").arg(partOf);\n         Plasma::DataContainer *container = containerForSource(source);\n         if (container) {\n             // append the body text\n-            _body = container->data()[QStringLiteral(\"body\")].toString();\n-            if (_body != body) {\n-                _body.append(\"\\n\").append(body);\n-            } else {\n-                _body = body;\n+            const QString previousBody = container->data()[QStringLiteral(\"body\")].toString();\n+            if (previousBody != bodyFinal) {\n+                // FIXME: This will just append the entire old XML document to another one, leading to:\n+                // <?xml><html>old</html><br><?xml><html>new</html>\n+                // It works but is not very clean.\n+                bodyFinal = previousBody + QStringLiteral(\"<br/>\") + bodyFinal;\n             }\n \n             replaces_id = partOf;\n@@ -246,7 +247,7 @@ uint NotificationsEngine::Notify(const QString &app_name, uint replaces_id,\n \n     const int AVERAGE_WORD_LENGTH = 6;\n     const int WORD_PER_MINUTE = 250;\n-    int count = summary.length() + body.length();\n+    int count = summary.length() + body.length() - strlen(\"<?xml version=\\\"1.0\\\"><html></html>\");\n \n     // -1 is \"server default\", 0 is persistent with \"server default\" display time,\n     // anything more should honor the setting\n@@ -261,9 +262,6 @@ uint NotificationsEngine::Notify(const QString &app_name, uint replaces_id,\n \n     const QString source = QStringLiteral(\"notification %1\").arg(id);\n \n-    QString bodyFinal = (partOf == 0 ? body : _body);\n-    bodyFinal = NotificationSanitizer::parse(bodyFinal);\n-\n     Plasma::DataEngine::Data notificationData;\n     notificationData.insert(QStringLiteral(\"id\"), QString::number(id));\n     notificationData.insert(QStringLiteral(\"eventId\"), eventId);",
  "project": "kde",
  "commit_id": "8164beac15ea34ec0d1564f0557fe3e742bdd938",
  "target": 1,
  "func": "uint NotificationsEngine::Notify(const QString &app_name, uint replaces_id,\n                                 const QString &app_icon, const QString &summary, const QString &body,\n                                 const QStringList &actions, const QVariantMap &hints, int timeout)\n{\n    uint partOf = 0;\n    const QString appRealName = hints[QStringLiteral(\"x-kde-appname\")].toString();\n    const QString eventId = hints[QStringLiteral(\"x-kde-eventId\")].toString();\n    const bool skipGrouping = hints[QStringLiteral(\"x-kde-skipGrouping\")].toBool();\n\n    if (!replaces_id && m_activeNotifications.values().contains(app_name + summary) && !skipGrouping && !m_alwaysReplaceAppsList.contains(app_name)) {\n        partOf = m_activeNotifications.key(app_name + summary).midRef(13).toUInt();\n    }\n\n     qDebug() << \"Currrent active notifications:\" << m_activeNotifications;\n     qDebug() << \"Guessing partOf as:\" << partOf;\n     qDebug() << \" New Notification: \" << summary << body << timeout << \"& Part of:\" << partOf;\n    QString _body;\n \n     if (partOf > 0) {\n         const QString source = QStringLiteral(\"notification %1\").arg(partOf);\n         Plasma::DataContainer *container = containerForSource(source);\n         if (container) {\n            _body = container->data()[QStringLiteral(\"body\")].toString();\n            if (_body != body) {\n                _body.append(\"\\n\").append(body);\n            } else {\n                _body = body;\n             }\n \n             replaces_id = partOf;\n            CloseNotification(partOf);\n        }\n    }\n\n    uint id = replaces_id ? replaces_id : m_nextId++;\n\n    if (m_alwaysReplaceAppsList.contains(app_name)) {\n        if (m_notificationsFromReplaceableApp.contains(app_name)) {\n            id = m_notificationsFromReplaceableApp.value(app_name);\n        } else {\n            m_notificationsFromReplaceableApp.insert(app_name, id);\n        }\n    }\n\n    QString appname_str = app_name;\n    if (appname_str.isEmpty()) {\n        appname_str = i18n(\"Unknown Application\");\n    }\n\n    bool isPersistent = timeout == 0;\n\n \n     const int AVERAGE_WORD_LENGTH = 6;\n     const int WORD_PER_MINUTE = 250;\n    int count = summary.length() + body.length();\n \n        timeout = 60000 * count / AVERAGE_WORD_LENGTH / WORD_PER_MINUTE;\n\n        timeout = 2000 + qMax(timeout, 3000);\n    }\n",
  "big_vul_idx": 178197,
  "idx": 279,
  "hash": 66626965994794909671436631171592255350
}