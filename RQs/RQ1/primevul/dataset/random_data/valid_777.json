{
  "id": 777,
  "language": "cc",
  "cwe": "",
  "commit_url": "https://github.com/ekaynar/ceph-master/commit/ff72c50a2c43c57aead933eb4903ad1ca6d1748a",
  "commit_sha": "ff72c50a2c43c57aead933eb4903ad1ca6d1748a",
  "commit_msg": "rgw: improve beast\n\nAvoid leaking connections that had partially-consumed\nclient data on unexpected disconnect.\n\nResolves CVE-2020-1700 (moderate impact flaw).\n\nFixes: https://tracker.ceph.com/issues/42531\n\nSigned-off-by: Or Friedmann <ofriedma@redhat.com>\nSigned-off-by: Matt Benjamin <mbenjamin@redhat.com>",
  "pr_url": null,
  "pr_info": null,
  "file_name": "src/rgw/rgw_asio_frontend.cc",
  "func_name": "",
  "raw_func_from_json": "  size_t recv_body(char* buf, size_t max) override {\n    auto& message = parser.get();\n    auto& body_remaining = message.body();\n    body_remaining.data = buf;\n    body_remaining.size = max;\n\n    while (body_remaining.size && !parser.is_done()) {\n      boost::system::error_code ec;\n      http::async_read_some(stream, buffer, parser, yield[ec]);\n      if (ec == http::error::partial_message ||\n          ec == http::error::need_buffer) {\n        break;\n      }\n      if (ec) {\n        ldout(cct, 4) << \"failed to read body: \" << ec.message() << dendl;\n        throw rgw::io::Exception(ec.value(), std::system_category());\n      }\n    }\n    return max - body_remaining.size;\n  }",
  "diff_func": "@@ -76,8 +76,7 @@ class StreamIO : public rgw::asio::ClientIO {\n     while (body_remaining.size && !parser.is_done()) {\n       boost::system::error_code ec;\n       http::async_read_some(stream, buffer, parser, yield[ec]);\n-      if (ec == http::error::partial_message ||\n-          ec == http::error::need_buffer) {\n+      if (ec == http::error::need_buffer) {\n         break;\n       }\n       if (ec) {",
  "func": "  size_t recv_body(char* buf, size_t max) override {\n    auto& message = parser.get();\n    auto& body_remaining = message.body();\n    body_remaining.data = buf;\n    body_remaining.size = max;\n\n    while (body_remaining.size && !parser.is_done()) {\n      boost::system::error_code ec;\n      http::async_read_some(stream, buffer, parser, yield[ec]);\n      if (ec == http::error::partial_message ||\n          ec == http::error::need_buffer) {\n        break;\n      }\n      if (ec) {\n        ldout(cct, 4) << \"failed to read body: \" << ec.message() << dendl;\n        throw rgw::io::Exception(ec.value(), std::system_category());\n      }\n    }\n    return max - body_remaining.size;\n  }",
  "project": "ceph",
  "hash": 239302242093544263117469919869262423971,
  "size": 20,
  "commit_id": "ff72c50a2c43c57aead933eb4903ad1ca6d1748a",
  "message": "rgw: improve beast\n\nAvoid leaking connections that had partially-consumed\nclient data on unexpected disconnect.\n\nResolves CVE-2020-1700 (moderate impact flaw).\n\nFixes: https://tracker.ceph.com/issues/42531\n\nSigned-off-by: Or Friedmann <ofriedma@redhat.com>\nSigned-off-by: Matt Benjamin <mbenjamin@redhat.com>",
  "target": 1,
  "dataset": "other",
  "idx": 206666
}