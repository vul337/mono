{
  "id": 1110,
  "language": "unknown",
  "cwe": "CWE-269",
  "commit_url": "https://github.com/netblue30/firejail/commit/5d43fdcd215203868d440ffc42036f5f5ffc89fc",
  "commit_sha": "5d43fdcd215203868d440ffc42036f5f5ffc89fc",
  "commit_msg": "security fix",
  "pr_url": null,
  "pr_info": null,
  "file_name": "RELNOTES",
  "func_name": "",
  "raw_func_from_json": "void bandwidth_pid(pid_t pid, const char *command, const char *dev, int down, int up) {\n\tEUID_ASSERT();\n\tEUID_ROOT();\n\tchar *comm = pid_proc_comm(pid);\n\tEUID_USER();\n\tif (!comm) {\n\t\tfprintf(stderr, \"Error: cannot find sandbox\\n\");\n\t\texit(1);\n\t}\n\n\tif (strcmp(comm, \"firejail\") != 0) {\n\t\tfprintf(stderr, \"Error: cannot find sandbox\\n\");\n\t\texit(1);\n\t}\n\tfree(comm);\n\t\n\tchar *name;\n\tif (asprintf(&name, \"/run/firejail/network/%d-netmap\", pid) == -1)\n\t\terrExit(\"asprintf\");\n\tstruct stat s;\n\tif (stat(name, &s) == -1) {\n\t\tfprintf(stderr, \"Error: the sandbox doesn't use a new network namespace\\n\");\n\t\texit(1);\n\t}\n\n\tpid_t child;\n\tif (find_child(pid, &child) == -1) {\n\t\tfprintf(stderr, \"Error: cannot join the network namespace\\n\");\n\t\texit(1);\n\t}\n\n\tEUID_ROOT();\n\tif (join_namespace(child, \"net\")) {\n\t\tfprintf(stderr, \"Error: cannot join the network namespace\\n\");\n\t\texit(1);\n\t}\n\n\tif (strcmp(command, \"set\") == 0)\n\t\tbandwidth_set(pid, dev, down, up);\n\telse if (strcmp(command, \"clear\") == 0)\n\t\tbandwidth_remove(pid, dev);\n\n\tchar *devname = NULL;\n\tif (dev) {\n\t\tchar *fname;\n\t\tif (asprintf(&fname, \"%s/%d-netmap\", RUN_FIREJAIL_NETWORK_DIR, (int) pid) == -1)\n\t\t\terrExit(\"asprintf\");\n\t\tFILE *fp = fopen(fname, \"r\");\n\t\tif (!fp) {\n\t\t\tfprintf(stderr, \"Error: cannot read network map file %s\\n\", fname);\n\t\t\texit(1);\n\t\t}\n\t\t\n\t\tchar buf[1024];\n\t\tint len = strlen(dev);\n\t\twhile (fgets(buf, 1024, fp)) {\n\t\t\tchar *ptr = strchr(buf, '\\n');\n\t\t\tif (ptr)\n\t\t\t\t*ptr = '\\0';\n\t\t\tif (*buf == '\\0')\n\t\t\t\tbreak;\n\n\t\t\tif (strncmp(buf, dev, len) == 0  && buf[len] == ':') {\n\t\t\t\tdevname = strdup(buf + len + 1);\n\t\t\t\tif (!devname)\n\t\t\t\t\terrExit(\"strdup\");\n\t\t\t\tif (if_nametoindex(devname) == 0) {\n\t\t\t\t\tfprintf(stderr, \"Error: cannot find network device %s\\n\", devname);\n\t\t\t\t\texit(1);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tfree(fname);\n\t\tfclose(fp);\n\t}\n\t\n\tchar *cmd = NULL;\n\tif (devname) {\n\t\tif (strcmp(command, \"set\") == 0) {\n\t\t\tif (asprintf(&cmd, \"%s/firejail/fshaper.sh --%s %s %d %d\",\n\t\t\t\tLIBDIR, command, devname, down, up) == -1)\n\t\t\t\terrExit(\"asprintf\");\n\t\t}\n\t\telse {\n\t\t\tif (asprintf(&cmd, \"%s/firejail/fshaper.sh --%s %s\",\n\t\t\t\tLIBDIR, command, devname) == -1)\n\t\t\t\terrExit(\"asprintf\");\n\t\t}\n\t}\n\telse {\n\t\tif (asprintf(&cmd, \"%s/firejail/fshaper.sh --%s\", LIBDIR, command) == -1)\n\t\t\terrExit(\"asprintf\");\n\t}\n\tassert(cmd);\n\n\tenviron = NULL;\n\n\tif (setreuid(0, 0))\n\t\terrExit(\"setreuid\");\n \tif (setregid(0, 0))\n \t\terrExit(\"setregid\");\n \n\tif (!cfg.shell)\n\t\tcfg.shell = guess_shell();\n\tif (!cfg.shell) {\n\t\tfprintf(stderr, \"Error: no POSIX shell found, please use --shell command line option\\n\");\n\t\texit(1);\n\t}\n \tchar *arg[4];\n\targ[0] = cfg.shell;\n \targ[1] = \"-c\";\n \targ[2] = cmd;\n \targ[3] = NULL;\n\tclearenv();\n\texecvp(arg[0], arg);\n\t\n\terrExit(\"execvp\");\n}\n",
  "diff_func": "@@ -1,5 +1,6 @@\n firejail (0.9.45) baseline; urgency=low\n   * development version, work in progress\n+  * security: --bandwidth root shel found by Martin Carpenter\n   * security: disabled --allow-debuggers when running on kernel\n     versions prior to 4.8; a kernel bug in ptrace system call\n     allows a full bypass of seccomp filter; problem reported by Lizzie Dixon",
  "project": "firejail",
  "commit_id": "5d43fdcd215203868d440ffc42036f5f5ffc89fc",
  "target": 1,
  "func": "void bandwidth_pid(pid_t pid, const char *command, const char *dev, int down, int up) {\n\tEUID_ASSERT();\n\tEUID_ROOT();\n\tchar *comm = pid_proc_comm(pid);\n\tEUID_USER();\n\tif (!comm) {\n\t\tfprintf(stderr, \"Error: cannot find sandbox\\n\");\n\t\texit(1);\n\t}\n\n\tif (strcmp(comm, \"firejail\") != 0) {\n\t\tfprintf(stderr, \"Error: cannot find sandbox\\n\");\n\t\texit(1);\n\t}\n\tfree(comm);\n\t\n\tchar *name;\n\tif (asprintf(&name, \"/run/firejail/network/%d-netmap\", pid) == -1)\n\t\terrExit(\"asprintf\");\n\tstruct stat s;\n\tif (stat(name, &s) == -1) {\n\t\tfprintf(stderr, \"Error: the sandbox doesn't use a new network namespace\\n\");\n\t\texit(1);\n\t}\n\n\tpid_t child;\n\tif (find_child(pid, &child) == -1) {\n\t\tfprintf(stderr, \"Error: cannot join the network namespace\\n\");\n\t\texit(1);\n\t}\n\n\tEUID_ROOT();\n\tif (join_namespace(child, \"net\")) {\n\t\tfprintf(stderr, \"Error: cannot join the network namespace\\n\");\n\t\texit(1);\n\t}\n\n\tif (strcmp(command, \"set\") == 0)\n\t\tbandwidth_set(pid, dev, down, up);\n\telse if (strcmp(command, \"clear\") == 0)\n\t\tbandwidth_remove(pid, dev);\n\n\tchar *devname = NULL;\n\tif (dev) {\n\t\tchar *fname;\n\t\tif (asprintf(&fname, \"%s/%d-netmap\", RUN_FIREJAIL_NETWORK_DIR, (int) pid) == -1)\n\t\t\terrExit(\"asprintf\");\n\t\tFILE *fp = fopen(fname, \"r\");\n\t\tif (!fp) {\n\t\t\tfprintf(stderr, \"Error: cannot read network map file %s\\n\", fname);\n\t\t\texit(1);\n\t\t}\n\t\t\n\t\tchar buf[1024];\n\t\tint len = strlen(dev);\n\t\twhile (fgets(buf, 1024, fp)) {\n\t\t\tchar *ptr = strchr(buf, '\\n');\n\t\t\tif (ptr)\n\t\t\t\t*ptr = '\\0';\n\t\t\tif (*buf == '\\0')\n\t\t\t\tbreak;\n\n\t\t\tif (strncmp(buf, dev, len) == 0  && buf[len] == ':') {\n\t\t\t\tdevname = strdup(buf + len + 1);\n\t\t\t\tif (!devname)\n\t\t\t\t\terrExit(\"strdup\");\n\t\t\t\tif (if_nametoindex(devname) == 0) {\n\t\t\t\t\tfprintf(stderr, \"Error: cannot find network device %s\\n\", devname);\n\t\t\t\t\texit(1);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tfree(fname);\n\t\tfclose(fp);\n\t}\n\t\n\tchar *cmd = NULL;\n\tif (devname) {\n\t\tif (strcmp(command, \"set\") == 0) {\n\t\t\tif (asprintf(&cmd, \"%s/firejail/fshaper.sh --%s %s %d %d\",\n\t\t\t\tLIBDIR, command, devname, down, up) == -1)\n\t\t\t\terrExit(\"asprintf\");\n\t\t}\n\t\telse {\n\t\t\tif (asprintf(&cmd, \"%s/firejail/fshaper.sh --%s %s\",\n\t\t\t\tLIBDIR, command, devname) == -1)\n\t\t\t\terrExit(\"asprintf\");\n\t\t}\n\t}\n\telse {\n\t\tif (asprintf(&cmd, \"%s/firejail/fshaper.sh --%s\", LIBDIR, command) == -1)\n\t\t\terrExit(\"asprintf\");\n\t}\n\tassert(cmd);\n\n\tenviron = NULL;\n\n\tif (setreuid(0, 0))\n\t\terrExit(\"setreuid\");\n \tif (setregid(0, 0))\n \t\terrExit(\"setregid\");\n \n\tif (!cfg.shell)\n\t\tcfg.shell = guess_shell();\n\tif (!cfg.shell) {\n\t\tfprintf(stderr, \"Error: no POSIX shell found, please use --shell command line option\\n\");\n\t\texit(1);\n\t}\n \tchar *arg[4];\n\targ[0] = cfg.shell;\n \targ[1] = \"-c\";\n \targ[2] = cmd;\n \targ[3] = NULL;\n\tclearenv();\n\texecvp(arg[0], arg);\n\t\n\terrExit(\"execvp\");\n}\n",
  "big_vul_idx": 181590,
  "idx": 3026,
  "hash": 13630448442118778393266820077544164456
}