{
  "id": 1067,
  "language": "h",
  "cwe": "CWE-120",
  "commit_url": "https://github.com/rohan-flutterint/serenity/commit/4317db7498eaa5a37068052bb0310fbc6a5f78e4",
  "commit_sha": "4317db7498eaa5a37068052bb0310fbc6a5f78e4",
  "commit_msg": "LibArchive: Make bounds checks stricter in the Zip parser\n\nWe now also check we have enough space in the incoming buffer for the\nvarious signatures and optional (length specified) fields. This helps\nprevents a possible heap overflow read.",
  "pr_url": null,
  "pr_info": null,
  "file_name": "Userland/Libraries/LibArchive/Zip.h",
  "func_name": "",
  "raw_func_from_json": "    bool read(ReadonlyBytes buffer)\n    {\n        auto fields_size = sizeof(CentralDirectoryRecord) - (sizeof(u8*) * 3);\n        if (buffer.size() < fields_size)\n            return false;\n        if (memcmp(buffer.data(), central_directory_record_signature, sizeof(central_directory_record_signature)) != 0)\n            return false;\n        memcpy(reinterpret_cast<void*>(&made_by_version), buffer.data() + sizeof(central_directory_record_signature), fields_size);\n        name = buffer.data() + sizeof(central_directory_record_signature) + fields_size;\n        extra_data = name + name_length;\n        comment = extra_data + extra_data_length;\n        return true;\n    }",
  "diff_func": "@@ -52,11 +52,13 @@ struct [[gnu::packed]] EndOfCentralDirectory {\n     bool read(ReadonlyBytes buffer)\n     {\n         auto fields_size = sizeof(EndOfCentralDirectory) - sizeof(u8*);\n-        if (buffer.size() < fields_size)\n+        if (buffer.size() < sizeof(end_of_central_directory_signature) + fields_size)\n             return false;\n         if (memcmp(buffer.data(), end_of_central_directory_signature, sizeof(end_of_central_directory_signature)) != 0)\n             return false;\n         memcpy(reinterpret_cast<void*>(&disk_number), buffer.data() + sizeof(end_of_central_directory_signature), fields_size);\n+        if (buffer.size() < sizeof(end_of_central_directory_signature) + fields_size + comment_length)\n+            return false;\n         comment = buffer.data() + sizeof(end_of_central_directory_signature) + fields_size;\n         return true;\n     }\n@@ -101,11 +103,13 @@ struct [[gnu::packed]] CentralDirectoryRecord {\n     bool read(ReadonlyBytes buffer)\n     {\n         auto fields_size = sizeof(CentralDirectoryRecord) - (sizeof(u8*) * 3);\n-        if (buffer.size() < fields_size)\n+        if (buffer.size() < sizeof(central_directory_record_signature) + fields_size)\n             return false;\n         if (memcmp(buffer.data(), central_directory_record_signature, sizeof(central_directory_record_signature)) != 0)\n             return false;\n         memcpy(reinterpret_cast<void*>(&made_by_version), buffer.data() + sizeof(central_directory_record_signature), fields_size);\n+        if (buffer.size() < sizeof(end_of_central_directory_signature) + fields_size + comment_length + name_length + extra_data_length)\n+            return false;\n         name = buffer.data() + sizeof(central_directory_record_signature) + fields_size;\n         extra_data = name + name_length;\n         comment = extra_data + extra_data_length;\n@@ -165,11 +169,13 @@ struct [[gnu::packed]] LocalFileHeader {\n     bool read(ReadonlyBytes buffer)\n     {\n         auto fields_size = sizeof(LocalFileHeader) - (sizeof(u8*) * 3);\n-        if (buffer.size() < fields_size)\n+        if (buffer.size() < sizeof(local_file_header_signature) + fields_size)\n             return false;\n         if (memcmp(buffer.data(), local_file_header_signature, sizeof(local_file_header_signature)) != 0)\n             return false;\n         memcpy(reinterpret_cast<void*>(&minimum_version), buffer.data() + sizeof(local_file_header_signature), fields_size);\n+        if (buffer.size() < sizeof(end_of_central_directory_signature) + fields_size + name_length + extra_data_length + compressed_size)\n+            return false;\n         name = buffer.data() + sizeof(local_file_header_signature) + fields_size;\n         extra_data = name + name_length;\n         compressed_data = extra_data + extra_data_length;",
  "project": "serenity",
  "commit_id": "4317db7498eaa5a37068052bb0310fbc6a5f78e4",
  "target": 1,
  "func": "    bool read(ReadonlyBytes buffer)\n    {\n        auto fields_size = sizeof(CentralDirectoryRecord) - (sizeof(u8*) * 3);\n        if (buffer.size() < fields_size)\n            return false;\n        if (memcmp(buffer.data(), central_directory_record_signature, sizeof(central_directory_record_signature)) != 0)\n            return false;\n        memcpy(reinterpret_cast<void*>(&made_by_version), buffer.data() + sizeof(central_directory_record_signature), fields_size);\n        name = buffer.data() + sizeof(central_directory_record_signature) + fields_size;\n        extra_data = name + name_length;\n        comment = extra_data + extra_data_length;\n        return true;\n    }",
  "idx": 217240,
  "hash": 69369911002037312040550057926154543506,
  "dataset": "other"
}