{
  "id": 759,
  "language": "c",
  "cwe": "",
  "commit_url": "https://github.com/ljalves/linux_media/commit/07d86ca93db7e5cdf4743564d98292042ec21af7",
  "commit_sha": "07d86ca93db7e5cdf4743564d98292042ec21af7",
  "commit_msg": "ALSA: usb-audio: avoid freeing umidi object twice\n\nThe 'umidi' object will be free'd on the error path by snd_usbmidi_free()\nwhen tearing down the rawmidi interface. So we shouldn't try to free it\nin snd_usbmidi_create() after having registered the rawmidi interface.\n\nFound by KASAN.\n\nSigned-off-by: Andrey Konovalov <andreyknvl@gmail.com>\nAcked-by: Clemens Ladisch <clemens@ladisch.de>\nCc: <stable@vger.kernel.org>\nSigned-off-by: Takashi Iwai <tiwai@suse.de>",
  "pr_url": null,
  "pr_info": null,
  "file_name": "sound/usb/midi.c",
  "func_name": "",
  "raw_func_from_json": "int snd_usbmidi_create(struct snd_card *card,\n\t\t       struct usb_interface *iface,\n\t\t       struct list_head *midi_list,\n\t\t       const struct snd_usb_audio_quirk *quirk)\n{\n\tstruct snd_usb_midi *umidi;\n\tstruct snd_usb_midi_endpoint_info endpoints[MIDI_MAX_ENDPOINTS];\n\tint out_ports, in_ports;\n\tint i, err;\n\n\tumidi = kzalloc(sizeof(*umidi), GFP_KERNEL);\n\tif (!umidi)\n\t\treturn -ENOMEM;\n\tumidi->dev = interface_to_usbdev(iface);\n\tumidi->card = card;\n\tumidi->iface = iface;\n\tumidi->quirk = quirk;\n\tumidi->usb_protocol_ops = &snd_usbmidi_standard_ops;\n\tspin_lock_init(&umidi->disc_lock);\n\tinit_rwsem(&umidi->disc_rwsem);\n\tmutex_init(&umidi->mutex);\n\tumidi->usb_id = USB_ID(le16_to_cpu(umidi->dev->descriptor.idVendor),\n\t\t\t       le16_to_cpu(umidi->dev->descriptor.idProduct));\n\tsetup_timer(&umidi->error_timer, snd_usbmidi_error_timer,\n\t\t    (unsigned long)umidi);\n\n\t/* detect the endpoint(s) to use */\n\tmemset(endpoints, 0, sizeof(endpoints));\n\tswitch (quirk ? quirk->type : QUIRK_MIDI_STANDARD_INTERFACE) {\n\tcase QUIRK_MIDI_STANDARD_INTERFACE:\n\t\terr = snd_usbmidi_get_ms_info(umidi, endpoints);\n\t\tif (umidi->usb_id == USB_ID(0x0763, 0x0150)) /* M-Audio Uno */\n\t\t\tumidi->usb_protocol_ops =\n\t\t\t\t&snd_usbmidi_maudio_broken_running_status_ops;\n\t\tbreak;\n\tcase QUIRK_MIDI_US122L:\n\t\tumidi->usb_protocol_ops = &snd_usbmidi_122l_ops;\n\t\t/* fall through */\n\tcase QUIRK_MIDI_FIXED_ENDPOINT:\n\t\tmemcpy(&endpoints[0], quirk->data,\n\t\t       sizeof(struct snd_usb_midi_endpoint_info));\n\t\terr = snd_usbmidi_detect_endpoints(umidi, &endpoints[0], 1);\n\t\tbreak;\n\tcase QUIRK_MIDI_YAMAHA:\n\t\terr = snd_usbmidi_detect_yamaha(umidi, &endpoints[0]);\n\t\tbreak;\n\tcase QUIRK_MIDI_ROLAND:\n\t\terr = snd_usbmidi_detect_roland(umidi, &endpoints[0]);\n\t\tbreak;\n\tcase QUIRK_MIDI_MIDIMAN:\n\t\tumidi->usb_protocol_ops = &snd_usbmidi_midiman_ops;\n\t\tmemcpy(&endpoints[0], quirk->data,\n\t\t       sizeof(struct snd_usb_midi_endpoint_info));\n\t\terr = 0;\n\t\tbreak;\n\tcase QUIRK_MIDI_NOVATION:\n\t\tumidi->usb_protocol_ops = &snd_usbmidi_novation_ops;\n\t\terr = snd_usbmidi_detect_per_port_endpoints(umidi, endpoints);\n\t\tbreak;\n\tcase QUIRK_MIDI_RAW_BYTES:\n\t\tumidi->usb_protocol_ops = &snd_usbmidi_raw_ops;\n\t\t/*\n\t\t * Interface 1 contains isochronous endpoints, but with the same\n\t\t * numbers as in interface 0.  Since it is interface 1 that the\n\t\t * USB core has most recently seen, these descriptors are now\n\t\t * associated with the endpoint numbers.  This will foul up our\n\t\t * attempts to submit bulk/interrupt URBs to the endpoints in\n\t\t * interface 0, so we have to make sure that the USB core looks\n\t\t * again at interface 0 by calling usb_set_interface() on it.\n\t\t */\n\t\tif (umidi->usb_id == USB_ID(0x07fd, 0x0001)) /* MOTU Fastlane */\n\t\t\tusb_set_interface(umidi->dev, 0, 0);\n\t\terr = snd_usbmidi_detect_per_port_endpoints(umidi, endpoints);\n\t\tbreak;\n\tcase QUIRK_MIDI_EMAGIC:\n\t\tumidi->usb_protocol_ops = &snd_usbmidi_emagic_ops;\n\t\tmemcpy(&endpoints[0], quirk->data,\n\t\t       sizeof(struct snd_usb_midi_endpoint_info));\n\t\terr = snd_usbmidi_detect_endpoints(umidi, &endpoints[0], 1);\n\t\tbreak;\n\tcase QUIRK_MIDI_CME:\n\t\tumidi->usb_protocol_ops = &snd_usbmidi_cme_ops;\n\t\terr = snd_usbmidi_detect_per_port_endpoints(umidi, endpoints);\n\t\tbreak;\n\tcase QUIRK_MIDI_AKAI:\n\t\tumidi->usb_protocol_ops = &snd_usbmidi_akai_ops;\n\t\terr = snd_usbmidi_detect_per_port_endpoints(umidi, endpoints);\n\t\t/* endpoint 1 is input-only */\n\t\tendpoints[1].out_cables = 0;\n\t\tbreak;\n\tcase QUIRK_MIDI_FTDI:\n\t\tumidi->usb_protocol_ops = &snd_usbmidi_ftdi_ops;\n\n\t\t/* set baud rate to 31250 (48 MHz / 16 / 96) */\n\t\terr = usb_control_msg(umidi->dev, usb_sndctrlpipe(umidi->dev, 0),\n\t\t\t\t      3, 0x40, 0x60, 0, NULL, 0, 1000);\n\t\tif (err < 0)\n\t\t\tbreak;\n\n\t\terr = snd_usbmidi_detect_per_port_endpoints(umidi, endpoints);\n\t\tbreak;\n\tcase QUIRK_MIDI_CH345:\n\t\tumidi->usb_protocol_ops = &snd_usbmidi_ch345_broken_sysex_ops;\n\t\terr = snd_usbmidi_detect_per_port_endpoints(umidi, endpoints);\n\t\tbreak;\n\tdefault:\n\t\tdev_err(&umidi->dev->dev, \"invalid quirk type %d\\n\",\n\t\t\tquirk->type);\n\t\terr = -ENXIO;\n\t\tbreak;\n\t}\n\tif (err < 0) {\n\t\tkfree(umidi);\n\t\treturn err;\n\t}\n\n\t/* create rawmidi device */\n\tout_ports = 0;\n\tin_ports = 0;\n\tfor (i = 0; i < MIDI_MAX_ENDPOINTS; ++i) {\n\t\tout_ports += hweight16(endpoints[i].out_cables);\n\t\tin_ports += hweight16(endpoints[i].in_cables);\n\t}\n\terr = snd_usbmidi_create_rawmidi(umidi, out_ports, in_ports);\n\tif (err < 0) {\n\t\tkfree(umidi);\n\t\treturn err;\n\t}\n\n\t/* create endpoint/port structures */\n\tif (quirk && quirk->type == QUIRK_MIDI_MIDIMAN)\n\t\terr = snd_usbmidi_create_endpoints_midiman(umidi, &endpoints[0]);\n \telse\n \t\terr = snd_usbmidi_create_endpoints(umidi, endpoints);\n \tif (err < 0) {\n\t\tsnd_usbmidi_free(umidi);\n \t\treturn err;\n \t}\n \n\tusb_autopm_get_interface_no_resume(umidi->iface);\n\n\tlist_add_tail(&umidi->list, midi_list);\n\treturn 0;\n}\n",
  "diff_func": "@@ -2455,7 +2455,6 @@ int snd_usbmidi_create(struct snd_card *card,\n \telse\n \t\terr = snd_usbmidi_create_endpoints(umidi, endpoints);\n \tif (err < 0) {\n-\t\tsnd_usbmidi_free(umidi);\n \t\treturn err;\n \t}\n ",
  "project": "linux",
  "commit_id": "07d86ca93db7e5cdf4743564d98292042ec21af7",
  "target": 1,
  "func": "int snd_usbmidi_create(struct snd_card *card,\n\t\t       struct usb_interface *iface,\n\t\t       struct list_head *midi_list,\n\t\t       const struct snd_usb_audio_quirk *quirk)\n{\n\tstruct snd_usb_midi *umidi;\n\tstruct snd_usb_midi_endpoint_info endpoints[MIDI_MAX_ENDPOINTS];\n\tint out_ports, in_ports;\n\tint i, err;\n\n\tumidi = kzalloc(sizeof(*umidi), GFP_KERNEL);\n\tif (!umidi)\n\t\treturn -ENOMEM;\n\tumidi->dev = interface_to_usbdev(iface);\n\tumidi->card = card;\n\tumidi->iface = iface;\n\tumidi->quirk = quirk;\n\tumidi->usb_protocol_ops = &snd_usbmidi_standard_ops;\n\tspin_lock_init(&umidi->disc_lock);\n\tinit_rwsem(&umidi->disc_rwsem);\n\tmutex_init(&umidi->mutex);\n\tumidi->usb_id = USB_ID(le16_to_cpu(umidi->dev->descriptor.idVendor),\n\t\t\t       le16_to_cpu(umidi->dev->descriptor.idProduct));\n\tsetup_timer(&umidi->error_timer, snd_usbmidi_error_timer,\n\t\t    (unsigned long)umidi);\n\n\t/* detect the endpoint(s) to use */\n\tmemset(endpoints, 0, sizeof(endpoints));\n\tswitch (quirk ? quirk->type : QUIRK_MIDI_STANDARD_INTERFACE) {\n\tcase QUIRK_MIDI_STANDARD_INTERFACE:\n\t\terr = snd_usbmidi_get_ms_info(umidi, endpoints);\n\t\tif (umidi->usb_id == USB_ID(0x0763, 0x0150)) /* M-Audio Uno */\n\t\t\tumidi->usb_protocol_ops =\n\t\t\t\t&snd_usbmidi_maudio_broken_running_status_ops;\n\t\tbreak;\n\tcase QUIRK_MIDI_US122L:\n\t\tumidi->usb_protocol_ops = &snd_usbmidi_122l_ops;\n\t\t/* fall through */\n\tcase QUIRK_MIDI_FIXED_ENDPOINT:\n\t\tmemcpy(&endpoints[0], quirk->data,\n\t\t       sizeof(struct snd_usb_midi_endpoint_info));\n\t\terr = snd_usbmidi_detect_endpoints(umidi, &endpoints[0], 1);\n\t\tbreak;\n\tcase QUIRK_MIDI_YAMAHA:\n\t\terr = snd_usbmidi_detect_yamaha(umidi, &endpoints[0]);\n\t\tbreak;\n\tcase QUIRK_MIDI_ROLAND:\n\t\terr = snd_usbmidi_detect_roland(umidi, &endpoints[0]);\n\t\tbreak;\n\tcase QUIRK_MIDI_MIDIMAN:\n\t\tumidi->usb_protocol_ops = &snd_usbmidi_midiman_ops;\n\t\tmemcpy(&endpoints[0], quirk->data,\n\t\t       sizeof(struct snd_usb_midi_endpoint_info));\n\t\terr = 0;\n\t\tbreak;\n\tcase QUIRK_MIDI_NOVATION:\n\t\tumidi->usb_protocol_ops = &snd_usbmidi_novation_ops;\n\t\terr = snd_usbmidi_detect_per_port_endpoints(umidi, endpoints);\n\t\tbreak;\n\tcase QUIRK_MIDI_RAW_BYTES:\n\t\tumidi->usb_protocol_ops = &snd_usbmidi_raw_ops;\n\t\t/*\n\t\t * Interface 1 contains isochronous endpoints, but with the same\n\t\t * numbers as in interface 0.  Since it is interface 1 that the\n\t\t * USB core has most recently seen, these descriptors are now\n\t\t * associated with the endpoint numbers.  This will foul up our\n\t\t * attempts to submit bulk/interrupt URBs to the endpoints in\n\t\t * interface 0, so we have to make sure that the USB core looks\n\t\t * again at interface 0 by calling usb_set_interface() on it.\n\t\t */\n\t\tif (umidi->usb_id == USB_ID(0x07fd, 0x0001)) /* MOTU Fastlane */\n\t\t\tusb_set_interface(umidi->dev, 0, 0);\n\t\terr = snd_usbmidi_detect_per_port_endpoints(umidi, endpoints);\n\t\tbreak;\n\tcase QUIRK_MIDI_EMAGIC:\n\t\tumidi->usb_protocol_ops = &snd_usbmidi_emagic_ops;\n\t\tmemcpy(&endpoints[0], quirk->data,\n\t\t       sizeof(struct snd_usb_midi_endpoint_info));\n\t\terr = snd_usbmidi_detect_endpoints(umidi, &endpoints[0], 1);\n\t\tbreak;\n\tcase QUIRK_MIDI_CME:\n\t\tumidi->usb_protocol_ops = &snd_usbmidi_cme_ops;\n\t\terr = snd_usbmidi_detect_per_port_endpoints(umidi, endpoints);\n\t\tbreak;\n\tcase QUIRK_MIDI_AKAI:\n\t\tumidi->usb_protocol_ops = &snd_usbmidi_akai_ops;\n\t\terr = snd_usbmidi_detect_per_port_endpoints(umidi, endpoints);\n\t\t/* endpoint 1 is input-only */\n\t\tendpoints[1].out_cables = 0;\n\t\tbreak;\n\tcase QUIRK_MIDI_FTDI:\n\t\tumidi->usb_protocol_ops = &snd_usbmidi_ftdi_ops;\n\n\t\t/* set baud rate to 31250 (48 MHz / 16 / 96) */\n\t\terr = usb_control_msg(umidi->dev, usb_sndctrlpipe(umidi->dev, 0),\n\t\t\t\t      3, 0x40, 0x60, 0, NULL, 0, 1000);\n\t\tif (err < 0)\n\t\t\tbreak;\n\n\t\terr = snd_usbmidi_detect_per_port_endpoints(umidi, endpoints);\n\t\tbreak;\n\tcase QUIRK_MIDI_CH345:\n\t\tumidi->usb_protocol_ops = &snd_usbmidi_ch345_broken_sysex_ops;\n\t\terr = snd_usbmidi_detect_per_port_endpoints(umidi, endpoints);\n\t\tbreak;\n\tdefault:\n\t\tdev_err(&umidi->dev->dev, \"invalid quirk type %d\\n\",\n\t\t\tquirk->type);\n\t\terr = -ENXIO;\n\t\tbreak;\n\t}\n\tif (err < 0) {\n\t\tkfree(umidi);\n\t\treturn err;\n\t}\n\n\t/* create rawmidi device */\n\tout_ports = 0;\n\tin_ports = 0;\n\tfor (i = 0; i < MIDI_MAX_ENDPOINTS; ++i) {\n\t\tout_ports += hweight16(endpoints[i].out_cables);\n\t\tin_ports += hweight16(endpoints[i].in_cables);\n\t}\n\terr = snd_usbmidi_create_rawmidi(umidi, out_ports, in_ports);\n\tif (err < 0) {\n\t\tkfree(umidi);\n\t\treturn err;\n\t}\n\n\t/* create endpoint/port structures */\n\tif (quirk && quirk->type == QUIRK_MIDI_MIDIMAN)\n\t\terr = snd_usbmidi_create_endpoints_midiman(umidi, &endpoints[0]);\n \telse\n \t\terr = snd_usbmidi_create_endpoints(umidi, endpoints);\n \tif (err < 0) {\n\t\tsnd_usbmidi_free(umidi);\n \t\treturn err;\n \t}\n \n\tusb_autopm_get_interface_no_resume(umidi->iface);\n\n\tlist_add_tail(&umidi->list, midi_list);\n\treturn 0;\n}\n",
  "big_vul_idx": 180584,
  "idx": 2161,
  "hash": 186007020350234566758625810595608087524
}