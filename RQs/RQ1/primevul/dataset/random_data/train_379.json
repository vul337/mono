{
  "id": 379,
  "language": "c",
  "cwe": "CWE-200",
  "commit_url": "https://github.com/ljalves/linux_media/commit/4683f42fde3977bdb4e8a09622788cc8b5313778",
  "commit_sha": "4683f42fde3977bdb4e8a09622788cc8b5313778",
  "commit_msg": "Bluetooth: fix possible info leak in bt_sock_recvmsg()\n\nIn case the socket is already shutting down, bt_sock_recvmsg() returns\nwith 0 without updating msg_namelen leading to net/socket.c leaking the\nlocal, uninitialized sockaddr_storage variable to userland -- 128 bytes\nof kernel stack memory.\n\nFix this by moving the msg_namelen assignment in front of the shutdown\ntest.\n\nCc: Marcel Holtmann <marcel@holtmann.org>\nCc: Gustavo Padovan <gustavo@padovan.org>\nCc: Johan Hedberg <johan.hedberg@gmail.com>\nSigned-off-by: Mathias Krause <minipli@googlemail.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
  "pr_url": null,
  "pr_info": null,
  "file_name": "net/bluetooth/af_bluetooth.c",
  "func_name": "",
  "raw_func_from_json": "int bt_sock_recvmsg(struct kiocb *iocb, struct socket *sock,\n\t\t\t\tstruct msghdr *msg, size_t len, int flags)\n{\n\tint noblock = flags & MSG_DONTWAIT;\n\tstruct sock *sk = sock->sk;\n\tstruct sk_buff *skb;\n\tsize_t copied;\n\tint err;\n\n\tBT_DBG(\"sock %p sk %p len %zu\", sock, sk, len);\n\n \tif (flags & (MSG_OOB))\n \t\treturn -EOPNOTSUPP;\n \n \tskb = skb_recv_datagram(sk, flags, noblock, &err);\n \tif (!skb) {\n \t\tif (sk->sk_shutdown & RCV_SHUTDOWN)\n \t\t\treturn 0;\n \t\treturn err;\n \t}\n \n\tmsg->msg_namelen = 0;\n \tcopied = skb->len;\n \tif (len < copied) {\n \t\tmsg->msg_flags |= MSG_TRUNC;\n\t\tcopied = len;\n\t}\n\n\tskb_reset_transport_header(skb);\n\terr = skb_copy_datagram_iovec(skb, 0, msg->msg_iov, copied);\n\tif (err == 0)\n\t\tsock_recv_ts_and_drops(msg, sk, skb);\n\n\tskb_free_datagram(sk, skb);\n\n\treturn err ? : copied;\n}\n",
  "diff_func": "@@ -230,15 +230,15 @@ int bt_sock_recvmsg(struct kiocb *iocb, struct socket *sock,\n \tif (flags & (MSG_OOB))\n \t\treturn -EOPNOTSUPP;\n \n+\tmsg->msg_namelen = 0;\n+\n \tskb = skb_recv_datagram(sk, flags, noblock, &err);\n \tif (!skb) {\n \t\tif (sk->sk_shutdown & RCV_SHUTDOWN)\n \t\t\treturn 0;\n \t\treturn err;\n \t}\n \n-\tmsg->msg_namelen = 0;\n-\n \tcopied = skb->len;\n \tif (len < copied) {\n \t\tmsg->msg_flags |= MSG_TRUNC;",
  "project": "linux",
  "commit_id": "4683f42fde3977bdb4e8a09622788cc8b5313778",
  "target": 1,
  "func": "int bt_sock_recvmsg(struct kiocb *iocb, struct socket *sock,\n\t\t\t\tstruct msghdr *msg, size_t len, int flags)\n{\n\tint noblock = flags & MSG_DONTWAIT;\n\tstruct sock *sk = sock->sk;\n\tstruct sk_buff *skb;\n\tsize_t copied;\n\tint err;\n\n\tBT_DBG(\"sock %p sk %p len %zu\", sock, sk, len);\n\n \tif (flags & (MSG_OOB))\n \t\treturn -EOPNOTSUPP;\n \n \tskb = skb_recv_datagram(sk, flags, noblock, &err);\n \tif (!skb) {\n \t\tif (sk->sk_shutdown & RCV_SHUTDOWN)\n \t\t\treturn 0;\n \t\treturn err;\n \t}\n \n\tmsg->msg_namelen = 0;\n \tcopied = skb->len;\n \tif (len < copied) {\n \t\tmsg->msg_flags |= MSG_TRUNC;\n\t\tcopied = len;\n\t}\n\n\tskb_reset_transport_header(skb);\n\terr = skb_copy_datagram_iovec(skb, 0, msg->msg_iov, copied);\n\tif (err == 0)\n\t\tsock_recv_ts_and_drops(msg, sk, skb);\n\n\tskb_free_datagram(sk, skb);\n\n\treturn err ? : copied;\n}\n",
  "big_vul_idx": 179215,
  "idx": 1008,
  "hash": 4403052444065820777651314476491855154
}