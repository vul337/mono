{
  "id": 1147,
  "language": "c",
  "cwe": "CWE-416",
  "commit_url": "https://github.com/ljalves/linux_media/commit/a0f1d21c1ccb1da66629627a74059dd7f5ac9c61",
  "commit_sha": "a0f1d21c1ccb1da66629627a74059dd7f5ac9c61",
  "commit_msg": "KVM: use after free in kvm_ioctl_create_device()\n\nWe should move the ops->destroy(dev) after the list_del(&dev->vm_node)\nso that we don't use \"dev\" after freeing it.\n\nFixes: a28ebea2adc4 (\"KVM: Protect device ops->create and list_add with kvm->lock\")\nSigned-off-by: Dan Carpenter <dan.carpenter@oracle.com>\nReviewed-by: David Hildenbrand <david@redhat.com>\nSigned-off-by: Radim Krčmář <rkrcmar@redhat.com>",
  "pr_url": null,
  "pr_info": null,
  "file_name": "virt/kvm/kvm_main.c",
  "func_name": "",
  "raw_func_from_json": "static int kvm_ioctl_create_device(struct kvm *kvm,\n\t\t\t\t   struct kvm_create_device *cd)\n{\n\tstruct kvm_device_ops *ops = NULL;\n\tstruct kvm_device *dev;\n\tbool test = cd->flags & KVM_CREATE_DEVICE_TEST;\n\tint ret;\n\n\tif (cd->type >= ARRAY_SIZE(kvm_device_ops_table))\n\t\treturn -ENODEV;\n\n\tops = kvm_device_ops_table[cd->type];\n\tif (ops == NULL)\n\t\treturn -ENODEV;\n\n\tif (test)\n\t\treturn 0;\n\n\tdev = kzalloc(sizeof(*dev), GFP_KERNEL);\n\tif (!dev)\n\t\treturn -ENOMEM;\n\n\tdev->ops = ops;\n\tdev->kvm = kvm;\n\n\tmutex_lock(&kvm->lock);\n\tret = ops->create(dev, cd->type);\n\tif (ret < 0) {\n\t\tmutex_unlock(&kvm->lock);\n\t\tkfree(dev);\n\t\treturn ret;\n\t}\n\tlist_add(&dev->vm_node, &kvm->devices);\n\tmutex_unlock(&kvm->lock);\n\n\tif (ops->init)\n\t\tops->init(dev);\n \n \tret = anon_inode_getfd(ops->name, &kvm_device_fops, dev, O_RDWR | O_CLOEXEC);\n \tif (ret < 0) {\n\t\tops->destroy(dev);\n \t\tmutex_lock(&kvm->lock);\n \t\tlist_del(&dev->vm_node);\n \t\tmutex_unlock(&kvm->lock);\n \t\treturn ret;\n \t}\n \n\tkvm_get_kvm(kvm);\n\tcd->fd = ret;\n\treturn 0;\n}\n",
  "diff_func": "@@ -2889,10 +2889,10 @@ static int kvm_ioctl_create_device(struct kvm *kvm,\n \n \tret = anon_inode_getfd(ops->name, &kvm_device_fops, dev, O_RDWR | O_CLOEXEC);\n \tif (ret < 0) {\n-\t\tops->destroy(dev);\n \t\tmutex_lock(&kvm->lock);\n \t\tlist_del(&dev->vm_node);\n \t\tmutex_unlock(&kvm->lock);\n+\t\tops->destroy(dev);\n \t\treturn ret;\n \t}\n ",
  "project": "linux",
  "commit_id": "a0f1d21c1ccb1da66629627a74059dd7f5ac9c61",
  "target": 1,
  "func": "static int kvm_ioctl_create_device(struct kvm *kvm,\n\t\t\t\t   struct kvm_create_device *cd)\n{\n\tstruct kvm_device_ops *ops = NULL;\n\tstruct kvm_device *dev;\n\tbool test = cd->flags & KVM_CREATE_DEVICE_TEST;\n\tint ret;\n\n\tif (cd->type >= ARRAY_SIZE(kvm_device_ops_table))\n\t\treturn -ENODEV;\n\n\tops = kvm_device_ops_table[cd->type];\n\tif (ops == NULL)\n\t\treturn -ENODEV;\n\n\tif (test)\n\t\treturn 0;\n\n\tdev = kzalloc(sizeof(*dev), GFP_KERNEL);\n\tif (!dev)\n\t\treturn -ENOMEM;\n\n\tdev->ops = ops;\n\tdev->kvm = kvm;\n\n\tmutex_lock(&kvm->lock);\n\tret = ops->create(dev, cd->type);\n\tif (ret < 0) {\n\t\tmutex_unlock(&kvm->lock);\n\t\tkfree(dev);\n\t\treturn ret;\n\t}\n\tlist_add(&dev->vm_node, &kvm->devices);\n\tmutex_unlock(&kvm->lock);\n\n\tif (ops->init)\n\t\tops->init(dev);\n \n \tret = anon_inode_getfd(ops->name, &kvm_device_fops, dev, O_RDWR | O_CLOEXEC);\n \tif (ret < 0) {\n\t\tops->destroy(dev);\n \t\tmutex_lock(&kvm->lock);\n \t\tlist_del(&dev->vm_node);\n \t\tmutex_unlock(&kvm->lock);\n \t\treturn ret;\n \t}\n \n\tkvm_get_kvm(kvm);\n\tcd->fd = ret;\n\treturn 0;\n}\n",
  "big_vul_idx": 181691,
  "idx": 3108,
  "hash": 192189468393468950732012339724920762053
}