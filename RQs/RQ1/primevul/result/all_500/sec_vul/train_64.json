{
  "id": 64,
  "language": "c",
  "cwe": "CWE-189",
  "commit_url": "https://github.com/erikdahlstrom/freetype2/commit/0545ec1ca36b27cb928128870a83e5f668980bc5",
  "commit_sha": "0545ec1ca36b27cb928128870a83e5f668980bc5",
  "commit_msg": "Protect against invalid SID values in CFFs.\n\nProblem reported by Tavis Ormandy <taviso@google.com>.\n\n* src/cff/cffload.c (cff_charset_load): Reject SID values larger\nthan 64999.",
  "pr_url": null,
  "pr_info": null,
  "file_name": "src/cff/cffload.c",
  "func_name": "else",
  "raw_func_from_json": "  cff_charset_load( CFF_Charset  charset,\n                    FT_UInt      num_glyphs,\n                    FT_Stream    stream,\n                    FT_ULong     base_offset,\n                    FT_ULong     offset,\n                    FT_Bool      invert )\n  {\n    FT_Memory  memory = stream->memory;\n    FT_Error   error  = CFF_Err_Ok;\n    FT_UShort  glyph_sid;\n\n\n    /* If the the offset is greater than 2, we have to parse the */\n    /* charset table.                                            */\n    if ( offset > 2 )\n    {\n      FT_UInt  j;\n\n\n      charset->offset = base_offset + offset;\n\n      /* Get the format of the table. */\n      if ( FT_STREAM_SEEK( charset->offset ) ||\n           FT_READ_BYTE( charset->format )   )\n        goto Exit;\n\n      /* Allocate memory for sids. */\n      if ( FT_NEW_ARRAY( charset->sids, num_glyphs ) )\n        goto Exit;\n\n      /* assign the .notdef glyph */\n      charset->sids[0] = 0;\n\n      switch ( charset->format )\n      {\n      case 0:\n        if ( num_glyphs > 0 )\n        {\n          if ( FT_FRAME_ENTER( ( num_glyphs - 1 ) * 2 ) )\n             goto Exit;\n \n           for ( j = 1; j < num_glyphs; j++ )\n            charset->sids[j] = FT_GET_USHORT();\n \n           FT_FRAME_EXIT();\n         }\n            /* Read the first glyph sid of the range. */\n            if ( FT_READ_USHORT( glyph_sid ) )\n              goto Exit;\n\n            /* Read the number of glyphs in the range.  */\n            if ( charset->format == 2 )\n            {\n              if ( FT_READ_USHORT( nleft ) )\n                goto Exit;\n            }\n            else\n            {\n              if ( FT_READ_BYTE( nleft ) )\n                goto Exit;\n            }\n\n            /* Fill in the range of sids -- `nleft + 1' glyphs. */\n            for ( i = 0; j < num_glyphs && i <= nleft; i++, j++, glyph_sid++ )\n              charset->sids[j] = glyph_sid;\n          }\n        }\n        break;\n\n      default:\n        FT_ERROR(( \"cff_charset_load: invalid table format!\\n\" ));\n        error = CFF_Err_Invalid_File_Format;\n                 goto Exit;\n             }\n",
  "diff_func": "@@ -842,7 +842,20 @@\n             goto Exit;\n \n           for ( j = 1; j < num_glyphs; j++ )\n-            charset->sids[j] = FT_GET_USHORT();\n+          {\n+            FT_UShort sid = FT_GET_USHORT();\n+\n+\n+            /* this constant is given in the CFF specification */\n+            if ( sid < 65000 )\n+              charset->sids[j] = sid;\n+            else\n+            {\n+              FT_ERROR(( \"cff_charset_load:\"\n+                         \" invalid SID value %d set to zero\\n\", sid ));\n+              charset->sids[j] = 0;\n+            }\n+          }\n \n           FT_FRAME_EXIT();\n         }\n@@ -875,6 +888,20 @@\n                 goto Exit;\n             }\n \n+            /* check whether the range contains at least one valid glyph; */\n+            /* the constant is given in the CFF specification             */\n+            if ( glyph_sid >= 65000 ) {\n+              FT_ERROR(( \"cff_charset_load: invalid SID range\\n\" ));\n+              error = CFF_Err_Invalid_File_Format;\n+              goto Exit;\n+            }\n+\n+            /* try to rescue some of the SIDs if `nleft' is too large */\n+            if ( nleft > 65000 - 1 || glyph_sid >= 65000 - nleft ) {\n+              FT_ERROR(( \"cff_charset_load: invalid SID range trimmed\\n\" ));\n+              nleft = 65000 - 1 - glyph_sid;\n+            }\n+\n             /* Fill in the range of sids -- `nleft + 1' glyphs. */\n             for ( i = 0; j < num_glyphs && i <= nleft; i++, j++, glyph_sid++ )\n               charset->sids[j] = glyph_sid;",
  "project": "savannah",
  "commit_id": "0545ec1ca36b27cb928128870a83e5f668980bc5",
  "target": 1,
  "func": "  cff_charset_load( CFF_Charset  charset,\n                    FT_UInt      num_glyphs,\n                    FT_Stream    stream,\n                    FT_ULong     base_offset,\n                    FT_ULong     offset,\n                    FT_Bool      invert )\n  {\n    FT_Memory  memory = stream->memory;\n    FT_Error   error  = CFF_Err_Ok;\n    FT_UShort  glyph_sid;\n\n\n    /* If the the offset is greater than 2, we have to parse the */\n    /* charset table.                                            */\n    if ( offset > 2 )\n    {\n      FT_UInt  j;\n\n\n      charset->offset = base_offset + offset;\n\n      /* Get the format of the table. */\n      if ( FT_STREAM_SEEK( charset->offset ) ||\n           FT_READ_BYTE( charset->format )   )\n        goto Exit;\n\n      /* Allocate memory for sids. */\n      if ( FT_NEW_ARRAY( charset->sids, num_glyphs ) )\n        goto Exit;\n\n      /* assign the .notdef glyph */\n      charset->sids[0] = 0;\n\n      switch ( charset->format )\n      {\n      case 0:\n        if ( num_glyphs > 0 )\n        {\n          if ( FT_FRAME_ENTER( ( num_glyphs - 1 ) * 2 ) )\n             goto Exit;\n \n           for ( j = 1; j < num_glyphs; j++ )\n            charset->sids[j] = FT_GET_USHORT();\n \n           FT_FRAME_EXIT();\n         }\n            /* Read the first glyph sid of the range. */\n            if ( FT_READ_USHORT( glyph_sid ) )\n              goto Exit;\n\n            /* Read the number of glyphs in the range.  */\n            if ( charset->format == 2 )\n            {\n              if ( FT_READ_USHORT( nleft ) )\n                goto Exit;\n            }\n            else\n            {\n              if ( FT_READ_BYTE( nleft ) )\n                goto Exit;\n            }\n\n            /* Fill in the range of sids -- `nleft + 1' glyphs. */\n            for ( i = 0; j < num_glyphs && i <= nleft; i++, j++, glyph_sid++ )\n              charset->sids[j] = glyph_sid;\n          }\n        }\n        break;\n\n      default:\n        FT_ERROR(( \"cff_charset_load: invalid table format!\\n\" ));\n        error = CFF_Err_Invalid_File_Format;\n                 goto Exit;\n             }\n",
  "big_vul_idx": 177915,
  "idx": 122,
  "hash": 322437368215015751310197159603838280292,
  "Bug Filter": "** Security Vulnerability Fix  \n**Confidence Score:** 0.95",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "\n\nThe patch addresses a security vulnerability by validating SID values to prevent potential attacks, such as buffer overflows, which could lead to arbitrary code execution.\n\n**Final Classification:** Security Vulnerability Fix  \n**Confidence Score:** 0.95"
}