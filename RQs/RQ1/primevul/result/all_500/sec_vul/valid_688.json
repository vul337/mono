{
  "id": 688,
  "language": "unknown",
  "cwe": "",
  "commit_url": "https://github.com/nishidayuya/test_202309_3_matrk10_ruby/commit/1c2ef610358af33f9ded3086aa2d70aac03dcac5",
  "commit_sha": "1c2ef610358af33f9ded3086aa2d70aac03dcac5",
  "commit_msg": "* string.c (rb_str_justify): CVE-2009-4124.\n  Fixes a bug reported by \n  Emmanouel Kellinis <Emmanouel.Kellinis AT kpmg.co.uk>, KPMG London;\n  Patch by nobu.\n\n\ngit-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@26038 b2dd03c8-39d4-4d8f-98ff-823fe69b080e",
  "pr_url": null,
  "pr_info": null,
  "file_name": "ChangeLog",
  "func_name": "",
  "raw_func_from_json": "rb_str_justify(int argc, VALUE *argv, VALUE str, char jflag)\n{\n    rb_encoding *enc;\n    VALUE w;\n    long width, len, flen = 1, fclen = 1;\n    VALUE res;\n    char *p;\n    const char *f = \" \";\n    long n, llen, rlen;\n    volatile VALUE pad;\n    int singlebyte = 1, cr;\n\n    rb_scan_args(argc, argv, \"11\", &w, &pad);\n    enc = STR_ENC_GET(str);\n    width = NUM2LONG(w);\n    if (argc == 2) {\n\tStringValue(pad);\n\tenc = rb_enc_check(str, pad);\n\tf = RSTRING_PTR(pad);\n\tflen = RSTRING_LEN(pad);\n\tfclen = str_strlen(pad, enc);\n\tsinglebyte = single_byte_optimizable(pad);\n\tif (flen == 0 || fclen == 0) {\n\t    rb_raise(rb_eArgError, \"zero width padding\");\n\t}\n    }\n    len = str_strlen(str, enc);\n    if (width < 0 || len >= width) return rb_str_dup(str);\n    n = width - len;\n    llen = (jflag == 'l') ? 0 : ((jflag == 'r') ? n : n/2);\n    rlen = n - llen;\n    cr = ENC_CODERANGE(str);\n    res = rb_str_new5(str, 0, RSTRING_LEN(str)+n*flen/fclen+2);\n    p = RSTRING_PTR(res);\n    while (llen) {\n\tif (flen <= 1) {\n\t    *p++ = *f;\n\t    llen--;\n\t}\n\telse if (llen > fclen) {\n\t    memcpy(p,f,flen);\n\t    p += flen;\n\t    llen -= fclen;\n\t}\n\telse {\n\t    char *fp = str_nth(f, f+flen, llen, enc, singlebyte);\n\t    n = fp - f;\n\t    memcpy(p,f,n);\n\t    p+=n;\n\t    break;\n\t}\n    }\n    memcpy(p, RSTRING_PTR(str), RSTRING_LEN(str));\n    p+=RSTRING_LEN(str);\n    while (rlen) {\n\tif (flen <= 1) {\n\t    *p++ = *f;\n\t    rlen--;\n\t}\n\telse if (rlen > fclen) {\n\t    memcpy(p,f,flen);\n\t    p += flen;\n\t    rlen -= fclen;\n\t}\n\telse {\n\t    char *fp = str_nth(f, f+flen, rlen, enc, singlebyte);\n\t    n = fp - f;\n\t    memcpy(p,f,n);\n\t    p+=n;\n\t    break;\n\t}\n    }\n    *p = '\\0';\n    STR_SET_LEN(res, p-RSTRING_PTR(res));\n    OBJ_INFECT(res, str);\n    if (!NIL_P(pad)) OBJ_INFECT(res, pad);\n    rb_enc_associate(res, enc);\n    if (argc == 2)\n\tcr = ENC_CODERANGE_AND(cr, ENC_CODERANGE(pad));\n    if (cr != ENC_CODERANGE_BROKEN)\n\tENC_CODERANGE_SET(res, cr);\n    return res;\n}",
  "diff_func": "@@ -1,3 +1,10 @@\n+Mon Dec  7 13:05:59 2009  Yuki Sonoda (Yugui)  <yugui@yugui.jp>\n+\n+\t* string.c (rb_str_justify): CVE-2009-4124.\n+\t  Fixes a bug reported by \n+\t  Emmanouel Kellinis <Emmanouel.Kellinis AT kpmg.co.uk>, KPMG London;\n+\t  Patch by nobu.\n+\n Sun Dec  6 23:50:46 2009  NARUSE, Yui  <naruse@ruby-lang.org>\n \n \t* strftime.c: %l should be 1..12 instead of 0..12 [ruby-core:27072]",
  "func": "rb_str_justify(int argc, VALUE *argv, VALUE str, char jflag)\n{\n    rb_encoding *enc;\n    VALUE w;\n    long width, len, flen = 1, fclen = 1;\n    VALUE res;\n    char *p;\n    const char *f = \" \";\n    long n, llen, rlen;\n    volatile VALUE pad;\n    int singlebyte = 1, cr;\n\n    rb_scan_args(argc, argv, \"11\", &w, &pad);\n    enc = STR_ENC_GET(str);\n    width = NUM2LONG(w);\n    if (argc == 2) {\n\tStringValue(pad);\n\tenc = rb_enc_check(str, pad);\n\tf = RSTRING_PTR(pad);\n\tflen = RSTRING_LEN(pad);\n\tfclen = str_strlen(pad, enc);\n\tsinglebyte = single_byte_optimizable(pad);\n\tif (flen == 0 || fclen == 0) {\n\t    rb_raise(rb_eArgError, \"zero width padding\");\n\t}\n    }\n    len = str_strlen(str, enc);\n    if (width < 0 || len >= width) return rb_str_dup(str);\n    n = width - len;\n    llen = (jflag == 'l') ? 0 : ((jflag == 'r') ? n : n/2);\n    rlen = n - llen;\n    cr = ENC_CODERANGE(str);\n    res = rb_str_new5(str, 0, RSTRING_LEN(str)+n*flen/fclen+2);\n    p = RSTRING_PTR(res);\n    while (llen) {\n\tif (flen <= 1) {\n\t    *p++ = *f;\n\t    llen--;\n\t}\n\telse if (llen > fclen) {\n\t    memcpy(p,f,flen);\n\t    p += flen;\n\t    llen -= fclen;\n\t}\n\telse {\n\t    char *fp = str_nth(f, f+flen, llen, enc, singlebyte);\n\t    n = fp - f;\n\t    memcpy(p,f,n);\n\t    p+=n;\n\t    break;\n\t}\n    }\n    memcpy(p, RSTRING_PTR(str), RSTRING_LEN(str));\n    p+=RSTRING_LEN(str);\n    while (rlen) {\n\tif (flen <= 1) {\n\t    *p++ = *f;\n\t    rlen--;\n\t}\n\telse if (rlen > fclen) {\n\t    memcpy(p,f,flen);\n\t    p += flen;\n\t    rlen -= fclen;\n\t}\n\telse {\n\t    char *fp = str_nth(f, f+flen, rlen, enc, singlebyte);\n\t    n = fp - f;\n\t    memcpy(p,f,n);\n\t    p+=n;\n\t    break;\n\t}\n    }\n    *p = '\\0';\n    STR_SET_LEN(res, p-RSTRING_PTR(res));\n    OBJ_INFECT(res, str);\n    if (!NIL_P(pad)) OBJ_INFECT(res, pad);\n    rb_enc_associate(res, enc);\n    if (argc == 2)\n\tcr = ENC_CODERANGE_AND(cr, ENC_CODERANGE(pad));\n    if (cr != ENC_CODERANGE_BROKEN)\n\tENC_CODERANGE_SET(res, cr);\n    return res;\n}",
  "project": "ruby",
  "hash": 26901884064724764290314463604500539542,
  "size": 83,
  "commit_id": "1c2ef610358af33f9ded3086aa2d70aac03dcac5",
  "message": "* string.c (rb_str_justify): CVE-2009-4124.\n  Fixes a bug reported by \n  Emmanouel Kellinis <Emmanouel.Kellinis AT kpmg.co.uk>, KPMG London;\n  Patch by nobu.\n\n\ngit-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@26038 b2dd03c8-39d4-4d8f-98ff-823fe69b080e",
  "target": 1,
  "dataset": "other",
  "idx": 202689,
  "Bug Filter": "Security Vulnerability Fix\nConfidence Score: 1.0",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "\n\n**Final Output:**\nAnalysis: The patch addresses CVE-2009-4124, a buffer overflow vulnerability in the rb_str_justify function, preventing unauthorized code execution. The commit message and code context confirm this as a security fix.\nFinal Classification: Security Vulnerability Fix\nConfidence Score: 1.0"
}