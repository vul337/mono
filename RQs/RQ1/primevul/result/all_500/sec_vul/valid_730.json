{
  "id": 730,
  "language": "c",
  "cwe": "",
  "commit_url": "https://github.com/adi-g15-ibm/qemu/commit/b15a22bbcbe6a78dc3d88fe3134985e4cdd87de4",
  "commit_sha": "b15a22bbcbe6a78dc3d88fe3134985e4cdd87de4",
  "commit_msg": "sm501: Replace hand written implementation with pixman where possible\n\nBesides being faster this should also prevent malicious guests to\nabuse 2D engine to overwrite data or cause a crash.\n\nSigned-off-by: BALATON Zoltan <balaton@eik.bme.hu>\nMessage-id: 58666389b6cae256e4e972a32c05cf8aa51bffc0.1590089984.git.balaton@eik.bme.hu\nSigned-off-by: Gerd Hoffmann <kraxel@redhat.com>",
  "pr_url": null,
  "pr_info": null,
  "file_name": "hw/display/sm501.c",
  "func_name": "",
  "raw_func_from_json": "static void sm501_2d_operation(SM501State *s)\n{\n    int cmd = (s->twoD_control >> 16) & 0x1F;\n    int rtl = s->twoD_control & BIT(27);\n    int format = (s->twoD_stretch >> 20) & 0x3;\n    int rop_mode = (s->twoD_control >> 15) & 0x1; /* 1 for rop2, else rop3 */\n    /* 1 if rop2 source is the pattern, otherwise the source is the bitmap */\n    int rop2_source_is_pattern = (s->twoD_control >> 14) & 0x1;\n    int rop = s->twoD_control & 0xFF;\n    int dst_x = (s->twoD_destination >> 16) & 0x01FFF;\n    int dst_y = s->twoD_destination & 0xFFFF;\n    int width = (s->twoD_dimension >> 16) & 0x1FFF;\n    int height = s->twoD_dimension & 0xFFFF;\n    uint32_t dst_base = s->twoD_destination_base & 0x03FFFFFF;\n    uint8_t *dst = s->local_mem + dst_base;\n    int dst_pitch = (s->twoD_pitch >> 16) & 0x1FFF;\n    int crt = (s->dc_crt_control & SM501_DC_CRT_CONTROL_SEL) ? 1 : 0;\n    int fb_len = get_width(s, crt) * get_height(s, crt) * get_bpp(s, crt);\n\n    if ((s->twoD_stretch >> 16) & 0xF) {\n        qemu_log_mask(LOG_UNIMP, \"sm501: only XY addressing is supported.\\n\");\n        return;\n    }\n\n    if (rop_mode == 0) {\n        if (rop != 0xcc) {\n            /* Anything other than plain copies are not supported */\n            qemu_log_mask(LOG_UNIMP, \"sm501: rop3 mode with rop %x is not \"\n                          \"supported.\\n\", rop);\n        }\n    } else {\n        if (rop2_source_is_pattern && rop != 0x5) {\n            /* For pattern source, we support only inverse dest */\n            qemu_log_mask(LOG_UNIMP, \"sm501: rop2 source being the pattern and \"\n                          \"rop %x is not supported.\\n\", rop);\n        } else {\n            if (rop != 0x5 && rop != 0xc) {\n                /* Anything other than plain copies or inverse dest is not\n                 * supported */\n                qemu_log_mask(LOG_UNIMP, \"sm501: rop mode %x is not \"\n                              \"supported.\\n\", rop);\n            }\n        }\n    }\n\n    if (s->twoD_source_base & BIT(27) || s->twoD_destination_base & BIT(27)) {\n        qemu_log_mask(LOG_UNIMP, \"sm501: only local memory is supported.\\n\");\n        return;\n    }\n\n    switch (cmd) {\n    case 0x00: /* copy area */\n    {\n        int src_x = (s->twoD_source >> 16) & 0x01FFF;\n        int src_y = s->twoD_source & 0xFFFF;\n        uint32_t src_base = s->twoD_source_base & 0x03FFFFFF;\n        uint8_t *src = s->local_mem + src_base;\n        int src_pitch = s->twoD_pitch & 0x1FFF;\n\n#define COPY_AREA(_bpp, _pixel_type, rtl) {                                   \\\n        int y, x, index_d, index_s;                                           \\\n        for (y = 0; y < height; y++) {                              \\\n            for (x = 0; x < width; x++) {                           \\\n                _pixel_type val;                                              \\\n                                                                              \\\n                if (rtl) {                                                    \\\n                    index_s = ((src_y - y) * src_pitch + src_x - x) * _bpp;   \\\n                    index_d = ((dst_y - y) * dst_pitch + dst_x - x) * _bpp;   \\\n                } else {                                                      \\\n                    index_s = ((src_y + y) * src_pitch + src_x + x) * _bpp;   \\\n                    index_d = ((dst_y + y) * dst_pitch + dst_x + x) * _bpp;   \\\n                }                                                             \\\n                if (rop_mode == 1 && rop == 5) {                              \\\n                    /* Invert dest */                                         \\\n                    val = ~*(_pixel_type *)&dst[index_d];                     \\\n                } else {                                                      \\\n                    val = *(_pixel_type *)&src[index_s];                      \\\n                }                                                             \\\n                *(_pixel_type *)&dst[index_d] = val;                          \\\n            }                                                                 \\\n        }                                                                     \\\n    }\n        switch (format) {\n        case 0:\n            COPY_AREA(1, uint8_t, rtl);\n            break;\n        case 1:\n            COPY_AREA(2, uint16_t, rtl);\n            break;\n        case 2:\n            COPY_AREA(4, uint32_t, rtl);\n            break;\n        }\n        break;\n    }\n    case 0x01: /* fill rectangle */\n    {\n        uint32_t color = s->twoD_foreground;\n\n#define FILL_RECT(_bpp, _pixel_type) {                                      \\\n        int y, x;                                                           \\\n        for (y = 0; y < height; y++) {                            \\\n            for (x = 0; x < width; x++) {                         \\\n                int index = ((dst_y + y) * dst_pitch + dst_x + x) * _bpp;   \\\n                *(_pixel_type *)&dst[index] = (_pixel_type)color;           \\\n            }                                                               \\\n        }                                                                   \\\n    }\n\n        switch (format) {\n        case 0:\n            FILL_RECT(1, uint8_t);\n            break;\n        case 1:\n            color = cpu_to_le16(color);\n            FILL_RECT(2, uint16_t);\n            break;\n        case 2:\n            color = cpu_to_le32(color);\n            FILL_RECT(4, uint32_t);\n            break;\n        }\n        break;\n    }\n    default:\n        qemu_log_mask(LOG_UNIMP, \"sm501: not implemented 2D operation: %d\\n\",\n                      cmd);\n        return;\n    }\n\n    if (dst_base >= get_fb_addr(s, crt) &&\n        dst_base <= get_fb_addr(s, crt) + fb_len) {\n        int dst_len = MIN(fb_len, ((dst_y + height - 1) * dst_pitch +\n                          dst_x + width) * (1 << format));\n        if (dst_len) {\n            memory_region_set_dirty(&s->local_mem_region, dst_base, dst_len);\n        }\n    }\n}",
  "diff_func": "@@ -706,13 +706,12 @@ static void sm501_2d_operation(SM501State *s)\n     /* 1 if rop2 source is the pattern, otherwise the source is the bitmap */\n     int rop2_source_is_pattern = (s->twoD_control >> 14) & 0x1;\n     int rop = s->twoD_control & 0xFF;\n-    int dst_x = (s->twoD_destination >> 16) & 0x01FFF;\n-    int dst_y = s->twoD_destination & 0xFFFF;\n-    int width = (s->twoD_dimension >> 16) & 0x1FFF;\n-    int height = s->twoD_dimension & 0xFFFF;\n+    unsigned int dst_x = (s->twoD_destination >> 16) & 0x01FFF;\n+    unsigned int dst_y = s->twoD_destination & 0xFFFF;\n+    unsigned int width = (s->twoD_dimension >> 16) & 0x1FFF;\n+    unsigned int height = s->twoD_dimension & 0xFFFF;\n     uint32_t dst_base = s->twoD_destination_base & 0x03FFFFFF;\n-    uint8_t *dst = s->local_mem + dst_base;\n-    int dst_pitch = (s->twoD_pitch >> 16) & 0x1FFF;\n+    unsigned int dst_pitch = (s->twoD_pitch >> 16) & 0x1FFF;\n     int crt = (s->dc_crt_control & SM501_DC_CRT_CONTROL_SEL) ? 1 : 0;\n     int fb_len = get_width(s, crt) * get_height(s, crt) * get_bpp(s, crt);\n \n@@ -721,104 +720,136 @@ static void sm501_2d_operation(SM501State *s)\n         return;\n     }\n \n-    if (rop_mode == 0) {\n-        if (rop != 0xcc) {\n-            /* Anything other than plain copies are not supported */\n-            qemu_log_mask(LOG_UNIMP, \"sm501: rop3 mode with rop %x is not \"\n-                          \"supported.\\n\", rop);\n-        }\n-    } else {\n-        if (rop2_source_is_pattern && rop != 0x5) {\n-            /* For pattern source, we support only inverse dest */\n-            qemu_log_mask(LOG_UNIMP, \"sm501: rop2 source being the pattern and \"\n-                          \"rop %x is not supported.\\n\", rop);\n-        } else {\n-            if (rop != 0x5 && rop != 0xc) {\n-                /* Anything other than plain copies or inverse dest is not\n-                 * supported */\n-                qemu_log_mask(LOG_UNIMP, \"sm501: rop mode %x is not \"\n-                              \"supported.\\n\", rop);\n-            }\n-        }\n-    }\n-\n     if (s->twoD_source_base & BIT(27) || s->twoD_destination_base & BIT(27)) {\n         qemu_log_mask(LOG_UNIMP, \"sm501: only local memory is supported.\\n\");\n         return;\n     }\n \n+    if (!dst_pitch) {\n+        qemu_log_mask(LOG_GUEST_ERROR, \"sm501: Zero dest pitch.\\n\");\n+        return;\n+    }\n+\n+    if (!width || !height) {\n+        qemu_log_mask(LOG_GUEST_ERROR, \"sm501: Zero size 2D op.\\n\");\n+        return;\n+    }\n+\n+    if (rtl) {\n+        dst_x -= width - 1;\n+        dst_y -= height - 1;\n+    }\n+\n+    if (dst_base >= get_local_mem_size(s) || dst_base +\n+        (dst_x + width + (dst_y + height) * (dst_pitch + width)) *\n+        (1 << format) >= get_local_mem_size(s)) {\n+        qemu_log_mask(LOG_GUEST_ERROR, \"sm501: 2D op dest is outside vram.\\n\");\n+        return;\n+    }\n+\n     switch (cmd) {\n-    case 0x00: /* copy area */\n+    case 0: /* BitBlt */\n     {\n-        int src_x = (s->twoD_source >> 16) & 0x01FFF;\n-        int src_y = s->twoD_source & 0xFFFF;\n+        unsigned int src_x = (s->twoD_source >> 16) & 0x01FFF;\n+        unsigned int src_y = s->twoD_source & 0xFFFF;\n         uint32_t src_base = s->twoD_source_base & 0x03FFFFFF;\n-        uint8_t *src = s->local_mem + src_base;\n-        int src_pitch = s->twoD_pitch & 0x1FFF;\n-\n-#define COPY_AREA(_bpp, _pixel_type, rtl) {                                   \\\n-        int y, x, index_d, index_s;                                           \\\n-        for (y = 0; y < height; y++) {                              \\\n-            for (x = 0; x < width; x++) {                           \\\n-                _pixel_type val;                                              \\\n-                                                                              \\\n-                if (rtl) {                                                    \\\n-                    index_s = ((src_y - y) * src_pitch + src_x - x) * _bpp;   \\\n-                    index_d = ((dst_y - y) * dst_pitch + dst_x - x) * _bpp;   \\\n-                } else {                                                      \\\n-                    index_s = ((src_y + y) * src_pitch + src_x + x) * _bpp;   \\\n-                    index_d = ((dst_y + y) * dst_pitch + dst_x + x) * _bpp;   \\\n-                }                                                             \\\n-                if (rop_mode == 1 && rop == 5) {                              \\\n-                    /* Invert dest */                                         \\\n-                    val = ~*(_pixel_type *)&dst[index_d];                     \\\n-                } else {                                                      \\\n-                    val = *(_pixel_type *)&src[index_s];                      \\\n-                }                                                             \\\n-                *(_pixel_type *)&dst[index_d] = val;                          \\\n-            }                                                                 \\\n-        }                                                                     \\\n-    }\n-        switch (format) {\n-        case 0:\n-            COPY_AREA(1, uint8_t, rtl);\n-            break;\n-        case 1:\n-            COPY_AREA(2, uint16_t, rtl);\n-            break;\n-        case 2:\n-            COPY_AREA(4, uint32_t, rtl);\n-            break;\n+        unsigned int src_pitch = s->twoD_pitch & 0x1FFF;\n+\n+        if (!src_pitch) {\n+            qemu_log_mask(LOG_GUEST_ERROR, \"sm501: Zero src pitch.\\n\");\n+            return;\n+        }\n+\n+        if (rtl) {\n+            src_x -= width - 1;\n+            src_y -= height - 1;\n+        }\n+\n+        if (src_base >= get_local_mem_size(s) || src_base +\n+            (src_x + width + (src_y + height) * (src_pitch + width)) *\n+            (1 << format) >= get_local_mem_size(s)) {\n+            qemu_log_mask(LOG_GUEST_ERROR,\n+                          \"sm501: 2D op src is outside vram.\\n\");\n+            return;\n+        }\n+\n+        if ((rop_mode && rop == 0x5) || (!rop_mode && rop == 0x55)) {\n+            /* Invert dest, is there a way to do this with pixman? */\n+            unsigned int x, y, i;\n+            uint8_t *d = s->local_mem + dst_base;\n+\n+            for (y = 0; y < height; y++) {\n+                i = (dst_x + (dst_y + y) * dst_pitch) * (1 << format);\n+                for (x = 0; x < width; x++, i += (1 << format)) {\n+                    switch (format) {\n+                    case 0:\n+                        d[i] = ~d[i];\n+                        break;\n+                    case 1:\n+                        *(uint16_t *)&d[i] = ~*(uint16_t *)&d[i];\n+                        break;\n+                    case 2:\n+                        *(uint32_t *)&d[i] = ~*(uint32_t *)&d[i];\n+                        break;\n+                    }\n+                }\n+            }\n+        } else {\n+            /* Do copy src for unimplemented ops, better than unpainted area */\n+            if ((rop_mode && (rop != 0xc || rop2_source_is_pattern)) ||\n+                (!rop_mode && rop != 0xcc)) {\n+                qemu_log_mask(LOG_UNIMP,\n+                              \"sm501: rop%d op %x%s not implemented\\n\",\n+                              (rop_mode ? 2 : 3), rop,\n+                              (rop2_source_is_pattern ?\n+                                  \" with pattern source\" : \"\"));\n+            }\n+            /* Check for overlaps, this could be made more exact */\n+            uint32_t sb, se, db, de;\n+            sb = src_base + src_x + src_y * (width + src_pitch);\n+            se = sb + width + height * (width + src_pitch);\n+            db = dst_base + dst_x + dst_y * (width + dst_pitch);\n+            de = db + width + height * (width + dst_pitch);\n+            if (rtl && ((db >= sb && db <= se) || (de >= sb && de <= se))) {\n+                /* regions may overlap: copy via temporary */\n+                int llb = width * (1 << format);\n+                int tmp_stride = DIV_ROUND_UP(llb, sizeof(uint32_t));\n+                uint32_t *tmp = g_malloc(tmp_stride * sizeof(uint32_t) *\n+                                         height);\n+                pixman_blt((uint32_t *)&s->local_mem[src_base], tmp,\n+                           src_pitch * (1 << format) / sizeof(uint32_t),\n+                           tmp_stride, 8 * (1 << format), 8 * (1 << format),\n+                           src_x, src_y, 0, 0, width, height);\n+                pixman_blt(tmp, (uint32_t *)&s->local_mem[dst_base],\n+                           tmp_stride,\n+                           dst_pitch * (1 << format) / sizeof(uint32_t),\n+                           8 * (1 << format), 8 * (1 << format),\n+                           0, 0, dst_x, dst_y, width, height);\n+                g_free(tmp);\n+            } else {\n+                pixman_blt((uint32_t *)&s->local_mem[src_base],\n+                           (uint32_t *)&s->local_mem[dst_base],\n+                           src_pitch * (1 << format) / sizeof(uint32_t),\n+                           dst_pitch * (1 << format) / sizeof(uint32_t),\n+                           8 * (1 << format), 8 * (1 << format),\n+                           src_x, src_y, dst_x, dst_y, width, height);\n+            }\n         }\n         break;\n     }\n-    case 0x01: /* fill rectangle */\n+    case 1: /* Rectangle Fill */\n     {\n         uint32_t color = s->twoD_foreground;\n \n-#define FILL_RECT(_bpp, _pixel_type) {                                      \\\n-        int y, x;                                                           \\\n-        for (y = 0; y < height; y++) {                            \\\n-            for (x = 0; x < width; x++) {                         \\\n-                int index = ((dst_y + y) * dst_pitch + dst_x + x) * _bpp;   \\\n-                *(_pixel_type *)&dst[index] = (_pixel_type)color;           \\\n-            }                                                               \\\n-        }                                                                   \\\n-    }\n-\n-        switch (format) {\n-        case 0:\n-            FILL_RECT(1, uint8_t);\n-            break;\n-        case 1:\n-            color = cpu_to_le16(color);\n-            FILL_RECT(2, uint16_t);\n-            break;\n-        case 2:\n+        if (format == 2) {\n             color = cpu_to_le32(color);\n-            FILL_RECT(4, uint32_t);\n-            break;\n+        } else if (format == 1) {\n+            color = cpu_to_le16(color);\n         }\n+\n+        pixman_fill((uint32_t *)&s->local_mem[dst_base],\n+                    dst_pitch * (1 << format) / sizeof(uint32_t),\n+                    8 * (1 << format), dst_x, dst_y, width, height, color);\n         break;\n     }\n     default:",
  "func": "static void sm501_2d_operation(SM501State *s)\n{\n    int cmd = (s->twoD_control >> 16) & 0x1F;\n    int rtl = s->twoD_control & BIT(27);\n    int format = (s->twoD_stretch >> 20) & 0x3;\n    int rop_mode = (s->twoD_control >> 15) & 0x1; /* 1 for rop2, else rop3 */\n    /* 1 if rop2 source is the pattern, otherwise the source is the bitmap */\n    int rop2_source_is_pattern = (s->twoD_control >> 14) & 0x1;\n    int rop = s->twoD_control & 0xFF;\n    int dst_x = (s->twoD_destination >> 16) & 0x01FFF;\n    int dst_y = s->twoD_destination & 0xFFFF;\n    int width = (s->twoD_dimension >> 16) & 0x1FFF;\n    int height = s->twoD_dimension & 0xFFFF;\n    uint32_t dst_base = s->twoD_destination_base & 0x03FFFFFF;\n    uint8_t *dst = s->local_mem + dst_base;\n    int dst_pitch = (s->twoD_pitch >> 16) & 0x1FFF;\n    int crt = (s->dc_crt_control & SM501_DC_CRT_CONTROL_SEL) ? 1 : 0;\n    int fb_len = get_width(s, crt) * get_height(s, crt) * get_bpp(s, crt);\n\n    if ((s->twoD_stretch >> 16) & 0xF) {\n        qemu_log_mask(LOG_UNIMP, \"sm501: only XY addressing is supported.\\n\");\n        return;\n    }\n\n    if (rop_mode == 0) {\n        if (rop != 0xcc) {\n            /* Anything other than plain copies are not supported */\n            qemu_log_mask(LOG_UNIMP, \"sm501: rop3 mode with rop %x is not \"\n                          \"supported.\\n\", rop);\n        }\n    } else {\n        if (rop2_source_is_pattern && rop != 0x5) {\n            /* For pattern source, we support only inverse dest */\n            qemu_log_mask(LOG_UNIMP, \"sm501: rop2 source being the pattern and \"\n                          \"rop %x is not supported.\\n\", rop);\n        } else {\n            if (rop != 0x5 && rop != 0xc) {\n                /* Anything other than plain copies or inverse dest is not\n                 * supported */\n                qemu_log_mask(LOG_UNIMP, \"sm501: rop mode %x is not \"\n                              \"supported.\\n\", rop);\n            }\n        }\n    }\n\n    if (s->twoD_source_base & BIT(27) || s->twoD_destination_base & BIT(27)) {\n        qemu_log_mask(LOG_UNIMP, \"sm501: only local memory is supported.\\n\");\n        return;\n    }\n\n    switch (cmd) {\n    case 0x00: /* copy area */\n    {\n        int src_x = (s->twoD_source >> 16) & 0x01FFF;\n        int src_y = s->twoD_source & 0xFFFF;\n        uint32_t src_base = s->twoD_source_base & 0x03FFFFFF;\n        uint8_t *src = s->local_mem + src_base;\n        int src_pitch = s->twoD_pitch & 0x1FFF;\n\n#define COPY_AREA(_bpp, _pixel_type, rtl) {                                   \\\n        int y, x, index_d, index_s;                                           \\\n        for (y = 0; y < height; y++) {                              \\\n            for (x = 0; x < width; x++) {                           \\\n                _pixel_type val;                                              \\\n                                                                              \\\n                if (rtl) {                                                    \\\n                    index_s = ((src_y - y) * src_pitch + src_x - x) * _bpp;   \\\n                    index_d = ((dst_y - y) * dst_pitch + dst_x - x) * _bpp;   \\\n                } else {                                                      \\\n                    index_s = ((src_y + y) * src_pitch + src_x + x) * _bpp;   \\\n                    index_d = ((dst_y + y) * dst_pitch + dst_x + x) * _bpp;   \\\n                }                                                             \\\n                if (rop_mode == 1 && rop == 5) {                              \\\n                    /* Invert dest */                                         \\\n                    val = ~*(_pixel_type *)&dst[index_d];                     \\\n                } else {                                                      \\\n                    val = *(_pixel_type *)&src[index_s];                      \\\n                }                                                             \\\n                *(_pixel_type *)&dst[index_d] = val;                          \\\n            }                                                                 \\\n        }                                                                     \\\n    }\n        switch (format) {\n        case 0:\n            COPY_AREA(1, uint8_t, rtl);\n            break;\n        case 1:\n            COPY_AREA(2, uint16_t, rtl);\n            break;\n        case 2:\n            COPY_AREA(4, uint32_t, rtl);\n            break;\n        }\n        break;\n    }\n    case 0x01: /* fill rectangle */\n    {\n        uint32_t color = s->twoD_foreground;\n\n#define FILL_RECT(_bpp, _pixel_type) {                                      \\\n        int y, x;                                                           \\\n        for (y = 0; y < height; y++) {                            \\\n            for (x = 0; x < width; x++) {                         \\\n                int index = ((dst_y + y) * dst_pitch + dst_x + x) * _bpp;   \\\n                *(_pixel_type *)&dst[index] = (_pixel_type)color;           \\\n            }                                                               \\\n        }                                                                   \\\n    }\n\n        switch (format) {\n        case 0:\n            FILL_RECT(1, uint8_t);\n            break;\n        case 1:\n            color = cpu_to_le16(color);\n            FILL_RECT(2, uint16_t);\n            break;\n        case 2:\n            color = cpu_to_le32(color);\n            FILL_RECT(4, uint32_t);\n            break;\n        }\n        break;\n    }\n    default:\n        qemu_log_mask(LOG_UNIMP, \"sm501: not implemented 2D operation: %d\\n\",\n                      cmd);\n        return;\n    }\n\n    if (dst_base >= get_fb_addr(s, crt) &&\n        dst_base <= get_fb_addr(s, crt) + fb_len) {\n        int dst_len = MIN(fb_len, ((dst_y + height - 1) * dst_pitch +\n                          dst_x + width) * (1 << format));\n        if (dst_len) {\n            memory_region_set_dirty(&s->local_mem_region, dst_base, dst_len);\n        }\n    }\n}",
  "project": "qemu",
  "hash": 231921026198244072541449258178431781416,
  "size": 139,
  "commit_id": "b15a22bbcbe6a78dc3d88fe3134985e4cdd87de4",
  "message": "sm501: Replace hand written implementation with pixman where possible\n\nBesides being faster this should also prevent malicious guests to\nabuse 2D engine to overwrite data or cause a crash.\n\nSigned-off-by: BALATON Zoltan <balaton@eik.bme.hu>\nMessage-id: 58666389b6cae256e4e972a32c05cf8aa51bffc0.1590089984.git.balaton@eik.bme.hu\nSigned-off-by: Gerd Hoffmann <kraxel@redhat.com>",
  "target": 1,
  "dataset": "other",
  "idx": 204867,
  "Bug Filter": "Security Vulnerability Fix**\n\n**Confidence Score: 0.95**\n\nThe patch clearly addresses a security vulnerability by replacing unsafe code with a more secure implementation, as indicated by both the commit message and the code changes.",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "\n\n**Analysis:**\n\n1. **Patch Analysis:**\n   - The commit message indicates a replacement of a handwritten 2D engine implementation with Pixman, aiming to improve performance and prevent security issues like data overwrite or crashes.\n   - The code changes include variable type changes from `int` to `unsigned int` for coordinates and dimensions, which helps prevent negative values that could lead to buffer overflows or underflows.\n   - Additional checks for zero pitch and zero size are added to handle invalid inputs gracefully.\n   - The use of Pixman for blitting operations replaces manual loops, which could have been vulnerable to off-by-one errors or buffer overflows.\n\n2. **Security Vulnerability Assessment:**\n   - The commit explicitly mentions preventing malicious guests from exploiting the 2D engine, indicating the patch addresses a security concern.\n   - The code changes enforce proper bounds checking and use a trusted library (Pixman) to handle image operations, mitigating risks of unauthorized data access or system crashes.\n\n**Final Classification: Security Vulnerability Fix**\n\n**Confidence Score: 0.95**\n\nThe patch clearly addresses a security vulnerability by replacing unsafe code with a more secure implementation, as indicated by both the commit message and the code changes."
}