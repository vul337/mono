{
  "id": 948,
  "language": "c",
  "cwe": "CWE-125",
  "commit_url": "https://github.com/merlinepedra/TCPDUMP/commit/ca336198e8bebccc18502de27672fdbd6eb34856",
  "commit_sha": "ca336198e8bebccc18502de27672fdbd6eb34856",
  "commit_msg": "CVE-2017-13007/PKTAP: Pass a properly updated struct pcap_pkthdr to the sub-dissector.\n\nThe sub-dissector expects that the length and captured length will\nreflect the actual remaining data in the packet, not the raw amount\nincluding the PKTAP header; pass an updated header, just as we do for\nPPI.\n\nThis fixes a buffer over-read discovered by Yannick Formaggio.\n\nAdd a test using the capture file supplied by the reporter(s).",
  "pr_url": null,
  "pr_info": null,
  "file_name": "print-pktap.c",
  "func_name": "",
  "raw_func_from_json": "pktap_if_print(netdissect_options *ndo,\n               const struct pcap_pkthdr *h, const u_char *p)\n{\n\tuint32_t dlt, hdrlen, rectype;\n\tu_int caplen = h->caplen;\n \tu_int length = h->len;\n \tif_printer printer;\n \tconst pktap_header_t *hdr;\n \n \tif (caplen < sizeof(pktap_header_t) || length < sizeof(pktap_header_t)) {\n \t\tND_PRINT((ndo, \"[|pktap]\"));\n\t\treturn (0);\n\t}\n\thdr = (const pktap_header_t *)p;\n\tdlt = EXTRACT_LE_32BITS(&hdr->pkt_dlt);\n\thdrlen = EXTRACT_LE_32BITS(&hdr->pkt_len);\n\tif (hdrlen < sizeof(pktap_header_t)) {\n\t\t/*\n\t\t * Claimed header length < structure length.\n\t\t * XXX - does this just mean some fields aren't\n\t\t * being supplied, or is it truly an error (i.e.,\n\t\t * is the length supplied so that the header can\n\t\t * be expanded in the future)?\n\t\t */\n\t\tND_PRINT((ndo, \"[|pktap]\"));\n\t\treturn (0);\n\t}\n\tif (caplen < hdrlen || length < hdrlen) {\n\t\tND_PRINT((ndo, \"[|pktap]\"));\n\t\treturn (hdrlen);\n\t}\n\n\tif (ndo->ndo_eflag)\n\t\tpktap_header_print(ndo, p, length);\n\n\tlength -= hdrlen;\n\tcaplen -= hdrlen;\n\tp += hdrlen;\n\n\trectype = EXTRACT_LE_32BITS(&hdr->pkt_rectype);\n\tswitch (rectype) {\n\n\tcase PKT_REC_NONE:\n\t\tND_PRINT((ndo, \"no data\"));\n\t\tbreak;\n \n \tcase PKT_REC_PACKET:\n \t\tif ((printer = lookup_printer(dlt)) != NULL) {\n\t\t\thdrlen += printer(ndo, h, p);\n \t\t} else {\n \t\t\tif (!ndo->ndo_eflag)\n \t\t\t\tpktap_header_print(ndo, (const u_char *)hdr,\n\t\t\t\t\t\tlength + hdrlen);\n\n\t\t\tif (!ndo->ndo_suppress_default_print)\n\t\t\t\tND_DEFAULTPRINT(p, caplen);\n\t\t}\n\t\tbreak;\n\t}\n\n\treturn (hdrlen);\n}\n",
  "diff_func": "@@ -104,6 +104,7 @@ pktap_if_print(netdissect_options *ndo,\n \tu_int length = h->len;\n \tif_printer printer;\n \tconst pktap_header_t *hdr;\n+\tstruct pcap_pkthdr nhdr;\n \n \tif (caplen < sizeof(pktap_header_t) || length < sizeof(pktap_header_t)) {\n \t\tND_PRINT((ndo, \"[|pktap]\"));\n@@ -144,7 +145,10 @@ pktap_if_print(netdissect_options *ndo,\n \n \tcase PKT_REC_PACKET:\n \t\tif ((printer = lookup_printer(dlt)) != NULL) {\n-\t\t\thdrlen += printer(ndo, h, p);\n+\t\t\tnhdr = *h;\n+\t\t\tnhdr.caplen = caplen;\n+\t\t\tnhdr.len = length;\n+\t\t\thdrlen += printer(ndo, &nhdr, p);\n \t\t} else {\n \t\t\tif (!ndo->ndo_eflag)\n \t\t\t\tpktap_header_print(ndo, (const u_char *)hdr,",
  "project": "tcpdump",
  "commit_id": "ca336198e8bebccc18502de27672fdbd6eb34856",
  "target": 1,
  "func": "pktap_if_print(netdissect_options *ndo,\n               const struct pcap_pkthdr *h, const u_char *p)\n{\n\tuint32_t dlt, hdrlen, rectype;\n\tu_int caplen = h->caplen;\n \tu_int length = h->len;\n \tif_printer printer;\n \tconst pktap_header_t *hdr;\n \n \tif (caplen < sizeof(pktap_header_t) || length < sizeof(pktap_header_t)) {\n \t\tND_PRINT((ndo, \"[|pktap]\"));\n\t\treturn (0);\n\t}\n\thdr = (const pktap_header_t *)p;\n\tdlt = EXTRACT_LE_32BITS(&hdr->pkt_dlt);\n\thdrlen = EXTRACT_LE_32BITS(&hdr->pkt_len);\n\tif (hdrlen < sizeof(pktap_header_t)) {\n\t\t/*\n\t\t * Claimed header length < structure length.\n\t\t * XXX - does this just mean some fields aren't\n\t\t * being supplied, or is it truly an error (i.e.,\n\t\t * is the length supplied so that the header can\n\t\t * be expanded in the future)?\n\t\t */\n\t\tND_PRINT((ndo, \"[|pktap]\"));\n\t\treturn (0);\n\t}\n\tif (caplen < hdrlen || length < hdrlen) {\n\t\tND_PRINT((ndo, \"[|pktap]\"));\n\t\treturn (hdrlen);\n\t}\n\n\tif (ndo->ndo_eflag)\n\t\tpktap_header_print(ndo, p, length);\n\n\tlength -= hdrlen;\n\tcaplen -= hdrlen;\n\tp += hdrlen;\n\n\trectype = EXTRACT_LE_32BITS(&hdr->pkt_rectype);\n\tswitch (rectype) {\n\n\tcase PKT_REC_NONE:\n\t\tND_PRINT((ndo, \"no data\"));\n\t\tbreak;\n \n \tcase PKT_REC_PACKET:\n \t\tif ((printer = lookup_printer(dlt)) != NULL) {\n\t\t\thdrlen += printer(ndo, h, p);\n \t\t} else {\n \t\t\tif (!ndo->ndo_eflag)\n \t\t\t\tpktap_header_print(ndo, (const u_char *)hdr,\n\t\t\t\t\t\tlength + hdrlen);\n\n\t\t\tif (!ndo->ndo_suppress_default_print)\n\t\t\t\tND_DEFAULTPRINT(p, caplen);\n\t\t}\n\t\tbreak;\n\t}\n\n\treturn (hdrlen);\n}\n",
  "big_vul_idx": 181060,
  "idx": 2577,
  "hash": 200408431775823512137401360193154514329,
  "Bug Filter": "Security Vulnerability Fix\n\nConfidence Score: 1.0",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "\n\n**Final Output:**\n\nAnalysis: The patch addresses a buffer over-read vulnerability in the pktap dissector by ensuring the sub-dissector receives accurate packet header lengths, thus preventing unauthorized data access.\n\nFinal Classification: Security Vulnerability Fix\n\nConfidence Score: 1.0"
}