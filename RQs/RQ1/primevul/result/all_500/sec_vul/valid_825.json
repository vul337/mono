{
  "id": 825,
  "language": "c",
  "cwe": "",
  "commit_url": "https://github.com/libexif/libexif/commit/ce03ad7ef4e8aeefce79192bf5b6f69fae396f0c",
  "commit_sha": "ce03ad7ef4e8aeefce79192bf5b6f69fae396f0c",
  "commit_msg": "fixed another unsigned integer overflow\n\nfirst fixed by google in android fork,\nhttps://android.googlesource.com/platform/external/libexif/+/1e187b62682ffab5003c702657d6d725b4278f16%5E%21/#F0\n\n(use a more generic overflow check method, also check second overflow instance.)\n\nhttps://security-tracker.debian.org/tracker/CVE-2020-0198",
  "pr_url": null,
  "pr_info": null,
  "file_name": "libexif/exif-data.c",
  "func_name": "",
  "raw_func_from_json": "exif_data_load_data_thumbnail (ExifData *data, const unsigned char *d,\n\t\t\t       unsigned int ds, ExifLong o, ExifLong s)\n{\n\t/* Sanity checks */\n\tif (o >= ds) {\n\t\texif_log (data->priv->log, EXIF_LOG_CODE_DEBUG, \"ExifData\", \"Bogus thumbnail offset (%u).\", o);\n\t\treturn;\n\t}\n\tif (s > ds - o) {\n\t\texif_log (data->priv->log, EXIF_LOG_CODE_DEBUG, \"ExifData\", \"Bogus thumbnail size (%u), max would be %u.\", s, ds-o);\n\t\treturn;\n\t}\n\tif (data->data) \n\t\texif_mem_free (data->priv->mem, data->data);\n\tif (!(data->data = exif_data_alloc (data, s))) {\n\t\tEXIF_LOG_NO_MEMORY (data->priv->log, \"ExifData\", s);\n\t\tdata->size = 0;\n\t\treturn;\n\t}\n\tdata->size = s;\n\tmemcpy (data->data, d + o, s);\n}",
  "diff_func": "@@ -47,6 +47,8 @@\n #undef JPEG_MARKER_APP1\n #define JPEG_MARKER_APP1 0xe1\n \n+#define CHECKOVERFLOW(offset,datasize,structsize) (( offset >= datasize) || (structsize > datasize) || (offset > datasize - structsize ))\n+\n static const unsigned char ExifHeader[] = {0x45, 0x78, 0x69, 0x66, 0x00, 0x00};\n \n struct _ExifDataPrivate\n@@ -327,7 +329,7 @@ exif_data_load_data_thumbnail (ExifData *data, const unsigned char *d,\n \t\texif_log (data->priv->log, EXIF_LOG_CODE_DEBUG, \"ExifData\", \"Bogus thumbnail offset (%u).\", o);\n \t\treturn;\n \t}\n-\tif (s > ds - o) {\n+\tif (CHECKOVERFLOW(o,ds,s)) {\n \t\texif_log (data->priv->log, EXIF_LOG_CODE_DEBUG, \"ExifData\", \"Bogus thumbnail size (%u), max would be %u.\", s, ds-o);\n \t\treturn;\n \t}\n@@ -420,9 +422,9 @@ exif_data_load_data_content (ExifData *data, ExifIfd ifd,\n \t}\n \n \t/* Read the number of entries */\n-\tif ((offset + 2 < offset) || (offset + 2 < 2) || (offset + 2 > ds)) {\n+\tif (CHECKOVERFLOW(offset, ds, 2)) {\n \t\texif_log (data->priv->log, EXIF_LOG_CODE_CORRUPT_DATA, \"ExifData\",\n-\t\t\t  \"Tag data past end of buffer (%u > %u)\", offset+2, ds);\n+\t\t\t  \"Tag data past end of buffer (%u+2 > %u)\", offset, ds);\n \t\treturn;\n \t}\n \tn = exif_get_short (d + offset, data->priv->order);\n@@ -431,7 +433,7 @@ exif_data_load_data_content (ExifData *data, ExifIfd ifd,\n \toffset += 2;\n \n \t/* Check if we have enough data. */\n-\tif (offset + 12 * n > ds) {\n+\tif (CHECKOVERFLOW(offset, ds, 12*n)) {\n \t\tn = (ds - offset) / 12;\n \t\texif_log (data->priv->log, EXIF_LOG_CODE_DEBUG, \"ExifData\",\n \t\t\t\t  \"Short data; only loading %hu entries...\", n);",
  "func": "exif_data_load_data_thumbnail (ExifData *data, const unsigned char *d,\n\t\t\t       unsigned int ds, ExifLong o, ExifLong s)\n{\n\t/* Sanity checks */\n\tif (o >= ds) {\n\t\texif_log (data->priv->log, EXIF_LOG_CODE_DEBUG, \"ExifData\", \"Bogus thumbnail offset (%u).\", o);\n\t\treturn;\n\t}\n\tif (s > ds - o) {\n\t\texif_log (data->priv->log, EXIF_LOG_CODE_DEBUG, \"ExifData\", \"Bogus thumbnail size (%u), max would be %u.\", s, ds-o);\n\t\treturn;\n\t}\n\tif (data->data) \n\t\texif_mem_free (data->priv->mem, data->data);\n\tif (!(data->data = exif_data_alloc (data, s))) {\n\t\tEXIF_LOG_NO_MEMORY (data->priv->log, \"ExifData\", s);\n\t\tdata->size = 0;\n\t\treturn;\n\t}\n\tdata->size = s;\n\tmemcpy (data->data, d + o, s);\n}",
  "project": "libexif",
  "hash": 204041437380593833360882392912459353328,
  "size": 22,
  "commit_id": "ce03ad7ef4e8aeefce79192bf5b6f69fae396f0c",
  "message": "fixed another unsigned integer overflow\n\nfirst fixed by google in android fork,\nhttps://android.googlesource.com/platform/external/libexif/+/1e187b62682ffab5003c702657d6d725b4278f16%5E%21/#F0\n\n(use a more generic overflow check method, also check second overflow instance.)\n\nhttps://security-tracker.debian.org/tracker/CVE-2020-0198",
  "target": 1,
  "dataset": "other",
  "idx": 207982,
  "Bug Filter": "Security Vulnerability Fix  \nConfidence Score: 1.0",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "\n\n**Final Output:**\n\nAnalysis:\n- The patch addresses an unsigned integer overflow issue, which is a known security vulnerability (CVE-2020-0198). The code introduces a generic overflow check macro to prevent buffer overflows, which can lead to unauthorized access or data corruption.\n\nFinal Classification: Security Vulnerability Fix  \nConfidence Score: 1.0"
}