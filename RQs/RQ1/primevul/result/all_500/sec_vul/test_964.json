{
  "id": 964,
  "language": "c",
  "cwe": "",
  "commit_url": "https://github.com/chipcraft-ic/toolchain-component-linux/commit/f227e3ec3b5cad859ad15666874405e8c1bbc1d4",
  "commit_sha": "f227e3ec3b5cad859ad15666874405e8c1bbc1d4",
  "commit_msg": "random32: update the net random state on interrupt and activity\n\nThis modifies the first 32 bits out of the 128 bits of a random CPU's\nnet_rand_state on interrupt or CPU activity to complicate remote\nobservations that could lead to guessing the network RNG's internal\nstate.\n\nNote that depending on some network devices' interrupt rate moderation\nor binding, this re-seeding might happen on every packet or even almost\nnever.\n\nIn addition, with NOHZ some CPUs might not even get timer interrupts,\nleaving their local state rarely updated, while they are running\nnetworked processes making use of the random state.  For this reason, we\nalso perform this update in update_process_times() in order to at least\nupdate the state when there is user or system activity, since it's the\nonly case we care about.\n\nReported-by: Amit Klein <aksecurity@gmail.com>\nSuggested-by: Linus Torvalds <torvalds@linux-foundation.org>\nCc: Eric Dumazet <edumazet@google.com>\nCc: \"Jason A. Donenfeld\" <Jason@zx2c4.com>\nCc: Andy Lutomirski <luto@kernel.org>\nCc: Kees Cook <keescook@chromium.org>\nCc: Thomas Gleixner <tglx@linutronix.de>\nCc: Peter Zijlstra <peterz@infradead.org>\nCc: <stable@vger.kernel.org>\nSigned-off-by: Willy Tarreau <w@1wt.eu>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
  "pr_url": null,
  "pr_info": null,
  "file_name": "drivers/char/random.c",
  "func_name": "",
  "raw_func_from_json": "void update_process_times(int user_tick)\n{\n\tstruct task_struct *p = current;\n\n\t/* Note: this timer irq context must be accounted for as well. */\n\taccount_process_tick(p, user_tick);\n\trun_local_timers();\n\trcu_sched_clock_irq(user_tick);\n#ifdef CONFIG_IRQ_WORK\n\tif (in_irq())\n\t\tirq_work_tick();\n#endif\n\tscheduler_tick();\n\tif (IS_ENABLED(CONFIG_POSIX_TIMERS))\n\t\trun_posix_cpu_timers();\n}",
  "diff_func": "@@ -1277,6 +1277,7 @@ void add_interrupt_randomness(int irq, int irq_flags)\n \n \tfast_mix(fast_pool);\n \tadd_interrupt_bench(cycles);\n+\tthis_cpu_add(net_rand_state.s1, fast_pool->pool[cycles & 3]);\n \n \tif (unlikely(crng_init == 0)) {\n \t\tif ((fast_pool->count >= 64) &&",
  "func": "void update_process_times(int user_tick)\n{\n\tstruct task_struct *p = current;\n\n\t/* Note: this timer irq context must be accounted for as well. */\n\taccount_process_tick(p, user_tick);\n\trun_local_timers();\n\trcu_sched_clock_irq(user_tick);\n#ifdef CONFIG_IRQ_WORK\n\tif (in_irq())\n\t\tirq_work_tick();\n#endif\n\tscheduler_tick();\n\tif (IS_ENABLED(CONFIG_POSIX_TIMERS))\n\t\trun_posix_cpu_timers();\n}",
  "project": "linux",
  "hash": 33405367387359628492741828293788263595,
  "size": 16,
  "commit_id": "f227e3ec3b5cad859ad15666874405e8c1bbc1d4",
  "message": "random32: update the net random state on interrupt and activity\n\nThis modifies the first 32 bits out of the 128 bits of a random CPU's\nnet_rand_state on interrupt or CPU activity to complicate remote\nobservations that could lead to guessing the network RNG's internal\nstate.\n\nNote that depending on some network devices' interrupt rate moderation\nor binding, this re-seeding might happen on every packet or even almost\nnever.\n\nIn addition, with NOHZ some CPUs might not even get timer interrupts,\nleaving their local state rarely updated, while they are running\nnetworked processes making use of the random state.  For this reason, we\nalso perform this update in update_process_times() in order to at least\nupdate the state when there is user or system activity, since it's the\nonly case we care about.\n\nReported-by: Amit Klein <aksecurity@gmail.com>\nSuggested-by: Linus Torvalds <torvalds@linux-foundation.org>\nCc: Eric Dumazet <edumazet@google.com>\nCc: \"Jason A. Donenfeld\" <Jason@zx2c4.com>\nCc: Andy Lutomirski <luto@kernel.org>\nCc: Kees Cook <keescook@chromium.org>\nCc: Thomas Gleixner <tglx@linutronix.de>\nCc: Peter Zijlstra <peterz@infradead.org>\nCc: <stable@vger.kernel.org>\nSigned-off-by: Willy Tarreau <w@1wt.eu>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
  "target": 1,
  "dataset": "other",
  "idx": 207804,
  "Bug Filter": "Security Vulnerability Fix  \nConfidence Score: 0.95",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "\n\n**Final Output:**\n\nAnalysis:\nThe patch modifies the random number generator (RNG) in the network subsystem by updating its state more frequently on interrupts and user/system activity. This change aims to prevent attackers from predicting the RNG's internal state, which is crucial for security, especially in cryptographic contexts. The code change specifically adds entropy to the RNG state, enhancing its unpredictability.\n\nFinal Classification: Security Vulnerability Fix  \nConfidence Score: 0.95"
}