{
  "id": 283,
  "language": "c",
  "cwe": "",
  "commit_url": "https://github.com/malvira/lpc31xx/commit/371528caec553785c37f73fa3926ea0de84f986f",
  "commit_sha": "371528caec553785c37f73fa3926ea0de84f986f",
  "commit_msg": "mm: memcg: Correct unregistring of events attached to the same eventfd\n\nThere is an issue when memcg unregisters events that were attached to\nthe same eventfd:\n\n- On the first call mem_cgroup_usage_unregister_event() removes all\n  events attached to a given eventfd, and if there were no events left,\n  thresholds->primary would become NULL;\n\n- Since there were several events registered, cgroups core will call\n  mem_cgroup_usage_unregister_event() again, but now kernel will oops,\n  as the function doesn't expect that threshold->primary may be NULL.\n\nThat's a good question whether mem_cgroup_usage_unregister_event()\nshould actually remove all events in one go, but nowadays it can't\ndo any better as cftype->unregister_event callback doesn't pass\nany private event-associated cookie. So, let's fix the issue by\nsimply checking for threshold->primary.\n\nFWIW, w/o the patch the following oops may be observed:\n\n BUG: unable to handle kernel NULL pointer dereference at 0000000000000004\n IP: [<ffffffff810be32c>] mem_cgroup_usage_unregister_event+0x9c/0x1f0\n Pid: 574, comm: kworker/0:2 Not tainted 3.3.0-rc4+ #9 Bochs Bochs\n RIP: 0010:[<ffffffff810be32c>]  [<ffffffff810be32c>] mem_cgroup_usage_unregister_event+0x9c/0x1f0\n RSP: 0018:ffff88001d0b9d60  EFLAGS: 00010246\n Process kworker/0:2 (pid: 574, threadinfo ffff88001d0b8000, task ffff88001de91cc0)\n Call Trace:\n  [<ffffffff8107092b>] cgroup_event_remove+0x2b/0x60\n  [<ffffffff8103db94>] process_one_work+0x174/0x450\n  [<ffffffff8103e413>] worker_thread+0x123/0x2d0\n\nCc: stable <stable@vger.kernel.org>\nSigned-off-by: Anton Vorontsov <anton.vorontsov@linaro.org>\nAcked-by: KAMEZAWA Hiroyuki <kamezawa.hiroyu@jp.fujitsu.com>\nCc: Kirill A. Shutemov <kirill@shutemov.name>\nCc: Michal Hocko <mhocko@suse.cz>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
  "pr_url": null,
  "pr_info": null,
  "file_name": "mm/memcontrol.c",
  "func_name": "",
  "raw_func_from_json": "static void mem_cgroup_usage_unregister_event(struct cgroup *cgrp,\n\tstruct cftype *cft, struct eventfd_ctx *eventfd)\n{\n\tstruct mem_cgroup *memcg = mem_cgroup_from_cont(cgrp);\n\tstruct mem_cgroup_thresholds *thresholds;\n\tstruct mem_cgroup_threshold_ary *new;\n\tint type = MEMFILE_TYPE(cft->private);\n\tu64 usage;\n\tint i, j, size;\n\n\tmutex_lock(&memcg->thresholds_lock);\n\tif (type == _MEM)\n\t\tthresholds = &memcg->thresholds;\n\telse if (type == _MEMSWAP)\n\t\tthresholds = &memcg->memsw_thresholds;\n\telse\n\t\tBUG();\n\n\t/*\n\t * Something went wrong if we trying to unregister a threshold\n\t * if we don't have thresholds\n \t */\n \tBUG_ON(!thresholds);\n \n \tusage = mem_cgroup_usage(memcg, type == _MEMSWAP);\n \n \t/* Check if a threshold crossed before removing */\n\t__mem_cgroup_threshold(memcg, type == _MEMSWAP);\n\n\t/* Calculate new number of threshold */\n\tsize = 0;\n\tfor (i = 0; i < thresholds->primary->size; i++) {\n\t\tif (thresholds->primary->entries[i].eventfd != eventfd)\n\t\t\tsize++;\n\t}\n\n\tnew = thresholds->spare;\n\n\t/* Set thresholds array to NULL if we don't have thresholds */\n\tif (!size) {\n\t\tkfree(new);\n\t\tnew = NULL;\n\t\tgoto swap_buffers;\n\t}\n\n\tnew->size = size;\n\n\t/* Copy thresholds and find current threshold */\n\tnew->current_threshold = -1;\n\tfor (i = 0, j = 0; i < thresholds->primary->size; i++) {\n\t\tif (thresholds->primary->entries[i].eventfd == eventfd)\n\t\t\tcontinue;\n\n\t\tnew->entries[j] = thresholds->primary->entries[i];\n\t\tif (new->entries[j].threshold < usage) {\n\t\t\t/*\n\t\t\t * new->current_threshold will not be used\n\t\t\t * until rcu_assign_pointer(), so it's safe to increment\n\t\t\t * it here.\n\t\t\t */\n\t\t\t++new->current_threshold;\n\t\t}\n\t\tj++;\n\t}\n\nswap_buffers:\n\t/* Swap primary and spare array */\n\tthresholds->spare = thresholds->primary;\n\trcu_assign_pointer(thresholds->primary, new);\n \n \t/* To be sure that nobody uses thresholds */\n \tsynchronize_rcu();\n \tmutex_unlock(&memcg->thresholds_lock);\n }\n",
  "diff_func": "@@ -4414,6 +4414,9 @@ static void mem_cgroup_usage_unregister_event(struct cgroup *cgrp,\n \t */\n \tBUG_ON(!thresholds);\n \n+\tif (!thresholds->primary)\n+\t\tgoto unlock;\n+\n \tusage = mem_cgroup_usage(memcg, type == _MEMSWAP);\n \n \t/* Check if a threshold crossed before removing */\n@@ -4462,7 +4465,7 @@ static void mem_cgroup_usage_unregister_event(struct cgroup *cgrp,\n \n \t/* To be sure that nobody uses thresholds */\n \tsynchronize_rcu();\n-\n+unlock:\n \tmutex_unlock(&memcg->thresholds_lock);\n }\n ",
  "project": "linux",
  "commit_id": "371528caec553785c37f73fa3926ea0de84f986f",
  "target": 1,
  "func": "static void mem_cgroup_usage_unregister_event(struct cgroup *cgrp,\n\tstruct cftype *cft, struct eventfd_ctx *eventfd)\n{\n\tstruct mem_cgroup *memcg = mem_cgroup_from_cont(cgrp);\n\tstruct mem_cgroup_thresholds *thresholds;\n\tstruct mem_cgroup_threshold_ary *new;\n\tint type = MEMFILE_TYPE(cft->private);\n\tu64 usage;\n\tint i, j, size;\n\n\tmutex_lock(&memcg->thresholds_lock);\n\tif (type == _MEM)\n\t\tthresholds = &memcg->thresholds;\n\telse if (type == _MEMSWAP)\n\t\tthresholds = &memcg->memsw_thresholds;\n\telse\n\t\tBUG();\n\n\t/*\n\t * Something went wrong if we trying to unregister a threshold\n\t * if we don't have thresholds\n \t */\n \tBUG_ON(!thresholds);\n \n \tusage = mem_cgroup_usage(memcg, type == _MEMSWAP);\n \n \t/* Check if a threshold crossed before removing */\n\t__mem_cgroup_threshold(memcg, type == _MEMSWAP);\n\n\t/* Calculate new number of threshold */\n\tsize = 0;\n\tfor (i = 0; i < thresholds->primary->size; i++) {\n\t\tif (thresholds->primary->entries[i].eventfd != eventfd)\n\t\t\tsize++;\n\t}\n\n\tnew = thresholds->spare;\n\n\t/* Set thresholds array to NULL if we don't have thresholds */\n\tif (!size) {\n\t\tkfree(new);\n\t\tnew = NULL;\n\t\tgoto swap_buffers;\n\t}\n\n\tnew->size = size;\n\n\t/* Copy thresholds and find current threshold */\n\tnew->current_threshold = -1;\n\tfor (i = 0, j = 0; i < thresholds->primary->size; i++) {\n\t\tif (thresholds->primary->entries[i].eventfd == eventfd)\n\t\t\tcontinue;\n\n\t\tnew->entries[j] = thresholds->primary->entries[i];\n\t\tif (new->entries[j].threshold < usage) {\n\t\t\t/*\n\t\t\t * new->current_threshold will not be used\n\t\t\t * until rcu_assign_pointer(), so it's safe to increment\n\t\t\t * it here.\n\t\t\t */\n\t\t\t++new->current_threshold;\n\t\t}\n\t\tj++;\n\t}\n\nswap_buffers:\n\t/* Swap primary and spare array */\n\tthresholds->spare = thresholds->primary;\n\trcu_assign_pointer(thresholds->primary, new);\n \n \t/* To be sure that nobody uses thresholds */\n \tsynchronize_rcu();\n \tmutex_unlock(&memcg->thresholds_lock);\n }\n",
  "big_vul_idx": 178815,
  "idx": 673,
  "hash": 68337715219973267467150749987222879580,
  "Bug Filter": "** Security Vulnerability Fix  \n**Confidence Score:** 0.95",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "\n\nThe patch addresses a critical security issue in the kernel where a NULL pointer dereference could cause a system crash. The added check prevents this scenario, classifying it as a security fix.\n\n**Final Classification:** Security Vulnerability Fix  \n**Confidence Score:** 0.95"
}