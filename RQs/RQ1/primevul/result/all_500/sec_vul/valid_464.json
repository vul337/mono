{
  "id": 464,
  "language": "cc",
  "cwe": "",
  "commit_url": "https://github.com/google/asylo/commit/83036fd841d33baa7e039f842d131aa7881fdcc2",
  "commit_sha": "83036fd841d33baa7e039f842d131aa7881fdcc2",
  "commit_msg": "Verify UntrustedCall output is outside enclave\n\nPiperOrigin-RevId: 333781703\nChange-Id: I9df55c04dc8b04f4bf0bda8e68cc32bca81b933a",
  "pr_url": null,
  "pr_info": null,
  "file_name": "asylo/platform/primitives/sgx/trusted_sgx.cc",
  "func_name": "",
  "raw_func_from_json": "PrimitiveStatus TrustedPrimitives::UntrustedCall(uint64_t untrusted_selector,\n                                                 MessageWriter *input,\n                                                 MessageReader *output) {\n  int ret;\n\n  UntrustedCacheMalloc *untrusted_cache = UntrustedCacheMalloc::Instance();\n\n  SgxParams *const sgx_params =\n      reinterpret_cast<SgxParams *>(untrusted_cache->Malloc(sizeof(SgxParams)));\n  Cleanup clean_up(\n      [sgx_params, untrusted_cache] { untrusted_cache->Free(sgx_params); });\n  sgx_params->input_size = 0;\n  sgx_params->input = nullptr;\n  if (input) {\n    sgx_params->input_size = input->MessageSize();\n    if (sgx_params->input_size > 0) {\n      // Allocate and copy data to |input_buffer|.\n      sgx_params->input = untrusted_cache->Malloc(sgx_params->input_size);\n      input->Serialize(const_cast<void *>(sgx_params->input));\n    }\n  }\n  sgx_params->output_size = 0;\n  sgx_params->output = nullptr;\n  CHECK_OCALL(\n      ocall_dispatch_untrusted_call(&ret, untrusted_selector, sgx_params));\n  if (sgx_params->input) {\n    untrusted_cache->Free(const_cast<void *>(sgx_params->input));\n  }\n  if (sgx_params->output) {\n    // For the results obtained in |output_buffer|, copy them to |output|\n    // before freeing the buffer.\n    output->Deserialize(sgx_params->output, sgx_params->output_size);\n    TrustedPrimitives::UntrustedLocalFree(sgx_params->output);\n  }\n  return PrimitiveStatus::OkStatus();\n}",
  "diff_func": "@@ -288,6 +288,11 @@ PrimitiveStatus TrustedPrimitives::UntrustedCall(uint64_t untrusted_selector,\n   if (sgx_params->input) {\n     untrusted_cache->Free(const_cast<void *>(sgx_params->input));\n   }\n+  if (!TrustedPrimitives::IsOutsideEnclave(sgx_params->output,\n+                                           sgx_params->output_size)) {\n+    TrustedPrimitives::BestEffortAbort(\n+        \"UntrustedCall: sgx_param output should be in untrusted memory\");\n+  }\n   if (sgx_params->output) {\n     // For the results obtained in |output_buffer|, copy them to |output|\n     // before freeing the buffer.",
  "func": "PrimitiveStatus TrustedPrimitives::UntrustedCall(uint64_t untrusted_selector,\n                                                 MessageWriter *input,\n                                                 MessageReader *output) {\n  int ret;\n\n  UntrustedCacheMalloc *untrusted_cache = UntrustedCacheMalloc::Instance();\n\n  SgxParams *const sgx_params =\n      reinterpret_cast<SgxParams *>(untrusted_cache->Malloc(sizeof(SgxParams)));\n  Cleanup clean_up(\n      [sgx_params, untrusted_cache] { untrusted_cache->Free(sgx_params); });\n  sgx_params->input_size = 0;\n  sgx_params->input = nullptr;\n  if (input) {\n    sgx_params->input_size = input->MessageSize();\n    if (sgx_params->input_size > 0) {\n      // Allocate and copy data to |input_buffer|.\n      sgx_params->input = untrusted_cache->Malloc(sgx_params->input_size);\n      input->Serialize(const_cast<void *>(sgx_params->input));\n    }\n  }\n  sgx_params->output_size = 0;\n  sgx_params->output = nullptr;\n  CHECK_OCALL(\n      ocall_dispatch_untrusted_call(&ret, untrusted_selector, sgx_params));\n  if (sgx_params->input) {\n    untrusted_cache->Free(const_cast<void *>(sgx_params->input));\n  }\n  if (sgx_params->output) {\n    // For the results obtained in |output_buffer|, copy them to |output|\n    // before freeing the buffer.\n    output->Deserialize(sgx_params->output, sgx_params->output_size);\n    TrustedPrimitives::UntrustedLocalFree(sgx_params->output);\n  }\n  return PrimitiveStatus::OkStatus();\n}",
  "project": "asylo",
  "hash": 261964073185143736765939860190443192174,
  "size": 36,
  "commit_id": "83036fd841d33baa7e039f842d131aa7881fdcc2",
  "message": "Verify UntrustedCall output is outside enclave\n\nPiperOrigin-RevId: 333781703\nChange-Id: I9df55c04dc8b04f4bf0bda8e68cc32bca81b933a",
  "target": 1,
  "dataset": "other",
  "idx": 196831,
  "Bug Filter": "Security Vulnerability Fix\nConfidence Score: 0.95",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "\n\nThe patch adds a security check to ensure that the output of the UntrustedCall function is located outside the enclave. This prevents potential security issues where sensitive data might be mishandled if the output were incorrectly placed within the enclave. The fix directly addresses a security concern, making it a Security Vulnerability Fix.\n\n**Final Output:**\nAnalysis: The patch introduces a check to ensure UntrustedCall outputs are outside the enclave, preventing potential security issues related to data placement and access.\nFinal Classification: Security Vulnerability Fix\nConfidence Score: 0.95"
}