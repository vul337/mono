{
  "id": 863,
  "language": "c",
  "cwe": "",
  "commit_url": "https://github.com/jcomeauictx/casperscript/commit/5d499272b95a6b890a1397e11d20937de000d31b",
  "commit_sha": "5d499272b95a6b890a1397e11d20937de000d31b",
  "commit_msg": "Bug 702582, CVE 2020-15900 Memory Corruption in Ghostscript 9.52\n\nFix the 'rsearch' calculation for the 'post' size to give the correct\nsize.  Previous calculation would result in a size that was too large,\nand could underflow to max uint32_t. Also fix 'rsearch' to return the\ncorrect 'pre' string with empty string match.\n\nA future change may 'undefine' this undocumented, non-standard operator\nduring initialization as we do with the many other non-standard internal\nPostScript operators and procedures.",
  "pr_url": null,
  "pr_info": null,
  "file_name": "psi/zstring.c",
  "func_name": "",
  "raw_func_from_json": "search_impl(i_ctx_t *i_ctx_p, bool forward)\n{\n    os_ptr op = osp;\n    os_ptr op1 = op - 1;\n    uint size = r_size(op);\n    uint count;\n    byte *pat;\n    byte *ptr;\n    byte ch;\n    int incr = forward ? 1 : -1;\n\n    check_read_type(*op1, t_string);\n    check_read_type(*op, t_string);\n    if (size > r_size(op1)) {\t/* can't match */\n        make_false(op);\n        return 0;\n    }\n    count = r_size(op1) - size;\n    ptr = op1->value.bytes;\n    if (size == 0)\n        goto found;\n    if (!forward)\n        ptr += count;\n    pat = op->value.bytes;\n    ch = pat[0];\n    do {\n        if (*ptr == ch && (size == 1 || !memcmp(ptr, pat, size)))\n            goto found;\n        ptr += incr;\n    }\n    while (count--);\n    /* No match */\n    make_false(op);\n    return 0;\nfound:\n    op->tas.type_attrs = op1->tas.type_attrs;\n    op->value.bytes = ptr;\n    r_set_size(op, size);\n    push(2);\n    op[-1] = *op1;\n    r_set_size(op - 1, ptr - op[-1].value.bytes);\n    op1->value.bytes = ptr + size;\n    r_set_size(op1, count + (!forward ? (size - 1) : 0));\n    make_true(op);\n    return 0;\n}",
  "diff_func": "@@ -142,13 +142,18 @@ search_impl(i_ctx_t *i_ctx_p, bool forward)\n     return 0;\n found:\n     op->tas.type_attrs = op1->tas.type_attrs;\n-    op->value.bytes = ptr;\n-    r_set_size(op, size);\n+    op->value.bytes = ptr;\t\t\t\t/* match */\n+    op->tas.rsize = size;\t\t\t\t/* match */\n     push(2);\n-    op[-1] = *op1;\n-    r_set_size(op - 1, ptr - op[-1].value.bytes);\n-    op1->value.bytes = ptr + size;\n-    r_set_size(op1, count + (!forward ? (size - 1) : 0));\n+    op[-1] = *op1;\t\t\t\t\t/* pre */\n+    op[-3].value.bytes = ptr + size;\t\t\t/* post */\n+    if (forward) {\n+        op[-1].tas.rsize = ptr - op[-1].value.bytes;\t/* pre */\n+        op[-3].tas.rsize = count;\t\t\t/* post */\n+    } else {\n+        op[-1].tas.rsize = count;\t\t\t/* pre */\n+        op[-3].tas.rsize -= count + size;\t\t/* post */\n+    }\n     make_true(op);\n     return 0;\n }",
  "func": "search_impl(i_ctx_t *i_ctx_p, bool forward)\n{\n    os_ptr op = osp;\n    os_ptr op1 = op - 1;\n    uint size = r_size(op);\n    uint count;\n    byte *pat;\n    byte *ptr;\n    byte ch;\n    int incr = forward ? 1 : -1;\n\n    check_read_type(*op1, t_string);\n    check_read_type(*op, t_string);\n    if (size > r_size(op1)) {\t/* can't match */\n        make_false(op);\n        return 0;\n    }\n    count = r_size(op1) - size;\n    ptr = op1->value.bytes;\n    if (size == 0)\n        goto found;\n    if (!forward)\n        ptr += count;\n    pat = op->value.bytes;\n    ch = pat[0];\n    do {\n        if (*ptr == ch && (size == 1 || !memcmp(ptr, pat, size)))\n            goto found;\n        ptr += incr;\n    }\n    while (count--);\n    /* No match */\n    make_false(op);\n    return 0;\nfound:\n    op->tas.type_attrs = op1->tas.type_attrs;\n    op->value.bytes = ptr;\n    r_set_size(op, size);\n    push(2);\n    op[-1] = *op1;\n    r_set_size(op - 1, ptr - op[-1].value.bytes);\n    op1->value.bytes = ptr + size;\n    r_set_size(op1, count + (!forward ? (size - 1) : 0));\n    make_true(op);\n    return 0;\n}",
  "project": "ghostpdl",
  "hash": 249132726675055919779887509398809507782,
  "size": 46,
  "commit_id": "5d499272b95a6b890a1397e11d20937de000d31b",
  "message": "Bug 702582, CVE 2020-15900 Memory Corruption in Ghostscript 9.52\n\nFix the 'rsearch' calculation for the 'post' size to give the correct\nsize.  Previous calculation would result in a size that was too large,\nand could underflow to max uint32_t. Also fix 'rsearch' to return the\ncorrect 'pre' string with empty string match.\n\nA future change may 'undefine' this undocumented, non-standard operator\nduring initialization as we do with the many other non-standard internal\nPostScript operators and procedures.",
  "target": 1,
  "dataset": "other",
  "idx": 202822,
  "Bug Filter": "** Security Vulnerability Fix  \n**Confidence Score:** 0.95",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "\n\nThe patch addresses a memory corruption issue linked to a CVE, indicating a security vulnerability. The code changes correct size calculations to prevent underflow, mitigating potential exploitation.\n\n**Final Classification:** Security Vulnerability Fix  \n**Confidence Score:** 0.95"
}