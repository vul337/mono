{
  "id": 161,
  "language": "c",
  "cwe": "CWE-399",
  "commit_url": "https://github.com/pascal-cuoq/libtasn1-fork/commit/f435825c0f527a8e52e6ffbc3ad0bc60531d537e",
  "commit_sha": "f435825c0f527a8e52e6ffbc3ad0bc60531d537e",
  "commit_msg": "_asn1_extract_der_octet: catch invalid input cases early\n\nThat is, check the calculated lengths for validity prior\nto entering a loop. This avoids an infinite recursion.\nReported by Pascal Cuoq.",
  "pr_url": null,
  "pr_info": null,
  "file_name": "lib/decoding.c",
  "func_name": "else",
  "raw_func_from_json": "_asn1_extract_der_octet (asn1_node node, const unsigned char *der,\n\t\t\t int der_len, unsigned flags)\n{\n  int len2, len3;\n  int counter, counter_end;\n  int result;\n\n  len2 = asn1_get_length_der (der, der_len, &len3);\n  if (len2 < -1)\n    return ASN1_DER_ERROR;\n\n  counter = len3 + 1;\n   DECR_LEN(der_len, len3);\n \n   if (len2 == -1)\n    counter_end = der_len - 2;\n   else\n     counter_end = der_len;\n \n   while (counter < counter_end)\n     {\n       DECR_LEN(der_len, 1);\n\n      if (len2 >= 0)\n\t{\n\t  DECR_LEN(der_len, len2+len3);\n\t  _asn1_append_value (node, der + counter + len3, len2);\n\t}\n      else\n\t{\t\t\t/* indefinite */\n\t  DECR_LEN(der_len, len3);\n\t  result =\n\t    _asn1_extract_der_octet (node, der + counter + len3,\n\t\t\t\t     der_len, flags);\n\t  if (result != ASN1_SUCCESS)\n\t    return result;\n\t  len2 = 0;\n\t}\n\n      counter += len2 + len3 + 1;\n    }\n\n  return ASN1_SUCCESS;\n\ncleanup:\n  return result;\n}\n",
  "diff_func": "@@ -767,10 +767,17 @@ _asn1_extract_der_octet (asn1_node node, const unsigned char *der,\n   DECR_LEN(der_len, len3);\n \n   if (len2 == -1)\n-    counter_end = der_len - 2;\n+    {\n+      if (der_len < 2)\n+        return ASN1_DER_ERROR;\n+      counter_end = der_len - 2;\n+    }\n   else\n     counter_end = der_len;\n \n+  if (counter_end < counter)\n+    return ASN1_DER_ERROR;\n+\n   while (counter < counter_end)\n     {\n       DECR_LEN(der_len, 1);",
  "project": "savannah",
  "commit_id": "f435825c0f527a8e52e6ffbc3ad0bc60531d537e",
  "target": 1,
  "func": "_asn1_extract_der_octet (asn1_node node, const unsigned char *der,\n\t\t\t int der_len, unsigned flags)\n{\n  int len2, len3;\n  int counter, counter_end;\n  int result;\n\n  len2 = asn1_get_length_der (der, der_len, &len3);\n  if (len2 < -1)\n    return ASN1_DER_ERROR;\n\n  counter = len3 + 1;\n   DECR_LEN(der_len, len3);\n \n   if (len2 == -1)\n    counter_end = der_len - 2;\n   else\n     counter_end = der_len;\n \n   while (counter < counter_end)\n     {\n       DECR_LEN(der_len, 1);\n\n      if (len2 >= 0)\n\t{\n\t  DECR_LEN(der_len, len2+len3);\n\t  _asn1_append_value (node, der + counter + len3, len2);\n\t}\n      else\n\t{\t\t\t/* indefinite */\n\t  DECR_LEN(der_len, len3);\n\t  result =\n\t    _asn1_extract_der_octet (node, der + counter + len3,\n\t\t\t\t     der_len, flags);\n\t  if (result != ASN1_SUCCESS)\n\t    return result;\n\t  len2 = 0;\n\t}\n\n      counter += len2 + len3 + 1;\n    }\n\n  return ASN1_SUCCESS;\n\ncleanup:\n  return result;\n}\n",
  "big_vul_idx": 178249,
  "idx": 288,
  "hash": 199202175349742229581148475563569699182,
  "Bug Filter": "Security Vulnerability Fix\nConfidence Score: 0.95",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "\n\n**Final Output:**\nAnalysis: The patch modifies the function _asn1_extract_der_octet to add boundary checks, preventing infinite recursion by validating inputs early. This addresses a potential security issue where invalid input could cause a crash or denial of service.\nFinal Classification: Security Vulnerability Fix\nConfidence Score: 0.95"
}