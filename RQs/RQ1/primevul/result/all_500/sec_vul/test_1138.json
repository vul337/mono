{
  "id": 1138,
  "language": "c",
  "cwe": "",
  "commit_url": "https://github.com/HKL-Kevin/msm8998-mainline/commit/f62f3c20647ebd5fb6ecb8f0b477b9281c44c10a",
  "commit_sha": "f62f3c20647ebd5fb6ecb8f0b477b9281c44c10a",
  "commit_msg": "KVM: PPC: Book3S: Fix H_RTAS rets buffer overflow\n\nThe kvmppc_rtas_hcall() sets the host rtas_args.rets pointer based on\nthe rtas_args.nargs that was provided by the guest. That guest nargs\nvalue is not range checked, so the guest can cause the host rets pointer\nto be pointed outside the args array. The individual rtas function\nhandlers check the nargs and nrets values to ensure they are correct,\nbut if they are not, the handlers store a -3 (0xfffffffd) failure\nindication in rets[0] which corrupts host memory.\n\nFix this by testing up front whether the guest supplied nargs and nret\nwould exceed the array size, and fail the hcall directly without storing\na failure indication to rets[0].\n\nAlso expand on a comment about why we kill the guest and try not to\nreturn errors directly if we have a valid rets[0] pointer.\n\nFixes: 8e591cb72047 (\"KVM: PPC: Book3S: Add infrastructure to implement kernel-side RTAS calls\")\nCc: stable@vger.kernel.org # v3.10+\nReported-by: Alexey Kardashevskiy <aik@ozlabs.ru>\nSigned-off-by: Nicholas Piggin <npiggin@gmail.com>\nSigned-off-by: Michael Ellerman <mpe@ellerman.id.au>",
  "pr_url": null,
  "pr_info": null,
  "file_name": "arch/powerpc/kvm/book3s_rtas.c",
  "func_name": "",
  "raw_func_from_json": "int kvmppc_rtas_hcall(struct kvm_vcpu *vcpu)\n{\n\tstruct rtas_token_definition *d;\n\tstruct rtas_args args;\n\trtas_arg_t *orig_rets;\n\tgpa_t args_phys;\n\tint rc;\n\n\t/*\n\t * r4 contains the guest physical address of the RTAS args\n\t * Mask off the top 4 bits since this is a guest real address\n\t */\n\targs_phys = kvmppc_get_gpr(vcpu, 4) & KVM_PAM;\n\n\tvcpu->srcu_idx = srcu_read_lock(&vcpu->kvm->srcu);\n\trc = kvm_read_guest(vcpu->kvm, args_phys, &args, sizeof(args));\n\tsrcu_read_unlock(&vcpu->kvm->srcu, vcpu->srcu_idx);\n\tif (rc)\n\t\tgoto fail;\n\n\t/*\n\t * args->rets is a pointer into args->args. Now that we've\n\t * copied args we need to fix it up to point into our copy,\n\t * not the guest args. We also need to save the original\n\t * value so we can restore it on the way out.\n\t */\n\torig_rets = args.rets;\n\targs.rets = &args.args[be32_to_cpu(args.nargs)];\n\n\tmutex_lock(&vcpu->kvm->arch.rtas_token_lock);\n\n\trc = -ENOENT;\n\tlist_for_each_entry(d, &vcpu->kvm->arch.rtas_tokens, list) {\n\t\tif (d->token == be32_to_cpu(args.token)) {\n\t\t\td->handler->handler(vcpu, &args);\n\t\t\trc = 0;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tmutex_unlock(&vcpu->kvm->arch.rtas_token_lock);\n\n\tif (rc == 0) {\n\t\targs.rets = orig_rets;\n\t\trc = kvm_write_guest(vcpu->kvm, args_phys, &args, sizeof(args));\n\t\tif (rc)\n\t\t\tgoto fail;\n\t}\n\n\treturn rc;\n\nfail:\n\t/*\n\t * We only get here if the guest has called RTAS with a bogus\n\t * args pointer. That means we can't get to the args, and so we\n\t * can't fail the RTAS call. So fail right out to userspace,\n\t * which should kill the guest.\n\t */\n\treturn rc;\n}",
  "diff_func": "@@ -242,6 +242,17 @@ int kvmppc_rtas_hcall(struct kvm_vcpu *vcpu)\n \t * value so we can restore it on the way out.\n \t */\n \torig_rets = args.rets;\n+\tif (be32_to_cpu(args.nargs) >= ARRAY_SIZE(args.args)) {\n+\t\t/*\n+\t\t * Don't overflow our args array: ensure there is room for\n+\t\t * at least rets[0] (even if the call specifies 0 nret).\n+\t\t *\n+\t\t * Each handler must then check for the correct nargs and nret\n+\t\t * values, but they may always return failure in rets[0].\n+\t\t */\n+\t\trc = -EINVAL;\n+\t\tgoto fail;\n+\t}\n \targs.rets = &args.args[be32_to_cpu(args.nargs)];\n \n \tmutex_lock(&vcpu->kvm->arch.rtas_token_lock);\n@@ -269,9 +280,17 @@ int kvmppc_rtas_hcall(struct kvm_vcpu *vcpu)\n fail:\n \t/*\n \t * We only get here if the guest has called RTAS with a bogus\n-\t * args pointer. That means we can't get to the args, and so we\n-\t * can't fail the RTAS call. So fail right out to userspace,\n-\t * which should kill the guest.\n+\t * args pointer or nargs/nret values that would overflow the\n+\t * array. That means we can't get to the args, and so we can't\n+\t * fail the RTAS call. So fail right out to userspace, which\n+\t * should kill the guest.\n+\t *\n+\t * SLOF should actually pass the hcall return value from the\n+\t * rtas handler call in r3, so enter_rtas could be modified to\n+\t * return a failure indication in r3 and we could return such\n+\t * errors to the guest rather than failing to host userspace.\n+\t * However old guests that don't test for failure could then\n+\t * continue silently after errors, so for now we won't do this.\n \t */\n \treturn rc;\n }",
  "func": "int kvmppc_rtas_hcall(struct kvm_vcpu *vcpu)\n{\n\tstruct rtas_token_definition *d;\n\tstruct rtas_args args;\n\trtas_arg_t *orig_rets;\n\tgpa_t args_phys;\n\tint rc;\n\n\t/*\n\t * r4 contains the guest physical address of the RTAS args\n\t * Mask off the top 4 bits since this is a guest real address\n\t */\n\targs_phys = kvmppc_get_gpr(vcpu, 4) & KVM_PAM;\n\n\tvcpu->srcu_idx = srcu_read_lock(&vcpu->kvm->srcu);\n\trc = kvm_read_guest(vcpu->kvm, args_phys, &args, sizeof(args));\n\tsrcu_read_unlock(&vcpu->kvm->srcu, vcpu->srcu_idx);\n\tif (rc)\n\t\tgoto fail;\n\n\t/*\n\t * args->rets is a pointer into args->args. Now that we've\n\t * copied args we need to fix it up to point into our copy,\n\t * not the guest args. We also need to save the original\n\t * value so we can restore it on the way out.\n\t */\n\torig_rets = args.rets;\n\targs.rets = &args.args[be32_to_cpu(args.nargs)];\n\n\tmutex_lock(&vcpu->kvm->arch.rtas_token_lock);\n\n\trc = -ENOENT;\n\tlist_for_each_entry(d, &vcpu->kvm->arch.rtas_tokens, list) {\n\t\tif (d->token == be32_to_cpu(args.token)) {\n\t\t\td->handler->handler(vcpu, &args);\n\t\t\trc = 0;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tmutex_unlock(&vcpu->kvm->arch.rtas_token_lock);\n\n\tif (rc == 0) {\n\t\targs.rets = orig_rets;\n\t\trc = kvm_write_guest(vcpu->kvm, args_phys, &args, sizeof(args));\n\t\tif (rc)\n\t\t\tgoto fail;\n\t}\n\n\treturn rc;\n\nfail:\n\t/*\n\t * We only get here if the guest has called RTAS with a bogus\n\t * args pointer. That means we can't get to the args, and so we\n\t * can't fail the RTAS call. So fail right out to userspace,\n\t * which should kill the guest.\n\t */\n\treturn rc;\n}",
  "project": "linux",
  "hash": 88723352357878054001310947221205326537,
  "size": 60,
  "commit_id": "f62f3c20647ebd5fb6ecb8f0b477b9281c44c10a",
  "message": "KVM: PPC: Book3S: Fix H_RTAS rets buffer overflow\n\nThe kvmppc_rtas_hcall() sets the host rtas_args.rets pointer based on\nthe rtas_args.nargs that was provided by the guest. That guest nargs\nvalue is not range checked, so the guest can cause the host rets pointer\nto be pointed outside the args array. The individual rtas function\nhandlers check the nargs and nrets values to ensure they are correct,\nbut if they are not, the handlers store a -3 (0xfffffffd) failure\nindication in rets[0] which corrupts host memory.\n\nFix this by testing up front whether the guest supplied nargs and nret\nwould exceed the array size, and fail the hcall directly without storing\na failure indication to rets[0].\n\nAlso expand on a comment about why we kill the guest and try not to\nreturn errors directly if we have a valid rets[0] pointer.\n\nFixes: 8e591cb72047 (\"KVM: PPC: Book3S: Add infrastructure to implement kernel-side RTAS calls\")\nCc: stable@vger.kernel.org # v3.10+\nReported-by: Alexey Kardashevskiy <aik@ozlabs.ru>\nSigned-off-by: Nicholas Piggin <npiggin@gmail.com>\nSigned-off-by: Michael Ellerman <mpe@ellerman.id.au>",
  "target": 1,
  "dataset": "other",
  "idx": 214339,
  "Bug Filter": "Security Vulnerability Fix\n\nConfidence Score: 0.95\n\n---\n\n**Step-by-Step Explanation:**\n\n1. **Patch Analysis**: The code change introduces a bounds check on `nargs` to prevent buffer overflow in the `kvmppc_rtas_hcall` function, ensuring the `rets` pointer stays within the array bounds.\n\n2. **Security Impact**: This prevents unauthorized memory access, protecting against potential data corruption or code execution by an attacker controlling `nargs`.\n\n3. **Classification**: The fix directly addresses a security vulnerability, making it a clear case for 'Security Vulnerability Fix'.\n\n4. **Confidence**: High confidence due to explicit bounds checking and the nature of the buffer overflow issue.\n\n---\n\n**Final Answer:**\n\nFinal Classification: Security Vulnerability Fix  \nConfidence Score: 0.95",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "\n\n**Final Output:**\n\nAnalysis: The patch addresses a buffer overflow vulnerability by adding bounds checking on guest-supplied values, preventing unauthorized memory access and potential code execution.\n\nFinal Classification: Security Vulnerability Fix\n\nConfidence Score: 0.95\n\n---\n\n**Step-by-Step Explanation:**\n\n1. **Patch Analysis**: The code change introduces a bounds check on `nargs` to prevent buffer overflow in the `kvmppc_rtas_hcall` function, ensuring the `rets` pointer stays within the array bounds.\n\n2. **Security Impact**: This prevents unauthorized memory access, protecting against potential data corruption or code execution by an attacker controlling `nargs`.\n\n3. **Classification**: The fix directly addresses a security vulnerability, making it a clear case for 'Security Vulnerability Fix'.\n\n4. **Confidence**: High confidence due to explicit bounds checking and the nature of the buffer overflow issue.\n\n---\n\n**Final Answer:**\n\nFinal Classification: Security Vulnerability Fix  \nConfidence Score: 0.95"
}