{
  "id": 604,
  "language": "c",
  "cwe": "CWE-264",
  "commit_url": "https://github.com/ClusterLabs/pacemaker/commit/84ac07c",
  "commit_sha": "84ac07c7d02b3badd708b1ef13a2159dede70715",
  "commit_msg": "Fix: acl: Do not delay evaluation of added nodes in some situations\n\nIt is not appropriate when the node has no children as it is not a\nplaceholder",
  "pr_url": null,
  "pr_info": null,
  "file_name": "lib/common/xml.c",
  "func_name": "",
  "raw_func_from_json": "__xml_acl_post_process(xmlNode * xml)\n{\n    xmlNode *cIter = __xml_first_child(xml);\n    xml_private_t *p = xml->_private;\n \n     if(is_set(p->flags, xpf_created)) {\n         xmlAttr *xIter = NULL;\n \n        /* Always allow new scaffolding, ie. node with no attributes or only an 'id' */\n \n         for (xIter = crm_first_attr(xml); xIter != NULL; xIter = xIter->next) {\n             const char *prop_name = (const char *)xIter->name;\n \n            if (strcmp(prop_name, XML_ATTR_ID) == 0) {\n                 /* Delay the acl check */\n                 continue;\n \n            } else if(__xml_acl_check(xml, NULL, xpf_acl_write)) {\n                crm_trace(\"Creation of %s=%s is allowed\", crm_element_name(xml), ID(xml));\n                 break;\n \n             } else {\n                char *path = xml_get_path(xml);\n                 crm_trace(\"Cannot add new node %s at %s\", crm_element_name(xml), path);\n \n                 if(xml != xmlDocGetRootElement(xml->doc)) {\n                    xmlUnlinkNode(xml);\n                    xmlFreeNode(xml);\n                }\n                free(path);\n                 return;\n             }\n         }\n     }\n \n     while (cIter != NULL) {\n        xmlNode *child = cIter;\n        cIter = __xml_next(cIter); /* In case it is free'd */\n        __xml_acl_post_process(child);\n    }\n}\n",
  "diff_func": "@@ -1020,13 +1020,16 @@ __xml_acl_post_process(xmlNode * xml)\n \n     if(is_set(p->flags, xpf_created)) {\n         xmlAttr *xIter = NULL;\n+        char *path = xml_get_path(xml);\n \n-        /* Always allow new scaffolding, ie. node with no attributes or only an 'id' */\n+        /* Always allow new scaffolding, ie. node with no attributes or only an 'id'\n+         * Except in the ACLs section\n+         */\n \n         for (xIter = crm_first_attr(xml); xIter != NULL; xIter = xIter->next) {\n             const char *prop_name = (const char *)xIter->name;\n \n-            if (strcmp(prop_name, XML_ATTR_ID) == 0) {\n+            if (strcmp(prop_name, XML_ATTR_ID) == 0 && strstr(path, \"/\"XML_CIB_TAG_ACLS\"/\") == NULL) {\n                 /* Delay the acl check */\n                 continue;\n \n@@ -1035,7 +1038,6 @@ __xml_acl_post_process(xmlNode * xml)\n                 break;\n \n             } else {\n-                char *path = xml_get_path(xml);\n                 crm_trace(\"Cannot add new node %s at %s\", crm_element_name(xml), path);\n \n                 if(xml != xmlDocGetRootElement(xml->doc)) {\n@@ -1046,6 +1048,7 @@ __xml_acl_post_process(xmlNode * xml)\n                 return;\n             }\n         }\n+        free(path);\n     }\n \n     while (cIter != NULL) {",
  "project": "pacemaker",
  "commit_id": "84ac07c",
  "target": 1,
  "func": "__xml_acl_post_process(xmlNode * xml)\n{\n    xmlNode *cIter = __xml_first_child(xml);\n    xml_private_t *p = xml->_private;\n \n     if(is_set(p->flags, xpf_created)) {\n         xmlAttr *xIter = NULL;\n \n        /* Always allow new scaffolding, ie. node with no attributes or only an 'id' */\n \n         for (xIter = crm_first_attr(xml); xIter != NULL; xIter = xIter->next) {\n             const char *prop_name = (const char *)xIter->name;\n \n            if (strcmp(prop_name, XML_ATTR_ID) == 0) {\n                 /* Delay the acl check */\n                 continue;\n \n            } else if(__xml_acl_check(xml, NULL, xpf_acl_write)) {\n                crm_trace(\"Creation of %s=%s is allowed\", crm_element_name(xml), ID(xml));\n                 break;\n \n             } else {\n                char *path = xml_get_path(xml);\n                 crm_trace(\"Cannot add new node %s at %s\", crm_element_name(xml), path);\n \n                 if(xml != xmlDocGetRootElement(xml->doc)) {\n                    xmlUnlinkNode(xml);\n                    xmlFreeNode(xml);\n                }\n                free(path);\n                 return;\n             }\n         }\n     }\n \n     while (cIter != NULL) {\n        xmlNode *child = cIter;\n        cIter = __xml_next(cIter); /* In case it is free'd */\n        __xml_acl_post_process(child);\n    }\n}\n",
  "big_vul_idx": 179856,
  "idx": 1529,
  "hash": 62179770258691622443449948427548703167,
  "Bug Filter": "Security Vulnerability Fix\n\nConfidence Score: 0.95",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "\n\n**Final Output:**\n\nAnalysis: The patch modifies the ACL processing function to correctly evaluate nodes in the ACLs section, preventing potential security issues related to incorrect node handling.\n\nFinal Classification: Security Vulnerability Fix\n\nConfidence Score: 0.95"
}