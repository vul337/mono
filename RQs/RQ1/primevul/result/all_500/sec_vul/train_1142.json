{
  "id": 1142,
  "language": "c",
  "cwe": "CWE-191",
  "commit_url": "https://github.com/oddconcepts/liboddgd/commit/60bfb401ad5a4a8ae995dcd36372fe15c71e1a35",
  "commit_sha": "60bfb401ad5a4a8ae995dcd36372fe15c71e1a35",
  "commit_msg": "Fix potential unsigned underflow\n\nNo need to decrease `u`, so we don't do it. While we're at it, we also factor\nout the overflow check of the loop, what improves performance and readability.\n\nThis issue has been reported by Stefan Esser to security@libgd.org.",
  "pr_url": null,
  "pr_info": null,
  "file_name": "src/gd_interpolation.c",
  "func_name": "",
  "raw_func_from_json": "static inline LineContribType * _gdContributionsAlloc(unsigned int line_length, unsigned int windows_size)\n {\n \tunsigned int u = 0;\n \tLineContribType *res;\n\tint overflow_error = 0;\n \n \tres = (LineContribType *) gdMalloc(sizeof(LineContribType));\n \tif (!res) {\n \t\treturn NULL;\n\t}\n\tres->WindowSize = windows_size;\n\tres->LineLength = line_length;\n\tif (overflow2(line_length, sizeof(ContributionType))) {\n\t\tgdFree(res);\n\t\treturn NULL;\n\t}\n\tres->ContribRow = (ContributionType *) gdMalloc(line_length * sizeof(ContributionType));\n\tif (res->ContribRow == NULL) {\n\t\tgdFree(res);\n \t\treturn NULL;\n \t}\n \tfor (u = 0 ; u < line_length ; u++) {\n\t\tif (overflow2(windows_size, sizeof(double))) {\n\t\t\toverflow_error = 1;\n\t\t} else {\n\t\t\tres->ContribRow[u].Weights = (double *) gdMalloc(windows_size * sizeof(double));\n\t\t}\n\t\tif (overflow_error == 1 || res->ContribRow[u].Weights == NULL) {\n \t\t\tunsigned int i;\n\t\t\tu--;\n\t\t\tfor (i=0;i<=u;i++) {\n \t\t\t\tgdFree(res->ContribRow[i].Weights);\n \t\t\t}\n \t\t\tgdFree(res->ContribRow);\n\t\t\tgdFree(res);\n\t\t\treturn NULL;\n\t\t}\n\t}\n\treturn res;\n}\n",
  "diff_func": "@@ -829,8 +829,13 @@ static inline LineContribType * _gdContributionsAlloc(unsigned int line_length,\n {\n \tunsigned int u = 0;\n \tLineContribType *res;\n-\tint overflow_error = 0;\n+\tsize_t weights_size;\n \n+\tif (overflow2(windows_size, sizeof(double))) {\n+\t\treturn NULL;\n+\t} else {\n+\t\tweights_size = windows_size * sizeof(double);\n+\t}\n \tres = (LineContribType *) gdMalloc(sizeof(LineContribType));\n \tif (!res) {\n \t\treturn NULL;\n@@ -847,15 +852,11 @@ static inline LineContribType * _gdContributionsAlloc(unsigned int line_length,\n \t\treturn NULL;\n \t}\n \tfor (u = 0 ; u < line_length ; u++) {\n-\t\tif (overflow2(windows_size, sizeof(double))) {\n-\t\t\toverflow_error = 1;\n-\t\t} else {\n-\t\t\tres->ContribRow[u].Weights = (double *) gdMalloc(windows_size * sizeof(double));\n-\t\t}\n-\t\tif (overflow_error == 1 || res->ContribRow[u].Weights == NULL) {\n+\t\tres->ContribRow[u].Weights = (double *) gdMalloc(weights_size);\n+\t\tif (res->ContribRow[u].Weights == NULL) {\n \t\t\tunsigned int i;\n-\t\t\tu--;\n-\t\t\tfor (i=0;i<=u;i++) {\n+\n+\t\t\tfor (i=0;i<u;i++) {\n \t\t\t\tgdFree(res->ContribRow[i].Weights);\n \t\t\t}\n \t\t\tgdFree(res->ContribRow);",
  "project": "libgd",
  "commit_id": "60bfb401ad5a4a8ae995dcd36372fe15c71e1a35",
  "target": 1,
  "func": "static inline LineContribType * _gdContributionsAlloc(unsigned int line_length, unsigned int windows_size)\n {\n \tunsigned int u = 0;\n \tLineContribType *res;\n\tint overflow_error = 0;\n \n \tres = (LineContribType *) gdMalloc(sizeof(LineContribType));\n \tif (!res) {\n \t\treturn NULL;\n\t}\n\tres->WindowSize = windows_size;\n\tres->LineLength = line_length;\n\tif (overflow2(line_length, sizeof(ContributionType))) {\n\t\tgdFree(res);\n\t\treturn NULL;\n\t}\n\tres->ContribRow = (ContributionType *) gdMalloc(line_length * sizeof(ContributionType));\n\tif (res->ContribRow == NULL) {\n\t\tgdFree(res);\n \t\treturn NULL;\n \t}\n \tfor (u = 0 ; u < line_length ; u++) {\n\t\tif (overflow2(windows_size, sizeof(double))) {\n\t\t\toverflow_error = 1;\n\t\t} else {\n\t\t\tres->ContribRow[u].Weights = (double *) gdMalloc(windows_size * sizeof(double));\n\t\t}\n\t\tif (overflow_error == 1 || res->ContribRow[u].Weights == NULL) {\n \t\t\tunsigned int i;\n\t\t\tu--;\n\t\t\tfor (i=0;i<=u;i++) {\n \t\t\t\tgdFree(res->ContribRow[i].Weights);\n \t\t\t}\n \t\t\tgdFree(res->ContribRow);\n\t\t\tgdFree(res);\n\t\t\treturn NULL;\n\t\t}\n\t}\n\treturn res;\n}\n",
  "big_vul_idx": 181683,
  "idx": 3102,
  "hash": 153366798621193838479736310550626084619,
  "Bug Filter": "** Security Vulnerability Fix  \n**Confidence Score:** 0.95",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "\n\nThe patch addresses an unsigned underflow issue reported as a security concern. The code changes prevent incorrect memory allocations that could lead to security vulnerabilities by removing the decrement of `u` and properly handling overflow checks.\n\n**Final Classification:** Security Vulnerability Fix  \n**Confidence Score:** 0.95"
}