{
  "id": 1112,
  "language": "c",
  "cwe": "",
  "commit_url": "https://github.com/sjp38/linux.personal/commit/43a6684519ab0a6c52024b5e25322476cabad893",
  "commit_sha": "43a6684519ab0a6c52024b5e25322476cabad893",
  "commit_msg": "ping: implement proper locking\n\nWe got a report of yet another bug in ping\n\nhttp://www.openwall.com/lists/oss-security/2017/03/24/6\n\n->disconnect() is not called with socket lock held.\n\nFix this by acquiring ping rwlock earlier.\n\nThanks to Daniel, Alexander and Andrey for letting us know this problem.\n\nFixes: c319b4d76b9e (\"net: ipv4: add IPPROTO_ICMP socket kind\")\nSigned-off-by: Eric Dumazet <edumazet@google.com>\nReported-by: Daniel Jiang <danieljiang0415@gmail.com>\nReported-by: Solar Designer <solar@openwall.com>\nReported-by: Andrey Konovalov <andreyknvl@google.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
  "pr_url": null,
  "pr_info": null,
  "file_name": "net/ipv4/ping.c",
  "func_name": "",
  "raw_func_from_json": " void ping_unhash(struct sock *sk)\n {\n \tstruct inet_sock *isk = inet_sk(sk);\n \tpr_debug(\"ping_unhash(isk=%p,isk->num=%u)\\n\", isk, isk->inet_num);\n \tif (sk_hashed(sk)) {\n\t\twrite_lock_bh(&ping_table.lock);\n \t\thlist_nulls_del(&sk->sk_nulls_node);\n \t\tsk_nulls_node_init(&sk->sk_nulls_node);\n \t\tsock_put(sk);\n \t\tisk->inet_num = 0;\n \t\tisk->inet_sport = 0;\n \t\tsock_prot_inuse_add(sock_net(sk), sk->sk_prot, -1);\n\t\twrite_unlock_bh(&ping_table.lock);\n \t}\n }\n",
  "diff_func": "@@ -156,17 +156,18 @@ int ping_hash(struct sock *sk)\n void ping_unhash(struct sock *sk)\n {\n \tstruct inet_sock *isk = inet_sk(sk);\n+\n \tpr_debug(\"ping_unhash(isk=%p,isk->num=%u)\\n\", isk, isk->inet_num);\n+\twrite_lock_bh(&ping_table.lock);\n \tif (sk_hashed(sk)) {\n-\t\twrite_lock_bh(&ping_table.lock);\n \t\thlist_nulls_del(&sk->sk_nulls_node);\n \t\tsk_nulls_node_init(&sk->sk_nulls_node);\n \t\tsock_put(sk);\n \t\tisk->inet_num = 0;\n \t\tisk->inet_sport = 0;\n \t\tsock_prot_inuse_add(sock_net(sk), sk->sk_prot, -1);\n-\t\twrite_unlock_bh(&ping_table.lock);\n \t}\n+\twrite_unlock_bh(&ping_table.lock);\n }\n EXPORT_SYMBOL_GPL(ping_unhash);\n ",
  "project": "linux",
  "commit_id": "43a6684519ab0a6c52024b5e25322476cabad893",
  "target": 1,
  "func": " void ping_unhash(struct sock *sk)\n {\n \tstruct inet_sock *isk = inet_sk(sk);\n \tpr_debug(\"ping_unhash(isk=%p,isk->num=%u)\\n\", isk, isk->inet_num);\n \tif (sk_hashed(sk)) {\n\t\twrite_lock_bh(&ping_table.lock);\n \t\thlist_nulls_del(&sk->sk_nulls_node);\n \t\tsk_nulls_node_init(&sk->sk_nulls_node);\n \t\tsock_put(sk);\n \t\tisk->inet_num = 0;\n \t\tisk->inet_sport = 0;\n \t\tsock_prot_inuse_add(sock_net(sk), sk->sk_prot, -1);\n\t\twrite_unlock_bh(&ping_table.lock);\n \t}\n }\n",
  "big_vul_idx": 181607,
  "idx": 3039,
  "hash": 306833525647847038442274554901405494861,
  "Bug Filter": "Security Vulnerability Fix  \nConfidence Score: 0.95",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "\n\n**Final Output:**\n\nAnalysis:\n1. The commit message indicates a bug in the 'ping' function related to improper locking, referencing a security report.\n2. The code diff modifies the 'ping_unhash' function to acquire the lock earlier, preventing race conditions.\n3. The fix addresses a concurrency issue that could lead to security vulnerabilities like DoS.\n\nFinal Classification: Security Vulnerability Fix  \nConfidence Score: 0.95"
}