{
  "id": 796,
  "language": "c",
  "cwe": "",
  "commit_url": "https://github.com/adi-g15-ibm/qemu/commit/98a8cc741dad9cb4738f81a994bcf8d77d619152",
  "commit_sha": "98a8cc741dad9cb4738f81a994bcf8d77d619152",
  "commit_msg": "hw/misc/zynq_slcr: Avoid #DIV/0! error\n\nMalicious user can set the feedback divisor for the PLLs\nto zero, triggering a floating-point exception (SIGFPE).\n\nAs the datasheet [*] is not clear how hardware behaves\nwhen these bits are zeroes, use the maximum divisor\npossible (128) to avoid the software FPE.\n\n[*] Zynq-7000 TRM, UG585 (v1.12.2)\n    B.28 System Level Control Registers (slcr)\n    -> \"Register (slcr) ARM_PLL_CTRL\"\n    25.10.4 PLLs\n    -> \"Software-Controlled PLL Update\"\n\nFixes: 38867cb7ec9 (\"hw/misc/zynq_slcr: add clock generation for uarts\")\nReported-by: Gaoning Pan <pgn@zju.edu.cn>\nSigned-off-by: Philippe Mathieu-Daudé <f4bug@amsat.org>\nReviewed-by: Alistair Francis <alistair.francis@wdc.com>\nReviewed-by: Edgar E. Iglesias <edgar.iglesias@xilinx.com>\nReviewed-by: Damien Hedde <damien.hedde@greensocs.com>\nMessage-id: 20201210141610.884600-1-f4bug@amsat.org\nSigned-off-by: Peter Maydell <peter.maydell@linaro.org>",
  "pr_url": null,
  "pr_info": null,
  "file_name": "hw/misc/zynq_slcr.c",
  "func_name": "",
  "raw_func_from_json": "static uint64_t zynq_slcr_compute_pll(uint64_t input, uint32_t ctrl_reg)\n{\n    uint32_t mult = ((ctrl_reg & R_xxx_PLL_CTRL_PLL_FPDIV_MASK) >>\n            R_xxx_PLL_CTRL_PLL_FPDIV_SHIFT);\n\n    /* first, check if pll is bypassed */\n    if (ctrl_reg & R_xxx_PLL_CTRL_PLL_BYPASS_FORCE_MASK) {\n        return input;\n    }\n\n    /* is pll disabled ? */\n    if (ctrl_reg & (R_xxx_PLL_CTRL_PLL_RESET_MASK |\n                    R_xxx_PLL_CTRL_PLL_PWRDWN_MASK)) {\n        return 0;\n    }\n\n    /* frequency multiplier -> period division */\n    return input / mult;\n}",
  "diff_func": "@@ -217,6 +217,11 @@ static uint64_t zynq_slcr_compute_pll(uint64_t input, uint32_t ctrl_reg)\n         return 0;\n     }\n \n+    /* Consider zero feedback as maximum divide ratio possible */\n+    if (!mult) {\n+        mult = 1 << R_xxx_PLL_CTRL_PLL_FPDIV_LENGTH;\n+    }\n+\n     /* frequency multiplier -> period division */\n     return input / mult;\n }",
  "func": "static uint64_t zynq_slcr_compute_pll(uint64_t input, uint32_t ctrl_reg)\n{\n    uint32_t mult = ((ctrl_reg & R_xxx_PLL_CTRL_PLL_FPDIV_MASK) >>\n            R_xxx_PLL_CTRL_PLL_FPDIV_SHIFT);\n\n    /* first, check if pll is bypassed */\n    if (ctrl_reg & R_xxx_PLL_CTRL_PLL_BYPASS_FORCE_MASK) {\n        return input;\n    }\n\n    /* is pll disabled ? */\n    if (ctrl_reg & (R_xxx_PLL_CTRL_PLL_RESET_MASK |\n                    R_xxx_PLL_CTRL_PLL_PWRDWN_MASK)) {\n        return 0;\n    }\n\n    /* frequency multiplier -> period division */\n    return input / mult;\n}",
  "project": "qemu",
  "hash": 268699829089390686182525661231401074307,
  "size": 19,
  "commit_id": "98a8cc741dad9cb4738f81a994bcf8d77d619152",
  "message": "hw/misc/zynq_slcr: Avoid #DIV/0! error\n\nMalicious user can set the feedback divisor for the PLLs\nto zero, triggering a floating-point exception (SIGFPE).\n\nAs the datasheet [*] is not clear how hardware behaves\nwhen these bits are zeroes, use the maximum divisor\npossible (128) to avoid the software FPE.\n\n[*] Zynq-7000 TRM, UG585 (v1.12.2)\n    B.28 System Level Control Registers (slcr)\n    -> \"Register (slcr) ARM_PLL_CTRL\"\n    25.10.4 PLLs\n    -> \"Software-Controlled PLL Update\"\n\nFixes: 38867cb7ec9 (\"hw/misc/zynq_slcr: add clock generation for uarts\")\nReported-by: Gaoning Pan <pgn@zju.edu.cn>\nSigned-off-by: Philippe Mathieu-Daudé <f4bug@amsat.org>\nReviewed-by: Alistair Francis <alistair.francis@wdc.com>\nReviewed-by: Edgar E. Iglesias <edgar.iglesias@xilinx.com>\nReviewed-by: Damien Hedde <damien.hedde@greensocs.com>\nMessage-id: 20201210141610.884600-1-f4bug@amsat.org\nSigned-off-by: Peter Maydell <peter.maydell@linaro.org>",
  "target": 1,
  "dataset": "other",
  "idx": 198798,
  "Bug Filter": "** Security Vulnerability Fix  \n**Confidence Score:** 1.0",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "\n\nThe patch addresses a security vulnerability where a malicious user could cause a division by zero error, leading to a system crash. The fix modifies the code to prevent this exploit, ensuring system stability and security.\n\n**Final Classification:** Security Vulnerability Fix  \n**Confidence Score:** 1.0"
}