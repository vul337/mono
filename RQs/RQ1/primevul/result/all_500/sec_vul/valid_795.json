{
  "id": 795,
  "language": "c",
  "cwe": "",
  "commit_url": "https://github.com/jcomeauictx/casperscript/commit/714e8995cd582d418276915cbbec3c70711fb19e",
  "commit_sha": "714e8995cd582d418276915cbbec3c70711fb19e",
  "commit_msg": "Bug 701807: avoid buffer overflow in tiff12_print_page().\n\nFixes:\n    ./sanbin/gs -r650 -sOutputFile=tmp -sDEVICE=tiff12nc ../bug-701807.pdf",
  "pr_url": null,
  "pr_info": null,
  "file_name": "devices/gdevtfnx.c",
  "func_name": "",
  "raw_func_from_json": "tiff12_print_page(gx_device_printer * pdev, gp_file * file)\n{\n    gx_device_tiff *const tfdev = (gx_device_tiff *)pdev;\n    int code;\n\n    /* open the TIFF device */\n    if (gdev_prn_file_is_new(pdev)) {\n        tfdev->tif = tiff_from_filep(pdev, pdev->dname, file, tfdev->BigEndian, tfdev->UseBigTIFF);\n        if (!tfdev->tif)\n            return_error(gs_error_invalidfileaccess);\n    }\n\n    code = gdev_tiff_begin_page(tfdev, file);\n    if (code < 0)\n        return code;\n\n    TIFFSetField(tfdev->tif, TIFFTAG_BITSPERSAMPLE, 4);\n    tiff_set_rgb_fields(tfdev);\n\n    TIFFCheckpointDirectory(tfdev->tif);\n\n    /* Write the page data. */\n    {\n        int y;\n        int size = gdev_prn_raster(pdev);\n        byte *data = gs_alloc_bytes(pdev->memory, size, \"tiff12_print_page\");\n\n        if (data == 0)\n            return_error(gs_error_VMerror);\n\n        memset(data, 0, size);\n\n        for (y = 0; y < pdev->height; ++y) {\n            const byte *src;\n            byte *dest;\n            int x;\n\n            code = gdev_prn_copy_scan_lines(pdev, y, data, size);\n            if (code < 0)\n                break;\n\n            for (src = data, dest = data, x = 0; x < size;\n                 src += 6, dest += 3, x += 6\n                ) {\n                dest[0] = (src[0] & 0xf0) | (src[1] >> 4);\n                dest[1] = (src[2] & 0xf0) | (src[3] >> 4);\n                dest[2] = (src[4] & 0xf0) | (src[5] >> 4);\n            }\n            TIFFWriteScanline(tfdev->tif, data, y, 0);\n        }\n        gs_free_object(pdev->memory, data, \"tiff12_print_page\");\n\n        TIFFWriteDirectory(tfdev->tif);\n    }\n\n    return code;\n}",
  "diff_func": "@@ -146,12 +146,16 @@ tiff12_print_page(gx_device_printer * pdev, gp_file * file)\n     {\n         int y;\n         int size = gdev_prn_raster(pdev);\n-        byte *data = gs_alloc_bytes(pdev->memory, size, \"tiff12_print_page\");\n+\n+        /* We allocate an extra 5 bytes to avoid buffer overflow when accessing\n+        src[5] below, if size if not multiple of 6. This fixes bug-701807. */\n+        int size_alloc = size + 5;\n+        byte *data = gs_alloc_bytes(pdev->memory, size_alloc, \"tiff12_print_page\");\n \n         if (data == 0)\n             return_error(gs_error_VMerror);\n \n-        memset(data, 0, size);\n+        memset(data, 0, size_alloc);\n \n         for (y = 0; y < pdev->height; ++y) {\n             const byte *src;",
  "func": "tiff12_print_page(gx_device_printer * pdev, gp_file * file)\n{\n    gx_device_tiff *const tfdev = (gx_device_tiff *)pdev;\n    int code;\n\n    /* open the TIFF device */\n    if (gdev_prn_file_is_new(pdev)) {\n        tfdev->tif = tiff_from_filep(pdev, pdev->dname, file, tfdev->BigEndian, tfdev->UseBigTIFF);\n        if (!tfdev->tif)\n            return_error(gs_error_invalidfileaccess);\n    }\n\n    code = gdev_tiff_begin_page(tfdev, file);\n    if (code < 0)\n        return code;\n\n    TIFFSetField(tfdev->tif, TIFFTAG_BITSPERSAMPLE, 4);\n    tiff_set_rgb_fields(tfdev);\n\n    TIFFCheckpointDirectory(tfdev->tif);\n\n    /* Write the page data. */\n    {\n        int y;\n        int size = gdev_prn_raster(pdev);\n        byte *data = gs_alloc_bytes(pdev->memory, size, \"tiff12_print_page\");\n\n        if (data == 0)\n            return_error(gs_error_VMerror);\n\n        memset(data, 0, size);\n\n        for (y = 0; y < pdev->height; ++y) {\n            const byte *src;\n            byte *dest;\n            int x;\n\n            code = gdev_prn_copy_scan_lines(pdev, y, data, size);\n            if (code < 0)\n                break;\n\n            for (src = data, dest = data, x = 0; x < size;\n                 src += 6, dest += 3, x += 6\n                ) {\n                dest[0] = (src[0] & 0xf0) | (src[1] >> 4);\n                dest[1] = (src[2] & 0xf0) | (src[3] >> 4);\n                dest[2] = (src[4] & 0xf0) | (src[5] >> 4);\n            }\n            TIFFWriteScanline(tfdev->tif, data, y, 0);\n        }\n        gs_free_object(pdev->memory, data, \"tiff12_print_page\");\n\n        TIFFWriteDirectory(tfdev->tif);\n    }\n\n    return code;\n}",
  "project": "ghostpdl",
  "hash": 112158423848618498504949276444897095461,
  "size": 57,
  "commit_id": "714e8995cd582d418276915cbbec3c70711fb19e",
  "message": "Bug 701807: avoid buffer overflow in tiff12_print_page().\n\nFixes:\n    ./sanbin/gs -r650 -sOutputFile=tmp -sDEVICE=tiff12nc ../bug-701807.pdf",
  "target": 1,
  "dataset": "other",
  "idx": 206948,
  "Bug Filter": "Security Vulnerability Fix\n\nConfidence Score: 1.0",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "\n\n**Final Output:**\n\nAnalysis: Step 1: The commit message indicates a buffer overflow fix. The code changes increase the buffer size to prevent overflow, which is a security concern.\n\nStep 2: The patch addresses a buffer overflow, a security vulnerability that can lead to arbitrary code execution.\n\nStep 3: Not applicable since the patch is a security fix.\n\nStep 4: High confidence due to clear buffer overflow fix.\n\nFinal Classification: Security Vulnerability Fix\n\nConfidence Score: 1.0"
}