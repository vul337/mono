{
  "id": 703,
  "language": "c",
  "cwe": "",
  "commit_url": "https://github.com/qnx/lighttpd1.4/commit/971773f1fae600074b46ef64f3ca1f76c227985f",
  "commit_sha": "971773f1fae600074b46ef64f3ca1f76c227985f",
  "commit_msg": "[mod_wstunnel] fix crash with bad hybivers (fixes #3165)\n\n(thx Michał Dardas)\n\nx-ref:\n  \"mod_wstunnel null pointer dereference\"\n  https://redmine.lighttpd.net/issues/3165",
  "pr_url": null,
  "pr_info": null,
  "file_name": "src/mod_wstunnel.c",
  "func_name": "",
  "raw_func_from_json": "static handler_t wstunnel_handler_setup (request_st * const r, plugin_data * const p) {\n    handler_ctx *hctx = r->plugin_ctx[p->id];\n    int hybivers;\n    hctx->errh = r->conf.errh;/*(for mod_wstunnel-specific DEBUG_* macros)*/\n    hctx->conf = p->conf; /*(copies struct)*/\n    hybivers = wstunnel_check_request(r, hctx);\n    if (hybivers < 0) return HANDLER_FINISHED;\n    hctx->hybivers = hybivers;\n    if (0 == hybivers) {\n        DEBUG_LOG_INFO(\"WebSocket Version = %s\", \"hybi-00\");\n    }\n    else {\n        DEBUG_LOG_INFO(\"WebSocket Version = %d\", hybivers);\n    }\n\n    hctx->gw.opts.backend     = BACKEND_PROXY; /*(act proxy-like)*/\n    hctx->gw.opts.pdata       = hctx;\n    hctx->gw.opts.parse       = wstunnel_recv_parse;\n    hctx->gw.stdin_append     = wstunnel_stdin_append;\n    hctx->gw.create_env       = wstunnel_create_env;\n    hctx->gw.handler_ctx_free = wstunnel_handler_ctx_free;\n    hctx->gw.backend_error    = wstunnel_backend_error;\n    hctx->gw.response         = chunk_buffer_acquire();\n\n    hctx->frame.state         = MOD_WEBSOCKET_FRAME_STATE_INIT;\n    hctx->frame.ctl.siz       = 0;\n    hctx->frame.payload       = chunk_buffer_acquire();\n\n    unsigned int binary = hctx->conf.frame_type; /*(0 = \"text\"; 1 = \"binary\")*/\n    if (!binary) {\n        const buffer *vb =\n          http_header_request_get(r, HTTP_HEADER_OTHER, CONST_STR_LEN(\"Sec-WebSocket-Protocol\"));\n        if (NULL != vb) {\n            for (const char *s = vb->ptr; *s; ++s) {\n                while (*s==' '||*s=='\\t'||*s=='\\r'||*s=='\\n') ++s;\n                if (buffer_eq_icase_ssn(s, CONST_STR_LEN(\"binary\"))) {\n                    s += sizeof(\"binary\")-1;\n                    while (*s==' '||*s=='\\t'||*s=='\\r'||*s=='\\n') ++s;\n                    if (*s==','||*s=='\\0') {\n                        hctx->subproto = 1;\n                        binary = 1;\n                        break;\n                    }\n                }\n                else if (buffer_eq_icase_ssn(s, CONST_STR_LEN(\"base64\"))) {\n                    s += sizeof(\"base64\")-1;\n                    while (*s==' '||*s=='\\t'||*s=='\\r'||*s=='\\n') ++s;\n                    if (*s==','||*s=='\\0') {\n                        hctx->subproto = -1;\n                        break;\n                    }\n                }\n                s = strchr(s, ',');\n                if (NULL == s) break;\n            }\n        }\n    }\n\n    if (binary) {\n        DEBUG_LOG_INFO(\"%s\", \"will recv binary data from backend\");\n        hctx->frame.type         = MOD_WEBSOCKET_FRAME_TYPE_BIN;\n        hctx->frame.type_before  = MOD_WEBSOCKET_FRAME_TYPE_BIN;\n        hctx->frame.type_backend = MOD_WEBSOCKET_FRAME_TYPE_BIN;\n    }\n    else {\n        DEBUG_LOG_INFO(\"%s\", \"will recv text data from backend\");\n        hctx->frame.type         = MOD_WEBSOCKET_FRAME_TYPE_TEXT;\n        hctx->frame.type_before  = MOD_WEBSOCKET_FRAME_TYPE_TEXT;\n        hctx->frame.type_backend = MOD_WEBSOCKET_FRAME_TYPE_TEXT;\n    }\n\n    return HANDLER_GO_ON;\n}",
  "diff_func": "@@ -485,7 +485,10 @@ static handler_t wstunnel_handler_setup (request_st * const r, plugin_data * con\n     hctx->errh = r->conf.errh;/*(for mod_wstunnel-specific DEBUG_* macros)*/\n     hctx->conf = p->conf; /*(copies struct)*/\n     hybivers = wstunnel_check_request(r, hctx);\n-    if (hybivers < 0) return HANDLER_FINISHED;\n+    if (hybivers < 0) {\n+        r->handler_module = NULL;\n+        return HANDLER_FINISHED;\n+    }\n     hctx->hybivers = hybivers;\n     if (0 == hybivers) {\n         DEBUG_LOG_INFO(\"WebSocket Version = %s\", \"hybi-00\");",
  "func": "static handler_t wstunnel_handler_setup (request_st * const r, plugin_data * const p) {\n    handler_ctx *hctx = r->plugin_ctx[p->id];\n    int hybivers;\n    hctx->errh = r->conf.errh;/*(for mod_wstunnel-specific DEBUG_* macros)*/\n    hctx->conf = p->conf; /*(copies struct)*/\n    hybivers = wstunnel_check_request(r, hctx);\n    if (hybivers < 0) return HANDLER_FINISHED;\n    hctx->hybivers = hybivers;\n    if (0 == hybivers) {\n        DEBUG_LOG_INFO(\"WebSocket Version = %s\", \"hybi-00\");\n    }\n    else {\n        DEBUG_LOG_INFO(\"WebSocket Version = %d\", hybivers);\n    }\n\n    hctx->gw.opts.backend     = BACKEND_PROXY; /*(act proxy-like)*/\n    hctx->gw.opts.pdata       = hctx;\n    hctx->gw.opts.parse       = wstunnel_recv_parse;\n    hctx->gw.stdin_append     = wstunnel_stdin_append;\n    hctx->gw.create_env       = wstunnel_create_env;\n    hctx->gw.handler_ctx_free = wstunnel_handler_ctx_free;\n    hctx->gw.backend_error    = wstunnel_backend_error;\n    hctx->gw.response         = chunk_buffer_acquire();\n\n    hctx->frame.state         = MOD_WEBSOCKET_FRAME_STATE_INIT;\n    hctx->frame.ctl.siz       = 0;\n    hctx->frame.payload       = chunk_buffer_acquire();\n\n    unsigned int binary = hctx->conf.frame_type; /*(0 = \"text\"; 1 = \"binary\")*/\n    if (!binary) {\n        const buffer *vb =\n          http_header_request_get(r, HTTP_HEADER_OTHER, CONST_STR_LEN(\"Sec-WebSocket-Protocol\"));\n        if (NULL != vb) {\n            for (const char *s = vb->ptr; *s; ++s) {\n                while (*s==' '||*s=='\\t'||*s=='\\r'||*s=='\\n') ++s;\n                if (buffer_eq_icase_ssn(s, CONST_STR_LEN(\"binary\"))) {\n                    s += sizeof(\"binary\")-1;\n                    while (*s==' '||*s=='\\t'||*s=='\\r'||*s=='\\n') ++s;\n                    if (*s==','||*s=='\\0') {\n                        hctx->subproto = 1;\n                        binary = 1;\n                        break;\n                    }\n                }\n                else if (buffer_eq_icase_ssn(s, CONST_STR_LEN(\"base64\"))) {\n                    s += sizeof(\"base64\")-1;\n                    while (*s==' '||*s=='\\t'||*s=='\\r'||*s=='\\n') ++s;\n                    if (*s==','||*s=='\\0') {\n                        hctx->subproto = -1;\n                        break;\n                    }\n                }\n                s = strchr(s, ',');\n                if (NULL == s) break;\n            }\n        }\n    }\n\n    if (binary) {\n        DEBUG_LOG_INFO(\"%s\", \"will recv binary data from backend\");\n        hctx->frame.type         = MOD_WEBSOCKET_FRAME_TYPE_BIN;\n        hctx->frame.type_before  = MOD_WEBSOCKET_FRAME_TYPE_BIN;\n        hctx->frame.type_backend = MOD_WEBSOCKET_FRAME_TYPE_BIN;\n    }\n    else {\n        DEBUG_LOG_INFO(\"%s\", \"will recv text data from backend\");\n        hctx->frame.type         = MOD_WEBSOCKET_FRAME_TYPE_TEXT;\n        hctx->frame.type_before  = MOD_WEBSOCKET_FRAME_TYPE_TEXT;\n        hctx->frame.type_backend = MOD_WEBSOCKET_FRAME_TYPE_TEXT;\n    }\n\n    return HANDLER_GO_ON;\n}",
  "project": "lighttpd1.4",
  "hash": 109983880448084962630397912027710757424,
  "size": 73,
  "commit_id": "971773f1fae600074b46ef64f3ca1f76c227985f",
  "message": "[mod_wstunnel] fix crash with bad hybivers (fixes #3165)\n\n(thx Michał Dardas)\n\nx-ref:\n  \"mod_wstunnel null pointer dereference\"\n  https://redmine.lighttpd.net/issues/3165",
  "target": 1,
  "dataset": "other",
  "idx": 197373,
  "Bug Filter": "Security Vulnerability Fix  \nConfidence Score: 0.95",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "\n\n**Final Output:**\n\nAnalysis: The patch addresses a null pointer dereference in the `mod_wstunnel` module, which could lead to a crash when handling bad hybivers. This is a security vulnerability as it could allow DoS attacks. The code change sets `r->handler_module` to NULL before returning, preventing the crash.\n\nFinal Classification: Security Vulnerability Fix  \nConfidence Score: 0.95"
}