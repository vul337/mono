{
  "id": 783,
  "language": "c",
  "cwe": "CWE-416",
  "commit_url": "https://github.com/ljalves/linux_media/commit/6934da9238da947628be83635e365df41064b09b",
  "commit_sha": "6934da9238da947628be83635e365df41064b09b",
  "commit_msg": "ext4: fix potential use after free in __ext4_journal_stop\n\nThere is a use-after-free possibility in __ext4_journal_stop() in the\ncase that we free the handle in the first jbd2_journal_stop() because\nwe're referencing handle->h_err afterwards. This was introduced in\n9705acd63b125dee8b15c705216d7186daea4625 and it is wrong. Fix it by\nstoring the handle->h_err value beforehand and avoid referencing\npotentially freed handle.\n\nFixes: 9705acd63b125dee8b15c705216d7186daea4625\nSigned-off-by: Lukas Czerner <lczerner@redhat.com>\nReviewed-by: Andreas Dilger <adilger@dilger.ca>\nCc: stable@vger.kernel.org",
  "pr_url": null,
  "pr_info": null,
  "file_name": "fs/ext4/ext4_jbd2.c",
  "func_name": "",
  "raw_func_from_json": "int __ext4_journal_stop(const char *where, unsigned int line, handle_t *handle)\n{\n\tstruct super_block *sb;\n\tint err;\n\tint rc;\n\n\tif (!ext4_handle_valid(handle)) {\n\t\text4_put_nojournal(handle);\n \t\treturn 0;\n \t}\n \n \tif (!handle->h_transaction) {\n\t\terr = jbd2_journal_stop(handle);\n\t\treturn handle->h_err ? handle->h_err : err;\n \t}\n \n \tsb = handle->h_transaction->t_journal->j_private;\n\terr = handle->h_err;\n \trc = jbd2_journal_stop(handle);\n \n \tif (!err)\n\t\terr = rc;\n\tif (err)\n\t\t__ext4_std_error(sb, where, line, err);\n\treturn err;\n}\n",
  "diff_func": "@@ -88,13 +88,13 @@ int __ext4_journal_stop(const char *where, unsigned int line, handle_t *handle)\n \t\treturn 0;\n \t}\n \n+\terr = handle->h_err;\n \tif (!handle->h_transaction) {\n-\t\terr = jbd2_journal_stop(handle);\n-\t\treturn handle->h_err ? handle->h_err : err;\n+\t\trc = jbd2_journal_stop(handle);\n+\t\treturn err ? err : rc;\n \t}\n \n \tsb = handle->h_transaction->t_journal->j_private;\n-\terr = handle->h_err;\n \trc = jbd2_journal_stop(handle);\n \n \tif (!err)",
  "project": "linux",
  "commit_id": "6934da9238da947628be83635e365df41064b09b",
  "target": 1,
  "func": "int __ext4_journal_stop(const char *where, unsigned int line, handle_t *handle)\n{\n\tstruct super_block *sb;\n\tint err;\n\tint rc;\n\n\tif (!ext4_handle_valid(handle)) {\n\t\text4_put_nojournal(handle);\n \t\treturn 0;\n \t}\n \n \tif (!handle->h_transaction) {\n\t\terr = jbd2_journal_stop(handle);\n\t\treturn handle->h_err ? handle->h_err : err;\n \t}\n \n \tsb = handle->h_transaction->t_journal->j_private;\n\terr = handle->h_err;\n \trc = jbd2_journal_stop(handle);\n \n \tif (!err)\n\t\terr = rc;\n\tif (err)\n\t\t__ext4_std_error(sb, where, line, err);\n\treturn err;\n}\n",
  "big_vul_idx": 180637,
  "idx": 2210,
  "hash": 309442467316867237536488402096607742972,
  "Bug Filter": "Security Vulnerability Fix  \nConfidence Score: 1.0",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "\n\n**Final Output:**\n\nAnalysis: The patch addresses a use-after-free vulnerability in the ext4 journaling system. The code change stores the error value before potentially freeing the handle, preventing an exploit that could lead to system instability or code execution.\n\nFinal Classification: Security Vulnerability Fix  \nConfidence Score: 1.0"
}