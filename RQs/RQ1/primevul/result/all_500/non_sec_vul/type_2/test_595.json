{
  "id": 595,
  "language": "cc",
  "cwe": "",
  "commit_url": "https://github.com/NAKulikov/scylladb/commit/1c2eef384da439b0457b6d71c7e37d7268e471cb",
  "commit_sha": "1c2eef384da439b0457b6d71c7e37d7268e471cb",
  "commit_msg": "transport/server.cc: Return correct size of decompressed lz4 buffer\n\nAn incorrect size is returned from the function, which could lead to\ncrashes or undefined behavior. Fix by erroring out in these cases.\n\nFixes #11476",
  "pr_url": null,
  "pr_info": null,
  "file_name": "transport/server.cc",
  "func_name": "",
  "raw_func_from_json": "future<fragmented_temporary_buffer> cql_server::connection::read_and_decompress_frame(size_t length, uint8_t flags)\n{\n    using namespace compression_buffers;\n    if (flags & cql_frame_flags::compression) {\n        if (_compression == cql_compression::lz4) {\n            if (length < 4) {\n                throw std::runtime_error(fmt::format(\"CQL frame truncated: expected to have at least 4 bytes, got {}\", length));\n            }\n            return _buffer_reader.read_exactly(_read_buf, length).then([this] (fragmented_temporary_buffer buf) {\n                auto linearization_buffer = bytes_ostream();\n                int32_t uncomp_len = request_reader(buf.get_istream(), linearization_buffer).read_int();\n                if (uncomp_len < 0) {\n                    throw std::runtime_error(\"CQL frame uncompressed length is negative: \" + std::to_string(uncomp_len));\n                }\n                buf.remove_prefix(4);\n                auto in = input_buffer.get_linearized_view(fragmented_temporary_buffer::view(buf));\n                auto uncomp = output_buffer.make_fragmented_temporary_buffer(uncomp_len, fragmented_temporary_buffer::default_fragment_size, [&] (bytes_mutable_view out) {\n                    auto ret = LZ4_decompress_safe(reinterpret_cast<const char*>(in.data()), reinterpret_cast<char*>(out.data()),\n                                                   in.size(), out.size());\n                    if (ret < 0) {\n                        throw std::runtime_error(\"CQL frame LZ4 uncompression failure\");\n                    }\n                    return out.size();\n                });\n                on_compression_buffer_use();\n                return uncomp;\n            });\n        } else if (_compression == cql_compression::snappy) {\n            return _buffer_reader.read_exactly(_read_buf, length).then([this] (fragmented_temporary_buffer buf) {\n                auto in = input_buffer.get_linearized_view(fragmented_temporary_buffer::view(buf));\n                size_t uncomp_len;\n                if (snappy_uncompressed_length(reinterpret_cast<const char*>(in.data()), in.size(), &uncomp_len) != SNAPPY_OK) {\n                    throw std::runtime_error(\"CQL frame Snappy uncompressed size is unknown\");\n                }\n                auto uncomp = output_buffer.make_fragmented_temporary_buffer(uncomp_len, fragmented_temporary_buffer::default_fragment_size, [&] (bytes_mutable_view out) {\n                    size_t output_len = out.size();\n                    if (snappy_uncompress(reinterpret_cast<const char*>(in.data()), in.size(), reinterpret_cast<char*>(out.data()), &output_len) != SNAPPY_OK) {\n                        throw std::runtime_error(\"CQL frame Snappy uncompression failure\");\n                    }\n                    return output_len;\n                });\n                on_compression_buffer_use();\n                return uncomp;\n            });\n        } else {\n            throw exceptions::protocol_exception(format(\"Unknown compression algorithm\"));\n        }\n    }\n    return _buffer_reader.read_exactly(_read_buf, length);\n}",
  "diff_func": "@@ -727,7 +727,10 @@ future<fragmented_temporary_buffer> cql_server::connection::read_and_decompress_\n                     if (ret < 0) {\n                         throw std::runtime_error(\"CQL frame LZ4 uncompression failure\");\n                     }\n-                    return out.size();\n+                    if (ret != out.size()) {\n+                        throw std::runtime_error(\"Malformed CQL frame - provided uncompressed size different than real uncompressed size\");\n+                    }\n+                    return static_cast<size_t>(ret);\n                 });\n                 on_compression_buffer_use();\n                 return uncomp;",
  "func": "future<fragmented_temporary_buffer> cql_server::connection::read_and_decompress_frame(size_t length, uint8_t flags)\n{\n    using namespace compression_buffers;\n    if (flags & cql_frame_flags::compression) {\n        if (_compression == cql_compression::lz4) {\n            if (length < 4) {\n                throw std::runtime_error(fmt::format(\"CQL frame truncated: expected to have at least 4 bytes, got {}\", length));\n            }\n            return _buffer_reader.read_exactly(_read_buf, length).then([this] (fragmented_temporary_buffer buf) {\n                auto linearization_buffer = bytes_ostream();\n                int32_t uncomp_len = request_reader(buf.get_istream(), linearization_buffer).read_int();\n                if (uncomp_len < 0) {\n                    throw std::runtime_error(\"CQL frame uncompressed length is negative: \" + std::to_string(uncomp_len));\n                }\n                buf.remove_prefix(4);\n                auto in = input_buffer.get_linearized_view(fragmented_temporary_buffer::view(buf));\n                auto uncomp = output_buffer.make_fragmented_temporary_buffer(uncomp_len, fragmented_temporary_buffer::default_fragment_size, [&] (bytes_mutable_view out) {\n                    auto ret = LZ4_decompress_safe(reinterpret_cast<const char*>(in.data()), reinterpret_cast<char*>(out.data()),\n                                                   in.size(), out.size());\n                    if (ret < 0) {\n                        throw std::runtime_error(\"CQL frame LZ4 uncompression failure\");\n                    }\n                    return out.size();\n                });\n                on_compression_buffer_use();\n                return uncomp;\n            });\n        } else if (_compression == cql_compression::snappy) {\n            return _buffer_reader.read_exactly(_read_buf, length).then([this] (fragmented_temporary_buffer buf) {\n                auto in = input_buffer.get_linearized_view(fragmented_temporary_buffer::view(buf));\n                size_t uncomp_len;\n                if (snappy_uncompressed_length(reinterpret_cast<const char*>(in.data()), in.size(), &uncomp_len) != SNAPPY_OK) {\n                    throw std::runtime_error(\"CQL frame Snappy uncompressed size is unknown\");\n                }\n                auto uncomp = output_buffer.make_fragmented_temporary_buffer(uncomp_len, fragmented_temporary_buffer::default_fragment_size, [&] (bytes_mutable_view out) {\n                    size_t output_len = out.size();\n                    if (snappy_uncompress(reinterpret_cast<const char*>(in.data()), in.size(), reinterpret_cast<char*>(out.data()), &output_len) != SNAPPY_OK) {\n                        throw std::runtime_error(\"CQL frame Snappy uncompression failure\");\n                    }\n                    return output_len;\n                });\n                on_compression_buffer_use();\n                return uncomp;\n            });\n        } else {\n            throw exceptions::protocol_exception(format(\"Unknown compression algorithm\"));\n        }\n    }\n    return _buffer_reader.read_exactly(_read_buf, length);\n}",
  "project": "scylladb",
  "hash": 259153815550716489753062819304574368086,
  "size": 50,
  "commit_id": "1c2eef384da439b0457b6d71c7e37d7268e471cb",
  "message": "transport/server.cc: Return correct size of decompressed lz4 buffer\n\nAn incorrect size is returned from the function, which could lead to\ncrashes or undefined behavior. Fix by erroring out in these cases.\n\nFixes #11476",
  "target": 1,
  "dataset": "other",
  "idx": 195628,
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "\n\n**Final Output:**\n\nAnalysis: The patch addresses a bug where an incorrect size was returned, leading to potential crashes. The fix adds a check to ensure the size is correct, preventing undefined behavior. While crashes can be security issues, this fix is primarily a functional correction.\n\nFinal Classification: Defect Remediation & Feature Upgrades  \nConfidence Score: 0.95"
}