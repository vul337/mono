{
  "id": 999,
  "language": "c",
  "cwe": "",
  "commit_url": "https://github.com/redgecombe/linux/commit/eca94432934fe5f141d084f2e36ee2c0e614cc04",
  "commit_sha": "eca94432934fe5f141d084f2e36ee2c0e614cc04",
  "commit_msg": "Bluetooth: Fix faulty expression for minimum encryption key size check\n\nFix minimum encryption key size check so that HCI_MIN_ENC_KEY_SIZE is\nalso allowed as stated in the comment.\n\nThis bug caused connection problems with devices having maximum\nencryption key size of 7 octets (56-bit).\n\nFixes: 693cd8ce3f88 (\"Bluetooth: Fix regression with minimum encryption key size alignment\")\nBugzilla: https://bugzilla.kernel.org/show_bug.cgi?id=203997\nSigned-off-by: Matias Karhumaa <matias.karhumaa@gmail.com>\nCc: stable@vger.kernel.org\nSigned-off-by: Marcel Holtmann <marcel@holtmann.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
  "pr_url": null,
  "pr_info": null,
  "file_name": "net/bluetooth/l2cap_core.c",
  "func_name": "",
  "raw_func_from_json": "static bool l2cap_check_enc_key_size(struct hci_conn *hcon)\n{\n\t/* The minimum encryption key size needs to be enforced by the\n\t * host stack before establishing any L2CAP connections. The\n\t * specification in theory allows a minimum of 1, but to align\n\t * BR/EDR and LE transports, a minimum of 7 is chosen.\n\t *\n\t * This check might also be called for unencrypted connections\n\t * that have no key size requirements. Ensure that the link is\n\t * actually encrypted before enforcing a key size.\n\t */\n\treturn (!test_bit(HCI_CONN_ENCRYPT, &hcon->flags) ||\n\t\thcon->enc_key_size > HCI_MIN_ENC_KEY_SIZE);\n}",
  "diff_func": "@@ -1353,7 +1353,7 @@ static bool l2cap_check_enc_key_size(struct hci_conn *hcon)\n \t * actually encrypted before enforcing a key size.\n \t */\n \treturn (!test_bit(HCI_CONN_ENCRYPT, &hcon->flags) ||\n-\t\thcon->enc_key_size > HCI_MIN_ENC_KEY_SIZE);\n+\t\thcon->enc_key_size >= HCI_MIN_ENC_KEY_SIZE);\n }\n \n static void l2cap_do_start(struct l2cap_chan *chan)",
  "func": "static bool l2cap_check_enc_key_size(struct hci_conn *hcon)\n{\n\t/* The minimum encryption key size needs to be enforced by the\n\t * host stack before establishing any L2CAP connections. The\n\t * specification in theory allows a minimum of 1, but to align\n\t * BR/EDR and LE transports, a minimum of 7 is chosen.\n\t *\n\t * This check might also be called for unencrypted connections\n\t * that have no key size requirements. Ensure that the link is\n\t * actually encrypted before enforcing a key size.\n\t */\n\treturn (!test_bit(HCI_CONN_ENCRYPT, &hcon->flags) ||\n\t\thcon->enc_key_size > HCI_MIN_ENC_KEY_SIZE);\n}",
  "project": "linux",
  "hash": 212269271340075918698506153323878239453,
  "size": 14,
  "commit_id": "eca94432934fe5f141d084f2e36ee2c0e614cc04",
  "message": "Bluetooth: Fix faulty expression for minimum encryption key size check\n\nFix minimum encryption key size check so that HCI_MIN_ENC_KEY_SIZE is\nalso allowed as stated in the comment.\n\nThis bug caused connection problems with devices having maximum\nencryption key size of 7 octets (56-bit).\n\nFixes: 693cd8ce3f88 (\"Bluetooth: Fix regression with minimum encryption key size alignment\")\nBugzilla: https://bugzilla.kernel.org/show_bug.cgi?id=203997\nSigned-off-by: Matias Karhumaa <matias.karhumaa@gmail.com>\nCc: stable@vger.kernel.org\nSigned-off-by: Marcel Holtmann <marcel@holtmann.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
  "target": 1,
  "dataset": "other",
  "idx": 214365,
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "\n\nThe patch addresses a bug in the Bluetooth encryption key size check, correcting a strict condition to allow a minimum key size. This fix ensures proper functionality with certain devices but doesn't resolve a security vulnerability.\n\n**Final Classification:** Defect Remediation & Feature Upgrades  \n**Confidence Score:** 0.9"
}