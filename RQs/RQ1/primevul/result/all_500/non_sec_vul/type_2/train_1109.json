{
  "id": 1109,
  "language": "c",
  "cwe": "CWE-125",
  "commit_url": "https://github.com/palmerc/libplist/commit/3a55ddd3c4c11ce75a86afbefd085d8d397ff957",
  "commit_sha": "3a55ddd3c4c11ce75a86afbefd085d8d397ff957",
  "commit_msg": "base64: Rework base64decode to handle split encoded data correctly",
  "pr_url": null,
  "pr_info": null,
  "file_name": "src/base64.c",
  "func_name": "",
  "raw_func_from_json": " unsigned char *base64decode(const char *buf, size_t *size)\n {\n \tif (!buf || !size) return NULL;\n\tsize_t len = (*size > 0) ? *size : strlen(buf);\n\tif (len <= 0) return NULL;\n \tunsigned char *outbuf = (unsigned char*)malloc((len/4)*3+3);\n \tconst char *ptr = buf;\n \tint p = 0;\n\tsize_t l = 0;\n \n \tdo {\n\t\tptr += strspn(ptr, \"\\r\\n\\t \");\n \t\tif (*ptr == '\\0' || ptr >= buf+len) {\n \t\t\tbreak;\n \t\t}\n\t\tl = strcspn(ptr, \"\\r\\n\\t \");\n\t\tif (l > 3 && ptr+l <= buf+len) {\n\t\t\tp+=base64decode_block(outbuf+p, ptr, l);\n\t\t\tptr += l;\n\t\t} else {\n\t\t\tbreak;\n \t\t}\n \t} while (1);\n \n\toutbuf[p] = 0;\n\t*size = p;\n\treturn outbuf;\n}\n",
  "diff_func": "@@ -28,7 +28,7 @@ static const signed char base64_table[256] = {\n \t-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n \t-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n \t-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, 63,\n-\t52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -1, -1, -1,\n+\t52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -2, -1, -1,\n \t-1,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14,\n \t15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1,\n \t-1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n@@ -71,38 +71,6 @@ size_t base64encode(char *outbuf, const unsigned char *buf, size_t size)\n \treturn m;\n }\n \n-static int base64decode_block(unsigned char *target, const char *data, size_t data_size)\n-{\n-\tint w1,w2,w3,w4;\n-\tint i;\n-\tsize_t n;\n-\n-\tif (!data || (data_size <= 0)) {\n-\t\treturn 0;\n-\t}\n-\n-\tn = 0;\n-\ti = 0;\n-\twhile (n < data_size-3) {\n-\t\tw1 = base64_table[(int)data[n]];\n-\t\tw2 = base64_table[(int)data[n+1]];\n-\t\tw3 = base64_table[(int)data[n+2]];\n-\t\tw4 = base64_table[(int)data[n+3]];\n-\n-\t\tif (w2 >= 0) {\n-\t\t\ttarget[i++] = (char)((w1*4 + (w2 >> 4)) & 255);\n-\t\t}\n-\t\tif (w3 >= 0) {\n-\t\t\ttarget[i++] = (char)((w2*16 + (w3 >> 2)) & 255);\n-\t\t}\n-\t\tif (w4 >= 0) {\n-\t\t\ttarget[i++] = (char)((w3*64 + w4) & 255);\n-\t\t}\n-\t\tn+=4;\n-\t}\n-\treturn i;\n-}\n-\n unsigned char *base64decode(const char *buf, size_t *size)\n {\n \tif (!buf || !size) return NULL;\n@@ -111,19 +79,37 @@ unsigned char *base64decode(const char *buf, size_t *size)\n \tunsigned char *outbuf = (unsigned char*)malloc((len/4)*3+3);\n \tconst char *ptr = buf;\n \tint p = 0;\n-\tsize_t l = 0;\n+\tint wv, w1, w2, w3, w4;\n+\tint tmpval[4];\n+\tint tmpcnt = 0;\n \n \tdo {\n-\t\tptr += strspn(ptr, \"\\r\\n\\t \");\n+\t\twhile (ptr < buf+len && (*ptr == ' ' || *ptr == '\\t' || *ptr == '\\n' || *ptr == '\\r')) {\n+\t\t\tptr++;\n+\t\t}\n \t\tif (*ptr == '\\0' || ptr >= buf+len) {\n \t\t\tbreak;\n \t\t}\n-\t\tl = strcspn(ptr, \"\\r\\n\\t \");\n-\t\tif (l > 3 && ptr+l <= buf+len) {\n-\t\t\tp+=base64decode_block(outbuf+p, ptr, l);\n-\t\t\tptr += l;\n-\t\t} else {\n-\t\t\tbreak;\n+\t\tif ((wv = base64_table[(int)(unsigned char)*ptr++]) == -1) {\n+\t\t\tcontinue;\n+\t\t}\n+\t\ttmpval[tmpcnt++] = wv;\n+\t\tif (tmpcnt == 4) {\n+\t\t\ttmpcnt = 0;\n+\t\t\tw1 = tmpval[0];\n+\t\t\tw2 = tmpval[1];\n+\t\t\tw3 = tmpval[2];\n+\t\t\tw4 = tmpval[3];\n+\n+\t\t\tif (w2 >= 0) {\n+\t\t\t\toutbuf[p++] = (unsigned char)(((w1 << 2) + (w2 >> 4)) & 0xFF);\n+\t\t\t}\n+\t\t\tif (w3 >= 0) {\n+\t\t\t\toutbuf[p++] = (unsigned char)(((w2 << 4) + (w3 >> 2)) & 0xFF);\n+\t\t\t}\n+\t\t\tif (w4 >= 0) {\n+\t\t\t\toutbuf[p++] = (unsigned char)(((w3 << 6) + w4) & 0xFF);\n+\t\t\t}\n \t\t}\n \t} while (1);\n ",
  "project": "libplist",
  "commit_id": "3a55ddd3c4c11ce75a86afbefd085d8d397ff957",
  "target": 1,
  "func": " unsigned char *base64decode(const char *buf, size_t *size)\n {\n \tif (!buf || !size) return NULL;\n\tsize_t len = (*size > 0) ? *size : strlen(buf);\n\tif (len <= 0) return NULL;\n \tunsigned char *outbuf = (unsigned char*)malloc((len/4)*3+3);\n \tconst char *ptr = buf;\n \tint p = 0;\n\tsize_t l = 0;\n \n \tdo {\n\t\tptr += strspn(ptr, \"\\r\\n\\t \");\n \t\tif (*ptr == '\\0' || ptr >= buf+len) {\n \t\t\tbreak;\n \t\t}\n\t\tl = strcspn(ptr, \"\\r\\n\\t \");\n\t\tif (l > 3 && ptr+l <= buf+len) {\n\t\t\tp+=base64decode_block(outbuf+p, ptr, l);\n\t\t\tptr += l;\n\t\t} else {\n\t\t\tbreak;\n \t\t}\n \t} while (1);\n \n\toutbuf[p] = 0;\n\t*size = p;\n\treturn outbuf;\n}\n",
  "big_vul_idx": 181588,
  "idx": 3024,
  "hash": 127181077677972858761690595916447604864,
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "\n\nThe patch modifies the base64 decoding function to correctly handle split encoded data, addressing a functional bug rather than a security issue.\n\n**Final Output:**\n\nAnalysis: The patch updates the base64decode function to handle split encoded data, fixing a bug that caused incorrect decoding. This is a functional improvement without security implications.\n\nFinal Classification: Defect Remediation & Feature Upgrades\n\nConfidence Score: 0.9"
}