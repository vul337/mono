{
    "cve_id": "CVE-2023-24805",
    "cwe_ids": [
        "CWE-78"
    ],
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
    "cvss_is_v3": true,
    "repo_name": "OpenPrinting/cups-filters",
    "commit_msg": "Merge pull request from GHSA-gpxc-v2m8-fr3x\n\n* beh backend: Use execv() instead of system() - CVE-2023-24805\n\nWith execv() command line arguments are passed as separate strings and\nnot the full command line in a single string. This prevents arbitrary\ncommand execution by escaping the quoting of the arguments in a job\nwith forged job title.\n\n* beh backend: Extra checks against odd/forged input - CVE-2023-24805\n\n- Do not allow '/' in the scheme of the URI (= backend executable\n  name), to assure that only backends inside /usr/lib/cups/backend/\n  are used.\n\n- Pre-define scheme buffer to empty string, to be defined for case of\n  uri being NULL.\n\n- URI must have ':', to split off scheme, otherwise error.\n\n- Check return value of snprintf() to create call path for backend, to\n  error out on truncation of a too long scheme or on complete failure\n  due to a completely odd scheme.\n\n* beh backend: Further improvements - CVE-2023-24805\n\n- Use strncat() instead of strncpy() for getting scheme from URI, the latter\n  does not require setting terminating zero byte in case of truncation.\n\n- Also exclude \".\" or \"..\" as scheme, as directories are not valid CUPS\n  backends.\n\n- Do not use fprintf() in sigterm_handler(), to not interfere with a\n  fprintf() which could be running in the main process when\n  sigterm_handler() is triggered.\n\n- Use \"static volatile int\" for global variable job_canceled.",
    "commit_hash": "8f274035756c04efeb77eb654e9d4c4447287d65",
    "git_url": "https://github.com/OpenPrinting/cups-filters/commit/8f274035756c04efeb77eb654e9d4c4447287d65",
    "file_path": "backend/beh.c",
    "func_name": "sigterm_handler",
    "func_before": "static void\nsigterm_handler(int sig)\t\t// I - Signal number (unused)\n{\n  (void)sig;\n\n  fprintf(stderr,\n\t  \"DEBUG: beh: Job canceled.\\n\");\n\n  if (job_canceled)\n    _exit(CUPS_BACKEND_OK);\n  else\n    job_canceled = 1;\n}",
    "abstract_func_before": "static void\nsigterm_handler(int VAR_0)\t\t/* COMMENT_0 */\n{\n  (void)VAR_0;\n\n  fprintf(VAR_1,\n\t  \"DEBUG: beh: Job canceled.\\n\");\n\n  if (VAR_2)\n    _exit(VAR_3);\n  else\n    VAR_2 = 1;\n}",
    "func_graph_path_before": "OpenPrinting/cups-filters/8f274035756c04efeb77eb654e9d4c4447287d65/beh.c/vul/before/0.json",
    "func": "static void\nsigterm_handler(int sig)\t\t// I - Signal number (unused)\n{\n  (void)sig;\n\n  const char * const msg = \"DEBUG: beh: Job canceled.\\n\";\n  // The if() is to eliminate the return value and silence the warning\n  // about an unused return value.\n  if (write(2, msg, strlen(msg)));\n\n  if (job_canceled)\n    _exit(CUPS_BACKEND_OK);\n  else\n    job_canceled = 1;\n}",
    "abstract_func": "static void\nsigterm_handler(int VAR_0)\t\t/* COMMENT_0 */\n{\n  (void)VAR_0;\n\n  const char * const VAR_1 = \"DEBUG: beh: Job canceled.\\n\";\n  /* COMMENT_1 */\n  /* COMMENT_2 */\n  if (write(2, VAR_1, strlen(VAR_1)));\n\n  if (VAR_2)\n    _exit(VAR_3);\n  else\n    VAR_2 = 1;\n}",
    "func_graph_path": "OpenPrinting/cups-filters/8f274035756c04efeb77eb654e9d4c4447287d65/beh.c/vul/after/0.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -3,8 +3,10 @@\n {\n   (void)sig;\n \n-  fprintf(stderr,\n-\t  \"DEBUG: beh: Job canceled.\\n\");\n+  const char * const msg = \"DEBUG: beh: Job canceled.\\n\";\n+  // The if() is to eliminate the return value and silence the warning\n+  // about an unused return value.\n+  if (write(2, msg, strlen(msg)));\n \n   if (job_canceled)\n     _exit(CUPS_BACKEND_OK);",
    "diff_line_info": {
        "deleted_lines": [
            "  fprintf(stderr,",
            "\t  \"DEBUG: beh: Job canceled.\\n\");"
        ],
        "added_lines": [
            "  const char * const msg = \"DEBUG: beh: Job canceled.\\n\";",
            "  // The if() is to eliminate the return value and silence the warning",
            "  // about an unused return value.",
            "  if (write(2, msg, strlen(msg)));"
        ]
    },
    "is_vul": true,
    "pr_url": null,
    "description": "no more info"
}