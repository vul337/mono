{
    "cve_id": "CVE-2023-3863",
    "cwe_ids": [
        "CWE-416"
    ],
    "cvss_vector": "CVSS:3.1/AV:L/AC:H/PR:H/UI:N/S:U/C:H/I:N/A:N",
    "cvss_is_v3": true,
    "repo_name": "torvalds/linux",
    "commit_msg": "net: nfc: Fix use-after-free caused by nfc_llcp_find_local\n\nThis commit fixes several use-after-free that caused by function\nnfc_llcp_find_local(). For example, one UAF can happen when below buggy\ntime window occurs.\n\n// nfc_genl_llc_get_params   | // nfc_unregister_device\n                             |\ndev = nfc_get_device(idx);   | device_lock(...)\nif (!dev)                    | dev->shutting_down = true;\n    return -ENODEV;          | device_unlock(...);\n                             |\ndevice_lock(...);            |   // nfc_llcp_unregister_device\n                             |   nfc_llcp_find_local()\nnfc_llcp_find_local(...);    |\n                             |   local_cleanup()\nif (!local) {                |\n    rc = -ENODEV;            |     // nfc_llcp_local_put\n    goto exit;               |     kref_put(.., local_release)\n}                            |\n                             |       // local_release\n                             |       list_del(&local->list)\n  // nfc_genl_send_params    |       kfree()\n  local->dev->idx !!!UAF!!!  |\n                             |\n\nand the crash trace for the one of the discussed UAF like:\n\nBUG: KASAN: slab-use-after-free in nfc_genl_llc_get_params+0x72f/0x780  net/nfc/netlink.c:1045\nRead of size 8 at addr ffff888105b0e410 by task 20114\n\nCall Trace:\n <TASK>\n __dump_stack  lib/dump_stack.c:88 [inline]\n dump_stack_lvl+0x72/0xa0  lib/dump_stack.c:106\n print_address_description  mm/kasan/report.c:319 [inline]\n print_report+0xcc/0x620  mm/kasan/report.c:430\n kasan_report+0xb2/0xe0  mm/kasan/report.c:536\n nfc_genl_send_params  net/nfc/netlink.c:999 [inline]\n nfc_genl_llc_get_params+0x72f/0x780  net/nfc/netlink.c:1045\n genl_family_rcv_msg_doit.isra.0+0x1ee/0x2e0  net/netlink/genetlink.c:968\n genl_family_rcv_msg  net/netlink/genetlink.c:1048 [inline]\n genl_rcv_msg+0x503/0x7d0  net/netlink/genetlink.c:1065\n netlink_rcv_skb+0x161/0x430  net/netlink/af_netlink.c:2548\n genl_rcv+0x28/0x40  net/netlink/genetlink.c:1076\n netlink_unicast_kernel  net/netlink/af_netlink.c:1339 [inline]\n netlink_unicast+0x644/0x900  net/netlink/af_netlink.c:1365\n netlink_sendmsg+0x934/0xe70  net/netlink/af_netlink.c:1913\n sock_sendmsg_nosec  net/socket.c:724 [inline]\n sock_sendmsg+0x1b6/0x200  net/socket.c:747\n ____sys_sendmsg+0x6e9/0x890  net/socket.c:2501\n ___sys_sendmsg+0x110/0x1b0  net/socket.c:2555\n __sys_sendmsg+0xf7/0x1d0  net/socket.c:2584\n do_syscall_x64  arch/x86/entry/common.c:50 [inline]\n do_syscall_64+0x3f/0x90  arch/x86/entry/common.c:80\n entry_SYSCALL_64_after_hwframe+0x72/0xdc\nRIP: 0033:0x7f34640a2389\nRSP: 002b:00007f3463415168 EFLAGS: 00000246 ORIG_RAX: 000000000000002e\nRAX: ffffffffffffffda RBX: 00007f34641c1f80 RCX: 00007f34640a2389\nRDX: 0000000000000000 RSI: 0000000020000240 RDI: 0000000000000006\nRBP: 00007f34640ed493 R08: 0000000000000000 R09: 0000000000000000\nR10: 0000000000000000 R11: 0000000000000246 R12: 0000000000000000\nR13: 00007ffe38449ecf R14: 00007f3463415300 R15: 0000000000022000\n </TASK>\n\nAllocated by task 20116:\n kasan_save_stack+0x22/0x50  mm/kasan/common.c:45\n kasan_set_track+0x25/0x30  mm/kasan/common.c:52\n ____kasan_kmalloc  mm/kasan/common.c:374 [inline]\n __kasan_kmalloc+0x7f/0x90  mm/kasan/common.c:383\n kmalloc  include/linux/slab.h:580 [inline]\n kzalloc  include/linux/slab.h:720 [inline]\n nfc_llcp_register_device+0x49/0xa40  net/nfc/llcp_core.c:1567\n nfc_register_device+0x61/0x260  net/nfc/core.c:1124\n nci_register_device+0x776/0xb20  net/nfc/nci/core.c:1257\n virtual_ncidev_open+0x147/0x230  drivers/nfc/virtual_ncidev.c:148\n misc_open+0x379/0x4a0  drivers/char/misc.c:165\n chrdev_open+0x26c/0x780  fs/char_dev.c:414\n do_dentry_open+0x6c4/0x12a0  fs/open.c:920\n do_open  fs/namei.c:3560 [inline]\n path_openat+0x24fe/0x37e0  fs/namei.c:3715\n do_filp_open+0x1ba/0x410  fs/namei.c:3742\n do_sys_openat2+0x171/0x4c0  fs/open.c:1356\n do_sys_open  fs/open.c:1372 [inline]\n __do_sys_openat  fs/open.c:1388 [inline]\n __se_sys_openat  fs/open.c:1383 [inline]\n __x64_sys_openat+0x143/0x200  fs/open.c:1383\n do_syscall_x64  arch/x86/entry/common.c:50 [inline]\n do_syscall_64+0x3f/0x90  arch/x86/entry/common.c:80\n entry_SYSCALL_64_after_hwframe+0x72/0xdc\n\nFreed by task 20115:\n kasan_save_stack+0x22/0x50  mm/kasan/common.c:45\n kasan_set_track+0x25/0x30  mm/kasan/common.c:52\n kasan_save_free_info+0x2e/0x50  mm/kasan/generic.c:521\n ____kasan_slab_free  mm/kasan/common.c:236 [inline]\n ____kasan_slab_free  mm/kasan/common.c:200 [inline]\n __kasan_slab_free+0x10a/0x190  mm/kasan/common.c:244\n kasan_slab_free  include/linux/kasan.h:162 [inline]\n slab_free_hook  mm/slub.c:1781 [inline]\n slab_free_freelist_hook  mm/slub.c:1807 [inline]\n slab_free  mm/slub.c:3787 [inline]\n __kmem_cache_free+0x7a/0x190  mm/slub.c:3800\n local_release  net/nfc/llcp_core.c:174 [inline]\n kref_put  include/linux/kref.h:65 [inline]\n nfc_llcp_local_put  net/nfc/llcp_core.c:182 [inline]\n nfc_llcp_local_put  net/nfc/llcp_core.c:177 [inline]\n nfc_llcp_unregister_device+0x206/0x290  net/nfc/llcp_core.c:1620\n nfc_unregister_device+0x160/0x1d0  net/nfc/core.c:1179\n virtual_ncidev_close+0x52/0xa0  drivers/nfc/virtual_ncidev.c:163\n __fput+0x252/0xa20  fs/file_table.c:321\n task_work_run+0x174/0x270  kernel/task_work.c:179\n resume_user_mode_work  include/linux/resume_user_mode.h:49 [inline]\n exit_to_user_mode_loop  kernel/entry/common.c:171 [inline]\n exit_to_user_mode_prepare+0x108/0x110  kernel/entry/common.c:204\n __syscall_exit_to_user_mode_work  kernel/entry/common.c:286 [inline]\n syscall_exit_to_user_mode+0x21/0x50  kernel/entry/common.c:297\n do_syscall_64+0x4c/0x90  arch/x86/entry/common.c:86\n entry_SYSCALL_64_after_hwframe+0x72/0xdc\n\nLast potentially related work creation:\n kasan_save_stack+0x22/0x50  mm/kasan/common.c:45\n __kasan_record_aux_stack+0x95/0xb0  mm/kasan/generic.c:491\n kvfree_call_rcu+0x29/0xa80  kernel/rcu/tree.c:3328\n drop_sysctl_table+0x3be/0x4e0  fs/proc/proc_sysctl.c:1735\n unregister_sysctl_table.part.0+0x9c/0x190  fs/proc/proc_sysctl.c:1773\n unregister_sysctl_table+0x24/0x30  fs/proc/proc_sysctl.c:1753\n neigh_sysctl_unregister+0x5f/0x80  net/core/neighbour.c:3895\n addrconf_notify+0x140/0x17b0  net/ipv6/addrconf.c:3684\n notifier_call_chain+0xbe/0x210  kernel/notifier.c:87\n call_netdevice_notifiers_info+0xb5/0x150  net/core/dev.c:1937\n call_netdevice_notifiers_extack  net/core/dev.c:1975 [inline]\n call_netdevice_notifiers  net/core/dev.c:1989 [inline]\n dev_change_name+0x3c3/0x870  net/core/dev.c:1211\n dev_ifsioc+0x800/0xf70  net/core/dev_ioctl.c:376\n dev_ioctl+0x3d9/0xf80  net/core/dev_ioctl.c:542\n sock_do_ioctl+0x160/0x260  net/socket.c:1213\n sock_ioctl+0x3f9/0x670  net/socket.c:1316\n vfs_ioctl  fs/ioctl.c:51 [inline]\n __do_sys_ioctl  fs/ioctl.c:870 [inline]\n __se_sys_ioctl  fs/ioctl.c:856 [inline]\n __x64_sys_ioctl+0x19e/0x210  fs/ioctl.c:856\n do_syscall_x64  arch/x86/entry/common.c:50 [inline]\n do_syscall_64+0x3f/0x90  arch/x86/entry/common.c:80\n entry_SYSCALL_64_after_hwframe+0x72/0xdc\n\nThe buggy address belongs to the object at ffff888105b0e400\n which belongs to the cache kmalloc-1k of size 1024\nThe buggy address is located 16 bytes inside of\n freed 1024-byte region [ffff888105b0e400, ffff888105b0e800)\n\nThe buggy address belongs to the physical page:\nhead:ffffea000416c200 order:3 entire_mapcount:0 nr_pages_mapped:0 pincount:0\nflags: 0x200000000010200(slab|head|node=0|zone=2)\nraw: 0200000000010200 ffff8881000430c0 ffffea00044c7010 ffffea0004510e10\nraw: 0000000000000000 00000000000a000a 00000001ffffffff 0000000000000000\npage dumped because: kasan: bad access detected\n\nMemory state around the buggy address:\n ffff888105b0e300: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc\n ffff888105b0e380: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc\n>ffff888105b0e400: fa fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb\n                         ^\n ffff888105b0e480: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb\n ffff888105b0e500: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb\n\nIn summary, this patch solves those use-after-free by\n\n1. Re-implement the nfc_llcp_find_local(). The current version does not\ngrab the reference when getting the local from the linked list.  For\nexample, the llcp_sock_bind() gets the reference like below:\n\n// llcp_sock_bind()\n\n    local = nfc_llcp_find_local(dev); // A\n    ..... \\\n           | raceable\n    ..... /\n    llcp_sock->local = nfc_llcp_local_get(local); // B\n\nThere is an apparent race window that one can  drop the reference\nand free the local object fetched in (A) before (B) gets the reference.\n\n2. Some callers of the nfc_llcp_find_local() do not grab the reference\nat all. For example, the nfc_genl_llc_{{get/set}_params/sdreq} functions.\nWe add the nfc_llcp_local_put() for them. Moreover, we add the necessary\nerror handling function to put the reference.\n\n3. Add the nfc_llcp_remove_local() helper. The local object is removed\nfrom the linked list in local_release() when all reference is gone. This\npatch removes it when nfc_llcp_unregister_device() is called.\n\nTherefore, every caller of nfc_llcp_find_local() will get a reference\neven when the nfc_llcp_unregister_device() is called. This promises no\nuse-after-free for the local object is ever possible.\n\nFixes: 52feb444a903 (\"NFC: Extend netlink interface for LTO, RW, and MIUX parameters support\")\nFixes: c7aa12252f51 (\"NFC: Take a reference on the LLCP local pointer when creating a socket\")\nSigned-off-by: Lin Ma <linma@zju.edu.cn>\nReviewed-by: Simon Horman <simon.horman@corigine.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
    "commit_hash": "6709d4b7bc2e079241fdef15d1160581c5261c10",
    "git_url": "https://github.com/torvalds/linux/commit/6709d4b7bc2e079241fdef15d1160581c5261c10",
    "file_path": "net/nfc/llcp_core.c",
    "func_name": "nfc_llcp_mac_is_up",
    "func_before": "void nfc_llcp_mac_is_up(struct nfc_dev *dev, u32 target_idx,\n\t\t\tu8 comm_mode, u8 rf_mode)\n{\n\tstruct nfc_llcp_local *local;\n\n\tpr_debug(\"rf mode %d\\n\", rf_mode);\n\n\tlocal = nfc_llcp_find_local(dev);\n\tif (local == NULL)\n\t\treturn;\n\n\tlocal->target_idx = target_idx;\n\tlocal->comm_mode = comm_mode;\n\tlocal->rf_mode = rf_mode;\n\n\tif (rf_mode == NFC_RF_INITIATOR) {\n\t\tpr_debug(\"Queueing Tx work\\n\");\n\n\t\tschedule_work(&local->tx_work);\n\t} else {\n\t\tmod_timer(&local->link_timer,\n\t\t\t  jiffies + msecs_to_jiffies(local->remote_lto));\n\t}\n}",
    "abstract_func_before": "void nfc_llcp_mac_is_up(struct nfc_dev *VAR_0, u32 VAR_1,\n\t\t\tu8 VAR_2, u8 VAR_3)\n{\n\tstruct nfc_llcp_local *VAR_4;\n\n\tpr_debug(\"rf mode %d\\n\", VAR_3);\n\n\tVAR_4 = nfc_llcp_find_local(VAR_0);\n\tif (VAR_4 == NULL)\n\t\treturn;\n\n\tVAR_4->target_idx = VAR_1;\n\tVAR_4->comm_mode = VAR_2;\n\tVAR_4->rf_mode = VAR_3;\n\n\tif (VAR_3 == VAR_5) {\n\t\tpr_debug(\"Queueing Tx work\\n\");\n\n\t\tschedule_work(&VAR_4->tx_work);\n\t} else {\n\t\tmod_timer(&VAR_4->link_timer,\n\t\t\t  VAR_6 + msecs_to_jiffies(VAR_4->remote_lto));\n\t}\n}",
    "func_graph_path_before": "torvalds/linux/6709d4b7bc2e079241fdef15d1160581c5261c10/llcp_core.c/vul/before/8.json",
    "func": "void nfc_llcp_mac_is_up(struct nfc_dev *dev, u32 target_idx,\n\t\t\tu8 comm_mode, u8 rf_mode)\n{\n\tstruct nfc_llcp_local *local;\n\n\tpr_debug(\"rf mode %d\\n\", rf_mode);\n\n\tlocal = nfc_llcp_find_local(dev);\n\tif (local == NULL)\n\t\treturn;\n\n\tlocal->target_idx = target_idx;\n\tlocal->comm_mode = comm_mode;\n\tlocal->rf_mode = rf_mode;\n\n\tif (rf_mode == NFC_RF_INITIATOR) {\n\t\tpr_debug(\"Queueing Tx work\\n\");\n\n\t\tschedule_work(&local->tx_work);\n\t} else {\n\t\tmod_timer(&local->link_timer,\n\t\t\t  jiffies + msecs_to_jiffies(local->remote_lto));\n\t}\n\n\tnfc_llcp_local_put(local);\n}",
    "abstract_func": "void nfc_llcp_mac_is_up(struct nfc_dev *VAR_0, u32 VAR_1,\n\t\t\tu8 VAR_2, u8 VAR_3)\n{\n\tstruct nfc_llcp_local *VAR_4;\n\n\tpr_debug(\"rf mode %d\\n\", VAR_3);\n\n\tVAR_4 = nfc_llcp_find_local(VAR_0);\n\tif (VAR_4 == NULL)\n\t\treturn;\n\n\tVAR_4->target_idx = VAR_1;\n\tVAR_4->comm_mode = VAR_2;\n\tVAR_4->rf_mode = VAR_3;\n\n\tif (VAR_3 == VAR_5) {\n\t\tpr_debug(\"Queueing Tx work\\n\");\n\n\t\tschedule_work(&VAR_4->tx_work);\n\t} else {\n\t\tmod_timer(&VAR_4->link_timer,\n\t\t\t  VAR_6 + msecs_to_jiffies(VAR_4->remote_lto));\n\t}\n\n\tnfc_llcp_local_put(VAR_4);\n}",
    "func_graph_path": "torvalds/linux/6709d4b7bc2e079241fdef15d1160581c5261c10/llcp_core.c/vul/after/8.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -21,4 +21,6 @@\n \t\tmod_timer(&local->link_timer,\n \t\t\t  jiffies + msecs_to_jiffies(local->remote_lto));\n \t}\n+\n+\tnfc_llcp_local_put(local);\n }",
    "diff_line_info": {
        "deleted_lines": [],
        "added_lines": [
            "",
            "\tnfc_llcp_local_put(local);"
        ]
    },
    "is_vul": true,
    "pr_url": null,
    "description": "no more info"
}