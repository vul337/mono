{
    "cve_id": "CVE-2022-39319",
    "cwe_ids": [
        "CWE-125"
    ],
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:L/I:N/A:L",
    "cvss_is_v3": true,
    "repo_name": "FreeRDP",
    "commit_msg": "Fixed missing input buffer length check in urbdrc\n\n(cherry picked from commit 497df00f741dd4fc89292aaef2db7368aee45d0d)",
    "commit_hash": "11555828d2cf289b350baba5ad1f462f10b80b76",
    "git_url": "https://github.com/FreeRDP/FreeRDP/commit/11555828d2cf289b350baba5ad1f462f10b80b76",
    "file_path": "channels/urbdrc/client/data_transfer.c",
    "func_name": "urb_bulk_or_interrupt_transfer",
    "func_before": "static UINT urb_bulk_or_interrupt_transfer(IUDEVICE* pdev, URBDRC_CHANNEL_CALLBACK* callback,\n                                           wStream* s, UINT32 RequestField, UINT32 MessageId,\n                                           IUDEVMAN* udevman, int transferDir)\n{\n\tUINT32 EndpointAddress, PipeHandle;\n\tUINT32 TransferFlags, OutputBufferSize;\n\tconst BOOL noAck = (RequestField & 0x80000000U) != 0;\n\tconst UINT32 RequestId = RequestField & 0x7FFFFFFF;\n\n\tif (!pdev || !callback || !s || !udevman)\n\t\treturn ERROR_INVALID_PARAMETER;\n\n\tif (Stream_GetRemainingLength(s) < 12)\n\t\treturn ERROR_INVALID_DATA;\n\n\tStream_Read_UINT32(s, PipeHandle);\n\tStream_Read_UINT32(s, TransferFlags); /** TransferFlags */\n\tStream_Read_UINT32(s, OutputBufferSize);\n\tEndpointAddress = (PipeHandle & 0x000000ff);\n\t/**  process TS_URB_BULK_OR_INTERRUPT_TRANSFER */\n\treturn pdev->bulk_or_interrupt_transfer(\n\t    pdev, callback, MessageId, RequestId, EndpointAddress, TransferFlags, noAck,\n\t    OutputBufferSize, (transferDir == USBD_TRANSFER_DIRECTION_OUT) ? Stream_Pointer(s) : NULL,\n\t    urb_bulk_transfer_cb, 10000);\n}",
    "abstract_func_before": "static UINT urb_bulk_or_interrupt_transfer(IUDEVICE* VAR_0, URBDRC_CHANNEL_CALLBACK* VAR_1,\n                                           wStream* VAR_2, UINT32 VAR_3, UINT32 VAR_4,\n                                           IUDEVMAN* VAR_5, int VAR_6)\n{\n\tUINT32 VAR_7, VAR_8;\n\tUINT32 VAR_9, VAR_10;\n\tconst BOOL VAR_11 = (VAR_3 & 0x80000000U) != 0;\n\tconst UINT32 VAR_12 = VAR_3 & 0x7FFFFFFF;\n\n\tif (!VAR_0 || !VAR_1 || !VAR_2 || !VAR_5)\n\t\treturn VAR_13;\n\n\tif (Stream_GetRemainingLength(VAR_2) < 12)\n\t\treturn VAR_14;\n\n\tStream_Read_UINT32(VAR_2, VAR_8);\n\tStream_Read_UINT32(VAR_2, VAR_9); /* COMMENT_0 */\n\tStream_Read_UINT32(VAR_2, VAR_10);\n\tVAR_7 = (VAR_8 & 0x000000ff);\n\t/* COMMENT_1 */\n\treturn VAR_0->bulk_or_interrupt_transfer(\n\t    VAR_0, VAR_1, VAR_4, VAR_12, VAR_7, VAR_9, VAR_11,\n\t    VAR_10, (VAR_6 == VAR_15) ? Stream_Pointer(VAR_2) : NULL,\n\t    VAR_16, 10000);\n}",
    "func_graph_path_before": "FreeRDP/11555828d2cf289b350baba5ad1f462f10b80b76/data_transfer.c/vul/before/2.json",
    "func": "static UINT urb_bulk_or_interrupt_transfer(IUDEVICE* pdev, URBDRC_CHANNEL_CALLBACK* callback,\n                                           wStream* s, UINT32 RequestField, UINT32 MessageId,\n                                           IUDEVMAN* udevman, int transferDir)\n{\n\tUINT32 EndpointAddress, PipeHandle;\n\tUINT32 TransferFlags, OutputBufferSize;\n\tconst BOOL noAck = (RequestField & 0x80000000U) != 0;\n\tconst UINT32 RequestId = RequestField & 0x7FFFFFFF;\n\n\tif (!pdev || !callback || !s || !udevman)\n\t\treturn ERROR_INVALID_PARAMETER;\n\n\tif (Stream_GetRemainingLength(s) < 12)\n\t\treturn ERROR_INVALID_DATA;\n\n\tStream_Read_UINT32(s, PipeHandle);\n\tStream_Read_UINT32(s, TransferFlags); /** TransferFlags */\n\tStream_Read_UINT32(s, OutputBufferSize);\n\tEndpointAddress = (PipeHandle & 0x000000ff);\n\n\tif (transferDir == USBD_TRANSFER_DIRECTION_OUT)\n\t{\n\t\tif (!Stream_CheckAndLogRequiredLength(TAG, s, OutputBufferSize))\n\t\t{\n\t\t\treturn ERROR_INVALID_DATA;\n\t\t}\n\t}\n\n\t/**  process TS_URB_BULK_OR_INTERRUPT_TRANSFER */\n\treturn pdev->bulk_or_interrupt_transfer(\n\t    pdev, callback, MessageId, RequestId, EndpointAddress, TransferFlags, noAck,\n\t    OutputBufferSize, (transferDir == USBD_TRANSFER_DIRECTION_OUT) ? Stream_Pointer(s) : NULL,\n\t    urb_bulk_transfer_cb, 10000);\n}",
    "abstract_func": "static UINT urb_bulk_or_interrupt_transfer(IUDEVICE* VAR_0, URBDRC_CHANNEL_CALLBACK* VAR_1,\n                                           wStream* VAR_2, UINT32 VAR_3, UINT32 VAR_4,\n                                           IUDEVMAN* VAR_5, int VAR_6)\n{\n\tUINT32 VAR_7, VAR_8;\n\tUINT32 VAR_9, VAR_10;\n\tconst BOOL VAR_11 = (VAR_3 & 0x80000000U) != 0;\n\tconst UINT32 VAR_12 = VAR_3 & 0x7FFFFFFF;\n\n\tif (!VAR_0 || !VAR_1 || !VAR_2 || !VAR_5)\n\t\treturn VAR_13;\n\n\tif (Stream_GetRemainingLength(VAR_2) < 12)\n\t\treturn VAR_14;\n\n\tStream_Read_UINT32(VAR_2, VAR_8);\n\tStream_Read_UINT32(VAR_2, VAR_9); /* COMMENT_0 */\n\tStream_Read_UINT32(VAR_2, VAR_10);\n\tVAR_7 = (VAR_8 & 0x000000ff);\n\n\tif (VAR_6 == VAR_15)\n\t{\n\t\tif (!Stream_CheckAndLogRequiredLength(VAR_16, VAR_2, VAR_10))\n\t\t{\n\t\t\treturn VAR_14;\n\t\t}\n\t}\n\n\t/* COMMENT_1 */\n\treturn VAR_0->bulk_or_interrupt_transfer(\n\t    VAR_0, VAR_1, VAR_4, VAR_12, VAR_7, VAR_9, VAR_11,\n\t    VAR_10, (VAR_6 == VAR_15) ? Stream_Pointer(VAR_2) : NULL,\n\t    VAR_17, 10000);\n}",
    "func_graph_path": "FreeRDP/11555828d2cf289b350baba5ad1f462f10b80b76/data_transfer.c/vul/after/2.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -17,6 +17,15 @@\n \tStream_Read_UINT32(s, TransferFlags); /** TransferFlags */\n \tStream_Read_UINT32(s, OutputBufferSize);\n \tEndpointAddress = (PipeHandle & 0x000000ff);\n+\n+\tif (transferDir == USBD_TRANSFER_DIRECTION_OUT)\n+\t{\n+\t\tif (!Stream_CheckAndLogRequiredLength(TAG, s, OutputBufferSize))\n+\t\t{\n+\t\t\treturn ERROR_INVALID_DATA;\n+\t\t}\n+\t}\n+\n \t/**  process TS_URB_BULK_OR_INTERRUPT_TRANSFER */\n \treturn pdev->bulk_or_interrupt_transfer(\n \t    pdev, callback, MessageId, RequestId, EndpointAddress, TransferFlags, noAck,",
    "diff_line_info": {
        "deleted_lines": [],
        "added_lines": [
            "",
            "\tif (transferDir == USBD_TRANSFER_DIRECTION_OUT)",
            "\t{",
            "\t\tif (!Stream_CheckAndLogRequiredLength(TAG, s, OutputBufferSize))",
            "\t\t{",
            "\t\t\treturn ERROR_INVALID_DATA;",
            "\t\t}",
            "\t}",
            ""
        ]
    },
    "is_vul": true,
    "pr_url": "https://github.com/FreeRDP/FreeRDP/pull/8381",
    "description": "no more info"
}