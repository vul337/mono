{
    "cve_id": "CVE-2016-7519",
    "cwe_ids": [
        "CWE-125"
    ],
    "cvss_vector": "AV:N/AC:M/Au:N/C:N/I:N/A:P",
    "cvss_is_v3": false,
    "repo_name": "ImageMagick",
    "commit_msg": "https://github.com/ImageMagick/ImageMagick/issues/82\nhttps://github.com/ImageMagick/ImageMagick/issues/81\nhttps://github.com/ImageMagick/ImageMagick/issues/80\nhttps://github.com/ImageMagick/ImageMagick/issues/77",
    "commit_hash": "6e4b009f392b8f9d2dbfb4f8524143a10c3ce574",
    "git_url": "https://github.com/ImageMagick/ImageMagick/commit/6e4b009f392b8f9d2dbfb4f8524143a10c3ce574",
    "file_path": "magick/memory.c",
    "func_name": "AcquireQuantumMemory",
    "func_before": "MagickExport void *AcquireQuantumMemory(const size_t count,const size_t quantum)\n{\n  size_t\n    size;\n\n  size=count*quantum;\n  if ((count == 0) || (quantum != (size/count)))\n    {\n      errno=ENOMEM;\n      return((void *) NULL);\n    }\n  return(AcquireMagickMemory(size));\n}",
    "abstract_func_before": "MagickExport VAR_0 *AcquireQuantumMemory(const size_t VAR_1,const size_t VAR_2)\n{\n  size_t\n    VAR_3;\n\n  VAR_3=VAR_1*VAR_2;\n  if ((VAR_1 == 0) || (VAR_2 != (VAR_3/VAR_1)))\n    {\n      VAR_4=VAR_5;\n      return((void *) NULL);\n    }\n  return(AcquireMagickMemory(VAR_3));\n}",
    "func_graph_path_before": null,
    "func": "MagickExport void *AcquireQuantumMemory(const size_t count,const size_t quantum)\n{\n  size_t\n    extent;\n\n  if (CheckMemoryOverflow(count,quantum) != MagickFalse)\n    return((void *) NULL);\n  extent=count*quantum;\n  return(AcquireMagickMemory(extent));\n}",
    "abstract_func": "MagickExport VAR_0 *AcquireQuantumMemory(const size_t VAR_1,const size_t VAR_2)\n{\n  size_t\n    VAR_3;\n\n  if (CheckMemoryOverflow(VAR_1,VAR_2) != VAR_4)\n    return((void *) NULL);\n  VAR_3=VAR_1*VAR_2;\n  return(AcquireMagickMemory(VAR_3));\n}",
    "func_graph_path": null,
    "diff_func": "--- func_before\n+++ func_after\n@@ -1,13 +1,10 @@\n MagickExport void *AcquireQuantumMemory(const size_t count,const size_t quantum)\n {\n   size_t\n-    size;\n+    extent;\n \n-  size=count*quantum;\n-  if ((count == 0) || (quantum != (size/count)))\n-    {\n-      errno=ENOMEM;\n-      return((void *) NULL);\n-    }\n-  return(AcquireMagickMemory(size));\n+  if (CheckMemoryOverflow(count,quantum) != MagickFalse)\n+    return((void *) NULL);\n+  extent=count*quantum;\n+  return(AcquireMagickMemory(extent));\n }",
    "diff_line_info": {
        "deleted_lines": [
            "    size;",
            "  size=count*quantum;",
            "  if ((count == 0) || (quantum != (size/count)))",
            "    {",
            "      errno=ENOMEM;",
            "      return((void *) NULL);",
            "    }",
            "  return(AcquireMagickMemory(size));"
        ],
        "added_lines": [
            "    extent;",
            "  if (CheckMemoryOverflow(count,quantum) != MagickFalse)",
            "    return((void *) NULL);",
            "  extent=count*quantum;",
            "  return(AcquireMagickMemory(extent));"
        ]
    },
    "is_vul": true,
    "pr_url": null,
    "description": "no more info"
}