{
    "cve_id": "CVE-2018-13005",
    "cwe_ids": [
        "CWE-125"
    ],
    "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:P/A:P",
    "cvss_is_v3": false,
    "repo_name": "gpac",
    "commit_msg": "fixed 2 possible heap overflows (inc. #1088)",
    "commit_hash": "bceb03fd2be95097a7b409ea59914f332fb6bc86",
    "git_url": "https://github.com/gpac/gpac/commit/bceb03fd2be95097a7b409ea59914f332fb6bc86",
    "file_path": "src/isomedia/box_dump.c",
    "func_name": "hdlr_dump",
    "func_before": "GF_Err hdlr_dump(GF_Box *a, FILE * trace)\n{\n\tGF_HandlerBox *p = (GF_HandlerBox *)a;\n\tgf_isom_box_dump_start(a, \"HandlerBox\", trace);\n\tif (p->nameUTF8 && (u32) p->nameUTF8[0] == strlen(p->nameUTF8+1)) {\n\t\tfprintf(trace, \"hdlrType=\\\"%s\\\" Name=\\\"%s\\\" \", gf_4cc_to_str(p->handlerType), p->nameUTF8+1);\n\t} else {\n\t\tfprintf(trace, \"hdlrType=\\\"%s\\\" Name=\\\"%s\\\" \", gf_4cc_to_str(p->handlerType), p->nameUTF8);\n\t}\n\tfprintf(trace, \"reserved1=\\\"%d\\\" reserved2=\\\"\", p->reserved1);\n\tdump_data(trace, (char *) p->reserved2, 12);\n\tfprintf(trace, \"\\\"\");\n\n\tfprintf(trace, \">\\n\");\n\tgf_isom_box_dump_done(\"HandlerBox\", a, trace);\n\treturn GF_OK;\n}",
    "abstract_func_before": "GF_Err hdlr_dump(GF_Box *VAR_0, FILE * VAR_1)\n{\n\tGF_HandlerBox *VAR_2 = (GF_HandlerBox *)VAR_0;\n\tgf_isom_box_dump_start(VAR_0, \"HandlerBox\", VAR_1);\n\tif (VAR_2->nameUTF8 && (u32) VAR_2->nameUTF8[0] == strlen(VAR_2->nameUTF8+1)) {\n\t\tfprintf(VAR_1, \"hdlrType=\\\"%s\\\" Name=\\\"%s\\\" \", gf_4cc_to_str(VAR_2->handlerType), VAR_2->nameUTF8+1);\n\t} else {\n\t\tfprintf(VAR_1, \"hdlrType=\\\"%s\\\" Name=\\\"%s\\\" \", gf_4cc_to_str(VAR_2->handlerType), VAR_2->nameUTF8);\n\t}\n\tfprintf(VAR_1, \"reserved1=\\\"%d\\\" reserved2=\\\"\", VAR_2->reserved1);\n\tdump_data(VAR_1, (char *) VAR_2->reserved2, 12);\n\tfprintf(VAR_1, \"\\\"\");\n\n\tfprintf(VAR_1, \">\\n\");\n\tgf_isom_box_dump_done(\"HandlerBox\", VAR_0, VAR_1);\n\treturn VAR_3;\n}",
    "func_graph_path_before": "gpac/bceb03fd2be95097a7b409ea59914f332fb6bc86/box_dump.c/vul/before/2.json",
    "func": "GF_Err hdlr_dump(GF_Box *a, FILE * trace)\n{\n\tGF_HandlerBox *p = (GF_HandlerBox *)a;\n\tgf_isom_box_dump_start(a, \"HandlerBox\", trace);\n\tif (p->nameUTF8 && (u32) p->nameUTF8[0] == strlen(p->nameUTF8)-1) {\n\t\tfprintf(trace, \"hdlrType=\\\"%s\\\" Name=\\\"%s\\\" \", gf_4cc_to_str(p->handlerType), p->nameUTF8+1);\n\t} else {\n\t\tfprintf(trace, \"hdlrType=\\\"%s\\\" Name=\\\"%s\\\" \", gf_4cc_to_str(p->handlerType), p->nameUTF8);\n\t}\n\tfprintf(trace, \"reserved1=\\\"%d\\\" reserved2=\\\"\", p->reserved1);\n\tdump_data(trace, (char *) p->reserved2, 12);\n\tfprintf(trace, \"\\\"\");\n\n\tfprintf(trace, \">\\n\");\n\tgf_isom_box_dump_done(\"HandlerBox\", a, trace);\n\treturn GF_OK;\n}",
    "abstract_func": "GF_Err hdlr_dump(GF_Box *VAR_0, FILE * VAR_1)\n{\n\tGF_HandlerBox *VAR_2 = (GF_HandlerBox *)VAR_0;\n\tgf_isom_box_dump_start(VAR_0, \"HandlerBox\", VAR_1);\n\tif (VAR_2->nameUTF8 && (u32) VAR_2->nameUTF8[0] == strlen(VAR_2->nameUTF8)-1) {\n\t\tfprintf(VAR_1, \"hdlrType=\\\"%s\\\" Name=\\\"%s\\\" \", gf_4cc_to_str(VAR_2->handlerType), VAR_2->nameUTF8+1);\n\t} else {\n\t\tfprintf(VAR_1, \"hdlrType=\\\"%s\\\" Name=\\\"%s\\\" \", gf_4cc_to_str(VAR_2->handlerType), VAR_2->nameUTF8);\n\t}\n\tfprintf(VAR_1, \"reserved1=\\\"%d\\\" reserved2=\\\"\", VAR_2->reserved1);\n\tdump_data(VAR_1, (char *) VAR_2->reserved2, 12);\n\tfprintf(VAR_1, \"\\\"\");\n\n\tfprintf(VAR_1, \">\\n\");\n\tgf_isom_box_dump_done(\"HandlerBox\", VAR_0, VAR_1);\n\treturn VAR_3;\n}",
    "func_graph_path": "gpac/bceb03fd2be95097a7b409ea59914f332fb6bc86/box_dump.c/vul/after/2.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -2,7 +2,7 @@\n {\n \tGF_HandlerBox *p = (GF_HandlerBox *)a;\n \tgf_isom_box_dump_start(a, \"HandlerBox\", trace);\n-\tif (p->nameUTF8 && (u32) p->nameUTF8[0] == strlen(p->nameUTF8+1)) {\n+\tif (p->nameUTF8 && (u32) p->nameUTF8[0] == strlen(p->nameUTF8)-1) {\n \t\tfprintf(trace, \"hdlrType=\\\"%s\\\" Name=\\\"%s\\\" \", gf_4cc_to_str(p->handlerType), p->nameUTF8+1);\n \t} else {\n \t\tfprintf(trace, \"hdlrType=\\\"%s\\\" Name=\\\"%s\\\" \", gf_4cc_to_str(p->handlerType), p->nameUTF8);",
    "diff_line_info": {
        "deleted_lines": [
            "\tif (p->nameUTF8 && (u32) p->nameUTF8[0] == strlen(p->nameUTF8+1)) {"
        ],
        "added_lines": [
            "\tif (p->nameUTF8 && (u32) p->nameUTF8[0] == strlen(p->nameUTF8)-1) {"
        ]
    },
    "is_vul": true,
    "pr_url": null,
    "description": "no more info"
}