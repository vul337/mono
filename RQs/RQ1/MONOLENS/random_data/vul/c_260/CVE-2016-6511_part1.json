{
    "cve_id": "CVE-2016-6511",
    "cwe_ids": [
        "CWE-399"
    ],
    "cvss_vector": "AV:N/AC:M/Au:N/C:N/I:N/A:P",
    "cvss_is_v3": false,
    "repo_name": "wireshark",
    "commit_msg": "proto.c: add bounds check to proto_tree_add_text(_valist)_internal\n\nBug: 12659\nChange-Id: I44cb3ce8e647ae2816d5ffa95435068c435a1e5c\nReviewed-on: https://code.wireshark.org/review/16648\nPetri-Dish: Pascal Quantin <pascal.quantin@gmail.com>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>\nReviewed-by: Anders Broman <a.broman58@gmail.com>",
    "commit_hash": "56706427f53cc64793870bf072c2c06248ae88f3",
    "git_url": "https://github.com/wireshark/wireshark/commit/56706427f53cc64793870bf072c2c06248ae88f3",
    "file_path": "epan/proto.c",
    "func_name": "proto_tree_add_text_valist_internal",
    "func_before": "proto_item *\nproto_tree_add_text_valist_internal(proto_tree *tree, tvbuff_t *tvb, gint start,\n\t\t\t   gint length, const char *format, va_list ap)\n{\n\tproto_item        *pi;\n\theader_field_info *hfinfo;\n\n\tCHECK_FOR_NULL_TREE(tree);\n\n\tTRY_TO_FAKE_THIS_ITEM(tree, hf_text_only, hfinfo);\n\n\tpi = proto_tree_add_text_node(tree, tvb, start, length);\n\n\tTRY_TO_FAKE_THIS_REPR(pi);\n\n\tproto_tree_set_representation(pi, format, ap);\n\n\treturn pi;\n}",
    "abstract_func_before": "proto_item *\nproto_tree_add_text_valist_internal(proto_tree *VAR_0, tvbuff_t *VAR_1, gint VAR_2,\n\t\t\t   gint VAR_3, const char *VAR_4, va_list VAR_5)\n{\n\tproto_item        *VAR_6;\n\theader_field_info *VAR_7;\n\n\tCHECK_FOR_NULL_TREE(VAR_0);\n\n\tTRY_TO_FAKE_THIS_ITEM(VAR_0, VAR_8, VAR_7);\n\n\tVAR_6 = proto_tree_add_text_node(VAR_0, VAR_1, VAR_2, VAR_3);\n\n\tTRY_TO_FAKE_THIS_REPR(VAR_6);\n\n\tproto_tree_set_representation(VAR_6, VAR_4, VAR_5);\n\n\treturn VAR_6;\n}",
    "func_graph_path_before": "wireshark/56706427f53cc64793870bf072c2c06248ae88f3/proto.c/vul/before/0.json",
    "func": "proto_item *\nproto_tree_add_text_valist_internal(proto_tree *tree, tvbuff_t *tvb, gint start,\n\t\t\t   gint length, const char *format, va_list ap)\n{\n\tproto_item        *pi;\n\theader_field_info *hfinfo;\n\n\tif (length == -1) {\n\t\t/* If we're fetching until the end of the TVB, only validate\n\t\t * that the offset is within range.\n\t\t */\n\t\tlength = 0;\n\t}\n\ttvb_ensure_bytes_exist(tvb, start, length);\n\n\tCHECK_FOR_NULL_TREE(tree);\n\n\tTRY_TO_FAKE_THIS_ITEM(tree, hf_text_only, hfinfo);\n\n\tpi = proto_tree_add_text_node(tree, tvb, start, length);\n\n\tTRY_TO_FAKE_THIS_REPR(pi);\n\n\tproto_tree_set_representation(pi, format, ap);\n\n\treturn pi;\n}",
    "abstract_func": "proto_item *\nproto_tree_add_text_valist_internal(proto_tree *VAR_0, tvbuff_t *VAR_1, gint VAR_2,\n\t\t\t   gint VAR_3, const char *VAR_4, va_list VAR_5)\n{\n\tproto_item        *VAR_6;\n\theader_field_info *VAR_7;\n\n\tif (VAR_3 == -1) {\n\t\t/* COMMENT_0 */\n                                     \n     \n\t\tVAR_3 = 0;\n\t}\n\ttvb_ensure_bytes_exist(VAR_1, VAR_2, VAR_3);\n\n\tCHECK_FOR_NULL_TREE(VAR_0);\n\n\tTRY_TO_FAKE_THIS_ITEM(VAR_0, VAR_8, VAR_7);\n\n\tVAR_6 = proto_tree_add_text_node(VAR_0, VAR_1, VAR_2, VAR_3);\n\n\tTRY_TO_FAKE_THIS_REPR(VAR_6);\n\n\tproto_tree_set_representation(VAR_6, VAR_4, VAR_5);\n\n\treturn VAR_6;\n}",
    "func_graph_path": "wireshark/56706427f53cc64793870bf072c2c06248ae88f3/proto.c/vul/after/0.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -4,6 +4,14 @@\n {\n \tproto_item        *pi;\n \theader_field_info *hfinfo;\n+\n+\tif (length == -1) {\n+\t\t/* If we're fetching until the end of the TVB, only validate\n+\t\t * that the offset is within range.\n+\t\t */\n+\t\tlength = 0;\n+\t}\n+\ttvb_ensure_bytes_exist(tvb, start, length);\n \n \tCHECK_FOR_NULL_TREE(tree);\n ",
    "diff_line_info": {
        "deleted_lines": [],
        "added_lines": [
            "",
            "\tif (length == -1) {",
            "\t\t/* If we're fetching until the end of the TVB, only validate",
            "\t\t * that the offset is within range.",
            "\t\t */",
            "\t\tlength = 0;",
            "\t}",
            "\ttvb_ensure_bytes_exist(tvb, start, length);"
        ]
    },
    "is_vul": true,
    "pr_url": null,
    "description": "no more info"
}