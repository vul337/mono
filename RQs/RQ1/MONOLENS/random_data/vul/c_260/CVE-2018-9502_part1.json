{
    "cve_id": "CVE-2018-9502",
    "cwe_ids": [
        "CWE-125"
    ],
    "cvss_vector": "AV:A/AC:L/Au:N/C:C/I:N/A:N",
    "cvss_is_v3": false,
    "repo_name": "android",
    "commit_msg": "Add bound check for rfc_parse_data\n\nBug: 78288018\nTest: manual\nChange-Id: I44349cd22c141483d01bce0f5a2131b727d0feb0\n(cherry picked from commit 6039cb7225733195192b396ad19c528800feb735)\n",
    "commit_hash": "9fe27a9b445f7e911286ed31c1087ceac567736b",
    "git_url": "https://android.googlesource.com/platform/system/bt/+/9fe27a9b445f7e911286ed31c1087ceac567736b",
    "file_path": "stack/rfcomm/rfc_ts_frames.cc",
    "func_name": "rfc_parse_data",
    "func_before": "uint8_t rfc_parse_data(tRFC_MCB* p_mcb, MX_FRAME* p_frame, BT_HDR* p_buf) {\n  uint8_t ead, eal, fcs;\n  uint8_t* p_data = (uint8_t*)(p_buf + 1) + p_buf->offset;\n  uint8_t* p_start = p_data;\n  uint16_t len;\n\n  if (p_buf->len < RFCOMM_CTRL_FRAME_LEN) {\n    RFCOMM_TRACE_ERROR(\"Bad Length1: %d\", p_buf->len);\n    return (RFC_EVENT_BAD_FRAME);\n  }\n\n  RFCOMM_PARSE_CTRL_FIELD(ead, p_frame->cr, p_frame->dlci, p_data);\n  if (!ead) {\n    RFCOMM_TRACE_ERROR(\"Bad Address(EA must be 1)\");\n    return (RFC_EVENT_BAD_FRAME);\n  }\n  RFCOMM_PARSE_TYPE_FIELD(p_frame->type, p_frame->pf, p_data);\n  RFCOMM_PARSE_LEN_FIELD(eal, len, p_data);\n\n  p_buf->len -= (3 + !ead + !eal + 1); /* Additional 1 for FCS */\n  p_buf->offset += (3 + !ead + !eal);\n\n  /* handle credit if credit based flow control */\n  if ((p_mcb->flow == PORT_FC_CREDIT) && (p_frame->type == RFCOMM_UIH) &&\n      (p_frame->dlci != RFCOMM_MX_DLCI) && (p_frame->pf == 1)) {\n    p_frame->credit = *p_data++;\n    p_buf->len--;\n    p_buf->offset++;\n  } else\n    p_frame->credit = 0;\n\n  if (p_buf->len != len) {\n    RFCOMM_TRACE_ERROR(\"Bad Length2 %d %d\", p_buf->len, len);\n    return (RFC_EVENT_BAD_FRAME);\n  }\n\n  fcs = *(p_data + len);\n\n  /* All control frames that we are sending are sent with P=1, expect */\n  /* reply with F=1 */\n  /* According to TS 07.10 spec ivalid frames are discarded without */\n  /* notification to the sender */\n  switch (p_frame->type) {\n    case RFCOMM_SABME:\n      if (RFCOMM_FRAME_IS_RSP(p_mcb->is_initiator, p_frame->cr) ||\n          !p_frame->pf || len || !RFCOMM_VALID_DLCI(p_frame->dlci) ||\n          !rfc_check_fcs(RFCOMM_CTRL_FRAME_LEN, p_start, fcs)) {\n        RFCOMM_TRACE_ERROR(\"Bad SABME\");\n        return (RFC_EVENT_BAD_FRAME);\n      } else\n        return (RFC_EVENT_SABME);\n\n    case RFCOMM_UA:\n      if (RFCOMM_FRAME_IS_CMD(p_mcb->is_initiator, p_frame->cr) ||\n          !p_frame->pf || len || !RFCOMM_VALID_DLCI(p_frame->dlci) ||\n          !rfc_check_fcs(RFCOMM_CTRL_FRAME_LEN, p_start, fcs)) {\n        RFCOMM_TRACE_ERROR(\"Bad UA\");\n        return (RFC_EVENT_BAD_FRAME);\n      } else\n        return (RFC_EVENT_UA);\n\n    case RFCOMM_DM:\n      if (RFCOMM_FRAME_IS_CMD(p_mcb->is_initiator, p_frame->cr) || len ||\n          !RFCOMM_VALID_DLCI(p_frame->dlci) ||\n          !rfc_check_fcs(RFCOMM_CTRL_FRAME_LEN, p_start, fcs)) {\n        RFCOMM_TRACE_ERROR(\"Bad DM\");\n        return (RFC_EVENT_BAD_FRAME);\n      } else\n        return (RFC_EVENT_DM);\n\n    case RFCOMM_DISC:\n      if (RFCOMM_FRAME_IS_RSP(p_mcb->is_initiator, p_frame->cr) ||\n          !p_frame->pf || len || !RFCOMM_VALID_DLCI(p_frame->dlci) ||\n          !rfc_check_fcs(RFCOMM_CTRL_FRAME_LEN, p_start, fcs)) {\n        RFCOMM_TRACE_ERROR(\"Bad DISC\");\n        return (RFC_EVENT_BAD_FRAME);\n      } else\n        return (RFC_EVENT_DISC);\n\n    case RFCOMM_UIH:\n      if (!RFCOMM_VALID_DLCI(p_frame->dlci)) {\n        RFCOMM_TRACE_ERROR(\"Bad UIH - invalid DLCI\");\n        return (RFC_EVENT_BAD_FRAME);\n      } else if (!rfc_check_fcs(2, p_start, fcs)) {\n        RFCOMM_TRACE_ERROR(\"Bad UIH - FCS\");\n        return (RFC_EVENT_BAD_FRAME);\n      } else if (RFCOMM_FRAME_IS_RSP(p_mcb->is_initiator, p_frame->cr)) {\n        /* we assume that this is ok to allow bad implementations to work */\n        RFCOMM_TRACE_ERROR(\"Bad UIH - response\");\n        return (RFC_EVENT_UIH);\n      } else\n        return (RFC_EVENT_UIH);\n  }\n\n  return (RFC_EVENT_BAD_FRAME);\n}",
    "abstract_func_before": "uint8_t rfc_parse_data(tRFC_MCB* VAR_0, MX_FRAME* VAR_1, BT_HDR* VAR_2) {\n  uint8_t VAR_3, VAR_4, VAR_5;\n  uint8_t* VAR_6 = (uint8_t*)(VAR_2 + 1) + VAR_2->offset;\n  uint8_t* VAR_7 = VAR_6;\n  uint16_t VAR_8;\n\n  if (VAR_2->len < VAR_9) {\n    RFCOMM_TRACE_ERROR(\"Bad Length1: %d\", VAR_2->len);\n    return (VAR_10);\n  }\n\n  RFCOMM_PARSE_CTRL_FIELD(VAR_3, VAR_1->cr, VAR_1->dlci, VAR_6);\n  if (!VAR_3) {\n    RFCOMM_TRACE_ERROR(\"Bad Address(EA must be 1)\");\n    return (VAR_10);\n  }\n  RFCOMM_PARSE_TYPE_FIELD(VAR_1->type, VAR_1->pf, VAR_6);\n  RFCOMM_PARSE_LEN_FIELD(VAR_4, VAR_8, VAR_6);\n\n  VAR_2->len -= (3 + !VAR_3 + !VAR_4 + 1); /* COMMENT_0 */\n  VAR_2->offset += (3 + !VAR_3 + !VAR_4);\n\n  /* COMMENT_1 */\n  if ((VAR_0->flow == VAR_11) && (VAR_1->type == VAR_12) &&\n      (VAR_1->dlci != VAR_13) && (VAR_1->pf == 1)) {\n    VAR_1->credit = *VAR_6++;\n    VAR_2->len--;\n    VAR_2->offset++;\n  } else\n    VAR_1->credit = 0;\n\n  if (VAR_2->len != VAR_8) {\n    RFCOMM_TRACE_ERROR(\"Bad Length2 %d %d\", VAR_2->len, VAR_8);\n    return (VAR_10);\n  }\n\n  VAR_5 = *(VAR_6 + VAR_8);\n\n  /* COMMENT_2 */\n  /* COMMENT_3 */\n  /* COMMENT_4 */\n  /* COMMENT_5 */\n  switch (VAR_1->type) {\n    case VAR_14:\n      if (RFCOMM_FRAME_IS_RSP(VAR_0->is_initiator, VAR_1->cr) ||\n          !VAR_1->pf || VAR_8 || !RFCOMM_VALID_DLCI(VAR_1->dlci) ||\n          !rfc_check_fcs(VAR_9, VAR_7, VAR_5)) {\n        RFCOMM_TRACE_ERROR(\"Bad SABME\");\n        return (VAR_10);\n      } else\n        return (VAR_15);\n\n    case VAR_16:\n      if (RFCOMM_FRAME_IS_CMD(VAR_0->is_initiator, VAR_1->cr) ||\n          !VAR_1->pf || VAR_8 || !RFCOMM_VALID_DLCI(VAR_1->dlci) ||\n          !rfc_check_fcs(VAR_9, VAR_7, VAR_5)) {\n        RFCOMM_TRACE_ERROR(\"Bad UA\");\n        return (VAR_10);\n      } else\n        return (VAR_17);\n\n    case VAR_18:\n      if (RFCOMM_FRAME_IS_CMD(VAR_0->is_initiator, VAR_1->cr) || VAR_8 ||\n          !RFCOMM_VALID_DLCI(VAR_1->dlci) ||\n          !rfc_check_fcs(VAR_9, VAR_7, VAR_5)) {\n        RFCOMM_TRACE_ERROR(\"Bad DM\");\n        return (VAR_10);\n      } else\n        return (VAR_19);\n\n    case VAR_20:\n      if (RFCOMM_FRAME_IS_RSP(VAR_0->is_initiator, VAR_1->cr) ||\n          !VAR_1->pf || VAR_8 || !RFCOMM_VALID_DLCI(VAR_1->dlci) ||\n          !rfc_check_fcs(VAR_9, VAR_7, VAR_5)) {\n        RFCOMM_TRACE_ERROR(\"Bad DISC\");\n        return (VAR_10);\n      } else\n        return (VAR_21);\n\n    case VAR_12:\n      if (!RFCOMM_VALID_DLCI(VAR_1->dlci)) {\n        RFCOMM_TRACE_ERROR(\"Bad UIH - invalid DLCI\");\n        return (VAR_10);\n      } else if (!rfc_check_fcs(2, VAR_7, VAR_5)) {\n        RFCOMM_TRACE_ERROR(\"Bad UIH - FCS\");\n        return (VAR_10);\n      } else if (RFCOMM_FRAME_IS_RSP(VAR_0->is_initiator, VAR_1->cr)) {\n        /* COMMENT_6 */\n        RFCOMM_TRACE_ERROR(\"Bad UIH - response\");\n        return (VAR_22);\n      } else\n        return (VAR_22);\n  }\n\n  return (VAR_10);\n}",
    "func_graph_path_before": "android/9fe27a9b445f7e911286ed31c1087ceac567736b/rfc_ts_frames.cc/vul/before/0.json",
    "func": "uint8_t rfc_parse_data(tRFC_MCB* p_mcb, MX_FRAME* p_frame, BT_HDR* p_buf) {\n  uint8_t ead, eal, fcs;\n  uint8_t* p_data = (uint8_t*)(p_buf + 1) + p_buf->offset;\n  uint8_t* p_start = p_data;\n  uint16_t len;\n\n  if (p_buf->len < RFCOMM_CTRL_FRAME_LEN) {\n    RFCOMM_TRACE_ERROR(\"Bad Length1: %d\", p_buf->len);\n    return (RFC_EVENT_BAD_FRAME);\n  }\n\n  RFCOMM_PARSE_CTRL_FIELD(ead, p_frame->cr, p_frame->dlci, p_data);\n  if (!ead) {\n    RFCOMM_TRACE_ERROR(\"Bad Address(EA must be 1)\");\n    return (RFC_EVENT_BAD_FRAME);\n  }\n  RFCOMM_PARSE_TYPE_FIELD(p_frame->type, p_frame->pf, p_data);\n\n  eal = *(p_data)&RFCOMM_EA;\n  len = *(p_data)++ >> RFCOMM_SHIFT_LENGTH1;\n  if (eal == 0 && p_buf->len < RFCOMM_CTRL_FRAME_LEN) {\n    len += (*(p_data)++ << RFCOMM_SHIFT_LENGTH2);\n  } else if (eal == 0) {\n    RFCOMM_TRACE_ERROR(\"Bad Length when EAL = 0: %d\", p_buf->len);\n    android_errorWriteLog(0x534e4554, \"78288018\");\n    return RFC_EVENT_BAD_FRAME;\n  }\n\n  p_buf->len -= (3 + !ead + !eal + 1); /* Additional 1 for FCS */\n  p_buf->offset += (3 + !ead + !eal);\n\n  /* handle credit if credit based flow control */\n  if ((p_mcb->flow == PORT_FC_CREDIT) && (p_frame->type == RFCOMM_UIH) &&\n      (p_frame->dlci != RFCOMM_MX_DLCI) && (p_frame->pf == 1)) {\n    p_frame->credit = *p_data++;\n    p_buf->len--;\n    p_buf->offset++;\n  } else\n    p_frame->credit = 0;\n\n  if (p_buf->len != len) {\n    RFCOMM_TRACE_ERROR(\"Bad Length2 %d %d\", p_buf->len, len);\n    return (RFC_EVENT_BAD_FRAME);\n  }\n\n  fcs = *(p_data + len);\n\n  /* All control frames that we are sending are sent with P=1, expect */\n  /* reply with F=1 */\n  /* According to TS 07.10 spec ivalid frames are discarded without */\n  /* notification to the sender */\n  switch (p_frame->type) {\n    case RFCOMM_SABME:\n      if (RFCOMM_FRAME_IS_RSP(p_mcb->is_initiator, p_frame->cr) ||\n          !p_frame->pf || len || !RFCOMM_VALID_DLCI(p_frame->dlci) ||\n          !rfc_check_fcs(RFCOMM_CTRL_FRAME_LEN, p_start, fcs)) {\n        RFCOMM_TRACE_ERROR(\"Bad SABME\");\n        return (RFC_EVENT_BAD_FRAME);\n      } else\n        return (RFC_EVENT_SABME);\n\n    case RFCOMM_UA:\n      if (RFCOMM_FRAME_IS_CMD(p_mcb->is_initiator, p_frame->cr) ||\n          !p_frame->pf || len || !RFCOMM_VALID_DLCI(p_frame->dlci) ||\n          !rfc_check_fcs(RFCOMM_CTRL_FRAME_LEN, p_start, fcs)) {\n        RFCOMM_TRACE_ERROR(\"Bad UA\");\n        return (RFC_EVENT_BAD_FRAME);\n      } else\n        return (RFC_EVENT_UA);\n\n    case RFCOMM_DM:\n      if (RFCOMM_FRAME_IS_CMD(p_mcb->is_initiator, p_frame->cr) || len ||\n          !RFCOMM_VALID_DLCI(p_frame->dlci) ||\n          !rfc_check_fcs(RFCOMM_CTRL_FRAME_LEN, p_start, fcs)) {\n        RFCOMM_TRACE_ERROR(\"Bad DM\");\n        return (RFC_EVENT_BAD_FRAME);\n      } else\n        return (RFC_EVENT_DM);\n\n    case RFCOMM_DISC:\n      if (RFCOMM_FRAME_IS_RSP(p_mcb->is_initiator, p_frame->cr) ||\n          !p_frame->pf || len || !RFCOMM_VALID_DLCI(p_frame->dlci) ||\n          !rfc_check_fcs(RFCOMM_CTRL_FRAME_LEN, p_start, fcs)) {\n        RFCOMM_TRACE_ERROR(\"Bad DISC\");\n        return (RFC_EVENT_BAD_FRAME);\n      } else\n        return (RFC_EVENT_DISC);\n\n    case RFCOMM_UIH:\n      if (!RFCOMM_VALID_DLCI(p_frame->dlci)) {\n        RFCOMM_TRACE_ERROR(\"Bad UIH - invalid DLCI\");\n        return (RFC_EVENT_BAD_FRAME);\n      } else if (!rfc_check_fcs(2, p_start, fcs)) {\n        RFCOMM_TRACE_ERROR(\"Bad UIH - FCS\");\n        return (RFC_EVENT_BAD_FRAME);\n      } else if (RFCOMM_FRAME_IS_RSP(p_mcb->is_initiator, p_frame->cr)) {\n        /* we assume that this is ok to allow bad implementations to work */\n        RFCOMM_TRACE_ERROR(\"Bad UIH - response\");\n        return (RFC_EVENT_UIH);\n      } else\n        return (RFC_EVENT_UIH);\n  }\n\n  return (RFC_EVENT_BAD_FRAME);\n}",
    "abstract_func": "uint8_t rfc_parse_data(tRFC_MCB* VAR_0, MX_FRAME* VAR_1, BT_HDR* VAR_2) {\n  uint8_t VAR_3, VAR_4, VAR_5;\n  uint8_t* VAR_6 = (uint8_t*)(VAR_2 + 1) + VAR_2->offset;\n  uint8_t* VAR_7 = VAR_6;\n  uint16_t VAR_8;\n\n  if (VAR_2->len < VAR_9) {\n    RFCOMM_TRACE_ERROR(\"Bad Length1: %d\", VAR_2->len);\n    return (VAR_10);\n  }\n\n  RFCOMM_PARSE_CTRL_FIELD(VAR_3, VAR_1->cr, VAR_1->dlci, VAR_6);\n  if (!VAR_3) {\n    RFCOMM_TRACE_ERROR(\"Bad Address(EA must be 1)\");\n    return (VAR_10);\n  }\n  RFCOMM_PARSE_TYPE_FIELD(VAR_1->type, VAR_1->pf, VAR_6);\n\n  VAR_4 = *(VAR_6)&VAR_11;\n  VAR_8 = *(VAR_6)++ >> VAR_12;\n  if (VAR_4 == 0 && VAR_2->len < VAR_9) {\n    VAR_8 += (*(VAR_6)++ << VAR_13);\n  } else if (VAR_4 == 0) {\n    RFCOMM_TRACE_ERROR(\"Bad Length when EAL = 0: %d\", VAR_2->len);\n    android_errorWriteLog(0x534e4554, \"78288018\");\n    return VAR_10;\n  }\n\n  VAR_2->len -= (3 + !VAR_3 + !VAR_4 + 1); /* COMMENT_0 */\n  VAR_2->offset += (3 + !VAR_3 + !VAR_4);\n\n  /* COMMENT_1 */\n  if ((VAR_0->flow == VAR_14) && (VAR_1->type == VAR_15) &&\n      (VAR_1->dlci != VAR_16) && (VAR_1->pf == 1)) {\n    VAR_1->credit = *VAR_6++;\n    VAR_2->len--;\n    VAR_2->offset++;\n  } else\n    VAR_1->credit = 0;\n\n  if (VAR_2->len != VAR_8) {\n    RFCOMM_TRACE_ERROR(\"Bad Length2 %d %d\", VAR_2->len, VAR_8);\n    return (VAR_10);\n  }\n\n  VAR_5 = *(VAR_6 + VAR_8);\n\n  /* COMMENT_2 */\n  /* COMMENT_3 */\n  /* COMMENT_4 */\n  /* COMMENT_5 */\n  switch (VAR_1->type) {\n    case VAR_17:\n      if (RFCOMM_FRAME_IS_RSP(VAR_0->is_initiator, VAR_1->cr) ||\n          !VAR_1->pf || VAR_8 || !RFCOMM_VALID_DLCI(VAR_1->dlci) ||\n          !rfc_check_fcs(VAR_9, VAR_7, VAR_5)) {\n        RFCOMM_TRACE_ERROR(\"Bad SABME\");\n        return (VAR_10);\n      } else\n        return (VAR_18);\n\n    case VAR_19:\n      if (RFCOMM_FRAME_IS_CMD(VAR_0->is_initiator, VAR_1->cr) ||\n          !VAR_1->pf || VAR_8 || !RFCOMM_VALID_DLCI(VAR_1->dlci) ||\n          !rfc_check_fcs(VAR_9, VAR_7, VAR_5)) {\n        RFCOMM_TRACE_ERROR(\"Bad UA\");\n        return (VAR_10);\n      } else\n        return (VAR_20);\n\n    case VAR_21:\n      if (RFCOMM_FRAME_IS_CMD(VAR_0->is_initiator, VAR_1->cr) || VAR_8 ||\n          !RFCOMM_VALID_DLCI(VAR_1->dlci) ||\n          !rfc_check_fcs(VAR_9, VAR_7, VAR_5)) {\n        RFCOMM_TRACE_ERROR(\"Bad DM\");\n        return (VAR_10);\n      } else\n        return (VAR_22);\n\n    case VAR_23:\n      if (RFCOMM_FRAME_IS_RSP(VAR_0->is_initiator, VAR_1->cr) ||\n          !VAR_1->pf || VAR_8 || !RFCOMM_VALID_DLCI(VAR_1->dlci) ||\n          !rfc_check_fcs(VAR_9, VAR_7, VAR_5)) {\n        RFCOMM_TRACE_ERROR(\"Bad DISC\");\n        return (VAR_10);\n      } else\n        return (VAR_24);\n\n    case VAR_15:\n      if (!RFCOMM_VALID_DLCI(VAR_1->dlci)) {\n        RFCOMM_TRACE_ERROR(\"Bad UIH - invalid DLCI\");\n        return (VAR_10);\n      } else if (!rfc_check_fcs(2, VAR_7, VAR_5)) {\n        RFCOMM_TRACE_ERROR(\"Bad UIH - FCS\");\n        return (VAR_10);\n      } else if (RFCOMM_FRAME_IS_RSP(VAR_0->is_initiator, VAR_1->cr)) {\n        /* COMMENT_6 */\n        RFCOMM_TRACE_ERROR(\"Bad UIH - response\");\n        return (VAR_25);\n      } else\n        return (VAR_25);\n  }\n\n  return (VAR_10);\n}",
    "func_graph_path": "android/9fe27a9b445f7e911286ed31c1087ceac567736b/rfc_ts_frames.cc/vul/after/0.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -15,7 +15,16 @@\n     return (RFC_EVENT_BAD_FRAME);\n   }\n   RFCOMM_PARSE_TYPE_FIELD(p_frame->type, p_frame->pf, p_data);\n-  RFCOMM_PARSE_LEN_FIELD(eal, len, p_data);\n+\n+  eal = *(p_data)&RFCOMM_EA;\n+  len = *(p_data)++ >> RFCOMM_SHIFT_LENGTH1;\n+  if (eal == 0 && p_buf->len < RFCOMM_CTRL_FRAME_LEN) {\n+    len += (*(p_data)++ << RFCOMM_SHIFT_LENGTH2);\n+  } else if (eal == 0) {\n+    RFCOMM_TRACE_ERROR(\"Bad Length when EAL = 0: %d\", p_buf->len);\n+    android_errorWriteLog(0x534e4554, \"78288018\");\n+    return RFC_EVENT_BAD_FRAME;\n+  }\n \n   p_buf->len -= (3 + !ead + !eal + 1); /* Additional 1 for FCS */\n   p_buf->offset += (3 + !ead + !eal);",
    "diff_line_info": {
        "deleted_lines": [
            "  RFCOMM_PARSE_LEN_FIELD(eal, len, p_data);"
        ],
        "added_lines": [
            "",
            "  eal = *(p_data)&RFCOMM_EA;",
            "  len = *(p_data)++ >> RFCOMM_SHIFT_LENGTH1;",
            "  if (eal == 0 && p_buf->len < RFCOMM_CTRL_FRAME_LEN) {",
            "    len += (*(p_data)++ << RFCOMM_SHIFT_LENGTH2);",
            "  } else if (eal == 0) {",
            "    RFCOMM_TRACE_ERROR(\"Bad Length when EAL = 0: %d\", p_buf->len);",
            "    android_errorWriteLog(0x534e4554, \"78288018\");",
            "    return RFC_EVENT_BAD_FRAME;",
            "  }"
        ]
    },
    "is_vul": true,
    "pr_url": null,
    "description": "no more info"
}