{
    "cve_id": "CVE-2018-20169",
    "cwe_ids": [
        "CWE-400"
    ],
    "cvss_vector": "AV:L/AC:L/Au:N/C:C/I:C/A:C",
    "cvss_is_v3": false,
    "repo_name": "torvalds/linux",
    "commit_msg": "USB: check usb_get_extra_descriptor for proper size\n\nWhen reading an extra descriptor, we need to properly check the minimum\nand maximum size allowed, to prevent from invalid data being sent by a\ndevice.\n\nReported-by: Hui Peng <benquike@gmail.com>\nReported-by: Mathias Payer <mathias.payer@nebelwelt.net>\nCo-developed-by: Linus Torvalds <torvalds@linux-foundation.org>\nSigned-off-by: Hui Peng <benquike@gmail.com>\nSigned-off-by: Mathias Payer <mathias.payer@nebelwelt.net>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>\nCc: stable <stable@kernel.org>\nSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>",
    "commit_hash": "704620afc70cf47abb9d6a1a57f3825d2bca49cf",
    "git_url": "https://github.com/torvalds/linux/commit/704620afc70cf47abb9d6a1a57f3825d2bca49cf",
    "file_path": "drivers/usb/core/usb.c",
    "func_name": "__usb_get_extra_descriptor",
    "func_before": "int __usb_get_extra_descriptor(char *buffer, unsigned size,\n\t\t\t       unsigned char type, void **ptr)\n{\n\tstruct usb_descriptor_header *header;\n\n\twhile (size >= sizeof(struct usb_descriptor_header)) {\n\t\theader = (struct usb_descriptor_header *)buffer;\n\n\t\tif (header->bLength < 2) {\n\t\t\tprintk(KERN_ERR\n\t\t\t\t\"%s: bogus descriptor, type %d length %d\\n\",\n\t\t\t\tusbcore_name,\n\t\t\t\theader->bDescriptorType,\n\t\t\t\theader->bLength);\n\t\t\treturn -1;\n\t\t}\n\n\t\tif (header->bDescriptorType == type) {\n\t\t\t*ptr = header;\n\t\t\treturn 0;\n\t\t}\n\n\t\tbuffer += header->bLength;\n\t\tsize -= header->bLength;\n\t}\n\treturn -1;\n}",
    "abstract_func_before": "int __usb_get_extra_descriptor(char *VAR_0, unsigned VAR_1,\n\t\t\t       unsigned char VAR_2, void **VAR_3)\n{\n\tstruct usb_descriptor_header *VAR_4;\n\n\twhile (VAR_1 >= sizeof(struct usb_descriptor_header)) {\n\t\tVAR_4 = (struct usb_descriptor_header *)VAR_0;\n\n\t\tif (VAR_4->bLength < 2) {\n\t\t\tprintk(KERN_ERR\n\t\t\t\t\"%s: bogus descriptor, type %d length %d\\n\",\n\t\t\t\tVAR_5,\n\t\t\t\tVAR_4->bDescriptorType,\n\t\t\t\tVAR_4->bLength);\n\t\t\treturn -1;\n\t\t}\n\n\t\tif (VAR_4->bDescriptorType == VAR_2) {\n\t\t\t*VAR_3 = VAR_4;\n\t\t\treturn 0;\n\t\t}\n\n\t\tVAR_0 += VAR_4->bLength;\n\t\tVAR_1 -= VAR_4->bLength;\n\t}\n\treturn -1;\n}",
    "func_graph_path_before": "torvalds/linux/704620afc70cf47abb9d6a1a57f3825d2bca49cf/usb.c/vul/before/0.json",
    "func": "int __usb_get_extra_descriptor(char *buffer, unsigned size,\n\t\t\t       unsigned char type, void **ptr, size_t minsize)\n{\n\tstruct usb_descriptor_header *header;\n\n\twhile (size >= sizeof(struct usb_descriptor_header)) {\n\t\theader = (struct usb_descriptor_header *)buffer;\n\n\t\tif (header->bLength < 2 || header->bLength > size) {\n\t\t\tprintk(KERN_ERR\n\t\t\t\t\"%s: bogus descriptor, type %d length %d\\n\",\n\t\t\t\tusbcore_name,\n\t\t\t\theader->bDescriptorType,\n\t\t\t\theader->bLength);\n\t\t\treturn -1;\n\t\t}\n\n\t\tif (header->bDescriptorType == type && header->bLength >= minsize) {\n\t\t\t*ptr = header;\n\t\t\treturn 0;\n\t\t}\n\n\t\tbuffer += header->bLength;\n\t\tsize -= header->bLength;\n\t}\n\treturn -1;\n}",
    "abstract_func": "int __usb_get_extra_descriptor(char *VAR_0, unsigned VAR_1,\n\t\t\t       unsigned char VAR_2, void **VAR_3, size_t VAR_4)\n{\n\tstruct usb_descriptor_header *VAR_5;\n\n\twhile (VAR_1 >= sizeof(struct usb_descriptor_header)) {\n\t\tVAR_5 = (struct usb_descriptor_header *)VAR_0;\n\n\t\tif (VAR_5->bLength < 2 || VAR_5->bLength > VAR_1) {\n\t\t\tprintk(KERN_ERR\n\t\t\t\t\"%s: bogus descriptor, type %d length %d\\n\",\n\t\t\t\tVAR_6,\n\t\t\t\tVAR_5->bDescriptorType,\n\t\t\t\tVAR_5->bLength);\n\t\t\treturn -1;\n\t\t}\n\n\t\tif (VAR_5->bDescriptorType == VAR_2 && VAR_5->bLength >= VAR_4) {\n\t\t\t*VAR_3 = VAR_5;\n\t\t\treturn 0;\n\t\t}\n\n\t\tVAR_0 += VAR_5->bLength;\n\t\tVAR_1 -= VAR_5->bLength;\n\t}\n\treturn -1;\n}",
    "func_graph_path": "torvalds/linux/704620afc70cf47abb9d6a1a57f3825d2bca49cf/usb.c/vul/after/0.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -1,12 +1,12 @@\n int __usb_get_extra_descriptor(char *buffer, unsigned size,\n-\t\t\t       unsigned char type, void **ptr)\n+\t\t\t       unsigned char type, void **ptr, size_t minsize)\n {\n \tstruct usb_descriptor_header *header;\n \n \twhile (size >= sizeof(struct usb_descriptor_header)) {\n \t\theader = (struct usb_descriptor_header *)buffer;\n \n-\t\tif (header->bLength < 2) {\n+\t\tif (header->bLength < 2 || header->bLength > size) {\n \t\t\tprintk(KERN_ERR\n \t\t\t\t\"%s: bogus descriptor, type %d length %d\\n\",\n \t\t\t\tusbcore_name,\n@@ -15,7 +15,7 @@\n \t\t\treturn -1;\n \t\t}\n \n-\t\tif (header->bDescriptorType == type) {\n+\t\tif (header->bDescriptorType == type && header->bLength >= minsize) {\n \t\t\t*ptr = header;\n \t\t\treturn 0;\n \t\t}",
    "diff_line_info": {
        "deleted_lines": [
            "\t\t\t       unsigned char type, void **ptr)",
            "\t\tif (header->bLength < 2) {",
            "\t\tif (header->bDescriptorType == type) {"
        ],
        "added_lines": [
            "\t\t\t       unsigned char type, void **ptr, size_t minsize)",
            "\t\tif (header->bLength < 2 || header->bLength > size) {",
            "\t\tif (header->bDescriptorType == type && header->bLength >= minsize) {"
        ]
    },
    "is_vul": true,
    "pr_url": null,
    "description": "no more info"
}