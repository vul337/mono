{
    "cve_id": "CVE-2020-8448",
    "cwe_ids": [
        "CWE-476"
    ],
    "cvss_vector": "AV:L/AC:L/Au:N/C:N/I:N/A:P",
    "cvss_is_v3": false,
    "repo_name": "ossec/ossec-hids",
    "commit_msg": "analysisd: fix possible null ptr deref in OS_CleanMSG.\n\nIf the `msg` provided to `OS_CleanMSG` has a `(` after the ID, but\ndoesn't not contain a `->` or `:` it should be rejected with\na `FORMAT_ERROR`.\n\nPrev. to this commit nesting `strstr` for `->` as the first argument to\n`strchr` for `:` results in a null ptr deref when the message is\nmalformed.",
    "commit_hash": "9b8b14c88188cdc66ab25f92a26918d0cb8a7760",
    "git_url": "https://github.com/ossec/ossec-hids/commit/9b8b14c88188cdc66ab25f92a26918d0cb8a7760",
    "file_path": "src/analysisd/cleanevent.c",
    "func_name": "OS_CleanMSG",
    "func_before": "int OS_CleanMSG(char *msg, Eventinfo *lf)\n{\n    size_t loglen;\n    char *pieces;\n    struct tm *p;\n\n    /* The message is formatted in the following way:\n     * id:location:message.\n     */\n\n    /* Ignore the id of the message in here */\n    msg += 2;\n\n    /* Set pieces as the message */\n    pieces = strchr(msg, ':');\n    if (!pieces) {\n        merror(FORMAT_ERROR, ARGV0);\n        return (-1);\n    }\n\n    /* Is this from an agent? */\n    if ( *msg == '(' )\n    {   /* look past '->' for the first ':' */\n        pieces = strchr(strstr(msg, \"->\"), ':');\n        if(!pieces)\n        {\n            merror(FORMAT_ERROR, ARGV0);\n            return(-1);\n        }\n    }\n\n    *pieces = '\\0';\n    pieces++;\n\n    os_strdup(msg, lf->location);\n\n    /* Get the log length */\n    loglen = strlen(pieces) + 1;\n\n    /* Assign the values in the structure (lf->full_log) */\n    os_malloc((2 * loglen) + 1, lf->full_log);\n\n    /* Set the whole message at full_log */\n    strncpy(lf->full_log, pieces, loglen);\n\n    /* Log is the one used for parsing in the decoders and rules */\n    lf->log = lf->full_log + loglen;\n    strncpy(lf->log, pieces, loglen);\n\n    /* check if month contains an umlaut and repair\n     * umlauts are non-ASCII and use 2 slots in the char array\n     * repair to only one slot so we can detect the correct date format in the next step\n     * ex: M\u00e4r 02 17:30:52\n     */\n    if (pieces[1] == (char) 195) {\n        if (pieces[2] == (char) 164) {\n            pieces[0] = '\\0';\n            pieces[1] = 'M';\n            pieces[2] = 'a';\n            pieces++;\n        }\n    }\n\n    /* Check for the syslog date format\n     * ( ex: Dec 29 10:00:01\n     *   or  2015-04-16 21:51:02,805 for proftpd 1.3.5\n     *   or  2007-06-14T15:48:55-04:00 for syslog-ng isodate\n     *   or  2007-06-14T15:48:55.3352-04:00 for syslog-ng isodate with up to 6 optional fraction of a second\n     *   or  2009-05-22T09:36:46.214994-07:00 for rsyslog\n     *   or  2015 Dec 29 10:00:01 )\n     */\n    if (\n        (   /* ex: Dec 29 10:00:01 */\n            (loglen > 17) &&\n            (pieces[3] == ' ') &&\n            (pieces[6] == ' ') &&\n            (pieces[9] == ':') &&\n            (pieces[12] == ':') &&\n            (pieces[15] == ' ') && (lf->log += 16)\n        )\n        ||\n        (   /* ex: 2015-04-16 21:51:02,805 */\n            (loglen > 24) &&\n            (pieces[4] == '-') &&\n            (pieces[7] == '-') &&\n            (pieces[10] == ' ') &&\n            (pieces[13] == ':') &&\n            (pieces[16] == ':') &&\n            (pieces[19] == ',') &&\n            (lf->log += 23)\n        )\n        ||\n        (\n            (loglen > 33) &&\n            (pieces[4] == '-') &&\n            (pieces[7] == '-') &&\n            (pieces[10] == 'T') &&\n            (pieces[13] == ':') &&\n            (pieces[16] == ':') &&\n            (   /* ex: 2007-06-14T15:48:55-04:00 */\n                (\n                    (pieces[22] == ':') &&\n                    (pieces[25] == ' ') && (lf->log += 26)\n                )\n                ||\n                /* ex: 2007-06-14T15:48:55.3-04:00 or 2009-05-22T09:36:46,214994-07:00 */\n                (\n                    (\n                        (pieces[19] == '.') || (pieces[19] == ',')\n                    )\n                    &&\n                    (\n                        ( (pieces[24] == ':') && (lf->log += 27) ) ||\n                        ( (pieces[25] == ':') && (lf->log += 28) ) ||\n                        ( (pieces[26] == ':') && (lf->log += 29) ) ||\n                        ( (pieces[27] == ':') && (lf->log += 30) ) ||\n                        ( (pieces[28] == ':') && (lf->log += 31) ) ||\n                        ( (pieces[29] == ':') && (lf->log += 32) )\n                    )\n                )\n            )\n        )\n        ||\n        (   /* ex: 2015 Dec 29 10:00:01 */\n            (loglen > 21) &&\n            (isdigit(pieces[0])) &&\n            (pieces[4] == ' ') &&\n            (pieces[8] == ' ') &&\n            (pieces[11] == ' ') &&\n            (pieces[14] == ':') &&\n            (pieces[17] == ':') &&\n            (pieces[20] == ' ') && (lf->log += 21)\n        )\n        ||\n        (\n            /* ex: 2019:11:06-00:08:03 */\n            (loglen > 20) &&\n            (isdigit(pieces[0])) &&\n            (pieces[4] == ':') &&\n            (pieces[7] == ':') &&\n            (pieces[10] == '-') &&\n            (pieces[13] == ':') &&\n            (pieces[16] == ':') && (lf->log += 20)\n        )\n    ) {\n        /* Check for an extra space in here */\n        if (*lf->log == ' ') {\n            lf->log++;\n        }\n\n\n        /* Hostname */\n        pieces = lf->hostname = lf->log;\n\n\n        /* Check for a valid hostname */\n        while (isValidChar(*pieces) == 1) {\n            pieces++;\n        }\n\n        /* Check if it is a syslog without hostname (common on Solaris) */\n        if (*pieces == ':' && pieces[1] == ' ') {\n            /* Getting solaris 8/9 messages without hostname.\n             * In these cases, the process_name should be there.\n             * http://www.ossec.net/wiki/index.php/Log_Samples_Solaris\n             */\n            lf->program_name = lf->hostname;\n            lf->hostname = NULL;\n\n            /* End the program name string */\n            *pieces = '\\0';\n\n            pieces += 2;\n            lf->log = pieces;\n        }\n\n        /* Extract the hostname */\n        else if (*pieces != ' ') {\n            /* Invalid hostname */\n            lf->hostname = NULL;\n            pieces = NULL;\n        } else {\n            /* End the hostname string */\n            *pieces = '\\0';\n\n            /* Move pieces to the beginning of the log message */\n            pieces++;\n            lf->log = pieces;\n\n            /* Get program_name */\n            lf->program_name = pieces;\n\n            /* Extract program_name */\n            /* Valid names:\n             * p_name:\n             * p_name[pid]:\n             * p_name[pid]: [ID xx facility.severity]\n             * auth|security:info p_name:\n             */\n            while (isValidChar(*pieces) == 1) {\n                pieces++;\n            }\n\n            /* Check for the first format: p_name: */\n            if ((*pieces == ':') && (pieces[1] == ' ')) {\n                *pieces = '\\0';\n                pieces += 2;\n            }\n\n            /* Check for the second format: p_name[pid]: */\n            else if ((*pieces == '[') && (isdigit((int)pieces[1]))) {\n                *pieces = '\\0';\n                pieces += 2;\n                while (isdigit((int)*pieces)) {\n                    pieces++;\n                }\n\n                if ((*pieces == ']') && (pieces[1] == ':') && (pieces[2] == ' ')) {\n                    pieces += 3;\n                }\n                /* Some systems are not terminating the program name with\n                 * a ':'. Working around this in here...\n                 */\n                else if ((*pieces == ']') && (pieces[1] == ' ')) {\n                    pieces += 2;\n                } else {\n                    /* Fix for some weird log formats */\n                    pieces--;\n                    while (isdigit((int)*pieces)) {\n                        pieces--;\n                    }\n\n                    if (*pieces == '\\0') {\n                        *pieces = '[';\n                    }\n                    pieces = NULL;\n                    lf->program_name = NULL;\n                }\n            }\n            /* AIX syslog */\n            else if ((*pieces == '|') && islower((int)pieces[1])) {\n                pieces += 2;\n\n                /* Remove facility */\n                while (isalnum((int)*pieces)) {\n                    pieces++;\n                }\n\n                if (*pieces == ':') {\n                    /* Remove severity */\n                    pieces++;\n                    while (isalnum((int)*pieces)) {\n                        pieces++;\n                    }\n\n                    if (*pieces == ' ') {\n                        pieces++;\n                        lf->program_name = pieces;\n\n\n                        /* Get program name again */\n                        while (isValidChar(*pieces) == 1) {\n                            pieces++;\n                        }\n\n                        /* Check for the first format: p_name: */\n                        if ((*pieces == ':') && (pieces[1] == ' ')) {\n                            *pieces = '\\0';\n                            pieces += 2;\n                        }\n\n                        /* Check for the second format: p_name[pid]: */\n                        else if ((*pieces == '[') && (isdigit((int)pieces[1]))) {\n                            *pieces = '\\0';\n                            pieces += 2;\n                            while (isdigit((int)*pieces)) {\n                                pieces++;\n                            }\n\n                            if ((*pieces == ']') && (pieces[1] == ':') &&\n                                    (pieces[2] == ' ')) {\n                                pieces += 3;\n                            } else {\n                                pieces = NULL;\n                            }\n                        }\n                    } else {\n                        pieces = NULL;\n                        lf->program_name = NULL;\n                    }\n                }\n                /* Invalid AIX */\n                else {\n                    pieces = NULL;\n                    lf->program_name = NULL;\n                }\n            } else {\n                pieces = NULL;\n                lf->program_name = NULL;\n            }\n        }\n\n        /* Remove [ID xx facility.severity] */\n        if (pieces) {\n            /* Set log after program name */\n            lf->log = pieces;\n\n            if ((pieces[0] == '[') &&\n                    (pieces[1] == 'I') &&\n                    (pieces[2] == 'D') &&\n                    (pieces[3] == ' ')) {\n                pieces += 4;\n\n                /* Going after the ] */\n                pieces = strchr(pieces, ']');\n                if (pieces) {\n                    pieces += 2;\n                    lf->log = pieces;\n                }\n            }\n        }\n\n        /* Get program name size */\n        if (lf->program_name) {\n            lf->p_name_size = strlen(lf->program_name);\n        }\n    }\n\n    /* xferlog date format\n     * Mon Apr 17 18:27:14 2006 1 64.160.42.130\n     */\n    else if ((loglen > 28) &&\n             (pieces[3] == ' ') &&\n             (pieces[7] == ' ') &&\n             (pieces[10] == ' ') &&\n             (pieces[13] == ':') &&\n             (pieces[16] == ':') &&\n             (pieces[19] == ' ') &&\n             (pieces[24] == ' ') &&\n             (pieces[26] == ' ')) {\n        /* Move log to the beginning of the message */\n        lf->log += 24;\n    }\n\n    /* Check for snort date format\n     * ex: 01/28-09:13:16.240702  [**]\n     */\n    else if ( (loglen > 24) &&\n              (pieces[2] == '/') &&\n              (pieces[5] == '-') &&\n              (pieces[8] == ':') &&\n              (pieces[11] == ':') &&\n              (pieces[14] == '.') &&\n              (pieces[21] == ' ') ) {\n        lf->log += 23;\n    }\n\n    /* Check for suricata (new) date format\n     * ex: 01/28/1979-09:13:16.240702  [**]\n     */\n    else if ( (loglen > 26) &&\n              (pieces[2] == '/') &&\n              (pieces[5] == '/') &&\n              (pieces[10] == '-') &&\n              (pieces[13] == ':') &&\n              (pieces[16] == ':') &&\n              (pieces[19] == '.') &&\n              (pieces[26] == ' ') ) {\n        lf->log += 28;\n    }\n\n\n    /* Check for apache log format */\n    /* [Fri Feb 11 18:06:35 2004] [warn] */\n    else if ( (loglen > 27) &&\n              (pieces[0] == '[') &&\n              (pieces[4] == ' ') &&\n              (pieces[8] == ' ') &&\n              (pieces[11] == ' ') &&\n              (pieces[14] == ':') &&\n              (pieces[17] == ':') &&\n              (pieces[20] == ' ') &&\n              (pieces[25] == ']') ) {\n        lf->log += 27;\n    }\n\n    /* Check for the osx asl log format.\n     * Examples:\n     * [Time 2006.12.28 15:53:55 UTC] [Facility auth] [Sender sshd] [PID 483] [Message error: PAM: Authentication failure for username from 192.168.0.2] [Level 3] [UID -2] [GID -2] [Host Hostname]\n     * [Time 2006.11.02 14:02:11 UTC] [Facility auth] [Sender sshd] [PID 856]\n     [Message refused connect from 59.124.44.34] [Level 4] [UID -2] [GID -2]\n     [Host robert-wyatts-emac]\n     */\n    else if ((loglen > 26) &&\n             (pieces[0] == '[')  &&\n             (pieces[1] == 'T')  &&\n             (pieces[5] == ' ')  &&\n             (pieces[10] == '.') &&\n             (pieces[13] == '.') &&\n             (pieces[16] == ' ') &&\n             (pieces[19] == ':')) {\n        /* Do not read more than 1 message entry -> log tampering */\n        short unsigned int done_message = 0;\n\n        /* Remove the date */\n        lf->log += 25;\n\n        /* Get the desired values */\n        pieces = strchr(lf->log, '[');\n        while (pieces) {\n            pieces++;\n\n            /* Get the sender (set to program name) */\n            if ((strncmp(pieces, \"Sender \", 7) == 0) &&\n                    (lf->program_name == NULL)) {\n                pieces += 7;\n                lf->program_name = pieces;\n\n                /* Get the closing brackets */\n                pieces = strchr(pieces, ']');\n                if (pieces) {\n                    *pieces = '\\0';\n\n                    /* Set program_name size */\n                    lf->p_name_size = strlen(lf->program_name);\n\n                    pieces++;\n                }\n                /* Invalid program name */\n                else {\n                    lf->program_name = NULL;\n                    break;\n                }\n            }\n\n            /* Get message */\n            else if ((strncmp(pieces, \"Message \", 8) == 0) &&\n                     (done_message == 0)) {\n                pieces += 8;\n                done_message = 1;\n\n                lf->log = pieces;\n\n                /* Get the closing brackets */\n                pieces = strchr(pieces, ']');\n                if (pieces) {\n                    *pieces = '\\0';\n                    pieces++;\n                }\n                /* Invalid log closure */\n                else {\n                    break;\n                }\n            }\n\n            /* Get hostname */\n            else if (strncmp(pieces, \"Host \", 5) == 0) {\n                pieces += 5;\n                lf->hostname = pieces;\n\n                /* Get the closing brackets */\n                pieces = strchr(pieces, ']');\n                if (pieces) {\n                    *pieces = '\\0';\n                    pieces++;\n                }\n\n                /* Invalid hostname */\n                else {\n                    lf->hostname = NULL;\n                }\n                break;\n            }\n\n            /* Get next entry */\n            pieces = strchr(pieces, '[');\n        }\n    }\n\n    /* Check for squid date format\n     * 1140804070.368  11623\n     * seconds from 00:00:00 1970-01-01 UTC\n     */\n    else if ((loglen > 32) &&\n             (pieces[0] == '1') &&\n             (isdigit((int)pieces[1])) &&\n             (isdigit((int)pieces[2])) &&\n             (isdigit((int)pieces[3])) &&\n             (pieces[10] == '.') &&\n             (isdigit((int)pieces[13])) &&\n             (pieces[14] == ' ') &&\n             ((pieces[21] == ' ') || (pieces[22] == ' '))) {\n        lf->log += 14;\n\n        /* We need to start at the size of the event */\n        while (*lf->log == ' ') {\n            lf->log++;\n        }\n    }\n\n    /* Every message must be in the format\n     * hostname->location or\n     * (agent) ip->location.\n     */\n\n    /* Set hostname for local messages */\n    if (lf->location[0] == '(') {\n        /* Messages from an agent */\n        lf->hostname = lf->location;\n    } else if (lf->hostname == NULL) {\n        lf->hostname = __shost;\n    }\n\n    /* Set up the event data */\n    lf->time = c_time;\n    p = localtime(&c_time);\n\n    /* Assign hour, day, year and month values */\n    lf->day = p->tm_mday;\n    lf->year = p->tm_year + 1900;\n    strncpy(lf->mon, month[p->tm_mon], 3);\n    snprintf(lf->hour, 9, \"%02d:%02d:%02d\",\n             p->tm_hour,\n             p->tm_min,\n             p->tm_sec);\n\n    /* Set the global hour/weekday */\n    __crt_hour = p->tm_hour;\n    __crt_wday = p->tm_wday;\n\n#ifdef TESTRULE\n    if (!alert_only) {\n        print_out(\"**Phase 1: Completed pre-decoding.\");\n        print_out(\"       full event: '%s'\", lf->full_log);\n        print_out(\"       hostname: '%s'\", lf->hostname);\n        print_out(\"       program_name: '%s'\", lf->program_name);\n        print_out(\"       log: '%s'\", lf->log);\n    }\n#endif\n    return (0);\n}",
    "abstract_func_before": "int OS_CleanMSG(char *VAR_0, Eventinfo *VAR_1)\n{\n    size_t VAR_2;\n    char *VAR_3;\n    struct tm *VAR_4;\n\n    /* COMMENT_0 */\n                           \n       \n\n    /* COMMENT_3 */\n    VAR_0 += 2;\n\n    /* COMMENT_4 */\n    VAR_3 = strchr(VAR_0, ':');\n    if (!VAR_3) {\n        merror(VAR_5, VAR_6);\n        return (-1);\n    }\n\n    /* COMMENT_5 */\n    if ( *VAR_0 == '(' )\n    {   /* COMMENT_6 */\n        VAR_3 = strchr(strstr(VAR_0, \"->\"), ':');\n        if(!VAR_3)\n        {\n            merror(VAR_5, VAR_6);\n            return(-1);\n        }\n    }\n\n    *VAR_3 = '\\0';\n    VAR_3++;\n\n    os_strdup(VAR_0, VAR_1->location);\n\n    /* COMMENT_7 */\n    VAR_2 = strlen(VAR_3) + 1;\n\n    /* COMMENT_8 */\n    os_malloc((2 * VAR_2) + 1, VAR_1->full_log);\n\n    /* COMMENT_9 */\n    strncpy(VAR_1->full_log, VAR_3, VAR_2);\n\n    /* COMMENT_10 */\n    VAR_1->log = VAR_1->full_log + VAR_2;\n    strncpy(VAR_1->log, VAR_3, VAR_2);\n\n    /* COMMENT_11 */\n                                                              \n                                                                                        \n                          \n       \n    if (VAR_3[1] == (char) 195) {\n        if (VAR_3[2] == (char) 164) {\n            VAR_3[0] = '\\0';\n            VAR_3[1] = 'M';\n            VAR_3[2] = 'a';\n            VAR_3++;\n        }\n    }\n\n    /* COMMENT_16 */\n                            \n                                                      \n                                                            \n                                                                                                            \n                                                         \n                                   \n       \n    if (\n        (   /* COMMENT_24 */\n            (VAR_2 > 17) &&\n            (VAR_3[3] == ' ') &&\n            (VAR_3[6] == ' ') &&\n            (VAR_3[9] == ':') &&\n            (VAR_3[12] == ':') &&\n            (VAR_3[15] == ' ') && (VAR_1->log += 16)\n        )\n        ||\n        (   /* COMMENT_25 */\n            (VAR_2 > 24) &&\n            (VAR_3[4] == '-') &&\n            (VAR_3[7] == '-') &&\n            (VAR_3[10] == ' ') &&\n            (VAR_3[13] == ':') &&\n            (VAR_3[16] == ':') &&\n            (VAR_3[19] == ',') &&\n            (VAR_1->log += 23)\n        )\n        ||\n        (\n            (VAR_2 > 33) &&\n            (VAR_3[4] == '-') &&\n            (VAR_3[7] == '-') &&\n            (VAR_3[10] == 'T') &&\n            (VAR_3[13] == ':') &&\n            (VAR_3[16] == ':') &&\n            (   /* COMMENT_26 */\n                (\n                    (VAR_3[22] == ':') &&\n                    (VAR_3[25] == ' ') && (VAR_1->log += 26)\n                )\n                ||\n                /* COMMENT_27 */\n                (\n                    (\n                        (VAR_3[19] == '.') || (VAR_3[19] == ',')\n                    )\n                    &&\n                    (\n                        ( (VAR_3[24] == ':') && (VAR_1->log += 27) ) ||\n                        ( (VAR_3[25] == ':') && (VAR_1->log += 28) ) ||\n                        ( (VAR_3[26] == ':') && (VAR_1->log += 29) ) ||\n                        ( (VAR_3[27] == ':') && (VAR_1->log += 30) ) ||\n                        ( (VAR_3[28] == ':') && (VAR_1->log += 31) ) ||\n                        ( (VAR_3[29] == ':') && (VAR_1->log += 32) )\n                    )\n                )\n            )\n        )\n        ||\n        (   /* COMMENT_28 */\n            (VAR_2 > 21) &&\n            (isdigit(VAR_3[0])) &&\n            (VAR_3[4] == ' ') &&\n            (VAR_3[8] == ' ') &&\n            (VAR_3[11] == ' ') &&\n            (VAR_3[14] == ':') &&\n            (VAR_3[17] == ':') &&\n            (VAR_3[20] == ' ') && (VAR_1->log += 21)\n        )\n        ||\n        (\n            /* COMMENT_29 */\n            (VAR_2 > 20) &&\n            (isdigit(VAR_3[0])) &&\n            (VAR_3[4] == ':') &&\n            (VAR_3[7] == ':') &&\n            (VAR_3[10] == '-') &&\n            (VAR_3[13] == ':') &&\n            (VAR_3[16] == ':') && (VAR_1->log += 20)\n        )\n    ) {\n        /* COMMENT_30 */\n        if (*VAR_1->log == ' ') {\n            VAR_1->log++;\n        }\n\n\n        /* COMMENT_31 */\n        VAR_3 = VAR_1->hostname = VAR_1->log;\n\n\n        /* COMMENT_32 */\n        while (isValidChar(*VAR_3) == 1) {\n            VAR_3++;\n        }\n\n        /* COMMENT_33 */\n        if (*VAR_3 == ':' && VAR_3[1] == ' ') {\n            /* COMMENT_34 */\n                                                                \n                                                                      \n               \n            VAR_1->program_name = VAR_1->hostname;\n            VAR_1->hostname = NULL;\n\n            /* COMMENT_38 */\n            *VAR_3 = '\\0';\n\n            VAR_3 += 2;\n            VAR_1->log = VAR_3;\n        }\n\n        /* COMMENT_39 */\n        else if (*VAR_3 != ' ') {\n            /* COMMENT_40 */\n            VAR_1->hostname = NULL;\n            VAR_3 = NULL;\n        } else {\n            /* COMMENT_41 */\n            *VAR_3 = '\\0';\n\n            /* COMMENT_42 */\n            VAR_3++;\n            VAR_1->log = VAR_3;\n\n            /* COMMENT_43 */\n            VAR_1->program_name = VAR_3;\n\n            /* COMMENT_44 */\n            /* COMMENT_45 */\n                      \n                           \n                                                     \n                                         \n               \n            while (isValidChar(*VAR_3) == 1) {\n                VAR_3++;\n            }\n\n            /* COMMENT_51 */\n            if ((*VAR_3 == ':') && (VAR_3[1] == ' ')) {\n                *VAR_3 = '\\0';\n                VAR_3 += 2;\n            }\n\n            /* COMMENT_52 */\n            else if ((*VAR_3 == '[') && (isdigit((int)VAR_3[1]))) {\n                *VAR_3 = '\\0';\n                VAR_3 += 2;\n                while (isdigit((int)*VAR_3)) {\n                    VAR_3++;\n                }\n\n                if ((*VAR_3 == ']') && (VAR_3[1] == ':') && (VAR_3[2] == ' ')) {\n                    VAR_3 += 3;\n                }\n                /* COMMENT_53 */\n                                                        \n                   \n                else if ((*VAR_3 == ']') && (VAR_3[1] == ' ')) {\n                    VAR_3 += 2;\n                } else {\n                    /* COMMENT_56 */\n                    VAR_3--;\n                    while (isdigit((int)*VAR_3)) {\n                        VAR_3--;\n                    }\n\n                    if (*VAR_3 == '\\0') {\n                        *VAR_3 = '[';\n                    }\n                    VAR_3 = NULL;\n                    VAR_1->program_name = NULL;\n                }\n            }\n            /* COMMENT_57 */\n            else if ((*VAR_3 == '|') && islower((int)VAR_3[1])) {\n                VAR_3 += 2;\n\n                /* COMMENT_58 */\n                while (isalnum((int)*VAR_3)) {\n                    VAR_3++;\n                }\n\n                if (*VAR_3 == ':') {\n                    /* COMMENT_59 */\n                    VAR_3++;\n                    while (isalnum((int)*VAR_3)) {\n                        VAR_3++;\n                    }\n\n                    if (*VAR_3 == ' ') {\n                        VAR_3++;\n                        VAR_1->program_name = VAR_3;\n\n\n                        /* COMMENT_60 */\n                        while (isValidChar(*VAR_3) == 1) {\n                            VAR_3++;\n                        }\n\n                        /* COMMENT_51 */\n                        if ((*VAR_3 == ':') && (VAR_3[1] == ' ')) {\n                            *VAR_3 = '\\0';\n                            VAR_3 += 2;\n                        }\n\n                        /* COMMENT_52 */\n                        else if ((*VAR_3 == '[') && (isdigit((int)VAR_3[1]))) {\n                            *VAR_3 = '\\0';\n                            VAR_3 += 2;\n                            while (isdigit((int)*VAR_3)) {\n                                VAR_3++;\n                            }\n\n                            if ((*VAR_3 == ']') && (VAR_3[1] == ':') &&\n                                    (VAR_3[2] == ' ')) {\n                                VAR_3 += 3;\n                            } else {\n                                VAR_3 = NULL;\n                            }\n                        }\n                    } else {\n                        VAR_3 = NULL;\n                        VAR_1->program_name = NULL;\n                    }\n                }\n                /* COMMENT_61 */\n                else {\n                    VAR_3 = NULL;\n                    VAR_1->program_name = NULL;\n                }\n            } else {\n                VAR_3 = NULL;\n                VAR_1->program_name = NULL;\n            }\n        }\n\n        /* COMMENT_62 */\n        if (VAR_3) {\n            /* COMMENT_63 */\n            VAR_1->log = VAR_3;\n\n            if ((VAR_3[0] == '[') &&\n                    (VAR_3[1] == 'I') &&\n                    (VAR_3[2] == 'D') &&\n                    (VAR_3[3] == ' ')) {\n                VAR_3 += 4;\n\n                /* COMMENT_64 */\n                VAR_3 = strchr(VAR_3, ']');\n                if (VAR_3) {\n                    VAR_3 += 2;\n                    VAR_1->log = VAR_3;\n                }\n            }\n        }\n\n        /* COMMENT_65 */\n        if (VAR_1->program_name) {\n            VAR_1->p_name_size = strlen(VAR_1->program_name);\n        }\n    }\n\n    /* COMMENT_66 */\n                                               \n       \n    else if ((VAR_2 > 28) &&\n             (VAR_3[3] == ' ') &&\n             (VAR_3[7] == ' ') &&\n             (VAR_3[10] == ' ') &&\n             (VAR_3[13] == ':') &&\n             (VAR_3[16] == ':') &&\n             (VAR_3[19] == ' ') &&\n             (VAR_3[24] == ' ') &&\n             (VAR_3[26] == ' ')) {\n        /* COMMENT_69 */\n        VAR_1->log += 24;\n    }\n\n    /* COMMENT_70 */\n                                      \n       \n    else if ( (VAR_2 > 24) &&\n              (VAR_3[2] == '/') &&\n              (VAR_3[5] == '-') &&\n              (VAR_3[8] == ':') &&\n              (VAR_3[11] == ':') &&\n              (VAR_3[14] == '.') &&\n              (VAR_3[21] == ' ') ) {\n        VAR_1->log += 23;\n    }\n\n    /* COMMENT_73 */\n                                           \n       \n    else if ( (VAR_2 > 26) &&\n              (VAR_3[2] == '/') &&\n              (VAR_3[5] == '/') &&\n              (VAR_3[10] == '-') &&\n              (VAR_3[13] == ':') &&\n              (VAR_3[16] == ':') &&\n              (VAR_3[19] == '.') &&\n              (VAR_3[26] == ' ') ) {\n        VAR_1->log += 28;\n    }\n\n\n    /* COMMENT_76 */\n    /* COMMENT_77 */\n    else if ( (VAR_2 > 27) &&\n              (VAR_3[0] == '[') &&\n              (VAR_3[4] == ' ') &&\n              (VAR_3[8] == ' ') &&\n              (VAR_3[11] == ' ') &&\n              (VAR_3[14] == ':') &&\n              (VAR_3[17] == ':') &&\n              (VAR_3[20] == ' ') &&\n              (VAR_3[25] == ']') ) {\n        VAR_1->log += 27;\n    }\n\n    /* COMMENT_78 */\n                \n                                                                                                                                                                                                    \n                                                                             \n                                                                            \n                              \n       \n    else if ((VAR_2 > 26) &&\n             (VAR_3[0] == '[')  &&\n             (VAR_3[1] == 'T')  &&\n             (VAR_3[5] == ' ')  &&\n             (VAR_3[10] == '.') &&\n             (VAR_3[13] == '.') &&\n             (VAR_3[16] == ' ') &&\n             (VAR_3[19] == ':')) {\n        /* COMMENT_85 */\n        short unsigned int VAR_7 = 0;\n\n        /* COMMENT_86 */\n        VAR_1->log += 25;\n\n        /* COMMENT_87 */\n        VAR_3 = strchr(VAR_1->log, '[');\n        while (VAR_3) {\n            VAR_3++;\n\n            /* COMMENT_88 */\n            if ((strncmp(VAR_3, \"Sender \", 7) == 0) &&\n                    (VAR_1->program_name == NULL)) {\n                VAR_3 += 7;\n                VAR_1->program_name = VAR_3;\n\n                /* COMMENT_89 */\n                VAR_3 = strchr(VAR_3, ']');\n                if (VAR_3) {\n                    *VAR_3 = '\\0';\n\n                    /* COMMENT_90 */\n                    VAR_1->p_name_size = strlen(VAR_1->program_name);\n\n                    VAR_3++;\n                }\n                /* COMMENT_91 */\n                else {\n                    VAR_1->program_name = NULL;\n                    break;\n                }\n            }\n\n            /* COMMENT_92 */\n            else if ((strncmp(VAR_3, \"Message \", 8) == 0) &&\n                     (VAR_7 == 0)) {\n                VAR_3 += 8;\n                VAR_7 = 1;\n\n                VAR_1->log = VAR_3;\n\n                /* COMMENT_89 */\n                VAR_3 = strchr(VAR_3, ']');\n                if (VAR_3) {\n                    *VAR_3 = '\\0';\n                    VAR_3++;\n                }\n                /* COMMENT_93 */\n                else {\n                    break;\n                }\n            }\n\n            /* COMMENT_94 */\n            else if (strncmp(VAR_3, \"Host \", 5) == 0) {\n                VAR_3 += 5;\n                VAR_1->hostname = VAR_3;\n\n                /* COMMENT_89 */\n                VAR_3 = strchr(VAR_3, ']');\n                if (VAR_3) {\n                    *VAR_3 = '\\0';\n                    VAR_3++;\n                }\n\n                /* COMMENT_40 */\n                else {\n                    VAR_1->hostname = NULL;\n                }\n                break;\n            }\n\n            /* COMMENT_95 */\n            VAR_3 = strchr(VAR_3, '[');\n        }\n    }\n\n    /* COMMENT_96 */\n                            \n                                           \n       \n    else if ((VAR_2 > 32) &&\n             (VAR_3[0] == '1') &&\n             (isdigit((int)VAR_3[1])) &&\n             (isdigit((int)VAR_3[2])) &&\n             (isdigit((int)VAR_3[3])) &&\n             (VAR_3[10] == '.') &&\n             (isdigit((int)VAR_3[13])) &&\n             (VAR_3[14] == ' ') &&\n             ((VAR_3[21] == ' ') || (VAR_3[22] == ' '))) {\n        VAR_1->log += 14;\n\n        /* COMMENT_100 */\n        while (*VAR_1->log == ' ') {\n            VAR_1->log++;\n        }\n    }\n\n    /* COMMENT_101 */\n                            \n                            \n       \n\n    /* COMMENT_105 */\n    if (VAR_1->location[0] == '(') {\n        /* COMMENT_106 */\n        VAR_1->hostname = VAR_1->location;\n    } else if (VAR_1->hostname == NULL) {\n        VAR_1->hostname = VAR_8;\n    }\n\n    /* COMMENT_107 */\n    VAR_1->time = VAR_9;\n    VAR_4 = localtime(&VAR_9);\n\n    /* COMMENT_108 */\n    VAR_1->day = VAR_4->tm_mday;\n    VAR_1->year = VAR_4->tm_year + 1900;\n    strncpy(VAR_1->mon, VAR_10[VAR_4->tm_mon], 3);\n    snprintf(VAR_1->hour, 9, \"%02d:%02d:%02d\",\n             VAR_4->tm_hour,\n             VAR_4->tm_min,\n             VAR_4->tm_sec);\n\n    /* COMMENT_109 */\n    VAR_11 = VAR_4->tm_hour;\n    VAR_12 = VAR_4->tm_wday;\n\n#ifdef VAR_13\n    if (!VAR_14) {\n        print_out(\"**Phase 1: Completed pre-decoding.\");\n        print_out(\"       full event: '%s'\", VAR_1->full_log);\n        print_out(\"       hostname: '%s'\", VAR_1->hostname);\n        print_out(\"       program_name: '%s'\", VAR_1->program_name);\n        print_out(\"       log: '%s'\", VAR_1->log);\n    }\n#endif\n    return (0);\n}",
    "func_graph_path_before": "ossec/ossec-hids/9b8b14c88188cdc66ab25f92a26918d0cb8a7760/cleanevent.c/vul/before/0.json",
    "func": "int OS_CleanMSG(char *msg, Eventinfo *lf)\n{\n    size_t loglen;\n    char *pieces;\n    struct tm *p;\n\n    /* The message is formatted in the following way:\n     * id:location:message.\n     */\n\n    /* Ignore the id of the message in here */\n    msg += 2;\n\n    /* Set pieces as the message */\n    pieces = strchr(msg, ':');\n    if (!pieces) {\n        merror(FORMAT_ERROR, ARGV0);\n        return (-1);\n    }\n\n    /* Is this from an agent? */\n    if ( *msg == '(' )\n    {   /* look past '->' for the first ':' */\n        pieces = strstr(msg, \"->\");\n        if(!pieces) {\n            merror(FORMAT_ERROR, ARGV0);\n            return(-1);\n        }\n        pieces = strchr(pieces, ':');\n        if(!pieces)\n        {\n            merror(FORMAT_ERROR, ARGV0);\n            return(-1);\n        }\n    }\n\n    *pieces = '\\0';\n    pieces++;\n\n    os_strdup(msg, lf->location);\n\n    /* Get the log length */\n    loglen = strlen(pieces) + 1;\n\n    /* Assign the values in the structure (lf->full_log) */\n    os_malloc((2 * loglen) + 1, lf->full_log);\n\n    /* Set the whole message at full_log */\n    strncpy(lf->full_log, pieces, loglen);\n\n    /* Log is the one used for parsing in the decoders and rules */\n    lf->log = lf->full_log + loglen;\n    strncpy(lf->log, pieces, loglen);\n\n    /* check if month contains an umlaut and repair\n     * umlauts are non-ASCII and use 2 slots in the char array\n     * repair to only one slot so we can detect the correct date format in the next step\n     * ex: M\u00e4r 02 17:30:52\n     */\n    if (pieces[1] == (char) 195) {\n        if (pieces[2] == (char) 164) {\n            pieces[0] = '\\0';\n            pieces[1] = 'M';\n            pieces[2] = 'a';\n            pieces++;\n        }\n    }\n\n    /* Check for the syslog date format\n     * ( ex: Dec 29 10:00:01\n     *   or  2015-04-16 21:51:02,805 for proftpd 1.3.5\n     *   or  2007-06-14T15:48:55-04:00 for syslog-ng isodate\n     *   or  2007-06-14T15:48:55.3352-04:00 for syslog-ng isodate with up to 6 optional fraction of a second\n     *   or  2009-05-22T09:36:46.214994-07:00 for rsyslog\n     *   or  2015 Dec 29 10:00:01 )\n     */\n    if (\n        (   /* ex: Dec 29 10:00:01 */\n            (loglen > 17) &&\n            (pieces[3] == ' ') &&\n            (pieces[6] == ' ') &&\n            (pieces[9] == ':') &&\n            (pieces[12] == ':') &&\n            (pieces[15] == ' ') && (lf->log += 16)\n        )\n        ||\n        (   /* ex: 2015-04-16 21:51:02,805 */\n            (loglen > 24) &&\n            (pieces[4] == '-') &&\n            (pieces[7] == '-') &&\n            (pieces[10] == ' ') &&\n            (pieces[13] == ':') &&\n            (pieces[16] == ':') &&\n            (pieces[19] == ',') &&\n            (lf->log += 23)\n        )\n        ||\n        (\n            (loglen > 33) &&\n            (pieces[4] == '-') &&\n            (pieces[7] == '-') &&\n            (pieces[10] == 'T') &&\n            (pieces[13] == ':') &&\n            (pieces[16] == ':') &&\n            (   /* ex: 2007-06-14T15:48:55-04:00 */\n                (\n                    (pieces[22] == ':') &&\n                    (pieces[25] == ' ') && (lf->log += 26)\n                )\n                ||\n                /* ex: 2007-06-14T15:48:55.3-04:00 or 2009-05-22T09:36:46,214994-07:00 */\n                (\n                    (\n                        (pieces[19] == '.') || (pieces[19] == ',')\n                    )\n                    &&\n                    (\n                        ( (pieces[24] == ':') && (lf->log += 27) ) ||\n                        ( (pieces[25] == ':') && (lf->log += 28) ) ||\n                        ( (pieces[26] == ':') && (lf->log += 29) ) ||\n                        ( (pieces[27] == ':') && (lf->log += 30) ) ||\n                        ( (pieces[28] == ':') && (lf->log += 31) ) ||\n                        ( (pieces[29] == ':') && (lf->log += 32) )\n                    )\n                )\n            )\n        )\n        ||\n        (   /* ex: 2015 Dec 29 10:00:01 */\n            (loglen > 21) &&\n            (isdigit(pieces[0])) &&\n            (pieces[4] == ' ') &&\n            (pieces[8] == ' ') &&\n            (pieces[11] == ' ') &&\n            (pieces[14] == ':') &&\n            (pieces[17] == ':') &&\n            (pieces[20] == ' ') && (lf->log += 21)\n        )\n        ||\n        (\n            /* ex: 2019:11:06-00:08:03 */\n            (loglen > 20) &&\n            (isdigit(pieces[0])) &&\n            (pieces[4] == ':') &&\n            (pieces[7] == ':') &&\n            (pieces[10] == '-') &&\n            (pieces[13] == ':') &&\n            (pieces[16] == ':') && (lf->log += 20)\n        )\n    ) {\n        /* Check for an extra space in here */\n        if (*lf->log == ' ') {\n            lf->log++;\n        }\n\n\n        /* Hostname */\n        pieces = lf->hostname = lf->log;\n\n\n        /* Check for a valid hostname */\n        while (isValidChar(*pieces) == 1) {\n            pieces++;\n        }\n\n        /* Check if it is a syslog without hostname (common on Solaris) */\n        if (*pieces == ':' && pieces[1] == ' ') {\n            /* Getting solaris 8/9 messages without hostname.\n             * In these cases, the process_name should be there.\n             * http://www.ossec.net/wiki/index.php/Log_Samples_Solaris\n             */\n            lf->program_name = lf->hostname;\n            lf->hostname = NULL;\n\n            /* End the program name string */\n            *pieces = '\\0';\n\n            pieces += 2;\n            lf->log = pieces;\n        }\n\n        /* Extract the hostname */\n        else if (*pieces != ' ') {\n            /* Invalid hostname */\n            lf->hostname = NULL;\n            pieces = NULL;\n        } else {\n            /* End the hostname string */\n            *pieces = '\\0';\n\n            /* Move pieces to the beginning of the log message */\n            pieces++;\n            lf->log = pieces;\n\n            /* Get program_name */\n            lf->program_name = pieces;\n\n            /* Extract program_name */\n            /* Valid names:\n             * p_name:\n             * p_name[pid]:\n             * p_name[pid]: [ID xx facility.severity]\n             * auth|security:info p_name:\n             */\n            while (isValidChar(*pieces) == 1) {\n                pieces++;\n            }\n\n            /* Check for the first format: p_name: */\n            if ((*pieces == ':') && (pieces[1] == ' ')) {\n                *pieces = '\\0';\n                pieces += 2;\n            }\n\n            /* Check for the second format: p_name[pid]: */\n            else if ((*pieces == '[') && (isdigit((int)pieces[1]))) {\n                *pieces = '\\0';\n                pieces += 2;\n                while (isdigit((int)*pieces)) {\n                    pieces++;\n                }\n\n                if ((*pieces == ']') && (pieces[1] == ':') && (pieces[2] == ' ')) {\n                    pieces += 3;\n                }\n                /* Some systems are not terminating the program name with\n                 * a ':'. Working around this in here...\n                 */\n                else if ((*pieces == ']') && (pieces[1] == ' ')) {\n                    pieces += 2;\n                } else {\n                    /* Fix for some weird log formats */\n                    pieces--;\n                    while (isdigit((int)*pieces)) {\n                        pieces--;\n                    }\n\n                    if (*pieces == '\\0') {\n                        *pieces = '[';\n                    }\n                    pieces = NULL;\n                    lf->program_name = NULL;\n                }\n            }\n            /* AIX syslog */\n            else if ((*pieces == '|') && islower((int)pieces[1])) {\n                pieces += 2;\n\n                /* Remove facility */\n                while (isalnum((int)*pieces)) {\n                    pieces++;\n                }\n\n                if (*pieces == ':') {\n                    /* Remove severity */\n                    pieces++;\n                    while (isalnum((int)*pieces)) {\n                        pieces++;\n                    }\n\n                    if (*pieces == ' ') {\n                        pieces++;\n                        lf->program_name = pieces;\n\n\n                        /* Get program name again */\n                        while (isValidChar(*pieces) == 1) {\n                            pieces++;\n                        }\n\n                        /* Check for the first format: p_name: */\n                        if ((*pieces == ':') && (pieces[1] == ' ')) {\n                            *pieces = '\\0';\n                            pieces += 2;\n                        }\n\n                        /* Check for the second format: p_name[pid]: */\n                        else if ((*pieces == '[') && (isdigit((int)pieces[1]))) {\n                            *pieces = '\\0';\n                            pieces += 2;\n                            while (isdigit((int)*pieces)) {\n                                pieces++;\n                            }\n\n                            if ((*pieces == ']') && (pieces[1] == ':') &&\n                                    (pieces[2] == ' ')) {\n                                pieces += 3;\n                            } else {\n                                pieces = NULL;\n                            }\n                        }\n                    } else {\n                        pieces = NULL;\n                        lf->program_name = NULL;\n                    }\n                }\n                /* Invalid AIX */\n                else {\n                    pieces = NULL;\n                    lf->program_name = NULL;\n                }\n            } else {\n                pieces = NULL;\n                lf->program_name = NULL;\n            }\n        }\n\n        /* Remove [ID xx facility.severity] */\n        if (pieces) {\n            /* Set log after program name */\n            lf->log = pieces;\n\n            if ((pieces[0] == '[') &&\n                    (pieces[1] == 'I') &&\n                    (pieces[2] == 'D') &&\n                    (pieces[3] == ' ')) {\n                pieces += 4;\n\n                /* Going after the ] */\n                pieces = strchr(pieces, ']');\n                if (pieces) {\n                    pieces += 2;\n                    lf->log = pieces;\n                }\n            }\n        }\n\n        /* Get program name size */\n        if (lf->program_name) {\n            lf->p_name_size = strlen(lf->program_name);\n        }\n    }\n\n    /* xferlog date format\n     * Mon Apr 17 18:27:14 2006 1 64.160.42.130\n     */\n    else if ((loglen > 28) &&\n             (pieces[3] == ' ') &&\n             (pieces[7] == ' ') &&\n             (pieces[10] == ' ') &&\n             (pieces[13] == ':') &&\n             (pieces[16] == ':') &&\n             (pieces[19] == ' ') &&\n             (pieces[24] == ' ') &&\n             (pieces[26] == ' ')) {\n        /* Move log to the beginning of the message */\n        lf->log += 24;\n    }\n\n    /* Check for snort date format\n     * ex: 01/28-09:13:16.240702  [**]\n     */\n    else if ( (loglen > 24) &&\n              (pieces[2] == '/') &&\n              (pieces[5] == '-') &&\n              (pieces[8] == ':') &&\n              (pieces[11] == ':') &&\n              (pieces[14] == '.') &&\n              (pieces[21] == ' ') ) {\n        lf->log += 23;\n    }\n\n    /* Check for suricata (new) date format\n     * ex: 01/28/1979-09:13:16.240702  [**]\n     */\n    else if ( (loglen > 26) &&\n              (pieces[2] == '/') &&\n              (pieces[5] == '/') &&\n              (pieces[10] == '-') &&\n              (pieces[13] == ':') &&\n              (pieces[16] == ':') &&\n              (pieces[19] == '.') &&\n              (pieces[26] == ' ') ) {\n        lf->log += 28;\n    }\n\n\n    /* Check for apache log format */\n    /* [Fri Feb 11 18:06:35 2004] [warn] */\n    else if ( (loglen > 27) &&\n              (pieces[0] == '[') &&\n              (pieces[4] == ' ') &&\n              (pieces[8] == ' ') &&\n              (pieces[11] == ' ') &&\n              (pieces[14] == ':') &&\n              (pieces[17] == ':') &&\n              (pieces[20] == ' ') &&\n              (pieces[25] == ']') ) {\n        lf->log += 27;\n    }\n\n    /* Check for the osx asl log format.\n     * Examples:\n     * [Time 2006.12.28 15:53:55 UTC] [Facility auth] [Sender sshd] [PID 483] [Message error: PAM: Authentication failure for username from 192.168.0.2] [Level 3] [UID -2] [GID -2] [Host Hostname]\n     * [Time 2006.11.02 14:02:11 UTC] [Facility auth] [Sender sshd] [PID 856]\n     [Message refused connect from 59.124.44.34] [Level 4] [UID -2] [GID -2]\n     [Host robert-wyatts-emac]\n     */\n    else if ((loglen > 26) &&\n             (pieces[0] == '[')  &&\n             (pieces[1] == 'T')  &&\n             (pieces[5] == ' ')  &&\n             (pieces[10] == '.') &&\n             (pieces[13] == '.') &&\n             (pieces[16] == ' ') &&\n             (pieces[19] == ':')) {\n        /* Do not read more than 1 message entry -> log tampering */\n        short unsigned int done_message = 0;\n\n        /* Remove the date */\n        lf->log += 25;\n\n        /* Get the desired values */\n        pieces = strchr(lf->log, '[');\n        while (pieces) {\n            pieces++;\n\n            /* Get the sender (set to program name) */\n            if ((strncmp(pieces, \"Sender \", 7) == 0) &&\n                    (lf->program_name == NULL)) {\n                pieces += 7;\n                lf->program_name = pieces;\n\n                /* Get the closing brackets */\n                pieces = strchr(pieces, ']');\n                if (pieces) {\n                    *pieces = '\\0';\n\n                    /* Set program_name size */\n                    lf->p_name_size = strlen(lf->program_name);\n\n                    pieces++;\n                }\n                /* Invalid program name */\n                else {\n                    lf->program_name = NULL;\n                    break;\n                }\n            }\n\n            /* Get message */\n            else if ((strncmp(pieces, \"Message \", 8) == 0) &&\n                     (done_message == 0)) {\n                pieces += 8;\n                done_message = 1;\n\n                lf->log = pieces;\n\n                /* Get the closing brackets */\n                pieces = strchr(pieces, ']');\n                if (pieces) {\n                    *pieces = '\\0';\n                    pieces++;\n                }\n                /* Invalid log closure */\n                else {\n                    break;\n                }\n            }\n\n            /* Get hostname */\n            else if (strncmp(pieces, \"Host \", 5) == 0) {\n                pieces += 5;\n                lf->hostname = pieces;\n\n                /* Get the closing brackets */\n                pieces = strchr(pieces, ']');\n                if (pieces) {\n                    *pieces = '\\0';\n                    pieces++;\n                }\n\n                /* Invalid hostname */\n                else {\n                    lf->hostname = NULL;\n                }\n                break;\n            }\n\n            /* Get next entry */\n            pieces = strchr(pieces, '[');\n        }\n    }\n\n    /* Check for squid date format\n     * 1140804070.368  11623\n     * seconds from 00:00:00 1970-01-01 UTC\n     */\n    else if ((loglen > 32) &&\n             (pieces[0] == '1') &&\n             (isdigit((int)pieces[1])) &&\n             (isdigit((int)pieces[2])) &&\n             (isdigit((int)pieces[3])) &&\n             (pieces[10] == '.') &&\n             (isdigit((int)pieces[13])) &&\n             (pieces[14] == ' ') &&\n             ((pieces[21] == ' ') || (pieces[22] == ' '))) {\n        lf->log += 14;\n\n        /* We need to start at the size of the event */\n        while (*lf->log == ' ') {\n            lf->log++;\n        }\n    }\n\n    /* Every message must be in the format\n     * hostname->location or\n     * (agent) ip->location.\n     */\n\n    /* Set hostname for local messages */\n    if (lf->location[0] == '(') {\n        /* Messages from an agent */\n        lf->hostname = lf->location;\n    } else if (lf->hostname == NULL) {\n        lf->hostname = __shost;\n    }\n\n    /* Set up the event data */\n    lf->time = c_time;\n    p = localtime(&c_time);\n\n    /* Assign hour, day, year and month values */\n    lf->day = p->tm_mday;\n    lf->year = p->tm_year + 1900;\n    strncpy(lf->mon, month[p->tm_mon], 3);\n    snprintf(lf->hour, 9, \"%02d:%02d:%02d\",\n             p->tm_hour,\n             p->tm_min,\n             p->tm_sec);\n\n    /* Set the global hour/weekday */\n    __crt_hour = p->tm_hour;\n    __crt_wday = p->tm_wday;\n\n#ifdef TESTRULE\n    if (!alert_only) {\n        print_out(\"**Phase 1: Completed pre-decoding.\");\n        print_out(\"       full event: '%s'\", lf->full_log);\n        print_out(\"       hostname: '%s'\", lf->hostname);\n        print_out(\"       program_name: '%s'\", lf->program_name);\n        print_out(\"       log: '%s'\", lf->log);\n    }\n#endif\n    return (0);\n}",
    "abstract_func": "int OS_CleanMSG(char *VAR_0, Eventinfo *VAR_1)\n{\n    size_t VAR_2;\n    char *VAR_3;\n    struct tm *VAR_4;\n\n    /* COMMENT_0 */\n                           \n       \n\n    /* COMMENT_3 */\n    VAR_0 += 2;\n\n    /* COMMENT_4 */\n    VAR_3 = strchr(VAR_0, ':');\n    if (!VAR_3) {\n        merror(VAR_5, VAR_6);\n        return (-1);\n    }\n\n    /* COMMENT_5 */\n    if ( *VAR_0 == '(' )\n    {   /* COMMENT_6 */\n        VAR_3 = strstr(VAR_0, \"->\");\n        if(!VAR_3) {\n            merror(VAR_5, VAR_6);\n            return(-1);\n        }\n        VAR_3 = strchr(VAR_3, ':');\n        if(!VAR_3)\n        {\n            merror(VAR_5, VAR_6);\n            return(-1);\n        }\n    }\n\n    *VAR_3 = '\\0';\n    VAR_3++;\n\n    os_strdup(VAR_0, VAR_1->location);\n\n    /* COMMENT_7 */\n    VAR_2 = strlen(VAR_3) + 1;\n\n    /* COMMENT_8 */\n    os_malloc((2 * VAR_2) + 1, VAR_1->full_log);\n\n    /* COMMENT_9 */\n    strncpy(VAR_1->full_log, VAR_3, VAR_2);\n\n    /* COMMENT_10 */\n    VAR_1->log = VAR_1->full_log + VAR_2;\n    strncpy(VAR_1->log, VAR_3, VAR_2);\n\n    /* COMMENT_11 */\n                                                              \n                                                                                        \n                          \n       \n    if (VAR_3[1] == (char) 195) {\n        if (VAR_3[2] == (char) 164) {\n            VAR_3[0] = '\\0';\n            VAR_3[1] = 'M';\n            VAR_3[2] = 'a';\n            VAR_3++;\n        }\n    }\n\n    /* COMMENT_16 */\n                            \n                                                      \n                                                            \n                                                                                                            \n                                                         \n                                   \n       \n    if (\n        (   /* COMMENT_24 */\n            (VAR_2 > 17) &&\n            (VAR_3[3] == ' ') &&\n            (VAR_3[6] == ' ') &&\n            (VAR_3[9] == ':') &&\n            (VAR_3[12] == ':') &&\n            (VAR_3[15] == ' ') && (VAR_1->log += 16)\n        )\n        ||\n        (   /* COMMENT_25 */\n            (VAR_2 > 24) &&\n            (VAR_3[4] == '-') &&\n            (VAR_3[7] == '-') &&\n            (VAR_3[10] == ' ') &&\n            (VAR_3[13] == ':') &&\n            (VAR_3[16] == ':') &&\n            (VAR_3[19] == ',') &&\n            (VAR_1->log += 23)\n        )\n        ||\n        (\n            (VAR_2 > 33) &&\n            (VAR_3[4] == '-') &&\n            (VAR_3[7] == '-') &&\n            (VAR_3[10] == 'T') &&\n            (VAR_3[13] == ':') &&\n            (VAR_3[16] == ':') &&\n            (   /* COMMENT_26 */\n                (\n                    (VAR_3[22] == ':') &&\n                    (VAR_3[25] == ' ') && (VAR_1->log += 26)\n                )\n                ||\n                /* COMMENT_27 */\n                (\n                    (\n                        (VAR_3[19] == '.') || (VAR_3[19] == ',')\n                    )\n                    &&\n                    (\n                        ( (VAR_3[24] == ':') && (VAR_1->log += 27) ) ||\n                        ( (VAR_3[25] == ':') && (VAR_1->log += 28) ) ||\n                        ( (VAR_3[26] == ':') && (VAR_1->log += 29) ) ||\n                        ( (VAR_3[27] == ':') && (VAR_1->log += 30) ) ||\n                        ( (VAR_3[28] == ':') && (VAR_1->log += 31) ) ||\n                        ( (VAR_3[29] == ':') && (VAR_1->log += 32) )\n                    )\n                )\n            )\n        )\n        ||\n        (   /* COMMENT_28 */\n            (VAR_2 > 21) &&\n            (isdigit(VAR_3[0])) &&\n            (VAR_3[4] == ' ') &&\n            (VAR_3[8] == ' ') &&\n            (VAR_3[11] == ' ') &&\n            (VAR_3[14] == ':') &&\n            (VAR_3[17] == ':') &&\n            (VAR_3[20] == ' ') && (VAR_1->log += 21)\n        )\n        ||\n        (\n            /* COMMENT_29 */\n            (VAR_2 > 20) &&\n            (isdigit(VAR_3[0])) &&\n            (VAR_3[4] == ':') &&\n            (VAR_3[7] == ':') &&\n            (VAR_3[10] == '-') &&\n            (VAR_3[13] == ':') &&\n            (VAR_3[16] == ':') && (VAR_1->log += 20)\n        )\n    ) {\n        /* COMMENT_30 */\n        if (*VAR_1->log == ' ') {\n            VAR_1->log++;\n        }\n\n\n        /* COMMENT_31 */\n        VAR_3 = VAR_1->hostname = VAR_1->log;\n\n\n        /* COMMENT_32 */\n        while (isValidChar(*VAR_3) == 1) {\n            VAR_3++;\n        }\n\n        /* COMMENT_33 */\n        if (*VAR_3 == ':' && VAR_3[1] == ' ') {\n            /* COMMENT_34 */\n                                                                \n                                                                      \n               \n            VAR_1->program_name = VAR_1->hostname;\n            VAR_1->hostname = NULL;\n\n            /* COMMENT_38 */\n            *VAR_3 = '\\0';\n\n            VAR_3 += 2;\n            VAR_1->log = VAR_3;\n        }\n\n        /* COMMENT_39 */\n        else if (*VAR_3 != ' ') {\n            /* COMMENT_40 */\n            VAR_1->hostname = NULL;\n            VAR_3 = NULL;\n        } else {\n            /* COMMENT_41 */\n            *VAR_3 = '\\0';\n\n            /* COMMENT_42 */\n            VAR_3++;\n            VAR_1->log = VAR_3;\n\n            /* COMMENT_43 */\n            VAR_1->program_name = VAR_3;\n\n            /* COMMENT_44 */\n            /* COMMENT_45 */\n                      \n                           \n                                                     \n                                         \n               \n            while (isValidChar(*VAR_3) == 1) {\n                VAR_3++;\n            }\n\n            /* COMMENT_51 */\n            if ((*VAR_3 == ':') && (VAR_3[1] == ' ')) {\n                *VAR_3 = '\\0';\n                VAR_3 += 2;\n            }\n\n            /* COMMENT_52 */\n            else if ((*VAR_3 == '[') && (isdigit((int)VAR_3[1]))) {\n                *VAR_3 = '\\0';\n                VAR_3 += 2;\n                while (isdigit((int)*VAR_3)) {\n                    VAR_3++;\n                }\n\n                if ((*VAR_3 == ']') && (VAR_3[1] == ':') && (VAR_3[2] == ' ')) {\n                    VAR_3 += 3;\n                }\n                /* COMMENT_53 */\n                                                        \n                   \n                else if ((*VAR_3 == ']') && (VAR_3[1] == ' ')) {\n                    VAR_3 += 2;\n                } else {\n                    /* COMMENT_56 */\n                    VAR_3--;\n                    while (isdigit((int)*VAR_3)) {\n                        VAR_3--;\n                    }\n\n                    if (*VAR_3 == '\\0') {\n                        *VAR_3 = '[';\n                    }\n                    VAR_3 = NULL;\n                    VAR_1->program_name = NULL;\n                }\n            }\n            /* COMMENT_57 */\n            else if ((*VAR_3 == '|') && islower((int)VAR_3[1])) {\n                VAR_3 += 2;\n\n                /* COMMENT_58 */\n                while (isalnum((int)*VAR_3)) {\n                    VAR_3++;\n                }\n\n                if (*VAR_3 == ':') {\n                    /* COMMENT_59 */\n                    VAR_3++;\n                    while (isalnum((int)*VAR_3)) {\n                        VAR_3++;\n                    }\n\n                    if (*VAR_3 == ' ') {\n                        VAR_3++;\n                        VAR_1->program_name = VAR_3;\n\n\n                        /* COMMENT_60 */\n                        while (isValidChar(*VAR_3) == 1) {\n                            VAR_3++;\n                        }\n\n                        /* COMMENT_51 */\n                        if ((*VAR_3 == ':') && (VAR_3[1] == ' ')) {\n                            *VAR_3 = '\\0';\n                            VAR_3 += 2;\n                        }\n\n                        /* COMMENT_52 */\n                        else if ((*VAR_3 == '[') && (isdigit((int)VAR_3[1]))) {\n                            *VAR_3 = '\\0';\n                            VAR_3 += 2;\n                            while (isdigit((int)*VAR_3)) {\n                                VAR_3++;\n                            }\n\n                            if ((*VAR_3 == ']') && (VAR_3[1] == ':') &&\n                                    (VAR_3[2] == ' ')) {\n                                VAR_3 += 3;\n                            } else {\n                                VAR_3 = NULL;\n                            }\n                        }\n                    } else {\n                        VAR_3 = NULL;\n                        VAR_1->program_name = NULL;\n                    }\n                }\n                /* COMMENT_61 */\n                else {\n                    VAR_3 = NULL;\n                    VAR_1->program_name = NULL;\n                }\n            } else {\n                VAR_3 = NULL;\n                VAR_1->program_name = NULL;\n            }\n        }\n\n        /* COMMENT_62 */\n        if (VAR_3) {\n            /* COMMENT_63 */\n            VAR_1->log = VAR_3;\n\n            if ((VAR_3[0] == '[') &&\n                    (VAR_3[1] == 'I') &&\n                    (VAR_3[2] == 'D') &&\n                    (VAR_3[3] == ' ')) {\n                VAR_3 += 4;\n\n                /* COMMENT_64 */\n                VAR_3 = strchr(VAR_3, ']');\n                if (VAR_3) {\n                    VAR_3 += 2;\n                    VAR_1->log = VAR_3;\n                }\n            }\n        }\n\n        /* COMMENT_65 */\n        if (VAR_1->program_name) {\n            VAR_1->p_name_size = strlen(VAR_1->program_name);\n        }\n    }\n\n    /* COMMENT_66 */\n                                               \n       \n    else if ((VAR_2 > 28) &&\n             (VAR_3[3] == ' ') &&\n             (VAR_3[7] == ' ') &&\n             (VAR_3[10] == ' ') &&\n             (VAR_3[13] == ':') &&\n             (VAR_3[16] == ':') &&\n             (VAR_3[19] == ' ') &&\n             (VAR_3[24] == ' ') &&\n             (VAR_3[26] == ' ')) {\n        /* COMMENT_69 */\n        VAR_1->log += 24;\n    }\n\n    /* COMMENT_70 */\n                                      \n       \n    else if ( (VAR_2 > 24) &&\n              (VAR_3[2] == '/') &&\n              (VAR_3[5] == '-') &&\n              (VAR_3[8] == ':') &&\n              (VAR_3[11] == ':') &&\n              (VAR_3[14] == '.') &&\n              (VAR_3[21] == ' ') ) {\n        VAR_1->log += 23;\n    }\n\n    /* COMMENT_73 */\n                                           \n       \n    else if ( (VAR_2 > 26) &&\n              (VAR_3[2] == '/') &&\n              (VAR_3[5] == '/') &&\n              (VAR_3[10] == '-') &&\n              (VAR_3[13] == ':') &&\n              (VAR_3[16] == ':') &&\n              (VAR_3[19] == '.') &&\n              (VAR_3[26] == ' ') ) {\n        VAR_1->log += 28;\n    }\n\n\n    /* COMMENT_76 */\n    /* COMMENT_77 */\n    else if ( (VAR_2 > 27) &&\n              (VAR_3[0] == '[') &&\n              (VAR_3[4] == ' ') &&\n              (VAR_3[8] == ' ') &&\n              (VAR_3[11] == ' ') &&\n              (VAR_3[14] == ':') &&\n              (VAR_3[17] == ':') &&\n              (VAR_3[20] == ' ') &&\n              (VAR_3[25] == ']') ) {\n        VAR_1->log += 27;\n    }\n\n    /* COMMENT_78 */\n                \n                                                                                                                                                                                                    \n                                                                             \n                                                                            \n                              \n       \n    else if ((VAR_2 > 26) &&\n             (VAR_3[0] == '[')  &&\n             (VAR_3[1] == 'T')  &&\n             (VAR_3[5] == ' ')  &&\n             (VAR_3[10] == '.') &&\n             (VAR_3[13] == '.') &&\n             (VAR_3[16] == ' ') &&\n             (VAR_3[19] == ':')) {\n        /* COMMENT_85 */\n        short unsigned int VAR_7 = 0;\n\n        /* COMMENT_86 */\n        VAR_1->log += 25;\n\n        /* COMMENT_87 */\n        VAR_3 = strchr(VAR_1->log, '[');\n        while (VAR_3) {\n            VAR_3++;\n\n            /* COMMENT_88 */\n            if ((strncmp(VAR_3, \"Sender \", 7) == 0) &&\n                    (VAR_1->program_name == NULL)) {\n                VAR_3 += 7;\n                VAR_1->program_name = VAR_3;\n\n                /* COMMENT_89 */\n                VAR_3 = strchr(VAR_3, ']');\n                if (VAR_3) {\n                    *VAR_3 = '\\0';\n\n                    /* COMMENT_90 */\n                    VAR_1->p_name_size = strlen(VAR_1->program_name);\n\n                    VAR_3++;\n                }\n                /* COMMENT_91 */\n                else {\n                    VAR_1->program_name = NULL;\n                    break;\n                }\n            }\n\n            /* COMMENT_92 */\n            else if ((strncmp(VAR_3, \"Message \", 8) == 0) &&\n                     (VAR_7 == 0)) {\n                VAR_3 += 8;\n                VAR_7 = 1;\n\n                VAR_1->log = VAR_3;\n\n                /* COMMENT_89 */\n                VAR_3 = strchr(VAR_3, ']');\n                if (VAR_3) {\n                    *VAR_3 = '\\0';\n                    VAR_3++;\n                }\n                /* COMMENT_93 */\n                else {\n                    break;\n                }\n            }\n\n            /* COMMENT_94 */\n            else if (strncmp(VAR_3, \"Host \", 5) == 0) {\n                VAR_3 += 5;\n                VAR_1->hostname = VAR_3;\n\n                /* COMMENT_89 */\n                VAR_3 = strchr(VAR_3, ']');\n                if (VAR_3) {\n                    *VAR_3 = '\\0';\n                    VAR_3++;\n                }\n\n                /* COMMENT_40 */\n                else {\n                    VAR_1->hostname = NULL;\n                }\n                break;\n            }\n\n            /* COMMENT_95 */\n            VAR_3 = strchr(VAR_3, '[');\n        }\n    }\n\n    /* COMMENT_96 */\n                            \n                                           \n       \n    else if ((VAR_2 > 32) &&\n             (VAR_3[0] == '1') &&\n             (isdigit((int)VAR_3[1])) &&\n             (isdigit((int)VAR_3[2])) &&\n             (isdigit((int)VAR_3[3])) &&\n             (VAR_3[10] == '.') &&\n             (isdigit((int)VAR_3[13])) &&\n             (VAR_3[14] == ' ') &&\n             ((VAR_3[21] == ' ') || (VAR_3[22] == ' '))) {\n        VAR_1->log += 14;\n\n        /* COMMENT_100 */\n        while (*VAR_1->log == ' ') {\n            VAR_1->log++;\n        }\n    }\n\n    /* COMMENT_101 */\n                            \n                            \n       \n\n    /* COMMENT_105 */\n    if (VAR_1->location[0] == '(') {\n        /* COMMENT_106 */\n        VAR_1->hostname = VAR_1->location;\n    } else if (VAR_1->hostname == NULL) {\n        VAR_1->hostname = VAR_8;\n    }\n\n    /* COMMENT_107 */\n    VAR_1->time = VAR_9;\n    VAR_4 = localtime(&VAR_9);\n\n    /* COMMENT_108 */\n    VAR_1->day = VAR_4->tm_mday;\n    VAR_1->year = VAR_4->tm_year + 1900;\n    strncpy(VAR_1->mon, VAR_10[VAR_4->tm_mon], 3);\n    snprintf(VAR_1->hour, 9, \"%02d:%02d:%02d\",\n             VAR_4->tm_hour,\n             VAR_4->tm_min,\n             VAR_4->tm_sec);\n\n    /* COMMENT_109 */\n    VAR_11 = VAR_4->tm_hour;\n    VAR_12 = VAR_4->tm_wday;\n\n#ifdef VAR_13\n    if (!VAR_14) {\n        print_out(\"**Phase 1: Completed pre-decoding.\");\n        print_out(\"       full event: '%s'\", VAR_1->full_log);\n        print_out(\"       hostname: '%s'\", VAR_1->hostname);\n        print_out(\"       program_name: '%s'\", VAR_1->program_name);\n        print_out(\"       log: '%s'\", VAR_1->log);\n    }\n#endif\n    return (0);\n}",
    "func_graph_path": "ossec/ossec-hids/9b8b14c88188cdc66ab25f92a26918d0cb8a7760/cleanevent.c/vul/after/0.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -21,7 +21,12 @@\n     /* Is this from an agent? */\n     if ( *msg == '(' )\n     {   /* look past '->' for the first ':' */\n-        pieces = strchr(strstr(msg, \"->\"), ':');\n+        pieces = strstr(msg, \"->\");\n+        if(!pieces) {\n+            merror(FORMAT_ERROR, ARGV0);\n+            return(-1);\n+        }\n+        pieces = strchr(pieces, ':');\n         if(!pieces)\n         {\n             merror(FORMAT_ERROR, ARGV0);",
    "diff_line_info": {
        "deleted_lines": [
            "        pieces = strchr(strstr(msg, \"->\"), ':');"
        ],
        "added_lines": [
            "        pieces = strstr(msg, \"->\");",
            "        if(!pieces) {",
            "            merror(FORMAT_ERROR, ARGV0);",
            "            return(-1);",
            "        }",
            "        pieces = strchr(pieces, ':');"
        ]
    },
    "is_vul": true,
    "pr_url": "https://github.com/ossec/ossec-hids/pull/1823",
    "description": "If the `msg` provided to `OS_CleanMSG` has a `(` after the ID, but doesn't not contain a `->` or `:` it should be rejected with a `FORMAT_ERROR`.\r\n\r\nPrev. to this commit nesting `strstr` for `->` as the first argument to `strchr` for `:` results in a null ptr deref when the message is malformed.\r\n\r\nResolves https://github.com/ossec/ossec-hids/issues/1815"
}