{
    "cve_id": "CVE-2017-16909",
    "cwe_ids": [
        "CWE-119"
    ],
    "cvss_vector": "AV:N/AC:M/Au:N/C:P/I:P/A:P",
    "cvss_is_v3": false,
    "repo_name": "LibRaw",
    "commit_msg": "SECUNIA advisory 76000 #1 (wrong fuji width set via tiff tag",
    "commit_hash": "f1394822a0152ceed77815eafa5cac4e8baab10a",
    "git_url": "https://github.com/LibRaw/LibRaw/commit/f1394822a0152ceed77815eafa5cac4e8baab10a",
    "file_path": "internal/dcraw_common.cpp",
    "func_name": "panasonic_load_raw",
    "func_before": "void CLASS panasonic_load_raw()\n{\n  int row, col, i, j, sh = 0, pred[2], nonz[2];\n\n  pana_bits(0);\n  for (row = 0; row < height; row++)\n  {\n#ifdef LIBRAW_LIBRARY_BUILD\n    checkCancel();\n#endif\n    for (col = 0; col < raw_width; col++)\n    {\n      if ((i = col % 14) == 0)\n        pred[0] = pred[1] = nonz[0] = nonz[1] = 0;\n      if (i % 3 == 2)\n        sh = 4 >> (3 - pana_bits(2));\n      if (nonz[i & 1])\n      {\n        if ((j = pana_bits(8)))\n        {\n          if ((pred[i & 1] -= 0x80 << sh) < 0 || sh == 4)\n            pred[i & 1] &= ~((~0u) << sh);\n          pred[i & 1] += j << sh;\n        }\n      }\n      else if ((nonz[i & 1] = pana_bits(8)) || i > 11)\n        pred[i & 1] = nonz[i & 1] << 4 | pana_bits(4);\n      if ((RAW(row, col) = pred[col & 1]) > 4098 && col < width)\n        derror();\n    }\n  }\n}",
    "abstract_func_before": "void VAR_0 panasonic_load_raw()\n{\n  int VAR_1, VAR_2, VAR_3, VAR_4, VAR_5 = 0, VAR_6[2], VAR_7[2];\n\n  pana_bits(0);\n  for (VAR_1 = 0; VAR_1 < VAR_8; VAR_1++)\n  {\n#ifdef VAR_9\n    checkCancel();\n#endif\n    for (VAR_2 = 0; VAR_2 < VAR_10; VAR_2++)\n    {\n      if ((VAR_3 = VAR_2 % 14) == 0)\n        VAR_6[0] = VAR_6[1] = VAR_7[0] = VAR_7[1] = 0;\n      if (VAR_3 % 3 == 2)\n        VAR_5 = 4 >> (3 - pana_bits(2));\n      if (VAR_7[VAR_3 & 1])\n      {\n        if ((VAR_4 = pana_bits(8)))\n        {\n          if ((VAR_6[VAR_3 & 1] -= 0x80 << VAR_5) < 0 || VAR_5 == 4)\n            VAR_6[VAR_3 & 1] &= ~((~0u) << VAR_5);\n          VAR_6[VAR_3 & 1] += VAR_4 << VAR_5;\n        }\n      }\n      else if ((VAR_7[VAR_3 & 1] = pana_bits(8)) || VAR_3 > 11)\n        VAR_6[VAR_3 & 1] = VAR_7[VAR_3 & 1] << 4 | pana_bits(4);\n      if ((RAW(VAR_1, VAR_2) = VAR_6[VAR_2 & 1]) > 4098 && VAR_2 < VAR_11)\n        derror();\n    }\n  }\n}",
    "func_graph_path_before": null,
    "func": "void CLASS panasonic_load_raw()\n{\n  int row, col, i, j, sh = 0, pred[2], nonz[2];\n\n  pana_bits(0);\n  for (row = 0; row < raw_height; row++)\n  {\n#ifdef LIBRAW_LIBRARY_BUILD\n    checkCancel();\n#endif\n    for (col = 0; col < raw_width; col++)\n    {\n      if ((i = col % 14) == 0)\n        pred[0] = pred[1] = nonz[0] = nonz[1] = 0;\n      if (i % 3 == 2)\n        sh = 4 >> (3 - pana_bits(2));\n      if (nonz[i & 1])\n      {\n        if ((j = pana_bits(8)))\n        {\n          if ((pred[i & 1] -= 0x80 << sh) < 0 || sh == 4)\n            pred[i & 1] &= ~((~0u) << sh);\n          pred[i & 1] += j << sh;\n        }\n      }\n      else if ((nonz[i & 1] = pana_bits(8)) || i > 11)\n        pred[i & 1] = nonz[i & 1] << 4 | pana_bits(4);\n      if ((RAW(row, col) = pred[col & 1]) > 4098 && col < width && row < height)\n        derror();\n    }\n  }\n}",
    "abstract_func": "void VAR_0 panasonic_load_raw()\n{\n  int VAR_1, VAR_2, VAR_3, VAR_4, VAR_5 = 0, VAR_6[2], VAR_7[2];\n\n  pana_bits(0);\n  for (VAR_1 = 0; VAR_1 < VAR_8; VAR_1++)\n  {\n#ifdef VAR_9\n    checkCancel();\n#endif\n    for (VAR_2 = 0; VAR_2 < VAR_10; VAR_2++)\n    {\n      if ((VAR_3 = VAR_2 % 14) == 0)\n        VAR_6[0] = VAR_6[1] = VAR_7[0] = VAR_7[1] = 0;\n      if (VAR_3 % 3 == 2)\n        VAR_5 = 4 >> (3 - pana_bits(2));\n      if (VAR_7[VAR_3 & 1])\n      {\n        if ((VAR_4 = pana_bits(8)))\n        {\n          if ((VAR_6[VAR_3 & 1] -= 0x80 << VAR_5) < 0 || VAR_5 == 4)\n            VAR_6[VAR_3 & 1] &= ~((~0u) << VAR_5);\n          VAR_6[VAR_3 & 1] += VAR_4 << VAR_5;\n        }\n      }\n      else if ((VAR_7[VAR_3 & 1] = pana_bits(8)) || VAR_3 > 11)\n        VAR_6[VAR_3 & 1] = VAR_7[VAR_3 & 1] << 4 | pana_bits(4);\n      if ((RAW(VAR_1, VAR_2) = VAR_6[VAR_2 & 1]) > 4098 && VAR_2 < VAR_11 && VAR_1 < VAR_12)\n        derror();\n    }\n  }\n}",
    "func_graph_path": null,
    "diff_func": "--- func_before\n+++ func_after\n@@ -3,7 +3,7 @@\n   int row, col, i, j, sh = 0, pred[2], nonz[2];\n \n   pana_bits(0);\n-  for (row = 0; row < height; row++)\n+  for (row = 0; row < raw_height; row++)\n   {\n #ifdef LIBRAW_LIBRARY_BUILD\n     checkCancel();\n@@ -25,7 +25,7 @@\n       }\n       else if ((nonz[i & 1] = pana_bits(8)) || i > 11)\n         pred[i & 1] = nonz[i & 1] << 4 | pana_bits(4);\n-      if ((RAW(row, col) = pred[col & 1]) > 4098 && col < width)\n+      if ((RAW(row, col) = pred[col & 1]) > 4098 && col < width && row < height)\n         derror();\n     }\n   }",
    "diff_line_info": {
        "deleted_lines": [
            "  for (row = 0; row < height; row++)",
            "      if ((RAW(row, col) = pred[col & 1]) > 4098 && col < width)"
        ],
        "added_lines": [
            "  for (row = 0; row < raw_height; row++)",
            "      if ((RAW(row, col) = pred[col & 1]) > 4098 && col < width && row < height)"
        ]
    },
    "is_vul": true,
    "pr_url": null,
    "description": "no more info"
}