{
    "cve_id": "CVE-2014-7915",
    "cwe_ids": [
        "CWE-189"
    ],
    "cvss_vector": "AV:N/AC:L/Au:N/C:C/I:C/A:C",
    "cvss_is_v3": false,
    "repo_name": "android",
    "commit_msg": "SampleTable: check integer overflow during table alloc\n\nBug: 15328708\nBug: 15342615\nBug: 15342751\nChange-Id: I6bb110a1eba46506799c73be8ff9a4f71c7e7053\n",
    "commit_hash": "edd4a76eb4747bd19ed122df46fa46b452c12a0d",
    "git_url": "https://android.googlesource.com/platform/frameworks/av/+/edd4a76eb4747bd19ed122df46fa46b452c12a0d",
    "file_path": "media/libstagefright/SampleTable.cpp",
    "func_name": "SampleTable::setSyncSampleParams",
    "func_before": "status_t SampleTable::setSyncSampleParams(off64_t data_offset, size_t data_size) {\n    if (mSyncSampleOffset >= 0 || data_size < 8) {\n        return ERROR_MALFORMED;\n    }\n\n    mSyncSampleOffset = data_offset;\n\n    uint8_t header[8];\n    if (mDataSource->readAt(\n                data_offset, header, sizeof(header)) < (ssize_t)sizeof(header)) {\n        return ERROR_IO;\n    }\n\n    if (U32_AT(header) != 0) {\n        // Expected version = 0, flags = 0.\n        return ERROR_MALFORMED;\n    }\n\n    mNumSyncSamples = U32_AT(&header[4]);\n\n    if (mNumSyncSamples < 2) {\n        ALOGV(\"Table of sync samples is empty or has only a single entry!\");\n    }\n\n    mSyncSamples = new uint32_t[mNumSyncSamples];\n    size_t size = mNumSyncSamples * sizeof(uint32_t);\n    if (mDataSource->readAt(mSyncSampleOffset + 8, mSyncSamples, size)\n            != (ssize_t)size) {\n        return ERROR_IO;\n    }\n\n    for (size_t i = 0; i < mNumSyncSamples; ++i) {\n        mSyncSamples[i] = ntohl(mSyncSamples[i]) - 1;\n    }\n\n    return OK;\n}",
    "abstract_func_before": "status_t SampleTable::setSyncSampleParams(off64_t VAR_0, size_t VAR_1) {\n    if (VAR_2 >= 0 || VAR_1 < 8) {\n        return VAR_3;\n    }\n\n    VAR_2 = VAR_0;\n\n    uint8_t VAR_4[8];\n    if (VAR_5->readAt(\n                VAR_0, VAR_4, sizeof(VAR_4)) < (ssize_t)sizeof(VAR_4)) {\n        return VAR_6;\n    }\n\n    if (U32_AT(VAR_4) != 0) {\n        /* COMMENT_0 */\n        return VAR_3;\n    }\n\n    VAR_7 = U32_AT(&VAR_4[4]);\n\n    if (VAR_7 < 2) {\n        ALOGV(\"Table of sync samples is empty or has only a single entry!\");\n    }\n\n    VAR_8 = new uint32_t[VAR_7];\n    size_t VAR_9 = VAR_7 * sizeof(uint32_t);\n    if (VAR_5->readAt(VAR_2 + 8, VAR_8, VAR_9)\n            != (ssize_t)VAR_9) {\n        return VAR_6;\n    }\n\n    for (size_t VAR_10 = 0; VAR_10 < VAR_7; ++VAR_10) {\n        VAR_8[VAR_10] = ntohl(VAR_8[VAR_10]) - 1;\n    }\n\n    return VAR_11;\n}",
    "func_graph_path_before": "android/edd4a76eb4747bd19ed122df46fa46b452c12a0d/SampleTable.cpp/vul/before/2.json",
    "func": "status_t SampleTable::setSyncSampleParams(off64_t data_offset, size_t data_size) {\n    if (mSyncSampleOffset >= 0 || data_size < 8) {\n        return ERROR_MALFORMED;\n    }\n\n    mSyncSampleOffset = data_offset;\n\n    uint8_t header[8];\n    if (mDataSource->readAt(\n                data_offset, header, sizeof(header)) < (ssize_t)sizeof(header)) {\n        return ERROR_IO;\n    }\n\n    if (U32_AT(header) != 0) {\n        // Expected version = 0, flags = 0.\n        return ERROR_MALFORMED;\n    }\n\n    mNumSyncSamples = U32_AT(&header[4]);\n\n    if (mNumSyncSamples < 2) {\n        ALOGV(\"Table of sync samples is empty or has only a single entry!\");\n    }\n\n    uint64_t allocSize = mNumSyncSamples * sizeof(uint32_t);\n    if (allocSize > SIZE_MAX) {\n        return ERROR_OUT_OF_RANGE;\n    }\n\n    mSyncSamples = new uint32_t[mNumSyncSamples];\n    size_t size = mNumSyncSamples * sizeof(uint32_t);\n    if (mDataSource->readAt(mSyncSampleOffset + 8, mSyncSamples, size)\n            != (ssize_t)size) {\n        return ERROR_IO;\n    }\n\n    for (size_t i = 0; i < mNumSyncSamples; ++i) {\n        mSyncSamples[i] = ntohl(mSyncSamples[i]) - 1;\n    }\n\n    return OK;\n}",
    "abstract_func": "status_t SampleTable::setSyncSampleParams(off64_t VAR_0, size_t VAR_1) {\n    if (VAR_2 >= 0 || VAR_1 < 8) {\n        return VAR_3;\n    }\n\n    VAR_2 = VAR_0;\n\n    uint8_t VAR_4[8];\n    if (VAR_5->readAt(\n                VAR_0, VAR_4, sizeof(VAR_4)) < (ssize_t)sizeof(VAR_4)) {\n        return VAR_6;\n    }\n\n    if (U32_AT(VAR_4) != 0) {\n        /* COMMENT_0 */\n        return VAR_3;\n    }\n\n    VAR_7 = U32_AT(&VAR_4[4]);\n\n    if (VAR_7 < 2) {\n        ALOGV(\"Table of sync samples is empty or has only a single entry!\");\n    }\n\n    uint64_t VAR_8 = VAR_7 * sizeof(uint32_t);\n    if (VAR_8 > VAR_9) {\n        return VAR_10;\n    }\n\n    VAR_11 = new uint32_t[VAR_7];\n    size_t VAR_12 = VAR_7 * sizeof(uint32_t);\n    if (VAR_5->readAt(VAR_2 + 8, VAR_11, VAR_12)\n            != (ssize_t)VAR_12) {\n        return VAR_6;\n    }\n\n    for (size_t VAR_13 = 0; VAR_13 < VAR_7; ++VAR_13) {\n        VAR_11[VAR_13] = ntohl(VAR_11[VAR_13]) - 1;\n    }\n\n    return VAR_14;\n}",
    "func_graph_path": "android/edd4a76eb4747bd19ed122df46fa46b452c12a0d/SampleTable.cpp/vul/after/2.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -22,6 +22,11 @@\n         ALOGV(\"Table of sync samples is empty or has only a single entry!\");\n     }\n \n+    uint64_t allocSize = mNumSyncSamples * sizeof(uint32_t);\n+    if (allocSize > SIZE_MAX) {\n+        return ERROR_OUT_OF_RANGE;\n+    }\n+\n     mSyncSamples = new uint32_t[mNumSyncSamples];\n     size_t size = mNumSyncSamples * sizeof(uint32_t);\n     if (mDataSource->readAt(mSyncSampleOffset + 8, mSyncSamples, size)",
    "diff_line_info": {
        "deleted_lines": [],
        "added_lines": [
            "    uint64_t allocSize = mNumSyncSamples * sizeof(uint32_t);",
            "    if (allocSize > SIZE_MAX) {",
            "        return ERROR_OUT_OF_RANGE;",
            "    }",
            ""
        ]
    },
    "is_vul": true,
    "pr_url": null,
    "description": "no more info"
}