{
    "cve_id": "CVE-2021-41141",
    "cwe_ids": [
        "CWE-667"
    ],
    "cvss_vector": "AV:N/AC:L/Au:N/C:N/I:N/A:C",
    "cvss_is_v3": false,
    "repo_name": "pjsip/pjproject",
    "commit_msg": "Merge pull request from GHSA-8fmx-hqw7-6gmc",
    "commit_hash": "1aa2c0e0fb60a1b0bf793e0d834073ffe50fb196",
    "git_url": "https://github.com/pjsip/pjproject/commit/1aa2c0e0fb60a1b0bf793e0d834073ffe50fb196",
    "file_path": "pjmedia/src/pjmedia/vid_conf.c",
    "func_name": "pjmedia_vid_conf_remove_port",
    "func_before": "PJ_DEF(pj_status_t) pjmedia_vid_conf_remove_port( pjmedia_vid_conf *vid_conf,\n\t\t\t\t\t\t  unsigned slot)\n{\n    vconf_port *cport;\n\n    PJ_ASSERT_RETURN(vid_conf && slot<vid_conf->opt.max_slot_cnt, PJ_EINVAL);\n\n    pj_mutex_lock(vid_conf->mutex);\n\n    /* Port must be valid. */\n    cport = vid_conf->ports[slot];\n    if (cport == NULL) {\n\tpj_mutex_unlock(vid_conf->mutex);\n\treturn PJ_EINVAL;\n    }\n\n    /* Disconnect slot -> listeners */\n    while (cport->listener_cnt) {\n\tpjmedia_vid_conf_disconnect_port(vid_conf, slot,\n\t\t\t\t\t cport->listener_slots[0]);\n    }\n\n    /* Disconnect transmitters -> slot */\n    while (cport->transmitter_cnt) {\n\tpjmedia_vid_conf_disconnect_port(vid_conf,\n\t\t\t\t\t cport->transmitter_slots[0], slot);\n    }\n\n    /* Remove the port. */\n    vid_conf->ports[slot] = NULL;\n    --vid_conf->port_cnt;\n\n    PJ_LOG(4,(THIS_FILE,\"Removed port %d (%.*s)\",\n\t      slot, (int)cport->name.slen, cport->name.ptr));\n\n    /* Release pool */\n    pj_pool_safe_release(&cport->pool);\n\n    if (AUTO_STOP_CLOCK && vid_conf->connect_cnt == 0) {\n\tpj_status_t status;\n\n\t/* Warning: will stuck if this is called from the clock thread */\n\tstatus = pjmedia_clock_stop(vid_conf->clock);\n\tif (status != PJ_SUCCESS) {\n\t    PJ_PERROR(4, (THIS_FILE, status, \"Failed to stop clock\"));\n\t    return status;\n\t}\n    }\n\n    pj_mutex_unlock(vid_conf->mutex);\n\n    return PJ_SUCCESS;\n}",
    "abstract_func_before": "VAR_0(pj_status_t) pjmedia_vid_conf_remove_port( pjmedia_vid_conf *VAR_1,\n\t\t\t\t\t\t  unsigned VAR_2)\n{\n    vconf_port *VAR_3;\n\n    PJ_ASSERT_RETURN(VAR_1 && VAR_2<VAR_1->opt.max_slot_cnt, VAR_4);\n\n    pj_mutex_lock(VAR_1->mutex);\n\n    /* COMMENT_0 */\n    VAR_3 = VAR_1->ports[VAR_2];\n    if (VAR_3 == NULL) {\n\tpj_mutex_unlock(VAR_1->mutex);\n\treturn VAR_4;\n    }\n\n    /* COMMENT_1 */\n    while (VAR_3->listener_cnt) {\n\tpjmedia_vid_conf_disconnect_port(VAR_1, VAR_2,\n\t\t\t\t\t VAR_3->listener_slots[0]);\n    }\n\n    /* COMMENT_2 */\n    while (VAR_3->transmitter_cnt) {\n\tpjmedia_vid_conf_disconnect_port(VAR_1,\n\t\t\t\t\t VAR_3->transmitter_slots[0], VAR_2);\n    }\n\n    /* COMMENT_3 */\n    VAR_1->ports[VAR_2] = NULL;\n    --VAR_1->port_cnt;\n\n    PJ_LOG(4,(VAR_5,\"Removed port %d (%.*s)\",\n\t      VAR_2, (int)VAR_3->name.slen, VAR_3->name.ptr));\n\n    /* COMMENT_4 */\n    pj_pool_safe_release(&VAR_3->pool);\n\n    if (VAR_6 && VAR_1->connect_cnt == 0) {\n\tpj_status_t VAR_7;\n\n\t/* COMMENT_5 */\n\tVAR_7 = pjmedia_clock_stop(VAR_1->clock);\n\tif (VAR_7 != VAR_8) {\n\t    PJ_PERROR(4, (VAR_5, VAR_7, \"Failed to stop clock\"));\n\t    return VAR_7;\n\t}\n    }\n\n    pj_mutex_unlock(VAR_1->mutex);\n\n    return VAR_8;\n}",
    "func_graph_path_before": null,
    "func": "PJ_DEF(pj_status_t) pjmedia_vid_conf_remove_port( pjmedia_vid_conf *vid_conf,\n\t\t\t\t\t\t  unsigned slot)\n{\n    vconf_port *cport;\n\n    PJ_ASSERT_RETURN(vid_conf && slot<vid_conf->opt.max_slot_cnt, PJ_EINVAL);\n\n    pj_mutex_lock(vid_conf->mutex);\n\n    /* Port must be valid. */\n    cport = vid_conf->ports[slot];\n    if (cport == NULL) {\n\tpj_mutex_unlock(vid_conf->mutex);\n\treturn PJ_EINVAL;\n    }\n\n    /* Disconnect slot -> listeners */\n    while (cport->listener_cnt) {\n\tpjmedia_vid_conf_disconnect_port(vid_conf, slot,\n\t\t\t\t\t cport->listener_slots[0]);\n    }\n\n    /* Disconnect transmitters -> slot */\n    while (cport->transmitter_cnt) {\n\tpjmedia_vid_conf_disconnect_port(vid_conf,\n\t\t\t\t\t cport->transmitter_slots[0], slot);\n    }\n\n    /* Remove the port. */\n    vid_conf->ports[slot] = NULL;\n    --vid_conf->port_cnt;\n\n    PJ_LOG(4,(THIS_FILE,\"Removed port %d (%.*s)\",\n\t      slot, (int)cport->name.slen, cport->name.ptr));\n\n    /* Release pool */\n    pj_pool_safe_release(&cport->pool);\n\n    if (AUTO_STOP_CLOCK && vid_conf->connect_cnt == 0) {\n\tpj_status_t status;\n\n\t/* Warning: will stuck if this is called from the clock thread */\n\tstatus = pjmedia_clock_stop(vid_conf->clock);\n\tif (status != PJ_SUCCESS) {\n\t    PJ_PERROR(4, (THIS_FILE, status, \"Failed to stop clock\"));\n\t    pj_mutex_unlock(vid_conf->mutex);\n\t    return status;\n\t}\n    }\n\n    pj_mutex_unlock(vid_conf->mutex);\n\n    return PJ_SUCCESS;\n}",
    "abstract_func": "VAR_0(pj_status_t) pjmedia_vid_conf_remove_port( pjmedia_vid_conf *VAR_1,\n\t\t\t\t\t\t  unsigned VAR_2)\n{\n    vconf_port *VAR_3;\n\n    PJ_ASSERT_RETURN(VAR_1 && VAR_2<VAR_1->opt.max_slot_cnt, VAR_4);\n\n    pj_mutex_lock(VAR_1->mutex);\n\n    /* COMMENT_0 */\n    VAR_3 = VAR_1->ports[VAR_2];\n    if (VAR_3 == NULL) {\n\tpj_mutex_unlock(VAR_1->mutex);\n\treturn VAR_4;\n    }\n\n    /* COMMENT_1 */\n    while (VAR_3->listener_cnt) {\n\tpjmedia_vid_conf_disconnect_port(VAR_1, VAR_2,\n\t\t\t\t\t VAR_3->listener_slots[0]);\n    }\n\n    /* COMMENT_2 */\n    while (VAR_3->transmitter_cnt) {\n\tpjmedia_vid_conf_disconnect_port(VAR_1,\n\t\t\t\t\t VAR_3->transmitter_slots[0], VAR_2);\n    }\n\n    /* COMMENT_3 */\n    VAR_1->ports[VAR_2] = NULL;\n    --VAR_1->port_cnt;\n\n    PJ_LOG(4,(VAR_5,\"Removed port %d (%.*s)\",\n\t      VAR_2, (int)VAR_3->name.slen, VAR_3->name.ptr));\n\n    /* COMMENT_4 */\n    pj_pool_safe_release(&VAR_3->pool);\n\n    if (VAR_6 && VAR_1->connect_cnt == 0) {\n\tpj_status_t VAR_7;\n\n\t/* COMMENT_5 */\n\tVAR_7 = pjmedia_clock_stop(VAR_1->clock);\n\tif (VAR_7 != VAR_8) {\n\t    PJ_PERROR(4, (VAR_5, VAR_7, \"Failed to stop clock\"));\n\t    pj_mutex_unlock(VAR_1->mutex);\n\t    return VAR_7;\n\t}\n    }\n\n    pj_mutex_unlock(VAR_1->mutex);\n\n    return VAR_8;\n}",
    "func_graph_path": null,
    "diff_func": "--- func_before\n+++ func_after\n@@ -43,6 +43,7 @@\n \tstatus = pjmedia_clock_stop(vid_conf->clock);\n \tif (status != PJ_SUCCESS) {\n \t    PJ_PERROR(4, (THIS_FILE, status, \"Failed to stop clock\"));\n+\t    pj_mutex_unlock(vid_conf->mutex);\n \t    return status;\n \t}\n     }",
    "diff_line_info": {
        "deleted_lines": [],
        "added_lines": [
            "\t    pj_mutex_unlock(vid_conf->mutex);"
        ]
    },
    "is_vul": true,
    "pr_url": null,
    "description": "no more info"
}