{
    "cve_id": "CVE-2014-4043",
    "cwe_ids": [
        "CWE-94"
    ],
    "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:P/A:P",
    "cvss_is_v3": false,
    "repo_name": "glibc",
    "commit_msg": "\nposix_spawn_file_actions_addopen needs to copy the path argument (BZ 17048)\n\nPOSIX requires that we make a copy, so we allocate a new string\nand free it in posix_spawn_file_actions_destroy.\n\nReported by David Reid, Alex Gaynor, and Glyph Lefkowitz.  This bug\nmay have security implications.\n",
    "commit_hash": "89e435f3559c53084498e9baad22172b64429362",
    "git_url": "https://sourceware.org/git/gitweb.cgi?p=glibc.git;h=89e435f3559c53084498e9baad22172b64429362",
    "file_path": "posix/spawn_faction_addopen.c",
    "func_name": "posix_spawn_file_actions_addopen",
    "func_before": "int\nposix_spawn_file_actions_addopen (posix_spawn_file_actions_t *file_actions,\n\t\t\t\t  int fd, const char *path, int oflag,\n\t\t\t\t  mode_t mode)\n{\n  int maxfd = __sysconf (_SC_OPEN_MAX);\n  struct __spawn_action *rec;\n\n  /* Test for the validity of the file descriptor.  */\n  if (fd < 0 || fd >= maxfd)\n    return EBADF;\n\n  /* Allocate more memory if needed.  */\n  if (file_actions->__used == file_actions->__allocated\n      && __posix_spawn_file_actions_realloc (file_actions) != 0)\n    /* This can only mean we ran out of memory.  */\n    return ENOMEM;\n\n  /* Add the new value.  */\n  rec = &file_actions->__actions[file_actions->__used];\n  rec->tag = spawn_do_open;\n  rec->action.open_action.fd = fd;\n  rec->action.open_action.path = path;\n  rec->action.open_action.oflag = oflag;\n  rec->action.open_action.mode = mode;\n\n  /* Account for the new entry.  */\n  ++file_actions->__used;\n\n  return 0;\n}",
    "abstract_func_before": "int\nposix_spawn_file_actions_addopen (posix_spawn_file_actions_t *VAR_0,\n\t\t\t\t  int VAR_1, const char *VAR_2, int VAR_3,\n\t\t\t\t  mode_t VAR_4)\n{\n  int VAR_5 = __sysconf (VAR_6);\n  struct __spawn_action *VAR_7;\n\n  /* COMMENT_0 */\n  if (VAR_1 < 0 || VAR_1 >= VAR_5)\n    return VAR_8;\n\n  /* COMMENT_1 */\n  if (VAR_0->__used == VAR_0->__allocated\n      && __posix_spawn_file_actions_realloc (VAR_0) != 0)\n    /* COMMENT_2 */\n    return VAR_9;\n\n  /* COMMENT_3 */\n  VAR_7 = &VAR_0->__actions[VAR_0->__used];\n  VAR_7->tag = VAR_10;\n  VAR_7->action.open_action.fd = VAR_1;\n  VAR_7->action.open_action.path = VAR_2;\n  VAR_7->action.open_action.oflag = VAR_3;\n  VAR_7->action.open_action.mode = VAR_4;\n\n  /* COMMENT_4 */\n  ++VAR_0->__used;\n\n  return 0;\n}",
    "func_graph_path_before": "glibc/89e435f3559c53084498e9baad22172b64429362/spawn_faction_addopen.c/vul/before/0.json",
    "func": "int\nposix_spawn_file_actions_addopen (posix_spawn_file_actions_t *file_actions,\n\t\t\t\t  int fd, const char *path, int oflag,\n\t\t\t\t  mode_t mode)\n{\n  int maxfd = __sysconf (_SC_OPEN_MAX);\n  struct __spawn_action *rec;\n\n  /* Test for the validity of the file descriptor.  */\n  if (fd < 0 || fd >= maxfd)\n    return EBADF;\n\n  char *path_copy = strdup (path);\n  if (path_copy == NULL)\n    return ENOMEM;\n\n  /* Allocate more memory if needed.  */\n  if (file_actions->__used == file_actions->__allocated\n      && __posix_spawn_file_actions_realloc (file_actions) != 0)\n    {\n      /* This can only mean we ran out of memory.  */\n      free (path_copy);\n      return ENOMEM;\n    }\n\n  /* Add the new value.  */\n  rec = &file_actions->__actions[file_actions->__used];\n  rec->tag = spawn_do_open;\n  rec->action.open_action.fd = fd;\n  rec->action.open_action.path = path_copy;\n  rec->action.open_action.oflag = oflag;\n  rec->action.open_action.mode = mode;\n\n  /* Account for the new entry.  */\n  ++file_actions->__used;\n\n  return 0;\n}",
    "abstract_func": "int\nposix_spawn_file_actions_addopen (posix_spawn_file_actions_t *VAR_0,\n\t\t\t\t  int VAR_1, const char *VAR_2, int VAR_3,\n\t\t\t\t  mode_t VAR_4)\n{\n  int VAR_5 = __sysconf (VAR_6);\n  struct __spawn_action *VAR_7;\n\n  /* COMMENT_0 */\n  if (VAR_1 < 0 || VAR_1 >= VAR_5)\n    return VAR_8;\n\n  char *VAR_9 = strdup (VAR_2);\n  if (VAR_9 == NULL)\n    return VAR_10;\n\n  /* COMMENT_1 */\n  if (VAR_0->__used == VAR_0->__allocated\n      && __posix_spawn_file_actions_realloc (VAR_0) != 0)\n    {\n      /* COMMENT_2 */\n      free (VAR_9);\n      return VAR_10;\n    }\n\n  /* COMMENT_3 */\n  VAR_7 = &VAR_0->__actions[VAR_0->__used];\n  VAR_7->tag = VAR_11;\n  VAR_7->action.open_action.fd = VAR_1;\n  VAR_7->action.open_action.path = VAR_9;\n  VAR_7->action.open_action.oflag = VAR_3;\n  VAR_7->action.open_action.mode = VAR_4;\n\n  /* COMMENT_4 */\n  ++VAR_0->__used;\n\n  return 0;\n}",
    "func_graph_path": "glibc/89e435f3559c53084498e9baad22172b64429362/spawn_faction_addopen.c/vul/after/0.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -10,17 +10,24 @@\n   if (fd < 0 || fd >= maxfd)\n     return EBADF;\n \n+  char *path_copy = strdup (path);\n+  if (path_copy == NULL)\n+    return ENOMEM;\n+\n   /* Allocate more memory if needed.  */\n   if (file_actions->__used == file_actions->__allocated\n       && __posix_spawn_file_actions_realloc (file_actions) != 0)\n-    /* This can only mean we ran out of memory.  */\n-    return ENOMEM;\n+    {\n+      /* This can only mean we ran out of memory.  */\n+      free (path_copy);\n+      return ENOMEM;\n+    }\n \n   /* Add the new value.  */\n   rec = &file_actions->__actions[file_actions->__used];\n   rec->tag = spawn_do_open;\n   rec->action.open_action.fd = fd;\n-  rec->action.open_action.path = path;\n+  rec->action.open_action.path = path_copy;\n   rec->action.open_action.oflag = oflag;\n   rec->action.open_action.mode = mode;\n ",
    "diff_line_info": {
        "deleted_lines": [
            "    /* This can only mean we ran out of memory.  */",
            "    return ENOMEM;",
            "  rec->action.open_action.path = path;"
        ],
        "added_lines": [
            "  char *path_copy = strdup (path);",
            "  if (path_copy == NULL)",
            "    return ENOMEM;",
            "",
            "    {",
            "      /* This can only mean we ran out of memory.  */",
            "      free (path_copy);",
            "      return ENOMEM;",
            "    }",
            "  rec->action.open_action.path = path_copy;"
        ]
    },
    "is_vul": true,
    "pr_url": null,
    "description": "no more info"
}