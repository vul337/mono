{
    "cve_id": "CVE-2023-1981",
    "cwe_ids": [
        "CWE-400"
    ],
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H",
    "cvss_is_v3": true,
    "repo_name": "avahi",
    "commit_msg": "Emit error if requested service is not found\n\nIt currently just crashes instead of replying with error. Check return\nvalue and emit error instead of passing NULL pointer to reply.\n\nFixes #375",
    "commit_hash": "a2696da2f2c50ac43b6c4903f72290d5c3fa9f6f",
    "git_url": "https://github.com/avahi/avahi/commit/a2696da2f2c50ac43b6c4903f72290d5c3fa9f6f",
    "file_path": "avahi-daemon/dbus-protocol.c",
    "func_name": "dbus_get_alternative_service_name",
    "func_before": "static DBusHandlerResult dbus_get_alternative_service_name(DBusConnection *c, DBusMessage *m, DBusError *error) {\n    char *n, *t;\n\n    if (!(dbus_message_get_args(m, error, DBUS_TYPE_STRING, &n, DBUS_TYPE_INVALID)) || !n) {\n        return dbus_parsing_error(\"Error parsing Server::GetAlternativeServiceName message\", error);\n    }\n\n    t = avahi_alternative_service_name(n);\n    avahi_dbus_respond_string(c, m, t);\n    avahi_free(t);\n\n    return DBUS_HANDLER_RESULT_HANDLED;\n}",
    "abstract_func_before": "static DBusHandlerResult dbus_get_alternative_service_name(DBusConnection *VAR_0, DBusMessage *VAR_1, DBusError *VAR_2) {\n    char *VAR_3, *VAR_4;\n\n    if (!(dbus_message_get_args(VAR_1, VAR_2, VAR_5, &VAR_3, VAR_6)) || !VAR_3) {\n        return dbus_parsing_error(\"Error parsing Server::GetAlternativeServiceName message\", VAR_2);\n    }\n\n    VAR_4 = avahi_alternative_service_name(VAR_3);\n    avahi_dbus_respond_string(VAR_0, VAR_1, VAR_4);\n    avahi_free(VAR_4);\n\n    return VAR_7;\n}",
    "func_graph_path_before": "avahi/a2696da2f2c50ac43b6c4903f72290d5c3fa9f6f/dbus-protocol.c/vul/before/0.json",
    "func": "static DBusHandlerResult dbus_get_alternative_service_name(DBusConnection *c, DBusMessage *m, DBusError *error) {\n    char *n, *t;\n\n    if (!(dbus_message_get_args(m, error, DBUS_TYPE_STRING, &n, DBUS_TYPE_INVALID)) || !n) {\n        return dbus_parsing_error(\"Error parsing Server::GetAlternativeServiceName message\", error);\n    }\n\n    t = avahi_alternative_service_name(n);\n    if (t) {\n        avahi_dbus_respond_string(c, m, t);\n        avahi_free(t);\n\n        return DBUS_HANDLER_RESULT_HANDLED;\n    } else {\n        return avahi_dbus_respond_error(c, m, AVAHI_ERR_NOT_FOUND, \"Service not found\");\n    }\n}",
    "abstract_func": "static DBusHandlerResult dbus_get_alternative_service_name(DBusConnection *VAR_0, DBusMessage *VAR_1, DBusError *VAR_2) {\n    char *VAR_3, *VAR_4;\n\n    if (!(dbus_message_get_args(VAR_1, VAR_2, VAR_5, &VAR_3, VAR_6)) || !VAR_3) {\n        return dbus_parsing_error(\"Error parsing Server::GetAlternativeServiceName message\", VAR_2);\n    }\n\n    VAR_4 = avahi_alternative_service_name(VAR_3);\n    if (VAR_4) {\n        avahi_dbus_respond_string(VAR_0, VAR_1, VAR_4);\n        avahi_free(VAR_4);\n\n        return VAR_7;\n    } else {\n        return avahi_dbus_respond_error(VAR_0, VAR_1, VAR_8, \"Service not found\");\n    }\n}",
    "func_graph_path": "avahi/a2696da2f2c50ac43b6c4903f72290d5c3fa9f6f/dbus-protocol.c/vul/after/0.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -6,8 +6,12 @@\n     }\n \n     t = avahi_alternative_service_name(n);\n-    avahi_dbus_respond_string(c, m, t);\n-    avahi_free(t);\n+    if (t) {\n+        avahi_dbus_respond_string(c, m, t);\n+        avahi_free(t);\n \n-    return DBUS_HANDLER_RESULT_HANDLED;\n+        return DBUS_HANDLER_RESULT_HANDLED;\n+    } else {\n+        return avahi_dbus_respond_error(c, m, AVAHI_ERR_NOT_FOUND, \"Service not found\");\n+    }\n }",
    "diff_line_info": {
        "deleted_lines": [
            "    avahi_dbus_respond_string(c, m, t);",
            "    avahi_free(t);",
            "    return DBUS_HANDLER_RESULT_HANDLED;"
        ],
        "added_lines": [
            "    if (t) {",
            "        avahi_dbus_respond_string(c, m, t);",
            "        avahi_free(t);",
            "        return DBUS_HANDLER_RESULT_HANDLED;",
            "    } else {",
            "        return avahi_dbus_respond_error(c, m, AVAHI_ERR_NOT_FOUND, \"Service not found\");",
            "    }"
        ]
    },
    "is_vul": true,
    "pr_url": "https://github.com/avahi/avahi/pull/407",
    "description": "It currently just crashes instead of replying with error. Check return value and emit error instead of passing NULL pointer to reply.\r\n\r\nFixes #375"
}