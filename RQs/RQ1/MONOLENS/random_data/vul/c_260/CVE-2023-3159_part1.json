{
    "cve_id": "CVE-2023-3159",
    "cwe_ids": [
        "CWE-416"
    ],
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H",
    "cvss_is_v3": true,
    "repo_name": "torvalds/linux",
    "commit_msg": "firewire: fix potential uaf in outbound_phy_packet_callback()\n\n&e->event and e point to the same address, and &e->event could\nbe freed in queue_event. So there is a potential uaf issue if\nwe dereference e after calling queue_event(). Fix this by adding\na temporary variable to maintain e->client in advance, this can\navoid the potential uaf issue.\n\nCc: <stable@vger.kernel.org>\nSigned-off-by: Chengfeng Ye <cyeaa@connect.ust.hk>\nSigned-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>\nLink: https://lore.kernel.org/r/20220409041243.603210-2-o-takashi@sakamocchi.jp\nSigned-off-by: Takashi Iwai <tiwai@suse.de>",
    "commit_hash": "b7c81f80246fac44077166f3e07103affe6db8ff",
    "git_url": "https://github.com/torvalds/linux/commit/b7c81f80246fac44077166f3e07103affe6db8ff",
    "file_path": "drivers/firewire/core-cdev.c",
    "func_name": "outbound_phy_packet_callback",
    "func_before": "static void outbound_phy_packet_callback(struct fw_packet *packet,\n\t\t\t\t\t struct fw_card *card, int status)\n{\n\tstruct outbound_phy_packet_event *e =\n\t\tcontainer_of(packet, struct outbound_phy_packet_event, p);\n\n\tswitch (status) {\n\t/* expected: */\n\tcase ACK_COMPLETE:\te->phy_packet.rcode = RCODE_COMPLETE;\tbreak;\n\t/* should never happen with PHY packets: */\n\tcase ACK_PENDING:\te->phy_packet.rcode = RCODE_COMPLETE;\tbreak;\n\tcase ACK_BUSY_X:\n\tcase ACK_BUSY_A:\n\tcase ACK_BUSY_B:\te->phy_packet.rcode = RCODE_BUSY;\tbreak;\n\tcase ACK_DATA_ERROR:\te->phy_packet.rcode = RCODE_DATA_ERROR;\tbreak;\n\tcase ACK_TYPE_ERROR:\te->phy_packet.rcode = RCODE_TYPE_ERROR;\tbreak;\n\t/* stale generation; cancelled; on certain controllers: no ack */\n\tdefault:\t\te->phy_packet.rcode = status;\t\tbreak;\n\t}\n\te->phy_packet.data[0] = packet->timestamp;\n\n\tqueue_event(e->client, &e->event, &e->phy_packet,\n\t\t    sizeof(e->phy_packet) + e->phy_packet.length, NULL, 0);\n\tclient_put(e->client);\n}",
    "abstract_func_before": "static void outbound_phy_packet_callback(struct fw_packet *VAR_0,\n\t\t\t\t\t struct fw_card *VAR_1, int VAR_2)\n{\n\tstruct outbound_phy_packet_event *VAR_3 =\n\t\tcontainer_of(VAR_0, struct outbound_phy_packet_event, VAR_4);\n\n\tswitch (VAR_2) {\n\t/* COMMENT_0 */\n\tcase VAR_5:\tVAR_3->phy_packet.rcode = VAR_6;\tbreak;\n\t/* COMMENT_1 */\n\tcase VAR_7:\tVAR_3->phy_packet.rcode = VAR_6;\tbreak;\n\tcase VAR_8:\n\tcase VAR_9:\n\tcase VAR_10:\tVAR_3->phy_packet.rcode = VAR_11;\tbreak;\n\tcase VAR_12:\tVAR_3->phy_packet.rcode = VAR_13;\tbreak;\n\tcase VAR_14:\tVAR_3->phy_packet.rcode = VAR_15;\tbreak;\n\t/* COMMENT_2 */\n\tdefault:\t\tVAR_3->phy_packet.rcode = VAR_2;\t\tbreak;\n\t}\n\tVAR_3->phy_packet.data[0] = VAR_0->timestamp;\n\n\tqueue_event(VAR_3->client, &VAR_3->event, &VAR_3->phy_packet,\n\t\t    sizeof(VAR_3->phy_packet) + VAR_3->phy_packet.length, NULL, 0);\n\tclient_put(VAR_3->client);\n}",
    "func_graph_path_before": "torvalds/linux/b7c81f80246fac44077166f3e07103affe6db8ff/core-cdev.c/vul/before/0.json",
    "func": "static void outbound_phy_packet_callback(struct fw_packet *packet,\n\t\t\t\t\t struct fw_card *card, int status)\n{\n\tstruct outbound_phy_packet_event *e =\n\t\tcontainer_of(packet, struct outbound_phy_packet_event, p);\n\tstruct client *e_client;\n\n\tswitch (status) {\n\t/* expected: */\n\tcase ACK_COMPLETE:\te->phy_packet.rcode = RCODE_COMPLETE;\tbreak;\n\t/* should never happen with PHY packets: */\n\tcase ACK_PENDING:\te->phy_packet.rcode = RCODE_COMPLETE;\tbreak;\n\tcase ACK_BUSY_X:\n\tcase ACK_BUSY_A:\n\tcase ACK_BUSY_B:\te->phy_packet.rcode = RCODE_BUSY;\tbreak;\n\tcase ACK_DATA_ERROR:\te->phy_packet.rcode = RCODE_DATA_ERROR;\tbreak;\n\tcase ACK_TYPE_ERROR:\te->phy_packet.rcode = RCODE_TYPE_ERROR;\tbreak;\n\t/* stale generation; cancelled; on certain controllers: no ack */\n\tdefault:\t\te->phy_packet.rcode = status;\t\tbreak;\n\t}\n\te->phy_packet.data[0] = packet->timestamp;\n\n\te_client = e->client;\n\tqueue_event(e->client, &e->event, &e->phy_packet,\n\t\t    sizeof(e->phy_packet) + e->phy_packet.length, NULL, 0);\n\tclient_put(e_client);\n}",
    "abstract_func": "static void outbound_phy_packet_callback(struct fw_packet *VAR_0,\n\t\t\t\t\t struct fw_card *VAR_1, int VAR_2)\n{\n\tstruct outbound_phy_packet_event *VAR_3 =\n\t\tcontainer_of(VAR_0, struct outbound_phy_packet_event, VAR_4);\n\tstruct client *VAR_5;\n\n\tswitch (VAR_2) {\n\t/* COMMENT_0 */\n\tcase VAR_6:\tVAR_3->phy_packet.rcode = VAR_7;\tbreak;\n\t/* COMMENT_1 */\n\tcase VAR_8:\tVAR_3->phy_packet.rcode = VAR_7;\tbreak;\n\tcase VAR_9:\n\tcase VAR_10:\n\tcase VAR_11:\tVAR_3->phy_packet.rcode = VAR_12;\tbreak;\n\tcase VAR_13:\tVAR_3->phy_packet.rcode = VAR_14;\tbreak;\n\tcase VAR_15:\tVAR_3->phy_packet.rcode = VAR_16;\tbreak;\n\t/* COMMENT_2 */\n\tdefault:\t\tVAR_3->phy_packet.rcode = VAR_2;\t\tbreak;\n\t}\n\tVAR_3->phy_packet.data[0] = VAR_0->timestamp;\n\n\tVAR_5 = VAR_3->client;\n\tqueue_event(VAR_3->client, &VAR_3->event, &VAR_3->phy_packet,\n\t\t    sizeof(VAR_3->phy_packet) + VAR_3->phy_packet.length, NULL, 0);\n\tclient_put(VAR_5);\n}",
    "func_graph_path": "torvalds/linux/b7c81f80246fac44077166f3e07103affe6db8ff/core-cdev.c/vul/after/0.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -3,6 +3,7 @@\n {\n \tstruct outbound_phy_packet_event *e =\n \t\tcontainer_of(packet, struct outbound_phy_packet_event, p);\n+\tstruct client *e_client;\n \n \tswitch (status) {\n \t/* expected: */\n@@ -19,7 +20,8 @@\n \t}\n \te->phy_packet.data[0] = packet->timestamp;\n \n+\te_client = e->client;\n \tqueue_event(e->client, &e->event, &e->phy_packet,\n \t\t    sizeof(e->phy_packet) + e->phy_packet.length, NULL, 0);\n-\tclient_put(e->client);\n+\tclient_put(e_client);\n }",
    "diff_line_info": {
        "deleted_lines": [
            "\tclient_put(e->client);"
        ],
        "added_lines": [
            "\tstruct client *e_client;",
            "\te_client = e->client;",
            "\tclient_put(e_client);"
        ]
    },
    "is_vul": true,
    "pr_url": null,
    "description": "no more info"
}