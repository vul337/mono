{
    "cve_id": "CVE-2019-15681",
    "cwe_ids": [
        "CWE-665"
    ],
    "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:N/A:N",
    "cvss_is_v3": false,
    "repo_name": "LibVNC/libvncserver",
    "commit_msg": "rfbserver: don't leak stack memory to the remote\n\nThanks go to Pavel Cheremushkin of Kaspersky for reporting.",
    "commit_hash": "d01e1bb4246323ba6fcee3b82ef1faa9b1dac82a",
    "git_url": "https://github.com/LibVNC/libvncserver/commit/d01e1bb4246323ba6fcee3b82ef1faa9b1dac82a",
    "file_path": "libvncserver/rfbserver.c",
    "func_name": "rfbSendServerCutText",
    "func_before": "void\nrfbSendServerCutText(rfbScreenInfoPtr rfbScreen,char *str, int len)\n{\n    rfbClientPtr cl;\n    rfbServerCutTextMsg sct;\n    rfbClientIteratorPtr iterator;\n\n    iterator = rfbGetClientIterator(rfbScreen);\n    while ((cl = rfbClientIteratorNext(iterator)) != NULL) {\n        sct.type = rfbServerCutText;\n        sct.length = Swap32IfLE(len);\n        LOCK(cl->sendMutex);\n        if (rfbWriteExact(cl, (char *)&sct,\n                       sz_rfbServerCutTextMsg) < 0) {\n            rfbLogPerror(\"rfbSendServerCutText: write\");\n            rfbCloseClient(cl);\n            UNLOCK(cl->sendMutex);\n            continue;\n        }\n        if (rfbWriteExact(cl, str, len) < 0) {\n            rfbLogPerror(\"rfbSendServerCutText: write\");\n            rfbCloseClient(cl);\n        }\n        UNLOCK(cl->sendMutex);\n        rfbStatRecordMessageSent(cl, rfbServerCutText, sz_rfbServerCutTextMsg+len, sz_rfbServerCutTextMsg+len);\n    }\n    rfbReleaseClientIterator(iterator);\n}",
    "abstract_func_before": "void\nrfbSendServerCutText(rfbScreenInfoPtr VAR_0,char *VAR_1, int VAR_2)\n{\n    rfbClientPtr VAR_3;\n    rfbServerCutTextMsg VAR_4;\n    rfbClientIteratorPtr VAR_5;\n\n    VAR_5 = rfbGetClientIterator(VAR_0);\n    while ((VAR_3 = rfbClientIteratorNext(VAR_5)) != NULL) {\n        VAR_4.type = VAR_6;\n        VAR_4.length = Swap32IfLE(VAR_2);\n        LOCK(VAR_3->sendMutex);\n        if (rfbWriteExact(VAR_3, (char *)&VAR_4,\n                       VAR_7) < 0) {\n            rfbLogPerror(\"rfbSendServerCutText: write\");\n            rfbCloseClient(VAR_3);\n            UNLOCK(VAR_3->sendMutex);\n            continue;\n        }\n        if (rfbWriteExact(VAR_3, VAR_1, VAR_2) < 0) {\n            rfbLogPerror(\"rfbSendServerCutText: write\");\n            rfbCloseClient(VAR_3);\n        }\n        UNLOCK(VAR_3->sendMutex);\n        rfbStatRecordMessageSent(VAR_3, VAR_6, VAR_7+VAR_2, VAR_7+VAR_2);\n    }\n    rfbReleaseClientIterator(VAR_5);\n}",
    "func_graph_path_before": "LibVNC/libvncserver/d01e1bb4246323ba6fcee3b82ef1faa9b1dac82a/rfbserver.c/vul/before/0.json",
    "func": "void\nrfbSendServerCutText(rfbScreenInfoPtr rfbScreen,char *str, int len)\n{\n    rfbClientPtr cl;\n    rfbServerCutTextMsg sct;\n    rfbClientIteratorPtr iterator;\n\n    memset((char *)&sct, 0, sizeof(sct));\n\n    iterator = rfbGetClientIterator(rfbScreen);\n    while ((cl = rfbClientIteratorNext(iterator)) != NULL) {\n        sct.type = rfbServerCutText;\n        sct.length = Swap32IfLE(len);\n        LOCK(cl->sendMutex);\n        if (rfbWriteExact(cl, (char *)&sct,\n                       sz_rfbServerCutTextMsg) < 0) {\n            rfbLogPerror(\"rfbSendServerCutText: write\");\n            rfbCloseClient(cl);\n            UNLOCK(cl->sendMutex);\n            continue;\n        }\n        if (rfbWriteExact(cl, str, len) < 0) {\n            rfbLogPerror(\"rfbSendServerCutText: write\");\n            rfbCloseClient(cl);\n        }\n        UNLOCK(cl->sendMutex);\n        rfbStatRecordMessageSent(cl, rfbServerCutText, sz_rfbServerCutTextMsg+len, sz_rfbServerCutTextMsg+len);\n    }\n    rfbReleaseClientIterator(iterator);\n}",
    "abstract_func": "void\nrfbSendServerCutText(rfbScreenInfoPtr VAR_0,char *VAR_1, int VAR_2)\n{\n    rfbClientPtr VAR_3;\n    rfbServerCutTextMsg VAR_4;\n    rfbClientIteratorPtr VAR_5;\n\n    memset((char *)&VAR_4, 0, sizeof(VAR_4));\n\n    VAR_5 = rfbGetClientIterator(VAR_0);\n    while ((VAR_3 = rfbClientIteratorNext(VAR_5)) != NULL) {\n        VAR_4.type = VAR_6;\n        VAR_4.length = Swap32IfLE(VAR_2);\n        LOCK(VAR_3->sendMutex);\n        if (rfbWriteExact(VAR_3, (char *)&VAR_4,\n                       VAR_7) < 0) {\n            rfbLogPerror(\"rfbSendServerCutText: write\");\n            rfbCloseClient(VAR_3);\n            UNLOCK(VAR_3->sendMutex);\n            continue;\n        }\n        if (rfbWriteExact(VAR_3, VAR_1, VAR_2) < 0) {\n            rfbLogPerror(\"rfbSendServerCutText: write\");\n            rfbCloseClient(VAR_3);\n        }\n        UNLOCK(VAR_3->sendMutex);\n        rfbStatRecordMessageSent(VAR_3, VAR_6, VAR_7+VAR_2, VAR_7+VAR_2);\n    }\n    rfbReleaseClientIterator(VAR_5);\n}",
    "func_graph_path": "LibVNC/libvncserver/d01e1bb4246323ba6fcee3b82ef1faa9b1dac82a/rfbserver.c/vul/after/0.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -4,6 +4,8 @@\n     rfbClientPtr cl;\n     rfbServerCutTextMsg sct;\n     rfbClientIteratorPtr iterator;\n+\n+    memset((char *)&sct, 0, sizeof(sct));\n \n     iterator = rfbGetClientIterator(rfbScreen);\n     while ((cl = rfbClientIteratorNext(iterator)) != NULL) {",
    "diff_line_info": {
        "deleted_lines": [],
        "added_lines": [
            "",
            "    memset((char *)&sct, 0, sizeof(sct));"
        ]
    },
    "is_vul": true,
    "pr_url": null,
    "description": "no more info"
}