{
    "cve_id": "CVE-2021-33910",
    "cwe_ids": [
        "CWE-770"
    ],
    "cvss_vector": "AV:L/AC:L/Au:N/C:N/I:N/A:C",
    "cvss_is_v3": false,
    "repo_name": "systemd",
    "commit_msg": "basic/unit-name: do not use strdupa() on a path\n\nThe path may have unbounded length, for example through a fuse mount.\n\nCVE-2021-33910: attacked controlled alloca() leads to crash in systemd and\nultimately a kernel panic. Systemd parses the content of /proc/self/mountinfo\nand each mountpoint is passed to mount_setup_unit(), which calls\nunit_name_path_escape() underneath. A local attacker who is able to mount a\nfilesystem with a very long path can crash systemd and the whole system.\n\nhttps://bugzilla.redhat.com/show_bug.cgi?id=1970887\n\nThe resulting string length is bounded by UNIT_NAME_MAX, which is 256. But we\ncan't easily check the length after simplification before doing the\nsimplification, which in turns uses a copy of the string we can write to.\nSo we can't reject paths that are too long before doing the duplication.\nHence the most obvious solution is to switch back to strdup(), as before\n7410616cd9dbbec97cf98d75324da5cda2b2f7a2.",
    "commit_hash": "441e0115646d54f080e5c3bb0ba477c892861ab9",
    "git_url": "https://github.com/systemd/systemd/commit/441e0115646d54f080e5c3bb0ba477c892861ab9",
    "file_path": "src/basic/unit-name.c",
    "func_name": "unit_name_path_escape",
    "func_before": "int unit_name_path_escape(const char *f, char **ret) {\n        char *p, *s;\n\n        assert(f);\n        assert(ret);\n\n        p = strdupa(f);\n        if (!p)\n                return -ENOMEM;\n\n        path_simplify(p);\n\n        if (empty_or_root(p))\n                s = strdup(\"-\");\n        else {\n                if (!path_is_normalized(p))\n                        return -EINVAL;\n\n                /* Truncate trailing slashes */\n                delete_trailing_chars(p, \"/\");\n\n                /* Truncate leading slashes */\n                p = skip_leading_chars(p, \"/\");\n\n                s = unit_name_escape(p);\n        }\n        if (!s)\n                return -ENOMEM;\n\n        *ret = s;\n        return 0;\n}",
    "abstract_func_before": "int unit_name_path_escape(const char *VAR_0, char **VAR_1) {\n        char *VAR_2, *VAR_3;\n\n        assert(VAR_0);\n        assert(VAR_1);\n\n        VAR_2 = strdupa(VAR_0);\n        if (!VAR_2)\n                return -VAR_4;\n\n        path_simplify(VAR_2);\n\n        if (empty_or_root(VAR_2))\n                VAR_3 = strdup(\"-\");\n        else {\n                if (!path_is_normalized(VAR_2))\n                        return -VAR_5;\n\n                /* COMMENT_0 */\n                delete_trailing_chars(VAR_2, \"/\");\n\n                /* COMMENT_1 */\n                VAR_2 = skip_leading_chars(VAR_2, \"/\");\n\n                VAR_3 = unit_name_escape(VAR_2);\n        }\n        if (!VAR_3)\n                return -VAR_4;\n\n        *VAR_1 = VAR_3;\n        return 0;\n}",
    "func_graph_path_before": "systemd/441e0115646d54f080e5c3bb0ba477c892861ab9/unit-name.c/vul/before/0.json",
    "func": "int unit_name_path_escape(const char *f, char **ret) {\n        _cleanup_free_ char *p = NULL;\n        char *s;\n\n        assert(f);\n        assert(ret);\n\n        p = strdup(f);\n        if (!p)\n                return -ENOMEM;\n\n        path_simplify(p);\n\n        if (empty_or_root(p))\n                s = strdup(\"-\");\n        else {\n                if (!path_is_normalized(p))\n                        return -EINVAL;\n\n                /* Truncate trailing slashes and skip leading slashes */\n                delete_trailing_chars(p, \"/\");\n                s = unit_name_escape(skip_leading_chars(p, \"/\"));\n        }\n        if (!s)\n                return -ENOMEM;\n\n        *ret = s;\n        return 0;\n}",
    "abstract_func": "int unit_name_path_escape(const char *VAR_0, char **VAR_1) {\n        _cleanup_free_ char *VAR_2 = NULL;\n        char *VAR_3;\n\n        assert(VAR_0);\n        assert(VAR_1);\n\n        VAR_2 = strdup(VAR_0);\n        if (!VAR_2)\n                return -VAR_4;\n\n        path_simplify(VAR_2);\n\n        if (empty_or_root(VAR_2))\n                VAR_3 = strdup(\"-\");\n        else {\n                if (!path_is_normalized(VAR_2))\n                        return -VAR_5;\n\n                /* COMMENT_0 */\n                delete_trailing_chars(VAR_2, \"/\");\n                VAR_3 = unit_name_escape(skip_leading_chars(VAR_2, \"/\"));\n        }\n        if (!VAR_3)\n                return -VAR_4;\n\n        *VAR_1 = VAR_3;\n        return 0;\n}",
    "func_graph_path": "systemd/441e0115646d54f080e5c3bb0ba477c892861ab9/unit-name.c/vul/after/0.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -1,10 +1,11 @@\n int unit_name_path_escape(const char *f, char **ret) {\n-        char *p, *s;\n+        _cleanup_free_ char *p = NULL;\n+        char *s;\n \n         assert(f);\n         assert(ret);\n \n-        p = strdupa(f);\n+        p = strdup(f);\n         if (!p)\n                 return -ENOMEM;\n \n@@ -16,13 +17,9 @@\n                 if (!path_is_normalized(p))\n                         return -EINVAL;\n \n-                /* Truncate trailing slashes */\n+                /* Truncate trailing slashes and skip leading slashes */\n                 delete_trailing_chars(p, \"/\");\n-\n-                /* Truncate leading slashes */\n-                p = skip_leading_chars(p, \"/\");\n-\n-                s = unit_name_escape(p);\n+                s = unit_name_escape(skip_leading_chars(p, \"/\"));\n         }\n         if (!s)\n                 return -ENOMEM;",
    "diff_line_info": {
        "deleted_lines": [
            "        char *p, *s;",
            "        p = strdupa(f);",
            "                /* Truncate trailing slashes */",
            "",
            "                /* Truncate leading slashes */",
            "                p = skip_leading_chars(p, \"/\");",
            "",
            "                s = unit_name_escape(p);"
        ],
        "added_lines": [
            "        _cleanup_free_ char *p = NULL;",
            "        char *s;",
            "        p = strdup(f);",
            "                /* Truncate trailing slashes and skip leading slashes */",
            "                s = unit_name_escape(skip_leading_chars(p, \"/\"));"
        ]
    },
    "is_vul": true,
    "pr_url": "https://github.com/systemd/systemd/pull/20256",
    "description": "no more info"
}