{
    "cve_id": "CVE-2021-3407",
    "cwe_ids": [
        "CWE-415"
    ],
    "cvss_vector": "AV:N/AC:M/Au:N/C:N/I:N/A:P",
    "cvss_is_v3": false,
    "repo_name": "ArtifexSoftware/mupdf",
    "commit_msg": "Bug 703366: Fix double free of object during linearization.\n\nThis appears to happen because we parse an illegal object from\na broken file and assign it to object 0, which is defined to\nbe free.\n\nHere, we fix the parsing code so this can't happen.",
    "commit_hash": "cee7cefc610d42fd383b3c80c12cbc675443176a",
    "git_url": "https://github.com/ArtifexSoftware/mupdf/commit/cee7cefc610d42fd383b3c80c12cbc675443176a",
    "file_path": "source/pdf/pdf-xref.c",
    "func_name": "pdf_read_new_xref",
    "func_before": "static pdf_obj *\npdf_read_new_xref(fz_context *ctx, pdf_document *doc, pdf_lexbuf *buf)\n{\n\tfz_stream *stm = NULL;\n\tpdf_obj *trailer = NULL;\n\tpdf_obj *index = NULL;\n\tpdf_obj *obj = NULL;\n\tint gen, num = 0;\n\tint64_t ofs, stm_ofs;\n\tint size, w0, w1, w2;\n\tint t;\n\n\tfz_var(trailer);\n\tfz_var(stm);\n\n\tfz_try(ctx)\n\t{\n\t\tofs = fz_tell(ctx, doc->file);\n\t\ttrailer = pdf_parse_ind_obj(ctx, doc, doc->file, buf, &num, &gen, &stm_ofs, NULL);\n\t}\n\tfz_catch(ctx)\n\t{\n\t\tpdf_drop_obj(ctx, trailer);\n\t\tfz_rethrow(ctx);\n\t}\n\n\tfz_try(ctx)\n\t{\n\t\tpdf_xref_entry *entry;\n\n\t\tobj = pdf_dict_get(ctx, trailer, PDF_NAME(Size));\n\t\tif (!obj)\n\t\t\tfz_throw(ctx, FZ_ERROR_GENERIC, \"xref stream missing Size entry (%d 0 R)\", num);\n\n\t\tsize = pdf_to_int(ctx, obj);\n\n\t\tobj = pdf_dict_get(ctx, trailer, PDF_NAME(W));\n\t\tif (!obj)\n\t\t\tfz_throw(ctx, FZ_ERROR_GENERIC, \"xref stream missing W entry (%d  R)\", num);\n\t\tw0 = pdf_array_get_int(ctx, obj, 0);\n\t\tw1 = pdf_array_get_int(ctx, obj, 1);\n\t\tw2 = pdf_array_get_int(ctx, obj, 2);\n\n\t\tif (w0 < 0)\n\t\t\tfz_warn(ctx, \"xref stream objects have corrupt type\");\n\t\tif (w1 < 0)\n\t\t\tfz_warn(ctx, \"xref stream objects have corrupt offset\");\n\t\tif (w2 < 0)\n\t\t\tfz_warn(ctx, \"xref stream objects have corrupt generation\");\n\n\t\tw0 = w0 < 0 ? 0 : w0;\n\t\tw1 = w1 < 0 ? 0 : w1;\n\t\tw2 = w2 < 0 ? 0 : w2;\n\n\t\tindex = pdf_dict_get(ctx, trailer, PDF_NAME(Index));\n\n\t\tstm = pdf_open_stream_with_offset(ctx, doc, num, trailer, stm_ofs);\n\n\t\tif (!index)\n\t\t{\n\t\t\tpdf_read_new_xref_section(ctx, doc, stm, 0, size, w0, w1, w2);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tint n = pdf_array_len(ctx, index);\n\t\t\tfor (t = 0; t < n; t += 2)\n\t\t\t{\n\t\t\t\tint i0 = pdf_array_get_int(ctx, index, t + 0);\n\t\t\t\tint i1 = pdf_array_get_int(ctx, index, t + 1);\n\t\t\t\tpdf_read_new_xref_section(ctx, doc, stm, i0, i1, w0, w1, w2);\n\t\t\t}\n\t\t}\n\t\tentry = pdf_get_populating_xref_entry(ctx, doc, num);\n\t\tentry->ofs = ofs;\n\t\tentry->gen = gen;\n\t\tentry->num = num;\n\t\tentry->stm_ofs = stm_ofs;\n\t\tpdf_drop_obj(ctx, entry->obj);\n\t\tentry->obj = pdf_keep_obj(ctx, trailer);\n\t\tentry->type = 'n';\n\t}\n\tfz_always(ctx)\n\t{\n\t\tfz_drop_stream(ctx, stm);\n\t}\n\tfz_catch(ctx)\n\t{\n\t\tpdf_drop_obj(ctx, trailer);\n\t\tfz_rethrow(ctx);\n\t}\n\n\treturn trailer;\n}",
    "abstract_func_before": "static pdf_obj *\npdf_read_new_xref(fz_context *VAR_0, pdf_document *VAR_1, pdf_lexbuf *VAR_2)\n{\n\tfz_stream *VAR_3 = NULL;\n\tpdf_obj *VAR_4 = NULL;\n\tpdf_obj *VAR_5 = NULL;\n\tpdf_obj *VAR_6 = NULL;\n\tint VAR_7, VAR_8 = 0;\n\tint64_t VAR_9, VAR_10;\n\tint VAR_11, VAR_12, VAR_13, VAR_14;\n\tint VAR_15;\n\n\tfz_var(VAR_4);\n\tfz_var(VAR_3);\n\n\tfz_try(VAR_0)\n\t{\n\t\tVAR_9 = fz_tell(VAR_0, VAR_1->file);\n\t\tVAR_4 = pdf_parse_ind_obj(VAR_0, VAR_1, VAR_1->file, VAR_2, &VAR_8, &VAR_7, &VAR_10, NULL);\n\t}\n\tfz_catch(VAR_0)\n\t{\n\t\tpdf_drop_obj(VAR_0, VAR_4);\n\t\tfz_rethrow(VAR_0);\n\t}\n\n\tfz_try(VAR_0)\n\t{\n\t\tpdf_xref_entry *VAR_16;\n\n\t\tVAR_6 = pdf_dict_get(VAR_0, VAR_4, PDF_NAME(VAR_17));\n\t\tif (!VAR_6)\n\t\t\tfz_throw(VAR_0, VAR_18, \"xref stream missing Size entry (%d 0 R)\", VAR_8);\n\n\t\tVAR_11 = pdf_to_int(VAR_0, VAR_6);\n\n\t\tVAR_6 = pdf_dict_get(VAR_0, VAR_4, PDF_NAME(VAR_19));\n\t\tif (!VAR_6)\n\t\t\tfz_throw(VAR_0, VAR_18, \"xref stream missing W entry (%d  R)\", VAR_8);\n\t\tVAR_12 = pdf_array_get_int(VAR_0, VAR_6, 0);\n\t\tVAR_13 = pdf_array_get_int(VAR_0, VAR_6, 1);\n\t\tVAR_14 = pdf_array_get_int(VAR_0, VAR_6, 2);\n\n\t\tif (VAR_12 < 0)\n\t\t\tfz_warn(VAR_0, \"xref stream objects have corrupt type\");\n\t\tif (VAR_13 < 0)\n\t\t\tfz_warn(VAR_0, \"xref stream objects have corrupt offset\");\n\t\tif (VAR_14 < 0)\n\t\t\tfz_warn(VAR_0, \"xref stream objects have corrupt generation\");\n\n\t\tVAR_12 = VAR_12 < 0 ? 0 : VAR_12;\n\t\tVAR_13 = VAR_13 < 0 ? 0 : VAR_13;\n\t\tVAR_14 = VAR_14 < 0 ? 0 : VAR_14;\n\n\t\tVAR_5 = pdf_dict_get(VAR_0, VAR_4, PDF_NAME(VAR_20));\n\n\t\tVAR_3 = pdf_open_stream_with_offset(VAR_0, VAR_1, VAR_8, VAR_4, VAR_10);\n\n\t\tif (!VAR_5)\n\t\t{\n\t\t\tpdf_read_new_xref_section(VAR_0, VAR_1, VAR_3, 0, VAR_11, VAR_12, VAR_13, VAR_14);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tint VAR_21 = pdf_array_len(VAR_0, VAR_5);\n\t\t\tfor (VAR_15 = 0; VAR_15 < VAR_21; VAR_15 += 2)\n\t\t\t{\n\t\t\t\tint VAR_22 = pdf_array_get_int(VAR_0, VAR_5, VAR_15 + 0);\n\t\t\t\tint VAR_23 = pdf_array_get_int(VAR_0, VAR_5, VAR_15 + 1);\n\t\t\t\tpdf_read_new_xref_section(VAR_0, VAR_1, VAR_3, VAR_22, VAR_23, VAR_12, VAR_13, VAR_14);\n\t\t\t}\n\t\t}\n\t\tVAR_16 = pdf_get_populating_xref_entry(VAR_0, VAR_1, VAR_8);\n\t\tVAR_16->ofs = VAR_9;\n\t\tVAR_16->gen = VAR_7;\n\t\tVAR_16->num = VAR_8;\n\t\tVAR_16->stm_ofs = VAR_10;\n\t\tpdf_drop_obj(VAR_0, VAR_16->obj);\n\t\tVAR_16->obj = pdf_keep_obj(VAR_0, VAR_4);\n\t\tVAR_16->type = 'n';\n\t}\n\tfz_always(VAR_0)\n\t{\n\t\tfz_drop_stream(VAR_0, VAR_3);\n\t}\n\tfz_catch(VAR_0)\n\t{\n\t\tpdf_drop_obj(VAR_0, VAR_4);\n\t\tfz_rethrow(VAR_0);\n\t}\n\n\treturn VAR_4;\n}",
    "func_graph_path_before": "ArtifexSoftware/mupdf/cee7cefc610d42fd383b3c80c12cbc675443176a/pdf-xref.c/vul/before/0.json",
    "func": "static pdf_obj *\npdf_read_new_xref(fz_context *ctx, pdf_document *doc, pdf_lexbuf *buf)\n{\n\tfz_stream *stm = NULL;\n\tpdf_obj *trailer = NULL;\n\tpdf_obj *index = NULL;\n\tpdf_obj *obj = NULL;\n\tint gen, num = 0;\n\tint64_t ofs, stm_ofs;\n\tint size, w0, w1, w2;\n\tint t;\n\n\tfz_var(trailer);\n\tfz_var(stm);\n\n\tfz_try(ctx)\n\t{\n\t\tofs = fz_tell(ctx, doc->file);\n\t\ttrailer = pdf_parse_ind_obj(ctx, doc, doc->file, buf, &num, &gen, &stm_ofs, NULL);\n\t\tif (num == 0)\n\t\t\tfz_throw(ctx, FZ_ERROR_GENERIC, \"Trailer object number cannot be 0\\n\");\n\t}\n\tfz_catch(ctx)\n\t{\n\t\tpdf_drop_obj(ctx, trailer);\n\t\tfz_rethrow(ctx);\n\t}\n\n\tfz_try(ctx)\n\t{\n\t\tpdf_xref_entry *entry;\n\n\t\tobj = pdf_dict_get(ctx, trailer, PDF_NAME(Size));\n\t\tif (!obj)\n\t\t\tfz_throw(ctx, FZ_ERROR_GENERIC, \"xref stream missing Size entry (%d 0 R)\", num);\n\n\t\tsize = pdf_to_int(ctx, obj);\n\n\t\tobj = pdf_dict_get(ctx, trailer, PDF_NAME(W));\n\t\tif (!obj)\n\t\t\tfz_throw(ctx, FZ_ERROR_GENERIC, \"xref stream missing W entry (%d  R)\", num);\n\t\tw0 = pdf_array_get_int(ctx, obj, 0);\n\t\tw1 = pdf_array_get_int(ctx, obj, 1);\n\t\tw2 = pdf_array_get_int(ctx, obj, 2);\n\n\t\tif (w0 < 0)\n\t\t\tfz_warn(ctx, \"xref stream objects have corrupt type\");\n\t\tif (w1 < 0)\n\t\t\tfz_warn(ctx, \"xref stream objects have corrupt offset\");\n\t\tif (w2 < 0)\n\t\t\tfz_warn(ctx, \"xref stream objects have corrupt generation\");\n\n\t\tw0 = w0 < 0 ? 0 : w0;\n\t\tw1 = w1 < 0 ? 0 : w1;\n\t\tw2 = w2 < 0 ? 0 : w2;\n\n\t\tindex = pdf_dict_get(ctx, trailer, PDF_NAME(Index));\n\n\t\tstm = pdf_open_stream_with_offset(ctx, doc, num, trailer, stm_ofs);\n\n\t\tif (!index)\n\t\t{\n\t\t\tpdf_read_new_xref_section(ctx, doc, stm, 0, size, w0, w1, w2);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tint n = pdf_array_len(ctx, index);\n\t\t\tfor (t = 0; t < n; t += 2)\n\t\t\t{\n\t\t\t\tint i0 = pdf_array_get_int(ctx, index, t + 0);\n\t\t\t\tint i1 = pdf_array_get_int(ctx, index, t + 1);\n\t\t\t\tpdf_read_new_xref_section(ctx, doc, stm, i0, i1, w0, w1, w2);\n\t\t\t}\n\t\t}\n\t\tentry = pdf_get_populating_xref_entry(ctx, doc, num);\n\t\tentry->ofs = ofs;\n\t\tentry->gen = gen;\n\t\tentry->num = num;\n\t\tentry->stm_ofs = stm_ofs;\n\t\tpdf_drop_obj(ctx, entry->obj);\n\t\tentry->obj = pdf_keep_obj(ctx, trailer);\n\t\tentry->type = 'n';\n\t}\n\tfz_always(ctx)\n\t{\n\t\tfz_drop_stream(ctx, stm);\n\t}\n\tfz_catch(ctx)\n\t{\n\t\tpdf_drop_obj(ctx, trailer);\n\t\tfz_rethrow(ctx);\n\t}\n\n\treturn trailer;\n}",
    "abstract_func": "static pdf_obj *\npdf_read_new_xref(fz_context *VAR_0, pdf_document *VAR_1, pdf_lexbuf *VAR_2)\n{\n\tfz_stream *VAR_3 = NULL;\n\tpdf_obj *VAR_4 = NULL;\n\tpdf_obj *VAR_5 = NULL;\n\tpdf_obj *VAR_6 = NULL;\n\tint VAR_7, VAR_8 = 0;\n\tint64_t VAR_9, VAR_10;\n\tint VAR_11, VAR_12, VAR_13, VAR_14;\n\tint VAR_15;\n\n\tfz_var(VAR_4);\n\tfz_var(VAR_3);\n\n\tfz_try(VAR_0)\n\t{\n\t\tVAR_9 = fz_tell(VAR_0, VAR_1->file);\n\t\tVAR_4 = pdf_parse_ind_obj(VAR_0, VAR_1, VAR_1->file, VAR_2, &VAR_8, &VAR_7, &VAR_10, NULL);\n\t\tif (VAR_8 == 0)\n\t\t\tfz_throw(VAR_0, VAR_16, \"Trailer object number cannot be 0\\n\");\n\t}\n\tfz_catch(VAR_0)\n\t{\n\t\tpdf_drop_obj(VAR_0, VAR_4);\n\t\tfz_rethrow(VAR_0);\n\t}\n\n\tfz_try(VAR_0)\n\t{\n\t\tpdf_xref_entry *VAR_17;\n\n\t\tVAR_6 = pdf_dict_get(VAR_0, VAR_4, PDF_NAME(VAR_18));\n\t\tif (!VAR_6)\n\t\t\tfz_throw(VAR_0, VAR_16, \"xref stream missing Size entry (%d 0 R)\", VAR_8);\n\n\t\tVAR_11 = pdf_to_int(VAR_0, VAR_6);\n\n\t\tVAR_6 = pdf_dict_get(VAR_0, VAR_4, PDF_NAME(VAR_19));\n\t\tif (!VAR_6)\n\t\t\tfz_throw(VAR_0, VAR_16, \"xref stream missing W entry (%d  R)\", VAR_8);\n\t\tVAR_12 = pdf_array_get_int(VAR_0, VAR_6, 0);\n\t\tVAR_13 = pdf_array_get_int(VAR_0, VAR_6, 1);\n\t\tVAR_14 = pdf_array_get_int(VAR_0, VAR_6, 2);\n\n\t\tif (VAR_12 < 0)\n\t\t\tfz_warn(VAR_0, \"xref stream objects have corrupt type\");\n\t\tif (VAR_13 < 0)\n\t\t\tfz_warn(VAR_0, \"xref stream objects have corrupt offset\");\n\t\tif (VAR_14 < 0)\n\t\t\tfz_warn(VAR_0, \"xref stream objects have corrupt generation\");\n\n\t\tVAR_12 = VAR_12 < 0 ? 0 : VAR_12;\n\t\tVAR_13 = VAR_13 < 0 ? 0 : VAR_13;\n\t\tVAR_14 = VAR_14 < 0 ? 0 : VAR_14;\n\n\t\tVAR_5 = pdf_dict_get(VAR_0, VAR_4, PDF_NAME(VAR_20));\n\n\t\tVAR_3 = pdf_open_stream_with_offset(VAR_0, VAR_1, VAR_8, VAR_4, VAR_10);\n\n\t\tif (!VAR_5)\n\t\t{\n\t\t\tpdf_read_new_xref_section(VAR_0, VAR_1, VAR_3, 0, VAR_11, VAR_12, VAR_13, VAR_14);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tint VAR_21 = pdf_array_len(VAR_0, VAR_5);\n\t\t\tfor (VAR_15 = 0; VAR_15 < VAR_21; VAR_15 += 2)\n\t\t\t{\n\t\t\t\tint VAR_22 = pdf_array_get_int(VAR_0, VAR_5, VAR_15 + 0);\n\t\t\t\tint VAR_23 = pdf_array_get_int(VAR_0, VAR_5, VAR_15 + 1);\n\t\t\t\tpdf_read_new_xref_section(VAR_0, VAR_1, VAR_3, VAR_22, VAR_23, VAR_12, VAR_13, VAR_14);\n\t\t\t}\n\t\t}\n\t\tVAR_17 = pdf_get_populating_xref_entry(VAR_0, VAR_1, VAR_8);\n\t\tVAR_17->ofs = VAR_9;\n\t\tVAR_17->gen = VAR_7;\n\t\tVAR_17->num = VAR_8;\n\t\tVAR_17->stm_ofs = VAR_10;\n\t\tpdf_drop_obj(VAR_0, VAR_17->obj);\n\t\tVAR_17->obj = pdf_keep_obj(VAR_0, VAR_4);\n\t\tVAR_17->type = 'n';\n\t}\n\tfz_always(VAR_0)\n\t{\n\t\tfz_drop_stream(VAR_0, VAR_3);\n\t}\n\tfz_catch(VAR_0)\n\t{\n\t\tpdf_drop_obj(VAR_0, VAR_4);\n\t\tfz_rethrow(VAR_0);\n\t}\n\n\treturn VAR_4;\n}",
    "func_graph_path": "ArtifexSoftware/mupdf/cee7cefc610d42fd383b3c80c12cbc675443176a/pdf-xref.c/vul/after/0.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -17,6 +17,8 @@\n \t{\n \t\tofs = fz_tell(ctx, doc->file);\n \t\ttrailer = pdf_parse_ind_obj(ctx, doc, doc->file, buf, &num, &gen, &stm_ofs, NULL);\n+\t\tif (num == 0)\n+\t\t\tfz_throw(ctx, FZ_ERROR_GENERIC, \"Trailer object number cannot be 0\\n\");\n \t}\n \tfz_catch(ctx)\n \t{",
    "diff_line_info": {
        "deleted_lines": [],
        "added_lines": [
            "\t\tif (num == 0)",
            "\t\t\tfz_throw(ctx, FZ_ERROR_GENERIC, \"Trailer object number cannot be 0\\n\");"
        ]
    },
    "is_vul": true,
    "pr_url": null,
    "description": "no more info"
}