{
    "cve_id": "CVE-2009-0586",
    "cwe_ids": [
        "CWE-190"
    ],
    "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:P/A:P",
    "cvss_is_v3": false,
    "repo_name": "gstreamer/gst-plugins-base",
    "commit_msg": "Patch by: Tomas Hoger <thoger@redhat.com> Fixes CVE-2009-0586\n",
    "commit_hash": "566583e87147f774e7fc4c78b5f7e61d427e40a9",
    "git_url": "http://cgit.freedesktop.org/gstreamer/gst-plugins-base/commit/?id=566583e87147f774e7fc4c78b5f7e61d427e40a9",
    "file_path": "gst-libs/gst/tag/gstvorbistag.c",
    "func_name": "gst_vorbis_tag_add_coverart",
    "func_before": "static void\ngst_vorbis_tag_add_coverart (GstTagList * tags, const gchar * img_data_base64,\n    gint base64_len)\n{\n  GstBuffer *img;\n  guchar *img_data;\n  gsize img_len;\n  guint save = 0;\n  gint state = 0;\n\n  if (base64_len < 2)\n    goto not_enough_data;\n\n  img_data = g_try_malloc0 (base64_len * 3 / 4);\n\n  if (img_data == NULL)\n    goto alloc_failed;\n\n  img_len = g_base64_decode_step (img_data_base64, base64_len, img_data,\n      &state, &save);\n\n  if (img_len == 0)\n    goto decode_failed;\n\n  img = gst_tag_image_data_to_image_buffer (img_data, img_len,\n      GST_TAG_IMAGE_TYPE_NONE);\n\n  if (img == NULL)\n    goto convert_failed;\n\n  gst_tag_list_add (tags, GST_TAG_MERGE_APPEND,\n      GST_TAG_PREVIEW_IMAGE, img, NULL);\n\n  gst_buffer_unref (img);\n  g_free (img_data);\n  return;\n\n/* ERRORS */\nnot_enough_data:\n  {\n    GST_WARNING (\"COVERART tag with too little base64-encoded data\");\n    return;\n  }\nalloc_failed:\n  {\n    GST_WARNING (\"Couldn't allocate enough memory to decode COVERART tag\");\n    return;\n  }\ndecode_failed:\n  {\n    GST_WARNING (\"Couldn't decode bas64 image data from COVERART tag\");\n    g_free (img_data);\n    return;\n  }\nconvert_failed:\n  {\n    GST_WARNING (\"Couldn't extract image or image type from COVERART tag\");\n    g_free (img_data);\n    return;\n  }\n}",
    "abstract_func_before": "static void\ngst_vorbis_tag_add_coverart (GstTagList * VAR_0, const gchar * VAR_1,\n    gint VAR_2)\n{\n  GstBuffer *VAR_3;\n  guchar *VAR_4;\n  gsize VAR_5;\n  guint VAR_6 = 0;\n  gint VAR_7 = 0;\n\n  if (VAR_2 < 2)\n    goto not_enough_data;\n\n  VAR_4 = g_try_malloc0 (VAR_2 * 3 / 4);\n\n  if (VAR_4 == NULL)\n    goto alloc_failed;\n\n  VAR_5 = g_base64_decode_step (VAR_1, VAR_2, VAR_4,\n      &VAR_7, &VAR_6);\n\n  if (VAR_5 == 0)\n    goto decode_failed;\n\n  VAR_3 = gst_tag_image_data_to_image_buffer (VAR_4, VAR_5,\n      VAR_8);\n\n  if (VAR_3 == NULL)\n    goto convert_failed;\n\n  gst_tag_list_add (VAR_0, VAR_9,\n      VAR_10, VAR_3, NULL);\n\n  gst_buffer_unref (VAR_3);\n  g_free (VAR_4);\n  return;\n\n/* COMMENT_0 */\nnot_enough_data:\n  {\n    GST_WARNING (\"COVERART tag with too little base64-encoded data\");\n    return;\n  }\nalloc_failed:\n  {\n    GST_WARNING (\"Couldn't allocate enough memory to decode COVERART tag\");\n    return;\n  }\ndecode_failed:\n  {\n    GST_WARNING (\"Couldn't decode bas64 image data from COVERART tag\");\n    g_free (VAR_4);\n    return;\n  }\nconvert_failed:\n  {\n    GST_WARNING (\"Couldn't extract image or image type from COVERART tag\");\n    g_free (VAR_4);\n    return;\n  }\n}",
    "func_graph_path_before": "gstreamer/gst-plugins-base/566583e87147f774e7fc4c78b5f7e61d427e40a9/gstvorbistag.c/vul/before/0.json",
    "func": "static void\ngst_vorbis_tag_add_coverart (GstTagList * tags, gchar * img_data_base64,\n    gint base64_len)\n{\n  GstBuffer *img;\n  gsize img_len;\n  guchar *out;\n  guint save = 0;\n  gint state = 0;\n\n  if (base64_len < 2)\n    goto not_enough_data;\n\n  /* img_data_base64 points to a temporary copy of the base64 encoded data, so\n   * it's safe to do inpace decoding here\n   * TODO: glib 2.20 and later provides g_base64_decode_inplace, so change this\n   * to use glib's API instead once it's in wider use:\n   *  http://bugzilla.gnome.org/show_bug.cgi?id=564728\n   *  http://svn.gnome.org/viewvc/glib?view=revision&revision=7807 */\n  out = (guchar *) img_data_base64;\n  img_len = g_base64_decode_step (img_data_base64, base64_len,\n      out, &state, &save);\n\n  if (img_len == 0)\n    goto decode_failed;\n\n  img = gst_tag_image_data_to_image_buffer (out, img_len,\n      GST_TAG_IMAGE_TYPE_NONE);\n\n  if (img == NULL)\n    goto convert_failed;\n\n  gst_tag_list_add (tags, GST_TAG_MERGE_APPEND,\n      GST_TAG_PREVIEW_IMAGE, img, NULL);\n\n  gst_buffer_unref (img);\n  return;\n\n/* ERRORS */\nnot_enough_data:\n  {\n    GST_WARNING (\"COVERART tag with too little base64-encoded data\");\n    return;\n  }\ndecode_failed:\n  {\n    GST_WARNING (\"Couldn't decode base64 image data from COVERART tag\");\n    return;\n  }\nconvert_failed:\n  {\n    GST_WARNING (\"Couldn't extract image or image type from COVERART tag\");\n    return;\n  }\n}",
    "abstract_func": "static void\ngst_vorbis_tag_add_coverart (GstTagList * VAR_0, gchar * VAR_1,\n    gint VAR_2)\n{\n  GstBuffer *VAR_3;\n  gsize VAR_4;\n  guchar *VAR_5;\n  guint VAR_6 = 0;\n  gint VAR_7 = 0;\n\n  if (VAR_2 < 2)\n    goto not_enough_data;\n\n  /* COMMENT_0 */\n                                         \n                                                                               \n                                                      \n                                                      \n                                                                     \n  VAR_5 = (guchar *) VAR_1;\n  VAR_4 = g_base64_decode_step (VAR_1, VAR_2,\n      VAR_5, &VAR_7, &VAR_6);\n\n  if (VAR_4 == 0)\n    goto decode_failed;\n\n  VAR_3 = gst_tag_image_data_to_image_buffer (VAR_5, VAR_4,\n      VAR_8);\n\n  if (VAR_3 == NULL)\n    goto convert_failed;\n\n  gst_tag_list_add (VAR_0, VAR_9,\n      VAR_10, VAR_3, NULL);\n\n  gst_buffer_unref (VAR_3);\n  return;\n\n/* COMMENT_6 */\nnot_enough_data:\n  {\n    GST_WARNING (\"COVERART tag with too little base64-encoded data\");\n    return;\n  }\ndecode_failed:\n  {\n    GST_WARNING (\"Couldn't decode base64 image data from COVERART tag\");\n    return;\n  }\nconvert_failed:\n  {\n    GST_WARNING (\"Couldn't extract image or image type from COVERART tag\");\n    return;\n  }\n}",
    "func_graph_path": "gstreamer/gst-plugins-base/566583e87147f774e7fc4c78b5f7e61d427e40a9/gstvorbistag.c/vul/after/0.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -1,28 +1,30 @@\n static void\n-gst_vorbis_tag_add_coverart (GstTagList * tags, const gchar * img_data_base64,\n+gst_vorbis_tag_add_coverart (GstTagList * tags, gchar * img_data_base64,\n     gint base64_len)\n {\n   GstBuffer *img;\n-  guchar *img_data;\n   gsize img_len;\n+  guchar *out;\n   guint save = 0;\n   gint state = 0;\n \n   if (base64_len < 2)\n     goto not_enough_data;\n \n-  img_data = g_try_malloc0 (base64_len * 3 / 4);\n-\n-  if (img_data == NULL)\n-    goto alloc_failed;\n-\n-  img_len = g_base64_decode_step (img_data_base64, base64_len, img_data,\n-      &state, &save);\n+  /* img_data_base64 points to a temporary copy of the base64 encoded data, so\n+   * it's safe to do inpace decoding here\n+   * TODO: glib 2.20 and later provides g_base64_decode_inplace, so change this\n+   * to use glib's API instead once it's in wider use:\n+   *  http://bugzilla.gnome.org/show_bug.cgi?id=564728\n+   *  http://svn.gnome.org/viewvc/glib?view=revision&revision=7807 */\n+  out = (guchar *) img_data_base64;\n+  img_len = g_base64_decode_step (img_data_base64, base64_len,\n+      out, &state, &save);\n \n   if (img_len == 0)\n     goto decode_failed;\n \n-  img = gst_tag_image_data_to_image_buffer (img_data, img_len,\n+  img = gst_tag_image_data_to_image_buffer (out, img_len,\n       GST_TAG_IMAGE_TYPE_NONE);\n \n   if (img == NULL)\n@@ -32,7 +34,6 @@\n       GST_TAG_PREVIEW_IMAGE, img, NULL);\n \n   gst_buffer_unref (img);\n-  g_free (img_data);\n   return;\n \n /* ERRORS */\n@@ -41,21 +42,14 @@\n     GST_WARNING (\"COVERART tag with too little base64-encoded data\");\n     return;\n   }\n-alloc_failed:\n-  {\n-    GST_WARNING (\"Couldn't allocate enough memory to decode COVERART tag\");\n-    return;\n-  }\n decode_failed:\n   {\n-    GST_WARNING (\"Couldn't decode bas64 image data from COVERART tag\");\n-    g_free (img_data);\n+    GST_WARNING (\"Couldn't decode base64 image data from COVERART tag\");\n     return;\n   }\n convert_failed:\n   {\n     GST_WARNING (\"Couldn't extract image or image type from COVERART tag\");\n-    g_free (img_data);\n     return;\n   }\n }",
    "diff_line_info": {
        "deleted_lines": [
            "gst_vorbis_tag_add_coverart (GstTagList * tags, const gchar * img_data_base64,",
            "  guchar *img_data;",
            "  img_data = g_try_malloc0 (base64_len * 3 / 4);",
            "",
            "  if (img_data == NULL)",
            "    goto alloc_failed;",
            "",
            "  img_len = g_base64_decode_step (img_data_base64, base64_len, img_data,",
            "      &state, &save);",
            "  img = gst_tag_image_data_to_image_buffer (img_data, img_len,",
            "  g_free (img_data);",
            "alloc_failed:",
            "  {",
            "    GST_WARNING (\"Couldn't allocate enough memory to decode COVERART tag\");",
            "    return;",
            "  }",
            "    GST_WARNING (\"Couldn't decode bas64 image data from COVERART tag\");",
            "    g_free (img_data);",
            "    g_free (img_data);"
        ],
        "added_lines": [
            "gst_vorbis_tag_add_coverart (GstTagList * tags, gchar * img_data_base64,",
            "  guchar *out;",
            "  /* img_data_base64 points to a temporary copy of the base64 encoded data, so",
            "   * it's safe to do inpace decoding here",
            "   * TODO: glib 2.20 and later provides g_base64_decode_inplace, so change this",
            "   * to use glib's API instead once it's in wider use:",
            "   *  http://bugzilla.gnome.org/show_bug.cgi?id=564728",
            "   *  http://svn.gnome.org/viewvc/glib?view=revision&revision=7807 */",
            "  out = (guchar *) img_data_base64;",
            "  img_len = g_base64_decode_step (img_data_base64, base64_len,",
            "      out, &state, &save);",
            "  img = gst_tag_image_data_to_image_buffer (out, img_len,",
            "    GST_WARNING (\"Couldn't decode base64 image data from COVERART tag\");"
        ]
    },
    "is_vul": true,
    "pr_url": null,
    "description": "no more info"
}