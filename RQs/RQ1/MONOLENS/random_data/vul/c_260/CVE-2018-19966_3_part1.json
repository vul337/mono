{
    "cve_id": "CVE-2018-19966",
    "cwe_ids": [
        "CWE-436"
    ],
    "cvss_vector": "AV:L/AC:L/Au:N/C:C/I:C/A:C",
    "cvss_is_v3": false,
    "repo_name": "xen-project/xen",
    "commit_msg": "x86/shadow: shrink struct page_info's shadow_flags to 16 bits\n\nThis is to avoid it overlapping the linear_pt_count field needed for PV\ndomains. Introduce a separate, HVM-only pagetable_dying field to replace\nthe sole one left in the upper 16 bits.\n\nNote that the accesses to ->shadow_flags in shadow_{pro,de}mote() get\nswitched to non-atomic, non-bitops operations, as {test,set,clear}_bit()\nare not allowed on uint16_t fields and hence their use would have\nrequired ugly casts. This is fine because all updates of the field ought\nto occur with the paging lock held, and other updates of it use |= and\n&= as well (i.e. using atomic operations here didn't really guard\nagainst potentially racing updates elsewhere).\n\nThis is part of XSA-280.\n\nReported-by: Prgmr.com Security <security@prgmr.com>\nSigned-off-by: Jan Beulich <jbeulich@suse.com>\nReviewed-by: Tim Deegan <tim@xen.org>",
    "commit_hash": "789589968ed90e82a832dbc60e958c76b787be7e",
    "git_url": "https://github.com/xen-project/xen/commit/789589968ed90e82a832dbc60e958c76b787be7e",
    "file_path": "xen/arch/x86/mm/shadow/common.c",
    "func_name": "shadow_promote",
    "func_before": "void shadow_promote(struct domain *d, mfn_t gmfn, unsigned int type)\n{\n    struct page_info *page = mfn_to_page(gmfn);\n\n    ASSERT(mfn_valid(gmfn));\n\n#if (SHADOW_OPTIMIZATIONS & SHOPT_OUT_OF_SYNC)\n    /* Is the page already shadowed and out of sync? */\n    if ( page_is_out_of_sync(page) )\n        sh_resync(d, gmfn);\n#endif\n\n    /* We should never try to promote a gmfn that has writeable mappings */\n    ASSERT((page->u.inuse.type_info & PGT_type_mask) != PGT_writable_page\n           || (page->u.inuse.type_info & PGT_count_mask) == 0\n           || d->is_shutting_down);\n\n    /* Is the page already shadowed? */\n    if ( !test_and_set_bit(_PGC_page_table, &page->count_info) )\n        page->shadow_flags = 0;\n\n    ASSERT(!test_bit(type, &page->shadow_flags));\n    set_bit(type, &page->shadow_flags);\n    TRACE_SHADOW_PATH_FLAG(TRCE_SFLAG_PROMOTE);\n}",
    "abstract_func_before": "void shadow_promote(struct domain *VAR_0, mfn_t VAR_1, unsigned int VAR_2)\n{\n    struct page_info *VAR_3 = mfn_to_page(VAR_1);\n\n    ASSERT(mfn_valid(VAR_1));\n\n#if (VAR_4 & VAR_5)\n    /* COMMENT_0 */\n    if ( page_is_out_of_sync(VAR_3) )\n        sh_resync(VAR_0, VAR_1);\n#endif\n\n    /* COMMENT_1 */\n    ASSERT((VAR_3->u.inuse.type_info & VAR_6) != VAR_7\n           || (VAR_3->u.inuse.type_info & VAR_8) == 0\n           || VAR_0->is_shutting_down);\n\n    /* COMMENT_2 */\n    if ( !test_and_set_bit(VAR_9, &VAR_3->count_info) )\n        VAR_3->shadow_flags = 0;\n\n    ASSERT(!test_bit(VAR_2, &VAR_3->shadow_flags));\n    set_bit(VAR_2, &VAR_3->shadow_flags);\n    TRACE_SHADOW_PATH_FLAG(VAR_10);\n}",
    "func_graph_path_before": "xen-project/xen/789589968ed90e82a832dbc60e958c76b787be7e/common.c/vul/before/2.json",
    "func": "void shadow_promote(struct domain *d, mfn_t gmfn, unsigned int type)\n{\n    struct page_info *page = mfn_to_page(gmfn);\n\n    ASSERT(mfn_valid(gmfn));\n\n#if (SHADOW_OPTIMIZATIONS & SHOPT_OUT_OF_SYNC)\n    /* Is the page already shadowed and out of sync? */\n    if ( page_is_out_of_sync(page) )\n        sh_resync(d, gmfn);\n#endif\n\n    /* We should never try to promote a gmfn that has writeable mappings */\n    ASSERT((page->u.inuse.type_info & PGT_type_mask) != PGT_writable_page\n           || (page->u.inuse.type_info & PGT_count_mask) == 0\n           || d->is_shutting_down);\n\n    /* Is the page already shadowed? */\n    if ( !test_and_set_bit(_PGC_page_table, &page->count_info) )\n    {\n        page->shadow_flags = 0;\n        if ( is_hvm_domain(d) )\n            page->pagetable_dying = false;\n    }\n\n    ASSERT(!(page->shadow_flags & (1u << type)));\n    page->shadow_flags |= 1u << type;\n    TRACE_SHADOW_PATH_FLAG(TRCE_SFLAG_PROMOTE);\n}",
    "abstract_func": "void shadow_promote(struct domain *VAR_0, mfn_t VAR_1, unsigned int VAR_2)\n{\n    struct page_info *VAR_3 = mfn_to_page(VAR_1);\n\n    ASSERT(mfn_valid(VAR_1));\n\n#if (VAR_4 & VAR_5)\n    /* COMMENT_0 */\n    if ( page_is_out_of_sync(VAR_3) )\n        sh_resync(VAR_0, VAR_1);\n#endif\n\n    /* COMMENT_1 */\n    ASSERT((VAR_3->u.inuse.type_info & VAR_6) != VAR_7\n           || (VAR_3->u.inuse.type_info & VAR_8) == 0\n           || VAR_0->is_shutting_down);\n\n    /* COMMENT_2 */\n    if ( !test_and_set_bit(VAR_9, &VAR_3->count_info) )\n    {\n        VAR_3->shadow_flags = 0;\n        if ( is_hvm_domain(VAR_0) )\n            VAR_3->pagetable_dying = false;\n    }\n\n    ASSERT(!(VAR_3->shadow_flags & (1u << VAR_2)));\n    VAR_3->shadow_flags |= 1u << VAR_2;\n    TRACE_SHADOW_PATH_FLAG(VAR_10);\n}",
    "func_graph_path": "xen-project/xen/789589968ed90e82a832dbc60e958c76b787be7e/common.c/vul/after/2.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -17,9 +17,13 @@\n \n     /* Is the page already shadowed? */\n     if ( !test_and_set_bit(_PGC_page_table, &page->count_info) )\n+    {\n         page->shadow_flags = 0;\n+        if ( is_hvm_domain(d) )\n+            page->pagetable_dying = false;\n+    }\n \n-    ASSERT(!test_bit(type, &page->shadow_flags));\n-    set_bit(type, &page->shadow_flags);\n+    ASSERT(!(page->shadow_flags & (1u << type)));\n+    page->shadow_flags |= 1u << type;\n     TRACE_SHADOW_PATH_FLAG(TRCE_SFLAG_PROMOTE);\n }",
    "diff_line_info": {
        "deleted_lines": [
            "    ASSERT(!test_bit(type, &page->shadow_flags));",
            "    set_bit(type, &page->shadow_flags);"
        ],
        "added_lines": [
            "    {",
            "        if ( is_hvm_domain(d) )",
            "            page->pagetable_dying = false;",
            "    }",
            "    ASSERT(!(page->shadow_flags & (1u << type)));",
            "    page->shadow_flags |= 1u << type;"
        ]
    },
    "is_vul": true,
    "pr_url": null,
    "description": "no more info"
}