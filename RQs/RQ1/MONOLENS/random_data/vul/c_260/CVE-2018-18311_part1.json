{
    "cve_id": "CVE-2018-18311",
    "cwe_ids": [
        "CWE-190",
        "CWE-787"
    ],
    "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:P/A:P",
    "cvss_is_v3": false,
    "repo_name": "Perl/perl5",
    "commit_msg": "Perl_my_setenv(); handle integer wrap\n\nRT #133204\n\nWean this function off int/I32 and onto UV/Size_t.\nAlso, replace all malloc-ish calls with a wrapper that does\noverflow checks,\n\nIn particular, it was doing (nlen + vlen + 2) which could wrap when\nthe combined length of the environment variable name and value\nexceeded around 0x7fffffff.\n\nThe wrapper check function is probably overkill, but belt and braces...\n\nNB this function has several variant parts, #ifdef'ed by platform\ntype; I have blindly changed the parts that aren't compiled under linux.",
    "commit_hash": "34716e2a6ee2af96078d62b065b7785c001194be",
    "git_url": "https://github.com/Perl/perl5/commit/34716e2a6ee2af96078d62b065b7785c001194be",
    "file_path": "util.c",
    "func_name": "Perl_my_setenv",
    "func_before": "void\nPerl_my_setenv(pTHX_ const char *nam, const char *val)\n{\n  dVAR;\n#ifdef __amigaos4__\n  amigaos4_obtain_environ(__FUNCTION__);\n#endif\n#ifdef USE_ITHREADS\n  /* only parent thread can modify process environment */\n  if (PL_curinterp == aTHX)\n#endif\n  {\n#ifndef PERL_USE_SAFE_PUTENV\n    if (!PL_use_safe_putenv) {\n        /* most putenv()s leak, so we manipulate environ directly */\n        I32 i;\n        const I32 len = strlen(nam);\n        int nlen, vlen;\n\n        /* where does it go? */\n        for (i = 0; environ[i]; i++) {\n            if (strnEQ(environ[i],nam,len) && environ[i][len] == '=')\n                break;\n        }\n\n        if (environ == PL_origenviron) {   /* need we copy environment? */\n            I32 j;\n            I32 max;\n            char **tmpenv;\n\n            max = i;\n            while (environ[max])\n                max++;\n            tmpenv = (char**)safesysmalloc((max+2) * sizeof(char*));\n            for (j=0; j<max; j++) {         /* copy environment */\n                const int len = strlen(environ[j]);\n                tmpenv[j] = (char*)safesysmalloc((len+1)*sizeof(char));\n                Copy(environ[j], tmpenv[j], len+1, char);\n            }\n            tmpenv[max] = NULL;\n            environ = tmpenv;               /* tell exec where it is now */\n        }\n        if (!val) {\n            safesysfree(environ[i]);\n            while (environ[i]) {\n                environ[i] = environ[i+1];\n                i++;\n            }\n#ifdef __amigaos4__\n            goto my_setenv_out;\n#else\n            return;\n#endif\n        }\n        if (!environ[i]) {                 /* does not exist yet */\n            environ = (char**)safesysrealloc(environ, (i+2) * sizeof(char*));\n            environ[i+1] = NULL;    /* make sure it's null terminated */\n        }\n        else\n            safesysfree(environ[i]);\n        nlen = strlen(nam);\n        vlen = strlen(val);\n\n        environ[i] = (char*)safesysmalloc((nlen+vlen+2) * sizeof(char));\n        /* all that work just for this */\n        my_setenv_format(environ[i], nam, nlen, val, vlen);\n    } else {\n# endif\n    /* This next branch should only be called #if defined(HAS_SETENV), but\n       Configure doesn't test for that yet.  For Solaris, setenv() and unsetenv()\n       were introduced in Solaris 9, so testing for HAS UNSETENV is sufficient.\n    */\n#   if defined(__CYGWIN__)|| defined(__SYMBIAN32__) || defined(__riscos__) || (defined(__sun) && defined(HAS_UNSETENV)) || defined(PERL_DARWIN)\n#       if defined(HAS_UNSETENV)\n        if (val == NULL) {\n            (void)unsetenv(nam);\n        } else {\n            (void)setenv(nam, val, 1);\n        }\n#       else /* ! HAS_UNSETENV */\n        (void)setenv(nam, val, 1);\n#       endif /* HAS_UNSETENV */\n#   elif defined(HAS_UNSETENV)\n        if (val == NULL) {\n            if (environ) /* old glibc can crash with null environ */\n                (void)unsetenv(nam);\n        } else {\n\t    const int nlen = strlen(nam);\n\t    const int vlen = strlen(val);\n\t    char * const new_env =\n                (char*)safesysmalloc((nlen + vlen + 2) * sizeof(char));\n            my_setenv_format(new_env, nam, nlen, val, vlen);\n            (void)putenv(new_env);\n        }\n#   else /* ! HAS_UNSETENV */\n        char *new_env;\n\tconst int nlen = strlen(nam);\n\tint vlen;\n        if (!val) {\n\t   val = \"\";\n        }\n        vlen = strlen(val);\n        new_env = (char*)safesysmalloc((nlen + vlen + 2) * sizeof(char));\n        /* all that work just for this */\n        my_setenv_format(new_env, nam, nlen, val, vlen);\n        (void)putenv(new_env);\n#   endif /* __CYGWIN__ */\n#ifndef PERL_USE_SAFE_PUTENV\n    }\n#endif\n  }\n#ifdef __amigaos4__\nmy_setenv_out:\n  amigaos4_release_environ(__FUNCTION__);\n#endif\n}",
    "abstract_func_before": "void\nPerl_my_setenv(pTHX_ const char *VAR_0, const char *VAR_1)\n{\n  VAR_2;\n#ifdef VAR_3\n  amigaos4_obtain_environ(VAR_4);\n#endif\n#ifdef VAR_5\n  /* COMMENT_0 */\n  if (VAR_6 == VAR_7)\n#endif\n  {\n#ifndef VAR_8\n    if (!VAR_9) {\n        /* COMMENT_1 */\n        I32 VAR_10;\n        const I32 VAR_11 = strlen(VAR_0);\n        int VAR_12, VAR_13;\n\n        /* COMMENT_2 */\n        for (VAR_10 = 0; VAR_14[VAR_10]; VAR_10++) {\n            if (strnEQ(VAR_14[VAR_10],VAR_0,VAR_11) && VAR_14[VAR_10][VAR_11] == '=')\n                break;\n        }\n\n        if (VAR_14 == VAR_15) {   /* COMMENT_3 */\n            I32 VAR_16;\n            I32 VAR_17;\n            char **VAR_18;\n\n            VAR_17 = VAR_10;\n            while (VAR_14[VAR_17])\n                VAR_17++;\n            VAR_18 = (char**)safesysmalloc((VAR_17+2) * sizeof(char*));\n            for (VAR_16=0; VAR_16<VAR_17; VAR_16++) {         /* COMMENT_4 */\n                const int VAR_11 = strlen(VAR_14[VAR_16]);\n                VAR_18[VAR_16] = (char*)safesysmalloc((VAR_11+1)*sizeof(char));\n                Copy(VAR_14[VAR_16], VAR_18[VAR_16], VAR_11+1, char);\n            }\n            VAR_18[VAR_17] = NULL;\n            VAR_14 = VAR_18;               /* COMMENT_5 */\n        }\n        if (!VAR_1) {\n            safesysfree(VAR_14[VAR_10]);\n            while (VAR_14[VAR_10]) {\n                VAR_14[VAR_10] = VAR_14[VAR_10+1];\n                VAR_10++;\n            }\n#ifdef VAR_3\n            goto my_setenv_out;\n#else\n            return;\n#endif\n        }\n        if (!VAR_14[VAR_10]) {                 /* COMMENT_6 */\n            VAR_14 = (char**)safesysrealloc(VAR_14, (VAR_10+2) * sizeof(char*));\n            VAR_14[VAR_10+1] = NULL;    /* COMMENT_7 */\n        }\n        else\n            safesysfree(VAR_14[VAR_10]);\n        VAR_12 = strlen(VAR_0);\n        VAR_13 = strlen(VAR_1);\n\n        VAR_14[VAR_10] = (char*)safesysmalloc((VAR_12+VAR_13+2) * sizeof(char));\n        /* COMMENT_8 */\n        my_setenv_format(VAR_14[VAR_10], VAR_0, VAR_12, VAR_1, VAR_13);\n    } else {\n# endif/* COMMENT_9 */\n                                                                          \n                                                                                 \n                                                                               \n      \n#   if defined(VAR_19)|| defined(VAR_20) || defined(VAR_21) || (defined(VAR_22) && defined(VAR_23)) || defined(VAR_24)\n#       if defined(VAR_23)\n        if (VAR_1 == NULL) {\n            (void)unsetenv(VAR_0);\n        } else {\n            (void)setenv(VAR_0, VAR_1, 1);\n        }\n#       else /* COMMENT_14 */\n        (void)setenv(VAR_0, VAR_1, 1);\n#       endif /* COMMENT_15 */\n#   elif defined(VAR_23)\n        if (VAR_1 == NULL) {\n            if (VAR_14) /* COMMENT_16 */\n                (void)unsetenv(VAR_0);\n        } else {\n\t    const int VAR_12 = strlen(VAR_0);\n\t    const int VAR_13 = strlen(VAR_1);\n\t    char * const VAR_25 =\n                (char*)safesysmalloc((VAR_12 + VAR_13 + 2) * sizeof(char));\n            my_setenv_format(VAR_25, VAR_0, VAR_12, VAR_1, VAR_13);\n            (void)putenv(VAR_25);\n        }\n#   else /* COMMENT_14 */\n        char *VAR_25;\n\tconst int VAR_12 = strlen(VAR_0);\n\tint VAR_13;\n        if (!VAR_1) {\n\t   VAR_1 = \"\";\n        }\n        VAR_13 = strlen(VAR_1);\n        VAR_25 = (char*)safesysmalloc((VAR_12 + VAR_13 + 2) * sizeof(char));\n        /* COMMENT_8 */\n        my_setenv_format(VAR_25, VAR_0, VAR_12, VAR_1, VAR_13);\n        (void)putenv(VAR_25);\n#   endif /* COMMENT_17 */\n#ifndef VAR_8\n    }\n#endif\n  }\n#ifdef VAR_3\nmy_setenv_out:\n  amigaos4_release_environ(VAR_4);\n#endif\n}",
    "func_graph_path_before": null,
    "func": "void\nPerl_my_setenv(pTHX_ const char *nam, const char *val)\n{\n  dVAR;\n#ifdef __amigaos4__\n  amigaos4_obtain_environ(__FUNCTION__);\n#endif\n#ifdef USE_ITHREADS\n  /* only parent thread can modify process environment */\n  if (PL_curinterp == aTHX)\n#endif\n  {\n#ifndef PERL_USE_SAFE_PUTENV\n    if (!PL_use_safe_putenv) {\n        /* most putenv()s leak, so we manipulate environ directly */\n        UV i;\n        Size_t vlen, nlen = strlen(nam);\n\n        /* where does it go? */\n        for (i = 0; environ[i]; i++) {\n            if (strnEQ(environ[i], nam, nlen) && environ[i][nlen] == '=')\n                break;\n        }\n\n        if (environ == PL_origenviron) {   /* need we copy environment? */\n            UV j, max;\n            char **tmpenv;\n\n            max = i;\n            while (environ[max])\n                max++;\n            /* XXX shouldn't that be max+1 rather than max+2 ??? - DAPM */\n            tmpenv = (char**)S_env_alloc(NULL, max, 2, 0, sizeof(char*));\n            for (j=0; j<max; j++) {         /* copy environment */\n                const Size_t len = strlen(environ[j]);\n                tmpenv[j] = S_env_alloc(NULL, len, 1, 0, 1);\n                Copy(environ[j], tmpenv[j], len+1, char);\n            }\n            tmpenv[max] = NULL;\n            environ = tmpenv;               /* tell exec where it is now */\n        }\n        if (!val) {\n            safesysfree(environ[i]);\n            while (environ[i]) {\n                environ[i] = environ[i+1];\n                i++;\n            }\n#ifdef __amigaos4__\n            goto my_setenv_out;\n#else\n            return;\n#endif\n        }\n        if (!environ[i]) {                 /* does not exist yet */\n            environ = (char**)S_env_alloc(environ, i, 2, 0, sizeof(char*));\n            environ[i+1] = NULL;    /* make sure it's null terminated */\n        }\n        else\n            safesysfree(environ[i]);\n\n        vlen = strlen(val);\n\n        environ[i] = S_env_alloc(NULL, nlen, vlen, 2, 1);\n        /* all that work just for this */\n        my_setenv_format(environ[i], nam, nlen, val, vlen);\n    } else {\n# endif\n    /* This next branch should only be called #if defined(HAS_SETENV), but\n       Configure doesn't test for that yet.  For Solaris, setenv() and unsetenv()\n       were introduced in Solaris 9, so testing for HAS UNSETENV is sufficient.\n    */\n#   if defined(__CYGWIN__)|| defined(__SYMBIAN32__) || defined(__riscos__) || (defined(__sun) && defined(HAS_UNSETENV)) || defined(PERL_DARWIN)\n#       if defined(HAS_UNSETENV)\n        if (val == NULL) {\n            (void)unsetenv(nam);\n        } else {\n            (void)setenv(nam, val, 1);\n        }\n#       else /* ! HAS_UNSETENV */\n        (void)setenv(nam, val, 1);\n#       endif /* HAS_UNSETENV */\n#   elif defined(HAS_UNSETENV)\n        if (val == NULL) {\n            if (environ) /* old glibc can crash with null environ */\n                (void)unsetenv(nam);\n        } else {\n\t    const Size_t nlen = strlen(nam);\n\t    const Size_t vlen = strlen(val);\n\t    char * const new_env = S_env_alloc(NULL, nlen, vlen, 2, 1);\n            my_setenv_format(new_env, nam, nlen, val, vlen);\n            (void)putenv(new_env);\n        }\n#   else /* ! HAS_UNSETENV */\n        char *new_env;\n\tconst Size_t nlen = strlen(nam);\n\tSize_t vlen;\n        if (!val) {\n\t   val = \"\";\n        }\n        vlen = strlen(val);\n        new_env = S_env_alloc(NULL, nlen, vlen, 2, 1);\n        /* all that work just for this */\n        my_setenv_format(new_env, nam, nlen, val, vlen);\n        (void)putenv(new_env);\n#   endif /* __CYGWIN__ */\n#ifndef PERL_USE_SAFE_PUTENV\n    }\n#endif\n  }\n#ifdef __amigaos4__\nmy_setenv_out:\n  amigaos4_release_environ(__FUNCTION__);\n#endif\n}",
    "abstract_func": "void\nPerl_my_setenv(pTHX_ const char *VAR_0, const char *VAR_1)\n{\n  VAR_2;\n#ifdef VAR_3\n  amigaos4_obtain_environ(VAR_4);\n#endif\n#ifdef VAR_5\n  /* COMMENT_0 */\n  if (VAR_6 == VAR_7)\n#endif\n  {\n#ifndef VAR_8\n    if (!VAR_9) {\n        /* COMMENT_1 */\n        UV VAR_10;\n        Size_t VAR_11, VAR_12 = strlen(VAR_0);\n\n        /* COMMENT_2 */\n        for (VAR_10 = 0; VAR_13[VAR_10]; VAR_10++) {\n            if (strnEQ(VAR_13[VAR_10], VAR_0, VAR_12) && VAR_13[VAR_10][VAR_12] == '=')\n                break;\n        }\n\n        if (VAR_13 == VAR_14) {   /* COMMENT_3 */\n            UV VAR_15, VAR_16;\n            char **VAR_17;\n\n            VAR_16 = VAR_10;\n            while (VAR_13[VAR_16])\n                VAR_16++;\n            /* COMMENT_4 */\n            VAR_17 = (char**)S_env_alloc(NULL, VAR_16, 2, 0, sizeof(char*));\n            for (VAR_15=0; VAR_15<VAR_16; VAR_15++) {         /* COMMENT_5 */\n                const Size_t VAR_18 = strlen(VAR_13[VAR_15]);\n                VAR_17[VAR_15] = S_env_alloc(NULL, VAR_18, 1, 0, 1);\n                Copy(VAR_13[VAR_15], VAR_17[VAR_15], VAR_18+1, char);\n            }\n            VAR_17[VAR_16] = NULL;\n            VAR_13 = VAR_17;               /* COMMENT_6 */\n        }\n        if (!VAR_1) {\n            safesysfree(VAR_13[VAR_10]);\n            while (VAR_13[VAR_10]) {\n                VAR_13[VAR_10] = VAR_13[VAR_10+1];\n                VAR_10++;\n            }\n#ifdef VAR_3\n            goto my_setenv_out;\n#else\n            return;\n#endif\n        }\n        if (!VAR_13[VAR_10]) {                 /* COMMENT_7 */\n            VAR_13 = (char**)S_env_alloc(VAR_13, VAR_10, 2, 0, sizeof(char*));\n            VAR_13[VAR_10+1] = NULL;    /* COMMENT_8 */\n        }\n        else\n            safesysfree(VAR_13[VAR_10]);\n\n        VAR_11 = strlen(VAR_1);\n\n        VAR_13[VAR_10] = S_env_alloc(NULL, VAR_12, VAR_11, 2, 1);\n        /* COMMENT_9 */\n        my_setenv_format(VAR_13[VAR_10], VAR_0, VAR_12, VAR_1, VAR_11);\n    } else {\n# endif/* COMMENT_10 */\n                                                                          \n                                                                                 \n                                                                               \n      \n#   if defined(VAR_19)|| defined(VAR_20) || defined(VAR_21) || (defined(VAR_22) && defined(VAR_23)) || defined(VAR_24)\n#       if defined(VAR_23)\n        if (VAR_1 == NULL) {\n            (void)unsetenv(VAR_0);\n        } else {\n            (void)setenv(VAR_0, VAR_1, 1);\n        }\n#       else /* COMMENT_15 */\n        (void)setenv(VAR_0, VAR_1, 1);\n#       endif /* COMMENT_16 */\n#   elif defined(VAR_23)\n        if (VAR_1 == NULL) {\n            if (VAR_13) /* COMMENT_17 */\n                (void)unsetenv(VAR_0);\n        } else {\n\t    const Size_t VAR_12 = strlen(VAR_0);\n\t    const Size_t VAR_11 = strlen(VAR_1);\n\t    char * const VAR_25 = S_env_alloc(NULL, VAR_12, VAR_11, 2, 1);\n            my_setenv_format(VAR_25, VAR_0, VAR_12, VAR_1, VAR_11);\n            (void)putenv(VAR_25);\n        }\n#   else /* COMMENT_15 */\n        char *VAR_25;\n\tconst Size_t VAR_12 = strlen(VAR_0);\n\tSize_t VAR_11;\n        if (!VAR_1) {\n\t   VAR_1 = \"\";\n        }\n        VAR_11 = strlen(VAR_1);\n        VAR_25 = S_env_alloc(NULL, VAR_12, VAR_11, 2, 1);\n        /* COMMENT_9 */\n        my_setenv_format(VAR_25, VAR_0, VAR_12, VAR_1, VAR_11);\n        (void)putenv(VAR_25);\n#   endif /* COMMENT_18 */\n#ifndef VAR_8\n    }\n#endif\n  }\n#ifdef VAR_3\nmy_setenv_out:\n  amigaos4_release_environ(VAR_4);\n#endif\n}",
    "func_graph_path": null,
    "diff_func": "--- func_before\n+++ func_after\n@@ -13,28 +13,27 @@\n #ifndef PERL_USE_SAFE_PUTENV\n     if (!PL_use_safe_putenv) {\n         /* most putenv()s leak, so we manipulate environ directly */\n-        I32 i;\n-        const I32 len = strlen(nam);\n-        int nlen, vlen;\n+        UV i;\n+        Size_t vlen, nlen = strlen(nam);\n \n         /* where does it go? */\n         for (i = 0; environ[i]; i++) {\n-            if (strnEQ(environ[i],nam,len) && environ[i][len] == '=')\n+            if (strnEQ(environ[i], nam, nlen) && environ[i][nlen] == '=')\n                 break;\n         }\n \n         if (environ == PL_origenviron) {   /* need we copy environment? */\n-            I32 j;\n-            I32 max;\n+            UV j, max;\n             char **tmpenv;\n \n             max = i;\n             while (environ[max])\n                 max++;\n-            tmpenv = (char**)safesysmalloc((max+2) * sizeof(char*));\n+            /* XXX shouldn't that be max+1 rather than max+2 ??? - DAPM */\n+            tmpenv = (char**)S_env_alloc(NULL, max, 2, 0, sizeof(char*));\n             for (j=0; j<max; j++) {         /* copy environment */\n-                const int len = strlen(environ[j]);\n-                tmpenv[j] = (char*)safesysmalloc((len+1)*sizeof(char));\n+                const Size_t len = strlen(environ[j]);\n+                tmpenv[j] = S_env_alloc(NULL, len, 1, 0, 1);\n                 Copy(environ[j], tmpenv[j], len+1, char);\n             }\n             tmpenv[max] = NULL;\n@@ -53,15 +52,15 @@\n #endif\n         }\n         if (!environ[i]) {                 /* does not exist yet */\n-            environ = (char**)safesysrealloc(environ, (i+2) * sizeof(char*));\n+            environ = (char**)S_env_alloc(environ, i, 2, 0, sizeof(char*));\n             environ[i+1] = NULL;    /* make sure it's null terminated */\n         }\n         else\n             safesysfree(environ[i]);\n-        nlen = strlen(nam);\n+\n         vlen = strlen(val);\n \n-        environ[i] = (char*)safesysmalloc((nlen+vlen+2) * sizeof(char));\n+        environ[i] = S_env_alloc(NULL, nlen, vlen, 2, 1);\n         /* all that work just for this */\n         my_setenv_format(environ[i], nam, nlen, val, vlen);\n     } else {\n@@ -85,22 +84,21 @@\n             if (environ) /* old glibc can crash with null environ */\n                 (void)unsetenv(nam);\n         } else {\n-\t    const int nlen = strlen(nam);\n-\t    const int vlen = strlen(val);\n-\t    char * const new_env =\n-                (char*)safesysmalloc((nlen + vlen + 2) * sizeof(char));\n+\t    const Size_t nlen = strlen(nam);\n+\t    const Size_t vlen = strlen(val);\n+\t    char * const new_env = S_env_alloc(NULL, nlen, vlen, 2, 1);\n             my_setenv_format(new_env, nam, nlen, val, vlen);\n             (void)putenv(new_env);\n         }\n #   else /* ! HAS_UNSETENV */\n         char *new_env;\n-\tconst int nlen = strlen(nam);\n-\tint vlen;\n+\tconst Size_t nlen = strlen(nam);\n+\tSize_t vlen;\n         if (!val) {\n \t   val = \"\";\n         }\n         vlen = strlen(val);\n-        new_env = (char*)safesysmalloc((nlen + vlen + 2) * sizeof(char));\n+        new_env = S_env_alloc(NULL, nlen, vlen, 2, 1);\n         /* all that work just for this */\n         my_setenv_format(new_env, nam, nlen, val, vlen);\n         (void)putenv(new_env);",
    "diff_line_info": {
        "deleted_lines": [
            "        I32 i;",
            "        const I32 len = strlen(nam);",
            "        int nlen, vlen;",
            "            if (strnEQ(environ[i],nam,len) && environ[i][len] == '=')",
            "            I32 j;",
            "            I32 max;",
            "            tmpenv = (char**)safesysmalloc((max+2) * sizeof(char*));",
            "                const int len = strlen(environ[j]);",
            "                tmpenv[j] = (char*)safesysmalloc((len+1)*sizeof(char));",
            "            environ = (char**)safesysrealloc(environ, (i+2) * sizeof(char*));",
            "        nlen = strlen(nam);",
            "        environ[i] = (char*)safesysmalloc((nlen+vlen+2) * sizeof(char));",
            "\t    const int nlen = strlen(nam);",
            "\t    const int vlen = strlen(val);",
            "\t    char * const new_env =",
            "                (char*)safesysmalloc((nlen + vlen + 2) * sizeof(char));",
            "\tconst int nlen = strlen(nam);",
            "\tint vlen;",
            "        new_env = (char*)safesysmalloc((nlen + vlen + 2) * sizeof(char));"
        ],
        "added_lines": [
            "        UV i;",
            "        Size_t vlen, nlen = strlen(nam);",
            "            if (strnEQ(environ[i], nam, nlen) && environ[i][nlen] == '=')",
            "            UV j, max;",
            "            /* XXX shouldn't that be max+1 rather than max+2 ??? - DAPM */",
            "            tmpenv = (char**)S_env_alloc(NULL, max, 2, 0, sizeof(char*));",
            "                const Size_t len = strlen(environ[j]);",
            "                tmpenv[j] = S_env_alloc(NULL, len, 1, 0, 1);",
            "            environ = (char**)S_env_alloc(environ, i, 2, 0, sizeof(char*));",
            "",
            "        environ[i] = S_env_alloc(NULL, nlen, vlen, 2, 1);",
            "\t    const Size_t nlen = strlen(nam);",
            "\t    const Size_t vlen = strlen(val);",
            "\t    char * const new_env = S_env_alloc(NULL, nlen, vlen, 2, 1);",
            "\tconst Size_t nlen = strlen(nam);",
            "\tSize_t vlen;",
            "        new_env = S_env_alloc(NULL, nlen, vlen, 2, 1);"
        ]
    },
    "is_vul": true,
    "pr_url": null,
    "description": "no more info"
}