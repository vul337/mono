{
    "cve_id": "CVE-2020-4032",
    "cwe_ids": [
        "CWE-681"
    ],
    "cvss_vector": "AV:N/AC:M/Au:N/C:N/I:P/A:N",
    "cvss_is_v3": false,
    "repo_name": "FreeRDP",
    "commit_msg": "Fixed OOB read in update_recv_secondary_order\n\nCVE-2020-4032 thanks to @antonio-morales for finding this.",
    "commit_hash": "e7bffa64ef5ed70bac94f823e2b95262642f5296",
    "git_url": "https://github.com/FreeRDP/FreeRDP/commit/e7bffa64ef5ed70bac94f823e2b95262642f5296",
    "file_path": "libfreerdp/core/orders.c",
    "func_name": "update_recv_secondary_order",
    "func_before": "static BOOL update_recv_secondary_order(rdpUpdate* update, wStream* s, BYTE flags)\n{\n\tBOOL rc = FALSE;\n\tsize_t start, end, diff;\n\tBYTE orderType;\n\tUINT16 extraFlags;\n\tUINT16 orderLength;\n\trdpContext* context = update->context;\n\trdpSettings* settings = context->settings;\n\trdpSecondaryUpdate* secondary = update->secondary;\n\tconst char* name;\n\n\tif (Stream_GetRemainingLength(s) < 5)\n\t{\n\t\tWLog_Print(update->log, WLOG_ERROR, \"Stream_GetRemainingLength(s) < 5\");\n\t\treturn FALSE;\n\t}\n\n\tStream_Read_UINT16(s, orderLength); /* orderLength (2 bytes) */\n\tStream_Read_UINT16(s, extraFlags);  /* extraFlags (2 bytes) */\n\tStream_Read_UINT8(s, orderType);    /* orderType (1 byte) */\n\tif (Stream_GetRemainingLength(s) < orderLength + 7U)\n\t{\n\t\tWLog_Print(update->log, WLOG_ERROR, \"Stream_GetRemainingLength(s) %\" PRIuz \" < %\" PRIu16,\n\t\t           Stream_GetRemainingLength(s), orderLength + 7);\n\t\treturn FALSE;\n\t}\n\n\tstart = Stream_GetPosition(s);\n\tname = secondary_order_string(orderType);\n\tWLog_Print(update->log, WLOG_DEBUG, \"Secondary Drawing Order %s\", name);\n\n\tif (!check_secondary_order_supported(update->log, settings, orderType, name))\n\t\treturn FALSE;\n\n\tswitch (orderType)\n\t{\n\t\tcase ORDER_TYPE_BITMAP_UNCOMPRESSED:\n\t\tcase ORDER_TYPE_CACHE_BITMAP_COMPRESSED:\n\t\t{\n\t\t\tconst BOOL compressed = (orderType == ORDER_TYPE_CACHE_BITMAP_COMPRESSED);\n\t\t\tCACHE_BITMAP_ORDER* order =\n\t\t\t    update_read_cache_bitmap_order(update, s, compressed, extraFlags);\n\n\t\t\tif (order)\n\t\t\t{\n\t\t\t\trc = IFCALLRESULT(FALSE, secondary->CacheBitmap, context, order);\n\t\t\t\tfree_cache_bitmap_order(context, order);\n\t\t\t}\n\t\t}\n\t\tbreak;\n\n\t\tcase ORDER_TYPE_BITMAP_UNCOMPRESSED_V2:\n\t\tcase ORDER_TYPE_BITMAP_COMPRESSED_V2:\n\t\t{\n\t\t\tconst BOOL compressed = (orderType == ORDER_TYPE_BITMAP_COMPRESSED_V2);\n\t\t\tCACHE_BITMAP_V2_ORDER* order =\n\t\t\t    update_read_cache_bitmap_v2_order(update, s, compressed, extraFlags);\n\n\t\t\tif (order)\n\t\t\t{\n\t\t\t\trc = IFCALLRESULT(FALSE, secondary->CacheBitmapV2, context, order);\n\t\t\t\tfree_cache_bitmap_v2_order(context, order);\n\t\t\t}\n\t\t}\n\t\tbreak;\n\n\t\tcase ORDER_TYPE_BITMAP_COMPRESSED_V3:\n\t\t{\n\t\t\tCACHE_BITMAP_V3_ORDER* order = update_read_cache_bitmap_v3_order(update, s, extraFlags);\n\n\t\t\tif (order)\n\t\t\t{\n\t\t\t\trc = IFCALLRESULT(FALSE, secondary->CacheBitmapV3, context, order);\n\t\t\t\tfree_cache_bitmap_v3_order(context, order);\n\t\t\t}\n\t\t}\n\t\tbreak;\n\n\t\tcase ORDER_TYPE_CACHE_COLOR_TABLE:\n\t\t{\n\t\t\tCACHE_COLOR_TABLE_ORDER* order =\n\t\t\t    update_read_cache_color_table_order(update, s, extraFlags);\n\n\t\t\tif (order)\n\t\t\t{\n\t\t\t\trc = IFCALLRESULT(FALSE, secondary->CacheColorTable, context, order);\n\t\t\t\tfree_cache_color_table_order(context, order);\n\t\t\t}\n\t\t}\n\t\tbreak;\n\n\t\tcase ORDER_TYPE_CACHE_GLYPH:\n\t\t{\n\t\t\tswitch (settings->GlyphSupportLevel)\n\t\t\t{\n\t\t\t\tcase GLYPH_SUPPORT_PARTIAL:\n\t\t\t\tcase GLYPH_SUPPORT_FULL:\n\t\t\t\t{\n\t\t\t\t\tCACHE_GLYPH_ORDER* order = update_read_cache_glyph_order(update, s, extraFlags);\n\n\t\t\t\t\tif (order)\n\t\t\t\t\t{\n\t\t\t\t\t\trc = IFCALLRESULT(FALSE, secondary->CacheGlyph, context, order);\n\t\t\t\t\t\tfree_cache_glyph_order(context, order);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\t\tcase GLYPH_SUPPORT_ENCODE:\n\t\t\t\t{\n\t\t\t\t\tCACHE_GLYPH_V2_ORDER* order =\n\t\t\t\t\t    update_read_cache_glyph_v2_order(update, s, extraFlags);\n\n\t\t\t\t\tif (order)\n\t\t\t\t\t{\n\t\t\t\t\t\trc = IFCALLRESULT(FALSE, secondary->CacheGlyphV2, context, order);\n\t\t\t\t\t\tfree_cache_glyph_v2_order(context, order);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\t\tcase GLYPH_SUPPORT_NONE:\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tbreak;\n\n\t\tcase ORDER_TYPE_CACHE_BRUSH:\n\t\t\t/* [MS-RDPEGDI] 2.2.2.2.1.2.7 Cache Brush (CACHE_BRUSH_ORDER) */\n\t\t\t{\n\t\t\t\tCACHE_BRUSH_ORDER* order = update_read_cache_brush_order(update, s, extraFlags);\n\n\t\t\t\tif (order)\n\t\t\t\t{\n\t\t\t\t\trc = IFCALLRESULT(FALSE, secondary->CacheBrush, context, order);\n\t\t\t\t\tfree_cache_brush_order(context, order);\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tWLog_Print(update->log, WLOG_WARN, \"SECONDARY ORDER %s not supported\", name);\n\t\t\tbreak;\n\t}\n\n\tif (!rc)\n\t{\n\t\tWLog_Print(update->log, WLOG_ERROR, \"SECONDARY ORDER %s failed\", name);\n\t}\n\n\tstart += orderLength + 7;\n\tend = Stream_GetPosition(s);\n\tif (start > end)\n\t{\n\t\tWLog_Print(update->log, WLOG_WARN, \"SECONDARY_ORDER %s: read %\" PRIuz \"bytes too much\",\n\t\t           name, end - start);\n\t\treturn FALSE;\n\t}\n\tdiff = start - end;\n\tif (diff > 0)\n\t{\n\t\tWLog_Print(update->log, WLOG_DEBUG,\n\t\t           \"SECONDARY_ORDER %s: read %\" PRIuz \"bytes short, skipping\", name, diff);\n\t\tStream_Seek(s, diff);\n\t}\n\treturn rc;\n}",
    "abstract_func_before": "static BOOL update_recv_secondary_order(rdpUpdate* VAR_0, wStream* VAR_1, BYTE VAR_2)\n{\n\tBOOL VAR_3 = FALSE;\n\tsize_t VAR_4, VAR_5, VAR_6;\n\tBYTE VAR_7;\n\tUINT16 VAR_8;\n\tUINT16 VAR_9;\n\trdpContext* VAR_10 = VAR_0->context;\n\trdpSettings* VAR_11 = VAR_10->settings;\n\trdpSecondaryUpdate* VAR_12 = VAR_0->secondary;\n\tconst char* VAR_13;\n\n\tif (Stream_GetRemainingLength(VAR_1) < 5)\n\t{\n\t\tWLog_Print(VAR_0->log, VAR_14, \"Stream_GetRemainingLength(s) < 5\");\n\t\treturn FALSE;\n\t}\n\n\tStream_Read_UINT16(VAR_1, VAR_9); /* COMMENT_0 */\n\tStream_Read_UINT16(VAR_1, VAR_8);  /* COMMENT_1 */\n\tStream_Read_UINT8(VAR_1, VAR_7);    /* COMMENT_2 */\n\tif (Stream_GetRemainingLength(VAR_1) < VAR_9 + 7U)\n\t{\n\t\tWLog_Print(VAR_0->log, VAR_14, \"Stream_GetRemainingLength(s) %\" VAR_15 \" < %\" VAR_16,\n\t\t           Stream_GetRemainingLength(VAR_1), VAR_9 + 7);\n\t\treturn FALSE;\n\t}\n\n\tVAR_4 = Stream_GetPosition(VAR_1);\n\tVAR_13 = secondary_order_string(VAR_7);\n\tWLog_Print(VAR_0->log, VAR_17, \"Secondary Drawing Order %s\", VAR_13);\n\n\tif (!check_secondary_order_supported(VAR_0->log, VAR_11, VAR_7, VAR_13))\n\t\treturn FALSE;\n\n\tswitch (VAR_7)\n\t{\n\t\tcase VAR_18:\n\t\tcase VAR_19:\n\t\t{\n\t\t\tconst BOOL VAR_20 = (VAR_7 == VAR_19);\n\t\t\tCACHE_BITMAP_ORDER* VAR_21 =\n\t\t\t    update_read_cache_bitmap_order(VAR_0, VAR_1, VAR_20, VAR_8);\n\n\t\t\tif (VAR_21)\n\t\t\t{\n\t\t\t\tVAR_3 = IFCALLRESULT(FALSE, VAR_12->CacheBitmap, VAR_10, VAR_21);\n\t\t\t\tfree_cache_bitmap_order(VAR_10, VAR_21);\n\t\t\t}\n\t\t}\n\t\tbreak;\n\n\t\tcase VAR_22:\n\t\tcase VAR_23:\n\t\t{\n\t\t\tconst BOOL VAR_20 = (VAR_7 == VAR_23);\n\t\t\tCACHE_BITMAP_V2_ORDER* VAR_21 =\n\t\t\t    update_read_cache_bitmap_v2_order(VAR_0, VAR_1, VAR_20, VAR_8);\n\n\t\t\tif (VAR_21)\n\t\t\t{\n\t\t\t\tVAR_3 = IFCALLRESULT(FALSE, VAR_12->CacheBitmapV2, VAR_10, VAR_21);\n\t\t\t\tfree_cache_bitmap_v2_order(VAR_10, VAR_21);\n\t\t\t}\n\t\t}\n\t\tbreak;\n\n\t\tcase VAR_24:\n\t\t{\n\t\t\tCACHE_BITMAP_V3_ORDER* VAR_21 = update_read_cache_bitmap_v3_order(VAR_0, VAR_1, VAR_8);\n\n\t\t\tif (VAR_21)\n\t\t\t{\n\t\t\t\tVAR_3 = IFCALLRESULT(FALSE, VAR_12->CacheBitmapV3, VAR_10, VAR_21);\n\t\t\t\tfree_cache_bitmap_v3_order(VAR_10, VAR_21);\n\t\t\t}\n\t\t}\n\t\tbreak;\n\n\t\tcase VAR_25:\n\t\t{\n\t\t\tCACHE_COLOR_TABLE_ORDER* VAR_21 =\n\t\t\t    update_read_cache_color_table_order(VAR_0, VAR_1, VAR_8);\n\n\t\t\tif (VAR_21)\n\t\t\t{\n\t\t\t\tVAR_3 = IFCALLRESULT(FALSE, VAR_12->CacheColorTable, VAR_10, VAR_21);\n\t\t\t\tfree_cache_color_table_order(VAR_10, VAR_21);\n\t\t\t}\n\t\t}\n\t\tbreak;\n\n\t\tcase VAR_26:\n\t\t{\n\t\t\tswitch (VAR_11->GlyphSupportLevel)\n\t\t\t{\n\t\t\t\tcase VAR_27:\n\t\t\t\tcase VAR_28:\n\t\t\t\t{\n\t\t\t\t\tCACHE_GLYPH_ORDER* VAR_21 = update_read_cache_glyph_order(VAR_0, VAR_1, VAR_8);\n\n\t\t\t\t\tif (VAR_21)\n\t\t\t\t\t{\n\t\t\t\t\t\tVAR_3 = IFCALLRESULT(FALSE, VAR_12->CacheGlyph, VAR_10, VAR_21);\n\t\t\t\t\t\tfree_cache_glyph_order(VAR_10, VAR_21);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\t\tcase VAR_29:\n\t\t\t\t{\n\t\t\t\t\tCACHE_GLYPH_V2_ORDER* VAR_21 =\n\t\t\t\t\t    update_read_cache_glyph_v2_order(VAR_0, VAR_1, VAR_8);\n\n\t\t\t\t\tif (VAR_21)\n\t\t\t\t\t{\n\t\t\t\t\t\tVAR_3 = IFCALLRESULT(FALSE, VAR_12->CacheGlyphV2, VAR_10, VAR_21);\n\t\t\t\t\t\tfree_cache_glyph_v2_order(VAR_10, VAR_21);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\t\tcase VAR_30:\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tbreak;\n\n\t\tcase VAR_31:\n\t\t\t/* COMMENT_3 */\n\t\t\t{\n\t\t\t\tCACHE_BRUSH_ORDER* VAR_21 = update_read_cache_brush_order(VAR_0, VAR_1, VAR_8);\n\n\t\t\t\tif (VAR_21)\n\t\t\t\t{\n\t\t\t\t\tVAR_3 = IFCALLRESULT(FALSE, VAR_12->CacheBrush, VAR_10, VAR_21);\n\t\t\t\t\tfree_cache_brush_order(VAR_10, VAR_21);\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tWLog_Print(VAR_0->log, VAR_32, \"SECONDARY ORDER %s not supported\", VAR_13);\n\t\t\tbreak;\n\t}\n\n\tif (!VAR_3)\n\t{\n\t\tWLog_Print(VAR_0->log, VAR_14, \"SECONDARY ORDER %s failed\", VAR_13);\n\t}\n\n\tVAR_4 += VAR_9 + 7;\n\tVAR_5 = Stream_GetPosition(VAR_1);\n\tif (VAR_4 > VAR_5)\n\t{\n\t\tWLog_Print(VAR_0->log, VAR_32, \"SECONDARY_ORDER %s: read %\" VAR_15 \"bytes too much\",\n\t\t           VAR_13, VAR_5 - VAR_4);\n\t\treturn FALSE;\n\t}\n\tVAR_6 = VAR_4 - VAR_5;\n\tif (VAR_6 > 0)\n\t{\n\t\tWLog_Print(VAR_0->log, VAR_17,\n\t\t           \"SECONDARY_ORDER %s: read %\" VAR_15 \"bytes short, skipping\", VAR_13, VAR_6);\n\t\tStream_Seek(VAR_1, VAR_6);\n\t}\n\treturn VAR_3;\n}",
    "func_graph_path_before": "FreeRDP/e7bffa64ef5ed70bac94f823e2b95262642f5296/orders.c/vul/before/0.json",
    "func": "static BOOL update_recv_secondary_order(rdpUpdate* update, wStream* s, BYTE flags)\n{\n\tBOOL rc = FALSE;\n\tsize_t start, end, diff;\n\tBYTE orderType;\n\tUINT16 extraFlags;\n\tUINT16 orderLength;\n\trdpContext* context = update->context;\n\trdpSettings* settings = context->settings;\n\trdpSecondaryUpdate* secondary = update->secondary;\n\tconst char* name;\n\n\tif (Stream_GetRemainingLength(s) < 5)\n\t{\n\t\tWLog_Print(update->log, WLOG_ERROR, \"Stream_GetRemainingLength(s) < 5\");\n\t\treturn FALSE;\n\t}\n\n\tStream_Read_UINT16(s, orderLength); /* orderLength (2 bytes) */\n\tStream_Read_UINT16(s, extraFlags);  /* extraFlags (2 bytes) */\n\tStream_Read_UINT8(s, orderType);    /* orderType (1 byte) */\n\tif (Stream_GetRemainingLength(s) < orderLength + 7U)\n\t{\n\t\tWLog_Print(update->log, WLOG_ERROR, \"Stream_GetRemainingLength(s) %\" PRIuz \" < %\" PRIu16,\n\t\t           Stream_GetRemainingLength(s), orderLength + 7);\n\t\treturn FALSE;\n\t}\n\n\tstart = Stream_GetPosition(s);\n\tname = secondary_order_string(orderType);\n\tWLog_Print(update->log, WLOG_DEBUG, \"Secondary Drawing Order %s\", name);\n\n\tif (!check_secondary_order_supported(update->log, settings, orderType, name))\n\t\treturn FALSE;\n\n\tswitch (orderType)\n\t{\n\t\tcase ORDER_TYPE_BITMAP_UNCOMPRESSED:\n\t\tcase ORDER_TYPE_CACHE_BITMAP_COMPRESSED:\n\t\t{\n\t\t\tconst BOOL compressed = (orderType == ORDER_TYPE_CACHE_BITMAP_COMPRESSED);\n\t\t\tCACHE_BITMAP_ORDER* order =\n\t\t\t    update_read_cache_bitmap_order(update, s, compressed, extraFlags);\n\n\t\t\tif (order)\n\t\t\t{\n\t\t\t\trc = IFCALLRESULT(FALSE, secondary->CacheBitmap, context, order);\n\t\t\t\tfree_cache_bitmap_order(context, order);\n\t\t\t}\n\t\t}\n\t\tbreak;\n\n\t\tcase ORDER_TYPE_BITMAP_UNCOMPRESSED_V2:\n\t\tcase ORDER_TYPE_BITMAP_COMPRESSED_V2:\n\t\t{\n\t\t\tconst BOOL compressed = (orderType == ORDER_TYPE_BITMAP_COMPRESSED_V2);\n\t\t\tCACHE_BITMAP_V2_ORDER* order =\n\t\t\t    update_read_cache_bitmap_v2_order(update, s, compressed, extraFlags);\n\n\t\t\tif (order)\n\t\t\t{\n\t\t\t\trc = IFCALLRESULT(FALSE, secondary->CacheBitmapV2, context, order);\n\t\t\t\tfree_cache_bitmap_v2_order(context, order);\n\t\t\t}\n\t\t}\n\t\tbreak;\n\n\t\tcase ORDER_TYPE_BITMAP_COMPRESSED_V3:\n\t\t{\n\t\t\tCACHE_BITMAP_V3_ORDER* order = update_read_cache_bitmap_v3_order(update, s, extraFlags);\n\n\t\t\tif (order)\n\t\t\t{\n\t\t\t\trc = IFCALLRESULT(FALSE, secondary->CacheBitmapV3, context, order);\n\t\t\t\tfree_cache_bitmap_v3_order(context, order);\n\t\t\t}\n\t\t}\n\t\tbreak;\n\n\t\tcase ORDER_TYPE_CACHE_COLOR_TABLE:\n\t\t{\n\t\t\tCACHE_COLOR_TABLE_ORDER* order =\n\t\t\t    update_read_cache_color_table_order(update, s, extraFlags);\n\n\t\t\tif (order)\n\t\t\t{\n\t\t\t\trc = IFCALLRESULT(FALSE, secondary->CacheColorTable, context, order);\n\t\t\t\tfree_cache_color_table_order(context, order);\n\t\t\t}\n\t\t}\n\t\tbreak;\n\n\t\tcase ORDER_TYPE_CACHE_GLYPH:\n\t\t{\n\t\t\tswitch (settings->GlyphSupportLevel)\n\t\t\t{\n\t\t\t\tcase GLYPH_SUPPORT_PARTIAL:\n\t\t\t\tcase GLYPH_SUPPORT_FULL:\n\t\t\t\t{\n\t\t\t\t\tCACHE_GLYPH_ORDER* order = update_read_cache_glyph_order(update, s, extraFlags);\n\n\t\t\t\t\tif (order)\n\t\t\t\t\t{\n\t\t\t\t\t\trc = IFCALLRESULT(FALSE, secondary->CacheGlyph, context, order);\n\t\t\t\t\t\tfree_cache_glyph_order(context, order);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\t\tcase GLYPH_SUPPORT_ENCODE:\n\t\t\t\t{\n\t\t\t\t\tCACHE_GLYPH_V2_ORDER* order =\n\t\t\t\t\t    update_read_cache_glyph_v2_order(update, s, extraFlags);\n\n\t\t\t\t\tif (order)\n\t\t\t\t\t{\n\t\t\t\t\t\trc = IFCALLRESULT(FALSE, secondary->CacheGlyphV2, context, order);\n\t\t\t\t\t\tfree_cache_glyph_v2_order(context, order);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\t\tcase GLYPH_SUPPORT_NONE:\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tbreak;\n\n\t\tcase ORDER_TYPE_CACHE_BRUSH:\n\t\t\t/* [MS-RDPEGDI] 2.2.2.2.1.2.7 Cache Brush (CACHE_BRUSH_ORDER) */\n\t\t\t{\n\t\t\t\tCACHE_BRUSH_ORDER* order = update_read_cache_brush_order(update, s, extraFlags);\n\n\t\t\t\tif (order)\n\t\t\t\t{\n\t\t\t\t\trc = IFCALLRESULT(FALSE, secondary->CacheBrush, context, order);\n\t\t\t\t\tfree_cache_brush_order(context, order);\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tWLog_Print(update->log, WLOG_WARN, \"SECONDARY ORDER %s not supported\", name);\n\t\t\tbreak;\n\t}\n\n\tif (!rc)\n\t{\n\t\tWLog_Print(update->log, WLOG_ERROR, \"SECONDARY ORDER %s failed\", name);\n\t}\n\n\tstart += orderLength + 7;\n\tend = Stream_GetPosition(s);\n\tif (start > end)\n\t{\n\t\tWLog_Print(update->log, WLOG_WARN, \"SECONDARY_ORDER %s: read %\" PRIuz \"bytes too much\",\n\t\t           name, end - start);\n\t\treturn FALSE;\n\t}\n\tdiff = end - start;\n\tif (diff > 0)\n\t{\n\t\tWLog_Print(update->log, WLOG_DEBUG,\n\t\t           \"SECONDARY_ORDER %s: read %\" PRIuz \"bytes short, skipping\", name, diff);\n\t\tif (!Stream_SafeSeek(s, diff))\n\t\t\treturn FALSE;\n\t}\n\treturn rc;\n}",
    "abstract_func": "static BOOL update_recv_secondary_order(rdpUpdate* VAR_0, wStream* VAR_1, BYTE VAR_2)\n{\n\tBOOL VAR_3 = FALSE;\n\tsize_t VAR_4, VAR_5, VAR_6;\n\tBYTE VAR_7;\n\tUINT16 VAR_8;\n\tUINT16 VAR_9;\n\trdpContext* VAR_10 = VAR_0->context;\n\trdpSettings* VAR_11 = VAR_10->settings;\n\trdpSecondaryUpdate* VAR_12 = VAR_0->secondary;\n\tconst char* VAR_13;\n\n\tif (Stream_GetRemainingLength(VAR_1) < 5)\n\t{\n\t\tWLog_Print(VAR_0->log, VAR_14, \"Stream_GetRemainingLength(s) < 5\");\n\t\treturn FALSE;\n\t}\n\n\tStream_Read_UINT16(VAR_1, VAR_9); /* COMMENT_0 */\n\tStream_Read_UINT16(VAR_1, VAR_8);  /* COMMENT_1 */\n\tStream_Read_UINT8(VAR_1, VAR_7);    /* COMMENT_2 */\n\tif (Stream_GetRemainingLength(VAR_1) < VAR_9 + 7U)\n\t{\n\t\tWLog_Print(VAR_0->log, VAR_14, \"Stream_GetRemainingLength(s) %\" VAR_15 \" < %\" VAR_16,\n\t\t           Stream_GetRemainingLength(VAR_1), VAR_9 + 7);\n\t\treturn FALSE;\n\t}\n\n\tVAR_4 = Stream_GetPosition(VAR_1);\n\tVAR_13 = secondary_order_string(VAR_7);\n\tWLog_Print(VAR_0->log, VAR_17, \"Secondary Drawing Order %s\", VAR_13);\n\n\tif (!check_secondary_order_supported(VAR_0->log, VAR_11, VAR_7, VAR_13))\n\t\treturn FALSE;\n\n\tswitch (VAR_7)\n\t{\n\t\tcase VAR_18:\n\t\tcase VAR_19:\n\t\t{\n\t\t\tconst BOOL VAR_20 = (VAR_7 == VAR_19);\n\t\t\tCACHE_BITMAP_ORDER* VAR_21 =\n\t\t\t    update_read_cache_bitmap_order(VAR_0, VAR_1, VAR_20, VAR_8);\n\n\t\t\tif (VAR_21)\n\t\t\t{\n\t\t\t\tVAR_3 = IFCALLRESULT(FALSE, VAR_12->CacheBitmap, VAR_10, VAR_21);\n\t\t\t\tfree_cache_bitmap_order(VAR_10, VAR_21);\n\t\t\t}\n\t\t}\n\t\tbreak;\n\n\t\tcase VAR_22:\n\t\tcase VAR_23:\n\t\t{\n\t\t\tconst BOOL VAR_20 = (VAR_7 == VAR_23);\n\t\t\tCACHE_BITMAP_V2_ORDER* VAR_21 =\n\t\t\t    update_read_cache_bitmap_v2_order(VAR_0, VAR_1, VAR_20, VAR_8);\n\n\t\t\tif (VAR_21)\n\t\t\t{\n\t\t\t\tVAR_3 = IFCALLRESULT(FALSE, VAR_12->CacheBitmapV2, VAR_10, VAR_21);\n\t\t\t\tfree_cache_bitmap_v2_order(VAR_10, VAR_21);\n\t\t\t}\n\t\t}\n\t\tbreak;\n\n\t\tcase VAR_24:\n\t\t{\n\t\t\tCACHE_BITMAP_V3_ORDER* VAR_21 = update_read_cache_bitmap_v3_order(VAR_0, VAR_1, VAR_8);\n\n\t\t\tif (VAR_21)\n\t\t\t{\n\t\t\t\tVAR_3 = IFCALLRESULT(FALSE, VAR_12->CacheBitmapV3, VAR_10, VAR_21);\n\t\t\t\tfree_cache_bitmap_v3_order(VAR_10, VAR_21);\n\t\t\t}\n\t\t}\n\t\tbreak;\n\n\t\tcase VAR_25:\n\t\t{\n\t\t\tCACHE_COLOR_TABLE_ORDER* VAR_21 =\n\t\t\t    update_read_cache_color_table_order(VAR_0, VAR_1, VAR_8);\n\n\t\t\tif (VAR_21)\n\t\t\t{\n\t\t\t\tVAR_3 = IFCALLRESULT(FALSE, VAR_12->CacheColorTable, VAR_10, VAR_21);\n\t\t\t\tfree_cache_color_table_order(VAR_10, VAR_21);\n\t\t\t}\n\t\t}\n\t\tbreak;\n\n\t\tcase VAR_26:\n\t\t{\n\t\t\tswitch (VAR_11->GlyphSupportLevel)\n\t\t\t{\n\t\t\t\tcase VAR_27:\n\t\t\t\tcase VAR_28:\n\t\t\t\t{\n\t\t\t\t\tCACHE_GLYPH_ORDER* VAR_21 = update_read_cache_glyph_order(VAR_0, VAR_1, VAR_8);\n\n\t\t\t\t\tif (VAR_21)\n\t\t\t\t\t{\n\t\t\t\t\t\tVAR_3 = IFCALLRESULT(FALSE, VAR_12->CacheGlyph, VAR_10, VAR_21);\n\t\t\t\t\t\tfree_cache_glyph_order(VAR_10, VAR_21);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\t\tcase VAR_29:\n\t\t\t\t{\n\t\t\t\t\tCACHE_GLYPH_V2_ORDER* VAR_21 =\n\t\t\t\t\t    update_read_cache_glyph_v2_order(VAR_0, VAR_1, VAR_8);\n\n\t\t\t\t\tif (VAR_21)\n\t\t\t\t\t{\n\t\t\t\t\t\tVAR_3 = IFCALLRESULT(FALSE, VAR_12->CacheGlyphV2, VAR_10, VAR_21);\n\t\t\t\t\t\tfree_cache_glyph_v2_order(VAR_10, VAR_21);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\t\tcase VAR_30:\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tbreak;\n\n\t\tcase VAR_31:\n\t\t\t/* COMMENT_3 */\n\t\t\t{\n\t\t\t\tCACHE_BRUSH_ORDER* VAR_21 = update_read_cache_brush_order(VAR_0, VAR_1, VAR_8);\n\n\t\t\t\tif (VAR_21)\n\t\t\t\t{\n\t\t\t\t\tVAR_3 = IFCALLRESULT(FALSE, VAR_12->CacheBrush, VAR_10, VAR_21);\n\t\t\t\t\tfree_cache_brush_order(VAR_10, VAR_21);\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tWLog_Print(VAR_0->log, VAR_32, \"SECONDARY ORDER %s not supported\", VAR_13);\n\t\t\tbreak;\n\t}\n\n\tif (!VAR_3)\n\t{\n\t\tWLog_Print(VAR_0->log, VAR_14, \"SECONDARY ORDER %s failed\", VAR_13);\n\t}\n\n\tVAR_4 += VAR_9 + 7;\n\tVAR_5 = Stream_GetPosition(VAR_1);\n\tif (VAR_4 > VAR_5)\n\t{\n\t\tWLog_Print(VAR_0->log, VAR_32, \"SECONDARY_ORDER %s: read %\" VAR_15 \"bytes too much\",\n\t\t           VAR_13, VAR_5 - VAR_4);\n\t\treturn FALSE;\n\t}\n\tVAR_6 = VAR_5 - VAR_4;\n\tif (VAR_6 > 0)\n\t{\n\t\tWLog_Print(VAR_0->log, VAR_17,\n\t\t           \"SECONDARY_ORDER %s: read %\" VAR_15 \"bytes short, skipping\", VAR_13, VAR_6);\n\t\tif (!Stream_SafeSeek(VAR_1, VAR_6))\n\t\t\treturn FALSE;\n\t}\n\treturn VAR_3;\n}",
    "func_graph_path": "FreeRDP/e7bffa64ef5ed70bac94f823e2b95262642f5296/orders.c/vul/after/0.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -158,12 +158,13 @@\n \t\t           name, end - start);\n \t\treturn FALSE;\n \t}\n-\tdiff = start - end;\n+\tdiff = end - start;\n \tif (diff > 0)\n \t{\n \t\tWLog_Print(update->log, WLOG_DEBUG,\n \t\t           \"SECONDARY_ORDER %s: read %\" PRIuz \"bytes short, skipping\", name, diff);\n-\t\tStream_Seek(s, diff);\n+\t\tif (!Stream_SafeSeek(s, diff))\n+\t\t\treturn FALSE;\n \t}\n \treturn rc;\n }",
    "diff_line_info": {
        "deleted_lines": [
            "\tdiff = start - end;",
            "\t\tStream_Seek(s, diff);"
        ],
        "added_lines": [
            "\tdiff = end - start;",
            "\t\tif (!Stream_SafeSeek(s, diff))",
            "\t\t\treturn FALSE;"
        ]
    },
    "is_vul": true,
    "pr_url": "https://github.com/FreeRDP/FreeRDP/pull/6295",
    "description": "no more info"
}