{
    "cve_id": "CVE-2017-9732",
    "cwe_ids": [
        "CWE-400"
    ],
    "cvss_vector": "AV:N/AC:L/Au:N/C:N/I:N/A:P",
    "cvss_is_v3": false,
    "repo_name": "elric1/knc",
    "commit_msg": "knc: fix a couple of memory leaks.\n\nOne of these can be remotely triggered during the authentication\nphase which leads to a remote DoS possibility.\n\nPointed out by: Imre Rad <radimre83@gmail.com>",
    "commit_hash": "f237f3e09ecbaf59c897f5046538a7b1a3fa40c1",
    "git_url": "https://github.com/elric1/knc/commit/f237f3e09ecbaf59c897f5046538a7b1a3fa40c1",
    "file_path": "bin/gssstdio.c",
    "func_name": "gstd_accept",
    "func_before": "void *\ngstd_accept(int fd, char **display_creds, char **export_name, char **mech)\n{\n\tgss_name_t\t client;\n\tgss_OID\t\t mech_oid;\n\tstruct gstd_tok *tok;\n\tgss_ctx_id_t\t ctx = GSS_C_NO_CONTEXT;\n\tgss_buffer_desc\t in, out;\n\tOM_uint32\t maj, min;\n\tint\t\t ret;\n\n\t*display_creds = NULL;\n\t*export_name = NULL;\n\tout.length = 0;\n\tin.length = 0;\n\tread_packet(fd, &in, 60000, 1);\nagain:\n\twhile ((ret = read_packet(fd, &in, 60000, 0)) == -2)\n\t\t;\n\n\tif (ret < 1)\n\t\treturn NULL;\n\n\tmaj = gss_accept_sec_context(&min, &ctx, GSS_C_NO_CREDENTIAL,\n\t    &in, GSS_C_NO_CHANNEL_BINDINGS, &client, &mech_oid, &out, NULL,\n\t    NULL, NULL);\n\n\tif (out.length && write_packet(fd, &out)) {\n\t\tgss_release_buffer(&min, &out);\n\t\treturn NULL;\n\t}\n\n\tGSTD_GSS_ERROR(maj, min, NULL, \"gss_accept_sec_context\");\n\n\tif (maj & GSS_S_CONTINUE_NEEDED)\n\t\tgoto again;\n\n\t*display_creds = gstd_get_display_name(client);\n\t*export_name = gstd_get_export_name(client);\n\t*mech = gstd_get_mech(mech_oid);\n\n\tgss_release_name(&min, &client);\n\tSETUP_GSTD_TOK(tok, ctx, fd, \"gstd_accept\");\n\treturn tok;\n}",
    "abstract_func_before": "void *\ngstd_accept(int VAR_0, char **VAR_1, char **VAR_2, char **VAR_3)\n{\n\tgss_name_t\t VAR_4;\n\tgss_OID\t\t VAR_5;\n\tstruct gstd_tok *VAR_6;\n\tgss_ctx_id_t\t VAR_7 = VAR_8;\n\tgss_buffer_desc\t VAR_9, VAR_10;\n\tOM_uint32\t VAR_11, VAR_12;\n\tint\t\t VAR_13;\n\n\t*VAR_1 = NULL;\n\t*VAR_2 = NULL;\n\tVAR_10.length = 0;\n\tVAR_9.length = 0;\n\tread_packet(VAR_0, &VAR_9, 60000, 1);\nagain:\n\twhile ((VAR_13 = read_packet(VAR_0, &VAR_9, 60000, 0)) == -2)\n\t\t;\n\n\tif (VAR_13 < 1)\n\t\treturn NULL;\n\n\tVAR_11 = gss_accept_sec_context(&VAR_12, &VAR_7, VAR_14,\n\t    &VAR_9, VAR_15, &VAR_4, &VAR_5, &VAR_10, NULL,\n\t    NULL, NULL);\n\n\tif (VAR_10.length && write_packet(VAR_0, &VAR_10)) {\n\t\tgss_release_buffer(&VAR_12, &VAR_10);\n\t\treturn NULL;\n\t}\n\n\tGSTD_GSS_ERROR(VAR_11, VAR_12, NULL, \"gss_accept_sec_context\");\n\n\tif (VAR_11 & VAR_16)\n\t\tgoto again;\n\n\t*VAR_1 = gstd_get_display_name(VAR_4);\n\t*VAR_2 = gstd_get_export_name(VAR_4);\n\t*VAR_3 = gstd_get_mech(VAR_5);\n\n\tgss_release_name(&VAR_12, &VAR_4);\n\tSETUP_GSTD_TOK(VAR_6, VAR_7, VAR_0, \"gstd_accept\");\n\treturn VAR_6;\n}",
    "func_graph_path_before": "elric1/knc/f237f3e09ecbaf59c897f5046538a7b1a3fa40c1/gssstdio.c/vul/before/0.json",
    "func": "void *\ngstd_accept(int fd, char **display_creds, char **export_name, char **mech)\n{\n\tgss_name_t\t client;\n\tgss_OID\t\t mech_oid;\n\tstruct gstd_tok *tok;\n\tgss_ctx_id_t\t ctx = GSS_C_NO_CONTEXT;\n\tgss_buffer_desc\t in, out;\n\tOM_uint32\t maj, min;\n\tint\t\t ret;\n\n\t*display_creds = NULL;\n\t*export_name = NULL;\n\tout.length = 0;\n\tin.length = 0;\n\tread_packet(fd, &in, 60000, 1);\nagain:\n\twhile ((ret = read_packet(fd, &in, 60000, 0)) == -2)\n\t\t;\n\n\tif (ret < 1)\n\t\treturn NULL;\n\n\tmaj = gss_accept_sec_context(&min, &ctx, GSS_C_NO_CREDENTIAL,\n\t    &in, GSS_C_NO_CHANNEL_BINDINGS, &client, &mech_oid, &out, NULL,\n\t    NULL, NULL);\n\n\tgss_release_buffer(&min, &in);\n\n\tif (out.length && write_packet(fd, &out)) {\n\t\tgss_release_buffer(&min, &out);\n\t\treturn NULL;\n\t}\n\tgss_release_buffer(&min, &out);\n\n\tGSTD_GSS_ERROR(maj, min, NULL, \"gss_accept_sec_context\");\n\n\tif (maj & GSS_S_CONTINUE_NEEDED)\n\t\tgoto again;\n\n\t*display_creds = gstd_get_display_name(client);\n\t*export_name = gstd_get_export_name(client);\n\t*mech = gstd_get_mech(mech_oid);\n\n\tgss_release_name(&min, &client);\n\tSETUP_GSTD_TOK(tok, ctx, fd, \"gstd_accept\");\n\treturn tok;\n}",
    "abstract_func": "void *\ngstd_accept(int VAR_0, char **VAR_1, char **VAR_2, char **VAR_3)\n{\n\tgss_name_t\t VAR_4;\n\tgss_OID\t\t VAR_5;\n\tstruct gstd_tok *VAR_6;\n\tgss_ctx_id_t\t VAR_7 = VAR_8;\n\tgss_buffer_desc\t VAR_9, VAR_10;\n\tOM_uint32\t VAR_11, VAR_12;\n\tint\t\t VAR_13;\n\n\t*VAR_1 = NULL;\n\t*VAR_2 = NULL;\n\tVAR_10.length = 0;\n\tVAR_9.length = 0;\n\tread_packet(VAR_0, &VAR_9, 60000, 1);\nagain:\n\twhile ((VAR_13 = read_packet(VAR_0, &VAR_9, 60000, 0)) == -2)\n\t\t;\n\n\tif (VAR_13 < 1)\n\t\treturn NULL;\n\n\tVAR_11 = gss_accept_sec_context(&VAR_12, &VAR_7, VAR_14,\n\t    &VAR_9, VAR_15, &VAR_4, &VAR_5, &VAR_10, NULL,\n\t    NULL, NULL);\n\n\tgss_release_buffer(&VAR_12, &VAR_9);\n\n\tif (VAR_10.length && write_packet(VAR_0, &VAR_10)) {\n\t\tgss_release_buffer(&VAR_12, &VAR_10);\n\t\treturn NULL;\n\t}\n\tgss_release_buffer(&VAR_12, &VAR_10);\n\n\tGSTD_GSS_ERROR(VAR_11, VAR_12, NULL, \"gss_accept_sec_context\");\n\n\tif (VAR_11 & VAR_16)\n\t\tgoto again;\n\n\t*VAR_1 = gstd_get_display_name(VAR_4);\n\t*VAR_2 = gstd_get_export_name(VAR_4);\n\t*VAR_3 = gstd_get_mech(VAR_5);\n\n\tgss_release_name(&VAR_12, &VAR_4);\n\tSETUP_GSTD_TOK(VAR_6, VAR_7, VAR_0, \"gstd_accept\");\n\treturn VAR_6;\n}",
    "func_graph_path": "elric1/knc/f237f3e09ecbaf59c897f5046538a7b1a3fa40c1/gssstdio.c/vul/after/0.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -25,10 +25,13 @@\n \t    &in, GSS_C_NO_CHANNEL_BINDINGS, &client, &mech_oid, &out, NULL,\n \t    NULL, NULL);\n \n+\tgss_release_buffer(&min, &in);\n+\n \tif (out.length && write_packet(fd, &out)) {\n \t\tgss_release_buffer(&min, &out);\n \t\treturn NULL;\n \t}\n+\tgss_release_buffer(&min, &out);\n \n \tGSTD_GSS_ERROR(maj, min, NULL, \"gss_accept_sec_context\");\n ",
    "diff_line_info": {
        "deleted_lines": [],
        "added_lines": [
            "\tgss_release_buffer(&min, &in);",
            "",
            "\tgss_release_buffer(&min, &out);"
        ]
    },
    "is_vul": true,
    "pr_url": null,
    "description": "no more info"
}