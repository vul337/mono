{
    "cve_id": "CVE-2016-5094",
    "cwe_ids": [
        "CWE-190"
    ],
    "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:P/A:P",
    "cvss_is_v3": false,
    "repo_name": "php/php-src",
    "commit_msg": "Fix bug #72135 - don't create strings with lengths outside int range",
    "commit_hash": "0da8b8b801f9276359262f1ef8274c7812d3dfda",
    "git_url": "https://github.com/php/php-src/commit/0da8b8b801f9276359262f1ef8274c7812d3dfda",
    "file_path": "ext/standard/html.c",
    "func_name": "map_from_unicode",
    "func_before": "static inline int map_from_unicode(unsigned code, enum entity_charset charset, unsigned *res)\n{\n\tunsigned char found;\n\tconst uni_to_enc *table;\n\tsize_t table_size;\n\n\tswitch (charset) {\n\tcase cs_8859_1:\n\t\t/* identity mapping of code points to unicode */\n\t\tif (code > 0xFF) {\n\t\t\treturn FAILURE;\n\t\t} \n\t\t*res = code;\n\t\tbreak;\n\n\tcase cs_8859_5:\n\t\tif (code <= 0xA0 || code == 0xAD /* soft hyphen */) {\n\t\t\t*res = code;\n\t\t} else if (code == 0x2116) {\n\t\t\t*res = 0xF0; /* numero sign */\n\t\t} else if (code == 0xA7) {\n\t\t\t*res = 0xFD; /* section sign */\n\t\t} else if (code >= 0x0401 && code <= 0x044F) {\n\t\t\tif (code == 0x040D || code == 0x0450 || code == 0x045D)\n\t\t\t\treturn FAILURE;\n\t\t\t*res = code - 0x360;\n\t\t} else {\n\t\t\treturn FAILURE;\n\t\t}\n\t\tbreak;\n\t\t\n\tcase cs_8859_15:\n\t\tif (code < 0xA4 || (code > 0xBE && code <= 0xFF)) {\n\t\t\t*res = code;\n\t\t} else { /* between A4 and 0xBE */\n\t\t\tfound = unimap_bsearch(unimap_iso885915,\n\t\t\t\tcode, sizeof(unimap_iso885915) / sizeof(*unimap_iso885915));\n\t\t\tif (found)\n\t\t\t\t*res = found;\n\t\t\telse\n\t\t\t\treturn FAILURE;\n\t\t}\n\t\tbreak;\n\n\tcase cs_cp1252:\n\t\tif (code <= 0x7F || (code >= 0xA0 && code <= 0xFF)) {\n\t\t\t*res = code;\n\t\t} else {\n\t\t\tfound = unimap_bsearch(unimap_win1252,\n\t\t\t\tcode, sizeof(unimap_win1252) / sizeof(*unimap_win1252));\n\t\t\tif (found)\n\t\t\t\t*res = found;\n\t\t\telse\n\t\t\t\treturn FAILURE;\n\t\t}\n\t\tbreak;\n\n\tcase cs_macroman:\n\t\tif (code == 0x7F)\n\t\t\treturn FAILURE;\n\t\ttable = unimap_macroman;\n\t\ttable_size = sizeof(unimap_macroman) / sizeof(*unimap_macroman);\n\t\tgoto table_over_7F;\n\tcase cs_cp1251:\n\t\ttable = unimap_win1251;\n\t\ttable_size = sizeof(unimap_win1251) / sizeof(*unimap_win1251);\n\t\tgoto table_over_7F;\n\tcase cs_koi8r:\n\t\ttable = unimap_koi8r;\n\t\ttable_size = sizeof(unimap_koi8r) / sizeof(*unimap_koi8r);\n\t\tgoto table_over_7F;\n\tcase cs_cp866:\n\t\ttable = unimap_cp866;\n\t\ttable_size = sizeof(unimap_cp866) / sizeof(*unimap_cp866);\n\t\t\ntable_over_7F:\n\t\tif (code <= 0x7F) {\n\t\t\t*res = code;\n\t\t} else {\n\t\t\tfound = unimap_bsearch(table, code, table_size);\n\t\t\tif (found)\n\t\t\t\t*res = found;\n\t\t\telse\n\t\t\t\treturn FAILURE;\n\t\t}\n\t\tbreak;\n\n\t/* from here on, only map the possible characters in the ASCII range.\n\t * to improve support here, it's a matter of building the unicode mappings.\n\t * See <http://www.unicode.org/Public/6.0.0/ucd/Unihan.zip> */\n\tcase cs_sjis:\n\tcase cs_eucjp:\n\t\t/* we interpret 0x5C as the Yen symbol. This is not universal.\n\t\t * See <http://www.w3.org/Submission/japanese-xml/#ambiguity_of_yen> */\n\t\tif (code >= 0x20 && code <= 0x7D) {\n\t\t\tif (code == 0x5C)\n\t\t\t\treturn FAILURE;\n\t\t\t*res = code;\n\t\t} else {\n\t\t\treturn FAILURE;\n\t\t}\n\t\tbreak;\n\n\tcase cs_big5:\n\tcase cs_big5hkscs:\n\tcase cs_gb2312:\n\t\tif (code >= 0x20 && code <= 0x7D) {\n\t\t\t*res = code;\n\t\t} else {\n\t\t\treturn FAILURE;\n\t\t}\n\t\tbreak;\n\n\tdefault:\n\t\treturn FAILURE;\n\t}\n\n\treturn SUCCESS;\n}",
    "abstract_func_before": "static inline int map_from_unicode(unsigned VAR_0, enum entity_charset VAR_1, unsigned *VAR_2)\n{\n\tunsigned char VAR_3;\n\tconst uni_to_enc *VAR_4;\n\tsize_t VAR_5;\n\n\tswitch (VAR_1) {\n\tcase VAR_6:\n\t\t/* COMMENT_0 */\n\t\tif (VAR_0 > 0xFF) {\n\t\t\treturn VAR_7;\n\t\t} \n\t\t*VAR_2 = VAR_0;\n\t\tbreak;\n\n\tcase VAR_8:\n\t\tif (VAR_0 <= 0xA0 || VAR_0 == 0xAD /* COMMENT_1 */) {\n\t\t\t*VAR_2 = VAR_0;\n\t\t} else if (VAR_0 == 0x2116) {\n\t\t\t*VAR_2 = 0xF0; /* COMMENT_2 */\n\t\t} else if (VAR_0 == 0xA7) {\n\t\t\t*VAR_2 = 0xFD; /* COMMENT_3 */\n\t\t} else if (VAR_0 >= 0x0401 && VAR_0 <= 0x044F) {\n\t\t\tif (VAR_0 == 0x040D || VAR_0 == 0x0450 || VAR_0 == 0x045D)\n\t\t\t\treturn VAR_7;\n\t\t\t*VAR_2 = VAR_0 - 0x360;\n\t\t} else {\n\t\t\treturn VAR_7;\n\t\t}\n\t\tbreak;\n\t\t\n\tcase VAR_9:\n\t\tif (VAR_0 < 0xA4 || (VAR_0 > 0xBE && VAR_0 <= 0xFF)) {\n\t\t\t*VAR_2 = VAR_0;\n\t\t} else { /* COMMENT_4 */\n\t\t\tVAR_3 = unimap_bsearch(VAR_10,\n\t\t\t\tVAR_0, sizeof(unimap_iso885915) / sizeof(*unimap_iso885915));\n\t\t\tif (VAR_3)\n\t\t\t\t*VAR_2 = VAR_3;\n\t\t\telse\n\t\t\t\treturn VAR_7;\n\t\t}\n\t\tbreak;\n\n\tcase VAR_11:\n\t\tif (VAR_0 <= 0x7F || (VAR_0 >= 0xA0 && VAR_0 <= 0xFF)) {\n\t\t\t*VAR_2 = VAR_0;\n\t\t} else {\n\t\t\tVAR_3 = unimap_bsearch(VAR_12,\n\t\t\t\tVAR_0, sizeof(unimap_win1252) / sizeof(*unimap_win1252));\n\t\t\tif (VAR_3)\n\t\t\t\t*VAR_2 = VAR_3;\n\t\t\telse\n\t\t\t\treturn VAR_7;\n\t\t}\n\t\tbreak;\n\n\tcase VAR_13:\n\t\tif (VAR_0 == 0x7F)\n\t\t\treturn VAR_7;\n\t\tVAR_4 = VAR_14;\n\t\tVAR_5 = sizeof(unimap_macroman) / sizeof(*unimap_macroman);\n\t\tgoto table_over_7F;\n\tcase VAR_15:\n\t\tVAR_4 = VAR_16;\n\t\tVAR_5 = sizeof(unimap_win1251) / sizeof(*unimap_win1251);\n\t\tgoto table_over_7F;\n\tcase VAR_17:\n\t\tVAR_4 = VAR_18;\n\t\tVAR_5 = sizeof(unimap_koi8r) / sizeof(*unimap_koi8r);\n\t\tgoto table_over_7F;\n\tcase VAR_19:\n\t\tVAR_4 = VAR_20;\n\t\tVAR_5 = sizeof(unimap_cp866) / sizeof(*unimap_cp866);\n\t\t\ntable_over_7F:\n\t\tif (VAR_0 <= 0x7F) {\n\t\t\t*VAR_2 = VAR_0;\n\t\t} else {\n\t\t\tVAR_3 = unimap_bsearch(VAR_4, VAR_0, VAR_5);\n\t\t\tif (VAR_3)\n\t\t\t\t*VAR_2 = VAR_3;\n\t\t\telse\n\t\t\t\treturn VAR_7;\n\t\t}\n\t\tbreak;\n\n\t/* COMMENT_5 */\n                                                                            \n                                                               \n\tcase VAR_21:\n\tcase VAR_22:\n\t\t/* COMMENT_8 */\n                                                                         \n\t\tif (VAR_0 >= 0x20 && VAR_0 <= 0x7D) {\n\t\t\tif (VAR_0 == 0x5C)\n\t\t\t\treturn VAR_7;\n\t\t\t*VAR_2 = VAR_0;\n\t\t} else {\n\t\t\treturn VAR_7;\n\t\t}\n\t\tbreak;\n\n\tcase VAR_23:\n\tcase VAR_24:\n\tcase VAR_25:\n\t\tif (VAR_0 >= 0x20 && VAR_0 <= 0x7D) {\n\t\t\t*VAR_2 = VAR_0;\n\t\t} else {\n\t\t\treturn VAR_7;\n\t\t}\n\t\tbreak;\n\n\tdefault:\n\t\treturn VAR_7;\n\t}\n\n\treturn VAR_26;\n}",
    "func_graph_path_before": "php/php-src/0da8b8b801f9276359262f1ef8274c7812d3dfda/html.c/vul/before/6.json",
    "func": "static inline int map_from_unicode(unsigned code, enum entity_charset charset, unsigned *res)\n{\n\tunsigned char found;\n\tconst uni_to_enc *table;\n\tsize_t table_size;\n\n\tswitch (charset) {\n\tcase cs_8859_1:\n\t\t/* identity mapping of code points to unicode */\n\t\tif (code > 0xFF) {\n\t\t\treturn FAILURE;\n\t\t}\n\t\t*res = code;\n\t\tbreak;\n\n\tcase cs_8859_5:\n\t\tif (code <= 0xA0 || code == 0xAD /* soft hyphen */) {\n\t\t\t*res = code;\n\t\t} else if (code == 0x2116) {\n\t\t\t*res = 0xF0; /* numero sign */\n\t\t} else if (code == 0xA7) {\n\t\t\t*res = 0xFD; /* section sign */\n\t\t} else if (code >= 0x0401 && code <= 0x044F) {\n\t\t\tif (code == 0x040D || code == 0x0450 || code == 0x045D)\n\t\t\t\treturn FAILURE;\n\t\t\t*res = code - 0x360;\n\t\t} else {\n\t\t\treturn FAILURE;\n\t\t}\n\t\tbreak;\n\n\tcase cs_8859_15:\n\t\tif (code < 0xA4 || (code > 0xBE && code <= 0xFF)) {\n\t\t\t*res = code;\n\t\t} else { /* between A4 and 0xBE */\n\t\t\tfound = unimap_bsearch(unimap_iso885915,\n\t\t\t\tcode, sizeof(unimap_iso885915) / sizeof(*unimap_iso885915));\n\t\t\tif (found)\n\t\t\t\t*res = found;\n\t\t\telse\n\t\t\t\treturn FAILURE;\n\t\t}\n\t\tbreak;\n\n\tcase cs_cp1252:\n\t\tif (code <= 0x7F || (code >= 0xA0 && code <= 0xFF)) {\n\t\t\t*res = code;\n\t\t} else {\n\t\t\tfound = unimap_bsearch(unimap_win1252,\n\t\t\t\tcode, sizeof(unimap_win1252) / sizeof(*unimap_win1252));\n\t\t\tif (found)\n\t\t\t\t*res = found;\n\t\t\telse\n\t\t\t\treturn FAILURE;\n\t\t}\n\t\tbreak;\n\n\tcase cs_macroman:\n\t\tif (code == 0x7F)\n\t\t\treturn FAILURE;\n\t\ttable = unimap_macroman;\n\t\ttable_size = sizeof(unimap_macroman) / sizeof(*unimap_macroman);\n\t\tgoto table_over_7F;\n\tcase cs_cp1251:\n\t\ttable = unimap_win1251;\n\t\ttable_size = sizeof(unimap_win1251) / sizeof(*unimap_win1251);\n\t\tgoto table_over_7F;\n\tcase cs_koi8r:\n\t\ttable = unimap_koi8r;\n\t\ttable_size = sizeof(unimap_koi8r) / sizeof(*unimap_koi8r);\n\t\tgoto table_over_7F;\n\tcase cs_cp866:\n\t\ttable = unimap_cp866;\n\t\ttable_size = sizeof(unimap_cp866) / sizeof(*unimap_cp866);\n\ntable_over_7F:\n\t\tif (code <= 0x7F) {\n\t\t\t*res = code;\n\t\t} else {\n\t\t\tfound = unimap_bsearch(table, code, table_size);\n\t\t\tif (found)\n\t\t\t\t*res = found;\n\t\t\telse\n\t\t\t\treturn FAILURE;\n\t\t}\n\t\tbreak;\n\n\t/* from here on, only map the possible characters in the ASCII range.\n\t * to improve support here, it's a matter of building the unicode mappings.\n\t * See <http://www.unicode.org/Public/6.0.0/ucd/Unihan.zip> */\n\tcase cs_sjis:\n\tcase cs_eucjp:\n\t\t/* we interpret 0x5C as the Yen symbol. This is not universal.\n\t\t * See <http://www.w3.org/Submission/japanese-xml/#ambiguity_of_yen> */\n\t\tif (code >= 0x20 && code <= 0x7D) {\n\t\t\tif (code == 0x5C)\n\t\t\t\treturn FAILURE;\n\t\t\t*res = code;\n\t\t} else {\n\t\t\treturn FAILURE;\n\t\t}\n\t\tbreak;\n\n\tcase cs_big5:\n\tcase cs_big5hkscs:\n\tcase cs_gb2312:\n\t\tif (code >= 0x20 && code <= 0x7D) {\n\t\t\t*res = code;\n\t\t} else {\n\t\t\treturn FAILURE;\n\t\t}\n\t\tbreak;\n\n\tdefault:\n\t\treturn FAILURE;\n\t}\n\n\treturn SUCCESS;\n}",
    "abstract_func": "static inline int map_from_unicode(unsigned VAR_0, enum entity_charset VAR_1, unsigned *VAR_2)\n{\n\tunsigned char VAR_3;\n\tconst uni_to_enc *VAR_4;\n\tsize_t VAR_5;\n\n\tswitch (VAR_1) {\n\tcase VAR_6:\n\t\t/* COMMENT_0 */\n\t\tif (VAR_0 > 0xFF) {\n\t\t\treturn VAR_7;\n\t\t}\n\t\t*VAR_2 = VAR_0;\n\t\tbreak;\n\n\tcase VAR_8:\n\t\tif (VAR_0 <= 0xA0 || VAR_0 == 0xAD /* COMMENT_1 */) {\n\t\t\t*VAR_2 = VAR_0;\n\t\t} else if (VAR_0 == 0x2116) {\n\t\t\t*VAR_2 = 0xF0; /* COMMENT_2 */\n\t\t} else if (VAR_0 == 0xA7) {\n\t\t\t*VAR_2 = 0xFD; /* COMMENT_3 */\n\t\t} else if (VAR_0 >= 0x0401 && VAR_0 <= 0x044F) {\n\t\t\tif (VAR_0 == 0x040D || VAR_0 == 0x0450 || VAR_0 == 0x045D)\n\t\t\t\treturn VAR_7;\n\t\t\t*VAR_2 = VAR_0 - 0x360;\n\t\t} else {\n\t\t\treturn VAR_7;\n\t\t}\n\t\tbreak;\n\n\tcase VAR_9:\n\t\tif (VAR_0 < 0xA4 || (VAR_0 > 0xBE && VAR_0 <= 0xFF)) {\n\t\t\t*VAR_2 = VAR_0;\n\t\t} else { /* COMMENT_4 */\n\t\t\tVAR_3 = unimap_bsearch(VAR_10,\n\t\t\t\tVAR_0, sizeof(unimap_iso885915) / sizeof(*unimap_iso885915));\n\t\t\tif (VAR_3)\n\t\t\t\t*VAR_2 = VAR_3;\n\t\t\telse\n\t\t\t\treturn VAR_7;\n\t\t}\n\t\tbreak;\n\n\tcase VAR_11:\n\t\tif (VAR_0 <= 0x7F || (VAR_0 >= 0xA0 && VAR_0 <= 0xFF)) {\n\t\t\t*VAR_2 = VAR_0;\n\t\t} else {\n\t\t\tVAR_3 = unimap_bsearch(VAR_12,\n\t\t\t\tVAR_0, sizeof(unimap_win1252) / sizeof(*unimap_win1252));\n\t\t\tif (VAR_3)\n\t\t\t\t*VAR_2 = VAR_3;\n\t\t\telse\n\t\t\t\treturn VAR_7;\n\t\t}\n\t\tbreak;\n\n\tcase VAR_13:\n\t\tif (VAR_0 == 0x7F)\n\t\t\treturn VAR_7;\n\t\tVAR_4 = VAR_14;\n\t\tVAR_5 = sizeof(unimap_macroman) / sizeof(*unimap_macroman);\n\t\tgoto table_over_7F;\n\tcase VAR_15:\n\t\tVAR_4 = VAR_16;\n\t\tVAR_5 = sizeof(unimap_win1251) / sizeof(*unimap_win1251);\n\t\tgoto table_over_7F;\n\tcase VAR_17:\n\t\tVAR_4 = VAR_18;\n\t\tVAR_5 = sizeof(unimap_koi8r) / sizeof(*unimap_koi8r);\n\t\tgoto table_over_7F;\n\tcase VAR_19:\n\t\tVAR_4 = VAR_20;\n\t\tVAR_5 = sizeof(unimap_cp866) / sizeof(*unimap_cp866);\n\ntable_over_7F:\n\t\tif (VAR_0 <= 0x7F) {\n\t\t\t*VAR_2 = VAR_0;\n\t\t} else {\n\t\t\tVAR_3 = unimap_bsearch(VAR_4, VAR_0, VAR_5);\n\t\t\tif (VAR_3)\n\t\t\t\t*VAR_2 = VAR_3;\n\t\t\telse\n\t\t\t\treturn VAR_7;\n\t\t}\n\t\tbreak;\n\n\t/* COMMENT_5 */\n                                                                            \n                                                               \n\tcase VAR_21:\n\tcase VAR_22:\n\t\t/* COMMENT_8 */\n                                                                         \n\t\tif (VAR_0 >= 0x20 && VAR_0 <= 0x7D) {\n\t\t\tif (VAR_0 == 0x5C)\n\t\t\t\treturn VAR_7;\n\t\t\t*VAR_2 = VAR_0;\n\t\t} else {\n\t\t\treturn VAR_7;\n\t\t}\n\t\tbreak;\n\n\tcase VAR_23:\n\tcase VAR_24:\n\tcase VAR_25:\n\t\tif (VAR_0 >= 0x20 && VAR_0 <= 0x7D) {\n\t\t\t*VAR_2 = VAR_0;\n\t\t} else {\n\t\t\treturn VAR_7;\n\t\t}\n\t\tbreak;\n\n\tdefault:\n\t\treturn VAR_7;\n\t}\n\n\treturn VAR_26;\n}",
    "func_graph_path": "php/php-src/0da8b8b801f9276359262f1ef8274c7812d3dfda/html.c/vul/after/6.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -9,7 +9,7 @@\n \t\t/* identity mapping of code points to unicode */\n \t\tif (code > 0xFF) {\n \t\t\treturn FAILURE;\n-\t\t} \n+\t\t}\n \t\t*res = code;\n \t\tbreak;\n \n@@ -28,7 +28,7 @@\n \t\t\treturn FAILURE;\n \t\t}\n \t\tbreak;\n-\t\t\n+\n \tcase cs_8859_15:\n \t\tif (code < 0xA4 || (code > 0xBE && code <= 0xFF)) {\n \t\t\t*res = code;\n@@ -72,7 +72,7 @@\n \tcase cs_cp866:\n \t\ttable = unimap_cp866;\n \t\ttable_size = sizeof(unimap_cp866) / sizeof(*unimap_cp866);\n-\t\t\n+\n table_over_7F:\n \t\tif (code <= 0x7F) {\n \t\t\t*res = code;",
    "diff_line_info": {
        "deleted_lines": [
            "\t\t} ",
            "\t\t",
            "\t\t"
        ],
        "added_lines": [
            "\t\t}",
            "",
            ""
        ]
    },
    "is_vul": true,
    "pr_url": null,
    "description": "no more info"
}