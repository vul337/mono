{
    "cve_id": "CVE-2018-17282",
    "cwe_ids": [
        "CWE-476"
    ],
    "cvss_vector": "AV:N/AC:M/Au:N/C:N/I:N/A:P",
    "cvss_is_v3": false,
    "repo_name": "Exiv2/exiv2",
    "commit_msg": "Fix #457",
    "commit_hash": "670fb73dd5ee8acab90971c4878de29f9fc43a02",
    "git_url": "https://github.com/Exiv2/exiv2/commit/670fb73dd5ee8acab90971c4878de29f9fc43a02",
    "file_path": "src/tiffimage.cpp",
    "func_name": "TiffImage::readMetadata",
    "func_before": "void TiffImage::readMetadata()\n    {\n#ifdef DEBUG\n        std::cerr << \"Reading TIFF file \" << io_->path() << \"\\n\";\n#endif\n        if (io_->open() != 0) throw Error(kerDataSourceOpenFailed, io_->path(), strError());\n        IoCloser closer(*io_);\n        // Ensure that this is the correct image type\n        if (!isTiffType(*io_, false)) {\n            if (io_->error() || io_->eof()) throw Error(kerFailedToReadImageData);\n            throw Error(kerNotAnImage, \"TIFF\");\n        }\n        clearMetadata();\n\n        ByteOrder bo = TiffParser::decode(exifData_,\n                                          iptcData_,\n                                          xmpData_,\n                                          io_->mmap(),\n                                          (uint32_t) io_->size());\n        setByteOrder(bo);\n\n        // read profile from the metadata\n        Exiv2::ExifKey            key(\"Exif.Image.InterColorProfile\");\n        Exiv2::ExifData::iterator pos   = exifData_.findKey(key);\n        if ( pos != exifData_.end()  ) {\n            iccProfile_.alloc(pos->count()*pos->typeSize());\n            pos->copy(iccProfile_.pData_,bo);\n        }\n\n    }",
    "abstract_func_before": "void TiffImage::readMetadata()\n    {\n#ifdef VAR_0\n        std::cerr << \"Reading TIFF file \" << VAR_1->path() << \"\\n\";\n#endif\n        if (VAR_1->open() != 0) throw Error(VAR_2, VAR_1->path(), strError());\n        IoCloser VAR_3(*VAR_1);\n        /* COMMENT_0 */\n        if (!isTiffType(*VAR_1, false)) {\n            if (VAR_1->error() || VAR_1->eof()) throw Error(VAR_4);\n            throw Error(VAR_5, \"TIFF\");\n        }\n        clearMetadata();\n\n        ByteOrder VAR_6 = TiffParser::decode(VAR_7,\n                                          VAR_8,\n                                          VAR_9,\n                                          VAR_1->mmap(),\n                                          (uint32_t) VAR_1->size());\n        setByteOrder(VAR_6);\n\n        /* COMMENT_1 */\n        Exiv2::ExifKey            VAR_10(\"Exif.Image.InterColorProfile\");\n        Exiv2::ExifData::iterator VAR_11   = VAR_7.findKey(VAR_10);\n        if ( VAR_11 != VAR_7.end()  ) {\n            VAR_12.alloc(VAR_11->count()*VAR_11->typeSize());\n            VAR_11->copy(VAR_12.pData_,VAR_6);\n        }\n\n    }",
    "func_graph_path_before": "Exiv2/exiv2/670fb73dd5ee8acab90971c4878de29f9fc43a02/tiffimage.cpp/vul/before/0.json",
    "func": "void TiffImage::readMetadata()\n    {\n#ifdef DEBUG\n        std::cerr << \"Reading TIFF file \" << io_->path() << \"\\n\";\n#endif\n        if (io_->open() != 0) {\n            throw Error(kerDataSourceOpenFailed, io_->path(), strError());\n        }\n\n        IoCloser closer(*io_);\n        // Ensure that this is the correct image type\n        if (!isTiffType(*io_, false)) {\n            if (io_->error() || io_->eof())\n                throw Error(kerFailedToReadImageData);\n            throw Error(kerNotAnImage, \"TIFF\");\n        }\n        clearMetadata();\n\n        ByteOrder bo = TiffParser::decode(exifData_,\n                                          iptcData_,\n                                          xmpData_,\n                                          io_->mmap(),\n                                          (uint32_t) io_->size());\n        setByteOrder(bo);\n\n        // read profile from the metadata\n        Exiv2::ExifKey            key(\"Exif.Image.InterColorProfile\");\n        Exiv2::ExifData::iterator pos   = exifData_.findKey(key);\n        if ( pos != exifData_.end() ) {\n            long size = pos->count() * pos->typeSize();\n            if (size == 0) {\n                throw Error(kerFailedToReadImageData);\n            }\n            iccProfile_.alloc(size);\n            pos->copy(iccProfile_.pData_,bo);\n        }\n\n    }",
    "abstract_func": "void TiffImage::readMetadata()\n    {\n#ifdef VAR_0\n        std::cerr << \"Reading TIFF file \" << VAR_1->path() << \"\\n\";\n#endif\n        if (VAR_1->open() != 0) {\n            throw Error(VAR_2, VAR_1->path(), strError());\n        }\n\n        IoCloser VAR_3(*VAR_1);\n        /* COMMENT_0 */\n        if (!isTiffType(*VAR_1, false)) {\n            if (VAR_1->error() || VAR_1->eof())\n                throw Error(VAR_4);\n            throw Error(VAR_5, \"TIFF\");\n        }\n        clearMetadata();\n\n        ByteOrder VAR_6 = TiffParser::decode(VAR_7,\n                                          VAR_8,\n                                          VAR_9,\n                                          VAR_1->mmap(),\n                                          (uint32_t) VAR_1->size());\n        setByteOrder(VAR_6);\n\n        /* COMMENT_1 */\n        Exiv2::ExifKey            VAR_10(\"Exif.Image.InterColorProfile\");\n        Exiv2::ExifData::iterator VAR_11   = VAR_7.findKey(VAR_10);\n        if ( VAR_11 != VAR_7.end() ) {\n            long VAR_12 = VAR_11->count() * VAR_11->typeSize();\n            if (VAR_12 == 0) {\n                throw Error(VAR_4);\n            }\n            VAR_13.alloc(VAR_12);\n            VAR_11->copy(VAR_13.pData_,VAR_6);\n        }\n\n    }",
    "func_graph_path": "Exiv2/exiv2/670fb73dd5ee8acab90971c4878de29f9fc43a02/tiffimage.cpp/vul/after/0.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -3,11 +3,15 @@\n #ifdef DEBUG\n         std::cerr << \"Reading TIFF file \" << io_->path() << \"\\n\";\n #endif\n-        if (io_->open() != 0) throw Error(kerDataSourceOpenFailed, io_->path(), strError());\n+        if (io_->open() != 0) {\n+            throw Error(kerDataSourceOpenFailed, io_->path(), strError());\n+        }\n+\n         IoCloser closer(*io_);\n         // Ensure that this is the correct image type\n         if (!isTiffType(*io_, false)) {\n-            if (io_->error() || io_->eof()) throw Error(kerFailedToReadImageData);\n+            if (io_->error() || io_->eof())\n+                throw Error(kerFailedToReadImageData);\n             throw Error(kerNotAnImage, \"TIFF\");\n         }\n         clearMetadata();\n@@ -22,8 +26,12 @@\n         // read profile from the metadata\n         Exiv2::ExifKey            key(\"Exif.Image.InterColorProfile\");\n         Exiv2::ExifData::iterator pos   = exifData_.findKey(key);\n-        if ( pos != exifData_.end()  ) {\n-            iccProfile_.alloc(pos->count()*pos->typeSize());\n+        if ( pos != exifData_.end() ) {\n+            long size = pos->count() * pos->typeSize();\n+            if (size == 0) {\n+                throw Error(kerFailedToReadImageData);\n+            }\n+            iccProfile_.alloc(size);\n             pos->copy(iccProfile_.pData_,bo);\n         }\n ",
    "diff_line_info": {
        "deleted_lines": [
            "        if (io_->open() != 0) throw Error(kerDataSourceOpenFailed, io_->path(), strError());",
            "            if (io_->error() || io_->eof()) throw Error(kerFailedToReadImageData);",
            "        if ( pos != exifData_.end()  ) {",
            "            iccProfile_.alloc(pos->count()*pos->typeSize());"
        ],
        "added_lines": [
            "        if (io_->open() != 0) {",
            "            throw Error(kerDataSourceOpenFailed, io_->path(), strError());",
            "        }",
            "",
            "            if (io_->error() || io_->eof())",
            "                throw Error(kerFailedToReadImageData);",
            "        if ( pos != exifData_.end() ) {",
            "            long size = pos->count() * pos->typeSize();",
            "            if (size == 0) {",
            "                throw Error(kerFailedToReadImageData);",
            "            }",
            "            iccProfile_.alloc(size);"
        ]
    },
    "is_vul": true,
    "pr_url": "https://github.com/Exiv2/exiv2/pull/480",
    "description": "- Add reproducer for #457 \r\n- Fix the issue by making sure that the size of ExitData is != 0.\r\n- Split some 1-liners to make the code more readable."
}