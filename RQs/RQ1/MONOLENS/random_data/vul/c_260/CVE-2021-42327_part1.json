{
    "cve_id": "CVE-2021-42327",
    "cwe_ids": [
        "CWE-787"
    ],
    "cvss_vector": "AV:L/AC:L/Au:N/C:P/I:P/A:P",
    "cvss_is_v3": false,
    "repo_name": "torvalds/linux",
    "commit_msg": "Size can be any value and is user controlled resulting in overwriting the\n40 byte array wr_buf with an arbitrary length of data from buf.\n\nSigned-off-by: Thelford Williams <tdwilliamsiv@gmail.com>\nSigned-off-by: Alex Deucher <alexander.deucher@amd.com>\n",
    "commit_hash": "f23750b5b3d98653b31d4469592935ef6364ad67",
    "git_url": "https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?h=f23750b5b3d98653b31d4469592935ef6364ad67",
    "file_path": "drivers/gpu/drm/amd/display/amdgpu_dm/amdgpu_dm_debugfs.c",
    "func_name": "dp_link_settings_write",
    "func_before": "static ssize_t dp_link_settings_write(struct file *f, const char __user *buf,\n\t\t\t\t size_t size, loff_t *pos)\n{\n\tstruct amdgpu_dm_connector *connector = file_inode(f)->i_private;\n\tstruct dc_link *link = connector->dc_link;\n\tstruct dc *dc = (struct dc *)link->dc;\n\tstruct dc_link_settings prefer_link_settings;\n\tchar *wr_buf = NULL;\n\tconst uint32_t wr_buf_size = 40;\n\t/* 0: lane_count; 1: link_rate */\n\tint max_param_num = 2;\n\tuint8_t param_nums = 0;\n\tlong param[2];\n\tbool valid_input = true;\n\n\tif (size == 0)\n\t\treturn -EINVAL;\n\n\twr_buf = kcalloc(wr_buf_size, sizeof(char), GFP_KERNEL);\n\tif (!wr_buf)\n\t\treturn -ENOSPC;\n\n\tif (parse_write_buffer_into_params(wr_buf, size,\n\t\t\t\t\t   (long *)param, buf,\n\t\t\t\t\t   max_param_num,\n\t\t\t\t\t   &param_nums)) {\n\t\tkfree(wr_buf);\n\t\treturn -EINVAL;\n\t}\n\n\tif (param_nums <= 0) {\n\t\tkfree(wr_buf);\n\t\tDRM_DEBUG_DRIVER(\"user data not be read\\n\");\n\t\treturn -EINVAL;\n\t}\n\n\tswitch (param[0]) {\n\tcase LANE_COUNT_ONE:\n\tcase LANE_COUNT_TWO:\n\tcase LANE_COUNT_FOUR:\n\t\tbreak;\n\tdefault:\n\t\tvalid_input = false;\n\t\tbreak;\n\t}\n\n\tswitch (param[1]) {\n\tcase LINK_RATE_LOW:\n\tcase LINK_RATE_HIGH:\n\tcase LINK_RATE_RBR2:\n\tcase LINK_RATE_HIGH2:\n\tcase LINK_RATE_HIGH3:\n\t\tbreak;\n\tdefault:\n\t\tvalid_input = false;\n\t\tbreak;\n\t}\n\n\tif (!valid_input) {\n\t\tkfree(wr_buf);\n\t\tDRM_DEBUG_DRIVER(\"Invalid Input value No HW will be programmed\\n\");\n\t\treturn size;\n\t}\n\n\t/* save user force lane_count, link_rate to preferred settings\n\t * spread spectrum will not be changed\n\t */\n\tprefer_link_settings.link_spread = link->cur_link_settings.link_spread;\n\tprefer_link_settings.use_link_rate_set = false;\n\tprefer_link_settings.lane_count = param[0];\n\tprefer_link_settings.link_rate = param[1];\n\n\tdc_link_set_preferred_training_settings(dc, &prefer_link_settings, NULL, link, true);\n\n\tkfree(wr_buf);\n\treturn size;\n}",
    "abstract_func_before": "static ssize_t dp_link_settings_write(struct file *VAR_0, const char __user *VAR_1,\n\t\t\t\t size_t VAR_2, loff_t *VAR_3)\n{\n\tstruct amdgpu_dm_connector *VAR_4 = file_inode(VAR_0)->i_private;\n\tstruct dc_link *VAR_5 = VAR_4->dc_link;\n\tstruct dc *dc = (struct dc *)VAR_5->dc;\n\tstruct dc_link_settings VAR_6;\n\tchar *VAR_7 = NULL;\n\tconst uint32_t VAR_8 = 40;\n\t/* COMMENT_0 */\n\tint VAR_9 = 2;\n\tuint8_t VAR_10 = 0;\n\tlong VAR_11[2];\n\tbool VAR_12 = true;\n\n\tif (VAR_2 == 0)\n\t\treturn -VAR_13;\n\n\tVAR_7 = kcalloc(VAR_8, sizeof(char), VAR_14);\n\tif (!VAR_7)\n\t\treturn -VAR_15;\n\n\tif (parse_write_buffer_into_params(VAR_7, VAR_2,\n\t\t\t\t\t   (long *)VAR_11, VAR_1,\n\t\t\t\t\t   VAR_9,\n\t\t\t\t\t   &VAR_10)) {\n\t\tkfree(VAR_7);\n\t\treturn -VAR_13;\n\t}\n\n\tif (VAR_10 <= 0) {\n\t\tkfree(VAR_7);\n\t\tDRM_DEBUG_DRIVER(\"user data not be read\\n\");\n\t\treturn -VAR_13;\n\t}\n\n\tswitch (VAR_11[0]) {\n\tcase VAR_16:\n\tcase VAR_17:\n\tcase VAR_18:\n\t\tbreak;\n\tdefault:\n\t\tVAR_12 = false;\n\t\tbreak;\n\t}\n\n\tswitch (VAR_11[1]) {\n\tcase VAR_19:\n\tcase VAR_20:\n\tcase VAR_21:\n\tcase VAR_22:\n\tcase VAR_23:\n\t\tbreak;\n\tdefault:\n\t\tVAR_12 = false;\n\t\tbreak;\n\t}\n\n\tif (!VAR_12) {\n\t\tkfree(VAR_7);\n\t\tDRM_DEBUG_DRIVER(\"Invalid Input value No HW will be programmed\\n\");\n\t\treturn VAR_2;\n\t}\n\n\t/* COMMENT_1 */\n                                       \n    \n\tVAR_6.link_spread = VAR_5->cur_link_settings.link_spread;\n\tVAR_6.use_link_rate_set = false;\n\tVAR_6.lane_count = VAR_11[0];\n\tVAR_6.link_rate = VAR_11[1];\n\n\tdc_link_set_preferred_training_settings(dc, &VAR_6, NULL, VAR_5, true);\n\n\tkfree(VAR_7);\n\treturn VAR_2;\n}",
    "func_graph_path_before": null,
    "func": "static ssize_t dp_link_settings_write(struct file *f, const char __user *buf,\n\t\t\t\t size_t size, loff_t *pos)\n{\n\tstruct amdgpu_dm_connector *connector = file_inode(f)->i_private;\n\tstruct dc_link *link = connector->dc_link;\n\tstruct dc *dc = (struct dc *)link->dc;\n\tstruct dc_link_settings prefer_link_settings;\n\tchar *wr_buf = NULL;\n\tconst uint32_t wr_buf_size = 40;\n\t/* 0: lane_count; 1: link_rate */\n\tint max_param_num = 2;\n\tuint8_t param_nums = 0;\n\tlong param[2];\n\tbool valid_input = true;\n\n\tif (size == 0)\n\t\treturn -EINVAL;\n\n\twr_buf = kcalloc(wr_buf_size, sizeof(char), GFP_KERNEL);\n\tif (!wr_buf)\n\t\treturn -ENOSPC;\n\n\tif (parse_write_buffer_into_params(wr_buf, wr_buf_size,\n\t\t\t\t\t   (long *)param, buf,\n\t\t\t\t\t   max_param_num,\n\t\t\t\t\t   &param_nums)) {\n\t\tkfree(wr_buf);\n\t\treturn -EINVAL;\n\t}\n\n\tif (param_nums <= 0) {\n\t\tkfree(wr_buf);\n\t\tDRM_DEBUG_DRIVER(\"user data not be read\\n\");\n\t\treturn -EINVAL;\n\t}\n\n\tswitch (param[0]) {\n\tcase LANE_COUNT_ONE:\n\tcase LANE_COUNT_TWO:\n\tcase LANE_COUNT_FOUR:\n\t\tbreak;\n\tdefault:\n\t\tvalid_input = false;\n\t\tbreak;\n\t}\n\n\tswitch (param[1]) {\n\tcase LINK_RATE_LOW:\n\tcase LINK_RATE_HIGH:\n\tcase LINK_RATE_RBR2:\n\tcase LINK_RATE_HIGH2:\n\tcase LINK_RATE_HIGH3:\n\t\tbreak;\n\tdefault:\n\t\tvalid_input = false;\n\t\tbreak;\n\t}\n\n\tif (!valid_input) {\n\t\tkfree(wr_buf);\n\t\tDRM_DEBUG_DRIVER(\"Invalid Input value No HW will be programmed\\n\");\n\t\treturn size;\n\t}\n\n\t/* save user force lane_count, link_rate to preferred settings\n\t * spread spectrum will not be changed\n\t */\n\tprefer_link_settings.link_spread = link->cur_link_settings.link_spread;\n\tprefer_link_settings.use_link_rate_set = false;\n\tprefer_link_settings.lane_count = param[0];\n\tprefer_link_settings.link_rate = param[1];\n\n\tdc_link_set_preferred_training_settings(dc, &prefer_link_settings, NULL, link, true);\n\n\tkfree(wr_buf);\n\treturn size;\n}",
    "abstract_func": "static ssize_t dp_link_settings_write(struct file *VAR_0, const char __user *VAR_1,\n\t\t\t\t size_t VAR_2, loff_t *VAR_3)\n{\n\tstruct amdgpu_dm_connector *VAR_4 = file_inode(VAR_0)->i_private;\n\tstruct dc_link *VAR_5 = VAR_4->dc_link;\n\tstruct dc *dc = (struct dc *)VAR_5->dc;\n\tstruct dc_link_settings VAR_6;\n\tchar *VAR_7 = NULL;\n\tconst uint32_t VAR_8 = 40;\n\t/* COMMENT_0 */\n\tint VAR_9 = 2;\n\tuint8_t VAR_10 = 0;\n\tlong VAR_11[2];\n\tbool VAR_12 = true;\n\n\tif (VAR_2 == 0)\n\t\treturn -VAR_13;\n\n\tVAR_7 = kcalloc(VAR_8, sizeof(char), VAR_14);\n\tif (!VAR_7)\n\t\treturn -VAR_15;\n\n\tif (parse_write_buffer_into_params(VAR_7, VAR_8,\n\t\t\t\t\t   (long *)VAR_11, VAR_1,\n\t\t\t\t\t   VAR_9,\n\t\t\t\t\t   &VAR_10)) {\n\t\tkfree(VAR_7);\n\t\treturn -VAR_13;\n\t}\n\n\tif (VAR_10 <= 0) {\n\t\tkfree(VAR_7);\n\t\tDRM_DEBUG_DRIVER(\"user data not be read\\n\");\n\t\treturn -VAR_13;\n\t}\n\n\tswitch (VAR_11[0]) {\n\tcase VAR_16:\n\tcase VAR_17:\n\tcase VAR_18:\n\t\tbreak;\n\tdefault:\n\t\tVAR_12 = false;\n\t\tbreak;\n\t}\n\n\tswitch (VAR_11[1]) {\n\tcase VAR_19:\n\tcase VAR_20:\n\tcase VAR_21:\n\tcase VAR_22:\n\tcase VAR_23:\n\t\tbreak;\n\tdefault:\n\t\tVAR_12 = false;\n\t\tbreak;\n\t}\n\n\tif (!VAR_12) {\n\t\tkfree(VAR_7);\n\t\tDRM_DEBUG_DRIVER(\"Invalid Input value No HW will be programmed\\n\");\n\t\treturn VAR_2;\n\t}\n\n\t/* COMMENT_1 */\n                                       \n    \n\tVAR_6.link_spread = VAR_5->cur_link_settings.link_spread;\n\tVAR_6.use_link_rate_set = false;\n\tVAR_6.lane_count = VAR_11[0];\n\tVAR_6.link_rate = VAR_11[1];\n\n\tdc_link_set_preferred_training_settings(dc, &VAR_6, NULL, VAR_5, true);\n\n\tkfree(VAR_7);\n\treturn VAR_2;\n}",
    "func_graph_path": null,
    "diff_func": "--- func_before\n+++ func_after\n@@ -20,7 +20,7 @@\n \tif (!wr_buf)\n \t\treturn -ENOSPC;\n \n-\tif (parse_write_buffer_into_params(wr_buf, size,\n+\tif (parse_write_buffer_into_params(wr_buf, wr_buf_size,\n \t\t\t\t\t   (long *)param, buf,\n \t\t\t\t\t   max_param_num,\n \t\t\t\t\t   &param_nums)) {",
    "diff_line_info": {
        "deleted_lines": [
            "\tif (parse_write_buffer_into_params(wr_buf, size,"
        ],
        "added_lines": [
            "\tif (parse_write_buffer_into_params(wr_buf, wr_buf_size,"
        ]
    },
    "is_vul": true,
    "pr_url": null,
    "description": "no more info"
}