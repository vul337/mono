{
    "cve_id": "CVE-2009-1185",
    "cwe_ids": [
        "CWE-346"
    ],
    "cvss_vector": "AV:L/AC:L/Au:N/C:C/I:C/A:C",
    "cvss_is_v3": false,
    "repo_name": "hotplug/udev",
    "commit_msg": "",
    "commit_hash": "e2b362d9f23d4c63018709ab5f81a02f72b91e75",
    "git_url": "http://git.kernel.org/?p=linux/hotplug/udev.git;a=commitdiff;h=e2b362d9f23d4c63018709ab5f81a02f72b91e75",
    "file_path": "udev/lib/libudev-monitor.c",
    "func_name": "udev_monitor_receive_device",
    "func_before": "struct udev_device *udev_monitor_receive_device(struct udev_monitor *udev_monitor)\n{\n\tstruct udev_device *udev_device;\n\tstruct msghdr smsg;\n\tstruct iovec iov;\n\tchar cred_msg[CMSG_SPACE(sizeof(struct ucred))];\n\tchar buf[4096];\n\tsize_t bufpos;\n\tint devpath_set = 0;\n\tint subsystem_set = 0;\n\tint action_set = 0;\n\tint maj = 0;\n\tint min = 0;\n\n\tif (udev_monitor == NULL)\n\t\treturn NULL;\n\tmemset(buf, 0x00, sizeof(buf));\n\tiov.iov_base = &buf;\n\tiov.iov_len = sizeof(buf);\n\tmemset (&smsg, 0x00, sizeof(struct msghdr));\n\tsmsg.msg_iov = &iov;\n\tsmsg.msg_iovlen = 1;\n\tsmsg.msg_control = cred_msg;\n\tsmsg.msg_controllen = sizeof(cred_msg);\n\n\tif (recvmsg(udev_monitor->sock, &smsg, 0) < 0) {\n\t\tif (errno != EINTR)\n\t\t\tinfo(udev_monitor->udev, \"unable to receive message\");\n\t\treturn NULL;\n\t}\n\n\tif (udev_monitor->sun.sun_family != 0) {\n\t\tstruct cmsghdr *cmsg = CMSG_FIRSTHDR(&smsg);\n\t\tstruct ucred *cred = (struct ucred *)CMSG_DATA (cmsg);\n\n\t\tif (cmsg == NULL || cmsg->cmsg_type != SCM_CREDENTIALS) {\n\t\t\tinfo(udev_monitor->udev, \"no sender credentials received, message ignored\");\n\t\t\treturn NULL;\n\t\t}\n\n\t\tif (cred->uid != 0) {\n\t\t\tinfo(udev_monitor->udev, \"sender uid=%d, message ignored\", cred->uid);\n\t\t\treturn NULL;\n\t\t}\n\t}\n\n\t/* skip header */\n\tbufpos = strlen(buf) + 1;\n\tif (bufpos < sizeof(\"a@/d\") || bufpos >= sizeof(buf)) {\n\t\tinfo(udev_monitor->udev, \"invalid message length\");\n\t\treturn NULL;\n\t}\n\n\t/* check message header */\n\tif (strstr(buf, \"@/\") == NULL) {\n\t\tinfo(udev_monitor->udev, \"unrecognized message header\");\n\t\treturn NULL;\n\t}\n\n\tudev_device = device_new(udev_monitor->udev);\n\tif (udev_device == NULL) {\n\t\treturn NULL;\n\t}\n\n\twhile (bufpos < sizeof(buf)) {\n\t\tchar *key;\n\t\tsize_t keylen;\n\n\t\tkey = &buf[bufpos];\n\t\tkeylen = strlen(key);\n\t\tif (keylen == 0)\n\t\t\tbreak;\n\t\tbufpos += keylen + 1;\n\n\t\tif (strncmp(key, \"DEVPATH=\", 8) == 0) {\n\t\t\tchar path[UTIL_PATH_SIZE];\n\n\t\t\tutil_strlcpy(path, udev_get_sys_path(udev_monitor->udev), sizeof(path));\n\t\t\tutil_strlcat(path, &key[8], sizeof(path));\n\t\t\tudev_device_set_syspath(udev_device, path);\n\t\t\tdevpath_set = 1;\n\t\t} else if (strncmp(key, \"SUBSYSTEM=\", 10) == 0) {\n\t\t\tudev_device_set_subsystem(udev_device, &key[10]);\n\t\t\tsubsystem_set = 1;\n\t\t} else if (strncmp(key, \"DEVTYPE=\", 8) == 0) {\n\t\t\tudev_device_set_devtype(udev_device, &key[8]);\n\t\t} else if (strncmp(key, \"DEVNAME=\", 8) == 0) {\n\t\t\tudev_device_set_devnode(udev_device, &key[8]);\n\t\t} else if (strncmp(key, \"DEVLINKS=\", 9) == 0) {\n\t\t\tchar devlinks[UTIL_PATH_SIZE];\n\t\t\tchar *slink;\n\t\t\tchar *next;\n\n\t\t\tutil_strlcpy(devlinks, &key[9], sizeof(devlinks));\n\t\t\tslink = devlinks;\n\t\t\tnext = strchr(slink, ' ');\n\t\t\twhile (next != NULL) {\n\t\t\t\tnext[0] = '\\0';\n\t\t\t\tudev_device_add_devlink(udev_device, slink);\n\t\t\t\tslink = &next[1];\n\t\t\t\tnext = strchr(slink, ' ');\n\t\t\t}\n\t\t\tif (slink[0] != '\\0')\n\t\t\t\tudev_device_add_devlink(udev_device, slink);\n\t\t} else if (strncmp(key, \"DRIVER=\", 7) == 0) {\n\t\t\tudev_device_set_driver(udev_device, &key[7]);\n\t\t} else if (strncmp(key, \"ACTION=\", 7) == 0) {\n\t\t\tudev_device_set_action(udev_device, &key[7]);\n\t\t\taction_set = 1;\n\t\t} else if (strncmp(key, \"MAJOR=\", 6) == 0) {\n\t\t\tmaj = strtoull(&key[6], NULL, 10);\n\t\t} else if (strncmp(key, \"MINOR=\", 6) == 0) {\n\t\t\tmin = strtoull(&key[6], NULL, 10);\n\t\t} else if (strncmp(key, \"DEVPATH_OLD=\", 12) == 0) {\n\t\t\tudev_device_set_devpath_old(udev_device, &key[12]);\n\t\t} else if (strncmp(key, \"PHYSDEVPATH=\", 12) == 0) {\n\t\t\tudev_device_set_physdevpath(udev_device, &key[12]);\n\t\t} else if (strncmp(key, \"SEQNUM=\", 7) == 0) {\n\t\t\tudev_device_set_seqnum(udev_device, strtoull(&key[7], NULL, 10));\n\t\t} else if (strncmp(key, \"TIMEOUT=\", 8) == 0) {\n\t\t\tudev_device_set_timeout(udev_device, strtoull(&key[8], NULL, 10));\n\t\t} else if (strncmp(key, \"PHYSDEV\", 7) == 0) {\n\t\t\t/* skip deprecated values */\n\t\t\tcontinue;\n\t\t} else {\n\t\t\tudev_device_add_property_from_string(udev_device, key);\n\t\t}\n\t}\n\tif (!devpath_set || !subsystem_set || !action_set) {\n\t\tinfo(udev_monitor->udev, \"missing values, skip\\n\");\n\t\tudev_device_unref(udev_device);\n\t\treturn NULL;\n\t}\n\tif (maj > 0)\n\t\tudev_device_set_devnum(udev_device, makedev(maj, min));\n\tudev_device_set_info_loaded(udev_device);\n\treturn udev_device;\n}",
    "abstract_func_before": "struct udev_device *udev_monitor_receive_device(struct udev_monitor *udev_monitor)\n{\n\tstruct udev_device *udev_device;\n\tstruct msghdr VAR_0;\n\tstruct iovec VAR_1;\n\tchar VAR_2[CMSG_SPACE(sizeof(struct ucred))];\n\tchar VAR_3[4096];\n\tsize_t VAR_4;\n\tint VAR_5 = 0;\n\tint VAR_6 = 0;\n\tint VAR_7 = 0;\n\tint VAR_8 = 0;\n\tint VAR_9 = 0;\n\n\tif (udev_monitor == NULL)\n\t\treturn NULL;\n\tmemset(VAR_3, 0x00, sizeof(VAR_3));\n\tVAR_1.iov_base = &VAR_3;\n\tVAR_1.iov_len = sizeof(VAR_3);\n\tmemset (&VAR_0, 0x00, sizeof(struct msghdr));\n\tVAR_0.msg_iov = &VAR_1;\n\tVAR_0.msg_iovlen = 1;\n\tVAR_0.msg_control = VAR_2;\n\tVAR_0.msg_controllen = sizeof(VAR_2);\n\n\tif (recvmsg(udev_monitor->sock, &VAR_0, 0) < 0) {\n\t\tif (VAR_10 != VAR_11)\n\t\t\tinfo(udev_monitor->udev, \"unable to receive message\");\n\t\treturn NULL;\n\t}\n\n\tif (udev_monitor->sun.sun_family != 0) {\n\t\tstruct cmsghdr *VAR_12 = CMSG_FIRSTHDR(&VAR_0);\n\t\tstruct ucred *VAR_13 = (struct ucred *)CMSG_DATA (VAR_12);\n\n\t\tif (VAR_12 == NULL || VAR_12->cmsg_type != VAR_14) {\n\t\t\tinfo(udev_monitor->udev, \"no sender credentials received, message ignored\");\n\t\t\treturn NULL;\n\t\t}\n\n\t\tif (VAR_13->uid != 0) {\n\t\t\tinfo(udev_monitor->udev, \"sender uid=%d, message ignored\", VAR_13->uid);\n\t\t\treturn NULL;\n\t\t}\n\t}\n\n\t/* COMMENT_0 */\n\tVAR_4 = strlen(VAR_3) + 1;\n\tif (VAR_4 < sizeof(\"a@/d\") || VAR_4 >= sizeof(VAR_3)) {\n\t\tinfo(udev_monitor->udev, \"invalid message length\");\n\t\treturn NULL;\n\t}\n\n\t/* COMMENT_1 */\n\tif (strstr(VAR_3, \"@/\") == NULL) {\n\t\tinfo(udev_monitor->udev, \"unrecognized message header\");\n\t\treturn NULL;\n\t}\n\n\tudev_device = device_new(udev_monitor->udev);\n\tif (udev_device == NULL) {\n\t\treturn NULL;\n\t}\n\n\twhile (VAR_4 < sizeof(VAR_3)) {\n\t\tchar *VAR_15;\n\t\tsize_t VAR_16;\n\n\t\tVAR_15 = &VAR_3[VAR_4];\n\t\tVAR_16 = strlen(VAR_15);\n\t\tif (VAR_16 == 0)\n\t\t\tbreak;\n\t\tVAR_4 += VAR_16 + 1;\n\n\t\tif (strncmp(VAR_15, \"DEVPATH=\", 8) == 0) {\n\t\t\tchar VAR_17[VAR_18];\n\n\t\t\tutil_strlcpy(VAR_17, udev_get_sys_path(udev_monitor->udev), sizeof(VAR_17));\n\t\t\tutil_strlcat(VAR_17, &VAR_15[8], sizeof(VAR_17));\n\t\t\tudev_device_set_syspath(udev_device, VAR_17);\n\t\t\tVAR_5 = 1;\n\t\t} else if (strncmp(VAR_15, \"SUBSYSTEM=\", 10) == 0) {\n\t\t\tudev_device_set_subsystem(udev_device, &VAR_15[10]);\n\t\t\tVAR_6 = 1;\n\t\t} else if (strncmp(VAR_15, \"DEVTYPE=\", 8) == 0) {\n\t\t\tudev_device_set_devtype(udev_device, &VAR_15[8]);\n\t\t} else if (strncmp(VAR_15, \"DEVNAME=\", 8) == 0) {\n\t\t\tudev_device_set_devnode(udev_device, &VAR_15[8]);\n\t\t} else if (strncmp(VAR_15, \"DEVLINKS=\", 9) == 0) {\n\t\t\tchar VAR_19[VAR_18];\n\t\t\tchar *VAR_20;\n\t\t\tchar *VAR_21;\n\n\t\t\tutil_strlcpy(VAR_19, &VAR_15[9], sizeof(VAR_19));\n\t\t\tVAR_20 = VAR_19;\n\t\t\tVAR_21 = strchr(VAR_20, ' ');\n\t\t\twhile (VAR_21 != NULL) {\n\t\t\t\tVAR_21[0] = '\\0';\n\t\t\t\tudev_device_add_devlink(udev_device, VAR_20);\n\t\t\t\tVAR_20 = &VAR_21[1];\n\t\t\t\tVAR_21 = strchr(VAR_20, ' ');\n\t\t\t}\n\t\t\tif (VAR_20[0] != '\\0')\n\t\t\t\tudev_device_add_devlink(udev_device, VAR_20);\n\t\t} else if (strncmp(VAR_15, \"DRIVER=\", 7) == 0) {\n\t\t\tudev_device_set_driver(udev_device, &VAR_15[7]);\n\t\t} else if (strncmp(VAR_15, \"ACTION=\", 7) == 0) {\n\t\t\tudev_device_set_action(udev_device, &VAR_15[7]);\n\t\t\tVAR_7 = 1;\n\t\t} else if (strncmp(VAR_15, \"MAJOR=\", 6) == 0) {\n\t\t\tVAR_8 = strtoull(&VAR_15[6], NULL, 10);\n\t\t} else if (strncmp(VAR_15, \"MINOR=\", 6) == 0) {\n\t\t\tVAR_9 = strtoull(&VAR_15[6], NULL, 10);\n\t\t} else if (strncmp(VAR_15, \"DEVPATH_OLD=\", 12) == 0) {\n\t\t\tudev_device_set_devpath_old(udev_device, &VAR_15[12]);\n\t\t} else if (strncmp(VAR_15, \"PHYSDEVPATH=\", 12) == 0) {\n\t\t\tudev_device_set_physdevpath(udev_device, &VAR_15[12]);\n\t\t} else if (strncmp(VAR_15, \"SEQNUM=\", 7) == 0) {\n\t\t\tudev_device_set_seqnum(udev_device, strtoull(&VAR_15[7], NULL, 10));\n\t\t} else if (strncmp(VAR_15, \"TIMEOUT=\", 8) == 0) {\n\t\t\tudev_device_set_timeout(udev_device, strtoull(&VAR_15[8], NULL, 10));\n\t\t} else if (strncmp(VAR_15, \"PHYSDEV\", 7) == 0) {\n\t\t\t/* COMMENT_2 */\n\t\t\tcontinue;\n\t\t} else {\n\t\t\tudev_device_add_property_from_string(udev_device, VAR_15);\n\t\t}\n\t}\n\tif (!VAR_5 || !VAR_6 || !VAR_7) {\n\t\tinfo(udev_monitor->udev, \"missing values, skip\\n\");\n\t\tudev_device_unref(udev_device);\n\t\treturn NULL;\n\t}\n\tif (VAR_8 > 0)\n\t\tudev_device_set_devnum(udev_device, makedev(VAR_8, VAR_9));\n\tudev_device_set_info_loaded(udev_device);\n\treturn udev_device;\n}",
    "func_graph_path_before": "hotplug/udev/e2b362d9f23d4c63018709ab5f81a02f72b91e75/libudev-monitor.c/vul/before/2.json",
    "func": "struct udev_device *udev_monitor_receive_device(struct udev_monitor *udev_monitor)\n{\n\tstruct udev_device *udev_device;\n\tstruct msghdr smsg;\n\tstruct iovec iov;\n\tchar cred_msg[CMSG_SPACE(sizeof(struct ucred))];\n\tstruct cmsghdr *cmsg;\n\tstruct ucred *cred;\n\tchar buf[4096];\n\tsize_t bufpos;\n\tint devpath_set = 0;\n\tint subsystem_set = 0;\n\tint action_set = 0;\n\tint maj = 0;\n\tint min = 0;\n\n\tif (udev_monitor == NULL)\n\t\treturn NULL;\n\tmemset(buf, 0x00, sizeof(buf));\n\tiov.iov_base = &buf;\n\tiov.iov_len = sizeof(buf);\n\tmemset (&smsg, 0x00, sizeof(struct msghdr));\n\tsmsg.msg_iov = &iov;\n\tsmsg.msg_iovlen = 1;\n\tsmsg.msg_control = cred_msg;\n\tsmsg.msg_controllen = sizeof(cred_msg);\n\n\tif (recvmsg(udev_monitor->sock, &smsg, 0) < 0) {\n\t\tif (errno != EINTR)\n\t\t\tinfo(udev_monitor->udev, \"unable to receive message\");\n\t\treturn NULL;\n\t}\n\n\tcmsg = CMSG_FIRSTHDR(&smsg);\n\tif (cmsg == NULL || cmsg->cmsg_type != SCM_CREDENTIALS) {\n\t\tinfo(udev_monitor->udev, \"no sender credentials received, message ignored\");\n\t\treturn NULL;\n\t}\n\n\tcred = (struct ucred *)CMSG_DATA(cmsg);\n\tif (cred->uid != 0) {\n\t\tinfo(udev_monitor->udev, \"sender uid=%d, message ignored\", cred->uid);\n\t\treturn NULL;\n\t}\n\n\t/* skip header */\n\tbufpos = strlen(buf) + 1;\n\tif (bufpos < sizeof(\"a@/d\") || bufpos >= sizeof(buf)) {\n\t\tinfo(udev_monitor->udev, \"invalid message length\");\n\t\treturn NULL;\n\t}\n\n\t/* check message header */\n\tif (strstr(buf, \"@/\") == NULL) {\n\t\tinfo(udev_monitor->udev, \"unrecognized message header\");\n\t\treturn NULL;\n\t}\n\n\tudev_device = device_new(udev_monitor->udev);\n\tif (udev_device == NULL) {\n\t\treturn NULL;\n\t}\n\n\twhile (bufpos < sizeof(buf)) {\n\t\tchar *key;\n\t\tsize_t keylen;\n\n\t\tkey = &buf[bufpos];\n\t\tkeylen = strlen(key);\n\t\tif (keylen == 0)\n\t\t\tbreak;\n\t\tbufpos += keylen + 1;\n\n\t\tif (strncmp(key, \"DEVPATH=\", 8) == 0) {\n\t\t\tchar path[UTIL_PATH_SIZE];\n\n\t\t\tutil_strlcpy(path, udev_get_sys_path(udev_monitor->udev), sizeof(path));\n\t\t\tutil_strlcat(path, &key[8], sizeof(path));\n\t\t\tudev_device_set_syspath(udev_device, path);\n\t\t\tdevpath_set = 1;\n\t\t} else if (strncmp(key, \"SUBSYSTEM=\", 10) == 0) {\n\t\t\tudev_device_set_subsystem(udev_device, &key[10]);\n\t\t\tsubsystem_set = 1;\n\t\t} else if (strncmp(key, \"DEVTYPE=\", 8) == 0) {\n\t\t\tudev_device_set_devtype(udev_device, &key[8]);\n\t\t} else if (strncmp(key, \"DEVNAME=\", 8) == 0) {\n\t\t\tudev_device_set_devnode(udev_device, &key[8]);\n\t\t} else if (strncmp(key, \"DEVLINKS=\", 9) == 0) {\n\t\t\tchar devlinks[UTIL_PATH_SIZE];\n\t\t\tchar *slink;\n\t\t\tchar *next;\n\n\t\t\tutil_strlcpy(devlinks, &key[9], sizeof(devlinks));\n\t\t\tslink = devlinks;\n\t\t\tnext = strchr(slink, ' ');\n\t\t\twhile (next != NULL) {\n\t\t\t\tnext[0] = '\\0';\n\t\t\t\tudev_device_add_devlink(udev_device, slink);\n\t\t\t\tslink = &next[1];\n\t\t\t\tnext = strchr(slink, ' ');\n\t\t\t}\n\t\t\tif (slink[0] != '\\0')\n\t\t\t\tudev_device_add_devlink(udev_device, slink);\n\t\t} else if (strncmp(key, \"DRIVER=\", 7) == 0) {\n\t\t\tudev_device_set_driver(udev_device, &key[7]);\n\t\t} else if (strncmp(key, \"ACTION=\", 7) == 0) {\n\t\t\tudev_device_set_action(udev_device, &key[7]);\n\t\t\taction_set = 1;\n\t\t} else if (strncmp(key, \"MAJOR=\", 6) == 0) {\n\t\t\tmaj = strtoull(&key[6], NULL, 10);\n\t\t} else if (strncmp(key, \"MINOR=\", 6) == 0) {\n\t\t\tmin = strtoull(&key[6], NULL, 10);\n\t\t} else if (strncmp(key, \"DEVPATH_OLD=\", 12) == 0) {\n\t\t\tudev_device_set_devpath_old(udev_device, &key[12]);\n\t\t} else if (strncmp(key, \"PHYSDEVPATH=\", 12) == 0) {\n\t\t\tudev_device_set_physdevpath(udev_device, &key[12]);\n\t\t} else if (strncmp(key, \"SEQNUM=\", 7) == 0) {\n\t\t\tudev_device_set_seqnum(udev_device, strtoull(&key[7], NULL, 10));\n\t\t} else if (strncmp(key, \"TIMEOUT=\", 8) == 0) {\n\t\t\tudev_device_set_timeout(udev_device, strtoull(&key[8], NULL, 10));\n\t\t} else if (strncmp(key, \"PHYSDEV\", 7) == 0) {\n\t\t\t/* skip deprecated values */\n\t\t\tcontinue;\n\t\t} else {\n\t\t\tudev_device_add_property_from_string(udev_device, key);\n\t\t}\n\t}\n\tif (!devpath_set || !subsystem_set || !action_set) {\n\t\tinfo(udev_monitor->udev, \"missing values, skip\\n\");\n\t\tudev_device_unref(udev_device);\n\t\treturn NULL;\n\t}\n\tif (maj > 0)\n\t\tudev_device_set_devnum(udev_device, makedev(maj, min));\n\tudev_device_set_info_loaded(udev_device);\n\treturn udev_device;\n}",
    "abstract_func": "struct udev_device *udev_monitor_receive_device(struct udev_monitor *udev_monitor)\n{\n\tstruct udev_device *udev_device;\n\tstruct msghdr VAR_0;\n\tstruct iovec VAR_1;\n\tchar VAR_2[CMSG_SPACE(sizeof(struct ucred))];\n\tstruct cmsghdr *VAR_3;\n\tstruct ucred *VAR_4;\n\tchar VAR_5[4096];\n\tsize_t VAR_6;\n\tint VAR_7 = 0;\n\tint VAR_8 = 0;\n\tint VAR_9 = 0;\n\tint VAR_10 = 0;\n\tint VAR_11 = 0;\n\n\tif (udev_monitor == NULL)\n\t\treturn NULL;\n\tmemset(VAR_5, 0x00, sizeof(VAR_5));\n\tVAR_1.iov_base = &VAR_5;\n\tVAR_1.iov_len = sizeof(VAR_5);\n\tmemset (&VAR_0, 0x00, sizeof(struct msghdr));\n\tVAR_0.msg_iov = &VAR_1;\n\tVAR_0.msg_iovlen = 1;\n\tVAR_0.msg_control = VAR_2;\n\tVAR_0.msg_controllen = sizeof(VAR_2);\n\n\tif (recvmsg(udev_monitor->sock, &VAR_0, 0) < 0) {\n\t\tif (VAR_12 != VAR_13)\n\t\t\tinfo(udev_monitor->udev, \"unable to receive message\");\n\t\treturn NULL;\n\t}\n\n\tVAR_3 = CMSG_FIRSTHDR(&VAR_0);\n\tif (VAR_3 == NULL || VAR_3->cmsg_type != VAR_14) {\n\t\tinfo(udev_monitor->udev, \"no sender credentials received, message ignored\");\n\t\treturn NULL;\n\t}\n\n\tVAR_4 = (struct ucred *)CMSG_DATA(VAR_3);\n\tif (VAR_4->uid != 0) {\n\t\tinfo(udev_monitor->udev, \"sender uid=%d, message ignored\", VAR_4->uid);\n\t\treturn NULL;\n\t}\n\n\t/* COMMENT_0 */\n\tVAR_6 = strlen(VAR_5) + 1;\n\tif (VAR_6 < sizeof(\"a@/d\") || VAR_6 >= sizeof(VAR_5)) {\n\t\tinfo(udev_monitor->udev, \"invalid message length\");\n\t\treturn NULL;\n\t}\n\n\t/* COMMENT_1 */\n\tif (strstr(VAR_5, \"@/\") == NULL) {\n\t\tinfo(udev_monitor->udev, \"unrecognized message header\");\n\t\treturn NULL;\n\t}\n\n\tudev_device = device_new(udev_monitor->udev);\n\tif (udev_device == NULL) {\n\t\treturn NULL;\n\t}\n\n\twhile (VAR_6 < sizeof(VAR_5)) {\n\t\tchar *VAR_15;\n\t\tsize_t VAR_16;\n\n\t\tVAR_15 = &VAR_5[VAR_6];\n\t\tVAR_16 = strlen(VAR_15);\n\t\tif (VAR_16 == 0)\n\t\t\tbreak;\n\t\tVAR_6 += VAR_16 + 1;\n\n\t\tif (strncmp(VAR_15, \"DEVPATH=\", 8) == 0) {\n\t\t\tchar VAR_17[VAR_18];\n\n\t\t\tutil_strlcpy(VAR_17, udev_get_sys_path(udev_monitor->udev), sizeof(VAR_17));\n\t\t\tutil_strlcat(VAR_17, &VAR_15[8], sizeof(VAR_17));\n\t\t\tudev_device_set_syspath(udev_device, VAR_17);\n\t\t\tVAR_7 = 1;\n\t\t} else if (strncmp(VAR_15, \"SUBSYSTEM=\", 10) == 0) {\n\t\t\tudev_device_set_subsystem(udev_device, &VAR_15[10]);\n\t\t\tVAR_8 = 1;\n\t\t} else if (strncmp(VAR_15, \"DEVTYPE=\", 8) == 0) {\n\t\t\tudev_device_set_devtype(udev_device, &VAR_15[8]);\n\t\t} else if (strncmp(VAR_15, \"DEVNAME=\", 8) == 0) {\n\t\t\tudev_device_set_devnode(udev_device, &VAR_15[8]);\n\t\t} else if (strncmp(VAR_15, \"DEVLINKS=\", 9) == 0) {\n\t\t\tchar VAR_19[VAR_18];\n\t\t\tchar *VAR_20;\n\t\t\tchar *VAR_21;\n\n\t\t\tutil_strlcpy(VAR_19, &VAR_15[9], sizeof(VAR_19));\n\t\t\tVAR_20 = VAR_19;\n\t\t\tVAR_21 = strchr(VAR_20, ' ');\n\t\t\twhile (VAR_21 != NULL) {\n\t\t\t\tVAR_21[0] = '\\0';\n\t\t\t\tudev_device_add_devlink(udev_device, VAR_20);\n\t\t\t\tVAR_20 = &VAR_21[1];\n\t\t\t\tVAR_21 = strchr(VAR_20, ' ');\n\t\t\t}\n\t\t\tif (VAR_20[0] != '\\0')\n\t\t\t\tudev_device_add_devlink(udev_device, VAR_20);\n\t\t} else if (strncmp(VAR_15, \"DRIVER=\", 7) == 0) {\n\t\t\tudev_device_set_driver(udev_device, &VAR_15[7]);\n\t\t} else if (strncmp(VAR_15, \"ACTION=\", 7) == 0) {\n\t\t\tudev_device_set_action(udev_device, &VAR_15[7]);\n\t\t\tVAR_9 = 1;\n\t\t} else if (strncmp(VAR_15, \"MAJOR=\", 6) == 0) {\n\t\t\tVAR_10 = strtoull(&VAR_15[6], NULL, 10);\n\t\t} else if (strncmp(VAR_15, \"MINOR=\", 6) == 0) {\n\t\t\tVAR_11 = strtoull(&VAR_15[6], NULL, 10);\n\t\t} else if (strncmp(VAR_15, \"DEVPATH_OLD=\", 12) == 0) {\n\t\t\tudev_device_set_devpath_old(udev_device, &VAR_15[12]);\n\t\t} else if (strncmp(VAR_15, \"PHYSDEVPATH=\", 12) == 0) {\n\t\t\tudev_device_set_physdevpath(udev_device, &VAR_15[12]);\n\t\t} else if (strncmp(VAR_15, \"SEQNUM=\", 7) == 0) {\n\t\t\tudev_device_set_seqnum(udev_device, strtoull(&VAR_15[7], NULL, 10));\n\t\t} else if (strncmp(VAR_15, \"TIMEOUT=\", 8) == 0) {\n\t\t\tudev_device_set_timeout(udev_device, strtoull(&VAR_15[8], NULL, 10));\n\t\t} else if (strncmp(VAR_15, \"PHYSDEV\", 7) == 0) {\n\t\t\t/* COMMENT_2 */\n\t\t\tcontinue;\n\t\t} else {\n\t\t\tudev_device_add_property_from_string(udev_device, VAR_15);\n\t\t}\n\t}\n\tif (!VAR_7 || !VAR_8 || !VAR_9) {\n\t\tinfo(udev_monitor->udev, \"missing values, skip\\n\");\n\t\tudev_device_unref(udev_device);\n\t\treturn NULL;\n\t}\n\tif (VAR_10 > 0)\n\t\tudev_device_set_devnum(udev_device, makedev(VAR_10, VAR_11));\n\tudev_device_set_info_loaded(udev_device);\n\treturn udev_device;\n}",
    "func_graph_path": "hotplug/udev/e2b362d9f23d4c63018709ab5f81a02f72b91e75/libudev-monitor.c/vul/after/2.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -4,6 +4,8 @@\n \tstruct msghdr smsg;\n \tstruct iovec iov;\n \tchar cred_msg[CMSG_SPACE(sizeof(struct ucred))];\n+\tstruct cmsghdr *cmsg;\n+\tstruct ucred *cred;\n \tchar buf[4096];\n \tsize_t bufpos;\n \tint devpath_set = 0;\n@@ -29,19 +31,16 @@\n \t\treturn NULL;\n \t}\n \n-\tif (udev_monitor->sun.sun_family != 0) {\n-\t\tstruct cmsghdr *cmsg = CMSG_FIRSTHDR(&smsg);\n-\t\tstruct ucred *cred = (struct ucred *)CMSG_DATA (cmsg);\n+\tcmsg = CMSG_FIRSTHDR(&smsg);\n+\tif (cmsg == NULL || cmsg->cmsg_type != SCM_CREDENTIALS) {\n+\t\tinfo(udev_monitor->udev, \"no sender credentials received, message ignored\");\n+\t\treturn NULL;\n+\t}\n \n-\t\tif (cmsg == NULL || cmsg->cmsg_type != SCM_CREDENTIALS) {\n-\t\t\tinfo(udev_monitor->udev, \"no sender credentials received, message ignored\");\n-\t\t\treturn NULL;\n-\t\t}\n-\n-\t\tif (cred->uid != 0) {\n-\t\t\tinfo(udev_monitor->udev, \"sender uid=%d, message ignored\", cred->uid);\n-\t\t\treturn NULL;\n-\t\t}\n+\tcred = (struct ucred *)CMSG_DATA(cmsg);\n+\tif (cred->uid != 0) {\n+\t\tinfo(udev_monitor->udev, \"sender uid=%d, message ignored\", cred->uid);\n+\t\treturn NULL;\n \t}\n \n \t/* skip header */",
    "diff_line_info": {
        "deleted_lines": [
            "\tif (udev_monitor->sun.sun_family != 0) {",
            "\t\tstruct cmsghdr *cmsg = CMSG_FIRSTHDR(&smsg);",
            "\t\tstruct ucred *cred = (struct ucred *)CMSG_DATA (cmsg);",
            "\t\tif (cmsg == NULL || cmsg->cmsg_type != SCM_CREDENTIALS) {",
            "\t\t\tinfo(udev_monitor->udev, \"no sender credentials received, message ignored\");",
            "\t\t\treturn NULL;",
            "\t\t}",
            "",
            "\t\tif (cred->uid != 0) {",
            "\t\t\tinfo(udev_monitor->udev, \"sender uid=%d, message ignored\", cred->uid);",
            "\t\t\treturn NULL;",
            "\t\t}"
        ],
        "added_lines": [
            "\tstruct cmsghdr *cmsg;",
            "\tstruct ucred *cred;",
            "\tcmsg = CMSG_FIRSTHDR(&smsg);",
            "\tif (cmsg == NULL || cmsg->cmsg_type != SCM_CREDENTIALS) {",
            "\t\tinfo(udev_monitor->udev, \"no sender credentials received, message ignored\");",
            "\t\treturn NULL;",
            "\t}",
            "\tcred = (struct ucred *)CMSG_DATA(cmsg);",
            "\tif (cred->uid != 0) {",
            "\t\tinfo(udev_monitor->udev, \"sender uid=%d, message ignored\", cred->uid);",
            "\t\treturn NULL;"
        ]
    },
    "is_vul": true,
    "pr_url": null,
    "description": "no more info"
}