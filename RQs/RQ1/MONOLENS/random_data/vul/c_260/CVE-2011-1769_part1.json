{
    "cve_id": "CVE-2011-1769",
    "cwe_ids": [
        "CWE-189"
    ],
    "cvss_vector": "AV:L/AC:H/Au:N/C:N/I:N/A:P",
    "cvss_is_v3": false,
    "repo_name": "systemtap",
    "commit_msg": "\nCVE-2011-1781, CVE-2011-1769: correct DW_OP_{mod,div} division-by-zero bug\n\n    Probing a process with corrupted DWARF information, it has been\n    possible to create a kernel-side divison-by-zero.  This fixes.\n\n    Handle DW_OP_div/mod divide by zero. DW_OP_mod should work unsigned.\n\n    * loc2c.c (translate): Use helper functions div_op and mod_op for\n      DW_OP_div and DW_OP_mod operands. Set used_deref = true.\n    * translate.cxx (translate_runtime): Emit STAP_MSG_LOC2C_03 define.\n    * runtime/loc2c-runtime.h: Define dwarf_div_op and dwarf_mod_op macros.\n    * runtime/unwind.c (compute_expr): Check for zero before executing\n      DW_OP_mod or DW_OP_div.\n",
    "commit_hash": "fa2e3415185a28542d419a641ecd6cddd52e3cd9",
    "git_url": "http://sourceware.org/git/?p=systemtap.git;a=commit;h=fa2e3415185a28542d419a641ecd6cddd52e3cd9",
    "file_path": "translate.cxx",
    "func_name": "translate_runtime",
    "func_before": "void translate_runtime(systemtap_session& s)\n{\n  s.op->newline() << \"#define STAP_MSG_RUNTIME_H_01 \"\n                  << lex_cast_qstring(_(\"myproc-unprivileged tapset function called \"\n                                        \"without is_myproc checking for pid %d (euid %d)\"));\n\n  s.op->newline() << \"#define STAP_MSG_LOC2C_01 \"\n                  << lex_cast_qstring(_(\"kernel read fault at 0x%p (%s)\"));\n  s.op->newline() << \"#define STAP_MSG_LOC2C_02 \"\n                  << lex_cast_qstring(_(\"kernel write fault at 0x%p (%s)\"));\n}",
    "abstract_func_before": "void translate_runtime(systemtap_session& VAR_0)\n{\n  VAR_0.op->newline() << \"#define STAP_MSG_RUNTIME_H_01 \"\n                  << lex_cast_qstring(_(\"myproc-unprivileged tapset function called \"\n                                        \"without is_myproc checking for pid %d (euid %d)\"));\n\n  VAR_0.op->newline() << \"#define STAP_MSG_LOC2C_01 \"\n                  << lex_cast_qstring(_(\"kernel read fault at 0x%p (%s)\"));\n  VAR_0.op->newline() << \"#define STAP_MSG_LOC2C_02 \"\n                  << lex_cast_qstring(_(\"kernel write fault at 0x%p (%s)\"));\n}",
    "func_graph_path_before": "systemtap/fa2e3415185a28542d419a641ecd6cddd52e3cd9/translate.cxx/vul/before/0.json",
    "func": "void translate_runtime(systemtap_session& s)\n{\n  s.op->newline() << \"#define STAP_MSG_RUNTIME_H_01 \"\n                  << lex_cast_qstring(_(\"myproc-unprivileged tapset function called \"\n                                        \"without is_myproc checking for pid %d (euid %d)\"));\n\n  s.op->newline() << \"#define STAP_MSG_LOC2C_01 \"\n                  << lex_cast_qstring(_(\"kernel read fault at 0x%p (%s)\"));\n  s.op->newline() << \"#define STAP_MSG_LOC2C_02 \"\n                  << lex_cast_qstring(_(\"kernel write fault at 0x%p (%s)\"));\n  s.op->newline() << \"#define STAP_MSG_LOC2C_03 \"\n                  << lex_cast_qstring(_(\"divide by zero in DWARF operand (%s)\"));\n}",
    "abstract_func": "void translate_runtime(systemtap_session& VAR_0)\n{\n  VAR_0.op->newline() << \"#define STAP_MSG_RUNTIME_H_01 \"\n                  << lex_cast_qstring(_(\"myproc-unprivileged tapset function called \"\n                                        \"without is_myproc checking for pid %d (euid %d)\"));\n\n  VAR_0.op->newline() << \"#define STAP_MSG_LOC2C_01 \"\n                  << lex_cast_qstring(_(\"kernel read fault at 0x%p (%s)\"));\n  VAR_0.op->newline() << \"#define STAP_MSG_LOC2C_02 \"\n                  << lex_cast_qstring(_(\"kernel write fault at 0x%p (%s)\"));\n  VAR_0.op->newline() << \"#define STAP_MSG_LOC2C_03 \"\n                  << lex_cast_qstring(_(\"divide by zero in DWARF operand (%s)\"));\n}",
    "func_graph_path": "systemtap/fa2e3415185a28542d419a641ecd6cddd52e3cd9/translate.cxx/vul/after/0.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -8,4 +8,6 @@\n                   << lex_cast_qstring(_(\"kernel read fault at 0x%p (%s)\"));\n   s.op->newline() << \"#define STAP_MSG_LOC2C_02 \"\n                   << lex_cast_qstring(_(\"kernel write fault at 0x%p (%s)\"));\n+  s.op->newline() << \"#define STAP_MSG_LOC2C_03 \"\n+                  << lex_cast_qstring(_(\"divide by zero in DWARF operand (%s)\"));\n }",
    "diff_line_info": {
        "deleted_lines": [],
        "added_lines": [
            "  s.op->newline() << \"#define STAP_MSG_LOC2C_03 \"",
            "                  << lex_cast_qstring(_(\"divide by zero in DWARF operand (%s)\"));"
        ]
    },
    "is_vul": true,
    "pr_url": null,
    "description": "no more info"
}