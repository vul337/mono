{
    "cve_id": "CVE-2021-24037",
    "cwe_ids": [
        "CWE-416"
    ],
    "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:P/A:P",
    "cvss_is_v3": false,
    "repo_name": "facebook/hermes",
    "commit_msg": "Fix a bug in transient object property assignment and getUTF16Ref\n\nSummary:\nThe returned `UTF16Ref` from `StringView::getUTF16Ref` can be invalidated by\nappending more contents to the same allocator.\nThis case was encountered in `transientObjectPutErrorMessage`, resulting in\nusing free'd memory.\n\nReviewed By: tmikov\n\nDifferential Revision: D23034855\n\nfbshipit-source-id: 4c25a5369934bf3bdfc5582385503f4b87de3792",
    "commit_hash": "d86e185e485b6330216dee8e854455c694e3a36e",
    "git_url": "https://github.com/facebook/hermes/commit/d86e185e485b6330216dee8e854455c694e3a36e",
    "file_path": "lib/VM/Interpreter.cpp",
    "func_name": "transientObjectPutErrorMessage",
    "func_before": "static ExecutionStatus\ntransientObjectPutErrorMessage(Runtime *runtime, Handle<> base, SymbolID id) {\n  // Emit an error message that looks like:\n  // \"Cannot create property '%{id}' on ${typeof base} '${String(base)}'\".\n  StringView propName =\n      runtime->getIdentifierTable().getStringView(runtime, id);\n  Handle<StringPrimitive> baseType =\n      runtime->makeHandle(vmcast<StringPrimitive>(typeOf(runtime, base)));\n  StringView baseTypeAsString =\n      StringPrimitive::createStringView(runtime, baseType);\n  MutableHandle<StringPrimitive> valueAsString{runtime};\n  if (base->isSymbol()) {\n    // Special workaround for Symbol which can't be stringified.\n    auto str = symbolDescriptiveString(runtime, Handle<SymbolID>::vmcast(base));\n    if (str != ExecutionStatus::EXCEPTION) {\n      valueAsString = *str;\n    } else {\n      runtime->clearThrownValue();\n      valueAsString = StringPrimitive::createNoThrow(\n          runtime, \"<<Exception occurred getting the value>>\");\n    }\n  } else {\n    auto str = toString_RJS(runtime, base);\n    assert(\n        str != ExecutionStatus::EXCEPTION &&\n        \"Primitives should be convertible to string without exceptions\");\n    valueAsString = std::move(*str);\n  }\n  StringView valueAsStringPrintable =\n      StringPrimitive::createStringView(runtime, valueAsString);\n\n  SmallU16String<32> tmp;\n  return runtime->raiseTypeError(\n      TwineChar16(\"Cannot create property '\") + propName + \"' on \" +\n      baseTypeAsString.getUTF16Ref(tmp) + \" '\" +\n      valueAsStringPrintable.getUTF16Ref(tmp) + \"'\");\n}",
    "abstract_func_before": "static ExecutionStatus\ntransientObjectPutErrorMessage(Runtime *VAR_0, Handle<> VAR_1, SymbolID VAR_2) {\n  /* COMMENT_0 */\n  /* COMMENT_1 */\n  StringView VAR_3 =\n      VAR_0->getIdentifierTable().getStringView(VAR_0, VAR_2);\n  Handle<StringPrimitive> VAR_4 =\n      VAR_0->makeHandle(VAR_5<StringPrimitive>(typeOf(VAR_0, VAR_1)));\n  StringView VAR_6 =\n      StringPrimitive::createStringView(VAR_0, VAR_4);\n  MutableHandle<StringPrimitive> VAR_7{VAR_0};\n  if (VAR_1->isSymbol()) {\n    /* COMMENT_2 */\n    auto VAR_8 = symbolDescriptiveString(VAR_0, Handle<SymbolID>::vmcast(VAR_1));\n    if (VAR_8 != ExecutionStatus::EXCEPTION) {\n      VAR_7 = *VAR_8;\n    } else {\n      VAR_0->clearThrownValue();\n      VAR_7 = StringPrimitive::createNoThrow(\n          VAR_0, \"<<Exception occurred getting the value>>\");\n    }\n  } else {\n    auto VAR_8 = toString_RJS(VAR_0, VAR_1);\n    assert(\n        VAR_8 != ExecutionStatus::EXCEPTION &&\n        \"Primitives should be convertible to string without exceptions\");\n    VAR_7 = std::move(*VAR_8);\n  }\n  StringView VAR_9 =\n      StringPrimitive::createStringView(VAR_0, VAR_7);\n\n  SmallU16String<32> VAR_10;\n  return VAR_0->raiseTypeError(\n      TwineChar16(\"Cannot create property '\") + VAR_3 + \"' on \" +\n      VAR_6.getUTF16Ref(VAR_10) + \" '\" +\n      VAR_9.getUTF16Ref(VAR_10) + \"'\");\n}",
    "func_graph_path_before": "facebook/hermes/d86e185e485b6330216dee8e854455c694e3a36e/Interpreter.cpp/vul/before/0.json",
    "func": "static ExecutionStatus\ntransientObjectPutErrorMessage(Runtime *runtime, Handle<> base, SymbolID id) {\n  // Emit an error message that looks like:\n  // \"Cannot create property '%{id}' on ${typeof base} '${String(base)}'\".\n  StringView propName =\n      runtime->getIdentifierTable().getStringView(runtime, id);\n  Handle<StringPrimitive> baseType =\n      runtime->makeHandle(vmcast<StringPrimitive>(typeOf(runtime, base)));\n  StringView baseTypeAsString =\n      StringPrimitive::createStringView(runtime, baseType);\n  MutableHandle<StringPrimitive> valueAsString{runtime};\n  if (base->isSymbol()) {\n    // Special workaround for Symbol which can't be stringified.\n    auto str = symbolDescriptiveString(runtime, Handle<SymbolID>::vmcast(base));\n    if (str != ExecutionStatus::EXCEPTION) {\n      valueAsString = *str;\n    } else {\n      runtime->clearThrownValue();\n      valueAsString = StringPrimitive::createNoThrow(\n          runtime, \"<<Exception occurred getting the value>>\");\n    }\n  } else {\n    auto str = toString_RJS(runtime, base);\n    assert(\n        str != ExecutionStatus::EXCEPTION &&\n        \"Primitives should be convertible to string without exceptions\");\n    valueAsString = std::move(*str);\n  }\n  StringView valueAsStringPrintable =\n      StringPrimitive::createStringView(runtime, valueAsString);\n\n  SmallU16String<32> tmp1;\n  SmallU16String<32> tmp2;\n  return runtime->raiseTypeError(\n      TwineChar16(\"Cannot create property '\") + propName + \"' on \" +\n      baseTypeAsString.getUTF16Ref(tmp1) + \" '\" +\n      valueAsStringPrintable.getUTF16Ref(tmp2) + \"'\");\n}",
    "abstract_func": "static ExecutionStatus\ntransientObjectPutErrorMessage(Runtime *VAR_0, Handle<> VAR_1, SymbolID VAR_2) {\n  /* COMMENT_0 */\n  /* COMMENT_1 */\n  StringView VAR_3 =\n      VAR_0->getIdentifierTable().getStringView(VAR_0, VAR_2);\n  Handle<StringPrimitive> VAR_4 =\n      VAR_0->makeHandle(VAR_5<StringPrimitive>(typeOf(VAR_0, VAR_1)));\n  StringView VAR_6 =\n      StringPrimitive::createStringView(VAR_0, VAR_4);\n  MutableHandle<StringPrimitive> VAR_7{VAR_0};\n  if (VAR_1->isSymbol()) {\n    /* COMMENT_2 */\n    auto VAR_8 = symbolDescriptiveString(VAR_0, Handle<SymbolID>::vmcast(VAR_1));\n    if (VAR_8 != ExecutionStatus::EXCEPTION) {\n      VAR_7 = *VAR_8;\n    } else {\n      VAR_0->clearThrownValue();\n      VAR_7 = StringPrimitive::createNoThrow(\n          VAR_0, \"<<Exception occurred getting the value>>\");\n    }\n  } else {\n    auto VAR_8 = toString_RJS(VAR_0, VAR_1);\n    assert(\n        VAR_8 != ExecutionStatus::EXCEPTION &&\n        \"Primitives should be convertible to string without exceptions\");\n    VAR_7 = std::move(*VAR_8);\n  }\n  StringView VAR_9 =\n      StringPrimitive::createStringView(VAR_0, VAR_7);\n\n  SmallU16String<32> VAR_10;\n  SmallU16String<32> VAR_11;\n  return VAR_0->raiseTypeError(\n      TwineChar16(\"Cannot create property '\") + VAR_3 + \"' on \" +\n      VAR_6.getUTF16Ref(VAR_10) + \" '\" +\n      VAR_9.getUTF16Ref(VAR_11) + \"'\");\n}",
    "func_graph_path": "facebook/hermes/d86e185e485b6330216dee8e854455c694e3a36e/Interpreter.cpp/vul/after/0.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -29,9 +29,10 @@\n   StringView valueAsStringPrintable =\n       StringPrimitive::createStringView(runtime, valueAsString);\n \n-  SmallU16String<32> tmp;\n+  SmallU16String<32> tmp1;\n+  SmallU16String<32> tmp2;\n   return runtime->raiseTypeError(\n       TwineChar16(\"Cannot create property '\") + propName + \"' on \" +\n-      baseTypeAsString.getUTF16Ref(tmp) + \" '\" +\n-      valueAsStringPrintable.getUTF16Ref(tmp) + \"'\");\n+      baseTypeAsString.getUTF16Ref(tmp1) + \" '\" +\n+      valueAsStringPrintable.getUTF16Ref(tmp2) + \"'\");\n }",
    "diff_line_info": {
        "deleted_lines": [
            "  SmallU16String<32> tmp;",
            "      baseTypeAsString.getUTF16Ref(tmp) + \" '\" +",
            "      valueAsStringPrintable.getUTF16Ref(tmp) + \"'\");"
        ],
        "added_lines": [
            "  SmallU16String<32> tmp1;",
            "  SmallU16String<32> tmp2;",
            "      baseTypeAsString.getUTF16Ref(tmp1) + \" '\" +",
            "      valueAsStringPrintable.getUTF16Ref(tmp2) + \"'\");"
        ]
    },
    "is_vul": true,
    "pr_url": null,
    "description": "no more info"
}