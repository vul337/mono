{
    "cve_id": "CVE-2011-3973",
    "cwe_ids": [
        "CWE-399",
        "CWE-189"
    ],
    "cvss_vector": "AV:N/AC:L/Au:N/C:N/I:N/A:P",
    "cvss_is_v3": false,
    "repo_name": "ffmpeg",
    "commit_msg": "\ncavs: fix some crashes with invalid bitstreams\n\nThis removes all valgrind-reported invalid writes with one\nspecific test file.\n\nFixes http://www.ocert.org/advisories/ocert-2011-002.html\n\nSigned-off-by: Mans Rullgard <mans@mansr.com>\n(cherry picked from commit 4a71da0f3ab7f5542decd11c81994f849d5b2c78)\n",
    "commit_hash": "bd968d260aef322fb32e254a3de0d2036c57bd56",
    "git_url": "http://git.videolan.org/?p=ffmpeg.git;a=commit;h=bd968d260aef322fb32e254a3de0d2036c57bd56",
    "file_path": "libavcodec/cavsdec.c",
    "func_name": "decode_residual_block",
    "func_before": "static int decode_residual_block(AVSContext *h, GetBitContext *gb,\n                                 const struct dec_2dvlc *r, int esc_golomb_order,\n                                 int qp, uint8_t *dst, int stride) {\n    int i, level_code, esc_code, level, run, mask;\n    DCTELEM level_buf[65];\n    uint8_t run_buf[65];\n    DCTELEM *block = h->block;\n\n    for(i=0;i<65;i++) {\n        level_code = get_ue_code(gb,r->golomb_order);\n        if(level_code >= ESCAPE_CODE) {\n            run = ((level_code - ESCAPE_CODE) >> 1) + 1;\n            esc_code = get_ue_code(gb,esc_golomb_order);\n            level = esc_code + (run > r->max_run ? 1 : r->level_add[run]);\n            while(level > r->inc_limit)\n                r++;\n            mask = -(level_code & 1);\n            level = (level^mask) - mask;\n        } else {\n            level = r->rltab[level_code][0];\n            if(!level) //end of block signal\n                break;\n            run   = r->rltab[level_code][1];\n            r += r->rltab[level_code][2];\n        }\n        level_buf[i] = level;\n        run_buf[i] = run;\n    }\n    if(dequant(h,level_buf, run_buf, block, ff_cavs_dequant_mul[qp],\n               ff_cavs_dequant_shift[qp], i))\n        return -1;\n    h->cdsp.cavs_idct8_add(dst,block,stride);\n    h->s.dsp.clear_block(block);\n    return 0;\n}",
    "abstract_func_before": "static int decode_residual_block(AVSContext *VAR_0, GetBitContext *VAR_1,\n                                 const struct dec_2dvlc *VAR_2, int VAR_3,\n                                 int VAR_4, uint8_t *VAR_5, int VAR_6) {\n    int VAR_7, VAR_8, VAR_9, VAR_10, VAR_11, VAR_12;\n    DCTELEM VAR_13[65];\n    uint8_t VAR_14[65];\n    DCTELEM *VAR_15 = VAR_0->block;\n\n    for(VAR_7=0;VAR_7<65;VAR_7++) {\n        VAR_8 = get_ue_code(VAR_1,VAR_2->golomb_order);\n        if(VAR_8 >= VAR_16) {\n            VAR_11 = ((VAR_8 - VAR_16) >> 1) + 1;\n            VAR_9 = get_ue_code(VAR_1,VAR_3);\n            VAR_10 = VAR_9 + (VAR_11 > VAR_2->max_run ? 1 : VAR_2->level_add[VAR_11]);\n            while(VAR_10 > VAR_2->inc_limit)\n                VAR_2++;\n            VAR_12 = -(VAR_8 & 1);\n            VAR_10 = (VAR_10^VAR_12) - VAR_12;\n        } else {\n            VAR_10 = VAR_2->rltab[VAR_8][0];\n            if(!VAR_10) /* COMMENT_0 */\n                break;\n            VAR_11   = VAR_2->rltab[VAR_8][1];\n            VAR_2 += VAR_2->rltab[VAR_8][2];\n        }\n        VAR_13[VAR_7] = VAR_10;\n        VAR_14[VAR_7] = VAR_11;\n    }\n    if(dequant(VAR_0,VAR_13, VAR_14, VAR_15, VAR_17[VAR_4],\n               VAR_18[VAR_4], VAR_7))\n        return -1;\n    VAR_0->cdsp.cavs_idct8_add(VAR_5,VAR_15,VAR_6);\n    VAR_0->s.dsp.clear_block(VAR_15);\n    return 0;\n}",
    "func_graph_path_before": "ffmpeg/bd968d260aef322fb32e254a3de0d2036c57bd56/cavsdec.c/vul/before/3.json",
    "func": "static int decode_residual_block(AVSContext *h, GetBitContext *gb,\n                                 const struct dec_2dvlc *r, int esc_golomb_order,\n                                 int qp, uint8_t *dst, int stride) {\n    int i, level_code, esc_code, level, run, mask;\n    DCTELEM level_buf[65];\n    uint8_t run_buf[65];\n    DCTELEM *block = h->block;\n\n    for(i=0;i<65;i++) {\n        level_code = get_ue_code(gb,r->golomb_order);\n        if(level_code >= ESCAPE_CODE) {\n            run = ((level_code - ESCAPE_CODE) >> 1) + 1;\n            esc_code = get_ue_code(gb,esc_golomb_order);\n            level = esc_code + (run > r->max_run ? 1 : r->level_add[run]);\n            while(level > r->inc_limit)\n                r++;\n            mask = -(level_code & 1);\n            level = (level^mask) - mask;\n        } else if (level_code >= 0) {\n            level = r->rltab[level_code][0];\n            if(!level) //end of block signal\n                break;\n            run   = r->rltab[level_code][1];\n            r += r->rltab[level_code][2];\n        } else {\n            break;\n        }\n        level_buf[i] = level;\n        run_buf[i] = run;\n    }\n    if(dequant(h,level_buf, run_buf, block, ff_cavs_dequant_mul[qp],\n               ff_cavs_dequant_shift[qp], i))\n        return -1;\n    h->cdsp.cavs_idct8_add(dst,block,stride);\n    h->s.dsp.clear_block(block);\n    return 0;\n}",
    "abstract_func": "static int decode_residual_block(AVSContext *VAR_0, GetBitContext *VAR_1,\n                                 const struct dec_2dvlc *VAR_2, int VAR_3,\n                                 int VAR_4, uint8_t *VAR_5, int VAR_6) {\n    int VAR_7, VAR_8, VAR_9, VAR_10, VAR_11, VAR_12;\n    DCTELEM VAR_13[65];\n    uint8_t VAR_14[65];\n    DCTELEM *VAR_15 = VAR_0->block;\n\n    for(VAR_7=0;VAR_7<65;VAR_7++) {\n        VAR_8 = get_ue_code(VAR_1,VAR_2->golomb_order);\n        if(VAR_8 >= VAR_16) {\n            VAR_11 = ((VAR_8 - VAR_16) >> 1) + 1;\n            VAR_9 = get_ue_code(VAR_1,VAR_3);\n            VAR_10 = VAR_9 + (VAR_11 > VAR_2->max_run ? 1 : VAR_2->level_add[VAR_11]);\n            while(VAR_10 > VAR_2->inc_limit)\n                VAR_2++;\n            VAR_12 = -(VAR_8 & 1);\n            VAR_10 = (VAR_10^VAR_12) - VAR_12;\n        } else if (VAR_8 >= 0) {\n            VAR_10 = VAR_2->rltab[VAR_8][0];\n            if(!VAR_10) /* COMMENT_0 */\n                break;\n            VAR_11   = VAR_2->rltab[VAR_8][1];\n            VAR_2 += VAR_2->rltab[VAR_8][2];\n        } else {\n            break;\n        }\n        VAR_13[VAR_7] = VAR_10;\n        VAR_14[VAR_7] = VAR_11;\n    }\n    if(dequant(VAR_0,VAR_13, VAR_14, VAR_15, VAR_17[VAR_4],\n               VAR_18[VAR_4], VAR_7))\n        return -1;\n    VAR_0->cdsp.cavs_idct8_add(VAR_5,VAR_15,VAR_6);\n    VAR_0->s.dsp.clear_block(VAR_15);\n    return 0;\n}",
    "func_graph_path": "ffmpeg/bd968d260aef322fb32e254a3de0d2036c57bd56/cavsdec.c/vul/after/3.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -16,12 +16,14 @@\n                 r++;\n             mask = -(level_code & 1);\n             level = (level^mask) - mask;\n-        } else {\n+        } else if (level_code >= 0) {\n             level = r->rltab[level_code][0];\n             if(!level) //end of block signal\n                 break;\n             run   = r->rltab[level_code][1];\n             r += r->rltab[level_code][2];\n+        } else {\n+            break;\n         }\n         level_buf[i] = level;\n         run_buf[i] = run;",
    "diff_line_info": {
        "deleted_lines": [
            "        } else {"
        ],
        "added_lines": [
            "        } else if (level_code >= 0) {",
            "        } else {",
            "            break;"
        ]
    },
    "is_vul": true,
    "pr_url": null,
    "description": "no more info"
}