{
    "cve_id": "CVE-2015-7673",
    "cwe_ids": [
        "CWE-119"
    ],
    "cvss_vector": "AV:N/AC:M/Au:N/C:P/I:P/A:P",
    "cvss_is_v3": false,
    "repo_name": "GNOME/gdk-pixbuf",
    "commit_msg": "pixops: Fail make_weights functions on OOM\n\nThe weights could grow very large under certain circumstances, in\nparticular in security-relevant conditions, including the testsuite.\nBy allowing the weight allocation to fail, this can be worked around.\n\nhttps://bugzilla.gnome.org/show_bug.cgi?id=754387",
    "commit_hash": "19f9685dbff7d1f929c61cf99188df917a18811d",
    "git_url": "https://github.com/GNOME/gdk-pixbuf/commit/19f9685dbff7d1f929c61cf99188df917a18811d",
    "file_path": "gdk-pixbuf/pixops/pixops.c",
    "func_name": "bilinear_magnify_make_weights",
    "func_before": "static void\nbilinear_magnify_make_weights (PixopsFilterDimension *dim,\n\t\t\t       double                 scale)\n{\n  double *pixel_weights;\n  int n;\n  int offset;\n  int i;\n\n  if (scale > 1.0)            /* Linear */\n    {\n      n = 2;\n      dim->offset = 0.5 * (1 / scale - 1);\n    }\n  else                          /* Tile */\n    {\n      n = ceil (1.0 + 1.0 / scale);\n      dim->offset = 0.0;\n    }\n\n  dim->n = n;\n  dim->weights = g_malloc_n (sizeof (double) * SUBSAMPLE, n);\n\n  pixel_weights = dim->weights;\n\n  for (offset=0; offset < SUBSAMPLE; offset++)\n    {\n      double x = (double)offset / SUBSAMPLE;\n\n      if (scale > 1.0)      /* Linear */\n        {\n          for (i = 0; i < n; i++)\n            *(pixel_weights++) = (((i == 0) ? (1 - x) : x) / scale) * scale;\n        }\n      else                  /* Tile */\n        {\n          double a = x + 1 / scale;\n\n          /*           x\n           * ---------|--.-|----|--.-|-------  SRC\n           * ------------|---------|---------  DEST\n           */\n          for (i = 0; i < n; i++)\n            {\n              if (i < x)\n                {\n                  if (i + 1 > x)\n                    *(pixel_weights++) = (MIN (i + 1, a) - x) * scale;\n                  else\n                    *(pixel_weights++) = 0;\n                }\n              else\n                {\n                  if (a > i)\n                    *(pixel_weights++) = (MIN (i + 1, a) - i) * scale;\n                  else\n                    *(pixel_weights++) = 0;\n                }\n            }\n        }\n    }\n}",
    "abstract_func_before": "static void\nbilinear_magnify_make_weights (PixopsFilterDimension *VAR_0,\n\t\t\t       double                 VAR_1)\n{\n  double *VAR_2;\n  int VAR_3;\n  int VAR_4;\n  int VAR_5;\n\n  if (VAR_1 > 1.0)            /* COMMENT_0 */\n    {\n      VAR_3 = 2;\n      VAR_0->offset = 0.5 * (1 / VAR_1 - 1);\n    }\n  else                          /* COMMENT_1 */\n    {\n      VAR_3 = ceil (1.0 + 1.0 / VAR_1);\n      VAR_0->offset = 0.0;\n    }\n\n  VAR_0->n = VAR_3;\n  VAR_0->weights = g_malloc_n (sizeof (double) * VAR_6, VAR_3);\n\n  VAR_2 = VAR_0->weights;\n\n  for (VAR_4=0; VAR_4 < VAR_6; VAR_4++)\n    {\n      double VAR_7 = (double)VAR_4 / VAR_6;\n\n      if (VAR_1 > 1.0)      /* COMMENT_0 */\n        {\n          for (VAR_5 = 0; VAR_5 < VAR_3; VAR_5++)\n            *(VAR_2++) = (((VAR_5 == 0) ? (1 - VAR_7) : VAR_7) / VAR_1) * VAR_1;\n        }\n      else                  /* COMMENT_1 */\n        {\n          double VAR_8 = VAR_7 + 1 / VAR_1;\n\n          /* COMMENT_2 */\n                                                  \n                                                   \n             \n          for (VAR_5 = 0; VAR_5 < VAR_3; VAR_5++)\n            {\n              if (VAR_5 < VAR_7)\n                {\n                  if (VAR_5 + 1 > VAR_7)\n                    *(VAR_2++) = (MIN (VAR_5 + 1, VAR_8) - VAR_7) * VAR_1;\n                  else\n                    *(VAR_2++) = 0;\n                }\n              else\n                {\n                  if (VAR_8 > VAR_5)\n                    *(VAR_2++) = (MIN (VAR_5 + 1, VAR_8) - VAR_5) * VAR_1;\n                  else\n                    *(VAR_2++) = 0;\n                }\n            }\n        }\n    }\n}",
    "func_graph_path_before": "GNOME/gdk-pixbuf/19f9685dbff7d1f929c61cf99188df917a18811d/pixops.c/vul/before/5.json",
    "func": "static gboolean\nbilinear_magnify_make_weights (PixopsFilterDimension *dim,\n\t\t\t       double                 scale)\n{\n  double *pixel_weights;\n  int n;\n  int offset;\n  int i;\n\n  if (scale > 1.0)            /* Linear */\n    {\n      n = 2;\n      dim->offset = 0.5 * (1 / scale - 1);\n    }\n  else                          /* Tile */\n    {\n      n = ceil (1.0 + 1.0 / scale);\n      dim->offset = 0.0;\n    }\n\n  dim->n = n;\n  dim->weights = g_try_malloc_n (sizeof (double) * SUBSAMPLE, n);\n  if (dim->weights == NULL)\n    return FALSE;\n\n  pixel_weights = dim->weights;\n\n  for (offset=0; offset < SUBSAMPLE; offset++)\n    {\n      double x = (double)offset / SUBSAMPLE;\n\n      if (scale > 1.0)      /* Linear */\n        {\n          for (i = 0; i < n; i++)\n            *(pixel_weights++) = (((i == 0) ? (1 - x) : x) / scale) * scale;\n        }\n      else                  /* Tile */\n        {\n          double a = x + 1 / scale;\n\n          /*           x\n           * ---------|--.-|----|--.-|-------  SRC\n           * ------------|---------|---------  DEST\n           */\n          for (i = 0; i < n; i++)\n            {\n              if (i < x)\n                {\n                  if (i + 1 > x)\n                    *(pixel_weights++) = (MIN (i + 1, a) - x) * scale;\n                  else\n                    *(pixel_weights++) = 0;\n                }\n              else\n                {\n                  if (a > i)\n                    *(pixel_weights++) = (MIN (i + 1, a) - i) * scale;\n                  else\n                    *(pixel_weights++) = 0;\n                }\n            }\n        }\n    }\n\n  return TRUE;\n}",
    "abstract_func": "static gboolean\nbilinear_magnify_make_weights (PixopsFilterDimension *VAR_0,\n\t\t\t       double                 VAR_1)\n{\n  double *VAR_2;\n  int VAR_3;\n  int VAR_4;\n  int VAR_5;\n\n  if (VAR_1 > 1.0)            /* COMMENT_0 */\n    {\n      VAR_3 = 2;\n      VAR_0->offset = 0.5 * (1 / VAR_1 - 1);\n    }\n  else                          /* COMMENT_1 */\n    {\n      VAR_3 = ceil (1.0 + 1.0 / VAR_1);\n      VAR_0->offset = 0.0;\n    }\n\n  VAR_0->n = VAR_3;\n  VAR_0->weights = g_try_malloc_n (sizeof (double) * VAR_6, VAR_3);\n  if (VAR_0->weights == NULL)\n    return FALSE;\n\n  VAR_2 = VAR_0->weights;\n\n  for (VAR_4=0; VAR_4 < VAR_6; VAR_4++)\n    {\n      double VAR_7 = (double)VAR_4 / VAR_6;\n\n      if (VAR_1 > 1.0)      /* COMMENT_0 */\n        {\n          for (VAR_5 = 0; VAR_5 < VAR_3; VAR_5++)\n            *(VAR_2++) = (((VAR_5 == 0) ? (1 - VAR_7) : VAR_7) / VAR_1) * VAR_1;\n        }\n      else                  /* COMMENT_1 */\n        {\n          double VAR_8 = VAR_7 + 1 / VAR_1;\n\n          /* COMMENT_2 */\n                                                  \n                                                   \n             \n          for (VAR_5 = 0; VAR_5 < VAR_3; VAR_5++)\n            {\n              if (VAR_5 < VAR_7)\n                {\n                  if (VAR_5 + 1 > VAR_7)\n                    *(VAR_2++) = (MIN (VAR_5 + 1, VAR_8) - VAR_7) * VAR_1;\n                  else\n                    *(VAR_2++) = 0;\n                }\n              else\n                {\n                  if (VAR_8 > VAR_5)\n                    *(VAR_2++) = (MIN (VAR_5 + 1, VAR_8) - VAR_5) * VAR_1;\n                  else\n                    *(VAR_2++) = 0;\n                }\n            }\n        }\n    }\n\n  return TRUE;\n}",
    "func_graph_path": "GNOME/gdk-pixbuf/19f9685dbff7d1f929c61cf99188df917a18811d/pixops.c/vul/after/5.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -1,4 +1,4 @@\n-static void\n+static gboolean\n bilinear_magnify_make_weights (PixopsFilterDimension *dim,\n \t\t\t       double                 scale)\n {\n@@ -19,7 +19,9 @@\n     }\n \n   dim->n = n;\n-  dim->weights = g_malloc_n (sizeof (double) * SUBSAMPLE, n);\n+  dim->weights = g_try_malloc_n (sizeof (double) * SUBSAMPLE, n);\n+  if (dim->weights == NULL)\n+    return FALSE;\n \n   pixel_weights = dim->weights;\n \n@@ -59,4 +61,6 @@\n             }\n         }\n     }\n+\n+  return TRUE;\n }",
    "diff_line_info": {
        "deleted_lines": [
            "static void",
            "  dim->weights = g_malloc_n (sizeof (double) * SUBSAMPLE, n);"
        ],
        "added_lines": [
            "static gboolean",
            "  dim->weights = g_try_malloc_n (sizeof (double) * SUBSAMPLE, n);",
            "  if (dim->weights == NULL)",
            "    return FALSE;",
            "",
            "  return TRUE;"
        ]
    },
    "is_vul": true,
    "pr_url": null,
    "description": "no more info"
}