{
    "cve_id": "CVE-2023-44487",
    "cwe_ids": [
        "CWE-400"
    ],
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
    "cvss_is_v3": true,
    "repo_name": "h2o",
    "commit_msg": "[http2] delay processing requests upon observing suspicious behavior",
    "commit_hash": "94fbc54b6c9309912fe3d53e7b63408bbe9a1b0d",
    "git_url": "https://github.com/h2o/h2o/commit/94fbc54b6c9309912fe3d53e7b63408bbe9a1b0d",
    "file_path": "lib/http2/connection.c",
    "func_name": "handle_rst_stream_frame",
    "func_before": "static int handle_rst_stream_frame(h2o_http2_conn_t *conn, h2o_http2_frame_t *frame, const char **err_desc)\n{\n    h2o_http2_rst_stream_payload_t payload;\n    h2o_http2_stream_t *stream;\n    int ret;\n\n    if ((ret = h2o_http2_decode_rst_stream_payload(&payload, frame, err_desc)) != 0)\n        return ret;\n    if (is_idle_stream_id(conn, frame->stream_id)) {\n        *err_desc = \"unexpected stream id in RST_STREAM frame\";\n        return H2O_HTTP2_ERROR_PROTOCOL;\n    }\n\n    stream = h2o_http2_conn_get_stream(conn, frame->stream_id);\n    if (stream != NULL) {\n        /* reset the stream */\n        h2o_http2_stream_reset(conn, stream);\n    }\n    /* TODO log */\n\n    return 0;\n}",
    "abstract_func_before": "static int handle_rst_stream_frame(h2o_http2_conn_t *VAR_0, h2o_http2_frame_t *VAR_1, const char **VAR_2)\n{\n    h2o_http2_rst_stream_payload_t VAR_3;\n    h2o_http2_stream_t *VAR_4;\n    int VAR_5;\n\n    if ((VAR_5 = h2o_http2_decode_rst_stream_payload(&VAR_3, VAR_1, VAR_2)) != 0)\n        return VAR_5;\n    if (is_idle_stream_id(VAR_0, VAR_1->stream_id)) {\n        *VAR_2 = \"unexpected stream id in RST_STREAM frame\";\n        return VAR_6;\n    }\n\n    VAR_4 = h2o_http2_conn_get_stream(VAR_0, VAR_1->stream_id);\n    if (VAR_4 != NULL) {\n        /* COMMENT_0 */\n        h2o_http2_stream_reset(VAR_0, VAR_4);\n    }\n    /* COMMENT_1 */\n\n    return 0;\n}",
    "func_graph_path_before": "h2o/94fbc54b6c9309912fe3d53e7b63408bbe9a1b0d/connection.c/vul/before/0.json",
    "func": "static int handle_rst_stream_frame(h2o_http2_conn_t *conn, h2o_http2_frame_t *frame, const char **err_desc)\n{\n    h2o_http2_rst_stream_payload_t payload;\n    h2o_http2_stream_t *stream;\n    int ret;\n\n    if ((ret = h2o_http2_decode_rst_stream_payload(&payload, frame, err_desc)) != 0)\n        return ret;\n    if (is_idle_stream_id(conn, frame->stream_id)) {\n        *err_desc = \"unexpected stream id in RST_STREAM frame\";\n        return H2O_HTTP2_ERROR_PROTOCOL;\n    }\n\n    if ((stream = h2o_http2_conn_get_stream(conn, frame->stream_id)) == NULL)\n        return 0;\n\n    /* reset the stream */\n    stream->reset_by_peer = 1;\n    h2o_http2_stream_reset(conn, stream);\n\n    /* setup process delay if we've just ran out of reset budget */\n    if (conn->dos_mitigation.reset_budget == 0 && conn->super.ctx->globalconf->http2.dos_delay != 0 &&\n        !h2o_timer_is_linked(&conn->dos_mitigation.process_delay))\n        h2o_timer_link(conn->super.ctx->loop, conn->super.ctx->globalconf->http2.dos_delay,\n                       &conn->dos_mitigation.process_delay);\n\n    /* TODO log */\n\n    return 0;\n}",
    "abstract_func": "static int handle_rst_stream_frame(h2o_http2_conn_t *VAR_0, h2o_http2_frame_t *VAR_1, const char **VAR_2)\n{\n    h2o_http2_rst_stream_payload_t VAR_3;\n    h2o_http2_stream_t *VAR_4;\n    int VAR_5;\n\n    if ((VAR_5 = h2o_http2_decode_rst_stream_payload(&VAR_3, VAR_1, VAR_2)) != 0)\n        return VAR_5;\n    if (is_idle_stream_id(VAR_0, VAR_1->stream_id)) {\n        *VAR_2 = \"unexpected stream id in RST_STREAM frame\";\n        return VAR_6;\n    }\n\n    if ((VAR_4 = h2o_http2_conn_get_stream(VAR_0, VAR_1->stream_id)) == NULL)\n        return 0;\n\n    /* COMMENT_0 */\n    VAR_4->reset_by_peer = 1;\n    h2o_http2_stream_reset(VAR_0, VAR_4);\n\n    /* COMMENT_1 */\n    if (VAR_0->dos_mitigation.reset_budget == 0 && VAR_0->super.ctx->globalconf->http2.dos_delay != 0 &&\n        !h2o_timer_is_linked(&VAR_0->dos_mitigation.process_delay))\n        h2o_timer_link(VAR_0->super.ctx->loop, VAR_0->super.ctx->globalconf->http2.dos_delay,\n                       &VAR_0->dos_mitigation.process_delay);\n\n    /* COMMENT_2 */\n\n    return 0;\n}",
    "func_graph_path": "h2o/94fbc54b6c9309912fe3d53e7b63408bbe9a1b0d/connection.c/vul/after/0.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -11,11 +11,19 @@\n         return H2O_HTTP2_ERROR_PROTOCOL;\n     }\n \n-    stream = h2o_http2_conn_get_stream(conn, frame->stream_id);\n-    if (stream != NULL) {\n-        /* reset the stream */\n-        h2o_http2_stream_reset(conn, stream);\n-    }\n+    if ((stream = h2o_http2_conn_get_stream(conn, frame->stream_id)) == NULL)\n+        return 0;\n+\n+    /* reset the stream */\n+    stream->reset_by_peer = 1;\n+    h2o_http2_stream_reset(conn, stream);\n+\n+    /* setup process delay if we've just ran out of reset budget */\n+    if (conn->dos_mitigation.reset_budget == 0 && conn->super.ctx->globalconf->http2.dos_delay != 0 &&\n+        !h2o_timer_is_linked(&conn->dos_mitigation.process_delay))\n+        h2o_timer_link(conn->super.ctx->loop, conn->super.ctx->globalconf->http2.dos_delay,\n+                       &conn->dos_mitigation.process_delay);\n+\n     /* TODO log */\n \n     return 0;",
    "diff_line_info": {
        "deleted_lines": [
            "    stream = h2o_http2_conn_get_stream(conn, frame->stream_id);",
            "    if (stream != NULL) {",
            "        /* reset the stream */",
            "        h2o_http2_stream_reset(conn, stream);",
            "    }"
        ],
        "added_lines": [
            "    if ((stream = h2o_http2_conn_get_stream(conn, frame->stream_id)) == NULL)",
            "        return 0;",
            "",
            "    /* reset the stream */",
            "    stream->reset_by_peer = 1;",
            "    h2o_http2_stream_reset(conn, stream);",
            "",
            "    /* setup process delay if we've just ran out of reset budget */",
            "    if (conn->dos_mitigation.reset_budget == 0 && conn->super.ctx->globalconf->http2.dos_delay != 0 &&",
            "        !h2o_timer_is_linked(&conn->dos_mitigation.process_delay))",
            "        h2o_timer_link(conn->super.ctx->loop, conn->super.ctx->globalconf->http2.dos_delay,",
            "                       &conn->dos_mitigation.process_delay);",
            ""
        ]
    },
    "is_vul": true,
    "pr_url": "https://github.com/h2o/h2o/pull/3291",
    "description": "See https://github.com/h2o/h2o/security/advisories/GHSA-2m7v-gc89-fjqf."
}