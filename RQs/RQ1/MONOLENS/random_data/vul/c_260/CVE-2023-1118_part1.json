{
    "cve_id": "CVE-2023-1118",
    "cwe_ids": [
        "CWE-416"
    ],
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
    "cvss_is_v3": true,
    "repo_name": "torvalds/linux",
    "commit_msg": "media: rc: Fix use-after-free bugs caused by ene_tx_irqsim()\n\nWhen the ene device is detaching, function ene_remove() will\nbe called. But there is no function to cancel tx_sim_timer\nin ene_remove(), the timer handler ene_tx_irqsim() could race\nwith ene_remove(). As a result, the UAF bugs could happen,\nthe process is shown below.\n\n    (cleanup routine)          |        (timer routine)\n                               | mod_timer(&dev->tx_sim_timer, ..)\nene_remove()                   | (wait a time)\n                               | ene_tx_irqsim()\n                               |   dev->hw_lock //USE\n                               |   ene_tx_sample(dev) //USE\n\nFix by adding del_timer_sync(&dev->tx_sim_timer) in ene_remove(),\nThe tx_sim_timer could stop before ene device is deallocated.\n\nWhat's more, The rc_unregister_device() and del_timer_sync()\nshould be called first in ene_remove() and the deallocated\nfunctions such as free_irq(), release_region() and so on\nshould be called behind them. Because the rc_unregister_device()\nis well synchronized. Otherwise, race conditions may happen. The\nsituations that may lead to race conditions are shown below.\n\nFirstly, the rx receiver is disabled with ene_rx_disable()\nbefore rc_unregister_device() in ene_remove(), which means it\ncan be enabled again if a process opens /dev/lirc0 between\nene_rx_disable() and rc_unregister_device().\n\nSecondly, the irqaction descriptor is freed by free_irq()\nbefore the rc device is unregistered, which means irqaction\ndescriptor may be accessed again after it is deallocated.\n\nThirdly, the timer can call ene_tx_sample() that can write\nto the io ports, which means the io ports could be accessed\nagain after they are deallocated by release_region().\n\nTherefore, the rc_unregister_device() and del_timer_sync()\nshould be called first in ene_remove().\n\nSuggested by: Sean Young <sean@mess.org>\n\nFixes: 9ea53b74df9c (\"V4L/DVB: STAGING: remove lirc_ene0100 driver\")\nSigned-off-by: Duoming Zhou <duoming@zju.edu.cn>\nSigned-off-by: Sean Young <sean@mess.org>\nSigned-off-by: Mauro Carvalho Chehab <mchehab@kernel.org>",
    "commit_hash": "29b0589a865b6f66d141d79b2dd1373e4e50fe17",
    "git_url": "https://github.com/torvalds/linux/commit/29b0589a865b6f66d141d79b2dd1373e4e50fe17",
    "file_path": "drivers/media/rc/ene_ir.c",
    "func_name": "ene_remove",
    "func_before": "static void ene_remove(struct pnp_dev *pnp_dev)\n{\n\tstruct ene_device *dev = pnp_get_drvdata(pnp_dev);\n\tunsigned long flags;\n\n\tspin_lock_irqsave(&dev->hw_lock, flags);\n\tene_rx_disable(dev);\n\tene_rx_restore_hw_buffer(dev);\n\tspin_unlock_irqrestore(&dev->hw_lock, flags);\n\n\tfree_irq(dev->irq, dev);\n\trelease_region(dev->hw_io, ENE_IO_SIZE);\n\trc_unregister_device(dev->rdev);\n\tkfree(dev);\n}",
    "abstract_func_before": "static void ene_remove(struct pnp_dev *pnp_dev)\n{\n\tstruct ene_device *VAR_0 = pnp_get_drvdata(pnp_dev);\n\tunsigned long VAR_1;\n\n\tspin_lock_irqsave(&VAR_0->hw_lock, VAR_1);\n\tene_rx_disable(VAR_0);\n\tene_rx_restore_hw_buffer(VAR_0);\n\tspin_unlock_irqrestore(&VAR_0->hw_lock, VAR_1);\n\n\tfree_irq(VAR_0->irq, VAR_0);\n\trelease_region(VAR_0->hw_io, VAR_2);\n\trc_unregister_device(VAR_0->rdev);\n\tkfree(VAR_0);\n}",
    "func_graph_path_before": "torvalds/linux/29b0589a865b6f66d141d79b2dd1373e4e50fe17/ene_ir.c/vul/before/0.json",
    "func": "static void ene_remove(struct pnp_dev *pnp_dev)\n{\n\tstruct ene_device *dev = pnp_get_drvdata(pnp_dev);\n\tunsigned long flags;\n\n\trc_unregister_device(dev->rdev);\n\tdel_timer_sync(&dev->tx_sim_timer);\n\tspin_lock_irqsave(&dev->hw_lock, flags);\n\tene_rx_disable(dev);\n\tene_rx_restore_hw_buffer(dev);\n\tspin_unlock_irqrestore(&dev->hw_lock, flags);\n\n\tfree_irq(dev->irq, dev);\n\trelease_region(dev->hw_io, ENE_IO_SIZE);\n\tkfree(dev);\n}",
    "abstract_func": "static void ene_remove(struct pnp_dev *pnp_dev)\n{\n\tstruct ene_device *VAR_0 = pnp_get_drvdata(pnp_dev);\n\tunsigned long VAR_1;\n\n\trc_unregister_device(VAR_0->rdev);\n\tdel_timer_sync(&VAR_0->tx_sim_timer);\n\tspin_lock_irqsave(&VAR_0->hw_lock, VAR_1);\n\tene_rx_disable(VAR_0);\n\tene_rx_restore_hw_buffer(VAR_0);\n\tspin_unlock_irqrestore(&VAR_0->hw_lock, VAR_1);\n\n\tfree_irq(VAR_0->irq, VAR_0);\n\trelease_region(VAR_0->hw_io, VAR_2);\n\tkfree(VAR_0);\n}",
    "func_graph_path": "torvalds/linux/29b0589a865b6f66d141d79b2dd1373e4e50fe17/ene_ir.c/vul/after/0.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -3,6 +3,8 @@\n \tstruct ene_device *dev = pnp_get_drvdata(pnp_dev);\n \tunsigned long flags;\n \n+\trc_unregister_device(dev->rdev);\n+\tdel_timer_sync(&dev->tx_sim_timer);\n \tspin_lock_irqsave(&dev->hw_lock, flags);\n \tene_rx_disable(dev);\n \tene_rx_restore_hw_buffer(dev);\n@@ -10,6 +12,5 @@\n \n \tfree_irq(dev->irq, dev);\n \trelease_region(dev->hw_io, ENE_IO_SIZE);\n-\trc_unregister_device(dev->rdev);\n \tkfree(dev);\n }",
    "diff_line_info": {
        "deleted_lines": [
            "\trc_unregister_device(dev->rdev);"
        ],
        "added_lines": [
            "\trc_unregister_device(dev->rdev);",
            "\tdel_timer_sync(&dev->tx_sim_timer);"
        ]
    },
    "is_vul": true,
    "pr_url": null,
    "description": "no more info"
}