{
    "cve_id": "CVE-2019-15163",
    "cwe_ids": [
        "CWE-476"
    ],
    "cvss_vector": "AV:N/AC:L/Au:N/C:N/I:N/A:P",
    "cvss_is_v3": false,
    "repo_name": "the-tcpdump-group/libpcap",
    "commit_msg": "Don't crash if crypt() fails.\n\nIt can fail, so make sure it doesn't before comparing its result with\nthe password.\n\nThis addresses Include Security issue F12: [libpcap] Remote Packet\nCapture Daemon Null Pointer Dereference Denial of Service.",
    "commit_hash": "437b273761adedcbd880f714bfa44afeec186a31",
    "git_url": "https://github.com/the-tcpdump-group/libpcap/commit/437b273761adedcbd880f714bfa44afeec186a31",
    "file_path": "rpcapd/daemon.c",
    "func_name": "daemon_AuthUserPwd",
    "func_before": "static int\ndaemon_AuthUserPwd(char *username, char *password, char *errbuf)\n{\n#ifdef _WIN32\n\t/*\n\t * Warning: the user which launches the process must have the\n\t * SE_TCB_NAME right.\n\t * This corresponds to have the \"Act as part of the Operating System\"\n\t * turned on (administrative tools, local security settings, local\n\t * policies, user right assignment)\n\t * However, it seems to me that if you run it as a service, this\n\t * right should be provided by default.\n\t *\n\t * XXX - hopefully, this returns errors such as ERROR_LOGON_FAILURE,\n\t * which merely indicates that the user name or password is\n\t * incorrect, not whether it's the user name or the password\n\t * that's incorrect, so a client that's trying to brute-force\n\t * accounts doesn't know whether it's the user name or the\n\t * password that's incorrect, so it doesn't know whether to\n\t * stop trying to log in with a given user name and move on\n\t * to another user name.\n\t */\n\tHANDLE Token;\n\tif (LogonUser(username, \".\", password, LOGON32_LOGON_NETWORK, LOGON32_PROVIDER_DEFAULT, &Token) == 0)\n\t{\n\t\tpcap_fmt_errmsg_for_win32_err(errbuf, PCAP_ERRBUF_SIZE,\n\t\t    GetLastError(), \"LogonUser() failed\");\n\t\treturn -1;\n\t}\n\n\t// This call should change the current thread to the selected user.\n\t// I didn't test it.\n\tif (ImpersonateLoggedOnUser(Token) == 0)\n\t{\n\t\tpcap_fmt_errmsg_for_win32_err(errbuf, PCAP_ERRBUF_SIZE,\n\t\t    GetLastError(), \"ImpersonateLoggedOnUser() failed\");\n\t\tCloseHandle(Token);\n\t\treturn -1;\n\t}\n\n\tCloseHandle(Token);\n\treturn 0;\n\n#else\n\t/*\n\t * See\n\t *\n\t *\thttp://www.unixpapa.com/incnote/passwd.html\n\t *\n\t * We use the Solaris/Linux shadow password authentication if\n\t * we have getspnam(), otherwise we just do traditional\n\t * authentication, which, on some platforms, might work, even\n\t * with shadow passwords, if we're running as root.  Traditional\n\t * authenticaion won't work if we're not running as root, as\n\t * I think these days all UN*Xes either won't return the password\n\t * at all with getpwnam() or will only do so if you're root.\n\t *\n\t * XXX - perhaps what we *should* be using is PAM, if we have\n\t * it.  That might hide all the details of username/password\n\t * authentication, whether it's done with a visible-to-root-\n\t * only password database or some other authentication mechanism,\n\t * behind its API.\n\t */\n\tstruct passwd *user;\n\tchar *user_password;\n#ifdef HAVE_GETSPNAM\n\tstruct spwd *usersp;\n#endif\n\n\t// This call is needed to get the uid\n\tif ((user = getpwnam(username)) == NULL)\n\t{\n\t\tpcap_snprintf(errbuf, PCAP_ERRBUF_SIZE, \"Authentication failed: user name or password incorrect\");\n\t\treturn -1;\n\t}\n\n#ifdef HAVE_GETSPNAM\n\t// This call is needed to get the password; otherwise 'x' is returned\n\tif ((usersp = getspnam(username)) == NULL)\n\t{\n\t\tpcap_snprintf(errbuf, PCAP_ERRBUF_SIZE, \"Authentication failed: user name or password incorrect\");\n\t\treturn -1;\n\t}\n\tuser_password = usersp->sp_pwdp;\n#else\n\t/*\n\t * XXX - what about other platforms?\n\t * The unixpapa.com page claims this Just Works on *BSD if you're\n\t * running as root - it's from 2000, so it doesn't indicate whether\n\t * macOS (which didn't come out until 2001, under the name Mac OS\n\t * X) behaves like the *BSDs or not, and might also work on AIX.\n\t * HP-UX does something else.\n\t *\n\t * Again, hopefully PAM hides all that.\n\t */\n\tuser_password = user->pw_passwd;\n#endif\n\n\tif (strcmp(user_password, (char *) crypt(password, user_password)) != 0)\n\t{\n\t\tpcap_snprintf(errbuf, PCAP_ERRBUF_SIZE, \"Authentication failed: user name or password incorrect\");\n\t\treturn -1;\n\t}\n\n\tif (setuid(user->pw_uid))\n\t{\n\t\tpcap_fmt_errmsg_for_errno(errbuf, PCAP_ERRBUF_SIZE,\n\t\t    errno, \"setuid\");\n\t\treturn -1;\n\t}\n\n/*\tif (setgid(user->pw_gid))\n\t{\n\t\tpcap_fmt_errmsg_for_errno(errbuf, PCAP_ERRBUF_SIZE,\n\t\t    errno, \"setgid\");\n\t\treturn -1;\n\t}\n*/\n\treturn 0;\n\n#endif\n\n}",
    "abstract_func_before": "static int\ndaemon_AuthUserPwd(char *VAR_0, char *VAR_1, char *VAR_2)\n{\n#ifdef VAR_3\n\t/* COMMENT_0 */\n                                                              \n                      \n                                                                      \n                                                                   \n                                    \n                                                                 \n                                        \n   \n                                                                     \n                                                            \n                                                             \n                                                              \n                                                           \n                                                            \n                                                            \n                         \n    \n\tHANDLE VAR_4;\n\tif (LogonUser(VAR_0, \".\", VAR_1, VAR_5, VAR_6, &VAR_4) == 0)\n\t{\n\t\tpcap_fmt_errmsg_for_win32_err(VAR_2, VAR_7,\n\t\t    GetLastError(), \"LogonUser() failed\");\n\t\treturn -1;\n\t}\n\n\t/* COMMENT_18 */\n\t/* COMMENT_19 */\n\tif (ImpersonateLoggedOnUser(VAR_4) == 0)\n\t{\n\t\tpcap_fmt_errmsg_for_win32_err(VAR_2, VAR_7,\n\t\t    GetLastError(), \"ImpersonateLoggedOnUser() failed\");\n\t\tCloseHandle(VAR_4);\n\t\treturn -1;\n\t}\n\n\tCloseHandle(VAR_4);\n\treturn 0;\n\n#else\n\t/* COMMENT_20 */\n       \n   \n                                               \n   \n                                                              \n                                                        \n                                                              \n                                                                 \n                                                             \n                                                                  \n                                                             \n   \n                                                              \n                                                             \n                                                             \n                                                                  \n                   \n    \n\tstruct passwd *VAR_8;\n\tchar *VAR_9;\n#ifdef VAR_10\n\tstruct spwd *VAR_11;\n#endif\n\n\t/* COMMENT_37 */\n\tif ((VAR_8 = getpwnam(VAR_0)) == NULL)\n\t{\n\t\tpcap_snprintf(VAR_2, VAR_7, \"Authentication failed: user name or password incorrect\");\n\t\treturn -1;\n\t}\n\n#ifdef VAR_10\n\t/* COMMENT_38 */\n\tif ((VAR_11 = getspnam(VAR_0)) == NULL)\n\t{\n\t\tpcap_snprintf(VAR_2, VAR_7, \"Authentication failed: user name or password incorrect\");\n\t\treturn -1;\n\t}\n\tVAR_9 = VAR_11->sp_pwdp;\n#else\n\t/* COMMENT_39 */\n                                     \n                                                                  \n                                                                    \n                                                                  \n                                                                 \n                              \n   \n                                        \n    \n\tVAR_9 = VAR_8->pw_passwd;\n#endif\n\n\tif (strcmp(VAR_9, (char *) crypt(VAR_1, VAR_9)) != 0)\n\t{\n\t\tpcap_snprintf(VAR_2, VAR_7, \"Authentication failed: user name or password incorrect\");\n\t\treturn -1;\n\t}\n\n\tif (setuid(VAR_8->pw_uid))\n\t{\n\t\tpcap_fmt_errmsg_for_errno(VAR_2, VAR_7,\n\t\t    VAR_12, \"setuid\");\n\t\treturn -1;\n\t}\n\n/* COMMENT_49 */\n  \n                                                     \n                       \n            \n  \n  \n\treturn 0;\n\n#endif\n\n}",
    "func_graph_path_before": "the-tcpdump-group/libpcap/437b273761adedcbd880f714bfa44afeec186a31/daemon.c/vul/before/0.json",
    "func": "static int\ndaemon_AuthUserPwd(char *username, char *password, char *errbuf)\n{\n#ifdef _WIN32\n\t/*\n\t * Warning: the user which launches the process must have the\n\t * SE_TCB_NAME right.\n\t * This corresponds to have the \"Act as part of the Operating System\"\n\t * turned on (administrative tools, local security settings, local\n\t * policies, user right assignment)\n\t * However, it seems to me that if you run it as a service, this\n\t * right should be provided by default.\n\t *\n\t * XXX - hopefully, this returns errors such as ERROR_LOGON_FAILURE,\n\t * which merely indicates that the user name or password is\n\t * incorrect, not whether it's the user name or the password\n\t * that's incorrect, so a client that's trying to brute-force\n\t * accounts doesn't know whether it's the user name or the\n\t * password that's incorrect, so it doesn't know whether to\n\t * stop trying to log in with a given user name and move on\n\t * to another user name.\n\t */\n\tHANDLE Token;\n\tif (LogonUser(username, \".\", password, LOGON32_LOGON_NETWORK, LOGON32_PROVIDER_DEFAULT, &Token) == 0)\n\t{\n\t\tpcap_fmt_errmsg_for_win32_err(errbuf, PCAP_ERRBUF_SIZE,\n\t\t    GetLastError(), \"LogonUser() failed\");\n\t\treturn -1;\n\t}\n\n\t// This call should change the current thread to the selected user.\n\t// I didn't test it.\n\tif (ImpersonateLoggedOnUser(Token) == 0)\n\t{\n\t\tpcap_fmt_errmsg_for_win32_err(errbuf, PCAP_ERRBUF_SIZE,\n\t\t    GetLastError(), \"ImpersonateLoggedOnUser() failed\");\n\t\tCloseHandle(Token);\n\t\treturn -1;\n\t}\n\n\tCloseHandle(Token);\n\treturn 0;\n\n#else\n\t/*\n\t * See\n\t *\n\t *\thttp://www.unixpapa.com/incnote/passwd.html\n\t *\n\t * We use the Solaris/Linux shadow password authentication if\n\t * we have getspnam(), otherwise we just do traditional\n\t * authentication, which, on some platforms, might work, even\n\t * with shadow passwords, if we're running as root.  Traditional\n\t * authenticaion won't work if we're not running as root, as\n\t * I think these days all UN*Xes either won't return the password\n\t * at all with getpwnam() or will only do so if you're root.\n\t *\n\t * XXX - perhaps what we *should* be using is PAM, if we have\n\t * it.  That might hide all the details of username/password\n\t * authentication, whether it's done with a visible-to-root-\n\t * only password database or some other authentication mechanism,\n\t * behind its API.\n\t */\n\tstruct passwd *user;\n\tchar *user_password;\n#ifdef HAVE_GETSPNAM\n\tstruct spwd *usersp;\n#endif\n\tchar *crypt_password;\n\n\t// This call is needed to get the uid\n\tif ((user = getpwnam(username)) == NULL)\n\t{\n\t\tpcap_snprintf(errbuf, PCAP_ERRBUF_SIZE, \"Authentication failed: user name or password incorrect\");\n\t\treturn -1;\n\t}\n\n#ifdef HAVE_GETSPNAM\n\t// This call is needed to get the password; otherwise 'x' is returned\n\tif ((usersp = getspnam(username)) == NULL)\n\t{\n\t\tpcap_snprintf(errbuf, PCAP_ERRBUF_SIZE, \"Authentication failed: user name or password incorrect\");\n\t\treturn -1;\n\t}\n\tuser_password = usersp->sp_pwdp;\n#else\n\t/*\n\t * XXX - what about other platforms?\n\t * The unixpapa.com page claims this Just Works on *BSD if you're\n\t * running as root - it's from 2000, so it doesn't indicate whether\n\t * macOS (which didn't come out until 2001, under the name Mac OS\n\t * X) behaves like the *BSDs or not, and might also work on AIX.\n\t * HP-UX does something else.\n\t *\n\t * Again, hopefully PAM hides all that.\n\t */\n\tuser_password = user->pw_passwd;\n#endif\n\n\tcrypt_password = crypt(password, user_password);\n\tif (crypt_password == NULL)\n\t{\n\t\tpcap_snprintf(errbuf, PCAP_ERRBUF_SIZE, \"Authentication failed\");\n\t\treturn -1;\n\t}\n\tif (strcmp(user_password, crypt_password) != 0)\n\t{\n\t\tpcap_snprintf(errbuf, PCAP_ERRBUF_SIZE, \"Authentication failed: user name or password incorrect\");\n\t\treturn -1;\n\t}\n\n\tif (setuid(user->pw_uid))\n\t{\n\t\tpcap_fmt_errmsg_for_errno(errbuf, PCAP_ERRBUF_SIZE,\n\t\t    errno, \"setuid\");\n\t\treturn -1;\n\t}\n\n/*\tif (setgid(user->pw_gid))\n\t{\n\t\tpcap_fmt_errmsg_for_errno(errbuf, PCAP_ERRBUF_SIZE,\n\t\t    errno, \"setgid\");\n\t\treturn -1;\n\t}\n*/\n\treturn 0;\n\n#endif\n\n}",
    "abstract_func": "static int\ndaemon_AuthUserPwd(char *VAR_0, char *VAR_1, char *VAR_2)\n{\n#ifdef VAR_3\n\t/* COMMENT_0 */\n                                                              \n                      \n                                                                      \n                                                                   \n                                    \n                                                                 \n                                        \n   \n                                                                     \n                                                            \n                                                             \n                                                              \n                                                           \n                                                            \n                                                            \n                         \n    \n\tHANDLE VAR_4;\n\tif (LogonUser(VAR_0, \".\", VAR_1, VAR_5, VAR_6, &VAR_4) == 0)\n\t{\n\t\tpcap_fmt_errmsg_for_win32_err(VAR_2, VAR_7,\n\t\t    GetLastError(), \"LogonUser() failed\");\n\t\treturn -1;\n\t}\n\n\t/* COMMENT_18 */\n\t/* COMMENT_19 */\n\tif (ImpersonateLoggedOnUser(VAR_4) == 0)\n\t{\n\t\tpcap_fmt_errmsg_for_win32_err(VAR_2, VAR_7,\n\t\t    GetLastError(), \"ImpersonateLoggedOnUser() failed\");\n\t\tCloseHandle(VAR_4);\n\t\treturn -1;\n\t}\n\n\tCloseHandle(VAR_4);\n\treturn 0;\n\n#else\n\t/* COMMENT_20 */\n       \n   \n                                               \n   \n                                                              \n                                                        \n                                                              \n                                                                 \n                                                             \n                                                                  \n                                                             \n   \n                                                              \n                                                             \n                                                             \n                                                                  \n                   \n    \n\tstruct passwd *VAR_8;\n\tchar *VAR_9;\n#ifdef VAR_10\n\tstruct spwd *VAR_11;\n#endif\n\tchar *VAR_12;\n\n\t/* COMMENT_37 */\n\tif ((VAR_8 = getpwnam(VAR_0)) == NULL)\n\t{\n\t\tpcap_snprintf(VAR_2, VAR_7, \"Authentication failed: user name or password incorrect\");\n\t\treturn -1;\n\t}\n\n#ifdef VAR_10\n\t/* COMMENT_38 */\n\tif ((VAR_11 = getspnam(VAR_0)) == NULL)\n\t{\n\t\tpcap_snprintf(VAR_2, VAR_7, \"Authentication failed: user name or password incorrect\");\n\t\treturn -1;\n\t}\n\tVAR_9 = VAR_11->sp_pwdp;\n#else\n\t/* COMMENT_39 */\n                                     \n                                                                  \n                                                                    \n                                                                  \n                                                                 \n                              \n   \n                                        \n    \n\tVAR_9 = VAR_8->pw_passwd;\n#endif\n\n\tVAR_12 = crypt(VAR_1, VAR_9);\n\tif (VAR_12 == NULL)\n\t{\n\t\tpcap_snprintf(VAR_2, VAR_7, \"Authentication failed\");\n\t\treturn -1;\n\t}\n\tif (strcmp(VAR_9, VAR_12) != 0)\n\t{\n\t\tpcap_snprintf(VAR_2, VAR_7, \"Authentication failed: user name or password incorrect\");\n\t\treturn -1;\n\t}\n\n\tif (setuid(VAR_8->pw_uid))\n\t{\n\t\tpcap_fmt_errmsg_for_errno(VAR_2, VAR_7,\n\t\t    VAR_13, \"setuid\");\n\t\treturn -1;\n\t}\n\n/* COMMENT_49 */\n  \n                                                     \n                       \n            \n  \n  \n\treturn 0;\n\n#endif\n\n}",
    "func_graph_path": "the-tcpdump-group/libpcap/437b273761adedcbd880f714bfa44afeec186a31/daemon.c/vul/after/0.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -66,6 +66,7 @@\n #ifdef HAVE_GETSPNAM\n \tstruct spwd *usersp;\n #endif\n+\tchar *crypt_password;\n \n \t// This call is needed to get the uid\n \tif ((user = getpwnam(username)) == NULL)\n@@ -96,7 +97,13 @@\n \tuser_password = user->pw_passwd;\n #endif\n \n-\tif (strcmp(user_password, (char *) crypt(password, user_password)) != 0)\n+\tcrypt_password = crypt(password, user_password);\n+\tif (crypt_password == NULL)\n+\t{\n+\t\tpcap_snprintf(errbuf, PCAP_ERRBUF_SIZE, \"Authentication failed\");\n+\t\treturn -1;\n+\t}\n+\tif (strcmp(user_password, crypt_password) != 0)\n \t{\n \t\tpcap_snprintf(errbuf, PCAP_ERRBUF_SIZE, \"Authentication failed: user name or password incorrect\");\n \t\treturn -1;",
    "diff_line_info": {
        "deleted_lines": [
            "\tif (strcmp(user_password, (char *) crypt(password, user_password)) != 0)"
        ],
        "added_lines": [
            "\tchar *crypt_password;",
            "\tcrypt_password = crypt(password, user_password);",
            "\tif (crypt_password == NULL)",
            "\t{",
            "\t\tpcap_snprintf(errbuf, PCAP_ERRBUF_SIZE, \"Authentication failed\");",
            "\t\treturn -1;",
            "\t}",
            "\tif (strcmp(user_password, crypt_password) != 0)"
        ]
    },
    "is_vul": true,
    "pr_url": null,
    "description": "no more info"
}