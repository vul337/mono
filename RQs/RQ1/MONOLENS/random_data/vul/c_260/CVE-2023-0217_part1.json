{
    "cve_id": "CVE-2023-0217",
    "cwe_ids": [
        "CWE-476"
    ],
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
    "cvss_is_v3": true,
    "repo_name": "openssl",
    "commit_msg": "\nFix NULL deference when validating FFC public key.\n\nFixes CVE-2023-0217\n\nWhen attempting to do a BN_Copy of params->p there was no NULL check.\nSince BN_copy does not check for NULL this is a NULL reference.\n\nAs an aside BN_cmp() does do a NULL check, so there are other checks\nthat fail because a NULL is passed. A more general check for NULL params\nhas been added for both FFC public and private key validation instead.\n\nReviewed-by: Matt Caswell <matt@openssl.org>\nReviewed-by: Paul Dale <pauli@openssl.org>\nReviewed-by: Tomas Mraz <tomas@openssl.org>\n",
    "commit_hash": "23985bac83fd50c8e29431009302b5442f985096",
    "git_url": "https://git.openssl.org/gitweb/?p=openssl.git;a=commit;h=23985bac83fd50c8e29431009302b5442f985096",
    "file_path": "crypto/ffc/ffc_key_validate.c",
    "func_name": "ossl_ffc_validate_public_key_partial",
    "func_before": "int ossl_ffc_validate_public_key_partial(const FFC_PARAMS *params,\n                                         const BIGNUM *pub_key, int *ret)\n{\n    int ok = 0;\n    BIGNUM *tmp = NULL;\n    BN_CTX *ctx = NULL;\n\n    *ret = 0;\n    ctx = BN_CTX_new_ex(NULL);\n    if (ctx == NULL)\n        goto err;\n\n    BN_CTX_start(ctx);\n    tmp = BN_CTX_get(ctx);\n    /* Step(1): Verify pub_key >= 2 */\n    if (tmp == NULL\n        || !BN_set_word(tmp, 1))\n        goto err;\n    if (BN_cmp(pub_key, tmp) <= 0) {\n        *ret |= FFC_ERROR_PUBKEY_TOO_SMALL;\n        goto err;\n    }\n    /* Step(1): Verify pub_key <=  p-2 */\n    if (BN_copy(tmp, params->p) == NULL\n        || !BN_sub_word(tmp, 1))\n        goto err;\n    if (BN_cmp(pub_key, tmp) >= 0) {\n        *ret |= FFC_ERROR_PUBKEY_TOO_LARGE;\n        goto err;\n    }\n    ok = 1;\n err:\n    if (ctx != NULL) {\n        BN_CTX_end(ctx);\n        BN_CTX_free(ctx);\n    }\n    return ok;\n}",
    "abstract_func_before": "int ossl_ffc_validate_public_key_partial(const FFC_PARAMS *VAR_0,\n                                         const BIGNUM *VAR_1, int *VAR_2)\n{\n    int VAR_3 = 0;\n    BIGNUM *VAR_4 = NULL;\n    BN_CTX *VAR_5 = NULL;\n\n    *VAR_2 = 0;\n    VAR_5 = BN_CTX_new_ex(NULL);\n    if (VAR_5 == NULL)\n        goto err;\n\n    BN_CTX_start(VAR_5);\n    VAR_4 = BN_CTX_get(VAR_5);\n    /* COMMENT_0 */\n    if (VAR_4 == NULL\n        || !BN_set_word(VAR_4, 1))\n        goto err;\n    if (BN_cmp(VAR_1, VAR_4) <= 0) {\n        *VAR_2 |= VAR_6;\n        goto err;\n    }\n    /* COMMENT_1 */\n    if (BN_copy(VAR_4, VAR_0->p) == NULL\n        || !BN_sub_word(VAR_4, 1))\n        goto err;\n    if (BN_cmp(VAR_1, VAR_4) >= 0) {\n        *VAR_2 |= VAR_7;\n        goto err;\n    }\n    VAR_3 = 1;\n err:\n    if (VAR_5 != NULL) {\n        BN_CTX_end(VAR_5);\n        BN_CTX_free(VAR_5);\n    }\n    return VAR_3;\n}",
    "func_graph_path_before": "openssl/23985bac83fd50c8e29431009302b5442f985096/ffc_key_validate.c/vul/before/0.json",
    "func": "int ossl_ffc_validate_public_key_partial(const FFC_PARAMS *params,\n                                         const BIGNUM *pub_key, int *ret)\n{\n    int ok = 0;\n    BIGNUM *tmp = NULL;\n    BN_CTX *ctx = NULL;\n\n    *ret = 0;\n    if (params == NULL || pub_key == NULL || params->p == NULL) {\n        *ret = FFC_ERROR_PASSED_NULL_PARAM;\n        return 0;\n    }\n\n    ctx = BN_CTX_new_ex(NULL);\n    if (ctx == NULL)\n        goto err;\n\n    BN_CTX_start(ctx);\n    tmp = BN_CTX_get(ctx);\n    /* Step(1): Verify pub_key >= 2 */\n    if (tmp == NULL\n        || !BN_set_word(tmp, 1))\n        goto err;\n    if (BN_cmp(pub_key, tmp) <= 0) {\n        *ret |= FFC_ERROR_PUBKEY_TOO_SMALL;\n        goto err;\n    }\n    /* Step(1): Verify pub_key <=  p-2 */\n    if (BN_copy(tmp, params->p) == NULL\n        || !BN_sub_word(tmp, 1))\n        goto err;\n    if (BN_cmp(pub_key, tmp) >= 0) {\n        *ret |= FFC_ERROR_PUBKEY_TOO_LARGE;\n        goto err;\n    }\n    ok = 1;\n err:\n    if (ctx != NULL) {\n        BN_CTX_end(ctx);\n        BN_CTX_free(ctx);\n    }\n    return ok;\n}",
    "abstract_func": "int ossl_ffc_validate_public_key_partial(const FFC_PARAMS *VAR_0,\n                                         const BIGNUM *VAR_1, int *VAR_2)\n{\n    int VAR_3 = 0;\n    BIGNUM *VAR_4 = NULL;\n    BN_CTX *VAR_5 = NULL;\n\n    *VAR_2 = 0;\n    if (VAR_0 == NULL || VAR_1 == NULL || VAR_0->p == NULL) {\n        *VAR_2 = VAR_6;\n        return 0;\n    }\n\n    VAR_5 = BN_CTX_new_ex(NULL);\n    if (VAR_5 == NULL)\n        goto err;\n\n    BN_CTX_start(VAR_5);\n    VAR_4 = BN_CTX_get(VAR_5);\n    /* COMMENT_0 */\n    if (VAR_4 == NULL\n        || !BN_set_word(VAR_4, 1))\n        goto err;\n    if (BN_cmp(VAR_1, VAR_4) <= 0) {\n        *VAR_2 |= VAR_7;\n        goto err;\n    }\n    /* COMMENT_1 */\n    if (BN_copy(VAR_4, VAR_0->p) == NULL\n        || !BN_sub_word(VAR_4, 1))\n        goto err;\n    if (BN_cmp(VAR_1, VAR_4) >= 0) {\n        *VAR_2 |= VAR_8;\n        goto err;\n    }\n    VAR_3 = 1;\n err:\n    if (VAR_5 != NULL) {\n        BN_CTX_end(VAR_5);\n        BN_CTX_free(VAR_5);\n    }\n    return VAR_3;\n}",
    "func_graph_path": "openssl/23985bac83fd50c8e29431009302b5442f985096/ffc_key_validate.c/vul/after/0.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -6,6 +6,11 @@\n     BN_CTX *ctx = NULL;\n \n     *ret = 0;\n+    if (params == NULL || pub_key == NULL || params->p == NULL) {\n+        *ret = FFC_ERROR_PASSED_NULL_PARAM;\n+        return 0;\n+    }\n+\n     ctx = BN_CTX_new_ex(NULL);\n     if (ctx == NULL)\n         goto err;",
    "diff_line_info": {
        "deleted_lines": [],
        "added_lines": [
            "    if (params == NULL || pub_key == NULL || params->p == NULL) {",
            "        *ret = FFC_ERROR_PASSED_NULL_PARAM;",
            "        return 0;",
            "    }",
            ""
        ]
    },
    "is_vul": true,
    "pr_url": null,
    "description": "no more info"
}