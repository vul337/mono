{
    "cve_id": "CVE-2016-4078",
    "cwe_ids": [
        "CWE-20"
    ],
    "cvss_vector": "AV:N/AC:M/Au:N/C:N/I:N/A:P",
    "cvss_is_v3": false,
    "repo_name": "wireshark",
    "commit_msg": "ieee80211: fix deep recursion\n\nRestrict the list of possible (sub)elements to avoid deep recursion.\n\nBug: 11824\nBug: 12187\nChange-Id: I12deb9956c6ba9b6113cf45da4ee919e33ff8567\nReviewed-on: https://code.wireshark.org/review/14114\nReviewed-by: Peter Wu <peter@lekensteyn.nl>\nPetri-Dish: Peter Wu <peter@lekensteyn.nl>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Michael Mann <mmann78@netscape.net>",
    "commit_hash": "e2745d741ec11f395d41c0aafa24df9dec136399",
    "git_url": "https://github.com/wireshark/wireshark/commit/e2745d741ec11f395d41c0aafa24df9dec136399",
    "file_path": "epan/dissectors/packet-ieee80211.c",
    "func_name": "dissect_channel_switch_wrapper",
    "func_before": "static int\ndissect_channel_switch_wrapper(packet_info *pinfo, proto_tree *tree, tvbuff_t *tvb, int offset,\n                         guint32 tag_len)\n{\n  int tmp_sublen;\n\n  /*\n  Decode three subelement in IE-196(Channel Switch Wrapper element):\n        (1) New Country subelement\n        (2) Wide Bandwidth Channel Switch subelement\n        (3) New VHT Transmit Power Envelope subelement\n  */\n  while (tag_len > 0){\n        tmp_sublen = tvb_get_guint8(tvb, offset + 1);\n        if(add_tagged_field(pinfo, tree, tvb, offset, 0) == 0){\n          break;\n        }\n        tag_len -= (tmp_sublen + 2);\n        offset += (tmp_sublen + 2);\n  }\n  return offset;\n}",
    "abstract_func_before": "static int\ndissect_channel_switch_wrapper(packet_info *VAR_0, proto_tree *VAR_1, tvbuff_t *VAR_2, int VAR_3,\n                         guint32 VAR_4)\n{\n  int VAR_5;\n\n  /* COMMENT_0 */\n                                                                    \n                                  \n                                                    \n                                                      \n    \n  while (VAR_4 > 0){\n        VAR_5 = tvb_get_guint8(VAR_2, VAR_3 + 1);\n        if(add_tagged_field(VAR_0, VAR_1, VAR_2, VAR_3, 0) == 0){\n          break;\n        }\n        VAR_4 -= (VAR_5 + 2);\n        VAR_3 += (VAR_5 + 2);\n  }\n  return VAR_3;\n}",
    "func_graph_path_before": "wireshark/e2745d741ec11f395d41c0aafa24df9dec136399/packet-ieee80211.c/vul/before/0.json",
    "func": "static int\ndissect_channel_switch_wrapper(packet_info *pinfo, proto_tree *tree, tvbuff_t *tvb, int offset,\n                         guint32 tag_len)\n{\n  int tmp_sublen;\n  const guint8 ids[] = { TAG_COUNTRY_INFO, TAG_WIDE_BW_CHANNEL_SWITCH,\n    TAG_VHT_TX_PWR_ENVELOPE };\n\n  /*\n  Decode three subelement in IE-196(Channel Switch Wrapper element):\n        (1) New Country subelement\n        (2) Wide Bandwidth Channel Switch subelement\n        (3) New VHT Transmit Power Envelope subelement\n  */\n  while (tag_len > 0){\n    tmp_sublen = tvb_get_guint8(tvb, offset + 1);\n    if(add_tagged_field(pinfo, tree, tvb, offset, 0, ids, G_N_ELEMENTS(ids)) == 0){\n      break;\n    }\n    tag_len -= (tmp_sublen + 2);\n    offset += (tmp_sublen + 2);\n  }\n  return offset;\n}",
    "abstract_func": "static int\ndissect_channel_switch_wrapper(packet_info *VAR_0, proto_tree *VAR_1, tvbuff_t *VAR_2, int VAR_3,\n                         guint32 VAR_4)\n{\n  int VAR_5;\n  const guint8 VAR_6[] = { VAR_7, VAR_8,\n    VAR_9 };\n\n  /* COMMENT_0 */\n                                                                    \n                                  \n                                                    \n                                                      \n    \n  while (VAR_4 > 0){\n    VAR_5 = tvb_get_guint8(VAR_2, VAR_3 + 1);\n    if(add_tagged_field(VAR_0, VAR_1, VAR_2, VAR_3, 0, VAR_6, G_N_ELEMENTS(VAR_6)) == 0){\n      break;\n    }\n    VAR_4 -= (VAR_5 + 2);\n    VAR_3 += (VAR_5 + 2);\n  }\n  return VAR_3;\n}",
    "func_graph_path": "wireshark/e2745d741ec11f395d41c0aafa24df9dec136399/packet-ieee80211.c/vul/after/0.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -3,6 +3,8 @@\n                          guint32 tag_len)\n {\n   int tmp_sublen;\n+  const guint8 ids[] = { TAG_COUNTRY_INFO, TAG_WIDE_BW_CHANNEL_SWITCH,\n+    TAG_VHT_TX_PWR_ENVELOPE };\n \n   /*\n   Decode three subelement in IE-196(Channel Switch Wrapper element):\n@@ -11,12 +13,12 @@\n         (3) New VHT Transmit Power Envelope subelement\n   */\n   while (tag_len > 0){\n-        tmp_sublen = tvb_get_guint8(tvb, offset + 1);\n-        if(add_tagged_field(pinfo, tree, tvb, offset, 0) == 0){\n-          break;\n-        }\n-        tag_len -= (tmp_sublen + 2);\n-        offset += (tmp_sublen + 2);\n+    tmp_sublen = tvb_get_guint8(tvb, offset + 1);\n+    if(add_tagged_field(pinfo, tree, tvb, offset, 0, ids, G_N_ELEMENTS(ids)) == 0){\n+      break;\n+    }\n+    tag_len -= (tmp_sublen + 2);\n+    offset += (tmp_sublen + 2);\n   }\n   return offset;\n }",
    "diff_line_info": {
        "deleted_lines": [
            "        tmp_sublen = tvb_get_guint8(tvb, offset + 1);",
            "        if(add_tagged_field(pinfo, tree, tvb, offset, 0) == 0){",
            "          break;",
            "        }",
            "        tag_len -= (tmp_sublen + 2);",
            "        offset += (tmp_sublen + 2);"
        ],
        "added_lines": [
            "  const guint8 ids[] = { TAG_COUNTRY_INFO, TAG_WIDE_BW_CHANNEL_SWITCH,",
            "    TAG_VHT_TX_PWR_ENVELOPE };",
            "    tmp_sublen = tvb_get_guint8(tvb, offset + 1);",
            "    if(add_tagged_field(pinfo, tree, tvb, offset, 0, ids, G_N_ELEMENTS(ids)) == 0){",
            "      break;",
            "    }",
            "    tag_len -= (tmp_sublen + 2);",
            "    offset += (tmp_sublen + 2);"
        ]
    },
    "is_vul": true,
    "pr_url": null,
    "description": "no more info"
}