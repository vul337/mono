{
    "cve_id": "CVE-2022-41985",
    "cwe_ids": [
        "CWE-287"
    ],
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
    "cvss_is_v3": true,
    "repo_name": "weston-embedded/uC-FTPs",
    "commit_msg": "Patched DoS vulnerability CVE-2022-41985 / TALOS-2022-1680. Fixed bug\nwithin FTPs_Init() that could cause an invalid socket ID to be pased to\nthe FTPs Server Task.",
    "commit_hash": "83393f6129fc5a77cbdf287c6fd9745cb53d8d04",
    "git_url": "https://github.com/weston-embedded/uC-FTPs/commit/83393f6129fc5a77cbdf287c6fd9745cb53d8d04",
    "file_path": "Source/ftp-s.c",
    "func_name": "FTPs_CtrlTask",
    "func_before": "void  FTPs_CtrlTask (void  *p_arg)\n{\n    FTPs_SESSION_STRUCT   ftp_session;\n    NET_SOCK_ID          *p_sock_id;\n\n    CPU_INT32U            net_buf_len;\n    CPU_CHAR             *p_net_buf;\n    CPU_CHAR             *p_net_buf2;\n    CPU_CHAR             *p_cmd;\n\n    NET_ERR               net_err;\n    CPU_INT32S            pkt_len;\n    CPU_INT16S            cmp_val;\n    CPU_INT32U            i;\n\n\n    FTPs_CtrlTasks++;\n\n    ftp_session.DtpSockAddr.AddrFamily = NET_SOCK_ADDR_FAMILY_IP_V4;\n    ftp_session.DtpSockAddr.Addr       = NET_UTIL_HOST_TO_NET_32(NET_IPv4_ADDR_ANY);\n\n    if (FTPs_SecureCfgPtr != DEF_NULL) {                        /* Set the port according to the secure mode cfg.       */\n        ftp_session.DtpSockAddr.Port       = NET_UTIL_HOST_TO_NET_16(FTPs_CFG_DATA_IPPORT_SECURE);\n    } else {\n        ftp_session.DtpSockAddr.Port       = NET_UTIL_HOST_TO_NET_16(FTPs_CFG_DATA_IPPORT);\n    }\n\n    p_sock_id                          = (NET_SOCK_ID *)p_arg;\n    ftp_session.CtrlSockID             = *p_sock_id;\n    ftp_session.CtrlState              =  FTPs_STATE_LOGOUT;\n    ftp_session.CtrlCmd                =  FTP_CMD_NOOP;\n\n    ftp_session.DtpSockID              = -1;\n    ftp_session.DtpPasv                = DEF_NO;\n\n                                                                /* Defaults specified in RFC959.                        */\n    ftp_session.DtpMode                = FTP_MODE_STREAM;\n    ftp_session.DtpType                = FTP_TYPE_ASCII;\n    ftp_session.DtpForm                = FTP_FORM_NONPRINT;\n    ftp_session.DtpStru                = FTP_STRU_FILE;\n\n    ftp_session.DtpCmd                 = FTP_CMD_NOOP;\n\n    ftp_session.DtpOffset              = 0;\n\n    FTPs_SendReply(ftp_session.CtrlSockID, FTP_REPLY_SERVERREADY, (CPU_CHAR *)0);\n\n    while (DEF_TRUE) {\n                                                                /* Receive data until NEWLINE and replace it by a NULL. */\n        p_net_buf   = FTPs_NetBufCtrlTaskPtr;\n        net_buf_len = FTPs_NET_BUF_LEN;\n\n        NetSock_CfgTimeoutRxQ_Set((NET_SOCK_ID  ) ftp_session.CtrlSockID,\n                                  (CPU_INT32U   ) FTPs_CFG_CTRL_MAX_RX_TIMEOUT_MS,\n                                  (NET_ERR     *)&net_err);\n\n        while (DEF_TRUE) {\n            pkt_len = NetSock_RxData( ftp_session.CtrlSockID,\n                                      p_net_buf,\n                                      net_buf_len,\n                                      NET_SOCK_FLAG_NONE,\n                                     &net_err);\n            if ((net_err != NET_SOCK_ERR_NONE) &&\n                (net_err != NET_SOCK_ERR_RX_Q_EMPTY)) {\n                FTPs_TRACE_DBG((\"FTPs NetSock_RxData() failed: error #%u, line #%u.\\n\", (unsigned int)net_err, (unsigned int)__LINE__));\n                break;\n            }\n            if (net_err == NET_SOCK_ERR_RX_Q_EMPTY) {\n                FTPs_TRACE_DBG((\"FTPs NetSock_RxData() timeout, line #%u.\\n\", (unsigned int)__LINE__));\n                break;\n            }\n\n            p_net_buf2 = (CPU_CHAR *)Str_Char_N(p_net_buf, pkt_len, '\\n');\n            if ( p_net_buf2  != (CPU_CHAR *)0) {\n                *p_net_buf2   = (CPU_CHAR)0;\n                 net_buf_len  = p_net_buf2 - FTPs_NetBufCtrlTaskPtr;\n                 break;\n            }\n\n            net_buf_len -= pkt_len;\n            p_net_buf   += pkt_len;\n        }\n\n        if (net_err != NET_SOCK_ERR_NONE) {\n            FTPs_StopPasvMode(&ftp_session);\n            FTPs_SendReply(ftp_session.CtrlSockID, FTP_REPLY_SERVERCLOSING, (CPU_CHAR *)0);\n            break;\n        }\n\n                                                                /* Process the received line.                           */\n                                                                /*                                                      */\n                                                                /* The line will be a command of the format             */\n                                                                /* <COMMAND> [<ARG1>] [...]                             */\n                                                                /*                                                      */\n                                                                /* Where:                                               */\n                                                                /* COMMAND is a 3 or 4 letter command.                  */\n                                                                /* ARG1 is command specific.                            */\n                                                                /* ARG2 is command specific.                            */\n                                                                /* ...                                                  */\n\n                                                                /* Find the command.                                    */\n        FTPs_TRACE_INFO((\"FTPs RX: %s\\n\", FTPs_NetBufCtrlTaskPtr));\n\n        p_net_buf = FTPs_NetBufCtrlTaskPtr;\n        p_cmd     = FTPs_FindArg(&p_net_buf);\n        if (*p_cmd == (CPU_CHAR)0) {\n            continue;\n        }\n\n                                                                /* Convert command to uppercase.                        */\n        p_net_buf2 = p_cmd;\n        while (*p_net_buf2 != (CPU_CHAR)0) {\n            *p_net_buf2 = ASCII_ToUpper(*p_net_buf2);\n             p_net_buf2++;\n        }\n\n                                                                /* Find the command code.                               */\n        i = 0;\n        while (FTPs_Cmd[i].CmdCode != FTP_CMD_MAX) {\n            cmp_val = Str_Cmp((CPU_CHAR *)p_cmd,\n                              (CPU_CHAR *)FTPs_Cmd[i].CmdStr);\n            if (cmp_val == 0) {\n                ftp_session.CtrlCmd = FTPs_Cmd[i].CmdCode;\n                break;\n            }\n            i++;\n        }\n        if (FTPs_Cmd[i].CmdCode == FTP_CMD_MAX) {\n            FTPs_SendReply(ftp_session.CtrlSockID, FTP_REPLY_CMDNOSUPPORT, (CPU_CHAR *)0);\n            continue;\n        }\n\n                                                                /* Determine if the command entered is compatible with  */\n                                                                /* the current state (context check).                   */\n        if (FTPs_Cmd[ftp_session.CtrlCmd].CmdCntxt[ftp_session.CtrlState] == DEF_OFF) {\n            if (ftp_session.CtrlState == FTPs_STATE_LOGOUT) {\n                FTPs_SendReply(ftp_session.CtrlSockID, FTP_REPLY_NOTLOGGEDIN, (CPU_CHAR *)0);\n            } else {\n                FTPs_SendReply(ftp_session.CtrlSockID, FTP_REPLY_CMDBADSEQUENCE, (CPU_CHAR *)0);\n                ftp_session.CtrlState = FTPs_STATE_LOGIN;\n            }\n            continue;\n        }\n\n        ftp_session.CtrlCmdArgs = p_net_buf;\n        FTPs_ProcessCtrlCmd(&ftp_session);\n\n        if (ftp_session.CtrlCmd == FTP_CMD_QUIT) {\n            break;\n        }\n    }\n\n    FTPs_TRACE_INFO((\"FTPs CLOSE CTRL socket.\\n\"));\n    NetSock_Close(ftp_session.CtrlSockID, &net_err);\n\n    FTPs_TRACE_INFO((\"FTPs DELETE CTRL task.\\n\"));\n    FTPs_CtrlTasks--;\n    FTPs_OS_TaskDel();\n}",
    "abstract_func_before": "void  FTPs_CtrlTask (void  *VAR_0)\n{\n    FTPs_SESSION_STRUCT   VAR_1;\n    NET_SOCK_ID          *VAR_2;\n\n    CPU_INT32U            VAR_3;\n    CPU_CHAR             *VAR_4;\n    CPU_CHAR             *VAR_5;\n    CPU_CHAR             *VAR_6;\n\n    NET_ERR               VAR_7;\n    CPU_INT32S            VAR_8;\n    CPU_INT16S            VAR_9;\n    CPU_INT32U            VAR_10;\n\n\n    VAR_11++;\n\n    VAR_1.DtpSockAddr.AddrFamily = VAR_12;\n    VAR_1.DtpSockAddr.Addr       = NET_UTIL_HOST_TO_NET_32(VAR_13);\n\n    if (VAR_14 != VAR_15) {                        /* COMMENT_0 */\n        VAR_1.DtpSockAddr.Port       = NET_UTIL_HOST_TO_NET_16(VAR_16);\n    } else {\n        VAR_1.DtpSockAddr.Port       = NET_UTIL_HOST_TO_NET_16(VAR_17);\n    }\n\n    VAR_2                          = (NET_SOCK_ID *)VAR_0;\n    VAR_1.CtrlSockID             = *VAR_2;\n    VAR_1.CtrlState              =  VAR_18;\n    VAR_1.CtrlCmd                =  VAR_19;\n\n    VAR_1.DtpSockID              = -1;\n    VAR_1.DtpPasv                = VAR_20;\n\n                                                                /* COMMENT_1 */\n    VAR_1.DtpMode                = VAR_21;\n    VAR_1.DtpType                = VAR_22;\n    VAR_1.DtpForm                = VAR_23;\n    VAR_1.DtpStru                = VAR_24;\n\n    VAR_1.DtpCmd                 = VAR_19;\n\n    VAR_1.DtpOffset              = 0;\n\n    FTPs_SendReply(VAR_1.CtrlSockID, VAR_25, (CPU_CHAR *)0);\n\n    while (VAR_26) {\n                                                                /* COMMENT_2 */\n        VAR_4   = VAR_27;\n        VAR_3 = VAR_28;\n\n        NetSock_CfgTimeoutRxQ_Set((NET_SOCK_ID  ) VAR_1.CtrlSockID,\n                                  (CPU_INT32U   ) VAR_29,\n                                  (NET_ERR     *)&VAR_7);\n\n        while (VAR_26) {\n            VAR_8 = NetSock_RxData( VAR_1.CtrlSockID,\n                                      VAR_4,\n                                      VAR_3,\n                                      VAR_30,\n                                     &VAR_7);\n            if ((VAR_7 != VAR_31) &&\n                (VAR_7 != VAR_32)) {\n                FTPs_TRACE_DBG((\"FTPs NetSock_RxData() failed: error #%u, line #%u.\\n\", (unsigned int)VAR_7, (unsigned int)VAR_33));\n                break;\n            }\n            if (VAR_7 == VAR_32) {\n                FTPs_TRACE_DBG((\"FTPs NetSock_RxData() timeout, line #%u.\\n\", (unsigned int)VAR_33));\n                break;\n            }\n\n            VAR_5 = (CPU_CHAR *)Str_Char_N(VAR_4, VAR_8, '\\n');\n            if ( VAR_5  != (CPU_CHAR *)0) {\n                *VAR_5   = (CPU_CHAR)0;\n                 VAR_3  = VAR_5 - VAR_27;\n                 break;\n            }\n\n            VAR_3 -= VAR_8;\n            VAR_4   += VAR_8;\n        }\n\n        if (VAR_7 != VAR_31) {\n            FTPs_StopPasvMode(&VAR_1);\n            FTPs_SendReply(VAR_1.CtrlSockID, VAR_34, (CPU_CHAR *)0);\n            break;\n        }\n\n                                                                /* COMMENT_3 */\n                                                                /* COMMENT_4 */\n                                                                /* COMMENT_5 */\n                                                                /* COMMENT_6 */\n                                                                /* COMMENT_4 */\n                                                                /* COMMENT_7 */\n                                                                /* COMMENT_8 */\n                                                                /* COMMENT_9 */\n                                                                /* COMMENT_10 */\n                                                                /* COMMENT_11 */\n\n                                                                /* COMMENT_12 */\n        FTPs_TRACE_INFO((\"FTPs RX: %s\\n\", VAR_27));\n\n        VAR_4 = VAR_27;\n        VAR_6     = FTPs_FindArg(&VAR_4);\n        if (*VAR_6 == (CPU_CHAR)0) {\n            continue;\n        }\n\n                                                                /* COMMENT_13 */\n        VAR_5 = VAR_6;\n        while (*VAR_5 != (CPU_CHAR)0) {\n            *VAR_5 = ASCII_ToUpper(*VAR_5);\n             VAR_5++;\n        }\n\n                                                                /* COMMENT_14 */\n        VAR_10 = 0;\n        while (VAR_35[VAR_10].CmdCode != VAR_36) {\n            VAR_9 = Str_Cmp((CPU_CHAR *)VAR_6,\n                              (CPU_CHAR *)VAR_35[VAR_10].CmdStr);\n            if (VAR_9 == 0) {\n                VAR_1.CtrlCmd = VAR_35[VAR_10].CmdCode;\n                break;\n            }\n            VAR_10++;\n        }\n        if (VAR_35[VAR_10].CmdCode == VAR_36) {\n            FTPs_SendReply(VAR_1.CtrlSockID, VAR_37, (CPU_CHAR *)0);\n            continue;\n        }\n\n                                                                /* COMMENT_15 */\n                                                                /* COMMENT_16 */\n        if (VAR_35[VAR_1.CtrlCmd].CmdCntxt[VAR_1.CtrlState] == VAR_38) {\n            if (VAR_1.CtrlState == VAR_18) {\n                FTPs_SendReply(VAR_1.CtrlSockID, VAR_39, (CPU_CHAR *)0);\n            } else {\n                FTPs_SendReply(VAR_1.CtrlSockID, VAR_40, (CPU_CHAR *)0);\n                VAR_1.CtrlState = VAR_41;\n            }\n            continue;\n        }\n\n        VAR_1.CtrlCmdArgs = VAR_4;\n        FTPs_ProcessCtrlCmd(&VAR_1);\n\n        if (VAR_1.CtrlCmd == VAR_42) {\n            break;\n        }\n    }\n\n    FTPs_TRACE_INFO((\"FTPs CLOSE CTRL socket.\\n\"));\n    NetSock_Close(VAR_1.CtrlSockID, &VAR_7);\n\n    FTPs_TRACE_INFO((\"FTPs DELETE CTRL task.\\n\"));\n    VAR_11--;\n    FTPs_OS_TaskDel();\n}",
    "func_graph_path_before": "weston-embedded/uC-FTPs/83393f6129fc5a77cbdf287c6fd9745cb53d8d04/ftp-s.c/vul/before/0.json",
    "func": "void  FTPs_CtrlTask (void  *p_arg)\n{\n    FTPs_SESSION_STRUCT   ftp_session;\n    NET_SOCK_ID          *p_sock_id;\n\n    CPU_INT32U            net_buf_len;\n    CPU_CHAR             *p_net_buf;\n    CPU_CHAR             *p_net_buf2;\n    CPU_CHAR             *p_cmd;\n\n    NET_ERR               net_err;\n    CPU_INT32S            pkt_len;\n    CPU_INT16S            cmp_val;\n    CPU_INT32U            i;\n\n\n    FTPs_CtrlTasks++;\n\n    ftp_session.DtpSockAddr.AddrFamily = NET_SOCK_ADDR_FAMILY_IP_V4;\n    ftp_session.DtpSockAddr.Addr       = NET_UTIL_HOST_TO_NET_32(NET_IPv4_ADDR_ANY);\n\n    if (FTPs_SecureCfgPtr != DEF_NULL) {                        /* Set the port according to the secure mode cfg.       */\n        ftp_session.DtpSockAddr.Port       = NET_UTIL_HOST_TO_NET_16(FTPs_CFG_DATA_IPPORT_SECURE);\n    } else {\n        ftp_session.DtpSockAddr.Port       = NET_UTIL_HOST_TO_NET_16(FTPs_CFG_DATA_IPPORT);\n    }\n\n    p_sock_id                          = (NET_SOCK_ID *)p_arg;\n    ftp_session.CtrlSockID             = *p_sock_id;\n    ftp_session.CtrlState              =  FTPs_STATE_LOGOUT;\n    ftp_session.CtrlCmd                =  FTP_CMD_NOOP;\n\n    ftp_session.DtpSockID              = -1;\n    ftp_session.DtpPasv                = DEF_NO;\n\n                                                                /* Defaults specified in RFC959.                        */\n    ftp_session.DtpMode                = FTP_MODE_STREAM;\n    ftp_session.DtpType                = FTP_TYPE_ASCII;\n    ftp_session.DtpForm                = FTP_FORM_NONPRINT;\n    ftp_session.DtpStru                = FTP_STRU_FILE;\n\n    ftp_session.DtpCmd                 = FTP_CMD_NOOP;\n\n    ftp_session.DtpOffset              = 0;\n\n    FTPs_SendReply(ftp_session.CtrlSockID, FTP_REPLY_SERVERREADY, (CPU_CHAR *)0);\n\n    while (DEF_TRUE) {\n                                                                /* Receive data until NEWLINE and replace it by a NULL. */\n        p_net_buf   = FTPs_NetBufCtrlTaskPtr;\n        net_buf_len = FTPs_NET_BUF_LEN;\n\n        NetSock_CfgTimeoutRxQ_Set((NET_SOCK_ID  ) ftp_session.CtrlSockID,\n                                  (CPU_INT32U   ) FTPs_CFG_CTRL_MAX_RX_TIMEOUT_MS,\n                                  (NET_ERR     *)&net_err);\n\n        while (DEF_TRUE) {\n            pkt_len = NetSock_RxData( ftp_session.CtrlSockID,\n                                      p_net_buf,\n                                      net_buf_len,\n                                      NET_SOCK_FLAG_NONE,\n                                     &net_err);\n            if ((net_err != NET_SOCK_ERR_NONE) &&\n                (net_err != NET_SOCK_ERR_RX_Q_EMPTY)) {\n                FTPs_TRACE_DBG((\"FTPs NetSock_RxData() failed: error #%u, line #%u.\\n\", (unsigned int)net_err, (unsigned int)__LINE__));\n                break;\n            }\n            if (net_err == NET_SOCK_ERR_RX_Q_EMPTY) {\n                FTPs_TRACE_DBG((\"FTPs NetSock_RxData() timeout, line #%u.\\n\", (unsigned int)__LINE__));\n                break;\n            }\n\n            p_net_buf2 = (CPU_CHAR *)Str_Char_N(p_net_buf, pkt_len, '\\n');\n            if ( p_net_buf2  != (CPU_CHAR *)0) {\n                *p_net_buf2   = (CPU_CHAR)0;\n                 net_buf_len  = p_net_buf2 - FTPs_NetBufCtrlTaskPtr;\n                 break;\n            }\n\n            net_buf_len -= pkt_len;\n            p_net_buf   += pkt_len;\n        }\n\n        if (net_err != NET_SOCK_ERR_NONE) {\n            FTPs_StopPasvMode(&ftp_session);\n            FTPs_SendReply(ftp_session.CtrlSockID, FTP_REPLY_SERVERCLOSING, (CPU_CHAR *)0);\n            break;\n        }\n\n                                                                /* Process the received line.                           */\n                                                                /*                                                      */\n                                                                /* The line will be a command of the format             */\n                                                                /* <COMMAND> [<ARG1>] [...]                             */\n                                                                /*                                                      */\n                                                                /* Where:                                               */\n                                                                /* COMMAND is a 3 or 4 letter command.                  */\n                                                                /* ARG1 is command specific.                            */\n                                                                /* ARG2 is command specific.                            */\n                                                                /* ...                                                  */\n\n                                                                /* Find the command.                                    */\n        FTPs_TRACE_INFO((\"FTPs RX: %s\\n\", FTPs_NetBufCtrlTaskPtr));\n\n        p_net_buf = FTPs_NetBufCtrlTaskPtr;\n        p_cmd     = FTPs_FindArg(&p_net_buf);\n        if (*p_cmd == (CPU_CHAR)0) {\n            continue;\n        }\n\n                                                                /* Convert command to uppercase.                        */\n        p_net_buf2 = p_cmd;\n        while (*p_net_buf2 != (CPU_CHAR)0) {\n            *p_net_buf2 = ASCII_ToUpper(*p_net_buf2);\n             p_net_buf2++;\n        }\n\n                                                                /* Find the command code.                               */\n        i = 0;\n        while (FTPs_Cmd[i].CmdCode != FTP_CMD_MAX) {\n            cmp_val = Str_Cmp((CPU_CHAR *)p_cmd,\n                              (CPU_CHAR *)FTPs_Cmd[i].CmdStr);\n            if (cmp_val == 0) {\n                ftp_session.CtrlCmd = FTPs_Cmd[i].CmdCode;\n                break;\n            }\n            i++;\n        }\n        if (FTPs_Cmd[i].CmdCode == FTP_CMD_MAX) {\n            FTPs_SendReply(ftp_session.CtrlSockID, FTP_REPLY_CMDNOSUPPORT, (CPU_CHAR *)0);\n            continue;\n        }\n\n                                                                /* Determine if the command entered is compatible with  */\n                                                                /* the current state (context check).                   */\n        if (FTPs_Cmd[ftp_session.CtrlCmd].CmdCntxt[ftp_session.CtrlState] == DEF_OFF) {\n            if (ftp_session.CtrlState != FTPs_STATE_LOGIN) {\n                FTPs_SendReply(ftp_session.CtrlSockID, FTP_REPLY_NOTLOGGEDIN, (CPU_CHAR *)0);\n            } else {\n                FTPs_SendReply(ftp_session.CtrlSockID, FTP_REPLY_CMDBADSEQUENCE, (CPU_CHAR *)0);\n                ftp_session.CtrlState = FTPs_STATE_LOGIN;\n            }\n            continue;\n        }\n\n        ftp_session.CtrlCmdArgs = p_net_buf;\n        FTPs_ProcessCtrlCmd(&ftp_session);\n\n        if (ftp_session.CtrlCmd == FTP_CMD_QUIT) {\n            break;\n        }\n    }\n\n    FTPs_TRACE_INFO((\"FTPs CLOSE CTRL socket.\\n\"));\n    NetSock_Close(ftp_session.CtrlSockID, &net_err);\n\n    FTPs_TRACE_INFO((\"FTPs DELETE CTRL task.\\n\"));\n    FTPs_CtrlTasks--;\n    FTPs_OS_TaskDel();\n}",
    "abstract_func": "void  FTPs_CtrlTask (void  *VAR_0)\n{\n    FTPs_SESSION_STRUCT   VAR_1;\n    NET_SOCK_ID          *VAR_2;\n\n    CPU_INT32U            VAR_3;\n    CPU_CHAR             *VAR_4;\n    CPU_CHAR             *VAR_5;\n    CPU_CHAR             *VAR_6;\n\n    NET_ERR               VAR_7;\n    CPU_INT32S            VAR_8;\n    CPU_INT16S            VAR_9;\n    CPU_INT32U            VAR_10;\n\n\n    VAR_11++;\n\n    VAR_1.DtpSockAddr.AddrFamily = VAR_12;\n    VAR_1.DtpSockAddr.Addr       = NET_UTIL_HOST_TO_NET_32(VAR_13);\n\n    if (VAR_14 != VAR_15) {                        /* COMMENT_0 */\n        VAR_1.DtpSockAddr.Port       = NET_UTIL_HOST_TO_NET_16(VAR_16);\n    } else {\n        VAR_1.DtpSockAddr.Port       = NET_UTIL_HOST_TO_NET_16(VAR_17);\n    }\n\n    VAR_2                          = (NET_SOCK_ID *)VAR_0;\n    VAR_1.CtrlSockID             = *VAR_2;\n    VAR_1.CtrlState              =  VAR_18;\n    VAR_1.CtrlCmd                =  VAR_19;\n\n    VAR_1.DtpSockID              = -1;\n    VAR_1.DtpPasv                = VAR_20;\n\n                                                                /* COMMENT_1 */\n    VAR_1.DtpMode                = VAR_21;\n    VAR_1.DtpType                = VAR_22;\n    VAR_1.DtpForm                = VAR_23;\n    VAR_1.DtpStru                = VAR_24;\n\n    VAR_1.DtpCmd                 = VAR_19;\n\n    VAR_1.DtpOffset              = 0;\n\n    FTPs_SendReply(VAR_1.CtrlSockID, VAR_25, (CPU_CHAR *)0);\n\n    while (VAR_26) {\n                                                                /* COMMENT_2 */\n        VAR_4   = VAR_27;\n        VAR_3 = VAR_28;\n\n        NetSock_CfgTimeoutRxQ_Set((NET_SOCK_ID  ) VAR_1.CtrlSockID,\n                                  (CPU_INT32U   ) VAR_29,\n                                  (NET_ERR     *)&VAR_7);\n\n        while (VAR_26) {\n            VAR_8 = NetSock_RxData( VAR_1.CtrlSockID,\n                                      VAR_4,\n                                      VAR_3,\n                                      VAR_30,\n                                     &VAR_7);\n            if ((VAR_7 != VAR_31) &&\n                (VAR_7 != VAR_32)) {\n                FTPs_TRACE_DBG((\"FTPs NetSock_RxData() failed: error #%u, line #%u.\\n\", (unsigned int)VAR_7, (unsigned int)VAR_33));\n                break;\n            }\n            if (VAR_7 == VAR_32) {\n                FTPs_TRACE_DBG((\"FTPs NetSock_RxData() timeout, line #%u.\\n\", (unsigned int)VAR_33));\n                break;\n            }\n\n            VAR_5 = (CPU_CHAR *)Str_Char_N(VAR_4, VAR_8, '\\n');\n            if ( VAR_5  != (CPU_CHAR *)0) {\n                *VAR_5   = (CPU_CHAR)0;\n                 VAR_3  = VAR_5 - VAR_27;\n                 break;\n            }\n\n            VAR_3 -= VAR_8;\n            VAR_4   += VAR_8;\n        }\n\n        if (VAR_7 != VAR_31) {\n            FTPs_StopPasvMode(&VAR_1);\n            FTPs_SendReply(VAR_1.CtrlSockID, VAR_34, (CPU_CHAR *)0);\n            break;\n        }\n\n                                                                /* COMMENT_3 */\n                                                                /* COMMENT_4 */\n                                                                /* COMMENT_5 */\n                                                                /* COMMENT_6 */\n                                                                /* COMMENT_4 */\n                                                                /* COMMENT_7 */\n                                                                /* COMMENT_8 */\n                                                                /* COMMENT_9 */\n                                                                /* COMMENT_10 */\n                                                                /* COMMENT_11 */\n\n                                                                /* COMMENT_12 */\n        FTPs_TRACE_INFO((\"FTPs RX: %s\\n\", VAR_27));\n\n        VAR_4 = VAR_27;\n        VAR_6     = FTPs_FindArg(&VAR_4);\n        if (*VAR_6 == (CPU_CHAR)0) {\n            continue;\n        }\n\n                                                                /* COMMENT_13 */\n        VAR_5 = VAR_6;\n        while (*VAR_5 != (CPU_CHAR)0) {\n            *VAR_5 = ASCII_ToUpper(*VAR_5);\n             VAR_5++;\n        }\n\n                                                                /* COMMENT_14 */\n        VAR_10 = 0;\n        while (VAR_35[VAR_10].CmdCode != VAR_36) {\n            VAR_9 = Str_Cmp((CPU_CHAR *)VAR_6,\n                              (CPU_CHAR *)VAR_35[VAR_10].CmdStr);\n            if (VAR_9 == 0) {\n                VAR_1.CtrlCmd = VAR_35[VAR_10].CmdCode;\n                break;\n            }\n            VAR_10++;\n        }\n        if (VAR_35[VAR_10].CmdCode == VAR_36) {\n            FTPs_SendReply(VAR_1.CtrlSockID, VAR_37, (CPU_CHAR *)0);\n            continue;\n        }\n\n                                                                /* COMMENT_15 */\n                                                                /* COMMENT_16 */\n        if (VAR_35[VAR_1.CtrlCmd].CmdCntxt[VAR_1.CtrlState] == VAR_38) {\n            if (VAR_1.CtrlState != VAR_39) {\n                FTPs_SendReply(VAR_1.CtrlSockID, VAR_40, (CPU_CHAR *)0);\n            } else {\n                FTPs_SendReply(VAR_1.CtrlSockID, VAR_41, (CPU_CHAR *)0);\n                VAR_1.CtrlState = VAR_39;\n            }\n            continue;\n        }\n\n        VAR_1.CtrlCmdArgs = VAR_4;\n        FTPs_ProcessCtrlCmd(&VAR_1);\n\n        if (VAR_1.CtrlCmd == VAR_42) {\n            break;\n        }\n    }\n\n    FTPs_TRACE_INFO((\"FTPs CLOSE CTRL socket.\\n\"));\n    NetSock_Close(VAR_1.CtrlSockID, &VAR_7);\n\n    FTPs_TRACE_INFO((\"FTPs DELETE CTRL task.\\n\"));\n    VAR_11--;\n    FTPs_OS_TaskDel();\n}",
    "func_graph_path": "weston-embedded/uC-FTPs/83393f6129fc5a77cbdf287c6fd9745cb53d8d04/ftp-s.c/vul/after/0.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -133,7 +133,7 @@\n                                                                 /* Determine if the command entered is compatible with  */\n                                                                 /* the current state (context check).                   */\n         if (FTPs_Cmd[ftp_session.CtrlCmd].CmdCntxt[ftp_session.CtrlState] == DEF_OFF) {\n-            if (ftp_session.CtrlState == FTPs_STATE_LOGOUT) {\n+            if (ftp_session.CtrlState != FTPs_STATE_LOGIN) {\n                 FTPs_SendReply(ftp_session.CtrlSockID, FTP_REPLY_NOTLOGGEDIN, (CPU_CHAR *)0);\n             } else {\n                 FTPs_SendReply(ftp_session.CtrlSockID, FTP_REPLY_CMDBADSEQUENCE, (CPU_CHAR *)0);",
    "diff_line_info": {
        "deleted_lines": [
            "            if (ftp_session.CtrlState == FTPs_STATE_LOGOUT) {"
        ],
        "added_lines": [
            "            if (ftp_session.CtrlState != FTPs_STATE_LOGIN) {"
        ]
    },
    "is_vul": true,
    "pr_url": "https://github.com/weston-embedded/uC-FTPs/pull/1",
    "description": "Reported by Cisco Talos."
}