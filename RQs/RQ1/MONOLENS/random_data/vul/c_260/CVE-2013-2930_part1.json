{
    "cve_id": "CVE-2013-2930",
    "cwe_ids": [
        "CWE-264"
    ],
    "cvss_vector": "AV:L/AC:L/Au:N/C:P/I:P/A:N",
    "cvss_is_v3": false,
    "repo_name": "torvalds/linux",
    "commit_msg": "perf/ftrace: Fix paranoid level for enabling function tracer\n\nThe current default perf paranoid level is \"1\" which has\n\"perf_paranoid_kernel()\" return false, and giving any operations that\nuse it, access to normal users. Unfortunately, this includes function\ntracing and normal users should not be allowed to enable function\ntracing by default.\n\nThe proper level is defined at \"-1\" (full perf access), which\n\"perf_paranoid_tracepoint_raw()\" will only give access to. Use that\ncheck instead for enabling function tracing.\n\nReported-by: Dave Jones <davej@redhat.com>\nReported-by: Vince Weaver <vincent.weaver@maine.edu>\nTested-by: Vince Weaver <vincent.weaver@maine.edu>\nCc: Peter Zijlstra <peterz@infradead.org>\nCc: Ingo Molnar <mingo@kernel.org>\nCc: Jiri Olsa <jolsa@redhat.com>\nCc: Frederic Weisbecker <fweisbec@gmail.com>\nCc: stable@vger.kernel.org # 3.4+\nCVE: CVE-2013-2930\nFixes: ced39002f5ea (\"ftrace, perf: Add support to use function tracepoint in perf\")\nSigned-off-by: Steven Rostedt <rostedt@goodmis.org>",
    "commit_hash": "12ae030d54ef250706da5642fc7697cc60ad0df7",
    "git_url": "https://github.com/torvalds/linux/commit/12ae030d54ef250706da5642fc7697cc60ad0df7",
    "file_path": "kernel/trace/trace_event_perf.c",
    "func_name": "perf_trace_event_perm",
    "func_before": "static int perf_trace_event_perm(struct ftrace_event_call *tp_event,\n\t\t\t\t struct perf_event *p_event)\n{\n\t/* The ftrace function trace is allowed only for root. */\n\tif (ftrace_event_is_function(tp_event) &&\n\t    perf_paranoid_kernel() && !capable(CAP_SYS_ADMIN))\n\t\treturn -EPERM;\n\n\t/* No tracing, just counting, so no obvious leak */\n\tif (!(p_event->attr.sample_type & PERF_SAMPLE_RAW))\n\t\treturn 0;\n\n\t/* Some events are ok to be traced by non-root users... */\n\tif (p_event->attach_state == PERF_ATTACH_TASK) {\n\t\tif (tp_event->flags & TRACE_EVENT_FL_CAP_ANY)\n\t\t\treturn 0;\n\t}\n\n\t/*\n\t * ...otherwise raw tracepoint data can be a severe data leak,\n\t * only allow root to have these.\n\t */\n\tif (perf_paranoid_tracepoint_raw() && !capable(CAP_SYS_ADMIN))\n\t\treturn -EPERM;\n\n\treturn 0;\n}",
    "abstract_func_before": "static int perf_trace_event_perm(struct ftrace_event_call *VAR_0,\n\t\t\t\t struct perf_event *VAR_1)\n{\n\t/* COMMENT_0 */\n\tif (ftrace_event_is_function(VAR_0) &&\n\t    perf_paranoid_kernel() && !capable(VAR_2))\n\t\treturn -VAR_3;\n\n\t/* COMMENT_1 */\n\tif (!(VAR_1->attr.sample_type & VAR_4))\n\t\treturn 0;\n\n\t/* COMMENT_2 */\n\tif (VAR_1->attach_state == VAR_5) {\n\t\tif (VAR_0->flags & VAR_6)\n\t\t\treturn 0;\n\t}\n\n\t/* COMMENT_3 */\n                                                               \n                                  \n    \n\tif (perf_paranoid_tracepoint_raw() && !capable(VAR_2))\n\t\treturn -VAR_3;\n\n\treturn 0;\n}",
    "func_graph_path_before": "torvalds/linux/12ae030d54ef250706da5642fc7697cc60ad0df7/trace_event_perf.c/vul/before/0.json",
    "func": "static int perf_trace_event_perm(struct ftrace_event_call *tp_event,\n\t\t\t\t struct perf_event *p_event)\n{\n\t/* The ftrace function trace is allowed only for root. */\n\tif (ftrace_event_is_function(tp_event) &&\n\t    perf_paranoid_tracepoint_raw() && !capable(CAP_SYS_ADMIN))\n\t\treturn -EPERM;\n\n\t/* No tracing, just counting, so no obvious leak */\n\tif (!(p_event->attr.sample_type & PERF_SAMPLE_RAW))\n\t\treturn 0;\n\n\t/* Some events are ok to be traced by non-root users... */\n\tif (p_event->attach_state == PERF_ATTACH_TASK) {\n\t\tif (tp_event->flags & TRACE_EVENT_FL_CAP_ANY)\n\t\t\treturn 0;\n\t}\n\n\t/*\n\t * ...otherwise raw tracepoint data can be a severe data leak,\n\t * only allow root to have these.\n\t */\n\tif (perf_paranoid_tracepoint_raw() && !capable(CAP_SYS_ADMIN))\n\t\treturn -EPERM;\n\n\treturn 0;\n}",
    "abstract_func": "static int perf_trace_event_perm(struct ftrace_event_call *VAR_0,\n\t\t\t\t struct perf_event *VAR_1)\n{\n\t/* COMMENT_0 */\n\tif (ftrace_event_is_function(VAR_0) &&\n\t    perf_paranoid_tracepoint_raw() && !capable(VAR_2))\n\t\treturn -VAR_3;\n\n\t/* COMMENT_1 */\n\tif (!(VAR_1->attr.sample_type & VAR_4))\n\t\treturn 0;\n\n\t/* COMMENT_2 */\n\tif (VAR_1->attach_state == VAR_5) {\n\t\tif (VAR_0->flags & VAR_6)\n\t\t\treturn 0;\n\t}\n\n\t/* COMMENT_3 */\n                                                               \n                                  \n    \n\tif (perf_paranoid_tracepoint_raw() && !capable(VAR_2))\n\t\treturn -VAR_3;\n\n\treturn 0;\n}",
    "func_graph_path": "torvalds/linux/12ae030d54ef250706da5642fc7697cc60ad0df7/trace_event_perf.c/vul/after/0.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -3,7 +3,7 @@\n {\n \t/* The ftrace function trace is allowed only for root. */\n \tif (ftrace_event_is_function(tp_event) &&\n-\t    perf_paranoid_kernel() && !capable(CAP_SYS_ADMIN))\n+\t    perf_paranoid_tracepoint_raw() && !capable(CAP_SYS_ADMIN))\n \t\treturn -EPERM;\n \n \t/* No tracing, just counting, so no obvious leak */",
    "diff_line_info": {
        "deleted_lines": [
            "\t    perf_paranoid_kernel() && !capable(CAP_SYS_ADMIN))"
        ],
        "added_lines": [
            "\t    perf_paranoid_tracepoint_raw() && !capable(CAP_SYS_ADMIN))"
        ]
    },
    "is_vul": true,
    "pr_url": null,
    "description": "no more info"
}