{
    "cve_id": "CVE-2017-13037",
    "cwe_ids": [
        "CWE-125"
    ],
    "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:P/A:P",
    "cvss_is_v3": false,
    "repo_name": "the-tcpdump-group/tcpdump",
    "commit_msg": "CVE-2017-13037/IP: Add bounds checks when printing time stamp options.\n\nThis fixes a buffer over-read discovered by Bhargava Shastry,\nSecT/TU Berlin.\n\nAdd a test using the capture file supplied by the reporter(s), modified\nso the capture file won't be rejected as an invalid capture.",
    "commit_hash": "2c2cfbd2b771ac888bc5c4a6d922f749d3822538",
    "git_url": "https://github.com/the-tcpdump-group/tcpdump/commit/2c2cfbd2b771ac888bc5c4a6d922f749d3822538",
    "file_path": "print-ip.c",
    "func_name": "ip_optprint",
    "func_before": "static void\nip_optprint(netdissect_options *ndo,\n            register const u_char *cp, u_int length)\n{\n\tregister u_int option_len;\n\tconst char *sep = \"\";\n\n\tfor (; length > 0; cp += option_len, length -= option_len) {\n\t\tu_int option_code;\n\n\t\tND_PRINT((ndo, \"%s\", sep));\n\t\tsep = \",\";\n\n\t\tND_TCHECK(*cp);\n\t\toption_code = *cp;\n\n\t\tND_PRINT((ndo, \"%s\",\n\t\t          tok2str(ip_option_values,\"unknown %u\",option_code)));\n\n\t\tif (option_code == IPOPT_NOP ||\n                    option_code == IPOPT_EOL)\n\t\t\toption_len = 1;\n\n\t\telse {\n\t\t\tND_TCHECK(cp[1]);\n\t\t\toption_len = cp[1];\n\t\t\tif (option_len < 2) {\n\t\t\t\tND_PRINT((ndo, \" [bad length %u]\", option_len));\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tif (option_len > length) {\n\t\t\tND_PRINT((ndo, \" [bad length %u]\", option_len));\n\t\t\treturn;\n\t\t}\n\n\t\tND_TCHECK2(*cp, option_len);\n\n\t\tswitch (option_code) {\n\t\tcase IPOPT_EOL:\n\t\t\treturn;\n\n\t\tcase IPOPT_TS:\n\t\t\tip_printts(ndo, cp, option_len);\n\t\t\tbreak;\n\n\t\tcase IPOPT_RR:       /* fall through */\n\t\tcase IPOPT_SSRR:\n\t\tcase IPOPT_LSRR:\n\t\t\tif (ip_printroute(ndo, cp, option_len) == -1)\n\t\t\t\tgoto trunc;\n\t\t\tbreak;\n\n\t\tcase IPOPT_RA:\n\t\t\tif (option_len < 4) {\n\t\t\t\tND_PRINT((ndo, \" [bad length %u]\", option_len));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tND_TCHECK(cp[3]);\n\t\t\tif (EXTRACT_16BITS(&cp[2]) != 0)\n\t\t\t\tND_PRINT((ndo, \" value %u\", EXTRACT_16BITS(&cp[2])));\n\t\t\tbreak;\n\n\t\tcase IPOPT_NOP:       /* nothing to print - fall through */\n\t\tcase IPOPT_SECURITY:\n\t\tdefault:\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn;\n\ntrunc:\n\tND_PRINT((ndo, \"%s\", tstr));\n}",
    "abstract_func_before": "static void\nip_optprint(netdissect_options *VAR_0,\n            register const u_char *VAR_1, u_int VAR_2)\n{\n\tregister u_int VAR_3;\n\tconst char *VAR_4 = \"\";\n\n\tfor (; VAR_2 > 0; VAR_1 += VAR_3, VAR_2 -= VAR_3) {\n\t\tu_int VAR_5;\n\n\t\tND_PRINT((VAR_0, \"%s\", VAR_4));\n\t\tVAR_4 = \",\";\n\n\t\tND_TCHECK(*VAR_1);\n\t\tVAR_5 = *VAR_1;\n\n\t\tND_PRINT((VAR_0, \"%s\",\n\t\t          tok2str(VAR_6,\"unknown %u\",VAR_5)));\n\n\t\tif (VAR_5 == VAR_7 ||\n                    VAR_5 == VAR_8)\n\t\t\tVAR_3 = 1;\n\n\t\telse {\n\t\t\tND_TCHECK(VAR_1[1]);\n\t\t\tVAR_3 = VAR_1[1];\n\t\t\tif (VAR_3 < 2) {\n\t\t\t\tND_PRINT((VAR_0, \" [bad length %u]\", VAR_3));\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tif (VAR_3 > VAR_2) {\n\t\t\tND_PRINT((VAR_0, \" [bad length %u]\", VAR_3));\n\t\t\treturn;\n\t\t}\n\n\t\tND_TCHECK2(*VAR_1, VAR_3);\n\n\t\tswitch (VAR_5) {\n\t\tcase VAR_8:\n\t\t\treturn;\n\n\t\tcase VAR_9:\n\t\t\tip_printts(VAR_0, VAR_1, VAR_3);\n\t\t\tbreak;\n\n\t\tcase VAR_10:       /* COMMENT_0 */\n\t\tcase VAR_11:\n\t\tcase VAR_12:\n\t\t\tif (ip_printroute(VAR_0, VAR_1, VAR_3) == -1)\n\t\t\t\tgoto trunc;\n\t\t\tbreak;\n\n\t\tcase VAR_13:\n\t\t\tif (VAR_3 < 4) {\n\t\t\t\tND_PRINT((VAR_0, \" [bad length %u]\", VAR_3));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tND_TCHECK(VAR_1[3]);\n\t\t\tif (EXTRACT_16BITS(&VAR_1[2]) != 0)\n\t\t\t\tND_PRINT((VAR_0, \" value %u\", EXTRACT_16BITS(&VAR_1[2])));\n\t\t\tbreak;\n\n\t\tcase VAR_7:       /* COMMENT_1 */\n\t\tcase VAR_14:\n\t\tdefault:\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn;\n\ntrunc:\n\tND_PRINT((VAR_0, \"%s\", VAR_15));\n}",
    "func_graph_path_before": "the-tcpdump-group/tcpdump/2c2cfbd2b771ac888bc5c4a6d922f749d3822538/print-ip.c/vul/before/0.json",
    "func": "static void\nip_optprint(netdissect_options *ndo,\n            register const u_char *cp, u_int length)\n{\n\tregister u_int option_len;\n\tconst char *sep = \"\";\n\n\tfor (; length > 0; cp += option_len, length -= option_len) {\n\t\tu_int option_code;\n\n\t\tND_PRINT((ndo, \"%s\", sep));\n\t\tsep = \",\";\n\n\t\tND_TCHECK(*cp);\n\t\toption_code = *cp;\n\n\t\tND_PRINT((ndo, \"%s\",\n\t\t          tok2str(ip_option_values,\"unknown %u\",option_code)));\n\n\t\tif (option_code == IPOPT_NOP ||\n                    option_code == IPOPT_EOL)\n\t\t\toption_len = 1;\n\n\t\telse {\n\t\t\tND_TCHECK(cp[1]);\n\t\t\toption_len = cp[1];\n\t\t\tif (option_len < 2) {\n\t\t\t\tND_PRINT((ndo, \" [bad length %u]\", option_len));\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tif (option_len > length) {\n\t\t\tND_PRINT((ndo, \" [bad length %u]\", option_len));\n\t\t\treturn;\n\t\t}\n\n\t\tND_TCHECK2(*cp, option_len);\n\n\t\tswitch (option_code) {\n\t\tcase IPOPT_EOL:\n\t\t\treturn;\n\n\t\tcase IPOPT_TS:\n\t\t\tif (ip_printts(ndo, cp, option_len) == -1)\n\t\t\t\tgoto trunc;\n\t\t\tbreak;\n\n\t\tcase IPOPT_RR:       /* fall through */\n\t\tcase IPOPT_SSRR:\n\t\tcase IPOPT_LSRR:\n\t\t\tif (ip_printroute(ndo, cp, option_len) == -1)\n\t\t\t\tgoto trunc;\n\t\t\tbreak;\n\n\t\tcase IPOPT_RA:\n\t\t\tif (option_len < 4) {\n\t\t\t\tND_PRINT((ndo, \" [bad length %u]\", option_len));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tND_TCHECK(cp[3]);\n\t\t\tif (EXTRACT_16BITS(&cp[2]) != 0)\n\t\t\t\tND_PRINT((ndo, \" value %u\", EXTRACT_16BITS(&cp[2])));\n\t\t\tbreak;\n\n\t\tcase IPOPT_NOP:       /* nothing to print - fall through */\n\t\tcase IPOPT_SECURITY:\n\t\tdefault:\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn;\n\ntrunc:\n\tND_PRINT((ndo, \"%s\", tstr));\n}",
    "abstract_func": "static void\nip_optprint(netdissect_options *VAR_0,\n            register const u_char *VAR_1, u_int VAR_2)\n{\n\tregister u_int VAR_3;\n\tconst char *VAR_4 = \"\";\n\n\tfor (; VAR_2 > 0; VAR_1 += VAR_3, VAR_2 -= VAR_3) {\n\t\tu_int VAR_5;\n\n\t\tND_PRINT((VAR_0, \"%s\", VAR_4));\n\t\tVAR_4 = \",\";\n\n\t\tND_TCHECK(*VAR_1);\n\t\tVAR_5 = *VAR_1;\n\n\t\tND_PRINT((VAR_0, \"%s\",\n\t\t          tok2str(VAR_6,\"unknown %u\",VAR_5)));\n\n\t\tif (VAR_5 == VAR_7 ||\n                    VAR_5 == VAR_8)\n\t\t\tVAR_3 = 1;\n\n\t\telse {\n\t\t\tND_TCHECK(VAR_1[1]);\n\t\t\tVAR_3 = VAR_1[1];\n\t\t\tif (VAR_3 < 2) {\n\t\t\t\tND_PRINT((VAR_0, \" [bad length %u]\", VAR_3));\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tif (VAR_3 > VAR_2) {\n\t\t\tND_PRINT((VAR_0, \" [bad length %u]\", VAR_3));\n\t\t\treturn;\n\t\t}\n\n\t\tND_TCHECK2(*VAR_1, VAR_3);\n\n\t\tswitch (VAR_5) {\n\t\tcase VAR_8:\n\t\t\treturn;\n\n\t\tcase VAR_9:\n\t\t\tif (ip_printts(VAR_0, VAR_1, VAR_3) == -1)\n\t\t\t\tgoto trunc;\n\t\t\tbreak;\n\n\t\tcase VAR_10:       /* COMMENT_0 */\n\t\tcase VAR_11:\n\t\tcase VAR_12:\n\t\t\tif (ip_printroute(VAR_0, VAR_1, VAR_3) == -1)\n\t\t\t\tgoto trunc;\n\t\t\tbreak;\n\n\t\tcase VAR_13:\n\t\t\tif (VAR_3 < 4) {\n\t\t\t\tND_PRINT((VAR_0, \" [bad length %u]\", VAR_3));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tND_TCHECK(VAR_1[3]);\n\t\t\tif (EXTRACT_16BITS(&VAR_1[2]) != 0)\n\t\t\t\tND_PRINT((VAR_0, \" value %u\", EXTRACT_16BITS(&VAR_1[2])));\n\t\t\tbreak;\n\n\t\tcase VAR_7:       /* COMMENT_1 */\n\t\tcase VAR_14:\n\t\tdefault:\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn;\n\ntrunc:\n\tND_PRINT((VAR_0, \"%s\", VAR_15));\n}",
    "func_graph_path": "the-tcpdump-group/tcpdump/2c2cfbd2b771ac888bc5c4a6d922f749d3822538/print-ip.c/vul/after/0.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -42,7 +42,8 @@\n \t\t\treturn;\n \n \t\tcase IPOPT_TS:\n-\t\t\tip_printts(ndo, cp, option_len);\n+\t\t\tif (ip_printts(ndo, cp, option_len) == -1)\n+\t\t\t\tgoto trunc;\n \t\t\tbreak;\n \n \t\tcase IPOPT_RR:       /* fall through */",
    "diff_line_info": {
        "deleted_lines": [
            "\t\t\tip_printts(ndo, cp, option_len);"
        ],
        "added_lines": [
            "\t\t\tif (ip_printts(ndo, cp, option_len) == -1)",
            "\t\t\t\tgoto trunc;"
        ]
    },
    "is_vul": true,
    "pr_url": null,
    "description": "no more info"
}