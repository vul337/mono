{
    "cve_id": "CVE-2021-30014",
    "cwe_ids": [
        "CWE-787",
        "CWE-190"
    ],
    "cvss_vector": "AV:N/AC:M/Au:N/C:N/I:N/A:P",
    "cvss_is_v3": false,
    "repo_name": "gpac",
    "commit_msg": "add safety in avc/hevc/vvc sps/pps/vps ID check - cf #1720 #1721 #1722",
    "commit_hash": "51cdb67ff7c5f1242ac58c5aa603ceaf1793b788",
    "git_url": "https://github.com/gpac/gpac/commit/51cdb67ff7c5f1242ac58c5aa603ceaf1793b788",
    "file_path": "src/media_tools/av_parsers.c",
    "func_name": "gf_hevc_read_pps_bs_internal",
    "func_before": "static s32 gf_hevc_read_pps_bs_internal(GF_BitStream *bs, HEVCState *hevc)\n{\n\tu32 i;\n\ts32 pps_id;\n\tHEVC_PPS *pps;\n\n\t//NAL header already read\n\tpps_id = gf_bs_read_ue_log(bs, \"pps_id\");\n\n\tif ((pps_id < 0) || (pps_id >= 64)) {\n\t\tGF_LOG(GF_LOG_ERROR, GF_LOG_CODING, (\"[HEVC] wrong PPS ID %d in PPS\\n\", pps_id));\n\t\treturn -1;\n\t}\n\tpps = &hevc->pps[pps_id];\n\n\tif (!pps->state) {\n\t\tpps->id = pps_id;\n\t\tpps->state = 1;\n\t}\n\tpps->sps_id = gf_bs_read_ue_log(bs, \"sps_id\");\n\tif (pps->sps_id >= 16) {\n\t\tGF_LOG(GF_LOG_ERROR, GF_LOG_CODING, (\"[HEVC] wrong SPS ID %d in PPS\\n\", pps->sps_id));\n\t\tpps->sps_id=0;\n\t\treturn -1;\n\t}\n\thevc->sps_active_idx = pps->sps_id; /*set active sps*/\n\tpps->dependent_slice_segments_enabled_flag = gf_bs_read_int_log(bs, 1, \"dependent_slice_segments_enabled_flag\");\n\n\tpps->output_flag_present_flag = gf_bs_read_int_log(bs, 1, \"output_flag_present_flag\");\n\tpps->num_extra_slice_header_bits = gf_bs_read_int_log(bs, 3, \"num_extra_slice_header_bits\");\n\tpps->sign_data_hiding_flag = gf_bs_read_int_log(bs, 1, \"sign_data_hiding_flag\");\n\tpps->cabac_init_present_flag = gf_bs_read_int_log(bs, 1, \"cabac_init_present_flag\");\n\tpps->num_ref_idx_l0_default_active = 1 + gf_bs_read_ue_log(bs, \"num_ref_idx_l0_default_active\");\n\tpps->num_ref_idx_l1_default_active = 1 + gf_bs_read_ue_log(bs, \"num_ref_idx_l1_default_active\");\n\tpps->pic_init_qp_minus26 = gf_bs_read_se_log(bs, \"pic_init_qp_minus26\");\n\tpps->constrained_intra_pred_flag = gf_bs_read_int_log(bs, 1, \"constrained_intra_pred_flag\");\n\tpps->transform_skip_enabled_flag = gf_bs_read_int_log(bs, 1, \"transform_skip_enabled_flag\");\n\tif ((pps->cu_qp_delta_enabled_flag = gf_bs_read_int_log(bs, 1, \"cu_qp_delta_enabled_flag\")))\n\t\tpps->diff_cu_qp_delta_depth = gf_bs_read_ue_log(bs, \"diff_cu_qp_delta_depth\");\n\n\tpps->pic_cb_qp_offset = gf_bs_read_se_log(bs, \"pic_cb_qp_offset\");\n\tpps->pic_cr_qp_offset = gf_bs_read_se_log(bs, \"pic_cr_qp_offset\");\n\tpps->slice_chroma_qp_offsets_present_flag = gf_bs_read_int_log(bs, 1, \"slice_chroma_qp_offsets_present_flag\");\n\tpps->weighted_pred_flag = gf_bs_read_int_log(bs, 1, \"weighted_pred_flag\");\n\tpps->weighted_bipred_flag = gf_bs_read_int_log(bs, 1, \"weighted_bipred_flag\");\n\tpps->transquant_bypass_enable_flag = gf_bs_read_int_log(bs, 1, \"transquant_bypass_enable_flag\");\n\tpps->tiles_enabled_flag = gf_bs_read_int_log(bs, 1, \"tiles_enabled_flag\");\n\tpps->entropy_coding_sync_enabled_flag = gf_bs_read_int_log(bs, 1, \"entropy_coding_sync_enabled_flag\");\n\tif (pps->tiles_enabled_flag) {\n\t\tpps->num_tile_columns = 1 + gf_bs_read_ue_log(bs, \"num_tile_columns_minus1\");\n\t\tpps->num_tile_rows = 1 + gf_bs_read_ue_log(bs, \"num_tile_rows_minus1\");\n\t\tpps->uniform_spacing_flag = gf_bs_read_int_log(bs, 1, \"uniform_spacing_flag\");\n\t\tif (!pps->uniform_spacing_flag) {\n\t\t\tfor (i = 0; i < pps->num_tile_columns - 1; i++) {\n\t\t\t\tpps->column_width[i] = 1 + gf_bs_read_ue_log_idx(bs, \"column_width_minus1\", i);\n\t\t\t}\n\t\t\tfor (i = 0; i < pps->num_tile_rows - 1; i++) {\n\t\t\t\tpps->row_height[i] = 1 + gf_bs_read_ue_log_idx(bs, \"row_height_minus1\", i);\n\t\t\t}\n\t\t}\n\t\tpps->loop_filter_across_tiles_enabled_flag = gf_bs_read_int_log(bs, 1, \"loop_filter_across_tiles_enabled_flag\");\n\t}\n\tpps->loop_filter_across_slices_enabled_flag = gf_bs_read_int_log(bs, 1, \"loop_filter_across_slices_enabled_flag\");\n\tif ((pps->deblocking_filter_control_present_flag = gf_bs_read_int_log(bs, 1, \"deblocking_filter_control_present_flag\"))) {\n\t\tpps->deblocking_filter_override_enabled_flag = gf_bs_read_int_log(bs, 1, \"deblocking_filter_override_enabled_flag\");\n\t\tif (! (pps->pic_disable_deblocking_filter_flag = gf_bs_read_int_log(bs, 1, \"pic_disable_deblocking_filter_flag\"))) {\n\t\t\tpps->beta_offset_div2 = gf_bs_read_se_log(bs, \"beta_offset_div2\");\n\t\t\tpps->tc_offset_div2 = gf_bs_read_se_log(bs, \"tc_offset_div2\");\n\t\t}\n\t}\n\tif ((pps->pic_scaling_list_data_present_flag = gf_bs_read_int_log(bs, 1, \"pic_scaling_list_data_present_flag\"))) {\n\t\thevc_scaling_list_data(bs);\n\t}\n\tpps->lists_modification_present_flag = gf_bs_read_int_log(bs, 1, \"lists_modification_present_flag\");\n\tpps->log2_parallel_merge_level_minus2 = gf_bs_read_ue_log(bs, \"log2_parallel_merge_level_minus2\");\n\tpps->slice_segment_header_extension_present_flag = gf_bs_read_int_log(bs, 1, \"slice_segment_header_extension_present_flag\");\n\tif (gf_bs_read_int_log(bs, 1, \"pps_extension_flag\")) {\n#if 0\n\t\twhile (gf_bs_available(bs)) {\n\t\t\t/*pps_extension_data_flag */ gf_bs_read_int(bs, 1);\n\t\t}\n#endif\n\n\t}\n\treturn pps_id;\n}",
    "abstract_func_before": "static s32 gf_hevc_read_pps_bs_internal(GF_BitStream *VAR_0, HEVCState *VAR_1)\n{\n\tu32 VAR_2;\n\ts32 VAR_3;\n\tHEVC_PPS *VAR_4;\n\n\t/* COMMENT_0 */\n\tVAR_3 = gf_bs_read_ue_log(VAR_0, \"pps_id\");\n\n\tif ((VAR_3 < 0) || (VAR_3 >= 64)) {\n\t\tGF_LOG(VAR_5, VAR_6, (\"[HEVC] wrong PPS ID %d in PPS\\n\", VAR_3));\n\t\treturn -1;\n\t}\n\tVAR_4 = &VAR_1->pps[VAR_3];\n\n\tif (!VAR_4->state) {\n\t\tVAR_4->id = VAR_3;\n\t\tVAR_4->state = 1;\n\t}\n\tVAR_4->sps_id = gf_bs_read_ue_log(VAR_0, \"sps_id\");\n\tif (VAR_4->sps_id >= 16) {\n\t\tGF_LOG(VAR_5, VAR_6, (\"[HEVC] wrong SPS ID %d in PPS\\n\", VAR_4->sps_id));\n\t\tVAR_4->sps_id=0;\n\t\treturn -1;\n\t}\n\tVAR_1->sps_active_idx = VAR_4->sps_id; /* COMMENT_1 */\n\tVAR_4->dependent_slice_segments_enabled_flag = gf_bs_read_int_log(VAR_0, 1, \"dependent_slice_segments_enabled_flag\");\n\n\tVAR_4->output_flag_present_flag = gf_bs_read_int_log(VAR_0, 1, \"output_flag_present_flag\");\n\tVAR_4->num_extra_slice_header_bits = gf_bs_read_int_log(VAR_0, 3, \"num_extra_slice_header_bits\");\n\tVAR_4->sign_data_hiding_flag = gf_bs_read_int_log(VAR_0, 1, \"sign_data_hiding_flag\");\n\tVAR_4->cabac_init_present_flag = gf_bs_read_int_log(VAR_0, 1, \"cabac_init_present_flag\");\n\tVAR_4->num_ref_idx_l0_default_active = 1 + gf_bs_read_ue_log(VAR_0, \"num_ref_idx_l0_default_active\");\n\tVAR_4->num_ref_idx_l1_default_active = 1 + gf_bs_read_ue_log(VAR_0, \"num_ref_idx_l1_default_active\");\n\tVAR_4->pic_init_qp_minus26 = gf_bs_read_se_log(VAR_0, \"pic_init_qp_minus26\");\n\tVAR_4->constrained_intra_pred_flag = gf_bs_read_int_log(VAR_0, 1, \"constrained_intra_pred_flag\");\n\tVAR_4->transform_skip_enabled_flag = gf_bs_read_int_log(VAR_0, 1, \"transform_skip_enabled_flag\");\n\tif ((VAR_4->cu_qp_delta_enabled_flag = gf_bs_read_int_log(VAR_0, 1, \"cu_qp_delta_enabled_flag\")))\n\t\tVAR_4->diff_cu_qp_delta_depth = gf_bs_read_ue_log(VAR_0, \"diff_cu_qp_delta_depth\");\n\n\tVAR_4->pic_cb_qp_offset = gf_bs_read_se_log(VAR_0, \"pic_cb_qp_offset\");\n\tVAR_4->pic_cr_qp_offset = gf_bs_read_se_log(VAR_0, \"pic_cr_qp_offset\");\n\tVAR_4->slice_chroma_qp_offsets_present_flag = gf_bs_read_int_log(VAR_0, 1, \"slice_chroma_qp_offsets_present_flag\");\n\tVAR_4->weighted_pred_flag = gf_bs_read_int_log(VAR_0, 1, \"weighted_pred_flag\");\n\tVAR_4->weighted_bipred_flag = gf_bs_read_int_log(VAR_0, 1, \"weighted_bipred_flag\");\n\tVAR_4->transquant_bypass_enable_flag = gf_bs_read_int_log(VAR_0, 1, \"transquant_bypass_enable_flag\");\n\tVAR_4->tiles_enabled_flag = gf_bs_read_int_log(VAR_0, 1, \"tiles_enabled_flag\");\n\tVAR_4->entropy_coding_sync_enabled_flag = gf_bs_read_int_log(VAR_0, 1, \"entropy_coding_sync_enabled_flag\");\n\tif (VAR_4->tiles_enabled_flag) {\n\t\tVAR_4->num_tile_columns = 1 + gf_bs_read_ue_log(VAR_0, \"num_tile_columns_minus1\");\n\t\tVAR_4->num_tile_rows = 1 + gf_bs_read_ue_log(VAR_0, \"num_tile_rows_minus1\");\n\t\tVAR_4->uniform_spacing_flag = gf_bs_read_int_log(VAR_0, 1, \"uniform_spacing_flag\");\n\t\tif (!VAR_4->uniform_spacing_flag) {\n\t\t\tfor (VAR_2 = 0; VAR_2 < VAR_4->num_tile_columns - 1; VAR_2++) {\n\t\t\t\tVAR_4->column_width[VAR_2] = 1 + gf_bs_read_ue_log_idx(VAR_0, \"column_width_minus1\", VAR_2);\n\t\t\t}\n\t\t\tfor (VAR_2 = 0; VAR_2 < VAR_4->num_tile_rows - 1; VAR_2++) {\n\t\t\t\tVAR_4->row_height[VAR_2] = 1 + gf_bs_read_ue_log_idx(VAR_0, \"row_height_minus1\", VAR_2);\n\t\t\t}\n\t\t}\n\t\tVAR_4->loop_filter_across_tiles_enabled_flag = gf_bs_read_int_log(VAR_0, 1, \"loop_filter_across_tiles_enabled_flag\");\n\t}\n\tVAR_4->loop_filter_across_slices_enabled_flag = gf_bs_read_int_log(VAR_0, 1, \"loop_filter_across_slices_enabled_flag\");\n\tif ((VAR_4->deblocking_filter_control_present_flag = gf_bs_read_int_log(VAR_0, 1, \"deblocking_filter_control_present_flag\"))) {\n\t\tVAR_4->deblocking_filter_override_enabled_flag = gf_bs_read_int_log(VAR_0, 1, \"deblocking_filter_override_enabled_flag\");\n\t\tif (! (VAR_4->pic_disable_deblocking_filter_flag = gf_bs_read_int_log(VAR_0, 1, \"pic_disable_deblocking_filter_flag\"))) {\n\t\t\tVAR_4->beta_offset_div2 = gf_bs_read_se_log(VAR_0, \"beta_offset_div2\");\n\t\t\tVAR_4->tc_offset_div2 = gf_bs_read_se_log(VAR_0, \"tc_offset_div2\");\n\t\t}\n\t}\n\tif ((VAR_4->pic_scaling_list_data_present_flag = gf_bs_read_int_log(VAR_0, 1, \"pic_scaling_list_data_present_flag\"))) {\n\t\thevc_scaling_list_data(VAR_0);\n\t}\n\tVAR_4->lists_modification_present_flag = gf_bs_read_int_log(VAR_0, 1, \"lists_modification_present_flag\");\n\tVAR_4->log2_parallel_merge_level_minus2 = gf_bs_read_ue_log(VAR_0, \"log2_parallel_merge_level_minus2\");\n\tVAR_4->slice_segment_header_extension_present_flag = gf_bs_read_int_log(VAR_0, 1, \"slice_segment_header_extension_present_flag\");\n\tif (gf_bs_read_int_log(VAR_0, 1, \"pps_extension_flag\")) {\n#if 0\n\t\twhile (gf_bs_available(VAR_0)) {\n\t\t\t/* COMMENT_2 */ gf_bs_read_int(VAR_0, 1);\n\t\t}\n#endif\n\n\t}\n\treturn VAR_3;\n}",
    "func_graph_path_before": "gpac/51cdb67ff7c5f1242ac58c5aa603ceaf1793b788/av_parsers.c/vul/before/1.json",
    "func": "static s32 gf_hevc_read_pps_bs_internal(GF_BitStream *bs, HEVCState *hevc)\n{\n\tu32 i;\n\ts32 pps_id;\n\tHEVC_PPS *pps;\n\n\t//NAL header already read\n\tpps_id = gf_bs_read_ue_log(bs, \"pps_id\");\n\n\tif ((pps_id < 0) || (pps_id >= 64)) {\n\t\tGF_LOG(GF_LOG_ERROR, GF_LOG_CODING, (\"[HEVC] wrong PPS ID %d in PPS\\n\", pps_id));\n\t\treturn -1;\n\t}\n\tpps = &hevc->pps[pps_id];\n\n\tif (!pps->state) {\n\t\tpps->id = pps_id;\n\t\tpps->state = 1;\n\t}\n\tpps->sps_id = gf_bs_read_ue_log(bs, \"sps_id\");\n\tif ((pps->sps_id<0) || (pps->sps_id >= 16)) {\n\t\tGF_LOG(GF_LOG_ERROR, GF_LOG_CODING, (\"[HEVC] wrong SPS ID %d in PPS\\n\", pps->sps_id));\n\t\tpps->sps_id=0;\n\t\treturn -1;\n\t}\n\thevc->sps_active_idx = pps->sps_id; /*set active sps*/\n\tpps->dependent_slice_segments_enabled_flag = gf_bs_read_int_log(bs, 1, \"dependent_slice_segments_enabled_flag\");\n\n\tpps->output_flag_present_flag = gf_bs_read_int_log(bs, 1, \"output_flag_present_flag\");\n\tpps->num_extra_slice_header_bits = gf_bs_read_int_log(bs, 3, \"num_extra_slice_header_bits\");\n\tpps->sign_data_hiding_flag = gf_bs_read_int_log(bs, 1, \"sign_data_hiding_flag\");\n\tpps->cabac_init_present_flag = gf_bs_read_int_log(bs, 1, \"cabac_init_present_flag\");\n\tpps->num_ref_idx_l0_default_active = 1 + gf_bs_read_ue_log(bs, \"num_ref_idx_l0_default_active\");\n\tpps->num_ref_idx_l1_default_active = 1 + gf_bs_read_ue_log(bs, \"num_ref_idx_l1_default_active\");\n\tpps->pic_init_qp_minus26 = gf_bs_read_se_log(bs, \"pic_init_qp_minus26\");\n\tpps->constrained_intra_pred_flag = gf_bs_read_int_log(bs, 1, \"constrained_intra_pred_flag\");\n\tpps->transform_skip_enabled_flag = gf_bs_read_int_log(bs, 1, \"transform_skip_enabled_flag\");\n\tif ((pps->cu_qp_delta_enabled_flag = gf_bs_read_int_log(bs, 1, \"cu_qp_delta_enabled_flag\")))\n\t\tpps->diff_cu_qp_delta_depth = gf_bs_read_ue_log(bs, \"diff_cu_qp_delta_depth\");\n\n\tpps->pic_cb_qp_offset = gf_bs_read_se_log(bs, \"pic_cb_qp_offset\");\n\tpps->pic_cr_qp_offset = gf_bs_read_se_log(bs, \"pic_cr_qp_offset\");\n\tpps->slice_chroma_qp_offsets_present_flag = gf_bs_read_int_log(bs, 1, \"slice_chroma_qp_offsets_present_flag\");\n\tpps->weighted_pred_flag = gf_bs_read_int_log(bs, 1, \"weighted_pred_flag\");\n\tpps->weighted_bipred_flag = gf_bs_read_int_log(bs, 1, \"weighted_bipred_flag\");\n\tpps->transquant_bypass_enable_flag = gf_bs_read_int_log(bs, 1, \"transquant_bypass_enable_flag\");\n\tpps->tiles_enabled_flag = gf_bs_read_int_log(bs, 1, \"tiles_enabled_flag\");\n\tpps->entropy_coding_sync_enabled_flag = gf_bs_read_int_log(bs, 1, \"entropy_coding_sync_enabled_flag\");\n\tif (pps->tiles_enabled_flag) {\n\t\tpps->num_tile_columns = 1 + gf_bs_read_ue_log(bs, \"num_tile_columns_minus1\");\n\t\tpps->num_tile_rows = 1 + gf_bs_read_ue_log(bs, \"num_tile_rows_minus1\");\n\t\tpps->uniform_spacing_flag = gf_bs_read_int_log(bs, 1, \"uniform_spacing_flag\");\n\t\tif (!pps->uniform_spacing_flag) {\n\t\t\tfor (i = 0; i < pps->num_tile_columns - 1; i++) {\n\t\t\t\tpps->column_width[i] = 1 + gf_bs_read_ue_log_idx(bs, \"column_width_minus1\", i);\n\t\t\t}\n\t\t\tfor (i = 0; i < pps->num_tile_rows - 1; i++) {\n\t\t\t\tpps->row_height[i] = 1 + gf_bs_read_ue_log_idx(bs, \"row_height_minus1\", i);\n\t\t\t}\n\t\t}\n\t\tpps->loop_filter_across_tiles_enabled_flag = gf_bs_read_int_log(bs, 1, \"loop_filter_across_tiles_enabled_flag\");\n\t}\n\tpps->loop_filter_across_slices_enabled_flag = gf_bs_read_int_log(bs, 1, \"loop_filter_across_slices_enabled_flag\");\n\tif ((pps->deblocking_filter_control_present_flag = gf_bs_read_int_log(bs, 1, \"deblocking_filter_control_present_flag\"))) {\n\t\tpps->deblocking_filter_override_enabled_flag = gf_bs_read_int_log(bs, 1, \"deblocking_filter_override_enabled_flag\");\n\t\tif (! (pps->pic_disable_deblocking_filter_flag = gf_bs_read_int_log(bs, 1, \"pic_disable_deblocking_filter_flag\"))) {\n\t\t\tpps->beta_offset_div2 = gf_bs_read_se_log(bs, \"beta_offset_div2\");\n\t\t\tpps->tc_offset_div2 = gf_bs_read_se_log(bs, \"tc_offset_div2\");\n\t\t}\n\t}\n\tif ((pps->pic_scaling_list_data_present_flag = gf_bs_read_int_log(bs, 1, \"pic_scaling_list_data_present_flag\"))) {\n\t\thevc_scaling_list_data(bs);\n\t}\n\tpps->lists_modification_present_flag = gf_bs_read_int_log(bs, 1, \"lists_modification_present_flag\");\n\tpps->log2_parallel_merge_level_minus2 = gf_bs_read_ue_log(bs, \"log2_parallel_merge_level_minus2\");\n\tpps->slice_segment_header_extension_present_flag = gf_bs_read_int_log(bs, 1, \"slice_segment_header_extension_present_flag\");\n\tif (gf_bs_read_int_log(bs, 1, \"pps_extension_flag\")) {\n#if 0\n\t\twhile (gf_bs_available(bs)) {\n\t\t\t/*pps_extension_data_flag */ gf_bs_read_int(bs, 1);\n\t\t}\n#endif\n\n\t}\n\treturn pps_id;\n}",
    "abstract_func": "static s32 gf_hevc_read_pps_bs_internal(GF_BitStream *VAR_0, HEVCState *VAR_1)\n{\n\tu32 VAR_2;\n\ts32 VAR_3;\n\tHEVC_PPS *VAR_4;\n\n\t/* COMMENT_0 */\n\tVAR_3 = gf_bs_read_ue_log(VAR_0, \"pps_id\");\n\n\tif ((VAR_3 < 0) || (VAR_3 >= 64)) {\n\t\tGF_LOG(VAR_5, VAR_6, (\"[HEVC] wrong PPS ID %d in PPS\\n\", VAR_3));\n\t\treturn -1;\n\t}\n\tVAR_4 = &VAR_1->pps[VAR_3];\n\n\tif (!VAR_4->state) {\n\t\tVAR_4->id = VAR_3;\n\t\tVAR_4->state = 1;\n\t}\n\tVAR_4->sps_id = gf_bs_read_ue_log(VAR_0, \"sps_id\");\n\tif ((VAR_4->sps_id<0) || (VAR_4->sps_id >= 16)) {\n\t\tGF_LOG(VAR_5, VAR_6, (\"[HEVC] wrong SPS ID %d in PPS\\n\", VAR_4->sps_id));\n\t\tVAR_4->sps_id=0;\n\t\treturn -1;\n\t}\n\tVAR_1->sps_active_idx = VAR_4->sps_id; /* COMMENT_1 */\n\tVAR_4->dependent_slice_segments_enabled_flag = gf_bs_read_int_log(VAR_0, 1, \"dependent_slice_segments_enabled_flag\");\n\n\tVAR_4->output_flag_present_flag = gf_bs_read_int_log(VAR_0, 1, \"output_flag_present_flag\");\n\tVAR_4->num_extra_slice_header_bits = gf_bs_read_int_log(VAR_0, 3, \"num_extra_slice_header_bits\");\n\tVAR_4->sign_data_hiding_flag = gf_bs_read_int_log(VAR_0, 1, \"sign_data_hiding_flag\");\n\tVAR_4->cabac_init_present_flag = gf_bs_read_int_log(VAR_0, 1, \"cabac_init_present_flag\");\n\tVAR_4->num_ref_idx_l0_default_active = 1 + gf_bs_read_ue_log(VAR_0, \"num_ref_idx_l0_default_active\");\n\tVAR_4->num_ref_idx_l1_default_active = 1 + gf_bs_read_ue_log(VAR_0, \"num_ref_idx_l1_default_active\");\n\tVAR_4->pic_init_qp_minus26 = gf_bs_read_se_log(VAR_0, \"pic_init_qp_minus26\");\n\tVAR_4->constrained_intra_pred_flag = gf_bs_read_int_log(VAR_0, 1, \"constrained_intra_pred_flag\");\n\tVAR_4->transform_skip_enabled_flag = gf_bs_read_int_log(VAR_0, 1, \"transform_skip_enabled_flag\");\n\tif ((VAR_4->cu_qp_delta_enabled_flag = gf_bs_read_int_log(VAR_0, 1, \"cu_qp_delta_enabled_flag\")))\n\t\tVAR_4->diff_cu_qp_delta_depth = gf_bs_read_ue_log(VAR_0, \"diff_cu_qp_delta_depth\");\n\n\tVAR_4->pic_cb_qp_offset = gf_bs_read_se_log(VAR_0, \"pic_cb_qp_offset\");\n\tVAR_4->pic_cr_qp_offset = gf_bs_read_se_log(VAR_0, \"pic_cr_qp_offset\");\n\tVAR_4->slice_chroma_qp_offsets_present_flag = gf_bs_read_int_log(VAR_0, 1, \"slice_chroma_qp_offsets_present_flag\");\n\tVAR_4->weighted_pred_flag = gf_bs_read_int_log(VAR_0, 1, \"weighted_pred_flag\");\n\tVAR_4->weighted_bipred_flag = gf_bs_read_int_log(VAR_0, 1, \"weighted_bipred_flag\");\n\tVAR_4->transquant_bypass_enable_flag = gf_bs_read_int_log(VAR_0, 1, \"transquant_bypass_enable_flag\");\n\tVAR_4->tiles_enabled_flag = gf_bs_read_int_log(VAR_0, 1, \"tiles_enabled_flag\");\n\tVAR_4->entropy_coding_sync_enabled_flag = gf_bs_read_int_log(VAR_0, 1, \"entropy_coding_sync_enabled_flag\");\n\tif (VAR_4->tiles_enabled_flag) {\n\t\tVAR_4->num_tile_columns = 1 + gf_bs_read_ue_log(VAR_0, \"num_tile_columns_minus1\");\n\t\tVAR_4->num_tile_rows = 1 + gf_bs_read_ue_log(VAR_0, \"num_tile_rows_minus1\");\n\t\tVAR_4->uniform_spacing_flag = gf_bs_read_int_log(VAR_0, 1, \"uniform_spacing_flag\");\n\t\tif (!VAR_4->uniform_spacing_flag) {\n\t\t\tfor (VAR_2 = 0; VAR_2 < VAR_4->num_tile_columns - 1; VAR_2++) {\n\t\t\t\tVAR_4->column_width[VAR_2] = 1 + gf_bs_read_ue_log_idx(VAR_0, \"column_width_minus1\", VAR_2);\n\t\t\t}\n\t\t\tfor (VAR_2 = 0; VAR_2 < VAR_4->num_tile_rows - 1; VAR_2++) {\n\t\t\t\tVAR_4->row_height[VAR_2] = 1 + gf_bs_read_ue_log_idx(VAR_0, \"row_height_minus1\", VAR_2);\n\t\t\t}\n\t\t}\n\t\tVAR_4->loop_filter_across_tiles_enabled_flag = gf_bs_read_int_log(VAR_0, 1, \"loop_filter_across_tiles_enabled_flag\");\n\t}\n\tVAR_4->loop_filter_across_slices_enabled_flag = gf_bs_read_int_log(VAR_0, 1, \"loop_filter_across_slices_enabled_flag\");\n\tif ((VAR_4->deblocking_filter_control_present_flag = gf_bs_read_int_log(VAR_0, 1, \"deblocking_filter_control_present_flag\"))) {\n\t\tVAR_4->deblocking_filter_override_enabled_flag = gf_bs_read_int_log(VAR_0, 1, \"deblocking_filter_override_enabled_flag\");\n\t\tif (! (VAR_4->pic_disable_deblocking_filter_flag = gf_bs_read_int_log(VAR_0, 1, \"pic_disable_deblocking_filter_flag\"))) {\n\t\t\tVAR_4->beta_offset_div2 = gf_bs_read_se_log(VAR_0, \"beta_offset_div2\");\n\t\t\tVAR_4->tc_offset_div2 = gf_bs_read_se_log(VAR_0, \"tc_offset_div2\");\n\t\t}\n\t}\n\tif ((VAR_4->pic_scaling_list_data_present_flag = gf_bs_read_int_log(VAR_0, 1, \"pic_scaling_list_data_present_flag\"))) {\n\t\thevc_scaling_list_data(VAR_0);\n\t}\n\tVAR_4->lists_modification_present_flag = gf_bs_read_int_log(VAR_0, 1, \"lists_modification_present_flag\");\n\tVAR_4->log2_parallel_merge_level_minus2 = gf_bs_read_ue_log(VAR_0, \"log2_parallel_merge_level_minus2\");\n\tVAR_4->slice_segment_header_extension_present_flag = gf_bs_read_int_log(VAR_0, 1, \"slice_segment_header_extension_present_flag\");\n\tif (gf_bs_read_int_log(VAR_0, 1, \"pps_extension_flag\")) {\n#if 0\n\t\twhile (gf_bs_available(VAR_0)) {\n\t\t\t/* COMMENT_2 */ gf_bs_read_int(VAR_0, 1);\n\t\t}\n#endif\n\n\t}\n\treturn VAR_3;\n}",
    "func_graph_path": "gpac/51cdb67ff7c5f1242ac58c5aa603ceaf1793b788/av_parsers.c/vul/after/1.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -18,7 +18,7 @@\n \t\tpps->state = 1;\n \t}\n \tpps->sps_id = gf_bs_read_ue_log(bs, \"sps_id\");\n-\tif (pps->sps_id >= 16) {\n+\tif ((pps->sps_id<0) || (pps->sps_id >= 16)) {\n \t\tGF_LOG(GF_LOG_ERROR, GF_LOG_CODING, (\"[HEVC] wrong SPS ID %d in PPS\\n\", pps->sps_id));\n \t\tpps->sps_id=0;\n \t\treturn -1;",
    "diff_line_info": {
        "deleted_lines": [
            "\tif (pps->sps_id >= 16) {"
        ],
        "added_lines": [
            "\tif ((pps->sps_id<0) || (pps->sps_id >= 16)) {"
        ]
    },
    "is_vul": true,
    "pr_url": null,
    "description": "no more info"
}