{
    "cve_id": "CVE-2023-1801",
    "cwe_ids": [
        "CWE-787"
    ],
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H",
    "cvss_is_v3": true,
    "repo_name": "the-tcpdump-group/tcpdump",
    "commit_msg": "Have a common routine for converting dates and times to strings.\n\nHave a routine that takes a buffer, a strftime format, and a struct tm *\nas arguments, and:\n\n* checks whether the struct tm * is null and, if so, returns a string\nindicating that the date and time couldn't be converted;\n\n* otherwise, passes it to strftime(), along with the buffer and the\nformat argument and, if strftime() returns 0, meaning the string didn't\nfit into the buffer and thus that the buffer's contents are undefined,\nreturns a string indicating that the date and time didn't fit into the\nbuffer;\n\n* otherwise, returns a pointer to the buffer.\n\nCall that routine instead of directly calling strftime() in printers;\nthat prevents printing a buffer with undefined data if the buffer isn't\nbig enough for the string.\n\nAlso, when generating file names using an strftime format, check the\nreturn value of strftime() to make sure the buffer didn't overflow.",
    "commit_hash": "7578e1c04ee280dda50c4c2813e7d55f539c6501",
    "git_url": "https://github.com/the-tcpdump-group/tcpdump/commit/7578e1c04ee280dda50c4c2813e7d55f539c6501",
    "file_path": "print-ahcp.c",
    "func_name": "ahcp_time_print",
    "func_before": "static void\nahcp_time_print(netdissect_options *ndo,\n                const u_char *cp, uint8_t len)\n{\n\ttime_t t;\n\tstruct tm *tm;\n\tchar buf[BUFSIZE];\n\n\tif (len != 4)\n\t\tgoto invalid;\n\tt = GET_BE_U_4(cp);\n\tif (NULL == (tm = gmtime(&t)))\n\t\tND_PRINT(\": gmtime() error\");\n\telse if (0 == strftime(buf, sizeof(buf), \"%Y-%m-%d %H:%M:%S\", tm))\n\t\tND_PRINT(\": strftime() error\");\n\telse\n\t\tND_PRINT(\": %s UTC\", buf);\n\treturn;\n\ninvalid:\n\tnd_print_invalid(ndo);\n\tND_TCHECK_LEN(cp, len);\n}",
    "abstract_func_before": "static void\nahcp_time_print(netdissect_options *VAR_0,\n                const u_char *VAR_1, uint8_t VAR_2)\n{\n\ttime_t VAR_3;\n\tstruct tm *tm;\n\tchar VAR_4[VAR_5];\n\n\tif (VAR_2 != 4)\n\t\tgoto invalid;\n\tVAR_3 = GET_BE_U_4(VAR_1);\n\tif (NULL == (tm = gmtime(&VAR_3)))\n\t\tND_PRINT(\": gmtime() error\");\n\telse if (0 == strftime(VAR_4, sizeof(VAR_4), \"%Y-%m-%d %H:%M:%S\", tm))\n\t\tND_PRINT(\": strftime() error\");\n\telse\n\t\tND_PRINT(\": %s UTC\", VAR_4);\n\treturn;\n\ninvalid:\n\tnd_print_invalid(VAR_0);\n\tND_TCHECK_LEN(VAR_1, VAR_2);\n}",
    "func_graph_path_before": "the-tcpdump-group/tcpdump/7578e1c04ee280dda50c4c2813e7d55f539c6501/print-ahcp.c/vul/before/0.json",
    "func": "static void\nahcp_time_print(netdissect_options *ndo,\n                const u_char *cp, uint8_t len)\n{\n\ttime_t t;\n\tchar buf[sizeof(\"-yyyyyyyyyy-mm-dd hh:mm:ss UTC\")];\n\n\tif (len != 4)\n\t\tgoto invalid;\n\tt = GET_BE_U_4(cp);\n\tND_PRINT(\": %s\",\n\t    nd_format_time(buf, sizeof(buf), \"%Y-%m-%d %H:%M:%S UTC\",\n\t      gmtime(&t)));\n\treturn;\n\ninvalid:\n\tnd_print_invalid(ndo);\n\tND_TCHECK_LEN(cp, len);\n}",
    "abstract_func": "static void\nahcp_time_print(netdissect_options *VAR_0,\n                const u_char *VAR_1, uint8_t VAR_2)\n{\n\ttime_t VAR_3;\n\tchar VAR_4[sizeof(\"-yyyyyyyyyy-mm-dd hh:mm:ss UTC\")];\n\n\tif (VAR_2 != 4)\n\t\tgoto invalid;\n\tVAR_3 = GET_BE_U_4(VAR_1);\n\tND_PRINT(\": %s\",\n\t    nd_format_time(VAR_4, sizeof(VAR_4), \"%Y-%m-%d %H:%M:%S UTC\",\n\t      gmtime(&VAR_3)));\n\treturn;\n\ninvalid:\n\tnd_print_invalid(VAR_0);\n\tND_TCHECK_LEN(VAR_1, VAR_2);\n}",
    "func_graph_path": "the-tcpdump-group/tcpdump/7578e1c04ee280dda50c4c2813e7d55f539c6501/print-ahcp.c/vul/after/0.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -3,18 +3,14 @@\n                 const u_char *cp, uint8_t len)\n {\n \ttime_t t;\n-\tstruct tm *tm;\n-\tchar buf[BUFSIZE];\n+\tchar buf[sizeof(\"-yyyyyyyyyy-mm-dd hh:mm:ss UTC\")];\n \n \tif (len != 4)\n \t\tgoto invalid;\n \tt = GET_BE_U_4(cp);\n-\tif (NULL == (tm = gmtime(&t)))\n-\t\tND_PRINT(\": gmtime() error\");\n-\telse if (0 == strftime(buf, sizeof(buf), \"%Y-%m-%d %H:%M:%S\", tm))\n-\t\tND_PRINT(\": strftime() error\");\n-\telse\n-\t\tND_PRINT(\": %s UTC\", buf);\n+\tND_PRINT(\": %s\",\n+\t    nd_format_time(buf, sizeof(buf), \"%Y-%m-%d %H:%M:%S UTC\",\n+\t      gmtime(&t)));\n \treturn;\n \n invalid:",
    "diff_line_info": {
        "deleted_lines": [
            "\tstruct tm *tm;",
            "\tchar buf[BUFSIZE];",
            "\tif (NULL == (tm = gmtime(&t)))",
            "\t\tND_PRINT(\": gmtime() error\");",
            "\telse if (0 == strftime(buf, sizeof(buf), \"%Y-%m-%d %H:%M:%S\", tm))",
            "\t\tND_PRINT(\": strftime() error\");",
            "\telse",
            "\t\tND_PRINT(\": %s UTC\", buf);"
        ],
        "added_lines": [
            "\tchar buf[sizeof(\"-yyyyyyyyyy-mm-dd hh:mm:ss UTC\")];",
            "\tND_PRINT(\": %s\",",
            "\t    nd_format_time(buf, sizeof(buf), \"%Y-%m-%d %H:%M:%S UTC\",",
            "\t      gmtime(&t)));"
        ]
    },
    "is_vul": true,
    "pr_url": "https://github.com/the-tcpdump-group/tcpdump/pull/1032",
    "description": "Have a routine that takes a buffer, a strftime format, and a struct tm * as arguments, and:\r\n\r\n* checks whether the struct tm * is null and, if so, returns a string indicating that the date and time couldn't be converted;\r\n\r\n* otherwise, passes it to strftime(), along with the buffer and the format argument and, if strftime() returns 0, meaning the string didn't fit into the buffer and thus that the buffer's contents are undefined, returns a string indicating that the date and time didn't fit into the buffer;\r\n\r\n* otherwise, returns a pointer to the buffer.\r\n\r\nCall this routine instead of directly calling strftime() in printers; that prevents printing a buffer with undefined data if the buffer isn't big enough for the string.\r\n\r\nAlso, when generating file names using an strftime format, check the return value of strftime() to make sure the buffer didn't overflow."
}