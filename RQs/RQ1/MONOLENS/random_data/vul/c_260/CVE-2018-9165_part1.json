{
    "cve_id": "CVE-2018-9165",
    "cwe_ids": [
        "CWE-476"
    ],
    "cvss_vector": "AV:N/AC:M/Au:N/C:N/I:N/A:P",
    "cvss_is_v3": false,
    "repo_name": "libming",
    "commit_msg": "Fix null pointer dereference in getName/getString\n\nWhenever getString or getName are called with an act such that act->p.String\nis a NULL pointer, a NULL pointer dereference might happen\n(strlen(act->p.string) is called).\n\nIn this commit we add checks at the beginning of the PUSH_STRING block so\nthat a warning is displayed and an empty string is returned in this case.\n\nThis patch fixes #121.",
    "commit_hash": "358abc21a7cb9286288ab0812231da39e31144bb",
    "git_url": "https://github.com/libming/libming/commit/358abc21a7cb9286288ab0812231da39e31144bb",
    "file_path": "util/decompile.c",
    "func_name": "getName",
    "func_before": "static char *\ngetName(struct SWF_ACTIONPUSHPARAM *act)\n{\n\tchar *t;\n\n\tswitch( act->Type ) \t\n\t{\n\tcase PUSH_STRING: /* STRING */\n\t\tt=malloc(strlen(act->p.String)+3); \n\t\t/*\n\t\tstrcpy(t,\"\\\"\");\n\t\tstrcat(t,act->p.String);\n\t\tstrcat(t,\"\\\"\");\n\t\t*/\n\t\tstrcpy(t,act->p.String);\n\t\tif(strlen(t)) /* Not a zero length string */\n\t\t\treturn t;\n\t\telse\n\t\t\treturn \"this\";\n#if 0\n\t  case 4: /* REGISTER */\n                t=malloc(4); /* Rdd */\n  \t\tsprintf(t,\"R%d\", act->p.RegisterNumber );\n  \t\treturn t;\n#endif\n\tcase PUSH_CONSTANT: /* CONSTANT8 */\n\t\tif (act->p.Constant8 > poolcounter)\n\t\t{\n\t\t        SWF_warn(\"WARNING: retrieving constants not present in the pool.\\n\");\n\t\t        break;\n\t\t}\n\t\tt=malloc(strlenext(pool[act->p.Constant8])+1);\n\t\tstrcpyext(t,pool[act->p.Constant8]);\n\t\tif(strlen(t)) /* Not a zero length string */\n\t\t\treturn t;\n\t\telse\n\t\t{\n\t\t\tt=realloc(t,6);\n\t\t\treturn strcpy(t,\"this\");\n\t\t}\n\tcase PUSH_CONSTANT16: /* CONSTANT16 */\n\t\tif (act->p.Constant16 > poolcounter)\n\t\t{\n\t\t        SWF_warn(\"WARNING: retrieving constants not present in the pool.\\n\");\n\t\t        break;\n\t\t}\n\t\tt=malloc(strlenext(pool[act->p.Constant16])+1);\n\t\tstrcpyext(t,pool[act->p.Constant16]);\n\t\tif(strlen(t)) /* Not a zero length string */\n\t\t\treturn t;\n\t\telse\n\t\t{\n\t\t\tt=realloc(t,6);\n\t\t\treturn strcpy(t,\"this\");\n\t\t}\n\tdefault: \n\t\treturn getString(act);\n\t}\n\n\tt = malloc(sizeof(char));\n\tstrcpyext(t,\"\");\n\n\treturn t;\n}",
    "abstract_func_before": "static char *\ngetName(struct SWF_ACTIONPUSHPARAM *VAR_0)\n{\n\tchar *VAR_1;\n\n\tswitch( VAR_0->Type ) \t\n\t{\n\tcase VAR_2: /* COMMENT_0 */\n\t\tVAR_1=malloc(strlen(VAR_0->p.String)+3); \n\t\t/* COMMENT_1 */\n                 \n                          \n                 \n    \n\t\tstrcpy(VAR_1,VAR_0->p.String);\n\t\tif(strlen(VAR_1)) /* COMMENT_6 */\n\t\t\treturn VAR_1;\n\t\telse\n\t\t\treturn \"this\";\n#if 0\n\t  case 4: /* COMMENT_7 */\n                VAR_1=malloc(4); /* COMMENT_8 */\n  \t\tsprintf(VAR_1,\"R%d\", VAR_0->p.RegisterNumber );\n  \t\treturn VAR_1;\n#endif\n\tcase VAR_3: /* COMMENT_9 */\n\t\tif (VAR_0->p.Constant8 > VAR_4)\n\t\t{\n\t\t        SWF_warn(\"WARNING: retrieving constants not present in the pool.\\n\");\n\t\t        break;\n\t\t}\n\t\tVAR_1=malloc(strlenext(VAR_5[VAR_0->p.Constant8])+1);\n\t\tstrcpyext(VAR_1,VAR_5[VAR_0->p.Constant8]);\n\t\tif(strlen(VAR_1)) /* COMMENT_6 */\n\t\t\treturn VAR_1;\n\t\telse\n\t\t{\n\t\t\tVAR_1=realloc(VAR_1,6);\n\t\t\treturn strcpy(VAR_1,\"this\");\n\t\t}\n\tcase VAR_6: /* COMMENT_10 */\n\t\tif (VAR_0->p.Constant16 > VAR_4)\n\t\t{\n\t\t        SWF_warn(\"WARNING: retrieving constants not present in the pool.\\n\");\n\t\t        break;\n\t\t}\n\t\tVAR_1=malloc(strlenext(VAR_5[VAR_0->p.Constant16])+1);\n\t\tstrcpyext(VAR_1,VAR_5[VAR_0->p.Constant16]);\n\t\tif(strlen(VAR_1)) /* COMMENT_6 */\n\t\t\treturn VAR_1;\n\t\telse\n\t\t{\n\t\t\tVAR_1=realloc(VAR_1,6);\n\t\t\treturn strcpy(VAR_1,\"this\");\n\t\t}\n\tdefault: \n\t\treturn getString(VAR_0);\n\t}\n\n\tVAR_1 = malloc(sizeof(char));\n\tstrcpyext(VAR_1,\"\");\n\n\treturn VAR_1;\n}",
    "func_graph_path_before": "libming/358abc21a7cb9286288ab0812231da39e31144bb/decompile.c/vul/before/0.json",
    "func": "static char *\ngetName(struct SWF_ACTIONPUSHPARAM *act)\n{\n\tchar *t;\n\n\tswitch( act->Type ) \t\n\t{\n\tcase PUSH_STRING: /* STRING */\n\t\tif (!act->p.String) /* Not a NULL string */\n\t\t{\n\t\t        SWF_warn(\"WARNING: Call to getName with NULL string.\\n\");\n\t\t        break;\n\t\t}\n\t\telse if (strlen(act->p.String)) /* Not a zero length string */\n\t\t{\n\t\t        t=malloc(strlen(act->p.String)+3);\n\t\t        strcpyext(t,act->p.String);\n\t\t        return t;\n\t\t}\n\t\telse\n\t\t{\n\t\t        char *return_string = \"this\";\n\t                t=malloc(strlen(return_string)+1); /* string length + \\0 */\n\t                strcpyext(t,return_string);\n\t\t\treturn t;\n\t\t}\n#if 0\n\t  case 4: /* REGISTER */\n                t=malloc(4); /* Rdd */\n  \t\tsprintf(t,\"R%d\", act->p.RegisterNumber );\n  \t\treturn t;\n#endif\n\tcase PUSH_CONSTANT: /* CONSTANT8 */\n\t\tif (act->p.Constant8 > poolcounter)\n\t\t{\n\t\t        SWF_warn(\"WARNING: retrieving constants not present in the pool.\\n\");\n\t\t        break;\n\t\t}\n\t\tt=malloc(strlenext(pool[act->p.Constant8])+1);\n\t\tstrcpyext(t,pool[act->p.Constant8]);\n\t\tif(strlen(t)) /* Not a zero length string */\n\t\t\treturn t;\n\t\telse\n\t\t{\n\t\t\tt=realloc(t,6);\n\t\t\treturn strcpy(t,\"this\");\n\t\t}\n\tcase PUSH_CONSTANT16: /* CONSTANT16 */\n\t\tif (act->p.Constant16 > poolcounter)\n\t\t{\n\t\t        SWF_warn(\"WARNING: retrieving constants not present in the pool.\\n\");\n\t\t        break;\n\t\t}\n\t\tt=malloc(strlenext(pool[act->p.Constant16])+1);\n\t\tstrcpyext(t,pool[act->p.Constant16]);\n\t\tif(strlen(t)) /* Not a zero length string */\n\t\t\treturn t;\n\t\telse\n\t\t{\n\t\t\tt=realloc(t,6);\n\t\t\treturn strcpy(t,\"this\");\n\t\t}\n\tdefault: \n\t\treturn getString(act);\n\t}\n\n\tt = malloc(sizeof(char));\n\tstrcpyext(t,\"\");\n\n\treturn t;\n}",
    "abstract_func": "static char *\ngetName(struct SWF_ACTIONPUSHPARAM *VAR_0)\n{\n\tchar *VAR_1;\n\n\tswitch( VAR_0->Type ) \t\n\t{\n\tcase VAR_2: /* COMMENT_0 */\n\t\tif (!VAR_0->p.String) /* COMMENT_1 */\n\t\t{\n\t\t        SWF_warn(\"WARNING: Call to getName with NULL string.\\n\");\n\t\t        break;\n\t\t}\n\t\telse if (strlen(VAR_0->p.String)) /* COMMENT_2 */\n\t\t{\n\t\t        VAR_1=malloc(strlen(VAR_0->p.String)+3);\n\t\t        strcpyext(VAR_1,VAR_0->p.String);\n\t\t        return VAR_1;\n\t\t}\n\t\telse\n\t\t{\n\t\t        char *VAR_3 = \"this\";\n\t                VAR_1=malloc(strlen(VAR_3)+1); /* COMMENT_3 */\n\t                strcpyext(VAR_1,VAR_3);\n\t\t\treturn VAR_1;\n\t\t}\n#if 0\n\t  case 4: /* COMMENT_4 */\n                VAR_1=malloc(4); /* COMMENT_5 */\n  \t\tsprintf(VAR_1,\"R%d\", VAR_0->p.RegisterNumber );\n  \t\treturn VAR_1;\n#endif\n\tcase VAR_4: /* COMMENT_6 */\n\t\tif (VAR_0->p.Constant8 > VAR_5)\n\t\t{\n\t\t        SWF_warn(\"WARNING: retrieving constants not present in the pool.\\n\");\n\t\t        break;\n\t\t}\n\t\tVAR_1=malloc(strlenext(VAR_6[VAR_0->p.Constant8])+1);\n\t\tstrcpyext(VAR_1,VAR_6[VAR_0->p.Constant8]);\n\t\tif(strlen(VAR_1)) /* COMMENT_2 */\n\t\t\treturn VAR_1;\n\t\telse\n\t\t{\n\t\t\tVAR_1=realloc(VAR_1,6);\n\t\t\treturn strcpy(VAR_1,\"this\");\n\t\t}\n\tcase VAR_7: /* COMMENT_7 */\n\t\tif (VAR_0->p.Constant16 > VAR_5)\n\t\t{\n\t\t        SWF_warn(\"WARNING: retrieving constants not present in the pool.\\n\");\n\t\t        break;\n\t\t}\n\t\tVAR_1=malloc(strlenext(VAR_6[VAR_0->p.Constant16])+1);\n\t\tstrcpyext(VAR_1,VAR_6[VAR_0->p.Constant16]);\n\t\tif(strlen(VAR_1)) /* COMMENT_2 */\n\t\t\treturn VAR_1;\n\t\telse\n\t\t{\n\t\t\tVAR_1=realloc(VAR_1,6);\n\t\t\treturn strcpy(VAR_1,\"this\");\n\t\t}\n\tdefault: \n\t\treturn getString(VAR_0);\n\t}\n\n\tVAR_1 = malloc(sizeof(char));\n\tstrcpyext(VAR_1,\"\");\n\n\treturn VAR_1;\n}",
    "func_graph_path": "libming/358abc21a7cb9286288ab0812231da39e31144bb/decompile.c/vul/after/0.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -6,17 +6,24 @@\n \tswitch( act->Type ) \t\n \t{\n \tcase PUSH_STRING: /* STRING */\n-\t\tt=malloc(strlen(act->p.String)+3); \n-\t\t/*\n-\t\tstrcpy(t,\"\\\"\");\n-\t\tstrcat(t,act->p.String);\n-\t\tstrcat(t,\"\\\"\");\n-\t\t*/\n-\t\tstrcpy(t,act->p.String);\n-\t\tif(strlen(t)) /* Not a zero length string */\n+\t\tif (!act->p.String) /* Not a NULL string */\n+\t\t{\n+\t\t        SWF_warn(\"WARNING: Call to getName with NULL string.\\n\");\n+\t\t        break;\n+\t\t}\n+\t\telse if (strlen(act->p.String)) /* Not a zero length string */\n+\t\t{\n+\t\t        t=malloc(strlen(act->p.String)+3);\n+\t\t        strcpyext(t,act->p.String);\n+\t\t        return t;\n+\t\t}\n+\t\telse\n+\t\t{\n+\t\t        char *return_string = \"this\";\n+\t                t=malloc(strlen(return_string)+1); /* string length + \\0 */\n+\t                strcpyext(t,return_string);\n \t\t\treturn t;\n-\t\telse\n-\t\t\treturn \"this\";\n+\t\t}\n #if 0\n \t  case 4: /* REGISTER */\n                 t=malloc(4); /* Rdd */",
    "diff_line_info": {
        "deleted_lines": [
            "\t\tt=malloc(strlen(act->p.String)+3); ",
            "\t\t/*",
            "\t\tstrcpy(t,\"\\\"\");",
            "\t\tstrcat(t,act->p.String);",
            "\t\tstrcat(t,\"\\\"\");",
            "\t\t*/",
            "\t\tstrcpy(t,act->p.String);",
            "\t\tif(strlen(t)) /* Not a zero length string */",
            "\t\telse",
            "\t\t\treturn \"this\";"
        ],
        "added_lines": [
            "\t\tif (!act->p.String) /* Not a NULL string */",
            "\t\t{",
            "\t\t        SWF_warn(\"WARNING: Call to getName with NULL string.\\n\");",
            "\t\t        break;",
            "\t\t}",
            "\t\telse if (strlen(act->p.String)) /* Not a zero length string */",
            "\t\t{",
            "\t\t        t=malloc(strlen(act->p.String)+3);",
            "\t\t        strcpyext(t,act->p.String);",
            "\t\t        return t;",
            "\t\t}",
            "\t\telse",
            "\t\t{",
            "\t\t        char *return_string = \"this\";",
            "\t                t=malloc(strlen(return_string)+1); /* string length + \\0 */",
            "\t                strcpyext(t,return_string);",
            "\t\t}"
        ]
    },
    "is_vul": true,
    "pr_url": "https://github.com/libming/libming/pull/127",
    "description": "Whenever `getString` or `getName` are called with an act such that `act->p.String` is a NULL pointer, a NULL pointer dereference might happen (`strlen(act->p.string)` is called).\r\n\r\nIn this commit we add checks at the beginning of the `PUSH_STRING` block so that a warning is displayed and an empty string is returned in this case.\r\n\r\nThis PR (partially) fixes #121. In fact I am still working on another patch which would involve patching `pushdup` to do deep copies instead of shallow copies, but before I will have to analyze the specification in order to be able to clearly state which interpretation is the right one."
}