{
    "cve_id": "CVE-2021-46499",
    "cwe_ids": [
        "CWE-416"
    ],
    "cvss_vector": "AV:N/AC:M/Au:N/C:N/I:N/A:P",
    "cvss_is_v3": false,
    "repo_name": "pcmacdon/jsish",
    "commit_msg": "Fixes #76\n\nFossilOrigin-Name: 1a370f5a3fc952b9f433f5607a68f83871294222452b85a5092bde44c309a7ce",
    "commit_hash": "9c9dbe59760a660e21d69d5cf6007c9ccbb5c9a3",
    "git_url": "https://github.com/pcmacdon/jsish/commit/9c9dbe59760a660e21d69d5cf6007c9ccbb5c9a3",
    "file_path": "src/jsiObj.c",
    "func_name": "ObjListifyCallback",
    "func_before": "static Jsi_RC ObjListifyCallback(Jsi_Tree *tree, Jsi_TreeEntry *hPtr, void *data)\n{\n    Jsi_Interp *interp = tree->opts.interp;\n    Jsi_Obj *obj = (Jsi_Obj*)data;\n    int n;\n    if (!hPtr->f.bits.dontenum) {\n        char *ep = NULL, *cp = (char*)Jsi_TreeKeyGet(hPtr);\n        if (!cp || !isdigit(*cp))\n            return JSI_OK;\n        n = (int)strtol(cp, &ep, 0);\n        if (n<0 || (uint)n >= interp->maxArrayList)\n            return JSI_OK;\n        hPtr->f.bits.isarrlist = 1;\n        if (Jsi_ObjArraySizer(interp, obj, n) <= 0) \n            return Jsi_LogError(\"too long\");\n        obj->arr[n] = (Jsi_Value*)Jsi_TreeValueGet(hPtr);\n       // obj->arrCnt++;\n    }\n    return JSI_OK;\n}",
    "abstract_func_before": "static Jsi_RC ObjListifyCallback(Jsi_Tree *VAR_0, Jsi_TreeEntry *VAR_1, void *VAR_2)\n{\n    Jsi_Interp *VAR_3 = VAR_0->opts.interp;\n    Jsi_Obj *VAR_4 = (Jsi_Obj*)VAR_2;\n    int VAR_5;\n    if (!VAR_1->f.bits.dontenum) {\n        char *VAR_6 = NULL, *VAR_7 = (char*)Jsi_TreeKeyGet(VAR_1);\n        if (!VAR_7 || !isdigit(*VAR_7))\n            return VAR_8;\n        VAR_5 = (int)strtol(VAR_7, &VAR_6, 0);\n        if (VAR_5<0 || (uint)VAR_5 >= VAR_3->maxArrayList)\n            return VAR_8;\n        VAR_1->f.bits.isarrlist = 1;\n        if (Jsi_ObjArraySizer(VAR_3, VAR_4, VAR_5) <= 0) \n            return Jsi_LogError(\"too long\");\n        VAR_4->arr[VAR_5] = (Jsi_Value*)Jsi_TreeValueGet(VAR_1);\n       /* COMMENT_0 */\n    }\n    return VAR_8;\n}",
    "func_graph_path_before": "pcmacdon/jsish/9c9dbe59760a660e21d69d5cf6007c9ccbb5c9a3/jsiObj.c/vul/before/1.json",
    "func": "static Jsi_RC ObjListifyCallback(Jsi_Tree *tree, Jsi_TreeEntry *hPtr, void *data)\n{\n    Jsi_Interp *interp = tree->opts.interp;\n    Jsi_Obj *obj = (Jsi_Obj*)data;\n    int n;\n    if (!hPtr->f.bits.dontenum) {\n        char *ep = NULL, *cp = (char*)Jsi_TreeKeyGet(hPtr);\n        if (!cp || !isdigit(*cp))\n            return JSI_OK;\n        n = (int)strtol(cp, &ep, 0);\n        if (n<0 || (uint)n >= interp->maxArrayList)\n            return JSI_OK;\n        hPtr->f.bits.isarrlist = 1;\n        if (Jsi_ObjArraySizer(interp, obj, n+1) <= 0) \n            return Jsi_LogError(\"too long\");\n        Jsi_Value* v = (Jsi_Value*)Jsi_TreeValueGet(hPtr);\n        obj->arr[n] = v;\n        if (v)\n            Jsi_IncrRefCount(interp, v);\n       // obj->arrCnt++;\n    }\n    return JSI_OK;\n}",
    "abstract_func": "static Jsi_RC ObjListifyCallback(Jsi_Tree *VAR_0, Jsi_TreeEntry *VAR_1, void *VAR_2)\n{\n    Jsi_Interp *VAR_3 = VAR_0->opts.interp;\n    Jsi_Obj *VAR_4 = (Jsi_Obj*)VAR_2;\n    int VAR_5;\n    if (!VAR_1->f.bits.dontenum) {\n        char *VAR_6 = NULL, *VAR_7 = (char*)Jsi_TreeKeyGet(VAR_1);\n        if (!VAR_7 || !isdigit(*VAR_7))\n            return VAR_8;\n        VAR_5 = (int)strtol(VAR_7, &VAR_6, 0);\n        if (VAR_5<0 || (uint)VAR_5 >= VAR_3->maxArrayList)\n            return VAR_8;\n        VAR_1->f.bits.isarrlist = 1;\n        if (Jsi_ObjArraySizer(VAR_3, VAR_4, VAR_5+1) <= 0) \n            return Jsi_LogError(\"too long\");\n        Jsi_Value* VAR_9 = (Jsi_Value*)Jsi_TreeValueGet(VAR_1);\n        VAR_4->arr[VAR_5] = VAR_9;\n        if (VAR_9)\n            Jsi_IncrRefCount(VAR_3, VAR_9);\n       /* COMMENT_0 */\n    }\n    return VAR_8;\n}",
    "func_graph_path": "pcmacdon/jsish/9c9dbe59760a660e21d69d5cf6007c9ccbb5c9a3/jsiObj.c/vul/after/1.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -11,9 +11,12 @@\n         if (n<0 || (uint)n >= interp->maxArrayList)\n             return JSI_OK;\n         hPtr->f.bits.isarrlist = 1;\n-        if (Jsi_ObjArraySizer(interp, obj, n) <= 0) \n+        if (Jsi_ObjArraySizer(interp, obj, n+1) <= 0) \n             return Jsi_LogError(\"too long\");\n-        obj->arr[n] = (Jsi_Value*)Jsi_TreeValueGet(hPtr);\n+        Jsi_Value* v = (Jsi_Value*)Jsi_TreeValueGet(hPtr);\n+        obj->arr[n] = v;\n+        if (v)\n+            Jsi_IncrRefCount(interp, v);\n        // obj->arrCnt++;\n     }\n     return JSI_OK;",
    "diff_line_info": {
        "deleted_lines": [
            "        if (Jsi_ObjArraySizer(interp, obj, n) <= 0) ",
            "        obj->arr[n] = (Jsi_Value*)Jsi_TreeValueGet(hPtr);"
        ],
        "added_lines": [
            "        if (Jsi_ObjArraySizer(interp, obj, n+1) <= 0) ",
            "        Jsi_Value* v = (Jsi_Value*)Jsi_TreeValueGet(hPtr);",
            "        obj->arr[n] = v;",
            "        if (v)",
            "            Jsi_IncrRefCount(interp, v);"
        ]
    },
    "is_vul": true,
    "pr_url": null,
    "description": "no more info"
}