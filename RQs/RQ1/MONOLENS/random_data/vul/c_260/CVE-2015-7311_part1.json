{
    "cve_id": "CVE-2015-7311",
    "cwe_ids": [
        "CWE-17"
    ],
    "cvss_vector": "AV:L/AC:L/Au:N/C:N/I:P/A:P",
    "cvss_is_v3": false,
    "repo_name": "xen-project/xen",
    "commit_msg": "libxl: handle read-only drives with qemu-xen\n\nThe current libxl code doesn't deal with read-only drives at all.\n\nUpstream QEMU and qemu-xen only support read-only cdrom drives: make\nsure to specify \"readonly=on\" for cdrom drives and return error in case\nthe user requested a non-cdrom read-only drive.\n\nThis is XSA-142, discovered by Lin Liu\n(https://bugzilla.redhat.com/show_bug.cgi?id=1257893).\n\nSigned-off-by: Stefano Stabellini <stefano.stabellini@eu.citrix.com>\nAcked-by: Ian Jackson <ian.jackson@eu.citrix.com>",
    "commit_hash": "fa30003c13577b7ae4bbb46252ec1cbabd65c645",
    "git_url": "https://github.com/xen-project/xen/commit/fa30003c13577b7ae4bbb46252ec1cbabd65c645",
    "file_path": "tools/libxl/libxl_dm.c",
    "func_name": "libxl__build_device_model_args_new",
    "func_before": "static int libxl__build_device_model_args_new(libxl__gc *gc,\n                                        const char *dm, int guest_domid,\n                                        const libxl_domain_config *guest_config,\n                                        char ***args, char ***envs,\n                                        const libxl__domain_build_state *state,\n                                        int *dm_state_fd)\n{\n    libxl_ctx *ctx = libxl__gc_owner(gc);\n    const libxl_domain_create_info *c_info = &guest_config->c_info;\n    const libxl_domain_build_info *b_info = &guest_config->b_info;\n    const libxl_device_disk *disks = guest_config->disks;\n    const libxl_device_nic *nics = guest_config->nics;\n    const int num_disks = guest_config->num_disks;\n    const int num_nics = guest_config->num_nics;\n    const libxl_vnc_info *vnc = libxl__dm_vnc(guest_config);\n    const libxl_sdl_info *sdl = dm_sdl(guest_config);\n    const char *keymap = dm_keymap(guest_config);\n    char *machinearg;\n    flexarray_t *dm_args, *dm_envs;\n    int i, connection, devid;\n    uint64_t ram_size;\n    const char *path, *chardev;\n\n    dm_args = flexarray_make(gc, 16, 1);\n    dm_envs = flexarray_make(gc, 16, 1);\n\n    flexarray_vappend(dm_args, dm,\n                      \"-xen-domid\",\n                      libxl__sprintf(gc, \"%d\", guest_domid), NULL);\n\n    flexarray_append(dm_args, \"-chardev\");\n    flexarray_append(dm_args,\n                     libxl__sprintf(gc, \"socket,id=libxl-cmd,\"\n                                    \"path=%s/qmp-libxl-%d,server,nowait\",\n                                    libxl__run_dir_path(), guest_domid));\n\n    flexarray_append(dm_args, \"-no-shutdown\");\n    flexarray_append(dm_args, \"-mon\");\n    flexarray_append(dm_args, \"chardev=libxl-cmd,mode=control\");\n\n    flexarray_append(dm_args, \"-chardev\");\n    flexarray_append(dm_args,\n                     libxl__sprintf(gc, \"socket,id=libxenstat-cmd,\"\n                                    \"path=%s/qmp-libxenstat-%d,server,nowait\",\n                                    libxl__run_dir_path(), guest_domid));\n\n    flexarray_append(dm_args, \"-mon\");\n    flexarray_append(dm_args, \"chardev=libxenstat-cmd,mode=control\");\n\n    for (i = 0; i < guest_config->num_channels; i++) {\n        connection = guest_config->channels[i].connection;\n        devid = guest_config->channels[i].devid;\n        switch (connection) {\n            case LIBXL_CHANNEL_CONNECTION_PTY:\n                chardev = GCSPRINTF(\"pty,id=libxl-channel%d\", devid);\n                break;\n            case LIBXL_CHANNEL_CONNECTION_SOCKET:\n                path = guest_config->channels[i].u.socket.path;\n                chardev = GCSPRINTF(\"socket,id=libxl-channel%d,path=%s,\"\n                                    \"server,nowait\", devid, path);\n                break;\n            default:\n                /* We've forgotten to add the clause */\n                LOG(ERROR, \"%s: unknown channel connection %d\",\n                    __func__, connection);\n                return ERROR_INVAL;\n        }\n        flexarray_append(dm_args, \"-chardev\");\n        flexarray_append(dm_args, (void*)chardev);\n    }\n\n    /*\n     * Remove default devices created by qemu. Qemu will create only devices\n     * defined by xen, since the devices not defined by xen are not usable.\n     */\n    flexarray_append(dm_args, \"-nodefaults\");\n\n    if (b_info->type == LIBXL_DOMAIN_TYPE_PV) {\n        flexarray_append(dm_args, \"-xen-attach\");\n    }\n\n    if (c_info->name) {\n        flexarray_vappend(dm_args, \"-name\", c_info->name, NULL);\n    }\n\n    if (vnc) {\n        char *vncarg = NULL;\n\n        flexarray_append(dm_args, \"-vnc\");\n\n        /*\n         * If vnc->listen is present and contains a :, and\n         *  - vnc->display is 0, use vnc->listen\n         *  - vnc->display is non-zero, be confused\n         * If vnc->listen is present but doesn't, use vnc->listen:vnc->display.\n         * If vnc->listen is not present, use 127.0.0.1:vnc->display\n         * (Remembering that vnc->display already defaults to 0.)\n         */\n        if (vnc->listen) {\n            if (strchr(vnc->listen, ':') != NULL) {\n                if (vnc->display) {\n                    LOG(ERROR, \"vncdisplay set, vnclisten contains display\");\n                    return ERROR_INVAL;\n                }\n                vncarg = vnc->listen;\n            } else {\n                vncarg = libxl__sprintf(gc, \"%s:%d\", vnc->listen,\n                                        vnc->display);\n            }\n        } else\n            vncarg = libxl__sprintf(gc, \"127.0.0.1:%d\", vnc->display);\n\n        if (vnc->passwd && vnc->passwd[0]) {\n            vncarg = libxl__sprintf(gc, \"%s,password\", vncarg);\n        }\n\n        if (libxl_defbool_val(vnc->findunused)) {\n            /* This option asks to QEMU to try this number of port before to\n             * give up.  So QEMU will try ports between $display and $display +\n             * 99.  This option needs to be the last one of the vnc options. */\n            vncarg = libxl__sprintf(gc, \"%s,to=99\", vncarg);\n        }\n\n        flexarray_append(dm_args, vncarg);\n    } else\n        /*\n         * Ensure that by default no vnc server is created.\n         */\n        flexarray_append_pair(dm_args, \"-vnc\", \"none\");\n\n    /*\n     * Ensure that by default no display backend is created. Further\n     * options given below might then enable more.\n     */\n    flexarray_append_pair(dm_args, \"-display\", \"none\");\n\n    if (sdl) {\n        flexarray_append(dm_args, \"-sdl\");\n        if (sdl->display)\n            flexarray_append_pair(dm_envs, \"DISPLAY\", sdl->display);\n        if (sdl->xauthority)\n            flexarray_append_pair(dm_envs, \"XAUTHORITY\", sdl->xauthority);\n    }\n\n    if (keymap) {\n        flexarray_vappend(dm_args, \"-k\", keymap, NULL);\n    }\n\n    if (b_info->type == LIBXL_DOMAIN_TYPE_HVM) {\n        int ioemu_nics = 0;\n\n        if (b_info->kernel)\n            flexarray_vappend(dm_args, \"-kernel\", b_info->kernel, NULL);\n\n        if (b_info->ramdisk)\n            flexarray_vappend(dm_args, \"-initrd\", b_info->ramdisk, NULL);\n\n        if (b_info->cmdline)\n            flexarray_vappend(dm_args, \"-append\", b_info->cmdline, NULL);\n\n        if (b_info->u.hvm.serial || b_info->u.hvm.serial_list) {\n            if ( b_info->u.hvm.serial && b_info->u.hvm.serial_list )\n            {\n                LOG(ERROR, \"Both serial and serial_list set\");\n                return ERROR_INVAL;\n            }\n            if (b_info->u.hvm.serial) {\n                flexarray_vappend(dm_args,\n                                  \"-serial\", b_info->u.hvm.serial, NULL);\n            } else if (b_info->u.hvm.serial_list) {\n                char **p;\n                for (p = b_info->u.hvm.serial_list;\n                     *p;\n                     p++) {\n                    flexarray_vappend(dm_args,\n                                      \"-serial\",\n                                      *p, NULL);\n                }\n            }\n        }\n\n        if (libxl_defbool_val(b_info->u.hvm.nographic) && (!sdl && !vnc)) {\n            flexarray_append(dm_args, \"-nographic\");\n        }\n\n        if (libxl_defbool_val(b_info->u.hvm.spice.enable)) {\n            const libxl_spice_info *spice = &b_info->u.hvm.spice;\n            char *spiceoptions = dm_spice_options(gc, spice);\n            if (!spiceoptions)\n                return ERROR_INVAL;\n\n            flexarray_append(dm_args, \"-spice\");\n            flexarray_append(dm_args, spiceoptions);\n            if (libxl_defbool_val(b_info->u.hvm.spice.vdagent)) {\n                flexarray_vappend(dm_args, \"-device\", \"virtio-serial\",\n                    \"-chardev\", \"spicevmc,id=vdagent,name=vdagent\", \"-device\",\n                    \"virtserialport,chardev=vdagent,name=com.redhat.spice.0\",\n                    NULL);\n            }\n        }\n\n        switch (b_info->u.hvm.vga.kind) {\n        case LIBXL_VGA_INTERFACE_TYPE_STD:\n            flexarray_append_pair(dm_args, \"-device\",\n                GCSPRINTF(\"VGA,vgamem_mb=%d\",\n                libxl__sizekb_to_mb(b_info->video_memkb)));\n            break;\n        case LIBXL_VGA_INTERFACE_TYPE_CIRRUS:\n            flexarray_append_pair(dm_args, \"-device\",\n                GCSPRINTF(\"cirrus-vga,vgamem_mb=%d\",\n                libxl__sizekb_to_mb(b_info->video_memkb)));\n            break;\n        case LIBXL_VGA_INTERFACE_TYPE_NONE:\n            break;\n        case LIBXL_VGA_INTERFACE_TYPE_QXL:\n            /* QXL have 2 ram regions, ram and vram */\n            flexarray_append_pair(dm_args, \"-device\",\n                GCSPRINTF(\"qxl-vga,vram_size_mb=%\"PRIu64\",ram_size_mb=%\"PRIu64,\n                (b_info->video_memkb/2/1024), (b_info->video_memkb/2/1024) ) );\n            break;\n        }\n\n        if (b_info->u.hvm.boot) {\n            flexarray_vappend(dm_args, \"-boot\",\n                    libxl__sprintf(gc, \"order=%s\", b_info->u.hvm.boot), NULL);\n        }\n        if (libxl_defbool_val(b_info->u.hvm.usb)\n            || b_info->u.hvm.usbdevice\n            || b_info->u.hvm.usbdevice_list) {\n            if ( b_info->u.hvm.usbdevice && b_info->u.hvm.usbdevice_list )\n            {\n                LOG(ERROR, \"Both usbdevice and usbdevice_list set\");\n                return ERROR_INVAL;\n            }\n            flexarray_append(dm_args, \"-usb\");\n            if (b_info->u.hvm.usbdevice) {\n                flexarray_vappend(dm_args,\n                                  \"-usbdevice\", b_info->u.hvm.usbdevice, NULL);\n            } else if (b_info->u.hvm.usbdevice_list) {\n                char **p;\n                for (p = b_info->u.hvm.usbdevice_list;\n                     *p;\n                     p++) {\n                    flexarray_vappend(dm_args,\n                                      \"-usbdevice\",\n                                      *p, NULL);\n                }\n            }\n        } else if (b_info->u.hvm.usbversion) {\n            switch (b_info->u.hvm.usbversion) {\n            case 1:\n                flexarray_vappend(dm_args,\n                    \"-device\", \"piix3-usb-uhci,id=usb\", NULL);\n                break;\n            case 2:\n                flexarray_append_pair(dm_args, \"-device\",\n                    \"ich9-usb-ehci1,id=usb,addr=0x1d.0x7,multifunction=on\");\n                for (i = 1; i < 4; i++)\n                    flexarray_append_pair(dm_args, \"-device\",\n                        GCSPRINTF(\"ich9-usb-uhci%d,masterbus=usb.0,\"\n                        \"firstport=%d,addr=0x1d.%#x,multifunction=on\",\n                        i, 2*(i-1), i-1));\n                break;\n            case 3:\n                flexarray_vappend(dm_args,\n                    \"-device\", \"nec-usb-xhci,id=usb\", NULL);\n                break;\n            default:\n                LOG(ERROR, \"usbversion parameter is invalid, \"\n                    \"must be between 1 and 3\");\n                return ERROR_INVAL;\n            }\n            if (b_info->u.hvm.spice.usbredirection >= 0 &&\n                b_info->u.hvm.spice.usbredirection < 5) {\n                for (i = 1; i <= b_info->u.hvm.spice.usbredirection; i++)\n                    flexarray_vappend(dm_args, \"-chardev\", libxl__sprintf(gc,\n                        \"spicevmc,name=usbredir,id=usbrc%d\", i), \"-device\",\n                        libxl__sprintf(gc, \"usb-redir,chardev=usbrc%d,\"\n                        \"id=usbrc%d\", i, i), NULL);\n            } else {\n                LOG(ERROR, \"usbredirection parameter is invalid, \"\n                    \"it must be between 1 and 4\");\n                return ERROR_INVAL;\n            }\n        }\n        if (b_info->u.hvm.soundhw) {\n            flexarray_vappend(dm_args, \"-soundhw\", b_info->u.hvm.soundhw, NULL);\n        }\n        if (!libxl_defbool_val(b_info->u.hvm.acpi)) {\n            flexarray_append(dm_args, \"-no-acpi\");\n        }\n        if (b_info->max_vcpus > 1) {\n            flexarray_append(dm_args, \"-smp\");\n            if (b_info->avail_vcpus.size) {\n                int nr_set_cpus = 0;\n                nr_set_cpus = libxl_bitmap_count_set(&b_info->avail_vcpus);\n\n                flexarray_append(dm_args, libxl__sprintf(gc, \"%d,maxcpus=%d\",\n                                                         nr_set_cpus,\n                                                         b_info->max_vcpus));\n            } else\n                flexarray_append(dm_args, libxl__sprintf(gc, \"%d\",\n                                                         b_info->max_vcpus));\n        }\n        for (i = 0; i < num_nics; i++) {\n            if (nics[i].nictype == LIBXL_NIC_TYPE_VIF_IOEMU) {\n                char *smac = libxl__sprintf(gc,\n                                LIBXL_MAC_FMT, LIBXL_MAC_BYTES(nics[i].mac));\n                const char *ifname = libxl__device_nic_devname(gc,\n                                                guest_domid, nics[i].devid,\n                                                LIBXL_NIC_TYPE_VIF_IOEMU);\n                flexarray_append(dm_args, \"-device\");\n                flexarray_append(dm_args,\n                   libxl__sprintf(gc, \"%s,id=nic%d,netdev=net%d,mac=%s\",\n                                                nics[i].model, nics[i].devid,\n                                                nics[i].devid, smac));\n                flexarray_append(dm_args, \"-netdev\");\n                flexarray_append(dm_args, GCSPRINTF(\n                                          \"type=tap,id=net%d,ifname=%s,\"\n                                          \"script=%s,downscript=%s\",\n                                          nics[i].devid, ifname,\n                                          libxl_tapif_script(gc),\n                                          libxl_tapif_script(gc)));\n                ioemu_nics++;\n            }\n        }\n        /* If we have no emulated nics, tell qemu not to create any */\n        if ( ioemu_nics == 0 ) {\n            flexarray_append(dm_args, \"-net\");\n            flexarray_append(dm_args, \"none\");\n        }\n        if (libxl_defbool_val(b_info->u.hvm.gfx_passthru)) {\n            flexarray_append(dm_args, \"-gfx_passthru\");\n        }\n    } else {\n        if (!sdl && !vnc) {\n            flexarray_append(dm_args, \"-nographic\");\n        }\n    }\n\n    if (state->saved_state) {\n        /* This file descriptor is meant to be used by QEMU */\n        *dm_state_fd = open(state->saved_state, O_RDONLY);\n        flexarray_append(dm_args, \"-incoming\");\n        flexarray_append(dm_args, GCSPRINTF(\"fd:%d\",*dm_state_fd));\n    }\n    for (i = 0; b_info->extra && b_info->extra[i] != NULL; i++)\n        flexarray_append(dm_args, b_info->extra[i]);\n\n    flexarray_append(dm_args, \"-machine\");\n    switch (b_info->type) {\n    case LIBXL_DOMAIN_TYPE_PV:\n        flexarray_append(dm_args, \"xenpv\");\n        for (i = 0; b_info->extra_pv && b_info->extra_pv[i] != NULL; i++)\n            flexarray_append(dm_args, b_info->extra_pv[i]);\n        break;\n    case LIBXL_DOMAIN_TYPE_HVM:\n        if (!libxl_defbool_val(b_info->u.hvm.xen_platform_pci)) {\n            /* Switching here to the machine \"pc\" which does not add\n             * the xen-platform device instead of the default \"xenfv\" machine.\n             */\n            machinearg = libxl__sprintf(gc, \"pc,accel=xen\");\n        } else {\n            machinearg = libxl__sprintf(gc, \"xenfv\");\n        }\n        if (b_info->u.hvm.mmio_hole_memkb) {\n            uint64_t max_ram_below_4g = (1ULL << 32) -\n                (b_info->u.hvm.mmio_hole_memkb << 10);\n\n            if (max_ram_below_4g > HVM_BELOW_4G_MMIO_START) {\n                LOG(WARN, \"mmio_hole_memkb=%\"PRIu64\n                    \" invalid ignored.\\n\",\n                    b_info->u.hvm.mmio_hole_memkb);\n            } else {\n                machinearg = libxl__sprintf(gc, \"%s,max-ram-below-4g=%\"PRIu64,\n                                            machinearg, max_ram_below_4g);\n            }\n        }\n        flexarray_append(dm_args, machinearg);\n        for (i = 0; b_info->extra_hvm && b_info->extra_hvm[i] != NULL; i++)\n            flexarray_append(dm_args, b_info->extra_hvm[i]);\n        break;\n    default:\n        abort();\n    }\n\n    ram_size = libxl__sizekb_to_mb(b_info->max_memkb - b_info->video_memkb);\n    flexarray_append(dm_args, \"-m\");\n    flexarray_append(dm_args, libxl__sprintf(gc, \"%\"PRId64, ram_size));\n\n    if (b_info->type == LIBXL_DOMAIN_TYPE_HVM) {\n        if (b_info->u.hvm.hdtype == LIBXL_HDTYPE_AHCI)\n            flexarray_append_pair(dm_args, \"-device\", \"ahci,id=ahci0\");\n        for (i = 0; i < num_disks; i++) {\n            int disk, part;\n            int dev_number =\n                libxl__device_disk_dev_number(disks[i].vdev, &disk, &part);\n            const char *format = qemu_disk_format_string(disks[i].format);\n            char *drive;\n            const char *pdev_path;\n\n            if (dev_number == -1) {\n                LIBXL__LOG(ctx, LIBXL__LOG_WARNING, \"unable to determine\"\n                           \" disk number for %s\", disks[i].vdev);\n                continue;\n            }\n\n            if (disks[i].is_cdrom) {\n                if (disks[i].format == LIBXL_DISK_FORMAT_EMPTY)\n                    drive = libxl__sprintf\n                        (gc, \"if=ide,index=%d,media=cdrom,cache=writeback,id=ide-%i\",\n                         disk, dev_number);\n                else\n                    drive = libxl__sprintf\n                        (gc, \"file=%s,if=ide,index=%d,media=cdrom,format=%s,cache=writeback,id=ide-%i\",\n                         disks[i].pdev_path, disk, format, dev_number);\n            } else {\n                if (disks[i].format == LIBXL_DISK_FORMAT_EMPTY) {\n                    LIBXL__LOG(ctx, LIBXL__LOG_WARNING, \"cannot support\"\n                               \" empty disk format for %s\", disks[i].vdev);\n                    continue;\n                }\n\n                if (format == NULL) {\n                    LIBXL__LOG(ctx, LIBXL__LOG_WARNING, \"unable to determine\"\n                               \" disk image format %s\", disks[i].vdev);\n                    continue;\n                }\n\n                if (disks[i].backend == LIBXL_DISK_BACKEND_TAP) {\n                    format = qemu_disk_format_string(LIBXL_DISK_FORMAT_RAW);\n                    pdev_path = libxl__blktap_devpath(gc, disks[i].pdev_path,\n                                                      disks[i].format);\n                } else {\n                    pdev_path = disks[i].pdev_path;\n                }\n\n                /*\n                 * Explicit sd disks are passed through as is.\n                 *\n                 * For other disks we translate devices 0..3 into\n                 * hd[a-d] and ignore the rest.\n                 */\n                if (strncmp(disks[i].vdev, \"sd\", 2) == 0)\n                    drive = libxl__sprintf\n                        (gc, \"file=%s,if=scsi,bus=0,unit=%d,format=%s,cache=writeback\",\n                         pdev_path, disk, format);\n                else if (disk < 6 && b_info->u.hvm.hdtype == LIBXL_HDTYPE_AHCI) {\n                    flexarray_vappend(dm_args, \"-drive\",\n                        GCSPRINTF(\"file=%s,if=none,id=ahcidisk-%d,format=%s,cache=writeback\",\n                        pdev_path, disk, format),\n                        \"-device\", GCSPRINTF(\"ide-hd,bus=ahci0.%d,unit=0,drive=ahcidisk-%d\",\n                        disk, disk), NULL);\n                    continue;\n                } else if (disk < 4)\n                    drive = libxl__sprintf\n                        (gc, \"file=%s,if=ide,index=%d,media=disk,format=%s,cache=writeback\",\n                         pdev_path, disk, format);\n                else\n                    continue; /* Do not emulate this disk */\n            }\n\n            flexarray_append(dm_args, \"-drive\");\n            flexarray_append(dm_args, drive);\n        }\n\n        switch (b_info->u.hvm.vendor_device) {\n        case LIBXL_VENDOR_DEVICE_XENSERVER:\n            flexarray_append(dm_args, \"-device\");\n            flexarray_append(dm_args, \"xen-pvdevice,device-id=0xc000\");\n            break;\n        default:\n            break;\n        }\n    }\n    flexarray_append(dm_args, NULL);\n    *args = (char **) flexarray_contents(dm_args);\n    flexarray_append(dm_envs, NULL);\n    if (envs)\n        *envs = (char **) flexarray_contents(dm_envs);\n    return 0;\n}",
    "abstract_func_before": "static int libxl__build_device_model_args_new(libxl__gc *VAR_0,\n                                        const char *VAR_1, int VAR_2,\n                                        const libxl_domain_config *VAR_3,\n                                        char ***VAR_4, char ***VAR_5,\n                                        const libxl__domain_build_state *VAR_6,\n                                        int *VAR_7)\n{\n    libxl_ctx *VAR_8 = libxl__gc_owner(VAR_0);\n    const libxl_domain_create_info *VAR_9 = &VAR_3->c_info;\n    const libxl_domain_build_info *VAR_10 = &VAR_3->b_info;\n    const libxl_device_disk *VAR_11 = VAR_3->disks;\n    const libxl_device_nic *VAR_12 = VAR_3->nics;\n    const int VAR_13 = VAR_3->num_disks;\n    const int VAR_14 = VAR_3->num_nics;\n    const libxl_vnc_info *VAR_15 = libxl__dm_vnc(VAR_3);\n    const libxl_sdl_info *VAR_16 = dm_sdl(VAR_3);\n    const char *VAR_17 = dm_keymap(VAR_3);\n    char *VAR_18;\n    flexarray_t *VAR_19, *VAR_20;\n    int VAR_21, VAR_22, VAR_23;\n    uint64_t VAR_24;\n    const char *VAR_25, *VAR_26;\n\n    VAR_19 = flexarray_make(VAR_0, 16, 1);\n    VAR_20 = flexarray_make(VAR_0, 16, 1);\n\n    flexarray_vappend(VAR_19, VAR_1,\n                      \"-xen-domid\",\n                      libxl__sprintf(VAR_0, \"%d\", VAR_2), NULL);\n\n    flexarray_append(VAR_19, \"-chardev\");\n    flexarray_append(VAR_19,\n                     libxl__sprintf(VAR_0, \"socket,id=libxl-cmd,\"\n                                    \"path=%s/qmp-libxl-%d,server,nowait\",\n                                    libxl__run_dir_path(), VAR_2));\n\n    flexarray_append(VAR_19, \"-no-shutdown\");\n    flexarray_append(VAR_19, \"-mon\");\n    flexarray_append(VAR_19, \"chardev=libxl-cmd,mode=control\");\n\n    flexarray_append(VAR_19, \"-chardev\");\n    flexarray_append(VAR_19,\n                     libxl__sprintf(VAR_0, \"socket,id=libxenstat-cmd,\"\n                                    \"path=%s/qmp-libxenstat-%d,server,nowait\",\n                                    libxl__run_dir_path(), VAR_2));\n\n    flexarray_append(VAR_19, \"-mon\");\n    flexarray_append(VAR_19, \"chardev=libxenstat-cmd,mode=control\");\n\n    for (VAR_21 = 0; VAR_21 < VAR_3->num_channels; VAR_21++) {\n        VAR_22 = VAR_3->channels[VAR_21].connection;\n        VAR_23 = VAR_3->channels[VAR_21].devid;\n        switch (VAR_22) {\n            case VAR_27:\n                VAR_26 = GCSPRINTF(\"pty,id=libxl-channel%d\", VAR_23);\n                break;\n            case VAR_28:\n                VAR_25 = VAR_3->channels[VAR_21].u.socket.path;\n                VAR_26 = GCSPRINTF(\"socket,id=libxl-channel%d,path=%s,\"\n                                    \"server,nowait\", VAR_23, VAR_25);\n                break;\n            default:\n                /* COMMENT_0 */\n                LOG(VAR_29, \"%s: unknown channel connection %d\",\n                    VAR_30, VAR_22);\n                return VAR_31;\n        }\n        flexarray_append(VAR_19, \"-chardev\");\n        flexarray_append(VAR_19, (void*)VAR_26);\n    }\n\n    /* COMMENT_1 */\n                                                                            \n                                                                           \n       \n    flexarray_append(VAR_19, \"-nodefaults\");\n\n    if (VAR_10->type == VAR_32) {\n        flexarray_append(VAR_19, \"-xen-attach\");\n    }\n\n    if (VAR_9->name) {\n        flexarray_vappend(VAR_19, \"-name\", VAR_9->name, NULL);\n    }\n\n    if (VAR_15) {\n        char *VAR_33 = NULL;\n\n        flexarray_append(VAR_19, \"-vnc\");\n\n        /* COMMENT_5 */\n                                                          \n                                                \n                                                   \n                                                                               \n                                                                    \n                                                                 \n           \n        if (VAR_15->listen) {\n            if (strchr(VAR_15->listen, ':') != NULL) {\n                if (VAR_15->display) {\n                    LOG(VAR_29, \"vncdisplay set, vnclisten contains display\");\n                    return VAR_31;\n                }\n                VAR_33 = VAR_15->listen;\n            } else {\n                VAR_33 = libxl__sprintf(VAR_0, \"%s:%d\", VAR_15->listen,\n                                        VAR_15->display);\n            }\n        } else\n            VAR_33 = libxl__sprintf(VAR_0, \"127.0.0.1:%d\", VAR_15->display);\n\n        if (VAR_15->passwd && VAR_15->passwd[0]) {\n            VAR_33 = libxl__sprintf(VAR_0, \"%s,password\", VAR_33);\n        }\n\n        if (libxl_defbool_val(VAR_15->findunused)) {\n            /* COMMENT_13 */\n                                                                               \n                                                                               \n            VAR_33 = libxl__sprintf(VAR_0, \"%s,to=99\", VAR_33);\n        }\n\n        flexarray_append(VAR_19, VAR_33);\n    } else\n        /* COMMENT_16 */\n                                                           \n           \n        flexarray_append_pair(VAR_19, \"-vnc\", \"none\");\n\n    /* COMMENT_19 */\n                                                                    \n                                                  \n       \n    flexarray_append_pair(VAR_19, \"-display\", \"none\");\n\n    if (VAR_16) {\n        flexarray_append(VAR_19, \"-sdl\");\n        if (VAR_16->display)\n            flexarray_append_pair(VAR_20, \"DISPLAY\", VAR_16->display);\n        if (VAR_16->xauthority)\n            flexarray_append_pair(VAR_20, \"XAUTHORITY\", VAR_16->xauthority);\n    }\n\n    if (VAR_17) {\n        flexarray_vappend(VAR_19, \"-k\", VAR_17, NULL);\n    }\n\n    if (VAR_10->type == VAR_34) {\n        int VAR_35 = 0;\n\n        if (VAR_10->kernel)\n            flexarray_vappend(VAR_19, \"-kernel\", VAR_10->kernel, NULL);\n\n        if (VAR_10->ramdisk)\n            flexarray_vappend(VAR_19, \"-initrd\", VAR_10->ramdisk, NULL);\n\n        if (VAR_10->cmdline)\n            flexarray_vappend(VAR_19, \"-append\", VAR_10->cmdline, NULL);\n\n        if (VAR_10->u.hvm.serial || VAR_10->u.hvm.serial_list) {\n            if ( VAR_10->u.hvm.serial && VAR_10->u.hvm.serial_list )\n            {\n                LOG(VAR_29, \"Both serial and serial_list set\");\n                return VAR_31;\n            }\n            if (VAR_10->u.hvm.serial) {\n                flexarray_vappend(VAR_19,\n                                  \"-serial\", VAR_10->u.hvm.serial, NULL);\n            } else if (VAR_10->u.hvm.serial_list) {\n                char **VAR_36;\n                for (VAR_36 = VAR_10->u.hvm.serial_list;\n                     *VAR_36;\n                     VAR_36++) {\n                    flexarray_vappend(VAR_19,\n                                      \"-serial\",\n                                      *VAR_36, NULL);\n                }\n            }\n        }\n\n        if (libxl_defbool_val(VAR_10->u.hvm.nographic) && (!VAR_16 && !VAR_15)) {\n            flexarray_append(VAR_19, \"-nographic\");\n        }\n\n        if (libxl_defbool_val(VAR_10->u.hvm.spice.enable)) {\n            const libxl_spice_info *VAR_37 = &VAR_10->u.hvm.spice;\n            char *VAR_38 = dm_spice_options(VAR_0, VAR_37);\n            if (!VAR_38)\n                return VAR_31;\n\n            flexarray_append(VAR_19, \"-spice\");\n            flexarray_append(VAR_19, VAR_38);\n            if (libxl_defbool_val(VAR_10->u.hvm.spice.vdagent)) {\n                flexarray_vappend(VAR_19, \"-device\", \"virtio-serial\",\n                    \"-chardev\", \"spicevmc,id=vdagent,name=vdagent\", \"-device\",\n                    \"virtserialport,chardev=vdagent,name=com.redhat.spice.0\",\n                    NULL);\n            }\n        }\n\n        switch (VAR_10->u.hvm.vga.kind) {\n        case VAR_39:\n            flexarray_append_pair(VAR_19, \"-device\",\n                GCSPRINTF(\"VGA,vgamem_mb=%d\",\n                libxl__sizekb_to_mb(VAR_10->video_memkb)));\n            break;\n        case VAR_40:\n            flexarray_append_pair(VAR_19, \"-device\",\n                GCSPRINTF(\"cirrus-vga,vgamem_mb=%d\",\n                libxl__sizekb_to_mb(VAR_10->video_memkb)));\n            break;\n        case VAR_41:\n            break;\n        case VAR_42:\n            /* COMMENT_23 */\n            flexarray_append_pair(VAR_19, \"-device\",\n                GCSPRINTF(\"qxl-vga,vram_size_mb=%\"VAR_43\",ram_size_mb=%\"VAR_43,\n                (VAR_10->video_memkb/2/1024), (VAR_10->video_memkb/2/1024) ) );\n            break;\n        }\n\n        if (VAR_10->u.hvm.boot) {\n            flexarray_vappend(VAR_19, \"-boot\",\n                    libxl__sprintf(VAR_0, \"order=%s\", VAR_10->u.hvm.boot), NULL);\n        }\n        if (libxl_defbool_val(VAR_10->u.hvm.usb)\n            || VAR_10->u.hvm.usbdevice\n            || VAR_10->u.hvm.usbdevice_list) {\n            if ( VAR_10->u.hvm.usbdevice && VAR_10->u.hvm.usbdevice_list )\n            {\n                LOG(VAR_29, \"Both usbdevice and usbdevice_list set\");\n                return VAR_31;\n            }\n            flexarray_append(VAR_19, \"-usb\");\n            if (VAR_10->u.hvm.usbdevice) {\n                flexarray_vappend(VAR_19,\n                                  \"-usbdevice\", VAR_10->u.hvm.usbdevice, NULL);\n            } else if (VAR_10->u.hvm.usbdevice_list) {\n                char **VAR_36;\n                for (VAR_36 = VAR_10->u.hvm.usbdevice_list;\n                     *VAR_36;\n                     VAR_36++) {\n                    flexarray_vappend(VAR_19,\n                                      \"-usbdevice\",\n                                      *VAR_36, NULL);\n                }\n            }\n        } else if (VAR_10->u.hvm.usbversion) {\n            switch (VAR_10->u.hvm.usbversion) {\n            case 1:\n                flexarray_vappend(VAR_19,\n                    \"-device\", \"piix3-usb-uhci,id=usb\", NULL);\n                break;\n            case 2:\n                flexarray_append_pair(VAR_19, \"-device\",\n                    \"ich9-usb-ehci1,id=usb,addr=0x1d.0x7,multifunction=on\");\n                for (VAR_21 = 1; VAR_21 < 4; VAR_21++)\n                    flexarray_append_pair(VAR_19, \"-device\",\n                        GCSPRINTF(\"ich9-usb-uhci%d,masterbus=usb.0,\"\n                        \"firstport=%d,addr=0x1d.%#x,multifunction=on\",\n                        VAR_21, 2*(VAR_21-1), VAR_21-1));\n                break;\n            case 3:\n                flexarray_vappend(VAR_19,\n                    \"-device\", \"nec-usb-xhci,id=usb\", NULL);\n                break;\n            default:\n                LOG(VAR_29, \"usbversion parameter is invalid, \"\n                    \"must be between 1 and 3\");\n                return VAR_31;\n            }\n            if (VAR_10->u.hvm.spice.usbredirection >= 0 &&\n                VAR_10->u.hvm.spice.usbredirection < 5) {\n                for (VAR_21 = 1; VAR_21 <= VAR_10->u.hvm.spice.usbredirection; VAR_21++)\n                    flexarray_vappend(VAR_19, \"-chardev\", libxl__sprintf(VAR_0,\n                        \"spicevmc,name=usbredir,id=usbrc%d\", VAR_21), \"-device\",\n                        libxl__sprintf(VAR_0, \"usb-redir,chardev=usbrc%d,\"\n                        \"id=usbrc%d\", VAR_21, VAR_21), NULL);\n            } else {\n                LOG(VAR_29, \"usbredirection parameter is invalid, \"\n                    \"it must be between 1 and 4\");\n                return VAR_31;\n            }\n        }\n        if (VAR_10->u.hvm.soundhw) {\n            flexarray_vappend(VAR_19, \"-soundhw\", VAR_10->u.hvm.soundhw, NULL);\n        }\n        if (!libxl_defbool_val(VAR_10->u.hvm.acpi)) {\n            flexarray_append(VAR_19, \"-no-acpi\");\n        }\n        if (VAR_10->max_vcpus > 1) {\n            flexarray_append(VAR_19, \"-smp\");\n            if (VAR_10->avail_vcpus.size) {\n                int VAR_44 = 0;\n                VAR_44 = libxl_bitmap_count_set(&VAR_10->avail_vcpus);\n\n                flexarray_append(VAR_19, libxl__sprintf(VAR_0, \"%d,maxcpus=%d\",\n                                                         VAR_44,\n                                                         VAR_10->max_vcpus));\n            } else\n                flexarray_append(VAR_19, libxl__sprintf(VAR_0, \"%d\",\n                                                         VAR_10->max_vcpus));\n        }\n        for (VAR_21 = 0; VAR_21 < VAR_14; VAR_21++) {\n            if (VAR_12[VAR_21].nictype == VAR_45) {\n                char *VAR_46 = libxl__sprintf(VAR_0,\n                                VAR_47, LIBXL_MAC_BYTES(VAR_12[VAR_21].mac));\n                const char *VAR_48 = libxl__device_nic_devname(VAR_0,\n                                                VAR_2, VAR_12[VAR_21].devid,\n                                                VAR_45);\n                flexarray_append(VAR_19, \"-device\");\n                flexarray_append(VAR_19,\n                   libxl__sprintf(VAR_0, \"%s,id=nic%d,netdev=net%d,mac=%s\",\n                                                VAR_12[VAR_21].model, VAR_12[VAR_21].devid,\n                                                VAR_12[VAR_21].devid, VAR_46));\n                flexarray_append(VAR_19, \"-netdev\");\n                flexarray_append(VAR_19, GCSPRINTF(\n                                          \"type=tap,id=net%d,ifname=%s,\"\n                                          \"script=%s,downscript=%s\",\n                                          VAR_12[VAR_21].devid, VAR_48,\n                                          libxl_tapif_script(VAR_0),\n                                          libxl_tapif_script(VAR_0)));\n                VAR_35++;\n            }\n        }\n        /* COMMENT_24 */\n        if ( VAR_35 == 0 ) {\n            flexarray_append(VAR_19, \"-net\");\n            flexarray_append(VAR_19, \"none\");\n        }\n        if (libxl_defbool_val(VAR_10->u.hvm.gfx_passthru)) {\n            flexarray_append(VAR_19, \"-gfx_passthru\");\n        }\n    } else {\n        if (!VAR_16 && !VAR_15) {\n            flexarray_append(VAR_19, \"-nographic\");\n        }\n    }\n\n    if (VAR_6->saved_state) {\n        /* COMMENT_25 */\n        *VAR_7 = open(VAR_6->saved_state, VAR_49);\n        flexarray_append(VAR_19, \"-incoming\");\n        flexarray_append(VAR_19, GCSPRINTF(\"fd:%d\",*VAR_7));\n    }\n    for (VAR_21 = 0; VAR_10->extra && VAR_10->extra[VAR_21] != NULL; VAR_21++)\n        flexarray_append(VAR_19, VAR_10->extra[VAR_21]);\n\n    flexarray_append(VAR_19, \"-machine\");\n    switch (VAR_10->type) {\n    case VAR_32:\n        flexarray_append(VAR_19, \"xenpv\");\n        for (VAR_21 = 0; VAR_10->extra_pv && VAR_10->extra_pv[VAR_21] != NULL; VAR_21++)\n            flexarray_append(VAR_19, VAR_10->extra_pv[VAR_21]);\n        break;\n    case VAR_34:\n        if (!libxl_defbool_val(VAR_10->u.hvm.xen_platform_pci)) {\n            /* COMMENT_26 */\n                                                                              \n               \n            VAR_18 = libxl__sprintf(VAR_0, \"pc,accel=xen\");\n        } else {\n            VAR_18 = libxl__sprintf(VAR_0, \"xenfv\");\n        }\n        if (VAR_10->u.hvm.mmio_hole_memkb) {\n            uint64_t VAR_50 = (1ULL << 32) -\n                (VAR_10->u.hvm.mmio_hole_memkb << 10);\n\n            if (VAR_50 > VAR_51) {\n                LOG(VAR_52, \"mmio_hole_memkb=%\"VAR_43\n                    \" invalid ignored.\\n\",\n                    VAR_10->u.hvm.mmio_hole_memkb);\n            } else {\n                VAR_18 = libxl__sprintf(VAR_0, \"%s,max-ram-below-4g=%\"VAR_43,\n                                            VAR_18, VAR_50);\n            }\n        }\n        flexarray_append(VAR_19, VAR_18);\n        for (VAR_21 = 0; VAR_10->extra_hvm && VAR_10->extra_hvm[VAR_21] != NULL; VAR_21++)\n            flexarray_append(VAR_19, VAR_10->extra_hvm[VAR_21]);\n        break;\n    default:\n        abort();\n    }\n\n    VAR_24 = libxl__sizekb_to_mb(VAR_10->max_memkb - VAR_10->video_memkb);\n    flexarray_append(VAR_19, \"-m\");\n    flexarray_append(VAR_19, libxl__sprintf(VAR_0, \"%\"VAR_53, VAR_24));\n\n    if (VAR_10->type == VAR_34) {\n        if (VAR_10->u.hvm.hdtype == VAR_54)\n            flexarray_append_pair(VAR_19, \"-device\", \"ahci,id=ahci0\");\n        for (VAR_21 = 0; VAR_21 < VAR_13; VAR_21++) {\n            int VAR_55, VAR_56;\n            int VAR_57 =\n                libxl__device_disk_dev_number(VAR_11[VAR_21].vdev, &VAR_55, &VAR_56);\n            const char *VAR_58 = qemu_disk_format_string(VAR_11[VAR_21].format);\n            char *VAR_59;\n            const char *VAR_60;\n\n            if (VAR_57 == -1) {\n                LIBXL__LOG(VAR_8, VAR_61, \"unable to determine\"\n                           \" disk number for %s\", VAR_11[VAR_21].vdev);\n                continue;\n            }\n\n            if (VAR_11[VAR_21].is_cdrom) {\n                if (VAR_11[VAR_21].format == VAR_62)\n                    VAR_59 = libxl__sprintf\n                        (VAR_0, \"if=ide,index=%d,media=cdrom,cache=writeback,id=ide-%i\",\n                         VAR_55, VAR_57);\n                else\n                    VAR_59 = libxl__sprintf\n                        (VAR_0, \"file=%s,if=ide,index=%d,media=cdrom,format=%s,cache=writeback,id=ide-%i\",\n                         VAR_11[VAR_21].pdev_path, VAR_55, VAR_58, VAR_57);\n            } else {\n                if (VAR_11[VAR_21].format == VAR_62) {\n                    LIBXL__LOG(VAR_8, VAR_61, \"cannot support\"\n                               \" empty disk format for %s\", VAR_11[VAR_21].vdev);\n                    continue;\n                }\n\n                if (VAR_58 == NULL) {\n                    LIBXL__LOG(VAR_8, VAR_61, \"unable to determine\"\n                               \" disk image format %s\", VAR_11[VAR_21].vdev);\n                    continue;\n                }\n\n                if (VAR_11[VAR_21].backend == VAR_63) {\n                    VAR_58 = qemu_disk_format_string(VAR_64);\n                    VAR_60 = libxl__blktap_devpath(VAR_0, VAR_11[VAR_21].pdev_path,\n                                                      VAR_11[VAR_21].format);\n                } else {\n                    VAR_60 = VAR_11[VAR_21].pdev_path;\n                }\n\n                /* COMMENT_29 */\n                                                              \n                  \n                                                                 \n                                               \n                   \n                if (strncmp(VAR_11[VAR_21].vdev, \"sd\", 2) == 0)\n                    VAR_59 = libxl__sprintf\n                        (VAR_0, \"file=%s,if=scsi,bus=0,unit=%d,format=%s,cache=writeback\",\n                         VAR_60, VAR_55, VAR_58);\n                else if (VAR_55 < 6 && VAR_10->u.hvm.hdtype == VAR_54) {\n                    flexarray_vappend(VAR_19, \"-drive\",\n                        GCSPRINTF(\"file=%s,if=none,id=ahcidisk-%d,format=%s,cache=writeback\",\n                        VAR_60, VAR_55, VAR_58),\n                        \"-device\", GCSPRINTF(\"ide-hd,bus=ahci0.%d,unit=0,drive=ahcidisk-%d\",\n                        VAR_55, VAR_55), NULL);\n                    continue;\n                } else if (VAR_55 < 4)\n                    VAR_59 = libxl__sprintf\n                        (VAR_0, \"file=%s,if=ide,index=%d,media=disk,format=%s,cache=writeback\",\n                         VAR_60, VAR_55, VAR_58);\n                else\n                    continue; /* COMMENT_35 */\n            }\n\n            flexarray_append(VAR_19, \"-drive\");\n            flexarray_append(VAR_19, VAR_59);\n        }\n\n        switch (VAR_10->u.hvm.vendor_device) {\n        case VAR_65:\n            flexarray_append(VAR_19, \"-device\");\n            flexarray_append(VAR_19, \"xen-pvdevice,device-id=0xc000\");\n            break;\n        default:\n            break;\n        }\n    }\n    flexarray_append(VAR_19, NULL);\n    *VAR_4 = (char **) flexarray_contents(VAR_19);\n    flexarray_append(VAR_20, NULL);\n    if (VAR_5)\n        *VAR_5 = (char **) flexarray_contents(VAR_20);\n    return 0;\n}",
    "func_graph_path_before": "xen-project/xen/fa30003c13577b7ae4bbb46252ec1cbabd65c645/libxl_dm.c/vul/before/0.json",
    "func": "static int libxl__build_device_model_args_new(libxl__gc *gc,\n                                        const char *dm, int guest_domid,\n                                        const libxl_domain_config *guest_config,\n                                        char ***args, char ***envs,\n                                        const libxl__domain_build_state *state,\n                                        int *dm_state_fd)\n{\n    libxl_ctx *ctx = libxl__gc_owner(gc);\n    const libxl_domain_create_info *c_info = &guest_config->c_info;\n    const libxl_domain_build_info *b_info = &guest_config->b_info;\n    const libxl_device_disk *disks = guest_config->disks;\n    const libxl_device_nic *nics = guest_config->nics;\n    const int num_disks = guest_config->num_disks;\n    const int num_nics = guest_config->num_nics;\n    const libxl_vnc_info *vnc = libxl__dm_vnc(guest_config);\n    const libxl_sdl_info *sdl = dm_sdl(guest_config);\n    const char *keymap = dm_keymap(guest_config);\n    char *machinearg;\n    flexarray_t *dm_args, *dm_envs;\n    int i, connection, devid;\n    uint64_t ram_size;\n    const char *path, *chardev;\n\n    dm_args = flexarray_make(gc, 16, 1);\n    dm_envs = flexarray_make(gc, 16, 1);\n\n    flexarray_vappend(dm_args, dm,\n                      \"-xen-domid\",\n                      libxl__sprintf(gc, \"%d\", guest_domid), NULL);\n\n    flexarray_append(dm_args, \"-chardev\");\n    flexarray_append(dm_args,\n                     libxl__sprintf(gc, \"socket,id=libxl-cmd,\"\n                                    \"path=%s/qmp-libxl-%d,server,nowait\",\n                                    libxl__run_dir_path(), guest_domid));\n\n    flexarray_append(dm_args, \"-no-shutdown\");\n    flexarray_append(dm_args, \"-mon\");\n    flexarray_append(dm_args, \"chardev=libxl-cmd,mode=control\");\n\n    flexarray_append(dm_args, \"-chardev\");\n    flexarray_append(dm_args,\n                     libxl__sprintf(gc, \"socket,id=libxenstat-cmd,\"\n                                    \"path=%s/qmp-libxenstat-%d,server,nowait\",\n                                    libxl__run_dir_path(), guest_domid));\n\n    flexarray_append(dm_args, \"-mon\");\n    flexarray_append(dm_args, \"chardev=libxenstat-cmd,mode=control\");\n\n    for (i = 0; i < guest_config->num_channels; i++) {\n        connection = guest_config->channels[i].connection;\n        devid = guest_config->channels[i].devid;\n        switch (connection) {\n            case LIBXL_CHANNEL_CONNECTION_PTY:\n                chardev = GCSPRINTF(\"pty,id=libxl-channel%d\", devid);\n                break;\n            case LIBXL_CHANNEL_CONNECTION_SOCKET:\n                path = guest_config->channels[i].u.socket.path;\n                chardev = GCSPRINTF(\"socket,id=libxl-channel%d,path=%s,\"\n                                    \"server,nowait\", devid, path);\n                break;\n            default:\n                /* We've forgotten to add the clause */\n                LOG(ERROR, \"%s: unknown channel connection %d\",\n                    __func__, connection);\n                return ERROR_INVAL;\n        }\n        flexarray_append(dm_args, \"-chardev\");\n        flexarray_append(dm_args, (void*)chardev);\n    }\n\n    /*\n     * Remove default devices created by qemu. Qemu will create only devices\n     * defined by xen, since the devices not defined by xen are not usable.\n     */\n    flexarray_append(dm_args, \"-nodefaults\");\n\n    if (b_info->type == LIBXL_DOMAIN_TYPE_PV) {\n        flexarray_append(dm_args, \"-xen-attach\");\n    }\n\n    if (c_info->name) {\n        flexarray_vappend(dm_args, \"-name\", c_info->name, NULL);\n    }\n\n    if (vnc) {\n        char *vncarg = NULL;\n\n        flexarray_append(dm_args, \"-vnc\");\n\n        /*\n         * If vnc->listen is present and contains a :, and\n         *  - vnc->display is 0, use vnc->listen\n         *  - vnc->display is non-zero, be confused\n         * If vnc->listen is present but doesn't, use vnc->listen:vnc->display.\n         * If vnc->listen is not present, use 127.0.0.1:vnc->display\n         * (Remembering that vnc->display already defaults to 0.)\n         */\n        if (vnc->listen) {\n            if (strchr(vnc->listen, ':') != NULL) {\n                if (vnc->display) {\n                    LOG(ERROR, \"vncdisplay set, vnclisten contains display\");\n                    return ERROR_INVAL;\n                }\n                vncarg = vnc->listen;\n            } else {\n                vncarg = libxl__sprintf(gc, \"%s:%d\", vnc->listen,\n                                        vnc->display);\n            }\n        } else\n            vncarg = libxl__sprintf(gc, \"127.0.0.1:%d\", vnc->display);\n\n        if (vnc->passwd && vnc->passwd[0]) {\n            vncarg = libxl__sprintf(gc, \"%s,password\", vncarg);\n        }\n\n        if (libxl_defbool_val(vnc->findunused)) {\n            /* This option asks to QEMU to try this number of port before to\n             * give up.  So QEMU will try ports between $display and $display +\n             * 99.  This option needs to be the last one of the vnc options. */\n            vncarg = libxl__sprintf(gc, \"%s,to=99\", vncarg);\n        }\n\n        flexarray_append(dm_args, vncarg);\n    } else\n        /*\n         * Ensure that by default no vnc server is created.\n         */\n        flexarray_append_pair(dm_args, \"-vnc\", \"none\");\n\n    /*\n     * Ensure that by default no display backend is created. Further\n     * options given below might then enable more.\n     */\n    flexarray_append_pair(dm_args, \"-display\", \"none\");\n\n    if (sdl) {\n        flexarray_append(dm_args, \"-sdl\");\n        if (sdl->display)\n            flexarray_append_pair(dm_envs, \"DISPLAY\", sdl->display);\n        if (sdl->xauthority)\n            flexarray_append_pair(dm_envs, \"XAUTHORITY\", sdl->xauthority);\n    }\n\n    if (keymap) {\n        flexarray_vappend(dm_args, \"-k\", keymap, NULL);\n    }\n\n    if (b_info->type == LIBXL_DOMAIN_TYPE_HVM) {\n        int ioemu_nics = 0;\n\n        if (b_info->kernel)\n            flexarray_vappend(dm_args, \"-kernel\", b_info->kernel, NULL);\n\n        if (b_info->ramdisk)\n            flexarray_vappend(dm_args, \"-initrd\", b_info->ramdisk, NULL);\n\n        if (b_info->cmdline)\n            flexarray_vappend(dm_args, \"-append\", b_info->cmdline, NULL);\n\n        if (b_info->u.hvm.serial || b_info->u.hvm.serial_list) {\n            if ( b_info->u.hvm.serial && b_info->u.hvm.serial_list )\n            {\n                LOG(ERROR, \"Both serial and serial_list set\");\n                return ERROR_INVAL;\n            }\n            if (b_info->u.hvm.serial) {\n                flexarray_vappend(dm_args,\n                                  \"-serial\", b_info->u.hvm.serial, NULL);\n            } else if (b_info->u.hvm.serial_list) {\n                char **p;\n                for (p = b_info->u.hvm.serial_list;\n                     *p;\n                     p++) {\n                    flexarray_vappend(dm_args,\n                                      \"-serial\",\n                                      *p, NULL);\n                }\n            }\n        }\n\n        if (libxl_defbool_val(b_info->u.hvm.nographic) && (!sdl && !vnc)) {\n            flexarray_append(dm_args, \"-nographic\");\n        }\n\n        if (libxl_defbool_val(b_info->u.hvm.spice.enable)) {\n            const libxl_spice_info *spice = &b_info->u.hvm.spice;\n            char *spiceoptions = dm_spice_options(gc, spice);\n            if (!spiceoptions)\n                return ERROR_INVAL;\n\n            flexarray_append(dm_args, \"-spice\");\n            flexarray_append(dm_args, spiceoptions);\n            if (libxl_defbool_val(b_info->u.hvm.spice.vdagent)) {\n                flexarray_vappend(dm_args, \"-device\", \"virtio-serial\",\n                    \"-chardev\", \"spicevmc,id=vdagent,name=vdagent\", \"-device\",\n                    \"virtserialport,chardev=vdagent,name=com.redhat.spice.0\",\n                    NULL);\n            }\n        }\n\n        switch (b_info->u.hvm.vga.kind) {\n        case LIBXL_VGA_INTERFACE_TYPE_STD:\n            flexarray_append_pair(dm_args, \"-device\",\n                GCSPRINTF(\"VGA,vgamem_mb=%d\",\n                libxl__sizekb_to_mb(b_info->video_memkb)));\n            break;\n        case LIBXL_VGA_INTERFACE_TYPE_CIRRUS:\n            flexarray_append_pair(dm_args, \"-device\",\n                GCSPRINTF(\"cirrus-vga,vgamem_mb=%d\",\n                libxl__sizekb_to_mb(b_info->video_memkb)));\n            break;\n        case LIBXL_VGA_INTERFACE_TYPE_NONE:\n            break;\n        case LIBXL_VGA_INTERFACE_TYPE_QXL:\n            /* QXL have 2 ram regions, ram and vram */\n            flexarray_append_pair(dm_args, \"-device\",\n                GCSPRINTF(\"qxl-vga,vram_size_mb=%\"PRIu64\",ram_size_mb=%\"PRIu64,\n                (b_info->video_memkb/2/1024), (b_info->video_memkb/2/1024) ) );\n            break;\n        }\n\n        if (b_info->u.hvm.boot) {\n            flexarray_vappend(dm_args, \"-boot\",\n                    libxl__sprintf(gc, \"order=%s\", b_info->u.hvm.boot), NULL);\n        }\n        if (libxl_defbool_val(b_info->u.hvm.usb)\n            || b_info->u.hvm.usbdevice\n            || b_info->u.hvm.usbdevice_list) {\n            if ( b_info->u.hvm.usbdevice && b_info->u.hvm.usbdevice_list )\n            {\n                LOG(ERROR, \"Both usbdevice and usbdevice_list set\");\n                return ERROR_INVAL;\n            }\n            flexarray_append(dm_args, \"-usb\");\n            if (b_info->u.hvm.usbdevice) {\n                flexarray_vappend(dm_args,\n                                  \"-usbdevice\", b_info->u.hvm.usbdevice, NULL);\n            } else if (b_info->u.hvm.usbdevice_list) {\n                char **p;\n                for (p = b_info->u.hvm.usbdevice_list;\n                     *p;\n                     p++) {\n                    flexarray_vappend(dm_args,\n                                      \"-usbdevice\",\n                                      *p, NULL);\n                }\n            }\n        } else if (b_info->u.hvm.usbversion) {\n            switch (b_info->u.hvm.usbversion) {\n            case 1:\n                flexarray_vappend(dm_args,\n                    \"-device\", \"piix3-usb-uhci,id=usb\", NULL);\n                break;\n            case 2:\n                flexarray_append_pair(dm_args, \"-device\",\n                    \"ich9-usb-ehci1,id=usb,addr=0x1d.0x7,multifunction=on\");\n                for (i = 1; i < 4; i++)\n                    flexarray_append_pair(dm_args, \"-device\",\n                        GCSPRINTF(\"ich9-usb-uhci%d,masterbus=usb.0,\"\n                        \"firstport=%d,addr=0x1d.%#x,multifunction=on\",\n                        i, 2*(i-1), i-1));\n                break;\n            case 3:\n                flexarray_vappend(dm_args,\n                    \"-device\", \"nec-usb-xhci,id=usb\", NULL);\n                break;\n            default:\n                LOG(ERROR, \"usbversion parameter is invalid, \"\n                    \"must be between 1 and 3\");\n                return ERROR_INVAL;\n            }\n            if (b_info->u.hvm.spice.usbredirection >= 0 &&\n                b_info->u.hvm.spice.usbredirection < 5) {\n                for (i = 1; i <= b_info->u.hvm.spice.usbredirection; i++)\n                    flexarray_vappend(dm_args, \"-chardev\", libxl__sprintf(gc,\n                        \"spicevmc,name=usbredir,id=usbrc%d\", i), \"-device\",\n                        libxl__sprintf(gc, \"usb-redir,chardev=usbrc%d,\"\n                        \"id=usbrc%d\", i, i), NULL);\n            } else {\n                LOG(ERROR, \"usbredirection parameter is invalid, \"\n                    \"it must be between 1 and 4\");\n                return ERROR_INVAL;\n            }\n        }\n        if (b_info->u.hvm.soundhw) {\n            flexarray_vappend(dm_args, \"-soundhw\", b_info->u.hvm.soundhw, NULL);\n        }\n        if (!libxl_defbool_val(b_info->u.hvm.acpi)) {\n            flexarray_append(dm_args, \"-no-acpi\");\n        }\n        if (b_info->max_vcpus > 1) {\n            flexarray_append(dm_args, \"-smp\");\n            if (b_info->avail_vcpus.size) {\n                int nr_set_cpus = 0;\n                nr_set_cpus = libxl_bitmap_count_set(&b_info->avail_vcpus);\n\n                flexarray_append(dm_args, libxl__sprintf(gc, \"%d,maxcpus=%d\",\n                                                         nr_set_cpus,\n                                                         b_info->max_vcpus));\n            } else\n                flexarray_append(dm_args, libxl__sprintf(gc, \"%d\",\n                                                         b_info->max_vcpus));\n        }\n        for (i = 0; i < num_nics; i++) {\n            if (nics[i].nictype == LIBXL_NIC_TYPE_VIF_IOEMU) {\n                char *smac = libxl__sprintf(gc,\n                                LIBXL_MAC_FMT, LIBXL_MAC_BYTES(nics[i].mac));\n                const char *ifname = libxl__device_nic_devname(gc,\n                                                guest_domid, nics[i].devid,\n                                                LIBXL_NIC_TYPE_VIF_IOEMU);\n                flexarray_append(dm_args, \"-device\");\n                flexarray_append(dm_args,\n                   libxl__sprintf(gc, \"%s,id=nic%d,netdev=net%d,mac=%s\",\n                                                nics[i].model, nics[i].devid,\n                                                nics[i].devid, smac));\n                flexarray_append(dm_args, \"-netdev\");\n                flexarray_append(dm_args, GCSPRINTF(\n                                          \"type=tap,id=net%d,ifname=%s,\"\n                                          \"script=%s,downscript=%s\",\n                                          nics[i].devid, ifname,\n                                          libxl_tapif_script(gc),\n                                          libxl_tapif_script(gc)));\n                ioemu_nics++;\n            }\n        }\n        /* If we have no emulated nics, tell qemu not to create any */\n        if ( ioemu_nics == 0 ) {\n            flexarray_append(dm_args, \"-net\");\n            flexarray_append(dm_args, \"none\");\n        }\n        if (libxl_defbool_val(b_info->u.hvm.gfx_passthru)) {\n            flexarray_append(dm_args, \"-gfx_passthru\");\n        }\n    } else {\n        if (!sdl && !vnc) {\n            flexarray_append(dm_args, \"-nographic\");\n        }\n    }\n\n    if (state->saved_state) {\n        /* This file descriptor is meant to be used by QEMU */\n        *dm_state_fd = open(state->saved_state, O_RDONLY);\n        flexarray_append(dm_args, \"-incoming\");\n        flexarray_append(dm_args, GCSPRINTF(\"fd:%d\",*dm_state_fd));\n    }\n    for (i = 0; b_info->extra && b_info->extra[i] != NULL; i++)\n        flexarray_append(dm_args, b_info->extra[i]);\n\n    flexarray_append(dm_args, \"-machine\");\n    switch (b_info->type) {\n    case LIBXL_DOMAIN_TYPE_PV:\n        flexarray_append(dm_args, \"xenpv\");\n        for (i = 0; b_info->extra_pv && b_info->extra_pv[i] != NULL; i++)\n            flexarray_append(dm_args, b_info->extra_pv[i]);\n        break;\n    case LIBXL_DOMAIN_TYPE_HVM:\n        if (!libxl_defbool_val(b_info->u.hvm.xen_platform_pci)) {\n            /* Switching here to the machine \"pc\" which does not add\n             * the xen-platform device instead of the default \"xenfv\" machine.\n             */\n            machinearg = libxl__sprintf(gc, \"pc,accel=xen\");\n        } else {\n            machinearg = libxl__sprintf(gc, \"xenfv\");\n        }\n        if (b_info->u.hvm.mmio_hole_memkb) {\n            uint64_t max_ram_below_4g = (1ULL << 32) -\n                (b_info->u.hvm.mmio_hole_memkb << 10);\n\n            if (max_ram_below_4g > HVM_BELOW_4G_MMIO_START) {\n                LOG(WARN, \"mmio_hole_memkb=%\"PRIu64\n                    \" invalid ignored.\\n\",\n                    b_info->u.hvm.mmio_hole_memkb);\n            } else {\n                machinearg = libxl__sprintf(gc, \"%s,max-ram-below-4g=%\"PRIu64,\n                                            machinearg, max_ram_below_4g);\n            }\n        }\n        flexarray_append(dm_args, machinearg);\n        for (i = 0; b_info->extra_hvm && b_info->extra_hvm[i] != NULL; i++)\n            flexarray_append(dm_args, b_info->extra_hvm[i]);\n        break;\n    default:\n        abort();\n    }\n\n    ram_size = libxl__sizekb_to_mb(b_info->max_memkb - b_info->video_memkb);\n    flexarray_append(dm_args, \"-m\");\n    flexarray_append(dm_args, libxl__sprintf(gc, \"%\"PRId64, ram_size));\n\n    if (b_info->type == LIBXL_DOMAIN_TYPE_HVM) {\n        if (b_info->u.hvm.hdtype == LIBXL_HDTYPE_AHCI)\n            flexarray_append_pair(dm_args, \"-device\", \"ahci,id=ahci0\");\n        for (i = 0; i < num_disks; i++) {\n            int disk, part;\n            int dev_number =\n                libxl__device_disk_dev_number(disks[i].vdev, &disk, &part);\n            const char *format = qemu_disk_format_string(disks[i].format);\n            char *drive;\n            const char *pdev_path;\n\n            if (dev_number == -1) {\n                LIBXL__LOG(ctx, LIBXL__LOG_WARNING, \"unable to determine\"\n                           \" disk number for %s\", disks[i].vdev);\n                continue;\n            }\n\n            if (disks[i].is_cdrom) {\n                if (disks[i].format == LIBXL_DISK_FORMAT_EMPTY)\n                    drive = libxl__sprintf\n                        (gc, \"if=ide,index=%d,readonly=%s,media=cdrom,cache=writeback,id=ide-%i\",\n                         disk, disks[i].readwrite ? \"off\" : \"on\", dev_number);\n                else\n                    drive = libxl__sprintf\n                        (gc, \"file=%s,if=ide,index=%d,readonly=%s,media=cdrom,format=%s,cache=writeback,id=ide-%i\",\n                         disks[i].pdev_path, disk, disks[i].readwrite ? \"off\" : \"on\", format, dev_number);\n            } else {\n                if (!disks[i].readwrite) {\n                    LIBXL__LOG(ctx, LIBXL__LOG_ERROR, \"qemu-xen doesn't support read-only disk drivers\");\n                    return ERROR_INVAL;\n                }\n\n                if (disks[i].format == LIBXL_DISK_FORMAT_EMPTY) {\n                    LIBXL__LOG(ctx, LIBXL__LOG_WARNING, \"cannot support\"\n                               \" empty disk format for %s\", disks[i].vdev);\n                    continue;\n                }\n\n                if (format == NULL) {\n                    LIBXL__LOG(ctx, LIBXL__LOG_WARNING, \"unable to determine\"\n                               \" disk image format %s\", disks[i].vdev);\n                    continue;\n                }\n\n                if (disks[i].backend == LIBXL_DISK_BACKEND_TAP) {\n                    format = qemu_disk_format_string(LIBXL_DISK_FORMAT_RAW);\n                    pdev_path = libxl__blktap_devpath(gc, disks[i].pdev_path,\n                                                      disks[i].format);\n                } else {\n                    pdev_path = disks[i].pdev_path;\n                }\n\n                /*\n                 * Explicit sd disks are passed through as is.\n                 *\n                 * For other disks we translate devices 0..3 into\n                 * hd[a-d] and ignore the rest.\n                 */\n                if (strncmp(disks[i].vdev, \"sd\", 2) == 0)\n                    drive = libxl__sprintf\n                        (gc, \"file=%s,if=scsi,bus=0,unit=%d,format=%s,cache=writeback\",\n                         pdev_path, disk, format);\n                else if (disk < 6 && b_info->u.hvm.hdtype == LIBXL_HDTYPE_AHCI) {\n                    flexarray_vappend(dm_args, \"-drive\",\n                        GCSPRINTF(\"file=%s,if=none,id=ahcidisk-%d,format=%s,cache=writeback\",\n                        pdev_path, disk, format),\n                        \"-device\", GCSPRINTF(\"ide-hd,bus=ahci0.%d,unit=0,drive=ahcidisk-%d\",\n                        disk, disk), NULL);\n                    continue;\n                } else if (disk < 4)\n                    drive = libxl__sprintf\n                        (gc, \"file=%s,if=ide,index=%d,media=disk,format=%s,cache=writeback\",\n                         pdev_path, disk, format);\n                else\n                    continue; /* Do not emulate this disk */\n            }\n\n            flexarray_append(dm_args, \"-drive\");\n            flexarray_append(dm_args, drive);\n        }\n\n        switch (b_info->u.hvm.vendor_device) {\n        case LIBXL_VENDOR_DEVICE_XENSERVER:\n            flexarray_append(dm_args, \"-device\");\n            flexarray_append(dm_args, \"xen-pvdevice,device-id=0xc000\");\n            break;\n        default:\n            break;\n        }\n    }\n    flexarray_append(dm_args, NULL);\n    *args = (char **) flexarray_contents(dm_args);\n    flexarray_append(dm_envs, NULL);\n    if (envs)\n        *envs = (char **) flexarray_contents(dm_envs);\n    return 0;\n}",
    "abstract_func": "static int libxl__build_device_model_args_new(libxl__gc *VAR_0,\n                                        const char *VAR_1, int VAR_2,\n                                        const libxl_domain_config *VAR_3,\n                                        char ***VAR_4, char ***VAR_5,\n                                        const libxl__domain_build_state *VAR_6,\n                                        int *VAR_7)\n{\n    libxl_ctx *VAR_8 = libxl__gc_owner(VAR_0);\n    const libxl_domain_create_info *VAR_9 = &VAR_3->c_info;\n    const libxl_domain_build_info *VAR_10 = &VAR_3->b_info;\n    const libxl_device_disk *VAR_11 = VAR_3->disks;\n    const libxl_device_nic *VAR_12 = VAR_3->nics;\n    const int VAR_13 = VAR_3->num_disks;\n    const int VAR_14 = VAR_3->num_nics;\n    const libxl_vnc_info *VAR_15 = libxl__dm_vnc(VAR_3);\n    const libxl_sdl_info *VAR_16 = dm_sdl(VAR_3);\n    const char *VAR_17 = dm_keymap(VAR_3);\n    char *VAR_18;\n    flexarray_t *VAR_19, *VAR_20;\n    int VAR_21, VAR_22, VAR_23;\n    uint64_t VAR_24;\n    const char *VAR_25, *VAR_26;\n\n    VAR_19 = flexarray_make(VAR_0, 16, 1);\n    VAR_20 = flexarray_make(VAR_0, 16, 1);\n\n    flexarray_vappend(VAR_19, VAR_1,\n                      \"-xen-domid\",\n                      libxl__sprintf(VAR_0, \"%d\", VAR_2), NULL);\n\n    flexarray_append(VAR_19, \"-chardev\");\n    flexarray_append(VAR_19,\n                     libxl__sprintf(VAR_0, \"socket,id=libxl-cmd,\"\n                                    \"path=%s/qmp-libxl-%d,server,nowait\",\n                                    libxl__run_dir_path(), VAR_2));\n\n    flexarray_append(VAR_19, \"-no-shutdown\");\n    flexarray_append(VAR_19, \"-mon\");\n    flexarray_append(VAR_19, \"chardev=libxl-cmd,mode=control\");\n\n    flexarray_append(VAR_19, \"-chardev\");\n    flexarray_append(VAR_19,\n                     libxl__sprintf(VAR_0, \"socket,id=libxenstat-cmd,\"\n                                    \"path=%s/qmp-libxenstat-%d,server,nowait\",\n                                    libxl__run_dir_path(), VAR_2));\n\n    flexarray_append(VAR_19, \"-mon\");\n    flexarray_append(VAR_19, \"chardev=libxenstat-cmd,mode=control\");\n\n    for (VAR_21 = 0; VAR_21 < VAR_3->num_channels; VAR_21++) {\n        VAR_22 = VAR_3->channels[VAR_21].connection;\n        VAR_23 = VAR_3->channels[VAR_21].devid;\n        switch (VAR_22) {\n            case VAR_27:\n                VAR_26 = GCSPRINTF(\"pty,id=libxl-channel%d\", VAR_23);\n                break;\n            case VAR_28:\n                VAR_25 = VAR_3->channels[VAR_21].u.socket.path;\n                VAR_26 = GCSPRINTF(\"socket,id=libxl-channel%d,path=%s,\"\n                                    \"server,nowait\", VAR_23, VAR_25);\n                break;\n            default:\n                /* COMMENT_0 */\n                LOG(VAR_29, \"%s: unknown channel connection %d\",\n                    VAR_30, VAR_22);\n                return VAR_31;\n        }\n        flexarray_append(VAR_19, \"-chardev\");\n        flexarray_append(VAR_19, (void*)VAR_26);\n    }\n\n    /* COMMENT_1 */\n                                                                            \n                                                                           \n       \n    flexarray_append(VAR_19, \"-nodefaults\");\n\n    if (VAR_10->type == VAR_32) {\n        flexarray_append(VAR_19, \"-xen-attach\");\n    }\n\n    if (VAR_9->name) {\n        flexarray_vappend(VAR_19, \"-name\", VAR_9->name, NULL);\n    }\n\n    if (VAR_15) {\n        char *VAR_33 = NULL;\n\n        flexarray_append(VAR_19, \"-vnc\");\n\n        /* COMMENT_5 */\n                                                          \n                                                \n                                                   \n                                                                               \n                                                                    \n                                                                 \n           \n        if (VAR_15->listen) {\n            if (strchr(VAR_15->listen, ':') != NULL) {\n                if (VAR_15->display) {\n                    LOG(VAR_29, \"vncdisplay set, vnclisten contains display\");\n                    return VAR_31;\n                }\n                VAR_33 = VAR_15->listen;\n            } else {\n                VAR_33 = libxl__sprintf(VAR_0, \"%s:%d\", VAR_15->listen,\n                                        VAR_15->display);\n            }\n        } else\n            VAR_33 = libxl__sprintf(VAR_0, \"127.0.0.1:%d\", VAR_15->display);\n\n        if (VAR_15->passwd && VAR_15->passwd[0]) {\n            VAR_33 = libxl__sprintf(VAR_0, \"%s,password\", VAR_33);\n        }\n\n        if (libxl_defbool_val(VAR_15->findunused)) {\n            /* COMMENT_13 */\n                                                                               \n                                                                               \n            VAR_33 = libxl__sprintf(VAR_0, \"%s,to=99\", VAR_33);\n        }\n\n        flexarray_append(VAR_19, VAR_33);\n    } else\n        /* COMMENT_16 */\n                                                           \n           \n        flexarray_append_pair(VAR_19, \"-vnc\", \"none\");\n\n    /* COMMENT_19 */\n                                                                    \n                                                  \n       \n    flexarray_append_pair(VAR_19, \"-display\", \"none\");\n\n    if (VAR_16) {\n        flexarray_append(VAR_19, \"-sdl\");\n        if (VAR_16->display)\n            flexarray_append_pair(VAR_20, \"DISPLAY\", VAR_16->display);\n        if (VAR_16->xauthority)\n            flexarray_append_pair(VAR_20, \"XAUTHORITY\", VAR_16->xauthority);\n    }\n\n    if (VAR_17) {\n        flexarray_vappend(VAR_19, \"-k\", VAR_17, NULL);\n    }\n\n    if (VAR_10->type == VAR_34) {\n        int VAR_35 = 0;\n\n        if (VAR_10->kernel)\n            flexarray_vappend(VAR_19, \"-kernel\", VAR_10->kernel, NULL);\n\n        if (VAR_10->ramdisk)\n            flexarray_vappend(VAR_19, \"-initrd\", VAR_10->ramdisk, NULL);\n\n        if (VAR_10->cmdline)\n            flexarray_vappend(VAR_19, \"-append\", VAR_10->cmdline, NULL);\n\n        if (VAR_10->u.hvm.serial || VAR_10->u.hvm.serial_list) {\n            if ( VAR_10->u.hvm.serial && VAR_10->u.hvm.serial_list )\n            {\n                LOG(VAR_29, \"Both serial and serial_list set\");\n                return VAR_31;\n            }\n            if (VAR_10->u.hvm.serial) {\n                flexarray_vappend(VAR_19,\n                                  \"-serial\", VAR_10->u.hvm.serial, NULL);\n            } else if (VAR_10->u.hvm.serial_list) {\n                char **VAR_36;\n                for (VAR_36 = VAR_10->u.hvm.serial_list;\n                     *VAR_36;\n                     VAR_36++) {\n                    flexarray_vappend(VAR_19,\n                                      \"-serial\",\n                                      *VAR_36, NULL);\n                }\n            }\n        }\n\n        if (libxl_defbool_val(VAR_10->u.hvm.nographic) && (!VAR_16 && !VAR_15)) {\n            flexarray_append(VAR_19, \"-nographic\");\n        }\n\n        if (libxl_defbool_val(VAR_10->u.hvm.spice.enable)) {\n            const libxl_spice_info *VAR_37 = &VAR_10->u.hvm.spice;\n            char *VAR_38 = dm_spice_options(VAR_0, VAR_37);\n            if (!VAR_38)\n                return VAR_31;\n\n            flexarray_append(VAR_19, \"-spice\");\n            flexarray_append(VAR_19, VAR_38);\n            if (libxl_defbool_val(VAR_10->u.hvm.spice.vdagent)) {\n                flexarray_vappend(VAR_19, \"-device\", \"virtio-serial\",\n                    \"-chardev\", \"spicevmc,id=vdagent,name=vdagent\", \"-device\",\n                    \"virtserialport,chardev=vdagent,name=com.redhat.spice.0\",\n                    NULL);\n            }\n        }\n\n        switch (VAR_10->u.hvm.vga.kind) {\n        case VAR_39:\n            flexarray_append_pair(VAR_19, \"-device\",\n                GCSPRINTF(\"VGA,vgamem_mb=%d\",\n                libxl__sizekb_to_mb(VAR_10->video_memkb)));\n            break;\n        case VAR_40:\n            flexarray_append_pair(VAR_19, \"-device\",\n                GCSPRINTF(\"cirrus-vga,vgamem_mb=%d\",\n                libxl__sizekb_to_mb(VAR_10->video_memkb)));\n            break;\n        case VAR_41:\n            break;\n        case VAR_42:\n            /* COMMENT_23 */\n            flexarray_append_pair(VAR_19, \"-device\",\n                GCSPRINTF(\"qxl-vga,vram_size_mb=%\"VAR_43\",ram_size_mb=%\"VAR_43,\n                (VAR_10->video_memkb/2/1024), (VAR_10->video_memkb/2/1024) ) );\n            break;\n        }\n\n        if (VAR_10->u.hvm.boot) {\n            flexarray_vappend(VAR_19, \"-boot\",\n                    libxl__sprintf(VAR_0, \"order=%s\", VAR_10->u.hvm.boot), NULL);\n        }\n        if (libxl_defbool_val(VAR_10->u.hvm.usb)\n            || VAR_10->u.hvm.usbdevice\n            || VAR_10->u.hvm.usbdevice_list) {\n            if ( VAR_10->u.hvm.usbdevice && VAR_10->u.hvm.usbdevice_list )\n            {\n                LOG(VAR_29, \"Both usbdevice and usbdevice_list set\");\n                return VAR_31;\n            }\n            flexarray_append(VAR_19, \"-usb\");\n            if (VAR_10->u.hvm.usbdevice) {\n                flexarray_vappend(VAR_19,\n                                  \"-usbdevice\", VAR_10->u.hvm.usbdevice, NULL);\n            } else if (VAR_10->u.hvm.usbdevice_list) {\n                char **VAR_36;\n                for (VAR_36 = VAR_10->u.hvm.usbdevice_list;\n                     *VAR_36;\n                     VAR_36++) {\n                    flexarray_vappend(VAR_19,\n                                      \"-usbdevice\",\n                                      *VAR_36, NULL);\n                }\n            }\n        } else if (VAR_10->u.hvm.usbversion) {\n            switch (VAR_10->u.hvm.usbversion) {\n            case 1:\n                flexarray_vappend(VAR_19,\n                    \"-device\", \"piix3-usb-uhci,id=usb\", NULL);\n                break;\n            case 2:\n                flexarray_append_pair(VAR_19, \"-device\",\n                    \"ich9-usb-ehci1,id=usb,addr=0x1d.0x7,multifunction=on\");\n                for (VAR_21 = 1; VAR_21 < 4; VAR_21++)\n                    flexarray_append_pair(VAR_19, \"-device\",\n                        GCSPRINTF(\"ich9-usb-uhci%d,masterbus=usb.0,\"\n                        \"firstport=%d,addr=0x1d.%#x,multifunction=on\",\n                        VAR_21, 2*(VAR_21-1), VAR_21-1));\n                break;\n            case 3:\n                flexarray_vappend(VAR_19,\n                    \"-device\", \"nec-usb-xhci,id=usb\", NULL);\n                break;\n            default:\n                LOG(VAR_29, \"usbversion parameter is invalid, \"\n                    \"must be between 1 and 3\");\n                return VAR_31;\n            }\n            if (VAR_10->u.hvm.spice.usbredirection >= 0 &&\n                VAR_10->u.hvm.spice.usbredirection < 5) {\n                for (VAR_21 = 1; VAR_21 <= VAR_10->u.hvm.spice.usbredirection; VAR_21++)\n                    flexarray_vappend(VAR_19, \"-chardev\", libxl__sprintf(VAR_0,\n                        \"spicevmc,name=usbredir,id=usbrc%d\", VAR_21), \"-device\",\n                        libxl__sprintf(VAR_0, \"usb-redir,chardev=usbrc%d,\"\n                        \"id=usbrc%d\", VAR_21, VAR_21), NULL);\n            } else {\n                LOG(VAR_29, \"usbredirection parameter is invalid, \"\n                    \"it must be between 1 and 4\");\n                return VAR_31;\n            }\n        }\n        if (VAR_10->u.hvm.soundhw) {\n            flexarray_vappend(VAR_19, \"-soundhw\", VAR_10->u.hvm.soundhw, NULL);\n        }\n        if (!libxl_defbool_val(VAR_10->u.hvm.acpi)) {\n            flexarray_append(VAR_19, \"-no-acpi\");\n        }\n        if (VAR_10->max_vcpus > 1) {\n            flexarray_append(VAR_19, \"-smp\");\n            if (VAR_10->avail_vcpus.size) {\n                int VAR_44 = 0;\n                VAR_44 = libxl_bitmap_count_set(&VAR_10->avail_vcpus);\n\n                flexarray_append(VAR_19, libxl__sprintf(VAR_0, \"%d,maxcpus=%d\",\n                                                         VAR_44,\n                                                         VAR_10->max_vcpus));\n            } else\n                flexarray_append(VAR_19, libxl__sprintf(VAR_0, \"%d\",\n                                                         VAR_10->max_vcpus));\n        }\n        for (VAR_21 = 0; VAR_21 < VAR_14; VAR_21++) {\n            if (VAR_12[VAR_21].nictype == VAR_45) {\n                char *VAR_46 = libxl__sprintf(VAR_0,\n                                VAR_47, LIBXL_MAC_BYTES(VAR_12[VAR_21].mac));\n                const char *VAR_48 = libxl__device_nic_devname(VAR_0,\n                                                VAR_2, VAR_12[VAR_21].devid,\n                                                VAR_45);\n                flexarray_append(VAR_19, \"-device\");\n                flexarray_append(VAR_19,\n                   libxl__sprintf(VAR_0, \"%s,id=nic%d,netdev=net%d,mac=%s\",\n                                                VAR_12[VAR_21].model, VAR_12[VAR_21].devid,\n                                                VAR_12[VAR_21].devid, VAR_46));\n                flexarray_append(VAR_19, \"-netdev\");\n                flexarray_append(VAR_19, GCSPRINTF(\n                                          \"type=tap,id=net%d,ifname=%s,\"\n                                          \"script=%s,downscript=%s\",\n                                          VAR_12[VAR_21].devid, VAR_48,\n                                          libxl_tapif_script(VAR_0),\n                                          libxl_tapif_script(VAR_0)));\n                VAR_35++;\n            }\n        }\n        /* COMMENT_24 */\n        if ( VAR_35 == 0 ) {\n            flexarray_append(VAR_19, \"-net\");\n            flexarray_append(VAR_19, \"none\");\n        }\n        if (libxl_defbool_val(VAR_10->u.hvm.gfx_passthru)) {\n            flexarray_append(VAR_19, \"-gfx_passthru\");\n        }\n    } else {\n        if (!VAR_16 && !VAR_15) {\n            flexarray_append(VAR_19, \"-nographic\");\n        }\n    }\n\n    if (VAR_6->saved_state) {\n        /* COMMENT_25 */\n        *VAR_7 = open(VAR_6->saved_state, VAR_49);\n        flexarray_append(VAR_19, \"-incoming\");\n        flexarray_append(VAR_19, GCSPRINTF(\"fd:%d\",*VAR_7));\n    }\n    for (VAR_21 = 0; VAR_10->extra && VAR_10->extra[VAR_21] != NULL; VAR_21++)\n        flexarray_append(VAR_19, VAR_10->extra[VAR_21]);\n\n    flexarray_append(VAR_19, \"-machine\");\n    switch (VAR_10->type) {\n    case VAR_32:\n        flexarray_append(VAR_19, \"xenpv\");\n        for (VAR_21 = 0; VAR_10->extra_pv && VAR_10->extra_pv[VAR_21] != NULL; VAR_21++)\n            flexarray_append(VAR_19, VAR_10->extra_pv[VAR_21]);\n        break;\n    case VAR_34:\n        if (!libxl_defbool_val(VAR_10->u.hvm.xen_platform_pci)) {\n            /* COMMENT_26 */\n                                                                              \n               \n            VAR_18 = libxl__sprintf(VAR_0, \"pc,accel=xen\");\n        } else {\n            VAR_18 = libxl__sprintf(VAR_0, \"xenfv\");\n        }\n        if (VAR_10->u.hvm.mmio_hole_memkb) {\n            uint64_t VAR_50 = (1ULL << 32) -\n                (VAR_10->u.hvm.mmio_hole_memkb << 10);\n\n            if (VAR_50 > VAR_51) {\n                LOG(VAR_52, \"mmio_hole_memkb=%\"VAR_43\n                    \" invalid ignored.\\n\",\n                    VAR_10->u.hvm.mmio_hole_memkb);\n            } else {\n                VAR_18 = libxl__sprintf(VAR_0, \"%s,max-ram-below-4g=%\"VAR_43,\n                                            VAR_18, VAR_50);\n            }\n        }\n        flexarray_append(VAR_19, VAR_18);\n        for (VAR_21 = 0; VAR_10->extra_hvm && VAR_10->extra_hvm[VAR_21] != NULL; VAR_21++)\n            flexarray_append(VAR_19, VAR_10->extra_hvm[VAR_21]);\n        break;\n    default:\n        abort();\n    }\n\n    VAR_24 = libxl__sizekb_to_mb(VAR_10->max_memkb - VAR_10->video_memkb);\n    flexarray_append(VAR_19, \"-m\");\n    flexarray_append(VAR_19, libxl__sprintf(VAR_0, \"%\"VAR_53, VAR_24));\n\n    if (VAR_10->type == VAR_34) {\n        if (VAR_10->u.hvm.hdtype == VAR_54)\n            flexarray_append_pair(VAR_19, \"-device\", \"ahci,id=ahci0\");\n        for (VAR_21 = 0; VAR_21 < VAR_13; VAR_21++) {\n            int VAR_55, VAR_56;\n            int VAR_57 =\n                libxl__device_disk_dev_number(VAR_11[VAR_21].vdev, &VAR_55, &VAR_56);\n            const char *VAR_58 = qemu_disk_format_string(VAR_11[VAR_21].format);\n            char *VAR_59;\n            const char *VAR_60;\n\n            if (VAR_57 == -1) {\n                LIBXL__LOG(VAR_8, VAR_61, \"unable to determine\"\n                           \" disk number for %s\", VAR_11[VAR_21].vdev);\n                continue;\n            }\n\n            if (VAR_11[VAR_21].is_cdrom) {\n                if (VAR_11[VAR_21].format == VAR_62)\n                    VAR_59 = libxl__sprintf\n                        (VAR_0, \"if=ide,index=%d,readonly=%s,media=cdrom,cache=writeback,id=ide-%i\",\n                         VAR_55, VAR_11[VAR_21].readwrite ? \"off\" : \"on\", VAR_57);\n                else\n                    VAR_59 = libxl__sprintf\n                        (VAR_0, \"file=%s,if=ide,index=%d,readonly=%s,media=cdrom,format=%s,cache=writeback,id=ide-%i\",\n                         VAR_11[VAR_21].pdev_path, VAR_55, VAR_11[VAR_21].readwrite ? \"off\" : \"on\", VAR_58, VAR_57);\n            } else {\n                if (!VAR_11[VAR_21].readwrite) {\n                    LIBXL__LOG(VAR_8, VAR_63, \"qemu-xen doesn't support read-only disk drivers\");\n                    return VAR_31;\n                }\n\n                if (VAR_11[VAR_21].format == VAR_62) {\n                    LIBXL__LOG(VAR_8, VAR_61, \"cannot support\"\n                               \" empty disk format for %s\", VAR_11[VAR_21].vdev);\n                    continue;\n                }\n\n                if (VAR_58 == NULL) {\n                    LIBXL__LOG(VAR_8, VAR_61, \"unable to determine\"\n                               \" disk image format %s\", VAR_11[VAR_21].vdev);\n                    continue;\n                }\n\n                if (VAR_11[VAR_21].backend == VAR_64) {\n                    VAR_58 = qemu_disk_format_string(VAR_65);\n                    VAR_60 = libxl__blktap_devpath(VAR_0, VAR_11[VAR_21].pdev_path,\n                                                      VAR_11[VAR_21].format);\n                } else {\n                    VAR_60 = VAR_11[VAR_21].pdev_path;\n                }\n\n                /* COMMENT_29 */\n                                                              \n                  \n                                                                 \n                                               \n                   \n                if (strncmp(VAR_11[VAR_21].vdev, \"sd\", 2) == 0)\n                    VAR_59 = libxl__sprintf\n                        (VAR_0, \"file=%s,if=scsi,bus=0,unit=%d,format=%s,cache=writeback\",\n                         VAR_60, VAR_55, VAR_58);\n                else if (VAR_55 < 6 && VAR_10->u.hvm.hdtype == VAR_54) {\n                    flexarray_vappend(VAR_19, \"-drive\",\n                        GCSPRINTF(\"file=%s,if=none,id=ahcidisk-%d,format=%s,cache=writeback\",\n                        VAR_60, VAR_55, VAR_58),\n                        \"-device\", GCSPRINTF(\"ide-hd,bus=ahci0.%d,unit=0,drive=ahcidisk-%d\",\n                        VAR_55, VAR_55), NULL);\n                    continue;\n                } else if (VAR_55 < 4)\n                    VAR_59 = libxl__sprintf\n                        (VAR_0, \"file=%s,if=ide,index=%d,media=disk,format=%s,cache=writeback\",\n                         VAR_60, VAR_55, VAR_58);\n                else\n                    continue; /* COMMENT_35 */\n            }\n\n            flexarray_append(VAR_19, \"-drive\");\n            flexarray_append(VAR_19, VAR_59);\n        }\n\n        switch (VAR_10->u.hvm.vendor_device) {\n        case VAR_66:\n            flexarray_append(VAR_19, \"-device\");\n            flexarray_append(VAR_19, \"xen-pvdevice,device-id=0xc000\");\n            break;\n        default:\n            break;\n        }\n    }\n    flexarray_append(VAR_19, NULL);\n    *VAR_4 = (char **) flexarray_contents(VAR_19);\n    flexarray_append(VAR_20, NULL);\n    if (VAR_5)\n        *VAR_5 = (char **) flexarray_contents(VAR_20);\n    return 0;\n}",
    "func_graph_path": "xen-project/xen/fa30003c13577b7ae4bbb46252ec1cbabd65c645/libxl_dm.c/vul/after/0.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -408,13 +408,18 @@\n             if (disks[i].is_cdrom) {\n                 if (disks[i].format == LIBXL_DISK_FORMAT_EMPTY)\n                     drive = libxl__sprintf\n-                        (gc, \"if=ide,index=%d,media=cdrom,cache=writeback,id=ide-%i\",\n-                         disk, dev_number);\n+                        (gc, \"if=ide,index=%d,readonly=%s,media=cdrom,cache=writeback,id=ide-%i\",\n+                         disk, disks[i].readwrite ? \"off\" : \"on\", dev_number);\n                 else\n                     drive = libxl__sprintf\n-                        (gc, \"file=%s,if=ide,index=%d,media=cdrom,format=%s,cache=writeback,id=ide-%i\",\n-                         disks[i].pdev_path, disk, format, dev_number);\n+                        (gc, \"file=%s,if=ide,index=%d,readonly=%s,media=cdrom,format=%s,cache=writeback,id=ide-%i\",\n+                         disks[i].pdev_path, disk, disks[i].readwrite ? \"off\" : \"on\", format, dev_number);\n             } else {\n+                if (!disks[i].readwrite) {\n+                    LIBXL__LOG(ctx, LIBXL__LOG_ERROR, \"qemu-xen doesn't support read-only disk drivers\");\n+                    return ERROR_INVAL;\n+                }\n+\n                 if (disks[i].format == LIBXL_DISK_FORMAT_EMPTY) {\n                     LIBXL__LOG(ctx, LIBXL__LOG_WARNING, \"cannot support\"\n                                \" empty disk format for %s\", disks[i].vdev);",
    "diff_line_info": {
        "deleted_lines": [
            "                        (gc, \"if=ide,index=%d,media=cdrom,cache=writeback,id=ide-%i\",",
            "                         disk, dev_number);",
            "                        (gc, \"file=%s,if=ide,index=%d,media=cdrom,format=%s,cache=writeback,id=ide-%i\",",
            "                         disks[i].pdev_path, disk, format, dev_number);"
        ],
        "added_lines": [
            "                        (gc, \"if=ide,index=%d,readonly=%s,media=cdrom,cache=writeback,id=ide-%i\",",
            "                         disk, disks[i].readwrite ? \"off\" : \"on\", dev_number);",
            "                        (gc, \"file=%s,if=ide,index=%d,readonly=%s,media=cdrom,format=%s,cache=writeback,id=ide-%i\",",
            "                         disks[i].pdev_path, disk, disks[i].readwrite ? \"off\" : \"on\", format, dev_number);",
            "                if (!disks[i].readwrite) {",
            "                    LIBXL__LOG(ctx, LIBXL__LOG_ERROR, \"qemu-xen doesn't support read-only disk drivers\");",
            "                    return ERROR_INVAL;",
            "                }",
            ""
        ]
    },
    "is_vul": true,
    "pr_url": null,
    "description": "no more info"
}