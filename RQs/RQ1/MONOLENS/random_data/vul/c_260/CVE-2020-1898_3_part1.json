{
    "cve_id": "CVE-2020-1898",
    "cwe_ids": [
        "CWE-674"
    ],
    "cvss_vector": "AV:N/AC:L/Au:N/C:N/I:N/A:P",
    "cvss_is_v3": false,
    "repo_name": "facebook/hhvm",
    "commit_msg": "CVE-2020-1898\n\nDon't allow for unlimited nesting in FBUnserialize or fb_compact_unserialize",
    "commit_hash": "1746dfb11fc0048366f34669e74318b8278a684c",
    "git_url": "https://github.com/facebook/hhvm/commit/1746dfb11fc0048366f34669e74318b8278a684c",
    "file_path": "hphp/runtime/ext/fb/FBSerialize/FBSerialize-inl.h",
    "func_name": "FBUnserializer<V>::unserializeVector",
    "func_before": "inline typename V::VectorType FBUnserializer<V>::unserializeVector() {\n  p_ += CODE_SIZE;\n\n  typename V::VectorType ret = V::createVector();\n\n  size_t code = nextCode();\n  while (code != FB_SERIALIZE_STOP) {\n    V::vectorAppend(ret, unserializeThing());\n    code = nextCode();\n  }\n  p_ += CODE_SIZE;\n  return ret;\n}",
    "abstract_func_before": "inline typename V::VectorType FBUnserializer<V>::unserializeVector() {\n  VAR_0 += VAR_1;\n\n  typename V::VectorType VAR_2 = V::createVector();\n\n  size_t VAR_3 = nextCode();\n  while (VAR_3 != VAR_4) {\n    V::vectorAppend(VAR_2, unserializeThing());\n    VAR_3 = nextCode();\n  }\n  VAR_0 += VAR_1;\n  return VAR_2;\n}",
    "func_graph_path_before": "facebook/hhvm/1746dfb11fc0048366f34669e74318b8278a684c/FBSerialize-inl.h/vul/before/4.json",
    "func": "inline typename V::VectorType\nFBUnserializer<V>::unserializeVector(size_t depth) {\n  p_ += CODE_SIZE;\n\n  typename V::VectorType ret = V::createVector();\n\n  size_t code = nextCode();\n  while (code != FB_SERIALIZE_STOP) {\n    V::vectorAppend(ret, unserializeThing(depth + 1));\n    code = nextCode();\n  }\n  p_ += CODE_SIZE;\n  return ret;\n}",
    "abstract_func": "inline typename V::VectorType\nFBUnserializer<V>::unserializeVector(size_t VAR_0) {\n  VAR_1 += VAR_2;\n\n  typename V::VectorType VAR_3 = V::createVector();\n\n  size_t VAR_4 = nextCode();\n  while (VAR_4 != VAR_5) {\n    V::vectorAppend(VAR_3, unserializeThing(VAR_0 + 1));\n    VAR_4 = nextCode();\n  }\n  VAR_1 += VAR_2;\n  return VAR_3;\n}",
    "func_graph_path": "facebook/hhvm/1746dfb11fc0048366f34669e74318b8278a684c/FBSerialize-inl.h/vul/after/4.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -1,11 +1,12 @@\n-inline typename V::VectorType FBUnserializer<V>::unserializeVector() {\n+inline typename V::VectorType\n+FBUnserializer<V>::unserializeVector(size_t depth) {\n   p_ += CODE_SIZE;\n \n   typename V::VectorType ret = V::createVector();\n \n   size_t code = nextCode();\n   while (code != FB_SERIALIZE_STOP) {\n-    V::vectorAppend(ret, unserializeThing());\n+    V::vectorAppend(ret, unserializeThing(depth + 1));\n     code = nextCode();\n   }\n   p_ += CODE_SIZE;",
    "diff_line_info": {
        "deleted_lines": [
            "inline typename V::VectorType FBUnserializer<V>::unserializeVector() {",
            "    V::vectorAppend(ret, unserializeThing());"
        ],
        "added_lines": [
            "inline typename V::VectorType",
            "FBUnserializer<V>::unserializeVector(size_t depth) {",
            "    V::vectorAppend(ret, unserializeThing(depth + 1));"
        ]
    },
    "is_vul": true,
    "pr_url": null,
    "description": "no more info"
}