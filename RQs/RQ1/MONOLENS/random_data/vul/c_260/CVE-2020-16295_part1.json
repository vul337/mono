{
    "cve_id": "CVE-2020-16295",
    "cwe_ids": [
        "CWE-476"
    ],
    "cvss_vector": "AV:N/AC:M/Au:N/C:N/I:N/A:P",
    "cvss_is_v3": false,
    "repo_name": "ArtifexSoftware/ghostpdl",
    "commit_msg": "Color Laserjet device - properly check params\n\nBug #701796 \"Segmentation fault at devices/gdevclj.c:269 in clj_media_size\"\n\nThe test in clj_media_size() as incorrect, it didn't signal an error if\nthere was no HWResolution in the param list. This left the parameter\n'fres' undefined leading to a potential invalid memory read, or a\ndivide-by-zero error.\n\nThis commit returns an error if we get a param list with no HWResolution\nI'm not absolutely certain if this is correct, but at least signalling\nan error is better than a seg fault.",
    "commit_hash": "2c2dc335c212750e0fb8ae157063bc06cafa8d3e",
    "git_url": "https://github.com/ArtifexSoftware/ghostpdl/commit/2c2dc335c212750e0fb8ae157063bc06cafa8d3e",
    "file_path": "devices/gdevclj.c",
    "func_name": "clj_media_size",
    "func_before": "static int\nclj_media_size(float mediasize[2], gs_param_list *plist)\n{\n    gs_param_float_array fres;\n    gs_param_float_array fsize;\n    gs_param_int_array hwsize;\n    int have_pagesize = 0;\n\n    if ( (param_read_float_array(plist, \"HWResolution\", &fres) == 0) &&\n          !is_supported_resolution(fres.data) )\n        return_error(gs_error_rangecheck);\n\n    if ( (param_read_float_array(plist, \"PageSize\", &fsize) == 0) ||\n         (param_read_float_array(plist, \".MediaSize\", &fsize) == 0) ) {\n        mediasize[0] = fsize.data[0];\n        mediasize[1] = fsize.data[1];\n        have_pagesize = 1;\n    }\n\n    if (param_read_int_array(plist, \"HWSize\", &hwsize) == 0) {\n        mediasize[0] = ((float)hwsize.data[0]) * 72 / fres.data[0];\n        mediasize[1] = ((float)hwsize.data[1]) * 72 / fres.data[1];\n        have_pagesize = 1;\n    }\n\n    return have_pagesize;\n}",
    "abstract_func_before": "static int\nclj_media_size(float VAR_0[2], gs_param_list *VAR_1)\n{\n    gs_param_float_array VAR_2;\n    gs_param_float_array VAR_3;\n    gs_param_int_array VAR_4;\n    int VAR_5 = 0;\n\n    if ( (param_read_float_array(VAR_1, \"HWResolution\", &VAR_2) == 0) &&\n          !is_supported_resolution(VAR_2.data) )\n        return_error(VAR_6);\n\n    if ( (param_read_float_array(VAR_1, \"PageSize\", &VAR_3) == 0) ||\n         (param_read_float_array(VAR_1, \".MediaSize\", &VAR_3) == 0) ) {\n        VAR_0[0] = VAR_3.data[0];\n        VAR_0[1] = VAR_3.data[1];\n        VAR_5 = 1;\n    }\n\n    if (param_read_int_array(VAR_1, \"HWSize\", &VAR_4) == 0) {\n        VAR_0[0] = ((float)VAR_4.data[0]) * 72 / VAR_2.data[0];\n        VAR_0[1] = ((float)VAR_4.data[1]) * 72 / VAR_2.data[1];\n        VAR_5 = 1;\n    }\n\n    return VAR_5;\n}",
    "func_graph_path_before": "ArtifexSoftware/ghostpdl/2c2dc335c212750e0fb8ae157063bc06cafa8d3e/gdevclj.c/vul/before/0.json",
    "func": "static int\nclj_media_size(float mediasize[2], gs_param_list *plist)\n{\n    gs_param_float_array fres;\n    gs_param_float_array fsize;\n    gs_param_int_array hwsize;\n    int have_pagesize = 0;\n\n    if ( param_read_float_array(plist, \"HWResolution\", &fres) != 0 ||\n          !is_supported_resolution(fres.data) )\n        return_error(gs_error_rangecheck);\n\n    if ( (param_read_float_array(plist, \"PageSize\", &fsize) == 0) ||\n         (param_read_float_array(plist, \".MediaSize\", &fsize) == 0) ) {\n        mediasize[0] = fsize.data[0];\n        mediasize[1] = fsize.data[1];\n        have_pagesize = 1;\n    }\n\n    if (param_read_int_array(plist, \"HWSize\", &hwsize) == 0) {\n        mediasize[0] = ((float)hwsize.data[0]) * 72 / fres.data[0];\n        mediasize[1] = ((float)hwsize.data[1]) * 72 / fres.data[1];\n        have_pagesize = 1;\n    }\n\n    return have_pagesize;\n}",
    "abstract_func": "static int\nclj_media_size(float VAR_0[2], gs_param_list *VAR_1)\n{\n    gs_param_float_array VAR_2;\n    gs_param_float_array VAR_3;\n    gs_param_int_array VAR_4;\n    int VAR_5 = 0;\n\n    if ( param_read_float_array(VAR_1, \"HWResolution\", &VAR_2) != 0 ||\n          !is_supported_resolution(VAR_2.data) )\n        return_error(VAR_6);\n\n    if ( (param_read_float_array(VAR_1, \"PageSize\", &VAR_3) == 0) ||\n         (param_read_float_array(VAR_1, \".MediaSize\", &VAR_3) == 0) ) {\n        VAR_0[0] = VAR_3.data[0];\n        VAR_0[1] = VAR_3.data[1];\n        VAR_5 = 1;\n    }\n\n    if (param_read_int_array(VAR_1, \"HWSize\", &VAR_4) == 0) {\n        VAR_0[0] = ((float)VAR_4.data[0]) * 72 / VAR_2.data[0];\n        VAR_0[1] = ((float)VAR_4.data[1]) * 72 / VAR_2.data[1];\n        VAR_5 = 1;\n    }\n\n    return VAR_5;\n}",
    "func_graph_path": "ArtifexSoftware/ghostpdl/2c2dc335c212750e0fb8ae157063bc06cafa8d3e/gdevclj.c/vul/after/0.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -6,7 +6,7 @@\n     gs_param_int_array hwsize;\n     int have_pagesize = 0;\n \n-    if ( (param_read_float_array(plist, \"HWResolution\", &fres) == 0) &&\n+    if ( param_read_float_array(plist, \"HWResolution\", &fres) != 0 ||\n           !is_supported_resolution(fres.data) )\n         return_error(gs_error_rangecheck);\n ",
    "diff_line_info": {
        "deleted_lines": [
            "    if ( (param_read_float_array(plist, \"HWResolution\", &fres) == 0) &&"
        ],
        "added_lines": [
            "    if ( param_read_float_array(plist, \"HWResolution\", &fres) != 0 ||"
        ]
    },
    "is_vul": true,
    "pr_url": null,
    "description": "no more info"
}