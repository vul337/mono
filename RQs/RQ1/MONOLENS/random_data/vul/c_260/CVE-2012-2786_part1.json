{
    "cve_id": "CVE-2012-2786",
    "cwe_ids": [
        "CWE-Other"
    ],
    "cvss_vector": "AV:N/AC:L/Au:N/C:C/I:C/A:C",
    "cvss_is_v3": false,
    "repo_name": "ffmpeg",
    "commit_msg": "\ndfa: fix out of array write in decode_wdlt()\n\nFound-by: Mateusz \"j00ru\" Jurczyk and Gynvael Coldwind\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>\n",
    "commit_hash": "d1c95d2ce39560e251fdb14f4af91b04fd7b845c",
    "git_url": "http://git.videolan.org/?p=ffmpeg.git;a=commit;h=d1c95d2ce39560e251fdb14f4af91b04fd7b845c",
    "file_path": "libavcodec/dfa.c",
    "func_name": "decode_wdlt",
    "func_before": "static int decode_wdlt(GetByteContext *gb, uint8_t *frame, int width, int height)\n{\n    const uint8_t *frame_end   = frame + width * height;\n    uint8_t *line_ptr;\n    int count, i, v, lines, segments;\n\n    lines = bytestream2_get_le16(gb);\n    if (lines > height)\n        return -1;\n\n    while (lines--) {\n        if (bytestream2_get_bytes_left(gb) < 2)\n            return -1;\n        segments = bytestream2_get_le16u(gb);\n        while ((segments & 0xC000) == 0xC000) {\n            unsigned delta = -((int16_t)segments * width);\n            if (frame_end - frame <= delta)\n                return -1;\n            frame    += delta;\n            segments = bytestream2_get_le16(gb);\n        }\n        if (segments & 0x8000) {\n            frame[width - 1] = segments & 0xFF;\n            segments = bytestream2_get_le16(gb);\n        }\n        line_ptr = frame;\n        frame += width;\n        while (segments--) {\n            if (frame - line_ptr <= bytestream2_peek_byte(gb))\n                return -1;\n            line_ptr += bytestream2_get_byte(gb);\n            count = (int8_t)bytestream2_get_byte(gb);\n            if (count >= 0) {\n                if (frame - line_ptr < count * 2)\n                    return -1;\n                if (bytestream2_get_buffer(gb, line_ptr, count * 2) != count * 2)\n                    return -1;\n                line_ptr += count * 2;\n            } else {\n                count = -count;\n                if (frame - line_ptr < count * 2)\n                    return -1;\n                v = bytestream2_get_le16(gb);\n                for (i = 0; i < count; i++)\n                    bytestream_put_le16(&line_ptr, v);\n            }\n        }\n    }\n\n    return 0;\n}",
    "abstract_func_before": "static int decode_wdlt(GetByteContext *VAR_0, uint8_t *VAR_1, int VAR_2, int VAR_3)\n{\n    const uint8_t *VAR_4   = VAR_1 + VAR_2 * VAR_3;\n    uint8_t *VAR_5;\n    int VAR_6, VAR_7, VAR_8, VAR_9, VAR_10;\n\n    VAR_9 = bytestream2_get_le16(VAR_0);\n    if (VAR_9 > VAR_3)\n        return -1;\n\n    while (VAR_9--) {\n        if (bytestream2_get_bytes_left(VAR_0) < 2)\n            return -1;\n        VAR_10 = bytestream2_get_le16u(VAR_0);\n        while ((VAR_10 & 0xC000) == 0xC000) {\n            unsigned VAR_11 = -((int16_t)VAR_10 * VAR_2);\n            if (VAR_4 - VAR_1 <= VAR_11)\n                return -1;\n            VAR_1    += VAR_11;\n            VAR_10 = bytestream2_get_le16(VAR_0);\n        }\n        if (VAR_10 & 0x8000) {\n            VAR_1[VAR_2 - 1] = VAR_10 & 0xFF;\n            VAR_10 = bytestream2_get_le16(VAR_0);\n        }\n        VAR_5 = VAR_1;\n        VAR_1 += VAR_2;\n        while (VAR_10--) {\n            if (VAR_1 - VAR_5 <= bytestream2_peek_byte(VAR_0))\n                return -1;\n            VAR_5 += bytestream2_get_byte(VAR_0);\n            VAR_6 = (int8_t)bytestream2_get_byte(VAR_0);\n            if (VAR_6 >= 0) {\n                if (VAR_1 - VAR_5 < VAR_6 * 2)\n                    return -1;\n                if (bytestream2_get_buffer(VAR_0, VAR_5, VAR_6 * 2) != VAR_6 * 2)\n                    return -1;\n                VAR_5 += VAR_6 * 2;\n            } else {\n                VAR_6 = -VAR_6;\n                if (VAR_1 - VAR_5 < VAR_6 * 2)\n                    return -1;\n                VAR_8 = bytestream2_get_le16(VAR_0);\n                for (VAR_7 = 0; VAR_7 < VAR_6; VAR_7++)\n                    bytestream_put_le16(&VAR_5, VAR_8);\n            }\n        }\n    }\n\n    return 0;\n}",
    "func_graph_path_before": "ffmpeg/d1c95d2ce39560e251fdb14f4af91b04fd7b845c/dfa.c/vul/before/0.json",
    "func": "static int decode_wdlt(GetByteContext *gb, uint8_t *frame, int width, int height)\n{\n    const uint8_t *frame_end   = frame + width * height;\n    uint8_t *line_ptr;\n    int count, i, v, lines, segments;\n\n    lines = bytestream2_get_le16(gb);\n    if (lines > height)\n        return -1;\n\n    while (lines--) {\n        if (bytestream2_get_bytes_left(gb) < 2)\n            return -1;\n        segments = bytestream2_get_le16u(gb);\n        while ((segments & 0xC000) == 0xC000) {\n            unsigned delta = -((int16_t)segments * width);\n            if (frame_end - frame <= delta)\n                return -1;\n            frame    += delta;\n            segments = bytestream2_get_le16(gb);\n        }\n        if (frame_end <= frame)\n            return -1;\n        if (segments & 0x8000) {\n            frame[width - 1] = segments & 0xFF;\n            segments = bytestream2_get_le16(gb);\n        }\n        line_ptr = frame;\n        frame += width;\n        while (segments--) {\n            if (frame - line_ptr <= bytestream2_peek_byte(gb))\n                return -1;\n            line_ptr += bytestream2_get_byte(gb);\n            count = (int8_t)bytestream2_get_byte(gb);\n            if (count >= 0) {\n                if (frame - line_ptr < count * 2)\n                    return -1;\n                if (bytestream2_get_buffer(gb, line_ptr, count * 2) != count * 2)\n                    return -1;\n                line_ptr += count * 2;\n            } else {\n                count = -count;\n                if (frame - line_ptr < count * 2)\n                    return -1;\n                v = bytestream2_get_le16(gb);\n                for (i = 0; i < count; i++)\n                    bytestream_put_le16(&line_ptr, v);\n            }\n        }\n    }\n\n    return 0;\n}",
    "abstract_func": "static int decode_wdlt(GetByteContext *VAR_0, uint8_t *VAR_1, int VAR_2, int VAR_3)\n{\n    const uint8_t *VAR_4   = VAR_1 + VAR_2 * VAR_3;\n    uint8_t *VAR_5;\n    int VAR_6, VAR_7, VAR_8, VAR_9, VAR_10;\n\n    VAR_9 = bytestream2_get_le16(VAR_0);\n    if (VAR_9 > VAR_3)\n        return -1;\n\n    while (VAR_9--) {\n        if (bytestream2_get_bytes_left(VAR_0) < 2)\n            return -1;\n        VAR_10 = bytestream2_get_le16u(VAR_0);\n        while ((VAR_10 & 0xC000) == 0xC000) {\n            unsigned VAR_11 = -((int16_t)VAR_10 * VAR_2);\n            if (VAR_4 - VAR_1 <= VAR_11)\n                return -1;\n            VAR_1    += VAR_11;\n            VAR_10 = bytestream2_get_le16(VAR_0);\n        }\n        if (VAR_4 <= VAR_1)\n            return -1;\n        if (VAR_10 & 0x8000) {\n            VAR_1[VAR_2 - 1] = VAR_10 & 0xFF;\n            VAR_10 = bytestream2_get_le16(VAR_0);\n        }\n        VAR_5 = VAR_1;\n        VAR_1 += VAR_2;\n        while (VAR_10--) {\n            if (VAR_1 - VAR_5 <= bytestream2_peek_byte(VAR_0))\n                return -1;\n            VAR_5 += bytestream2_get_byte(VAR_0);\n            VAR_6 = (int8_t)bytestream2_get_byte(VAR_0);\n            if (VAR_6 >= 0) {\n                if (VAR_1 - VAR_5 < VAR_6 * 2)\n                    return -1;\n                if (bytestream2_get_buffer(VAR_0, VAR_5, VAR_6 * 2) != VAR_6 * 2)\n                    return -1;\n                VAR_5 += VAR_6 * 2;\n            } else {\n                VAR_6 = -VAR_6;\n                if (VAR_1 - VAR_5 < VAR_6 * 2)\n                    return -1;\n                VAR_8 = bytestream2_get_le16(VAR_0);\n                for (VAR_7 = 0; VAR_7 < VAR_6; VAR_7++)\n                    bytestream_put_le16(&VAR_5, VAR_8);\n            }\n        }\n    }\n\n    return 0;\n}",
    "func_graph_path": "ffmpeg/d1c95d2ce39560e251fdb14f4af91b04fd7b845c/dfa.c/vul/after/0.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -19,6 +19,8 @@\n             frame    += delta;\n             segments = bytestream2_get_le16(gb);\n         }\n+        if (frame_end <= frame)\n+            return -1;\n         if (segments & 0x8000) {\n             frame[width - 1] = segments & 0xFF;\n             segments = bytestream2_get_le16(gb);",
    "diff_line_info": {
        "deleted_lines": [],
        "added_lines": [
            "        if (frame_end <= frame)",
            "            return -1;"
        ]
    },
    "is_vul": true,
    "pr_url": null,
    "description": "no more info"
}