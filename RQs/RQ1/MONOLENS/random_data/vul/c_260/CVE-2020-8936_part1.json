{
    "cve_id": "CVE-2020-8936",
    "cwe_ids": [
        "CWE-125"
    ],
    "cvss_vector": "AV:L/AC:L/Au:N/C:P/I:N/A:N",
    "cvss_is_v3": false,
    "repo_name": "google/asylo",
    "commit_msg": "Verify UntrustedCall output is outside enclave\n\nPiperOrigin-RevId: 333781703\nChange-Id: I9df55c04dc8b04f4bf0bda8e68cc32bca81b933a",
    "commit_hash": "83036fd841d33baa7e039f842d131aa7881fdcc2",
    "git_url": "https://github.com/google/asylo/commit/83036fd841d33baa7e039f842d131aa7881fdcc2",
    "file_path": "asylo/platform/primitives/sgx/trusted_sgx.cc",
    "func_name": "TrustedPrimitives::UntrustedCall",
    "func_before": "PrimitiveStatus TrustedPrimitives::UntrustedCall(uint64_t untrusted_selector,\n                                                 MessageWriter *input,\n                                                 MessageReader *output) {\n  int ret;\n\n  UntrustedCacheMalloc *untrusted_cache = UntrustedCacheMalloc::Instance();\n\n  SgxParams *const sgx_params =\n      reinterpret_cast<SgxParams *>(untrusted_cache->Malloc(sizeof(SgxParams)));\n  Cleanup clean_up(\n      [sgx_params, untrusted_cache] { untrusted_cache->Free(sgx_params); });\n  sgx_params->input_size = 0;\n  sgx_params->input = nullptr;\n  if (input) {\n    sgx_params->input_size = input->MessageSize();\n    if (sgx_params->input_size > 0) {\n      // Allocate and copy data to |input_buffer|.\n      sgx_params->input = untrusted_cache->Malloc(sgx_params->input_size);\n      input->Serialize(const_cast<void *>(sgx_params->input));\n    }\n  }\n  sgx_params->output_size = 0;\n  sgx_params->output = nullptr;\n  CHECK_OCALL(\n      ocall_dispatch_untrusted_call(&ret, untrusted_selector, sgx_params));\n  if (sgx_params->input) {\n    untrusted_cache->Free(const_cast<void *>(sgx_params->input));\n  }\n  if (sgx_params->output) {\n    // For the results obtained in |output_buffer|, copy them to |output|\n    // before freeing the buffer.\n    output->Deserialize(sgx_params->output, sgx_params->output_size);\n    TrustedPrimitives::UntrustedLocalFree(sgx_params->output);\n  }\n  return PrimitiveStatus::OkStatus();\n}",
    "abstract_func_before": "PrimitiveStatus TrustedPrimitives::UntrustedCall(uint64_t VAR_0,\n                                                 MessageWriter *VAR_1,\n                                                 MessageReader *VAR_2) {\n  int VAR_3;\n\n  UntrustedCacheMalloc *VAR_4 = UntrustedCacheMalloc::Instance();\n\n  SgxParams *const VAR_5 =\n      VAR_6<SgxParams *>(VAR_4->Malloc(sizeof(SgxParams)));\n  Cleanup VAR_7(\n      [VAR_5, VAR_4] { VAR_4->Free(VAR_5); });\n  VAR_5->input_size = 0;\n  VAR_5->input = nullptr;\n  if (VAR_1) {\n    VAR_5->input_size = VAR_1->MessageSize();\n    if (VAR_5->input_size > 0) {\n      /* COMMENT_0 */\n      VAR_5->input = VAR_4->Malloc(VAR_5->input_size);\n      VAR_1->Serialize(VAR_8<void *>(VAR_5->input));\n    }\n  }\n  VAR_5->output_size = 0;\n  VAR_5->output = nullptr;\n  CHECK_OCALL(\n      ocall_dispatch_untrusted_call(&VAR_3, VAR_0, VAR_5));\n  if (VAR_5->input) {\n    VAR_4->Free(VAR_8<void *>(VAR_5->input));\n  }\n  if (VAR_5->output) {\n    /* COMMENT_1 */\n    /* COMMENT_2 */\n    VAR_2->Deserialize(VAR_5->output, VAR_5->output_size);\n    TrustedPrimitives::UntrustedLocalFree(VAR_5->output);\n  }\n  return PrimitiveStatus::OkStatus();\n}",
    "func_graph_path_before": "google/asylo/83036fd841d33baa7e039f842d131aa7881fdcc2/trusted_sgx.cc/vul/before/0.json",
    "func": "PrimitiveStatus TrustedPrimitives::UntrustedCall(uint64_t untrusted_selector,\n                                                 MessageWriter *input,\n                                                 MessageReader *output) {\n  int ret;\n\n  UntrustedCacheMalloc *untrusted_cache = UntrustedCacheMalloc::Instance();\n\n  SgxParams *const sgx_params =\n      reinterpret_cast<SgxParams *>(untrusted_cache->Malloc(sizeof(SgxParams)));\n  Cleanup clean_up(\n      [sgx_params, untrusted_cache] { untrusted_cache->Free(sgx_params); });\n  sgx_params->input_size = 0;\n  sgx_params->input = nullptr;\n  if (input) {\n    sgx_params->input_size = input->MessageSize();\n    if (sgx_params->input_size > 0) {\n      // Allocate and copy data to |input_buffer|.\n      sgx_params->input = untrusted_cache->Malloc(sgx_params->input_size);\n      input->Serialize(const_cast<void *>(sgx_params->input));\n    }\n  }\n  sgx_params->output_size = 0;\n  sgx_params->output = nullptr;\n  CHECK_OCALL(\n      ocall_dispatch_untrusted_call(&ret, untrusted_selector, sgx_params));\n  if (sgx_params->input) {\n    untrusted_cache->Free(const_cast<void *>(sgx_params->input));\n  }\n  if (!TrustedPrimitives::IsOutsideEnclave(sgx_params->output,\n                                           sgx_params->output_size)) {\n    TrustedPrimitives::BestEffortAbort(\n        \"UntrustedCall: sgx_param output should be in untrusted memory\");\n  }\n  if (sgx_params->output) {\n    // For the results obtained in |output_buffer|, copy them to |output|\n    // before freeing the buffer.\n    output->Deserialize(sgx_params->output, sgx_params->output_size);\n    TrustedPrimitives::UntrustedLocalFree(sgx_params->output);\n  }\n  return PrimitiveStatus::OkStatus();\n}",
    "abstract_func": "PrimitiveStatus TrustedPrimitives::UntrustedCall(uint64_t VAR_0,\n                                                 MessageWriter *VAR_1,\n                                                 MessageReader *VAR_2) {\n  int VAR_3;\n\n  UntrustedCacheMalloc *VAR_4 = UntrustedCacheMalloc::Instance();\n\n  SgxParams *const VAR_5 =\n      VAR_6<SgxParams *>(VAR_4->Malloc(sizeof(SgxParams)));\n  Cleanup VAR_7(\n      [VAR_5, VAR_4] { VAR_4->Free(VAR_5); });\n  VAR_5->input_size = 0;\n  VAR_5->input = nullptr;\n  if (VAR_1) {\n    VAR_5->input_size = VAR_1->MessageSize();\n    if (VAR_5->input_size > 0) {\n      /* COMMENT_0 */\n      VAR_5->input = VAR_4->Malloc(VAR_5->input_size);\n      VAR_1->Serialize(VAR_8<void *>(VAR_5->input));\n    }\n  }\n  VAR_5->output_size = 0;\n  VAR_5->output = nullptr;\n  CHECK_OCALL(\n      ocall_dispatch_untrusted_call(&VAR_3, VAR_0, VAR_5));\n  if (VAR_5->input) {\n    VAR_4->Free(VAR_8<void *>(VAR_5->input));\n  }\n  if (!TrustedPrimitives::IsOutsideEnclave(VAR_5->output,\n                                           VAR_5->output_size)) {\n    TrustedPrimitives::BestEffortAbort(\n        \"UntrustedCall: sgx_param output should be in untrusted memory\");\n  }\n  if (VAR_5->output) {\n    /* COMMENT_1 */\n    /* COMMENT_2 */\n    VAR_2->Deserialize(VAR_5->output, VAR_5->output_size);\n    TrustedPrimitives::UntrustedLocalFree(VAR_5->output);\n  }\n  return PrimitiveStatus::OkStatus();\n}",
    "func_graph_path": "google/asylo/83036fd841d33baa7e039f842d131aa7881fdcc2/trusted_sgx.cc/vul/after/0.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -26,6 +26,11 @@\n   if (sgx_params->input) {\n     untrusted_cache->Free(const_cast<void *>(sgx_params->input));\n   }\n+  if (!TrustedPrimitives::IsOutsideEnclave(sgx_params->output,\n+                                           sgx_params->output_size)) {\n+    TrustedPrimitives::BestEffortAbort(\n+        \"UntrustedCall: sgx_param output should be in untrusted memory\");\n+  }\n   if (sgx_params->output) {\n     // For the results obtained in |output_buffer|, copy them to |output|\n     // before freeing the buffer.",
    "diff_line_info": {
        "deleted_lines": [],
        "added_lines": [
            "  if (!TrustedPrimitives::IsOutsideEnclave(sgx_params->output,",
            "                                           sgx_params->output_size)) {",
            "    TrustedPrimitives::BestEffortAbort(",
            "        \"UntrustedCall: sgx_param output should be in untrusted memory\");",
            "  }"
        ]
    },
    "is_vul": true,
    "pr_url": null,
    "description": "no more info"
}