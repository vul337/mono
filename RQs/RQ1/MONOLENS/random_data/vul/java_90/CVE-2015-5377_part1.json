{
    "cve_id": "CVE-2015-5377",
    "cwe_ids": [
        "CWE-74"
    ],
    "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:P/A:P",
    "cvss_is_v3": false,
    "repo_name": "elastic/elasticsearch",
    "commit_msg": "Restrict Exception deserialization to Core and JDK classes\n\nwhen 3rd party exceptions are deserialized they might carry\nclasses not present on the deserializing node. This causes hard\nexceptions and looses the exception entirely. This commit restricts\nthe classes we support for deserialization for core and selected JDK\nclasses to guarantee they are present on both source and target nodes",
    "commit_hash": "bf3052d14c874aead7da8855c5fcadf5428a43f2",
    "git_url": "https://github.com/elastic/elasticsearch/commit/bf3052d14c874aead7da8855c5fcadf5428a43f2",
    "file_path": "src/main/java/org/elasticsearch/transport/netty/NettyTransportChannel.java",
    "func_name": "sendResponse",
    "func_before": "@Override\n    public void sendResponse(Throwable error) throws IOException {\n        BytesStreamOutput stream = new BytesStreamOutput();\n        try {\n            stream.skip(NettyHeader.HEADER_SIZE);\n            RemoteTransportException tx = new RemoteTransportException(transport.nodeName(), transport.wrapAddress(channel.getLocalAddress()), action, error);\n            ThrowableObjectOutputStream too = new ThrowableObjectOutputStream(stream);\n            too.writeObject(tx);\n            too.close();\n        } catch (NotSerializableException e) {\n            stream.reset();\n            stream.skip(NettyHeader.HEADER_SIZE);\n            RemoteTransportException tx = new RemoteTransportException(transport.nodeName(), transport.wrapAddress(channel.getLocalAddress()), action, new NotSerializableTransportException(error));\n            ThrowableObjectOutputStream too = new ThrowableObjectOutputStream(stream);\n            too.writeObject(tx);\n            too.close();\n        }\n\n        byte status = 0;\n        status = TransportStatus.setResponse(status);\n        status = TransportStatus.setError(status);\n\n        BytesReference bytes = stream.bytes();\n        ChannelBuffer buffer = bytes.toChannelBuffer();\n        NettyHeader.writeHeader(buffer, requestId, status, version);\n        channel.write(buffer);\n        transportServiceAdapter.onResponseSent(requestId, action, error);\n    }",
    "abstract_func_before": "@Override\n    public void sendResponse(Throwable VAR_0) throws IOException {\n        BytesStreamOutput VAR_1 = new BytesStreamOutput();\n        try {\n            VAR_1.skip(VAR_2.HEADER_SIZE);\n            RemoteTransportException VAR_3 = new RemoteTransportException(VAR_4.nodeName(), VAR_4.wrapAddress(VAR_5.getLocalAddress()), VAR_6, VAR_0);\n            ThrowableObjectOutputStream VAR_7 = new ThrowableObjectOutputStream(VAR_1);\n            VAR_7.writeObject(VAR_3);\n            VAR_7.close();\n        } catch (NotSerializableException VAR_8) {\n            VAR_1.reset();\n            VAR_1.skip(VAR_2.HEADER_SIZE);\n            RemoteTransportException VAR_3 = new RemoteTransportException(VAR_4.nodeName(), VAR_4.wrapAddress(VAR_5.getLocalAddress()), VAR_6, new NotSerializableTransportException(VAR_0));\n            ThrowableObjectOutputStream VAR_7 = new ThrowableObjectOutputStream(VAR_1);\n            VAR_7.writeObject(VAR_3);\n            VAR_7.close();\n        }\n\n        byte VAR_9 = 0;\n        VAR_9 = VAR_10.setResponse(VAR_9);\n        VAR_9 = VAR_10.setError(VAR_9);\n\n        BytesReference VAR_11 = VAR_1.bytes();\n        ChannelBuffer VAR_12 = VAR_11.toChannelBuffer();\n        VAR_2.writeHeader(VAR_12, VAR_13, VAR_9, VAR_14);\n        VAR_5.write(VAR_12);\n        VAR_15.onResponseSent(VAR_13, VAR_6, VAR_0);\n    }",
    "func_graph_path_before": "elastic/elasticsearch/bf3052d14c874aead7da8855c5fcadf5428a43f2/NettyTransportChannel.java/vul/before/0.json",
    "func": "@Override\n    public void sendResponse(Throwable error) throws IOException {\n        BytesStreamOutput stream = new BytesStreamOutput();\n        if (ThrowableObjectOutputStream.canSerialize(error) == false) {\n            assert false : \"Can not serialize exception: \" + error; // make sure tests fail\n            error = new NotSerializableTransportException(error);\n        }\n        try {\n            stream.skip(NettyHeader.HEADER_SIZE);\n            RemoteTransportException tx = new RemoteTransportException(transport.nodeName(), transport.wrapAddress(channel.getLocalAddress()), action, error);\n            ThrowableObjectOutputStream too = new ThrowableObjectOutputStream(stream);\n            too.writeObject(tx);\n            too.close();\n        } catch (NotSerializableException e) {\n            stream.reset();\n            stream.skip(NettyHeader.HEADER_SIZE);\n            RemoteTransportException tx = new RemoteTransportException(transport.nodeName(), transport.wrapAddress(channel.getLocalAddress()), action, new NotSerializableTransportException(error));\n            ThrowableObjectOutputStream too = new ThrowableObjectOutputStream(stream);\n            too.writeObject(tx);\n            too.close();\n        }\n\n        byte status = 0;\n        status = TransportStatus.setResponse(status);\n        status = TransportStatus.setError(status);\n\n        BytesReference bytes = stream.bytes();\n        ChannelBuffer buffer = bytes.toChannelBuffer();\n        NettyHeader.writeHeader(buffer, requestId, status, version);\n        channel.write(buffer);\n        transportServiceAdapter.onResponseSent(requestId, action, error);\n    }",
    "abstract_func": "@Override\n    public void sendResponse(Throwable VAR_0) throws IOException {\n        BytesStreamOutput VAR_1 = new BytesStreamOutput();\n        if (VAR_2.canSerialize(VAR_0) == false) {\n            assert false : \"Can not serialize exception: \" + VAR_0; /* COMMENT_0 */\n            VAR_0 = new NotSerializableTransportException(VAR_0);\n        }\n        try {\n            VAR_1.skip(VAR_3.HEADER_SIZE);\n            RemoteTransportException VAR_4 = new RemoteTransportException(VAR_5.nodeName(), VAR_5.wrapAddress(VAR_6.getLocalAddress()), VAR_7, VAR_0);\n            ThrowableObjectOutputStream VAR_8 = new ThrowableObjectOutputStream(VAR_1);\n            VAR_8.writeObject(VAR_4);\n            VAR_8.close();\n        } catch (NotSerializableException VAR_9) {\n            VAR_1.reset();\n            VAR_1.skip(VAR_3.HEADER_SIZE);\n            RemoteTransportException VAR_4 = new RemoteTransportException(VAR_5.nodeName(), VAR_5.wrapAddress(VAR_6.getLocalAddress()), VAR_7, new NotSerializableTransportException(VAR_0));\n            ThrowableObjectOutputStream VAR_8 = new ThrowableObjectOutputStream(VAR_1);\n            VAR_8.writeObject(VAR_4);\n            VAR_8.close();\n        }\n\n        byte VAR_10 = 0;\n        VAR_10 = VAR_11.setResponse(VAR_10);\n        VAR_10 = VAR_11.setError(VAR_10);\n\n        BytesReference VAR_12 = VAR_1.bytes();\n        ChannelBuffer VAR_13 = VAR_12.toChannelBuffer();\n        VAR_3.writeHeader(VAR_13, VAR_14, VAR_10, VAR_15);\n        VAR_6.write(VAR_13);\n        VAR_16.onResponseSent(VAR_14, VAR_7, VAR_0);\n    }",
    "func_graph_path": "elastic/elasticsearch/bf3052d14c874aead7da8855c5fcadf5428a43f2/NettyTransportChannel.java/vul/after/0.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -1,6 +1,10 @@\n @Override\n     public void sendResponse(Throwable error) throws IOException {\n         BytesStreamOutput stream = new BytesStreamOutput();\n+        if (ThrowableObjectOutputStream.canSerialize(error) == false) {\n+            assert false : \"Can not serialize exception: \" + error; // make sure tests fail\n+            error = new NotSerializableTransportException(error);\n+        }\n         try {\n             stream.skip(NettyHeader.HEADER_SIZE);\n             RemoteTransportException tx = new RemoteTransportException(transport.nodeName(), transport.wrapAddress(channel.getLocalAddress()), action, error);",
    "diff_line_info": {
        "deleted_lines": [],
        "added_lines": [
            "        if (ThrowableObjectOutputStream.canSerialize(error) == false) {",
            "            assert false : \"Can not serialize exception: \" + error; // make sure tests fail",
            "            error = new NotSerializableTransportException(error);",
            "        }"
        ]
    },
    "is_vul": true,
    "pr_url": null,
    "description": "no more info"
}