{
    "cve_id": "CVE-2016-2415",
    "cwe_ids": [
        "CWE-200"
    ],
    "cvss_vector": "AV:N/AC:M/Au:N/C:C/I:N/A:N",
    "cvss_is_v3": false,
    "repo_name": "android",
    "commit_msg": "Patch Exchange Autodiscover Code for Security Issue\n\nThe change removes the unauthenticated GET fallback attempt for the\nAutodiscover process. Given that the Autodiscover code is functionally broken\nand this fallback attempt wouldn't succeed unless an attacker faked a success\nresponse, a good way to patch the security issue is to disable the attempt.\n\nThe change also updates the request content type, disables automatic\nredirects, and allows for parsing namespaces to help the first two attempts\nsucceed. As this is not meant to be a functional patch but a security patch,\nthere are no further changes to the Autodiscover code.\n\nBUG: 26488455\nChange-Id: I0fc93c95e755c8fa60e94da5bec4b3b4c49cdfc1\n",
    "commit_hash": "0d1a38b1755efe7ed4e8d7302a24186616bba9b2",
    "git_url": "https://android.googlesource.com/platform/packages/apps/Exchange/+/0d1a38b1755efe7ed4e8d7302a24186616bba9b2",
    "file_path": "src/com/android/exchange/eas/EasAutoDiscover.java",
    "func_name": "handleResponse",
    "func_before": "@Override\n    protected int handleResponse(final EasResponse response) throws\n            IOException, CommandStatusException {\n        // resp is either an authentication error, or a good response.\n        final int code = response.getStatus();\n\n        if (response.isRedirectError()) {\n            final String loc = response.getRedirectAddress();\n            if (loc != null && loc.startsWith(\"http\")) {\n                LogUtils.d(TAG, \"Posting autodiscover to redirect: \" + loc);\n                mRedirectUri = loc;\n                return RESULT_REDIRECT;\n            } else {\n                LogUtils.w(TAG, \"Invalid redirect %s\", loc);\n                return RESULT_FATAL_SERVER_ERROR;\n            }\n        }\n\n        if (code == HttpStatus.SC_UNAUTHORIZED) {\n            LogUtils.w(TAG, \"Autodiscover received SC_UNAUTHORIZED\");\n            return RESULT_SC_UNAUTHORIZED;\n        } else if (code != HttpStatus.SC_OK) {\n            // We'll try the next address if this doesn't work\n            LogUtils.d(TAG, \"Bad response code when posting autodiscover: %d\", code);\n            return RESULT_BAD_RESPONSE;\n        } else {\n            mHostAuth = parseAutodiscover(response);\n            if (mHostAuth != null) {\n                // Fill in the rest of the HostAuth\n                // We use the user name and password that were successful during\n                // the autodiscover process\n                mHostAuth.mLogin = mUsername;\n                mHostAuth.mPassword = mPassword;\n                // Note: there is no way we can auto-discover the proper client\n                // SSL certificate to use, if one is needed.\n                mHostAuth.mPort = 443;\n                mHostAuth.mProtocol = Eas.PROTOCOL;\n                mHostAuth.mFlags = HostAuth.FLAG_SSL | HostAuth.FLAG_AUTHENTICATE;\n                return RESULT_OK;\n            } else {\n                return RESULT_HARD_DATA_FAILURE;\n            }\n        }\n    }",
    "abstract_func_before": "@Override\n    protected int handleResponse(final EasResponse VAR_0) throws\n            IOException, CommandStatusException {\n        /* COMMENT_0 */\n        final int VAR_1 = VAR_0.getStatus();\n\n        if (VAR_0.isRedirectError()) {\n            final String VAR_2 = VAR_0.getRedirectAddress();\n            if (VAR_2 != null && VAR_2.startsWith(\"http\")) {\n                VAR_3.d(VAR_4, \"Posting autodiscover to redirect: \" + VAR_2);\n                VAR_5 = VAR_2;\n                return VAR_6;\n            } else {\n                VAR_3.w(VAR_4, \"Invalid redirect %s\", VAR_2);\n                return VAR_7;\n            }\n        }\n\n        if (VAR_1 == VAR_8.SC_UNAUTHORIZED) {\n            VAR_3.w(VAR_4, \"Autodiscover received SC_UNAUTHORIZED\");\n            return VAR_9;\n        } else if (VAR_1 != VAR_8.SC_OK) {\n            /* COMMENT_1 */\n            VAR_3.d(VAR_4, \"Bad response code when posting autodiscover: %d\", VAR_1);\n            return VAR_10;\n        } else {\n            VAR_11 = parseAutodiscover(VAR_0);\n            if (VAR_11 != null) {\n                /* COMMENT_2 */\n                /* COMMENT_3 */\n                /* COMMENT_4 */\n                VAR_11.mLogin = VAR_12;\n                VAR_11.mPassword = VAR_13;\n                /* COMMENT_5 */\n                /* COMMENT_6 */\n                VAR_11.mPort = 443;\n                VAR_11.mProtocol = VAR_14.PROTOCOL;\n                VAR_11.mFlags = VAR_15.FLAG_SSL | VAR_15.FLAG_AUTHENTICATE;\n                return VAR_16;\n            } else {\n                return VAR_17;\n            }\n        }\n    }",
    "func_graph_path_before": "android/0d1a38b1755efe7ed4e8d7302a24186616bba9b2/EasAutoDiscover.java/vul/before/2.json",
    "func": "@Override\n    protected int handleResponse(final EasResponse response) throws\n            IOException, CommandStatusException {\n        // resp is either an authentication error, or a good response.\n        final int code = response.getStatus();\n\n        if (response.isRedirectError()) {\n            final Uri loc = response.getRedirectUri();\n            if (loc != null && HTTPS_SCHEME.equalsIgnoreCase(loc.getScheme())) {\n                mRedirectUri = loc.toString();\n                LogUtils.d(TAG, \"Posting autodiscover to redirect: \" + mRedirectUri);\n                return RESULT_REDIRECT;\n            } else {\n                LogUtils.w(TAG, \"Invalid redirect %s\", loc);\n                return RESULT_FATAL_SERVER_ERROR;\n            }\n        }\n\n        if (code == HttpStatus.SC_UNAUTHORIZED) {\n            LogUtils.w(TAG, \"Autodiscover received SC_UNAUTHORIZED\");\n            return RESULT_SC_UNAUTHORIZED;\n        } else if (code != HttpStatus.SC_OK) {\n            // We'll try the next address if this doesn't work\n            LogUtils.d(TAG, \"Bad response code when posting autodiscover: %d\", code);\n            return RESULT_BAD_RESPONSE;\n        } else {\n            mHostAuth = parseAutodiscover(response);\n            if (mHostAuth != null) {\n                // Fill in the rest of the HostAuth\n                // We use the user name and password that were successful during\n                // the autodiscover process\n                mHostAuth.mLogin = mUsername;\n                mHostAuth.mPassword = mPassword;\n                // Note: there is no way we can auto-discover the proper client\n                // SSL certificate to use, if one is needed.\n                mHostAuth.mPort = 443;\n                mHostAuth.mProtocol = Eas.PROTOCOL;\n                mHostAuth.mFlags = HostAuth.FLAG_SSL | HostAuth.FLAG_AUTHENTICATE;\n                return RESULT_OK;\n            } else {\n                return RESULT_HARD_DATA_FAILURE;\n            }\n        }\n    }",
    "abstract_func": "@Override\n    protected int handleResponse(final EasResponse VAR_0) throws\n            IOException, CommandStatusException {\n        /* COMMENT_0 */\n        final int VAR_1 = VAR_0.getStatus();\n\n        if (VAR_0.isRedirectError()) {\n            final Uri VAR_2 = VAR_0.getRedirectUri();\n            if (VAR_2 != null && VAR_3.equalsIgnoreCase(VAR_2.getScheme())) {\n                VAR_4 = VAR_2.toString();\n                VAR_5.d(VAR_6, \"Posting autodiscover to redirect: \" + VAR_4);\n                return VAR_7;\n            } else {\n                VAR_5.w(VAR_6, \"Invalid redirect %s\", VAR_2);\n                return VAR_8;\n            }\n        }\n\n        if (VAR_1 == VAR_9.SC_UNAUTHORIZED) {\n            VAR_5.w(VAR_6, \"Autodiscover received SC_UNAUTHORIZED\");\n            return VAR_10;\n        } else if (VAR_1 != VAR_9.SC_OK) {\n            /* COMMENT_1 */\n            VAR_5.d(VAR_6, \"Bad response code when posting autodiscover: %d\", VAR_1);\n            return VAR_11;\n        } else {\n            VAR_12 = parseAutodiscover(VAR_0);\n            if (VAR_12 != null) {\n                /* COMMENT_2 */\n                /* COMMENT_3 */\n                /* COMMENT_4 */\n                VAR_12.mLogin = VAR_13;\n                VAR_12.mPassword = VAR_14;\n                /* COMMENT_5 */\n                /* COMMENT_6 */\n                VAR_12.mPort = 443;\n                VAR_12.mProtocol = VAR_15.PROTOCOL;\n                VAR_12.mFlags = VAR_16.FLAG_SSL | VAR_16.FLAG_AUTHENTICATE;\n                return VAR_17;\n            } else {\n                return VAR_18;\n            }\n        }\n    }",
    "func_graph_path": "android/0d1a38b1755efe7ed4e8d7302a24186616bba9b2/EasAutoDiscover.java/vul/after/2.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -5,10 +5,10 @@\n         final int code = response.getStatus();\n \n         if (response.isRedirectError()) {\n-            final String loc = response.getRedirectAddress();\n-            if (loc != null && loc.startsWith(\"http\")) {\n-                LogUtils.d(TAG, \"Posting autodiscover to redirect: \" + loc);\n-                mRedirectUri = loc;\n+            final Uri loc = response.getRedirectUri();\n+            if (loc != null && HTTPS_SCHEME.equalsIgnoreCase(loc.getScheme())) {\n+                mRedirectUri = loc.toString();\n+                LogUtils.d(TAG, \"Posting autodiscover to redirect: \" + mRedirectUri);\n                 return RESULT_REDIRECT;\n             } else {\n                 LogUtils.w(TAG, \"Invalid redirect %s\", loc);",
    "diff_line_info": {
        "deleted_lines": [
            "            final String loc = response.getRedirectAddress();",
            "            if (loc != null && loc.startsWith(\"http\")) {",
            "                LogUtils.d(TAG, \"Posting autodiscover to redirect: \" + loc);",
            "                mRedirectUri = loc;"
        ],
        "added_lines": [
            "            final Uri loc = response.getRedirectUri();",
            "            if (loc != null && HTTPS_SCHEME.equalsIgnoreCase(loc.getScheme())) {",
            "                mRedirectUri = loc.toString();",
            "                LogUtils.d(TAG, \"Posting autodiscover to redirect: \" + mRedirectUri);"
        ]
    },
    "is_vul": true,
    "pr_url": null,
    "description": "no more info"
}