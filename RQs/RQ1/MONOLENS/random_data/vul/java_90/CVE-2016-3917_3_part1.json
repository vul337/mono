{
    "cve_id": "CVE-2016-3917",
    "cwe_ids": [
        "CWE-264"
    ],
    "cvss_vector": "AV:L/AC:L/Au:N/C:C/I:C/A:C",
    "cvss_is_v3": false,
    "repo_name": "android",
    "commit_msg": "Bind fingerprint when we start authentication\n\nThis fixes a bug where it was possible to authenticate the wrong user.\nWe now bind the userId when we start authentication and confirm it when\nauthentication completes.\n\nFixes bug 30744668\n\n(Cherry pick from Change-Id: I346d92c301414ed81e11fa9c171584c7ae4341c2)\n\nChange-Id: I3584790c39eb2e8c435ad1b2d887bf9b8ebd36fe\n(cherry picked from commit 837d052ed4b5b75dfd4af44f5ad268e683bf2e13)\n",
    "commit_hash": "f5334952131afa835dd3f08601fb3bced7b781cd",
    "git_url": "https://android.googlesource.com/platform/frameworks/base/+/f5334952131afa835dd3f08601fb3bced7b781cd",
    "file_path": "services/core/java/com/android/server/fingerprint/FingerprintService.java",
    "func_name": "startAuthentication",
    "func_before": "private void startAuthentication(IBinder token, long opId, int callingUserId, int groupId,\n                IFingerprintServiceReceiver receiver, int flags, boolean restricted,\n                String opPackageName) {\n        updateActiveGroup(groupId, opPackageName);\n\n        if (DEBUG) Slog.v(TAG, \"startAuthentication(\" + opPackageName + \")\");\n\n        AuthenticationClient client = new AuthenticationClient(getContext(), mHalDeviceId, token,\n                receiver, callingUserId, groupId, opId, restricted, opPackageName) {\n            @Override\n            public boolean handleFailedAttempt() {\n                mFailedAttempts++;\n                if (inLockoutMode()) {\n                    // Failing multiple times will continue to push out the lockout time.\n                    scheduleLockoutReset();\n                    return true;\n                }\n                return false;\n            }\n\n            @Override\n            public void resetFailedAttempts() {\n                FingerprintService.this.resetFailedAttempts();\n            }\n\n            @Override\n            public void notifyUserActivity() {\n                FingerprintService.this.userActivity();\n            }\n\n            @Override\n            public IFingerprintDaemon getFingerprintDaemon() {\n                return FingerprintService.this.getFingerprintDaemon();\n            }\n        };\n\n        if (inLockoutMode()) {\n            Slog.v(TAG, \"In lockout mode; disallowing authentication\");\n            // Don't bother starting the client. Just send the error message.\n            if (!client.onError(FingerprintManager.FINGERPRINT_ERROR_LOCKOUT)) {\n                Slog.w(TAG, \"Cannot send timeout message to client\");\n            }\n            return;\n        }\n        startClient(client, true /* initiatedByClient */);\n    }",
    "abstract_func_before": "private void startAuthentication(IBinder VAR_0, long VAR_1, int VAR_2, int VAR_3,\n                IFingerprintServiceReceiver VAR_4, int VAR_5, boolean VAR_6,\n                String VAR_7) {\n        updateActiveGroup(VAR_3, VAR_7);\n\n        if (VAR_8) VAR_9.v(VAR_10, \"startAuthentication(\" + VAR_7 + \")\");\n\n        AuthenticationClient VAR_11 = new AuthenticationClient(getContext(), VAR_12, VAR_0,\n                VAR_4, VAR_2, VAR_3, VAR_1, VAR_6, VAR_7) {\n            @Override\n            public boolean handleFailedAttempt() {\n                VAR_13++;\n                if (inLockoutMode()) {\n                    /* COMMENT_0 */\n                    scheduleLockoutReset();\n                    return true;\n                }\n                return false;\n            }\n\n            @Override\n            public void resetFailedAttempts() {\n                VAR_14.this.resetFailedAttempts();\n            }\n\n            @Override\n            public void notifyUserActivity() {\n                VAR_14.this.userActivity();\n            }\n\n            @Override\n            public IFingerprintDaemon getFingerprintDaemon() {\n                return VAR_14.this.getFingerprintDaemon();\n            }\n        };\n\n        if (inLockoutMode()) {\n            VAR_9.v(VAR_10, \"In lockout mode; disallowing authentication\");\n            /* COMMENT_1 */\n            if (!VAR_11.onError(VAR_15.FINGERPRINT_ERROR_LOCKOUT)) {\n                VAR_9.w(VAR_10, \"Cannot send timeout message to client\");\n            }\n            return;\n        }\n        startClient(VAR_11, true /* COMMENT_2 */);\n    }",
    "func_graph_path_before": "android/f5334952131afa835dd3f08601fb3bced7b781cd/FingerprintService.java/vul/before/0.json",
    "func": "private void startAuthentication(IBinder token, long opId, int callingUserId, int groupId,\n                IFingerprintServiceReceiver receiver, int flags, boolean restricted,\n                String opPackageName) {\n        updateActiveGroup(groupId, opPackageName);\n\n        if (DEBUG) Slog.v(TAG, \"startAuthentication(\" + opPackageName + \")\");\n\n        AuthenticationClient client = new AuthenticationClient(getContext(), mHalDeviceId, token,\n                receiver, mCurrentUserId, groupId, opId, restricted, opPackageName) {\n            @Override\n            public boolean handleFailedAttempt() {\n                mFailedAttempts++;\n                if (inLockoutMode()) {\n                    // Failing multiple times will continue to push out the lockout time.\n                    scheduleLockoutReset();\n                    return true;\n                }\n                return false;\n            }\n\n            @Override\n            public void resetFailedAttempts() {\n                FingerprintService.this.resetFailedAttempts();\n            }\n\n            @Override\n            public void notifyUserActivity() {\n                FingerprintService.this.userActivity();\n            }\n\n            @Override\n            public IFingerprintDaemon getFingerprintDaemon() {\n                return FingerprintService.this.getFingerprintDaemon();\n            }\n        };\n\n        if (inLockoutMode()) {\n            Slog.v(TAG, \"In lockout mode; disallowing authentication\");\n            // Don't bother starting the client. Just send the error message.\n            if (!client.onError(FingerprintManager.FINGERPRINT_ERROR_LOCKOUT)) {\n                Slog.w(TAG, \"Cannot send timeout message to client\");\n            }\n            return;\n        }\n        startClient(client, true /* initiatedByClient */);\n    }",
    "abstract_func": "private void startAuthentication(IBinder VAR_0, long VAR_1, int VAR_2, int VAR_3,\n                IFingerprintServiceReceiver VAR_4, int VAR_5, boolean VAR_6,\n                String VAR_7) {\n        updateActiveGroup(VAR_3, VAR_7);\n\n        if (VAR_8) VAR_9.v(VAR_10, \"startAuthentication(\" + VAR_7 + \")\");\n\n        AuthenticationClient VAR_11 = new AuthenticationClient(getContext(), VAR_12, VAR_0,\n                VAR_4, VAR_13, VAR_3, VAR_1, VAR_6, VAR_7) {\n            @Override\n            public boolean handleFailedAttempt() {\n                VAR_14++;\n                if (inLockoutMode()) {\n                    /* COMMENT_0 */\n                    scheduleLockoutReset();\n                    return true;\n                }\n                return false;\n            }\n\n            @Override\n            public void resetFailedAttempts() {\n                VAR_15.this.resetFailedAttempts();\n            }\n\n            @Override\n            public void notifyUserActivity() {\n                VAR_15.this.userActivity();\n            }\n\n            @Override\n            public IFingerprintDaemon getFingerprintDaemon() {\n                return VAR_15.this.getFingerprintDaemon();\n            }\n        };\n\n        if (inLockoutMode()) {\n            VAR_9.v(VAR_10, \"In lockout mode; disallowing authentication\");\n            /* COMMENT_1 */\n            if (!VAR_11.onError(VAR_16.FINGERPRINT_ERROR_LOCKOUT)) {\n                VAR_9.w(VAR_10, \"Cannot send timeout message to client\");\n            }\n            return;\n        }\n        startClient(VAR_11, true /* COMMENT_2 */);\n    }",
    "func_graph_path": "android/f5334952131afa835dd3f08601fb3bced7b781cd/FingerprintService.java/vul/after/0.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -6,7 +6,7 @@\n         if (DEBUG) Slog.v(TAG, \"startAuthentication(\" + opPackageName + \")\");\n \n         AuthenticationClient client = new AuthenticationClient(getContext(), mHalDeviceId, token,\n-                receiver, callingUserId, groupId, opId, restricted, opPackageName) {\n+                receiver, mCurrentUserId, groupId, opId, restricted, opPackageName) {\n             @Override\n             public boolean handleFailedAttempt() {\n                 mFailedAttempts++;",
    "diff_line_info": {
        "deleted_lines": [
            "                receiver, callingUserId, groupId, opId, restricted, opPackageName) {"
        ],
        "added_lines": [
            "                receiver, mCurrentUserId, groupId, opId, restricted, opPackageName) {"
        ]
    },
    "is_vul": true,
    "pr_url": null,
    "description": "no more info"
}