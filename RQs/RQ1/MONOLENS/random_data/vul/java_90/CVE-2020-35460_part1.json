{
    "cve_id": "CVE-2020-35460",
    "cwe_ids": [
        "CWE-22"
    ],
    "cvss_vector": "AV:N/AC:L/Au:N/C:N/I:P/A:N",
    "cvss_is_v3": false,
    "repo_name": "joniles/mpxj",
    "commit_msg": "zip slip fix",
    "commit_hash": "8eaf4225048ea5ba7e59ef4556dab2098fcc4a1d",
    "git_url": "https://github.com/joniles/mpxj/commit/8eaf4225048ea5ba7e59ef4556dab2098fcc4a1d",
    "file_path": "src/main/java/net/sf/mpxj/common/InputStreamHelper.java",
    "func_name": "processZipStream",
    "func_before": "private static void processZipStream(File dir, InputStream inputStream) throws IOException\n   {\n      ZipInputStream zip = new ZipInputStream(inputStream);\n      while (true)\n      {\n         ZipEntry entry = zip.getNextEntry();\n         if (entry == null)\n         {\n            break;\n         }\n\n         File file = new File(dir, entry.getName());\n         if (entry.isDirectory())\n         {\n            FileHelper.mkdirsQuietly(file);\n            continue;\n         }\n\n         File parent = file.getParentFile();\n         if (parent != null)\n         {\n            FileHelper.mkdirsQuietly(parent);\n         }\n\n         FileOutputStream fos = new FileOutputStream(file);\n         byte[] bytes = new byte[1024];\n         int length;\n         while ((length = zip.read(bytes)) >= 0)\n         {\n            fos.write(bytes, 0, length);\n         }\n         fos.close();\n      }\n   }",
    "abstract_func_before": "private static void processZipStream(File VAR_0, InputStream VAR_1) throws IOException\n   {\n      ZipInputStream VAR_2 = new ZipInputStream(VAR_1);\n      while (true)\n      {\n         ZipEntry VAR_3 = VAR_2.getNextEntry();\n         if (VAR_3 == null)\n         {\n            break;\n         }\n\n         File VAR_4 = new File(VAR_0, VAR_3.getName());\n         if (VAR_3.isDirectory())\n         {\n            VAR_5.mkdirsQuietly(VAR_4);\n            continue;\n         }\n\n         File VAR_6 = VAR_4.getParentFile();\n         if (VAR_6 != null)\n         {\n            VAR_5.mkdirsQuietly(VAR_6);\n         }\n\n         FileOutputStream VAR_7 = new FileOutputStream(VAR_4);\n         byte[] VAR_8 = new byte[1024];\n         int VAR_9;\n         while ((VAR_9 = VAR_2.read(VAR_8)) >= 0)\n         {\n            VAR_7.write(VAR_8, 0, VAR_9);\n         }\n         VAR_7.close();\n      }\n   }",
    "func_graph_path_before": "joniles/mpxj/8eaf4225048ea5ba7e59ef4556dab2098fcc4a1d/InputStreamHelper.java/vul/before/0.json",
    "func": "private static void processZipStream(File dir, InputStream inputStream) throws IOException\n   {\n      String canonicalDestinationDirPath = dir.getCanonicalPath();\n      ZipInputStream zip = new ZipInputStream(inputStream);\n      while (true)\n      {\n         ZipEntry entry = zip.getNextEntry();\n         if (entry == null)\n         {\n            break;\n         }\n\n         File file = new File(dir, entry.getName());\n\n         // https://snyk.io/research/zip-slip-vulnerability\n         String canonicalDestinationFile = file.getCanonicalPath();\n         if (!canonicalDestinationFile.startsWith(canonicalDestinationDirPath + File.separator))\n         {\n            throw new IOException(\"Entry is outside of the target dir: \" + entry.getName());\n         }\n\n         if (entry.isDirectory())\n         {\n            FileHelper.mkdirsQuietly(file);\n            continue;\n         }\n\n         File parent = file.getParentFile();\n         if (parent != null)\n         {\n            FileHelper.mkdirsQuietly(parent);\n         }\n\n         FileOutputStream fos = new FileOutputStream(file);\n         byte[] bytes = new byte[1024];\n         int length;\n         while ((length = zip.read(bytes)) >= 0)\n         {\n            fos.write(bytes, 0, length);\n         }\n         fos.close();\n      }\n   }",
    "abstract_func": "private static void processZipStream(File VAR_0, InputStream VAR_1) throws IOException\n   {\n      String VAR_2 = VAR_0.getCanonicalPath();\n      ZipInputStream VAR_3 = new ZipInputStream(VAR_1);\n      while (true)\n      {\n         ZipEntry VAR_4 = VAR_3.getNextEntry();\n         if (VAR_4 == null)\n         {\n            break;\n         }\n\n         File VAR_5 = new File(VAR_0, VAR_4.getName());\n\n         /* COMMENT_0 */\n         String VAR_6 = VAR_5.getCanonicalPath();\n         if (!VAR_6.startsWith(VAR_2 + VAR_7.separator))\n         {\n            throw new IOException(\"Entry is outside of the target dir: \" + VAR_4.getName());\n         }\n\n         if (VAR_4.isDirectory())\n         {\n            VAR_8.mkdirsQuietly(VAR_5);\n            continue;\n         }\n\n         File VAR_9 = VAR_5.getParentFile();\n         if (VAR_9 != null)\n         {\n            VAR_8.mkdirsQuietly(VAR_9);\n         }\n\n         FileOutputStream VAR_10 = new FileOutputStream(VAR_5);\n         byte[] VAR_11 = new byte[1024];\n         int VAR_12;\n         while ((VAR_12 = VAR_3.read(VAR_11)) >= 0)\n         {\n            VAR_10.write(VAR_11, 0, VAR_12);\n         }\n         VAR_10.close();\n      }\n   }",
    "func_graph_path": "joniles/mpxj/8eaf4225048ea5ba7e59ef4556dab2098fcc4a1d/InputStreamHelper.java/vul/after/0.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -1,5 +1,6 @@\n private static void processZipStream(File dir, InputStream inputStream) throws IOException\n    {\n+      String canonicalDestinationDirPath = dir.getCanonicalPath();\n       ZipInputStream zip = new ZipInputStream(inputStream);\n       while (true)\n       {\n@@ -10,6 +11,14 @@\n          }\n \n          File file = new File(dir, entry.getName());\n+\n+         // https://snyk.io/research/zip-slip-vulnerability\n+         String canonicalDestinationFile = file.getCanonicalPath();\n+         if (!canonicalDestinationFile.startsWith(canonicalDestinationDirPath + File.separator))\n+         {\n+            throw new IOException(\"Entry is outside of the target dir: \" + entry.getName());\n+         }\n+\n          if (entry.isDirectory())\n          {\n             FileHelper.mkdirsQuietly(file);",
    "diff_line_info": {
        "deleted_lines": [],
        "added_lines": [
            "      String canonicalDestinationDirPath = dir.getCanonicalPath();",
            "",
            "         // https://snyk.io/research/zip-slip-vulnerability",
            "         String canonicalDestinationFile = file.getCanonicalPath();",
            "         if (!canonicalDestinationFile.startsWith(canonicalDestinationDirPath + File.separator))",
            "         {",
            "            throw new IOException(\"Entry is outside of the target dir: \" + entry.getName());",
            "         }",
            ""
        ]
    },
    "is_vul": true,
    "pr_url": null,
    "description": "no more info"
}