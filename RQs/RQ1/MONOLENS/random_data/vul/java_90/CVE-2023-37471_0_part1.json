{
    "cve_id": "CVE-2023-37471",
    "cwe_ids": [
        "CWE-287"
    ],
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
    "cvss_is_v3": true,
    "repo_name": "OpenIdentityPlatform/OpenAM",
    "commit_msg": "GHSL-2023-143, GHSL-2023-144, deny unsigned SAML response (#624)",
    "commit_hash": "7c18543d126e8a567b83bb4535631825aaa9d742",
    "git_url": "https://github.com/OpenIdentityPlatform/OpenAM/commit/7c18543d126e8a567b83bb4535631825aaa9d742",
    "file_path": "openam-federation/openam-federation-library/src/main/java/com/sun/identity/saml/common/SAMLUtils.java",
    "func_name": "processResponse",
    "func_before": "public static Map processResponse(Response samlResponse, String target) \n        throws SAMLException {\n        List assertions = null;    \n        SAMLServiceManager.SOAPEntry partnerdest = null;\n        Subject assertionSubject = null;\n        if (samlResponse.isSigned()) {\n            // verify the signature\n            boolean isSignedandValid = verifySignature(samlResponse);\n            if (!isSignedandValid) {\n                throw new SAMLException(bundle.getString(\"invalidResponse\"));\n            }\n        }\n        // check Assertion and get back a Map of relevant data including,\n        // Subject, SOAPEntry for the partner and the List of Assertions.\n        Map ssMap = verifyAssertionAndGetSSMap(samlResponse);\n        if (debug.messageEnabled()) {\n            debug.message(\"processResponse: ssMap = \" + ssMap);\n        }\n        \n        if (ssMap == null) {\n            throw new SAMLException(bundle.getString(\"invalidAssertion\"));\n        }\n        assertionSubject = (com.sun.identity.saml.assertion.Subject)\n            ssMap.get(SAMLConstants.SUBJECT);\n        if (assertionSubject == null) {\n            throw new SAMLException(bundle.getString(\"nullSubject\"));\n        }\n        \n        partnerdest = (SAMLServiceManager.SOAPEntry)ssMap\n            .get(SAMLConstants.SOURCE_SITE_SOAP_ENTRY);\n        if (partnerdest == null) {\n            throw new SAMLException(bundle.getString(\"failedAccountMapping\"));\n        }\n        \n        assertions = (List)ssMap.get(SAMLConstants.POST_ASSERTION);\n        Map sessMap = null;\n        try { \n            sessMap = getAttributeMap(partnerdest, assertions,\n                assertionSubject, target); \n        } catch (Exception se) {\n            debug.error(\"SAMLUtils.processResponse :\" , se);\n            throw new SAMLException(\n                bundle.getString(\"failProcessResponse\"));\n        }\n        return sessMap;\n    }",
    "abstract_func_before": "public static Map processResponse(Response VAR_0, String VAR_1) \n        throws SAMLException {\n        List VAR_2 = null;    \n        SAMLServiceManager.SOAPEntry VAR_3 = null;\n        Subject VAR_4 = null;\n        if (VAR_0.isSigned()) {\n            /* COMMENT_0 */\n            boolean VAR_5 = verifySignature(VAR_0);\n            if (!VAR_5) {\n                throw new SAMLException(VAR_6.getString(\"invalidResponse\"));\n            }\n        }\n        /* COMMENT_1 */\n        /* COMMENT_2 */\n        Map VAR_7 = verifyAssertionAndGetSSMap(VAR_0);\n        if (VAR_8.messageEnabled()) {\n            VAR_8.message(\"processResponse: ssMap = \" + VAR_7);\n        }\n        \n        if (VAR_7 == null) {\n            throw new SAMLException(VAR_6.getString(\"invalidAssertion\"));\n        }\n        VAR_4 = (com.sun.identity.saml.assertion.Subject)\n            VAR_7.get(VAR_9.SUBJECT);\n        if (VAR_4 == null) {\n            throw new SAMLException(VAR_6.getString(\"nullSubject\"));\n        }\n        \n        VAR_3 = (SAMLServiceManager.SOAPEntry)VAR_7\n            .get(VAR_9.SOURCE_SITE_SOAP_ENTRY);\n        if (VAR_3 == null) {\n            throw new SAMLException(VAR_6.getString(\"failedAccountMapping\"));\n        }\n        \n        VAR_2 = (List)VAR_7.get(VAR_9.POST_ASSERTION);\n        Map VAR_10 = null;\n        try { \n            VAR_10 = getAttributeMap(VAR_3, VAR_2,\n                VAR_4, VAR_1); \n        } catch (Exception VAR_11) {\n            VAR_8.error(\"SAMLUtils.processResponse :\" , VAR_11);\n            throw new SAMLException(\n                VAR_6.getString(\"failProcessResponse\"));\n        }\n        return VAR_10;\n    }",
    "func_graph_path_before": "OpenIdentityPlatform/OpenAM/7c18543d126e8a567b83bb4535631825aaa9d742/SAMLUtils.java/vul/before/1.json",
    "func": "public static Map processResponse(Response samlResponse, String target) \n        throws SAMLException {\n        List assertions = null;    \n        SAMLServiceManager.SOAPEntry partnerdest = null;\n        Subject assertionSubject = null;\n\n        // verify the signature\n        boolean isSignedandValid = verifySignature(samlResponse);\n        if (!isSignedandValid) {\n            throw new SAMLException(bundle.getString(\"invalidResponse\"));\n        }\n\n        // check Assertion and get back a Map of relevant data including,\n        // Subject, SOAPEntry for the partner and the List of Assertions.\n        Map ssMap = verifyAssertionAndGetSSMap(samlResponse);\n        if (debug.messageEnabled()) {\n            debug.message(\"processResponse: ssMap = \" + ssMap);\n        }\n        \n        if (ssMap == null) {\n            throw new SAMLException(bundle.getString(\"invalidAssertion\"));\n        }\n        assertionSubject = (com.sun.identity.saml.assertion.Subject)\n            ssMap.get(SAMLConstants.SUBJECT);\n        if (assertionSubject == null) {\n            throw new SAMLException(bundle.getString(\"nullSubject\"));\n        }\n        \n        partnerdest = (SAMLServiceManager.SOAPEntry)ssMap\n            .get(SAMLConstants.SOURCE_SITE_SOAP_ENTRY);\n        if (partnerdest == null) {\n            throw new SAMLException(bundle.getString(\"failedAccountMapping\"));\n        }\n        \n        assertions = (List)ssMap.get(SAMLConstants.POST_ASSERTION);\n        Map sessMap = null;\n        try { \n            sessMap = getAttributeMap(partnerdest, assertions,\n                assertionSubject, target); \n        } catch (Exception se) {\n            debug.error(\"SAMLUtils.processResponse :\" , se);\n            throw new SAMLException(\n                bundle.getString(\"failProcessResponse\"));\n        }\n        return sessMap;\n    }",
    "abstract_func": "public static Map processResponse(Response VAR_0, String VAR_1) \n        throws SAMLException {\n        List VAR_2 = null;    \n        SAMLServiceManager.SOAPEntry VAR_3 = null;\n        Subject VAR_4 = null;\n\n        /* COMMENT_0 */\n        boolean VAR_5 = verifySignature(VAR_0);\n        if (!VAR_5) {\n            throw new SAMLException(VAR_6.getString(\"invalidResponse\"));\n        }\n\n        /* COMMENT_1 */\n        /* COMMENT_2 */\n        Map VAR_7 = verifyAssertionAndGetSSMap(VAR_0);\n        if (VAR_8.messageEnabled()) {\n            VAR_8.message(\"processResponse: ssMap = \" + VAR_7);\n        }\n        \n        if (VAR_7 == null) {\n            throw new SAMLException(VAR_6.getString(\"invalidAssertion\"));\n        }\n        VAR_4 = (com.sun.identity.saml.assertion.Subject)\n            VAR_7.get(VAR_9.SUBJECT);\n        if (VAR_4 == null) {\n            throw new SAMLException(VAR_6.getString(\"nullSubject\"));\n        }\n        \n        VAR_3 = (SAMLServiceManager.SOAPEntry)VAR_7\n            .get(VAR_9.SOURCE_SITE_SOAP_ENTRY);\n        if (VAR_3 == null) {\n            throw new SAMLException(VAR_6.getString(\"failedAccountMapping\"));\n        }\n        \n        VAR_2 = (List)VAR_7.get(VAR_9.POST_ASSERTION);\n        Map VAR_10 = null;\n        try { \n            VAR_10 = getAttributeMap(VAR_3, VAR_2,\n                VAR_4, VAR_1); \n        } catch (Exception VAR_11) {\n            VAR_8.error(\"SAMLUtils.processResponse :\" , VAR_11);\n            throw new SAMLException(\n                VAR_6.getString(\"failProcessResponse\"));\n        }\n        return VAR_10;\n    }",
    "func_graph_path": "OpenIdentityPlatform/OpenAM/7c18543d126e8a567b83bb4535631825aaa9d742/SAMLUtils.java/vul/after/1.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -3,13 +3,13 @@\n         List assertions = null;    \n         SAMLServiceManager.SOAPEntry partnerdest = null;\n         Subject assertionSubject = null;\n-        if (samlResponse.isSigned()) {\n-            // verify the signature\n-            boolean isSignedandValid = verifySignature(samlResponse);\n-            if (!isSignedandValid) {\n-                throw new SAMLException(bundle.getString(\"invalidResponse\"));\n-            }\n+\n+        // verify the signature\n+        boolean isSignedandValid = verifySignature(samlResponse);\n+        if (!isSignedandValid) {\n+            throw new SAMLException(bundle.getString(\"invalidResponse\"));\n         }\n+\n         // check Assertion and get back a Map of relevant data including,\n         // Subject, SOAPEntry for the partner and the List of Assertions.\n         Map ssMap = verifyAssertionAndGetSSMap(samlResponse);",
    "diff_line_info": {
        "deleted_lines": [
            "        if (samlResponse.isSigned()) {",
            "            // verify the signature",
            "            boolean isSignedandValid = verifySignature(samlResponse);",
            "            if (!isSignedandValid) {",
            "                throw new SAMLException(bundle.getString(\"invalidResponse\"));",
            "            }"
        ],
        "added_lines": [
            "",
            "        // verify the signature",
            "        boolean isSignedandValid = verifySignature(samlResponse);",
            "        if (!isSignedandValid) {",
            "            throw new SAMLException(bundle.getString(\"invalidResponse\"));",
            ""
        ]
    },
    "is_vul": true,
    "pr_url": "https://github.com/OpenIdentityPlatform/OpenAM/pull/624",
    "description": "no more info"
}