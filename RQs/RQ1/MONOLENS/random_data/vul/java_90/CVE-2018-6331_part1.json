{
    "cve_id": "CVE-2018-6331",
    "cwe_ids": [
        "CWE-502"
    ],
    "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:P/A:P",
    "cvss_is_v3": false,
    "repo_name": "facebook/buck",
    "commit_msg": "Prevent deserialization of random objects\n\nSummary:\nFixed security issue with buck parser-cache command.\nThis diff prevent deserialization of random objects.\n\nReviewed By: jtorkkola\n\nfbshipit-source-id: 24e8221",
    "commit_hash": "8c5500981812564877bd122c0f8fab48d3528ddf",
    "git_url": "https://github.com/facebook/buck/commit/8c5500981812564877bd122c0f8fab48d3528ddf",
    "file_path": "src/com/facebook/buck/cli/ParserCacheCommand.java",
    "func_name": "runWithoutHelp",
    "func_before": "@Override\n  public ExitCode runWithoutHelp(CommandRunnerParams params)\n      throws IOException, InterruptedException {\n\n    if (saveFilename != null && loadFilename != null) {\n      params.getConsole().printErrorText(\"Can't use both --load and --save\");\n      return ExitCode.COMMANDLINE_ERROR;\n    }\n\n    if (saveFilename != null) {\n      invalidateChanges(params);\n      RemoteDaemonicParserState state = params.getParser().storeParserState(params.getCell());\n      try (FileOutputStream fos = new FileOutputStream(saveFilename);\n          ZipOutputStream zipos = new ZipOutputStream(fos)) {\n        zipos.putNextEntry(new ZipEntry(\"parser_data\"));\n        try (ObjectOutputStream oos = new ObjectOutputStream(zipos)) {\n          oos.writeObject(state);\n        }\n      }\n    } else if (loadFilename != null) {\n      try (FileInputStream fis = new FileInputStream(loadFilename);\n          ZipInputStream zipis = new ZipInputStream(fis)) {\n        ZipEntry entry = zipis.getNextEntry();\n        Preconditions.checkState(entry.getName().equals(\"parser_data\"));\n        try (ObjectInputStream ois = new ObjectInputStream(zipis)) {\n          RemoteDaemonicParserState state;\n          try {\n            state = (RemoteDaemonicParserState) ois.readObject();\n          } catch (ClassNotFoundException e) {\n            params.getConsole().printErrorText(\"Invalid file format\");\n            return ExitCode.COMMANDLINE_ERROR;\n          }\n          params.getParser().restoreParserState(state, params.getCell());\n        }\n      }\n      invalidateChanges(params);\n\n      ParserConfig configView = params.getBuckConfig().getView(ParserConfig.class);\n      if (configView.isParserCacheMutationWarningEnabled()) {\n        params\n            .getConsole()\n            .printErrorText(\n                params\n                    .getConsole()\n                    .getAnsi()\n                    .asWarningText(\n                        \"WARNING: Buck injected a parser state that may not match the local state.\"));\n      }\n    }\n\n    return ExitCode.SUCCESS;\n  }",
    "abstract_func_before": "@Override\n  public ExitCode runWithoutHelp(CommandRunnerParams VAR_0)\n      throws IOException, InterruptedException {\n\n    if (VAR_1 != null && VAR_2 != null) {\n      VAR_0.getConsole().printErrorText(\"Can't use both --load and --save\");\n      return VAR_3.COMMANDLINE_ERROR;\n    }\n\n    if (VAR_1 != null) {\n      invalidateChanges(VAR_0);\n      RemoteDaemonicParserState VAR_4 = VAR_0.getParser().storeParserState(VAR_0.getCell());\n      try (FileOutputStream VAR_5 = new FileOutputStream(VAR_1);\n          ZipOutputStream VAR_6 = new ZipOutputStream(VAR_5)) {\n        VAR_6.putNextEntry(new ZipEntry(\"parser_data\"));\n        try (ObjectOutputStream VAR_7 = new ObjectOutputStream(VAR_6)) {\n          VAR_7.writeObject(VAR_4);\n        }\n      }\n    } else if (VAR_2 != null) {\n      try (FileInputStream VAR_8 = new FileInputStream(VAR_2);\n          ZipInputStream VAR_9 = new ZipInputStream(VAR_8)) {\n        ZipEntry VAR_10 = VAR_9.getNextEntry();\n        VAR_11.checkState(VAR_10.getName().equals(\"parser_data\"));\n        try (ObjectInputStream VAR_12 = new ObjectInputStream(VAR_9)) {\n          RemoteDaemonicParserState VAR_4;\n          try {\n            VAR_4 = (RemoteDaemonicParserState) VAR_12.readObject();\n          } catch (ClassNotFoundException VAR_13) {\n            VAR_0.getConsole().printErrorText(\"Invalid file format\");\n            return VAR_3.COMMANDLINE_ERROR;\n          }\n          VAR_0.getParser().restoreParserState(VAR_4, VAR_0.getCell());\n        }\n      }\n      invalidateChanges(VAR_0);\n\n      ParserConfig VAR_14 = VAR_0.getBuckConfig().getView(ParserConfig.class);\n      if (VAR_14.isParserCacheMutationWarningEnabled()) {\n        VAR_0\n            .getConsole()\n            .printErrorText(\n                VAR_0\n                    .getConsole()\n                    .getAnsi()\n                    .asWarningText(\n                        \"WARNING: Buck injected a parser state that may not match the local state.\"));\n      }\n    }\n\n    return VAR_3.SUCCESS;\n  }",
    "func_graph_path_before": "facebook/buck/8c5500981812564877bd122c0f8fab48d3528ddf/ParserCacheCommand.java/vul/before/0.json",
    "func": "@Override\n  public ExitCode runWithoutHelp(CommandRunnerParams params)\n      throws IOException, InterruptedException {\n\n    if (saveFilename != null && loadFilename != null) {\n      params.getConsole().printErrorText(\"Can't use both --load and --save\");\n      return ExitCode.COMMANDLINE_ERROR;\n    }\n\n    if (saveFilename != null) {\n      invalidateChanges(params);\n      RemoteDaemonicParserState state = params.getParser().storeParserState(params.getCell());\n      try (FileOutputStream fos = new FileOutputStream(saveFilename);\n          ZipOutputStream zipos = new ZipOutputStream(fos)) {\n        zipos.putNextEntry(new ZipEntry(\"parser_data\"));\n        try (ObjectOutputStream oos = new ObjectOutputStream(zipos)) {\n          oos.writeObject(state);\n        }\n      }\n    } else if (loadFilename != null) {\n      try (FileInputStream fis = new FileInputStream(loadFilename);\n          ZipInputStream zipis = new ZipInputStream(fis)) {\n        ZipEntry entry = zipis.getNextEntry();\n        Preconditions.checkState(entry.getName().equals(\"parser_data\"));\n        try (ObjectInputStream ois = new ParserStateObjectInputStream(zipis)) {\n          RemoteDaemonicParserState state;\n          try {\n            state = (RemoteDaemonicParserState) ois.readObject();\n          } catch (ClassNotFoundException e) {\n            params.getConsole().printErrorText(\"Invalid file format\");\n            return ExitCode.COMMANDLINE_ERROR;\n          }\n          params.getParser().restoreParserState(state, params.getCell());\n        }\n      }\n      invalidateChanges(params);\n\n      ParserConfig configView = params.getBuckConfig().getView(ParserConfig.class);\n      if (configView.isParserCacheMutationWarningEnabled()) {\n        params\n            .getConsole()\n            .printErrorText(\n                params\n                    .getConsole()\n                    .getAnsi()\n                    .asWarningText(\n                        \"WARNING: Buck injected a parser state that may not match the local state.\"));\n      }\n    }\n\n    return ExitCode.SUCCESS;\n  }",
    "abstract_func": "@Override\n  public ExitCode runWithoutHelp(CommandRunnerParams VAR_0)\n      throws IOException, InterruptedException {\n\n    if (VAR_1 != null && VAR_2 != null) {\n      VAR_0.getConsole().printErrorText(\"Can't use both --load and --save\");\n      return VAR_3.COMMANDLINE_ERROR;\n    }\n\n    if (VAR_1 != null) {\n      invalidateChanges(VAR_0);\n      RemoteDaemonicParserState VAR_4 = VAR_0.getParser().storeParserState(VAR_0.getCell());\n      try (FileOutputStream VAR_5 = new FileOutputStream(VAR_1);\n          ZipOutputStream VAR_6 = new ZipOutputStream(VAR_5)) {\n        VAR_6.putNextEntry(new ZipEntry(\"parser_data\"));\n        try (ObjectOutputStream VAR_7 = new ObjectOutputStream(VAR_6)) {\n          VAR_7.writeObject(VAR_4);\n        }\n      }\n    } else if (VAR_2 != null) {\n      try (FileInputStream VAR_8 = new FileInputStream(VAR_2);\n          ZipInputStream VAR_9 = new ZipInputStream(VAR_8)) {\n        ZipEntry VAR_10 = VAR_9.getNextEntry();\n        VAR_11.checkState(VAR_10.getName().equals(\"parser_data\"));\n        try (ObjectInputStream VAR_12 = new ParserStateObjectInputStream(VAR_9)) {\n          RemoteDaemonicParserState VAR_4;\n          try {\n            VAR_4 = (RemoteDaemonicParserState) VAR_12.readObject();\n          } catch (ClassNotFoundException VAR_13) {\n            VAR_0.getConsole().printErrorText(\"Invalid file format\");\n            return VAR_3.COMMANDLINE_ERROR;\n          }\n          VAR_0.getParser().restoreParserState(VAR_4, VAR_0.getCell());\n        }\n      }\n      invalidateChanges(VAR_0);\n\n      ParserConfig VAR_14 = VAR_0.getBuckConfig().getView(ParserConfig.class);\n      if (VAR_14.isParserCacheMutationWarningEnabled()) {\n        VAR_0\n            .getConsole()\n            .printErrorText(\n                VAR_0\n                    .getConsole()\n                    .getAnsi()\n                    .asWarningText(\n                        \"WARNING: Buck injected a parser state that may not match the local state.\"));\n      }\n    }\n\n    return VAR_3.SUCCESS;\n  }",
    "func_graph_path": "facebook/buck/8c5500981812564877bd122c0f8fab48d3528ddf/ParserCacheCommand.java/vul/after/0.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -22,7 +22,7 @@\n           ZipInputStream zipis = new ZipInputStream(fis)) {\n         ZipEntry entry = zipis.getNextEntry();\n         Preconditions.checkState(entry.getName().equals(\"parser_data\"));\n-        try (ObjectInputStream ois = new ObjectInputStream(zipis)) {\n+        try (ObjectInputStream ois = new ParserStateObjectInputStream(zipis)) {\n           RemoteDaemonicParserState state;\n           try {\n             state = (RemoteDaemonicParserState) ois.readObject();",
    "diff_line_info": {
        "deleted_lines": [
            "        try (ObjectInputStream ois = new ObjectInputStream(zipis)) {"
        ],
        "added_lines": [
            "        try (ObjectInputStream ois = new ParserStateObjectInputStream(zipis)) {"
        ]
    },
    "is_vul": true,
    "pr_url": null,
    "description": "no more info"
}