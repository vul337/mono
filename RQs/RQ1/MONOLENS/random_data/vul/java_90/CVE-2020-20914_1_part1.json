{
    "cve_id": "CVE-2020-20914",
    "cwe_ids": [
        "CWE-89"
    ],
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
    "cvss_is_v3": true,
    "repo_name": "sanluan/PublicCMS",
    "commit_msg": "https://github.com/sanluan/PublicCMS/issues/29",
    "commit_hash": "bf24c5dd9177cb2da30d0f0a62cf8e130003c2ae",
    "git_url": "https://github.com/sanluan/PublicCMS/commit/bf24c5dd9177cb2da30d0f0a62cf8e130003c2ae",
    "file_path": "publiccms-parent/publiccms-core/src/main/java/com/publiccms/controller/admin/sys/SysSiteAdminController.java",
    "func_name": "execSql",
    "func_before": "@RequestMapping(\"execSql\")\n    @Csrf\n    public String execSql(@RequestAttribute SysSite site, @SessionAttribute SysUser admin, String sql, HttpServletRequest request,\n            ModelMap model) {\n        if (ControllerUtils.verifyCustom(\"noright\", !siteComponent.isMaster(site.getId()), model)) {\n            return CommonConstants.TEMPLATE_ERROR;\n        }\n        if (sql.contains(CommonConstants.BLANK_SPACE)) {\n            String type = sql.substring(0, sql.indexOf(CommonConstants.BLANK_SPACE));\n            try {\n                if (\"update\".equalsIgnoreCase(type)) {\n                    model.addAttribute(\"result\", sqlService.update(sql));\n                } else if (\"insert\".equalsIgnoreCase(type)) {\n                    model.addAttribute(\"result\", sqlService.insert(sql));\n                } else if (\"delete\".equalsIgnoreCase(type)) {\n                    model.addAttribute(\"result\", sqlService.delete(sql));\n                } else {\n                    model.addAttribute(\"result\", JsonUtils.getString(sqlService.select(sql)));\n                }\n            } catch (Exception e) {\n                model.addAttribute(\"error\", e.getMessage());\n            }\n            model.addAttribute(\"sql\", sql);\n            logOperateService.save(new LogOperate(site.getId(), admin.getId(), LogLoginService.CHANNEL_WEB_MANAGER,\n                    \"execsql.site\", RequestUtils.getIpAddress(request), CommonUtils.getDate(), JsonUtils.getString(model)));\n        }\n        return CommonConstants.TEMPLATE_DONE;\n    }",
    "abstract_func_before": "@RequestMapping(\"execSql\")\n    @Csrf\n    public String execSql(@RequestAttribute SysSite VAR_0, @SessionAttribute SysUser VAR_1, String VAR_2, HttpServletRequest VAR_3,\n            ModelMap VAR_4) {\n        if (VAR_5.verifyCustom(\"noright\", !VAR_6.isMaster(VAR_0.getId()), VAR_4)) {\n            return VAR_7.TEMPLATE_ERROR;\n        }\n        if (VAR_2.contains(VAR_7.BLANK_SPACE)) {\n            String VAR_8 = VAR_2.substring(0, VAR_2.indexOf(VAR_7.BLANK_SPACE));\n            try {\n                if (\"update\".equalsIgnoreCase(VAR_8)) {\n                    VAR_4.addAttribute(\"result\", VAR_9.update(VAR_2));\n                } else if (\"insert\".equalsIgnoreCase(VAR_8)) {\n                    VAR_4.addAttribute(\"result\", VAR_9.insert(VAR_2));\n                } else if (\"delete\".equalsIgnoreCase(VAR_8)) {\n                    VAR_4.addAttribute(\"result\", VAR_9.delete(VAR_2));\n                } else {\n                    VAR_4.addAttribute(\"result\", VAR_10.getString(VAR_9.select(VAR_2)));\n                }\n            } catch (Exception VAR_11) {\n                VAR_4.addAttribute(\"error\", VAR_11.getMessage());\n            }\n            VAR_4.addAttribute(\"sql\", VAR_2);\n            VAR_12.save(new LogOperate(VAR_0.getId(), VAR_1.getId(), VAR_13.CHANNEL_WEB_MANAGER,\n                    \"execsql.site\", VAR_14.getIpAddress(VAR_3), VAR_15.getDate(), VAR_10.getString(VAR_4)));\n        }\n        return VAR_7.TEMPLATE_DONE;\n    }",
    "func_graph_path_before": "sanluan/PublicCMS/bf24c5dd9177cb2da30d0f0a62cf8e130003c2ae/SysSiteAdminController.java/vul/before/0.json",
    "func": "@RequestMapping(\"execSql\")\n    @Csrf\n    public String execSql(@RequestAttribute SysSite site, @SessionAttribute SysUser admin, String sqlcommand,\n            String[] sqlparameters, HttpServletRequest request, ModelMap model) {\n        if (ControllerUtils.verifyCustom(\"noright\", !siteComponent.isMaster(site.getId()), model)) {\n            return CommonConstants.TEMPLATE_ERROR;\n        }\n        if (\"update_url\".contains(sqlcommand)) {\n            if (null != sqlparameters && 2 == sqlparameters.length) {\n                try {\n                    String oldurl = sqlparameters[0];\n                    String newurl = sqlparameters[1];\n                    int i = sqlService.updateContentAttribute(oldurl, newurl);\n                    i += sqlService.updateContentRelated(oldurl, newurl);\n                    i += sqlService.updatePlace(oldurl, newurl);\n                    i += sqlService.updatePlaceAttribute(oldurl, newurl);\n                    model.addAttribute(\"result\", i);\n                } catch (Exception e) {\n                    model.addAttribute(\"error\", e.getMessage());\n                }\n            }\n        }\n        model.addAttribute(\"sqlcommand\", sqlcommand);\n        model.addAttribute(\"sqlparameters\", sqlparameters);\n        logOperateService.save(new LogOperate(site.getId(), admin.getId(), LogLoginService.CHANNEL_WEB_MANAGER,\n                \"execsql.site\", RequestUtils.getIpAddress(request), CommonUtils.getDate(), JsonUtils.getString(model)));\n        return CommonConstants.TEMPLATE_DONE;\n    }",
    "abstract_func": "@RequestMapping(\"execSql\")\n    @Csrf\n    public String execSql(@RequestAttribute SysSite VAR_0, @SessionAttribute SysUser VAR_1, String VAR_2,\n            String[] VAR_3, HttpServletRequest VAR_4, ModelMap VAR_5) {\n        if (VAR_6.verifyCustom(\"noright\", !VAR_7.isMaster(VAR_0.getId()), VAR_5)) {\n            return VAR_8.TEMPLATE_ERROR;\n        }\n        if (\"update_url\".contains(VAR_2)) {\n            if (null != VAR_3 && 2 == VAR_3.length) {\n                try {\n                    String VAR_9 = VAR_3[0];\n                    String VAR_10 = VAR_3[1];\n                    int VAR_11 = VAR_12.updateContentAttribute(VAR_9, VAR_10);\n                    VAR_11 += VAR_12.updateContentRelated(VAR_9, VAR_10);\n                    VAR_11 += VAR_12.updatePlace(VAR_9, VAR_10);\n                    VAR_11 += VAR_12.updatePlaceAttribute(VAR_9, VAR_10);\n                    VAR_5.addAttribute(\"result\", VAR_11);\n                } catch (Exception VAR_13) {\n                    VAR_5.addAttribute(\"error\", VAR_13.getMessage());\n                }\n            }\n        }\n        VAR_5.addAttribute(\"sqlcommand\", VAR_2);\n        VAR_5.addAttribute(\"sqlparameters\", VAR_3);\n        VAR_14.save(new LogOperate(VAR_0.getId(), VAR_1.getId(), VAR_15.CHANNEL_WEB_MANAGER,\n                \"execsql.site\", VAR_16.getIpAddress(VAR_4), VAR_17.getDate(), VAR_18.getString(VAR_5)));\n        return VAR_8.TEMPLATE_DONE;\n    }",
    "func_graph_path": "sanluan/PublicCMS/bf24c5dd9177cb2da30d0f0a62cf8e130003c2ae/SysSiteAdminController.java/vul/after/0.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -1,28 +1,28 @@\n @RequestMapping(\"execSql\")\n     @Csrf\n-    public String execSql(@RequestAttribute SysSite site, @SessionAttribute SysUser admin, String sql, HttpServletRequest request,\n-            ModelMap model) {\n+    public String execSql(@RequestAttribute SysSite site, @SessionAttribute SysUser admin, String sqlcommand,\n+            String[] sqlparameters, HttpServletRequest request, ModelMap model) {\n         if (ControllerUtils.verifyCustom(\"noright\", !siteComponent.isMaster(site.getId()), model)) {\n             return CommonConstants.TEMPLATE_ERROR;\n         }\n-        if (sql.contains(CommonConstants.BLANK_SPACE)) {\n-            String type = sql.substring(0, sql.indexOf(CommonConstants.BLANK_SPACE));\n-            try {\n-                if (\"update\".equalsIgnoreCase(type)) {\n-                    model.addAttribute(\"result\", sqlService.update(sql));\n-                } else if (\"insert\".equalsIgnoreCase(type)) {\n-                    model.addAttribute(\"result\", sqlService.insert(sql));\n-                } else if (\"delete\".equalsIgnoreCase(type)) {\n-                    model.addAttribute(\"result\", sqlService.delete(sql));\n-                } else {\n-                    model.addAttribute(\"result\", JsonUtils.getString(sqlService.select(sql)));\n+        if (\"update_url\".contains(sqlcommand)) {\n+            if (null != sqlparameters && 2 == sqlparameters.length) {\n+                try {\n+                    String oldurl = sqlparameters[0];\n+                    String newurl = sqlparameters[1];\n+                    int i = sqlService.updateContentAttribute(oldurl, newurl);\n+                    i += sqlService.updateContentRelated(oldurl, newurl);\n+                    i += sqlService.updatePlace(oldurl, newurl);\n+                    i += sqlService.updatePlaceAttribute(oldurl, newurl);\n+                    model.addAttribute(\"result\", i);\n+                } catch (Exception e) {\n+                    model.addAttribute(\"error\", e.getMessage());\n                 }\n-            } catch (Exception e) {\n-                model.addAttribute(\"error\", e.getMessage());\n             }\n-            model.addAttribute(\"sql\", sql);\n-            logOperateService.save(new LogOperate(site.getId(), admin.getId(), LogLoginService.CHANNEL_WEB_MANAGER,\n-                    \"execsql.site\", RequestUtils.getIpAddress(request), CommonUtils.getDate(), JsonUtils.getString(model)));\n         }\n+        model.addAttribute(\"sqlcommand\", sqlcommand);\n+        model.addAttribute(\"sqlparameters\", sqlparameters);\n+        logOperateService.save(new LogOperate(site.getId(), admin.getId(), LogLoginService.CHANNEL_WEB_MANAGER,\n+                \"execsql.site\", RequestUtils.getIpAddress(request), CommonUtils.getDate(), JsonUtils.getString(model)));\n         return CommonConstants.TEMPLATE_DONE;\n     }",
    "diff_line_info": {
        "deleted_lines": [
            "    public String execSql(@RequestAttribute SysSite site, @SessionAttribute SysUser admin, String sql, HttpServletRequest request,",
            "            ModelMap model) {",
            "        if (sql.contains(CommonConstants.BLANK_SPACE)) {",
            "            String type = sql.substring(0, sql.indexOf(CommonConstants.BLANK_SPACE));",
            "            try {",
            "                if (\"update\".equalsIgnoreCase(type)) {",
            "                    model.addAttribute(\"result\", sqlService.update(sql));",
            "                } else if (\"insert\".equalsIgnoreCase(type)) {",
            "                    model.addAttribute(\"result\", sqlService.insert(sql));",
            "                } else if (\"delete\".equalsIgnoreCase(type)) {",
            "                    model.addAttribute(\"result\", sqlService.delete(sql));",
            "                } else {",
            "                    model.addAttribute(\"result\", JsonUtils.getString(sqlService.select(sql)));",
            "            } catch (Exception e) {",
            "                model.addAttribute(\"error\", e.getMessage());",
            "            model.addAttribute(\"sql\", sql);",
            "            logOperateService.save(new LogOperate(site.getId(), admin.getId(), LogLoginService.CHANNEL_WEB_MANAGER,",
            "                    \"execsql.site\", RequestUtils.getIpAddress(request), CommonUtils.getDate(), JsonUtils.getString(model)));"
        ],
        "added_lines": [
            "    public String execSql(@RequestAttribute SysSite site, @SessionAttribute SysUser admin, String sqlcommand,",
            "            String[] sqlparameters, HttpServletRequest request, ModelMap model) {",
            "        if (\"update_url\".contains(sqlcommand)) {",
            "            if (null != sqlparameters && 2 == sqlparameters.length) {",
            "                try {",
            "                    String oldurl = sqlparameters[0];",
            "                    String newurl = sqlparameters[1];",
            "                    int i = sqlService.updateContentAttribute(oldurl, newurl);",
            "                    i += sqlService.updateContentRelated(oldurl, newurl);",
            "                    i += sqlService.updatePlace(oldurl, newurl);",
            "                    i += sqlService.updatePlaceAttribute(oldurl, newurl);",
            "                    model.addAttribute(\"result\", i);",
            "                } catch (Exception e) {",
            "                    model.addAttribute(\"error\", e.getMessage());",
            "        model.addAttribute(\"sqlcommand\", sqlcommand);",
            "        model.addAttribute(\"sqlparameters\", sqlparameters);",
            "        logOperateService.save(new LogOperate(site.getId(), admin.getId(), LogLoginService.CHANNEL_WEB_MANAGER,",
            "                \"execsql.site\", RequestUtils.getIpAddress(request), CommonUtils.getDate(), JsonUtils.getString(model)));"
        ]
    },
    "is_vul": true,
    "pr_url": null,
    "description": "no more info"
}