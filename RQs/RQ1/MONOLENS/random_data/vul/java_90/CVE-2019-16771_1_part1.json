{
    "cve_id": "CVE-2019-16771",
    "cwe_ids": [
        "CWE-74"
    ],
    "cvss_vector": "AV:N/AC:L/Au:N/C:N/I:P/A:N",
    "cvss_is_v3": false,
    "repo_name": "line/armeria",
    "commit_msg": "Merge pull request from GHSA-35fr-h7jr-hh86\n\nMotivation:\n\nAn `HttpService` can produce a malformed HTTP response when a user\nspecified a malformed HTTP header values, such as:\n\n    ResponseHeaders.of(HttpStatus.OK\n                       \"my-header\", \"foo\\r\\nbad-header: bar\");\n\nModification:\n\n- Add strict header value validation to `HttpHeadersBase`\n- Add strict header name validation to `HttpHeaderNames.of()`, which is\n  used by `HttpHeadersBase`.\n\nResult:\n\n- It is not possible anymore to send a bad header value which can be\n  misused for sending additional headers or injecting arbitrary content.",
    "commit_hash": "b597f7a865a527a84ee3d6937075cfbb4470ed20",
    "git_url": "https://github.com/line/armeria/commit/b597f7a865a527a84ee3d6937075cfbb4470ed20",
    "file_path": "core/src/main/java/com/linecorp/armeria/common/HttpHeadersBase.java",
    "func_name": "addObject",
    "func_before": "final void addObject(CharSequence name, Object... values) {\n        final AsciiString normalizedName = normalizeName(name);\n        requireNonNull(values, \"values\");\n        for (Object v : values) {\n            requireNonNullElement(values, v);\n            addObject(normalizedName, v);\n        }\n    }",
    "abstract_func_before": "final void addObject(CharSequence VAR_0, Object... VAR_1) {\n        final AsciiString VAR_2 = normalizeName(VAR_0);\n        requireNonNull(VAR_1, \"values\");\n        for (Object VAR_3 : VAR_1) {\n            requireNonNullElement(VAR_1, VAR_3);\n            addObject(VAR_2, VAR_3);\n        }\n    }",
    "func_graph_path_before": "line/armeria/b597f7a865a527a84ee3d6937075cfbb4470ed20/HttpHeadersBase.java/vul/before/2.json",
    "func": "final void addObject(CharSequence name, Object... values) {\n        final AsciiString normalizedName = HttpHeaderNames.of(name);\n        requireNonNull(values, \"values\");\n        for (Object v : values) {\n            requireNonNullElement(values, v);\n            addObject(normalizedName, v);\n        }\n    }",
    "abstract_func": "final void addObject(CharSequence VAR_0, Object... VAR_1) {\n        final AsciiString VAR_2 = VAR_3.of(VAR_0);\n        requireNonNull(VAR_1, \"values\");\n        for (Object VAR_4 : VAR_1) {\n            requireNonNullElement(VAR_1, VAR_4);\n            addObject(VAR_2, VAR_4);\n        }\n    }",
    "func_graph_path": "line/armeria/b597f7a865a527a84ee3d6937075cfbb4470ed20/HttpHeadersBase.java/vul/after/2.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -1,5 +1,5 @@\n final void addObject(CharSequence name, Object... values) {\n-        final AsciiString normalizedName = normalizeName(name);\n+        final AsciiString normalizedName = HttpHeaderNames.of(name);\n         requireNonNull(values, \"values\");\n         for (Object v : values) {\n             requireNonNullElement(values, v);",
    "diff_line_info": {
        "deleted_lines": [
            "        final AsciiString normalizedName = normalizeName(name);"
        ],
        "added_lines": [
            "        final AsciiString normalizedName = HttpHeaderNames.of(name);"
        ]
    },
    "is_vul": true,
    "pr_url": null,
    "description": "no more info"
}