{
    "cve_id": "CVE-2023-46120",
    "cwe_ids": [
        "CWE-400"
    ],
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
    "cvss_is_v3": true,
    "repo_name": "rabbitmq/rabbitmq-java-client",
    "commit_msg": "Add max inbound message size to ConnectionFactory\n\nTo avoid OOM with a very large message.\nThe default value is 64 MiB.\n\nFixes #1062\n\n(cherry picked from commit 9ed45fde52224ec74fc523321efdf9a157d5cfca)",
    "commit_hash": "714aae602dcae6cb4b53cadf009323ebac313cc8",
    "git_url": "https://github.com/rabbitmq/rabbitmq-java-client/commit/714aae602dcae6cb4b53cadf009323ebac313cc8",
    "file_path": "src/main/java/com/rabbitmq/client/ConnectionFactory.java",
    "func_name": "createFrameHandlerFactory",
    "func_before": "protected synchronized FrameHandlerFactory createFrameHandlerFactory() throws IOException {\n        if(nio) {\n            if(this.frameHandlerFactory == null) {\n                if(this.nioParams.getNioExecutor() == null && this.nioParams.getThreadFactory() == null) {\n                    this.nioParams.setThreadFactory(getThreadFactory());\n                }\n                this.frameHandlerFactory = new SocketChannelFrameHandlerFactory(connectionTimeout, nioParams, isSSL(), sslContextFactory);\n            }\n            return this.frameHandlerFactory;\n        } else {\n            return new SocketFrameHandlerFactory(connectionTimeout, socketFactory, socketConf, isSSL(), this.shutdownExecutor, sslContextFactory);\n        }\n\n    }",
    "abstract_func_before": "protected synchronized FrameHandlerFactory createFrameHandlerFactory() throws IOException {\n        if(VAR_0) {\n            if(this.frameHandlerFactory == null) {\n                if(this.nioParams.getNioExecutor() == null && this.nioParams.getThreadFactory() == null) {\n                    this.nioParams.setThreadFactory(getThreadFactory());\n                }\n                this.frameHandlerFactory = new SocketChannelFrameHandlerFactory(VAR_1, VAR_2, isSSL(), VAR_3);\n            }\n            return this.frameHandlerFactory;\n        } else {\n            return new SocketFrameHandlerFactory(VAR_1, VAR_4, VAR_5, isSSL(), this.shutdownExecutor, VAR_3);\n        }\n\n    }",
    "func_graph_path_before": "rabbitmq/rabbitmq-java-client/714aae602dcae6cb4b53cadf009323ebac313cc8/ConnectionFactory.java/vul/before/0.json",
    "func": "protected synchronized FrameHandlerFactory createFrameHandlerFactory() throws IOException {\n        if(nio) {\n            if(this.frameHandlerFactory == null) {\n                if(this.nioParams.getNioExecutor() == null && this.nioParams.getThreadFactory() == null) {\n                    this.nioParams.setThreadFactory(getThreadFactory());\n                }\n                this.frameHandlerFactory = new SocketChannelFrameHandlerFactory(\n                    connectionTimeout, nioParams, isSSL(), sslContextFactory,\n                    this.maxInboundMessageBodySize);\n            }\n            return this.frameHandlerFactory;\n        } else {\n            return new SocketFrameHandlerFactory(connectionTimeout, socketFactory,\n                socketConf, isSSL(), this.shutdownExecutor, sslContextFactory,\n                this.maxInboundMessageBodySize);\n        }\n\n    }",
    "abstract_func": "protected synchronized FrameHandlerFactory createFrameHandlerFactory() throws IOException {\n        if(VAR_0) {\n            if(this.frameHandlerFactory == null) {\n                if(this.nioParams.getNioExecutor() == null && this.nioParams.getThreadFactory() == null) {\n                    this.nioParams.setThreadFactory(getThreadFactory());\n                }\n                this.frameHandlerFactory = new SocketChannelFrameHandlerFactory(\n                    VAR_1, VAR_2, isSSL(), VAR_3,\n                    this.maxInboundMessageBodySize);\n            }\n            return this.frameHandlerFactory;\n        } else {\n            return new SocketFrameHandlerFactory(VAR_1, VAR_4,\n                VAR_5, isSSL(), this.shutdownExecutor, VAR_3,\n                this.maxInboundMessageBodySize);\n        }\n\n    }",
    "func_graph_path": "rabbitmq/rabbitmq-java-client/714aae602dcae6cb4b53cadf009323ebac313cc8/ConnectionFactory.java/vul/after/0.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -4,11 +4,15 @@\n                 if(this.nioParams.getNioExecutor() == null && this.nioParams.getThreadFactory() == null) {\n                     this.nioParams.setThreadFactory(getThreadFactory());\n                 }\n-                this.frameHandlerFactory = new SocketChannelFrameHandlerFactory(connectionTimeout, nioParams, isSSL(), sslContextFactory);\n+                this.frameHandlerFactory = new SocketChannelFrameHandlerFactory(\n+                    connectionTimeout, nioParams, isSSL(), sslContextFactory,\n+                    this.maxInboundMessageBodySize);\n             }\n             return this.frameHandlerFactory;\n         } else {\n-            return new SocketFrameHandlerFactory(connectionTimeout, socketFactory, socketConf, isSSL(), this.shutdownExecutor, sslContextFactory);\n+            return new SocketFrameHandlerFactory(connectionTimeout, socketFactory,\n+                socketConf, isSSL(), this.shutdownExecutor, sslContextFactory,\n+                this.maxInboundMessageBodySize);\n         }\n \n     }",
    "diff_line_info": {
        "deleted_lines": [
            "                this.frameHandlerFactory = new SocketChannelFrameHandlerFactory(connectionTimeout, nioParams, isSSL(), sslContextFactory);",
            "            return new SocketFrameHandlerFactory(connectionTimeout, socketFactory, socketConf, isSSL(), this.shutdownExecutor, sslContextFactory);"
        ],
        "added_lines": [
            "                this.frameHandlerFactory = new SocketChannelFrameHandlerFactory(",
            "                    connectionTimeout, nioParams, isSSL(), sslContextFactory,",
            "                    this.maxInboundMessageBodySize);",
            "            return new SocketFrameHandlerFactory(connectionTimeout, socketFactory,",
            "                socketConf, isSSL(), this.shutdownExecutor, sslContextFactory,",
            "                this.maxInboundMessageBodySize);"
        ]
    },
    "is_vul": true,
    "pr_url": null,
    "description": "no more info"
}