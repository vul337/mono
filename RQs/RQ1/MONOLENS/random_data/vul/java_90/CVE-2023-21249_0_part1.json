{
    "cve_id": "CVE-2023-21249",
    "cwe_ids": [
        "CWE-281"
    ],
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N",
    "cvss_is_v3": true,
    "repo_name": "android",
    "commit_msg": "Watch uid proc state instead of importance for 1-time permissions\n\nThe system process may bind to an app with the flag\nBIND_FOREGROUND_SERVICE, this will put the client in the foreground\nservice importance level without the normal requirement that foreground\nservices must show a notification. Looking at proc states instead allows\nus to differentiate between these two levels of foreground service and\nrevoke the client when not in use.\n\nThis change makes the parameters `importanceToResetTimer` and\n`importanceToKeepSessionAlive` in PermissionManager#startOneTimePermissionSession\nobsolete.\n\nTest: atest CtsPermissionTestCases + manual testing with mic/cam/loc\nBug: 217981062\n(cherry picked from https://googleplex-android-review.googlesource.com/q/commit:0be78fbbf7d92bf29858aa0c48b171045ab5057f)\nMerged-In: I7a725647c001062d1a76a82b680a02e3e2edcb03\nChange-Id: I7a725647c001062d1a76a82b680a02e3e2edcb03\n",
    "commit_hash": "c00b7e7dbc1fa30339adef693d02a51254755d7f",
    "git_url": "https://android.googlesource.com/platform/frameworks/base/+/c00b7e7dbc1fa30339adef693d02a51254755d7f",
    "file_path": "services/core/java/com/android/server/pm/permission/OneTimePermissionUserManager.java",
    "func_name": "startPackageOneTimeSession",
    "func_before": "void startPackageOneTimeSession(@NonNull String packageName, long timeoutMillis,\n            long revokeAfterKilledDelayMillis, int importanceToResetTimer,\n            int importanceToKeepSessionAlive) {\n        int uid;\n        try {\n            uid = mContext.getPackageManager().getPackageUid(packageName, 0);\n        } catch (PackageManager.NameNotFoundException e) {\n            Log.e(LOG_TAG, \"Unknown package name \" + packageName, e);\n            return;\n        }\n\n        synchronized (mLock) {\n            PackageInactivityListener listener = mListeners.get(uid);\n            if (listener != null) {\n                listener.updateSessionParameters(timeoutMillis, revokeAfterKilledDelayMillis,\n                        importanceToResetTimer, importanceToKeepSessionAlive);\n                return;\n            }\n            listener = new PackageInactivityListener(uid, packageName, timeoutMillis,\n                    revokeAfterKilledDelayMillis, importanceToResetTimer,\n                    importanceToKeepSessionAlive);\n            mListeners.put(uid, listener);\n        }\n    }",
    "abstract_func_before": "void startPackageOneTimeSession(@NonNull String VAR_0, long VAR_1,\n            long VAR_2, int VAR_3,\n            int VAR_4) {\n        int VAR_5;\n        try {\n            VAR_5 = VAR_6.getPackageManager().getPackageUid(VAR_0, 0);\n        } catch (PackageManager.NameNotFoundException VAR_7) {\n            VAR_8.e(VAR_9, \"Unknown package name \" + VAR_0, VAR_7);\n            return;\n        }\n\n        synchronized (VAR_10) {\n            PackageInactivityListener VAR_11 = VAR_12.get(VAR_5);\n            if (VAR_11 != null) {\n                VAR_11.updateSessionParameters(VAR_1, VAR_2,\n                        VAR_3, VAR_4);\n                return;\n            }\n            VAR_11 = new PackageInactivityListener(VAR_5, VAR_0, VAR_1,\n                    VAR_2, VAR_3,\n                    VAR_4);\n            VAR_12.put(VAR_5, VAR_11);\n        }\n    }",
    "func_graph_path_before": "android/c00b7e7dbc1fa30339adef693d02a51254755d7f/OneTimePermissionUserManager.java/vul/before/0.json",
    "func": "void startPackageOneTimeSession(@NonNull String packageName, long timeoutMillis,\n            long revokeAfterKilledDelayMillis) {\n        int uid;\n        try {\n            uid = mContext.getPackageManager().getPackageUid(packageName, 0);\n        } catch (PackageManager.NameNotFoundException e) {\n            Log.e(LOG_TAG, \"Unknown package name \" + packageName, e);\n            return;\n        }\n\n        synchronized (mLock) {\n            PackageInactivityListener listener = mListeners.get(uid);\n            if (listener != null) {\n                listener.updateSessionParameters(timeoutMillis, revokeAfterKilledDelayMillis);\n                return;\n            }\n            listener = new PackageInactivityListener(uid, packageName, timeoutMillis,\n                    revokeAfterKilledDelayMillis);\n            mListeners.put(uid, listener);\n        }\n    }",
    "abstract_func": "void startPackageOneTimeSession(@NonNull String VAR_0, long VAR_1,\n            long VAR_2) {\n        int VAR_3;\n        try {\n            VAR_3 = VAR_4.getPackageManager().getPackageUid(VAR_0, 0);\n        } catch (PackageManager.NameNotFoundException VAR_5) {\n            VAR_6.e(VAR_7, \"Unknown package name \" + VAR_0, VAR_5);\n            return;\n        }\n\n        synchronized (VAR_8) {\n            PackageInactivityListener VAR_9 = VAR_10.get(VAR_3);\n            if (VAR_9 != null) {\n                VAR_9.updateSessionParameters(VAR_1, VAR_2);\n                return;\n            }\n            VAR_9 = new PackageInactivityListener(VAR_3, VAR_0, VAR_1,\n                    VAR_2);\n            VAR_10.put(VAR_3, VAR_9);\n        }\n    }",
    "func_graph_path": "android/c00b7e7dbc1fa30339adef693d02a51254755d7f/OneTimePermissionUserManager.java/vul/after/0.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -1,6 +1,5 @@\n void startPackageOneTimeSession(@NonNull String packageName, long timeoutMillis,\n-            long revokeAfterKilledDelayMillis, int importanceToResetTimer,\n-            int importanceToKeepSessionAlive) {\n+            long revokeAfterKilledDelayMillis) {\n         int uid;\n         try {\n             uid = mContext.getPackageManager().getPackageUid(packageName, 0);\n@@ -12,13 +11,11 @@\n         synchronized (mLock) {\n             PackageInactivityListener listener = mListeners.get(uid);\n             if (listener != null) {\n-                listener.updateSessionParameters(timeoutMillis, revokeAfterKilledDelayMillis,\n-                        importanceToResetTimer, importanceToKeepSessionAlive);\n+                listener.updateSessionParameters(timeoutMillis, revokeAfterKilledDelayMillis);\n                 return;\n             }\n             listener = new PackageInactivityListener(uid, packageName, timeoutMillis,\n-                    revokeAfterKilledDelayMillis, importanceToResetTimer,\n-                    importanceToKeepSessionAlive);\n+                    revokeAfterKilledDelayMillis);\n             mListeners.put(uid, listener);\n         }\n     }",
    "diff_line_info": {
        "deleted_lines": [
            "            long revokeAfterKilledDelayMillis, int importanceToResetTimer,",
            "            int importanceToKeepSessionAlive) {",
            "                listener.updateSessionParameters(timeoutMillis, revokeAfterKilledDelayMillis,",
            "                        importanceToResetTimer, importanceToKeepSessionAlive);",
            "                    revokeAfterKilledDelayMillis, importanceToResetTimer,",
            "                    importanceToKeepSessionAlive);"
        ],
        "added_lines": [
            "            long revokeAfterKilledDelayMillis) {",
            "                listener.updateSessionParameters(timeoutMillis, revokeAfterKilledDelayMillis);",
            "                    revokeAfterKilledDelayMillis);"
        ]
    },
    "is_vul": true,
    "pr_url": null,
    "description": "no more info"
}