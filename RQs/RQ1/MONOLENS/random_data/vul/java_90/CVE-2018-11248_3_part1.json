{
    "cve_id": "CVE-2018-11248",
    "cwe_ids": [
        "CWE-22"
    ],
    "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:P/A:P",
    "cvss_is_v3": false,
    "repo_name": "lingochamp/FileDownloader",
    "commit_msg": "fix: fix directory traversal vulnerability security issue\ncloses #1028",
    "commit_hash": "b023cc081bbecdd2a9f3549a3ae5c12a9647ed7f",
    "git_url": "https://github.com/lingochamp/FileDownloader/commit/b023cc081bbecdd2a9f3549a3ae5c12a9647ed7f",
    "file_path": "library/src/main/java/com/liulishuo/filedownloader/util/FileDownloadUtils.java",
    "func_name": "findFilename",
    "func_before": "public static String findFilename(FileDownloadConnection connection, String url) {\n        String filename = FileDownloadUtils.parseContentDisposition(connection.\n                getResponseHeaderField(\"Content-Disposition\"));\n\n        if (TextUtils.isEmpty(filename)) {\n            filename = FileDownloadUtils.generateFileName(url);\n        }\n\n        return filename;\n    }",
    "abstract_func_before": "public static String findFilename(FileDownloadConnection VAR_0, String VAR_1) {\n        String VAR_2 = VAR_3.parseContentDisposition(VAR_0.\n                getResponseHeaderField(\"Content-Disposition\"));\n\n        if (VAR_4.isEmpty(VAR_2)) {\n            VAR_2 = VAR_3.generateFileName(VAR_1);\n        }\n\n        return VAR_2;\n    }",
    "func_graph_path_before": "lingochamp/FileDownloader/b023cc081bbecdd2a9f3549a3ae5c12a9647ed7f/FileDownloadUtils.java/vul/before/1.json",
    "func": "public static String findFilename(FileDownloadConnection connection, String url)\n            throws FileDownloadSecurityException {\n        String filename = FileDownloadUtils.parseContentDisposition(connection.\n                getResponseHeaderField(\"Content-Disposition\"));\n\n        if (TextUtils.isEmpty(filename)) {\n            filename = FileDownloadUtils.generateFileName(url);\n        } else if (filename.startsWith(\"../\")) {\n            throw new FileDownloadSecurityException(FileDownloadUtils.formatString(\n                    \"The filename [%s] from the response is not allowable, because it start\"\n                            + \" with '../', which can raise the directory traversal vulnerability\",\n                    filename));\n        }\n\n        return filename;\n    }",
    "abstract_func": "public static String findFilename(FileDownloadConnection VAR_0, String VAR_1)\n            throws FileDownloadSecurityException {\n        String VAR_2 = VAR_3.parseContentDisposition(VAR_0.\n                getResponseHeaderField(\"Content-Disposition\"));\n\n        if (VAR_4.isEmpty(VAR_2)) {\n            VAR_2 = VAR_3.generateFileName(VAR_1);\n        } else if (VAR_2.startsWith(\"../\")) {\n            throw new FileDownloadSecurityException(VAR_3.formatString(\n                    \"The filename [%s] from the response is not allowable, because it start\"\n                            + \" with '../', which can raise the directory traversal vulnerability\",\n                    VAR_2));\n        }\n\n        return VAR_2;\n    }",
    "func_graph_path": "lingochamp/FileDownloader/b023cc081bbecdd2a9f3549a3ae5c12a9647ed7f/FileDownloadUtils.java/vul/after/1.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -1,9 +1,15 @@\n-public static String findFilename(FileDownloadConnection connection, String url) {\n+public static String findFilename(FileDownloadConnection connection, String url)\n+            throws FileDownloadSecurityException {\n         String filename = FileDownloadUtils.parseContentDisposition(connection.\n                 getResponseHeaderField(\"Content-Disposition\"));\n \n         if (TextUtils.isEmpty(filename)) {\n             filename = FileDownloadUtils.generateFileName(url);\n+        } else if (filename.startsWith(\"../\")) {\n+            throw new FileDownloadSecurityException(FileDownloadUtils.formatString(\n+                    \"The filename [%s] from the response is not allowable, because it start\"\n+                            + \" with '../', which can raise the directory traversal vulnerability\",\n+                    filename));\n         }\n \n         return filename;",
    "diff_line_info": {
        "deleted_lines": [
            "public static String findFilename(FileDownloadConnection connection, String url) {"
        ],
        "added_lines": [
            "public static String findFilename(FileDownloadConnection connection, String url)",
            "            throws FileDownloadSecurityException {",
            "        } else if (filename.startsWith(\"../\")) {",
            "            throw new FileDownloadSecurityException(FileDownloadUtils.formatString(",
            "                    \"The filename [%s] from the response is not allowable, because it start\"",
            "                            + \" with '../', which can raise the directory traversal vulnerability\",",
            "                    filename));"
        ]
    },
    "is_vul": true,
    "pr_url": null,
    "description": "no more info"
}