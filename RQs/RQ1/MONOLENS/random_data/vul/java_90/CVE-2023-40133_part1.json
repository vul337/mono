{
    "cve_id": "CVE-2023-40133",
    "cwe_ids": [
        "CWE-Other",
        "CWE-610"
    ],
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N",
    "cvss_is_v3": true,
    "repo_name": "android",
    "commit_msg": "[DO NOT MERGE] Verify URI Permissions in Autofill RemoteViews\n\nCheck permissions of URI inside of FillResponse's RemoteViews. If the\ncurrent user does not have the required permissions to view the URI, the\nRemoteView is dropped from displaying.\n\nThis fixes a security spill in which a user can view content of another\nuser through a malicious Autofill provider.\n\nBug: 283137865\nFixes: b/283264674 b/281666022 b/281665050 b/281848557 b/281533566\nb/281534749 b/283101289\nTest: Verified by POC app attached in bugs\nTest: atest CtsAutoFillServiceTestCases (added new tests)\n(cherry picked from https://googleplex-android-review.googlesource.com/q/commit:93810ba1c0a4d31f49adbf9454731e2b7defdfc0)\nMerged-In: I6f4d2a35e89bbed7bd9e07bf5cd3e2d68b20af9a\nChange-Id: I6f4d2a35e89bbed7bd9e07bf5cd3e2d68b20af9a\n",
    "commit_hash": "08becc8c600f14c5529115cc1a1e0c97cd503f33",
    "git_url": "https://android.googlesource.com/platform/frameworks/base/+/08becc8c600f14c5529115cc1a1e0c97cd503f33",
    "file_path": "services/autofill/java/com/android/server/autofill/ui/DialogFillUi.java",
    "func_name": "createDatasetItems",
    "func_before": "private ArrayList<ViewItem> createDatasetItems(FillResponse response,\n            AutofillId focusedViewId) {\n        final int datasetCount = response.getDatasets().size();\n        if (sVerbose) {\n            Slog.v(TAG, \"Number datasets: \" + datasetCount + \" max visible: \"\n                    + mVisibleDatasetsMaxCount);\n        }\n\n        final RemoteViews.InteractionHandler interceptionHandler = (view, pendingIntent, r) -> {\n            if (pendingIntent != null) {\n                mCallback.startIntentSender(pendingIntent.getIntentSender());\n            }\n            return true;\n        };\n\n        final ArrayList<ViewItem> items = new ArrayList<>(datasetCount);\n        for (int i = 0; i < datasetCount; i++) {\n            final Dataset dataset = response.getDatasets().get(i);\n            final int index = dataset.getFieldIds().indexOf(focusedViewId);\n            if (index >= 0) {\n                RemoteViews presentation = dataset.getFieldDialogPresentation(index);\n                if (presentation == null) {\n                    if (sDebug) {\n                        Slog.w(TAG, \"not displaying UI on field \" + focusedViewId + \" because \"\n                                + \"service didn't provide a presentation for it on \" + dataset);\n                    }\n                    continue;\n                }\n                final View view;\n                try {\n                    if (sVerbose) Slog.v(TAG, \"setting remote view for \" + focusedViewId);\n                    view = presentation.applyWithTheme(\n                            mContext, null, interceptionHandler, mThemeId);\n                } catch (RuntimeException e) {\n                    Slog.e(TAG, \"Error inflating remote views\", e);\n                    continue;\n                }\n                // TODO: Extract the shared filtering logic here and in FillUi to a common\n                //  method.\n                final Dataset.DatasetFieldFilter filter = dataset.getFilter(index);\n                Pattern filterPattern = null;\n                String valueText = null;\n                boolean filterable = true;\n                if (filter == null) {\n                    final AutofillValue value = dataset.getFieldValues().get(index);\n                    if (value != null && value.isText()) {\n                        valueText = value.getTextValue().toString().toLowerCase();\n                    }\n                } else {\n                    filterPattern = filter.pattern;\n                    if (filterPattern == null) {\n                        if (sVerbose) {\n                            Slog.v(TAG, \"Explicitly disabling filter at id \" + focusedViewId\n                                    + \" for dataset #\" + index);\n                        }\n                        filterable = false;\n                    }\n                }\n\n                items.add(new ViewItem(dataset, filterPattern, filterable, valueText, view));\n            }\n        }\n        return items;\n    }",
    "abstract_func_before": "private ArrayList<ViewItem> createDatasetItems(FillResponse VAR_0,\n            AutofillId VAR_1) {\n        final int VAR_2 = VAR_0.getDatasets().size();\n        if (VAR_3) {\n            VAR_4.v(VAR_5, \"Number datasets: \" + VAR_2 + \" max visible: \"\n                    + VAR_6);\n        }\n\n        final RemoteViews.InteractionHandler VAR_7 = (VAR_8, VAR_9, VAR_10) -> {\n            if (VAR_9 != null) {\n                VAR_11.startIntentSender(VAR_9.getIntentSender());\n            }\n            return true;\n        };\n\n        final ArrayList<ViewItem> VAR_12 = new ArrayList<>(VAR_2);\n        for (int VAR_13 = 0; VAR_13 < VAR_2; VAR_13++) {\n            final Dataset VAR_14 = VAR_0.getDatasets().get(VAR_13);\n            final int VAR_15 = VAR_14.getFieldIds().indexOf(VAR_1);\n            if (VAR_15 >= 0) {\n                RemoteViews VAR_16 = VAR_14.getFieldDialogPresentation(VAR_15);\n                if (VAR_16 == null) {\n                    if (VAR_17) {\n                        VAR_4.w(VAR_5, \"not displaying UI on field \" + VAR_1 + \" because \"\n                                + \"service didn't provide a presentation for it on \" + VAR_14);\n                    }\n                    continue;\n                }\n                final View VAR_8;\n                try {\n                    if (VAR_3) VAR_4.v(VAR_5, \"setting remote view for \" + VAR_1);\n                    VAR_8 = VAR_16.applyWithTheme(\n                            VAR_18, null, VAR_7, VAR_19);\n                } catch (RuntimeException VAR_20) {\n                    VAR_4.e(VAR_5, \"Error inflating remote views\", VAR_20);\n                    continue;\n                }\n                /* COMMENT_0 */\n                /* COMMENT_1 */\n                final Dataset.DatasetFieldFilter VAR_21 = VAR_14.getFilter(VAR_15);\n                Pattern VAR_22 = null;\n                String VAR_23 = null;\n                boolean VAR_24 = true;\n                if (VAR_21 == null) {\n                    final AutofillValue VAR_25 = VAR_14.getFieldValues().get(VAR_15);\n                    if (VAR_25 != null && VAR_25.isText()) {\n                        VAR_23 = VAR_25.getTextValue().toString().toLowerCase();\n                    }\n                } else {\n                    VAR_22 = VAR_21.pattern;\n                    if (VAR_22 == null) {\n                        if (VAR_3) {\n                            VAR_4.v(VAR_5, \"Explicitly disabling filter at id \" + VAR_1\n                                    + \" for dataset #\" + VAR_15);\n                        }\n                        VAR_24 = false;\n                    }\n                }\n\n                VAR_12.add(new ViewItem(VAR_14, VAR_22, VAR_24, VAR_23, VAR_8));\n            }\n        }\n        return VAR_12;\n    }",
    "func_graph_path_before": "android/08becc8c600f14c5529115cc1a1e0c97cd503f33/DialogFillUi.java/vul/before/0.json",
    "func": "private ArrayList<ViewItem> createDatasetItems(FillResponse response,\n            AutofillId focusedViewId) {\n        final int datasetCount = response.getDatasets().size();\n        if (sVerbose) {\n            Slog.v(TAG, \"Number datasets: \" + datasetCount + \" max visible: \"\n                    + mVisibleDatasetsMaxCount);\n        }\n\n        final RemoteViews.InteractionHandler interceptionHandler = (view, pendingIntent, r) -> {\n            if (pendingIntent != null) {\n                mCallback.startIntentSender(pendingIntent.getIntentSender());\n            }\n            return true;\n        };\n\n        final ArrayList<ViewItem> items = new ArrayList<>(datasetCount);\n        for (int i = 0; i < datasetCount; i++) {\n            final Dataset dataset = response.getDatasets().get(i);\n            final int index = dataset.getFieldIds().indexOf(focusedViewId);\n            if (index >= 0) {\n                RemoteViews presentation = Helper.sanitizeRemoteView(\n                        dataset.getFieldDialogPresentation(index));\n                if (presentation == null) {\n                    if (sDebug) {\n                        Slog.w(TAG, \"not displaying UI on field \" + focusedViewId + \" because \"\n                                + \"service didn't provide a presentation for it on \" + dataset);\n                    }\n                    continue;\n                }\n                final View view;\n                try {\n                    if (sVerbose) Slog.v(TAG, \"setting remote view for \" + focusedViewId);\n                    view = presentation.applyWithTheme(\n                            mContext, null, interceptionHandler, mThemeId);\n                } catch (RuntimeException e) {\n                    Slog.e(TAG, \"Error inflating remote views\", e);\n                    continue;\n                }\n                // TODO: Extract the shared filtering logic here and in FillUi to a common\n                //  method.\n                final Dataset.DatasetFieldFilter filter = dataset.getFilter(index);\n                Pattern filterPattern = null;\n                String valueText = null;\n                boolean filterable = true;\n                if (filter == null) {\n                    final AutofillValue value = dataset.getFieldValues().get(index);\n                    if (value != null && value.isText()) {\n                        valueText = value.getTextValue().toString().toLowerCase();\n                    }\n                } else {\n                    filterPattern = filter.pattern;\n                    if (filterPattern == null) {\n                        if (sVerbose) {\n                            Slog.v(TAG, \"Explicitly disabling filter at id \" + focusedViewId\n                                    + \" for dataset #\" + index);\n                        }\n                        filterable = false;\n                    }\n                }\n\n                items.add(new ViewItem(dataset, filterPattern, filterable, valueText, view));\n            }\n        }\n        return items;\n    }",
    "abstract_func": "private ArrayList<ViewItem> createDatasetItems(FillResponse VAR_0,\n            AutofillId VAR_1) {\n        final int VAR_2 = VAR_0.getDatasets().size();\n        if (VAR_3) {\n            VAR_4.v(VAR_5, \"Number datasets: \" + VAR_2 + \" max visible: \"\n                    + VAR_6);\n        }\n\n        final RemoteViews.InteractionHandler VAR_7 = (VAR_8, VAR_9, VAR_10) -> {\n            if (VAR_9 != null) {\n                VAR_11.startIntentSender(VAR_9.getIntentSender());\n            }\n            return true;\n        };\n\n        final ArrayList<ViewItem> VAR_12 = new ArrayList<>(VAR_2);\n        for (int VAR_13 = 0; VAR_13 < VAR_2; VAR_13++) {\n            final Dataset VAR_14 = VAR_0.getDatasets().get(VAR_13);\n            final int VAR_15 = VAR_14.getFieldIds().indexOf(VAR_1);\n            if (VAR_15 >= 0) {\n                RemoteViews VAR_16 = VAR_17.sanitizeRemoteView(\n                        VAR_14.getFieldDialogPresentation(VAR_15));\n                if (VAR_16 == null) {\n                    if (VAR_18) {\n                        VAR_4.w(VAR_5, \"not displaying UI on field \" + VAR_1 + \" because \"\n                                + \"service didn't provide a presentation for it on \" + VAR_14);\n                    }\n                    continue;\n                }\n                final View VAR_8;\n                try {\n                    if (VAR_3) VAR_4.v(VAR_5, \"setting remote view for \" + VAR_1);\n                    VAR_8 = VAR_16.applyWithTheme(\n                            VAR_19, null, VAR_7, VAR_20);\n                } catch (RuntimeException VAR_21) {\n                    VAR_4.e(VAR_5, \"Error inflating remote views\", VAR_21);\n                    continue;\n                }\n                /* COMMENT_0 */\n                /* COMMENT_1 */\n                final Dataset.DatasetFieldFilter VAR_22 = VAR_14.getFilter(VAR_15);\n                Pattern VAR_23 = null;\n                String VAR_24 = null;\n                boolean VAR_25 = true;\n                if (VAR_22 == null) {\n                    final AutofillValue VAR_26 = VAR_14.getFieldValues().get(VAR_15);\n                    if (VAR_26 != null && VAR_26.isText()) {\n                        VAR_24 = VAR_26.getTextValue().toString().toLowerCase();\n                    }\n                } else {\n                    VAR_23 = VAR_22.pattern;\n                    if (VAR_23 == null) {\n                        if (VAR_3) {\n                            VAR_4.v(VAR_5, \"Explicitly disabling filter at id \" + VAR_1\n                                    + \" for dataset #\" + VAR_15);\n                        }\n                        VAR_25 = false;\n                    }\n                }\n\n                VAR_12.add(new ViewItem(VAR_14, VAR_23, VAR_25, VAR_24, VAR_8));\n            }\n        }\n        return VAR_12;\n    }",
    "func_graph_path": "android/08becc8c600f14c5529115cc1a1e0c97cd503f33/DialogFillUi.java/vul/after/0.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -18,7 +18,8 @@\n             final Dataset dataset = response.getDatasets().get(i);\n             final int index = dataset.getFieldIds().indexOf(focusedViewId);\n             if (index >= 0) {\n-                RemoteViews presentation = dataset.getFieldDialogPresentation(index);\n+                RemoteViews presentation = Helper.sanitizeRemoteView(\n+                        dataset.getFieldDialogPresentation(index));\n                 if (presentation == null) {\n                     if (sDebug) {\n                         Slog.w(TAG, \"not displaying UI on field \" + focusedViewId + \" because \"",
    "diff_line_info": {
        "deleted_lines": [
            "                RemoteViews presentation = dataset.getFieldDialogPresentation(index);"
        ],
        "added_lines": [
            "                RemoteViews presentation = Helper.sanitizeRemoteView(",
            "                        dataset.getFieldDialogPresentation(index));"
        ]
    },
    "is_vul": true,
    "pr_url": null,
    "description": "no more info"
}