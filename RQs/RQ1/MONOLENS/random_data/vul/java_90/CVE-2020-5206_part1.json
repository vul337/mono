{
    "cve_id": "CVE-2020-5206",
    "cwe_ids": [
        "CWE-287"
    ],
    "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:P/A:N",
    "cvss_is_v3": false,
    "repo_name": "opencast",
    "commit_msg": "Authentication Bypass For Endpoints With Anonymous Access\n\nUsing a remember-me cookie with an arbitrary username can cause Opencast\nto assume proper authentication for that user even if the remember-me\ncookie was incorrect given that the attacked endpoint also allows\nanonymous access.\n\nThis way, an attacker can, for example, fake a remember-me token, assume\nthe identity of the global system administrator and request non-public\ncontent from the search service without ever providing any proper\nauthentication.\n\nThe reason for this problem is that using a remember-me cookie will\nalways cause the user in the request context to be populated, even if\nthe cookie is invalid by now. This is usually no problem, except in\ncombination with anonymous access where anonymous authentication is\ngranted and the request may continue.\n\nIn such a case, Opencast's security service would just check that a user\nexisted in the request context and assume proper authentication of this\nuser, never checking if it's actually anonymous authentication.\n\nThis patch adds this additional check, falling back to the anonymous\nuser in case of anonymous authentication.",
    "commit_hash": "b157e1fb3b35991ca7bf59f0730329fbe7ce82e8",
    "git_url": "https://github.com/opencast/opencast/commit/b157e1fb3b35991ca7bf59f0730329fbe7ce82e8",
    "file_path": "modules/kernel/src/main/java/org/opencastproject/kernel/security/SecurityServiceSpringImpl.java",
    "func_name": "getUser",
    "func_before": "@Override\n  public User getUser() throws IllegalStateException {\n    Organization org = getOrganization();\n    if (org == null)\n      throw new IllegalStateException(\"No organization is set in security context\");\n\n    User delegatedUser = delegatedUserHolder.get();\n\n    if (delegatedUser != null) {\n      return delegatedUser;\n    }\n\n    Authentication auth = SecurityContextHolder.getContext().getAuthentication();\n    JaxbOrganization jaxbOrganization = JaxbOrganization.fromOrganization(org);\n    if (auth != null) {\n      Object principal = auth.getPrincipal();\n      if ((principal != null) && (principal instanceof UserDetails)) {\n        UserDetails userDetails = (UserDetails) principal;\n\n        User user = null;\n\n        // If user exists, fetch it from the userDirectory\n        if (userDirectory != null) {\n          user = userDirectory.loadUser(userDetails.getUsername());\n          if (user == null) {\n            logger.debug(\n                    \"Authenticated user '{}' could not be found in any of the current UserProviders. Continuing anyway...\",\n                    userDetails.getUsername());\n          }\n        } else {\n          logger.debug(\"No UserDirectory was found when trying to search for user '{}'\", userDetails.getUsername());\n        }\n\n        // Add the roles (authorities) in the security context\n        Set<JaxbRole> roles = new HashSet<JaxbRole>();\n        Collection<? extends GrantedAuthority> authorities = auth.getAuthorities();\n        if (authorities != null) {\n          for (GrantedAuthority ga : authorities) {\n            roles.add(new JaxbRole(ga.getAuthority(), jaxbOrganization));\n          }\n        }\n\n        if (user == null) {\n          // No user was found. Create one to hold the auth information from the security context\n          user = new JaxbUser(userDetails.getUsername(), null, jaxbOrganization, roles);\n        } else {\n          // Combine the existing user with the roles in the security context\n          user = JaxbUser.fromUser(user, roles);\n        }\n\n        // Save the user to retrieve it quicker the next time(s) this method is called (by this thread)\n        delegatedUserHolder.set(user);\n\n        return user;\n      }\n    }\n\n    // Return the anonymous user by default\n    return SecurityUtil.createAnonymousUser(jaxbOrganization);\n  }",
    "abstract_func_before": "@Override\n  public User getUser() throws IllegalStateException {\n    Organization VAR_0 = getOrganization();\n    if (VAR_0 == null)\n      throw new IllegalStateException(\"No organization is set in security context\");\n\n    User VAR_1 = VAR_2.get();\n\n    if (VAR_1 != null) {\n      return VAR_1;\n    }\n\n    Authentication VAR_3 = VAR_4.getContext().getAuthentication();\n    JaxbOrganization VAR_5 = VAR_6.fromOrganization(VAR_0);\n    if (VAR_3 != null) {\n      Object VAR_7 = VAR_3.getPrincipal();\n      if ((VAR_7 != null) && (VAR_7 instanceof UserDetails)) {\n        UserDetails VAR_8 = (UserDetails) VAR_7;\n\n        User VAR_9 = null;\n\n        /* COMMENT_0 */\n        if (VAR_10 != null) {\n          VAR_9 = VAR_10.loadUser(VAR_8.getUsername());\n          if (VAR_9 == null) {\n            VAR_11.debug(\n                    \"Authenticated user '{}' could not be found in any of the current UserProviders. Continuing anyway...\",\n                    VAR_8.getUsername());\n          }\n        } else {\n          VAR_11.debug(\"No UserDirectory was found when trying to search for user '{}'\", VAR_8.getUsername());\n        }\n\n        /* COMMENT_1 */\n        Set<JaxbRole> VAR_12 = new HashSet<JaxbRole>();\n        Collection<? extends GrantedAuthority> VAR_13 = VAR_3.getAuthorities();\n        if (VAR_13 != null) {\n          for (GrantedAuthority VAR_14 : VAR_13) {\n            VAR_12.add(new JaxbRole(VAR_14.getAuthority(), VAR_5));\n          }\n        }\n\n        if (VAR_9 == null) {\n          /* COMMENT_2 */\n          VAR_9 = new JaxbUser(VAR_8.getUsername(), null, VAR_5, VAR_12);\n        } else {\n          /* COMMENT_3 */\n          VAR_9 = VAR_15.fromUser(VAR_9, VAR_12);\n        }\n\n        /* COMMENT_4 */\n        VAR_2.set(VAR_9);\n\n        return VAR_9;\n      }\n    }\n\n    /* COMMENT_5 */\n    return VAR_16.createAnonymousUser(VAR_5);\n  }",
    "func_graph_path_before": "opencast/b157e1fb3b35991ca7bf59f0730329fbe7ce82e8/SecurityServiceSpringImpl.java/vul/before/0.json",
    "func": "@Override\n  public User getUser() throws IllegalStateException {\n    Organization org = getOrganization();\n    if (org == null)\n      throw new IllegalStateException(\"No organization is set in security context\");\n\n    User delegatedUser = delegatedUserHolder.get();\n\n    Authentication auth = SecurityContextHolder.getContext().getAuthentication();\n    if (auth instanceof AnonymousAuthenticationToken) {\n      return SecurityUtil.createAnonymousUser(org);\n    }\n\n    if (delegatedUser != null) {\n      return delegatedUser;\n    }\n\n    JaxbOrganization jaxbOrganization = JaxbOrganization.fromOrganization(org);\n    if (auth != null) {\n      Object principal = auth.getPrincipal();\n      if ((principal instanceof UserDetails)) {\n        UserDetails userDetails = (UserDetails) principal;\n\n        User user = null;\n\n        // If user exists, fetch it from the userDirectory\n        if (userDirectory != null) {\n          user = userDirectory.loadUser(userDetails.getUsername());\n          if (user == null) {\n            logger.debug(\"Authenticated user '{}' could not be found in any of the current UserProviders. \"\n                + \"Continuing anyway...\", userDetails.getUsername());\n          }\n        } else {\n          logger.debug(\"No UserDirectory was found when trying to search for user '{}'\", userDetails.getUsername());\n        }\n\n        // Add the roles (authorities) in the security context\n        Set<JaxbRole> roles = new HashSet<>();\n        Collection<? extends GrantedAuthority> authorities = auth.getAuthorities();\n        if (authorities != null) {\n          for (GrantedAuthority ga : authorities) {\n            roles.add(new JaxbRole(ga.getAuthority(), jaxbOrganization));\n          }\n        }\n\n        if (user == null) {\n          // No user was found. Create one to hold the auth information from the security context\n          user = new JaxbUser(userDetails.getUsername(), null, jaxbOrganization, roles);\n        } else {\n          // Combine the existing user with the roles in the security context\n          user = JaxbUser.fromUser(user, roles);\n        }\n\n        // Save the user to retrieve it quicker the next time(s) this method is called (by this thread)\n        delegatedUserHolder.set(user);\n\n        return user;\n      }\n    }\n\n    // Return the anonymous user by default\n    return SecurityUtil.createAnonymousUser(jaxbOrganization);\n  }",
    "abstract_func": "@Override\n  public User getUser() throws IllegalStateException {\n    Organization VAR_0 = getOrganization();\n    if (VAR_0 == null)\n      throw new IllegalStateException(\"No organization is set in security context\");\n\n    User VAR_1 = VAR_2.get();\n\n    Authentication VAR_3 = VAR_4.getContext().getAuthentication();\n    if (VAR_3 instanceof AnonymousAuthenticationToken) {\n      return VAR_5.createAnonymousUser(VAR_0);\n    }\n\n    if (VAR_1 != null) {\n      return VAR_1;\n    }\n\n    JaxbOrganization VAR_6 = VAR_7.fromOrganization(VAR_0);\n    if (VAR_3 != null) {\n      Object VAR_8 = VAR_3.getPrincipal();\n      if ((VAR_8 instanceof UserDetails)) {\n        UserDetails VAR_9 = (UserDetails) VAR_8;\n\n        User VAR_10 = null;\n\n        /* COMMENT_0 */\n        if (VAR_11 != null) {\n          VAR_10 = VAR_11.loadUser(VAR_9.getUsername());\n          if (VAR_10 == null) {\n            VAR_12.debug(\"Authenticated user '{}' could not be found in any of the current UserProviders. \"\n                + \"Continuing anyway...\", VAR_9.getUsername());\n          }\n        } else {\n          VAR_12.debug(\"No UserDirectory was found when trying to search for user '{}'\", VAR_9.getUsername());\n        }\n\n        /* COMMENT_1 */\n        Set<JaxbRole> VAR_13 = new HashSet<>();\n        Collection<? extends GrantedAuthority> VAR_14 = VAR_3.getAuthorities();\n        if (VAR_14 != null) {\n          for (GrantedAuthority VAR_15 : VAR_14) {\n            VAR_13.add(new JaxbRole(VAR_15.getAuthority(), VAR_6));\n          }\n        }\n\n        if (VAR_10 == null) {\n          /* COMMENT_2 */\n          VAR_10 = new JaxbUser(VAR_9.getUsername(), null, VAR_6, VAR_13);\n        } else {\n          /* COMMENT_3 */\n          VAR_10 = VAR_16.fromUser(VAR_10, VAR_13);\n        }\n\n        /* COMMENT_4 */\n        VAR_2.set(VAR_10);\n\n        return VAR_10;\n      }\n    }\n\n    /* COMMENT_5 */\n    return VAR_5.createAnonymousUser(VAR_6);\n  }",
    "func_graph_path": "opencast/b157e1fb3b35991ca7bf59f0730329fbe7ce82e8/SecurityServiceSpringImpl.java/vul/after/0.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -6,15 +6,19 @@\n \n     User delegatedUser = delegatedUserHolder.get();\n \n+    Authentication auth = SecurityContextHolder.getContext().getAuthentication();\n+    if (auth instanceof AnonymousAuthenticationToken) {\n+      return SecurityUtil.createAnonymousUser(org);\n+    }\n+\n     if (delegatedUser != null) {\n       return delegatedUser;\n     }\n \n-    Authentication auth = SecurityContextHolder.getContext().getAuthentication();\n     JaxbOrganization jaxbOrganization = JaxbOrganization.fromOrganization(org);\n     if (auth != null) {\n       Object principal = auth.getPrincipal();\n-      if ((principal != null) && (principal instanceof UserDetails)) {\n+      if ((principal instanceof UserDetails)) {\n         UserDetails userDetails = (UserDetails) principal;\n \n         User user = null;\n@@ -23,16 +27,15 @@\n         if (userDirectory != null) {\n           user = userDirectory.loadUser(userDetails.getUsername());\n           if (user == null) {\n-            logger.debug(\n-                    \"Authenticated user '{}' could not be found in any of the current UserProviders. Continuing anyway...\",\n-                    userDetails.getUsername());\n+            logger.debug(\"Authenticated user '{}' could not be found in any of the current UserProviders. \"\n+                + \"Continuing anyway...\", userDetails.getUsername());\n           }\n         } else {\n           logger.debug(\"No UserDirectory was found when trying to search for user '{}'\", userDetails.getUsername());\n         }\n \n         // Add the roles (authorities) in the security context\n-        Set<JaxbRole> roles = new HashSet<JaxbRole>();\n+        Set<JaxbRole> roles = new HashSet<>();\n         Collection<? extends GrantedAuthority> authorities = auth.getAuthorities();\n         if (authorities != null) {\n           for (GrantedAuthority ga : authorities) {",
    "diff_line_info": {
        "deleted_lines": [
            "    Authentication auth = SecurityContextHolder.getContext().getAuthentication();",
            "      if ((principal != null) && (principal instanceof UserDetails)) {",
            "            logger.debug(",
            "                    \"Authenticated user '{}' could not be found in any of the current UserProviders. Continuing anyway...\",",
            "                    userDetails.getUsername());",
            "        Set<JaxbRole> roles = new HashSet<JaxbRole>();"
        ],
        "added_lines": [
            "    Authentication auth = SecurityContextHolder.getContext().getAuthentication();",
            "    if (auth instanceof AnonymousAuthenticationToken) {",
            "      return SecurityUtil.createAnonymousUser(org);",
            "    }",
            "",
            "      if ((principal instanceof UserDetails)) {",
            "            logger.debug(\"Authenticated user '{}' could not be found in any of the current UserProviders. \"",
            "                + \"Continuing anyway...\", userDetails.getUsername());",
            "        Set<JaxbRole> roles = new HashSet<>();"
        ]
    },
    "is_vul": true,
    "pr_url": null,
    "description": "no more info"
}