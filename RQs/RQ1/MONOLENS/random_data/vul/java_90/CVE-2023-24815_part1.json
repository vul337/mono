{
    "cve_id": "CVE-2023-24815",
    "cwe_ids": [
        "CWE-22"
    ],
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "cvss_is_v3": true,
    "repo_name": "vert-x3/vertx-web",
    "commit_msg": "Fix the webroot escape to classpath on windows\n\nSigned-off-by: Paulo Lopes <pmlopes@gmail.com>",
    "commit_hash": "9e3a783b1d1a731055e9049078b1b1494ece9c15",
    "git_url": "https://github.com/vert-x3/vertx-web/commit/9e3a783b1d1a731055e9049078b1b1494ece9c15",
    "file_path": "vertx-web/src/main/java/io/vertx/ext/web/impl/Utils.java",
    "func_name": "pathOffset",
    "func_before": "public static String pathOffset(String path, RoutingContext context) {\n    final Route route = context.currentRoute();\n\n    // cannot make any assumptions\n    if (route == null) {\n      return path;\n    }\n\n    if (!route.isExactPath()) {\n      final String rest = context.pathParam(\"*\");\n      if (rest != null) {\n        // normalize\n        if (rest.length() > 0) {\n          if (rest.charAt(0) == '/') {\n            return rest;\n          } else {\n            return \"/\" + rest;\n          }\n        } else {\n          return \"/\";\n        }\n      }\n    }\n    int prefixLen = 0;\n    String mountPoint = context.mountPoint();\n    if (mountPoint != null) {\n      prefixLen = mountPoint.length();\n      // special case we need to verify if a trailing slash  is present and exclude\n      if (mountPoint.charAt(mountPoint.length() - 1) == '/') {\n        prefixLen--;\n      }\n    }\n    // we can only safely skip the route path if there are no variables or regex\n    if (!route.isRegexPath()) {\n      String routePath = route.getPath();\n      if (routePath != null) {\n        prefixLen += routePath.length();\n        // special case we need to verify if a trailing slash  is present and exclude\n        if (routePath.charAt(routePath.length() - 1) == '/') {\n          prefixLen--;\n        }\n      }\n    }\n    return prefixLen != 0 ? path.substring(prefixLen) : path;\n  }",
    "abstract_func_before": "public static String pathOffset(String VAR_0, RoutingContext VAR_1) {\n    final Route VAR_2 = VAR_1.currentRoute();\n\n    /* COMMENT_0 */\n    if (VAR_2 == null) {\n      return VAR_0;\n    }\n\n    if (!VAR_2.isExactPath()) {\n      final String VAR_3 = VAR_1.pathParam(\"*\");\n      if (VAR_3 != null) {\n        /* COMMENT_1 */\n        if (VAR_3.length() > 0) {\n          if (VAR_3.charAt(0) == '/') {\n            return VAR_3;\n          } else {\n            return \"/\" + VAR_3;\n          }\n        } else {\n          return \"/\";\n        }\n      }\n    }\n    int VAR_4 = 0;\n    String VAR_5 = VAR_1.mountPoint();\n    if (VAR_5 != null) {\n      VAR_4 = VAR_5.length();\n      /* COMMENT_2 */\n      if (VAR_5.charAt(VAR_5.length() - 1) == '/') {\n        VAR_4--;\n      }\n    }\n    /* COMMENT_3 */\n    if (!VAR_2.isRegexPath()) {\n      String VAR_6 = VAR_2.getPath();\n      if (VAR_6 != null) {\n        VAR_4 += VAR_6.length();\n        /* COMMENT_2 */\n        if (VAR_6.charAt(VAR_6.length() - 1) == '/') {\n          VAR_4--;\n        }\n      }\n    }\n    return VAR_4 != 0 ? VAR_0.substring(VAR_4) : VAR_0;\n  }",
    "func_graph_path_before": "vert-x3/vertx-web/9e3a783b1d1a731055e9049078b1b1494ece9c15/Utils.java/vul/before/0.json",
    "func": "public static String pathOffset(String path, RoutingContext context) {\n    final Route route = context.currentRoute();\n\n    // cannot make any assumptions\n    if (route == null) {\n      return path;\n    }\n\n    if (!route.isExactPath()) {\n      String rest = context.pathParam(\"*\");\n      if (rest != null) {\n        // normalize\n        if (rest.length() > 0) {\n          // remove any attempt to escape the web root and use UNIX style path separators\n          rest = HttpUtils.removeDots(rest.replace('\\\\', '/'));\n          if (rest.charAt(0) == '/') {\n            return rest;\n          } else {\n            return \"/\" + rest;\n          }\n        } else {\n          return \"/\";\n        }\n      }\n    }\n    int prefixLen = 0;\n    String mountPoint = context.mountPoint();\n    if (mountPoint != null) {\n      prefixLen = mountPoint.length();\n      // special case we need to verify if a trailing slash  is present and exclude\n      if (mountPoint.charAt(mountPoint.length() - 1) == '/') {\n        prefixLen--;\n      }\n    }\n    // we can only safely skip the route path if there are no variables or regex\n    if (!route.isRegexPath()) {\n      String routePath = route.getPath();\n      if (routePath != null) {\n        prefixLen += routePath.length();\n        // special case we need to verify if a trailing slash  is present and exclude\n        if (routePath.charAt(routePath.length() - 1) == '/') {\n          prefixLen--;\n        }\n      }\n    }\n    return prefixLen != 0 ? path.substring(prefixLen) : path;\n  }",
    "abstract_func": "public static String pathOffset(String VAR_0, RoutingContext VAR_1) {\n    final Route VAR_2 = VAR_1.currentRoute();\n\n    /* COMMENT_0 */\n    if (VAR_2 == null) {\n      return VAR_0;\n    }\n\n    if (!VAR_2.isExactPath()) {\n      String VAR_3 = VAR_1.pathParam(\"*\");\n      if (VAR_3 != null) {\n        /* COMMENT_1 */\n        if (VAR_3.length() > 0) {\n          /* COMMENT_2 */\n          VAR_3 = VAR_4.removeDots(VAR_3.replace('\\\\', '/'));\n          if (VAR_3.charAt(0) == '/') {\n            return VAR_3;\n          } else {\n            return \"/\" + VAR_3;\n          }\n        } else {\n          return \"/\";\n        }\n      }\n    }\n    int VAR_5 = 0;\n    String VAR_6 = VAR_1.mountPoint();\n    if (VAR_6 != null) {\n      VAR_5 = VAR_6.length();\n      /* COMMENT_3 */\n      if (VAR_6.charAt(VAR_6.length() - 1) == '/') {\n        VAR_5--;\n      }\n    }\n    /* COMMENT_4 */\n    if (!VAR_2.isRegexPath()) {\n      String VAR_7 = VAR_2.getPath();\n      if (VAR_7 != null) {\n        VAR_5 += VAR_7.length();\n        /* COMMENT_3 */\n        if (VAR_7.charAt(VAR_7.length() - 1) == '/') {\n          VAR_5--;\n        }\n      }\n    }\n    return VAR_5 != 0 ? VAR_0.substring(VAR_5) : VAR_0;\n  }",
    "func_graph_path": "vert-x3/vertx-web/9e3a783b1d1a731055e9049078b1b1494ece9c15/Utils.java/vul/after/0.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -7,10 +7,12 @@\n     }\n \n     if (!route.isExactPath()) {\n-      final String rest = context.pathParam(\"*\");\n+      String rest = context.pathParam(\"*\");\n       if (rest != null) {\n         // normalize\n         if (rest.length() > 0) {\n+          // remove any attempt to escape the web root and use UNIX style path separators\n+          rest = HttpUtils.removeDots(rest.replace('\\\\', '/'));\n           if (rest.charAt(0) == '/') {\n             return rest;\n           } else {",
    "diff_line_info": {
        "deleted_lines": [
            "      final String rest = context.pathParam(\"*\");"
        ],
        "added_lines": [
            "      String rest = context.pathParam(\"*\");",
            "          // remove any attempt to escape the web root and use UNIX style path separators",
            "          rest = HttpUtils.removeDots(rest.replace('\\\\', '/'));"
        ]
    },
    "is_vul": true,
    "pr_url": null,
    "description": "no more info"
}