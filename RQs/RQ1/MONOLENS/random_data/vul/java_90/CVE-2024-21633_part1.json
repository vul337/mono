{
    "cve_id": "CVE-2024-21633",
    "cwe_ids": [
        "CWE-22"
    ],
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H",
    "cvss_is_v3": true,
    "repo_name": "iBotPeaches/Apktool",
    "commit_msg": "Prevent arbitrary file writes with malicious resource names. (#3484)\n\n* refactor: rename sanitize function\r\n\r\n* fix: expose getDir\r\n\r\n* fix: safe handling of untrusted resource names\r\n\r\n - fixes: GHSA-2hqv-2xv4-5h5w\r\n\r\n* test: sample file for GHSA-2hqv-2xv4-5h5w\r\n\r\n* refactor: avoid detection of absolute files for resource check\r\n\r\n* chore: enable info mode on gradle\r\n\r\n* test: skip test on windows\r\n\r\n* chore: debug windows handling\r\n\r\n* fix: normalize entry with file separators\r\n\r\n* fix: normalize filepath after cleansing\r\n\r\n* chore: Android paths are not OS specific\r\n\r\n* refactor: use java.nio for path traversal checking\r\n\r\n* chore: align path separator on Windows for Zip files\r\n\r\n* chore: rework towards basic directory traversal\r\n\r\n* chore: remove '--info' on build.yml",
    "commit_hash": "d348c43b24a9de350ff6e5bd610545a10c1fc712",
    "git_url": "https://github.com/iBotPeaches/Apktool/commit/d348c43b24a9de350ff6e5bd610545a10c1fc712",
    "file_path": "brut.apktool/apktool-lib/src/main/java/brut/androlib/res/ResourcesDecoder.java",
    "func_name": "decodeResources",
    "func_before": "public void decodeResources(File outDir) throws AndrolibException {\n        if (!mApkInfo.hasResources()) {\n            return;\n        }\n\n        mResTable.loadMainPkg(mApkInfo.getApkFile());\n\n        ResStreamDecoderContainer decoders = new ResStreamDecoderContainer();\n        decoders.setDecoder(\"raw\", new ResRawStreamDecoder());\n        decoders.setDecoder(\"9patch\", new Res9patchStreamDecoder());\n\n        AXmlResourceParser axmlParser = new AXmlResourceParser(mResTable);\n        decoders.setDecoder(\"xml\", new XmlPullStreamDecoder(axmlParser, getResXmlSerializer()));\n\n        ResFileDecoder fileDecoder = new ResFileDecoder(decoders);\n        Directory in, out;\n\n        try {\n            out = new FileDirectory(outDir);\n            in = mApkInfo.getApkFile().getDirectory();\n            out = out.createDir(\"res\");\n        } catch (DirectoryException ex) {\n            throw new AndrolibException(ex);\n        }\n\n        ExtMXSerializer xmlSerializer = getResXmlSerializer();\n        for (ResPackage pkg : mResTable.listMainPackages()) {\n\n            LOGGER.info(\"Decoding file-resources...\");\n            for (ResResource res : pkg.listFiles()) {\n                fileDecoder.decode(res, in, out, mResFileMapping);\n            }\n\n            LOGGER.info(\"Decoding values */* XMLs...\");\n            for (ResValuesFile valuesFile : pkg.listValuesFiles()) {\n                generateValuesFile(valuesFile, out, xmlSerializer);\n            }\n            generatePublicXml(pkg, out, xmlSerializer);\n        }\n\n        AndrolibException decodeError = axmlParser.getFirstError();\n        if (decodeError != null) {\n            throw decodeError;\n        }\n    }",
    "abstract_func_before": "public void decodeResources(File VAR_0) throws AndrolibException {\n        if (!VAR_1.hasResources()) {\n            return;\n        }\n\n        VAR_2.loadMainPkg(VAR_1.getApkFile());\n\n        ResStreamDecoderContainer VAR_3 = new ResStreamDecoderContainer();\n        VAR_3.setDecoder(\"raw\", new ResRawStreamDecoder());\n        VAR_3.setDecoder(\"9patch\", new Res9patchStreamDecoder());\n\n        AXmlResourceParser VAR_4 = new AXmlResourceParser(VAR_2);\n        VAR_3.setDecoder(\"xml\", new XmlPullStreamDecoder(VAR_4, getResXmlSerializer()));\n\n        ResFileDecoder VAR_5 = new ResFileDecoder(VAR_3);\n        Directory VAR_6, VAR_7;\n\n        try {\n            VAR_7 = new FileDirectory(VAR_0);\n            VAR_6 = VAR_1.getApkFile().getDirectory();\n            VAR_7 = VAR_7.createDir(\"res\");\n        } catch (DirectoryException VAR_8) {\n            throw new AndrolibException(VAR_8);\n        }\n\n        ExtMXSerializer VAR_9 = getResXmlSerializer();\n        for (ResPackage VAR_10 : VAR_2.listMainPackages()) {\n\n            VAR_11.info(\"Decoding file-resources...\");\n            for (ResResource VAR_12 : VAR_10.listFiles()) {\n                VAR_5.decode(VAR_12, VAR_6, VAR_7, VAR_13);\n            }\n\n            VAR_11.info(\"Decoding values */* XMLs...\");\n            for (ResValuesFile VAR_14 : VAR_10.listValuesFiles()) {\n                generateValuesFile(VAR_14, VAR_7, VAR_9);\n            }\n            generatePublicXml(VAR_10, VAR_7, VAR_9);\n        }\n\n        AndrolibException VAR_15 = VAR_4.getFirstError();\n        if (VAR_15 != null) {\n            throw VAR_15;\n        }\n    }",
    "func_graph_path_before": "iBotPeaches/Apktool/d348c43b24a9de350ff6e5bd610545a10c1fc712/ResourcesDecoder.java/vul/before/0.json",
    "func": "public void decodeResources(File outDir) throws AndrolibException {\n        if (!mApkInfo.hasResources()) {\n            return;\n        }\n\n        mResTable.loadMainPkg(mApkInfo.getApkFile());\n\n        ResStreamDecoderContainer decoders = new ResStreamDecoderContainer();\n        decoders.setDecoder(\"raw\", new ResRawStreamDecoder());\n        decoders.setDecoder(\"9patch\", new Res9patchStreamDecoder());\n\n        AXmlResourceParser axmlParser = new AXmlResourceParser(mResTable);\n        decoders.setDecoder(\"xml\", new XmlPullStreamDecoder(axmlParser, getResXmlSerializer()));\n\n        ResFileDecoder fileDecoder = new ResFileDecoder(decoders);\n        Directory in, out, outRes;\n\n        try {\n            out = new FileDirectory(outDir);\n            in = mApkInfo.getApkFile().getDirectory();\n            outRes = out.createDir(\"res\");\n        } catch (DirectoryException ex) {\n            throw new AndrolibException(ex);\n        }\n\n        ExtMXSerializer xmlSerializer = getResXmlSerializer();\n        for (ResPackage pkg : mResTable.listMainPackages()) {\n\n            LOGGER.info(\"Decoding file-resources...\");\n            for (ResResource res : pkg.listFiles()) {\n                fileDecoder.decode(res, in, outRes, mResFileMapping);\n            }\n\n            LOGGER.info(\"Decoding values */* XMLs...\");\n            for (ResValuesFile valuesFile : pkg.listValuesFiles()) {\n                generateValuesFile(valuesFile, outRes, xmlSerializer);\n            }\n            generatePublicXml(pkg, outRes, xmlSerializer);\n        }\n\n        AndrolibException decodeError = axmlParser.getFirstError();\n        if (decodeError != null) {\n            throw decodeError;\n        }\n    }",
    "abstract_func": "public void decodeResources(File VAR_0) throws AndrolibException {\n        if (!VAR_1.hasResources()) {\n            return;\n        }\n\n        VAR_2.loadMainPkg(VAR_1.getApkFile());\n\n        ResStreamDecoderContainer VAR_3 = new ResStreamDecoderContainer();\n        VAR_3.setDecoder(\"raw\", new ResRawStreamDecoder());\n        VAR_3.setDecoder(\"9patch\", new Res9patchStreamDecoder());\n\n        AXmlResourceParser VAR_4 = new AXmlResourceParser(VAR_2);\n        VAR_3.setDecoder(\"xml\", new XmlPullStreamDecoder(VAR_4, getResXmlSerializer()));\n\n        ResFileDecoder VAR_5 = new ResFileDecoder(VAR_3);\n        Directory VAR_6, VAR_7, VAR_8;\n\n        try {\n            VAR_7 = new FileDirectory(VAR_0);\n            VAR_6 = VAR_1.getApkFile().getDirectory();\n            VAR_8 = VAR_7.createDir(\"res\");\n        } catch (DirectoryException VAR_9) {\n            throw new AndrolibException(VAR_9);\n        }\n\n        ExtMXSerializer VAR_10 = getResXmlSerializer();\n        for (ResPackage VAR_11 : VAR_2.listMainPackages()) {\n\n            VAR_12.info(\"Decoding file-resources...\");\n            for (ResResource VAR_13 : VAR_11.listFiles()) {\n                VAR_5.decode(VAR_13, VAR_6, VAR_8, VAR_14);\n            }\n\n            VAR_12.info(\"Decoding values */* XMLs...\");\n            for (ResValuesFile VAR_15 : VAR_11.listValuesFiles()) {\n                generateValuesFile(VAR_15, VAR_8, VAR_10);\n            }\n            generatePublicXml(VAR_11, VAR_8, VAR_10);\n        }\n\n        AndrolibException VAR_16 = VAR_4.getFirstError();\n        if (VAR_16 != null) {\n            throw VAR_16;\n        }\n    }",
    "func_graph_path": "iBotPeaches/Apktool/d348c43b24a9de350ff6e5bd610545a10c1fc712/ResourcesDecoder.java/vul/after/0.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -13,12 +13,12 @@\n         decoders.setDecoder(\"xml\", new XmlPullStreamDecoder(axmlParser, getResXmlSerializer()));\n \n         ResFileDecoder fileDecoder = new ResFileDecoder(decoders);\n-        Directory in, out;\n+        Directory in, out, outRes;\n \n         try {\n             out = new FileDirectory(outDir);\n             in = mApkInfo.getApkFile().getDirectory();\n-            out = out.createDir(\"res\");\n+            outRes = out.createDir(\"res\");\n         } catch (DirectoryException ex) {\n             throw new AndrolibException(ex);\n         }\n@@ -28,14 +28,14 @@\n \n             LOGGER.info(\"Decoding file-resources...\");\n             for (ResResource res : pkg.listFiles()) {\n-                fileDecoder.decode(res, in, out, mResFileMapping);\n+                fileDecoder.decode(res, in, outRes, mResFileMapping);\n             }\n \n             LOGGER.info(\"Decoding values */* XMLs...\");\n             for (ResValuesFile valuesFile : pkg.listValuesFiles()) {\n-                generateValuesFile(valuesFile, out, xmlSerializer);\n+                generateValuesFile(valuesFile, outRes, xmlSerializer);\n             }\n-            generatePublicXml(pkg, out, xmlSerializer);\n+            generatePublicXml(pkg, outRes, xmlSerializer);\n         }\n \n         AndrolibException decodeError = axmlParser.getFirstError();",
    "diff_line_info": {
        "deleted_lines": [
            "        Directory in, out;",
            "            out = out.createDir(\"res\");",
            "                fileDecoder.decode(res, in, out, mResFileMapping);",
            "                generateValuesFile(valuesFile, out, xmlSerializer);",
            "            generatePublicXml(pkg, out, xmlSerializer);"
        ],
        "added_lines": [
            "        Directory in, out, outRes;",
            "            outRes = out.createDir(\"res\");",
            "                fileDecoder.decode(res, in, outRes, mResFileMapping);",
            "                generateValuesFile(valuesFile, outRes, xmlSerializer);",
            "            generatePublicXml(pkg, outRes, xmlSerializer);"
        ]
    },
    "is_vul": true,
    "pr_url": "https://github.com/iBotPeaches/Apktool/pull/3484",
    "description": "Fixes: [#GHSA-2hqv-2xv4-5h5w](https://github.com/iBotPeaches/Apktool/security/advisories/GHSA-2hqv-2xv4-5h5w)"
}