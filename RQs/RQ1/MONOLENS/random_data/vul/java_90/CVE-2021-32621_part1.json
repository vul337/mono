{
    "cve_id": "CVE-2021-32621",
    "cwe_ids": [
        "CWE-94"
    ],
    "cvss_vector": "AV:N/AC:L/Au:S/C:P/I:P/A:P",
    "cvss_is_v3": false,
    "repo_name": "xwiki/xwiki-platform",
    "commit_msg": "XWIKI-17794: Properly interpret velocity in gadget titles",
    "commit_hash": "bb7068bd911f91e5511f3cfb03276c7ac81100bc",
    "git_url": "https://github.com/xwiki/xwiki-platform/commit/bb7068bd911f91e5511f3cfb03276c7ac81100bc",
    "file_path": "xwiki-platform-core/xwiki-platform-dashboard/xwiki-platform-dashboard-macro/src/main/java/org/xwiki/rendering/internal/macro/dashboard/DefaultGadgetSource.java",
    "func_name": "prepareGadgets",
    "func_before": "private List<Gadget> prepareGadgets(List<BaseObject> objects, Syntax sourceSyntax,\n        MacroTransformationContext context) throws Exception\n    {\n        List<Gadget> gadgets = new ArrayList<>();\n\n        // prepare velocity tools to render title\n        VelocityContext velocityContext = velocityManager.getVelocityContext();\n        // Use the Transformation id as the name passed to the Velocity Engine. This name is used internally\n        // by Velocity as a cache index key for caching macros.\n        String key = context.getTransformationContext().getId();\n        if (key == null) {\n            key = \"unknown namespace\";\n        }\n        VelocityEngine velocityEngine = velocityManager.getVelocityEngine();\n\n        for (BaseObject xObject : objects) {\n            if (xObject != null) {\n                this.progress.startStep(this, \"dashboard.progress.prepareGadget\", \"Prepare gadget [{}:{}]\",\n                    xObject.getDocumentReference(), xObject.getNumber());\n\n                // get the data about the gadget from the object\n                // TODO: filter for dashboard name when that field will be in\n                String title = xObject.getStringValue(\"title\");\n                String content = xObject.getLargeStringValue(\"content\");\n                String position = xObject.getStringValue(\"position\");\n                String id = xObject.getNumber() + \"\";\n\n                // render title with velocity\n                StringWriter writer = new StringWriter();\n                // FIXME: the engine has an issue with $ and # as last character. To test and fix if it happens\n                velocityEngine.evaluate(velocityContext, writer, key, title);\n                String gadgetTitle = writer.toString();\n\n                // parse both the title and content in the syntax of the transformation context\n                List<Block> titleBlocks =\n                    renderGadgetProperty(gadgetTitle, sourceSyntax, xObject.getDocumentReference(),\n                        xObject.getOwnerDocument(), context);\n                List<Block> contentBlocks =\n                    renderGadgetProperty(content, sourceSyntax, xObject.getDocumentReference(),\n                        xObject.getOwnerDocument(), context);\n\n                // create a gadget will all these and add the gadget to the container of gadgets\n                Gadget gadget = new Gadget(id, titleBlocks, contentBlocks, position);\n                gadget.setTitleSource(title);\n                gadgets.add(gadget);\n            } else {\n                this.progress.startStep(this, \"dashboard.progress.skipNullGadget\", \"Null gadget object\");\n            }\n\n            this.progress.endStep(this);\n        }\n\n        return gadgets;\n    }",
    "abstract_func_before": "private List<Gadget> prepareGadgets(List<BaseObject> VAR_0, Syntax VAR_1,\n        MacroTransformationContext VAR_2) throws Exception\n    {\n        List<Gadget> VAR_3 = new ArrayList<>();\n\n        /* COMMENT_0 */\n        VelocityContext VAR_4 = VAR_5.getVelocityContext();\n        /* COMMENT_1 */\n        /* COMMENT_2 */\n        String VAR_6 = VAR_2.getTransformationContext().getId();\n        if (VAR_6 == null) {\n            VAR_6 = \"unknown namespace\";\n        }\n        VelocityEngine VAR_7 = VAR_5.getVelocityEngine();\n\n        for (BaseObject VAR_8 : VAR_0) {\n            if (VAR_8 != null) {\n                this.progress.startStep(this, \"dashboard.progress.prepareGadget\", \"Prepare gadget [{}:{}]\",\n                    VAR_8.getDocumentReference(), VAR_8.getNumber());\n\n                /* COMMENT_3 */\n                /* COMMENT_4 */\n                String VAR_9 = VAR_8.getStringValue(\"title\");\n                String VAR_10 = VAR_8.getLargeStringValue(\"content\");\n                String VAR_11 = VAR_8.getStringValue(\"position\");\n                String VAR_12 = VAR_8.getNumber() + \"\";\n\n                /* COMMENT_5 */\n                StringWriter VAR_13 = new StringWriter();\n                /* COMMENT_6 */\n                VAR_7.evaluate(VAR_4, VAR_13, VAR_6, VAR_9);\n                String VAR_14 = VAR_13.toString();\n\n                /* COMMENT_7 */\n                List<Block> VAR_15 =\n                    renderGadgetProperty(VAR_14, VAR_1, VAR_8.getDocumentReference(),\n                        VAR_8.getOwnerDocument(), VAR_2);\n                List<Block> VAR_16 =\n                    renderGadgetProperty(VAR_10, VAR_1, VAR_8.getDocumentReference(),\n                        VAR_8.getOwnerDocument(), VAR_2);\n\n                /* COMMENT_8 */\n                Gadget VAR_17 = new Gadget(VAR_12, VAR_15, VAR_16, VAR_11);\n                VAR_17.setTitleSource(VAR_9);\n                VAR_3.add(VAR_17);\n            } else {\n                this.progress.startStep(this, \"dashboard.progress.skipNullGadget\", \"Null gadget object\");\n            }\n\n            this.progress.endStep(this);\n        }\n\n        return VAR_3;\n    }",
    "func_graph_path_before": "xwiki/xwiki-platform/bb7068bd911f91e5511f3cfb03276c7ac81100bc/DefaultGadgetSource.java/vul/before/0.json",
    "func": "private List<Gadget> prepareGadgets(List<BaseObject> objects, Syntax sourceSyntax,\n        MacroTransformationContext context) throws Exception\n    {\n        List<Gadget> gadgets = new ArrayList<>();\n\n        // prepare velocity tools to render title\n        VelocityContext velocityContext = velocityManager.getVelocityContext();\n        // Use the Transformation id as the name passed to the Velocity Engine. This name is used internally\n        // by Velocity as a cache index key for caching macros.\n        String key = context.getTransformationContext().getId();\n        if (key == null) {\n            key = \"unknown namespace\";\n        }\n        VelocityEngine velocityEngine = velocityManager.getVelocityEngine();\n\n        for (BaseObject xObject : objects) {\n            if (xObject != null) {\n                this.progress.startStep(this, \"dashboard.progress.prepareGadget\", \"Prepare gadget [{}:{}]\",\n                    xObject.getDocumentReference(), xObject.getNumber());\n\n                // get the data about the gadget from the object\n                // TODO: filter for dashboard name when that field will be in\n                String title = xObject.getStringValue(\"title\");\n                String content = xObject.getLargeStringValue(\"content\");\n                String position = xObject.getStringValue(\"position\");\n                String id = xObject.getNumber() + \"\";\n\n                String gadgetTitle;\n\n                XWikiDocument ownerDocument = xObject.getOwnerDocument();\n                if (this.authorizationManager.hasAccess(Right.SCRIPT, ownerDocument.getAuthorReference(), ownerDocument.getDocumentReference())) {\n                    gadgetTitle =\n                        this.evaluateVelocityTitle(velocityContext, velocityEngine, key, title, ownerDocument);\n                } else {\n                    gadgetTitle = title;\n                }\n\n                // parse both the title and content in the syntax of the transformation context\n                List<Block> titleBlocks =\n                    renderGadgetProperty(gadgetTitle, sourceSyntax, xObject.getDocumentReference(),\n                        ownerDocument, context);\n                List<Block> contentBlocks =\n                    renderGadgetProperty(content, sourceSyntax, xObject.getDocumentReference(),\n                        ownerDocument, context);\n\n                // create a gadget will all these and add the gadget to the container of gadgets\n                Gadget gadget = new Gadget(id, titleBlocks, contentBlocks, position);\n                gadget.setTitleSource(title);\n                gadgets.add(gadget);\n            } else {\n                this.progress.startStep(this, \"dashboard.progress.skipNullGadget\", \"Null gadget object\");\n            }\n\n            this.progress.endStep(this);\n        }\n\n        return gadgets;\n    }",
    "abstract_func": "private List<Gadget> prepareGadgets(List<BaseObject> VAR_0, Syntax VAR_1,\n        MacroTransformationContext VAR_2) throws Exception\n    {\n        List<Gadget> VAR_3 = new ArrayList<>();\n\n        /* COMMENT_0 */\n        VelocityContext VAR_4 = VAR_5.getVelocityContext();\n        /* COMMENT_1 */\n        /* COMMENT_2 */\n        String VAR_6 = VAR_2.getTransformationContext().getId();\n        if (VAR_6 == null) {\n            VAR_6 = \"unknown namespace\";\n        }\n        VelocityEngine VAR_7 = VAR_5.getVelocityEngine();\n\n        for (BaseObject VAR_8 : VAR_0) {\n            if (VAR_8 != null) {\n                this.progress.startStep(this, \"dashboard.progress.prepareGadget\", \"Prepare gadget [{}:{}]\",\n                    VAR_8.getDocumentReference(), VAR_8.getNumber());\n\n                /* COMMENT_3 */\n                /* COMMENT_4 */\n                String VAR_9 = VAR_8.getStringValue(\"title\");\n                String VAR_10 = VAR_8.getLargeStringValue(\"content\");\n                String VAR_11 = VAR_8.getStringValue(\"position\");\n                String VAR_12 = VAR_8.getNumber() + \"\";\n\n                String VAR_13;\n\n                XWikiDocument VAR_14 = VAR_8.getOwnerDocument();\n                if (this.authorizationManager.hasAccess(VAR_15.SCRIPT, VAR_14.getAuthorReference(), VAR_14.getDocumentReference())) {\n                    VAR_13 =\n                        this.evaluateVelocityTitle(VAR_4, VAR_7, VAR_6, VAR_9, VAR_14);\n                } else {\n                    VAR_13 = VAR_9;\n                }\n\n                /* COMMENT_5 */\n                List<Block> VAR_16 =\n                    renderGadgetProperty(VAR_13, VAR_1, VAR_8.getDocumentReference(),\n                        VAR_14, VAR_2);\n                List<Block> VAR_17 =\n                    renderGadgetProperty(VAR_10, VAR_1, VAR_8.getDocumentReference(),\n                        VAR_14, VAR_2);\n\n                /* COMMENT_6 */\n                Gadget VAR_18 = new Gadget(VAR_12, VAR_16, VAR_17, VAR_11);\n                VAR_18.setTitleSource(VAR_9);\n                VAR_3.add(VAR_18);\n            } else {\n                this.progress.startStep(this, \"dashboard.progress.skipNullGadget\", \"Null gadget object\");\n            }\n\n            this.progress.endStep(this);\n        }\n\n        return VAR_3;\n    }",
    "func_graph_path": "xwiki/xwiki-platform/bb7068bd911f91e5511f3cfb03276c7ac81100bc/DefaultGadgetSource.java/vul/after/0.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -25,19 +25,23 @@\n                 String position = xObject.getStringValue(\"position\");\n                 String id = xObject.getNumber() + \"\";\n \n-                // render title with velocity\n-                StringWriter writer = new StringWriter();\n-                // FIXME: the engine has an issue with $ and # as last character. To test and fix if it happens\n-                velocityEngine.evaluate(velocityContext, writer, key, title);\n-                String gadgetTitle = writer.toString();\n+                String gadgetTitle;\n+\n+                XWikiDocument ownerDocument = xObject.getOwnerDocument();\n+                if (this.authorizationManager.hasAccess(Right.SCRIPT, ownerDocument.getAuthorReference(), ownerDocument.getDocumentReference())) {\n+                    gadgetTitle =\n+                        this.evaluateVelocityTitle(velocityContext, velocityEngine, key, title, ownerDocument);\n+                } else {\n+                    gadgetTitle = title;\n+                }\n \n                 // parse both the title and content in the syntax of the transformation context\n                 List<Block> titleBlocks =\n                     renderGadgetProperty(gadgetTitle, sourceSyntax, xObject.getDocumentReference(),\n-                        xObject.getOwnerDocument(), context);\n+                        ownerDocument, context);\n                 List<Block> contentBlocks =\n                     renderGadgetProperty(content, sourceSyntax, xObject.getDocumentReference(),\n-                        xObject.getOwnerDocument(), context);\n+                        ownerDocument, context);\n \n                 // create a gadget will all these and add the gadget to the container of gadgets\n                 Gadget gadget = new Gadget(id, titleBlocks, contentBlocks, position);",
    "diff_line_info": {
        "deleted_lines": [
            "                // render title with velocity",
            "                StringWriter writer = new StringWriter();",
            "                // FIXME: the engine has an issue with $ and # as last character. To test and fix if it happens",
            "                velocityEngine.evaluate(velocityContext, writer, key, title);",
            "                String gadgetTitle = writer.toString();",
            "                        xObject.getOwnerDocument(), context);",
            "                        xObject.getOwnerDocument(), context);"
        ],
        "added_lines": [
            "                String gadgetTitle;",
            "",
            "                XWikiDocument ownerDocument = xObject.getOwnerDocument();",
            "                if (this.authorizationManager.hasAccess(Right.SCRIPT, ownerDocument.getAuthorReference(), ownerDocument.getDocumentReference())) {",
            "                    gadgetTitle =",
            "                        this.evaluateVelocityTitle(velocityContext, velocityEngine, key, title, ownerDocument);",
            "                } else {",
            "                    gadgetTitle = title;",
            "                }",
            "                        ownerDocument, context);",
            "                        ownerDocument, context);"
        ]
    },
    "is_vul": true,
    "pr_url": null,
    "description": "no more info"
}