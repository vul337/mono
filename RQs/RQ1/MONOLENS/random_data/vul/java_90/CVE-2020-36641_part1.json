{
    "cve_id": "CVE-2020-36641",
    "cwe_ids": [
        "CWE-611"
    ],
    "cvss_vector": "AV:A/AC:M/Au:S/C:P/I:P/A:P",
    "cvss_is_v3": false,
    "repo_name": "gturri/aXMLRPC",
    "commit_msg": "Fix CWE-611\n\nThis commit fixes the issue described on\nhttps://cwe.mitre.org/data/definitions/611.html\n\nNb: it's mostly the same as ad6615b3ec41353e614f6ea5fdd5b046442a832b but\nwith an added reference to org.apache.xerces in order to avoid the\nAbstractMethodError that was experienced by users back then.\n\nNb2: writting down the payload with which I tested this patch, in case I\nneed to run this test again in the future:\n\n    <?xml version=\"1.0\"?>\n    <!DOCTYPE replace [<!ENTITY ent SYSTEM \"http://localhost/malware\"> ]>\n    <methodResponse>\n        <params>\n            <param>\n               <value><string>&ent;</string></value>\n            </param>\n        </params>\n    </methodResponse>",
    "commit_hash": "456752ebc1ef4c0db980cb5b01a0b3cd0a9e0bae",
    "git_url": "https://github.com/gturri/aXMLRPC/commit/456752ebc1ef4c0db980cb5b01a0b3cd0a9e0bae",
    "file_path": "src/main/java/de/timroes/axmlrpc/ResponseParser.java",
    "func_name": "parse",
    "func_before": "public Object parse(SerializerHandler serializerHandler, InputStream response, boolean debugMode) throws XMLRPCException {\n\n\t\ttry {\n\n\t\t\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n\t\t\tfactory.setNamespaceAware(true);\n\t\t\tDocumentBuilder builder = factory.newDocumentBuilder();\n\t\t\tDocument dom = builder.parse(response);\n\t\t\tif (debugMode ){\n\t\t\t\tprintDocument(dom, System.out);\n\t\t\t}\n\t\t\tElement e = dom.getDocumentElement();\n\n\n\t\t\t// Check for root tag\n\t\t\tif(!e.getNodeName().equals(XMLRPCClient.METHOD_RESPONSE)) {\n\t\t\t\tthrow new XMLRPCException(\"MethodResponse root tag is missing.\");\n\t\t\t}\n\n\t\t\te = XMLUtil.getOnlyChildElement(e.getChildNodes());\n\n\t\t\tif(e.getNodeName().equals(XMLRPCClient.PARAMS)) {\n\n\t\t\t\te = XMLUtil.getOnlyChildElement(e.getChildNodes());\n\n\t\t\t\tif(!e.getNodeName().equals(XMLRPCClient.PARAM)) {\n\t\t\t\t\tthrow new XMLRPCException(\"The params tag must contain a param tag.\");\n\t\t\t\t}\n\n\t\t\t\treturn getReturnValueFromElement(serializerHandler, e);\n\n\t\t\t} else if(e.getNodeName().equals(XMLRPCClient.FAULT)) {\n\n\t\t\t\t@SuppressWarnings(\"unchecked\")\n\t\t\t\tMap<String,Object> o = (Map<String,Object>)getReturnValueFromElement(serializerHandler, e);\n\n\t\t\t\tthrow new XMLRPCServerException((String)o.get(FAULT_STRING), (Integer)o.get(FAULT_CODE));\n\n\t\t\t}\n\n\t\t\tthrow new XMLRPCException(\"The methodResponse tag must contain a fault or params tag.\");\n\n\t\t} catch(XMLRPCServerException e) {\n\t\t\tthrow e;\n\t\t} catch (Exception ex) {\n\t\t\tthrow new XMLRPCException(\"Error getting result from server.\", ex);\n\t\t}\n\n\t}",
    "abstract_func_before": "public Object parse(SerializerHandler VAR_0, InputStream VAR_1, boolean VAR_2) throws XMLRPCException {\n\n\t\ttry {\n\n\t\t\tDocumentBuilderFactory VAR_3 = VAR_4.newInstance();\n\t\t\tVAR_3.setNamespaceAware(true);\n\t\t\tDocumentBuilder VAR_5 = VAR_3.newDocumentBuilder();\n\t\t\tDocument VAR_6 = VAR_5.parse(VAR_1);\n\t\t\tif (VAR_2 ){\n\t\t\t\tprintDocument(VAR_6, VAR_7.out);\n\t\t\t}\n\t\t\tElement VAR_8 = VAR_6.getDocumentElement();\n\n\n\t\t\t/* COMMENT_0 */\n\t\t\tif(!VAR_8.getNodeName().equals(VAR_9.METHOD_RESPONSE)) {\n\t\t\t\tthrow new XMLRPCException(\"MethodResponse root tag is missing.\");\n\t\t\t}\n\n\t\t\tVAR_8 = VAR_10.getOnlyChildElement(VAR_8.getChildNodes());\n\n\t\t\tif(VAR_8.getNodeName().equals(VAR_9.PARAMS)) {\n\n\t\t\t\tVAR_8 = VAR_10.getOnlyChildElement(VAR_8.getChildNodes());\n\n\t\t\t\tif(!VAR_8.getNodeName().equals(VAR_9.PARAM)) {\n\t\t\t\t\tthrow new XMLRPCException(\"The params tag must contain a param tag.\");\n\t\t\t\t}\n\n\t\t\t\treturn getReturnValueFromElement(VAR_0, VAR_8);\n\n\t\t\t} else if(VAR_8.getNodeName().equals(VAR_9.FAULT)) {\n\n\t\t\t\t@SuppressWarnings(\"unchecked\")\n\t\t\t\tMap<String,Object> VAR_11 = (Map<String,Object>)getReturnValueFromElement(VAR_0, VAR_8);\n\n\t\t\t\tthrow new XMLRPCServerException((String)VAR_11.get(VAR_12), (Integer)VAR_11.get(VAR_13));\n\n\t\t\t}\n\n\t\t\tthrow new XMLRPCException(\"The methodResponse tag must contain a fault or params tag.\");\n\n\t\t} catch(XMLRPCServerException VAR_8) {\n\t\t\tthrow VAR_8;\n\t\t} catch (Exception VAR_14) {\n\t\t\tthrow new XMLRPCException(\"Error getting result from server.\", VAR_14);\n\t\t}\n\n\t}",
    "func_graph_path_before": "gturri/aXMLRPC/456752ebc1ef4c0db980cb5b01a0b3cd0a9e0bae/ResponseParser.java/vul/before/0.json",
    "func": "public Object parse(SerializerHandler serializerHandler, InputStream response, boolean debugMode) throws XMLRPCException {\n\n\t\ttry {\n\t\t\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n\n\t\t\t// Ensure the xml parser won't allow exploitation of the vuln CWE-611\n\t\t\t// (described on https://cwe.mitre.org/data/definitions/611.html )\n\t\t\tfactory.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n\t\t\tfactory.setExpandEntityReferences(false);\n\t\t\tfactory.setNamespaceAware(true);\n\t\t\tfactory.setXIncludeAware(false);\n\t\t\tfactory.setExpandEntityReferences(false);\n\t\t\t// End of the configuration of the parser for CWE-611\n\n\t\t\tDocumentBuilder builder = factory.newDocumentBuilder();\n\t\t\tDocument dom = builder.parse(response);\n\t\t\tif (debugMode ){\n\t\t\t\tprintDocument(dom, System.out);\n\t\t\t}\n\t\t\tElement e = dom.getDocumentElement();\n\n\n\t\t\t// Check for root tag\n\t\t\tif(!e.getNodeName().equals(XMLRPCClient.METHOD_RESPONSE)) {\n\t\t\t\tthrow new XMLRPCException(\"MethodResponse root tag is missing.\");\n\t\t\t}\n\n\t\t\te = XMLUtil.getOnlyChildElement(e.getChildNodes());\n\n\t\t\tif(e.getNodeName().equals(XMLRPCClient.PARAMS)) {\n\n\t\t\t\te = XMLUtil.getOnlyChildElement(e.getChildNodes());\n\n\t\t\t\tif(!e.getNodeName().equals(XMLRPCClient.PARAM)) {\n\t\t\t\t\tthrow new XMLRPCException(\"The params tag must contain a param tag.\");\n\t\t\t\t}\n\n\t\t\t\treturn getReturnValueFromElement(serializerHandler, e);\n\n\t\t\t} else if(e.getNodeName().equals(XMLRPCClient.FAULT)) {\n\n\t\t\t\t@SuppressWarnings(\"unchecked\")\n\t\t\t\tMap<String,Object> o = (Map<String,Object>)getReturnValueFromElement(serializerHandler, e);\n\n\t\t\t\tthrow new XMLRPCServerException((String)o.get(FAULT_STRING), (Integer)o.get(FAULT_CODE));\n\n\t\t\t}\n\n\t\t\tthrow new XMLRPCException(\"The methodResponse tag must contain a fault or params tag.\");\n\n\t\t} catch(XMLRPCServerException e) {\n\t\t\tthrow e;\n\t\t} catch (Exception ex) {\n\t\t\tthrow new XMLRPCException(\"Error getting result from server.\", ex);\n\t\t}\n\n\t}",
    "abstract_func": "public Object parse(SerializerHandler VAR_0, InputStream VAR_1, boolean VAR_2) throws XMLRPCException {\n\n\t\ttry {\n\t\t\tDocumentBuilderFactory VAR_3 = VAR_4.newInstance();\n\n\t\t\t/* COMMENT_0 */\n\t\t\t/* COMMENT_1 */\n\t\t\tVAR_3.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n\t\t\tVAR_3.setExpandEntityReferences(false);\n\t\t\tVAR_3.setNamespaceAware(true);\n\t\t\tVAR_3.setXIncludeAware(false);\n\t\t\tVAR_3.setExpandEntityReferences(false);\n\t\t\t/* COMMENT_2 */\n\n\t\t\tDocumentBuilder VAR_5 = VAR_3.newDocumentBuilder();\n\t\t\tDocument VAR_6 = VAR_5.parse(VAR_1);\n\t\t\tif (VAR_2 ){\n\t\t\t\tprintDocument(VAR_6, VAR_7.out);\n\t\t\t}\n\t\t\tElement VAR_8 = VAR_6.getDocumentElement();\n\n\n\t\t\t/* COMMENT_3 */\n\t\t\tif(!VAR_8.getNodeName().equals(VAR_9.METHOD_RESPONSE)) {\n\t\t\t\tthrow new XMLRPCException(\"MethodResponse root tag is missing.\");\n\t\t\t}\n\n\t\t\tVAR_8 = VAR_10.getOnlyChildElement(VAR_8.getChildNodes());\n\n\t\t\tif(VAR_8.getNodeName().equals(VAR_9.PARAMS)) {\n\n\t\t\t\tVAR_8 = VAR_10.getOnlyChildElement(VAR_8.getChildNodes());\n\n\t\t\t\tif(!VAR_8.getNodeName().equals(VAR_9.PARAM)) {\n\t\t\t\t\tthrow new XMLRPCException(\"The params tag must contain a param tag.\");\n\t\t\t\t}\n\n\t\t\t\treturn getReturnValueFromElement(VAR_0, VAR_8);\n\n\t\t\t} else if(VAR_8.getNodeName().equals(VAR_9.FAULT)) {\n\n\t\t\t\t@SuppressWarnings(\"unchecked\")\n\t\t\t\tMap<String,Object> VAR_11 = (Map<String,Object>)getReturnValueFromElement(VAR_0, VAR_8);\n\n\t\t\t\tthrow new XMLRPCServerException((String)VAR_11.get(VAR_12), (Integer)VAR_11.get(VAR_13));\n\n\t\t\t}\n\n\t\t\tthrow new XMLRPCException(\"The methodResponse tag must contain a fault or params tag.\");\n\n\t\t} catch(XMLRPCServerException VAR_8) {\n\t\t\tthrow VAR_8;\n\t\t} catch (Exception VAR_14) {\n\t\t\tthrow new XMLRPCException(\"Error getting result from server.\", VAR_14);\n\t\t}\n\n\t}",
    "func_graph_path": "gturri/aXMLRPC/456752ebc1ef4c0db980cb5b01a0b3cd0a9e0bae/ResponseParser.java/vul/after/0.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -1,9 +1,17 @@\n public Object parse(SerializerHandler serializerHandler, InputStream response, boolean debugMode) throws XMLRPCException {\n \n \t\ttry {\n+\t\t\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n \n-\t\t\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n+\t\t\t// Ensure the xml parser won't allow exploitation of the vuln CWE-611\n+\t\t\t// (described on https://cwe.mitre.org/data/definitions/611.html )\n+\t\t\tfactory.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n+\t\t\tfactory.setExpandEntityReferences(false);\n \t\t\tfactory.setNamespaceAware(true);\n+\t\t\tfactory.setXIncludeAware(false);\n+\t\t\tfactory.setExpandEntityReferences(false);\n+\t\t\t// End of the configuration of the parser for CWE-611\n+\n \t\t\tDocumentBuilder builder = factory.newDocumentBuilder();\n \t\t\tDocument dom = builder.parse(response);\n \t\t\tif (debugMode ){",
    "diff_line_info": {
        "deleted_lines": [
            "\t\t\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();"
        ],
        "added_lines": [
            "\t\t\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();",
            "\t\t\t// Ensure the xml parser won't allow exploitation of the vuln CWE-611",
            "\t\t\t// (described on https://cwe.mitre.org/data/definitions/611.html )",
            "\t\t\tfactory.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);",
            "\t\t\tfactory.setExpandEntityReferences(false);",
            "\t\t\tfactory.setXIncludeAware(false);",
            "\t\t\tfactory.setExpandEntityReferences(false);",
            "\t\t\t// End of the configuration of the parser for CWE-611",
            ""
        ]
    },
    "is_vul": true,
    "pr_url": null,
    "description": "no more info"
}