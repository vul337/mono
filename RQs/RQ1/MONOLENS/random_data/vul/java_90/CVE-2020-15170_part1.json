{
    "cve_id": "CVE-2020-15170",
    "cwe_ids": [
        "CWE-20"
    ],
    "cvss_vector": "AV:N/AC:M/Au:N/C:P/I:P/A:P",
    "cvss_is_v3": false,
    "repo_name": "apolloconfig/apollo",
    "commit_msg": "add access control support for admin service",
    "commit_hash": "ae9ba6cfd32ed80469f162e5e3583e2477862ddf",
    "git_url": "https://github.com/apolloconfig/apollo/commit/ae9ba6cfd32ed80469f162e5e3583e2477862ddf",
    "file_path": "apollo-configservice/src/main/java/com/ctrip/framework/apollo/configservice/filter/ClientAuthenticationFilter.java",
    "func_name": "doFilter",
    "func_before": "@Override\n  public void doFilter(ServletRequest req, ServletResponse resp, FilterChain chain)\n      throws IOException, ServletException {\n    HttpServletRequest request = (HttpServletRequest) req;\n    HttpServletResponse response = (HttpServletResponse) resp;\n\n    String appId = accessKeyUtil.extractAppIdFromRequest(request);\n    if (StringUtils.isBlank(appId)) {\n      response.sendError(HttpServletResponse.SC_BAD_REQUEST, \"InvalidAppId\");\n      return;\n    }\n\n    List<String> availableSecrets = accessKeyUtil.findAvailableSecret(appId);\n    if (!CollectionUtils.isEmpty(availableSecrets)) {\n      String timestamp = request.getHeader(Signature.HTTP_HEADER_TIMESTAMP);\n      String authorization = request.getHeader(Signature.HTTP_HEADER_AUTHORIZATION);\n\n      // check timestamp, valid within 1 minute\n      if (!checkTimestamp(timestamp)) {\n        logger.warn(\"Invalid timestamp. appId={},timestamp={}\", appId, timestamp);\n        response.sendError(HttpServletResponse.SC_UNAUTHORIZED, \"RequestTimeTooSkewed\");\n        return;\n      }\n\n      // check signature\n      String path = request.getServletPath();\n      String query = request.getQueryString();\n      if (!checkAuthorization(authorization, availableSecrets, timestamp, path, query)) {\n        logger.warn(\"Invalid authorization. appId={},authorization={}\", appId, authorization);\n        response.sendError(HttpServletResponse.SC_UNAUTHORIZED, \"Unauthorized\");\n        return;\n      }\n    }\n\n    chain.doFilter(request, response);\n  }",
    "abstract_func_before": "@Override\n  public void doFilter(ServletRequest VAR_0, ServletResponse VAR_1, FilterChain VAR_2)\n      throws IOException, ServletException {\n    HttpServletRequest VAR_3 = (HttpServletRequest) VAR_0;\n    HttpServletResponse VAR_4 = (HttpServletResponse) VAR_1;\n\n    String VAR_5 = VAR_6.extractAppIdFromRequest(VAR_3);\n    if (VAR_7.isBlank(VAR_5)) {\n      VAR_4.sendError(VAR_8.SC_BAD_REQUEST, \"InvalidAppId\");\n      return;\n    }\n\n    List<String> VAR_9 = VAR_6.findAvailableSecret(VAR_5);\n    if (!VAR_10.isEmpty(VAR_9)) {\n      String VAR_11 = VAR_3.getHeader(VAR_12.HTTP_HEADER_TIMESTAMP);\n      String VAR_13 = VAR_3.getHeader(VAR_12.HTTP_HEADER_AUTHORIZATION);\n\n      /* COMMENT_0 */\n      if (!checkTimestamp(VAR_11)) {\n        VAR_14.warn(\"Invalid timestamp. appId={},timestamp={}\", VAR_5, VAR_11);\n        VAR_4.sendError(VAR_8.SC_UNAUTHORIZED, \"RequestTimeTooSkewed\");\n        return;\n      }\n\n      /* COMMENT_1 */\n      String VAR_15 = VAR_3.getServletPath();\n      String VAR_16 = VAR_3.getQueryString();\n      if (!checkAuthorization(VAR_13, VAR_9, VAR_11, VAR_15, VAR_16)) {\n        VAR_14.warn(\"Invalid authorization. appId={},authorization={}\", VAR_5, VAR_13);\n        VAR_4.sendError(VAR_8.SC_UNAUTHORIZED, \"Unauthorized\");\n        return;\n      }\n    }\n\n    VAR_2.doFilter(VAR_3, VAR_4);\n  }",
    "func_graph_path_before": "apolloconfig/apollo/ae9ba6cfd32ed80469f162e5e3583e2477862ddf/ClientAuthenticationFilter.java/vul/before/0.json",
    "func": "@Override\n  public void doFilter(ServletRequest req, ServletResponse resp, FilterChain chain)\n      throws IOException, ServletException {\n    HttpServletRequest request = (HttpServletRequest) req;\n    HttpServletResponse response = (HttpServletResponse) resp;\n\n    String appId = accessKeyUtil.extractAppIdFromRequest(request);\n    if (StringUtils.isBlank(appId)) {\n      response.sendError(HttpServletResponse.SC_BAD_REQUEST, \"InvalidAppId\");\n      return;\n    }\n\n    List<String> availableSecrets = accessKeyUtil.findAvailableSecret(appId);\n    if (!CollectionUtils.isEmpty(availableSecrets)) {\n      String timestamp = request.getHeader(Signature.HTTP_HEADER_TIMESTAMP);\n      String authorization = request.getHeader(HttpHeaders.AUTHORIZATION);\n\n      // check timestamp, valid within 1 minute\n      if (!checkTimestamp(timestamp)) {\n        logger.warn(\"Invalid timestamp. appId={},timestamp={}\", appId, timestamp);\n        response.sendError(HttpServletResponse.SC_UNAUTHORIZED, \"RequestTimeTooSkewed\");\n        return;\n      }\n\n      // check signature\n      String path = request.getServletPath();\n      String query = request.getQueryString();\n      if (!checkAuthorization(authorization, availableSecrets, timestamp, path, query)) {\n        logger.warn(\"Invalid authorization. appId={},authorization={}\", appId, authorization);\n        response.sendError(HttpServletResponse.SC_UNAUTHORIZED, \"Unauthorized\");\n        return;\n      }\n    }\n\n    chain.doFilter(request, response);\n  }",
    "abstract_func": "@Override\n  public void doFilter(ServletRequest VAR_0, ServletResponse VAR_1, FilterChain VAR_2)\n      throws IOException, ServletException {\n    HttpServletRequest VAR_3 = (HttpServletRequest) VAR_0;\n    HttpServletResponse VAR_4 = (HttpServletResponse) VAR_1;\n\n    String VAR_5 = VAR_6.extractAppIdFromRequest(VAR_3);\n    if (VAR_7.isBlank(VAR_5)) {\n      VAR_4.sendError(VAR_8.SC_BAD_REQUEST, \"InvalidAppId\");\n      return;\n    }\n\n    List<String> VAR_9 = VAR_6.findAvailableSecret(VAR_5);\n    if (!VAR_10.isEmpty(VAR_9)) {\n      String VAR_11 = VAR_3.getHeader(VAR_12.HTTP_HEADER_TIMESTAMP);\n      String VAR_13 = VAR_3.getHeader(VAR_14.AUTHORIZATION);\n\n      /* COMMENT_0 */\n      if (!checkTimestamp(VAR_11)) {\n        VAR_15.warn(\"Invalid timestamp. appId={},timestamp={}\", VAR_5, VAR_11);\n        VAR_4.sendError(VAR_8.SC_UNAUTHORIZED, \"RequestTimeTooSkewed\");\n        return;\n      }\n\n      /* COMMENT_1 */\n      String VAR_16 = VAR_3.getServletPath();\n      String VAR_17 = VAR_3.getQueryString();\n      if (!checkAuthorization(VAR_13, VAR_9, VAR_11, VAR_16, VAR_17)) {\n        VAR_15.warn(\"Invalid authorization. appId={},authorization={}\", VAR_5, VAR_13);\n        VAR_4.sendError(VAR_8.SC_UNAUTHORIZED, \"Unauthorized\");\n        return;\n      }\n    }\n\n    VAR_2.doFilter(VAR_3, VAR_4);\n  }",
    "func_graph_path": "apolloconfig/apollo/ae9ba6cfd32ed80469f162e5e3583e2477862ddf/ClientAuthenticationFilter.java/vul/after/0.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -13,7 +13,7 @@\n     List<String> availableSecrets = accessKeyUtil.findAvailableSecret(appId);\n     if (!CollectionUtils.isEmpty(availableSecrets)) {\n       String timestamp = request.getHeader(Signature.HTTP_HEADER_TIMESTAMP);\n-      String authorization = request.getHeader(Signature.HTTP_HEADER_AUTHORIZATION);\n+      String authorization = request.getHeader(HttpHeaders.AUTHORIZATION);\n \n       // check timestamp, valid within 1 minute\n       if (!checkTimestamp(timestamp)) {",
    "diff_line_info": {
        "deleted_lines": [
            "      String authorization = request.getHeader(Signature.HTTP_HEADER_AUTHORIZATION);"
        ],
        "added_lines": [
            "      String authorization = request.getHeader(HttpHeaders.AUTHORIZATION);"
        ]
    },
    "is_vul": true,
    "pr_url": "https://github.com/apolloconfig/apollo/pull/3233",
    "description": "## What's the purpose of this PR\r\n\r\nAdd access control support for admin service so that only trusted apollo portal could access admin service.\r\n\r\n### Instructions\r\n\r\n#### Configurations for admin service\r\n\r\nThe following configurations can be set in ApolloConfigDB.ServerConfig.\r\n\r\n* admin-service.access.control.enabled\r\n\r\nSpecify whether to enable access control for admin service or not. If set to true, then portal must pass the correct token when calling admin service.\r\n\r\n> Example: \r\nadmin-service.access.control.enabled=true\r\n\r\n* admin-service.access.tokens\r\n\r\nSpecify the tokens allowed to call admin service, multiple tokens should be separated by `,`.\r\nIf this configuration is empty, then the access control won't take effect.\r\n\r\n> Example: \r\nadmin-service.access.tokens=098f6bcd4621d373cade4e832627b4f6\r\nadmin-service.access.tokens=098f6bcd4621d373cade4e832627b4f6,ad0234829205b9033196ba818f7a872b\r\n\r\n#### Configurations for portal\r\n\r\nThe following configurations can be set in ApolloPortalDB.ServerConfig.\r\n\r\n* admin-service.access.tokens\r\n\r\nSpecify the access tokens for admin service in different environments in json format, e.g.\r\n\r\n```json\r\n{\r\n    \"dev\" : \"098f6bcd4621d373cade4e832627b4f6\",\r\n    \"pro\" : \"ad0234829205b9033196ba818f7a872b\"\r\n}\r\n```\r\n\r\nFollow this checklist to help us incorporate your contribution quickly and easily:\r\n\r\n- [x] Read the [Contributing Guide](https://github.com/ctripcorp/apollo/blob/master/CONTRIBUTING.md) before making this pull request.\r\n- [x] Write a pull request description that is detailed enough to understand what the pull request does, how, and why.\r\n- [x] Write necessary unit tests to verify the code.\r\n- [x] Run `mvn clean test` to make sure this pull request doesn't break anything.\r\n"
}