{
    "cve_id": "CVE-2021-21290",
    "cwe_ids": [
        "CWE-378",
        "CWE-379"
    ],
    "cvss_vector": "AV:L/AC:M/Au:N/C:P/I:N/A:N",
    "cvss_is_v3": false,
    "repo_name": "netty",
    "commit_msg": "Use Files.createTempFile(...) to ensure the file is created with proper permissions\n\nMotivation:\n\nFile.createTempFile(String, String)` will create a temporary file in the system temporary directory if the 'java.io.tmpdir'. The permissions on that file utilize the umask. In a majority of cases, this means that the file that java creates has the permissions: `-rw-r--r--`, thus, any other local user on that system can read the contents of that file.\nThis can be a security concern if any sensitive data is stored in this file.\n\nThis was reported by Jonathan Leitschuh <jonathan.leitschuh@gmail.com> as a security problem.\n\nModifications:\n\nUse Files.createTempFile(...) which will use safe-defaults when running on java 7 and later. If running on java 6 there isnt much we can do, which is fair enough as java 6 shouldnt be considered \"safe\" anyway.\n\nResult:\n\nCreate temporary files with sane permissions by default.",
    "commit_hash": "c735357bf29d07856ad171c6611a2e1a0e0000ec",
    "git_url": "https://github.com/netty/netty/commit/c735357bf29d07856ad171c6611a2e1a0e0000ec",
    "file_path": "handler/src/main/java/io/netty/handler/ssl/util/SelfSignedCertificate.java",
    "func_name": "newSelfSignedCertificate",
    "func_before": "static String[] newSelfSignedCertificate(\n            String fqdn, PrivateKey key, X509Certificate cert) throws IOException, CertificateEncodingException {\n        // Encode the private key into a file.\n        ByteBuf wrappedBuf = Unpooled.wrappedBuffer(key.getEncoded());\n        ByteBuf encodedBuf;\n        final String keyText;\n        try {\n            encodedBuf = Base64.encode(wrappedBuf, true);\n            try {\n                keyText = \"-----BEGIN PRIVATE KEY-----\\n\" +\n                        encodedBuf.toString(CharsetUtil.US_ASCII) +\n                        \"\\n-----END PRIVATE KEY-----\\n\";\n            } finally {\n                encodedBuf.release();\n            }\n        } finally {\n            wrappedBuf.release();\n        }\n\n        File keyFile = File.createTempFile(\"keyutil_\" + fqdn + '_', \".key\");\n        keyFile.deleteOnExit();\n\n        OutputStream keyOut = new FileOutputStream(keyFile);\n        try {\n            keyOut.write(keyText.getBytes(CharsetUtil.US_ASCII));\n            keyOut.close();\n            keyOut = null;\n        } finally {\n            if (keyOut != null) {\n                safeClose(keyFile, keyOut);\n                safeDelete(keyFile);\n            }\n        }\n\n        wrappedBuf = Unpooled.wrappedBuffer(cert.getEncoded());\n        final String certText;\n        try {\n            encodedBuf = Base64.encode(wrappedBuf, true);\n            try {\n                // Encode the certificate into a CRT file.\n                certText = \"-----BEGIN CERTIFICATE-----\\n\" +\n                        encodedBuf.toString(CharsetUtil.US_ASCII) +\n                        \"\\n-----END CERTIFICATE-----\\n\";\n            } finally {\n                encodedBuf.release();\n            }\n        } finally {\n            wrappedBuf.release();\n        }\n\n        File certFile = File.createTempFile(\"keyutil_\" + fqdn + '_', \".crt\");\n        certFile.deleteOnExit();\n\n        OutputStream certOut = new FileOutputStream(certFile);\n        try {\n            certOut.write(certText.getBytes(CharsetUtil.US_ASCII));\n            certOut.close();\n            certOut = null;\n        } finally {\n            if (certOut != null) {\n                safeClose(certFile, certOut);\n                safeDelete(certFile);\n                safeDelete(keyFile);\n            }\n        }\n\n        return new String[] { certFile.getPath(), keyFile.getPath() };\n    }",
    "abstract_func_before": "static String[] newSelfSignedCertificate(\n            String VAR_0, PrivateKey VAR_1, X509Certificate VAR_2) throws IOException, CertificateEncodingException {\n        /* COMMENT_0 */\n        ByteBuf VAR_3 = VAR_4.wrappedBuffer(VAR_1.getEncoded());\n        ByteBuf VAR_5;\n        final String VAR_6;\n        try {\n            VAR_5 = VAR_7.encode(VAR_3, true);\n            try {\n                VAR_6 = \"-----BEGIN PRIVATE KEY-----\\n\" +\n                        VAR_5.toString(VAR_8.US_ASCII) +\n                        \"\\n-----END PRIVATE KEY-----\\n\";\n            } finally {\n                VAR_5.release();\n            }\n        } finally {\n            VAR_3.release();\n        }\n\n        File VAR_9 = VAR_10.createTempFile(\"keyutil_\" + VAR_0 + '_', \".key\");\n        VAR_9.deleteOnExit();\n\n        OutputStream VAR_11 = new FileOutputStream(VAR_9);\n        try {\n            VAR_11.write(VAR_6.getBytes(VAR_8.US_ASCII));\n            VAR_11.close();\n            VAR_11 = null;\n        } finally {\n            if (VAR_11 != null) {\n                safeClose(VAR_9, VAR_11);\n                safeDelete(VAR_9);\n            }\n        }\n\n        VAR_3 = VAR_4.wrappedBuffer(VAR_2.getEncoded());\n        final String VAR_12;\n        try {\n            VAR_5 = VAR_7.encode(VAR_3, true);\n            try {\n                /* COMMENT_1 */\n                VAR_12 = \"-----BEGIN CERTIFICATE-----\\n\" +\n                        VAR_5.toString(VAR_8.US_ASCII) +\n                        \"\\n-----END CERTIFICATE-----\\n\";\n            } finally {\n                VAR_5.release();\n            }\n        } finally {\n            VAR_3.release();\n        }\n\n        File VAR_13 = VAR_10.createTempFile(\"keyutil_\" + VAR_0 + '_', \".crt\");\n        VAR_13.deleteOnExit();\n\n        OutputStream VAR_14 = new FileOutputStream(VAR_13);\n        try {\n            VAR_14.write(VAR_12.getBytes(VAR_8.US_ASCII));\n            VAR_14.close();\n            VAR_14 = null;\n        } finally {\n            if (VAR_14 != null) {\n                safeClose(VAR_13, VAR_14);\n                safeDelete(VAR_13);\n                safeDelete(VAR_9);\n            }\n        }\n\n        return new String[] { VAR_13.getPath(), VAR_9.getPath() };\n    }",
    "func_graph_path_before": "netty/c735357bf29d07856ad171c6611a2e1a0e0000ec/SelfSignedCertificate.java/vul/before/0.json",
    "func": "static String[] newSelfSignedCertificate(\n            String fqdn, PrivateKey key, X509Certificate cert) throws IOException, CertificateEncodingException {\n        // Encode the private key into a file.\n        ByteBuf wrappedBuf = Unpooled.wrappedBuffer(key.getEncoded());\n        ByteBuf encodedBuf;\n        final String keyText;\n        try {\n            encodedBuf = Base64.encode(wrappedBuf, true);\n            try {\n                keyText = \"-----BEGIN PRIVATE KEY-----\\n\" +\n                        encodedBuf.toString(CharsetUtil.US_ASCII) +\n                        \"\\n-----END PRIVATE KEY-----\\n\";\n            } finally {\n                encodedBuf.release();\n            }\n        } finally {\n            wrappedBuf.release();\n        }\n\n        File keyFile = PlatformDependent.createTempFile(\"keyutil_\" + fqdn + '_', \".key\", null);\n        keyFile.deleteOnExit();\n\n        OutputStream keyOut = new FileOutputStream(keyFile);\n        try {\n            keyOut.write(keyText.getBytes(CharsetUtil.US_ASCII));\n            keyOut.close();\n            keyOut = null;\n        } finally {\n            if (keyOut != null) {\n                safeClose(keyFile, keyOut);\n                safeDelete(keyFile);\n            }\n        }\n\n        wrappedBuf = Unpooled.wrappedBuffer(cert.getEncoded());\n        final String certText;\n        try {\n            encodedBuf = Base64.encode(wrappedBuf, true);\n            try {\n                // Encode the certificate into a CRT file.\n                certText = \"-----BEGIN CERTIFICATE-----\\n\" +\n                        encodedBuf.toString(CharsetUtil.US_ASCII) +\n                        \"\\n-----END CERTIFICATE-----\\n\";\n            } finally {\n                encodedBuf.release();\n            }\n        } finally {\n            wrappedBuf.release();\n        }\n\n        File certFile = PlatformDependent.createTempFile(\"keyutil_\" + fqdn + '_', \".crt\", null);\n        certFile.deleteOnExit();\n\n        OutputStream certOut = new FileOutputStream(certFile);\n        try {\n            certOut.write(certText.getBytes(CharsetUtil.US_ASCII));\n            certOut.close();\n            certOut = null;\n        } finally {\n            if (certOut != null) {\n                safeClose(certFile, certOut);\n                safeDelete(certFile);\n                safeDelete(keyFile);\n            }\n        }\n\n        return new String[] { certFile.getPath(), keyFile.getPath() };\n    }",
    "abstract_func": "static String[] newSelfSignedCertificate(\n            String VAR_0, PrivateKey VAR_1, X509Certificate VAR_2) throws IOException, CertificateEncodingException {\n        /* COMMENT_0 */\n        ByteBuf VAR_3 = VAR_4.wrappedBuffer(VAR_1.getEncoded());\n        ByteBuf VAR_5;\n        final String VAR_6;\n        try {\n            VAR_5 = VAR_7.encode(VAR_3, true);\n            try {\n                VAR_6 = \"-----BEGIN PRIVATE KEY-----\\n\" +\n                        VAR_5.toString(VAR_8.US_ASCII) +\n                        \"\\n-----END PRIVATE KEY-----\\n\";\n            } finally {\n                VAR_5.release();\n            }\n        } finally {\n            VAR_3.release();\n        }\n\n        File VAR_9 = VAR_10.createTempFile(\"keyutil_\" + VAR_0 + '_', \".key\", null);\n        VAR_9.deleteOnExit();\n\n        OutputStream VAR_11 = new FileOutputStream(VAR_9);\n        try {\n            VAR_11.write(VAR_6.getBytes(VAR_8.US_ASCII));\n            VAR_11.close();\n            VAR_11 = null;\n        } finally {\n            if (VAR_11 != null) {\n                safeClose(VAR_9, VAR_11);\n                safeDelete(VAR_9);\n            }\n        }\n\n        VAR_3 = VAR_4.wrappedBuffer(VAR_2.getEncoded());\n        final String VAR_12;\n        try {\n            VAR_5 = VAR_7.encode(VAR_3, true);\n            try {\n                /* COMMENT_1 */\n                VAR_12 = \"-----BEGIN CERTIFICATE-----\\n\" +\n                        VAR_5.toString(VAR_8.US_ASCII) +\n                        \"\\n-----END CERTIFICATE-----\\n\";\n            } finally {\n                VAR_5.release();\n            }\n        } finally {\n            VAR_3.release();\n        }\n\n        File VAR_13 = VAR_10.createTempFile(\"keyutil_\" + VAR_0 + '_', \".crt\", null);\n        VAR_13.deleteOnExit();\n\n        OutputStream VAR_14 = new FileOutputStream(VAR_13);\n        try {\n            VAR_14.write(VAR_12.getBytes(VAR_8.US_ASCII));\n            VAR_14.close();\n            VAR_14 = null;\n        } finally {\n            if (VAR_14 != null) {\n                safeClose(VAR_13, VAR_14);\n                safeDelete(VAR_13);\n                safeDelete(VAR_9);\n            }\n        }\n\n        return new String[] { VAR_13.getPath(), VAR_9.getPath() };\n    }",
    "func_graph_path": "netty/c735357bf29d07856ad171c6611a2e1a0e0000ec/SelfSignedCertificate.java/vul/after/0.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -17,7 +17,7 @@\n             wrappedBuf.release();\n         }\n \n-        File keyFile = File.createTempFile(\"keyutil_\" + fqdn + '_', \".key\");\n+        File keyFile = PlatformDependent.createTempFile(\"keyutil_\" + fqdn + '_', \".key\", null);\n         keyFile.deleteOnExit();\n \n         OutputStream keyOut = new FileOutputStream(keyFile);\n@@ -48,7 +48,7 @@\n             wrappedBuf.release();\n         }\n \n-        File certFile = File.createTempFile(\"keyutil_\" + fqdn + '_', \".crt\");\n+        File certFile = PlatformDependent.createTempFile(\"keyutil_\" + fqdn + '_', \".crt\", null);\n         certFile.deleteOnExit();\n \n         OutputStream certOut = new FileOutputStream(certFile);",
    "diff_line_info": {
        "deleted_lines": [
            "        File keyFile = File.createTempFile(\"keyutil_\" + fqdn + '_', \".key\");",
            "        File certFile = File.createTempFile(\"keyutil_\" + fqdn + '_', \".crt\");"
        ],
        "added_lines": [
            "        File keyFile = PlatformDependent.createTempFile(\"keyutil_\" + fqdn + '_', \".key\", null);",
            "        File certFile = PlatformDependent.createTempFile(\"keyutil_\" + fqdn + '_', \".crt\", null);"
        ]
    },
    "is_vul": true,
    "pr_url": null,
    "description": "no more info"
}