{
    "cve_id": "CVE-2023-34453",
    "cwe_ids": [
        "CWE-190"
    ],
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
    "cvss_is_v3": true,
    "repo_name": "xerial/snappy-java",
    "commit_msg": "Merge pull request from GHSA-pqr6-cmr2-h8hf\n\n* Fixed integer overflow by checking if multiplication result is smaller than original value\n\n* Fixed integer overflow by checking if multiplication result is smaller than original value\n\n* Fixed integer overflow by checking if multiplication result is smaller than original value\n\n* imporved error messages and added happy and sad cases for unit test in SnappyTest.java\n\n* switched SnappyError into ILLEGAL_ARGUMENT in SnappyErrorCode.java and Snappy.java\n\n* wrote new and updated unit test methods\n\n* updated comments in SnappyTest.java\n\n* Fixed and updated unit tests in SnappyTest.java",
    "commit_hash": "820e2e074c58748b41dbd547f4edba9e108ad905",
    "git_url": "https://github.com/xerial/snappy-java/commit/820e2e074c58748b41dbd547f4edba9e108ad905",
    "file_path": "src/main/java/org/xerial/snappy/BitShuffle.java",
    "func_name": "shuffle",
    "func_before": "public static byte[] shuffle(long[] input) throws IOException {\n        byte[] output = new byte[input.length * 8];\n        int numProcessed = impl.shuffle(input, 0, 8, input.length * 8, output, 0);\n        assert(numProcessed == input.length * 8);\n        return output;\n    }",
    "abstract_func_before": "public static byte[] shuffle(long[] VAR_0) throws IOException {\n        byte[] VAR_1 = new byte[VAR_0.length * 8];\n        int VAR_2 = VAR_3.shuffle(VAR_0, 0, 8, VAR_0.length * 8, VAR_1, 0);\n        assert(VAR_2 == VAR_0.length * 8);\n        return VAR_1;\n    }",
    "func_graph_path_before": "xerial/snappy-java/820e2e074c58748b41dbd547f4edba9e108ad905/BitShuffle.java/vul/before/3.json",
    "func": "public static byte[] shuffle(long[] input) throws IOException {\n        if (input.length * 8 < input.length) {\n            throw new SnappyError(SnappyErrorCode.TOO_LARGE_INPUT, \"input array size is too large: \" + input.length);\n        }\n        byte[] output = new byte[input.length * 8];\n        int numProcessed = impl.shuffle(input, 0, 8, input.length * 8, output, 0);\n        assert(numProcessed == input.length * 8);\n        return output;\n    }",
    "abstract_func": "public static byte[] shuffle(long[] VAR_0) throws IOException {\n        if (VAR_0.length * 8 < VAR_0.length) {\n            throw new SnappyError(VAR_1.TOO_LARGE_INPUT, \"input array size is too large: \" + VAR_0.length);\n        }\n        byte[] VAR_2 = new byte[VAR_0.length * 8];\n        int VAR_3 = VAR_4.shuffle(VAR_0, 0, 8, VAR_0.length * 8, VAR_2, 0);\n        assert(VAR_3 == VAR_0.length * 8);\n        return VAR_2;\n    }",
    "func_graph_path": "xerial/snappy-java/820e2e074c58748b41dbd547f4edba9e108ad905/BitShuffle.java/vul/after/3.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -1,4 +1,7 @@\n public static byte[] shuffle(long[] input) throws IOException {\n+        if (input.length * 8 < input.length) {\n+            throw new SnappyError(SnappyErrorCode.TOO_LARGE_INPUT, \"input array size is too large: \" + input.length);\n+        }\n         byte[] output = new byte[input.length * 8];\n         int numProcessed = impl.shuffle(input, 0, 8, input.length * 8, output, 0);\n         assert(numProcessed == input.length * 8);",
    "diff_line_info": {
        "deleted_lines": [],
        "added_lines": [
            "        if (input.length * 8 < input.length) {",
            "            throw new SnappyError(SnappyErrorCode.TOO_LARGE_INPUT, \"input array size is too large: \" + input.length);",
            "        }"
        ]
    },
    "is_vul": true,
    "pr_url": null,
    "description": "no more info"
}