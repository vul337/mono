{
    "cve_id": "CVE-2015-2912",
    "cwe_ids": [
        "CWE-352"
    ],
    "cvss_vector": "AV:N/AC:M/Au:N/C:P/I:P/A:P",
    "cvss_is_v3": false,
    "repo_name": "orientechnologies/orientdb",
    "commit_msg": "Fixed issue #4824 about disabling JSONP support",
    "commit_hash": "f11dbced94cb587f445cb99db08735c023921053",
    "git_url": "https://github.com/orientechnologies/orientdb/commit/f11dbced94cb587f445cb99db08735c023921053",
    "file_path": "server/src/main/java/com/orientechnologies/orient/server/network/protocol/http/ONetworkProtocolHttpAbstract.java",
    "func_name": "service",
    "func_before": "public void service() throws ONetworkProtocolException, IOException {\n    ++connection.data.totalRequests;\n    connection.data.commandInfo = null;\n    connection.data.commandDetail = null;\n\n    final String callbackF;\n    if ((request.parameters != null) && request.parameters.containsKey(OHttpUtils.CALLBACK_PARAMETER_NAME))\n      callbackF = request.parameters.get(OHttpUtils.CALLBACK_PARAMETER_NAME);\n    else\n      callbackF = null;\n\n    response = new OHttpResponse(channel.outStream, request.httpVersion, additionalResponseHeaders, responseCharSet,\n        connection.data.serverInfo, request.sessionId, callbackF, request.keepAlive, connection);\n    response.setJsonErrorResponse(jsonResponseError);\n    if (request.contentEncoding != null && request.contentEncoding.equals(OHttpUtils.CONTENT_ACCEPT_GZIP_ENCODED)) {\n      response.setContentEncoding(OHttpUtils.CONTENT_ACCEPT_GZIP_ENCODED);\n    }\n\n    waitNodeIsOnline();\n\n    final long begin = System.currentTimeMillis();\n\n    boolean isChain;\n    do {\n      isChain = false;\n      final String command;\n      if (request.url.length() < 2) {\n        command = \"\";\n      } else {\n        command = request.url.substring(1);\n      }\n\n      final String commandString = getCommandString(command);\n\n      final OServerCommand cmd = (OServerCommand) cmdManager.getCommand(commandString);\n      Map<String, String> requestParams = cmdManager.extractUrlTokens(commandString);\n      if (requestParams != null) {\n        if (request.parameters == null) {\n          request.parameters = new HashMap<String, String>();\n        }\n        for (Map.Entry<String, String> entry : requestParams.entrySet()) {\n          request.parameters.put(entry.getKey(), URLDecoder.decode(entry.getValue(), \"UTF-8\"));\n        }\n      }\n\n      if (cmd != null)\n        try {\n          if (cmd.beforeExecute(request, response))\n            try {\n              // EXECUTE THE COMMAND\n              isChain = cmd.execute(request, response);\n            } finally {\n              cmd.afterExecute(request, response);\n            }\n\n        } catch (Exception e) {\n          handleError(e);\n        }\n      else {\n        try {\n          OLogManager.instance().warn(\n              this,\n              \"->\" + channel.socket.getInetAddress().getHostAddress() + \": Command not found: \" + request.httpMethod + \".\"\n                  + URLDecoder.decode(command, \"UTF-8\"));\n\n          sendError(OHttpUtils.STATUS_INVALIDMETHOD_CODE, OHttpUtils.STATUS_INVALIDMETHOD_DESCRIPTION, null,\n              OHttpUtils.CONTENT_TEXT_PLAIN, \"Command not found: \" + command, request.keepAlive);\n        } catch (IOException e1) {\n          sendShutdown();\n        }\n      }\n    } while (isChain);\n\n    connection.data.lastCommandInfo = connection.data.commandInfo;\n    connection.data.lastCommandDetail = connection.data.commandDetail;\n\n    connection.data.lastCommandExecutionTime = System.currentTimeMillis() - begin;\n    connection.data.totalCommandExecutionTime += connection.data.lastCommandExecutionTime;\n  }",
    "abstract_func_before": "public void service() throws ONetworkProtocolException, IOException {\n    ++VAR_0.data.totalRequests;\n    VAR_0.data.commandInfo = null;\n    VAR_0.data.commandDetail = null;\n\n    final String VAR_1;\n    if ((VAR_2.parameters != null) && VAR_2.parameters.containsKey(VAR_3.CALLBACK_PARAMETER_NAME))\n      VAR_1 = VAR_2.parameters.get(VAR_3.CALLBACK_PARAMETER_NAME);\n    else\n      VAR_1 = null;\n\n    VAR_4 = new OHttpResponse(VAR_5.outStream, VAR_2.httpVersion, VAR_6, VAR_7,\n        VAR_0.data.serverInfo, VAR_2.sessionId, VAR_1, VAR_2.keepAlive, VAR_0);\n    VAR_4.setJsonErrorResponse(VAR_8);\n    if (VAR_2.contentEncoding != null && VAR_2.contentEncoding.equals(VAR_3.CONTENT_ACCEPT_GZIP_ENCODED)) {\n      VAR_4.setContentEncoding(VAR_3.CONTENT_ACCEPT_GZIP_ENCODED);\n    }\n\n    waitNodeIsOnline();\n\n    final long VAR_9 = VAR_10.currentTimeMillis();\n\n    boolean VAR_11;\n    do {\n      VAR_11 = false;\n      final String VAR_12;\n      if (VAR_2.url.length() < 2) {\n        VAR_12 = \"\";\n      } else {\n        VAR_12 = VAR_2.url.substring(1);\n      }\n\n      final String VAR_13 = getCommandString(VAR_12);\n\n      final OServerCommand VAR_14 = (OServerCommand) VAR_15.getCommand(VAR_13);\n      Map<String, String> VAR_16 = VAR_15.extractUrlTokens(VAR_13);\n      if (VAR_16 != null) {\n        if (VAR_2.parameters == null) {\n          VAR_2.parameters = new HashMap<String, String>();\n        }\n        for (Map.Entry<String, String> VAR_17 : VAR_16.entrySet()) {\n          VAR_2.parameters.put(VAR_17.getKey(), VAR_18.decode(VAR_17.getValue(), \"UTF-8\"));\n        }\n      }\n\n      if (VAR_14 != null)\n        try {\n          if (VAR_14.beforeExecute(VAR_2, VAR_4))\n            try {\n              /* COMMENT_0 */\n              VAR_11 = VAR_14.execute(VAR_2, VAR_4);\n            } finally {\n              VAR_14.afterExecute(VAR_2, VAR_4);\n            }\n\n        } catch (Exception VAR_19) {\n          handleError(VAR_19);\n        }\n      else {\n        try {\n          VAR_20.instance().warn(\n              this,\n              \"->\" + VAR_5.socket.getInetAddress().getHostAddress() + \": Command not found: \" + VAR_2.httpMethod + \".\"\n                  + VAR_18.decode(VAR_12, \"UTF-8\"));\n\n          sendError(VAR_3.STATUS_INVALIDMETHOD_CODE, VAR_3.STATUS_INVALIDMETHOD_DESCRIPTION, null,\n              VAR_3.CONTENT_TEXT_PLAIN, \"Command not found: \" + VAR_12, VAR_2.keepAlive);\n        } catch (IOException VAR_21) {\n          sendShutdown();\n        }\n      }\n    } while (VAR_11);\n\n    VAR_0.data.lastCommandInfo = VAR_0.data.commandInfo;\n    VAR_0.data.lastCommandDetail = VAR_0.data.commandDetail;\n\n    VAR_0.data.lastCommandExecutionTime = VAR_10.currentTimeMillis() - VAR_9;\n    VAR_0.data.totalCommandExecutionTime += VAR_0.data.lastCommandExecutionTime;\n  }",
    "func_graph_path_before": "orientechnologies/orientdb/f11dbced94cb587f445cb99db08735c023921053/ONetworkProtocolHttpAbstract.java/vul/before/0.json",
    "func": "public void service() throws ONetworkProtocolException, IOException {\n    ++connection.data.totalRequests;\n    connection.data.commandInfo = null;\n    connection.data.commandDetail = null;\n\n    final String callbackF;\n    if (OGlobalConfiguration.NETWORK_HTTP_JSONP_ENABLED.getValueAsBoolean() && request.parameters != null && request.parameters.containsKey(OHttpUtils.CALLBACK_PARAMETER_NAME))\n      callbackF = request.parameters.get(OHttpUtils.CALLBACK_PARAMETER_NAME);\n    else\n      callbackF = null;\n\n    response = new OHttpResponse(channel.outStream, request.httpVersion, additionalResponseHeaders, responseCharSet,\n        connection.data.serverInfo, request.sessionId, callbackF, request.keepAlive, connection);\n    response.setJsonErrorResponse(jsonResponseError);\n    if (request.contentEncoding != null && request.contentEncoding.equals(OHttpUtils.CONTENT_ACCEPT_GZIP_ENCODED)) {\n      response.setContentEncoding(OHttpUtils.CONTENT_ACCEPT_GZIP_ENCODED);\n    }\n\n    waitNodeIsOnline();\n\n    final long begin = System.currentTimeMillis();\n\n    boolean isChain;\n    do {\n      isChain = false;\n      final String command;\n      if (request.url.length() < 2) {\n        command = \"\";\n      } else {\n        command = request.url.substring(1);\n      }\n\n      final String commandString = getCommandString(command);\n\n      final OServerCommand cmd = (OServerCommand) cmdManager.getCommand(commandString);\n      Map<String, String> requestParams = cmdManager.extractUrlTokens(commandString);\n      if (requestParams != null) {\n        if (request.parameters == null) {\n          request.parameters = new HashMap<String, String>();\n        }\n        for (Map.Entry<String, String> entry : requestParams.entrySet()) {\n          request.parameters.put(entry.getKey(), URLDecoder.decode(entry.getValue(), \"UTF-8\"));\n        }\n      }\n\n      if (cmd != null)\n        try {\n          if (cmd.beforeExecute(request, response))\n            try {\n              // EXECUTE THE COMMAND\n              isChain = cmd.execute(request, response);\n            } finally {\n              cmd.afterExecute(request, response);\n            }\n\n        } catch (Exception e) {\n          handleError(e);\n        }\n      else {\n        try {\n          OLogManager.instance().warn(\n              this,\n              \"->\" + channel.socket.getInetAddress().getHostAddress() + \": Command not found: \" + request.httpMethod + \".\"\n                  + URLDecoder.decode(command, \"UTF-8\"));\n\n          sendError(OHttpUtils.STATUS_INVALIDMETHOD_CODE, OHttpUtils.STATUS_INVALIDMETHOD_DESCRIPTION, null,\n              OHttpUtils.CONTENT_TEXT_PLAIN, \"Command not found: \" + command, request.keepAlive);\n        } catch (IOException e1) {\n          sendShutdown();\n        }\n      }\n    } while (isChain);\n\n    connection.data.lastCommandInfo = connection.data.commandInfo;\n    connection.data.lastCommandDetail = connection.data.commandDetail;\n\n    connection.data.lastCommandExecutionTime = System.currentTimeMillis() - begin;\n    connection.data.totalCommandExecutionTime += connection.data.lastCommandExecutionTime;\n  }",
    "abstract_func": "public void service() throws ONetworkProtocolException, IOException {\n    ++VAR_0.data.totalRequests;\n    VAR_0.data.commandInfo = null;\n    VAR_0.data.commandDetail = null;\n\n    final String VAR_1;\n    if (VAR_2.NETWORK_HTTP_JSONP_ENABLED.getValueAsBoolean() && VAR_3.parameters != null && VAR_3.parameters.containsKey(VAR_4.CALLBACK_PARAMETER_NAME))\n      VAR_1 = VAR_3.parameters.get(VAR_4.CALLBACK_PARAMETER_NAME);\n    else\n      VAR_1 = null;\n\n    VAR_5 = new OHttpResponse(VAR_6.outStream, VAR_3.httpVersion, VAR_7, VAR_8,\n        VAR_0.data.serverInfo, VAR_3.sessionId, VAR_1, VAR_3.keepAlive, VAR_0);\n    VAR_5.setJsonErrorResponse(VAR_9);\n    if (VAR_3.contentEncoding != null && VAR_3.contentEncoding.equals(VAR_4.CONTENT_ACCEPT_GZIP_ENCODED)) {\n      VAR_5.setContentEncoding(VAR_4.CONTENT_ACCEPT_GZIP_ENCODED);\n    }\n\n    waitNodeIsOnline();\n\n    final long VAR_10 = VAR_11.currentTimeMillis();\n\n    boolean VAR_12;\n    do {\n      VAR_12 = false;\n      final String VAR_13;\n      if (VAR_3.url.length() < 2) {\n        VAR_13 = \"\";\n      } else {\n        VAR_13 = VAR_3.url.substring(1);\n      }\n\n      final String VAR_14 = getCommandString(VAR_13);\n\n      final OServerCommand VAR_15 = (OServerCommand) VAR_16.getCommand(VAR_14);\n      Map<String, String> VAR_17 = VAR_16.extractUrlTokens(VAR_14);\n      if (VAR_17 != null) {\n        if (VAR_3.parameters == null) {\n          VAR_3.parameters = new HashMap<String, String>();\n        }\n        for (Map.Entry<String, String> VAR_18 : VAR_17.entrySet()) {\n          VAR_3.parameters.put(VAR_18.getKey(), VAR_19.decode(VAR_18.getValue(), \"UTF-8\"));\n        }\n      }\n\n      if (VAR_15 != null)\n        try {\n          if (VAR_15.beforeExecute(VAR_3, VAR_5))\n            try {\n              /* COMMENT_0 */\n              VAR_12 = VAR_15.execute(VAR_3, VAR_5);\n            } finally {\n              VAR_15.afterExecute(VAR_3, VAR_5);\n            }\n\n        } catch (Exception VAR_20) {\n          handleError(VAR_20);\n        }\n      else {\n        try {\n          VAR_21.instance().warn(\n              this,\n              \"->\" + VAR_6.socket.getInetAddress().getHostAddress() + \": Command not found: \" + VAR_3.httpMethod + \".\"\n                  + VAR_19.decode(VAR_13, \"UTF-8\"));\n\n          sendError(VAR_4.STATUS_INVALIDMETHOD_CODE, VAR_4.STATUS_INVALIDMETHOD_DESCRIPTION, null,\n              VAR_4.CONTENT_TEXT_PLAIN, \"Command not found: \" + VAR_13, VAR_3.keepAlive);\n        } catch (IOException VAR_22) {\n          sendShutdown();\n        }\n      }\n    } while (VAR_12);\n\n    VAR_0.data.lastCommandInfo = VAR_0.data.commandInfo;\n    VAR_0.data.lastCommandDetail = VAR_0.data.commandDetail;\n\n    VAR_0.data.lastCommandExecutionTime = VAR_11.currentTimeMillis() - VAR_10;\n    VAR_0.data.totalCommandExecutionTime += VAR_0.data.lastCommandExecutionTime;\n  }",
    "func_graph_path": "orientechnologies/orientdb/f11dbced94cb587f445cb99db08735c023921053/ONetworkProtocolHttpAbstract.java/vul/after/0.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -4,7 +4,7 @@\n     connection.data.commandDetail = null;\n \n     final String callbackF;\n-    if ((request.parameters != null) && request.parameters.containsKey(OHttpUtils.CALLBACK_PARAMETER_NAME))\n+    if (OGlobalConfiguration.NETWORK_HTTP_JSONP_ENABLED.getValueAsBoolean() && request.parameters != null && request.parameters.containsKey(OHttpUtils.CALLBACK_PARAMETER_NAME))\n       callbackF = request.parameters.get(OHttpUtils.CALLBACK_PARAMETER_NAME);\n     else\n       callbackF = null;",
    "diff_line_info": {
        "deleted_lines": [
            "    if ((request.parameters != null) && request.parameters.containsKey(OHttpUtils.CALLBACK_PARAMETER_NAME))"
        ],
        "added_lines": [
            "    if (OGlobalConfiguration.NETWORK_HTTP_JSONP_ENABLED.getValueAsBoolean() && request.parameters != null && request.parameters.containsKey(OHttpUtils.CALLBACK_PARAMETER_NAME))"
        ]
    },
    "is_vul": true,
    "pr_url": null,
    "description": "no more info"
}