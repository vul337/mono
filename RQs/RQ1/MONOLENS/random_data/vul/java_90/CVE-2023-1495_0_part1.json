{
    "cve_id": "CVE-2023-1495",
    "cwe_ids": [
        "CWE-89"
    ],
    "cvss_vector": "AV:N/AC:L/Au:S/C:P/I:P/A:P",
    "cvss_is_v3": false,
    "repo_name": "getrebuild/rebuild",
    "commit_msg": "H5 sync2 (#595)\n\n* style: \u76ee\u5f55\u6837\u5f0fgh\r\n\r\n* style: J_new\r\n\r\n* feat: advListFilterTabs\r\n\r\n* feat: nav-copyto\r\n\r\n* enh: \u52a9\u8bb0\u7801\u5168\u62fc\r\n\r\n* enh: \u5730\u56fe\u641c\u7d22\u9009\u70b9\r\n\r\n* enh: topnav\r\n\r\n* list pn\r\n\r\n* .form-line.v33\r\n\r\n* open TAG\r\n\r\n* KVS addShutdownHook\r\n\r\n* fix: #594\r\n\r\n---------\r\n\r\nCo-authored-by: devezhao <zhaofang123@gmail.com>",
    "commit_hash": "c9474f84e5f376dd2ade2078e3039961a9425da7",
    "git_url": "https://github.com/getrebuild/rebuild/commit/c9474f84e5f376dd2ade2078e3039961a9425da7",
    "file_path": "src/main/java/com/rebuild/core/service/dataimport/RecordCheckout.java",
    "func_name": "checkoutReferenceValue",
    "func_before": "protected ID checkoutReferenceValue(Field field, Cell cell) {\n        final String val = cell.asString();\n        final Entity refEntity = field.getReferenceEntity();\n\n        // \u652f\u6301ID\n        ID vla2id = MetadataHelper.checkSpecEntityId(val, refEntity.getEntityCode());\n        if (vla2id != null) {\n            if (QueryHelper.exists(vla2id)) return vla2id;\n\n            log.warn(\"Reference ID `{}` not exists\", vla2id);\n            return null;\n        }\n\n        Object val2Text = checkoutFieldValue(refEntity.getNameField(), cell, false);\n        if (val2Text == null) return null;\n\n        Query query;\n        // \u7528\u6237\u7279\u6b8a\u5904\u7406\n        if (refEntity.getEntityCode() == EntityHelper.User) {\n            String sql = MessageFormat.format(\n                    \"select userId from User where loginName = ''{0}'' or email = ''{0}'' or fullName = ''{0}''\",\n                    StringEscapeUtils.escapeSql(val2Text.toString()));\n            query = Application.createQueryNoFilter(sql);\n        } else {\n            // \u67e5\u627e\u5f15\u7528\u5b9e\u4f53\u7684\u540d\u79f0\u5b57\u6bb5\u548c\u81ea\u52a8\u7f16\u53f7\u5b57\u6bb5\n            Set<String> queryFields = new HashSet<>();\n            queryFields.add(refEntity.getNameField().getName());\n            // \u540d\u79f0\u5b57\u6bb5\u53c8\u662f\u5f15\u7528\u5b57\u6bb5\n            if (!(val2Text instanceof ID)) {\n                for (Field s : MetadataSorter.sortFields(refEntity, DisplayType.SERIES)) {\n                    queryFields.add(s.getName());\n                }\n            }\n\n            StringBuilder sql = new StringBuilder(\n                    String.format(\"select %s from %s where \", refEntity.getPrimaryField().getName(), refEntity.getName()));\n            for (String qf : queryFields) {\n                sql.append(\n                        String.format(\"%s = '%s' or \", qf, StringEscapeUtils.escapeSql(val2Text.toString())));\n            }\n            sql = new StringBuilder(sql.substring(0, sql.length() - 4));\n\n            query = Application.createQueryNoFilter(sql.toString());\n        }\n\n        Object[] found = query.unique();\n        return found != null ? (ID) found[0] : null;\n    }",
    "abstract_func_before": "protected ID checkoutReferenceValue(Field VAR_0, Cell VAR_1) {\n        final String VAR_2 = VAR_1.asString();\n        final Entity VAR_3 = VAR_0.getReferenceEntity();\n\n        /* COMMENT_0 */\n        ID VAR_4 = VAR_5.checkSpecEntityId(VAR_2, VAR_3.getEntityCode());\n        if (VAR_4 != null) {\n            if (VAR_6.exists(VAR_4)) return VAR_4;\n\n            VAR_7.warn(\"Reference ID `{}` not exists\", VAR_4);\n            return null;\n        }\n\n        Object VAR_8 = checkoutFieldValue(VAR_3.getNameField(), VAR_1, false);\n        if (VAR_8 == null) return null;\n\n        Query VAR_9;\n        /* COMMENT_1 */\n        if (VAR_3.getEntityCode() == VAR_10.User) {\n            String VAR_11 = VAR_12.format(\n                    \"select userId from User where loginName = ''{0}'' or email = ''{0}'' or fullName = ''{0}''\",\n                    VAR_13.escapeSql(VAR_8.toString()));\n            VAR_9 = VAR_14.createQueryNoFilter(VAR_11);\n        } else {\n            /* COMMENT_2 */\n            Set<String> VAR_15 = new HashSet<>();\n            VAR_15.add(VAR_3.getNameField().getName());\n            /* COMMENT_3 */\n            if (!(VAR_8 instanceof ID)) {\n                for (Field VAR_16 : VAR_17.sortFields(VAR_3, VAR_18.SERIES)) {\n                    VAR_15.add(VAR_16.getName());\n                }\n            }\n\n            StringBuilder VAR_11 = new StringBuilder(\n                    VAR_19.format(\"select %s from %s where \", VAR_3.getPrimaryField().getName(), VAR_3.getName()));\n            for (String VAR_20 : VAR_15) {\n                VAR_11.append(\n                        VAR_19.format(\"%s = '%s' or \", VAR_20, VAR_13.escapeSql(VAR_8.toString())));\n            }\n            VAR_11 = new StringBuilder(VAR_11.substring(0, VAR_11.length() - 4));\n\n            VAR_9 = VAR_14.createQueryNoFilter(VAR_11.toString());\n        }\n\n        Object[] VAR_21 = VAR_9.unique();\n        return VAR_21 != null ? (ID) VAR_21[0] : null;\n    }",
    "func_graph_path_before": "getrebuild/rebuild/c9474f84e5f376dd2ade2078e3039961a9425da7/RecordCheckout.java/vul/before/0.json",
    "func": "protected ID checkoutReferenceValue(Field field, Cell cell) {\n        final String val = cell.asString();\n        final Entity refEntity = field.getReferenceEntity();\n\n        // \u652f\u6301ID\n        ID vla2id = MetadataHelper.checkSpecEntityId(val, refEntity.getEntityCode());\n        if (vla2id != null) {\n            if (QueryHelper.exists(vla2id)) return vla2id;\n\n            log.warn(\"Reference ID `{}` not exists\", vla2id);\n            return null;\n        }\n\n        Object val2Text = checkoutFieldValue(refEntity.getNameField(), cell, false);\n        if (val2Text == null) return null;\n\n        Query query;\n        // \u7528\u6237\u7279\u6b8a\u5904\u7406\n        if (refEntity.getEntityCode() == EntityHelper.User) {\n            String sql = MessageFormat.format(\n                    \"select userId from User where loginName = ''{0}'' or email = ''{0}'' or fullName = ''{0}''\",\n                    CommonsUtils.escapeSql(val2Text.toString()));\n            query = Application.createQueryNoFilter(sql);\n        } else {\n            // \u67e5\u627e\u5f15\u7528\u5b9e\u4f53\u7684\u540d\u79f0\u5b57\u6bb5\u548c\u81ea\u52a8\u7f16\u53f7\u5b57\u6bb5\n            Set<String> queryFields = new HashSet<>();\n            queryFields.add(refEntity.getNameField().getName());\n            // \u540d\u79f0\u5b57\u6bb5\u53c8\u662f\u5f15\u7528\u5b57\u6bb5\n            if (!(val2Text instanceof ID)) {\n                for (Field s : MetadataSorter.sortFields(refEntity, DisplayType.SERIES)) {\n                    queryFields.add(s.getName());\n                }\n            }\n\n            StringBuilder sql = new StringBuilder(\n                    String.format(\"select %s from %s where \", refEntity.getPrimaryField().getName(), refEntity.getName()));\n            for (String qf : queryFields) {\n                sql.append(\n                        String.format(\"%s = '%s' or \", qf, CommonsUtils.escapeSql(val2Text.toString())));\n            }\n            sql = new StringBuilder(sql.substring(0, sql.length() - 4));\n\n            query = Application.createQueryNoFilter(sql.toString());\n        }\n\n        Object[] found = query.unique();\n        return found != null ? (ID) found[0] : null;\n    }",
    "abstract_func": "protected ID checkoutReferenceValue(Field VAR_0, Cell VAR_1) {\n        final String VAR_2 = VAR_1.asString();\n        final Entity VAR_3 = VAR_0.getReferenceEntity();\n\n        /* COMMENT_0 */\n        ID VAR_4 = VAR_5.checkSpecEntityId(VAR_2, VAR_3.getEntityCode());\n        if (VAR_4 != null) {\n            if (VAR_6.exists(VAR_4)) return VAR_4;\n\n            VAR_7.warn(\"Reference ID `{}` not exists\", VAR_4);\n            return null;\n        }\n\n        Object VAR_8 = checkoutFieldValue(VAR_3.getNameField(), VAR_1, false);\n        if (VAR_8 == null) return null;\n\n        Query VAR_9;\n        /* COMMENT_1 */\n        if (VAR_3.getEntityCode() == VAR_10.User) {\n            String VAR_11 = VAR_12.format(\n                    \"select userId from User where loginName = ''{0}'' or email = ''{0}'' or fullName = ''{0}''\",\n                    VAR_13.escapeSql(VAR_8.toString()));\n            VAR_9 = VAR_14.createQueryNoFilter(VAR_11);\n        } else {\n            /* COMMENT_2 */\n            Set<String> VAR_15 = new HashSet<>();\n            VAR_15.add(VAR_3.getNameField().getName());\n            /* COMMENT_3 */\n            if (!(VAR_8 instanceof ID)) {\n                for (Field VAR_16 : VAR_17.sortFields(VAR_3, VAR_18.SERIES)) {\n                    VAR_15.add(VAR_16.getName());\n                }\n            }\n\n            StringBuilder VAR_11 = new StringBuilder(\n                    VAR_19.format(\"select %s from %s where \", VAR_3.getPrimaryField().getName(), VAR_3.getName()));\n            for (String VAR_20 : VAR_15) {\n                VAR_11.append(\n                        VAR_19.format(\"%s = '%s' or \", VAR_20, VAR_13.escapeSql(VAR_8.toString())));\n            }\n            VAR_11 = new StringBuilder(VAR_11.substring(0, VAR_11.length() - 4));\n\n            VAR_9 = VAR_14.createQueryNoFilter(VAR_11.toString());\n        }\n\n        Object[] VAR_21 = VAR_9.unique();\n        return VAR_21 != null ? (ID) VAR_21[0] : null;\n    }",
    "func_graph_path": "getrebuild/rebuild/c9474f84e5f376dd2ade2078e3039961a9425da7/RecordCheckout.java/vul/after/0.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -19,7 +19,7 @@\n         if (refEntity.getEntityCode() == EntityHelper.User) {\n             String sql = MessageFormat.format(\n                     \"select userId from User where loginName = ''{0}'' or email = ''{0}'' or fullName = ''{0}''\",\n-                    StringEscapeUtils.escapeSql(val2Text.toString()));\n+                    CommonsUtils.escapeSql(val2Text.toString()));\n             query = Application.createQueryNoFilter(sql);\n         } else {\n             // \u67e5\u627e\u5f15\u7528\u5b9e\u4f53\u7684\u540d\u79f0\u5b57\u6bb5\u548c\u81ea\u52a8\u7f16\u53f7\u5b57\u6bb5\n@@ -36,7 +36,7 @@\n                     String.format(\"select %s from %s where \", refEntity.getPrimaryField().getName(), refEntity.getName()));\n             for (String qf : queryFields) {\n                 sql.append(\n-                        String.format(\"%s = '%s' or \", qf, StringEscapeUtils.escapeSql(val2Text.toString())));\n+                        String.format(\"%s = '%s' or \", qf, CommonsUtils.escapeSql(val2Text.toString())));\n             }\n             sql = new StringBuilder(sql.substring(0, sql.length() - 4));\n ",
    "diff_line_info": {
        "deleted_lines": [
            "                    StringEscapeUtils.escapeSql(val2Text.toString()));",
            "                        String.format(\"%s = '%s' or \", qf, StringEscapeUtils.escapeSql(val2Text.toString())));"
        ],
        "added_lines": [
            "                    CommonsUtils.escapeSql(val2Text.toString()));",
            "                        String.format(\"%s = '%s' or \", qf, CommonsUtils.escapeSql(val2Text.toString())));"
        ]
    },
    "is_vul": true,
    "pr_url": "https://github.com/getrebuild/rebuild/pull/595",
    "description": "Most styles:\r\n1. Nav copy\r\n2. Arrow for form line \r\n3. Quick-code full-pinyin\r\n4. Open Tag of field\r\n5. feat: `advListFilterTabs` (boss-key)\r\n6. Map search\r\n7. feat: Can input page-no on list\r\n8. CVE fix"
}