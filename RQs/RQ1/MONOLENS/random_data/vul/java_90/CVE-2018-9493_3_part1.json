{
    "cve_id": "CVE-2018-9493",
    "cwe_ids": [
        "CWE-89"
    ],
    "cvss_vector": "AV:L/AC:L/Au:N/C:P/I:N/A:N",
    "cvss_is_v3": false,
    "repo_name": "android",
    "commit_msg": "DO NOT MERGE. Extend SQLiteQueryBuilder for update and delete.\n\nDevelopers often accept selection clauses from untrusted code, and\nSQLiteQueryBuilder already supports a \"strict\" mode to help catch\nSQL injection attacks.  This change extends the builder to support\nupdate() and delete() calls, so that we can help secure those\nselection clauses too.\n\nBug: 111085900\nTest: atest packages/providers/DownloadProvider/tests/\nTest: atest cts/tests/app/src/android/app/cts/DownloadManagerTest.java\nTest: atest cts/tests/tests/database/src/android/database/sqlite/cts/SQLiteQueryBuilderTest.java\nChange-Id: Ib4fc8400f184755ee7e971ab5f2095186341730c\nMerged-In: Ib4fc8400f184755ee7e971ab5f2095186341730c\n(cherry picked from commit 506994268bc4fa07d8798b7737a2952f74b8fd04)\n",
    "commit_hash": "ebc250d16c747f4161167b5ff58b3aea88b37acf",
    "git_url": "https://android.googlesource.com/platform/frameworks/base/+/ebc250d16c747f4161167b5ff58b3aea88b37acf",
    "file_path": "core/java/android/database/sqlite/SQLiteQueryBuilder.java",
    "func_name": "buildQuery",
    "func_before": "public String buildQuery(\n            String[] projectionIn, String selection, String groupBy,\n            String having, String sortOrder, String limit) {\n        String[] projection = computeProjection(projectionIn);\n\n        StringBuilder where = new StringBuilder();\n        boolean hasBaseWhereClause = mWhereClause != null && mWhereClause.length() > 0;\n\n        if (hasBaseWhereClause) {\n            where.append(mWhereClause.toString());\n            where.append(')');\n        }\n\n        // Tack on the user's selection, if present.\n        if (selection != null && selection.length() > 0) {\n            if (hasBaseWhereClause) {\n                where.append(\" AND \");\n            }\n\n            where.append('(');\n            where.append(selection);\n            where.append(')');\n        }\n\n        return buildQueryString(\n                mDistinct, mTables, projection, where.toString(),\n                groupBy, having, sortOrder, limit);\n    }",
    "abstract_func_before": "public String buildQuery(\n            String[] VAR_0, String VAR_1, String VAR_2,\n            String VAR_3, String VAR_4, String VAR_5) {\n        String[] VAR_6 = computeProjection(VAR_0);\n\n        StringBuilder VAR_7 = new StringBuilder();\n        boolean VAR_8 = VAR_9 != null && VAR_9.length() > 0;\n\n        if (VAR_8) {\n            VAR_7.append(VAR_9.toString());\n            VAR_7.append(')');\n        }\n\n        /* COMMENT_0 */\n        if (VAR_1 != null && VAR_1.length() > 0) {\n            if (VAR_8) {\n                VAR_7.append(\" AND \");\n            }\n\n            VAR_7.append('(');\n            VAR_7.append(VAR_1);\n            VAR_7.append(')');\n        }\n\n        return buildQueryString(\n                VAR_10, VAR_11, VAR_6, VAR_7.toString(),\n                VAR_2, VAR_3, VAR_4, VAR_5);\n    }",
    "func_graph_path_before": "android/ebc250d16c747f4161167b5ff58b3aea88b37acf/SQLiteQueryBuilder.java/vul/before/3.json",
    "func": "public String buildQuery(\n            String[] projectionIn, String selection, String groupBy,\n            String having, String sortOrder, String limit) {\n        String[] projection = computeProjection(projectionIn);\n        String where = computeWhere(selection);\n\n        return buildQueryString(\n                mDistinct, mTables, projection, where,\n                groupBy, having, sortOrder, limit);\n    }",
    "abstract_func": "public String buildQuery(\n            String[] VAR_0, String VAR_1, String VAR_2,\n            String VAR_3, String VAR_4, String VAR_5) {\n        String[] VAR_6 = computeProjection(VAR_0);\n        String VAR_7 = computeWhere(VAR_1);\n\n        return buildQueryString(\n                VAR_8, VAR_9, VAR_6, VAR_7,\n                VAR_2, VAR_3, VAR_4, VAR_5);\n    }",
    "func_graph_path": "android/ebc250d16c747f4161167b5ff58b3aea88b37acf/SQLiteQueryBuilder.java/vul/after/3.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -2,27 +2,9 @@\n             String[] projectionIn, String selection, String groupBy,\n             String having, String sortOrder, String limit) {\n         String[] projection = computeProjection(projectionIn);\n-\n-        StringBuilder where = new StringBuilder();\n-        boolean hasBaseWhereClause = mWhereClause != null && mWhereClause.length() > 0;\n-\n-        if (hasBaseWhereClause) {\n-            where.append(mWhereClause.toString());\n-            where.append(')');\n-        }\n-\n-        // Tack on the user's selection, if present.\n-        if (selection != null && selection.length() > 0) {\n-            if (hasBaseWhereClause) {\n-                where.append(\" AND \");\n-            }\n-\n-            where.append('(');\n-            where.append(selection);\n-            where.append(')');\n-        }\n+        String where = computeWhere(selection);\n \n         return buildQueryString(\n-                mDistinct, mTables, projection, where.toString(),\n+                mDistinct, mTables, projection, where,\n                 groupBy, having, sortOrder, limit);\n     }",
    "diff_line_info": {
        "deleted_lines": [
            "",
            "        StringBuilder where = new StringBuilder();",
            "        boolean hasBaseWhereClause = mWhereClause != null && mWhereClause.length() > 0;",
            "",
            "        if (hasBaseWhereClause) {",
            "            where.append(mWhereClause.toString());",
            "            where.append(')');",
            "        }",
            "",
            "        // Tack on the user's selection, if present.",
            "        if (selection != null && selection.length() > 0) {",
            "            if (hasBaseWhereClause) {",
            "                where.append(\" AND \");",
            "            }",
            "",
            "            where.append('(');",
            "            where.append(selection);",
            "            where.append(')');",
            "        }",
            "                mDistinct, mTables, projection, where.toString(),"
        ],
        "added_lines": [
            "        String where = computeWhere(selection);",
            "                mDistinct, mTables, projection, where,"
        ]
    },
    "is_vul": true,
    "pr_url": null,
    "description": "no more info"
}