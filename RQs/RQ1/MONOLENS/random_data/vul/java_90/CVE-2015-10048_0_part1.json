{
    "cve_id": "CVE-2015-10048",
    "cwe_ids": [
        "CWE-89"
    ],
    "cvss_vector": "AV:A/AC:L/Au:S/C:P/I:P/A:P",
    "cvss_is_v3": false,
    "repo_name": "bmattoso/desafio_buzz_woody",
    "commit_msg": "M\u00e9todo de execute alterado para SQLINJECTION , faltando apenas o m\u00e9todo de StoredProcedure",
    "commit_hash": "cb8220cbae06082c969b1776fcb2fdafb3a1006b",
    "git_url": "https://github.com/bmattoso/desafio_buzz_woody/commit/cb8220cbae06082c969b1776fcb2fdafb3a1006b",
    "file_path": "injectIt/src/main/java/com/dextra/injectit/servlets/InjectServlet.java",
    "func_name": "main",
    "func_before": "public static void main(String[] args) {\n\t\t/////////////////\n\t\t// TESTE DE SQL INJECTION\n\t\t\n\t\t\n\t\tString query = \"SELECT * FROM USER WHERE NAME = ?\";\n\t\tResultSet users = Database.execute(query);\n\t\t\n\t\tArrayList<User> searchedUsers = new ArrayList<User>();\n\t\ttry {\n\t\t\t\n\t\t\twhile (users.next()){\n\t\t\t\tsearchedUsers.add(new User(users.getString(1),users.getString(2),users.getString(3)));\n\t\t\t}\n\t\t\t\n\t\t\tGson gson = new Gson();\n\t\t\tSystem.out.println(gson.toJson(searchedUsers));\n\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t}\t\n\t}",
    "abstract_func_before": "public static void main(String[] VAR_0) {\n\t\t/* COMMENT_0 */\n\t\t/* COMMENT_1 */\n\t\t\n\t\t\n\t\tString VAR_1 = \"SELECT * FROM USER WHERE NAME = ?\";\n\t\tResultSet VAR_2 = VAR_3.execute(VAR_1);\n\t\t\n\t\tArrayList<User> VAR_4 = new ArrayList<User>();\n\t\ttry {\n\t\t\t\n\t\t\twhile (VAR_2.next()){\n\t\t\t\tVAR_4.add(new User(VAR_2.getString(1),VAR_2.getString(2),VAR_2.getString(3)));\n\t\t\t}\n\t\t\t\n\t\t\tGson VAR_5 = new Gson();\n\t\t\tVAR_6.out.println(VAR_5.toJson(VAR_4));\n\n\t\t} catch (SQLException VAR_7) {\n\t\t\tVAR_7.printStackTrace();\n\t\t}\t\n\t}",
    "func_graph_path_before": "bmattoso/desafio_buzz_woody/cb8220cbae06082c969b1776fcb2fdafb3a1006b/InjectServlet.java/vul/before/1.json",
    "func": "public static void main(String[] args) {\n\t\t/////////////////\n\t\t// TESTE DE SQL INJECTION\n\t\ttry {\n\t\t\tMockDatabase.execute();\n\t\t\t\n\t\t\t\n\t\t\tString query = \"{call sp_getUser(?)}\";\n\t\t\n\t\t\tObject []objs = new Object [1];\n\t\t\tobjs[0] = \"Jefferson\";\n\t\t\t\n\t\t\tResultSet users = Database.executeStoredPrcedure(query, objs);\n\t\t\n\t\t\tArrayList<User> searchedUsers = new ArrayList<User>();\n\t\t\n\t\t\t\n\t\t\twhile (users.next()){\n\t\t\t\tsearchedUsers.add(new User(users.getString(1),users.getString(2),users.getString(3)));\n\t\t\t}\n\t\t\t\n\t\t\tGson gson = new Gson();\n\t\t\tSystem.out.println(gson.toJson(searchedUsers));\n\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\t\n\t}",
    "abstract_func": "public static void main(String[] VAR_0) {\n\t\t/* COMMENT_0 */\n\t\t/* COMMENT_1 */\n\t\ttry {\n\t\t\tVAR_1.execute();\n\t\t\t\n\t\t\t\n\t\t\tString VAR_2 = \"{call sp_getUser(?)}\";\n\t\t\n\t\t\tObject []VAR_3 = new Object [1];\n\t\t\tVAR_3[0] = \"Jefferson\";\n\t\t\t\n\t\t\tResultSet VAR_4 = VAR_5.executeStoredPrcedure(VAR_2, VAR_3);\n\t\t\n\t\t\tArrayList<User> VAR_6 = new ArrayList<User>();\n\t\t\n\t\t\t\n\t\t\twhile (VAR_4.next()){\n\t\t\t\tVAR_6.add(new User(VAR_4.getString(1),VAR_4.getString(2),VAR_4.getString(3)));\n\t\t\t}\n\t\t\t\n\t\t\tGson VAR_7 = new Gson();\n\t\t\tVAR_8.out.println(VAR_7.toJson(VAR_6));\n\n\t\t} catch (Exception VAR_9) {\n\t\t\tVAR_9.printStackTrace();\n\t\t}\t\n\t}",
    "func_graph_path": "bmattoso/desafio_buzz_woody/cb8220cbae06082c969b1776fcb2fdafb3a1006b/InjectServlet.java/vul/after/1.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -1,13 +1,19 @@\n public static void main(String[] args) {\n \t\t/////////////////\n \t\t// TESTE DE SQL INJECTION\n+\t\ttry {\n+\t\t\tMockDatabase.execute();\n+\t\t\t\n+\t\t\t\n+\t\t\tString query = \"{call sp_getUser(?)}\";\n \t\t\n+\t\t\tObject []objs = new Object [1];\n+\t\t\tobjs[0] = \"Jefferson\";\n+\t\t\t\n+\t\t\tResultSet users = Database.executeStoredPrcedure(query, objs);\n \t\t\n-\t\tString query = \"SELECT * FROM USER WHERE NAME = ?\";\n-\t\tResultSet users = Database.execute(query);\n+\t\t\tArrayList<User> searchedUsers = new ArrayList<User>();\n \t\t\n-\t\tArrayList<User> searchedUsers = new ArrayList<User>();\n-\t\ttry {\n \t\t\t\n \t\t\twhile (users.next()){\n \t\t\t\tsearchedUsers.add(new User(users.getString(1),users.getString(2),users.getString(3)));\n@@ -16,7 +22,7 @@\n \t\t\tGson gson = new Gson();\n \t\t\tSystem.out.println(gson.toJson(searchedUsers));\n \n-\t\t} catch (SQLException e) {\n+\t\t} catch (Exception e) {\n \t\t\te.printStackTrace();\n \t\t}\t\n \t}",
    "diff_line_info": {
        "deleted_lines": [
            "\t\tString query = \"SELECT * FROM USER WHERE NAME = ?\";",
            "\t\tResultSet users = Database.execute(query);",
            "\t\tArrayList<User> searchedUsers = new ArrayList<User>();",
            "\t\ttry {",
            "\t\t} catch (SQLException e) {"
        ],
        "added_lines": [
            "\t\ttry {",
            "\t\t\tMockDatabase.execute();",
            "\t\t\t",
            "\t\t\t",
            "\t\t\tString query = \"{call sp_getUser(?)}\";",
            "\t\t\tObject []objs = new Object [1];",
            "\t\t\tobjs[0] = \"Jefferson\";",
            "\t\t\t",
            "\t\t\tResultSet users = Database.executeStoredPrcedure(query, objs);",
            "\t\t\tArrayList<User> searchedUsers = new ArrayList<User>();",
            "\t\t} catch (Exception e) {"
        ]
    },
    "is_vul": true,
    "pr_url": null,
    "description": "no more info"
}