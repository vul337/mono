{
    "cve_id": "CVE-2016-3908",
    "cwe_ids": [
        "CWE-264"
    ],
    "cvss_vector": "AV:N/AC:M/Au:N/C:N/I:P/A:N",
    "cvss_is_v3": false,
    "repo_name": "android",
    "commit_msg": "Fix vulnerability in LockSettings service\n\nFixes bug 30003944\n\nChange-Id: I8700d4424c6186c8d5e71d2fdede0223ad86904d\n(cherry picked from commit 2d71384a139ae27cbc7b57f06662bf6ee2010f2b)\n",
    "commit_hash": "96daf7d4893f614714761af2d53dfb93214a32e4",
    "git_url": "https://android.googlesource.com/platform/frameworks/base/+/96daf7d4893f614714761af2d53dfb93214a32e4",
    "file_path": "services/core/java/com/android/server/LockSettingsService.java",
    "func_name": "doVerifyPassword",
    "func_before": "private VerifyCredentialResponse doVerifyPassword(String password, boolean hasChallenge,\n            long challenge, int userId) throws RemoteException {\n       checkPasswordReadPermission(userId);\n       CredentialHash storedHash = mStorage.readPasswordHash(userId);\n       return doVerifyPassword(password, storedHash, hasChallenge, challenge, userId);\n    }",
    "abstract_func_before": "private VerifyCredentialResponse doVerifyPassword(String VAR_0, boolean VAR_1,\n            long VAR_2, int VAR_3) throws RemoteException {\n       checkPasswordReadPermission(VAR_3);\n       CredentialHash VAR_4 = VAR_5.readPasswordHash(VAR_3);\n       return doVerifyPassword(VAR_0, VAR_4, VAR_1, VAR_2, VAR_3);\n    }",
    "func_graph_path_before": "android/96daf7d4893f614714761af2d53dfb93214a32e4/LockSettingsService.java/vul/before/0.json",
    "func": "private VerifyCredentialResponse doVerifyPassword(String password, boolean hasChallenge,\n            long challenge, int userId) throws RemoteException {\n       checkPasswordReadPermission(userId);\n       if (TextUtils.isEmpty(password)) {\n           throw new IllegalArgumentException(\"Password can't be null or empty\");\n       }\n       CredentialHash storedHash = mStorage.readPasswordHash(userId);\n       return doVerifyPassword(password, storedHash, hasChallenge, challenge, userId);\n    }",
    "abstract_func": "private VerifyCredentialResponse doVerifyPassword(String VAR_0, boolean VAR_1,\n            long VAR_2, int VAR_3) throws RemoteException {\n       checkPasswordReadPermission(VAR_3);\n       if (VAR_4.isEmpty(VAR_0)) {\n           throw new IllegalArgumentException(\"Password can't be null or empty\");\n       }\n       CredentialHash VAR_5 = VAR_6.readPasswordHash(VAR_3);\n       return doVerifyPassword(VAR_0, VAR_5, VAR_1, VAR_2, VAR_3);\n    }",
    "func_graph_path": "android/96daf7d4893f614714761af2d53dfb93214a32e4/LockSettingsService.java/vul/after/0.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -1,6 +1,9 @@\n private VerifyCredentialResponse doVerifyPassword(String password, boolean hasChallenge,\n             long challenge, int userId) throws RemoteException {\n        checkPasswordReadPermission(userId);\n+       if (TextUtils.isEmpty(password)) {\n+           throw new IllegalArgumentException(\"Password can't be null or empty\");\n+       }\n        CredentialHash storedHash = mStorage.readPasswordHash(userId);\n        return doVerifyPassword(password, storedHash, hasChallenge, challenge, userId);\n     }",
    "diff_line_info": {
        "deleted_lines": [],
        "added_lines": [
            "       if (TextUtils.isEmpty(password)) {",
            "           throw new IllegalArgumentException(\"Password can't be null or empty\");",
            "       }"
        ]
    },
    "is_vul": true,
    "pr_url": null,
    "description": "no more info"
}