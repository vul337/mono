{
    "cve_id": "CVE-2021-21250",
    "cwe_ids": [
        "CWE-538"
    ],
    "cvss_vector": "AV:N/AC:L/Au:S/C:P/I:N/A:N",
    "cvss_is_v3": false,
    "repo_name": "theonedev/onedev",
    "commit_msg": "Fix XXE injection attack by disabling XML DTD handling",
    "commit_hash": "9196fd795e87dab069b4260a3590a0ea886e770f",
    "git_url": "https://github.com/theonedev/onedev/commit/9196fd795e87dab069b4260a3590a0ea886e770f",
    "file_path": "server-core/src/main/java/io/onedev/server/migration/XmlBuildSpecMigrator.java",
    "func_name": "migrate",
    "func_before": "public static String migrate(String xml) {\n\t\tDocument xmlDoc;\n\t\ttry {\n\t\t\txmlDoc = new SAXReader().read(new StringReader(xml));\n\t\t} catch (DocumentException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t\t\n\t\tList<NodeTuple> tuples = new ArrayList<>();\n\t\tNode keyNode = new ScalarNode(Tag.STR, \"version\");\n\t\tNode valueNode = new ScalarNode(Tag.INT, \"0\");\n\t\ttuples.add(new NodeTuple(keyNode, valueNode));\n\t\t\n\t\tList<Node> jobNodes = new ArrayList<>();\n\t\tfor (Element jobElement: xmlDoc.getRootElement().element(\"jobs\").elements()) \n\t\t\tjobNodes.add(migrateJob(jobElement));\n\t\t\n\t\tif (!jobNodes.isEmpty()) {\n\t\t\tkeyNode = new ScalarNode(Tag.STR, \"jobs\");\n\t\t\ttuples.add(new NodeTuple(keyNode, new SequenceNode(Tag.SEQ, jobNodes, FlowStyle.BLOCK)));\n\t\t}\n\t\t\n\t\tList<Node> propertyNodes = new ArrayList<>();\n\t\tElement propertiesElement = xmlDoc.getRootElement().element(\"properties\");\n\t\tif (propertiesElement != null) {\n\t\t\tfor (Element propertyElement: propertiesElement.elements()) {\n\t\t\t\tNode nameNode = new ScalarNode(Tag.STR, propertyElement.elementText(\"name\").trim());\n\t\t\t\tvalueNode = new ScalarNode(Tag.STR, propertyElement.elementText(\"value\").trim());\n\t\t\t\tList<NodeTuple> propertyTuples = Lists.newArrayList(\n\t\t\t\t\t\tnew NodeTuple(new ScalarNode(Tag.STR, \"name\"), nameNode), \n\t\t\t\t\t\tnew NodeTuple(new ScalarNode(Tag.STR, \"value\"), valueNode));\n\t\t\t\tpropertyNodes.add(new MappingNode(Tag.MAP, propertyTuples, FlowStyle.BLOCK));\n\t\t\t}\n\t\t}\n\t\tif(!propertyNodes.isEmpty()) {\n\t\t\tkeyNode = new ScalarNode(Tag.STR, \"properties\");\n\t\t\ttuples.add(new NodeTuple(keyNode, new SequenceNode(Tag.SEQ, propertyNodes, FlowStyle.BLOCK)));\n\t\t}\n\t\t\n\t\tMappingNode rootNode = new MappingNode(Tag.MAP, tuples, FlowStyle.BLOCK);\n\t\tStringWriter writer = new StringWriter();\n\t\tDumperOptions dumperOptions = new DumperOptions();\n\t\tSerializer serializer = new Serializer(new Emitter(writer, dumperOptions), \n\t\t\t\tnew Resolver(), dumperOptions, Tag.MAP);\n\t\ttry {\n\t\t\tserializer.open();\n\t\t\tserializer.serialize(rootNode);\n\t\t\tserializer.close();\n\t\t\treturn writer.toString();\n\t\t} catch (IOException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t\t\n\t}",
    "abstract_func_before": "public static String migrate(String VAR_0) {\n\t\tDocument VAR_1;\n\t\ttry {\n\t\t\tVAR_1 = new SAXReader().read(new StringReader(VAR_0));\n\t\t} catch (DocumentException VAR_2) {\n\t\t\tthrow new RuntimeException(VAR_2);\n\t\t}\n\t\t\n\t\tList<NodeTuple> VAR_3 = new ArrayList<>();\n\t\tNode VAR_4 = new ScalarNode(VAR_5.STR, \"version\");\n\t\tNode VAR_6 = new ScalarNode(VAR_5.INT, \"0\");\n\t\tVAR_3.add(new NodeTuple(VAR_4, VAR_6));\n\t\t\n\t\tList<Node> VAR_7 = new ArrayList<>();\n\t\tfor (Element VAR_8: VAR_1.getRootElement().element(\"jobs\").elements()) \n\t\t\tVAR_7.add(migrateJob(VAR_8));\n\t\t\n\t\tif (!VAR_7.isEmpty()) {\n\t\t\tVAR_4 = new ScalarNode(VAR_5.STR, \"jobs\");\n\t\t\tVAR_3.add(new NodeTuple(VAR_4, new SequenceNode(VAR_5.SEQ, VAR_7, VAR_9.BLOCK)));\n\t\t}\n\t\t\n\t\tList<Node> VAR_10 = new ArrayList<>();\n\t\tElement VAR_11 = VAR_1.getRootElement().element(\"properties\");\n\t\tif (VAR_11 != null) {\n\t\t\tfor (Element VAR_12: VAR_11.elements()) {\n\t\t\t\tNode VAR_13 = new ScalarNode(VAR_5.STR, VAR_12.elementText(\"name\").trim());\n\t\t\t\tVAR_6 = new ScalarNode(VAR_5.STR, VAR_12.elementText(\"value\").trim());\n\t\t\t\tList<NodeTuple> VAR_14 = VAR_15.newArrayList(\n\t\t\t\t\t\tnew NodeTuple(new ScalarNode(VAR_5.STR, \"name\"), VAR_13), \n\t\t\t\t\t\tnew NodeTuple(new ScalarNode(VAR_5.STR, \"value\"), VAR_6));\n\t\t\t\tVAR_10.add(new MappingNode(VAR_5.MAP, VAR_14, VAR_9.BLOCK));\n\t\t\t}\n\t\t}\n\t\tif(!VAR_10.isEmpty()) {\n\t\t\tVAR_4 = new ScalarNode(VAR_5.STR, \"properties\");\n\t\t\tVAR_3.add(new NodeTuple(VAR_4, new SequenceNode(VAR_5.SEQ, VAR_10, VAR_9.BLOCK)));\n\t\t}\n\t\t\n\t\tMappingNode VAR_16 = new MappingNode(VAR_5.MAP, VAR_3, VAR_9.BLOCK);\n\t\tStringWriter VAR_17 = new StringWriter();\n\t\tDumperOptions VAR_18 = new DumperOptions();\n\t\tSerializer VAR_19 = new Serializer(new Emitter(VAR_17, VAR_18), \n\t\t\t\tnew Resolver(), VAR_18, VAR_5.MAP);\n\t\ttry {\n\t\t\tVAR_19.open();\n\t\t\tVAR_19.serialize(VAR_16);\n\t\t\tVAR_19.close();\n\t\t\treturn VAR_17.toString();\n\t\t} catch (IOException VAR_2) {\n\t\t\tthrow new RuntimeException(VAR_2);\n\t\t}\n\t\t\n\t}",
    "func_graph_path_before": "theonedev/onedev/9196fd795e87dab069b4260a3590a0ea886e770f/XmlBuildSpecMigrator.java/vul/before/0.json",
    "func": "public static String migrate(String xml) {\n\t\tDocument xmlDoc;\n\t\ttry {\n\t\t\tSAXReader reader = new SAXReader();\n\t\t\t// Prevent XXE attack as the xml might be provided by malicious users\n\t\t\treader.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n\t\t\txmlDoc = reader.read(new StringReader(xml));\n\t\t} catch (DocumentException | SAXException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t\t\n\t\tList<NodeTuple> tuples = new ArrayList<>();\n\t\tNode keyNode = new ScalarNode(Tag.STR, \"version\");\n\t\tNode valueNode = new ScalarNode(Tag.INT, \"0\");\n\t\ttuples.add(new NodeTuple(keyNode, valueNode));\n\t\t\n\t\tList<Node> jobNodes = new ArrayList<>();\n\t\tfor (Element jobElement: xmlDoc.getRootElement().element(\"jobs\").elements()) \n\t\t\tjobNodes.add(migrateJob(jobElement));\n\t\t\n\t\tif (!jobNodes.isEmpty()) {\n\t\t\tkeyNode = new ScalarNode(Tag.STR, \"jobs\");\n\t\t\ttuples.add(new NodeTuple(keyNode, new SequenceNode(Tag.SEQ, jobNodes, FlowStyle.BLOCK)));\n\t\t}\n\t\t\n\t\tList<Node> propertyNodes = new ArrayList<>();\n\t\tElement propertiesElement = xmlDoc.getRootElement().element(\"properties\");\n\t\tif (propertiesElement != null) {\n\t\t\tfor (Element propertyElement: propertiesElement.elements()) {\n\t\t\t\tNode nameNode = new ScalarNode(Tag.STR, propertyElement.elementText(\"name\").trim());\n\t\t\t\tvalueNode = new ScalarNode(Tag.STR, propertyElement.elementText(\"value\").trim());\n\t\t\t\tList<NodeTuple> propertyTuples = Lists.newArrayList(\n\t\t\t\t\t\tnew NodeTuple(new ScalarNode(Tag.STR, \"name\"), nameNode), \n\t\t\t\t\t\tnew NodeTuple(new ScalarNode(Tag.STR, \"value\"), valueNode));\n\t\t\t\tpropertyNodes.add(new MappingNode(Tag.MAP, propertyTuples, FlowStyle.BLOCK));\n\t\t\t}\n\t\t}\n\t\tif(!propertyNodes.isEmpty()) {\n\t\t\tkeyNode = new ScalarNode(Tag.STR, \"properties\");\n\t\t\ttuples.add(new NodeTuple(keyNode, new SequenceNode(Tag.SEQ, propertyNodes, FlowStyle.BLOCK)));\n\t\t}\n\t\t\n\t\tMappingNode rootNode = new MappingNode(Tag.MAP, tuples, FlowStyle.BLOCK);\n\t\tStringWriter writer = new StringWriter();\n\t\tDumperOptions dumperOptions = new DumperOptions();\n\t\tSerializer serializer = new Serializer(new Emitter(writer, dumperOptions), \n\t\t\t\tnew Resolver(), dumperOptions, Tag.MAP);\n\t\ttry {\n\t\t\tserializer.open();\n\t\t\tserializer.serialize(rootNode);\n\t\t\tserializer.close();\n\t\t\treturn writer.toString();\n\t\t} catch (IOException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t\t\n\t}",
    "abstract_func": "public static String migrate(String VAR_0) {\n\t\tDocument VAR_1;\n\t\ttry {\n\t\t\tSAXReader VAR_2 = new SAXReader();\n\t\t\t/* COMMENT_0 */\n\t\t\tVAR_2.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n\t\t\tVAR_1 = VAR_2.read(new StringReader(VAR_0));\n\t\t} catch (DocumentException | SAXException VAR_3) {\n\t\t\tthrow new RuntimeException(VAR_3);\n\t\t}\n\t\t\n\t\tList<NodeTuple> VAR_4 = new ArrayList<>();\n\t\tNode VAR_5 = new ScalarNode(VAR_6.STR, \"version\");\n\t\tNode VAR_7 = new ScalarNode(VAR_6.INT, \"0\");\n\t\tVAR_4.add(new NodeTuple(VAR_5, VAR_7));\n\t\t\n\t\tList<Node> VAR_8 = new ArrayList<>();\n\t\tfor (Element VAR_9: VAR_1.getRootElement().element(\"jobs\").elements()) \n\t\t\tVAR_8.add(migrateJob(VAR_9));\n\t\t\n\t\tif (!VAR_8.isEmpty()) {\n\t\t\tVAR_5 = new ScalarNode(VAR_6.STR, \"jobs\");\n\t\t\tVAR_4.add(new NodeTuple(VAR_5, new SequenceNode(VAR_6.SEQ, VAR_8, VAR_10.BLOCK)));\n\t\t}\n\t\t\n\t\tList<Node> VAR_11 = new ArrayList<>();\n\t\tElement VAR_12 = VAR_1.getRootElement().element(\"properties\");\n\t\tif (VAR_12 != null) {\n\t\t\tfor (Element VAR_13: VAR_12.elements()) {\n\t\t\t\tNode VAR_14 = new ScalarNode(VAR_6.STR, VAR_13.elementText(\"name\").trim());\n\t\t\t\tVAR_7 = new ScalarNode(VAR_6.STR, VAR_13.elementText(\"value\").trim());\n\t\t\t\tList<NodeTuple> VAR_15 = VAR_16.newArrayList(\n\t\t\t\t\t\tnew NodeTuple(new ScalarNode(VAR_6.STR, \"name\"), VAR_14), \n\t\t\t\t\t\tnew NodeTuple(new ScalarNode(VAR_6.STR, \"value\"), VAR_7));\n\t\t\t\tVAR_11.add(new MappingNode(VAR_6.MAP, VAR_15, VAR_10.BLOCK));\n\t\t\t}\n\t\t}\n\t\tif(!VAR_11.isEmpty()) {\n\t\t\tVAR_5 = new ScalarNode(VAR_6.STR, \"properties\");\n\t\t\tVAR_4.add(new NodeTuple(VAR_5, new SequenceNode(VAR_6.SEQ, VAR_11, VAR_10.BLOCK)));\n\t\t}\n\t\t\n\t\tMappingNode VAR_17 = new MappingNode(VAR_6.MAP, VAR_4, VAR_10.BLOCK);\n\t\tStringWriter VAR_18 = new StringWriter();\n\t\tDumperOptions VAR_19 = new DumperOptions();\n\t\tSerializer VAR_20 = new Serializer(new Emitter(VAR_18, VAR_19), \n\t\t\t\tnew Resolver(), VAR_19, VAR_6.MAP);\n\t\ttry {\n\t\t\tVAR_20.open();\n\t\t\tVAR_20.serialize(VAR_17);\n\t\t\tVAR_20.close();\n\t\t\treturn VAR_18.toString();\n\t\t} catch (IOException VAR_3) {\n\t\t\tthrow new RuntimeException(VAR_3);\n\t\t}\n\t\t\n\t}",
    "func_graph_path": "theonedev/onedev/9196fd795e87dab069b4260a3590a0ea886e770f/XmlBuildSpecMigrator.java/vul/after/0.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -1,8 +1,11 @@\n public static String migrate(String xml) {\n \t\tDocument xmlDoc;\n \t\ttry {\n-\t\t\txmlDoc = new SAXReader().read(new StringReader(xml));\n-\t\t} catch (DocumentException e) {\n+\t\t\tSAXReader reader = new SAXReader();\n+\t\t\t// Prevent XXE attack as the xml might be provided by malicious users\n+\t\t\treader.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n+\t\t\txmlDoc = reader.read(new StringReader(xml));\n+\t\t} catch (DocumentException | SAXException e) {\n \t\t\tthrow new RuntimeException(e);\n \t\t}\n \t\t",
    "diff_line_info": {
        "deleted_lines": [
            "\t\t\txmlDoc = new SAXReader().read(new StringReader(xml));",
            "\t\t} catch (DocumentException e) {"
        ],
        "added_lines": [
            "\t\t\tSAXReader reader = new SAXReader();",
            "\t\t\t// Prevent XXE attack as the xml might be provided by malicious users",
            "\t\t\treader.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);",
            "\t\t\txmlDoc = reader.read(new StringReader(xml));",
            "\t\t} catch (DocumentException | SAXException e) {"
        ]
    },
    "is_vul": true,
    "pr_url": null,
    "description": "no more info"
}