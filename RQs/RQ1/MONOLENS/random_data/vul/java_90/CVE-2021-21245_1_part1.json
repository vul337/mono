{
    "cve_id": "CVE-2021-21245",
    "cwe_ids": [
        "CWE-434"
    ],
    "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:P/A:P",
    "cvss_is_v3": false,
    "repo_name": "theonedev/onedev",
    "commit_msg": "Fix the issue that uploaded file can be stored anywhere OneDev has write\npermissions over",
    "commit_hash": "0c060153fb97c0288a1917efdb17cc426934dacb",
    "git_url": "https://github.com/theonedev/onedev/commit/0c060153fb97c0288a1917efdb17cc426934dacb",
    "file_path": "server-core/src/main/java/io/onedev/server/web/page/project/blob/ProjectBlobPage.java",
    "func_name": "uploadFiles",
    "func_before": "@Override\n\tpublic RefUpdated uploadFiles(Collection<FileUpload> uploads, String directory, String commitMessage) {\n\t\tMap<String, BlobContent> newBlobs = new HashMap<>();\n\t\t\n\t\tString parentPath = getDirectory();\n\t\t\n\t\tif (directory != null) { \n\t\t\tif (parentPath != null)\n\t\t\t\tparentPath += \"/\" + directory;\n\t\t\telse\n\t\t\t\tparentPath = directory;\n\t\t}\n\t\t\n\t\tUser user = Preconditions.checkNotNull(SecurityUtils.getUser());\n\t\tBlobIdent blobIdent = getBlobIdent();\n\t\t\n\t\tfor (FileUpload upload: uploads) {\n\t\t\tString blobPath = upload.getClientFileName();\n\t\t\tif (parentPath != null)\n\t\t\t\tblobPath = parentPath + \"/\" + blobPath;\n\t\t\t\n\t\t\tif (getProject().isReviewRequiredForModification(user, blobIdent.revision, blobPath)) \n\t\t\t\tthrow new BlobEditException(\"Review required for this change. Please submit pull request instead\");\n\t\t\telse if (getProject().isBuildRequiredForModification(user, blobIdent.revision, blobPath)) \n\t\t\t\tthrow new BlobEditException(\"Build required for this change. Please submit pull request instead\");\n\t\t\t\n\t\t\tBlobContent blobContent = new BlobContent.Immutable(upload.getBytes(), FileMode.REGULAR_FILE);\n\t\t\tnewBlobs.put(blobPath, blobContent);\n\t\t}\n\n\t\tBlobEdits blobEdits = new BlobEdits(Sets.newHashSet(), newBlobs);\n\t\tString refName = blobIdent.revision!=null?GitUtils.branch2ref(blobIdent.revision):\"refs/heads/master\";\n\n\t\tObjectId prevCommitId;\n\t\tif (blobIdent.revision != null)\n\t\t\tprevCommitId = getProject().getRevCommit(blobIdent.revision, true).copy();\n\t\telse\n\t\t\tprevCommitId = ObjectId.zeroId();\n\n\t\twhile (true) {\n\t\t\ttry {\n\t\t\t\tObjectId newCommitId = blobEdits.commit(getProject().getRepository(), refName, prevCommitId, \n\t\t\t\t\t\tprevCommitId, user.asPerson(), commitMessage);\n\t\t\t\treturn new RefUpdated(getProject(), refName, prevCommitId, newCommitId);\n\t\t\t} catch (ObjectAlreadyExistsException|NotTreeException e) {\n\t\t\t\tthrow new BlobEditException(e.getMessage());\n\t\t\t} catch (ObsoleteCommitException e) {\n\t\t\t\tprevCommitId = e.getOldCommitId();\n\t\t\t}\n\t\t}\n\t}",
    "abstract_func_before": "@Override\n\tpublic RefUpdated uploadFiles(Collection<FileUpload> VAR_0, String VAR_1, String VAR_2) {\n\t\tMap<String, BlobContent> VAR_3 = new HashMap<>();\n\t\t\n\t\tString VAR_4 = getDirectory();\n\t\t\n\t\tif (VAR_1 != null) { \n\t\t\tif (VAR_4 != null)\n\t\t\t\tVAR_4 += \"/\" + VAR_1;\n\t\t\telse\n\t\t\t\tVAR_4 = VAR_1;\n\t\t}\n\t\t\n\t\tUser VAR_5 = VAR_6.checkNotNull(VAR_7.getUser());\n\t\tBlobIdent VAR_8 = getBlobIdent();\n\t\t\n\t\tfor (FileUpload VAR_9: VAR_0) {\n\t\t\tString VAR_10 = VAR_9.getClientFileName();\n\t\t\tif (VAR_4 != null)\n\t\t\t\tVAR_10 = VAR_4 + \"/\" + VAR_10;\n\t\t\t\n\t\t\tif (getProject().isReviewRequiredForModification(VAR_5, VAR_8.revision, VAR_10)) \n\t\t\t\tthrow new BlobEditException(\"Review required for this change. Please submit pull request instead\");\n\t\t\telse if (getProject().isBuildRequiredForModification(VAR_5, VAR_8.revision, VAR_10)) \n\t\t\t\tthrow new BlobEditException(\"Build required for this change. Please submit pull request instead\");\n\t\t\t\n\t\t\tBlobContent VAR_11 = new BlobContent.Immutable(VAR_9.getBytes(), VAR_12.REGULAR_FILE);\n\t\t\tVAR_3.put(VAR_10, VAR_11);\n\t\t}\n\n\t\tBlobEdits VAR_13 = new BlobEdits(VAR_14.newHashSet(), VAR_3);\n\t\tString VAR_15 = VAR_8.revision!=null?VAR_16.branch2ref(VAR_8.revision):\"refs/heads/master\";\n\n\t\tObjectId VAR_17;\n\t\tif (VAR_8.revision != null)\n\t\t\tVAR_17 = getProject().getRevCommit(VAR_8.revision, true).copy();\n\t\telse\n\t\t\tVAR_17 = VAR_18.zeroId();\n\n\t\twhile (true) {\n\t\t\ttry {\n\t\t\t\tObjectId VAR_19 = VAR_13.commit(getProject().getRepository(), VAR_15, VAR_17, \n\t\t\t\t\t\tVAR_17, VAR_5.asPerson(), VAR_2);\n\t\t\t\treturn new RefUpdated(getProject(), VAR_15, VAR_17, VAR_19);\n\t\t\t} catch (ObjectAlreadyExistsException|NotTreeException VAR_20) {\n\t\t\t\tthrow new BlobEditException(VAR_20.getMessage());\n\t\t\t} catch (ObsoleteCommitException VAR_20) {\n\t\t\t\tVAR_17 = VAR_20.getOldCommitId();\n\t\t\t}\n\t\t}\n\t}",
    "func_graph_path_before": "theonedev/onedev/0c060153fb97c0288a1917efdb17cc426934dacb/ProjectBlobPage.java/vul/before/0.json",
    "func": "@Override\n\tpublic RefUpdated uploadFiles(Collection<FileUpload> uploads, String directory, String commitMessage) {\n\t\tMap<String, BlobContent> newBlobs = new HashMap<>();\n\t\t\n\t\tString parentPath = getDirectory();\n\t\t\n\t\tif (directory != null) { \n\t\t\tif (parentPath != null)\n\t\t\t\tparentPath += \"/\" + directory;\n\t\t\telse\n\t\t\t\tparentPath = directory;\n\t\t}\n\t\t\n\t\tUser user = Preconditions.checkNotNull(SecurityUtils.getUser());\n\t\tBlobIdent blobIdent = getBlobIdent();\n\t\t\n\t\tfor (FileUpload upload: uploads) {\n\t\t\tString blobPath = FilenameUtils.sanitizeFilename(upload.getClientFileName());\n\t\t\tif (parentPath != null)\n\t\t\t\tblobPath = parentPath + \"/\" + blobPath;\n\t\t\t\n\t\t\tif (getProject().isReviewRequiredForModification(user, blobIdent.revision, blobPath)) \n\t\t\t\tthrow new BlobEditException(\"Review required for this change. Please submit pull request instead\");\n\t\t\telse if (getProject().isBuildRequiredForModification(user, blobIdent.revision, blobPath)) \n\t\t\t\tthrow new BlobEditException(\"Build required for this change. Please submit pull request instead\");\n\t\t\t\n\t\t\tBlobContent blobContent = new BlobContent.Immutable(upload.getBytes(), FileMode.REGULAR_FILE);\n\t\t\tnewBlobs.put(blobPath, blobContent);\n\t\t}\n\n\t\tBlobEdits blobEdits = new BlobEdits(Sets.newHashSet(), newBlobs);\n\t\tString refName = blobIdent.revision!=null?GitUtils.branch2ref(blobIdent.revision):\"refs/heads/master\";\n\n\t\tObjectId prevCommitId;\n\t\tif (blobIdent.revision != null)\n\t\t\tprevCommitId = getProject().getRevCommit(blobIdent.revision, true).copy();\n\t\telse\n\t\t\tprevCommitId = ObjectId.zeroId();\n\n\t\twhile (true) {\n\t\t\ttry {\n\t\t\t\tObjectId newCommitId = blobEdits.commit(getProject().getRepository(), refName, prevCommitId, \n\t\t\t\t\t\tprevCommitId, user.asPerson(), commitMessage);\n\t\t\t\treturn new RefUpdated(getProject(), refName, prevCommitId, newCommitId);\n\t\t\t} catch (ObjectAlreadyExistsException|NotTreeException e) {\n\t\t\t\tthrow new BlobEditException(e.getMessage());\n\t\t\t} catch (ObsoleteCommitException e) {\n\t\t\t\tprevCommitId = e.getOldCommitId();\n\t\t\t}\n\t\t}\n\t}",
    "abstract_func": "@Override\n\tpublic RefUpdated uploadFiles(Collection<FileUpload> VAR_0, String VAR_1, String VAR_2) {\n\t\tMap<String, BlobContent> VAR_3 = new HashMap<>();\n\t\t\n\t\tString VAR_4 = getDirectory();\n\t\t\n\t\tif (VAR_1 != null) { \n\t\t\tif (VAR_4 != null)\n\t\t\t\tVAR_4 += \"/\" + VAR_1;\n\t\t\telse\n\t\t\t\tVAR_4 = VAR_1;\n\t\t}\n\t\t\n\t\tUser VAR_5 = VAR_6.checkNotNull(VAR_7.getUser());\n\t\tBlobIdent VAR_8 = getBlobIdent();\n\t\t\n\t\tfor (FileUpload VAR_9: VAR_0) {\n\t\t\tString VAR_10 = VAR_11.sanitizeFilename(VAR_9.getClientFileName());\n\t\t\tif (VAR_4 != null)\n\t\t\t\tVAR_10 = VAR_4 + \"/\" + VAR_10;\n\t\t\t\n\t\t\tif (getProject().isReviewRequiredForModification(VAR_5, VAR_8.revision, VAR_10)) \n\t\t\t\tthrow new BlobEditException(\"Review required for this change. Please submit pull request instead\");\n\t\t\telse if (getProject().isBuildRequiredForModification(VAR_5, VAR_8.revision, VAR_10)) \n\t\t\t\tthrow new BlobEditException(\"Build required for this change. Please submit pull request instead\");\n\t\t\t\n\t\t\tBlobContent VAR_12 = new BlobContent.Immutable(VAR_9.getBytes(), VAR_13.REGULAR_FILE);\n\t\t\tVAR_3.put(VAR_10, VAR_12);\n\t\t}\n\n\t\tBlobEdits VAR_14 = new BlobEdits(VAR_15.newHashSet(), VAR_3);\n\t\tString VAR_16 = VAR_8.revision!=null?VAR_17.branch2ref(VAR_8.revision):\"refs/heads/master\";\n\n\t\tObjectId VAR_18;\n\t\tif (VAR_8.revision != null)\n\t\t\tVAR_18 = getProject().getRevCommit(VAR_8.revision, true).copy();\n\t\telse\n\t\t\tVAR_18 = VAR_19.zeroId();\n\n\t\twhile (true) {\n\t\t\ttry {\n\t\t\t\tObjectId VAR_20 = VAR_14.commit(getProject().getRepository(), VAR_16, VAR_18, \n\t\t\t\t\t\tVAR_18, VAR_5.asPerson(), VAR_2);\n\t\t\t\treturn new RefUpdated(getProject(), VAR_16, VAR_18, VAR_20);\n\t\t\t} catch (ObjectAlreadyExistsException|NotTreeException VAR_21) {\n\t\t\t\tthrow new BlobEditException(VAR_21.getMessage());\n\t\t\t} catch (ObsoleteCommitException VAR_21) {\n\t\t\t\tVAR_18 = VAR_21.getOldCommitId();\n\t\t\t}\n\t\t}\n\t}",
    "func_graph_path": "theonedev/onedev/0c060153fb97c0288a1917efdb17cc426934dacb/ProjectBlobPage.java/vul/after/0.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -15,7 +15,7 @@\n \t\tBlobIdent blobIdent = getBlobIdent();\n \t\t\n \t\tfor (FileUpload upload: uploads) {\n-\t\t\tString blobPath = upload.getClientFileName();\n+\t\t\tString blobPath = FilenameUtils.sanitizeFilename(upload.getClientFileName());\n \t\t\tif (parentPath != null)\n \t\t\t\tblobPath = parentPath + \"/\" + blobPath;\n \t\t\t",
    "diff_line_info": {
        "deleted_lines": [
            "\t\t\tString blobPath = upload.getClientFileName();"
        ],
        "added_lines": [
            "\t\t\tString blobPath = FilenameUtils.sanitizeFilename(upload.getClientFileName());"
        ]
    },
    "is_vul": true,
    "pr_url": null,
    "description": "no more info"
}