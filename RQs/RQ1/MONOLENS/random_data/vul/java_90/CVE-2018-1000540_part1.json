{
    "cve_id": "CVE-2018-1000540",
    "cwe_ids": [
        "CWE-611"
    ],
    "cvss_vector": "AV:N/AC:M/Au:N/C:P/I:P/A:P",
    "cvss_is_v3": false,
    "repo_name": "LoboEvolution",
    "commit_msg": "Fixed XXE Security Vulnerability #38",
    "commit_hash": "9b75694cedfa4825d4a2330abf2719d470c654cd",
    "git_url": "https://github.com/LoboEvolution/LoboEvolution/commit/9b75694cedfa4825d4a2330abf2719d470c654cd",
    "file_path": "HTML_Renderer/src/main/java/org/loboevolution/html/js/xml/XMLDocument.java",
    "func_name": "loadFile",
    "func_before": "private void loadFile(String fileStr) {\n\t\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n\t\ttry {\n\t\t\tDocumentBuilder builder = factory.newDocumentBuilder();\n\t\t\tFile f = new File(fileStr);\n\t\t\tif (f.isFile()) {\n\t\t\t\tdoc = builder.parse(fileStr);\n\t\t\t} else {\n\t\t\t\tInputStream is = new ByteArrayInputStream(fileStr.getBytes());\n\t\t\t\tdoc = builder.parse(is);\n\t\t\t}\n\t\t\tdoc.getDocumentElement().normalize();\n\t\t} catch (SAXException | IOException | ParserConfigurationException e) {\n\t\t\tlogger.error(e);\n\t\t}\n\t}",
    "abstract_func_before": "private void loadFile(String VAR_0) {\n\t\tDocumentBuilderFactory VAR_1 = VAR_2.newInstance();\n\t\ttry {\n\t\t\tDocumentBuilder VAR_3 = VAR_1.newDocumentBuilder();\n\t\t\tFile VAR_4 = new File(VAR_0);\n\t\t\tif (VAR_4.isFile()) {\n\t\t\t\tVAR_5 = VAR_3.parse(VAR_0);\n\t\t\t} else {\n\t\t\t\tInputStream VAR_6 = new ByteArrayInputStream(VAR_0.getBytes());\n\t\t\t\tVAR_5 = VAR_3.parse(VAR_6);\n\t\t\t}\n\t\t\tVAR_5.getDocumentElement().normalize();\n\t\t} catch (SAXException | IOException | ParserConfigurationException VAR_7) {\n\t\t\tVAR_8.error(VAR_7);\n\t\t}\n\t}",
    "func_graph_path_before": "LoboEvolution/9b75694cedfa4825d4a2330abf2719d470c654cd/XMLDocument.java/vul/before/0.json",
    "func": "private void loadFile(String fileStr) {\n\t\t\n\t\tString FEATURE = \"\";\n\t\ttry {\n\t\t\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n\t\t\t\n\t\t\tFEATURE = \"http://apache.org/xml/features/disallow-doctype-decl\";\n\t\t\tfactory.setFeature(FEATURE, true);\n\n\t\t\tFEATURE = \"http://xml.org/sax/features/external-general-entities\";\n\t\t\tfactory.setFeature(FEATURE, false);\n\n\t\t\tFEATURE = \"http://xml.org/sax/features/external-parameter-entities\";\n\t\t\tfactory.setFeature(FEATURE, false);\n\n\t\t\tFEATURE = \"http://apache.org/xml/features/nonvalidating/load-external-dtd\";\n\t\t\tfactory.setFeature(FEATURE, false);\n\t\t\t\n\t\t\tfactory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);\n\t\t\tfactory.setXIncludeAware(false);\n\t\t\tfactory.setExpandEntityReferences(false);\n\t\t\t\n\t\t\tDocumentBuilder builder = factory.newDocumentBuilder();\n\t\t\tFile f = new File(fileStr);\n\t\t\tif (f.isFile()) {\n\t\t\t\tdoc = builder.parse(fileStr);\n\t\t\t} else {\n\t\t\t\tInputStream is = new ByteArrayInputStream(fileStr.getBytes());\n\t\t\t\tdoc = builder.parse(is);\n\t\t\t}\n\t\t\tdoc.getDocumentElement().normalize();\n\t\t} catch (ParserConfigurationException e) {\n\t\t\tlogger.info(FEATURE +  \" is not supported\");\n\t\t} catch (SAXException e) {\n\t\t\tlogger.warn(\"A DOCTYPE was passed into the XML document\");\n\t\t} catch (IOException e) {\n\t\t\tlogger.error(\"IOException occurred, XXE may still possible: \" + e.getMessage());\n\t\t}\n\t}",
    "abstract_func": "private void loadFile(String VAR_0) {\n\t\t\n\t\tString VAR_1 = \"\";\n\t\ttry {\n\t\t\tDocumentBuilderFactory VAR_2 = VAR_3.newInstance();\n\t\t\t\n\t\t\tVAR_1 = \"http://apache.org/xml/features/disallow-doctype-decl\";\n\t\t\tVAR_2.setFeature(VAR_1, true);\n\n\t\t\tVAR_1 = \"http://xml.org/sax/features/external-general-entities\";\n\t\t\tVAR_2.setFeature(VAR_1, false);\n\n\t\t\tVAR_1 = \"http://xml.org/sax/features/external-parameter-entities\";\n\t\t\tVAR_2.setFeature(VAR_1, false);\n\n\t\t\tVAR_1 = \"http://apache.org/xml/features/nonvalidating/load-external-dtd\";\n\t\t\tVAR_2.setFeature(VAR_1, false);\n\t\t\t\n\t\t\tVAR_2.setFeature(VAR_4.FEATURE_SECURE_PROCESSING, true);\n\t\t\tVAR_2.setXIncludeAware(false);\n\t\t\tVAR_2.setExpandEntityReferences(false);\n\t\t\t\n\t\t\tDocumentBuilder VAR_5 = VAR_2.newDocumentBuilder();\n\t\t\tFile VAR_6 = new File(VAR_0);\n\t\t\tif (VAR_6.isFile()) {\n\t\t\t\tVAR_7 = VAR_5.parse(VAR_0);\n\t\t\t} else {\n\t\t\t\tInputStream VAR_8 = new ByteArrayInputStream(VAR_0.getBytes());\n\t\t\t\tVAR_7 = VAR_5.parse(VAR_8);\n\t\t\t}\n\t\t\tVAR_7.getDocumentElement().normalize();\n\t\t} catch (ParserConfigurationException VAR_9) {\n\t\t\tVAR_10.info(VAR_1 +  \" is not supported\");\n\t\t} catch (SAXException VAR_9) {\n\t\t\tVAR_10.warn(\"A DOCTYPE was passed into the XML document\");\n\t\t} catch (IOException VAR_9) {\n\t\t\tVAR_10.error(\"IOException occurred, XXE may still possible: \" + VAR_9.getMessage());\n\t\t}\n\t}",
    "func_graph_path": "LoboEvolution/9b75694cedfa4825d4a2330abf2719d470c654cd/XMLDocument.java/vul/after/0.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -1,6 +1,25 @@\n private void loadFile(String fileStr) {\n-\t\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n+\t\t\n+\t\tString FEATURE = \"\";\n \t\ttry {\n+\t\t\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n+\t\t\t\n+\t\t\tFEATURE = \"http://apache.org/xml/features/disallow-doctype-decl\";\n+\t\t\tfactory.setFeature(FEATURE, true);\n+\n+\t\t\tFEATURE = \"http://xml.org/sax/features/external-general-entities\";\n+\t\t\tfactory.setFeature(FEATURE, false);\n+\n+\t\t\tFEATURE = \"http://xml.org/sax/features/external-parameter-entities\";\n+\t\t\tfactory.setFeature(FEATURE, false);\n+\n+\t\t\tFEATURE = \"http://apache.org/xml/features/nonvalidating/load-external-dtd\";\n+\t\t\tfactory.setFeature(FEATURE, false);\n+\t\t\t\n+\t\t\tfactory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);\n+\t\t\tfactory.setXIncludeAware(false);\n+\t\t\tfactory.setExpandEntityReferences(false);\n+\t\t\t\n \t\t\tDocumentBuilder builder = factory.newDocumentBuilder();\n \t\t\tFile f = new File(fileStr);\n \t\t\tif (f.isFile()) {\n@@ -10,7 +29,11 @@\n \t\t\t\tdoc = builder.parse(is);\n \t\t\t}\n \t\t\tdoc.getDocumentElement().normalize();\n-\t\t} catch (SAXException | IOException | ParserConfigurationException e) {\n-\t\t\tlogger.error(e);\n+\t\t} catch (ParserConfigurationException e) {\n+\t\t\tlogger.info(FEATURE +  \" is not supported\");\n+\t\t} catch (SAXException e) {\n+\t\t\tlogger.warn(\"A DOCTYPE was passed into the XML document\");\n+\t\t} catch (IOException e) {\n+\t\t\tlogger.error(\"IOException occurred, XXE may still possible: \" + e.getMessage());\n \t\t}\n \t}",
    "diff_line_info": {
        "deleted_lines": [
            "\t\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();",
            "\t\t} catch (SAXException | IOException | ParserConfigurationException e) {",
            "\t\t\tlogger.error(e);"
        ],
        "added_lines": [
            "\t\t",
            "\t\tString FEATURE = \"\";",
            "\t\t\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();",
            "\t\t\t",
            "\t\t\tFEATURE = \"http://apache.org/xml/features/disallow-doctype-decl\";",
            "\t\t\tfactory.setFeature(FEATURE, true);",
            "",
            "\t\t\tFEATURE = \"http://xml.org/sax/features/external-general-entities\";",
            "\t\t\tfactory.setFeature(FEATURE, false);",
            "",
            "\t\t\tFEATURE = \"http://xml.org/sax/features/external-parameter-entities\";",
            "\t\t\tfactory.setFeature(FEATURE, false);",
            "",
            "\t\t\tFEATURE = \"http://apache.org/xml/features/nonvalidating/load-external-dtd\";",
            "\t\t\tfactory.setFeature(FEATURE, false);",
            "\t\t\t",
            "\t\t\tfactory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);",
            "\t\t\tfactory.setXIncludeAware(false);",
            "\t\t\tfactory.setExpandEntityReferences(false);",
            "\t\t\t",
            "\t\t} catch (ParserConfigurationException e) {",
            "\t\t\tlogger.info(FEATURE +  \" is not supported\");",
            "\t\t} catch (SAXException e) {",
            "\t\t\tlogger.warn(\"A DOCTYPE was passed into the XML document\");",
            "\t\t} catch (IOException e) {",
            "\t\t\tlogger.error(\"IOException occurred, XXE may still possible: \" + e.getMessage());"
        ]
    },
    "is_vul": true,
    "pr_url": null,
    "description": "no more info"
}