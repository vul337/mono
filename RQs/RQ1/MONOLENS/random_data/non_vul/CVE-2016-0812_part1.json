{
    "cve_id": "CVE-2016-0812",
    "cwe_ids": [
        "CWE-264"
    ],
    "cvss_vector": "AV:L/AC:L/Au:N/C:N/I:C/A:C",
    "cvss_is_v3": false,
    "repo_name": "android",
    "commit_msg": "DO NOT MERGE. Prevent recents from coming up when in SUW\n\nBug: 25229538\nChange-Id: If4f276d3f7c04fd89011068d90a3c3c60593bc05\n",
    "commit_hash": "84669ca8de55d38073a0dcb01074233b0a417541",
    "git_url": "https://android.googlesource.com/platform%2Fframeworks%2Fbase/+/84669ca8de55d38073a0dcb01074233b0a417541",
    "file_path": "policy/src/com/android/internal/policy/impl/PhoneWindowManager.java",
    "func_name": "interceptKeyBeforeDispatching",
    "func_before": "@Override\n    public long interceptKeyBeforeDispatching(WindowState win, KeyEvent event, int policyFlags) {\n        final boolean keyguardOn = keyguardOn();\n        final int keyCode = event.getKeyCode();\n        final int repeatCount = event.getRepeatCount();\n        final int metaState = event.getMetaState();\n        final int flags = event.getFlags();\n        final boolean down = event.getAction() == KeyEvent.ACTION_DOWN;\n        final boolean canceled = event.isCanceled();\n\n        if (DEBUG_INPUT) {\n            Log.d(TAG, \"interceptKeyTi keyCode=\" + keyCode + \" down=\" + down + \" repeatCount=\"\n                    + repeatCount + \" keyguardOn=\" + keyguardOn + \" mHomePressed=\" + mHomePressed\n                    + \" canceled=\" + canceled);\n        }\n\n        // If we think we might have a volume down & power key chord on the way\n        // but we're not sure, then tell the dispatcher to wait a little while and\n        // try again later before dispatching.\n        if (mScreenshotChordEnabled && (flags & KeyEvent.FLAG_FALLBACK) == 0) {\n            if (mScreenshotChordVolumeDownKeyTriggered && !mScreenshotChordPowerKeyTriggered) {\n                final long now = SystemClock.uptimeMillis();\n                final long timeoutTime = mScreenshotChordVolumeDownKeyTime\n                        + SCREENSHOT_CHORD_DEBOUNCE_DELAY_MILLIS;\n                if (now < timeoutTime) {\n                    return timeoutTime - now;\n                }\n            }\n            if (keyCode == KeyEvent.KEYCODE_VOLUME_DOWN\n                    && mScreenshotChordVolumeDownKeyConsumed) {\n                if (!down) {\n                    mScreenshotChordVolumeDownKeyConsumed = false;\n                }\n                return -1;\n            }\n        }\n\n        // Cancel any pending meta actions if we see any other keys being pressed between the down\n        // of the meta key and its corresponding up.\n        if (mPendingMetaAction && !KeyEvent.isMetaKey(keyCode)) {\n            mPendingMetaAction = false;\n        }\n\n        // First we always handle the home key here, so applications\n        // can never break it, although if keyguard is on, we do let\n        // it handle it, because that gives us the correct 5 second\n        // timeout.\n        if (keyCode == KeyEvent.KEYCODE_HOME) {\n\n            // If we have released the home key, and didn't do anything else\n            // while it was pressed, then it is time to go home!\n            if (!down) {\n                cancelPreloadRecentApps();\n\n                mHomePressed = false;\n                if (mHomeConsumed) {\n                    mHomeConsumed = false;\n                    return -1;\n                }\n\n                if (canceled) {\n                    Log.i(TAG, \"Ignoring HOME; event canceled.\");\n                    return -1;\n                }\n\n                // If an incoming call is ringing, HOME is totally disabled.\n                // (The user is already on the InCallUI at this point,\n                // and his ONLY options are to answer or reject the call.)\n                TelecomManager telecomManager = getTelecommService();\n                if (telecomManager != null && telecomManager.isRinging()) {\n                    Log.i(TAG, \"Ignoring HOME; there's a ringing incoming call.\");\n                    return -1;\n                }\n\n                // Delay handling home if a double-tap is possible.\n                if (mDoubleTapOnHomeBehavior != DOUBLE_TAP_HOME_NOTHING) {\n                    mHandler.removeCallbacks(mHomeDoubleTapTimeoutRunnable); // just in case\n                    mHomeDoubleTapPending = true;\n                    mHandler.postDelayed(mHomeDoubleTapTimeoutRunnable,\n                            ViewConfiguration.getDoubleTapTimeout());\n                    return -1;\n                }\n\n                handleShortPressOnHome();\n                return -1;\n            }\n\n            // If a system window has focus, then it doesn't make sense\n            // right now to interact with applications.\n            WindowManager.LayoutParams attrs = win != null ? win.getAttrs() : null;\n            if (attrs != null) {\n                final int type = attrs.type;\n                if (type == WindowManager.LayoutParams.TYPE_KEYGUARD_SCRIM\n                        || type == WindowManager.LayoutParams.TYPE_KEYGUARD_DIALOG\n                        || (attrs.privateFlags & PRIVATE_FLAG_KEYGUARD) != 0) {\n                    // the \"app\" is keyguard, so give it the key\n                    return 0;\n                }\n                final int typeCount = WINDOW_TYPES_WHERE_HOME_DOESNT_WORK.length;\n                for (int i=0; i<typeCount; i++) {\n                    if (type == WINDOW_TYPES_WHERE_HOME_DOESNT_WORK[i]) {\n                        // don't do anything, but also don't pass it to the app\n                        return -1;\n                    }\n                }\n            }\n\n            // Remember that home is pressed and handle special actions.\n            if (repeatCount == 0) {\n                mHomePressed = true;\n                if (mHomeDoubleTapPending) {\n                    mHomeDoubleTapPending = false;\n                    mHandler.removeCallbacks(mHomeDoubleTapTimeoutRunnable);\n                    handleDoubleTapOnHome();\n                } else if (mLongPressOnHomeBehavior == LONG_PRESS_HOME_RECENT_SYSTEM_UI\n                        || mDoubleTapOnHomeBehavior == DOUBLE_TAP_HOME_RECENT_SYSTEM_UI) {\n                    preloadRecentApps();\n                }\n            } else if ((event.getFlags() & KeyEvent.FLAG_LONG_PRESS) != 0) {\n                if (!keyguardOn) {\n                    handleLongPressOnHome();\n                }\n            }\n            return -1;\n        } else if (keyCode == KeyEvent.KEYCODE_MENU) {\n            // Hijack modified menu keys for debugging features\n            final int chordBug = KeyEvent.META_SHIFT_ON;\n\n            if (down && repeatCount == 0) {\n                if (mEnableShiftMenuBugReports && (metaState & chordBug) == chordBug) {\n                    Intent intent = new Intent(Intent.ACTION_BUG_REPORT);\n                    mContext.sendOrderedBroadcastAsUser(intent, UserHandle.CURRENT,\n                            null, null, null, 0, null, null);\n                    return -1;\n                } else if (SHOW_PROCESSES_ON_ALT_MENU &&\n                        (metaState & KeyEvent.META_ALT_ON) == KeyEvent.META_ALT_ON) {\n                    Intent service = new Intent();\n                    service.setClassName(mContext, \"com.android.server.LoadAverageService\");\n                    ContentResolver res = mContext.getContentResolver();\n                    boolean shown = Settings.Global.getInt(\n                            res, Settings.Global.SHOW_PROCESSES, 0) != 0;\n                    if (!shown) {\n                        mContext.startService(service);\n                    } else {\n                        mContext.stopService(service);\n                    }\n                    Settings.Global.putInt(\n                            res, Settings.Global.SHOW_PROCESSES, shown ? 0 : 1);\n                    return -1;\n                }\n            }\n        } else if (keyCode == KeyEvent.KEYCODE_SEARCH) {\n            if (down) {\n                if (repeatCount == 0) {\n                    mSearchKeyShortcutPending = true;\n                    mConsumeSearchKeyUp = false;\n                }\n            } else {\n                mSearchKeyShortcutPending = false;\n                if (mConsumeSearchKeyUp) {\n                    mConsumeSearchKeyUp = false;\n                    return -1;\n                }\n            }\n            return 0;\n        } else if (keyCode == KeyEvent.KEYCODE_APP_SWITCH) {\n            if (!keyguardOn) {\n                if (down && repeatCount == 0) {\n                    preloadRecentApps();\n                } else if (!down) {\n                    toggleRecentApps();\n                }\n            }\n            return -1;\n        } else if (keyCode == KeyEvent.KEYCODE_ASSIST) {\n            if (down) {\n                if (repeatCount == 0) {\n                    mAssistKeyLongPressed = false;\n                } else if (repeatCount == 1) {\n                    mAssistKeyLongPressed = true;\n                    if (!keyguardOn) {\n                         launchAssistLongPressAction();\n                    }\n                }\n            } else {\n                if (mAssistKeyLongPressed) {\n                    mAssistKeyLongPressed = false;\n                } else {\n                    if (!keyguardOn) {\n                        launchAssistAction();\n                    }\n                }\n            }\n            return -1;\n        } else if (keyCode == KeyEvent.KEYCODE_VOICE_ASSIST) {\n            if (!down) {\n                Intent voiceIntent;\n                if (!keyguardOn) {\n                    voiceIntent = new Intent(RecognizerIntent.ACTION_WEB_SEARCH);\n                } else {\n                    voiceIntent = new Intent(RecognizerIntent.ACTION_VOICE_SEARCH_HANDS_FREE);\n                    voiceIntent.putExtra(RecognizerIntent.EXTRA_SECURE, true);\n                }\n                startActivityAsUser(voiceIntent, UserHandle.CURRENT_OR_SELF);\n            }\n        } else if (keyCode == KeyEvent.KEYCODE_SYSRQ) {\n            if (down && repeatCount == 0) {\n                mHandler.post(mScreenshotRunnable);\n            }\n            return -1;\n        } else if (keyCode == KeyEvent.KEYCODE_BRIGHTNESS_UP\n                || keyCode == KeyEvent.KEYCODE_BRIGHTNESS_DOWN) {\n            if (down) {\n                int direction = keyCode == KeyEvent.KEYCODE_BRIGHTNESS_UP ? 1 : -1;\n\n                // Disable autobrightness if it's on\n                int auto = Settings.System.getIntForUser(\n                        mContext.getContentResolver(),\n                        Settings.System.SCREEN_BRIGHTNESS_MODE,\n                        Settings.System.SCREEN_BRIGHTNESS_MODE_MANUAL,\n                        UserHandle.USER_CURRENT_OR_SELF);\n                if (auto != 0) {\n                    Settings.System.putIntForUser(mContext.getContentResolver(),\n                            Settings.System.SCREEN_BRIGHTNESS_MODE,\n                            Settings.System.SCREEN_BRIGHTNESS_MODE_MANUAL,\n                            UserHandle.USER_CURRENT_OR_SELF);\n                }\n\n                int min = mPowerManager.getMinimumScreenBrightnessSetting();\n                int max = mPowerManager.getMaximumScreenBrightnessSetting();\n                int step = (max - min + BRIGHTNESS_STEPS - 1) / BRIGHTNESS_STEPS * direction;\n                int brightness = Settings.System.getIntForUser(mContext.getContentResolver(),\n                        Settings.System.SCREEN_BRIGHTNESS,\n                        mPowerManager.getDefaultScreenBrightnessSetting(),\n                        UserHandle.USER_CURRENT_OR_SELF);\n                brightness += step;\n                // Make sure we don't go beyond the limits.\n                brightness = Math.min(max, brightness);\n                brightness = Math.max(min, brightness);\n\n                Settings.System.putIntForUser(mContext.getContentResolver(),\n                        Settings.System.SCREEN_BRIGHTNESS, brightness,\n                        UserHandle.USER_CURRENT_OR_SELF);\n                startActivityAsUser(new Intent(Intent.ACTION_SHOW_BRIGHTNESS_DIALOG),\n                        UserHandle.CURRENT_OR_SELF);\n            }\n            return -1;\n        } else if (KeyEvent.isMetaKey(keyCode)) {\n            if (down) {\n                mPendingMetaAction = true;\n            } else if (mPendingMetaAction) {\n                launchAssistAction(Intent.EXTRA_ASSIST_INPUT_HINT_KEYBOARD);\n            }\n            return -1;\n        }\n\n        // Shortcuts are invoked through Search+key, so intercept those here\n        // Any printing key that is chorded with Search should be consumed\n        // even if no shortcut was invoked.  This prevents text from being\n        // inadvertently inserted when using a keyboard that has built-in macro\n        // shortcut keys (that emit Search+x) and some of them are not registered.\n        if (mSearchKeyShortcutPending) {\n            final KeyCharacterMap kcm = event.getKeyCharacterMap();\n            if (kcm.isPrintingKey(keyCode)) {\n                mConsumeSearchKeyUp = true;\n                mSearchKeyShortcutPending = false;\n                if (down && repeatCount == 0 && !keyguardOn) {\n                    Intent shortcutIntent = mShortcutManager.getIntent(kcm, keyCode, metaState);\n                    if (shortcutIntent != null) {\n                        shortcutIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n                        try {\n                            startActivityAsUser(shortcutIntent, UserHandle.CURRENT);\n                        } catch (ActivityNotFoundException ex) {\n                            Slog.w(TAG, \"Dropping shortcut key combination because \"\n                                    + \"the activity to which it is registered was not found: \"\n                                    + \"SEARCH+\" + KeyEvent.keyCodeToString(keyCode), ex);\n                        }\n                    } else {\n                        Slog.i(TAG, \"Dropping unregistered shortcut key combination: \"\n                                + \"SEARCH+\" + KeyEvent.keyCodeToString(keyCode));\n                    }\n                }\n                return -1;\n            }\n        }\n\n        // Invoke shortcuts using Meta.\n        if (down && repeatCount == 0 && !keyguardOn\n                && (metaState & KeyEvent.META_META_ON) != 0) {\n            final KeyCharacterMap kcm = event.getKeyCharacterMap();\n            if (kcm.isPrintingKey(keyCode)) {\n                Intent shortcutIntent = mShortcutManager.getIntent(kcm, keyCode,\n                        metaState & ~(KeyEvent.META_META_ON\n                                | KeyEvent.META_META_LEFT_ON | KeyEvent.META_META_RIGHT_ON));\n                if (shortcutIntent != null) {\n                    shortcutIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n                    try {\n                        startActivityAsUser(shortcutIntent, UserHandle.CURRENT);\n                    } catch (ActivityNotFoundException ex) {\n                        Slog.w(TAG, \"Dropping shortcut key combination because \"\n                                + \"the activity to which it is registered was not found: \"\n                                + \"META+\" + KeyEvent.keyCodeToString(keyCode), ex);\n                    }\n                    return -1;\n                }\n            }\n        }\n\n        // Handle application launch keys.\n        if (down && repeatCount == 0 && !keyguardOn) {\n            String category = sApplicationLaunchKeyCategories.get(keyCode);\n            if (category != null) {\n                Intent intent = Intent.makeMainSelectorActivity(Intent.ACTION_MAIN, category);\n                intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n                try {\n                    startActivityAsUser(intent, UserHandle.CURRENT);\n                } catch (ActivityNotFoundException ex) {\n                    Slog.w(TAG, \"Dropping application launch key because \"\n                            + \"the activity to which it is registered was not found: \"\n                            + \"keyCode=\" + keyCode + \", category=\" + category, ex);\n                }\n                return -1;\n            }\n        }\n\n        // Display task switcher for ALT-TAB.\n        if (down && repeatCount == 0 && keyCode == KeyEvent.KEYCODE_TAB) {\n            if (mRecentAppsHeldModifiers == 0 && !keyguardOn) {\n                final int shiftlessModifiers = event.getModifiers() & ~KeyEvent.META_SHIFT_MASK;\n                if (KeyEvent.metaStateHasModifiers(shiftlessModifiers, KeyEvent.META_ALT_ON)) {\n                    mRecentAppsHeldModifiers = shiftlessModifiers;\n                    showRecentApps(true);\n                    return -1;\n                }\n            }\n        } else if (!down && mRecentAppsHeldModifiers != 0\n                && (metaState & mRecentAppsHeldModifiers) == 0) {\n            mRecentAppsHeldModifiers = 0;\n            hideRecentApps(true, false);\n        }\n\n        // Handle keyboard language switching.\n        if (down && repeatCount == 0\n                && (keyCode == KeyEvent.KEYCODE_LANGUAGE_SWITCH\n                        || (keyCode == KeyEvent.KEYCODE_SPACE\n                                && (metaState & KeyEvent.META_CTRL_MASK) != 0))) {\n            int direction = (metaState & KeyEvent.META_SHIFT_MASK) != 0 ? -1 : 1;\n            mWindowManagerFuncs.switchKeyboardLayout(event.getDeviceId(), direction);\n            return -1;\n        }\n        if (mLanguageSwitchKeyPressed && !down\n                && (keyCode == KeyEvent.KEYCODE_LANGUAGE_SWITCH\n                        || keyCode == KeyEvent.KEYCODE_SPACE)) {\n            mLanguageSwitchKeyPressed = false;\n            return -1;\n        }\n\n        if (isValidGlobalKey(keyCode)\n                && mGlobalKeyManager.handleGlobalKey(mContext, keyCode, event)) {\n            return -1;\n        }\n\n        // Reserve all the META modifier combos for system behavior\n        if ((metaState & KeyEvent.META_META_ON) != 0) {\n            return -1;\n        }\n\n        // Let the application handle the key.\n        return 0;\n    }",
    "abstract_func_before": "@Override\n    public long interceptKeyBeforeDispatching(WindowState VAR_0, KeyEvent VAR_1, int VAR_2) {\n        final boolean VAR_3 = keyguardOn();\n        final int VAR_4 = VAR_1.getKeyCode();\n        final int VAR_5 = VAR_1.getRepeatCount();\n        final int VAR_6 = VAR_1.getMetaState();\n        final int VAR_7 = VAR_1.getFlags();\n        final boolean VAR_8 = VAR_1.getAction() == VAR_9.ACTION_DOWN;\n        final boolean VAR_10 = VAR_1.isCanceled();\n\n        if (VAR_11) {\n            VAR_12.d(VAR_13, \"interceptKeyTi keyCode=\" + VAR_4 + \" down=\" + VAR_8 + \" repeatCount=\"\n                    + VAR_5 + \" keyguardOn=\" + VAR_3 + \" mHomePressed=\" + VAR_14\n                    + \" canceled=\" + VAR_10);\n        }\n\n        /* COMMENT_0 */\n        /* COMMENT_1 */\n        /* COMMENT_2 */\n        if (VAR_15 && (VAR_7 & VAR_9.FLAG_FALLBACK) == 0) {\n            if (VAR_16 && !VAR_17) {\n                final long VAR_18 = VAR_19.uptimeMillis();\n                final long VAR_20 = VAR_21\n                        + VAR_22;\n                if (VAR_18 < VAR_20) {\n                    return VAR_20 - VAR_18;\n                }\n            }\n            if (VAR_4 == VAR_9.KEYCODE_VOLUME_DOWN\n                    && VAR_23) {\n                if (!VAR_8) {\n                    VAR_23 = false;\n                }\n                return -1;\n            }\n        }\n\n        /* COMMENT_3 */\n        /* COMMENT_4 */\n        if (VAR_24 && !VAR_9.isMetaKey(VAR_4)) {\n            VAR_24 = false;\n        }\n\n        /* COMMENT_5 */\n        /* COMMENT_6 */\n        /* COMMENT_7 */\n        /* COMMENT_8 */\n        if (VAR_4 == VAR_9.KEYCODE_HOME) {\n\n            /* COMMENT_9 */\n            /* COMMENT_10 */\n            if (!VAR_8) {\n                cancelPreloadRecentApps();\n\n                VAR_14 = false;\n                if (VAR_25) {\n                    VAR_25 = false;\n                    return -1;\n                }\n\n                if (VAR_10) {\n                    VAR_12.i(VAR_13, \"Ignoring HOME; event canceled.\");\n                    return -1;\n                }\n\n                /* COMMENT_11 */\n                /* COMMENT_12 */\n                /* COMMENT_13 */\n                TelecomManager VAR_26 = getTelecommService();\n                if (VAR_26 != null && VAR_26.isRinging()) {\n                    VAR_12.i(VAR_13, \"Ignoring HOME; there's a ringing incoming call.\");\n                    return -1;\n                }\n\n                /* COMMENT_14 */\n                if (VAR_27 != VAR_28) {\n                    VAR_29.removeCallbacks(VAR_30); /* COMMENT_15 */\n                    VAR_31 = true;\n                    VAR_29.postDelayed(VAR_30,\n                            VAR_32.getDoubleTapTimeout());\n                    return -1;\n                }\n\n                handleShortPressOnHome();\n                return -1;\n            }\n\n            /* COMMENT_16 */\n            /* COMMENT_17 */\n            WindowManager.LayoutParams VAR_33 = VAR_0 != null ? VAR_0.getAttrs() : null;\n            if (VAR_33 != null) {\n                final int VAR_34 = VAR_33.type;\n                if (VAR_34 == VAR_35.LayoutParams.TYPE_KEYGUARD_SCRIM\n                        || VAR_34 == VAR_35.LayoutParams.TYPE_KEYGUARD_DIALOG\n                        || (VAR_33.privateFlags & VAR_36) != 0) {\n                    /* COMMENT_18 */\n                    return 0;\n                }\n                final int VAR_37 = VAR_38.length;\n                for (int VAR_39=0; VAR_39<VAR_37; VAR_39++) {\n                    if (VAR_34 == VAR_38[VAR_39]) {\n                        /* COMMENT_19 */\n                        return -1;\n                    }\n                }\n            }\n\n            /* COMMENT_20 */\n            if (VAR_5 == 0) {\n                VAR_14 = true;\n                if (VAR_31) {\n                    VAR_31 = false;\n                    VAR_29.removeCallbacks(VAR_30);\n                    handleDoubleTapOnHome();\n                } else if (VAR_40 == VAR_41\n                        || VAR_27 == VAR_42) {\n                    preloadRecentApps();\n                }\n            } else if ((VAR_1.getFlags() & VAR_9.FLAG_LONG_PRESS) != 0) {\n                if (!VAR_3) {\n                    handleLongPressOnHome();\n                }\n            }\n            return -1;\n        } else if (VAR_4 == VAR_9.KEYCODE_MENU) {\n            /* COMMENT_21 */\n            final int VAR_43 = VAR_9.META_SHIFT_ON;\n\n            if (VAR_8 && VAR_5 == 0) {\n                if (VAR_44 && (VAR_6 & VAR_43) == VAR_43) {\n                    Intent VAR_45 = new Intent(VAR_46.ACTION_BUG_REPORT);\n                    VAR_47.sendOrderedBroadcastAsUser(VAR_45, VAR_48.CURRENT,\n                            null, null, null, 0, null, null);\n                    return -1;\n                } else if (VAR_49 &&\n                        (VAR_6 & VAR_9.META_ALT_ON) == VAR_9.META_ALT_ON) {\n                    Intent VAR_50 = new Intent();\n                    VAR_50.setClassName(VAR_47, \"com.android.server.LoadAverageService\");\n                    ContentResolver VAR_51 = VAR_47.getContentResolver();\n                    boolean VAR_52 = VAR_53.Global.getInt(\n                            VAR_51, VAR_53.Global.SHOW_PROCESSES, 0) != 0;\n                    if (!VAR_52) {\n                        VAR_47.startService(VAR_50);\n                    } else {\n                        VAR_47.stopService(VAR_50);\n                    }\n                    VAR_53.Global.putInt(\n                            VAR_51, VAR_53.Global.SHOW_PROCESSES, VAR_52 ? 0 : 1);\n                    return -1;\n                }\n            }\n        } else if (VAR_4 == VAR_9.KEYCODE_SEARCH) {\n            if (VAR_8) {\n                if (VAR_5 == 0) {\n                    VAR_54 = true;\n                    VAR_55 = false;\n                }\n            } else {\n                VAR_54 = false;\n                if (VAR_55) {\n                    VAR_55 = false;\n                    return -1;\n                }\n            }\n            return 0;\n        } else if (VAR_4 == VAR_9.KEYCODE_APP_SWITCH) {\n            if (!VAR_3) {\n                if (VAR_8 && VAR_5 == 0) {\n                    preloadRecentApps();\n                } else if (!VAR_8) {\n                    toggleRecentApps();\n                }\n            }\n            return -1;\n        } else if (VAR_4 == VAR_9.KEYCODE_ASSIST) {\n            if (VAR_8) {\n                if (VAR_5 == 0) {\n                    VAR_56 = false;\n                } else if (VAR_5 == 1) {\n                    VAR_56 = true;\n                    if (!VAR_3) {\n                         launchAssistLongPressAction();\n                    }\n                }\n            } else {\n                if (VAR_56) {\n                    VAR_56 = false;\n                } else {\n                    if (!VAR_3) {\n                        launchAssistAction();\n                    }\n                }\n            }\n            return -1;\n        } else if (VAR_4 == VAR_9.KEYCODE_VOICE_ASSIST) {\n            if (!VAR_8) {\n                Intent VAR_57;\n                if (!VAR_3) {\n                    VAR_57 = new Intent(VAR_58.ACTION_WEB_SEARCH);\n                } else {\n                    VAR_57 = new Intent(VAR_58.ACTION_VOICE_SEARCH_HANDS_FREE);\n                    VAR_57.putExtra(VAR_58.EXTRA_SECURE, true);\n                }\n                startActivityAsUser(VAR_57, VAR_48.CURRENT_OR_SELF);\n            }\n        } else if (VAR_4 == VAR_9.KEYCODE_SYSRQ) {\n            if (VAR_8 && VAR_5 == 0) {\n                VAR_29.post(VAR_59);\n            }\n            return -1;\n        } else if (VAR_4 == VAR_9.KEYCODE_BRIGHTNESS_UP\n                || VAR_4 == VAR_9.KEYCODE_BRIGHTNESS_DOWN) {\n            if (VAR_8) {\n                int VAR_60 = VAR_4 == VAR_9.KEYCODE_BRIGHTNESS_UP ? 1 : -1;\n\n                /* COMMENT_22 */\n                int VAR_61 = VAR_53.System.getIntForUser(\n                        VAR_47.getContentResolver(),\n                        VAR_53.System.SCREEN_BRIGHTNESS_MODE,\n                        VAR_53.System.SCREEN_BRIGHTNESS_MODE_MANUAL,\n                        VAR_48.USER_CURRENT_OR_SELF);\n                if (VAR_61 != 0) {\n                    VAR_53.System.putIntForUser(VAR_47.getContentResolver(),\n                            VAR_53.System.SCREEN_BRIGHTNESS_MODE,\n                            VAR_53.System.SCREEN_BRIGHTNESS_MODE_MANUAL,\n                            VAR_48.USER_CURRENT_OR_SELF);\n                }\n\n                int VAR_62 = VAR_63.getMinimumScreenBrightnessSetting();\n                int VAR_64 = VAR_63.getMaximumScreenBrightnessSetting();\n                int VAR_65 = (VAR_64 - VAR_62 + VAR_66 - 1) / VAR_66 * VAR_60;\n                int VAR_67 = VAR_53.System.getIntForUser(VAR_47.getContentResolver(),\n                        VAR_53.System.SCREEN_BRIGHTNESS,\n                        VAR_63.getDefaultScreenBrightnessSetting(),\n                        VAR_48.USER_CURRENT_OR_SELF);\n                VAR_67 += VAR_65;\n                /* COMMENT_23 */\n                VAR_67 = VAR_68.min(VAR_64, VAR_67);\n                VAR_67 = VAR_68.max(VAR_62, VAR_67);\n\n                VAR_53.System.putIntForUser(VAR_47.getContentResolver(),\n                        VAR_53.System.SCREEN_BRIGHTNESS, VAR_67,\n                        VAR_48.USER_CURRENT_OR_SELF);\n                startActivityAsUser(new Intent(VAR_46.ACTION_SHOW_BRIGHTNESS_DIALOG),\n                        VAR_48.CURRENT_OR_SELF);\n            }\n            return -1;\n        } else if (VAR_9.isMetaKey(VAR_4)) {\n            if (VAR_8) {\n                VAR_24 = true;\n            } else if (VAR_24) {\n                launchAssistAction(VAR_46.EXTRA_ASSIST_INPUT_HINT_KEYBOARD);\n            }\n            return -1;\n        }\n\n        /* COMMENT_24 */\n        /* COMMENT_25 */\n        /* COMMENT_26 */\n        /* COMMENT_27 */\n        /* COMMENT_28 */\n        if (VAR_54) {\n            final KeyCharacterMap VAR_69 = VAR_1.getKeyCharacterMap();\n            if (VAR_69.isPrintingKey(VAR_4)) {\n                VAR_55 = true;\n                VAR_54 = false;\n                if (VAR_8 && VAR_5 == 0 && !VAR_3) {\n                    Intent VAR_70 = VAR_71.getIntent(VAR_69, VAR_4, VAR_6);\n                    if (VAR_70 != null) {\n                        VAR_70.addFlags(VAR_46.FLAG_ACTIVITY_NEW_TASK);\n                        try {\n                            startActivityAsUser(VAR_70, VAR_48.CURRENT);\n                        } catch (ActivityNotFoundException VAR_72) {\n                            VAR_73.w(VAR_13, \"Dropping shortcut key combination because \"\n                                    + \"the activity to which it is registered was not found: \"\n                                    + \"SEARCH+\" + VAR_9.keyCodeToString(VAR_4), VAR_72);\n                        }\n                    } else {\n                        VAR_73.i(VAR_13, \"Dropping unregistered shortcut key combination: \"\n                                + \"SEARCH+\" + VAR_9.keyCodeToString(VAR_4));\n                    }\n                }\n                return -1;\n            }\n        }\n\n        /* COMMENT_29 */\n        if (VAR_8 && VAR_5 == 0 && !VAR_3\n                && (VAR_6 & VAR_9.META_META_ON) != 0) {\n            final KeyCharacterMap VAR_69 = VAR_1.getKeyCharacterMap();\n            if (VAR_69.isPrintingKey(VAR_4)) {\n                Intent VAR_70 = VAR_71.getIntent(VAR_69, VAR_4,\n                        VAR_6 & ~(VAR_9.META_META_ON\n                                | VAR_9.META_META_LEFT_ON | VAR_9.META_META_RIGHT_ON));\n                if (VAR_70 != null) {\n                    VAR_70.addFlags(VAR_46.FLAG_ACTIVITY_NEW_TASK);\n                    try {\n                        startActivityAsUser(VAR_70, VAR_48.CURRENT);\n                    } catch (ActivityNotFoundException VAR_72) {\n                        VAR_73.w(VAR_13, \"Dropping shortcut key combination because \"\n                                + \"the activity to which it is registered was not found: \"\n                                + \"META+\" + VAR_9.keyCodeToString(VAR_4), VAR_72);\n                    }\n                    return -1;\n                }\n            }\n        }\n\n        /* COMMENT_30 */\n        if (VAR_8 && VAR_5 == 0 && !VAR_3) {\n            String VAR_74 = VAR_75.get(VAR_4);\n            if (VAR_74 != null) {\n                Intent VAR_45 = VAR_46.makeMainSelectorActivity(VAR_46.ACTION_MAIN, VAR_74);\n                VAR_45.setFlags(VAR_46.FLAG_ACTIVITY_NEW_TASK);\n                try {\n                    startActivityAsUser(VAR_45, VAR_48.CURRENT);\n                } catch (ActivityNotFoundException VAR_72) {\n                    VAR_73.w(VAR_13, \"Dropping application launch key because \"\n                            + \"the activity to which it is registered was not found: \"\n                            + \"keyCode=\" + VAR_4 + \", category=\" + VAR_74, VAR_72);\n                }\n                return -1;\n            }\n        }\n\n        /* COMMENT_31 */\n        if (VAR_8 && VAR_5 == 0 && VAR_4 == VAR_9.KEYCODE_TAB) {\n            if (VAR_76 == 0 && !VAR_3) {\n                final int VAR_77 = VAR_1.getModifiers() & ~VAR_9.META_SHIFT_MASK;\n                if (VAR_9.metaStateHasModifiers(VAR_77, VAR_9.META_ALT_ON)) {\n                    VAR_76 = VAR_77;\n                    showRecentApps(true);\n                    return -1;\n                }\n            }\n        } else if (!VAR_8 && VAR_76 != 0\n                && (VAR_6 & VAR_76) == 0) {\n            VAR_76 = 0;\n            hideRecentApps(true, false);\n        }\n\n        /* COMMENT_32 */\n        if (VAR_8 && VAR_5 == 0\n                && (VAR_4 == VAR_9.KEYCODE_LANGUAGE_SWITCH\n                        || (VAR_4 == VAR_9.KEYCODE_SPACE\n                                && (VAR_6 & VAR_9.META_CTRL_MASK) != 0))) {\n            int VAR_60 = (VAR_6 & VAR_9.META_SHIFT_MASK) != 0 ? -1 : 1;\n            VAR_78.switchKeyboardLayout(VAR_1.getDeviceId(), VAR_60);\n            return -1;\n        }\n        if (VAR_79 && !VAR_8\n                && (VAR_4 == VAR_9.KEYCODE_LANGUAGE_SWITCH\n                        || VAR_4 == VAR_9.KEYCODE_SPACE)) {\n            VAR_79 = false;\n            return -1;\n        }\n\n        if (isValidGlobalKey(VAR_4)\n                && VAR_80.handleGlobalKey(VAR_47, VAR_4, VAR_1)) {\n            return -1;\n        }\n\n        /* COMMENT_33 */\n        if ((VAR_6 & VAR_9.META_META_ON) != 0) {\n            return -1;\n        }\n\n        /* COMMENT_34 */\n        return 0;\n    }",
    "func_graph_path_before": "android/84669ca8de55d38073a0dcb01074233b0a417541/PhoneWindowManager.java/vul/before/0.json",
    "func": "@Override\n    public long interceptKeyBeforeDispatching(WindowState win, KeyEvent event, int policyFlags) {\n        final boolean keyguardOn = keyguardOn();\n        final int keyCode = event.getKeyCode();\n        final int repeatCount = event.getRepeatCount();\n        final int metaState = event.getMetaState();\n        final int flags = event.getFlags();\n        final boolean down = event.getAction() == KeyEvent.ACTION_DOWN;\n        final boolean canceled = event.isCanceled();\n\n        if (DEBUG_INPUT) {\n            Log.d(TAG, \"interceptKeyTi keyCode=\" + keyCode + \" down=\" + down + \" repeatCount=\"\n                    + repeatCount + \" keyguardOn=\" + keyguardOn + \" mHomePressed=\" + mHomePressed\n                    + \" canceled=\" + canceled);\n        }\n\n        // If we think we might have a volume down & power key chord on the way\n        // but we're not sure, then tell the dispatcher to wait a little while and\n        // try again later before dispatching.\n        if (mScreenshotChordEnabled && (flags & KeyEvent.FLAG_FALLBACK) == 0) {\n            if (mScreenshotChordVolumeDownKeyTriggered && !mScreenshotChordPowerKeyTriggered) {\n                final long now = SystemClock.uptimeMillis();\n                final long timeoutTime = mScreenshotChordVolumeDownKeyTime\n                        + SCREENSHOT_CHORD_DEBOUNCE_DELAY_MILLIS;\n                if (now < timeoutTime) {\n                    return timeoutTime - now;\n                }\n            }\n            if (keyCode == KeyEvent.KEYCODE_VOLUME_DOWN\n                    && mScreenshotChordVolumeDownKeyConsumed) {\n                if (!down) {\n                    mScreenshotChordVolumeDownKeyConsumed = false;\n                }\n                return -1;\n            }\n        }\n\n        // Cancel any pending meta actions if we see any other keys being pressed between the down\n        // of the meta key and its corresponding up.\n        if (mPendingMetaAction && !KeyEvent.isMetaKey(keyCode)) {\n            mPendingMetaAction = false;\n        }\n\n        // First we always handle the home key here, so applications\n        // can never break it, although if keyguard is on, we do let\n        // it handle it, because that gives us the correct 5 second\n        // timeout.\n        if (keyCode == KeyEvent.KEYCODE_HOME) {\n\n            // If we have released the home key, and didn't do anything else\n            // while it was pressed, then it is time to go home!\n            if (!down) {\n                cancelPreloadRecentApps();\n\n                mHomePressed = false;\n                if (mHomeConsumed) {\n                    mHomeConsumed = false;\n                    return -1;\n                }\n\n                if (canceled) {\n                    Log.i(TAG, \"Ignoring HOME; event canceled.\");\n                    return -1;\n                }\n\n                // If an incoming call is ringing, HOME is totally disabled.\n                // (The user is already on the InCallUI at this point,\n                // and his ONLY options are to answer or reject the call.)\n                TelecomManager telecomManager = getTelecommService();\n                if (telecomManager != null && telecomManager.isRinging()) {\n                    Log.i(TAG, \"Ignoring HOME; there's a ringing incoming call.\");\n                    return -1;\n                }\n\n                // Delay handling home if a double-tap is possible.\n                if (mDoubleTapOnHomeBehavior != DOUBLE_TAP_HOME_NOTHING) {\n                    mHandler.removeCallbacks(mHomeDoubleTapTimeoutRunnable); // just in case\n                    mHomeDoubleTapPending = true;\n                    mHandler.postDelayed(mHomeDoubleTapTimeoutRunnable,\n                            ViewConfiguration.getDoubleTapTimeout());\n                    return -1;\n                }\n\n                handleShortPressOnHome();\n                return -1;\n            }\n\n            // If a system window has focus, then it doesn't make sense\n            // right now to interact with applications.\n            WindowManager.LayoutParams attrs = win != null ? win.getAttrs() : null;\n            if (attrs != null) {\n                final int type = attrs.type;\n                if (type == WindowManager.LayoutParams.TYPE_KEYGUARD_SCRIM\n                        || type == WindowManager.LayoutParams.TYPE_KEYGUARD_DIALOG\n                        || (attrs.privateFlags & PRIVATE_FLAG_KEYGUARD) != 0) {\n                    // the \"app\" is keyguard, so give it the key\n                    return 0;\n                }\n                final int typeCount = WINDOW_TYPES_WHERE_HOME_DOESNT_WORK.length;\n                for (int i=0; i<typeCount; i++) {\n                    if (type == WINDOW_TYPES_WHERE_HOME_DOESNT_WORK[i]) {\n                        // don't do anything, but also don't pass it to the app\n                        return -1;\n                    }\n                }\n            }\n\n            // Remember that home is pressed and handle special actions.\n            if (repeatCount == 0) {\n                mHomePressed = true;\n                if (mHomeDoubleTapPending) {\n                    mHomeDoubleTapPending = false;\n                    mHandler.removeCallbacks(mHomeDoubleTapTimeoutRunnable);\n                    handleDoubleTapOnHome();\n                } else if (mLongPressOnHomeBehavior == LONG_PRESS_HOME_RECENT_SYSTEM_UI\n                        || mDoubleTapOnHomeBehavior == DOUBLE_TAP_HOME_RECENT_SYSTEM_UI) {\n                    preloadRecentApps();\n                }\n            } else if ((event.getFlags() & KeyEvent.FLAG_LONG_PRESS) != 0) {\n                if (!keyguardOn) {\n                    handleLongPressOnHome();\n                }\n            }\n            return -1;\n        } else if (keyCode == KeyEvent.KEYCODE_MENU) {\n            // Hijack modified menu keys for debugging features\n            final int chordBug = KeyEvent.META_SHIFT_ON;\n\n            if (down && repeatCount == 0) {\n                if (mEnableShiftMenuBugReports && (metaState & chordBug) == chordBug) {\n                    Intent intent = new Intent(Intent.ACTION_BUG_REPORT);\n                    mContext.sendOrderedBroadcastAsUser(intent, UserHandle.CURRENT,\n                            null, null, null, 0, null, null);\n                    return -1;\n                } else if (SHOW_PROCESSES_ON_ALT_MENU &&\n                        (metaState & KeyEvent.META_ALT_ON) == KeyEvent.META_ALT_ON) {\n                    Intent service = new Intent();\n                    service.setClassName(mContext, \"com.android.server.LoadAverageService\");\n                    ContentResolver res = mContext.getContentResolver();\n                    boolean shown = Settings.Global.getInt(\n                            res, Settings.Global.SHOW_PROCESSES, 0) != 0;\n                    if (!shown) {\n                        mContext.startService(service);\n                    } else {\n                        mContext.stopService(service);\n                    }\n                    Settings.Global.putInt(\n                            res, Settings.Global.SHOW_PROCESSES, shown ? 0 : 1);\n                    return -1;\n                }\n            }\n        } else if (keyCode == KeyEvent.KEYCODE_SEARCH) {\n            if (down) {\n                if (repeatCount == 0) {\n                    mSearchKeyShortcutPending = true;\n                    mConsumeSearchKeyUp = false;\n                }\n            } else {\n                mSearchKeyShortcutPending = false;\n                if (mConsumeSearchKeyUp) {\n                    mConsumeSearchKeyUp = false;\n                    return -1;\n                }\n            }\n            return 0;\n        } else if (keyCode == KeyEvent.KEYCODE_APP_SWITCH) {\n            if (!keyguardOn) {\n                if (down && repeatCount == 0) {\n                    preloadRecentApps();\n                } else if (!down) {\n                    toggleRecentApps();\n                }\n            }\n            return -1;\n        } else if (keyCode == KeyEvent.KEYCODE_ASSIST) {\n            if (down) {\n                if (repeatCount == 0) {\n                    mAssistKeyLongPressed = false;\n                } else if (repeatCount == 1) {\n                    mAssistKeyLongPressed = true;\n                    if (!keyguardOn) {\n                         launchAssistLongPressAction();\n                    }\n                }\n            } else {\n                if (mAssistKeyLongPressed) {\n                    mAssistKeyLongPressed = false;\n                } else {\n                    if (!keyguardOn) {\n                        launchAssistAction();\n                    }\n                }\n            }\n            return -1;\n        } else if (keyCode == KeyEvent.KEYCODE_VOICE_ASSIST) {\n            if (!down) {\n                Intent voiceIntent;\n                if (!keyguardOn) {\n                    voiceIntent = new Intent(RecognizerIntent.ACTION_WEB_SEARCH);\n                } else {\n                    voiceIntent = new Intent(RecognizerIntent.ACTION_VOICE_SEARCH_HANDS_FREE);\n                    voiceIntent.putExtra(RecognizerIntent.EXTRA_SECURE, true);\n                }\n                startActivityAsUser(voiceIntent, UserHandle.CURRENT_OR_SELF);\n            }\n        } else if (keyCode == KeyEvent.KEYCODE_SYSRQ) {\n            if (down && repeatCount == 0) {\n                mHandler.post(mScreenshotRunnable);\n            }\n            return -1;\n        } else if (keyCode == KeyEvent.KEYCODE_BRIGHTNESS_UP\n                || keyCode == KeyEvent.KEYCODE_BRIGHTNESS_DOWN) {\n            if (down) {\n                int direction = keyCode == KeyEvent.KEYCODE_BRIGHTNESS_UP ? 1 : -1;\n\n                // Disable autobrightness if it's on\n                int auto = Settings.System.getIntForUser(\n                        mContext.getContentResolver(),\n                        Settings.System.SCREEN_BRIGHTNESS_MODE,\n                        Settings.System.SCREEN_BRIGHTNESS_MODE_MANUAL,\n                        UserHandle.USER_CURRENT_OR_SELF);\n                if (auto != 0) {\n                    Settings.System.putIntForUser(mContext.getContentResolver(),\n                            Settings.System.SCREEN_BRIGHTNESS_MODE,\n                            Settings.System.SCREEN_BRIGHTNESS_MODE_MANUAL,\n                            UserHandle.USER_CURRENT_OR_SELF);\n                }\n\n                int min = mPowerManager.getMinimumScreenBrightnessSetting();\n                int max = mPowerManager.getMaximumScreenBrightnessSetting();\n                int step = (max - min + BRIGHTNESS_STEPS - 1) / BRIGHTNESS_STEPS * direction;\n                int brightness = Settings.System.getIntForUser(mContext.getContentResolver(),\n                        Settings.System.SCREEN_BRIGHTNESS,\n                        mPowerManager.getDefaultScreenBrightnessSetting(),\n                        UserHandle.USER_CURRENT_OR_SELF);\n                brightness += step;\n                // Make sure we don't go beyond the limits.\n                brightness = Math.min(max, brightness);\n                brightness = Math.max(min, brightness);\n\n                Settings.System.putIntForUser(mContext.getContentResolver(),\n                        Settings.System.SCREEN_BRIGHTNESS, brightness,\n                        UserHandle.USER_CURRENT_OR_SELF);\n                startActivityAsUser(new Intent(Intent.ACTION_SHOW_BRIGHTNESS_DIALOG),\n                        UserHandle.CURRENT_OR_SELF);\n            }\n            return -1;\n        } else if (KeyEvent.isMetaKey(keyCode)) {\n            if (down) {\n                mPendingMetaAction = true;\n            } else if (mPendingMetaAction) {\n                launchAssistAction(Intent.EXTRA_ASSIST_INPUT_HINT_KEYBOARD);\n            }\n            return -1;\n        }\n\n        // Shortcuts are invoked through Search+key, so intercept those here\n        // Any printing key that is chorded with Search should be consumed\n        // even if no shortcut was invoked.  This prevents text from being\n        // inadvertently inserted when using a keyboard that has built-in macro\n        // shortcut keys (that emit Search+x) and some of them are not registered.\n        if (mSearchKeyShortcutPending) {\n            final KeyCharacterMap kcm = event.getKeyCharacterMap();\n            if (kcm.isPrintingKey(keyCode)) {\n                mConsumeSearchKeyUp = true;\n                mSearchKeyShortcutPending = false;\n                if (down && repeatCount == 0 && !keyguardOn) {\n                    Intent shortcutIntent = mShortcutManager.getIntent(kcm, keyCode, metaState);\n                    if (shortcutIntent != null) {\n                        shortcutIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n                        try {\n                            startActivityAsUser(shortcutIntent, UserHandle.CURRENT);\n                        } catch (ActivityNotFoundException ex) {\n                            Slog.w(TAG, \"Dropping shortcut key combination because \"\n                                    + \"the activity to which it is registered was not found: \"\n                                    + \"SEARCH+\" + KeyEvent.keyCodeToString(keyCode), ex);\n                        }\n                    } else {\n                        Slog.i(TAG, \"Dropping unregistered shortcut key combination: \"\n                                + \"SEARCH+\" + KeyEvent.keyCodeToString(keyCode));\n                    }\n                }\n                return -1;\n            }\n        }\n\n        // Invoke shortcuts using Meta.\n        if (down && repeatCount == 0 && !keyguardOn\n                && (metaState & KeyEvent.META_META_ON) != 0) {\n            final KeyCharacterMap kcm = event.getKeyCharacterMap();\n            if (kcm.isPrintingKey(keyCode)) {\n                Intent shortcutIntent = mShortcutManager.getIntent(kcm, keyCode,\n                        metaState & ~(KeyEvent.META_META_ON\n                                | KeyEvent.META_META_LEFT_ON | KeyEvent.META_META_RIGHT_ON));\n                if (shortcutIntent != null) {\n                    shortcutIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n                    try {\n                        startActivityAsUser(shortcutIntent, UserHandle.CURRENT);\n                    } catch (ActivityNotFoundException ex) {\n                        Slog.w(TAG, \"Dropping shortcut key combination because \"\n                                + \"the activity to which it is registered was not found: \"\n                                + \"META+\" + KeyEvent.keyCodeToString(keyCode), ex);\n                    }\n                    return -1;\n                }\n            }\n        }\n\n        // Handle application launch keys.\n        if (down && repeatCount == 0 && !keyguardOn) {\n            String category = sApplicationLaunchKeyCategories.get(keyCode);\n            if (category != null) {\n                Intent intent = Intent.makeMainSelectorActivity(Intent.ACTION_MAIN, category);\n                intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n                try {\n                    startActivityAsUser(intent, UserHandle.CURRENT);\n                } catch (ActivityNotFoundException ex) {\n                    Slog.w(TAG, \"Dropping application launch key because \"\n                            + \"the activity to which it is registered was not found: \"\n                            + \"keyCode=\" + keyCode + \", category=\" + category, ex);\n                }\n                return -1;\n            }\n        }\n\n        // Display task switcher for ALT-TAB.\n        if (down && repeatCount == 0 && keyCode == KeyEvent.KEYCODE_TAB) {\n            if (mRecentAppsHeldModifiers == 0 && !keyguardOn && isUserSetupComplete()) {\n                final int shiftlessModifiers = event.getModifiers() & ~KeyEvent.META_SHIFT_MASK;\n                if (KeyEvent.metaStateHasModifiers(shiftlessModifiers, KeyEvent.META_ALT_ON)) {\n                    mRecentAppsHeldModifiers = shiftlessModifiers;\n                    showRecentApps(true);\n                    return -1;\n                }\n            }\n        } else if (!down && mRecentAppsHeldModifiers != 0\n                && (metaState & mRecentAppsHeldModifiers) == 0) {\n            mRecentAppsHeldModifiers = 0;\n            hideRecentApps(true, false);\n        }\n\n        // Handle keyboard language switching.\n        if (down && repeatCount == 0\n                && (keyCode == KeyEvent.KEYCODE_LANGUAGE_SWITCH\n                        || (keyCode == KeyEvent.KEYCODE_SPACE\n                                && (metaState & KeyEvent.META_CTRL_MASK) != 0))) {\n            int direction = (metaState & KeyEvent.META_SHIFT_MASK) != 0 ? -1 : 1;\n            mWindowManagerFuncs.switchKeyboardLayout(event.getDeviceId(), direction);\n            return -1;\n        }\n        if (mLanguageSwitchKeyPressed && !down\n                && (keyCode == KeyEvent.KEYCODE_LANGUAGE_SWITCH\n                        || keyCode == KeyEvent.KEYCODE_SPACE)) {\n            mLanguageSwitchKeyPressed = false;\n            return -1;\n        }\n\n        if (isValidGlobalKey(keyCode)\n                && mGlobalKeyManager.handleGlobalKey(mContext, keyCode, event)) {\n            return -1;\n        }\n\n        // Reserve all the META modifier combos for system behavior\n        if ((metaState & KeyEvent.META_META_ON) != 0) {\n            return -1;\n        }\n\n        // Let the application handle the key.\n        return 0;\n    }",
    "abstract_func": "@Override\n    public long interceptKeyBeforeDispatching(WindowState VAR_0, KeyEvent VAR_1, int VAR_2) {\n        final boolean VAR_3 = keyguardOn();\n        final int VAR_4 = VAR_1.getKeyCode();\n        final int VAR_5 = VAR_1.getRepeatCount();\n        final int VAR_6 = VAR_1.getMetaState();\n        final int VAR_7 = VAR_1.getFlags();\n        final boolean VAR_8 = VAR_1.getAction() == VAR_9.ACTION_DOWN;\n        final boolean VAR_10 = VAR_1.isCanceled();\n\n        if (VAR_11) {\n            VAR_12.d(VAR_13, \"interceptKeyTi keyCode=\" + VAR_4 + \" down=\" + VAR_8 + \" repeatCount=\"\n                    + VAR_5 + \" keyguardOn=\" + VAR_3 + \" mHomePressed=\" + VAR_14\n                    + \" canceled=\" + VAR_10);\n        }\n\n        /* COMMENT_0 */\n        /* COMMENT_1 */\n        /* COMMENT_2 */\n        if (VAR_15 && (VAR_7 & VAR_9.FLAG_FALLBACK) == 0) {\n            if (VAR_16 && !VAR_17) {\n                final long VAR_18 = VAR_19.uptimeMillis();\n                final long VAR_20 = VAR_21\n                        + VAR_22;\n                if (VAR_18 < VAR_20) {\n                    return VAR_20 - VAR_18;\n                }\n            }\n            if (VAR_4 == VAR_9.KEYCODE_VOLUME_DOWN\n                    && VAR_23) {\n                if (!VAR_8) {\n                    VAR_23 = false;\n                }\n                return -1;\n            }\n        }\n\n        /* COMMENT_3 */\n        /* COMMENT_4 */\n        if (VAR_24 && !VAR_9.isMetaKey(VAR_4)) {\n            VAR_24 = false;\n        }\n\n        /* COMMENT_5 */\n        /* COMMENT_6 */\n        /* COMMENT_7 */\n        /* COMMENT_8 */\n        if (VAR_4 == VAR_9.KEYCODE_HOME) {\n\n            /* COMMENT_9 */\n            /* COMMENT_10 */\n            if (!VAR_8) {\n                cancelPreloadRecentApps();\n\n                VAR_14 = false;\n                if (VAR_25) {\n                    VAR_25 = false;\n                    return -1;\n                }\n\n                if (VAR_10) {\n                    VAR_12.i(VAR_13, \"Ignoring HOME; event canceled.\");\n                    return -1;\n                }\n\n                /* COMMENT_11 */\n                /* COMMENT_12 */\n                /* COMMENT_13 */\n                TelecomManager VAR_26 = getTelecommService();\n                if (VAR_26 != null && VAR_26.isRinging()) {\n                    VAR_12.i(VAR_13, \"Ignoring HOME; there's a ringing incoming call.\");\n                    return -1;\n                }\n\n                /* COMMENT_14 */\n                if (VAR_27 != VAR_28) {\n                    VAR_29.removeCallbacks(VAR_30); /* COMMENT_15 */\n                    VAR_31 = true;\n                    VAR_29.postDelayed(VAR_30,\n                            VAR_32.getDoubleTapTimeout());\n                    return -1;\n                }\n\n                handleShortPressOnHome();\n                return -1;\n            }\n\n            /* COMMENT_16 */\n            /* COMMENT_17 */\n            WindowManager.LayoutParams VAR_33 = VAR_0 != null ? VAR_0.getAttrs() : null;\n            if (VAR_33 != null) {\n                final int VAR_34 = VAR_33.type;\n                if (VAR_34 == VAR_35.LayoutParams.TYPE_KEYGUARD_SCRIM\n                        || VAR_34 == VAR_35.LayoutParams.TYPE_KEYGUARD_DIALOG\n                        || (VAR_33.privateFlags & VAR_36) != 0) {\n                    /* COMMENT_18 */\n                    return 0;\n                }\n                final int VAR_37 = VAR_38.length;\n                for (int VAR_39=0; VAR_39<VAR_37; VAR_39++) {\n                    if (VAR_34 == VAR_38[VAR_39]) {\n                        /* COMMENT_19 */\n                        return -1;\n                    }\n                }\n            }\n\n            /* COMMENT_20 */\n            if (VAR_5 == 0) {\n                VAR_14 = true;\n                if (VAR_31) {\n                    VAR_31 = false;\n                    VAR_29.removeCallbacks(VAR_30);\n                    handleDoubleTapOnHome();\n                } else if (VAR_40 == VAR_41\n                        || VAR_27 == VAR_42) {\n                    preloadRecentApps();\n                }\n            } else if ((VAR_1.getFlags() & VAR_9.FLAG_LONG_PRESS) != 0) {\n                if (!VAR_3) {\n                    handleLongPressOnHome();\n                }\n            }\n            return -1;\n        } else if (VAR_4 == VAR_9.KEYCODE_MENU) {\n            /* COMMENT_21 */\n            final int VAR_43 = VAR_9.META_SHIFT_ON;\n\n            if (VAR_8 && VAR_5 == 0) {\n                if (VAR_44 && (VAR_6 & VAR_43) == VAR_43) {\n                    Intent VAR_45 = new Intent(VAR_46.ACTION_BUG_REPORT);\n                    VAR_47.sendOrderedBroadcastAsUser(VAR_45, VAR_48.CURRENT,\n                            null, null, null, 0, null, null);\n                    return -1;\n                } else if (VAR_49 &&\n                        (VAR_6 & VAR_9.META_ALT_ON) == VAR_9.META_ALT_ON) {\n                    Intent VAR_50 = new Intent();\n                    VAR_50.setClassName(VAR_47, \"com.android.server.LoadAverageService\");\n                    ContentResolver VAR_51 = VAR_47.getContentResolver();\n                    boolean VAR_52 = VAR_53.Global.getInt(\n                            VAR_51, VAR_53.Global.SHOW_PROCESSES, 0) != 0;\n                    if (!VAR_52) {\n                        VAR_47.startService(VAR_50);\n                    } else {\n                        VAR_47.stopService(VAR_50);\n                    }\n                    VAR_53.Global.putInt(\n                            VAR_51, VAR_53.Global.SHOW_PROCESSES, VAR_52 ? 0 : 1);\n                    return -1;\n                }\n            }\n        } else if (VAR_4 == VAR_9.KEYCODE_SEARCH) {\n            if (VAR_8) {\n                if (VAR_5 == 0) {\n                    VAR_54 = true;\n                    VAR_55 = false;\n                }\n            } else {\n                VAR_54 = false;\n                if (VAR_55) {\n                    VAR_55 = false;\n                    return -1;\n                }\n            }\n            return 0;\n        } else if (VAR_4 == VAR_9.KEYCODE_APP_SWITCH) {\n            if (!VAR_3) {\n                if (VAR_8 && VAR_5 == 0) {\n                    preloadRecentApps();\n                } else if (!VAR_8) {\n                    toggleRecentApps();\n                }\n            }\n            return -1;\n        } else if (VAR_4 == VAR_9.KEYCODE_ASSIST) {\n            if (VAR_8) {\n                if (VAR_5 == 0) {\n                    VAR_56 = false;\n                } else if (VAR_5 == 1) {\n                    VAR_56 = true;\n                    if (!VAR_3) {\n                         launchAssistLongPressAction();\n                    }\n                }\n            } else {\n                if (VAR_56) {\n                    VAR_56 = false;\n                } else {\n                    if (!VAR_3) {\n                        launchAssistAction();\n                    }\n                }\n            }\n            return -1;\n        } else if (VAR_4 == VAR_9.KEYCODE_VOICE_ASSIST) {\n            if (!VAR_8) {\n                Intent VAR_57;\n                if (!VAR_3) {\n                    VAR_57 = new Intent(VAR_58.ACTION_WEB_SEARCH);\n                } else {\n                    VAR_57 = new Intent(VAR_58.ACTION_VOICE_SEARCH_HANDS_FREE);\n                    VAR_57.putExtra(VAR_58.EXTRA_SECURE, true);\n                }\n                startActivityAsUser(VAR_57, VAR_48.CURRENT_OR_SELF);\n            }\n        } else if (VAR_4 == VAR_9.KEYCODE_SYSRQ) {\n            if (VAR_8 && VAR_5 == 0) {\n                VAR_29.post(VAR_59);\n            }\n            return -1;\n        } else if (VAR_4 == VAR_9.KEYCODE_BRIGHTNESS_UP\n                || VAR_4 == VAR_9.KEYCODE_BRIGHTNESS_DOWN) {\n            if (VAR_8) {\n                int VAR_60 = VAR_4 == VAR_9.KEYCODE_BRIGHTNESS_UP ? 1 : -1;\n\n                /* COMMENT_22 */\n                int VAR_61 = VAR_53.System.getIntForUser(\n                        VAR_47.getContentResolver(),\n                        VAR_53.System.SCREEN_BRIGHTNESS_MODE,\n                        VAR_53.System.SCREEN_BRIGHTNESS_MODE_MANUAL,\n                        VAR_48.USER_CURRENT_OR_SELF);\n                if (VAR_61 != 0) {\n                    VAR_53.System.putIntForUser(VAR_47.getContentResolver(),\n                            VAR_53.System.SCREEN_BRIGHTNESS_MODE,\n                            VAR_53.System.SCREEN_BRIGHTNESS_MODE_MANUAL,\n                            VAR_48.USER_CURRENT_OR_SELF);\n                }\n\n                int VAR_62 = VAR_63.getMinimumScreenBrightnessSetting();\n                int VAR_64 = VAR_63.getMaximumScreenBrightnessSetting();\n                int VAR_65 = (VAR_64 - VAR_62 + VAR_66 - 1) / VAR_66 * VAR_60;\n                int VAR_67 = VAR_53.System.getIntForUser(VAR_47.getContentResolver(),\n                        VAR_53.System.SCREEN_BRIGHTNESS,\n                        VAR_63.getDefaultScreenBrightnessSetting(),\n                        VAR_48.USER_CURRENT_OR_SELF);\n                VAR_67 += VAR_65;\n                /* COMMENT_23 */\n                VAR_67 = VAR_68.min(VAR_64, VAR_67);\n                VAR_67 = VAR_68.max(VAR_62, VAR_67);\n\n                VAR_53.System.putIntForUser(VAR_47.getContentResolver(),\n                        VAR_53.System.SCREEN_BRIGHTNESS, VAR_67,\n                        VAR_48.USER_CURRENT_OR_SELF);\n                startActivityAsUser(new Intent(VAR_46.ACTION_SHOW_BRIGHTNESS_DIALOG),\n                        VAR_48.CURRENT_OR_SELF);\n            }\n            return -1;\n        } else if (VAR_9.isMetaKey(VAR_4)) {\n            if (VAR_8) {\n                VAR_24 = true;\n            } else if (VAR_24) {\n                launchAssistAction(VAR_46.EXTRA_ASSIST_INPUT_HINT_KEYBOARD);\n            }\n            return -1;\n        }\n\n        /* COMMENT_24 */\n        /* COMMENT_25 */\n        /* COMMENT_26 */\n        /* COMMENT_27 */\n        /* COMMENT_28 */\n        if (VAR_54) {\n            final KeyCharacterMap VAR_69 = VAR_1.getKeyCharacterMap();\n            if (VAR_69.isPrintingKey(VAR_4)) {\n                VAR_55 = true;\n                VAR_54 = false;\n                if (VAR_8 && VAR_5 == 0 && !VAR_3) {\n                    Intent VAR_70 = VAR_71.getIntent(VAR_69, VAR_4, VAR_6);\n                    if (VAR_70 != null) {\n                        VAR_70.addFlags(VAR_46.FLAG_ACTIVITY_NEW_TASK);\n                        try {\n                            startActivityAsUser(VAR_70, VAR_48.CURRENT);\n                        } catch (ActivityNotFoundException VAR_72) {\n                            VAR_73.w(VAR_13, \"Dropping shortcut key combination because \"\n                                    + \"the activity to which it is registered was not found: \"\n                                    + \"SEARCH+\" + VAR_9.keyCodeToString(VAR_4), VAR_72);\n                        }\n                    } else {\n                        VAR_73.i(VAR_13, \"Dropping unregistered shortcut key combination: \"\n                                + \"SEARCH+\" + VAR_9.keyCodeToString(VAR_4));\n                    }\n                }\n                return -1;\n            }\n        }\n\n        /* COMMENT_29 */\n        if (VAR_8 && VAR_5 == 0 && !VAR_3\n                && (VAR_6 & VAR_9.META_META_ON) != 0) {\n            final KeyCharacterMap VAR_69 = VAR_1.getKeyCharacterMap();\n            if (VAR_69.isPrintingKey(VAR_4)) {\n                Intent VAR_70 = VAR_71.getIntent(VAR_69, VAR_4,\n                        VAR_6 & ~(VAR_9.META_META_ON\n                                | VAR_9.META_META_LEFT_ON | VAR_9.META_META_RIGHT_ON));\n                if (VAR_70 != null) {\n                    VAR_70.addFlags(VAR_46.FLAG_ACTIVITY_NEW_TASK);\n                    try {\n                        startActivityAsUser(VAR_70, VAR_48.CURRENT);\n                    } catch (ActivityNotFoundException VAR_72) {\n                        VAR_73.w(VAR_13, \"Dropping shortcut key combination because \"\n                                + \"the activity to which it is registered was not found: \"\n                                + \"META+\" + VAR_9.keyCodeToString(VAR_4), VAR_72);\n                    }\n                    return -1;\n                }\n            }\n        }\n\n        /* COMMENT_30 */\n        if (VAR_8 && VAR_5 == 0 && !VAR_3) {\n            String VAR_74 = VAR_75.get(VAR_4);\n            if (VAR_74 != null) {\n                Intent VAR_45 = VAR_46.makeMainSelectorActivity(VAR_46.ACTION_MAIN, VAR_74);\n                VAR_45.setFlags(VAR_46.FLAG_ACTIVITY_NEW_TASK);\n                try {\n                    startActivityAsUser(VAR_45, VAR_48.CURRENT);\n                } catch (ActivityNotFoundException VAR_72) {\n                    VAR_73.w(VAR_13, \"Dropping application launch key because \"\n                            + \"the activity to which it is registered was not found: \"\n                            + \"keyCode=\" + VAR_4 + \", category=\" + VAR_74, VAR_72);\n                }\n                return -1;\n            }\n        }\n\n        /* COMMENT_31 */\n        if (VAR_8 && VAR_5 == 0 && VAR_4 == VAR_9.KEYCODE_TAB) {\n            if (VAR_76 == 0 && !VAR_3 && isUserSetupComplete()) {\n                final int VAR_77 = VAR_1.getModifiers() & ~VAR_9.META_SHIFT_MASK;\n                if (VAR_9.metaStateHasModifiers(VAR_77, VAR_9.META_ALT_ON)) {\n                    VAR_76 = VAR_77;\n                    showRecentApps(true);\n                    return -1;\n                }\n            }\n        } else if (!VAR_8 && VAR_76 != 0\n                && (VAR_6 & VAR_76) == 0) {\n            VAR_76 = 0;\n            hideRecentApps(true, false);\n        }\n\n        /* COMMENT_32 */\n        if (VAR_8 && VAR_5 == 0\n                && (VAR_4 == VAR_9.KEYCODE_LANGUAGE_SWITCH\n                        || (VAR_4 == VAR_9.KEYCODE_SPACE\n                                && (VAR_6 & VAR_9.META_CTRL_MASK) != 0))) {\n            int VAR_60 = (VAR_6 & VAR_9.META_SHIFT_MASK) != 0 ? -1 : 1;\n            VAR_78.switchKeyboardLayout(VAR_1.getDeviceId(), VAR_60);\n            return -1;\n        }\n        if (VAR_79 && !VAR_8\n                && (VAR_4 == VAR_9.KEYCODE_LANGUAGE_SWITCH\n                        || VAR_4 == VAR_9.KEYCODE_SPACE)) {\n            VAR_79 = false;\n            return -1;\n        }\n\n        if (isValidGlobalKey(VAR_4)\n                && VAR_80.handleGlobalKey(VAR_47, VAR_4, VAR_1)) {\n            return -1;\n        }\n\n        /* COMMENT_33 */\n        if ((VAR_6 & VAR_9.META_META_ON) != 0) {\n            return -1;\n        }\n\n        /* COMMENT_34 */\n        return 0;\n    }",
    "func_graph_path": "android/84669ca8de55d38073a0dcb01074233b0a417541/PhoneWindowManager.java/vul/after/0.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -325,7 +325,7 @@\n \n         // Display task switcher for ALT-TAB.\n         if (down && repeatCount == 0 && keyCode == KeyEvent.KEYCODE_TAB) {\n-            if (mRecentAppsHeldModifiers == 0 && !keyguardOn) {\n+            if (mRecentAppsHeldModifiers == 0 && !keyguardOn && isUserSetupComplete()) {\n                 final int shiftlessModifiers = event.getModifiers() & ~KeyEvent.META_SHIFT_MASK;\n                 if (KeyEvent.metaStateHasModifiers(shiftlessModifiers, KeyEvent.META_ALT_ON)) {\n                     mRecentAppsHeldModifiers = shiftlessModifiers;",
    "diff_line_info": {
        "deleted_lines": [
            "            if (mRecentAppsHeldModifiers == 0 && !keyguardOn) {"
        ],
        "added_lines": [
            "            if (mRecentAppsHeldModifiers == 0 && !keyguardOn && isUserSetupComplete()) {"
        ]
    },
    "is_vul": true,
    "pr_url": null,
    "description": "no more info"
}