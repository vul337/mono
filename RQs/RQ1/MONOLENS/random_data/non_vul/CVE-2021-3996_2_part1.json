{
    "cve_id": "CVE-2021-3996",
    "cwe_ids": [
        "CWE-552"
    ],
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H",
    "cvss_is_v3": true,
    "repo_name": "util-linux",
    "commit_msg": "libmount: remove support for deleted mount table entries\n\nThe \"(deleted)\" suffix has been originally used by kernel for deleted\nmountpoints. Since kernel commit 9d4d65748a5ca26ea8650e50ba521295549bf4e3\n(Dec 2014) kernel does not use this suffix for mount stuff in /proc at\nall. Let's remove this support from libmount too.\n\nSigned-off-by: Karel Zak <kzak@redhat.com>",
    "commit_hash": "166e87368ae88bf31112a30e078cceae637f4cdb",
    "git_url": "https://github.com/util-linux/util-linux/commit/166e87368ae88bf31112a30e078cceae637f4cdb",
    "file_path": "misc-utils/findmnt.c",
    "func_name": "get_data",
    "func_before": "static char *get_data(struct libmnt_fs *fs, int num)\n{\n\tchar *str = NULL;\n\tconst char *t = NULL, *v = NULL;\n\tint col_id = get_column_id(num);\n\n\tswitch (col_id) {\n\tcase COL_SOURCES:\n\t\t/* print all devices with the same tag (LABEL, UUID) */\n\t\tif ((flags & FL_EVALUATE) &&\n\t\t    mnt_fs_get_tag(fs, &t, &v) == 0) {\n\t\t\tblkid_dev_iterate iter;\n\t\t\tblkid_dev dev;\n\t\t\tblkid_cache cache = NULL;\n\t\t\tstruct ul_buffer buf = UL_INIT_BUFFER;\n\t\t\tint i = 0;\n\n\t\t\tif (blkid_get_cache(&cache, NULL) < 0)\n\t\t\t\tbreak;\n\n\t\t\tblkid_probe_all(cache);\n\n\t\t\titer = blkid_dev_iterate_begin(cache);\n\t\t\tblkid_dev_set_search(iter, t, v);\n\t\t\twhile (blkid_dev_next(iter, &dev) == 0) {\n\t\t\t\tdev = blkid_verify(cache, dev);\n\t\t\t\tif (!dev)\n\t\t\t\t\tcontinue;\n\t\t\t\tif (i != 0)\n\t\t\t\t\tul_buffer_append_data(&buf, \"\\n\", 1);\n\t\t\t\tul_buffer_append_string(&buf, blkid_dev_devname(dev));\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tblkid_dev_iterate_end(iter);\n\t\t\tstr = ul_buffer_get_data(&buf, NULL, NULL);\n\t\t\tbreak;\n\t\t}\n\t\t/* fallthrough */\n\tcase COL_SOURCE:\n\t{\n\t\tconst char *root = mnt_fs_get_root(fs);\n\t\tconst char *spec = mnt_fs_get_srcpath(fs);\n\t\tchar *cn = NULL;\n\n\t\tif (spec && (flags & FL_CANONICALIZE))\n\t\t\tspec = cn = mnt_resolve_path(spec, cache);\n\t\tif (!spec) {\n\t\t\tspec = mnt_fs_get_source(fs);\n\n\t\t\tif (spec && (flags & FL_EVALUATE))\n\t\t\t\tspec = cn = mnt_resolve_spec(spec, cache);\n\t\t}\n\t\tif (root && spec && !(flags & FL_NOFSROOT) && strcmp(root, \"/\") != 0)\n\t\t\txasprintf(&str, \"%s[%s]\", spec, root);\n\t\telse if (spec)\n\t\t\tstr = xstrdup(spec);\n\t\tif (!cache)\n\t\t\tfree(cn);\n\t\tbreak;\n\t}\n\n\tcase COL_TARGET:\n\t\tif (mnt_fs_get_target(fs))\n\t\t\tstr = xstrdup(mnt_fs_get_target(fs));\n\t\tbreak;\n\tcase COL_FSTYPE:\n\t\tif (mnt_fs_get_fstype(fs))\n\t\t\tstr = xstrdup(mnt_fs_get_fstype(fs));\n\t\tbreak;\n\tcase COL_OPTIONS:\n\t\tif (mnt_fs_get_options(fs))\n\t\t\tstr = xstrdup(mnt_fs_get_options(fs));\n\t\tbreak;\n\tcase COL_VFS_OPTIONS:\n\t\tif (flags & FL_VFS_ALL)\n\t\t\tstr = mnt_fs_get_vfs_options_all(fs);\n\t\telse if (mnt_fs_get_vfs_options(fs))\n\t\t\tstr = xstrdup(mnt_fs_get_vfs_options(fs));\n\t\tbreak;\n\tcase COL_FS_OPTIONS:\n\t\tif (mnt_fs_get_fs_options(fs))\n\t\t\tstr = xstrdup(mnt_fs_get_fs_options(fs));\n\t\tbreak;\n\tcase COL_OPT_FIELDS:\n\t\tif (mnt_fs_get_optional_fields(fs))\n\t\t\tstr = xstrdup(mnt_fs_get_optional_fields(fs));\n\t\tbreak;\n\tcase COL_UUID:\n\t\tstr = get_tag(fs, \"UUID\", col_id);\n\t\tbreak;\n\tcase COL_PARTUUID:\n\t\tstr = get_tag(fs, \"PARTUUID\", col_id);\n\t\tbreak;\n\tcase COL_LABEL:\n\t\tstr = get_tag(fs, \"LABEL\", col_id);\n\t\tbreak;\n\tcase COL_PARTLABEL:\n\t\tstr = get_tag(fs, \"PARTLABEL\", col_id);\n\t\tbreak;\n\n\tcase COL_MAJMIN:\n\t{\n\t\tdev_t devno = mnt_fs_get_devno(fs);\n\t\tif (!devno)\n\t\t\tbreak;\n\n\t\tif ((flags & FL_RAW) || (flags & FL_EXPORT) || (flags & FL_JSON))\n\t\t\txasprintf(&str, \"%u:%u\", major(devno), minor(devno));\n\t\telse\n\t\t\txasprintf(&str, \"%3u:%-3u\", major(devno), minor(devno));\n\t\tbreak;\n\t}\n\tcase COL_SIZE:\n\tcase COL_AVAIL:\n\tcase COL_USED:\n\tcase COL_USEPERC:\n\t\tstr = get_vfs_attr(fs, col_id);\n\t\tbreak;\n\tcase COL_FSROOT:\n\t\tif (mnt_fs_get_root(fs))\n\t\t\tstr = xstrdup(mnt_fs_get_root(fs));\n\t\tbreak;\n\tcase COL_TID:\n\t\tif (mnt_fs_get_tid(fs))\n\t\t\txasprintf(&str, \"%d\", mnt_fs_get_tid(fs));\n\t\tbreak;\n\tcase COL_ID:\n\t\tif (mnt_fs_get_id(fs))\n\t\t\txasprintf(&str, \"%d\", mnt_fs_get_id(fs));\n\t\tbreak;\n\tcase COL_PARENT:\n\t\tif (mnt_fs_get_parent_id(fs))\n\t\t\txasprintf(&str, \"%d\", mnt_fs_get_parent_id(fs));\n\t\tbreak;\n\tcase COL_PROPAGATION:\n\t\tif (mnt_fs_is_kernel(fs)) {\n\t\t\tunsigned long fl = 0;\n\t\t\tchar *n = NULL;\n\n\t\t\tif (mnt_fs_get_propagation(fs, &fl) != 0)\n\t\t\t\tbreak;\n\n\t\t\tn = xstrdup((fl & MS_SHARED) ? \"shared\" : \"private\");\n\n\t\t\tif (fl & MS_SLAVE) {\n\t\t\t\txasprintf(&str, \"%s,slave\", n);\n\t\t\t\tfree(n);\n\t\t\t\tn = str;\n\t\t\t}\n\t\t\tif (fl & MS_UNBINDABLE) {\n\t\t\t\txasprintf(&str, \"%s,unbindable\", n);\n\t\t\t\tfree(n);\n\t\t\t\tn = str;\n\t\t\t}\n\t\t\tstr = n;\n\t\t}\n\t\tbreak;\n\tcase COL_FREQ:\n\t\tif (!mnt_fs_is_kernel(fs))\n\t\t\txasprintf(&str, \"%d\", mnt_fs_get_freq(fs));\n\t\tbreak;\n\tcase COL_PASSNO:\n\t\tif (!mnt_fs_is_kernel(fs))\n\t\t\txasprintf(&str, \"%d\", mnt_fs_get_passno(fs));\n\t\tbreak;\n\tcase COL_DELETED:\n\t\tstr = xstrdup(mnt_fs_is_deleted(fs) ? \"1\" : \"0\");\n\t\tbreak;\n\tdefault:\n\t\tbreak;\n\t}\n\treturn str;\n}",
    "abstract_func_before": "static char *get_data(struct libmnt_fs *VAR_0, int VAR_1)\n{\n\tchar *VAR_2 = NULL;\n\tconst char *VAR_3 = NULL, *VAR_4 = NULL;\n\tint VAR_5 = get_column_id(VAR_1);\n\n\tswitch (VAR_5) {\n\tcase VAR_6:\n\t\t/* COMMENT_0 */\n\t\tif ((VAR_7 & VAR_8) &&\n\t\t    mnt_fs_get_tag(VAR_0, &VAR_3, &VAR_4) == 0) {\n\t\t\tblkid_dev_iterate VAR_9;\n\t\t\tblkid_dev VAR_10;\n\t\t\tblkid_cache VAR_11 = NULL;\n\t\t\tstruct ul_buffer VAR_12 = VAR_13;\n\t\t\tint VAR_14 = 0;\n\n\t\t\tif (blkid_get_cache(&VAR_11, NULL) < 0)\n\t\t\t\tbreak;\n\n\t\t\tblkid_probe_all(VAR_11);\n\n\t\t\tVAR_9 = blkid_dev_iterate_begin(VAR_11);\n\t\t\tblkid_dev_set_search(VAR_9, VAR_3, VAR_4);\n\t\t\twhile (blkid_dev_next(VAR_9, &VAR_10) == 0) {\n\t\t\t\tVAR_10 = blkid_verify(VAR_11, VAR_10);\n\t\t\t\tif (!VAR_10)\n\t\t\t\t\tcontinue;\n\t\t\t\tif (VAR_14 != 0)\n\t\t\t\t\tul_buffer_append_data(&VAR_12, \"\\n\", 1);\n\t\t\t\tul_buffer_append_string(&VAR_12, blkid_dev_devname(VAR_10));\n\t\t\t\tVAR_14++;\n\t\t\t}\n\t\t\tblkid_dev_iterate_end(VAR_9);\n\t\t\tVAR_2 = ul_buffer_get_data(&VAR_12, NULL, NULL);\n\t\t\tbreak;\n\t\t}\n\t\t/* COMMENT_1 */\n\tcase VAR_15:\n\t{\n\t\tconst char *VAR_16 = mnt_fs_get_root(VAR_0);\n\t\tconst char *VAR_17 = mnt_fs_get_srcpath(VAR_0);\n\t\tchar *VAR_18 = NULL;\n\n\t\tif (VAR_17 && (VAR_7 & VAR_19))\n\t\t\tVAR_17 = VAR_18 = mnt_resolve_path(VAR_17, VAR_11);\n\t\tif (!VAR_17) {\n\t\t\tVAR_17 = mnt_fs_get_source(VAR_0);\n\n\t\t\tif (VAR_17 && (VAR_7 & VAR_8))\n\t\t\t\tVAR_17 = VAR_18 = mnt_resolve_spec(VAR_17, VAR_11);\n\t\t}\n\t\tif (VAR_16 && VAR_17 && !(VAR_7 & VAR_20) && strcmp(VAR_16, \"/\") != 0)\n\t\t\txasprintf(&VAR_2, \"%s[%s]\", VAR_17, VAR_16);\n\t\telse if (VAR_17)\n\t\t\tVAR_2 = xstrdup(VAR_17);\n\t\tif (!VAR_11)\n\t\t\tfree(VAR_18);\n\t\tbreak;\n\t}\n\n\tcase VAR_21:\n\t\tif (mnt_fs_get_target(VAR_0))\n\t\t\tVAR_2 = xstrdup(mnt_fs_get_target(VAR_0));\n\t\tbreak;\n\tcase VAR_22:\n\t\tif (mnt_fs_get_fstype(VAR_0))\n\t\t\tVAR_2 = xstrdup(mnt_fs_get_fstype(VAR_0));\n\t\tbreak;\n\tcase VAR_23:\n\t\tif (mnt_fs_get_options(VAR_0))\n\t\t\tVAR_2 = xstrdup(mnt_fs_get_options(VAR_0));\n\t\tbreak;\n\tcase VAR_24:\n\t\tif (VAR_7 & VAR_25)\n\t\t\tVAR_2 = mnt_fs_get_vfs_options_all(VAR_0);\n\t\telse if (mnt_fs_get_vfs_options(VAR_0))\n\t\t\tVAR_2 = xstrdup(mnt_fs_get_vfs_options(VAR_0));\n\t\tbreak;\n\tcase VAR_26:\n\t\tif (mnt_fs_get_fs_options(VAR_0))\n\t\t\tVAR_2 = xstrdup(mnt_fs_get_fs_options(VAR_0));\n\t\tbreak;\n\tcase VAR_27:\n\t\tif (mnt_fs_get_optional_fields(VAR_0))\n\t\t\tVAR_2 = xstrdup(mnt_fs_get_optional_fields(VAR_0));\n\t\tbreak;\n\tcase VAR_28:\n\t\tVAR_2 = get_tag(VAR_0, \"UUID\", VAR_5);\n\t\tbreak;\n\tcase VAR_29:\n\t\tVAR_2 = get_tag(VAR_0, \"PARTUUID\", VAR_5);\n\t\tbreak;\n\tcase VAR_30:\n\t\tVAR_2 = get_tag(VAR_0, \"LABEL\", VAR_5);\n\t\tbreak;\n\tcase VAR_31:\n\t\tVAR_2 = get_tag(VAR_0, \"PARTLABEL\", VAR_5);\n\t\tbreak;\n\n\tcase VAR_32:\n\t{\n\t\tdev_t VAR_33 = mnt_fs_get_devno(VAR_0);\n\t\tif (!VAR_33)\n\t\t\tbreak;\n\n\t\tif ((VAR_7 & VAR_34) || (VAR_7 & VAR_35) || (VAR_7 & VAR_36))\n\t\t\txasprintf(&VAR_2, \"%u:%u\", major(VAR_33), minor(VAR_33));\n\t\telse\n\t\t\txasprintf(&VAR_2, \"%3u:%-3u\", major(VAR_33), minor(VAR_33));\n\t\tbreak;\n\t}\n\tcase VAR_37:\n\tcase VAR_38:\n\tcase VAR_39:\n\tcase VAR_40:\n\t\tVAR_2 = get_vfs_attr(VAR_0, VAR_5);\n\t\tbreak;\n\tcase VAR_41:\n\t\tif (mnt_fs_get_root(VAR_0))\n\t\t\tVAR_2 = xstrdup(mnt_fs_get_root(VAR_0));\n\t\tbreak;\n\tcase VAR_42:\n\t\tif (mnt_fs_get_tid(VAR_0))\n\t\t\txasprintf(&VAR_2, \"%d\", mnt_fs_get_tid(VAR_0));\n\t\tbreak;\n\tcase VAR_43:\n\t\tif (mnt_fs_get_id(VAR_0))\n\t\t\txasprintf(&VAR_2, \"%d\", mnt_fs_get_id(VAR_0));\n\t\tbreak;\n\tcase VAR_44:\n\t\tif (mnt_fs_get_parent_id(VAR_0))\n\t\t\txasprintf(&VAR_2, \"%d\", mnt_fs_get_parent_id(VAR_0));\n\t\tbreak;\n\tcase VAR_45:\n\t\tif (mnt_fs_is_kernel(VAR_0)) {\n\t\t\tunsigned long VAR_46 = 0;\n\t\t\tchar *VAR_47 = NULL;\n\n\t\t\tif (mnt_fs_get_propagation(VAR_0, &VAR_46) != 0)\n\t\t\t\tbreak;\n\n\t\t\tVAR_47 = xstrdup((VAR_46 & VAR_48) ? \"shared\" : \"private\");\n\n\t\t\tif (VAR_46 & VAR_49) {\n\t\t\t\txasprintf(&VAR_2, \"%s,slave\", VAR_47);\n\t\t\t\tfree(VAR_47);\n\t\t\t\tVAR_47 = VAR_2;\n\t\t\t}\n\t\t\tif (VAR_46 & VAR_50) {\n\t\t\t\txasprintf(&VAR_2, \"%s,unbindable\", VAR_47);\n\t\t\t\tfree(VAR_47);\n\t\t\t\tVAR_47 = VAR_2;\n\t\t\t}\n\t\t\tVAR_2 = VAR_47;\n\t\t}\n\t\tbreak;\n\tcase VAR_51:\n\t\tif (!mnt_fs_is_kernel(VAR_0))\n\t\t\txasprintf(&VAR_2, \"%d\", mnt_fs_get_freq(VAR_0));\n\t\tbreak;\n\tcase VAR_52:\n\t\tif (!mnt_fs_is_kernel(VAR_0))\n\t\t\txasprintf(&VAR_2, \"%d\", mnt_fs_get_passno(VAR_0));\n\t\tbreak;\n\tcase VAR_53:\n\t\tVAR_2 = xstrdup(mnt_fs_is_deleted(VAR_0) ? \"1\" : \"0\");\n\t\tbreak;\n\tdefault:\n\t\tbreak;\n\t}\n\treturn VAR_2;\n}",
    "func_graph_path_before": "util-linux/166e87368ae88bf31112a30e078cceae637f4cdb/findmnt.c/vul/before/2.json",
    "func": "static char *get_data(struct libmnt_fs *fs, int num)\n{\n\tchar *str = NULL;\n\tconst char *t = NULL, *v = NULL;\n\tint col_id = get_column_id(num);\n\n\tswitch (col_id) {\n\tcase COL_SOURCES:\n\t\t/* print all devices with the same tag (LABEL, UUID) */\n\t\tif ((flags & FL_EVALUATE) &&\n\t\t    mnt_fs_get_tag(fs, &t, &v) == 0) {\n\t\t\tblkid_dev_iterate iter;\n\t\t\tblkid_dev dev;\n\t\t\tblkid_cache cache = NULL;\n\t\t\tstruct ul_buffer buf = UL_INIT_BUFFER;\n\t\t\tint i = 0;\n\n\t\t\tif (blkid_get_cache(&cache, NULL) < 0)\n\t\t\t\tbreak;\n\n\t\t\tblkid_probe_all(cache);\n\n\t\t\titer = blkid_dev_iterate_begin(cache);\n\t\t\tblkid_dev_set_search(iter, t, v);\n\t\t\twhile (blkid_dev_next(iter, &dev) == 0) {\n\t\t\t\tdev = blkid_verify(cache, dev);\n\t\t\t\tif (!dev)\n\t\t\t\t\tcontinue;\n\t\t\t\tif (i != 0)\n\t\t\t\t\tul_buffer_append_data(&buf, \"\\n\", 1);\n\t\t\t\tul_buffer_append_string(&buf, blkid_dev_devname(dev));\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tblkid_dev_iterate_end(iter);\n\t\t\tstr = ul_buffer_get_data(&buf, NULL, NULL);\n\t\t\tbreak;\n\t\t}\n\t\t/* fallthrough */\n\tcase COL_SOURCE:\n\t{\n\t\tconst char *root = mnt_fs_get_root(fs);\n\t\tconst char *spec = mnt_fs_get_srcpath(fs);\n\t\tchar *cn = NULL;\n\n\t\tif (spec && (flags & FL_CANONICALIZE))\n\t\t\tspec = cn = mnt_resolve_path(spec, cache);\n\t\tif (!spec) {\n\t\t\tspec = mnt_fs_get_source(fs);\n\n\t\t\tif (spec && (flags & FL_EVALUATE))\n\t\t\t\tspec = cn = mnt_resolve_spec(spec, cache);\n\t\t}\n\t\tif (root && spec && !(flags & FL_NOFSROOT) && strcmp(root, \"/\") != 0)\n\t\t\txasprintf(&str, \"%s[%s]\", spec, root);\n\t\telse if (spec)\n\t\t\tstr = xstrdup(spec);\n\t\tif (!cache)\n\t\t\tfree(cn);\n\t\tbreak;\n\t}\n\n\tcase COL_TARGET:\n\t\tif (mnt_fs_get_target(fs))\n\t\t\tstr = xstrdup(mnt_fs_get_target(fs));\n\t\tbreak;\n\tcase COL_FSTYPE:\n\t\tif (mnt_fs_get_fstype(fs))\n\t\t\tstr = xstrdup(mnt_fs_get_fstype(fs));\n\t\tbreak;\n\tcase COL_OPTIONS:\n\t\tif (mnt_fs_get_options(fs))\n\t\t\tstr = xstrdup(mnt_fs_get_options(fs));\n\t\tbreak;\n\tcase COL_VFS_OPTIONS:\n\t\tif (flags & FL_VFS_ALL)\n\t\t\tstr = mnt_fs_get_vfs_options_all(fs);\n\t\telse if (mnt_fs_get_vfs_options(fs))\n\t\t\tstr = xstrdup(mnt_fs_get_vfs_options(fs));\n\t\tbreak;\n\tcase COL_FS_OPTIONS:\n\t\tif (mnt_fs_get_fs_options(fs))\n\t\t\tstr = xstrdup(mnt_fs_get_fs_options(fs));\n\t\tbreak;\n\tcase COL_OPT_FIELDS:\n\t\tif (mnt_fs_get_optional_fields(fs))\n\t\t\tstr = xstrdup(mnt_fs_get_optional_fields(fs));\n\t\tbreak;\n\tcase COL_UUID:\n\t\tstr = get_tag(fs, \"UUID\", col_id);\n\t\tbreak;\n\tcase COL_PARTUUID:\n\t\tstr = get_tag(fs, \"PARTUUID\", col_id);\n\t\tbreak;\n\tcase COL_LABEL:\n\t\tstr = get_tag(fs, \"LABEL\", col_id);\n\t\tbreak;\n\tcase COL_PARTLABEL:\n\t\tstr = get_tag(fs, \"PARTLABEL\", col_id);\n\t\tbreak;\n\n\tcase COL_MAJMIN:\n\t{\n\t\tdev_t devno = mnt_fs_get_devno(fs);\n\t\tif (!devno)\n\t\t\tbreak;\n\n\t\tif ((flags & FL_RAW) || (flags & FL_EXPORT) || (flags & FL_JSON))\n\t\t\txasprintf(&str, \"%u:%u\", major(devno), minor(devno));\n\t\telse\n\t\t\txasprintf(&str, \"%3u:%-3u\", major(devno), minor(devno));\n\t\tbreak;\n\t}\n\tcase COL_SIZE:\n\tcase COL_AVAIL:\n\tcase COL_USED:\n\tcase COL_USEPERC:\n\t\tstr = get_vfs_attr(fs, col_id);\n\t\tbreak;\n\tcase COL_FSROOT:\n\t\tif (mnt_fs_get_root(fs))\n\t\t\tstr = xstrdup(mnt_fs_get_root(fs));\n\t\tbreak;\n\tcase COL_TID:\n\t\tif (mnt_fs_get_tid(fs))\n\t\t\txasprintf(&str, \"%d\", mnt_fs_get_tid(fs));\n\t\tbreak;\n\tcase COL_ID:\n\t\tif (mnt_fs_get_id(fs))\n\t\t\txasprintf(&str, \"%d\", mnt_fs_get_id(fs));\n\t\tbreak;\n\tcase COL_PARENT:\n\t\tif (mnt_fs_get_parent_id(fs))\n\t\t\txasprintf(&str, \"%d\", mnt_fs_get_parent_id(fs));\n\t\tbreak;\n\tcase COL_PROPAGATION:\n\t\tif (mnt_fs_is_kernel(fs)) {\n\t\t\tunsigned long fl = 0;\n\t\t\tchar *n = NULL;\n\n\t\t\tif (mnt_fs_get_propagation(fs, &fl) != 0)\n\t\t\t\tbreak;\n\n\t\t\tn = xstrdup((fl & MS_SHARED) ? \"shared\" : \"private\");\n\n\t\t\tif (fl & MS_SLAVE) {\n\t\t\t\txasprintf(&str, \"%s,slave\", n);\n\t\t\t\tfree(n);\n\t\t\t\tn = str;\n\t\t\t}\n\t\t\tif (fl & MS_UNBINDABLE) {\n\t\t\t\txasprintf(&str, \"%s,unbindable\", n);\n\t\t\t\tfree(n);\n\t\t\t\tn = str;\n\t\t\t}\n\t\t\tstr = n;\n\t\t}\n\t\tbreak;\n\tcase COL_FREQ:\n\t\tif (!mnt_fs_is_kernel(fs))\n\t\t\txasprintf(&str, \"%d\", mnt_fs_get_freq(fs));\n\t\tbreak;\n\tcase COL_PASSNO:\n\t\tif (!mnt_fs_is_kernel(fs))\n\t\t\txasprintf(&str, \"%d\", mnt_fs_get_passno(fs));\n\t\tbreak;\n\tdefault:\n\t\tbreak;\n\t}\n\treturn str;\n}",
    "abstract_func": "static char *get_data(struct libmnt_fs *VAR_0, int VAR_1)\n{\n\tchar *VAR_2 = NULL;\n\tconst char *VAR_3 = NULL, *VAR_4 = NULL;\n\tint VAR_5 = get_column_id(VAR_1);\n\n\tswitch (VAR_5) {\n\tcase VAR_6:\n\t\t/* COMMENT_0 */\n\t\tif ((VAR_7 & VAR_8) &&\n\t\t    mnt_fs_get_tag(VAR_0, &VAR_3, &VAR_4) == 0) {\n\t\t\tblkid_dev_iterate VAR_9;\n\t\t\tblkid_dev VAR_10;\n\t\t\tblkid_cache VAR_11 = NULL;\n\t\t\tstruct ul_buffer VAR_12 = VAR_13;\n\t\t\tint VAR_14 = 0;\n\n\t\t\tif (blkid_get_cache(&VAR_11, NULL) < 0)\n\t\t\t\tbreak;\n\n\t\t\tblkid_probe_all(VAR_11);\n\n\t\t\tVAR_9 = blkid_dev_iterate_begin(VAR_11);\n\t\t\tblkid_dev_set_search(VAR_9, VAR_3, VAR_4);\n\t\t\twhile (blkid_dev_next(VAR_9, &VAR_10) == 0) {\n\t\t\t\tVAR_10 = blkid_verify(VAR_11, VAR_10);\n\t\t\t\tif (!VAR_10)\n\t\t\t\t\tcontinue;\n\t\t\t\tif (VAR_14 != 0)\n\t\t\t\t\tul_buffer_append_data(&VAR_12, \"\\n\", 1);\n\t\t\t\tul_buffer_append_string(&VAR_12, blkid_dev_devname(VAR_10));\n\t\t\t\tVAR_14++;\n\t\t\t}\n\t\t\tblkid_dev_iterate_end(VAR_9);\n\t\t\tVAR_2 = ul_buffer_get_data(&VAR_12, NULL, NULL);\n\t\t\tbreak;\n\t\t}\n\t\t/* COMMENT_1 */\n\tcase VAR_15:\n\t{\n\t\tconst char *VAR_16 = mnt_fs_get_root(VAR_0);\n\t\tconst char *VAR_17 = mnt_fs_get_srcpath(VAR_0);\n\t\tchar *VAR_18 = NULL;\n\n\t\tif (VAR_17 && (VAR_7 & VAR_19))\n\t\t\tVAR_17 = VAR_18 = mnt_resolve_path(VAR_17, VAR_11);\n\t\tif (!VAR_17) {\n\t\t\tVAR_17 = mnt_fs_get_source(VAR_0);\n\n\t\t\tif (VAR_17 && (VAR_7 & VAR_8))\n\t\t\t\tVAR_17 = VAR_18 = mnt_resolve_spec(VAR_17, VAR_11);\n\t\t}\n\t\tif (VAR_16 && VAR_17 && !(VAR_7 & VAR_20) && strcmp(VAR_16, \"/\") != 0)\n\t\t\txasprintf(&VAR_2, \"%s[%s]\", VAR_17, VAR_16);\n\t\telse if (VAR_17)\n\t\t\tVAR_2 = xstrdup(VAR_17);\n\t\tif (!VAR_11)\n\t\t\tfree(VAR_18);\n\t\tbreak;\n\t}\n\n\tcase VAR_21:\n\t\tif (mnt_fs_get_target(VAR_0))\n\t\t\tVAR_2 = xstrdup(mnt_fs_get_target(VAR_0));\n\t\tbreak;\n\tcase VAR_22:\n\t\tif (mnt_fs_get_fstype(VAR_0))\n\t\t\tVAR_2 = xstrdup(mnt_fs_get_fstype(VAR_0));\n\t\tbreak;\n\tcase VAR_23:\n\t\tif (mnt_fs_get_options(VAR_0))\n\t\t\tVAR_2 = xstrdup(mnt_fs_get_options(VAR_0));\n\t\tbreak;\n\tcase VAR_24:\n\t\tif (VAR_7 & VAR_25)\n\t\t\tVAR_2 = mnt_fs_get_vfs_options_all(VAR_0);\n\t\telse if (mnt_fs_get_vfs_options(VAR_0))\n\t\t\tVAR_2 = xstrdup(mnt_fs_get_vfs_options(VAR_0));\n\t\tbreak;\n\tcase VAR_26:\n\t\tif (mnt_fs_get_fs_options(VAR_0))\n\t\t\tVAR_2 = xstrdup(mnt_fs_get_fs_options(VAR_0));\n\t\tbreak;\n\tcase VAR_27:\n\t\tif (mnt_fs_get_optional_fields(VAR_0))\n\t\t\tVAR_2 = xstrdup(mnt_fs_get_optional_fields(VAR_0));\n\t\tbreak;\n\tcase VAR_28:\n\t\tVAR_2 = get_tag(VAR_0, \"UUID\", VAR_5);\n\t\tbreak;\n\tcase VAR_29:\n\t\tVAR_2 = get_tag(VAR_0, \"PARTUUID\", VAR_5);\n\t\tbreak;\n\tcase VAR_30:\n\t\tVAR_2 = get_tag(VAR_0, \"LABEL\", VAR_5);\n\t\tbreak;\n\tcase VAR_31:\n\t\tVAR_2 = get_tag(VAR_0, \"PARTLABEL\", VAR_5);\n\t\tbreak;\n\n\tcase VAR_32:\n\t{\n\t\tdev_t VAR_33 = mnt_fs_get_devno(VAR_0);\n\t\tif (!VAR_33)\n\t\t\tbreak;\n\n\t\tif ((VAR_7 & VAR_34) || (VAR_7 & VAR_35) || (VAR_7 & VAR_36))\n\t\t\txasprintf(&VAR_2, \"%u:%u\", major(VAR_33), minor(VAR_33));\n\t\telse\n\t\t\txasprintf(&VAR_2, \"%3u:%-3u\", major(VAR_33), minor(VAR_33));\n\t\tbreak;\n\t}\n\tcase VAR_37:\n\tcase VAR_38:\n\tcase VAR_39:\n\tcase VAR_40:\n\t\tVAR_2 = get_vfs_attr(VAR_0, VAR_5);\n\t\tbreak;\n\tcase VAR_41:\n\t\tif (mnt_fs_get_root(VAR_0))\n\t\t\tVAR_2 = xstrdup(mnt_fs_get_root(VAR_0));\n\t\tbreak;\n\tcase VAR_42:\n\t\tif (mnt_fs_get_tid(VAR_0))\n\t\t\txasprintf(&VAR_2, \"%d\", mnt_fs_get_tid(VAR_0));\n\t\tbreak;\n\tcase VAR_43:\n\t\tif (mnt_fs_get_id(VAR_0))\n\t\t\txasprintf(&VAR_2, \"%d\", mnt_fs_get_id(VAR_0));\n\t\tbreak;\n\tcase VAR_44:\n\t\tif (mnt_fs_get_parent_id(VAR_0))\n\t\t\txasprintf(&VAR_2, \"%d\", mnt_fs_get_parent_id(VAR_0));\n\t\tbreak;\n\tcase VAR_45:\n\t\tif (mnt_fs_is_kernel(VAR_0)) {\n\t\t\tunsigned long VAR_46 = 0;\n\t\t\tchar *VAR_47 = NULL;\n\n\t\t\tif (mnt_fs_get_propagation(VAR_0, &VAR_46) != 0)\n\t\t\t\tbreak;\n\n\t\t\tVAR_47 = xstrdup((VAR_46 & VAR_48) ? \"shared\" : \"private\");\n\n\t\t\tif (VAR_46 & VAR_49) {\n\t\t\t\txasprintf(&VAR_2, \"%s,slave\", VAR_47);\n\t\t\t\tfree(VAR_47);\n\t\t\t\tVAR_47 = VAR_2;\n\t\t\t}\n\t\t\tif (VAR_46 & VAR_50) {\n\t\t\t\txasprintf(&VAR_2, \"%s,unbindable\", VAR_47);\n\t\t\t\tfree(VAR_47);\n\t\t\t\tVAR_47 = VAR_2;\n\t\t\t}\n\t\t\tVAR_2 = VAR_47;\n\t\t}\n\t\tbreak;\n\tcase VAR_51:\n\t\tif (!mnt_fs_is_kernel(VAR_0))\n\t\t\txasprintf(&VAR_2, \"%d\", mnt_fs_get_freq(VAR_0));\n\t\tbreak;\n\tcase VAR_52:\n\t\tif (!mnt_fs_is_kernel(VAR_0))\n\t\t\txasprintf(&VAR_2, \"%d\", mnt_fs_get_passno(VAR_0));\n\t\tbreak;\n\tdefault:\n\t\tbreak;\n\t}\n\treturn VAR_2;\n}",
    "func_graph_path": "util-linux/166e87368ae88bf31112a30e078cceae637f4cdb/findmnt.c/vul/after/2.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -163,9 +163,6 @@\n \t\tif (!mnt_fs_is_kernel(fs))\n \t\t\txasprintf(&str, \"%d\", mnt_fs_get_passno(fs));\n \t\tbreak;\n-\tcase COL_DELETED:\n-\t\tstr = xstrdup(mnt_fs_is_deleted(fs) ? \"1\" : \"0\");\n-\t\tbreak;\n \tdefault:\n \t\tbreak;\n \t}",
    "diff_line_info": {
        "deleted_lines": [
            "\tcase COL_DELETED:",
            "\t\tstr = xstrdup(mnt_fs_is_deleted(fs) ? \"1\" : \"0\");",
            "\t\tbreak;"
        ],
        "added_lines": []
    },
    "is_vul": true,
    "pr_url": null,
    "description": "no more info"
}