{
    "cve_id": "CVE-2022-42003",
    "cwe_ids": [
        "CWE-502"
    ],
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
    "cvss_is_v3": true,
    "repo_name": "FasterXML/jackson-databind",
    "commit_msg": "Fix #3590",
    "commit_hash": "d78d00ee7b5245b93103fef3187f70543d67ca33",
    "git_url": "https://github.com/FasterXML/jackson-databind/commit/d78d00ee7b5245b93103fef3187f70543d67ca33",
    "file_path": "src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
    "func_name": "_parseDoublePrimitive",
    "func_before": "protected final double _parseDoublePrimitive(JsonParser p, DeserializationContext ctxt)\n        throws IOException\n    {\n        String text;\n        switch (p.currentTokenId()) {\n        case JsonTokenId.ID_STRING:\n            text = p.getText();\n            break;\n        case JsonTokenId.ID_NUMBER_INT:\n            final CoercionAction act = _checkIntToFloatCoercion(p, ctxt, Double.TYPE);\n            if (act == CoercionAction.AsNull) {\n                return 0.0d;\n            }\n            if (act == CoercionAction.AsEmpty) {\n                return 0.0d;\n            }\n            // fall through to coerce\n        case JsonTokenId.ID_NUMBER_FLOAT:\n            return p.getDoubleValue();\n        case JsonTokenId.ID_NULL:\n            _verifyNullForPrimitive(ctxt);\n            return 0.0;\n        // 29-Jun-2020, tatu: New! \"Scalar from Object\" (mostly for XML)\n        case JsonTokenId.ID_START_OBJECT:\n            text = ctxt.extractScalarFromObject(p, this, Double.TYPE);\n            break;\n        case JsonTokenId.ID_START_ARRAY:\n            if (ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\n                p.nextToken();\n                final double parsed = _parseDoublePrimitive(p, ctxt);\n                _verifyEndArrayForSingle(p, ctxt);\n                return parsed;\n            }\n            // fall through\n        default:\n            return ((Number) ctxt.handleUnexpectedToken(Double.TYPE, p)).doubleValue();\n        }\n\n        // 18-Nov-2020, tatu: Special case, Not-a-Numbers as String need to be\n        //     considered \"native\" representation as JSON does not allow as numbers,\n        //     and hence not bound by coercion rules\n        {\n            Double nan = this._checkDoubleSpecialValue(text);\n            if (nan != null) {\n                return nan.doubleValue();\n            }\n        }\n\n        final CoercionAction act = _checkFromStringCoercion(ctxt, text,\n                LogicalType.Integer, Double.TYPE);\n        if (act == CoercionAction.AsNull) {\n            // 03-May-2021, tatu: Might not be allowed (should we do \"empty\" check?)\n            _verifyNullForPrimitive(ctxt);\n            return  0.0;\n        }\n        if (act == CoercionAction.AsEmpty) {\n            return  0.0;\n        }\n        text = text.trim();\n        if (_hasTextualNull(text)) {\n            _verifyNullForPrimitiveCoercion(ctxt, text);\n            return  0.0;\n        }\n        return _parseDoublePrimitive(p, ctxt, text);\n    }",
    "abstract_func_before": "protected final double _parseDoublePrimitive(JsonParser VAR_0, DeserializationContext VAR_1)\n        throws IOException\n    {\n        String VAR_2;\n        switch (VAR_0.currentTokenId()) {\n        case VAR_3.ID_STRING:\n            VAR_2 = VAR_0.getText();\n            break;\n        case VAR_3.ID_NUMBER_INT:\n            final CoercionAction VAR_4 = _checkIntToFloatCoercion(VAR_0, VAR_1, VAR_5.TYPE);\n            if (VAR_4 == VAR_6.AsNull) {\n                return 0.0d;\n            }\n            if (VAR_4 == VAR_6.AsEmpty) {\n                return 0.0d;\n            }\n            /* COMMENT_0 */\n        case VAR_3.ID_NUMBER_FLOAT:\n            return VAR_0.getDoubleValue();\n        case VAR_3.ID_NULL:\n            _verifyNullForPrimitive(VAR_1);\n            return 0.0;\n        /* COMMENT_1 */\n        case VAR_3.ID_START_OBJECT:\n            VAR_2 = VAR_1.extractScalarFromObject(VAR_0, this, VAR_5.TYPE);\n            break;\n        case VAR_3.ID_START_ARRAY:\n            if (VAR_1.isEnabled(VAR_7.UNWRAP_SINGLE_VALUE_ARRAYS)) {\n                VAR_0.nextToken();\n                final double VAR_8 = _parseDoublePrimitive(VAR_0, VAR_1);\n                _verifyEndArrayForSingle(VAR_0, VAR_1);\n                return VAR_8;\n            }\n            /* COMMENT_2 */\n        default:\n            return ((Number) VAR_1.handleUnexpectedToken(VAR_5.TYPE, VAR_0)).doubleValue();\n        }\n\n        /* COMMENT_3 */\n        /* COMMENT_4 */\n        /* COMMENT_5 */\n        {\n            Double VAR_9 = this._checkDoubleSpecialValue(VAR_2);\n            if (VAR_9 != null) {\n                return VAR_9.doubleValue();\n            }\n        }\n\n        final CoercionAction VAR_4 = _checkFromStringCoercion(VAR_1, VAR_2,\n                VAR_10.Integer, VAR_5.TYPE);\n        if (VAR_4 == VAR_6.AsNull) {\n            /* COMMENT_6 */\n            _verifyNullForPrimitive(VAR_1);\n            return  0.0;\n        }\n        if (VAR_4 == VAR_6.AsEmpty) {\n            return  0.0;\n        }\n        VAR_2 = VAR_2.trim();\n        if (_hasTextualNull(VAR_2)) {\n            _verifyNullForPrimitiveCoercion(VAR_1, VAR_2);\n            return  0.0;\n        }\n        return _parseDoublePrimitive(VAR_0, VAR_1, VAR_2);\n    }",
    "func_graph_path_before": "FasterXML/jackson-databind/d78d00ee7b5245b93103fef3187f70543d67ca33/StdDeserializer.java/vul/before/2.json",
    "func": "protected final double _parseDoublePrimitive(JsonParser p, DeserializationContext ctxt)\n        throws IOException\n    {\n        String text;\n        switch (p.currentTokenId()) {\n        case JsonTokenId.ID_STRING:\n            text = p.getText();\n            break;\n        case JsonTokenId.ID_NUMBER_INT:\n            final CoercionAction act = _checkIntToFloatCoercion(p, ctxt, Double.TYPE);\n            if (act == CoercionAction.AsNull) {\n                return 0.0d;\n            }\n            if (act == CoercionAction.AsEmpty) {\n                return 0.0d;\n            }\n            // fall through to coerce\n        case JsonTokenId.ID_NUMBER_FLOAT:\n            return p.getDoubleValue();\n        case JsonTokenId.ID_NULL:\n            _verifyNullForPrimitive(ctxt);\n            return 0.0;\n        // 29-Jun-2020, tatu: New! \"Scalar from Object\" (mostly for XML)\n        case JsonTokenId.ID_START_OBJECT:\n            text = ctxt.extractScalarFromObject(p, this, Double.TYPE);\n            break;\n        case JsonTokenId.ID_START_ARRAY:\n            if (ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\n                if (p.nextToken() == JsonToken.START_ARRAY) {\n                    return (double) handleNestedArrayForSingle(p, ctxt);\n                }\n                final double parsed = _parseDoublePrimitive(p, ctxt);\n                _verifyEndArrayForSingle(p, ctxt);\n                return parsed;\n            }\n            // fall through\n        default:\n            return ((Number) ctxt.handleUnexpectedToken(Double.TYPE, p)).doubleValue();\n        }\n\n        // 18-Nov-2020, tatu: Special case, Not-a-Numbers as String need to be\n        //     considered \"native\" representation as JSON does not allow as numbers,\n        //     and hence not bound by coercion rules\n        {\n            Double nan = this._checkDoubleSpecialValue(text);\n            if (nan != null) {\n                return nan.doubleValue();\n            }\n        }\n\n        final CoercionAction act = _checkFromStringCoercion(ctxt, text,\n                LogicalType.Integer, Double.TYPE);\n        if (act == CoercionAction.AsNull) {\n            // 03-May-2021, tatu: Might not be allowed (should we do \"empty\" check?)\n            _verifyNullForPrimitive(ctxt);\n            return  0.0;\n        }\n        if (act == CoercionAction.AsEmpty) {\n            return  0.0;\n        }\n        text = text.trim();\n        if (_hasTextualNull(text)) {\n            _verifyNullForPrimitiveCoercion(ctxt, text);\n            return  0.0;\n        }\n        return _parseDoublePrimitive(p, ctxt, text);\n    }",
    "abstract_func": "protected final double _parseDoublePrimitive(JsonParser VAR_0, DeserializationContext VAR_1)\n        throws IOException\n    {\n        String VAR_2;\n        switch (VAR_0.currentTokenId()) {\n        case VAR_3.ID_STRING:\n            VAR_2 = VAR_0.getText();\n            break;\n        case VAR_3.ID_NUMBER_INT:\n            final CoercionAction VAR_4 = _checkIntToFloatCoercion(VAR_0, VAR_1, VAR_5.TYPE);\n            if (VAR_4 == VAR_6.AsNull) {\n                return 0.0d;\n            }\n            if (VAR_4 == VAR_6.AsEmpty) {\n                return 0.0d;\n            }\n            /* COMMENT_0 */\n        case VAR_3.ID_NUMBER_FLOAT:\n            return VAR_0.getDoubleValue();\n        case VAR_3.ID_NULL:\n            _verifyNullForPrimitive(VAR_1);\n            return 0.0;\n        /* COMMENT_1 */\n        case VAR_3.ID_START_OBJECT:\n            VAR_2 = VAR_1.extractScalarFromObject(VAR_0, this, VAR_5.TYPE);\n            break;\n        case VAR_3.ID_START_ARRAY:\n            if (VAR_1.isEnabled(VAR_7.UNWRAP_SINGLE_VALUE_ARRAYS)) {\n                if (VAR_0.nextToken() == VAR_8.START_ARRAY) {\n                    return (double) handleNestedArrayForSingle(VAR_0, VAR_1);\n                }\n                final double VAR_9 = _parseDoublePrimitive(VAR_0, VAR_1);\n                _verifyEndArrayForSingle(VAR_0, VAR_1);\n                return VAR_9;\n            }\n            /* COMMENT_2 */\n        default:\n            return ((Number) VAR_1.handleUnexpectedToken(VAR_5.TYPE, VAR_0)).doubleValue();\n        }\n\n        /* COMMENT_3 */\n        /* COMMENT_4 */\n        /* COMMENT_5 */\n        {\n            Double VAR_10 = this._checkDoubleSpecialValue(VAR_2);\n            if (VAR_10 != null) {\n                return VAR_10.doubleValue();\n            }\n        }\n\n        final CoercionAction VAR_4 = _checkFromStringCoercion(VAR_1, VAR_2,\n                VAR_11.Integer, VAR_5.TYPE);\n        if (VAR_4 == VAR_6.AsNull) {\n            /* COMMENT_6 */\n            _verifyNullForPrimitive(VAR_1);\n            return  0.0;\n        }\n        if (VAR_4 == VAR_6.AsEmpty) {\n            return  0.0;\n        }\n        VAR_2 = VAR_2.trim();\n        if (_hasTextualNull(VAR_2)) {\n            _verifyNullForPrimitiveCoercion(VAR_1, VAR_2);\n            return  0.0;\n        }\n        return _parseDoublePrimitive(VAR_0, VAR_1, VAR_2);\n    }",
    "func_graph_path": "FasterXML/jackson-databind/d78d00ee7b5245b93103fef3187f70543d67ca33/StdDeserializer.java/vul/after/2.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -26,7 +26,9 @@\n             break;\n         case JsonTokenId.ID_START_ARRAY:\n             if (ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\n-                p.nextToken();\n+                if (p.nextToken() == JsonToken.START_ARRAY) {\n+                    return (double) handleNestedArrayForSingle(p, ctxt);\n+                }\n                 final double parsed = _parseDoublePrimitive(p, ctxt);\n                 _verifyEndArrayForSingle(p, ctxt);\n                 return parsed;",
    "diff_line_info": {
        "deleted_lines": [
            "                p.nextToken();"
        ],
        "added_lines": [
            "                if (p.nextToken() == JsonToken.START_ARRAY) {",
            "                    return (double) handleNestedArrayForSingle(p, ctxt);",
            "                }"
        ]
    },
    "is_vul": true,
    "pr_url": null,
    "description": "no more info"
}