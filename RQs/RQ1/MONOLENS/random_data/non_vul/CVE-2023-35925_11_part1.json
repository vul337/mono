{
    "cve_id": "CVE-2023-35925",
    "cwe_ids": [
        "CWE-400"
    ],
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H",
    "cvss_is_v3": true,
    "repo_name": "IntellectualSites/FastAsyncWorldEdit",
    "commit_msg": "feat: prevent edits outside +/- 30,000,000 blocks",
    "commit_hash": "3a8dfb4f7b858a439c35f7af1d56d21f796f61f5",
    "git_url": "https://github.com/IntellectualSites/FastAsyncWorldEdit/commit/3a8dfb4f7b858a439c35f7af1d56d21f796f61f5",
    "file_path": "worldedit-bukkit/src/main/java/com/sk89q/worldedit/bukkit/BukkitWorld.java",
    "func_name": "setBlock",
    "func_before": "@Override\n    public <B extends BlockStateHolder<B>> boolean setBlock(BlockVector3 position, B block, SideEffectSet sideEffects) {\n        if (worldNativeAccess != null) {\n            try {\n                return worldNativeAccess.setBlock(position, block, sideEffects);\n            } catch (Exception e) {\n                if (block instanceof BaseBlock && ((BaseBlock) block).getNbt() != null) {\n                    LOGGER.warn(\"Tried to set a corrupt tile entity at \" + position.toString()\n                            + \": \" + ((BaseBlock) block).getNbt(), e);\n                } else {\n                    LOGGER.warn(\"Failed to set block via adapter, falling back to generic\", e);\n                }\n            }\n        }\n        Block bukkitBlock = getWorld().getBlockAt(position.getBlockX(), position.getBlockY(), position.getBlockZ());\n        bukkitBlock.setBlockData(BukkitAdapter.adapt(block), sideEffects.doesApplyAny());\n        return true;\n    }",
    "abstract_func_before": "@Override\n    public <B extends BlockStateHolder<B>> boolean setBlock(BlockVector3 VAR_0, B VAR_1, SideEffectSet VAR_2) {\n        if (VAR_3 != null) {\n            try {\n                return VAR_3.setBlock(VAR_0, VAR_1, VAR_2);\n            } catch (Exception VAR_4) {\n                if (VAR_1 instanceof BaseBlock && ((BaseBlock) VAR_1).getNbt() != null) {\n                    VAR_5.warn(\"Tried to set a corrupt tile entity at \" + VAR_0.toString()\n                            + \": \" + ((BaseBlock) VAR_1).getNbt(), VAR_4);\n                } else {\n                    VAR_5.warn(\"Failed to set block via adapter, falling back to generic\", VAR_4);\n                }\n            }\n        }\n        Block VAR_6 = getWorld().getBlockAt(VAR_0.getBlockX(), VAR_0.getBlockY(), VAR_0.getBlockZ());\n        VAR_6.setBlockData(VAR_7.adapt(VAR_1), VAR_2.doesApplyAny());\n        return true;\n    }",
    "func_graph_path_before": "IntellectualSites/FastAsyncWorldEdit/3a8dfb4f7b858a439c35f7af1d56d21f796f61f5/BukkitWorld.java/vul/before/11.json",
    "func": "@Override\n    public <B extends BlockStateHolder<B>> boolean setBlock(BlockVector3 position, B block, SideEffectSet sideEffects) {\n        //FAWE start - safe edit region\n        testCoords(position);\n        //FAWE end\n        if (worldNativeAccess != null) {\n            try {\n                return worldNativeAccess.setBlock(position, block, sideEffects);\n            } catch (Exception e) {\n                if (block instanceof BaseBlock && ((BaseBlock) block).getNbt() != null) {\n                    LOGGER.warn(\"Tried to set a corrupt tile entity at \" + position.toString()\n                            + \": \" + ((BaseBlock) block).getNbt(), e);\n                } else {\n                    LOGGER.warn(\"Failed to set block via adapter, falling back to generic\", e);\n                }\n            }\n        }\n        Block bukkitBlock = getWorld().getBlockAt(position.getBlockX(), position.getBlockY(), position.getBlockZ());\n        bukkitBlock.setBlockData(BukkitAdapter.adapt(block), sideEffects.doesApplyAny());\n        return true;\n    }",
    "abstract_func": "@Override\n    public <B extends BlockStateHolder<B>> boolean setBlock(BlockVector3 VAR_0, B VAR_1, SideEffectSet VAR_2) {\n        /* COMMENT_0 */\n        testCoords(VAR_0);\n        /* COMMENT_1 */\n        if (VAR_3 != null) {\n            try {\n                return VAR_3.setBlock(VAR_0, VAR_1, VAR_2);\n            } catch (Exception VAR_4) {\n                if (VAR_1 instanceof BaseBlock && ((BaseBlock) VAR_1).getNbt() != null) {\n                    VAR_5.warn(\"Tried to set a corrupt tile entity at \" + VAR_0.toString()\n                            + \": \" + ((BaseBlock) VAR_1).getNbt(), VAR_4);\n                } else {\n                    VAR_5.warn(\"Failed to set block via adapter, falling back to generic\", VAR_4);\n                }\n            }\n        }\n        Block VAR_6 = getWorld().getBlockAt(VAR_0.getBlockX(), VAR_0.getBlockY(), VAR_0.getBlockZ());\n        VAR_6.setBlockData(VAR_7.adapt(VAR_1), VAR_2.doesApplyAny());\n        return true;\n    }",
    "func_graph_path": "IntellectualSites/FastAsyncWorldEdit/3a8dfb4f7b858a439c35f7af1d56d21f796f61f5/BukkitWorld.java/vul/after/11.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -1,5 +1,8 @@\n @Override\n     public <B extends BlockStateHolder<B>> boolean setBlock(BlockVector3 position, B block, SideEffectSet sideEffects) {\n+        //FAWE start - safe edit region\n+        testCoords(position);\n+        //FAWE end\n         if (worldNativeAccess != null) {\n             try {\n                 return worldNativeAccess.setBlock(position, block, sideEffects);",
    "diff_line_info": {
        "deleted_lines": [],
        "added_lines": [
            "        //FAWE start - safe edit region",
            "        testCoords(position);",
            "        //FAWE end"
        ]
    },
    "is_vul": true,
    "pr_url": "https://github.com/IntellectualSites/FastAsyncWorldEdit/pull/2285",
    "description": "no more info"
}