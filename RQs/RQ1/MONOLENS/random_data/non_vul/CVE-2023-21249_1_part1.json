{
    "cve_id": "CVE-2023-21249",
    "cwe_ids": [
        "CWE-281"
    ],
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N",
    "cvss_is_v3": true,
    "repo_name": "android",
    "commit_msg": "Watch uid proc state instead of importance for 1-time permissions\n\nThe system process may bind to an app with the flag\nBIND_FOREGROUND_SERVICE, this will put the client in the foreground\nservice importance level without the normal requirement that foreground\nservices must show a notification. Looking at proc states instead allows\nus to differentiate between these two levels of foreground service and\nrevoke the client when not in use.\n\nThis change makes the parameters `importanceToResetTimer` and\n`importanceToKeepSessionAlive` in PermissionManager#startOneTimePermissionSession\nobsolete.\n\nTest: atest CtsPermissionTestCases + manual testing with mic/cam/loc\nBug: 217981062\n(cherry picked from https://googleplex-android-review.googlesource.com/q/commit:0be78fbbf7d92bf29858aa0c48b171045ab5057f)\nMerged-In: I7a725647c001062d1a76a82b680a02e3e2edcb03\nChange-Id: I7a725647c001062d1a76a82b680a02e3e2edcb03\n",
    "commit_hash": "c00b7e7dbc1fa30339adef693d02a51254755d7f",
    "git_url": "https://android.googlesource.com/platform/frameworks/base/+/c00b7e7dbc1fa30339adef693d02a51254755d7f",
    "file_path": "services/core/java/com/android/server/pm/permission/OneTimePermissionUserManager.java",
    "func_name": "updateSessionParameters",
    "func_before": "public void updateSessionParameters(long timeoutMillis, long revokeAfterKilledDelayMillis,\n                int importanceToResetTimer, int importanceToKeepSessionAlive) {\n            synchronized (mInnerLock) {\n                mTimeout = Math.min(mTimeout, timeoutMillis);\n                mRevokeAfterKilledDelay = Math.min(mRevokeAfterKilledDelay,\n                        revokeAfterKilledDelayMillis == -1\n                                ? DeviceConfig.getLong(\n                                DeviceConfig.NAMESPACE_PERMISSIONS,\n                                PROPERTY_KILLED_DELAY_CONFIG_KEY, DEFAULT_KILLED_DELAY_MILLIS)\n                                : revokeAfterKilledDelayMillis);\n                mImportanceToResetTimer = Math.min(importanceToResetTimer, mImportanceToResetTimer);\n                mImportanceToKeepSessionAlive = Math.min(importanceToKeepSessionAlive,\n                        mImportanceToKeepSessionAlive);\n                Log.v(LOG_TAG,\n                        \"Updated params for \" + mPackageName + \". timeout=\" + mTimeout\n                                + \" killedDelay=\" + mRevokeAfterKilledDelay\n                                + \" importanceToResetTimer=\" + mImportanceToResetTimer\n                                + \" importanceToKeepSessionAlive=\" + mImportanceToKeepSessionAlive);\n                onImportanceChanged(mUid, mActivityManager.getPackageImportance(mPackageName));\n            }\n        }",
    "abstract_func_before": "public void updateSessionParameters(long VAR_0, long VAR_1,\n                int VAR_2, int VAR_3) {\n            synchronized (VAR_4) {\n                VAR_5 = VAR_6.min(VAR_5, VAR_0);\n                VAR_7 = VAR_6.min(VAR_7,\n                        VAR_1 == -1\n                                ? VAR_8.getLong(\n                                VAR_8.NAMESPACE_PERMISSIONS,\n                                VAR_9, VAR_10)\n                                : VAR_1);\n                VAR_11 = VAR_6.min(VAR_2, VAR_11);\n                VAR_12 = VAR_6.min(VAR_3,\n                        VAR_12);\n                VAR_13.v(VAR_14,\n                        \"Updated params for \" + VAR_15 + \". timeout=\" + VAR_5\n                                + \" killedDelay=\" + VAR_7\n                                + \" importanceToResetTimer=\" + VAR_11\n                                + \" importanceToKeepSessionAlive=\" + VAR_12);\n                onImportanceChanged(VAR_16, VAR_17.getPackageImportance(VAR_15));\n            }\n        }",
    "func_graph_path_before": "android/c00b7e7dbc1fa30339adef693d02a51254755d7f/OneTimePermissionUserManager.java/vul/before/1.json",
    "func": "public void updateSessionParameters(long timeoutMillis, long revokeAfterKilledDelayMillis) {\n            synchronized (mInnerLock) {\n                mTimeout = Math.min(mTimeout, timeoutMillis);\n                mRevokeAfterKilledDelay = Math.min(mRevokeAfterKilledDelay,\n                        revokeAfterKilledDelayMillis == -1\n                                ? DeviceConfig.getLong(\n                                DeviceConfig.NAMESPACE_PERMISSIONS,\n                                PROPERTY_KILLED_DELAY_CONFIG_KEY, DEFAULT_KILLED_DELAY_MILLIS)\n                                : revokeAfterKilledDelayMillis);\n                Log.v(LOG_TAG,\n                        \"Updated params for \" + mPackageName + \". timeout=\" + mTimeout\n                                + \" killedDelay=\" + mRevokeAfterKilledDelay);\n                updateUidState();\n            }\n        }",
    "abstract_func": "public void updateSessionParameters(long VAR_0, long VAR_1) {\n            synchronized (VAR_2) {\n                VAR_3 = VAR_4.min(VAR_3, VAR_0);\n                VAR_5 = VAR_4.min(VAR_5,\n                        VAR_1 == -1\n                                ? VAR_6.getLong(\n                                VAR_6.NAMESPACE_PERMISSIONS,\n                                VAR_7, VAR_8)\n                                : VAR_1);\n                VAR_9.v(VAR_10,\n                        \"Updated params for \" + VAR_11 + \". timeout=\" + VAR_3\n                                + \" killedDelay=\" + VAR_5);\n                updateUidState();\n            }\n        }",
    "func_graph_path": "android/c00b7e7dbc1fa30339adef693d02a51254755d7f/OneTimePermissionUserManager.java/vul/after/1.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -1,5 +1,4 @@\n-public void updateSessionParameters(long timeoutMillis, long revokeAfterKilledDelayMillis,\n-                int importanceToResetTimer, int importanceToKeepSessionAlive) {\n+public void updateSessionParameters(long timeoutMillis, long revokeAfterKilledDelayMillis) {\n             synchronized (mInnerLock) {\n                 mTimeout = Math.min(mTimeout, timeoutMillis);\n                 mRevokeAfterKilledDelay = Math.min(mRevokeAfterKilledDelay,\n@@ -8,14 +7,9 @@\n                                 DeviceConfig.NAMESPACE_PERMISSIONS,\n                                 PROPERTY_KILLED_DELAY_CONFIG_KEY, DEFAULT_KILLED_DELAY_MILLIS)\n                                 : revokeAfterKilledDelayMillis);\n-                mImportanceToResetTimer = Math.min(importanceToResetTimer, mImportanceToResetTimer);\n-                mImportanceToKeepSessionAlive = Math.min(importanceToKeepSessionAlive,\n-                        mImportanceToKeepSessionAlive);\n                 Log.v(LOG_TAG,\n                         \"Updated params for \" + mPackageName + \". timeout=\" + mTimeout\n-                                + \" killedDelay=\" + mRevokeAfterKilledDelay\n-                                + \" importanceToResetTimer=\" + mImportanceToResetTimer\n-                                + \" importanceToKeepSessionAlive=\" + mImportanceToKeepSessionAlive);\n-                onImportanceChanged(mUid, mActivityManager.getPackageImportance(mPackageName));\n+                                + \" killedDelay=\" + mRevokeAfterKilledDelay);\n+                updateUidState();\n             }\n         }",
    "diff_line_info": {
        "deleted_lines": [
            "public void updateSessionParameters(long timeoutMillis, long revokeAfterKilledDelayMillis,",
            "                int importanceToResetTimer, int importanceToKeepSessionAlive) {",
            "                mImportanceToResetTimer = Math.min(importanceToResetTimer, mImportanceToResetTimer);",
            "                mImportanceToKeepSessionAlive = Math.min(importanceToKeepSessionAlive,",
            "                        mImportanceToKeepSessionAlive);",
            "                                + \" killedDelay=\" + mRevokeAfterKilledDelay",
            "                                + \" importanceToResetTimer=\" + mImportanceToResetTimer",
            "                                + \" importanceToKeepSessionAlive=\" + mImportanceToKeepSessionAlive);",
            "                onImportanceChanged(mUid, mActivityManager.getPackageImportance(mPackageName));"
        ],
        "added_lines": [
            "public void updateSessionParameters(long timeoutMillis, long revokeAfterKilledDelayMillis) {",
            "                                + \" killedDelay=\" + mRevokeAfterKilledDelay);",
            "                updateUidState();"
        ]
    },
    "is_vul": true,
    "pr_url": null,
    "description": "no more info"
}