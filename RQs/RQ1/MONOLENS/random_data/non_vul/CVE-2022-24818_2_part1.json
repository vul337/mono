{
    "cve_id": "CVE-2022-24818",
    "cwe_ids": [
        "CWE-917"
    ],
    "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:P/A:P",
    "cvss_is_v3": false,
    "repo_name": "geotools",
    "commit_msg": "[GEOT-7115] Streamline JNDI lookups",
    "commit_hash": "4f70fa3234391dd0cda883a20ab0ec75688cba49",
    "git_url": "https://github.com/geotools/geotools/commit/4f70fa3234391dd0cda883a20ab0ec75688cba49",
    "file_path": "modules/library/referencing/src/main/java/org/geotools/referencing/factory/epsg/ThreadedEpsgFactory.java",
    "func_name": "createBackingStore0",
    "func_before": "private AbstractAuthorityFactory createBackingStore0() throws FactoryException, SQLException {\n        /*\n         * We are locking on ReferencingFactoryFinder to avoid deadlocks.\n         * @see DeferredAuthorityFactory#getBackingStore()\n         */\n        assert Thread.holdsLock(ReferencingFactoryFinder.class);\n        final Hints sourceHints = new Hints(hints);\n        sourceHints.putAll(factories.getImplementationHints());\n        if (datasource != null) {\n            return createBackingStore(sourceHints);\n        }\n        /*\n         * Try to gets the DataSource from JNDI. In case of success, it will be tried\n         * for a connection before any DataSource declared in META-INF/services/.\n         */\n        DataSource source;\n        final InitialContext context;\n        try {\n            source = createDataSource();\n            context = registerInto;\n        } finally {\n            registerInto = null;\n        }\n        if (source == null) {\n            throw new FactoryNotFoundException(Errors.format(ErrorKeys.NO_DATA_SOURCE));\n        }\n        final AbstractAuthorityFactory factory;\n        try {\n            datasource = source;\n            factory = createBackingStore(sourceHints);\n        } finally {\n            datasource = null;\n        }\n        /*\n         * We now have a working connection. If a naming directory is running but didn't contains\n         * the \"jdbc/EPSG\" entry, add it now. In such case, a message is prepared and logged.\n         */\n        LogRecord record;\n        if (ALLOW_REGISTRATION && context != null) {\n            try {\n                context.bind(datasourceName, source);\n                record =\n                        Loggings.format(\n                                Level.FINE,\n                                LoggingKeys.CREATED_DATASOURCE_ENTRY_$1,\n                                datasourceName);\n            } catch (NamingException exception) {\n                record =\n                        Loggings.format(\n                                Level.WARNING, LoggingKeys.CANT_BIND_DATASOURCE_$1, datasourceName);\n                record.setThrown(exception);\n            }\n            log(record);\n        }\n        this.datasource = source; // Stores the data source only after success.\n        return factory;\n    }",
    "abstract_func_before": "private AbstractAuthorityFactory createBackingStore0() throws FactoryException, SQLException {\n        /* COMMENT_0 */\n                                                                         \n                                                          \n           \n        assert VAR_0.holdsLock(ReferencingFactoryFinder.class);\n        final Hints VAR_1 = new Hints(VAR_2);\n        VAR_1.putAll(VAR_3.getImplementationHints());\n        if (VAR_4 != null) {\n            return createBackingStore(VAR_1);\n        }\n        /* COMMENT_4 */\n                                                                                     \n                                                                                 \n           \n        DataSource VAR_5;\n        final InitialContext VAR_6;\n        try {\n            VAR_5 = createDataSource();\n            VAR_6 = VAR_7;\n        } finally {\n            VAR_7 = null;\n        }\n        if (VAR_5 == null) {\n            throw new FactoryNotFoundException(VAR_8.format(VAR_9.NO_DATA_SOURCE));\n        }\n        final AbstractAuthorityFactory VAR_10;\n        try {\n            VAR_4 = VAR_5;\n            VAR_10 = createBackingStore(VAR_1);\n        } finally {\n            VAR_4 = null;\n        }\n        /* COMMENT_8 */\n                                                                                                 \n                                                                                             \n           \n        LogRecord VAR_11;\n        if (VAR_12 && VAR_6 != null) {\n            try {\n                VAR_6.bind(VAR_13, VAR_5);\n                VAR_11 =\n                        VAR_14.format(\n                                VAR_15.FINE,\n                                VAR_16.CREATED_DATASOURCE_ENTRY_$1,\n                                VAR_13);\n            } catch (NamingException VAR_17) {\n                VAR_11 =\n                        VAR_14.format(\n                                VAR_15.WARNING, VAR_16.CANT_BIND_DATASOURCE_$1, VAR_13);\n                VAR_11.setThrown(VAR_17);\n            }\n            log(VAR_11);\n        }\n        this.datasource = VAR_5; /* COMMENT_12 */\n        return VAR_10;\n    }",
    "func_graph_path_before": "geotools/4f70fa3234391dd0cda883a20ab0ec75688cba49/ThreadedEpsgFactory.java/vul/before/1.json",
    "func": "private AbstractAuthorityFactory createBackingStore0() throws FactoryException, SQLException {\n        /*\n         * We are locking on ReferencingFactoryFinder to avoid deadlocks.\n         * @see DeferredAuthorityFactory#getBackingStore()\n         */\n        assert Thread.holdsLock(ReferencingFactoryFinder.class);\n        final Hints sourceHints = new Hints(hints);\n        sourceHints.putAll(factories.getImplementationHints());\n        if (datasource != null) {\n            return createBackingStore(sourceHints);\n        }\n        /*\n         * Try to gets the DataSource from JNDI. In case of success, it will be tried\n         * for a connection before any DataSource declared in META-INF/services/.\n         */\n        DataSource source = createDataSource();\n        if (source == null) {\n            throw new FactoryNotFoundException(Errors.format(ErrorKeys.NO_DATA_SOURCE));\n        }\n        final AbstractAuthorityFactory factory;\n        try {\n            datasource = source;\n            factory = createBackingStore(sourceHints);\n        } finally {\n            datasource = null;\n        }\n        this.datasource = source; // Stores the data source only after success.\n        return factory;\n    }",
    "abstract_func": "private AbstractAuthorityFactory createBackingStore0() throws FactoryException, SQLException {\n        /* COMMENT_0 */\n                                                                         \n                                                          \n           \n        assert VAR_0.holdsLock(ReferencingFactoryFinder.class);\n        final Hints VAR_1 = new Hints(VAR_2);\n        VAR_1.putAll(VAR_3.getImplementationHints());\n        if (VAR_4 != null) {\n            return createBackingStore(VAR_1);\n        }\n        /* COMMENT_4 */\n                                                                                     \n                                                                                 \n           \n        DataSource VAR_5 = createDataSource();\n        if (VAR_5 == null) {\n            throw new FactoryNotFoundException(VAR_6.format(VAR_7.NO_DATA_SOURCE));\n        }\n        final AbstractAuthorityFactory VAR_8;\n        try {\n            VAR_4 = VAR_5;\n            VAR_8 = createBackingStore(VAR_1);\n        } finally {\n            VAR_4 = null;\n        }\n        this.datasource = VAR_5; /* COMMENT_8 */\n        return VAR_8;\n    }",
    "func_graph_path": "geotools/4f70fa3234391dd0cda883a20ab0ec75688cba49/ThreadedEpsgFactory.java/vul/after/1.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -13,14 +13,7 @@\n          * Try to gets the DataSource from JNDI. In case of success, it will be tried\n          * for a connection before any DataSource declared in META-INF/services/.\n          */\n-        DataSource source;\n-        final InitialContext context;\n-        try {\n-            source = createDataSource();\n-            context = registerInto;\n-        } finally {\n-            registerInto = null;\n-        }\n+        DataSource source = createDataSource();\n         if (source == null) {\n             throw new FactoryNotFoundException(Errors.format(ErrorKeys.NO_DATA_SOURCE));\n         }\n@@ -31,27 +24,6 @@\n         } finally {\n             datasource = null;\n         }\n-        /*\n-         * We now have a working connection. If a naming directory is running but didn't contains\n-         * the \"jdbc/EPSG\" entry, add it now. In such case, a message is prepared and logged.\n-         */\n-        LogRecord record;\n-        if (ALLOW_REGISTRATION && context != null) {\n-            try {\n-                context.bind(datasourceName, source);\n-                record =\n-                        Loggings.format(\n-                                Level.FINE,\n-                                LoggingKeys.CREATED_DATASOURCE_ENTRY_$1,\n-                                datasourceName);\n-            } catch (NamingException exception) {\n-                record =\n-                        Loggings.format(\n-                                Level.WARNING, LoggingKeys.CANT_BIND_DATASOURCE_$1, datasourceName);\n-                record.setThrown(exception);\n-            }\n-            log(record);\n-        }\n         this.datasource = source; // Stores the data source only after success.\n         return factory;\n     }",
    "diff_line_info": {
        "deleted_lines": [
            "        DataSource source;",
            "        final InitialContext context;",
            "        try {",
            "            source = createDataSource();",
            "            context = registerInto;",
            "        } finally {",
            "            registerInto = null;",
            "        }",
            "        /*",
            "         * We now have a working connection. If a naming directory is running but didn't contains",
            "         * the \"jdbc/EPSG\" entry, add it now. In such case, a message is prepared and logged.",
            "         */",
            "        LogRecord record;",
            "        if (ALLOW_REGISTRATION && context != null) {",
            "            try {",
            "                context.bind(datasourceName, source);",
            "                record =",
            "                        Loggings.format(",
            "                                Level.FINE,",
            "                                LoggingKeys.CREATED_DATASOURCE_ENTRY_$1,",
            "                                datasourceName);",
            "            } catch (NamingException exception) {",
            "                record =",
            "                        Loggings.format(",
            "                                Level.WARNING, LoggingKeys.CANT_BIND_DATASOURCE_$1, datasourceName);",
            "                record.setThrown(exception);",
            "            }",
            "            log(record);",
            "        }"
        ],
        "added_lines": [
            "        DataSource source = createDataSource();"
        ]
    },
    "is_vul": true,
    "pr_url": null,
    "description": "no more info"
}