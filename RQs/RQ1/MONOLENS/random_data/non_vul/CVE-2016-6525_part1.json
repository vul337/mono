{
    "cve_id": "CVE-2016-6525",
    "cwe_ids": [
        "CWE-119"
    ],
    "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:P/A:P",
    "cvss_is_v3": false,
    "repo_name": "ArtifexSoftware/mupdf",
    "commit_msg": "Make sure that number of colors in mesh params is valid.\n\nFixes bug 696954.",
    "commit_hash": "39b0f07dd960f34e7e6bf230ffc3d87c41ef0f2e",
    "git_url": "https://github.com/ArtifexSoftware/mupdf/commit/39b0f07dd960f34e7e6bf230ffc3d87c41ef0f2e",
    "file_path": "source/pdf/pdf-shade.c",
    "func_name": "pdf_load_mesh_params",
    "func_before": "static void\npdf_load_mesh_params(fz_context *ctx, pdf_document *doc, fz_shade *shade, pdf_obj *dict)\n{\n\tpdf_obj *obj;\n\tint i, n;\n\n\tshade->u.m.x0 = shade->u.m.y0 = 0;\n\tshade->u.m.x1 = shade->u.m.y1 = 1;\n\tfor (i = 0; i < FZ_MAX_COLORS; i++)\n\t{\n\t\tshade->u.m.c0[i] = 0;\n\t\tshade->u.m.c1[i] = 1;\n\t}\n\n\tshade->u.m.vprow = pdf_to_int(ctx, pdf_dict_get(ctx, dict, PDF_NAME_VerticesPerRow));\n\tshade->u.m.bpflag = pdf_to_int(ctx, pdf_dict_get(ctx, dict, PDF_NAME_BitsPerFlag));\n\tshade->u.m.bpcoord = pdf_to_int(ctx, pdf_dict_get(ctx, dict, PDF_NAME_BitsPerCoordinate));\n\tshade->u.m.bpcomp = pdf_to_int(ctx, pdf_dict_get(ctx, dict, PDF_NAME_BitsPerComponent));\n\n\tobj = pdf_dict_get(ctx, dict, PDF_NAME_Decode);\n\tif (pdf_array_len(ctx, obj) >= 6)\n\t{\n\t\tn = (pdf_array_len(ctx, obj) - 4) / 2;\n\t\tshade->u.m.x0 = pdf_to_real(ctx, pdf_array_get(ctx, obj, 0));\n\t\tshade->u.m.x1 = pdf_to_real(ctx, pdf_array_get(ctx, obj, 1));\n\t\tshade->u.m.y0 = pdf_to_real(ctx, pdf_array_get(ctx, obj, 2));\n\t\tshade->u.m.y1 = pdf_to_real(ctx, pdf_array_get(ctx, obj, 3));\n\t\tfor (i = 0; i < n; i++)\n\t\t{\n\t\t\tshade->u.m.c0[i] = pdf_to_real(ctx, pdf_array_get(ctx, obj, 4 + i * 2));\n\t\t\tshade->u.m.c1[i] = pdf_to_real(ctx, pdf_array_get(ctx, obj, 5 + i * 2));\n\t\t}\n\t}\n\n\tif (shade->u.m.vprow < 2 && shade->type == 5)\n\t{\n\t\tfz_warn(ctx, \"Too few vertices per row (%d)\", shade->u.m.vprow);\n\t\tshade->u.m.vprow = 2;\n\t}\n\n\tif (shade->u.m.bpflag != 2 && shade->u.m.bpflag != 4 && shade->u.m.bpflag != 8 &&\n\t\tshade->type != 5)\n\t{\n\t\tfz_warn(ctx, \"Invalid number of bits per flag (%d)\", shade->u.m.bpflag);\n\t\tshade->u.m.bpflag = 8;\n\t}\n\n\tif (shade->u.m.bpcoord != 1 && shade->u.m.bpcoord != 2 && shade->u.m.bpcoord != 4 &&\n\t\tshade->u.m.bpcoord != 8 && shade->u.m.bpcoord != 12 && shade->u.m.bpcoord != 16 &&\n\t\tshade->u.m.bpcoord != 24 && shade->u.m.bpcoord != 32)\n\t{\n\t\tfz_warn(ctx, \"Invalid number of bits per coordinate (%d)\", shade->u.m.bpcoord);\n\t\tshade->u.m.bpcoord = 8;\n\t}\n\n\tif (shade->u.m.bpcomp != 1 && shade->u.m.bpcomp != 2 && shade->u.m.bpcomp != 4 &&\n\t\tshade->u.m.bpcomp != 8 && shade->u.m.bpcomp != 12 && shade->u.m.bpcomp != 16)\n\t{\n\t\tfz_warn(ctx, \"Invalid number of bits per component (%d)\", shade->u.m.bpcomp);\n\t\tshade->u.m.bpcomp = 8;\n\t}\n}",
    "abstract_func_before": "static void\npdf_load_mesh_params(fz_context *VAR_0, pdf_document *VAR_1, fz_shade *VAR_2, pdf_obj *VAR_3)\n{\n\tpdf_obj *VAR_4;\n\tint VAR_5, VAR_6;\n\n\tVAR_2->u.m.x0 = VAR_2->u.m.y0 = 0;\n\tVAR_2->u.m.x1 = VAR_2->u.m.y1 = 1;\n\tfor (VAR_5 = 0; VAR_5 < VAR_7; VAR_5++)\n\t{\n\t\tVAR_2->u.m.c0[VAR_5] = 0;\n\t\tVAR_2->u.m.c1[VAR_5] = 1;\n\t}\n\n\tVAR_2->u.m.vprow = pdf_to_int(VAR_0, pdf_dict_get(VAR_0, VAR_3, VAR_8));\n\tVAR_2->u.m.bpflag = pdf_to_int(VAR_0, pdf_dict_get(VAR_0, VAR_3, VAR_9));\n\tVAR_2->u.m.bpcoord = pdf_to_int(VAR_0, pdf_dict_get(VAR_0, VAR_3, VAR_10));\n\tVAR_2->u.m.bpcomp = pdf_to_int(VAR_0, pdf_dict_get(VAR_0, VAR_3, VAR_11));\n\n\tVAR_4 = pdf_dict_get(VAR_0, VAR_3, VAR_12);\n\tif (pdf_array_len(VAR_0, VAR_4) >= 6)\n\t{\n\t\tVAR_6 = (pdf_array_len(VAR_0, VAR_4) - 4) / 2;\n\t\tVAR_2->u.m.x0 = pdf_to_real(VAR_0, pdf_array_get(VAR_0, VAR_4, 0));\n\t\tVAR_2->u.m.x1 = pdf_to_real(VAR_0, pdf_array_get(VAR_0, VAR_4, 1));\n\t\tVAR_2->u.m.y0 = pdf_to_real(VAR_0, pdf_array_get(VAR_0, VAR_4, 2));\n\t\tVAR_2->u.m.y1 = pdf_to_real(VAR_0, pdf_array_get(VAR_0, VAR_4, 3));\n\t\tfor (VAR_5 = 0; VAR_5 < VAR_6; VAR_5++)\n\t\t{\n\t\t\tVAR_2->u.m.c0[VAR_5] = pdf_to_real(VAR_0, pdf_array_get(VAR_0, VAR_4, 4 + VAR_5 * 2));\n\t\t\tVAR_2->u.m.c1[VAR_5] = pdf_to_real(VAR_0, pdf_array_get(VAR_0, VAR_4, 5 + VAR_5 * 2));\n\t\t}\n\t}\n\n\tif (VAR_2->u.m.vprow < 2 && VAR_2->type == 5)\n\t{\n\t\tfz_warn(VAR_0, \"Too few vertices per row (%d)\", VAR_2->u.m.vprow);\n\t\tVAR_2->u.m.vprow = 2;\n\t}\n\n\tif (VAR_2->u.m.bpflag != 2 && VAR_2->u.m.bpflag != 4 && VAR_2->u.m.bpflag != 8 &&\n\t\tVAR_2->type != 5)\n\t{\n\t\tfz_warn(VAR_0, \"Invalid number of bits per flag (%d)\", VAR_2->u.m.bpflag);\n\t\tVAR_2->u.m.bpflag = 8;\n\t}\n\n\tif (VAR_2->u.m.bpcoord != 1 && VAR_2->u.m.bpcoord != 2 && VAR_2->u.m.bpcoord != 4 &&\n\t\tVAR_2->u.m.bpcoord != 8 && VAR_2->u.m.bpcoord != 12 && VAR_2->u.m.bpcoord != 16 &&\n\t\tVAR_2->u.m.bpcoord != 24 && VAR_2->u.m.bpcoord != 32)\n\t{\n\t\tfz_warn(VAR_0, \"Invalid number of bits per coordinate (%d)\", VAR_2->u.m.bpcoord);\n\t\tVAR_2->u.m.bpcoord = 8;\n\t}\n\n\tif (VAR_2->u.m.bpcomp != 1 && VAR_2->u.m.bpcomp != 2 && VAR_2->u.m.bpcomp != 4 &&\n\t\tVAR_2->u.m.bpcomp != 8 && VAR_2->u.m.bpcomp != 12 && VAR_2->u.m.bpcomp != 16)\n\t{\n\t\tfz_warn(VAR_0, \"Invalid number of bits per component (%d)\", VAR_2->u.m.bpcomp);\n\t\tVAR_2->u.m.bpcomp = 8;\n\t}\n}",
    "func_graph_path_before": "ArtifexSoftware/mupdf/39b0f07dd960f34e7e6bf230ffc3d87c41ef0f2e/pdf-shade.c/vul/before/0.json",
    "func": "static void\npdf_load_mesh_params(fz_context *ctx, pdf_document *doc, fz_shade *shade, pdf_obj *dict)\n{\n\tpdf_obj *obj;\n\tint i, n;\n\n\tshade->u.m.x0 = shade->u.m.y0 = 0;\n\tshade->u.m.x1 = shade->u.m.y1 = 1;\n\tfor (i = 0; i < FZ_MAX_COLORS; i++)\n\t{\n\t\tshade->u.m.c0[i] = 0;\n\t\tshade->u.m.c1[i] = 1;\n\t}\n\n\tshade->u.m.vprow = pdf_to_int(ctx, pdf_dict_get(ctx, dict, PDF_NAME_VerticesPerRow));\n\tshade->u.m.bpflag = pdf_to_int(ctx, pdf_dict_get(ctx, dict, PDF_NAME_BitsPerFlag));\n\tshade->u.m.bpcoord = pdf_to_int(ctx, pdf_dict_get(ctx, dict, PDF_NAME_BitsPerCoordinate));\n\tshade->u.m.bpcomp = pdf_to_int(ctx, pdf_dict_get(ctx, dict, PDF_NAME_BitsPerComponent));\n\n\tobj = pdf_dict_get(ctx, dict, PDF_NAME_Decode);\n\tif (pdf_array_len(ctx, obj) >= 6)\n\t{\n\t\tn = fz_mini(FZ_MAX_COLORS, (pdf_array_len(ctx, obj) - 4) / 2);\n\t\tshade->u.m.x0 = pdf_to_real(ctx, pdf_array_get(ctx, obj, 0));\n\t\tshade->u.m.x1 = pdf_to_real(ctx, pdf_array_get(ctx, obj, 1));\n\t\tshade->u.m.y0 = pdf_to_real(ctx, pdf_array_get(ctx, obj, 2));\n\t\tshade->u.m.y1 = pdf_to_real(ctx, pdf_array_get(ctx, obj, 3));\n\t\tfor (i = 0; i < n; i++)\n\t\t{\n\t\t\tshade->u.m.c0[i] = pdf_to_real(ctx, pdf_array_get(ctx, obj, 4 + i * 2));\n\t\t\tshade->u.m.c1[i] = pdf_to_real(ctx, pdf_array_get(ctx, obj, 5 + i * 2));\n\t\t}\n\t}\n\n\tif (shade->u.m.vprow < 2 && shade->type == 5)\n\t{\n\t\tfz_warn(ctx, \"Too few vertices per row (%d)\", shade->u.m.vprow);\n\t\tshade->u.m.vprow = 2;\n\t}\n\n\tif (shade->u.m.bpflag != 2 && shade->u.m.bpflag != 4 && shade->u.m.bpflag != 8 &&\n\t\tshade->type != 5)\n\t{\n\t\tfz_warn(ctx, \"Invalid number of bits per flag (%d)\", shade->u.m.bpflag);\n\t\tshade->u.m.bpflag = 8;\n\t}\n\n\tif (shade->u.m.bpcoord != 1 && shade->u.m.bpcoord != 2 && shade->u.m.bpcoord != 4 &&\n\t\tshade->u.m.bpcoord != 8 && shade->u.m.bpcoord != 12 && shade->u.m.bpcoord != 16 &&\n\t\tshade->u.m.bpcoord != 24 && shade->u.m.bpcoord != 32)\n\t{\n\t\tfz_warn(ctx, \"Invalid number of bits per coordinate (%d)\", shade->u.m.bpcoord);\n\t\tshade->u.m.bpcoord = 8;\n\t}\n\n\tif (shade->u.m.bpcomp != 1 && shade->u.m.bpcomp != 2 && shade->u.m.bpcomp != 4 &&\n\t\tshade->u.m.bpcomp != 8 && shade->u.m.bpcomp != 12 && shade->u.m.bpcomp != 16)\n\t{\n\t\tfz_warn(ctx, \"Invalid number of bits per component (%d)\", shade->u.m.bpcomp);\n\t\tshade->u.m.bpcomp = 8;\n\t}\n}",
    "abstract_func": "static void\npdf_load_mesh_params(fz_context *VAR_0, pdf_document *VAR_1, fz_shade *VAR_2, pdf_obj *VAR_3)\n{\n\tpdf_obj *VAR_4;\n\tint VAR_5, VAR_6;\n\n\tVAR_2->u.m.x0 = VAR_2->u.m.y0 = 0;\n\tVAR_2->u.m.x1 = VAR_2->u.m.y1 = 1;\n\tfor (VAR_5 = 0; VAR_5 < VAR_7; VAR_5++)\n\t{\n\t\tVAR_2->u.m.c0[VAR_5] = 0;\n\t\tVAR_2->u.m.c1[VAR_5] = 1;\n\t}\n\n\tVAR_2->u.m.vprow = pdf_to_int(VAR_0, pdf_dict_get(VAR_0, VAR_3, VAR_8));\n\tVAR_2->u.m.bpflag = pdf_to_int(VAR_0, pdf_dict_get(VAR_0, VAR_3, VAR_9));\n\tVAR_2->u.m.bpcoord = pdf_to_int(VAR_0, pdf_dict_get(VAR_0, VAR_3, VAR_10));\n\tVAR_2->u.m.bpcomp = pdf_to_int(VAR_0, pdf_dict_get(VAR_0, VAR_3, VAR_11));\n\n\tVAR_4 = pdf_dict_get(VAR_0, VAR_3, VAR_12);\n\tif (pdf_array_len(VAR_0, VAR_4) >= 6)\n\t{\n\t\tVAR_6 = fz_mini(VAR_7, (pdf_array_len(VAR_0, VAR_4) - 4) / 2);\n\t\tVAR_2->u.m.x0 = pdf_to_real(VAR_0, pdf_array_get(VAR_0, VAR_4, 0));\n\t\tVAR_2->u.m.x1 = pdf_to_real(VAR_0, pdf_array_get(VAR_0, VAR_4, 1));\n\t\tVAR_2->u.m.y0 = pdf_to_real(VAR_0, pdf_array_get(VAR_0, VAR_4, 2));\n\t\tVAR_2->u.m.y1 = pdf_to_real(VAR_0, pdf_array_get(VAR_0, VAR_4, 3));\n\t\tfor (VAR_5 = 0; VAR_5 < VAR_6; VAR_5++)\n\t\t{\n\t\t\tVAR_2->u.m.c0[VAR_5] = pdf_to_real(VAR_0, pdf_array_get(VAR_0, VAR_4, 4 + VAR_5 * 2));\n\t\t\tVAR_2->u.m.c1[VAR_5] = pdf_to_real(VAR_0, pdf_array_get(VAR_0, VAR_4, 5 + VAR_5 * 2));\n\t\t}\n\t}\n\n\tif (VAR_2->u.m.vprow < 2 && VAR_2->type == 5)\n\t{\n\t\tfz_warn(VAR_0, \"Too few vertices per row (%d)\", VAR_2->u.m.vprow);\n\t\tVAR_2->u.m.vprow = 2;\n\t}\n\n\tif (VAR_2->u.m.bpflag != 2 && VAR_2->u.m.bpflag != 4 && VAR_2->u.m.bpflag != 8 &&\n\t\tVAR_2->type != 5)\n\t{\n\t\tfz_warn(VAR_0, \"Invalid number of bits per flag (%d)\", VAR_2->u.m.bpflag);\n\t\tVAR_2->u.m.bpflag = 8;\n\t}\n\n\tif (VAR_2->u.m.bpcoord != 1 && VAR_2->u.m.bpcoord != 2 && VAR_2->u.m.bpcoord != 4 &&\n\t\tVAR_2->u.m.bpcoord != 8 && VAR_2->u.m.bpcoord != 12 && VAR_2->u.m.bpcoord != 16 &&\n\t\tVAR_2->u.m.bpcoord != 24 && VAR_2->u.m.bpcoord != 32)\n\t{\n\t\tfz_warn(VAR_0, \"Invalid number of bits per coordinate (%d)\", VAR_2->u.m.bpcoord);\n\t\tVAR_2->u.m.bpcoord = 8;\n\t}\n\n\tif (VAR_2->u.m.bpcomp != 1 && VAR_2->u.m.bpcomp != 2 && VAR_2->u.m.bpcomp != 4 &&\n\t\tVAR_2->u.m.bpcomp != 8 && VAR_2->u.m.bpcomp != 12 && VAR_2->u.m.bpcomp != 16)\n\t{\n\t\tfz_warn(VAR_0, \"Invalid number of bits per component (%d)\", VAR_2->u.m.bpcomp);\n\t\tVAR_2->u.m.bpcomp = 8;\n\t}\n}",
    "func_graph_path": "ArtifexSoftware/mupdf/39b0f07dd960f34e7e6bf230ffc3d87c41ef0f2e/pdf-shade.c/vul/after/0.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -20,7 +20,7 @@\n \tobj = pdf_dict_get(ctx, dict, PDF_NAME_Decode);\n \tif (pdf_array_len(ctx, obj) >= 6)\n \t{\n-\t\tn = (pdf_array_len(ctx, obj) - 4) / 2;\n+\t\tn = fz_mini(FZ_MAX_COLORS, (pdf_array_len(ctx, obj) - 4) / 2);\n \t\tshade->u.m.x0 = pdf_to_real(ctx, pdf_array_get(ctx, obj, 0));\n \t\tshade->u.m.x1 = pdf_to_real(ctx, pdf_array_get(ctx, obj, 1));\n \t\tshade->u.m.y0 = pdf_to_real(ctx, pdf_array_get(ctx, obj, 2));",
    "diff_line_info": {
        "deleted_lines": [
            "\t\tn = (pdf_array_len(ctx, obj) - 4) / 2;"
        ],
        "added_lines": [
            "\t\tn = fz_mini(FZ_MAX_COLORS, (pdf_array_len(ctx, obj) - 4) / 2);"
        ]
    },
    "is_vul": true,
    "pr_url": null,
    "description": "no more info"
}