{
    "cve_id": "CVE-2020-36518",
    "cwe_ids": [
        "CWE-787"
    ],
    "cvss_vector": "AV:N/AC:L/Au:N/C:N/I:N/A:P",
    "cvss_is_v3": false,
    "repo_name": "FasterXML/jackson-databind",
    "commit_msg": "Fix #3473 (re-implementation of #2816 for 2.14)",
    "commit_hash": "8238ab41d0350fb915797c89d46777b4496b74fd",
    "git_url": "https://github.com/FasterXML/jackson-databind/commit/8238ab41d0350fb915797c89d46777b4496b74fd",
    "file_path": "src/test/java/com/fasterxml/jackson/databind/ser/TestTreeSerialization.java",
    "func_name": "testSimpleViaObjectMapper",
    "func_before": "@SuppressWarnings(\"unchecked\")\n    public void testSimpleViaObjectMapper()\n        throws IOException\n    {\n        ObjectMapper mapper = new ObjectMapper();\n        // also need tree mapper to construct tree to serialize\n        ObjectNode n = mapper.getNodeFactory().objectNode();\n        n.put(\"number\", 15);\n        n.put(\"string\", \"abc\");\n        ObjectNode n2 = n.putObject(\"ob\");\n        n2.putArray(\"arr\");\n        StringWriter sw = new StringWriter();\n        JsonGenerator jg = mapper.createGenerator(sw);\n        mapper.writeTree(jg, n);\n\n        Map<String,Object> result = (Map<String,Object>) mapper.readValue(sw.toString(), Map.class);\n\n        assertEquals(3, result.size());\n        assertEquals(\"abc\", result.get(\"string\"));\n        assertEquals(Integer.valueOf(15), result.get(\"number\"));\n        Map<String,Object> ob = (Map<String,Object>) result.get(\"ob\");\n        assertEquals(1, ob.size());\n        List<Object> list = (List<Object>) ob.get(\"arr\");\n        assertNotNull(list);\n        assertEquals(0, list.size());\n        jg.close();\n    }",
    "abstract_func_before": "@SuppressWarnings(\"unchecked\")\n    public void testSimpleViaObjectMapper()\n        throws IOException\n    {\n        ObjectMapper VAR_0 = new ObjectMapper();\n        /* COMMENT_0 */\n        ObjectNode VAR_1 = VAR_0.getNodeFactory().objectNode();\n        VAR_1.put(\"number\", 15);\n        VAR_1.put(\"string\", \"abc\");\n        ObjectNode VAR_2 = VAR_1.putObject(\"ob\");\n        VAR_2.putArray(\"arr\");\n        StringWriter VAR_3 = new StringWriter();\n        JsonGenerator VAR_4 = VAR_0.createGenerator(VAR_3);\n        VAR_0.writeTree(VAR_4, VAR_1);\n\n        Map<String,Object> VAR_5 = (Map<String,Object>) VAR_0.readValue(VAR_3.toString(), Map.class);\n\n        assertEquals(3, VAR_5.size());\n        assertEquals(\"abc\", VAR_5.get(\"string\"));\n        assertEquals(VAR_6.valueOf(15), VAR_5.get(\"number\"));\n        Map<String,Object> VAR_7 = (Map<String,Object>) VAR_5.get(\"ob\");\n        assertEquals(1, VAR_7.size());\n        List<Object> VAR_8 = (List<Object>) VAR_7.get(\"arr\");\n        assertNotNull(VAR_8);\n        assertEquals(0, VAR_8.size());\n        VAR_4.close();\n    }",
    "func_graph_path_before": "FasterXML/jackson-databind/8238ab41d0350fb915797c89d46777b4496b74fd/TestTreeSerialization.java/vul/before/0.json",
    "func": "@SuppressWarnings(\"unchecked\")\n    public void testSimpleViaObjectMapper()\n        throws IOException\n    {\n        ObjectMapper mapper = new ObjectMapper();\n        // also need tree mapper to construct tree to serialize\n        ObjectNode n = mapper.getNodeFactory().objectNode();\n        n.put(\"number\", 15);\n        n.put(\"string\", \"abc\");\n        ObjectNode n2 = n.putObject(\"ob\");\n        n2.putArray(\"arr\");\n        StringWriter sw = new StringWriter();\n        JsonGenerator jg = mapper.createGenerator(sw);\n        mapper.writeTree(jg, n);\n\n        Map<String,Object> result = (Map<String,Object>) mapper.readValue(sw.toString(), Map.class);\n        assertEquals(3, result.size());\n        assertEquals(\"abc\", result.get(\"string\"));\n        assertEquals(Integer.valueOf(15), result.get(\"number\"));\n        Map<String,Object> ob = (Map<String,Object>) result.get(\"ob\");\n        assertEquals(1, ob.size());\n        List<Object> list = (List<Object>) ob.get(\"arr\");\n        if (list == null) {\n            fail(\"Missing entry 'arr': \"+ob);\n        }\n        assertEquals(0, list.size());\n        jg.close();\n    }",
    "abstract_func": "@SuppressWarnings(\"unchecked\")\n    public void testSimpleViaObjectMapper()\n        throws IOException\n    {\n        ObjectMapper VAR_0 = new ObjectMapper();\n        /* COMMENT_0 */\n        ObjectNode VAR_1 = VAR_0.getNodeFactory().objectNode();\n        VAR_1.put(\"number\", 15);\n        VAR_1.put(\"string\", \"abc\");\n        ObjectNode VAR_2 = VAR_1.putObject(\"ob\");\n        VAR_2.putArray(\"arr\");\n        StringWriter VAR_3 = new StringWriter();\n        JsonGenerator VAR_4 = VAR_0.createGenerator(VAR_3);\n        VAR_0.writeTree(VAR_4, VAR_1);\n\n        Map<String,Object> VAR_5 = (Map<String,Object>) VAR_0.readValue(VAR_3.toString(), Map.class);\n        assertEquals(3, VAR_5.size());\n        assertEquals(\"abc\", VAR_5.get(\"string\"));\n        assertEquals(VAR_6.valueOf(15), VAR_5.get(\"number\"));\n        Map<String,Object> VAR_7 = (Map<String,Object>) VAR_5.get(\"ob\");\n        assertEquals(1, VAR_7.size());\n        List<Object> VAR_8 = (List<Object>) VAR_7.get(\"arr\");\n        if (VAR_8 == null) {\n            fail(\"Missing entry 'arr': \"+VAR_7);\n        }\n        assertEquals(0, VAR_8.size());\n        VAR_4.close();\n    }",
    "func_graph_path": "FasterXML/jackson-databind/8238ab41d0350fb915797c89d46777b4496b74fd/TestTreeSerialization.java/vul/after/0.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -14,14 +14,15 @@\n         mapper.writeTree(jg, n);\n \n         Map<String,Object> result = (Map<String,Object>) mapper.readValue(sw.toString(), Map.class);\n-\n         assertEquals(3, result.size());\n         assertEquals(\"abc\", result.get(\"string\"));\n         assertEquals(Integer.valueOf(15), result.get(\"number\"));\n         Map<String,Object> ob = (Map<String,Object>) result.get(\"ob\");\n         assertEquals(1, ob.size());\n         List<Object> list = (List<Object>) ob.get(\"arr\");\n-        assertNotNull(list);\n+        if (list == null) {\n+            fail(\"Missing entry 'arr': \"+ob);\n+        }\n         assertEquals(0, list.size());\n         jg.close();\n     }",
    "diff_line_info": {
        "deleted_lines": [
            "",
            "        assertNotNull(list);"
        ],
        "added_lines": [
            "        if (list == null) {",
            "            fail(\"Missing entry 'arr': \"+ob);",
            "        }"
        ]
    },
    "is_vul": true,
    "pr_url": null,
    "description": "no more info"
}