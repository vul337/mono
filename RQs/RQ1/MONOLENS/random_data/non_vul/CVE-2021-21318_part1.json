{
    "cve_id": "CVE-2021-21318",
    "cwe_ids": [
        "CWE-863"
    ],
    "cvss_vector": "AV:N/AC:L/Au:S/C:N/I:P/A:P",
    "cvss_is_v3": false,
    "repo_name": "opencast",
    "commit_msg": "Fix Engage Series Publication and Access\n\nAccess to series and series metadata on the search service (shown in\nmedia module and player) depends on the events published which are part\nof the series. Publishing an event will automatically publish a series\nand update access to it. Removing an event or republishing the event\nshould do the same.\n\nIncorrectly Hiding Public Series\n--------------------------------\n\nThis patch fixes the access control update to the series when a new\nepisode is being published. Until now, a new episode publication would\nalways update the series access with the episode access.\n\nWhile this is no security issue since it can only cause the access to be\nstricter, it may cause public series to become private. This would\nhappen, for example, if a users sets one episode of a series to private\nand republishes the episode.\n\nNow, the search service will merge the access control lists of all\nepisodes to grant access based on their combined access rules.\n\nUpdate Series on Removal\n------------------------\n\nThis patch fixes Opencast not updating the series access or remove a\npublished series if an event is being removed.\n\nThis means that access to a series is re-calculated when an episode is\nbeing deleted based on the remaining published episodes in the series.\nFor example, removing the last episode with public access will now make\nthe series private which it would have stayed public before.\n\nIt also means that if the last episode of a series is being removed, the\nseries itself will be unpublished as well, so no empty series will\ncontinue to show up any longer.",
    "commit_hash": "b18c6a7f81f08ed14884592a6c14c9ab611ad450",
    "git_url": "https://github.com/opencast/opencast/commit/b18c6a7f81f08ed14884592a6c14c9ab611ad450",
    "file_path": "modules/search-service-impl/src/main/java/org/opencastproject/search/impl/SearchServiceImpl.java",
    "func_name": "addSynchronously",
    "func_before": "public void addSynchronously(MediaPackage mediaPackage) throws SearchException, MediaPackageException,\n          IllegalArgumentException, UnauthorizedException {\n    if (mediaPackage == null) {\n      throw new IllegalArgumentException(\"Unable to add a null mediapackage\");\n    }\n    logger.debug(\"Attempting to add mediapackage {} to search index\", mediaPackage.getIdentifier());\n    AccessControlList acl = authorizationService.getActiveAcl(mediaPackage).getA();\n\n    Date now = new Date();\n\n    try {\n      if (indexManager.add(mediaPackage, acl, now)) {\n        logger.info(\"Added mediapackage `{}` to the search index, using ACL `{}`\", mediaPackage, acl);\n      } else {\n        logger.warn(\"Failed to add mediapackage {} to the search index\", mediaPackage.getIdentifier());\n      }\n    } catch (SolrServerException e) {\n      throw new SearchException(e);\n    }\n\n    try {\n      persistence.storeMediaPackage(mediaPackage, acl, now);\n    } catch (SearchServiceDatabaseException e) {\n      logger.error(\"Could not store media package to search database {}: {}\", mediaPackage.getIdentifier(), e);\n      throw new SearchException(e);\n    }\n  }",
    "abstract_func_before": "public void addSynchronously(MediaPackage VAR_0) throws SearchException, MediaPackageException,\n          IllegalArgumentException, UnauthorizedException {\n    if (VAR_0 == null) {\n      throw new IllegalArgumentException(\"Unable to add a null mediapackage\");\n    }\n    VAR_1.debug(\"Attempting to add mediapackage {} to search index\", VAR_0.getIdentifier());\n    AccessControlList VAR_2 = VAR_3.getActiveAcl(VAR_0).getA();\n\n    Date VAR_4 = new Date();\n\n    try {\n      if (VAR_5.add(VAR_0, VAR_2, VAR_4)) {\n        VAR_1.info(\"Added mediapackage `{}` to the search index, using ACL `{}`\", VAR_0, VAR_2);\n      } else {\n        VAR_1.warn(\"Failed to add mediapackage {} to the search index\", VAR_0.getIdentifier());\n      }\n    } catch (SolrServerException VAR_6) {\n      throw new SearchException(VAR_6);\n    }\n\n    try {\n      VAR_7.storeMediaPackage(VAR_0, VAR_2, VAR_4);\n    } catch (SearchServiceDatabaseException VAR_6) {\n      VAR_1.error(\"Could not store media package to search database {}: {}\", VAR_0.getIdentifier(), VAR_6);\n      throw new SearchException(VAR_6);\n    }\n  }",
    "func_graph_path_before": "opencast/b18c6a7f81f08ed14884592a6c14c9ab611ad450/SearchServiceImpl.java/vul/before/0.json",
    "func": "public void addSynchronously(MediaPackage mediaPackage)\n      throws SearchException, IllegalArgumentException, UnauthorizedException, NotFoundException,\n      SearchServiceDatabaseException {\n    if (mediaPackage == null) {\n      throw new IllegalArgumentException(\"Unable to add a null mediapackage\");\n    }\n    final String mediaPackageId = mediaPackage.getIdentifier().toString();\n    logger.debug(\"Attempting to add media package {} to search index\", mediaPackageId);\n    AccessControlList acl = authorizationService.getActiveAcl(mediaPackage).getA();\n\n    AccessControlList seriesAcl = persistence.getAccessControlLists(mediaPackage.getSeries(), mediaPackageId).stream()\n        .reduce(new AccessControlList(acl.getEntries()), AccessControlList::mergeActions);\n    logger.debug(\"Updating series with merged access control list: {}\", seriesAcl);\n\n    Date now = new Date();\n\n    try {\n      if (indexManager.add(mediaPackage, acl, seriesAcl, now)) {\n        logger.info(\"Added media package `{}` to the search index, using ACL `{}`\", mediaPackageId, acl);\n      } else {\n        logger.warn(\"Failed to add media package {} to the search index\", mediaPackageId);\n      }\n    } catch (SolrServerException e) {\n      throw new SearchException(e);\n    }\n\n    try {\n      persistence.storeMediaPackage(mediaPackage, acl, now);\n    } catch (SearchServiceDatabaseException e) {\n      throw new SearchException(\n          String.format(\"Could not store media package to search database %s\", mediaPackageId), e);\n    }\n  }",
    "abstract_func": "public void addSynchronously(MediaPackage VAR_0)\n      throws SearchException, IllegalArgumentException, UnauthorizedException, NotFoundException,\n      SearchServiceDatabaseException {\n    if (VAR_0 == null) {\n      throw new IllegalArgumentException(\"Unable to add a null mediapackage\");\n    }\n    final String VAR_1 = VAR_0.getIdentifier().toString();\n    VAR_2.debug(\"Attempting to add media package {} to search index\", VAR_1);\n    AccessControlList VAR_3 = VAR_4.getActiveAcl(VAR_0).getA();\n\n    AccessControlList VAR_5 = VAR_6.getAccessControlLists(VAR_0.getSeries(), VAR_1).stream()\n        .reduce(new AccessControlList(VAR_3.getEntries()), VAR_7::VAR_8);\n    VAR_2.debug(\"Updating series with merged access control list: {}\", VAR_5);\n\n    Date VAR_9 = new Date();\n\n    try {\n      if (VAR_10.add(VAR_0, VAR_3, VAR_5, VAR_9)) {\n        VAR_2.info(\"Added media package `{}` to the search index, using ACL `{}`\", VAR_1, VAR_3);\n      } else {\n        VAR_2.warn(\"Failed to add media package {} to the search index\", VAR_1);\n      }\n    } catch (SolrServerException VAR_11) {\n      throw new SearchException(VAR_11);\n    }\n\n    try {\n      VAR_6.storeMediaPackage(VAR_0, VAR_3, VAR_9);\n    } catch (SearchServiceDatabaseException VAR_11) {\n      throw new SearchException(\n          VAR_12.format(\"Could not store media package to search database %s\", VAR_1), VAR_11);\n    }\n  }",
    "func_graph_path": "opencast/b18c6a7f81f08ed14884592a6c14c9ab611ad450/SearchServiceImpl.java/vul/after/0.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -1,18 +1,24 @@\n-public void addSynchronously(MediaPackage mediaPackage) throws SearchException, MediaPackageException,\n-          IllegalArgumentException, UnauthorizedException {\n+public void addSynchronously(MediaPackage mediaPackage)\n+      throws SearchException, IllegalArgumentException, UnauthorizedException, NotFoundException,\n+      SearchServiceDatabaseException {\n     if (mediaPackage == null) {\n       throw new IllegalArgumentException(\"Unable to add a null mediapackage\");\n     }\n-    logger.debug(\"Attempting to add mediapackage {} to search index\", mediaPackage.getIdentifier());\n+    final String mediaPackageId = mediaPackage.getIdentifier().toString();\n+    logger.debug(\"Attempting to add media package {} to search index\", mediaPackageId);\n     AccessControlList acl = authorizationService.getActiveAcl(mediaPackage).getA();\n+\n+    AccessControlList seriesAcl = persistence.getAccessControlLists(mediaPackage.getSeries(), mediaPackageId).stream()\n+        .reduce(new AccessControlList(acl.getEntries()), AccessControlList::mergeActions);\n+    logger.debug(\"Updating series with merged access control list: {}\", seriesAcl);\n \n     Date now = new Date();\n \n     try {\n-      if (indexManager.add(mediaPackage, acl, now)) {\n-        logger.info(\"Added mediapackage `{}` to the search index, using ACL `{}`\", mediaPackage, acl);\n+      if (indexManager.add(mediaPackage, acl, seriesAcl, now)) {\n+        logger.info(\"Added media package `{}` to the search index, using ACL `{}`\", mediaPackageId, acl);\n       } else {\n-        logger.warn(\"Failed to add mediapackage {} to the search index\", mediaPackage.getIdentifier());\n+        logger.warn(\"Failed to add media package {} to the search index\", mediaPackageId);\n       }\n     } catch (SolrServerException e) {\n       throw new SearchException(e);\n@@ -21,7 +27,7 @@\n     try {\n       persistence.storeMediaPackage(mediaPackage, acl, now);\n     } catch (SearchServiceDatabaseException e) {\n-      logger.error(\"Could not store media package to search database {}: {}\", mediaPackage.getIdentifier(), e);\n-      throw new SearchException(e);\n+      throw new SearchException(\n+          String.format(\"Could not store media package to search database %s\", mediaPackageId), e);\n     }\n   }",
    "diff_line_info": {
        "deleted_lines": [
            "public void addSynchronously(MediaPackage mediaPackage) throws SearchException, MediaPackageException,",
            "          IllegalArgumentException, UnauthorizedException {",
            "    logger.debug(\"Attempting to add mediapackage {} to search index\", mediaPackage.getIdentifier());",
            "      if (indexManager.add(mediaPackage, acl, now)) {",
            "        logger.info(\"Added mediapackage `{}` to the search index, using ACL `{}`\", mediaPackage, acl);",
            "        logger.warn(\"Failed to add mediapackage {} to the search index\", mediaPackage.getIdentifier());",
            "      logger.error(\"Could not store media package to search database {}: {}\", mediaPackage.getIdentifier(), e);",
            "      throw new SearchException(e);"
        ],
        "added_lines": [
            "public void addSynchronously(MediaPackage mediaPackage)",
            "      throws SearchException, IllegalArgumentException, UnauthorizedException, NotFoundException,",
            "      SearchServiceDatabaseException {",
            "    final String mediaPackageId = mediaPackage.getIdentifier().toString();",
            "    logger.debug(\"Attempting to add media package {} to search index\", mediaPackageId);",
            "",
            "    AccessControlList seriesAcl = persistence.getAccessControlLists(mediaPackage.getSeries(), mediaPackageId).stream()",
            "        .reduce(new AccessControlList(acl.getEntries()), AccessControlList::mergeActions);",
            "    logger.debug(\"Updating series with merged access control list: {}\", seriesAcl);",
            "      if (indexManager.add(mediaPackage, acl, seriesAcl, now)) {",
            "        logger.info(\"Added media package `{}` to the search index, using ACL `{}`\", mediaPackageId, acl);",
            "        logger.warn(\"Failed to add media package {} to the search index\", mediaPackageId);",
            "      throw new SearchException(",
            "          String.format(\"Could not store media package to search database %s\", mediaPackageId), e);"
        ]
    },
    "is_vul": true,
    "pr_url": null,
    "description": "no more info"
}