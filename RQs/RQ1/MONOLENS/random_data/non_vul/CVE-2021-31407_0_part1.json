{
    "cve_id": "CVE-2021-31407",
    "cwe_ids": [
        "CWE-668"
    ],
    "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:N/A:N",
    "cvss_is_v3": false,
    "repo_name": "vaadin/osgi",
    "commit_msg": "fix: avoid serving ServletContext resources by StaticFileServer\n\nfixes #50",
    "commit_hash": "0b82a606eeafdf56a129630f00b9c55a5177b64b",
    "git_url": "https://github.com/vaadin/osgi/commit/0b82a606eeafdf56a129630f00b9c55a5177b64b",
    "file_path": "flow-osgi/src/main/java/com/vaadin/flow/osgi/support/servlet/OSGiVaadinServlet.java",
    "func_name": "destroy",
    "func_before": "@Override\n    public void destroy() {\n        ServletContext servletContext = getServletContext();\n        Lookup lookup = new VaadinServletContext(servletContext)\n                .getAttribute(Lookup.class);\n        super.destroy();\n        if (lookup == null) {\n            return;\n        }\n\n        BundleContext bundleContext = FrameworkUtil\n                .getBundle(OSGiVaadinServlet.class).getBundleContext();\n        Set<Servlet> servlets = new HashSet<>();\n        try {\n            ServiceReference<?>[] references = bundleContext\n                    .getAllServiceReferences(Servlet.class.getName(), null);\n            for (ServiceReference<?> reference : references) {\n                servlets.addAll(handleDestroy(lookup, reference));\n            }\n        } catch (InvalidSyntaxException e) {\n            // this may not happen because filter parameter is {@code null} so\n            // it may not have invalid syntax\n            assert false;\n        }\n        servlets.remove(this);\n        if (servlets.size() > 0) {\n            return;\n        }\n        ServiceReference<OSGiVaadinInitialization> reference = bundleContext\n                .getServiceReference(OSGiVaadinInitialization.class);\n        if (reference == null) {\n            return;\n        }\n        OSGiVaadinInitialization initialization = bundleContext\n                .getService(reference);\n        initialization\n                .contextDestroyed(new ServletContextEvent(servletContext));\n    }",
    "abstract_func_before": "@Override\n    public void destroy() {\n        ServletContext VAR_0 = getServletContext();\n        Lookup VAR_1 = new VaadinServletContext(VAR_0)\n                .getAttribute(Lookup.class);\n        super.destroy();\n        if (VAR_1 == null) {\n            return;\n        }\n\n        BundleContext VAR_2 = VAR_3\n                .getBundle(OSGiVaadinServlet.class).getBundleContext();\n        Set<Servlet> VAR_4 = new HashSet<>();\n        try {\n            ServiceReference<?>[] VAR_5 = VAR_2\n                    .getAllServiceReferences(Servlet.class.getName(), null);\n            for (ServiceReference<?> VAR_6 : VAR_5) {\n                VAR_4.addAll(handleDestroy(VAR_1, VAR_6));\n            }\n        } catch (InvalidSyntaxException VAR_7) {\n            /* COMMENT_0 */\n            /* COMMENT_1 */\n            assert false;\n        }\n        VAR_4.remove(this);\n        if (VAR_4.size() > 0) {\n            return;\n        }\n        ServiceReference<OSGiVaadinInitialization> VAR_6 = VAR_2\n                .getServiceReference(OSGiVaadinInitialization.class);\n        if (VAR_6 == null) {\n            return;\n        }\n        OSGiVaadinInitialization VAR_8 = VAR_2\n                .getService(VAR_6);\n        VAR_8\n                .contextDestroyed(new ServletContextEvent(VAR_0));\n    }",
    "func_graph_path_before": "vaadin/osgi/0b82a606eeafdf56a129630f00b9c55a5177b64b/OSGiVaadinServlet.java/vul/before/0.json",
    "func": "@Override\n    public void destroy() {\n        ServletContext servletContext = getServletContext();\n        Lookup lookup = new VaadinServletContext(servletContext)\n                .getAttribute(Lookup.class);\n        super.destroy();\n        if (lookup == null) {\n            return;\n        }\n\n        BundleContext bundleContext = FrameworkUtil\n                .getBundle(OSGiVaadinServlet.class).getBundleContext();\n        Set<Servlet> servlets = new HashSet<>();\n        try {\n            ServiceReference<?>[] references = bundleContext\n                    .getAllServiceReferences(Servlet.class.getName(), null);\n            references = references == null ? new ServiceReference<?>[0]\n                    : references;\n            for (ServiceReference<?> reference : references) {\n                servlets.addAll(handleDestroy(lookup, reference));\n            }\n        } catch (InvalidSyntaxException e) {\n            // this may not happen because filter parameter is {@code null} so\n            // it may not have invalid syntax\n            assert false;\n        }\n        servlets.remove(this);\n        if (servlets.size() > 0) {\n            return;\n        }\n        ServiceReference<OSGiVaadinInitialization> reference = bundleContext\n                .getServiceReference(OSGiVaadinInitialization.class);\n        if (reference == null) {\n            return;\n        }\n        OSGiVaadinInitialization initialization = bundleContext\n                .getService(reference);\n        initialization\n                .contextDestroyed(new ServletContextEvent(servletContext));\n    }",
    "abstract_func": "@Override\n    public void destroy() {\n        ServletContext VAR_0 = getServletContext();\n        Lookup VAR_1 = new VaadinServletContext(VAR_0)\n                .getAttribute(Lookup.class);\n        super.destroy();\n        if (VAR_1 == null) {\n            return;\n        }\n\n        BundleContext VAR_2 = VAR_3\n                .getBundle(OSGiVaadinServlet.class).getBundleContext();\n        Set<Servlet> VAR_4 = new HashSet<>();\n        try {\n            ServiceReference<?>[] VAR_5 = VAR_2\n                    .getAllServiceReferences(Servlet.class.getName(), null);\n            VAR_5 = VAR_5 == null ? new ServiceReference<?>[0]\n                    : VAR_5;\n            for (ServiceReference<?> VAR_6 : VAR_5) {\n                VAR_4.addAll(handleDestroy(VAR_1, VAR_6));\n            }\n        } catch (InvalidSyntaxException VAR_7) {\n            /* COMMENT_0 */\n            /* COMMENT_1 */\n            assert false;\n        }\n        VAR_4.remove(this);\n        if (VAR_4.size() > 0) {\n            return;\n        }\n        ServiceReference<OSGiVaadinInitialization> VAR_6 = VAR_2\n                .getServiceReference(OSGiVaadinInitialization.class);\n        if (VAR_6 == null) {\n            return;\n        }\n        OSGiVaadinInitialization VAR_8 = VAR_2\n                .getService(VAR_6);\n        VAR_8\n                .contextDestroyed(new ServletContextEvent(VAR_0));\n    }",
    "func_graph_path": "vaadin/osgi/0b82a606eeafdf56a129630f00b9c55a5177b64b/OSGiVaadinServlet.java/vul/after/0.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -14,6 +14,8 @@\n         try {\n             ServiceReference<?>[] references = bundleContext\n                     .getAllServiceReferences(Servlet.class.getName(), null);\n+            references = references == null ? new ServiceReference<?>[0]\n+                    : references;\n             for (ServiceReference<?> reference : references) {\n                 servlets.addAll(handleDestroy(lookup, reference));\n             }",
    "diff_line_info": {
        "deleted_lines": [],
        "added_lines": [
            "            references = references == null ? new ServiceReference<?>[0]",
            "                    : references;"
        ]
    },
    "is_vul": true,
    "pr_url": "https://github.com/vaadin/osgi/pull/51",
    "description": "fixes #50"
}