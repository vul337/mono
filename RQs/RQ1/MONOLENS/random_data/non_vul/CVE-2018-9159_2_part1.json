{
    "cve_id": "CVE-2018-9159",
    "cwe_ids": [
        "CWE-22"
    ],
    "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:N/A:N",
    "cvss_is_v3": false,
    "repo_name": "perwendel/spark",
    "commit_msg": "Fix for #981, patch 2 (#988)",
    "commit_hash": "030e9d00125cbd1ad759668f85488aba1019c668",
    "git_url": "https://github.com/perwendel/spark/commit/030e9d00125cbd1ad759668f85488aba1019c668",
    "file_path": "src/main/java/spark/resource/ClassPathResource.java",
    "func_name": "equals",
    "func_before": "@Override\n    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (obj instanceof ClassPathResource) {\n            ClassPathResource otherRes = (ClassPathResource) obj;\n\n            ClassLoader thisLoader = this.classLoader;\n            ClassLoader otherLoader = otherRes.classLoader;\n\n            return (this.path.equals(otherRes.path) &&\n                thisLoader.equals(otherLoader) &&\n                this.clazz.equals(otherRes.clazz));\n        }\n        return false;\n    }",
    "abstract_func_before": "@Override\n    public boolean equals(Object VAR_0) {\n        if (VAR_0 == this) {\n            return true;\n        }\n        if (VAR_0 instanceof ClassPathResource) {\n            ClassPathResource VAR_1 = (ClassPathResource) VAR_0;\n\n            ClassLoader VAR_2 = this.classLoader;\n            ClassLoader VAR_3 = VAR_1.classLoader;\n\n            return (this.path.equals(VAR_1.path) &&\n                VAR_2.equals(VAR_3) &&\n                this.clazz.equals(VAR_1.clazz));\n        }\n        return false;\n    }",
    "func_graph_path_before": "perwendel/spark/030e9d00125cbd1ad759668f85488aba1019c668/ClassPathResource.java/vul/before/0.json",
    "func": "@Override\n    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (obj instanceof ClassPathResource) {\n            ClassPathResource otherRes = (ClassPathResource) obj;\n\n            ClassLoader thisLoader = this.classLoader;\n            ClassLoader otherLoader = otherRes.classLoader;\n\n            return (this.path.equals(otherRes.path) &&\n                    thisLoader.equals(otherLoader) &&\n                    this.clazz.equals(otherRes.clazz));\n        }\n        return false;\n    }",
    "abstract_func": "@Override\n    public boolean equals(Object VAR_0) {\n        if (VAR_0 == this) {\n            return true;\n        }\n        if (VAR_0 instanceof ClassPathResource) {\n            ClassPathResource VAR_1 = (ClassPathResource) VAR_0;\n\n            ClassLoader VAR_2 = this.classLoader;\n            ClassLoader VAR_3 = VAR_1.classLoader;\n\n            return (this.path.equals(VAR_1.path) &&\n                    VAR_2.equals(VAR_3) &&\n                    this.clazz.equals(VAR_1.clazz));\n        }\n        return false;\n    }",
    "func_graph_path": "perwendel/spark/030e9d00125cbd1ad759668f85488aba1019c668/ClassPathResource.java/vul/after/0.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -10,8 +10,8 @@\n             ClassLoader otherLoader = otherRes.classLoader;\n \n             return (this.path.equals(otherRes.path) &&\n-                thisLoader.equals(otherLoader) &&\n-                this.clazz.equals(otherRes.clazz));\n+                    thisLoader.equals(otherLoader) &&\n+                    this.clazz.equals(otherRes.clazz));\n         }\n         return false;\n     }",
    "diff_line_info": {
        "deleted_lines": [
            "                thisLoader.equals(otherLoader) &&",
            "                this.clazz.equals(otherRes.clazz));"
        ],
        "added_lines": [
            "                    thisLoader.equals(otherLoader) &&",
            "                    this.clazz.equals(otherRes.clazz));"
        ]
    },
    "is_vul": true,
    "pr_url": "https://github.com/perwendel/spark/pull/988",
    "description": "no more info"
}