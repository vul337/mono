{
    "cve_id": "CVE-2022-29181",
    "cwe_ids": [
        "CWE-241"
    ],
    "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:N/A:P",
    "cvss_is_v3": false,
    "repo_name": "sparklemotion/nokogiri",
    "commit_msg": "fix: {HTML4,XML}::SAX::{Parser,ParserContext} check arg types\n\nPreviously, arguments of the wrong type might cause segfault on CRuby.",
    "commit_hash": "db05ba9a1bd4b90aa6c76742cf6102a7c7297267",
    "git_url": "https://github.com/sparklemotion/nokogiri/commit/db05ba9a1bd4b90aa6c76742cf6102a7c7297267",
    "file_path": "ext/java/nokogiri/Html4SaxParserContext.java",
    "func_name": "parse_io",
    "func_before": "@JRubyMethod(name = \"io\", meta = true)\n  public static IRubyObject\n  parse_io(ThreadContext context,\n           IRubyObject klass,\n           IRubyObject data,\n           IRubyObject encoding)\n  {\n    Html4SaxParserContext ctx = Html4SaxParserContext.newInstance(context.runtime, (RubyClass) klass);\n    ctx.setIOInputSource(context, data, context.nil);\n    String javaEncoding = findEncodingName(context, encoding);\n    if (javaEncoding != null) {\n      ctx.getInputSource().setEncoding(javaEncoding);\n    }\n    return ctx;\n  }",
    "abstract_func_before": "@JRubyMethod(VAR_0 = \"io\", VAR_1 = true)\n  public static IRubyObject\n  parse_io(ThreadContext VAR_2,\n           IRubyObject VAR_3,\n           IRubyObject VAR_4,\n           IRubyObject VAR_5)\n  {\n    Html4SaxParserContext VAR_6 = VAR_7.newInstance(VAR_2.runtime, (RubyClass) VAR_3);\n    VAR_6.setIOInputSource(VAR_2, VAR_4, VAR_2.nil);\n    String VAR_8 = findEncodingName(VAR_2, VAR_5);\n    if (VAR_8 != null) {\n      VAR_6.getInputSource().setEncoding(VAR_8);\n    }\n    return VAR_6;\n  }",
    "func_graph_path_before": "sparklemotion/nokogiri/db05ba9a1bd4b90aa6c76742cf6102a7c7297267/Html4SaxParserContext.java/vul/before/1.json",
    "func": "@JRubyMethod(name = \"io\", meta = true)\n  public static IRubyObject\n  parse_io(ThreadContext context,\n           IRubyObject klass,\n           IRubyObject data,\n           IRubyObject encoding)\n  {\n    if (!(encoding instanceof RubyFixnum)) {\n      throw context.getRuntime().newTypeError(\"encoding must be kind_of String\");\n    }\n\n    Html4SaxParserContext ctx = Html4SaxParserContext.newInstance(context.runtime, (RubyClass) klass);\n    ctx.setIOInputSource(context, data, context.nil);\n    String javaEncoding = findEncodingName(context, encoding);\n    if (javaEncoding != null) {\n      ctx.getInputSource().setEncoding(javaEncoding);\n    }\n    return ctx;\n  }",
    "abstract_func": "@JRubyMethod(VAR_0 = \"io\", VAR_1 = true)\n  public static IRubyObject\n  parse_io(ThreadContext VAR_2,\n           IRubyObject VAR_3,\n           IRubyObject VAR_4,\n           IRubyObject VAR_5)\n  {\n    if (!(VAR_5 instanceof RubyFixnum)) {\n      throw VAR_2.getRuntime().newTypeError(\"encoding must be kind_of String\");\n    }\n\n    Html4SaxParserContext VAR_6 = VAR_7.newInstance(VAR_2.runtime, (RubyClass) VAR_3);\n    VAR_6.setIOInputSource(VAR_2, VAR_4, VAR_2.nil);\n    String VAR_8 = findEncodingName(VAR_2, VAR_5);\n    if (VAR_8 != null) {\n      VAR_6.getInputSource().setEncoding(VAR_8);\n    }\n    return VAR_6;\n  }",
    "func_graph_path": "sparklemotion/nokogiri/db05ba9a1bd4b90aa6c76742cf6102a7c7297267/Html4SaxParserContext.java/vul/after/1.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -5,6 +5,10 @@\n            IRubyObject data,\n            IRubyObject encoding)\n   {\n+    if (!(encoding instanceof RubyFixnum)) {\n+      throw context.getRuntime().newTypeError(\"encoding must be kind_of String\");\n+    }\n+\n     Html4SaxParserContext ctx = Html4SaxParserContext.newInstance(context.runtime, (RubyClass) klass);\n     ctx.setIOInputSource(context, data, context.nil);\n     String javaEncoding = findEncodingName(context, encoding);",
    "diff_line_info": {
        "deleted_lines": [],
        "added_lines": [
            "    if (!(encoding instanceof RubyFixnum)) {",
            "      throw context.getRuntime().newTypeError(\"encoding must be kind_of String\");",
            "    }",
            ""
        ]
    },
    "is_vul": true,
    "pr_url": "https://github.com/sparklemotion/nokogiri/pull/2529",
    "description": "**What problem is this PR intended to solve?**\r\n\r\nHTML4::SAX::Parser, HTML4::SAX::ParserContext, XML::SAX::Parser, and XML::SAX::ParserContext now properly check the types of the arguments to their various constructor methods.\r\n\r\nPreviously, passing arguments of unexpected types might cause a segfault or other less-obvious exceptions.\r\n\r\n**Have you included adequate test coverage?**\r\n\r\nYes! Added test coverage for these cases.\r\n\r\n\r\n**Does this change affect the behavior of either the C or the Java implementations?**\r\n\r\nBoth the C and Java implementations have been updated to behave identically in this circumstance."
}