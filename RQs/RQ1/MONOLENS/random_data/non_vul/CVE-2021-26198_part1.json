{
    "cve_id": "CVE-2021-26198",
    "cwe_ids": [
        "CWE-Other"
    ],
    "cvss_vector": "AV:N/AC:M/Au:N/C:N/I:N/A:P",
    "cvss_is_v3": false,
    "repo_name": "jerryscript-project/jerryscript",
    "commit_msg": "Bound function 'length' property should be early initialized\n\nThis patch fixes #4402.\n\nJerryScript-DCO-1.0-Signed-off-by: Robert Fancsik frobert@inf.u-szeged.hu",
    "commit_hash": "c8354e8a62d174786adf86dd4be2e31074e0e9d0",
    "git_url": "https://github.com/jerryscript-project/jerryscript/commit/c8354e8a62d174786adf86dd4be2e31074e0e9d0",
    "file_path": "jerry-core/ecma/builtin-objects/ecma-builtin-function-prototype.c",
    "func_name": "ecma_builtin_function_prototype_object_bind",
    "func_before": "static ecma_value_t\necma_builtin_function_prototype_object_bind (ecma_object_t *this_arg_obj_p , /**< this argument object */\n                                             const ecma_value_t *arguments_list_p, /**< list of arguments */\n                                             uint32_t arguments_number) /**< number of arguments */\n{\n  /* 4. 11. 18. */\n  ecma_object_t *prototype_obj_p;\n\n#if !ENABLED (JERRY_ESNEXT)\n  prototype_obj_p = ecma_builtin_get (ECMA_BUILTIN_ID_FUNCTION_PROTOTYPE);\n#else /* ENABLED (JERRY_ESNEXT) */\n#if ENABLED (JERRY_BUILTIN_PROXY)\n  if (ECMA_OBJECT_IS_PROXY (this_arg_obj_p))\n  {\n    ecma_value_t proto = ecma_proxy_object_get_prototype_of (this_arg_obj_p);\n\n    if (ECMA_IS_VALUE_ERROR (proto))\n    {\n      return proto;\n    }\n    prototype_obj_p = ecma_is_value_null (proto) ? NULL : ecma_get_object_from_value (proto);\n  }\n  else\n  {\n#endif /* ENABLED (JERRY_BUILTIN_PROXY) */\n    jmem_cpointer_t proto_cp = ecma_op_ordinary_object_get_prototype_of (this_arg_obj_p);\n    if (proto_cp != JMEM_CP_NULL)\n    {\n      prototype_obj_p = ECMA_GET_NON_NULL_POINTER (ecma_object_t, proto_cp);\n      ecma_ref_object (prototype_obj_p);\n    }\n    else\n    {\n      prototype_obj_p = NULL;\n    }\n#if ENABLED (JERRY_BUILTIN_PROXY)\n  }\n#endif /* ENABLED (JERRY_BUILTIN_PROXY) */\n#endif /* !ENABLED (JERRY_ESNEXT) */\n\n  ecma_object_t *function_p;\n  ecma_bound_function_t *bound_func_p;\n\n  if (arguments_number == 0\n      || (arguments_number == 1 && !ecma_is_value_integer_number (arguments_list_p[0])))\n  {\n    function_p = ecma_create_object (prototype_obj_p,\n                                     sizeof (ecma_bound_function_t),\n                                     ECMA_OBJECT_TYPE_BOUND_FUNCTION);\n\n    /* 8. */\n    bound_func_p = (ecma_bound_function_t *) function_p;\n    ECMA_SET_NON_NULL_POINTER_TAG (bound_func_p->header.u.bound_function.target_function,\n                                   this_arg_obj_p,\n                                   0);\n\n    bound_func_p->header.u.bound_function.args_len_or_this = ECMA_VALUE_UNDEFINED;\n\n    if (arguments_number != 0)\n    {\n      bound_func_p->header.u.bound_function.args_len_or_this = ecma_copy_value_if_not_object (arguments_list_p[0]);\n    }\n  }\n  else\n  {\n    JERRY_ASSERT (arguments_number > 0);\n\n    size_t obj_size = sizeof (ecma_bound_function_t) + (arguments_number * sizeof (ecma_value_t));\n\n    function_p = ecma_create_object (prototype_obj_p,\n                                     obj_size,\n                                     ECMA_OBJECT_TYPE_BOUND_FUNCTION);\n\n    /* 8. */\n    bound_func_p = (ecma_bound_function_t *) function_p;\n    ECMA_SET_NON_NULL_POINTER_TAG (bound_func_p->header.u.bound_function.target_function,\n                                   this_arg_obj_p,\n                                   0);\n\n    /* NOTE: This solution provides temporary false data about the object's size\n       but prevents GC from freeing it until it's not fully initialized. */\n    bound_func_p->header.u.bound_function.args_len_or_this = ECMA_VALUE_UNDEFINED;\n    ecma_value_t *args_p = (ecma_value_t *) (bound_func_p + 1);\n\n    for (uint32_t i = 0; i < arguments_number; i++)\n    {\n      *args_p++ = ecma_copy_value_if_not_object (arguments_list_p[i]);\n    }\n\n    ecma_value_t args_len_or_this = ecma_make_integer_value ((ecma_integer_value_t) arguments_number);\n    bound_func_p->header.u.bound_function.args_len_or_this = args_len_or_this;\n  }\n\n#if ENABLED (JERRY_ESNEXT)\n  if (prototype_obj_p != NULL)\n  {\n    ecma_deref_object (prototype_obj_p);\n  }\n\n  ecma_value_t target_length = ecma_make_integer_value (0);\n  ecma_string_t *len_string = ecma_get_magic_string (LIT_MAGIC_STRING_LENGTH);\n  ecma_property_descriptor_t prop_desc;\n  ecma_value_t status = ecma_op_object_get_own_property_descriptor (this_arg_obj_p,\n                                                                    len_string,\n                                                                    &prop_desc);\n\n#if ENABLED (JERRY_BUILTIN_PROXY)\n  if (ECMA_IS_VALUE_ERROR (status))\n  {\n    ecma_deref_object (function_p);\n    return status;\n  }\n#endif /* ENABLED (JERRY_BUILTIN_PROXY) */\n\n  if (ecma_is_value_true (status))\n  {\n    ecma_free_property_descriptor (&prop_desc);\n    ecma_value_t len_value = ecma_op_object_get (this_arg_obj_p,\n                                                 len_string);\n\n    if (ECMA_IS_VALUE_ERROR (len_value))\n    {\n      ecma_deref_object (function_p);\n      return len_value;\n    }\n\n    if (ecma_is_value_number (len_value))\n    {\n      ecma_number_t len_num;\n      ecma_op_to_integer (len_value, &len_num);\n      target_length = ecma_make_number_value (len_num);\n    }\n    ecma_free_value (len_value);\n  }\n\n  bound_func_p->target_length = target_length;\n\n  /* 12. */\n  ecma_value_t name_value = ecma_op_object_get_by_magic_id (this_arg_obj_p, LIT_MAGIC_STRING_NAME);\n  if (ECMA_IS_VALUE_ERROR (name_value))\n  {\n    ecma_deref_object (function_p);\n    return name_value;\n  }\n\n  ecma_string_t *name_p;\n\n  if (ecma_is_value_string (name_value))\n  {\n    name_p = ecma_get_string_from_value (name_value);\n  }\n  else\n  {\n    ecma_free_value (name_value);\n    name_p = ecma_get_magic_string (LIT_MAGIC_STRING__EMPTY);\n  }\n\n  ecma_value_t bound_function_name = ecma_op_function_form_name (name_p, \"bound \", 6);\n\n  ecma_deref_ecma_string (name_p);\n\n  ecma_property_value_t *name_prop_value_p;\n  name_prop_value_p = ecma_create_named_data_property (function_p,\n                                                       ecma_get_magic_string (LIT_MAGIC_STRING_NAME),\n                                                       ECMA_PROPERTY_FLAG_CONFIGURABLE,\n                                                       NULL);\n\n  name_prop_value_p->value = bound_function_name;\n#endif /* ENABLED (JERRY_ESNEXT) */\n\n  /*\n   * [[Class]] property is not stored explicitly for objects of ECMA_OBJECT_TYPE_FUNCTION type.\n   *\n   * See also: ecma_object_get_class_name\n   */\n\n  /* 22. */\n  return ecma_make_object_value (function_p);\n}",
    "abstract_func_before": "static ecma_value_t\necma_builtin_function_prototype_object_bind (ecma_object_t *VAR_0 , /* COMMENT_0 */\n                                             const ecma_value_t *VAR_1, /* COMMENT_1 */\n                                             uint32_t VAR_2) /* COMMENT_2 */\n{\n  /* COMMENT_3 */\n  ecma_object_t *VAR_3;\n\n#if !ENABLED (VAR_4)\n  VAR_3 = ecma_builtin_get (VAR_5);\n#else /* COMMENT_4 */\n#if ENABLED (VAR_6)\n  if (ECMA_OBJECT_IS_PROXY (VAR_0))\n  {\n    ecma_value_t VAR_7 = ecma_proxy_object_get_prototype_of (VAR_0);\n\n    if (ECMA_IS_VALUE_ERROR (VAR_7))\n    {\n      return VAR_7;\n    }\n    VAR_3 = ecma_is_value_null (VAR_7) ? NULL : ecma_get_object_from_value (VAR_7);\n  }\n  else\n  {\n#endif/* COMMENT_5 */\n    jmem_cpointer_t proto_cp = ecma_op_ordinary_object_get_prototype_of (this_arg_obj_p);\n    if (VAR_8 != VAR_9)\n    {\n      VAR_3 = ECMA_GET_NON_NULL_POINTER (ecma_object_t, VAR_8);\n      ecma_ref_object (VAR_3);\n    }\n    else\n    {\n      VAR_3 = NULL;\n    }\n#if ENABLED (VAR_6)\n  }\n#endif /* COMMENT_6 */\n#endif/* COMMENT_7 */\n\n  ecma_object_t *function_p;\n  ecma_bound_function_t *VAR_10;\n\n  if (VAR_2 == 0\n      || (VAR_2 == 1 && !ecma_is_value_integer_number (VAR_1[0])))\n  {\n    VAR_11 = ecma_create_object (VAR_3,\n                                     sizeof (ecma_bound_function_t),\n                                     VAR_12);\n\n    /* COMMENT_8 */\n    VAR_10 = (ecma_bound_function_t *) VAR_11;\n    ECMA_SET_NON_NULL_POINTER_TAG (VAR_10->header.u.bound_function.target_function,\n                                   VAR_0,\n                                   0);\n\n    VAR_10->header.u.bound_function.args_len_or_this = VAR_13;\n\n    if (VAR_2 != 0)\n    {\n      VAR_10->header.u.bound_function.args_len_or_this = ecma_copy_value_if_not_object (VAR_1[0]);\n    }\n  }\n  else\n  {\n    JERRY_ASSERT (VAR_2 > 0);\n\n    size_t VAR_14 = sizeof (ecma_bound_function_t) + (VAR_2 * sizeof (ecma_value_t));\n\n    VAR_11 = ecma_create_object (VAR_3,\n                                     VAR_14,\n                                     VAR_12);\n\n    /* COMMENT_8 */\n    VAR_10 = (ecma_bound_function_t *) VAR_11;\n    ECMA_SET_NON_NULL_POINTER_TAG (VAR_10->header.u.bound_function.target_function,\n                                   VAR_0,\n                                   0);\n\n    /* COMMENT_9 */\n                                                                           \n    VAR_10->header.u.bound_function.args_len_or_this = VAR_13;\n    ecma_value_t *VAR_15 = (ecma_value_t *) (VAR_10 + 1);\n\n    for (uint32_t VAR_16 = 0; VAR_16 < VAR_2; VAR_16++)\n    {\n      *VAR_15++ = ecma_copy_value_if_not_object (VAR_1[VAR_16]);\n    }\n\n    ecma_value_t VAR_17 = ecma_make_integer_value ((ecma_integer_value_t) VAR_2);\n    VAR_10->header.u.bound_function.args_len_or_this = VAR_17;\n  }\n\n#if ENABLED (VAR_4)\n  if (VAR_3 != NULL)\n  {\n    ecma_deref_object (VAR_3);\n  }\n\n  ecma_value_t VAR_18 = ecma_make_integer_value (0);\n  ecma_string_t *VAR_19 = ecma_get_magic_string (VAR_20);\n  ecma_property_descriptor_t VAR_21;\n  ecma_value_t VAR_22 = ecma_op_object_get_own_property_descriptor (VAR_0,\n                                                                    VAR_19,\n                                                                    &VAR_21);\n\n#if ENABLED (VAR_6)\n  if (ECMA_IS_VALUE_ERROR (VAR_22))\n  {\n    ecma_deref_object (VAR_11);\n    return VAR_22;\n  }\n#endif /* COMMENT_6 */\n\n  if (ecma_is_value_true (VAR_22))\n  {\n    ecma_free_property_descriptor (&VAR_21);\n    ecma_value_t VAR_23 = ecma_op_object_get (VAR_0,\n                                                 VAR_19);\n\n    if (ECMA_IS_VALUE_ERROR (VAR_23))\n    {\n      ecma_deref_object (VAR_11);\n      return VAR_23;\n    }\n\n    if (ecma_is_value_number (VAR_23))\n    {\n      ecma_number_t VAR_24;\n      ecma_op_to_integer (VAR_23, &VAR_24);\n      VAR_18 = ecma_make_number_value (VAR_24);\n    }\n    ecma_free_value (VAR_23);\n  }\n\n  VAR_10->target_length = VAR_18;\n\n  /* COMMENT_11 */\n  ecma_value_t VAR_25 = ecma_op_object_get_by_magic_id (VAR_0, VAR_26);\n  if (ECMA_IS_VALUE_ERROR (VAR_25))\n  {\n    ecma_deref_object (VAR_11);\n    return VAR_25;\n  }\n\n  ecma_string_t *VAR_27;\n\n  if (ecma_is_value_string (VAR_25))\n  {\n    VAR_27 = ecma_get_string_from_value (VAR_25);\n  }\n  else\n  {\n    ecma_free_value (VAR_25);\n    VAR_27 = ecma_get_magic_string (VAR_28);\n  }\n\n  ecma_value_t VAR_29 = ecma_op_function_form_name (VAR_27, \"bound \", 6);\n\n  ecma_deref_ecma_string (VAR_27);\n\n  ecma_property_value_t *VAR_30;\n  VAR_30 = ecma_create_named_data_property (VAR_11,\n                                                       ecma_get_magic_string (VAR_26),\n                                                       VAR_31,\n                                                       NULL);\n\n  VAR_30->value = VAR_29;\n#endif /* COMMENT_4 */\n\n  /* COMMENT_12 */\n                                                                                               \n    \n                                         \n     \n\n  /* COMMENT_17 */\n  return ecma_make_object_value (VAR_11);\n}",
    "func_graph_path_before": "jerryscript-project/jerryscript/c8354e8a62d174786adf86dd4be2e31074e0e9d0/ecma-builtin-function-prototype.c/vul/before/0.json",
    "func": "static ecma_value_t\necma_builtin_function_prototype_object_bind (ecma_object_t *this_arg_obj_p , /**< this argument object */\n                                             const ecma_value_t *arguments_list_p, /**< list of arguments */\n                                             uint32_t arguments_number) /**< number of arguments */\n{\n  /* 4. 11. 18. */\n  ecma_object_t *prototype_obj_p;\n\n#if !ENABLED (JERRY_ESNEXT)\n  prototype_obj_p = ecma_builtin_get (ECMA_BUILTIN_ID_FUNCTION_PROTOTYPE);\n#else /* ENABLED (JERRY_ESNEXT) */\n#if ENABLED (JERRY_BUILTIN_PROXY)\n  if (ECMA_OBJECT_IS_PROXY (this_arg_obj_p))\n  {\n    ecma_value_t proto = ecma_proxy_object_get_prototype_of (this_arg_obj_p);\n\n    if (ECMA_IS_VALUE_ERROR (proto))\n    {\n      return proto;\n    }\n    prototype_obj_p = ecma_is_value_null (proto) ? NULL : ecma_get_object_from_value (proto);\n  }\n  else\n  {\n#endif /* ENABLED (JERRY_BUILTIN_PROXY) */\n    jmem_cpointer_t proto_cp = ecma_op_ordinary_object_get_prototype_of (this_arg_obj_p);\n    if (proto_cp != JMEM_CP_NULL)\n    {\n      prototype_obj_p = ECMA_GET_NON_NULL_POINTER (ecma_object_t, proto_cp);\n      ecma_ref_object (prototype_obj_p);\n    }\n    else\n    {\n      prototype_obj_p = NULL;\n    }\n#if ENABLED (JERRY_BUILTIN_PROXY)\n  }\n#endif /* ENABLED (JERRY_BUILTIN_PROXY) */\n#endif /* !ENABLED (JERRY_ESNEXT) */\n\n  ecma_object_t *function_p;\n  ecma_bound_function_t *bound_func_p;\n\n  if (arguments_number == 0\n      || (arguments_number == 1 && !ecma_is_value_integer_number (arguments_list_p[0])))\n  {\n    function_p = ecma_create_object (prototype_obj_p,\n                                     sizeof (ecma_bound_function_t),\n                                     ECMA_OBJECT_TYPE_BOUND_FUNCTION);\n\n    /* 8. */\n    bound_func_p = (ecma_bound_function_t *) function_p;\n    ECMA_SET_NON_NULL_POINTER_TAG (bound_func_p->header.u.bound_function.target_function,\n                                   this_arg_obj_p,\n                                   0);\n\n    bound_func_p->header.u.bound_function.args_len_or_this = ECMA_VALUE_UNDEFINED;\n\n    if (arguments_number != 0)\n    {\n      bound_func_p->header.u.bound_function.args_len_or_this = ecma_copy_value_if_not_object (arguments_list_p[0]);\n    }\n  }\n  else\n  {\n    JERRY_ASSERT (arguments_number > 0);\n\n    size_t obj_size = sizeof (ecma_bound_function_t) + (arguments_number * sizeof (ecma_value_t));\n\n    function_p = ecma_create_object (prototype_obj_p,\n                                     obj_size,\n                                     ECMA_OBJECT_TYPE_BOUND_FUNCTION);\n\n    /* 8. */\n    bound_func_p = (ecma_bound_function_t *) function_p;\n    ECMA_SET_NON_NULL_POINTER_TAG (bound_func_p->header.u.bound_function.target_function,\n                                   this_arg_obj_p,\n                                   0);\n\n    /* NOTE: This solution provides temporary false data about the object's size\n       but prevents GC from freeing it until it's not fully initialized. */\n    bound_func_p->header.u.bound_function.args_len_or_this = ECMA_VALUE_UNDEFINED;\n    ecma_value_t *args_p = (ecma_value_t *) (bound_func_p + 1);\n\n    for (uint32_t i = 0; i < arguments_number; i++)\n    {\n      *args_p++ = ecma_copy_value_if_not_object (arguments_list_p[i]);\n    }\n\n    ecma_value_t args_len_or_this = ecma_make_integer_value ((ecma_integer_value_t) arguments_number);\n    bound_func_p->header.u.bound_function.args_len_or_this = args_len_or_this;\n  }\n\n#if ENABLED (JERRY_ESNEXT)\n  if (prototype_obj_p != NULL)\n  {\n    ecma_deref_object (prototype_obj_p);\n  }\n\n  bound_func_p->target_length = ecma_make_integer_value (0);\n\n  ecma_string_t *len_string = ecma_get_magic_string (LIT_MAGIC_STRING_LENGTH);\n  ecma_property_descriptor_t prop_desc;\n  ecma_value_t status = ecma_op_object_get_own_property_descriptor (this_arg_obj_p,\n                                                                    len_string,\n                                                                    &prop_desc);\n\n#if ENABLED (JERRY_BUILTIN_PROXY)\n  if (ECMA_IS_VALUE_ERROR (status))\n  {\n    ecma_deref_object (function_p);\n    return status;\n  }\n#endif /* ENABLED (JERRY_BUILTIN_PROXY) */\n\n  if (ecma_is_value_true (status))\n  {\n    ecma_free_property_descriptor (&prop_desc);\n    ecma_value_t len_value = ecma_op_object_get (this_arg_obj_p,\n                                                 len_string);\n\n    if (ECMA_IS_VALUE_ERROR (len_value))\n    {\n      ecma_deref_object (function_p);\n      return len_value;\n    }\n\n    if (ecma_is_value_number (len_value))\n    {\n      ecma_number_t len_num;\n      ecma_op_to_integer (len_value, &len_num);\n      bound_func_p->target_length = ecma_make_number_value (len_num);\n    }\n    ecma_free_value (len_value);\n  }\n\n  /* 12. */\n  ecma_value_t name_value = ecma_op_object_get_by_magic_id (this_arg_obj_p, LIT_MAGIC_STRING_NAME);\n  if (ECMA_IS_VALUE_ERROR (name_value))\n  {\n    ecma_deref_object (function_p);\n    return name_value;\n  }\n\n  ecma_string_t *name_p;\n\n  if (ecma_is_value_string (name_value))\n  {\n    name_p = ecma_get_string_from_value (name_value);\n  }\n  else\n  {\n    ecma_free_value (name_value);\n    name_p = ecma_get_magic_string (LIT_MAGIC_STRING__EMPTY);\n  }\n\n  ecma_value_t bound_function_name = ecma_op_function_form_name (name_p, \"bound \", 6);\n\n  ecma_deref_ecma_string (name_p);\n\n  ecma_property_value_t *name_prop_value_p;\n  name_prop_value_p = ecma_create_named_data_property (function_p,\n                                                       ecma_get_magic_string (LIT_MAGIC_STRING_NAME),\n                                                       ECMA_PROPERTY_FLAG_CONFIGURABLE,\n                                                       NULL);\n\n  name_prop_value_p->value = bound_function_name;\n#endif /* ENABLED (JERRY_ESNEXT) */\n\n  /*\n   * [[Class]] property is not stored explicitly for objects of ECMA_OBJECT_TYPE_FUNCTION type.\n   *\n   * See also: ecma_object_get_class_name\n   */\n\n  /* 22. */\n  return ecma_make_object_value (function_p);\n}",
    "abstract_func": "static ecma_value_t\necma_builtin_function_prototype_object_bind (ecma_object_t *VAR_0 , /* COMMENT_0 */\n                                             const ecma_value_t *VAR_1, /* COMMENT_1 */\n                                             uint32_t VAR_2) /* COMMENT_2 */\n{\n  /* COMMENT_3 */\n  ecma_object_t *VAR_3;\n\n#if !ENABLED (VAR_4)\n  VAR_3 = ecma_builtin_get (VAR_5);\n#else /* COMMENT_4 */\n#if ENABLED (VAR_6)\n  if (ECMA_OBJECT_IS_PROXY (VAR_0))\n  {\n    ecma_value_t VAR_7 = ecma_proxy_object_get_prototype_of (VAR_0);\n\n    if (ECMA_IS_VALUE_ERROR (VAR_7))\n    {\n      return VAR_7;\n    }\n    VAR_3 = ecma_is_value_null (VAR_7) ? NULL : ecma_get_object_from_value (VAR_7);\n  }\n  else\n  {\n#endif/* COMMENT_5 */\n    jmem_cpointer_t proto_cp = ecma_op_ordinary_object_get_prototype_of (this_arg_obj_p);\n    if (VAR_8 != VAR_9)\n    {\n      VAR_3 = ECMA_GET_NON_NULL_POINTER (ecma_object_t, VAR_8);\n      ecma_ref_object (VAR_3);\n    }\n    else\n    {\n      VAR_3 = NULL;\n    }\n#if ENABLED (VAR_6)\n  }\n#endif /* COMMENT_6 */\n#endif/* COMMENT_7 */\n\n  ecma_object_t *function_p;\n  ecma_bound_function_t *VAR_10;\n\n  if (VAR_2 == 0\n      || (VAR_2 == 1 && !ecma_is_value_integer_number (VAR_1[0])))\n  {\n    VAR_11 = ecma_create_object (VAR_3,\n                                     sizeof (ecma_bound_function_t),\n                                     VAR_12);\n\n    /* COMMENT_8 */\n    VAR_10 = (ecma_bound_function_t *) VAR_11;\n    ECMA_SET_NON_NULL_POINTER_TAG (VAR_10->header.u.bound_function.target_function,\n                                   VAR_0,\n                                   0);\n\n    VAR_10->header.u.bound_function.args_len_or_this = VAR_13;\n\n    if (VAR_2 != 0)\n    {\n      VAR_10->header.u.bound_function.args_len_or_this = ecma_copy_value_if_not_object (VAR_1[0]);\n    }\n  }\n  else\n  {\n    JERRY_ASSERT (VAR_2 > 0);\n\n    size_t VAR_14 = sizeof (ecma_bound_function_t) + (VAR_2 * sizeof (ecma_value_t));\n\n    VAR_11 = ecma_create_object (VAR_3,\n                                     VAR_14,\n                                     VAR_12);\n\n    /* COMMENT_8 */\n    VAR_10 = (ecma_bound_function_t *) VAR_11;\n    ECMA_SET_NON_NULL_POINTER_TAG (VAR_10->header.u.bound_function.target_function,\n                                   VAR_0,\n                                   0);\n\n    /* COMMENT_9 */\n                                                                           \n    VAR_10->header.u.bound_function.args_len_or_this = VAR_13;\n    ecma_value_t *VAR_15 = (ecma_value_t *) (VAR_10 + 1);\n\n    for (uint32_t VAR_16 = 0; VAR_16 < VAR_2; VAR_16++)\n    {\n      *VAR_15++ = ecma_copy_value_if_not_object (VAR_1[VAR_16]);\n    }\n\n    ecma_value_t VAR_17 = ecma_make_integer_value ((ecma_integer_value_t) VAR_2);\n    VAR_10->header.u.bound_function.args_len_or_this = VAR_17;\n  }\n\n#if ENABLED (VAR_4)\n  if (VAR_3 != NULL)\n  {\n    ecma_deref_object (VAR_3);\n  }\n\n  VAR_10->target_length = ecma_make_integer_value (0);\n\n  ecma_string_t *VAR_18 = ecma_get_magic_string (VAR_19);\n  ecma_property_descriptor_t VAR_20;\n  ecma_value_t VAR_21 = ecma_op_object_get_own_property_descriptor (VAR_0,\n                                                                    VAR_18,\n                                                                    &VAR_20);\n\n#if ENABLED (VAR_6)\n  if (ECMA_IS_VALUE_ERROR (VAR_21))\n  {\n    ecma_deref_object (VAR_11);\n    return VAR_21;\n  }\n#endif /* COMMENT_6 */\n\n  if (ecma_is_value_true (VAR_21))\n  {\n    ecma_free_property_descriptor (&VAR_20);\n    ecma_value_t VAR_22 = ecma_op_object_get (VAR_0,\n                                                 VAR_18);\n\n    if (ECMA_IS_VALUE_ERROR (VAR_22))\n    {\n      ecma_deref_object (VAR_11);\n      return VAR_22;\n    }\n\n    if (ecma_is_value_number (VAR_22))\n    {\n      ecma_number_t VAR_23;\n      ecma_op_to_integer (VAR_22, &VAR_23);\n      VAR_10->target_length = ecma_make_number_value (VAR_23);\n    }\n    ecma_free_value (VAR_22);\n  }\n\n  /* COMMENT_11 */\n  ecma_value_t VAR_24 = ecma_op_object_get_by_magic_id (VAR_0, VAR_25);\n  if (ECMA_IS_VALUE_ERROR (VAR_24))\n  {\n    ecma_deref_object (VAR_11);\n    return VAR_24;\n  }\n\n  ecma_string_t *VAR_26;\n\n  if (ecma_is_value_string (VAR_24))\n  {\n    VAR_26 = ecma_get_string_from_value (VAR_24);\n  }\n  else\n  {\n    ecma_free_value (VAR_24);\n    VAR_26 = ecma_get_magic_string (VAR_27);\n  }\n\n  ecma_value_t VAR_28 = ecma_op_function_form_name (VAR_26, \"bound \", 6);\n\n  ecma_deref_ecma_string (VAR_26);\n\n  ecma_property_value_t *VAR_29;\n  VAR_29 = ecma_create_named_data_property (VAR_11,\n                                                       ecma_get_magic_string (VAR_25),\n                                                       VAR_30,\n                                                       NULL);\n\n  VAR_29->value = VAR_28;\n#endif /* COMMENT_4 */\n\n  /* COMMENT_12 */\n                                                                                               \n    \n                                         \n     \n\n  /* COMMENT_17 */\n  return ecma_make_object_value (VAR_11);\n}",
    "func_graph_path": "jerryscript-project/jerryscript/c8354e8a62d174786adf86dd4be2e31074e0e9d0/ecma-builtin-function-prototype.c/vul/after/0.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -97,7 +97,8 @@\n     ecma_deref_object (prototype_obj_p);\n   }\n \n-  ecma_value_t target_length = ecma_make_integer_value (0);\n+  bound_func_p->target_length = ecma_make_integer_value (0);\n+\n   ecma_string_t *len_string = ecma_get_magic_string (LIT_MAGIC_STRING_LENGTH);\n   ecma_property_descriptor_t prop_desc;\n   ecma_value_t status = ecma_op_object_get_own_property_descriptor (this_arg_obj_p,\n@@ -128,12 +129,10 @@\n     {\n       ecma_number_t len_num;\n       ecma_op_to_integer (len_value, &len_num);\n-      target_length = ecma_make_number_value (len_num);\n+      bound_func_p->target_length = ecma_make_number_value (len_num);\n     }\n     ecma_free_value (len_value);\n   }\n-\n-  bound_func_p->target_length = target_length;\n \n   /* 12. */\n   ecma_value_t name_value = ecma_op_object_get_by_magic_id (this_arg_obj_p, LIT_MAGIC_STRING_NAME);",
    "diff_line_info": {
        "deleted_lines": [
            "  ecma_value_t target_length = ecma_make_integer_value (0);",
            "      target_length = ecma_make_number_value (len_num);",
            "",
            "  bound_func_p->target_length = target_length;"
        ],
        "added_lines": [
            "  bound_func_p->target_length = ecma_make_integer_value (0);",
            "",
            "      bound_func_p->target_length = ecma_make_number_value (len_num);"
        ]
    },
    "is_vul": true,
    "pr_url": "https://github.com/jerryscript-project/jerryscript/pull/4421",
    "description": "This patch fixes #4402.\r\n\r\nJerryScript-DCO-1.0-Signed-off-by: Robert Fancsik frobert@inf.u-szeged.hu"
}