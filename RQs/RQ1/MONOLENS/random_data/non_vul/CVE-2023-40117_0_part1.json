{
    "cve_id": "CVE-2023-40117",
    "cwe_ids": [
        "CWE-Other"
    ],
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
    "cvss_is_v3": true,
    "repo_name": "android",
    "commit_msg": "RESTRICT AUTOMERGE: Catch exceptions from setLockCredential()\n\nWhen LockPatternUtils#setLockCredential() fails, it can either return\nfalse or throw an exception.  Catch the exception and treat it the same\nway as a false return value, to prevent crashing com.android.settings.\n\nBug: 253043065\nTest: Tried setting lockscreen credential while in secure FRP mode using\n      smartlock setup activity launched by intent via adb.  Verified\n      that com.android.settings no longer crashes due to the exception\n      from LockPatternUtils#setLockCredential().\n(cherry picked from commit 05f1eff1c9c3f82797f1a0f92ff7665b9f463488)\n(moved change into ChooseLockPassword.java and ChooseLockPattern.java,\n which are merged into SaveAndFinishWorker.java on udc-qpr-dev and main)\n(cherry picked from https://googleplex-android-review.googlesource.com/q/commit:e0b5a793a19198370d479401101cea97c2f1d835)\nMerged-In: I48b9119c19fb6378b1f88d36433ee4f4c8501d76\nChange-Id: I48b9119c19fb6378b1f88d36433ee4f4c8501d76\n",
    "commit_hash": "11815817de2f2d70fe842b108356a1bc75d44ffb",
    "git_url": "https://android.googlesource.com/platform/packages/apps/Settings/+/11815817de2f2d70fe842b108356a1bc75d44ffb",
    "file_path": "src/com/android/settings/password/ChooseLockPassword.java",
    "func_name": "saveAndVerifyInBackground",
    "func_before": "@Override\n        protected Pair<Boolean, Intent> saveAndVerifyInBackground() {\n            final boolean success = mUtils.setLockCredential(\n                    mChosenPassword, mCurrentCredential, mUserId);\n            if (success) {\n                unifyProfileCredentialIfRequested();\n            }\n            Intent result = null;\n            if (success && mRequestGatekeeperPassword) {\n                // If a Gatekeeper Password was requested, invoke the LockSettingsService code\n                // path to return a Gatekeeper Password based on the credential that the user\n                // chose. This should only be run if the credential was successfully set.\n                final VerifyCredentialResponse response = mUtils.verifyCredential(mChosenPassword,\n                        mUserId, LockPatternUtils.VERIFY_FLAG_REQUEST_GK_PW_HANDLE);\n\n                if (!response.isMatched() || !response.containsGatekeeperPasswordHandle()) {\n                    Log.e(TAG, \"critical: bad response or missing GK PW handle for known good\"\n                            + \" password: \" + response.toString());\n                }\n\n                result = new Intent();\n                result.putExtra(ChooseLockSettingsHelper.EXTRA_KEY_GK_PW_HANDLE,\n                        response.getGatekeeperPasswordHandle());\n            }\n            return Pair.create(success, result);\n        }",
    "abstract_func_before": "@Override\n        protected Pair<Boolean, Intent> saveAndVerifyInBackground() {\n            final boolean VAR_0 = VAR_1.setLockCredential(\n                    VAR_2, VAR_3, VAR_4);\n            if (VAR_0) {\n                unifyProfileCredentialIfRequested();\n            }\n            Intent VAR_5 = null;\n            if (VAR_0 && VAR_6) {\n                /* COMMENT_0 */\n                /* COMMENT_1 */\n                /* COMMENT_2 */\n                final VerifyCredentialResponse VAR_7 = VAR_1.verifyCredential(VAR_2,\n                        VAR_4, VAR_8.VERIFY_FLAG_REQUEST_GK_PW_HANDLE);\n\n                if (!VAR_7.isMatched() || !VAR_7.containsGatekeeperPasswordHandle()) {\n                    VAR_9.e(VAR_10, \"critical: bad response or missing GK PW handle for known good\"\n                            + \" password: \" + VAR_7.toString());\n                }\n\n                VAR_5 = new Intent();\n                VAR_5.putExtra(VAR_11.EXTRA_KEY_GK_PW_HANDLE,\n                        VAR_7.getGatekeeperPasswordHandle());\n            }\n            return VAR_12.create(VAR_0, VAR_5);\n        }",
    "func_graph_path_before": "android/11815817de2f2d70fe842b108356a1bc75d44ffb/ChooseLockPassword.java/vul/before/0.json",
    "func": "@Override\n        protected Pair<Boolean, Intent> saveAndVerifyInBackground() {\n            boolean success;\n            try {\n                success = mUtils.setLockCredential(mChosenPassword, mCurrentCredential, mUserId);\n            } catch (RuntimeException e) {\n                Log.e(TAG, \"Failed to set lockscreen credential\", e);\n                success = false;\n            }\n            if (success) {\n                unifyProfileCredentialIfRequested();\n            }\n            Intent result = null;\n            if (success && mRequestGatekeeperPassword) {\n                // If a Gatekeeper Password was requested, invoke the LockSettingsService code\n                // path to return a Gatekeeper Password based on the credential that the user\n                // chose. This should only be run if the credential was successfully set.\n                final VerifyCredentialResponse response = mUtils.verifyCredential(mChosenPassword,\n                        mUserId, LockPatternUtils.VERIFY_FLAG_REQUEST_GK_PW_HANDLE);\n\n                if (!response.isMatched() || !response.containsGatekeeperPasswordHandle()) {\n                    Log.e(TAG, \"critical: bad response or missing GK PW handle for known good\"\n                            + \" password: \" + response.toString());\n                }\n\n                result = new Intent();\n                result.putExtra(ChooseLockSettingsHelper.EXTRA_KEY_GK_PW_HANDLE,\n                        response.getGatekeeperPasswordHandle());\n            }\n            return Pair.create(success, result);\n        }",
    "abstract_func": "@Override\n        protected Pair<Boolean, Intent> saveAndVerifyInBackground() {\n            boolean VAR_0;\n            try {\n                VAR_0 = VAR_1.setLockCredential(VAR_2, VAR_3, VAR_4);\n            } catch (RuntimeException VAR_5) {\n                VAR_6.e(VAR_7, \"Failed to set lockscreen credential\", VAR_5);\n                VAR_0 = false;\n            }\n            if (VAR_0) {\n                unifyProfileCredentialIfRequested();\n            }\n            Intent VAR_8 = null;\n            if (VAR_0 && VAR_9) {\n                /* COMMENT_0 */\n                /* COMMENT_1 */\n                /* COMMENT_2 */\n                final VerifyCredentialResponse VAR_10 = VAR_1.verifyCredential(VAR_2,\n                        VAR_4, VAR_11.VERIFY_FLAG_REQUEST_GK_PW_HANDLE);\n\n                if (!VAR_10.isMatched() || !VAR_10.containsGatekeeperPasswordHandle()) {\n                    VAR_6.e(VAR_7, \"critical: bad response or missing GK PW handle for known good\"\n                            + \" password: \" + VAR_10.toString());\n                }\n\n                VAR_8 = new Intent();\n                VAR_8.putExtra(VAR_12.EXTRA_KEY_GK_PW_HANDLE,\n                        VAR_10.getGatekeeperPasswordHandle());\n            }\n            return VAR_13.create(VAR_0, VAR_8);\n        }",
    "func_graph_path": "android/11815817de2f2d70fe842b108356a1bc75d44ffb/ChooseLockPassword.java/vul/after/0.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -1,7 +1,12 @@\n @Override\n         protected Pair<Boolean, Intent> saveAndVerifyInBackground() {\n-            final boolean success = mUtils.setLockCredential(\n-                    mChosenPassword, mCurrentCredential, mUserId);\n+            boolean success;\n+            try {\n+                success = mUtils.setLockCredential(mChosenPassword, mCurrentCredential, mUserId);\n+            } catch (RuntimeException e) {\n+                Log.e(TAG, \"Failed to set lockscreen credential\", e);\n+                success = false;\n+            }\n             if (success) {\n                 unifyProfileCredentialIfRequested();\n             }",
    "diff_line_info": {
        "deleted_lines": [
            "            final boolean success = mUtils.setLockCredential(",
            "                    mChosenPassword, mCurrentCredential, mUserId);"
        ],
        "added_lines": [
            "            boolean success;",
            "            try {",
            "                success = mUtils.setLockCredential(mChosenPassword, mCurrentCredential, mUserId);",
            "            } catch (RuntimeException e) {",
            "                Log.e(TAG, \"Failed to set lockscreen credential\", e);",
            "                success = false;",
            "            }"
        ]
    },
    "is_vul": true,
    "pr_url": null,
    "description": "no more info"
}