{
    "cve_id": "CVE-2023-25499",
    "cwe_ids": [
        "CWE-200"
    ],
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N",
    "cvss_is_v3": true,
    "repo_name": "vaadin/flow",
    "commit_msg": "Disable sending updates to client for effectively non-visible nodes",
    "commit_hash": "1b195225bef5b7600d741e89fef80dd200c73e89",
    "git_url": "https://github.com/vaadin/flow/commit/1b195225bef5b7600d741e89fef80dd200c73e89",
    "file_path": "flow-server/src/main/java/com/vaadin/flow/internal/StateNode.java",
    "func_name": "collectChanges",
    "func_before": "public void collectChanges(Consumer<NodeChange> collector) {\n        boolean isAttached = isAttached();\n        if (isAttached != wasAttached) {\n            if (isAttached) {\n                collector.accept(new NodeAttachChange(this));\n\n                // Make all changes show up as if the node was recently attached\n                clearChanges();\n                forEachFeature(NodeFeature::generateChangesFromEmpty);\n            } else {\n                collector.accept(new NodeDetachChange(this));\n            }\n            wasAttached = isAttached;\n        }\n\n        if (!isAttached()) {\n            return;\n        }\n        if (isInactive()) {\n            if (isInitialChanges) {\n                // send only required (reported) features updates\n                Stream<NodeFeature> initialFeatures = Stream\n                        .concat(featureSet.mappings.keySet().stream()\n                                .filter(this::isReportedFeature)\n                                .map(this::getFeature), getDisallowFeatures());\n                doCollectChanges(collector, initialFeatures);\n            } else {\n                doCollectChanges(collector, getDisallowFeatures());\n            }\n        } else {\n            doCollectChanges(collector, getInitializedFeatures());\n        }\n    }",
    "abstract_func_before": "public void collectChanges(Consumer<NodeChange> VAR_0) {\n        boolean VAR_1 = isAttached();\n        if (VAR_1 != VAR_2) {\n            if (VAR_1) {\n                VAR_0.accept(new NodeAttachChange(this));\n\n                /* COMMENT_0 */\n                clearChanges();\n                forEachFeature(VAR_3::VAR_4);\n            } else {\n                VAR_0.accept(new NodeDetachChange(this));\n            }\n            VAR_2 = VAR_1;\n        }\n\n        if (!isAttached()) {\n            return;\n        }\n        if (isInactive()) {\n            if (VAR_5) {\n                /* COMMENT_1 */\n                Stream<NodeFeature> VAR_6 = VAR_7\n                        .concat(VAR_8.mappings.keySet().stream()\n                                .filter(this::VAR_9)\n                                .map(this::VAR_10), getDisallowFeatures());\n                doCollectChanges(VAR_0, VAR_6);\n            } else {\n                doCollectChanges(VAR_0, getDisallowFeatures());\n            }\n        } else {\n            doCollectChanges(VAR_0, getInitializedFeatures());\n        }\n    }",
    "func_graph_path_before": "vaadin/flow/1b195225bef5b7600d741e89fef80dd200c73e89/StateNode.java/vul/before/0.json",
    "func": "public void collectChanges(Consumer<NodeChange> collector) {\n        boolean isAttached = isAttached();\n        if (isAttached != wasAttached) {\n            if (isAttached) {\n                collector.accept(new NodeAttachChange(this));\n\n                // Make all changes show up as if the node was recently attached\n                clearChanges();\n                forEachFeature(NodeFeature::generateChangesFromEmpty);\n            } else {\n                collector.accept(new NodeDetachChange(this));\n            }\n            wasAttached = isAttached;\n        }\n\n        if (!isAttached()) {\n            return;\n        }\n\n        if (!isVisible()) {\n            doCollectChanges(collector, getDisallowFeatures());\n            return;\n        }\n\n        if (isInactive()) {\n            if (isInitialChanges) {\n                // send only required (reported) features updates\n                Stream<NodeFeature> initialFeatures = Stream\n                        .concat(featureSet.mappings.keySet().stream()\n                                .filter(this::isReportedFeature)\n                                .map(this::getFeature), getDisallowFeatures());\n                doCollectChanges(collector, initialFeatures);\n            } else {\n                doCollectChanges(collector, getDisallowFeatures());\n            }\n        } else {\n            doCollectChanges(collector, getInitializedFeatures());\n        }\n    }",
    "abstract_func": "public void collectChanges(Consumer<NodeChange> VAR_0) {\n        boolean VAR_1 = isAttached();\n        if (VAR_1 != VAR_2) {\n            if (VAR_1) {\n                VAR_0.accept(new NodeAttachChange(this));\n\n                /* COMMENT_0 */\n                clearChanges();\n                forEachFeature(VAR_3::VAR_4);\n            } else {\n                VAR_0.accept(new NodeDetachChange(this));\n            }\n            VAR_2 = VAR_1;\n        }\n\n        if (!isAttached()) {\n            return;\n        }\n\n        if (!isVisible()) {\n            doCollectChanges(VAR_0, getDisallowFeatures());\n            return;\n        }\n\n        if (isInactive()) {\n            if (VAR_5) {\n                /* COMMENT_1 */\n                Stream<NodeFeature> VAR_6 = VAR_7\n                        .concat(VAR_8.mappings.keySet().stream()\n                                .filter(this::VAR_9)\n                                .map(this::VAR_10), getDisallowFeatures());\n                doCollectChanges(VAR_0, VAR_6);\n            } else {\n                doCollectChanges(VAR_0, getDisallowFeatures());\n            }\n        } else {\n            doCollectChanges(VAR_0, getInitializedFeatures());\n        }\n    }",
    "func_graph_path": "vaadin/flow/1b195225bef5b7600d741e89fef80dd200c73e89/StateNode.java/vul/after/0.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -16,6 +16,12 @@\n         if (!isAttached()) {\n             return;\n         }\n+\n+        if (!isVisible()) {\n+            doCollectChanges(collector, getDisallowFeatures());\n+            return;\n+        }\n+\n         if (isInactive()) {\n             if (isInitialChanges) {\n                 // send only required (reported) features updates",
    "diff_line_info": {
        "deleted_lines": [],
        "added_lines": [
            "",
            "        if (!isVisible()) {",
            "            doCollectChanges(collector, getDisallowFeatures());",
            "            return;",
            "        }",
            ""
        ]
    },
    "is_vul": true,
    "pr_url": "https://github.com/vaadin/flow/pull/15885",
    "description": "no more info"
}