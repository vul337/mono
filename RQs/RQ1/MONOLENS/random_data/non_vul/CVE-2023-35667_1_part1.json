{
    "cve_id": "CVE-2023-35667",
    "cwe_ids": [
        "CWE-Other"
    ],
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
    "cvss_is_v3": true,
    "repo_name": "android",
    "commit_msg": "Don't hide approved NLSes in Settings\n\nNote that an NLS that shouldn't be approvable (because its name is too long) but was already approved (either before the max length check was introduced, or through other means) will disappear from the list if the user revokes its access. This might be somewhat confusing, but since this is a very-edge case already it's fine.\n\nBug: 282932362\nTest: manual\n(cherry picked from https://googleplex-android-review.googlesource.com/q/commit:ff255c6eda1528f01a167a9a65b7f8e414d28584)\nMerged-In: I4c9faea68e6d16b1a4ec7f472b5433cac1704c06\nChange-Id: I4c9faea68e6d16b1a4ec7f472b5433cac1704c06\n",
    "commit_hash": "d8355ac47e068ad20c6a7b1602e72f0585ec0085",
    "git_url": "https://android.googlesource.com/platform/packages/apps/Settings/+/d8355ac47e068ad20c6a7b1602e72f0585ec0085",
    "file_path": "src/com/android/settings/notification/NotificationAccessSettings.java",
    "func_name": "updateList",
    "func_before": "private void updateList(List<ServiceInfo> services) {\n        final UserManager um = (UserManager) mContext.getSystemService(Context.USER_SERVICE);\n        final int managedProfileId = Utils.getManagedProfileId(um, UserHandle.myUserId());\n\n        final PreferenceScreen screen = getPreferenceScreen();\n        final PreferenceCategory allowedCategory = screen.findPreference(ALLOWED_KEY);\n        allowedCategory.removeAll();\n        final PreferenceCategory notAllowedCategory = screen.findPreference(NOT_ALLOWED_KEY);\n        notAllowedCategory.removeAll();\n\n        services.sort(new PackageItemInfo.DisplayNameComparator(mPm));\n        for (ServiceInfo service : services) {\n            final ComponentName cn = new ComponentName(service.packageName, service.name);\n            CharSequence title = null;\n            try {\n                title = mPm.getApplicationInfoAsUser(\n                        service.packageName, 0, UserHandle.myUserId()).loadLabel(mPm);\n            } catch (PackageManager.NameNotFoundException e) {\n                // unlikely, as we are iterating over live services.\n                Log.e(TAG, \"can't find package name\", e);\n            }\n\n            final AppPreference pref = new AppPreference(getPrefContext());\n            pref.setTitle(title);\n            pref.setIcon(mIconDrawableFactory.getBadgedIcon(service, service.applicationInfo,\n                    UserHandle.getUserId(service.applicationInfo.uid)));\n            pref.setKey(cn.flattenToString());\n            pref.setSummary(mBackend.getDeviceList(ICompanionDeviceManager.Stub.asInterface(\n                    ServiceManager.getService(Context.COMPANION_DEVICE_SERVICE)),\n                    com.android.settings.bluetooth.Utils.getLocalBtManager(mContext),\n                    service.packageName,\n                    UserHandle.myUserId()));\n            if (managedProfileId != UserHandle.USER_NULL\n                    && !mDpm.isNotificationListenerServicePermitted(\n                    service.packageName, managedProfileId)) {\n                pref.setSummary(mDpm.getResources().getString(\n                        WORK_PROFILE_NOTIFICATION_LISTENER_BLOCKED,\n                        () -> getString(\n                                R.string.work_profile_notification_access_blocked_summary)));\n            }\n            pref.setOnPreferenceClickListener(preference -> {\n                final Bundle args = new Bundle();\n                args.putString(AppInfoBase.ARG_PACKAGE_NAME, cn.getPackageName());\n                args.putInt(AppInfoBase.ARG_PACKAGE_UID, service.applicationInfo.uid);\n\n                Bundle extras = new Bundle();\n                extras.putString(Settings.EXTRA_NOTIFICATION_LISTENER_COMPONENT_NAME,\n                        cn.flattenToString());\n\n                new SubSettingLauncher(getContext())\n                        .setDestination(NotificationAccessDetails.class.getName())\n                        .setSourceMetricsCategory(getMetricsCategory())\n                        .setTitleRes(R.string.manage_notification_access_title)\n                        .setArguments(args)\n                        .setExtras(extras)\n                        .setUserHandle(UserHandle.getUserHandleForUid(service.applicationInfo.uid))\n                        .launch();\n                        return true;\n                    });\n            pref.setKey(cn.flattenToString());\n            if (mNm.isNotificationListenerAccessGranted(cn)) {\n                allowedCategory.addPreference(pref);\n            } else {\n                notAllowedCategory.addPreference(pref);\n            }\n        }\n        highlightPreferenceIfNeeded();\n    }",
    "abstract_func_before": "private void updateList(List<ServiceInfo> VAR_0) {\n        final UserManager VAR_1 = (UserManager) VAR_2.getSystemService(VAR_3.USER_SERVICE);\n        final int VAR_4 = VAR_5.getManagedProfileId(VAR_1, VAR_6.myUserId());\n\n        final PreferenceScreen VAR_7 = getPreferenceScreen();\n        final PreferenceCategory VAR_8 = VAR_7.findPreference(VAR_9);\n        VAR_8.removeAll();\n        final PreferenceCategory VAR_10 = VAR_7.findPreference(VAR_11);\n        VAR_10.removeAll();\n\n        VAR_0.sort(new PackageItemInfo.DisplayNameComparator(VAR_12));\n        for (ServiceInfo VAR_13 : VAR_0) {\n            final ComponentName VAR_14 = new ComponentName(VAR_13.packageName, VAR_13.name);\n            CharSequence VAR_15 = null;\n            try {\n                VAR_15 = VAR_12.getApplicationInfoAsUser(\n                        VAR_13.packageName, 0, VAR_6.myUserId()).loadLabel(VAR_12);\n            } catch (PackageManager.NameNotFoundException VAR_16) {\n                /* COMMENT_0 */\n                VAR_17.e(VAR_18, \"can't find package name\", VAR_16);\n            }\n\n            final AppPreference VAR_19 = new AppPreference(getPrefContext());\n            VAR_19.setTitle(VAR_15);\n            VAR_19.setIcon(VAR_20.getBadgedIcon(VAR_13, VAR_13.applicationInfo,\n                    VAR_6.getUserId(VAR_13.applicationInfo.uid)));\n            VAR_19.setKey(VAR_14.flattenToString());\n            VAR_19.setSummary(VAR_21.getDeviceList(VAR_22.Stub.asInterface(\n                    VAR_23.getService(VAR_3.COMPANION_DEVICE_SERVICE)),\n                    VAR_24.android.settings.bluetooth.Utils.getLocalBtManager(VAR_2),\n                    VAR_13.packageName,\n                    VAR_6.myUserId()));\n            if (VAR_4 != VAR_6.USER_NULL\n                    && !VAR_25.isNotificationListenerServicePermitted(\n                    VAR_13.packageName, VAR_4)) {\n                VAR_19.setSummary(VAR_25.getResources().getString(\n                        VAR_26,\n                        () -> getString(\n                                VAR_27.string.work_profile_notification_access_blocked_summary)));\n            }\n            VAR_19.setOnPreferenceClickListener(VAR_28 -> {\n                final Bundle VAR_29 = new Bundle();\n                VAR_29.putString(VAR_30.ARG_PACKAGE_NAME, VAR_14.getPackageName());\n                VAR_29.putInt(VAR_30.ARG_PACKAGE_UID, VAR_13.applicationInfo.uid);\n\n                Bundle VAR_31 = new Bundle();\n                VAR_31.putString(VAR_32.EXTRA_NOTIFICATION_LISTENER_COMPONENT_NAME,\n                        VAR_14.flattenToString());\n\n                new SubSettingLauncher(getContext())\n                        .setDestination(NotificationAccessDetails.class.getName())\n                        .setSourceMetricsCategory(getMetricsCategory())\n                        .setTitleRes(VAR_27.string.manage_notification_access_title)\n                        .setArguments(VAR_29)\n                        .setExtras(VAR_31)\n                        .setUserHandle(VAR_6.getUserHandleForUid(VAR_13.applicationInfo.uid))\n                        .launch();\n                        return true;\n                    });\n            VAR_19.setKey(VAR_14.flattenToString());\n            if (VAR_33.isNotificationListenerAccessGranted(VAR_14)) {\n                VAR_8.addPreference(VAR_19);\n            } else {\n                VAR_10.addPreference(VAR_19);\n            }\n        }\n        highlightPreferenceIfNeeded();\n    }",
    "func_graph_path_before": "android/d8355ac47e068ad20c6a7b1602e72f0585ec0085/NotificationAccessSettings.java/vul/before/1.json",
    "func": "@VisibleForTesting\n    void updateList(List<ServiceInfo> services) {\n        final UserManager um = (UserManager) mContext.getSystemService(Context.USER_SERVICE);\n        final int managedProfileId = Utils.getManagedProfileId(um, UserHandle.myUserId());\n\n        final PreferenceScreen screen = getPreferenceScreen();\n        final PreferenceCategory allowedCategory = screen.findPreference(ALLOWED_KEY);\n        allowedCategory.removeAll();\n        final PreferenceCategory notAllowedCategory = screen.findPreference(NOT_ALLOWED_KEY);\n        notAllowedCategory.removeAll();\n\n        services.sort(new PackageItemInfo.DisplayNameComparator(mPm));\n        for (ServiceInfo service : services) {\n            final ComponentName cn = new ComponentName(service.packageName, service.name);\n            boolean isAllowed = mNm.isNotificationListenerAccessGranted(cn);\n            if (!isAllowed && cn.flattenToString().length() > MAX_CN_LENGTH) {\n                continue;\n            }\n\n            CharSequence title = null;\n            try {\n                title = mPm.getApplicationInfoAsUser(\n                        service.packageName, 0, UserHandle.myUserId()).loadLabel(mPm);\n            } catch (PackageManager.NameNotFoundException e) {\n                // unlikely, as we are iterating over live services.\n                Log.e(TAG, \"can't find package name\", e);\n            }\n\n            final AppPreference pref = new AppPreference(getPrefContext());\n            pref.setTitle(title);\n            pref.setIcon(mIconDrawableFactory.getBadgedIcon(service, service.applicationInfo,\n                    UserHandle.getUserId(service.applicationInfo.uid)));\n            pref.setKey(cn.flattenToString());\n            pref.setSummary(mBackend.getDeviceList(ICompanionDeviceManager.Stub.asInterface(\n                    ServiceManager.getService(Context.COMPANION_DEVICE_SERVICE)),\n                    com.android.settings.bluetooth.Utils.getLocalBtManager(mContext),\n                    service.packageName,\n                    UserHandle.myUserId()));\n            if (managedProfileId != UserHandle.USER_NULL\n                    && !mDpm.isNotificationListenerServicePermitted(\n                    service.packageName, managedProfileId)) {\n                pref.setSummary(mDpm.getResources().getString(\n                        WORK_PROFILE_NOTIFICATION_LISTENER_BLOCKED,\n                        () -> getString(\n                                R.string.work_profile_notification_access_blocked_summary)));\n            }\n            pref.setOnPreferenceClickListener(preference -> {\n                final Bundle args = new Bundle();\n                args.putString(AppInfoBase.ARG_PACKAGE_NAME, cn.getPackageName());\n                args.putInt(AppInfoBase.ARG_PACKAGE_UID, service.applicationInfo.uid);\n\n                Bundle extras = new Bundle();\n                extras.putString(Settings.EXTRA_NOTIFICATION_LISTENER_COMPONENT_NAME,\n                        cn.flattenToString());\n\n                new SubSettingLauncher(getContext())\n                        .setDestination(NotificationAccessDetails.class.getName())\n                        .setSourceMetricsCategory(getMetricsCategory())\n                        .setTitleRes(R.string.manage_notification_access_title)\n                        .setArguments(args)\n                        .setExtras(extras)\n                        .setUserHandle(UserHandle.getUserHandleForUid(service.applicationInfo.uid))\n                        .launch();\n                        return true;\n                    });\n            pref.setKey(cn.flattenToString());\n            if (isAllowed) {\n                allowedCategory.addPreference(pref);\n            } else {\n                notAllowedCategory.addPreference(pref);\n            }\n        }\n        highlightPreferenceIfNeeded();\n    }",
    "abstract_func": "@VisibleForTesting\n    void updateList(List<ServiceInfo> VAR_0) {\n        final UserManager VAR_1 = (UserManager) VAR_2.getSystemService(VAR_3.USER_SERVICE);\n        final int VAR_4 = VAR_5.getManagedProfileId(VAR_1, VAR_6.myUserId());\n\n        final PreferenceScreen VAR_7 = getPreferenceScreen();\n        final PreferenceCategory VAR_8 = VAR_7.findPreference(VAR_9);\n        VAR_8.removeAll();\n        final PreferenceCategory VAR_10 = VAR_7.findPreference(VAR_11);\n        VAR_10.removeAll();\n\n        VAR_0.sort(new PackageItemInfo.DisplayNameComparator(VAR_12));\n        for (ServiceInfo VAR_13 : VAR_0) {\n            final ComponentName VAR_14 = new ComponentName(VAR_13.packageName, VAR_13.name);\n            boolean VAR_15 = VAR_16.isNotificationListenerAccessGranted(VAR_14);\n            if (!VAR_15 && VAR_14.flattenToString().length() > VAR_17) {\n                continue;\n            }\n\n            CharSequence VAR_18 = null;\n            try {\n                VAR_18 = VAR_12.getApplicationInfoAsUser(\n                        VAR_13.packageName, 0, VAR_6.myUserId()).loadLabel(VAR_12);\n            } catch (PackageManager.NameNotFoundException VAR_19) {\n                /* COMMENT_0 */\n                VAR_20.e(VAR_21, \"can't find package name\", VAR_19);\n            }\n\n            final AppPreference VAR_22 = new AppPreference(getPrefContext());\n            VAR_22.setTitle(VAR_18);\n            VAR_22.setIcon(VAR_23.getBadgedIcon(VAR_13, VAR_13.applicationInfo,\n                    VAR_6.getUserId(VAR_13.applicationInfo.uid)));\n            VAR_22.setKey(VAR_14.flattenToString());\n            VAR_22.setSummary(VAR_24.getDeviceList(VAR_25.Stub.asInterface(\n                    VAR_26.getService(VAR_3.COMPANION_DEVICE_SERVICE)),\n                    VAR_27.android.settings.bluetooth.Utils.getLocalBtManager(VAR_2),\n                    VAR_13.packageName,\n                    VAR_6.myUserId()));\n            if (VAR_4 != VAR_6.USER_NULL\n                    && !VAR_28.isNotificationListenerServicePermitted(\n                    VAR_13.packageName, VAR_4)) {\n                VAR_22.setSummary(VAR_28.getResources().getString(\n                        VAR_29,\n                        () -> getString(\n                                VAR_30.string.work_profile_notification_access_blocked_summary)));\n            }\n            VAR_22.setOnPreferenceClickListener(VAR_31 -> {\n                final Bundle VAR_32 = new Bundle();\n                VAR_32.putString(VAR_33.ARG_PACKAGE_NAME, VAR_14.getPackageName());\n                VAR_32.putInt(VAR_33.ARG_PACKAGE_UID, VAR_13.applicationInfo.uid);\n\n                Bundle VAR_34 = new Bundle();\n                VAR_34.putString(VAR_35.EXTRA_NOTIFICATION_LISTENER_COMPONENT_NAME,\n                        VAR_14.flattenToString());\n\n                new SubSettingLauncher(getContext())\n                        .setDestination(NotificationAccessDetails.class.getName())\n                        .setSourceMetricsCategory(getMetricsCategory())\n                        .setTitleRes(VAR_30.string.manage_notification_access_title)\n                        .setArguments(VAR_32)\n                        .setExtras(VAR_34)\n                        .setUserHandle(VAR_6.getUserHandleForUid(VAR_13.applicationInfo.uid))\n                        .launch();\n                        return true;\n                    });\n            VAR_22.setKey(VAR_14.flattenToString());\n            if (VAR_15) {\n                VAR_8.addPreference(VAR_22);\n            } else {\n                VAR_10.addPreference(VAR_22);\n            }\n        }\n        highlightPreferenceIfNeeded();\n    }",
    "func_graph_path": "android/d8355ac47e068ad20c6a7b1602e72f0585ec0085/NotificationAccessSettings.java/vul/after/1.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -1,4 +1,5 @@\n-private void updateList(List<ServiceInfo> services) {\n+@VisibleForTesting\n+    void updateList(List<ServiceInfo> services) {\n         final UserManager um = (UserManager) mContext.getSystemService(Context.USER_SERVICE);\n         final int managedProfileId = Utils.getManagedProfileId(um, UserHandle.myUserId());\n \n@@ -11,6 +12,11 @@\n         services.sort(new PackageItemInfo.DisplayNameComparator(mPm));\n         for (ServiceInfo service : services) {\n             final ComponentName cn = new ComponentName(service.packageName, service.name);\n+            boolean isAllowed = mNm.isNotificationListenerAccessGranted(cn);\n+            if (!isAllowed && cn.flattenToString().length() > MAX_CN_LENGTH) {\n+                continue;\n+            }\n+\n             CharSequence title = null;\n             try {\n                 title = mPm.getApplicationInfoAsUser(\n@@ -58,7 +64,7 @@\n                         return true;\n                     });\n             pref.setKey(cn.flattenToString());\n-            if (mNm.isNotificationListenerAccessGranted(cn)) {\n+            if (isAllowed) {\n                 allowedCategory.addPreference(pref);\n             } else {\n                 notAllowedCategory.addPreference(pref);",
    "diff_line_info": {
        "deleted_lines": [
            "private void updateList(List<ServiceInfo> services) {",
            "            if (mNm.isNotificationListenerAccessGranted(cn)) {"
        ],
        "added_lines": [
            "@VisibleForTesting",
            "    void updateList(List<ServiceInfo> services) {",
            "            boolean isAllowed = mNm.isNotificationListenerAccessGranted(cn);",
            "            if (!isAllowed && cn.flattenToString().length() > MAX_CN_LENGTH) {",
            "                continue;",
            "            }",
            "",
            "            if (isAllowed) {"
        ]
    },
    "is_vul": true,
    "pr_url": null,
    "description": "no more info"
}