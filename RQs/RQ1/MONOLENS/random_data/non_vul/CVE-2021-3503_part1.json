{
    "cve_id": "CVE-2021-3503",
    "cwe_ids": [
        "CWE-200"
    ],
    "cvss_vector": "AV:N/AC:L/Au:S/C:P/I:N/A:N",
    "cvss_is_v3": false,
    "repo_name": "wildfly",
    "commit_msg": "[WFLY-11933] Return properly configured ModelNode when RBAC is enabled\n\nReturn empty ModelNode for attributes restricted by RBAC so that isDefined() answers correctly\n(h/t jmesnil)",
    "commit_hash": "a48db605577d941b5ae3e899a1187303e138ca74",
    "git_url": "https://github.com/wildfly/wildfly/commit/a48db605577d941b5ae3e899a1187303e138ca74",
    "file_path": "metrics/src/main/java/org/wildfly/extension/metrics/WildFlyMetric.java",
    "func_name": "readAttributeValue",
    "func_before": "private ModelNode readAttributeValue(PathAddress address, String attributeName) {\n        final ModelNode readAttributeOp = new ModelNode();\n        readAttributeOp.get(OP).set(READ_ATTRIBUTE_OPERATION);\n        readAttributeOp.get(OP_ADDR).set(address.toModelNode());\n        readAttributeOp.get(ModelDescriptionConstants.INCLUDE_UNDEFINED_METRIC_VALUES).set(false);\n        readAttributeOp.get(NAME).set(attributeName);\n        ModelNode response = modelControllerClient.execute(readAttributeOp);\n        String error = getFailureDescription(response);\n        if (error != null) {\n            // [WFLY-11933] if the value can not be read if the management resource is not accessible due to RBAC,\n            // it is logged it at a lower level.\n            if (error.contains(\"WFLYCTL0216\")) {\n                LOGGER.debugf(\"Unable to read attribute %s: %s.\", attributeName, error);\n            } else{\n                LOGGER.unableToReadAttribute(attributeName, address, error);\n            }\n            return new ModelNode(ModelType.UNDEFINED);\n        }\n        return  response.get(RESULT);\n    }",
    "abstract_func_before": "private ModelNode readAttributeValue(PathAddress VAR_0, String VAR_1) {\n        final ModelNode VAR_2 = new ModelNode();\n        VAR_2.get(VAR_3).set(VAR_4);\n        VAR_2.get(VAR_5).set(VAR_0.toModelNode());\n        VAR_2.get(VAR_6.INCLUDE_UNDEFINED_METRIC_VALUES).set(false);\n        VAR_2.get(VAR_7).set(VAR_1);\n        ModelNode VAR_8 = VAR_9.execute(VAR_2);\n        String VAR_10 = getFailureDescription(VAR_8);\n        if (VAR_10 != null) {\n            /* COMMENT_0 */\n            /* COMMENT_1 */\n            if (VAR_10.contains(\"WFLYCTL0216\")) {\n                VAR_11.debugf(\"Unable to read attribute %s: %s.\", VAR_1, VAR_10);\n            } else{\n                VAR_11.unableToReadAttribute(VAR_1, VAR_0, VAR_10);\n            }\n            return new ModelNode(VAR_12.UNDEFINED);\n        }\n        return  VAR_8.get(VAR_13);\n    }",
    "func_graph_path_before": "wildfly/a48db605577d941b5ae3e899a1187303e138ca74/WildFlyMetric.java/vul/before/0.json",
    "func": "private ModelNode readAttributeValue(PathAddress address, String attributeName) {\n        final ModelNode readAttributeOp = new ModelNode();\n        readAttributeOp.get(OP).set(READ_ATTRIBUTE_OPERATION);\n        readAttributeOp.get(OP_ADDR).set(address.toModelNode());\n        readAttributeOp.get(ModelDescriptionConstants.INCLUDE_UNDEFINED_METRIC_VALUES).set(false);\n        readAttributeOp.get(NAME).set(attributeName);\n        ModelNode response = modelControllerClient.execute(readAttributeOp);\n        String error = getFailureDescription(response);\n        if (error != null) {\n            // [WFLY-11933] if the value can not be read if the management resource is not accessible due to RBAC,\n            // it is logged it at a lower level.\n            if (error.contains(\"WFLYCTL0216\")) {\n                LOGGER.debugf(\"Unable to read attribute %s: %s.\", attributeName, error);\n            } else{\n                LOGGER.unableToReadAttribute(attributeName, address, error);\n            }\n            return UNDEFINED;\n        }\n        return  response.get(RESULT);\n    }",
    "abstract_func": "private ModelNode readAttributeValue(PathAddress VAR_0, String VAR_1) {\n        final ModelNode VAR_2 = new ModelNode();\n        VAR_2.get(VAR_3).set(VAR_4);\n        VAR_2.get(VAR_5).set(VAR_0.toModelNode());\n        VAR_2.get(VAR_6.INCLUDE_UNDEFINED_METRIC_VALUES).set(false);\n        VAR_2.get(VAR_7).set(VAR_1);\n        ModelNode VAR_8 = VAR_9.execute(VAR_2);\n        String VAR_10 = getFailureDescription(VAR_8);\n        if (VAR_10 != null) {\n            /* COMMENT_0 */\n            /* COMMENT_1 */\n            if (VAR_10.contains(\"WFLYCTL0216\")) {\n                VAR_11.debugf(\"Unable to read attribute %s: %s.\", VAR_1, VAR_10);\n            } else{\n                VAR_11.unableToReadAttribute(VAR_1, VAR_0, VAR_10);\n            }\n            return VAR_12;\n        }\n        return  VAR_8.get(VAR_13);\n    }",
    "func_graph_path": "wildfly/a48db605577d941b5ae3e899a1187303e138ca74/WildFlyMetric.java/vul/after/0.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -14,7 +14,7 @@\n             } else{\n                 LOGGER.unableToReadAttribute(attributeName, address, error);\n             }\n-            return new ModelNode(ModelType.UNDEFINED);\n+            return UNDEFINED;\n         }\n         return  response.get(RESULT);\n     }",
    "diff_line_info": {
        "deleted_lines": [
            "            return new ModelNode(ModelType.UNDEFINED);"
        ],
        "added_lines": [
            "            return UNDEFINED;"
        ]
    },
    "is_vul": true,
    "pr_url": "https://github.com/wildfly/wildfly/pull/14136",
    "description": "https://issues.redhat.com/browse/WFLY-11933\r\n\r\nReturn empty ModelNode for attributes restricted by RBAC so that isDefined() answers correctly\r\n(h/t @jmesnil)\r\n"
}