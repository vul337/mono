{
    "cve_id": "CVE-2021-28041",
    "cwe_ids": [
        "CWE-415"
    ],
    "cvss_vector": "AV:N/AC:H/Au:S/C:P/I:P/A:P",
    "cvss_is_v3": false,
    "repo_name": "openssh/openssh-portable",
    "commit_msg": "upstream: factor SSH_AGENT_CONSTRAIN_EXTENSION parsing into its own\n\nfunction and remove an unused variable; ok dtucker@\n\nOpenBSD-Commit-ID: e1a938657fbf7ef0ba5e73b30365734a0cc96559",
    "commit_hash": "e04fd6dde16de1cdc5a4d9946397ff60d96568db",
    "git_url": "https://github.com/openssh/openssh-portable/commit/e04fd6dde16de1cdc5a4d9946397ff60d96568db",
    "file_path": "ssh-agent.c",
    "func_name": "parse_key_constraints",
    "func_before": "static int\nparse_key_constraints(struct sshbuf *m, struct sshkey *k, time_t *deathp,\n    u_int *secondsp, int *confirmp, char **sk_providerp)\n{\n\tu_char ctype;\n\tint r;\n\tu_int seconds, maxsign = 0;\n\tchar *ext_name = NULL;\n\tstruct sshbuf *b = NULL;\n\n\twhile (sshbuf_len(m)) {\n\t\tif ((r = sshbuf_get_u8(m, &ctype)) != 0) {\n\t\t\terror_fr(r, \"parse constraint type\");\n\t\t\tgoto err;\n\t\t}\n\t\tswitch (ctype) {\n\t\tcase SSH_AGENT_CONSTRAIN_LIFETIME:\n\t\t\tif (*deathp != 0) {\n\t\t\t\terror_f(\"lifetime already set\");\n\t\t\t\tgoto err;\n\t\t\t}\n\t\t\tif ((r = sshbuf_get_u32(m, &seconds)) != 0) {\n\t\t\t\terror_fr(r, \"parse lifetime constraint\");\n\t\t\t\tgoto err;\n\t\t\t}\n\t\t\t*deathp = monotime() + seconds;\n\t\t\t*secondsp = seconds;\n\t\t\tbreak;\n\t\tcase SSH_AGENT_CONSTRAIN_CONFIRM:\n\t\t\tif (*confirmp != 0) {\n\t\t\t\terror_f(\"confirm already set\");\n\t\t\t\tgoto err;\n\t\t\t}\n\t\t\t*confirmp = 1;\n\t\t\tbreak;\n\t\tcase SSH_AGENT_CONSTRAIN_MAXSIGN:\n\t\t\tif (k == NULL) {\n\t\t\t\terror_f(\"maxsign not valid here\");\n\t\t\t\tgoto err;\n\t\t\t}\n\t\t\tif (maxsign != 0) {\n\t\t\t\terror_f(\"maxsign already set\");\n\t\t\t\tgoto err;\n\t\t\t}\n\t\t\tif ((r = sshbuf_get_u32(m, &maxsign)) != 0) {\n\t\t\t\terror_fr(r, \"parse maxsign constraint\");\n\t\t\t\tgoto err;\n\t\t\t}\n\t\t\tif ((r = sshkey_enable_maxsign(k, maxsign)) != 0) {\n\t\t\t\terror_fr(r, \"enable maxsign\");\n\t\t\t\tgoto err;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase SSH_AGENT_CONSTRAIN_EXTENSION:\n\t\t\tif ((r = sshbuf_get_cstring(m, &ext_name, NULL)) != 0) {\n\t\t\t\terror_fr(r, \"parse constraint extension\");\n\t\t\t\tgoto err;\n\t\t\t}\n\t\t\tdebug_f(\"constraint ext %s\", ext_name);\n\t\t\tif (strcmp(ext_name, \"sk-provider@openssh.com\") == 0) {\n\t\t\t\tif (sk_providerp == NULL) {\n\t\t\t\t\terror_f(\"%s not valid here\", ext_name);\n\t\t\t\t\tgoto err;\n\t\t\t\t}\n\t\t\t\tif (*sk_providerp != NULL) {\n\t\t\t\t\terror_f(\"%s already set\", ext_name);\n\t\t\t\t\tgoto err;\n\t\t\t\t}\n\t\t\t\tif ((r = sshbuf_get_cstring(m,\n\t\t\t\t    sk_providerp, NULL)) != 0) {\n\t\t\t\t\terror_fr(r, \"parse %s\", ext_name);\n\t\t\t\t\tgoto err;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\terror_f(\"unsupported constraint \\\"%s\\\"\",\n\t\t\t\t    ext_name);\n\t\t\t\tgoto err;\n\t\t\t}\n\t\t\tfree(ext_name);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\terror_f(\"Unknown constraint %d\", ctype);\n err:\n\t\t\tfree(ext_name);\n\t\t\tsshbuf_free(b);\n\t\t\treturn -1;\n\t\t}\n\t}\n\t/* success */\n\treturn 0;\n}",
    "abstract_func_before": "static int\nparse_key_constraints(struct sshbuf *VAR_0, struct sshkey *VAR_1, time_t *VAR_2,\n    u_int *VAR_3, int *VAR_4, char **VAR_5)\n{\n\tu_char VAR_6;\n\tint VAR_7;\n\tu_int VAR_8, VAR_9 = 0;\n\tchar *VAR_10 = NULL;\n\tstruct sshbuf *VAR_11 = NULL;\n\n\twhile (sshbuf_len(VAR_0)) {\n\t\tif ((VAR_7 = sshbuf_get_u8(VAR_0, &VAR_6)) != 0) {\n\t\t\terror_fr(VAR_7, \"parse constraint type\");\n\t\t\tgoto err;\n\t\t}\n\t\tswitch (VAR_6) {\n\t\tcase VAR_12:\n\t\t\tif (*VAR_2 != 0) {\n\t\t\t\terror_f(\"lifetime already set\");\n\t\t\t\tgoto err;\n\t\t\t}\n\t\t\tif ((VAR_7 = sshbuf_get_u32(VAR_0, &VAR_8)) != 0) {\n\t\t\t\terror_fr(VAR_7, \"parse lifetime constraint\");\n\t\t\t\tgoto err;\n\t\t\t}\n\t\t\t*VAR_2 = monotime() + VAR_8;\n\t\t\t*VAR_3 = VAR_8;\n\t\t\tbreak;\n\t\tcase VAR_13:\n\t\t\tif (*VAR_4 != 0) {\n\t\t\t\terror_f(\"confirm already set\");\n\t\t\t\tgoto err;\n\t\t\t}\n\t\t\t*VAR_4 = 1;\n\t\t\tbreak;\n\t\tcase VAR_14:\n\t\t\tif (VAR_1 == NULL) {\n\t\t\t\terror_f(\"maxsign not valid here\");\n\t\t\t\tgoto err;\n\t\t\t}\n\t\t\tif (VAR_9 != 0) {\n\t\t\t\terror_f(\"maxsign already set\");\n\t\t\t\tgoto err;\n\t\t\t}\n\t\t\tif ((VAR_7 = sshbuf_get_u32(VAR_0, &VAR_9)) != 0) {\n\t\t\t\terror_fr(VAR_7, \"parse maxsign constraint\");\n\t\t\t\tgoto err;\n\t\t\t}\n\t\t\tif ((VAR_7 = sshkey_enable_maxsign(VAR_1, VAR_9)) != 0) {\n\t\t\t\terror_fr(VAR_7, \"enable maxsign\");\n\t\t\t\tgoto err;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase VAR_15:\n\t\t\tif ((VAR_7 = sshbuf_get_cstring(VAR_0, &VAR_10, NULL)) != 0) {\n\t\t\t\terror_fr(VAR_7, \"parse constraint extension\");\n\t\t\t\tgoto err;\n\t\t\t}\n\t\t\tdebug_f(\"constraint ext %s\", VAR_10);\n\t\t\tif (strcmp(VAR_10, \"sk-provider@openssh.com\") == 0) {\n\t\t\t\tif (VAR_5 == NULL) {\n\t\t\t\t\terror_f(\"%s not valid here\", VAR_10);\n\t\t\t\t\tgoto err;\n\t\t\t\t}\n\t\t\t\tif (*VAR_5 != NULL) {\n\t\t\t\t\terror_f(\"%s already set\", VAR_10);\n\t\t\t\t\tgoto err;\n\t\t\t\t}\n\t\t\t\tif ((VAR_7 = sshbuf_get_cstring(VAR_0,\n\t\t\t\t    VAR_5, NULL)) != 0) {\n\t\t\t\t\terror_fr(VAR_7, \"parse %s\", VAR_10);\n\t\t\t\t\tgoto err;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\terror_f(\"unsupported constraint \\\"%s\\\"\",\n\t\t\t\t    VAR_10);\n\t\t\t\tgoto err;\n\t\t\t}\n\t\t\tfree(VAR_10);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\terror_f(\"Unknown constraint %d\", VAR_6);\n err:\n\t\t\tfree(VAR_10);\n\t\t\tsshbuf_free(VAR_11);\n\t\t\treturn -1;\n\t\t}\n\t}\n\t/* COMMENT_0 */\n\treturn 0;\n}",
    "func_graph_path_before": "openssh/openssh-portable/e04fd6dde16de1cdc5a4d9946397ff60d96568db/ssh-agent.c/vul/before/0.json",
    "func": "static int\nparse_key_constraints(struct sshbuf *m, struct sshkey *k, time_t *deathp,\n    u_int *secondsp, int *confirmp, char **sk_providerp)\n{\n\tu_char ctype;\n\tint r;\n\tu_int seconds, maxsign = 0;\n\n\twhile (sshbuf_len(m)) {\n\t\tif ((r = sshbuf_get_u8(m, &ctype)) != 0) {\n\t\t\terror_fr(r, \"parse constraint type\");\n\t\t\tgoto out;\n\t\t}\n\t\tswitch (ctype) {\n\t\tcase SSH_AGENT_CONSTRAIN_LIFETIME:\n\t\t\tif (*deathp != 0) {\n\t\t\t\terror_f(\"lifetime already set\");\n\t\t\t\tr = SSH_ERR_INVALID_FORMAT;\n\t\t\t\tgoto out;\n\t\t\t}\n\t\t\tif ((r = sshbuf_get_u32(m, &seconds)) != 0) {\n\t\t\t\terror_fr(r, \"parse lifetime constraint\");\n\t\t\t\tgoto out;\n\t\t\t}\n\t\t\t*deathp = monotime() + seconds;\n\t\t\t*secondsp = seconds;\n\t\t\tbreak;\n\t\tcase SSH_AGENT_CONSTRAIN_CONFIRM:\n\t\t\tif (*confirmp != 0) {\n\t\t\t\terror_f(\"confirm already set\");\n\t\t\t\tr = SSH_ERR_INVALID_FORMAT;\n\t\t\t\tgoto out;\n\t\t\t}\n\t\t\t*confirmp = 1;\n\t\t\tbreak;\n\t\tcase SSH_AGENT_CONSTRAIN_MAXSIGN:\n\t\t\tif (k == NULL) {\n\t\t\t\terror_f(\"maxsign not valid here\");\n\t\t\t\tr = SSH_ERR_INVALID_FORMAT;\n\t\t\t\tgoto out;\n\t\t\t}\n\t\t\tif (maxsign != 0) {\n\t\t\t\terror_f(\"maxsign already set\");\n\t\t\t\tr = SSH_ERR_INVALID_FORMAT;\n\t\t\t\tgoto out;\n\t\t\t}\n\t\t\tif ((r = sshbuf_get_u32(m, &maxsign)) != 0) {\n\t\t\t\terror_fr(r, \"parse maxsign constraint\");\n\t\t\t\tgoto out;\n\t\t\t}\n\t\t\tif ((r = sshkey_enable_maxsign(k, maxsign)) != 0) {\n\t\t\t\terror_fr(r, \"enable maxsign\");\n\t\t\t\tgoto out;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase SSH_AGENT_CONSTRAIN_EXTENSION:\n\t\t\tif ((r = parse_key_constraint_extension(m,\n\t\t\t    sk_providerp)) != 0)\n\t\t\t\tgoto out; /* error already logged */\n\t\t\tbreak;\n\t\tdefault:\n\t\t\terror_f(\"Unknown constraint %d\", ctype);\n\t\t\tr = SSH_ERR_FEATURE_UNSUPPORTED;\n\t\t\tgoto out;\n\t\t}\n\t}\n\t/* success */\n\tr = 0;\n out:\n\treturn r;\n}",
    "abstract_func": "static int\nparse_key_constraints(struct sshbuf *VAR_0, struct sshkey *VAR_1, time_t *VAR_2,\n    u_int *VAR_3, int *VAR_4, char **VAR_5)\n{\n\tu_char VAR_6;\n\tint VAR_7;\n\tu_int VAR_8, VAR_9 = 0;\n\n\twhile (sshbuf_len(VAR_0)) {\n\t\tif ((VAR_7 = sshbuf_get_u8(VAR_0, &VAR_6)) != 0) {\n\t\t\terror_fr(VAR_7, \"parse constraint type\");\n\t\t\tgoto out;\n\t\t}\n\t\tswitch (VAR_6) {\n\t\tcase VAR_10:\n\t\t\tif (*VAR_2 != 0) {\n\t\t\t\terror_f(\"lifetime already set\");\n\t\t\t\tVAR_7 = VAR_11;\n\t\t\t\tgoto out;\n\t\t\t}\n\t\t\tif ((VAR_7 = sshbuf_get_u32(VAR_0, &VAR_8)) != 0) {\n\t\t\t\terror_fr(VAR_7, \"parse lifetime constraint\");\n\t\t\t\tgoto out;\n\t\t\t}\n\t\t\t*VAR_2 = monotime() + VAR_8;\n\t\t\t*VAR_3 = VAR_8;\n\t\t\tbreak;\n\t\tcase VAR_12:\n\t\t\tif (*VAR_4 != 0) {\n\t\t\t\terror_f(\"confirm already set\");\n\t\t\t\tVAR_7 = VAR_11;\n\t\t\t\tgoto out;\n\t\t\t}\n\t\t\t*VAR_4 = 1;\n\t\t\tbreak;\n\t\tcase VAR_13:\n\t\t\tif (VAR_1 == NULL) {\n\t\t\t\terror_f(\"maxsign not valid here\");\n\t\t\t\tVAR_7 = VAR_11;\n\t\t\t\tgoto out;\n\t\t\t}\n\t\t\tif (VAR_9 != 0) {\n\t\t\t\terror_f(\"maxsign already set\");\n\t\t\t\tVAR_7 = VAR_11;\n\t\t\t\tgoto out;\n\t\t\t}\n\t\t\tif ((VAR_7 = sshbuf_get_u32(VAR_0, &VAR_9)) != 0) {\n\t\t\t\terror_fr(VAR_7, \"parse maxsign constraint\");\n\t\t\t\tgoto out;\n\t\t\t}\n\t\t\tif ((VAR_7 = sshkey_enable_maxsign(VAR_1, VAR_9)) != 0) {\n\t\t\t\terror_fr(VAR_7, \"enable maxsign\");\n\t\t\t\tgoto out;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase VAR_14:\n\t\t\tif ((VAR_7 = parse_key_constraint_extension(VAR_0,\n\t\t\t    VAR_5)) != 0)\n\t\t\t\tgoto out; /* COMMENT_0 */\n\t\t\tbreak;\n\t\tdefault:\n\t\t\terror_f(\"Unknown constraint %d\", VAR_6);\n\t\t\tVAR_7 = VAR_15;\n\t\t\tgoto out;\n\t\t}\n\t}\n\t/* COMMENT_1 */\n\tVAR_7 = 0;\n out:\n\treturn VAR_7;\n}",
    "func_graph_path": "openssh/openssh-portable/e04fd6dde16de1cdc5a4d9946397ff60d96568db/ssh-agent.c/vul/after/0.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -5,23 +5,22 @@\n \tu_char ctype;\n \tint r;\n \tu_int seconds, maxsign = 0;\n-\tchar *ext_name = NULL;\n-\tstruct sshbuf *b = NULL;\n \n \twhile (sshbuf_len(m)) {\n \t\tif ((r = sshbuf_get_u8(m, &ctype)) != 0) {\n \t\t\terror_fr(r, \"parse constraint type\");\n-\t\t\tgoto err;\n+\t\t\tgoto out;\n \t\t}\n \t\tswitch (ctype) {\n \t\tcase SSH_AGENT_CONSTRAIN_LIFETIME:\n \t\t\tif (*deathp != 0) {\n \t\t\t\terror_f(\"lifetime already set\");\n-\t\t\t\tgoto err;\n+\t\t\t\tr = SSH_ERR_INVALID_FORMAT;\n+\t\t\t\tgoto out;\n \t\t\t}\n \t\t\tif ((r = sshbuf_get_u32(m, &seconds)) != 0) {\n \t\t\t\terror_fr(r, \"parse lifetime constraint\");\n-\t\t\t\tgoto err;\n+\t\t\t\tgoto out;\n \t\t\t}\n \t\t\t*deathp = monotime() + seconds;\n \t\t\t*secondsp = seconds;\n@@ -29,63 +28,44 @@\n \t\tcase SSH_AGENT_CONSTRAIN_CONFIRM:\n \t\t\tif (*confirmp != 0) {\n \t\t\t\terror_f(\"confirm already set\");\n-\t\t\t\tgoto err;\n+\t\t\t\tr = SSH_ERR_INVALID_FORMAT;\n+\t\t\t\tgoto out;\n \t\t\t}\n \t\t\t*confirmp = 1;\n \t\t\tbreak;\n \t\tcase SSH_AGENT_CONSTRAIN_MAXSIGN:\n \t\t\tif (k == NULL) {\n \t\t\t\terror_f(\"maxsign not valid here\");\n-\t\t\t\tgoto err;\n+\t\t\t\tr = SSH_ERR_INVALID_FORMAT;\n+\t\t\t\tgoto out;\n \t\t\t}\n \t\t\tif (maxsign != 0) {\n \t\t\t\terror_f(\"maxsign already set\");\n-\t\t\t\tgoto err;\n+\t\t\t\tr = SSH_ERR_INVALID_FORMAT;\n+\t\t\t\tgoto out;\n \t\t\t}\n \t\t\tif ((r = sshbuf_get_u32(m, &maxsign)) != 0) {\n \t\t\t\terror_fr(r, \"parse maxsign constraint\");\n-\t\t\t\tgoto err;\n+\t\t\t\tgoto out;\n \t\t\t}\n \t\t\tif ((r = sshkey_enable_maxsign(k, maxsign)) != 0) {\n \t\t\t\terror_fr(r, \"enable maxsign\");\n-\t\t\t\tgoto err;\n+\t\t\t\tgoto out;\n \t\t\t}\n \t\t\tbreak;\n \t\tcase SSH_AGENT_CONSTRAIN_EXTENSION:\n-\t\t\tif ((r = sshbuf_get_cstring(m, &ext_name, NULL)) != 0) {\n-\t\t\t\terror_fr(r, \"parse constraint extension\");\n-\t\t\t\tgoto err;\n-\t\t\t}\n-\t\t\tdebug_f(\"constraint ext %s\", ext_name);\n-\t\t\tif (strcmp(ext_name, \"sk-provider@openssh.com\") == 0) {\n-\t\t\t\tif (sk_providerp == NULL) {\n-\t\t\t\t\terror_f(\"%s not valid here\", ext_name);\n-\t\t\t\t\tgoto err;\n-\t\t\t\t}\n-\t\t\t\tif (*sk_providerp != NULL) {\n-\t\t\t\t\terror_f(\"%s already set\", ext_name);\n-\t\t\t\t\tgoto err;\n-\t\t\t\t}\n-\t\t\t\tif ((r = sshbuf_get_cstring(m,\n-\t\t\t\t    sk_providerp, NULL)) != 0) {\n-\t\t\t\t\terror_fr(r, \"parse %s\", ext_name);\n-\t\t\t\t\tgoto err;\n-\t\t\t\t}\n-\t\t\t} else {\n-\t\t\t\terror_f(\"unsupported constraint \\\"%s\\\"\",\n-\t\t\t\t    ext_name);\n-\t\t\t\tgoto err;\n-\t\t\t}\n-\t\t\tfree(ext_name);\n+\t\t\tif ((r = parse_key_constraint_extension(m,\n+\t\t\t    sk_providerp)) != 0)\n+\t\t\t\tgoto out; /* error already logged */\n \t\t\tbreak;\n \t\tdefault:\n \t\t\terror_f(\"Unknown constraint %d\", ctype);\n- err:\n-\t\t\tfree(ext_name);\n-\t\t\tsshbuf_free(b);\n-\t\t\treturn -1;\n+\t\t\tr = SSH_ERR_FEATURE_UNSUPPORTED;\n+\t\t\tgoto out;\n \t\t}\n \t}\n \t/* success */\n-\treturn 0;\n+\tr = 0;\n+ out:\n+\treturn r;\n }",
    "diff_line_info": {
        "deleted_lines": [
            "\tchar *ext_name = NULL;",
            "\tstruct sshbuf *b = NULL;",
            "\t\t\tgoto err;",
            "\t\t\t\tgoto err;",
            "\t\t\t\tgoto err;",
            "\t\t\t\tgoto err;",
            "\t\t\t\tgoto err;",
            "\t\t\t\tgoto err;",
            "\t\t\t\tgoto err;",
            "\t\t\t\tgoto err;",
            "\t\t\tif ((r = sshbuf_get_cstring(m, &ext_name, NULL)) != 0) {",
            "\t\t\t\terror_fr(r, \"parse constraint extension\");",
            "\t\t\t\tgoto err;",
            "\t\t\t}",
            "\t\t\tdebug_f(\"constraint ext %s\", ext_name);",
            "\t\t\tif (strcmp(ext_name, \"sk-provider@openssh.com\") == 0) {",
            "\t\t\t\tif (sk_providerp == NULL) {",
            "\t\t\t\t\terror_f(\"%s not valid here\", ext_name);",
            "\t\t\t\t\tgoto err;",
            "\t\t\t\t}",
            "\t\t\t\tif (*sk_providerp != NULL) {",
            "\t\t\t\t\terror_f(\"%s already set\", ext_name);",
            "\t\t\t\t\tgoto err;",
            "\t\t\t\t}",
            "\t\t\t\tif ((r = sshbuf_get_cstring(m,",
            "\t\t\t\t    sk_providerp, NULL)) != 0) {",
            "\t\t\t\t\terror_fr(r, \"parse %s\", ext_name);",
            "\t\t\t\t\tgoto err;",
            "\t\t\t\t}",
            "\t\t\t} else {",
            "\t\t\t\terror_f(\"unsupported constraint \\\"%s\\\"\",",
            "\t\t\t\t    ext_name);",
            "\t\t\t\tgoto err;",
            "\t\t\t}",
            "\t\t\tfree(ext_name);",
            " err:",
            "\t\t\tfree(ext_name);",
            "\t\t\tsshbuf_free(b);",
            "\t\t\treturn -1;",
            "\treturn 0;"
        ],
        "added_lines": [
            "\t\t\tgoto out;",
            "\t\t\t\tr = SSH_ERR_INVALID_FORMAT;",
            "\t\t\t\tgoto out;",
            "\t\t\t\tgoto out;",
            "\t\t\t\tr = SSH_ERR_INVALID_FORMAT;",
            "\t\t\t\tgoto out;",
            "\t\t\t\tr = SSH_ERR_INVALID_FORMAT;",
            "\t\t\t\tgoto out;",
            "\t\t\t\tr = SSH_ERR_INVALID_FORMAT;",
            "\t\t\t\tgoto out;",
            "\t\t\t\tgoto out;",
            "\t\t\t\tgoto out;",
            "\t\t\tif ((r = parse_key_constraint_extension(m,",
            "\t\t\t    sk_providerp)) != 0)",
            "\t\t\t\tgoto out; /* error already logged */",
            "\t\t\tr = SSH_ERR_FEATURE_UNSUPPORTED;",
            "\t\t\tgoto out;",
            "\tr = 0;",
            " out:",
            "\treturn r;"
        ]
    },
    "is_vul": true,
    "pr_url": null,
    "description": "no more info"
}