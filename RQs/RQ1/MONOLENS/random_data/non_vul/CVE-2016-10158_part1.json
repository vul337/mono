{
    "cve_id": "CVE-2016-10158",
    "cwe_ids": [
        "CWE-189"
    ],
    "cvss_vector": "AV:N/AC:L/Au:N/C:N/I:N/A:P",
    "cvss_is_v3": false,
    "repo_name": "php/php-src",
    "commit_msg": "Fix bug #73737 FPE when parsing a tag format",
    "commit_hash": "1cda0d7c2ffb62d8331c64e703131d9cabdc03ea",
    "git_url": "https://github.com/php/php-src/commit/1cda0d7c2ffb62d8331c64e703131d9cabdc03ea",
    "file_path": "ext/exif/exif.c",
    "func_name": "exif_convert_any_to_int",
    "func_before": "static size_t exif_convert_any_to_int(void *value, int format, int motorola_intel TSRMLS_DC)\n{\n\tint \t\ts_den;\n\tunsigned \tu_den;\n\n\tswitch(format) {\n\t\tcase TAG_FMT_SBYTE:     return *(signed char *)value;\n\t\tcase TAG_FMT_BYTE:      return *(uchar *)value;\n\n\t\tcase TAG_FMT_USHORT:    return php_ifd_get16u(value, motorola_intel);\n\t\tcase TAG_FMT_ULONG:     return php_ifd_get32u(value, motorola_intel);\n\n\t\tcase TAG_FMT_URATIONAL:\n\t\t\tu_den = php_ifd_get32u(4+(char *)value, motorola_intel);\n\t\t\tif (u_den == 0) {\n\t\t\t\treturn 0;\n\t\t\t} else {\n\t\t\t\treturn php_ifd_get32u(value, motorola_intel) / u_den;\n\t\t\t}\n\n\t\tcase TAG_FMT_SRATIONAL:\n\t\t\ts_den = php_ifd_get32s(4+(char *)value, motorola_intel);\n\t\t\tif (s_den == 0) {\n\t\t\t\treturn 0;\n\t\t\t} else {\n\t\t\t\treturn php_ifd_get32s(value, motorola_intel) / s_den;\n\t\t\t}\n\n\t\tcase TAG_FMT_SSHORT:    return php_ifd_get16u(value, motorola_intel);\n\t\tcase TAG_FMT_SLONG:     return php_ifd_get32s(value, motorola_intel);\n\n\t\t/* Not sure if this is correct (never seen float used in Exif format) */\n\t\tcase TAG_FMT_SINGLE:\n#ifdef EXIF_DEBUG\n\t\t\tphp_error_docref(NULL TSRMLS_CC, E_NOTICE, \"Found value of type single\");\n#endif\n\t\t\treturn (size_t)*(float *)value;\n\t\tcase TAG_FMT_DOUBLE:\n#ifdef EXIF_DEBUG\n\t\t\tphp_error_docref(NULL TSRMLS_CC, E_NOTICE, \"Found value of type double\");\n#endif\n\t\t\treturn (size_t)*(double *)value;\n\t}\n\treturn 0;\n}",
    "abstract_func_before": "static size_t exif_convert_any_to_int(void *VAR_0, int VAR_1, int VAR_2 TSRMLS_DC)\n{\n\tint \t\tVAR_3;\n\tunsigned \tVAR_4;\n\n\tswitch(VAR_1) {\n\t\tcase VAR_5:     return *(signed char *)VAR_0;\n\t\tcase VAR_6:      return *(uchar *)VAR_0;\n\n\t\tcase VAR_7:    return php_ifd_get16u(VAR_0, VAR_2);\n\t\tcase VAR_8:     return php_ifd_get32u(VAR_0, VAR_2);\n\n\t\tcase VAR_9:\n\t\t\tVAR_4 = php_ifd_get32u(4+(char *)VAR_0, VAR_2);\n\t\t\tif (VAR_4 == 0) {\n\t\t\t\treturn 0;\n\t\t\t} else {\n\t\t\t\treturn php_ifd_get32u(VAR_0, VAR_2) / VAR_4;\n\t\t\t}\n\n\t\tcase VAR_10:\n\t\t\tVAR_3 = php_ifd_get32s(4+(char *)VAR_0, VAR_2);\n\t\t\tif (VAR_3 == 0) {\n\t\t\t\treturn 0;\n\t\t\t} else {\n\t\t\t\treturn php_ifd_get32s(VAR_0, VAR_2) / VAR_3;\n\t\t\t}\n\n\t\tcase VAR_11:    return php_ifd_get16u(VAR_0, VAR_2);\n\t\tcase VAR_12:     return php_ifd_get32s(VAR_0, VAR_2);\n\n\t\t/* COMMENT_0 */\n\t\tcase VAR_13:\n#ifdef VAR_14\n\t\t\tVAR_15(NULL VAR_16, VAR_17, \"Found value of type single\");\n#endif\n\t\t\treturn (size_t)*(float *)VAR_0;\n\t\tcase VAR_18:\n#ifdef VAR_14\n\t\t\tVAR_15(NULL VAR_16, VAR_17, \"Found value of type double\");\n#endif\n\t\t\treturn (size_t)*(double *)VAR_0;\n\t}\n\treturn 0;\n}",
    "func_graph_path_before": null,
    "func": "static size_t exif_convert_any_to_int(void *value, int format, int motorola_intel TSRMLS_DC)\n{\n\tint \t\ts_den;\n\tunsigned \tu_den;\n\n\tswitch(format) {\n\t\tcase TAG_FMT_SBYTE:     return *(signed char *)value;\n\t\tcase TAG_FMT_BYTE:      return *(uchar *)value;\n\n\t\tcase TAG_FMT_USHORT:    return php_ifd_get16u(value, motorola_intel);\n\t\tcase TAG_FMT_ULONG:     return php_ifd_get32u(value, motorola_intel);\n\n\t\tcase TAG_FMT_URATIONAL:\n\t\t\tu_den = php_ifd_get32u(4+(char *)value, motorola_intel);\n\t\t\tif (u_den == 0) {\n\t\t\t\treturn 0;\n\t\t\t} else {\n\t\t\t\treturn php_ifd_get32u(value, motorola_intel) / u_den;\n\t\t\t}\n\n\t\tcase TAG_FMT_SRATIONAL:\n\t\t\ts_den = php_ifd_get32s(4+(char *)value, motorola_intel);\n\t\t\tif (s_den == 0) {\n\t\t\t\treturn 0;\n\t\t\t} else {\n\t\t\t\treturn (size_t)((double)php_ifd_get32s(value, motorola_intel) / s_den);\n\t\t\t}\n\n\t\tcase TAG_FMT_SSHORT:    return php_ifd_get16u(value, motorola_intel);\n\t\tcase TAG_FMT_SLONG:     return php_ifd_get32s(value, motorola_intel);\n\n\t\t/* Not sure if this is correct (never seen float used in Exif format) */\n\t\tcase TAG_FMT_SINGLE:\n#ifdef EXIF_DEBUG\n\t\t\tphp_error_docref(NULL TSRMLS_CC, E_NOTICE, \"Found value of type single\");\n#endif\n\t\t\treturn (size_t)*(float *)value;\n\t\tcase TAG_FMT_DOUBLE:\n#ifdef EXIF_DEBUG\n\t\t\tphp_error_docref(NULL TSRMLS_CC, E_NOTICE, \"Found value of type double\");\n#endif\n\t\t\treturn (size_t)*(double *)value;\n\t}\n\treturn 0;\n}",
    "abstract_func": "static size_t exif_convert_any_to_int(void *VAR_0, int VAR_1, int VAR_2 TSRMLS_DC)\n{\n\tint \t\tVAR_3;\n\tunsigned \tVAR_4;\n\n\tswitch(VAR_1) {\n\t\tcase VAR_5:     return *(signed char *)VAR_0;\n\t\tcase VAR_6:      return *(uchar *)VAR_0;\n\n\t\tcase VAR_7:    return php_ifd_get16u(VAR_0, VAR_2);\n\t\tcase VAR_8:     return php_ifd_get32u(VAR_0, VAR_2);\n\n\t\tcase VAR_9:\n\t\t\tVAR_4 = php_ifd_get32u(4+(char *)VAR_0, VAR_2);\n\t\t\tif (VAR_4 == 0) {\n\t\t\t\treturn 0;\n\t\t\t} else {\n\t\t\t\treturn php_ifd_get32u(VAR_0, VAR_2) / VAR_4;\n\t\t\t}\n\n\t\tcase VAR_10:\n\t\t\tVAR_3 = php_ifd_get32s(4+(char *)VAR_0, VAR_2);\n\t\t\tif (VAR_3 == 0) {\n\t\t\t\treturn 0;\n\t\t\t} else {\n\t\t\t\treturn (size_t)((double)php_ifd_get32s(VAR_0, VAR_2) / VAR_3);\n\t\t\t}\n\n\t\tcase VAR_11:    return php_ifd_get16u(VAR_0, VAR_2);\n\t\tcase VAR_12:     return php_ifd_get32s(VAR_0, VAR_2);\n\n\t\t/* COMMENT_0 */\n\t\tcase VAR_13:\n#ifdef VAR_14\n\t\t\tVAR_15(NULL VAR_16, VAR_17, \"Found value of type single\");\n#endif\n\t\t\treturn (size_t)*(float *)VAR_0;\n\t\tcase VAR_18:\n#ifdef VAR_14\n\t\t\tVAR_15(NULL VAR_16, VAR_17, \"Found value of type double\");\n#endif\n\t\t\treturn (size_t)*(double *)VAR_0;\n\t}\n\treturn 0;\n}",
    "func_graph_path": null,
    "diff_func": "--- func_before\n+++ func_after\n@@ -23,7 +23,7 @@\n \t\t\tif (s_den == 0) {\n \t\t\t\treturn 0;\n \t\t\t} else {\n-\t\t\t\treturn php_ifd_get32s(value, motorola_intel) / s_den;\n+\t\t\t\treturn (size_t)((double)php_ifd_get32s(value, motorola_intel) / s_den);\n \t\t\t}\n \n \t\tcase TAG_FMT_SSHORT:    return php_ifd_get16u(value, motorola_intel);",
    "diff_line_info": {
        "deleted_lines": [
            "\t\t\t\treturn php_ifd_get32s(value, motorola_intel) / s_den;"
        ],
        "added_lines": [
            "\t\t\t\treturn (size_t)((double)php_ifd_get32s(value, motorola_intel) / s_den);"
        ]
    },
    "is_vul": true,
    "pr_url": null,
    "description": "no more info"
}