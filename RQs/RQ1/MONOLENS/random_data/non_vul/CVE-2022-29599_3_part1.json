{
    "cve_id": "CVE-2022-29599",
    "cwe_ids": [
        "CWE-116"
    ],
    "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:P/A:P",
    "cvss_is_v3": false,
    "repo_name": "apache/maven-shared-utils",
    "commit_msg": "[MSHARED-297] - Minor code cleanup",
    "commit_hash": "bb6b6a4bf44cc09f120068bd29fed3e9ab10eb6f",
    "git_url": "https://github.com/apache/maven-shared-utils/commit/bb6b6a4bf44cc09f120068bd29fed3e9ab10eb6f",
    "file_path": "src/main/java/org/apache/maven/shared/utils/cli/shell/Shell.java",
    "func_name": "getRawCommandLine",
    "func_before": "List<String> getRawCommandLine( String executableParameter, String... argumentsParameter )\n    {\n        List<String> commandLine = new ArrayList<String>();\n        StringBuilder sb = new StringBuilder();\n\n        if ( executableParameter != null )\n        {\n            String preamble = getExecutionPreamble();\n            if ( preamble != null )\n            {\n                sb.append( preamble );\n            }\n\n            if ( isQuotedExecutableEnabled() )\n            {\n                sb.append( quoteOneItem( executableParameter, true ) );\n            }\n            else\n            {\n                sb.append( executableParameter );\n            }\n        }\n        for ( String argument : argumentsParameter )\n        {\n            if ( sb.length() > 0 )\n            {\n                sb.append( ' ' );\n            }\n\n            if ( isQuotedArgumentsEnabled() )\n            {\n                sb.append( quoteOneItem( argument, false ) );\n            }\n            else\n            {\n                sb.append( argument );\n            }\n        }\n\n        commandLine.add( sb.toString() );\n\n        return commandLine;\n    }",
    "abstract_func_before": "List<String> getRawCommandLine( String VAR_0, String... VAR_1 )\n    {\n        List<String> VAR_2 = new ArrayList<String>();\n        StringBuilder VAR_3 = new StringBuilder();\n\n        if ( VAR_0 != null )\n        {\n            String VAR_4 = getExecutionPreamble();\n            if ( VAR_4 != null )\n            {\n                VAR_3.append( VAR_4 );\n            }\n\n            if ( isQuotedExecutableEnabled() )\n            {\n                VAR_3.append( quoteOneItem( VAR_0, true ) );\n            }\n            else\n            {\n                VAR_3.append( VAR_0 );\n            }\n        }\n        for ( String VAR_5 : VAR_1 )\n        {\n            if ( VAR_3.length() > 0 )\n            {\n                VAR_3.append( ' ' );\n            }\n\n            if ( isQuotedArgumentsEnabled() )\n            {\n                VAR_3.append( quoteOneItem( VAR_5, false ) );\n            }\n            else\n            {\n                VAR_3.append( VAR_5 );\n            }\n        }\n\n        VAR_2.add( VAR_3.toString() );\n\n        return VAR_2;\n    }",
    "func_graph_path_before": "apache/maven-shared-utils/bb6b6a4bf44cc09f120068bd29fed3e9ab10eb6f/Shell.java/vul/before/0.json",
    "func": "List<String> getRawCommandLine( String executableParameter, String... argumentsParameter )\n    {\n        List<String> commandLine = new ArrayList<>();\n        StringBuilder sb = new StringBuilder();\n\n        if ( executableParameter != null )\n        {\n            String preamble = getExecutionPreamble();\n            if ( preamble != null )\n            {\n                sb.append( preamble );\n            }\n\n            if ( isQuotedExecutableEnabled() )\n            {\n                sb.append( quoteOneItem( executableParameter, true ) );\n            }\n            else\n            {\n                sb.append( executableParameter );\n            }\n        }\n        for ( String argument : argumentsParameter )\n        {\n            if ( sb.length() > 0 )\n            {\n                sb.append( ' ' );\n            }\n\n            if ( isQuotedArgumentsEnabled() )\n            {\n                sb.append( quoteOneItem( argument, false ) );\n            }\n            else\n            {\n                sb.append( argument );\n            }\n        }\n\n        commandLine.add( sb.toString() );\n\n        return commandLine;\n    }",
    "abstract_func": "List<String> getRawCommandLine( String VAR_0, String... VAR_1 )\n    {\n        List<String> VAR_2 = new ArrayList<>();\n        StringBuilder VAR_3 = new StringBuilder();\n\n        if ( VAR_0 != null )\n        {\n            String VAR_4 = getExecutionPreamble();\n            if ( VAR_4 != null )\n            {\n                VAR_3.append( VAR_4 );\n            }\n\n            if ( isQuotedExecutableEnabled() )\n            {\n                VAR_3.append( quoteOneItem( VAR_0, true ) );\n            }\n            else\n            {\n                VAR_3.append( VAR_0 );\n            }\n        }\n        for ( String VAR_5 : VAR_1 )\n        {\n            if ( VAR_3.length() > 0 )\n            {\n                VAR_3.append( ' ' );\n            }\n\n            if ( isQuotedArgumentsEnabled() )\n            {\n                VAR_3.append( quoteOneItem( VAR_5, false ) );\n            }\n            else\n            {\n                VAR_3.append( VAR_5 );\n            }\n        }\n\n        VAR_2.add( VAR_3.toString() );\n\n        return VAR_2;\n    }",
    "func_graph_path": "apache/maven-shared-utils/bb6b6a4bf44cc09f120068bd29fed3e9ab10eb6f/Shell.java/vul/after/0.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -1,6 +1,6 @@\n List<String> getRawCommandLine( String executableParameter, String... argumentsParameter )\n     {\n-        List<String> commandLine = new ArrayList<String>();\n+        List<String> commandLine = new ArrayList<>();\n         StringBuilder sb = new StringBuilder();\n \n         if ( executableParameter != null )",
    "diff_line_info": {
        "deleted_lines": [
            "        List<String> commandLine = new ArrayList<String>();"
        ],
        "added_lines": [
            "        List<String> commandLine = new ArrayList<>();"
        ]
    },
    "is_vul": true,
    "pr_url": null,
    "description": "no more info"
}