{
    "cve_id": "CVE-2020-16303",
    "cwe_ids": [
        "CWE-416"
    ],
    "cvss_vector": "AV:N/AC:M/Au:N/C:P/I:P/A:P",
    "cvss_is_v3": false,
    "repo_name": "ArtifexSoftware/ghostpdl",
    "commit_msg": "Bug 701818: better handling of error during PS/PDF image\n\nIn the xps device, if an error occurred after xps_begin_image() but before\nxps_image_end_image(), *if* the Postscript had called 'restore' as part of the\nerror handling, the image enumerator would have been freed (by the restore)\ndespite the xps device still holding a reference to it.\n\nSimply changing to an allocator unaffected save/restore doesn't work because\nthe enumerator holds references to other objects (graphics state, color space,\npossibly others) whose lifespans are inherently controlled by save/restore.\n\nSo, add a finalize method for the XPS device's image enumerator\n(xps_image_enum_finalize()) which takes over cleaning up the memory it allocates\nand also deals with cleaning up references from the device to the enumerator\nand from the enumerator to the device.",
    "commit_hash": "94d8955cb77",
    "git_url": "https://github.com/ArtifexSoftware/ghostpdl/commit/94d8955cb7725eb5f3557ddc02310c76124fdd1a",
    "file_path": "devices/vector/gdevxps.c",
    "func_name": "xps_image_end_image",
    "func_before": "static int\nxps_image_end_image(gx_image_enum_common_t * info, bool draw_last)\n{\n    xps_image_enum_t *pie = (xps_image_enum_t *)info;\n    int code = 0;\n\n    /* N.B. Write the final strip, if any. */\n\n    code = TIFFWriteDirectory(pie->tif);\n    TIFFCleanup(pie->tif);\n\n    /* Stuff the image into the zip archive and close the file */\n    code = xps_add_tiff_image(pie);\n    if (code < 0)\n        goto exit;\n\n    /* Reset the brush type to solid */\n    xps_setstrokebrush((gx_device_xps *) (pie->dev), xps_solidbrush);\n    xps_setfillbrush((gx_device_xps *) (pie->dev), xps_solidbrush);\n\n    /* Add the image relationship */\n    code = xps_add_image_relationship(pie);\n\nexit:\n    if (pie->pcs != NULL)\n        rc_decrement(pie->pcs, \"xps_image_end_image (pcs)\");\n    if (pie->buffer != NULL)\n        gs_free_object(pie->memory, pie->buffer, \"xps_image_end_image\");\n    if (pie->devc_buffer != NULL)\n        gs_free_object(pie->memory, pie->devc_buffer, \"xps_image_end_image\");\n\n    /* ICC clean up */\n    if (pie->icc_link != NULL)\n        gsicc_release_link(pie->icc_link);\n\n    return code;\n}",
    "abstract_func_before": "static int\nxps_image_end_image(gx_image_enum_common_t * VAR_0, bool VAR_1)\n{\n    xps_image_enum_t *VAR_2 = (xps_image_enum_t *)VAR_0;\n    int VAR_3 = 0;\n\n    /* COMMENT_0 */\n\n    VAR_3 = TIFFWriteDirectory(VAR_2->tif);\n    TIFFCleanup(VAR_2->tif);\n\n    /* COMMENT_1 */\n    VAR_3 = xps_add_tiff_image(VAR_2);\n    if (VAR_3 < 0)\n        goto exit;\n\n    /* COMMENT_2 */\n    xps_setstrokebrush((gx_device_xps *) (VAR_2->dev), VAR_4);\n    xps_setfillbrush((gx_device_xps *) (VAR_2->dev), VAR_4);\n\n    /* COMMENT_3 */\n    VAR_3 = xps_add_image_relationship(VAR_2);\n\nexit:\n    if (VAR_2->pcs != NULL)\n        rc_decrement(VAR_2->pcs, \"xps_image_end_image (pcs)\");\n    if (VAR_2->buffer != NULL)\n        gs_free_object(VAR_2->memory, VAR_2->buffer, \"xps_image_end_image\");\n    if (VAR_2->devc_buffer != NULL)\n        gs_free_object(VAR_2->memory, VAR_2->devc_buffer, \"xps_image_end_image\");\n\n    /* COMMENT_4 */\n    if (VAR_2->icc_link != NULL)\n        gsicc_release_link(VAR_2->icc_link);\n\n    return VAR_3;\n}",
    "func_graph_path_before": "ArtifexSoftware/ghostpdl/94d8955cb77/gdevxps.c/vul/before/1.json",
    "func": "static int\nxps_image_end_image(gx_image_enum_common_t * info, bool draw_last)\n{\n    xps_image_enum_t *pie = (xps_image_enum_t *)info;\n    int code = 0;\n\n    /* N.B. Write the final strip, if any. */\n\n    code = TIFFWriteDirectory(pie->tif);\n    TIFFCleanup(pie->tif);\n\n    /* Stuff the image into the zip archive and close the file */\n    code = xps_add_tiff_image(pie);\n    if (code < 0)\n        goto exit;\n\n    /* Reset the brush type to solid */\n    xps_setstrokebrush((gx_device_xps *) (pie->dev), xps_solidbrush);\n    xps_setfillbrush((gx_device_xps *) (pie->dev), xps_solidbrush);\n\n    /* Add the image relationship */\n    code = xps_add_image_relationship(pie);\n\nexit:\n    return code;\n}",
    "abstract_func": "static int\nxps_image_end_image(gx_image_enum_common_t * VAR_0, bool VAR_1)\n{\n    xps_image_enum_t *VAR_2 = (xps_image_enum_t *)VAR_0;\n    int VAR_3 = 0;\n\n    /* COMMENT_0 */\n\n    VAR_3 = TIFFWriteDirectory(VAR_2->tif);\n    TIFFCleanup(VAR_2->tif);\n\n    /* COMMENT_1 */\n    VAR_3 = xps_add_tiff_image(VAR_2);\n    if (VAR_3 < 0)\n        goto exit;\n\n    /* COMMENT_2 */\n    xps_setstrokebrush((gx_device_xps *) (VAR_2->dev), VAR_4);\n    xps_setfillbrush((gx_device_xps *) (VAR_2->dev), VAR_4);\n\n    /* COMMENT_3 */\n    VAR_3 = xps_add_image_relationship(VAR_2);\n\nexit:\n    return VAR_3;\n}",
    "func_graph_path": "ArtifexSoftware/ghostpdl/94d8955cb77/gdevxps.c/vul/after/1.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -22,16 +22,5 @@\n     code = xps_add_image_relationship(pie);\n \n exit:\n-    if (pie->pcs != NULL)\n-        rc_decrement(pie->pcs, \"xps_image_end_image (pcs)\");\n-    if (pie->buffer != NULL)\n-        gs_free_object(pie->memory, pie->buffer, \"xps_image_end_image\");\n-    if (pie->devc_buffer != NULL)\n-        gs_free_object(pie->memory, pie->devc_buffer, \"xps_image_end_image\");\n-\n-    /* ICC clean up */\n-    if (pie->icc_link != NULL)\n-        gsicc_release_link(pie->icc_link);\n-\n     return code;\n }",
    "diff_line_info": {
        "deleted_lines": [
            "    if (pie->pcs != NULL)",
            "        rc_decrement(pie->pcs, \"xps_image_end_image (pcs)\");",
            "    if (pie->buffer != NULL)",
            "        gs_free_object(pie->memory, pie->buffer, \"xps_image_end_image\");",
            "    if (pie->devc_buffer != NULL)",
            "        gs_free_object(pie->memory, pie->devc_buffer, \"xps_image_end_image\");",
            "",
            "    /* ICC clean up */",
            "    if (pie->icc_link != NULL)",
            "        gsicc_release_link(pie->icc_link);",
            ""
        ],
        "added_lines": []
    },
    "is_vul": true,
    "pr_url": null,
    "description": "no more info"
}