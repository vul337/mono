{
    "cve_id": "CVE-2022-0322",
    "cwe_ids": [
        "CWE-704"
    ],
    "cvss_vector": "AV:L/AC:L/Au:N/C:N/I:N/A:P",
    "cvss_is_v3": false,
    "repo_name": "torvalds/linux",
    "commit_msg": "sctp_make_strreset_req() makes repeated calls to sctp_addto_chunk()\nwhich will automatically account for padding on each call. inreq and\noutreq are already 4 bytes aligned, but the payload is not and doing\nSCTP_PAD4(a + b) (which _sctp_make_chunk() did implicitly here) is\ndifferent from SCTP_PAD4(a) + SCTP_PAD4(b) and not enough. It led to\npossible attempt to use more buffer than it was allocated and triggered\na BUG_ON.\n\nCc: Vlad Yasevich <vyasevich@gmail.com>\nCc: Neil Horman <nhorman@tuxdriver.com>\nCc: Greg KH <gregkh@linuxfoundation.org>\nFixes: cc16f00f6529 (\"sctp: add support for generating stream reconf ssn reset request chunk\")\nReported-by: Eiichi Tsukata <eiichi.tsukata@nutanix.com>\nSigned-off-by: Eiichi Tsukata <eiichi.tsukata@nutanix.com>\nSigned-off-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>\nSigned-off-by: Marcelo Ricardo Leitner <mleitner@redhat.com>\nReviewed-by: Xin Long <lucien.xin@gmail.com>\nLink: https://lore.kernel.org/r/b97c1f8b0c7ff79ac4ed206fc2c49d3612e0850c.1634156849.git.mleitner@redhat.com\nSigned-off-by: Jakub Kicinski <kuba@kernel.org>\n",
    "commit_hash": "a2d859e3fc97e79d907761550dbc03ff1b36479c",
    "git_url": "https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?h=a2d859e3fc97e79d907761550dbc03ff1b36479c",
    "file_path": "net/sctp/sm_make_chunk.c",
    "func_name": "sctp_make_strreset_req",
    "func_before": "struct sctp_chunk *sctp_make_strreset_req(\n\t\t\t\t\tconst struct sctp_association *asoc,\n\t\t\t\t\t__u16 stream_num, __be16 *stream_list,\n\t\t\t\t\tbool out, bool in)\n{\n\t__u16 stream_len = stream_num * sizeof(__u16);\n\tstruct sctp_strreset_outreq outreq;\n\tstruct sctp_strreset_inreq inreq;\n\tstruct sctp_chunk *retval;\n\t__u16 outlen, inlen;\n\n\toutlen = (sizeof(outreq) + stream_len) * out;\n\tinlen = (sizeof(inreq) + stream_len) * in;\n\n\tretval = sctp_make_reconf(asoc, outlen + inlen);\n\tif (!retval)\n\t\treturn NULL;\n\n\tif (outlen) {\n\t\toutreq.param_hdr.type = SCTP_PARAM_RESET_OUT_REQUEST;\n\t\toutreq.param_hdr.length = htons(outlen);\n\t\toutreq.request_seq = htonl(asoc->strreset_outseq);\n\t\toutreq.response_seq = htonl(asoc->strreset_inseq - 1);\n\t\toutreq.send_reset_at_tsn = htonl(asoc->next_tsn - 1);\n\n\t\tsctp_addto_chunk(retval, sizeof(outreq), &outreq);\n\n\t\tif (stream_len)\n\t\t\tsctp_addto_chunk(retval, stream_len, stream_list);\n\t}\n\n\tif (inlen) {\n\t\tinreq.param_hdr.type = SCTP_PARAM_RESET_IN_REQUEST;\n\t\tinreq.param_hdr.length = htons(inlen);\n\t\tinreq.request_seq = htonl(asoc->strreset_outseq + out);\n\n\t\tsctp_addto_chunk(retval, sizeof(inreq), &inreq);\n\n\t\tif (stream_len)\n\t\t\tsctp_addto_chunk(retval, stream_len, stream_list);\n\t}\n\n\treturn retval;\n}",
    "abstract_func_before": "struct sctp_chunk *sctp_make_strreset_req(\n\t\t\t\t\tconst struct sctp_association *VAR_0,\n\t\t\t\t\t__u16 VAR_1, __be16 *stream_list,\n\t\t\t\t\tbool VAR_2, bool VAR_3)\n{\n\t__u16 VAR_4 = VAR_1 * sizeof(__u16);\n\tstruct sctp_strreset_outreq VAR_5;\n\tstruct sctp_strreset_inreq VAR_6;\n\tstruct sctp_chunk *VAR_7;\n\t__u16 VAR_8, VAR_9;\n\n\tVAR_8 = (sizeof(VAR_5) + VAR_4) * VAR_2;\n\tVAR_9 = (sizeof(VAR_6) + VAR_4) * VAR_3;\n\n\tVAR_7 = sctp_make_reconf(VAR_0, VAR_8 + VAR_9);\n\tif (!VAR_7)\n\t\treturn NULL;\n\n\tif (VAR_8) {\n\t\tVAR_5.param_hdr.type = VAR_10;\n\t\tVAR_5.param_hdr.length = htons(VAR_8);\n\t\tVAR_5.request_seq = htonl(VAR_0->strreset_outseq);\n\t\tVAR_5.response_seq = htonl(VAR_0->strreset_inseq - 1);\n\t\tVAR_5.send_reset_at_tsn = htonl(VAR_0->next_tsn - 1);\n\n\t\tsctp_addto_chunk(VAR_7, sizeof(VAR_5), &VAR_5);\n\n\t\tif (VAR_4)\n\t\t\tsctp_addto_chunk(VAR_7, VAR_4, stream_list);\n\t}\n\n\tif (VAR_9) {\n\t\tVAR_6.param_hdr.type = VAR_11;\n\t\tVAR_6.param_hdr.length = htons(VAR_9);\n\t\tVAR_6.request_seq = htonl(VAR_0->strreset_outseq + VAR_2);\n\n\t\tsctp_addto_chunk(VAR_7, sizeof(VAR_6), &VAR_6);\n\n\t\tif (VAR_4)\n\t\t\tsctp_addto_chunk(VAR_7, VAR_4, stream_list);\n\t}\n\n\treturn VAR_7;\n}",
    "func_graph_path_before": "torvalds/linux/a2d859e3fc97e79d907761550dbc03ff1b36479c/sm_make_chunk.c/vul/before/0.json",
    "func": "struct sctp_chunk *sctp_make_strreset_req(\n\t\t\t\t\tconst struct sctp_association *asoc,\n\t\t\t\t\t__u16 stream_num, __be16 *stream_list,\n\t\t\t\t\tbool out, bool in)\n{\n\t__u16 stream_len = stream_num * sizeof(__u16);\n\tstruct sctp_strreset_outreq outreq;\n\tstruct sctp_strreset_inreq inreq;\n\tstruct sctp_chunk *retval;\n\t__u16 outlen, inlen;\n\n\toutlen = (sizeof(outreq) + stream_len) * out;\n\tinlen = (sizeof(inreq) + stream_len) * in;\n\n\tretval = sctp_make_reconf(asoc, SCTP_PAD4(outlen) + SCTP_PAD4(inlen));\n\tif (!retval)\n\t\treturn NULL;\n\n\tif (outlen) {\n\t\toutreq.param_hdr.type = SCTP_PARAM_RESET_OUT_REQUEST;\n\t\toutreq.param_hdr.length = htons(outlen);\n\t\toutreq.request_seq = htonl(asoc->strreset_outseq);\n\t\toutreq.response_seq = htonl(asoc->strreset_inseq - 1);\n\t\toutreq.send_reset_at_tsn = htonl(asoc->next_tsn - 1);\n\n\t\tsctp_addto_chunk(retval, sizeof(outreq), &outreq);\n\n\t\tif (stream_len)\n\t\t\tsctp_addto_chunk(retval, stream_len, stream_list);\n\t}\n\n\tif (inlen) {\n\t\tinreq.param_hdr.type = SCTP_PARAM_RESET_IN_REQUEST;\n\t\tinreq.param_hdr.length = htons(inlen);\n\t\tinreq.request_seq = htonl(asoc->strreset_outseq + out);\n\n\t\tsctp_addto_chunk(retval, sizeof(inreq), &inreq);\n\n\t\tif (stream_len)\n\t\t\tsctp_addto_chunk(retval, stream_len, stream_list);\n\t}\n\n\treturn retval;\n}",
    "abstract_func": "struct sctp_chunk *sctp_make_strreset_req(\n\t\t\t\t\tconst struct sctp_association *VAR_0,\n\t\t\t\t\t__u16 VAR_1, __be16 *stream_list,\n\t\t\t\t\tbool VAR_2, bool VAR_3)\n{\n\t__u16 VAR_4 = VAR_1 * sizeof(__u16);\n\tstruct sctp_strreset_outreq VAR_5;\n\tstruct sctp_strreset_inreq VAR_6;\n\tstruct sctp_chunk *VAR_7;\n\t__u16 VAR_8, VAR_9;\n\n\tVAR_8 = (sizeof(VAR_5) + VAR_4) * VAR_2;\n\tVAR_9 = (sizeof(VAR_6) + VAR_4) * VAR_3;\n\n\tVAR_7 = sctp_make_reconf(VAR_0, SCTP_PAD4(VAR_8) + SCTP_PAD4(VAR_9));\n\tif (!VAR_7)\n\t\treturn NULL;\n\n\tif (VAR_8) {\n\t\tVAR_5.param_hdr.type = VAR_10;\n\t\tVAR_5.param_hdr.length = htons(VAR_8);\n\t\tVAR_5.request_seq = htonl(VAR_0->strreset_outseq);\n\t\tVAR_5.response_seq = htonl(VAR_0->strreset_inseq - 1);\n\t\tVAR_5.send_reset_at_tsn = htonl(VAR_0->next_tsn - 1);\n\n\t\tsctp_addto_chunk(VAR_7, sizeof(VAR_5), &VAR_5);\n\n\t\tif (VAR_4)\n\t\t\tsctp_addto_chunk(VAR_7, VAR_4, stream_list);\n\t}\n\n\tif (VAR_9) {\n\t\tVAR_6.param_hdr.type = VAR_11;\n\t\tVAR_6.param_hdr.length = htons(VAR_9);\n\t\tVAR_6.request_seq = htonl(VAR_0->strreset_outseq + VAR_2);\n\n\t\tsctp_addto_chunk(VAR_7, sizeof(VAR_6), &VAR_6);\n\n\t\tif (VAR_4)\n\t\t\tsctp_addto_chunk(VAR_7, VAR_4, stream_list);\n\t}\n\n\treturn VAR_7;\n}",
    "func_graph_path": "torvalds/linux/a2d859e3fc97e79d907761550dbc03ff1b36479c/sm_make_chunk.c/vul/after/0.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -12,7 +12,7 @@\n \toutlen = (sizeof(outreq) + stream_len) * out;\n \tinlen = (sizeof(inreq) + stream_len) * in;\n \n-\tretval = sctp_make_reconf(asoc, outlen + inlen);\n+\tretval = sctp_make_reconf(asoc, SCTP_PAD4(outlen) + SCTP_PAD4(inlen));\n \tif (!retval)\n \t\treturn NULL;\n ",
    "diff_line_info": {
        "deleted_lines": [
            "\tretval = sctp_make_reconf(asoc, outlen + inlen);"
        ],
        "added_lines": [
            "\tretval = sctp_make_reconf(asoc, SCTP_PAD4(outlen) + SCTP_PAD4(inlen));"
        ]
    },
    "is_vul": true,
    "pr_url": null,
    "description": "no more info"
}