{
    "cve_id": "CVE-2018-20190",
    "cwe_ids": [
        "CWE-476"
    ],
    "cvss_vector": "AV:N/AC:M/Au:N/C:N/I:N/A:P",
    "cvss_is_v3": false,
    "repo_name": "sass/libsass",
    "commit_msg": "Error on incomplete `@supports` clause in parser\n\nFixes #2786\n\nSpec added in https://github.com/sass/sass-spec/pull/1370",
    "commit_hash": "98d8d5dadacc3cd07c738b3772f56317a7a306e7",
    "git_url": "https://github.com/sass/libsass/commit/98d8d5dadacc3cd07c738b3772f56317a7a306e7",
    "file_path": "src/parser.cpp",
    "func_name": "Parser::parse_supports_directive",
    "func_before": "Supports_Block_Obj Parser::parse_supports_directive()\n  {\n    Supports_Condition_Obj cond = parse_supports_condition();\n    if (!cond) {\n      css_error(\"Invalid CSS\", \" after \", \": expected @supports condition (e.g. (display: flexbox)), was \", false);\n    }\n    // create the ast node object for the support queries\n    Supports_Block_Obj query = SASS_MEMORY_NEW(Supports_Block, pstate, cond);\n    // additional block is mandatory\n    // parse inner block\n    query->block(parse_block());\n    // return ast node\n    return query;\n  }",
    "abstract_func_before": "Supports_Block_Obj Parser::parse_supports_directive()\n  {\n    Supports_Condition_Obj VAR_0 = parse_supports_condition();\n    if (!VAR_0) {\n      css_error(\"Invalid CSS\", \" after \", \": expected @supports condition (e.g. (display: flexbox)), was \", false);\n    }\n    /* COMMENT_0 */\n    Supports_Block_Obj VAR_1 = SASS_MEMORY_NEW(VAR_2, VAR_3, VAR_0);\n    /* COMMENT_1 */\n    /* COMMENT_2 */\n    VAR_1->block(parse_block());\n    /* COMMENT_3 */\n    return VAR_1;\n  }",
    "func_graph_path_before": "sass/libsass/98d8d5dadacc3cd07c738b3772f56317a7a306e7/parser.cpp/vul/before/2.json",
    "func": "Supports_Block_Obj Parser::parse_supports_directive()\n  {\n    Supports_Condition_Obj cond = parse_supports_condition(/*top_level=*/true);\n    // create the ast node object for the support queries\n    Supports_Block_Obj query = SASS_MEMORY_NEW(Supports_Block, pstate, cond);\n    // additional block is mandatory\n    // parse inner block\n    query->block(parse_block());\n    // return ast node\n    return query;\n  }",
    "abstract_func": "Supports_Block_Obj Parser::parse_supports_directive()\n  {\n    Supports_Condition_Obj VAR_0 = parse_supports_condition(/* COMMENT_0 */true);\n    /* COMMENT_1 */\n    Supports_Block_Obj VAR_1 = SASS_MEMORY_NEW(VAR_2, VAR_3, VAR_0);\n    /* COMMENT_2 */\n    /* COMMENT_3 */\n    VAR_1->block(parse_block());\n    /* COMMENT_4 */\n    return VAR_1;\n  }",
    "func_graph_path": "sass/libsass/98d8d5dadacc3cd07c738b3772f56317a7a306e7/parser.cpp/vul/after/2.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -1,9 +1,6 @@\n Supports_Block_Obj Parser::parse_supports_directive()\n   {\n-    Supports_Condition_Obj cond = parse_supports_condition();\n-    if (!cond) {\n-      css_error(\"Invalid CSS\", \" after \", \": expected @supports condition (e.g. (display: flexbox)), was \", false);\n-    }\n+    Supports_Condition_Obj cond = parse_supports_condition(/*top_level=*/true);\n     // create the ast node object for the support queries\n     Supports_Block_Obj query = SASS_MEMORY_NEW(Supports_Block, pstate, cond);\n     // additional block is mandatory",
    "diff_line_info": {
        "deleted_lines": [
            "    Supports_Condition_Obj cond = parse_supports_condition();",
            "    if (!cond) {",
            "      css_error(\"Invalid CSS\", \" after \", \": expected @supports condition (e.g. (display: flexbox)), was \", false);",
            "    }"
        ],
        "added_lines": [
            "    Supports_Condition_Obj cond = parse_supports_condition(/*top_level=*/true);"
        ]
    },
    "is_vul": true,
    "pr_url": "https://github.com/sass/libsass/pull/2860",
    "description": "Fixes #2786\r\n\r\nhttps://github.com/sass/sass-spec/pull/1370"
}