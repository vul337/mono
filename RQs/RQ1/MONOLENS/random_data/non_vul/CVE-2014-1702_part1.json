{
    "cve_id": "CVE-2014-1702",
    "cwe_ids": [
        "CWE-399"
    ],
    "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:P/A:P",
    "cvss_is_v3": false,
    "repo_name": "chromium",
    "commit_msg": "Ensure that scheduled tasks are executed during db thread shutdown\n\nSince closing the databases on the database thread can schedule\nnew cleanup tasks, we need to postTask the notificatino that we're done.\n\nBUG=333058\nR=michaeln@chromium.org, abarth@chromium.org\n\nReview URL: https://codereview.chromium.org/183093002\n\ngit-svn-id: svn://svn.chromium.org/blink/trunk@168059 bbb929c8-8fbe-4397-9dbb-9b2b20218538",
    "commit_hash": "e6e535be7e2d398058f1292f026e07252b3cd214",
    "git_url": "https://github.com/chromium/chromium/commit/e6e535be7e2d398058f1292f026e07252b3cd214",
    "file_path": "third_party/WebKit/Source/modules/webdatabase/DatabaseThread.cpp",
    "func_name": "DatabaseThread::cleanupDatabaseThread",
    "func_before": "void DatabaseThread::cleanupDatabaseThread()\n{\n    WTF_LOG(StorageAPI, \"Cleaning up DatabaseThread %p\", this);\n\n    // Clean up the list of all pending transactions on this database thread\n    m_transactionCoordinator->shutdown();\n\n    // Close the databases that we ran transactions on. This ensures that if any transactions are still open, they are rolled back and we don't leave the database in an\n    // inconsistent or locked state.\n    if (m_openDatabaseSet.size() > 0) {\n        // As the call to close will modify the original set, we must take a copy to iterate over.\n        DatabaseSet openSetCopy;\n        openSetCopy.swap(m_openDatabaseSet);\n        DatabaseSet::iterator end = openSetCopy.end();\n        for (DatabaseSet::iterator it = openSetCopy.begin(); it != end; ++it)\n            (*it).get()->close();\n    }\n\n    if (m_cleanupSync) // Someone wanted to know when we were done cleaning up.\n        m_cleanupSync->taskCompleted();\n}",
    "abstract_func_before": "void DatabaseThread::cleanupDatabaseThread()\n{\n    WTF_LOG(VAR_0, \"Cleaning up DatabaseThread %p\", this);\n\n    /* COMMENT_0 */\n    VAR_1->shutdown();\n\n    /* COMMENT_1 */\n    /* COMMENT_2 */\n    if (VAR_2.size() > 0) {\n        /* COMMENT_3 */\n        DatabaseSet VAR_3;\n        VAR_3.swap(VAR_2);\n        DatabaseSet::iterator VAR_4 = VAR_3.end();\n        for (DatabaseSet::iterator VAR_5 = VAR_3.begin(); VAR_5 != VAR_4; ++VAR_5)\n            (*VAR_5).get()->close();\n    }\n\n    if (VAR_6) /* COMMENT_4 */\n        VAR_6->taskCompleted();\n}",
    "func_graph_path_before": "chromium/e6e535be7e2d398058f1292f026e07252b3cd214/DatabaseThread.cpp/vul/before/0.json",
    "func": "void DatabaseThread::cleanupDatabaseThread()\n{\n    WTF_LOG(StorageAPI, \"Cleaning up DatabaseThread %p\", this);\n\n    // Clean up the list of all pending transactions on this database thread\n    m_transactionCoordinator->shutdown();\n\n    // Close the databases that we ran transactions on. This ensures that if any transactions are still open, they are rolled back and we don't leave the database in an\n    // inconsistent or locked state.\n    if (m_openDatabaseSet.size() > 0) {\n        // As the call to close will modify the original set, we must take a copy to iterate over.\n        DatabaseSet openSetCopy;\n        openSetCopy.swap(m_openDatabaseSet);\n        DatabaseSet::iterator end = openSetCopy.end();\n        for (DatabaseSet::iterator it = openSetCopy.begin(); it != end; ++it)\n            (*it).get()->close();\n    }\n\n    if (m_cleanupSync) // Someone wanted to know when we were done cleaning up.\n        m_thread->postTask(new Task(WTF::bind(&DatabaseTaskSynchronizer::taskCompleted, m_cleanupSync)));\n}",
    "abstract_func": "void DatabaseThread::cleanupDatabaseThread()\n{\n    WTF_LOG(VAR_0, \"Cleaning up DatabaseThread %p\", this);\n\n    /* COMMENT_0 */\n    VAR_1->shutdown();\n\n    /* COMMENT_1 */\n    /* COMMENT_2 */\n    if (VAR_2.size() > 0) {\n        /* COMMENT_3 */\n        DatabaseSet VAR_3;\n        VAR_3.swap(VAR_2);\n        DatabaseSet::iterator VAR_4 = VAR_3.end();\n        for (DatabaseSet::iterator VAR_5 = VAR_3.begin(); VAR_5 != VAR_4; ++VAR_5)\n            (*VAR_5).get()->close();\n    }\n\n    if (VAR_6) /* COMMENT_4 */\n        VAR_7->postTask(new Task(WTF::bind(&DatabaseTaskSynchronizer::taskCompleted, VAR_6)));\n}",
    "func_graph_path": "chromium/e6e535be7e2d398058f1292f026e07252b3cd214/DatabaseThread.cpp/vul/after/0.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -17,5 +17,5 @@\n     }\n \n     if (m_cleanupSync) // Someone wanted to know when we were done cleaning up.\n-        m_cleanupSync->taskCompleted();\n+        m_thread->postTask(new Task(WTF::bind(&DatabaseTaskSynchronizer::taskCompleted, m_cleanupSync)));\n }",
    "diff_line_info": {
        "deleted_lines": [
            "        m_cleanupSync->taskCompleted();"
        ],
        "added_lines": [
            "        m_thread->postTask(new Task(WTF::bind(&DatabaseTaskSynchronizer::taskCompleted, m_cleanupSync)));"
        ]
    },
    "is_vul": true,
    "pr_url": null,
    "description": "no more info"
}