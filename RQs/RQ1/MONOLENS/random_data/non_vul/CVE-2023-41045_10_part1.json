{
    "cve_id": "CVE-2023-41045",
    "cwe_ids": [
        "CWE-345"
    ],
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
    "cvss_is_v3": true,
    "repo_name": "Graylog2/graylog2-server",
    "commit_msg": "Merge pull request from GHSA-g96c-x7rh-99r3\n\n* Add support for randomizing DNS Lookup source port\n\n* Clarify purpose of lease\n\n* Skip initial refresh\n\nPreviously, the pool was being refreshed immediately upon initialization. Now, the refresh waits until the `poolRefreshSeconds` duration has elapsed.\n\n* Ensure thread safety, skip unused poller refreshes\n\n* Add change log\n\n* Restore location of local flag",
    "commit_hash": "a101f4f12180fd3dfa7d3345188a099877a3c327",
    "git_url": "https://github.com/Graylog2/graylog2-server/commit/a101f4f12180fd3dfa7d3345188a099877a3c327",
    "file_path": "graylog2-server/src/main/java/org/graylog2/lookup/adapters/dnslookup/DnsClient.java",
    "func_name": "start",
    "func_before": "public void start(String dnsServerIps) {\n\n        LOG.debug(\"Attempting to start DNS client\");\n        final List<InetSocketAddress> iNetDnsServerIps = parseServerIpAddresses(dnsServerIps);\n\n        nettyEventLoop = new NioEventLoopGroup();\n\n        final DnsNameResolverBuilder dnsNameResolverBuilder = new DnsNameResolverBuilder(nettyEventLoop.next());\n        dnsNameResolverBuilder.channelType(NioDatagramChannel.class).queryTimeoutMillis(queryTimeout);\n\n        // Specify custom DNS servers if provided. If not, use those specified in local network adapter settings.\n        if (CollectionUtils.isNotEmpty(iNetDnsServerIps)) {\n\n            LOG.debug(\"Attempting to start DNS client with server IPs [{}] on port [{}] with timeout [{}]\",\n                      dnsServerIps, DEFAULT_DNS_PORT, requestTimeout);\n\n            final DnsServerAddressStreamProvider dnsServer = new SequentialDnsServerAddressStreamProvider(iNetDnsServerIps);\n            dnsNameResolverBuilder.nameServerProvider(dnsServer);\n        } else {\n            LOG.debug(\"Attempting to start DNS client with the local network adapter DNS server address on port [{}] with timeout [{}]\",\n                      DEFAULT_DNS_PORT, requestTimeout);\n        }\n\n        resolver = dnsNameResolverBuilder.build();\n\n        LOG.debug(\"DNS client startup successful\");\n    }",
    "abstract_func_before": "public void start(String VAR_0) {\n\n        VAR_1.debug(\"Attempting to start DNS client\");\n        final List<InetSocketAddress> VAR_2 = parseServerIpAddresses(VAR_0);\n\n        VAR_3 = new NioEventLoopGroup();\n\n        final DnsNameResolverBuilder VAR_4 = new DnsNameResolverBuilder(VAR_3.next());\n        VAR_4.channelType(NioDatagramChannel.class).queryTimeoutMillis(VAR_5);\n\n        /* COMMENT_0 */\n        if (VAR_6.isNotEmpty(VAR_2)) {\n\n            VAR_1.debug(\"Attempting to start DNS client with server IPs [{}] on port [{}] with timeout [{}]\",\n                      VAR_0, VAR_7, VAR_8);\n\n            final DnsServerAddressStreamProvider VAR_9 = new SequentialDnsServerAddressStreamProvider(VAR_2);\n            VAR_4.nameServerProvider(VAR_9);\n        } else {\n            VAR_1.debug(\"Attempting to start DNS client with the local network adapter DNS server address on port [{}] with timeout [{}]\",\n                      VAR_7, VAR_8);\n        }\n\n        VAR_10 = VAR_4.build();\n\n        VAR_1.debug(\"DNS client startup successful\");\n    }",
    "func_graph_path_before": "Graylog2/graylog2-server/a101f4f12180fd3dfa7d3345188a099877a3c327/DnsClient.java/vul/before/3.json",
    "func": "public void start(String dnsServerIps) {\n        LOG.debug(\"Attempting to start DNS client\");\n        this.resolverPool = new DnsResolverPool(dnsServerIps, queryTimeout, resolverPoolSize, resolverPoolRefreshSeconds);\n        this.resolverPool.initialize();\n    }",
    "abstract_func": "public void start(String VAR_0) {\n        VAR_1.debug(\"Attempting to start DNS client\");\n        this.resolverPool = new DnsResolverPool(VAR_0, VAR_2, VAR_3, VAR_4);\n        this.resolverPool.initialize();\n    }",
    "func_graph_path": "Graylog2/graylog2-server/a101f4f12180fd3dfa7d3345188a099877a3c327/DnsClient.java/vul/after/3.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -1,27 +1,5 @@\n public void start(String dnsServerIps) {\n-\n         LOG.debug(\"Attempting to start DNS client\");\n-        final List<InetSocketAddress> iNetDnsServerIps = parseServerIpAddresses(dnsServerIps);\n-\n-        nettyEventLoop = new NioEventLoopGroup();\n-\n-        final DnsNameResolverBuilder dnsNameResolverBuilder = new DnsNameResolverBuilder(nettyEventLoop.next());\n-        dnsNameResolverBuilder.channelType(NioDatagramChannel.class).queryTimeoutMillis(queryTimeout);\n-\n-        // Specify custom DNS servers if provided. If not, use those specified in local network adapter settings.\n-        if (CollectionUtils.isNotEmpty(iNetDnsServerIps)) {\n-\n-            LOG.debug(\"Attempting to start DNS client with server IPs [{}] on port [{}] with timeout [{}]\",\n-                      dnsServerIps, DEFAULT_DNS_PORT, requestTimeout);\n-\n-            final DnsServerAddressStreamProvider dnsServer = new SequentialDnsServerAddressStreamProvider(iNetDnsServerIps);\n-            dnsNameResolverBuilder.nameServerProvider(dnsServer);\n-        } else {\n-            LOG.debug(\"Attempting to start DNS client with the local network adapter DNS server address on port [{}] with timeout [{}]\",\n-                      DEFAULT_DNS_PORT, requestTimeout);\n-        }\n-\n-        resolver = dnsNameResolverBuilder.build();\n-\n-        LOG.debug(\"DNS client startup successful\");\n+        this.resolverPool = new DnsResolverPool(dnsServerIps, queryTimeout, resolverPoolSize, resolverPoolRefreshSeconds);\n+        this.resolverPool.initialize();\n     }",
    "diff_line_info": {
        "deleted_lines": [
            "",
            "        final List<InetSocketAddress> iNetDnsServerIps = parseServerIpAddresses(dnsServerIps);",
            "",
            "        nettyEventLoop = new NioEventLoopGroup();",
            "",
            "        final DnsNameResolverBuilder dnsNameResolverBuilder = new DnsNameResolverBuilder(nettyEventLoop.next());",
            "        dnsNameResolverBuilder.channelType(NioDatagramChannel.class).queryTimeoutMillis(queryTimeout);",
            "",
            "        // Specify custom DNS servers if provided. If not, use those specified in local network adapter settings.",
            "        if (CollectionUtils.isNotEmpty(iNetDnsServerIps)) {",
            "",
            "            LOG.debug(\"Attempting to start DNS client with server IPs [{}] on port [{}] with timeout [{}]\",",
            "                      dnsServerIps, DEFAULT_DNS_PORT, requestTimeout);",
            "",
            "            final DnsServerAddressStreamProvider dnsServer = new SequentialDnsServerAddressStreamProvider(iNetDnsServerIps);",
            "            dnsNameResolverBuilder.nameServerProvider(dnsServer);",
            "        } else {",
            "            LOG.debug(\"Attempting to start DNS client with the local network adapter DNS server address on port [{}] with timeout [{}]\",",
            "                      DEFAULT_DNS_PORT, requestTimeout);",
            "        }",
            "",
            "        resolver = dnsNameResolverBuilder.build();",
            "",
            "        LOG.debug(\"DNS client startup successful\");"
        ],
        "added_lines": [
            "        this.resolverPool = new DnsResolverPool(dnsServerIps, queryTimeout, resolverPoolSize, resolverPoolRefreshSeconds);",
            "        this.resolverPool.initialize();"
        ]
    },
    "is_vul": true,
    "pr_url": null,
    "description": "no more info"
}