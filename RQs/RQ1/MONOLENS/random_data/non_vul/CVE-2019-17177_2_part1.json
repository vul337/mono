{
    "cve_id": "CVE-2019-17177",
    "cwe_ids": [
        "CWE-252",
        "CWE-401"
    ],
    "cvss_vector": "AV:N/AC:L/Au:N/C:N/I:N/A:P",
    "cvss_is_v3": false,
    "repo_name": "FreeRDP",
    "commit_msg": "Fixed #5645: realloc return handling",
    "commit_hash": "9fee4ae076b1ec97b97efb79ece08d1dab4df29a",
    "git_url": "https://github.com/FreeRDP/FreeRDP/commit/9fee4ae076b1ec97b97efb79ece08d1dab4df29a",
    "file_path": "winpr/libwinpr/utils/lodepng/lodepng.c",
    "func_name": "HuffmanTree_makeFromFrequencies",
    "func_before": "static unsigned HuffmanTree_makeFromFrequencies(HuffmanTree* tree, const unsigned* frequencies,\n                                                size_t mincodes, size_t numcodes, unsigned maxbitlen)\n{\n  unsigned error = 0;\n  while(!frequencies[numcodes - 1] && numcodes > mincodes) numcodes--; /*trim zeroes*/\n  tree->maxbitlen = maxbitlen;\n  tree->numcodes = (unsigned)numcodes; /*number of symbols*/\n  tree->lengths = (unsigned*)realloc(tree->lengths, numcodes * sizeof(unsigned));\n  if(!tree->lengths) return 83; /*alloc fail*/\n  /*initialize all lengths to 0*/\n  memset(tree->lengths, 0, numcodes * sizeof(unsigned));\n\n  error = lodepng_huffman_code_lengths(tree->lengths, frequencies, numcodes, maxbitlen);\n  if(!error) error = HuffmanTree_makeFromLengths2(tree);\n  return error;\n}",
    "abstract_func_before": "static unsigned HuffmanTree_makeFromFrequencies(HuffmanTree* VAR_0, const unsigned* VAR_1,\n                                                size_t VAR_2, size_t VAR_3, unsigned VAR_4)\n{\n  unsigned VAR_5 = 0;\n  while(!VAR_1[VAR_3 - 1] && VAR_3 > VAR_2) VAR_3--; /* COMMENT_0 */\n  VAR_0->maxbitlen = VAR_4;\n  VAR_0->numcodes = (unsigned)VAR_3; /* COMMENT_1 */\n  VAR_0->lengths = (unsigned*)realloc(VAR_0->lengths, VAR_3 * sizeof(unsigned));\n  if(!VAR_0->lengths) return 83; /* COMMENT_2 */\n  /* COMMENT_3 */\n  memset(VAR_0->lengths, 0, VAR_3 * sizeof(unsigned));\n\n  VAR_5 = lodepng_huffman_code_lengths(VAR_0->lengths, VAR_1, VAR_3, VAR_4);\n  if(!VAR_5) VAR_5 = HuffmanTree_makeFromLengths2(VAR_0);\n  return VAR_5;\n}",
    "func_graph_path_before": "FreeRDP/9fee4ae076b1ec97b97efb79ece08d1dab4df29a/lodepng.c/vul/before/0.json",
    "func": "static unsigned HuffmanTree_makeFromFrequencies(HuffmanTree* tree, const unsigned* frequencies,\n                                                size_t mincodes, size_t numcodes, unsigned maxbitlen)\n{\n\tunsigned* lengths;\n  unsigned error = 0;\n  while(!frequencies[numcodes - 1] && numcodes > mincodes) numcodes--; /*trim zeroes*/\n  tree->maxbitlen = maxbitlen;\n  tree->numcodes = (unsigned)numcodes; /*number of symbols*/\n  lengths = (unsigned*)realloc(tree->lengths, numcodes * sizeof(unsigned));\n\tif (!lengths)\n\t\tfree(tree->lengths);\n\ttree->lengths = lengths;\n  if(!tree->lengths) return 83; /*alloc fail*/\n  /*initialize all lengths to 0*/\n  memset(tree->lengths, 0, numcodes * sizeof(unsigned));\n\n  error = lodepng_huffman_code_lengths(tree->lengths, frequencies, numcodes, maxbitlen);\n  if(!error) error = HuffmanTree_makeFromLengths2(tree);\n  return error;\n}",
    "abstract_func": "static unsigned HuffmanTree_makeFromFrequencies(HuffmanTree* VAR_0, const unsigned* VAR_1,\n                                                size_t VAR_2, size_t VAR_3, unsigned VAR_4)\n{\n\tunsigned* VAR_5;\n  unsigned VAR_6 = 0;\n  while(!VAR_1[VAR_3 - 1] && VAR_3 > VAR_2) VAR_3--; /* COMMENT_0 */\n  VAR_0->maxbitlen = VAR_4;\n  VAR_0->numcodes = (unsigned)VAR_3; /* COMMENT_1 */\n  VAR_5 = (unsigned*)realloc(VAR_0->lengths, VAR_3 * sizeof(unsigned));\n\tif (!VAR_5)\n\t\tfree(VAR_0->lengths);\n\tVAR_0->lengths = VAR_5;\n  if(!VAR_0->lengths) return 83; /* COMMENT_2 */\n  /* COMMENT_3 */\n  memset(VAR_0->lengths, 0, VAR_3 * sizeof(unsigned));\n\n  VAR_6 = lodepng_huffman_code_lengths(VAR_0->lengths, VAR_1, VAR_3, VAR_4);\n  if(!VAR_6) VAR_6 = HuffmanTree_makeFromLengths2(VAR_0);\n  return VAR_6;\n}",
    "func_graph_path": "FreeRDP/9fee4ae076b1ec97b97efb79ece08d1dab4df29a/lodepng.c/vul/after/0.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -1,11 +1,15 @@\n static unsigned HuffmanTree_makeFromFrequencies(HuffmanTree* tree, const unsigned* frequencies,\n                                                 size_t mincodes, size_t numcodes, unsigned maxbitlen)\n {\n+\tunsigned* lengths;\n   unsigned error = 0;\n   while(!frequencies[numcodes - 1] && numcodes > mincodes) numcodes--; /*trim zeroes*/\n   tree->maxbitlen = maxbitlen;\n   tree->numcodes = (unsigned)numcodes; /*number of symbols*/\n-  tree->lengths = (unsigned*)realloc(tree->lengths, numcodes * sizeof(unsigned));\n+  lengths = (unsigned*)realloc(tree->lengths, numcodes * sizeof(unsigned));\n+\tif (!lengths)\n+\t\tfree(tree->lengths);\n+\ttree->lengths = lengths;\n   if(!tree->lengths) return 83; /*alloc fail*/\n   /*initialize all lengths to 0*/\n   memset(tree->lengths, 0, numcodes * sizeof(unsigned));",
    "diff_line_info": {
        "deleted_lines": [
            "  tree->lengths = (unsigned*)realloc(tree->lengths, numcodes * sizeof(unsigned));"
        ],
        "added_lines": [
            "\tunsigned* lengths;",
            "  lengths = (unsigned*)realloc(tree->lengths, numcodes * sizeof(unsigned));",
            "\tif (!lengths)",
            "\t\tfree(tree->lengths);",
            "\ttree->lengths = lengths;"
        ]
    },
    "is_vul": true,
    "pr_url": "https://github.com/FreeRDP/FreeRDP/pull/5646",
    "description": "no more info"
}