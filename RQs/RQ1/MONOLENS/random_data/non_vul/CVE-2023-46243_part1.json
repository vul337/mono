{
    "cve_id": "CVE-2023-46243",
    "cwe_ids": [
        "CWE-94"
    ],
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
    "cvss_is_v3": true,
    "repo_name": "xwiki/xwiki-platform",
    "commit_msg": "XWIKI-20385: Improve author handling in the edit action",
    "commit_hash": "a0e6ca083b36be6f183b9af33ae735c1e02010f4",
    "git_url": "https://github.com/xwiki/xwiki-platform/commit/a0e6ca083b36be6f183b9af33ae735c1e02010f4",
    "file_path": "xwiki-platform-core/xwiki-platform-oldcore/src/main/java/com/xpn/xwiki/web/EditAction.java",
    "func_name": "prepareEditedDocument",
    "func_before": "protected XWikiDocument prepareEditedDocument(XWikiContext context) throws XWikiException\n    {\n        // Determine the edited document (translation).\n        XWikiDocument editedDocument = getEditedDocument(context);\n        EditForm editForm = (EditForm) context.getForm();\n\n        // Update the edited document based on the template specified on the request.\n        readFromTemplate(editedDocument, editForm.getTemplate(), context);\n\n        // The default values from the template can be overwritten by additional request parameters.\n        updateDocumentTitleAndContentFromRequest(editedDocument, context);\n        editedDocument.readAddedUpdatedAndRemovedObjectsFromForm(editForm, context);\n\n        // Set the current user as creator, author and contentAuthor when the edited document is newly created to avoid\n        // using XWikiGuest instead (because those fields were not previously initialized).\n        if (editedDocument.isNew()) {\n            editedDocument.setCreatorReference(context.getUserReference());\n            editedDocument.setAuthorReference(context.getUserReference());\n            editedDocument.setContentAuthorReference(context.getUserReference());\n        }\n        editedDocument.readTemporaryUploadedFiles(editForm);\n\n        // Expose the edited document on the XWiki context and the Velocity context.\n        putDocumentOnContext(editedDocument, context);\n\n        return editedDocument;\n    }",
    "abstract_func_before": "protected XWikiDocument prepareEditedDocument(XWikiContext VAR_0) throws XWikiException\n    {\n        /* COMMENT_0 */\n        XWikiDocument VAR_1 = getEditedDocument(VAR_0);\n        EditForm VAR_2 = (EditForm) VAR_0.getForm();\n\n        /* COMMENT_1 */\n        readFromTemplate(VAR_1, VAR_2.getTemplate(), VAR_0);\n\n        /* COMMENT_2 */\n        updateDocumentTitleAndContentFromRequest(VAR_1, VAR_0);\n        VAR_1.readAddedUpdatedAndRemovedObjectsFromForm(VAR_2, VAR_0);\n\n        /* COMMENT_3 */\n        /* COMMENT_4 */\n        if (VAR_1.isNew()) {\n            VAR_1.setCreatorReference(VAR_0.getUserReference());\n            VAR_1.setAuthorReference(VAR_0.getUserReference());\n            VAR_1.setContentAuthorReference(VAR_0.getUserReference());\n        }\n        VAR_1.readTemporaryUploadedFiles(VAR_2);\n\n        /* COMMENT_5 */\n        putDocumentOnContext(VAR_1, VAR_0);\n\n        return VAR_1;\n    }",
    "func_graph_path_before": "xwiki/xwiki-platform/a0e6ca083b36be6f183b9af33ae735c1e02010f4/EditAction.java/vul/before/0.json",
    "func": "protected XWikiDocument prepareEditedDocument(XWikiContext context) throws XWikiException\n    {\n        // Determine the edited document (translation).\n        XWikiDocument editedDocument = getEditedDocument(context);\n        EditForm editForm = (EditForm) context.getForm();\n\n        // Update the edited document based on the template specified on the request.\n        readFromTemplate(editedDocument, editForm.getTemplate(), context);\n\n        // The default values from the template can be overwritten by additional request parameters.\n        updateDocumentTitleAndContentFromRequest(editedDocument, context);\n        editedDocument.readAddedUpdatedAndRemovedObjectsFromForm(editForm, context);\n\n        // If the metadata is modified, modify the effective metadata author\n        if (editedDocument.isMetaDataDirty()) {\n            UserReference userReference =\n                this.documentReferenceUserReferenceResolver.resolve(context.getUserReference());\n            editedDocument.getAuthors().setEffectiveMetadataAuthor(userReference);\n            editedDocument.getAuthors().setOriginalMetadataAuthor(userReference);\n        }\n\n        // If the content is modified, modify the content author\n        if (editedDocument.isContentDirty()) {\n            UserReference userReference =\n                this.documentReferenceUserReferenceResolver.resolve(context.getUserReference());\n            editedDocument.getAuthors().setContentAuthor(userReference);\n        }\n\n        // Set the current user as creator, author and contentAuthor when the edited document is newly created to avoid\n        // using XWikiGuest instead (because those fields were not previously initialized).\n        if (editedDocument.isNew()) {\n            editedDocument.setCreatorReference(context.getUserReference());\n            editedDocument.setAuthorReference(context.getUserReference());\n            editedDocument.setContentAuthorReference(context.getUserReference());\n        }\n        editedDocument.readTemporaryUploadedFiles(editForm);\n\n        // Expose the edited document on the XWiki context and the Velocity context.\n        putDocumentOnContext(editedDocument, context);\n\n        return editedDocument;\n    }",
    "abstract_func": "protected XWikiDocument prepareEditedDocument(XWikiContext VAR_0) throws XWikiException\n    {\n        /* COMMENT_0 */\n        XWikiDocument VAR_1 = getEditedDocument(VAR_0);\n        EditForm VAR_2 = (EditForm) VAR_0.getForm();\n\n        /* COMMENT_1 */\n        readFromTemplate(VAR_1, VAR_2.getTemplate(), VAR_0);\n\n        /* COMMENT_2 */\n        updateDocumentTitleAndContentFromRequest(VAR_1, VAR_0);\n        VAR_1.readAddedUpdatedAndRemovedObjectsFromForm(VAR_2, VAR_0);\n\n        /* COMMENT_3 */\n        if (VAR_1.isMetaDataDirty()) {\n            UserReference VAR_3 =\n                this.documentReferenceUserReferenceResolver.resolve(VAR_0.getUserReference());\n            VAR_1.getAuthors().setEffectiveMetadataAuthor(VAR_3);\n            VAR_1.getAuthors().setOriginalMetadataAuthor(VAR_3);\n        }\n\n        /* COMMENT_4 */\n        if (VAR_1.isContentDirty()) {\n            UserReference VAR_3 =\n                this.documentReferenceUserReferenceResolver.resolve(VAR_0.getUserReference());\n            VAR_1.getAuthors().setContentAuthor(VAR_3);\n        }\n\n        /* COMMENT_5 */\n        /* COMMENT_6 */\n        if (VAR_1.isNew()) {\n            VAR_1.setCreatorReference(VAR_0.getUserReference());\n            VAR_1.setAuthorReference(VAR_0.getUserReference());\n            VAR_1.setContentAuthorReference(VAR_0.getUserReference());\n        }\n        VAR_1.readTemporaryUploadedFiles(VAR_2);\n\n        /* COMMENT_7 */\n        putDocumentOnContext(VAR_1, VAR_0);\n\n        return VAR_1;\n    }",
    "func_graph_path": "xwiki/xwiki-platform/a0e6ca083b36be6f183b9af33ae735c1e02010f4/EditAction.java/vul/after/0.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -10,6 +10,21 @@\n         // The default values from the template can be overwritten by additional request parameters.\n         updateDocumentTitleAndContentFromRequest(editedDocument, context);\n         editedDocument.readAddedUpdatedAndRemovedObjectsFromForm(editForm, context);\n+\n+        // If the metadata is modified, modify the effective metadata author\n+        if (editedDocument.isMetaDataDirty()) {\n+            UserReference userReference =\n+                this.documentReferenceUserReferenceResolver.resolve(context.getUserReference());\n+            editedDocument.getAuthors().setEffectiveMetadataAuthor(userReference);\n+            editedDocument.getAuthors().setOriginalMetadataAuthor(userReference);\n+        }\n+\n+        // If the content is modified, modify the content author\n+        if (editedDocument.isContentDirty()) {\n+            UserReference userReference =\n+                this.documentReferenceUserReferenceResolver.resolve(context.getUserReference());\n+            editedDocument.getAuthors().setContentAuthor(userReference);\n+        }\n \n         // Set the current user as creator, author and contentAuthor when the edited document is newly created to avoid\n         // using XWikiGuest instead (because those fields were not previously initialized).",
    "diff_line_info": {
        "deleted_lines": [],
        "added_lines": [
            "",
            "        // If the metadata is modified, modify the effective metadata author",
            "        if (editedDocument.isMetaDataDirty()) {",
            "            UserReference userReference =",
            "                this.documentReferenceUserReferenceResolver.resolve(context.getUserReference());",
            "            editedDocument.getAuthors().setEffectiveMetadataAuthor(userReference);",
            "            editedDocument.getAuthors().setOriginalMetadataAuthor(userReference);",
            "        }",
            "",
            "        // If the content is modified, modify the content author",
            "        if (editedDocument.isContentDirty()) {",
            "            UserReference userReference =",
            "                this.documentReferenceUserReferenceResolver.resolve(context.getUserReference());",
            "            editedDocument.getAuthors().setContentAuthor(userReference);",
            "        }"
        ]
    },
    "is_vul": true,
    "pr_url": null,
    "description": "no more info"
}