{
    "cve_id": "CVE-2012-2330",
    "cwe_ids": [
        "CWE-20"
    ],
    "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:P/A:N",
    "cvss_is_v3": false,
    "repo_name": "nodejs/node-v0.x-archive",
    "commit_msg": "typo in node_http_parser",
    "commit_hash": "7b3fb22",
    "git_url": "https://github.com/nodejs/node-v0.x-archive/commit/7b3fb22290c3b6acb497ca85cf2f1648d75c8154",
    "file_path": "src/node_http_parser.cc",
    "func_name": "Update",
    "func_before": "void Update(const char* str, size_t size) {\n    if (str_ == NULL)\n      str_ = str;\n    else if (on_heap_ || str_ + size != str) {\n      // Non-consecutive input, make a copy on the heap.\n      // TODO Use slab allocation, O(n) allocs is bad.\n      char* s = new char[size_ + size];\n      memcpy(s, str_, size_);\n      memcpy(s + size_, str, size);\n\n      if (on_heap_)\n        delete[] str_;\n      else\n        on_heap_ = true;\n\n      str_ = s;\n    }\n    size_ += size;\n  }",
    "abstract_func_before": "void Update(const char* VAR_0, size_t VAR_1) {\n    if (VAR_2 == NULL)\n      VAR_2 = VAR_0;\n    else if (VAR_3 || VAR_2 + VAR_1 != VAR_0) {\n      /* COMMENT_0 */\n      /* COMMENT_1 */\n      char* VAR_4 = new char[VAR_5 + VAR_1];\n      memcpy(VAR_4, VAR_2, VAR_5);\n      memcpy(VAR_4 + VAR_5, VAR_0, VAR_1);\n\n      if (VAR_3)\n        delete[] VAR_2;\n      else\n        VAR_3 = true;\n\n      VAR_2 = VAR_4;\n    }\n    VAR_5 += VAR_1;\n  }",
    "func_graph_path_before": "nodejs/node-v0.x-archive/7b3fb22/node_http_parser.cc/vul/before/0.json",
    "func": "void Update(const char* str, size_t size) {\n    if (str_ == NULL)\n      str_ = str;\n    else if (on_heap_ || str_ + size_ != str) {\n      // Non-consecutive input, make a copy on the heap.\n      // TODO Use slab allocation, O(n) allocs is bad.\n      char* s = new char[size_ + size];\n      memcpy(s, str_, size_);\n      memcpy(s + size_, str, size);\n\n      if (on_heap_)\n        delete[] str_;\n      else\n        on_heap_ = true;\n\n      str_ = s;\n    }\n    size_ += size;\n  }",
    "abstract_func": "void Update(const char* VAR_0, size_t VAR_1) {\n    if (VAR_2 == NULL)\n      VAR_2 = VAR_0;\n    else if (VAR_3 || VAR_2 + VAR_4 != VAR_0) {\n      /* COMMENT_0 */\n      /* COMMENT_1 */\n      char* VAR_5 = new char[VAR_4 + VAR_1];\n      memcpy(VAR_5, VAR_2, VAR_4);\n      memcpy(VAR_5 + VAR_4, VAR_0, VAR_1);\n\n      if (VAR_3)\n        delete[] VAR_2;\n      else\n        VAR_3 = true;\n\n      VAR_2 = VAR_5;\n    }\n    VAR_4 += VAR_1;\n  }",
    "func_graph_path": "nodejs/node-v0.x-archive/7b3fb22/node_http_parser.cc/vul/after/0.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -1,7 +1,7 @@\n void Update(const char* str, size_t size) {\n     if (str_ == NULL)\n       str_ = str;\n-    else if (on_heap_ || str_ + size != str) {\n+    else if (on_heap_ || str_ + size_ != str) {\n       // Non-consecutive input, make a copy on the heap.\n       // TODO Use slab allocation, O(n) allocs is bad.\n       char* s = new char[size_ + size];",
    "diff_line_info": {
        "deleted_lines": [
            "    else if (on_heap_ || str_ + size != str) {"
        ],
        "added_lines": [
            "    else if (on_heap_ || str_ + size_ != str) {"
        ]
    },
    "is_vul": true,
    "pr_url": null,
    "description": "no more info"
}