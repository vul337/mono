{
    "cve_id": "CVE-2012-6615",
    "cwe_ids": [
        "CWE-Other"
    ],
    "cvss_vector": "AV:N/AC:M/Au:N/C:N/I:N/A:P",
    "cvss_is_v3": false,
    "repo_name": "ffmpeg",
    "commit_msg": "\nlavc/ass_split: check for NULL pointer in ff_ass_split_override_codes().\n\nThis is consistent with the other ff_ass_split_* functions.\n\nIt also fixes a crash when trying to split a dialog with text=NULL\n(which seems to happen when the text of the dialog is empty); basically,\nthis commit fixes crashes when trying to encode an empty text subtitle\ndialog (see subrip and mov_text encoders).\n\nFixes Ticket2048.\n(cherry picked from commit c83002a4f8042ccfa0688a9a18e8fa0369c1fda8)\n",
    "commit_hash": "20c121c00747d6c3b0b0f98deeff021171b2ed74",
    "git_url": "http://git.videolan.org/?p=ffmpeg.git;a=commit;h=20c121c00747d6c3b0b0f98deeff021171b2ed74",
    "file_path": "libavcodec/ass_split.c",
    "func_name": "ff_ass_split_override_codes",
    "func_before": "int ff_ass_split_override_codes(const ASSCodesCallbacks *callbacks, void *priv,\n                                const char *buf)\n{\n    const char *text = NULL;\n    char new_line[2];\n    int text_len = 0;\n\n    while (*buf) {\n        if (text && callbacks->text &&\n            (sscanf(buf, \"\\\\%1[nN]\", new_line) == 1 ||\n             !strncmp(buf, \"{\\\\\", 2))) {\n            callbacks->text(priv, text, text_len);\n            text = NULL;\n        }\n        if (sscanf(buf, \"\\\\%1[nN]\", new_line) == 1) {\n            if (callbacks->new_line)\n                callbacks->new_line(priv, new_line[0] == 'N');\n            buf += 2;\n        } else if (!strncmp(buf, \"{\\\\\", 2)) {\n            buf++;\n            while (*buf == '\\\\') {\n                char style[2], c[2], sep[2], c_num[2] = \"0\", tmp[128] = {0};\n                unsigned int color = 0xFFFFFFFF;\n                int len, size = -1, an = -1, alpha = -1;\n                int x1, y1, x2, y2, t1 = -1, t2 = -1;\n                if (sscanf(buf, \"\\\\%1[bisu]%1[01\\\\}]%n\", style, c, &len) > 1) {\n                    int close = c[0] == '0' ? 1 : c[0] == '1' ? 0 : -1;\n                    len += close != -1;\n                    if (callbacks->style)\n                        callbacks->style(priv, style[0], close);\n                } else if (sscanf(buf, \"\\\\c%1[\\\\}]%n\", sep, &len) > 0 ||\n                           sscanf(buf, \"\\\\c&H%X&%1[\\\\}]%n\", &color, sep, &len) > 1 ||\n                           sscanf(buf, \"\\\\%1[1234]c%1[\\\\}]%n\", c_num, sep, &len) > 1 ||\n                           sscanf(buf, \"\\\\%1[1234]c&H%X&%1[\\\\}]%n\", c_num, &color, sep, &len) > 2) {\n                    if (callbacks->color)\n                        callbacks->color(priv, color, c_num[0] - '0');\n                } else if (sscanf(buf, \"\\\\alpha%1[\\\\}]%n\", sep, &len) > 0 ||\n                           sscanf(buf, \"\\\\alpha&H%2X&%1[\\\\}]%n\", &alpha, sep, &len) > 1 ||\n                           sscanf(buf, \"\\\\%1[1234]a%1[\\\\}]%n\", c_num, sep, &len) > 1 ||\n                           sscanf(buf, \"\\\\%1[1234]a&H%2X&%1[\\\\}]%n\", c_num, &alpha, sep, &len) > 2) {\n                    if (callbacks->alpha)\n                        callbacks->alpha(priv, alpha, c_num[0] - '0');\n                } else if (sscanf(buf, \"\\\\fn%1[\\\\}]%n\", sep, &len) > 0 ||\n                           sscanf(buf, \"\\\\fn%127[^\\\\}]%1[\\\\}]%n\", tmp, sep, &len) > 1) {\n                    if (callbacks->font_name)\n                        callbacks->font_name(priv, tmp[0] ? tmp : NULL);\n                } else if (sscanf(buf, \"\\\\fs%1[\\\\}]%n\", sep, &len) > 0 ||\n                           sscanf(buf, \"\\\\fs%u%1[\\\\}]%n\", &size, sep, &len) > 1) {\n                    if (callbacks->font_size)\n                        callbacks->font_size(priv, size);\n                } else if (sscanf(buf, \"\\\\a%1[\\\\}]%n\", sep, &len) > 0 ||\n                           sscanf(buf, \"\\\\a%2u%1[\\\\}]%n\", &an, sep, &len) > 1 ||\n                           sscanf(buf, \"\\\\an%1[\\\\}]%n\", sep, &len) > 0 ||\n                           sscanf(buf, \"\\\\an%1u%1[\\\\}]%n\", &an, sep, &len) > 1) {\n                    if (an != -1 && buf[2] != 'n')\n                        an = (an&3) + (an&4 ? 6 : an&8 ? 3 : 0);\n                    if (callbacks->alignment)\n                        callbacks->alignment(priv, an);\n                } else if (sscanf(buf, \"\\\\r%1[\\\\}]%n\", sep, &len) > 0 ||\n                           sscanf(buf, \"\\\\r%127[^\\\\}]%1[\\\\}]%n\", tmp, sep, &len) > 1) {\n                    if (callbacks->cancel_overrides)\n                        callbacks->cancel_overrides(priv, tmp);\n                } else if (sscanf(buf, \"\\\\move(%d,%d,%d,%d)%1[\\\\}]%n\", &x1, &y1, &x2, &y2, sep, &len) > 4 ||\n                           sscanf(buf, \"\\\\move(%d,%d,%d,%d,%d,%d)%1[\\\\}]%n\", &x1, &y1, &x2, &y2, &t1, &t2, sep, &len) > 6) {\n                    if (callbacks->move)\n                        callbacks->move(priv, x1, y1, x2, y2, t1, t2);\n                } else if (sscanf(buf, \"\\\\pos(%d,%d)%1[\\\\}]%n\", &x1, &y1, sep, &len) > 2) {\n                    if (callbacks->move)\n                        callbacks->move(priv, x1, y1, x1, y1, -1, -1);\n                } else if (sscanf(buf, \"\\\\org(%d,%d)%1[\\\\}]%n\", &x1, &y1, sep, &len) > 2) {\n                    if (callbacks->origin)\n                        callbacks->origin(priv, x1, y1);\n                } else {\n                    len = strcspn(buf+1, \"\\\\}\") + 2;  /* skip unknown code */\n                }\n                buf += len - 1;\n            }\n            if (*buf++ != '}')\n                return AVERROR_INVALIDDATA;\n        } else {\n            if (!text) {\n                text = buf;\n                text_len = 1;\n            } else\n                text_len++;\n            buf++;\n        }\n    }\n    if (text && callbacks->text)\n        callbacks->text(priv, text, text_len);\n    if (callbacks->end)\n        callbacks->end(priv);\n    return 0;\n}",
    "abstract_func_before": "int ff_ass_split_override_codes(const ASSCodesCallbacks *VAR_0, void *VAR_1,\n                                const char *VAR_2)\n{\n    const char *VAR_3 = NULL;\n    char VAR_4[2];\n    int VAR_5 = 0;\n\n    while (*VAR_2) {\n        if (VAR_3 && VAR_0->text &&\n            (sscanf(VAR_2, \"\\\\%1[nN]\", VAR_4) == 1 ||\n             !strncmp(VAR_2, \"{\\\\\", 2))) {\n            VAR_0->text(VAR_1, VAR_3, VAR_5);\n            VAR_3 = NULL;\n        }\n        if (sscanf(VAR_2, \"\\\\%1[nN]\", VAR_4) == 1) {\n            if (VAR_0->new_line)\n                VAR_0->new_line(VAR_1, VAR_4[0] == 'N');\n            VAR_2 += 2;\n        } else if (!strncmp(VAR_2, \"{\\\\\", 2)) {\n            VAR_2++;\n            while (*VAR_2 == '\\\\') {\n                char VAR_6[2], VAR_7[2], VAR_8[2], VAR_9[2] = \"0\", VAR_10[128] = {0};\n                unsigned int VAR_11 = 0xFFFFFFFF;\n                int VAR_12, VAR_13 = -1, VAR_14 = -1, VAR_15 = -1;\n                int VAR_16, VAR_17, VAR_18, VAR_19, VAR_20 = -1, VAR_21 = -1;\n                if (sscanf(VAR_2, \"\\\\%1[bisu]%1[01\\\\}]%n\", VAR_6, VAR_7, &VAR_12) > 1) {\n                    int VAR_22 = VAR_7[0] == '0' ? 1 : VAR_7[0] == '1' ? 0 : -1;\n                    VAR_12 += VAR_22 != -1;\n                    if (VAR_0->style)\n                        VAR_0->style(VAR_1, VAR_6[0], VAR_22);\n                } else if (sscanf(VAR_2, \"\\\\c%1[\\\\}]%n\", VAR_8, &VAR_12) > 0 ||\n                           sscanf(VAR_2, \"\\\\c&H%X&%1[\\\\}]%n\", &VAR_11, VAR_8, &VAR_12) > 1 ||\n                           sscanf(VAR_2, \"\\\\%1[1234]c%1[\\\\}]%n\", VAR_9, VAR_8, &VAR_12) > 1 ||\n                           sscanf(VAR_2, \"\\\\%1[1234]c&H%X&%1[\\\\}]%n\", VAR_9, &VAR_11, VAR_8, &VAR_12) > 2) {\n                    if (VAR_0->color)\n                        VAR_0->color(VAR_1, VAR_11, VAR_9[0] - '0');\n                } else if (sscanf(VAR_2, \"\\\\alpha%1[\\\\}]%n\", VAR_8, &VAR_12) > 0 ||\n                           sscanf(VAR_2, \"\\\\alpha&H%2X&%1[\\\\}]%n\", &VAR_15, VAR_8, &VAR_12) > 1 ||\n                           sscanf(VAR_2, \"\\\\%1[1234]a%1[\\\\}]%n\", VAR_9, VAR_8, &VAR_12) > 1 ||\n                           sscanf(VAR_2, \"\\\\%1[1234]a&H%2X&%1[\\\\}]%n\", VAR_9, &VAR_15, VAR_8, &VAR_12) > 2) {\n                    if (VAR_0->alpha)\n                        VAR_0->alpha(VAR_1, VAR_15, VAR_9[0] - '0');\n                } else if (sscanf(VAR_2, \"\\\\fn%1[\\\\}]%n\", VAR_8, &VAR_12) > 0 ||\n                           sscanf(VAR_2, \"\\\\fn%127[^\\\\}]%1[\\\\}]%n\", VAR_10, VAR_8, &VAR_12) > 1) {\n                    if (VAR_0->font_name)\n                        VAR_0->font_name(VAR_1, VAR_10[0] ? VAR_10 : NULL);\n                } else if (sscanf(VAR_2, \"\\\\fs%1[\\\\}]%n\", VAR_8, &VAR_12) > 0 ||\n                           sscanf(VAR_2, \"\\\\fs%u%1[\\\\}]%n\", &VAR_13, VAR_8, &VAR_12) > 1) {\n                    if (VAR_0->font_size)\n                        VAR_0->font_size(VAR_1, VAR_13);\n                } else if (sscanf(VAR_2, \"\\\\a%1[\\\\}]%n\", VAR_8, &VAR_12) > 0 ||\n                           sscanf(VAR_2, \"\\\\a%2u%1[\\\\}]%n\", &VAR_14, VAR_8, &VAR_12) > 1 ||\n                           sscanf(VAR_2, \"\\\\an%1[\\\\}]%n\", VAR_8, &VAR_12) > 0 ||\n                           sscanf(VAR_2, \"\\\\an%1u%1[\\\\}]%n\", &VAR_14, VAR_8, &VAR_12) > 1) {\n                    if (VAR_14 != -1 && VAR_2[2] != 'n')\n                        VAR_14 = (VAR_14&3) + (VAR_14&4 ? 6 : VAR_14&8 ? 3 : 0);\n                    if (VAR_0->alignment)\n                        VAR_0->alignment(VAR_1, VAR_14);\n                } else if (sscanf(VAR_2, \"\\\\r%1[\\\\}]%n\", VAR_8, &VAR_12) > 0 ||\n                           sscanf(VAR_2, \"\\\\r%127[^\\\\}]%1[\\\\}]%n\", VAR_10, VAR_8, &VAR_12) > 1) {\n                    if (VAR_0->cancel_overrides)\n                        VAR_0->cancel_overrides(VAR_1, VAR_10);\n                } else if (sscanf(VAR_2, \"\\\\move(%d,%d,%d,%d)%1[\\\\}]%n\", &VAR_16, &VAR_17, &VAR_18, &VAR_19, VAR_8, &VAR_12) > 4 ||\n                           sscanf(VAR_2, \"\\\\move(%d,%d,%d,%d,%d,%d)%1[\\\\}]%n\", &VAR_16, &VAR_17, &VAR_18, &VAR_19, &VAR_20, &VAR_21, VAR_8, &VAR_12) > 6) {\n                    if (VAR_0->move)\n                        VAR_0->move(VAR_1, VAR_16, VAR_17, VAR_18, VAR_19, VAR_20, VAR_21);\n                } else if (sscanf(VAR_2, \"\\\\pos(%d,%d)%1[\\\\}]%n\", &VAR_16, &VAR_17, VAR_8, &VAR_12) > 2) {\n                    if (VAR_0->move)\n                        VAR_0->move(VAR_1, VAR_16, VAR_17, VAR_16, VAR_17, -1, -1);\n                } else if (sscanf(VAR_2, \"\\\\org(%d,%d)%1[\\\\}]%n\", &VAR_16, &VAR_17, VAR_8, &VAR_12) > 2) {\n                    if (VAR_0->origin)\n                        VAR_0->origin(VAR_1, VAR_16, VAR_17);\n                } else {\n                    VAR_12 = strcspn(VAR_2+1, \"\\\\}\") + 2;  /* COMMENT_0 */\n                }\n                VAR_2 += VAR_12 - 1;\n            }\n            if (*VAR_2++ != '}')\n                return VAR_23;\n        } else {\n            if (!VAR_3) {\n                VAR_3 = VAR_2;\n                VAR_5 = 1;\n            } else\n                VAR_5++;\n            VAR_2++;\n        }\n    }\n    if (VAR_3 && VAR_0->text)\n        VAR_0->text(VAR_1, VAR_3, VAR_5);\n    if (VAR_0->end)\n        VAR_0->end(VAR_1);\n    return 0;\n}",
    "func_graph_path_before": "ffmpeg/20c121c00747d6c3b0b0f98deeff021171b2ed74/ass_split.c/vul/before/0.json",
    "func": "int ff_ass_split_override_codes(const ASSCodesCallbacks *callbacks, void *priv,\n                                const char *buf)\n{\n    const char *text = NULL;\n    char new_line[2];\n    int text_len = 0;\n\n    while (buf && *buf) {\n        if (text && callbacks->text &&\n            (sscanf(buf, \"\\\\%1[nN]\", new_line) == 1 ||\n             !strncmp(buf, \"{\\\\\", 2))) {\n            callbacks->text(priv, text, text_len);\n            text = NULL;\n        }\n        if (sscanf(buf, \"\\\\%1[nN]\", new_line) == 1) {\n            if (callbacks->new_line)\n                callbacks->new_line(priv, new_line[0] == 'N');\n            buf += 2;\n        } else if (!strncmp(buf, \"{\\\\\", 2)) {\n            buf++;\n            while (*buf == '\\\\') {\n                char style[2], c[2], sep[2], c_num[2] = \"0\", tmp[128] = {0};\n                unsigned int color = 0xFFFFFFFF;\n                int len, size = -1, an = -1, alpha = -1;\n                int x1, y1, x2, y2, t1 = -1, t2 = -1;\n                if (sscanf(buf, \"\\\\%1[bisu]%1[01\\\\}]%n\", style, c, &len) > 1) {\n                    int close = c[0] == '0' ? 1 : c[0] == '1' ? 0 : -1;\n                    len += close != -1;\n                    if (callbacks->style)\n                        callbacks->style(priv, style[0], close);\n                } else if (sscanf(buf, \"\\\\c%1[\\\\}]%n\", sep, &len) > 0 ||\n                           sscanf(buf, \"\\\\c&H%X&%1[\\\\}]%n\", &color, sep, &len) > 1 ||\n                           sscanf(buf, \"\\\\%1[1234]c%1[\\\\}]%n\", c_num, sep, &len) > 1 ||\n                           sscanf(buf, \"\\\\%1[1234]c&H%X&%1[\\\\}]%n\", c_num, &color, sep, &len) > 2) {\n                    if (callbacks->color)\n                        callbacks->color(priv, color, c_num[0] - '0');\n                } else if (sscanf(buf, \"\\\\alpha%1[\\\\}]%n\", sep, &len) > 0 ||\n                           sscanf(buf, \"\\\\alpha&H%2X&%1[\\\\}]%n\", &alpha, sep, &len) > 1 ||\n                           sscanf(buf, \"\\\\%1[1234]a%1[\\\\}]%n\", c_num, sep, &len) > 1 ||\n                           sscanf(buf, \"\\\\%1[1234]a&H%2X&%1[\\\\}]%n\", c_num, &alpha, sep, &len) > 2) {\n                    if (callbacks->alpha)\n                        callbacks->alpha(priv, alpha, c_num[0] - '0');\n                } else if (sscanf(buf, \"\\\\fn%1[\\\\}]%n\", sep, &len) > 0 ||\n                           sscanf(buf, \"\\\\fn%127[^\\\\}]%1[\\\\}]%n\", tmp, sep, &len) > 1) {\n                    if (callbacks->font_name)\n                        callbacks->font_name(priv, tmp[0] ? tmp : NULL);\n                } else if (sscanf(buf, \"\\\\fs%1[\\\\}]%n\", sep, &len) > 0 ||\n                           sscanf(buf, \"\\\\fs%u%1[\\\\}]%n\", &size, sep, &len) > 1) {\n                    if (callbacks->font_size)\n                        callbacks->font_size(priv, size);\n                } else if (sscanf(buf, \"\\\\a%1[\\\\}]%n\", sep, &len) > 0 ||\n                           sscanf(buf, \"\\\\a%2u%1[\\\\}]%n\", &an, sep, &len) > 1 ||\n                           sscanf(buf, \"\\\\an%1[\\\\}]%n\", sep, &len) > 0 ||\n                           sscanf(buf, \"\\\\an%1u%1[\\\\}]%n\", &an, sep, &len) > 1) {\n                    if (an != -1 && buf[2] != 'n')\n                        an = (an&3) + (an&4 ? 6 : an&8 ? 3 : 0);\n                    if (callbacks->alignment)\n                        callbacks->alignment(priv, an);\n                } else if (sscanf(buf, \"\\\\r%1[\\\\}]%n\", sep, &len) > 0 ||\n                           sscanf(buf, \"\\\\r%127[^\\\\}]%1[\\\\}]%n\", tmp, sep, &len) > 1) {\n                    if (callbacks->cancel_overrides)\n                        callbacks->cancel_overrides(priv, tmp);\n                } else if (sscanf(buf, \"\\\\move(%d,%d,%d,%d)%1[\\\\}]%n\", &x1, &y1, &x2, &y2, sep, &len) > 4 ||\n                           sscanf(buf, \"\\\\move(%d,%d,%d,%d,%d,%d)%1[\\\\}]%n\", &x1, &y1, &x2, &y2, &t1, &t2, sep, &len) > 6) {\n                    if (callbacks->move)\n                        callbacks->move(priv, x1, y1, x2, y2, t1, t2);\n                } else if (sscanf(buf, \"\\\\pos(%d,%d)%1[\\\\}]%n\", &x1, &y1, sep, &len) > 2) {\n                    if (callbacks->move)\n                        callbacks->move(priv, x1, y1, x1, y1, -1, -1);\n                } else if (sscanf(buf, \"\\\\org(%d,%d)%1[\\\\}]%n\", &x1, &y1, sep, &len) > 2) {\n                    if (callbacks->origin)\n                        callbacks->origin(priv, x1, y1);\n                } else {\n                    len = strcspn(buf+1, \"\\\\}\") + 2;  /* skip unknown code */\n                }\n                buf += len - 1;\n            }\n            if (*buf++ != '}')\n                return AVERROR_INVALIDDATA;\n        } else {\n            if (!text) {\n                text = buf;\n                text_len = 1;\n            } else\n                text_len++;\n            buf++;\n        }\n    }\n    if (text && callbacks->text)\n        callbacks->text(priv, text, text_len);\n    if (callbacks->end)\n        callbacks->end(priv);\n    return 0;\n}",
    "abstract_func": "int ff_ass_split_override_codes(const ASSCodesCallbacks *VAR_0, void *VAR_1,\n                                const char *VAR_2)\n{\n    const char *VAR_3 = NULL;\n    char VAR_4[2];\n    int VAR_5 = 0;\n\n    while (VAR_2 && *VAR_2) {\n        if (VAR_3 && VAR_0->text &&\n            (sscanf(VAR_2, \"\\\\%1[nN]\", VAR_4) == 1 ||\n             !strncmp(VAR_2, \"{\\\\\", 2))) {\n            VAR_0->text(VAR_1, VAR_3, VAR_5);\n            VAR_3 = NULL;\n        }\n        if (sscanf(VAR_2, \"\\\\%1[nN]\", VAR_4) == 1) {\n            if (VAR_0->new_line)\n                VAR_0->new_line(VAR_1, VAR_4[0] == 'N');\n            VAR_2 += 2;\n        } else if (!strncmp(VAR_2, \"{\\\\\", 2)) {\n            VAR_2++;\n            while (*VAR_2 == '\\\\') {\n                char VAR_6[2], VAR_7[2], VAR_8[2], VAR_9[2] = \"0\", VAR_10[128] = {0};\n                unsigned int VAR_11 = 0xFFFFFFFF;\n                int VAR_12, VAR_13 = -1, VAR_14 = -1, VAR_15 = -1;\n                int VAR_16, VAR_17, VAR_18, VAR_19, VAR_20 = -1, VAR_21 = -1;\n                if (sscanf(VAR_2, \"\\\\%1[bisu]%1[01\\\\}]%n\", VAR_6, VAR_7, &VAR_12) > 1) {\n                    int VAR_22 = VAR_7[0] == '0' ? 1 : VAR_7[0] == '1' ? 0 : -1;\n                    VAR_12 += VAR_22 != -1;\n                    if (VAR_0->style)\n                        VAR_0->style(VAR_1, VAR_6[0], VAR_22);\n                } else if (sscanf(VAR_2, \"\\\\c%1[\\\\}]%n\", VAR_8, &VAR_12) > 0 ||\n                           sscanf(VAR_2, \"\\\\c&H%X&%1[\\\\}]%n\", &VAR_11, VAR_8, &VAR_12) > 1 ||\n                           sscanf(VAR_2, \"\\\\%1[1234]c%1[\\\\}]%n\", VAR_9, VAR_8, &VAR_12) > 1 ||\n                           sscanf(VAR_2, \"\\\\%1[1234]c&H%X&%1[\\\\}]%n\", VAR_9, &VAR_11, VAR_8, &VAR_12) > 2) {\n                    if (VAR_0->color)\n                        VAR_0->color(VAR_1, VAR_11, VAR_9[0] - '0');\n                } else if (sscanf(VAR_2, \"\\\\alpha%1[\\\\}]%n\", VAR_8, &VAR_12) > 0 ||\n                           sscanf(VAR_2, \"\\\\alpha&H%2X&%1[\\\\}]%n\", &VAR_15, VAR_8, &VAR_12) > 1 ||\n                           sscanf(VAR_2, \"\\\\%1[1234]a%1[\\\\}]%n\", VAR_9, VAR_8, &VAR_12) > 1 ||\n                           sscanf(VAR_2, \"\\\\%1[1234]a&H%2X&%1[\\\\}]%n\", VAR_9, &VAR_15, VAR_8, &VAR_12) > 2) {\n                    if (VAR_0->alpha)\n                        VAR_0->alpha(VAR_1, VAR_15, VAR_9[0] - '0');\n                } else if (sscanf(VAR_2, \"\\\\fn%1[\\\\}]%n\", VAR_8, &VAR_12) > 0 ||\n                           sscanf(VAR_2, \"\\\\fn%127[^\\\\}]%1[\\\\}]%n\", VAR_10, VAR_8, &VAR_12) > 1) {\n                    if (VAR_0->font_name)\n                        VAR_0->font_name(VAR_1, VAR_10[0] ? VAR_10 : NULL);\n                } else if (sscanf(VAR_2, \"\\\\fs%1[\\\\}]%n\", VAR_8, &VAR_12) > 0 ||\n                           sscanf(VAR_2, \"\\\\fs%u%1[\\\\}]%n\", &VAR_13, VAR_8, &VAR_12) > 1) {\n                    if (VAR_0->font_size)\n                        VAR_0->font_size(VAR_1, VAR_13);\n                } else if (sscanf(VAR_2, \"\\\\a%1[\\\\}]%n\", VAR_8, &VAR_12) > 0 ||\n                           sscanf(VAR_2, \"\\\\a%2u%1[\\\\}]%n\", &VAR_14, VAR_8, &VAR_12) > 1 ||\n                           sscanf(VAR_2, \"\\\\an%1[\\\\}]%n\", VAR_8, &VAR_12) > 0 ||\n                           sscanf(VAR_2, \"\\\\an%1u%1[\\\\}]%n\", &VAR_14, VAR_8, &VAR_12) > 1) {\n                    if (VAR_14 != -1 && VAR_2[2] != 'n')\n                        VAR_14 = (VAR_14&3) + (VAR_14&4 ? 6 : VAR_14&8 ? 3 : 0);\n                    if (VAR_0->alignment)\n                        VAR_0->alignment(VAR_1, VAR_14);\n                } else if (sscanf(VAR_2, \"\\\\r%1[\\\\}]%n\", VAR_8, &VAR_12) > 0 ||\n                           sscanf(VAR_2, \"\\\\r%127[^\\\\}]%1[\\\\}]%n\", VAR_10, VAR_8, &VAR_12) > 1) {\n                    if (VAR_0->cancel_overrides)\n                        VAR_0->cancel_overrides(VAR_1, VAR_10);\n                } else if (sscanf(VAR_2, \"\\\\move(%d,%d,%d,%d)%1[\\\\}]%n\", &VAR_16, &VAR_17, &VAR_18, &VAR_19, VAR_8, &VAR_12) > 4 ||\n                           sscanf(VAR_2, \"\\\\move(%d,%d,%d,%d,%d,%d)%1[\\\\}]%n\", &VAR_16, &VAR_17, &VAR_18, &VAR_19, &VAR_20, &VAR_21, VAR_8, &VAR_12) > 6) {\n                    if (VAR_0->move)\n                        VAR_0->move(VAR_1, VAR_16, VAR_17, VAR_18, VAR_19, VAR_20, VAR_21);\n                } else if (sscanf(VAR_2, \"\\\\pos(%d,%d)%1[\\\\}]%n\", &VAR_16, &VAR_17, VAR_8, &VAR_12) > 2) {\n                    if (VAR_0->move)\n                        VAR_0->move(VAR_1, VAR_16, VAR_17, VAR_16, VAR_17, -1, -1);\n                } else if (sscanf(VAR_2, \"\\\\org(%d,%d)%1[\\\\}]%n\", &VAR_16, &VAR_17, VAR_8, &VAR_12) > 2) {\n                    if (VAR_0->origin)\n                        VAR_0->origin(VAR_1, VAR_16, VAR_17);\n                } else {\n                    VAR_12 = strcspn(VAR_2+1, \"\\\\}\") + 2;  /* COMMENT_0 */\n                }\n                VAR_2 += VAR_12 - 1;\n            }\n            if (*VAR_2++ != '}')\n                return VAR_23;\n        } else {\n            if (!VAR_3) {\n                VAR_3 = VAR_2;\n                VAR_5 = 1;\n            } else\n                VAR_5++;\n            VAR_2++;\n        }\n    }\n    if (VAR_3 && VAR_0->text)\n        VAR_0->text(VAR_1, VAR_3, VAR_5);\n    if (VAR_0->end)\n        VAR_0->end(VAR_1);\n    return 0;\n}",
    "func_graph_path": "ffmpeg/20c121c00747d6c3b0b0f98deeff021171b2ed74/ass_split.c/vul/after/0.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -5,7 +5,7 @@\n     char new_line[2];\n     int text_len = 0;\n \n-    while (*buf) {\n+    while (buf && *buf) {\n         if (text && callbacks->text &&\n             (sscanf(buf, \"\\\\%1[nN]\", new_line) == 1 ||\n              !strncmp(buf, \"{\\\\\", 2))) {",
    "diff_line_info": {
        "deleted_lines": [
            "    while (*buf) {"
        ],
        "added_lines": [
            "    while (buf && *buf) {"
        ]
    },
    "is_vul": true,
    "pr_url": null,
    "description": "no more info"
}