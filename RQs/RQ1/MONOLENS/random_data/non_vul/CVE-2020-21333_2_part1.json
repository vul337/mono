{
    "cve_id": "CVE-2020-21333",
    "cwe_ids": [
        "CWE-79"
    ],
    "cvss_vector": "AV:N/AC:M/Au:S/C:N/I:P/A:N",
    "cvss_is_v3": false,
    "repo_name": "sanluan/PublicCMS",
    "commit_msg": "https://github.com/sanluan/PublicCMS/issues/26\nhttps://github.com/sanluan/PublicCMS/issues/27",
    "commit_hash": "b4d5956e65b14347b162424abb197a180229b3db",
    "git_url": "https://github.com/sanluan/PublicCMS/commit/b4d5956e65b14347b162424abb197a180229b3db",
    "file_path": "publiccms-parent/publiccms-common/src/main/java/com/publiccms/common/tools/RequestUtils.java",
    "func_name": "getIpAddress",
    "func_before": "public static String getIpAddress(HttpServletRequest request) {\n        if (null != request) {\n            String ip = request.getHeader(\"X-Real-IP\");\n            if (CommonUtils.notEmpty(ip) && !\"unknown\".equalsIgnoreCase(ip)) {\n                return ip;\n            }\n            ip = request.getHeader(\"X-Forwarded-For\");\n            if (CommonUtils.notEmpty(ip) && !\"unknown\".equalsIgnoreCase(ip)) {\n                int index = ip.indexOf(Constants.COMMA);\n                if (index != -1) {\n                    return ip.substring(0, index);\n                }\n                return ip;\n            }\n            return request.getRemoteAddr();\n        }\n        return null;\n    }",
    "abstract_func_before": "public static String getIpAddress(HttpServletRequest VAR_0) {\n        if (null != VAR_0) {\n            String VAR_1 = VAR_0.getHeader(\"X-Real-IP\");\n            if (VAR_2.notEmpty(VAR_1) && !\"unknown\".equalsIgnoreCase(VAR_1)) {\n                return VAR_1;\n            }\n            VAR_1 = VAR_0.getHeader(\"X-Forwarded-For\");\n            if (VAR_2.notEmpty(VAR_1) && !\"unknown\".equalsIgnoreCase(VAR_1)) {\n                int VAR_3 = VAR_1.indexOf(VAR_4.COMMA);\n                if (VAR_3 != -1) {\n                    return VAR_1.substring(0, VAR_3);\n                }\n                return VAR_1;\n            }\n            return VAR_0.getRemoteAddr();\n        }\n        return null;\n    }",
    "func_graph_path_before": "sanluan/PublicCMS/b4d5956e65b14347b162424abb197a180229b3db/RequestUtils.java/vul/before/0.json",
    "func": "public static String getIpAddress(HttpServletRequest request) {\n        if (null != request) {\n            String localIp = request.getRemoteAddr();\n            String ip = request.getHeader(\"X-Real-IP\");\n            if (CommonUtils.notEmpty(ip) && !\"unknown\".equalsIgnoreCase(ip)) {\n                if (ip.length() > 64) {\n                    ip = ip.substring(0, 64);\n                }\n                return ip.equals(localIp) ? ip : ip + \",\" + localIp;\n            }\n            ip = request.getHeader(\"X-Forwarded-For\");\n            if (CommonUtils.notEmpty(ip) && !\"unknown\".equalsIgnoreCase(ip)) {\n                int index = ip.indexOf(Constants.COMMA);\n                if (index != -1) {\n                    return ip.substring(0, index);\n                }\n                if (ip.length() > 64) {\n                    ip = ip.substring(0, 64);\n                }\n                return ip.equals(localIp) ? ip : ip + \",\" + localIp;\n            }\n            return localIp;\n        }\n        return null;\n    }",
    "abstract_func": "public static String getIpAddress(HttpServletRequest VAR_0) {\n        if (null != VAR_0) {\n            String VAR_1 = VAR_0.getRemoteAddr();\n            String VAR_2 = VAR_0.getHeader(\"X-Real-IP\");\n            if (VAR_3.notEmpty(VAR_2) && !\"unknown\".equalsIgnoreCase(VAR_2)) {\n                if (VAR_2.length() > 64) {\n                    VAR_2 = VAR_2.substring(0, 64);\n                }\n                return VAR_2.equals(VAR_1) ? VAR_2 : VAR_2 + \",\" + VAR_1;\n            }\n            VAR_2 = VAR_0.getHeader(\"X-Forwarded-For\");\n            if (VAR_3.notEmpty(VAR_2) && !\"unknown\".equalsIgnoreCase(VAR_2)) {\n                int VAR_4 = VAR_2.indexOf(VAR_5.COMMA);\n                if (VAR_4 != -1) {\n                    return VAR_2.substring(0, VAR_4);\n                }\n                if (VAR_2.length() > 64) {\n                    VAR_2 = VAR_2.substring(0, 64);\n                }\n                return VAR_2.equals(VAR_1) ? VAR_2 : VAR_2 + \",\" + VAR_1;\n            }\n            return VAR_1;\n        }\n        return null;\n    }",
    "func_graph_path": "sanluan/PublicCMS/b4d5956e65b14347b162424abb197a180229b3db/RequestUtils.java/vul/after/0.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -1,8 +1,12 @@\n public static String getIpAddress(HttpServletRequest request) {\n         if (null != request) {\n+            String localIp = request.getRemoteAddr();\n             String ip = request.getHeader(\"X-Real-IP\");\n             if (CommonUtils.notEmpty(ip) && !\"unknown\".equalsIgnoreCase(ip)) {\n-                return ip;\n+                if (ip.length() > 64) {\n+                    ip = ip.substring(0, 64);\n+                }\n+                return ip.equals(localIp) ? ip : ip + \",\" + localIp;\n             }\n             ip = request.getHeader(\"X-Forwarded-For\");\n             if (CommonUtils.notEmpty(ip) && !\"unknown\".equalsIgnoreCase(ip)) {\n@@ -10,9 +14,12 @@\n                 if (index != -1) {\n                     return ip.substring(0, index);\n                 }\n-                return ip;\n+                if (ip.length() > 64) {\n+                    ip = ip.substring(0, 64);\n+                }\n+                return ip.equals(localIp) ? ip : ip + \",\" + localIp;\n             }\n-            return request.getRemoteAddr();\n+            return localIp;\n         }\n         return null;\n     }",
    "diff_line_info": {
        "deleted_lines": [
            "                return ip;",
            "                return ip;",
            "            return request.getRemoteAddr();"
        ],
        "added_lines": [
            "            String localIp = request.getRemoteAddr();",
            "                if (ip.length() > 64) {",
            "                    ip = ip.substring(0, 64);",
            "                }",
            "                return ip.equals(localIp) ? ip : ip + \",\" + localIp;",
            "                if (ip.length() > 64) {",
            "                    ip = ip.substring(0, 64);",
            "                }",
            "                return ip.equals(localIp) ? ip : ip + \",\" + localIp;",
            "            return localIp;"
        ]
    },
    "is_vul": true,
    "pr_url": null,
    "description": "no more info"
}