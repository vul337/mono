{
    "cve_id": "CVE-2015-7558",
    "cwe_ids": [
        "CWE-20"
    ],
    "cvss_vector": "AV:N/AC:L/Au:N/C:N/I:N/A:P",
    "cvss_is_v3": false,
    "repo_name": "GNOME/librsvg",
    "commit_msg": "rsvg: Add rsvg_acquire_node()\n\nThis function does proper recursion checks when looking up resources\nfrom URLs and thereby helps avoiding infinite loops when cyclic\nreferences span multiple types of elements.",
    "commit_hash": "a51919f7e1ca9c535390a746fbf6e28c8402dc61",
    "git_url": "https://github.com/GNOME/librsvg/commit/a51919f7e1ca9c535390a746fbf6e28c8402dc61",
    "file_path": "rsvg-cairo-render.c",
    "func_name": "rsvg_cairo_new_drawing_ctx",
    "func_before": "RsvgDrawingCtx *\nrsvg_cairo_new_drawing_ctx (cairo_t * cr, RsvgHandle * handle)\n{\n    RsvgDimensionData data;\n    RsvgDrawingCtx *draw;\n    RsvgCairoRender *render;\n    RsvgState *state;\n    cairo_matrix_t affine;\n    double bbx0, bby0, bbx1, bby1;\n\n    rsvg_handle_get_dimensions (handle, &data);\n    if (data.width == 0 || data.height == 0)\n        return NULL;\n\n    draw = g_new (RsvgDrawingCtx, 1);\n\n    cairo_get_matrix (cr, &affine);\n\n    /* find bounding box of image as transformed by the current cairo context\n     * The size of this bounding box determines the size of the intermediate\n     * surfaces allocated during drawing. */\n    rsvg_cairo_transformed_image_bounding_box (&affine,\n                                               data.width, data.height,\n                                               &bbx0, &bby0, &bbx1, &bby1);\n\n    render = rsvg_cairo_render_new (cr, bbx1 - bbx0, bby1 - bby0);\n\n    if (!render)\n        return NULL;\n\n    draw->render = (RsvgRender *) render;\n    render->offset_x = bbx0;\n    render->offset_y = bby0;\n\n    draw->state = NULL;\n\n    draw->defs = handle->priv->defs;\n    draw->base_uri = g_strdup (handle->priv->base_uri);\n    draw->dpi_x = handle->priv->dpi_x;\n    draw->dpi_y = handle->priv->dpi_y;\n    draw->vb.rect.width = data.em;\n    draw->vb.rect.height = data.ex;\n    draw->pango_context = NULL;\n    draw->drawsub_stack = NULL;\n    draw->ptrs = NULL;\n\n    rsvg_state_push (draw);\n    state = rsvg_current_state (draw);\n\n    /* apply cairo transformation to our affine transform */\n    cairo_matrix_multiply (&state->affine, &affine, &state->affine);\n\n    /* scale according to size set by size_func callback */\n    cairo_matrix_init_scale (&affine, data.width / data.em, data.height / data.ex);\n    cairo_matrix_multiply (&state->affine, &affine, &state->affine);\n\n    /* adjust transform so that the corner of the bounding box above is\n     * at (0,0) - we compensate for this in _set_rsvg_affine() in\n     * rsvg-cairo-render.c and a few other places */\n    state->affine.x0 -= render->offset_x;\n    state->affine.y0 -= render->offset_y;\n\n    rsvg_bbox_init (&((RsvgCairoRender *) draw->render)->bbox, &state->affine);\n\n    return draw;\n}",
    "abstract_func_before": "RsvgDrawingCtx *\nrsvg_cairo_new_drawing_ctx (cairo_t * VAR_0, RsvgHandle * VAR_1)\n{\n    RsvgDimensionData VAR_2;\n    RsvgDrawingCtx *VAR_3;\n    RsvgCairoRender *VAR_4;\n    RsvgState *VAR_5;\n    cairo_matrix_t VAR_6;\n    double VAR_7, VAR_8, VAR_9, VAR_10;\n\n    rsvg_handle_get_dimensions (VAR_1, &VAR_2);\n    if (VAR_2.width == 0 || VAR_2.height == 0)\n        return NULL;\n\n    VAR_3 = g_new (RsvgDrawingCtx, 1);\n\n    cairo_get_matrix (VAR_0, &VAR_6);\n\n    /* COMMENT_0 */\n                                                                            \n                                            \n    rsvg_cairo_transformed_image_bounding_box (&VAR_6,\n                                               VAR_2.width, VAR_2.height,\n                                               &VAR_7, &VAR_8, &VAR_9, &VAR_10);\n\n    VAR_4 = rsvg_cairo_render_new (VAR_0, VAR_9 - VAR_7, VAR_10 - VAR_8);\n\n    if (!VAR_4)\n        return NULL;\n\n    VAR_3->render = (RsvgRender *) VAR_4;\n    VAR_4->offset_x = VAR_7;\n    VAR_4->offset_y = VAR_8;\n\n    VAR_3->state = NULL;\n\n    VAR_3->defs = VAR_1->priv->defs;\n    VAR_3->base_uri = g_strdup (VAR_1->priv->base_uri);\n    VAR_3->dpi_x = VAR_1->priv->dpi_x;\n    VAR_3->dpi_y = VAR_1->priv->dpi_y;\n    VAR_3->vb.rect.width = VAR_2.em;\n    VAR_3->vb.rect.height = VAR_2.ex;\n    VAR_3->pango_context = NULL;\n    VAR_3->drawsub_stack = NULL;\n    VAR_3->ptrs = NULL;\n\n    rsvg_state_push (VAR_3);\n    VAR_5 = rsvg_current_state (VAR_3);\n\n    /* COMMENT_3 */\n    cairo_matrix_multiply (&VAR_5->affine, &VAR_6, &VAR_5->affine);\n\n    /* COMMENT_4 */\n    cairo_matrix_init_scale (&VAR_6, VAR_2.width / VAR_2.em, VAR_2.height / VAR_2.ex);\n    cairo_matrix_multiply (&VAR_5->affine, &VAR_6, &VAR_5->affine);\n\n    /* COMMENT_5 */\n                                                                 \n                                                    \n    VAR_5->affine.x0 -= VAR_4->offset_x;\n    VAR_5->affine.y0 -= VAR_4->offset_y;\n\n    rsvg_bbox_init (&((RsvgCairoRender *) VAR_3->render)->bbox, &VAR_5->affine);\n\n    return VAR_3;\n}",
    "func_graph_path_before": "GNOME/librsvg/a51919f7e1ca9c535390a746fbf6e28c8402dc61/rsvg-cairo-render.c/vul/before/0.json",
    "func": "RsvgDrawingCtx *\nrsvg_cairo_new_drawing_ctx (cairo_t * cr, RsvgHandle * handle)\n{\n    RsvgDimensionData data;\n    RsvgDrawingCtx *draw;\n    RsvgCairoRender *render;\n    RsvgState *state;\n    cairo_matrix_t affine;\n    double bbx0, bby0, bbx1, bby1;\n\n    rsvg_handle_get_dimensions (handle, &data);\n    if (data.width == 0 || data.height == 0)\n        return NULL;\n\n    draw = g_new (RsvgDrawingCtx, 1);\n\n    cairo_get_matrix (cr, &affine);\n\n    /* find bounding box of image as transformed by the current cairo context\n     * The size of this bounding box determines the size of the intermediate\n     * surfaces allocated during drawing. */\n    rsvg_cairo_transformed_image_bounding_box (&affine,\n                                               data.width, data.height,\n                                               &bbx0, &bby0, &bbx1, &bby1);\n\n    render = rsvg_cairo_render_new (cr, bbx1 - bbx0, bby1 - bby0);\n\n    if (!render)\n        return NULL;\n\n    draw->render = (RsvgRender *) render;\n    render->offset_x = bbx0;\n    render->offset_y = bby0;\n\n    draw->state = NULL;\n\n    draw->defs = handle->priv->defs;\n    draw->base_uri = g_strdup (handle->priv->base_uri);\n    draw->dpi_x = handle->priv->dpi_x;\n    draw->dpi_y = handle->priv->dpi_y;\n    draw->vb.rect.width = data.em;\n    draw->vb.rect.height = data.ex;\n    draw->pango_context = NULL;\n    draw->drawsub_stack = NULL;\n    draw->ptrs = NULL;\n    draw->acquired_nodes = NULL;\n\n    rsvg_state_push (draw);\n    state = rsvg_current_state (draw);\n\n    /* apply cairo transformation to our affine transform */\n    cairo_matrix_multiply (&state->affine, &affine, &state->affine);\n\n    /* scale according to size set by size_func callback */\n    cairo_matrix_init_scale (&affine, data.width / data.em, data.height / data.ex);\n    cairo_matrix_multiply (&state->affine, &affine, &state->affine);\n\n    /* adjust transform so that the corner of the bounding box above is\n     * at (0,0) - we compensate for this in _set_rsvg_affine() in\n     * rsvg-cairo-render.c and a few other places */\n    state->affine.x0 -= render->offset_x;\n    state->affine.y0 -= render->offset_y;\n\n    rsvg_bbox_init (&((RsvgCairoRender *) draw->render)->bbox, &state->affine);\n\n    return draw;\n}",
    "abstract_func": "RsvgDrawingCtx *\nrsvg_cairo_new_drawing_ctx (cairo_t * VAR_0, RsvgHandle * VAR_1)\n{\n    RsvgDimensionData VAR_2;\n    RsvgDrawingCtx *VAR_3;\n    RsvgCairoRender *VAR_4;\n    RsvgState *VAR_5;\n    cairo_matrix_t VAR_6;\n    double VAR_7, VAR_8, VAR_9, VAR_10;\n\n    rsvg_handle_get_dimensions (VAR_1, &VAR_2);\n    if (VAR_2.width == 0 || VAR_2.height == 0)\n        return NULL;\n\n    VAR_3 = g_new (RsvgDrawingCtx, 1);\n\n    cairo_get_matrix (VAR_0, &VAR_6);\n\n    /* COMMENT_0 */\n                                                                            \n                                            \n    rsvg_cairo_transformed_image_bounding_box (&VAR_6,\n                                               VAR_2.width, VAR_2.height,\n                                               &VAR_7, &VAR_8, &VAR_9, &VAR_10);\n\n    VAR_4 = rsvg_cairo_render_new (VAR_0, VAR_9 - VAR_7, VAR_10 - VAR_8);\n\n    if (!VAR_4)\n        return NULL;\n\n    VAR_3->render = (RsvgRender *) VAR_4;\n    VAR_4->offset_x = VAR_7;\n    VAR_4->offset_y = VAR_8;\n\n    VAR_3->state = NULL;\n\n    VAR_3->defs = VAR_1->priv->defs;\n    VAR_3->base_uri = g_strdup (VAR_1->priv->base_uri);\n    VAR_3->dpi_x = VAR_1->priv->dpi_x;\n    VAR_3->dpi_y = VAR_1->priv->dpi_y;\n    VAR_3->vb.rect.width = VAR_2.em;\n    VAR_3->vb.rect.height = VAR_2.ex;\n    VAR_3->pango_context = NULL;\n    VAR_3->drawsub_stack = NULL;\n    VAR_3->ptrs = NULL;\n    VAR_3->acquired_nodes = NULL;\n\n    rsvg_state_push (VAR_3);\n    VAR_5 = rsvg_current_state (VAR_3);\n\n    /* COMMENT_3 */\n    cairo_matrix_multiply (&VAR_5->affine, &VAR_6, &VAR_5->affine);\n\n    /* COMMENT_4 */\n    cairo_matrix_init_scale (&VAR_6, VAR_2.width / VAR_2.em, VAR_2.height / VAR_2.ex);\n    cairo_matrix_multiply (&VAR_5->affine, &VAR_6, &VAR_5->affine);\n\n    /* COMMENT_5 */\n                                                                 \n                                                    \n    VAR_5->affine.x0 -= VAR_4->offset_x;\n    VAR_5->affine.y0 -= VAR_4->offset_y;\n\n    rsvg_bbox_init (&((RsvgCairoRender *) VAR_3->render)->bbox, &VAR_5->affine);\n\n    return VAR_3;\n}",
    "func_graph_path": "GNOME/librsvg/a51919f7e1ca9c535390a746fbf6e28c8402dc61/rsvg-cairo-render.c/vul/after/0.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -43,6 +43,7 @@\n     draw->pango_context = NULL;\n     draw->drawsub_stack = NULL;\n     draw->ptrs = NULL;\n+    draw->acquired_nodes = NULL;\n \n     rsvg_state_push (draw);\n     state = rsvg_current_state (draw);",
    "diff_line_info": {
        "deleted_lines": [],
        "added_lines": [
            "    draw->acquired_nodes = NULL;"
        ]
    },
    "is_vul": true,
    "pr_url": null,
    "description": "no more info"
}