{
    "cve_id": "CVE-2018-9501",
    "cwe_ids": [
        "CWE-Other"
    ],
    "cvss_vector": "AV:L/AC:L/Au:N/C:C/I:C/A:C",
    "cvss_is_v3": false,
    "repo_name": "android",
    "commit_msg": "Disable changing lock when device is not provisioned.\n\nWhen the device is not yet provisioned and settings is launched:\n- disable the entry point for changing device lock\n- remove the search panel from settings home page\n- remove the search menu\n\nBug: 110034419\nTest: make RunSettingsRoboTests\nChange-Id: Ieb7eb0e8699229ec0824ccc19d7b958ac44965a2\nMerged-In: Ieb7eb0e8699229ec0824ccc19d7b958ac44965a2\n(cherry picked from commit 770f4abf9de2bb7d74497cc4b5f6795023229ef2)\n",
    "commit_hash": "5e43341b8c7eddce88f79c9a5068362927c05b54",
    "git_url": "https://android.googlesource.com/platform/packages/apps/Settings/+/5e43341b8c7eddce88f79c9a5068362927c05b54",
    "file_path": "src/com/android/settings/password/ChooseLockGeneric.java",
    "func_name": "onCreate",
    "func_before": "@Override\n        public void onCreate(Bundle savedInstanceState) {\n            super.onCreate(savedInstanceState);\n\n            String chooseLockAction = getActivity().getIntent().getAction();\n            mFingerprintManager = Utils.getFingerprintManagerOrNull(getActivity());\n            mDPM = (DevicePolicyManager) getSystemService(Context.DEVICE_POLICY_SERVICE);\n            mKeyStore = KeyStore.getInstance();\n            mChooseLockSettingsHelper = new ChooseLockSettingsHelper(this.getActivity());\n            mLockPatternUtils = new LockPatternUtils(getActivity());\n            mIsSetNewPassword = ACTION_SET_NEW_PARENT_PROFILE_PASSWORD.equals(chooseLockAction)\n                    || ACTION_SET_NEW_PASSWORD.equals(chooseLockAction);\n\n            // Defaults to needing to confirm credentials\n            final boolean confirmCredentials = getActivity().getIntent()\n                .getBooleanExtra(CONFIRM_CREDENTIALS, true);\n            if (getActivity() instanceof ChooseLockGeneric.InternalActivity) {\n                mPasswordConfirmed = !confirmCredentials;\n                mUserPassword = getActivity().getIntent().getStringExtra(\n                        ChooseLockSettingsHelper.EXTRA_KEY_PASSWORD);\n            }\n            mHideDrawer = getActivity().getIntent().getBooleanExtra(EXTRA_HIDE_DRAWER, false);\n\n            mHasChallenge = getActivity().getIntent().getBooleanExtra(\n                    ChooseLockSettingsHelper.EXTRA_KEY_HAS_CHALLENGE, false);\n            mChallenge = getActivity().getIntent().getLongExtra(\n                    ChooseLockSettingsHelper.EXTRA_KEY_CHALLENGE, 0);\n            mForFingerprint = getActivity().getIntent().getBooleanExtra(\n                    ChooseLockSettingsHelper.EXTRA_KEY_FOR_FINGERPRINT, false);\n            mForChangeCredRequiredForBoot = getArguments() != null && getArguments().getBoolean(\n                    ChooseLockSettingsHelper.EXTRA_KEY_FOR_CHANGE_CRED_REQUIRED_FOR_BOOT);\n            mUserManager = UserManager.get(getActivity());\n\n            if (savedInstanceState != null) {\n                mPasswordConfirmed = savedInstanceState.getBoolean(PASSWORD_CONFIRMED);\n                mWaitingForConfirmation = savedInstanceState.getBoolean(WAITING_FOR_CONFIRMATION);\n                mEncryptionRequestQuality = savedInstanceState.getInt(ENCRYPT_REQUESTED_QUALITY);\n                mEncryptionRequestDisabled = savedInstanceState.getBoolean(\n                        ENCRYPT_REQUESTED_DISABLED);\n                if (mUserPassword == null) {\n                    mUserPassword = savedInstanceState.getString(\n                            ChooseLockSettingsHelper.EXTRA_KEY_PASSWORD);\n                }\n            }\n\n            // a) If this is started from other user, use that user id.\n            // b) If this is started from the same user, read the extra if this is launched\n            //    from Settings app itself.\n            // c) Otherwise, use UserHandle.myUserId().\n            mUserId = Utils.getSecureTargetUser(\n                    getActivity().getActivityToken(),\n                    UserManager.get(getActivity()),\n                    getArguments(),\n                    getActivity().getIntent().getExtras()).getIdentifier();\n            mController = new ChooseLockGenericController(getContext(), mUserId);\n            if (ACTION_SET_NEW_PASSWORD.equals(chooseLockAction)\n                    && UserManager.get(getActivity()).isManagedProfile(mUserId)\n                    && mLockPatternUtils.isSeparateProfileChallengeEnabled(mUserId)) {\n                getActivity().setTitle(R.string.lock_settings_picker_title_profile);\n            }\n\n            mManagedPasswordProvider = ManagedLockPasswordProvider.get(getActivity(), mUserId);\n\n            if (mPasswordConfirmed) {\n                updatePreferencesOrFinish(savedInstanceState != null);\n                if (mForChangeCredRequiredForBoot) {\n                    maybeEnableEncryption(mLockPatternUtils.getKeyguardStoredPasswordQuality(\n                            mUserId), false);\n                }\n            } else if (!mWaitingForConfirmation) {\n                ChooseLockSettingsHelper helper =\n                        new ChooseLockSettingsHelper(this.getActivity(), this);\n                boolean managedProfileWithUnifiedLock =\n                        UserManager.get(getActivity()).isManagedProfile(mUserId)\n                        && !mLockPatternUtils.isSeparateProfileChallengeEnabled(mUserId);\n                boolean skipConfirmation = managedProfileWithUnifiedLock && !mIsSetNewPassword;\n                if (skipConfirmation\n                        || !helper.launchConfirmationActivity(CONFIRM_EXISTING_REQUEST,\n                        getString(R.string.unlock_set_unlock_launch_picker_title), true, mUserId)) {\n                    mPasswordConfirmed = true; // no password set, so no need to confirm\n                    updatePreferencesOrFinish(savedInstanceState != null);\n                } else {\n                    mWaitingForConfirmation = true;\n                }\n            }\n            addHeaderView();\n        }",
    "abstract_func_before": "@Override\n        public void onCreate(Bundle VAR_0) {\n            super.onCreate(VAR_0);\n\n            String VAR_1 = getActivity().getIntent().getAction();\n            VAR_2 = VAR_3.getFingerprintManagerOrNull(getActivity());\n            VAR_4 = (DevicePolicyManager) getSystemService(VAR_5.DEVICE_POLICY_SERVICE);\n            VAR_6 = VAR_7.getInstance();\n            VAR_8 = new ChooseLockSettingsHelper(this.getActivity());\n            VAR_9 = new LockPatternUtils(getActivity());\n            VAR_10 = VAR_11.equals(VAR_1)\n                    || VAR_12.equals(VAR_1);\n\n            /* COMMENT_0 */\n            final boolean VAR_13 = getActivity().getIntent()\n                .getBooleanExtra(VAR_14, true);\n            if (getActivity() instanceof ChooseLockGeneric.InternalActivity) {\n                VAR_15 = !VAR_13;\n                VAR_16 = getActivity().getIntent().getStringExtra(\n                        VAR_17.EXTRA_KEY_PASSWORD);\n            }\n            VAR_18 = getActivity().getIntent().getBooleanExtra(VAR_19, false);\n\n            VAR_20 = getActivity().getIntent().getBooleanExtra(\n                    VAR_17.EXTRA_KEY_HAS_CHALLENGE, false);\n            VAR_21 = getActivity().getIntent().getLongExtra(\n                    VAR_17.EXTRA_KEY_CHALLENGE, 0);\n            VAR_22 = getActivity().getIntent().getBooleanExtra(\n                    VAR_17.EXTRA_KEY_FOR_FINGERPRINT, false);\n            VAR_23 = getArguments() != null && getArguments().getBoolean(\n                    VAR_17.EXTRA_KEY_FOR_CHANGE_CRED_REQUIRED_FOR_BOOT);\n            VAR_24 = VAR_25.get(getActivity());\n\n            if (VAR_0 != null) {\n                VAR_15 = VAR_0.getBoolean(VAR_26);\n                VAR_27 = VAR_0.getBoolean(VAR_28);\n                VAR_29 = VAR_0.getInt(VAR_30);\n                VAR_31 = VAR_0.getBoolean(\n                        VAR_32);\n                if (VAR_16 == null) {\n                    VAR_16 = VAR_0.getString(\n                            VAR_17.EXTRA_KEY_PASSWORD);\n                }\n            }\n\n            /* COMMENT_1 */\n            /* COMMENT_2 */\n            /* COMMENT_3 */\n            /* COMMENT_4 */\n            VAR_33 = VAR_3.getSecureTargetUser(\n                    getActivity().getActivityToken(),\n                    VAR_25.get(getActivity()),\n                    getArguments(),\n                    getActivity().getIntent().getExtras()).getIdentifier();\n            VAR_34 = new ChooseLockGenericController(getContext(), VAR_33);\n            if (VAR_12.equals(VAR_1)\n                    && VAR_25.get(getActivity()).isManagedProfile(VAR_33)\n                    && VAR_9.isSeparateProfileChallengeEnabled(VAR_33)) {\n                getActivity().setTitle(VAR_35.string.lock_settings_picker_title_profile);\n            }\n\n            VAR_36 = VAR_37.get(getActivity(), VAR_33);\n\n            if (VAR_15) {\n                updatePreferencesOrFinish(VAR_0 != null);\n                if (VAR_23) {\n                    maybeEnableEncryption(VAR_9.getKeyguardStoredPasswordQuality(\n                            VAR_33), false);\n                }\n            } else if (!VAR_27) {\n                ChooseLockSettingsHelper VAR_38 =\n                        new ChooseLockSettingsHelper(this.getActivity(), this);\n                boolean VAR_39 =\n                        VAR_25.get(getActivity()).isManagedProfile(VAR_33)\n                        && !VAR_9.isSeparateProfileChallengeEnabled(VAR_33);\n                boolean VAR_40 = VAR_39 && !VAR_10;\n                if (VAR_40\n                        || !VAR_38.launchConfirmationActivity(VAR_41,\n                        getString(VAR_35.string.unlock_set_unlock_launch_picker_title), true, VAR_33)) {\n                    VAR_15 = true; /* COMMENT_5 */\n                    updatePreferencesOrFinish(VAR_0 != null);\n                } else {\n                    VAR_27 = true;\n                }\n            }\n            addHeaderView();\n        }",
    "func_graph_path_before": "android/5e43341b8c7eddce88f79c9a5068362927c05b54/ChooseLockGeneric.java/vul/before/0.json",
    "func": "@Override\n        public void onCreate(Bundle savedInstanceState) {\n            super.onCreate(savedInstanceState);\n            final Activity activity = getActivity();\n            if (!Utils.isDeviceProvisioned(activity) && !canRunBeforeDeviceProvisioned()) {\n                activity.finish();\n                return;\n            }\n\n            String chooseLockAction = getActivity().getIntent().getAction();\n            mFingerprintManager = Utils.getFingerprintManagerOrNull(getActivity());\n            mDPM = (DevicePolicyManager) getSystemService(Context.DEVICE_POLICY_SERVICE);\n            mKeyStore = KeyStore.getInstance();\n            mChooseLockSettingsHelper = new ChooseLockSettingsHelper(this.getActivity());\n            mLockPatternUtils = new LockPatternUtils(getActivity());\n            mIsSetNewPassword = ACTION_SET_NEW_PARENT_PROFILE_PASSWORD.equals(chooseLockAction)\n                    || ACTION_SET_NEW_PASSWORD.equals(chooseLockAction);\n\n            // Defaults to needing to confirm credentials\n            final boolean confirmCredentials = getActivity().getIntent()\n                .getBooleanExtra(CONFIRM_CREDENTIALS, true);\n            if (getActivity() instanceof ChooseLockGeneric.InternalActivity) {\n                mPasswordConfirmed = !confirmCredentials;\n                mUserPassword = getActivity().getIntent().getStringExtra(\n                        ChooseLockSettingsHelper.EXTRA_KEY_PASSWORD);\n            }\n            mHideDrawer = getActivity().getIntent().getBooleanExtra(EXTRA_HIDE_DRAWER, false);\n\n            mHasChallenge = getActivity().getIntent().getBooleanExtra(\n                    ChooseLockSettingsHelper.EXTRA_KEY_HAS_CHALLENGE, false);\n            mChallenge = getActivity().getIntent().getLongExtra(\n                    ChooseLockSettingsHelper.EXTRA_KEY_CHALLENGE, 0);\n            mForFingerprint = getActivity().getIntent().getBooleanExtra(\n                    ChooseLockSettingsHelper.EXTRA_KEY_FOR_FINGERPRINT, false);\n            mForChangeCredRequiredForBoot = getArguments() != null && getArguments().getBoolean(\n                    ChooseLockSettingsHelper.EXTRA_KEY_FOR_CHANGE_CRED_REQUIRED_FOR_BOOT);\n            mUserManager = UserManager.get(getActivity());\n\n            if (savedInstanceState != null) {\n                mPasswordConfirmed = savedInstanceState.getBoolean(PASSWORD_CONFIRMED);\n                mWaitingForConfirmation = savedInstanceState.getBoolean(WAITING_FOR_CONFIRMATION);\n                mEncryptionRequestQuality = savedInstanceState.getInt(ENCRYPT_REQUESTED_QUALITY);\n                mEncryptionRequestDisabled = savedInstanceState.getBoolean(\n                        ENCRYPT_REQUESTED_DISABLED);\n                if (mUserPassword == null) {\n                    mUserPassword = savedInstanceState.getString(\n                            ChooseLockSettingsHelper.EXTRA_KEY_PASSWORD);\n                }\n            }\n\n            // a) If this is started from other user, use that user id.\n            // b) If this is started from the same user, read the extra if this is launched\n            //    from Settings app itself.\n            // c) Otherwise, use UserHandle.myUserId().\n            mUserId = Utils.getSecureTargetUser(\n                    getActivity().getActivityToken(),\n                    UserManager.get(getActivity()),\n                    getArguments(),\n                    getActivity().getIntent().getExtras()).getIdentifier();\n            mController = new ChooseLockGenericController(getContext(), mUserId);\n            if (ACTION_SET_NEW_PASSWORD.equals(chooseLockAction)\n                    && UserManager.get(getActivity()).isManagedProfile(mUserId)\n                    && mLockPatternUtils.isSeparateProfileChallengeEnabled(mUserId)) {\n                getActivity().setTitle(R.string.lock_settings_picker_title_profile);\n            }\n\n            mManagedPasswordProvider = ManagedLockPasswordProvider.get(getActivity(), mUserId);\n\n            if (mPasswordConfirmed) {\n                updatePreferencesOrFinish(savedInstanceState != null);\n                if (mForChangeCredRequiredForBoot) {\n                    maybeEnableEncryption(mLockPatternUtils.getKeyguardStoredPasswordQuality(\n                            mUserId), false);\n                }\n            } else if (!mWaitingForConfirmation) {\n                ChooseLockSettingsHelper helper =\n                        new ChooseLockSettingsHelper(this.getActivity(), this);\n                boolean managedProfileWithUnifiedLock =\n                        UserManager.get(getActivity()).isManagedProfile(mUserId)\n                        && !mLockPatternUtils.isSeparateProfileChallengeEnabled(mUserId);\n                boolean skipConfirmation = managedProfileWithUnifiedLock && !mIsSetNewPassword;\n                if (skipConfirmation\n                        || !helper.launchConfirmationActivity(CONFIRM_EXISTING_REQUEST,\n                        getString(R.string.unlock_set_unlock_launch_picker_title), true, mUserId)) {\n                    mPasswordConfirmed = true; // no password set, so no need to confirm\n                    updatePreferencesOrFinish(savedInstanceState != null);\n                } else {\n                    mWaitingForConfirmation = true;\n                }\n            }\n            addHeaderView();\n        }",
    "abstract_func": "@Override\n        public void onCreate(Bundle VAR_0) {\n            super.onCreate(VAR_0);\n            final Activity VAR_1 = getActivity();\n            if (!VAR_2.isDeviceProvisioned(VAR_1) && !canRunBeforeDeviceProvisioned()) {\n                VAR_1.finish();\n                return;\n            }\n\n            String VAR_3 = getActivity().getIntent().getAction();\n            VAR_4 = VAR_2.getFingerprintManagerOrNull(getActivity());\n            VAR_5 = (DevicePolicyManager) getSystemService(VAR_6.DEVICE_POLICY_SERVICE);\n            VAR_7 = VAR_8.getInstance();\n            VAR_9 = new ChooseLockSettingsHelper(this.getActivity());\n            VAR_10 = new LockPatternUtils(getActivity());\n            VAR_11 = VAR_12.equals(VAR_3)\n                    || VAR_13.equals(VAR_3);\n\n            /* COMMENT_0 */\n            final boolean VAR_14 = getActivity().getIntent()\n                .getBooleanExtra(VAR_15, true);\n            if (getActivity() instanceof ChooseLockGeneric.InternalActivity) {\n                VAR_16 = !VAR_14;\n                VAR_17 = getActivity().getIntent().getStringExtra(\n                        VAR_18.EXTRA_KEY_PASSWORD);\n            }\n            VAR_19 = getActivity().getIntent().getBooleanExtra(VAR_20, false);\n\n            VAR_21 = getActivity().getIntent().getBooleanExtra(\n                    VAR_18.EXTRA_KEY_HAS_CHALLENGE, false);\n            VAR_22 = getActivity().getIntent().getLongExtra(\n                    VAR_18.EXTRA_KEY_CHALLENGE, 0);\n            VAR_23 = getActivity().getIntent().getBooleanExtra(\n                    VAR_18.EXTRA_KEY_FOR_FINGERPRINT, false);\n            VAR_24 = getArguments() != null && getArguments().getBoolean(\n                    VAR_18.EXTRA_KEY_FOR_CHANGE_CRED_REQUIRED_FOR_BOOT);\n            VAR_25 = VAR_26.get(getActivity());\n\n            if (VAR_0 != null) {\n                VAR_16 = VAR_0.getBoolean(VAR_27);\n                VAR_28 = VAR_0.getBoolean(VAR_29);\n                VAR_30 = VAR_0.getInt(VAR_31);\n                VAR_32 = VAR_0.getBoolean(\n                        VAR_33);\n                if (VAR_17 == null) {\n                    VAR_17 = VAR_0.getString(\n                            VAR_18.EXTRA_KEY_PASSWORD);\n                }\n            }\n\n            /* COMMENT_1 */\n            /* COMMENT_2 */\n            /* COMMENT_3 */\n            /* COMMENT_4 */\n            VAR_34 = VAR_2.getSecureTargetUser(\n                    getActivity().getActivityToken(),\n                    VAR_26.get(getActivity()),\n                    getArguments(),\n                    getActivity().getIntent().getExtras()).getIdentifier();\n            VAR_35 = new ChooseLockGenericController(getContext(), VAR_34);\n            if (VAR_13.equals(VAR_3)\n                    && VAR_26.get(getActivity()).isManagedProfile(VAR_34)\n                    && VAR_10.isSeparateProfileChallengeEnabled(VAR_34)) {\n                getActivity().setTitle(VAR_36.string.lock_settings_picker_title_profile);\n            }\n\n            VAR_37 = VAR_38.get(getActivity(), VAR_34);\n\n            if (VAR_16) {\n                updatePreferencesOrFinish(VAR_0 != null);\n                if (VAR_24) {\n                    maybeEnableEncryption(VAR_10.getKeyguardStoredPasswordQuality(\n                            VAR_34), false);\n                }\n            } else if (!VAR_28) {\n                ChooseLockSettingsHelper VAR_39 =\n                        new ChooseLockSettingsHelper(this.getActivity(), this);\n                boolean VAR_40 =\n                        VAR_26.get(getActivity()).isManagedProfile(VAR_34)\n                        && !VAR_10.isSeparateProfileChallengeEnabled(VAR_34);\n                boolean VAR_41 = VAR_40 && !VAR_11;\n                if (VAR_41\n                        || !VAR_39.launchConfirmationActivity(VAR_42,\n                        getString(VAR_36.string.unlock_set_unlock_launch_picker_title), true, VAR_34)) {\n                    VAR_16 = true; /* COMMENT_5 */\n                    updatePreferencesOrFinish(VAR_0 != null);\n                } else {\n                    VAR_28 = true;\n                }\n            }\n            addHeaderView();\n        }",
    "func_graph_path": "android/5e43341b8c7eddce88f79c9a5068362927c05b54/ChooseLockGeneric.java/vul/after/0.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -1,6 +1,11 @@\n @Override\n         public void onCreate(Bundle savedInstanceState) {\n             super.onCreate(savedInstanceState);\n+            final Activity activity = getActivity();\n+            if (!Utils.isDeviceProvisioned(activity) && !canRunBeforeDeviceProvisioned()) {\n+                activity.finish();\n+                return;\n+            }\n \n             String chooseLockAction = getActivity().getIntent().getAction();\n             mFingerprintManager = Utils.getFingerprintManagerOrNull(getActivity());",
    "diff_line_info": {
        "deleted_lines": [],
        "added_lines": [
            "            final Activity activity = getActivity();",
            "            if (!Utils.isDeviceProvisioned(activity) && !canRunBeforeDeviceProvisioned()) {",
            "                activity.finish();",
            "                return;",
            "            }"
        ]
    },
    "is_vul": true,
    "pr_url": null,
    "description": "no more info"
}