{
    "cve_id": "CVE-2021-39180",
    "cwe_ids": [
        "CWE-22"
    ],
    "cvss_vector": "AV:N/AC:L/Au:S/C:C/I:C/A:C",
    "cvss_is_v3": false,
    "repo_name": "OpenOLAT",
    "commit_msg": "OO-5549: fix the wiki import and add some unit tests",
    "commit_hash": "699490be8e931af0ef1f135c55384db1f4232637",
    "git_url": "https://github.com/OpenOLAT/OpenOLAT/commit/699490be8e931af0ef1f135c55384db1f4232637",
    "file_path": "src/main/java/org/olat/fileresource/types/FileResource.java",
    "func_name": "copyResource",
    "func_before": "public static boolean copyResource(File file, String filename, File targetDirectory, PathMatcher filter) {\n\t\ttry {\n\t\t\tPath path = getResource(file, filename);\n\t\t\tif(path == null) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\tPath destDir = targetDirectory.toPath();\n\t\t\tFiles.walkFileTree(path, new CopyVisitor(path, destDir, filter));\n\t\t\tPathUtils.closeSubsequentFS(path);\n\t\t\treturn true;\n\t\t} catch (IOException e) {\n\t\t\tlog.error(\"\", e);\n\t\t\treturn false;\n\t\t}\n\t}",
    "abstract_func_before": "public static boolean copyResource(File VAR_0, String VAR_1, File VAR_2, PathMatcher VAR_3) {\n\t\ttry {\n\t\t\tPath VAR_4 = getResource(VAR_0, VAR_1);\n\t\t\tif(VAR_4 == null) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\tPath VAR_5 = VAR_2.toPath();\n\t\t\tVAR_6.walkFileTree(VAR_4, new CopyVisitor(VAR_4, VAR_5, VAR_3));\n\t\t\tVAR_7.closeSubsequentFS(VAR_4);\n\t\t\treturn true;\n\t\t} catch (IOException VAR_8) {\n\t\t\tVAR_9.error(\"\", VAR_8);\n\t\t\treturn false;\n\t\t}\n\t}",
    "func_graph_path_before": "OpenOLAT/699490be8e931af0ef1f135c55384db1f4232637/FileResource.java/vul/before/0.json",
    "func": "public static boolean copyResource(File file, String filename, File targetDirectory, PathMatcher filter) {\n\t\ttry {\n\t\t\tPath path = getResource(file, filename);\n\t\t\tif(path == null) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\tPath destDir = targetDirectory.toPath();\n\t\t\tFiles.walkFileTree(path, EnumSet.noneOf(FileVisitOption.class), 24, new CopyVisitor(path, destDir, filter));\n\t\t\tPathUtils.closeSubsequentFS(path);\n\t\t\treturn true;\n\t\t} catch (IOException e) {\n\t\t\tlog.error(\"\", e);\n\t\t\treturn false;\n\t\t}\n\t}",
    "abstract_func": "public static boolean copyResource(File VAR_0, String VAR_1, File VAR_2, PathMatcher VAR_3) {\n\t\ttry {\n\t\t\tPath VAR_4 = getResource(VAR_0, VAR_1);\n\t\t\tif(VAR_4 == null) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\tPath VAR_5 = VAR_2.toPath();\n\t\t\tVAR_6.walkFileTree(VAR_4, VAR_7.noneOf(FileVisitOption.class), 24, new CopyVisitor(VAR_4, VAR_5, VAR_3));\n\t\t\tVAR_8.closeSubsequentFS(VAR_4);\n\t\t\treturn true;\n\t\t} catch (IOException VAR_9) {\n\t\t\tVAR_10.error(\"\", VAR_9);\n\t\t\treturn false;\n\t\t}\n\t}",
    "func_graph_path": "OpenOLAT/699490be8e931af0ef1f135c55384db1f4232637/FileResource.java/vul/after/0.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -6,7 +6,7 @@\n \t\t\t}\n \t\t\t\n \t\t\tPath destDir = targetDirectory.toPath();\n-\t\t\tFiles.walkFileTree(path, new CopyVisitor(path, destDir, filter));\n+\t\t\tFiles.walkFileTree(path, EnumSet.noneOf(FileVisitOption.class), 24, new CopyVisitor(path, destDir, filter));\n \t\t\tPathUtils.closeSubsequentFS(path);\n \t\t\treturn true;\n \t\t} catch (IOException e) {",
    "diff_line_info": {
        "deleted_lines": [
            "\t\t\tFiles.walkFileTree(path, new CopyVisitor(path, destDir, filter));"
        ],
        "added_lines": [
            "\t\t\tFiles.walkFileTree(path, EnumSet.noneOf(FileVisitOption.class), 24, new CopyVisitor(path, destDir, filter));"
        ]
    },
    "is_vul": true,
    "pr_url": null,
    "description": "no more info"
}