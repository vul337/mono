{
    "cve_id": "CVE-2021-25959",
    "cwe_ids": [
        "CWE-79"
    ],
    "cvss_vector": "AV:N/AC:M/Au:N/C:N/I:P/A:N",
    "cvss_is_v3": false,
    "repo_name": "opencrx",
    "commit_msg": "Fixes #94",
    "commit_hash": "14e75f95e5f56fbe7ee897bdf5d858788072e818",
    "git_url": "https://github.com/opencrx/opencrx/commit/14e75f95e5f56fbe7ee897bdf5d858788072e818",
    "file_path": "core/src/main/java/org/opencrx/kernel/tools/CopyDb.java",
    "func_name": "copyDbObject",
    "func_before": "public static void copyDbObject(\n\t\tString dbObject, \n\t\tboolean useSuffix, \n\t\tConnection connSource, \n\t\tConnection connTarget, \n\t\tList<String> valuePatterns,\n\t\tList<String> valueReplacements,\n\t\tPrintStream out\n\t) throws SQLException {\n\t\tString currentStatement = null;\n\t\tDatabase_2 db = new Database_2();\n\t\ttry {\n\t\t\tDatabase_2[] plugins = Utils.getDatabasePlugIns();\n\t\t\tdb = plugins[0];\n\t\t} catch (Exception e) {\n\t\t\tout.println(\"Can not activate database plugin: \" + e.getMessage());\n\t\t}\n\t\ttry {\n\t\t\t// Delete all rows from target\n\t\t\tPreparedStatement s = connTarget.prepareStatement(currentStatement = \"DELETE FROM \" + dbObject + (useSuffix ? \"_\" : \"\"));\n\t\t\ts.executeUpdate();\n\t\t\ts.close();\n\t\t\t// Read all rows from source\n\t\t\ts = connSource.prepareStatement(currentStatement = \"SELECT * FROM \" + dbObject + (useSuffix ? \"_\" : \"\"));\n\t\t\tResultSet rs = s.executeQuery();\n\t\t\tif(rs != null) {\n\t\t\t\tResultSetMetaData rsm = rs.getMetaData();\n\t\t\t\tFastResultSet frs = new FastResultSet(rs);\n\t\t\t\tint nRows = 0;\n\t\t\t\twhile (frs.next()) {\n\t\t\t\t\t// Read row from source and prepare INSERT statement\n\t\t\t\t\tString statement = \"INSERT INTO \" + dbObject + (useSuffix ? \"_\" : \"\") + \" \";\n\t\t\t\t\tList<Object> statementParameters = new ArrayList<Object>();\n\t\t\t\t\tList<String> processTargetColumnNames = new ArrayList<String>();\n\t\t\t\t\tfor (int j = 0; j < rsm.getColumnCount(); j++) {\n\t\t\t\t\t\tString columnName = rsm.getColumnName(j + 1);\n\t\t\t\t\t\tif(frs.getObject(columnName) != null) {\n\t\t\t\t\t\t\tString mappedColumnName = CopyDb.mapColumnName(connTarget, dbObject, columnName);\n\t\t\t\t\t\t\tif(mappedColumnName != null) {\n\t\t\t\t\t\t\t\tstatement += (statementParameters.size() == 0 ? \" (\" : \", \") + mappedColumnName;\n\t\t\t\t\t\t\t\tprocessTargetColumnNames.add(mappedColumnName);\n\t\t\t\t\t\t\t\tif(frs.getObject(columnName) instanceof java.sql.Clob) {\n\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\tstatementParameters.add(CopyDb.getStringFromClob((java.sql.Clob) frs.getObject(columnName)));\n\t\t\t\t\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\t\t\t\t\tout.println(\"Reading Clob failed. Reason: \" + e.getMessage());\n\t\t\t\t\t\t\t\t\t\tout.println(\"statement=\" + statement);\n\t\t\t\t\t\t\t\t\t\tout.println(\"parameters=\" + statementParameters);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} else if(frs.getObject(columnName) instanceof java.sql.Blob) {\n\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\tstatementParameters.add(CopyDb.getBytesFromBlob((java.sql.Blob) frs.getObject(columnName)));\n\t\t\t\t\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\t\t\t\t\tout.println(\"Reading Blob failed. Reason: \" + e.getMessage());\n\t\t\t\t\t\t\t\t\t\tout.println(\"statement=\" + statement);\n\t\t\t\t\t\t\t\t\t\tout.println(\"parameters=\" + statementParameters);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tstatementParameters.add(\n\t\t\t\t\t\t\t\t\t\tCopyDb.mapColumnValue(\n\t\t\t\t\t\t\t\t\t\t\tconnSource,\n\t\t\t\t\t\t\t\t\t\t\tdbObject,\n\t\t\t\t\t\t\t\t\t\t\tcolumnName,\n\t\t\t\t\t\t\t\t\t\t\tfrs.getObject(columnName),\n\t\t\t\t\t\t\t\t\t\t\tvaluePatterns,\n\t\t\t\t\t\t\t\t\t\t\tvalueReplacements\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tstatement += \") VALUES (\";\n\t\t\t\t\tfor (int j = 0; j < statementParameters.size(); j++) {\n\t\t\t\t\t\tstatement += j == 0 ? \"?\" : \", ?\";\n\t\t\t\t\t}\n\t\t\t\t\tstatement += \")\";\n\t\t\t\t\t// Add row to target\n\t\t\t\t\ttry {\n\t\t\t\t\t\tPreparedStatement t = connTarget.prepareStatement(currentStatement = statement);\n\t\t\t\t\t\tfor (int j = 0; j < statementParameters.size(); j++) {\n\t\t\t\t\t\t\tObject parameter = statementParameters.get(j);\n\t\t\t\t\t\t\tif(\"oracle.sql.TIMESTAMP\".equals(parameter.getClass().getName())) {\n\t\t\t\t\t\t\t\tMethod timestampValueMethod = parameter.getClass().getMethod(\"timestampValue\", new Class[] {});\n\t\t\t\t\t\t\t\tparameter = timestampValueMethod.invoke(parameter, new Object[] {});\n\t\t\t\t\t\t\t} else if(\"microsoft.sql.DateTimeOffset\".equals(parameter.getClass().getName())) {\n\t\t\t\t\t\t\t\tMethod timestampValueMethod = parameter.getClass().getMethod(\"getTimestamp\", new Class[] {});\n\t\t\t\t\t\t\t\tparameter = timestampValueMethod.invoke(parameter, new Object[] {});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(parameter instanceof java.sql.Timestamp) {\n\t\t\t\t\t\t\t\tt.setTimestamp(j + 1, (java.sql.Timestamp) parameter);\n\t\t\t\t\t\t\t} else if(parameter instanceof java.sql.Date) {\n\t\t\t\t\t\t\t\tt.setDate(j + 1, (java.sql.Date) parameter);\n\t\t\t\t\t\t\t} else if(parameter instanceof Double) {\n\t\t\t\t\t\t\t\tt.setBigDecimal(j + 1, new BigDecimal((Double)parameter));\n\t\t\t\t\t\t\t} else if(parameter instanceof Float) {\n\t\t\t\t\t\t\t\tt.setBigDecimal(j + 1, new BigDecimal((Float)parameter));\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tdb.setPreparedStatementValue(connTarget, t, j + 1, parameter);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tt.executeUpdate();\n\t\t\t\t\t\tt.close();\n\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\tnew ServiceException(e).log();\n\t\t\t\t\t\tout.println(\"Insert failed. Reason: \" + e.getMessage());\n\t\t\t\t\t\tout.println(\"statement=\" + statement);\n\t\t\t\t\t\tout.println(\"parameters=\" + statementParameters);\n\t\t\t\t\t}\n\t\t\t\t\tnRows++;\n\t\t\t\t\tif(nRows % 1000 == 0) {\n\t\t\t\t\t\tout.println(nRows + \" rows copied\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\trs.close();\n\t\t\t} else {\n\t\t\t\tout.println(\"Did not copy table (result set is null). Statement: \" + currentStatement);\n\t\t\t}\n\t\t\ts.close();\n\t\t} catch (Exception e) {\n\t\t\tnew ServiceException(e).log();\n\t\t\tout.println(\"Can not copy table (see log for more info). Statement: \" + currentStatement);\n\t\t}\n\t}",
    "abstract_func_before": "public static void copyDbObject(\n\t\tString VAR_0, \n\t\tboolean VAR_1, \n\t\tConnection VAR_2, \n\t\tConnection VAR_3, \n\t\tList<String> VAR_4,\n\t\tList<String> VAR_5,\n\t\tPrintStream VAR_6\n\t) throws SQLException {\n\t\tString VAR_7 = null;\n\t\tDatabase_2 VAR_8 = new Database_2();\n\t\ttry {\n\t\t\tDatabase_2[] VAR_9 = VAR_10.getDatabasePlugIns();\n\t\t\tVAR_8 = VAR_9[0];\n\t\t} catch (Exception VAR_11) {\n\t\t\tVAR_6.println(\"Can not activate database plugin: \" + VAR_11.getMessage());\n\t\t}\n\t\ttry {\n\t\t\t/* COMMENT_0 */\n\t\t\tPreparedStatement VAR_12 = VAR_3.prepareStatement(VAR_7 = \"DELETE FROM \" + VAR_0 + (VAR_1 ? \"_\" : \"\"));\n\t\t\tVAR_12.executeUpdate();\n\t\t\tVAR_12.close();\n\t\t\t/* COMMENT_1 */\n\t\t\tVAR_12 = VAR_2.prepareStatement(VAR_7 = \"SELECT * FROM \" + VAR_0 + (VAR_1 ? \"_\" : \"\"));\n\t\t\tResultSet VAR_13 = VAR_12.executeQuery();\n\t\t\tif(VAR_13 != null) {\n\t\t\t\tResultSetMetaData VAR_14 = VAR_13.getMetaData();\n\t\t\t\tFastResultSet VAR_15 = new FastResultSet(VAR_13);\n\t\t\t\tint VAR_16 = 0;\n\t\t\t\twhile (VAR_15.next()) {\n\t\t\t\t\t/* COMMENT_2 */\n\t\t\t\t\tString VAR_17 = \"INSERT INTO \" + VAR_0 + (VAR_1 ? \"_\" : \"\") + \" \";\n\t\t\t\t\tList<Object> VAR_18 = new ArrayList<Object>();\n\t\t\t\t\tList<String> VAR_19 = new ArrayList<String>();\n\t\t\t\t\tfor (int VAR_20 = 0; VAR_20 < VAR_14.getColumnCount(); VAR_20++) {\n\t\t\t\t\t\tString VAR_21 = VAR_14.getColumnName(VAR_20 + 1);\n\t\t\t\t\t\tif(VAR_15.getObject(VAR_21) != null) {\n\t\t\t\t\t\t\tString VAR_22 = VAR_23.mapColumnName(VAR_3, VAR_0, VAR_21);\n\t\t\t\t\t\t\tif(VAR_22 != null) {\n\t\t\t\t\t\t\t\tVAR_17 += (VAR_18.size() == 0 ? \" (\" : \", \") + VAR_22;\n\t\t\t\t\t\t\t\tVAR_19.add(VAR_22);\n\t\t\t\t\t\t\t\tif(VAR_15.getObject(VAR_21) instanceof java.sql.Clob) {\n\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\tVAR_18.add(VAR_23.getStringFromClob((java.sql.Clob) VAR_15.getObject(VAR_21)));\n\t\t\t\t\t\t\t\t\t} catch (Exception VAR_11) {\n\t\t\t\t\t\t\t\t\t\tVAR_6.println(\"Reading Clob failed. Reason: \" + VAR_11.getMessage());\n\t\t\t\t\t\t\t\t\t\tVAR_6.println(\"statement=\" + VAR_17);\n\t\t\t\t\t\t\t\t\t\tVAR_6.println(\"parameters=\" + VAR_18);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} else if(VAR_15.getObject(VAR_21) instanceof java.sql.Blob) {\n\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\tVAR_18.add(VAR_23.getBytesFromBlob((java.sql.Blob) VAR_15.getObject(VAR_21)));\n\t\t\t\t\t\t\t\t\t} catch (Exception VAR_11) {\n\t\t\t\t\t\t\t\t\t\tVAR_6.println(\"Reading Blob failed. Reason: \" + VAR_11.getMessage());\n\t\t\t\t\t\t\t\t\t\tVAR_6.println(\"statement=\" + VAR_17);\n\t\t\t\t\t\t\t\t\t\tVAR_6.println(\"parameters=\" + VAR_18);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tVAR_18.add(\n\t\t\t\t\t\t\t\t\t\tVAR_23.mapColumnValue(\n\t\t\t\t\t\t\t\t\t\t\tVAR_2,\n\t\t\t\t\t\t\t\t\t\t\tVAR_0,\n\t\t\t\t\t\t\t\t\t\t\tVAR_21,\n\t\t\t\t\t\t\t\t\t\t\tVAR_15.getObject(VAR_21),\n\t\t\t\t\t\t\t\t\t\t\tVAR_4,\n\t\t\t\t\t\t\t\t\t\t\tVAR_5\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tVAR_17 += \") VALUES (\";\n\t\t\t\t\tfor (int VAR_20 = 0; VAR_20 < VAR_18.size(); VAR_20++) {\n\t\t\t\t\t\tVAR_17 += VAR_20 == 0 ? \"?\" : \", ?\";\n\t\t\t\t\t}\n\t\t\t\t\tVAR_17 += \")\";\n\t\t\t\t\t/* COMMENT_3 */\n\t\t\t\t\ttry {\n\t\t\t\t\t\tPreparedStatement VAR_24 = VAR_3.prepareStatement(VAR_7 = VAR_17);\n\t\t\t\t\t\tfor (int VAR_20 = 0; VAR_20 < VAR_18.size(); VAR_20++) {\n\t\t\t\t\t\t\tObject VAR_25 = VAR_18.get(VAR_20);\n\t\t\t\t\t\t\tif(\"oracle.sql.TIMESTAMP\".equals(VAR_25.getClass().getName())) {\n\t\t\t\t\t\t\t\tMethod VAR_26 = VAR_25.getClass().getMethod(\"timestampValue\", new Class[] {});\n\t\t\t\t\t\t\t\tVAR_25 = VAR_26.invoke(VAR_25, new Object[] {});\n\t\t\t\t\t\t\t} else if(\"microsoft.sql.DateTimeOffset\".equals(VAR_25.getClass().getName())) {\n\t\t\t\t\t\t\t\tMethod VAR_26 = VAR_25.getClass().getMethod(\"getTimestamp\", new Class[] {});\n\t\t\t\t\t\t\t\tVAR_25 = VAR_26.invoke(VAR_25, new Object[] {});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(VAR_25 instanceof java.sql.Timestamp) {\n\t\t\t\t\t\t\t\tVAR_24.setTimestamp(VAR_20 + 1, (java.sql.Timestamp) VAR_25);\n\t\t\t\t\t\t\t} else if(VAR_25 instanceof java.sql.Date) {\n\t\t\t\t\t\t\t\tVAR_24.setDate(VAR_20 + 1, (java.sql.Date) VAR_25);\n\t\t\t\t\t\t\t} else if(VAR_25 instanceof Double) {\n\t\t\t\t\t\t\t\tVAR_24.setBigDecimal(VAR_20 + 1, new BigDecimal((Double)VAR_25));\n\t\t\t\t\t\t\t} else if(VAR_25 instanceof Float) {\n\t\t\t\t\t\t\t\tVAR_24.setBigDecimal(VAR_20 + 1, new BigDecimal((Float)VAR_25));\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tVAR_8.setPreparedStatementValue(VAR_3, VAR_24, VAR_20 + 1, VAR_25);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tVAR_24.executeUpdate();\n\t\t\t\t\t\tVAR_24.close();\n\t\t\t\t\t} catch (Exception VAR_11) {\n\t\t\t\t\t\tnew ServiceException(VAR_11).log();\n\t\t\t\t\t\tVAR_6.println(\"Insert failed. Reason: \" + VAR_11.getMessage());\n\t\t\t\t\t\tVAR_6.println(\"statement=\" + VAR_17);\n\t\t\t\t\t\tVAR_6.println(\"parameters=\" + VAR_18);\n\t\t\t\t\t}\n\t\t\t\t\tVAR_16++;\n\t\t\t\t\tif(VAR_16 % 1000 == 0) {\n\t\t\t\t\t\tVAR_6.println(VAR_16 + \" rows copied\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tVAR_13.close();\n\t\t\t} else {\n\t\t\t\tVAR_6.println(\"Did not copy table (result set is null). Statement: \" + VAR_7);\n\t\t\t}\n\t\t\tVAR_12.close();\n\t\t} catch (Exception VAR_11) {\n\t\t\tnew ServiceException(VAR_11).log();\n\t\t\tVAR_6.println(\"Can not copy table (see log for more info). Statement: \" + VAR_7);\n\t\t}\n\t}",
    "func_graph_path_before": "opencrx/14e75f95e5f56fbe7ee897bdf5d858788072e818/CopyDb.java/vul/before/1.json",
    "func": "public static void copyDbObject(\n\t\tString dbObject, \n\t\tboolean useSuffix, \n\t\tConnection connSource, \n\t\tConnection connTarget, \n\t\tList<String> valuePatterns,\n\t\tList<String> valueReplacements,\n\t\tPrintStream out\n\t) throws SQLException {\n\t\tString currentStatement = null;\n\t\tDatabase_2 db = new Database_2();\n\t\ttry {\n\t\t\tDatabase_2[] plugins = Utils.getDatabasePlugIns();\n\t\t\tdb = plugins[0];\n\t\t} catch (Exception e) {\n\t\t\tout.println(\"Can not activate database plugin: \" + e.getMessage());\n\t\t}\n\t\ttry {\n\t\t\t// Delete all rows from target\n\t\t\tPreparedStatement s = connTarget.prepareStatement(currentStatement = \"DELETE FROM \" + dbObject + (useSuffix ? \"_\" : \"\"));\n\t\t\ts.executeUpdate();\n\t\t\ts.close();\n\t\t\t// Read all rows from source\n\t\t\ts = connSource.prepareStatement(currentStatement = \"SELECT * FROM \" + dbObject + (useSuffix ? \"_\" : \"\"));\n\t\t\ts.setFetchSize(100);\n\t\t\tResultSet rs = s.executeQuery();\n\t\t\tif(rs != null) {\n\t\t\t\tResultSetMetaData rsm = rs.getMetaData();\n\t\t\t\tFastResultSet frs = new FastResultSet(rs);\n\t\t\t\tint nRows = 0;\n\t\t\t\twhile (frs.next()) {\n\t\t\t\t\t// Read row from source and prepare INSERT statement\n\t\t\t\t\tString statement = \"INSERT INTO \" + dbObject + (useSuffix ? \"_\" : \"\") + \" \";\n\t\t\t\t\tList<Object> statementParameters = new ArrayList<Object>();\n\t\t\t\t\tList<String> processTargetColumnNames = new ArrayList<String>();\n\t\t\t\t\tfor (int j = 0; j < rsm.getColumnCount(); j++) {\n\t\t\t\t\t\tString columnName = rsm.getColumnName(j + 1);\n\t\t\t\t\t\tif(frs.getObject(columnName) != null) {\n\t\t\t\t\t\t\tString mappedColumnName = CopyDb.mapColumnName(connTarget, dbObject, columnName);\n\t\t\t\t\t\t\tif(mappedColumnName != null) {\n\t\t\t\t\t\t\t\tstatement += (statementParameters.size() == 0 ? \" (\" : \", \") + mappedColumnName;\n\t\t\t\t\t\t\t\tprocessTargetColumnNames.add(mappedColumnName);\n\t\t\t\t\t\t\t\tif(frs.getObject(columnName) instanceof java.sql.Clob) {\n\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\tstatementParameters.add(CopyDb.getStringFromClob((java.sql.Clob) frs.getObject(columnName)));\n\t\t\t\t\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\t\t\t\t\tout.println(\"Reading Clob failed. Reason: \" + e.getMessage());\n\t\t\t\t\t\t\t\t\t\tout.println(\"statement=\" + statement);\n\t\t\t\t\t\t\t\t\t\tout.println(\"parameters=\" + statementParameters);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} else if(frs.getObject(columnName) instanceof java.sql.Blob) {\n\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\tstatementParameters.add(CopyDb.getBytesFromBlob((java.sql.Blob) frs.getObject(columnName)));\n\t\t\t\t\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\t\t\t\t\tout.println(\"Reading Blob failed. Reason: \" + e.getMessage());\n\t\t\t\t\t\t\t\t\t\tout.println(\"statement=\" + statement);\n\t\t\t\t\t\t\t\t\t\tout.println(\"parameters=\" + statementParameters);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tstatementParameters.add(\n\t\t\t\t\t\t\t\t\t\tCopyDb.mapColumnValue(\n\t\t\t\t\t\t\t\t\t\t\tconnSource,\n\t\t\t\t\t\t\t\t\t\t\tdbObject,\n\t\t\t\t\t\t\t\t\t\t\tcolumnName,\n\t\t\t\t\t\t\t\t\t\t\tfrs.getObject(columnName),\n\t\t\t\t\t\t\t\t\t\t\tvaluePatterns,\n\t\t\t\t\t\t\t\t\t\t\tvalueReplacements\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tstatement += \") VALUES (\";\n\t\t\t\t\tfor (int j = 0; j < statementParameters.size(); j++) {\n\t\t\t\t\t\tstatement += j == 0 ? \"?\" : \", ?\";\n\t\t\t\t\t}\n\t\t\t\t\tstatement += \")\";\n\t\t\t\t\t// Add row to target\n\t\t\t\t\ttry {\n\t\t\t\t\t\tPreparedStatement t = connTarget.prepareStatement(currentStatement = statement);\n\t\t\t\t\t\tfor (int j = 0; j < statementParameters.size(); j++) {\n\t\t\t\t\t\t\tObject parameter = statementParameters.get(j);\n\t\t\t\t\t\t\tif(\"oracle.sql.TIMESTAMP\".equals(parameter.getClass().getName())) {\n\t\t\t\t\t\t\t\tMethod timestampValueMethod = parameter.getClass().getMethod(\"timestampValue\", new Class[] {});\n\t\t\t\t\t\t\t\tparameter = timestampValueMethod.invoke(parameter, new Object[] {});\n\t\t\t\t\t\t\t} else if(\"microsoft.sql.DateTimeOffset\".equals(parameter.getClass().getName())) {\n\t\t\t\t\t\t\t\tMethod timestampValueMethod = parameter.getClass().getMethod(\"getTimestamp\", new Class[] {});\n\t\t\t\t\t\t\t\tparameter = timestampValueMethod.invoke(parameter, new Object[] {});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(parameter instanceof java.sql.Timestamp) {\n\t\t\t\t\t\t\t\tt.setTimestamp(j + 1, (java.sql.Timestamp) parameter);\n\t\t\t\t\t\t\t} else if(parameter instanceof java.sql.Date) {\n\t\t\t\t\t\t\t\tt.setDate(j + 1, (java.sql.Date) parameter);\n\t\t\t\t\t\t\t} else if(parameter instanceof Double) {\n\t\t\t\t\t\t\t\tt.setBigDecimal(j + 1, new BigDecimal((Double)parameter));\n\t\t\t\t\t\t\t} else if(parameter instanceof Float) {\n\t\t\t\t\t\t\t\tt.setBigDecimal(j + 1, new BigDecimal((Float)parameter));\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tdb.setPreparedStatementValue(connTarget, t, j + 1, parameter);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tt.executeUpdate();\n\t\t\t\t\t\tt.close();\n\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\tnew ServiceException(e).log();\n\t\t\t\t\t\tout.println(\"Insert failed. Reason: \" + e.getMessage());\n\t\t\t\t\t\tout.println(\"statement=\" + statement);\n\t\t\t\t\t\tout.println(\"parameters=\" + statementParameters);\n\t\t\t\t\t}\n\t\t\t\t\tnRows++;\n\t\t\t\t\tif(nRows % 1000 == 0) {\n\t\t\t\t\t\tout.println(nRows + \" rows copied\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\trs.close();\n\t\t\t} else {\n\t\t\t\tout.println(\"Did not copy table (result set is null). Statement: \" + currentStatement);\n\t\t\t}\n\t\t\ts.close();\n\t\t} catch (Exception e) {\n\t\t\tnew ServiceException(e).log();\n\t\t\tout.println(\"Can not copy table (see log for more info). Statement: \" + currentStatement);\n\t\t}\n\t}",
    "abstract_func": "public static void copyDbObject(\n\t\tString VAR_0, \n\t\tboolean VAR_1, \n\t\tConnection VAR_2, \n\t\tConnection VAR_3, \n\t\tList<String> VAR_4,\n\t\tList<String> VAR_5,\n\t\tPrintStream VAR_6\n\t) throws SQLException {\n\t\tString VAR_7 = null;\n\t\tDatabase_2 VAR_8 = new Database_2();\n\t\ttry {\n\t\t\tDatabase_2[] VAR_9 = VAR_10.getDatabasePlugIns();\n\t\t\tVAR_8 = VAR_9[0];\n\t\t} catch (Exception VAR_11) {\n\t\t\tVAR_6.println(\"Can not activate database plugin: \" + VAR_11.getMessage());\n\t\t}\n\t\ttry {\n\t\t\t/* COMMENT_0 */\n\t\t\tPreparedStatement VAR_12 = VAR_3.prepareStatement(VAR_7 = \"DELETE FROM \" + VAR_0 + (VAR_1 ? \"_\" : \"\"));\n\t\t\tVAR_12.executeUpdate();\n\t\t\tVAR_12.close();\n\t\t\t/* COMMENT_1 */\n\t\t\tVAR_12 = VAR_2.prepareStatement(VAR_7 = \"SELECT * FROM \" + VAR_0 + (VAR_1 ? \"_\" : \"\"));\n\t\t\tVAR_12.setFetchSize(100);\n\t\t\tResultSet VAR_13 = VAR_12.executeQuery();\n\t\t\tif(VAR_13 != null) {\n\t\t\t\tResultSetMetaData VAR_14 = VAR_13.getMetaData();\n\t\t\t\tFastResultSet VAR_15 = new FastResultSet(VAR_13);\n\t\t\t\tint VAR_16 = 0;\n\t\t\t\twhile (VAR_15.next()) {\n\t\t\t\t\t/* COMMENT_2 */\n\t\t\t\t\tString VAR_17 = \"INSERT INTO \" + VAR_0 + (VAR_1 ? \"_\" : \"\") + \" \";\n\t\t\t\t\tList<Object> VAR_18 = new ArrayList<Object>();\n\t\t\t\t\tList<String> VAR_19 = new ArrayList<String>();\n\t\t\t\t\tfor (int VAR_20 = 0; VAR_20 < VAR_14.getColumnCount(); VAR_20++) {\n\t\t\t\t\t\tString VAR_21 = VAR_14.getColumnName(VAR_20 + 1);\n\t\t\t\t\t\tif(VAR_15.getObject(VAR_21) != null) {\n\t\t\t\t\t\t\tString VAR_22 = VAR_23.mapColumnName(VAR_3, VAR_0, VAR_21);\n\t\t\t\t\t\t\tif(VAR_22 != null) {\n\t\t\t\t\t\t\t\tVAR_17 += (VAR_18.size() == 0 ? \" (\" : \", \") + VAR_22;\n\t\t\t\t\t\t\t\tVAR_19.add(VAR_22);\n\t\t\t\t\t\t\t\tif(VAR_15.getObject(VAR_21) instanceof java.sql.Clob) {\n\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\tVAR_18.add(VAR_23.getStringFromClob((java.sql.Clob) VAR_15.getObject(VAR_21)));\n\t\t\t\t\t\t\t\t\t} catch (Exception VAR_11) {\n\t\t\t\t\t\t\t\t\t\tVAR_6.println(\"Reading Clob failed. Reason: \" + VAR_11.getMessage());\n\t\t\t\t\t\t\t\t\t\tVAR_6.println(\"statement=\" + VAR_17);\n\t\t\t\t\t\t\t\t\t\tVAR_6.println(\"parameters=\" + VAR_18);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} else if(VAR_15.getObject(VAR_21) instanceof java.sql.Blob) {\n\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\tVAR_18.add(VAR_23.getBytesFromBlob((java.sql.Blob) VAR_15.getObject(VAR_21)));\n\t\t\t\t\t\t\t\t\t} catch (Exception VAR_11) {\n\t\t\t\t\t\t\t\t\t\tVAR_6.println(\"Reading Blob failed. Reason: \" + VAR_11.getMessage());\n\t\t\t\t\t\t\t\t\t\tVAR_6.println(\"statement=\" + VAR_17);\n\t\t\t\t\t\t\t\t\t\tVAR_6.println(\"parameters=\" + VAR_18);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tVAR_18.add(\n\t\t\t\t\t\t\t\t\t\tVAR_23.mapColumnValue(\n\t\t\t\t\t\t\t\t\t\t\tVAR_2,\n\t\t\t\t\t\t\t\t\t\t\tVAR_0,\n\t\t\t\t\t\t\t\t\t\t\tVAR_21,\n\t\t\t\t\t\t\t\t\t\t\tVAR_15.getObject(VAR_21),\n\t\t\t\t\t\t\t\t\t\t\tVAR_4,\n\t\t\t\t\t\t\t\t\t\t\tVAR_5\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tVAR_17 += \") VALUES (\";\n\t\t\t\t\tfor (int VAR_20 = 0; VAR_20 < VAR_18.size(); VAR_20++) {\n\t\t\t\t\t\tVAR_17 += VAR_20 == 0 ? \"?\" : \", ?\";\n\t\t\t\t\t}\n\t\t\t\t\tVAR_17 += \")\";\n\t\t\t\t\t/* COMMENT_3 */\n\t\t\t\t\ttry {\n\t\t\t\t\t\tPreparedStatement VAR_24 = VAR_3.prepareStatement(VAR_7 = VAR_17);\n\t\t\t\t\t\tfor (int VAR_20 = 0; VAR_20 < VAR_18.size(); VAR_20++) {\n\t\t\t\t\t\t\tObject VAR_25 = VAR_18.get(VAR_20);\n\t\t\t\t\t\t\tif(\"oracle.sql.TIMESTAMP\".equals(VAR_25.getClass().getName())) {\n\t\t\t\t\t\t\t\tMethod VAR_26 = VAR_25.getClass().getMethod(\"timestampValue\", new Class[] {});\n\t\t\t\t\t\t\t\tVAR_25 = VAR_26.invoke(VAR_25, new Object[] {});\n\t\t\t\t\t\t\t} else if(\"microsoft.sql.DateTimeOffset\".equals(VAR_25.getClass().getName())) {\n\t\t\t\t\t\t\t\tMethod VAR_26 = VAR_25.getClass().getMethod(\"getTimestamp\", new Class[] {});\n\t\t\t\t\t\t\t\tVAR_25 = VAR_26.invoke(VAR_25, new Object[] {});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(VAR_25 instanceof java.sql.Timestamp) {\n\t\t\t\t\t\t\t\tVAR_24.setTimestamp(VAR_20 + 1, (java.sql.Timestamp) VAR_25);\n\t\t\t\t\t\t\t} else if(VAR_25 instanceof java.sql.Date) {\n\t\t\t\t\t\t\t\tVAR_24.setDate(VAR_20 + 1, (java.sql.Date) VAR_25);\n\t\t\t\t\t\t\t} else if(VAR_25 instanceof Double) {\n\t\t\t\t\t\t\t\tVAR_24.setBigDecimal(VAR_20 + 1, new BigDecimal((Double)VAR_25));\n\t\t\t\t\t\t\t} else if(VAR_25 instanceof Float) {\n\t\t\t\t\t\t\t\tVAR_24.setBigDecimal(VAR_20 + 1, new BigDecimal((Float)VAR_25));\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tVAR_8.setPreparedStatementValue(VAR_3, VAR_24, VAR_20 + 1, VAR_25);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tVAR_24.executeUpdate();\n\t\t\t\t\t\tVAR_24.close();\n\t\t\t\t\t} catch (Exception VAR_11) {\n\t\t\t\t\t\tnew ServiceException(VAR_11).log();\n\t\t\t\t\t\tVAR_6.println(\"Insert failed. Reason: \" + VAR_11.getMessage());\n\t\t\t\t\t\tVAR_6.println(\"statement=\" + VAR_17);\n\t\t\t\t\t\tVAR_6.println(\"parameters=\" + VAR_18);\n\t\t\t\t\t}\n\t\t\t\t\tVAR_16++;\n\t\t\t\t\tif(VAR_16 % 1000 == 0) {\n\t\t\t\t\t\tVAR_6.println(VAR_16 + \" rows copied\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tVAR_13.close();\n\t\t\t} else {\n\t\t\t\tVAR_6.println(\"Did not copy table (result set is null). Statement: \" + VAR_7);\n\t\t\t}\n\t\t\tVAR_12.close();\n\t\t} catch (Exception VAR_11) {\n\t\t\tnew ServiceException(VAR_11).log();\n\t\t\tVAR_6.println(\"Can not copy table (see log for more info). Statement: \" + VAR_7);\n\t\t}\n\t}",
    "func_graph_path": "opencrx/14e75f95e5f56fbe7ee897bdf5d858788072e818/CopyDb.java/vul/after/1.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -22,6 +22,7 @@\n \t\t\ts.close();\n \t\t\t// Read all rows from source\n \t\t\ts = connSource.prepareStatement(currentStatement = \"SELECT * FROM \" + dbObject + (useSuffix ? \"_\" : \"\"));\n+\t\t\ts.setFetchSize(100);\n \t\t\tResultSet rs = s.executeQuery();\n \t\t\tif(rs != null) {\n \t\t\t\tResultSetMetaData rsm = rs.getMetaData();",
    "diff_line_info": {
        "deleted_lines": [],
        "added_lines": [
            "\t\t\ts.setFetchSize(100);"
        ]
    },
    "is_vul": true,
    "pr_url": null,
    "description": "no more info"
}