{
    "cve_id": "CVE-2022-27477",
    "cwe_ids": [
        "CWE-434"
    ],
    "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:P/A:P",
    "cvss_is_v3": false,
    "repo_name": "newbee-ltd/newbee-mall",
    "commit_msg": ":bug: Fixing a bug ##https://github.com/newbee-ltd/newbee-mall/issues/63",
    "commit_hash": "a3aff8b6223c348eb723beda78c918a27941b1b2",
    "git_url": "https://github.com/newbee-ltd/newbee-mall/commit/a3aff8b6223c348eb723beda78c918a27941b1b2",
    "file_path": "src/main/java/ltd/newbee/mall/controller/common/UploadController.java",
    "func_name": "uploadV2",
    "func_before": "@PostMapping({\"/upload/files\"})\n    @ResponseBody\n    public Result uploadV2(HttpServletRequest httpServletRequest) throws URISyntaxException {\n        List<MultipartFile> multipartFiles = new ArrayList<>(8);\n        if (standardServletMultipartResolver.isMultipart(httpServletRequest)) {\n            MultipartHttpServletRequest multiRequest = (MultipartHttpServletRequest) httpServletRequest;\n            Iterator<String> iter = multiRequest.getFileNames();\n            int total = 0;\n            while (iter.hasNext()) {\n                if (total > 5) {\n                    return ResultGenerator.genFailResult(\"\u6700\u591a\u4e0a\u4f205\u5f20\u56fe\u7247\");\n                }\n                total += 1;\n                MultipartFile file = multiRequest.getFile(iter.next());\n                multipartFiles.add(file);\n            }\n        }\n        if (CollectionUtils.isEmpty(multipartFiles)) {\n            return ResultGenerator.genFailResult(\"\u53c2\u6570\u5f02\u5e38\");\n        }\n        if (multipartFiles != null && multipartFiles.size() > 5) {\n            return ResultGenerator.genFailResult(\"\u6700\u591a\u4e0a\u4f205\u5f20\u56fe\u7247\");\n        }\n        List<String> fileNames = new ArrayList(multipartFiles.size());\n        for (int i = 0; i < multipartFiles.size(); i++) {\n            String fileName = multipartFiles.get(i).getOriginalFilename();\n            String suffixName = fileName.substring(fileName.lastIndexOf(\".\"));\n            //\u751f\u6210\u6587\u4ef6\u540d\u79f0\u901a\u7528\u65b9\u6cd5\n            SimpleDateFormat sdf = new SimpleDateFormat(\"yyyyMMdd_HHmmss\");\n            Random r = new Random();\n            StringBuilder tempName = new StringBuilder();\n            tempName.append(sdf.format(new Date())).append(r.nextInt(100)).append(suffixName);\n            String newFileName = tempName.toString();\n            File fileDirectory = new File(Constants.FILE_UPLOAD_DIC);\n            //\u521b\u5efa\u6587\u4ef6\n            File destFile = new File(Constants.FILE_UPLOAD_DIC + newFileName);\n            try {\n                if (!fileDirectory.exists()) {\n                    if (!fileDirectory.mkdir()) {\n                        throw new IOException(\"\u6587\u4ef6\u5939\u521b\u5efa\u5931\u8d25,\u8def\u5f84\u4e3a\uff1a\" + fileDirectory);\n                    }\n                }\n                multipartFiles.get(i).transferTo(destFile);\n                fileNames.add(NewBeeMallUtils.getHost(new URI(httpServletRequest.getRequestURL() + \"\")) + \"/upload/\" + newFileName);\n            } catch (IOException e) {\n                e.printStackTrace();\n                return ResultGenerator.genFailResult(\"\u6587\u4ef6\u4e0a\u4f20\u5931\u8d25\");\n            }\n        }\n        Result resultSuccess = ResultGenerator.genSuccessResult();\n        resultSuccess.setData(fileNames);\n        return resultSuccess;\n    }",
    "abstract_func_before": "@PostMapping({\"/upload/files\"})\n    @ResponseBody\n    public Result uploadV2(HttpServletRequest VAR_0) throws URISyntaxException {\n        List<MultipartFile> VAR_1 = new ArrayList<>(8);\n        if (VAR_2.isMultipart(VAR_0)) {\n            MultipartHttpServletRequest VAR_3 = (MultipartHttpServletRequest) VAR_0;\n            Iterator<String> VAR_4 = VAR_3.getFileNames();\n            int VAR_5 = 0;\n            while (VAR_4.hasNext()) {\n                if (VAR_5 > 5) {\n                    return VAR_6.genFailResult(\"\u6700\u591a\u4e0a\u4f205\u5f20\u56fe\u7247\");\n                }\n                VAR_5 += 1;\n                MultipartFile VAR_7 = VAR_3.getFile(VAR_4.next());\n                VAR_1.add(VAR_7);\n            }\n        }\n        if (VAR_8.isEmpty(VAR_1)) {\n            return VAR_6.genFailResult(\"\u53c2\u6570\u5f02\u5e38\");\n        }\n        if (VAR_1 != null && VAR_1.size() > 5) {\n            return VAR_6.genFailResult(\"\u6700\u591a\u4e0a\u4f205\u5f20\u56fe\u7247\");\n        }\n        List<String> VAR_9 = new ArrayList(VAR_1.size());\n        for (int VAR_10 = 0; VAR_10 < VAR_1.size(); VAR_10++) {\n            String VAR_11 = VAR_1.get(VAR_10).getOriginalFilename();\n            String VAR_12 = VAR_11.substring(VAR_11.lastIndexOf(\".\"));\n            /* COMMENT_0 */\n            SimpleDateFormat VAR_13 = new SimpleDateFormat(\"yyyyMMdd_HHmmss\");\n            Random VAR_14 = new Random();\n            StringBuilder VAR_15 = new StringBuilder();\n            VAR_15.append(VAR_13.format(new Date())).append(VAR_14.nextInt(100)).append(VAR_12);\n            String VAR_16 = VAR_15.toString();\n            File VAR_17 = new File(VAR_18.FILE_UPLOAD_DIC);\n            /* COMMENT_1 */\n            File VAR_19 = new File(VAR_18.FILE_UPLOAD_DIC + VAR_16);\n            try {\n                if (!VAR_17.exists()) {\n                    if (!VAR_17.mkdir()) {\n                        throw new IOException(\"\u6587\u4ef6\u5939\u521b\u5efa\u5931\u8d25,\u8def\u5f84\u4e3a\uff1a\" + fileDirectory);\n$$$$$$$$                    }\n                }\n                VAR_1.get(VAR_10).transferTo(VAR_19);\n                VAR_9.add(VAR_20.getHost(new URI(VAR_0.getRequestURL() + \"\")) + \"/upload/\" + VAR_16);\n            } catch (IOException VAR_21) {\n                VAR_21.printStackTrace();\n                return VAR_6.genFailResult(\"\u6587\u4ef6\u4e0a\u4f20\u5931\u8d25\");\n            }\n        }\n        Result VAR_22 = VAR_6.genSuccessResult();\n        VAR_22.setData(VAR_9);\n        return VAR_22;\n    }",
    "func_graph_path_before": "newbee-ltd/newbee-mall/a3aff8b6223c348eb723beda78c918a27941b1b2/UploadController.java/vul/before/0.json",
    "func": "@PostMapping({\"/upload/files\"})\n    @ResponseBody\n    public Result uploadV2(HttpServletRequest httpServletRequest) throws URISyntaxException, IOException {\n        List<MultipartFile> multipartFiles = new ArrayList<>(8);\n        if (standardServletMultipartResolver.isMultipart(httpServletRequest)) {\n            MultipartHttpServletRequest multiRequest = (MultipartHttpServletRequest) httpServletRequest;\n            Iterator<String> iter = multiRequest.getFileNames();\n            int total = 0;\n            while (iter.hasNext()) {\n                if (total > 5) {\n                    return ResultGenerator.genFailResult(\"\u6700\u591a\u4e0a\u4f205\u5f20\u56fe\u7247\");\n                }\n                total += 1;\n                MultipartFile file = multiRequest.getFile(iter.next());\n                BufferedImage bufferedImage = ImageIO.read(file.getInputStream());\n                // \u53ea\u5904\u7406\u56fe\u7247\u7c7b\u578b\u7684\u6587\u4ef6\n                if (bufferedImage != null) {\n                    multipartFiles.add(file);\n                }\n            }\n        }\n        if (CollectionUtils.isEmpty(multipartFiles)) {\n            return ResultGenerator.genFailResult(\"\u8bf7\u9009\u62e9\u56fe\u7247\u7c7b\u578b\u7684\u6587\u4ef6\u4e0a\u4f20\");\n        }\n        if (multipartFiles != null && multipartFiles.size() > 5) {\n            return ResultGenerator.genFailResult(\"\u6700\u591a\u4e0a\u4f205\u5f20\u56fe\u7247\");\n        }\n        List<String> fileNames = new ArrayList(multipartFiles.size());\n        for (int i = 0; i < multipartFiles.size(); i++) {\n            String fileName = multipartFiles.get(i).getOriginalFilename();\n            String suffixName = fileName.substring(fileName.lastIndexOf(\".\"));\n            //\u751f\u6210\u6587\u4ef6\u540d\u79f0\u901a\u7528\u65b9\u6cd5\n            SimpleDateFormat sdf = new SimpleDateFormat(\"yyyyMMdd_HHmmss\");\n            Random r = new Random();\n            StringBuilder tempName = new StringBuilder();\n            tempName.append(sdf.format(new Date())).append(r.nextInt(100)).append(suffixName);\n            String newFileName = tempName.toString();\n            File fileDirectory = new File(Constants.FILE_UPLOAD_DIC);\n            //\u521b\u5efa\u6587\u4ef6\n            File destFile = new File(Constants.FILE_UPLOAD_DIC + newFileName);\n            try {\n                if (!fileDirectory.exists()) {\n                    if (!fileDirectory.mkdir()) {\n                        throw new IOException(\"\u6587\u4ef6\u5939\u521b\u5efa\u5931\u8d25,\u8def\u5f84\u4e3a\uff1a\" + fileDirectory);\n                    }\n                }\n                multipartFiles.get(i).transferTo(destFile);\n                fileNames.add(NewBeeMallUtils.getHost(new URI(httpServletRequest.getRequestURL() + \"\")) + \"/upload/\" + newFileName);\n            } catch (IOException e) {\n                e.printStackTrace();\n                return ResultGenerator.genFailResult(\"\u6587\u4ef6\u4e0a\u4f20\u5931\u8d25\");\n            }\n        }\n        Result resultSuccess = ResultGenerator.genSuccessResult();\n        resultSuccess.setData(fileNames);\n        return resultSuccess;\n    }",
    "abstract_func": "@PostMapping({\"/upload/files\"})\n    @ResponseBody\n    public Result uploadV2(HttpServletRequest VAR_0) throws URISyntaxException, IOException {\n        List<MultipartFile> VAR_1 = new ArrayList<>(8);\n        if (VAR_2.isMultipart(VAR_0)) {\n            MultipartHttpServletRequest VAR_3 = (MultipartHttpServletRequest) VAR_0;\n            Iterator<String> VAR_4 = VAR_3.getFileNames();\n            int VAR_5 = 0;\n            while (VAR_4.hasNext()) {\n                if (VAR_5 > 5) {\n                    return VAR_6.genFailResult(\"\u6700\u591a\u4e0a\u4f205\u5f20\u56fe\u7247\");\n                }\n                VAR_5 += 1;\n                MultipartFile VAR_7 = VAR_3.getFile(VAR_4.next());\n                BufferedImage VAR_8 = VAR_9.read(VAR_7.getInputStream());\n                /* COMMENT_0 */\n                if (VAR_8 != null) {\n                    VAR_1.add(VAR_7);\n                }\n            }\n        }\n        if (VAR_10.isEmpty(VAR_1)) {\n            return VAR_6.genFailResult(\"\u8bf7\u9009\u62e9\u56fe\u7247\u7c7b\u578b\u7684\u6587\u4ef6\u4e0a\u4f20\");\n        }\n        if (VAR_1 != null && VAR_1.size() > 5) {\n            return VAR_6.genFailResult(\"\u6700\u591a\u4e0a\u4f205\u5f20\u56fe\u7247\");\n        }\n        List<String> VAR_11 = new ArrayList(VAR_1.size());\n        for (int VAR_12 = 0; VAR_12 < VAR_1.size(); VAR_12++) {\n            String VAR_13 = VAR_1.get(VAR_12).getOriginalFilename();\n            String VAR_14 = VAR_13.substring(VAR_13.lastIndexOf(\".\"));\n            /* COMMENT_1 */\n            SimpleDateFormat VAR_15 = new SimpleDateFormat(\"yyyyMMdd_HHmmss\");\n            Random VAR_16 = new Random();\n            StringBuilder VAR_17 = new StringBuilder();\n            VAR_17.append(VAR_15.format(new Date())).append(VAR_16.nextInt(100)).append(VAR_14);\n            String VAR_18 = VAR_17.toString();\n            File VAR_19 = new File(VAR_20.FILE_UPLOAD_DIC);\n            /* COMMENT_2 */\n            File VAR_21 = new File(VAR_20.FILE_UPLOAD_DIC + VAR_18);\n            try {\n                if (!VAR_19.exists()) {\n                    if (!VAR_19.mkdir()) {\n                        throw new IOException(\"\u6587\u4ef6\u5939\u521b\u5efa\u5931\u8d25,\u8def\u5f84\u4e3a\uff1a\" + fileDirectory);\n$$$$$$$$                    }\n                }\n                VAR_1.get(VAR_12).transferTo(VAR_21);\n                VAR_11.add(VAR_22.getHost(new URI(VAR_0.getRequestURL() + \"\")) + \"/upload/\" + VAR_18);\n            } catch (IOException VAR_23) {\n                VAR_23.printStackTrace();\n                return VAR_6.genFailResult(\"\u6587\u4ef6\u4e0a\u4f20\u5931\u8d25\");\n            }\n        }\n        Result VAR_24 = VAR_6.genSuccessResult();\n        VAR_24.setData(VAR_11);\n        return VAR_24;\n    }",
    "func_graph_path": "newbee-ltd/newbee-mall/a3aff8b6223c348eb723beda78c918a27941b1b2/UploadController.java/vul/after/0.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -1,6 +1,6 @@\n @PostMapping({\"/upload/files\"})\n     @ResponseBody\n-    public Result uploadV2(HttpServletRequest httpServletRequest) throws URISyntaxException {\n+    public Result uploadV2(HttpServletRequest httpServletRequest) throws URISyntaxException, IOException {\n         List<MultipartFile> multipartFiles = new ArrayList<>(8);\n         if (standardServletMultipartResolver.isMultipart(httpServletRequest)) {\n             MultipartHttpServletRequest multiRequest = (MultipartHttpServletRequest) httpServletRequest;\n@@ -12,11 +12,15 @@\n                 }\n                 total += 1;\n                 MultipartFile file = multiRequest.getFile(iter.next());\n-                multipartFiles.add(file);\n+                BufferedImage bufferedImage = ImageIO.read(file.getInputStream());\n+                // \u53ea\u5904\u7406\u56fe\u7247\u7c7b\u578b\u7684\u6587\u4ef6\n+                if (bufferedImage != null) {\n+                    multipartFiles.add(file);\n+                }\n             }\n         }\n         if (CollectionUtils.isEmpty(multipartFiles)) {\n-            return ResultGenerator.genFailResult(\"\u53c2\u6570\u5f02\u5e38\");\n+            return ResultGenerator.genFailResult(\"\u8bf7\u9009\u62e9\u56fe\u7247\u7c7b\u578b\u7684\u6587\u4ef6\u4e0a\u4f20\");\n         }\n         if (multipartFiles != null && multipartFiles.size() > 5) {\n             return ResultGenerator.genFailResult(\"\u6700\u591a\u4e0a\u4f205\u5f20\u56fe\u7247\");",
    "diff_line_info": {
        "deleted_lines": [
            "    public Result uploadV2(HttpServletRequest httpServletRequest) throws URISyntaxException {",
            "                multipartFiles.add(file);",
            "            return ResultGenerator.genFailResult(\"\u53c2\u6570\u5f02\u5e38\");"
        ],
        "added_lines": [
            "    public Result uploadV2(HttpServletRequest httpServletRequest) throws URISyntaxException, IOException {",
            "                BufferedImage bufferedImage = ImageIO.read(file.getInputStream());",
            "                // \u53ea\u5904\u7406\u56fe\u7247\u7c7b\u578b\u7684\u6587\u4ef6",
            "                if (bufferedImage != null) {",
            "                    multipartFiles.add(file);",
            "                }",
            "            return ResultGenerator.genFailResult(\"\u8bf7\u9009\u62e9\u56fe\u7247\u7c7b\u578b\u7684\u6587\u4ef6\u4e0a\u4f20\");"
        ]
    },
    "is_vul": true,
    "pr_url": null,
    "description": "no more info"
}