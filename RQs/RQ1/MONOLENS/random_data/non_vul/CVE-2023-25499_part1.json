{
    "cve_id": "CVE-2023-25499",
    "cwe_ids": [
        "CWE-200"
    ],
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N",
    "cvss_is_v3": true,
    "repo_name": "vaadin/flow",
    "commit_msg": "Cleanup, and refactoring, in Element, StateNode, UIInternals classes + mvn formatter.",
    "commit_hash": "428cc97eaa9c89b1124e39f0089bbb741b6b21cc",
    "git_url": "https://github.com/vaadin/flow/commit/428cc97eaa9c89b1124e39f0089bbb741b6b21cc",
    "file_path": "flow-server/src/main/java/com/vaadin/flow/component/internal/UIInternals.java",
    "func_name": "dumpPendingJavaScriptInvocations",
    "func_before": "public List<PendingJavaScriptInvocation> dumpPendingJavaScriptInvocations() {\n        pendingTitleUpdateCanceler = null;\n\n        if (pendingJsInvocations.isEmpty()) {\n            return Collections.emptyList();\n        }\n\n        List<PendingJavaScriptInvocation> currentList = getPendingJavaScriptInvocations()\n                .peek(PendingJavaScriptInvocation::setSentToBrowser)\n                .collect(Collectors.toList());\n\n        pendingJsInvocations = new ArrayList<>();\n\n        return currentList;\n    }",
    "abstract_func_before": "public List<PendingJavaScriptInvocation> dumpPendingJavaScriptInvocations() {\n        VAR_0 = null;\n\n        if (VAR_1.isEmpty()) {\n            return VAR_2.emptyList();\n        }\n\n        List<PendingJavaScriptInvocation> VAR_3 = getPendingJavaScriptInvocations()\n                .peek(VAR_4::VAR_5)\n                .collect(VAR_6.toList());\n\n        VAR_1 = new ArrayList<>();\n\n        return VAR_3;\n    }",
    "func_graph_path_before": "vaadin/flow/428cc97eaa9c89b1124e39f0089bbb741b6b21cc/UIInternals.java/vul/before/0.json",
    "func": "public List<PendingJavaScriptInvocation> dumpPendingJavaScriptInvocations() {\n        pendingTitleUpdateCanceler = null;\n\n        if (pendingJsInvocations.isEmpty()) {\n            return Collections.emptyList();\n        }\n\n        List<PendingJavaScriptInvocation> readyToSend = getPendingJavaScriptInvocations()\n                .filter(invocation -> invocation.getOwner().isVisible())\n                .peek(PendingJavaScriptInvocation::setSentToBrowser)\n                .collect(Collectors.toList());\n\n        pendingJsInvocations = getPendingJavaScriptInvocations()\n                .filter(invocation -> !invocation.getOwner().isVisible())\n                .collect(Collectors.toCollection(ArrayList::new));\n\n        return readyToSend;\n    }",
    "abstract_func": "public List<PendingJavaScriptInvocation> dumpPendingJavaScriptInvocations() {\n        VAR_0 = null;\n\n        if (VAR_1.isEmpty()) {\n            return VAR_2.emptyList();\n        }\n\n        List<PendingJavaScriptInvocation> VAR_3 = getPendingJavaScriptInvocations()\n                .filter(VAR_4 -> VAR_4.getOwner().isVisible())\n                .peek(VAR_5::VAR_6)\n                .collect(VAR_7.toList());\n\n        VAR_1 = getPendingJavaScriptInvocations()\n                .filter(VAR_4 -> !VAR_4.getOwner().isVisible())\n                .collect(VAR_7.toCollection(VAR_8::new));\n\n        return VAR_3;\n    }",
    "func_graph_path": "vaadin/flow/428cc97eaa9c89b1124e39f0089bbb741b6b21cc/UIInternals.java/vul/after/0.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -5,11 +5,14 @@\n             return Collections.emptyList();\n         }\n \n-        List<PendingJavaScriptInvocation> currentList = getPendingJavaScriptInvocations()\n+        List<PendingJavaScriptInvocation> readyToSend = getPendingJavaScriptInvocations()\n+                .filter(invocation -> invocation.getOwner().isVisible())\n                 .peek(PendingJavaScriptInvocation::setSentToBrowser)\n                 .collect(Collectors.toList());\n \n-        pendingJsInvocations = new ArrayList<>();\n+        pendingJsInvocations = getPendingJavaScriptInvocations()\n+                .filter(invocation -> !invocation.getOwner().isVisible())\n+                .collect(Collectors.toCollection(ArrayList::new));\n \n-        return currentList;\n+        return readyToSend;\n     }",
    "diff_line_info": {
        "deleted_lines": [
            "        List<PendingJavaScriptInvocation> currentList = getPendingJavaScriptInvocations()",
            "        pendingJsInvocations = new ArrayList<>();",
            "        return currentList;"
        ],
        "added_lines": [
            "        List<PendingJavaScriptInvocation> readyToSend = getPendingJavaScriptInvocations()",
            "                .filter(invocation -> invocation.getOwner().isVisible())",
            "        pendingJsInvocations = getPendingJavaScriptInvocations()",
            "                .filter(invocation -> !invocation.getOwner().isVisible())",
            "                .collect(Collectors.toCollection(ArrayList::new));",
            "        return readyToSend;"
        ]
    },
    "is_vul": true,
    "pr_url": "https://github.com/vaadin/flow/pull/15885",
    "description": "no more info"
}