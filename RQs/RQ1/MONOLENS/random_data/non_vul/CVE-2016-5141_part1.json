{
    "cve_id": "CVE-2016-5141",
    "cwe_ids": [
        "CWE-20"
    ],
    "cvss_vector": "AV:N/AC:L/Au:N/C:N/I:P/A:N",
    "cvss_is_v3": false,
    "repo_name": "chromium",
    "commit_msg": "Notify the Blink client synchronously if the initial doc is accessed.\n\nThis avoids problems with the timer being delayed by nested message\nloops and ScopedPageLoadDeferrers, where code in the nested message\nloop might access the document and not generate a notification.\n\nThe timer was originally added to prevent re-entrant calls to V8,\nbut that can now be prevented with ScriptForbiddenScope.\n\nBUG=629542\nTEST=See bug for repro steps.\n\nReview-Url: https://codereview.chromium.org/2171063002\nCr-Commit-Position: refs/heads/master@{#407269}\n",
    "commit_hash": "00314989401bfee5ffcb5e579162071c86e72f61",
    "git_url": "https://chromium.googlesource.com/chromium/src/+/00314989401bfee5ffcb5e579162071c86e72f61",
    "file_path": "third_party/WebKit/Source/core/page/ScopedPageLoadDeferrer.cpp",
    "func_name": "ScopedPageLoadDeferrer::ScopedPageLoadDeferrer",
    "func_before": "ScopedPageLoadDeferrer::ScopedPageLoadDeferrer(Page* exclusion)\n{\n    for (Page* page : Page::ordinaryPages()) {\n        if (page == exclusion || page->defersLoading())\n            continue;\n        m_deferredPages.append(page);\n\n        // Ensure that we notify the client if the initial empty document is accessed before\n        // showing anything modal, to prevent spoofs while the modal window or sheet is visible.\n        if (page->mainFrame()->isLocalFrame())\n            page->deprecatedLocalMainFrame()->loader().notifyIfInitialDocumentAccessed();\n    }\n\n    setDefersLoading(true);\n    Platform::current()->currentThread()->scheduler()->suspendTimerQueue();\n}",
    "abstract_func_before": "ScopedPageLoadDeferrer::ScopedPageLoadDeferrer(Page* VAR_0)\n{\n    for (Page* VAR_1 : Page::ordinaryPages()) {\n        if (VAR_1 == VAR_0 || VAR_1->defersLoading())\n            continue;\n        VAR_2.append(VAR_1);\n\n        /* COMMENT_0 */\n        /* COMMENT_1 */\n        if (VAR_1->mainFrame()->isLocalFrame())\n            VAR_1->deprecatedLocalMainFrame()->loader().notifyIfInitialDocumentAccessed();\n    }\n\n    setDefersLoading(true);\n    Platform::current()->currentThread()->scheduler()->suspendTimerQueue();\n}",
    "func_graph_path_before": "chromium/00314989401bfee5ffcb5e579162071c86e72f61/ScopedPageLoadDeferrer.cpp/vul/before/0.json",
    "func": "ScopedPageLoadDeferrer::ScopedPageLoadDeferrer(Page* exclusion)\n{\n    for (Page* page : Page::ordinaryPages()) {\n        if (page == exclusion || page->defersLoading())\n            continue;\n        m_deferredPages.append(page);\n    }\n\n    setDefersLoading(true);\n    Platform::current()->currentThread()->scheduler()->suspendTimerQueue();\n}",
    "abstract_func": "ScopedPageLoadDeferrer::ScopedPageLoadDeferrer(Page* VAR_0)\n{\n    for (Page* VAR_1 : Page::ordinaryPages()) {\n        if (VAR_1 == VAR_0 || VAR_1->defersLoading())\n            continue;\n        VAR_2.append(VAR_1);\n    }\n\n    setDefersLoading(true);\n    Platform::current()->currentThread()->scheduler()->suspendTimerQueue();\n}",
    "func_graph_path": "chromium/00314989401bfee5ffcb5e579162071c86e72f61/ScopedPageLoadDeferrer.cpp/vul/after/0.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -4,11 +4,6 @@\n         if (page == exclusion || page->defersLoading())\n             continue;\n         m_deferredPages.append(page);\n-\n-        // Ensure that we notify the client if the initial empty document is accessed before\n-        // showing anything modal, to prevent spoofs while the modal window or sheet is visible.\n-        if (page->mainFrame()->isLocalFrame())\n-            page->deprecatedLocalMainFrame()->loader().notifyIfInitialDocumentAccessed();\n     }\n \n     setDefersLoading(true);",
    "diff_line_info": {
        "deleted_lines": [
            "",
            "        // Ensure that we notify the client if the initial empty document is accessed before",
            "        // showing anything modal, to prevent spoofs while the modal window or sheet is visible.",
            "        if (page->mainFrame()->isLocalFrame())",
            "            page->deprecatedLocalMainFrame()->loader().notifyIfInitialDocumentAccessed();"
        ],
        "added_lines": []
    },
    "is_vul": true,
    "pr_url": null,
    "description": "no more info"
}