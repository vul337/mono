{
    "cve_id": "CVE-2017-8929",
    "cwe_ids": [
        "CWE-416"
    ],
    "cvss_vector": "AV:N/AC:L/Au:N/C:N/I:N/A:P",
    "cvss_is_v3": false,
    "repo_name": "VirusTotal/yara",
    "commit_msg": "Fix issue #658",
    "commit_hash": "053e67e3ec81cc9268ce30eaf0d6663d8639ed1e",
    "git_url": "https://github.com/VirusTotal/yara/commit/053e67e3ec81cc9268ce30eaf0d6663d8639ed1e",
    "file_path": "libyara/object.c",
    "func_name": "yr_object_copy",
    "func_before": "int yr_object_copy(\n    YR_OBJECT* object,\n    YR_OBJECT** object_copy)\n{\n  YR_OBJECT* copy;\n  YR_OBJECT* o;\n\n  YR_STRUCTURE_MEMBER* structure_member;\n  YR_OBJECT_FUNCTION* func;\n  YR_OBJECT_FUNCTION* func_copy;\n\n  int i;\n\n  *object_copy = NULL;\n\n  FAIL_ON_ERROR(yr_object_create(\n      object->type,\n      object->identifier,\n      NULL,\n      &copy));\n\n  switch(object->type)\n  {\n    case OBJECT_TYPE_INTEGER:\n      ((YR_OBJECT_INTEGER*) copy)->value = UNDEFINED;\n      break;\n\n    case OBJECT_TYPE_STRING:\n      ((YR_OBJECT_STRING*) copy)->value = NULL;\n      break;\n\n    case OBJECT_TYPE_FUNCTION:\n\n      func = (YR_OBJECT_FUNCTION*) object;\n      func_copy = (YR_OBJECT_FUNCTION*) copy;\n\n      FAIL_ON_ERROR_WITH_CLEANUP(\n        yr_object_copy(func->return_obj, &func_copy->return_obj),\n        yr_object_destroy(copy));\n\n      for (i = 0; i < MAX_OVERLOADED_FUNCTIONS; i++)\n        func_copy->prototypes[i] = func->prototypes[i];\n\n      break;\n\n    case OBJECT_TYPE_STRUCTURE:\n\n      structure_member = ((YR_OBJECT_STRUCTURE*) object)->members;\n\n      while (structure_member != NULL)\n      {\n        FAIL_ON_ERROR_WITH_CLEANUP(\n            yr_object_copy(structure_member->object, &o),\n            yr_object_destroy(copy));\n\n        FAIL_ON_ERROR_WITH_CLEANUP(\n            yr_object_structure_set_member(copy, o),\n            yr_free(o);\n            yr_object_destroy(copy));\n\n        structure_member = structure_member->next;\n      }\n\n      break;\n\n    case OBJECT_TYPE_ARRAY:\n\n      yr_object_copy(\n        ((YR_OBJECT_ARRAY *) object)->prototype_item,\n        &o);\n\n      ((YR_OBJECT_ARRAY *)copy)->prototype_item = o;\n\n      break;\n\n    case OBJECT_TYPE_DICTIONARY:\n\n      yr_object_copy(\n        ((YR_OBJECT_DICTIONARY *) object)->prototype_item,\n        &o);\n\n      ((YR_OBJECT_DICTIONARY *)copy)->prototype_item = o;\n\n      break;\n\n    default:\n      assert(FALSE);\n\n  }\n\n  *object_copy = copy;\n\n  return ERROR_SUCCESS;\n}",
    "abstract_func_before": "int yr_object_copy(\n    YR_OBJECT* VAR_0,\n    YR_OBJECT** VAR_1)\n{\n  YR_OBJECT* VAR_2;\n  YR_OBJECT* VAR_3;\n\n  YR_STRUCTURE_MEMBER* VAR_4;\n  YR_OBJECT_FUNCTION* VAR_5;\n  YR_OBJECT_FUNCTION* VAR_6;\n\n  int VAR_7;\n\n  *VAR_1 = NULL;\n\n  FAIL_ON_ERROR(yr_object_create(\n      VAR_0->type,\n      VAR_0->identifier,\n      NULL,\n      &VAR_2));\n\n  switch(VAR_0->type)\n  {\n    case VAR_8:\n      ((YR_OBJECT_INTEGER*) VAR_2)->value = VAR_9;\n      break;\n\n    case VAR_10:\n      ((YR_OBJECT_STRING*) VAR_2)->value = NULL;\n      break;\n\n    case VAR_11:\n\n      VAR_5 = (YR_OBJECT_FUNCTION*) VAR_0;\n      VAR_6 = (YR_OBJECT_FUNCTION*) VAR_2;\n\n      FAIL_ON_ERROR_WITH_CLEANUP(\n        yr_object_copy(VAR_5->return_obj, &VAR_6->return_obj),\n        yr_object_destroy(VAR_2));\n\n      for (VAR_7 = 0; VAR_7 < VAR_12; VAR_7++)\n        VAR_6->prototypes[VAR_7] = VAR_5->prototypes[VAR_7];\n\n      break;\n\n    case VAR_13:\n\n      VAR_4 = ((YR_OBJECT_STRUCTURE*) VAR_0)->members;\n\n      while (VAR_4 != NULL)\n      {\n        FAIL_ON_ERROR_WITH_CLEANUP(\n            yr_object_copy(VAR_4->object, &VAR_3),\n            yr_object_destroy(VAR_2));\n\n        FAIL_ON_ERROR_WITH_CLEANUP(\n            yr_object_structure_set_member(VAR_2, VAR_3),\n            yr_free(VAR_3);\n            yr_object_destroy(VAR_2));\n\n        VAR_4 = VAR_4->next;\n      }\n\n      break;\n\n    case VAR_14:\n\n      yr_object_copy(\n        ((YR_OBJECT_ARRAY *) VAR_0)->prototype_item,\n        &VAR_3);\n\n      ((YR_OBJECT_ARRAY *)VAR_2)->prototype_item = VAR_3;\n\n      break;\n\n    case VAR_15:\n\n      yr_object_copy(\n        ((YR_OBJECT_DICTIONARY *) VAR_0)->prototype_item,\n        &VAR_3);\n\n      ((YR_OBJECT_DICTIONARY *)VAR_2)->prototype_item = VAR_3;\n\n      break;\n\n    default:\n      assert(FALSE);\n\n  }\n\n  *VAR_1 = VAR_2;\n\n  return VAR_16;\n}",
    "func_graph_path_before": "VirusTotal/yara/053e67e3ec81cc9268ce30eaf0d6663d8639ed1e/object.c/vul/before/0.json",
    "func": "int yr_object_copy(\n    YR_OBJECT* object,\n    YR_OBJECT** object_copy)\n{\n  YR_OBJECT* copy;\n  YR_OBJECT* o;\n\n  YR_STRUCTURE_MEMBER* structure_member;\n  YR_OBJECT_FUNCTION* func;\n  YR_OBJECT_FUNCTION* func_copy;\n\n  int i;\n\n  *object_copy = NULL;\n\n  FAIL_ON_ERROR(yr_object_create(\n      object->type,\n      object->identifier,\n      NULL,\n      &copy));\n\n  switch(object->type)\n  {\n    case OBJECT_TYPE_INTEGER:\n      ((YR_OBJECT_INTEGER*) copy)->value = ((YR_OBJECT_INTEGER*) object)->value;\n      break;\n\n    case OBJECT_TYPE_STRING:\n      if (((YR_OBJECT_STRING*) object)->value != NULL)\n      {\n        ((YR_OBJECT_STRING*) copy)->value = sized_string_dup(\n            ((YR_OBJECT_STRING*) object)->value);\n      }\n      else\n      {\n        ((YR_OBJECT_STRING*) copy)->value = NULL;\n      }\n      break;\n\n    case OBJECT_TYPE_FLOAT:\n      ((YR_OBJECT_DOUBLE*) copy)->value = ((YR_OBJECT_DOUBLE*) object)->value;\n      break;\n\n    case OBJECT_TYPE_FUNCTION:\n\n      func = (YR_OBJECT_FUNCTION*) object;\n      func_copy = (YR_OBJECT_FUNCTION*) copy;\n\n      FAIL_ON_ERROR_WITH_CLEANUP(\n        yr_object_copy(func->return_obj, &func_copy->return_obj),\n        yr_object_destroy(copy));\n\n      for (i = 0; i < MAX_OVERLOADED_FUNCTIONS; i++)\n        func_copy->prototypes[i] = func->prototypes[i];\n\n      break;\n\n    case OBJECT_TYPE_STRUCTURE:\n\n      structure_member = ((YR_OBJECT_STRUCTURE*) object)->members;\n\n      while (structure_member != NULL)\n      {\n        FAIL_ON_ERROR_WITH_CLEANUP(\n            yr_object_copy(structure_member->object, &o),\n            yr_object_destroy(copy));\n\n        FAIL_ON_ERROR_WITH_CLEANUP(\n            yr_object_structure_set_member(copy, o),\n            yr_free(o);\n            yr_object_destroy(copy));\n\n        structure_member = structure_member->next;\n      }\n\n      break;\n\n    case OBJECT_TYPE_ARRAY:\n\n      yr_object_copy(\n        ((YR_OBJECT_ARRAY *) object)->prototype_item,\n        &o);\n\n      ((YR_OBJECT_ARRAY *)copy)->prototype_item = o;\n\n      break;\n\n    case OBJECT_TYPE_DICTIONARY:\n\n      yr_object_copy(\n        ((YR_OBJECT_DICTIONARY *) object)->prototype_item,\n        &o);\n\n      ((YR_OBJECT_DICTIONARY *)copy)->prototype_item = o;\n\n      break;\n\n    default:\n      assert(FALSE);\n\n  }\n\n  *object_copy = copy;\n\n  return ERROR_SUCCESS;\n}",
    "abstract_func": "int yr_object_copy(\n    YR_OBJECT* VAR_0,\n    YR_OBJECT** VAR_1)\n{\n  YR_OBJECT* VAR_2;\n  YR_OBJECT* VAR_3;\n\n  YR_STRUCTURE_MEMBER* VAR_4;\n  YR_OBJECT_FUNCTION* VAR_5;\n  YR_OBJECT_FUNCTION* VAR_6;\n\n  int VAR_7;\n\n  *VAR_1 = NULL;\n\n  FAIL_ON_ERROR(yr_object_create(\n      VAR_0->type,\n      VAR_0->identifier,\n      NULL,\n      &VAR_2));\n\n  switch(VAR_0->type)\n  {\n    case VAR_8:\n      ((YR_OBJECT_INTEGER*) VAR_2)->value = ((YR_OBJECT_INTEGER*) VAR_0)->value;\n      break;\n\n    case VAR_9:\n      if (((YR_OBJECT_STRING*) VAR_0)->value != NULL)\n      {\n        ((YR_OBJECT_STRING*) VAR_2)->value = sized_string_dup(\n            ((YR_OBJECT_STRING*) VAR_0)->value);\n      }\n      else\n      {\n        ((YR_OBJECT_STRING*) VAR_2)->value = NULL;\n      }\n      break;\n\n    case VAR_10:\n      ((YR_OBJECT_DOUBLE*) VAR_2)->value = ((YR_OBJECT_DOUBLE*) VAR_0)->value;\n      break;\n\n    case VAR_11:\n\n      VAR_5 = (YR_OBJECT_FUNCTION*) VAR_0;\n      VAR_6 = (YR_OBJECT_FUNCTION*) VAR_2;\n\n      FAIL_ON_ERROR_WITH_CLEANUP(\n        yr_object_copy(VAR_5->return_obj, &VAR_6->return_obj),\n        yr_object_destroy(VAR_2));\n\n      for (VAR_7 = 0; VAR_7 < VAR_12; VAR_7++)\n        VAR_6->prototypes[VAR_7] = VAR_5->prototypes[VAR_7];\n\n      break;\n\n    case VAR_13:\n\n      VAR_4 = ((YR_OBJECT_STRUCTURE*) VAR_0)->members;\n\n      while (VAR_4 != NULL)\n      {\n        FAIL_ON_ERROR_WITH_CLEANUP(\n            yr_object_copy(VAR_4->object, &VAR_3),\n            yr_object_destroy(VAR_2));\n\n        FAIL_ON_ERROR_WITH_CLEANUP(\n            yr_object_structure_set_member(VAR_2, VAR_3),\n            yr_free(VAR_3);\n            yr_object_destroy(VAR_2));\n\n        VAR_4 = VAR_4->next;\n      }\n\n      break;\n\n    case VAR_14:\n\n      yr_object_copy(\n        ((YR_OBJECT_ARRAY *) VAR_0)->prototype_item,\n        &VAR_3);\n\n      ((YR_OBJECT_ARRAY *)VAR_2)->prototype_item = VAR_3;\n\n      break;\n\n    case VAR_15:\n\n      yr_object_copy(\n        ((YR_OBJECT_DICTIONARY *) VAR_0)->prototype_item,\n        &VAR_3);\n\n      ((YR_OBJECT_DICTIONARY *)VAR_2)->prototype_item = VAR_3;\n\n      break;\n\n    default:\n      assert(FALSE);\n\n  }\n\n  *VAR_1 = VAR_2;\n\n  return VAR_16;\n}",
    "func_graph_path": "VirusTotal/yara/053e67e3ec81cc9268ce30eaf0d6663d8639ed1e/object.c/vul/after/0.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -22,11 +22,23 @@\n   switch(object->type)\n   {\n     case OBJECT_TYPE_INTEGER:\n-      ((YR_OBJECT_INTEGER*) copy)->value = UNDEFINED;\n+      ((YR_OBJECT_INTEGER*) copy)->value = ((YR_OBJECT_INTEGER*) object)->value;\n       break;\n \n     case OBJECT_TYPE_STRING:\n-      ((YR_OBJECT_STRING*) copy)->value = NULL;\n+      if (((YR_OBJECT_STRING*) object)->value != NULL)\n+      {\n+        ((YR_OBJECT_STRING*) copy)->value = sized_string_dup(\n+            ((YR_OBJECT_STRING*) object)->value);\n+      }\n+      else\n+      {\n+        ((YR_OBJECT_STRING*) copy)->value = NULL;\n+      }\n+      break;\n+\n+    case OBJECT_TYPE_FLOAT:\n+      ((YR_OBJECT_DOUBLE*) copy)->value = ((YR_OBJECT_DOUBLE*) object)->value;\n       break;\n \n     case OBJECT_TYPE_FUNCTION:",
    "diff_line_info": {
        "deleted_lines": [
            "      ((YR_OBJECT_INTEGER*) copy)->value = UNDEFINED;",
            "      ((YR_OBJECT_STRING*) copy)->value = NULL;"
        ],
        "added_lines": [
            "      ((YR_OBJECT_INTEGER*) copy)->value = ((YR_OBJECT_INTEGER*) object)->value;",
            "      if (((YR_OBJECT_STRING*) object)->value != NULL)",
            "      {",
            "        ((YR_OBJECT_STRING*) copy)->value = sized_string_dup(",
            "            ((YR_OBJECT_STRING*) object)->value);",
            "      }",
            "      else",
            "      {",
            "        ((YR_OBJECT_STRING*) copy)->value = NULL;",
            "      }",
            "      break;",
            "",
            "    case OBJECT_TYPE_FLOAT:",
            "      ((YR_OBJECT_DOUBLE*) copy)->value = ((YR_OBJECT_DOUBLE*) object)->value;"
        ]
    },
    "is_vul": true,
    "pr_url": "https://github.com/VirusTotal/yara/pull/660",
    "description": "no more info"
}