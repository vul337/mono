{
    "cve_id": "CVE-2021-27135",
    "cwe_ids": [
        "CWE-Other"
    ],
    "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:P/A:P",
    "cvss_is_v3": false,
    "repo_name": "ThomasDickey/xterm-snapshots",
    "commit_msg": "snapshot of project \"xterm\", label xterm-365d",
    "commit_hash": "82ba55b8f994ab30ff561a347b82ea340ba7075c",
    "git_url": "https://github.com/ThomasDickey/xterm-snapshots/commit/82ba55b8f994ab30ff561a347b82ea340ba7075c",
    "file_path": "button.c",
    "func_name": "SaltTextAway",
    "func_before": "static void\nSaltTextAway(XtermWidget xw,\n\t     int which,\n\t     CELL *cellc,\n\t     CELL *cell)\n{\n    TScreen *screen = TScreenOf(xw);\n    SelectedCells *scp;\n    int i;\n    int eol;\n    int need = 0;\n    Char *line;\n    Char *lp;\n    CELL first = *cellc;\n    CELL last = *cell;\n\n    if (which < 0 || which >= MAX_SELECTIONS) {\n\tTRACE((\"SaltTextAway - which selection?\\n\"));\n\treturn;\n    }\n    scp = &(screen->selected_cells[which]);\n\n    TRACE((\"SaltTextAway which=%d, first=%d,%d, last=%d,%d\\n\",\n\t   which, first.row, first.col, last.row, last.col));\n\n    if (isSameRow(&first, &last) && first.col > last.col) {\n\tint tmp;\n\tEXCHANGE(first.col, last.col, tmp);\n    }\n\n    --last.col;\n    /* first we need to know how long the string is before we can save it */\n\n    if (isSameRow(&last, &first)) {\n\tneed = Length(screen, first.row, first.col, last.col);\n    } else {\t\t\t/* two cases, cut is on same line, cut spans multiple lines */\n\tneed += Length(screen, first.row, first.col, screen->max_col) + 1;\n\tfor (i = first.row + 1; i < last.row; i++)\n\t    need += Length(screen, i, 0, screen->max_col) + 1;\n\tif (last.col >= 0)\n\t    need += Length(screen, last.row, 0, last.col);\n    }\n\n    /* UTF-8 may require more space */\n    if_OPT_WIDE_CHARS(screen, {\n\tneed *= 4;\n    }",
    "abstract_func_before": "static void\nSaltTextAway(XtermWidget VAR_0,\n\t     int VAR_1,\n\t     CELL *VAR_2,\n\t     CELL *VAR_3)\n{\n    TScreen *VAR_4 = TScreenOf(VAR_0);\n    SelectedCells *VAR_5;\n    int VAR_6;\n    int VAR_7;\n    int VAR_8 = 0;\n    Char *VAR_9;\n    Char *VAR_10;\n    CELL VAR_11 = *VAR_2;\n    CELL VAR_12 = *VAR_3;\n\n    if (VAR_1 < 0 || VAR_1 >= VAR_13) {\n\tTRACE((\"SaltTextAway - which selection?\\n\"));\n\treturn;\n    }\n    VAR_5 = &(VAR_4->selected_cells[VAR_1]);\n\n    TRACE((\"SaltTextAway which=%d, first=%d,%d, last=%d,%d\\n\",\n\t   VAR_1, VAR_11.row, VAR_11.col, VAR_12.row, VAR_12.col));\n\n    if (isSameRow(&VAR_11, &VAR_12) && VAR_11.col > VAR_12.col) {\n\tint VAR_14;\n\tEXCHANGE(VAR_11.col, VAR_12.col, VAR_14);\n    }\n\n    --VAR_12.col;\n    /* COMMENT_0 */\n\n    if (isSameRow(&VAR_12, &VAR_11)) {\n\tVAR_8 = Length(VAR_4, VAR_11.row, VAR_11.col, VAR_12.col);\n    } else {\t\t\t/* COMMENT_1 */\n\tVAR_8 += Length(VAR_4, VAR_11.row, VAR_11.col, VAR_4->max_col) + 1;\n\tfor (VAR_6 = VAR_11.row + 1; VAR_6 < VAR_12.row; VAR_6++)\n\t    VAR_8 += Length(VAR_4, VAR_6, 0, VAR_4->max_col) + 1;\n\tif (VAR_12.col >= 0)\n\t    VAR_8 += Length(VAR_4, VAR_12.row, 0, VAR_12.col);\n    }\n\n    /* COMMENT_2 */\n    if_OPT_WIDE_CHARS(VAR_4, {\n\tVAR_8 *= 4;\n    }",
    "func_graph_path_before": null,
    "func": "static void\nSaltTextAway(XtermWidget xw,\n\t     int which,\n\t     CELL *cellc,\n\t     CELL *cell)\n{\n    TScreen *screen = TScreenOf(xw);\n    SelectedCells *scp;\n    int i;\n    int eol;\n    int need = 0;\n    size_t have = 0;\n    Char *line;\n    Char *lp;\n    CELL first = *cellc;\n    CELL last = *cell;\n\n    if (which < 0 || which >= MAX_SELECTIONS) {\n\tTRACE((\"SaltTextAway - which selection?\\n\"));\n\treturn;\n    }\n    scp = &(screen->selected_cells[which]);\n\n    TRACE((\"SaltTextAway which=%d, first=%d,%d, last=%d,%d\\n\",\n\t   which, first.row, first.col, last.row, last.col));\n\n    if (isSameRow(&first, &last) && first.col > last.col) {\n\tint tmp;\n\tEXCHANGE(first.col, last.col, tmp);\n    }\n\n    --last.col;\n    /* first we need to know how long the string is before we can save it */\n\n    if (isSameRow(&last, &first)) {\n\tneed = Length(screen, first.row, first.col, last.col);\n    } else {\t\t\t/* two cases, cut is on same line, cut spans multiple lines */\n\tneed += Length(screen, first.row, first.col, screen->max_col) + 1;\n\tfor (i = first.row + 1; i < last.row; i++)\n\t    need += Length(screen, i, 0, screen->max_col) + 1;\n\tif (last.col >= 0)\n\t    need += Length(screen, last.row, 0, last.col);\n    }\n\n    /* UTF-8 may require more space */\n    if_OPT_WIDE_CHARS(screen, {\n\tif (need > 0) {\n\t    if (screen->max_combining > 0)\n\t\tneed += screen->max_combining;\n\t    need *= 6;\n\t}",
    "abstract_func": "static void\nSaltTextAway(XtermWidget VAR_0,\n\t     int VAR_1,\n\t     CELL *VAR_2,\n\t     CELL *VAR_3)\n{\n    TScreen *VAR_4 = TScreenOf(VAR_0);\n    SelectedCells *VAR_5;\n    int VAR_6;\n    int VAR_7;\n    int VAR_8 = 0;\n    size_t VAR_9 = 0;\n    Char *VAR_10;\n    Char *VAR_11;\n    CELL VAR_12 = *VAR_2;\n    CELL VAR_13 = *VAR_3;\n\n    if (VAR_1 < 0 || VAR_1 >= VAR_14) {\n\tTRACE((\"SaltTextAway - which selection?\\n\"));\n\treturn;\n    }\n    VAR_5 = &(VAR_4->selected_cells[VAR_1]);\n\n    TRACE((\"SaltTextAway which=%d, first=%d,%d, last=%d,%d\\n\",\n\t   VAR_1, VAR_12.row, VAR_12.col, VAR_13.row, VAR_13.col));\n\n    if (isSameRow(&VAR_12, &VAR_13) && VAR_12.col > VAR_13.col) {\n\tint VAR_15;\n\tEXCHANGE(VAR_12.col, VAR_13.col, VAR_15);\n    }\n\n    --VAR_13.col;\n    /* COMMENT_0 */\n\n    if (isSameRow(&VAR_13, &VAR_12)) {\n\tVAR_8 = Length(VAR_4, VAR_12.row, VAR_12.col, VAR_13.col);\n    } else {\t\t\t/* COMMENT_1 */\n\tVAR_8 += Length(VAR_4, VAR_12.row, VAR_12.col, VAR_4->max_col) + 1;\n\tfor (VAR_6 = VAR_12.row + 1; VAR_6 < VAR_13.row; VAR_6++)\n\t    VAR_8 += Length(VAR_4, VAR_6, 0, VAR_4->max_col) + 1;\n\tif (VAR_13.col >= 0)\n\t    VAR_8 += Length(VAR_4, VAR_13.row, 0, VAR_13.col);\n    }\n\n    /* COMMENT_2 */\n    if_OPT_WIDE_CHARS(VAR_4, {\n\tif (VAR_8 > 0) {\n\t    if (VAR_4->max_combining > 0)\n\t\tVAR_8 += VAR_4->max_combining;\n\t    VAR_8 *= 6;\n\t}",
    "func_graph_path": null,
    "diff_func": "--- func_before\n+++ func_after\n@@ -9,6 +9,7 @@\n     int i;\n     int eol;\n     int need = 0;\n+    size_t have = 0;\n     Char *line;\n     Char *lp;\n     CELL first = *cellc;\n@@ -43,5 +44,8 @@\n \n     /* UTF-8 may require more space */\n     if_OPT_WIDE_CHARS(screen, {\n-\tneed *= 4;\n-    }\n+\tif (need > 0) {\n+\t    if (screen->max_combining > 0)\n+\t\tneed += screen->max_combining;\n+\t    need *= 6;\n+\t}",
    "diff_line_info": {
        "deleted_lines": [
            "\tneed *= 4;",
            "    }"
        ],
        "added_lines": [
            "    size_t have = 0;",
            "\tif (need > 0) {",
            "\t    if (screen->max_combining > 0)",
            "\t\tneed += screen->max_combining;",
            "\t    need *= 6;",
            "\t}"
        ]
    },
    "is_vul": true,
    "pr_url": null,
    "description": "no more info"
}