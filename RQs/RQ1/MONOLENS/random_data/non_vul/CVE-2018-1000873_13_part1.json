{
    "cve_id": "CVE-2018-1000873",
    "cwe_ids": [
        "CWE-20"
    ],
    "cvss_vector": "AV:N/AC:M/Au:N/C:N/I:N/A:P",
    "cvss_is_v3": false,
    "repo_name": "FasterXML/jackson-modules-java8",
    "commit_msg": "Refactor TestDecimalUtils to reduce repetition.",
    "commit_hash": "103f5678fe104cd6934f07f1158fe92a1e2393a7",
    "git_url": "https://github.com/FasterXML/jackson-modules-java8/commit/103f5678fe104cd6934f07f1158fe92a1e2393a7",
    "file_path": "datetime/src/test/java/com/fasterxml/jackson/datatype/jsr310/TestDecimalUtils.java",
    "func_name": "testExtractNanosecondDecimal02",
    "func_before": "@Test\n    public void testExtractNanosecondDecimal02()\n    {\n        BigDecimal value = new BigDecimal(\"15.000000072\");\n\n        long seconds = value.longValue();\n        assertEquals(\"The second part is not correct.\", 15L, seconds);\n\n        int nanoseconds = DecimalUtils.extractNanosecondDecimal(value,  seconds);\n        assertEquals(\"The nanosecond part is not correct.\", 72, nanoseconds);\n    }",
    "abstract_func_before": "@Test\n    public void testExtractNanosecondDecimal02()\n    {\n        BigDecimal VAR_0 = new BigDecimal(\"15.000000072\");\n\n        long VAR_1 = VAR_0.longValue();\n        assertEquals(\"The second part is not correct.\", 15L, VAR_1);\n\n        int VAR_2 = VAR_3.extractNanosecondDecimal(VAR_0,  VAR_1);\n        assertEquals(\"The nanosecond part is not correct.\", 72, VAR_2);\n    }",
    "func_graph_path_before": "FasterXML/jackson-modules-java8/103f5678fe104cd6934f07f1158fe92a1e2393a7/TestDecimalUtils.java/vul/before/2.json",
    "func": "@Test\n    public void testExtractNanosecondDecimal02()\n    {\n        BigDecimal value = new BigDecimal(\"15.000000072\");\n        checkExtractNanos(15L, 72, value);\n    }",
    "abstract_func": "@Test\n    public void testExtractNanosecondDecimal02()\n    {\n        BigDecimal VAR_0 = new BigDecimal(\"15.000000072\");\n        checkExtractNanos(15L, 72, VAR_0);\n    }",
    "func_graph_path": "FasterXML/jackson-modules-java8/103f5678fe104cd6934f07f1158fe92a1e2393a7/TestDecimalUtils.java/vul/after/2.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -2,10 +2,5 @@\n     public void testExtractNanosecondDecimal02()\n     {\n         BigDecimal value = new BigDecimal(\"15.000000072\");\n-\n-        long seconds = value.longValue();\n-        assertEquals(\"The second part is not correct.\", 15L, seconds);\n-\n-        int nanoseconds = DecimalUtils.extractNanosecondDecimal(value,  seconds);\n-        assertEquals(\"The nanosecond part is not correct.\", 72, nanoseconds);\n+        checkExtractNanos(15L, 72, value);\n     }",
    "diff_line_info": {
        "deleted_lines": [
            "",
            "        long seconds = value.longValue();",
            "        assertEquals(\"The second part is not correct.\", 15L, seconds);",
            "",
            "        int nanoseconds = DecimalUtils.extractNanosecondDecimal(value,  seconds);",
            "        assertEquals(\"The nanosecond part is not correct.\", 72, nanoseconds);"
        ],
        "added_lines": [
            "        checkExtractNanos(15L, 72, value);"
        ]
    },
    "is_vul": true,
    "pr_url": "https://github.com/FasterXML/jackson-modules-java8/pull/87",
    "description": "This change prevents latency explosions when working with high-magnitude `BigDecimal` values, while preserving the current behavior on the edge cases.\r\n\r\nIt's fixes the original bug reported in https://github.com/FasterXML/jackson-databind/issues/2141 but not the several related issues discussed therein. It builds atop my earlier PR https://github.com/FasterXML/jackson-modules-java8/pull/85\r\n\r\nOne challenge here is that the current two-step conversion process, using `BigDecimal.longValue()` and `DecimalUtils. extractNanosecondDecimal()` separately, made it hard to control the edge cases because information is lost during the former.  So I combined the two into a single helper method.\r\n\r\n(IMO these helpers shouldn't be public API, since they are bespoke semantics needed by this package, and unlikely to be usable by other contexts.  Frankly I'd prefer to make the new helper method package-protected, if that's okay with the maintainers.)"
}