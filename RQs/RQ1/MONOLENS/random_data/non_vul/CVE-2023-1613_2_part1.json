{
    "cve_id": "CVE-2023-1613",
    "cwe_ids": [
        "CWE-79"
    ],
    "cvss_vector": "AV:N/AC:L/Au:S/C:N/I:P/A:N",
    "cvss_is_v3": false,
    "repo_name": "getrebuild/rebuild",
    "commit_msg": "Fix long request (#599)\n\n* fix: `trigger/exec-manual` async\r\n\r\n* fix: lang\r\n\r\n* fix: #596",
    "commit_hash": "d0de4cc35303168f44ca57712c824b5cb9525e54",
    "git_url": "https://github.com/getrebuild/rebuild/commit/d0de4cc35303168f44ca57712c824b5cb9525e54",
    "file_path": "src/main/java/com/rebuild/core/metadata/EntityRecordCreator.java",
    "func_name": "verify",
    "func_before": "@Override\n    public void verify(Record record) {\n        // \u81ea\u52a8\u53ea\u8bfb\u5b57\u6bb5\u5ffd\u7565\u975e\u7a7a\u68c0\u67e5\n        final Set<String> autoReadonlyFields = EasyMetaFactory.getAutoReadonlyFields(entity.getName());\n\n        List<String> notNulls = new ArrayList<>();  // \u975e\u7a7a\n        List<String> notWells = new ArrayList<>();  // \u683c\u5f0f\n\n        // \u65b0\u5efa\n        if (record.getPrimary() == null) {\n            for (Field field : entity.getFields()) {\n                if (MetadataHelper.isCommonsField(field)) continue;\n\n                EasyField easyField = EasyMetaFactory.valueOf(field);\n                if (easyField.getDisplayType() == DisplayType.SERIES\n                        || easyField.getDisplayType() == DisplayType.BARCODE) {\n                    continue;\n                }\n\n                Object hasVal = record.getObjectValue(field.getName());\n                boolean canNull = field.isNullable() || autoReadonlyFields.contains(field.getName());\n\n                if (NullValue.isNull(hasVal)) {\n                    if (!canNull) {\n                        notNulls.add(easyField.getLabel());\n                    }\n                } else {\n                    if (field.isCreatable()) {\n                        if (!patternMatches(easyField, hasVal)) {\n                            notWells.add(easyField.getLabel());\n                        }\n                    } else {\n                        if (!isForceCreateable(field)) {\n                            log.warn(\"Remove non-creatable field : \" + field);\n                            record.removeValue(field.getName());\n                        }\n                    }\n                }\n            }\n        }\n        // \u66f4\u65b0\n        else {\n            for (String fieldName : record.getAvailableFields()) {\n                Field field = entity.getField(fieldName);\n                if (MetadataHelper.isCommonsField(field)) continue;\n\n                Object hasVal = record.getObjectValue(field.getName());\n                boolean canNull = field.isNullable() || autoReadonlyFields.contains(field.getName());\n\n                EasyField easyField = EasyMetaFactory.valueOf(field);\n                if (NullValue.isNull(hasVal)) {\n                    if (!canNull) {\n                        notNulls.add(easyField.getLabel());\n                    }\n                } else {\n                    if (field.isUpdatable()) {\n                        if (!patternMatches(easyField, hasVal)) {\n                            notWells.add(easyField.getLabel());\n                        }\n                    } else {\n                        log.warn(\"Remove non-updatable field : \" + field);\n                        record.removeValue(fieldName);\n                    }\n                }\n            }\n        }\n\n        if (!notNulls.isEmpty()) {\n            throw new DataSpecificationException(\n                    Language.L(\"%s \u4e0d\u5141\u8bb8\u4e3a\u7a7a\", StringUtils.join(notNulls, \" / \")));\n        }\n        if (!notWells.isEmpty()) {\n            throw new DataSpecificationException(\n                    Language.L(\"%s \u683c\u5f0f\u4e0d\u6b63\u786e\", StringUtils.join(notWells, \" / \")));\n        }\n\n        // TODO \u68c0\u67e5\u5f15\u7528\u5b57\u6bb5\u7684ID\u662f\u5426\u6b63\u786e\uff08\u662f\u5426\u662f\u5176\u4ed6\u5b9e\u4f53\u7684ID\uff09\n\n    }",
    "abstract_func_before": "@Override\n    public void verify(Record VAR_0) {\n        /* COMMENT_0 */\n        final Set<String> VAR_1 = VAR_2.getAutoReadonlyFields(VAR_3.getName());\n\n        List<String> VAR_4 = new ArrayList<>();  /* COMMENT_1 */\n        List<String> VAR_5 = new ArrayList<>();  /* COMMENT_2 */\n\n        /* COMMENT_3 */\n        if (VAR_0.getPrimary() == null) {\n            for (Field VAR_6 : VAR_3.getFields()) {\n                if (VAR_7.isCommonsField(VAR_6)) continue;\n\n                EasyField VAR_8 = VAR_2.valueOf(VAR_6);\n                if (VAR_8.getDisplayType() == VAR_9.SERIES\n                        || VAR_8.getDisplayType() == VAR_9.BARCODE) {\n                    continue;\n                }\n\n                Object VAR_10 = VAR_0.getObjectValue(VAR_6.getName());\n                boolean VAR_11 = VAR_6.isNullable() || VAR_1.contains(VAR_6.getName());\n\n                if (VAR_12.isNull(VAR_10)) {\n                    if (!VAR_11) {\n                        VAR_4.add(VAR_8.getLabel());\n                    }\n                } else {\n                    if (VAR_6.isCreatable()) {\n                        if (!patternMatches(VAR_8, VAR_10)) {\n                            VAR_5.add(VAR_8.getLabel());\n                        }\n                    } else {\n                        if (!isForceCreateable(VAR_6)) {\n                            VAR_13.warn(\"Remove non-creatable field : \" + VAR_6);\n                            VAR_0.removeValue(VAR_6.getName());\n                        }\n                    }\n                }\n            }\n        }\n        /* COMMENT_4 */\n        else {\n            for (String VAR_14 : VAR_0.getAvailableFields()) {\n                Field VAR_6 = VAR_3.getField(VAR_14);\n                if (VAR_7.isCommonsField(VAR_6)) continue;\n\n                Object VAR_10 = VAR_0.getObjectValue(VAR_6.getName());\n                boolean VAR_11 = VAR_6.isNullable() || VAR_1.contains(VAR_6.getName());\n\n                EasyField VAR_8 = VAR_2.valueOf(VAR_6);\n                if (VAR_12.isNull(VAR_10)) {\n                    if (!VAR_11) {\n                        VAR_4.add(VAR_8.getLabel());\n                    }\n                } else {\n                    if (VAR_6.isUpdatable()) {\n                        if (!patternMatches(VAR_8, VAR_10)) {\n                            VAR_5.add(VAR_8.getLabel());\n                        }\n                    } else {\n                        VAR_13.warn(\"Remove non-updatable field : \" + VAR_6);\n                        VAR_0.removeValue(VAR_14);\n                    }\n                }\n            }\n        }\n\n        if (!VAR_4.isEmpty()) {\n            throw new DataSpecificationException(\n                    VAR_15.L(\"%s \u4e0d\u5141\u8bb8\u4e3a\u7a7a\", StringUtil$$$$s.join(notN$$$$ulls, $$$$\" / \")))$$$$;\n        }\n        if (!VAR_5.isEmpty()) {\n            throw new DataSpecificationException(\n                    VAR_15.L(\"%s \u683c\u5f0f\u4e0d\u6b63\u786e\", StringUtil$$$$s.join(notW$$$$ells, $$$$\" / \")))$$$$;\n        }\n\n        /* COMMENT_5 */\n\n    }",
    "func_graph_path_before": "getrebuild/rebuild/d0de4cc35303168f44ca57712c824b5cb9525e54/EntityRecordCreator.java/vul/before/3.json",
    "func": "@Override\n    public void verify(Record record) {\n        // \u81ea\u52a8\u53ea\u8bfb\u5b57\u6bb5\u5ffd\u7565\u975e\u7a7a\u68c0\u67e5\n        final Set<String> autoReadonlyFields = EasyMetaFactory.getAutoReadonlyFields(entity.getName());\n\n        List<String> notNulls = new ArrayList<>();  // \u975e\u7a7a\n        List<String> notWells = new ArrayList<>();  // \u683c\u5f0f\n\n        // \u65b0\u5efa\n        if (record.getPrimary() == null) {\n            for (Field field : entity.getFields()) {\n                if (MetadataHelper.isCommonsField(field)) continue;\n\n                EasyField easyField = EasyMetaFactory.valueOf(field);\n                if (easyField.getDisplayType() == DisplayType.SERIES\n                        || easyField.getDisplayType() == DisplayType.BARCODE) {\n                    continue;\n                }\n\n                Object hasVal = record.getObjectValue(field.getName());\n                boolean canNull = field.isNullable() || autoReadonlyFields.contains(field.getName());\n\n                if (NullValue.isNull(hasVal)) {\n                    if (!canNull) {\n                        notNulls.add(easyField.getLabel());\n                    }\n                } else {\n                    if (field.isCreatable()) {\n                        if (!patternMatches(easyField, hasVal)) {\n                            notWells.add(easyField.getLabel());\n                        }\n                    } else {\n                        if (!isForceCreateable(field)) {\n                            log.warn(\"Remove non-creatable field : {}\", field);\n                            record.removeValue(field.getName());\n                        }\n                    }\n                }\n            }\n        }\n        // \u66f4\u65b0\n        else {\n            for (String fieldName : record.getAvailableFields()) {\n                Field field = entity.getField(fieldName);\n                if (MetadataHelper.isCommonsField(field)) continue;\n\n                Object hasVal = record.getObjectValue(field.getName());\n                boolean canNull = field.isNullable() || autoReadonlyFields.contains(field.getName());\n\n                EasyField easyField = EasyMetaFactory.valueOf(field);\n                if (NullValue.isNull(hasVal)) {\n                    if (!canNull) {\n                        notNulls.add(easyField.getLabel());\n                    }\n                } else {\n                    if (field.isUpdatable()) {\n                        if (!patternMatches(easyField, hasVal)) {\n                            notWells.add(easyField.getLabel());\n                        }\n                    } else {\n                        log.warn(\"Remove non-updatable field : {}\", field);\n                        record.removeValue(fieldName);\n                    }\n                }\n            }\n        }\n\n        if (!notNulls.isEmpty()) {\n            throw new DataSpecificationException(\n                    Language.L(\"%s \u4e0d\u5141\u8bb8\u4e3a\u7a7a\", StringUtils.join(notNulls, \" / \")));\n        }\n        if (!notWells.isEmpty()) {\n            throw new DataSpecificationException(\n                    Language.L(\"%s \u683c\u5f0f\u4e0d\u6b63\u786e\", StringUtils.join(notWells, \" / \")));\n        }\n\n        removeFieldIfSafeCheck(record);\n\n        // TODO \u68c0\u67e5\u5f15\u7528\u5b57\u6bb5\u7684ID\u662f\u5426\u6b63\u786e\uff08\u662f\u5426\u662f\u5176\u4ed6\u5b9e\u4f53\u7684ID\uff09\n\n    }",
    "abstract_func": "@Override\n    public void verify(Record VAR_0) {\n        /* COMMENT_0 */\n        final Set<String> VAR_1 = VAR_2.getAutoReadonlyFields(VAR_3.getName());\n\n        List<String> VAR_4 = new ArrayList<>();  /* COMMENT_1 */\n        List<String> VAR_5 = new ArrayList<>();  /* COMMENT_2 */\n\n        /* COMMENT_3 */\n        if (VAR_0.getPrimary() == null) {\n            for (Field VAR_6 : VAR_3.getFields()) {\n                if (VAR_7.isCommonsField(VAR_6)) continue;\n\n                EasyField VAR_8 = VAR_2.valueOf(VAR_6);\n                if (VAR_8.getDisplayType() == VAR_9.SERIES\n                        || VAR_8.getDisplayType() == VAR_9.BARCODE) {\n                    continue;\n                }\n\n                Object VAR_10 = VAR_0.getObjectValue(VAR_6.getName());\n                boolean VAR_11 = VAR_6.isNullable() || VAR_1.contains(VAR_6.getName());\n\n                if (VAR_12.isNull(VAR_10)) {\n                    if (!VAR_11) {\n                        VAR_4.add(VAR_8.getLabel());\n                    }\n                } else {\n                    if (VAR_6.isCreatable()) {\n                        if (!patternMatches(VAR_8, VAR_10)) {\n                            VAR_5.add(VAR_8.getLabel());\n                        }\n                    } else {\n                        if (!isForceCreateable(VAR_6)) {\n                            VAR_13.warn(\"Remove non-creatable field : {}\", VAR_6);\n                            VAR_0.removeValue(VAR_6.getName());\n                        }\n                    }\n                }\n            }\n        }\n        /* COMMENT_4 */\n        else {\n            for (String VAR_14 : VAR_0.getAvailableFields()) {\n                Field VAR_6 = VAR_3.getField(VAR_14);\n                if (VAR_7.isCommonsField(VAR_6)) continue;\n\n                Object VAR_10 = VAR_0.getObjectValue(VAR_6.getName());\n                boolean VAR_11 = VAR_6.isNullable() || VAR_1.contains(VAR_6.getName());\n\n                EasyField VAR_8 = VAR_2.valueOf(VAR_6);\n                if (VAR_12.isNull(VAR_10)) {\n                    if (!VAR_11) {\n                        VAR_4.add(VAR_8.getLabel());\n                    }\n                } else {\n                    if (VAR_6.isUpdatable()) {\n                        if (!patternMatches(VAR_8, VAR_10)) {\n                            VAR_5.add(VAR_8.getLabel());\n                        }\n                    } else {\n                        VAR_13.warn(\"Remove non-updatable field : {}\", VAR_6);\n                        VAR_0.removeValue(VAR_14);\n                    }\n                }\n            }\n        }\n\n        if (!VAR_4.isEmpty()) {\n            throw new DataSpecificationException(\n                    VAR_15.L(\"%s \u4e0d\u5141\u8bb8\u4e3a\u7a7a\", StringUtil$$$$s.join(notN$$$$ulls, $$$$\" / \")))$$$$;\n        }\n        if (!VAR_5.isEmpty()) {\n            throw new DataSpecificationException(\n                    VAR_15.L(\"%s \u683c\u5f0f\u4e0d\u6b63\u786e\", StringUtil$$$$s.join(notW$$$$ells, $$$$\" / \")))$$$$;\n        }\n\n        removeFieldIfSafeCheck(VAR_0);\n\n        /* COMMENT_5 */\n\n    }",
    "func_graph_path": "getrebuild/rebuild/d0de4cc35303168f44ca57712c824b5cb9525e54/EntityRecordCreator.java/vul/after/3.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -31,7 +31,7 @@\n                         }\n                     } else {\n                         if (!isForceCreateable(field)) {\n-                            log.warn(\"Remove non-creatable field : \" + field);\n+                            log.warn(\"Remove non-creatable field : {}\", field);\n                             record.removeValue(field.getName());\n                         }\n                     }\n@@ -58,7 +58,7 @@\n                             notWells.add(easyField.getLabel());\n                         }\n                     } else {\n-                        log.warn(\"Remove non-updatable field : \" + field);\n+                        log.warn(\"Remove non-updatable field : {}\", field);\n                         record.removeValue(fieldName);\n                     }\n                 }\n@@ -74,6 +74,8 @@\n                     Language.L(\"%s \u683c\u5f0f\u4e0d\u6b63\u786e\", StringUtils.join(notWells, \" / \")));\n         }\n \n+        removeFieldIfSafeCheck(record);\n+\n         // TODO \u68c0\u67e5\u5f15\u7528\u5b57\u6bb5\u7684ID\u662f\u5426\u6b63\u786e\uff08\u662f\u5426\u662f\u5176\u4ed6\u5b9e\u4f53\u7684ID\uff09\n \n     }",
    "diff_line_info": {
        "deleted_lines": [
            "                            log.warn(\"Remove non-creatable field : \" + field);",
            "                        log.warn(\"Remove non-updatable field : \" + field);"
        ],
        "added_lines": [
            "                            log.warn(\"Remove non-creatable field : {}\", field);",
            "                        log.warn(\"Remove non-updatable field : {}\", field);",
            "        removeFieldIfSafeCheck(record);",
            ""
        ]
    },
    "is_vul": true,
    "pr_url": "https://github.com/getrebuild/rebuild/pull/599",
    "description": "no more info"
}