{
    "cve_id": "CVE-2023-21288",
    "cwe_ids": [
        "CWE-862"
    ],
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N",
    "cvss_is_v3": true,
    "repo_name": "android",
    "commit_msg": "Check URIs in notification public version.\n\nBug: 276294099\nTest: atest NotificationManagerServiceTest NotificationVisitUrisTest\n(cherry picked from https://googleplex-android-review.googlesource.com/q/commit:67cd169d073486c7c047b80ab83843cdee69bf53)\nMerged-In: I670198b213abb2cb29a9865eb9d1e897700508b4\nChange-Id: I670198b213abb2cb29a9865eb9d1e897700508b4\n",
    "commit_hash": "726247f4f53e8cc0746175265652fa415a123c0c",
    "git_url": "https://android.googlesource.com/platform/frameworks/base/+/726247f4f53e8cc0746175265652fa415a123c0c",
    "file_path": "core/java/android/app/Notification.java",
    "func_name": "visitUris",
    "func_before": "public void visitUris(@NonNull Consumer<Uri> visitor) {\n        visitor.accept(sound);\n\n        if (tickerView != null) tickerView.visitUris(visitor);\n        if (contentView != null) contentView.visitUris(visitor);\n        if (bigContentView != null) bigContentView.visitUris(visitor);\n        if (headsUpContentView != null) headsUpContentView.visitUris(visitor);\n\n        visitIconUri(visitor, mSmallIcon);\n        visitIconUri(visitor, mLargeIcon);\n\n        if (actions != null) {\n            for (Action action : actions) {\n                visitIconUri(visitor, action.getIcon());\n            }\n        }\n\n        if (extras != null) {\n            visitIconUri(visitor, extras.getParcelable(EXTRA_LARGE_ICON_BIG, Icon.class));\n            visitIconUri(visitor, extras.getParcelable(EXTRA_PICTURE_ICON, Icon.class));\n\n            // NOTE: The documentation of EXTRA_AUDIO_CONTENTS_URI explicitly says that it is a\n            // String representation of a Uri, but the previous implementation (and unit test) of\n            // this method has always treated it as a Uri object. Given the inconsistency,\n            // supporting both going forward is the safest choice.\n            Object audioContentsUri = extras.get(EXTRA_AUDIO_CONTENTS_URI);\n            if (audioContentsUri instanceof Uri) {\n                visitor.accept((Uri) audioContentsUri);\n            } else if (audioContentsUri instanceof String) {\n                visitor.accept(Uri.parse((String) audioContentsUri));\n            }\n\n            if (extras.containsKey(EXTRA_BACKGROUND_IMAGE_URI)) {\n                visitor.accept(Uri.parse(extras.getString(EXTRA_BACKGROUND_IMAGE_URI)));\n            }\n\n            ArrayList<Person> people = extras.getParcelableArrayList(EXTRA_PEOPLE_LIST);\n            if (people != null && !people.isEmpty()) {\n                for (Person p : people) {\n                    visitor.accept(p.getIconUri());\n                }\n            }\n\n            final Person person = extras.getParcelable(EXTRA_MESSAGING_PERSON, Person.class);\n            if (person != null) {\n                visitor.accept(person.getIconUri());\n            }\n\n            final RemoteInputHistoryItem[] history = (RemoteInputHistoryItem[])\n                    extras.getParcelableArray(Notification.EXTRA_REMOTE_INPUT_HISTORY_ITEMS);\n            if (history != null) {\n                for (int i = 0; i < history.length; i++) {\n                    RemoteInputHistoryItem item = history[i];\n                    if (item.getUri() != null) {\n                        visitor.accept(item.getUri());\n                    }\n                }\n            }\n        }\n\n        if (isStyle(MessagingStyle.class) && extras != null) {\n            final Parcelable[] messages = extras.getParcelableArray(EXTRA_MESSAGES);\n            if (!ArrayUtils.isEmpty(messages)) {\n                for (MessagingStyle.Message message : MessagingStyle.Message\n                        .getMessagesFromBundleArray(messages)) {\n                    visitor.accept(message.getDataUri());\n\n                    Person senderPerson = message.getSenderPerson();\n                    if (senderPerson != null) {\n                        visitor.accept(senderPerson.getIconUri());\n                    }\n                }\n            }\n\n            final Parcelable[] historic = extras.getParcelableArray(EXTRA_HISTORIC_MESSAGES);\n            if (!ArrayUtils.isEmpty(historic)) {\n                for (MessagingStyle.Message message : MessagingStyle.Message\n                        .getMessagesFromBundleArray(historic)) {\n                    visitor.accept(message.getDataUri());\n\n                    Person senderPerson = message.getSenderPerson();\n                    if (senderPerson != null) {\n                        visitor.accept(senderPerson.getIconUri());\n                    }\n                }\n            }\n\n            visitIconUri(visitor, extras.getParcelable(EXTRA_CONVERSATION_ICON));\n        }\n\n        if (isStyle(CallStyle.class) & extras != null) {\n            Person callPerson = extras.getParcelable(EXTRA_CALL_PERSON);\n            if (callPerson != null) {\n                visitor.accept(callPerson.getIconUri());\n            }\n            visitIconUri(visitor, extras.getParcelable(EXTRA_VERIFICATION_ICON));\n        }\n\n        if (mBubbleMetadata != null) {\n            visitIconUri(visitor, mBubbleMetadata.getIcon());\n        }\n    }",
    "abstract_func_before": "public void visitUris(@NonNull Consumer<Uri> VAR_0) {\n        VAR_0.accept(VAR_1);\n\n        if (VAR_2 != null) VAR_2.visitUris(VAR_0);\n        if (VAR_3 != null) VAR_3.visitUris(VAR_0);\n        if (VAR_4 != null) VAR_4.visitUris(VAR_0);\n        if (VAR_5 != null) VAR_5.visitUris(VAR_0);\n\n        visitIconUri(VAR_0, VAR_6);\n        visitIconUri(VAR_0, VAR_7);\n\n        if (VAR_8 != null) {\n            for (Action VAR_9 : VAR_8) {\n                visitIconUri(VAR_0, VAR_9.getIcon());\n            }\n        }\n\n        if (VAR_10 != null) {\n            visitIconUri(VAR_0, VAR_10.getParcelable(VAR_11, Icon.class));\n            visitIconUri(VAR_0, VAR_10.getParcelable(VAR_12, Icon.class));\n\n            /* COMMENT_0 */\n            /* COMMENT_1 */\n            /* COMMENT_2 */\n            /* COMMENT_3 */\n            Object VAR_13 = VAR_10.get(VAR_14);\n            if (VAR_13 instanceof Uri) {\n                VAR_0.accept((Uri) VAR_13);\n            } else if (VAR_13 instanceof String) {\n                VAR_0.accept(VAR_15.parse((String) VAR_13));\n            }\n\n            if (VAR_10.containsKey(VAR_16)) {\n                VAR_0.accept(VAR_15.parse(VAR_10.getString(VAR_16)));\n            }\n\n            ArrayList<Person> VAR_17 = VAR_10.getParcelableArrayList(VAR_18);\n            if (VAR_17 != null && !VAR_17.isEmpty()) {\n                for (Person VAR_19 : VAR_17) {\n                    VAR_0.accept(VAR_19.getIconUri());\n                }\n            }\n\n            final Person VAR_20 = VAR_10.getParcelable(VAR_21, Person.class);\n            if (VAR_20 != null) {\n                VAR_0.accept(VAR_20.getIconUri());\n            }\n\n            final RemoteInputHistoryItem[] VAR_22 = (RemoteInputHistoryItem[])\n                    VAR_10.getParcelableArray(VAR_23.EXTRA_REMOTE_INPUT_HISTORY_ITEMS);\n            if (VAR_22 != null) {\n                for (int VAR_24 = 0; VAR_24 < VAR_22.length; VAR_24++) {\n                    RemoteInputHistoryItem VAR_25 = VAR_22[VAR_24];\n                    if (VAR_25.getUri() != null) {\n                        VAR_0.accept(VAR_25.getUri());\n                    }\n                }\n            }\n        }\n\n        if (isStyle(MessagingStyle.class) && VAR_10 != null) {\n            final Parcelable[] VAR_26 = VAR_10.getParcelableArray(VAR_27);\n            if (!VAR_28.isEmpty(VAR_26)) {\n                for (MessagingStyle.Message VAR_29 : VAR_30.Message\n                        .getMessagesFromBundleArray(VAR_26)) {\n                    VAR_0.accept(VAR_29.getDataUri());\n\n                    Person VAR_31 = VAR_29.getSenderPerson();\n                    if (VAR_31 != null) {\n                        VAR_0.accept(VAR_31.getIconUri());\n                    }\n                }\n            }\n\n            final Parcelable[] VAR_32 = VAR_10.getParcelableArray(VAR_33);\n            if (!VAR_28.isEmpty(VAR_32)) {\n                for (MessagingStyle.Message VAR_29 : VAR_30.Message\n                        .getMessagesFromBundleArray(VAR_32)) {\n                    VAR_0.accept(VAR_29.getDataUri());\n\n                    Person VAR_31 = VAR_29.getSenderPerson();\n                    if (VAR_31 != null) {\n                        VAR_0.accept(VAR_31.getIconUri());\n                    }\n                }\n            }\n\n            visitIconUri(VAR_0, VAR_10.getParcelable(VAR_34));\n        }\n\n        if (isStyle(CallStyle.class) & VAR_10 != null) {\n            Person VAR_35 = VAR_10.getParcelable(VAR_36);\n            if (VAR_35 != null) {\n                VAR_0.accept(VAR_35.getIconUri());\n            }\n            visitIconUri(VAR_0, VAR_10.getParcelable(VAR_37));\n        }\n\n        if (VAR_38 != null) {\n            visitIconUri(VAR_0, VAR_38.getIcon());\n        }\n    }",
    "func_graph_path_before": "android/726247f4f53e8cc0746175265652fa415a123c0c/Notification.java/vul/before/0.json",
    "func": "public void visitUris(@NonNull Consumer<Uri> visitor) {\n        if (publicVersion != null) {\n            publicVersion.visitUris(visitor);\n        }\n\n        visitor.accept(sound);\n\n        if (tickerView != null) tickerView.visitUris(visitor);\n        if (contentView != null) contentView.visitUris(visitor);\n        if (bigContentView != null) bigContentView.visitUris(visitor);\n        if (headsUpContentView != null) headsUpContentView.visitUris(visitor);\n\n        visitIconUri(visitor, mSmallIcon);\n        visitIconUri(visitor, mLargeIcon);\n\n        if (actions != null) {\n            for (Action action : actions) {\n                visitIconUri(visitor, action.getIcon());\n            }\n        }\n\n        if (extras != null) {\n            visitIconUri(visitor, extras.getParcelable(EXTRA_LARGE_ICON_BIG, Icon.class));\n            visitIconUri(visitor, extras.getParcelable(EXTRA_PICTURE_ICON, Icon.class));\n\n            // NOTE: The documentation of EXTRA_AUDIO_CONTENTS_URI explicitly says that it is a\n            // String representation of a Uri, but the previous implementation (and unit test) of\n            // this method has always treated it as a Uri object. Given the inconsistency,\n            // supporting both going forward is the safest choice.\n            Object audioContentsUri = extras.get(EXTRA_AUDIO_CONTENTS_URI);\n            if (audioContentsUri instanceof Uri) {\n                visitor.accept((Uri) audioContentsUri);\n            } else if (audioContentsUri instanceof String) {\n                visitor.accept(Uri.parse((String) audioContentsUri));\n            }\n\n            if (extras.containsKey(EXTRA_BACKGROUND_IMAGE_URI)) {\n                visitor.accept(Uri.parse(extras.getString(EXTRA_BACKGROUND_IMAGE_URI)));\n            }\n\n            ArrayList<Person> people = extras.getParcelableArrayList(EXTRA_PEOPLE_LIST);\n            if (people != null && !people.isEmpty()) {\n                for (Person p : people) {\n                    visitor.accept(p.getIconUri());\n                }\n            }\n\n            final Person person = extras.getParcelable(EXTRA_MESSAGING_PERSON, Person.class);\n            if (person != null) {\n                visitor.accept(person.getIconUri());\n            }\n\n            final RemoteInputHistoryItem[] history = (RemoteInputHistoryItem[])\n                    extras.getParcelableArray(Notification.EXTRA_REMOTE_INPUT_HISTORY_ITEMS);\n            if (history != null) {\n                for (int i = 0; i < history.length; i++) {\n                    RemoteInputHistoryItem item = history[i];\n                    if (item.getUri() != null) {\n                        visitor.accept(item.getUri());\n                    }\n                }\n            }\n        }\n\n        if (isStyle(MessagingStyle.class) && extras != null) {\n            final Parcelable[] messages = extras.getParcelableArray(EXTRA_MESSAGES);\n            if (!ArrayUtils.isEmpty(messages)) {\n                for (MessagingStyle.Message message : MessagingStyle.Message\n                        .getMessagesFromBundleArray(messages)) {\n                    visitor.accept(message.getDataUri());\n\n                    Person senderPerson = message.getSenderPerson();\n                    if (senderPerson != null) {\n                        visitor.accept(senderPerson.getIconUri());\n                    }\n                }\n            }\n\n            final Parcelable[] historic = extras.getParcelableArray(EXTRA_HISTORIC_MESSAGES);\n            if (!ArrayUtils.isEmpty(historic)) {\n                for (MessagingStyle.Message message : MessagingStyle.Message\n                        .getMessagesFromBundleArray(historic)) {\n                    visitor.accept(message.getDataUri());\n\n                    Person senderPerson = message.getSenderPerson();\n                    if (senderPerson != null) {\n                        visitor.accept(senderPerson.getIconUri());\n                    }\n                }\n            }\n\n            visitIconUri(visitor, extras.getParcelable(EXTRA_CONVERSATION_ICON));\n        }\n\n        if (isStyle(CallStyle.class) & extras != null) {\n            Person callPerson = extras.getParcelable(EXTRA_CALL_PERSON);\n            if (callPerson != null) {\n                visitor.accept(callPerson.getIconUri());\n            }\n            visitIconUri(visitor, extras.getParcelable(EXTRA_VERIFICATION_ICON));\n        }\n\n        if (mBubbleMetadata != null) {\n            visitIconUri(visitor, mBubbleMetadata.getIcon());\n        }\n    }",
    "abstract_func": "public void visitUris(@NonNull Consumer<Uri> VAR_0) {\n        if (VAR_1 != null) {\n            VAR_1.visitUris(VAR_0);\n        }\n\n        VAR_0.accept(VAR_2);\n\n        if (VAR_3 != null) VAR_3.visitUris(VAR_0);\n        if (VAR_4 != null) VAR_4.visitUris(VAR_0);\n        if (VAR_5 != null) VAR_5.visitUris(VAR_0);\n        if (VAR_6 != null) VAR_6.visitUris(VAR_0);\n\n        visitIconUri(VAR_0, VAR_7);\n        visitIconUri(VAR_0, VAR_8);\n\n        if (VAR_9 != null) {\n            for (Action VAR_10 : VAR_9) {\n                visitIconUri(VAR_0, VAR_10.getIcon());\n            }\n        }\n\n        if (VAR_11 != null) {\n            visitIconUri(VAR_0, VAR_11.getParcelable(VAR_12, Icon.class));\n            visitIconUri(VAR_0, VAR_11.getParcelable(VAR_13, Icon.class));\n\n            /* COMMENT_0 */\n            /* COMMENT_1 */\n            /* COMMENT_2 */\n            /* COMMENT_3 */\n            Object VAR_14 = VAR_11.get(VAR_15);\n            if (VAR_14 instanceof Uri) {\n                VAR_0.accept((Uri) VAR_14);\n            } else if (VAR_14 instanceof String) {\n                VAR_0.accept(VAR_16.parse((String) VAR_14));\n            }\n\n            if (VAR_11.containsKey(VAR_17)) {\n                VAR_0.accept(VAR_16.parse(VAR_11.getString(VAR_17)));\n            }\n\n            ArrayList<Person> VAR_18 = VAR_11.getParcelableArrayList(VAR_19);\n            if (VAR_18 != null && !VAR_18.isEmpty()) {\n                for (Person VAR_20 : VAR_18) {\n                    VAR_0.accept(VAR_20.getIconUri());\n                }\n            }\n\n            final Person VAR_21 = VAR_11.getParcelable(VAR_22, Person.class);\n            if (VAR_21 != null) {\n                VAR_0.accept(VAR_21.getIconUri());\n            }\n\n            final RemoteInputHistoryItem[] VAR_23 = (RemoteInputHistoryItem[])\n                    VAR_11.getParcelableArray(VAR_24.EXTRA_REMOTE_INPUT_HISTORY_ITEMS);\n            if (VAR_23 != null) {\n                for (int VAR_25 = 0; VAR_25 < VAR_23.length; VAR_25++) {\n                    RemoteInputHistoryItem VAR_26 = VAR_23[VAR_25];\n                    if (VAR_26.getUri() != null) {\n                        VAR_0.accept(VAR_26.getUri());\n                    }\n                }\n            }\n        }\n\n        if (isStyle(MessagingStyle.class) && VAR_11 != null) {\n            final Parcelable[] VAR_27 = VAR_11.getParcelableArray(VAR_28);\n            if (!VAR_29.isEmpty(VAR_27)) {\n                for (MessagingStyle.Message VAR_30 : VAR_31.Message\n                        .getMessagesFromBundleArray(VAR_27)) {\n                    VAR_0.accept(VAR_30.getDataUri());\n\n                    Person VAR_32 = VAR_30.getSenderPerson();\n                    if (VAR_32 != null) {\n                        VAR_0.accept(VAR_32.getIconUri());\n                    }\n                }\n            }\n\n            final Parcelable[] VAR_33 = VAR_11.getParcelableArray(VAR_34);\n            if (!VAR_29.isEmpty(VAR_33)) {\n                for (MessagingStyle.Message VAR_30 : VAR_31.Message\n                        .getMessagesFromBundleArray(VAR_33)) {\n                    VAR_0.accept(VAR_30.getDataUri());\n\n                    Person VAR_32 = VAR_30.getSenderPerson();\n                    if (VAR_32 != null) {\n                        VAR_0.accept(VAR_32.getIconUri());\n                    }\n                }\n            }\n\n            visitIconUri(VAR_0, VAR_11.getParcelable(VAR_35));\n        }\n\n        if (isStyle(CallStyle.class) & VAR_11 != null) {\n            Person VAR_36 = VAR_11.getParcelable(VAR_37);\n            if (VAR_36 != null) {\n                VAR_0.accept(VAR_36.getIconUri());\n            }\n            visitIconUri(VAR_0, VAR_11.getParcelable(VAR_38));\n        }\n\n        if (VAR_39 != null) {\n            visitIconUri(VAR_0, VAR_39.getIcon());\n        }\n    }",
    "func_graph_path": "android/726247f4f53e8cc0746175265652fa415a123c0c/Notification.java/vul/after/0.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -1,4 +1,8 @@\n public void visitUris(@NonNull Consumer<Uri> visitor) {\n+        if (publicVersion != null) {\n+            publicVersion.visitUris(visitor);\n+        }\n+\n         visitor.accept(sound);\n \n         if (tickerView != null) tickerView.visitUris(visitor);",
    "diff_line_info": {
        "deleted_lines": [],
        "added_lines": [
            "        if (publicVersion != null) {",
            "            publicVersion.visitUris(visitor);",
            "        }",
            ""
        ]
    },
    "is_vul": true,
    "pr_url": null,
    "description": "no more info"
}