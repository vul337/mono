{
    "cve_id": "CVE-2023-35674",
    "cwe_ids": [
        "CWE-Other"
    ],
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
    "cvss_is_v3": true,
    "repo_name": "android",
    "commit_msg": "Ignore virtual presentation windows - RESTRICT AUTOMERGE\n\nWindows of TYPE_PRESENTATION on virtual displays should not be counted\nas visible windows to determine if BAL is allowed.\n\nTest: manual test, atest BackgroundActivityLaunchTest\nBug: 264029851, 205130886\n(cherry picked from https://googleplex-android-review.googlesource.com/q/commit:4c40b187cd5277c27d20758c675865bf89180c7a)\n(cherry picked from https://googleplex-android-review.googlesource.com/q/commit:5bf9607bec3f1224158cfcff7dd91ac558b46c0f)\nMerged-In: I08b16ba1c155e951286ddc22019180cbd6334dfa\nChange-Id: I08b16ba1c155e951286ddc22019180cbd6334dfa\n",
    "commit_hash": "7428962d3b064ce1122809d87af65099d1129c9e",
    "git_url": "https://android.googlesource.com/platform/frameworks/base/+/7428962d3b064ce1122809d87af65099d1129c9e",
    "file_path": "services/core/java/com/android/server/wm/WindowState.java",
    "func_name": "onSurfaceShownChanged",
    "func_before": "void onSurfaceShownChanged(boolean shown) {\n        if (mLastShownChangedReported == shown) {\n            return;\n        }\n        mLastShownChangedReported = shown;\n\n        if (shown) {\n            initExclusionRestrictions();\n        } else {\n            logExclusionRestrictions(EXCLUSION_LEFT);\n            logExclusionRestrictions(EXCLUSION_RIGHT);\n        }\n        // Exclude toast because legacy apps may show toast window by themselves, so the misused\n        // apps won't always be considered as foreground state.\n        // Exclude private presentations as they can only be shown on private virtual displays and\n        // shouldn't be the cause of an app be considered foreground.\n        if (mAttrs.type >= FIRST_SYSTEM_WINDOW && mAttrs.type != TYPE_TOAST\n                && mAttrs.type != TYPE_PRIVATE_PRESENTATION) {\n            mWmService.mAtmService.mActiveUids.onNonAppSurfaceVisibilityChanged(mOwnerUid, shown);\n        }\n    }",
    "abstract_func_before": "void onSurfaceShownChanged(boolean VAR_0) {\n        if (VAR_1 == VAR_0) {\n            return;\n        }\n        VAR_1 = VAR_0;\n\n        if (VAR_0) {\n            initExclusionRestrictions();\n        } else {\n            logExclusionRestrictions(VAR_2);\n            logExclusionRestrictions(VAR_3);\n        }\n        /* COMMENT_0 */\n        /* COMMENT_1 */\n        /* COMMENT_2 */\n        /* COMMENT_3 */\n        if (VAR_4.type >= VAR_5 && VAR_4.type != VAR_6\n                && VAR_4.type != VAR_7) {\n            VAR_8.mAtmService.mActiveUids.onNonAppSurfaceVisibilityChanged(VAR_9, VAR_0);\n        }\n    }",
    "func_graph_path_before": "android/7428962d3b064ce1122809d87af65099d1129c9e/WindowState.java/vul/before/0.json",
    "func": "void onSurfaceShownChanged(boolean shown) {\n        if (mLastShownChangedReported == shown) {\n            return;\n        }\n        mLastShownChangedReported = shown;\n\n        if (shown) {\n            initExclusionRestrictions();\n        } else {\n            logExclusionRestrictions(EXCLUSION_LEFT);\n            logExclusionRestrictions(EXCLUSION_RIGHT);\n        }\n        // Exclude toast because legacy apps may show toast window by themselves, so the misused\n        // apps won't always be considered as foreground state.\n        // Exclude private presentations as they can only be shown on private virtual displays and\n        // shouldn't be the cause of an app be considered foreground.\n        // Exclude presentations on virtual displays as they are not actually visible.\n        if (mAttrs.type >= FIRST_SYSTEM_WINDOW\n                && mAttrs.type != TYPE_TOAST\n                && mAttrs.type != TYPE_PRIVATE_PRESENTATION\n                && !(mAttrs.type == TYPE_PRESENTATION && isOnVirtualDisplay())\n        ) {\n            mWmService.mAtmService.mActiveUids.onNonAppSurfaceVisibilityChanged(mOwnerUid, shown);\n        }\n    }",
    "abstract_func": "void onSurfaceShownChanged(boolean VAR_0) {\n        if (VAR_1 == VAR_0) {\n            return;\n        }\n        VAR_1 = VAR_0;\n\n        if (VAR_0) {\n            initExclusionRestrictions();\n        } else {\n            logExclusionRestrictions(VAR_2);\n            logExclusionRestrictions(VAR_3);\n        }\n        /* COMMENT_0 */\n        /* COMMENT_1 */\n        /* COMMENT_2 */\n        /* COMMENT_3 */\n        /* COMMENT_4 */\n        if (VAR_4.type >= VAR_5\n                && VAR_4.type != VAR_6\n                && VAR_4.type != VAR_7\n                && !(VAR_4.type == VAR_8 && isOnVirtualDisplay())\n        ) {\n            VAR_9.mAtmService.mActiveUids.onNonAppSurfaceVisibilityChanged(VAR_10, VAR_0);\n        }\n    }",
    "func_graph_path": "android/7428962d3b064ce1122809d87af65099d1129c9e/WindowState.java/vul/after/0.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -14,8 +14,12 @@\n         // apps won't always be considered as foreground state.\n         // Exclude private presentations as they can only be shown on private virtual displays and\n         // shouldn't be the cause of an app be considered foreground.\n-        if (mAttrs.type >= FIRST_SYSTEM_WINDOW && mAttrs.type != TYPE_TOAST\n-                && mAttrs.type != TYPE_PRIVATE_PRESENTATION) {\n+        // Exclude presentations on virtual displays as they are not actually visible.\n+        if (mAttrs.type >= FIRST_SYSTEM_WINDOW\n+                && mAttrs.type != TYPE_TOAST\n+                && mAttrs.type != TYPE_PRIVATE_PRESENTATION\n+                && !(mAttrs.type == TYPE_PRESENTATION && isOnVirtualDisplay())\n+        ) {\n             mWmService.mAtmService.mActiveUids.onNonAppSurfaceVisibilityChanged(mOwnerUid, shown);\n         }\n     }",
    "diff_line_info": {
        "deleted_lines": [
            "        if (mAttrs.type >= FIRST_SYSTEM_WINDOW && mAttrs.type != TYPE_TOAST",
            "                && mAttrs.type != TYPE_PRIVATE_PRESENTATION) {"
        ],
        "added_lines": [
            "        // Exclude presentations on virtual displays as they are not actually visible.",
            "        if (mAttrs.type >= FIRST_SYSTEM_WINDOW",
            "                && mAttrs.type != TYPE_TOAST",
            "                && mAttrs.type != TYPE_PRIVATE_PRESENTATION",
            "                && !(mAttrs.type == TYPE_PRESENTATION && isOnVirtualDisplay())",
            "        ) {"
        ]
    },
    "is_vul": true,
    "pr_url": null,
    "description": "no more info"
}