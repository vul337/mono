{
  "id": 4057,
  "language": "Python",
  "commit_url": "https://github.com/psf/requests/commit/74ea7cf7a6a27a4eeb2ae24e162bcc942a6706d5",
  "commit_sha": "74ea7cf7a6a27a4eeb2ae24e162bcc942a6706d5",
  "commit_msg": "Merge pull request from GHSA-j8r2-6x86-q33q",
  "pr_url": null,
  "pr_info": "no more info",
  "file_name": "requests/sessions.py",
  "func_name": "rebuild_proxies",
  "func_before": "def rebuild_proxies(self, prepared_request, proxies):\n        \"\"\"This method re-evaluates the proxy configuration by considering the\n        environment variables. If we are redirected to a URL covered by\n        NO_PROXY, we strip the proxy configuration. Otherwise, we set missing\n        proxy keys for this URL (in case they were stripped by a previous\n        redirect).\n\n        This method also replaces the Proxy-Authorization header where\n        necessary.\n\n        :rtype: dict\n        \"\"\"\n        headers = prepared_request.headers\n        scheme = urlparse(prepared_request.url).scheme\n        new_proxies = resolve_proxies(prepared_request, proxies, self.trust_env)\n\n        if \"Proxy-Authorization\" in headers:\n            del headers[\"Proxy-Authorization\"]\n\n        try:\n            username, password = get_auth_from_url(new_proxies[scheme])\n        except KeyError:\n            username, password = None, None\n\n        if username and password:\n            headers[\"Proxy-Authorization\"] = _basic_auth_str(username, password)\n\n        return new_proxies",
  "func_after": "def rebuild_proxies(self, prepared_request, proxies):\n        \"\"\"This method re-evaluates the proxy configuration by considering the\n        environment variables. If we are redirected to a URL covered by\n        NO_PROXY, we strip the proxy configuration. Otherwise, we set missing\n        proxy keys for this URL (in case they were stripped by a previous\n        redirect).\n\n        This method also replaces the Proxy-Authorization header where\n        necessary.\n\n        :rtype: dict\n        \"\"\"\n        headers = prepared_request.headers\n        scheme = urlparse(prepared_request.url).scheme\n        new_proxies = resolve_proxies(prepared_request, proxies, self.trust_env)\n\n        if \"Proxy-Authorization\" in headers:\n            del headers[\"Proxy-Authorization\"]\n\n        try:\n            username, password = get_auth_from_url(new_proxies[scheme])\n        except KeyError:\n            username, password = None, None\n\n        # urllib3 handles proxy authorization for us in the standard adapter.\n        # Avoid appending this to TLS tunneled requests where it may be leaked.\n        if not scheme.startswith('https') and username and password:\n            headers[\"Proxy-Authorization\"] = _basic_auth_str(username, password)\n\n        return new_proxies",
  "diff_func": "--- func_before\n+++ func_after\n def rebuild_proxies(self, prepared_request, proxies):\n         \"\"\"This method re-evaluates the proxy configuration by considering the\n         environment variables. If we are redirected to a URL covered by\n         NO_PROXY, we strip the proxy configuration. Otherwise, we set missing\n         proxy keys for this URL (in case they were stripped by a previous\n         redirect).\n \n         This method also replaces the Proxy-Authorization header where\n         necessary.\n \n         :rtype: dict\n         \"\"\"\n         headers = prepared_request.headers\n         scheme = urlparse(prepared_request.url).scheme\n         new_proxies = resolve_proxies(prepared_request, proxies, self.trust_env)\n \n         if \"Proxy-Authorization\" in headers:\n             del headers[\"Proxy-Authorization\"]\n \n         try:\n             username, password = get_auth_from_url(new_proxies[scheme])\n         except KeyError:\n             username, password = None, None\n \n-        if username and password:\n+        # urllib3 handles proxy authorization for us in the standard adapter.\n+        # Avoid appending this to TLS tunneled requests where it may be leaked.\n+        if not scheme.startswith('https') and username and password:\n             headers[\"Proxy-Authorization\"] = _basic_auth_str(username, password)\n \n         return new_proxies",
  "diff_source": "custom"
}