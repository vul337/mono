{
  "id": 6891,
  "language": "C/C++",
  "commit_url": "https://github.com/open5gs/open5gs/commit/d919b2744cd05abae043490f0a3dd1946c1ccb8c",
  "commit_sha": "d919b2744cd05abae043490f0a3dd1946c1ccb8c",
  "commit_msg": "[AMF] fix the memory problem (#1247)\n\n1. memory corruption\n- Overflow num_of_part in SBI message\n2. null pointer dereference\n- n2InfoContent->ngap_ie_type",
  "pr_url": null,
  "pr_info": "no more info",
  "file_name": "lib/sbi/message.c",
  "func_name": "on_header_value",
  "func_before": "static int on_header_value(\n        multipart_parser *parser, const char *at, size_t length)\n{\n    multipart_parser_data_t *data = NULL;\n\n    ogs_assert(parser);\n    data = multipart_parser_get_data(parser);\n    ogs_assert(data);\n\n    if (at && length) {\n        SWITCH(data->header_field)\n        CASE(OGS_SBI_CONTENT_TYPE)\n            if (data->part[data->num_of_part].content_type)\n                ogs_free(data->part[data->num_of_part].content_type);\n            data->part[data->num_of_part].content_type =\n                ogs_strndup(at, length);\n            ogs_assert(data->part[data->num_of_part].content_type);\n            break;\n        CASE(OGS_SBI_CONTENT_ID)\n            if (data->part[data->num_of_part].content_id)\n                ogs_free(data->part[data->num_of_part].content_id);\n            data->part[data->num_of_part].content_id =\n                ogs_strndup(at, length);\n            ogs_assert(data->part[data->num_of_part].content_id);\n            break;\n\n        DEFAULT\n            ogs_error(\"Unknown header field [%s]\", data->header_field);\n        END\n    }\n\n    return 0;\n}",
  "func_after": "static int on_header_value(\n        multipart_parser *parser, const char *at, size_t length)\n{\n    multipart_parser_data_t *data = NULL;\n\n    ogs_assert(parser);\n    data = multipart_parser_get_data(parser);\n    ogs_assert(data);\n\n    if (data->num_of_part < OGS_SBI_MAX_NUM_OF_PART && at && length) {\n        SWITCH(data->header_field)\n        CASE(OGS_SBI_CONTENT_TYPE)\n            ogs_assert(data->part[data->num_of_part].content_type == NULL);\n            data->part[data->num_of_part].content_type =\n                ogs_strndup(at, length);\n            ogs_assert(data->part[data->num_of_part].content_type);\n            break;\n        CASE(OGS_SBI_CONTENT_ID)\n            ogs_assert(data->part[data->num_of_part].content_id == NULL);\n            data->part[data->num_of_part].content_id =\n                ogs_strndup(at, length);\n            ogs_assert(data->part[data->num_of_part].content_id);\n            break;\n\n        DEFAULT\n            ogs_error(\"Unknown header field [%s]\", data->header_field);\n        END\n    }\n\n    return 0;\n}",
  "diff_func": "--- func_before\n+++ func_after\n static int on_header_value(\n         multipart_parser *parser, const char *at, size_t length)\n {\n     multipart_parser_data_t *data = NULL;\n \n     ogs_assert(parser);\n     data = multipart_parser_get_data(parser);\n     ogs_assert(data);\n \n-    if (at && length) {\n+    if (data->num_of_part < OGS_SBI_MAX_NUM_OF_PART && at && length) {\n         SWITCH(data->header_field)\n         CASE(OGS_SBI_CONTENT_TYPE)\n-            if (data->part[data->num_of_part].content_type)\n-                ogs_free(data->part[data->num_of_part].content_type);\n+            ogs_assert(data->part[data->num_of_part].content_type == NULL);\n             data->part[data->num_of_part].content_type =\n                 ogs_strndup(at, length);\n             ogs_assert(data->part[data->num_of_part].content_type);\n             break;\n         CASE(OGS_SBI_CONTENT_ID)\n-            if (data->part[data->num_of_part].content_id)\n-                ogs_free(data->part[data->num_of_part].content_id);\n+            ogs_assert(data->part[data->num_of_part].content_id == NULL);\n             data->part[data->num_of_part].content_id =\n                 ogs_strndup(at, length);\n             ogs_assert(data->part[data->num_of_part].content_id);\n             break;\n \n         DEFAULT\n             ogs_error(\"Unknown header field [%s]\", data->header_field);\n         END\n     }\n \n     return 0;\n }",
  "diff_source": "custom"
}