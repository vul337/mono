{
  "id": 1755,
  "language": "Java",
  "commit_url": "https://github.com/MangoAutomation/ma-core-public/commit/7cc533438f61c35a93bed08d2ea8d23a5e6f1f37",
  "commit_sha": "7cc533438f61c35a93bed08d2ea8d23a5e6f1f37",
  "commit_msg": "RAD-2066 Fix authentication clone issue",
  "pr_url": "https://github.com/MangoAutomation/ma-core-public/pull/1793",
  "pr_info": "no more info",
  "file_name": "Core/src/com/serotonin/timer/Task.java",
  "func_name": "runTask",
  "func_before": "final public void runTask(long runtime) {\n    \t//System.out.println(\"Task: \" + this.hashCode() + \" scheduled: \" + runtime + \" now: \" + System.currentTimeMillis() + \" Running\");\n\n        // This uses roughly the same code as in NamedRunnable to rename\n        // the thread for the duration of the task execution.\n        String originalName = Thread.currentThread().getName();\n        if (!StringUtils.isBlank(name)) {\n            // Append the given name to the original name.\n            Thread.currentThread().setName(originalName + \" --> \" + name);\n        }\n\n        SecurityContext original = SecurityContextHolder.getContext();\n        SecurityContextHolder.setContext(this.delegateSecurityContext);\n        try {\n            if (completeBeforeCancel) {\n                cancelLock.readLock().lock();\n                try {\n                    if (state != CANCELLED)\n                        run(runtime);\n                }\n                finally {\n                    cancelLock.readLock().unlock();\n                }\n            }\n            else\n                // Ok, go ahead and run the thingy.\n                run(runtime);\n        } finally {\n            SecurityContext emptyContext = SecurityContextHolder.createEmptyContext();\n            if (emptyContext.equals(original)) {\n                SecurityContextHolder.clearContext();\n            } else {\n                SecurityContextHolder.setContext(original);\n            }\n\n            // Return the name to its original.\n            Thread.currentThread().setName(originalName);\n        }\n    }",
  "func_after": "final public void runTask(long runtime) {\n        //System.out.println(\"Task: \" + this.hashCode() + \" scheduled: \" + runtime + \" now: \" + System.currentTimeMillis() + \" Running\");\n\n        // This uses roughly the same code as in NamedRunnable to rename\n        // the thread for the duration of the task execution.\n        String originalName = Thread.currentThread().getName();\n        if (!StringUtils.isBlank(name)) {\n            // Append the given name to the original name.\n            Thread.currentThread().setName(originalName + \" --> \" + name);\n        }\n\n        SecurityContext original = SecurityContextHolder.getContext();\n\n        SecurityContext taskContext = SecurityContextHolder.createEmptyContext();\n        taskContext.setAuthentication(new PreAuthenticatedAuthenticationToken(permissionHolder, null));\n        SecurityContextHolder.setContext(taskContext);\n        try {\n            if (completeBeforeCancel) {\n                cancelLock.readLock().lock();\n                try {\n                    if (state != CANCELLED)\n                        run(runtime);\n                } finally {\n                    cancelLock.readLock().unlock();\n                }\n            } else\n                // Ok, go ahead and run the thingy.\n                run(runtime);\n        } finally {\n            SecurityContext emptyContext = SecurityContextHolder.createEmptyContext();\n            if (emptyContext.equals(original)) {\n                SecurityContextHolder.clearContext();\n            } else {\n                SecurityContextHolder.setContext(original);\n            }\n            // Return the name to its original.\n            Thread.currentThread().setName(originalName);\n        }\n    }",
  "diff_func": "--- func_before\n+++ func_after\n final public void runTask(long runtime) {\n-    \t//System.out.println(\"Task: \" + this.hashCode() + \" scheduled: \" + runtime + \" now: \" + System.currentTimeMillis() + \" Running\");\n+        //System.out.println(\"Task: \" + this.hashCode() + \" scheduled: \" + runtime + \" now: \" + System.currentTimeMillis() + \" Running\");\n \n         // This uses roughly the same code as in NamedRunnable to rename\n         // the thread for the duration of the task execution.\n         String originalName = Thread.currentThread().getName();\n         if (!StringUtils.isBlank(name)) {\n             // Append the given name to the original name.\n             Thread.currentThread().setName(originalName + \" --> \" + name);\n         }\n \n         SecurityContext original = SecurityContextHolder.getContext();\n+\n+        SecurityContext taskContext = SecurityContextHolder.createEmptyContext();\n+        taskContext.setAuthentication(new PreAuthenticatedAuthenticationToken(permissionHolder, null));\n-        SecurityContextHolder.setContext(this.delegateSecurityContext);\n+        SecurityContextHolder.setContext(taskContext);\n         try {\n             if (completeBeforeCancel) {\n                 cancelLock.readLock().lock();\n                 try {\n                     if (state != CANCELLED)\n                         run(runtime);\n-                }\n-                finally {\n+                } finally {\n                     cancelLock.readLock().unlock();\n                 }\n-            }\n-            else\n+            } else\n                 // Ok, go ahead and run the thingy.\n                 run(runtime);\n         } finally {\n             SecurityContext emptyContext = SecurityContextHolder.createEmptyContext();\n             if (emptyContext.equals(original)) {\n                 SecurityContextHolder.clearContext();\n             } else {\n                 SecurityContextHolder.setContext(original);\n             }\n-\n             // Return the name to its original.\n       ",
  "diff_source": "custom"
}