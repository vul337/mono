{
  "id": 1774,
  "language": "Java",
  "commit_url": "https://github.com/AOSPA/android_frameworks_base/commit/c459398f6f1bd1c99c78b914cc1dfe342019c301",
  "commit_sha": "c459398f6f1bd1c99c78b914cc1dfe342019c301",
  "commit_msg": "Resive SliceManagerService#checkSlicePermission\n\nThe parameter pkg leaves the possibility that malicious code could\ndo a side channel attack. Remove the parameter and use calling UID\ninstead.\n\nBug: 191678586\nTest: atest FrameworksUiServicesTests:SliceManagerServiceTest\nTest: atest CtsSliceTestCases\nTest: atest CtsSettingsTestCases:WifiSliceTest\nTest: manually using the PoC in the buganizer to ensure the symptom\n      no longer exists.\n\nChange-Id: I8031577cd01027485404441ac4724a7126e395da",
  "pr_url": null,
  "pr_info": "no more info",
  "file_name": "core/java/android/app/slice/SliceProvider.java",
  "func_name": "handleBindSlice",
  "func_before": "private Slice handleBindSlice(Uri sliceUri, List<SliceSpec> supportedSpecs,\n            String callingPkg, int callingUid, int callingPid) {\n        // This can be removed once Slice#bindSlice is removed and everyone is using\n        // SliceManager#bindSlice.\n        String pkg = callingPkg != null ? callingPkg\n                : getContext().getPackageManager().getNameForUid(callingUid);\n        try {\n            mSliceManager.enforceSlicePermission(sliceUri, pkg,\n                    callingPid, callingUid, mAutoGrantPermissions);\n        } catch (SecurityException e) {\n            return createPermissionSlice(getContext(), sliceUri, pkg);\n        }\n        mCallback = \"onBindSlice\";\n        Handler.getMain().postDelayed(mAnr, SLICE_BIND_ANR);\n        try {\n            return onBindSliceStrict(sliceUri, supportedSpecs);\n        } finally {\n            Handler.getMain().removeCallbacks(mAnr);\n        }\n    }",
  "func_after": "private Slice handleBindSlice(Uri sliceUri, List<SliceSpec> supportedSpecs,\n            String callingPkg, int callingUid, int callingPid) {\n        // This can be removed once Slice#bindSlice is removed and everyone is using\n        // SliceManager#bindSlice.\n        String pkg = callingPkg != null ? callingPkg\n                : getContext().getPackageManager().getNameForUid(callingUid);\n        try {\n            mSliceManager.enforceSlicePermission(sliceUri, callingPid, callingUid,\n                    mAutoGrantPermissions);\n        } catch (SecurityException e) {\n            return createPermissionSlice(getContext(), sliceUri, pkg);\n        }\n        mCallback = \"onBindSlice\";\n        Handler.getMain().postDelayed(mAnr, SLICE_BIND_ANR);\n        try {\n            return onBindSliceStrict(sliceUri, supportedSpecs);\n        } finally {\n            Handler.getMain().removeCallbacks(mAnr);\n        }\n    }",
  "diff_func": "--- func_before\n+++ func_after\n private Slice handleBindSlice(Uri sliceUri, List<SliceSpec> supportedSpecs,\n             String callingPkg, int callingUid, int callingPid) {\n         // This can be removed once Slice#bindSlice is removed and everyone is using\n         // SliceManager#bindSlice.\n         String pkg = callingPkg != null ? callingPkg\n                 : getContext().getPackageManager().getNameForUid(callingUid);\n         try {\n-            mSliceManager.enforceSlicePermission(sliceUri, pkg,\n+            mSliceManager.enforceSlicePermission(sliceUri, callingPid, callingUid,\n-                    callingPid, callingUid, mAutoGrantPermissions);\n+                    mAutoGrantPermissions);\n         } catch (SecurityException e) {\n             return createPermissionSlice(getContext(), sliceUri, pkg);\n         }\n         mCallback = \"onBindSlice\";\n         Handler.getMain().postDelayed(mAnr, SLICE_BIND_ANR);\n         try {\n             return onBindSliceStrict(sliceUri, supportedSpecs);\n         } finally {\n             Handler.getMain().removeCallbacks(mAnr);\n         }\n     }",
  "diff_source": "custom"
}