{
  "id": 3248,
  "language": "Python",
  "commit_url": "https://github.com/Gallopsled/pwntools/commit/138188eb1c027a2d0ffa4151511c407d3a001660",
  "commit_sha": "138188eb1c027a2d0ffa4151511c407d3a001660",
  "commit_msg": "Fix pwntools shellcraft SSTI vulnerability\n\nThis looks like the first major pwntools vuln!\nAnd it even got its own task on Hitcon CTF 2020.\n\nFixes #1427",
  "pr_url": "https://github.com/Gallopsled/pwntools/pull/1732",
  "pr_info": "This looks like the first major pwntools vuln!\r\nAnd it even got its own task on Hitcon CTF 2020.\r\n\r\nFixes #1427\r\n",
  "file_name": "pwnlib/constants/__init__.py",
  "func_name": "eval",
  "func_before": "def eval(self, string):\n        \"\"\"eval(string) -> value\n\n        Evaluates a string in the context of values of this module.\n\n        Example:\n\n            >>> with context.local(arch = 'i386', os = 'linux'):\n            ...    print(13 == constants.eval('SYS_execve + PROT_WRITE'))\n            True\n            >>> with context.local(arch = 'amd64', os = 'linux'):\n            ...    print(61 == constants.eval('SYS_execve + PROT_WRITE'))\n            True\n            >>> with context.local(arch = 'amd64', os = 'linux'):\n            ...    print(61 == constants.eval('SYS_execve + PROT_WRITE'))\n            True\n        \"\"\"\n        if not isinstance(string, str):\n            return string\n\n        simple = getattr(self, string, None)\n\n        if simple is not None:\n            return simple\n\n        key = context.os, context.arch\n        if key not in self._env_store:\n            self._env_store[key] = {key: getattr(self, key) for key in dir(self) if not key.endswith('__')}\n\n        return Constant('(%s)' % string, safeeval.values(string, self._env_store[key]))",
  "func_after": "def eval(self, string):\n        \"\"\"eval(string) -> value\n\n        Evaluates a string in the context of values of this module.\n\n        Example:\n\n            >>> with context.local(arch = 'i386', os = 'linux'):\n            ...    print(13 == constants.eval('SYS_execve + PROT_WRITE'))\n            True\n            >>> with context.local(arch = 'amd64', os = 'linux'):\n            ...    print(61 == constants.eval('SYS_execve + PROT_WRITE'))\n            True\n            >>> with context.local(arch = 'amd64', os = 'linux'):\n            ...    print(61 == constants.eval('SYS_execve + PROT_WRITE'))\n            True\n        \"\"\"\n        if not isinstance(string, str):\n            return string\n\n        simple = getattr(self, string, None)\n\n        if simple is not None:\n            return simple\n\n        key = context.os, context.arch\n        if key not in self._env_store:\n            self._env_store[key] = {key: getattr(self, key) for key in dir(self) if not key.endswith('__')}\n\n        val = safeeval.values(string, self._env_store[key])\n\n        # if the expression is not assembly-safe, it is not so vital to preserve it\n        if set(string) & (set(bytearray(range(32)).decode()) | set('\"#$\\',.;@[\\\\]`{}')):\n            string = val\n\n        return Constant('(%s)' % string, val)",
  "diff_func": "--- func_before\n+++ func_after\n def eval(self, string):\n         \"\"\"eval(string) -> value\n \n         Evaluates a string in the context of values of this module.\n \n         Example:\n \n             >>> with context.local(arch = 'i386', os = 'linux'):\n             ...    print(13 == constants.eval('SYS_execve + PROT_WRITE'))\n             True\n             >>> with context.local(arch = 'amd64', os = 'linux'):\n             ...    print(61 == constants.eval('SYS_execve + PROT_WRITE'))\n             True\n             >>> with context.local(arch = 'amd64', os = 'linux'):\n             ...    print(61 == constants.eval('SYS_execve + PROT_WRITE'))\n             True\n         \"\"\"\n         if not isinstance(string, str):\n             return string\n \n         simple = getattr(self, string, None)\n \n         if simple is not None:\n             return simple\n \n         key = context.os, context.arch\n         if key not in self._env_store:\n             self._env_store[key] = {key: getattr(self, key) for key in dir(self) if not key.endswith('__')}\n \n-        return Constant('(%s)' % string, safeeval.values(string, self._env_store[key]))\n+        val = safeeval.values(string, self._env_store[key])\n+\n+        # if the expression is not assembly-safe, it is not so vital to preserve it\n+        if set(string) & (set(bytearray(range(32)).decode()) | set('\"#$\\',.;@[\\\\]`{}')):\n+            string = val\n+\n+        return Constant('(%s)' % string, val)",
  "diff_source": "custom"
}