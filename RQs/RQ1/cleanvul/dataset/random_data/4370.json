{
  "id": 4370,
  "language": "Python",
  "commit_url": "https://github.com/mlflow/mlflow/commit/432b8ccf27fd3a76df4ba79bb1bec62118a85625",
  "commit_sha": "432b8ccf27fd3a76df4ba79bb1bec62118a85625",
  "commit_msg": "Use `SandboxedEnvironment` when rendering cards (#10640)\n\nSigned-off-by: harupy <17039389+harupy@users.noreply.github.com>",
  "pr_url": "https://github.com/mlflow/mlflow/pull/10640",
  "pr_info": "<details><summary>&#x1F6E0 DevTools &#x1F6E0</summary>\n<p>\n\n[![Open in GitHub Codespaces](https://github.com/codespaces/badge.svg)](https://codespaces.new/harupy/mlflow/pull/10640?quickstart=1)\n\n#### Install mlflow from this PR\n\n```\npip install git+https://github.com/mlflow/mlflow.git@refs/pull/10640/merge\n```\n\n#### Checkout with GitHub CLI\n\n```\ngh pr checkout 10640\n```\n\n</p>\n</details>\n\n### Related Issues/PRs\r\n\r\n<!-- Uncomment 'Resolve' if this PR can close the linked items. -->\r\n<!-- Resolve --> #xxx\r\n\r\n### What changes are proposed in this pull request?\r\n\r\n<!-- Please fill in changes proposed in this PR. -->\r\n\r\nUse `SandboxedEnvironment` when rendering cards.\r\n\r\n### How is this PR tested?\r\n\r\n- [ ] Existing unit/integration tests\r\n- [ ] New unit/integration tests\r\n- [ ] Manual tests\r\n\r\n<!-- Attach code, screenshot, video used for manual testing here. -->\r\n\r\n### Does this PR require documentation update?\r\n\r\n- [ ] No. You can skip the rest of this section.\r\n- [ ] Yes. I've updated:\r\n  - [ ] Examples\r\n  - [ ] API references\r\n  - [ ] Instructions\r\n\r\n### Release Notes\r\n\r\n#### Is this a user-facing change?\r\n\r\n- [ ] No. You can skip the rest of this section.\r\n- [ ] Yes. Give a description of this change to be included in the release notes for MLflow users.\r\n\r\n<!-- Details in 1-2 sentences. You can just refer to another PR with a description if this PR is part of a larger change. -->\r\n\r\n#### What component(s), interfaces, languages, and integrations does this PR affect?\r\n\r\nComponents\r\n\r\n- [ ] `area/artifacts`: Artifact stores and artifact logging\r\n- [ ] `area/build`: Build and test infrastructure for MLflow\r\n- [ ] `area/deployments`: MLflow Deployments client APIs, server, and third-party Deployments integrations\r\n- [ ] `area/docs`: MLflow documentation pages\r\n- [ ] `area/examples`: Example code\r\n- [ ] `area/model-registry`: Model Registry service, APIs, and the fluent client calls for Model Registry\r\n- [ ] `area/models`: MLmodel format, model serialization/deserialization, flavors\r\n- [ ] `area/recipes`: Recipes, Recipe APIs, Recipe configs, Recipe Templates\r\n- [ ] `area/projects`: MLproject format, project running backends\r\n- [ ] `area/scoring`: MLflow Model server, model deployment tools, Spark UDFs\r\n- [ ] `area/server-infra`: MLflow Tracking server backend\r\n- [ ] `area/tracking`: Tracking Service, tracking client APIs, autologging\r\n\r\nInterface\r\n\r\n- [ ] `area/uiux`: Front-end, user experience, plotting, JavaScript, JavaScript dev server\r\n- [ ] `area/docker`: Docker use across MLflow's components, such as MLflow Projects and MLflow Models\r\n- [ ] `area/sqlalchemy`: Use of SQLAlchemy in the Tracking Service or Model Registry\r\n- [ ] `area/windows`: Windows support\r\n\r\nLanguage\r\n\r\n- [ ] `language/r`: R APIs and clients\r\n- [ ] `language/java`: Java APIs and clients\r\n- [ ] `language/new`: Proposals for new client languages\r\n\r\nIntegrations\r\n\r\n- [ ] `integrations/azure`: Azure and Azure ML integrations\r\n- [ ] `integrations/sagemaker`: SageMaker integrations\r\n- [ ] `integrations/databricks`: Databricks integrations\r\n\r\n<!--\r\nInsert an empty named anchor here to allow jumping to this section with a fragment URL\r\n(e.g. https://github.com/mlflow/mlflow/pull/123#user-content-release-note-category).\r\nNote that GitHub prefixes anchor names in markdown with \"user-content-\".\r\n-->\r\n\r\n<a name=\"release-note-category\"></a>\r\n\r\n#### How should the PR be classified in the release notes? Choose one:\r\n\r\n- [x] `rn/none` - No description will be included. The PR will be mentioned only by the PR number in the \"Small Bugfixes and Documentation Updates\" section\r\n- [ ] `rn/breaking-change` - The PR will be mentioned in the \"Breaking Changes\" section\r\n- [ ] `rn/feature` - A new user-facing feature worth mentioning in the release notes\r\n- [ ] `rn/bug-fix` - A user-facing bug fix worth mentioning in the release notes\r\n- [ ] `rn/documentation` - A user-facing documentation change worth mentioning in the release notes\r\n",
  "file_name": "mlflow/recipes/cards/__init__.py",
  "func_name": "to_html",
  "func_before": "def to_html(self) -> str:\n        \"\"\"\n        Returns a rendered HTML representing the content of the tab.\n\n        :return: a HTML string\n        \"\"\"\n        import jinja2\n\n        j2_env = jinja2.Environment(loader=jinja2.BaseLoader()).from_string(self.template)\n        return j2_env.render({**self._context})",
  "func_after": "def to_html(self) -> str:\n        \"\"\"\n        Returns a rendered HTML representing the content of the tab.\n\n        :return: a HTML string\n        \"\"\"\n        from jinja2 import BaseLoader\n        from jinja2.sandbox import SandboxedEnvironment\n\n        j2_env = SandboxedEnvironment(loader=BaseLoader()).from_string(self.template)\n        return j2_env.render({**self._context})",
  "diff_func": "--- func_before\n+++ func_after\n def to_html(self) -> str:\n         \"\"\"\n         Returns a rendered HTML representing the content of the tab.\n \n         :return: a HTML string\n         \"\"\"\n-        import jinja2\n+        from jinja2 import BaseLoader\n+        from jinja2.sandbox import SandboxedEnvironment\n \n-        j2_env = jinja2.Environment(loader=jinja2.BaseLoader()).from_string(self.template)\n+        j2_env = SandboxedEnvironment(loader=BaseLoader()).from_string(self.template)\n         return j2_env.render({**self._context})",
  "diff_source": "custom"
}