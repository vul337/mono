{
  "id": 2161,
  "language": "Java",
  "commit_url": "https://github.com/apache/helix/commit/7af17a31819859e6c46bcb3994ef7d52347760c4",
  "commit_sha": "7af17a31819859e6c46bcb3994ef7d52347760c4",
  "commit_msg": "Remove dependency to an old Jackson v1 library (org.codehaus.jackson:jackson-mapper-asl) affected by the critical vulnerability: CVE-2019-17267 (#1934)",
  "pr_url": "https://github.com/apache/helix/pull/1934",
  "pr_info": "### Issues\r\n\r\n- [x] My PR addresses the following Helix issues and references them in the PR description:\r\n\r\nFixes #1933\r\n\r\n### Description\r\n\r\n- [x] Here are some details about my PR, including screenshots of any UI changes:\r\n\r\nRemove dependency to an old Jackson v1 library (org.codehaus.jackson:jackson-mapper-asl) affected by the critical vulnerability: CVE-2019-17267\r\n\r\n### Tests\r\n\r\n- [x] The following tests are written for this issue:\r\n\r\nno new tests\r\n\r\n- [x] The following is the result of the \"mvn test\" command on the appropriate module:\r\n\r\nNo errors\r\n\r\n```\r\n[INFO] Reactor Summary for Apache Helix 1.0.3-SNAPSHOT:\r\n[INFO] \r\n[INFO] Apache Helix ....................................... SUCCESS [  0.760 s]\r\n[INFO] Apache Helix :: Metrics Common ..................... SUCCESS [  2.533 s]\r\n[INFO] Apache Helix :: Metadata Store Directory Common .... SUCCESS [ 14.239 s]\r\n[INFO] Apache Helix :: ZooKeeper API ...................... SUCCESS [02:21 min]\r\n[INFO] Apache Helix :: Helix Common ....................... SUCCESS [  1.577 s]\r\n[INFO] Apache Helix :: Core ............................... SUCCESS [  01:26 h]\r\n[INFO] Apache Helix :: Admin Webapp ....................... SUCCESS [  0.571 s]\r\n[INFO] Apache Helix :: Restful Interface .................. SUCCESS [01:52 min]\r\n[INFO] Apache Helix :: Distributed Lock ................... SUCCESS [ 56.329 s]\r\n[INFO] Apache Helix :: HelixAgent ......................... SUCCESS [  0.241 s]\r\n[INFO] Apache Helix :: Recipes ............................ SUCCESS [  0.015 s]\r\n[INFO] Apache Helix :: Recipes :: Rabbitmq Consumer Group . SUCCESS [  1.533 s]\r\n[INFO] Apache Helix :: Recipes :: Rsync Replicated File Store SUCCESS [  1.773 s]\r\n[INFO] Apache Helix :: Recipes :: distributed lock manager  SUCCESS [  2.060 s]\r\n[INFO] Apache Helix :: Recipes :: distributed task execution SUCCESS [  1.810 s]\r\n[INFO] Apache Helix :: Recipes :: service discovery ....... SUCCESS [  1.910 s]\r\n[INFO] ------------------------------------------------------------------------\r\n[INFO] BUILD SUCCESS\r\n[INFO] ------------------------------------------------------------------------\r\n[INFO] Total time:  01:32 h\r\n[INFO] Finished at: 2022-01-14T22:57:58+01:00\r\n[INFO] ------------------------------------------------------------------------\r\n```\r\n\r\n### Commits\r\n\r\n- [x] My commits all reference appropriate Apache Helix GitHub issues in their subject lines. In addition, my commits follow the guidelines from \"[How to write a good git commit message](http://chris.beams.io/posts/git-commit/)\":\r\n  1. Subject is separated from body by a blank line\r\n  1. Subject is limited to 50 characters (not including Jira issue reference)\r\n  1. Subject does not end with a period\r\n  1. Subject uses the imperative mood (\"add\", not \"adding\")\r\n  1. Body wraps at 72 characters\r\n  1. Body explains \"what\" and \"why\", not \"how\"\r\n\r\n### Code Quality\r\n\r\n- [x] My diff has been formatted using helix-style.xml \r\n(helix-style-intellij.xml if IntelliJ IDE is used)\r\n",
  "file_name": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/introspect/CodehausJacksonIntrospector.java",
  "func_name": "findSerializer",
  "func_before": "@Override\n  public Object findSerializer(Annotated a) {\n    JsonSerialize serializeAnnotation = a.getAnnotation(JsonSerialize.class);\n    if (serializeAnnotation != null) {\n      Class<? extends JsonSerializer<?>> serClass = serializeAnnotation.using();\n      if (serClass != JsonSerializer.None.class) {\n        return serClass;\n      }\n    }\n    return null;\n  }",
  "func_after": "@Override\n  public Object findSerializer(Annotated a) {\n    JsonSerialize serializeAnnotation = a.getAnnotation(JsonSerialize.class);\n    if (serializeAnnotation != null) {\n      Class<? extends JsonSerializer> serClass = serializeAnnotation.using();\n      if (serClass != JsonSerializer.None.class) {\n        return serClass;\n      }\n    }\n    return null;\n  }",
  "diff_func": "--- func_before\n+++ func_after\n @Override\n   public Object findSerializer(Annotated a) {\n     JsonSerialize serializeAnnotation = a.getAnnotation(JsonSerialize.class);\n     if (serializeAnnotation != null) {\n-      Class<? extends JsonSerializer<?>> serClass = serializeAnnotation.using();\n+      Class<? extends JsonSerializer> serClass = serializeAnnotation.using();\n       if (serClass != JsonSerializer.None.class) {\n         return serClass;\n       }\n     }\n     return null;\n   }",
  "diff_source": "custom"
}