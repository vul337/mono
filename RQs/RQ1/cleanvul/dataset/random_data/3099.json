{
  "id": 3099,
  "language": "Java",
  "commit_url": "https://github.com/eclipse-edc/Connector/commit/5c0ca0d401ea56176beaefcb7ac553776c30bee1",
  "commit_sha": "5c0ca0d401ea56176beaefcb7ac553776c30bee1",
  "commit_msg": "Feature/538 avoid negotiation loop (#545)\n\n* core: avoid infinite loop on contract negotiation manager introducing a new INITIAL state\r\n\r\n* core: add new contract negotiation state to avoid loop",
  "pr_url": "https://github.com/eclipse-edc/Connector/pull/545",
  "pr_info": "Ref #538 \r\n\r\nThis fix the referred issue introducing an `INITIAL` state that goes between `UNSAVED` and `REQUESTING`.\r\nHowever, there are still some problems, probably introduced (or, better, unearthed) by the correct evaluation of the futures.\r\n\r\nBefore, for every state there was a single intermediate state: \r\n * `REQUESTED` -> `REQUESTING`\r\n * `PROVIDER_OFFERED` -> `PROVIDER_OFFERING`\r\n * ...\r\n\r\nBut now we would need another intermediate states, like:\r\n`INITIAL`: the negotiation is initialized, and it's retrievable by the state machine loop for being processed\r\n`REQUESTING`: the negotiation has been retrieved from the store and sent to the provider, it should be not retrieved anymore by the state machine loop, otherwise it would be sent multiple times\r\n`REQUESTED`: the request has been successfully sent to the provider.\r\n\r\nTo better describe these async transitions there could be 3 states for every \"real state\":\r\n* `TO_BE_xxxED`\r\n* `xxxING`\r\n* `xxxED`\r\n(replace xxx with, e.g. \"REQUEST\", \"PROVIDER_OFFER\", etc...)\r\n\r\nThis 3-state pattern need to be implemented for every state transition, otherwise there will be multiple and uncontrollable state changes.\r\n\r\nI ask thoughts to those who worked on the state machines @jimmarino @paullatzelsperger @juliapampus @ronjaquensel , somebody else?",
  "file_name": "core/contract/src/main/java/org/eclipse/dataspaceconnector/contract/negotiation/ConsumerContractNegotiationManagerImpl.java",
  "func_name": "sendContractOffers",
  "func_before": "private int sendContractOffers() {\n        var processes = negotiationStore.nextForState(REQUESTING.code(), batchSize);\n\n        for (ContractNegotiation process : processes) {\n            var offer = process.getLastContractOffer();\n            sendOffer(offer, process, ContractOfferRequest.Type.INITIAL)\n                    .whenComplete((response, throwable) -> {\n                        if (throwable == null) {\n                            process.transitionRequested();\n                            negotiationStore.save(process);\n                            invokeForEach(l -> l.requested(process));\n                            monitor.debug(String.format(\"[Consumer] ContractNegotiation %s is now in state %s.\",\n                                    process.getId(), ContractNegotiationStates.from(process.getState())));\n                        } else {\n                            process.transitionRequesting();\n                            negotiationStore.save(process);\n                            invokeForEach(l -> l.requesting(process));\n                            String message = format(\"[Consumer] Failed to send contract offer with id %s. ContractNegotiation %s stays in state %s.\",\n                                    offer.getId(), process.getId(), ContractNegotiationStates.from(process.getState()));\n                            monitor.debug(message, throwable);\n                        }\n                    });\n        }\n\n        return processes.size();\n    }",
  "func_after": "private int sendContractOffers() {\n        var negotiations = negotiationStore.nextForState(INITIAL.code(), batchSize);\n\n        for (ContractNegotiation negotiation : negotiations) {\n            var offer = negotiation.getLastContractOffer();\n            negotiation.transitionRequesting();\n            negotiationStore.save(negotiation);\n\n            sendOffer(offer, negotiation, ContractOfferRequest.Type.INITIAL)\n                    .whenComplete(onOfferSent(negotiation.getId(), offer));\n        }\n\n        return negotiations.size();\n    }",
  "diff_func": "--- func_before\n+++ func_after\n private int sendContractOffers() {\n-        var processes = negotiationStore.nextForState(REQUESTING.code(), batchSize);\n+        var negotiations = negotiationStore.nextForState(INITIAL.code(), batchSize);\n \n-        for (ContractNegotiation process : processes) {\n+        for (ContractNegotiation negotiation : negotiations) {\n-            var offer = process.getLastContractOffer();\n+            var offer = negotiation.getLastContractOffer();\n+            negotiation.transitionRequesting();\n+            negotiationStore.save(negotiation);\n+\n-            sendOffer(offer, process, ContractOfferRequest.Type.INITIAL)\n+            sendOffer(offer, negotiation, ContractOfferRequest.Type.INITIAL)\n+                    .whenComplete(onOfferSent(negotiation.getId(), offer));\n-                    .whenComplete((response, throwable) -> {\n-                        if (throwable == null) {\n-                            process.transitionRequested();\n-                            negotiationStore.save(process);\n-                            invokeForEach(l -> l.requested(process));\n-                            monitor.debug(String.format(\"[Consumer] ContractNegotiation %s is now in state %s.\",\n-                                    process.getId(), ContractNegotiationStates.from(process.getState())));\n-                        } else {\n-                            process.transitionRequesting();\n-                            negotiationStore.save(process);\n-                            invokeForEach(l -> l.requesting(process));\n-                            String message = format(\"[Consumer] Failed to send contract offer with id %s. ContractNegotiation %s stays in state %s.\",\n-                                    offer.getId(), process.getId(), ContractNegotiationStates.from(process.getState()));\n-                            monitor.debug(message, throwable);\n-                        }\n-                    });\n         }\n \n-        return processes.size();\n+",
  "diff_source": "custom"
}