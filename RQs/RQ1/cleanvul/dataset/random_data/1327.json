{
  "id": 1327,
  "language": "Java",
  "commit_url": "https://github.com/omnirom/android_frameworks_base/commit/07d74c4c28d622b65085a602f42793fda1791401",
  "commit_sha": "07d74c4c28d622b65085a602f42793fda1791401",
  "commit_msg": "[RESTRICT AUTOMERGE] Revert \"Persist destroyed staged sessions until they are cleaned up\"\n\nRevert submission 16575908-dont_abandon_child_qt_dev\n\nReason for revert:  Reverting CVE-2021-39624 on qt-dev\nReverted Changes:\nI4ede6b7a4:Persist destroyed staged sessions until they are c...\nIb0ba9f378:Don't abandon child sessions (1/n)\n\nChange-Id: I50ab96061b2e0fa016a0fbdb5773ccc5f2397ac6",
  "pr_url": null,
  "pr_info": "no more info",
  "file_name": "services/core/java/com/android/server/pm/PackageInstallerSession.java",
  "func_name": "IOException",
  "func_before": "void write(@NonNull XmlSerializer out, @NonNull File sessionsDir) throws IOException {\n        synchronized (mLock) {\n            if (mDestroyed && !params.isStaged) {\n                return;\n            }\n\n            out.startTag(null, TAG_SESSION);\n\n            writeIntAttribute(out, ATTR_SESSION_ID, sessionId);\n            writeIntAttribute(out, ATTR_USER_ID, userId);\n            writeStringAttribute(out, ATTR_INSTALLER_PACKAGE_NAME,\n                    mInstallerPackageName);\n            writeIntAttribute(out, ATTR_INSTALLER_UID, mInstallerUid);\n            writeLongAttribute(out, ATTR_CREATED_MILLIS, createdMillis);\n            writeLongAttribute(out, ATTR_UPDATED_MILLIS, updatedMillis);\n            if (stageDir != null) {\n                writeStringAttribute(out, ATTR_SESSION_STAGE_DIR,\n                        stageDir.getAbsolutePath());\n            }\n            if (stageCid != null) {\n                writeStringAttribute(out, ATTR_SESSION_STAGE_CID, stageCid);\n            }\n            writeBooleanAttribute(out, ATTR_PREPARED, isPrepared());\n            writeBooleanAttribute(out, ATTR_COMMITTED, isCommitted());\n            writeBooleanAttribute(out, ATTR_DESTROYED, isDestroyed());\n            writeBooleanAttribute(out, ATTR_SEALED, isSealed());\n\n            writeBooleanAttribute(out, ATTR_MULTI_PACKAGE, params.isMultiPackage);\n            writeBooleanAttribute(out, ATTR_STAGED_SESSION, params.isStaged);\n            writeBooleanAttribute(out, ATTR_IS_READY, mStagedSessionReady);\n            writeBooleanAttribute(out, ATTR_IS_FAILED, mStagedSessionFailed);\n            writeBooleanAttribute(out, ATTR_IS_APPLIED, mStagedSessionApplied);\n            writeIntAttribute(out, ATTR_STAGED_SESSION_ERROR_CODE, mStagedSessionErrorCode);\n            writeStringAttribute(out, ATTR_STAGED_SESSION_ERROR_MESSAGE,\n                    mStagedSessionErrorMessage);\n            // TODO(patb,109941548): avoid writing to xml and instead infer / validate this after\n            //                       we've read all sessions.\n            writeIntAttribute(out, ATTR_PARENT_SESSION_ID, mParentSessionId);\n            writeIntAttribute(out, ATTR_MODE, params.mode);\n            writeIntAttribute(out, ATTR_INSTALL_FLAGS, params.installFlags);\n            writeIntAttribute(out, ATTR_INSTALL_LOCATION, params.installLocation);\n            writeLongAttribute(out, ATTR_SIZE_BYTES, params.sizeBytes);\n            writeStringAttribute(out, ATTR_APP_PACKAGE_NAME, params.appPackageName);\n            writeStringAttribute(out, ATTR_APP_LABEL, params.appLabel);\n            writeUriAttribute(out, ATTR_ORIGINATING_URI, params.originatingUri);\n            writeIntAttribute(out, ATTR_ORIGINATING_UID, params.originatingUid);\n            writeUriAttribute(out, ATTR_REFERRER_URI, params.referrerUri);\n            writeStringAttribute(out, ATTR_ABI_OVERRIDE, params.abiOverride);\n            writeStringAttribute(out, ATTR_VOLUME_UUID, params.volumeUuid);\n            writeIntAttribute(out, ATTR_INSTALL_REASON, params.installReason);\n\n            writeGrantedRuntimePermissionsLocked(out, params.grantedRuntimePermissions);\n            writeWhitelistedRestrictedPermissionsLocked(out,\n                    params.whitelistedRestrictedPermissions);\n\n            // Persist app icon if changed since last written\n            File appIconFile = buildAppIconFile(sessionId, sessionsDir);\n            if (params.appIcon == null && appIconFile.exists()) {\n                appIconFile.delete();\n            } else if (params.appIcon != null\n                    && appIconFile.lastModified() != params.appIconLastModified) {\n                if (LOGD) Slog.w(TAG, \"Writing changed icon \" + appIconFile);\n                FileOutputStream os = null;\n                try {\n                    os = new FileOutputStream(appIconFile);\n                    params.appIcon.compress(Bitmap.CompressFormat.PNG, 90, os);\n                } catch (IOException e) {\n                    Slog.w(TAG, \"Failed to write icon \" + appIconFile + \": \" + e.getMessage());\n                } finally {\n                    IoUtils.closeQuietly(os);\n                }\n\n                params.appIconLastModified = appIconFile.lastModified();\n            }\n            final int[] childSessionIds = getChildSessionIds();\n            for (int childSessionId : childSessionIds) {\n                out.startTag(null, TAG_CHILD_SESSION);\n                writeIntAttribute(out, ATTR_SESSION_ID, childSessionId);\n                out.endTag(null, TAG_CHILD_SESSION);\n            }\n        }\n\n        out.endTag(null, TAG_SESSION);\n    }",
  "func_after": "void write(@NonNull XmlSerializer out, @NonNull File sessionsDir) throws IOException {\n        synchronized (mLock) {\n            if (mDestroyed) {\n                return;\n            }\n\n            out.startTag(null, TAG_SESSION);\n\n            writeIntAttribute(out, ATTR_SESSION_ID, sessionId);\n            writeIntAttribute(out, ATTR_USER_ID, userId);\n            writeStringAttribute(out, ATTR_INSTALLER_PACKAGE_NAME,\n                    mInstallerPackageName);\n            writeIntAttribute(out, ATTR_INSTALLER_UID, mInstallerUid);\n            writeLongAttribute(out, ATTR_CREATED_MILLIS, createdMillis);\n            writeLongAttribute(out, ATTR_UPDATED_MILLIS, updatedMillis);\n            if (stageDir != null) {\n                writeStringAttribute(out, ATTR_SESSION_STAGE_DIR,\n                        stageDir.getAbsolutePath());\n            }\n            if (stageCid != null) {\n                writeStringAttribute(out, ATTR_SESSION_STAGE_CID, stageCid);\n            }\n            writeBooleanAttribute(out, ATTR_PREPARED, isPrepared());\n            writeBooleanAttribute(out, ATTR_COMMITTED, isCommitted());\n            writeBooleanAttribute(out, ATTR_SEALED, isSealed());\n\n            writeBooleanAttribute(out, ATTR_MULTI_PACKAGE, params.isMultiPackage);\n            writeBooleanAttribute(out, ATTR_STAGED_SESSION, params.isStaged);\n            writeBooleanAttribute(out, ATTR_IS_READY, mStagedSessionReady);\n            writeBooleanAttribute(out, ATTR_IS_FAILED, mStagedSessionFailed);\n            writeBooleanAttribute(out, ATTR_IS_APPLIED, mStagedSessionApplied);\n            writeIntAttribute(out, ATTR_STAGED_SESSION_ERROR_CODE, mStagedSessionErrorCode);\n            writeStringAttribute(out, ATTR_STAGED_SESSION_ERROR_MESSAGE,\n                    mStagedSessionErrorMessage);\n            // TODO(patb,109941548): avoid writing to xml and instead infer / validate this after\n            //                       we've read all sessions.\n            writeIntAttribute(out, ATTR_PARENT_SESSION_ID, mParentSessionId);\n            writeIntAttribute(out, ATTR_MODE, params.mode);\n            writeIntAttribute(out, ATTR_INSTALL_FLAGS, params.installFlags);\n            writeIntAttribute(out, ATTR_INSTALL_LOCATION, params.installLocation);\n            writeLongAttribute(out, ATTR_SIZE_BYTES, params.sizeBytes);\n            writeStringAttribute(out, ATTR_APP_PACKAGE_NAME, params.appPackageName);\n            writeStringAttribute(out, ATTR_APP_LABEL, params.appLabel);\n            writeUriAttribute(out, ATTR_ORIGINATING_URI, params.originatingUri);\n            writeIntAttribute(out, ATTR_ORIGINATING_UID, params.originatingUid);\n            writeUriAttribute(out, ATTR_REFERRER_URI, params.referrerUri);\n            writeStringAttribute(out, ATTR_ABI_OVERRIDE, params.abiOverride);\n            writeStringAttribute(out, ATTR_VOLUME_UUID, params.volumeUuid);\n            writeIntAttribute(out, ATTR_INSTALL_REASON, params.installReason);\n\n            writeGrantedRuntimePermissionsLocked(out, params.grantedRuntimePermissions);\n            writeWhitelistedRestrictedPermissionsLocked(out,\n                    params.whitelistedRestrictedPermissions);\n\n            // Persist app icon if changed since last written\n            File appIconFile = buildAppIconFile(sessionId, sessionsDir);\n            if (params.appIcon == null && appIconFile.exists()) {\n                appIconFile.delete();\n            } else if (params.appIcon != null\n                    && appIconFile.lastModified() != params.appIconLastModified) {\n                if (LOGD) Slog.w(TAG, \"Writing changed icon \" + appIconFile);\n                FileOutputStream os = null;\n                try {\n                    os = new FileOutputStream(appIconFile);\n                    params.appIcon.compress(Bitmap.CompressFormat.PNG, 90, os);\n                } catch (IOException e) {\n                    Slog.w(TAG, \"Failed to write icon \" + appIconFile + \": \" + e.getMessage());\n                } finally {\n                    IoUtils.closeQuietly(os);\n                }\n\n                params.appIconLastModified = appIconFile.lastModified();\n            }\n            final int[] childSessionIds = getChildSessionIds();\n            for (int childSessionId : childSessionIds) {\n                out.startTag(null, TAG_CHILD_SESSION);\n                writeIntAttribute(out, ATTR_SESSION_ID, childSessionId);\n                out.endTag(null, TAG_CHILD_SESSION);\n            }\n        }\n\n        out.endTag(null, TAG_SESSION);\n    }",
  "diff_func": "--- func_before\n+++ func_after\n void write(@NonNull XmlSerializer out, @NonNull File sessionsDir) throws IOException {\n         synchronized (mLock) {\n-            if (mDestroyed && !params.isStaged) {\n+            if (mDestroyed) {\n                 return;\n             }\n \n             out.startTag(null, TAG_SESSION);\n \n             writeIntAttribute(out, ATTR_SESSION_ID, sessionId);\n             writeIntAttribute(out, ATTR_USER_ID, userId);\n             writeStringAttribute(out, ATTR_INSTALLER_PACKAGE_NAME,\n                     mInstallerPackageName);\n             writeIntAttribute(out, ATTR_INSTALLER_UID, mInstallerUid);\n             writeLongAttribute(out, ATTR_CREATED_MILLIS, createdMillis);\n             writeLongAttribute(out, ATTR_UPDATED_MILLIS, updatedMillis);\n             if (stageDir != null) {\n                 writeStringAttribute(out, ATTR_SESSION_STAGE_DIR,\n                         stageDir.getAbsolutePath());\n             }\n             if (stageCid != null) {\n                 writeStringAttribute(out, ATTR_SESSION_STAGE_CID, stageCid);\n             }\n             writeBooleanAttribute(out, ATTR_PREPARED, isPrepared());\n             writeBooleanAttribute(out, ATTR_COMMITTED, isCommitted());\n-            writeBooleanAttribute(out, ATTR_DESTROYED, isDestroyed());\n             writeBooleanAttribute(out, ATTR_SEALED, isSealed());\n \n             writeBooleanAttribute(out, ATTR_MULTI_PACKAGE, params.isMultiPackage);\n             writeBooleanAttribute(out, ATTR_STAGED_SESSION, params.isStaged);\n             writeBooleanAttribute(out, ATTR_IS_READY, mStagedSessionReady);\n             writeBooleanAttribute(out, ATTR_IS_FAILED, mStagedSessionFailed);\n             writeBooleanAttribute(out, ATTR_IS_APPLIED, mStagedSessionApplied);\n             writeIntAttribute(out, ATTR_STAGED_SESSION_ERROR_CODE, mStagedSessionErrorCode);\n             writeStringAttribute(out, ATTR_STAGED_SESSION_ERROR_MESSAGE,\n                     mStagedSessionErrorMessage);\n             // T",
  "diff_source": "custom"
}