{
  "id": 3942,
  "language": "C/C++",
  "commit_url": "https://github.com/python/cpython/commit/a4ae828ee416a66d8c7bf5ee71d653c2cc6a26dd",
  "commit_sha": "a4ae828ee416a66d8c7bf5ee71d653c2cc6a26dd",
  "commit_msg": "closes bpo-34656: Avoid relying on signed overflow in _pickle memos. (GH-9261)",
  "pr_url": "https://github.com/python/cpython/pull/9261",
  "pr_info": "<!--\r\nThanks for your contribution!\r\nPlease read this comment in its entirety. It's quite important.\r\n\r\n# Pull Request title\r\n\r\nIt should be in the following format:\r\n\r\n```\r\nbpo-NNNN: Summary of the changes made\r\n```\r\n\r\nWhere: bpo-NNNN refers to the issue number in the https://bugs.python.org.\r\n\r\nMost PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue.\r\n\r\n# Backport Pull Request title\r\n\r\nIf this is a backport PR (PR made against branches other than `master`),\r\nplease ensure that the PR title is in the following format:\r\n\r\n```\r\n[X.Y] <title from the original PR> (GH-NNNN)\r\n```\r\n\r\nWhere: [X.Y] is the branch name, e.g. [3.6].\r\n\r\nGH-NNNN refers to the PR number from `master`.\r\n\r\n-->\r\n\n\n<!-- issue-number: [bpo-1621](https://www.bugs.python.org/issue1621) -->\nhttps://bugs.python.org/issue1621\n<!-- /issue-number -->\n",
  "file_name": "Modules/_pickle.c",
  "func_name": "PyMemoTable_Set",
  "func_before": "static int\nPyMemoTable_Set(PyMemoTable *self, PyObject *key, Py_ssize_t value)\n{\n    PyMemoEntry *entry;\n\n    assert(key != NULL);\n\n    entry = _PyMemoTable_Lookup(self, key);\n    if (entry->me_key != NULL) {\n        entry->me_value = value;\n        return 0;\n    }\n    Py_INCREF(key);\n    entry->me_key = key;\n    entry->me_value = value;\n    self->mt_used++;\n\n    /* If we added a key, we can safely resize. Otherwise just return!\n     * If used >= 2/3 size, adjust size. Normally, this quaduples the size.\n     *\n     * Quadrupling the size improves average table sparseness\n     * (reducing collisions) at the cost of some memory. It also halves\n     * the number of expensive resize operations in a growing memo table.\n     *\n     * Very large memo tables (over 50K items) use doubling instead.\n     * This may help applications with severe memory constraints.\n     */\n    if (!(self->mt_used * 3 >= (self->mt_mask + 1) * 2))\n        return 0;\n    return _PyMemoTable_ResizeTable(self,\n        (self->mt_used > 50000 ? 2 : 4) * self->mt_used);\n}",
  "func_after": "static int\nPyMemoTable_Set(PyMemoTable *self, PyObject *key, Py_ssize_t value)\n{\n    PyMemoEntry *entry;\n\n    assert(key != NULL);\n\n    entry = _PyMemoTable_Lookup(self, key);\n    if (entry->me_key != NULL) {\n        entry->me_value = value;\n        return 0;\n    }\n    Py_INCREF(key);\n    entry->me_key = key;\n    entry->me_value = value;\n    self->mt_used++;\n\n    /* If we added a key, we can safely resize. Otherwise just return!\n     * If used >= 2/3 size, adjust size. Normally, this quaduples the size.\n     *\n     * Quadrupling the size improves average table sparseness\n     * (reducing collisions) at the cost of some memory. It also halves\n     * the number of expensive resize operations in a growing memo table.\n     *\n     * Very large memo tables (over 50K items) use doubling instead.\n     * This may help applications with severe memory constraints.\n     */\n    if (SIZE_MAX / 3 >= self->mt_used && self->mt_used * 3 < self->mt_allocated * 2) {\n        return 0;\n    }\n    // self->mt_used is always < PY_SSIZE_T_MAX, so this can't overflow.\n    size_t desired_size = (self->mt_used > 50000 ? 2 : 4) * self->mt_used;\n    return _PyMemoTable_ResizeTable(self, desired_size);\n}",
  "diff_func": "--- func_before\n+++ func_after\n static int\n PyMemoTable_Set(PyMemoTable *self, PyObject *key, Py_ssize_t value)\n {\n     PyMemoEntry *entry;\n \n     assert(key != NULL);\n \n     entry = _PyMemoTable_Lookup(self, key);\n     if (entry->me_key != NULL) {\n         entry->me_value = value;\n         return 0;\n     }\n     Py_INCREF(key);\n     entry->me_key = key;\n     entry->me_value = value;\n     self->mt_used++;\n \n     /* If we added a key, we can safely resize. Otherwise just return!\n      * If used >= 2/3 size, adjust size. Normally, this quaduples the size.\n      *\n      * Quadrupling the size improves average table sparseness\n      * (reducing collisions) at the cost of some memory. It also halves\n      * the number of expensive resize operations in a growing memo table.\n      *\n      * Very large memo tables (over 50K items) use doubling instead.\n      * This may help applications with severe memory constraints.\n      */\n-    if (!(self->mt_used * 3 >= (self->mt_mask + 1) * 2))\n+    if (SIZE_MAX / 3 >= self->mt_used && self->mt_used * 3 < self->mt_allocated * 2) {\n         return 0;\n+    }\n+    // self->mt_used is always < PY_SSIZE_T_MAX, so this can't overflow.\n+    size_t desired_size = (self->mt_used > 50000 ? 2 : 4) * self->mt_used;\n-    return _PyMemoTable_ResizeTable(self,\n+    return _PyMemoTable_ResizeTable(self, desired_size);\n-        (self->mt_used > 50000 ? 2 : 4) * self->mt_used);\n }",
  "diff_source": "custom"
}