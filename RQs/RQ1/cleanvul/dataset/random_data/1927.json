{
  "id": 1927,
  "language": "Java",
  "commit_url": "https://github.com/AOSPA/android_frameworks_base/commit/83183e08c1ca3f21b2389df786cd5fb257081243",
  "commit_sha": "83183e08c1ca3f21b2389df786cd5fb257081243",
  "commit_msg": "Check rule package name in ZenModeHelper.addAutomaticRule\n\ninstead of checking that of the configuration activity, which is potentially spoofable. The package name is verified to be the same app as the caller by NMS.\n\nThis change removes isSystemRule (called only once) in favor of checking the provided package name directly.\n\nBug: 242537431\nTest: ZenModeHelperTest, manual by verifying via provided exploit apk\nChange-Id: Ic7f350618c26a613df455a4128c9195f4b424a4d\nMerged-In: Ic7f350618c26a613df455a4128c9195f4b424a4d\n(cherry picked from commit a826f9bd15d149305814a835fb5d1a3921a085f5)\nMerged-In: Ic7f350618c26a613df455a4128c9195f4b424a4d",
  "pr_url": null,
  "pr_info": "no more info",
  "file_name": "services/core/java/com/android/server/notification/ZenModeHelper.java",
  "func_name": "addAutomaticZenRule",
  "func_before": "public String addAutomaticZenRule(String pkg, AutomaticZenRule automaticZenRule,\n            String reason) {\n        if (!isSystemRule(automaticZenRule)) {\n            PackageItemInfo component = getServiceInfo(automaticZenRule.getOwner());\n            if (component == null) {\n                component = getActivityInfo(automaticZenRule.getConfigurationActivity());\n            }\n            if (component == null) {\n                throw new IllegalArgumentException(\"Lacking enabled CPS or config activity\");\n            }\n            int ruleInstanceLimit = -1;\n            if (component.metaData != null) {\n                ruleInstanceLimit = component.metaData.getInt(\n                        ConditionProviderService.META_DATA_RULE_INSTANCE_LIMIT, -1);\n            }\n            int newRuleInstanceCount = getCurrentInstanceCount(automaticZenRule.getOwner())\n                    + getCurrentInstanceCount(automaticZenRule.getConfigurationActivity())\n                    + 1;\n            int newPackageRuleCount = getPackageRuleCount(pkg) + 1;\n            if (newPackageRuleCount > RULE_LIMIT_PER_PACKAGE\n                    || (ruleInstanceLimit > 0 && ruleInstanceLimit < newRuleInstanceCount)) {\n                throw new IllegalArgumentException(\"Rule instance limit exceeded\");\n            }\n        }\n\n        ZenModeConfig newConfig;\n        synchronized (mConfig) {\n            if (mConfig == null) {\n                throw new AndroidRuntimeException(\"Could not create rule\");\n            }\n            if (DEBUG) {\n                Log.d(TAG, \"addAutomaticZenRule rule= \" + automaticZenRule + \" reason=\" + reason);\n            }\n            newConfig = mConfig.copy();\n            ZenRule rule = new ZenRule();\n            populateZenRule(pkg, automaticZenRule, rule, true);\n            newConfig.automaticRules.put(rule.id, rule);\n            if (setConfigLocked(newConfig, reason, rule.component, true)) {\n                return rule.id;\n            } else {\n                throw new AndroidRuntimeException(\"Could not create rule\");\n            }\n        }\n    }",
  "func_after": "public String addAutomaticZenRule(String pkg, AutomaticZenRule automaticZenRule,\n            String reason) {\n        if (!ZenModeConfig.SYSTEM_AUTHORITY.equals(pkg)) {\n            PackageItemInfo component = getServiceInfo(automaticZenRule.getOwner());\n            if (component == null) {\n                component = getActivityInfo(automaticZenRule.getConfigurationActivity());\n            }\n            if (component == null) {\n                throw new IllegalArgumentException(\"Lacking enabled CPS or config activity\");\n            }\n            int ruleInstanceLimit = -1;\n            if (component.metaData != null) {\n                ruleInstanceLimit = component.metaData.getInt(\n                        ConditionProviderService.META_DATA_RULE_INSTANCE_LIMIT, -1);\n            }\n            int newRuleInstanceCount = getCurrentInstanceCount(automaticZenRule.getOwner())\n                    + getCurrentInstanceCount(automaticZenRule.getConfigurationActivity())\n                    + 1;\n            int newPackageRuleCount = getPackageRuleCount(pkg) + 1;\n            if (newPackageRuleCount > RULE_LIMIT_PER_PACKAGE\n                    || (ruleInstanceLimit > 0 && ruleInstanceLimit < newRuleInstanceCount)) {\n                throw new IllegalArgumentException(\"Rule instance limit exceeded\");\n            }\n        }\n\n        ZenModeConfig newConfig;\n        synchronized (mConfig) {\n            if (mConfig == null) {\n                throw new AndroidRuntimeException(\"Could not create rule\");\n            }\n            if (DEBUG) {\n                Log.d(TAG, \"addAutomaticZenRule rule= \" + automaticZenRule + \" reason=\" + reason);\n            }\n            newConfig = mConfig.copy();\n            ZenRule rule = new ZenRule();\n            populateZenRule(pkg, automaticZenRule, rule, true);\n            newConfig.automaticRules.put(rule.id, rule);\n            if (setConfigLocked(newConfig, reason, rule.component, true)) {\n                return rule.id;\n            } else {\n                throw new AndroidRuntimeException(\"Could not create rule\");\n            }\n        }\n    }",
  "diff_func": "--- func_before\n+++ func_after\n public String addAutomaticZenRule(String pkg, AutomaticZenRule automaticZenRule,\n             String reason) {\n-        if (!isSystemRule(automaticZenRule)) {\n+        if (!ZenModeConfig.SYSTEM_AUTHORITY.equals(pkg)) {\n             PackageItemInfo component = getServiceInfo(automaticZenRule.getOwner());\n             if (component == null) {\n                 component = getActivityInfo(automaticZenRule.getConfigurationActivity());\n             }\n             if (component == null) {\n                 throw new IllegalArgumentException(\"Lacking enabled CPS or config activity\");\n             }\n             int ruleInstanceLimit = -1;\n             if (component.metaData != null) {\n                 ruleInstanceLimit = component.metaData.getInt(\n                         ConditionProviderService.META_DATA_RULE_INSTANCE_LIMIT, -1);\n             }\n             int newRuleInstanceCount = getCurrentInstanceCount(automaticZenRule.getOwner())\n                     + getCurrentInstanceCount(automaticZenRule.getConfigurationActivity())\n                     + 1;\n             int newPackageRuleCount = getPackageRuleCount(pkg) + 1;\n             if (newPackageRuleCount > RULE_LIMIT_PER_PACKAGE\n                     || (ruleInstanceLimit > 0 && ruleInstanceLimit < newRuleInstanceCount)) {\n                 throw new IllegalArgumentException(\"Rule instance limit exceeded\");\n             }\n         }\n \n         ZenModeConfig newConfig;\n         synchronized (mConfig) {\n             if (mConfig == null) {\n                 throw new AndroidRuntimeException(\"Could not create rule\");\n             }\n             if (DEBUG) {\n                 Log.d(TAG, \"addAutomaticZenRule rule= \" + automaticZenRule + \" reason=\" + reason);\n             }\n             newConfig = mConfig.copy();\n             ZenRule rule = new ZenRule();\n             populateZenRule(pkg, automaticZenRule, rule, true);\n             newConfig.automaticRules.put(rule.id, rule);\n             if (setConf",
  "diff_source": "custom"
}