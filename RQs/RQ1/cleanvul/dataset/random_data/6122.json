{
  "id": 6122,
  "language": "C#",
  "commit_url": "https://github.com/kareadita/kavita/commit/9c31f7e7c81b919923cb2e3857439ec0d16243e4",
  "commit_sha": "9c31f7e7c81b919923cb2e3857439ec0d16243e4",
  "commit_msg": "v0.5.4.1 - Security Hotfix (#1414)\n\n* Updated our security file with our Huntr.\r\n\r\n* Fixed a security vulnerability where through the API, an unauthorized user could delete/modify reading lists that did not belong to them.\r\n\r\nFixed a bug where when creating a reading list with the name of another users, the API would throw an exception (but reading list would still get created)\r\n\r\n* Fixed a security vulnerability where through the API, an unauthorized user could delete/modify reading lists that did not belong to them.\r\n\r\nFixed a bug where when creating a reading list with the name of another users, the API would throw an exception (but reading list would still get created)\r\n\r\n* Ensure all reading list apis are authorized\r\n\r\n* Ensured all APIs require authentication, except those that explicitly don't. All APIs are default requiring Authentication.\r\n\r\nFixed a security vulnerability which would allow a user to take over an admin account.\r\n\r\n* Fixed a bug where cover-upload would accept filenames that were not expected.\r\n\r\n* Explicitly check that a user has access to the pdf file before we serve it back.\r\n\r\n* Enabled lock out when invalid user auth occurs. After 5 invalid auths, the user account will be locked out for 10 mins.\r\n\r\n* Version bump for hotfix release",
  "pr_url": "https://github.com/Kareadita/Kavita/pull/1414",
  "pr_info": "This is a security hotfix, please update immediately! Several high severity issues were disclosed to the Kavita team this morning that require an immediate hotfix.\r\n\r\nThanks @vultza for disclosing these issues through [Huntr](https://huntr.dev/repos/kareadita/kavita/).\r\n\r\n# Added\r\n- Added: After 5 login attempts, Kavita will impose a 10 min lockout before authentication can be retried\r\n\r\n# Fixed\r\n- Fixed: Fixed an exploit that allowed a user to change the admin user's account password, thus taking ownership of the server\r\n- Fixed: Fixed an exploit that would allow an unauthorized user to delete reading list items within a user's reading list \r\n- Fixed: Fixed an exploit that allowed a user to abuse an API and leak sensitive files from the system\r\n- Fixed: Fixed an exploit that allowed an unauthenticated user to download pdfs from the server\r\n- Fixed: Fixed an exploit (SSRF) that would allow a user to upload a cover image that isn't an image\r\n\r\n",
  "file_name": "API/Controllers/ReadingListController.cs",
  "func_name": "HttpPost",
  "func_before": "[HttpPost(\"update-by-volume\")]\n        public async Task<ActionResult> UpdateListByVolume(UpdateReadingListByVolumeDto dto)\n        {\n            var user = await _unitOfWork.UserRepository.GetUserWithReadingListsByUsernameAsync(User.GetUsername());\n            var readingList = user.ReadingLists.SingleOrDefault(l => l.Id == dto.ReadingListId);\n            if (readingList == null) return BadRequest(\"Reading List does not exist\");\n            var chapterIdsForVolume =\n                (await _unitOfWork.ChapterRepository.GetChaptersAsync(dto.VolumeId)).Select(c => c.Id).ToList();\n\n            // If there are adds, tell tracking this has been modified\n            if (await AddChaptersToReadingList(dto.SeriesId, chapterIdsForVolume, readingList))\n            {\n                _unitOfWork.ReadingListRepository.Update(readingList);\n            }\n\n            try\n            {\n                if (_unitOfWork.HasChanges())\n                {\n                    await _unitOfWork.CommitAsync();\n                    return Ok(\"Updated\");\n                }\n            }\n            catch\n            {\n                await _unitOfWork.RollbackAsync();\n            }\n\n            return Ok(\"Nothing to do\");\n        }",
  "func_after": "[HttpPost(\"update-by-volume\")]\n        public async Task<ActionResult> UpdateListByVolume(UpdateReadingListByVolumeDto dto)\n        {\n            var user = await UserHasReadingListAccess(dto.ReadingListId);\n            if (user == null)\n            {\n                return BadRequest(\"You do not have permissions on this reading list or the list doesn't exist\");\n            }\n            var readingList = user.ReadingLists.SingleOrDefault(l => l.Id == dto.ReadingListId);\n            if (readingList == null) return BadRequest(\"Reading List does not exist\");\n\n            var chapterIdsForVolume =\n                (await _unitOfWork.ChapterRepository.GetChaptersAsync(dto.VolumeId)).Select(c => c.Id).ToList();\n\n            // If there are adds, tell tracking this has been modified\n            if (await AddChaptersToReadingList(dto.SeriesId, chapterIdsForVolume, readingList))\n            {\n                _unitOfWork.ReadingListRepository.Update(readingList);\n            }\n\n            try\n            {\n                if (_unitOfWork.HasChanges())\n                {\n                    await _unitOfWork.CommitAsync();\n                    return Ok(\"Updated\");\n                }\n            }\n            catch\n            {\n                await _unitOfWork.RollbackAsync();\n            }\n\n            return Ok(\"Nothing to do\");\n        }",
  "diff_func": "--- func_before\n+++ func_after\n [HttpPost(\"update-by-volume\")]\n         public async Task<ActionResult> UpdateListByVolume(UpdateReadingListByVolumeDto dto)\n         {\n-            var user = await _unitOfWork.UserRepository.GetUserWithReadingListsByUsernameAsync(User.GetUsername());\n+            var user = await UserHasReadingListAccess(dto.ReadingListId);\n+            if (user == null)\n+            {\n+                return BadRequest(\"You do not have permissions on this reading list or the list doesn't exist\");\n+            }\n             var readingList = user.ReadingLists.SingleOrDefault(l => l.Id == dto.ReadingListId);\n             if (readingList == null) return BadRequest(\"Reading List does not exist\");\n+\n             var chapterIdsForVolume =\n                 (await _unitOfWork.ChapterRepository.GetChaptersAsync(dto.VolumeId)).Select(c => c.Id).ToList();\n \n             // If there are adds, tell tracking this has been modified\n             if (await AddChaptersToReadingList(dto.SeriesId, chapterIdsForVolume, readingList))\n             {\n                 _unitOfWork.ReadingListRepository.Update(readingList);\n             }\n \n             try\n             {\n                 if (_unitOfWork.HasChanges())\n                 {\n                     await _unitOfWork.CommitAsync();\n                     return Ok(\"Updated\");\n                 }\n             }\n             catch\n             {\n                 await _unitOfWork.RollbackAsync();\n             }\n \n             return Ok(\"Nothing to do\");\n         }",
  "diff_source": "custom"
}