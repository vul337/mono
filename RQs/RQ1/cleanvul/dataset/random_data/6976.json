{
  "id": 6976,
  "language": "Python",
  "commit_url": "https://github.com/MobSF/Mobile-Security-Framework-MobSF/commit/b9cdd1f52bdf127cf33bb1be369e374a2855f8e6",
  "commit_sha": "b9cdd1f52bdf127cf33bb1be369e374a2855f8e6",
  "commit_msg": "Security: Fix for LFI found by thongngo",
  "pr_url": null,
  "pr_info": "no more info",
  "file_name": "StaticAnalyzer/views.py",
  "func_name": "PDF",
  "func_before": "def PDF(request):\n    try:\n        MD5=request.GET['md5']\n        TYP=request.GET['type']\n        m=re.match('[0-9a-f]{32}',MD5)\n        if m:\n            if (TYP=='APK' or TYP=='ANDZIP'):\n                DB=StaticAnalyzerAndroid.objects.filter(MD5=MD5)\n                if DB.exists():\n                    print \"\\n[INFO] Fetching data from DB for PDF Report Generation (Android)\"\n                    context = {\n                    'title' : DB[0].TITLE,\n                    'name' : DB[0].APP_NAME,\n                    'size' : DB[0].SIZE,\n                    'md5': DB[0].MD5,\n                    'sha1' : DB[0].SHA1,\n                    'sha256' : DB[0].SHA256,\n                    'packagename' : DB[0].PACKAGENAME,\n                    'mainactivity' : DB[0].MAINACTIVITY,\n                    'targetsdk' : DB[0].TARGET_SDK,\n                    'maxsdk' : DB[0].MAX_SDK,\n                    'minsdk' : DB[0].MIN_SDK,\n                    'androvername' : DB[0].ANDROVERNAME,\n                    'androver': DB[0].ANDROVER,\n                    'manifest': DB[0].MANIFEST_ANAL,\n                    'permissions' : DB[0].PERMISSIONS,\n                    'files' : python_list(DB[0].FILES),\n                    'certz' : DB[0].CERTZ,\n                    'activities' : python_list(DB[0].ACTIVITIES),\n                    'receivers' : python_list(DB[0].RECEIVERS),\n                    'providers' : python_list(DB[0].PROVIDERS),\n                    'services' : python_list(DB[0].SERVICES),\n                    'libraries' : python_list(DB[0].LIBRARIES),\n                    'act_count' : DB[0].CNT_ACT,\n                    'prov_count' : DB[0].CNT_PRO,\n                    'serv_count' : DB[0].CNT_SER,\n                    'bro_count' : DB[0].CNT_BRO,\n                    'certinfo': DB[0].CERT_INFO,\n                    'issued':DB[0].ISSUED,\n                    'native' : DB[0].NATIVE,\n                    'dynamic' : DB[0].DYNAMIC,\n                    'reflection' : DB[0].REFLECT,\n                    'crypto': DB[0].CRYPTO,\n                    'obfus': DB[0].OBFUS,\n                    'api': DB[0].API,\n                    'dang': DB[0].DANG,\n                    'urls': DB[0].URLS,\n                    'domains': python_dict(DB[0].DOMAINS),\n                    'emails': DB[0].EMAILS,\n                    'strings': python_list(DB[0].STRINGS),\n                    'zipped' : DB[0].ZIPPED,\n                    'mani': DB[0].MANI\n                    }\n                    if TYP=='APK':\n                        template= get_template(\"static_analysis_pdf.html\")\n                    else:\n                        template= get_template(\"static_analysis_zip_pdf.html\")\n            elif re.findall('IPA|IOSZIP',TYP):\n                if TYP=='IPA':\n                    DB=StaticAnalyzerIPA.objects.filter(MD5=MD5)\n                    if DB.exists():\n                        print \"\\n[INFO] Fetching data from DB for PDF Report Generation (IOS IPA)\"\n                        context = {\n                        'title' : DB[0].TITLE,\n                        'name' : DB[0].APPNAMEX,\n                        'size' : DB[0].SIZE,\n                        'md5': DB[0].MD5,\n                        'sha1' : DB[0].SHA1,\n                        'sha256' : DB[0].SHA256,\n                        'plist' : DB[0].INFOPLIST,\n                        'bin_name' : DB[0].BINNAME,\n                        'id' : DB[0].IDF,\n                        'ver' : DB[0].VERSION,\n                        'sdk' : DB[0].SDK,\n                        'pltfm' : DB[0].PLTFM,\n                        'min' : DB[0].MINX,\n                        'bin_anal' : DB[0].BIN_ANAL,\n                        'libs' : DB[0].LIBS,\n                        'files' : python_list(DB[0].FILES),\n                        'file_analysis' : DB[0].SFILESX,\n                        }\n                        template= get_template(\"ios_binary_analysis_pdf.html\")\n                elif TYP=='IOSZIP':\n                    DB=StaticAnalyzerIOSZIP.objects.filter(MD5=MD5)\n                    if DB.exists():\n                        print \"\\n[INFO] Fetching data from DB for PDF Report Generation (IOS ZIP)\"\n                        context = {\n                        'title' : DB[0].TITLE,\n                        'name' : DB[0].APPNAMEX,\n                        'size' : DB[0].SIZE,\n                        'md5': DB[0].MD5,\n                        'sha1' : DB[0].SHA1,\n                        'sha256' : DB[0].SHA256,\n                        'plist' : DB[0].INFOPLIST,\n                        'bin_name' : DB[0].BINNAME,\n                        'id' : DB[0].IDF,\n                        'ver' : DB[0].VERSION,\n                        'sdk' : DB[0].SDK,\n                        'pltfm' : DB[0].PLTFM,\n                        'min' : DB[0].MINX,\n                        'bin_anal' : DB[0].BIN_ANAL,\n                        'libs' : DB[0].LIBS,\n                        'files' : python_list(DB[0].FILES),\n                        'file_analysis' : DB[0].SFILESX,\n                        'api' : DB[0].HTML,\n                        'insecure' : DB[0].CODEANAL,\n                        'urls' : DB[0].URLnFile,\n                        'domains': python_dict(DB[0].DOMAINS),\n                        'emails' : DB[0].EmailnFile\n                        }\n                        template= get_template(\"ios_source_analysis_pdf.html\")\n            else:\n                return HttpResponseRedirect('/error/') \n            html  = template.render(context)\n            result = StringIO()\n            pdf = pisa.pisaDocument(StringIO( \"{0}\".format(html.encode('utf-8'))), result, encoding='utf-8')\n            if not pdf.err:\n                return HttpResponse(result.getvalue(), content_type='application/pdf')\n            else:\n                return HttpResponseRedirect('/error/') \n        else:\n            return HttpResponseRedirect('/error/') \n    except:\n        \n        PrintException(\"[ERROR] PDF Report Generation Error\")\n        return HttpResponseRedirect('/error/') \n        pass",
  "func_after": "def PDF(request):\n    try:\n        MD5=request.GET['md5']\n        TYP=request.GET['type']\n        m=re.match('^[0-9a-f]{32}$',MD5)\n        if m:\n            if (TYP=='APK' or TYP=='ANDZIP'):\n                DB=StaticAnalyzerAndroid.objects.filter(MD5=MD5)\n                if DB.exists():\n                    print \"\\n[INFO] Fetching data from DB for PDF Report Generation (Android)\"\n                    context = {\n                    'title' : DB[0].TITLE,\n                    'name' : DB[0].APP_NAME,\n                    'size' : DB[0].SIZE,\n                    'md5': DB[0].MD5,\n                    'sha1' : DB[0].SHA1,\n                    'sha256' : DB[0].SHA256,\n                    'packagename' : DB[0].PACKAGENAME,\n                    'mainactivity' : DB[0].MAINACTIVITY,\n                    'targetsdk' : DB[0].TARGET_SDK,\n                    'maxsdk' : DB[0].MAX_SDK,\n                    'minsdk' : DB[0].MIN_SDK,\n                    'androvername' : DB[0].ANDROVERNAME,\n                    'androver': DB[0].ANDROVER,\n                    'manifest': DB[0].MANIFEST_ANAL,\n                    'permissions' : DB[0].PERMISSIONS,\n                    'files' : python_list(DB[0].FILES),\n                    'certz' : DB[0].CERTZ,\n                    'activities' : python_list(DB[0].ACTIVITIES),\n                    'receivers' : python_list(DB[0].RECEIVERS),\n                    'providers' : python_list(DB[0].PROVIDERS),\n                    'services' : python_list(DB[0].SERVICES),\n                    'libraries' : python_list(DB[0].LIBRARIES),\n                    'act_count' : DB[0].CNT_ACT,\n                    'prov_count' : DB[0].CNT_PRO,\n                    'serv_count' : DB[0].CNT_SER,\n                    'bro_count' : DB[0].CNT_BRO,\n                    'certinfo': DB[0].CERT_INFO,\n                    'issued':DB[0].ISSUED,\n                    'native' : DB[0].NATIVE,\n                    'dynamic' : DB[0].DYNAMIC,\n                    'reflection' : DB[0].REFLECT,\n                    'crypto': DB[0].CRYPTO,\n                    'obfus': DB[0].OBFUS,\n                    'api': DB[0].API,\n                    'dang': DB[0].DANG,\n                    'urls': DB[0].URLS,\n                    'domains': python_dict(DB[0].DOMAINS),\n                    'emails': DB[0].EMAILS,\n                    'strings': python_list(DB[0].STRINGS),\n                    'zipped' : DB[0].ZIPPED,\n                    'mani': DB[0].MANI\n                    }\n                    if TYP=='APK':\n                        template= get_template(\"static_analysis_pdf.html\")\n                    else:\n                        template= get_template(\"static_analysis_zip_pdf.html\")\n            elif re.findall('IPA|IOSZIP',TYP):\n                if TYP=='IPA':\n                    DB=StaticAnalyzerIPA.objects.filter(MD5=MD5)\n                    if DB.exists():\n                        print \"\\n[INFO] Fetching data from DB for PDF Report Generation (IOS IPA)\"\n                        context = {\n                        'title' : DB[0].TITLE,\n                        'name' : DB[0].APPNAMEX,\n                        'size' : DB[0].SIZE,\n                        'md5': DB[0].MD5,\n                        'sha1' : DB[0].SHA1,\n                        'sha256' : DB[0].SHA256,\n                        'plist' : DB[0].INFOPLIST,\n                        'bin_name' : DB[0].BINNAME,\n                        'id' : DB[0].IDF,\n                        'ver' : DB[0].VERSION,\n                        'sdk' : DB[0].SDK,\n                        'pltfm' : DB[0].PLTFM,\n                        'min' : DB[0].MINX,\n                        'bin_anal' : DB[0].BIN_ANAL,\n                        'libs' : DB[0].LIBS,\n                        'files' : python_list(DB[0].FILES),\n                        'file_analysis' : DB[0].SFILESX,\n                        }\n                        template= get_template(\"ios_binary_analysis_pdf.html\")\n                elif TYP=='IOSZIP':\n                    DB=StaticAnalyzerIOSZIP.objects.filter(MD5=MD5)\n                    if DB.exists():\n                        print \"\\n[INFO] Fetching data from DB for PDF Report Generation (IOS ZIP)\"\n                        context = {\n                        'title' : DB[0].TITLE,\n                        'name' : DB[0].APPNAMEX,\n                        'size' : DB[0].SIZE,\n                        'md5': DB[0].MD5,\n                        'sha1' : DB[0].SHA1,\n                        'sha256' : DB[0].SHA256,\n                        'plist' : DB[0].INFOPLIST,\n                        'bin_name' : DB[0].BINNAME,\n                        'id' : DB[0].IDF,\n                        'ver' : DB[0].VERSION,\n                        'sdk' : DB[0].SDK,\n                        'pltfm' : DB[0].PLTFM,\n                        'min' : DB[0].MINX,\n                        'bin_anal' : DB[0].BIN_ANAL,\n                        'libs' : DB[0].LIBS,\n                        'files' : python_list(DB[0].FILES),\n                        'file_analysis' : DB[0].SFILESX,\n                        'api' : DB[0].HTML,\n                        'insecure' : DB[0].CODEANAL,\n                        'urls' : DB[0].URLnFile,\n                        'domains': python_dict(DB[0].DOMAINS),\n                        'emails' : DB[0].EmailnFile\n                        }\n                        template= get_template(\"ios_source_analysis_pdf.html\")\n            else:\n                return HttpResponseRedirect('/error/') \n            html  = template.render(context)\n            result = StringIO()\n            pdf = pisa.pisaDocument(StringIO( \"{0}\".format(html.encode('utf-8'))), result, encoding='utf-8')\n            if not pdf.err:\n                return HttpResponse(result.getvalue(), content_type='application/pdf')\n            else:\n                return HttpResponseRedirect('/error/') \n        else:\n            return HttpResponseRedirect('/error/') \n    except:\n        \n        PrintException(\"[ERROR] PDF Report Generation Error\")\n        return HttpResponseRedirect('/error/') \n        pass",
  "diff_func": "--- func_before\n+++ func_after\n def PDF(request):\n     try:\n         MD5=request.GET['md5']\n         TYP=request.GET['type']\n-        m=re.match('[0-9a-f]{32}',MD5)\n+        m=re.match('^[0-9a-f]{32}$',MD5)\n         if m:\n             if (TYP=='APK' or TYP=='ANDZIP'):\n                 DB=StaticAnalyzerAndroid.objects.filter(MD5=MD5)\n                 if DB.exists():\n                     print \"\\n[INFO] Fetching data from DB for PDF Report Generation (Android)\"\n                     context = {\n                     'title' : DB[0].TITLE,\n                     'name' : DB[0].APP_NAME,\n                     'size' : DB[0].SIZE,\n                     'md5': DB[0].MD5,\n                     'sha1' : DB[0].SHA1,\n                     'sha256' : DB[0].SHA256,\n                     'packagename' : DB[0].PACKAGENAME,\n                     'mainactivity' : DB[0].MAINACTIVITY,\n                     'targetsdk' : DB[0].TARGET_SDK,\n                     'maxsdk' : DB[0].MAX_SDK,\n                     'minsdk' : DB[0].MIN_SDK,\n                     'androvername' : DB[0].ANDROVERNAME,\n                     'androver': DB[0].ANDROVER,\n                     'manifest': DB[0].MANIFEST_ANAL,\n                     'permissions' : DB[0].PERMISSIONS,\n                     'files' : python_list(DB[0].FILES),\n                     'certz' : DB[0].CERTZ,\n                     'activities' : python_list(DB[0].ACTIVITIES),\n                     'receivers' : python_list(DB[0].RECEIVERS),\n                     'providers' : python_list(DB[0].PROVIDERS),\n                     'services' : python_list(DB[0].SERVICES),\n                     'libraries' : python_list(DB[0].LIBRARIES),\n                     'act_count' : DB[0].CNT_ACT,\n                     'prov_count' : DB[0].CNT_PRO,\n                     'serv_count' : DB[0].CNT_SER,\n                     'bro_count' : DB[0].CNT_BRO,\n                     'certinfo': DB[0].CERT_INFO,\n                     'issued':DB[0].ISSUED,\n                     'native' : DB[0].NATIVE",
  "diff_source": "custom"
}