{
  "id": 523,
  "language": "Java",
  "commit_url": "https://github.com/aosp-mirror/platform_frameworks_base/commit/75c1d6096c162fc37e6eca36f4e653072e463263",
  "commit_sha": "75c1d6096c162fc37e6eca36f4e653072e463263",
  "commit_msg": "[RESTRICT AUTOMERGE][SettingsProvider] key size limit for mutating settings\n\nPrior to targetSdk 22, apps could add random system settings keys which\nopens an opportunity for OOM attacks. This CL adds a key size limit.\n\nBUG: 239415997\nTest: manual; will add cts test\nMerged-In: Ic9e88c0cc3d7206c64ba5b5c7d15b50d1ffc9adc\nChange-Id: Ic9e88c0cc3d7206c64ba5b5c7d15b50d1ffc9adc\n(cherry picked from commit 783bcba343c480f6ccedaaff41ba7171a1082e0c)",
  "pr_url": null,
  "pr_info": "no more info",
  "file_name": "packages/SettingsProvider/src/com/android/providers/settings/SettingsState.java",
  "func_name": "GuardedBy",
  "func_before": "@GuardedBy(\"mLock\")\n    public boolean deleteSettingLocked(String name) {\n        if (TextUtils.isEmpty(name) || !hasSettingLocked(name)) {\n            return false;\n        }\n\n        Setting oldState = mSettings.remove(name);\n        int newSize = getNewMemoryUsagePerPackageLocked(oldState.packageName, oldState.value,\n                null, oldState.defaultValue, null);\n\n        FrameworkStatsLog.write(FrameworkStatsLog.SETTING_CHANGED, name, /* value= */ \"\",\n                /* newValue= */ \"\", oldState.value, /* tag */ \"\", false, getUserIdFromKey(mKey),\n                FrameworkStatsLog.SETTING_CHANGED__REASON__DELETED);\n\n        updateMemoryUsagePerPackageLocked(oldState.packageName, newSize);\n\n        addHistoricalOperationLocked(HISTORICAL_OPERATION_DELETE, oldState);\n\n        scheduleWriteIfNeededLocked();\n\n        return true;\n    }",
  "func_after": "@GuardedBy(\"mLock\")\n    public boolean deleteSettingLocked(String name) {\n        if (TextUtils.isEmpty(name) || !hasSettingLocked(name)) {\n            return false;\n        }\n\n        Setting oldState = mSettings.remove(name);\n        if (oldState == null) {\n            return false;\n        }\n        int newSize = getNewMemoryUsagePerPackageLocked(oldState.packageName,\n                -name.length() /* deltaKeySize */,\n                oldState.value, null, oldState.defaultValue, null);\n\n        FrameworkStatsLog.write(FrameworkStatsLog.SETTING_CHANGED, name, /* value= */ \"\",\n                /* newValue= */ \"\", oldState.value, /* tag */ \"\", false, getUserIdFromKey(mKey),\n                FrameworkStatsLog.SETTING_CHANGED__REASON__DELETED);\n\n        updateMemoryUsagePerPackageLocked(oldState.packageName, newSize);\n\n        addHistoricalOperationLocked(HISTORICAL_OPERATION_DELETE, oldState);\n\n        scheduleWriteIfNeededLocked();\n\n        return true;\n    }",
  "diff_func": "--- func_before\n+++ func_after\n @GuardedBy(\"mLock\")\n     public boolean deleteSettingLocked(String name) {\n         if (TextUtils.isEmpty(name) || !hasSettingLocked(name)) {\n             return false;\n         }\n \n         Setting oldState = mSettings.remove(name);\n+        if (oldState == null) {\n+            return false;\n+        }\n-        int newSize = getNewMemoryUsagePerPackageLocked(oldState.packageName, oldState.value,\n+        int newSize = getNewMemoryUsagePerPackageLocked(oldState.packageName,\n+                -name.length() /* deltaKeySize */,\n-                null, oldState.defaultValue, null);\n+                oldState.value, null, oldState.defaultValue, null);\n \n         FrameworkStatsLog.write(FrameworkStatsLog.SETTING_CHANGED, name, /* value= */ \"\",\n                 /* newValue= */ \"\", oldState.value, /* tag */ \"\", false, getUserIdFromKey(mKey),\n                 FrameworkStatsLog.SETTING_CHANGED__REASON__DELETED);\n \n         updateMemoryUsagePerPackageLocked(oldState.packageName, newSize);\n \n         addHistoricalOperationLocked(HISTORICAL_OPERATION_DELETE, oldState);\n \n         scheduleWriteIfNeededLocked();\n \n         return true;\n     }",
  "diff_source": "custom"
}