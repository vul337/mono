{
  "id": 3814,
  "language": "Python",
  "commit_url": "https://github.com/DataDog/guarddog/commit/a56aff58264cb6b7855d71b00dc10c39a5dbd306",
  "commit_sha": "a56aff58264cb6b7855d71b00dc10c39a5dbd306",
  "commit_msg": "Use tarsafe instead of built-in tarfile to extract archives",
  "pr_url": "https://github.com/DataDog/guarddog/pull/89",
  "pr_info": "no more info",
  "file_name": "guarddog/scanners/package_scanner.py",
  "func_name": "scan_local",
  "func_before": "def scan_local(self, path, rules=None) -> dict:\n        \"\"\"\n        Scans local package\n\n        Args:\n            path (str): path to package\n            rules (set, optional): Set of rule names to use. Defaults to all rules.\n\n        Raises:\n            Exception: Analyzer exception\n\n        Returns:\n            dict: Analyzer output with rules to results mapping\n        \"\"\"\n\n        if rules is not None:\n            rules = set(rules)\n\n        if os.path.exists(path):\n            if path.endswith('.tar.gz'):\n                with tempfile.TemporaryDirectory() as tmpdirname:\n                    tarfile.open(path).extractall(tmpdirname)\n                    return self.analyzer.analyze_sourcecode(tmpdirname, rules=rules)\n            elif os.path.isdir(path):\n                return self.analyzer.analyze_sourcecode(path, rules=rules)\n        else:\n            raise Exception(f\"Path {path} does not exist.\")",
  "func_after": "def scan_local(self, path, rules=None) -> dict:\n        \"\"\"\n        Scans local package\n\n        Args:\n            path (str): path to package\n            rules (set, optional): Set of rule names to use. Defaults to all rules.\n\n        Raises:\n            Exception: Analyzer exception\n\n        Returns:\n            dict: Analyzer output with rules to results mapping\n        \"\"\"\n\n        if rules is not None:\n            rules = set(rules)\n\n        if os.path.exists(path):\n            if path.endswith('.tar.gz'):\n                with tempfile.TemporaryDirectory() as tmpdirname:\n                    tarsafe.open(path).extractall(tmpdirname)\n                    return self.analyzer.analyze_sourcecode(tmpdirname, rules=rules)\n            elif os.path.isdir(path):\n                return self.analyzer.analyze_sourcecode(path, rules=rules)\n        else:\n            raise Exception(f\"Path {path} does not exist.\")",
  "diff_func": "--- func_before\n+++ func_after\n def scan_local(self, path, rules=None) -> dict:\n         \"\"\"\n         Scans local package\n \n         Args:\n             path (str): path to package\n             rules (set, optional): Set of rule names to use. Defaults to all rules.\n \n         Raises:\n             Exception: Analyzer exception\n \n         Returns:\n             dict: Analyzer output with rules to results mapping\n         \"\"\"\n \n         if rules is not None:\n             rules = set(rules)\n \n         if os.path.exists(path):\n             if path.endswith('.tar.gz'):\n                 with tempfile.TemporaryDirectory() as tmpdirname:\n-                    tarfile.open(path).extractall(tmpdirname)\n+                    tarsafe.open(path).extractall(tmpdirname)\n                     return self.analyzer.analyze_sourcecode(tmpdirname, rules=rules)\n             elif os.path.isdir(path):\n                 return self.analyzer.analyze_sourcecode(path, rules=rules)\n         else:\n             raise Exception(f\"Path {path} does not exist.\")",
  "diff_source": "custom"
}