{
  "id": 559,
  "language": "Java",
  "commit_url": "https://github.com/apache/pulsar/commit/d81568e2bd606fd652632118a2f9bfe087e68be5",
  "commit_sha": "d81568e2bd606fd652632118a2f9bfe087e68be5",
  "commit_msg": "[branch-2.8][fix][security] Add timeout of sync methods and avoid call sync method for AuthoriationService (#15694) (#16831)\n\n(cherry picked from commit 6af365e36aed74e95ca6e088f453d9513094bb36)\r\n\r\nBesides resolving the basic conflicts, this PR\r\n- migrate `validateAdminAccessForTenantAsync` from #14149\r\n- migrate `TenantResources#getTenantAsync` from #11693\r\n\r\nCo-authored-by: lipenghui <penghui@apache.org>",
  "pr_url": "https://github.com/apache/pulsar/pull/16831",
  "pr_info": "(cherry picked from commit 6af365e36aed74e95ca6e088f453d9513094bb36)\r\n\r\nBesides resolving the basic conflicts, this PR\r\n- migrate `validateAdminAccessForTenantAsync` from #14149\r\n- migrate `TenantResources#getTenantAsync` from #11693\r\n\r\n### Documentation\r\n\r\nCheck the box below or label this PR directly.\r\n\r\nNeed to update docs? \r\n\r\n- [ ] `doc-required` \r\n(Your PR needs to update docs and you will update later)\r\n  \r\n- [x] `doc-not-needed` \r\n(Please explain why)\r\n  \r\n- [ ] `doc` \r\n(Your PR contains doc changes)\r\n\r\n- [ ] `doc-complete`\r\n(Docs have been already added)",
  "file_name": "pulsar-broker-common/src/main/java/org/apache/pulsar/broker/authorization/AuthorizationService.java",
  "func_name": "allowTopicPolicyOperation",
  "func_before": "public Boolean allowTopicPolicyOperation(TopicName topicName,\n                                             PolicyName policy,\n                                             PolicyOperation operation,\n                                             String originalRole,\n                                             String role,\n                                             AuthenticationDataSource authData) {\n        try {\n            return allowTopicPolicyOperationAsync(\n                    topicName, policy, operation, originalRole, role, authData).get();\n        } catch (InterruptedException e) {\n            throw new RestException(e);\n        } catch (ExecutionException e) {\n            throw new RestException(e.getCause());\n        }\n    }",
  "func_after": "public Boolean allowTopicPolicyOperation(TopicName topicName,\n                                             PolicyName policy,\n                                             PolicyOperation operation,\n                                             String originalRole,\n                                             String role,\n                                             AuthenticationDataSource authData) {\n        try {\n            return allowTopicPolicyOperationAsync(\n                    topicName, policy, operation, originalRole, role, authData).get(\n                            conf.getZooKeeperOperationTimeoutSeconds(), SECONDS);\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new RestException(e);\n        } catch (ExecutionException e) {\n            throw new RestException(e.getCause());\n        } catch (TimeoutException e) {\n            throw new RestException(e);\n        }\n    }",
  "diff_func": "--- func_before\n+++ func_after\n public Boolean allowTopicPolicyOperation(TopicName topicName,\n                                              PolicyName policy,\n                                              PolicyOperation operation,\n                                              String originalRole,\n                                              String role,\n                                              AuthenticationDataSource authData) {\n         try {\n             return allowTopicPolicyOperationAsync(\n-                    topicName, policy, operation, originalRole, role, authData).get();\n+                    topicName, policy, operation, originalRole, role, authData).get(\n+                            conf.getZooKeeperOperationTimeoutSeconds(), SECONDS);\n         } catch (InterruptedException e) {\n+            Thread.currentThread().interrupt();\n             throw new RestException(e);\n         } catch (ExecutionException e) {\n             throw new RestException(e.getCause());\n+        } catch (TimeoutException e) {\n+            throw new RestException(e);\n         }\n     }",
  "diff_source": "custom"
}