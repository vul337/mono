{
  "id": 2120,
  "language": "Java",
  "commit_url": "https://github.com/PixelExperience/frameworks_base/commit/414644a2f7b56160dfc37ae823d70dec98d95796",
  "commit_sha": "414644a2f7b56160dfc37ae823d70dec98d95796",
  "commit_msg": "AudioService: validate uid / package name match\n\nWhen checking app ops, check for exceptions that indicate uid\nand package name mismatch.\nThis affects the code paths for methods:\n- adjustStreamVolume\n- setStreamVolume\n- setMicrophoneMute\n- setMasterMute\n\nBug: 194110891 194110526\nTest: see bug exploit app, verify real/bogus package shows uninstalled\nChange-Id: Ice7a84993c68e7ec736fdf0b9fd5b8171b37b725\nMerged-In: Ice7a84993c68e7ec736fdf0b9fd5b8171b37b725\n(cherry picked from commit e0141e5be0337b6eea75ef75076ac69e8bfddc6a)",
  "pr_url": null,
  "pr_info": "no more info",
  "file_name": "services/core/java/com/android/server/audio/AudioService.java",
  "func_name": "setStreamVolume",
  "func_before": "private void setStreamVolume(int streamType, int index, int flags, String callingPackage,\n            String caller, int uid, boolean hasModifyAudioSettings) {\n        if (DEBUG_VOL) {\n            Log.d(TAG, \"setStreamVolume(stream=\" + streamType+\", index=\" + index\n                    + \", calling=\" + callingPackage + \")\");\n        }\n        if (mUseFixedVolume) {\n            return;\n        }\n\n        ensureValidStreamType(streamType);\n        int streamTypeAlias = mStreamVolumeAlias[streamType];\n        VolumeStreamState streamState = mStreamStates[streamTypeAlias];\n\n        final int device = getDeviceForStream(streamType);\n        int oldIndex;\n\n        // skip a2dp absolute volume control request when the device\n        // is not an a2dp device\n        if (!AudioSystem.DEVICE_OUT_ALL_A2DP_SET.contains(device)\n                && (flags & AudioManager.FLAG_BLUETOOTH_ABS_VOLUME) != 0) {\n            return;\n        }\n        // If we are being called by the system (e.g. hardware keys) check for current user\n        // so we handle user restrictions correctly.\n        if (uid == android.os.Process.SYSTEM_UID) {\n            uid = UserHandle.getUid(getCurrentUserId(), UserHandle.getAppId(uid));\n        }\n        if (mAppOps.noteOp(STREAM_VOLUME_OPS[streamTypeAlias], uid, callingPackage)\n                != AppOpsManager.MODE_ALLOWED) {\n            return;\n        }\n\n        if (isAndroidNPlus(callingPackage)\n                && wouldToggleZenMode(getNewRingerMode(streamTypeAlias, index, flags))\n                && !mNm.isNotificationPolicyAccessGrantedForPackage(callingPackage)) {\n            throw new SecurityException(\"Not allowed to change Do Not Disturb state\");\n        }\n\n        if (!volumeAdjustmentAllowedByDnd(streamTypeAlias, flags)) {\n            return;\n        }\n\n        synchronized (mSafeMediaVolumeStateLock) {\n            // reset any pending volume command\n            mPendingVolumeCommand = null;\n\n            oldIndex = streamState.getIndex(device);\n\n            index = rescaleIndex(index * 10, streamType, streamTypeAlias);\n\n            if (streamTypeAlias == AudioSystem.STREAM_MUSIC\n                    && AudioSystem.DEVICE_OUT_ALL_A2DP_SET.contains(device)\n                    && (flags & AudioManager.FLAG_BLUETOOTH_ABS_VOLUME) == 0) {\n                if (DEBUG_VOL) {\n                    Log.d(TAG, \"setStreamVolume postSetAvrcpAbsoluteVolumeIndex index=\" + index\n                            + \"stream=\" + streamType);\n                }\n                mDeviceBroker.postSetAvrcpAbsoluteVolumeIndex(index / 10);\n            }\n\n            if (device == AudioSystem.DEVICE_OUT_HEARING_AID\n                    && streamType == getHearingAidStreamType()) {\n                Log.i(TAG, \"setStreamVolume postSetHearingAidVolumeIndex index=\" + index\n                        + \" stream=\" + streamType);\n                mDeviceBroker.postSetHearingAidVolumeIndex(index, streamType);\n            }\n\n            if (streamTypeAlias == AudioSystem.STREAM_MUSIC) {\n                setSystemAudioVolume(oldIndex, index, getStreamMaxVolume(streamType), flags);\n            }\n\n            flags &= ~AudioManager.FLAG_FIXED_VOLUME;\n            if (streamTypeAlias == AudioSystem.STREAM_MUSIC && isFixedVolumeDevice(device)) {\n                flags |= AudioManager.FLAG_FIXED_VOLUME;\n\n                // volume is either 0 or max allowed for fixed volume devices\n                if (index != 0) {\n                    if (mSafeMediaVolumeState == SAFE_MEDIA_VOLUME_ACTIVE &&\n                            mSafeMediaVolumeDevices.contains(device)) {\n                        index = safeMediaVolumeIndex(device);\n                    } else {\n                        index = streamState.getMaxIndex();\n                    }\n                }\n            }\n\n            if (!checkSafeMediaVolume(streamTypeAlias, index, device)) {\n                mVolumeController.postDisplaySafeVolumeWarning(flags);\n                mPendingVolumeCommand = new StreamVolumeCommand(\n                                                    streamType, index, flags, device);\n            } else {\n                onSetStreamVolume(streamType, index, flags, device, caller, hasModifyAudioSettings);\n                index = mStreamStates[streamType].getIndex(device);\n            }\n        }\n        synchronized (mHdmiClientLock) {\n            if (streamTypeAlias == AudioSystem.STREAM_MUSIC\n                    && (oldIndex != index)) {\n                maybeSendSystemAudioStatusCommand(false);\n            }\n        }\n        sendVolumeUpdate(streamType, oldIndex, index, flags, device);\n    }",
  "func_after": "private void setStreamVolume(int streamType, int index, int flags, String callingPackage,\n            String caller, int uid, boolean hasModifyAudioSettings) {\n        if (DEBUG_VOL) {\n            Log.d(TAG, \"setStreamVolume(stream=\" + streamType+\", index=\" + index\n                    + \", calling=\" + callingPackage + \")\");\n        }\n        if (mUseFixedVolume) {\n            return;\n        }\n\n        ensureValidStreamType(streamType);\n        int streamTypeAlias = mStreamVolumeAlias[streamType];\n        VolumeStreamState streamState = mStreamStates[streamTypeAlias];\n\n        final int device = getDeviceForStream(streamType);\n        int oldIndex;\n\n        // skip a2dp absolute volume control request when the device\n        // is not an a2dp device\n        if (!AudioSystem.DEVICE_OUT_ALL_A2DP_SET.contains(device)\n                && (flags & AudioManager.FLAG_BLUETOOTH_ABS_VOLUME) != 0) {\n            return;\n        }\n        // If we are being called by the system (e.g. hardware keys) check for current user\n        // so we handle user restrictions correctly.\n        if (uid == android.os.Process.SYSTEM_UID) {\n            uid = UserHandle.getUid(getCurrentUserId(), UserHandle.getAppId(uid));\n        }\n        if (!checkNoteAppOp(STREAM_VOLUME_OPS[streamTypeAlias], uid, callingPackage)) {\n            return;\n        }\n\n        if (isAndroidNPlus(callingPackage)\n                && wouldToggleZenMode(getNewRingerMode(streamTypeAlias, index, flags))\n                && !mNm.isNotificationPolicyAccessGrantedForPackage(callingPackage)) {\n            throw new SecurityException(\"Not allowed to change Do Not Disturb state\");\n        }\n\n        if (!volumeAdjustmentAllowedByDnd(streamTypeAlias, flags)) {\n            return;\n        }\n\n        synchronized (mSafeMediaVolumeStateLock) {\n            // reset any pending volume command\n            mPendingVolumeCommand = null;\n\n            oldIndex = streamState.getIndex(device);\n\n            index = rescaleIndex(index * 10, streamType, streamTypeAlias);\n\n            if (streamTypeAlias == AudioSystem.STREAM_MUSIC\n                    && AudioSystem.DEVICE_OUT_ALL_A2DP_SET.contains(device)\n                    && (flags & AudioManager.FLAG_BLUETOOTH_ABS_VOLUME) == 0) {\n                if (DEBUG_VOL) {\n                    Log.d(TAG, \"setStreamVolume postSetAvrcpAbsoluteVolumeIndex index=\" + index\n                            + \"stream=\" + streamType);\n                }\n                mDeviceBroker.postSetAvrcpAbsoluteVolumeIndex(index / 10);\n            }\n\n            if (device == AudioSystem.DEVICE_OUT_HEARING_AID\n                    && streamType == getHearingAidStreamType()) {\n                Log.i(TAG, \"setStreamVolume postSetHearingAidVolumeIndex index=\" + index\n                        + \" stream=\" + streamType);\n                mDeviceBroker.postSetHearingAidVolumeIndex(index, streamType);\n            }\n\n            if (streamTypeAlias == AudioSystem.STREAM_MUSIC) {\n                setSystemAudioVolume(oldIndex, index, getStreamMaxVolume(streamType), flags);\n            }\n\n            flags &= ~AudioManager.FLAG_FIXED_VOLUME;\n            if (streamTypeAlias == AudioSystem.STREAM_MUSIC && isFixedVolumeDevice(device)) {\n                flags |= AudioManager.FLAG_FIXED_VOLUME;\n\n                // volume is either 0 or max allowed for fixed volume devices\n                if (index != 0) {\n                    if (mSafeMediaVolumeState == SAFE_MEDIA_VOLUME_ACTIVE &&\n                            mSafeMediaVolumeDevices.contains(device)) {\n                        index = safeMediaVolumeIndex(device);\n                    } else {\n                        index = streamState.getMaxIndex();\n                    }\n                }\n            }\n\n            if (!checkSafeMediaVolume(streamTypeAlias, index, device)) {\n                mVolumeController.postDisplaySafeVolumeWarning(flags);\n                mPendingVolumeCommand = new StreamVolumeCommand(\n                                                    streamType, index, flags, device);\n            } else {\n                onSetStreamVolume(streamType, index, flags, device, caller, hasModifyAudioSettings);\n                index = mStreamStates[streamType].getIndex(device);\n            }\n        }\n        synchronized (mHdmiClientLock) {\n            if (streamTypeAlias == AudioSystem.STREAM_MUSIC\n                    && (oldIndex != index)) {\n                maybeSendSystemAudioStatusCommand(false);\n            }\n        }\n        sendVolumeUpdate(streamType, oldIndex, index, flags, device);\n    }",
  "diff_func": "--- func_before\n+++ func_after\n private void setStreamVolume(int streamType, int index, int flags, String callingPackage,\n             String caller, int uid, boolean hasModifyAudioSettings) {\n         if (DEBUG_VOL) {\n             Log.d(TAG, \"setStreamVolume(stream=\" + streamType+\", index=\" + index\n                     + \", calling=\" + callingPackage + \")\");\n         }\n         if (mUseFixedVolume) {\n             return;\n         }\n \n         ensureValidStreamType(streamType);\n         int streamTypeAlias = mStreamVolumeAlias[streamType];\n         VolumeStreamState streamState = mStreamStates[streamTypeAlias];\n \n         final int device = getDeviceForStream(streamType);\n         int oldIndex;\n \n         // skip a2dp absolute volume control request when the device\n         // is not an a2dp device\n         if (!AudioSystem.DEVICE_OUT_ALL_A2DP_SET.contains(device)\n                 && (flags & AudioManager.FLAG_BLUETOOTH_ABS_VOLUME) != 0) {\n             return;\n         }\n         // If we are being called by the system (e.g. hardware keys) check for current user\n         // so we handle user restrictions correctly.\n         if (uid == android.os.Process.SYSTEM_UID) {\n             uid = UserHandle.getUid(getCurrentUserId(), UserHandle.getAppId(uid));\n         }\n-        if (mAppOps.noteOp(STREAM_VOLUME_OPS[streamTypeAlias], uid, callingPackage)\n+        if (!checkNoteAppOp(STREAM_VOLUME_OPS[streamTypeAlias], uid, callingPackage)) {\n-                != AppOpsManager.MODE_ALLOWED) {\n             return;\n         }\n \n         if (isAndroidNPlus(callingPackage)\n                 && wouldToggleZenMode(getNewRingerMode(streamTypeAlias, index, flags))\n                 && !mNm.isNotificationPolicyAccessGrantedForPackage(callingPackage)) {\n             throw new SecurityException(\"Not allowed to change Do Not Disturb state\");\n         }\n \n         if (!volumeAdjustmentAllowedByDnd(streamTypeAlias, flags)) {\n             return;\n         }\n \n         synchronized (mSafeMediaVol",
  "diff_source": "custom"
}