{
  "id": 2188,
  "language": "Java",
  "commit_url": "https://github.com/apache/kylin/commit/277202a04e4cad4a1473301fb0299bab2270bc91",
  "commit_sha": "277202a04e4cad4a1473301fb0299bab2270bc91",
  "commit_msg": "KYLIN-4478 Resolve Issue: Use secure AES/CFB/PKCS5Padding instead of insecure AES/ECB/PKCS5Padding\n\nSigned-off-by: shaofengshi <shaofengshi@apache.org>\n(cherry picked from commit dadc1dd6716f7075bfcd6171d3358333475b4ecd)",
  "pr_url": "https://github.com/apache/kylin/pull/2018",
  "pr_info": "Bumps [jackson-databind](https://github.com/FasterXML/jackson) from 2.10.0 to 2.12.7.1.\n<details>\n<summary>Commits</summary>\n<ul>\n<li>See full diff in <a href=\"https://github.com/FasterXML/jackson/commits\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=com.fasterxml.jackson.core:jackson-databind&package-manager=maven&previous-version=2.10.0&new-version=2.12.7.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/apache/kylin/network/alerts).\n\n</details>",
  "file_name": "core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java",
  "func_name": "encrypt",
  "func_before": "public static String encrypt(String strToEncrypt) {\n        if (strToEncrypt == null) {\n            return null;\n        }\n        try {\n            Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n            final SecretKeySpec secretKey = new SecretKeySpec(key, \"AES\");\n            cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n            final String encryptedString = Base64.encodeBase64String(cipher.doFinal(strToEncrypt.getBytes(\n                StandardCharsets.UTF_8)));\n            return encryptedString;\n        } catch (Exception e) {\n            throw new RuntimeException(e.getMessage(), e);\n        }\n    }",
  "func_after": "public static String encrypt(String strToEncrypt) {\n        if (strToEncrypt == null) {\n            return null;\n        }\n        try {\n            Cipher cipher = Cipher.getInstance(\"AES/CFB/PKCS5Padding\");\n            final SecretKeySpec secretKey = new SecretKeySpec(key, \"AES\");\n            cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n            final String encryptedString = Base64.encodeBase64String(cipher.doFinal(strToEncrypt.getBytes(\n                StandardCharsets.UTF_8)));\n            return encryptedString;\n        } catch (Exception e) {\n            throw new RuntimeException(e.getMessage(), e);\n        }\n    }",
  "diff_func": "--- func_before\n+++ func_after\n public static String encrypt(String strToEncrypt) {\n         if (strToEncrypt == null) {\n             return null;\n         }\n         try {\n-            Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n+            Cipher cipher = Cipher.getInstance(\"AES/CFB/PKCS5Padding\");\n             final SecretKeySpec secretKey = new SecretKeySpec(key, \"AES\");\n             cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n             final String encryptedString = Base64.encodeBase64String(cipher.doFinal(strToEncrypt.getBytes(\n                 StandardCharsets.UTF_8)));\n             return encryptedString;\n         } catch (Exception e) {\n             throw new RuntimeException(e.getMessage(), e);\n         }\n     }",
  "diff_source": "custom"
}