{
  "id": 6086,
  "language": "C/C++",
  "commit_url": "https://github.com/Moddable-OpenSource/moddable/commit/ebb1acf2294dff88ec4fd70b2791e2df1ea37ef2",
  "commit_sha": "ebb1acf2294dff88ec4fd70b2791e2df1ea37ef2",
  "commit_msg": "XS: #750",
  "pr_url": null,
  "pr_info": "no more info",
  "file_name": "xs/sources/xsProxy.c",
  "func_name": "fxProxyHasProperty",
  "func_before": "txBoolean fxProxyHasProperty(txMachine* the, txSlot* instance, txID id, txIndex index)\n{\n\ttxBoolean result;\n\ttxSlot* proxy = instance->next;\n\ttxSlot* function = fxCheckProxyFunction(the, proxy, _has);\n\tif (function) {\n\t\ttxSlot* target;\n\t\tmxPushReference(proxy->value.proxy.target);\n\t\ttarget = the->stack;\n\t\t/* THIS */\n\t\tmxPushReference(proxy->value.proxy.handler);\n\t\t/* FUNCTION */\n\t\tmxPushSlot(function);\n\t\tmxCall();\n\t\t/* ARGUMENTS */\n\t\tmxPushReference(proxy->value.proxy.target);\n\t\tmxPushUndefined();\n\t\tfxKeyAt(the, id, index, the->stack);\n\t\tmxRunCount(2);\n\t\tresult = fxToBoolean(the, the->stack);\n\t\tmxPop();\n\t\tif (!result) {\n\t\t\tmxPushUndefined();\n\t\t\tif (mxBehaviorGetOwnProperty(the, target->value.reference, id, index, the->stack)) {\n\t\t\t\tif (the->stack->flag & XS_DONT_DELETE_FLAG)\n\t\t\t\t\tmxTypeError(\"(proxy).has: false for non-configurable property\");\n\t\t\t\t if (!mxBehaviorIsExtensible(the, target->value.reference)) \n\t\t\t\t\tmxTypeError(\"(proxy).has: false for property of not extensible object\");\n\t\t\t}\n\t\t\tmxPop();\n\t\t}\n\t\tmxPop();\n\t}\n\telse\n\t\tresult = mxBehaviorHasProperty(the, proxy->value.proxy.target, id, index);\n\tmxPop();\n\treturn result;\n}",
  "func_after": "txBoolean fxProxyHasProperty(txMachine* the, txSlot* instance, txID id, txIndex index)\n{\n\ttxBoolean result;\n\tmxProxyDeclarations(_has);\n\tif (function) {\n\t\t/* THIS */\n\t\tmxPushSlot(handler);\n\t\t/* FUNCTION */\n\t\tmxPushSlot(function);\n\t\tmxCall();\n\t\t/* ARGUMENTS */\n\t\tmxPushSlot(target);\n\t\tmxPushUndefined();\n\t\tfxKeyAt(the, id, index, the->stack);\n\t\tmxRunCount(2);\n\t\tresult = fxToBoolean(the, the->stack);\n\t\tmxPop();\n\t\tif (!result) {\n\t\t\tmxPushUndefined();\n\t\t\tif (mxBehaviorGetOwnProperty(the, target->value.reference, id, index, the->stack)) {\n\t\t\t\tif (the->stack->flag & XS_DONT_DELETE_FLAG)\n\t\t\t\t\tmxTypeError(\"(proxy).has: false for non-configurable property\");\n\t\t\t\t if (!mxBehaviorIsExtensible(the, target->value.reference)) \n\t\t\t\t\tmxTypeError(\"(proxy).has: false for property of not extensible object\");\n\t\t\t}\n\t\t\tmxPop();\n\t\t}\n\t}\n\telse\n\t\tresult = mxBehaviorHasProperty(the, target->value.reference, id, index);\n\tmxProxyPop();\n\treturn result;\n}",
  "diff_func": "--- func_before\n+++ func_after\n txBoolean fxProxyHasProperty(txMachine* the, txSlot* instance, txID id, txIndex index)\n {\n \ttxBoolean result;\n+\tmxProxyDeclarations(_has);\n-\ttxSlot* proxy = instance->next;\n-\ttxSlot* function = fxCheckProxyFunction(the, proxy, _has);\n \tif (function) {\n-\t\ttxSlot* target;\n-\t\tmxPushReference(proxy->value.proxy.target);\n-\t\ttarget = the->stack;\n \t\t/* THIS */\n-\t\tmxPushReference(proxy->value.proxy.handler);\n+\t\tmxPushSlot(handler);\n \t\t/* FUNCTION */\n \t\tmxPushSlot(function);\n \t\tmxCall();\n \t\t/* ARGUMENTS */\n-\t\tmxPushReference(proxy->value.proxy.target);\n+\t\tmxPushSlot(target);\n \t\tmxPushUndefined();\n \t\tfxKeyAt(the, id, index, the->stack);\n \t\tmxRunCount(2);\n \t\tresult = fxToBoolean(the, the->stack);\n \t\tmxPop();\n \t\tif (!result) {\n \t\t\tmxPushUndefined();\n \t\t\tif (mxBehaviorGetOwnProperty(the, target->value.reference, id, index, the->stack)) {\n \t\t\t\tif (the->stack->flag & XS_DONT_DELETE_FLAG)\n \t\t\t\t\tmxTypeError(\"(proxy).has: false for non-configurable property\");\n \t\t\t\t if (!mxBehaviorIsExtensible(the, target->value.reference)) \n \t\t\t\t\tmxTypeError(\"(proxy).has: false for property of not extensible object\");\n \t\t\t}\n \t\t\tmxPop();\n \t\t}\n-\t\tmxPop();\n \t}\n \telse\n-\t\tresult = mxBehaviorHasProperty(the, proxy->value.proxy.target, id, index);\n+\t\tresult = mxBehaviorHasProperty(the, target->value.reference, id, index);\n-\tmxPop();\n+\tmxProxyPop();\n \treturn result;\n }",
  "diff_source": "custom"
}