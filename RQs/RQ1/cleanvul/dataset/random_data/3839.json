{
  "id": 3839,
  "language": "C#",
  "commit_url": "https://github.com/blogifierdotnet/Blogifier/commit/3e2ae11f6be8aab82128f223c2916fab5a408be5",
  "commit_sha": "3e2ae11f6be8aab82128f223c2916fab5a408be5",
  "commit_msg": "Tightening security in APIs",
  "pr_url": null,
  "pr_info": "no more info",
  "file_name": "src/Core/Api/AssetsController.cs",
  "func_name": "Get",
  "func_before": "[HttpGet]\n        public async Task<AssetsModel> Get(int page = 1, string filter = \"\", string search = \"\")\n        {\n            var pager = new Pager(page);\n            IEnumerable<AssetItem> items;\n\n            if (string.IsNullOrEmpty(search))\n            {\n                if (filter == \"filterImages\")\n                {\n                    items = await _store.Find(a => a.AssetType == AssetType.Image, pager);\n                }\n                else if (filter == \"filterAttachments\")\n                {\n                    items = await _store.Find(a => a.AssetType == AssetType.Attachment, pager);\n                }\n                else\n                {\n                    items = await _store.Find(null, pager);\n                }\n            }\n            else\n            {\n                items = await _store.Find(a => a.Title.Contains(search), pager);\n            }\n\n            if (page < 1 || page > pager.LastPage)\n                return null;\n\n            return new AssetsModel\n            {\n                Assets = items,\n                Pager = pager\n            };\n        }",
  "func_after": "[HttpGet]\n        public async Task<AssetsModel> Get(int page = 1, string filter = \"\", string search = \"\")\n        {\n            var pager = new Pager(page);\n            IEnumerable<AssetItem> items;\n\n            if (string.IsNullOrEmpty(search))\n            {\n                if (filter == \"filterImages\")\n                {\n                    items = await _store.Find(a => a.AssetType == AssetType.Image, pager, \"\", !User.Identity.IsAuthenticated);\n                }\n                else if (filter == \"filterAttachments\")\n                {\n                    items = await _store.Find(a => a.AssetType == AssetType.Attachment, pager, \"\", !User.Identity.IsAuthenticated);\n                }\n                else\n                {\n                    items = await _store.Find(null, pager, \"\", !User.Identity.IsAuthenticated);\n                }\n            }\n            else\n            {\n                items = await _store.Find(a => a.Title.Contains(search), pager, \"\", !User.Identity.IsAuthenticated);\n            }\n\n            if (page < 1 || page > pager.LastPage)\n                return null;\n\n            return new AssetsModel\n            {\n                Assets = items,\n                Pager = pager\n            };\n        }",
  "diff_func": "--- func_before\n+++ func_after\n [HttpGet]\n         public async Task<AssetsModel> Get(int page = 1, string filter = \"\", string search = \"\")\n         {\n             var pager = new Pager(page);\n             IEnumerable<AssetItem> items;\n \n             if (string.IsNullOrEmpty(search))\n             {\n                 if (filter == \"filterImages\")\n                 {\n-                    items = await _store.Find(a => a.AssetType == AssetType.Image, pager);\n+                    items = await _store.Find(a => a.AssetType == AssetType.Image, pager, \"\", !User.Identity.IsAuthenticated);\n                 }\n                 else if (filter == \"filterAttachments\")\n                 {\n-                    items = await _store.Find(a => a.AssetType == AssetType.Attachment, pager);\n+                    items = await _store.Find(a => a.AssetType == AssetType.Attachment, pager, \"\", !User.Identity.IsAuthenticated);\n                 }\n                 else\n                 {\n-                    items = await _store.Find(null, pager);\n+                    items = await _store.Find(null, pager, \"\", !User.Identity.IsAuthenticated);\n                 }\n             }\n             else\n             {\n-                items = await _store.Find(a => a.Title.Contains(search), pager);\n+                items = await _store.Find(a => a.Title.Contains(search), pager, \"\", !User.Identity.IsAuthenticated);\n             }\n \n             if (page < 1 || page > pager.LastPage)\n                 return null;\n \n             return new AssetsModel\n             {\n                 Assets = items,\n                 Pager = pager\n             };\n         }",
  "diff_source": "custom"
}