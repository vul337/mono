{
  "id": 4126,
  "language": "C/C++",
  "commit_url": "https://github.com/SELinuxProject/selinux/commit/340f0eb7f3673e8aacaf0a96cbfcd4d12a405521",
  "commit_sha": "340f0eb7f3673e8aacaf0a96cbfcd4d12a405521",
  "commit_msg": "libsepol/cil: Check for statements not allowed in optional blocks\n\nWhile there are some checks for invalid statements in an optional\nblock when resolving the AST, there are no checks when building the\nAST.\n\nOSS-Fuzz found the following policy which caused a null dereference\nin cil_tree_get_next_path().\n  (blockinherit b3)\n  (sid SID)\n  (sidorder(SID))\n  (optional o\n    (ibpkeycon :(1 0)s)\n    (block b3\n      (filecon\"\"block())\n      (filecon\"\"block())))\n\nThe problem is that the blockinherit copies block b3 before\nthe optional block is disabled. When the optional is disabled,\nblock b3 is deleted along with everything else in the optional.\nLater, when filecon statements with the same path are found an\nerror message is produced and in trying to find out where the block\nwas copied from, the reference to the deleted block is used. The\nerror handling code assumes (rightly) that if something was copied\nfrom a block then that block should still exist.\n\nIt is clear that in-statements, blocks, and macros cannot be in an\noptional, because that allows nodes to be copied from the optional\nblock to somewhere outside even though the optional could be disabled\nlater. When optionals are disabled the AST is reset and the\nresolution is restarted at the point of resolving macro calls, so\nanything resolved before macro calls will never be re-resolved.\nThis includes tunableifs, in-statements, blockinherits,\nblockabstracts, and macro definitions. Tunable declarations also\ncannot be in an optional block because they are needed to resolve\ntunableifs. It should be fine to allow blockinherit statements in\nan optional, because that is copying nodes from outside the optional\nto the optional and if the optional is later disabled, everything\nwill be deleted anyway.\n\nCheck and quit with an error if a tunable declaration, in-statement,\nblock, blockabstract, or macro definition is found within an\noptional when either building or resolving the AST.\n\nSigned-off-by: James Carter <jwcart2@gmail.com>",
  "pr_url": null,
  "pr_info": "no more info",
  "file_name": "libsepol/cil/src/cil_build_ast.c",
  "func_name": "__attribute__",
  "func_before": "int __cil_build_ast_first_child_helper(__attribute__((unused)) struct cil_tree_node *parse_current, void *extra_args)\n{\n\tstruct cil_args_build *args = extra_args;\n\tstruct cil_tree_node *ast = args->ast;\n\n\tif (ast->flavor == CIL_TUNABLEIF) {\n\t\targs->tunif = ast;\n\t}\n\n\tif (ast->flavor == CIL_IN) {\n\t\targs->in = ast;\n\t}\n\n\tif (ast->flavor == CIL_MACRO) {\n\t\targs->macro = ast;\n\t}\n\n\tif (ast->flavor == CIL_BOOLEANIF) {\n\t\targs->boolif = ast;\n\t}\n\n\treturn SEPOL_OK;\n}",
  "func_after": "int __cil_build_ast_first_child_helper(__attribute__((unused)) struct cil_tree_node *parse_current, void *extra_args)\n{\n\tstruct cil_args_build *args = extra_args;\n\tstruct cil_tree_node *ast = args->ast;\n\n\tif (ast->flavor == CIL_TUNABLEIF) {\n\t\targs->tunif = ast;\n\t}\n\n\tif (ast->flavor == CIL_IN) {\n\t\targs->in = ast;\n\t}\n\n\tif (ast->flavor == CIL_MACRO) {\n\t\targs->macro = ast;\n\t}\n\n\tif (ast->flavor == CIL_OPTIONAL) {\n\t\targs->optional = ast;\n\t}\n\n\tif (ast->flavor == CIL_BOOLEANIF) {\n\t\targs->boolif = ast;\n\t}\n\n\treturn SEPOL_OK;\n}",
  "diff_func": "--- func_before\n+++ func_after\n int __cil_build_ast_first_child_helper(__attribute__((unused)) struct cil_tree_node *parse_current, void *extra_args)\n {\n \tstruct cil_args_build *args = extra_args;\n \tstruct cil_tree_node *ast = args->ast;\n \n \tif (ast->flavor == CIL_TUNABLEIF) {\n \t\targs->tunif = ast;\n \t}\n \n \tif (ast->flavor == CIL_IN) {\n \t\targs->in = ast;\n \t}\n \n \tif (ast->flavor == CIL_MACRO) {\n \t\targs->macro = ast;\n \t}\n \n+\tif (ast->flavor == CIL_OPTIONAL) {\n+\t\targs->optional = ast;\n+\t}\n+\n \tif (ast->flavor == CIL_BOOLEANIF) {\n \t\targs->boolif = ast;\n \t}\n \n \treturn SEPOL_OK;\n }",
  "diff_source": "custom"
}