{
  "id": 7724,
  "language": "JavaScript",
  "commit_url": "https://github.com/sandstorm-io/sandstorm/commit/164997fb958effbc90c5328c166706280a84aaa1",
  "commit_sha": "164997fb958effbc90c5328c166706280a84aaa1",
  "commit_msg": "Implement IP blacklist for user-initiated requests.",
  "pr_url": null,
  "pr_info": "no more info",
  "file_name": "shell/server/drivers/external-ui-view.js",
  "func_name": "constructor",
  "func_before": "constructor(url, options, db, saveTemplate) {\n    super(db, saveTemplate);\n\n    if (!saveTemplate) {\n      // enable backwards-compatibilty tweaks.\n      this.fromHackSession = true;\n    }\n\n    const parsedUrl = Url.parse(url);\n    this.host = parsedUrl.hostname;\n    if (this.fromHackSession) {\n      // HackSessionContext.getExternalUiView() apparently ignored any path on the URL. Whoops.\n    } else {\n      if (parsedUrl.path === \"/\") {\n        // The URL parser says path = \"/\" for both \"http://foo\" and \"http://foo/\". We want to be\n        // strict, though.\n        this.path = url.endsWith(\"/\") ? \"/\" : \"\";\n      } else {\n        this.path = parsedUrl.path;\n      }\n    }\n\n    this.port = parsedUrl.port;\n    this.protocol = parsedUrl.protocol;\n    this.options = options || {};\n  }",
  "func_after": "constructor(url, options, db, saveTemplate) {\n    super(db, saveTemplate);\n\n    // TODO(soon): Support HTTP proxy.\n    const safe = ssrfSafeLookup(db, url);\n\n    if (!options) options = {};\n    if (!options.headers) options.headers = {};\n    options.headers.host = safe.host;\n    options.servername = safe.host.split(\":\")[0];\n\n    if (!saveTemplate) {\n      // enable backwards-compatibilty tweaks.\n      this.fromHackSession = true;\n    }\n\n    const parsedUrl = Url.parse(safe.url);\n    this.host = parsedUrl.hostname;\n    if (this.fromHackSession) {\n      // HackSessionContext.getExternalUiView() apparently ignored any path on the URL. Whoops.\n    } else {\n      if (parsedUrl.path === \"/\") {\n        // The URL parser says path = \"/\" for both \"http://foo\" and \"http://foo/\". We want to be\n        // strict, though.\n        this.path = url.endsWith(\"/\") ? \"/\" : \"\";\n      } else {\n        this.path = parsedUrl.path;\n      }\n    }\n\n    this.port = parsedUrl.port;\n    this.protocol = parsedUrl.protocol;\n    this.options = options;\n  }",
  "diff_func": "--- func_before\n+++ func_after\n constructor(url, options, db, saveTemplate) {\n     super(db, saveTemplate);\n+\n+    // TODO(soon): Support HTTP proxy.\n+    const safe = ssrfSafeLookup(db, url);\n+\n+    if (!options) options = {};\n+    if (!options.headers) options.headers = {};\n+    options.headers.host = safe.host;\n+    options.servername = safe.host.split(\":\")[0];\n \n     if (!saveTemplate) {\n       // enable backwards-compatibilty tweaks.\n       this.fromHackSession = true;\n     }\n \n-    const parsedUrl = Url.parse(url);\n+    const parsedUrl = Url.parse(safe.url);\n     this.host = parsedUrl.hostname;\n     if (this.fromHackSession) {\n       // HackSessionContext.getExternalUiView() apparently ignored any path on the URL. Whoops.\n     } else {\n       if (parsedUrl.path === \"/\") {\n         // The URL parser says path = \"/\" for both \"http://foo\" and \"http://foo/\". We want to be\n         // strict, though.\n         this.path = url.endsWith(\"/\") ? \"/\" : \"\";\n       } else {\n         this.path = parsedUrl.path;\n       }\n     }\n \n     this.port = parsedUrl.port;\n     this.protocol = parsedUrl.protocol;\n-    this.options = options || {};\n+    this.options = options;\n   }",
  "diff_source": "custom"
}