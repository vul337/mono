{
  "id": 3049,
  "language": "Java",
  "commit_url": "https://github.com/apache/hop/commit/562dc41d7efe4bd7bb43ac0910a8e1e63b2951c1",
  "commit_sha": "562dc41d7efe4bd7bb43ac0910a8e1e63b2951c1",
  "commit_msg": "Fix #1859 : Sonar Vulnerability issues",
  "pr_url": "https://github.com/apache/hop/pull/1896",
  "pr_info": "HOP-4308 : Cleanup XML of transform Get Sub Folders\r\nHOP-4373 : Cleanup XML of action Check DB Connections\r\nHOP-4379 : Cleanup XML of action Create Folder\r\n\r\n#1859 : Sonar Vulnerability issues\r\n#1860 : Transform Get Subfolders is broken\r\n#1862 : Cleanup XML of Azure Event Hubs Listener task\r\n#1863 : Cleanup XML of Azure Event Hubs Write\r\n#1867 : Cleanup XML of transform Execute Process\r\n#1869 : Cleanup XML of transform Get table names\r\n#1894 : Cleanup XML of transform Replace String\r\n#1895 : Cleanup XML of transform Reservoir Sampling\r\n",
  "file_name": "plugins/misc/import/src/main/java/org/apache/hop/imports/kettle/KettleImport.java",
  "func_name": "HopException",
  "func_before": "@Override\n  public void importFiles() throws HopException {\n\n    try {\n      TransformerFactory transformerFactory = TransformerFactory.newInstance();\n      Transformer transformer = transformerFactory.newTransformer();\n      transformer.setOutputProperty(OutputKeys.INDENT, \"yes\");\n\n      Iterator<String> filesIterator = getMigratedFilesMap().keySet().iterator();\n      while (filesIterator.hasNext() && (monitor == null || !monitor.isCanceled())) {\n\n        String filename = filesIterator.next();\n        DOMSource domSource = getMigratedFilesMap().get(filename);\n\n        FileObject sourceFile = HopVfs.getFileObject(filename);\n        if (sourceFile.isFolder()) {\n          continue;\n        }\n\n        String targetFilename =\n            filename.replaceAll(inputFolder.getName().getURI(), outputFolderName);\n\n        if (domSource != null) {\n          // We need to rename the target file extensions for these pipelines and workflows...\n          targetFilename =\n              targetFilename.replaceAll(\"\\\\.ktr$\", \".hpl\").replaceAll(\"\\\\.kjb$\", \".hwf\");\n        }\n\n        if (monitor != null) {\n          monitor.subTask(\"Saving file \" + targetFilename);\n        }\n\n        FileObject targetFile = HopVfs.getFileObject(targetFilename);\n        if (isSkippingExistingTargetFiles() && targetFile.exists()) {\n          continue;\n        }\n\n        // Make sure the parent folder(s) exist...\n        //\n        if (!targetFile.getParent().exists()) {\n          targetFile.getParent().createFolder();\n        }\n\n        if (domSource == null) {\n          // copy any non-Hop files as is\n          //\n          try {\n            NameFileFilter filter =\n                new NameFileFilter(Collections.singletonList(sourceFile.getName().getBaseName()));\n            targetFile.getParent().copyFrom(sourceFile.getParent(), new FileFilterSelector(filter));\n          } catch (IOException e) {\n            throw new HopException(\"Error copying file '\" + filename, e);\n          }\n        } else {\n          // Convert Kettle XML metadata to Hop (write the .hpl/.hwf)\n          //\n          ByteArrayOutputStream os = new ByteArrayOutputStream();\n\n          try (ByteArrayOutputStream outputStream = new ByteArrayOutputStream()) {\n            StreamResult streamResult = new StreamResult(outputStream);\n            try {\n              transformer.transform(domSource, streamResult);\n            } catch (TransformerException e) {\n              throw new HopException(\"Error importing file \" + filename, e);\n            } finally {\n              outputStream.flush();\n              outputStream.close();\n\n              // Now pretty print the XML...\n              //\n              String xml =\n                  XmlFormatter.format(\n                      new String(outputStream.toByteArray(), StandardCharsets.UTF_8));\n              try (OutputStream fileStream = HopVfs.getOutputStream(targetFilename, false)) {\n                fileStream.write(xml.getBytes(StandardCharsets.UTF_8));\n              }\n            }\n          }\n        }\n      }\n    } catch (Exception e) {\n      throw new HopException(\"Error importing Kettle files into Hop\", e);\n    }\n  }",
  "func_after": "@Override\n  public void importFiles() throws HopException {\n\n    try {\n      TransformerFactory transformerFactory = XmlHandler.createSecureTransformerFactory();\n      Transformer transformer = transformerFactory.newTransformer();\n      transformer.setOutputProperty(OutputKeys.INDENT, \"yes\");\n\n      Iterator<String> filesIterator = getMigratedFilesMap().keySet().iterator();\n      while (filesIterator.hasNext() && (monitor == null || !monitor.isCanceled())) {\n\n        String filename = filesIterator.next();\n        DOMSource domSource = getMigratedFilesMap().get(filename);\n\n        FileObject sourceFile = HopVfs.getFileObject(filename);\n        if (sourceFile.isFolder()) {\n          continue;\n        }\n\n        String targetFilename =\n            filename.replaceAll(inputFolder.getName().getURI(), outputFolderName);\n\n        if (domSource != null) {\n          // We need to rename the target file extensions for these pipelines and workflows...\n          targetFilename =\n              targetFilename.replaceAll(\"\\\\.ktr$\", \".hpl\").replaceAll(\"\\\\.kjb$\", \".hwf\");\n        }\n\n        if (monitor != null) {\n          monitor.subTask(\"Saving file \" + targetFilename);\n        }\n\n        FileObject targetFile = HopVfs.getFileObject(targetFilename);\n        if (isSkippingExistingTargetFiles() && targetFile.exists()) {\n          continue;\n        }\n\n        // Make sure the parent folder(s) exist...\n        //\n        if (!targetFile.getParent().exists()) {\n          targetFile.getParent().createFolder();\n        }\n\n        if (domSource == null) {\n          // copy any non-Hop files as is\n          //\n          try {\n            NameFileFilter filter =\n                new NameFileFilter(Collections.singletonList(sourceFile.getName().getBaseName()));\n            targetFile.getParent().copyFrom(sourceFile.getParent(), new FileFilterSelector(filter));\n          } catch (IOException e) {\n            throw new HopException(\"Error copying file '\" + filename, e);\n          }\n        } else {\n          // Convert Kettle XML metadata to Hop (write the .hpl/.hwf)\n          //\n          ByteArrayOutputStream os = new ByteArrayOutputStream();\n\n          try (ByteArrayOutputStream outputStream = new ByteArrayOutputStream()) {\n            StreamResult streamResult = new StreamResult(outputStream);\n            try {\n              transformer.transform(domSource, streamResult);\n            } catch (TransformerException e) {\n              throw new HopException(\"Error importing file \" + filename, e);\n            } finally {\n              outputStream.flush();\n              outputStream.close();\n\n              // Now pretty print the XML...\n              //\n              String xml =\n                  XmlFormatter.format(\n                      new String(outputStream.toByteArray(), StandardCharsets.UTF_8));\n              try (OutputStream fileStream = HopVfs.getOutputStream(targetFilename, false)) {\n                fileStream.write(xml.getBytes(StandardCharsets.UTF_8));\n              }\n            }\n          }\n        }\n      }\n    } catch (Exception e) {\n      throw new HopException(\"Error importing Kettle files into Hop\", e);\n    }\n  }",
  "diff_func": "--- func_before\n+++ func_after\n @Override\n   public void importFiles() throws HopException {\n \n     try {\n-      TransformerFactory transformerFactory = TransformerFactory.newInstance();\n+      TransformerFactory transformerFactory = XmlHandler.createSecureTransformerFactory();\n       Transformer transformer = transformerFactory.newTransformer();\n       transformer.setOutputProperty(OutputKeys.INDENT, \"yes\");\n \n       Iterator<String> filesIterator = getMigratedFilesMap().keySet().iterator();\n       while (filesIterator.hasNext() && (monitor == null || !monitor.isCanceled())) {\n \n         String filename = filesIterator.next();\n         DOMSource domSource = getMigratedFilesMap().get(filename);\n \n         FileObject sourceFile = HopVfs.getFileObject(filename);\n         if (sourceFile.isFolder()) {\n           continue;\n         }\n \n         String targetFilename =\n             filename.replaceAll(inputFolder.getName().getURI(), outputFolderName);\n \n         if (domSource != null) {\n           // We need to rename the target file extensions for these pipelines and workflows...\n           targetFilename =\n               targetFilename.replaceAll(\"\\\\.ktr$\", \".hpl\").replaceAll(\"\\\\.kjb$\", \".hwf\");\n         }\n \n         if (monitor != null) {\n           monitor.subTask(\"Saving file \" + targetFilename);\n         }\n \n         FileObject targetFile = HopVfs.getFileObject(targetFilename);\n         if (isSkippingExistingTargetFiles() && targetFile.exists()) {\n           continue;\n         }\n \n         // Make sure the parent folder(s) exist...\n         //\n         if (!targetFile.getParent().exists()) {\n           targetFile.getParent().createFolder();\n         }\n \n         if (domSource == null) {\n           // copy any non-Hop files as is\n           //\n           try {\n             NameFileFilter filter =\n                 new NameFileFilter(Collections.singletonList(sourceFile.getName().getBaseName()));\n             targetFile.getParent().copyFrom(sourceFile.getParent(), new ",
  "diff_source": "custom"
}