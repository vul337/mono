{
  "id": 3149,
  "language": "Java",
  "commit_url": "https://github.com/dogtagpki/pki/commit/b9db71b98480f6ba47e66dd6cde1d9dfec80eb66",
  "commit_sha": "b9db71b98480f6ba47e66dd6cde1d9dfec80eb66",
  "commit_msg": "Bug1990105- TPS Not properly enforcing Token Profile Separation\n\nThis patch addresses the issue that TPS agent operations on tokens, activities, and profiles are not limited by the types (profiles) permmtted to the agent (as described in the documentation). This is a regression from 8.x.\n\nThe affected operations are:\n - findProfiles\n - getProfiles\n - updateProfile\n - changeStatus (of a profile)\n - retrieveTokens\n - getToken\n - modifyToken\n - changeTokenStatus\n - retrieveActivities\n - getActivity\n\nNote that some operations that seem like should be affected are not\ndue to the fact that they are TPS admin operations and are shielded\nfrom entering the TPS service at the activity level.  For example,\ndeleting a token would be such a case.\n\nThe authorization enforcement added in this patch should affect both\naccess from the web UI as well as access from PKI CLI.\nReference: https://github.com/dogtagpki/pki/wiki/PKI-TPS-CLI\n\nAnother note: the VLV complicates the resulting page.  If the returned\nentries on the page are all restricted then nothing would be shown.  To\nadd a bit more clarity, an <restricted> entry is added to reflect such\neffect so that it would be less confusing to the role user.\nThe <restricted> entries are left with the epoch date.\nThis would affect both WEB UI and PKI CLI.\n\nAlso, a list minute addition to address an issue with 1911472 in\nCertService.java where the subject DN of the CA signing cert should\nbe used instead of the issuer.\n\nfixes https://bugzilla.redhat.com/show_bug.cgi?id=1990105",
  "pr_url": null,
  "pr_info": "no more info",
  "file_name": "base/tps/src/main/java/org/dogtagpki/server/tps/rest/TokenService.java",
  "func_name": "retrieveTokensWithVLV",
  "func_before": "protected void retrieveTokensWithVLV(\n            TokenDatabase database,\n            Integer start,\n            Integer size,\n            TokenCollection response) throws Exception {\n\n        // search with VLV sorted by date in reverse order\n        IDBVirtualList<TokenRecord> list = database.findRecords(\n                null, null, new String[] { \"-modifyTimestamp\", \"-createTimestamp\" }, size);\n\n        int total = list.getSize();\n\n        // return entries in the requested page\n        for (int i = start; i < start + size && i < total; i++) {\n            TokenRecord record = list.getElementAt(i);\n\n            if (record == null) {\n                logger.error(\"TokenService: Missing token record\");\n                throw new PKIException(\"Missing token record\");\n            }\n\n            response.addEntry(createTokenData(record));\n        }\n\n        response.setTotal(total);\n    }",
  "func_after": "protected void retrieveTokensWithVLV(\n            TokenDatabase database,\n            Integer start,\n            Integer size,\n            TokenCollection response) throws Exception {\n\n        String method = \"TokenService.retrieveTokensWithVLV: \";\n        // search with VLV sorted by date in reverse order\n        IDBVirtualList<TokenRecord> list = database.findRecords(\n                null, null, new String[] { \"-modifyTimestamp\", \"-createTimestamp\" }, size);\n\n        List<String> authorizedProfiles = getAuthorizedProfiles();\n\n        int total = list.getSize();\n        int retTotal = 0; //debugging only\n\n        // return entries in the requested page\n        if (authorizedProfiles != null) {\n            if (authorizedProfiles.contains(UserResource.ALL_PROFILES)) {\n                for (int i = start; i < start + size && i < total; i++) {\n                    TokenRecord record = list.getElementAt(i);\n\n                    response.addEntry(createTokenData(record));\n                    retTotal++;\n                }\n            } else { // not authorized for all profiles\n                for (int i = start; i < start + size && i < total; i++) {\n                    TokenRecord record = list.getElementAt(i);\n                    //logger.debug(method + \"record.ID=\"+ record.getId());\n\n                    String type = record.getType();\n                    //logger.debug(method + \"record.tokenType=\"+ type;\n                    if ((type == null) || type.isEmpty() || authorizedProfiles.contains(type)) {\n                        //logger.debug(method + \"token type allowed\");\n                        retTotal++;\n                        response.addEntry(createTokenData(record));\n                    } else {\n                        //logger.debug(method + \"token type restricted: \" + type +\n                        //        \"; adding 'restricted' record\");\n                        response.addEntry(createRestrictedTokenData());\n                    }\n                } //for\n            }\n        } else { //authorizedProfiles null; no permission\n            logger.debug(method + \"authorized profiles is null\");\n        }\n\n        logger.debug(method + \"retTotal = \" + retTotal);\n        response.setTotal(total);\n    }",
  "diff_func": "--- func_before\n+++ func_after\n protected void retrieveTokensWithVLV(\n             TokenDatabase database,\n             Integer start,\n             Integer size,\n             TokenCollection response) throws Exception {\n \n+        String method = \"TokenService.retrieveTokensWithVLV: \";\n         // search with VLV sorted by date in reverse order\n         IDBVirtualList<TokenRecord> list = database.findRecords(\n                 null, null, new String[] { \"-modifyTimestamp\", \"-createTimestamp\" }, size);\n \n+        List<String> authorizedProfiles = getAuthorizedProfiles();\n+\n         int total = list.getSize();\n+        int retTotal = 0; //debugging only\n \n         // return entries in the requested page\n+        if (authorizedProfiles != null) {\n+            if (authorizedProfiles.contains(UserResource.ALL_PROFILES)) {\n-        for (int i = start; i < start + size && i < total; i++) {\n+                for (int i = start; i < start + size && i < total; i++) {\n-            TokenRecord record = list.getElementAt(i);\n+                    TokenRecord record = list.getElementAt(i);\n \n-            if (record == null) {\n-                logger.error(\"TokenService: Missing token record\");\n-                throw new PKIException(\"Missing token record\");\n+                    response.addEntry(createTokenData(record));\n+                    retTotal++;\n+                }\n+            } else { // not authorized for all profiles\n+                for (int i = start; i < start + size && i < total; i++) {\n+                    TokenRecord record = list.getElementAt(i);\n+                    //logger.debug(method + \"record.ID=\"+ record.getId());\n+\n+                    String type = record.getType();\n+                    //logger.debug(method + \"record.tokenType=\"+ type;\n+                    if ((type == null) || type.isEmpty() || authorizedProfiles.contains(type)) {\n+                        //logger.debug(method + \"token type allowed\");\n+                        retTotal++;\n+               ",
  "diff_source": "custom"
}