{
  "id": 7945,
  "language": "JavaScript",
  "commit_url": "https://github.com/trollkarlen/swift-client/commit/18017d9091cf032445b1f74812ff241c8991bd37",
  "commit_sha": "18017d9091cf032445b1f74812ff241c8991bd37",
  "commit_msg": "replace deprecated request package\n\nreplace request with axios to solve\n(CVE-2023-28155)\nhttps://github.com/request/request/issues/3442\nsolves issue https://github.com/stefanodefaria/swift-client/issues/26\nupdate dev packages to fix other audit issues\n\nSigned-off-by: Robert Marklund <robbelibobban@gmail.com>",
  "pr_url": null,
  "pr_info": "no more info",
  "file_name": "SwiftContainer.js",
  "func_name": "delete",
  "func_before": "delete(name, when) {\n        if (when) {\n            const h = {};\n\n            if (when instanceof Date) {\n                h['X-Delete-At'] = +when / 1000;\n            } else if (typeof when === 'number' || when instanceof Number) {\n                h['X-Delete-After'] = when;\n            } else {\n                throw new Error('expected when to be a number of seconds or a date');\n            }\n\n            return this.authenticator.authenticate().then(auth => {\n                return requestp({\n                    method: 'POST',\n                    uri: `${auth.url + this.urlSuffix}/${name}`,\n                    headers: this.headers(null, h, auth.token)\n                });\n            });\n\n        } else {\n            return SwiftEntity.prototype.delete.call(this, name);\n        }\n    }",
  "func_after": "delete(name, when) {\n        if (when) {\n            const h = {};\n\n            if (when instanceof Date) {\n                h['X-Delete-At'] = +when / 1000;\n            } else if (typeof when === 'number' || when instanceof Number) {\n                h['X-Delete-After'] = when;\n            } else {\n                throw new Error('expected when to be a number of seconds or a date');\n            }\n\n            return this.authenticator.authenticate().then(auth => {\n                return axios({\n                    method: 'POST',\n                    url: `${auth.url + this.urlSuffix}/${name}`,\n                    headers: this.headers(null, h, auth.token)\n                });\n            });\n\n        } else {\n            return SwiftEntity.prototype.delete.call(this, name);\n        }\n    }",
  "diff_func": "--- func_before\n+++ func_after\n delete(name, when) {\n         if (when) {\n             const h = {};\n \n             if (when instanceof Date) {\n                 h['X-Delete-At'] = +when / 1000;\n             } else if (typeof when === 'number' || when instanceof Number) {\n                 h['X-Delete-After'] = when;\n             } else {\n                 throw new Error('expected when to be a number of seconds or a date');\n             }\n \n             return this.authenticator.authenticate().then(auth => {\n-                return requestp({\n+                return axios({\n                     method: 'POST',\n-                    uri: `${auth.url + this.urlSuffix}/${name}`,\n+                    url: `${auth.url + this.urlSuffix}/${name}`,\n                     headers: this.headers(null, h, auth.token)\n                 });\n             });\n \n         } else {\n             return SwiftEntity.prototype.delete.call(this, name);\n         }\n     }",
  "diff_source": "custom"
}