{
  "id": 3202,
  "language": "C/C++",
  "commit_url": "https://github.com/libuv/libuv/commit/f751b7ecc66c9d15a1f1318c1420336fe7b34bb9",
  "commit_sha": "f751b7ecc66c9d15a1f1318c1420336fe7b34bb9",
  "commit_msg": "win: fix unsavory rwlock fallback implementation\n\nBefore this patch an uv_mutex_t (backed by a critical section) could be\nreleased by a tread different from the thread that acquired it, which is\nnot allowed. This is fixed by using a semaphore instead.\n\nFixes: https://github.com/libuv/libuv/issues/515\nPR-URL: https://github.com/libuv/libuv/pull/516",
  "pr_url": null,
  "pr_info": "no more info",
  "file_name": "src/win/thread.c",
  "func_name": "uv__rwlock_fallback_rdlock",
  "func_before": "static void uv__rwlock_fallback_rdlock(uv_rwlock_t* rwlock) {\n  uv_mutex_lock(&rwlock->fallback_.read_mutex_);\n\n  if (++rwlock->fallback_.num_readers_ == 1)\n    uv_mutex_lock(&rwlock->fallback_.write_mutex_);\n\n  uv_mutex_unlock(&rwlock->fallback_.read_mutex_);\n}",
  "func_after": "static void uv__rwlock_fallback_rdlock(uv_rwlock_t* rwlock) {\n  /* Acquire the lock that protects the reader count. */\n  EnterCriticalSection(&rwlock->fallback_.read_lock_.cs);\n\n  /* Increase the reader count, and lock for write if this is the first\n   * reader.\n   */\n  if (++rwlock->fallback_.num_readers_ == 1) {\n    DWORD r = WaitForSingleObject(rwlock->fallback_.write_lock_.sem, INFINITE);\n    if (r != WAIT_OBJECT_0)\n      uv_fatal_error(GetLastError(), \"WaitForSingleObject\");\n  }\n\n  /* Release the lock that protects the reader count. */\n  LeaveCriticalSection(&rwlock->fallback_.read_lock_.cs);\n}",
  "diff_func": "--- func_before\n+++ func_after\n static void uv__rwlock_fallback_rdlock(uv_rwlock_t* rwlock) {\n-  uv_mutex_lock(&rwlock->fallback_.read_mutex_);\n+  /* Acquire the lock that protects the reader count. */\n+  EnterCriticalSection(&rwlock->fallback_.read_lock_.cs);\n \n+  /* Increase the reader count, and lock for write if this is the first\n+   * reader.\n+   */\n-  if (++rwlock->fallback_.num_readers_ == 1)\n+  if (++rwlock->fallback_.num_readers_ == 1) {\n-    uv_mutex_lock(&rwlock->fallback_.write_mutex_);\n+    DWORD r = WaitForSingleObject(rwlock->fallback_.write_lock_.sem, INFINITE);\n+    if (r != WAIT_OBJECT_0)\n+      uv_fatal_error(GetLastError(), \"WaitForSingleObject\");\n+  }\n \n-  uv_mutex_unlock(&rwlock->fallback_.read_mutex_);\n+  /* Release the lock that protects the reader count. */\n+  LeaveCriticalSection(&rwlock->fallback_.read_lock_.cs);\n }",
  "diff_source": "custom"
}