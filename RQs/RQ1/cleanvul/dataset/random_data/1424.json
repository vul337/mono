{
  "id": 1424,
  "language": "Java",
  "commit_url": "https://github.com/codehaus-cargo/cargo/commit/f58714a58894d1a7cd193444d15c27c391fd1f91",
  "commit_sha": "f58714a58894d1a7cd193444d15c27c391fd1f91",
  "commit_msg": "Fix Zip Slip vulnerability",
  "pr_url": null,
  "pr_info": "no more info",
  "file_name": "core/api/util/src/main/java/org/codehaus/cargo/util/DefaultFileHandler.java",
  "func_name": "explode",
  "func_before": "@Override\n    public void explode(String war, String exploded)\n    {\n        if (exists(exploded))\n        {\n            delete(exploded);\n        }\n\n        byte[] buf = new byte[1024];\n\n        try (JarFile archive = new JarFile(new File(war).getAbsoluteFile()))\n        {\n            Enumeration e = archive.entries();\n            while (e.hasMoreElements())\n            {\n                JarEntry j = (JarEntry) e.nextElement();\n                String dst = this.append(exploded, j.getName());\n\n                if (j.isDirectory())\n                {\n                    this.mkdirs(dst);\n                    continue;\n                }\n\n                this.mkdirs(getParent(dst));\n\n                try (InputStream in = archive.getInputStream(j);\n                    FileOutputStream out = new FileOutputStream(dst))\n                {\n                    while (true)\n                    {\n                        int sz = in.read(buf);\n                        if (sz < 0)\n                        {\n                            break;\n                        }\n                        out.write(buf, 0, sz);\n                    }\n                }\n            }\n        }\n        catch (IOException e)\n        {\n            throw new CargoException(\n                \"Failed to extract file [\" + war + \"] to [\" + exploded + \"]\", e);\n        }\n    }",
  "func_after": "@Override\n    public void explode(String war, String exploded)\n    {\n        if (exists(exploded))\n        {\n            delete(exploded);\n        }\n\n        Path explodedPath = new File(exploded).toPath();\n        try (JarFile archive = new JarFile(new File(war).getAbsoluteFile()))\n        {\n            Enumeration e = archive.entries();\n            while (e.hasMoreElements())\n            {\n                JarEntry j = (JarEntry) e.nextElement();\n                String dst = this.append(exploded, j.getName());\n\n                File dstFile = new File(dst);\n                if (!dstFile.toPath().normalize().startsWith(explodedPath))\n                {\n                    throw new IOException(\"File contains illegal path: \" + j.getName());\n                }\n\n                if (j.isDirectory())\n                {\n                    this.mkdirs(dst);\n                    continue;\n                }\n\n                this.mkdirs(getParent(dst));\n\n                try (InputStream in = archive.getInputStream(j);\n                    FileOutputStream out = new FileOutputStream(dst))\n                {\n                    this.copy(in, out);\n                }\n            }\n        }\n        catch (IOException e)\n        {\n            try\n            {\n                delete(exploded);\n            }\n            catch (Exception ignored)\n            {\n                // Ignored\n            }\n\n            throw new CargoException(\n                \"Failed to extract file [\" + war + \"] to [\" + exploded + \"]\", e);\n        }\n    }",
  "diff_func": "--- func_before\n+++ func_after\n @Override\n     public void explode(String war, String exploded)\n     {\n         if (exists(exploded))\n         {\n             delete(exploded);\n         }\n \n+        Path explodedPath = new File(exploded).toPath();\n-        byte[] buf = new byte[1024];\n-\n         try (JarFile archive = new JarFile(new File(war).getAbsoluteFile()))\n         {\n             Enumeration e = archive.entries();\n             while (e.hasMoreElements())\n             {\n                 JarEntry j = (JarEntry) e.nextElement();\n                 String dst = this.append(exploded, j.getName());\n+\n+                File dstFile = new File(dst);\n+                if (!dstFile.toPath().normalize().startsWith(explodedPath))\n+                {\n+                    throw new IOException(\"File contains illegal path: \" + j.getName());\n+                }\n \n                 if (j.isDirectory())\n                 {\n                     this.mkdirs(dst);\n                     continue;\n                 }\n \n                 this.mkdirs(getParent(dst));\n \n                 try (InputStream in = archive.getInputStream(j);\n                     FileOutputStream out = new FileOutputStream(dst))\n                 {\n+                    this.copy(in, out);\n-                    while (true)\n-                    {\n-                        int sz = in.read(buf);\n-                        if (sz < 0)\n-                        {\n-                            break;\n-                        }\n-                        out.write(buf, 0, sz);\n-                    }\n                 }\n             }\n         }\n         catch (IOException e)\n         {\n+            try\n+            {\n+                delete(exploded);\n+            }\n+            catch (Exception ignored)\n+            {\n+                // Ignored\n+            }\n+\n             throw new CargoException(\n                 \"Failed to extract file [\" + war + \"] to [\" + exploded + \"]\", e);\n         }\n     }",
  "diff_source": "custom"
}