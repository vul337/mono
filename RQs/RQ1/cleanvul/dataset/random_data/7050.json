{
  "id": 7050,
  "language": "Python",
  "commit_url": "https://github.com/orchest/orchest/commit/557755a05e1061086de850e872ac511fba31e459",
  "commit_sha": "557755a05e1061086de850e872ac511fba31e459",
  "commit_msg": "Rm unsafe path joins from file manager endpoints",
  "pr_url": "https://github.com/orchest/orchest/pull/913",
  "pr_info": "Related: https://github.com/orchest/orchest/pull/907\r\n\r\nFixes: https://github.com/orchest/orchest/issues/906\r\n\r\nCredits to @porcupineyhairs for discovery and fix proposal\r\n\r\nThere are a couple of regressions on `dev` that make it not possible to test all edge cases, it's something we will have to look into next week.",
  "file_name": "services/orchest-webserver/app/app/views/views.py",
  "func_name": "filemanager_exists",
  "func_before": "def filemanager_exists():\n        \"\"\"Check whether file exists.\"\"\"\n\n        path = request.args.get(\"path\")\n        project_uuid = request.args.get(\"project_uuid\")\n        pipeline_uuid = request.args.get(\"pipeline_uuid\")\n\n        # currently this endpoint only handles \"/data\"\n        # if path is absolute\n        if path.startswith(\"/\") and not path.startswith(\"/data\"):\n            return jsonify({\"message\": \"Illegal file path prefix.\"}), 400\n\n        file_path = None\n\n        if path.startswith(\"/\"):\n            file_path = resolve_absolute_path(path)\n        else:\n            pipeline_dir = get_pipeline_directory(pipeline_uuid, project_uuid)\n            file_path = normalize_project_relative_path(path)\n            file_path = os.path.join(pipeline_dir, file_path)\n\n        if file_path is None:\n            return jsonify({\"message\": \"Failed to process file_path.\"}), 500\n\n        if os.path.isfile(file_path):\n            return jsonify({\"message\": \"File exists.\"})\n        else:\n            return jsonify({\"message\": \"File does not exists.\"}), 404",
  "func_after": "def filemanager_exists():\n        \"\"\"Check whether file exists.\"\"\"\n\n        path = request.args.get(\"path\")\n        project_uuid = request.args.get(\"project_uuid\")\n        pipeline_uuid = request.args.get(\"pipeline_uuid\")\n\n        # currently this endpoint only handles \"/data\"\n        # if path is absolute\n        if path.startswith(\"/\") and not path.startswith(\"/data\"):\n            return jsonify({\"message\": \"Illegal file path prefix.\"}), 400\n\n        file_path = None\n\n        if path.startswith(\"/\"):\n            file_path = resolve_absolute_path(path)\n        else:\n            pipeline_dir = get_pipeline_directory(pipeline_uuid, project_uuid)\n            file_path = normalize_project_relative_path(path)\n            file_path = safe_join(pipeline_dir, file_path)\n\n        if file_path is None:\n            return jsonify({\"message\": \"Failed to process file_path.\"}), 500\n\n        if os.path.isfile(file_path):\n            return jsonify({\"message\": \"File exists.\"})\n        else:\n            return jsonify({\"message\": \"File does not exists.\"}), 404",
  "diff_func": "--- func_before\n+++ func_after\n def filemanager_exists():\n         \"\"\"Check whether file exists.\"\"\"\n \n         path = request.args.get(\"path\")\n         project_uuid = request.args.get(\"project_uuid\")\n         pipeline_uuid = request.args.get(\"pipeline_uuid\")\n \n         # currently this endpoint only handles \"/data\"\n         # if path is absolute\n         if path.startswith(\"/\") and not path.startswith(\"/data\"):\n             return jsonify({\"message\": \"Illegal file path prefix.\"}), 400\n \n         file_path = None\n \n         if path.startswith(\"/\"):\n             file_path = resolve_absolute_path(path)\n         else:\n             pipeline_dir = get_pipeline_directory(pipeline_uuid, project_uuid)\n             file_path = normalize_project_relative_path(path)\n-            file_path = os.path.join(pipeline_dir, file_path)\n+            file_path = safe_join(pipeline_dir, file_path)\n \n         if file_path is None:\n             return jsonify({\"message\": \"Failed to process file_path.\"}), 500\n \n         if os.path.isfile(file_path):\n             return jsonify({\"message\": \"File exists.\"})\n         else:\n             return jsonify({\"message\": \"File does not exists.\"}), 404",
  "diff_source": "custom"
}