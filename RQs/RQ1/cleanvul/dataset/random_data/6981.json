{
  "id": 6981,
  "language": "Python",
  "commit_url": "https://github.com/MobSF/Mobile-Security-Framework-MobSF/commit/b9cdd1f52bdf127cf33bb1be369e374a2855f8e6",
  "commit_sha": "b9cdd1f52bdf127cf33bb1be369e374a2855f8e6",
  "commit_msg": "Security: Fix for LFI found by thongngo",
  "pr_url": null,
  "pr_info": "no more info",
  "file_name": "StaticAnalyzer/views.py",
  "func_name": "Find",
  "func_before": "def Find(request):\n    try:\n        m=re.match('[0-9a-f]{32}',request.POST['md5'])\n        if m:\n            MD5=request.POST['md5']\n            q=request.POST['q']\n            code=request.POST['code']\n            matches=[]\n            if code=='java':\n                SRC=os.path.join(settings.UPLD_DIR, MD5+'/java_source/')\n                ext='.java'\n            elif code=='smali':\n                SRC=os.path.join(settings.UPLD_DIR, MD5+'/smali_source/')\n                ext='.smali'\n            else:\n                return HttpResponseRedirect('/error/')\n            for dirName, subDir, files in os.walk(SRC):\n                for jfile in files:\n                    if jfile.endswith(ext):\n                        file_path=os.path.join(SRC,dirName,jfile)\n                        if \"+\" in jfile:\n                            fp2=os.path.join(SRC,dirName,jfile.replace(\"+\",\"x\"))\n                            shutil.move(file_path,fp2)\n                            file_path=fp2\n                        fileparam=file_path.replace(SRC,'')\n                        with io.open(file_path,mode='r',encoding=\"utf8\",errors=\"ignore\") as f:\n                            dat=f.read()\n                        if q in dat:\n                            matches.append(\"<a href='../ViewSource/?file=\"+escape(fileparam)+\"&md5=\"+MD5+\"&type=apk'>\"+escape(fileparam)+\"</a>\")\n        flz=len(matches)   \n        context = {'title': 'Search Results',\n        'matches': matches,\n        'term': q,\n        'found' : str(flz),\n        }\n        template=\"search.html\"\n        return render(request,template,context)\n    except:\n        PrintException(\"[ERROR] Searching Failed\")\n        return HttpResponseRedirect('/error/')",
  "func_after": "def Find(request):\n    try:\n        m=re.match('^[0-9a-f]{32}$',request.POST['md5'])\n        if m:\n            MD5=request.POST['md5']\n            q=request.POST['q']\n            code=request.POST['code']\n            matches=[]\n            if code=='java':\n                SRC=os.path.join(settings.UPLD_DIR, MD5+'/java_source/')\n                ext='.java'\n            elif code=='smali':\n                SRC=os.path.join(settings.UPLD_DIR, MD5+'/smali_source/')\n                ext='.smali'\n            else:\n                return HttpResponseRedirect('/error/')\n            for dirName, subDir, files in os.walk(SRC):\n                for jfile in files:\n                    if jfile.endswith(ext):\n                        file_path=os.path.join(SRC,dirName,jfile)\n                        if \"+\" in jfile:\n                            fp2=os.path.join(SRC,dirName,jfile.replace(\"+\",\"x\"))\n                            shutil.move(file_path,fp2)\n                            file_path=fp2\n                        fileparam=file_path.replace(SRC,'')\n                        with io.open(file_path,mode='r',encoding=\"utf8\",errors=\"ignore\") as f:\n                            dat=f.read()\n                        if q in dat:\n                            matches.append(\"<a href='../ViewSource/?file=\"+escape(fileparam)+\"&md5=\"+MD5+\"&type=apk'>\"+escape(fileparam)+\"</a>\")\n        flz=len(matches)   \n        context = {'title': 'Search Results',\n        'matches': matches,\n        'term': q,\n        'found' : str(flz),\n        }\n        template=\"search.html\"\n        return render(request,template,context)\n    except:\n        PrintException(\"[ERROR] Searching Failed\")\n        return HttpResponseRedirect('/error/')",
  "diff_func": "--- func_before\n+++ func_after\n def Find(request):\n     try:\n-        m=re.match('[0-9a-f]{32}',request.POST['md5'])\n+        m=re.match('^[0-9a-f]{32}$',request.POST['md5'])\n         if m:\n             MD5=request.POST['md5']\n             q=request.POST['q']\n             code=request.POST['code']\n             matches=[]\n             if code=='java':\n                 SRC=os.path.join(settings.UPLD_DIR, MD5+'/java_source/')\n                 ext='.java'\n             elif code=='smali':\n                 SRC=os.path.join(settings.UPLD_DIR, MD5+'/smali_source/')\n                 ext='.smali'\n             else:\n                 return HttpResponseRedirect('/error/')\n             for dirName, subDir, files in os.walk(SRC):\n                 for jfile in files:\n                     if jfile.endswith(ext):\n                         file_path=os.path.join(SRC,dirName,jfile)\n                         if \"+\" in jfile:\n                             fp2=os.path.join(SRC,dirName,jfile.replace(\"+\",\"x\"))\n                             shutil.move(file_path,fp2)\n                             file_path=fp2\n                         fileparam=file_path.replace(SRC,'')\n                         with io.open(file_path,mode='r',encoding=\"utf8\",errors=\"ignore\") as f:\n                             dat=f.read()\n                         if q in dat:\n                             matches.append(\"<a href='../ViewSource/?file=\"+escape(fileparam)+\"&md5=\"+MD5+\"&type=apk'>\"+escape(fileparam)+\"</a>\")\n         flz=len(matches)   \n         context = {'title': 'Search Results',\n         'matches': matches,\n         'term': q,\n         'found' : str(flz),\n         }\n         template=\"search.html\"\n         return render(request,template,context)\n     except:\n         PrintException(\"[ERROR] Searching Failed\")\n         return HttpResponseRedirect('/error/')",
  "diff_source": "custom"
}