{
  "id": 2774,
  "language": "Java",
  "commit_url": "https://github.com/OWASP/java-html-sanitizer/commit/be33ec6962fa3938ec028873e269632d5d8fa55a",
  "commit_sha": "be33ec6962fa3938ec028873e269632d5d8fa55a",
  "commit_msg": "Render style tag content more strictly.\n\nThis addresses a vulnerability where policies that allow `<style>`\nelements with text in `<option>` elements are vulnerable to XSS as\ndisclosed in\n\nhttps://docs.google.com/document/d/11SoX296sMS0XoQiQbpxc5pNxSdbJKDJkm5BDv0zrX50/edit?usp=sharing\n\nThis changes behavior for rendering of `<style>` element text so may\nchange behavior.\n\nSpecifically, `<style>` element text that includes the strings `-->`\nor `]]>` will no longer sanitize.",
  "pr_url": null,
  "pr_info": "no more info",
  "file_name": "src/main/java/org/owasp/html/HtmlStreamRenderer.java",
  "func_name": "writeCloseTag",
  "func_before": "private final void writeCloseTag(String uncanonElementName)\n      throws IOException {\n    if (!open) { throw new IllegalStateException(); }\n    String elementName = HtmlLexer.canonicalElementName(uncanonElementName);\n    if (!isValidHtmlName(elementName)) {\n      error(\"Invalid element name\", elementName);\n      return;\n    }\n\n    if (pendingUnescaped != null) {\n      if (!lastTagOpened.equals(elementName)) {\n        error(\"Tag content cannot appear inside CDATA element\", elementName);\n        return;\n      } else {\n        StringBuilder cdataContent = pendingUnescaped;\n        pendingUnescaped = null;\n        Encoding.stripBannedCodeunits(cdataContent);\n        int problemIndex = checkHtmlCdataCloseable(lastTagOpened, cdataContent);\n        if (problemIndex == -1) {\n          output.append(cdataContent);\n        } else {\n          error(\n              \"Invalid CDATA text content\",\n              cdataContent.subSequence(\n                  problemIndex,\n                  Math.min(problemIndex + 10, cdataContent.length())));\n          // Still output the close tag.\n        }\n      }\n      if (\"plaintext\".equals(elementName)) { return; }\n    }\n    output.append(\"</\").append(elementName).append(\">\");\n  }",
  "func_after": "private final void writeCloseTag(String uncanonElementName)\n      throws IOException {\n    if (!open) { throw new IllegalStateException(); }\n    String elementName = HtmlLexer.canonicalElementName(uncanonElementName);\n    if (!isValidHtmlName(elementName)) {\n      error(\"Invalid element name\", elementName);\n      return;\n    }\n\n    if (pendingUnescaped != null) {\n      if (!lastTagOpened.equals(elementName)) {\n        error(\"Tag content cannot appear inside CDATA element\", elementName);\n        return;\n      } else {\n        StringBuilder cdataContent = pendingUnescaped;\n        pendingUnescaped = null;\n        Encoding.stripBannedCodeunits(cdataContent);\n        int problemIndex = checkHtmlCdataCloseable(lastTagOpened, cdataContent);\n        if (problemIndex == -1) {\n          String prefix = \"\";\n          String suffix = \"\";\n          Set<String> bannedSubstrings = Collections.emptySet();\n          if (\"style\".equals(elementName)) {\n            prefix = \"/*<![CDATA[<!--*/\\n\";\n            suffix = \"\\n/*-->]]>*/\";\n            bannedSubstrings = BANNED_IN_STYLE_ELEMENTS;\n          }\n\n          for (String bannedSubstring : bannedSubstrings) {\n            if (cdataContent.indexOf(bannedSubstring) >= 0) {\n              cdataContent.setLength(0);\n            }\n          }\n\n          if (cdataContent.length() != 0) {\n            output.append(prefix);\n            output.append(cdataContent);\n            output.append(suffix);\n          }\n        } else {\n          error(\n              \"Invalid CDATA text content\",\n              cdataContent.subSequence(\n                  problemIndex,\n                  Math.min(problemIndex + 10, cdataContent.length())));\n          // Still output the close tag.\n        }\n      }\n      if (\"plaintext\".equals(elementName)) { return; }\n    }\n    output.append(\"</\").append(elementName).append(\">\");\n  }",
  "diff_func": "--- func_before\n+++ func_after\n private final void writeCloseTag(String uncanonElementName)\n       throws IOException {\n     if (!open) { throw new IllegalStateException(); }\n     String elementName = HtmlLexer.canonicalElementName(uncanonElementName);\n     if (!isValidHtmlName(elementName)) {\n       error(\"Invalid element name\", elementName);\n       return;\n     }\n \n     if (pendingUnescaped != null) {\n       if (!lastTagOpened.equals(elementName)) {\n         error(\"Tag content cannot appear inside CDATA element\", elementName);\n         return;\n       } else {\n         StringBuilder cdataContent = pendingUnescaped;\n         pendingUnescaped = null;\n         Encoding.stripBannedCodeunits(cdataContent);\n         int problemIndex = checkHtmlCdataCloseable(lastTagOpened, cdataContent);\n         if (problemIndex == -1) {\n+          String prefix = \"\";\n+          String suffix = \"\";\n+          Set<String> bannedSubstrings = Collections.emptySet();\n+          if (\"style\".equals(elementName)) {\n+            prefix = \"/*<![CDATA[<!--*/\\n\";\n+            suffix = \"\\n/*-->]]>*/\";\n+            bannedSubstrings = BANNED_IN_STYLE_ELEMENTS;\n+          }\n+\n+          for (String bannedSubstring : bannedSubstrings) {\n+            if (cdataContent.indexOf(bannedSubstring) >= 0) {\n+              cdataContent.setLength(0);\n+            }\n+          }\n+\n+          if (cdataContent.length() != 0) {\n+            output.append(prefix);\n-          output.append(cdataContent);\n+            output.append(cdataContent);\n+            output.append(suffix);\n+          }\n         } else {\n           error(\n               \"Invalid CDATA text content\",\n               cdataContent.subSequence(\n                   problemIndex,\n                   Math.min(problemIndex + 10, cdataContent.length())));\n           // Still output the close tag.\n         }\n       }\n       if (\"plaintext\".equals(elementName)) { return; }\n     }\n     output.append(\"</\").append(elementName).append(\">\");\n   }",
  "diff_source": "custom"
}