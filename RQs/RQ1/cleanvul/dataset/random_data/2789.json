{
  "id": 2789,
  "language": "Java",
  "commit_url": "https://github.com/apple/servicetalk/commit/7c2ca18966342a2a6ee9ffec8b01c0b289e1c75b",
  "commit_sha": "7c2ca18966342a2a6ee9ffec8b01c0b289e1c75b",
  "commit_msg": "Fail parsing signed `Content-Length` header values (#1427)\n\nMotivation:\r\n\r\n`Content-Length` header values must contain only digits, according to [1].\r\nHowever, our existing parser allows signed (positive or negative) CL\r\nvalues, like: `+n` or `-n`.\r\nSome servers may ignore those values and forward it as-is, some may treat\r\n`+n` as `n`. A combination of those two servers can yield an HTTP Request\r\nSmuggling vulnerability.\r\n\r\n1. https://tools.ietf.org/html/rfc7230#section-3.3.2\r\n\r\nModifications:\r\n\r\n- Fail HTTP messages with signed `Content-Length` header values;\r\n- Add tests to validate this behavior;\r\n- Fix the way `HeaderUtils.contentLength` generates an exception\r\nmessage for multiple CL header values;\r\n\r\nResult:\r\n\r\nSigned `Content-Length` header values are prohibited and fail the message\r\nparsing.",
  "pr_url": "https://github.com/apple/servicetalk/pull/1427",
  "pr_info": "Motivation:\r\n\r\n`Content-Length` header values must contain only digits, according to [1].\r\nHowever, our existing parser allows signed (positive or negative) CL\r\nvalues, like: `+n` or `-n`.\r\nSome servers may ignore those values and forward it as-is, some may treat\r\n`+n` as `n`. A combination of those two servers can yield an HTTP Request\r\nSmuggling vulnerability.\r\n\r\n1. https://tools.ietf.org/html/rfc7230#section-3.3.2\r\n\r\nModifications:\r\n\r\n- Fail HTTP messages with signed `Content-Length` header values;\r\n- Add tests to validate this behavior;\r\n- Fix the way `HeaderUtils.contentLength` generates an exception\r\nmessage for multiple CL header values;\r\n\r\nResult:\r\n\r\nSigned `Content-Length` header values are prohibited and fail the message\r\nparsing.",
  "file_name": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/H2ToStH1ClientDuplexHandler.java",
  "func_name": "h2HeadersToH1HeadersClient",
  "func_before": "private NettyH2HeadersToHttpHeaders h2HeadersToH1HeadersClient(Http2Headers h2Headers,\n                                                                   @Nullable HttpResponseStatus httpStatus,\n                                                                   boolean fullResponse) {\n        assert method != null;\n        h2HeadersSanitizeForH1(h2Headers);\n        if (httpStatus != null) {\n            final int statusCode = httpStatus.code();\n            final long contentLength = contentLength(h2Headers.valueIterator(HttpHeaderNames.CONTENT_LENGTH),\n                    h2Headers::getAll);\n            if (contentLength < 0) {\n                if (fullResponse) {\n                    if (responseMayHaveContent(statusCode, method)) {\n                        h2Headers.set(CONTENT_LENGTH, ZERO);\n                    }\n                } else if (canAddResponseTransferEncodingProtocol(statusCode, method)) {\n                    h2Headers.add(HttpHeaderNames.TRANSFER_ENCODING, HttpHeaderValues.CHUNKED);\n                }\n            } else if (!responseMayHaveContent(statusCode, method)) {\n                throw new IllegalArgumentException(\"content-length (\" + contentLength +\n                        \") header is not expected for status code \" + statusCode + \" in response to \" + method.name() +\n                        \" request\");\n            }\n        }\n        return new NettyH2HeadersToHttpHeaders(h2Headers, headersFactory.validateCookies());\n    }",
  "func_after": "private NettyH2HeadersToHttpHeaders h2HeadersToH1HeadersClient(Http2Headers h2Headers,\n                                                                   @Nullable HttpResponseStatus httpStatus,\n                                                                   boolean fullResponse) {\n        assert method != null;\n        h2HeadersSanitizeForH1(h2Headers);\n        if (httpStatus != null) {\n            final int statusCode = httpStatus.code();\n            final Long contentLength = h2Headers.getLong(CONTENT_LENGTH);\n            if (contentLength == null) {\n                if (fullResponse) {\n                    if (responseMayHaveContent(statusCode, method)) {\n                        h2Headers.set(CONTENT_LENGTH, ZERO);\n                    }\n                } else if (canAddResponseTransferEncodingProtocol(statusCode, method)) {\n                    h2Headers.add(TRANSFER_ENCODING, CHUNKED);\n                }\n            } else if (!responseMayHaveContent(statusCode, method)) {\n                throw new IllegalArgumentException(\"content-length (\" + contentLength +\n                        \") header is not expected for status code \" + statusCode + \" in response to \" + method.name() +\n                        \" request\");\n            }\n        }\n        return new NettyH2HeadersToHttpHeaders(h2Headers, headersFactory.validateCookies());\n    }",
  "diff_func": "--- func_before\n+++ func_after\n private NettyH2HeadersToHttpHeaders h2HeadersToH1HeadersClient(Http2Headers h2Headers,\n                                                                    @Nullable HttpResponseStatus httpStatus,\n                                                                    boolean fullResponse) {\n         assert method != null;\n         h2HeadersSanitizeForH1(h2Headers);\n         if (httpStatus != null) {\n             final int statusCode = httpStatus.code();\n+            final Long contentLength = h2Headers.getLong(CONTENT_LENGTH);\n-            final long contentLength = contentLength(h2Headers.valueIterator(HttpHeaderNames.CONTENT_LENGTH),\n-                    h2Headers::getAll);\n-            if (contentLength < 0) {\n+            if (contentLength == null) {\n                 if (fullResponse) {\n                     if (responseMayHaveContent(statusCode, method)) {\n                         h2Headers.set(CONTENT_LENGTH, ZERO);\n                     }\n                 } else if (canAddResponseTransferEncodingProtocol(statusCode, method)) {\n-                    h2Headers.add(HttpHeaderNames.TRANSFER_ENCODING, HttpHeaderValues.CHUNKED);\n+                    h2Headers.add(TRANSFER_ENCODING, CHUNKED);\n                 }\n             } else if (!responseMayHaveContent(statusCode, method)) {\n                 throw new IllegalArgumentException(\"content-length (\" + contentLength +\n                         \") header is not expected for status code \" + statusCode + \" in response to \" + method.name() +\n                         \" request\");\n             }\n         }\n         return new NettyH2HeadersToHttpHeaders(h2Headers, headersFactory.validateCookies());\n     }",
  "diff_source": "custom"
}