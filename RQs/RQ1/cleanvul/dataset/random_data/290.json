{
  "id": 290,
  "language": "Java",
  "commit_url": "https://github.com/aosp-mirror/platform_frameworks_base/commit/0ac58444bed2885f8f30d5705e56d842f0ad2c0f",
  "commit_sha": "0ac58444bed2885f8f30d5705e56d842f0ad2c0f",
  "commit_msg": "[RESTRICT AUTOMERGE][SettingsProvider] key size limit for mutating settings\n\nPrior to targetSdk 22, apps could add random system settings keys which\nopens an opportunity for OOM attacks. This CL adds a key size limit.\n\nBUG: 239415997\nTest: manual; will add cts test\nMerged-In: Ic9e88c0cc3d7206c64ba5b5c7d15b50d1ffc9adc\nChange-Id: Ic9e88c0cc3d7206c64ba5b5c7d15b50d1ffc9adc\n(cherry picked from commit 783bcba343c480f6ccedaaff41ba7171a1082e0c)\n(cherry picked from commit 75c1d6096c162fc37e6eca36f4e653072e463263)\nMerged-In: Ic9e88c0cc3d7206c64ba5b5c7d15b50d1ffc9adc",
  "pr_url": null,
  "pr_info": "no more info",
  "file_name": "packages/SettingsProvider/src/com/android/providers/settings/SettingsState.java",
  "func_name": "GuardedBy",
  "func_before": "@GuardedBy(\"mLock\")\n    public boolean insertSettingLocked(String name, String value, String tag,\n            boolean makeDefault, boolean forceNonSystemPackage, String packageName,\n            boolean overrideableByRestore) {\n        if (TextUtils.isEmpty(name)) {\n            return false;\n        }\n\n        Setting oldState = mSettings.get(name);\n        String oldValue = (oldState != null) ? oldState.value : null;\n        String oldDefaultValue = (oldState != null) ? oldState.defaultValue : null;\n        String newDefaultValue = makeDefault ? value : oldDefaultValue;\n\n        int newSize = getNewMemoryUsagePerPackageLocked(packageName, oldValue, value,\n                oldDefaultValue, newDefaultValue);\n        checkNewMemoryUsagePerPackageLocked(packageName, newSize);\n\n        Setting newState;\n\n        if (oldState != null) {\n            if (!oldState.update(value, makeDefault, packageName, tag, forceNonSystemPackage,\n                    overrideableByRestore)) {\n                return false;\n            }\n            newState = oldState;\n        } else {\n            newState = new Setting(name, value, makeDefault, packageName, tag,\n                    forceNonSystemPackage);\n            mSettings.put(name, newState);\n        }\n\n        FrameworkStatsLog.write(FrameworkStatsLog.SETTING_CHANGED, name, value, newState.value,\n                oldValue, tag, makeDefault, getUserIdFromKey(mKey),\n                FrameworkStatsLog.SETTING_CHANGED__REASON__UPDATED);\n\n        addHistoricalOperationLocked(HISTORICAL_OPERATION_UPDATE, newState);\n\n        updateMemoryUsagePerPackageLocked(packageName, newSize);\n\n        scheduleWriteIfNeededLocked();\n\n        return true;\n    }",
  "func_after": "@GuardedBy(\"mLock\")\n    public boolean insertSettingLocked(String name, String value, String tag,\n            boolean makeDefault, boolean forceNonSystemPackage, String packageName,\n            boolean overrideableByRestore) {\n        if (TextUtils.isEmpty(name)) {\n            return false;\n        }\n\n        Setting oldState = mSettings.get(name);\n        String oldValue = (oldState != null) ? oldState.value : null;\n        String oldDefaultValue = (oldState != null) ? oldState.defaultValue : null;\n        String newDefaultValue = makeDefault ? value : oldDefaultValue;\n\n        int newSize = getNewMemoryUsagePerPackageLocked(packageName,\n                oldValue == null ? name.length() : 0 /* deltaKeySize */,\n                oldValue, value, oldDefaultValue, newDefaultValue);\n        checkNewMemoryUsagePerPackageLocked(packageName, newSize);\n\n        Setting newState;\n\n        if (oldState != null) {\n            if (!oldState.update(value, makeDefault, packageName, tag, forceNonSystemPackage,\n                    overrideableByRestore)) {\n                return false;\n            }\n            newState = oldState;\n        } else {\n            newState = new Setting(name, value, makeDefault, packageName, tag,\n                    forceNonSystemPackage);\n            mSettings.put(name, newState);\n        }\n\n        FrameworkStatsLog.write(FrameworkStatsLog.SETTING_CHANGED, name, value, newState.value,\n                oldValue, tag, makeDefault, getUserIdFromKey(mKey),\n                FrameworkStatsLog.SETTING_CHANGED__REASON__UPDATED);\n\n        addHistoricalOperationLocked(HISTORICAL_OPERATION_UPDATE, newState);\n\n        updateMemoryUsagePerPackageLocked(packageName, newSize);\n\n        scheduleWriteIfNeededLocked();\n\n        return true;\n    }",
  "diff_func": "--- func_before\n+++ func_after\n @GuardedBy(\"mLock\")\n     public boolean insertSettingLocked(String name, String value, String tag,\n             boolean makeDefault, boolean forceNonSystemPackage, String packageName,\n             boolean overrideableByRestore) {\n         if (TextUtils.isEmpty(name)) {\n             return false;\n         }\n \n         Setting oldState = mSettings.get(name);\n         String oldValue = (oldState != null) ? oldState.value : null;\n         String oldDefaultValue = (oldState != null) ? oldState.defaultValue : null;\n         String newDefaultValue = makeDefault ? value : oldDefaultValue;\n \n-        int newSize = getNewMemoryUsagePerPackageLocked(packageName, oldValue, value,\n+        int newSize = getNewMemoryUsagePerPackageLocked(packageName,\n+                oldValue == null ? name.length() : 0 /* deltaKeySize */,\n-                oldDefaultValue, newDefaultValue);\n+                oldValue, value, oldDefaultValue, newDefaultValue);\n         checkNewMemoryUsagePerPackageLocked(packageName, newSize);\n \n         Setting newState;\n \n         if (oldState != null) {\n             if (!oldState.update(value, makeDefault, packageName, tag, forceNonSystemPackage,\n                     overrideableByRestore)) {\n                 return false;\n             }\n             newState = oldState;\n         } else {\n             newState = new Setting(name, value, makeDefault, packageName, tag,\n                     forceNonSystemPackage);\n             mSettings.put(name, newState);\n         }\n \n         FrameworkStatsLog.write(FrameworkStatsLog.SETTING_CHANGED, name, value, newState.value,\n                 oldValue, tag, makeDefault, getUserIdFromKey(mKey),\n                 FrameworkStatsLog.SETTING_CHANGED__REASON__UPDATED);\n \n         addHistoricalOperationLocked(HISTORICAL_OPERATION_UPDATE, newState);\n \n         updateMemoryUsagePerPackageLocked(packageName, newSize);\n \n         scheduleWriteIfNeededLocked();\n \n         return true;\n     }",
  "diff_source": "custom"
}