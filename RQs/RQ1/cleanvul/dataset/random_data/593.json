{
  "id": 593,
  "language": "Java",
  "commit_url": "https://github.com/LineageOS/android_packages_apps_Settings/commit/4356c9c65361481db16c393906bf46d8a0d44ef7",
  "commit_sha": "4356c9c65361481db16c393906bf46d8a0d44ef7",
  "commit_msg": "Check DISALLOW_APPS_CONTROL before performing reset app preferences\n\nWhen DISALLOW_APPS_CONTROL restriction is enabled, users should not be\nable to enable/disable apps, clear app caches and clear app data.\n\nThe function of reset app preferences will re-enable the disabled apps,\nit can let users bypass DISALLOW_APPS_CONTROL to enable an app disabled\nby IT admin to see sensitive information.\n\nTo fix this vulnerability, we add a check for DISALLOW_APPS_CONTROL\nrestriction before users reset app preferences. Once the restriction is\nenabled, it will show dialog “Blocked by your IT admin” instead.\n\nFixes: 238745070\nTest: Verify change by turning on/off DISALLOW_APPS_CONTROL with TestDPC.\nChange-Id: Iffee73cf4952b686a78b4c7aaa54747971337d03",
  "pr_url": null,
  "pr_info": "no more info",
  "file_name": "src/com/android/settings/applications/manageapplications/ManageApplications.java",
  "func_name": "onOptionsItemSelected",
  "func_before": "@Override\n    public boolean onOptionsItemSelected(MenuItem item) {\n        int menuId = item.getItemId();\n        int i = item.getItemId();\n        if (i == R.id.sort_order_alpha || i == R.id.sort_order_size) {\n            if (mApplications != null) {\n                mApplications.rebuild(menuId, false);\n            }\n        } else if (i == R.id.show_system || i == R.id.hide_system) {\n            mShowSystem = !mShowSystem;\n            mApplications.rebuild();\n        } else if (i == R.id.reset_app_preferences) {\n            mResetAppsHelper.buildResetDialog();\n            return true;\n        } else if (i == R.id.advanced) {\n            if (mListType == LIST_TYPE_NOTIFICATION) {\n                new SubSettingLauncher(getContext())\n                        .setDestination(ConfigureNotificationSettings.class.getName())\n                        .setTitleRes(R.string.configure_notification_settings)\n                        .setSourceMetricsCategory(getMetricsCategory())\n                        .setResultListener(this, ADVANCED_SETTINGS)\n                        .launch();\n            } else {\n                Intent intent = new Intent(\n                        android.provider.Settings.ACTION_MANAGE_DEFAULT_APPS_SETTINGS);\n                startActivityForResult(intent, ADVANCED_SETTINGS);\n            }\n            return true;\n        } else {// Handle the home button\n            return false;\n        }\n        updateOptionsMenu();\n        return true;\n    }",
  "func_after": "@Override\n    public boolean onOptionsItemSelected(MenuItem item) {\n        int menuId = item.getItemId();\n        int i = item.getItemId();\n        if (i == R.id.sort_order_alpha || i == R.id.sort_order_size) {\n            if (mApplications != null) {\n                mApplications.rebuild(menuId, false);\n            }\n        } else if (i == R.id.show_system || i == R.id.hide_system) {\n            mShowSystem = !mShowSystem;\n            mApplications.rebuild();\n        } else if (i == R.id.reset_app_preferences) {\n            final boolean appsControlDisallowedBySystem =\n                    RestrictedLockUtilsInternal.hasBaseUserRestriction(getActivity(),\n                            UserManager.DISALLOW_APPS_CONTROL, UserHandle.myUserId());\n            final RestrictedLockUtils.EnforcedAdmin appsControlDisallowedAdmin =\n                    RestrictedLockUtilsInternal.checkIfRestrictionEnforced(getActivity(),\n                            UserManager.DISALLOW_APPS_CONTROL, UserHandle.myUserId());\n            if (appsControlDisallowedAdmin != null && !appsControlDisallowedBySystem) {\n                RestrictedLockUtils.sendShowAdminSupportDetailsIntent(\n                        getActivity(), appsControlDisallowedAdmin);\n            } else {\n                mResetAppsHelper.buildResetDialog();\n            }\n            return true;\n        } else if (i == R.id.advanced) {\n            if (mListType == LIST_TYPE_NOTIFICATION) {\n                new SubSettingLauncher(getContext())\n                        .setDestination(ConfigureNotificationSettings.class.getName())\n                        .setTitleRes(R.string.configure_notification_settings)\n                        .setSourceMetricsCategory(getMetricsCategory())\n                        .setResultListener(this, ADVANCED_SETTINGS)\n                        .launch();\n            } else {\n                Intent intent = new Intent(\n                        android.provider.Settings.ACTION_MANAGE_DEFAULT_APPS_SETTINGS);\n                startActivityForResult(intent, ADVANCED_SETTINGS);\n            }\n            return true;\n        } else {// Handle the home button\n            return false;\n        }\n        updateOptionsMenu();\n        return true;\n    }",
  "diff_func": "--- func_before\n+++ func_after\n @Override\n     public boolean onOptionsItemSelected(MenuItem item) {\n         int menuId = item.getItemId();\n         int i = item.getItemId();\n         if (i == R.id.sort_order_alpha || i == R.id.sort_order_size) {\n             if (mApplications != null) {\n                 mApplications.rebuild(menuId, false);\n             }\n         } else if (i == R.id.show_system || i == R.id.hide_system) {\n             mShowSystem = !mShowSystem;\n             mApplications.rebuild();\n         } else if (i == R.id.reset_app_preferences) {\n+            final boolean appsControlDisallowedBySystem =\n+                    RestrictedLockUtilsInternal.hasBaseUserRestriction(getActivity(),\n+                            UserManager.DISALLOW_APPS_CONTROL, UserHandle.myUserId());\n+            final RestrictedLockUtils.EnforcedAdmin appsControlDisallowedAdmin =\n+                    RestrictedLockUtilsInternal.checkIfRestrictionEnforced(getActivity(),\n+                            UserManager.DISALLOW_APPS_CONTROL, UserHandle.myUserId());\n+            if (appsControlDisallowedAdmin != null && !appsControlDisallowedBySystem) {\n+                RestrictedLockUtils.sendShowAdminSupportDetailsIntent(\n+                        getActivity(), appsControlDisallowedAdmin);\n+            } else {\n-            mResetAppsHelper.buildResetDialog();\n+                mResetAppsHelper.buildResetDialog();\n+            }\n             return true;\n         } else if (i == R.id.advanced) {\n             if (mListType == LIST_TYPE_NOTIFICATION) {\n                 new SubSettingLauncher(getContext())\n                         .setDestination(ConfigureNotificationSettings.class.getName())\n                         .setTitleRes(R.string.configure_notification_settings)\n                         .setSourceMetricsCategory(getMetricsCategory())\n                         .setResultListener(this, ADVANCED_SETTINGS)\n                         .launch();\n             } else {\n                 Intent ",
  "diff_source": "custom"
}