{
  "id": 7393,
  "language": "JavaScript",
  "commit_url": "https://github.com/nodejs/undici/commit/66165d604fd0aee70a93ed5c44ad4cc2df395f80",
  "commit_sha": "66165d604fd0aee70a93ed5c44ad4cc2df395f80",
  "commit_msg": "Merge pull request from GHSA-f772-66g8-q5h3",
  "pr_url": null,
  "pr_info": "no more info",
  "file_name": "lib/core/request.js",
  "func_name": "processHeader",
  "func_before": "function processHeader (request, key, val) {\n  if (val && typeof val === 'object') {\n    throw new InvalidArgumentError(`invalid ${key} header`)\n  } else if (val === undefined) {\n    return\n  }\n\n  if (\n    request.host === null &&\n    key.length === 4 &&\n    key.toLowerCase() === 'host'\n  ) {\n    // Consumed by Client\n    request.host = val\n  } else if (\n    request.contentLength === null &&\n    key.length === 14 &&\n    key.toLowerCase() === 'content-length'\n  ) {\n    request.contentLength = parseInt(val, 10)\n    if (!Number.isFinite(request.contentLength)) {\n      throw new InvalidArgumentError('invalid content-length header')\n    }\n  } else if (\n    request.contentType === null &&\n    key.length === 12 &&\n    key.toLowerCase() === 'content-type'\n  ) {\n    request.contentType = val\n    request.headers += `${key}: ${val}\\r\\n`\n  } else if (\n    key.length === 17 &&\n    key.toLowerCase() === 'transfer-encoding'\n  ) {\n    throw new InvalidArgumentError('invalid transfer-encoding header')\n  } else if (\n    key.length === 10 &&\n    key.toLowerCase() === 'connection'\n  ) {\n    throw new InvalidArgumentError('invalid connection header')\n  } else if (\n    key.length === 10 &&\n    key.toLowerCase() === 'keep-alive'\n  ) {\n    throw new InvalidArgumentError('invalid keep-alive header')\n  } else if (\n    key.length === 7 &&\n    key.toLowerCase() === 'upgrade'\n  ) {\n    throw new InvalidArgumentError('invalid upgrade header')\n  } else if (\n    key.length === 6 &&\n    key.toLowerCase() === 'expect'\n  ) {\n    throw new NotSupportedError('expect header not supported')\n  } else if (tokenRegExp.exec(key) === null) {\n    throw new InvalidArgumentError('invalid header key')\n  } else if (headerCharRegex.exec(val) !== null) {\n    throw new InvalidArgumentError(`invalid ${key} header`)\n  } else {\n    request.headers += `${key}: ${val}\\r\\n`\n  }\n}",
  "func_after": "function processHeader (request, key, val) {\n  if (val && typeof val === 'object') {\n    throw new InvalidArgumentError(`invalid ${key} header`)\n  } else if (val === undefined) {\n    return\n  }\n\n  if (\n    request.host === null &&\n    key.length === 4 &&\n    key.toLowerCase() === 'host'\n  ) {\n    // Consumed by Client\n    request.host = val\n  } else if (\n    request.contentLength === null &&\n    key.length === 14 &&\n    key.toLowerCase() === 'content-length'\n  ) {\n    request.contentLength = parseInt(val, 10)\n    if (!Number.isFinite(request.contentLength)) {\n      throw new InvalidArgumentError('invalid content-length header')\n    }\n  } else if (\n    request.contentType === null &&\n    key.length === 12 &&\n    key.toLowerCase() === 'content-type' &&\n    headerCharRegex.exec(val) === null\n  ) {\n    request.contentType = val\n    request.headers += `${key}: ${val}\\r\\n`\n  } else if (\n    key.length === 17 &&\n    key.toLowerCase() === 'transfer-encoding'\n  ) {\n    throw new InvalidArgumentError('invalid transfer-encoding header')\n  } else if (\n    key.length === 10 &&\n    key.toLowerCase() === 'connection'\n  ) {\n    throw new InvalidArgumentError('invalid connection header')\n  } else if (\n    key.length === 10 &&\n    key.toLowerCase() === 'keep-alive'\n  ) {\n    throw new InvalidArgumentError('invalid keep-alive header')\n  } else if (\n    key.length === 7 &&\n    key.toLowerCase() === 'upgrade'\n  ) {\n    throw new InvalidArgumentError('invalid upgrade header')\n  } else if (\n    key.length === 6 &&\n    key.toLowerCase() === 'expect'\n  ) {\n    throw new NotSupportedError('expect header not supported')\n  } else if (tokenRegExp.exec(key) === null) {\n    throw new InvalidArgumentError('invalid header key')\n  } else if (headerCharRegex.exec(val) !== null) {\n    throw new InvalidArgumentError(`invalid ${key} header`)\n  } else {\n    request.headers += `${key}: ${val}\\r\\n`\n  }\n}",
  "diff_func": "--- func_before\n+++ func_after\n function processHeader (request, key, val) {\n   if (val && typeof val === 'object') {\n     throw new InvalidArgumentError(`invalid ${key} header`)\n   } else if (val === undefined) {\n     return\n   }\n \n   if (\n     request.host === null &&\n     key.length === 4 &&\n     key.toLowerCase() === 'host'\n   ) {\n     // Consumed by Client\n     request.host = val\n   } else if (\n     request.contentLength === null &&\n     key.length === 14 &&\n     key.toLowerCase() === 'content-length'\n   ) {\n     request.contentLength = parseInt(val, 10)\n     if (!Number.isFinite(request.contentLength)) {\n       throw new InvalidArgumentError('invalid content-length header')\n     }\n   } else if (\n     request.contentType === null &&\n     key.length === 12 &&\n-    key.toLowerCase() === 'content-type'\n+    key.toLowerCase() === 'content-type' &&\n+    headerCharRegex.exec(val) === null\n   ) {\n     request.contentType = val\n     request.headers += `${key}: ${val}\\r\\n`\n   } else if (\n     key.length === 17 &&\n     key.toLowerCase() === 'transfer-encoding'\n   ) {\n     throw new InvalidArgumentError('invalid transfer-encoding header')\n   } else if (\n     key.length === 10 &&\n     key.toLowerCase() === 'connection'\n   ) {\n     throw new InvalidArgumentError('invalid connection header')\n   } else if (\n     key.length === 10 &&\n     key.toLowerCase() === 'keep-alive'\n   ) {\n     throw new InvalidArgumentError('invalid keep-alive header')\n   } else if (\n     key.length === 7 &&\n     key.toLowerCase() === 'upgrade'\n   ) {\n     throw new InvalidArgumentError('invalid upgrade header')\n   } else if (\n     key.length === 6 &&\n     key.toLowerCase() === 'expect'\n   ) {\n     throw new NotSupportedError('expect header not supported')\n   } else if (tokenRegExp.exec(key) === null) {\n     throw new InvalidArgumentError('invalid header key')\n   } else if (headerCharRegex.exec(val) !== null) {\n     throw new InvalidArgumentError(`invalid ${key} header`)\n   } else {\n     request.header",
  "diff_source": "custom"
}