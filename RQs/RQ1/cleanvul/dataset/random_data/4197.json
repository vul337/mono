{
  "id": 4197,
  "language": "Python",
  "commit_url": "https://github.com/OctoPrint/OctoPrint/commit/d0072cff894509c77e243d6562245ad3079e17db",
  "commit_sha": "d0072cff894509c77e243d6562245ad3079e17db",
  "commit_msg": "Merge branch 'bug/gcode_script_vuln' into staging/bugfix",
  "pr_url": null,
  "pr_info": "no more info",
  "file_name": "src/octoprint/settings/__init__.py",
  "func_name": "_init_script_templating",
  "func_before": "def _init_script_templating(self):\n        from jinja2 import BaseLoader, ChoiceLoader, Environment, TemplateNotFound\n        from jinja2.ext import Extension\n        from jinja2.nodes import Include\n\n        from octoprint.util.jinja import FilteredFileSystemLoader\n\n        class SnippetExtension(Extension):\n            tags = {\"snippet\"}\n            fields = Include.fields\n\n            def parse(self, parser):\n                node = parser.parse_include()\n                if not node.template.value.startswith(\"/\"):\n                    node.template.value = \"snippets/\" + node.template.value\n                return node\n\n        class SettingsScriptLoader(BaseLoader):\n            def __init__(self, s):\n                self._settings = s\n\n            def get_source(self, environment, template):\n                parts = template.split(\"/\")\n                if not len(parts):\n                    raise TemplateNotFound(template)\n\n                script = self._settings.get([\"scripts\"], merged=True)\n                for part in parts:\n                    if isinstance(script, dict) and part in script:\n                        script = script[part]\n                    else:\n                        raise TemplateNotFound(template)\n                source = script\n                if source is None:\n                    raise TemplateNotFound(template)\n                mtime = self._settings._mtime\n                return source, None, lambda: mtime == self._settings.last_modified\n\n            def list_templates(self):\n                scripts = self._settings.get([\"scripts\"], merged=True)\n                return self._get_templates(scripts)\n\n            def _get_templates(self, scripts):\n                templates = []\n                for key in scripts:\n                    if isinstance(scripts[key], dict):\n                        templates += list(\n                            map(\n                                lambda x: key + \"/\" + x, self._get_templates(scripts[key])\n                            )\n                        )\n                    elif isinstance(scripts[key], str):\n                        templates.append(key)\n                return templates\n\n        class SelectLoader(BaseLoader):\n            def __init__(self, default, mapping, sep=\":\"):\n                self._default = default\n                self._mapping = mapping\n                self._sep = sep\n\n            def get_source(self, environment, template):\n                if self._sep in template:\n                    prefix, name = template.split(self._sep, 1)\n                    if prefix not in self._mapping:\n                        raise TemplateNotFound(template)\n                    return self._mapping[prefix].get_source(environment, name)\n                return self._default.get_source(environment, template)\n\n            def list_templates(self):\n                return self._default.list_templates()\n\n        class RelEnvironment(Environment):\n            def __init__(self, prefix_sep=\":\", *args, **kwargs):\n                Environment.__init__(self, *args, **kwargs)\n                self._prefix_sep = prefix_sep\n\n            def join_path(self, template, parent):\n                prefix, name = self._split_prefix(template)\n\n                if name.startswith(\"/\"):\n                    return self._join_prefix(prefix, name[1:])\n                else:\n                    _, parent_name = self._split_prefix(parent)\n                    parent_base = parent_name.split(\"/\")[:-1]\n                    return self._join_prefix(prefix, \"/\".join(parent_base) + \"/\" + name)\n\n            def _split_prefix(self, template):\n                if self._prefix_sep in template:\n                    return template.split(self._prefix_sep, 1)\n                else:\n                    return \"\", template\n\n            def _join_prefix(self, prefix, template):\n                if len(prefix):\n                    return prefix + self._prefix_sep + template\n                else:\n                    return template\n\n        path_filter = lambda path: not is_hidden_path(path)\n        file_system_loader = FilteredFileSystemLoader(\n            self.getBaseFolder(\"scripts\"), path_filter=path_filter\n        )\n        settings_loader = SettingsScriptLoader(self)\n        choice_loader = ChoiceLoader([file_system_loader, settings_loader])\n        select_loader = SelectLoader(\n            choice_loader, {\"bundled\": settings_loader, \"file\": file_system_loader}\n        )\n        return RelEnvironment(loader=select_loader, extensions=[SnippetExtension])",
  "func_after": "def _init_script_templating(self):\n        from jinja2 import BaseLoader, ChoiceLoader, TemplateNotFound\n        from jinja2.ext import Extension\n        from jinja2.nodes import Include\n        from jinja2.sandbox import SandboxedEnvironment\n\n        from octoprint.util.jinja import FilteredFileSystemLoader\n\n        class SnippetExtension(Extension):\n            tags = {\"snippet\"}\n            fields = Include.fields\n\n            def parse(self, parser):\n                node = parser.parse_include()\n                if not node.template.value.startswith(\"/\"):\n                    node.template.value = \"snippets/\" + node.template.value\n                return node\n\n        class SettingsScriptLoader(BaseLoader):\n            def __init__(self, s):\n                self._settings = s\n\n            def get_source(self, environment, template):\n                parts = template.split(\"/\")\n                if not len(parts):\n                    raise TemplateNotFound(template)\n\n                script = self._settings.get([\"scripts\"], merged=True)\n                for part in parts:\n                    if isinstance(script, dict) and part in script:\n                        script = script[part]\n                    else:\n                        raise TemplateNotFound(template)\n                source = script\n                if source is None:\n                    raise TemplateNotFound(template)\n                mtime = self._settings._mtime\n                return source, None, lambda: mtime == self._settings.last_modified\n\n            def list_templates(self):\n                scripts = self._settings.get([\"scripts\"], merged=True)\n                return self._get_templates(scripts)\n\n            def _get_templates(self, scripts):\n                templates = []\n                for key in scripts:\n                    if isinstance(scripts[key], dict):\n                        templates += list(\n                            map(\n                                lambda x: key + \"/\" + x, self._get_templates(scripts[key])\n                            )\n                        )\n                    elif isinstance(scripts[key], str):\n                        templates.append(key)\n                return templates\n\n        class SelectLoader(BaseLoader):\n            def __init__(self, default, mapping, sep=\":\"):\n                self._default = default\n                self._mapping = mapping\n                self._sep = sep\n\n            def get_source(self, environment, template):\n                if self._sep in template:\n                    prefix, name = template.split(self._sep, 1)\n                    if prefix not in self._mapping:\n                        raise TemplateNotFound(template)\n                    return self._mapping[prefix].get_source(environment, name)\n                return self._default.get_source(environment, template)\n\n            def list_templates(self):\n                return self._default.list_templates()\n\n        class RelEnvironment(SandboxedEnvironment):\n            def __init__(self, prefix_sep=\":\", *args, **kwargs):\n                super().__init__(*args, **kwargs)\n                self._prefix_sep = prefix_sep\n\n            def join_path(self, template, parent):\n                prefix, name = self._split_prefix(template)\n\n                if name.startswith(\"/\"):\n                    return self._join_prefix(prefix, name[1:])\n                else:\n                    _, parent_name = self._split_prefix(parent)\n                    parent_base = parent_name.split(\"/\")[:-1]\n                    return self._join_prefix(prefix, \"/\".join(parent_base) + \"/\" + name)\n\n            def _split_prefix(self, template):\n                if self._prefix_sep in template:\n                    return template.split(self._prefix_sep, 1)\n                else:\n                    return \"\", template\n\n            def _join_prefix(self, prefix, template):\n                if len(prefix):\n                    return prefix + self._prefix_sep + template\n                else:\n                    return template\n\n        path_filter = lambda path: not is_hidden_path(path)\n        file_system_loader = FilteredFileSystemLoader(\n            self.getBaseFolder(\"scripts\"), path_filter=path_filter\n        )\n        settings_loader = SettingsScriptLoader(self)\n        choice_loader = ChoiceLoader([file_system_loader, settings_loader])\n        select_loader = SelectLoader(\n            choice_loader, {\"bundled\": settings_loader, \"file\": file_system_loader}\n        )\n        return RelEnvironment(loader=select_loader, extensions=[SnippetExtension])",
  "diff_func": "--- func_before\n+++ func_after\n def _init_script_templating(self):\n-        from jinja2 import BaseLoader, ChoiceLoader, Environment, TemplateNotFound\n+        from jinja2 import BaseLoader, ChoiceLoader, TemplateNotFound\n         from jinja2.ext import Extension\n         from jinja2.nodes import Include\n+        from jinja2.sandbox import SandboxedEnvironment\n \n         from octoprint.util.jinja import FilteredFileSystemLoader\n \n         class SnippetExtension(Extension):\n             tags = {\"snippet\"}\n             fields = Include.fields\n \n             def parse(self, parser):\n                 node = parser.parse_include()\n                 if not node.template.value.startswith(\"/\"):\n                     node.template.value = \"snippets/\" + node.template.value\n                 return node\n \n         class SettingsScriptLoader(BaseLoader):\n             def __init__(self, s):\n                 self._settings = s\n \n             def get_source(self, environment, template):\n                 parts = template.split(\"/\")\n                 if not len(parts):\n                     raise TemplateNotFound(template)\n \n                 script = self._settings.get([\"scripts\"], merged=True)\n                 for part in parts:\n                     if isinstance(script, dict) and part in script:\n                         script = script[part]\n                     else:\n                         raise TemplateNotFound(template)\n                 source = script\n                 if source is None:\n                     raise TemplateNotFound(template)\n                 mtime = self._settings._mtime\n                 return source, None, lambda: mtime == self._settings.last_modified\n \n             def list_templates(self):\n                 scripts = self._settings.get([\"scripts\"], merged=True)\n                 return self._get_templates(scripts)\n \n             def _get_templates(self, scripts):\n                 templates = []\n                 for key in scripts:\n                     if isinstan",
  "diff_source": "custom"
}