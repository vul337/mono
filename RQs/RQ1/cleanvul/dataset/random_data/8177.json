{
  "id": 8177,
  "language": "JavaScript",
  "commit_url": "https://github.com/mpetroff/pannellum/commit/cc2f3d99953de59db908e0c6efd1c2c17f7c6914",
  "commit_sha": "cc2f3d99953de59db908e0c6efd1c2c17f7c6914",
  "commit_msg": "Merge pull request from GHSA-m52x-29pq-w3vv\n\nFix potential XSS vulnerability",
  "pr_url": null,
  "pr_info": "no more info",
  "file_name": "src/js/pannellum.js",
  "func_name": "processOptions",
  "func_before": "function processOptions(isPreview) {\n    isPreview = isPreview ? isPreview : false;\n\n    // Process preview first so it always loads before the browser hits its\n    // maximum number of connections to a server as can happen with cubic\n    // panoramas\n    if (isPreview && 'preview' in config) {\n        var p = config.preview;\n        if (config.basePath && !absoluteURL(p))\n            p = config.basePath + p;\n        preview = document.createElement('div');\n        preview.className = 'pnlm-preview-img';\n        preview.style.backgroundImage = \"url('\" + sanitizeURLForCss(p) + \"')\";\n        renderContainer.appendChild(preview);\n    }\n\n    // Handle different preview values\n    var title = config.title,\n        author = config.author;\n    if (isPreview) {\n        if ('previewTitle' in config)\n            config.title = config.previewTitle;\n        if ('previewAuthor' in config)\n            config.author = config.previewAuthor;\n    }\n\n    // Reset title / author display\n    if (!config.hasOwnProperty('title'))\n        infoDisplay.title.innerHTML = '';\n    if (!config.hasOwnProperty('author'))\n        infoDisplay.author.innerHTML = '';\n    if (!config.hasOwnProperty('title') && !config.hasOwnProperty('author'))\n        infoDisplay.container.style.display = 'none';\n\n    // Fill in load button label and loading box text\n    controls.load.innerHTML = '<p>' + config.strings.loadButtonLabel + '</p>';\n    infoDisplay.load.boxp.innerHTML = config.strings.loadingLabel;\n\n    // Process other options\n    for (var key in config) {\n      if (config.hasOwnProperty(key)) {\n        switch(key) {\n            case 'title':\n                infoDisplay.title.innerHTML = escapeHTML(config[key]);\n                infoDisplay.container.style.display = 'inline';\n                break;\n            \n            case 'author':\n                var authorText = escapeHTML(config[key]);\n                if (config.authorURL) {\n                    var authorLink = document.createElement('a');\n                    authorLink.href = sanitizeURL(config['authorURL']);\n                    authorLink.target = '_blank';\n                    authorLink.innerHTML = escapeHTML(config[key]);\n                    authorText = authorLink.outerHTML;\n                }\n                infoDisplay.author.innerHTML = config.strings.bylineLabel.replace('%s', authorText);\n                infoDisplay.container.style.display = 'inline';\n                break;\n            \n            case 'fallback':\n                var link = document.createElement('a');\n                link.href = sanitizeURL(config[key]);\n                link.target = '_blank';\n                link.textContent = 'Click here to view this panorama in an alternative viewer.';\n                var message = document.createElement('p');\n                message.textContent = 'Your browser does not support WebGL.';\n                message.appendChild(document.createElement('br'));\n                message.appendChild(link);\n                infoDisplay.errorMsg.innerHTML = ''; // Removes all children nodes\n                infoDisplay.errorMsg.appendChild(message);\n                break;\n            \n            case 'hfov':\n                setHfov(Number(config[key]));\n                break;\n            \n            case 'autoLoad':\n                if (config[key] === true && renderer === undefined) {\n                    // Show loading box\n                    infoDisplay.load.box.style.display = 'inline';\n                    // Hide load button\n                    controls.load.style.display = 'none';\n                    // Initialize\n                    init();\n                }\n                break;\n            \n            case 'showZoomCtrl':\n                if (config[key] && config.showControls != false) {\n                    // Show zoom controls\n                    controls.zoom.style.display = 'block';\n                } else {\n                    // Hide zoom controls\n                    controls.zoom.style.display = 'none';\n                }\n                break;\n\n            case 'showFullscreenCtrl':\n                if (config[key] && config.showControls != false && ('fullscreen' in document || 'mozFullScreen' in document ||\n                    'webkitIsFullScreen' in document || 'msFullscreenElement' in document)) {\n                    \n                    // Show fullscreen control\n                    controls.fullscreen.style.display = 'block';\n                } else {\n                    // Hide fullscreen control\n                    controls.fullscreen.style.display = 'none';\n                }\n                break;\n\n            case 'hotSpotDebug':\n                if (config[key])\n                    hotSpotDebugIndicator.style.display = 'block';\n                else\n                    hotSpotDebugIndicator.style.display = 'none';\n                break;\n\n            case 'showControls':\n                if (!config[key]) {\n                    controls.orientation.style.display = 'none';\n                    controls.zoom.style.display = 'none';\n                    controls.fullscreen.style.display = 'none';\n                }\n                break;\n\n            case 'orientationOnByDefault':\n                if (config[key])\n                    startOrientation();\n                break;\n        }\n      }\n    }\n\n    if (isPreview) {\n        // Restore original values if changed for preview\n        if (title)\n            config.title = title;\n        else\n            delete config.title;\n        if (author)\n            config.author = author;\n        else\n            delete config.author;\n    }\n}",
  "func_after": "function processOptions(isPreview) {\n    isPreview = isPreview ? isPreview : false;\n\n    // Process preview first so it always loads before the browser hits its\n    // maximum number of connections to a server as can happen with cubic\n    // panoramas\n    if (isPreview && 'preview' in config) {\n        var p = config.preview;\n        if (config.basePath && !absoluteURL(p))\n            p = config.basePath + p;\n        preview = document.createElement('div');\n        preview.className = 'pnlm-preview-img';\n        preview.style.backgroundImage = \"url('\" + sanitizeURLForCss(p) + \"')\";\n        renderContainer.appendChild(preview);\n    }\n\n    // Handle different preview values\n    var title = config.title,\n        author = config.author;\n    if (isPreview) {\n        if ('previewTitle' in config)\n            config.title = config.previewTitle;\n        if ('previewAuthor' in config)\n            config.author = config.previewAuthor;\n    }\n\n    // Reset title / author display\n    if (!config.hasOwnProperty('title'))\n        infoDisplay.title.innerHTML = '';\n    if (!config.hasOwnProperty('author'))\n        infoDisplay.author.innerHTML = '';\n    if (!config.hasOwnProperty('title') && !config.hasOwnProperty('author'))\n        infoDisplay.container.style.display = 'none';\n\n    // Fill in load button label and loading box text\n    controls.load.innerHTML = '<p>' + config.strings.loadButtonLabel + '</p>';\n    infoDisplay.load.boxp.innerHTML = config.strings.loadingLabel;\n\n    // Process other options\n    for (var key in config) {\n      if (config.hasOwnProperty(key)) {\n        switch(key) {\n            case 'title':\n                infoDisplay.title.innerHTML = escapeHTML(config[key]);\n                infoDisplay.container.style.display = 'inline';\n                break;\n            \n            case 'author':\n                var authorText = escapeHTML(config[key]);\n                if (config.authorURL) {\n                    var authorLink = document.createElement('a');\n                    authorLink.href = sanitizeURL(config['authorURL'], true);\n                    authorLink.target = '_blank';\n                    authorLink.innerHTML = escapeHTML(config[key]);\n                    authorText = authorLink.outerHTML;\n                }\n                infoDisplay.author.innerHTML = config.strings.bylineLabel.replace('%s', authorText);\n                infoDisplay.container.style.display = 'inline';\n                break;\n            \n            case 'fallback':\n                var link = document.createElement('a');\n                link.href = sanitizeURL(config[key], true);\n                link.target = '_blank';\n                link.textContent = 'Click here to view this panorama in an alternative viewer.';\n                var message = document.createElement('p');\n                message.textContent = 'Your browser does not support WebGL.';\n                message.appendChild(document.createElement('br'));\n                message.appendChild(link);\n                infoDisplay.errorMsg.innerHTML = ''; // Removes all children nodes\n                infoDisplay.errorMsg.appendChild(message);\n                break;\n            \n            case 'hfov':\n                setHfov(Number(config[key]));\n                break;\n            \n            case 'autoLoad':\n                if (config[key] === true && renderer === undefined) {\n                    // Show loading box\n                    infoDisplay.load.box.style.display = 'inline';\n                    // Hide load button\n                    controls.load.style.display = 'none';\n                    // Initialize\n                    init();\n                }\n                break;\n            \n            case 'showZoomCtrl':\n                if (config[key] && config.showControls != false) {\n                    // Show zoom controls\n                    controls.zoom.style.display = 'block';\n                } else {\n                    // Hide zoom controls\n                    controls.zoom.style.display = 'none';\n                }\n                break;\n\n            case 'showFullscreenCtrl':\n                if (config[key] && config.showControls != false && ('fullscreen' in document || 'mozFullScreen' in document ||\n                    'webkitIsFullScreen' in document || 'msFullscreenElement' in document)) {\n                    \n                    // Show fullscreen control\n                    controls.fullscreen.style.display = 'block';\n                } else {\n                    // Hide fullscreen control\n                    controls.fullscreen.style.display = 'none';\n                }\n                break;\n\n            case 'hotSpotDebug':\n                if (config[key])\n                    hotSpotDebugIndicator.style.display = 'block';\n                else\n                    hotSpotDebugIndicator.style.display = 'none';\n                break;\n\n            case 'showControls':\n                if (!config[key]) {\n                    controls.orientation.style.display = 'none';\n                    controls.zoom.style.display = 'none';\n                    controls.fullscreen.style.display = 'none';\n                }\n                break;\n\n            case 'orientationOnByDefault':\n                if (config[key])\n                    startOrientation();\n                break;\n        }\n      }\n    }\n\n    if (isPreview) {\n        // Restore original values if changed for preview\n        if (title)\n            config.title = title;\n        else\n            delete config.title;\n        if (author)\n            config.author = author;\n        else\n            delete config.author;\n    }\n}",
  "diff_func": "--- func_before\n+++ func_after\n function processOptions(isPreview) {\n     isPreview = isPreview ? isPreview : false;\n \n     // Process preview first so it always loads before the browser hits its\n     // maximum number of connections to a server as can happen with cubic\n     // panoramas\n     if (isPreview && 'preview' in config) {\n         var p = config.preview;\n         if (config.basePath && !absoluteURL(p))\n             p = config.basePath + p;\n         preview = document.createElement('div');\n         preview.className = 'pnlm-preview-img';\n         preview.style.backgroundImage = \"url('\" + sanitizeURLForCss(p) + \"')\";\n         renderContainer.appendChild(preview);\n     }\n \n     // Handle different preview values\n     var title = config.title,\n         author = config.author;\n     if (isPreview) {\n         if ('previewTitle' in config)\n             config.title = config.previewTitle;\n         if ('previewAuthor' in config)\n             config.author = config.previewAuthor;\n     }\n \n     // Reset title / author display\n     if (!config.hasOwnProperty('title'))\n         infoDisplay.title.innerHTML = '';\n     if (!config.hasOwnProperty('author'))\n         infoDisplay.author.innerHTML = '';\n     if (!config.hasOwnProperty('title') && !config.hasOwnProperty('author'))\n         infoDisplay.container.style.display = 'none';\n \n     // Fill in load button label and loading box text\n     controls.load.innerHTML = '<p>' + config.strings.loadButtonLabel + '</p>';\n     infoDisplay.load.boxp.innerHTML = config.strings.loadingLabel;\n \n     // Process other options\n     for (var key in config) {\n       if (config.hasOwnProperty(key)) {\n         switch(key) {\n             case 'title':\n                 infoDisplay.title.innerHTML = escapeHTML(config[key]);\n                 infoDisplay.container.style.display = 'inline';\n                 break;\n             \n             case 'author':\n                 var authorText = escapeHTML(config[key]);\n                 if (config.author",
  "diff_source": "custom"
}