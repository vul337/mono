{
  "id": 2663,
  "language": "Java",
  "commit_url": "https://github.com/oracle/coherence/commit/c0b0c2cdebdc04908f359d88b187083cc979d3e1",
  "commit_sha": "c0b0c2cdebdc04908f359d88b187083cc979d3e1",
  "commit_msg": "Bug 32470544 - [32421840->14.1.1.0.6-CE] T3 AND IIOP DESERIALIZATION - DOS ATTACKS BY CONSTRUCTING MALICIOUS BYTECODE. \nRQ: http://home.us.oracle.com/internal/coherence/coherence-ce/release/coherence-ce-v14.1.1.0/job.jsp?id=job.9.20210721215426.21598\n\n[git-p4: depot-paths = \"//dev/coherence-ce/release/coherence-ce-v14.1.1.0/\": change = 87310]",
  "pr_url": null,
  "pr_info": "no more info",
  "file_name": "prj/coherence-core/src/main/java/com/tangosol/util/ExternalizableHelper.java",
  "func_name": "readFloatArray",
  "func_before": "public static float[] readFloatArray(DataInput in)\n            throws IOException\n        {\n        float[] afl;\n\n        if (in instanceof PofInputStream)\n            {\n            afl = (float[]) ((PofInputStream) in).readObject();\n            }\n        else\n            {\n            int cfl = in.readInt();\n                afl = new float[cfl];\n\n            if (cfl > 0)\n                {\n                byte[] ab = new byte[cfl << 2];\n                in.readFully(ab);\n\n                for (int i = 0, of = 0; i < cfl; i++)\n                    {\n                    // Unfortunately we cannot win this battle:\n                    // the standard serialization goes native and does not\n                    // do any conversion at all:\n                    //\n                    // ival = ((bytes[srcpos + 0] & 0xFF) << 24) +\n                    //        ((bytes[srcpos + 1] & 0xFF) << 16) +\n                    //        ((bytes[srcpos + 2] & 0xFF) << 8) +\n                    //        ((bytes[srcpos + 3] & 0xFF) << 0);\n                    //  u.i = (long) ival;\n                    //  floats[dstpos] = (jfloat) u.f;\n\n                    int iValue =\n                         ((ab[of++] & 0xff) << 24) +\n                         ((ab[of++] & 0xff) << 16) +\n                         ((ab[of++] & 0xff) <<  8) +\n                         ((ab[of++] & 0xff));\n\n                    afl[i] = Float.intBitsToFloat(iValue);\n                    }\n                }\n            }\n\n        return afl;\n        }",
  "func_after": "public static float[] readFloatArray(DataInput in)\n            throws IOException\n        {\n        float[] afl;\n\n        if (in instanceof PofInputStream)\n            {\n            afl = (float[]) ((PofInputStream) in).readObject();\n            }\n        else\n            {\n            int cfl = in.readInt();\n\n            afl = cfl < CHUNK_THRESHOLD >> 2\n                    ? readFloatArray(in, cfl)\n                    : readLargeFloatArray(in, cfl);\n            }\n\n        return afl;\n        }",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1792 +1799 @@\n+                    ? readFloatArray(in, cfl)\n+                    : readLargeFloatArray(in, cfl);\n }\n@@ -5778 +5747 @@\n+    protected static float[] readFloatArray(DataInput in, int cfl)\n+            throws IOException\n+        {\n+        byte[] ab = new byte[cfl << 2];\n+        in.readFully(ab);\n+\n+        float[] afl = new float[cfl];\n+        for (int i = 0, of = 0; i < cfl; i++)\n+            {\n+            // Unfortunately we cannot win this battle:\n+            // the standard serialization goes native and does not\n+            // do any conversion at all:\n+            //\n+            // ival = ((bytes[srcpos + 0] & 0xFF) << 24) +\n+            //        ((bytes[srcpos + 1] & 0xFF) << 16) +\n+            //        ((bytes[srcpos + 2] & 0xFF) << 8) +\n+            //        ((bytes[srcpos + 3] & 0xFF) << 0);\n+            //  u.i = (long) ival;\n+            //  floats[dstpos] = (jfloat) u.f;\n+\n+            int iValue =\n+                    ((ab[of++] & 0xff) << 24) +\n+                            ((ab[of++] & 0xff) << 16) +\n+                            ((ab[of++] & 0xff) <<  8) +\n+                            ((ab[of++] & 0xff));\n+\n+            afl[i] = Float.intBitsToFloat(iValue);\n+            }\n+\n+        return afl;\n+        }",
  "diff_source": "api"
}