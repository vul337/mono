{
  "id": 4169,
  "language": "Python",
  "commit_url": "https://github.com/freedomofpress/dangerzone/commit/72536a05ac3e6114ccd1261dac64c46041fff6b8",
  "commit_sha": "72536a05ac3e6114ccd1261dac64c46041fff6b8",
  "commit_msg": "container: Improve parsing of progress reports\n\nImprove the `parse_progress()` method of the container isolation\nprovider in the following ways:\n\n1. Make sure that the fields of the progress report have the expected\n   type.\n2. In case of a JSON parsing error, sanitize the invalid string so that\n   it doesn't contain escape sequences, or the user considers it as\n   trusted.",
  "pr_url": "https://github.com/freedomofpress/dangerzone/pull/491",
  "pr_info": "Sanitize the output that the container/disposable VM sends back to the user, before displaying it on screen/terminal. Also tackle some issues that are closely related to the sanitization logic, and add some tests.",
  "file_name": "dangerzone/isolation_provider/container.py",
  "func_name": "parse_progress",
  "func_before": "def parse_progress(self, document: Document, line: str) -> None:\n        \"\"\"\n        Parses a line returned by the container.\n        \"\"\"\n        try:\n            status = json.loads(line)\n            self.print_progress(\n                document, status[\"error\"], status[\"text\"], status[\"percentage\"]\n            )\n        except:\n            error_message = f\"Invalid JSON returned from container:\\n\\n\\t {line}\"\n            log.error(error_message)\n            self.print_progress(document, True, error_message, -1)",
  "func_after": "def parse_progress(self, document: Document, untrusted_line: str) -> None:\n        \"\"\"\n        Parses a line returned by the container.\n        \"\"\"\n        try:\n            untrusted_status = json.loads(untrusted_line)\n\n            text = untrusted_status[\"text\"]\n            self.assert_field_type(text, str)\n\n            error = untrusted_status[\"error\"]\n            self.assert_field_type(error, bool)\n\n            percentage = untrusted_status[\"percentage\"]\n            self.assert_field_type(percentage, int)\n\n            self.print_progress(document, error, text, percentage)\n        except Exception:\n            line = replace_control_chars(untrusted_line)\n            error_message = (\n                f\"Invalid JSON returned from container:\\n\\n\\tUNTRUSTED> {line}\"\n            )\n            self.print_progress_trusted(document, True, error_message, -1)",
  "diff_func": "--- func_before\n+++ func_after\n@@ -133 +138 @@\n-    def parse_progress(self, document: Document, line: str) -> None:\n+    def assert_field_type(self, val: Any, _type: object) -> None:\n+        # XXX: Use a stricter check than isinstance because `bool` is a subclass of\n+        # `int`.\n+        #\n+        # See https://stackoverflow.com/a/37888668\n+        if not type(val) == _type:\n+            raise ValueError(\"Status field has incorrect type\")\n+\n+    def parse_progress(self, document: Document, untrusted_line: str) -> None:\n \"\"\"\n Parses a line returned by the container.\n \"\"\"\n-            status = json.loads(line)\n-            self.print_progress(\n-                document, status[\"error\"], status[\"text\"], status[\"percentage\"]\n+            untrusted_status = json.loads(untrusted_line)\n+\n+            text = untrusted_status[\"text\"]\n+            self.assert_field_type(text, str)\n+\n+            error = untrusted_status[\"error\"]\n+            self.assert_field_type(error, bool)\n+\n+            percentage = untrusted_status[\"percentage\"]\n+            self.assert_field_type(percentage, int)\n+\n+            self.print_progress(document, error, text, percentage)\n+        except Exception:\n+            line = replace_control_chars(untrusted_line)\n+            error_message = (\n+                f\"Invalid JSON returned from container:\\n\\n\\tUNTRUSTED> {line}\"\n )\n-        except:\n-            error_message = f\"Invalid JSON returned from container:\\n\\n\\t {line}\"\n-            log.error(error_message)\n-            self.print_progress(document, True, error_message, -1)\n+            self.print_progress_trusted(document, True, error_message, -1)\n \n def exec(\n self,",
  "diff_source": "api"
}