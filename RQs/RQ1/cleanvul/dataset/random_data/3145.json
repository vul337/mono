{
  "id": 3145,
  "language": "Java",
  "commit_url": "https://github.com/dogtagpki/pki/commit/b9db71b98480f6ba47e66dd6cde1d9dfec80eb66",
  "commit_sha": "b9db71b98480f6ba47e66dd6cde1d9dfec80eb66",
  "commit_msg": "Bug1990105- TPS Not properly enforcing Token Profile Separation\n\nThis patch addresses the issue that TPS agent operations on tokens, activities, and profiles are not limited by the types (profiles) permmtted to the agent (as described in the documentation). This is a regression from 8.x.\n\nThe affected operations are:\n - findProfiles\n - getProfiles\n - updateProfile\n - changeStatus (of a profile)\n - retrieveTokens\n - getToken\n - modifyToken\n - changeTokenStatus\n - retrieveActivities\n - getActivity\n\nNote that some operations that seem like should be affected are not\ndue to the fact that they are TPS admin operations and are shielded\nfrom entering the TPS service at the activity level.  For example,\ndeleting a token would be such a case.\n\nThe authorization enforcement added in this patch should affect both\naccess from the web UI as well as access from PKI CLI.\nReference: https://github.com/dogtagpki/pki/wiki/PKI-TPS-CLI\n\nAnother note: the VLV complicates the resulting page.  If the returned\nentries on the page are all restricted then nothing would be shown.  To\nadd a bit more clarity, an <restricted> entry is added to reflect such\neffect so that it would be less confusing to the role user.\nThe <restricted> entries are left with the epoch date.\nThis would affect both WEB UI and PKI CLI.\n\nAlso, a list minute addition to address an issue with 1911472 in\nCertService.java where the subject DN of the CA signing cert should\nbe used instead of the issuer.\n\nfixes https://bugzilla.redhat.com/show_bug.cgi?id=1990105",
  "pr_url": null,
  "pr_info": "no more info",
  "file_name": "base/tps/src/main/java/org/dogtagpki/server/tps/rest/TPSProfileService.java",
  "func_name": "findProfiles",
  "func_before": "@Override\n    public Response findProfiles(String filter, Integer start, Integer size) {\n\n        logger.info(\"TPSProfileService: Searching for profiles with filter \" + filter);\n\n        if (filter != null && filter.length() < MIN_FILTER_LENGTH) {\n            throw new BadRequestException(\"Filter is too short.\");\n        }\n\n        start = start == null ? 0 : start;\n        size = size == null ? DEFAULT_SIZE : size;\n\n        org.dogtagpki.server.tps.TPSEngine engine = org.dogtagpki.server.tps.TPSEngine.getInstance();\n        try {\n            TPSSubsystem subsystem = (TPSSubsystem) engine.getSubsystem(TPSSubsystem.ID);\n            ProfileDatabase database = subsystem.getProfileDatabase();\n\n            Iterator<ProfileRecord> profiles = database.findRecords(filter).iterator();\n\n            ProfileCollection response = new ProfileCollection();\n            int i = 0;\n\n            // skip to the start of the page\n            for (; i < start && profiles.hasNext(); i++)\n                profiles.next();\n\n            // return entries up to the page size\n            for (; i < start + size && profiles.hasNext(); i++) {\n                response.addEntry(createProfileData(profiles.next()));\n            }\n\n            // count the total entries\n            for (; profiles.hasNext(); i++)\n                profiles.next();\n            response.setTotal(i);\n\n            if (start > 0) {\n                URI uri = uriInfo.getRequestUriBuilder().replaceQueryParam(\"start\", Math.max(start - size, 0)).build();\n                response.addLink(new Link(\"prev\", uri));\n            }\n\n            if (start + size < i) {\n                URI uri = uriInfo.getRequestUriBuilder().replaceQueryParam(\"start\", start + size).build();\n                response.addLink(new Link(\"next\", uri));\n            }\n\n            return createOKResponse(response);\n\n        } catch (PKIException e) {\n            logger.error(\"TPSProfileService: \" + e.getMessage(), e);\n            throw e;\n\n        } catch (Exception e) {\n            logger.error(\"TPSProfileService: \" + e.getMessage(), e);\n            throw new PKIException(e);\n        }\n    }",
  "func_after": "@Override\n    public Response findProfiles(String filter, Integer start, Integer size) {\n\n        String method = \"TPSProfileService.findProfiles: \";\n\n        if (filter != null && filter.length() < MIN_FILTER_LENGTH) {\n            throw new BadRequestException(method + \"Filter is too short.\");\n        }\n        logger.info(method + \"Searching for profiles with filter \" + filter);\n\n        start = start == null ? 0 : start;\n        size = size == null ? DEFAULT_SIZE : size;\n\n        org.dogtagpki.server.tps.TPSEngine engine = org.dogtagpki.server.tps.TPSEngine.getInstance();\n        try {\n            List<String> authorizedProfiles = getAuthorizedProfiles();\n            TPSSubsystem subsystem = (TPSSubsystem) engine.getSubsystem(TPSSubsystem.ID);\n            ProfileDatabase database = subsystem.getProfileDatabase();\n\n            Collection<ProfileRecord> profiles = new ArrayList<>();\n            if (authorizedProfiles != null) {\n\n                Collection<ProfileRecord> filteredProfiles = database.findRecords(filter);\n\n                if (authorizedProfiles.contains(UserResource.ALL_PROFILES)) {\n                    logger.debug(method + \"User allowed to access all profiles\");\n                    profiles.addAll(filteredProfiles);\n\n                } else {\n                    for (ProfileRecord profile : filteredProfiles) {\n                        if (authorizedProfiles.contains(profile.getID())) {\n                            logger.debug(method + \"User allowed to access profile \" + profile.getID());\n                            profiles.add(profile);\n                        }\n                    }\n                }\n            }\n            Iterator<ProfileRecord> profileIterator = profiles.iterator();\n\n            ProfileCollection response = new ProfileCollection();\n            int i = 0;\n\n            // skip to the start of the page\n            for (; i < start && profileIterator.hasNext(); i++)\n                profileIterator.next();\n\n            // return entries up to the page size\n            for (; i < start + size && profileIterator.hasNext(); i++) {\n                response.addEntry(createProfileData(profileIterator.next()));\n            }\n\n            // count the total entries\n            for (; profileIterator.hasNext(); i++)\n                profileIterator.next();\n            response.setTotal(i);\n\n            if (start > 0) {\n                URI uri = uriInfo.getRequestUriBuilder().replaceQueryParam(\"start\", Math.max(start - size, 0)).build();\n                response.addLink(new Link(\"prev\", uri));\n            }\n\n            if (start + size < i) {\n                URI uri = uriInfo.getRequestUriBuilder().replaceQueryParam(\"start\", start + size).build();\n                response.addLink(new Link(\"next\", uri));\n            }\n\n            return createOKResponse(response);\n\n        } catch (PKIException e) {\n            logger.error(method + e.getMessage(), e);\n            throw e;\n\n        } catch (Exception e) {\n            logger.error(method + e.getMessage(), e);\n            throw new PKIException(e);\n        }\n    }",
  "diff_func": "--- func_before\n+++ func_after\n@@ -87 +94 @@\n public Response findProfiles(String filter, Integer start, Integer size) {\n \n-        logger.info(\"TPSProfileService: Searching for profiles with filter \" + filter);\n+        String method = \"TPSProfileService.findProfiles: \";\n \n if (filter != null && filter.length() < MIN_FILTER_LENGTH) {\n-            throw new BadRequestException(\"Filter is too short.\");\n+            throw new BadRequestException(method + \"Filter is too short.\");\n }\n+        logger.info(method + \"Searching for profiles with filter \" + filter);\n \n start = start == null ? 0 : start;\n size = size == null ? DEFAULT_SIZE : size;\n+            List<String> authorizedProfiles = getAuthorizedProfiles();\n TPSSubsystem subsystem = (TPSSubsystem) engine.getSubsystem(TPSSubsystem.ID);\n ProfileDatabase database = subsystem.getProfileDatabase();\n \n-            Iterator<ProfileRecord> profiles = database.findRecords(filter).iterator();\n+            Collection<ProfileRecord> profiles = new ArrayList<>();\n+            if (authorizedProfiles != null) {\n+\n+                Collection<ProfileRecord> filteredProfiles = database.findRecords(filter);\n+\n+                if (authorizedProfiles.contains(UserResource.ALL_PROFILES)) {\n+                    logger.debug(method + \"User allowed to access all profiles\");\n+                    profiles.addAll(filteredProfiles);\n+\n+                } else {\n+                    for (ProfileRecord profile : filteredProfiles) {\n+                        if (authorizedProfiles.contains(profile.getID())) {\n+                            logger.debug(method + \"User allowed to access profile \" + profile.getID());\n+                            profiles.add(profile);\n+                        }\n+                    }\n+                }\n+            }\n+            Iterator<ProfileRecord> profileIterator = profiles.iterator();\n \n ProfileCollection response = new ProfileCollection();\n int i = 0;\n-            for (; i < start && profiles.hasNext(); i++)\n-  ",
  "diff_source": "api"
}