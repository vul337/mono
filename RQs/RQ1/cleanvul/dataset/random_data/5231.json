{
  "id": 5231,
  "language": "C/C++",
  "commit_url": "https://github.com/libuv/libuv/commit/2bc944faac08e8fce9188061e7514fa4379e92c4",
  "commit_sha": "2bc944faac08e8fce9188061e7514fa4379e92c4",
  "commit_msg": "win: fix unsavory rwlock fallback implementation\n\nBefore this patch an uv_mutex_t (backed by a critical section) could be\nreleased by a tread different from the thread that acquired it, which is\nnot allowed. This is fixed by using a semaphore instead.\n\nNote that the affected code paths were used on Windows XP and Windows\nServer 2003 only.\n\nThis is a back-port of commits 3eb6764, 1ad6ad7, 9a4fd26, 9823922\n85adf43 and bd1777f from the v1.x branch.\n\nFixes: https://github.com/libuv/libuv/issues/515\nRefs: https://github.com/libuv/libuv/pull/525",
  "pr_url": null,
  "pr_info": "no more info",
  "file_name": "src/win/winapi.c",
  "func_name": "uv_winapi_init",
  "func_before": "void uv_winapi_init() {\n  HMODULE ntdll_module;\n  HMODULE kernel32_module;\n\n  ntdll_module = GetModuleHandleA(\"ntdll.dll\");\n  if (ntdll_module == NULL) {\n    uv_fatal_error(GetLastError(), \"GetModuleHandleA\");\n  }\n\n  pRtlNtStatusToDosError = (sRtlNtStatusToDosError) GetProcAddress(\n      ntdll_module,\n      \"RtlNtStatusToDosError\");\n  if (pRtlNtStatusToDosError == NULL) {\n    uv_fatal_error(GetLastError(), \"GetProcAddress\");\n  }\n\n  pNtQueryInformationFile = (sNtQueryInformationFile) GetProcAddress(\n      ntdll_module,\n      \"NtQueryInformationFile\");\n  if (pNtQueryInformationFile == NULL) {\n    uv_fatal_error(GetLastError(), \"GetProcAddress\");\n  }\n\n  pNtDeviceIoControlFile = (sNtDeviceIoControlFile) GetProcAddress(\n      ntdll_module,\n      \"NtDeviceIoControlFile\");\n  if (pNtDeviceIoControlFile == NULL) {\n    uv_fatal_error(GetLastError(), \"GetProcAddress\");\n  }\n\n  pNtSetInformationFile = (sNtSetInformationFile) GetProcAddress(\n      ntdll_module,\n      \"NtSetInformationFile\");\n  if (pNtSetInformationFile == NULL) {\n    uv_fatal_error(GetLastError(), \"GetProcAddress\");\n  }\n\n  pNtQuerySystemInformation = (sNtQuerySystemInformation) GetProcAddress(\n      ntdll_module,\n      \"NtQuerySystemInformation\");\n  if (pNtQuerySystemInformation == NULL) {\n    uv_fatal_error(GetLastError(), \"GetProcAddress\");\n  }\n\n  kernel32_module = GetModuleHandleA(\"kernel32.dll\");\n  if (kernel32_module == NULL) {\n    uv_fatal_error(GetLastError(), \"GetModuleHandleA\");\n  }\n\n  pGetQueuedCompletionStatusEx = (sGetQueuedCompletionStatusEx) GetProcAddress(\n      kernel32_module,\n      \"GetQueuedCompletionStatusEx\");\n\n  pSetFileCompletionNotificationModes = (sSetFileCompletionNotificationModes)\n    GetProcAddress(kernel32_module, \"SetFileCompletionNotificationModes\");\n\n  pCreateSymbolicLinkW = (sCreateSymbolicLinkW)\n    GetProcAddress(kernel32_module, \"CreateSymbolicLinkW\");\n\n  pCancelIoEx = (sCancelIoEx)\n    GetProcAddress(kernel32_module, \"CancelIoEx\");\n\n  pInitializeSRWLock = (sInitializeSRWLock)\n    GetProcAddress(kernel32_module, \"InitializeSRWLock\");\n\n  pAcquireSRWLockShared = (sAcquireSRWLockShared)\n    GetProcAddress(kernel32_module, \"AcquireSRWLockShared\");\n\n  pAcquireSRWLockExclusive = (sAcquireSRWLockExclusive)\n    GetProcAddress(kernel32_module, \"AcquireSRWLockExclusive\");\n\n  pTryAcquireSRWLockShared = (sTryAcquireSRWLockShared)\n    GetProcAddress(kernel32_module, \"TryAcquireSRWLockShared\");\n\n  pTryAcquireSRWLockExclusive = (sTryAcquireSRWLockExclusive)\n    GetProcAddress(kernel32_module, \"TryAcquireSRWLockExclusive\");\n\n  pReleaseSRWLockShared = (sReleaseSRWLockShared)\n    GetProcAddress(kernel32_module, \"ReleaseSRWLockShared\");\n\n  pReleaseSRWLockExclusive = (sReleaseSRWLockExclusive)\n    GetProcAddress(kernel32_module, \"ReleaseSRWLockExclusive\");\n\n  pInitializeConditionVariable = (sInitializeConditionVariable)\n    GetProcAddress(kernel32_module, \"InitializeConditionVariable\");\n\n  pSleepConditionVariableCS = (sSleepConditionVariableCS)\n    GetProcAddress(kernel32_module, \"SleepConditionVariableCS\");\n\n  pSleepConditionVariableSRW = (sSleepConditionVariableSRW)\n    GetProcAddress(kernel32_module, \"SleepConditionVariableSRW\");\n\n  pWakeAllConditionVariable = (sWakeAllConditionVariable)\n    GetProcAddress(kernel32_module, \"WakeAllConditionVariable\");\n\n  pWakeConditionVariable = (sWakeConditionVariable)\n    GetProcAddress(kernel32_module, \"WakeConditionVariable\");\n}",
  "func_after": "void uv_winapi_init() {\n  HMODULE ntdll_module;\n  HMODULE kernel32_module;\n\n  ntdll_module = GetModuleHandleA(\"ntdll.dll\");\n  if (ntdll_module == NULL) {\n    uv_fatal_error(GetLastError(), \"GetModuleHandleA\");\n  }\n\n  pRtlNtStatusToDosError = (sRtlNtStatusToDosError) GetProcAddress(\n      ntdll_module,\n      \"RtlNtStatusToDosError\");\n  if (pRtlNtStatusToDosError == NULL) {\n    uv_fatal_error(GetLastError(), \"GetProcAddress\");\n  }\n\n  pNtQueryInformationFile = (sNtQueryInformationFile) GetProcAddress(\n      ntdll_module,\n      \"NtQueryInformationFile\");\n  if (pNtQueryInformationFile == NULL) {\n    uv_fatal_error(GetLastError(), \"GetProcAddress\");\n  }\n\n  pNtDeviceIoControlFile = (sNtDeviceIoControlFile) GetProcAddress(\n      ntdll_module,\n      \"NtDeviceIoControlFile\");\n  if (pNtDeviceIoControlFile == NULL) {\n    uv_fatal_error(GetLastError(), \"GetProcAddress\");\n  }\n\n  pNtSetInformationFile = (sNtSetInformationFile) GetProcAddress(\n      ntdll_module,\n      \"NtSetInformationFile\");\n  if (pNtSetInformationFile == NULL) {\n    uv_fatal_error(GetLastError(), \"GetProcAddress\");\n  }\n\n  pNtQuerySystemInformation = (sNtQuerySystemInformation) GetProcAddress(\n      ntdll_module,\n      \"NtQuerySystemInformation\");\n  if (pNtQuerySystemInformation == NULL) {\n    uv_fatal_error(GetLastError(), \"GetProcAddress\");\n  }\n\n  kernel32_module = GetModuleHandleA(\"kernel32.dll\");\n  if (kernel32_module == NULL) {\n    uv_fatal_error(GetLastError(), \"GetModuleHandleA\");\n  }\n\n  pGetQueuedCompletionStatusEx = (sGetQueuedCompletionStatusEx) GetProcAddress(\n      kernel32_module,\n      \"GetQueuedCompletionStatusEx\");\n\n  pSetFileCompletionNotificationModes = (sSetFileCompletionNotificationModes)\n    GetProcAddress(kernel32_module, \"SetFileCompletionNotificationModes\");\n\n  pCreateSymbolicLinkW = (sCreateSymbolicLinkW)\n    GetProcAddress(kernel32_module, \"CreateSymbolicLinkW\");\n\n  pCancelIoEx = (sCancelIoEx)\n    GetProcAddress(kernel32_module, \"CancelIoEx\");\n\n  pInitializeConditionVariable = (sInitializeConditionVariable)\n    GetProcAddress(kernel32_module, \"InitializeConditionVariable\");\n\n  pSleepConditionVariableCS = (sSleepConditionVariableCS)\n    GetProcAddress(kernel32_module, \"SleepConditionVariableCS\");\n\n  pSleepConditionVariableSRW = (sSleepConditionVariableSRW)\n    GetProcAddress(kernel32_module, \"SleepConditionVariableSRW\");\n\n  pWakeAllConditionVariable = (sWakeAllConditionVariable)\n    GetProcAddress(kernel32_module, \"WakeAllConditionVariable\");\n\n  pWakeConditionVariable = (sWakeConditionVariable)\n    GetProcAddress(kernel32_module, \"WakeConditionVariable\");\n}",
  "diff_func": "--- func_before\n+++ func_after\n void uv_winapi_init() {\n   HMODULE ntdll_module;\n   HMODULE kernel32_module;\n \n   ntdll_module = GetModuleHandleA(\"ntdll.dll\");\n   if (ntdll_module == NULL) {\n     uv_fatal_error(GetLastError(), \"GetModuleHandleA\");\n   }\n \n   pRtlNtStatusToDosError = (sRtlNtStatusToDosError) GetProcAddress(\n       ntdll_module,\n       \"RtlNtStatusToDosError\");\n   if (pRtlNtStatusToDosError == NULL) {\n     uv_fatal_error(GetLastError(), \"GetProcAddress\");\n   }\n \n   pNtQueryInformationFile = (sNtQueryInformationFile) GetProcAddress(\n       ntdll_module,\n       \"NtQueryInformationFile\");\n   if (pNtQueryInformationFile == NULL) {\n     uv_fatal_error(GetLastError(), \"GetProcAddress\");\n   }\n \n   pNtDeviceIoControlFile = (sNtDeviceIoControlFile) GetProcAddress(\n       ntdll_module,\n       \"NtDeviceIoControlFile\");\n   if (pNtDeviceIoControlFile == NULL) {\n     uv_fatal_error(GetLastError(), \"GetProcAddress\");\n   }\n \n   pNtSetInformationFile = (sNtSetInformationFile) GetProcAddress(\n       ntdll_module,\n       \"NtSetInformationFile\");\n   if (pNtSetInformationFile == NULL) {\n     uv_fatal_error(GetLastError(), \"GetProcAddress\");\n   }\n \n   pNtQuerySystemInformation = (sNtQuerySystemInformation) GetProcAddress(\n       ntdll_module,\n       \"NtQuerySystemInformation\");\n   if (pNtQuerySystemInformation == NULL) {\n     uv_fatal_error(GetLastError(), \"GetProcAddress\");\n   }\n \n   kernel32_module = GetModuleHandleA(\"kernel32.dll\");\n   if (kernel32_module == NULL) {\n     uv_fatal_error(GetLastError(), \"GetModuleHandleA\");\n   }\n \n   pGetQueuedCompletionStatusEx = (sGetQueuedCompletionStatusEx) GetProcAddress(\n       kernel32_module,\n       \"GetQueuedCompletionStatusEx\");\n \n   pSetFileCompletionNotificationModes = (sSetFileCompletionNotificationModes)\n     GetProcAddress(kernel32_module, \"SetFileCompletionNotificationModes\");\n \n   pCreateSymbolicLinkW = (sCreateSymbolicLinkW)\n     GetProcAddress(kernel32_module, \"CreateSymbolicLinkW\");\n \n   pCancelIoEx = (sCancelIoEx)\n    ",
  "diff_source": "custom"
}