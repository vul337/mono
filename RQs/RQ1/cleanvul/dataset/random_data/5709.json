{
  "id": 5709,
  "language": "C/C++",
  "commit_url": "https://github.com/appneta/tcpreplay/commit/df18c48812462ea802d639d2477887055666ee58",
  "commit_sha": "df18c48812462ea802d639d2477887055666ee58",
  "commit_msg": "Add check after call strtok_r",
  "pr_url": "https://github.com/appneta/tcpreplay/pull/783",
  "pr_info": "Fix #782 #784 #785 #786 #787 #788",
  "file_name": "src/common/list.c",
  "func_name": "parse_list",
  "func_before": "int\nparse_list(tcpr_list_t ** listdata, char *ourstr)\n{\n    tcpr_list_t *listcur, *list_ptr;\n    char *this = NULL;\n    char *first, *second;\n    int rcode;\n    regex_t preg;\n    char regex[] = \"^[0-9]+(-[0-9]+)?$\";\n    char *token = NULL;\n    u_int i;\n\n\n    /* compile the regex first */\n    if ((rcode = regcomp(&preg, regex, REG_EXTENDED | REG_NOSUB)) != 0) {\n        char ebuf[EBUF_SIZE];\n        regerror(rcode, &preg, ebuf, sizeof(ebuf));\n        errx(-1, \"Unable to compile regex (%s): %s\", regex, ebuf);\n    }\n\n    /* first iteration */\n    this = strtok_r(ourstr, \",\", &token);\n    first = this;\n    second = NULL;\n\n    /* regex test */\n    if (regexec(&preg, this, 0, NULL, 0) != 0) {\n        warnx(\"Unable to parse: %s\", this);\n        regfree(&preg);\n        return 0;\n    }\n\n    *listdata = new_list();\n    list_ptr = *listdata;\n    listcur = list_ptr;\n\n    for (i = 0; i < strlen(this); i++) {\n        if (this[i] == '-') {\n            this[i] = '\\0';\n            second = &this[i + 1];\n        }\n    }\n\n    list_ptr->min = strtoull(first, NULL, 0);\n    if (second != NULL) {\n        list_ptr->max = strtoull(second, NULL, 0);\n    }\n    else {\n        list_ptr->max = list_ptr->min;\n    }\n\n    while (1) {\n        this = strtok_r(NULL, \",\", &token);\n        if (this == NULL)\n            break;\n\n        first = this;\n        second = NULL;\n\n\n        /* regex test */\n        if (regexec(&preg, this, 0, NULL, 0) != 0) {\n            warnx(\"Unable to parse: %s\", this);\n            regfree(&preg);\n            return 0;\n        }\n\n        listcur->next = new_list();\n        listcur = listcur->next;\n\n        for (i = 0; i < strlen(this); i++) {\n            if (this[i] == '-') {\n                this[i] = '\\0';\n                second = &this[i + 1];\n            }\n        }\n\n        listcur->min = strtoull(first, NULL, 0);\n        if (second != NULL) {\n            listcur->max = strtoull(second, NULL, 0);\n        }\n        else {\n            listcur->max = listcur->min;\n        }\n\n    }\n\n    regfree(&preg);\n\n    return 1;\n}",
  "func_after": "int\nparse_list(tcpr_list_t ** listdata, char *ourstr)\n{\n    tcpr_list_t *listcur, *list_ptr;\n    char *this = NULL;\n    char *first, *second;\n    int rcode;\n    regex_t preg;\n    char regex[] = \"^[0-9]+(-[0-9]+)?$\";\n    char *token = NULL;\n    u_int i;\n\n\n    /* compile the regex first */\n    if ((rcode = regcomp(&preg, regex, REG_EXTENDED | REG_NOSUB)) != 0) {\n        char ebuf[EBUF_SIZE];\n        regerror(rcode, &preg, ebuf, sizeof(ebuf));\n        errx(-1, \"Unable to compile regex (%s): %s\", regex, ebuf);\n    }\n\n    /* first iteration */\n    this = strtok_r(ourstr, \",\", &token);\n    first = this;\n    second = NULL;\n\n    /* regex test */\n    if (this == NULL || regexec(&preg, this, 0, NULL, 0) != 0) {\n        warnx(\"Unable to parse: %s\", this);\n        regfree(&preg);\n        return 0;\n    }\n\n    *listdata = new_list();\n    list_ptr = *listdata;\n    listcur = list_ptr;\n\n    for (i = 0; i < strlen(this); i++) {\n        if (this[i] == '-') {\n            this[i] = '\\0';\n            second = &this[i + 1];\n        }\n    }\n\n    list_ptr->min = strtoull(first, NULL, 0);\n    if (second != NULL) {\n        list_ptr->max = strtoull(second, NULL, 0);\n    }\n    else {\n        list_ptr->max = list_ptr->min;\n    }\n\n    while (1) {\n        this = strtok_r(NULL, \",\", &token);\n        if (this == NULL)\n            break;\n\n        first = this;\n        second = NULL;\n\n\n        /* regex test */\n        if (regexec(&preg, this, 0, NULL, 0) != 0) {\n            warnx(\"Unable to parse: %s\", this);\n            regfree(&preg);\n            return 0;\n        }\n\n        listcur->next = new_list();\n        listcur = listcur->next;\n\n        for (i = 0; i < strlen(this); i++) {\n            if (this[i] == '-') {\n                this[i] = '\\0';\n                second = &this[i + 1];\n            }\n        }\n\n        listcur->min = strtoull(first, NULL, 0);\n        if (second != NULL) {\n            listcur->max = strtoull(second, NULL, 0);\n        }\n        else {\n            listcur->max = listcur->min;\n        }\n\n    }\n\n    regfree(&preg);\n\n    return 1;\n}",
  "diff_func": "--- func_before\n+++ func_after\n int\n parse_list(tcpr_list_t ** listdata, char *ourstr)\n {\n     tcpr_list_t *listcur, *list_ptr;\n     char *this = NULL;\n     char *first, *second;\n     int rcode;\n     regex_t preg;\n     char regex[] = \"^[0-9]+(-[0-9]+)?$\";\n     char *token = NULL;\n     u_int i;\n \n \n     /* compile the regex first */\n     if ((rcode = regcomp(&preg, regex, REG_EXTENDED | REG_NOSUB)) != 0) {\n         char ebuf[EBUF_SIZE];\n         regerror(rcode, &preg, ebuf, sizeof(ebuf));\n         errx(-1, \"Unable to compile regex (%s): %s\", regex, ebuf);\n     }\n \n     /* first iteration */\n     this = strtok_r(ourstr, \",\", &token);\n     first = this;\n     second = NULL;\n \n     /* regex test */\n-    if (regexec(&preg, this, 0, NULL, 0) != 0) {\n+    if (this == NULL || regexec(&preg, this, 0, NULL, 0) != 0) {\n         warnx(\"Unable to parse: %s\", this);\n         regfree(&preg);\n         return 0;\n     }\n \n     *listdata = new_list();\n     list_ptr = *listdata;\n     listcur = list_ptr;\n \n     for (i = 0; i < strlen(this); i++) {\n         if (this[i] == '-') {\n             this[i] = '\\0';\n             second = &this[i + 1];\n         }\n     }\n \n     list_ptr->min = strtoull(first, NULL, 0);\n     if (second != NULL) {\n         list_ptr->max = strtoull(second, NULL, 0);\n     }\n     else {\n         list_ptr->max = list_ptr->min;\n     }\n \n     while (1) {\n         this = strtok_r(NULL, \",\", &token);\n         if (this == NULL)\n             break;\n \n         first = this;\n         second = NULL;\n \n \n         /* regex test */\n         if (regexec(&preg, this, 0, NULL, 0) != 0) {\n             warnx(\"Unable to parse: %s\", this);\n             regfree(&preg);\n             return 0;\n         }\n \n         listcur->next = new_list();\n         listcur = listcur->next;\n \n         for (i = 0; i < strlen(this); i++) {\n             if (this[i] == '-') {\n                 this[i] = '\\0';\n                 second = &this[i + 1];\n             }\n         }\n \n         listcur->min = strtoull(firs",
  "diff_source": "custom"
}