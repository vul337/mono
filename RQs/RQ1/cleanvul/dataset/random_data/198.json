{
  "id": 198,
  "language": "Java",
  "commit_url": "https://github.com/aosp-mirror/platform_frameworks_base/commit/7a8d56b2fe3496f7717ad1afe45d2ef523b7e252",
  "commit_sha": "7a8d56b2fe3496f7717ad1afe45d2ef523b7e252",
  "commit_msg": "[RESTRICT AUTOMERGE] Add protections agains use-after-free issues if cancel() or queue() is called after a device connection has been closed.\n\nThis is a backport of ag/7528082 and ag/20033068.\n\nBug: 132319116\nBug: 130571162\nBug: 204584366\nTest: CTS Verifier: USB Accessory Test & USB Device Test\nChange-Id: I952ab566e26a808997e362dc85ebd1d8eb4574b9",
  "pr_url": null,
  "pr_info": "no more info",
  "file_name": "core/java/android/hardware/usb/UsbRequest.java",
  "func_name": "queue",
  "func_before": "@Deprecated\n    public boolean queue(ByteBuffer buffer, int length) {\n        boolean out = (mEndpoint.getDirection() == UsbConstants.USB_DIR_OUT);\n        boolean result;\n\n        if (mConnection.getContext().getApplicationInfo().targetSdkVersion < Build.VERSION_CODES.P\n                && length > MAX_USBFS_BUFFER_SIZE) {\n            length = MAX_USBFS_BUFFER_SIZE;\n        }\n\n        synchronized (mLock) {\n            // save our buffer for when the request has completed\n            mBuffer = buffer;\n            mLength = length;\n\n            // Note: On a buffer slice we lost the capacity information about the underlying buffer,\n            // hence we cannot check if the access would be a data leak/memory corruption.\n\n            if (buffer.isDirect()) {\n                result = native_queue_direct(buffer, length, out);\n            } else if (buffer.hasArray()) {\n                result = native_queue_array(buffer.array(), length, out);\n            } else {\n                throw new IllegalArgumentException(\"buffer is not direct and has no array\");\n            }\n            if (!result) {\n                mBuffer = null;\n                mLength = 0;\n            }\n        }\n\n        return result;\n    }",
  "func_after": "@Deprecated\n    public boolean queue(ByteBuffer buffer, int length) {\n        UsbDeviceConnection connection = mConnection;\n        if (connection == null) {\n            // The expected exception by CTS Verifier - USB Device test\n            throw new NullPointerException(\"invalid connection\");\n        }\n\n        // Calling into the underlying UsbDeviceConnection to synchronize on its lock, to prevent\n        // the connection being closed while queueing.\n        return connection.queueRequest(this, buffer, length);\n    }",
  "diff_func": "--- func_before\n+++ func_after\n @Deprecated\n     public boolean queue(ByteBuffer buffer, int length) {\n+        UsbDeviceConnection connection = mConnection;\n+        if (connection == null) {\n+            // The expected exception by CTS Verifier - USB Device test\n+            throw new NullPointerException(\"invalid connection\");\n-        boolean out = (mEndpoint.getDirection() == UsbConstants.USB_DIR_OUT);\n-        boolean result;\n-\n-        if (mConnection.getContext().getApplicationInfo().targetSdkVersion < Build.VERSION_CODES.P\n-                && length > MAX_USBFS_BUFFER_SIZE) {\n-            length = MAX_USBFS_BUFFER_SIZE;\n         }\n \n+        // Calling into the underlying UsbDeviceConnection to synchronize on its lock, to prevent\n+        // the connection being closed while queueing.\n+        return connection.queueRequest(this, buffer, length);\n-        synchronized (mLock) {\n-            // save our buffer for when the request has completed\n-            mBuffer = buffer;\n-            mLength = length;\n-\n-            // Note: On a buffer slice we lost the capacity information about the underlying buffer,\n-            // hence we cannot check if the access would be a data leak/memory corruption.\n-\n-            if (buffer.isDirect()) {\n-                result = native_queue_direct(buffer, length, out);\n-            } else if (buffer.hasArray()) {\n-                result = native_queue_array(buffer.array(), length, out);\n-            } else {\n-                throw new IllegalArgumentException(\"buffer is not direct and has no array\");\n-            }\n-            if (!result) {\n-                mBuffer = null;\n-                mLength = 0;\n-            }\n-        }\n-\n-        return result;\n     }",
  "diff_source": "custom"
}