{
  "id": 6043,
  "language": "C/C++",
  "commit_url": "https://github.com/torvalds/linux/commit/1728137b33c00d5a2b5110ed7aafb42e7c32e4a1",
  "commit_sha": "1728137b33c00d5a2b5110ed7aafb42e7c32e4a1",
  "commit_msg": "Bluetooth: L2CAP: Fix use-after-free in l2cap_sock_ready_cb\n\nl2cap_sock_release(sk) frees sk. However, sk's children are still alive\nand point to the already free'd sk's address.\nTo fix this, l2cap_sock_release(sk) also cleans sk's children.\n\n==================================================================\nBUG: KASAN: use-after-free in l2cap_sock_ready_cb+0xb7/0x100 net/bluetooth/l2cap_sock.c:1650\nRead of size 8 at addr ffff888104617aa8 by task kworker/u3:0/276\n\nCPU: 0 PID: 276 Comm: kworker/u3:0 Not tainted 6.2.0-00001-gef397bd4d5fb-dirty #59\nHardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.15.0-1 04/01/2014\nWorkqueue: hci2 hci_rx_work\nCall Trace:\n <TASK>\n __dump_stack lib/dump_stack.c:88 [inline]\n dump_stack_lvl+0x72/0x95 lib/dump_stack.c:106\n print_address_description mm/kasan/report.c:306 [inline]\n print_report+0x175/0x478 mm/kasan/report.c:417\n kasan_report+0xb1/0x130 mm/kasan/report.c:517\n l2cap_sock_ready_cb+0xb7/0x100 net/bluetooth/l2cap_sock.c:1650\n l2cap_chan_ready+0x10e/0x1e0 net/bluetooth/l2cap_core.c:1386\n l2cap_config_req+0x753/0x9f0 net/bluetooth/l2cap_core.c:4480\n l2cap_bredr_sig_cmd net/bluetooth/l2cap_core.c:5739 [inline]\n l2cap_sig_channel net/bluetooth/l2cap_core.c:6509 [inline]\n l2cap_recv_frame+0xe2e/0x43c0 net/bluetooth/l2cap_core.c:7788\n l2cap_recv_acldata+0x6ed/0x7e0 net/bluetooth/l2cap_core.c:8506\n hci_acldata_packet net/bluetooth/hci_core.c:3813 [inline]\n hci_rx_work+0x66e/0xbc0 net/bluetooth/hci_core.c:4048\n process_one_work+0x4ea/0x8e0 kernel/workqueue.c:2289\n worker_thread+0x364/0x8e0 kernel/workqueue.c:2436\n kthread+0x1b9/0x200 kernel/kthread.c:376\n ret_from_fork+0x2c/0x50 arch/x86/entry/entry_64.S:308\n </TASK>\n\nAllocated by task 288:\n kasan_save_stack+0x22/0x50 mm/kasan/common.c:45\n kasan_set_track+0x25/0x30 mm/kasan/common.c:52\n ____kasan_kmalloc mm/kasan/common.c:374 [inline]\n __kasan_kmalloc+0x82/0x90 mm/kasan/common.c:383\n kasan_kmalloc include/linux/kasan.h:211 [inline]\n __do_kmalloc_node mm/slab_common.c:968 [inline]\n __kmalloc+0x5a/0x140 mm/slab_common.c:981\n kmalloc include/linux/slab.h:584 [inline]\n sk_prot_alloc+0x113/0x1f0 net/core/sock.c:2040\n sk_alloc+0x36/0x3c0 net/core/sock.c:2093\n l2cap_sock_alloc.constprop.0+0x39/0x1c0 net/bluetooth/l2cap_sock.c:1852\n l2cap_sock_create+0x10d/0x220 net/bluetooth/l2cap_sock.c:1898\n bt_sock_create+0x183/0x290 net/bluetooth/af_bluetooth.c:132\n __sock_create+0x226/0x380 net/socket.c:1518\n sock_create net/socket.c:1569 [inline]\n __sys_socket_create net/socket.c:1606 [inline]\n __sys_socket_create net/socket.c:1591 [inline]\n __sys_socket+0x112/0x200 net/socket.c:1639\n __do_sys_socket net/socket.c:1652 [inline]\n __se_sys_socket net/socket.c:1650 [inline]\n __x64_sys_socket+0x40/0x50 net/socket.c:1650\n do_syscall_x64 arch/x86/entry/common.c:50 [inline]\n do_syscall_64+0x3f/0x90 arch/x86/entry/common.c:80\n entry_SYSCALL_64_after_hwframe+0x72/0xdc\n\nFreed by task 288:\n kasan_save_stack+0x22/0x50 mm/kasan/common.c:45\n kasan_set_track+0x25/0x30 mm/kasan/common.c:52\n kasan_save_free_info+0x2e/0x50 mm/kasan/generic.c:523\n ____kasan_slab_free mm/kasan/common.c:236 [inline]\n ____kasan_slab_free mm/kasan/common.c:200 [inline]\n __kasan_slab_free+0x10a/0x190 mm/kasan/common.c:244\n kasan_slab_free include/linux/kasan.h:177 [inline]\n slab_free_hook mm/slub.c:1781 [inline]\n slab_free_freelist_hook mm/slub.c:1807 [inline]\n slab_free mm/slub.c:3787 [inline]\n __kmem_cache_free+0x88/0x1f0 mm/slub.c:3800\n sk_prot_free net/core/sock.c:2076 [inline]\n __sk_destruct+0x347/0x430 net/core/sock.c:2168\n sk_destruct+0x9c/0xb0 net/core/sock.c:2183\n __sk_free+0x82/0x220 net/core/sock.c:2194\n sk_free+0x7c/0xa0 net/core/sock.c:2205\n sock_put include/net/sock.h:1991 [inline]\n l2cap_sock_kill+0x256/0x2b0 net/bluetooth/l2cap_sock.c:1257\n l2cap_sock_release+0x1a7/0x220 net/bluetooth/l2cap_sock.c:1428\n __sock_release+0x80/0x150 net/socket.c:650\n sock_close+0x19/0x30 net/socket.c:1368\n __fput+0x17a/0x5c0 fs/file_table.c:320\n task_work_run+0x132/0x1c0 kernel/task_work.c:179\n resume_user_mode_work include/linux/resume_user_mode.h:49 [inline]\n exit_to_user_mode_loop kernel/entry/common.c:171 [inline]\n exit_to_user_mode_prepare+0x113/0x120 kernel/entry/common.c:203\n __syscall_exit_to_user_mode_work kernel/entry/common.c:285 [inline]\n syscall_exit_to_user_mode+0x21/0x50 kernel/entry/common.c:296\n do_syscall_64+0x4c/0x90 arch/x86/entry/common.c:86\n entry_SYSCALL_64_after_hwframe+0x72/0xdc\n\nThe buggy address belongs to the object at ffff888104617800\n which belongs to the cache kmalloc-1k of size 1024\nThe buggy address is located 680 bytes inside of\n 1024-byte region [ffff888104617800, ffff888104617c00)\n\nThe buggy address belongs to the physical page:\npage:00000000dbca6a80 refcount:1 mapcount:0 mapping:0000000000000000 index:0xffff888104614000 pfn:0x104614\nhead:00000000dbca6a80 order:2 compound_mapcount:0 subpages_mapcount:0 compound_pincount:0\nflags: 0x200000000010200(slab|head|node=0|zone=2)\nraw: 0200000000010200 ffff888100041dc0 ffffea0004212c10 ffffea0004234b10\nraw: ffff888104614000 0000000000080002 00000001ffffffff 0000000000000000\npage dumped because: kasan: bad access detected\n\nMemory state around the buggy address:\n ffff888104617980: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb\n ffff888104617a00: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb\n>ffff888104617a80: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb\n                                  ^\n ffff888104617b00: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb\n ffff888104617b80: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb\n==================================================================\n\nAck: This bug is found by FuzzBT with a modified Syzkaller. Other\ncontributors are Ruoyu Wu and Hui Peng.\nSigned-off-by: Sungwoo Kim <iam@sung-woo.kim>\nSigned-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>\nSigned-off-by: Jakub Kicinski <kuba@kernel.org>",
  "pr_url": null,
  "pr_info": "no more info",
  "file_name": "net/bluetooth/l2cap_sock.c",
  "func_name": "l2cap_sock_release",
  "func_before": "static int l2cap_sock_release(struct socket *sock)\n{\n\tstruct sock *sk = sock->sk;\n\tint err;\n\tstruct l2cap_chan *chan;\n\n\tBT_DBG(\"sock %p, sk %p\", sock, sk);\n\n\tif (!sk)\n\t\treturn 0;\n\n\tbt_sock_unlink(&l2cap_sk_list, sk);\n\n\terr = l2cap_sock_shutdown(sock, SHUT_RDWR);\n\tchan = l2cap_pi(sk)->chan;\n\n\tl2cap_chan_hold(chan);\n\tl2cap_chan_lock(chan);\n\n\tsock_orphan(sk);\n\tl2cap_sock_kill(sk);\n\n\tl2cap_chan_unlock(chan);\n\tl2cap_chan_put(chan);\n\n\treturn err;\n}",
  "func_after": "static int l2cap_sock_release(struct socket *sock)\n{\n\tstruct sock *sk = sock->sk;\n\tint err;\n\tstruct l2cap_chan *chan;\n\n\tBT_DBG(\"sock %p, sk %p\", sock, sk);\n\n\tif (!sk)\n\t\treturn 0;\n\n\tl2cap_sock_cleanup_listen(sk);\n\tbt_sock_unlink(&l2cap_sk_list, sk);\n\n\terr = l2cap_sock_shutdown(sock, SHUT_RDWR);\n\tchan = l2cap_pi(sk)->chan;\n\n\tl2cap_chan_hold(chan);\n\tl2cap_chan_lock(chan);\n\n\tsock_orphan(sk);\n\tl2cap_sock_kill(sk);\n\n\tl2cap_chan_unlock(chan);\n\tl2cap_chan_put(chan);\n\n\treturn err;\n}",
  "diff_func": "--- func_before\n+++ func_after\n static int l2cap_sock_release(struct socket *sock)\n {\n \tstruct sock *sk = sock->sk;\n \tint err;\n \tstruct l2cap_chan *chan;\n \n \tBT_DBG(\"sock %p, sk %p\", sock, sk);\n \n \tif (!sk)\n \t\treturn 0;\n \n+\tl2cap_sock_cleanup_listen(sk);\n \tbt_sock_unlink(&l2cap_sk_list, sk);\n \n \terr = l2cap_sock_shutdown(sock, SHUT_RDWR);\n \tchan = l2cap_pi(sk)->chan;\n \n \tl2cap_chan_hold(chan);\n \tl2cap_chan_lock(chan);\n \n \tsock_orphan(sk);\n \tl2cap_sock_kill(sk);\n \n \tl2cap_chan_unlock(chan);\n \tl2cap_chan_put(chan);\n \n \treturn err;\n }",
  "diff_source": "custom"
}