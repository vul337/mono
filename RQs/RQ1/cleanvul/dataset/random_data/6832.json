{
  "id": 6832,
  "language": "C/C++",
  "commit_url": "https://github.com/krb5/krb5/commit/56f7b1bc95a2a3eeb420e069e7655fb181ade5cf",
  "commit_sha": "56f7b1bc95a2a3eeb420e069e7655fb181ade5cf",
  "commit_msg": "Preserve GSS context on init/accept failure\n\nAfter gss_init_sec_context() or gss_accept_sec_context() has created a\ncontext, don't delete the mechglue context on failures from subsequent\ncalls, even if the mechanism deletes the mech-specific context (which\nis allowed by RFC 2744 but not preferred).  Check for union contexts\nwith no mechanism context in each GSS function which accepts a\ngss_ctx_id_t.\n\nCVE-2017-11462:\n\nRFC 2744 permits a GSS-API implementation to delete an existing\nsecurity context on a second or subsequent call to\ngss_init_sec_context() or gss_accept_sec_context() if the call results\nin an error.  This API behavior has been found to be dangerous,\nleading to the possibility of memory errors in some callers.  For\nsafety, GSS-API implementations should instead preserve existing\nsecurity contexts on error until the caller deletes them.\n\nAll versions of MIT krb5 prior to this change may delete acceptor\ncontexts on error.  Versions 1.13.4 through 1.13.7, 1.14.1 through\n1.14.5, and 1.15 through 1.15.1 may also delete initiator contexts on\nerror.\n\nticket: 8598 (new)\ntarget_version: 1.15-next\ntarget_version: 1.14-next\ntags: pullup",
  "pr_url": "https://github.com/krb5/krb5/pull/677",
  "pr_info": "[@frozencemetery: please run interposer tests against this PR]\r\n\r\nAfter gss_init_sec_context() or gss_accept_sec_context() has created a\r\ncontext, don't delete the mechglue context on failures from subsequent\r\ncalls, even if the mechanism deletes the mech-specific context (which\r\nis allowed by RFC 2744 but not preferred).  Check for union contexts\r\nwith no mechanism context in each GSS function which accepts a\r\ngss_ctx_id_t.\r\n",
  "file_name": "src/lib/gssapi/mechglue/g_exp_sec_context.c",
  "func_name": "gss_export_sec_context",
  "func_before": "OM_uint32 KRB5_CALLCONV\ngss_export_sec_context(minor_status,\n                       context_handle,\n                       interprocess_token)\n\nOM_uint32 *\t\tminor_status;\ngss_ctx_id_t *\t\tcontext_handle;\ngss_buffer_t\t\tinterprocess_token;\n\n{\n    OM_uint32\t\tstatus;\n    OM_uint32 \t\tlength;\n    gss_union_ctx_id_t\tctx = NULL;\n    gss_mechanism\tmech;\n    gss_buffer_desc\ttoken = GSS_C_EMPTY_BUFFER;\n    char\t\t*buf;\n\n    status = val_exp_sec_ctx_args(minor_status,\n\t\t\t\t  context_handle, interprocess_token);\n    if (status != GSS_S_COMPLETE)\n\treturn (status);\n\n    /*\n     * select the approprate underlying mechanism routine and\n     * call it.\n     */\n\n    ctx = (gss_union_ctx_id_t) *context_handle;\n    mech = gssint_get_mechanism (ctx->mech_type);\n    if (!mech)\n\treturn GSS_S_BAD_MECH;\n    if (!mech->gss_export_sec_context)\n\treturn (GSS_S_UNAVAILABLE);\n\n    status = mech->gss_export_sec_context(minor_status,\n\t\t\t\t\t  &ctx->internal_ctx_id, &token);\n    if (status != GSS_S_COMPLETE) {\n\tmap_error(minor_status, mech);\n\tgoto cleanup;\n    }\n\n    length = token.length + 4 + ctx->mech_type->length;\n    interprocess_token->length = length;\n    interprocess_token->value = malloc(length);\n    if (interprocess_token->value == 0) {\n\t*minor_status = ENOMEM;\n\tstatus = GSS_S_FAILURE;\n\tgoto cleanup;\n    }\n    buf = interprocess_token->value;\n    length = ctx->mech_type->length;\n    buf[3] = (unsigned char) (length & 0xFF);\n    length >>= 8;\n    buf[2] = (unsigned char) (length & 0xFF);\n    length >>= 8;\n    buf[1] = (unsigned char) (length & 0xFF);\n    length >>= 8;\n    buf[0] = (unsigned char) (length & 0xFF);\n    memcpy(buf+4, ctx->mech_type->elements, (size_t) ctx->mech_type->length);\n    memcpy(buf+4+ctx->mech_type->length, token.value, token.length);\n\n    status = GSS_S_COMPLETE;\n\ncleanup:\n    (void) gss_release_buffer(minor_status, &token);\n    if (ctx != NULL && ctx->internal_ctx_id == GSS_C_NO_CONTEXT) {\n\t/* If the mech deleted its context, delete the union context. */\n\tfree(ctx->mech_type->elements);\n\tfree(ctx->mech_type);\n\tfree(ctx);\n\t*context_handle = GSS_C_NO_CONTEXT;\n    }\n    return status;\n}",
  "func_after": "OM_uint32 KRB5_CALLCONV\ngss_export_sec_context(minor_status,\n                       context_handle,\n                       interprocess_token)\n\nOM_uint32 *\t\tminor_status;\ngss_ctx_id_t *\t\tcontext_handle;\ngss_buffer_t\t\tinterprocess_token;\n\n{\n    OM_uint32\t\tstatus;\n    OM_uint32 \t\tlength;\n    gss_union_ctx_id_t\tctx = NULL;\n    gss_mechanism\tmech;\n    gss_buffer_desc\ttoken = GSS_C_EMPTY_BUFFER;\n    char\t\t*buf;\n\n    status = val_exp_sec_ctx_args(minor_status,\n\t\t\t\t  context_handle, interprocess_token);\n    if (status != GSS_S_COMPLETE)\n\treturn (status);\n\n    /*\n     * select the approprate underlying mechanism routine and\n     * call it.\n     */\n\n    ctx = (gss_union_ctx_id_t) *context_handle;\n    if (ctx->internal_ctx_id == GSS_C_NO_CONTEXT)\n\treturn (GSS_S_NO_CONTEXT);\n    mech = gssint_get_mechanism (ctx->mech_type);\n    if (!mech)\n\treturn GSS_S_BAD_MECH;\n    if (!mech->gss_export_sec_context)\n\treturn (GSS_S_UNAVAILABLE);\n\n    status = mech->gss_export_sec_context(minor_status,\n\t\t\t\t\t  &ctx->internal_ctx_id, &token);\n    if (status != GSS_S_COMPLETE) {\n\tmap_error(minor_status, mech);\n\tgoto cleanup;\n    }\n\n    length = token.length + 4 + ctx->mech_type->length;\n    interprocess_token->length = length;\n    interprocess_token->value = malloc(length);\n    if (interprocess_token->value == 0) {\n\t*minor_status = ENOMEM;\n\tstatus = GSS_S_FAILURE;\n\tgoto cleanup;\n    }\n    buf = interprocess_token->value;\n    length = ctx->mech_type->length;\n    buf[3] = (unsigned char) (length & 0xFF);\n    length >>= 8;\n    buf[2] = (unsigned char) (length & 0xFF);\n    length >>= 8;\n    buf[1] = (unsigned char) (length & 0xFF);\n    length >>= 8;\n    buf[0] = (unsigned char) (length & 0xFF);\n    memcpy(buf+4, ctx->mech_type->elements, (size_t) ctx->mech_type->length);\n    memcpy(buf+4+ctx->mech_type->length, token.value, token.length);\n\n    status = GSS_S_COMPLETE;\n\ncleanup:\n    (void) gss_release_buffer(minor_status, &token);\n    if (ctx != NULL && ctx->internal_ctx_id == GSS_C_NO_CONTEXT) {\n\t/* If the mech deleted its context, delete the union context. */\n\tfree(ctx->mech_type->elements);\n\tfree(ctx->mech_type);\n\tfree(ctx);\n\t*context_handle = GSS_C_NO_CONTEXT;\n    }\n    return status;\n}",
  "diff_func": "--- func_before\n+++ func_after\n OM_uint32 KRB5_CALLCONV\n gss_export_sec_context(minor_status,\n                        context_handle,\n                        interprocess_token)\n \n OM_uint32 *\t\tminor_status;\n gss_ctx_id_t *\t\tcontext_handle;\n gss_buffer_t\t\tinterprocess_token;\n \n {\n     OM_uint32\t\tstatus;\n     OM_uint32 \t\tlength;\n     gss_union_ctx_id_t\tctx = NULL;\n     gss_mechanism\tmech;\n     gss_buffer_desc\ttoken = GSS_C_EMPTY_BUFFER;\n     char\t\t*buf;\n \n     status = val_exp_sec_ctx_args(minor_status,\n \t\t\t\t  context_handle, interprocess_token);\n     if (status != GSS_S_COMPLETE)\n \treturn (status);\n \n     /*\n      * select the approprate underlying mechanism routine and\n      * call it.\n      */\n \n     ctx = (gss_union_ctx_id_t) *context_handle;\n+    if (ctx->internal_ctx_id == GSS_C_NO_CONTEXT)\n+\treturn (GSS_S_NO_CONTEXT);\n     mech = gssint_get_mechanism (ctx->mech_type);\n     if (!mech)\n \treturn GSS_S_BAD_MECH;\n     if (!mech->gss_export_sec_context)\n \treturn (GSS_S_UNAVAILABLE);\n \n     status = mech->gss_export_sec_context(minor_status,\n \t\t\t\t\t  &ctx->internal_ctx_id, &token);\n     if (status != GSS_S_COMPLETE) {\n \tmap_error(minor_status, mech);\n \tgoto cleanup;\n     }\n \n     length = token.length + 4 + ctx->mech_type->length;\n     interprocess_token->length = length;\n     interprocess_token->value = malloc(length);\n     if (interprocess_token->value == 0) {\n \t*minor_status = ENOMEM;\n \tstatus = GSS_S_FAILURE;\n \tgoto cleanup;\n     }\n     buf = interprocess_token->value;\n     length = ctx->mech_type->length;\n     buf[3] = (unsigned char) (length & 0xFF);\n     length >>= 8;\n     buf[2] = (unsigned char) (length & 0xFF);\n     length >>= 8;\n     buf[1] = (unsigned char) (length & 0xFF);\n     length >>= 8;\n     buf[0] = (unsigned char) (length & 0xFF);\n     memcpy(buf+4, ctx->mech_type->elements, (size_t) ctx->mech_type->length);\n     memcpy(buf+4+ctx->mech_type->length, token.value, token.length);\n \n     status = GSS_S_COMPLETE;\n \n cleanup:\n     (void) gss_release_buff",
  "diff_source": "custom"
}