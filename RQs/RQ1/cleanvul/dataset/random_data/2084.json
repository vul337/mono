{
  "id": 2084,
  "language": "Java",
  "commit_url": "https://github.com/jenkinsci/workflow-cps-global-lib-plugin/commit/c0b6bb974818ea857e29c971ec7b49cc460fe539",
  "commit_sha": "c0b6bb974818ea857e29c971ec7b49cc460fe539",
  "commit_msg": "Merge pull request #139 from dwnusbaum/security-fix-test-compatibility\n\nFix recent security fixes if JENKINS_HOME is a symlink and update tests for compatibility with Windows and Git plugin 4.10.3\n\n(cherry picked from commit e62a4ebbe039329342b51319eb43dbc7d5edaf11)",
  "pr_url": null,
  "pr_info": "no more info",
  "file_name": "src/main/java/org/jenkinsci/plugins/workflow/libs/LibraryAdder.java",
  "func_name": "InterruptedException",
  "func_before": "static @Nonnull Map<String,String> findResources(@Nonnull CpsFlowExecution execution, @Nonnull String name, @CheckForNull String encoding) throws IOException, InterruptedException {\n        Map<String,String> resources = new TreeMap<>();\n        Queue.Executable executable = execution.getOwner().getExecutable();\n        if (executable instanceof Run) {\n            Run<?,?> run = (Run) executable;\n            LibrariesAction action = run.getAction(LibrariesAction.class);\n            if (action != null) {\n                FilePath libs = new FilePath(run.getRootDir()).child(\"libs\");\n                for (LibraryRecord library : action.getLibraries()) {\n                    FilePath libResources = libs.child(library.getDirectoryName() + \"/resources/\");\n                    FilePath f = libResources.child(name);\n                    if (!new File(f.getRemote()).getCanonicalFile().toPath().startsWith(libResources.absolutize().getRemote())) {\n                        throw new AbortException(name + \" references a file that is not contained within the library: \" + library.name);\n                    } else if (f.exists()) {\n                        resources.put(library.name, readResource(f, encoding));\n                    }\n                }\n            }\n        }\n        return resources;\n    }",
  "func_after": "static @Nonnull Map<String,String> findResources(@Nonnull CpsFlowExecution execution, @Nonnull String name, @CheckForNull String encoding) throws IOException, InterruptedException {\n        Map<String,String> resources = new TreeMap<>();\n        Queue.Executable executable = execution.getOwner().getExecutable();\n        if (executable instanceof Run) {\n            Run<?,?> run = (Run) executable;\n            LibrariesAction action = run.getAction(LibrariesAction.class);\n            if (action != null) {\n                FilePath libs = new FilePath(run.getRootDir()).child(\"libs\");\n                for (LibraryRecord library : action.getLibraries()) {\n                    FilePath libResources = libs.child(library.getDirectoryName() + \"/resources/\");\n                    FilePath f = libResources.child(name);\n                    if (!new File(f.getRemote()).getCanonicalFile().toPath().startsWith(new File(libResources.getRemote()).getCanonicalPath())) {\n                        throw new AbortException(name + \" references a file that is not contained within the library: \" + library.name);\n                    } else if (f.exists()) {\n                        resources.put(library.name, readResource(f, encoding));\n                    }\n                }\n            }\n        }\n        return resources;\n    }",
  "diff_func": "--- func_before\n+++ func_after\n static @Nonnull Map<String,String> findResources(@Nonnull CpsFlowExecution execution, @Nonnull String name, @CheckForNull String encoding) throws IOException, InterruptedException {\n         Map<String,String> resources = new TreeMap<>();\n         Queue.Executable executable = execution.getOwner().getExecutable();\n         if (executable instanceof Run) {\n             Run<?,?> run = (Run) executable;\n             LibrariesAction action = run.getAction(LibrariesAction.class);\n             if (action != null) {\n                 FilePath libs = new FilePath(run.getRootDir()).child(\"libs\");\n                 for (LibraryRecord library : action.getLibraries()) {\n                     FilePath libResources = libs.child(library.getDirectoryName() + \"/resources/\");\n                     FilePath f = libResources.child(name);\n-                    if (!new File(f.getRemote()).getCanonicalFile().toPath().startsWith(libResources.absolutize().getRemote())) {\n+                    if (!new File(f.getRemote()).getCanonicalFile().toPath().startsWith(new File(libResources.getRemote()).getCanonicalPath())) {\n                         throw new AbortException(name + \" references a file that is not contained within the library: \" + library.name);\n                     } else if (f.exists()) {\n                         resources.put(library.name, readResource(f, encoding));\n                     }\n                 }\n             }\n         }\n         return resources;\n     }",
  "diff_source": "custom"
}