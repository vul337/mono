{
  "id": 1120,
  "language": "Java",
  "commit_url": "https://github.com/logicaldoc/community/commit/d8db3bdb1208ac6286f68883e81dd23a3fbf8162",
  "commit_sha": "d8db3bdb1208ac6286f68883e81dd23a3fbf8162",
  "commit_msg": "Fixed vulnerability CVE-2022-47418",
  "pr_url": null,
  "pr_info": "no more info",
  "file_name": "logicaldoc-webapp/src/main/java/com/logicaldoc/web/service/DocumentServiceImpl.java",
  "func_name": "addDocuments",
  "func_before": "private void addDocuments(boolean importZip, String charset, boolean immediateIndexing, final GUIDocument metadata,\n\t\t\tfinal Session session, List<GUIDocument> createdDocs)\n\t\t\tthrows PersistenceException, ServerException, ParseException, IOException {\n\n\t\tcheckWritePermission(metadata, session);\n\n\t\tMap<String, File> uploadedFilesMap = getUploadedFiles(session.getSid());\n\n\t\tList<Document> docs = new ArrayList<>();\n\t\tDocumentManager documentManager = (DocumentManager) Context.get().getBean(DocumentManager.class);\n\n\t\tFolderDAO folderDao = (FolderDAO) Context.get().getBean(FolderDAO.class);\n\t\tFolder parent;\n\t\tparent = folderDao.findFolder(metadata.getFolder().getId());\n\n\t\tList<Long> docIdsToIndex = new ArrayList<>();\n\t\tfor (Entry<String, File> entry : uploadedFilesMap.entrySet()) {\n\t\t\tString filename = entry.getKey();\n\t\t\tFile file = entry.getValue();\n\t\t\ttry {\n\t\t\t\tif (filename.toLowerCase().endsWith(\".zip\") && importZip) {\n\t\t\t\t\t// Make a copy of the zip file in order to avoid it's\n\t\t\t\t\t// deletion during import\n\t\t\t\t\tFile tempZip = FileUtil.createTempFile(\"upload-\", \".zip\");\n\t\t\t\t\tFileUtils.copyFile(file, tempZip);\n\n\t\t\t\t\t// Prepare the import thread\n\t\t\t\t\tThread zipImporter = new Thread(() -> importZip(charset, metadata, session, parent, tempZip));\n\n\t\t\t\t\t// And launch it\n\t\t\t\t\tzipImporter.start();\n\t\t\t\t} else {\n\t\t\t\t\t// Create the document history event\n\t\t\t\t\tDocumentHistory transaction = new DocumentHistory();\n\t\t\t\t\ttransaction.setSession(session);\n\t\t\t\t\ttransaction.setEvent(DocumentEvent.STORED.toString());\n\t\t\t\t\ttransaction.setComment(metadata.getComment());\n\n\t\t\t\t\t/*\n\t\t\t\t\t * Prepare the Master document used to create the new one\n\t\t\t\t\t */\n\t\t\t\t\tDocument doc = toDocument(metadata);\n\t\t\t\t\tdoc.setTenantId(session.getTenantId());\n\t\t\t\t\tdoc.setCreation(new Date());\n\t\t\t\t\tdoc.setFileName(filename);\n\n\t\t\t\t\t// Create the new document\n\t\t\t\t\tdoc = documentManager.create(file, doc, transaction);\n\n\t\t\t\t\tif (immediateIndexing && doc.getIndexed() == AbstractDocument.INDEX_TO_INDEX)\n\t\t\t\t\t\tdocIdsToIndex.add(doc.getId());\n\n\t\t\t\t\tcreatedDocs.add(fromDocument(doc, metadata.getFolder(), null));\n\t\t\t\t\tdocs.add(doc);\n\t\t\t\t}\n\t\t\t} finally {\n\t\t\t\tFileUtil.strongDelete(file);\n\t\t\t}\n\t\t}\n\n\t\tcleanUploadedFiles(session);\n\n\t\tindexAddedDocs(docIdsToIndex, session);\n\n\t\t/*\n\t\t * We have to notify the specified users in a separate thread\n\t\t */\n\t\tnotifyUsersInNewThread(docs, metadata, \"newdoc\", session);\n\t}",
  "func_after": "private void addDocuments(boolean importZip, String charset, boolean immediateIndexing, final GUIDocument metadata,\n\t\t\tfinal Session session, List<GUIDocument> createdDocs)\n\t\t\tthrows PersistenceException, ServerException, ParseException, IOException {\n\n\t\tcheckWritePermission(metadata, session);\n\n\t\tMap<String, File> uploadedFilesMap = getUploadedFiles(session.getSid());\n\n\t\tList<Document> docs = new ArrayList<>();\n\t\tDocumentManager documentManager = (DocumentManager) Context.get().getBean(DocumentManager.class);\n\n\t\tFolderDAO folderDao = (FolderDAO) Context.get().getBean(FolderDAO.class);\n\t\tFolder parent;\n\t\tparent = folderDao.findFolder(metadata.getFolder().getId());\n\n\t\tList<Long> docIdsToIndex = new ArrayList<>();\n\t\tfor (Entry<String, File> entry : uploadedFilesMap.entrySet()) {\n\t\t\tString filename = entry.getKey();\n\t\t\tFile file = entry.getValue();\n\t\t\ttry {\n\t\t\t\tif (filename.toLowerCase().endsWith(\".zip\") && importZip) {\n\t\t\t\t\t// Make a copy of the zip file in order to avoid it's\n\t\t\t\t\t// deletion during import\n\t\t\t\t\tFile tempZip = FileUtil.createTempFile(\"upload-\", \".zip\");\n\t\t\t\t\tFileUtils.copyFile(file, tempZip);\n\n\t\t\t\t\t// Prepare the import thread\n\t\t\t\t\tThread zipImporter = new Thread(() -> importZip(charset, metadata, session, parent, tempZip));\n\n\t\t\t\t\t// And launch it\n\t\t\t\t\tzipImporter.start();\n\t\t\t\t} else {\n\t\t\t\t\t// Create the document history event\n\t\t\t\t\tDocumentHistory transaction = new DocumentHistory();\n\t\t\t\t\ttransaction.setSession(session);\n\t\t\t\t\ttransaction.setEvent(DocumentEvent.STORED.toString());\n\t\t\t\t\ttransaction.setComment(HTMLSanitizer.sanitizeSimpleText(metadata.getComment()));\n\n\t\t\t\t\t/*\n\t\t\t\t\t * Prepare the Master document used to create the new one\n\t\t\t\t\t */\n\t\t\t\t\tDocument doc = toDocument(metadata);\n\t\t\t\t\tdoc.setTenantId(session.getTenantId());\n\t\t\t\t\tdoc.setCreation(new Date());\n\t\t\t\t\tdoc.setFileName(filename);\n\n\t\t\t\t\t// Create the new document\n\t\t\t\t\tdoc = documentManager.create(file, doc, transaction);\n\n\t\t\t\t\tif (immediateIndexing && doc.getIndexed() == AbstractDocument.INDEX_TO_INDEX)\n\t\t\t\t\t\tdocIdsToIndex.add(doc.getId());\n\n\t\t\t\t\tcreatedDocs.add(fromDocument(doc, metadata.getFolder(), null));\n\t\t\t\t\tdocs.add(doc);\n\t\t\t\t}\n\t\t\t} finally {\n\t\t\t\tFileUtil.strongDelete(file);\n\t\t\t}\n\t\t}\n\n\t\tcleanUploadedFiles(session);\n\n\t\tindexAddedDocs(docIdsToIndex, session);\n\n\t\t/*\n\t\t * We have to notify the specified users in a separate thread\n\t\t */\n\t\tnotifyUsersInNewThread(docs, metadata, \"newdoc\", session);\n\t}",
  "diff_func": "--- func_before\n+++ func_after\n private void addDocuments(boolean importZip, String charset, boolean immediateIndexing, final GUIDocument metadata,\n \t\t\tfinal Session session, List<GUIDocument> createdDocs)\n \t\t\tthrows PersistenceException, ServerException, ParseException, IOException {\n \n \t\tcheckWritePermission(metadata, session);\n \n \t\tMap<String, File> uploadedFilesMap = getUploadedFiles(session.getSid());\n \n \t\tList<Document> docs = new ArrayList<>();\n \t\tDocumentManager documentManager = (DocumentManager) Context.get().getBean(DocumentManager.class);\n \n \t\tFolderDAO folderDao = (FolderDAO) Context.get().getBean(FolderDAO.class);\n \t\tFolder parent;\n \t\tparent = folderDao.findFolder(metadata.getFolder().getId());\n \n \t\tList<Long> docIdsToIndex = new ArrayList<>();\n \t\tfor (Entry<String, File> entry : uploadedFilesMap.entrySet()) {\n \t\t\tString filename = entry.getKey();\n \t\t\tFile file = entry.getValue();\n \t\t\ttry {\n \t\t\t\tif (filename.toLowerCase().endsWith(\".zip\") && importZip) {\n \t\t\t\t\t// Make a copy of the zip file in order to avoid it's\n \t\t\t\t\t// deletion during import\n \t\t\t\t\tFile tempZip = FileUtil.createTempFile(\"upload-\", \".zip\");\n \t\t\t\t\tFileUtils.copyFile(file, tempZip);\n \n \t\t\t\t\t// Prepare the import thread\n \t\t\t\t\tThread zipImporter = new Thread(() -> importZip(charset, metadata, session, parent, tempZip));\n \n \t\t\t\t\t// And launch it\n \t\t\t\t\tzipImporter.start();\n \t\t\t\t} else {\n \t\t\t\t\t// Create the document history event\n \t\t\t\t\tDocumentHistory transaction = new DocumentHistory();\n \t\t\t\t\ttransaction.setSession(session);\n \t\t\t\t\ttransaction.setEvent(DocumentEvent.STORED.toString());\n-\t\t\t\t\ttransaction.setComment(metadata.getComment());\n+\t\t\t\t\ttransaction.setComment(HTMLSanitizer.sanitizeSimpleText(metadata.getComment()));\n \n \t\t\t\t\t/*\n \t\t\t\t\t * Prepare the Master document used to create the new one\n \t\t\t\t\t */\n \t\t\t\t\tDocument doc = toDocument(metadata);\n \t\t\t\t\tdoc.setTenantId(session.getTenantId());\n \t\t\t\t\tdoc.setCreation(new Date());\n \t\t\t\t\tdoc.setFileName(filename);\n \n \t\t\t\t\t// Create the new docum",
  "diff_source": "custom"
}