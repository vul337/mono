{
  "id": 947,
  "language": "Java",
  "commit_url": "https://github.com/vaadin/flow/commit/de7c13dc97ebfd6769d270b73239f0b525fe8983",
  "commit_sha": "de7c13dc97ebfd6769d270b73239f0b525fe8983",
  "commit_msg": "fix!: Security upgrade org.jsoup:jsoup to 1.15.3 (#14448) (#14455)\n\nmanual cherry-pick of (#14424)\r\n\r\nThe following vulnerabilities are fixed with an upgrade:\r\n- https://snyk.io/vuln/SNYK-JAVA-ORGJSOUP-2989728\r\n\r\nCo-authored-by: Soroosh Taefi <taefi.soroosh@gmail.com>",
  "pr_url": "https://github.com/vaadin/flow/pull/14455",
  "pr_info": "no more info",
  "file_name": "flow-server/src/main/java/com/vaadin/flow/router/RouteNotFoundError.java",
  "func_name": "setErrorParameter",
  "func_before": "@Override\n    public int setErrorParameter(BeforeEnterEvent event,\n            ErrorParameter<NotFoundException> parameter) {\n        if (getLogger().isDebugEnabled()) {\n            getLogger().debug(\n                    parameter.hasCustomMessage() ? parameter.getCustomMessage()\n                            : \"Route is not found\",\n                    parameter.getCaughtException());\n        }\n        String path = event.getLocation().getPath();\n        String additionalInfo = \"\";\n        if (parameter.hasCustomMessage()) {\n            additionalInfo = \"Reason: \" + parameter.getCustomMessage();\n        }\n        path = Jsoup.clean(path, Whitelist.none());\n        additionalInfo = Jsoup.clean(additionalInfo, Whitelist.none());\n\n        boolean productionMode = event.getUI().getSession().getConfiguration()\n                .isProductionMode();\n\n        String template = getErrorHtml(productionMode);\n        // {{routes}} should be replaced first so that it's not possible to\n        // insert {{routes}} snippet via other template values which may result\n        // in the listing of all available routes when this shouldn't not happen\n        if (template.contains(\"{{routes}}\")) {\n            template = template.replace(\"{{routes}}\", getRoutes(event));\n        }\n        template = template.replace(\"{{additionalInfo}}\", additionalInfo);\n        template = template.replace(\"{{path}}\", path);\n\n        getElement().setChild(0, new Html(template).getElement());\n        return HttpServletResponse.SC_NOT_FOUND;\n    }",
  "func_after": "@Override\n    public int setErrorParameter(BeforeEnterEvent event,\n            ErrorParameter<NotFoundException> parameter) {\n        if (getLogger().isDebugEnabled()) {\n            getLogger().debug(\n                    parameter.hasCustomMessage() ? parameter.getCustomMessage()\n                            : \"Route is not found\",\n                    parameter.getCaughtException());\n        }\n        String path = event.getLocation().getPath();\n        String additionalInfo = \"\";\n        if (parameter.hasCustomMessage()) {\n            additionalInfo = \"Reason: \" + parameter.getCustomMessage();\n        }\n        path = Jsoup.clean(path, Safelist.none());\n        additionalInfo = Jsoup.clean(additionalInfo, Safelist.none());\n\n        boolean productionMode = event.getUI().getSession().getConfiguration()\n                .isProductionMode();\n\n        String template = getErrorHtml(productionMode);\n        // {{routes}} should be replaced first so that it's not possible to\n        // insert {{routes}} snippet via other template values which may result\n        // in the listing of all available routes when this shouldn't not happen\n        if (template.contains(\"{{routes}}\")) {\n            template = template.replace(\"{{routes}}\", getRoutes(event));\n        }\n        template = template.replace(\"{{additionalInfo}}\", additionalInfo);\n        template = template.replace(\"{{path}}\", path);\n\n        getElement().setChild(0, new Html(template).getElement());\n        return HttpServletResponse.SC_NOT_FOUND;\n    }",
  "diff_func": "--- func_before\n+++ func_after\n @Override\n     public int setErrorParameter(BeforeEnterEvent event,\n             ErrorParameter<NotFoundException> parameter) {\n         if (getLogger().isDebugEnabled()) {\n             getLogger().debug(\n                     parameter.hasCustomMessage() ? parameter.getCustomMessage()\n                             : \"Route is not found\",\n                     parameter.getCaughtException());\n         }\n         String path = event.getLocation().getPath();\n         String additionalInfo = \"\";\n         if (parameter.hasCustomMessage()) {\n             additionalInfo = \"Reason: \" + parameter.getCustomMessage();\n         }\n-        path = Jsoup.clean(path, Whitelist.none());\n+        path = Jsoup.clean(path, Safelist.none());\n-        additionalInfo = Jsoup.clean(additionalInfo, Whitelist.none());\n+        additionalInfo = Jsoup.clean(additionalInfo, Safelist.none());\n \n         boolean productionMode = event.getUI().getSession().getConfiguration()\n                 .isProductionMode();\n \n         String template = getErrorHtml(productionMode);\n         // {{routes}} should be replaced first so that it's not possible to\n         // insert {{routes}} snippet via other template values which may result\n         // in the listing of all available routes when this shouldn't not happen\n         if (template.contains(\"{{routes}}\")) {\n             template = template.replace(\"{{routes}}\", getRoutes(event));\n         }\n         template = template.replace(\"{{additionalInfo}}\", additionalInfo);\n         template = template.replace(\"{{path}}\", path);\n \n         getElement().setChild(0, new Html(template).getElement());\n         return HttpServletResponse.SC_NOT_FOUND;\n     }",
  "diff_source": "custom"
}