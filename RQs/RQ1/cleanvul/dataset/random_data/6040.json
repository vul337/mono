{
  "id": 6040,
  "language": "Python",
  "commit_url": "https://github.com/ProgVal/Limnoria/commit/3848ae78de45b35c029cc333963d436b9d2f0a35",
  "commit_sha": "3848ae78de45b35c029cc333963d436b9d2f0a35",
  "commit_msg": "Math: Rewrite calc functions with a proper evaluator.\n\nInstead of hacking around eval(), which everyone knows is a bad idea\neven with prior expression sanitizing.",
  "pr_url": null,
  "pr_info": "no more info",
  "file_name": "plugins/Math/plugin.py",
  "func_name": "calc",
  "func_before": "def calc(self, irc, msg, args, text):\n        \"\"\"<math expression>\n\n        Returns the value of the evaluated <math expression>.  The syntax is\n        Python syntax; the type of arithmetic is floating point.  Floating\n        point arithmetic is used in order to prevent a user from being able to\n        crash to the bot with something like '10**10**10**10'.  One consequence\n        is that large values such as '10**24' might not be exact.\n        \"\"\"\n        try:\n            text = str(text)\n        except UnicodeEncodeError:\n            irc.error(_(\"There's no reason you should have fancy non-ASCII \"\n                            \"characters in your mathematical expression. \"\n                            \"Please remove them.\"))\n            return\n        if self._calc_match_forbidden_chars.match(text):\n            # Note: this is important to keep this to forbid usage of\n            # __builtins__\n            irc.error(_('There\\'s really no reason why you should have '\n                           'underscores or brackets in your mathematical '\n                           'expression.  Please remove them.'))\n            return\n        text = self._calc_remover(text)\n        if 'lambda' in text:\n            irc.error(_('You can\\'t use lambda in this command.'))\n            return\n        text = text.lower()\n        def handleMatch(m):\n            s = m.group(1)\n            if s.startswith('0x'):\n                i = int(s, 16)\n            elif s.startswith('0') and '.' not in s:\n                try:\n                    i = int(s, 8)\n                except ValueError:\n                    i = int(s)\n            else:\n                i = float(s)\n            x = complex(i)\n            if x.imag == 0:\n                x = x.real\n                # Need to use string-formatting here instead of str() because\n                # use of str() on large numbers loses information:\n                # str(float(33333333333333)) => '3.33333333333e+13'\n                # float('3.33333333333e+13') => 33333333333300.0\n                return '%.16f' % x\n            return str(x)\n        text = self._mathRe.sub(handleMatch, text)\n        try:\n            self.log.info('evaluating %q from %s', text, msg.prefix)\n            x = complex(eval(text, self._mathSafeEnv, self._mathSafeEnv))\n            irc.reply(self._complexToString(x))\n        except OverflowError:\n            maxFloat = math.ldexp(0.9999999999999999, 1024)\n            irc.error(_('The answer exceeded %s or so.') % maxFloat)\n        except TypeError:\n            irc.error(_('Something in there wasn\\'t a valid number.'))\n        except NameError as e:\n            irc.error(_('%s is not a defined function.') % str(e).split()[1])\n        except Exception as e:\n            irc.error(str(e))",
  "func_after": "def calc(self, irc, msg, args, text):\n        \"\"\"<math expression>\n\n        Returns the value of the evaluated <math expression>.  The syntax is\n        Python syntax; the type of arithmetic is floating point.  Floating\n        point arithmetic is used in order to prevent a user from being able to\n        crash to the bot with something like '10**10**10**10'.  One consequence\n        is that large values such as '10**24' might not be exact.\n        \"\"\"\n        try:\n            self.log.info('evaluating %q from %s', text, msg.prefix)\n            x = complex(safe_eval(text, allow_ints=False))\n            irc.reply(self._complexToString(x))\n        except OverflowError:\n            maxFloat = math.ldexp(0.9999999999999999, 1024)\n            irc.error(_('The answer exceeded %s or so.') % maxFloat)\n        except InvalidNode as e:\n            irc.error(_('Invalid syntax: %s') % e.args[0])\n        except NameError as e:\n            irc.error(_('%s is not a defined function.') % e.args[0])\n        except Exception as e:\n            irc.error(str(e))",
  "diff_func": "--- func_before\n+++ func_after\n@@ -157 +128 @@\n def calc(self, irc, msg, args, text):\n \"\"\"<math expression>",
  "diff_source": "api"
}