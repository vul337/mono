{
  "id": 5,
  "language": "Java",
  "commit_url": "https://github.com/elastic/elasticsearch/commit/32d512286da9ae1e3ce934803095d11b9c0aff59",
  "commit_sha": "32d512286da9ae1e3ce934803095d11b9c0aff59",
  "commit_msg": "[ML] Validate trained model deployment queue_capacity limit (#89573)\n\nWhen starting a trained model deployment, a queue is created.\r\nIf the queue_capacity is too large, it can lead to OOM and a node\r\ncrash.\r\n\r\nThis commit adds validation that the queue_capacity cannot be more\r\nthan 1M.\r\n\r\nCloses #89555",
  "pr_url": "https://github.com/elastic/elasticsearch/pull/89573",
  "pr_info": "When starting a trained model deployment, a queue is created.\r\nIf the queue_capacity is too large, it can lead to OOM and a node\r\ncrash.\r\n\r\nThis commit adds validation that the queue_capacity cannot be more\r\nthan 1M.\r\n\r\nCloses #89555\r\n",
  "file_name": "x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/action/StartTrainedModelDeploymentAction.java",
  "func_name": "validate",
  "func_before": "@Override\n        public ActionRequestValidationException validate() {\n            ActionRequestValidationException validationException = new ActionRequestValidationException();\n            if (waitForState.isAnyOf(VALID_WAIT_STATES) == false) {\n                validationException.addValidationError(\n                    \"invalid [wait_for] state [\"\n                        + waitForState\n                        + \"]; must be one of [\"\n                        + Strings.arrayToCommaDelimitedString(VALID_WAIT_STATES)\n                );\n            }\n            if (numberOfAllocations < 1) {\n                validationException.addValidationError(\"[\" + NUMBER_OF_ALLOCATIONS + \"] must be a positive integer\");\n            }\n            if (threadsPerAllocation < 1) {\n                validationException.addValidationError(\"[\" + THREADS_PER_ALLOCATION + \"] must be a positive integer\");\n            }\n            if (threadsPerAllocation > MAX_THREADS_PER_ALLOCATION || isPowerOf2(threadsPerAllocation) == false) {\n                validationException.addValidationError(\n                    \"[\" + THREADS_PER_ALLOCATION + \"] must be a power of 2 less than or equal to \" + MAX_THREADS_PER_ALLOCATION\n                );\n            }\n            if (queueCapacity < 1) {\n                validationException.addValidationError(\"[\" + QUEUE_CAPACITY + \"] must be a positive integer\");\n            }\n            return validationException.validationErrors().isEmpty() ? null : validationException;\n        }",
  "func_after": "@Override\n        public ActionRequestValidationException validate() {\n            ActionRequestValidationException validationException = new ActionRequestValidationException();\n            if (waitForState.isAnyOf(VALID_WAIT_STATES) == false) {\n                validationException.addValidationError(\n                    \"invalid [wait_for] state [\"\n                        + waitForState\n                        + \"]; must be one of [\"\n                        + Strings.arrayToCommaDelimitedString(VALID_WAIT_STATES)\n                );\n            }\n            if (numberOfAllocations < 1) {\n                validationException.addValidationError(\"[\" + NUMBER_OF_ALLOCATIONS + \"] must be a positive integer\");\n            }\n            if (threadsPerAllocation < 1) {\n                validationException.addValidationError(\"[\" + THREADS_PER_ALLOCATION + \"] must be a positive integer\");\n            }\n            if (threadsPerAllocation > MAX_THREADS_PER_ALLOCATION || isPowerOf2(threadsPerAllocation) == false) {\n                validationException.addValidationError(\n                    \"[\" + THREADS_PER_ALLOCATION + \"] must be a power of 2 less than or equal to \" + MAX_THREADS_PER_ALLOCATION\n                );\n            }\n            if (queueCapacity < 1) {\n                validationException.addValidationError(\"[\" + QUEUE_CAPACITY + \"] must be a positive integer\");\n            }\n            if (queueCapacity > MAX_QUEUE_CAPACITY) {\n                validationException.addValidationError(\"[\" + QUEUE_CAPACITY + \"] must be less than \" + MAX_QUEUE_CAPACITY);\n            }\n            return validationException.validationErrors().isEmpty() ? null : validationException;\n        }",
  "diff_func": "--- func_before\n+++ func_after\n @Override\n         public ActionRequestValidationException validate() {\n             ActionRequestValidationException validationException = new ActionRequestValidationException();\n             if (waitForState.isAnyOf(VALID_WAIT_STATES) == false) {\n                 validationException.addValidationError(\n                     \"invalid [wait_for] state [\"\n                         + waitForState\n                         + \"]; must be one of [\"\n                         + Strings.arrayToCommaDelimitedString(VALID_WAIT_STATES)\n                 );\n             }\n             if (numberOfAllocations < 1) {\n                 validationException.addValidationError(\"[\" + NUMBER_OF_ALLOCATIONS + \"] must be a positive integer\");\n             }\n             if (threadsPerAllocation < 1) {\n                 validationException.addValidationError(\"[\" + THREADS_PER_ALLOCATION + \"] must be a positive integer\");\n             }\n             if (threadsPerAllocation > MAX_THREADS_PER_ALLOCATION || isPowerOf2(threadsPerAllocation) == false) {\n                 validationException.addValidationError(\n                     \"[\" + THREADS_PER_ALLOCATION + \"] must be a power of 2 less than or equal to \" + MAX_THREADS_PER_ALLOCATION\n                 );\n             }\n             if (queueCapacity < 1) {\n                 validationException.addValidationError(\"[\" + QUEUE_CAPACITY + \"] must be a positive integer\");\n             }\n+            if (queueCapacity > MAX_QUEUE_CAPACITY) {\n+                validationException.addValidationError(\"[\" + QUEUE_CAPACITY + \"] must be less than \" + MAX_QUEUE_CAPACITY);\n+            }\n             return validationException.validationErrors().isEmpty() ? null : validationException;\n         }",
  "diff_source": "custom",
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "\n\nThe patch adds validation to prevent excessive memory usage, addressing an availability issue rather than a security vulnerability. It's classified as a defect remediation.\n\n**Final Classification:** Defect Remediation & Feature Upgrades  \n**Confidence Score:** 0.95"
}