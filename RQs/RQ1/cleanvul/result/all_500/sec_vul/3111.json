{
  "id": 3111,
  "language": "Java",
  "commit_url": "https://github.com/hapifhir/org.hl7.fhir.core/commit/57edd95e8117c1f0450b361cc59fc2b8babab50c",
  "commit_sha": "57edd95e8117c1f0450b361cc59fc2b8babab50c",
  "commit_msg": "add -no_unicode_bidi_control_chars to the validator for CVE-2021-42574 (https://trojansource.codes/)",
  "pr_url": "https://github.com/hapifhir/org.hl7.fhir.core/pull/637",
  "pr_info": "no more info",
  "file_name": "org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/ValidationEngine.java",
  "func_name": "IOException",
  "func_before": "public InstanceValidator getValidator(FhirFormat format) throws FHIRException, IOException {\n    InstanceValidator validator = new InstanceValidator(context, null, null);\n    validator.setHintAboutNonMustSupport(hintAboutNonMustSupport);\n    validator.setAnyExtensionsAllowed(anyExtensionsAllowed);\n    validator.setNoInvariantChecks(isNoInvariantChecks());\n    validator.setWantInvariantInMessage(isWantInvariantInMessage());\n    validator.setValidationLanguage(language);\n    if (language != null) {\n      validator.getContext().setValidationMessageLanguage(Locale.forLanguageTag(language));\n    }\n    validator.setAssumeValidRestReferences(assumeValidRestReferences);\n    validator.setNoExtensibleWarnings(noExtensibleBindingMessages);\n    validator.setSecurityChecks(securityChecks);\n    validator.setCrumbTrails(crumbTrails);\n    validator.setAllowExamples(allowExampleUrls);\n    validator.setShowMessagesFromReferences(showMessagesFromReferences);\n    validator.getContext().setLocale(locale);\n    validator.setFetcher(this);\n    validator.getImplementationGuides().addAll(igs);\n    validator.getBundleValidationRules().addAll(bundleValidationRules);\n    validator.getValidationControl().putAll(validationControl);\n    validator.setQuestionnaireMode(questionnaireMode);\n    if (format == FhirFormat.SHC) {\n      igLoader.loadIg(getIgs(), getBinaries(), SHCParser.CURRENT_PACKAGE, true);      \n    }\n\n    return validator;\n  }",
  "func_after": "public InstanceValidator getValidator(FhirFormat format) throws FHIRException, IOException {\n    InstanceValidator validator = new InstanceValidator(context, null, null);\n    validator.setHintAboutNonMustSupport(hintAboutNonMustSupport);\n    validator.setAnyExtensionsAllowed(anyExtensionsAllowed);\n    validator.setNoInvariantChecks(isNoInvariantChecks());\n    validator.setWantInvariantInMessage(isWantInvariantInMessage());\n    validator.setValidationLanguage(language);\n    if (language != null) {\n      validator.getContext().setValidationMessageLanguage(Locale.forLanguageTag(language));\n    }\n    validator.setAssumeValidRestReferences(assumeValidRestReferences);\n    validator.setNoExtensibleWarnings(noExtensibleBindingMessages);\n    validator.setSecurityChecks(securityChecks);\n    validator.setCrumbTrails(crumbTrails);\n    validator.setAllowExamples(allowExampleUrls);\n    validator.setShowMessagesFromReferences(showMessagesFromReferences);\n    validator.getContext().setLocale(locale);\n    validator.setFetcher(this);\n    validator.getImplementationGuides().addAll(igs);\n    validator.getBundleValidationRules().addAll(bundleValidationRules);\n    validator.getValidationControl().putAll(validationControl);\n    validator.setQuestionnaireMode(questionnaireMode);\n    validator.setNoUnicodeBiDiControlChars(noUnicodeBiDiControlChars);\n    if (format == FhirFormat.SHC) {\n      igLoader.loadIg(getIgs(), getBinaries(), SHCParser.CURRENT_PACKAGE, true);      \n    }\n\n    return validator;\n  }",
  "diff_func": "--- func_before\n+++ func_after\n public InstanceValidator getValidator(FhirFormat format) throws FHIRException, IOException {\n     InstanceValidator validator = new InstanceValidator(context, null, null);\n     validator.setHintAboutNonMustSupport(hintAboutNonMustSupport);\n     validator.setAnyExtensionsAllowed(anyExtensionsAllowed);\n     validator.setNoInvariantChecks(isNoInvariantChecks());\n     validator.setWantInvariantInMessage(isWantInvariantInMessage());\n     validator.setValidationLanguage(language);\n     if (language != null) {\n       validator.getContext().setValidationMessageLanguage(Locale.forLanguageTag(language));\n     }\n     validator.setAssumeValidRestReferences(assumeValidRestReferences);\n     validator.setNoExtensibleWarnings(noExtensibleBindingMessages);\n     validator.setSecurityChecks(securityChecks);\n     validator.setCrumbTrails(crumbTrails);\n     validator.setAllowExamples(allowExampleUrls);\n     validator.setShowMessagesFromReferences(showMessagesFromReferences);\n     validator.getContext().setLocale(locale);\n     validator.setFetcher(this);\n     validator.getImplementationGuides().addAll(igs);\n     validator.getBundleValidationRules().addAll(bundleValidationRules);\n     validator.getValidationControl().putAll(validationControl);\n     validator.setQuestionnaireMode(questionnaireMode);\n+    validator.setNoUnicodeBiDiControlChars(noUnicodeBiDiControlChars);\n     if (format == FhirFormat.SHC) {\n       igLoader.loadIg(getIgs(), getBinaries(), SHCParser.CURRENT_PACKAGE, true);      \n     }\n \n     return validator;\n   }",
  "diff_source": "custom",
  "Bug Filter": "Security Vulnerability Fix\n\nConfidence Score: 0.95",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "\n\n**Final Output:**\n\nAnalysis: The patch adds a security-related setting to prevent Unicode bidirectional control characters, addressing a known security vulnerability (CVE-2021-42574). The code change directly mitigates a security issue.\n\nFinal Classification: Security Vulnerability Fix\n\nConfidence Score: 0.95"
}