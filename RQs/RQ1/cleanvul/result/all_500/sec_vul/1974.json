{
  "id": 1974,
  "language": "Java",
  "commit_url": "https://github.com/AOSPA/android_frameworks_base/commit/8eeb92950f4a7012d4cf282106a1418fd211f475",
  "commit_sha": "8eeb92950f4a7012d4cf282106a1418fd211f475",
  "commit_msg": "[SettingsProvider] mem limit should be checked before settings are updated\n\nPreviously, a setting is updated before the memory usage limit\ncheck, which can be exploited by malicious apps and cause OoM DoS.\n\nThis CL changes the logic to checkMemLimit -> update -> updateMemUsage.\n\nBUG: 239415861\nTest: atest com.android.providers.settings.SettingsStateTest\nChange-Id: I20551a2dba9aa79efa0c064824f349f551c2c2e4",
  "pr_url": null,
  "pr_info": "no more info",
  "file_name": "packages/SettingsProvider/src/com/android/providers/settings/SettingsState.java",
  "func_name": "GuardedBy",
  "func_before": "@GuardedBy(\"mLock\")\n    public boolean resetSettingLocked(String name) {\n        if (TextUtils.isEmpty(name) || !hasSettingLocked(name)) {\n            return false;\n        }\n\n        Setting setting = mSettings.get(name);\n\n        Setting oldSetting = new Setting(setting);\n        String oldValue = setting.getValue();\n        String oldDefaultValue = setting.getDefaultValue();\n\n        if (!setting.reset()) {\n            return false;\n        }\n\n        String newValue = setting.getValue();\n        String newDefaultValue = setting.getDefaultValue();\n\n        updateMemoryUsagePerPackageLocked(setting.packageName, oldValue,\n                newValue, oldDefaultValue, newDefaultValue);\n\n        addHistoricalOperationLocked(HISTORICAL_OPERATION_RESET, oldSetting);\n\n        scheduleWriteIfNeededLocked();\n\n        return true;\n    }",
  "func_after": "@GuardedBy(\"mLock\")\n    public boolean resetSettingLocked(String name) {\n        if (TextUtils.isEmpty(name) || !hasSettingLocked(name)) {\n            return false;\n        }\n\n        Setting setting = mSettings.get(name);\n\n        Setting oldSetting = new Setting(setting);\n        String oldValue = setting.getValue();\n        String oldDefaultValue = setting.getDefaultValue();\n        String newValue = oldDefaultValue;\n        String newDefaultValue = oldDefaultValue;\n\n        int newSize = getNewMemoryUsagePerPackageLocked(setting.packageName, oldValue,\n                newValue, oldDefaultValue, newDefaultValue);\n        checkNewMemoryUsagePerPackageLocked(setting.packageName, newSize);\n\n        if (!setting.reset()) {\n            return false;\n        }\n\n        updateMemoryUsagePerPackageLocked(setting.packageName, newSize);\n\n        addHistoricalOperationLocked(HISTORICAL_OPERATION_RESET, oldSetting);\n\n        scheduleWriteIfNeededLocked();\n\n        return true;\n    }",
  "diff_func": "--- func_before\n+++ func_after\n @GuardedBy(\"mLock\")\n     public boolean resetSettingLocked(String name) {\n         if (TextUtils.isEmpty(name) || !hasSettingLocked(name)) {\n             return false;\n         }\n \n         Setting setting = mSettings.get(name);\n \n         Setting oldSetting = new Setting(setting);\n         String oldValue = setting.getValue();\n         String oldDefaultValue = setting.getDefaultValue();\n+        String newValue = oldDefaultValue;\n+        String newDefaultValue = oldDefaultValue;\n+\n+        int newSize = getNewMemoryUsagePerPackageLocked(setting.packageName, oldValue,\n+                newValue, oldDefaultValue, newDefaultValue);\n+        checkNewMemoryUsagePerPackageLocked(setting.packageName, newSize);\n \n         if (!setting.reset()) {\n             return false;\n         }\n \n-        String newValue = setting.getValue();\n-        String newDefaultValue = setting.getDefaultValue();\n-\n-        updateMemoryUsagePerPackageLocked(setting.packageName, oldValue,\n+        updateMemoryUsagePerPackageLocked(setting.packageName, newSize);\n-                newValue, oldDefaultValue, newDefaultValue);\n \n         addHistoricalOperationLocked(HISTORICAL_OPERATION_RESET, oldSetting);\n \n         scheduleWriteIfNeededLocked();\n \n         return true;\n     }",
  "diff_source": "custom",
  "Bug Filter": "Security Vulnerability Fix\nConfidence Score: 0.95",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "\n\n**Final Output:**\nAnalysis: The patch modifies the order of operations to check memory limits before updating settings, preventing potential OoM DoS attacks. This addresses a security vulnerability.\nFinal Classification: Security Vulnerability Fix\nConfidence Score: 0.95"
}