{
  "id": 7762,
  "language": "JavaScript",
  "commit_url": "https://github.com/sebhildebrandt/systeminformation/commit/7972565812ccb2a610a22911c54c3446f4171392",
  "commit_sha": "7972565812ccb2a610a22911c54c3446f4171392",
  "commit_msg": "wifi sanitizing ssid names",
  "pr_url": null,
  "pr_info": "no more info",
  "file_name": "lib/wifi.js",
  "func_name": "wifiConnections",
  "func_before": "function wifiConnections(callback) {\n\n  return new Promise((resolve) => {\n    process.nextTick(() => {\n      const result = [];\n\n      if (_linux) {\n        const ifaces = ifaceListLinux();\n        const networkList = getWifiNetworkListNmi();\n        ifaces.forEach(ifaceDetail => {\n          let ifaceSanitized = '';\n          const s = util.isPrototypePolluted() ? '---' : util.sanitizeShellString(ifaceDetail.iface, true);\n          for (let i = 0; i <= util.mathMin(s.length, 2000); i++) {\n            if (s[i] !== undefined) {\n              ifaceSanitized = ifaceSanitized + s[i];\n            }\n          }\n\n          const nmiDetails = nmiDeviceLinux(ifaceSanitized);\n          const wpaDetails = wpaConnectionLinux(ifaceSanitized);\n          const ssid = nmiDetails.ssid || wpaDetails.ssid;\n          const network = networkList.filter(nw => nw.ssid === ssid);\n          const nmiConnection = nmiConnectionLinux(ssid);\n          const channel = network && network.length && network[0].channel ? network[0].channel : (wpaDetails.channel ? wpaDetails.channel : null);\n          const bssid = network && network.length && network[0].bssid ? network[0].bssid : (wpaDetails.bssid ? wpaDetails.bssid : null);\n          if (ssid && bssid) {\n            result.push({\n              id: ifaceDetail.id,\n              iface: ifaceDetail.iface,\n              model: nmiDetails.product,\n              ssid,\n              bssid: network && network.length && network[0].bssid ? network[0].bssid : (wpaDetails.bssid ? wpaDetails.bssid : null),\n              channel,\n              frequency: channel ? wifiFrequencyFromChannel(channel) : null,\n              type: nmiConnection.type ? nmiConnection.type : '802.11',\n              security: nmiConnection.security ? nmiConnection.security : (wpaDetails.security ? wpaDetails.security : null),\n              signalLevel: network && network.length && network[0].signalLevel ? network[0].signalLevel : null,\n              txRate: null\n            });\n          }\n        });\n        if (callback) {\n          callback(result);\n        }\n        resolve(result);\n      } else if (_darwin) {\n        let cmd = 'system_profiler SPNetworkDataType';\n        exec(cmd, function (error, stdout) {\n          const parts1 = stdout.toString().split('\\n\\n    Wi-Fi:\\n\\n');\n          if (parts1.length > 1) {\n            const lines = parts1[1].split('\\n\\n')[0].split('\\n');\n            const iface = util.getValue(lines, 'BSD Device Name', ':', true);\n            const model = util.getValue(lines, 'hardware', ':', true);\n            cmd = '/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -I';\n            exec(cmd, function (error, stdout) {\n              const lines2 = stdout.toString().split('\\n');\n              if (lines.length > 10) {\n                const ssid = util.getValue(lines2, 'ssid', ':', true);\n                const bssid = util.getValue(lines2, 'bssid', ':', true);\n                const security = util.getValue(lines2, 'link auth', ':', true);\n                const txRate = util.getValue(lines2, 'lastTxRate', ':', true);\n                const channel = util.getValue(lines2, 'channel', ':', true).split(',')[0];\n                const type = '802.11';\n                const rssi = util.toInt(util.getValue(lines2, 'agrCtlRSSI', ':', true));\n                const noise = util.toInt(util.getValue(lines2, 'agrCtlNoise', ':', true));\n                const signalLevel = rssi - noise;\n                if (ssid || bssid) {\n                  result.push({\n                    id: 'Wi-Fi',\n                    iface,\n                    model,\n                    ssid,\n                    bssid,\n                    channel: util.toInt(channel),\n                    frequency: channel ? wifiFrequencyFromChannel(channel) : null,\n                    type,\n                    security,\n                    signalLevel,\n                    txRate\n                  });\n                }\n              }\n              if (callback) {\n                callback(result);\n              }\n              resolve(result);\n            });\n          } else {\n            if (callback) {\n              callback(result);\n            }\n            resolve(result);\n          }\n        });\n      } else if (_windows) {\n        let cmd = 'netsh wlan show interfaces';\n        util.powerShell(cmd).then(function (stdout) {\n          const allLines = stdout.toString().split('\\r\\n');\n          for (let i = 0; i < allLines.length; i++) {\n            allLines[i] = allLines[i].trim();\n          }\n          const parts = allLines.join('\\r\\n').split(':\\r\\n\\r\\n');\n          parts.shift();\n          parts.forEach(part => {\n            const lines = part.split('\\r\\n');\n            if (lines.length >= 5) {\n              const iface = lines[0].indexOf(':') >= 0 ? lines[0].split(':')[1].trim() : '';\n              const model = lines[1].indexOf(':') >= 0 ? lines[1].split(':')[1].trim() : '';\n              const id = lines[2].indexOf(':') >= 0 ? lines[2].split(':')[1].trim() : '';\n              const ssid = util.getValue(lines, 'SSID', ':', true);\n              const bssid = util.getValue(lines, 'BSSID', ':', true);\n              const signalLevel = util.getValue(lines, 'Signal', ':', true);\n              const type = util.getValue(lines, 'Radio type', ':', true) || util.getValue(lines, 'Type de radio', ':', true) || util.getValue(lines, 'Funktyp', ':', true) || null;\n              const security = util.getValue(lines, 'authentication', ':', true) || util.getValue(lines, 'Authentification', ':', true) || util.getValue(lines, 'Authentifizierung', ':', true) || null;\n              const channel = util.getValue(lines, 'Channel', ':', true) || util.getValue(lines, 'Canal', ':', true) || util.getValue(lines, 'Kanal', ':', true) || null;\n              const txRate = util.getValue(lines, 'Transmit rate (mbps)', ':', true) || util.getValue(lines, 'Transmission (mbit/s)', ':', true) || util.getValue(lines, 'Empfangsrate (MBit/s)', ':', true) || null;\n              if (model && id && ssid && bssid) {\n                result.push({\n                  id,\n                  iface,\n                  model,\n                  ssid,\n                  bssid,\n                  channel: util.toInt(channel),\n                  frequency: channel ? wifiFrequencyFromChannel(channel) : null,\n                  type,\n                  security,\n                  signalLevel,\n                  txRate: util.toInt(txRate) || null\n                });\n              }\n            }\n          });\n          if (callback) {\n            callback(result);\n          }\n          resolve(result);\n        });\n      } else {\n        if (callback) {\n          callback(result);\n        }\n        resolve(result);\n      }\n    });\n  });\n}",
  "func_after": "function wifiConnections(callback) {\n\n  return new Promise((resolve) => {\n    process.nextTick(() => {\n      const result = [];\n\n      if (_linux) {\n        const ifaces = ifaceListLinux();\n        const networkList = getWifiNetworkListNmi();\n        ifaces.forEach(ifaceDetail => {\n          let ifaceSanitized = '';\n          const s = util.isPrototypePolluted() ? '---' : util.sanitizeShellString(ifaceDetail.iface, true);\n          for (let i = 0; i <= util.mathMin(s.length, 2000); i++) {\n            if (s[i] !== undefined) {\n              ifaceSanitized = ifaceSanitized + s[i];\n            }\n          }\n\n          const nmiDetails = nmiDeviceLinux(ifaceSanitized);\n          const wpaDetails = wpaConnectionLinux(ifaceSanitized);\n          const ssid = nmiDetails.ssid || wpaDetails.ssid;\n          const network = networkList.filter(nw => nw.ssid === ssid);\n          let ssidSanitized = '';\n          const t = util.isPrototypePolluted() ? '---' : util.sanitizeShellString(ssid, true);\n          for (let i = 0; i <= util.mathMin(t.length, 2000); i++) {\n            if (t[i] !== undefined) {\n              ssidSanitized = ssidSanitized + t[i];\n            }\n          }\n\n          const nmiConnection = nmiConnectionLinux(ssidSanitized);\n          const channel = network && network.length && network[0].channel ? network[0].channel : (wpaDetails.channel ? wpaDetails.channel : null);\n          const bssid = network && network.length && network[0].bssid ? network[0].bssid : (wpaDetails.bssid ? wpaDetails.bssid : null);\n          if (ssid && bssid) {\n            result.push({\n              id: ifaceDetail.id,\n              iface: ifaceDetail.iface,\n              model: nmiDetails.product,\n              ssid,\n              bssid: network && network.length && network[0].bssid ? network[0].bssid : (wpaDetails.bssid ? wpaDetails.bssid : null),\n              channel,\n              frequency: channel ? wifiFrequencyFromChannel(channel) : null,\n              type: nmiConnection.type ? nmiConnection.type : '802.11',\n              security: nmiConnection.security ? nmiConnection.security : (wpaDetails.security ? wpaDetails.security : null),\n              signalLevel: network && network.length && network[0].signalLevel ? network[0].signalLevel : null,\n              txRate: null\n            });\n          }\n        });\n        if (callback) {\n          callback(result);\n        }\n        resolve(result);\n      } else if (_darwin) {\n        let cmd = 'system_profiler SPNetworkDataType';\n        exec(cmd, function (error, stdout) {\n          const parts1 = stdout.toString().split('\\n\\n    Wi-Fi:\\n\\n');\n          if (parts1.length > 1) {\n            const lines = parts1[1].split('\\n\\n')[0].split('\\n');\n            const iface = util.getValue(lines, 'BSD Device Name', ':', true);\n            const model = util.getValue(lines, 'hardware', ':', true);\n            cmd = '/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -I';\n            exec(cmd, function (error, stdout) {\n              const lines2 = stdout.toString().split('\\n');\n              if (lines.length > 10) {\n                const ssid = util.getValue(lines2, 'ssid', ':', true);\n                const bssid = util.getValue(lines2, 'bssid', ':', true);\n                const security = util.getValue(lines2, 'link auth', ':', true);\n                const txRate = util.getValue(lines2, 'lastTxRate', ':', true);\n                const channel = util.getValue(lines2, 'channel', ':', true).split(',')[0];\n                const type = '802.11';\n                const rssi = util.toInt(util.getValue(lines2, 'agrCtlRSSI', ':', true));\n                const noise = util.toInt(util.getValue(lines2, 'agrCtlNoise', ':', true));\n                const signalLevel = rssi - noise;\n                if (ssid || bssid) {\n                  result.push({\n                    id: 'Wi-Fi',\n                    iface,\n                    model,\n                    ssid,\n                    bssid,\n                    channel: util.toInt(channel),\n                    frequency: channel ? wifiFrequencyFromChannel(channel) : null,\n                    type,\n                    security,\n                    signalLevel,\n                    txRate\n                  });\n                }\n              }\n              if (callback) {\n                callback(result);\n              }\n              resolve(result);\n            });\n          } else {\n            if (callback) {\n              callback(result);\n            }\n            resolve(result);\n          }\n        });\n      } else if (_windows) {\n        let cmd = 'netsh wlan show interfaces';\n        util.powerShell(cmd).then(function (stdout) {\n          const allLines = stdout.toString().split('\\r\\n');\n          for (let i = 0; i < allLines.length; i++) {\n            allLines[i] = allLines[i].trim();\n          }\n          const parts = allLines.join('\\r\\n').split(':\\r\\n\\r\\n');\n          parts.shift();\n          parts.forEach(part => {\n            const lines = part.split('\\r\\n');\n            if (lines.length >= 5) {\n              const iface = lines[0].indexOf(':') >= 0 ? lines[0].split(':')[1].trim() : '';\n              const model = lines[1].indexOf(':') >= 0 ? lines[1].split(':')[1].trim() : '';\n              const id = lines[2].indexOf(':') >= 0 ? lines[2].split(':')[1].trim() : '';\n              const ssid = util.getValue(lines, 'SSID', ':', true);\n              const bssid = util.getValue(lines, 'BSSID', ':', true);\n              const signalLevel = util.getValue(lines, 'Signal', ':', true);\n              const type = util.getValue(lines, 'Radio type', ':', true) || util.getValue(lines, 'Type de radio', ':', true) || util.getValue(lines, 'Funktyp', ':', true) || null;\n              const security = util.getValue(lines, 'authentication', ':', true) || util.getValue(lines, 'Authentification', ':', true) || util.getValue(lines, 'Authentifizierung', ':', true) || null;\n              const channel = util.getValue(lines, 'Channel', ':', true) || util.getValue(lines, 'Canal', ':', true) || util.getValue(lines, 'Kanal', ':', true) || null;\n              const txRate = util.getValue(lines, 'Transmit rate (mbps)', ':', true) || util.getValue(lines, 'Transmission (mbit/s)', ':', true) || util.getValue(lines, 'Empfangsrate (MBit/s)', ':', true) || null;\n              if (model && id && ssid && bssid) {\n                result.push({\n                  id,\n                  iface,\n                  model,\n                  ssid,\n                  bssid,\n                  channel: util.toInt(channel),\n                  frequency: channel ? wifiFrequencyFromChannel(channel) : null,\n                  type,\n                  security,\n                  signalLevel,\n                  txRate: util.toInt(txRate) || null\n                });\n              }\n            }\n          });\n          if (callback) {\n            callback(result);\n          }\n          resolve(result);\n        });\n      } else {\n        if (callback) {\n          callback(result);\n        }\n        resolve(result);\n      }\n    });\n  });\n}",
  "diff_func": "--- func_before\n+++ func_after\n function wifiConnections(callback) {\n \n   return new Promise((resolve) => {\n     process.nextTick(() => {\n       const result = [];\n \n       if (_linux) {\n         const ifaces = ifaceListLinux();\n         const networkList = getWifiNetworkListNmi();\n         ifaces.forEach(ifaceDetail => {\n           let ifaceSanitized = '';\n           const s = util.isPrototypePolluted() ? '---' : util.sanitizeShellString(ifaceDetail.iface, true);\n           for (let i = 0; i <= util.mathMin(s.length, 2000); i++) {\n             if (s[i] !== undefined) {\n               ifaceSanitized = ifaceSanitized + s[i];\n             }\n           }\n \n           const nmiDetails = nmiDeviceLinux(ifaceSanitized);\n           const wpaDetails = wpaConnectionLinux(ifaceSanitized);\n           const ssid = nmiDetails.ssid || wpaDetails.ssid;\n           const network = networkList.filter(nw => nw.ssid === ssid);\n+          let ssidSanitized = '';\n+          const t = util.isPrototypePolluted() ? '---' : util.sanitizeShellString(ssid, true);\n+          for (let i = 0; i <= util.mathMin(t.length, 2000); i++) {\n+            if (t[i] !== undefined) {\n+              ssidSanitized = ssidSanitized + t[i];\n+            }\n+          }\n+\n-          const nmiConnection = nmiConnectionLinux(ssid);\n+          const nmiConnection = nmiConnectionLinux(ssidSanitized);\n           const channel = network && network.length && network[0].channel ? network[0].channel : (wpaDetails.channel ? wpaDetails.channel : null);\n           const bssid = network && network.length && network[0].bssid ? network[0].bssid : (wpaDetails.bssid ? wpaDetails.bssid : null);\n           if (ssid && bssid) {\n             result.push({\n               id: ifaceDetail.id,\n               iface: ifaceDetail.iface,\n               model: nmiDetails.product,\n               ssid,\n               bssid: network && network.length && network[0].bssid ? network[0].bssid : (wpaDetails.bssid ? wpaDetails.bssid : null),\n           ",
  "diff_source": "custom",
  "Bug Filter": "Security Vulnerability Fix\n\nConfidence Score: 0.95",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "\n\n**Final Output:**\n\nAnalysis: The patch introduces sanitization of SSID names before using them in a function, likely to prevent command injection attacks. This addresses a potential security vulnerability by ensuring inputs are sanitized, mitigating risks of unauthorized access or code execution.\n\nFinal Classification: Security Vulnerability Fix\n\nConfidence Score: 0.95"
}