{
  "id": 3723,
  "language": "C/C++",
  "commit_url": "https://github.com/gpac/gpac/commit/35ab4475a7df9b2a4bcab235e379c0c3ec543658",
  "commit_sha": "35ab4475a7df9b2a4bcab235e379c0c3ec543658",
  "commit_msg": "fix some overflows due to strcpy\n\nfixes #1184, #1186, #1187 among other things",
  "pr_url": null,
  "pr_info": "no more info",
  "file_name": "src/scene_manager/scene_manager.c",
  "func_name": "gf_sm_load_init",
  "func_before": "GF_EXPORT\nGF_Err gf_sm_load_init(GF_SceneLoader *load)\n{\n\tGF_Err e = GF_NOT_SUPPORTED;\n\tchar *ext, szExt[50];\n\t/*we need at least a scene graph*/\n\tif (!load || (!load->ctx && !load->scene_graph)\n#ifndef GPAC_DISABLE_ISOM\n\t        || (!load->fileName && !load->isom && !(load->flags & GF_SM_LOAD_FOR_PLAYBACK) )\n#endif\n\t   ) return GF_BAD_PARAM;\n\n\tif (!load->type) {\n#ifndef GPAC_DISABLE_ISOM\n\t\tif (load->isom) {\n\t\t\tload->type = GF_SM_LOAD_MP4;\n\t\t} else\n#endif\n\t\t{\n\t\t\text = (char *)strrchr(load->fileName, '.');\n\t\t\tif (!ext) return GF_NOT_SUPPORTED;\n\t\t\tif (!stricmp(ext, \".gz\")) {\n\t\t\t\tchar *anext;\n\t\t\t\text[0] = 0;\n\t\t\t\tanext = (char *)strrchr(load->fileName, '.');\n\t\t\t\text[0] = '.';\n\t\t\t\text = anext;\n\t\t\t}\n\t\t\tstrcpy(szExt, &ext[1]);\n\t\t\tstrlwr(szExt);\n\t\t\tif (strstr(szExt, \"bt\")) load->type = GF_SM_LOAD_BT;\n\t\t\telse if (strstr(szExt, \"wrl\")) load->type = GF_SM_LOAD_VRML;\n\t\t\telse if (strstr(szExt, \"x3dv\")) load->type = GF_SM_LOAD_X3DV;\n#ifndef GPAC_DISABLE_LOADER_XMT\n\t\t\telse if (strstr(szExt, \"xmt\") || strstr(szExt, \"xmta\")) load->type = GF_SM_LOAD_XMTA;\n\t\t\telse if (strstr(szExt, \"x3d\")) load->type = GF_SM_LOAD_X3D;\n#endif\n\t\t\telse if (strstr(szExt, \"swf\")) load->type = GF_SM_LOAD_SWF;\n\t\t\telse if (strstr(szExt, \"mov\")) load->type = GF_SM_LOAD_QT;\n\t\t\telse if (strstr(szExt, \"svg\")) load->type = GF_SM_LOAD_SVG;\n\t\t\telse if (strstr(szExt, \"xsr\")) load->type = GF_SM_LOAD_XSR;\n\t\t\telse if (strstr(szExt, \"xbl\")) load->type = GF_SM_LOAD_XBL;\n\t\t\telse if (strstr(szExt, \"xml\")) {\n\t\t\t\tchar *rtype = gf_xml_get_root_type(load->fileName, &e);\n\t\t\t\tif (rtype) {\n\t\t\t\t\tif (!strcmp(rtype, \"SAFSession\")) load->type = GF_SM_LOAD_XSR;\n\t\t\t\t\telse if (!strcmp(rtype, \"XMT-A\")) load->type = GF_SM_LOAD_XMTA;\n\t\t\t\t\telse if (!strcmp(rtype, \"X3D\")) load->type = GF_SM_LOAD_X3D;\n\t\t\t\t\telse if (!strcmp(rtype, \"bindings\")) load->type = GF_SM_LOAD_XBL;\n\n\t\t\t\t\tgf_free(rtype);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif (!load->type) return e;\n\n\tif (!load->scene_graph) load->scene_graph = load->ctx->scene_graph;\n\n\tswitch (load->type) {\n#ifndef GPAC_DISABLE_LOADER_BT\n\tcase GF_SM_LOAD_BT:\n\tcase GF_SM_LOAD_VRML:\n\tcase GF_SM_LOAD_X3DV:\n\t\treturn gf_sm_load_init_bt(load);\n#endif\n\n#ifndef GPAC_DISABLE_LOADER_XMT\n\tcase GF_SM_LOAD_XMTA:\n\tcase GF_SM_LOAD_X3D:\n\t\treturn gf_sm_load_init_xmt(load);\n#endif\n\n#ifndef GPAC_DISABLE_SVG\n\tcase GF_SM_LOAD_SVG:\n\tcase GF_SM_LOAD_XSR:\n\tcase GF_SM_LOAD_DIMS:\n\t\treturn gf_sm_load_init_svg(load);\n\n\tcase GF_SM_LOAD_XBL:\n\t\te = gf_sm_load_init_xbl(load);\n\n\t\tload->process = gf_sm_load_run_xbl;\n\t\tload->done = gf_sm_load_done_xbl;\n\t\treturn e;\n#endif\n\n#ifndef GPAC_DISABLE_SWF_IMPORT\n\tcase GF_SM_LOAD_SWF:\n\t\treturn gf_sm_load_init_swf(load);\n#endif\n\n#ifndef GPAC_DISABLE_LOADER_ISOM\n\tcase GF_SM_LOAD_MP4:\n\t\treturn gf_sm_load_init_isom(load);\n#endif\n\n#ifndef GPAC_DISABLE_QTVR\n\tcase GF_SM_LOAD_QT:\n\t\treturn gf_sm_load_init_qt(load);\n#endif\n\tdefault:\n\t\treturn GF_NOT_SUPPORTED;\n\t}\n\treturn GF_NOT_SUPPORTED;\n}",
  "func_after": "GF_EXPORT\nGF_Err gf_sm_load_init(GF_SceneLoader *load)\n{\n\tGF_Err e = GF_NOT_SUPPORTED;\n\tchar *ext, szExt[50];\n\t/*we need at least a scene graph*/\n\tif (!load || (!load->ctx && !load->scene_graph)\n#ifndef GPAC_DISABLE_ISOM\n\t        || (!load->fileName && !load->isom && !(load->flags & GF_SM_LOAD_FOR_PLAYBACK) )\n#endif\n\t   ) return GF_BAD_PARAM;\n\n\tif (!load->type) {\n#ifndef GPAC_DISABLE_ISOM\n\t\tif (load->isom) {\n\t\t\tload->type = GF_SM_LOAD_MP4;\n\t\t} else\n#endif\n\t\t{\n\t\t\text = (char *)strrchr(load->fileName, '.');\n\t\t\tif (!ext) return GF_NOT_SUPPORTED;\n\t\t\tif (!stricmp(ext, \".gz\")) {\n\t\t\t\tchar *anext;\n\t\t\t\text[0] = 0;\n\t\t\t\tanext = (char *)strrchr(load->fileName, '.');\n\t\t\t\text[0] = '.';\n\t\t\t\text = anext;\n\t\t\t}\n\t\t\tif (strlen(ext) < 2 || strlen(ext) > sizeof(szExt)) {\n\t\t\t\tGF_LOG(GF_LOG_ERROR, GF_LOG_SCENE, (\"[Scene Manager] invalid extension in file name %s\\n\", load->fileName));\n\t\t\t\treturn GF_NOT_SUPPORTED;\n\t\t\t}\n\t\t\tstrcpy(szExt, &ext[1]);\n\t\t\tstrlwr(szExt);\n\t\t\tif (strstr(szExt, \"bt\")) load->type = GF_SM_LOAD_BT;\n\t\t\telse if (strstr(szExt, \"wrl\")) load->type = GF_SM_LOAD_VRML;\n\t\t\telse if (strstr(szExt, \"x3dv\")) load->type = GF_SM_LOAD_X3DV;\n#ifndef GPAC_DISABLE_LOADER_XMT\n\t\t\telse if (strstr(szExt, \"xmt\") || strstr(szExt, \"xmta\")) load->type = GF_SM_LOAD_XMTA;\n\t\t\telse if (strstr(szExt, \"x3d\")) load->type = GF_SM_LOAD_X3D;\n#endif\n\t\t\telse if (strstr(szExt, \"swf\")) load->type = GF_SM_LOAD_SWF;\n\t\t\telse if (strstr(szExt, \"mov\")) load->type = GF_SM_LOAD_QT;\n\t\t\telse if (strstr(szExt, \"svg\")) load->type = GF_SM_LOAD_SVG;\n\t\t\telse if (strstr(szExt, \"xsr\")) load->type = GF_SM_LOAD_XSR;\n\t\t\telse if (strstr(szExt, \"xbl\")) load->type = GF_SM_LOAD_XBL;\n\t\t\telse if (strstr(szExt, \"xml\")) {\n\t\t\t\tchar *rtype = gf_xml_get_root_type(load->fileName, &e);\n\t\t\t\tif (rtype) {\n\t\t\t\t\tif (!strcmp(rtype, \"SAFSession\")) load->type = GF_SM_LOAD_XSR;\n\t\t\t\t\telse if (!strcmp(rtype, \"XMT-A\")) load->type = GF_SM_LOAD_XMTA;\n\t\t\t\t\telse if (!strcmp(rtype, \"X3D\")) load->type = GF_SM_LOAD_X3D;\n\t\t\t\t\telse if (!strcmp(rtype, \"bindings\")) load->type = GF_SM_LOAD_XBL;\n\n\t\t\t\t\tgf_free(rtype);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif (!load->type) return e;\n\n\tif (!load->scene_graph) load->scene_graph = load->ctx->scene_graph;\n\n\tswitch (load->type) {\n#ifndef GPAC_DISABLE_LOADER_BT\n\tcase GF_SM_LOAD_BT:\n\tcase GF_SM_LOAD_VRML:\n\tcase GF_SM_LOAD_X3DV:\n\t\treturn gf_sm_load_init_bt(load);\n#endif\n\n#ifndef GPAC_DISABLE_LOADER_XMT\n\tcase GF_SM_LOAD_XMTA:\n\tcase GF_SM_LOAD_X3D:\n\t\treturn gf_sm_load_init_xmt(load);\n#endif\n\n#ifndef GPAC_DISABLE_SVG\n\tcase GF_SM_LOAD_SVG:\n\tcase GF_SM_LOAD_XSR:\n\tcase GF_SM_LOAD_DIMS:\n\t\treturn gf_sm_load_init_svg(load);\n\n\tcase GF_SM_LOAD_XBL:\n\t\te = gf_sm_load_init_xbl(load);\n\n\t\tload->process = gf_sm_load_run_xbl;\n\t\tload->done = gf_sm_load_done_xbl;\n\t\treturn e;\n#endif\n\n#ifndef GPAC_DISABLE_SWF_IMPORT\n\tcase GF_SM_LOAD_SWF:\n\t\treturn gf_sm_load_init_swf(load);\n#endif\n\n#ifndef GPAC_DISABLE_LOADER_ISOM\n\tcase GF_SM_LOAD_MP4:\n\t\treturn gf_sm_load_init_isom(load);\n#endif\n\n#ifndef GPAC_DISABLE_QTVR\n\tcase GF_SM_LOAD_QT:\n\t\treturn gf_sm_load_init_qt(load);\n#endif\n\tdefault:\n\t\treturn GF_NOT_SUPPORTED;\n\t}\n\treturn GF_NOT_SUPPORTED;\n}",
  "diff_func": "--- func_before\n+++ func_after\n GF_EXPORT\n GF_Err gf_sm_load_init(GF_SceneLoader *load)\n {\n \tGF_Err e = GF_NOT_SUPPORTED;\n \tchar *ext, szExt[50];\n \t/*we need at least a scene graph*/\n \tif (!load || (!load->ctx && !load->scene_graph)\n #ifndef GPAC_DISABLE_ISOM\n \t        || (!load->fileName && !load->isom && !(load->flags & GF_SM_LOAD_FOR_PLAYBACK) )\n #endif\n \t   ) return GF_BAD_PARAM;\n \n \tif (!load->type) {\n #ifndef GPAC_DISABLE_ISOM\n \t\tif (load->isom) {\n \t\t\tload->type = GF_SM_LOAD_MP4;\n \t\t} else\n #endif\n \t\t{\n \t\t\text = (char *)strrchr(load->fileName, '.');\n \t\t\tif (!ext) return GF_NOT_SUPPORTED;\n \t\t\tif (!stricmp(ext, \".gz\")) {\n \t\t\t\tchar *anext;\n \t\t\t\text[0] = 0;\n \t\t\t\tanext = (char *)strrchr(load->fileName, '.');\n \t\t\t\text[0] = '.';\n \t\t\t\text = anext;\n+\t\t\t}\n+\t\t\tif (strlen(ext) < 2 || strlen(ext) > sizeof(szExt)) {\n+\t\t\t\tGF_LOG(GF_LOG_ERROR, GF_LOG_SCENE, (\"[Scene Manager] invalid extension in file name %s\\n\", load->fileName));\n+\t\t\t\treturn GF_NOT_SUPPORTED;\n \t\t\t}\n \t\t\tstrcpy(szExt, &ext[1]);\n \t\t\tstrlwr(szExt);\n \t\t\tif (strstr(szExt, \"bt\")) load->type = GF_SM_LOAD_BT;\n \t\t\telse if (strstr(szExt, \"wrl\")) load->type = GF_SM_LOAD_VRML;\n \t\t\telse if (strstr(szExt, \"x3dv\")) load->type = GF_SM_LOAD_X3DV;\n #ifndef GPAC_DISABLE_LOADER_XMT\n \t\t\telse if (strstr(szExt, \"xmt\") || strstr(szExt, \"xmta\")) load->type = GF_SM_LOAD_XMTA;\n \t\t\telse if (strstr(szExt, \"x3d\")) load->type = GF_SM_LOAD_X3D;\n #endif\n \t\t\telse if (strstr(szExt, \"swf\")) load->type = GF_SM_LOAD_SWF;\n \t\t\telse if (strstr(szExt, \"mov\")) load->type = GF_SM_LOAD_QT;\n \t\t\telse if (strstr(szExt, \"svg\")) load->type = GF_SM_LOAD_SVG;\n \t\t\telse if (strstr(szExt, \"xsr\")) load->type = GF_SM_LOAD_XSR;\n \t\t\telse if (strstr(szExt, \"xbl\")) load->type = GF_SM_LOAD_XBL;\n \t\t\telse if (strstr(szExt, \"xml\")) {\n \t\t\t\tchar *rtype = gf_xml_get_root_type(load->fileName, &e);\n \t\t\t\tif (rtype) {\n \t\t\t\t\tif (!strcmp(rtype, \"SAFSession\")) load->type = GF_SM_LOAD_XSR;\n \t\t\t\t\telse if (!strcmp(rtype, \"XMT-A\")) load->type = GF_SM_LOAD_XMTA;\n \t\t\t\t\telse if (!strcmp(rty",
  "diff_source": "custom",
  "Bug Filter": "** Security Vulnerability Fix  \n**Confidence Score:** 1.0",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "\n\nThe patch addresses a buffer overflow vulnerability by adding checks before using strcpy, thus preventing potential security exploits.\n\n**Final Classification:** Security Vulnerability Fix  \n**Confidence Score:** 1.0"
}