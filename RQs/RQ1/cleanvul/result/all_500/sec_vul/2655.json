{
  "id": 2655,
  "language": "Java",
  "commit_url": "https://github.com/ResurrectionRemix/Resurrection_packages_apps_Settings/commit/40f442b5583d355eae4caab6ba6337b4c616224a",
  "commit_sha": "40f442b5583d355eae4caab6ba6337b4c616224a",
  "commit_msg": "Prevent HTML Injection on the Device Admin request screen\n\nThe root issue is that CharSequence is an interface.\nString implements that interface, however, Spanned class\ntoo which is a rich text format that can store HTML code.\n\nThe solution is enforce to use String type which won't include\nany HTML function.\n\nTest: Rebuilt apk and see the string without HTML style.\nBug: 179042963\nChange-Id: I53b460b12da918e022d2f2934f114d205dbaadb0\nMerged-In: I53b460b12da918e022d2f2934f114d205dbaadb0\n(cherry picked from commit 0bf3c98b2f325f70d5492a7c7ade16951a802600)\n(cherry picked from commit 52f9039d5cc775a02dab90492cca98850a82872a)",
  "pr_url": "https://github.com/ResurrectionRemix/Resurrection_packages_apps_Settings/pull/1307",
  "pr_info": "no more info",
  "file_name": "src/com/android/settings/applications/specialaccess/deviceadmin/DeviceAdminAdd.java",
  "func_name": "updateInterface",
  "func_before": "void updateInterface() {\n        findViewById(R.id.restricted_icon).setVisibility(View.GONE);\n        mAdminIcon.setImageDrawable(mDeviceAdmin.loadIcon(getPackageManager()));\n        mAdminName.setText(mDeviceAdmin.loadLabel(getPackageManager()));\n        try {\n            mAdminDescription.setText(\n                    mDeviceAdmin.loadDescription(getPackageManager()));\n            mAdminDescription.setVisibility(View.VISIBLE);\n        } catch (Resources.NotFoundException e) {\n            mAdminDescription.setVisibility(View.GONE);\n        }\n        if (mAddMsgText != null) {\n            mAddMsg.setText(mAddMsgText);\n            mAddMsg.setVisibility(View.VISIBLE);\n        } else {\n            mAddMsg.setVisibility(View.GONE);\n            mAddMsgExpander.setVisibility(View.GONE);\n        }\n        if (!mRefreshing && !mAddingProfileOwner\n                && mDPM.isAdminActive(mDeviceAdmin.getComponent())) {\n            mAdding = false;\n            final boolean isProfileOwner =\n                    mDeviceAdmin.getComponent().equals(mDPM.getProfileOwner());\n            final boolean isManagedProfile = isManagedProfile(mDeviceAdmin);\n            if (isProfileOwner && isManagedProfile) {\n                // Profile owner in a managed profile, user can remove profile to disable admin.\n                mAdminWarning.setText(R.string.admin_profile_owner_message);\n                mActionButton.setText(R.string.remove_managed_profile_label);\n\n                final EnforcedAdmin admin = getAdminEnforcingCantRemoveProfile();\n                final boolean hasBaseRestriction = hasBaseCantRemoveProfileRestriction();\n                if (admin != null && !hasBaseRestriction) {\n                    findViewById(R.id.restricted_icon).setVisibility(View.VISIBLE);\n                }\n                mActionButton.setEnabled(admin == null && !hasBaseRestriction);\n            } else if (isProfileOwner || mDeviceAdmin.getComponent().equals(\n                            mDPM.getDeviceOwnerComponentOnCallingUser())) {\n                // Profile owner in a user or device owner, user can't disable admin.\n                if (isProfileOwner) {\n                    // Show profile owner in a user description.\n                    mAdminWarning.setText(R.string.admin_profile_owner_user_message);\n                } else {\n                    // Show device owner description.\n                    mAdminWarning.setText(R.string.admin_device_owner_message);\n                }\n                mActionButton.setText(R.string.remove_device_admin);\n                mActionButton.setEnabled(false);\n            } else {\n                addDeviceAdminPolicies(false /* showDescription */);\n                mAdminWarning.setText(getString(R.string.device_admin_status,\n                        mDeviceAdmin.getActivityInfo().applicationInfo.loadLabel(\n                        getPackageManager())));\n                setTitle(R.string.active_device_admin_msg);\n                if (mUninstalling) {\n                    mActionButton.setText(R.string.remove_and_uninstall_device_admin);\n                } else {\n                    mActionButton.setText(R.string.remove_device_admin);\n                }\n            }\n            CharSequence supportMessage = mDPM.getLongSupportMessageForUser(\n                    mDeviceAdmin.getComponent(), UserHandle.myUserId());\n            if (!TextUtils.isEmpty(supportMessage)) {\n                mSupportMessage.setText(supportMessage);\n                mSupportMessage.setVisibility(View.VISIBLE);\n            } else {\n                mSupportMessage.setVisibility(View.GONE);\n            }\n        } else {\n            addDeviceAdminPolicies(true /* showDescription */);\n            mAdminWarning.setText(getString(R.string.device_admin_warning,\n                    mDeviceAdmin.getActivityInfo().applicationInfo.loadLabel(getPackageManager())));\n            setTitle(getText(R.string.add_device_admin_msg));\n            mActionButton.setText(getText(R.string.add_device_admin));\n            if (isAdminUninstallable()) {\n                mUninstallButton.setVisibility(View.VISIBLE);\n            }\n            mSupportMessage.setVisibility(View.GONE);\n            mAdding = true;\n        }\n    }",
  "func_after": "void updateInterface() {\n        findViewById(R.id.restricted_icon).setVisibility(View.GONE);\n        mAdminIcon.setImageDrawable(mDeviceAdmin.loadIcon(getPackageManager()));\n        mAdminName.setText(mDeviceAdmin.loadLabel(getPackageManager()));\n        try {\n            mAdminDescription.setText(\n                    mDeviceAdmin.loadDescription(getPackageManager()));\n            mAdminDescription.setVisibility(View.VISIBLE);\n        } catch (Resources.NotFoundException e) {\n            mAdminDescription.setVisibility(View.GONE);\n        }\n        if (!TextUtils.isEmpty(mAddMsgText)) {\n            mAddMsg.setText(mAddMsgText);\n            mAddMsg.setVisibility(View.VISIBLE);\n        } else {\n            mAddMsg.setVisibility(View.GONE);\n            mAddMsgExpander.setVisibility(View.GONE);\n        }\n        if (!mRefreshing && !mAddingProfileOwner\n                && mDPM.isAdminActive(mDeviceAdmin.getComponent())) {\n            mAdding = false;\n            final boolean isProfileOwner =\n                    mDeviceAdmin.getComponent().equals(mDPM.getProfileOwner());\n            final boolean isManagedProfile = isManagedProfile(mDeviceAdmin);\n            if (isProfileOwner && isManagedProfile) {\n                // Profile owner in a managed profile, user can remove profile to disable admin.\n                mAdminWarning.setText(R.string.admin_profile_owner_message);\n                mActionButton.setText(R.string.remove_managed_profile_label);\n\n                final EnforcedAdmin admin = getAdminEnforcingCantRemoveProfile();\n                final boolean hasBaseRestriction = hasBaseCantRemoveProfileRestriction();\n                if (admin != null && !hasBaseRestriction) {\n                    findViewById(R.id.restricted_icon).setVisibility(View.VISIBLE);\n                }\n                mActionButton.setEnabled(admin == null && !hasBaseRestriction);\n            } else if (isProfileOwner || mDeviceAdmin.getComponent().equals(\n                            mDPM.getDeviceOwnerComponentOnCallingUser())) {\n                // Profile owner in a user or device owner, user can't disable admin.\n                if (isProfileOwner) {\n                    // Show profile owner in a user description.\n                    mAdminWarning.setText(R.string.admin_profile_owner_user_message);\n                } else {\n                    // Show device owner description.\n                    mAdminWarning.setText(R.string.admin_device_owner_message);\n                }\n                mActionButton.setText(R.string.remove_device_admin);\n                mActionButton.setEnabled(false);\n            } else {\n                addDeviceAdminPolicies(false /* showDescription */);\n                mAdminWarning.setText(getString(R.string.device_admin_status,\n                        mDeviceAdmin.getActivityInfo().applicationInfo.loadLabel(\n                        getPackageManager())));\n                setTitle(R.string.active_device_admin_msg);\n                if (mUninstalling) {\n                    mActionButton.setText(R.string.remove_and_uninstall_device_admin);\n                } else {\n                    mActionButton.setText(R.string.remove_device_admin);\n                }\n            }\n            CharSequence supportMessage = mDPM.getLongSupportMessageForUser(\n                    mDeviceAdmin.getComponent(), UserHandle.myUserId());\n            if (!TextUtils.isEmpty(supportMessage)) {\n                mSupportMessage.setText(supportMessage);\n                mSupportMessage.setVisibility(View.VISIBLE);\n            } else {\n                mSupportMessage.setVisibility(View.GONE);\n            }\n        } else {\n            addDeviceAdminPolicies(true /* showDescription */);\n            mAdminWarning.setText(getString(R.string.device_admin_warning,\n                    mDeviceAdmin.getActivityInfo().applicationInfo.loadLabel(getPackageManager())));\n            setTitle(getText(R.string.add_device_admin_msg));\n            mActionButton.setText(getText(R.string.add_device_admin));\n            if (isAdminUninstallable()) {\n                mUninstallButton.setVisibility(View.VISIBLE);\n            }\n            mSupportMessage.setVisibility(View.GONE);\n            mAdding = true;\n        }\n    }",
  "diff_func": "--- func_before\n+++ func_after\n void updateInterface() {\n         findViewById(R.id.restricted_icon).setVisibility(View.GONE);\n         mAdminIcon.setImageDrawable(mDeviceAdmin.loadIcon(getPackageManager()));\n         mAdminName.setText(mDeviceAdmin.loadLabel(getPackageManager()));\n         try {\n             mAdminDescription.setText(\n                     mDeviceAdmin.loadDescription(getPackageManager()));\n             mAdminDescription.setVisibility(View.VISIBLE);\n         } catch (Resources.NotFoundException e) {\n             mAdminDescription.setVisibility(View.GONE);\n         }\n-        if (mAddMsgText != null) {\n+        if (!TextUtils.isEmpty(mAddMsgText)) {\n             mAddMsg.setText(mAddMsgText);\n             mAddMsg.setVisibility(View.VISIBLE);\n         } else {\n             mAddMsg.setVisibility(View.GONE);\n             mAddMsgExpander.setVisibility(View.GONE);\n         }\n         if (!mRefreshing && !mAddingProfileOwner\n                 && mDPM.isAdminActive(mDeviceAdmin.getComponent())) {\n             mAdding = false;\n             final boolean isProfileOwner =\n                     mDeviceAdmin.getComponent().equals(mDPM.getProfileOwner());\n             final boolean isManagedProfile = isManagedProfile(mDeviceAdmin);\n             if (isProfileOwner && isManagedProfile) {\n                 // Profile owner in a managed profile, user can remove profile to disable admin.\n                 mAdminWarning.setText(R.string.admin_profile_owner_message);\n                 mActionButton.setText(R.string.remove_managed_profile_label);\n \n                 final EnforcedAdmin admin = getAdminEnforcingCantRemoveProfile();\n                 final boolean hasBaseRestriction = hasBaseCantRemoveProfileRestriction();\n                 if (admin != null && !hasBaseRestriction) {\n                     findViewById(R.id.restricted_icon).setVisibility(View.VISIBLE);\n                 }\n                 mActionButton.setEnabled(admin == null && !hasBaseRestriction);\n             } e",
  "diff_source": "custom",
  "Bug Filter": "Security Vulnerability Fix\nConfidence Score: 0.95",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "\n\nThe patch addresses a security vulnerability by preventing HTML injection through the use of String type instead of CharSequence, which could include HTML content. The code change enforces checking for empty Strings, mitigating the risk of injection attacks.\n\n**Final Output:**\nAnalysis: The patch resolves a security issue by preventing HTML injection, ensuring only non-empty Strings are used to avoid HTML functions.\nFinal Classification: Security Vulnerability Fix\nConfidence Score: 0.95"
}