{
  "id": 5698,
  "language": "C/C++",
  "commit_url": "https://github.com/torvalds/linux/commit/9de4ee40547fd315d4a0ed1dd15a2fa3559ad707",
  "commit_sha": "9de4ee40547fd315d4a0ed1dd15a2fa3559ad707",
  "commit_msg": "cdrom: information leak in cdrom_ioctl_media_changed()\n\nThis cast is wrong.  \"cdi->capacity\" is an int and \"arg\" is an unsigned\nlong.  The way the check is written now, if one of the high 32 bits is\nset then we could read outside the info->slots[] array.\n\nThis bug is pretty old and it predates git.\n\nReviewed-by: Christoph Hellwig <hch@lst.de>\nCc: stable@vger.kernel.org\nSigned-off-by: Dan Carpenter <dan.carpenter@oracle.com>\nSigned-off-by: Jens Axboe <axboe@kernel.dk>",
  "pr_url": null,
  "pr_info": "no more info",
  "file_name": "drivers/cdrom/cdrom.c",
  "func_name": "cdrom_ioctl_media_changed",
  "func_before": "static int cdrom_ioctl_media_changed(struct cdrom_device_info *cdi,\n\t\tunsigned long arg)\n{\n\tstruct cdrom_changer_info *info;\n\tint ret;\n\n\tcd_dbg(CD_DO_IOCTL, \"entering CDROM_MEDIA_CHANGED\\n\");\n\n\tif (!CDROM_CAN(CDC_MEDIA_CHANGED))\n\t\treturn -ENOSYS;\n\n\t/* cannot select disc or select current disc */\n\tif (!CDROM_CAN(CDC_SELECT_DISC) || arg == CDSL_CURRENT)\n\t\treturn media_changed(cdi, 1);\n\n\tif ((unsigned int)arg >= cdi->capacity)\n\t\treturn -EINVAL;\n\n\tinfo = kmalloc(sizeof(*info), GFP_KERNEL);\n\tif (!info)\n\t\treturn -ENOMEM;\n\n\tret = cdrom_read_mech_status(cdi, info);\n\tif (!ret)\n\t\tret = info->slots[arg].change;\n\tkfree(info);\n\treturn ret;\n}",
  "func_after": "static int cdrom_ioctl_media_changed(struct cdrom_device_info *cdi,\n\t\tunsigned long arg)\n{\n\tstruct cdrom_changer_info *info;\n\tint ret;\n\n\tcd_dbg(CD_DO_IOCTL, \"entering CDROM_MEDIA_CHANGED\\n\");\n\n\tif (!CDROM_CAN(CDC_MEDIA_CHANGED))\n\t\treturn -ENOSYS;\n\n\t/* cannot select disc or select current disc */\n\tif (!CDROM_CAN(CDC_SELECT_DISC) || arg == CDSL_CURRENT)\n\t\treturn media_changed(cdi, 1);\n\n\tif (arg >= cdi->capacity)\n\t\treturn -EINVAL;\n\n\tinfo = kmalloc(sizeof(*info), GFP_KERNEL);\n\tif (!info)\n\t\treturn -ENOMEM;\n\n\tret = cdrom_read_mech_status(cdi, info);\n\tif (!ret)\n\t\tret = info->slots[arg].change;\n\tkfree(info);\n\treturn ret;\n}",
  "diff_func": "--- func_before\n+++ func_after\n static int cdrom_ioctl_media_changed(struct cdrom_device_info *cdi,\n \t\tunsigned long arg)\n {\n \tstruct cdrom_changer_info *info;\n \tint ret;\n \n \tcd_dbg(CD_DO_IOCTL, \"entering CDROM_MEDIA_CHANGED\\n\");\n \n \tif (!CDROM_CAN(CDC_MEDIA_CHANGED))\n \t\treturn -ENOSYS;\n \n \t/* cannot select disc or select current disc */\n \tif (!CDROM_CAN(CDC_SELECT_DISC) || arg == CDSL_CURRENT)\n \t\treturn media_changed(cdi, 1);\n \n-\tif ((unsigned int)arg >= cdi->capacity)\n+\tif (arg >= cdi->capacity)\n \t\treturn -EINVAL;\n \n \tinfo = kmalloc(sizeof(*info), GFP_KERNEL);\n \tif (!info)\n \t\treturn -ENOMEM;\n \n \tret = cdrom_read_mech_status(cdi, info);\n \tif (!ret)\n \t\tret = info->slots[arg].change;\n \tkfree(info);\n \treturn ret;\n }",
  "diff_source": "custom",
  "Bug Filter": "Security Vulnerability Fix\nConfidence Score: 1.0",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "\n\nThe patch addresses an information leak caused by an incorrect cast, which could lead to unauthorized data access. This is a security vulnerability fix with high confidence.\n\n**Final Output:**\nAnalysis: The patch corrects an information leak by fixing an incorrect type casting in the cdrom_ioctl_media_changed() function. This prevents unauthorized access to data by ensuring the index is within bounds.\nFinal Classification: Security Vulnerability Fix\nConfidence Score: 1.0"
}