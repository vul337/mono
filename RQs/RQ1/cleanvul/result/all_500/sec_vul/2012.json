{
  "id": 2012,
  "language": "Java",
  "commit_url": "https://github.com/AOSPA/android_frameworks_base/commit/6d6f4106948bbad67b9845603392d084078997c4",
  "commit_sha": "6d6f4106948bbad67b9845603392d084078997c4",
  "commit_msg": "Stop using invalid URL to prevent unexpected crash\n\nVerify the input PAC Uri before performing follow-up actions.\n\nCheck if the URL is a valid URL to filter some invalid URLs since\nthese invalid URLs could not fall into any subclass of existing\nURLConnections. When the PAC Uri is other invalid URL scheme, it\nwill cause an UnsupportedOperationException if there is no proper\nsubclass that implements the openConnection() method.\nA malformed URL may crash the system.\n\nEven it's a valid URL, some subclasses(e.g. JarURLConnection)\nmay not have openConnection() implemented. It will also hit the\nproblem, so convert the possbile exception from openConnection()\nto re-throw it to IOException which is handled in the existing\ncode.\n\nBug: 219498290\nTest: atest FrameworksNetTests CtsNetTestCases\nTest: Test with malformed URL\nMerged-In: I22903414380b62051f514e43b93af992f45740b4\nMerged-In: I2abff75ec59a17628ef006aad348c53fadbed076\nChange-Id: I4d6cec1da9cf3f70dec0dcf4223254d3da4f30a3\n(cherry picked from commit 6390b37a3b32fc7583154d53fda3af8fbd95f59f)",
  "pr_url": null,
  "pr_info": "no more info",
  "file_name": "services/core/java/com/android/server/connectivity/PacManager.java",
  "func_name": "IOException",
  "func_before": "private static String get(Uri pacUri) throws IOException {\n        URL url = new URL(pacUri.toString());\n        URLConnection urlConnection = url.openConnection(java.net.Proxy.NO_PROXY);\n        long contentLength = -1;\n        try {\n            contentLength = Long.parseLong(urlConnection.getHeaderField(\"Content-Length\"));\n        } catch (NumberFormatException e) {\n            // Ignore\n        }\n        if (contentLength > MAX_PAC_SIZE) {\n            throw new IOException(\"PAC too big: \" + contentLength + \" bytes\");\n        }\n        ByteArrayOutputStream bytes = new ByteArrayOutputStream();\n        byte[] buffer = new byte[1024];\n        int count;\n        while ((count = urlConnection.getInputStream().read(buffer)) != -1) {\n            bytes.write(buffer, 0, count);\n            if (bytes.size() > MAX_PAC_SIZE) {\n                throw new IOException(\"PAC too big\");\n            }\n        }\n        return bytes.toString();\n    }",
  "func_after": "private static String get(Uri pacUri) throws IOException {\n        if (!URLUtil.isValidUrl(pacUri.toString()))  {\n            throw new IOException(\"Malformed URL:\" + pacUri);\n        }\n\n        final URL url = new URL(pacUri.toString());\n        URLConnection urlConnection;\n        try {\n            urlConnection = url.openConnection(java.net.Proxy.NO_PROXY);\n            // Catch the possible exceptions and rethrow as IOException to not to crash the system\n            // for illegal input.\n        } catch (IllegalArgumentException e) {\n            throw new IOException(\"Incorrect proxy type for \" + pacUri);\n        } catch (UnsupportedOperationException e) {\n            throw new IOException(\"Unsupported URL connection type for \" + pacUri);\n        }\n\n        long contentLength = -1;\n        try {\n            contentLength = Long.parseLong(urlConnection.getHeaderField(\"Content-Length\"));\n        } catch (NumberFormatException e) {\n            // Ignore\n        }\n        if (contentLength > MAX_PAC_SIZE) {\n            throw new IOException(\"PAC too big: \" + contentLength + \" bytes\");\n        }\n        ByteArrayOutputStream bytes = new ByteArrayOutputStream();\n        byte[] buffer = new byte[1024];\n        int count;\n        while ((count = urlConnection.getInputStream().read(buffer)) != -1) {\n            bytes.write(buffer, 0, count);\n            if (bytes.size() > MAX_PAC_SIZE) {\n                throw new IOException(\"PAC too big\");\n            }\n        }\n        return bytes.toString();\n    }",
  "diff_func": "--- func_before\n+++ func_after\n private static String get(Uri pacUri) throws IOException {\n+        if (!URLUtil.isValidUrl(pacUri.toString()))  {\n+            throw new IOException(\"Malformed URL:\" + pacUri);\n+        }\n+\n-        URL url = new URL(pacUri.toString());\n+        final URL url = new URL(pacUri.toString());\n+        URLConnection urlConnection;\n+        try {\n-        URLConnection urlConnection = url.openConnection(java.net.Proxy.NO_PROXY);\n+            urlConnection = url.openConnection(java.net.Proxy.NO_PROXY);\n+            // Catch the possible exceptions and rethrow as IOException to not to crash the system\n+            // for illegal input.\n+        } catch (IllegalArgumentException e) {\n+            throw new IOException(\"Incorrect proxy type for \" + pacUri);\n+        } catch (UnsupportedOperationException e) {\n+            throw new IOException(\"Unsupported URL connection type for \" + pacUri);\n+        }\n+\n         long contentLength = -1;\n         try {\n             contentLength = Long.parseLong(urlConnection.getHeaderField(\"Content-Length\"));\n         } catch (NumberFormatException e) {\n             // Ignore\n         }\n         if (contentLength > MAX_PAC_SIZE) {\n             throw new IOException(\"PAC too big: \" + contentLength + \" bytes\");\n         }\n         ByteArrayOutputStream bytes = new ByteArrayOutputStream();\n         byte[] buffer = new byte[1024];\n         int count;\n         while ((count = urlConnection.getInputStream().read(buffer)) != -1) {\n             bytes.write(buffer, 0, count);\n             if (bytes.size() > MAX_PAC_SIZE) {\n                 throw new IOException(\"PAC too big\");\n             }\n         }\n         return bytes.toString();\n     }",
  "diff_source": "custom",
  "Bug Filter": "** Security Vulnerability Fix  \n**Confidence Score:** 0.95",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "\n\nThe patch addresses a security issue by validating URLs and handling exceptions to prevent crashes, which could be exploited to cause system compromise.\n\n**Final Classification:** Security Vulnerability Fix  \n**Confidence Score:** 0.95"
}