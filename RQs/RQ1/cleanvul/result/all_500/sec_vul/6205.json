{
  "id": 6205,
  "language": "Python",
  "commit_url": "https://github.com/pyinstaller/pyinstaller/commit/e8996b6e6ac4e93acdc2fd58ad1957874fa1972a",
  "commit_sha": "e8996b6e6ac4e93acdc2fd58ad1957874fa1972a",
  "commit_msg": "rthooks: secure temp directories used by matplotlib and win32com rthooks\n\nThe run-time hooks that relocate the package's configuration/cache\ndirectory into isolated temporary directory create this directory using\nthe `tempfile.mkdtemp` function. According to its documentation, the\nfunction creates the temporary directory \"in the most secure manner\npossible\", and the created directory should be \"readable, writable, and\nsearchable only by the creating user ID\".\n\nHowever, this does not apply to Windows, where the 0o700 POSIX\npermissions mask passed to the underyling `os.mkdir` call has no effect.\nConsequently, the access to the created temporary directory is in fact\ngated only by the access to the parent directory. So as long as `TEMP`\nand `TMP` point to `%LOCALAPPDATA%\\Temp`, the created temporary\ndirectories are typically inaccessible to other users, who do not have\naccess to the user's home directory. On the other hand, if the temporary\ndirectory base is relocated to a system-wide location (e.g., `c:\\temp`),\nthe temporary directories created by the run-time hooks might become\naccessible to other users as well. A malicious user with local access\nmight thus modify the contents of the temporary directory, interfering\nwith the application. If the application is running in privileged mode\nand developer mode is enabled on the system, they might also attempt\na symlink attack due to lack of hardened mode for `shutil.rmtree`\n(used for clean up) on Windows.\n\nTherefore, we replace the use of `tempfile.mkdtemp` with custom function\nthat uses original `mkdtemp` on POSIX and provides a Windows-specific\nimplementation that secures the access to created directory via security\ndescriptor passed to the `CreateDirectoryW` call. This is a\n`ctypes`-based port of the code that we already have in bootloader for\nmitigating the same issue with temporary directory in onefile builds.\n\nIn order to share the implementation among the two run-time hooks that\nrequire it, the code is provided by a new `_pyi_rth_utils` PyInstaller\n\"fake\" package, which is bundled with the frozen application on demand\n(i.e., if it is referenced in any of collected run-time hooks).",
  "pr_url": "https://github.com/pyinstaller/pyinstaller/pull/7827",
  "pr_info": "The run-time hooks that relocate the package's configuration/cache directory into isolated temporary directory create this directory using the `tempfile.mkdtemp` function. According to its documentation, the function creates the temporary directory \"in the most secure manner possible\", and the created directory should be [\"readable, writable, and searchable only by the creating user ID\"](https://docs.python.org/3/library/tempfile.html#tempfile.mkdtemp).\r\n\r\nHowever, this does not apply to Windows, where the 0o700 POSIX permissions mask passed to the underyling `os.mkdir` call has no effect. Consequently, the access to the created temporary directory is in fact gated only by the access to the parent directory. So as long as `TEMP` and `TMP` point to `%LOCALAPPDATA%\\Temp`, the created temporary directories are typically inaccessible to other users, who do not have access to the user's home directory. On the other hand, if the temporary directory base is relocated to a system-wide location (e.g., `c:\\temp`), the temporary directories created by the run-time hooks might become accessible to other users as well. A malicious user with local access might thus modify the contents of the temporary directory, interfering with the application. If the application is running in privileged mode and developer mode is enabled on the system, they might also attempt a symlink attack due to lack of hardened mode for `shutil.rmtree` (used for clean up) on Windows.\r\n\r\nTherefore, we replace the use of `tempfile.mkdtemp` with custom function that uses original `mkdtemp` on POSIX and provides a Windows-specific implementation that secures the access to created directory via security descriptor passed to the `CreateDirectoryW` call. This is a `ctypes`-based port of [the code that we already have in bootloader for mitigating the same issue with temporary directory in onefile builds](https://github.com/pyinstaller/pyinstaller/blob/3e7d4ccad601a85823ceb6d996973ccf0b93cc0b/bootloader/src/pyi_win32_utils.c#L382-L492).\r\n\r\nIn order to share the implementation among the two run-time hooks that require it, the code is provided by a new `_pyi_rth_utils` PyInstaller \"fake\" package, which is bundled with the frozen application on demand (i.e., if it is referenced in any of collected run-time hooks).",
  "file_name": "PyInstaller/hooks/rthooks/pyi_rth_win32comgenpy.py",
  "func_name": "_pyi_rthook",
  "func_before": "def _pyi_rthook():\n    import atexit\n    import os\n    import shutil\n    import tempfile\n\n    import win32com\n\n    # Create temporary directory. The actual cache directory needs to be named `gen_py`, so create a sub-directory.\n    supportdir = tempfile.mkdtemp()\n\n    genpydir = os.path.join(supportdir, 'gen_py')\n    os.makedirs(genpydir, exist_ok=True)\n\n    # Remove the teporary directory at application exit, ignoring errors.\n    atexit.register(shutil.rmtree, supportdir, ignore_errors=True)\n\n    # Override the default path to gen_py cache.\n    win32com.__gen_path__ = genpydir\n\n    # Override the sub-module paths for win32com.gen_py run-time sub-package.\n    win32com.gen_py.__path__ = [genpydir]",
  "func_after": "def _pyi_rthook():\n    import atexit\n    import os\n    import shutil\n\n    import win32com\n\n    import _pyi_rth_utils  # PyInstaller's run-time hook utilities module\n\n    # Create temporary directory.\n    # Use our replacement for `tempfile.mkdtemp` function that properly restricts access to directory on all platforms.\n    supportdir = _pyi_rth_utils.secure_mkdtemp()\n    # The actual cache directory needs to be named `gen_py`, so create a sub-directory.\n    genpydir = os.path.join(supportdir, 'gen_py')\n    os.makedirs(genpydir, exist_ok=True)\n\n    # Remove the teporary directory at application exit, ignoring errors.\n    atexit.register(shutil.rmtree, supportdir, ignore_errors=True)\n\n    # Override the default path to gen_py cache.\n    win32com.__gen_path__ = genpydir\n\n    # Override the sub-module paths for win32com.gen_py run-time sub-package.\n    win32com.gen_py.__path__ = [genpydir]",
  "diff_func": "--- func_before\n+++ func_after\n def _pyi_rthook():\n     import atexit\n     import os\n     import shutil\n-    import tempfile\n \n     import win32com\n \n+    import _pyi_rth_utils  # PyInstaller's run-time hook utilities module\n-    # Create temporary directory. The actual cache directory needs to be named `gen_py`, so create a sub-directory.\n-    supportdir = tempfile.mkdtemp()\n \n+    # Create temporary directory.\n+    # Use our replacement for `tempfile.mkdtemp` function that properly restricts access to directory on all platforms.\n+    supportdir = _pyi_rth_utils.secure_mkdtemp()\n+    # The actual cache directory needs to be named `gen_py`, so create a sub-directory.\n     genpydir = os.path.join(supportdir, 'gen_py')\n     os.makedirs(genpydir, exist_ok=True)\n \n     # Remove the teporary directory at application exit, ignoring errors.\n     atexit.register(shutil.rmtree, supportdir, ignore_errors=True)\n \n     # Override the default path to gen_py cache.\n     win32com.__gen_path__ = genpydir\n \n     # Override the sub-module paths for win32com.gen_py run-time sub-package.\n     win32com.gen_py.__path__ = [genpydir]",
  "diff_source": "custom",
  "Bug Filter": "Security Vulnerability Fix\n\nConfidence Score: 0.95",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "\n\n**Final Output:**\n\nAnalysis: The patch addresses a security issue where temporary directories on Windows were not properly secured, allowing potential unauthorized access. The code changes replace the insecure method with a secure alternative, mitigating the vulnerability.\n\nFinal Classification: Security Vulnerability Fix\n\nConfidence Score: 0.95"
}