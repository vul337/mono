{
  "id": 7400,
  "language": "JavaScript",
  "commit_url": "https://github.com/PrivateBin/PrivateBin/commit/2a4d572c1e9eb9b608d32b0cc0cb3b6c3b684eab",
  "commit_sha": "2a4d572c1e9eb9b608d32b0cc0cb3b6c3b684eab",
  "commit_msg": "Sanitize SVG preview, preventing script execution in instance context, while dropping support for attachment download in IE",
  "pr_url": "https://github.com/PrivateBin/PrivateBin/pull/906",
  "pr_info": "* ADDED: Set CSP also as meta tag, to deal with misconfigured webservers mangling the HTTP header\r\n* ADDED: Sanitize SVG preview, preventing script execution in instance context\r\n* CHANGED: Upgrading libraries to: Showdown 2.0.3\r\n* CHANGED: Drop support for attachment download in IE\r\n* FIXED: Error when attachments are disabled, but paste with attachment gets displayed",
  "file_name": "js/privatebin.js",
  "func_name": "parsePaste",
  "func_before": "function parsePaste()\n        {\n            // skip parsing if no text is given\n            if (text === '') {\n                return;\n            }\n\n            if (format === 'markdown') {\n                const converter = new showdown.Converter({\n                    strikethrough: true,\n                    tables: true,\n                    tablesHeaderId: true,\n                    simplifiedAutoLink: true,\n                    excludeTrailingPunctuationFromURLs: true\n                });\n                // let showdown convert the HTML and sanitize HTML *afterwards*!\n                $plainText.html(\n                    DOMPurify.sanitize(\n                        converter.makeHtml(text)\n                    )\n                );\n                // add table classes from bootstrap css\n                $plainText.find('table').addClass('table-condensed table-bordered');\n            } else {\n                if (format === 'syntaxhighlighting') {\n                    // yes, this is really needed to initialize the environment\n                    if (typeof prettyPrint === 'function')\n                    {\n                        prettyPrint();\n                    }\n\n                    $prettyPrint.html(\n                        prettyPrintOne(\n                            Helper.htmlEntities(text), null, true\n                        )\n                    );\n                } else {\n                    // = 'plaintext'\n                    $prettyPrint.text(text);\n                }\n                Helper.urls2links($prettyPrint);\n                $prettyPrint.css('white-space', 'pre-wrap');\n                $prettyPrint.css('word-break', 'normal');\n                $prettyPrint.removeClass('prettyprint');\n            }\n        }",
  "func_after": "function parsePaste()\n        {\n            // skip parsing if no text is given\n            if (text === '') {\n                return;\n            }\n\n            if (format === 'markdown') {\n                const converter = new showdown.Converter({\n                    strikethrough: true,\n                    tables: true,\n                    tablesHeaderId: true,\n                    simplifiedAutoLink: true,\n                    excludeTrailingPunctuationFromURLs: true\n                });\n                // let showdown convert the HTML and sanitize HTML *afterwards*!\n                $plainText.html(\n                    DOMPurify.sanitize(\n                        converter.makeHtml(text),\n                        purifyHtmlConfig\n                    )\n                );\n                // add table classes from bootstrap css\n                $plainText.find('table').addClass('table-condensed table-bordered');\n            } else {\n                if (format === 'syntaxhighlighting') {\n                    // yes, this is really needed to initialize the environment\n                    if (typeof prettyPrint === 'function')\n                    {\n                        prettyPrint();\n                    }\n\n                    $prettyPrint.html(\n                        prettyPrintOne(\n                            Helper.htmlEntities(text), null, true\n                        )\n                    );\n                } else {\n                    // = 'plaintext'\n                    $prettyPrint.text(text);\n                }\n                Helper.urls2links($prettyPrint);\n                $prettyPrint.css('white-space', 'pre-wrap');\n                $prettyPrint.css('word-break', 'normal');\n                $prettyPrint.removeClass('prettyprint');\n            }\n        }",
  "diff_func": "--- func_before\n+++ func_after\n function parsePaste()\n         {\n             // skip parsing if no text is given\n             if (text === '') {\n                 return;\n             }\n \n             if (format === 'markdown') {\n                 const converter = new showdown.Converter({\n                     strikethrough: true,\n                     tables: true,\n                     tablesHeaderId: true,\n                     simplifiedAutoLink: true,\n                     excludeTrailingPunctuationFromURLs: true\n                 });\n                 // let showdown convert the HTML and sanitize HTML *afterwards*!\n                 $plainText.html(\n                     DOMPurify.sanitize(\n-                        converter.makeHtml(text)\n+                        converter.makeHtml(text),\n+                        purifyHtmlConfig\n                     )\n                 );\n                 // add table classes from bootstrap css\n                 $plainText.find('table').addClass('table-condensed table-bordered');\n             } else {\n                 if (format === 'syntaxhighlighting') {\n                     // yes, this is really needed to initialize the environment\n                     if (typeof prettyPrint === 'function')\n                     {\n                         prettyPrint();\n                     }\n \n                     $prettyPrint.html(\n                         prettyPrintOne(\n                             Helper.htmlEntities(text), null, true\n                         )\n                     );\n                 } else {\n                     // = 'plaintext'\n                     $prettyPrint.text(text);\n                 }\n                 Helper.urls2links($prettyPrint);\n                 $prettyPrint.css('white-space', 'pre-wrap');\n                 $prettyPrint.css('word-break', 'normal');\n                 $prettyPrint.removeClass('prettyprint');\n             }\n         }",
  "diff_source": "custom",
  "Bug Filter": "Security Vulnerability Fix  \nConfidence Score: 0.95",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "\n\n**Final Output:**\nAnalysis: The commit message and code diff indicate a focus on sanitizing SVG previews to prevent script execution, which addresses a security vulnerability. The code change enhances HTML sanitization using DOMPurify with a specific configuration, thereby mitigating XSS risks. This change directly impacts system security by preventing unauthorized script execution.\n\nFinal Classification: Security Vulnerability Fix  \nConfidence Score: 0.95"
}