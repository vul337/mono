{
  "id": 1175,
  "language": "Java",
  "commit_url": "https://github.com/omnirom/android_frameworks_base/commit/72210c49405570dfb3b79220536ccb9e102b7f8c",
  "commit_sha": "72210c49405570dfb3b79220536ccb9e102b7f8c",
  "commit_msg": "Disallow too large display padding for wallpaper\n\nTo avoid a potential vulnerability, don't allow padding\nwith width or height larger than the maximum screen width.\n\nBug: 204316511\nTest: added WallpaperManagerTest\nChange-Id: I471fb3546bdd2f9aa07dd091fe841b2bc5c484d6\nMerged-In: I471fb3546bdd2f9aa07dd091fe841b2bc5c484d6",
  "pr_url": null,
  "pr_info": "no more info",
  "file_name": "services/core/java/com/android/server/wallpaper/WallpaperManagerService.java",
  "func_name": "setDisplayPadding",
  "func_before": "public void setDisplayPadding(Rect padding, String callingPackage, int displayId) {\n        checkPermission(android.Manifest.permission.SET_WALLPAPER_HINTS);\n        if (!isWallpaperSupported(callingPackage)) {\n            return;\n        }\n        synchronized (mLock) {\n            if (!isValidDisplay(displayId)) {\n                throw new IllegalArgumentException(\"Cannot find display with id=\" + displayId);\n            }\n            int userId = UserHandle.getCallingUserId();\n            WallpaperData wallpaper = getWallpaperSafeLocked(userId, FLAG_SYSTEM);\n            if (padding.left < 0 || padding.top < 0 || padding.right < 0 || padding.bottom < 0) {\n                throw new IllegalArgumentException(\"padding must be positive: \" + padding);\n            }\n\n            final DisplayData wpdData = getDisplayDataOrCreate(displayId);\n            if (!padding.equals(wpdData.mPadding)) {\n                wpdData.mPadding.set(padding);\n                if (displayId == DEFAULT_DISPLAY) saveSettingsLocked(userId);\n                if (mCurrentUserId != userId) return; // Don't change the properties now\n                if (wallpaper.connection != null) {\n                    final WallpaperConnection.DisplayConnector connector = wallpaper.connection\n                            .getDisplayConnectorOrCreate(displayId);\n                    final IWallpaperEngine engine = connector != null ? connector.mEngine : null;\n                    if (engine != null) {\n                        try {\n                            engine.setDisplayPadding(padding);\n                        } catch (RemoteException e) {\n                        }\n                        notifyCallbacksLocked(wallpaper);\n                    } else if (wallpaper.connection.mService != null && connector != null) {\n                        // We've attached to the service but the engine hasn't attached back to us\n                        // yet. This means it will be created with the previous dimensions, so we\n                        // need to update it to the new dimensions once it attaches.\n                        connector.mPaddingChanged = true;\n                    }\n                }\n            }\n        }\n    }",
  "func_after": "public void setDisplayPadding(Rect padding, String callingPackage, int displayId) {\n        checkPermission(android.Manifest.permission.SET_WALLPAPER_HINTS);\n        if (!isWallpaperSupported(callingPackage)) {\n            return;\n        }\n        synchronized (mLock) {\n            if (!isValidDisplay(displayId)) {\n                throw new IllegalArgumentException(\"Cannot find display with id=\" + displayId);\n            }\n            int userId = UserHandle.getCallingUserId();\n            WallpaperData wallpaper = getWallpaperSafeLocked(userId, FLAG_SYSTEM);\n            if (padding.left < 0 || padding.top < 0 || padding.right < 0 || padding.bottom < 0) {\n                throw new IllegalArgumentException(\"padding must be positive: \" + padding);\n            }\n\n            int maxSize = getMaximumSizeDimension(displayId);\n\n            final int paddingWidth = padding.left + padding.right;\n            final int paddingHeight = padding.top + padding.bottom;\n            if (paddingWidth > maxSize) {\n                throw new IllegalArgumentException(\"padding width \" + paddingWidth\n                        + \" exceeds max width \" + maxSize);\n            }\n            if (paddingHeight > maxSize) {\n                throw new IllegalArgumentException(\"padding height \" + paddingHeight\n                        + \" exceeds max height \" + maxSize);\n            }\n\n            final DisplayData wpdData = getDisplayDataOrCreate(displayId);\n            if (!padding.equals(wpdData.mPadding)) {\n                wpdData.mPadding.set(padding);\n                if (displayId == DEFAULT_DISPLAY) saveSettingsLocked(userId);\n                if (mCurrentUserId != userId) return; // Don't change the properties now\n                if (wallpaper.connection != null) {\n                    final WallpaperConnection.DisplayConnector connector = wallpaper.connection\n                            .getDisplayConnectorOrCreate(displayId);\n                    final IWallpaperEngine engine = connector != null ? connector.mEngine : null;\n                    if (engine != null) {\n                        try {\n                            engine.setDisplayPadding(padding);\n                        } catch (RemoteException e) {\n                        }\n                        notifyCallbacksLocked(wallpaper);\n                    } else if (wallpaper.connection.mService != null && connector != null) {\n                        // We've attached to the service but the engine hasn't attached back to us\n                        // yet. This means it will be created with the previous dimensions, so we\n                        // need to update it to the new dimensions once it attaches.\n                        connector.mPaddingChanged = true;\n                    }\n                }\n            }\n        }\n    }",
  "diff_func": "--- func_before\n+++ func_after\n public void setDisplayPadding(Rect padding, String callingPackage, int displayId) {\n         checkPermission(android.Manifest.permission.SET_WALLPAPER_HINTS);\n         if (!isWallpaperSupported(callingPackage)) {\n             return;\n         }\n         synchronized (mLock) {\n             if (!isValidDisplay(displayId)) {\n                 throw new IllegalArgumentException(\"Cannot find display with id=\" + displayId);\n             }\n             int userId = UserHandle.getCallingUserId();\n             WallpaperData wallpaper = getWallpaperSafeLocked(userId, FLAG_SYSTEM);\n             if (padding.left < 0 || padding.top < 0 || padding.right < 0 || padding.bottom < 0) {\n                 throw new IllegalArgumentException(\"padding must be positive: \" + padding);\n+            }\n+\n+            int maxSize = getMaximumSizeDimension(displayId);\n+\n+            final int paddingWidth = padding.left + padding.right;\n+            final int paddingHeight = padding.top + padding.bottom;\n+            if (paddingWidth > maxSize) {\n+                throw new IllegalArgumentException(\"padding width \" + paddingWidth\n+                        + \" exceeds max width \" + maxSize);\n+            }\n+            if (paddingHeight > maxSize) {\n+                throw new IllegalArgumentException(\"padding height \" + paddingHeight\n+                        + \" exceeds max height \" + maxSize);\n             }\n \n             final DisplayData wpdData = getDisplayDataOrCreate(displayId);\n             if (!padding.equals(wpdData.mPadding)) {\n                 wpdData.mPadding.set(padding);\n                 if (displayId == DEFAULT_DISPLAY) saveSettingsLocked(userId);\n                 if (mCurrentUserId != userId) return; // Don't change the properties now\n                 if (wallpaper.connection != null) {\n                     final WallpaperConnection.DisplayConnector connector = wallpaper.connection\n                             .getDisplayConnectorOrCreate(displayId);\n ",
  "diff_source": "custom",
  "Bug Filter": "** Security Vulnerability Fix  \n**Confidence Score:** 0.95",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "\n\n**Final Output:**\n\nAnalysis:\n1. **Patch Analysis**: The commit message indicates a fix for a security vulnerability related to display padding for wallpapers. The code adds checks to ensure padding dimensions do not exceed the maximum screen size, preventing potential issues.\n2. **Security Vulnerability Assessment**: The changes prevent overly large padding, which could be exploited to cause resource exhaustion or other security issues. This addresses a security concern.\n3. **Non-Security Classification**: Not applicable, as the patch is a security fix.\n4. **Confidence Scoring**: High confidence due to explicit security mention and relevant code changes.\n\n**Final Classification:** Security Vulnerability Fix  \n**Confidence Score:** 0.95"
}