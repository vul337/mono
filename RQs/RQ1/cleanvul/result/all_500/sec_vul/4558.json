{
  "id": 4558,
  "language": "C/C++",
  "commit_url": "https://github.com/rizinorg/rizin/commit/05bbd147caccc60162d6fba9baaaf24befa281cd",
  "commit_sha": "05bbd147caccc60162d6fba9baaaf24befa281cd",
  "commit_msg": "Fix oob read on _luac_build_info and luac memleaks",
  "pr_url": "https://github.com/rizinorg/rizin/pull/2930",
  "pr_info": "# DO NOT SQUASH\r\n\r\n**Your checklist for this pull request**\r\n- [ ] I've read the [guidelines for contributing](https://github.com/rizinorg/rizin/blob/master/DEVELOPERS.md) to this repository\r\n- [ ] I made sure to follow the project's [coding style](https://github.com/rizinorg/rizin/blob/master/DEVELOPERS.md#code-style)\r\n- [ ] I've documented or updated the documentation of every function and struct this PR changes. If not so I've explained why.\r\n- [ ] I've added tests that prove my fix is effective or that my feature works (if possible)\r\n- [ ] I've updated the [rizin book](https://github.com/rizinorg/book) with the relevant information (if needed)\r\n\r\n**Detailed description**\r\n\r\n<!-- Explain the **details** for making this change. Is a new feature implemented? What existing problem does the pull request solve? How does the pull request solve these issues? Please provide enough information so that others can review your pull request. -->\r\n\r\n...\r\n\r\n**Test plan**\r\n\r\n<!-- What steps should the reviewer take to test your pull request? Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots/videos. This is your time to re-check that everything works and that you covered all the edge cases -->\r\n\r\n...\r\n\r\n**Closing issues**\r\n\r\n<!-- put \"closes #XXXX\" in your comment to auto-close the issue that your PR fixes (if any). -->\r\n\r\n...\r\n",
  "file_name": "librz/bin/format/luac/luac_bin.c",
  "func_name": "_luac_build_info",
  "func_before": "void _luac_build_info(LuaProto *proto, LuacBinInfo *info) {\n\t/* process proto header info */\n\tchar *section_name;\n\tchar *symbol_name;\n\tchar *proto_name;\n\tRzListIter *iter;\n\n\tut64 current_offset;\n\tut64 current_size;\n\n\tint i = 0; // iter\n\n\t// 0. check if stripped (proto name is lost)\n\tif (proto->name_size == 0 || proto->proto_name == NULL) {\n\t\t// replace name with current offset\n\t\tproto_name = rz_str_newf(\"fcn.%08llx\", proto->offset);\n\t} else {\n\t\tproto_name = rz_str_new((char *)proto->proto_name);\n\t}\n\n\t// 1.1 set section name as function_name.header\n\tcurrent_offset = proto->offset;\n\tcurrent_size = proto->size;\n\tsection_name = rz_str_newf(\"%s.header\", proto_name);\n\tluac_add_section(info->section_list, section_name, current_offset, current_size, false);\n\tRZ_FREE(section_name);\n\n\t// 1.2 set section name as function_name.code\n\tcurrent_offset = proto->code_offset;\n\tcurrent_size = proto->code_size;\n\tsection_name = rz_str_newf(\"%s.code\", proto_name);\n\tluac_add_section(info->section_list, section_name, current_offset, current_size, true);\n\tRZ_FREE(section_name);\n\n\t// 1.3 set const section\n\tcurrent_offset = proto->const_offset;\n\tcurrent_size = proto->const_size;\n\tsection_name = rz_str_newf(\"%s.const\", proto_name);\n\tluac_add_section(info->section_list, section_name, current_offset, current_size, false);\n\tRZ_FREE(section_name);\n\n\t// 1.4 upvalue section\n\tcurrent_offset = proto->upvalue_offset;\n\tcurrent_size = proto->upvalue_size;\n\tsection_name = rz_str_newf(\"%s.upvalues\", proto_name);\n\tluac_add_section(info->section_list, section_name, current_offset, current_size, false);\n\tRZ_FREE(section_name);\n\n\t// 1.5 inner protos section\n\tcurrent_offset = proto->inner_proto_offset;\n\tcurrent_size = proto->inner_proto_size;\n\tsection_name = rz_str_newf(\"%s.protos\", proto_name);\n\tluac_add_section(info->section_list, section_name, current_offset, current_size, false);\n\tRZ_FREE(section_name);\n\n\t// 1.6 debug section\n\tcurrent_offset = proto->debug_offset;\n\tcurrent_size = proto->debug_size;\n\tsection_name = rz_str_newf(\"%s.debug\", proto_name);\n\tluac_add_section(info->section_list, section_name, current_offset, current_size, false);\n\tRZ_FREE(section_name);\n\n\t// 2.1 parse local var info\n\tLuaLocalVarEntry *local_var_entry;\n\trz_list_foreach (proto->local_var_info_entries, iter, local_var_entry) {\n\t\tluac_add_string(\n\t\t\tinfo->string_list,\n\t\t\t(char *)local_var_entry->varname,\n\t\t\tlocal_var_entry->offset,\n\t\t\tlocal_var_entry->varname_len);\n\t}\n\n\t// 2.2 parse debug_upvalues\n\tchar **upvalue_names;\n\tint real_upvalue_cnt;\n\tLuaDbgUpvalueEntry *debug_upv_entry;\n\treal_upvalue_cnt = rz_list_length(proto->upvalue_entries);\n\tupvalue_names = RZ_NEWS0(char *, real_upvalue_cnt);\n\tif (!upvalue_names) {\n\t\treturn;\n\t}\n\trz_list_foreach (proto->dbg_upvalue_entries, iter, debug_upv_entry) {\n\t\tupvalue_names[i] = (char *)debug_upv_entry->upvalue_name;\n\t\tluac_add_string(\n\t\t\tinfo->string_list,\n\t\t\tupvalue_names[i],\n\t\t\tdebug_upv_entry->offset,\n\t\t\tdebug_upv_entry->name_len);\n\t}\n\n\t// 3.1 construct constant symbols\n\tLuaConstEntry *const_entry;\n\trz_list_foreach (proto->const_entries, iter, const_entry) {\n\t\tsymbol_name = get_constant_symbol_name(proto_name, const_entry);\n\t\tluac_add_symbol(\n\t\t\tinfo->symbol_list,\n\t\t\tsymbol_name,\n\t\t\tconst_entry->offset,\n\t\t\tconst_entry->data_len,\n\t\t\tget_tag_string(const_entry->tag));\n\t\tif (const_entry->tag == LUA_VLNGSTR || const_entry->tag == LUA_VSHRSTR) {\n\t\t\tluac_add_string(\n\t\t\t\tinfo->string_list,\n\t\t\t\t(char *)const_entry->data,\n\t\t\t\tconst_entry->offset,\n\t\t\t\tconst_entry->data_len);\n\t\t}\n\t\tRZ_FREE(symbol_name);\n\t}\n\n\t// 3.2 construct upvalue symbols\n\tLuaUpvalueEntry *upvalue_entry;\n\ti = 0;\n\trz_list_foreach (proto->upvalue_entries, iter, upvalue_entry) {\n\t\tsymbol_name = get_upvalue_symbol_name(proto_name, upvalue_entry, upvalue_names[i++]);\n\t\tluac_add_symbol(\n\t\t\tinfo->symbol_list,\n\t\t\tsymbol_name,\n\t\t\tupvalue_entry->offset,\n\t\t\t3,\n\t\t\t\"UPVALUE\");\n\t\tRZ_FREE(symbol_name);\n\t}\n\n\t// 4. parse sub proto\n\tLuaProto *sub_proto;\n\trz_list_foreach (proto->proto_entries, iter, sub_proto) {\n\t\t_luac_build_info(sub_proto, info);\n\t}\n\n\tRZ_FREE(proto_name);\n}",
  "func_after": "void _luac_build_info(LuaProto *proto, LuacBinInfo *info) {\n\t/* process proto header info */\n\tchar *section_name;\n\tchar *symbol_name;\n\tchar *proto_name;\n\tchar **upvalue_names = NULL;\n\tRzListIter *iter;\n\tint i = 0; // iter\n\n\tut64 current_offset;\n\tut64 current_size;\n\n\t// 0. check if stripped (proto name is lost)\n\tif (proto->name_size == 0 || proto->proto_name == NULL) {\n\t\t// replace name with current offset\n\t\tproto_name = rz_str_newf(\"fcn.%08llx\", proto->offset);\n\t} else {\n\t\tproto_name = rz_str_new((char *)proto->proto_name);\n\t}\n\n\t// 1.1 set section name as function_name.header\n\tcurrent_offset = proto->offset;\n\tcurrent_size = proto->size;\n\tsection_name = rz_str_newf(\"%s.header\", proto_name);\n\tluac_add_section(info->section_list, section_name, current_offset, current_size, false);\n\tRZ_FREE(section_name);\n\n\t// 1.2 set section name as function_name.code\n\tcurrent_offset = proto->code_offset;\n\tcurrent_size = proto->code_size;\n\tsection_name = rz_str_newf(\"%s.code\", proto_name);\n\tluac_add_section(info->section_list, section_name, current_offset, current_size, true);\n\tRZ_FREE(section_name);\n\n\t// 1.3 set const section\n\tcurrent_offset = proto->const_offset;\n\tcurrent_size = proto->const_size;\n\tsection_name = rz_str_newf(\"%s.const\", proto_name);\n\tluac_add_section(info->section_list, section_name, current_offset, current_size, false);\n\tRZ_FREE(section_name);\n\n\t// 1.4 upvalue section\n\tcurrent_offset = proto->upvalue_offset;\n\tcurrent_size = proto->upvalue_size;\n\tsection_name = rz_str_newf(\"%s.upvalues\", proto_name);\n\tluac_add_section(info->section_list, section_name, current_offset, current_size, false);\n\tRZ_FREE(section_name);\n\n\t// 1.5 inner protos section\n\tcurrent_offset = proto->inner_proto_offset;\n\tcurrent_size = proto->inner_proto_size;\n\tsection_name = rz_str_newf(\"%s.protos\", proto_name);\n\tluac_add_section(info->section_list, section_name, current_offset, current_size, false);\n\tRZ_FREE(section_name);\n\n\t// 1.6 debug section\n\tcurrent_offset = proto->debug_offset;\n\tcurrent_size = proto->debug_size;\n\tsection_name = rz_str_newf(\"%s.debug\", proto_name);\n\tluac_add_section(info->section_list, section_name, current_offset, current_size, false);\n\tRZ_FREE(section_name);\n\n\t// 2.1 parse local var info\n\tLuaLocalVarEntry *local_var_entry;\n\trz_list_foreach (proto->local_var_info_entries, iter, local_var_entry) {\n\t\tluac_add_string(\n\t\t\tinfo->string_list,\n\t\t\t(char *)local_var_entry->varname,\n\t\t\tlocal_var_entry->offset,\n\t\t\tlocal_var_entry->varname_len);\n\t}\n\n\t// 2.2 parse debug_upvalues\n\tsize_t real_upvalue_cnt = rz_list_length(proto->upvalue_entries);\n\tif (real_upvalue_cnt > 0) {\n\t\tLuaDbgUpvalueEntry *debug_upv_entry;\n\t\tupvalue_names = RZ_NEWS0(char *, real_upvalue_cnt);\n\t\tif (!upvalue_names) {\n\t\t\tfree(proto_name);\n\t\t\treturn;\n\t\t}\n\n\t\ti = 0;\n\t\trz_list_foreach (proto->dbg_upvalue_entries, iter, debug_upv_entry) {\n\t\t\tupvalue_names[i] = (char *)debug_upv_entry->upvalue_name;\n\t\t\tluac_add_string(\n\t\t\t\tinfo->string_list,\n\t\t\t\tupvalue_names[i],\n\t\t\t\tdebug_upv_entry->offset,\n\t\t\t\tdebug_upv_entry->name_len);\n\t\t\ti++;\n\t\t}\n\t}\n\n\t// 3.1 construct constant symbols\n\tLuaConstEntry *const_entry;\n\trz_list_foreach (proto->const_entries, iter, const_entry) {\n\t\tsymbol_name = get_constant_symbol_name(proto_name, const_entry);\n\t\tluac_add_symbol(\n\t\t\tinfo->symbol_list,\n\t\t\tsymbol_name,\n\t\t\tconst_entry->offset,\n\t\t\tconst_entry->data_len,\n\t\t\tget_tag_string(const_entry->tag));\n\t\tif (const_entry->tag == LUA_VLNGSTR || const_entry->tag == LUA_VSHRSTR) {\n\t\t\tluac_add_string(\n\t\t\t\tinfo->string_list,\n\t\t\t\t(char *)const_entry->data,\n\t\t\t\tconst_entry->offset,\n\t\t\t\tconst_entry->data_len);\n\t\t}\n\t\tRZ_FREE(symbol_name);\n\t}\n\n\t// 3.2 construct upvalue symbols\n\tLuaUpvalueEntry *upvalue_entry;\n\ti = 0;\n\trz_list_foreach (proto->upvalue_entries, iter, upvalue_entry) {\n\t\tsymbol_name = get_upvalue_symbol_name(proto_name, upvalue_entry, upvalue_names[i++]);\n\t\tluac_add_symbol(\n\t\t\tinfo->symbol_list,\n\t\t\tsymbol_name,\n\t\t\tupvalue_entry->offset,\n\t\t\t3,\n\t\t\t\"UPVALUE\");\n\t\tRZ_FREE(symbol_name);\n\t}\n\n\t// 4. parse sub proto\n\tLuaProto *sub_proto;\n\trz_list_foreach (proto->proto_entries, iter, sub_proto) {\n\t\t_luac_build_info(sub_proto, info);\n\t}\n\n\tfree(upvalue_names);\n\tfree(proto_name);\n}",
  "diff_func": "--- func_before\n+++ func_after\n void _luac_build_info(LuaProto *proto, LuacBinInfo *info) {\n \t/* process proto header info */\n \tchar *section_name;\n \tchar *symbol_name;\n \tchar *proto_name;\n+\tchar **upvalue_names = NULL;\n \tRzListIter *iter;\n+\tint i = 0; // iter\n \n \tut64 current_offset;\n \tut64 current_size;\n-\n-\tint i = 0; // iter\n \n \t// 0. check if stripped (proto name is lost)\n \tif (proto->name_size == 0 || proto->proto_name == NULL) {\n \t\t// replace name with current offset\n \t\tproto_name = rz_str_newf(\"fcn.%08llx\", proto->offset);\n \t} else {\n \t\tproto_name = rz_str_new((char *)proto->proto_name);\n \t}\n \n \t// 1.1 set section name as function_name.header\n \tcurrent_offset = proto->offset;\n \tcurrent_size = proto->size;\n \tsection_name = rz_str_newf(\"%s.header\", proto_name);\n \tluac_add_section(info->section_list, section_name, current_offset, current_size, false);\n \tRZ_FREE(section_name);\n \n \t// 1.2 set section name as function_name.code\n \tcurrent_offset = proto->code_offset;\n \tcurrent_size = proto->code_size;\n \tsection_name = rz_str_newf(\"%s.code\", proto_name);\n \tluac_add_section(info->section_list, section_name, current_offset, current_size, true);\n \tRZ_FREE(section_name);\n \n \t// 1.3 set const section\n \tcurrent_offset = proto->const_offset;\n \tcurrent_size = proto->const_size;\n \tsection_name = rz_str_newf(\"%s.const\", proto_name);\n \tluac_add_section(info->section_list, section_name, current_offset, current_size, false);\n \tRZ_FREE(section_name);\n \n \t// 1.4 upvalue section\n \tcurrent_offset = proto->upvalue_offset;\n \tcurrent_size = proto->upvalue_size;\n \tsection_name = rz_str_newf(\"%s.upvalues\", proto_name);\n \tluac_add_section(info->section_list, section_name, current_offset, current_size, false);\n \tRZ_FREE(section_name);\n \n \t// 1.5 inner protos section\n \tcurrent_offset = proto->inner_proto_offset;\n \tcurrent_size = proto->inner_proto_size;\n \tsection_name = rz_str_newf(\"%s.protos\", proto_name);\n \tluac_add_section(info->section_list, section_name, current_offset, current_size, fa",
  "diff_source": "custom",
  "Bug Filter": "Security Vulnerability Fix**\n\n**Confidence Score: 0.95**",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "\n\n**Analysis:**\n\n1. **Patch Analysis:**\n   - The commit message indicates fixes for an out-of-bounds (OOB) read and memory leaks in the `_luac_build_info` function.\n   - The code diff introduces a new variable `char **upvalue_names = NULL;` and redeclares the loop index `i`.\n   - These changes suggest addressing issues with buffer management and pointer handling, which are critical for preventing security vulnerabilities.\n\n2. **Security Vulnerability Assessment:**\n   - The OOB read is a clear security issue that can lead to unauthorized data access or system crashes.\n   - The fix aims to prevent such conditions, directly impacting system security by mitigating potential exploits.\n\n3. **Confidence Scoring:**\n   - The evidence strongly supports a security fix, with clear indicators of addressing buffer overflow issues.\n\n**Final Classification: Security Vulnerability Fix**\n\n**Confidence Score: 0.95**"
}