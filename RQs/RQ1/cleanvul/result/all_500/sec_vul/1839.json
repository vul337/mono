{
  "id": 1839,
  "language": "Java",
  "commit_url": "https://github.com/AOSPA/android_frameworks_base/commit/ce1d35867d89e382c1ca56e29d8b1a52487bd760",
  "commit_sha": "ce1d35867d89e382c1ca56e29d8b1a52487bd760",
  "commit_msg": "[RESTRICT AUTOMERGE] Do not resume activity if behind a translucent task\n\nThe top-focusable activity resides in the RESUMED state while the app\nprocess is newly created and attached. The behavior may enable UI\nhijacking attacks against apps implementing authentication.\n\nThis CL disallows the system to resume the activity for the case if it\nis not visible or is occluded by other translucent tasks.\n\nBug: 211481342\nTest: atest CtsWindowManagerDeviceTestCases:ActivityLifecycleTests\nChange-Id: I7903494cf928b5b5613700262b7c5fff10f3c5a0\n(cherry picked from commit 8b7e0c52e883475bd78a4bd1e0ad05c2f3941704)\nMerged-In: I7903494cf928b5b5613700262b7c5fff10f3c5a0",
  "pr_url": null,
  "pr_info": "no more info",
  "file_name": "services/core/java/com/android/server/wm/EnsureActivitiesVisibleHelper.java",
  "func_name": "process",
  "func_before": "void process(@Nullable ActivityRecord starting, int configChanges, boolean preserveWindows,\n            boolean notifyClients) {\n        reset(starting, configChanges, preserveWindows, notifyClients);\n\n        if (DEBUG_VISIBILITY) Slog.v(TAG_VISIBILITY, \"ensureActivitiesVisible behind \" + mTop\n                + \" configChanges=0x\" + Integer.toHexString(configChanges));\n        if (mTop != null) {\n            mContiner.checkTranslucentActivityWaiting(mTop);\n        }\n\n        // We should not resume activities that being launched behind because these\n        // activities are actually behind other fullscreen activities, but still required\n        // to be visible (such as performing Recents animation).\n        final boolean resumeTopActivity = mTop != null && !mTop.mLaunchTaskBehind\n                && mContiner.isTopActivityFocusable()\n                && (starting == null || !starting.isDescendantOf(mContiner));\n\n        final PooledConsumer f = PooledLambda.obtainConsumer(\n                EnsureActivitiesVisibleHelper::setActivityVisibilityState, this,\n                PooledLambda.__(ActivityRecord.class), starting, resumeTopActivity);\n        mContiner.forAllActivities(f);\n        f.recycle();\n    }",
  "func_after": "void process(@Nullable ActivityRecord starting, int configChanges, boolean preserveWindows,\n            boolean notifyClients) {\n        reset(starting, configChanges, preserveWindows, notifyClients);\n\n        if (DEBUG_VISIBILITY) Slog.v(TAG_VISIBILITY, \"ensureActivitiesVisible behind \" + mTop\n                + \" configChanges=0x\" + Integer.toHexString(configChanges));\n        if (mTop != null) {\n            mContiner.checkTranslucentActivityWaiting(mTop);\n        }\n\n        // We should not resume activities that being launched behind because these\n        // activities are actually behind other fullscreen activities, but still required\n        // to be visible (such as performing Recents animation).\n        final boolean resumeTopActivity = mTop != null && !mTop.mLaunchTaskBehind\n                && mContiner.canBeResumed(starting)\n                && (starting == null || !starting.isDescendantOf(mContiner));\n\n        final PooledConsumer f = PooledLambda.obtainConsumer(\n                EnsureActivitiesVisibleHelper::setActivityVisibilityState, this,\n                PooledLambda.__(ActivityRecord.class), starting, resumeTopActivity);\n        mContiner.forAllActivities(f);\n        f.recycle();\n    }",
  "diff_func": "--- func_before\n+++ func_after\n void process(@Nullable ActivityRecord starting, int configChanges, boolean preserveWindows,\n             boolean notifyClients) {\n         reset(starting, configChanges, preserveWindows, notifyClients);\n \n         if (DEBUG_VISIBILITY) Slog.v(TAG_VISIBILITY, \"ensureActivitiesVisible behind \" + mTop\n                 + \" configChanges=0x\" + Integer.toHexString(configChanges));\n         if (mTop != null) {\n             mContiner.checkTranslucentActivityWaiting(mTop);\n         }\n \n         // We should not resume activities that being launched behind because these\n         // activities are actually behind other fullscreen activities, but still required\n         // to be visible (such as performing Recents animation).\n         final boolean resumeTopActivity = mTop != null && !mTop.mLaunchTaskBehind\n-                && mContiner.isTopActivityFocusable()\n+                && mContiner.canBeResumed(starting)\n                 && (starting == null || !starting.isDescendantOf(mContiner));\n \n         final PooledConsumer f = PooledLambda.obtainConsumer(\n                 EnsureActivitiesVisibleHelper::setActivityVisibilityState, this,\n                 PooledLambda.__(ActivityRecord.class), starting, resumeTopActivity);\n         mContiner.forAllActivities(f);\n         f.recycle();\n     }",
  "diff_source": "custom",
  "Bug Filter": "** Security Vulnerability Fix  \n**Confidence Score:** 0.95",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "\n\n**Analysis:**\n\nThe commit message indicates that the patch addresses a security concern related to UI hijacking attacks. The code changes modify the conditions under which an activity is resumed, specifically preventing resumption if the activity is not visible or is occluded. This directly mitigates a security vulnerability by preventing unauthorized UI access.\n\n**Final Classification:** Security Vulnerability Fix  \n**Confidence Score:** 0.95"
}