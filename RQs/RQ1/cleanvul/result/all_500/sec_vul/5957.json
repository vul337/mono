{
  "id": 5957,
  "language": "C/C++",
  "commit_url": "https://github.com/torvalds/linux/commit/867c20265459d30a01b021a9c1e81fb4c5832aa9",
  "commit_sha": "867c20265459d30a01b021a9c1e81fb4c5832aa9",
  "commit_msg": "ima: fix add LSM rule bug\n\nIf security_filter_rule_init() doesn't return a rule, then not everything\nis as fine as the return code implies.\n\nThis bug only occurs when the LSM (eg. SELinux) is disabled at runtime.\n\nAdding an empty LSM rule causes ima_match_rules() to always succeed,\nignoring any remaining rules.\n\n default IMA TCB policy:\n  # PROC_SUPER_MAGIC\n  dont_measure fsmagic=0x9fa0\n  # SYSFS_MAGIC\n  dont_measure fsmagic=0x62656572\n  # DEBUGFS_MAGIC\n  dont_measure fsmagic=0x64626720\n  # TMPFS_MAGIC\n  dont_measure fsmagic=0x01021994\n  # SECURITYFS_MAGIC\n  dont_measure fsmagic=0x73636673\n\n  < LSM specific rule >\n  dont_measure obj_type=var_log_t\n\n  measure func=BPRM_CHECK\n  measure func=FILE_MMAP mask=MAY_EXEC\n  measure func=FILE_CHECK mask=MAY_READ uid=0\n\nThus without the patch, with the boot parameters 'tcb selinux=0', adding\nthe above 'dont_measure obj_type=var_log_t' rule to the default IMA TCB\nmeasurement policy, would result in nothing being measured.  The patch\nprevents the default TCB policy from being replaced.\n\nSigned-off-by: Mimi Zohar <zohar@us.ibm.com>\nCc: James Morris <jmorris@namei.org>\nAcked-by: Serge Hallyn <serge.hallyn@canonical.com>\nCc: David Safford <safford@watson.ibm.com>\nCc: <stable@kernel.org>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
  "pr_url": null,
  "pr_info": "no more info",
  "file_name": "security/integrity/ima/ima_policy.c",
  "func_name": "ima_lsm_rule_init",
  "func_before": "static int ima_lsm_rule_init(struct ima_measure_rule_entry *entry,\n\t\t\t     char *args, int lsm_rule, int audit_type)\n{\n\tint result;\n\n\tif (entry->lsm[lsm_rule].rule)\n\t\treturn -EINVAL;\n\n\tentry->lsm[lsm_rule].type = audit_type;\n\tresult = security_filter_rule_init(entry->lsm[lsm_rule].type,\n\t\t\t\t\t   Audit_equal, args,\n\t\t\t\t\t   &entry->lsm[lsm_rule].rule);\n\treturn result;\n}",
  "func_after": "static int ima_lsm_rule_init(struct ima_measure_rule_entry *entry,\n\t\t\t     char *args, int lsm_rule, int audit_type)\n{\n\tint result;\n\n\tif (entry->lsm[lsm_rule].rule)\n\t\treturn -EINVAL;\n\n\tentry->lsm[lsm_rule].type = audit_type;\n\tresult = security_filter_rule_init(entry->lsm[lsm_rule].type,\n\t\t\t\t\t   Audit_equal, args,\n\t\t\t\t\t   &entry->lsm[lsm_rule].rule);\n\tif (!entry->lsm[lsm_rule].rule)\n\t\treturn -EINVAL;\n\treturn result;\n}",
  "diff_func": "--- func_before\n+++ func_after\n static int ima_lsm_rule_init(struct ima_measure_rule_entry *entry,\n \t\t\t     char *args, int lsm_rule, int audit_type)\n {\n \tint result;\n \n \tif (entry->lsm[lsm_rule].rule)\n \t\treturn -EINVAL;\n \n \tentry->lsm[lsm_rule].type = audit_type;\n \tresult = security_filter_rule_init(entry->lsm[lsm_rule].type,\n \t\t\t\t\t   Audit_equal, args,\n \t\t\t\t\t   &entry->lsm[lsm_rule].rule);\n+\tif (!entry->lsm[lsm_rule].rule)\n+\t\treturn -EINVAL;\n \treturn result;\n }",
  "diff_source": "custom",
  "Bug Filter": "Security Vulnerability Fix\n\nConfidence Score: 0.95",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "\n\n**Final Output:**\n\nAnalysis: The patch addresses a security issue where the absence of a proper LSM rule could cause IMA's measurement policy to fail, leading to potential security breaches by not measuring critical files. The fix ensures that only valid rules are added, preventing unauthorized access and data integrity issues.\n\nFinal Classification: Security Vulnerability Fix\n\nConfidence Score: 0.95"
}