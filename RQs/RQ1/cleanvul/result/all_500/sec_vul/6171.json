{
  "id": 6171,
  "language": "C/C++",
  "commit_url": "https://github.com/wireapp/restund/commit/deaef9ca241d9e68237cdce948c3c33a209cb312",
  "commit_sha": "deaef9ca241d9e68237cdce948c3c33a209cb312",
  "commit_msg": "Disallow channel binding on blocked addresses",
  "pr_url": "https://github.com/wireapp/restund/pull/7",
  "pr_info": "no more info",
  "file_name": "modules/turn/chan.c",
  "func_name": "chanbind_request",
  "func_before": "void chanbind_request(struct allocation *al, struct restund_msgctx *ctx,\n\t\t      int proto, void *sock, const struct sa *src,\n\t\t      const struct stun_msg *msg)\n{\n\tstruct chan *chan = NULL, *ch_numb = NULL, *ch_peer;\n\tstruct perm *perm = NULL, *permx = NULL;\n\tstruct stun_attr *chnr, *peer;\n\tint err = ENOMEM, rerr;\n\n\tchnr = stun_msg_attr(msg, STUN_ATTR_CHANNEL_NUMBER);\n\tpeer = stun_msg_attr(msg, STUN_ATTR_XOR_PEER_ADDR);\n\n\tif (!chnr || !chan_numb_valid(chnr->v.channel_number) || !peer) {\n\t\trestund_info(\"turn: bad chanbind attributes\\n\");\n\t\t++turndp()->reply.scode_400;\n\t\trerr = stun_ereply(proto, sock, src, 0, msg,\n\t\t\t\t   400, \"Bad Attributes\",\n\t\t\t\t   ctx->key, ctx->keylen, ctx->fp, 1,\n\t\t\t\t   STUN_ATTR_SOFTWARE, restund_software);\n\t\tgoto out;\n\t}\n\n\tif (sa_af(&peer->v.xor_peer_addr) != sa_af(&al->rel_addr)) {\n\t\trestund_info(\"turn: chanbind peer address family mismatch\\n\");\n\t\t++turndp()->reply.scode_443;\n\t\trerr = stun_ereply(proto, sock, src, 0, msg,\n\t\t\t\t   443, \"Peer Address Family Mismatch\",\n\t\t\t\t   ctx->key, ctx->keylen, ctx->fp, 1,\n\t\t\t\t   STUN_ATTR_SOFTWARE, restund_software);\n\t\tgoto out;\n\t}\n\n\tch_numb = chan_numb_find(al->chans, chnr->v.channel_number);\n\tch_peer = chan_peer_find(al->chans, &peer->v.xor_peer_addr);\n\n\tif (ch_numb != ch_peer) {\n\t\trestund_info(\"turn: channel %p/peer %p already bound\\n\",\n\t\t\t     ch_numb, ch_peer);\n\t\t++turndp()->reply.scode_400;\n\t\trerr = stun_ereply(proto, sock, src, 0, msg,\n\t\t\t\t   400, \"Channel/Peer Already Bound\",\n\t\t\t\t   ctx->key, ctx->keylen, ctx->fp, 1,\n\t\t\t\t   STUN_ATTR_SOFTWARE, restund_software);\n\t\tgoto out;\n\t}\n\n\tif (!ch_numb) {\n\t\tchan = chan_create(al->chans, chnr->v.channel_number,\n\t\t\t\t   &peer->v.xor_peer_addr, al);\n\t\tif (!chan) {\n\t\t\trestund_info(\"turn: unable to create channel\\n\");\n\t\t\t++turndp()->reply.scode_500;\n\t\t\trerr = stun_ereply(proto, sock, src, 0, msg,\n\t\t\t\t\t  500, \"Server Error\",\n\t\t\t\t\t  ctx->key, ctx->keylen, ctx->fp, 1,\n\t\t\t\t\t  STUN_ATTR_SOFTWARE,restund_software);\n\t\t\tgoto out;\n\t\t}\n\t}\n\n\tpermx = perm_find(al->perms, &peer->v.xor_peer_addr);\n\tif (!permx) {\n\t\tperm = perm_create(al->perms, &peer->v.xor_peer_addr, al);\n\t\tif (!perm) {\n\t\t\trestund_info(\"turn: unable to create permission\\n\");\n\t\t\t++turndp()->reply.scode_500;\n\t\t\trerr = stun_ereply(proto, sock, src, 0, msg,\n\t\t\t\t\t  500, \"Server Error\",\n\t\t\t\t\t  ctx->key, ctx->keylen, ctx->fp, 1,\n\t\t\t\t\t  STUN_ATTR_SOFTWARE,restund_software);\n\t\t\tgoto out;\n\t\t}\n\t}\n\n\terr = rerr = stun_reply(proto, sock, src, 0, msg,\n\t\t\t\tctx->key, ctx->keylen, ctx->fp, 1,\n\t\t\t\tSTUN_ATTR_SOFTWARE, restund_software);\n out:\n\tif (rerr)\n\t\trestund_warning(\"turn: chanbind reply: %m\\n\", rerr);\n\n\tif (err) {\n\t\tmem_deref(chan);\n\t\tmem_deref(perm);\n\t}\n\telse {\n\t\tchan_refresh(ch_numb);\n\t\tperm_refresh(permx);\n\t}\n}",
  "func_after": "void chanbind_request(struct allocation *al, struct restund_msgctx *ctx,\n\t\t      int proto, void *sock, const struct sa *src,\n\t\t      const struct stun_msg *msg)\n{\n\tstruct chan *chan = NULL, *ch_numb = NULL, *ch_peer;\n\tstruct perm *perm = NULL, *permx = NULL;\n\tstruct stun_attr *chnr, *peer;\n\tint err = ENOMEM, rerr;\n\n\tchnr = stun_msg_attr(msg, STUN_ATTR_CHANNEL_NUMBER);\n\tpeer = stun_msg_attr(msg, STUN_ATTR_XOR_PEER_ADDR);\n\n\tif (!chnr || !chan_numb_valid(chnr->v.channel_number) || !peer) {\n\t\trestund_info(\"turn: bad chanbind attributes\\n\");\n\t\t++turndp()->reply.scode_400;\n\t\trerr = stun_ereply(proto, sock, src, 0, msg,\n\t\t\t\t   400, \"Bad Attributes\",\n\t\t\t\t   ctx->key, ctx->keylen, ctx->fp, 1,\n\t\t\t\t   STUN_ATTR_SOFTWARE, restund_software);\n\t\tgoto out;\n\t}\n\n\tif (restund_addr_is_blocked(&peer->v.xor_peer_addr)) {\n\t\trestund_info(\"turn: blocked address\\n\");\n\t\t++turndp()->reply.scode_400;\n\t\trerr = stun_ereply(proto, sock, src, 0, msg,\n\t\t\t\t   403, \"Forbidden\",\n\t\t\t\t   ctx->key, ctx->keylen, ctx->fp, 1,\n\t\t\t\t   STUN_ATTR_SOFTWARE, restund_software);\n\t\tgoto out;\n\t}\n\n\tif (sa_af(&peer->v.xor_peer_addr) != sa_af(&al->rel_addr)) {\n\t\trestund_info(\"turn: chanbind peer address family mismatch\\n\");\n\t\t++turndp()->reply.scode_443;\n\t\trerr = stun_ereply(proto, sock, src, 0, msg,\n\t\t\t\t   443, \"Peer Address Family Mismatch\",\n\t\t\t\t   ctx->key, ctx->keylen, ctx->fp, 1,\n\t\t\t\t   STUN_ATTR_SOFTWARE, restund_software);\n\t\tgoto out;\n\t}\n\n\tch_numb = chan_numb_find(al->chans, chnr->v.channel_number);\n\tch_peer = chan_peer_find(al->chans, &peer->v.xor_peer_addr);\n\n\tif (ch_numb != ch_peer) {\n\t\trestund_info(\"turn: channel %p/peer %p already bound\\n\",\n\t\t\t     ch_numb, ch_peer);\n\t\t++turndp()->reply.scode_400;\n\t\trerr = stun_ereply(proto, sock, src, 0, msg,\n\t\t\t\t   400, \"Channel/Peer Already Bound\",\n\t\t\t\t   ctx->key, ctx->keylen, ctx->fp, 1,\n\t\t\t\t   STUN_ATTR_SOFTWARE, restund_software);\n\t\tgoto out;\n\t}\n\n\tif (!ch_numb) {\n\t\tchan = chan_create(al->chans, chnr->v.channel_number,\n\t\t\t\t   &peer->v.xor_peer_addr, al);\n\t\tif (!chan) {\n\t\t\trestund_info(\"turn: unable to create channel\\n\");\n\t\t\t++turndp()->reply.scode_500;\n\t\t\trerr = stun_ereply(proto, sock, src, 0, msg,\n\t\t\t\t\t  500, \"Server Error\",\n\t\t\t\t\t  ctx->key, ctx->keylen, ctx->fp, 1,\n\t\t\t\t\t  STUN_ATTR_SOFTWARE,restund_software);\n\t\t\tgoto out;\n\t\t}\n\t}\n\n\tpermx = perm_find(al->perms, &peer->v.xor_peer_addr);\n\tif (!permx) {\n\t\tperm = perm_create(al->perms, &peer->v.xor_peer_addr, al);\n\t\tif (!perm) {\n\t\t\trestund_info(\"turn: unable to create permission\\n\");\n\t\t\t++turndp()->reply.scode_500;\n\t\t\trerr = stun_ereply(proto, sock, src, 0, msg,\n\t\t\t\t\t  500, \"Server Error\",\n\t\t\t\t\t  ctx->key, ctx->keylen, ctx->fp, 1,\n\t\t\t\t\t  STUN_ATTR_SOFTWARE,restund_software);\n\t\t\tgoto out;\n\t\t}\n\t}\n\n\terr = rerr = stun_reply(proto, sock, src, 0, msg,\n\t\t\t\tctx->key, ctx->keylen, ctx->fp, 1,\n\t\t\t\tSTUN_ATTR_SOFTWARE, restund_software);\n out:\n\tif (rerr)\n\t\trestund_warning(\"turn: chanbind reply: %m\\n\", rerr);\n\n\tif (err) {\n\t\tmem_deref(chan);\n\t\tmem_deref(perm);\n\t}\n\telse {\n\t\tchan_refresh(ch_numb);\n\t\tperm_refresh(permx);\n\t}\n}",
  "diff_func": "--- func_before\n+++ func_after\n void chanbind_request(struct allocation *al, struct restund_msgctx *ctx,\n \t\t      int proto, void *sock, const struct sa *src,\n \t\t      const struct stun_msg *msg)\n {\n \tstruct chan *chan = NULL, *ch_numb = NULL, *ch_peer;\n \tstruct perm *perm = NULL, *permx = NULL;\n \tstruct stun_attr *chnr, *peer;\n \tint err = ENOMEM, rerr;\n \n \tchnr = stun_msg_attr(msg, STUN_ATTR_CHANNEL_NUMBER);\n \tpeer = stun_msg_attr(msg, STUN_ATTR_XOR_PEER_ADDR);\n \n \tif (!chnr || !chan_numb_valid(chnr->v.channel_number) || !peer) {\n \t\trestund_info(\"turn: bad chanbind attributes\\n\");\n \t\t++turndp()->reply.scode_400;\n \t\trerr = stun_ereply(proto, sock, src, 0, msg,\n \t\t\t\t   400, \"Bad Attributes\",\n+\t\t\t\t   ctx->key, ctx->keylen, ctx->fp, 1,\n+\t\t\t\t   STUN_ATTR_SOFTWARE, restund_software);\n+\t\tgoto out;\n+\t}\n+\n+\tif (restund_addr_is_blocked(&peer->v.xor_peer_addr)) {\n+\t\trestund_info(\"turn: blocked address\\n\");\n+\t\t++turndp()->reply.scode_400;\n+\t\trerr = stun_ereply(proto, sock, src, 0, msg,\n+\t\t\t\t   403, \"Forbidden\",\n \t\t\t\t   ctx->key, ctx->keylen, ctx->fp, 1,\n \t\t\t\t   STUN_ATTR_SOFTWARE, restund_software);\n \t\tgoto out;\n \t}\n \n \tif (sa_af(&peer->v.xor_peer_addr) != sa_af(&al->rel_addr)) {\n \t\trestund_info(\"turn: chanbind peer address family mismatch\\n\");\n \t\t++turndp()->reply.scode_443;\n \t\trerr = stun_ereply(proto, sock, src, 0, msg,\n \t\t\t\t   443, \"Peer Address Family Mismatch\",\n \t\t\t\t   ctx->key, ctx->keylen, ctx->fp, 1,\n \t\t\t\t   STUN_ATTR_SOFTWARE, restund_software);\n \t\tgoto out;\n \t}\n \n \tch_numb = chan_numb_find(al->chans, chnr->v.channel_number);\n \tch_peer = chan_peer_find(al->chans, &peer->v.xor_peer_addr);\n \n \tif (ch_numb != ch_peer) {\n \t\trestund_info(\"turn: channel %p/peer %p already bound\\n\",\n \t\t\t     ch_numb, ch_peer);\n \t\t++turndp()->reply.scode_400;\n \t\trerr = stun_ereply(proto, sock, src, 0, msg,\n \t\t\t\t   400, \"Channel/Peer Already Bound\",\n \t\t\t\t   ctx->key, ctx->keylen, ctx->fp, 1,\n \t\t\t\t   STUN_ATTR_SOFTWARE, restund_software);\n \t\tgoto out;\n \t}\n \n \tif (!ch_numb) {\n \t\tchan = chan_cre",
  "diff_source": "custom",
  "Bug Filter": "**\nSecurity Vulnerability Fix\n\n**Confidence Score:**\n0.95\n\n**Reasoning:**\nThe patch clearly addresses a security issue by preventing channel binding from blocked addresses, thus mitigating unauthorized access. The code change is a direct fix for a security vulnerability.",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "\n\n**Analysis:**\n\nThe patch introduces a check to disallow channel binding on blocked addresses. This change is aimed at preventing unauthorized access by ensuring that requests from blocked addresses are rejected. The code modification adds a condition using `restund_addr_is_blocked()` to check if the peer address is blocked. If it is, a 403 Forbidden response is sent. This addresses a potential security vulnerability where blocked addresses could previously bind channels, leading to unauthorized access.\n\n**Final Classification:**\nSecurity Vulnerability Fix\n\n**Confidence Score:**\n0.95\n\n**Reasoning:**\nThe patch clearly addresses a security issue by preventing channel binding from blocked addresses, thus mitigating unauthorized access. The code change is a direct fix for a security vulnerability."
}