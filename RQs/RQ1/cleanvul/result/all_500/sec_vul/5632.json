{
  "id": 5632,
  "language": "Python",
  "commit_url": "https://github.com/graphite-project/graphite-web/commit/1104d3d8f7f167c4ff5bbfe155927afa928c2404",
  "commit_sha": "1104d3d8f7f167c4ff5bbfe155927afa928c2404",
  "commit_msg": "prevent xss on dashbord queries",
  "pr_url": "https://github.com/graphite-project/graphite-web/pull/2785",
  "pr_info": "Fixes XSS in some dashboards queries:\r\nissue #2744\r\nissue #2745\r\n\r\nAlso fix:\r\nissue #2746\r\n",
  "file_name": "webapp/graphite/dashboard/views.py",
  "func_name": "template",
  "func_before": "def template(request, name, val):\n  template_conf_missing = False\n\n  try:\n    config.check()\n  except OSError as e:\n    if e.errno == errno.ENOENT:\n      template_conf_missing = True\n    else:\n      raise\n\n  initialError = None\n  debug = request.GET.get('debug', False)\n  theme = request.GET.get('theme', config.ui_config['theme'])\n  css_file = finders.find('css/dashboard-%s.css' % theme)\n  if css_file is None:\n    initialError = \"Invalid theme '%s'\" % theme\n    theme = config.ui_config['theme']\n\n  context = {\n    'schemes_json' : json.dumps(config.schemes),\n    'ui_config_json' : json.dumps(config.ui_config),\n    'jsdebug' : debug or settings.JAVASCRIPT_DEBUG,\n    'debug' : debug,\n    'theme' : theme,\n    'initialError' : initialError,\n    'querystring' : json.dumps( dict( request.GET.items() ) ),\n    'template_conf_missing' : template_conf_missing,\n    'userName': '',\n    'permissions': json.dumps(getPermissions(request.user)),\n    'permissionsUnauthenticated': json.dumps(getPermissions(None))\n  }\n\n  user = request.user\n  if user:\n      context['userName'] = user.username\n\n  try:\n    template = Template.objects.get(name=name)\n  except Template.DoesNotExist:\n    context['initialError'] = \"Template '%s' does not exist.\" % name\n  else:\n    state = json.loads(template.loadState(val))\n    state['name'] = '%s/%s' % (name, val)\n    context['initialState'] = json.dumps(state)\n  return render(request, \"dashboard.html\", context)",
  "func_after": "def template(request, name, val):\n  name = str_param('name', name)\n  template_conf_missing = False\n\n  try:\n    config.check()\n  except OSError as e:\n    if e.errno == errno.ENOENT:\n      template_conf_missing = True\n    else:\n      raise\n\n  initialError = None\n  debug = request.GET.get('debug', False)\n  theme = request.GET.get('theme', config.ui_config['theme'])\n  css_file = finders.find('css/dashboard-%s.css' % theme)\n  if css_file is None:\n    initialError = \"Invalid theme '%s'\" % theme\n    theme = config.ui_config['theme']\n\n  context = {\n    'schemes_json' : json.dumps(config.schemes),\n    'ui_config_json' : json.dumps(config.ui_config),\n    'jsdebug' : debug or settings.JAVASCRIPT_DEBUG,\n    'debug' : debug,\n    'theme' : theme,\n    'initialError' : initialError,\n    'querystring' : json.dumps( dict( request.GET.items() ) ),\n    'template_conf_missing' : template_conf_missing,\n    'userName': '',\n    'permissions': json.dumps(getPermissions(request.user)),\n    'permissionsUnauthenticated': json.dumps(getPermissions(None))\n  }\n\n  user = request.user\n  if user:\n      context['userName'] = user.username\n\n  try:\n    template = Template.objects.get(name=name)\n  except Template.DoesNotExist:\n    context['initialError'] = \"Template '%s' does not exist.\" % name\n  else:\n    state = json.loads(template.loadState(val))\n    state['name'] = '%s/%s' % (name, val)\n    context['initialState'] = json.dumps(state)\n  return render(request, \"dashboard.html\", context)",
  "diff_func": "--- func_before\n+++ func_after\n def template(request, name, val):\n+  name = str_param('name', name)\n   template_conf_missing = False\n \n   try:\n     config.check()\n   except OSError as e:\n     if e.errno == errno.ENOENT:\n       template_conf_missing = True\n     else:\n       raise\n \n   initialError = None\n   debug = request.GET.get('debug', False)\n   theme = request.GET.get('theme', config.ui_config['theme'])\n   css_file = finders.find('css/dashboard-%s.css' % theme)\n   if css_file is None:\n     initialError = \"Invalid theme '%s'\" % theme\n     theme = config.ui_config['theme']\n \n   context = {\n     'schemes_json' : json.dumps(config.schemes),\n     'ui_config_json' : json.dumps(config.ui_config),\n     'jsdebug' : debug or settings.JAVASCRIPT_DEBUG,\n     'debug' : debug,\n     'theme' : theme,\n     'initialError' : initialError,\n     'querystring' : json.dumps( dict( request.GET.items() ) ),\n     'template_conf_missing' : template_conf_missing,\n     'userName': '',\n     'permissions': json.dumps(getPermissions(request.user)),\n     'permissionsUnauthenticated': json.dumps(getPermissions(None))\n   }\n \n   user = request.user\n   if user:\n       context['userName'] = user.username\n \n   try:\n     template = Template.objects.get(name=name)\n   except Template.DoesNotExist:\n     context['initialError'] = \"Template '%s' does not exist.\" % name\n   else:\n     state = json.loads(template.loadState(val))\n     state['name'] = '%s/%s' % (name, val)\n     context['initialState'] = json.dumps(state)\n   return render(request, \"dashboard.html\", context)",
  "diff_source": "custom",
  "Bug Filter": "Security Vulnerability Fix  \nConfidence Score: 0.95",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "\n\n**Final Output:**\n\nAnalysis: The commit message indicates a fix for an XSS vulnerability. The code change adds a sanitization step for the 'name' parameter, preventing malicious scripts from being injected. This addresses a security defect that could be exploited, impacting system security.\n\nFinal Classification: Security Vulnerability Fix  \nConfidence Score: 0.95"
}