{
  "id": 1953,
  "language": "Java",
  "commit_url": "https://github.com/AOSPA/android_frameworks_base/commit/de2ba563d737ad3e8dae97fb488afdc7967e827e",
  "commit_sha": "de2ba563d737ad3e8dae97fb488afdc7967e827e",
  "commit_msg": "[RESTRICT AUTOMERGE] [SettingsProvider] mem limit should be checked before settings are updated\n\nPreviously, a setting is updated before the memory usage limit\ncheck, which can be exploited by malicious apps and cause OoM DoS.\n\nThis CL changes the logic to checkMemLimit -> update -> updateMemUsage.\n\nBUG: 239415861\nTest: atest com.android.providers.settings.SettingsStateTest\n\n(cherry picked from commit 8eeb92950f4a7012d4cf282106a1418fd211f475)\nMerged-In: I20551a2dba9aa79efa0c064824f349f551c2c2e4\nChange-Id: I20551a2dba9aa79efa0c064824f349f551c2c2e4",
  "pr_url": null,
  "pr_info": "no more info",
  "file_name": "packages/SettingsProvider/src/com/android/providers/settings/SettingsState.java",
  "func_name": "GuardedBy",
  "func_before": "@GuardedBy(\"mLock\")\n    public boolean deleteSettingLocked(String name) {\n        if (TextUtils.isEmpty(name) || !hasSettingLocked(name)) {\n            return false;\n        }\n\n        Setting oldState = mSettings.remove(name);\n\n        FrameworkStatsLog.write(FrameworkStatsLog.SETTING_CHANGED, name, /* value= */ \"\",\n                /* newValue= */ \"\", oldState.value, /* tag */ \"\", false, getUserIdFromKey(mKey),\n                FrameworkStatsLog.SETTING_CHANGED__REASON__DELETED);\n\n        updateMemoryUsagePerPackageLocked(oldState.packageName, oldState.value,\n                null, oldState.defaultValue, null);\n\n        addHistoricalOperationLocked(HISTORICAL_OPERATION_DELETE, oldState);\n\n        scheduleWriteIfNeededLocked();\n\n        return true;\n    }",
  "func_after": "@GuardedBy(\"mLock\")\n    public boolean deleteSettingLocked(String name) {\n        if (TextUtils.isEmpty(name) || !hasSettingLocked(name)) {\n            return false;\n        }\n\n        Setting oldState = mSettings.remove(name);\n        int newSize = getNewMemoryUsagePerPackageLocked(oldState.packageName, oldState.value,\n                null, oldState.defaultValue, null);\n\n        FrameworkStatsLog.write(FrameworkStatsLog.SETTING_CHANGED, name, /* value= */ \"\",\n                /* newValue= */ \"\", oldState.value, /* tag */ \"\", false, getUserIdFromKey(mKey),\n                FrameworkStatsLog.SETTING_CHANGED__REASON__DELETED);\n\n        updateMemoryUsagePerPackageLocked(oldState.packageName, newSize);\n\n        addHistoricalOperationLocked(HISTORICAL_OPERATION_DELETE, oldState);\n\n        scheduleWriteIfNeededLocked();\n\n        return true;\n    }",
  "diff_func": "--- func_before\n+++ func_after\n @GuardedBy(\"mLock\")\n     public boolean deleteSettingLocked(String name) {\n         if (TextUtils.isEmpty(name) || !hasSettingLocked(name)) {\n             return false;\n         }\n \n         Setting oldState = mSettings.remove(name);\n+        int newSize = getNewMemoryUsagePerPackageLocked(oldState.packageName, oldState.value,\n+                null, oldState.defaultValue, null);\n \n         FrameworkStatsLog.write(FrameworkStatsLog.SETTING_CHANGED, name, /* value= */ \"\",\n                 /* newValue= */ \"\", oldState.value, /* tag */ \"\", false, getUserIdFromKey(mKey),\n                 FrameworkStatsLog.SETTING_CHANGED__REASON__DELETED);\n \n-        updateMemoryUsagePerPackageLocked(oldState.packageName, oldState.value,\n+        updateMemoryUsagePerPackageLocked(oldState.packageName, newSize);\n-                null, oldState.defaultValue, null);\n \n         addHistoricalOperationLocked(HISTORICAL_OPERATION_DELETE, oldState);\n \n         scheduleWriteIfNeededLocked();\n \n         return true;\n     }",
  "diff_source": "custom",
  "Bug Filter": "** Security Vulnerability Fix  \n**Confidence Score:** 1.0",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "\n\nThe patch addresses a security vulnerability where a malicious app could cause an Out-of-Memory DoS by exploiting the order of memory checks. The fix changes the logic to check memory before updating settings, preventing the exploit.\n\n**Final Classification:** Security Vulnerability Fix  \n**Confidence Score:** 1.0"
}