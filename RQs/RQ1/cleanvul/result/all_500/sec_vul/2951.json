{
  "id": 2951,
  "language": "Java",
  "commit_url": "https://github.com/AOSPA/android_frameworks_base/commit/33ef94742ec8671bebcdcabefd86303117c7dbad",
  "commit_sha": "33ef94742ec8671bebcdcabefd86303117c7dbad",
  "commit_msg": "AudioService: validate uid / package name match\n\nWhen checking app ops, check for exceptions that indicate uid\nand package name mismatch.\nThis affects the code paths for methods:\n- adjustStreamVolume\n- setStreamVolume\n- setMicrophoneMute\n- setMasterMute\n\nBug: 194110891, 194110526\nTest: see bug exploit app, verify real/bogus package shows uninstalled\nChange-Id: I5cdd52899bc3c89b41bc6074568e2b62637c005c",
  "pr_url": null,
  "pr_info": "no more info",
  "file_name": "services/core/java/com/android/server/audio/AudioService.java",
  "func_name": "setMasterMuteInternal",
  "func_before": "private void setMasterMuteInternal(boolean mute, int flags, String callingPackage, int uid,\n            int userId, String attributionTag) {\n        // If we are being called by the system check for user we are going to change\n        // so we handle user restrictions correctly.\n        if (uid == android.os.Process.SYSTEM_UID) {\n            uid = UserHandle.getUid(userId, UserHandle.getAppId(uid));\n        }\n        // If OP_AUDIO_MASTER_VOLUME is set, disallow unmuting.\n        if (!mute && mAppOps.noteOp(AppOpsManager.OP_AUDIO_MASTER_VOLUME, uid,\n                callingPackage, attributionTag, null) != AppOpsManager.MODE_ALLOWED) {\n            return;\n        }\n        if (userId != UserHandle.getCallingUserId() &&\n                mContext.checkCallingOrSelfPermission(\n                        android.Manifest.permission.INTERACT_ACROSS_USERS_FULL)\n                != PackageManager.PERMISSION_GRANTED) {\n            return;\n        }\n        setMasterMuteInternalNoCallerCheck(mute, flags, userId);\n    }",
  "func_after": "private void setMasterMuteInternal(boolean mute, int flags, String callingPackage, int uid,\n            int userId, String attributionTag) {\n        // If we are being called by the system check for user we are going to change\n        // so we handle user restrictions correctly.\n        if (uid == android.os.Process.SYSTEM_UID) {\n            uid = UserHandle.getUid(userId, UserHandle.getAppId(uid));\n        }\n        // If OP_AUDIO_MASTER_VOLUME is set, disallow unmuting.\n        if (!mute && !checkNoteAppOp(\n                AppOpsManager.OP_AUDIO_MASTER_VOLUME, uid, callingPackage, attributionTag)) {\n            return;\n        }\n        if (userId != UserHandle.getCallingUserId() &&\n                mContext.checkCallingOrSelfPermission(\n                        android.Manifest.permission.INTERACT_ACROSS_USERS_FULL)\n                != PackageManager.PERMISSION_GRANTED) {\n            return;\n        }\n        setMasterMuteInternalNoCallerCheck(mute, flags, userId);\n    }",
  "diff_func": "--- func_before\n+++ func_after\n private void setMasterMuteInternal(boolean mute, int flags, String callingPackage, int uid,\n             int userId, String attributionTag) {\n         // If we are being called by the system check for user we are going to change\n         // so we handle user restrictions correctly.\n         if (uid == android.os.Process.SYSTEM_UID) {\n             uid = UserHandle.getUid(userId, UserHandle.getAppId(uid));\n         }\n         // If OP_AUDIO_MASTER_VOLUME is set, disallow unmuting.\n-        if (!mute && mAppOps.noteOp(AppOpsManager.OP_AUDIO_MASTER_VOLUME, uid,\n-                callingPackage, attributionTag, null) != AppOpsManager.MODE_ALLOWED) {\n+        if (!mute && !checkNoteAppOp(\n+                AppOpsManager.OP_AUDIO_MASTER_VOLUME, uid, callingPackage, attributionTag)) {\n             return;\n         }\n         if (userId != UserHandle.getCallingUserId() &&\n                 mContext.checkCallingOrSelfPermission(\n                         android.Manifest.permission.INTERACT_ACROSS_USERS_FULL)\n                 != PackageManager.PERMISSION_GRANTED) {\n             return;\n         }\n         setMasterMuteInternalNoCallerCheck(mute, flags, userId);\n     }",
  "diff_source": "custom",
  "Bug Filter": "** Security Vulnerability Fix  \n**Confidence Score:** 0.95",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "\n\n**Analysis:**\n\nThe patch addresses a security vulnerability by validating the uid and package name match in the AudioService. The code change introduces a check to prevent uid/package name mismatches, which could otherwise be exploited to gain unauthorized access to audio settings.\n\n**Final Classification:** Security Vulnerability Fix  \n**Confidence Score:** 0.95"
}