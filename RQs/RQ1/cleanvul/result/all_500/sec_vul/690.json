{
  "id": 690,
  "language": "Java",
  "commit_url": "https://github.com/PixelExperience/frameworks_base/commit/e5eac1c958d729fcd9d4c7cd77d5830091843e52",
  "commit_sha": "e5eac1c958d729fcd9d4c7cd77d5830091843e52",
  "commit_msg": "[RESTRICT AUTOMERGE][SettingsProvider] key size limit for mutating settings\n\nPrior to targetSdk 22, apps could add random system settings keys which\nopens an opportunity for OOM attacks. This CL adds a key size limit.\n\nBUG: 239415997\nTest: manual; will add cts test\nMerged-In: Ic9e88c0cc3d7206c64ba5b5c7d15b50d1ffc9adc\nChange-Id: Ic9e88c0cc3d7206c64ba5b5c7d15b50d1ffc9adc\n(cherry picked from commit 783bcba343c480f6ccedaaff41ba7171a1082e0c)",
  "pr_url": null,
  "pr_info": "no more info",
  "file_name": "packages/SettingsProvider/src/com/android/providers/settings/SettingsState.java",
  "func_name": "GuardedBy",
  "func_before": "@GuardedBy(\"mLock\")\n    public boolean resetSettingLocked(String name) {\n        if (TextUtils.isEmpty(name) || !hasSettingLocked(name)) {\n            return false;\n        }\n\n        Setting setting = mSettings.get(name);\n\n        Setting oldSetting = new Setting(setting);\n        String oldValue = setting.getValue();\n        String oldDefaultValue = setting.getDefaultValue();\n        String newValue = oldDefaultValue;\n        String newDefaultValue = oldDefaultValue;\n\n        int newSize = getNewMemoryUsagePerPackageLocked(setting.packageName, oldValue,\n                newValue, oldDefaultValue, newDefaultValue);\n        checkNewMemoryUsagePerPackageLocked(setting.packageName, newSize);\n\n        if (!setting.reset()) {\n            return false;\n        }\n\n        updateMemoryUsagePerPackageLocked(setting.packageName, newSize);\n\n        addHistoricalOperationLocked(HISTORICAL_OPERATION_RESET, oldSetting);\n\n        scheduleWriteIfNeededLocked();\n\n        return true;\n    }",
  "func_after": "@GuardedBy(\"mLock\")\n    public boolean resetSettingLocked(String name) {\n        if (TextUtils.isEmpty(name) || !hasSettingLocked(name)) {\n            return false;\n        }\n\n        Setting setting = mSettings.get(name);\n        if (setting == null) {\n            return false;\n        }\n\n        Setting oldSetting = new Setting(setting);\n        String oldValue = setting.getValue();\n        String oldDefaultValue = setting.getDefaultValue();\n\n        int newSize = getNewMemoryUsagePerPackageLocked(setting.packageName, 0, oldValue,\n                oldDefaultValue, oldDefaultValue, oldDefaultValue);\n        checkNewMemoryUsagePerPackageLocked(setting.packageName, newSize);\n\n        if (!setting.reset()) {\n            return false;\n        }\n\n        updateMemoryUsagePerPackageLocked(setting.packageName, newSize);\n\n        addHistoricalOperationLocked(HISTORICAL_OPERATION_RESET, oldSetting);\n\n        scheduleWriteIfNeededLocked();\n\n        return true;\n    }",
  "diff_func": "--- func_before\n+++ func_after\n @GuardedBy(\"mLock\")\n     public boolean resetSettingLocked(String name) {\n         if (TextUtils.isEmpty(name) || !hasSettingLocked(name)) {\n             return false;\n         }\n \n         Setting setting = mSettings.get(name);\n+        if (setting == null) {\n+            return false;\n+        }\n \n         Setting oldSetting = new Setting(setting);\n         String oldValue = setting.getValue();\n         String oldDefaultValue = setting.getDefaultValue();\n-        String newValue = oldDefaultValue;\n-        String newDefaultValue = oldDefaultValue;\n \n-        int newSize = getNewMemoryUsagePerPackageLocked(setting.packageName, oldValue,\n+        int newSize = getNewMemoryUsagePerPackageLocked(setting.packageName, 0, oldValue,\n-                newValue, oldDefaultValue, newDefaultValue);\n+                oldDefaultValue, oldDefaultValue, oldDefaultValue);\n         checkNewMemoryUsagePerPackageLocked(setting.packageName, newSize);\n \n         if (!setting.reset()) {\n             return false;\n         }\n \n         updateMemoryUsagePerPackageLocked(setting.packageName, newSize);\n \n         addHistoricalOperationLocked(HISTORICAL_OPERATION_RESET, oldSetting);\n \n         scheduleWriteIfNeededLocked();\n \n         return true;\n     }",
  "diff_source": "custom",
  "Bug Filter": "Security Vulnerability Fix\n\nConfidence Score: 1.0",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "\n\n**Final Output:**\n\nAnalysis: The patch addresses a security vulnerability by adding a key size limit to prevent OOM attacks, as indicated by the commit message and code changes.\n\nFinal Classification: Security Vulnerability Fix\n\nConfidence Score: 1.0"
}