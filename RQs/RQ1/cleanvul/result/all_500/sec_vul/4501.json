{
  "id": 4501,
  "language": "C/C++",
  "commit_url": "https://github.com/pymumu/smartdns/commit/56d0332bf91104cfc877635f6c82e9348587df04",
  "commit_sha": "56d0332bf91104cfc877635f6c82e9348587df04",
  "commit_msg": "dns: fix crash issue",
  "pr_url": null,
  "pr_info": "no more info",
  "file_name": "src/dns.c",
  "func_name": "_dns_encode_domain",
  "func_before": "static int _dns_encode_domain(struct dns_context *context, const char *domain)\n{\n\tint num = 0;\n\tint total_len = 0;\n\tunsigned char *ptr_num = context->ptr++;\n\tint dict_offset = 0;\n\n\tdict_offset = _dns_get_domain_offset(context, domain);\n\ttotal_len++;\n\n\t/*[len]string[len]string...[0]0 */\n\twhile (_dns_left_len(context) > 1 && *domain != 0) {\n\t\ttotal_len++;\n\t\tif (dict_offset >= 0) {\n\t\t\tint offset = 0xc000 | dict_offset;\n\t\t\t_dns_write_short(&ptr_num, offset);\n\t\t\tcontext->ptr++;\n\t\t\tptr_num = NULL;\n\t\t\treturn total_len;\n\t\t}\n\n\t\tif (*domain == '.') {\n\t\t\t*ptr_num = num;\n\t\t\tnum = 0;\n\t\t\tptr_num = context->ptr;\n\t\t\tdomain++;\n\t\t\tcontext->ptr++;\n\t\t\tdict_offset = _dns_get_domain_offset(context, domain);\n\t\t\tcontinue;\n\t\t}\n\t\t*context->ptr = *domain;\n\t\tnum++;\n\t\tcontext->ptr++;\n\t\tdomain++;\n\t}\n\n\t*ptr_num = num;\n\n\tif (total_len > 1) {\n\t\t/* if domain is '\\0', [domain] is '\\0' */\n\t\t*(context->ptr) = 0;\n\t\ttotal_len++;\n\t\tcontext->ptr++;\n\t}\n\n\tif (_dns_left_len(context) <= 0) {\n\t\treturn -1;\n\t}\n\n\treturn total_len;\n}",
  "func_after": "static int _dns_encode_domain(struct dns_context *context, const char *domain)\n{\n\tint num = 0;\n\tint total_len = 0;\n\tunsigned char *ptr_num = context->ptr++;\n\tint dict_offset = 0;\n\n\tdict_offset = _dns_get_domain_offset(context, domain);\n\ttotal_len++;\n\n\t/*[len]string[len]string...[0]0 */\n\twhile (_dns_left_len(context) > 1 && *domain != 0) {\n\t\ttotal_len++;\n\t\tif (dict_offset >= 0) {\n\t\t\tint offset = 0xc000 | dict_offset;\n\t\t\tif (_dns_left_len(context) < 2) {\n\t\t\t\treturn -1;\n\t\t\t}\n\n\t\t\t_dns_write_short(&ptr_num, offset);\n\t\t\tcontext->ptr++;\n\t\t\tptr_num = NULL;\n\t\t\treturn total_len;\n\t\t}\n\n\t\tif (*domain == '.') {\n\t\t\t*ptr_num = num;\n\t\t\tnum = 0;\n\t\t\tptr_num = context->ptr;\n\t\t\tdomain++;\n\t\t\tcontext->ptr++;\n\t\t\tdict_offset = _dns_get_domain_offset(context, domain);\n\t\t\tcontinue;\n\t\t}\n\t\t*context->ptr = *domain;\n\t\tnum++;\n\t\tcontext->ptr++;\n\t\tdomain++;\n\t}\n\n\tif (_dns_left_len(context) < 1) {\n\t\treturn -1;\n\t}\n\n\t*ptr_num = num;\n\n\tif (total_len > 1) {\n\t\t/* if domain is '\\0', [domain] is '\\0' */\n\t\t*(context->ptr) = 0;\n\t\ttotal_len++;\n\t\tcontext->ptr++;\n\t}\n\n\tif (_dns_left_len(context) <= 0) {\n\t\treturn -1;\n\t}\n\n\treturn total_len;\n}",
  "diff_func": "--- func_before\n+++ func_after\n static int _dns_encode_domain(struct dns_context *context, const char *domain)\n {\n \tint num = 0;\n \tint total_len = 0;\n \tunsigned char *ptr_num = context->ptr++;\n \tint dict_offset = 0;\n \n \tdict_offset = _dns_get_domain_offset(context, domain);\n \ttotal_len++;\n \n \t/*[len]string[len]string...[0]0 */\n \twhile (_dns_left_len(context) > 1 && *domain != 0) {\n \t\ttotal_len++;\n \t\tif (dict_offset >= 0) {\n \t\t\tint offset = 0xc000 | dict_offset;\n+\t\t\tif (_dns_left_len(context) < 2) {\n+\t\t\t\treturn -1;\n+\t\t\t}\n+\n \t\t\t_dns_write_short(&ptr_num, offset);\n \t\t\tcontext->ptr++;\n \t\t\tptr_num = NULL;\n \t\t\treturn total_len;\n \t\t}\n \n \t\tif (*domain == '.') {\n \t\t\t*ptr_num = num;\n \t\t\tnum = 0;\n \t\t\tptr_num = context->ptr;\n \t\t\tdomain++;\n \t\t\tcontext->ptr++;\n \t\t\tdict_offset = _dns_get_domain_offset(context, domain);\n \t\t\tcontinue;\n \t\t}\n \t\t*context->ptr = *domain;\n \t\tnum++;\n \t\tcontext->ptr++;\n \t\tdomain++;\n \t}\n \n+\tif (_dns_left_len(context) < 1) {\n+\t\treturn -1;\n+\t}\n+\n \t*ptr_num = num;\n \n \tif (total_len > 1) {\n \t\t/* if domain is '\\0', [domain] is '\\0' */\n \t\t*(context->ptr) = 0;\n \t\ttotal_len++;\n \t\tcontext->ptr++;\n \t}\n \n \tif (_dns_left_len(context) <= 0) {\n \t\treturn -1;\n \t}\n \n \treturn total_len;\n }",
  "diff_source": "custom",
  "Bug Filter": "** Security Vulnerability Fix  \n**Confidence Score:** 0.95",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "\n\nThe patch addresses a buffer overflow issue in DNS encoding by adding boundary checks, preventing crashes and potential exploits.\n\n**Final Classification:** Security Vulnerability Fix  \n**Confidence Score:** 0.95"
}