{
  "id": 789,
  "language": "Java",
  "commit_url": "https://github.com/PixelExperience/frameworks_base/commit/e7c9cedab64313054a5f1d6e249a3d7118f0fe6d",
  "commit_sha": "e7c9cedab64313054a5f1d6e249a3d7118f0fe6d",
  "commit_msg": "Fix checkKeyIntentParceledCorrectly's bypass\n\nThe checkKeyIntentParceledCorrectly method was added in checkKeyIntent, which was originaly  only invoked when AccountManagerService deserializes the KEY_INTENT value as not NULL. However, due to the self-changing bundle technique in Parcel mismatch problems, the Intent value can change after reparceling; hence would bypass the added checkKeyIntentParceledCorrectly call.\n\nThis CL did the following:\n\n- Ensure the checkKeyIntent method is also called when result.getParcelable(AccountManager.KEY_INTENT, Intent.class) == null.\n- Migrate to the safer Bundle.getParcelable(String, Class<T>) API call\n  in AccountManagerService.\n\nBug: 260567867\nBug: 262230405\nTest: local test, see b/262230405\nTest: atest CtsAccountManagerTestCases\nMerged-In: I7b528f52c41767ae12731838fdd36aa26a8f3477\nChange-Id: I7b528f52c41767ae12731838fdd36aa26a8f3477",
  "pr_url": null,
  "pr_info": "no more info",
  "file_name": "services/core/java/com/android/server/accounts/AccountManagerService.java",
  "func_name": "checkKeyIntentParceledCorrectly",
  "func_before": "private boolean checkKeyIntentParceledCorrectly(Bundle bundle) {\n            Parcel p = Parcel.obtain();\n            p.writeBundle(bundle);\n            p.setDataPosition(0);\n            Bundle simulateBundle = p.readBundle();\n            p.recycle();\n            Intent intent = bundle.getParcelable(AccountManager.KEY_INTENT, Intent.class);\n            return (intent.filterEquals(simulateBundle.getParcelable(AccountManager.KEY_INTENT,\n                Intent.class)));\n        }",
  "func_after": "private boolean checkKeyIntentParceledCorrectly(Bundle bundle) {\n            Parcel p = Parcel.obtain();\n            p.writeBundle(bundle);\n            p.setDataPosition(0);\n            Bundle simulateBundle = p.readBundle();\n            p.recycle();\n            Intent intent = bundle.getParcelable(AccountManager.KEY_INTENT, Intent.class);\n            Intent simulateIntent = simulateBundle.getParcelable(AccountManager.KEY_INTENT,\n                    Intent.class);\n            if (intent == null) {\n                return (simulateIntent == null);\n            }\n            return intent.filterEquals(simulateIntent);\n        }",
  "diff_func": "--- func_before\n+++ func_after\n private boolean checkKeyIntentParceledCorrectly(Bundle bundle) {\n             Parcel p = Parcel.obtain();\n             p.writeBundle(bundle);\n             p.setDataPosition(0);\n             Bundle simulateBundle = p.readBundle();\n             p.recycle();\n             Intent intent = bundle.getParcelable(AccountManager.KEY_INTENT, Intent.class);\n-            return (intent.filterEquals(simulateBundle.getParcelable(AccountManager.KEY_INTENT,\n+            Intent simulateIntent = simulateBundle.getParcelable(AccountManager.KEY_INTENT,\n-                Intent.class)));\n+                    Intent.class);\n+            if (intent == null) {\n+                return (simulateIntent == null);\n+            }\n+            return intent.filterEquals(simulateIntent);\n         }",
  "diff_source": "custom",
  "Bug Filter": "Security Vulnerability Fix  \nConfidence Score: 0.95",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "\n\nThe patch addresses a security vulnerability by fixing a bypass in a method that checks the integrity of an Intent, preventing potential unauthorized access or data manipulation.\n\n**Final Output:**\nAnalysis: The patch fixes a bypass in a security check, preventing potential attacks by ensuring proper validation of Intents.  \nFinal Classification: Security Vulnerability Fix  \nConfidence Score: 0.95"
}