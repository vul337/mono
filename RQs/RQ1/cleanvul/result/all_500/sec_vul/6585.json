{
  "id": 6585,
  "language": "C/C++",
  "commit_url": "https://github.com/torvalds/linux/commit/56897b217a1d0a91c9920cb418d6b3fe922f590a",
  "commit_sha": "56897b217a1d0a91c9920cb418d6b3fe922f590a",
  "commit_msg": "Bluetooth: hci_ldisc: Postpone HCI_UART_PROTO_READY bit set in hci_uart_set_proto()\n\ntask A:                                task B:\nhci_uart_set_proto                     flush_to_ldisc\n - p->open(hu) -> h5_open  //alloc h5  - receive_buf\n - set_bit HCI_UART_PROTO_READY         - tty_port_default_receive_buf\n - hci_uart_register_dev                 - tty_ldisc_receive_buf\n                                          - hci_uart_tty_receive\n\t\t\t\t           - test_bit HCI_UART_PROTO_READY\n\t\t\t\t            - h5_recv\n - clear_bit HCI_UART_PROTO_READY             while() {\n - p->open(hu) -> h5_close //free h5\n\t\t\t\t              - h5_rx_3wire_hdr\n\t\t\t\t               - h5_reset()  //use-after-free\n                                              }\n\nIt could use ioctl to set hci uart proto, but there is\na use-after-free issue when hci_uart_register_dev() fail in\nhci_uart_set_proto(), see stack above, fix this by setting\nHCI_UART_PROTO_READY bit only when hci_uart_register_dev()\nreturn success.\n\nReported-by: syzbot+899a33dc0fa0dbaf06a6@syzkaller.appspotmail.com\nSigned-off-by: Kefeng Wang <wangkefeng.wang@huawei.com>\nReviewed-by: Jeremy Cline <jcline@redhat.com>\nSigned-off-by: Marcel Holtmann <marcel@holtmann.org>",
  "pr_url": null,
  "pr_info": "no more info",
  "file_name": "drivers/bluetooth/hci_ldisc.c",
  "func_name": "hci_uart_set_proto",
  "func_before": "static int hci_uart_set_proto(struct hci_uart *hu, int id)\n{\n\tconst struct hci_uart_proto *p;\n\tint err;\n\n\tp = hci_uart_get_proto(id);\n\tif (!p)\n\t\treturn -EPROTONOSUPPORT;\n\n\thu->proto = p;\n\tset_bit(HCI_UART_PROTO_READY, &hu->flags);\n\n\terr = hci_uart_register_dev(hu);\n\tif (err) {\n\t\tclear_bit(HCI_UART_PROTO_READY, &hu->flags);\n\t\treturn err;\n\t}\n\n\treturn 0;\n}",
  "func_after": "static int hci_uart_set_proto(struct hci_uart *hu, int id)\n{\n\tconst struct hci_uart_proto *p;\n\tint err;\n\n\tp = hci_uart_get_proto(id);\n\tif (!p)\n\t\treturn -EPROTONOSUPPORT;\n\n\thu->proto = p;\n\n\terr = hci_uart_register_dev(hu);\n\tif (err) {\n\t\treturn err;\n\t}\n\n\tset_bit(HCI_UART_PROTO_READY, &hu->flags);\n\treturn 0;\n}",
  "diff_func": "--- func_before\n+++ func_after\n static int hci_uart_set_proto(struct hci_uart *hu, int id)\n {\n \tconst struct hci_uart_proto *p;\n \tint err;\n \n \tp = hci_uart_get_proto(id);\n \tif (!p)\n \t\treturn -EPROTONOSUPPORT;\n \n \thu->proto = p;\n-\tset_bit(HCI_UART_PROTO_READY, &hu->flags);\n \n \terr = hci_uart_register_dev(hu);\n \tif (err) {\n-\t\tclear_bit(HCI_UART_PROTO_READY, &hu->flags);\n \t\treturn err;\n \t}\n \n+\tset_bit(HCI_UART_PROTO_READY, &hu->flags);\n \treturn 0;\n }",
  "diff_source": "custom",
  "Bug Filter": "** Security Vulnerability Fix  \n**Confidence Score:** 0.95",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "\n\nThe patch addresses a security vulnerability by fixing a use-after-free condition in the Bluetooth HCI UART protocol handling. The premature setting of the HCI_UART_PROTO_READY flag led to potential system crashes or exploitation.\n\n**Final Classification:** Security Vulnerability Fix  \n**Confidence Score:** 0.95"
}