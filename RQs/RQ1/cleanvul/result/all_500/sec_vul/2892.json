{
  "id": 2892,
  "language": "Java",
  "commit_url": "https://github.com/AOSPA/android_frameworks_base/commit/f344cfad2bd03da73ce7cfe0b0b19b3a37b45344",
  "commit_sha": "f344cfad2bd03da73ce7cfe0b0b19b3a37b45344",
  "commit_msg": "Use IntentFilter CREATOR directly for serializing ParsedIntentInfo\n\nParsedIntentInfo's CRFEATOR was removed because it exposes a\nreparcelling vulnerability. This adjusts a system API that relied on\nthe implicit parcelling read to instead use IntentFilter directly,\nignoring the fields contained in the subclass.\n\nBug: 192050390\n\nTest: manual, cannot repro crash after patch\n\nChange-Id: Ib12e0a959eb5a5d73d5832ff2eee26a30eed5ded",
  "pr_url": null,
  "pr_info": "no more info",
  "file_name": "services/core/java/com/android/server/pm/PackageManagerService.java",
  "func_name": "getAllIntentFilters",
  "func_before": "@Override\n    public @NonNull ParceledListSlice<IntentFilter> getAllIntentFilters(String packageName) {\n        if (TextUtils.isEmpty(packageName)) {\n            return ParceledListSlice.emptyList();\n        }\n        final int callingUid = Binder.getCallingUid();\n        final int callingUserId = UserHandle.getUserId(callingUid);\n        synchronized (mLock) {\n            AndroidPackage pkg = mPackages.get(packageName);\n            if (pkg == null || ArrayUtils.isEmpty(pkg.getActivities())) {\n                return ParceledListSlice.emptyList();\n            }\n            final PackageSetting ps = getPackageSetting(pkg.getPackageName());\n            if (ps == null) {\n                return ParceledListSlice.emptyList();\n            }\n            if (shouldFilterApplicationLocked(ps, callingUid, callingUserId)) {\n                return ParceledListSlice.emptyList();\n            }\n            final int count = ArrayUtils.size(pkg.getActivities());\n            ArrayList<IntentFilter> result = new ArrayList<>();\n            for (int n=0; n<count; n++) {\n                ParsedActivity activity = pkg.getActivities().get(n);\n                if (activity.getIntents() != null && activity.getIntents().size() > 0) {\n                    result.addAll(activity.getIntents());\n                }\n            }\n            return new ParceledListSlice<IntentFilter>(result) {\n                @Override\n                protected void writeElement(IntentFilter parcelable, Parcel dest, int callFlags) {\n                    // WatchedIntentFilter has final Parcelable methods, so redirect to the subclass\n                    ((ParsedIntentInfo) parcelable).writeIntentInfoToParcel(dest,\n                            callFlags);\n                }\n            };\n        }\n    }",
  "func_after": "@Override\n    public @NonNull ParceledListSlice<IntentFilter> getAllIntentFilters(String packageName) {\n        if (TextUtils.isEmpty(packageName)) {\n            return ParceledListSlice.emptyList();\n        }\n        final int callingUid = Binder.getCallingUid();\n        final int callingUserId = UserHandle.getUserId(callingUid);\n        synchronized (mLock) {\n            AndroidPackage pkg = mPackages.get(packageName);\n            if (pkg == null || ArrayUtils.isEmpty(pkg.getActivities())) {\n                return ParceledListSlice.emptyList();\n            }\n            final PackageSetting ps = getPackageSetting(pkg.getPackageName());\n            if (ps == null) {\n                return ParceledListSlice.emptyList();\n            }\n            if (shouldFilterApplicationLocked(ps, callingUid, callingUserId)) {\n                return ParceledListSlice.emptyList();\n            }\n            final int count = ArrayUtils.size(pkg.getActivities());\n            ArrayList<IntentFilter> result = new ArrayList<>();\n            for (int n=0; n<count; n++) {\n                ParsedActivity activity = pkg.getActivities().get(n);\n                if (activity.getIntents() != null && activity.getIntents().size() > 0) {\n                    result.addAll(activity.getIntents());\n                }\n            }\n            return new ParceledListSlice<IntentFilter>(result) {\n                @Override\n                protected void writeElement(IntentFilter parcelable, Parcel dest, int callFlags) {\n                    parcelable.writeToParcel(dest, callFlags);\n                }\n\n                @Override\n                protected void writeParcelableCreator(IntentFilter parcelable, Parcel dest) {\n                    // All Parcel#writeParcelableCreator does is serialize the class name to\n                    // access via reflection to grab its CREATOR. This does that manually, pointing\n                    // to the parent IntentFilter so that all of the subclass fields are ignored.\n                    dest.writeString(IntentFilter.class.getName());\n                }\n            };\n        }\n    }",
  "diff_func": "--- func_before\n+++ func_after\n @Override\n     public @NonNull ParceledListSlice<IntentFilter> getAllIntentFilters(String packageName) {\n         if (TextUtils.isEmpty(packageName)) {\n             return ParceledListSlice.emptyList();\n         }\n         final int callingUid = Binder.getCallingUid();\n         final int callingUserId = UserHandle.getUserId(callingUid);\n         synchronized (mLock) {\n             AndroidPackage pkg = mPackages.get(packageName);\n             if (pkg == null || ArrayUtils.isEmpty(pkg.getActivities())) {\n                 return ParceledListSlice.emptyList();\n             }\n             final PackageSetting ps = getPackageSetting(pkg.getPackageName());\n             if (ps == null) {\n                 return ParceledListSlice.emptyList();\n             }\n             if (shouldFilterApplicationLocked(ps, callingUid, callingUserId)) {\n                 return ParceledListSlice.emptyList();\n             }\n             final int count = ArrayUtils.size(pkg.getActivities());\n             ArrayList<IntentFilter> result = new ArrayList<>();\n             for (int n=0; n<count; n++) {\n                 ParsedActivity activity = pkg.getActivities().get(n);\n                 if (activity.getIntents() != null && activity.getIntents().size() > 0) {\n                     result.addAll(activity.getIntents());\n                 }\n             }\n             return new ParceledListSlice<IntentFilter>(result) {\n                 @Override\n                 protected void writeElement(IntentFilter parcelable, Parcel dest, int callFlags) {\n-                    // WatchedIntentFilter has final Parcelable methods, so redirect to the subclass\n-                    ((ParsedIntentInfo) parcelable).writeIntentInfoToParcel(dest,\n-                            callFlags);\n+                    parcelable.writeToParcel(dest, callFlags);\n+                }\n+\n+                @Override\n+                protected void writeParcelableCreator(IntentFilter parcelable, Parcel dest) {\n+",
  "diff_source": "custom",
  "Bug Filter": "Security Vulnerability Fix\n\nConfidence Score: 0.95",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "\n\n**Final Output:**\n\nAnalysis:\n- The patch addresses a repackaging vulnerability in the serialization process of ParsedIntentInfo by switching to using IntentFilter directly.\n- The code changes modify the writeElement method to use writeToParcel and introduce a new writeParcelableCreator method, avoiding the insecure subclass CREATOR.\n\nFinal Classification: Security Vulnerability Fix\n\nConfidence Score: 0.95"
}