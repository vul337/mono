{
  "id": 2719,
  "language": "Java",
  "commit_url": "https://github.com/aws/amazon-redshift-jdbc-driver/commit/6d377c6bfb7617c9c1e82f37b175de9b484fc4e2",
  "commit_sha": "6d377c6bfb7617c9c1e82f37b175de9b484fc4e2",
  "commit_msg": "Fix security vulnerability",
  "pr_url": null,
  "pr_info": "no more info",
  "file_name": "src/main/java/com/amazon/redshift/jdbc/RedshiftSQLXML.java",
  "func_name": "SQLException",
  "func_before": "@Override\n  public synchronized <T extends Source> T getSource(Class<T> sourceClass) throws SQLException {\n    checkFreed();\n    ensureInitialized();\n\n    if (data == null) {\n      return null;\n    }\n\n    try {\n      if (sourceClass == null || DOMSource.class.equals(sourceClass)) {\n        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n        DocumentBuilder builder = factory.newDocumentBuilder();\n        builder.setErrorHandler(new NonPrintingErrorHandler());\n        InputSource input = new InputSource(new StringReader(data));\n        return (T) new DOMSource(builder.parse(input));\n      } else if (SAXSource.class.equals(sourceClass)) {\n        InputSource is = new InputSource(new StringReader(data));\n        return (T) new SAXSource(is);\n      } else if (StreamSource.class.equals(sourceClass)) {\n        return (T) new StreamSource(new StringReader(data));\n      } else if (StAXSource.class.equals(sourceClass)) {\n        XMLInputFactory xif = XMLInputFactory.newInstance();\n        XMLStreamReader xsr = xif.createXMLStreamReader(new StringReader(data));\n        return (T) new StAXSource(xsr);\n      }\n    } catch (Exception e) {\n      throw new RedshiftException(GT.tr(\"Unable to decode xml data.\"), RedshiftState.DATA_ERROR, e);\n    }\n\n    throw new RedshiftException(GT.tr(\"Unknown XML Source class: {0}\", sourceClass),\n        RedshiftState.INVALID_PARAMETER_TYPE);\n  }",
  "func_after": "@Override\n  public synchronized <T extends Source> T getSource(Class<T> sourceClass) throws SQLException {\n    checkFreed();\n    ensureInitialized();\n\n    if (data == null) {\n      return null;\n    }\n\n    try {\n      if (sourceClass == null || DOMSource.class.equals(sourceClass)) {\n        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n        \n        // https://www.aristotle.a2z.com/implementations/255\n        factory.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n        factory.setXIncludeAware(false);\n        factory.setExpandEntityReferences(false);        \n        factory.setFeature(\"http://xml.org/sax/features/external-parameter-entities\", false);\n        factory.setFeature(\"http://xml.org/sax/features/external-general-entities\", false);\n        \n        DocumentBuilder builder = factory.newDocumentBuilder();\n        builder.setErrorHandler(new NonPrintingErrorHandler());\n        InputSource input = new InputSource(new StringReader(data));\n        return (T) new DOMSource(builder.parse(input));\n      } else if (SAXSource.class.equals(sourceClass)) {\n        InputSource is = new InputSource(new StringReader(data));\n        return (T) new SAXSource(is);\n      } else if (StreamSource.class.equals(sourceClass)) {\n        return (T) new StreamSource(new StringReader(data));\n      } else if (StAXSource.class.equals(sourceClass)) {\n        XMLInputFactory xif = XMLInputFactory.newInstance();\n        XMLStreamReader xsr = xif.createXMLStreamReader(new StringReader(data));\n        return (T) new StAXSource(xsr);\n      }\n    } catch (Exception e) {\n      throw new RedshiftException(GT.tr(\"Unable to decode xml data.\"), RedshiftState.DATA_ERROR, e);\n    }\n\n    throw new RedshiftException(GT.tr(\"Unknown XML Source class: {0}\", sourceClass),\n        RedshiftState.INVALID_PARAMETER_TYPE);\n  }",
  "diff_func": "--- func_before\n+++ func_after\n @Override\n   public synchronized <T extends Source> T getSource(Class<T> sourceClass) throws SQLException {\n     checkFreed();\n     ensureInitialized();\n \n     if (data == null) {\n       return null;\n     }\n \n     try {\n       if (sourceClass == null || DOMSource.class.equals(sourceClass)) {\n         DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n+        \n+        // https://www.aristotle.a2z.com/implementations/255\n+        factory.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n+        factory.setXIncludeAware(false);\n+        factory.setExpandEntityReferences(false);        \n+        factory.setFeature(\"http://xml.org/sax/features/external-parameter-entities\", false);\n+        factory.setFeature(\"http://xml.org/sax/features/external-general-entities\", false);\n+        \n         DocumentBuilder builder = factory.newDocumentBuilder();\n         builder.setErrorHandler(new NonPrintingErrorHandler());\n         InputSource input = new InputSource(new StringReader(data));\n         return (T) new DOMSource(builder.parse(input));\n       } else if (SAXSource.class.equals(sourceClass)) {\n         InputSource is = new InputSource(new StringReader(data));\n         return (T) new SAXSource(is);\n       } else if (StreamSource.class.equals(sourceClass)) {\n         return (T) new StreamSource(new StringReader(data));\n       } else if (StAXSource.class.equals(sourceClass)) {\n         XMLInputFactory xif = XMLInputFactory.newInstance();\n         XMLStreamReader xsr = xif.createXMLStreamReader(new StringReader(data));\n         return (T) new StAXSource(xsr);\n       }\n     } catch (Exception e) {\n       throw new RedshiftException(GT.tr(\"Unable to decode xml data.\"), RedshiftState.DATA_ERROR, e);\n     }\n \n     throw new RedshiftException(GT.tr(\"Unknown XML Source class: {0}\", sourceClass),\n         RedshiftState.INVALID_PARAMETER_TYPE);\n   }",
  "diff_source": "custom",
  "Bug Filter": "Security Vulnerability Fix  \nConfidence Score: 1.0",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "\n\n**Final Output:**\n\nAnalysis: The code changes disable features related to external entities and XInclude in XML parsing, mitigating XXE vulnerabilities. The commit message confirms it's a security fix. Changes prevent unauthorized data access via crafted XML inputs.\n\nFinal Classification: Security Vulnerability Fix  \nConfidence Score: 1.0"
}