{
  "id": 6307,
  "language": "C/C++",
  "commit_url": "https://github.com/torvalds/linux/commit/c09581a52765a85f19fc35340127396d5e3379cc",
  "commit_sha": "c09581a52765a85f19fc35340127396d5e3379cc",
  "commit_msg": "scsi: qedi: remove memset/memcpy to nfunc and use func instead\n\nKASAN reports this:\n\nBUG: KASAN: global-out-of-bounds in qedi_dbg_err+0xda/0x330 [qedi]\nRead of size 31 at addr ffffffffc12b0ae0 by task syz-executor.0/2429\n\nCPU: 0 PID: 2429 Comm: syz-executor.0 Not tainted 5.0.0-rc7+ #45\nHardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.10.2-1ubuntu1 04/01/2014\nCall Trace:\n __dump_stack lib/dump_stack.c:77 [inline]\n dump_stack+0xfa/0x1ce lib/dump_stack.c:113\n print_address_description+0x1c4/0x270 mm/kasan/report.c:187\n kasan_report+0x149/0x18d mm/kasan/report.c:317\n memcpy+0x1f/0x50 mm/kasan/common.c:130\n qedi_dbg_err+0xda/0x330 [qedi]\n ? 0xffffffffc12d0000\n qedi_init+0x118/0x1000 [qedi]\n ? 0xffffffffc12d0000\n ? 0xffffffffc12d0000\n ? 0xffffffffc12d0000\n do_one_initcall+0xfa/0x5ca init/main.c:887\n do_init_module+0x204/0x5f6 kernel/module.c:3460\n load_module+0x66b2/0x8570 kernel/module.c:3808\n __do_sys_finit_module+0x238/0x2a0 kernel/module.c:3902\n do_syscall_64+0x147/0x600 arch/x86/entry/common.c:290\n entry_SYSCALL_64_after_hwframe+0x49/0xbe\nRIP: 0033:0x462e99\nCode: f7 d8 64 89 02 b8 ff ff ff ff c3 66 0f 1f 44 00 00 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 c7 c1 bc ff ff ff f7 d8 64 89 01 48\nRSP: 002b:00007f2d57e55c58 EFLAGS: 00000246 ORIG_RAX: 0000000000000139\nRAX: ffffffffffffffda RBX: 000000000073bfa0 RCX: 0000000000462e99\nRDX: 0000000000000000 RSI: 00000000200003c0 RDI: 0000000000000003\nRBP: 00007f2d57e55c70 R08: 0000000000000000 R09: 0000000000000000\nR10: 0000000000000000 R11: 0000000000000246 R12: 00007f2d57e566bc\nR13: 00000000004bcefb R14: 00000000006f7030 R15: 0000000000000004\n\nThe buggy address belongs to the variable:\n __func__.67584+0x0/0xffffffffffffd520 [qedi]\n\nMemory state around the buggy address:\n ffffffffc12b0980: fa fa fa fa 00 04 fa fa fa fa fa fa 00 00 05 fa\n ffffffffc12b0a00: fa fa fa fa 00 00 04 fa fa fa fa fa 00 05 fa fa\n> ffffffffc12b0a80: fa fa fa fa 00 06 fa fa fa fa fa fa 00 02 fa fa\n                                                          ^\n ffffffffc12b0b00: fa fa fa fa 00 00 04 fa fa fa fa fa 00 00 03 fa\n ffffffffc12b0b80: fa fa fa fa 00 00 02 fa fa fa fa fa 00 00 04 fa\n\nCurrently the qedi_dbg_* family of functions can overrun the end of the\nsource string if it is less than the destination buffer length because of\nthe use of a fixed sized memcpy. Remove the memset/memcpy calls to nfunc\nand just use func instead as it is always a null terminated string.\n\nReported-by: Hulk Robot <hulkci@huawei.com>\nFixes: ace7f46ba5fd (\"scsi: qedi: Add QLogic FastLinQ offload iSCSI driver framework.\")\nSigned-off-by: YueHaibing <yuehaibing@huawei.com>\nReviewed-by: Dan Carpenter <dan.carpenter@oracle.com>\nSigned-off-by: Martin K. Petersen <martin.petersen@oracle.com>",
  "pr_url": null,
  "pr_info": "no more info",
  "file_name": "drivers/scsi/qedi/qedi_dbg.c",
  "func_name": "qedi_dbg_err",
  "func_before": "void\nqedi_dbg_err(struct qedi_dbg_ctx *qedi, const char *func, u32 line,\n\t     const char *fmt, ...)\n{\n\tva_list va;\n\tstruct va_format vaf;\n\tchar nfunc[32];\n\n\tmemset(nfunc, 0, sizeof(nfunc));\n\tmemcpy(nfunc, func, sizeof(nfunc) - 1);\n\n\tva_start(va, fmt);\n\n\tvaf.fmt = fmt;\n\tvaf.va = &va;\n\n\tif (likely(qedi) && likely(qedi->pdev))\n\t\tpr_err(\"[%s]:[%s:%d]:%d: %pV\", dev_name(&qedi->pdev->dev),\n\t\t       nfunc, line, qedi->host_no, &vaf);\n\telse\n\t\tpr_err(\"[0000:00:00.0]:[%s:%d]: %pV\", nfunc, line, &vaf);\n\n\tva_end(va);\n}",
  "func_after": "void\nqedi_dbg_err(struct qedi_dbg_ctx *qedi, const char *func, u32 line,\n\t     const char *fmt, ...)\n{\n\tva_list va;\n\tstruct va_format vaf;\n\n\tva_start(va, fmt);\n\n\tvaf.fmt = fmt;\n\tvaf.va = &va;\n\n\tif (likely(qedi) && likely(qedi->pdev))\n\t\tpr_err(\"[%s]:[%s:%d]:%d: %pV\", dev_name(&qedi->pdev->dev),\n\t\t       func, line, qedi->host_no, &vaf);\n\telse\n\t\tpr_err(\"[0000:00:00.0]:[%s:%d]: %pV\", func, line, &vaf);\n\n\tva_end(va);\n}",
  "diff_func": "--- func_before\n+++ func_after\n void\n qedi_dbg_err(struct qedi_dbg_ctx *qedi, const char *func, u32 line,\n \t     const char *fmt, ...)\n {\n \tva_list va;\n \tstruct va_format vaf;\n-\tchar nfunc[32];\n-\n-\tmemset(nfunc, 0, sizeof(nfunc));\n-\tmemcpy(nfunc, func, sizeof(nfunc) - 1);\n \n \tva_start(va, fmt);\n \n \tvaf.fmt = fmt;\n \tvaf.va = &va;\n \n \tif (likely(qedi) && likely(qedi->pdev))\n \t\tpr_err(\"[%s]:[%s:%d]:%d: %pV\", dev_name(&qedi->pdev->dev),\n-\t\t       nfunc, line, qedi->host_no, &vaf);\n+\t\t       func, line, qedi->host_no, &vaf);\n \telse\n-\t\tpr_err(\"[0000:00:00.0]:[%s:%d]: %pV\", nfunc, line, &vaf);\n+\t\tpr_err(\"[0000:00:00.0]:[%s:%d]: %pV\", func, line, &vaf);\n \n \tva_end(va);\n }",
  "diff_source": "custom",
  "Bug Filter": "Security Vulnerability Fix  \nConfidence Score: 0.95",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "\n\n**Final Output:**\nAnalysis: The patch addresses a buffer overflow issue in the qedi_dbg_err function, which was causing a global-out-of-bounds error as reported by KASAN. The fix removes the use of a fixed-size buffer and memcpy, preventing potential unauthorized access or data disclosure.\n\nFinal Classification: Security Vulnerability Fix  \nConfidence Score: 0.95"
}