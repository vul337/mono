{
  "id": 5241,
  "language": "C/C++",
  "commit_url": "https://github.com/file/file/commit/6d209c1c489457397a5763bca4b28e43aac90391",
  "commit_sha": "6d209c1c489457397a5763bca4b28e43aac90391",
  "commit_msg": "Apply patches from file-CVE-2012-1571.patch\nFrom Francisco Alonso Espejo:\n    file < 5.18/git version can be made to crash when checking some\n    corrupt CDF files (Using an invalid cdf_read_short_sector size)\n    The problem I found here, is that in most situations (if\n    h_short_sec_size_p2 > 8) because the blocksize is 512 and normal\n    values are 06 which means reading 64 bytes.As long as the check\n    for the block size copy is not checked properly (there's an assert\n    that makes wrong/invalid assumptions)",
  "pr_url": null,
  "pr_info": "no more info",
  "file_name": "src/readcdf.c",
  "func_name": "file_trycdf",
  "func_before": "protected int\nfile_trycdf(struct magic_set *ms, int fd, const unsigned char *buf,\n    size_t nbytes)\n{\n        cdf_info_t info;\n        cdf_header_t h;\n        cdf_sat_t sat, ssat;\n        cdf_stream_t sst, scn;\n        cdf_dir_t dir;\n        int i;\n        const char *expn = \"\";\n        const char *corrupt = \"corrupt: \";\n\n        info.i_fd = fd;\n        info.i_buf = buf;\n        info.i_len = nbytes;\n        if (ms->flags & MAGIC_APPLE)\n                return 0;\n        if (cdf_read_header(&info, &h) == -1)\n                return 0;\n#ifdef CDF_DEBUG\n        cdf_dump_header(&h);\n#endif\n\n        if ((i = cdf_read_sat(&info, &h, &sat)) == -1) {\n                expn = \"Can't read SAT\";\n                goto out0;\n        }\n#ifdef CDF_DEBUG\n        cdf_dump_sat(\"SAT\", &sat, CDF_SEC_SIZE(&h));\n#endif\n\n        if ((i = cdf_read_ssat(&info, &h, &sat, &ssat)) == -1) {\n                expn = \"Can't read SSAT\";\n                goto out1;\n        }\n#ifdef CDF_DEBUG\n        cdf_dump_sat(\"SSAT\", &ssat, CDF_SHORT_SEC_SIZE(&h));\n#endif\n\n        if ((i = cdf_read_dir(&info, &h, &sat, &dir)) == -1) {\n                expn = \"Can't read directory\";\n                goto out2;\n        }\n\n        const cdf_directory_t *root_storage;\n        if ((i = cdf_read_short_stream(&info, &h, &sat, &dir, &sst,\n\t    &root_storage)) == -1) {\n                expn = \"Cannot read short stream\";\n                goto out3;\n        }\n#ifdef CDF_DEBUG\n        cdf_dump_dir(&info, &h, &sat, &ssat, &sst, &dir);\n#endif\n#ifdef notdef\n\tif (root_storage) {\n\t\tif (NOTMIME(ms)) {\n\t\t\tchar clsbuf[128];\n\t\t\tif (file_printf(ms, \"CLSID %s, \",\n\t\t\t    format_clsid(clsbuf, sizeof(clsbuf),\n\t\t\t    root_storage->d_storage_uuid)) == -1)\n\t\t\t\treturn -1;\n\t\t}\n\t}\n#endif\n\n        if ((i = cdf_read_summary_info(&info, &h, &sat, &ssat, &sst, &dir,\n            &scn)) == -1) {\n                if (errno == ESRCH) {\n                        corrupt = expn;\n                        expn = \"No summary info\";\n                } else {\n                        expn = \"Cannot read summary info\";\n                }\n                goto out4;\n        }\n#ifdef CDF_DEBUG\n        cdf_dump_summary_info(&h, &scn);\n#endif\n        if ((i = cdf_file_summary_info(ms, &h, &scn,\n\t    root_storage->d_storage_uuid)) < 0)\n                expn = \"Can't expand summary_info\";\n\n\tif (i == 0) {\n\t\tconst char *str = NULL;\n\t\tcdf_directory_t *d;\n\t\tchar name[__arraycount(d->d_name)];\n\t\tsize_t j, k;\n\n\t\tfor (j = 0; str == NULL && j < dir.dir_len; j++) {\n\t\t\td = &dir.dir_tab[j];\n\t\t\tfor (k = 0; k < sizeof(name); k++)\n\t\t\t\tname[k] = (char)cdf_tole2(d->d_name[k]);\n\t\t\tstr = cdf_app_to_mime(name,\n\t\t\t    NOTMIME(ms) ? name2desc : name2mime);\n\t\t}\n\t\tif (NOTMIME(ms)) {\n\t\t\tif (str != NULL) {\n\t\t\t\tif (file_printf(ms, \"%s\", str) == -1)\n\t\t\t\t\treturn -1;\n\t\t\t\ti = 1;\n\t\t\t}\n\t\t} else {\n\t\t\tif (str == NULL)\n\t\t\t\tstr = \"vnd.ms-office\";\n\t\t\tif (file_printf(ms, \"application/%s\", str) == -1)\n\t\t\t\treturn -1;\n\t\t\ti = 1;\n\t\t}\n\t}\n        free(scn.sst_tab);\nout4:\n        free(sst.sst_tab);\nout3:\n        free(dir.dir_tab);\nout2:\n        free(ssat.sat_tab);\nout1:\n        free(sat.sat_tab);\nout0:\n\tif (i == -1) {\n\t    if (NOTMIME(ms)) {\n\t\tif (file_printf(ms,\n\t\t    \"Composite Document File V2 Document\") == -1)\n\t\t    return -1;\n\t\tif (*expn)\n\t\t    if (file_printf(ms, \", %s%s\", corrupt, expn) == -1)\n\t\t\treturn -1;\n\t    } else {\n\t\tif (file_printf(ms, \"application/CDFV2-corrupt\") == -1)\n\t\t    return -1;\n\t    }\n\t    i = 1;\n\t}\n        return i;\n}",
  "func_after": "protected int\nfile_trycdf(struct magic_set *ms, int fd, const unsigned char *buf,\n    size_t nbytes)\n{\n        cdf_info_t info;\n        cdf_header_t h;\n        cdf_sat_t sat, ssat;\n        cdf_stream_t sst, scn;\n        cdf_dir_t dir;\n        int i;\n        const char *expn = \"\";\n        const char *corrupt = \"corrupt: \";\n\n        info.i_fd = fd;\n        info.i_buf = buf;\n        info.i_len = nbytes;\n        if (ms->flags & MAGIC_APPLE)\n                return 0;\n        if (cdf_read_header(&info, &h) == -1)\n                return 0;\n#ifdef CDF_DEBUG\n        cdf_dump_header(&h);\n#endif\n\n        if ((i = cdf_read_sat(&info, &h, &sat)) == -1) {\n                expn = \"Can't read SAT\";\n                goto out0;\n        }\n#ifdef CDF_DEBUG\n        cdf_dump_sat(\"SAT\", &sat, CDF_SEC_SIZE(&h));\n#endif\n\n        if ((i = cdf_read_ssat(&info, &h, &sat, &ssat)) == -1) {\n                expn = \"Can't read SSAT\";\n                goto out1;\n        }\n#ifdef CDF_DEBUG\n        cdf_dump_sat(\"SSAT\", &ssat, CDF_SHORT_SEC_SIZE(&h));\n#endif\n\n        if ((i = cdf_read_dir(&info, &h, &sat, &dir)) == -1) {\n                expn = \"Can't read directory\";\n                goto out2;\n        }\n\n        const cdf_directory_t *root_storage;\n        if ((i = cdf_read_short_stream(&info, &h, &sat, &dir, &sst,\n\t    &root_storage)) == -1) {\n                expn = \"Cannot read short stream\";\n                goto out3;\n        }\n#ifdef CDF_DEBUG\n        cdf_dump_dir(&info, &h, &sat, &ssat, &sst, &dir);\n#endif\n#ifdef notdef\n\tif (root_storage) {\n\t\tif (NOTMIME(ms)) {\n\t\t\tchar clsbuf[128];\n\t\t\tif (file_printf(ms, \"CLSID %s, \",\n\t\t\t    format_clsid(clsbuf, sizeof(clsbuf),\n\t\t\t    root_storage->d_storage_uuid)) == -1)\n\t\t\t\treturn -1;\n\t\t}\n\t}\n#endif\n\n        if ((i = cdf_read_summary_info(&info, &h, &sat, &ssat, &sst, &dir,\n            &scn)) == -1) {\n                if (errno == ESRCH) {\n                        corrupt = expn;\n                        expn = \"No summary info\";\n                } else {\n                        expn = \"Cannot read summary info\";\n                }\n                goto out4;\n        }\n#ifdef CDF_DEBUG\n        cdf_dump_summary_info(&h, &scn);\n#endif\n        if ((i = cdf_file_summary_info(ms, &h, &scn, root_storage)) < 0)\n            expn = \"Can't expand summary_info\";\n\n\tif (i == 0) {\n\t\tconst char *str = NULL;\n\t\tcdf_directory_t *d;\n\t\tchar name[__arraycount(d->d_name)];\n\t\tsize_t j, k;\n\n\t\tfor (j = 0; str == NULL && j < dir.dir_len; j++) {\n\t\t\td = &dir.dir_tab[j];\n\t\t\tfor (k = 0; k < sizeof(name); k++)\n\t\t\t\tname[k] = (char)cdf_tole2(d->d_name[k]);\n\t\t\tstr = cdf_app_to_mime(name,\n\t\t\t    NOTMIME(ms) ? name2desc : name2mime);\n\t\t}\n\t\tif (NOTMIME(ms)) {\n\t\t\tif (str != NULL) {\n\t\t\t\tif (file_printf(ms, \"%s\", str) == -1)\n\t\t\t\t\treturn -1;\n\t\t\t\ti = 1;\n\t\t\t}\n\t\t} else {\n\t\t\tif (str == NULL)\n\t\t\t\tstr = \"vnd.ms-office\";\n\t\t\tif (file_printf(ms, \"application/%s\", str) == -1)\n\t\t\t\treturn -1;\n\t\t\ti = 1;\n\t\t}\n\t}\n        free(scn.sst_tab);\nout4:\n        free(sst.sst_tab);\nout3:\n        free(dir.dir_tab);\nout2:\n        free(ssat.sat_tab);\nout1:\n        free(sat.sat_tab);\nout0:\n\tif (i == -1) {\n\t    if (NOTMIME(ms)) {\n\t\tif (file_printf(ms,\n\t\t    \"Composite Document File V2 Document\") == -1)\n\t\t    return -1;\n\t\tif (*expn)\n\t\t    if (file_printf(ms, \", %s%s\", corrupt, expn) == -1)\n\t\t\treturn -1;\n\t    } else {\n\t\tif (file_printf(ms, \"application/CDFV2-corrupt\") == -1)\n\t\t    return -1;\n\t    }\n\t    i = 1;\n\t}\n        return i;\n}",
  "diff_func": "--- func_before\n+++ func_after\n protected int\n file_trycdf(struct magic_set *ms, int fd, const unsigned char *buf,\n     size_t nbytes)\n {\n         cdf_info_t info;\n         cdf_header_t h;\n         cdf_sat_t sat, ssat;\n         cdf_stream_t sst, scn;\n         cdf_dir_t dir;\n         int i;\n         const char *expn = \"\";\n         const char *corrupt = \"corrupt: \";\n \n         info.i_fd = fd;\n         info.i_buf = buf;\n         info.i_len = nbytes;\n         if (ms->flags & MAGIC_APPLE)\n                 return 0;\n         if (cdf_read_header(&info, &h) == -1)\n                 return 0;\n #ifdef CDF_DEBUG\n         cdf_dump_header(&h);\n #endif\n \n         if ((i = cdf_read_sat(&info, &h, &sat)) == -1) {\n                 expn = \"Can't read SAT\";\n                 goto out0;\n         }\n #ifdef CDF_DEBUG\n         cdf_dump_sat(\"SAT\", &sat, CDF_SEC_SIZE(&h));\n #endif\n \n         if ((i = cdf_read_ssat(&info, &h, &sat, &ssat)) == -1) {\n                 expn = \"Can't read SSAT\";\n                 goto out1;\n         }\n #ifdef CDF_DEBUG\n         cdf_dump_sat(\"SSAT\", &ssat, CDF_SHORT_SEC_SIZE(&h));\n #endif\n \n         if ((i = cdf_read_dir(&info, &h, &sat, &dir)) == -1) {\n                 expn = \"Can't read directory\";\n                 goto out2;\n         }\n \n         const cdf_directory_t *root_storage;\n         if ((i = cdf_read_short_stream(&info, &h, &sat, &dir, &sst,\n \t    &root_storage)) == -1) {\n                 expn = \"Cannot read short stream\";\n                 goto out3;\n         }\n #ifdef CDF_DEBUG\n         cdf_dump_dir(&info, &h, &sat, &ssat, &sst, &dir);\n #endif\n #ifdef notdef\n \tif (root_storage) {\n \t\tif (NOTMIME(ms)) {\n \t\t\tchar clsbuf[128];\n \t\t\tif (file_printf(ms, \"CLSID %s, \",\n \t\t\t    format_clsid(clsbuf, sizeof(clsbuf),\n \t\t\t    root_storage->d_storage_uuid)) == -1)\n \t\t\t\treturn -1;\n \t\t}\n \t}\n #endif\n \n         if ((i = cdf_read_summary_info(&info, &h, &sat, &ssat, &sst, &dir,\n             &scn)) == -1) {\n                 if (errno == ESRCH) {\n                         corr",
  "diff_source": "custom",
  "Bug Filter": "Security Vulnerability Fix\nConfidence Score: 1.0",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "\n\n**Final Output:**\nAnalysis: The patch addresses a security vulnerability (CVE-2012-1571) by fixing a crash in handling corrupt CDF files, which could be exploited to cause a denial of service. The code changes add proper checks for sector sizes, mitigating the risk.\n\nFinal Classification: Security Vulnerability Fix\nConfidence Score: 1.0"
}