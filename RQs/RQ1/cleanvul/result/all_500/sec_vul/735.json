{
  "id": 735,
  "language": "Java",
  "commit_url": "https://github.com/PixelExperience/frameworks_base/commit/8eeb92950f4a7012d4cf282106a1418fd211f475",
  "commit_sha": "8eeb92950f4a7012d4cf282106a1418fd211f475",
  "commit_msg": "[SettingsProvider] mem limit should be checked before settings are updated\n\nPreviously, a setting is updated before the memory usage limit\ncheck, which can be exploited by malicious apps and cause OoM DoS.\n\nThis CL changes the logic to checkMemLimit -> update -> updateMemUsage.\n\nBUG: 239415861\nTest: atest com.android.providers.settings.SettingsStateTest\nChange-Id: I20551a2dba9aa79efa0c064824f349f551c2c2e4",
  "pr_url": null,
  "pr_info": "no more info",
  "file_name": "packages/SettingsProvider/src/com/android/providers/settings/SettingsState.java",
  "func_name": "GuardedBy",
  "func_before": "@GuardedBy(\"mLock\")\n    public void resetSettingDefaultValueLocked(String name) {\n        Setting oldSetting = getSettingLocked(name);\n        if (oldSetting != null && !oldSetting.isNull() && oldSetting.getDefaultValue() != null) {\n            String oldValue = oldSetting.getValue();\n            String oldDefaultValue = oldSetting.getDefaultValue();\n            Setting newSetting = new Setting(name, oldSetting.getValue(), null,\n                    oldSetting.getPackageName(), oldSetting.getTag(), false,\n                    oldSetting.getId());\n            mSettings.put(name, newSetting);\n            updateMemoryUsagePerPackageLocked(newSetting.getPackageName(), oldValue,\n                    newSetting.getValue(), oldDefaultValue, newSetting.getDefaultValue());\n            scheduleWriteIfNeededLocked();\n        }\n    }",
  "func_after": "@GuardedBy(\"mLock\")\n    public void resetSettingDefaultValueLocked(String name) {\n        Setting oldSetting = getSettingLocked(name);\n        if (oldSetting != null && !oldSetting.isNull() && oldSetting.getDefaultValue() != null) {\n            String oldValue = oldSetting.getValue();\n            String oldDefaultValue = oldSetting.getDefaultValue();\n            Setting newSetting = new Setting(name, oldSetting.getValue(), null,\n                    oldSetting.getPackageName(), oldSetting.getTag(), false,\n                    oldSetting.getId());\n            int newSize = getNewMemoryUsagePerPackageLocked(newSetting.getPackageName(), oldValue,\n                    newSetting.getValue(), oldDefaultValue, newSetting.getDefaultValue());\n            checkNewMemoryUsagePerPackageLocked(newSetting.getPackageName(), newSize);\n            mSettings.put(name, newSetting);\n            updateMemoryUsagePerPackageLocked(newSetting.getPackageName(), newSize);\n            scheduleWriteIfNeededLocked();\n        }\n    }",
  "diff_func": "--- func_before\n+++ func_after\n @GuardedBy(\"mLock\")\n     public void resetSettingDefaultValueLocked(String name) {\n         Setting oldSetting = getSettingLocked(name);\n         if (oldSetting != null && !oldSetting.isNull() && oldSetting.getDefaultValue() != null) {\n             String oldValue = oldSetting.getValue();\n             String oldDefaultValue = oldSetting.getDefaultValue();\n             Setting newSetting = new Setting(name, oldSetting.getValue(), null,\n                     oldSetting.getPackageName(), oldSetting.getTag(), false,\n                     oldSetting.getId());\n+            int newSize = getNewMemoryUsagePerPackageLocked(newSetting.getPackageName(), oldValue,\n+                    newSetting.getValue(), oldDefaultValue, newSetting.getDefaultValue());\n+            checkNewMemoryUsagePerPackageLocked(newSetting.getPackageName(), newSize);\n             mSettings.put(name, newSetting);\n-            updateMemoryUsagePerPackageLocked(newSetting.getPackageName(), oldValue,\n+            updateMemoryUsagePerPackageLocked(newSetting.getPackageName(), newSize);\n-                    newSetting.getValue(), oldDefaultValue, newSetting.getDefaultValue());\n             scheduleWriteIfNeededLocked();\n         }\n     }",
  "diff_source": "custom",
  "Bug Filter": "Security Vulnerability Fix  \nConfidence Score: 1.0",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "\n\n**Final Output:**\n\nAnalysis: The patch modifies the logic to check memory limits before updating settings, preventing malicious apps from causing OoM DoS. This addresses a security vulnerability affecting system availability.\n\nFinal Classification: Security Vulnerability Fix  \nConfidence Score: 1.0"
}