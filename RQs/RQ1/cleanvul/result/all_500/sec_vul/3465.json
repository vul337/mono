{
  "id": 3465,
  "language": "C/C++",
  "commit_url": "https://github.com/drachtio/drachtio-server/commit/f791a9313c58a911ce09f465f4bba594243b29ec",
  "commit_sha": "f791a9313c58a911ce09f465f4bba594243b29ec",
  "commit_msg": "make drachtio log file not globally readable (#241)",
  "pr_url": null,
  "pr_info": "no more info",
  "file_name": "src/controller.cpp",
  "func_name": "my_formatter",
  "func_before": "void my_formatter(logging::record_view const& rec, logging::formatting_ostream& strm) {\n        typedef boost::log::formatter formatter;\n        formatter f = expr::stream << expr::format_date_time<boost::posix_time::ptime>(\n            \"TimeStamp\", \"%Y-%m-%d %H:%M:%S.%f\") << \" \" <<\n            expr::smessage ;\n        f(rec, strm);\n    }",
  "func_after": "void DrachtioController::initializeLogging() {\n        try {\n\n            if( m_bNoConfig || m_Config->getConsoleLogTarget() || m_bConsoleLogging ) {\n\n                m_sinkConsole.reset(\n                    new sinks::synchronous_sink< sinks::text_ostream_backend >()\n                );        \n                m_sinkConsole->locked_backend()->add_stream( boost::shared_ptr<std::ostream>(&std::clog, boost::null_deleter()));\n\n                // flush\n                m_sinkConsole->locked_backend()->auto_flush(true);\n\n                m_sinkConsole->set_formatter( &my_formatter ) ;\n                          \n                logging::core::get()->add_sink(m_sinkConsole);\n\n                 logging::core::get()->set_filter(\n                   expr::attr<severity_levels>(\"Severity\") <= m_current_severity_threshold\n                ) ;\n            }\n            if( !m_bNoConfig ) {\n\n\n                // Create a syslog sink\n                sinks::syslog::facility facility  ;\n                string syslogAddress ;\n                unsigned short syslogPort;\n                \n                // initalize syslog sink, if configuredd\n                if( m_Config->getSyslogTarget( syslogAddress, syslogPort ) ) {\n                    m_Config->getSyslogFacility( facility ) ;\n\n                    m_sinkSysLog.reset(\n                        new sinks::synchronous_sink< sinks::syslog_backend >(\n                             keywords::use_impl = sinks::syslog::udp_socket_based\n                            , keywords::facility = facility\n                        )\n                    );\n\n                    // We'll have to map our custom levels to the syslog levels\n                    sinks::syslog::custom_severity_mapping< severity_levels > mapping(\"Severity\");\n                    mapping[log_debug] = sinks::syslog::debug;\n                    mapping[log_notice] = sinks::syslog::notice;\n                    mapping[log_info] = sinks::syslog::info;\n                    mapping[log_warning] = sinks::syslog::warning;\n                    mapping[log_error] = sinks::syslog::critical;\n\n                    m_sinkSysLog->locked_backend()->set_severity_mapper(mapping);\n\n                    // Set the remote address to sent syslog messages to\n                    m_sinkSysLog->locked_backend()->set_target_address( syslogAddress.c_str(), syslogPort );\n\n                    logging::core::get()->add_global_attribute(\"RecordID\", attrs::counter< unsigned int >());\n\n                    // Add the sink to the core\n                    logging::core::get()->add_sink(m_sinkSysLog);\n\n                }\n\n                //initialize text file sink, of configured\n                string name, archiveDirectory ;\n                unsigned int rotationSize, maxSize, minSize, maxFiles ;\n                bool autoFlush ;\n                if( m_Config->getFileLogTarget( name, archiveDirectory, rotationSize, autoFlush, maxSize, minSize, maxFiles ) ) {\n\n                    m_sinkTextFile.reset(\n                        new sinks::synchronous_sink< sinks::text_file_backend >(\n                            keywords::file_name = name,                                          \n                            keywords::rotation_size = rotationSize * 1000000,\n                            keywords::auto_flush = autoFlush,\n                            keywords::time_based_rotation = sinks::file::rotation_at_time_point(0, 0, 0),\n                            keywords::open_mode = (std::ios::out | std::ios::app),\n                            keywords::format = \n                            (\n                                expr::stream\n                                    << expr::attr< unsigned int >(\"RecordID\")\n                                    << \": \"\n                                    << expr::format_date_time< boost::posix_time::ptime >(\"TimeStamp\", \"%Y-%m-%d %H:%M:%S\")\n                                    << \"> \" << expr::smessage\n                            )\n                        )\n                    );        \n\n                    m_sinkTextFile->set_formatter( &my_formatter ) ;\n\n                    m_sinkTextFile->locked_backend()->set_file_collector(sinks::file::make_collector(\n                        keywords::target = archiveDirectory,                      \n                        keywords::max_size = maxSize * 1000000,          \n                        keywords::min_free_space = minSize * 1000000,\n                        keywords::max_files = maxFiles\n                    ));\n                               \n                    logging::core::get()->add_sink(m_sinkTextFile);\n                    boost::filesystem::permissions(name,\n                        boost::filesystem::perms::owner_read |\n                        boost::filesystem::perms::owner_write |\n                        boost::filesystem::perms::group_read |\n                        boost::filesystem::perms::group_write\n                    );\n\n                }\n                logging::core::get()->set_filter(\n                   expr::attr<severity_levels>(\"Severity\") <= m_current_severity_threshold\n                ) ;\n            }\n            \n            m_bLoggingInitialized = true ;\n\n        }\n        catch (std::exception& e) {\n            std::cout << \"FAILURE creating logger: \" << e.what() << std::endl;\n            throw e;\n        }\t\n    }",
  "diff_func": "--- func_before\n+++ func_after\n-void my_formatter(logging::record_view const& rec, logging::formatting_ostream& strm) {\n-        typedef boost::log::formatter formatter;\n-        formatter f = expr::stream << expr::format_date_time<boost::posix_time::ptime>(\n-            \"TimeStamp\", \"%Y-%m-%d %H:%M:%S.%f\") << \" \" <<\n-            expr::smessage ;\n-        f(rec, strm);\n+void DrachtioController::initializeLogging() {\n+        try {\n+\n+            if( m_bNoConfig || m_Config->getConsoleLogTarget() || m_bConsoleLogging ) {\n+\n+                m_sinkConsole.reset(\n+                    new sinks::synchronous_sink< sinks::text_ostream_backend >()\n+                );        \n+                m_sinkConsole->locked_backend()->add_stream( boost::shared_ptr<std::ostream>(&std::clog, boost::null_deleter()));\n+\n+                // flush\n+                m_sinkConsole->locked_backend()->auto_flush(true);\n+\n+                m_sinkConsole->set_formatter( &my_formatter ) ;\n+                          \n+                logging::core::get()->add_sink(m_sinkConsole);\n+\n+                 logging::core::get()->set_filter(\n+                   expr::attr<severity_levels>(\"Severity\") <= m_current_severity_threshold\n+                ) ;\n+            }\n+            if( !m_bNoConfig ) {\n+\n+\n+                // Create a syslog sink\n+                sinks::syslog::facility facility  ;\n+                string syslogAddress ;\n+                unsigned short syslogPort;\n+                \n+                // initalize syslog sink, if configuredd\n+                if( m_Config->getSyslogTarget( syslogAddress, syslogPort ) ) {\n+                    m_Config->getSyslogFacility( facility ) ;\n+\n+                    m_sinkSysLog.reset(\n+                        new sinks::synchronous_sink< sinks::syslog_backend >(\n+                             keywords::use_impl = sinks::syslog::udp_socket_based\n+                            , keywords::facility = facility\n+                        )\n+                    );\n+\n+ ",
  "diff_source": "custom",
  "Bug Filter": "Security Vulnerability Fix\n\nConfidence Score: 0.95",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "\n\n**Final Output:**\n\nAnalysis: The commit changes the log file permissions to prevent global readability, addressing a security vulnerability where sensitive data could be exposed.\n\nFinal Classification: Security Vulnerability Fix\n\nConfidence Score: 0.95"
}