{
  "id": 3714,
  "language": "C/C++",
  "commit_url": "https://github.com/torvalds/linux/commit/e9c6a182649f4259db704ae15a91ac820e63b0ca",
  "commit_sha": "e9c6a182649f4259db704ae15a91ac820e63b0ca",
  "commit_msg": "dm snapshot: fix data corruption\n\nThis patch fixes a particular type of data corruption that has been\nencountered when loading a snapshot's metadata from disk.\n\nWhen we allocate a new chunk in persistent_prepare, we increment\nps->next_free and we make sure that it doesn't point to a metadata area\nby further incrementing it if necessary.\n\nWhen we load metadata from disk on device activation, ps->next_free is\npositioned after the last used data chunk. However, if this last used\ndata chunk is followed by a metadata area, ps->next_free is positioned\nerroneously to the metadata area. A newly-allocated chunk is placed at\nthe same location as the metadata area, resulting in data or metadata\ncorruption.\n\nThis patch changes the code so that ps->next_free skips the metadata\narea when metadata are loaded in function read_exceptions.\n\nThe patch also moves a piece of code from persistent_prepare_exception\nto a separate function skip_metadata to avoid code duplication.\n\nCVE-2013-4299\n\nSigned-off-by: Mikulas Patocka <mpatocka@redhat.com>\nCc: stable@vger.kernel.org\nCc: Mike Snitzer <snitzer@redhat.com>\nSigned-off-by: Alasdair G Kergon <agk@redhat.com>",
  "pr_url": null,
  "pr_info": "no more info",
  "file_name": "drivers/md/dm-snap-persistent.c",
  "func_name": "read_exceptions",
  "func_before": "static int read_exceptions(struct pstore *ps,\n\t\t\t   int (*callback)(void *callback_context, chunk_t old,\n\t\t\t\t\t   chunk_t new),\n\t\t\t   void *callback_context)\n{\n\tint r, full = 1;\n\n\t/*\n\t * Keeping reading chunks and inserting exceptions until\n\t * we find a partially full area.\n\t */\n\tfor (ps->current_area = 0; full; ps->current_area++) {\n\t\tr = area_io(ps, READ);\n\t\tif (r)\n\t\t\treturn r;\n\n\t\tr = insert_exceptions(ps, callback, callback_context, &full);\n\t\tif (r)\n\t\t\treturn r;\n\t}\n\n\tps->current_area--;\n\n\treturn 0;\n}",
  "func_after": "static int read_exceptions(struct pstore *ps,\n\t\t\t   int (*callback)(void *callback_context, chunk_t old,\n\t\t\t\t\t   chunk_t new),\n\t\t\t   void *callback_context)\n{\n\tint r, full = 1;\n\n\t/*\n\t * Keeping reading chunks and inserting exceptions until\n\t * we find a partially full area.\n\t */\n\tfor (ps->current_area = 0; full; ps->current_area++) {\n\t\tr = area_io(ps, READ);\n\t\tif (r)\n\t\t\treturn r;\n\n\t\tr = insert_exceptions(ps, callback, callback_context, &full);\n\t\tif (r)\n\t\t\treturn r;\n\t}\n\n\tps->current_area--;\n\n\tskip_metadata(ps);\n\n\treturn 0;\n}",
  "diff_func": "--- func_before\n+++ func_after\n static int read_exceptions(struct pstore *ps,\n \t\t\t   int (*callback)(void *callback_context, chunk_t old,\n \t\t\t\t\t   chunk_t new),\n \t\t\t   void *callback_context)\n {\n \tint r, full = 1;\n \n \t/*\n \t * Keeping reading chunks and inserting exceptions until\n \t * we find a partially full area.\n \t */\n \tfor (ps->current_area = 0; full; ps->current_area++) {\n \t\tr = area_io(ps, READ);\n \t\tif (r)\n \t\t\treturn r;\n \n \t\tr = insert_exceptions(ps, callback, callback_context, &full);\n \t\tif (r)\n \t\t\treturn r;\n \t}\n \n \tps->current_area--;\n \n+\tskip_metadata(ps);\n+\n \treturn 0;\n }",
  "diff_source": "custom",
  "Bug Filter": "** Security Vulnerability Fix  \n**Confidence Score:** 1.0",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "\n\nThe patch addresses a data corruption issue caused by incorrect memory allocation, specifically when loading metadata. This leads to data integrity issues, classified as a security vulnerability. The fix modifies the read_exceptions function to skip metadata areas, preventing corruption.\n\n**Final Classification:** Security Vulnerability Fix  \n**Confidence Score:** 1.0"
}