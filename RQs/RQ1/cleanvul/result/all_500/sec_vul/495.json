{
  "id": 495,
  "language": "Java",
  "commit_url": "https://github.com/aosp-mirror/platform_frameworks_base/commit/68d12f81475aaaa2c3561565522140e7cdbae257",
  "commit_sha": "68d12f81475aaaa2c3561565522140e7cdbae257",
  "commit_msg": "[RESTRICT AUTOMERGE] [SettingsProvider] mem limit should be checked before settings are updated\n\nPreviously, a setting is updated before the memory usage limit\ncheck, which can be exploited by malicious apps and cause OoM DoS.\n\nThis CL changes the logic to checkMemLimit -> update -> updateMemUsage.\n\nBUG: 239415861\nTest: atest com.android.providers.settings.SettingsStateTest\n\n(cherry picked from commit 8eeb92950f4a7012d4cf282106a1418fd211f475)\nMerged-In: I20551a2dba9aa79efa0c064824f349f551c2c2e4\nChange-Id: I20551a2dba9aa79efa0c064824f349f551c2c2e4\n(cherry picked from commit 966b597383d1f5cbbc943affeb24b9b225b2ddae)\nMerged-In: I20551a2dba9aa79efa0c064824f349f551c2c2e4",
  "pr_url": null,
  "pr_info": "no more info",
  "file_name": "packages/SettingsProvider/src/com/android/providers/settings/SettingsState.java",
  "func_name": "GuardedBy",
  "func_before": "@GuardedBy(\"mLock\")\n    public boolean insertSettingLocked(String name, String value, String tag,\n            boolean makeDefault, boolean forceNonSystemPackage, String packageName,\n            boolean overrideableByRestore) {\n        if (TextUtils.isEmpty(name)) {\n            return false;\n        }\n\n        Setting oldState = mSettings.get(name);\n        String oldValue = (oldState != null) ? oldState.value : null;\n        String oldDefaultValue = (oldState != null) ? oldState.defaultValue : null;\n        Setting newState;\n\n        if (oldState != null) {\n            if (!oldState.update(value, makeDefault, packageName, tag, forceNonSystemPackage,\n                    overrideableByRestore)) {\n                return false;\n            }\n            newState = oldState;\n        } else {\n            newState = new Setting(name, value, makeDefault, packageName, tag,\n                    forceNonSystemPackage);\n            mSettings.put(name, newState);\n        }\n\n        FrameworkStatsLog.write(FrameworkStatsLog.SETTING_CHANGED, name, value, newState.value,\n                oldValue, tag, makeDefault, getUserIdFromKey(mKey),\n                FrameworkStatsLog.SETTING_CHANGED__REASON__UPDATED);\n\n        addHistoricalOperationLocked(HISTORICAL_OPERATION_UPDATE, newState);\n\n        updateMemoryUsagePerPackageLocked(packageName, oldValue, value,\n                oldDefaultValue, newState.getDefaultValue());\n\n        scheduleWriteIfNeededLocked();\n\n        return true;\n    }",
  "func_after": "@GuardedBy(\"mLock\")\n    public boolean insertSettingLocked(String name, String value, String tag,\n            boolean makeDefault, boolean forceNonSystemPackage, String packageName,\n            boolean overrideableByRestore) {\n        if (TextUtils.isEmpty(name)) {\n            return false;\n        }\n\n        Setting oldState = mSettings.get(name);\n        String oldValue = (oldState != null) ? oldState.value : null;\n        String oldDefaultValue = (oldState != null) ? oldState.defaultValue : null;\n        String newDefaultValue = makeDefault ? value : oldDefaultValue;\n\n        int newSize = getNewMemoryUsagePerPackageLocked(packageName, oldValue, value,\n                oldDefaultValue, newDefaultValue);\n        checkNewMemoryUsagePerPackageLocked(packageName, newSize);\n\n        Setting newState;\n\n        if (oldState != null) {\n            if (!oldState.update(value, makeDefault, packageName, tag, forceNonSystemPackage,\n                    overrideableByRestore)) {\n                return false;\n            }\n            newState = oldState;\n        } else {\n            newState = new Setting(name, value, makeDefault, packageName, tag,\n                    forceNonSystemPackage);\n            mSettings.put(name, newState);\n        }\n\n        FrameworkStatsLog.write(FrameworkStatsLog.SETTING_CHANGED, name, value, newState.value,\n                oldValue, tag, makeDefault, getUserIdFromKey(mKey),\n                FrameworkStatsLog.SETTING_CHANGED__REASON__UPDATED);\n\n        addHistoricalOperationLocked(HISTORICAL_OPERATION_UPDATE, newState);\n\n        updateMemoryUsagePerPackageLocked(packageName, newSize);\n\n        scheduleWriteIfNeededLocked();\n\n        return true;\n    }",
  "diff_func": "--- func_before\n+++ func_after\n @GuardedBy(\"mLock\")\n     public boolean insertSettingLocked(String name, String value, String tag,\n             boolean makeDefault, boolean forceNonSystemPackage, String packageName,\n             boolean overrideableByRestore) {\n         if (TextUtils.isEmpty(name)) {\n             return false;\n         }\n \n         Setting oldState = mSettings.get(name);\n         String oldValue = (oldState != null) ? oldState.value : null;\n         String oldDefaultValue = (oldState != null) ? oldState.defaultValue : null;\n+        String newDefaultValue = makeDefault ? value : oldDefaultValue;\n+\n+        int newSize = getNewMemoryUsagePerPackageLocked(packageName, oldValue, value,\n+                oldDefaultValue, newDefaultValue);\n+        checkNewMemoryUsagePerPackageLocked(packageName, newSize);\n+\n         Setting newState;\n \n         if (oldState != null) {\n             if (!oldState.update(value, makeDefault, packageName, tag, forceNonSystemPackage,\n                     overrideableByRestore)) {\n                 return false;\n             }\n             newState = oldState;\n         } else {\n             newState = new Setting(name, value, makeDefault, packageName, tag,\n                     forceNonSystemPackage);\n             mSettings.put(name, newState);\n         }\n \n         FrameworkStatsLog.write(FrameworkStatsLog.SETTING_CHANGED, name, value, newState.value,\n                 oldValue, tag, makeDefault, getUserIdFromKey(mKey),\n                 FrameworkStatsLog.SETTING_CHANGED__REASON__UPDATED);\n \n         addHistoricalOperationLocked(HISTORICAL_OPERATION_UPDATE, newState);\n \n-        updateMemoryUsagePerPackageLocked(packageName, oldValue, value,\n+        updateMemoryUsagePerPackageLocked(packageName, newSize);\n-                oldDefaultValue, newState.getDefaultValue());\n \n         scheduleWriteIfNeededLocked();\n \n         return true;\n     }",
  "diff_source": "custom",
  "Bug Filter": "Security Vulnerability Fix  \nConfidence Score: 1.0",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "\n\n**Final Output:**\n\nAnalysis: The patch modifies the `insertSettingLocked` function to check memory limits before updating settings, preventing malicious apps from causing an OoM DoS.\n\nFinal Classification: Security Vulnerability Fix  \nConfidence Score: 1.0"
}