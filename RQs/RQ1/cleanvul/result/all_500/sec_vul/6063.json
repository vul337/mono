{
  "id": 6063,
  "language": "C/C++",
  "commit_url": "https://github.com/proftpd/proftpd/commit/d726fcbf3cdb32c3b6fe287bd8eda310db956f2f",
  "commit_sha": "d726fcbf3cdb32c3b6fe287bd8eda310db956f2f",
  "commit_msg": "Merge pull request #906 from proftpd/cap-updated-libcap-issue902\n\nIssue #902: Update the bundled `libcap` library to the latest from",
  "pr_url": "https://github.com/proftpd/proftpd/pull/906",
  "pr_info": "https://github.com/mhiramat/libcap.git.",
  "file_name": "lib/libcap/cap_alloc.c",
  "func_name": "cap_init",
  "func_before": "cap_t cap_init(void)\n{\n    __u32 *raw_data;\n    cap_t result;\n\n    raw_data = malloc( sizeof(__u32) + sizeof(*result) );\n\n    if (raw_data == NULL) {\n       _cap_debug(\"out of memory\");\n       errno = ENOMEM;\n       return NULL;\n    }\n\n    *raw_data = CAP_T_MAGIC;\n    result = (cap_t) (raw_data + 1);\n    memset(result, 0, sizeof(*result));\n\n    result->head.version = _LINUX_CAPABILITY_VERSION_1;\n\n    return result;\n}",
  "func_after": "cap_t cap_init(void)\n{\n    __u32 *raw_data;\n    cap_t result;\n\n    raw_data = malloc( sizeof(__u32) + sizeof(*result) );\n\n    if (raw_data == NULL) {\n\t_cap_debug(\"out of memory\");\n\terrno = ENOMEM;\n\treturn NULL;\n    }\n\n    *raw_data = CAP_T_MAGIC;\n    result = (cap_t) (raw_data + 1);\n    memset(result, 0, sizeof(*result));\n\n    result->head.version = _LIBCAP_CAPABILITY_VERSION;\n    capget(&result->head, NULL);      /* load the kernel-capability version */\n\n    switch (result->head.version) {\n#ifdef _LINUX_CAPABILITY_VERSION_1\n    case _LINUX_CAPABILITY_VERSION_1:\n\tbreak;\n#endif\n#ifdef _LINUX_CAPABILITY_VERSION_2\n    case _LINUX_CAPABILITY_VERSION_2:\n\tbreak;\n#endif\n#ifdef _LINUX_CAPABILITY_VERSION_3\n    case _LINUX_CAPABILITY_VERSION_3:\n\tbreak;\n#endif\n    default:                          /* No idea what to do */\n\tcap_free(result);\n\tresult = NULL;\n\tbreak;\n    }\n\n    return result;\n}",
  "diff_func": "--- func_before\n+++ func_after\n cap_t cap_init(void)\n {\n     __u32 *raw_data;\n     cap_t result;\n \n     raw_data = malloc( sizeof(__u32) + sizeof(*result) );\n \n     if (raw_data == NULL) {\n-       _cap_debug(\"out of memory\");\n+\t_cap_debug(\"out of memory\");\n-       errno = ENOMEM;\n+\terrno = ENOMEM;\n-       return NULL;\n+\treturn NULL;\n     }\n \n     *raw_data = CAP_T_MAGIC;\n     result = (cap_t) (raw_data + 1);\n     memset(result, 0, sizeof(*result));\n \n-    result->head.version = _LINUX_CAPABILITY_VERSION_1;\n+    result->head.version = _LIBCAP_CAPABILITY_VERSION;\n+    capget(&result->head, NULL);      /* load the kernel-capability version */\n+\n+    switch (result->head.version) {\n+#ifdef _LINUX_CAPABILITY_VERSION_1\n+    case _LINUX_CAPABILITY_VERSION_1:\n+\tbreak;\n+#endif\n+#ifdef _LINUX_CAPABILITY_VERSION_2\n+    case _LINUX_CAPABILITY_VERSION_2:\n+\tbreak;\n+#endif\n+#ifdef _LINUX_CAPABILITY_VERSION_3\n+    case _LINUX_CAPABILITY_VERSION_3:\n+\tbreak;\n+#endif\n+    default:                          /* No idea what to do */\n+\tcap_free(result);\n+\tresult = NULL;\n+\tbreak;\n+    }\n \n     return result;\n }",
  "diff_source": "custom",
  "Bug Filter": "** Security Vulnerability Fix  \n**Confidence Score:** 0.9",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "\n\n**Analysis:**\nThe patch updates the `libcap` library and modifies the `cap_init` function to handle capability versions more robustly. This change enhances security by preventing potential issues with capability handling, which could lead to security vulnerabilities if not addressed.\n\n**Final Classification:** Security Vulnerability Fix  \n**Confidence Score:** 0.9"
}