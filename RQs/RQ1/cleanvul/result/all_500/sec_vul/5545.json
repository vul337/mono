{
  "id": 5545,
  "language": "Python",
  "commit_url": "https://github.com/octoprint/octoprint/commit/8087528e4a7ddd15c7d95ff662deb5ef7de90045",
  "commit_sha": "8087528e4a7ddd15c7d95ff662deb5ef7de90045",
  "commit_msg": "üîíÔ∏è Sanitize and validate login redirect\n\nFixes an XSS and an open redirect issue.",
  "pr_url": null,
  "pr_info": "no more info",
  "file_name": "src/octoprint/server/views.py",
  "func_name": "login",
  "func_before": "def login():\n    from flask_login import current_user\n\n    redirect_url = request.args.get(\"redirect\", request.script_root + url_for(\"index\"))\n    permissions = sorted(\n        filter(\n            lambda x: x is not None and isinstance(x, OctoPrintPermission),\n            map(\n                lambda x: getattr(Permissions, x.strip()),\n                request.args.get(\"permissions\", \"\").split(\",\"),\n            ),\n        ),\n        key=lambda x: x.get_name(),\n    )\n    if not permissions:\n        permissions = [Permissions.STATUS, Permissions.SETTINGS_READ]\n\n    user_id = request.args.get(\"user_id\", \"\")\n\n    if (not user_id or current_user.get_id() == user_id) and has_permissions(\n        *permissions\n    ):\n        return redirect(redirect_url)\n\n    render_kwargs = {\n        \"theming\": [],\n        \"redirect_url\": redirect_url,\n        \"permission_names\": map(lambda x: x.get_name(), permissions),\n        \"user_id\": user_id,\n        \"logged_in\": not current_user.is_anonymous,\n    }\n\n    try:\n        additional_assets = _add_additional_assets(\"octoprint.theming.login\")\n\n        # backwards compatibility to forcelogin & loginui plugins which were replaced by this built-in dialog\n        additional_assets += _add_additional_assets(\"octoprint.plugin.forcelogin.theming\")\n        additional_assets += _add_additional_assets(\"octoprint.plugin.loginui.theming\")\n\n        render_kwargs.update({\"theming\": additional_assets})\n    except Exception:\n        _logger.exception(\"Error processing theming CSS, ignoring\")\n\n    return render_template(\"login.jinja2\", **render_kwargs)",
  "func_after": "def login():\n    from flask_login import current_user\n\n    default_redirect_url = request.script_root + url_for(\"index\")\n    redirect_url = request.args.get(\"redirect\", default_redirect_url)\n\n    parsed = urlparse(redirect_url)  # check if redirect url is valid\n    if parsed.scheme != \"\" or parsed.netloc != \"\":\n        _logger.warning(\n            f\"Got an invalid redirect URL with the login attempt, misconfiguration or attack attempt: {redirect_url}\"\n        )\n        redirect_url = default_redirect_url\n\n    permissions = sorted(\n        filter(\n            lambda x: x is not None and isinstance(x, OctoPrintPermission),\n            map(\n                lambda x: getattr(Permissions, x.strip()),\n                request.args.get(\"permissions\", \"\").split(\",\"),\n            ),\n        ),\n        key=lambda x: x.get_name(),\n    )\n    if not permissions:\n        permissions = [Permissions.STATUS, Permissions.SETTINGS_READ]\n\n    user_id = request.args.get(\"user_id\", \"\")\n\n    if (not user_id or current_user.get_id() == user_id) and has_permissions(\n        *permissions\n    ):\n        return redirect(redirect_url)\n\n    render_kwargs = {\n        \"theming\": [],\n        \"redirect_url\": redirect_url,\n        \"permission_names\": map(lambda x: x.get_name(), permissions),\n        \"user_id\": user_id,\n        \"logged_in\": not current_user.is_anonymous,\n    }\n\n    try:\n        additional_assets = _add_additional_assets(\"octoprint.theming.login\")\n\n        # backwards compatibility to forcelogin & loginui plugins which were replaced by this built-in dialog\n        additional_assets += _add_additional_assets(\"octoprint.plugin.forcelogin.theming\")\n        additional_assets += _add_additional_assets(\"octoprint.plugin.loginui.theming\")\n\n        render_kwargs.update({\"theming\": additional_assets})\n    except Exception:\n        _logger.exception(\"Error processing theming CSS, ignoring\")\n\n    return render_template(\"login.jinja2\", **render_kwargs)",
  "diff_func": "--- func_before\n+++ func_after\n def login():\n     from flask_login import current_user\n \n-    redirect_url = request.args.get(\"redirect\", request.script_root + url_for(\"index\"))\n+    default_redirect_url = request.script_root + url_for(\"index\")\n+    redirect_url = request.args.get(\"redirect\", default_redirect_url)\n+\n+    parsed = urlparse(redirect_url)  # check if redirect url is valid\n+    if parsed.scheme != \"\" or parsed.netloc != \"\":\n+        _logger.warning(\n+            f\"Got an invalid redirect URL with the login attempt, misconfiguration or attack attempt: {redirect_url}\"\n+        )\n+        redirect_url = default_redirect_url\n+\n     permissions = sorted(\n         filter(\n             lambda x: x is not None and isinstance(x, OctoPrintPermission),\n             map(\n                 lambda x: getattr(Permissions, x.strip()),\n                 request.args.get(\"permissions\", \"\").split(\",\"),\n             ),\n         ),\n         key=lambda x: x.get_name(),\n     )\n     if not permissions:\n         permissions = [Permissions.STATUS, Permissions.SETTINGS_READ]\n \n     user_id = request.args.get(\"user_id\", \"\")\n \n     if (not user_id or current_user.get_id() == user_id) and has_permissions(\n         *permissions\n     ):\n         return redirect(redirect_url)\n \n     render_kwargs = {\n         \"theming\": [],\n         \"redirect_url\": redirect_url,\n         \"permission_names\": map(lambda x: x.get_name(), permissions),\n         \"user_id\": user_id,\n         \"logged_in\": not current_user.is_anonymous,\n     }\n \n     try:\n         additional_assets = _add_additional_assets(\"octoprint.theming.login\")\n \n         # backwards compatibility to forcelogin & loginui plugins which were replaced by this built-in dialog\n         additional_assets += _add_additional_assets(\"octoprint.plugin.forcelogin.theming\")\n         additional_assets += _add_additional_assets(\"octoprint.plugin.loginui.theming\")\n \n         render_kwargs.update({\"theming\": additional_assets})\n     except Exception:\n     ",
  "diff_source": "custom",
  "Bug Filter": "Security Vulnerability Fix\n\nConfidence Score: 1.0",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "\n\n**Final Output:**\n\nAnalysis: The patch addresses XSS and open redirect vulnerabilities by sanitizing and validating the redirect URL in the login function. It checks the URL components to prevent unauthorized redirects and logs warnings for suspicious URLs, resetting them to a safe default.\n\nFinal Classification: Security Vulnerability Fix\n\nConfidence Score: 1.0"
}