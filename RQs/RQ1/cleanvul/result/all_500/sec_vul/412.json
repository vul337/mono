{
  "id": 412,
  "language": "Java",
  "commit_url": "https://github.com/aosp-mirror/platform_frameworks_base/commit/07bec33a93bfbeb3c4df23bb0d0bffe9c75c4c4b",
  "commit_sha": "07bec33a93bfbeb3c4df23bb0d0bffe9c75c4c4b",
  "commit_msg": "[SettingsProvider] mem limit should be checked before settings are updated\n\nPreviously, a setting is updated before the memory usage limit\ncheck, which can be exploited by malicious apps and cause OoM DoS.\n\nThis CL changes the logic to checkMemLimit -> update -> updateMemUsage.\n\nBUG: 239415861\nTest: atest com.android.providers.settings.SettingsStateTest\n\n(cherry picked from commit 8eeb92950f4a7012d4cf282106a1418fd211f475)\nMerged-In: I20551a2dba9aa79efa0c064824f349f551c2c2e4\nChange-Id: I20551a2dba9aa79efa0c064824f349f551c2c2e4\n(cherry picked from commit d85a42821075ad80b931d904bdc9c1d4c3129456)\nMerged-In: I20551a2dba9aa79efa0c064824f349f551c2c2e4",
  "pr_url": null,
  "pr_info": "no more info",
  "file_name": "packages/SettingsProvider/src/com/android/providers/settings/SettingsState.java",
  "func_name": "GuardedBy",
  "func_before": "@GuardedBy(\"mLock\")\n    public boolean deleteSettingLocked(String name) {\n        if (TextUtils.isEmpty(name) || !hasSettingLocked(name)) {\n            return false;\n        }\n\n        Setting oldState = mSettings.remove(name);\n\n        StatsLog.write(StatsLog.SETTING_CHANGED, name, /* value= */ \"\", /* newValue= */ \"\",\n            oldState.value, /* tag */ \"\", false, getUserIdFromKey(mKey),\n            StatsLog.SETTING_CHANGED__REASON__DELETED);\n\n        updateMemoryUsagePerPackageLocked(oldState.packageName, oldState.value,\n                null, oldState.defaultValue, null);\n\n        addHistoricalOperationLocked(HISTORICAL_OPERATION_DELETE, oldState);\n\n        scheduleWriteIfNeededLocked();\n\n        return true;\n    }",
  "func_after": "@GuardedBy(\"mLock\")\n    public boolean deleteSettingLocked(String name) {\n        if (TextUtils.isEmpty(name) || !hasSettingLocked(name)) {\n            return false;\n        }\n\n        Setting oldState = mSettings.remove(name);\n        int newSize = getNewMemoryUsagePerPackageLocked(oldState.packageName, oldState.value,\n                null, oldState.defaultValue, null);\n\n        StatsLog.write(StatsLog.SETTING_CHANGED, name, /* value= */ \"\", /* newValue= */ \"\",\n            oldState.value, /* tag */ \"\", false, getUserIdFromKey(mKey),\n            StatsLog.SETTING_CHANGED__REASON__DELETED);\n\n        updateMemoryUsagePerPackageLocked(oldState.packageName, newSize);\n\n        addHistoricalOperationLocked(HISTORICAL_OPERATION_DELETE, oldState);\n\n        scheduleWriteIfNeededLocked();\n\n        return true;\n    }",
  "diff_func": "--- func_before\n+++ func_after\n @GuardedBy(\"mLock\")\n     public boolean deleteSettingLocked(String name) {\n         if (TextUtils.isEmpty(name) || !hasSettingLocked(name)) {\n             return false;\n         }\n \n         Setting oldState = mSettings.remove(name);\n+        int newSize = getNewMemoryUsagePerPackageLocked(oldState.packageName, oldState.value,\n+                null, oldState.defaultValue, null);\n \n         StatsLog.write(StatsLog.SETTING_CHANGED, name, /* value= */ \"\", /* newValue= */ \"\",\n             oldState.value, /* tag */ \"\", false, getUserIdFromKey(mKey),\n             StatsLog.SETTING_CHANGED__REASON__DELETED);\n \n-        updateMemoryUsagePerPackageLocked(oldState.packageName, oldState.value,\n+        updateMemoryUsagePerPackageLocked(oldState.packageName, newSize);\n-                null, oldState.defaultValue, null);\n \n         addHistoricalOperationLocked(HISTORICAL_OPERATION_DELETE, oldState);\n \n         scheduleWriteIfNeededLocked();\n \n         return true;\n     }",
  "diff_source": "custom",
  "Bug Filter": "Security Vulnerability Fix\nConfidence Score: 0.95\n\n```json\n{\n  \"Analysis\": \"The patch modifies the memory check logic in the deleteSettingLocked function to prevent Out-of-Memory (OoM) Denial of Service (DoS) attacks. By changing the order of operations to check the memory limit before updating the settings, the patch addresses a security vulnerability that could be exploited by malicious applications to cause system instability or resource exhaustion.\",\n  \"Final Classification\": \"Security Vulnerability Fix\",\n  \"Confidence Score\": 0.95\n}\n```",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "\n\nThe patch addresses a security vulnerability where malicious apps could cause an OoM DoS by exploiting the order of operations in memory checks. The code changes ensure memory limits are checked before updating settings, mitigating the risk.\n\n**Final Output:**\nAnalysis: The patch modifies the memory check logic to prevent OoM DoS attacks by malicious apps. The code changes ensure the memory limit is checked before updating settings, fixing a security flaw.\nFinal Classification: Security Vulnerability Fix\nConfidence Score: 0.95\n\n```json\n{\n  \"Analysis\": \"The patch modifies the memory check logic in the deleteSettingLocked function to prevent Out-of-Memory (OoM) Denial of Service (DoS) attacks. By changing the order of operations to check the memory limit before updating the settings, the patch addresses a security vulnerability that could be exploited by malicious applications to cause system instability or resource exhaustion.\",\n  \"Final Classification\": \"Security Vulnerability Fix\",\n  \"Confidence Score\": 0.95\n}\n```"
}