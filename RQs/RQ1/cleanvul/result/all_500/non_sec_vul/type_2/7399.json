{
  "id": 7399,
  "language": "JavaScript",
  "commit_url": "https://github.com/npm/fstream/commit/6a77d2fa6e1462693cf8e46f930da96ec1b0bb22",
  "commit_sha": "6a77d2fa6e1462693cf8e46f930da96ec1b0bb22",
  "commit_msg": "Clobber a Link if it's in the way of a File\n\nFixes https://github.com/npm/node-tar/issues/212",
  "pr_url": null,
  "pr_info": "no more info",
  "file_name": "lib/writer.js",
  "func_name": "statCb",
  "func_before": "function statCb (er, current) {\n    if (self.filter && !self.filter.call(who, who, current)) {\n      self._aborted = true\n      self.emit('end')\n      self.emit('close')\n      return\n    }\n\n    // if it's not there, great.  We'll just create it.\n    // if it is there, then we'll need to change whatever differs\n    if (er || !current) {\n      return create(self)\n    }\n\n    self._old = current\n    var currentType = getType(current)\n\n    // if it's a type change, then we need to clobber or error.\n    // if it's not a type change, then let the impl take care of it.\n    if (currentType !== self.type) {\n      return rimraf(self._path, function (er) {\n        if (er) return self.error(er)\n        self._old = null\n        create(self)\n      })\n    }\n\n    // otherwise, just handle in the app-specific way\n    // this creates a fs.WriteStream, or mkdir's, or whatever\n    create(self)\n  }",
  "func_after": "function statCb (er, current) {\n    if (self.filter && !self.filter.call(who, who, current)) {\n      self._aborted = true\n      self.emit('end')\n      self.emit('close')\n      return\n    }\n\n    // if it's not there, great.  We'll just create it.\n    // if it is there, then we'll need to change whatever differs\n    if (er || !current) {\n      return create(self)\n    }\n\n    self._old = current\n    var currentType = getType(current)\n\n    // if it's a type change, then we need to clobber or error.\n    // if it's not a type change, then let the impl take care of it.\n    if (currentType !== self.type || self.type === 'File' && current.nlink > 1) {\n      return rimraf(self._path, function (er) {\n        if (er) return self.error(er)\n        self._old = null\n        create(self)\n      })\n    }\n\n    // otherwise, just handle in the app-specific way\n    // this creates a fs.WriteStream, or mkdir's, or whatever\n    create(self)\n  }",
  "diff_func": "--- func_before\n+++ func_after\n function statCb (er, current) {\n     if (self.filter && !self.filter.call(who, who, current)) {\n       self._aborted = true\n       self.emit('end')\n       self.emit('close')\n       return\n     }\n \n     // if it's not there, great.  We'll just create it.\n     // if it is there, then we'll need to change whatever differs\n     if (er || !current) {\n       return create(self)\n     }\n \n     self._old = current\n     var currentType = getType(current)\n \n     // if it's a type change, then we need to clobber or error.\n     // if it's not a type change, then let the impl take care of it.\n-    if (currentType !== self.type) {\n+    if (currentType !== self.type || self.type === 'File' && current.nlink > 1) {\n       return rimraf(self._path, function (er) {\n         if (er) return self.error(er)\n         self._old = null\n         create(self)\n       })\n     }\n \n     // otherwise, just handle in the app-specific way\n     // this creates a fs.WriteStream, or mkdir's, or whatever\n     create(self)\n   }",
  "diff_source": "custom",
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "\n\n**Final Output:**\n\nAnalysis:\n- The commit addresses an issue where a link interferes with file creation.\n- The code change modifies a condition to remove links when necessary.\n- This ensures proper file handling but doesn't fix a security vulnerability.\n\nFinal Classification: Defect Remediation & Feature Upgrades\nConfidence Score: 0.9"
}