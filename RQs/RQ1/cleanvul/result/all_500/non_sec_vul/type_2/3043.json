{
  "id": 3043,
  "language": "Java",
  "commit_url": "https://github.com/LineageOS/android_packages_apps_Settings/commit/4db5c6ba5750564fdb5c834d66260afcbaf4a7f3",
  "commit_sha": "4db5c6ba5750564fdb5c834d66260afcbaf4a7f3",
  "commit_msg": "Port new version battery usage chart implementation from master to tm-qpr-dev.\n\nThis cl is a merge of the following 36 cls:\nag/19250259\tDuplicate BatteryChartPreferenceController and BatteryChartView into new files for better diff review purpose\nag/19279660\tUse Mockito 4.6.1 API for BatteryChartPreferenceControllerV2Test\nag/19267975\tAdd class BatteryLevelData used to parcel the battery timestamps and levels. It behaves as an interface between UI and data.\nag/19289086\tRefactor BatteryChartView X-axis labels. Instead of only timestamps, also support any string[] labels.\nag/19238586\tAdd interpolation for the history data since last full charge loaded from database.\nag/19331746\tReturn raw history map in function getHistoryMapSinceLastFullCharge.\nag/19308838\tIn BatteryChartViewV2, use levels.length-1 to replace mTrapezoidCount. So the chartview could show any number of slots as the given levels length-1.\nag/19332266\tAdd class BatteryDiffData used to parcel battery usage data\nag/19331467\tRefactor Battery Chart View State Controll\nag/19358207\tAdd DataProcessor to process raw history map for UI.\nag/19332276\tAdd battery chart view model.\nag/19394744\tUpdate trapezoid validation in battery chart view.\nag/19379730\tSupport daily and hourly battery chartview.\nag/19428426\tImprove X axis labels in battery chart (1)\nag/19446215\tImprove X axis labels in battery chart (2)\nag/19394745\tAdd the async task to compute diff usage data and load labels and icons.\nag/19447624\tSupport showing app usage list for two battery charts\nag/19500907\tUpdates battery usage messages from last 24hr to last full charge. (Part1: V2 files)\nag/19505324\tUpdate the selected period message in battery chart\nag/19500905\tUpdates battery usage messages from last 24hr to last full charge. (Part2: non-V2 files)\nag/19510363\tUpdate usage data for EBS app usage list and App usage detail from 24 hours to last full charge.\nag/19523184\tUpdate usage data for EBS app usage list and App usage detail from 24 hours to last full charge.\nag/19534864\tAdd margin between battery daily and hourly charts\nag/19491093\tAlways do interpolation for battery level data in daily chart.\nag/19565630\tAvoid NullPointerException when batteryLevelData is null.\nag/19561239\tFix b/241872474 Battery usage page will crash when selecting the last hour chart bar, going to app detail page, and going back\nag/19565633\tFix b/241885070: Unexpected texts moving when going back to battery usage page\nag/19534850\tNew way to draw battery chart axis labels\nag/19561240\tSwitch Battery Usage Chart from V1 to V2.\nag/19561338\tSwitch Battery Usage Chart from V1 to V2.\nag/19600174\tFix b/242254055 Battery usage initial screen improvements (long data loading time)\nag/19600284\tFix b/242252080: Add padding space on the top of the battery chart\nag/19647338\tConsider usage map valid even if [all][all] is null.\nag/19634227\tUse new content uri everytime to avoid cache\nag/19600177\tFix b/242009481: Refine the battery usage chart timestamp label rule\nag/19647337\tFix b/242809981 Charge battery to 100% when battery usage page opened, the chart will refresh, but the app list isn't refreshed in that case.\n\nTest: manual\nBug: 239491373\nBug: 236101166\nBug: 236101687\nFix: 236101166\nChange-Id: I7de8d9dcee14627da10752534991f1ec9f616020\nMerged-In: I9142c0d4e00dea3771777ba9aedeab07b635fa1a",
  "pr_url": null,
  "pr_info": "no more info",
  "file_name": "src/com/android/settings/fuelgauge/batteryusage/BatteryChartPreferenceController.java",
  "func_name": "getSlotInformation",
  "func_before": "private String getSlotInformation() {\n        if (mTrapezoidIndex < 0) {\n            return null;\n        }\n        final String fromHour = ConvertUtils.utcToLocalTimeHour(mPrefContext,\n                mBatteryHistoryKeys[mTrapezoidIndex * 2], mIs24HourFormat);\n        final String toHour = ConvertUtils.utcToLocalTimeHour(mPrefContext,\n                mBatteryHistoryKeys[(mTrapezoidIndex + 1) * 2], mIs24HourFormat);\n        return mIs24HourFormat\n                ? String.format(\"%s–%s\", fromHour, toHour)\n                : String.format(\"%s – %s\", fromHour, toHour);\n    }",
  "func_after": "@VisibleForTesting\n    String getSlotInformation() {\n        if (mDailyTimestampFullTexts == null || mDailyViewModel == null\n                || mHourlyViewModels == null) {\n            // No data\n            return null;\n        }\n        if (isAllSelected()) {\n            return null;\n        }\n\n        final String selectedDayText = mDailyTimestampFullTexts.get(mDailyChartIndex);\n        if (mHourlyChartIndex == BatteryChartViewModel.SELECTED_INDEX_ALL) {\n            return selectedDayText;\n        }\n\n        final String fromHourText = mHourlyViewModels.get(mDailyChartIndex).texts().get(\n                mHourlyChartIndex);\n        final String toHourText = mHourlyViewModels.get(mDailyChartIndex).texts().get(\n                mHourlyChartIndex + 1);\n        final String selectedHourText =\n                String.format(\"%s%s%s\", fromHourText, mIs24HourFormat ? \"-\" : \" - \", toHourText);\n        if (isBatteryLevelDataInOneDay()) {\n            return selectedHourText;\n        }\n\n        return String.format(\"%s %s\", selectedDayText, selectedHourText);\n    }",
  "diff_func": "--- func_before\n+++ func_after\n@@ -499 +505 @@\n private String getSlotInformation(boolean isApp, String slotInformation) {\n+        // TODO: Updates the right slot information from daily and hourly chart selection.\n // Null means we show all information without a specific time slot.\n if (slotInformation == null) {\n return isApp\n-                    ? mPrefContext.getString(R.string.battery_app_usage_for_past_24)\n-                    : mPrefContext.getString(R.string.battery_system_usage_for_past_24);\n+                    ? mPrefContext.getString(R.string.battery_app_usage)\n+                    : mPrefContext.getString(R.string.battery_system_usage);\n } else {\n return isApp\n ? mPrefContext.getString(R.string.battery_app_usage_for, slotInformation)",
  "diff_source": "api",
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "\n\n**Final Output:**\n\nAnalysis: The patch involves updating battery usage chart implementation, including UI text changes and functionality improvements. The code diff modifies strings related to battery usage messages without addressing security concerns.\n\nFinal Classification: Defect Remediation & Feature Upgrades\n\nConfidence Score: 0.9"
}