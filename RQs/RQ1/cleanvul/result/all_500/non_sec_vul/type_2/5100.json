{
  "id": 5100,
  "language": "Python",
  "commit_url": "https://github.com/frappe/frappe/commit/3dc5d2fcc7561dde181ba953009fe6e39d64e900",
  "commit_sha": "3dc5d2fcc7561dde181ba953009fe6e39d64e900",
  "commit_msg": "refactor: escape instead of sanitizing HTML (#22339) (#22340)\n\nTraceback if it contains HTML can be useful, better to escape and show\ninstead of modifying it.\n\n(cherry picked from commit 4a5e584ad0f9b93c321b44e9ab04ebb9e6b74b3f)\n\nCo-authored-by: Ankush Menat <ankush@frappe.io>",
  "pr_url": "https://github.com/juhiwue/frappe/pull/2",
  "pr_info": "no more info",
  "file_name": "frappe/app.py",
  "func_name": "handle_exception",
  "func_before": "def handle_exception(e):\n\tresponse = None\n\thttp_status_code = getattr(e, \"http_status_code\", 500)\n\treturn_as_message = False\n\taccept_header = frappe.get_request_header(\"Accept\") or \"\"\n\trespond_as_json = (\n\t\tfrappe.get_request_header(\"Accept\")\n\t\tand (frappe.local.is_ajax or \"application/json\" in accept_header)\n\t\tor (frappe.local.request.path.startswith(\"/api/\") and not accept_header.startswith(\"text\"))\n\t)\n\n\tif respond_as_json:\n\t\t# handle ajax responses first\n\t\t# if the request is ajax, send back the trace or error message\n\t\tresponse = frappe.utils.response.report_error(http_status_code)\n\n\telif (\n\t\thttp_status_code == 500\n\t\tand (frappe.db and isinstance(e, frappe.db.InternalError))\n\t\tand (frappe.db and (frappe.db.is_deadlocked(e) or frappe.db.is_timedout(e)))\n\t):\n\t\thttp_status_code = 508\n\n\telif http_status_code == 401:\n\t\tfrappe.respond_as_web_page(\n\t\t\t_(\"Session Expired\"),\n\t\t\t_(\"Your session has expired, please login again to continue.\"),\n\t\t\thttp_status_code=http_status_code,\n\t\t\tindicator_color=\"red\",\n\t\t)\n\t\treturn_as_message = True\n\n\telif http_status_code == 403:\n\t\tfrappe.respond_as_web_page(\n\t\t\t_(\"Not Permitted\"),\n\t\t\t_(\"You do not have enough permissions to complete the action\"),\n\t\t\thttp_status_code=http_status_code,\n\t\t\tindicator_color=\"red\",\n\t\t)\n\t\treturn_as_message = True\n\n\telif http_status_code == 404:\n\t\tfrappe.respond_as_web_page(\n\t\t\t_(\"Not Found\"),\n\t\t\t_(\"The resource you are looking for is not available\"),\n\t\t\thttp_status_code=http_status_code,\n\t\t\tindicator_color=\"red\",\n\t\t)\n\t\treturn_as_message = True\n\n\telif http_status_code == 429:\n\t\tresponse = frappe.rate_limiter.respond()\n\n\telse:\n\t\ttraceback = \"<pre>\" + sanitize_html(frappe.get_traceback()) + \"</pre>\"\n\t\t# disable traceback in production if flag is set\n\t\tif frappe.local.flags.disable_traceback and not frappe.local.dev_server:\n\t\t\ttraceback = \"\"\n\n\t\tfrappe.respond_as_web_page(\n\t\t\t\"Server Error\", traceback, http_status_code=http_status_code, indicator_color=\"red\", width=640\n\t\t)\n\t\treturn_as_message = True\n\n\tif e.__class__ == frappe.AuthenticationError:\n\t\tif hasattr(frappe.local, \"login_manager\"):\n\t\t\tfrappe.local.login_manager.clear_cookies()\n\n\tif http_status_code >= 500:\n\t\tmake_error_snapshot(e)\n\n\tif return_as_message:\n\t\tresponse = frappe.website.render.render(\"message\", http_status_code=http_status_code)\n\n\tif frappe.conf.get(\"developer_mode\") and not respond_as_json:\n\t\t# don't fail silently for non-json response errors\n\t\tprint(frappe.get_traceback())\n\n\treturn response",
  "func_after": "def handle_exception(e):\n\tresponse = None\n\thttp_status_code = getattr(e, \"http_status_code\", 500)\n\treturn_as_message = False\n\taccept_header = frappe.get_request_header(\"Accept\") or \"\"\n\trespond_as_json = (\n\t\tfrappe.get_request_header(\"Accept\")\n\t\tand (frappe.local.is_ajax or \"application/json\" in accept_header)\n\t\tor (frappe.local.request.path.startswith(\"/api/\") and not accept_header.startswith(\"text\"))\n\t)\n\n\tif respond_as_json:\n\t\t# handle ajax responses first\n\t\t# if the request is ajax, send back the trace or error message\n\t\tresponse = frappe.utils.response.report_error(http_status_code)\n\n\telif (\n\t\thttp_status_code == 500\n\t\tand (frappe.db and isinstance(e, frappe.db.InternalError))\n\t\tand (frappe.db and (frappe.db.is_deadlocked(e) or frappe.db.is_timedout(e)))\n\t):\n\t\thttp_status_code = 508\n\n\telif http_status_code == 401:\n\t\tfrappe.respond_as_web_page(\n\t\t\t_(\"Session Expired\"),\n\t\t\t_(\"Your session has expired, please login again to continue.\"),\n\t\t\thttp_status_code=http_status_code,\n\t\t\tindicator_color=\"red\",\n\t\t)\n\t\treturn_as_message = True\n\n\telif http_status_code == 403:\n\t\tfrappe.respond_as_web_page(\n\t\t\t_(\"Not Permitted\"),\n\t\t\t_(\"You do not have enough permissions to complete the action\"),\n\t\t\thttp_status_code=http_status_code,\n\t\t\tindicator_color=\"red\",\n\t\t)\n\t\treturn_as_message = True\n\n\telif http_status_code == 404:\n\t\tfrappe.respond_as_web_page(\n\t\t\t_(\"Not Found\"),\n\t\t\t_(\"The resource you are looking for is not available\"),\n\t\t\thttp_status_code=http_status_code,\n\t\t\tindicator_color=\"red\",\n\t\t)\n\t\treturn_as_message = True\n\n\telif http_status_code == 429:\n\t\tresponse = frappe.rate_limiter.respond()\n\n\telse:\n\t\ttraceback = \"<pre>\" + escape_html(frappe.get_traceback()) + \"</pre>\"\n\t\t# disable traceback in production if flag is set\n\t\tif frappe.local.flags.disable_traceback and not frappe.local.dev_server:\n\t\t\ttraceback = \"\"\n\n\t\tfrappe.respond_as_web_page(\n\t\t\t\"Server Error\", traceback, http_status_code=http_status_code, indicator_color=\"red\", width=640\n\t\t)\n\t\treturn_as_message = True\n\n\tif e.__class__ == frappe.AuthenticationError:\n\t\tif hasattr(frappe.local, \"login_manager\"):\n\t\t\tfrappe.local.login_manager.clear_cookies()\n\n\tif http_status_code >= 500:\n\t\tmake_error_snapshot(e)\n\n\tif return_as_message:\n\t\tresponse = frappe.website.render.render(\"message\", http_status_code=http_status_code)\n\n\tif frappe.conf.get(\"developer_mode\") and not respond_as_json:\n\t\t# don't fail silently for non-json response errors\n\t\tprint(frappe.get_traceback())\n\n\treturn response",
  "diff_func": "--- func_before\n+++ func_after\n def handle_exception(e):\n \tresponse = None\n \thttp_status_code = getattr(e, \"http_status_code\", 500)\n \treturn_as_message = False\n \taccept_header = frappe.get_request_header(\"Accept\") or \"\"\n \trespond_as_json = (\n \t\tfrappe.get_request_header(\"Accept\")\n \t\tand (frappe.local.is_ajax or \"application/json\" in accept_header)\n \t\tor (frappe.local.request.path.startswith(\"/api/\") and not accept_header.startswith(\"text\"))\n \t)\n \n \tif respond_as_json:\n \t\t# handle ajax responses first\n \t\t# if the request is ajax, send back the trace or error message\n \t\tresponse = frappe.utils.response.report_error(http_status_code)\n \n \telif (\n \t\thttp_status_code == 500\n \t\tand (frappe.db and isinstance(e, frappe.db.InternalError))\n \t\tand (frappe.db and (frappe.db.is_deadlocked(e) or frappe.db.is_timedout(e)))\n \t):\n \t\thttp_status_code = 508\n \n \telif http_status_code == 401:\n \t\tfrappe.respond_as_web_page(\n \t\t\t_(\"Session Expired\"),\n \t\t\t_(\"Your session has expired, please login again to continue.\"),\n \t\t\thttp_status_code=http_status_code,\n \t\t\tindicator_color=\"red\",\n \t\t)\n \t\treturn_as_message = True\n \n \telif http_status_code == 403:\n \t\tfrappe.respond_as_web_page(\n \t\t\t_(\"Not Permitted\"),\n \t\t\t_(\"You do not have enough permissions to complete the action\"),\n \t\t\thttp_status_code=http_status_code,\n \t\t\tindicator_color=\"red\",\n \t\t)\n \t\treturn_as_message = True\n \n \telif http_status_code == 404:\n \t\tfrappe.respond_as_web_page(\n \t\t\t_(\"Not Found\"),\n \t\t\t_(\"The resource you are looking for is not available\"),\n \t\t\thttp_status_code=http_status_code,\n \t\t\tindicator_color=\"red\",\n \t\t)\n \t\treturn_as_message = True\n \n \telif http_status_code == 429:\n \t\tresponse = frappe.rate_limiter.respond()\n \n \telse:\n-\t\ttraceback = \"<pre>\" + sanitize_html(frappe.get_traceback()) + \"</pre>\"\n+\t\ttraceback = \"<pre>\" + escape_html(frappe.get_traceback()) + \"</pre>\"\n \t\t# disable traceback in production if flag is set\n \t\tif frappe.local.flags.disable_traceback and not frappe.local.dev_server:\n \t\t\ttraceback = \"\"\n \n \t\tfrappe",
  "diff_source": "custom",
  "Bug Filter": "Supporting & Non-Core Improvements",
  "Bug Filter Confidence": 0.75,
  "Bug Filter Response": "**Final Output:**\n\n- **Final Classification:** Supporting & Non-Core Improvements\n- **Confidence:** 0.75\n\n**Step-by-Step Explanation:**\n\n1. **Commit Message Analysis:** The commit is a refactor, focusing on changing how HTML is handled in tracebacks by escaping instead of sanitizing. The intent is to improve tracebacks for better debugging.\n\n2. **Code Diff Analysis:** The change modifies the `handle_exception` function to use `escape_html` instead of `sanitize_html`, affecting how error tracebacks are displayed.\n\n3. **Vulnerability Description:** Lacks information, hence no direct link to a security issue.\n\n4. **Consistency Check:** The commit message and code changes are aligned, indicating a refactor rather than a security fix.\n\n5. **Purpose Evaluation:** The change improves error message processing rather than fixing a security vulnerability.\n\n6. **Security Assessment:** The change involves HTML handling but isn't explicitly fixing a security issue. The refactor could be part of a security measure but isn't stated as such.\n\n7. **Classification:** Falls under \"Supporting & Non-Core Improvements\" as it enhances an ancillary function without addressing core security or features.\n\n8. **Confidence Score:** 0.75 due to the refactor nature and lack of explicit security context, though escaping is related to security measures, it's speculative without confirmation.\n\n**Final Classification:** Supporting & Non-Core Improvements  \n**Confidence:** 0.75"
}