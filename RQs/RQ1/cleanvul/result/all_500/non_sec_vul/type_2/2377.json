{
  "id": 2377,
  "language": "Java",
  "commit_url": "https://github.com/omnirom/android_frameworks_base/commit/8bd8b278536c4f3a9eb9266a845e856d269b04c3",
  "commit_sha": "8bd8b278536c4f3a9eb9266a845e856d269b04c3",
  "commit_msg": "Fix IME crash on SoftInputWindow.show by TOKEN_PENDING\n\nOriginated from CL[1] to fix a crash edge case that happened when\ncalling InputMethodPrivilegedOperationsRegistry#put that assumes there\nis only one pair of window token and IInputMethodPrivilegedOperations\nin the container.\n\nHowever, InputMethodPrivilegedOperationsRegistry is a process-level\nsingleton instances that may run into a timing when there are 2\nInputMethodService (IMS) instances, one is just created and the other\nis in the way of destorying.\n\nBefore the destorying one calls\nInputMethodPrivilegedOperationsRegistry#remove, IMS#initializeInternal\ninvoked for the new one with the same window token, that makes system\nignored the initialization process because CL[1] introduced\nInputMethodPrivilegedOperationsRegistry#isRegistered(token) and system\nthoughts the token has been registered before, but actually this method\nis problemetic to aware this token registraction is for previous IMS.\n\nAs the result, IME will crash when SoftInputWindow.show because the\nwindowState is still under TOKEN_PENDING and lose the token attachment.\n\nTo fix this crash timing issue, making\nInputMethodPrivilegedOperationsRegistry be able to maintain more than\none pairs of IME token and IInputMethodPrivilegedOperations makes more\nsense and we can remove the ignore logic in initializeInternal to\nfix the token attachment issue.\n\n[1]: Ie6bfbae735724fe744590e715124d2737d2b665d\n\nFix: 202081442\nTest: atest CtsInputMethodTestCases\nTest: atest MultiDisplaySystemDecorationTests\n\nChange-Id: I21cec3f228520ed703cd8ad68ea0ef59c966ed9d",
  "pr_url": null,
  "pr_info": "no more info",
  "file_name": "core/java/android/inputmethodservice/InputMethodService.java",
  "func_name": "initializeInternal",
  "func_before": "@MainThread\n        @Override\n        public final void initializeInternal(@NonNull IBinder token,\n                IInputMethodPrivilegedOperations privilegedOperations, int configChanges) {\n            if (InputMethodPrivilegedOperationsRegistry.isRegistered(token)) {\n                Log.w(TAG, \"The token has already registered, ignore this initialization.\");\n                return;\n            }\n            Trace.traceBegin(TRACE_TAG_WINDOW_MANAGER, \"IMS.initializeInternal\");\n            mConfigTracker.onInitialize(configChanges);\n            mPrivOps.set(privilegedOperations);\n            InputMethodPrivilegedOperationsRegistry.put(token, mPrivOps);\n            attachToken(token);\n            Trace.traceEnd(TRACE_TAG_WINDOW_MANAGER);\n        }",
  "func_after": "@MainThread\n        @Override\n        public final void initializeInternal(@NonNull IBinder token,\n                IInputMethodPrivilegedOperations privilegedOperations, int configChanges) {\n            Trace.traceBegin(TRACE_TAG_WINDOW_MANAGER, \"IMS.initializeInternal\");\n            mConfigTracker.onInitialize(configChanges);\n            mPrivOps.set(privilegedOperations);\n            InputMethodPrivilegedOperationsRegistry.put(token, mPrivOps);\n            attachToken(token);\n            Trace.traceEnd(TRACE_TAG_WINDOW_MANAGER);\n        }",
  "diff_func": "--- func_before\n+++ func_after\n @MainThread\n         @Override\n         public final void initializeInternal(@NonNull IBinder token,\n                 IInputMethodPrivilegedOperations privilegedOperations, int configChanges) {\n-            if (InputMethodPrivilegedOperationsRegistry.isRegistered(token)) {\n-                Log.w(TAG, \"The token has already registered, ignore this initialization.\");\n-                return;\n-            }\n             Trace.traceBegin(TRACE_TAG_WINDOW_MANAGER, \"IMS.initializeInternal\");\n             mConfigTracker.onInitialize(configChanges);\n             mPrivOps.set(privilegedOperations);\n             InputMethodPrivilegedOperationsRegistry.put(token, mPrivOps);\n             attachToken(token);\n             Trace.traceEnd(TRACE_TAG_WINDOW_MANAGER);\n         }",
  "diff_source": "custom",
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "\n\nThe patch addresses a crash caused by improper token handling in the Input Method Editor. It modifies the initialization process to allow multiple token-operation pairs, ensuring proper token attachment and preventing crashes. The fix resolves a functional defect without security implications.\n\n**Final Classification:** Defect Remediation & Feature Upgrades  \n**Confidence Score:** 0.95"
}