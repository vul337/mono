{
  "id": 3040,
  "language": "Java",
  "commit_url": "https://github.com/apache/fineract/commit/a80f589ad4ad91a7b1c8abbd864e6a5129e8e2cf",
  "commit_sha": "a80f589ad4ad91a7b1c8abbd864e6a5129e8e2cf",
  "commit_msg": "fineract-1646 and fineract-1638 combined fix (#2457)\n\nauthored-by: Dhaval Maniyar <dhavalmaniyar@Dhavals-MacBook-Pro.local>",
  "pr_url": "https://github.com/apache/fineract/pull/2457",
  "pr_info": "## Description\r\n\r\nDescribe the changes made and why they were made.\r\n\r\n[Fineract-1646](https://issues.apache.org/jira/browse/FINERACT-1638).\r\n\r\n\r\n## Checklist\r\n\r\nPlease make sure these boxes are checked before submitting your pull request - thanks!\r\n\r\n- [x] Write the commit message as per https://github.com/apache/fineract/#pull-requests\r\n\r\n- [x] Acknowledge that we will not review PRs that are not passing the build _(\"green\")_ - it is your responsibility to get a proposed PR to pass the build, not primarily the project's maintainers.\r\n\r\n- [x] Create/update unit or integration tests for verifying the changes made.\r\n\r\n- [x] Follow coding conventions at https://cwiki.apache.org/confluence/display/FINERACT/Coding+Conventions.\r\n\r\n- [ ] Add required Swagger annotation and update API documentation at fineract-provider/src/main/resources/static/legacy-docs/apiLive.htm with details of any API changes\r\n\r\n- [x] Submission is not a \"code dump\".  (Large changes can be made \"in repository\" via a branch.  Ask on the developer mailing list for guidance, if required.)\r\n\r\nFYI our guidelines for code reviews are at https://cwiki.apache.org/confluence/display/FINERACT/Code+Review+Guide.\r\n",
  "file_name": "fineract-provider/src/main/java/org/apache/fineract/portfolio/savings/service/SavingsAccountReadPlatformServiceImpl.java",
  "func_name": "retrieveSavingsIdsPendingDormant",
  "func_before": "@Override\n    public List<Long> retrieveSavingsIdsPendingDormant(LocalDate tenantLocalDate) {\n        List<Long> ret = null;\n        StringBuilder sql = new StringBuilder(\"select sa.id \");\n        sql.append(\" from m_savings_account as sa \");\n        sql.append(\" inner join m_savings_product as sp on (sa.product_id = sp.id and sp.is_dormancy_tracking_active = true) \");\n        sql.append(\" where sa.status_enum = 300 \");\n        sql.append(\" and sa.sub_status_enum = 100 \");\n        sql.append(\" and \" + sqlGenerator.dateDiff(\"?\",\n                \"(select COALESCE(max(sat.transaction_date),sa.activatedon_date) from m_savings_account_transaction as sat where sat.is_reversed = false and sat.transaction_type_enum in (1,2) and sat.savings_account_id = sa.id)\")\n                + \" \");\n        sql.append(\" >= sp.days_to_dormancy \");\n\n        try {\n            ret = this.jdbcTemplate.queryForList(sql.toString(), new Object[] { tenantLocalDate }, Long.class);\n        } catch (EmptyResultDataAccessException e) {\n            // ignore empty result scenario\n        } catch (DataAccessException e) {\n            throw e;\n        }\n\n        return ret;\n    }",
  "func_after": "@Override\n    public List<Long> retrieveSavingsIdsPendingDormant(LocalDate tenantLocalDate) {\n        List<Long> ret = null;\n        StringBuilder sql = new StringBuilder(\"select sa.id \");\n        sql.append(\" from m_savings_account as sa \");\n        sql.append(\" inner join m_savings_product as sp on (sa.product_id = sp.id and sp.is_dormancy_tracking_active = true) \");\n        sql.append(\" where sa.status_enum = 300 \");\n        sql.append(\" and sa.sub_status_enum = 100 \");\n        sql.append(\" and \" + sqlGenerator.dateDiff(\"?\",\n                \"(select COALESCE(max(sat.transaction_date),sa.activatedon_date) from m_savings_account_transaction as sat where sat.is_reversed = false and sat.is_reversal = false and sat.transaction_type_enum in (1,2) and sat.savings_account_id = sa.id)\")\n                + \" \");\n        sql.append(\" >= sp.days_to_dormancy \");\n\n        try {\n            ret = this.jdbcTemplate.queryForList(sql.toString(), new Object[] { tenantLocalDate }, Long.class);\n        } catch (EmptyResultDataAccessException e) {\n            // ignore empty result scenario\n        } catch (DataAccessException e) {\n            throw e;\n        }\n\n        return ret;\n    }",
  "diff_func": "--- func_before\n+++ func_after\n @Override\n     public List<Long> retrieveSavingsIdsPendingDormant(LocalDate tenantLocalDate) {\n         List<Long> ret = null;\n         StringBuilder sql = new StringBuilder(\"select sa.id \");\n         sql.append(\" from m_savings_account as sa \");\n         sql.append(\" inner join m_savings_product as sp on (sa.product_id = sp.id and sp.is_dormancy_tracking_active = true) \");\n         sql.append(\" where sa.status_enum = 300 \");\n         sql.append(\" and sa.sub_status_enum = 100 \");\n         sql.append(\" and \" + sqlGenerator.dateDiff(\"?\",\n-                \"(select COALESCE(max(sat.transaction_date),sa.activatedon_date) from m_savings_account_transaction as sat where sat.is_reversed = false and sat.transaction_type_enum in (1,2) and sat.savings_account_id = sa.id)\")\n+                \"(select COALESCE(max(sat.transaction_date),sa.activatedon_date) from m_savings_account_transaction as sat where sat.is_reversed = false and sat.is_reversal = false and sat.transaction_type_enum in (1,2) and sat.savings_account_id = sa.id)\")\n                 + \" \");\n         sql.append(\" >= sp.days_to_dormancy \");\n \n         try {\n             ret = this.jdbcTemplate.queryForList(sql.toString(), new Object[] { tenantLocalDate }, Long.class);\n         } catch (EmptyResultDataAccessException e) {\n             // ignore empty result scenario\n         } catch (DataAccessException e) {\n             throw e;\n         }\n \n         return ret;\n     }",
  "diff_source": "custom",
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.85,
  "Bug Filter Response": "\n\n**Final Output:**\n\nAnalysis: The patch modifies a SQL query to include an additional condition, `sat.is_reversal = false`, ensuring that only non-reversed and non-reversal transactions are considered. This corrects the logic for determining savings account dormancy, which is a functional bug fix without security implications.\n\nFinal Classification: Defect Remediation & Feature Upgrades\n\nConfidence Score: 0.85"
}