{
  "id": 7705,
  "language": "JavaScript",
  "commit_url": "https://github.com/ericcornelissen/shescape/commit/6f72afae9c7dc00ae495c962959e2ffb82747167",
  "commit_sha": "6f72afae9c7dc00ae495c962959e2ffb82747167",
  "commit_msg": "fix: potentially quadratic runtime regexps for Bash escaping\n\nFix the warning by 'eslint-plugin-regexp' [1] about a potentially\nexploitable quadratic runtime regular expression in the source code\n(line 55):\n\n> Any attack string /\\{+/ plus some rejecting suffix will cause\n> quadratic runtime because of this quantifier\n\nand (line 56):\n\n>  Any attack string /:+/ plus some rejecting suffix will cause\n>  quadratic runtime because of this quantifier\n\nby simplifying the regular expressions. As a result, the respective\ncharacters will be escaped in cases where it's not necessary. This is\nnot a problem because the string received by the program will still be\ncorrect. This is beneficial as it avoids the quadratic runtime.\n\nThe only affected regular expression in the package code is for escaping\nfor bash with the `interpolation` option set to `true`.\n\nThe test fixtures for Bash were updated accordingly and improved upon\nwith new test cases for previously untested strings that should be\nescaped that were identified while trying to adjust the corresponding\nregular expressions to avoid quadratic runtime.\n\nSimilarly, a new entry was added to the fuzz corpus that was found after\nthe regular expression on line 55 was changed.\n\n--\n1. https://github.com/ota-meshi/eslint-plugin-regexp",
  "pr_url": "https://github.com/ericcornelissen/shescape/pull/373",
  "pr_info": "no more info",
  "file_name": "src/unix.js",
  "func_name": "escapeArgBash",
  "func_before": "function escapeArgBash(arg, interpolation, quoted) {\n  let result = arg.replace(/\\0/gu, \"\");\n\n  if (interpolation) {\n    result = result\n      .replace(/\\\\/gu, \"\\\\\\\\\")\n      .replace(/\\n/gu, \" \")\n      .replace(/(^|\\s)(~|#)/gu, \"$1\\\\$2\")\n      .replace(/(\\*|\\?)/gu, \"\\\\$1\")\n      .replace(/([$&;|])/gu, \"\\\\$1\")\n      .replace(/([()<>])/gu, \"\\\\$1\")\n      .replace(/([\"'`])/gu, \"\\\\$1\")\n      .replace(/\\{(?=([^,.]*(?:,|\\.)[^]*?)\\})/gu, \"\\\\{\")\n      .replace(/(?<==(?:[^]*?:)?)(~)(?=[\\s+\\-/0:=]|$)/gu, \"\\\\$1\");\n  } else if (quoted) {\n    result = result.replace(/'/gu, `'\\\\''`);\n  }\n\n  return result;\n}",
  "func_after": "function escapeArgBash(arg, interpolation, quoted) {\n  let result = arg.replace(/\\0/gu, \"\");\n\n  if (interpolation) {\n    result = result\n      .replace(/\\\\/gu, \"\\\\\\\\\")\n      .replace(/\\n/gu, \" \")\n      .replace(/(^|\\s)(~|#)/gu, \"$1\\\\$2\")\n      .replace(/(\\*|\\?)/gu, \"\\\\$1\")\n      .replace(/([$&;|])/gu, \"\\\\$1\")\n      .replace(/([()<>])/gu, \"\\\\$1\")\n      .replace(/([\"'`])/gu, \"\\\\$1\")\n      .replace(/\\{/gu, \"\\\\{\")\n      .replace(/(?<=[:=])(~)(?=[\\s+\\-/0:=]|$)/gu, \"\\\\$1\");\n  } else if (quoted) {\n    result = result.replace(/'/gu, `'\\\\''`);\n  }\n\n  return result;\n}",
  "diff_func": "--- func_before\n+++ func_after\n function escapeArgBash(arg, interpolation, quoted) {\n   let result = arg.replace(/\\0/gu, \"\");\n \n   if (interpolation) {\n     result = result\n       .replace(/\\\\/gu, \"\\\\\\\\\")\n       .replace(/\\n/gu, \" \")\n       .replace(/(^|\\s)(~|#)/gu, \"$1\\\\$2\")\n       .replace(/(\\*|\\?)/gu, \"\\\\$1\")\n       .replace(/([$&;|])/gu, \"\\\\$1\")\n       .replace(/([()<>])/gu, \"\\\\$1\")\n       .replace(/([\"'`])/gu, \"\\\\$1\")\n-      .replace(/\\{(?=([^,.]*(?:,|\\.)[^]*?)\\})/gu, \"\\\\{\")\n+      .replace(/\\{/gu, \"\\\\{\")\n-      .replace(/(?<==(?:[^]*?:)?)(~)(?=[\\s+\\-/0:=]|$)/gu, \"\\\\$1\");\n+      .replace(/(?<=[:=])(~)(?=[\\s+\\-/0:=]|$)/gu, \"\\\\$1\");\n   } else if (quoted) {\n     result = result.replace(/'/gu, `'\\\\''`);\n   }\n \n   return result;\n }",
  "diff_source": "custom",
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "\n\nFinal Output:\nAnalysis: The patch addresses a performance issue in regular expressions, improving runtime without fixing a security vulnerability. The changes simplify regex to prevent quadratic runtime, enhancing efficiency but not security.\n\nFinal Classification: Defect Remediation & Feature Upgrades\nConfidence Score: 0.9"
}