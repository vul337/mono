{
  "id": 4399,
  "language": "C/C++",
  "commit_url": "https://github.com/OISF/suricata/commit/735f5aa9ca3b28cfacc7a443f93a44387fbacf17",
  "commit_sha": "735f5aa9ca3b28cfacc7a443f93a44387fbacf17",
  "commit_msg": "datasets: flag to disable \"write\" actions\n\nAdd a new configuration flag, \"datasets.rules.allow-write\" to control\nif rules can contain \"save\" or \"state\" rules which allow write access\nto the file system.\n\nTicket: #6123",
  "pr_url": null,
  "pr_info": "no more info",
  "file_name": "src/detect-dataset.c",
  "func_name": "SetupSavePath",
  "func_before": "static int SetupSavePath(const DetectEngineCtx *de_ctx,\n        char *save, size_t save_size)\n{\n    SCLogDebug(\"save %s\", save);\n\n    int allow_absolute = 0;\n    (void)ConfGetBool(\"datasets.rules.allow-absolute-filenames\", &allow_absolute);\n    if (allow_absolute) {\n        SCLogNotice(\"Allowing absolute filename for dataset rule: %s\", save);\n    } else {\n        if (PathIsAbsolute(save)) {\n            SCLogError(SC_ERR_INVALID_ARGUMENT, \"Absolute paths not allowed: %s\", save);\n            return -1;\n        }\n\n        if (SCPathContainsTraversal(save)) {\n            SCLogError(SC_ERR_INVALID_ARGUMENT, \"Directory traversals not allowed: %s\", save);\n            return -1;\n        }\n    }\n\n    // data dir\n    const char *dir = ConfigGetDataDirectory();\n    BUG_ON(dir == NULL); // should not be able to fail\n    char path[PATH_MAX];\n    if (snprintf(path, sizeof(path), \"%s/%s\", dir, save) >= (int)sizeof(path)) // TODO windows path\n        return -1;\n\n    /* TODO check if location exists and is writable */\n\n    strlcpy(save, path, save_size);\n\n    return 0;\n}",
  "func_after": "static int SetupSavePath(const DetectEngineCtx *de_ctx,\n        char *save, size_t save_size)\n{\n    SCLogDebug(\"save %s\", save);\n\n    int allow_save = 1;\n    if (ConfGetBool(\"datasets.rules.allow-write\", &allow_save)) {\n        if (!allow_save) {\n            SCLogError(SC_ERR_INVALID_SIGNATURE,\n                    \"Rules containing save/state datasets have been disabled\");\n            return -1;\n        }\n    }\n\n    int allow_absolute = 0;\n    (void)ConfGetBool(\"datasets.rules.allow-absolute-filenames\", &allow_absolute);\n    if (allow_absolute) {\n        SCLogNotice(\"Allowing absolute filename for dataset rule: %s\", save);\n    } else {\n        if (PathIsAbsolute(save)) {\n            SCLogError(SC_ERR_INVALID_ARGUMENT, \"Absolute paths not allowed: %s\", save);\n            return -1;\n        }\n\n        if (SCPathContainsTraversal(save)) {\n            SCLogError(SC_ERR_INVALID_ARGUMENT, \"Directory traversals not allowed: %s\", save);\n            return -1;\n        }\n    }\n\n    // data dir\n    const char *dir = ConfigGetDataDirectory();\n    BUG_ON(dir == NULL); // should not be able to fail\n    char path[PATH_MAX];\n    if (snprintf(path, sizeof(path), \"%s/%s\", dir, save) >= (int)sizeof(path)) // TODO windows path\n        return -1;\n\n    /* TODO check if location exists and is writable */\n\n    strlcpy(save, path, save_size);\n\n    return 0;\n}",
  "diff_func": "--- func_before\n+++ func_after\n static int SetupSavePath(const DetectEngineCtx *de_ctx,\n         char *save, size_t save_size)\n {\n     SCLogDebug(\"save %s\", save);\n+\n+    int allow_save = 1;\n+    if (ConfGetBool(\"datasets.rules.allow-write\", &allow_save)) {\n+        if (!allow_save) {\n+            SCLogError(SC_ERR_INVALID_SIGNATURE,\n+                    \"Rules containing save/state datasets have been disabled\");\n+            return -1;\n+        }\n+    }\n \n     int allow_absolute = 0;\n     (void)ConfGetBool(\"datasets.rules.allow-absolute-filenames\", &allow_absolute);\n     if (allow_absolute) {\n         SCLogNotice(\"Allowing absolute filename for dataset rule: %s\", save);\n     } else {\n         if (PathIsAbsolute(save)) {\n             SCLogError(SC_ERR_INVALID_ARGUMENT, \"Absolute paths not allowed: %s\", save);\n             return -1;\n         }\n \n         if (SCPathContainsTraversal(save)) {\n             SCLogError(SC_ERR_INVALID_ARGUMENT, \"Directory traversals not allowed: %s\", save);\n             return -1;\n         }\n     }\n \n     // data dir\n     const char *dir = ConfigGetDataDirectory();\n     BUG_ON(dir == NULL); // should not be able to fail\n     char path[PATH_MAX];\n     if (snprintf(path, sizeof(path), \"%s/%s\", dir, save) >= (int)sizeof(path)) // TODO windows path\n         return -1;\n \n     /* TODO check if location exists and is writable */\n \n     strlcpy(save, path, save_size);\n \n     return 0;\n }",
  "diff_source": "custom",
  "Bug Filter": "Supporting & Non-Core Improvements",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "**Step1: Input Analysis**\n- **Commit Message:** Adds a configuration flag to control write access in dataset rules.\n- **Code Diff:** Introduces a check for the `allow-write` flag, preventing save operations if disabled.\n- **Vulnerability Description:** Lacks specific info, implying no known exploit.\n\n**Step2: Consistency Check**\n- **Alignment:** Commit message accurately reflects the code change, introducing the flag without discrepancies.\n\n**Step3: Purpose Evaluation**\n- **Core Logic:** Modifies core logic by introducing a control mechanism for write operations, but isn't a bug fix or feature enhancement.\n\n**Step4: Security Vulnerability Assessment**\n- **Security Implications:** No explicit vulnerability addressed; the change is a configuration control, not a security fix.\n\n**Step5: Non-Security Classification**\n- **Category:** Supporting & Non-Core Improvements, as it's a configuration enhancement without affecting core functionality.\n\n**Step6: Confidence Scoring**\n- **Confidence:** High due to clear alignment between commit and code, though ambiguity exists regarding security implications.\n\n**Final Classification:** Supporting & Non-Core Improvements; **Confidence:** 0.95"
}