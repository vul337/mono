{
  "cve_id": "CVE-2021-37620",
  "cwe_ids": [
    "CWE-125"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "Exiv2/exiv2",
  "commit_msg": "Safer std::vector indexing.",
  "commit_hash": "76e313745e813f80e8910aceb2210af3ad8cf897",
  "git_url": "https://github.com/Exiv2/exiv2/commit/76e313745e813f80e8910aceb2210af3ad8cf897",
  "file_path": "src/value.cpp",
  "func_name": "LangAltValue::read",
  "func_before": "int LangAltValue::read(const std::string& buf)\n    {        \n        std::string b = buf;\n        std::string lang = \"x-default\";\n        if (buf.length() > 5 && buf.substr(0, 5) == \"lang=\") {\n            static const char* ALPHA = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\n            static const char* ALPHA_NUM = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n            \n            std::string::size_type pos = buf.find_first_of(' ');\n            lang = buf.substr(5, pos-5);\n            // Strip quotes (so you can also specify the language without quotes)\n            if (lang[0] == '\"') {\n                lang = lang.substr(1);\n\n                if (lang == \"\" || lang.find('\"') != lang.length()-1)\n                    throw Error(kerInvalidLangAltValue, buf);\n            \n                lang = lang.substr(0, lang.length()-1);\n            }\n            \n            if (lang == \"\") throw Error(kerInvalidLangAltValue, buf);\n\n            // Check language is in the correct format (see https://www.ietf.org/rfc/rfc3066.txt)\n            std::string::size_type charPos = lang.find_first_not_of(ALPHA);\n            if (charPos != std::string::npos) {\n                if (lang[charPos] != '-' || lang.find_first_not_of(ALPHA_NUM, charPos+1) != std::string::npos)\n                    throw Error(kerInvalidLangAltValue, buf);\n            }\n            \n            b.clear();\n            if (pos != std::string::npos) b = buf.substr(pos+1);\n        }\n\n        value_[lang] = b;\n        return 0;\n    }",
  "abstract_func_before": "int LangAltValue::read(const std::string& VAR_0)\n    {        \n        std::string VAR_1 = VAR_0;\n        std::string VAR_2 = \"x-default\";\n        if (VAR_0.length() > 5 && VAR_0.substr(0, 5) == \"lang=\") {\n            static const char* VAR_3 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\n            static const char* VAR_4 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n            \n            std::string::size_type VAR_5 = VAR_0.find_first_of(' ');\n            VAR_2 = VAR_0.substr(5, VAR_5-5);\n            /* COMMENT_0 */\n            if (VAR_2[0] == '\"') {\n                VAR_2 = VAR_2.substr(1);\n\n                if (VAR_2 == \"\" || VAR_2.find('\"') != VAR_2.length()-1)\n                    throw Error(VAR_6, VAR_0);\n            \n                VAR_2 = VAR_2.substr(0, VAR_2.length()-1);\n            }\n            \n            if (VAR_2 == \"\") throw Error(VAR_6, VAR_0);\n\n            /* COMMENT_1 */\n            std::string::size_type VAR_7 = VAR_2.find_first_not_of(VAR_3);\n            if (VAR_7 != std::string::npos) {\n                if (VAR_2[VAR_7] != '-' || VAR_2.find_first_not_of(VAR_4, VAR_7+1) != std::string::npos)\n                    throw Error(VAR_6, VAR_0);\n            }\n            \n            VAR_1.clear();\n            if (VAR_5 != std::string::npos) VAR_1 = VAR_0.substr(VAR_5+1);\n        }\n\n        VAR_8[VAR_2] = VAR_1;\n        return 0;\n    }",
  "func_graph_path_before": "Exiv2/exiv2/76e313745e813f80e8910aceb2210af3ad8cf897/value.cpp/vul/before/0.json",
  "func": "int LangAltValue::read(const std::string& buf)\n    {        \n        std::string b = buf;\n        std::string lang = \"x-default\";\n        if (buf.length() > 5 && buf.substr(0, 5) == \"lang=\") {\n            static const char* ALPHA = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\n            static const char* ALPHA_NUM = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n            \n            std::string::size_type pos = buf.find_first_of(' ');\n            lang = buf.substr(5, pos-5);\n            if (lang.empty()) throw Error(kerInvalidLangAltValue, buf);\n            // Strip quotes (so you can also specify the language without quotes)\n            if (lang[0] == '\"') {\n                lang = lang.substr(1);\n\n                if (lang == \"\" || lang.find('\"') != lang.length()-1)\n                    throw Error(kerInvalidLangAltValue, buf);\n            \n                lang = lang.substr(0, lang.length()-1);\n            }\n            \n            if (lang.empty()) throw Error(kerInvalidLangAltValue, buf);\n\n            // Check language is in the correct format (see https://www.ietf.org/rfc/rfc3066.txt)\n            std::string::size_type charPos = lang.find_first_not_of(ALPHA);\n            if (charPos != std::string::npos) {\n                if (lang.at(charPos) != '-' || lang.find_first_not_of(ALPHA_NUM, charPos+1) != std::string::npos)\n                    throw Error(kerInvalidLangAltValue, buf);\n            }\n            \n            b.clear();\n            if (pos != std::string::npos) b = buf.substr(pos+1);\n        }\n\n        value_[lang] = b;\n        return 0;\n    }",
  "abstract_func": "int LangAltValue::read(const std::string& VAR_0)\n    {        \n        std::string VAR_1 = VAR_0;\n        std::string VAR_2 = \"x-default\";\n        if (VAR_0.length() > 5 && VAR_0.substr(0, 5) == \"lang=\") {\n            static const char* VAR_3 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\n            static const char* VAR_4 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n            \n            std::string::size_type VAR_5 = VAR_0.find_first_of(' ');\n            VAR_2 = VAR_0.substr(5, VAR_5-5);\n            if (VAR_2.empty()) throw Error(VAR_6, VAR_0);\n            /* COMMENT_0 */\n            if (VAR_2[0] == '\"') {\n                VAR_2 = VAR_2.substr(1);\n\n                if (VAR_2 == \"\" || VAR_2.find('\"') != VAR_2.length()-1)\n                    throw Error(VAR_6, VAR_0);\n            \n                VAR_2 = VAR_2.substr(0, VAR_2.length()-1);\n            }\n            \n            if (VAR_2.empty()) throw Error(VAR_6, VAR_0);\n\n            /* COMMENT_1 */\n            std::string::size_type VAR_7 = VAR_2.find_first_not_of(VAR_3);\n            if (VAR_7 != std::string::npos) {\n                if (VAR_2.at(VAR_7) != '-' || VAR_2.find_first_not_of(VAR_4, VAR_7+1) != std::string::npos)\n                    throw Error(VAR_6, VAR_0);\n            }\n            \n            VAR_1.clear();\n            if (VAR_5 != std::string::npos) VAR_1 = VAR_0.substr(VAR_5+1);\n        }\n\n        VAR_8[VAR_2] = VAR_1;\n        return 0;\n    }",
  "func_graph_path": "Exiv2/exiv2/76e313745e813f80e8910aceb2210af3ad8cf897/value.cpp/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -8,6 +8,7 @@\n             \n             std::string::size_type pos = buf.find_first_of(' ');\n             lang = buf.substr(5, pos-5);\n+            if (lang.empty()) throw Error(kerInvalidLangAltValue, buf);\n             // Strip quotes (so you can also specify the language without quotes)\n             if (lang[0] == '\"') {\n                 lang = lang.substr(1);\n@@ -18,12 +19,12 @@\n                 lang = lang.substr(0, lang.length()-1);\n             }\n             \n-            if (lang == \"\") throw Error(kerInvalidLangAltValue, buf);\n+            if (lang.empty()) throw Error(kerInvalidLangAltValue, buf);\n \n             // Check language is in the correct format (see https://www.ietf.org/rfc/rfc3066.txt)\n             std::string::size_type charPos = lang.find_first_not_of(ALPHA);\n             if (charPos != std::string::npos) {\n-                if (lang[charPos] != '-' || lang.find_first_not_of(ALPHA_NUM, charPos+1) != std::string::npos)\n+                if (lang.at(charPos) != '-' || lang.find_first_not_of(ALPHA_NUM, charPos+1) != std::string::npos)\n                     throw Error(kerInvalidLangAltValue, buf);\n             }\n             ",
  "diff_line_info": {
    "deleted_lines": [
      "            if (lang == \"\") throw Error(kerInvalidLangAltValue, buf);",
      "                if (lang[charPos] != '-' || lang.find_first_not_of(ALPHA_NUM, charPos+1) != std::string::npos)"
    ],
    "added_lines": [
      "            if (lang.empty()) throw Error(kerInvalidLangAltValue, buf);",
      "            if (lang.empty()) throw Error(kerInvalidLangAltValue, buf);",
      "                if (lang.at(charPos) != '-' || lang.find_first_not_of(ALPHA_NUM, charPos+1) != std::string::npos)"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/sridharb1/exiv2/pull/4",
  "description": {
    "pr_info": {
      "title": "0.27 maintenance",
      "number": 4
    },
    "comment": []
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.85,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 0.85"
}