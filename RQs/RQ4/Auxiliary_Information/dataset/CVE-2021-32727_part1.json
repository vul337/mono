{
  "cve_id": "CVE-2021-32727",
  "cwe_ids": [
    "CWE-295"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:N/A:N",
  "cvss_is_v3": false,
  "repo_name": "nextcloud/android",
  "commit_msg": "check e2e keys\n\nSigned-off-by: tobiasKaminsky <tobias@kaminsky.me>",
  "commit_hash": "df2714ffaddf9be4b7babf23a078c984bf8388a3",
  "git_url": "https://github.com/nextcloud/android/commit/df2714ffaddf9be4b7babf23a078c984bf8388a3",
  "file_path": "src/main/java/com/owncloud/android/ui/dialog/SetupEncryptionDialogFragment.java",
  "func_name": "createDialog",
  "func_before": "@NonNull\n    private Dialog createDialog(View v) {\n        AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());\n        builder.setView(v).setPositiveButton(R.string.common_ok, null)\n                .setNeutralButton(R.string.common_cancel, null)\n                .setTitle(R.string.end_to_end_encryption_title);\n\n        Dialog dialog = builder.create();\n        dialog.setCanceledOnTouchOutside(false);\n\n        dialog.setOnShowListener(new DialogInterface.OnShowListener() {\n\n            @Override\n            public void onShow(final DialogInterface dialog) {\n\n                Button button = ((AlertDialog) dialog).getButton(AlertDialog.BUTTON_POSITIVE);\n                button.setOnClickListener(new View.OnClickListener() {\n\n                    @Override\n                    public void onClick(View view) {\n                        switch (keyResult) {\n                            case KEY_CREATED:\n                                Log_OC.d(TAG, \"New keys generated and stored.\");\n\n                                dialog.dismiss();\n\n                                Intent intentCreated = new Intent();\n                                intentCreated.putExtra(SUCCESS, true);\n                                intentCreated.putExtra(ARG_POSITION, getArguments().getInt(ARG_POSITION));\n                                getTargetFragment().onActivityResult(getTargetRequestCode(),\n                                        SETUP_ENCRYPTION_RESULT_CODE, intentCreated);\n                                break;\n\n                            case KEY_EXISTING_USED:\n                                Log_OC.d(TAG, \"Decrypt private key\");\n\n                                textView.setText(R.string.end_to_end_encryption_decrypting);\n\n                                try {\n                                    String privateKey = task.get();\n                                    String mnemonicUnchanged = passwordField.getText().toString();\n                                    String mnemonic = passwordField.getText().toString().replaceAll(\"\\\\s\", \"\")\n                                            .toLowerCase(Locale.ROOT);\n                                    String decryptedPrivateKey = EncryptionUtils.decryptPrivateKey(privateKey,\n                                            mnemonic);\n\n                                    arbitraryDataProvider.storeOrUpdateKeyValue(user.getAccountName(),\n                                            EncryptionUtils.PRIVATE_KEY, decryptedPrivateKey);\n\n                                    dialog.dismiss();\n                                    Log_OC.d(TAG, \"Private key successfully decrypted and stored\");\n\n                                    arbitraryDataProvider.storeOrUpdateKeyValue(user.getAccountName(), EncryptionUtils.MNEMONIC,\n                                            mnemonicUnchanged);\n\n                                    Intent intentExisting = new Intent();\n                                    intentExisting.putExtra(SUCCESS, true);\n                                    intentExisting.putExtra(ARG_POSITION, getArguments().getInt(ARG_POSITION));\n                                    getTargetFragment().onActivityResult(getTargetRequestCode(),\n                                            SETUP_ENCRYPTION_RESULT_CODE, intentExisting);\n\n                                } catch (Exception e) {\n                                    textView.setText(R.string.end_to_end_encryption_wrong_password);\n                                    Log_OC.d(TAG, \"Error while decrypting private key: \" + e.getMessage());\n                                }\n                                break;\n\n                            case KEY_GENERATE:\n                                passphraseTextView.setVisibility(View.GONE);\n                                positiveButton.setVisibility(View.GONE);\n                                neutralButton.setVisibility(View.GONE);\n                                getDialog().setTitle(R.string.end_to_end_encryption_storing_keys);\n\n                                GenerateNewKeysAsyncTask newKeysTask = new GenerateNewKeysAsyncTask();\n                                newKeysTask.execute();\n                                break;\n\n                            default:\n                                dialog.dismiss();\n                                break;\n                        }\n                    }\n                });\n            }\n        });\n        return dialog;\n    }",
  "abstract_func_before": "@NonNull\n    private Dialog createDialog(View VAR_0) {\n        AlertDialog.Builder VAR_1 = new AlertDialog.Builder(getActivity());\n        VAR_1.setView(VAR_0).setPositiveButton(VAR_2.string.common_ok, null)\n                .setNeutralButton(VAR_2.string.common_cancel, null)\n                .setTitle(VAR_2.string.end_to_end_encryption_title);\n\n        Dialog VAR_3 = VAR_1.create();\n        VAR_3.setCanceledOnTouchOutside(false);\n\n        VAR_3.setOnShowListener(new DialogInterface.OnShowListener() {\n\n            @Override\n            public void onShow(final DialogInterface VAR_3) {\n\n                Button VAR_4 = ((AlertDialog) VAR_3).getButton(VAR_5.BUTTON_POSITIVE);\n                VAR_4.setOnClickListener(new View.OnClickListener() {\n\n                    @Override\n                    public void onClick(View VAR_6) {\n                        switch (VAR_7) {\n                            case VAR_8:\n                                VAR_9.d(VAR_10, \"New keys generated and stored.\");\n\n                                VAR_3.dismiss();\n\n                                Intent VAR_11 = new Intent();\n                                VAR_11.putExtra(VAR_12, true);\n                                VAR_11.putExtra(VAR_13, getArguments().getInt(VAR_13));\n                                getTargetFragment().onActivityResult(getTargetRequestCode(),\n                                        VAR_14, VAR_11);\n                                break;\n\n                            case VAR_15:\n                                VAR_9.d(VAR_10, \"Decrypt private key\");\n\n                                VAR_16.setText(VAR_2.string.end_to_end_encryption_decrypting);\n\n                                try {\n                                    String VAR_17 = VAR_18.get();\n                                    String VAR_19 = VAR_20.getText().toString();\n                                    String VAR_21 = VAR_20.getText().toString().replaceAll(\"\\\\s\", \"\")\n                                            .toLowerCase(VAR_22.ROOT);\n                                    String VAR_23 = VAR_24.decryptPrivateKey(VAR_17,\n                                            VAR_21);\n\n                                    VAR_25.storeOrUpdateKeyValue(VAR_26.getAccountName(),\n                                            VAR_24.PRIVATE_KEY, VAR_23);\n\n                                    VAR_3.dismiss();\n                                    VAR_9.d(VAR_10, \"Private key successfully decrypted and stored\");\n\n                                    VAR_25.storeOrUpdateKeyValue(VAR_26.getAccountName(), VAR_24.MNEMONIC,\n                                            VAR_19);\n\n                                    Intent VAR_27 = new Intent();\n                                    VAR_27.putExtra(VAR_12, true);\n                                    VAR_27.putExtra(VAR_13, getArguments().getInt(VAR_13));\n                                    getTargetFragment().onActivityResult(getTargetRequestCode(),\n                                            VAR_14, VAR_27);\n\n                                } catch (Exception VAR_28) {\n                                    VAR_16.setText(VAR_2.string.end_to_end_encryption_wrong_password);\n                                    VAR_9.d(VAR_10, \"Error while decrypting private key: \" + VAR_28.getMessage());\n                                }\n                                break;\n\n                            case VAR_29:\n                                VAR_30.setVisibility(VAR_31.GONE);\n                                VAR_32.setVisibility(VAR_31.GONE);\n                                VAR_33.setVisibility(VAR_31.GONE);\n                                getDialog().setTitle(VAR_2.string.end_to_end_encryption_storing_keys);\n\n                                GenerateNewKeysAsyncTask VAR_34 = new GenerateNewKeysAsyncTask();\n                                VAR_34.execute();\n                                break;\n\n                            default:\n                                VAR_3.dismiss();\n                                break;\n                        }\n                    }\n                });\n            }\n        });\n        return VAR_3;\n    }",
  "func_graph_path_before": "nextcloud/android/df2714ffaddf9be4b7babf23a078c984bf8388a3/SetupEncryptionDialogFragment.java/vul/before/0.json",
  "func": "@NonNull\n    private Dialog createDialog(View v) {\n        AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());\n        builder.setView(v).setPositiveButton(R.string.common_ok, null)\n                .setNeutralButton(R.string.common_cancel, null)\n                .setTitle(R.string.end_to_end_encryption_title);\n\n        Dialog dialog = builder.create();\n        dialog.setCanceledOnTouchOutside(false);\n\n        dialog.setOnShowListener(new DialogInterface.OnShowListener() {\n\n            @Override\n            public void onShow(final DialogInterface dialog) {\n\n                Button button = ((AlertDialog) dialog).getButton(AlertDialog.BUTTON_POSITIVE);\n                button.setOnClickListener(new View.OnClickListener() {\n\n                    @Override\n                    public void onClick(View view) {\n                        switch (keyResult) {\n                            case KEY_CREATED:\n                                Log_OC.d(TAG, \"New keys generated and stored.\");\n\n                                dialog.dismiss();\n\n                                Intent intentCreated = new Intent();\n                                intentCreated.putExtra(SUCCESS, true);\n                                intentCreated.putExtra(ARG_POSITION, getArguments().getInt(ARG_POSITION));\n                                getTargetFragment().onActivityResult(getTargetRequestCode(),\n                                        SETUP_ENCRYPTION_RESULT_CODE, intentCreated);\n                                break;\n\n                            case KEY_EXISTING_USED:\n                                Log_OC.d(TAG, \"Decrypt private key\");\n\n                                textView.setText(R.string.end_to_end_encryption_decrypting);\n\n                                try {\n                                    String privateKey = task.get();\n                                    String mnemonicUnchanged = passwordField.getText().toString();\n                                    String mnemonic = passwordField.getText().toString().replaceAll(\"\\\\s\", \"\")\n                                        .toLowerCase(Locale.ROOT);\n                                    String decryptedPrivateKey = EncryptionUtils.decryptPrivateKey(privateKey,\n                                                                                                   mnemonic);\n\n                                    arbitraryDataProvider.storeOrUpdateKeyValue(user.getAccountName(),\n                                                                                EncryptionUtils.PRIVATE_KEY, decryptedPrivateKey);\n\n                                    dialog.dismiss();\n                                    Log_OC.d(TAG, \"Private key successfully decrypted and stored\");\n\n                                    arbitraryDataProvider.storeOrUpdateKeyValue(user.getAccountName(),\n                                                                                EncryptionUtils.MNEMONIC,\n                                                                                mnemonicUnchanged);\n\n                                    // check if private key and public key match\n                                    String publicKey = arbitraryDataProvider.getValue(user.getAccountName(),\n                                                                                      EncryptionUtils.PUBLIC_KEY);\n\n                                    byte[] key1 = generateKey();\n                                    String base64encodedKey = encodeBytesToBase64String(key1);\n\n                                    String encryptedString = EncryptionUtils.encryptStringAsymmetric(base64encodedKey,\n                                                                                                     publicKey);\n                                    String decryptedString = decryptStringAsymmetric(encryptedString,\n                                                                                     decryptedPrivateKey);\n\n                                    byte[] key2 = decodeStringToBase64Bytes(decryptedString);\n\n                                    if (!Arrays.equals(key1, key2)) {\n                                        throw new Exception(\"Keys do not match\");\n                                    }\n\n                                    Intent intentExisting = new Intent();\n                                    intentExisting.putExtra(SUCCESS, true);\n                                    intentExisting.putExtra(ARG_POSITION, getArguments().getInt(ARG_POSITION));\n                                    getTargetFragment().onActivityResult(getTargetRequestCode(),\n                                                                         SETUP_ENCRYPTION_RESULT_CODE, intentExisting);\n\n                                } catch (Exception e) {\n                                    textView.setText(R.string.end_to_end_encryption_wrong_password);\n                                    Log_OC.d(TAG, \"Error while decrypting private key: \" + e.getMessage());\n                                }\n                                break;\n\n                            case KEY_GENERATE:\n                                passphraseTextView.setVisibility(View.GONE);\n                                positiveButton.setVisibility(View.GONE);\n                                neutralButton.setVisibility(View.GONE);\n                                getDialog().setTitle(R.string.end_to_end_encryption_storing_keys);\n\n                                GenerateNewKeysAsyncTask newKeysTask = new GenerateNewKeysAsyncTask();\n                                newKeysTask.execute();\n                                break;\n\n                            default:\n                                dialog.dismiss();\n                                break;\n                        }\n                    }\n                });\n            }\n        });\n        return dialog;\n    }",
  "abstract_func": "@NonNull\n    private Dialog createDialog(View VAR_0) {\n        AlertDialog.Builder VAR_1 = new AlertDialog.Builder(getActivity());\n        VAR_1.setView(VAR_0).setPositiveButton(VAR_2.string.common_ok, null)\n                .setNeutralButton(VAR_2.string.common_cancel, null)\n                .setTitle(VAR_2.string.end_to_end_encryption_title);\n\n        Dialog VAR_3 = VAR_1.create();\n        VAR_3.setCanceledOnTouchOutside(false);\n\n        VAR_3.setOnShowListener(new DialogInterface.OnShowListener() {\n\n            @Override\n            public void onShow(final DialogInterface VAR_3) {\n\n                Button VAR_4 = ((AlertDialog) VAR_3).getButton(VAR_5.BUTTON_POSITIVE);\n                VAR_4.setOnClickListener(new View.OnClickListener() {\n\n                    @Override\n                    public void onClick(View VAR_6) {\n                        switch (VAR_7) {\n                            case VAR_8:\n                                VAR_9.d(VAR_10, \"New keys generated and stored.\");\n\n                                VAR_3.dismiss();\n\n                                Intent VAR_11 = new Intent();\n                                VAR_11.putExtra(VAR_12, true);\n                                VAR_11.putExtra(VAR_13, getArguments().getInt(VAR_13));\n                                getTargetFragment().onActivityResult(getTargetRequestCode(),\n                                        VAR_14, VAR_11);\n                                break;\n\n                            case VAR_15:\n                                VAR_9.d(VAR_10, \"Decrypt private key\");\n\n                                VAR_16.setText(VAR_2.string.end_to_end_encryption_decrypting);\n\n                                try {\n                                    String VAR_17 = VAR_18.get();\n                                    String VAR_19 = VAR_20.getText().toString();\n                                    String VAR_21 = VAR_20.getText().toString().replaceAll(\"\\\\s\", \"\")\n                                        .toLowerCase(VAR_22.ROOT);\n                                    String VAR_23 = VAR_24.decryptPrivateKey(VAR_17,\n                                                                                                   VAR_21);\n\n                                    VAR_25.storeOrUpdateKeyValue(VAR_26.getAccountName(),\n                                                                                VAR_24.PRIVATE_KEY, VAR_23);\n\n                                    VAR_3.dismiss();\n                                    VAR_9.d(VAR_10, \"Private key successfully decrypted and stored\");\n\n                                    VAR_25.storeOrUpdateKeyValue(VAR_26.getAccountName(),\n                                                                                VAR_24.MNEMONIC,\n                                                                                VAR_19);\n\n                                    /* COMMENT_0 */\n                                    String VAR_27 = VAR_25.getValue(VAR_26.getAccountName(),\n                                                                                      VAR_24.PUBLIC_KEY);\n\n                                    byte[] VAR_28 = generateKey();\n                                    String VAR_29 = encodeBytesToBase64String(VAR_28);\n\n                                    String VAR_30 = VAR_24.encryptStringAsymmetric(VAR_29,\n                                                                                                     VAR_27);\n                                    String VAR_31 = decryptStringAsymmetric(VAR_30,\n                                                                                     VAR_23);\n\n                                    byte[] VAR_32 = decodeStringToBase64Bytes(VAR_31);\n\n                                    if (!VAR_33.equals(VAR_28, VAR_32)) {\n                                        throw new Exception(\"Keys do not match\");\n                                    }\n\n                                    Intent VAR_34 = new Intent();\n                                    VAR_34.putExtra(VAR_12, true);\n                                    VAR_34.putExtra(VAR_13, getArguments().getInt(VAR_13));\n                                    getTargetFragment().onActivityResult(getTargetRequestCode(),\n                                                                         VAR_14, VAR_34);\n\n                                } catch (Exception VAR_35) {\n                                    VAR_16.setText(VAR_2.string.end_to_end_encryption_wrong_password);\n                                    VAR_9.d(VAR_10, \"Error while decrypting private key: \" + VAR_35.getMessage());\n                                }\n                                break;\n\n                            case VAR_36:\n                                VAR_37.setVisibility(VAR_38.GONE);\n                                VAR_39.setVisibility(VAR_38.GONE);\n                                VAR_40.setVisibility(VAR_38.GONE);\n                                getDialog().setTitle(VAR_2.string.end_to_end_encryption_storing_keys);\n\n                                GenerateNewKeysAsyncTask VAR_41 = new GenerateNewKeysAsyncTask();\n                                VAR_41.execute();\n                                break;\n\n                            default:\n                                VAR_3.dismiss();\n                                break;\n                        }\n                    }\n                });\n            }\n        });\n        return VAR_3;\n    }",
  "func_graph_path": "nextcloud/android/df2714ffaddf9be4b7babf23a078c984bf8388a3/SetupEncryptionDialogFragment.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -40,24 +40,43 @@\n                                     String privateKey = task.get();\n                                     String mnemonicUnchanged = passwordField.getText().toString();\n                                     String mnemonic = passwordField.getText().toString().replaceAll(\"\\\\s\", \"\")\n-                                            .toLowerCase(Locale.ROOT);\n+                                        .toLowerCase(Locale.ROOT);\n                                     String decryptedPrivateKey = EncryptionUtils.decryptPrivateKey(privateKey,\n-                                            mnemonic);\n+                                                                                                   mnemonic);\n \n                                     arbitraryDataProvider.storeOrUpdateKeyValue(user.getAccountName(),\n-                                            EncryptionUtils.PRIVATE_KEY, decryptedPrivateKey);\n+                                                                                EncryptionUtils.PRIVATE_KEY, decryptedPrivateKey);\n \n                                     dialog.dismiss();\n                                     Log_OC.d(TAG, \"Private key successfully decrypted and stored\");\n \n-                                    arbitraryDataProvider.storeOrUpdateKeyValue(user.getAccountName(), EncryptionUtils.MNEMONIC,\n-                                            mnemonicUnchanged);\n+                                    arbitraryDataProvider.storeOrUpdateKeyValue(user.getAccountName(),\n+                                                                                EncryptionUtils.MNEMONIC,\n+                                                                                mnemonicUnchanged);\n+\n+                                    // check if private key and public key match\n+                                    String publicKey = arbitraryDataProvider.getValue(user.getAccountName(),\n+                                                                                      EncryptionUtils.PUBLIC_KEY);\n+\n+                                    byte[] key1 = generateKey();\n+                                    String base64encodedKey = encodeBytesToBase64String(key1);\n+\n+                                    String encryptedString = EncryptionUtils.encryptStringAsymmetric(base64encodedKey,\n+                                                                                                     publicKey);\n+                                    String decryptedString = decryptStringAsymmetric(encryptedString,\n+                                                                                     decryptedPrivateKey);\n+\n+                                    byte[] key2 = decodeStringToBase64Bytes(decryptedString);\n+\n+                                    if (!Arrays.equals(key1, key2)) {\n+                                        throw new Exception(\"Keys do not match\");\n+                                    }\n \n                                     Intent intentExisting = new Intent();\n                                     intentExisting.putExtra(SUCCESS, true);\n                                     intentExisting.putExtra(ARG_POSITION, getArguments().getInt(ARG_POSITION));\n                                     getTargetFragment().onActivityResult(getTargetRequestCode(),\n-                                            SETUP_ENCRYPTION_RESULT_CODE, intentExisting);\n+                                                                         SETUP_ENCRYPTION_RESULT_CODE, intentExisting);\n \n                                 } catch (Exception e) {\n                                     textView.setText(R.string.end_to_end_encryption_wrong_password);",
  "diff_line_info": {
    "deleted_lines": [
      "                                            .toLowerCase(Locale.ROOT);",
      "                                            mnemonic);",
      "                                            EncryptionUtils.PRIVATE_KEY, decryptedPrivateKey);",
      "                                    arbitraryDataProvider.storeOrUpdateKeyValue(user.getAccountName(), EncryptionUtils.MNEMONIC,",
      "                                            mnemonicUnchanged);",
      "                                            SETUP_ENCRYPTION_RESULT_CODE, intentExisting);"
    ],
    "added_lines": [
      "                                        .toLowerCase(Locale.ROOT);",
      "                                                                                                   mnemonic);",
      "                                                                                EncryptionUtils.PRIVATE_KEY, decryptedPrivateKey);",
      "                                    arbitraryDataProvider.storeOrUpdateKeyValue(user.getAccountName(),",
      "                                                                                EncryptionUtils.MNEMONIC,",
      "                                                                                mnemonicUnchanged);",
      "",
      "                                    // check if private key and public key match",
      "                                    String publicKey = arbitraryDataProvider.getValue(user.getAccountName(),",
      "                                                                                      EncryptionUtils.PUBLIC_KEY);",
      "",
      "                                    byte[] key1 = generateKey();",
      "                                    String base64encodedKey = encodeBytesToBase64String(key1);",
      "",
      "                                    String encryptedString = EncryptionUtils.encryptStringAsymmetric(base64encodedKey,",
      "                                                                                                     publicKey);",
      "                                    String decryptedString = decryptStringAsymmetric(encryptedString,",
      "                                                                                     decryptedPrivateKey);",
      "",
      "                                    byte[] key2 = decodeStringToBase64Bytes(decryptedString);",
      "",
      "                                    if (!Arrays.equals(key1, key2)) {",
      "                                        throw new Exception(\"Keys do not match\");",
      "                                    }",
      "                                                                         SETUP_ENCRYPTION_RESULT_CODE, intentExisting);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/nextcloud/android/pull/8438",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/nextcloud/android/pull/8438: 403 Client Error: Forbidden for url: https://api.github.com/repos/nextcloud/android/pulls/8438",
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.8,
  "Bug Filter Response": "Final Classification: Defect Remediation & Feature Upgrades  \nConfidence: 0.8"
}