{
  "cve_id": "CVE-2023-30546",
  "cwe_ids": [
    "CWE-193",
    "CWE-125"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
  "cvss_is_v3": true,
  "repo_name": "contiki-ng",
  "commit_msg": "antelope,storage-cfs: Fix length of filename array",
  "commit_hash": "406ae7da30fb5fadacf0d646a4dc4ac0513a2dec",
  "git_url": "https://github.com/contiki-ng/contiki-ng/commit/406ae7da30fb5fadacf0d646a4dc4ac0513a2dec",
  "file_path": "os/storage/antelope/storage-cfs.c",
  "func_name": "storage_get_index",
  "func_before": "db_result_t\nstorage_get_index(index_t *index, relation_t *rel, attribute_t *attr)\n{\n  char filename[INDEX_NAME_LENGTH];\n  int fd;\n  int r;\n  struct index_record record;\n  db_result_t result;\n\n  merge_strings(filename, rel->name, INDEX_NAME_SUFFIX);\n\n  fd = cfs_open(filename, CFS_READ);\n  if(fd < 0) {\n    return DB_STORAGE_ERROR;\n  }\n\n  for(result = DB_STORAGE_ERROR;;) {\n    r = cfs_read(fd, &record, sizeof(record));\n    if(r < sizeof(record)) {\n      break;\n    }\n    if(strcmp(attr->name, record.attribute_name) == 0) {\n      PRINTF(\"DB: Found the index record for %s.%s: type %d, filename %s\\n\",\n\trel->name, attr->name, record.type, record.file_name);\n      index->type = record.type;\n      memcpy(index->descriptor_file, record.file_name,\n\t     sizeof(index->descriptor_file));\n      result = DB_OK;\n    }\n  }\n\n  cfs_close(fd);\n\n  return result;\n}",
  "abstract_func_before": "db_result_t\nstorage_get_index(index_t *VAR_0, relation_t *VAR_1, attribute_t *VAR_2)\n{\n  char VAR_3[VAR_4];\n  int VAR_5;\n  int VAR_6;\n  struct index_record VAR_7;\n  db_result_t VAR_8;\n\n  merge_strings(VAR_3, VAR_1->name, VAR_9);\n\n  VAR_5 = cfs_open(VAR_3, VAR_10);\n  if(VAR_5 < 0) {\n    return VAR_11;\n  }\n\n  for(VAR_8 = VAR_11;;) {\n    VAR_6 = cfs_read(VAR_5, &VAR_7, sizeof(VAR_7));\n    if(VAR_6 < sizeof(VAR_7)) {\n      break;\n    }\n    if(strcmp(VAR_2->name, VAR_7.attribute_name) == 0) {\n      PRINTF(\"DB: Found the index record for %s.%s: type %d, filename %s\\n\",\n\tVAR_1->name, VAR_2->name, VAR_7.type, VAR_7.file_name);\n      VAR_0->type = VAR_7.type;\n      memcpy(VAR_0->descriptor_file, VAR_7.file_name,\n\t     sizeof(VAR_0->descriptor_file));\n      VAR_8 = VAR_12;\n    }\n  }\n\n  cfs_close(VAR_5);\n\n  return VAR_8;\n}",
  "func_graph_path_before": "contiki-ng/406ae7da30fb5fadacf0d646a4dc4ac0513a2dec/storage-cfs.c/vul/before/1.json",
  "func": "db_result_t\nstorage_get_index(index_t *index, relation_t *rel, attribute_t *attr)\n{\n  char filename[INDEX_NAME_LENGTH + 1];\n  int fd;\n  int r;\n  struct index_record record;\n  db_result_t result;\n\n  merge_strings(filename, rel->name, INDEX_NAME_SUFFIX);\n\n  fd = cfs_open(filename, CFS_READ);\n  if(fd < 0) {\n    return DB_STORAGE_ERROR;\n  }\n\n  for(result = DB_STORAGE_ERROR;;) {\n    r = cfs_read(fd, &record, sizeof(record));\n    if(r < sizeof(record)) {\n      break;\n    }\n    if(strcmp(attr->name, record.attribute_name) == 0) {\n      PRINTF(\"DB: Found the index record for %s.%s: type %d, filename %s\\n\",\n\trel->name, attr->name, record.type, record.file_name);\n      index->type = record.type;\n      memcpy(index->descriptor_file, record.file_name,\n\t     sizeof(index->descriptor_file));\n      result = DB_OK;\n    }\n  }\n\n  cfs_close(fd);\n\n  return result;\n}",
  "abstract_func": "db_result_t\nstorage_get_index(index_t *VAR_0, relation_t *VAR_1, attribute_t *VAR_2)\n{\n  char VAR_3[VAR_4 + 1];\n  int VAR_5;\n  int VAR_6;\n  struct index_record VAR_7;\n  db_result_t VAR_8;\n\n  merge_strings(VAR_3, VAR_1->name, VAR_9);\n\n  VAR_5 = cfs_open(VAR_3, VAR_10);\n  if(VAR_5 < 0) {\n    return VAR_11;\n  }\n\n  for(VAR_8 = VAR_11;;) {\n    VAR_6 = cfs_read(VAR_5, &VAR_7, sizeof(VAR_7));\n    if(VAR_6 < sizeof(VAR_7)) {\n      break;\n    }\n    if(strcmp(VAR_2->name, VAR_7.attribute_name) == 0) {\n      PRINTF(\"DB: Found the index record for %s.%s: type %d, filename %s\\n\",\n\tVAR_1->name, VAR_2->name, VAR_7.type, VAR_7.file_name);\n      VAR_0->type = VAR_7.type;\n      memcpy(VAR_0->descriptor_file, VAR_7.file_name,\n\t     sizeof(VAR_0->descriptor_file));\n      VAR_8 = VAR_12;\n    }\n  }\n\n  cfs_close(VAR_5);\n\n  return VAR_8;\n}",
  "func_graph_path": "contiki-ng/406ae7da30fb5fadacf0d646a4dc4ac0513a2dec/storage-cfs.c/vul/after/1.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,7 +1,7 @@\n db_result_t\n storage_get_index(index_t *index, relation_t *rel, attribute_t *attr)\n {\n-  char filename[INDEX_NAME_LENGTH];\n+  char filename[INDEX_NAME_LENGTH + 1];\n   int fd;\n   int r;\n   struct index_record record;",
  "diff_line_info": {
    "deleted_lines": [
      "  char filename[INDEX_NAME_LENGTH];"
    ],
    "added_lines": [
      "  char filename[INDEX_NAME_LENGTH + 1];"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/contiki-ng/contiki-ng/pull/2425",
  "description": {
    "pr_info": {
      "title": "antelope,storage-cfs: Fix length of filename array",
      "number": 2425
    },
    "comment": [
      "https://github.com/contiki-ng/contiki-ng/blob/406ae7da30fb5fadacf0d646a4dc4ac0513a2dec/os/storage/antelope/storage.h#L47-L49\r\nThe macro `INDEX_NAME_LENGTH` does not count the trailing null char.",
      "This looks like a off-by-one-byte error. Should there be a CVE for this? (@nvt)",
      "@Machiry Yes, it might get a CVE, but it is difficult to exploit the bug without direct access to the DBMS; e.g., by being able to inject shell commands into the IoT node.",
      "I agree about the exploitability. But given that this is in a storage stack, it is better to have a CVE (may be a low-severity)."
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 0.9\n\n---\n\nThe patch addresses a buffer overflow issue by ensuring the filename array includes space for the null terminator, mitigating a potential security vulnerability. The consistency across commit message, vulnerability description, and code changes supports this classification with high confidence."
}