{
  "cve_id": "CVE-2017-5617",
  "cwe_ids": [
    "CWE-918"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:P/I:P/A:N",
  "cvss_is_v3": false,
  "repo_name": "blackears/svgSalamander",
  "commit_msg": "#11 - svgSalamander fix for CVE-2017-5617 was incomplete",
  "commit_hash": "826555b0a3229b6cf4671fe4de7aa51b5946b63d",
  "git_url": "https://github.com/blackears/svgSalamander/commit/826555b0a3229b6cf4671fe4de7aa51b5946b63d",
  "file_path": "svg-core/src/main/java/com/kitfox/svg/ImageSVG.java",
  "func_name": "build",
  "func_before": "@Override\n    protected void build() throws SVGException\n    {\n        super.build();\n\n        StyleAttribute sty = new StyleAttribute();\n\n        if (getPres(sty.setName(\"x\")))\n        {\n            x = sty.getFloatValueWithUnits();\n        }\n\n        if (getPres(sty.setName(\"y\")))\n        {\n            y = sty.getFloatValueWithUnits();\n        }\n\n        if (getPres(sty.setName(\"width\")))\n        {\n            width = sty.getFloatValueWithUnits();\n        }\n\n        if (getPres(sty.setName(\"height\")))\n        {\n            height = sty.getFloatValueWithUnits();\n        }\n\n        try\n        {\n            if (getPres(sty.setName(\"xlink:href\")))\n            {\n                \n                \n                URI src = sty.getURIValue(getXMLBase());\n                if (\"data\".equals(src.getScheme()))\n                {\n                    imageSrc = new URL(null, src.toASCIIString(), new Handler());\n                }\n                else \n                {\n                    \n                    if (!diagram.getUniverse().isImageDataInlineOnly())\n                    {\n                        try\n                        {\n                            imageSrc = src.toURL();\n                        } catch (Exception e)\n                        {\n                            Logger.getLogger(SVGConst.SVG_LOGGER).log(Level.WARNING,\n                                \"Could not parse xlink:href \" + src, e);\n    //                        e.printStackTrace();\n                            imageSrc = null;\n                        }\n                    }\n                }\n            }\n        } catch (Exception e)\n        {\n            throw new SVGException(e);\n        }\n\n        diagram.getUniverse().registerImage(imageSrc);\n\n        //Set widths if not set\n        BufferedImage img = diagram.getUniverse().getImage(imageSrc);\n        if (img == null)\n        {\n            xform = new AffineTransform();\n            bounds = new Rectangle2D.Float();\n            return;\n        }\n\n        if (width == 0)\n        {\n            width = img.getWidth();\n        }\n        if (height == 0)\n        {\n            height = img.getHeight();\n        }\n\n        //Determine image xform\n        xform = new AffineTransform();\n//        xform.setToScale(this.width / img.getWidth(), this.height / img.getHeight());\n//        xform.translate(this.x, this.y);\n        xform.translate(this.x, this.y);\n        xform.scale(this.width / img.getWidth(), this.height / img.getHeight());\n\n        bounds = new Rectangle2D.Float(this.x, this.y, this.width, this.height);\n    }",
  "abstract_func_before": "@Override\n    protected void build() throws SVGException\n    {\n        super.build();\n\n        StyleAttribute VAR_0 = new StyleAttribute();\n\n        if (getPres(VAR_0.setName(\"x\")))\n        {\n            VAR_1 = VAR_0.getFloatValueWithUnits();\n        }\n\n        if (getPres(VAR_0.setName(\"y\")))\n        {\n            VAR_2 = VAR_0.getFloatValueWithUnits();\n        }\n\n        if (getPres(VAR_0.setName(\"width\")))\n        {\n            VAR_3 = VAR_0.getFloatValueWithUnits();\n        }\n\n        if (getPres(VAR_0.setName(\"height\")))\n        {\n            VAR_4 = VAR_0.getFloatValueWithUnits();\n        }\n\n        try\n        {\n            if (getPres(VAR_0.setName(\"xlink:href\")))\n            {\n                \n                \n                URI VAR_5 = VAR_0.getURIValue(getXMLBase());\n                if (\"data\".equals(VAR_5.getScheme()))\n                {\n                    VAR_6 = new URL(null, VAR_5.toASCIIString(), new Handler());\n                }\n                else \n                {\n                    \n                    if (!VAR_7.getUniverse().isImageDataInlineOnly())\n                    {\n                        try\n                        {\n                            VAR_6 = VAR_5.toURL();\n                        } catch (Exception VAR_8)\n                        {\n                            VAR_9.getLogger(VAR_10.SVG_LOGGER).log(VAR_11.WARNING,\n                                \"Could not parse xlink:href \" + VAR_5, VAR_8);\n    /* COMMENT_0 */\n                            VAR_6 = null;\n                        }\n                    }\n                }\n            }\n        } catch (Exception VAR_8)\n        {\n            throw new SVGException(VAR_8);\n        }\n\n        VAR_7.getUniverse().registerImage(VAR_6);\n\n        /* COMMENT_1 */\n        BufferedImage VAR_12 = VAR_7.getUniverse().getImage(VAR_6);\n        if (VAR_12 == null)\n        {\n            VAR_13 = new AffineTransform();\n            VAR_14 = new Rectangle2D.Float();\n            return;\n        }\n\n        if (VAR_3 == 0)\n        {\n            VAR_3 = VAR_12.getWidth();\n        }\n        if (VAR_4 == 0)\n        {\n            VAR_4 = VAR_12.getHeight();\n        }\n\n        /* COMMENT_2 */\n        VAR_13 = new AffineTransform();\n/* COMMENT_3 */\n/* COMMENT_4 */\n        VAR_13.translate(this.x, this.y);\n        VAR_13.scale(this.width / VAR_12.getWidth(), this.height / VAR_12.getHeight());\n\n        VAR_14 = new Rectangle2D.Float(this.x, this.y, this.width, this.height);\n    }",
  "func_graph_path_before": "blackears/svgSalamander/826555b0a3229b6cf4671fe4de7aa51b5946b63d/ImageSVG.java/vul/before/0.json",
  "func": "@Override\n    protected void build() throws SVGException\n    {\n        super.build();\n\n        StyleAttribute sty = new StyleAttribute();\n\n        if (getPres(sty.setName(\"x\")))\n        {\n            x = sty.getFloatValueWithUnits();\n        }\n\n        if (getPres(sty.setName(\"y\")))\n        {\n            y = sty.getFloatValueWithUnits();\n        }\n\n        if (getPres(sty.setName(\"width\")))\n        {\n            width = sty.getFloatValueWithUnits();\n        }\n\n        if (getPres(sty.setName(\"height\")))\n        {\n            height = sty.getFloatValueWithUnits();\n        }\n\n        try\n        {\n            if (getPres(sty.setName(\"xlink:href\")))\n            {\n                URI src = sty.getURIValue(getXMLBase());\n                if (\"data\".equals(src.getScheme()))\n                {\n                    imageSrc = new URL(null, src.toASCIIString(), new Handler());\n                }\n                else if (!diagram.getUniverse().isImageDataInlineOnly())\n                {\n                    try\n                    {\n                        imageSrc = src.toURL();\n                    } catch (Exception e)\n                    {\n                        Logger.getLogger(SVGConst.SVG_LOGGER).log(Level.WARNING,\n                            \"Could not parse xlink:href \" + src, e);\n                        imageSrc = null;\n                    }\n                }\n            }\n        } catch (Exception e)\n        {\n            throw new SVGException(e);\n        }\n\n        if (imageSrc != null)\n        {\n            diagram.getUniverse().registerImage(imageSrc);\n\n            //Set widths if not set\n            BufferedImage img = diagram.getUniverse().getImage(imageSrc);\n            if (img == null)\n            {\n                xform = new AffineTransform();\n                bounds = new Rectangle2D.Float();\n                return;\n            }\n\n            if (width == 0)\n            {\n                width = img.getWidth();\n            }\n            if (height == 0)\n            {\n                height = img.getHeight();\n            }\n\n            //Determine image xform\n            xform = new AffineTransform();\n            xform.translate(this.x, this.y);\n            xform.scale(this.width / img.getWidth(), this.height / img.getHeight());\n        }\n\n        bounds = new Rectangle2D.Float(this.x, this.y, this.width, this.height);\n    }",
  "abstract_func": "@Override\n    protected void build() throws SVGException\n    {\n        super.build();\n\n        StyleAttribute VAR_0 = new StyleAttribute();\n\n        if (getPres(VAR_0.setName(\"x\")))\n        {\n            VAR_1 = VAR_0.getFloatValueWithUnits();\n        }\n\n        if (getPres(VAR_0.setName(\"y\")))\n        {\n            VAR_2 = VAR_0.getFloatValueWithUnits();\n        }\n\n        if (getPres(VAR_0.setName(\"width\")))\n        {\n            VAR_3 = VAR_0.getFloatValueWithUnits();\n        }\n\n        if (getPres(VAR_0.setName(\"height\")))\n        {\n            VAR_4 = VAR_0.getFloatValueWithUnits();\n        }\n\n        try\n        {\n            if (getPres(VAR_0.setName(\"xlink:href\")))\n            {\n                URI VAR_5 = VAR_0.getURIValue(getXMLBase());\n                if (\"data\".equals(VAR_5.getScheme()))\n                {\n                    VAR_6 = new URL(null, VAR_5.toASCIIString(), new Handler());\n                }\n                else if (!VAR_7.getUniverse().isImageDataInlineOnly())\n                {\n                    try\n                    {\n                        VAR_6 = VAR_5.toURL();\n                    } catch (Exception VAR_8)\n                    {\n                        VAR_9.getLogger(VAR_10.SVG_LOGGER).log(VAR_11.WARNING,\n                            \"Could not parse xlink:href \" + VAR_5, VAR_8);\n                        VAR_6 = null;\n                    }\n                }\n            }\n        } catch (Exception VAR_8)\n        {\n            throw new SVGException(VAR_8);\n        }\n\n        if (VAR_6 != null)\n        {\n            VAR_7.getUniverse().registerImage(VAR_6);\n\n            /* COMMENT_0 */\n            BufferedImage VAR_12 = VAR_7.getUniverse().getImage(VAR_6);\n            if (VAR_12 == null)\n            {\n                VAR_13 = new AffineTransform();\n                VAR_14 = new Rectangle2D.Float();\n                return;\n            }\n\n            if (VAR_3 == 0)\n            {\n                VAR_3 = VAR_12.getWidth();\n            }\n            if (VAR_4 == 0)\n            {\n                VAR_4 = VAR_12.getHeight();\n            }\n\n            /* COMMENT_1 */\n            VAR_13 = new AffineTransform();\n            VAR_13.translate(this.x, this.y);\n            VAR_13.scale(this.width / VAR_12.getWidth(), this.height / VAR_12.getHeight());\n        }\n\n        VAR_14 = new Rectangle2D.Float(this.x, this.y, this.width, this.height);\n    }",
  "func_graph_path": "blackears/svgSalamander/826555b0a3229b6cf4671fe4de7aa51b5946b63d/ImageSVG.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -29,28 +29,21 @@\n         {\n             if (getPres(sty.setName(\"xlink:href\")))\n             {\n-                \n-                \n                 URI src = sty.getURIValue(getXMLBase());\n                 if (\"data\".equals(src.getScheme()))\n                 {\n                     imageSrc = new URL(null, src.toASCIIString(), new Handler());\n                 }\n-                else \n+                else if (!diagram.getUniverse().isImageDataInlineOnly())\n                 {\n-                    \n-                    if (!diagram.getUniverse().isImageDataInlineOnly())\n+                    try\n                     {\n-                        try\n-                        {\n-                            imageSrc = src.toURL();\n-                        } catch (Exception e)\n-                        {\n-                            Logger.getLogger(SVGConst.SVG_LOGGER).log(Level.WARNING,\n-                                \"Could not parse xlink:href \" + src, e);\n-    //                        e.printStackTrace();\n-                            imageSrc = null;\n-                        }\n+                        imageSrc = src.toURL();\n+                    } catch (Exception e)\n+                    {\n+                        Logger.getLogger(SVGConst.SVG_LOGGER).log(Level.WARNING,\n+                            \"Could not parse xlink:href \" + src, e);\n+                        imageSrc = null;\n                     }\n                 }\n             }\n@@ -59,32 +52,33 @@\n             throw new SVGException(e);\n         }\n \n-        diagram.getUniverse().registerImage(imageSrc);\n+        if (imageSrc != null)\n+        {\n+            diagram.getUniverse().registerImage(imageSrc);\n \n-        //Set widths if not set\n-        BufferedImage img = diagram.getUniverse().getImage(imageSrc);\n-        if (img == null)\n-        {\n+            //Set widths if not set\n+            BufferedImage img = diagram.getUniverse().getImage(imageSrc);\n+            if (img == null)\n+            {\n+                xform = new AffineTransform();\n+                bounds = new Rectangle2D.Float();\n+                return;\n+            }\n+\n+            if (width == 0)\n+            {\n+                width = img.getWidth();\n+            }\n+            if (height == 0)\n+            {\n+                height = img.getHeight();\n+            }\n+\n+            //Determine image xform\n             xform = new AffineTransform();\n-            bounds = new Rectangle2D.Float();\n-            return;\n+            xform.translate(this.x, this.y);\n+            xform.scale(this.width / img.getWidth(), this.height / img.getHeight());\n         }\n-\n-        if (width == 0)\n-        {\n-            width = img.getWidth();\n-        }\n-        if (height == 0)\n-        {\n-            height = img.getHeight();\n-        }\n-\n-        //Determine image xform\n-        xform = new AffineTransform();\n-//        xform.setToScale(this.width / img.getWidth(), this.height / img.getHeight());\n-//        xform.translate(this.x, this.y);\n-        xform.translate(this.x, this.y);\n-        xform.scale(this.width / img.getWidth(), this.height / img.getHeight());\n \n         bounds = new Rectangle2D.Float(this.x, this.y, this.width, this.height);\n     }",
  "diff_line_info": {
    "deleted_lines": [
      "                ",
      "                ",
      "                else ",
      "                    ",
      "                    if (!diagram.getUniverse().isImageDataInlineOnly())",
      "                        try",
      "                        {",
      "                            imageSrc = src.toURL();",
      "                        } catch (Exception e)",
      "                        {",
      "                            Logger.getLogger(SVGConst.SVG_LOGGER).log(Level.WARNING,",
      "                                \"Could not parse xlink:href \" + src, e);",
      "    //                        e.printStackTrace();",
      "                            imageSrc = null;",
      "                        }",
      "        diagram.getUniverse().registerImage(imageSrc);",
      "        //Set widths if not set",
      "        BufferedImage img = diagram.getUniverse().getImage(imageSrc);",
      "        if (img == null)",
      "        {",
      "            bounds = new Rectangle2D.Float();",
      "            return;",
      "",
      "        if (width == 0)",
      "        {",
      "            width = img.getWidth();",
      "        }",
      "        if (height == 0)",
      "        {",
      "            height = img.getHeight();",
      "        }",
      "",
      "        //Determine image xform",
      "        xform = new AffineTransform();",
      "//        xform.setToScale(this.width / img.getWidth(), this.height / img.getHeight());",
      "//        xform.translate(this.x, this.y);",
      "        xform.translate(this.x, this.y);",
      "        xform.scale(this.width / img.getWidth(), this.height / img.getHeight());"
    ],
    "added_lines": [
      "                else if (!diagram.getUniverse().isImageDataInlineOnly())",
      "                    try",
      "                        imageSrc = src.toURL();",
      "                    } catch (Exception e)",
      "                    {",
      "                        Logger.getLogger(SVGConst.SVG_LOGGER).log(Level.WARNING,",
      "                            \"Could not parse xlink:href \" + src, e);",
      "                        imageSrc = null;",
      "        if (imageSrc != null)",
      "        {",
      "            diagram.getUniverse().registerImage(imageSrc);",
      "            //Set widths if not set",
      "            BufferedImage img = diagram.getUniverse().getImage(imageSrc);",
      "            if (img == null)",
      "            {",
      "                xform = new AffineTransform();",
      "                bounds = new Rectangle2D.Float();",
      "                return;",
      "            }",
      "",
      "            if (width == 0)",
      "            {",
      "                width = img.getWidth();",
      "            }",
      "            if (height == 0)",
      "            {",
      "                height = img.getHeight();",
      "            }",
      "",
      "            //Determine image xform",
      "            xform.translate(this.x, this.y);",
      "            xform.scale(this.width / img.getWidth(), this.height / img.getHeight());"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/blackears/svgSalamander/pull/33",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/blackears/svgSalamander/pull/33: 403 Client Error: Forbidden for url: https://api.github.com/repos/blackears/svgSalamander/pulls/33",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 1.0"
}