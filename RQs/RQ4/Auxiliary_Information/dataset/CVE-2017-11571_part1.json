{
  "cve_id": "CVE-2017-11571",
  "cwe_ids": [
    "CWE-119"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "fontforge",
  "commit_msg": "parsettf.c: Fix buffer overflow condition when reading CFF top dictionary\n\nCloses #3087",
  "commit_hash": "5a0c6522682b0788fc478dd159dd6168cb5fa38b",
  "git_url": "https://github.com/fontforge/fontforge/commit/5a0c6522682b0788fc478dd159dd6168cb5fa38b",
  "file_path": "fontforge/parsettf.c",
  "func_name": "readcfftopdict",
  "func_before": "static struct topdicts *readcfftopdict(FILE *ttf, char *fontname, int len,\n\tstruct ttfinfo *info) {\n    struct topdicts *td = calloc(1,sizeof(struct topdicts));\n    long base = ftell(ttf);\n    int ival, oval, sp, ret, i;\n    real stack[50];\n\n    if ( fontname!=NULL )\n\tValidatePostScriptFontName(info,fontname);\n\n    td->fontname = fontname;\n    td->underlinepos = -100;\n    td->underlinewidth = 50;\n    td->charstringtype = 2;\n    td->fontmatrix[0] = td->fontmatrix[3] = .001;\n\n    td->notice = td->copyright = td->fullname = td->familyname = td->weight = td->version = -1;\n    td->postscript_code = td->basefontname = -1;\n    td->synthetic_base = td->ros_registry = -1;\n    td->fdarrayoff = td->fdselectoff = td->sid_fontname = -1;\n    td->blendaxistypes[0] = -1;\n\n    /* Multiple master fonts can have Type2 operators here, particularly */\n    /*  blend operators. We're ignoring that */\n    while ( ftell(ttf)<base+len ) {\n\tsp = 0;\n\twhile ( (ret=readcffthing(ttf,&ival,&stack[sp],&oval,info))!=3 && ftell(ttf)<base+len ) {\n\t    if ( ret==1 )\n\t\tstack[sp]=ival;\n\t    if ( ret!=0 && sp<45 )\n\t\t++sp;\n\t}\n\tif ( ret==3 && oval==31 /* \"T2\" operator, can have 0 arguments */ ) {\n\t    skipcfft2thing(ttf);\n\t} else if ( sp==0 ) {\n\t    LogError( _(\"No argument to operator\\n\") );\n\t    info->bad_cff = true;\n\t} else if ( ret==3 ) switch( oval ) {\n\t  case 0:\n\t    td->version = stack[sp-1];\n\t  break;\n\t  case 1:\n\t    td->notice = stack[sp-1];\n\t  break;\n\t  case (12<<8)+0:\n\t    td->copyright = stack[sp-1];\n\t  break;\n\t  case 2:\n\t    td->fullname = stack[sp-1];\n\t  break;\n\t  case 3:\n\t    td->familyname = stack[sp-1];\n\t  break;\n\t  case 4:\n\t    td->weight = stack[sp-1];\n\t  break;\n\t  case (12<<8)+1:\n\t    td->isfixedpitch = stack[sp-1];\n\t  break;\n\t  case (12<<8)+2:\n\t    td->italicangle = stack[sp-1];\n\t  break;\n\t  case (12<<8)+3:\n\t    td->underlinepos = stack[sp-1];\n\t  break;\n\t  case (12<<8)+4:\n\t    td->underlinewidth = stack[sp-1];\n\t  break;\n\t  case (12<<8)+5:\n\t    td->painttype = stack[sp-1];\n\t  break;\n\t  case (12<<8)+6:\n\t    td->charstringtype = stack[sp-1];\n\t  break;\n\t  case (12<<8)+7:\n\t    memcpy(td->fontmatrix,stack,(sp>=6?6:sp)*sizeof(real));\n\t    td->fontmatrix_set = 1;\n\t  break;\n\t  case 13:\n\t    td->uniqueid = stack[sp-1];\n\t  break;\n\t  case 5:\n\t    memcpy(td->fontbb,stack,(sp>=4?4:sp)*sizeof(real));\n\t  break;\n\t  case (12<<8)+8:\n\t    td->strokewidth = stack[sp-1];\n\t  break;\n\t  case 14:\n\t    for ( i=0; i<sp && i<20; ++i )\n\t\ttd->xuid[i] = stack[i];\n\t  break;\n\t  case 15:\n\t    td->charsetoff = stack[sp-1];\n\t  break;\n\t  case 16:\n\t    td->encodingoff = stack[sp-1];\n\t  break;\n\t  case 17:\n\t    td->charstringsoff = stack[sp-1];\n\t  break;\n\t  case 18:\n\t    td->private_size = stack[0];\n\t    td->private_offset = stack[1];\n\t  break;\n\t  case (12<<8)+20:\n\t    LogError( _(\"FontForge does not support synthetic fonts\\n\") );\n\t    td->synthetic_base = stack[sp-1];\n\t  break;\n\t  case (12<<8)+21:\n\t    td->postscript_code = stack[sp-1];\n\t  break;\n\t  case (12<<8)+22:\n\t    td->basefontname = stack[sp-1];\n\t  break;\n\t  case (12<<8)+23:\n\t    for ( i=0; i<sp && i<16; ++i )\n\t\ttd->basefontblend[i] = stack[i];\n\t  break;\n\t  case (12<<8)+24:\n\t    LogError( _(\"FontForge does not support type2 multiple master fonts\\n\") );\n\t    info->bad_cff = true;\n\t    if (sp < 4) {\n\t        LogError(_(\"CFF dict stack underflow detected: %d < 4\\n\"), sp);\n\t        break;\n\t    }\n\t    td->nMasters = stack[0];\n\t    td->nAxes = sp-4;\n\t    memcpy(td->weightvector,stack+1,(sp-4)*sizeof(real));\n\t    td->lenBuildCharArray = stack[sp-3];\n\t    td->NormalizeDesignVector = stack[sp-2];\t/* These are type2 charstrings, even in type1 fonts */\n\t    td->ConvertDesignVector = stack[sp-1];\n\t  break;\n\t  case (12<<8)+26:\n\t    for ( i=0; i<sp && i<16; ++i )\n\t\ttd->blendaxistypes[i] = stack[i];\n\t    td->blendaxistypes[i] = -1;\n\t  break;\n\t  case (12<<8)+30:\n\t    td->ros_registry = stack[0];\n\t    td->ros_ordering = stack[1];\n\t    td->ros_supplement = stack[2];\n\t  break;\n\t  case (12<<8)+31:\n\t    td->cidfontversion = stack[sp-1];\n\t  break;\n\t  case (12<<8)+32:\n\t    td->cidfontrevision = stack[sp-1];\n\t  break;\n\t  case (12<<8)+33:\n\t    td->cidfonttype = stack[sp-1];\n\t  break;\n\t  case (12<<8)+34:\n\t    td->cidcount = stack[sp-1];\n\t  break;\n\t  case (12<<8)+35:\n\t    td->uidbase = stack[sp-1];\n\t  break;\n\t  case (12<<8)+36:\n\t    td->fdarrayoff = stack[sp-1];\n\t  break;\n\t  case (12<<8)+37:\n\t    td->fdselectoff = stack[sp-1];\n\t  break;\n\t  case (12<<8)+38:\n\t    td->sid_fontname = stack[sp-1];\n\t  break;\n\t  case (12<<8)+39:\n\t    LogError(_(\"FontForge does not support Chameleon fonts\\n\"));;\n\t  break;\n\t  default:\n\t    LogError(_(\"Unknown operator in %s: %x\\n\"), fontname, oval );\n\t    info->bad_cff = true;\n\t  break;\n\t}\n    }\nreturn( td );\n}",
  "abstract_func_before": "static struct topdicts *readcfftopdict(FILE *VAR_0, char *VAR_1, int VAR_2,\n\tstruct ttfinfo *VAR_3) {\n    struct topdicts *VAR_4 = calloc(1,sizeof(struct topdicts));\n    long VAR_5 = ftell(VAR_0);\n    int VAR_6, VAR_7, VAR_8, VAR_9, VAR_10;\n    real VAR_11[50];\n\n    if ( VAR_1!=NULL )\n\tValidatePostScriptFontName(VAR_3,VAR_1);\n\n    VAR_4->fontname = VAR_1;\n    VAR_4->underlinepos = -100;\n    VAR_4->underlinewidth = 50;\n    VAR_4->charstringtype = 2;\n    VAR_4->fontmatrix[0] = VAR_4->fontmatrix[3] = .001;\n\n    VAR_4->notice = VAR_4->copyright = VAR_4->fullname = VAR_4->familyname = VAR_4->weight = VAR_4->version = -1;\n    VAR_4->postscript_code = VAR_4->basefontname = -1;\n    VAR_4->synthetic_base = VAR_4->ros_registry = -1;\n    VAR_4->fdarrayoff = VAR_4->fdselectoff = VAR_4->sid_fontname = -1;\n    VAR_4->blendaxistypes[0] = -1;\n\n    /* COMMENT_0 */\n    /* COMMENT_1 */\n    while ( ftell(VAR_0)<VAR_5+VAR_2 ) {\n\tVAR_8 = 0;\n\twhile ( (VAR_9=readcffthing(VAR_0,&VAR_6,&VAR_11[VAR_8],&VAR_7,VAR_3))!=3 && ftell(VAR_0)<VAR_5+VAR_2 ) {\n\t    if ( VAR_9==1 )\n\t\tVAR_11[VAR_8]=VAR_6;\n\t    if ( VAR_9!=0 && VAR_8<45 )\n\t\t++VAR_8;\n\t}\n\tif ( VAR_9==3 && VAR_7==31 /* COMMENT_2 */ ) {\n\t    skipcfft2thing(VAR_0);\n\t} else if ( VAR_8==0 ) {\n\t    LogError( _(\"No argument to operator\\n\") );\n\t    VAR_3->bad_cff = true;\n\t} else if ( VAR_9==3 ) switch( VAR_7 ) {\n\t  case 0:\n\t    VAR_4->version = VAR_11[VAR_8-1];\n\t  break;\n\t  case 1:\n\t    VAR_4->notice = VAR_11[VAR_8-1];\n\t  break;\n\t  case (12<<8)+0:\n\t    VAR_4->copyright = VAR_11[VAR_8-1];\n\t  break;\n\t  case 2:\n\t    VAR_4->fullname = VAR_11[VAR_8-1];\n\t  break;\n\t  case 3:\n\t    VAR_4->familyname = VAR_11[VAR_8-1];\n\t  break;\n\t  case 4:\n\t    VAR_4->weight = VAR_11[VAR_8-1];\n\t  break;\n\t  case (12<<8)+1:\n\t    VAR_4->isfixedpitch = VAR_11[VAR_8-1];\n\t  break;\n\t  case (12<<8)+2:\n\t    VAR_4->italicangle = VAR_11[VAR_8-1];\n\t  break;\n\t  case (12<<8)+3:\n\t    VAR_4->underlinepos = VAR_11[VAR_8-1];\n\t  break;\n\t  case (12<<8)+4:\n\t    VAR_4->underlinewidth = VAR_11[VAR_8-1];\n\t  break;\n\t  case (12<<8)+5:\n\t    VAR_4->painttype = VAR_11[VAR_8-1];\n\t  break;\n\t  case (12<<8)+6:\n\t    VAR_4->charstringtype = VAR_11[VAR_8-1];\n\t  break;\n\t  case (12<<8)+7:\n\t    memcpy(VAR_4->fontmatrix,VAR_11,(VAR_8>=6?6:VAR_8)*sizeof(real));\n\t    VAR_4->fontmatrix_set = 1;\n\t  break;\n\t  case 13:\n\t    VAR_4->uniqueid = VAR_11[VAR_8-1];\n\t  break;\n\t  case 5:\n\t    memcpy(VAR_4->fontbb,VAR_11,(VAR_8>=4?4:VAR_8)*sizeof(real));\n\t  break;\n\t  case (12<<8)+8:\n\t    VAR_4->strokewidth = VAR_11[VAR_8-1];\n\t  break;\n\t  case 14:\n\t    for ( VAR_10=0; VAR_10<VAR_8 && VAR_10<20; ++VAR_10 )\n\t\tVAR_4->xuid[VAR_10] = VAR_11[VAR_10];\n\t  break;\n\t  case 15:\n\t    VAR_4->charsetoff = VAR_11[VAR_8-1];\n\t  break;\n\t  case 16:\n\t    VAR_4->encodingoff = VAR_11[VAR_8-1];\n\t  break;\n\t  case 17:\n\t    VAR_4->charstringsoff = VAR_11[VAR_8-1];\n\t  break;\n\t  case 18:\n\t    VAR_4->private_size = VAR_11[0];\n\t    VAR_4->private_offset = VAR_11[1];\n\t  break;\n\t  case (12<<8)+20:\n\t    LogError( _(\"FontForge does not support synthetic fonts\\n\") );\n\t    VAR_4->synthetic_base = VAR_11[VAR_8-1];\n\t  break;\n\t  case (12<<8)+21:\n\t    VAR_4->postscript_code = VAR_11[VAR_8-1];\n\t  break;\n\t  case (12<<8)+22:\n\t    VAR_4->basefontname = VAR_11[VAR_8-1];\n\t  break;\n\t  case (12<<8)+23:\n\t    for ( VAR_10=0; VAR_10<VAR_8 && VAR_10<16; ++VAR_10 )\n\t\tVAR_4->basefontblend[VAR_10] = VAR_11[VAR_10];\n\t  break;\n\t  case (12<<8)+24:\n\t    LogError( _(\"FontForge does not support type2 multiple master fonts\\n\") );\n\t    VAR_3->bad_cff = true;\n\t    if (VAR_8 < 4) {\n\t        LogError(_(\"CFF dict stack underflow detected: %d < 4\\n\"), VAR_8);\n\t        break;\n\t    }\n\t    VAR_4->nMasters = VAR_11[0];\n\t    VAR_4->nAxes = VAR_8-4;\n\t    memcpy(VAR_4->weightvector,VAR_11+1,(VAR_8-4)*sizeof(real));\n\t    VAR_4->lenBuildCharArray = VAR_11[VAR_8-3];\n\t    VAR_4->NormalizeDesignVector = VAR_11[VAR_8-2];\t/* COMMENT_3 */\n\t    VAR_4->ConvertDesignVector = VAR_11[VAR_8-1];\n\t  break;\n\t  case (12<<8)+26:\n\t    for ( VAR_10=0; VAR_10<VAR_8 && VAR_10<16; ++VAR_10 )\n\t\tVAR_4->blendaxistypes[VAR_10] = VAR_11[VAR_10];\n\t    VAR_4->blendaxistypes[VAR_10] = -1;\n\t  break;\n\t  case (12<<8)+30:\n\t    VAR_4->ros_registry = VAR_11[0];\n\t    VAR_4->ros_ordering = VAR_11[1];\n\t    VAR_4->ros_supplement = VAR_11[2];\n\t  break;\n\t  case (12<<8)+31:\n\t    VAR_4->cidfontversion = VAR_11[VAR_8-1];\n\t  break;\n\t  case (12<<8)+32:\n\t    VAR_4->cidfontrevision = VAR_11[VAR_8-1];\n\t  break;\n\t  case (12<<8)+33:\n\t    VAR_4->cidfonttype = VAR_11[VAR_8-1];\n\t  break;\n\t  case (12<<8)+34:\n\t    VAR_4->cidcount = VAR_11[VAR_8-1];\n\t  break;\n\t  case (12<<8)+35:\n\t    VAR_4->uidbase = VAR_11[VAR_8-1];\n\t  break;\n\t  case (12<<8)+36:\n\t    VAR_4->fdarrayoff = VAR_11[VAR_8-1];\n\t  break;\n\t  case (12<<8)+37:\n\t    VAR_4->fdselectoff = VAR_11[VAR_8-1];\n\t  break;\n\t  case (12<<8)+38:\n\t    VAR_4->sid_fontname = VAR_11[VAR_8-1];\n\t  break;\n\t  case (12<<8)+39:\n\t    LogError(_(\"FontForge does not support Chameleon fonts\\n\"));;\n\t  break;\n\t  default:\n\t    LogError(_(\"Unknown operator in %s: %x\\n\"), VAR_1, VAR_7 );\n\t    VAR_3->bad_cff = true;\n\t  break;\n\t}\n    }\nreturn( VAR_4 );\n}",
  "func_graph_path_before": "fontforge/5a0c6522682b0788fc478dd159dd6168cb5fa38b/parsettf.c/vul/before/0.json",
  "func": "static struct topdicts *readcfftopdict(FILE *ttf, char *fontname, int len,\n\tstruct ttfinfo *info) {\n    struct topdicts *td = calloc(1,sizeof(struct topdicts));\n    long base = ftell(ttf);\n    int ival, oval, sp, ret, i;\n    real stack[50];\n\n    if ( fontname!=NULL )\n\tValidatePostScriptFontName(info,fontname);\n\n    td->fontname = fontname;\n    td->underlinepos = -100;\n    td->underlinewidth = 50;\n    td->charstringtype = 2;\n    td->fontmatrix[0] = td->fontmatrix[3] = .001;\n\n    td->notice = td->copyright = td->fullname = td->familyname = td->weight = td->version = -1;\n    td->postscript_code = td->basefontname = -1;\n    td->synthetic_base = td->ros_registry = -1;\n    td->fdarrayoff = td->fdselectoff = td->sid_fontname = -1;\n    td->blendaxistypes[0] = -1;\n\n    /* Multiple master fonts can have Type2 operators here, particularly */\n    /*  blend operators. We're ignoring that */\n    while ( !feof(ttf) && ftell(ttf)<base+len ) {\n\tsp = 0;\n\twhile ( (ret=readcffthing(ttf,&ival,&stack[sp],&oval,info))!=3 && ftell(ttf)<base+len ) {\n\t    if ( ret==1 )\n\t\tstack[sp]=ival;\n\t    if ( ret!=0 && sp<45 )\n\t\t++sp;\n\t}\n\tif ( ret==3 && oval==31 /* \"T2\" operator, can have 0 arguments */ ) {\n\t    skipcfft2thing(ttf);\n\t} else if ( sp==0 ) {\n\t    LogError( _(\"No argument to operator\\n\") );\n\t    info->bad_cff = true;\n\t} else if ( ret==3 ) switch( oval ) {\n\t  case 0:\n\t    td->version = stack[sp-1];\n\t  break;\n\t  case 1:\n\t    td->notice = stack[sp-1];\n\t  break;\n\t  case (12<<8)+0:\n\t    td->copyright = stack[sp-1];\n\t  break;\n\t  case 2:\n\t    td->fullname = stack[sp-1];\n\t  break;\n\t  case 3:\n\t    td->familyname = stack[sp-1];\n\t  break;\n\t  case 4:\n\t    td->weight = stack[sp-1];\n\t  break;\n\t  case (12<<8)+1:\n\t    td->isfixedpitch = stack[sp-1];\n\t  break;\n\t  case (12<<8)+2:\n\t    td->italicangle = stack[sp-1];\n\t  break;\n\t  case (12<<8)+3:\n\t    td->underlinepos = stack[sp-1];\n\t  break;\n\t  case (12<<8)+4:\n\t    td->underlinewidth = stack[sp-1];\n\t  break;\n\t  case (12<<8)+5:\n\t    td->painttype = stack[sp-1];\n\t  break;\n\t  case (12<<8)+6:\n\t    td->charstringtype = stack[sp-1];\n\t  break;\n\t  case (12<<8)+7:\n\t    memcpy(td->fontmatrix,stack,(sp>=6?6:sp)*sizeof(real));\n\t    td->fontmatrix_set = 1;\n\t  break;\n\t  case 13:\n\t    td->uniqueid = stack[sp-1];\n\t  break;\n\t  case 5:\n\t    memcpy(td->fontbb,stack,(sp>=4?4:sp)*sizeof(real));\n\t  break;\n\t  case (12<<8)+8:\n\t    td->strokewidth = stack[sp-1];\n\t  break;\n\t  case 14:\n\t    for ( i=0; i<sp && i<20; ++i )\n\t\ttd->xuid[i] = stack[i];\n\t  break;\n\t  case 15:\n\t    td->charsetoff = stack[sp-1];\n\t  break;\n\t  case 16:\n\t    td->encodingoff = stack[sp-1];\n\t  break;\n\t  case 17:\n\t    td->charstringsoff = stack[sp-1];\n\t  break;\n\t  case 18:\n\t    td->private_size = stack[0];\n\t    td->private_offset = stack[1];\n\t  break;\n\t  case (12<<8)+20:\n\t    LogError( _(\"FontForge does not support synthetic fonts\\n\") );\n\t    td->synthetic_base = stack[sp-1];\n\t  break;\n\t  case (12<<8)+21:\n\t    td->postscript_code = stack[sp-1];\n\t  break;\n\t  case (12<<8)+22:\n\t    td->basefontname = stack[sp-1];\n\t  break;\n\t  case (12<<8)+23:\n\t    for ( i=0; i<sp && i<16; ++i )\n\t\ttd->basefontblend[i] = stack[i];\n\t  break;\n\t  case (12<<8)+24:\n\t    LogError( _(\"FontForge does not support type2 multiple master fonts\\n\") );\n\t    info->bad_cff = true;\n\t    if (sp < 4) {\n\t        LogError(_(\"CFF dict stack underflow detected: %d < 4\\n\"), sp);\n\t        break;\n\t    }\n\t    td->nMasters = stack[0];\n\t    td->nAxes = sp-4;\n\t    memcpy(td->weightvector,stack+1,(sp-4)*sizeof(real));\n\t    td->lenBuildCharArray = stack[sp-3];\n\t    td->NormalizeDesignVector = stack[sp-2];\t/* These are type2 charstrings, even in type1 fonts */\n\t    td->ConvertDesignVector = stack[sp-1];\n\t  break;\n\t  case (12<<8)+26:\n\t    for ( i=0; i<sp && i<16; ++i )\n\t\ttd->blendaxistypes[i] = stack[i];\n\t    td->blendaxistypes[i] = -1;\n\t  break;\n\t  case (12<<8)+30:\n\t    td->ros_registry = stack[0];\n\t    td->ros_ordering = stack[1];\n\t    td->ros_supplement = stack[2];\n\t  break;\n\t  case (12<<8)+31:\n\t    td->cidfontversion = stack[sp-1];\n\t  break;\n\t  case (12<<8)+32:\n\t    td->cidfontrevision = stack[sp-1];\n\t  break;\n\t  case (12<<8)+33:\n\t    td->cidfonttype = stack[sp-1];\n\t  break;\n\t  case (12<<8)+34:\n\t    td->cidcount = stack[sp-1];\n\t  break;\n\t  case (12<<8)+35:\n\t    td->uidbase = stack[sp-1];\n\t  break;\n\t  case (12<<8)+36:\n\t    td->fdarrayoff = stack[sp-1];\n\t  break;\n\t  case (12<<8)+37:\n\t    td->fdselectoff = stack[sp-1];\n\t  break;\n\t  case (12<<8)+38:\n\t    td->sid_fontname = stack[sp-1];\n\t  break;\n\t  case (12<<8)+39:\n\t    LogError(_(\"FontForge does not support Chameleon fonts\\n\"));;\n\t  break;\n\t  default:\n\t    LogError(_(\"Unknown operator in %s: %x\\n\"), fontname, oval );\n\t    info->bad_cff = true;\n\t  break;\n\t}\n    }\nreturn( td );\n}",
  "abstract_func": "static struct topdicts *readcfftopdict(FILE *VAR_0, char *VAR_1, int VAR_2,\n\tstruct ttfinfo *VAR_3) {\n    struct topdicts *VAR_4 = calloc(1,sizeof(struct topdicts));\n    long VAR_5 = ftell(VAR_0);\n    int VAR_6, VAR_7, VAR_8, VAR_9, VAR_10;\n    real VAR_11[50];\n\n    if ( VAR_1!=NULL )\n\tValidatePostScriptFontName(VAR_3,VAR_1);\n\n    VAR_4->fontname = VAR_1;\n    VAR_4->underlinepos = -100;\n    VAR_4->underlinewidth = 50;\n    VAR_4->charstringtype = 2;\n    VAR_4->fontmatrix[0] = VAR_4->fontmatrix[3] = .001;\n\n    VAR_4->notice = VAR_4->copyright = VAR_4->fullname = VAR_4->familyname = VAR_4->weight = VAR_4->version = -1;\n    VAR_4->postscript_code = VAR_4->basefontname = -1;\n    VAR_4->synthetic_base = VAR_4->ros_registry = -1;\n    VAR_4->fdarrayoff = VAR_4->fdselectoff = VAR_4->sid_fontname = -1;\n    VAR_4->blendaxistypes[0] = -1;\n\n    /* COMMENT_0 */\n    /* COMMENT_1 */\n    while ( !feof(VAR_0) && ftell(VAR_0)<VAR_5+VAR_2 ) {\n\tVAR_8 = 0;\n\twhile ( (VAR_9=readcffthing(VAR_0,&VAR_6,&VAR_11[VAR_8],&VAR_7,VAR_3))!=3 && ftell(VAR_0)<VAR_5+VAR_2 ) {\n\t    if ( VAR_9==1 )\n\t\tVAR_11[VAR_8]=VAR_6;\n\t    if ( VAR_9!=0 && VAR_8<45 )\n\t\t++VAR_8;\n\t}\n\tif ( VAR_9==3 && VAR_7==31 /* COMMENT_2 */ ) {\n\t    skipcfft2thing(VAR_0);\n\t} else if ( VAR_8==0 ) {\n\t    LogError( _(\"No argument to operator\\n\") );\n\t    VAR_3->bad_cff = true;\n\t} else if ( VAR_9==3 ) switch( VAR_7 ) {\n\t  case 0:\n\t    VAR_4->version = VAR_11[VAR_8-1];\n\t  break;\n\t  case 1:\n\t    VAR_4->notice = VAR_11[VAR_8-1];\n\t  break;\n\t  case (12<<8)+0:\n\t    VAR_4->copyright = VAR_11[VAR_8-1];\n\t  break;\n\t  case 2:\n\t    VAR_4->fullname = VAR_11[VAR_8-1];\n\t  break;\n\t  case 3:\n\t    VAR_4->familyname = VAR_11[VAR_8-1];\n\t  break;\n\t  case 4:\n\t    VAR_4->weight = VAR_11[VAR_8-1];\n\t  break;\n\t  case (12<<8)+1:\n\t    VAR_4->isfixedpitch = VAR_11[VAR_8-1];\n\t  break;\n\t  case (12<<8)+2:\n\t    VAR_4->italicangle = VAR_11[VAR_8-1];\n\t  break;\n\t  case (12<<8)+3:\n\t    VAR_4->underlinepos = VAR_11[VAR_8-1];\n\t  break;\n\t  case (12<<8)+4:\n\t    VAR_4->underlinewidth = VAR_11[VAR_8-1];\n\t  break;\n\t  case (12<<8)+5:\n\t    VAR_4->painttype = VAR_11[VAR_8-1];\n\t  break;\n\t  case (12<<8)+6:\n\t    VAR_4->charstringtype = VAR_11[VAR_8-1];\n\t  break;\n\t  case (12<<8)+7:\n\t    memcpy(VAR_4->fontmatrix,VAR_11,(VAR_8>=6?6:VAR_8)*sizeof(real));\n\t    VAR_4->fontmatrix_set = 1;\n\t  break;\n\t  case 13:\n\t    VAR_4->uniqueid = VAR_11[VAR_8-1];\n\t  break;\n\t  case 5:\n\t    memcpy(VAR_4->fontbb,VAR_11,(VAR_8>=4?4:VAR_8)*sizeof(real));\n\t  break;\n\t  case (12<<8)+8:\n\t    VAR_4->strokewidth = VAR_11[VAR_8-1];\n\t  break;\n\t  case 14:\n\t    for ( VAR_10=0; VAR_10<VAR_8 && VAR_10<20; ++VAR_10 )\n\t\tVAR_4->xuid[VAR_10] = VAR_11[VAR_10];\n\t  break;\n\t  case 15:\n\t    VAR_4->charsetoff = VAR_11[VAR_8-1];\n\t  break;\n\t  case 16:\n\t    VAR_4->encodingoff = VAR_11[VAR_8-1];\n\t  break;\n\t  case 17:\n\t    VAR_4->charstringsoff = VAR_11[VAR_8-1];\n\t  break;\n\t  case 18:\n\t    VAR_4->private_size = VAR_11[0];\n\t    VAR_4->private_offset = VAR_11[1];\n\t  break;\n\t  case (12<<8)+20:\n\t    LogError( _(\"FontForge does not support synthetic fonts\\n\") );\n\t    VAR_4->synthetic_base = VAR_11[VAR_8-1];\n\t  break;\n\t  case (12<<8)+21:\n\t    VAR_4->postscript_code = VAR_11[VAR_8-1];\n\t  break;\n\t  case (12<<8)+22:\n\t    VAR_4->basefontname = VAR_11[VAR_8-1];\n\t  break;\n\t  case (12<<8)+23:\n\t    for ( VAR_10=0; VAR_10<VAR_8 && VAR_10<16; ++VAR_10 )\n\t\tVAR_4->basefontblend[VAR_10] = VAR_11[VAR_10];\n\t  break;\n\t  case (12<<8)+24:\n\t    LogError( _(\"FontForge does not support type2 multiple master fonts\\n\") );\n\t    VAR_3->bad_cff = true;\n\t    if (VAR_8 < 4) {\n\t        LogError(_(\"CFF dict stack underflow detected: %d < 4\\n\"), VAR_8);\n\t        break;\n\t    }\n\t    VAR_4->nMasters = VAR_11[0];\n\t    VAR_4->nAxes = VAR_8-4;\n\t    memcpy(VAR_4->weightvector,VAR_11+1,(VAR_8-4)*sizeof(real));\n\t    VAR_4->lenBuildCharArray = VAR_11[VAR_8-3];\n\t    VAR_4->NormalizeDesignVector = VAR_11[VAR_8-2];\t/* COMMENT_3 */\n\t    VAR_4->ConvertDesignVector = VAR_11[VAR_8-1];\n\t  break;\n\t  case (12<<8)+26:\n\t    for ( VAR_10=0; VAR_10<VAR_8 && VAR_10<16; ++VAR_10 )\n\t\tVAR_4->blendaxistypes[VAR_10] = VAR_11[VAR_10];\n\t    VAR_4->blendaxistypes[VAR_10] = -1;\n\t  break;\n\t  case (12<<8)+30:\n\t    VAR_4->ros_registry = VAR_11[0];\n\t    VAR_4->ros_ordering = VAR_11[1];\n\t    VAR_4->ros_supplement = VAR_11[2];\n\t  break;\n\t  case (12<<8)+31:\n\t    VAR_4->cidfontversion = VAR_11[VAR_8-1];\n\t  break;\n\t  case (12<<8)+32:\n\t    VAR_4->cidfontrevision = VAR_11[VAR_8-1];\n\t  break;\n\t  case (12<<8)+33:\n\t    VAR_4->cidfonttype = VAR_11[VAR_8-1];\n\t  break;\n\t  case (12<<8)+34:\n\t    VAR_4->cidcount = VAR_11[VAR_8-1];\n\t  break;\n\t  case (12<<8)+35:\n\t    VAR_4->uidbase = VAR_11[VAR_8-1];\n\t  break;\n\t  case (12<<8)+36:\n\t    VAR_4->fdarrayoff = VAR_11[VAR_8-1];\n\t  break;\n\t  case (12<<8)+37:\n\t    VAR_4->fdselectoff = VAR_11[VAR_8-1];\n\t  break;\n\t  case (12<<8)+38:\n\t    VAR_4->sid_fontname = VAR_11[VAR_8-1];\n\t  break;\n\t  case (12<<8)+39:\n\t    LogError(_(\"FontForge does not support Chameleon fonts\\n\"));;\n\t  break;\n\t  default:\n\t    LogError(_(\"Unknown operator in %s: %x\\n\"), VAR_1, VAR_7 );\n\t    VAR_3->bad_cff = true;\n\t  break;\n\t}\n    }\nreturn( VAR_4 );\n}",
  "func_graph_path": "fontforge/5a0c6522682b0788fc478dd159dd6168cb5fa38b/parsettf.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -22,7 +22,7 @@\n \n     /* Multiple master fonts can have Type2 operators here, particularly */\n     /*  blend operators. We're ignoring that */\n-    while ( ftell(ttf)<base+len ) {\n+    while ( !feof(ttf) && ftell(ttf)<base+len ) {\n \tsp = 0;\n \twhile ( (ret=readcffthing(ttf,&ival,&stack[sp],&oval,info))!=3 && ftell(ttf)<base+len ) {\n \t    if ( ret==1 )",
  "diff_line_info": {
    "deleted_lines": [
      "    while ( ftell(ttf)<base+len ) {"
    ],
    "added_lines": [
      "    while ( !feof(ttf) && ftell(ttf)<base+len ) {"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/fontforge/fontforge/pull/3124",
  "description": {
    "pr_info": {
      "title": "Fix a few cves",
      "number": 3124
    },
    "comment": [
      "So the long and the short of it is that FontForge was not designed with security in mind. I would not be surprised at all if a simple permutation on the test cases resulted in another buffer overflow/out of bounds read/etc. There's just too many cases to cover.\r\n\r\nAnyway, this fixes most of the *specific* test cases as listed in #3123. I've avoided #3097 and #3098 which involves changing the codegen around the unicode library. For any other issue in that list where there isn't a specific commit, it's probably been fixed as a side effect of one of the other commits.",
      "Just in time. I'm cutting a release tomorrow. I'll review as soon as I get a chance.\r\n",
      "I made one inline comment/query. It otherwise looks fine.\r\n",
      "All good.\r\n"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 0.95"
}