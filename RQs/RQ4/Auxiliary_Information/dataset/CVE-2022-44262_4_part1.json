{
  "cve_id": "CVE-2022-44262",
  "cwe_ids": [
    "CWE-Other"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
  "cvss_is_v3": true,
  "repo_name": "ff4j",
  "commit_msg": "fix: Validate FlippingStrategy in various parsers (#624)",
  "commit_hash": "991df72725f78adbc413d9b0fbb676201f1882e0",
  "git_url": "https://github.com/ff4j/ff4j/commit/991df72725f78adbc413d9b0fbb676201f1882e0",
  "file_path": "ff4j-core/src/main/java/org/ff4j/conf/XmlParser.java",
  "func_name": "parseFlipStrategy",
  "func_before": "private FlippingStrategy parseFlipStrategy(Element flipStrategyTag, String uid) {\n        NamedNodeMap nnm = flipStrategyTag.getAttributes();\n        FlippingStrategy flipStrategy;\n        if (nnm.getNamedItem(FLIPSTRATEGY_ATTCLASS) == null) {\n            throw new IllegalArgumentException(\"Error syntax in configuration file : '\" + FLIPSTRATEGY_ATTCLASS\n                    + \"' is required for each flipstrategy (feature=\" + uid + \")\");\n        }\n\n        try {\n            // Attribute CLASS\n            String clazzName = nnm.getNamedItem(FLIPSTRATEGY_ATTCLASS).getNodeValue();\n            flipStrategy = (FlippingStrategy) Class.forName(clazzName).newInstance();\n\n            // LIST OF PARAMS\n            Map<String, String> parameters = new LinkedHashMap<String, String>();\n            NodeList initparamsNodes = flipStrategyTag.getElementsByTagName(FLIPSTRATEGY_PARAMTAG);\n            for (int k = 0; k < initparamsNodes.getLength(); k++) {\n                Element param = (Element) initparamsNodes.item(k);\n                NamedNodeMap nnmap = param.getAttributes();\n                // Check for required attribute name\n                String currentParamName;\n                if (nnmap.getNamedItem(FLIPSTRATEGY_PARAMNAME) == null) {\n                    throw new IllegalArgumentException(ERROR_SYNTAX_IN_CONFIGURATION_FILE\n                            + \"'name' is required for each param in flipstrategy(check \" + uid + \")\");\n                }\n                currentParamName = nnmap.getNamedItem(FLIPSTRATEGY_PARAMNAME).getNodeValue();\n                // Check for value attribute\n                if (nnmap.getNamedItem(FLIPSTRATEGY_PARAMVALUE) != null) {\n                    parameters.put(currentParamName, unEscapeXML(\n                            nnmap.getNamedItem(FLIPSTRATEGY_PARAMVALUE)\n                                 .getNodeValue()));\n                } else if (param.getFirstChild() != null) {\n                    parameters.put(currentParamName, unEscapeXML(\n                            param.getFirstChild().getNodeValue()));\n                } else {\n                    throw new IllegalArgumentException(\"Parameter '\" + currentParamName + \"' in feature '\" + uid\n                            + \"' has no value, please check XML\");\n                }\n            }\n\n            flipStrategy.init(uid, parameters);\n        } catch (Exception e) {\n            throw new IllegalArgumentException(\"An error occurs during flipstrategy parsing TAG\" + uid, e);\n        }\n        return flipStrategy;\n    }",
  "abstract_func_before": "private FlippingStrategy parseFlipStrategy(Element VAR_0, String VAR_1) {\n        NamedNodeMap VAR_2 = VAR_0.getAttributes();\n        FlippingStrategy VAR_3;\n        if (VAR_2.getNamedItem(VAR_4) == null) {\n            throw new IllegalArgumentException(\"Error syntax in configuration file : '\" + VAR_4\n                    + \"' is required for each flipstrategy (feature=\" + VAR_1 + \")\");\n        }\n\n        try {\n            /* COMMENT_0 */\n            String VAR_5 = VAR_2.getNamedItem(VAR_4).getNodeValue();\n            VAR_3 = (FlippingStrategy) VAR_6.forName(VAR_5).newInstance();\n\n            /* COMMENT_1 */\n            Map<String, String> VAR_7 = new LinkedHashMap<String, String>();\n            NodeList VAR_8 = VAR_0.getElementsByTagName(VAR_9);\n            for (int VAR_10 = 0; VAR_10 < VAR_8.getLength(); VAR_10++) {\n                Element VAR_11 = (Element) VAR_8.item(VAR_10);\n                NamedNodeMap VAR_12 = VAR_11.getAttributes();\n                /* COMMENT_2 */\n                String VAR_13;\n                if (VAR_12.getNamedItem(VAR_14) == null) {\n                    throw new IllegalArgumentException(VAR_15\n                            + \"'name' is required for each param in flipstrategy(check \" + VAR_1 + \")\");\n                }\n                VAR_13 = VAR_12.getNamedItem(VAR_14).getNodeValue();\n                /* COMMENT_3 */\n                if (VAR_12.getNamedItem(VAR_16) != null) {\n                    VAR_7.put(VAR_13, unEscapeXML(\n                            VAR_12.getNamedItem(VAR_16)\n                                 .getNodeValue()));\n                } else if (VAR_11.getFirstChild() != null) {\n                    VAR_7.put(VAR_13, unEscapeXML(\n                            VAR_11.getFirstChild().getNodeValue()));\n                } else {\n                    throw new IllegalArgumentException(\"Parameter '\" + VAR_13 + \"' in feature '\" + VAR_1\n                            + \"' has no value, please check XML\");\n                }\n            }\n\n            VAR_3.init(VAR_1, VAR_7);\n        } catch (Exception VAR_17) {\n            throw new IllegalArgumentException(\"An error occurs during flipstrategy parsing TAG\" + VAR_1, VAR_17);\n        }\n        return VAR_3;\n    }",
  "func_graph_path_before": "ff4j/991df72725f78adbc413d9b0fbb676201f1882e0/XmlParser.java/vul/before/0.json",
  "func": "private FlippingStrategy parseFlipStrategy(Element flipStrategyTag, String uid) {\n        NamedNodeMap nnm = flipStrategyTag.getAttributes();\n        FlippingStrategy flipStrategy;\n        if (nnm.getNamedItem(FLIPSTRATEGY_ATTCLASS) == null) {\n            throw new IllegalArgumentException(\"Error syntax in configuration file : '\" + FLIPSTRATEGY_ATTCLASS\n                    + \"' is required for each flipstrategy (feature=\" + uid + \")\");\n        }\n\n        try {\n            // Attribute CLASS\n            String clazzName = nnm.getNamedItem(FLIPSTRATEGY_ATTCLASS).getNodeValue();\n            Class<?> typeClass = Class.forName(clazzName);\n            if (!FlippingStrategy.class.isAssignableFrom(typeClass)) {\n                throw new IllegalArgumentException(\"Cannot create flipstrategy <\" + clazzName + \"> invalid type\");\n            }\n            flipStrategy = (FlippingStrategy) typeClass.newInstance();\n\n            // LIST OF PARAMS\n            Map<String, String> parameters = new LinkedHashMap<String, String>();\n            NodeList initparamsNodes = flipStrategyTag.getElementsByTagName(FLIPSTRATEGY_PARAMTAG);\n            for (int k = 0; k < initparamsNodes.getLength(); k++) {\n                Element param = (Element) initparamsNodes.item(k);\n                NamedNodeMap nnmap = param.getAttributes();\n                // Check for required attribute name\n                String currentParamName;\n                if (nnmap.getNamedItem(FLIPSTRATEGY_PARAMNAME) == null) {\n                    throw new IllegalArgumentException(ERROR_SYNTAX_IN_CONFIGURATION_FILE\n                            + \"'name' is required for each param in flipstrategy(check \" + uid + \")\");\n                }\n                currentParamName = nnmap.getNamedItem(FLIPSTRATEGY_PARAMNAME).getNodeValue();\n                // Check for value attribute\n                if (nnmap.getNamedItem(FLIPSTRATEGY_PARAMVALUE) != null) {\n                    parameters.put(currentParamName, unEscapeXML(\n                            nnmap.getNamedItem(FLIPSTRATEGY_PARAMVALUE)\n                                 .getNodeValue()));\n                } else if (param.getFirstChild() != null) {\n                    parameters.put(currentParamName, unEscapeXML(\n                            param.getFirstChild().getNodeValue()));\n                } else {\n                    throw new IllegalArgumentException(\"Parameter '\" + currentParamName + \"' in feature '\" + uid\n                            + \"' has no value, please check XML\");\n                }\n            }\n\n            flipStrategy.init(uid, parameters);\n        } catch (Exception e) {\n            throw new IllegalArgumentException(\"An error occurs during flipstrategy parsing TAG\" + uid, e);\n        }\n        return flipStrategy;\n    }",
  "abstract_func": "private FlippingStrategy parseFlipStrategy(Element VAR_0, String VAR_1) {\n        NamedNodeMap VAR_2 = VAR_0.getAttributes();\n        FlippingStrategy VAR_3;\n        if (VAR_2.getNamedItem(VAR_4) == null) {\n            throw new IllegalArgumentException(\"Error syntax in configuration file : '\" + VAR_4\n                    + \"' is required for each flipstrategy (feature=\" + VAR_1 + \")\");\n        }\n\n        try {\n            /* COMMENT_0 */\n            String VAR_5 = VAR_2.getNamedItem(VAR_4).getNodeValue();\n            Class<?> VAR_6 = VAR_7.forName(VAR_5);\n            if (!FlippingStrategy.class.isAssignableFrom(VAR_6)) {\n                throw new IllegalArgumentException(\"Cannot create flipstrategy <\" + VAR_5 + \"> invalid type\");\n            }\n            VAR_3 = (FlippingStrategy) VAR_6.newInstance();\n\n            /* COMMENT_1 */\n            Map<String, String> VAR_8 = new LinkedHashMap<String, String>();\n            NodeList VAR_9 = VAR_0.getElementsByTagName(VAR_10);\n            for (int VAR_11 = 0; VAR_11 < VAR_9.getLength(); VAR_11++) {\n                Element VAR_12 = (Element) VAR_9.item(VAR_11);\n                NamedNodeMap VAR_13 = VAR_12.getAttributes();\n                /* COMMENT_2 */\n                String VAR_14;\n                if (VAR_13.getNamedItem(VAR_15) == null) {\n                    throw new IllegalArgumentException(VAR_16\n                            + \"'name' is required for each param in flipstrategy(check \" + VAR_1 + \")\");\n                }\n                VAR_14 = VAR_13.getNamedItem(VAR_15).getNodeValue();\n                /* COMMENT_3 */\n                if (VAR_13.getNamedItem(VAR_17) != null) {\n                    VAR_8.put(VAR_14, unEscapeXML(\n                            VAR_13.getNamedItem(VAR_17)\n                                 .getNodeValue()));\n                } else if (VAR_12.getFirstChild() != null) {\n                    VAR_8.put(VAR_14, unEscapeXML(\n                            VAR_12.getFirstChild().getNodeValue()));\n                } else {\n                    throw new IllegalArgumentException(\"Parameter '\" + VAR_14 + \"' in feature '\" + VAR_1\n                            + \"' has no value, please check XML\");\n                }\n            }\n\n            VAR_3.init(VAR_1, VAR_8);\n        } catch (Exception VAR_18) {\n            throw new IllegalArgumentException(\"An error occurs during flipstrategy parsing TAG\" + VAR_1, VAR_18);\n        }\n        return VAR_3;\n    }",
  "func_graph_path": "ff4j/991df72725f78adbc413d9b0fbb676201f1882e0/XmlParser.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -9,7 +9,11 @@\n         try {\n             // Attribute CLASS\n             String clazzName = nnm.getNamedItem(FLIPSTRATEGY_ATTCLASS).getNodeValue();\n-            flipStrategy = (FlippingStrategy) Class.forName(clazzName).newInstance();\n+            Class<?> typeClass = Class.forName(clazzName);\n+            if (!FlippingStrategy.class.isAssignableFrom(typeClass)) {\n+                throw new IllegalArgumentException(\"Cannot create flipstrategy <\" + clazzName + \"> invalid type\");\n+            }\n+            flipStrategy = (FlippingStrategy) typeClass.newInstance();\n \n             // LIST OF PARAMS\n             Map<String, String> parameters = new LinkedHashMap<String, String>();",
  "diff_line_info": {
    "deleted_lines": [
      "            flipStrategy = (FlippingStrategy) Class.forName(clazzName).newInstance();"
    ],
    "added_lines": [
      "            Class<?> typeClass = Class.forName(clazzName);",
      "            if (!FlippingStrategy.class.isAssignableFrom(typeClass)) {",
      "                throw new IllegalArgumentException(\"Cannot create flipstrategy <\" + clazzName + \"> invalid type\");",
      "            }",
      "            flipStrategy = (FlippingStrategy) typeClass.newInstance();"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/ff4j/ff4j/pull/625",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/ff4j/ff4j/pull/625: 403 Client Error: Forbidden for url: https://api.github.com/repos/ff4j/ff4j/pulls/625",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.9"
}