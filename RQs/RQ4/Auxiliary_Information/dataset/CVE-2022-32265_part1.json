{
  "cve_id": "CVE-2022-32265",
  "cwe_ids": [
    "CWE-Other"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:N/I:P/A:N",
  "cvss_is_v3": false,
  "repo_name": "wolkykim/qdecoder",
  "commit_msg": "security update: add check on improperly encoded input",
  "commit_hash": "ce7c8a7ac450a823a11b06508ef1eb7441241f81",
  "git_url": "https://github.com/wolkykim/qdecoder/commit/ce7c8a7ac450a823a11b06508ef1eb7441241f81",
  "file_path": "src/internal.c",
  "func_name": "_q_urldecode",
  "func_before": "size_t _q_urldecode(char *str)\n{\n    if (str == NULL) {\n        return 0;\n    }\n\n    char *pEncPt, *pBinPt = str;\n    for (pEncPt = str; *pEncPt != '\\0'; pEncPt++) {\n        switch (*pEncPt) {\n            case '+': {\n                *pBinPt++ = ' ';\n                break;\n            }\n            case '%': {\n                *pBinPt++ = _q_x2c(*(pEncPt + 1), *(pEncPt + 2));\n                pEncPt += 2;\n                break;\n            }\n            default: {\n                *pBinPt++ = *pEncPt;\n                break;\n            }\n        }\n    }\n    *pBinPt = '\\0';\n\n    return (pBinPt - str);\n}",
  "abstract_func_before": "size_t _q_urldecode(char *VAR_0)\n{\n    if (VAR_0 == NULL) {\n        return 0;\n    }\n\n    char *VAR_1, *VAR_2 = VAR_0;\n    for (VAR_1 = VAR_0; *VAR_1 != '\\0'; VAR_1++) {\n        switch (*VAR_1) {\n            case '+': {\n                *VAR_2++ = ' ';\n                break;\n            }\n            case '%': {\n                *VAR_2++ = _q_x2c(*(VAR_1 + 1), *(VAR_1 + 2));\n                VAR_1 += 2;\n                break;\n            }\n            default: {\n                *VAR_2++ = *VAR_1;\n                break;\n            }\n        }\n    }\n    *VAR_2 = '\\0';\n\n    return (VAR_2 - VAR_0);\n}",
  "func_graph_path_before": "wolkykim/qdecoder/ce7c8a7ac450a823a11b06508ef1eb7441241f81/internal.c/vul/before/0.json",
  "func": "size_t _q_urldecode(char *str)\n{\n    if (str == NULL) {\n        return 0;\n    }\n\n    char *pEncPt, *pBinPt = str;\n    for (pEncPt = str; *pEncPt != '\\0'; pEncPt++) {\n        switch (*pEncPt) {\n            case '+': {\n                *pBinPt++ = ' ';\n                break;\n            }\n            case '%': {\n                if (*(pEncPt + 1) != '\\0' && isxdigit(*(pEncPt + 1)) \\\n                    && *(pEncPt + 2) != '\\0' && isxdigit(*(pEncPt + 2))) {\n                    *pBinPt++ = _q_x2c(*(pEncPt + 1), *(pEncPt + 2));\n                    pEncPt += 2;\n                } else {\n                    *pBinPt++ = *pEncPt;\n                }\n                break;\n            }\n            default: {\n                *pBinPt++ = *pEncPt;\n                break;\n            }\n        }\n    }\n    *pBinPt = '\\0';\n\n    return (pBinPt - str);\n}",
  "abstract_func": "size_t _q_urldecode(char *VAR_0)\n{\n    if (VAR_0 == NULL) {\n        return 0;\n    }\n\n    char *VAR_1, *VAR_2 = VAR_0;\n    for (VAR_1 = VAR_0; *VAR_1 != '\\0'; VAR_1++) {\n        switch (*VAR_1) {\n            case '+': {\n                *VAR_2++ = ' ';\n                break;\n            }\n            case '%': {\n                if (*(VAR_1 + 1) != '\\0' && isxdigit(*(VAR_1 + 1)) \\\n                    && *(VAR_1 + 2) != '\\0' && isxdigit(*(VAR_1 + 2))) {\n                    *VAR_2++ = _q_x2c(*(VAR_1 + 1), *(VAR_1 + 2));\n                    VAR_1 += 2;\n                } else {\n                    *VAR_2++ = *VAR_1;\n                }\n                break;\n            }\n            default: {\n                *VAR_2++ = *VAR_1;\n                break;\n            }\n        }\n    }\n    *VAR_2 = '\\0';\n\n    return (VAR_2 - VAR_0);\n}",
  "func_graph_path": "wolkykim/qdecoder/ce7c8a7ac450a823a11b06508ef1eb7441241f81/internal.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -12,8 +12,13 @@\n                 break;\n             }\n             case '%': {\n-                *pBinPt++ = _q_x2c(*(pEncPt + 1), *(pEncPt + 2));\n-                pEncPt += 2;\n+                if (*(pEncPt + 1) != '\\0' && isxdigit(*(pEncPt + 1)) \\\n+                    && *(pEncPt + 2) != '\\0' && isxdigit(*(pEncPt + 2))) {\n+                    *pBinPt++ = _q_x2c(*(pEncPt + 1), *(pEncPt + 2));\n+                    pEncPt += 2;\n+                } else {\n+                    *pBinPt++ = *pEncPt;\n+                }\n                 break;\n             }\n             default: {",
  "diff_line_info": {
    "deleted_lines": [
      "                *pBinPt++ = _q_x2c(*(pEncPt + 1), *(pEncPt + 2));",
      "                pEncPt += 2;"
    ],
    "added_lines": [
      "                if (*(pEncPt + 1) != '\\0' && isxdigit(*(pEncPt + 1)) \\",
      "                    && *(pEncPt + 2) != '\\0' && isxdigit(*(pEncPt + 2))) {",
      "                    *pBinPt++ = _q_x2c(*(pEncPt + 1), *(pEncPt + 2));",
      "                    pEncPt += 2;",
      "                } else {",
      "                    *pBinPt++ = *pEncPt;",
      "                }"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/wolkykim/qdecoder/pull/29",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/wolkykim/qdecoder/pull/29: 403 Client Error: Forbidden for url: https://api.github.com/repos/wolkykim/qdecoder/pulls/29",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 1.0"
}