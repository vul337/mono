{
  "cve_id": "CVE-2020-14147",
  "cwe_ids": [
    "CWE-190",
    "CWE-787"
  ],
  "cvss_vector": "AV:N/AC:L/Au:S/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "redis",
  "commit_msg": "[FIX] revisit CVE-2015-8080 vulnerability",
  "commit_hash": "ef764dde1cca2f25d00686673d1bc89448819571",
  "git_url": "https://github.com/redis/redis/commit/ef764dde1cca2f25d00686673d1bc89448819571",
  "file_path": "deps/lua/src/lua_struct.c",
  "func_name": "optsize",
  "func_before": "static size_t optsize (lua_State *L, char opt, const char **fmt) {\n  switch (opt) {\n    case 'B': case 'b': return sizeof(char);\n    case 'H': case 'h': return sizeof(short);\n    case 'L': case 'l': return sizeof(long);\n    case 'T': return sizeof(size_t);\n    case 'f':  return sizeof(float);\n    case 'd':  return sizeof(double);\n    case 'x': return 1;\n    case 'c': return getnum(fmt, 1);\n    case 'i': case 'I': {\n      int sz = getnum(fmt, sizeof(int));\n      if (sz > MAXINTSIZE)\n        luaL_error(L, \"integral size %d is larger than limit of %d\",\n                       sz, MAXINTSIZE);\n      return sz;\n    }\n    default: return 0;  /* other cases do not need alignment */\n  }\n}",
  "abstract_func_before": "static size_t optsize (lua_State *VAR_0, char VAR_1, const char **VAR_2) {\n  switch (VAR_1) {\n    case 'B': case 'b': return sizeof(char);\n    case 'H': case 'h': return sizeof(short);\n    case 'L': case 'l': return sizeof(long);\n    case 'T': return sizeof(size_t);\n    case 'f':  return sizeof(float);\n    case 'd':  return sizeof(double);\n    case 'x': return 1;\n    case 'c': return getnum(VAR_2, 1);\n    case 'i': case 'I': {\n      int VAR_3 = getnum(VAR_2, sizeof(int));\n      if (VAR_3 > VAR_4)\n        luaL_error(VAR_0, \"integral size %d is larger than limit of %d\",\n                       VAR_3, VAR_4);\n      return VAR_3;\n    }\n    default: return 0;  /* COMMENT_0 */\n  }\n}",
  "func_graph_path_before": "redis/ef764dde1cca2f25d00686673d1bc89448819571/lua_struct.c/vul/before/1.json",
  "func": "static size_t optsize (lua_State *L, char opt, const char **fmt) {\n  switch (opt) {\n    case 'B': case 'b': return sizeof(char);\n    case 'H': case 'h': return sizeof(short);\n    case 'L': case 'l': return sizeof(long);\n    case 'T': return sizeof(size_t);\n    case 'f':  return sizeof(float);\n    case 'd':  return sizeof(double);\n    case 'x': return 1;\n    case 'c': return getnum(L, fmt, 1);\n    case 'i': case 'I': {\n      int sz = getnum(L, fmt, sizeof(int));\n      if (sz > MAXINTSIZE)\n        luaL_error(L, \"integral size %d is larger than limit of %d\",\n                       sz, MAXINTSIZE);\n      return sz;\n    }\n    default: return 0;  /* other cases do not need alignment */\n  }\n}",
  "abstract_func": "static size_t optsize (lua_State *VAR_0, char VAR_1, const char **VAR_2) {\n  switch (VAR_1) {\n    case 'B': case 'b': return sizeof(char);\n    case 'H': case 'h': return sizeof(short);\n    case 'L': case 'l': return sizeof(long);\n    case 'T': return sizeof(size_t);\n    case 'f':  return sizeof(float);\n    case 'd':  return sizeof(double);\n    case 'x': return 1;\n    case 'c': return getnum(VAR_0, VAR_2, 1);\n    case 'i': case 'I': {\n      int VAR_3 = getnum(VAR_0, VAR_2, sizeof(int));\n      if (VAR_3 > VAR_4)\n        luaL_error(VAR_0, \"integral size %d is larger than limit of %d\",\n                       VAR_3, VAR_4);\n      return VAR_3;\n    }\n    default: return 0;  /* COMMENT_0 */\n  }\n}",
  "func_graph_path": "redis/ef764dde1cca2f25d00686673d1bc89448819571/lua_struct.c/vul/after/1.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -7,9 +7,9 @@\n     case 'f':  return sizeof(float);\n     case 'd':  return sizeof(double);\n     case 'x': return 1;\n-    case 'c': return getnum(fmt, 1);\n+    case 'c': return getnum(L, fmt, 1);\n     case 'i': case 'I': {\n-      int sz = getnum(fmt, sizeof(int));\n+      int sz = getnum(L, fmt, sizeof(int));\n       if (sz > MAXINTSIZE)\n         luaL_error(L, \"integral size %d is larger than limit of %d\",\n                        sz, MAXINTSIZE);",
  "diff_line_info": {
    "deleted_lines": [
      "    case 'c': return getnum(fmt, 1);",
      "      int sz = getnum(fmt, sizeof(int));"
    ],
    "added_lines": [
      "    case 'c': return getnum(L, fmt, 1);",
      "      int sz = getnum(L, fmt, sizeof(int));"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/redis/redis/pull/6875",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/redis/redis/pull/6875: 403 Client Error: Forbidden for url: https://api.github.com/repos/redis/redis/pulls/6875",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 1.0"
}