{
  "cve_id": "CVE-2018-1000873",
  "cwe_ids": [
    "CWE-20"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "FasterXML/jackson-modules-java8",
  "commit_msg": "Refactor TestDecimalUtils to reduce repetition.",
  "commit_hash": "103f5678fe104cd6934f07f1158fe92a1e2393a7",
  "git_url": "https://github.com/FasterXML/jackson-modules-java8/commit/103f5678fe104cd6934f07f1158fe92a1e2393a7",
  "file_path": "datetime/src/test/java/com/fasterxml/jackson/datatype/jsr310/TestDecimalUtils.java",
  "func_name": "testExtractNanosecondDecimal05",
  "func_before": "@Test\n    public void testExtractNanosecondDecimal05()\n    {\n        BigDecimal value = new BigDecimal(\"19827342231\");\n\n        long seconds = value.longValue();\n        assertEquals(\"The second part is not correct.\", 19827342231L, seconds);\n\n        int nanoseconds = DecimalUtils.extractNanosecondDecimal(value,  seconds);\n        assertEquals(\"The nanosecond part is not correct.\", 0, nanoseconds);\n    }",
  "abstract_func_before": "@Test\n    public void testExtractNanosecondDecimal05()\n    {\n        BigDecimal VAR_0 = new BigDecimal(\"19827342231\");\n\n        long VAR_1 = VAR_0.longValue();\n        assertEquals(\"The second part is not correct.\", 19827342231L, VAR_1);\n\n        int VAR_2 = VAR_3.extractNanosecondDecimal(VAR_0,  VAR_1);\n        assertEquals(\"The nanosecond part is not correct.\", 0, VAR_2);\n    }",
  "func_graph_path_before": "FasterXML/jackson-modules-java8/103f5678fe104cd6934f07f1158fe92a1e2393a7/TestDecimalUtils.java/vul/before/1.json",
  "func": "@Test\n    public void testExtractNanosecondDecimal05()\n    {\n        BigDecimal value = new BigDecimal(\"19827342231\");\n        checkExtractNanos(19827342231L, 0, value);\n    }",
  "abstract_func": "@Test\n    public void testExtractNanosecondDecimal05()\n    {\n        BigDecimal VAR_0 = new BigDecimal(\"19827342231\");\n        checkExtractNanos(19827342231L, 0, VAR_0);\n    }",
  "func_graph_path": "FasterXML/jackson-modules-java8/103f5678fe104cd6934f07f1158fe92a1e2393a7/TestDecimalUtils.java/vul/after/1.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -2,10 +2,5 @@\n     public void testExtractNanosecondDecimal05()\n     {\n         BigDecimal value = new BigDecimal(\"19827342231\");\n-\n-        long seconds = value.longValue();\n-        assertEquals(\"The second part is not correct.\", 19827342231L, seconds);\n-\n-        int nanoseconds = DecimalUtils.extractNanosecondDecimal(value,  seconds);\n-        assertEquals(\"The nanosecond part is not correct.\", 0, nanoseconds);\n+        checkExtractNanos(19827342231L, 0, value);\n     }",
  "diff_line_info": {
    "deleted_lines": [
      "",
      "        long seconds = value.longValue();",
      "        assertEquals(\"The second part is not correct.\", 19827342231L, seconds);",
      "",
      "        int nanoseconds = DecimalUtils.extractNanosecondDecimal(value,  seconds);",
      "        assertEquals(\"The nanosecond part is not correct.\", 0, nanoseconds);"
    ],
    "added_lines": [
      "        checkExtractNanos(19827342231L, 0, value);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/FasterXML/jackson-modules-java8/pull/87",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/FasterXML/jackson-modules-java8/pull/87: 403 Client Error: Forbidden for url: https://api.github.com/repos/FasterXML/jackson-modules-java8/pulls/87",
  "Bug Filter": "Testing & Validation Updates",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Output:**\n\n**Final Classification:** Testing & Validation Updates  \n**Confidence:** 0.9  \n\n**Step-by-Step Explanation:**\n\n**Step1: Input Analysis**  \n- Commit Message: \"Refactor TestDecimalUtils to reduce repetition.\"  \n- Vulnerability Description: Discusses fixing latency issues with BigDecimal values, not security-related.  \n- Code Diff: Modifies a test method by replacing multiple lines with a helper method call.\n\n**Step2: Consistency Check**  \n- The commit message aligns with the code changes focusing on test refactoring.\n\n**Step3: Purpose Evaluation**  \n- The changes improve test code without fixing bugs or introducing features.\n\n**Step4: Security Assessment**  \n- No mention of security issues or CVE/CWE identifiers.\n\n**Step5: Non-Security Classification**  \n- Classification: Testing & Validation Updates.\n\n**Step6: Confidence Scoring**  \n- High confidence (0.9) as all info points to testing improvements."
}