{
  "cve_id": "CVE-2021-42646",
  "cwe_ids": [
    "CWE-611"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "wso2/carbon-identity-framework",
  "commit_msg": "Create secure parser for unmarshalling SP file content",
  "commit_hash": "e9119883ee02a884f3c76c7bbc4022a4f4c58fc0",
  "git_url": "https://github.com/wso2/carbon-identity-framework/commit/e9119883ee02a884f3c76c7bbc4022a4f4c58fc0",
  "file_path": "components/application-mgt/org.wso2.carbon.identity.application.mgt/src/main/java/org/wso2/carbon/identity/application/mgt/ApplicationManagementServiceImpl.java",
  "func_name": "unmarshalSP",
  "func_before": "private ServiceProvider unmarshalSP(SpFileContent spFileContent, String tenantDomain)\n            throws IdentityApplicationManagementException {\n\n        if (StringUtils.isEmpty(spFileContent.getContent())) {\n            throw new IdentityApplicationManagementException(String.format(\"Empty Service Provider configuration file\" +\n                    \" %s uploaded by tenant: %s\", spFileContent.getFileName(), tenantDomain));\n        }\n        try {\n            JAXBContext jaxbContext = JAXBContext.newInstance(ServiceProvider.class);\n            Unmarshaller unmarshaller = jaxbContext.createUnmarshaller();\n            return (ServiceProvider) unmarshaller.unmarshal(new ByteArrayInputStream(\n                    spFileContent.getContent().getBytes(StandardCharsets.UTF_8)));\n\n        } catch (JAXBException e) {\n            throw new IdentityApplicationManagementException(String.format(\"Error in reading Service Provider \" +\n                    \"configuration file %s uploaded by tenant: %s\", spFileContent.getFileName(), tenantDomain), e);\n        }\n    }",
  "abstract_func_before": "private ServiceProvider unmarshalSP(SpFileContent VAR_0, String VAR_1)\n            throws IdentityApplicationManagementException {\n\n        if (VAR_2.isEmpty(VAR_0.getContent())) {\n            throw new IdentityApplicationManagementException(VAR_3.format(\"Empty Service Provider configuration file\" +\n                    \" %s uploaded by tenant: %s\", VAR_0.getFileName(), VAR_1));\n        }\n        try {\n            JAXBContext VAR_4 = VAR_5.newInstance(ServiceProvider.class);\n            Unmarshaller VAR_6 = VAR_4.createUnmarshaller();\n            return (ServiceProvider) VAR_6.unmarshal(new ByteArrayInputStream(\n                    VAR_0.getContent().getBytes(VAR_7.UTF_8)));\n\n        } catch (JAXBException VAR_8) {\n            throw new IdentityApplicationManagementException(VAR_3.format(\"Error in reading Service Provider \" +\n                    \"configuration file %s uploaded by tenant: %s\", VAR_0.getFileName(), VAR_1), VAR_8);\n        }\n    }",
  "func_graph_path_before": "wso2/carbon-identity-framework/e9119883ee02a884f3c76c7bbc4022a4f4c58fc0/ApplicationManagementServiceImpl.java/vul/before/0.json",
  "func": "private ServiceProvider unmarshalSP(SpFileContent spFileContent, String tenantDomain)\n            throws IdentityApplicationManagementException {\n\n        if (StringUtils.isEmpty(spFileContent.getContent())) {\n            throw new IdentityApplicationManagementException(String.format(\"Empty Service Provider configuration file\" +\n                    \" %s uploaded by tenant: %s\", spFileContent.getFileName(), tenantDomain));\n        }\n        try {\n            //Creating secure parser by disabling XXE\n            SAXParserFactory spf = SAXParserFactory.newInstance();\n            spf.setNamespaceAware(true);\n            spf.setXIncludeAware(false);\n            try {\n                spf.setFeature(Constants.SAX_FEATURE_PREFIX + Constants.EXTERNAL_GENERAL_ENTITIES_FEATURE, false);\n                spf.setFeature(Constants.SAX_FEATURE_PREFIX + Constants.EXTERNAL_PARAMETER_ENTITIES_FEATURE, false);\n                spf.setFeature(Constants.XERCES_FEATURE_PREFIX + Constants.LOAD_EXTERNAL_DTD_FEATURE, false);\n                spf.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);\n            } catch (SAXException | ParserConfigurationException e) {\n                log.error(\"Failed to load XML Processor Feature \" + Constants.EXTERNAL_GENERAL_ENTITIES_FEATURE + \" or \"\n                        + Constants.EXTERNAL_PARAMETER_ENTITIES_FEATURE + \" or \" + Constants.LOAD_EXTERNAL_DTD_FEATURE\n                        + \" or secure-processing.\");\n            }\n            //Creating source object using the secure parser\n            Source xmlSource = new SAXSource(spf.newSAXParser().getXMLReader(),\n                    new InputSource(new StringReader(spFileContent.getContent())));\n            //Performing unmarshall operation by passing the generated source object to the unmarshaller\n            JAXBContext jaxbContext = JAXBContext.newInstance(ServiceProvider.class);\n            Unmarshaller unmarshaller = jaxbContext.createUnmarshaller();\n            return (ServiceProvider) unmarshaller.unmarshal(xmlSource);\n        } catch (JAXBException | SAXException | ParserConfigurationException e) {\n            throw new IdentityApplicationManagementException(String.format(\"Error in reading Service Provider \" +\n                    \"configuration file %s uploaded by tenant: %s\", spFileContent.getFileName(), tenantDomain), e);\n        }\n    }",
  "abstract_func": "private ServiceProvider unmarshalSP(SpFileContent VAR_0, String VAR_1)\n            throws IdentityApplicationManagementException {\n\n        if (VAR_2.isEmpty(VAR_0.getContent())) {\n            throw new IdentityApplicationManagementException(VAR_3.format(\"Empty Service Provider configuration file\" +\n                    \" %s uploaded by tenant: %s\", VAR_0.getFileName(), VAR_1));\n        }\n        try {\n            /* COMMENT_0 */\n            SAXParserFactory VAR_4 = VAR_5.newInstance();\n            VAR_4.setNamespaceAware(true);\n            VAR_4.setXIncludeAware(false);\n            try {\n                VAR_4.setFeature(VAR_6.SAX_FEATURE_PREFIX + VAR_6.EXTERNAL_GENERAL_ENTITIES_FEATURE, false);\n                VAR_4.setFeature(VAR_6.SAX_FEATURE_PREFIX + VAR_6.EXTERNAL_PARAMETER_ENTITIES_FEATURE, false);\n                VAR_4.setFeature(VAR_6.XERCES_FEATURE_PREFIX + VAR_6.LOAD_EXTERNAL_DTD_FEATURE, false);\n                VAR_4.setFeature(VAR_7.FEATURE_SECURE_PROCESSING, true);\n            } catch (SAXException | ParserConfigurationException VAR_8) {\n                VAR_9.error(\"Failed to load XML Processor Feature \" + VAR_6.EXTERNAL_GENERAL_ENTITIES_FEATURE + \" or \"\n                        + VAR_6.EXTERNAL_PARAMETER_ENTITIES_FEATURE + \" or \" + VAR_6.LOAD_EXTERNAL_DTD_FEATURE\n                        + \" or secure-processing.\");\n            }\n            /* COMMENT_1 */\n            Source VAR_10 = new SAXSource(VAR_4.newSAXParser().getXMLReader(),\n                    new InputSource(new StringReader(VAR_0.getContent())));\n            /* COMMENT_2 */\n            JAXBContext VAR_11 = VAR_12.newInstance(ServiceProvider.class);\n            Unmarshaller VAR_13 = VAR_11.createUnmarshaller();\n            return (ServiceProvider) VAR_13.unmarshal(VAR_10);\n        } catch (JAXBException | SAXException | ParserConfigurationException VAR_8) {\n            throw new IdentityApplicationManagementException(VAR_3.format(\"Error in reading Service Provider \" +\n                    \"configuration file %s uploaded by tenant: %s\", VAR_0.getFileName(), VAR_1), VAR_8);\n        }\n    }",
  "func_graph_path": "wso2/carbon-identity-framework/e9119883ee02a884f3c76c7bbc4022a4f4c58fc0/ApplicationManagementServiceImpl.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -6,12 +6,28 @@\n                     \" %s uploaded by tenant: %s\", spFileContent.getFileName(), tenantDomain));\n         }\n         try {\n+            //Creating secure parser by disabling XXE\n+            SAXParserFactory spf = SAXParserFactory.newInstance();\n+            spf.setNamespaceAware(true);\n+            spf.setXIncludeAware(false);\n+            try {\n+                spf.setFeature(Constants.SAX_FEATURE_PREFIX + Constants.EXTERNAL_GENERAL_ENTITIES_FEATURE, false);\n+                spf.setFeature(Constants.SAX_FEATURE_PREFIX + Constants.EXTERNAL_PARAMETER_ENTITIES_FEATURE, false);\n+                spf.setFeature(Constants.XERCES_FEATURE_PREFIX + Constants.LOAD_EXTERNAL_DTD_FEATURE, false);\n+                spf.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);\n+            } catch (SAXException | ParserConfigurationException e) {\n+                log.error(\"Failed to load XML Processor Feature \" + Constants.EXTERNAL_GENERAL_ENTITIES_FEATURE + \" or \"\n+                        + Constants.EXTERNAL_PARAMETER_ENTITIES_FEATURE + \" or \" + Constants.LOAD_EXTERNAL_DTD_FEATURE\n+                        + \" or secure-processing.\");\n+            }\n+            //Creating source object using the secure parser\n+            Source xmlSource = new SAXSource(spf.newSAXParser().getXMLReader(),\n+                    new InputSource(new StringReader(spFileContent.getContent())));\n+            //Performing unmarshall operation by passing the generated source object to the unmarshaller\n             JAXBContext jaxbContext = JAXBContext.newInstance(ServiceProvider.class);\n             Unmarshaller unmarshaller = jaxbContext.createUnmarshaller();\n-            return (ServiceProvider) unmarshaller.unmarshal(new ByteArrayInputStream(\n-                    spFileContent.getContent().getBytes(StandardCharsets.UTF_8)));\n-\n-        } catch (JAXBException e) {\n+            return (ServiceProvider) unmarshaller.unmarshal(xmlSource);\n+        } catch (JAXBException | SAXException | ParserConfigurationException e) {\n             throw new IdentityApplicationManagementException(String.format(\"Error in reading Service Provider \" +\n                     \"configuration file %s uploaded by tenant: %s\", spFileContent.getFileName(), tenantDomain), e);\n         }",
  "diff_line_info": {
    "deleted_lines": [
      "            return (ServiceProvider) unmarshaller.unmarshal(new ByteArrayInputStream(",
      "                    spFileContent.getContent().getBytes(StandardCharsets.UTF_8)));",
      "",
      "        } catch (JAXBException e) {"
    ],
    "added_lines": [
      "            //Creating secure parser by disabling XXE",
      "            SAXParserFactory spf = SAXParserFactory.newInstance();",
      "            spf.setNamespaceAware(true);",
      "            spf.setXIncludeAware(false);",
      "            try {",
      "                spf.setFeature(Constants.SAX_FEATURE_PREFIX + Constants.EXTERNAL_GENERAL_ENTITIES_FEATURE, false);",
      "                spf.setFeature(Constants.SAX_FEATURE_PREFIX + Constants.EXTERNAL_PARAMETER_ENTITIES_FEATURE, false);",
      "                spf.setFeature(Constants.XERCES_FEATURE_PREFIX + Constants.LOAD_EXTERNAL_DTD_FEATURE, false);",
      "                spf.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);",
      "            } catch (SAXException | ParserConfigurationException e) {",
      "                log.error(\"Failed to load XML Processor Feature \" + Constants.EXTERNAL_GENERAL_ENTITIES_FEATURE + \" or \"",
      "                        + Constants.EXTERNAL_PARAMETER_ENTITIES_FEATURE + \" or \" + Constants.LOAD_EXTERNAL_DTD_FEATURE",
      "                        + \" or secure-processing.\");",
      "            }",
      "            //Creating source object using the secure parser",
      "            Source xmlSource = new SAXSource(spf.newSAXParser().getXMLReader(),",
      "                    new InputSource(new StringReader(spFileContent.getContent())));",
      "            //Performing unmarshall operation by passing the generated source object to the unmarshaller",
      "            return (ServiceProvider) unmarshaller.unmarshal(xmlSource);",
      "        } catch (JAXBException | SAXException | ParserConfigurationException e) {"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/wso2/carbon-identity-framework/pull/3472",
  "description": {
    "pr_info": {
      "title": "Create Secure Parser for Unmarshalling SP File Content",
      "number": 3472
    },
    "comment": [
      "### Proposed changes in this pull request\r\n- Creating a secure parser for Unmarshalling Service Provider File Content\r\n\r\n### Approach\r\n1. Introduced a secure SAXParserFactory\r\n2. Parsed the contained through the SAXParserFactor and generated a source object\r\n3. Perform unmarshall operation by passing the generated source object to the unmarshaller\r\n\r\n### Related PRs\r\nhttps://github.com/wso2-support/carbon-identity-framework/pull/1550\r\n",
      "PR builder started \nLink: https://github.com/wso2/product-is/actions/runs/739956280",
      "PR builder completed \nLink: https://github.com/wso2/product-is/actions/runs/739956280 \nStatus: **failure**",
      "PR builder started \nLink: https://github.com/wso2/product-is/actions/runs/751178888",
      "PR builder completed \nLink: https://github.com/wso2/product-is/actions/runs/751178888 \nStatus: **failure**"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "The patch introduces a secure SAXParserFactory with settings to prevent XXE attacks, which is a known security measure. This aligns with the commit message and description, clearly addressing a security vulnerability.\n\n**Final Classification:** Security Vulnerability Fix; **Confidence:** 1.0"
}