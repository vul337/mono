{
  "cve_id": "CVE-2019-15784",
  "cwe_ids": [
    "CWE-129"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "Haivision/srt",
  "commit_msg": "[core] CSndUList initial size is reduced to 512 elements",
  "commit_hash": "64875fa98ff6afd2f21a9727970fb4333efe95de",
  "git_url": "https://github.com/Haivision/srt/commit/64875fa98ff6afd2f21a9727970fb4333efe95de",
  "file_path": "srtcore/queue.cpp",
  "func_name": "CSndUList::remove_",
  "func_before": "void CSndUList::remove_(const CUDT* u)\n{\n   CSNode* n = u->m_pSNode;\n\n   if (n->m_iHeapLoc >= 0)\n   {\n      // remove the node from heap\n      m_pHeap[n->m_iHeapLoc] = m_pHeap[m_iLastEntry];\n      m_iLastEntry --;\n      m_pHeap[n->m_iHeapLoc]->m_iHeapLoc = n->m_iHeapLoc;\n\n      int q = n->m_iHeapLoc;\n      int p = q * 2 + 1;\n      while (p <= m_iLastEntry)\n      {\n         if ((p + 1 <= m_iLastEntry) && (m_pHeap[p]->m_llTimeStamp_tk > m_pHeap[p + 1]->m_llTimeStamp_tk))\n            p ++;\n\n         if (m_pHeap[q]->m_llTimeStamp_tk > m_pHeap[p]->m_llTimeStamp_tk)\n         {\n            CSNode* t = m_pHeap[p];\n            m_pHeap[p] = m_pHeap[q];\n            m_pHeap[p]->m_iHeapLoc = p;\n            m_pHeap[q] = t;\n            m_pHeap[q]->m_iHeapLoc = q;\n\n            q = p;\n            p = q * 2 + 1;\n         }\n         else\n            break;\n      }\n\n      n->m_iHeapLoc = -1;\n   }\n\n   // the only event has been deleted, wake up immediately\n   if (0 == m_iLastEntry)\n      m_pTimer->interrupt();\n}",
  "abstract_func_before": "void CSndUList::remove_(const CUDT* VAR_0)\n{\n   CSNode* VAR_1 = VAR_0->m_pSNode;\n\n   if (VAR_1->m_iHeapLoc >= 0)\n   {\n      /* COMMENT_0 */\n      VAR_2[VAR_1->m_iHeapLoc] = VAR_2[VAR_3];\n      VAR_3 --;\n      VAR_2[VAR_1->m_iHeapLoc]->m_iHeapLoc = VAR_1->m_iHeapLoc;\n\n      int VAR_4 = VAR_1->m_iHeapLoc;\n      int VAR_5 = VAR_4 * 2 + 1;\n      while (VAR_5 <= VAR_3)\n      {\n         if ((VAR_5 + 1 <= VAR_3) && (VAR_2[VAR_5]->m_llTimeStamp_tk > VAR_2[VAR_5 + 1]->m_llTimeStamp_tk))\n            VAR_5 ++;\n\n         if (VAR_2[VAR_4]->m_llTimeStamp_tk > VAR_2[VAR_5]->m_llTimeStamp_tk)\n         {\n            CSNode* VAR_6 = VAR_2[VAR_5];\n            VAR_2[VAR_5] = VAR_2[VAR_4];\n            VAR_2[VAR_5]->m_iHeapLoc = VAR_5;\n            VAR_2[VAR_4] = VAR_6;\n            VAR_2[VAR_4]->m_iHeapLoc = VAR_4;\n\n            VAR_4 = VAR_5;\n            VAR_5 = VAR_4 * 2 + 1;\n         }\n         else\n            break;\n      }\n\n      VAR_1->m_iHeapLoc = -1;\n   }\n\n   /* COMMENT_1 */\n   if (0 == VAR_3)\n      VAR_7->interrupt();\n}",
  "func_graph_path_before": "Haivision/srt/64875fa98ff6afd2f21a9727970fb4333efe95de/queue.cpp/vul/before/3.json",
  "func": "void CSndUList::remove_(const CUDT* u)\n{\n   CSNode* n = u->m_pSNode;\n\n   if (n->m_iHeapLoc >= 0)\n   {\n      // remove the node from heap\n      m_pHeap[n->m_iHeapLoc] = m_pHeap[m_iLastEntry];\n      m_iLastEntry --;\n      m_pHeap[n->m_iHeapLoc]->m_iHeapLoc = n->m_iHeapLoc;\n\n      int q = n->m_iHeapLoc;\n      int p = q * 2 + 1;\n      while (p <= m_iLastEntry)\n      {\n         if ((p + 1 <= m_iLastEntry) && (m_pHeap[p]->m_llTimeStamp_tk > m_pHeap[p + 1]->m_llTimeStamp_tk))\n            p ++;\n\n         if (m_pHeap[q]->m_llTimeStamp_tk > m_pHeap[p]->m_llTimeStamp_tk)\n         {\n            swap(m_pHeap[p], m_pHeap[q]);\n            m_pHeap[p]->m_iHeapLoc = p;\n            m_pHeap[q]->m_iHeapLoc = q;\n\n            q = p;\n            p = q * 2 + 1;\n         }\n         else\n            break;\n      }\n\n      n->m_iHeapLoc = -1;\n   }\n\n   // the only event has been deleted, wake up immediately\n   if (0 == m_iLastEntry)\n      m_pTimer->interrupt();\n}",
  "abstract_func": "void CSndUList::remove_(const CUDT* VAR_0)\n{\n   CSNode* VAR_1 = VAR_0->m_pSNode;\n\n   if (VAR_1->m_iHeapLoc >= 0)\n   {\n      /* COMMENT_0 */\n      VAR_2[VAR_1->m_iHeapLoc] = VAR_2[VAR_3];\n      VAR_3 --;\n      VAR_2[VAR_1->m_iHeapLoc]->m_iHeapLoc = VAR_1->m_iHeapLoc;\n\n      int VAR_4 = VAR_1->m_iHeapLoc;\n      int VAR_5 = VAR_4 * 2 + 1;\n      while (VAR_5 <= VAR_3)\n      {\n         if ((VAR_5 + 1 <= VAR_3) && (VAR_2[VAR_5]->m_llTimeStamp_tk > VAR_2[VAR_5 + 1]->m_llTimeStamp_tk))\n            VAR_5 ++;\n\n         if (VAR_2[VAR_4]->m_llTimeStamp_tk > VAR_2[VAR_5]->m_llTimeStamp_tk)\n         {\n            swap(VAR_2[VAR_5], VAR_2[VAR_4]);\n            VAR_2[VAR_5]->m_iHeapLoc = VAR_5;\n            VAR_2[VAR_4]->m_iHeapLoc = VAR_4;\n\n            VAR_4 = VAR_5;\n            VAR_5 = VAR_4 * 2 + 1;\n         }\n         else\n            break;\n      }\n\n      VAR_1->m_iHeapLoc = -1;\n   }\n\n   /* COMMENT_1 */\n   if (0 == VAR_3)\n      VAR_6->interrupt();\n}",
  "func_graph_path": "Haivision/srt/64875fa98ff6afd2f21a9727970fb4333efe95de/queue.cpp/vul/after/3.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -18,10 +18,8 @@\n \n          if (m_pHeap[q]->m_llTimeStamp_tk > m_pHeap[p]->m_llTimeStamp_tk)\n          {\n-            CSNode* t = m_pHeap[p];\n-            m_pHeap[p] = m_pHeap[q];\n+            swap(m_pHeap[p], m_pHeap[q]);\n             m_pHeap[p]->m_iHeapLoc = p;\n-            m_pHeap[q] = t;\n             m_pHeap[q]->m_iHeapLoc = q;\n \n             q = p;",
  "diff_line_info": {
    "deleted_lines": [
      "            CSNode* t = m_pHeap[p];",
      "            m_pHeap[p] = m_pHeap[q];",
      "            m_pHeap[q] = t;"
    ],
    "added_lines": [
      "            swap(m_pHeap[p], m_pHeap[q]);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/Haivision/srt/pull/811",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/Haivision/srt/pull/811: 403 Client Error: Forbidden for url: https://api.github.com/repos/Haivision/srt/pulls/811",
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Defect Remediation & Feature Upgrades; **Confidence:** 0.9"
}