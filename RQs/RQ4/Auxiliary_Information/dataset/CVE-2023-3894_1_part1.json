{
  "cve_id": "CVE-2023-3894",
  "cwe_ids": [
    "CWE-787"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
  "cvss_is_v3": true,
  "repo_name": "FasterXML/jackson-dataformats-text",
  "commit_msg": "reorder code",
  "commit_hash": "20a209387931dba31e1a027b74976911c3df39fe",
  "git_url": "https://github.com/FasterXML/jackson-dataformats-text/commit/20a209387931dba31e1a027b74976911c3df39fe",
  "file_path": "toml/src/test/java/com/fasterxml/jackson/dataformat/toml/TomlMapperTestBase.java",
  "func_name": "newTomlFactory",
  "func_before": "protected static TomlFactory newTomlFactory() {\n        return TomlFactory.builder()\n                //.enable(TomlReadFeature.VALIDATE_NESTING_DEPTH)\n                .build();\n    }",
  "abstract_func_before": "protected static TomlFactory newTomlFactory() {\n        return VAR_0.builder()\n                /* COMMENT_0 */\n                .build();\n    }",
  "func_graph_path_before": "FasterXML/jackson-dataformats-text/20a209387931dba31e1a027b74976911c3df39fe/TomlMapperTestBase.java/vul/before/0.json",
  "func": "protected static TomlFactory newTomlFactory() {\n        return TomlFactory.builder()\n                .enable(TomlReadFeature.VALIDATE_NESTING_DEPTH)\n                .build();\n    }",
  "abstract_func": "protected static TomlFactory newTomlFactory() {\n        return VAR_0.builder()\n                .enable(VAR_1.VALIDATE_NESTING_DEPTH)\n                .build();\n    }",
  "func_graph_path": "FasterXML/jackson-dataformats-text/20a209387931dba31e1a027b74976911c3df39fe/TomlMapperTestBase.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,5 +1,5 @@\n protected static TomlFactory newTomlFactory() {\n         return TomlFactory.builder()\n-                //.enable(TomlReadFeature.VALIDATE_NESTING_DEPTH)\n+                .enable(TomlReadFeature.VALIDATE_NESTING_DEPTH)\n                 .build();\n     }",
  "diff_line_info": {
    "deleted_lines": [
      "                //.enable(TomlReadFeature.VALIDATE_NESTING_DEPTH)"
    ],
    "added_lines": [
      "                .enable(TomlReadFeature.VALIDATE_NESTING_DEPTH)"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/FasterXML/jackson-dataformats-text/pull/398",
  "description": {
    "pr_info": {
      "title": "TOML: check nesting depth",
      "number": 398
    },
    "comment": [
      "* TOML code has no ReadContext so I'm just tracking depth using an int",
      "this seems like a better fix than #395. the only thing i'm concerned about is the difference of toml to the other formats. someone using only the streaming apis might set the max stream depth fairly high because they think they cannot run into the data binding issues it exists to avoid. however with toml, the depth limit is critical for streaming as well (since there is no real streaming for toml), not just for binding.\r\n\r\nbut this is probably not a realistic issue, so this still seems superior.",
      "@pjfanning i dont think the nesting check is necessary? it should be caught by the parser, every start token will have a pollExpected with the corresponding end token",
      "@yawkat I'll probably remove the check. I just wanted to see if there were any existing tests where the depth misbehaves. I'll leave the check there for the moment but as I say, I'm likely to remove it before merging.",
      "maybe it can be an `assert` and oss-fuzz can tell us if there's any case where my assumption is violated :)",
      "LGTM, but wanted to make sure this is to be merged -- anything else to wait for, change? LMK and I'll  merge it to 2.15, master.",
      "it's ok to merge - I'll follow up with more tests in another PR",
      "Ok managed to merge to `master`; was bit hairy but all tests pass so I think that's ok."
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 0.9"
}