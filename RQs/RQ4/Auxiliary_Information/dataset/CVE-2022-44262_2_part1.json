{
  "cve_id": "CVE-2022-44262",
  "cwe_ids": [
    "CWE-Other"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
  "cvss_is_v3": true,
  "repo_name": "ff4j",
  "commit_msg": "fix: Validate FlippingStrategy in various parsers (#624)",
  "commit_hash": "991df72725f78adbc413d9b0fbb676201f1882e0",
  "git_url": "https://github.com/ff4j/ff4j/commit/991df72725f78adbc413d9b0fbb676201f1882e0",
  "file_path": "ff4j-web/src/main/java/org/ff4j/web/embedded/ConsoleOperations.java",
  "func_name": "createFeature",
  "func_before": "public static void createFeature(FF4j ff4j, HttpServletRequest req) {\n        // uid\n        final String featureId = req.getParameter(FEATID);\n        if (featureId != null && !featureId.isEmpty()) {\n            Feature fp = new Feature(featureId, false);\n\n            // Description\n            final String featureDesc = req.getParameter(DESCRIPTION);\n            if (null != featureDesc && !featureDesc.isEmpty()) {\n                fp.setDescription(featureDesc);\n            }\n\n            // GroupName\n            final String groupName = req.getParameter(GROUPNAME);\n            if (null != groupName && !groupName.isEmpty()) {\n                fp.setGroup(groupName);\n            }\n\n            // Strategy\n            final String strategy = req.getParameter(STRATEGY);\n            if (null != strategy && !strategy.isEmpty()) {\n                try {\n                    Class<?> strategyClass = Class.forName(strategy);\n                    FlippingStrategy fstrategy = (FlippingStrategy) strategyClass.newInstance();\n\n                    final String strategyParams = req.getParameter(STRATEGY_INIT);\n                    if (null != strategyParams && !strategyParams.isEmpty()) {\n                        Map<String, String> initParams = new HashMap<String, String>();\n                        String[] params = strategyParams.split(\";\");\n                        for (String currentP : params) {\n                            String[] cur = currentP.split(\"=\");\n                            if (cur.length < 2) {\n                                throw new IllegalArgumentException(\"Invalid Syntax : param1=val1,val2;param2=val3,val4\");\n                            }\n                            initParams.put(cur[0], cur[1]);\n                        }\n                        fstrategy.init(featureId, initParams);\n                    }\n                    fp.setFlippingStrategy(fstrategy);\n\n                } catch (ClassNotFoundException e) {\n                    throw new IllegalArgumentException(\"Cannot find strategy class\", e);\n                } catch (InstantiationException e) {\n                    throw new IllegalArgumentException(\"Cannot instantiate strategy\", e);\n                } catch (IllegalAccessException e) {\n                    throw new IllegalArgumentException(\"Cannot instantiate : no public constructor\", e);\n                }\n            }\n\n            // Permissions\n            final String permission = req.getParameter(PERMISSION);\n            if (null != permission && PERMISSION_RESTRICTED.equals(permission)) {\n                @SuppressWarnings(\"unchecked\")\n                Map<String, Object> parameters = req.getParameterMap();\n                Set<String> permissions = new HashSet<String>();\n                for (String key : parameters.keySet()) {\n                    if (key.startsWith(PREFIX_CHECKBOX)) {\n                        permissions.add(key.replace(PREFIX_CHECKBOX, \"\"));\n                    }\n                }\n                fp.setPermissions(permissions);\n            }\n\n            // Creation\n            ff4j.getFeatureStore().create(fp);\n            LOGGER.info(featureId + \" has been created\");\n        }\n    }",
  "abstract_func_before": "public static void createFeature(FF4j VAR_0, HttpServletRequest VAR_1) {\n        /* COMMENT_0 */\n        final String VAR_2 = VAR_1.getParameter(VAR_3);\n        if (VAR_2 != null && !VAR_2.isEmpty()) {\n            Feature VAR_4 = new Feature(VAR_2, false);\n\n            /* COMMENT_1 */\n            final String VAR_5 = VAR_1.getParameter(VAR_6);\n            if (null != VAR_5 && !VAR_5.isEmpty()) {\n                VAR_4.setDescription(VAR_5);\n            }\n\n            /* COMMENT_2 */\n            final String VAR_7 = VAR_1.getParameter(VAR_8);\n            if (null != VAR_7 && !VAR_7.isEmpty()) {\n                VAR_4.setGroup(VAR_7);\n            }\n\n            /* COMMENT_3 */\n            final String VAR_9 = VAR_1.getParameter(VAR_10);\n            if (null != VAR_9 && !VAR_9.isEmpty()) {\n                try {\n                    Class<?> VAR_11 = VAR_12.forName(VAR_9);\n                    FlippingStrategy VAR_13 = (FlippingStrategy) VAR_11.newInstance();\n\n                    final String VAR_14 = VAR_1.getParameter(VAR_15);\n                    if (null != VAR_14 && !VAR_14.isEmpty()) {\n                        Map<String, String> VAR_16 = new HashMap<String, String>();\n                        String[] VAR_17 = VAR_14.split(\";\");\n                        for (String VAR_18 : VAR_17) {\n                            String[] VAR_19 = VAR_18.split(\"=\");\n                            if (VAR_19.length < 2) {\n                                throw new IllegalArgumentException(\"Invalid Syntax : param1=val1,val2;param2=val3,val4\");\n                            }\n                            VAR_16.put(VAR_19[0], VAR_19[1]);\n                        }\n                        VAR_13.init(VAR_2, VAR_16);\n                    }\n                    VAR_4.setFlippingStrategy(VAR_13);\n\n                } catch (ClassNotFoundException VAR_20) {\n                    throw new IllegalArgumentException(\"Cannot find strategy class\", VAR_20);\n                } catch (InstantiationException VAR_20) {\n                    throw new IllegalArgumentException(\"Cannot instantiate strategy\", VAR_20);\n                } catch (IllegalAccessException VAR_20) {\n                    throw new IllegalArgumentException(\"Cannot instantiate : no public constructor\", VAR_20);\n                }\n            }\n\n            /* COMMENT_4 */\n            final String VAR_21 = VAR_1.getParameter(VAR_22);\n            if (null != VAR_21 && VAR_23.equals(VAR_21)) {\n                @SuppressWarnings(\"unchecked\")\n                Map<String, Object> VAR_24 = VAR_1.getParameterMap();\n                Set<String> VAR_25 = new HashSet<String>();\n                for (String VAR_26 : VAR_24.keySet()) {\n                    if (VAR_26.startsWith(VAR_27)) {\n                        VAR_25.add(VAR_26.replace(VAR_27, \"\"));\n                    }\n                }\n                VAR_4.setPermissions(VAR_25);\n            }\n\n            /* COMMENT_5 */\n            VAR_0.getFeatureStore().create(VAR_4);\n            VAR_28.info(VAR_2 + \" has been created\");\n        }\n    }",
  "func_graph_path_before": "ff4j/991df72725f78adbc413d9b0fbb676201f1882e0/ConsoleOperations.java/vul/before/0.json",
  "func": "public static void createFeature(FF4j ff4j, HttpServletRequest req) {\n        // uid\n        final String featureId = req.getParameter(FEATID);\n        if (featureId != null && !featureId.isEmpty()) {\n            Feature fp = new Feature(featureId, false);\n\n            // Description\n            final String featureDesc = req.getParameter(DESCRIPTION);\n            if (null != featureDesc && !featureDesc.isEmpty()) {\n                fp.setDescription(featureDesc);\n            }\n\n            // GroupName\n            final String groupName = req.getParameter(GROUPNAME);\n            if (null != groupName && !groupName.isEmpty()) {\n                fp.setGroup(groupName);\n            }\n\n            // Strategy\n            final String strategy = req.getParameter(STRATEGY);\n            if (null != strategy && !strategy.isEmpty()) {\n                try {\n                    Class<?> strategyClass = Class.forName(strategy);\n                    if (!FlippingStrategy.class.isAssignableFrom(strategyClass)) {\n                        throw new IllegalArgumentException(\"Cannot create flipstrategy: <\" + strategy + \"> invalid type\");\n                    }\n                    FlippingStrategy fstrategy = (FlippingStrategy) strategyClass.newInstance();\n\n                    final String strategyParams = req.getParameter(STRATEGY_INIT);\n                    if (null != strategyParams && !strategyParams.isEmpty()) {\n                        Map<String, String> initParams = new HashMap<String, String>();\n                        String[] params = strategyParams.split(\";\");\n                        for (String currentP : params) {\n                            String[] cur = currentP.split(\"=\");\n                            if (cur.length < 2) {\n                                throw new IllegalArgumentException(\"Invalid Syntax : param1=val1,val2;param2=val3,val4\");\n                            }\n                            initParams.put(cur[0], cur[1]);\n                        }\n                        fstrategy.init(featureId, initParams);\n                    }\n                    fp.setFlippingStrategy(fstrategy);\n\n                } catch (ClassNotFoundException e) {\n                    throw new IllegalArgumentException(\"Cannot find strategy class\", e);\n                } catch (InstantiationException e) {\n                    throw new IllegalArgumentException(\"Cannot instantiate strategy\", e);\n                } catch (IllegalAccessException e) {\n                    throw new IllegalArgumentException(\"Cannot instantiate : no public constructor\", e);\n                }\n            }\n\n            // Permissions\n            final String permission = req.getParameter(PERMISSION);\n            if (null != permission && PERMISSION_RESTRICTED.equals(permission)) {\n                @SuppressWarnings(\"unchecked\")\n                Map<String, Object> parameters = req.getParameterMap();\n                Set<String> permissions = new HashSet<String>();\n                for (String key : parameters.keySet()) {\n                    if (key.startsWith(PREFIX_CHECKBOX)) {\n                        permissions.add(key.replace(PREFIX_CHECKBOX, \"\"));\n                    }\n                }\n                fp.setPermissions(permissions);\n            }\n\n            // Creation\n            ff4j.getFeatureStore().create(fp);\n            LOGGER.info(featureId + \" has been created\");\n        }\n    }",
  "abstract_func": "public static void createFeature(FF4j VAR_0, HttpServletRequest VAR_1) {\n        /* COMMENT_0 */\n        final String VAR_2 = VAR_1.getParameter(VAR_3);\n        if (VAR_2 != null && !VAR_2.isEmpty()) {\n            Feature VAR_4 = new Feature(VAR_2, false);\n\n            /* COMMENT_1 */\n            final String VAR_5 = VAR_1.getParameter(VAR_6);\n            if (null != VAR_5 && !VAR_5.isEmpty()) {\n                VAR_4.setDescription(VAR_5);\n            }\n\n            /* COMMENT_2 */\n            final String VAR_7 = VAR_1.getParameter(VAR_8);\n            if (null != VAR_7 && !VAR_7.isEmpty()) {\n                VAR_4.setGroup(VAR_7);\n            }\n\n            /* COMMENT_3 */\n            final String VAR_9 = VAR_1.getParameter(VAR_10);\n            if (null != VAR_9 && !VAR_9.isEmpty()) {\n                try {\n                    Class<?> VAR_11 = VAR_12.forName(VAR_9);\n                    if (!FlippingStrategy.class.isAssignableFrom(VAR_11)) {\n                        throw new IllegalArgumentException(\"Cannot create flipstrategy: <\" + VAR_9 + \"> invalid type\");\n                    }\n                    FlippingStrategy VAR_13 = (FlippingStrategy) VAR_11.newInstance();\n\n                    final String VAR_14 = VAR_1.getParameter(VAR_15);\n                    if (null != VAR_14 && !VAR_14.isEmpty()) {\n                        Map<String, String> VAR_16 = new HashMap<String, String>();\n                        String[] VAR_17 = VAR_14.split(\";\");\n                        for (String VAR_18 : VAR_17) {\n                            String[] VAR_19 = VAR_18.split(\"=\");\n                            if (VAR_19.length < 2) {\n                                throw new IllegalArgumentException(\"Invalid Syntax : param1=val1,val2;param2=val3,val4\");\n                            }\n                            VAR_16.put(VAR_19[0], VAR_19[1]);\n                        }\n                        VAR_13.init(VAR_2, VAR_16);\n                    }\n                    VAR_4.setFlippingStrategy(VAR_13);\n\n                } catch (ClassNotFoundException VAR_20) {\n                    throw new IllegalArgumentException(\"Cannot find strategy class\", VAR_20);\n                } catch (InstantiationException VAR_20) {\n                    throw new IllegalArgumentException(\"Cannot instantiate strategy\", VAR_20);\n                } catch (IllegalAccessException VAR_20) {\n                    throw new IllegalArgumentException(\"Cannot instantiate : no public constructor\", VAR_20);\n                }\n            }\n\n            /* COMMENT_4 */\n            final String VAR_21 = VAR_1.getParameter(VAR_22);\n            if (null != VAR_21 && VAR_23.equals(VAR_21)) {\n                @SuppressWarnings(\"unchecked\")\n                Map<String, Object> VAR_24 = VAR_1.getParameterMap();\n                Set<String> VAR_25 = new HashSet<String>();\n                for (String VAR_26 : VAR_24.keySet()) {\n                    if (VAR_26.startsWith(VAR_27)) {\n                        VAR_25.add(VAR_26.replace(VAR_27, \"\"));\n                    }\n                }\n                VAR_4.setPermissions(VAR_25);\n            }\n\n            /* COMMENT_5 */\n            VAR_0.getFeatureStore().create(VAR_4);\n            VAR_28.info(VAR_2 + \" has been created\");\n        }\n    }",
  "func_graph_path": "ff4j/991df72725f78adbc413d9b0fbb676201f1882e0/ConsoleOperations.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -21,6 +21,9 @@\n             if (null != strategy && !strategy.isEmpty()) {\n                 try {\n                     Class<?> strategyClass = Class.forName(strategy);\n+                    if (!FlippingStrategy.class.isAssignableFrom(strategyClass)) {\n+                        throw new IllegalArgumentException(\"Cannot create flipstrategy: <\" + strategy + \"> invalid type\");\n+                    }\n                     FlippingStrategy fstrategy = (FlippingStrategy) strategyClass.newInstance();\n \n                     final String strategyParams = req.getParameter(STRATEGY_INIT);",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "                    if (!FlippingStrategy.class.isAssignableFrom(strategyClass)) {",
      "                        throw new IllegalArgumentException(\"Cannot create flipstrategy: <\" + strategy + \"> invalid type\");",
      "                    }"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/ff4j/ff4j/pull/625",
  "description": {
    "pr_info": {
      "title": "fix: CVE-2022-44262 (#624)",
      "number": 625
    },
    "comment": [
      "Fixes #624 \r\n\r\nThis asserts that the Property being constructed extends `org.ff4j.property.Property`\r\n\r\n```\r\nConstructor<?> constr = Class.forName(optionalType).getConstructor(String.class, String.class);\r\nap = (Property<?>) constr.newInstance(name, strValue);\r\n```\r\n\r\nThis seems to be what is happening in the above code:\r\n\r\n1.`Class.forName(optionalType)` retrieves the target class\r\n2. `.getConstructor(String.class, String.class)` finds a constructor on the target class that accepts two String parameters\r\n3. `constr.newInstance(name, strValue)` constructs the instance (where the side effect happens)\r\n4. `(Property<?>)` type casts the new instance of the class. This throws an IllegalArgumentException, but the instance has been created already.",
      "the RCE is present in different points of the FF4j project.\r\nAll inputs must be validated with the proper \"isAssignableFrom\" method before executing \"newInstance\" of Class.forName(\"someinputstring\")\r\nThis applies to both property and strategy parsing/creating.\r\n\r\nExamples: \r\nff4j-core:\r\norg.ff4j.utils.MappingUtil line 183\r\norg.ff4j.conf.XmlParser line 387\r\n\r\nff4j-config-yaml:\r\norg.ff4j.parser.yaml.YamlParser line 175\r\n\r\n"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.85,
  "Bug Filter Response": "The commit introduces a validation check for the FlippingStrategy class, which is essential for preventing the instantiation of unauthorized or potentially malicious classes, thereby addressing a security concern.\n\n**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.85"
}