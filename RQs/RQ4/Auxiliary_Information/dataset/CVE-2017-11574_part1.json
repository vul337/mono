{
  "cve_id": "CVE-2017-11574",
  "cwe_ids": [
    "CWE-119"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "fontforge",
  "commit_msg": "parsettf.c: Fix buffer overrun condition\n\nCloses #3090",
  "commit_hash": "62b6433a81ee7ed6e0ac2d6b09ac85b885046ac3",
  "git_url": "https://github.com/fontforge/fontforge/commit/62b6433a81ee7ed6e0ac2d6b09ac85b885046ac3",
  "file_path": "fontforge/parsettf.c",
  "func_name": "readcffset",
  "func_before": "static void readcffset(FILE *ttf,struct topdicts *dict,struct ttfinfo *info) {\n    int len = dict->glyphs.cnt;\n    int i;\n    int format, cnt, j, first;\n\n    i = 0;\n    if ( dict->charsetoff==0 ) {\n\t/* ISO Adobe charset */\n\tdict->charset = malloc(len*sizeof(uint16));\n\tfor ( i=0; i<len && i<=228; ++i )\n\t    dict->charset[i] = i;\n    } else if ( dict->charsetoff==1 ) {\n\t/* Expert charset */\n\tdict->charset = malloc((len<162?162:len)*sizeof(uint16));\n\tdict->charset[0] = 0;\t\t/* .notdef */\n\tdict->charset[1] = 1;\n\tfor ( i=2; i<len && i<=238-227; ++i )\n\t    dict->charset[i] = i+227;\n\tdict->charset[12] = 13;\n\tdict->charset[13] = 14;\n\tdict->charset[14] = 15;\n\tdict->charset[15] = 99;\n\tfor ( i=16; i<len && i<=248-223; ++i )\n\t    dict->charset[i] = i+223;\n\tdict->charset[25] = 27;\n\tdict->charset[26] = 28;\n\tfor ( i=27; i<len && i<=266-222; ++i )\n\t    dict->charset[i] = i+222;\n\tdict->charset[44] = 109;\n\tdict->charset[45] = 110;\n\tfor ( i=46; i<len && i<=318-221; ++i )\n\t    dict->charset[i] = i+221;\n\tdict->charset[96] = 158;\n\tdict->charset[97] = 155;\n\tdict->charset[98] = 163;\n\tfor ( i=99; i<len && i<=326-220; ++i )\n\t    dict->charset[i] = i+220;\n\tdict->charset[107] = 150;\n\tdict->charset[108] = 164;\n\tdict->charset[109] = 169;\n\tfor ( i=110; i<len && i<=378-217; ++i )\n\t    dict->charset[i] = i+217;\n    } else if ( dict->charsetoff==2 ) {\n\t/* Expert subset charset */\n\tdict->charset = malloc((len<130?130:len)*sizeof(uint16));\n\tdict->charset[0] = 0;\t\t/* .notdef */\n\tdict->charset[1] = 1;\n\tfor ( i=2; i<len && i<=238-227; ++i )\n\t    dict->charset[i] = i+227;\n\tdict->charset[12] = 13;\n\tdict->charset[13] = 14;\n\tdict->charset[14] = 15;\n\tdict->charset[15] = 99;\n\tfor ( i=16; i<len && i<=248-223; ++i )\n\t    dict->charset[i] = i+223;\n\tdict->charset[25] = 27;\n\tdict->charset[26] = 28;\n\tfor ( i=27; i<len && i<=266-222; ++i )\n\t    dict->charset[i] = i+222;\n\tdict->charset[44] = 109;\n\tdict->charset[45] = 110;\n\tfor ( i=46; i<len && i<=272-221; ++i )\n\t    dict->charset[i] = i+221;\n\tdict->charset[51] = 300;\n\tdict->charset[52] = 301;\n\tdict->charset[53] = 302;\n\tdict->charset[54] = 305;\n\tdict->charset[55] = 314;\n\tdict->charset[56] = 315;\n\tdict->charset[57] = 158;\n\tdict->charset[58] = 155;\n\tdict->charset[59] = 163;\n\tfor ( i=60; i<len && i<=326-260; ++i )\n\t    dict->charset[i] = i+260;\n\tdict->charset[67] = 150;\n\tdict->charset[68] = 164;\n\tdict->charset[69] = 169;\n\tfor ( i=110; i<len && i<=346-217; ++i )\n\t    dict->charset[i] = i+217;\n    } else {\n\tdict->charset = malloc(len*sizeof(uint16));\n\tdict->charset[0] = 0;\t\t/* .notdef */\n\tfseek(ttf,dict->cff_start+dict->charsetoff,SEEK_SET);\n\tformat = getc(ttf);\n\tif ( format==0 ) {\n\t    for ( i=1; i<len; ++i )\n\t\tdict->charset[i] = getushort(ttf);\n\t} else if ( format==1 ) {\n\t    for ( i = 1; i<len; ) {\n\t\tfirst = dict->charset[i++] = getushort(ttf);\n\t\tcnt = getc(ttf);\n\t\tfor ( j=0; j<cnt; ++j )\n\t\t    dict->charset[i++] = ++first;\n\t    }\n\t} else if ( format==2 ) {\n\t    for ( i = 1; i<len; ) {\n\t\tfirst = dict->charset[i++] = getushort(ttf);\n\t\tcnt = getushort(ttf);\n\t\tfor ( j=0; j<cnt; ++j )\n\t\t    dict->charset[i++] = ++first;\n\t    }\n\t} else {\n\t    LogError( _(\"Unexpected charset format in cff: %d\\n\"), format );\n\t    if ( info!=NULL ) info->bad_cff = true;\n\t}\n    }\n    while ( i<len ) dict->charset[i++] = 0;\n}",
  "abstract_func_before": "static void readcffset(FILE *VAR_0,struct topdicts *VAR_1,struct ttfinfo *VAR_2) {\n    int VAR_3 = VAR_1->glyphs.cnt;\n    int VAR_4;\n    int VAR_5, VAR_6, VAR_7, VAR_8;\n\n    VAR_4 = 0;\n    if ( VAR_1->charsetoff==0 ) {\n\t/* COMMENT_0 */\n\tVAR_1->charset = malloc(VAR_3*sizeof(VAR_9));\n\tfor ( VAR_4=0; VAR_4<VAR_3 && VAR_4<=228; ++VAR_4 )\n\t    VAR_1->charset[VAR_4] = VAR_4;\n    } else if ( VAR_1->charsetoff==1 ) {\n\t/* COMMENT_1 */\n\tVAR_1->charset = malloc((VAR_3<162?162:VAR_3)*sizeof(VAR_9));\n\tVAR_1->charset[0] = 0;\t\t/* COMMENT_2 */\n\tVAR_1->charset[1] = 1;\n\tfor ( VAR_4=2; VAR_4<VAR_3 && VAR_4<=238-227; ++VAR_4 )\n\t    VAR_1->charset[VAR_4] = VAR_4+227;\n\tVAR_1->charset[12] = 13;\n\tVAR_1->charset[13] = 14;\n\tVAR_1->charset[14] = 15;\n\tVAR_1->charset[15] = 99;\n\tfor ( VAR_4=16; VAR_4<VAR_3 && VAR_4<=248-223; ++VAR_4 )\n\t    VAR_1->charset[VAR_4] = VAR_4+223;\n\tVAR_1->charset[25] = 27;\n\tVAR_1->charset[26] = 28;\n\tfor ( VAR_4=27; VAR_4<VAR_3 && VAR_4<=266-222; ++VAR_4 )\n\t    VAR_1->charset[VAR_4] = VAR_4+222;\n\tVAR_1->charset[44] = 109;\n\tVAR_1->charset[45] = 110;\n\tfor ( VAR_4=46; VAR_4<VAR_3 && VAR_4<=318-221; ++VAR_4 )\n\t    VAR_1->charset[VAR_4] = VAR_4+221;\n\tVAR_1->charset[96] = 158;\n\tVAR_1->charset[97] = 155;\n\tVAR_1->charset[98] = 163;\n\tfor ( VAR_4=99; VAR_4<VAR_3 && VAR_4<=326-220; ++VAR_4 )\n\t    VAR_1->charset[VAR_4] = VAR_4+220;\n\tVAR_1->charset[107] = 150;\n\tVAR_1->charset[108] = 164;\n\tVAR_1->charset[109] = 169;\n\tfor ( VAR_4=110; VAR_4<VAR_3 && VAR_4<=378-217; ++VAR_4 )\n\t    VAR_1->charset[VAR_4] = VAR_4+217;\n    } else if ( VAR_1->charsetoff==2 ) {\n\t/* COMMENT_3 */\n\tVAR_1->charset = malloc((VAR_3<130?130:VAR_3)*sizeof(VAR_9));\n\tVAR_1->charset[0] = 0;\t\t/* COMMENT_2 */\n\tVAR_1->charset[1] = 1;\n\tfor ( VAR_4=2; VAR_4<VAR_3 && VAR_4<=238-227; ++VAR_4 )\n\t    VAR_1->charset[VAR_4] = VAR_4+227;\n\tVAR_1->charset[12] = 13;\n\tVAR_1->charset[13] = 14;\n\tVAR_1->charset[14] = 15;\n\tVAR_1->charset[15] = 99;\n\tfor ( VAR_4=16; VAR_4<VAR_3 && VAR_4<=248-223; ++VAR_4 )\n\t    VAR_1->charset[VAR_4] = VAR_4+223;\n\tVAR_1->charset[25] = 27;\n\tVAR_1->charset[26] = 28;\n\tfor ( VAR_4=27; VAR_4<VAR_3 && VAR_4<=266-222; ++VAR_4 )\n\t    VAR_1->charset[VAR_4] = VAR_4+222;\n\tVAR_1->charset[44] = 109;\n\tVAR_1->charset[45] = 110;\n\tfor ( VAR_4=46; VAR_4<VAR_3 && VAR_4<=272-221; ++VAR_4 )\n\t    VAR_1->charset[VAR_4] = VAR_4+221;\n\tVAR_1->charset[51] = 300;\n\tVAR_1->charset[52] = 301;\n\tVAR_1->charset[53] = 302;\n\tVAR_1->charset[54] = 305;\n\tVAR_1->charset[55] = 314;\n\tVAR_1->charset[56] = 315;\n\tVAR_1->charset[57] = 158;\n\tVAR_1->charset[58] = 155;\n\tVAR_1->charset[59] = 163;\n\tfor ( VAR_4=60; VAR_4<VAR_3 && VAR_4<=326-260; ++VAR_4 )\n\t    VAR_1->charset[VAR_4] = VAR_4+260;\n\tVAR_1->charset[67] = 150;\n\tVAR_1->charset[68] = 164;\n\tVAR_1->charset[69] = 169;\n\tfor ( VAR_4=110; VAR_4<VAR_3 && VAR_4<=346-217; ++VAR_4 )\n\t    VAR_1->charset[VAR_4] = VAR_4+217;\n    } else {\n\tVAR_1->charset = malloc(VAR_3*sizeof(VAR_9));\n\tVAR_1->charset[0] = 0;\t\t/* COMMENT_2 */\n\tfseek(VAR_0,VAR_1->cff_start+VAR_1->charsetoff,VAR_10);\n\tVAR_5 = getc(VAR_0);\n\tif ( VAR_5==0 ) {\n\t    for ( VAR_4=1; VAR_4<VAR_3; ++VAR_4 )\n\t\tVAR_1->charset[VAR_4] = getushort(VAR_0);\n\t} else if ( VAR_5==1 ) {\n\t    for ( VAR_4 = 1; VAR_4<VAR_3; ) {\n\t\tVAR_8 = VAR_1->charset[VAR_4++] = getushort(VAR_0);\n\t\tVAR_6 = getc(VAR_0);\n\t\tfor ( VAR_7=0; VAR_7<VAR_6; ++VAR_7 )\n\t\t    VAR_1->charset[VAR_4++] = ++VAR_8;\n\t    }\n\t} else if ( VAR_5==2 ) {\n\t    for ( VAR_4 = 1; VAR_4<VAR_3; ) {\n\t\tVAR_8 = VAR_1->charset[VAR_4++] = getushort(VAR_0);\n\t\tVAR_6 = getushort(VAR_0);\n\t\tfor ( VAR_7=0; VAR_7<VAR_6; ++VAR_7 )\n\t\t    VAR_1->charset[VAR_4++] = ++VAR_8;\n\t    }\n\t} else {\n\t    LogError( _(\"Unexpected charset format in cff: %d\\n\"), VAR_5 );\n\t    if ( VAR_2!=NULL ) VAR_2->bad_cff = true;\n\t}\n    }\n    while ( VAR_4<VAR_3 ) VAR_1->charset[VAR_4++] = 0;\n}",
  "func_graph_path_before": "fontforge/62b6433a81ee7ed6e0ac2d6b09ac85b885046ac3/parsettf.c/vul/before/0.json",
  "func": "static void readcffset(FILE *ttf,struct topdicts *dict,struct ttfinfo *info) {\n    int len = dict->glyphs.cnt;\n    int i;\n    int format, cnt, j, first;\n\n    i = 0;\n    if ( dict->charsetoff==0 ) {\n\t/* ISO Adobe charset */\n\tdict->charset = malloc(len*sizeof(uint16));\n\tfor ( i=0; i<len && i<=228; ++i )\n\t    dict->charset[i] = i;\n    } else if ( dict->charsetoff==1 ) {\n\t/* Expert charset */\n\tdict->charset = malloc((len<162?162:len)*sizeof(uint16));\n\tdict->charset[0] = 0;\t\t/* .notdef */\n\tdict->charset[1] = 1;\n\tfor ( i=2; i<len && i<=238-227; ++i )\n\t    dict->charset[i] = i+227;\n\tdict->charset[12] = 13;\n\tdict->charset[13] = 14;\n\tdict->charset[14] = 15;\n\tdict->charset[15] = 99;\n\tfor ( i=16; i<len && i<=248-223; ++i )\n\t    dict->charset[i] = i+223;\n\tdict->charset[25] = 27;\n\tdict->charset[26] = 28;\n\tfor ( i=27; i<len && i<=266-222; ++i )\n\t    dict->charset[i] = i+222;\n\tdict->charset[44] = 109;\n\tdict->charset[45] = 110;\n\tfor ( i=46; i<len && i<=318-221; ++i )\n\t    dict->charset[i] = i+221;\n\tdict->charset[96] = 158;\n\tdict->charset[97] = 155;\n\tdict->charset[98] = 163;\n\tfor ( i=99; i<len && i<=326-220; ++i )\n\t    dict->charset[i] = i+220;\n\tdict->charset[107] = 150;\n\tdict->charset[108] = 164;\n\tdict->charset[109] = 169;\n\tfor ( i=110; i<len && i<=378-217; ++i )\n\t    dict->charset[i] = i+217;\n    } else if ( dict->charsetoff==2 ) {\n\t/* Expert subset charset */\n\tdict->charset = malloc((len<130?130:len)*sizeof(uint16));\n\tdict->charset[0] = 0;\t\t/* .notdef */\n\tdict->charset[1] = 1;\n\tfor ( i=2; i<len && i<=238-227; ++i )\n\t    dict->charset[i] = i+227;\n\tdict->charset[12] = 13;\n\tdict->charset[13] = 14;\n\tdict->charset[14] = 15;\n\tdict->charset[15] = 99;\n\tfor ( i=16; i<len && i<=248-223; ++i )\n\t    dict->charset[i] = i+223;\n\tdict->charset[25] = 27;\n\tdict->charset[26] = 28;\n\tfor ( i=27; i<len && i<=266-222; ++i )\n\t    dict->charset[i] = i+222;\n\tdict->charset[44] = 109;\n\tdict->charset[45] = 110;\n\tfor ( i=46; i<len && i<=272-221; ++i )\n\t    dict->charset[i] = i+221;\n\tdict->charset[51] = 300;\n\tdict->charset[52] = 301;\n\tdict->charset[53] = 302;\n\tdict->charset[54] = 305;\n\tdict->charset[55] = 314;\n\tdict->charset[56] = 315;\n\tdict->charset[57] = 158;\n\tdict->charset[58] = 155;\n\tdict->charset[59] = 163;\n\tfor ( i=60; i<len && i<=326-260; ++i )\n\t    dict->charset[i] = i+260;\n\tdict->charset[67] = 150;\n\tdict->charset[68] = 164;\n\tdict->charset[69] = 169;\n\tfor ( i=110; i<len && i<=346-217; ++i )\n\t    dict->charset[i] = i+217;\n    } else {\n\tdict->charset = malloc(len*sizeof(uint16));\n\tdict->charset[0] = 0;\t\t/* .notdef */\n\tfseek(ttf,dict->cff_start+dict->charsetoff,SEEK_SET);\n\tformat = getc(ttf);\n\tif ( format==0 ) {\n\t    for ( i=1; i<len; ++i )\n\t\tdict->charset[i] = getushort(ttf);\n\t} else if ( format==1 ) {\n\t    for ( i = 1; i<len; ) {\n\t\tfirst = dict->charset[i++] = getushort(ttf);\n\t\tcnt = getc(ttf);\n\t\tfor ( j=0; j<cnt && i<len; ++j )\n\t\t    dict->charset[i++] = ++first;\n\t    }\n\t} else if ( format==2 ) {\n\t    for ( i = 1; i<len; ) {\n\t\tfirst = dict->charset[i++] = getushort(ttf);\n\t\tcnt = getushort(ttf);\n\t\tfor ( j=0; j<cnt; ++j )\n\t\t    dict->charset[i++] = ++first;\n\t    }\n\t} else {\n\t    LogError( _(\"Unexpected charset format in cff: %d\\n\"), format );\n\t    if ( info!=NULL ) info->bad_cff = true;\n\t}\n    }\n    while ( i<len ) dict->charset[i++] = 0;\n}",
  "abstract_func": "static void readcffset(FILE *VAR_0,struct topdicts *VAR_1,struct ttfinfo *VAR_2) {\n    int VAR_3 = VAR_1->glyphs.cnt;\n    int VAR_4;\n    int VAR_5, VAR_6, VAR_7, VAR_8;\n\n    VAR_4 = 0;\n    if ( VAR_1->charsetoff==0 ) {\n\t/* COMMENT_0 */\n\tVAR_1->charset = malloc(VAR_3*sizeof(VAR_9));\n\tfor ( VAR_4=0; VAR_4<VAR_3 && VAR_4<=228; ++VAR_4 )\n\t    VAR_1->charset[VAR_4] = VAR_4;\n    } else if ( VAR_1->charsetoff==1 ) {\n\t/* COMMENT_1 */\n\tVAR_1->charset = malloc((VAR_3<162?162:VAR_3)*sizeof(VAR_9));\n\tVAR_1->charset[0] = 0;\t\t/* COMMENT_2 */\n\tVAR_1->charset[1] = 1;\n\tfor ( VAR_4=2; VAR_4<VAR_3 && VAR_4<=238-227; ++VAR_4 )\n\t    VAR_1->charset[VAR_4] = VAR_4+227;\n\tVAR_1->charset[12] = 13;\n\tVAR_1->charset[13] = 14;\n\tVAR_1->charset[14] = 15;\n\tVAR_1->charset[15] = 99;\n\tfor ( VAR_4=16; VAR_4<VAR_3 && VAR_4<=248-223; ++VAR_4 )\n\t    VAR_1->charset[VAR_4] = VAR_4+223;\n\tVAR_1->charset[25] = 27;\n\tVAR_1->charset[26] = 28;\n\tfor ( VAR_4=27; VAR_4<VAR_3 && VAR_4<=266-222; ++VAR_4 )\n\t    VAR_1->charset[VAR_4] = VAR_4+222;\n\tVAR_1->charset[44] = 109;\n\tVAR_1->charset[45] = 110;\n\tfor ( VAR_4=46; VAR_4<VAR_3 && VAR_4<=318-221; ++VAR_4 )\n\t    VAR_1->charset[VAR_4] = VAR_4+221;\n\tVAR_1->charset[96] = 158;\n\tVAR_1->charset[97] = 155;\n\tVAR_1->charset[98] = 163;\n\tfor ( VAR_4=99; VAR_4<VAR_3 && VAR_4<=326-220; ++VAR_4 )\n\t    VAR_1->charset[VAR_4] = VAR_4+220;\n\tVAR_1->charset[107] = 150;\n\tVAR_1->charset[108] = 164;\n\tVAR_1->charset[109] = 169;\n\tfor ( VAR_4=110; VAR_4<VAR_3 && VAR_4<=378-217; ++VAR_4 )\n\t    VAR_1->charset[VAR_4] = VAR_4+217;\n    } else if ( VAR_1->charsetoff==2 ) {\n\t/* COMMENT_3 */\n\tVAR_1->charset = malloc((VAR_3<130?130:VAR_3)*sizeof(VAR_9));\n\tVAR_1->charset[0] = 0;\t\t/* COMMENT_2 */\n\tVAR_1->charset[1] = 1;\n\tfor ( VAR_4=2; VAR_4<VAR_3 && VAR_4<=238-227; ++VAR_4 )\n\t    VAR_1->charset[VAR_4] = VAR_4+227;\n\tVAR_1->charset[12] = 13;\n\tVAR_1->charset[13] = 14;\n\tVAR_1->charset[14] = 15;\n\tVAR_1->charset[15] = 99;\n\tfor ( VAR_4=16; VAR_4<VAR_3 && VAR_4<=248-223; ++VAR_4 )\n\t    VAR_1->charset[VAR_4] = VAR_4+223;\n\tVAR_1->charset[25] = 27;\n\tVAR_1->charset[26] = 28;\n\tfor ( VAR_4=27; VAR_4<VAR_3 && VAR_4<=266-222; ++VAR_4 )\n\t    VAR_1->charset[VAR_4] = VAR_4+222;\n\tVAR_1->charset[44] = 109;\n\tVAR_1->charset[45] = 110;\n\tfor ( VAR_4=46; VAR_4<VAR_3 && VAR_4<=272-221; ++VAR_4 )\n\t    VAR_1->charset[VAR_4] = VAR_4+221;\n\tVAR_1->charset[51] = 300;\n\tVAR_1->charset[52] = 301;\n\tVAR_1->charset[53] = 302;\n\tVAR_1->charset[54] = 305;\n\tVAR_1->charset[55] = 314;\n\tVAR_1->charset[56] = 315;\n\tVAR_1->charset[57] = 158;\n\tVAR_1->charset[58] = 155;\n\tVAR_1->charset[59] = 163;\n\tfor ( VAR_4=60; VAR_4<VAR_3 && VAR_4<=326-260; ++VAR_4 )\n\t    VAR_1->charset[VAR_4] = VAR_4+260;\n\tVAR_1->charset[67] = 150;\n\tVAR_1->charset[68] = 164;\n\tVAR_1->charset[69] = 169;\n\tfor ( VAR_4=110; VAR_4<VAR_3 && VAR_4<=346-217; ++VAR_4 )\n\t    VAR_1->charset[VAR_4] = VAR_4+217;\n    } else {\n\tVAR_1->charset = malloc(VAR_3*sizeof(VAR_9));\n\tVAR_1->charset[0] = 0;\t\t/* COMMENT_2 */\n\tfseek(VAR_0,VAR_1->cff_start+VAR_1->charsetoff,VAR_10);\n\tVAR_5 = getc(VAR_0);\n\tif ( VAR_5==0 ) {\n\t    for ( VAR_4=1; VAR_4<VAR_3; ++VAR_4 )\n\t\tVAR_1->charset[VAR_4] = getushort(VAR_0);\n\t} else if ( VAR_5==1 ) {\n\t    for ( VAR_4 = 1; VAR_4<VAR_3; ) {\n\t\tVAR_8 = VAR_1->charset[VAR_4++] = getushort(VAR_0);\n\t\tVAR_6 = getc(VAR_0);\n\t\tfor ( VAR_7=0; VAR_7<VAR_6 && VAR_4<VAR_3; ++VAR_7 )\n\t\t    VAR_1->charset[VAR_4++] = ++VAR_8;\n\t    }\n\t} else if ( VAR_5==2 ) {\n\t    for ( VAR_4 = 1; VAR_4<VAR_3; ) {\n\t\tVAR_8 = VAR_1->charset[VAR_4++] = getushort(VAR_0);\n\t\tVAR_6 = getushort(VAR_0);\n\t\tfor ( VAR_7=0; VAR_7<VAR_6; ++VAR_7 )\n\t\t    VAR_1->charset[VAR_4++] = ++VAR_8;\n\t    }\n\t} else {\n\t    LogError( _(\"Unexpected charset format in cff: %d\\n\"), VAR_5 );\n\t    if ( VAR_2!=NULL ) VAR_2->bad_cff = true;\n\t}\n    }\n    while ( VAR_4<VAR_3 ) VAR_1->charset[VAR_4++] = 0;\n}",
  "func_graph_path": "fontforge/62b6433a81ee7ed6e0ac2d6b09ac85b885046ac3/parsettf.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -89,7 +89,7 @@\n \t    for ( i = 1; i<len; ) {\n \t\tfirst = dict->charset[i++] = getushort(ttf);\n \t\tcnt = getc(ttf);\n-\t\tfor ( j=0; j<cnt; ++j )\n+\t\tfor ( j=0; j<cnt && i<len; ++j )\n \t\t    dict->charset[i++] = ++first;\n \t    }\n \t} else if ( format==2 ) {",
  "diff_line_info": {
    "deleted_lines": [
      "\t\tfor ( j=0; j<cnt; ++j )"
    ],
    "added_lines": [
      "\t\tfor ( j=0; j<cnt && i<len; ++j )"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/fontforge/fontforge/pull/3124",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/fontforge/fontforge/pull/3124: 403 Client Error: Forbidden for url: https://api.github.com/repos/fontforge/fontforge/pulls/3124",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix;  \n**Confidence:** 0.9"
}