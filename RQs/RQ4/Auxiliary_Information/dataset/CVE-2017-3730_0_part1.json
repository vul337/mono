{
  "cve_id": "CVE-2017-3730",
  "cwe_ids": [
    "CWE-476"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "openssl",
  "commit_msg": "Fix missing NULL checks in CKE processing\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
  "commit_hash": "efbe126e3ebb9123ac9d058aa2bb044261342aaa",
  "git_url": "https://github.com/openssl/openssl/commit/efbe126e3ebb9123ac9d058aa2bb044261342aaa",
  "file_path": "ssl/statem/statem_clnt.c",
  "func_name": "tls_construct_cke_dhe",
  "func_before": "static int tls_construct_cke_dhe(SSL *s, unsigned char **p, int *len, int *al)\n{\n#ifndef OPENSSL_NO_DH\n    DH *dh_clnt = NULL;\n    const BIGNUM *pub_key;\n    EVP_PKEY *ckey = NULL, *skey = NULL;\n\n    skey = s->s3->peer_tmp;\n    if (skey == NULL) {\n        SSLerr(SSL_F_TLS_CONSTRUCT_CKE_DHE, ERR_R_INTERNAL_ERROR);\n        return 0;\n    }\n    ckey = ssl_generate_pkey(skey);\n    dh_clnt = EVP_PKEY_get0_DH(ckey);\n\n    if (dh_clnt == NULL || ssl_derive(s, ckey, skey) == 0) {\n        SSLerr(SSL_F_TLS_CONSTRUCT_CKE_DHE, ERR_R_INTERNAL_ERROR);\n        EVP_PKEY_free(ckey);\n        return 0;\n    }\n\n    /* send off the data */\n    DH_get0_key(dh_clnt, &pub_key, NULL);\n    *len = BN_num_bytes(pub_key);\n    s2n(*len, *p);\n    BN_bn2bin(pub_key, *p);\n    *len += 2;\n    EVP_PKEY_free(ckey);\n\n    return 1;\n#else\n    SSLerr(SSL_F_TLS_CONSTRUCT_CKE_DHE, ERR_R_INTERNAL_ERROR);\n    *al = SSL_AD_INTERNAL_ERROR;\n    return 0;\n#endif\n}",
  "abstract_func_before": "static int tls_construct_cke_dhe(SSL *VAR_0, unsigned char **VAR_1, int *VAR_2, int *VAR_3)\n{\n#ifndef VAR_4\n    DH *VAR_5 = NULL;\n    const BIGNUM *VAR_6;\n    EVP_PKEY *VAR_7 = NULL, *VAR_8 = NULL;\n\n    VAR_8 = VAR_0->s3->peer_tmp;\n    if (VAR_8 == NULL) {\n        SSLerr(VAR_9, VAR_10);\n        return 0;\n    }\n    VAR_7 = ssl_generate_pkey(VAR_8);\n    VAR_5 = EVP_PKEY_get0_DH(VAR_7);\n\n    if (VAR_5 == NULL || ssl_derive(VAR_0, VAR_7, VAR_8) == 0) {\n        SSLerr(VAR_9, VAR_10);\n        EVP_PKEY_free(VAR_7);\n        return 0;\n    }\n\n    /* COMMENT_0 */\n    DH_get0_key(VAR_5, &VAR_6, NULL);\n    *VAR_2 = BN_num_bytes(VAR_6);\n    s2n(*VAR_2, *VAR_1);\n    BN_bn2bin(VAR_6, *VAR_1);\n    *VAR_2 += 2;\n    EVP_PKEY_free(VAR_7);\n\n    return 1;\n#else\n    SSLerr(VAR_9, VAR_10);\n    *VAR_3 = VAR_11;\n    return 0;\n#endif\n}",
  "func_graph_path_before": "openssl/efbe126e3ebb9123ac9d058aa2bb044261342aaa/statem_clnt.c/vul/before/1.json",
  "func": "static int tls_construct_cke_dhe(SSL *s, unsigned char **p, int *len, int *al)\n{\n#ifndef OPENSSL_NO_DH\n    DH *dh_clnt = NULL;\n    const BIGNUM *pub_key;\n    EVP_PKEY *ckey = NULL, *skey = NULL;\n\n    skey = s->s3->peer_tmp;\n    if (skey == NULL) {\n        SSLerr(SSL_F_TLS_CONSTRUCT_CKE_DHE, ERR_R_INTERNAL_ERROR);\n        return 0;\n    }\n    ckey = ssl_generate_pkey(skey);\n    if (ckey == NULL) {\n        SSLerr(SSL_F_TLS_CONSTRUCT_CKE_DHE, ERR_R_INTERNAL_ERROR);\n        return 0;\n    }\n\n    dh_clnt = EVP_PKEY_get0_DH(ckey);\n\n    if (dh_clnt == NULL || ssl_derive(s, ckey, skey) == 0) {\n        SSLerr(SSL_F_TLS_CONSTRUCT_CKE_DHE, ERR_R_INTERNAL_ERROR);\n        EVP_PKEY_free(ckey);\n        return 0;\n    }\n\n    /* send off the data */\n    DH_get0_key(dh_clnt, &pub_key, NULL);\n    *len = BN_num_bytes(pub_key);\n    s2n(*len, *p);\n    BN_bn2bin(pub_key, *p);\n    *len += 2;\n    EVP_PKEY_free(ckey);\n\n    return 1;\n#else\n    SSLerr(SSL_F_TLS_CONSTRUCT_CKE_DHE, ERR_R_INTERNAL_ERROR);\n    *al = SSL_AD_INTERNAL_ERROR;\n    return 0;\n#endif\n}",
  "abstract_func": "static int tls_construct_cke_dhe(SSL *VAR_0, unsigned char **VAR_1, int *VAR_2, int *VAR_3)\n{\n#ifndef VAR_4\n    DH *VAR_5 = NULL;\n    const BIGNUM *VAR_6;\n    EVP_PKEY *VAR_7 = NULL, *VAR_8 = NULL;\n\n    VAR_8 = VAR_0->s3->peer_tmp;\n    if (VAR_8 == NULL) {\n        SSLerr(VAR_9, VAR_10);\n        return 0;\n    }\n    VAR_7 = ssl_generate_pkey(VAR_8);\n    if (VAR_7 == NULL) {\n        SSLerr(VAR_9, VAR_10);\n        return 0;\n    }\n\n    VAR_5 = EVP_PKEY_get0_DH(VAR_7);\n\n    if (VAR_5 == NULL || ssl_derive(VAR_0, VAR_7, VAR_8) == 0) {\n        SSLerr(VAR_9, VAR_10);\n        EVP_PKEY_free(VAR_7);\n        return 0;\n    }\n\n    /* COMMENT_0 */\n    DH_get0_key(VAR_5, &VAR_6, NULL);\n    *VAR_2 = BN_num_bytes(VAR_6);\n    s2n(*VAR_2, *VAR_1);\n    BN_bn2bin(VAR_6, *VAR_1);\n    *VAR_2 += 2;\n    EVP_PKEY_free(VAR_7);\n\n    return 1;\n#else\n    SSLerr(VAR_9, VAR_10);\n    *VAR_3 = VAR_11;\n    return 0;\n#endif\n}",
  "func_graph_path": "openssl/efbe126e3ebb9123ac9d058aa2bb044261342aaa/statem_clnt.c/vul/after/1.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -11,6 +11,11 @@\n         return 0;\n     }\n     ckey = ssl_generate_pkey(skey);\n+    if (ckey == NULL) {\n+        SSLerr(SSL_F_TLS_CONSTRUCT_CKE_DHE, ERR_R_INTERNAL_ERROR);\n+        return 0;\n+    }\n+\n     dh_clnt = EVP_PKEY_get0_DH(ckey);\n \n     if (dh_clnt == NULL || ssl_derive(s, ckey, skey) == 0) {",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "    if (ckey == NULL) {",
      "        SSLerr(SSL_F_TLS_CONSTRUCT_CKE_DHE, ERR_R_INTERNAL_ERROR);",
      "        return 0;",
      "    }",
      ""
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/EktapopaT/openssl/pull/1",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/EktapopaT/openssl/pull/1: 403 Client Error: Forbidden for url: https://api.github.com/repos/EktapopaT/openssl/pulls/1",
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.7,
  "Bug Filter Response": "**Final Classification:** Defect Remediation & Feature Upgrades; **Confidence:** 0.7\n\nThe patch adds a NULL check to prevent potential issues in the TLS processing function, which addresses a bug in the core logic. The change is a defect remediation without explicit security context."
}