{
  "cve_id": "CVE-2020-9483",
  "cwe_ids": [
    "CWE-89"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:N/A:N",
  "cvss_is_v3": false,
  "repo_name": "apache/skywalking",
  "commit_msg": "Fix security issue of the metrics query",
  "commit_hash": "2b6aae3b733f9dbeae1d6eff4f1975c723e1e7d1",
  "git_url": "https://github.com/apache/skywalking/commit/2b6aae3b733f9dbeae1d6eff4f1975c723e1e7d1",
  "file_path": "oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2MetricsQueryDAO.java",
  "func_name": "getThermodynamic",
  "func_before": "@Override\n    public Thermodynamic getThermodynamic(String tableName, DownSampling downsampling, List<String> ids,\n                                          String valueCName) throws IOException {\n        StringBuilder idValues = new StringBuilder();\n        for (int valueIdx = 0; valueIdx < ids.size(); valueIdx++) {\n            if (valueIdx != 0) {\n                idValues.append(\",\");\n            }\n            idValues.append(\"'\").append(ids.get(valueIdx)).append(\"'\");\n        }\n\n        List<List<Long>> thermodynamicValueCollection = new ArrayList<>();\n        Map<String, List<Long>> thermodynamicValueMatrix = new HashMap<>();\n\n        try (Connection connection = h2Client.getConnection()) {\n            Thermodynamic thermodynamic = new Thermodynamic();\n            int numOfSteps = 0;\n            int axisYStep = 0;\n            try (ResultSet resultSet = h2Client.executeQuery(\n                connection,\n                \"select \" + ThermodynamicMetrics.STEP + \" step, \" + ThermodynamicMetrics.NUM_OF_STEPS + \" num_of_steps, \" + ThermodynamicMetrics.DETAIL_GROUP + \" detail_group, \" + \"id \" + \" from \" + tableName + \" where id in (\" + idValues\n                    .toString() + \")\"\n            )) {\n\n                while (resultSet.next()) {\n                    axisYStep = resultSet.getInt(\"step\");\n                    String id = resultSet.getString(\"id\");\n                    numOfSteps = resultSet.getInt(\"num_of_steps\") + 1;\n                    String value = resultSet.getString(\"detail_group\");\n                    IntKeyLongValueHashMap intKeyLongValues = new IntKeyLongValueHashMap(5);\n                    intKeyLongValues.toObject(value);\n\n                    List<Long> axisYValues = new ArrayList<>();\n                    for (int i = 0; i < numOfSteps; i++) {\n                        axisYValues.add(0L);\n                    }\n\n                    for (IntKeyLongValue intKeyLongValue : intKeyLongValues.values()) {\n                        axisYValues.set(intKeyLongValue.getKey(), intKeyLongValue.getValue());\n                    }\n\n                    thermodynamicValueMatrix.put(id, axisYValues);\n                }\n\n                // try to add default values when there is no data in that time bucket.\n                ids.forEach(id -> {\n                    if (thermodynamicValueMatrix.containsKey(id)) {\n                        thermodynamicValueCollection.add(thermodynamicValueMatrix.get(id));\n                    } else {\n                        thermodynamicValueCollection.add(new ArrayList<>());\n                    }\n                });\n            }\n\n            thermodynamic.fromMatrixData(thermodynamicValueCollection, numOfSteps);\n            thermodynamic.setAxisYStep(axisYStep);\n\n            return thermodynamic;\n        } catch (SQLException e) {\n            throw new IOException(e);\n        }\n    }",
  "abstract_func_before": "@Override\n    public Thermodynamic getThermodynamic(String VAR_0, DownSampling VAR_1, List<String> VAR_2,\n                                          String VAR_3) throws IOException {\n        StringBuilder VAR_4 = new StringBuilder();\n        for (int VAR_5 = 0; VAR_5 < VAR_2.size(); VAR_5++) {\n            if (VAR_5 != 0) {\n                VAR_4.append(\",\");\n            }\n            VAR_4.append(\"'\").append(VAR_2.get(VAR_5)).append(\"'\");\n        }\n\n        List<List<Long>> VAR_6 = new ArrayList<>();\n        Map<String, List<Long>> VAR_7 = new HashMap<>();\n\n        try (Connection VAR_8 = VAR_9.getConnection()) {\n            Thermodynamic VAR_10 = new Thermodynamic();\n            int VAR_11 = 0;\n            int VAR_12 = 0;\n            try (ResultSet VAR_13 = VAR_9.executeQuery(\n                VAR_8,\n                \"select \" + VAR_14.STEP + \" step, \" + VAR_14.NUM_OF_STEPS + \" num_of_steps, \" + VAR_14.DETAIL_GROUP + \" detail_group, \" + \"id \" + \" from \" + VAR_0 + \" where id in (\" + VAR_4\n                    .toString() + \")\"\n            )) {\n\n                while (VAR_13.next()) {\n                    VAR_12 = VAR_13.getInt(\"step\");\n                    String VAR_15 = VAR_13.getString(\"id\");\n                    VAR_11 = VAR_13.getInt(\"num_of_steps\") + 1;\n                    String VAR_16 = VAR_13.getString(\"detail_group\");\n                    IntKeyLongValueHashMap VAR_17 = new IntKeyLongValueHashMap(5);\n                    VAR_17.toObject(VAR_16);\n\n                    List<Long> VAR_18 = new ArrayList<>();\n                    for (int VAR_19 = 0; VAR_19 < VAR_11; VAR_19++) {\n                        VAR_18.add(0L);\n                    }\n\n                    for (IntKeyLongValue VAR_20 : VAR_17.values()) {\n                        VAR_18.set(VAR_20.getKey(), VAR_20.getValue());\n                    }\n\n                    VAR_7.put(VAR_15, VAR_18);\n                }\n\n                /* COMMENT_0 */\n                VAR_2.forEach(VAR_15 -> {\n                    if (VAR_7.containsKey(VAR_15)) {\n                        VAR_6.add(VAR_7.get(VAR_15));\n                    } else {\n                        VAR_6.add(new ArrayList<>());\n                    }\n                });\n            }\n\n            VAR_10.fromMatrixData(VAR_6, VAR_11);\n            VAR_10.setAxisYStep(VAR_12);\n\n            return VAR_10;\n        } catch (SQLException VAR_21) {\n            throw new IOException(VAR_21);\n        }\n    }",
  "func_graph_path_before": "apache/skywalking/2b6aae3b733f9dbeae1d6eff4f1975c723e1e7d1/H2MetricsQueryDAO.java/vul/before/1.json",
  "func": "@Override\n    public Thermodynamic getThermodynamic(String tableName, DownSampling downsampling, List<String> ids,\n                                          String valueCName) throws IOException {\n        StringBuilder sql = new StringBuilder(\n            \"select \" + ThermodynamicMetrics.STEP + \" step, \" + ThermodynamicMetrics.NUM_OF_STEPS + \" num_of_steps, \" + ThermodynamicMetrics.DETAIL_GROUP + \" detail_group, \" + \"id \" + \" from \" + tableName + \" where id in (\");\n        List<Object> parameters = new ArrayList();\n        for (int i = 0; i < ids.size(); i++) {\n            if (i == 0) {\n                sql.append(\"?\");\n            } else {\n                sql.append(\",?\");\n            }\n            parameters.add(ids.get(i));\n        }\n        sql.append(\")\");\n\n        List<List<Long>> thermodynamicValueCollection = new ArrayList<>();\n        Map<String, List<Long>> thermodynamicValueMatrix = new HashMap<>();\n\n        try (Connection connection = h2Client.getConnection()) {\n            Thermodynamic thermodynamic = new Thermodynamic();\n            int numOfSteps = 0;\n            int axisYStep = 0;\n            try (ResultSet resultSet = h2Client.executeQuery(\n                connection, sql.toString(), parameters.toArray(new Object[0]))) {\n\n                while (resultSet.next()) {\n                    axisYStep = resultSet.getInt(\"step\");\n                    String id = resultSet.getString(\"id\");\n                    numOfSteps = resultSet.getInt(\"num_of_steps\") + 1;\n                    String value = resultSet.getString(\"detail_group\");\n                    IntKeyLongValueHashMap intKeyLongValues = new IntKeyLongValueHashMap(5);\n                    intKeyLongValues.toObject(value);\n\n                    List<Long> axisYValues = new ArrayList<>();\n                    for (int i = 0; i < numOfSteps; i++) {\n                        axisYValues.add(0L);\n                    }\n\n                    for (IntKeyLongValue intKeyLongValue : intKeyLongValues.values()) {\n                        axisYValues.set(intKeyLongValue.getKey(), intKeyLongValue.getValue());\n                    }\n\n                    thermodynamicValueMatrix.put(id, axisYValues);\n                }\n\n                // try to add default values when there is no data in that time bucket.\n                ids.forEach(id -> {\n                    if (thermodynamicValueMatrix.containsKey(id)) {\n                        thermodynamicValueCollection.add(thermodynamicValueMatrix.get(id));\n                    } else {\n                        thermodynamicValueCollection.add(new ArrayList<>());\n                    }\n                });\n            }\n\n            thermodynamic.fromMatrixData(thermodynamicValueCollection, numOfSteps);\n            thermodynamic.setAxisYStep(axisYStep);\n\n            return thermodynamic;\n        } catch (SQLException e) {\n            throw new IOException(e);\n        }\n    }",
  "abstract_func": "@Override\n    public Thermodynamic getThermodynamic(String VAR_0, DownSampling VAR_1, List<String> VAR_2,\n                                          String VAR_3) throws IOException {\n        StringBuilder VAR_4 = new StringBuilder(\n            \"select \" + VAR_5.STEP + \" step, \" + VAR_5.NUM_OF_STEPS + \" num_of_steps, \" + VAR_5.DETAIL_GROUP + \" detail_group, \" + \"id \" + \" from \" + VAR_0 + \" where id in (\");\n        List<Object> VAR_6 = new ArrayList();\n        for (int VAR_7 = 0; VAR_7 < VAR_2.size(); VAR_7++) {\n            if (VAR_7 == 0) {\n                VAR_4.append(\"?\");\n            } else {\n                VAR_4.append(\",?\");\n            }\n            VAR_6.add(VAR_2.get(VAR_7));\n        }\n        VAR_4.append(\")\");\n\n        List<List<Long>> VAR_8 = new ArrayList<>();\n        Map<String, List<Long>> VAR_9 = new HashMap<>();\n\n        try (Connection VAR_10 = VAR_11.getConnection()) {\n            Thermodynamic VAR_12 = new Thermodynamic();\n            int VAR_13 = 0;\n            int VAR_14 = 0;\n            try (ResultSet VAR_15 = VAR_11.executeQuery(\n                VAR_10, VAR_4.toString(), VAR_6.toArray(new Object[0]))) {\n\n                while (VAR_15.next()) {\n                    VAR_14 = VAR_15.getInt(\"step\");\n                    String VAR_16 = VAR_15.getString(\"id\");\n                    VAR_13 = VAR_15.getInt(\"num_of_steps\") + 1;\n                    String VAR_17 = VAR_15.getString(\"detail_group\");\n                    IntKeyLongValueHashMap VAR_18 = new IntKeyLongValueHashMap(5);\n                    VAR_18.toObject(VAR_17);\n\n                    List<Long> VAR_19 = new ArrayList<>();\n                    for (int VAR_7 = 0; VAR_7 < VAR_13; VAR_7++) {\n                        VAR_19.add(0L);\n                    }\n\n                    for (IntKeyLongValue VAR_20 : VAR_18.values()) {\n                        VAR_19.set(VAR_20.getKey(), VAR_20.getValue());\n                    }\n\n                    VAR_9.put(VAR_16, VAR_19);\n                }\n\n                /* COMMENT_0 */\n                VAR_2.forEach(VAR_16 -> {\n                    if (VAR_9.containsKey(VAR_16)) {\n                        VAR_8.add(VAR_9.get(VAR_16));\n                    } else {\n                        VAR_8.add(new ArrayList<>());\n                    }\n                });\n            }\n\n            VAR_12.fromMatrixData(VAR_8, VAR_13);\n            VAR_12.setAxisYStep(VAR_14);\n\n            return VAR_12;\n        } catch (SQLException VAR_21) {\n            throw new IOException(VAR_21);\n        }\n    }",
  "func_graph_path": "apache/skywalking/2b6aae3b733f9dbeae1d6eff4f1975c723e1e7d1/H2MetricsQueryDAO.java/vul/after/1.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,13 +1,18 @@\n @Override\n     public Thermodynamic getThermodynamic(String tableName, DownSampling downsampling, List<String> ids,\n                                           String valueCName) throws IOException {\n-        StringBuilder idValues = new StringBuilder();\n-        for (int valueIdx = 0; valueIdx < ids.size(); valueIdx++) {\n-            if (valueIdx != 0) {\n-                idValues.append(\",\");\n+        StringBuilder sql = new StringBuilder(\n+            \"select \" + ThermodynamicMetrics.STEP + \" step, \" + ThermodynamicMetrics.NUM_OF_STEPS + \" num_of_steps, \" + ThermodynamicMetrics.DETAIL_GROUP + \" detail_group, \" + \"id \" + \" from \" + tableName + \" where id in (\");\n+        List<Object> parameters = new ArrayList();\n+        for (int i = 0; i < ids.size(); i++) {\n+            if (i == 0) {\n+                sql.append(\"?\");\n+            } else {\n+                sql.append(\",?\");\n             }\n-            idValues.append(\"'\").append(ids.get(valueIdx)).append(\"'\");\n+            parameters.add(ids.get(i));\n         }\n+        sql.append(\")\");\n \n         List<List<Long>> thermodynamicValueCollection = new ArrayList<>();\n         Map<String, List<Long>> thermodynamicValueMatrix = new HashMap<>();\n@@ -17,10 +22,7 @@\n             int numOfSteps = 0;\n             int axisYStep = 0;\n             try (ResultSet resultSet = h2Client.executeQuery(\n-                connection,\n-                \"select \" + ThermodynamicMetrics.STEP + \" step, \" + ThermodynamicMetrics.NUM_OF_STEPS + \" num_of_steps, \" + ThermodynamicMetrics.DETAIL_GROUP + \" detail_group, \" + \"id \" + \" from \" + tableName + \" where id in (\" + idValues\n-                    .toString() + \")\"\n-            )) {\n+                connection, sql.toString(), parameters.toArray(new Object[0]))) {\n \n                 while (resultSet.next()) {\n                     axisYStep = resultSet.getInt(\"step\");",
  "diff_line_info": {
    "deleted_lines": [
      "        StringBuilder idValues = new StringBuilder();",
      "        for (int valueIdx = 0; valueIdx < ids.size(); valueIdx++) {",
      "            if (valueIdx != 0) {",
      "                idValues.append(\",\");",
      "            idValues.append(\"'\").append(ids.get(valueIdx)).append(\"'\");",
      "                connection,",
      "                \"select \" + ThermodynamicMetrics.STEP + \" step, \" + ThermodynamicMetrics.NUM_OF_STEPS + \" num_of_steps, \" + ThermodynamicMetrics.DETAIL_GROUP + \" detail_group, \" + \"id \" + \" from \" + tableName + \" where id in (\" + idValues",
      "                    .toString() + \")\"",
      "            )) {"
    ],
    "added_lines": [
      "        StringBuilder sql = new StringBuilder(",
      "            \"select \" + ThermodynamicMetrics.STEP + \" step, \" + ThermodynamicMetrics.NUM_OF_STEPS + \" num_of_steps, \" + ThermodynamicMetrics.DETAIL_GROUP + \" detail_group, \" + \"id \" + \" from \" + tableName + \" where id in (\");",
      "        List<Object> parameters = new ArrayList();",
      "        for (int i = 0; i < ids.size(); i++) {",
      "            if (i == 0) {",
      "                sql.append(\"?\");",
      "            } else {",
      "                sql.append(\",?\");",
      "            parameters.add(ids.get(i));",
      "        sql.append(\")\");",
      "                connection, sql.toString(), parameters.toArray(new Object[0]))) {"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/apache/skywalking/pull/4639",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/apache/skywalking/pull/4639: 403 Client Error: Forbidden for url: https://api.github.com/repos/apache/skywalking/pulls/4639",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.98,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 0.98"
}