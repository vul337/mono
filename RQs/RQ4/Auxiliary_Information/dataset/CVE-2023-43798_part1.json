{
  "cve_id": "CVE-2023-43798",
  "cwe_ids": [
    "CWE-918"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:N",
  "cvss_is_v3": true,
  "repo_name": "bigbluebutton",
  "commit_msg": "Fix: Getting final Url (from redirect) on presentation upload",
  "commit_hash": "02ba4c6ff8e78a0f4384ad1b7c7367c5a90376e8",
  "git_url": "https://github.com/bigbluebutton/bigbluebutton/commit/02ba4c6ff8e78a0f4384ad1b7c7367c5a90376e8",
  "file_path": "bbb-common-web/src/main/java/org/bigbluebutton/presentation/PresentationUrlDownloadService.java",
  "func_name": "savePresentation",
  "func_before": "public boolean savePresentation(final String meetingId,\n            final String filename, final String urlString) {\n\n        String finalUrl = followRedirect(meetingId, urlString, 0, urlString);\n\n        if (finalUrl == null) return false;\n\n        boolean success = false;\n\n        CloseableHttpAsyncClient httpclient = HttpAsyncClients.createDefault();\n        try {\n            httpclient.start();\n            File download = new File(filename);\n            ZeroCopyConsumer<File> consumer = new ZeroCopyConsumer<File>(download) {\n                @Override\n                protected File process(\n                        final HttpResponse response,\n                        final File file,\n                        final ContentType contentType) throws Exception {\n                    if (response.getStatusLine().getStatusCode() != HttpStatus.SC_OK) {\n                        throw new ClientProtocolException(\"Upload failed: \" + response.getStatusLine());\n                    }\n                    return file;\n                }\n\n            };\n            Future<File> future = httpclient.execute(HttpAsyncMethods.createGet(finalUrl), consumer, null);\n            File result = future.get();\n            success = result.exists();\n        } catch (java.lang.InterruptedException ex) {\n            log.error(\"InterruptedException while saving presentation\", meetingId, ex);\n        } catch (java.util.concurrent.ExecutionException ex) {\n            log.error(\"ExecutionException while saving presentation\", meetingId, ex);\n        } catch (java.io.FileNotFoundException ex) {\n            log.error(\"FileNotFoundException while saving presentation\", meetingId, ex);\n        } finally {\n            try {\n                httpclient.close();\n            } catch (java.io.IOException ex) {\n                log.error(\"IOException while saving presentation\", meetingId, ex);\n            }\n        }\n\n        return success;\n    }",
  "abstract_func_before": "public boolean savePresentation(final String VAR_0,\n            final String VAR_1, final String VAR_2) {\n\n        String VAR_3 = followRedirect(VAR_0, VAR_2, 0, VAR_2);\n\n        if (VAR_3 == null) return false;\n\n        boolean VAR_4 = false;\n\n        CloseableHttpAsyncClient VAR_5 = VAR_6.createDefault();\n        try {\n            VAR_5.start();\n            File VAR_7 = new File(VAR_1);\n            ZeroCopyConsumer<File> VAR_8 = new ZeroCopyConsumer<File>(VAR_7) {\n                @Override\n                protected File process(\n                        final HttpResponse VAR_9,\n                        final File VAR_10,\n                        final ContentType VAR_11) throws Exception {\n                    if (VAR_9.getStatusLine().getStatusCode() != VAR_12.SC_OK) {\n                        throw new ClientProtocolException(\"Upload failed: \" + VAR_9.getStatusLine());\n                    }\n                    return VAR_10;\n                }\n\n            };\n            Future<File> VAR_13 = VAR_5.execute(VAR_14.createGet(VAR_3), VAR_8, null);\n            File VAR_15 = VAR_13.get();\n            VAR_4 = VAR_15.exists();\n        } catch (java.lang.InterruptedException VAR_16) {\n            VAR_17.error(\"InterruptedException while saving presentation\", VAR_0, VAR_16);\n        } catch (java.util.concurrent.ExecutionException VAR_16) {\n            VAR_17.error(\"ExecutionException while saving presentation\", VAR_0, VAR_16);\n        } catch (java.io.FileNotFoundException VAR_16) {\n            VAR_17.error(\"FileNotFoundException while saving presentation\", VAR_0, VAR_16);\n        } finally {\n            try {\n                VAR_5.close();\n            } catch (java.io.IOException VAR_16) {\n                VAR_17.error(\"IOException while saving presentation\", VAR_0, VAR_16);\n            }\n        }\n\n        return VAR_4;\n    }",
  "func_graph_path_before": "bigbluebutton/02ba4c6ff8e78a0f4384ad1b7c7367c5a90376e8/PresentationUrlDownloadService.java/vul/before/0.json",
  "func": "public boolean savePresentation(final String meetingId,\n            final String filename, final String urlString) {\n\n        String finalUrl = followRedirect(meetingId, urlString, 0, urlString);\n\n        if (finalUrl == null) return false;\n        if(!finalUrl.equals(urlString)) {\n            log.info(\"Redirected to Final URL [{}]\", finalUrl);\n        }\n\n        boolean success = false;\n\n        //Disable follow redirect since finalUrl already did it\n        RequestConfig requestConfig = RequestConfig.custom()\n                .setRedirectsEnabled(false)\n                .build();\n\n        CloseableHttpAsyncClient httpclient = HttpAsyncClients.custom()\n                .setDefaultRequestConfig(requestConfig)\n                .build();\n\n        try {\n            httpclient.start();\n            File download = new File(filename);\n            ZeroCopyConsumer<File> consumer = new ZeroCopyConsumer<File>(download) {\n                @Override\n                protected File process(\n                        final HttpResponse response,\n                        final File file,\n                        final ContentType contentType) throws Exception {\n                    if (response.getStatusLine().getStatusCode() != HttpStatus.SC_OK) {\n                        throw new ClientProtocolException(\"Upload failed: \" + response.getStatusLine());\n                    }\n                    return file;\n                }\n\n            };\n            Future<File> future = httpclient.execute(HttpAsyncMethods.createGet(finalUrl), consumer, null);\n            File result = future.get();\n            success = result.exists();\n        } catch (java.lang.InterruptedException ex) {\n            log.error(\"InterruptedException while saving presentation\", meetingId, ex);\n        } catch (java.util.concurrent.ExecutionException ex) {\n            log.error(\"ExecutionException while saving presentation\", meetingId, ex);\n        } catch (java.io.FileNotFoundException ex) {\n            log.error(\"FileNotFoundException while saving presentation\", meetingId, ex);\n        } finally {\n            try {\n                httpclient.close();\n            } catch (java.io.IOException ex) {\n                log.error(\"IOException while saving presentation\", meetingId, ex);\n            }\n        }\n\n        return success;\n    }",
  "abstract_func": "public boolean savePresentation(final String VAR_0,\n            final String VAR_1, final String VAR_2) {\n\n        String VAR_3 = followRedirect(VAR_0, VAR_2, 0, VAR_2);\n\n        if (VAR_3 == null) return false;\n        if(!VAR_3.equals(VAR_2)) {\n            VAR_4.info(\"Redirected to Final URL [{}]\", VAR_3);\n        }\n\n        boolean VAR_5 = false;\n\n        /* COMMENT_0 */\n        RequestConfig VAR_6 = VAR_7.custom()\n                .setRedirectsEnabled(false)\n                .build();\n\n        CloseableHttpAsyncClient VAR_8 = VAR_9.custom()\n                .setDefaultRequestConfig(VAR_6)\n                .build();\n\n        try {\n            VAR_8.start();\n            File VAR_10 = new File(VAR_1);\n            ZeroCopyConsumer<File> VAR_11 = new ZeroCopyConsumer<File>(VAR_10) {\n                @Override\n                protected File process(\n                        final HttpResponse VAR_12,\n                        final File VAR_13,\n                        final ContentType VAR_14) throws Exception {\n                    if (VAR_12.getStatusLine().getStatusCode() != VAR_15.SC_OK) {\n                        throw new ClientProtocolException(\"Upload failed: \" + VAR_12.getStatusLine());\n                    }\n                    return VAR_13;\n                }\n\n            };\n            Future<File> VAR_16 = VAR_8.execute(VAR_17.createGet(VAR_3), VAR_11, null);\n            File VAR_18 = VAR_16.get();\n            VAR_5 = VAR_18.exists();\n        } catch (java.lang.InterruptedException VAR_19) {\n            VAR_4.error(\"InterruptedException while saving presentation\", VAR_0, VAR_19);\n        } catch (java.util.concurrent.ExecutionException VAR_19) {\n            VAR_4.error(\"ExecutionException while saving presentation\", VAR_0, VAR_19);\n        } catch (java.io.FileNotFoundException VAR_19) {\n            VAR_4.error(\"FileNotFoundException while saving presentation\", VAR_0, VAR_19);\n        } finally {\n            try {\n                VAR_8.close();\n            } catch (java.io.IOException VAR_19) {\n                VAR_4.error(\"IOException while saving presentation\", VAR_0, VAR_19);\n            }\n        }\n\n        return VAR_5;\n    }",
  "func_graph_path": "bigbluebutton/02ba4c6ff8e78a0f4384ad1b7c7367c5a90376e8/PresentationUrlDownloadService.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -4,10 +4,21 @@\n         String finalUrl = followRedirect(meetingId, urlString, 0, urlString);\n \n         if (finalUrl == null) return false;\n+        if(!finalUrl.equals(urlString)) {\n+            log.info(\"Redirected to Final URL [{}]\", finalUrl);\n+        }\n \n         boolean success = false;\n \n-        CloseableHttpAsyncClient httpclient = HttpAsyncClients.createDefault();\n+        //Disable follow redirect since finalUrl already did it\n+        RequestConfig requestConfig = RequestConfig.custom()\n+                .setRedirectsEnabled(false)\n+                .build();\n+\n+        CloseableHttpAsyncClient httpclient = HttpAsyncClients.custom()\n+                .setDefaultRequestConfig(requestConfig)\n+                .build();\n+\n         try {\n             httpclient.start();\n             File download = new File(filename);",
  "diff_line_info": {
    "deleted_lines": [
      "        CloseableHttpAsyncClient httpclient = HttpAsyncClients.createDefault();"
    ],
    "added_lines": [
      "        if(!finalUrl.equals(urlString)) {",
      "            log.info(\"Redirected to Final URL [{}]\", finalUrl);",
      "        }",
      "        //Disable follow redirect since finalUrl already did it",
      "        RequestConfig requestConfig = RequestConfig.custom()",
      "                .setRedirectsEnabled(false)",
      "                .build();",
      "",
      "        CloseableHttpAsyncClient httpclient = HttpAsyncClients.custom()",
      "                .setDefaultRequestConfig(requestConfig)",
      "                .build();",
      ""
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/bigbluebutton/bigbluebutton/pull/18494",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/bigbluebutton/bigbluebutton/pull/18494: 403 Client Error: Forbidden for url: https://api.github.com/repos/bigbluebutton/bigbluebutton/pulls/18494",
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Defect Remediation & Feature Upgrades  \n**Confidence:** 0.9"
}