{
  "cve_id": "CVE-2021-45429",
  "cwe_ids": [
    "CWE-120"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "VirusTotal/yara",
  "commit_msg": "Fix issue #1616\n\nThis is a more comprehensive fix than #1617, it adds new functions to the API for getting/setting uint32 and uint64 settings.  Using these functions is preferable over calling `yr_(get|set)_configuration` directly.",
  "commit_hash": "b34b7e74c862c129b801832b6b85401fbada2b01",
  "git_url": "https://github.com/VirusTotal/yara/commit/b34b7e74c862c129b801832b6b85401fbada2b01",
  "file_path": "libyara/compiler.c",
  "func_name": "yr_compiler_get_error_message",
  "func_before": "YR_API char* yr_compiler_get_error_message(\n    YR_COMPILER* compiler,\n    char* buffer,\n    int buffer_size)\n{\n  uint32_t max_strings_per_rule;\n\n  switch (compiler->last_error)\n  {\n  case ERROR_INSUFFICIENT_MEMORY:\n    snprintf(buffer, buffer_size, \"not enough memory\");\n    break;\n  case ERROR_DUPLICATED_IDENTIFIER:\n    snprintf(\n        buffer,\n        buffer_size,\n        \"duplicated identifier \\\"%s\\\"\",\n        compiler->last_error_extra_info);\n    break;\n  case ERROR_DUPLICATED_STRING_IDENTIFIER:\n    snprintf(\n        buffer,\n        buffer_size,\n        \"duplicated string identifier \\\"%s\\\"\",\n        compiler->last_error_extra_info);\n    break;\n  case ERROR_DUPLICATED_TAG_IDENTIFIER:\n    snprintf(\n        buffer,\n        buffer_size,\n        \"duplicated tag identifier \\\"%s\\\"\",\n        compiler->last_error_extra_info);\n    break;\n  case ERROR_DUPLICATED_META_IDENTIFIER:\n    snprintf(\n        buffer,\n        buffer_size,\n        \"duplicated metadata identifier \\\"%s\\\"\",\n        compiler->last_error_extra_info);\n    break;\n  case ERROR_DUPLICATED_LOOP_IDENTIFIER:\n    snprintf(\n        buffer,\n        buffer_size,\n        \"duplicated loop identifier \\\"%s\\\"\",\n        compiler->last_error_extra_info);\n    break;\n  case ERROR_UNDEFINED_STRING:\n    snprintf(\n        buffer,\n        buffer_size,\n        \"undefined string \\\"%s\\\"\",\n        compiler->last_error_extra_info);\n    break;\n  case ERROR_UNDEFINED_IDENTIFIER:\n    snprintf(\n        buffer,\n        buffer_size,\n        \"undefined identifier \\\"%s\\\"\",\n        compiler->last_error_extra_info);\n    break;\n  case ERROR_UNREFERENCED_STRING:\n    snprintf(\n        buffer,\n        buffer_size,\n        \"unreferenced string \\\"%s\\\"\",\n        compiler->last_error_extra_info);\n    break;\n  case ERROR_EMPTY_STRING:\n    snprintf(\n        buffer,\n        buffer_size,\n        \"empty string \\\"%s\\\"\",\n        compiler->last_error_extra_info);\n    break;\n  case ERROR_NOT_A_STRUCTURE:\n    snprintf(\n        buffer,\n        buffer_size,\n        \"\\\"%s\\\" is not a structure\",\n        compiler->last_error_extra_info);\n    break;\n  case ERROR_NOT_INDEXABLE:\n    snprintf(\n        buffer,\n        buffer_size,\n        \"\\\"%s\\\" is not an array or dictionary\",\n        compiler->last_error_extra_info);\n    break;\n  case ERROR_NOT_A_FUNCTION:\n    snprintf(\n        buffer,\n        buffer_size,\n        \"\\\"%s\\\" is not a function\",\n        compiler->last_error_extra_info);\n    break;\n  case ERROR_INVALID_FIELD_NAME:\n    snprintf(\n        buffer,\n        buffer_size,\n        \"invalid field name \\\"%s\\\"\",\n        compiler->last_error_extra_info);\n    break;\n  case ERROR_MISPLACED_ANONYMOUS_STRING:\n    snprintf(buffer, buffer_size, \"wrong use of anonymous string\");\n    break;\n  case ERROR_INCLUDES_CIRCULAR_REFERENCE:\n    snprintf(buffer, buffer_size, \"include circular reference\");\n    break;\n  case ERROR_INCLUDE_DEPTH_EXCEEDED:\n    snprintf(buffer, buffer_size, \"too many levels of included rules\");\n    break;\n  case ERROR_LOOP_NESTING_LIMIT_EXCEEDED:\n    snprintf(buffer, buffer_size, \"loop nesting limit exceeded\");\n    break;\n  case ERROR_NESTED_FOR_OF_LOOP:\n    snprintf(\n        buffer,\n        buffer_size,\n        \"'for <quantifier> of <string set>' loops can't be nested\");\n    break;\n  case ERROR_UNKNOWN_MODULE:\n    snprintf(\n        buffer,\n        buffer_size,\n        \"unknown module \\\"%s\\\"\",\n        compiler->last_error_extra_info);\n    break;\n  case ERROR_INVALID_MODULE_NAME:\n    snprintf(\n        buffer,\n        buffer_size,\n        \"invalid module name \\\"%s\\\"\",\n        compiler->last_error_extra_info);\n    break;\n  case ERROR_DUPLICATED_STRUCTURE_MEMBER:\n    snprintf(buffer, buffer_size, \"duplicated structure member\");\n    break;\n  case ERROR_WRONG_ARGUMENTS:\n    snprintf(\n        buffer,\n        buffer_size,\n        \"wrong arguments for function \\\"%s\\\"\",\n        compiler->last_error_extra_info);\n    break;\n  case ERROR_WRONG_RETURN_TYPE:\n    snprintf(buffer, buffer_size, \"wrong return type for overloaded function\");\n    break;\n  case ERROR_INVALID_HEX_STRING:\n  case ERROR_INVALID_REGULAR_EXPRESSION:\n  case ERROR_SYNTAX_ERROR:\n  case ERROR_WRONG_TYPE:\n  case ERROR_INVALID_MODIFIER:\n  case ERROR_INVALID_PERCENTAGE:\n    snprintf(buffer, buffer_size, \"%s\", compiler->last_error_extra_info);\n    break;\n  case ERROR_INTERNAL_FATAL_ERROR:\n    snprintf(buffer, buffer_size, \"internal fatal error\");\n    break;\n  case ERROR_DIVISION_BY_ZERO:\n    snprintf(buffer, buffer_size, \"division by zero\");\n    break;\n  case ERROR_REGULAR_EXPRESSION_TOO_LARGE:\n    snprintf(buffer, buffer_size, \"regular expression is too large\");\n    break;\n  case ERROR_REGULAR_EXPRESSION_TOO_COMPLEX:\n    snprintf(buffer, buffer_size, \"regular expression is too complex\");\n    break;\n  case ERROR_TOO_MANY_STRINGS:\n    yr_get_configuration(YR_CONFIG_MAX_STRINGS_PER_RULE, &max_strings_per_rule);\n    snprintf(\n        buffer,\n        buffer_size,\n        \"too many strings in rule \\\"%s\\\" (limit: %d)\",\n        compiler->last_error_extra_info,\n        max_strings_per_rule);\n    break;\n  case ERROR_INTEGER_OVERFLOW:\n    snprintf(\n        buffer,\n        buffer_size,\n        \"integer overflow in \\\"%s\\\"\",\n        compiler->last_error_extra_info);\n    break;\n  case ERROR_COULD_NOT_READ_FILE:\n    snprintf(buffer, buffer_size, \"could not read file\");\n    break;\n  case ERROR_DUPLICATED_MODIFIER:\n    snprintf(buffer, buffer_size, \"duplicated modifier\");\n    break;\n  }\n\n  return buffer;\n}",
  "abstract_func_before": "YR_API VAR_0* yr_compiler_get_error_message(\n    YR_COMPILER* VAR_1,\n    char* VAR_2,\n    int VAR_3)\n{\n  uint32_t VAR_4;\n\n  switch (VAR_1->last_error)\n  {\n  case VAR_5:\n    snprintf(VAR_2, VAR_3, \"not enough memory\");\n    break;\n  case VAR_6:\n    snprintf(\n        VAR_2,\n        VAR_3,\n        \"duplicated identifier \\\"%s\\\"\",\n        VAR_1->last_error_extra_info);\n    break;\n  case VAR_7:\n    snprintf(\n        VAR_2,\n        VAR_3,\n        \"duplicated string identifier \\\"%s\\\"\",\n        VAR_1->last_error_extra_info);\n    break;\n  case VAR_8:\n    snprintf(\n        VAR_2,\n        VAR_3,\n        \"duplicated tag identifier \\\"%s\\\"\",\n        VAR_1->last_error_extra_info);\n    break;\n  case VAR_9:\n    snprintf(\n        VAR_2,\n        VAR_3,\n        \"duplicated metadata identifier \\\"%s\\\"\",\n        VAR_1->last_error_extra_info);\n    break;\n  case VAR_10:\n    snprintf(\n        VAR_2,\n        VAR_3,\n        \"duplicated loop identifier \\\"%s\\\"\",\n        VAR_1->last_error_extra_info);\n    break;\n  case VAR_11:\n    snprintf(\n        VAR_2,\n        VAR_3,\n        \"undefined string \\\"%s\\\"\",\n        VAR_1->last_error_extra_info);\n    break;\n  case VAR_12:\n    snprintf(\n        VAR_2,\n        VAR_3,\n        \"undefined identifier \\\"%s\\\"\",\n        VAR_1->last_error_extra_info);\n    break;\n  case VAR_13:\n    snprintf(\n        VAR_2,\n        VAR_3,\n        \"unreferenced string \\\"%s\\\"\",\n        VAR_1->last_error_extra_info);\n    break;\n  case VAR_14:\n    snprintf(\n        VAR_2,\n        VAR_3,\n        \"empty string \\\"%s\\\"\",\n        VAR_1->last_error_extra_info);\n    break;\n  case VAR_15:\n    snprintf(\n        VAR_2,\n        VAR_3,\n        \"\\\"%s\\\" is not a structure\",\n        VAR_1->last_error_extra_info);\n    break;\n  case VAR_16:\n    snprintf(\n        VAR_2,\n        VAR_3,\n        \"\\\"%s\\\" is not an array or dictionary\",\n        VAR_1->last_error_extra_info);\n    break;\n  case VAR_17:\n    snprintf(\n        VAR_2,\n        VAR_3,\n        \"\\\"%s\\\" is not a function\",\n        VAR_1->last_error_extra_info);\n    break;\n  case VAR_18:\n    snprintf(\n        VAR_2,\n        VAR_3,\n        \"invalid field name \\\"%s\\\"\",\n        VAR_1->last_error_extra_info);\n    break;\n  case VAR_19:\n    snprintf(VAR_2, VAR_3, \"wrong use of anonymous string\");\n    break;\n  case VAR_20:\n    snprintf(VAR_2, VAR_3, \"include circular reference\");\n    break;\n  case VAR_21:\n    snprintf(VAR_2, VAR_3, \"too many levels of included rules\");\n    break;\n  case VAR_22:\n    snprintf(VAR_2, VAR_3, \"loop nesting limit exceeded\");\n    break;\n  case VAR_23:\n    snprintf(\n        VAR_2,\n        VAR_3,\n        \"'for <quantifier> of <string set>' loops can't be nested\");\n    break;\n  case VAR_24:\n    snprintf(\n        VAR_2,\n        VAR_3,\n        \"unknown module \\\"%s\\\"\",\n        VAR_1->last_error_extra_info);\n    break;\n  case VAR_25:\n    snprintf(\n        VAR_2,\n        VAR_3,\n        \"invalid module name \\\"%s\\\"\",\n        VAR_1->last_error_extra_info);\n    break;\n  case VAR_26:\n    snprintf(VAR_2, VAR_3, \"duplicated structure member\");\n    break;\n  case VAR_27:\n    snprintf(\n        VAR_2,\n        VAR_3,\n        \"wrong arguments for function \\\"%s\\\"\",\n        VAR_1->last_error_extra_info);\n    break;\n  case VAR_28:\n    snprintf(VAR_2, VAR_3, \"wrong return type for overloaded function\");\n    break;\n  case VAR_29:\n  case VAR_30:\n  case VAR_31:\n  case VAR_32:\n  case VAR_33:\n  case VAR_34:\n    snprintf(VAR_2, VAR_3, \"%s\", VAR_1->last_error_extra_info);\n    break;\n  case VAR_35:\n    snprintf(VAR_2, VAR_3, \"internal fatal error\");\n    break;\n  case VAR_36:\n    snprintf(VAR_2, VAR_3, \"division by zero\");\n    break;\n  case VAR_37:\n    snprintf(VAR_2, VAR_3, \"regular expression is too large\");\n    break;\n  case VAR_38:\n    snprintf(VAR_2, VAR_3, \"regular expression is too complex\");\n    break;\n  case VAR_39:\n    yr_get_configuration(VAR_40, &VAR_4);\n    snprintf(\n        VAR_2,\n        VAR_3,\n        \"too many strings in rule \\\"%s\\\" (limit: %d)\",\n        VAR_1->last_error_extra_info,\n        VAR_4);\n    break;\n  case VAR_41:\n    snprintf(\n        VAR_2,\n        VAR_3,\n        \"integer overflow in \\\"%s\\\"\",\n        VAR_1->last_error_extra_info);\n    break;\n  case VAR_42:\n    snprintf(VAR_2, VAR_3, \"could not read file\");\n    break;\n  case VAR_43:\n    snprintf(VAR_2, VAR_3, \"duplicated modifier\");\n    break;\n  }\n\n  return VAR_2;\n}",
  "func_graph_path_before": null,
  "func": "YR_API char* yr_compiler_get_error_message(\n    YR_COMPILER* compiler,\n    char* buffer,\n    int buffer_size)\n{\n  uint32_t max_strings_per_rule;\n\n  switch (compiler->last_error)\n  {\n  case ERROR_INSUFFICIENT_MEMORY:\n    snprintf(buffer, buffer_size, \"not enough memory\");\n    break;\n  case ERROR_DUPLICATED_IDENTIFIER:\n    snprintf(\n        buffer,\n        buffer_size,\n        \"duplicated identifier \\\"%s\\\"\",\n        compiler->last_error_extra_info);\n    break;\n  case ERROR_DUPLICATED_STRING_IDENTIFIER:\n    snprintf(\n        buffer,\n        buffer_size,\n        \"duplicated string identifier \\\"%s\\\"\",\n        compiler->last_error_extra_info);\n    break;\n  case ERROR_DUPLICATED_TAG_IDENTIFIER:\n    snprintf(\n        buffer,\n        buffer_size,\n        \"duplicated tag identifier \\\"%s\\\"\",\n        compiler->last_error_extra_info);\n    break;\n  case ERROR_DUPLICATED_META_IDENTIFIER:\n    snprintf(\n        buffer,\n        buffer_size,\n        \"duplicated metadata identifier \\\"%s\\\"\",\n        compiler->last_error_extra_info);\n    break;\n  case ERROR_DUPLICATED_LOOP_IDENTIFIER:\n    snprintf(\n        buffer,\n        buffer_size,\n        \"duplicated loop identifier \\\"%s\\\"\",\n        compiler->last_error_extra_info);\n    break;\n  case ERROR_UNDEFINED_STRING:\n    snprintf(\n        buffer,\n        buffer_size,\n        \"undefined string \\\"%s\\\"\",\n        compiler->last_error_extra_info);\n    break;\n  case ERROR_UNDEFINED_IDENTIFIER:\n    snprintf(\n        buffer,\n        buffer_size,\n        \"undefined identifier \\\"%s\\\"\",\n        compiler->last_error_extra_info);\n    break;\n  case ERROR_UNREFERENCED_STRING:\n    snprintf(\n        buffer,\n        buffer_size,\n        \"unreferenced string \\\"%s\\\"\",\n        compiler->last_error_extra_info);\n    break;\n  case ERROR_EMPTY_STRING:\n    snprintf(\n        buffer,\n        buffer_size,\n        \"empty string \\\"%s\\\"\",\n        compiler->last_error_extra_info);\n    break;\n  case ERROR_NOT_A_STRUCTURE:\n    snprintf(\n        buffer,\n        buffer_size,\n        \"\\\"%s\\\" is not a structure\",\n        compiler->last_error_extra_info);\n    break;\n  case ERROR_NOT_INDEXABLE:\n    snprintf(\n        buffer,\n        buffer_size,\n        \"\\\"%s\\\" is not an array or dictionary\",\n        compiler->last_error_extra_info);\n    break;\n  case ERROR_NOT_A_FUNCTION:\n    snprintf(\n        buffer,\n        buffer_size,\n        \"\\\"%s\\\" is not a function\",\n        compiler->last_error_extra_info);\n    break;\n  case ERROR_INVALID_FIELD_NAME:\n    snprintf(\n        buffer,\n        buffer_size,\n        \"invalid field name \\\"%s\\\"\",\n        compiler->last_error_extra_info);\n    break;\n  case ERROR_MISPLACED_ANONYMOUS_STRING:\n    snprintf(buffer, buffer_size, \"wrong use of anonymous string\");\n    break;\n  case ERROR_INCLUDES_CIRCULAR_REFERENCE:\n    snprintf(buffer, buffer_size, \"include circular reference\");\n    break;\n  case ERROR_INCLUDE_DEPTH_EXCEEDED:\n    snprintf(buffer, buffer_size, \"too many levels of included rules\");\n    break;\n  case ERROR_LOOP_NESTING_LIMIT_EXCEEDED:\n    snprintf(buffer, buffer_size, \"loop nesting limit exceeded\");\n    break;\n  case ERROR_NESTED_FOR_OF_LOOP:\n    snprintf(\n        buffer,\n        buffer_size,\n        \"'for <quantifier> of <string set>' loops can't be nested\");\n    break;\n  case ERROR_UNKNOWN_MODULE:\n    snprintf(\n        buffer,\n        buffer_size,\n        \"unknown module \\\"%s\\\"\",\n        compiler->last_error_extra_info);\n    break;\n  case ERROR_INVALID_MODULE_NAME:\n    snprintf(\n        buffer,\n        buffer_size,\n        \"invalid module name \\\"%s\\\"\",\n        compiler->last_error_extra_info);\n    break;\n  case ERROR_DUPLICATED_STRUCTURE_MEMBER:\n    snprintf(buffer, buffer_size, \"duplicated structure member\");\n    break;\n  case ERROR_WRONG_ARGUMENTS:\n    snprintf(\n        buffer,\n        buffer_size,\n        \"wrong arguments for function \\\"%s\\\"\",\n        compiler->last_error_extra_info);\n    break;\n  case ERROR_WRONG_RETURN_TYPE:\n    snprintf(buffer, buffer_size, \"wrong return type for overloaded function\");\n    break;\n  case ERROR_INVALID_HEX_STRING:\n  case ERROR_INVALID_REGULAR_EXPRESSION:\n  case ERROR_SYNTAX_ERROR:\n  case ERROR_WRONG_TYPE:\n  case ERROR_INVALID_MODIFIER:\n  case ERROR_INVALID_PERCENTAGE:\n    snprintf(buffer, buffer_size, \"%s\", compiler->last_error_extra_info);\n    break;\n  case ERROR_INTERNAL_FATAL_ERROR:\n    snprintf(buffer, buffer_size, \"internal fatal error\");\n    break;\n  case ERROR_DIVISION_BY_ZERO:\n    snprintf(buffer, buffer_size, \"division by zero\");\n    break;\n  case ERROR_REGULAR_EXPRESSION_TOO_LARGE:\n    snprintf(buffer, buffer_size, \"regular expression is too large\");\n    break;\n  case ERROR_REGULAR_EXPRESSION_TOO_COMPLEX:\n    snprintf(buffer, buffer_size, \"regular expression is too complex\");\n    break;\n  case ERROR_TOO_MANY_STRINGS:\n    yr_get_configuration_uint32(\n        YR_CONFIG_MAX_STRINGS_PER_RULE, &max_strings_per_rule);\n    snprintf(\n        buffer,\n        buffer_size,\n        \"too many strings in rule \\\"%s\\\" (limit: %d)\",\n        compiler->last_error_extra_info,\n        max_strings_per_rule);\n    break;\n  case ERROR_INTEGER_OVERFLOW:\n    snprintf(\n        buffer,\n        buffer_size,\n        \"integer overflow in \\\"%s\\\"\",\n        compiler->last_error_extra_info);\n    break;\n  case ERROR_COULD_NOT_READ_FILE:\n    snprintf(buffer, buffer_size, \"could not read file\");\n    break;\n  case ERROR_DUPLICATED_MODIFIER:\n    snprintf(buffer, buffer_size, \"duplicated modifier\");\n    break;\n  }\n\n  return buffer;\n}",
  "abstract_func": "YR_API VAR_0* yr_compiler_get_error_message(\n    YR_COMPILER* VAR_1,\n    char* VAR_2,\n    int VAR_3)\n{\n  uint32_t VAR_4;\n\n  switch (VAR_1->last_error)\n  {\n  case VAR_5:\n    snprintf(VAR_2, VAR_3, \"not enough memory\");\n    break;\n  case VAR_6:\n    snprintf(\n        VAR_2,\n        VAR_3,\n        \"duplicated identifier \\\"%s\\\"\",\n        VAR_1->last_error_extra_info);\n    break;\n  case VAR_7:\n    snprintf(\n        VAR_2,\n        VAR_3,\n        \"duplicated string identifier \\\"%s\\\"\",\n        VAR_1->last_error_extra_info);\n    break;\n  case VAR_8:\n    snprintf(\n        VAR_2,\n        VAR_3,\n        \"duplicated tag identifier \\\"%s\\\"\",\n        VAR_1->last_error_extra_info);\n    break;\n  case VAR_9:\n    snprintf(\n        VAR_2,\n        VAR_3,\n        \"duplicated metadata identifier \\\"%s\\\"\",\n        VAR_1->last_error_extra_info);\n    break;\n  case VAR_10:\n    snprintf(\n        VAR_2,\n        VAR_3,\n        \"duplicated loop identifier \\\"%s\\\"\",\n        VAR_1->last_error_extra_info);\n    break;\n  case VAR_11:\n    snprintf(\n        VAR_2,\n        VAR_3,\n        \"undefined string \\\"%s\\\"\",\n        VAR_1->last_error_extra_info);\n    break;\n  case VAR_12:\n    snprintf(\n        VAR_2,\n        VAR_3,\n        \"undefined identifier \\\"%s\\\"\",\n        VAR_1->last_error_extra_info);\n    break;\n  case VAR_13:\n    snprintf(\n        VAR_2,\n        VAR_3,\n        \"unreferenced string \\\"%s\\\"\",\n        VAR_1->last_error_extra_info);\n    break;\n  case VAR_14:\n    snprintf(\n        VAR_2,\n        VAR_3,\n        \"empty string \\\"%s\\\"\",\n        VAR_1->last_error_extra_info);\n    break;\n  case VAR_15:\n    snprintf(\n        VAR_2,\n        VAR_3,\n        \"\\\"%s\\\" is not a structure\",\n        VAR_1->last_error_extra_info);\n    break;\n  case VAR_16:\n    snprintf(\n        VAR_2,\n        VAR_3,\n        \"\\\"%s\\\" is not an array or dictionary\",\n        VAR_1->last_error_extra_info);\n    break;\n  case VAR_17:\n    snprintf(\n        VAR_2,\n        VAR_3,\n        \"\\\"%s\\\" is not a function\",\n        VAR_1->last_error_extra_info);\n    break;\n  case VAR_18:\n    snprintf(\n        VAR_2,\n        VAR_3,\n        \"invalid field name \\\"%s\\\"\",\n        VAR_1->last_error_extra_info);\n    break;\n  case VAR_19:\n    snprintf(VAR_2, VAR_3, \"wrong use of anonymous string\");\n    break;\n  case VAR_20:\n    snprintf(VAR_2, VAR_3, \"include circular reference\");\n    break;\n  case VAR_21:\n    snprintf(VAR_2, VAR_3, \"too many levels of included rules\");\n    break;\n  case VAR_22:\n    snprintf(VAR_2, VAR_3, \"loop nesting limit exceeded\");\n    break;\n  case VAR_23:\n    snprintf(\n        VAR_2,\n        VAR_3,\n        \"'for <quantifier> of <string set>' loops can't be nested\");\n    break;\n  case VAR_24:\n    snprintf(\n        VAR_2,\n        VAR_3,\n        \"unknown module \\\"%s\\\"\",\n        VAR_1->last_error_extra_info);\n    break;\n  case VAR_25:\n    snprintf(\n        VAR_2,\n        VAR_3,\n        \"invalid module name \\\"%s\\\"\",\n        VAR_1->last_error_extra_info);\n    break;\n  case VAR_26:\n    snprintf(VAR_2, VAR_3, \"duplicated structure member\");\n    break;\n  case VAR_27:\n    snprintf(\n        VAR_2,\n        VAR_3,\n        \"wrong arguments for function \\\"%s\\\"\",\n        VAR_1->last_error_extra_info);\n    break;\n  case VAR_28:\n    snprintf(VAR_2, VAR_3, \"wrong return type for overloaded function\");\n    break;\n  case VAR_29:\n  case VAR_30:\n  case VAR_31:\n  case VAR_32:\n  case VAR_33:\n  case VAR_34:\n    snprintf(VAR_2, VAR_3, \"%s\", VAR_1->last_error_extra_info);\n    break;\n  case VAR_35:\n    snprintf(VAR_2, VAR_3, \"internal fatal error\");\n    break;\n  case VAR_36:\n    snprintf(VAR_2, VAR_3, \"division by zero\");\n    break;\n  case VAR_37:\n    snprintf(VAR_2, VAR_3, \"regular expression is too large\");\n    break;\n  case VAR_38:\n    snprintf(VAR_2, VAR_3, \"regular expression is too complex\");\n    break;\n  case VAR_39:\n    yr_get_configuration_uint32(\n        VAR_40, &VAR_4);\n    snprintf(\n        VAR_2,\n        VAR_3,\n        \"too many strings in rule \\\"%s\\\" (limit: %d)\",\n        VAR_1->last_error_extra_info,\n        VAR_4);\n    break;\n  case VAR_41:\n    snprintf(\n        VAR_2,\n        VAR_3,\n        \"integer overflow in \\\"%s\\\"\",\n        VAR_1->last_error_extra_info);\n    break;\n  case VAR_42:\n    snprintf(VAR_2, VAR_3, \"could not read file\");\n    break;\n  case VAR_43:\n    snprintf(VAR_2, VAR_3, \"duplicated modifier\");\n    break;\n  }\n\n  return VAR_2;\n}",
  "func_graph_path": null,
  "diff_func": "--- func_before\n+++ func_after\n@@ -167,7 +167,8 @@\n     snprintf(buffer, buffer_size, \"regular expression is too complex\");\n     break;\n   case ERROR_TOO_MANY_STRINGS:\n-    yr_get_configuration(YR_CONFIG_MAX_STRINGS_PER_RULE, &max_strings_per_rule);\n+    yr_get_configuration_uint32(\n+        YR_CONFIG_MAX_STRINGS_PER_RULE, &max_strings_per_rule);\n     snprintf(\n         buffer,\n         buffer_size,",
  "diff_line_info": {
    "deleted_lines": [
      "    yr_get_configuration(YR_CONFIG_MAX_STRINGS_PER_RULE, &max_strings_per_rule);"
    ],
    "added_lines": [
      "    yr_get_configuration_uint32(",
      "        YR_CONFIG_MAX_STRINGS_PER_RULE, &max_strings_per_rule);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/VirusTotal/yara/pull/1621",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/VirusTotal/yara/pull/1621: 403 Client Error: Forbidden for url: https://api.github.com/repos/VirusTotal/yara/pulls/1621",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.3,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 0.3\n\n**Note:** Upon reviewing, I might have misclassified. The change doesn't address a security issue but enhances API functionality. It should be reclassified under \"Defect Remediation & Feature Upgrades.\" \n\n**Revised Final Classification:** Defect Remediation & Feature Upgrades; **Confidence:** 0.8"
}