{
  "cve_id": "CVE-2023-3894",
  "cwe_ids": [
    "CWE-787"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
  "cvss_is_v3": true,
  "repo_name": "FasterXML/jackson-dataformats-text",
  "commit_msg": "validate nesting depth goes back tp zero",
  "commit_hash": "6f2f87f94d53fe440afd353b74c07ffa97d9888f",
  "git_url": "https://github.com/FasterXML/jackson-dataformats-text/commit/6f2f87f94d53fe440afd353b74c07ffa97d9888f",
  "file_path": "toml/src/main/java/com/fasterxml/jackson/dataformat/toml/Parser.java",
  "func_name": "parseFloat",
  "func_before": "private JsonNode parseFloat(int nextState) throws IOException {\n        String text = lexer.yytext().replace(\"_\", \"\");\n        pollExpected(TomlToken.FLOAT, nextState);\n        if (text.endsWith(\"nan\")) {\n            return factory.numberNode(Double.NaN);\n        } else if (text.endsWith(\"inf\")) {\n            return factory.numberNode(text.startsWith(\"-\") ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY);\n        } else {\n            try {\n                tomlFactory.streamReadConstraints().validateFPLength(text.length());\n                BigDecimal dec = NumberInput.parseBigDecimal(\n                        text, tomlFactory.isEnabled(StreamReadFeature.USE_FAST_BIG_NUMBER_PARSER));\n                return factory.numberNode(dec);\n            } catch (NumberFormatException | StreamConstraintsException e) {\n                final String reportNum = text.length() <= MAX_CHARS_TO_REPORT ?\n                        text :\n                        text.substring(0, MAX_CHARS_TO_REPORT) + \" [truncated]\";\n                throw errorContext.atPosition(lexer).invalidNumber(e, reportNum);\n            }\n        }\n    }",
  "abstract_func_before": "private JsonNode parseFloat(int VAR_0) throws IOException {\n        String VAR_1 = VAR_2.yytext().replace(\"_\", \"\");\n        pollExpected(VAR_3.FLOAT, VAR_0);\n        if (VAR_1.endsWith(\"nan\")) {\n            return VAR_4.numberNode(VAR_5.NaN);\n        } else if (VAR_1.endsWith(\"inf\")) {\n            return VAR_4.numberNode(VAR_1.startsWith(\"-\") ? VAR_5.NEGATIVE_INFINITY : VAR_5.POSITIVE_INFINITY);\n        } else {\n            try {\n                VAR_6.streamReadConstraints().validateFPLength(VAR_1.length());\n                BigDecimal VAR_7 = VAR_8.parseBigDecimal(\n                        VAR_1, VAR_6.isEnabled(VAR_9.USE_FAST_BIG_NUMBER_PARSER));\n                return VAR_4.numberNode(VAR_7);\n            } catch (NumberFormatException | StreamConstraintsException VAR_10) {\n                final String VAR_11 = VAR_1.length() <= VAR_12 ?\n                        VAR_1 :\n                        VAR_1.substring(0, VAR_12) + \" [truncated]\";\n                throw VAR_13.atPosition(VAR_2).invalidNumber(VAR_10, VAR_11);\n            }\n        }\n    }",
  "func_graph_path_before": "FasterXML/jackson-dataformats-text/6f2f87f94d53fe440afd353b74c07ffa97d9888f/Parser.java/vul/before/1.json",
  "func": "private JsonNode parseFloat(int nextState) throws IOException {\n        final String text = lexer.yytext().replace(\"_\", \"\");\n        pollExpected(TomlToken.FLOAT, nextState);\n        if (text.endsWith(\"nan\")) {\n            return factory.numberNode(Double.NaN);\n        } else if (text.endsWith(\"inf\")) {\n            return factory.numberNode(text.startsWith(\"-\") ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY);\n        } else {\n            try {\n                tomlFactory.streamReadConstraints().validateFPLength(text.length());\n                BigDecimal dec = NumberInput.parseBigDecimal(\n                        text, tomlFactory.isEnabled(StreamReadFeature.USE_FAST_BIG_NUMBER_PARSER));\n                return factory.numberNode(dec);\n            } catch (NumberFormatException | StreamConstraintsException e) {\n                final String reportNum = text.length() <= MAX_CHARS_TO_REPORT ?\n                        text :\n                        text.substring(0, MAX_CHARS_TO_REPORT) + \" [truncated]\";\n                throw errorContext.atPosition(lexer).invalidNumber(e, reportNum);\n            }\n        }\n    }",
  "abstract_func": "private JsonNode parseFloat(int VAR_0) throws IOException {\n        final String VAR_1 = VAR_2.yytext().replace(\"_\", \"\");\n        pollExpected(VAR_3.FLOAT, VAR_0);\n        if (VAR_1.endsWith(\"nan\")) {\n            return VAR_4.numberNode(VAR_5.NaN);\n        } else if (VAR_1.endsWith(\"inf\")) {\n            return VAR_4.numberNode(VAR_1.startsWith(\"-\") ? VAR_5.NEGATIVE_INFINITY : VAR_5.POSITIVE_INFINITY);\n        } else {\n            try {\n                VAR_6.streamReadConstraints().validateFPLength(VAR_1.length());\n                BigDecimal VAR_7 = VAR_8.parseBigDecimal(\n                        VAR_1, VAR_6.isEnabled(VAR_9.USE_FAST_BIG_NUMBER_PARSER));\n                return VAR_4.numberNode(VAR_7);\n            } catch (NumberFormatException | StreamConstraintsException VAR_10) {\n                final String VAR_11 = VAR_1.length() <= VAR_12 ?\n                        VAR_1 :\n                        VAR_1.substring(0, VAR_12) + \" [truncated]\";\n                throw VAR_13.atPosition(VAR_2).invalidNumber(VAR_10, VAR_11);\n            }\n        }\n    }",
  "func_graph_path": "FasterXML/jackson-dataformats-text/6f2f87f94d53fe440afd353b74c07ffa97d9888f/Parser.java/vul/after/1.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,5 +1,5 @@\n private JsonNode parseFloat(int nextState) throws IOException {\n-        String text = lexer.yytext().replace(\"_\", \"\");\n+        final String text = lexer.yytext().replace(\"_\", \"\");\n         pollExpected(TomlToken.FLOAT, nextState);\n         if (text.endsWith(\"nan\")) {\n             return factory.numberNode(Double.NaN);",
  "diff_line_info": {
    "deleted_lines": [
      "        String text = lexer.yytext().replace(\"_\", \"\");"
    ],
    "added_lines": [
      "        final String text = lexer.yytext().replace(\"_\", \"\");"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/FasterXML/jackson-dataformats-text/pull/398",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/FasterXML/jackson-dataformats-text/pull/398: 403 Client Error: Forbidden for url: https://api.github.com/repos/FasterXML/jackson-dataformats-text/pulls/398",
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Defect Remediation & Feature Upgrades  \n**Confidence:** 0.9  \n\nThe patch addresses a bug related to the correct handling of parsing states, specifically ensuring the nesting depth is tracked properly. While there's some inconsistency between the commit message and code changes, the core intent is to fix a bug, hence falls under defect remediation."
}