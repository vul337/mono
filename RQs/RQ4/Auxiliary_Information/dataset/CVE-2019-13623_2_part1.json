{
  "cve_id": "CVE-2019-13623",
  "cwe_ids": [
    "CWE-22"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "NationalSecurityAgency/ghidra",
  "commit_msg": "GT-3001 (#789) fix RestoreTask to safely extract files from zip.\n\nAbstracted guts of GFileSystemExtractAllTask, reused in RestoreTask.\nFixed NPE in RestoreTask if restore was canceled.",
  "commit_hash": "6c0171c9200b4490deb94abf3c92d1b3da59f9bf",
  "git_url": "https://github.com/NationalSecurityAgency/ghidra/commit/6c0171c9200b4490deb94abf3c92d1b3da59f9bf",
  "file_path": "Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/archive/RestoreTask.java",
  "func_name": "run",
  "func_before": "@Override\n\tpublic void run(TaskMonitor monitor) {\n\t\tboolean ok = false;\n\t\ttry {\n\t\t\tunjarArchive(monitor);\n\t\t\tok = true;\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tMsg.showError(this, null, null, null, e);\n\t\t\tmessage = message + \" failed.\";\n\t\t}\n\t\tmessage =\n\t\t\t\"\\\"\" + projectLocator.toString() + \"\\\" from \\\"\" + jarFile.getAbsolutePath() + \"\\\"\";\n\t\tif (monitor.isCancelled()) {\n\t\t\tmessage += \" was cancelled by user.\";\n\t\t\t// put everything back the way it was...\n\t\t\tplugin.cleanupRestoredProject(projectLocator);\n\t\t}\n\t\telse {\n\t\t\tmessage += ((ok) ? \" succeeded.\" : \" failed.\");\n\t\t\tfinal boolean success = ok;\n\t\t\tRunnable r = () -> restoreCompleted(success);\n\t\t\ttry {\n\t\t\t\tSwingUtilities.invokeAndWait(r);\n\t\t\t}\n\t\t\tcatch (InterruptedException e1) {\n\t\t\t}\n\t\t\tcatch (InvocationTargetException e1) {\n\t\t\t}\n\t\t}\n\n\t\tMsg.info(this, \"Restore Archive: \" + message);\n\t}",
  "abstract_func_before": "@Override\n\tpublic void run(TaskMonitor VAR_0) {\n\t\tboolean VAR_1 = false;\n\t\ttry {\n\t\t\tunjarArchive(VAR_0);\n\t\t\tVAR_1 = true;\n\t\t}\n\t\tcatch (Exception VAR_2) {\n\t\t\tVAR_3.showError(this, null, null, null, VAR_2);\n\t\t\tVAR_4 = VAR_4 + \" failed.\";\n\t\t}\n\t\tVAR_4 =\n\t\t\t\"\\\"\" + VAR_5.toString() + \"\\\" from \\\"\" + VAR_6.getAbsolutePath() + \"\\\"\";\n\t\tif (VAR_0.isCancelled()) {\n\t\t\tVAR_4 += \" was cancelled by user.\";\n\t\t\t/* COMMENT_0 */\n\t\t\tVAR_7.cleanupRestoredProject(VAR_5);\n\t\t}\n\t\telse {\n\t\t\tVAR_4 += ((VAR_1) ? \" succeeded.\" : \" failed.\");\n\t\t\tfinal boolean VAR_8 = VAR_1;\n\t\t\tRunnable VAR_9 = () -> restoreCompleted(VAR_8);\n\t\t\ttry {\n\t\t\t\tVAR_10.invokeAndWait(VAR_9);\n\t\t\t}\n\t\t\tcatch (InterruptedException VAR_11) {\n\t\t\t}\n\t\t\tcatch (InvocationTargetException VAR_11) {\n\t\t\t}\n\t\t}\n\n\t\tVAR_3.info(this, \"Restore Archive: \" + VAR_4);\n\t}",
  "func_graph_path_before": "NationalSecurityAgency/ghidra/6c0171c9200b4490deb94abf3c92d1b3da59f9bf/RestoreTask.java/vul/before/0.json",
  "func": "@Override\n\tpublic void run(TaskMonitor monitor) throws CancelledException {\n\t\tFileSystemService fsService = FileSystemService.getInstance();\n\t\tString locInfo = \"\\\"\" + projectLocator.toString() + \"\\\" from \\\"\" +\n\t\t\tprojectArchiveFile.getAbsolutePath() + \"\\\"\";\n\n\t\tif (projectFile.exists() || projectDir.exists()) {\n\t\t\tMsg.showError(this, null, \"Restore Archive Error\",\n\t\t\t\t\"Project already exists at: \" + projectDir);\n\t\t\treturn;\n\t\t}\n\n\t\tFSRL archiveFSRL = fsService.getLocalFSRL(projectArchiveFile);\n\t\ttry (GFileSystem fs = fsService.openFileSystemContainer(archiveFSRL, monitor)) {\n\t\t\tverifyArchive(fs, monitor);\n\t\t\tstartExtract(fs, null, monitor);\n\t\t\tverifyRestoredProject();\n\t\t\topenRestoredProject();\n\t\t\tMsg.info(this, \"Restore Archive: \" + locInfo + \" succeeded.\");\n\t\t}\n\t\tcatch (CancelledException ce) {\n\t\t\tplugin.cleanupRestoredProject(projectLocator);\n\t\t\tMsg.info(this, \"Restore Archive: \" + locInfo + \" was cancelled by user.\");\n\t\t}\n\t\tcatch (Throwable e) {\n\t\t\tplugin.cleanupRestoredProject(projectLocator);\n\t\t\tString eMsg = (e.getMessage() != null) ? \":\\n\\n\" + e.getMessage() : \"\";\n\t\t\tMsg.showError(this, null, \"Restore Archive Failed\",\n\t\t\t\t\"An error occurred when restoring the project archive\\n \" + projectArchiveFile +\n\t\t\t\t\t\" to \\n \" + projectDir + eMsg,\n\t\t\t\te);\n\t\t\tMsg.info(this, \"Restore Archive: \" + locInfo + \" failed.\");\n\t\t}\n\t}",
  "abstract_func": "@Override\n\tpublic void run(TaskMonitor VAR_0) throws CancelledException {\n\t\tFileSystemService VAR_1 = VAR_2.getInstance();\n\t\tString VAR_3 = \"\\\"\" + VAR_4.toString() + \"\\\" from \\\"\" +\n\t\t\tVAR_5.getAbsolutePath() + \"\\\"\";\n\n\t\tif (VAR_6.exists() || VAR_7.exists()) {\n\t\t\tVAR_8.showError(this, null, \"Restore Archive Error\",\n\t\t\t\t\"Project already exists at: \" + VAR_7);\n\t\t\treturn;\n\t\t}\n\n\t\tFSRL VAR_9 = VAR_1.getLocalFSRL(VAR_5);\n\t\ttry (GFileSystem VAR_10 = VAR_1.openFileSystemContainer(VAR_9, VAR_0)) {\n\t\t\tverifyArchive(VAR_10, VAR_0);\n\t\t\tstartExtract(VAR_10, null, VAR_0);\n\t\t\tverifyRestoredProject();\n\t\t\topenRestoredProject();\n\t\t\tVAR_8.info(this, \"Restore Archive: \" + VAR_3 + \" succeeded.\");\n\t\t}\n\t\tcatch (CancelledException VAR_11) {\n\t\t\tVAR_12.cleanupRestoredProject(VAR_4);\n\t\t\tVAR_8.info(this, \"Restore Archive: \" + VAR_3 + \" was cancelled by user.\");\n\t\t}\n\t\tcatch (Throwable VAR_13) {\n\t\t\tVAR_12.cleanupRestoredProject(VAR_4);\n\t\t\tString VAR_14 = (VAR_13.getMessage() != null) ? \":\\n\\n\" + VAR_13.getMessage() : \"\";\n\t\t\tVAR_8.showError(this, null, \"Restore Archive Failed\",\n\t\t\t\t\"An error occurred when restoring the project archive\\n \" + VAR_5 +\n\t\t\t\t\t\" to \\n \" + VAR_7 + VAR_14,\n\t\t\t\tVAR_13);\n\t\t\tVAR_8.info(this, \"Restore Archive: \" + VAR_3 + \" failed.\");\n\t\t}\n\t}",
  "func_graph_path": "NationalSecurityAgency/ghidra/6c0171c9200b4490deb94abf3c92d1b3da59f9bf/RestoreTask.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,33 +1,34 @@\n @Override\n-\tpublic void run(TaskMonitor monitor) {\n-\t\tboolean ok = false;\n-\t\ttry {\n-\t\t\tunjarArchive(monitor);\n-\t\t\tok = true;\n-\t\t}\n-\t\tcatch (Exception e) {\n-\t\t\tMsg.showError(this, null, null, null, e);\n-\t\t\tmessage = message + \" failed.\";\n-\t\t}\n-\t\tmessage =\n-\t\t\t\"\\\"\" + projectLocator.toString() + \"\\\" from \\\"\" + jarFile.getAbsolutePath() + \"\\\"\";\n-\t\tif (monitor.isCancelled()) {\n-\t\t\tmessage += \" was cancelled by user.\";\n-\t\t\t// put everything back the way it was...\n-\t\t\tplugin.cleanupRestoredProject(projectLocator);\n-\t\t}\n-\t\telse {\n-\t\t\tmessage += ((ok) ? \" succeeded.\" : \" failed.\");\n-\t\t\tfinal boolean success = ok;\n-\t\t\tRunnable r = () -> restoreCompleted(success);\n-\t\t\ttry {\n-\t\t\t\tSwingUtilities.invokeAndWait(r);\n-\t\t\t}\n-\t\t\tcatch (InterruptedException e1) {\n-\t\t\t}\n-\t\t\tcatch (InvocationTargetException e1) {\n-\t\t\t}\n+\tpublic void run(TaskMonitor monitor) throws CancelledException {\n+\t\tFileSystemService fsService = FileSystemService.getInstance();\n+\t\tString locInfo = \"\\\"\" + projectLocator.toString() + \"\\\" from \\\"\" +\n+\t\t\tprojectArchiveFile.getAbsolutePath() + \"\\\"\";\n+\n+\t\tif (projectFile.exists() || projectDir.exists()) {\n+\t\t\tMsg.showError(this, null, \"Restore Archive Error\",\n+\t\t\t\t\"Project already exists at: \" + projectDir);\n+\t\t\treturn;\n \t\t}\n \n-\t\tMsg.info(this, \"Restore Archive: \" + message);\n+\t\tFSRL archiveFSRL = fsService.getLocalFSRL(projectArchiveFile);\n+\t\ttry (GFileSystem fs = fsService.openFileSystemContainer(archiveFSRL, monitor)) {\n+\t\t\tverifyArchive(fs, monitor);\n+\t\t\tstartExtract(fs, null, monitor);\n+\t\t\tverifyRestoredProject();\n+\t\t\topenRestoredProject();\n+\t\t\tMsg.info(this, \"Restore Archive: \" + locInfo + \" succeeded.\");\n+\t\t}\n+\t\tcatch (CancelledException ce) {\n+\t\t\tplugin.cleanupRestoredProject(projectLocator);\n+\t\t\tMsg.info(this, \"Restore Archive: \" + locInfo + \" was cancelled by user.\");\n+\t\t}\n+\t\tcatch (Throwable e) {\n+\t\t\tplugin.cleanupRestoredProject(projectLocator);\n+\t\t\tString eMsg = (e.getMessage() != null) ? \":\\n\\n\" + e.getMessage() : \"\";\n+\t\t\tMsg.showError(this, null, \"Restore Archive Failed\",\n+\t\t\t\t\"An error occurred when restoring the project archive\\n \" + projectArchiveFile +\n+\t\t\t\t\t\" to \\n \" + projectDir + eMsg,\n+\t\t\t\te);\n+\t\t\tMsg.info(this, \"Restore Archive: \" + locInfo + \" failed.\");\n+\t\t}\n \t}",
  "diff_line_info": {
    "deleted_lines": [
      "\tpublic void run(TaskMonitor monitor) {",
      "\t\tboolean ok = false;",
      "\t\ttry {",
      "\t\t\tunjarArchive(monitor);",
      "\t\t\tok = true;",
      "\t\t}",
      "\t\tcatch (Exception e) {",
      "\t\t\tMsg.showError(this, null, null, null, e);",
      "\t\t\tmessage = message + \" failed.\";",
      "\t\t}",
      "\t\tmessage =",
      "\t\t\t\"\\\"\" + projectLocator.toString() + \"\\\" from \\\"\" + jarFile.getAbsolutePath() + \"\\\"\";",
      "\t\tif (monitor.isCancelled()) {",
      "\t\t\tmessage += \" was cancelled by user.\";",
      "\t\t\t// put everything back the way it was...",
      "\t\t\tplugin.cleanupRestoredProject(projectLocator);",
      "\t\t}",
      "\t\telse {",
      "\t\t\tmessage += ((ok) ? \" succeeded.\" : \" failed.\");",
      "\t\t\tfinal boolean success = ok;",
      "\t\t\tRunnable r = () -> restoreCompleted(success);",
      "\t\t\ttry {",
      "\t\t\t\tSwingUtilities.invokeAndWait(r);",
      "\t\t\t}",
      "\t\t\tcatch (InterruptedException e1) {",
      "\t\t\t}",
      "\t\t\tcatch (InvocationTargetException e1) {",
      "\t\t\t}",
      "\t\tMsg.info(this, \"Restore Archive: \" + message);"
    ],
    "added_lines": [
      "\tpublic void run(TaskMonitor monitor) throws CancelledException {",
      "\t\tFileSystemService fsService = FileSystemService.getInstance();",
      "\t\tString locInfo = \"\\\"\" + projectLocator.toString() + \"\\\" from \\\"\" +",
      "\t\t\tprojectArchiveFile.getAbsolutePath() + \"\\\"\";",
      "",
      "\t\tif (projectFile.exists() || projectDir.exists()) {",
      "\t\t\tMsg.showError(this, null, \"Restore Archive Error\",",
      "\t\t\t\t\"Project already exists at: \" + projectDir);",
      "\t\t\treturn;",
      "\t\tFSRL archiveFSRL = fsService.getLocalFSRL(projectArchiveFile);",
      "\t\ttry (GFileSystem fs = fsService.openFileSystemContainer(archiveFSRL, monitor)) {",
      "\t\t\tverifyArchive(fs, monitor);",
      "\t\t\tstartExtract(fs, null, monitor);",
      "\t\t\tverifyRestoredProject();",
      "\t\t\topenRestoredProject();",
      "\t\t\tMsg.info(this, \"Restore Archive: \" + locInfo + \" succeeded.\");",
      "\t\t}",
      "\t\tcatch (CancelledException ce) {",
      "\t\t\tplugin.cleanupRestoredProject(projectLocator);",
      "\t\t\tMsg.info(this, \"Restore Archive: \" + locInfo + \" was cancelled by user.\");",
      "\t\t}",
      "\t\tcatch (Throwable e) {",
      "\t\t\tplugin.cleanupRestoredProject(projectLocator);",
      "\t\t\tString eMsg = (e.getMessage() != null) ? \":\\n\\n\" + e.getMessage() : \"\";",
      "\t\t\tMsg.showError(this, null, \"Restore Archive Failed\",",
      "\t\t\t\t\"An error occurred when restoring the project archive\\n \" + projectArchiveFile +",
      "\t\t\t\t\t\" to \\n \" + projectDir + eMsg,",
      "\t\t\t\te);",
      "\t\t\tMsg.info(this, \"Restore Archive: \" + locInfo + \" failed.\");",
      "\t\t}"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/NationalSecurityAgency/ghidra/pull/812",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/NationalSecurityAgency/ghidra/pull/812: 403 Client Error: Forbidden for url: https://api.github.com/repos/NationalSecurityAgency/ghidra/pulls/812",
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Defect Remediation & Feature Upgrades  \n**Confidence:** 0.9"
}