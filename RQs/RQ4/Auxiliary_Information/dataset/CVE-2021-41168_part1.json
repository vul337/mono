{
  "cve_id": "CVE-2021-41168",
  "cwe_ids": [
    "CWE-407"
  ],
  "cvss_vector": "AV:N/AC:L/Au:S/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "reddit/snudown",
  "commit_msg": "Hash-collision denial-of-service vulnerabilities (#87)\n\n* Add case insensitive SipHash implementation\n* Replace ref hash function with SipHash\n* Add label to link_ref struct.\n* Update find_link_ref to compare link labels as well as hashes\n* Update add_link_ref to disallow duplicate entries.\n* cast to char from uint8_t for strncasecmp\n* update README markdown, remove TODO\n* add py2 wheel generation\n* fix: add logic for older glibc not having getrandom, impacting staging\n\nCo-authored-by: Nicolaas <nweidema@usc.edu>",
  "commit_hash": "1ac2c130b210539ee1e5d67a7bac93f9d8007c0e",
  "git_url": "https://github.com/reddit/snudown/commit/1ac2c130b210539ee1e5d67a7bac93f9d8007c0e",
  "file_path": "src/markdown.c",
  "func_name": "hash_link_ref",
  "func_before": "static unsigned int\nhash_link_ref(const uint8_t *link_ref, size_t length)\n{\n\tsize_t i;\n\tunsigned int hash = 0;\n\n\tfor (i = 0; i < length; ++i)\n\t\thash = tolower(link_ref[i]) + (hash << 6) + (hash << 16) - hash;\n\n\treturn hash;\n}",
  "abstract_func_before": "static unsigned int\nhash_link_ref(const uint8_t *VAR_0, size_t VAR_1)\n{\n\tsize_t VAR_2;\n\tunsigned int VAR_3 = 0;\n\n\tfor (VAR_2 = 0; VAR_2 < VAR_1; ++VAR_2)\n\t\tVAR_3 = tolower(VAR_0[VAR_2]) + (VAR_3 << 6) + (VAR_3 << 16) - VAR_3;\n\n\treturn VAR_3;\n}",
  "func_graph_path_before": "reddit/snudown/1ac2c130b210539ee1e5d67a7bac93f9d8007c0e/markdown.c/vul/before/0.json",
  "func": "static unsigned int\nhash_link_ref(const uint8_t *link_ref, size_t length)\n{\n\treturn siphash_nocase(link_ref, length, sip_hash_key);\n}",
  "abstract_func": "static unsigned int\nhash_link_ref(const uint8_t *VAR_0, size_t VAR_1)\n{\n\treturn siphash_nocase(VAR_0, VAR_1, VAR_2);\n}",
  "func_graph_path": "reddit/snudown/1ac2c130b210539ee1e5d67a7bac93f9d8007c0e/markdown.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,11 +1,5 @@\n static unsigned int\n hash_link_ref(const uint8_t *link_ref, size_t length)\n {\n-\tsize_t i;\n-\tunsigned int hash = 0;\n-\n-\tfor (i = 0; i < length; ++i)\n-\t\thash = tolower(link_ref[i]) + (hash << 6) + (hash << 16) - hash;\n-\n-\treturn hash;\n+\treturn siphash_nocase(link_ref, length, sip_hash_key);\n }",
  "diff_line_info": {
    "deleted_lines": [
      "\tsize_t i;",
      "\tunsigned int hash = 0;",
      "",
      "\tfor (i = 0; i < length; ++i)",
      "\t\thash = tolower(link_ref[i]) + (hash << 6) + (hash << 16) - hash;",
      "",
      "\treturn hash;"
    ],
    "added_lines": [
      "\treturn siphash_nocase(link_ref, length, sip_hash_key);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/reddit/snudown/pull/88",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/reddit/snudown/pull/88: 403 Client Error: Forbidden for url: https://api.github.com/repos/reddit/snudown/pulls/88",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix;  \n**Confidence:** 0.95"
}