{
  "cve_id": "CVE-2018-6358",
  "cwe_ids": [
    "CWE-787"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "libming",
  "commit_msg": "Fix various compiler warnings.\n\nRemove useless variables blockstart, blockoffset and here.",
  "commit_hash": "03498cf4e0319d8836aba96ce8a817beaabb441e",
  "git_url": "https://github.com/libming/libming/commit/03498cf4e0319d8836aba96ce8a817beaabb441e",
  "file_path": "util/main.c",
  "func_name": "readMovie",
  "func_before": "static void readMovie(FILE *f)\n{\n\tint block, type, blockstart, blockoffset, length, nextFrame=0;\n\tSWF_Parserstruct *blockp;\n\tfor (;;)\n\t{\n\t\tblockoffset = fileOffset;\n\n\t\t// printf (\"Block offset: %d %d\\n\", fileOffset, m.size);\n\n\t\tif(filelen_check_fails(2))\n\t\t\tbreak;\n\t\tblock = readUInt16 (f);\n\t\ttype = block >> 6;\n\n\t\tlength = block & ((1 << 6) - 1);\n\n\t\tif (length == 63)\t\t/* it's a long block. */ \n\t\t{\n\t\t\tif(filelen_check_fails(4))\n\t\t\t\tbreak;\n\t\t\tunsigned long real_length = readUInt32 (f);\n\n                        if (real_length > INT_MAX) {\n\t\t            SWF_warn(\" Could not process long block with length %lu:\"\n                                     \" blocks with length > %d not supported on this system\\n\",\n                                     real_length, INT_MAX);\n                            continue;\n                        } else {\n                            length = (int) real_length;\n                        }\n\t\t}\n\t\t\n\t\t//      printf (\"Found Block: %s (%i), %i bytes\\n\", blockName (type), type, length);\n\t\tblockstart = fileOffset;\n\t\tnextFrame = fileOffset+length;\n\t\t\n\t\tif(filelen_check_fails(length))\n\t\t\tbreak;\n\t\tblockp= blockParse(f, length, type);\n\n\t\tif( ftell(f) != nextFrame ) \n\t\t{\n\t\t\t// will SEEK_SET later, so this is not a critical error\n\t\t        SWF_warn(\" Stream out of sync after parse of blocktype %d (%s).\"\n\t\t\t\t\" %ld but expecting %d.\\n\", type, blockName(type),\n\t\t\t\tftell(f),nextFrame);\n\t\t}\n\n\t\tif( blockp ) \n\t\t{\n\t\t\toutputBlock( type, blockp, f);\n\t\t\tfree(blockp);\t\n\t\t} else {\n\t\t\tSWF_warn(\"Error parsing block (unknown block type: %d, length %d)\\n\", \n\t\t\t\ttype, length);\n\t\t}\n\n\t\tif (type == 0 || fileOffset >= m.size)\n\t\t\tbreak;\n\t\n\t\tfseek(f, nextFrame, SEEK_SET);\n\t\tfileOffset = ftell(f);\n\t}\n\tputchar ('\\n');\n\n\tif (fileOffset < m.size)\n\t{\n\t\tSWF_warn(\"extra garbage (i.e., we messed up in main): \\n\");\n\t\tdumpBytes (f, m.size - fileOffset);\n\t\tprintf (\"\\n\\n\");\n\t}\n\toutputTrailer(&m);\n}",
  "abstract_func_before": "static void readMovie(FILE *VAR_0)\n{\n\tint VAR_1, VAR_2, VAR_3, VAR_4, VAR_5, VAR_6=0;\n\tSWF_Parserstruct *VAR_7;\n\tfor (;;)\n\t{\n\t\tVAR_4 = VAR_8;\n\n\t\t/* COMMENT_0 */\n\n\t\tif(filelen_check_fails(2))\n\t\t\tbreak;\n\t\tVAR_1 = readUInt16 (VAR_0);\n\t\tVAR_2 = VAR_1 >> 6;\n\n\t\tVAR_5 = VAR_1 & ((1 << 6) - 1);\n\n\t\tif (VAR_5 == 63)\t\t/* COMMENT_1 */ \n\t\t{\n\t\t\tif(filelen_check_fails(4))\n\t\t\t\tbreak;\n\t\t\tunsigned long VAR_9 = readUInt32 (VAR_0);\n\n                        if (VAR_9 > VAR_10) {\n\t\t            SWF_warn(\" Could not process long block with length %lu:\"\n                                     \" blocks with length > %d not supported on this system\\n\",\n                                     VAR_9, VAR_10);\n                            continue;\n                        } else {\n                            VAR_5 = (int) VAR_9;\n                        }\n\t\t}\n\t\t\n\t\t/* COMMENT_2 */\n\t\tVAR_3 = VAR_8;\n\t\tVAR_6 = VAR_8+VAR_5;\n\t\t\n\t\tif(filelen_check_fails(VAR_5))\n\t\t\tbreak;\n\t\tVAR_7= blockParse(VAR_0, VAR_5, VAR_2);\n\n\t\tif( ftell(VAR_0) != VAR_6 ) \n\t\t{\n\t\t\t/* COMMENT_3 */\n\t\t        SWF_warn(\" Stream out of sync after parse of blocktype %d (%s).\"\n\t\t\t\t\" %ld but expecting %d.\\n\", VAR_2, blockName(VAR_2),\n\t\t\t\tftell(VAR_0),VAR_6);\n\t\t}\n\n\t\tif( VAR_7 ) \n\t\t{\n\t\t\toutputBlock( VAR_2, VAR_7, VAR_0);\n\t\t\tfree(VAR_7);\t\n\t\t} else {\n\t\t\tSWF_warn(\"Error parsing block (unknown block type: %d, length %d)\\n\", \n\t\t\t\tVAR_2, VAR_5);\n\t\t}\n\n\t\tif (VAR_2 == 0 || VAR_8 >= VAR_11.size)\n\t\t\tbreak;\n\t\n\t\tfseek(VAR_0, VAR_6, VAR_12);\n\t\tVAR_8 = ftell(VAR_0);\n\t}\n\tputchar ('\\n');\n\n\tif (VAR_8 < VAR_11.size)\n\t{\n\t\tSWF_warn(\"extra garbage (i.e., we messed up in main): \\n\");\n\t\tdumpBytes (VAR_0, VAR_11.size - VAR_8);\n\t\tprintf (\"\\n\\n\");\n\t}\n\toutputTrailer(&VAR_11);\n}",
  "func_graph_path_before": "libming/03498cf4e0319d8836aba96ce8a817beaabb441e/main.c/vul/before/0.json",
  "func": "static void readMovie(FILE *f)\n{\n\tint block, type, length, nextFrame=0;\n\tSWF_Parserstruct *blockp;\n\tfor (;;)\n\t{\n\t\tif(filelen_check_fails(2))\n\t\t\tbreak;\n\t\tblock = readUInt16 (f);\n\t\ttype = block >> 6;\n\n\t\tlength = block & ((1 << 6) - 1);\n\n\t\tif (length == 63)\t\t/* it's a long block. */ \n\t\t{\n\t\t\tif(filelen_check_fails(4))\n\t\t\t\tbreak;\n\t\t\tunsigned long real_length = readUInt32 (f);\n\n                        if (real_length > INT_MAX) {\n\t\t            SWF_warn(\" Could not process long block with length %lu:\"\n                                     \" blocks with length > %d not supported on this system\\n\",\n                                     real_length, INT_MAX);\n                            continue;\n                        } else {\n                            length = (int) real_length;\n                        }\n\t\t}\n\t\t\n\t\t//      printf (\"Found Block: %s (%i), %i bytes\\n\", blockName (type), type, length);\n\t\tnextFrame = fileOffset+length;\n\t\t\n\t\tif(filelen_check_fails(length))\n\t\t\tbreak;\n\t\tblockp= blockParse(f, length, type);\n\n\t\tif( ftell(f) != nextFrame ) \n\t\t{\n\t\t\t// will SEEK_SET later, so this is not a critical error\n\t\t        SWF_warn(\" Stream out of sync after parse of blocktype %d (%s).\"\n\t\t\t\t\" %ld but expecting %d.\\n\", type, blockName(type),\n\t\t\t\tftell(f),nextFrame);\n\t\t}\n\n\t\tif( blockp ) \n\t\t{\n\t\t\toutputBlock( type, blockp, f);\n\t\t\tfree(blockp);\t\n\t\t} else {\n\t\t\tSWF_warn(\"Error parsing block (unknown block type: %d, length %d)\\n\", \n\t\t\t\ttype, length);\n\t\t}\n\n\t\tif (type == 0 || fileOffset >= m.size)\n\t\t\tbreak;\n\t\n\t\tfseek(f, nextFrame, SEEK_SET);\n\t\tfileOffset = ftell(f);\n\t}\n\tputchar ('\\n');\n\n\tif (fileOffset < m.size)\n\t{\n\t\tSWF_warn(\"extra garbage (i.e., we messed up in main): \\n\");\n\t\tdumpBytes (f, m.size - fileOffset);\n\t\tprintf (\"\\n\\n\");\n\t}\n\toutputTrailer(&m);\n}",
  "abstract_func": "static void readMovie(FILE *VAR_0)\n{\n\tint VAR_1, VAR_2, VAR_3, VAR_4=0;\n\tSWF_Parserstruct *VAR_5;\n\tfor (;;)\n\t{\n\t\tif(filelen_check_fails(2))\n\t\t\tbreak;\n\t\tVAR_1 = readUInt16 (VAR_0);\n\t\tVAR_2 = VAR_1 >> 6;\n\n\t\tVAR_3 = VAR_1 & ((1 << 6) - 1);\n\n\t\tif (VAR_3 == 63)\t\t/* COMMENT_0 */ \n\t\t{\n\t\t\tif(filelen_check_fails(4))\n\t\t\t\tbreak;\n\t\t\tunsigned long VAR_6 = readUInt32 (VAR_0);\n\n                        if (VAR_6 > VAR_7) {\n\t\t            SWF_warn(\" Could not process long block with length %lu:\"\n                                     \" blocks with length > %d not supported on this system\\n\",\n                                     VAR_6, VAR_7);\n                            continue;\n                        } else {\n                            VAR_3 = (int) VAR_6;\n                        }\n\t\t}\n\t\t\n\t\t/* COMMENT_1 */\n\t\tVAR_4 = VAR_8+VAR_3;\n\t\t\n\t\tif(filelen_check_fails(VAR_3))\n\t\t\tbreak;\n\t\tVAR_5= blockParse(VAR_0, VAR_3, VAR_2);\n\n\t\tif( ftell(VAR_0) != VAR_4 ) \n\t\t{\n\t\t\t/* COMMENT_2 */\n\t\t        SWF_warn(\" Stream out of sync after parse of blocktype %d (%s).\"\n\t\t\t\t\" %ld but expecting %d.\\n\", VAR_2, blockName(VAR_2),\n\t\t\t\tftell(VAR_0),VAR_4);\n\t\t}\n\n\t\tif( VAR_5 ) \n\t\t{\n\t\t\toutputBlock( VAR_2, VAR_5, VAR_0);\n\t\t\tfree(VAR_5);\t\n\t\t} else {\n\t\t\tSWF_warn(\"Error parsing block (unknown block type: %d, length %d)\\n\", \n\t\t\t\tVAR_2, VAR_3);\n\t\t}\n\n\t\tif (VAR_2 == 0 || VAR_8 >= VAR_9.size)\n\t\t\tbreak;\n\t\n\t\tfseek(VAR_0, VAR_4, VAR_10);\n\t\tVAR_8 = ftell(VAR_0);\n\t}\n\tputchar ('\\n');\n\n\tif (VAR_8 < VAR_9.size)\n\t{\n\t\tSWF_warn(\"extra garbage (i.e., we messed up in main): \\n\");\n\t\tdumpBytes (VAR_0, VAR_9.size - VAR_8);\n\t\tprintf (\"\\n\\n\");\n\t}\n\toutputTrailer(&VAR_9);\n}",
  "func_graph_path": "libming/03498cf4e0319d8836aba96ce8a817beaabb441e/main.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,13 +1,9 @@\n static void readMovie(FILE *f)\n {\n-\tint block, type, blockstart, blockoffset, length, nextFrame=0;\n+\tint block, type, length, nextFrame=0;\n \tSWF_Parserstruct *blockp;\n \tfor (;;)\n \t{\n-\t\tblockoffset = fileOffset;\n-\n-\t\t// printf (\"Block offset: %d %d\\n\", fileOffset, m.size);\n-\n \t\tif(filelen_check_fails(2))\n \t\t\tbreak;\n \t\tblock = readUInt16 (f);\n@@ -32,7 +28,6 @@\n \t\t}\n \t\t\n \t\t//      printf (\"Found Block: %s (%i), %i bytes\\n\", blockName (type), type, length);\n-\t\tblockstart = fileOffset;\n \t\tnextFrame = fileOffset+length;\n \t\t\n \t\tif(filelen_check_fails(length))",
  "diff_line_info": {
    "deleted_lines": [
      "\tint block, type, blockstart, blockoffset, length, nextFrame=0;",
      "\t\tblockoffset = fileOffset;",
      "",
      "\t\t// printf (\"Block offset: %d %d\\n\", fileOffset, m.size);",
      "",
      "\t\tblockstart = fileOffset;"
    ],
    "added_lines": [
      "\tint block, type, length, nextFrame=0;"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/libming/libming/pull/124",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/libming/libming/pull/124: 403 Client Error: Forbidden for url: https://api.github.com/repos/libming/libming/pulls/124",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 0.9  \nThe patch addresses a heap buffer overflow and removes duplicate code with known security issues."
}