{
  "cve_id": "CVE-2023-1495",
  "cwe_ids": [
    "CWE-89"
  ],
  "cvss_vector": "AV:N/AC:L/Au:S/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "getrebuild/rebuild",
  "commit_msg": "H5 sync2 (#595)\n\n* style: 目录样式gh\r\n\r\n* style: J_new\r\n\r\n* feat: advListFilterTabs\r\n\r\n* feat: nav-copyto\r\n\r\n* enh: 助记码全拼\r\n\r\n* enh: 地图搜索选点\r\n\r\n* enh: topnav\r\n\r\n* list pn\r\n\r\n* .form-line.v33\r\n\r\n* open TAG\r\n\r\n* KVS addShutdownHook\r\n\r\n* fix: #594\r\n\r\n---------\r\n\r\nCo-authored-by: devezhao <zhaofang123@gmail.com>",
  "commit_hash": "c9474f84e5f376dd2ade2078e3039961a9425da7",
  "git_url": "https://github.com/getrebuild/rebuild/commit/c9474f84e5f376dd2ade2078e3039961a9425da7",
  "file_path": "src/main/java/com/rebuild/core/rbstore/ClassificationImporter.java",
  "func_name": "findOrCreate",
  "func_before": "protected ID findOrCreate(String name, String code, ID parent, int level) {\n        String sql = \"select itemId from ClassificationData where dataId = ? and \";\n        if (StringUtils.isNotBlank(code)) {\n            sql += String.format(\"(code = '%s' or name = '%s')\",\n                    StringEscapeUtils.escapeSql(code), StringEscapeUtils.escapeSql(name));\n        } else {\n            sql += String.format(\"name = '%s'\", StringEscapeUtils.escapeSql(name));\n        }\n\n        if (parent != null) {\n            sql += String.format(\" and parent = '%s'\", parent);\n        }\n\n        Object[] exists = Application.createQueryNoFilter(sql).setParameter(1, dest).unique();\n        if (exists != null) {\n            return (ID) exists[0];\n        }\n\n        Record item = EntityHelper.forNew(EntityHelper.ClassificationData, this.getUser());\n        item.setString(\"name\", name);\n        item.setInt(\"level\", level);\n        item.setID(\"dataId\", dest);\n        if (StringUtils.isNotBlank(code)) {\n            item.setString(\"code\", code);\n        }\n        if (parent != null) {\n            item.setID(\"parent\", parent);\n        }\n\n        item = Application.getBean(ClassificationService.class).createOrUpdateItem(item);\n        this.addSucceeded();\n        return item.getPrimary();\n    }",
  "abstract_func_before": "protected ID findOrCreate(String VAR_0, String VAR_1, ID VAR_2, int VAR_3) {\n        String VAR_4 = \"select itemId from ClassificationData where dataId = ? and \";\n        if (VAR_5.isNotBlank(VAR_1)) {\n            VAR_4 += VAR_6.format(\"(code = '%s' or name = '%s')\",\n                    VAR_7.escapeSql(VAR_1), VAR_7.escapeSql(VAR_0));\n        } else {\n            VAR_4 += VAR_6.format(\"name = '%s'\", VAR_7.escapeSql(VAR_0));\n        }\n\n        if (VAR_2 != null) {\n            VAR_4 += VAR_6.format(\" and parent = '%s'\", VAR_2);\n        }\n\n        Object[] VAR_8 = VAR_9.createQueryNoFilter(VAR_4).setParameter(1, VAR_10).unique();\n        if (VAR_8 != null) {\n            return (ID) VAR_8[0];\n        }\n\n        Record VAR_11 = VAR_12.forNew(VAR_12.ClassificationData, this.getUser());\n        VAR_11.setString(\"name\", VAR_0);\n        VAR_11.setInt(\"level\", VAR_3);\n        VAR_11.setID(\"dataId\", VAR_10);\n        if (VAR_5.isNotBlank(VAR_1)) {\n            VAR_11.setString(\"code\", VAR_1);\n        }\n        if (VAR_2 != null) {\n            VAR_11.setID(\"parent\", VAR_2);\n        }\n\n        VAR_11 = VAR_9.getBean(ClassificationService.class).createOrUpdateItem(VAR_11);\n        this.addSucceeded();\n        return VAR_11.getPrimary();\n    }",
  "func_graph_path_before": "getrebuild/rebuild/c9474f84e5f376dd2ade2078e3039961a9425da7/ClassificationImporter.java/vul/before/0.json",
  "func": "protected ID findOrCreate(String name, String code, ID parent, int level) {\n        String sql = \"select itemId from ClassificationData where dataId = ? and \";\n        if (StringUtils.isNotBlank(code)) {\n            sql += String.format(\"(code = '%s' or name = '%s')\",\n                    CommonsUtils.escapeSql(code), CommonsUtils.escapeSql(name));\n        } else {\n            sql += String.format(\"name = '%s'\", CommonsUtils.escapeSql(name));\n        }\n\n        if (parent != null) {\n            sql += String.format(\" and parent = '%s'\", parent);\n        }\n\n        Object[] exists = Application.createQueryNoFilter(sql).setParameter(1, dest).unique();\n        if (exists != null) {\n            return (ID) exists[0];\n        }\n\n        Record item = EntityHelper.forNew(EntityHelper.ClassificationData, this.getUser());\n        item.setString(\"name\", name);\n        item.setInt(\"level\", level);\n        item.setID(\"dataId\", dest);\n        if (StringUtils.isNotBlank(code)) {\n            item.setString(\"code\", code);\n        }\n        if (parent != null) {\n            item.setID(\"parent\", parent);\n        }\n\n        item = Application.getBean(ClassificationService.class).createOrUpdateItem(item);\n        this.addSucceeded();\n        return item.getPrimary();\n    }",
  "abstract_func": "protected ID findOrCreate(String VAR_0, String VAR_1, ID VAR_2, int VAR_3) {\n        String VAR_4 = \"select itemId from ClassificationData where dataId = ? and \";\n        if (VAR_5.isNotBlank(VAR_1)) {\n            VAR_4 += VAR_6.format(\"(code = '%s' or name = '%s')\",\n                    VAR_7.escapeSql(VAR_1), VAR_7.escapeSql(VAR_0));\n        } else {\n            VAR_4 += VAR_6.format(\"name = '%s'\", VAR_7.escapeSql(VAR_0));\n        }\n\n        if (VAR_2 != null) {\n            VAR_4 += VAR_6.format(\" and parent = '%s'\", VAR_2);\n        }\n\n        Object[] VAR_8 = VAR_9.createQueryNoFilter(VAR_4).setParameter(1, VAR_10).unique();\n        if (VAR_8 != null) {\n            return (ID) VAR_8[0];\n        }\n\n        Record VAR_11 = VAR_12.forNew(VAR_12.ClassificationData, this.getUser());\n        VAR_11.setString(\"name\", VAR_0);\n        VAR_11.setInt(\"level\", VAR_3);\n        VAR_11.setID(\"dataId\", VAR_10);\n        if (VAR_5.isNotBlank(VAR_1)) {\n            VAR_11.setString(\"code\", VAR_1);\n        }\n        if (VAR_2 != null) {\n            VAR_11.setID(\"parent\", VAR_2);\n        }\n\n        VAR_11 = VAR_9.getBean(ClassificationService.class).createOrUpdateItem(VAR_11);\n        this.addSucceeded();\n        return VAR_11.getPrimary();\n    }",
  "func_graph_path": "getrebuild/rebuild/c9474f84e5f376dd2ade2078e3039961a9425da7/ClassificationImporter.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -2,9 +2,9 @@\n         String sql = \"select itemId from ClassificationData where dataId = ? and \";\n         if (StringUtils.isNotBlank(code)) {\n             sql += String.format(\"(code = '%s' or name = '%s')\",\n-                    StringEscapeUtils.escapeSql(code), StringEscapeUtils.escapeSql(name));\n+                    CommonsUtils.escapeSql(code), CommonsUtils.escapeSql(name));\n         } else {\n-            sql += String.format(\"name = '%s'\", StringEscapeUtils.escapeSql(name));\n+            sql += String.format(\"name = '%s'\", CommonsUtils.escapeSql(name));\n         }\n \n         if (parent != null) {",
  "diff_line_info": {
    "deleted_lines": [
      "                    StringEscapeUtils.escapeSql(code), StringEscapeUtils.escapeSql(name));",
      "            sql += String.format(\"name = '%s'\", StringEscapeUtils.escapeSql(name));"
    ],
    "added_lines": [
      "                    CommonsUtils.escapeSql(code), CommonsUtils.escapeSql(name));",
      "            sql += String.format(\"name = '%s'\", CommonsUtils.escapeSql(name));"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/getrebuild/rebuild/pull/595",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/getrebuild/rebuild/pull/595: 403 Client Error: Forbidden for url: https://api.github.com/repos/getrebuild/rebuild/pulls/595",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 0.9\n\n**Step-by-Step Explanation:**\n\n1. **Input Analysis:** The commit message includes several style and feature updates along with a fix for issue #594. The vulnerability description mentions UI changes but also includes a CVE fix. The code diff replaces SQL escaping methods, which is a security measure.\n\n2. **Consistency Check:** The code changes align with escaping SQL inputs, a common security fix for SQL injection. Although the commit message doesn't explicitly mention security, the presence of a CVE fix and the code changes suggest alignment.\n\n3. **Purpose Evaluation:** The code modifies SQL escaping, indicating a security improvement, not a UI change.\n\n4. **Security Assessment:** The change prevents SQL injection, a known security issue, and the CVE reference confirms it's a security fix.\n\n5. **Confidence Score:** The clear focus on security and alignment with a CVE fix give high confidence, hence 0.9."
}