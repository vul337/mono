{
  "cve_id": "CVE-2017-1000412",
  "cwe_ids": [
    "CWE-200"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:N/A:N",
  "cvss_is_v3": false,
  "repo_name": "OP-TEE/optee_os",
  "commit_msg": "ltc: fix formatting related to exptmod\n\nSigned-off-by: Joakim Bech <joakim.bech@linaro.org>\nReviewed-by: Jerome Forissier <jerome.forissier@linaro.org>\nReviewed-by: Jens Wiklander <jens.wiklander@linaro.org>\nReviewed-by: Etienne Carriere <etienne.carriere@linaro.org>\nTested-by: Jerome Forissier <jerome.forissier@linaro.org> (HiKey, GP)\nTested-by: Etienne Carriere <etienne.carriere@linaro.org> (b2260, GP)",
  "commit_hash": "63f5467fc36aa3789a7aef9cfe55e477c786c404",
  "git_url": "https://github.com/OP-TEE/optee_os/commit/63f5467fc36aa3789a7aef9cfe55e477c786c404",
  "file_path": "core/lib/libtomcrypt/src/mpa_desc.c",
  "func_name": "exptmod",
  "func_before": "static int exptmod(void *a, void *b, void *c, void *d)\n{\n\tLTC_ARGCHK(a != NULL);\n\tLTC_ARGCHK(b != NULL);\n\tLTC_ARGCHK(c != NULL);\n\tLTC_ARGCHK(d != NULL);\n\tvoid *c_mont;\n\tif (montgomery_setup(c, &c_mont) != CRYPT_OK) {\n\t\treturn CRYPT_MEM;\n\t}\n\n\tvoid *d_tmp;\n\tint memguard;\n\n\tmemguard = (a == d || b == d);\n\n\tif (memguard) {\n\t\tif (init(&d_tmp) != CRYPT_OK) {\n\t\t\treturn CRYPT_MEM;\n\t\t}\n\t} else {\n\t\td_tmp = d;\n\t}\n\n\t// WARNING !!\n\t// Temporary fix, since ExpMod behaves badly when a > c\n\t//           (ie \"a\" is greater than the modulus)\n\tmod(a, c, d_tmp);\n\n\n\tmpa_exp_mod((mpanum) d,\n\t\t\t(const mpanum) d_tmp,\n\t\t\t(const mpanum) b,\n\t\t\t(const mpanum) c,\n\t\t\t((mpa_fmm_context)c_mont)->r_ptr,\n\t\t\t((mpa_fmm_context)c_mont)->r2_ptr,\n\t\t\t((mpa_fmm_context)c_mont)->n_inv,\n\t\t\texternal_mem_pool);\n\tmontgomery_deinit(c_mont);\n\tif (memguard) {\n\t\tdeinit(d_tmp);\n\t}\n\treturn CRYPT_OK;\n}",
  "abstract_func_before": "static int exptmod(void *VAR_0, void *VAR_1, void *VAR_2, void *VAR_3)\n{\n\tLTC_ARGCHK(VAR_0 != NULL);\n\tLTC_ARGCHK(VAR_1 != NULL);\n\tLTC_ARGCHK(VAR_2 != NULL);\n\tLTC_ARGCHK(VAR_3 != NULL);\n\tvoid *VAR_4;\n\tif (montgomery_setup(VAR_2, &VAR_4) != VAR_5) {\n\t\treturn VAR_6;\n\t}\n\n\tvoid *VAR_7;\n\tint VAR_8;\n\n\tVAR_8 = (VAR_0 == VAR_3 || VAR_1 == VAR_3);\n\n\tif (VAR_8) {\n\t\tif (init(&VAR_7) != VAR_5) {\n\t\t\treturn VAR_6;\n\t\t}\n\t} else {\n\t\tVAR_7 = VAR_3;\n\t}\n\n\t/* COMMENT_0 */\n\t/* COMMENT_1 */\n\t/* COMMENT_2 */\n\tmod(VAR_0, VAR_2, VAR_7);\n\n\n\tmpa_exp_mod((mpanum) VAR_3,\n\t\t\t(const mpanum) VAR_7,\n\t\t\t(const mpanum) VAR_1,\n\t\t\t(const mpanum) VAR_2,\n\t\t\t((mpa_fmm_context)VAR_4)->r_ptr,\n\t\t\t((mpa_fmm_context)VAR_4)->r2_ptr,\n\t\t\t((mpa_fmm_context)VAR_4)->n_inv,\n\t\t\tVAR_9);\n\tmontgomery_deinit(VAR_4);\n\tif (VAR_8) {\n\t\tdeinit(VAR_7);\n\t}\n\treturn VAR_5;\n}",
  "func_graph_path_before": "OP-TEE/optee_os/63f5467fc36aa3789a7aef9cfe55e477c786c404/mpa_desc.c/vul/before/0.json",
  "func": "static int exptmod(void *a, void *b, void *c, void *d)\n{\n\tLTC_ARGCHK(a != NULL);\n\tLTC_ARGCHK(b != NULL);\n\tLTC_ARGCHK(c != NULL);\n\tLTC_ARGCHK(d != NULL);\n\tvoid *c_mont;\n\tif (montgomery_setup(c, &c_mont) != CRYPT_OK) {\n\t\treturn CRYPT_MEM;\n\t}\n\n\tvoid *d_tmp;\n\tint memguard;\n\n\tmemguard = (a == d || b == d);\n\n\t/*\n\t * If the calculated result is supposed to be stored at the same address\n\t * as either the base or the exponent, then we must use a temporary\n\t * variable.\n\t */\n\tif (memguard) {\n\t\tif (init(&d_tmp) != CRYPT_OK) {\n\t\t\treturn CRYPT_MEM;\n\t\t}\n\t} else {\n\t\td_tmp = d;\n\t}\n\n\t/*\n\t * WARNING! Temporary fix, since ExpMod behaves badly when a > c\n\t * (ie \"a\" * is greater than the modulus).\n\t */\n\tmod(a, c, d_tmp);\n\n\tmpa_exp_mod((mpanum)d,\n\t\t    (const mpanum)d_tmp,\n\t\t    (const mpanum)b,\n\t\t    (const mpanum)c,\n\t\t    ((mpa_fmm_context)c_mont)->r_ptr,\n\t\t    ((mpa_fmm_context)c_mont)->r2_ptr,\n\t\t    ((mpa_fmm_context)c_mont)->n_inv,\n\t\t    external_mem_pool);\n\n\tmontgomery_deinit(c_mont);\n\n\tif (memguard) {\n\t\tdeinit(d_tmp);\n\t}\n\n\treturn CRYPT_OK;\n}",
  "abstract_func": "static int exptmod(void *VAR_0, void *VAR_1, void *VAR_2, void *VAR_3)\n{\n\tLTC_ARGCHK(VAR_0 != NULL);\n\tLTC_ARGCHK(VAR_1 != NULL);\n\tLTC_ARGCHK(VAR_2 != NULL);\n\tLTC_ARGCHK(VAR_3 != NULL);\n\tvoid *VAR_4;\n\tif (montgomery_setup(VAR_2, &VAR_4) != VAR_5) {\n\t\treturn VAR_6;\n\t}\n\n\tvoid *VAR_7;\n\tint VAR_8;\n\n\tVAR_8 = (VAR_0 == VAR_3 || VAR_1 == VAR_3);\n\n\t/* COMMENT_0 */\n                                                                         \n                                                                    \n             \n    \n\tif (VAR_8) {\n\t\tif (init(&VAR_7) != VAR_5) {\n\t\t\treturn VAR_6;\n\t\t}\n\t} else {\n\t\tVAR_7 = VAR_3;\n\t}\n\n\t/* COMMENT_5 */\n                                                                 \n                                           \n    \n\tmod(VAR_0, VAR_2, VAR_7);\n\n\tmpa_exp_mod((mpanum)VAR_3,\n\t\t    (const mpanum)VAR_7,\n\t\t    (const mpanum)VAR_1,\n\t\t    (const mpanum)VAR_2,\n\t\t    ((mpa_fmm_context)VAR_4)->r_ptr,\n\t\t    ((mpa_fmm_context)VAR_4)->r2_ptr,\n\t\t    ((mpa_fmm_context)VAR_4)->n_inv,\n\t\t    VAR_9);\n\n\tmontgomery_deinit(VAR_4);\n\n\tif (VAR_8) {\n\t\tdeinit(VAR_7);\n\t}\n\n\treturn VAR_5;\n}",
  "func_graph_path": "OP-TEE/optee_os/63f5467fc36aa3789a7aef9cfe55e477c786c404/mpa_desc.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -14,6 +14,11 @@\n \n \tmemguard = (a == d || b == d);\n \n+\t/*\n+\t * If the calculated result is supposed to be stored at the same address\n+\t * as either the base or the exponent, then we must use a temporary\n+\t * variable.\n+\t */\n \tif (memguard) {\n \t\tif (init(&d_tmp) != CRYPT_OK) {\n \t\t\treturn CRYPT_MEM;\n@@ -22,23 +27,26 @@\n \t\td_tmp = d;\n \t}\n \n-\t// WARNING !!\n-\t// Temporary fix, since ExpMod behaves badly when a > c\n-\t//           (ie \"a\" is greater than the modulus)\n+\t/*\n+\t * WARNING! Temporary fix, since ExpMod behaves badly when a > c\n+\t * (ie \"a\" * is greater than the modulus).\n+\t */\n \tmod(a, c, d_tmp);\n \n+\tmpa_exp_mod((mpanum)d,\n+\t\t    (const mpanum)d_tmp,\n+\t\t    (const mpanum)b,\n+\t\t    (const mpanum)c,\n+\t\t    ((mpa_fmm_context)c_mont)->r_ptr,\n+\t\t    ((mpa_fmm_context)c_mont)->r2_ptr,\n+\t\t    ((mpa_fmm_context)c_mont)->n_inv,\n+\t\t    external_mem_pool);\n \n-\tmpa_exp_mod((mpanum) d,\n-\t\t\t(const mpanum) d_tmp,\n-\t\t\t(const mpanum) b,\n-\t\t\t(const mpanum) c,\n-\t\t\t((mpa_fmm_context)c_mont)->r_ptr,\n-\t\t\t((mpa_fmm_context)c_mont)->r2_ptr,\n-\t\t\t((mpa_fmm_context)c_mont)->n_inv,\n-\t\t\texternal_mem_pool);\n \tmontgomery_deinit(c_mont);\n+\n \tif (memguard) {\n \t\tdeinit(d_tmp);\n \t}\n+\n \treturn CRYPT_OK;\n }",
  "diff_line_info": {
    "deleted_lines": [
      "\t// WARNING !!",
      "\t// Temporary fix, since ExpMod behaves badly when a > c",
      "\t//           (ie \"a\" is greater than the modulus)",
      "\tmpa_exp_mod((mpanum) d,",
      "\t\t\t(const mpanum) d_tmp,",
      "\t\t\t(const mpanum) b,",
      "\t\t\t(const mpanum) c,",
      "\t\t\t((mpa_fmm_context)c_mont)->r_ptr,",
      "\t\t\t((mpa_fmm_context)c_mont)->r2_ptr,",
      "\t\t\t((mpa_fmm_context)c_mont)->n_inv,",
      "\t\t\texternal_mem_pool);"
    ],
    "added_lines": [
      "\t/*",
      "\t * If the calculated result is supposed to be stored at the same address",
      "\t * as either the base or the exponent, then we must use a temporary",
      "\t * variable.",
      "\t */",
      "\t/*",
      "\t * WARNING! Temporary fix, since ExpMod behaves badly when a > c",
      "\t * (ie \"a\" * is greater than the modulus).",
      "\t */",
      "\tmpa_exp_mod((mpanum)d,",
      "\t\t    (const mpanum)d_tmp,",
      "\t\t    (const mpanum)b,",
      "\t\t    (const mpanum)c,",
      "\t\t    ((mpa_fmm_context)c_mont)->r_ptr,",
      "\t\t    ((mpa_fmm_context)c_mont)->r2_ptr,",
      "\t\t    ((mpa_fmm_context)c_mont)->n_inv,",
      "\t\t    external_mem_pool);",
      "",
      ""
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/OP-TEE/optee_os/pull/1610",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/OP-TEE/optee_os/pull/1610: 403 Client Error: Forbidden for url: https://api.github.com/repos/OP-TEE/optee_os/pulls/1610",
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.8,
  "Bug Filter Response": "**Final Classification:** Defect Remediation & Feature Upgrades  \n**Confidence:** 0.8"
}