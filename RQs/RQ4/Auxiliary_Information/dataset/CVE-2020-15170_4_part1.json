{
  "cve_id": "CVE-2020-15170",
  "cwe_ids": [
    "CWE-20"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "apolloconfig/apollo",
  "commit_msg": "add access control support for admin service",
  "commit_hash": "ae9ba6cfd32ed80469f162e5e3583e2477862ddf",
  "git_url": "https://github.com/apolloconfig/apollo/commit/ae9ba6cfd32ed80469f162e5e3583e2477862ddf",
  "file_path": "apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/component/RetryableRestTemplate.java",
  "func_name": "doExecute",
  "func_before": "private <T> T doExecute(HttpMethod method, ServiceDTO service, String path, Object request,\n                          Class<T> responseType,\n                          Object... uriVariables) {\n    T result = null;\n    switch (method) {\n      case GET:\n        result = restTemplate.getForObject(parseHost(service) + path, responseType, uriVariables);\n        break;\n      case POST:\n        result =\n            restTemplate.postForEntity(parseHost(service) + path, request, responseType, uriVariables).getBody();\n        break;\n      case PUT:\n        restTemplate.put(parseHost(service) + path, request, uriVariables);\n        break;\n      case DELETE:\n        restTemplate.delete(parseHost(service) + path, uriVariables);\n        break;\n      default:\n        throw new UnsupportedOperationException(String.format(\"unsupported http method(method=%s)\", method));\n    }\n    return result;\n  }",
  "abstract_func_before": "private <T> T doExecute(HttpMethod VAR_0, ServiceDTO VAR_1, String VAR_2, Object VAR_3,\n                          Class<T> VAR_4,\n                          Object... VAR_5) {\n    T VAR_6 = null;\n    switch (VAR_0) {\n      case VAR_7:\n        VAR_6 = VAR_8.getForObject(parseHost(VAR_1) + VAR_2, VAR_4, VAR_5);\n        break;\n      case VAR_9:\n        VAR_6 =\n            VAR_8.postForEntity(parseHost(VAR_1) + VAR_2, VAR_3, VAR_4, VAR_5).getBody();\n        break;\n      case VAR_10:\n        VAR_8.put(parseHost(VAR_1) + VAR_2, VAR_3, VAR_5);\n        break;\n      case VAR_11:\n        VAR_8.delete(parseHost(VAR_1) + VAR_2, VAR_5);\n        break;\n      default:\n        throw new UnsupportedOperationException(VAR_12.format(\"unsupported http method(method=%s)\", VAR_0));\n    }\n    return VAR_6;\n  }",
  "func_graph_path_before": "apolloconfig/apollo/ae9ba6cfd32ed80469f162e5e3583e2477862ddf/RetryableRestTemplate.java/vul/before/2.json",
  "func": "private <T> T doExecute(HttpMethod method, HttpHeaders extraHeaders, ServiceDTO service, String path, Object request,\n                          Class<T> responseType, Object... uriVariables) {\n    T result = null;\n    switch (method) {\n      case GET:\n      case POST:\n      case PUT:\n      case DELETE:\n        HttpEntity entity;\n        if (request instanceof HttpEntity) {\n          entity = (HttpEntity) request;\n          if (!CollectionUtils.isEmpty(extraHeaders)) {\n            HttpHeaders headers = new HttpHeaders();\n            headers.addAll(entity.getHeaders());\n            headers.addAll(extraHeaders);\n            entity = new HttpEntity<>(entity.getBody(), headers);\n          }\n        } else {\n          entity = new HttpEntity<>(request, extraHeaders);\n        }\n        result = restTemplate\n            .exchange(parseHost(service) + path, method, entity, responseType, uriVariables)\n            .getBody();\n        break;\n      default:\n        throw new UnsupportedOperationException(String.format(\"unsupported http method(method=%s)\", method));\n    }\n    return result;\n  }",
  "abstract_func": "private <T> T doExecute(HttpMethod VAR_0, HttpHeaders VAR_1, ServiceDTO VAR_2, String VAR_3, Object VAR_4,\n                          Class<T> VAR_5, Object... VAR_6) {\n    T VAR_7 = null;\n    switch (VAR_0) {\n      case VAR_8:\n      case VAR_9:\n      case VAR_10:\n      case VAR_11:\n        HttpEntity VAR_12;\n        if (VAR_4 instanceof HttpEntity) {\n          VAR_12 = (HttpEntity) VAR_4;\n          if (!VAR_13.isEmpty(VAR_1)) {\n            HttpHeaders VAR_14 = new HttpHeaders();\n            VAR_14.addAll(VAR_12.getHeaders());\n            VAR_14.addAll(VAR_1);\n            VAR_12 = new HttpEntity<>(VAR_12.getBody(), VAR_14);\n          }\n        } else {\n          VAR_12 = new HttpEntity<>(VAR_4, VAR_1);\n        }\n        VAR_7 = VAR_15\n            .exchange(parseHost(VAR_2) + VAR_3, VAR_0, VAR_12, VAR_5, VAR_6)\n            .getBody();\n        break;\n      default:\n        throw new UnsupportedOperationException(VAR_16.format(\"unsupported http method(method=%s)\", VAR_0));\n    }\n    return VAR_7;\n  }",
  "func_graph_path": "apolloconfig/apollo/ae9ba6cfd32ed80469f162e5e3583e2477862ddf/RetryableRestTemplate.java/vul/after/2.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,20 +1,26 @@\n-private <T> T doExecute(HttpMethod method, ServiceDTO service, String path, Object request,\n-                          Class<T> responseType,\n-                          Object... uriVariables) {\n+private <T> T doExecute(HttpMethod method, HttpHeaders extraHeaders, ServiceDTO service, String path, Object request,\n+                          Class<T> responseType, Object... uriVariables) {\n     T result = null;\n     switch (method) {\n       case GET:\n-        result = restTemplate.getForObject(parseHost(service) + path, responseType, uriVariables);\n-        break;\n       case POST:\n-        result =\n-            restTemplate.postForEntity(parseHost(service) + path, request, responseType, uriVariables).getBody();\n-        break;\n       case PUT:\n-        restTemplate.put(parseHost(service) + path, request, uriVariables);\n-        break;\n       case DELETE:\n-        restTemplate.delete(parseHost(service) + path, uriVariables);\n+        HttpEntity entity;\n+        if (request instanceof HttpEntity) {\n+          entity = (HttpEntity) request;\n+          if (!CollectionUtils.isEmpty(extraHeaders)) {\n+            HttpHeaders headers = new HttpHeaders();\n+            headers.addAll(entity.getHeaders());\n+            headers.addAll(extraHeaders);\n+            entity = new HttpEntity<>(entity.getBody(), headers);\n+          }\n+        } else {\n+          entity = new HttpEntity<>(request, extraHeaders);\n+        }\n+        result = restTemplate\n+            .exchange(parseHost(service) + path, method, entity, responseType, uriVariables)\n+            .getBody();\n         break;\n       default:\n         throw new UnsupportedOperationException(String.format(\"unsupported http method(method=%s)\", method));",
  "diff_line_info": {
    "deleted_lines": [
      "private <T> T doExecute(HttpMethod method, ServiceDTO service, String path, Object request,",
      "                          Class<T> responseType,",
      "                          Object... uriVariables) {",
      "        result = restTemplate.getForObject(parseHost(service) + path, responseType, uriVariables);",
      "        break;",
      "        result =",
      "            restTemplate.postForEntity(parseHost(service) + path, request, responseType, uriVariables).getBody();",
      "        break;",
      "        restTemplate.put(parseHost(service) + path, request, uriVariables);",
      "        break;",
      "        restTemplate.delete(parseHost(service) + path, uriVariables);"
    ],
    "added_lines": [
      "private <T> T doExecute(HttpMethod method, HttpHeaders extraHeaders, ServiceDTO service, String path, Object request,",
      "                          Class<T> responseType, Object... uriVariables) {",
      "        HttpEntity entity;",
      "        if (request instanceof HttpEntity) {",
      "          entity = (HttpEntity) request;",
      "          if (!CollectionUtils.isEmpty(extraHeaders)) {",
      "            HttpHeaders headers = new HttpHeaders();",
      "            headers.addAll(entity.getHeaders());",
      "            headers.addAll(extraHeaders);",
      "            entity = new HttpEntity<>(entity.getBody(), headers);",
      "          }",
      "        } else {",
      "          entity = new HttpEntity<>(request, extraHeaders);",
      "        }",
      "        result = restTemplate",
      "            .exchange(parseHost(service) + path, method, entity, responseType, uriVariables)",
      "            .getBody();"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/apolloconfig/apollo/pull/3233",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/apolloconfig/apollo/pull/3233: 403 Client Error: Forbidden for url: https://api.github.com/repos/apolloconfig/apollo/pulls/3233",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.95  \n\nThe patch introduces access control for the admin service, which is a direct security measure to restrict unauthorized access. The code changes involve modifying HTTP request handling to include headers, likely for authentication. This clearly addresses a security concern, making it a security fix with high confidence."
}