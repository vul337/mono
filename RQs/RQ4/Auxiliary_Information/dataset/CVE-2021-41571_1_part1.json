{
  "cve_id": "CVE-2021-41571",
  "cwe_ids": [
    "CWE-863"
  ],
  "cvss_vector": "AV:N/AC:L/Au:S/C:P/I:N/A:N",
  "cvss_is_v3": false,
  "repo_name": "apache/pulsar",
  "commit_msg": "clear the response message",
  "commit_hash": "21cda95bf5fe660956347430f8862293eb44a37e",
  "git_url": "https://github.com/apache/pulsar/commit/21cda95bf5fe660956347430f8862293eb44a37e",
  "file_path": "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/PersistentTopicsBase.java",
  "func_name": "internalGetMessageById",
  "func_before": "protected void internalGetMessageById(AsyncResponse asyncResponse, long ledgerId, long entryId,\n                                              boolean authoritative) {\n        try {\n            // will redirect if the topic not owned by current broker\n            validateTopicOwnership(topicName, authoritative);\n            validateTopicOperation(topicName, TopicOperation.PEEK_MESSAGES);\n\n            if (topicName.isGlobal()) {\n                validateGlobalNamespaceOwnership(namespaceName);\n            }\n            PersistentTopic topic = (PersistentTopic) getTopicReference(topicName);\n            ManagedLedgerImpl ledger = (ManagedLedgerImpl) topic.getManagedLedger();\n            if (null == ledger.getLedgerInfo(ledgerId).get()) {\n                log.error(\"[{}] Failed to get message with ledgerId {} entryId {} from {}, \"\n                                + \"ledgerId not belong to this topic.\",\n                        clientAppId(), ledgerId, entryId, topicName);\n                asyncResponse.resume(new RestException(Status.NOT_FOUND, \"Message not found\"));\n            }\n            ledger.asyncReadEntry(new PositionImpl(ledgerId, entryId), new AsyncCallbacks.ReadEntryCallback() {\n                @Override\n                public void readEntryFailed(ManagedLedgerException exception, Object ctx) {\n                    asyncResponse.resume(new RestException(exception));\n                }\n\n                @Override\n                public void readEntryComplete(Entry entry, Object ctx) {\n                    try {\n                        asyncResponse.resume(generateResponseWithEntry(entry));\n                    } catch (IOException exception) {\n                        asyncResponse.resume(new RestException(exception));\n                    } finally {\n                        if (entry != null) {\n                            entry.release();\n                        }\n                    }\n                }\n            }, null);\n        } catch (NullPointerException npe) {\n            asyncResponse.resume(new RestException(Status.NOT_FOUND, \"Message not found\"));\n        } catch (Exception exception) {\n            log.error(\"[{}] Failed to get message with ledgerId {} entryId {} from {}\",\n                    clientAppId(), ledgerId, entryId, topicName, exception);\n            asyncResponse.resume(new RestException(exception));\n        }\n    }",
  "abstract_func_before": "protected void internalGetMessageById(AsyncResponse VAR_0, long VAR_1, long VAR_2,\n                                              boolean VAR_3) {\n        try {\n            /* COMMENT_0 */\n            validateTopicOwnership(VAR_4, VAR_3);\n            validateTopicOperation(VAR_4, VAR_5.PEEK_MESSAGES);\n\n            if (VAR_4.isGlobal()) {\n                validateGlobalNamespaceOwnership(VAR_6);\n            }\n            PersistentTopic VAR_7 = (PersistentTopic) getTopicReference(VAR_4);\n            ManagedLedgerImpl VAR_8 = (ManagedLedgerImpl) VAR_7.getManagedLedger();\n            if (null == VAR_8.getLedgerInfo(VAR_1).get()) {\n                VAR_9.error(\"[{}] Failed to get message with ledgerId {} entryId {} from {}, \"\n                                + \"ledgerId not belong to this topic.\",\n                        clientAppId(), VAR_1, VAR_2, VAR_4);\n                VAR_0.resume(new RestException(VAR_10.NOT_FOUND, \"Message not found\"));\n            }\n            VAR_8.asyncReadEntry(new PositionImpl(VAR_1, VAR_2), new AsyncCallbacks.ReadEntryCallback() {\n                @Override\n                public void readEntryFailed(ManagedLedgerException VAR_11, Object VAR_12) {\n                    VAR_0.resume(new RestException(VAR_11));\n                }\n\n                @Override\n                public void readEntryComplete(Entry VAR_13, Object VAR_12) {\n                    try {\n                        VAR_0.resume(generateResponseWithEntry(VAR_13));\n                    } catch (IOException VAR_11) {\n                        VAR_0.resume(new RestException(VAR_11));\n                    } finally {\n                        if (VAR_13 != null) {\n                            VAR_13.release();\n                        }\n                    }\n                }\n            }, null);\n        } catch (NullPointerException VAR_14) {\n            VAR_0.resume(new RestException(VAR_10.NOT_FOUND, \"Message not found\"));\n        } catch (Exception VAR_11) {\n            VAR_9.error(\"[{}] Failed to get message with ledgerId {} entryId {} from {}\",\n                    clientAppId(), VAR_1, VAR_2, VAR_4, VAR_11);\n            VAR_0.resume(new RestException(VAR_11));\n        }\n    }",
  "func_graph_path_before": "apache/pulsar/21cda95bf5fe660956347430f8862293eb44a37e/PersistentTopicsBase.java/vul/before/0.json",
  "func": "protected void internalGetMessageById(AsyncResponse asyncResponse, long ledgerId, long entryId,\n                                              boolean authoritative) {\n        try {\n            // will redirect if the topic not owned by current broker\n            validateTopicOwnership(topicName, authoritative);\n            validateTopicOperation(topicName, TopicOperation.PEEK_MESSAGES);\n\n            if (topicName.isGlobal()) {\n                validateGlobalNamespaceOwnership(namespaceName);\n            }\n            PersistentTopic topic = (PersistentTopic) getTopicReference(topicName);\n            ManagedLedgerImpl ledger = (ManagedLedgerImpl) topic.getManagedLedger();\n            if (null == ledger.getLedgerInfo(ledgerId).get()) {\n                log.error(\"[{}] Failed to get message with ledgerId {} entryId {} from {}, \"\n                                + \"the ledgerId does not belong to this topic.\",\n                        clientAppId(), ledgerId, entryId, topicName);\n                asyncResponse.resume(new RestException(Status.NOT_FOUND,\n                        \"Message not found, the ledgerId does not belong to this topic\"));\n            }\n            ledger.asyncReadEntry(new PositionImpl(ledgerId, entryId), new AsyncCallbacks.ReadEntryCallback() {\n                @Override\n                public void readEntryFailed(ManagedLedgerException exception, Object ctx) {\n                    asyncResponse.resume(new RestException(exception));\n                }\n\n                @Override\n                public void readEntryComplete(Entry entry, Object ctx) {\n                    try {\n                        asyncResponse.resume(generateResponseWithEntry(entry));\n                    } catch (IOException exception) {\n                        asyncResponse.resume(new RestException(exception));\n                    } finally {\n                        if (entry != null) {\n                            entry.release();\n                        }\n                    }\n                }\n            }, null);\n        } catch (NullPointerException npe) {\n            asyncResponse.resume(new RestException(Status.NOT_FOUND, \"Message not found\"));\n        } catch (Exception exception) {\n            log.error(\"[{}] Failed to get message with ledgerId {} entryId {} from {}\",\n                    clientAppId(), ledgerId, entryId, topicName, exception);\n            asyncResponse.resume(new RestException(exception));\n        }\n    }",
  "abstract_func": "protected void internalGetMessageById(AsyncResponse VAR_0, long VAR_1, long VAR_2,\n                                              boolean VAR_3) {\n        try {\n            /* COMMENT_0 */\n            validateTopicOwnership(VAR_4, VAR_3);\n            validateTopicOperation(VAR_4, VAR_5.PEEK_MESSAGES);\n\n            if (VAR_4.isGlobal()) {\n                validateGlobalNamespaceOwnership(VAR_6);\n            }\n            PersistentTopic VAR_7 = (PersistentTopic) getTopicReference(VAR_4);\n            ManagedLedgerImpl VAR_8 = (ManagedLedgerImpl) VAR_7.getManagedLedger();\n            if (null == VAR_8.getLedgerInfo(VAR_1).get()) {\n                VAR_9.error(\"[{}] Failed to get message with ledgerId {} entryId {} from {}, \"\n                                + \"the ledgerId does not belong to this topic.\",\n                        clientAppId(), VAR_1, VAR_2, VAR_4);\n                VAR_0.resume(new RestException(VAR_10.NOT_FOUND,\n                        \"Message not found, the ledgerId does not belong to this topic\"));\n            }\n            VAR_8.asyncReadEntry(new PositionImpl(VAR_1, VAR_2), new AsyncCallbacks.ReadEntryCallback() {\n                @Override\n                public void readEntryFailed(ManagedLedgerException VAR_11, Object VAR_12) {\n                    VAR_0.resume(new RestException(VAR_11));\n                }\n\n                @Override\n                public void readEntryComplete(Entry VAR_13, Object VAR_12) {\n                    try {\n                        VAR_0.resume(generateResponseWithEntry(VAR_13));\n                    } catch (IOException VAR_11) {\n                        VAR_0.resume(new RestException(VAR_11));\n                    } finally {\n                        if (VAR_13 != null) {\n                            VAR_13.release();\n                        }\n                    }\n                }\n            }, null);\n        } catch (NullPointerException VAR_14) {\n            VAR_0.resume(new RestException(VAR_10.NOT_FOUND, \"Message not found\"));\n        } catch (Exception VAR_11) {\n            VAR_9.error(\"[{}] Failed to get message with ledgerId {} entryId {} from {}\",\n                    clientAppId(), VAR_1, VAR_2, VAR_4, VAR_11);\n            VAR_0.resume(new RestException(VAR_11));\n        }\n    }",
  "func_graph_path": "apache/pulsar/21cda95bf5fe660956347430f8862293eb44a37e/PersistentTopicsBase.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -12,9 +12,10 @@\n             ManagedLedgerImpl ledger = (ManagedLedgerImpl) topic.getManagedLedger();\n             if (null == ledger.getLedgerInfo(ledgerId).get()) {\n                 log.error(\"[{}] Failed to get message with ledgerId {} entryId {} from {}, \"\n-                                + \"ledgerId not belong to this topic.\",\n+                                + \"the ledgerId does not belong to this topic.\",\n                         clientAppId(), ledgerId, entryId, topicName);\n-                asyncResponse.resume(new RestException(Status.NOT_FOUND, \"Message not found\"));\n+                asyncResponse.resume(new RestException(Status.NOT_FOUND,\n+                        \"Message not found, the ledgerId does not belong to this topic\"));\n             }\n             ledger.asyncReadEntry(new PositionImpl(ledgerId, entryId), new AsyncCallbacks.ReadEntryCallback() {\n                 @Override",
  "diff_line_info": {
    "deleted_lines": [
      "                                + \"ledgerId not belong to this topic.\",",
      "                asyncResponse.resume(new RestException(Status.NOT_FOUND, \"Message not found\"));"
    ],
    "added_lines": [
      "                                + \"the ledgerId does not belong to this topic.\",",
      "                asyncResponse.resume(new RestException(Status.NOT_FOUND,",
      "                        \"Message not found, the ledgerId does not belong to this topic\"));"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/apache/pulsar/pull/11852",
  "description": {
    "pr_info": {
      "title": "[Issue 11814] fix pulsar admin method:getMessageById.",
      "number": 11852
    },
    "comment": [
      "Fix https://github.com/apache/pulsar/issues/11814 , if we use another topic to find the message, it will return the message, but we may contaminate the ledgers cache in the topic.\r\n\r\n\r\n**changes**\r\nAdd check in the method 'internalGetMessageById' in PersistentTopicsBase, if the ledgerId not belong to this topic, throw a exception.\r\n",
      "/pulsarbot run-failure-checks",
      "Thanks for your contribution. For this PR, do we need to update docs?\r\n\r\n(The [PR template contains info about doc](https://github.com/apache/pulsar/blob/master/.github/PULL_REQUEST_TEMPLATE.md#documentation), which helps others know more about the changes. Can you provide doc-related info in this and future PR descriptions? Thanks) ",
      "> Thanks for your contribution. For this PR, do we need to update docs?\r\n> \r\n> (The [PR template contains info about doc](https://github.com/apache/pulsar/blob/master/.github/PULL_REQUEST_TEMPLATE.md#documentation), which helps others know more about the changes. Can you provide doc-related info in this and future PR descriptions? Thanks)\r\n\r\nThis is bug fix, no need to add docs.",
      "Remove the release/2.7.4 label, #11913 already fixed the branch-2.7"
    ]
  },
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Defect Remediation & Feature Upgrades  \n**Confidence:** 0.9"
}