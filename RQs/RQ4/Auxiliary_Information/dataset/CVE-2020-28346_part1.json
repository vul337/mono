{
  "cve_id": "CVE-2020-28346",
  "cwe_ids": [
    "CWE-476"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "projectacrn/acrn-hypervisor",
  "commit_msg": "dm: virtio: check for paddr_guest2host return value\n\npaddr_guest2host can return NULL, but code paths in virtio\nare not checking the return value.\n_vq_record() initializes iov_base pointer using paddr_guest2host()\nbut there is nothing in the flow that checks for NULL.\nChane _vq_record to return -1 in case the address translation\nhas failed.\n\nTracked-On: #5452\nSigned-off-by: Tomas Winkler <tomas.winkler@intel.com>\nAcked-by: Wang, Yu1 <yu1.wang@intel.com>",
  "commit_hash": "ae0ab82434509d6e75f4a2f1e1a0dd2ee3dc3681",
  "git_url": "https://github.com/projectacrn/acrn-hypervisor/commit/ae0ab82434509d6e75f4a2f1e1a0dd2ee3dc3681",
  "file_path": "devicemodel/hw/pci/virtio/virtio.c",
  "func_name": "virtio_vq_init",
  "func_before": "static void\nvirtio_vq_init(struct virtio_base *base, uint32_t pfn)\n{\n\tstruct virtio_vq_info *vq;\n\tuint64_t phys;\n\tsize_t size;\n\tchar *vb;\n\n\tvq = &base->queues[base->curq];\n\tvq->pfn = pfn;\n\tphys = (uint64_t)pfn << VRING_PAGE_BITS;\n\tsize = vring_size(vq->qsize, VIRTIO_PCI_VRING_ALIGN);\n\tvb = paddr_guest2host(base->dev->vmctx, phys, size);\n\n\t/* First page(s) are descriptors... */\n\tvq->desc = (struct vring_desc *)vb;\n\tvb += vq->qsize * sizeof(struct vring_desc);\n\n\t/* ... immediately followed by \"avail\" ring (entirely uint16_t's) */\n\tvq->avail = (struct vring_avail *)vb;\n\tvb += (2 + vq->qsize + 1) * sizeof(uint16_t);\n\n\t/* Then it's rounded up to the next page... */\n\tvb = (char *)roundup2((uintptr_t)vb, VIRTIO_PCI_VRING_ALIGN);\n\n\t/* ... and the last page(s) are the used ring. */\n\tvq->used = (struct vring_used *)vb;\n\n\t/* Start at 0 when we use it. */\n\tvq->last_avail = 0;\n\tvq->save_used = 0;\n\n\t/* Mark queue as allocated after initialization is complete. */\n\tmb();\n\tvq->flags = VQ_ALLOC;\n}",
  "abstract_func_before": "static void\nvirtio_vq_init(struct virtio_base *VAR_0, uint32_t VAR_1)\n{\n\tstruct virtio_vq_info *VAR_2;\n\tuint64_t VAR_3;\n\tsize_t VAR_4;\n\tchar *VAR_5;\n\n\tVAR_2 = &VAR_0->queues[VAR_0->curq];\n\tVAR_2->pfn = VAR_1;\n\tVAR_3 = (uint64_t)VAR_1 << VAR_6;\n\tVAR_4 = vring_size(VAR_2->qsize, VAR_7);\n\tVAR_5 = paddr_guest2host(VAR_0->dev->vmctx, VAR_3, VAR_4);\n\n\t/* COMMENT_0 */\n\tVAR_2->desc = (struct vring_desc *)VAR_5;\n\tVAR_5 += VAR_2->qsize * sizeof(struct vring_desc);\n\n\t/* COMMENT_1 */\n\tVAR_2->avail = (struct vring_avail *)VAR_5;\n\tVAR_5 += (2 + VAR_2->qsize + 1) * sizeof(uint16_t);\n\n\t/* COMMENT_2 */\n\tVAR_5 = (char *)roundup2((uintptr_t)VAR_5, VAR_7);\n\n\t/* COMMENT_3 */\n\tVAR_2->used = (struct vring_used *)VAR_5;\n\n\t/* COMMENT_4 */\n\tVAR_2->last_avail = 0;\n\tVAR_2->save_used = 0;\n\n\t/* COMMENT_5 */\n\tmb();\n\tVAR_2->flags = VAR_8;\n}",
  "func_graph_path_before": "projectacrn/acrn-hypervisor/ae0ab82434509d6e75f4a2f1e1a0dd2ee3dc3681/virtio.c/vul/before/0.json",
  "func": "static void\nvirtio_vq_init(struct virtio_base *base, uint32_t pfn)\n{\n\tstruct virtio_vq_info *vq;\n\tuint64_t phys;\n\tsize_t size;\n\tchar *vb;\n\n\tvq = &base->queues[base->curq];\n\tvq->pfn = pfn;\n\tphys = (uint64_t)pfn << VRING_PAGE_BITS;\n\tsize = vring_size(vq->qsize, VIRTIO_PCI_VRING_ALIGN);\n\tvb = paddr_guest2host(base->dev->vmctx, phys, size);\n\tif (!vb)\n\t\tgoto error;\n\n\t/* First page(s) are descriptors... */\n\tvq->desc = (struct vring_desc *)vb;\n\tvb += vq->qsize * sizeof(struct vring_desc);\n\n\t/* ... immediately followed by \"avail\" ring (entirely uint16_t's) */\n\tvq->avail = (struct vring_avail *)vb;\n\tvb += (2 + vq->qsize + 1) * sizeof(uint16_t);\n\n\t/* Then it's rounded up to the next page... */\n\tvb = (char *)roundup2((uintptr_t)vb, VIRTIO_PCI_VRING_ALIGN);\n\n\t/* ... and the last page(s) are the used ring. */\n\tvq->used = (struct vring_used *)vb;\n\n\t/* Start at 0 when we use it. */\n\tvq->last_avail = 0;\n\tvq->save_used = 0;\n\n\t/* Mark queue as allocated after initialization is complete. */\n\tmb();\n\tvq->flags = VQ_ALLOC;\n\n\treturn;\n\nerror:\n\tvq->flags = 0;\n\tpr_err(\"%s: vq enable failed\\n\", __func__);\n}",
  "abstract_func": "static void\nvirtio_vq_init(struct virtio_base *VAR_0, uint32_t VAR_1)\n{\n\tstruct virtio_vq_info *VAR_2;\n\tuint64_t VAR_3;\n\tsize_t VAR_4;\n\tchar *VAR_5;\n\n\tVAR_2 = &VAR_0->queues[VAR_0->curq];\n\tVAR_2->pfn = VAR_1;\n\tVAR_3 = (uint64_t)VAR_1 << VAR_6;\n\tVAR_4 = vring_size(VAR_2->qsize, VAR_7);\n\tVAR_5 = paddr_guest2host(VAR_0->dev->vmctx, VAR_3, VAR_4);\n\tif (!VAR_5)\n\t\tgoto error;\n\n\t/* COMMENT_0 */\n\tVAR_2->desc = (struct vring_desc *)VAR_5;\n\tVAR_5 += VAR_2->qsize * sizeof(struct vring_desc);\n\n\t/* COMMENT_1 */\n\tVAR_2->avail = (struct vring_avail *)VAR_5;\n\tVAR_5 += (2 + VAR_2->qsize + 1) * sizeof(uint16_t);\n\n\t/* COMMENT_2 */\n\tVAR_5 = (char *)roundup2((uintptr_t)VAR_5, VAR_7);\n\n\t/* COMMENT_3 */\n\tVAR_2->used = (struct vring_used *)VAR_5;\n\n\t/* COMMENT_4 */\n\tVAR_2->last_avail = 0;\n\tVAR_2->save_used = 0;\n\n\t/* COMMENT_5 */\n\tmb();\n\tVAR_2->flags = VAR_8;\n\n\treturn;\n\nerror:\n\tVAR_2->flags = 0;\n\tpr_err(\"%s: vq enable failed\\n\", VAR_9);\n}",
  "func_graph_path": "projectacrn/acrn-hypervisor/ae0ab82434509d6e75f4a2f1e1a0dd2ee3dc3681/virtio.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -11,6 +11,8 @@\n \tphys = (uint64_t)pfn << VRING_PAGE_BITS;\n \tsize = vring_size(vq->qsize, VIRTIO_PCI_VRING_ALIGN);\n \tvb = paddr_guest2host(base->dev->vmctx, phys, size);\n+\tif (!vb)\n+\t\tgoto error;\n \n \t/* First page(s) are descriptors... */\n \tvq->desc = (struct vring_desc *)vb;\n@@ -33,4 +35,10 @@\n \t/* Mark queue as allocated after initialization is complete. */\n \tmb();\n \tvq->flags = VQ_ALLOC;\n+\n+\treturn;\n+\n+error:\n+\tvq->flags = 0;\n+\tpr_err(\"%s: vq enable failed\\n\", __func__);\n }",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "\tif (!vb)",
      "\t\tgoto error;",
      "",
      "\treturn;",
      "",
      "error:",
      "\tvq->flags = 0;",
      "\tpr_err(\"%s: vq enable failed\\n\", __func__);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/projectacrn/acrn-hypervisor/pull/5453",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/projectacrn/acrn-hypervisor/pull/5453: 403 Client Error: Forbidden for url: https://api.github.com/repos/projectacrn/acrn-hypervisor/pulls/5453",
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Defect Remediation & Feature Upgrades; **Confidence:** 0.9"
}