{
  "cve_id": "CVE-2023-33297",
  "cwe_ids": [
    "CWE-400"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
  "cvss_is_v3": true,
  "repo_name": "bitcoin",
  "commit_msg": "txmempool: have CompareDepthAndScore sort missing txs first\n\nWe use CompareDepthAndScore to choose an order of txs to inv. Rather\nthan sorting txs that have been evicted from the mempool at the end\nof the list, sort them at the beginning so they are removed from\nthe queue immediately.",
  "commit_hash": "228e9201efb5574b1b96bb924de1d2e8dd1317f3",
  "git_url": "https://github.com/bitcoin/bitcoin/commit/228e9201efb5574b1b96bb924de1d2e8dd1317f3",
  "file_path": "src/txmempool.cpp",
  "func_name": "CTxMemPool::CompareDepthAndScore",
  "func_before": "bool CTxMemPool::CompareDepthAndScore(const uint256& hasha, const uint256& hashb, bool wtxid)\n{\n    LOCK(cs);\n    indexed_transaction_set::const_iterator i = wtxid ? get_iter_from_wtxid(hasha) : mapTx.find(hasha);\n    if (i == mapTx.end()) return false;\n    indexed_transaction_set::const_iterator j = wtxid ? get_iter_from_wtxid(hashb) : mapTx.find(hashb);\n    if (j == mapTx.end()) return true;\n    uint64_t counta = i->GetCountWithAncestors();\n    uint64_t countb = j->GetCountWithAncestors();\n    if (counta == countb) {\n        return CompareTxMemPoolEntryByScore()(*i, *j);\n    }\n    return counta < countb;\n}",
  "abstract_func_before": "bool CTxMemPool::CompareDepthAndScore(const uint256& VAR_0, const uint256& VAR_1, bool VAR_2)\n{\n    LOCK(VAR_3);\n    indexed_transaction_set::const_iterator VAR_4 = VAR_2 ? get_iter_from_wtxid(VAR_0) : VAR_5.find(VAR_0);\n    if (VAR_4 == VAR_5.end()) return false;\n    indexed_transaction_set::const_iterator VAR_6 = VAR_2 ? get_iter_from_wtxid(VAR_1) : VAR_5.find(VAR_1);\n    if (VAR_6 == VAR_5.end()) return true;\n    uint64_t VAR_7 = VAR_4->GetCountWithAncestors();\n    uint64_t VAR_8 = VAR_6->GetCountWithAncestors();\n    if (VAR_7 == VAR_8) {\n        return CompareTxMemPoolEntryByScore()(*VAR_4, *VAR_6);\n    }\n    return VAR_7 < VAR_8;\n}",
  "func_graph_path_before": "bitcoin/228e9201efb5574b1b96bb924de1d2e8dd1317f3/txmempool.cpp/vul/before/0.json",
  "func": "bool CTxMemPool::CompareDepthAndScore(const uint256& hasha, const uint256& hashb, bool wtxid)\n{\n    /* Return `true` if hasha should be considered sooner than hashb. Namely when:\n     *   a is not in the mempool, but b is\n     *   both are in the mempool and a has fewer ancestors than b\n     *   both are in the mempool and a has a higher score than b\n     */\n    LOCK(cs);\n    indexed_transaction_set::const_iterator j = wtxid ? get_iter_from_wtxid(hashb) : mapTx.find(hashb);\n    if (j == mapTx.end()) return false;\n    indexed_transaction_set::const_iterator i = wtxid ? get_iter_from_wtxid(hasha) : mapTx.find(hasha);\n    if (i == mapTx.end()) return true;\n    uint64_t counta = i->GetCountWithAncestors();\n    uint64_t countb = j->GetCountWithAncestors();\n    if (counta == countb) {\n        return CompareTxMemPoolEntryByScore()(*i, *j);\n    }\n    return counta < countb;\n}",
  "abstract_func": "bool CTxMemPool::CompareDepthAndScore(const uint256& VAR_0, const uint256& VAR_1, bool VAR_2)\n{\n    /* COMMENT_0 */\n                                          \n                                                                 \n                                                                \n       \n    LOCK(VAR_3);\n    indexed_transaction_set::const_iterator VAR_4 = VAR_2 ? get_iter_from_wtxid(VAR_1) : VAR_5.find(VAR_1);\n    if (VAR_4 == VAR_5.end()) return false;\n    indexed_transaction_set::const_iterator VAR_6 = VAR_2 ? get_iter_from_wtxid(VAR_0) : VAR_5.find(VAR_0);\n    if (VAR_6 == VAR_5.end()) return true;\n    uint64_t VAR_7 = VAR_6->GetCountWithAncestors();\n    uint64_t VAR_8 = VAR_4->GetCountWithAncestors();\n    if (VAR_7 == VAR_8) {\n        return CompareTxMemPoolEntryByScore()(*VAR_6, *VAR_4);\n    }\n    return VAR_7 < VAR_8;\n}",
  "func_graph_path": "bitcoin/228e9201efb5574b1b96bb924de1d2e8dd1317f3/txmempool.cpp/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,10 +1,15 @@\n bool CTxMemPool::CompareDepthAndScore(const uint256& hasha, const uint256& hashb, bool wtxid)\n {\n+    /* Return `true` if hasha should be considered sooner than hashb. Namely when:\n+     *   a is not in the mempool, but b is\n+     *   both are in the mempool and a has fewer ancestors than b\n+     *   both are in the mempool and a has a higher score than b\n+     */\n     LOCK(cs);\n+    indexed_transaction_set::const_iterator j = wtxid ? get_iter_from_wtxid(hashb) : mapTx.find(hashb);\n+    if (j == mapTx.end()) return false;\n     indexed_transaction_set::const_iterator i = wtxid ? get_iter_from_wtxid(hasha) : mapTx.find(hasha);\n-    if (i == mapTx.end()) return false;\n-    indexed_transaction_set::const_iterator j = wtxid ? get_iter_from_wtxid(hashb) : mapTx.find(hashb);\n-    if (j == mapTx.end()) return true;\n+    if (i == mapTx.end()) return true;\n     uint64_t counta = i->GetCountWithAncestors();\n     uint64_t countb = j->GetCountWithAncestors();\n     if (counta == countb) {",
  "diff_line_info": {
    "deleted_lines": [
      "    if (i == mapTx.end()) return false;",
      "    indexed_transaction_set::const_iterator j = wtxid ? get_iter_from_wtxid(hashb) : mapTx.find(hashb);",
      "    if (j == mapTx.end()) return true;"
    ],
    "added_lines": [
      "    /* Return `true` if hasha should be considered sooner than hashb. Namely when:",
      "     *   a is not in the mempool, but b is",
      "     *   both are in the mempool and a has fewer ancestors than b",
      "     *   both are in the mempool and a has a higher score than b",
      "     */",
      "    indexed_transaction_set::const_iterator j = wtxid ? get_iter_from_wtxid(hashb) : mapTx.find(hashb);",
      "    if (j == mapTx.end()) return false;",
      "    if (i == mapTx.end()) return true;"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/bitcoin/bitcoin/pull/27610",
  "description": {
    "pr_info": {
      "title": "Improve performance of p2p inv to send queues",
      "number": 27610
    },
    "comment": [
      "Couple of performance improvements when draining the inventory-to-send queue:\r\n\r\n * drop txs that have already been evicted from the mempool (or included in a block) immediately, rather than at the end of processing\r\n * marginally increase outgoing trickle rate during spikes in tx volume",
      "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| ACK | [darosior](https://github.com/bitcoin/bitcoin/pull/27610#pullrequestreview-1419935557), [willcl-ark](https://github.com/bitcoin/bitcoin/pull/27610#issuecomment-1542181711), [instagibbs](https://github.com/bitcoin/bitcoin/pull/27610#issuecomment-1542201540), [glozow](https://github.com/bitcoin/bitcoin/pull/27610#pullrequestreview-1422536495), [dergoegge](https://github.com/bitcoin/bitcoin/pull/27610#pullrequestreview-1422347722) |\n| Concept ACK | [0xB10C](https://github.com/bitcoin/bitcoin/pull/27610#issuecomment-1542178451), [pinheadmz](https://github.com/bitcoin/bitcoin/pull/27610#pullrequestreview-1420860416) |\n\nIf your review is incorrectly listed, please react with ðŸ‘Ž to this comment and the bot will ignore it on the next update.\n",
      "Concept ACK",
      "ACK 5b34060\r\n\r\nCurrently running this cherry-picked on top of v24.0.1 on mainnet and seeing reduced resource usage.",
      "ACK https://github.com/bitcoin/bitcoin/pull/27610/commits/5b3406094f2679dfb3763de4414257268565b943\r\n\r\nSignificant reduction in CPU usage when influx of transactions is high and sustained. Allows an additional INV to trickle per additional 200 INV backlog, capped at 1k.",
      "Compared where the time is spent in the `b-msghand` thread on a mainnet `master` and a mainnet 5b3406094f2679dfb3763de4414257268565b943 node that were both running for a while. Followed [eklitzke's flamegraph.md](https://github.com/eklitzke/bitcoin/blob/flamegraphs/doc/flamegraphs.md#generating-a-profile) to create the flamegraphs below. This seems to be indeed a nice performance improvement. The second flamegraph looks _healthier_. \r\n\r\n`master`:\r\n\r\n![flamegraph-master](https://github.com/bitcoin/bitcoin/assets/19157360/7e31c262-648f-4168-9a9a-5cc93b4a9da0)\r\n\r\n\r\n5b3406094f2679dfb3763de4414257268565b943:\r\n\r\n![flamegraph-202305-invtosend](https://github.com/bitcoin/bitcoin/assets/19157360/36f2ee57-b017-4ffe-8099-970b20998d0a)\r\n",
      "Partial utACK, for 228e9201efb5574b1b96bb924de1d2e8dd1317f3 (i.e. the changes in `CompareDepthAndScore`). Took me a while to wrap my head around it.",
      "<img width=\"1552\" alt=\"Screen Shot 2023-05-17 at 10 06 51 AM\" src=\"https://github.com/bitcoin/bitcoin/assets/2084648/43139c94-d32d-4469-952b-25980242e1f6\">\r\n\r\n\r\n\r\nI've been running this branch for 7 days on a VPS and noticed this morning the CPU on b-msghand is back up to 100%. It was about that high running v24 release but dropped to 30% or so when I first switched to this branch and restarted.",
      "@pinheadmz I am also still running this patch, but I still see pretty stable utilisation in the range of ~2-12%, currently with 88 inbound peers.\r\n\r\n![image](https://github.com/bitcoin/bitcoin/assets/6606587/a7e61cef-4a31-4404-b9e2-80348d59bc0c)\r\n",
      "> I've been running this branch for 7 days on a VPS and noticed this morning the CPU on b-msghand is back up to 100%. It was about that high running v24 release but dropped to 30% or so when I first switched to this branch and restarted.\r\n\r\n@pinheadmz I've been running the patch on multiple nodes for a week now and haven't seen 100% CPU usage in the b-msghand thread again. If you haven't restarted or if it happens again, it would be helpful to see which functions are slow. `perf top -p $(pidof bitcoind)` should do the trick.\r\n",
      "Could also make sense to double check the debug.log to ensure you restarted `bitcoind` after compiling? :sweat_smile: ",
      "> Could also make sense to double check the debug.log to ensure you restarted `bitcoind` after compiling? ðŸ˜…\r\n\r\nPhew! That would've been embarassing\r\n\r\n```\r\n2023-05-10T15:39:40Z Bitcoin Core version v25.99.0-5b3406094f26 (debug build)\r\n```\r\n\r\n\r\n\r\n>  `perf top -p $(pidof bitcoind)` should do the trick.\r\n\r\nNot familiar with this tool but it looks cool! This is at the top. Every other line in the output is < 0.10%\r\n\r\n```\r\n  99.56%  bitcoind             [.] boost::multi_index::detail::safe_iterator_base::detach\r\n```\r\n\r\n\r\n",
      ">(debug build)\r\n\r\nSee https://github.com/bitcoin/bitcoin/issues/27700#issuecomment-1553401313 ?",
      "ah thanks I forgot I configured that way, will follow the other threads"
    ]
  },
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "The patch modifies the transaction sorting logic in the mempool to prioritize missing transactions, aiming to improve performance by immediately removing them. This is a functional enhancement, not a security fix.\n\n**Final Classification:** Defect Remediation & Feature Upgrades  \n**Confidence:** 0.9"
}