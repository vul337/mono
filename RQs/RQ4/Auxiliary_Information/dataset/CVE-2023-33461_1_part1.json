{
  "cve_id": "CVE-2023-33461",
  "cwe_ids": [
    "CWE-476"
  ],
  "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H",
  "cvss_is_v3": true,
  "repo_name": "ndevilla/iniparser",
  "commit_msg": "Handle null return from iniparser_getstring\n\nFix handling of NULL returns from iniparser_getstring in\niniparser_getboolean, iniparser_getlongint and iniparser_getdouble,\navoiding a crash.",
  "commit_hash": "ace9871f65d11b5d73f0b9ee8cf5d2807439442d",
  "git_url": "https://github.com/ndevilla/iniparser/commit/ace9871f65d11b5d73f0b9ee8cf5d2807439442d",
  "file_path": "src/iniparser.c",
  "func_name": "iniparser_getlongint",
  "func_before": "long int iniparser_getlongint(const dictionary * d, const char * key, long int notfound)\n{\n    const char * str ;\n\n    str = iniparser_getstring(d, key, INI_INVALID_KEY);\n    if (str==INI_INVALID_KEY) return notfound ;\n    return strtol(str, NULL, 0);\n}",
  "abstract_func_before": "long int iniparser_getlongint(const dictionary * VAR_0, const char * VAR_1, long int VAR_2)\n{\n    const char * VAR_3 ;\n\n    VAR_3 = iniparser_getstring(VAR_0, VAR_1, VAR_4);\n    if (VAR_3==VAR_4) return VAR_2 ;\n    return strtol(VAR_3, NULL, 0);\n}",
  "func_graph_path_before": "ndevilla/iniparser/ace9871f65d11b5d73f0b9ee8cf5d2807439442d/iniparser.c/vul/before/2.json",
  "func": "long int iniparser_getlongint(const dictionary * d, const char * key, long int notfound)\n{\n    const char * str ;\n\n    str = iniparser_getstring(d, key, INI_INVALID_KEY);\n    if (str==NULL || str==INI_INVALID_KEY) return notfound ;\n    return strtol(str, NULL, 0);\n}",
  "abstract_func": "long int iniparser_getlongint(const dictionary * VAR_0, const char * VAR_1, long int VAR_2)\n{\n    const char * VAR_3 ;\n\n    VAR_3 = iniparser_getstring(VAR_0, VAR_1, VAR_4);\n    if (VAR_3==NULL || VAR_3==VAR_4) return VAR_2 ;\n    return strtol(VAR_3, NULL, 0);\n}",
  "func_graph_path": "ndevilla/iniparser/ace9871f65d11b5d73f0b9ee8cf5d2807439442d/iniparser.c/vul/after/2.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -3,6 +3,6 @@\n     const char * str ;\n \n     str = iniparser_getstring(d, key, INI_INVALID_KEY);\n-    if (str==INI_INVALID_KEY) return notfound ;\n+    if (str==NULL || str==INI_INVALID_KEY) return notfound ;\n     return strtol(str, NULL, 0);\n }",
  "diff_line_info": {
    "deleted_lines": [
      "    if (str==INI_INVALID_KEY) return notfound ;"
    ],
    "added_lines": [
      "    if (str==NULL || str==INI_INVALID_KEY) return notfound ;"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/ndevilla/iniparser/pull/146",
  "description": {
    "pr_info": {
      "title": "Handle null return from iniparser_getstring",
      "number": 146
    },
    "comment": [
      "Fix handling of NULL returns from iniparser_getstring in iniparser_getboolean, iniparser_getlongint and iniparser_getdouble, avoiding a crash.\r\n\r\nFixes #144 \r\n(CVE-2023-33461)",
      "Thanks for providing the fix!"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "The patch modifies the function to check for `NULL` and `INI_INVALID_KEY`, preventing a crash, which addresses a security vulnerability with a known CVE identifier. This is clearly a security fix.\n\n**Step-by-Step Analysis:**\n\n1. **Input Analysis:**\n   - The commit message and vulnerability description both mention handling `NULL` returns to prevent a crash, pointing towards a security issue.\n   - The code diff shows adding a check for `str == NULL` in addition to `str == INI_INVALID_KEY`.\n\n2. **Consistency Check:**\n   - The changes directly address the issue described, with no discrepancies noted.\n\n3. **Purpose Evaluation:**\n   - The code change modifies the core logic to prevent crashes, indicating a bug fix for a security vulnerability.\n\n4. **Security Vulnerability Assessment:**\n   - The patch fixes a crash caused by null pointers, which can be exploited. The presence of CVE-2023-33461 confirms it's a known security issue.\n\n5. **Confidence Scoring:**\n   - High confidence due to clear description, matching code changes, and CVE reference.\n\n**Final Classification:** Security Vulnerability Fix; **Confidence:** 1.0"
}