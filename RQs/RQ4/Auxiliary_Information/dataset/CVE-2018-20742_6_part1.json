{
  "cve_id": "CVE-2018-20742",
  "cwe_ids": [
    "CWE-787"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:N/I:P/A:N",
  "cvss_is_v3": false,
  "repo_name": "mc2-project/opaque-sql",
  "commit_msg": "Check that ecall [user_check] pointers and ocall_malloc result pointer are outside enclave (#67)\n\nThis should reduce the enclave's attack surface by preventing an attacker from invoking ecalls on or triggering unexpected writes to arbitrary enclave memory, which could potentially leak information about that memory or lead to incorrect results.\r\n\r\nFixes #36. Fixes #66.",
  "commit_hash": "5ddda15d89f5ac82f4416208c5319ace4aecdc36",
  "git_url": "https://github.com/mc2-project/opaque-sql/commit/5ddda15d89f5ac82f4416208c5319ace4aecdc36",
  "file_path": "src/enclave/Enclave/Enclave.cpp",
  "func_name": "ecall_find_range_bounds",
  "func_before": "void ecall_find_range_bounds(uint8_t *sort_order, size_t sort_order_length,\n                             uint32_t num_partitions,\n                             uint8_t *input_rows, size_t input_rows_length,\n                             uint8_t **output_rows, size_t *output_rows_length) {\n  try {\n    find_range_bounds(sort_order, sort_order_length,\n                      num_partitions,\n                      input_rows, input_rows_length,\n                      output_rows, output_rows_length);\n  } catch (const std::runtime_error &e) {\n    ocall_throw(e.what());\n  }\n}",
  "abstract_func_before": "void ecall_find_range_bounds(uint8_t *VAR_0, size_t VAR_1,\n                             uint32_t VAR_2,\n                             uint8_t *VAR_3, size_t VAR_4,\n                             uint8_t **VAR_5, size_t *VAR_6) {\n  try {\n    find_range_bounds(VAR_0, VAR_1,\n                      VAR_2,\n                      VAR_3, VAR_4,\n                      VAR_5, VAR_6);\n  } catch (const std::runtime_error &VAR_7) {\n    ocall_throw(VAR_7.what());\n  }\n}",
  "func_graph_path_before": "mc2-project/opaque-sql/5ddda15d89f5ac82f4416208c5319ace4aecdc36/Enclave.cpp/vul/before/7.json",
  "func": "void ecall_find_range_bounds(uint8_t *sort_order, size_t sort_order_length,\n                             uint32_t num_partitions,\n                             uint8_t *input_rows, size_t input_rows_length,\n                             uint8_t **output_rows, size_t *output_rows_length) {\n  // Guard against operating on arbitrary enclave memory\n  assert(sgx_is_outside_enclave(input_rows, input_rows_length) == 1);\n  sgx_lfence();\n\n  try {\n    find_range_bounds(sort_order, sort_order_length,\n                      num_partitions,\n                      input_rows, input_rows_length,\n                      output_rows, output_rows_length);\n  } catch (const std::runtime_error &e) {\n    ocall_throw(e.what());\n  }\n}",
  "abstract_func": "void ecall_find_range_bounds(uint8_t *VAR_0, size_t VAR_1,\n                             uint32_t VAR_2,\n                             uint8_t *VAR_3, size_t VAR_4,\n                             uint8_t **VAR_5, size_t *VAR_6) {\n  /* COMMENT_0 */\n  assert(sgx_is_outside_enclave(VAR_3, VAR_4) == 1);\n  sgx_lfence();\n\n  try {\n    find_range_bounds(VAR_0, VAR_1,\n                      VAR_2,\n                      VAR_3, VAR_4,\n                      VAR_5, VAR_6);\n  } catch (const std::runtime_error &VAR_7) {\n    ocall_throw(VAR_7.what());\n  }\n}",
  "func_graph_path": "mc2-project/opaque-sql/5ddda15d89f5ac82f4416208c5319ace4aecdc36/Enclave.cpp/vul/after/7.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -2,6 +2,10 @@\n                              uint32_t num_partitions,\n                              uint8_t *input_rows, size_t input_rows_length,\n                              uint8_t **output_rows, size_t *output_rows_length) {\n+  // Guard against operating on arbitrary enclave memory\n+  assert(sgx_is_outside_enclave(input_rows, input_rows_length) == 1);\n+  sgx_lfence();\n+\n   try {\n     find_range_bounds(sort_order, sort_order_length,\n                       num_partitions,",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "  // Guard against operating on arbitrary enclave memory",
      "  assert(sgx_is_outside_enclave(input_rows, input_rows_length) == 1);",
      "  sgx_lfence();",
      ""
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/mc2-project/opaque-sql/pull/67",
  "description": {
    "pr_info": {
      "title": "Check that ecall [user_check] pointers and ocall_malloc result pointer are outside enclave",
      "number": 67
    },
    "comment": [
      "This should reduce the enclave's attack surface by preventing an attacker from invoking ecalls on or triggering unexpected writes to arbitrary enclave memory, which could potentially leak information about that memory or lead to incorrect results.\r\n\r\nFixes #36. Fixes #66."
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "The patch modifies core logic to enhance security by preventing attacks on memory, confirming it's a security vulnerability fix.\n\n**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 1.0"
}