{
  "cve_id": "CVE-2022-29567",
  "cwe_ids": [
    "CWE-200"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:N/A:N",
  "cvss_is_v3": false,
  "repo_name": "vaadin/flow-components",
  "commit_msg": "Use index and depth as an item ID",
  "commit_hash": "57445e814e074b8f7331b3196c97d37f08a689f0",
  "git_url": "https://github.com/vaadin/flow-components/commit/57445e814e074b8f7331b3196c97d37f08a689f0",
  "file_path": "vaadin-grid-flow-parent/vaadin-grid-flow-integration-tests/src/main/java/com/vaadin/flow/component/treegrid/it/TreeGridPreloadPage.java",
  "func_name": "setDataProvider",
  "func_before": "private void setDataProvider(int nodesPerLevel, int depth) {\n        grid.setDataProvider(\n                new LazyHierarchicalDataProvider(nodesPerLevel, depth) {\n                    @Override\n                    protected Stream<HierarchicalTestBean> fetchChildrenFromBackEnd(\n                            HierarchicalQuery<HierarchicalTestBean, Void> query) {\n                        VaadinRequest currentRequest = VaadinService\n                                .getCurrentRequest();\n                        if (!currentRequest.equals(lastRequest)) {\n                            requestCount++;\n                        }\n                        lastRequest = currentRequest;\n                        requestCountField\n                                .setValue(String.valueOf(requestCount));\n\n                        fetchCount++;\n                        fetchCountField.setValue(String.valueOf(fetchCount));\n\n                        return super.fetchChildrenFromBackEnd(query);\n                    }\n                });\n    }",
  "abstract_func_before": "private void setDataProvider(int VAR_0, int VAR_1) {\n        VAR_2.setDataProvider(\n                new LazyHierarchicalDataProvider(VAR_0, VAR_1) {\n                    @Override\n                    protected Stream<HierarchicalTestBean> fetchChildrenFromBackEnd(\n                            HierarchicalQuery<HierarchicalTestBean, Void> VAR_3) {\n                        VaadinRequest VAR_4 = VAR_5\n                                .getCurrentRequest();\n                        if (!VAR_4.equals(VAR_6)) {\n                            VAR_7++;\n                        }\n                        VAR_6 = VAR_4;\n                        VAR_8\n                                .setValue(VAR_9.valueOf(VAR_7));\n\n                        VAR_10++;\n                        VAR_11.setValue(VAR_9.valueOf(VAR_10));\n\n                        return super.fetchChildrenFromBackEnd(VAR_3);\n                    }\n                });\n    }",
  "func_graph_path_before": "vaadin/flow-components/57445e814e074b8f7331b3196c97d37f08a689f0/TreeGridPreloadPage.java/vul/before/0.json",
  "func": "private void setDataProvider(int nodesPerLevel, int depth) {\n        grid.setDataProvider(\n                new LazyHierarchicalDataProvider(nodesPerLevel, depth) {\n                    @Override\n                    protected Stream<HierarchicalTestBean> fetchChildrenFromBackEnd(\n                            HierarchicalQuery<HierarchicalTestBean, Void> query) {\n                        VaadinRequest currentRequest = VaadinService\n                                .getCurrentRequest();\n                        if (!currentRequest.equals(lastRequest)) {\n                            requestCount++;\n                        }\n                        lastRequest = currentRequest;\n                        requestCountField\n                                .setValue(String.valueOf(requestCount));\n\n                        fetchCount++;\n                        fetchCountField.setValue(String.valueOf(fetchCount));\n\n                        return super.fetchChildrenFromBackEnd(query);\n                    }\n\n                    @Override\n                    public Object getId(HierarchicalTestBean item) {\n                        return item != null ? item.toString() : \"null\";\n                    }\n                });\n    }",
  "abstract_func": "private void setDataProvider(int VAR_0, int VAR_1) {\n        VAR_2.setDataProvider(\n                new LazyHierarchicalDataProvider(VAR_0, VAR_1) {\n                    @Override\n                    protected Stream<HierarchicalTestBean> fetchChildrenFromBackEnd(\n                            HierarchicalQuery<HierarchicalTestBean, Void> VAR_3) {\n                        VaadinRequest VAR_4 = VAR_5\n                                .getCurrentRequest();\n                        if (!VAR_4.equals(VAR_6)) {\n                            VAR_7++;\n                        }\n                        VAR_6 = VAR_4;\n                        VAR_8\n                                .setValue(VAR_9.valueOf(VAR_7));\n\n                        VAR_10++;\n                        VAR_11.setValue(VAR_9.valueOf(VAR_10));\n\n                        return super.fetchChildrenFromBackEnd(VAR_3);\n                    }\n\n                    @Override\n                    public Object getId(HierarchicalTestBean VAR_12) {\n                        return VAR_12 != null ? VAR_12.toString() : \"null\";\n                    }\n                });\n    }",
  "func_graph_path": "vaadin/flow-components/57445e814e074b8f7331b3196c97d37f08a689f0/TreeGridPreloadPage.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -18,5 +18,10 @@\n \n                         return super.fetchChildrenFromBackEnd(query);\n                     }\n+\n+                    @Override\n+                    public Object getId(HierarchicalTestBean item) {\n+                        return item != null ? item.toString() : \"null\";\n+                    }\n                 });\n     }",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "",
      "                    @Override",
      "                    public Object getId(HierarchicalTestBean item) {",
      "                        return item != null ? item.toString() : \"null\";",
      "                    }"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/vaadin/flow-components/pull/3046",
  "description": {
    "pr_info": {
      "title": "fix: Use incremental numeric id as a key for Tree Grid items",
      "number": 3046
    },
    "comment": [
      "## Description\r\n\r\nUsing Object::toString as an item's key for server-client communication makes item's data visible on the client side, so generated numeric id is used instead.\r\n\r\n## Type of change\r\n\r\n- [x] Bugfix\r\n- [ ] Feature\r\n\r\n## Checklist\r\n\r\n- [x] I have read the contribution guide: https://vaadin.com/docs-beta/latest/guide/contributing/overview/\r\n- [x] I have added a description following the guideline.\r\n- [x] The issue is created in the corresponding repository and I have referenced it.\r\n- [x] I have added tests to ensure my change is effective and works as intended.\r\n- [x] New and existing tests are passing locally with my change.\r\n- [x] I have performed self-review and corrected misspellings.\r\n\r\n#### Additional for `Feature` type of change\r\n\r\n- [ ] Enhancement / new feature was discussed in a corresponding GitHub issue and Acceptance Criteria were created.\r\n",
      "[![CLA assistant check](https://cla-assistant.io/pull/badge/signed)](https://cla-assistant.io/vaadin/flow-components?pullRequest=3046) <br/>All committers have signed the CLA.",
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=vaadin_flow-components&pullRequest=3046)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=vaadin_flow-components&pullRequest=3046&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=vaadin_flow-components&pullRequest=3046&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=vaadin_flow-components&pullRequest=3046&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=vaadin_flow-components&pullRequest=3046&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=vaadin_flow-components&pullRequest=3046&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=vaadin_flow-components&pullRequest=3046&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=vaadin_flow-components&pullRequest=3046&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=vaadin_flow-components&pullRequest=3046&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=vaadin_flow-components&pullRequest=3046&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=vaadin_flow-components&pullRequest=3046&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=vaadin_flow-components&pullRequest=3046&resolved=false&types=CODE_SMELL) [3695 Code Smells](https://sonarcloud.io/project/issues?id=vaadin_flow-components&pullRequest=3046&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=vaadin_flow-components&pullRequest=3046) No Coverage information  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=vaadin_flow-components&pullRequest=3046&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=vaadin_flow-components&pullRequest=3046&metric=new_duplicated_lines_density&view=list)\n\n",
      "Hi @mshabarov and @sissbruecker, when i performed cherry-pick to this commit to 23.0, i have encountered the following issue. Can you take a look and pick it manually?\n Error Message:\n Error: Command failed: git cherry-pick 8fe08611e304779df01ecd6306d478a9c0edced0\nerror: could not apply 8fe08611e... fix: Use incremental numeric id as a key for Tree Grid items (#3046)\nhint: After resolving the conflicts, mark them with\nhint: \"git add/rm <pathspec>\", then run\nhint: \"git cherry-pick --continue\".\nhint: You can instead skip this commit with \"git cherry-pick --skip\".\nhint: To abort and get back to the state before \"git cherry-pick\",\nhint: run \"git cherry-pick --abort\".\n",
      "Hi @mshabarov and @sissbruecker, when i performed cherry-pick to this commit to 22.0, i have encountered the following issue. Can you take a look and pick it manually?\n Error Message:\n Error: Command failed: git cherry-pick 8fe08611e304779df01ecd6306d478a9c0edced0\nerror: could not apply 8fe08611e... fix: Use incremental numeric id as a key for Tree Grid items (#3046)\nhint: After resolving the conflicts, mark them with\nhint: \"git add/rm <pathspec>\", then run\nhint: \"git cherry-pick --continue\".\nhint: You can instead skip this commit with \"git cherry-pick --skip\".\nhint: To abort and get back to the state before \"git cherry-pick\",\nhint: run \"git cherry-pick --abort\".\n",
      "Hi @mshabarov and @sissbruecker, when i performed cherry-pick to this commit to 14.8, i have encountered the following issue. Can you take a look and pick it manually?\n Error Message:\n Error: Command failed: git cherry-pick 8fe08611e304779df01ecd6306d478a9c0edced0\nerror: could not apply 8fe08611e... fix: Use incremental numeric id as a key for Tree Grid items (#3046)\nhint: After resolving the conflicts, mark them with\nhint: \"git add/rm <pathspec>\", then run\nhint: \"git cherry-pick --continue\".\nhint: You can instead skip this commit with \"git cherry-pick --skip\".\nhint: To abort and get back to the state before \"git cherry-pick\",\nhint: run \"git cherry-pick --abort\".\n",
      "This ticket/PR has been released with Vaadin 23.1.0.beta1 and is also targeting the upcoming stable 23.1.0 version."
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "The patch addresses a security vulnerability by replacing a potentially insecure method for generating item IDs, thus preventing client-side data exposure.\n\n**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 1.0"
}