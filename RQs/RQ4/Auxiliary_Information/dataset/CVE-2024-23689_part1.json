{
  "cve_id": "CVE-2024-23689",
  "cwe_ids": [
    "CWE-209"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
  "cvss_is_v3": true,
  "repo_name": "ClickHouse/clickhouse-java",
  "commit_msg": "Mask sensitive option in log",
  "commit_hash": "4f8d9303eb991b39ec7e7e34825241efa082238a",
  "git_url": "https://github.com/ClickHouse/clickhouse-java/commit/4f8d9303eb991b39ec7e7e34825241efa082238a",
  "file_path": "clickhouse-client/src/main/java/com/clickhouse/client/ClickHouseNode.java",
  "func_name": "toString",
  "func_before": "@Override\n    public String toString() {\n        StringBuilder builder = new StringBuilder().append(\"ClickHouseNode [uri=\").append(baseUri)\n                .append(config.getDatabase());\n        if (!cluster.isEmpty()) {\n            builder.append(\", cluster=\").append(cluster).append(\"(s\").append(shardNum).append(\",w\").append(shardWeight)\n                    .append(\",r\").append(replicaNum).append(')');\n        }\n\n        StringBuilder optsBuilder = new StringBuilder();\n        for (Entry<String, String> option : options.entrySet()) {\n            String key = option.getKey();\n            if (!ClickHouseClientOption.DATABASE.getKey().equals(key)\n                    && !ClickHouseClientOption.SSL.getKey().equals(key)) {\n                optsBuilder.append(key).append('=').append(option.getValue()).append(\",\");\n            }\n        }\n        if (optsBuilder.length() > 0) {\n            optsBuilder.setLength(optsBuilder.length() - 1);\n            builder.append(\", options={\").append(optsBuilder).append('}');\n        }\n        if (!tags.isEmpty()) {\n            builder.append(\", tags=\").append(tags);\n        }\n        return builder.append(\"]@\").append(hashCode()).toString();\n    }",
  "abstract_func_before": "@Override\n    public String toString() {\n        StringBuilder VAR_0 = new StringBuilder().append(\"ClickHouseNode [uri=\").append(VAR_1)\n                .append(VAR_2.getDatabase());\n        if (!VAR_3.isEmpty()) {\n            VAR_0.append(\", cluster=\").append(VAR_3).append(\"(s\").append(VAR_4).append(\",w\").append(VAR_5)\n                    .append(\",r\").append(VAR_6).append(')');\n        }\n\n        StringBuilder VAR_7 = new StringBuilder();\n        for (Entry<String, String> VAR_8 : VAR_9.entrySet()) {\n            String VAR_10 = VAR_8.getKey();\n            if (!VAR_11.DATABASE.getKey().equals(VAR_10)\n                    && !VAR_11.SSL.getKey().equals(VAR_10)) {\n                VAR_7.append(VAR_10).append('=').append(VAR_8.getValue()).append(\",\");\n            }\n        }\n        if (VAR_7.length() > 0) {\n            VAR_7.setLength(VAR_7.length() - 1);\n            VAR_0.append(\", options={\").append(VAR_7).append('}');\n        }\n        if (!VAR_12.isEmpty()) {\n            VAR_0.append(\", tags=\").append(VAR_12);\n        }\n        return VAR_0.append(\"]@\").append(hashCode()).toString();\n    }",
  "func_graph_path_before": "ClickHouse/clickhouse-java/4f8d9303eb991b39ec7e7e34825241efa082238a/ClickHouseNode.java/vul/before/0.json",
  "func": "@Override\n    public String toString() {\n        StringBuilder builder = new StringBuilder().append(\"ClickHouseNode [uri=\").append(baseUri)\n                .append(config.getDatabase());\n        if (!cluster.isEmpty()) {\n            builder.append(\", cluster=\").append(cluster).append(\"(s\").append(shardNum).append(\",w\").append(shardWeight)\n                    .append(\",r\").append(replicaNum).append(')');\n        }\n\n        Map<String, ClickHouseOption> m = ClickHouseConfig.ClientOptions.INSTANCE.sensitiveOptions;\n        StringBuilder optsBuilder = new StringBuilder();\n        for (Entry<String, String> option : options.entrySet()) {\n            String key = option.getKey();\n            if (!ClickHouseClientOption.DATABASE.getKey().equals(key)\n                    && !ClickHouseClientOption.SSL.getKey().equals(key)) {\n                optsBuilder.append(key).append('=').append(m.containsKey(key) ? \"*\" : option.getValue()).append(',');\n            }\n        }\n        if (optsBuilder.length() > 0) {\n            optsBuilder.setLength(optsBuilder.length() - 1);\n            builder.append(\", options={\").append(optsBuilder).append('}');\n        }\n        if (!tags.isEmpty()) {\n            builder.append(\", tags=\").append(tags);\n        }\n        return builder.append(\"]@\").append(hashCode()).toString();\n    }",
  "abstract_func": "@Override\n    public String toString() {\n        StringBuilder VAR_0 = new StringBuilder().append(\"ClickHouseNode [uri=\").append(VAR_1)\n                .append(VAR_2.getDatabase());\n        if (!VAR_3.isEmpty()) {\n            VAR_0.append(\", cluster=\").append(VAR_3).append(\"(s\").append(VAR_4).append(\",w\").append(VAR_5)\n                    .append(\",r\").append(VAR_6).append(')');\n        }\n\n        Map<String, ClickHouseOption> VAR_7 = VAR_8.ClientOptions.INSTANCE.sensitiveOptions;\n        StringBuilder VAR_9 = new StringBuilder();\n        for (Entry<String, String> VAR_10 : VAR_11.entrySet()) {\n            String VAR_12 = VAR_10.getKey();\n            if (!VAR_13.DATABASE.getKey().equals(VAR_12)\n                    && !VAR_13.SSL.getKey().equals(VAR_12)) {\n                VAR_9.append(VAR_12).append('=').append(VAR_7.containsKey(VAR_12) ? \"*\" : VAR_10.getValue()).append(',');\n            }\n        }\n        if (VAR_9.length() > 0) {\n            VAR_9.setLength(VAR_9.length() - 1);\n            VAR_0.append(\", options={\").append(VAR_9).append('}');\n        }\n        if (!VAR_14.isEmpty()) {\n            VAR_0.append(\", tags=\").append(VAR_14);\n        }\n        return VAR_0.append(\"]@\").append(hashCode()).toString();\n    }",
  "func_graph_path": "ClickHouse/clickhouse-java/4f8d9303eb991b39ec7e7e34825241efa082238a/ClickHouseNode.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -7,12 +7,13 @@\n                     .append(\",r\").append(replicaNum).append(')');\n         }\n \n+        Map<String, ClickHouseOption> m = ClickHouseConfig.ClientOptions.INSTANCE.sensitiveOptions;\n         StringBuilder optsBuilder = new StringBuilder();\n         for (Entry<String, String> option : options.entrySet()) {\n             String key = option.getKey();\n             if (!ClickHouseClientOption.DATABASE.getKey().equals(key)\n                     && !ClickHouseClientOption.SSL.getKey().equals(key)) {\n-                optsBuilder.append(key).append('=').append(option.getValue()).append(\",\");\n+                optsBuilder.append(key).append('=').append(m.containsKey(key) ? \"*\" : option.getValue()).append(',');\n             }\n         }\n         if (optsBuilder.length() > 0) {",
  "diff_line_info": {
    "deleted_lines": [
      "                optsBuilder.append(key).append('=').append(option.getValue()).append(\",\");"
    ],
    "added_lines": [
      "        Map<String, ClickHouseOption> m = ClickHouseConfig.ClientOptions.INSTANCE.sensitiveOptions;",
      "                optsBuilder.append(key).append('=').append(m.containsKey(key) ? \"*\" : option.getValue()).append(',');"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/ClickHouse/clickhouse-java/pull/1334",
  "description": {
    "pr_info": {
      "title": "Mask sensitive option in log",
      "number": 1334
    },
    "comment": [
      "## Summary\r\nMask sensitive option in log.\r\n\r\n## Checklist\r\nDelete items not relevant to your PR:\r\n- [x] Unit and integration tests covering the common scenarios were added\r\n- [x] A human-readable description of the changes was provided to include in CHANGELOG\r\n- [ ] For significant changes, documentation in https://github.com/ClickHouse/clickhouse-docs was updated with further explanations or tutorials\r\n"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 1.0"
}