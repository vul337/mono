{
  "cve_id": "CVE-2021-27229",
  "cwe_ids": [
    "CWE-59"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "mumble-voip/mumble",
  "commit_msg": "FIX(client): Only allow \"http\"/\"https\" for URLs in ConnectDialog\n\nOur public server list registration script doesn't have an URL scheme\nwhitelist for the website field.\n\nTurns out a malicious server can register itself with a dangerous URL in\nan attempt to attack a user's machine.\n\nUser interaction is required, as the URL has to be opened by\nright-clicking on the server entry and clicking on \"Open Webpage\".\n\nThis commit introduces a client-side whitelist, which only allows \"http\"\nand \"https\" schemes. We will also implement it in our public list.\n\nIn future we should probably add a warning QMessageBox informing the\nuser that there's no guarantee the URL is safe (regardless of the\nscheme).\n\nThanks a lot to https://positive.security for reporting the RCE\nvulnerability to us privately.",
  "commit_hash": "e59ee87abe249f345908c7d568f6879d16bfd648",
  "git_url": "https://github.com/mumble-voip/mumble/commit/e59ee87abe249f345908c7d568f6879d16bfd648",
  "file_path": "src/mumble/ConnectDialog.cpp",
  "func_name": "ConnectDialog::on_qaUrl_triggered",
  "func_before": "void ConnectDialog::on_qaUrl_triggered() {\n\tServerItem *si = static_cast<ServerItem *>(qtwServers->currentItem());\n\tif (! si || si->qsUrl.isEmpty())\n\t\treturn;\n\n\tQDesktopServices::openUrl(QUrl(si->qsUrl));\n}",
  "abstract_func_before": "void ConnectDialog::on_qaUrl_triggered() {\n\tServerItem *VAR_0 = VAR_1<ServerItem *>(VAR_2->currentItem());\n\tif (! VAR_0 || VAR_0->qsUrl.isEmpty())\n\t\treturn;\n\n\tQDesktopServices::openUrl(QUrl(VAR_0->qsUrl));\n}",
  "func_graph_path_before": "mumble-voip/mumble/e59ee87abe249f345908c7d568f6879d16bfd648/ConnectDialog.cpp/vul/before/0.json",
  "func": "void ConnectDialog::on_qaUrl_triggered() {\n\tauto *si = static_cast< const ServerItem * >(qtwServers->currentItem());\n\tif (!si || si->qsUrl.isEmpty()) {\n\t\treturn;\n\t}\n\n\tconst QStringList allowedSchemes = { QLatin1String(\"http\"), QLatin1String(\"https\") };\n\n\tconst auto url = QUrl(si->qsUrl);\n\tif (allowedSchemes.contains(url.scheme())) {\n\t\tQDesktopServices::openUrl(url);\n\t} else {\n\t\t// Inform user that the requested URL has been blocked\n\t\tQMessageBox msgBox;\n\t\tmsgBox.setText(QObject::tr(\"<b>Blocked URL scheme \\\"%1\\\"</b>\").arg(url.scheme()));\n\t\tmsgBox.setInformativeText(QObject::tr(\"The URL uses a scheme that has been blocked for security reasons.\"));\n\t\tmsgBox.setDetailedText(QObject::tr(\"Blocked URL: \\\"%1\\\"\").arg(url.toString()));\n\t\tmsgBox.setIcon(QMessageBox::Warning);\n\t\tmsgBox.exec();\n\t}\n}",
  "abstract_func": "void ConnectDialog::on_qaUrl_triggered() {\n\tauto *VAR_0 = VAR_1< const ServerItem * >(VAR_2->currentItem());\n\tif (!VAR_0 || VAR_0->qsUrl.isEmpty()) {\n\t\treturn;\n\t}\n\n\tconst QStringList VAR_3 = { QLatin1String(\"http\"), QLatin1String(\"https\") };\n\n\tconst auto VAR_4 = QUrl(VAR_0->qsUrl);\n\tif (VAR_3.contains(VAR_4.scheme())) {\n\t\tQDesktopServices::openUrl(VAR_4);\n\t} else {\n\t\t/* COMMENT_0 */\n\t\tQMessageBox VAR_5;\n\t\tVAR_5.setText(QObject::tr(\"<b>Blocked URL scheme \\\"%1\\\"</b>\").arg(VAR_4.scheme()));\n\t\tVAR_5.setInformativeText(QObject::tr(\"The URL uses a scheme that has been blocked for security reasons.\"));\n\t\tVAR_5.setDetailedText(QObject::tr(\"Blocked URL: \\\"%1\\\"\").arg(VAR_4.toString()));\n\t\tVAR_5.setIcon(QMessageBox::Warning);\n\t\tVAR_5.exec();\n\t}\n}",
  "func_graph_path": "mumble-voip/mumble/e59ee87abe249f345908c7d568f6879d16bfd648/ConnectDialog.cpp/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,7 +1,21 @@\n void ConnectDialog::on_qaUrl_triggered() {\n-\tServerItem *si = static_cast<ServerItem *>(qtwServers->currentItem());\n-\tif (! si || si->qsUrl.isEmpty())\n+\tauto *si = static_cast< const ServerItem * >(qtwServers->currentItem());\n+\tif (!si || si->qsUrl.isEmpty()) {\n \t\treturn;\n+\t}\n \n-\tQDesktopServices::openUrl(QUrl(si->qsUrl));\n+\tconst QStringList allowedSchemes = { QLatin1String(\"http\"), QLatin1String(\"https\") };\n+\n+\tconst auto url = QUrl(si->qsUrl);\n+\tif (allowedSchemes.contains(url.scheme())) {\n+\t\tQDesktopServices::openUrl(url);\n+\t} else {\n+\t\t// Inform user that the requested URL has been blocked\n+\t\tQMessageBox msgBox;\n+\t\tmsgBox.setText(QObject::tr(\"<b>Blocked URL scheme \\\"%1\\\"</b>\").arg(url.scheme()));\n+\t\tmsgBox.setInformativeText(QObject::tr(\"The URL uses a scheme that has been blocked for security reasons.\"));\n+\t\tmsgBox.setDetailedText(QObject::tr(\"Blocked URL: \\\"%1\\\"\").arg(url.toString()));\n+\t\tmsgBox.setIcon(QMessageBox::Warning);\n+\t\tmsgBox.exec();\n+\t}\n }",
  "diff_line_info": {
    "deleted_lines": [
      "\tServerItem *si = static_cast<ServerItem *>(qtwServers->currentItem());",
      "\tif (! si || si->qsUrl.isEmpty())",
      "\tQDesktopServices::openUrl(QUrl(si->qsUrl));"
    ],
    "added_lines": [
      "\tauto *si = static_cast< const ServerItem * >(qtwServers->currentItem());",
      "\tif (!si || si->qsUrl.isEmpty()) {",
      "\t}",
      "\tconst QStringList allowedSchemes = { QLatin1String(\"http\"), QLatin1String(\"https\") };",
      "",
      "\tconst auto url = QUrl(si->qsUrl);",
      "\tif (allowedSchemes.contains(url.scheme())) {",
      "\t\tQDesktopServices::openUrl(url);",
      "\t} else {",
      "\t\t// Inform user that the requested URL has been blocked",
      "\t\tQMessageBox msgBox;",
      "\t\tmsgBox.setText(QObject::tr(\"<b>Blocked URL scheme \\\"%1\\\"</b>\").arg(url.scheme()));",
      "\t\tmsgBox.setInformativeText(QObject::tr(\"The URL uses a scheme that has been blocked for security reasons.\"));",
      "\t\tmsgBox.setDetailedText(QObject::tr(\"Blocked URL: \\\"%1\\\"\").arg(url.toString()));",
      "\t\tmsgBox.setIcon(QMessageBox::Warning);",
      "\t\tmsgBox.exec();",
      "\t}"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/mumble-voip/mumble/pull/4739",
  "description": {
    "pr_info": {
      "title": "Backport \"FIX(client): Only allow \"http\"/\"https\" for URLs in ConnectDialog\"",
      "number": 4739
    },
    "comment": [
      "Our public server list registration script doesn't have an URL scheme\r\nwhitelist for the website field.\r\n\r\nTurns out a malicious server can register itself with a dangerous URL in\r\nan attempt to attack a user's machine.\r\n\r\nUser interaction is required, as the URL has to be opened by\r\nright-clicking on the server entry and clicking on \"Open Webpage\".\r\n\r\nThis commit introduces a client-side whitelist, which only allows \"http\"\r\nand \"https\" schemes. We will also implement it in our public list.\r\n\r\nIn future we should probably add a warning QMessageBox informing the\r\nuser that there's no guarantee the URL is safe (regardless of the\r\nscheme).\r\n\r\nThanks a lot to https://positive.security for reporting the RCE\r\nvulnerability to us privately.\r\n\r\nThis is a backport of #4733"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 1.0"
}