{
  "cve_id": "CVE-2018-12265",
  "cwe_ids": [
    "CWE-190",
    "CWE-125"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "Exiv2/exiv2",
  "commit_msg": "Add offset_ and size_ safely in LoaderExifJpeg::LoaderExifJpeg\n\noffset_ can become arbitrarily large and overflows once its added to size_,\nthis causes all kinds of problems further in the code when offset_ is used\nagain.\n=> Use Safe::add() to catch potential overflows\nThis fixes #365.",
  "commit_hash": "937a1a2bd067b8b3b787f3757089d972f3a39853",
  "git_url": "https://github.com/Exiv2/exiv2/commit/937a1a2bd067b8b3b787f3757089d972f3a39853",
  "file_path": "src/preview.cpp",
  "func_name": "LoaderExifJpeg::LoaderExifJpeg",
  "func_before": "LoaderExifJpeg::LoaderExifJpeg(PreviewId id, const Image &image, int parIdx)\n        : Loader(id, image)\n    {\n        offset_ = 0;\n\t\tconst ExifData &exifData = image_.exifData();\n        ExifData::const_iterator pos = exifData.findKey(ExifKey(param_[parIdx].offsetKey_));\n        if (pos != exifData.end() && pos->count() > 0) {\n            offset_ = pos->toLong();\n        }\n\n        size_ = 0;\n        pos = exifData.findKey(ExifKey(param_[parIdx].sizeKey_));\n        if (pos != exifData.end() && pos->count() > 0) {\n            size_ = pos->toLong();\n        }\n\n        if (offset_ == 0 || size_ == 0) return;\n\n        if (param_[parIdx].baseOffsetKey_) {\n            pos = exifData.findKey(ExifKey(param_[parIdx].baseOffsetKey_));\n            if (pos != exifData.end() && pos->count() > 0) {\n                offset_ += pos->toLong();\n            }\n        }\n\n        if (offset_ + size_ > static_cast<uint32_t>(image_.io().size())) return;\n\n        valid_ = true;\n    }",
  "abstract_func_before": "LoaderExifJpeg::LoaderExifJpeg(PreviewId VAR_0, const Image &VAR_1, int VAR_2)\n        : Loader(VAR_0, VAR_1)\n    {\n        VAR_3 = 0;\n\t\tconst ExifData &VAR_4 = VAR_5.exifData();\n        ExifData::const_iterator VAR_6 = VAR_4.findKey(ExifKey(VAR_7[VAR_2].offsetKey_));\n        if (VAR_6 != VAR_4.end() && VAR_6->count() > 0) {\n            VAR_3 = VAR_6->toLong();\n        }\n\n        VAR_8 = 0;\n        VAR_6 = VAR_4.findKey(ExifKey(VAR_7[VAR_2].sizeKey_));\n        if (VAR_6 != VAR_4.end() && VAR_6->count() > 0) {\n            VAR_8 = VAR_6->toLong();\n        }\n\n        if (VAR_3 == 0 || VAR_8 == 0) return;\n\n        if (VAR_7[VAR_2].baseOffsetKey_) {\n            VAR_6 = VAR_4.findKey(ExifKey(VAR_7[VAR_2].baseOffsetKey_));\n            if (VAR_6 != VAR_4.end() && VAR_6->count() > 0) {\n                VAR_3 += VAR_6->toLong();\n            }\n        }\n\n        if (VAR_3 + VAR_8 > VAR_9<uint32_t>(VAR_5.io().size())) return;\n\n        VAR_10 = true;\n    }",
  "func_graph_path_before": "Exiv2/exiv2/937a1a2bd067b8b3b787f3757089d972f3a39853/preview.cpp/vul/before/0.json",
  "func": "LoaderExifJpeg::LoaderExifJpeg(PreviewId id, const Image &image, int parIdx)\n        : Loader(id, image)\n    {\n        offset_ = 0;\n\t\tconst ExifData &exifData = image_.exifData();\n        ExifData::const_iterator pos = exifData.findKey(ExifKey(param_[parIdx].offsetKey_));\n        if (pos != exifData.end() && pos->count() > 0) {\n            offset_ = pos->toLong();\n        }\n\n        size_ = 0;\n        pos = exifData.findKey(ExifKey(param_[parIdx].sizeKey_));\n        if (pos != exifData.end() && pos->count() > 0) {\n            size_ = pos->toLong();\n        }\n\n        if (offset_ == 0 || size_ == 0) return;\n\n        if (param_[parIdx].baseOffsetKey_) {\n            pos = exifData.findKey(ExifKey(param_[parIdx].baseOffsetKey_));\n            if (pos != exifData.end() && pos->count() > 0) {\n                offset_ += pos->toLong();\n            }\n        }\n\n        if (Safe::add(offset_, size_) > static_cast<uint32_t>(image_.io().size()))\n            return;\n\n        valid_ = true;\n    }",
  "abstract_func": "LoaderExifJpeg::LoaderExifJpeg(PreviewId VAR_0, const Image &VAR_1, int VAR_2)\n        : Loader(VAR_0, VAR_1)\n    {\n        VAR_3 = 0;\n\t\tconst ExifData &VAR_4 = VAR_5.exifData();\n        ExifData::const_iterator VAR_6 = VAR_4.findKey(ExifKey(VAR_7[VAR_2].offsetKey_));\n        if (VAR_6 != VAR_4.end() && VAR_6->count() > 0) {\n            VAR_3 = VAR_6->toLong();\n        }\n\n        VAR_8 = 0;\n        VAR_6 = VAR_4.findKey(ExifKey(VAR_7[VAR_2].sizeKey_));\n        if (VAR_6 != VAR_4.end() && VAR_6->count() > 0) {\n            VAR_8 = VAR_6->toLong();\n        }\n\n        if (VAR_3 == 0 || VAR_8 == 0) return;\n\n        if (VAR_7[VAR_2].baseOffsetKey_) {\n            VAR_6 = VAR_4.findKey(ExifKey(VAR_7[VAR_2].baseOffsetKey_));\n            if (VAR_6 != VAR_4.end() && VAR_6->count() > 0) {\n                VAR_3 += VAR_6->toLong();\n            }\n        }\n\n        if (Safe::add(VAR_3, VAR_8) > VAR_9<uint32_t>(VAR_5.io().size()))\n            return;\n\n        VAR_10 = true;\n    }",
  "func_graph_path": "Exiv2/exiv2/937a1a2bd067b8b3b787f3757089d972f3a39853/preview.cpp/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -23,7 +23,8 @@\n             }\n         }\n \n-        if (offset_ + size_ > static_cast<uint32_t>(image_.io().size())) return;\n+        if (Safe::add(offset_, size_) > static_cast<uint32_t>(image_.io().size()))\n+            return;\n \n         valid_ = true;\n     }",
  "diff_line_info": {
    "deleted_lines": [
      "        if (offset_ + size_ > static_cast<uint32_t>(image_.io().size())) return;"
    ],
    "added_lines": [
      "        if (Safe::add(offset_, size_) > static_cast<uint32_t>(image_.io().size()))",
      "            return;"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/Exiv2/exiv2/pull/368",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/Exiv2/exiv2/pull/368: 403 Client Error: Forbidden for url: https://api.github.com/repos/Exiv2/exiv2/pulls/368",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix;  \n**Confidence:** 0.9"
}