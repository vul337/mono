{
  "cve_id": "CVE-2022-41751",
  "cwe_ids": [
    "CWE-78"
  ],
  "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H",
  "cvss_is_v3": true,
  "repo_name": "Matthias-Wandel/jhead",
  "commit_msg": "Check for dangerous filenames in RegenerateThumbnail",
  "commit_hash": "3fe905cf674f8dbac8a89e58cee1b4850abf9530",
  "git_url": "https://github.com/Matthias-Wandel/jhead/commit/3fe905cf674f8dbac8a89e58cee1b4850abf9530",
  "file_path": "jhead.c",
  "func_name": "RegenerateThumbnail",
  "func_before": "static int RegenerateThumbnail(const char * FileName)\n{\n    char ThumbnailGenCommand[PATH_MAX*2+50];\n    if (ImageInfo.ThumbnailOffset == 0 || ImageInfo.ThumbnailAtEnd == FALSE){\n        // There is no thumbnail, or the thumbnail is not at the end.\n        return FALSE;\n    }\n\n    snprintf(ThumbnailGenCommand, sizeof(ThumbnailGenCommand),\n        \"mogrify -thumbnail %dx%d -quality 80 \\\"%s\\\"\",\n        RegenThumbnail, RegenThumbnail, FileName);\n\n    if (system(ThumbnailGenCommand) == 0){\n        // Put the thumbnail back in the header\n        return ReplaceThumbnail(FileName);\n    }else{\n        ErrFatal(\"Unable to run 'mogrify' command\");\n        return FALSE;\n    }\n}",
  "abstract_func_before": "static int RegenerateThumbnail(const char * VAR_0)\n{\n    char VAR_1[VAR_2*2+50];\n    if (VAR_3.ThumbnailOffset == 0 || VAR_3.ThumbnailAtEnd == FALSE){\n        /* COMMENT_0 */\n        return FALSE;\n    }\n\n    snprintf(VAR_1, sizeof(VAR_1),\n        \"mogrify -thumbnail %dx%d -quality 80 \\\"%s\\\"\",\n        VAR_4, VAR_4, VAR_0);\n\n    if (system(VAR_1) == 0){\n        /* COMMENT_1 */\n        return ReplaceThumbnail(VAR_0);\n    }else{\n        ErrFatal(\"Unable to run 'mogrify' command\");\n        return FALSE;\n    }\n}",
  "func_graph_path_before": "Matthias-Wandel/jhead/3fe905cf674f8dbac8a89e58cee1b4850abf9530/jhead.c/vul/before/0.json",
  "func": "static int RegenerateThumbnail(const char * FileName)\n{\n    char ThumbnailGenCommand[PATH_MAX*2+50];\n    if (ImageInfo.ThumbnailOffset == 0 || ImageInfo.ThumbnailAtEnd == FALSE){\n        // There is no thumbnail, or the thumbnail is not at the end.\n        return FALSE;\n    }\n\n    // Disallow characters in the filename that could be used to execute arbitrary\n    // shell commands with system() below.\n    if(strpbrk(FileName, \"\\\";'&|`\")) {\n        ErrNonfatal(\"Filename has invalid characters.\", 0, 0);\n        return FALSE;\n    }\n\n    snprintf(ThumbnailGenCommand, sizeof(ThumbnailGenCommand),\n        \"mogrify -thumbnail %dx%d -quality 80 \\\"%s\\\"\",\n        RegenThumbnail, RegenThumbnail, FileName);\n\n    if (system(ThumbnailGenCommand) == 0){\n        // Put the thumbnail back in the header\n        return ReplaceThumbnail(FileName);\n    }else{\n        ErrFatal(\"Unable to run 'mogrify' command\");\n        return FALSE;\n    }\n}",
  "abstract_func": "static int RegenerateThumbnail(const char * VAR_0)\n{\n    char VAR_1[VAR_2*2+50];\n    if (VAR_3.ThumbnailOffset == 0 || VAR_3.ThumbnailAtEnd == FALSE){\n        /* COMMENT_0 */\n        return FALSE;\n    }\n\n    /* COMMENT_1 */\n    /* COMMENT_2 */\n    if(strpbrk(VAR_0, \"\\\";'&|`\")) {\n        ErrNonfatal(\"Filename has invalid characters.\", 0, 0);\n        return FALSE;\n    }\n\n    snprintf(VAR_1, sizeof(VAR_1),\n        \"mogrify -thumbnail %dx%d -quality 80 \\\"%s\\\"\",\n        VAR_4, VAR_4, VAR_0);\n\n    if (system(VAR_1) == 0){\n        /* COMMENT_3 */\n        return ReplaceThumbnail(VAR_0);\n    }else{\n        ErrFatal(\"Unable to run 'mogrify' command\");\n        return FALSE;\n    }\n}",
  "func_graph_path": "Matthias-Wandel/jhead/3fe905cf674f8dbac8a89e58cee1b4850abf9530/jhead.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -3,6 +3,13 @@\n     char ThumbnailGenCommand[PATH_MAX*2+50];\n     if (ImageInfo.ThumbnailOffset == 0 || ImageInfo.ThumbnailAtEnd == FALSE){\n         // There is no thumbnail, or the thumbnail is not at the end.\n+        return FALSE;\n+    }\n+\n+    // Disallow characters in the filename that could be used to execute arbitrary\n+    // shell commands with system() below.\n+    if(strpbrk(FileName, \"\\\";'&|`\")) {\n+        ErrNonfatal(\"Filename has invalid characters.\", 0, 0);\n         return FALSE;\n     }\n ",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "        return FALSE;",
      "    }",
      "",
      "    // Disallow characters in the filename that could be used to execute arbitrary",
      "    // shell commands with system() below.",
      "    if(strpbrk(FileName, \"\\\";'&|`\")) {",
      "        ErrNonfatal(\"Filename has invalid characters.\", 0, 0);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/Matthias-Wandel/jhead/pull/57",
  "description": {
    "pr_info": {
      "title": "Fix CVE 2022 41751",
      "number": 57
    },
    "comment": [
      "Hello, developers of jhead.\r\nWe have found an exploit that allows running an arbitrary shell command due to improper input validation ([CWE-20](https://cwe.mitre.org/data/definitions/20.html)). This pull request fixes this vulnerability.\r\n\r\n## Details\r\n\r\nIn the function RegenerateThumbnail in the file jhead.c, system() is called with a string that contains a user-provided filename,\r\nleaving it open to attack by using a crafted filename.\r\n\r\n## System Info\r\n5.10.104-linuxkit: clang 10.0.0-4ubuntu1, gcc 9.4.0\r\njhead 3.06.0.1, commit 78057ab\r\n\r\nAll testing was done in a Docker container, but this vulnerability should affect all platforms.\r\n\r\n## Verification\r\n\r\n<!-- Update this with a link to the uploaded image. Note that if you upload the image it might get processed and remove the thumbnail. -->\r\n[Download test.jpeg](https://www.dropbox.com/s/4u1xucs3k1chp0h/test.jpeg.tar.gz?dl=0).\r\n\r\nThis will work with any image with an EXIF thumbnail. The program [exiftran](https://linux.die.net/man/1/exiftran) can be used to add a\r\nthumbnail to an image that lacks one.\r\n\r\n1. Download and compile:\r\n```\r\nwget https://github.com/Matthias-Wandel/jhead/archive/refs/tags/3.06.0.1.tar.gz\r\ntar xzf 3.06.0.1.tar.gz\r\ncd jhead-3.06.0.1\r\nmake\r\n```\r\n2. Copy a JPEG with an EXIF thumbnail to a filename that triggers the vulnerability:\r\n```\r\ncp path/to/test.jpeg 'test.jpeg\"; exec \"sh'\r\n```\r\n3. Run thumbnail regeneration to finish exploit:\r\n```\r\n./jhead -rgt50 'test.jpeg\"; exec \"sh'\r\nsh: 1: mogrify: not found\r\n$ ls\r\n buildrpms     exifgaps.py           iptc.c   jhead.1   jhead.spec    make.bat         makernote.c   paths.c                rpmprep                 tests\r\n changes.txt   gpsinfo.c             iptc.h   jhead.c   jpgfile.c     makefile         myglob.c      read_write_notes.txt   test.jpeg               usage.html\r\n exif.c        how-to-make-rpm.txt   jhead    jhead.h   jpgqguess.c   makefile-win32   obj           readme.txt            'test.jpeg\"; exec \"sh'\r\n$\r\n```\r\n\r\nWhether the mogrify command exists does not affect the functioning of the exploit.\r\n\r\n## Fix\r\n\r\nI added a check for certain characters in the filename in RegenerateThumbnail:\r\n```c\r\n    // Disallow characters in the filename that could be used to execute arbitrary\r\n    // shell commands with system() below.\r\n    if(strpbrk(FileName, \"\\\";'&|`\")) {\r\n        ErrNonfatal(\"Filename has invalid characters.\", 0, 0);\r\n        return FALSE;\r\n    }\r\n```\r\nI also replaced a call to `sprintf` with `snprintf` in RegenerateThumbnail.\r\n\r\nAfter applying the patch, files with invalid characters (such as quotes and other symbols with special meaning on the shell)\r\nwill be disallowed from being used in RegenerateThumbnail:\r\n```\r\n$ ./jhead -rgt50 'test.jpg\"; exec \"sh'\r\nNonfatal Error : 'test.jpg\"; exec \"sh' Filename has invalid characters.\r\n```\r\n\r\nA better solution would be to use a function such as `execve` on UNIX-based systems. I chose not to include this in the patch\r\nas it would complicate compilation on Windows-based systems, but it should also be possible to call a Windows API function such\r\nas `CreateProcess` or `ShellExecute` to run the command.\r\n"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 1.0"
}