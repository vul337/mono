{
  "cve_id": "CVE-2023-41361",
  "cwe_ids": [
    "CWE-120"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
  "cvss_is_v3": true,
  "repo_name": "FRRouting/frr",
  "commit_msg": "bgpd: Check the length of the rcv software version\n\nMake sure we don't exceed the maximum of BGP_MAX_SOFT_VERSION.\n\nThe Capability Length SHOULD be no greater than 64.\n\nReported-by: Iggy Frankovic <iggyfran@amazon.com>\nSigned-off-by: Donatas Abraitis <donatas@opensourcerouting.org>",
  "commit_hash": "b4d09af9194d20a7f9f16995a062f5d8e3d32840",
  "git_url": "https://github.com/FRRouting/frr/commit/b4d09af9194d20a7f9f16995a062f5d8e3d32840",
  "file_path": "bgpd/bgp_open.c",
  "func_name": "bgp_capability_software_version",
  "func_before": "static int bgp_capability_software_version(struct peer *peer,\n\t\t\t\t\t   struct capability_header *hdr)\n{\n\tstruct stream *s = BGP_INPUT(peer);\n\tchar str[BGP_MAX_SOFT_VERSION + 1];\n\tsize_t end = stream_get_getp(s) + hdr->length;\n\tuint8_t len;\n\n\tSET_FLAG(peer->cap, PEER_CAP_SOFT_VERSION_RCV);\n\n\tlen = stream_getc(s);\n\tif (stream_get_getp(s) + len > end) {\n\t\tflog_warn(\n\t\t\tEC_BGP_CAPABILITY_INVALID_DATA,\n\t\t\t\"%s: Received malformed Software Version capability from peer %s\",\n\t\t\t__func__, peer->host);\n\t\treturn -1;\n\t}\n\n\tif (len) {\n\t\tstream_get(str, s, len);\n\t\tstr[len] = '\\0';\n\n\t\tXFREE(MTYPE_BGP_SOFT_VERSION, peer->soft_version);\n\n\t\tpeer->soft_version = XSTRDUP(MTYPE_BGP_SOFT_VERSION, str);\n\n\t\tif (bgp_debug_neighbor_events(peer))\n\t\t\tzlog_debug(\"%s sent Software Version: %s\", peer->host,\n\t\t\t\t   peer->soft_version);\n\t}\n\n\treturn 0;\n}",
  "abstract_func_before": "static int bgp_capability_software_version(struct peer *peer,\n\t\t\t\t\t   struct capability_header *VAR_0)\n{\n\tstruct stream *VAR_1 = BGP_INPUT(peer);\n\tchar VAR_2[VAR_3 + 1];\n\tsize_t VAR_4 = stream_get_getp(VAR_1) + VAR_0->length;\n\tuint8_t VAR_5;\n\n\tSET_FLAG(peer->cap, VAR_6);\n\n\tVAR_5 = stream_getc(VAR_1);\n\tif (stream_get_getp(VAR_1) + VAR_5 > VAR_4) {\n\t\tflog_warn(\n\t\t\tVAR_7,\n\t\t\t\"%s: Received malformed Software Version capability from peer %s\",\n\t\t\tVAR_8, peer->host);\n\t\treturn -1;\n\t}\n\n\tif (VAR_5) {\n\t\tstream_get(VAR_2, VAR_1, VAR_5);\n\t\tVAR_2[VAR_5] = '\\0';\n\n\t\tXFREE(VAR_9, peer->soft_version);\n\n\t\tpeer->soft_version = XSTRDUP(VAR_9, VAR_2);\n\n\t\tif (bgp_debug_neighbor_events(peer))\n\t\t\tzlog_debug(\"%s sent Software Version: %s\", peer->host,\n\t\t\t\t   peer->soft_version);\n\t}\n\n\treturn 0;\n}",
  "func_graph_path_before": "FRRouting/frr/b4d09af9194d20a7f9f16995a062f5d8e3d32840/bgp_open.c/vul/before/0.json",
  "func": "static int bgp_capability_software_version(struct peer *peer,\n\t\t\t\t\t   struct capability_header *hdr)\n{\n\tstruct stream *s = BGP_INPUT(peer);\n\tchar str[BGP_MAX_SOFT_VERSION + 1];\n\tsize_t end = stream_get_getp(s) + hdr->length;\n\tuint8_t len;\n\n\tSET_FLAG(peer->cap, PEER_CAP_SOFT_VERSION_RCV);\n\n\tlen = stream_getc(s);\n\tif (stream_get_getp(s) + len > end) {\n\t\tflog_warn(\n\t\t\tEC_BGP_CAPABILITY_INVALID_DATA,\n\t\t\t\"%s: Received malformed Software Version capability from peer %s\",\n\t\t\t__func__, peer->host);\n\t\treturn -1;\n\t}\n\n\tif (len > BGP_MAX_SOFT_VERSION) {\n\t\tflog_warn(EC_BGP_CAPABILITY_INVALID_LENGTH,\n\t\t\t  \"%s: Received Software Version, but the length is too big, truncating, from peer %s\",\n\t\t\t  __func__, peer->host);\n\t\tstream_get(str, s, BGP_MAX_SOFT_VERSION);\n\t\tstream_forward_getp(s, len - BGP_MAX_SOFT_VERSION);\n\t\tlen = BGP_MAX_SOFT_VERSION;\n\t} else if (len) {\n\t\tstream_get(str, s, len);\n\t}\n\n\tif (len) {\n\t\tstr[len] = '\\0';\n\n\t\tXFREE(MTYPE_BGP_SOFT_VERSION, peer->soft_version);\n\n\t\tpeer->soft_version = XSTRDUP(MTYPE_BGP_SOFT_VERSION, str);\n\n\t\tif (bgp_debug_neighbor_events(peer))\n\t\t\tzlog_debug(\"%s sent Software Version: %s\", peer->host,\n\t\t\t\t   peer->soft_version);\n\t}\n\n\treturn 0;\n}",
  "abstract_func": "static int bgp_capability_software_version(struct peer *peer,\n\t\t\t\t\t   struct capability_header *VAR_0)\n{\n\tstruct stream *VAR_1 = BGP_INPUT(peer);\n\tchar VAR_2[VAR_3 + 1];\n\tsize_t VAR_4 = stream_get_getp(VAR_1) + VAR_0->length;\n\tuint8_t VAR_5;\n\n\tSET_FLAG(peer->cap, VAR_6);\n\n\tVAR_5 = stream_getc(VAR_1);\n\tif (stream_get_getp(VAR_1) + VAR_5 > VAR_4) {\n\t\tflog_warn(\n\t\t\tVAR_7,\n\t\t\t\"%s: Received malformed Software Version capability from peer %s\",\n\t\t\tVAR_8, peer->host);\n\t\treturn -1;\n\t}\n\n\tif (VAR_5 > VAR_3) {\n\t\tflog_warn(VAR_9,\n\t\t\t  \"%s: Received Software Version, but the length is too big, truncating, from peer %s\",\n\t\t\t  VAR_8, peer->host);\n\t\tstream_get(VAR_2, VAR_1, VAR_3);\n\t\tstream_forward_getp(VAR_1, VAR_5 - VAR_3);\n\t\tVAR_5 = VAR_3;\n\t} else if (VAR_5) {\n\t\tstream_get(VAR_2, VAR_1, VAR_5);\n\t}\n\n\tif (VAR_5) {\n\t\tVAR_2[VAR_5] = '\\0';\n\n\t\tXFREE(VAR_10, peer->soft_version);\n\n\t\tpeer->soft_version = XSTRDUP(VAR_10, VAR_2);\n\n\t\tif (bgp_debug_neighbor_events(peer))\n\t\t\tzlog_debug(\"%s sent Software Version: %s\", peer->host,\n\t\t\t\t   peer->soft_version);\n\t}\n\n\treturn 0;\n}",
  "func_graph_path": "FRRouting/frr/b4d09af9194d20a7f9f16995a062f5d8e3d32840/bgp_open.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -17,8 +17,18 @@\n \t\treturn -1;\n \t}\n \n+\tif (len > BGP_MAX_SOFT_VERSION) {\n+\t\tflog_warn(EC_BGP_CAPABILITY_INVALID_LENGTH,\n+\t\t\t  \"%s: Received Software Version, but the length is too big, truncating, from peer %s\",\n+\t\t\t  __func__, peer->host);\n+\t\tstream_get(str, s, BGP_MAX_SOFT_VERSION);\n+\t\tstream_forward_getp(s, len - BGP_MAX_SOFT_VERSION);\n+\t\tlen = BGP_MAX_SOFT_VERSION;\n+\t} else if (len) {\n+\t\tstream_get(str, s, len);\n+\t}\n+\n \tif (len) {\n-\t\tstream_get(str, s, len);\n \t\tstr[len] = '\\0';\n \n \t\tXFREE(MTYPE_BGP_SOFT_VERSION, peer->soft_version);",
  "diff_line_info": {
    "deleted_lines": [
      "\t\tstream_get(str, s, len);"
    ],
    "added_lines": [
      "\tif (len > BGP_MAX_SOFT_VERSION) {",
      "\t\tflog_warn(EC_BGP_CAPABILITY_INVALID_LENGTH,",
      "\t\t\t  \"%s: Received Software Version, but the length is too big, truncating, from peer %s\",",
      "\t\t\t  __func__, peer->host);",
      "\t\tstream_get(str, s, BGP_MAX_SOFT_VERSION);",
      "\t\tstream_forward_getp(s, len - BGP_MAX_SOFT_VERSION);",
      "\t\tlen = BGP_MAX_SOFT_VERSION;",
      "\t} else if (len) {",
      "\t\tstream_get(str, s, len);",
      "\t}",
      ""
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/FRRouting/frr/pull/14241",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/FRRouting/frr/pull/14241: 403 Client Error: Forbidden for url: https://api.github.com/repos/FRRouting/frr/pulls/14241",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "Final Classification: Security Vulnerability Fix; Confidence: 0.9"
}