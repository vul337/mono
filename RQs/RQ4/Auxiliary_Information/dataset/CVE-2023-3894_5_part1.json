{
  "cve_id": "CVE-2023-3894",
  "cwe_ids": [
    "CWE-787"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
  "cvss_is_v3": true,
  "repo_name": "FasterXML/jackson-dataformats-text",
  "commit_msg": "validate nesting depth goes back tp zero",
  "commit_hash": "6f2f87f94d53fe440afd353b74c07ffa97d9888f",
  "git_url": "https://github.com/FasterXML/jackson-dataformats-text/commit/6f2f87f94d53fe440afd353b74c07ffa97d9888f",
  "file_path": "toml/src/main/java/com/fasterxml/jackson/dataformat/toml/Parser.java",
  "func_name": "parse",
  "func_before": "public static ObjectNode parse(\n            final TomlFactory tomlFactory,\n            final IOContext ioContext,\n            final Reader reader\n    ) throws IOException {\n        final TomlFactory factory = tomlFactory == null ? new TomlFactory() : tomlFactory;\n        Parser parser = new Parser(factory, ioContext,\n                new TomlStreamReadException.ErrorContext(ioContext.contentReference(), null),\n                factory.getFormatParserFeatures(), reader);\n        try {\n            return parser.parse();\n        } finally {\n            parser.lexer.releaseBuffers();\n        }\n    }",
  "abstract_func_before": "public static ObjectNode parse(\n            final TomlFactory VAR_0,\n            final IOContext VAR_1,\n            final Reader VAR_2\n    ) throws IOException {\n        final TomlFactory VAR_3 = VAR_0 == null ? new TomlFactory() : VAR_0;\n        Parser VAR_4 = new Parser(VAR_3, VAR_1,\n                new TomlStreamReadException.ErrorContext(VAR_1.contentReference(), null),\n                VAR_3.getFormatParserFeatures(), VAR_2);\n        try {\n            return VAR_4.parse();\n        } finally {\n            VAR_4.lexer.releaseBuffers();\n        }\n    }",
  "func_graph_path_before": "FasterXML/jackson-dataformats-text/6f2f87f94d53fe440afd353b74c07ffa97d9888f/Parser.java/vul/before/0.json",
  "func": "public static ObjectNode parse(\n            final TomlFactory tomlFactory,\n            final IOContext ioContext,\n            final Reader reader\n    ) throws IOException {\n        final TomlFactory factory = tomlFactory == null ? new TomlFactory() : tomlFactory;\n        Parser parser = new Parser(factory, ioContext,\n                new TomlStreamReadException.ErrorContext(ioContext.contentReference(), null),\n                factory.getFormatParserFeatures(), reader);\n        try {\n            return parser.parse();\n        } finally {\n            if (factory.isEnabled(TomlReadFeature.VALIDATE_NESTING_DEPTH) && parser.getNestingDepth() > 0) {\n                throw new IOException(\"Nesting Depth is non-zero after parsing TOML\");\n            }\n            parser.lexer.releaseBuffers();\n        }\n    }",
  "abstract_func": "public static ObjectNode parse(\n            final TomlFactory VAR_0,\n            final IOContext VAR_1,\n            final Reader VAR_2\n    ) throws IOException {\n        final TomlFactory VAR_3 = VAR_0 == null ? new TomlFactory() : VAR_0;\n        Parser VAR_4 = new Parser(VAR_3, VAR_1,\n                new TomlStreamReadException.ErrorContext(VAR_1.contentReference(), null),\n                VAR_3.getFormatParserFeatures(), VAR_2);\n        try {\n            return VAR_4.parse();\n        } finally {\n            if (VAR_3.isEnabled(VAR_5.VALIDATE_NESTING_DEPTH) && VAR_4.getNestingDepth() > 0) {\n                throw new IOException(\"Nesting Depth is non-zero after parsing TOML\");\n            }\n            VAR_4.lexer.releaseBuffers();\n        }\n    }",
  "func_graph_path": "FasterXML/jackson-dataformats-text/6f2f87f94d53fe440afd353b74c07ffa97d9888f/Parser.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -10,6 +10,9 @@\n         try {\n             return parser.parse();\n         } finally {\n+            if (factory.isEnabled(TomlReadFeature.VALIDATE_NESTING_DEPTH) && parser.getNestingDepth() > 0) {\n+                throw new IOException(\"Nesting Depth is non-zero after parsing TOML\");\n+            }\n             parser.lexer.releaseBuffers();\n         }\n     }",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "            if (factory.isEnabled(TomlReadFeature.VALIDATE_NESTING_DEPTH) && parser.getNestingDepth() > 0) {",
      "                throw new IOException(\"Nesting Depth is non-zero after parsing TOML\");",
      "            }"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/FasterXML/jackson-dataformats-text/pull/398",
  "description": {
    "pr_info": {
      "title": "TOML: check nesting depth",
      "number": 398
    },
    "comment": [
      "* TOML code has no ReadContext so I'm just tracking depth using an int",
      "this seems like a better fix than #395. the only thing i'm concerned about is the difference of toml to the other formats. someone using only the streaming apis might set the max stream depth fairly high because they think they cannot run into the data binding issues it exists to avoid. however with toml, the depth limit is critical for streaming as well (since there is no real streaming for toml), not just for binding.\r\n\r\nbut this is probably not a realistic issue, so this still seems superior.",
      "@pjfanning i dont think the nesting check is necessary? it should be caught by the parser, every start token will have a pollExpected with the corresponding end token",
      "@yawkat I'll probably remove the check. I just wanted to see if there were any existing tests where the depth misbehaves. I'll leave the check there for the moment but as I say, I'm likely to remove it before merging.",
      "maybe it can be an `assert` and oss-fuzz can tell us if there's any case where my assumption is violated :)",
      "LGTM, but wanted to make sure this is to be merged -- anything else to wait for, change? LMK and I'll  merge it to 2.15, master.",
      "it's ok to merge - I'll follow up with more tests in another PR",
      "Ok managed to merge to `master`; was bit hairy but all tests pass so I think that's ok."
    ]
  },
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.8,
  "Bug Filter Response": "**Final Classification:** Defect Remediation & Feature Upgrades; **Confidence:** 0.8"
}