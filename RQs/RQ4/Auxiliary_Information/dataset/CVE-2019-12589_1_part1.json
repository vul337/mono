{
  "cve_id": "CVE-2019-12589",
  "cwe_ids": [
    "CWE-732"
  ],
  "cvss_vector": "AV:L/AC:L/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "netblue30/firejail",
  "commit_msg": "mount runtime seccomp files read-only (#2602)\n\navoid creating locations in the file system that are both writable and\r\nexecutable (in this case for processes with euid of the user).\r\n\r\nfor the same reason also remove user owned libfiles\r\nwhen it is not needed any more",
  "commit_hash": "eecf35c2f8249489a1d3e512bb07f0d427183134",
  "git_url": "https://github.com/netblue30/firejail/commit/eecf35c2f8249489a1d3e512bb07f0d427183134",
  "file_path": "src/firejail/sandbox.c",
  "func_name": "sandbox",
  "func_before": "int sandbox(void* sandbox_arg) {\n\t// Get rid of unused parameter warning\n\t(void)sandbox_arg;\n\n\tpid_t child_pid = getpid();\n\tif (arg_debug)\n\t\tprintf(\"Initializing child process\\n\");\n\n \t// close each end of the unused pipes\n \tclose(parent_to_child_fds[1]);\n \tclose(child_to_parent_fds[0]);\n\n \t// wait for parent to do base setup\n \twait_for_other(parent_to_child_fds[0]);\n\n\tif (arg_debug && child_pid == 1)\n\t\tprintf(\"PID namespace installed\\n\");\n\n\n\t//****************************\n\t// set hostname\n\t//****************************\n\tif (cfg.hostname) {\n\t\tif (sethostname(cfg.hostname, strlen(cfg.hostname)) < 0)\n\t\t\terrExit(\"sethostname\");\n\t}\n\n\t//****************************\n\t// mount namespace\n\t//****************************\n\t// mount events are not forwarded between the host the sandbox\n\tif (mount(NULL, \"/\", NULL, MS_SLAVE | MS_REC, NULL) < 0) {\n\t\tchk_chroot();\n\t}\n\t// ... and mount a tmpfs on top of /run/firejail/mnt directory\n\tpreproc_mount_mnt_dir();\n\t// bind-mount firejail binaries and helper programs\n\tif (mount(LIBDIR \"/firejail\", RUN_FIREJAIL_LIB_DIR, \"none\", MS_BIND, NULL) < 0)\n\t\terrExit(\"mounting \" RUN_FIREJAIL_LIB_DIR);\n\n\t//****************************\n\t// log sandbox data\n\t//****************************\n\tif (cfg.name)\n\t\tfs_logger2(\"sandbox name:\", cfg.name);\n\tfs_logger2int(\"sandbox pid:\", (int) sandbox_pid);\n\tif (cfg.chrootdir)\n\t\tfs_logger(\"sandbox filesystem: chroot\");\n\telse if (arg_overlay)\n\t\tfs_logger(\"sandbox filesystem: overlay\");\n\telse\n\t\tfs_logger(\"sandbox filesystem: local\");\n\tfs_logger(\"install mount namespace\");\n\n\t//****************************\n\t// netfilter\n\t//****************************\n\tif (arg_netfilter && any_bridge_configured()) { // assuming by default the client filter\n\t\tnetfilter(arg_netfilter_file);\n\t}\n\tif (arg_netfilter6 && any_bridge_configured()) { // assuming by default the client filter\n\t\tnetfilter6(arg_netfilter6_file);\n\t}\n\n\t//****************************\n\t// networking\n\t//****************************\n\tint gw_cfg_failed = 0; // default gw configuration flag\n\tif (arg_nonetwork) {\n\t\tnet_if_up(\"lo\");\n\t\tif (arg_debug)\n\t\t\tprintf(\"Network namespace enabled, only loopback interface available\\n\");\n\t}\n\telse if (arg_netns) {\n\t\tnetns(arg_netns);\n\t\tif (arg_debug)\n\t\t\tprintf(\"Network namespace '%s' activated\\n\", arg_netns);\n\t}\n\telse if (any_bridge_configured() || any_interface_configured()) {\n\t\t// configure lo and eth0...eth3\n\t\tnet_if_up(\"lo\");\n\n\t\tif (mac_not_zero(cfg.bridge0.macsandbox))\n\t\t\tnet_config_mac(cfg.bridge0.devsandbox, cfg.bridge0.macsandbox);\n\t\tsandbox_if_up(&cfg.bridge0);\n\n\t\tif (mac_not_zero(cfg.bridge1.macsandbox))\n\t\t\tnet_config_mac(cfg.bridge1.devsandbox, cfg.bridge1.macsandbox);\n\t\tsandbox_if_up(&cfg.bridge1);\n\n\t\tif (mac_not_zero(cfg.bridge2.macsandbox))\n\t\t\tnet_config_mac(cfg.bridge2.devsandbox, cfg.bridge2.macsandbox);\n\t\tsandbox_if_up(&cfg.bridge2);\n\n\t\tif (mac_not_zero(cfg.bridge3.macsandbox))\n\t\t\tnet_config_mac(cfg.bridge3.devsandbox, cfg.bridge3.macsandbox);\n\t\tsandbox_if_up(&cfg.bridge3);\n\n\n\t\t// moving an interface in a namespace using --interface will reset the interface configuration;\n\t\t// we need to put the configuration back\n\t\tif (cfg.interface0.configured && cfg.interface0.ip) {\n\t\t\tif (arg_debug)\n\t\t\t\tprintf(\"Configuring %d.%d.%d.%d address on interface %s\\n\", PRINT_IP(cfg.interface0.ip), cfg.interface0.dev);\n\t\t\tnet_config_interface(cfg.interface0.dev, cfg.interface0.ip, cfg.interface0.mask, cfg.interface0.mtu);\n\t\t}\n\t\tif (cfg.interface1.configured && cfg.interface1.ip) {\n\t\t\tif (arg_debug)\n\t\t\t\tprintf(\"Configuring %d.%d.%d.%d address on interface %s\\n\", PRINT_IP(cfg.interface1.ip), cfg.interface1.dev);\n\t\t\tnet_config_interface(cfg.interface1.dev, cfg.interface1.ip, cfg.interface1.mask, cfg.interface1.mtu);\n\t\t}\n\t\tif (cfg.interface2.configured && cfg.interface2.ip) {\n\t\t\tif (arg_debug)\n\t\t\t\tprintf(\"Configuring %d.%d.%d.%d address on interface %s\\n\", PRINT_IP(cfg.interface2.ip), cfg.interface2.dev);\n\t\t\tnet_config_interface(cfg.interface2.dev, cfg.interface2.ip, cfg.interface2.mask, cfg.interface2.mtu);\n\t\t}\n\t\tif (cfg.interface3.configured && cfg.interface3.ip) {\n\t\t\tif (arg_debug)\n\t\t\t\tprintf(\"Configuring %d.%d.%d.%d address on interface %s\\n\", PRINT_IP(cfg.interface3.ip), cfg.interface3.dev);\n\t\t\tnet_config_interface(cfg.interface3.dev, cfg.interface3.ip, cfg.interface3.mask, cfg.interface3.mtu);\n\t\t}\n\n\t\t// add a default route\n\t\tif (cfg.defaultgw) {\n\t\t\t// set the default route\n\t\t\tif (net_add_route(0, 0, cfg.defaultgw)) {\n\t\t\t\tfwarning(\"cannot configure default route\\n\");\n\t\t\t\tgw_cfg_failed = 1;\n\t\t\t}\n\t\t}\n\n\t\tif (arg_debug)\n\t\t\tprintf(\"Network namespace enabled\\n\");\n\t}\n\n\t// print network configuration\n\tif (!arg_quiet) {\n\t\tif (any_bridge_configured() || any_interface_configured() || cfg.defaultgw || cfg.dns1) {\n\t\t\tfmessage(\"\\n\");\n\t\t\tif (any_bridge_configured() || any_interface_configured()) {\n\t\t\t\tif (arg_scan)\n\t\t\t\t\tsbox_run(SBOX_ROOT | SBOX_CAPS_NETWORK | SBOX_SECCOMP, 3, PATH_FNET, \"printif\", \"scan\");\n\t\t\t\telse\n\t\t\t\t\tsbox_run(SBOX_ROOT | SBOX_CAPS_NETWORK | SBOX_SECCOMP, 2, PATH_FNET, \"printif\");\n\n\t\t\t}\n\t\t\tif (cfg.defaultgw != 0) {\n\t\t\t\tif (gw_cfg_failed)\n\t\t\t\t\tfmessage(\"Default gateway configuration failed\\n\");\n\t\t\t\telse\n\t\t\t\t\tfmessage(\"Default gateway %d.%d.%d.%d\\n\", PRINT_IP(cfg.defaultgw));\n\t\t\t}\n\t\t\tif (cfg.dns1 != NULL)\n\t\t\t\tfmessage(\"DNS server %s\\n\", cfg.dns1);\n\t\t\tif (cfg.dns2 != NULL)\n\t\t\t\tfmessage(\"DNS server %s\\n\", cfg.dns2);\n\t\t\tif (cfg.dns3 != NULL)\n\t\t\t\tfmessage(\"DNS server %s\\n\", cfg.dns3);\n\t\t\tif (cfg.dns4 != NULL)\n\t\t\t\tfmessage(\"DNS server %s\\n\", cfg.dns4);\n\t\t\tfmessage(\"\\n\");\n\t\t}\n\t}\n\n\t// load IBUS env variables\n\tif (arg_nonetwork || any_bridge_configured() || any_interface_configured()) {\n\t\t// do nothing - there are problems with ibus version 1.5.11\n\t}\n\telse {\n\t\tEUID_USER();\n\t\tenv_ibus_load();\n\t\tEUID_ROOT();\n\t}\n\n\t//****************************\n\t// fs pre-processing:\n\t//  - build seccomp filters\n\t//  - create an empty /etc/ld.so.preload\n\t//****************************\n#ifdef HAVE_SECCOMP\n\tif (cfg.protocol) {\n\t\tif (arg_debug)\n\t\t\tprintf(\"Build protocol filter: %s\\n\", cfg.protocol);\n\n\t\t// build the seccomp filter as a regular user\n\t\tint rv = sbox_run(SBOX_USER | SBOX_CAPS_NONE | SBOX_SECCOMP, 5,\n\t\t\tPATH_FSECCOMP, \"protocol\", \"build\", cfg.protocol, RUN_SECCOMP_PROTOCOL);\n\t\tif (rv)\n\t\t\texit(rv);\n\t}\n\tif (arg_seccomp && (cfg.seccomp_list || cfg.seccomp_list_drop || cfg.seccomp_list_keep))\n\t\targ_seccomp_postexec = 1;\n#endif\n\n\t// need ld.so.preload if tracing or seccomp with any non-default lists\n\tbool need_preload = arg_trace || arg_tracelog || arg_seccomp_postexec;\n\t// for --appimage, --chroot and --overlay* we force NO_NEW_PRIVS\n\t// and drop all capabilities\n\tif (getuid() != 0 && (arg_appimage || cfg.chrootdir || arg_overlay)) {\n\t\tenforce_filters();\n\t\tneed_preload = arg_trace || arg_tracelog;\n\t}\n\n\t// trace pre-install\n\tif (need_preload)\n\t\tfs_trace_preload();\n\n\t// store hosts file\n\tif (cfg.hosts_file)\n\t\tfs_store_hosts_file();\n\n\t//****************************\n\t// configure filesystem\n\t//****************************\n#ifdef HAVE_CHROOT\n\tif (cfg.chrootdir) {\n\t\tfs_chroot(cfg.chrootdir);\n\n\t\t//****************************\n\t\t// trace pre-install, this time inside chroot\n\t\t//****************************\n\t\tif (need_preload)\n\t\t\tfs_trace_preload();\n\t}\n\telse\n#endif\n#ifdef HAVE_OVERLAYFS\n\tif (arg_overlay)\n\t\tfs_overlayfs();\n\telse\n#endif\n\t\tfs_basic_fs();\n\n\t//****************************\n\t// private mode\n\t//****************************\n\tif (arg_private) {\n\t\tif (cfg.home_private) {\t// --private=\n\t\t\tif (cfg.chrootdir)\n\t\t\t\tfwarning(\"private=directory feature is disabled in chroot\\n\");\n\t\t\telse if (arg_overlay)\n\t\t\t\tfwarning(\"private=directory feature is disabled in overlay\\n\");\n\t\t\telse\n\t\t\t\tfs_private_homedir();\n\t\t}\n\t\telse if (cfg.home_private_keep) { // --private-home=\n\t\t\tif (cfg.chrootdir)\n\t\t\t\tfwarning(\"private-home= feature is disabled in chroot\\n\");\n\t\t\telse if (arg_overlay)\n\t\t\t\tfwarning(\"private-home= feature is disabled in overlay\\n\");\n\t\t\telse\n\t\t\t\tfs_private_home_list();\n\t\t}\n\t\telse // --private\n\t\t\tfs_private();\n\t}\n\n\tif (arg_private_dev)\n\t\tfs_private_dev();\n\n\tif (arg_private_etc) {\n\t\tif (cfg.chrootdir)\n\t\t\tfwarning(\"private-etc feature is disabled in chroot\\n\");\n\t\telse if (arg_overlay)\n\t\t\tfwarning(\"private-etc feature is disabled in overlay\\n\");\n\t\telse {\n\t\t\tfs_private_dir_list(\"/etc\", RUN_ETC_DIR, cfg.etc_private_keep);\n\t\t\t// create /etc/ld.so.preload file again\n\t\t\tif (need_preload)\n\t\t\t\tfs_trace_preload();\n\t\t}\n\t}\n\n\tif (arg_private_opt) {\n\t\tif (cfg.chrootdir)\n\t\t\tfwarning(\"private-opt feature is disabled in chroot\\n\");\n\t\telse if (arg_overlay)\n\t\t\tfwarning(\"private-opt feature is disabled in overlay\\n\");\n\t\telse {\n\t\t\tfs_private_dir_list(\"/opt\", RUN_OPT_DIR, cfg.opt_private_keep);\n\t\t}\n\t}\n\n\tif (arg_private_srv) {\n\t\tif (cfg.chrootdir)\n\t\t\tfwarning(\"private-srv feature is disabled in chroot\\n\");\n\t\telse if (arg_overlay)\n\t\t\tfwarning(\"private-srv feature is disabled in overlay\\n\");\n\t\telse {\n\t\t\tfs_private_dir_list(\"/srv\", RUN_SRV_DIR, cfg.srv_private_keep);\n\t\t}\n\t}\n\n\t// private-bin is disabled for appimages\n\tif (arg_private_bin && !arg_appimage) {\n\t\tif (cfg.chrootdir)\n\t\t\tfwarning(\"private-bin feature is disabled in chroot\\n\");\n\t\telse if (arg_overlay)\n\t\t\tfwarning(\"private-bin feature is disabled in overlay\\n\");\n\t\telse {\n\t\t\t// for --x11=xorg we need to add xauth command\n\t\t\tif (arg_x11_xorg) {\n\t\t\t\tEUID_USER();\n\t\t\t\tchar *tmp;\n\t\t\t\tif (asprintf(&tmp, \"%s,xauth\", cfg.bin_private_keep) == -1)\n\t\t\t\t\terrExit(\"asprintf\");\n\t\t\t\tcfg.bin_private_keep = tmp;\n\t\t\t\tEUID_ROOT();\n\t\t\t}\n\t\t\tfs_private_bin_list();\n\t\t}\n\t}\n\n\t// private-lib is disabled for appimages\n\tif (arg_private_lib && !arg_appimage) {\n\t\tif (cfg.chrootdir)\n\t\t\tfwarning(\"private-lib feature is disabled in chroot\\n\");\n\t\telse if (arg_overlay)\n\t\t\tfwarning(\"private-lib feature is disabled in overlay\\n\");\n\t\telse {\n\t\t\tfs_private_lib();\n\t\t}\n\t}\n\n\tif (arg_private_cache) {\n\t\tif (cfg.chrootdir)\n\t\t\tfwarning(\"private-cache feature is disabled in chroot\\n\");\n\t\telse if (arg_overlay)\n\t\t\tfwarning(\"private-cache feature is disabled in overlay\\n\");\n\t\telse\n\t\t\tfs_private_cache();\n\t}\n\n\tif (arg_private_tmp) {\n\t\t// private-tmp is implemented as a whitelist\n\t\tEUID_USER();\n\t\tfs_private_tmp();\n\t\tEUID_ROOT();\n\t}\n\n\t//****************************\n\t// Session D-BUS\n\t//****************************\n\tif (arg_nodbus)\n\t\tdbus_session_disable();\n\n\n\t//****************************\n\t// hosts and hostname\n\t//****************************\n\tif (cfg.hostname)\n\t\tfs_hostname(cfg.hostname);\n\n\tif (cfg.hosts_file)\n\t\tfs_mount_hosts_file();\n\n\t//****************************\n\t// /etc overrides from the network namespace\n\t//****************************\n\tif (arg_netns)\n\t\tnetns_mounts(arg_netns);\n\n\t//****************************\n\t// update /proc, /sys, /dev, /boot directory\n\t//****************************\n\tfs_proc_sys_dev_boot();\n\n\t//****************************\n\t// handle /mnt and /media\n\t//****************************\n\tif (checkcfg(CFG_DISABLE_MNT))\n\t\tfs_mnt(1);\n\telse if (arg_disable_mnt)\n\t\tfs_mnt(0);\n\n\t//****************************\n\t// apply the profile file\n\t//****************************\n\t// apply all whitelist commands ...\n\tfs_whitelist();\n\n\t// ... followed by blacklist commands\n\tfs_blacklist(); // mkdir and mkfile are processed all over again\n\n\t//****************************\n\t// nosound/no3d/notv/novideo and fix for pulseaudio 7.0\n\t//****************************\n\tif (arg_nosound) {\n\t\t// disable pulseaudio\n\t\tpulseaudio_disable();\n\n\t\t// disable /dev/snd\n\t\tfs_dev_disable_sound();\n\t}\n\telse if (!arg_noautopulse)\n\t\tpulseaudio_init();\n\n\tif (arg_no3d)\n\t\tfs_dev_disable_3d();\n\n\tif (arg_notv)\n\t\tfs_dev_disable_tv();\n\n\tif (arg_nodvd)\n\t\tfs_dev_disable_dvd();\n\n\tif (arg_nou2f)\n\t        fs_dev_disable_u2f();\n\n\tif (arg_novideo)\n\t\tfs_dev_disable_video();\n\n\t//****************************\n\t// install trace\n\t//****************************\n\tif (need_preload)\n\t\tfs_trace();\n\n\t//****************************\n\t// set dns\n\t//****************************\n\tfs_resolvconf();\n\n\t//****************************\n\t// fs post-processing\n\t//****************************\n\tfs_logger_print();\n\tfs_logger_change_owner();\n\n\t//****************************\n\t// set application environment\n\t//****************************\n\tEUID_USER();\n\tint cwd = 0;\n\tif (cfg.cwd) {\n\t\tif (chdir(cfg.cwd) == 0)\n\t\t\tcwd = 1;\n\t}\n\n\tif (!cwd) {\n\t\tif (chdir(\"/\") < 0)\n\t\t\terrExit(\"chdir\");\n\t\tif (cfg.homedir) {\n\t\t\tstruct stat s;\n\t\t\tif (stat(cfg.homedir, &s) == 0) {\n\t\t\t\t/* coverity[toctou] */\n\t\t\t\tif (chdir(cfg.homedir) < 0)\n\t\t\t\t\terrExit(\"chdir\");\n\t\t\t}\n\t\t}\n\t}\n\tif (arg_debug) {\n\t\tchar *cpath = get_current_dir_name();\n\t\tif (cpath) {\n\t\t\tprintf(\"Current directory: %s\\n\", cpath);\n\t\t\tfree(cpath);\n\t\t}\n\t}\n\n\tEUID_ROOT();\n\t// clean /tmp/.X11-unix sockets\n\tfs_x11();\n\tif (arg_x11_xorg)\n\t\tx11_xorg();\n\n\t// save original umask\n\tsave_umask();\n\n\t//****************************\n\t// set security filters\n\t//****************************\n\t// save state of nonewprivs\n\tsave_nonewprivs();\n\n\t// set capabilities\n\tset_caps();\n\n\t// save cpu affinity mask to CPU_CFG file\n\tsave_cpu();\n\n\t// save cgroup in CGROUP_CFG file\n\tsave_cgroup();\n\n\t// set seccomp\n#ifdef HAVE_SECCOMP\n\t// install protocol filter\n#ifdef SYS_socket\n\tif (cfg.protocol) {\n\t\tif (arg_debug)\n\t\t\tprintf(\"Install protocol filter: %s\\n\", cfg.protocol);\n\t\tseccomp_load(RUN_SECCOMP_PROTOCOL);\t// install filter\n\t\tprotocol_filter_save();\t// save filter in RUN_PROTOCOL_CFG\n\t}\n\telse {\n\t\tint rv = unlink(RUN_SECCOMP_PROTOCOL);\n\t\t(void) rv;\n\t}\n#endif\n\n\t// if a keep list is available, disregard the drop list\n\tif (arg_seccomp == 1) {\n\t\tif (cfg.seccomp_list_keep)\n\t\t\tseccomp_filter_keep();\n\t\telse\n\t\t\tseccomp_filter_drop();\n\n\t}\n\telse { // clean seccomp files under /run/firejail/mnt\n\t\tint rv = unlink(RUN_SECCOMP_CFG);\n\t\trv |= unlink(RUN_SECCOMP_32);\n\t\t(void) rv;\n\t}\n\n\tif (arg_memory_deny_write_execute) {\n\t\tif (arg_debug)\n\t\t\tprintf(\"Install memory write&execute filter\\n\");\n\t\tseccomp_load(RUN_SECCOMP_MDWX);\t// install filter\n\t}\n\telse {\n\t\tint rv = unlink(RUN_SECCOMP_MDWX);\n\t\t(void) rv;\n\t}\n#endif\n\n\t//****************************************\n\t// communicate progress of sandbox set up\n\t// to --join\n\t//****************************************\n\n\tFILE *rj = create_ready_for_join_file();\n\n\t//****************************************\n\t// create a new user namespace\n\t//     - too early to drop privileges\n\t//****************************************\n\tsave_nogroups();\n\tif (arg_noroot) {\n\t\tint rv = unshare(CLONE_NEWUSER);\n\t\tif (rv == -1) {\n\t\t\tfwarning(\"cannot create a new user namespace, going forward without it...\\n\");\n\t\t\targ_noroot = 0;\n\t\t}\n\t}\n\n\t// notify parent that new user namespace has been created so a proper\n \t// UID/GID map can be setup\n \tnotify_other(child_to_parent_fds[1]);\n \tclose(child_to_parent_fds[1]);\n\n \t// wait for parent to finish setting up a proper UID/GID map\n \twait_for_other(parent_to_child_fds[0]);\n \tclose(parent_to_child_fds[0]);\n\n\t// somehow, the new user namespace resets capabilities;\n\t// we need to do them again\n\tif (arg_noroot) {\n\t\tif (arg_debug)\n\t\t\tprintf(\"noroot user namespace installed\\n\");\n\t\tset_caps();\n\t}\n\n\t//****************************************\n\t// Set NO_NEW_PRIVS if desired\n\t//****************************************\n\tif (arg_nonewprivs) {\n\t\tprctl(PR_SET_NO_NEW_PRIVS, 1, 0, 0, 0);\n\n\t\tif (prctl(PR_GET_NO_NEW_PRIVS, 0, 0, 0, 0) != 1) {\n\t\t\tfwarning(\"cannot set NO_NEW_PRIVS, it requires a Linux kernel version 3.5 or newer.\\n\");\n\t\t\tif (force_nonewprivs) {\n\t\t\t\tfprintf(stderr, \"Error: NO_NEW_PRIVS required for this sandbox, exiting ...\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t}\n\t\telse if (arg_debug)\n\t\t\tprintf(\"NO_NEW_PRIVS set\\n\");\n\t}\n\n\t//****************************************\n\t// drop privileges\n\t//****************************************\n\tdrop_privs(arg_nogroups);\n\n\t// kill the sandbox in case the parent died\n\tprctl(PR_SET_PDEATHSIG, SIGKILL, 0, 0, 0);\n\n\t//****************************************\n\t// set cpu affinity\n\t//****************************************\n\n\tif (cfg.cpus)\n\t\tset_cpu_affinity();\n\n\t//****************************************\n\t// fork the application and monitor it\n\t//****************************************\n\tpid_t app_pid = fork();\n\tif (app_pid == -1)\n\t\terrExit(\"fork\");\n\n\tif (app_pid == 0) {\n#ifdef HAVE_APPARMOR\n\t\tif (checkcfg(CFG_APPARMOR) && arg_apparmor) {\n\t\t\terrno = 0;\n\t\t\tif (aa_change_onexec(\"firejail-default\")) {\n\t\t\t\tfwarning(\"Cannot confine the application using AppArmor.\\n\"\n\t\t\t\t\t\"Maybe firejail-default AppArmor profile is not loaded into the kernel.\\n\"\n\t\t\t\t\t\"As root, run \\\"aa-enforce firejail-default\\\" to load it.\\n\");\n\t\t\t}\n\t\t\telse if (arg_debug)\n\t\t\t\tprintf(\"AppArmor enabled\\n\");\n\t\t}\n#endif\n\t\t// set nice and rlimits\n\t\tif (arg_nice)\n\t\t\tset_nice(cfg.nice);\n\t\tset_rlimits();\n\n\t\tstart_application(0, rj);\n\t}\n\n\tfclose(rj);\n\n\tint status = monitor_application(app_pid);\t// monitor application\n\tflush_stdin();\n\n\tif (WIFEXITED(status)) {\n\t\t// if we had a proper exit, return that exit status\n\t\treturn WEXITSTATUS(status);\n\t} else {\n\t\t// something else went wrong!\n\t\treturn -1;\n\t}\n}",
  "abstract_func_before": "int sandbox(void* VAR_0) {\n\t/* COMMENT_0 */\n\t(void)VAR_0;\n\n\tpid_t VAR_1 = getpid();\n\tif (VAR_2)\n\t\tprintf(\"Initializing child process\\n\");\n\n \t/* COMMENT_1 */\n \tclose(VAR_3[1]);\n \tclose(VAR_4[0]);\n\n \t/* COMMENT_2 */\n \twait_for_other(VAR_3[0]);\n\n\tif (VAR_2 && VAR_1 == 1)\n\t\tprintf(\"PID namespace installed\\n\");\n\n\n\t/* COMMENT_3 */\n\t/* COMMENT_4 */\n\t/* COMMENT_3 */\n\tif (VAR_5.hostname) {\n\t\tif (sethostname(VAR_5.hostname, strlen(VAR_5.hostname)) < 0)\n\t\t\terrExit(\"sethostname\");\n\t}\n\n\t/* COMMENT_3 */\n\t/* COMMENT_5 */\n\t/* COMMENT_3 */\n\t/* COMMENT_6 */\n\tif (mount(NULL, \"/\", NULL, VAR_6 | VAR_7, NULL) < 0) {\n\t\tchk_chroot();\n\t}\n\t/* COMMENT_7 */\n\tpreproc_mount_mnt_dir();\n\t/* COMMENT_8 */\n\tif (mount(VAR_8 \"/firejail\", VAR_9, \"none\", VAR_10, NULL) < 0)\n\t\terrExit(\"mounting \" VAR_9);\n\n\t/* COMMENT_3 */\n\t/* COMMENT_9 */\n\t/* COMMENT_3 */\n\tif (VAR_5.name)\n\t\tfs_logger2(\"sandbox name:\", VAR_5.name);\n\tfs_logger2int(\"sandbox pid:\", (int) VAR_11);\n\tif (VAR_5.chrootdir)\n\t\tfs_logger(\"sandbox filesystem: chroot\");\n\telse if (VAR_12)\n\t\tfs_logger(\"sandbox filesystem: overlay\");\n\telse\n\t\tfs_logger(\"sandbox filesystem: local\");\n\tfs_logger(\"install mount namespace\");\n\n\t/* COMMENT_3 */\n\t/* COMMENT_10 */\n\t/* COMMENT_3 */\n\tif (VAR_13 && any_bridge_configured()) { /* COMMENT_11 */\n\t\tnetfilter(VAR_14);\n\t}\n\tif (VAR_15 && any_bridge_configured()) { /* COMMENT_11 */\n\t\tnetfilter6(VAR_16);\n\t}\n\n\t/* COMMENT_3 */\n\t/* COMMENT_12 */\n\t/* COMMENT_3 */\n\tint VAR_17 = 0; /* COMMENT_13 */\n\tif (VAR_18) {\n\t\tnet_if_up(\"lo\");\n\t\tif (VAR_2)\n\t\t\tprintf(\"Network namespace enabled, only loopback interface available\\n\");\n\t}\n\telse if (VAR_19) {\n\t\tnetns(VAR_19);\n\t\tif (VAR_2)\n\t\t\tprintf(\"Network namespace '%s' activated\\n\", VAR_19);\n\t}\n\telse if (any_bridge_configured() || any_interface_configured()) {\n\t\t/* COMMENT_14 */\n\t\tnet_if_up(\"lo\");\n\n\t\tif (mac_not_zero(VAR_5.bridge0.macsandbox))\n\t\t\tnet_config_mac(VAR_5.bridge0.devsandbox, VAR_5.bridge0.macsandbox);\n\t\tsandbox_if_up(&VAR_5.bridge0);\n\n\t\tif (mac_not_zero(VAR_5.bridge1.macsandbox))\n\t\t\tnet_config_mac(VAR_5.bridge1.devsandbox, VAR_5.bridge1.macsandbox);\n\t\tsandbox_if_up(&VAR_5.bridge1);\n\n\t\tif (mac_not_zero(VAR_5.bridge2.macsandbox))\n\t\t\tnet_config_mac(VAR_5.bridge2.devsandbox, VAR_5.bridge2.macsandbox);\n\t\tsandbox_if_up(&VAR_5.bridge2);\n\n\t\tif (mac_not_zero(VAR_5.bridge3.macsandbox))\n\t\t\tnet_config_mac(VAR_5.bridge3.devsandbox, VAR_5.bridge3.macsandbox);\n\t\tsandbox_if_up(&VAR_5.bridge3);\n\n\n\t\t/* COMMENT_15 */\n\t\t/* COMMENT_16 */\n\t\tif (VAR_5.interface0.configured && VAR_5.interface0.ip) {\n\t\t\tif (VAR_2)\n\t\t\t\tprintf(\"Configuring %d.%d.%d.%d address on interface %s\\n\", PRINT_IP(VAR_5.interface0.ip), VAR_5.interface0.dev);\n\t\t\tnet_config_interface(VAR_5.interface0.dev, VAR_5.interface0.ip, VAR_5.interface0.mask, VAR_5.interface0.mtu);\n\t\t}\n\t\tif (VAR_5.interface1.configured && VAR_5.interface1.ip) {\n\t\t\tif (VAR_2)\n\t\t\t\tprintf(\"Configuring %d.%d.%d.%d address on interface %s\\n\", PRINT_IP(VAR_5.interface1.ip), VAR_5.interface1.dev);\n\t\t\tnet_config_interface(VAR_5.interface1.dev, VAR_5.interface1.ip, VAR_5.interface1.mask, VAR_5.interface1.mtu);\n\t\t}\n\t\tif (VAR_5.interface2.configured && VAR_5.interface2.ip) {\n\t\t\tif (VAR_2)\n\t\t\t\tprintf(\"Configuring %d.%d.%d.%d address on interface %s\\n\", PRINT_IP(VAR_5.interface2.ip), VAR_5.interface2.dev);\n\t\t\tnet_config_interface(VAR_5.interface2.dev, VAR_5.interface2.ip, VAR_5.interface2.mask, VAR_5.interface2.mtu);\n\t\t}\n\t\tif (VAR_5.interface3.configured && VAR_5.interface3.ip) {\n\t\t\tif (VAR_2)\n\t\t\t\tprintf(\"Configuring %d.%d.%d.%d address on interface %s\\n\", PRINT_IP(VAR_5.interface3.ip), VAR_5.interface3.dev);\n\t\t\tnet_config_interface(VAR_5.interface3.dev, VAR_5.interface3.ip, VAR_5.interface3.mask, VAR_5.interface3.mtu);\n\t\t}\n\n\t\t/* COMMENT_17 */\n\t\tif (VAR_5.defaultgw) {\n\t\t\t/* COMMENT_18 */\n\t\t\tif (net_add_route(0, 0, VAR_5.defaultgw)) {\n\t\t\t\tfwarning(\"cannot configure default route\\n\");\n\t\t\t\tVAR_17 = 1;\n\t\t\t}\n\t\t}\n\n\t\tif (VAR_2)\n\t\t\tprintf(\"Network namespace enabled\\n\");\n\t}\n\n\t/* COMMENT_19 */\n\tif (!VAR_20) {\n\t\tif (any_bridge_configured() || any_interface_configured() || VAR_5.defaultgw || VAR_5.dns1) {\n\t\t\tfmessage(\"\\n\");\n\t\t\tif (any_bridge_configured() || any_interface_configured()) {\n\t\t\t\tif (VAR_21)\n\t\t\t\t\tsbox_run(VAR_22 | VAR_23 | VAR_24, 3, VAR_25, \"printif\", \"scan\");\n\t\t\t\telse\n\t\t\t\t\tsbox_run(VAR_22 | VAR_23 | VAR_24, 2, VAR_25, \"printif\");\n\n\t\t\t}\n\t\t\tif (VAR_5.defaultgw != 0) {\n\t\t\t\tif (VAR_17)\n\t\t\t\t\tfmessage(\"Default gateway configuration failed\\n\");\n\t\t\t\telse\n\t\t\t\t\tfmessage(\"Default gateway %d.%d.%d.%d\\n\", PRINT_IP(VAR_5.defaultgw));\n\t\t\t}\n\t\t\tif (VAR_5.dns1 != NULL)\n\t\t\t\tfmessage(\"DNS server %s\\n\", VAR_5.dns1);\n\t\t\tif (VAR_5.dns2 != NULL)\n\t\t\t\tfmessage(\"DNS server %s\\n\", VAR_5.dns2);\n\t\t\tif (VAR_5.dns3 != NULL)\n\t\t\t\tfmessage(\"DNS server %s\\n\", VAR_5.dns3);\n\t\t\tif (VAR_5.dns4 != NULL)\n\t\t\t\tfmessage(\"DNS server %s\\n\", VAR_5.dns4);\n\t\t\tfmessage(\"\\n\");\n\t\t}\n\t}\n\n\t/* COMMENT_20 */\n\tif (VAR_18 || any_bridge_configured() || any_interface_configured()) {\n\t\t/* COMMENT_21 */\n\t}\n\telse {\n\t\tEUID_USER();\n\t\tenv_ibus_load();\n\t\tEUID_ROOT();\n\t}\n\n\t/* COMMENT_3 */\n\t/* COMMENT_22 */\n\t/* COMMENT_23 */\n\t/* COMMENT_24 */\n\t/* COMMENT_3 */\n#ifdef VAR_26\n\tif (VAR_5.protocol) {\n\t\tif (VAR_2)\n\t\t\tprintf(\"Build protocol filter: %s\\n\", VAR_5.protocol);\n\n\t\t/* COMMENT_25 */\n\t\tint VAR_27 = sbox_run(VAR_28 | VAR_29 | VAR_24, 5,\n\t\t\tVAR_30, \"protocol\", \"build\", VAR_5.protocol, VAR_31);\n\t\tif (VAR_27)\n\t\t\texit(VAR_27);\n\t}\n\tif (VAR_32 && (VAR_5.seccomp_list || VAR_5.seccomp_list_drop || VAR_5.seccomp_list_keep))\n\t\tVAR_33 = 1;\n#endif\n\n\t/* COMMENT_26 */\n\tbool VAR_34 = VAR_35 || VAR_36 || VAR_33;\n\t/* COMMENT_27 */\n\t/* COMMENT_28 */\n\tif (getuid() != 0 && (VAR_37 || VAR_5.chrootdir || VAR_12)) {\n\t\tenforce_filters();\n\t\tVAR_34 = VAR_35 || VAR_36;\n\t}\n\n\t/* COMMENT_29 */\n\tif (VAR_34)\n\t\tfs_trace_preload();\n\n\t/* COMMENT_30 */\n\tif (VAR_5.hosts_file)\n\t\tfs_store_hosts_file();\n\n\t/* COMMENT_3 */\n\t/* COMMENT_31 */\n\t/* COMMENT_3 */\n#ifdef VAR_38\n\tif (VAR_5.chrootdir) {\n\t\tfs_chroot(VAR_5.chrootdir);\n\n\t\t/* COMMENT_3 */\n\t\t/* COMMENT_32 */\n\t\t/* COMMENT_3 */\n\t\tif (VAR_34)\n\t\t\tfs_trace_preload();\n\t}\n\telse\n#endif\n#ifdef VAR_39\n\tif (VAR_12)\n\t\tfs_overlayfs();\n\telse\n#endif\n\t\tfs_basic_fs();\n\n\t/* COMMENT_3 */\n\t/* COMMENT_33 */\n\t/* COMMENT_3 */\n\tif (VAR_40) {\n\t\tif (VAR_5.home_private) {\t/* COMMENT_34 */\n\t\t\tif (VAR_5.chrootdir)\n\t\t\t\tfwarning(\"private=directory feature is disabled in chroot\\n\");\n\t\t\telse if (VAR_12)\n\t\t\t\tfwarning(\"private=directory feature is disabled in overlay\\n\");\n\t\t\telse\n\t\t\t\tfs_private_homedir();\n\t\t}\n\t\telse if (VAR_5.home_private_keep) { /* COMMENT_35 */\n\t\t\tif (VAR_5.chrootdir)\n\t\t\t\tfwarning(\"private-home= feature is disabled in chroot\\n\");\n\t\t\telse if (VAR_12)\n\t\t\t\tfwarning(\"private-home= feature is disabled in overlay\\n\");\n\t\t\telse\n\t\t\t\tfs_private_home_list();\n\t\t}\n\t\telse /* COMMENT_36 */\n\t\t\tfs_private();\n\t}\n\n\tif (VAR_41)\n\t\tfs_private_dev();\n\n\tif (VAR_42) {\n\t\tif (VAR_5.chrootdir)\n\t\t\tfwarning(\"private-etc feature is disabled in chroot\\n\");\n\t\telse if (VAR_12)\n\t\t\tfwarning(\"private-etc feature is disabled in overlay\\n\");\n\t\telse {\n\t\t\tfs_private_dir_list(\"/etc\", VAR_43, VAR_5.etc_private_keep);\n\t\t\t/* COMMENT_37 */\n\t\t\tif (VAR_34)\n\t\t\t\tfs_trace_preload();\n\t\t}\n\t}\n\n\tif (VAR_44) {\n\t\tif (VAR_5.chrootdir)\n\t\t\tfwarning(\"private-opt feature is disabled in chroot\\n\");\n\t\telse if (VAR_12)\n\t\t\tfwarning(\"private-opt feature is disabled in overlay\\n\");\n\t\telse {\n\t\t\tfs_private_dir_list(\"/opt\", VAR_45, VAR_5.opt_private_keep);\n\t\t}\n\t}\n\n\tif (VAR_46) {\n\t\tif (VAR_5.chrootdir)\n\t\t\tfwarning(\"private-srv feature is disabled in chroot\\n\");\n\t\telse if (VAR_12)\n\t\t\tfwarning(\"private-srv feature is disabled in overlay\\n\");\n\t\telse {\n\t\t\tfs_private_dir_list(\"/srv\", VAR_47, VAR_5.srv_private_keep);\n\t\t}\n\t}\n\n\t/* COMMENT_38 */\n\tif (VAR_48 && !VAR_37) {\n\t\tif (VAR_5.chrootdir)\n\t\t\tfwarning(\"private-bin feature is disabled in chroot\\n\");\n\t\telse if (VAR_12)\n\t\t\tfwarning(\"private-bin feature is disabled in overlay\\n\");\n\t\telse {\n\t\t\t/* COMMENT_39 */\n\t\t\tif (VAR_49) {\n\t\t\t\tEUID_USER();\n\t\t\t\tchar *VAR_50;\n\t\t\t\tif (asprintf(&VAR_50, \"%s,xauth\", VAR_5.bin_private_keep) == -1)\n\t\t\t\t\terrExit(\"asprintf\");\n\t\t\t\tVAR_5.bin_private_keep = VAR_50;\n\t\t\t\tEUID_ROOT();\n\t\t\t}\n\t\t\tfs_private_bin_list();\n\t\t}\n\t}\n\n\t/* COMMENT_40 */\n\tif (VAR_51 && !VAR_37) {\n\t\tif (VAR_5.chrootdir)\n\t\t\tfwarning(\"private-lib feature is disabled in chroot\\n\");\n\t\telse if (VAR_12)\n\t\t\tfwarning(\"private-lib feature is disabled in overlay\\n\");\n\t\telse {\n\t\t\tfs_private_lib();\n\t\t}\n\t}\n\n\tif (VAR_52) {\n\t\tif (VAR_5.chrootdir)\n\t\t\tfwarning(\"private-cache feature is disabled in chroot\\n\");\n\t\telse if (VAR_12)\n\t\t\tfwarning(\"private-cache feature is disabled in overlay\\n\");\n\t\telse\n\t\t\tfs_private_cache();\n\t}\n\n\tif (VAR_53) {\n\t\t/* COMMENT_41 */\n\t\tEUID_USER();\n\t\tfs_private_tmp();\n\t\tEUID_ROOT();\n\t}\n\n\t/* COMMENT_3 */\n\t/* COMMENT_42 */\n\t/* COMMENT_3 */\n\tif (VAR_54)\n\t\tdbus_session_disable();\n\n\n\t/* COMMENT_3 */\n\t/* COMMENT_43 */\n\t/* COMMENT_3 */\n\tif (VAR_5.hostname)\n\t\tfs_hostname(VAR_5.hostname);\n\n\tif (VAR_5.hosts_file)\n\t\tfs_mount_hosts_file();\n\n\t/* COMMENT_3 */\n\t/* COMMENT_44 */\n\t/* COMMENT_3 */\n\tif (VAR_19)\n\t\tnetns_mounts(VAR_19);\n\n\t/* COMMENT_3 */\n\t/* COMMENT_45 */\n\t/* COMMENT_3 */\n\tfs_proc_sys_dev_boot();\n\n\t/* COMMENT_3 */\n\t/* COMMENT_46 */\n\t/* COMMENT_3 */\n\tif (checkcfg(VAR_55))\n\t\tfs_mnt(1);\n\telse if (VAR_56)\n\t\tfs_mnt(0);\n\n\t/* COMMENT_3 */\n\t/* COMMENT_47 */\n\t/* COMMENT_3 */\n\t/* COMMENT_48 */\n\tfs_whitelist();\n\n\t/* COMMENT_49 */\n\tfs_blacklist(); /* COMMENT_50 */\n\n\t/* COMMENT_3 */\n\t/* COMMENT_51 */\n\t/* COMMENT_3 */\n\tif (VAR_57) {\n\t\t/* COMMENT_52 */\n\t\tpulseaudio_disable();\n\n\t\t/* COMMENT_53 */\n\t\tfs_dev_disable_sound();\n\t}\n\telse if (!VAR_58)\n\t\tpulseaudio_init();\n\n\tif (VAR_59)\n\t\tfs_dev_disable_3d();\n\n\tif (VAR_60)\n\t\tfs_dev_disable_tv();\n\n\tif (VAR_61)\n\t\tfs_dev_disable_dvd();\n\n\tif (VAR_62)\n\t        fs_dev_disable_u2f();\n\n\tif (VAR_63)\n\t\tfs_dev_disable_video();\n\n\t/* COMMENT_3 */\n\t/* COMMENT_54 */\n\t/* COMMENT_3 */\n\tif (VAR_34)\n\t\tfs_trace();\n\n\t/* COMMENT_3 */\n\t/* COMMENT_55 */\n\t/* COMMENT_3 */\n\tfs_resolvconf();\n\n\t/* COMMENT_3 */\n\t/* COMMENT_56 */\n\t/* COMMENT_3 */\n\tfs_logger_print();\n\tfs_logger_change_owner();\n\n\t/* COMMENT_3 */\n\t/* COMMENT_57 */\n\t/* COMMENT_3 */\n\tEUID_USER();\n\tint VAR_64 = 0;\n\tif (VAR_5.cwd) {\n\t\tif (chdir(VAR_5.cwd) == 0)\n\t\t\tVAR_64 = 1;\n\t}\n\n\tif (!VAR_64) {\n\t\tif (chdir(\"/\") < 0)\n\t\t\terrExit(\"chdir\");\n\t\tif (VAR_5.homedir) {\n\t\t\tstruct stat VAR_65;\n\t\t\tif (stat(VAR_5.homedir, &VAR_65) == 0) {\n\t\t\t\t/* COMMENT_58 */\n\t\t\t\tif (chdir(VAR_5.homedir) < 0)\n\t\t\t\t\terrExit(\"chdir\");\n\t\t\t}\n\t\t}\n\t}\n\tif (VAR_2) {\n\t\tchar *VAR_66 = get_current_dir_name();\n\t\tif (VAR_66) {\n\t\t\tprintf(\"Current directory: %s\\n\", VAR_66);\n\t\t\tfree(VAR_66);\n\t\t}\n\t}\n\n\tEUID_ROOT();\n\t/* COMMENT_59 */\n\tfs_x11();\n\tif (VAR_49)\n\t\tx11_xorg();\n\n\t/* COMMENT_60 */\n\tsave_umask();\n\n\t/* COMMENT_3 */\n\t/* COMMENT_61 */\n\t/* COMMENT_3 */\n\t/* COMMENT_62 */\n\tsave_nonewprivs();\n\n\t/* COMMENT_63 */\n\tset_caps();\n\n\t/* COMMENT_64 */\n\tsave_cpu();\n\n\t/* COMMENT_65 */\n\tsave_cgroup();\n\n\t/* COMMENT_66 */\n#ifdef VAR_26\n\t/* COMMENT_67 */\n#ifdef VAR_67\n\tif (VAR_5.protocol) {\n\t\tif (VAR_2)\n\t\t\tprintf(\"Install protocol filter: %s\\n\", VAR_5.protocol);\n\t\tseccomp_load(VAR_31);\t/* COMMENT_68 */\n\t\tprotocol_filter_save();\t/* COMMENT_69 */\n\t}\n\telse {\n\t\tint VAR_27 = unlink(VAR_31);\n\t\t(void) VAR_27;\n\t}\n#endif\n\n\t/* COMMENT_70 */\n\tif (VAR_32 == 1) {\n\t\tif (VAR_5.seccomp_list_keep)\n\t\t\tseccomp_filter_keep();\n\t\telse\n\t\t\tseccomp_filter_drop();\n\n\t}\n\telse { /* COMMENT_71 */\n\t\tint VAR_27 = unlink(VAR_68);\n\t\tVAR_27 |= unlink(VAR_69);\n\t\t(void) VAR_27;\n\t}\n\n\tif (VAR_70) {\n\t\tif (VAR_2)\n\t\t\tprintf(\"Install memory write&execute filter\\n\");\n\t\tseccomp_load(VAR_71);\t/* COMMENT_68 */\n\t}\n\telse {\n\t\tint VAR_27 = unlink(VAR_71);\n\t\t(void) VAR_27;\n\t}\n#endif\n\n\t/* COMMENT_72 */\n\t/* COMMENT_73 */\n\t/* COMMENT_74 */\n\t/* COMMENT_72 */\n\n\tFILE *VAR_72 = create_ready_for_join_file();\n\n\t/* COMMENT_72 */\n\t/* COMMENT_75 */\n\t/* COMMENT_76 */\n\t/* COMMENT_72 */\n\tsave_nogroups();\n\tif (VAR_73) {\n\t\tint VAR_27 = unshare(VAR_74);\n\t\tif (VAR_27 == -1) {\n\t\t\tfwarning(\"cannot create a new user namespace, going forward without it...\\n\");\n\t\t\tVAR_73 = 0;\n\t\t}\n\t}\n\n\t/* COMMENT_77 */\n \t/* COMMENT_78 */\n \tnotify_other(VAR_4[1]);\n \tclose(VAR_4[1]);\n\n \t/* COMMENT_79 */\n \twait_for_other(VAR_3[0]);\n \tclose(VAR_3[0]);\n\n\t/* COMMENT_80 */\n\t/* COMMENT_81 */\n\tif (VAR_73) {\n\t\tif (VAR_2)\n\t\t\tprintf(\"noroot user namespace installed\\n\");\n\t\tset_caps();\n\t}\n\n\t/* COMMENT_72 */\n\t/* COMMENT_82 */\n\t/* COMMENT_72 */\n\tif (VAR_75) {\n\t\tprctl(VAR_76, 1, 0, 0, 0);\n\n\t\tif (prctl(VAR_77, 0, 0, 0, 0) != 1) {\n\t\t\tfwarning(\"cannot set NO_NEW_PRIVS, it requires a Linux kernel version 3.5 or newer.\\n\");\n\t\t\tif (VAR_78) {\n\t\t\t\tfprintf(VAR_79, \"Error: NO_NEW_PRIVS required for this sandbox, exiting ...\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t}\n\t\telse if (VAR_2)\n\t\t\tprintf(\"NO_NEW_PRIVS set\\n\");\n\t}\n\n\t/* COMMENT_72 */\n\t/* COMMENT_83 */\n\t/* COMMENT_72 */\n\tdrop_privs(VAR_80);\n\n\t/* COMMENT_84 */\n\tprctl(VAR_81, VAR_82, 0, 0, 0);\n\n\t/* COMMENT_72 */\n\t/* COMMENT_85 */\n\t/* COMMENT_72 */\n\n\tif (VAR_5.cpus)\n\t\tset_cpu_affinity();\n\n\t/* COMMENT_72 */\n\t/* COMMENT_86 */\n\t/* COMMENT_72 */\n\tpid_t VAR_83 = fork();\n\tif (VAR_83 == -1)\n\t\terrExit(\"fork\");\n\n\tif (VAR_83 == 0) {\n#ifdef VAR_84\n\t\tif (checkcfg(VAR_85) && VAR_86) {\n\t\t\tVAR_87 = 0;\n\t\t\tif (aa_change_onexec(\"firejail-default\")) {\n\t\t\t\tfwarning(\"Cannot confine the application using AppArmor.\\n\"\n\t\t\t\t\t\"Maybe firejail-default AppArmor profile is not loaded into the kernel.\\n\"\n\t\t\t\t\t\"As root, run \\\"aa-enforce firejail-default\\\" to load it.\\n\");\n\t\t\t}\n\t\t\telse if (VAR_2)\n\t\t\t\tprintf(\"AppArmor enabled\\n\");\n\t\t}\n#endif\n\t\t/* COMMENT_87 */\n\t\tif (VAR_88)\n\t\t\tset_nice(VAR_5.nice);\n\t\tset_rlimits();\n\n\t\tstart_application(0, VAR_72);\n\t}\n\n\tfclose(VAR_72);\n\n\tint VAR_89 = monitor_application(VAR_83);\t/* COMMENT_88 */\n\tflush_stdin();\n\n\tif (WIFEXITED(VAR_89)) {\n\t\t/* COMMENT_89 */\n\t\treturn WEXITSTATUS(VAR_89);\n\t} else {\n\t\t/* COMMENT_90 */\n\t\treturn -1;\n\t}\n}",
  "func_graph_path_before": "netblue30/firejail/eecf35c2f8249489a1d3e512bb07f0d427183134/sandbox.c/vul/before/0.json",
  "func": "int sandbox(void* sandbox_arg) {\n\t// Get rid of unused parameter warning\n\t(void)sandbox_arg;\n\n\tpid_t child_pid = getpid();\n\tif (arg_debug)\n\t\tprintf(\"Initializing child process\\n\");\n\n \t// close each end of the unused pipes\n \tclose(parent_to_child_fds[1]);\n \tclose(child_to_parent_fds[0]);\n\n \t// wait for parent to do base setup\n \twait_for_other(parent_to_child_fds[0]);\n\n\tif (arg_debug && child_pid == 1)\n\t\tprintf(\"PID namespace installed\\n\");\n\n\n\t//****************************\n\t// set hostname\n\t//****************************\n\tif (cfg.hostname) {\n\t\tif (sethostname(cfg.hostname, strlen(cfg.hostname)) < 0)\n\t\t\terrExit(\"sethostname\");\n\t}\n\n\t//****************************\n\t// mount namespace\n\t//****************************\n\t// mount events are not forwarded between the host the sandbox\n\tif (mount(NULL, \"/\", NULL, MS_SLAVE | MS_REC, NULL) < 0) {\n\t\tchk_chroot();\n\t}\n\t// ... and mount a tmpfs on top of /run/firejail/mnt directory\n\tpreproc_mount_mnt_dir();\n\t// bind-mount firejail binaries and helper programs\n\tif (mount(LIBDIR \"/firejail\", RUN_FIREJAIL_LIB_DIR, \"none\", MS_BIND, NULL) < 0)\n\t\terrExit(\"mounting \" RUN_FIREJAIL_LIB_DIR);\n\n\t//****************************\n\t// log sandbox data\n\t//****************************\n\tif (cfg.name)\n\t\tfs_logger2(\"sandbox name:\", cfg.name);\n\tfs_logger2int(\"sandbox pid:\", (int) sandbox_pid);\n\tif (cfg.chrootdir)\n\t\tfs_logger(\"sandbox filesystem: chroot\");\n\telse if (arg_overlay)\n\t\tfs_logger(\"sandbox filesystem: overlay\");\n\telse\n\t\tfs_logger(\"sandbox filesystem: local\");\n\tfs_logger(\"install mount namespace\");\n\n\t//****************************\n\t// netfilter\n\t//****************************\n\tif (arg_netfilter && any_bridge_configured()) { // assuming by default the client filter\n\t\tnetfilter(arg_netfilter_file);\n\t}\n\tif (arg_netfilter6 && any_bridge_configured()) { // assuming by default the client filter\n\t\tnetfilter6(arg_netfilter6_file);\n\t}\n\n\t//****************************\n\t// networking\n\t//****************************\n\tint gw_cfg_failed = 0; // default gw configuration flag\n\tif (arg_nonetwork) {\n\t\tnet_if_up(\"lo\");\n\t\tif (arg_debug)\n\t\t\tprintf(\"Network namespace enabled, only loopback interface available\\n\");\n\t}\n\telse if (arg_netns) {\n\t\tnetns(arg_netns);\n\t\tif (arg_debug)\n\t\t\tprintf(\"Network namespace '%s' activated\\n\", arg_netns);\n\t}\n\telse if (any_bridge_configured() || any_interface_configured()) {\n\t\t// configure lo and eth0...eth3\n\t\tnet_if_up(\"lo\");\n\n\t\tif (mac_not_zero(cfg.bridge0.macsandbox))\n\t\t\tnet_config_mac(cfg.bridge0.devsandbox, cfg.bridge0.macsandbox);\n\t\tsandbox_if_up(&cfg.bridge0);\n\n\t\tif (mac_not_zero(cfg.bridge1.macsandbox))\n\t\t\tnet_config_mac(cfg.bridge1.devsandbox, cfg.bridge1.macsandbox);\n\t\tsandbox_if_up(&cfg.bridge1);\n\n\t\tif (mac_not_zero(cfg.bridge2.macsandbox))\n\t\t\tnet_config_mac(cfg.bridge2.devsandbox, cfg.bridge2.macsandbox);\n\t\tsandbox_if_up(&cfg.bridge2);\n\n\t\tif (mac_not_zero(cfg.bridge3.macsandbox))\n\t\t\tnet_config_mac(cfg.bridge3.devsandbox, cfg.bridge3.macsandbox);\n\t\tsandbox_if_up(&cfg.bridge3);\n\n\n\t\t// moving an interface in a namespace using --interface will reset the interface configuration;\n\t\t// we need to put the configuration back\n\t\tif (cfg.interface0.configured && cfg.interface0.ip) {\n\t\t\tif (arg_debug)\n\t\t\t\tprintf(\"Configuring %d.%d.%d.%d address on interface %s\\n\", PRINT_IP(cfg.interface0.ip), cfg.interface0.dev);\n\t\t\tnet_config_interface(cfg.interface0.dev, cfg.interface0.ip, cfg.interface0.mask, cfg.interface0.mtu);\n\t\t}\n\t\tif (cfg.interface1.configured && cfg.interface1.ip) {\n\t\t\tif (arg_debug)\n\t\t\t\tprintf(\"Configuring %d.%d.%d.%d address on interface %s\\n\", PRINT_IP(cfg.interface1.ip), cfg.interface1.dev);\n\t\t\tnet_config_interface(cfg.interface1.dev, cfg.interface1.ip, cfg.interface1.mask, cfg.interface1.mtu);\n\t\t}\n\t\tif (cfg.interface2.configured && cfg.interface2.ip) {\n\t\t\tif (arg_debug)\n\t\t\t\tprintf(\"Configuring %d.%d.%d.%d address on interface %s\\n\", PRINT_IP(cfg.interface2.ip), cfg.interface2.dev);\n\t\t\tnet_config_interface(cfg.interface2.dev, cfg.interface2.ip, cfg.interface2.mask, cfg.interface2.mtu);\n\t\t}\n\t\tif (cfg.interface3.configured && cfg.interface3.ip) {\n\t\t\tif (arg_debug)\n\t\t\t\tprintf(\"Configuring %d.%d.%d.%d address on interface %s\\n\", PRINT_IP(cfg.interface3.ip), cfg.interface3.dev);\n\t\t\tnet_config_interface(cfg.interface3.dev, cfg.interface3.ip, cfg.interface3.mask, cfg.interface3.mtu);\n\t\t}\n\n\t\t// add a default route\n\t\tif (cfg.defaultgw) {\n\t\t\t// set the default route\n\t\t\tif (net_add_route(0, 0, cfg.defaultgw)) {\n\t\t\t\tfwarning(\"cannot configure default route\\n\");\n\t\t\t\tgw_cfg_failed = 1;\n\t\t\t}\n\t\t}\n\n\t\tif (arg_debug)\n\t\t\tprintf(\"Network namespace enabled\\n\");\n\t}\n\n\t// print network configuration\n\tif (!arg_quiet) {\n\t\tif (any_bridge_configured() || any_interface_configured() || cfg.defaultgw || cfg.dns1) {\n\t\t\tfmessage(\"\\n\");\n\t\t\tif (any_bridge_configured() || any_interface_configured()) {\n\t\t\t\tif (arg_scan)\n\t\t\t\t\tsbox_run(SBOX_ROOT | SBOX_CAPS_NETWORK | SBOX_SECCOMP, 3, PATH_FNET, \"printif\", \"scan\");\n\t\t\t\telse\n\t\t\t\t\tsbox_run(SBOX_ROOT | SBOX_CAPS_NETWORK | SBOX_SECCOMP, 2, PATH_FNET, \"printif\");\n\n\t\t\t}\n\t\t\tif (cfg.defaultgw != 0) {\n\t\t\t\tif (gw_cfg_failed)\n\t\t\t\t\tfmessage(\"Default gateway configuration failed\\n\");\n\t\t\t\telse\n\t\t\t\t\tfmessage(\"Default gateway %d.%d.%d.%d\\n\", PRINT_IP(cfg.defaultgw));\n\t\t\t}\n\t\t\tif (cfg.dns1 != NULL)\n\t\t\t\tfmessage(\"DNS server %s\\n\", cfg.dns1);\n\t\t\tif (cfg.dns2 != NULL)\n\t\t\t\tfmessage(\"DNS server %s\\n\", cfg.dns2);\n\t\t\tif (cfg.dns3 != NULL)\n\t\t\t\tfmessage(\"DNS server %s\\n\", cfg.dns3);\n\t\t\tif (cfg.dns4 != NULL)\n\t\t\t\tfmessage(\"DNS server %s\\n\", cfg.dns4);\n\t\t\tfmessage(\"\\n\");\n\t\t}\n\t}\n\n\t// load IBUS env variables\n\tif (arg_nonetwork || any_bridge_configured() || any_interface_configured()) {\n\t\t// do nothing - there are problems with ibus version 1.5.11\n\t}\n\telse {\n\t\tEUID_USER();\n\t\tenv_ibus_load();\n\t\tEUID_ROOT();\n\t}\n\n\t//****************************\n\t// fs pre-processing:\n\t//  - build seccomp filters\n\t//  - create an empty /etc/ld.so.preload\n\t//****************************\n#ifdef HAVE_SECCOMP\n\tif (cfg.protocol) {\n\t\tif (arg_debug)\n\t\t\tprintf(\"Build protocol filter: %s\\n\", cfg.protocol);\n\n\t\t// build the seccomp filter as a regular user\n\t\tint rv = sbox_run(SBOX_USER | SBOX_CAPS_NONE | SBOX_SECCOMP, 5,\n\t\t\tPATH_FSECCOMP, \"protocol\", \"build\", cfg.protocol, RUN_SECCOMP_PROTOCOL);\n\t\tif (rv)\n\t\t\texit(rv);\n\t}\n\tif (arg_seccomp && (cfg.seccomp_list || cfg.seccomp_list_drop || cfg.seccomp_list_keep))\n\t\targ_seccomp_postexec = 1;\n#endif\n\n\t// need ld.so.preload if tracing or seccomp with any non-default lists\n\tbool need_preload = arg_trace || arg_tracelog || arg_seccomp_postexec;\n\t// for --appimage, --chroot and --overlay* we force NO_NEW_PRIVS\n\t// and drop all capabilities\n\tif (getuid() != 0 && (arg_appimage || cfg.chrootdir || arg_overlay)) {\n\t\tenforce_filters();\n\t\tneed_preload = arg_trace || arg_tracelog;\n\t}\n\n\t// trace pre-install\n\tif (need_preload)\n\t\tfs_trace_preload();\n\n\t// store hosts file\n\tif (cfg.hosts_file)\n\t\tfs_store_hosts_file();\n\n\t//****************************\n\t// configure filesystem\n\t//****************************\n#ifdef HAVE_CHROOT\n\tif (cfg.chrootdir) {\n\t\tfs_chroot(cfg.chrootdir);\n\n\t\t//****************************\n\t\t// trace pre-install, this time inside chroot\n\t\t//****************************\n\t\tif (need_preload)\n\t\t\tfs_trace_preload();\n\t}\n\telse\n#endif\n#ifdef HAVE_OVERLAYFS\n\tif (arg_overlay)\n\t\tfs_overlayfs();\n\telse\n#endif\n\t\tfs_basic_fs();\n\n\t//****************************\n\t// private mode\n\t//****************************\n\tif (arg_private) {\n\t\tif (cfg.home_private) {\t// --private=\n\t\t\tif (cfg.chrootdir)\n\t\t\t\tfwarning(\"private=directory feature is disabled in chroot\\n\");\n\t\t\telse if (arg_overlay)\n\t\t\t\tfwarning(\"private=directory feature is disabled in overlay\\n\");\n\t\t\telse\n\t\t\t\tfs_private_homedir();\n\t\t}\n\t\telse if (cfg.home_private_keep) { // --private-home=\n\t\t\tif (cfg.chrootdir)\n\t\t\t\tfwarning(\"private-home= feature is disabled in chroot\\n\");\n\t\t\telse if (arg_overlay)\n\t\t\t\tfwarning(\"private-home= feature is disabled in overlay\\n\");\n\t\t\telse\n\t\t\t\tfs_private_home_list();\n\t\t}\n\t\telse // --private\n\t\t\tfs_private();\n\t}\n\n\tif (arg_private_dev)\n\t\tfs_private_dev();\n\n\tif (arg_private_etc) {\n\t\tif (cfg.chrootdir)\n\t\t\tfwarning(\"private-etc feature is disabled in chroot\\n\");\n\t\telse if (arg_overlay)\n\t\t\tfwarning(\"private-etc feature is disabled in overlay\\n\");\n\t\telse {\n\t\t\tfs_private_dir_list(\"/etc\", RUN_ETC_DIR, cfg.etc_private_keep);\n\t\t\t// create /etc/ld.so.preload file again\n\t\t\tif (need_preload)\n\t\t\t\tfs_trace_preload();\n\t\t}\n\t}\n\n\tif (arg_private_opt) {\n\t\tif (cfg.chrootdir)\n\t\t\tfwarning(\"private-opt feature is disabled in chroot\\n\");\n\t\telse if (arg_overlay)\n\t\t\tfwarning(\"private-opt feature is disabled in overlay\\n\");\n\t\telse {\n\t\t\tfs_private_dir_list(\"/opt\", RUN_OPT_DIR, cfg.opt_private_keep);\n\t\t}\n\t}\n\n\tif (arg_private_srv) {\n\t\tif (cfg.chrootdir)\n\t\t\tfwarning(\"private-srv feature is disabled in chroot\\n\");\n\t\telse if (arg_overlay)\n\t\t\tfwarning(\"private-srv feature is disabled in overlay\\n\");\n\t\telse {\n\t\t\tfs_private_dir_list(\"/srv\", RUN_SRV_DIR, cfg.srv_private_keep);\n\t\t}\n\t}\n\n\t// private-bin is disabled for appimages\n\tif (arg_private_bin && !arg_appimage) {\n\t\tif (cfg.chrootdir)\n\t\t\tfwarning(\"private-bin feature is disabled in chroot\\n\");\n\t\telse if (arg_overlay)\n\t\t\tfwarning(\"private-bin feature is disabled in overlay\\n\");\n\t\telse {\n\t\t\t// for --x11=xorg we need to add xauth command\n\t\t\tif (arg_x11_xorg) {\n\t\t\t\tEUID_USER();\n\t\t\t\tchar *tmp;\n\t\t\t\tif (asprintf(&tmp, \"%s,xauth\", cfg.bin_private_keep) == -1)\n\t\t\t\t\terrExit(\"asprintf\");\n\t\t\t\tcfg.bin_private_keep = tmp;\n\t\t\t\tEUID_ROOT();\n\t\t\t}\n\t\t\tfs_private_bin_list();\n\t\t}\n\t}\n\n\t// private-lib is disabled for appimages\n\tif (arg_private_lib && !arg_appimage) {\n\t\tif (cfg.chrootdir)\n\t\t\tfwarning(\"private-lib feature is disabled in chroot\\n\");\n\t\telse if (arg_overlay)\n\t\t\tfwarning(\"private-lib feature is disabled in overlay\\n\");\n\t\telse {\n\t\t\tfs_private_lib();\n\t\t}\n\t}\n\n\tif (arg_private_cache) {\n\t\tif (cfg.chrootdir)\n\t\t\tfwarning(\"private-cache feature is disabled in chroot\\n\");\n\t\telse if (arg_overlay)\n\t\t\tfwarning(\"private-cache feature is disabled in overlay\\n\");\n\t\telse\n\t\t\tfs_private_cache();\n\t}\n\n\tif (arg_private_tmp) {\n\t\t// private-tmp is implemented as a whitelist\n\t\tEUID_USER();\n\t\tfs_private_tmp();\n\t\tEUID_ROOT();\n\t}\n\n\t//****************************\n\t// Session D-BUS\n\t//****************************\n\tif (arg_nodbus)\n\t\tdbus_session_disable();\n\n\n\t//****************************\n\t// hosts and hostname\n\t//****************************\n\tif (cfg.hostname)\n\t\tfs_hostname(cfg.hostname);\n\n\tif (cfg.hosts_file)\n\t\tfs_mount_hosts_file();\n\n\t//****************************\n\t// /etc overrides from the network namespace\n\t//****************************\n\tif (arg_netns)\n\t\tnetns_mounts(arg_netns);\n\n\t//****************************\n\t// update /proc, /sys, /dev, /boot directory\n\t//****************************\n\tfs_proc_sys_dev_boot();\n\n\t//****************************\n\t// handle /mnt and /media\n\t//****************************\n\tif (checkcfg(CFG_DISABLE_MNT))\n\t\tfs_mnt(1);\n\telse if (arg_disable_mnt)\n\t\tfs_mnt(0);\n\n\t//****************************\n\t// apply the profile file\n\t//****************************\n\t// apply all whitelist commands ...\n\tfs_whitelist();\n\n\t// ... followed by blacklist commands\n\tfs_blacklist(); // mkdir and mkfile are processed all over again\n\n\t//****************************\n\t// nosound/no3d/notv/novideo and fix for pulseaudio 7.0\n\t//****************************\n\tif (arg_nosound) {\n\t\t// disable pulseaudio\n\t\tpulseaudio_disable();\n\n\t\t// disable /dev/snd\n\t\tfs_dev_disable_sound();\n\t}\n\telse if (!arg_noautopulse)\n\t\tpulseaudio_init();\n\n\tif (arg_no3d)\n\t\tfs_dev_disable_3d();\n\n\tif (arg_notv)\n\t\tfs_dev_disable_tv();\n\n\tif (arg_nodvd)\n\t\tfs_dev_disable_dvd();\n\n\tif (arg_nou2f)\n\t        fs_dev_disable_u2f();\n\n\tif (arg_novideo)\n\t\tfs_dev_disable_video();\n\n\t//****************************\n\t// install trace\n\t//****************************\n\tif (need_preload)\n\t\tfs_trace();\n\n\t//****************************\n\t// set dns\n\t//****************************\n\tfs_resolvconf();\n\n\t//****************************\n\t// fs post-processing\n\t//****************************\n\tfs_logger_print();\n\tfs_logger_change_owner();\n\n\t//****************************\n\t// set application environment\n\t//****************************\n\tEUID_USER();\n\tint cwd = 0;\n\tif (cfg.cwd) {\n\t\tif (chdir(cfg.cwd) == 0)\n\t\t\tcwd = 1;\n\t}\n\n\tif (!cwd) {\n\t\tif (chdir(\"/\") < 0)\n\t\t\terrExit(\"chdir\");\n\t\tif (cfg.homedir) {\n\t\t\tstruct stat s;\n\t\t\tif (stat(cfg.homedir, &s) == 0) {\n\t\t\t\t/* coverity[toctou] */\n\t\t\t\tif (chdir(cfg.homedir) < 0)\n\t\t\t\t\terrExit(\"chdir\");\n\t\t\t}\n\t\t}\n\t}\n\tif (arg_debug) {\n\t\tchar *cpath = get_current_dir_name();\n\t\tif (cpath) {\n\t\t\tprintf(\"Current directory: %s\\n\", cpath);\n\t\t\tfree(cpath);\n\t\t}\n\t}\n\n\tEUID_ROOT();\n\t// clean /tmp/.X11-unix sockets\n\tfs_x11();\n\tif (arg_x11_xorg)\n\t\tx11_xorg();\n\n\t// save original umask\n\tsave_umask();\n\n\t//****************************\n\t// set security filters\n\t//****************************\n\t// save state of nonewprivs\n\tsave_nonewprivs();\n\n\t// save cpu affinity mask to CPU_CFG file\n\tsave_cpu();\n\n\t// save cgroup in CGROUP_CFG file\n\tsave_cgroup();\n\n\t// set seccomp\n#ifdef HAVE_SECCOMP\n\t// install protocol filter\n#ifdef SYS_socket\n\tif (cfg.protocol) {\n\t\tif (arg_debug)\n\t\t\tprintf(\"Install protocol filter: %s\\n\", cfg.protocol);\n\t\tseccomp_load(RUN_SECCOMP_PROTOCOL);\t// install filter\n\t\tprotocol_filter_save();\t// save filter in RUN_PROTOCOL_CFG\n\t}\n\telse {\n\t\tint rv = unlink(RUN_SECCOMP_PROTOCOL);\n\t\t(void) rv;\n\t}\n#endif\n\n\t// if a keep list is available, disregard the drop list\n\tif (arg_seccomp == 1) {\n\t\tif (cfg.seccomp_list_keep)\n\t\t\tseccomp_filter_keep();\n\t\telse\n\t\t\tseccomp_filter_drop();\n\n\t}\n\telse { // clean seccomp files under /run/firejail/mnt\n\t\tint rv = unlink(RUN_SECCOMP_CFG);\n\t\trv |= unlink(RUN_SECCOMP_32);\n\t\t(void) rv;\n\t}\n\n\tif (arg_memory_deny_write_execute) {\n\t\tif (arg_debug)\n\t\t\tprintf(\"Install memory write&execute filter\\n\");\n\t\tseccomp_load(RUN_SECCOMP_MDWX);\t// install filter\n\t}\n\telse {\n\t\tint rv = unlink(RUN_SECCOMP_MDWX);\n\t\t(void) rv;\n\t}\n\t// make seccomp filters read-only\n\tfs_rdonly(RUN_SECCOMP_DIR);\n#endif\n\n\t// set capabilities\n\tset_caps();\n\n\t//****************************************\n\t// communicate progress of sandbox set up\n\t// to --join\n\t//****************************************\n\n\tFILE *rj = create_ready_for_join_file();\n\n\t//****************************************\n\t// create a new user namespace\n\t//     - too early to drop privileges\n\t//****************************************\n\tsave_nogroups();\n\tif (arg_noroot) {\n\t\tint rv = unshare(CLONE_NEWUSER);\n\t\tif (rv == -1) {\n\t\t\tfwarning(\"cannot create a new user namespace, going forward without it...\\n\");\n\t\t\targ_noroot = 0;\n\t\t}\n\t}\n\n\t// notify parent that new user namespace has been created so a proper\n \t// UID/GID map can be setup\n \tnotify_other(child_to_parent_fds[1]);\n \tclose(child_to_parent_fds[1]);\n\n \t// wait for parent to finish setting up a proper UID/GID map\n \twait_for_other(parent_to_child_fds[0]);\n \tclose(parent_to_child_fds[0]);\n\n\t// somehow, the new user namespace resets capabilities;\n\t// we need to do them again\n\tif (arg_noroot) {\n\t\tif (arg_debug)\n\t\t\tprintf(\"noroot user namespace installed\\n\");\n\t\tset_caps();\n\t}\n\n\t//****************************************\n\t// Set NO_NEW_PRIVS if desired\n\t//****************************************\n\tif (arg_nonewprivs) {\n\t\tprctl(PR_SET_NO_NEW_PRIVS, 1, 0, 0, 0);\n\n\t\tif (prctl(PR_GET_NO_NEW_PRIVS, 0, 0, 0, 0) != 1) {\n\t\t\tfwarning(\"cannot set NO_NEW_PRIVS, it requires a Linux kernel version 3.5 or newer.\\n\");\n\t\t\tif (force_nonewprivs) {\n\t\t\t\tfprintf(stderr, \"Error: NO_NEW_PRIVS required for this sandbox, exiting ...\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t}\n\t\telse if (arg_debug)\n\t\t\tprintf(\"NO_NEW_PRIVS set\\n\");\n\t}\n\n\t//****************************************\n\t// drop privileges\n\t//****************************************\n\tdrop_privs(arg_nogroups);\n\n\t// kill the sandbox in case the parent died\n\tprctl(PR_SET_PDEATHSIG, SIGKILL, 0, 0, 0);\n\n\t//****************************************\n\t// set cpu affinity\n\t//****************************************\n\n\tif (cfg.cpus)\n\t\tset_cpu_affinity();\n\n\t//****************************************\n\t// fork the application and monitor it\n\t//****************************************\n\tpid_t app_pid = fork();\n\tif (app_pid == -1)\n\t\terrExit(\"fork\");\n\n\tif (app_pid == 0) {\n#ifdef HAVE_APPARMOR\n\t\tif (checkcfg(CFG_APPARMOR) && arg_apparmor) {\n\t\t\terrno = 0;\n\t\t\tif (aa_change_onexec(\"firejail-default\")) {\n\t\t\t\tfwarning(\"Cannot confine the application using AppArmor.\\n\"\n\t\t\t\t\t\"Maybe firejail-default AppArmor profile is not loaded into the kernel.\\n\"\n\t\t\t\t\t\"As root, run \\\"aa-enforce firejail-default\\\" to load it.\\n\");\n\t\t\t}\n\t\t\telse if (arg_debug)\n\t\t\t\tprintf(\"AppArmor enabled\\n\");\n\t\t}\n#endif\n\t\t// set nice and rlimits\n\t\tif (arg_nice)\n\t\t\tset_nice(cfg.nice);\n\t\tset_rlimits();\n\n\t\tstart_application(0, rj);\n\t}\n\n\tfclose(rj);\n\n\tint status = monitor_application(app_pid);\t// monitor application\n\tflush_stdin();\n\n\tif (WIFEXITED(status)) {\n\t\t// if we had a proper exit, return that exit status\n\t\treturn WEXITSTATUS(status);\n\t} else {\n\t\t// something else went wrong!\n\t\treturn -1;\n\t}\n}",
  "abstract_func": "int sandbox(void* VAR_0) {\n\t/* COMMENT_0 */\n\t(void)VAR_0;\n\n\tpid_t VAR_1 = getpid();\n\tif (VAR_2)\n\t\tprintf(\"Initializing child process\\n\");\n\n \t/* COMMENT_1 */\n \tclose(VAR_3[1]);\n \tclose(VAR_4[0]);\n\n \t/* COMMENT_2 */\n \twait_for_other(VAR_3[0]);\n\n\tif (VAR_2 && VAR_1 == 1)\n\t\tprintf(\"PID namespace installed\\n\");\n\n\n\t/* COMMENT_3 */\n\t/* COMMENT_4 */\n\t/* COMMENT_3 */\n\tif (VAR_5.hostname) {\n\t\tif (sethostname(VAR_5.hostname, strlen(VAR_5.hostname)) < 0)\n\t\t\terrExit(\"sethostname\");\n\t}\n\n\t/* COMMENT_3 */\n\t/* COMMENT_5 */\n\t/* COMMENT_3 */\n\t/* COMMENT_6 */\n\tif (mount(NULL, \"/\", NULL, VAR_6 | VAR_7, NULL) < 0) {\n\t\tchk_chroot();\n\t}\n\t/* COMMENT_7 */\n\tpreproc_mount_mnt_dir();\n\t/* COMMENT_8 */\n\tif (mount(VAR_8 \"/firejail\", VAR_9, \"none\", VAR_10, NULL) < 0)\n\t\terrExit(\"mounting \" VAR_9);\n\n\t/* COMMENT_3 */\n\t/* COMMENT_9 */\n\t/* COMMENT_3 */\n\tif (VAR_5.name)\n\t\tfs_logger2(\"sandbox name:\", VAR_5.name);\n\tfs_logger2int(\"sandbox pid:\", (int) VAR_11);\n\tif (VAR_5.chrootdir)\n\t\tfs_logger(\"sandbox filesystem: chroot\");\n\telse if (VAR_12)\n\t\tfs_logger(\"sandbox filesystem: overlay\");\n\telse\n\t\tfs_logger(\"sandbox filesystem: local\");\n\tfs_logger(\"install mount namespace\");\n\n\t/* COMMENT_3 */\n\t/* COMMENT_10 */\n\t/* COMMENT_3 */\n\tif (VAR_13 && any_bridge_configured()) { /* COMMENT_11 */\n\t\tnetfilter(VAR_14);\n\t}\n\tif (VAR_15 && any_bridge_configured()) { /* COMMENT_11 */\n\t\tnetfilter6(VAR_16);\n\t}\n\n\t/* COMMENT_3 */\n\t/* COMMENT_12 */\n\t/* COMMENT_3 */\n\tint VAR_17 = 0; /* COMMENT_13 */\n\tif (VAR_18) {\n\t\tnet_if_up(\"lo\");\n\t\tif (VAR_2)\n\t\t\tprintf(\"Network namespace enabled, only loopback interface available\\n\");\n\t}\n\telse if (VAR_19) {\n\t\tnetns(VAR_19);\n\t\tif (VAR_2)\n\t\t\tprintf(\"Network namespace '%s' activated\\n\", VAR_19);\n\t}\n\telse if (any_bridge_configured() || any_interface_configured()) {\n\t\t/* COMMENT_14 */\n\t\tnet_if_up(\"lo\");\n\n\t\tif (mac_not_zero(VAR_5.bridge0.macsandbox))\n\t\t\tnet_config_mac(VAR_5.bridge0.devsandbox, VAR_5.bridge0.macsandbox);\n\t\tsandbox_if_up(&VAR_5.bridge0);\n\n\t\tif (mac_not_zero(VAR_5.bridge1.macsandbox))\n\t\t\tnet_config_mac(VAR_5.bridge1.devsandbox, VAR_5.bridge1.macsandbox);\n\t\tsandbox_if_up(&VAR_5.bridge1);\n\n\t\tif (mac_not_zero(VAR_5.bridge2.macsandbox))\n\t\t\tnet_config_mac(VAR_5.bridge2.devsandbox, VAR_5.bridge2.macsandbox);\n\t\tsandbox_if_up(&VAR_5.bridge2);\n\n\t\tif (mac_not_zero(VAR_5.bridge3.macsandbox))\n\t\t\tnet_config_mac(VAR_5.bridge3.devsandbox, VAR_5.bridge3.macsandbox);\n\t\tsandbox_if_up(&VAR_5.bridge3);\n\n\n\t\t/* COMMENT_15 */\n\t\t/* COMMENT_16 */\n\t\tif (VAR_5.interface0.configured && VAR_5.interface0.ip) {\n\t\t\tif (VAR_2)\n\t\t\t\tprintf(\"Configuring %d.%d.%d.%d address on interface %s\\n\", PRINT_IP(VAR_5.interface0.ip), VAR_5.interface0.dev);\n\t\t\tnet_config_interface(VAR_5.interface0.dev, VAR_5.interface0.ip, VAR_5.interface0.mask, VAR_5.interface0.mtu);\n\t\t}\n\t\tif (VAR_5.interface1.configured && VAR_5.interface1.ip) {\n\t\t\tif (VAR_2)\n\t\t\t\tprintf(\"Configuring %d.%d.%d.%d address on interface %s\\n\", PRINT_IP(VAR_5.interface1.ip), VAR_5.interface1.dev);\n\t\t\tnet_config_interface(VAR_5.interface1.dev, VAR_5.interface1.ip, VAR_5.interface1.mask, VAR_5.interface1.mtu);\n\t\t}\n\t\tif (VAR_5.interface2.configured && VAR_5.interface2.ip) {\n\t\t\tif (VAR_2)\n\t\t\t\tprintf(\"Configuring %d.%d.%d.%d address on interface %s\\n\", PRINT_IP(VAR_5.interface2.ip), VAR_5.interface2.dev);\n\t\t\tnet_config_interface(VAR_5.interface2.dev, VAR_5.interface2.ip, VAR_5.interface2.mask, VAR_5.interface2.mtu);\n\t\t}\n\t\tif (VAR_5.interface3.configured && VAR_5.interface3.ip) {\n\t\t\tif (VAR_2)\n\t\t\t\tprintf(\"Configuring %d.%d.%d.%d address on interface %s\\n\", PRINT_IP(VAR_5.interface3.ip), VAR_5.interface3.dev);\n\t\t\tnet_config_interface(VAR_5.interface3.dev, VAR_5.interface3.ip, VAR_5.interface3.mask, VAR_5.interface3.mtu);\n\t\t}\n\n\t\t/* COMMENT_17 */\n\t\tif (VAR_5.defaultgw) {\n\t\t\t/* COMMENT_18 */\n\t\t\tif (net_add_route(0, 0, VAR_5.defaultgw)) {\n\t\t\t\tfwarning(\"cannot configure default route\\n\");\n\t\t\t\tVAR_17 = 1;\n\t\t\t}\n\t\t}\n\n\t\tif (VAR_2)\n\t\t\tprintf(\"Network namespace enabled\\n\");\n\t}\n\n\t/* COMMENT_19 */\n\tif (!VAR_20) {\n\t\tif (any_bridge_configured() || any_interface_configured() || VAR_5.defaultgw || VAR_5.dns1) {\n\t\t\tfmessage(\"\\n\");\n\t\t\tif (any_bridge_configured() || any_interface_configured()) {\n\t\t\t\tif (VAR_21)\n\t\t\t\t\tsbox_run(VAR_22 | VAR_23 | VAR_24, 3, VAR_25, \"printif\", \"scan\");\n\t\t\t\telse\n\t\t\t\t\tsbox_run(VAR_22 | VAR_23 | VAR_24, 2, VAR_25, \"printif\");\n\n\t\t\t}\n\t\t\tif (VAR_5.defaultgw != 0) {\n\t\t\t\tif (VAR_17)\n\t\t\t\t\tfmessage(\"Default gateway configuration failed\\n\");\n\t\t\t\telse\n\t\t\t\t\tfmessage(\"Default gateway %d.%d.%d.%d\\n\", PRINT_IP(VAR_5.defaultgw));\n\t\t\t}\n\t\t\tif (VAR_5.dns1 != NULL)\n\t\t\t\tfmessage(\"DNS server %s\\n\", VAR_5.dns1);\n\t\t\tif (VAR_5.dns2 != NULL)\n\t\t\t\tfmessage(\"DNS server %s\\n\", VAR_5.dns2);\n\t\t\tif (VAR_5.dns3 != NULL)\n\t\t\t\tfmessage(\"DNS server %s\\n\", VAR_5.dns3);\n\t\t\tif (VAR_5.dns4 != NULL)\n\t\t\t\tfmessage(\"DNS server %s\\n\", VAR_5.dns4);\n\t\t\tfmessage(\"\\n\");\n\t\t}\n\t}\n\n\t/* COMMENT_20 */\n\tif (VAR_18 || any_bridge_configured() || any_interface_configured()) {\n\t\t/* COMMENT_21 */\n\t}\n\telse {\n\t\tEUID_USER();\n\t\tenv_ibus_load();\n\t\tEUID_ROOT();\n\t}\n\n\t/* COMMENT_3 */\n\t/* COMMENT_22 */\n\t/* COMMENT_23 */\n\t/* COMMENT_24 */\n\t/* COMMENT_3 */\n#ifdef VAR_26\n\tif (VAR_5.protocol) {\n\t\tif (VAR_2)\n\t\t\tprintf(\"Build protocol filter: %s\\n\", VAR_5.protocol);\n\n\t\t/* COMMENT_25 */\n\t\tint VAR_27 = sbox_run(VAR_28 | VAR_29 | VAR_24, 5,\n\t\t\tVAR_30, \"protocol\", \"build\", VAR_5.protocol, VAR_31);\n\t\tif (VAR_27)\n\t\t\texit(VAR_27);\n\t}\n\tif (VAR_32 && (VAR_5.seccomp_list || VAR_5.seccomp_list_drop || VAR_5.seccomp_list_keep))\n\t\tVAR_33 = 1;\n#endif\n\n\t/* COMMENT_26 */\n\tbool VAR_34 = VAR_35 || VAR_36 || VAR_33;\n\t/* COMMENT_27 */\n\t/* COMMENT_28 */\n\tif (getuid() != 0 && (VAR_37 || VAR_5.chrootdir || VAR_12)) {\n\t\tenforce_filters();\n\t\tVAR_34 = VAR_35 || VAR_36;\n\t}\n\n\t/* COMMENT_29 */\n\tif (VAR_34)\n\t\tfs_trace_preload();\n\n\t/* COMMENT_30 */\n\tif (VAR_5.hosts_file)\n\t\tfs_store_hosts_file();\n\n\t/* COMMENT_3 */\n\t/* COMMENT_31 */\n\t/* COMMENT_3 */\n#ifdef VAR_38\n\tif (VAR_5.chrootdir) {\n\t\tfs_chroot(VAR_5.chrootdir);\n\n\t\t/* COMMENT_3 */\n\t\t/* COMMENT_32 */\n\t\t/* COMMENT_3 */\n\t\tif (VAR_34)\n\t\t\tfs_trace_preload();\n\t}\n\telse\n#endif\n#ifdef VAR_39\n\tif (VAR_12)\n\t\tfs_overlayfs();\n\telse\n#endif\n\t\tfs_basic_fs();\n\n\t/* COMMENT_3 */\n\t/* COMMENT_33 */\n\t/* COMMENT_3 */\n\tif (VAR_40) {\n\t\tif (VAR_5.home_private) {\t/* COMMENT_34 */\n\t\t\tif (VAR_5.chrootdir)\n\t\t\t\tfwarning(\"private=directory feature is disabled in chroot\\n\");\n\t\t\telse if (VAR_12)\n\t\t\t\tfwarning(\"private=directory feature is disabled in overlay\\n\");\n\t\t\telse\n\t\t\t\tfs_private_homedir();\n\t\t}\n\t\telse if (VAR_5.home_private_keep) { /* COMMENT_35 */\n\t\t\tif (VAR_5.chrootdir)\n\t\t\t\tfwarning(\"private-home= feature is disabled in chroot\\n\");\n\t\t\telse if (VAR_12)\n\t\t\t\tfwarning(\"private-home= feature is disabled in overlay\\n\");\n\t\t\telse\n\t\t\t\tfs_private_home_list();\n\t\t}\n\t\telse /* COMMENT_36 */\n\t\t\tfs_private();\n\t}\n\n\tif (VAR_41)\n\t\tfs_private_dev();\n\n\tif (VAR_42) {\n\t\tif (VAR_5.chrootdir)\n\t\t\tfwarning(\"private-etc feature is disabled in chroot\\n\");\n\t\telse if (VAR_12)\n\t\t\tfwarning(\"private-etc feature is disabled in overlay\\n\");\n\t\telse {\n\t\t\tfs_private_dir_list(\"/etc\", VAR_43, VAR_5.etc_private_keep);\n\t\t\t/* COMMENT_37 */\n\t\t\tif (VAR_34)\n\t\t\t\tfs_trace_preload();\n\t\t}\n\t}\n\n\tif (VAR_44) {\n\t\tif (VAR_5.chrootdir)\n\t\t\tfwarning(\"private-opt feature is disabled in chroot\\n\");\n\t\telse if (VAR_12)\n\t\t\tfwarning(\"private-opt feature is disabled in overlay\\n\");\n\t\telse {\n\t\t\tfs_private_dir_list(\"/opt\", VAR_45, VAR_5.opt_private_keep);\n\t\t}\n\t}\n\n\tif (VAR_46) {\n\t\tif (VAR_5.chrootdir)\n\t\t\tfwarning(\"private-srv feature is disabled in chroot\\n\");\n\t\telse if (VAR_12)\n\t\t\tfwarning(\"private-srv feature is disabled in overlay\\n\");\n\t\telse {\n\t\t\tfs_private_dir_list(\"/srv\", VAR_47, VAR_5.srv_private_keep);\n\t\t}\n\t}\n\n\t/* COMMENT_38 */\n\tif (VAR_48 && !VAR_37) {\n\t\tif (VAR_5.chrootdir)\n\t\t\tfwarning(\"private-bin feature is disabled in chroot\\n\");\n\t\telse if (VAR_12)\n\t\t\tfwarning(\"private-bin feature is disabled in overlay\\n\");\n\t\telse {\n\t\t\t/* COMMENT_39 */\n\t\t\tif (VAR_49) {\n\t\t\t\tEUID_USER();\n\t\t\t\tchar *VAR_50;\n\t\t\t\tif (asprintf(&VAR_50, \"%s,xauth\", VAR_5.bin_private_keep) == -1)\n\t\t\t\t\terrExit(\"asprintf\");\n\t\t\t\tVAR_5.bin_private_keep = VAR_50;\n\t\t\t\tEUID_ROOT();\n\t\t\t}\n\t\t\tfs_private_bin_list();\n\t\t}\n\t}\n\n\t/* COMMENT_40 */\n\tif (VAR_51 && !VAR_37) {\n\t\tif (VAR_5.chrootdir)\n\t\t\tfwarning(\"private-lib feature is disabled in chroot\\n\");\n\t\telse if (VAR_12)\n\t\t\tfwarning(\"private-lib feature is disabled in overlay\\n\");\n\t\telse {\n\t\t\tfs_private_lib();\n\t\t}\n\t}\n\n\tif (VAR_52) {\n\t\tif (VAR_5.chrootdir)\n\t\t\tfwarning(\"private-cache feature is disabled in chroot\\n\");\n\t\telse if (VAR_12)\n\t\t\tfwarning(\"private-cache feature is disabled in overlay\\n\");\n\t\telse\n\t\t\tfs_private_cache();\n\t}\n\n\tif (VAR_53) {\n\t\t/* COMMENT_41 */\n\t\tEUID_USER();\n\t\tfs_private_tmp();\n\t\tEUID_ROOT();\n\t}\n\n\t/* COMMENT_3 */\n\t/* COMMENT_42 */\n\t/* COMMENT_3 */\n\tif (VAR_54)\n\t\tdbus_session_disable();\n\n\n\t/* COMMENT_3 */\n\t/* COMMENT_43 */\n\t/* COMMENT_3 */\n\tif (VAR_5.hostname)\n\t\tfs_hostname(VAR_5.hostname);\n\n\tif (VAR_5.hosts_file)\n\t\tfs_mount_hosts_file();\n\n\t/* COMMENT_3 */\n\t/* COMMENT_44 */\n\t/* COMMENT_3 */\n\tif (VAR_19)\n\t\tnetns_mounts(VAR_19);\n\n\t/* COMMENT_3 */\n\t/* COMMENT_45 */\n\t/* COMMENT_3 */\n\tfs_proc_sys_dev_boot();\n\n\t/* COMMENT_3 */\n\t/* COMMENT_46 */\n\t/* COMMENT_3 */\n\tif (checkcfg(VAR_55))\n\t\tfs_mnt(1);\n\telse if (VAR_56)\n\t\tfs_mnt(0);\n\n\t/* COMMENT_3 */\n\t/* COMMENT_47 */\n\t/* COMMENT_3 */\n\t/* COMMENT_48 */\n\tfs_whitelist();\n\n\t/* COMMENT_49 */\n\tfs_blacklist(); /* COMMENT_50 */\n\n\t/* COMMENT_3 */\n\t/* COMMENT_51 */\n\t/* COMMENT_3 */\n\tif (VAR_57) {\n\t\t/* COMMENT_52 */\n\t\tpulseaudio_disable();\n\n\t\t/* COMMENT_53 */\n\t\tfs_dev_disable_sound();\n\t}\n\telse if (!VAR_58)\n\t\tpulseaudio_init();\n\n\tif (VAR_59)\n\t\tfs_dev_disable_3d();\n\n\tif (VAR_60)\n\t\tfs_dev_disable_tv();\n\n\tif (VAR_61)\n\t\tfs_dev_disable_dvd();\n\n\tif (VAR_62)\n\t        fs_dev_disable_u2f();\n\n\tif (VAR_63)\n\t\tfs_dev_disable_video();\n\n\t/* COMMENT_3 */\n\t/* COMMENT_54 */\n\t/* COMMENT_3 */\n\tif (VAR_34)\n\t\tfs_trace();\n\n\t/* COMMENT_3 */\n\t/* COMMENT_55 */\n\t/* COMMENT_3 */\n\tfs_resolvconf();\n\n\t/* COMMENT_3 */\n\t/* COMMENT_56 */\n\t/* COMMENT_3 */\n\tfs_logger_print();\n\tfs_logger_change_owner();\n\n\t/* COMMENT_3 */\n\t/* COMMENT_57 */\n\t/* COMMENT_3 */\n\tEUID_USER();\n\tint VAR_64 = 0;\n\tif (VAR_5.cwd) {\n\t\tif (chdir(VAR_5.cwd) == 0)\n\t\t\tVAR_64 = 1;\n\t}\n\n\tif (!VAR_64) {\n\t\tif (chdir(\"/\") < 0)\n\t\t\terrExit(\"chdir\");\n\t\tif (VAR_5.homedir) {\n\t\t\tstruct stat VAR_65;\n\t\t\tif (stat(VAR_5.homedir, &VAR_65) == 0) {\n\t\t\t\t/* COMMENT_58 */\n\t\t\t\tif (chdir(VAR_5.homedir) < 0)\n\t\t\t\t\terrExit(\"chdir\");\n\t\t\t}\n\t\t}\n\t}\n\tif (VAR_2) {\n\t\tchar *VAR_66 = get_current_dir_name();\n\t\tif (VAR_66) {\n\t\t\tprintf(\"Current directory: %s\\n\", VAR_66);\n\t\t\tfree(VAR_66);\n\t\t}\n\t}\n\n\tEUID_ROOT();\n\t/* COMMENT_59 */\n\tfs_x11();\n\tif (VAR_49)\n\t\tx11_xorg();\n\n\t/* COMMENT_60 */\n\tsave_umask();\n\n\t/* COMMENT_3 */\n\t/* COMMENT_61 */\n\t/* COMMENT_3 */\n\t/* COMMENT_62 */\n\tsave_nonewprivs();\n\n\t/* COMMENT_63 */\n\tsave_cpu();\n\n\t/* COMMENT_64 */\n\tsave_cgroup();\n\n\t/* COMMENT_65 */\n#ifdef VAR_26\n\t/* COMMENT_66 */\n#ifdef VAR_67\n\tif (VAR_5.protocol) {\n\t\tif (VAR_2)\n\t\t\tprintf(\"Install protocol filter: %s\\n\", VAR_5.protocol);\n\t\tseccomp_load(VAR_31);\t/* COMMENT_67 */\n\t\tprotocol_filter_save();\t/* COMMENT_68 */\n\t}\n\telse {\n\t\tint VAR_27 = unlink(VAR_31);\n\t\t(void) VAR_27;\n\t}\n#endif\n\n\t/* COMMENT_69 */\n\tif (VAR_32 == 1) {\n\t\tif (VAR_5.seccomp_list_keep)\n\t\t\tseccomp_filter_keep();\n\t\telse\n\t\t\tseccomp_filter_drop();\n\n\t}\n\telse { /* COMMENT_70 */\n\t\tint VAR_27 = unlink(VAR_68);\n\t\tVAR_27 |= unlink(VAR_69);\n\t\t(void) VAR_27;\n\t}\n\n\tif (VAR_70) {\n\t\tif (VAR_2)\n\t\t\tprintf(\"Install memory write&execute filter\\n\");\n\t\tseccomp_load(VAR_71);\t/* COMMENT_67 */\n\t}\n\telse {\n\t\tint VAR_27 = unlink(VAR_71);\n\t\t(void) VAR_27;\n\t}\n\t/* COMMENT_71 */\n\tfs_rdonly(VAR_72);\n#endif\n\n\t/* COMMENT_72 */\n\tset_caps();\n\n\t/* COMMENT_73 */\n\t/* COMMENT_74 */\n\t/* COMMENT_75 */\n\t/* COMMENT_73 */\n\n\tFILE *VAR_73 = create_ready_for_join_file();\n\n\t/* COMMENT_73 */\n\t/* COMMENT_76 */\n\t/* COMMENT_77 */\n\t/* COMMENT_73 */\n\tsave_nogroups();\n\tif (VAR_74) {\n\t\tint VAR_27 = unshare(VAR_75);\n\t\tif (VAR_27 == -1) {\n\t\t\tfwarning(\"cannot create a new user namespace, going forward without it...\\n\");\n\t\t\tVAR_74 = 0;\n\t\t}\n\t}\n\n\t/* COMMENT_78 */\n \t/* COMMENT_79 */\n \tnotify_other(VAR_4[1]);\n \tclose(VAR_4[1]);\n\n \t/* COMMENT_80 */\n \twait_for_other(VAR_3[0]);\n \tclose(VAR_3[0]);\n\n\t/* COMMENT_81 */\n\t/* COMMENT_82 */\n\tif (VAR_74) {\n\t\tif (VAR_2)\n\t\t\tprintf(\"noroot user namespace installed\\n\");\n\t\tset_caps();\n\t}\n\n\t/* COMMENT_73 */\n\t/* COMMENT_83 */\n\t/* COMMENT_73 */\n\tif (VAR_76) {\n\t\tprctl(VAR_77, 1, 0, 0, 0);\n\n\t\tif (prctl(VAR_78, 0, 0, 0, 0) != 1) {\n\t\t\tfwarning(\"cannot set NO_NEW_PRIVS, it requires a Linux kernel version 3.5 or newer.\\n\");\n\t\t\tif (VAR_79) {\n\t\t\t\tfprintf(VAR_80, \"Error: NO_NEW_PRIVS required for this sandbox, exiting ...\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t}\n\t\telse if (VAR_2)\n\t\t\tprintf(\"NO_NEW_PRIVS set\\n\");\n\t}\n\n\t/* COMMENT_73 */\n\t/* COMMENT_84 */\n\t/* COMMENT_73 */\n\tdrop_privs(VAR_81);\n\n\t/* COMMENT_85 */\n\tprctl(VAR_82, VAR_83, 0, 0, 0);\n\n\t/* COMMENT_73 */\n\t/* COMMENT_86 */\n\t/* COMMENT_73 */\n\n\tif (VAR_5.cpus)\n\t\tset_cpu_affinity();\n\n\t/* COMMENT_73 */\n\t/* COMMENT_87 */\n\t/* COMMENT_73 */\n\tpid_t VAR_84 = fork();\n\tif (VAR_84 == -1)\n\t\terrExit(\"fork\");\n\n\tif (VAR_84 == 0) {\n#ifdef VAR_85\n\t\tif (checkcfg(VAR_86) && VAR_87) {\n\t\t\tVAR_88 = 0;\n\t\t\tif (aa_change_onexec(\"firejail-default\")) {\n\t\t\t\tfwarning(\"Cannot confine the application using AppArmor.\\n\"\n\t\t\t\t\t\"Maybe firejail-default AppArmor profile is not loaded into the kernel.\\n\"\n\t\t\t\t\t\"As root, run \\\"aa-enforce firejail-default\\\" to load it.\\n\");\n\t\t\t}\n\t\t\telse if (VAR_2)\n\t\t\t\tprintf(\"AppArmor enabled\\n\");\n\t\t}\n#endif\n\t\t/* COMMENT_88 */\n\t\tif (VAR_89)\n\t\t\tset_nice(VAR_5.nice);\n\t\tset_rlimits();\n\n\t\tstart_application(0, VAR_73);\n\t}\n\n\tfclose(VAR_73);\n\n\tint VAR_90 = monitor_application(VAR_84);\t/* COMMENT_89 */\n\tflush_stdin();\n\n\tif (WIFEXITED(VAR_90)) {\n\t\t/* COMMENT_90 */\n\t\treturn WEXITSTATUS(VAR_90);\n\t} else {\n\t\t/* COMMENT_91 */\n\t\treturn -1;\n\t}\n}",
  "func_graph_path": "netblue30/firejail/eecf35c2f8249489a1d3e512bb07f0d427183134/sandbox.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -472,9 +472,6 @@\n \t// save state of nonewprivs\n \tsave_nonewprivs();\n \n-\t// set capabilities\n-\tset_caps();\n-\n \t// save cpu affinity mask to CPU_CFG file\n \tsave_cpu();\n \n@@ -520,7 +517,12 @@\n \t\tint rv = unlink(RUN_SECCOMP_MDWX);\n \t\t(void) rv;\n \t}\n+\t// make seccomp filters read-only\n+\tfs_rdonly(RUN_SECCOMP_DIR);\n #endif\n+\n+\t// set capabilities\n+\tset_caps();\n \n \t//****************************************\n \t// communicate progress of sandbox set up",
  "diff_line_info": {
    "deleted_lines": [
      "\t// set capabilities",
      "\tset_caps();",
      ""
    ],
    "added_lines": [
      "\t// make seccomp filters read-only",
      "\tfs_rdonly(RUN_SECCOMP_DIR);",
      "",
      "\t// set capabilities",
      "\tset_caps();"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/netblue30/firejail/pull/2602",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/netblue30/firejail/pull/2602: 403 Client Error: Forbidden for url: https://api.github.com/repos/netblue30/firejail/pulls/2602",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Step1: Input Analysis**  \nThe commit message mentions making seccomp files read-only and removing user-owned libfiles, which suggests a focus on filesystem security. The code diff shows filesystem operations, including adding `fs_rdonly` and delayed capability setting, aligning with the commit's intent.\n\n**Step2: Consistency Check**  \nThe code changes match the commit message, with modifications to filesystem permissions and capability management.\n\n**Step3: Purpose Evaluation**  \nChanges target reducing writable/executable filesystem locations, a security concern.\n\n**Step4: Security Vulnerability Assessment**  \nFixes an exploitable issue by limiting write access, a known security risk. No CVE/CWE given but context suffices.\n\n**Step5: Non-Security Classification**  \nNot applicable; it's a security fix.\n\n**Step6: Confidence Scoring**  \nHigh confidence as changes directly address security concerns.\n\n**Final Classification:** Security Vulnerability Fix; **Confidence:** 0.9"
}