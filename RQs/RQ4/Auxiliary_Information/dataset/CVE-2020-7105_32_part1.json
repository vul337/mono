{
  "cve_id": "CVE-2020-7105",
  "cwe_ids": [
    "CWE-476"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "redis/hiredis",
  "commit_msg": "Safe allocation wrappers (#754)\n\nCreate allocation wrappers with a configurable OOM handler (defaults to abort()).\r\n\r\nSee #752, #747",
  "commit_hash": "669ac9d0c843f9ccf07d4969ff6bff75fafee01f",
  "git_url": "https://github.com/redis/hiredis/commit/669ac9d0c843f9ccf07d4969ff6bff75fafee01f",
  "file_path": "adapters/libevent.h",
  "func_name": "redisLibeventAttach",
  "func_before": "static int redisLibeventAttach(redisAsyncContext *ac, struct event_base *base) {\n    redisContext *c = &(ac->c);\n    redisLibeventEvents *e;\n\n    /* Nothing should be attached when something is already attached */\n    if (ac->ev.data != NULL)\n        return REDIS_ERR;\n\n    /* Create container for context and r/w events */\n    e = (redisLibeventEvents*)calloc(1, sizeof(*e));\n    e->context = ac;\n\n    /* Register functions to start/stop listening for events */\n    ac->ev.addRead = redisLibeventAddRead;\n    ac->ev.delRead = redisLibeventDelRead;\n    ac->ev.addWrite = redisLibeventAddWrite;\n    ac->ev.delWrite = redisLibeventDelWrite;\n    ac->ev.cleanup = redisLibeventCleanup;\n    ac->ev.scheduleTimer = redisLibeventSetTimeout;\n    ac->ev.data = e;\n\n    /* Initialize and install read/write events */\n    e->ev = event_new(base, c->fd, EV_READ | EV_WRITE, redisLibeventHandler, e);\n    e->base = base;\n    return REDIS_OK;\n}",
  "abstract_func_before": "static int redisLibeventAttach(redisAsyncContext *VAR_0, struct event_base *VAR_1) {\n    redisContext *VAR_2 = &(VAR_0->c);\n    redisLibeventEvents *VAR_3;\n\n    /* COMMENT_0 */\n    if (VAR_0->ev.data != NULL)\n        return VAR_4;\n\n    /* COMMENT_1 */\n    VAR_3 = (redisLibeventEvents*)calloc(1, sizeof(*VAR_3));\n    VAR_3->context = VAR_0;\n\n    /* COMMENT_2 */\n    VAR_0->ev.addRead = VAR_5;\n    VAR_0->ev.delRead = VAR_6;\n    VAR_0->ev.addWrite = VAR_7;\n    VAR_0->ev.delWrite = VAR_8;\n    VAR_0->ev.cleanup = VAR_9;\n    VAR_0->ev.scheduleTimer = VAR_10;\n    VAR_0->ev.data = VAR_3;\n\n    /* COMMENT_3 */\n    VAR_3->ev = event_new(VAR_1, VAR_2->fd, VAR_11 | VAR_12, VAR_13, VAR_3);\n    VAR_3->base = VAR_1;\n    return VAR_14;\n}",
  "func_graph_path_before": "redis/hiredis/669ac9d0c843f9ccf07d4969ff6bff75fafee01f/libevent.h/vul/before/0.json",
  "func": "static int redisLibeventAttach(redisAsyncContext *ac, struct event_base *base) {\n    redisContext *c = &(ac->c);\n    redisLibeventEvents *e;\n\n    /* Nothing should be attached when something is already attached */\n    if (ac->ev.data != NULL)\n        return REDIS_ERR;\n\n    /* Create container for context and r/w events */\n    e = (redisLibeventEvents*)hi_calloc(1, sizeof(*e));\n    e->context = ac;\n\n    /* Register functions to start/stop listening for events */\n    ac->ev.addRead = redisLibeventAddRead;\n    ac->ev.delRead = redisLibeventDelRead;\n    ac->ev.addWrite = redisLibeventAddWrite;\n    ac->ev.delWrite = redisLibeventDelWrite;\n    ac->ev.cleanup = redisLibeventCleanup;\n    ac->ev.scheduleTimer = redisLibeventSetTimeout;\n    ac->ev.data = e;\n\n    /* Initialize and install read/write events */\n    e->ev = event_new(base, c->fd, EV_READ | EV_WRITE, redisLibeventHandler, e);\n    e->base = base;\n    return REDIS_OK;\n}",
  "abstract_func": "static int redisLibeventAttach(redisAsyncContext *VAR_0, struct event_base *VAR_1) {\n    redisContext *VAR_2 = &(VAR_0->c);\n    redisLibeventEvents *VAR_3;\n\n    /* COMMENT_0 */\n    if (VAR_0->ev.data != NULL)\n        return VAR_4;\n\n    /* COMMENT_1 */\n    VAR_3 = (redisLibeventEvents*)hi_calloc(1, sizeof(*VAR_3));\n    VAR_3->context = VAR_0;\n\n    /* COMMENT_2 */\n    VAR_0->ev.addRead = VAR_5;\n    VAR_0->ev.delRead = VAR_6;\n    VAR_0->ev.addWrite = VAR_7;\n    VAR_0->ev.delWrite = VAR_8;\n    VAR_0->ev.cleanup = VAR_9;\n    VAR_0->ev.scheduleTimer = VAR_10;\n    VAR_0->ev.data = VAR_3;\n\n    /* COMMENT_3 */\n    VAR_3->ev = event_new(VAR_1, VAR_2->fd, VAR_11 | VAR_12, VAR_13, VAR_3);\n    VAR_3->base = VAR_1;\n    return VAR_14;\n}",
  "func_graph_path": "redis/hiredis/669ac9d0c843f9ccf07d4969ff6bff75fafee01f/libevent.h/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -7,7 +7,7 @@\n         return REDIS_ERR;\n \n     /* Create container for context and r/w events */\n-    e = (redisLibeventEvents*)calloc(1, sizeof(*e));\n+    e = (redisLibeventEvents*)hi_calloc(1, sizeof(*e));\n     e->context = ac;\n \n     /* Register functions to start/stop listening for events */",
  "diff_line_info": {
    "deleted_lines": [
      "    e = (redisLibeventEvents*)calloc(1, sizeof(*e));"
    ],
    "added_lines": [
      "    e = (redisLibeventEvents*)hi_calloc(1, sizeof(*e));"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/redis/hiredis/pull/754",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/redis/hiredis/pull/754: 403 Client Error: Forbidden for url: https://api.github.com/repos/redis/hiredis/pulls/754",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 0.9"
}