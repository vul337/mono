{
  "cve_id": "CVE-2022-26068",
  "cwe_ids": [
    "CWE-22"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:N/A:N",
  "cvss_is_v3": false,
  "repo_name": "pistacheio/pistache",
  "commit_msg": "fix(swagger/security): ensure that the requested file is in the UI directory\n\nThe Rest::Swagger class didn't check if the file asked from the user was\ncontained in the UI directory, thus allowing users to access arbitrary\nfiles in the filesystem.\n\nThanks to Kirill Efimov (@Kirill89) and the Snyk Security team for\nfinding and reporting the vulnerability to the Pistache team.",
  "commit_hash": "4ba6da096611d11849aa37ee342c032a306ee885",
  "git_url": "https://github.com/pistacheio/pistache/commit/4ba6da096611d11849aa37ee342c032a306ee885",
  "file_path": "src/common/description.cc",
  "func_name": "PathGroup::hasPath",
  "func_before": "bool PathGroup::hasPath(const std::string& name, Http::Method method) const\n        {\n            auto group = paths(name);\n            auto it    = std::find_if(std::begin(group), std::end(group),\n                                   [&](const Path& p) { return p.method == method; });\n            return it != std::end(group);\n        }",
  "abstract_func_before": "bool PathGroup::hasPath(const std::string& VAR_0, Http::Method VAR_1) const\n        {\n            auto VAR_2 = paths(VAR_0);\n            auto VAR_3    = std::find_if(std::begin(VAR_2), std::end(VAR_2),\n                                   [&](const Path& VAR_4) { return VAR_4.method == VAR_1; });\n            return VAR_3 != std::end(VAR_2);\n        }",
  "func_graph_path_before": "pistacheio/pistache/4ba6da096611d11849aa37ee342c032a306ee885/description.cc/vul/before/0.json",
  "func": "bool PathGroup::hasPath(const std::string& name, Http::Method method) const\n        {\n            auto group = paths(name);\n            auto it    = std::find_if(std::begin(group), std::end(group),\n                                      [&](const Path& p) { return p.method == method; });\n            return it != std::end(group);\n        }",
  "abstract_func": "bool PathGroup::hasPath(const std::string& VAR_0, Http::Method VAR_1) const\n        {\n            auto VAR_2 = paths(VAR_0);\n            auto VAR_3    = std::find_if(std::begin(VAR_2), std::end(VAR_2),\n                                      [&](const Path& VAR_4) { return VAR_4.method == VAR_1; });\n            return VAR_3 != std::end(VAR_2);\n        }",
  "func_graph_path": "pistacheio/pistache/4ba6da096611d11849aa37ee342c032a306ee885/description.cc/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -2,6 +2,6 @@\n         {\n             auto group = paths(name);\n             auto it    = std::find_if(std::begin(group), std::end(group),\n-                                   [&](const Path& p) { return p.method == method; });\n+                                      [&](const Path& p) { return p.method == method; });\n             return it != std::end(group);\n         }",
  "diff_line_info": {
    "deleted_lines": [
      "                                   [&](const Path& p) { return p.method == method; });"
    ],
    "added_lines": [
      "                                      [&](const Path& p) { return p.method == method; });"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/pistacheio/pistache/pull/1065",
  "description": {
    "pr_info": {
      "title": "fix(swagger/security): ensure that the requested file is in the UI directory",
      "number": 1065
    },
    "comment": [
      "The `Rest::Swagger` class didn't check if the file asked from the user was contained in the UI directory, thus allowing users to access arbitrary files in the filesystem.\r\n\r\nThanks to Kirill Efimov (@Kirill89) and the Snyk Security team (@snyk) for finding and reporting the vulnerability to the Pistache team.\r\n\r\nCloses #1064 ",
      "abidiff reports a potential ABI change, but that's probably related to the inclusion of `<filesystem>`. It exited with status 4, that according to the [manual](https://sourceware.org/libabigail/manual/abidiff.html#return-values) maps to `ABIDIFF_ABI_CHANGE`, meaning that the ABI changed but non necessarily in a breaking manner. As all the changes have been applied to internal code, I believe that this failure can be ignored.\r\n\r\nEdit: they seem template instantiations"
    ]
  },
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.6,
  "Bug Filter Response": "**Final Classification:** Defect Remediation & Feature Upgrades; **Confidence:** 0.6\n\nThe patch involves a modification to core logic, as indicated by the changes in the PathGroup class. However, the disparity between the described security fix and the actual code changes leads to lower confidence."
}