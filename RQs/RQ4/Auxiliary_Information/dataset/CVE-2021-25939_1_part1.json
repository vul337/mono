{
  "cve_id": "CVE-2021-25939",
  "cwe_ids": [
    "CWE-918"
  ],
  "cvss_vector": "AV:N/AC:L/Au:S/C:N/I:P/A:N",
  "cvss_is_v3": false,
  "repo_name": "arangodb",
  "commit_msg": "[APM-78] Disable installation from remote URL (#15292)",
  "commit_hash": "d9b7f019d2435f107b19a59190bf9cc27d5f34dd",
  "git_url": "https://github.com/arangodb/arangodb/commit/d9b7f019d2435f107b19a59190bf9cc27d5f34dd",
  "file_path": "arangod/V8Server/v8-actions.cpp",
  "func_name": "TRI_InitV8ServerUtils",
  "func_before": "void TRI_InitV8ServerUtils(v8::Isolate* isolate) {\n  TRI_AddGlobalFunctionVocbase(isolate,\n                               TRI_V8_ASCII_STRING(isolate, \"SYS_CLUSTER_API_JWT_POLICY\"), JS_ClusterApiJwtPolicy, true);\n  TRI_AddGlobalFunctionVocbase(isolate,\n                               TRI_V8_ASCII_STRING(isolate, \"SYS_IS_FOXX_API_DISABLED\"), JS_IsFoxxApiDisabled, true);\n  TRI_AddGlobalFunctionVocbase(isolate,\n                               TRI_V8_ASCII_STRING(isolate, \"SYS_IS_FOXX_STORE_DISABLED\"), JS_IsFoxxStoreDisabled, true);\n  TRI_AddGlobalFunctionVocbase(isolate,\n                               TRI_V8_ASCII_STRING(isolate, \"SYS_RUN_IN_RESTRICTED_CONTEXT\"), JS_RunInRestrictedContext, true);\n  \n  TRI_AddGlobalFunctionVocbase(isolate,\n                               TRI_V8_ASCII_STRING(isolate,\n                                                   \"SYS_CREATE_HOTBACKUP\"),\n                               JS_CreateHotbackup);\n\n  // debugging functions\n  TRI_AddGlobalFunctionVocbase(isolate,\n                               TRI_V8_ASCII_STRING(isolate,\n                                                   \"SYS_DEBUG_CLEAR_FAILAT\"),\n                               JS_DebugClearFailAt);\n\n#ifdef ARANGODB_ENABLE_FAILURE_TESTS\n  TRI_AddGlobalFunctionVocbase(\n      isolate, TRI_V8_ASCII_STRING(isolate, \"SYS_DEBUG_TERMINATE\"), JS_DebugTerminate);\n  TRI_AddGlobalFunctionVocbase(isolate,\n                               TRI_V8_ASCII_STRING(isolate,\n                                                   \"SYS_DEBUG_SET_FAILAT\"),\n                               JS_DebugSetFailAt);\n  TRI_AddGlobalFunctionVocbase(isolate,\n                               TRI_V8_ASCII_STRING(isolate,\n                                                   \"SYS_DEBUG_REMOVE_FAILAT\"),\n                               JS_DebugRemoveFailAt);\n  TRI_AddGlobalFunctionVocbase(isolate,\n                               TRI_V8_ASCII_STRING(isolate,\n                                                   \"SYS_DEBUG_SHOULD_FAILAT\"),\n                               JS_DebugShouldFailAt);\n#endif\n\n  // poll interval for Foxx queues\n  TRI_GET_GLOBALS();\n  FoxxFeature& foxxFeature = v8g->_server.getFeature<FoxxFeature>();\n\n  isolate->GetCurrentContext()\n      ->Global()\n      ->DefineOwnProperty(\n          TRI_IGETC, TRI_V8_ASCII_STRING(isolate, \"FOXX_QUEUES_POLL_INTERVAL\"),\n          v8::Number::New(isolate, foxxFeature.pollInterval()), v8::ReadOnly)\n      .FromMaybe(false);  // ignore result\n\n  isolate->GetCurrentContext()\n      ->Global()\n      ->DefineOwnProperty(\n          TRI_IGETC,\n          TRI_V8_ASCII_STRING(isolate, \"FOXX_STARTUP_WAIT_FOR_SELF_HEAL\"),\n          v8::Boolean::New(isolate, foxxFeature.startupWaitForSelfHeal()), v8::ReadOnly)\n      .FromMaybe(false);  // ignore result\n}",
  "abstract_func_before": "void TRI_InitV8ServerUtils(v8::Isolate* VAR_0) {\n  TRI_AddGlobalFunctionVocbase(VAR_0,\n                               TRI_V8_ASCII_STRING(VAR_0, \"SYS_CLUSTER_API_JWT_POLICY\"), VAR_1, true);\n  TRI_AddGlobalFunctionVocbase(VAR_0,\n                               TRI_V8_ASCII_STRING(VAR_0, \"SYS_IS_FOXX_API_DISABLED\"), VAR_2, true);\n  TRI_AddGlobalFunctionVocbase(VAR_0,\n                               TRI_V8_ASCII_STRING(VAR_0, \"SYS_IS_FOXX_STORE_DISABLED\"), VAR_3, true);\n  TRI_AddGlobalFunctionVocbase(VAR_0,\n                               TRI_V8_ASCII_STRING(VAR_0, \"SYS_RUN_IN_RESTRICTED_CONTEXT\"), VAR_4, true);\n  \n  TRI_AddGlobalFunctionVocbase(VAR_0,\n                               TRI_V8_ASCII_STRING(VAR_0,\n                                                   \"SYS_CREATE_HOTBACKUP\"),\n                               VAR_5);\n\n  /* COMMENT_0 */\n  TRI_AddGlobalFunctionVocbase(VAR_0,\n                               TRI_V8_ASCII_STRING(VAR_0,\n                                                   \"SYS_DEBUG_CLEAR_FAILAT\"),\n                               VAR_6);\n\n#ifdef VAR_7\n  TRI_AddGlobalFunctionVocbase(\n      VAR_0, TRI_V8_ASCII_STRING(VAR_0, \"SYS_DEBUG_TERMINATE\"), VAR_8);\n  TRI_AddGlobalFunctionVocbase(VAR_0,\n                               TRI_V8_ASCII_STRING(VAR_0,\n                                                   \"SYS_DEBUG_SET_FAILAT\"),\n                               VAR_9);\n  TRI_AddGlobalFunctionVocbase(VAR_0,\n                               TRI_V8_ASCII_STRING(VAR_0,\n                                                   \"SYS_DEBUG_REMOVE_FAILAT\"),\n                               VAR_10);\n  TRI_AddGlobalFunctionVocbase(VAR_0,\n                               TRI_V8_ASCII_STRING(VAR_0,\n                                                   \"SYS_DEBUG_SHOULD_FAILAT\"),\n                               VAR_11);\n#endif\n\n  /* COMMENT_1 */\n  TRI_GET_GLOBALS();\n  FoxxFeature& VAR_12 = VAR_13->_server.getFeature<FoxxFeature>();\n\n  VAR_0->GetCurrentContext()\n      ->Global()\n      ->DefineOwnProperty(\n          VAR_14, TRI_V8_ASCII_STRING(VAR_0, \"FOXX_QUEUES_POLL_INTERVAL\"),\n          v8::Number::New(VAR_0, VAR_12.pollInterval()), v8::ReadOnly)\n      .FromMaybe(false);  /* COMMENT_2 */\n\n  VAR_0->GetCurrentContext()\n      ->Global()\n      ->DefineOwnProperty(\n          VAR_14,\n          TRI_V8_ASCII_STRING(VAR_0, \"FOXX_STARTUP_WAIT_FOR_SELF_HEAL\"),\n          v8::Boolean::New(VAR_0, VAR_12.startupWaitForSelfHeal()), v8::ReadOnly)\n      .FromMaybe(false);  /* COMMENT_2 */\n}",
  "func_graph_path_before": "arangodb/d9b7f019d2435f107b19a59190bf9cc27d5f34dd/v8-actions.cpp/vul/before/0.json",
  "func": "void TRI_InitV8ServerUtils(v8::Isolate* isolate) {\n  TRI_AddGlobalFunctionVocbase(isolate,\n                               TRI_V8_ASCII_STRING(isolate, \"SYS_CLUSTER_API_JWT_POLICY\"), JS_ClusterApiJwtPolicy, true);\n  TRI_AddGlobalFunctionVocbase(isolate,\n                               TRI_V8_ASCII_STRING(isolate, \"SYS_IS_FOXX_API_DISABLED\"), JS_IsFoxxApiDisabled, true);\n  TRI_AddGlobalFunctionVocbase(isolate,\n                               TRI_V8_ASCII_STRING(isolate, \"SYS_IS_FOXX_STORE_DISABLED\"), JS_IsFoxxStoreDisabled, true);\n  TRI_AddGlobalFunctionVocbase(isolate,\n                               TRI_V8_ASCII_STRING(isolate, \"SYS_FOXX_ALLOW_INSTALL_FROM_REMOTE\"), JS_FoxxAllowInstallFromRemote, true);\n  TRI_AddGlobalFunctionVocbase(isolate,\n                               TRI_V8_ASCII_STRING(isolate, \"SYS_RUN_IN_RESTRICTED_CONTEXT\"), JS_RunInRestrictedContext, true);\n  \n  TRI_AddGlobalFunctionVocbase(isolate,\n                               TRI_V8_ASCII_STRING(isolate,\n                                                   \"SYS_CREATE_HOTBACKUP\"),\n                               JS_CreateHotbackup);\n\n  // debugging functions\n  TRI_AddGlobalFunctionVocbase(isolate,\n                               TRI_V8_ASCII_STRING(isolate,\n                                                   \"SYS_DEBUG_CLEAR_FAILAT\"),\n                               JS_DebugClearFailAt);\n\n#ifdef ARANGODB_ENABLE_FAILURE_TESTS\n  TRI_AddGlobalFunctionVocbase(\n      isolate, TRI_V8_ASCII_STRING(isolate, \"SYS_DEBUG_TERMINATE\"), JS_DebugTerminate);\n  TRI_AddGlobalFunctionVocbase(isolate,\n                               TRI_V8_ASCII_STRING(isolate,\n                                                   \"SYS_DEBUG_SET_FAILAT\"),\n                               JS_DebugSetFailAt);\n  TRI_AddGlobalFunctionVocbase(isolate,\n                               TRI_V8_ASCII_STRING(isolate,\n                                                   \"SYS_DEBUG_REMOVE_FAILAT\"),\n                               JS_DebugRemoveFailAt);\n  TRI_AddGlobalFunctionVocbase(isolate,\n                               TRI_V8_ASCII_STRING(isolate,\n                                                   \"SYS_DEBUG_SHOULD_FAILAT\"),\n                               JS_DebugShouldFailAt);\n#endif\n\n  // poll interval for Foxx queues\n  TRI_GET_GLOBALS();\n  FoxxFeature& foxxFeature = v8g->_server.getFeature<FoxxFeature>();\n\n  isolate->GetCurrentContext()\n      ->Global()\n      ->DefineOwnProperty(\n          TRI_IGETC, TRI_V8_ASCII_STRING(isolate, \"FOXX_QUEUES_POLL_INTERVAL\"),\n          v8::Number::New(isolate, foxxFeature.pollInterval()), v8::ReadOnly)\n      .FromMaybe(false);  // ignore result\n\n  isolate->GetCurrentContext()\n      ->Global()\n      ->DefineOwnProperty(\n          TRI_IGETC,\n          TRI_V8_ASCII_STRING(isolate, \"FOXX_STARTUP_WAIT_FOR_SELF_HEAL\"),\n          v8::Boolean::New(isolate, foxxFeature.startupWaitForSelfHeal()), v8::ReadOnly)\n      .FromMaybe(false);  // ignore result\n}",
  "abstract_func": "void TRI_InitV8ServerUtils(v8::Isolate* VAR_0) {\n  TRI_AddGlobalFunctionVocbase(VAR_0,\n                               TRI_V8_ASCII_STRING(VAR_0, \"SYS_CLUSTER_API_JWT_POLICY\"), VAR_1, true);\n  TRI_AddGlobalFunctionVocbase(VAR_0,\n                               TRI_V8_ASCII_STRING(VAR_0, \"SYS_IS_FOXX_API_DISABLED\"), VAR_2, true);\n  TRI_AddGlobalFunctionVocbase(VAR_0,\n                               TRI_V8_ASCII_STRING(VAR_0, \"SYS_IS_FOXX_STORE_DISABLED\"), VAR_3, true);\n  TRI_AddGlobalFunctionVocbase(VAR_0,\n                               TRI_V8_ASCII_STRING(VAR_0, \"SYS_FOXX_ALLOW_INSTALL_FROM_REMOTE\"), VAR_4, true);\n  TRI_AddGlobalFunctionVocbase(VAR_0,\n                               TRI_V8_ASCII_STRING(VAR_0, \"SYS_RUN_IN_RESTRICTED_CONTEXT\"), VAR_5, true);\n  \n  TRI_AddGlobalFunctionVocbase(VAR_0,\n                               TRI_V8_ASCII_STRING(VAR_0,\n                                                   \"SYS_CREATE_HOTBACKUP\"),\n                               VAR_6);\n\n  /* COMMENT_0 */\n  TRI_AddGlobalFunctionVocbase(VAR_0,\n                               TRI_V8_ASCII_STRING(VAR_0,\n                                                   \"SYS_DEBUG_CLEAR_FAILAT\"),\n                               VAR_7);\n\n#ifdef VAR_8\n  TRI_AddGlobalFunctionVocbase(\n      VAR_0, TRI_V8_ASCII_STRING(VAR_0, \"SYS_DEBUG_TERMINATE\"), VAR_9);\n  TRI_AddGlobalFunctionVocbase(VAR_0,\n                               TRI_V8_ASCII_STRING(VAR_0,\n                                                   \"SYS_DEBUG_SET_FAILAT\"),\n                               VAR_10);\n  TRI_AddGlobalFunctionVocbase(VAR_0,\n                               TRI_V8_ASCII_STRING(VAR_0,\n                                                   \"SYS_DEBUG_REMOVE_FAILAT\"),\n                               VAR_11);\n  TRI_AddGlobalFunctionVocbase(VAR_0,\n                               TRI_V8_ASCII_STRING(VAR_0,\n                                                   \"SYS_DEBUG_SHOULD_FAILAT\"),\n                               VAR_12);\n#endif\n\n  /* COMMENT_1 */\n  TRI_GET_GLOBALS();\n  FoxxFeature& VAR_13 = VAR_14->_server.getFeature<FoxxFeature>();\n\n  VAR_0->GetCurrentContext()\n      ->Global()\n      ->DefineOwnProperty(\n          VAR_15, TRI_V8_ASCII_STRING(VAR_0, \"FOXX_QUEUES_POLL_INTERVAL\"),\n          v8::Number::New(VAR_0, VAR_13.pollInterval()), v8::ReadOnly)\n      .FromMaybe(false);  /* COMMENT_2 */\n\n  VAR_0->GetCurrentContext()\n      ->Global()\n      ->DefineOwnProperty(\n          VAR_15,\n          TRI_V8_ASCII_STRING(VAR_0, \"FOXX_STARTUP_WAIT_FOR_SELF_HEAL\"),\n          v8::Boolean::New(VAR_0, VAR_13.startupWaitForSelfHeal()), v8::ReadOnly)\n      .FromMaybe(false);  /* COMMENT_2 */\n}",
  "func_graph_path": "arangodb/d9b7f019d2435f107b19a59190bf9cc27d5f34dd/v8-actions.cpp/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -5,6 +5,8 @@\n                                TRI_V8_ASCII_STRING(isolate, \"SYS_IS_FOXX_API_DISABLED\"), JS_IsFoxxApiDisabled, true);\n   TRI_AddGlobalFunctionVocbase(isolate,\n                                TRI_V8_ASCII_STRING(isolate, \"SYS_IS_FOXX_STORE_DISABLED\"), JS_IsFoxxStoreDisabled, true);\n+  TRI_AddGlobalFunctionVocbase(isolate,\n+                               TRI_V8_ASCII_STRING(isolate, \"SYS_FOXX_ALLOW_INSTALL_FROM_REMOTE\"), JS_FoxxAllowInstallFromRemote, true);\n   TRI_AddGlobalFunctionVocbase(isolate,\n                                TRI_V8_ASCII_STRING(isolate, \"SYS_RUN_IN_RESTRICTED_CONTEXT\"), JS_RunInRestrictedContext, true);\n   ",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "  TRI_AddGlobalFunctionVocbase(isolate,",
      "                               TRI_V8_ASCII_STRING(isolate, \"SYS_FOXX_ALLOW_INSTALL_FROM_REMOTE\"), JS_FoxxAllowInstallFromRemote, true);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/arangodb/arangodb/pull/15292",
  "description": {
    "pr_info": {
      "title": "[APM-78] Disable installation from remote URL",
      "number": 15292
    },
    "comment": [
      "### Scope & Purpose\r\n\r\nhttps://arangodb.atlassian.net/browse/APM-78\r\n\r\nDocs PR: https://github.com/arangodb/docs/pull/838\r\nDisable installation of Foxx apps from remote URLs by default.\r\nThis is a potential security issue and is now an opt-in functionality.\r\n\r\nThe new startup option `--foxx.allow-install-from-remote` can be used to toggle whether installing Foxx apps from remote URLs other than Github is allowed. The option is turned off by default. If it is disabled, the web UI will not offer the \"Remote\" tab for installing Foxx services.\r\n\r\n- [x] :hankey: Bugfix (requires CHANGELOG entry)\r\n- [ ] :pizza: New feature (requires CHANGELOG entry, feature documentation and release notes)\r\n- [ ] :fire: Performance improvement\r\n- [ ] :hammer: Refactoring/simplification\r\n- [x] :book: CHANGELOG entry made\r\n\r\n#### Backports:\r\n\r\n- [x] Backport for 3.9: https://github.com/arangodb/arangodb/pull/15343\r\n- [x] Backport for 3.8: https://github.com/arangodb/arangodb/pull/15344\r\n\r\n#### Related Information\r\n\r\n- [x] Docs PR: https://github.com/arangodb/docs/pull/838\r\n\r\n### Testing & Verification\r\n\r\n- [x] The behavior in this PR was *manually tested*\r\n- [ ] This change is already covered by existing tests, such as *(please describe tests)*.\r\n- [x] This PR adds tests that were used to verify all changes:\r\n  - [x] Added new **integration tests** (server_parameters)\r\n",
      "This is missing the server foxx/manager.js side, which is parsing the actual URLs/paths.\r\n\r\nI think we still want to make an exception for github tarballs, so we'd need to check for those if they're translated to URLs at that point. Alternatively we could try to intercept URLs at the input but that would mean both aardvark and the Foxx HTTP API.",
      "> This is missing the server foxx/manager.js side, which is parsing the actual URLs/paths.\r\n> \r\n> I think we still want to make an exception for github tarballs, so we'd need to check for those if they're translated to URLs at that point. Alternatively we could try to intercept URLs at the input but that would mean both aardvark and the Foxx HTTP API.\r\n\r\n@pluma: I don't understand. The current implementation disables the installation from _arbitrary_ URLs via the `/url` route. I think the other existing routes will still work, at least I tried them and could not see any problems. Can you elaborate?",
      "There are currently three ways to install a Foxx service:\r\n\r\n1) Using aardvark, from the web UI. This currently has the guard check for the `/url` route, preventing arbitrary URLs: https://github.com/arangodb/arangodb/blob/fc192e739d18726b56c094519a17ca0d5dc81bb7/js/apps/system/_admin/aardvark/APP/foxxes.js#L157\r\n\r\n2) Using the Foxx service, from the HTTP API. This currently has no such check. The check would need to look at the request body (which can also be a zip file, etc) and would need to be repeated for the replace/upgrade routes: https://github.com/arangodb/arangodb/blob/fc192e739d18726b56c094519a17ca0d5dc81bb7/js/apps/system/_api/foxx/APP/index.js#L140\r\n\r\n3) Using the legacy internal Foxx HTTP API, which simply forwards requests to the new HTTP API above.\r\n\r\nThe cleanest way to perform this check would be to do it in the Foxx manager itself, which actually implements the logic for fetching a service from whatever info it was passed (including a zip file or URL): https://github.com/arangodb/arangodb/blob/fc192e739d18726b56c094519a17ca0d5dc81bb7/js/server/modules/%40arangodb/foxx/manager.js#L563-L570\r\n\r\nIn the case of a URL this logic of course can't tell if that URL was created from passing a GitHub repo to aardvark, but we could either pass a flag down to it from aardvark to indicate the URL is \"special\" or do pattern matching to allow also passing equivalent GitHub URLs to the HTTP API (which doesn't support special syntax for GitHub repos).",
      "FWIW installs from the app store are not considered as installs from remote URLs as they are always passed by name rather than full URL."
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix;  \n**Confidence:** 0.95"
}