{
  "cve_id": "CVE-2016-6172",
  "cwe_ids": [
    "CWE-400"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:N/I:N/A:C",
  "cvss_is_v3": false,
  "repo_name": "PowerDNS/pdns",
  "commit_msg": "Add limits to the size of received {A,I}XFR, in megabytes\n\nThis prevents memory exhaustion in case the master is sending a\nvery large amount of data in an update.",
  "commit_hash": "db8f9152168acf5d548d4f256789eae783e01667",
  "git_url": "https://github.com/PowerDNS/pdns/commit/db8f9152168acf5d548d4f256789eae783e01667",
  "file_path": "pdns/rpzloader.cc",
  "func_name": "loadRPZFromServer",
  "func_before": "shared_ptr<SOARecordContent> loadRPZFromServer(const ComboAddress& master, const DNSName& zone, DNSFilterEngine& target, const std::string& polName, boost::optional<DNSFilterEngine::Policy> defpol, int place,  const TSIGTriplet& tt)\n{\n  L<<Logger::Warning<<\"Loading RPZ zone '\"<<zone<<\"' from \"<<master.toStringWithPort()<<endl;\n  if(!tt.name.empty())\n    L<<Logger::Warning<<\"With TSIG key '\"<<tt.name<<\"' of algorithm '\"<<tt.algo<<\"'\"<<endl;\n\n  ComboAddress local= master.sin4.sin_family == AF_INET ? ComboAddress(\"0.0.0.0\") : ComboAddress(\"::\"); // should be configurable\n  AXFRRetriever axfr(master, zone, tt, &local);\n  unsigned int nrecords=0;\n  Resolver::res_t nop;\n  vector<DNSRecord> chunk;\n  time_t last=0;\n  shared_ptr<SOARecordContent> sr;\n  while(axfr.getChunk(nop, &chunk)) {\n    for(auto& dr : chunk) {\n      if(dr.d_type==QType::NS || dr.d_type==QType::TSIG) {\n\tcontinue;\n      }\n\n      dr.d_name.makeUsRelative(zone);\n      if(dr.d_type==QType::SOA) {\n\tsr = getRR<SOARecordContent>(dr);\n\tcontinue;\n      }\n\n      RPZRecordToPolicy(dr, target, polName, true, defpol, place);\n      nrecords++;\n    } \n    if(last != time(0)) {\n      L<<Logger::Info<<\"Loaded & indexed \"<<nrecords<<\" policy records so far\"<<endl;\n      last=time(0);\n    }\n  }\n  L<<Logger::Info<<\"Done: \"<<nrecords<<\" policy records active, SOA: \"<<sr->getZoneRepresentation()<<endl;\n  return sr;\n}",
  "abstract_func_before": "shared_ptr<SOARecordContent> loadRPZFromServer(const ComboAddress& VAR_0, const DNSName& VAR_1, DNSFilterEngine& VAR_2, const std::string& VAR_3, boost::optional<DNSFilterEngine::Policy> VAR_4, int VAR_5,  const TSIGTriplet& VAR_6)\n{\n  VAR_7<<Logger::Warning<<\"Loading RPZ zone '\"<<VAR_1<<\"' from \"<<VAR_0.toStringWithPort()<<VAR_8;\n  if(!VAR_6.name.empty())\n    VAR_7<<Logger::Warning<<\"With TSIG key '\"<<VAR_6.name<<\"' of algorithm '\"<<VAR_6.algo<<\"'\"<<VAR_8;\n\n  ComboAddress VAR_9= VAR_0.sin4.sin_family == VAR_10 ? ComboAddress(\"0.0.0.0\") : ComboAddress(\"::\"); /* COMMENT_0 */\n  AXFRRetriever VAR_11(VAR_0, VAR_1, VAR_6, &VAR_9);\n  unsigned int VAR_12=0;\n  Resolver::res_t VAR_13;\n  vector<DNSRecord> VAR_14;\n  time_t VAR_15=0;\n  shared_ptr<SOARecordContent> VAR_16;\n  while(VAR_11.getChunk(VAR_13, &VAR_14)) {\n    for(auto& VAR_17 : VAR_14) {\n      if(VAR_17.d_type==QType::NS || VAR_17.d_type==QType::TSIG) {\n\tcontinue;\n      }\n\n      VAR_17.d_name.makeUsRelative(VAR_1);\n      if(VAR_17.d_type==QType::SOA) {\n\tVAR_16 = VAR_18<SOARecordContent>(VAR_17);\n\tcontinue;\n      }\n\n      RPZRecordToPolicy(VAR_17, VAR_2, VAR_3, true, VAR_4, VAR_5);\n      VAR_12++;\n    } \n    if(VAR_15 != time(0)) {\n      VAR_7<<Logger::Info<<\"Loaded & indexed \"<<VAR_12<<\" policy records so far\"<<VAR_8;\n      VAR_15=time(0);\n    }\n  }\n  VAR_7<<Logger::Info<<\"Done: \"<<VAR_12<<\" policy records active, SOA: \"<<VAR_16->getZoneRepresentation()<<VAR_8;\n  return VAR_16;\n}",
  "func_graph_path_before": "PowerDNS/pdns/db8f9152168acf5d548d4f256789eae783e01667/rpzloader.cc/vul/before/0.json",
  "func": "shared_ptr<SOARecordContent> loadRPZFromServer(const ComboAddress& master, const DNSName& zone, DNSFilterEngine& target, const std::string& polName, boost::optional<DNSFilterEngine::Policy> defpol, int place,  const TSIGTriplet& tt, size_t maxReceivedBytes)\n{\n  L<<Logger::Warning<<\"Loading RPZ zone '\"<<zone<<\"' from \"<<master.toStringWithPort()<<endl;\n  if(!tt.name.empty())\n    L<<Logger::Warning<<\"With TSIG key '\"<<tt.name<<\"' of algorithm '\"<<tt.algo<<\"'\"<<endl;\n\n  ComboAddress local= master.sin4.sin_family == AF_INET ? ComboAddress(\"0.0.0.0\") : ComboAddress(\"::\"); // should be configurable\n  AXFRRetriever axfr(master, zone, tt, &local, maxReceivedBytes);\n  unsigned int nrecords=0;\n  Resolver::res_t nop;\n  vector<DNSRecord> chunk;\n  time_t last=0;\n  shared_ptr<SOARecordContent> sr;\n  while(axfr.getChunk(nop, &chunk)) {\n    for(auto& dr : chunk) {\n      if(dr.d_type==QType::NS || dr.d_type==QType::TSIG) {\n\tcontinue;\n      }\n\n      dr.d_name.makeUsRelative(zone);\n      if(dr.d_type==QType::SOA) {\n\tsr = getRR<SOARecordContent>(dr);\n\tcontinue;\n      }\n\n      RPZRecordToPolicy(dr, target, polName, true, defpol, place);\n      nrecords++;\n    } \n    if(last != time(0)) {\n      L<<Logger::Info<<\"Loaded & indexed \"<<nrecords<<\" policy records so far\"<<endl;\n      last=time(0);\n    }\n  }\n  L<<Logger::Info<<\"Done: \"<<nrecords<<\" policy records active, SOA: \"<<sr->getZoneRepresentation()<<endl;\n  return sr;\n}",
  "abstract_func": "shared_ptr<SOARecordContent> loadRPZFromServer(const ComboAddress& VAR_0, const DNSName& VAR_1, DNSFilterEngine& VAR_2, const std::string& VAR_3, boost::optional<DNSFilterEngine::Policy> VAR_4, int VAR_5,  const TSIGTriplet& VAR_6, size_t VAR_7)\n{\n  VAR_8<<Logger::Warning<<\"Loading RPZ zone '\"<<VAR_1<<\"' from \"<<VAR_0.toStringWithPort()<<VAR_9;\n  if(!VAR_6.name.empty())\n    VAR_8<<Logger::Warning<<\"With TSIG key '\"<<VAR_6.name<<\"' of algorithm '\"<<VAR_6.algo<<\"'\"<<VAR_9;\n\n  ComboAddress VAR_10= VAR_0.sin4.sin_family == VAR_11 ? ComboAddress(\"0.0.0.0\") : ComboAddress(\"::\"); /* COMMENT_0 */\n  AXFRRetriever VAR_12(VAR_0, VAR_1, VAR_6, &VAR_10, VAR_7);\n  unsigned int VAR_13=0;\n  Resolver::res_t VAR_14;\n  vector<DNSRecord> VAR_15;\n  time_t VAR_16=0;\n  shared_ptr<SOARecordContent> VAR_17;\n  while(VAR_12.getChunk(VAR_14, &VAR_15)) {\n    for(auto& VAR_18 : VAR_15) {\n      if(VAR_18.d_type==QType::NS || VAR_18.d_type==QType::TSIG) {\n\tcontinue;\n      }\n\n      VAR_18.d_name.makeUsRelative(VAR_1);\n      if(VAR_18.d_type==QType::SOA) {\n\tVAR_17 = VAR_19<SOARecordContent>(VAR_18);\n\tcontinue;\n      }\n\n      RPZRecordToPolicy(VAR_18, VAR_2, VAR_3, true, VAR_4, VAR_5);\n      VAR_13++;\n    } \n    if(VAR_16 != time(0)) {\n      VAR_8<<Logger::Info<<\"Loaded & indexed \"<<VAR_13<<\" policy records so far\"<<VAR_9;\n      VAR_16=time(0);\n    }\n  }\n  VAR_8<<Logger::Info<<\"Done: \"<<VAR_13<<\" policy records active, SOA: \"<<VAR_17->getZoneRepresentation()<<VAR_9;\n  return VAR_17;\n}",
  "func_graph_path": "PowerDNS/pdns/db8f9152168acf5d548d4f256789eae783e01667/rpzloader.cc/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,11 +1,11 @@\n-shared_ptr<SOARecordContent> loadRPZFromServer(const ComboAddress& master, const DNSName& zone, DNSFilterEngine& target, const std::string& polName, boost::optional<DNSFilterEngine::Policy> defpol, int place,  const TSIGTriplet& tt)\n+shared_ptr<SOARecordContent> loadRPZFromServer(const ComboAddress& master, const DNSName& zone, DNSFilterEngine& target, const std::string& polName, boost::optional<DNSFilterEngine::Policy> defpol, int place,  const TSIGTriplet& tt, size_t maxReceivedBytes)\n {\n   L<<Logger::Warning<<\"Loading RPZ zone '\"<<zone<<\"' from \"<<master.toStringWithPort()<<endl;\n   if(!tt.name.empty())\n     L<<Logger::Warning<<\"With TSIG key '\"<<tt.name<<\"' of algorithm '\"<<tt.algo<<\"'\"<<endl;\n \n   ComboAddress local= master.sin4.sin_family == AF_INET ? ComboAddress(\"0.0.0.0\") : ComboAddress(\"::\"); // should be configurable\n-  AXFRRetriever axfr(master, zone, tt, &local);\n+  AXFRRetriever axfr(master, zone, tt, &local, maxReceivedBytes);\n   unsigned int nrecords=0;\n   Resolver::res_t nop;\n   vector<DNSRecord> chunk;",
  "diff_line_info": {
    "deleted_lines": [
      "shared_ptr<SOARecordContent> loadRPZFromServer(const ComboAddress& master, const DNSName& zone, DNSFilterEngine& target, const std::string& polName, boost::optional<DNSFilterEngine::Policy> defpol, int place,  const TSIGTriplet& tt)",
      "  AXFRRetriever axfr(master, zone, tt, &local);"
    ],
    "added_lines": [
      "shared_ptr<SOARecordContent> loadRPZFromServer(const ComboAddress& master, const DNSName& zone, DNSFilterEngine& target, const std::string& polName, boost::optional<DNSFilterEngine::Policy> defpol, int place,  const TSIGTriplet& tt, size_t maxReceivedBytes)",
      "  AXFRRetriever axfr(master, zone, tt, &local, maxReceivedBytes);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/PowerDNS/pdns/pull/4133",
  "description": {
    "pr_info": {
      "title": "Add limits to the size of received {A,I}XFR, in megabytes",
      "number": 4133
    },
    "comment": [
      "This prevents memory exhaustion in case the master is sending a\nvery large amount of data in an update.\n",
      "LGTM from a quick glance.\n",
      "Fixes #4128 for master.\n",
      "This is ready for merge if you ask me.\n"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.9"
}