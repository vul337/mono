{
  "cve_id": "CVE-2021-29442",
  "cwe_ids": [
    "CWE-306"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:N/A:N",
  "cvss_is_v3": false,
  "repo_name": "alibaba/nacos",
  "commit_msg": "fix derbyOps interface security problem",
  "commit_hash": "bffd440297618d189a7c8cac26191147d763cc6f",
  "git_url": "https://github.com/alibaba/nacos/commit/bffd440297618d189a7c8cac26191147d763cc6f",
  "file_path": "config/src/main/java/com/alibaba/nacos/config/server/controller/ConfigOpsController.java",
  "func_name": "derbyOps",
  "func_before": "@GetMapping(value = \"/derby\")\n    public RestResult<Object> derbyOps(@RequestParam(value = \"sql\") String sql) {\n        String selectSign = \"select\";\n        String limitSign = \"ROWS FETCH NEXT\";\n        String limit = \" OFFSET 0 ROWS FETCH NEXT 1000 ROWS ONLY\";\n        try {\n            if (PropertyUtil.isEmbeddedStorage()) {\n                LocalDataSourceServiceImpl dataSourceService = (LocalDataSourceServiceImpl) DynamicDataSource\n                        .getInstance().getDataSource();\n                if (StringUtils.startsWithIgnoreCase(sql, selectSign)) {\n                    if (!StringUtils.containsIgnoreCase(sql, limitSign)) {\n                        sql += limit;\n                    }\n                    JdbcTemplate template = dataSourceService.getJdbcTemplate();\n                    List<Map<String, Object>> result = template.queryForList(sql);\n                    return RestResultUtils.success(result);\n                }\n                return RestResultUtils.failed(\"Only query statements are allowed to be executed\");\n            }\n            return RestResultUtils.failed(\"The current storage mode is not Derby\");\n        } catch (Exception e) {\n            return RestResultUtils.failed(e.getMessage());\n        }\n    }",
  "abstract_func_before": "@GetMapping(VAR_0 = \"/derby\")\n    public RestResult<Object> derbyOps(@RequestParam(VAR_0 = \"sql\") String VAR_1) {\n        String VAR_2 = \"select\";\n        String VAR_3 = \"ROWS FETCH NEXT\";\n        String VAR_4 = \" OFFSET 0 ROWS FETCH NEXT 1000 ROWS ONLY\";\n        try {\n            if (VAR_5.isEmbeddedStorage()) {\n                LocalDataSourceServiceImpl VAR_6 = (LocalDataSourceServiceImpl) VAR_7\n                        .getInstance().getDataSource();\n                if (VAR_8.startsWithIgnoreCase(VAR_1, VAR_2)) {\n                    if (!VAR_8.containsIgnoreCase(VAR_1, VAR_3)) {\n                        VAR_1 += VAR_4;\n                    }\n                    JdbcTemplate VAR_9 = VAR_6.getJdbcTemplate();\n                    List<Map<String, Object>> VAR_10 = VAR_9.queryForList(VAR_1);\n                    return VAR_11.success(VAR_10);\n                }\n                return VAR_11.failed(\"Only query statements are allowed to be executed\");\n            }\n            return VAR_11.failed(\"The current storage mode is not Derby\");\n        } catch (Exception VAR_12) {\n            return VAR_11.failed(VAR_12.getMessage());\n        }\n    }",
  "func_graph_path_before": "alibaba/nacos/bffd440297618d189a7c8cac26191147d763cc6f/ConfigOpsController.java/vul/before/0.json",
  "func": "@GetMapping(value = \"/derby\")\n    @Secured(action = ActionTypes.READ, resource = \"nacos/admin\")\n    public RestResult<Object> derbyOps(@RequestParam(value = \"sql\") String sql) {\n        String selectSign = \"select\";\n        String limitSign = \"ROWS FETCH NEXT\";\n        String limit = \" OFFSET 0 ROWS FETCH NEXT 1000 ROWS ONLY\";\n        try {\n            if (PropertyUtil.isEmbeddedStorage()) {\n                LocalDataSourceServiceImpl dataSourceService = (LocalDataSourceServiceImpl) DynamicDataSource\n                        .getInstance().getDataSource();\n                if (StringUtils.startsWithIgnoreCase(sql, selectSign)) {\n                    if (!StringUtils.containsIgnoreCase(sql, limitSign)) {\n                        sql += limit;\n                    }\n                    JdbcTemplate template = dataSourceService.getJdbcTemplate();\n                    List<Map<String, Object>> result = template.queryForList(sql);\n                    return RestResultUtils.success(result);\n                }\n                return RestResultUtils.failed(\"Only query statements are allowed to be executed\");\n            }\n            return RestResultUtils.failed(\"The current storage mode is not Derby\");\n        } catch (Exception e) {\n            return RestResultUtils.failed(e.getMessage());\n        }\n    }",
  "abstract_func": "@GetMapping(VAR_0 = \"/derby\")\n    @Secured(VAR_1 = VAR_2.READ, VAR_3 = \"nacos/admin\")\n    public RestResult<Object> derbyOps(@RequestParam(VAR_0 = \"sql\") String VAR_4) {\n        String VAR_5 = \"select\";\n        String VAR_6 = \"ROWS FETCH NEXT\";\n        String VAR_7 = \" OFFSET 0 ROWS FETCH NEXT 1000 ROWS ONLY\";\n        try {\n            if (VAR_8.isEmbeddedStorage()) {\n                LocalDataSourceServiceImpl VAR_9 = (LocalDataSourceServiceImpl) VAR_10\n                        .getInstance().getDataSource();\n                if (VAR_11.startsWithIgnoreCase(VAR_4, VAR_5)) {\n                    if (!VAR_11.containsIgnoreCase(VAR_4, VAR_6)) {\n                        VAR_4 += VAR_7;\n                    }\n                    JdbcTemplate VAR_12 = VAR_9.getJdbcTemplate();\n                    List<Map<String, Object>> VAR_13 = VAR_12.queryForList(VAR_4);\n                    return VAR_14.success(VAR_13);\n                }\n                return VAR_14.failed(\"Only query statements are allowed to be executed\");\n            }\n            return VAR_14.failed(\"The current storage mode is not Derby\");\n        } catch (Exception VAR_15) {\n            return VAR_14.failed(VAR_15.getMessage());\n        }\n    }",
  "func_graph_path": "alibaba/nacos/bffd440297618d189a7c8cac26191147d763cc6f/ConfigOpsController.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,4 +1,5 @@\n @GetMapping(value = \"/derby\")\n+    @Secured(action = ActionTypes.READ, resource = \"nacos/admin\")\n     public RestResult<Object> derbyOps(@RequestParam(value = \"sql\") String sql) {\n         String selectSign = \"select\";\n         String limitSign = \"ROWS FETCH NEXT\";",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "    @Secured(action = ActionTypes.READ, resource = \"nacos/admin\")"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/alibaba/nacos/pull/4517",
  "description": {
    "pr_info": {
      "title": "[ISSUE #4463] fix derbyOps interface security problem",
      "number": 4517
    },
    "comment": [
      "Please do not create a Pull Request without creating an issue first.\r\n\r\n## What is the purpose of the change\r\n\r\nfix #4463\r\n\r\n## Brief changelog\r\n\r\nXX\r\n\r\n## Verifying this change\r\n\r\nXXXX\r\n\r\nFollow this checklist to help us incorporate your contribution quickly and easily:\r\n\r\n* [x] Make sure there is a Github issue filed for the change (usually before you start working on it). Trivial changes like typos do not require a Github issue. Your pull request should address just this issue, without pulling in other changes - one PR resolves one issue.\r\n* [x] Format the pull request title like `[ISSUE #123] Fix UnknownException when host config not exist`. Each commit in the pull request should have a meaningful subject line and body.\r\n* [x] Write a pull request description that is detailed enough to understand what the pull request does, how, and why.\r\n* [x] Write necessary unit-test to verify your logic correction, more mock a little better when cross module dependency exist. If the new feature or significant change is committed, please remember to add integration-test in [test module](https://github.com/alibaba/nacos/tree/master/test).\r\n* [x] Run `mvn -B clean package apache-rat:check findbugs:findbugs -Dmaven.test.skip=true` to make sure basic checks pass. Run `mvn clean install -DskipITs` to make sure unit-test pass. Run `mvn clean test-compile failsafe:integration-test`  to make sure integration-test pass.\r\n\r\n"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 0.9"
}