{
  "cve_id": "CVE-2022-44262",
  "cwe_ids": [
    "CWE-Other"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
  "cvss_is_v3": true,
  "repo_name": "ff4j",
  "commit_msg": "fix: Add assignable check to PropertiesParser, YamlParser and XmlParser (#624)",
  "commit_hash": "e915c026aef46b502934cb05a825ea2ea15eb9e6",
  "git_url": "https://github.com/ff4j/ff4j/commit/e915c026aef46b502934cb05a825ea2ea15eb9e6",
  "file_path": "ff4j-core/src/main/java/org/ff4j/conf/XmlParser.java",
  "func_name": "parsePropertiesTag",
  "func_before": "private Map < String , Property<?>> parsePropertiesTag(Element propertiesTag) {\n        Map< String , Property<?>> properties = new HashMap<String, Property<?>>(); \n        // <properties>\n        NodeList lisOfProperties = propertiesTag.getElementsByTagName(PROPERTY_TAG);\n        for (int k = 0; k < lisOfProperties.getLength(); k++) {\n            // <property name='' value='' (type='') >\n            Element propertyTag = (Element) lisOfProperties.item(k);\n            NamedNodeMap attMap = propertyTag.getAttributes();\n            if (attMap.getNamedItem(PROPERTY_PARAMNAME) == null) {\n                throw new IllegalArgumentException(\"Invalid XML Syntax, \"\n                        + \"'name' is a required attribute of 'property' TAG\");\n            }\n            if (attMap.getNamedItem(PROPERTY_PARAMVALUE) == null) {\n                throw new IllegalArgumentException(\"Invalid XML Syntax, \"\n                        + \"'value' is a required attribute of 'property' TAG\");\n            }\n            String name  = attMap.getNamedItem(PROPERTY_PARAMNAME).getNodeValue();\n            String value = unEscapeXML(attMap.getNamedItem(PROPERTY_PARAMVALUE).getNodeValue());\n            Property<?> ap = new PropertyString(name, value);\n            \n            // If specific type defined ?\n            if (null != attMap.getNamedItem(PROPERTY_PARAMTYPE)) {\n                String optionalType = attMap.getNamedItem(PROPERTY_PARAMTYPE).getNodeValue();\n               \n                // Substitution if relevant (e.g. 'int' -> 'org.ff4j.property.PropertyInt')\n                optionalType = MappingUtil.mapPropertyType(optionalType);\n                \n                try {\n                    // Constructor (String, String) is mandatory in Property interface\n                    Constructor<?> constr = Class.forName(optionalType).getConstructor(String.class, String.class);\n                    ap = (Property<?>) constr.newInstance(name, value);\n                } catch (Exception e) {\n                    throw new IllegalArgumentException(\"Cannot instantiate '\" + optionalType + \"' check default constructor\", e);\n                }\n            }\n            \n            if (null != attMap.getNamedItem(PROPERTY_PARAMDESCRIPTION)) {\n                ap.setDescription(unEscapeXML(\n                        attMap.getNamedItem(PROPERTY_PARAMDESCRIPTION)\n                              .getNodeValue()));\n            }\n            \n            // Is there any fixed Value ?\n            NodeList listOfFixedValue = propertyTag.getElementsByTagName(PROPERTY_PARAMFIXED_VALUES);\n            if (listOfFixedValue.getLength() != 0) {\n                Element fixedValueTag = (Element) listOfFixedValue.item(0);\n                NodeList listOfValues =  fixedValueTag.getElementsByTagName(PROPERTY_PARAMVALUE);\n                for (int l = 0; l < listOfValues.getLength(); l++) {\n                    Element valueTag = (Element) listOfValues.item(l);\n                    ap.add2FixedValueFromString(unEscapeXML(valueTag.getTextContent()));\n                }\n            }\n            \n            // Check fixed value\n            if (ap.getFixedValues() != null && !ap.getFixedValues().contains(ap.getValue())) {\n                throw new IllegalArgumentException(\"Cannot create property <\" + ap.getName() + \n                        \"> invalid value <\" + ap.getValue() + \n                        \"> expected one of \" + ap.getFixedValues());\n            }\n            \n            properties.put(name, ap);\n        }\n        return properties;\n    }",
  "abstract_func_before": "private Map < String , Property<?>> parsePropertiesTag(Element VAR_0) {\n        Map< String , Property<?>> VAR_1 = new HashMap<String, Property<?>>(); \n        /* COMMENT_0 */\n        NodeList VAR_2 = VAR_0.getElementsByTagName(VAR_3);\n        for (int VAR_4 = 0; VAR_4 < VAR_2.getLength(); VAR_4++) {\n            /* COMMENT_1 */\n            Element VAR_5 = (Element) VAR_2.item(VAR_4);\n            NamedNodeMap VAR_6 = VAR_5.getAttributes();\n            if (VAR_6.getNamedItem(VAR_7) == null) {\n                throw new IllegalArgumentException(\"Invalid XML Syntax, \"\n                        + \"'name' is a required attribute of 'property' TAG\");\n            }\n            if (VAR_6.getNamedItem(VAR_8) == null) {\n                throw new IllegalArgumentException(\"Invalid XML Syntax, \"\n                        + \"'value' is a required attribute of 'property' TAG\");\n            }\n            String VAR_9  = VAR_6.getNamedItem(VAR_7).getNodeValue();\n            String VAR_10 = unEscapeXML(VAR_6.getNamedItem(VAR_8).getNodeValue());\n            Property<?> VAR_11 = new PropertyString(VAR_9, VAR_10);\n            \n            /* COMMENT_2 */\n            if (null != VAR_6.getNamedItem(VAR_12)) {\n                String VAR_13 = VAR_6.getNamedItem(VAR_12).getNodeValue();\n               \n                /* COMMENT_3 */\n                VAR_13 = VAR_14.mapPropertyType(VAR_13);\n                \n                try {\n                    /* COMMENT_4 */\n                    Constructor<?> VAR_15 = VAR_16.forName(VAR_13).getConstructor(String.class, String.class);\n                    VAR_11 = (Property<?>) VAR_15.newInstance(VAR_9, VAR_10);\n                } catch (Exception VAR_17) {\n                    throw new IllegalArgumentException(\"Cannot instantiate '\" + VAR_13 + \"' check default constructor\", VAR_17);\n                }\n            }\n            \n            if (null != VAR_6.getNamedItem(VAR_18)) {\n                VAR_11.setDescription(unEscapeXML(\n                        VAR_6.getNamedItem(VAR_18)\n                              .getNodeValue()));\n            }\n            \n            /* COMMENT_5 */\n            NodeList VAR_19 = VAR_5.getElementsByTagName(VAR_20);\n            if (VAR_19.getLength() != 0) {\n                Element VAR_21 = (Element) VAR_19.item(0);\n                NodeList VAR_22 =  VAR_21.getElementsByTagName(VAR_8);\n                for (int VAR_23 = 0; VAR_23 < VAR_22.getLength(); VAR_23++) {\n                    Element VAR_24 = (Element) VAR_22.item(VAR_23);\n                    VAR_11.add2FixedValueFromString(unEscapeXML(VAR_24.getTextContent()));\n                }\n            }\n            \n            /* COMMENT_6 */\n            if (VAR_11.getFixedValues() != null && !VAR_11.getFixedValues().contains(VAR_11.getValue())) {\n                throw new IllegalArgumentException(\"Cannot create property <\" + VAR_11.getName() + \n                        \"> invalid value <\" + VAR_11.getValue() + \n                        \"> expected one of \" + VAR_11.getFixedValues());\n            }\n            \n            VAR_1.put(VAR_9, VAR_11);\n        }\n        return VAR_1;\n    }",
  "func_graph_path_before": "ff4j/e915c026aef46b502934cb05a825ea2ea15eb9e6/XmlParser.java/vul/before/0.json",
  "func": "private Map < String , Property<?>> parsePropertiesTag(Element propertiesTag) {\n        Map< String , Property<?>> properties = new HashMap<String, Property<?>>(); \n        // <properties>\n        NodeList lisOfProperties = propertiesTag.getElementsByTagName(PROPERTY_TAG);\n        for (int k = 0; k < lisOfProperties.getLength(); k++) {\n            // <property name='' value='' (type='') >\n            Element propertyTag = (Element) lisOfProperties.item(k);\n            NamedNodeMap attMap = propertyTag.getAttributes();\n            if (attMap.getNamedItem(PROPERTY_PARAMNAME) == null) {\n                throw new IllegalArgumentException(\"Invalid XML Syntax, \"\n                        + \"'name' is a required attribute of 'property' TAG\");\n            }\n            if (attMap.getNamedItem(PROPERTY_PARAMVALUE) == null) {\n                throw new IllegalArgumentException(\"Invalid XML Syntax, \"\n                        + \"'value' is a required attribute of 'property' TAG\");\n            }\n            String name  = attMap.getNamedItem(PROPERTY_PARAMNAME).getNodeValue();\n            String value = unEscapeXML(attMap.getNamedItem(PROPERTY_PARAMVALUE).getNodeValue());\n            Property<?> ap = new PropertyString(name, value);\n            \n            // If specific type defined ?\n            if (null != attMap.getNamedItem(PROPERTY_PARAMTYPE)) {\n                String optionalType = attMap.getNamedItem(PROPERTY_PARAMTYPE).getNodeValue();\n               \n                // Substitution if relevant (e.g. 'int' -> 'org.ff4j.property.PropertyInt')\n                optionalType = MappingUtil.mapPropertyType(optionalType);\n                \n                try {\n                    // Constructor (String, String) is mandatory in Property interface\n                    Class<?> typeClass = Class.forName(optionalType);\n                    if (!Property.class.isAssignableFrom(typeClass)) {\n                        throw new IllegalArgumentException(\"Cannot create property <\" + name + \"> invalid type <\" + optionalType + \">\");\n                    }\n                    Constructor<?> constr = typeClass.getConstructor(String.class, String.class);\n                    ap = (Property<?>) constr.newInstance(name, value);\n                } catch (Exception e) {\n                    throw new IllegalArgumentException(\"Cannot instantiate '\" + optionalType + \"' check default constructor\", e);\n                }\n            }\n            \n            if (null != attMap.getNamedItem(PROPERTY_PARAMDESCRIPTION)) {\n                ap.setDescription(unEscapeXML(\n                        attMap.getNamedItem(PROPERTY_PARAMDESCRIPTION)\n                              .getNodeValue()));\n            }\n            \n            // Is there any fixed Value ?\n            NodeList listOfFixedValue = propertyTag.getElementsByTagName(PROPERTY_PARAMFIXED_VALUES);\n            if (listOfFixedValue.getLength() != 0) {\n                Element fixedValueTag = (Element) listOfFixedValue.item(0);\n                NodeList listOfValues =  fixedValueTag.getElementsByTagName(PROPERTY_PARAMVALUE);\n                for (int l = 0; l < listOfValues.getLength(); l++) {\n                    Element valueTag = (Element) listOfValues.item(l);\n                    ap.add2FixedValueFromString(unEscapeXML(valueTag.getTextContent()));\n                }\n            }\n            \n            // Check fixed value\n            if (ap.getFixedValues() != null && !ap.getFixedValues().contains(ap.getValue())) {\n                throw new IllegalArgumentException(\"Cannot create property <\" + ap.getName() + \n                        \"> invalid value <\" + ap.getValue() + \n                        \"> expected one of \" + ap.getFixedValues());\n            }\n            \n            properties.put(name, ap);\n        }\n        return properties;\n    }",
  "abstract_func": "private Map < String , Property<?>> parsePropertiesTag(Element VAR_0) {\n        Map< String , Property<?>> VAR_1 = new HashMap<String, Property<?>>(); \n        /* COMMENT_0 */\n        NodeList VAR_2 = VAR_0.getElementsByTagName(VAR_3);\n        for (int VAR_4 = 0; VAR_4 < VAR_2.getLength(); VAR_4++) {\n            /* COMMENT_1 */\n            Element VAR_5 = (Element) VAR_2.item(VAR_4);\n            NamedNodeMap VAR_6 = VAR_5.getAttributes();\n            if (VAR_6.getNamedItem(VAR_7) == null) {\n                throw new IllegalArgumentException(\"Invalid XML Syntax, \"\n                        + \"'name' is a required attribute of 'property' TAG\");\n            }\n            if (VAR_6.getNamedItem(VAR_8) == null) {\n                throw new IllegalArgumentException(\"Invalid XML Syntax, \"\n                        + \"'value' is a required attribute of 'property' TAG\");\n            }\n            String VAR_9  = VAR_6.getNamedItem(VAR_7).getNodeValue();\n            String VAR_10 = unEscapeXML(VAR_6.getNamedItem(VAR_8).getNodeValue());\n            Property<?> VAR_11 = new PropertyString(VAR_9, VAR_10);\n            \n            /* COMMENT_2 */\n            if (null != VAR_6.getNamedItem(VAR_12)) {\n                String VAR_13 = VAR_6.getNamedItem(VAR_12).getNodeValue();\n               \n                /* COMMENT_3 */\n                VAR_13 = VAR_14.mapPropertyType(VAR_13);\n                \n                try {\n                    /* COMMENT_4 */\n                    Class<?> VAR_15 = VAR_16.forName(VAR_13);\n                    if (!Property.class.isAssignableFrom(VAR_15)) {\n                        throw new IllegalArgumentException(\"Cannot create property <\" + VAR_9 + \"> invalid type <\" + VAR_13 + \">\");\n                    }\n                    Constructor<?> VAR_17 = VAR_15.getConstructor(String.class, String.class);\n                    VAR_11 = (Property<?>) VAR_17.newInstance(VAR_9, VAR_10);\n                } catch (Exception VAR_18) {\n                    throw new IllegalArgumentException(\"Cannot instantiate '\" + VAR_13 + \"' check default constructor\", VAR_18);\n                }\n            }\n            \n            if (null != VAR_6.getNamedItem(VAR_19)) {\n                VAR_11.setDescription(unEscapeXML(\n                        VAR_6.getNamedItem(VAR_19)\n                              .getNodeValue()));\n            }\n            \n            /* COMMENT_5 */\n            NodeList VAR_20 = VAR_5.getElementsByTagName(VAR_21);\n            if (VAR_20.getLength() != 0) {\n                Element VAR_22 = (Element) VAR_20.item(0);\n                NodeList VAR_23 =  VAR_22.getElementsByTagName(VAR_8);\n                for (int VAR_24 = 0; VAR_24 < VAR_23.getLength(); VAR_24++) {\n                    Element VAR_25 = (Element) VAR_23.item(VAR_24);\n                    VAR_11.add2FixedValueFromString(unEscapeXML(VAR_25.getTextContent()));\n                }\n            }\n            \n            /* COMMENT_6 */\n            if (VAR_11.getFixedValues() != null && !VAR_11.getFixedValues().contains(VAR_11.getValue())) {\n                throw new IllegalArgumentException(\"Cannot create property <\" + VAR_11.getName() + \n                        \"> invalid value <\" + VAR_11.getValue() + \n                        \"> expected one of \" + VAR_11.getFixedValues());\n            }\n            \n            VAR_1.put(VAR_9, VAR_11);\n        }\n        return VAR_1;\n    }",
  "func_graph_path": "ff4j/e915c026aef46b502934cb05a825ea2ea15eb9e6/XmlParser.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -27,7 +27,11 @@\n                 \n                 try {\n                     // Constructor (String, String) is mandatory in Property interface\n-                    Constructor<?> constr = Class.forName(optionalType).getConstructor(String.class, String.class);\n+                    Class<?> typeClass = Class.forName(optionalType);\n+                    if (!Property.class.isAssignableFrom(typeClass)) {\n+                        throw new IllegalArgumentException(\"Cannot create property <\" + name + \"> invalid type <\" + optionalType + \">\");\n+                    }\n+                    Constructor<?> constr = typeClass.getConstructor(String.class, String.class);\n                     ap = (Property<?>) constr.newInstance(name, value);\n                 } catch (Exception e) {\n                     throw new IllegalArgumentException(\"Cannot instantiate '\" + optionalType + \"' check default constructor\", e);",
  "diff_line_info": {
    "deleted_lines": [
      "                    Constructor<?> constr = Class.forName(optionalType).getConstructor(String.class, String.class);"
    ],
    "added_lines": [
      "                    Class<?> typeClass = Class.forName(optionalType);",
      "                    if (!Property.class.isAssignableFrom(typeClass)) {",
      "                        throw new IllegalArgumentException(\"Cannot create property <\" + name + \"> invalid type <\" + optionalType + \">\");",
      "                    }",
      "                    Constructor<?> constr = typeClass.getConstructor(String.class, String.class);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/ff4j/ff4j/pull/625",
  "description": {
    "pr_info": {
      "title": "fix: CVE-2022-44262 (#624)",
      "number": 625
    },
    "comment": [
      "Fixes #624 \r\n\r\nThis asserts that the Property being constructed extends `org.ff4j.property.Property`\r\n\r\n```\r\nConstructor<?> constr = Class.forName(optionalType).getConstructor(String.class, String.class);\r\nap = (Property<?>) constr.newInstance(name, strValue);\r\n```\r\n\r\nThis seems to be what is happening in the above code:\r\n\r\n1.`Class.forName(optionalType)` retrieves the target class\r\n2. `.getConstructor(String.class, String.class)` finds a constructor on the target class that accepts two String parameters\r\n3. `constr.newInstance(name, strValue)` constructs the instance (where the side effect happens)\r\n4. `(Property<?>)` type casts the new instance of the class. This throws an IllegalArgumentException, but the instance has been created already.",
      "the RCE is present in different points of the FF4j project.\r\nAll inputs must be validated with the proper \"isAssignableFrom\" method before executing \"newInstance\" of Class.forName(\"someinputstring\")\r\nThis applies to both property and strategy parsing/creating.\r\n\r\nExamples: \r\nff4j-core:\r\norg.ff4j.utils.MappingUtil line 183\r\norg.ff4j.conf.XmlParser line 387\r\n\r\nff4j-config-yaml:\r\norg.ff4j.parser.yaml.YamlParser line 175\r\n\r\n"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix;  \n**Confidence:** 0.9"
}