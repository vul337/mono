{
  "cve_id": "CVE-2018-6358",
  "cwe_ids": [
    "CWE-787"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "libming",
  "commit_msg": "Fix various compiler warnings.\n\nRemove useless variables blockstart, blockoffset and here.",
  "commit_hash": "03498cf4e0319d8836aba96ce8a817beaabb441e",
  "git_url": "https://github.com/libming/libming/commit/03498cf4e0319d8836aba96ce8a817beaabb441e",
  "file_path": "util/listfdb.c",
  "func_name": "printDefineFont2",
  "func_before": "void printDefineFont2(FILE *f)\n{\n  int flags, nGlyphs, namelen, off, i, fillBits, lineBits;\n  int here = fileOffset;\n  unsigned int *offset;\n\n  flags = readUInt8(f);\n\n  readUInt8(f); /* \"reserved\" */\n\n  namelen = readUInt8(f);\n\n  printf(\"%sFont Name: \", indent());\n\n  for(; namelen>0; --namelen)\n    putchar((unsigned char)readUInt8(f));\n\n  putchar('\\n');\n\n  nGlyphs = readUInt16(f);\n  printf(\"%snumber of glyphs: %i\\n\\n\", indent(), nGlyphs);\n\n  offset = (unsigned int *)malloc(nGlyphs*sizeof(int));\n\n  /* offset table */\n\n  here = fileOffset;\n\n  for(i=0; i<nGlyphs; ++i)\n  {\n    if(flags & FONTINFO2_WIDEOFFSETS)\n      off = readUInt32(f);\n    else\n      off = readUInt16(f);\n\n    offset[i] = off-nGlyphs*4-4;\n    printf(\"%sOffset%i: %i\\n\", indent(), i, offset[i]);\n  }\n\n  here = fileOffset;\n\n  /* shape table */\n  for(i=0; i<nGlyphs; ++i)\n  {\n    byteAlign();\n    printf(\"%sGlyph %i:\\n\", indent(), i);\n\n    fillBits = readBits(f, 4);\n    lineBits = readBits(f, 4);\n\n    byteAlign();\n    while(printShapeRec(f, &fillBits, &lineBits, 2)) ;\n\n    putchar('\\n');\n  }\n\n  /* code table */\n  for(i=0; i<nGlyphs; ++i)\n  {\n    if(flags & FONTINFO2_WIDECODES)\n      printf(\"%sglyph code %i: %i\\n\", indent(), i, readUInt16(f));\n    else\n      printf(\"%sglyph code %i: %i\\n\", indent(), i, readUInt8(f));\n  }\n\n  if(flags & FONTINFO2_HASLAYOUT)\n  {\n    int kernCount, code1, code2;\n\n    printf(\"%sascender height: %i\\n\", indent(), readSInt16(f));\n    printf(\"%sdescender height: %i\\n\", indent(), readSInt16(f));\n    printf(\"%sleading height: %i\\n\", indent(), readSInt16(f));\n\n    for(i=0; i<nGlyphs; ++i)\n      printf(\"\\tadvance %i: %i\\n\", i, readSInt16(f));\n\n    for(i=0; i<nGlyphs; ++i)\n    {\n      printf(\"%sbounds %i: \", indent(), i);\n      printRect(f);\n      putchar('\\n');\n    }\n\n    kernCount = readUInt16(f);\n\n    for(i=0; i<kernCount; ++i)\n    {\n      code1 = (flags & FONTINFO2_WIDECODES) ? readUInt16(f) : readUInt8(f);\n      code2 = (flags & FONTINFO2_WIDECODES) ? readUInt16(f) : readUInt8(f);\n      printf(\"%s(%i,%i): adjustment = %i\\n\", indent(), code1, code2, readSInt16(f));\n    }\n  }\n\n  putchar('\\n');\n}",
  "abstract_func_before": "void printDefineFont2(FILE *VAR_0)\n{\n  int VAR_1, VAR_2, VAR_3, VAR_4, VAR_5, VAR_6, VAR_7;\n  int VAR_8 = VAR_9;\n  unsigned int *VAR_10;\n\n  VAR_1 = readUInt8(VAR_0);\n\n  readUInt8(VAR_0); /* COMMENT_0 */\n\n  VAR_3 = readUInt8(VAR_0);\n\n  printf(\"%sFont Name: \", indent());\n\n  for(; VAR_3>0; --VAR_3)\n    putchar((unsigned char)readUInt8(VAR_0));\n\n  putchar('\\n');\n\n  VAR_2 = readUInt16(VAR_0);\n  printf(\"%snumber of glyphs: %i\\n\\n\", indent(), VAR_2);\n\n  VAR_10 = (unsigned int *)malloc(VAR_2*sizeof(int));\n\n  /* COMMENT_1 */\n\n  VAR_8 = VAR_9;\n\n  for(VAR_5=0; VAR_5<VAR_2; ++VAR_5)\n  {\n    if(VAR_1 & VAR_11)\n      VAR_4 = readUInt32(VAR_0);\n    else\n      VAR_4 = readUInt16(VAR_0);\n\n    VAR_10[VAR_5] = VAR_4-VAR_2*4-4;\n    printf(\"%sOffset%i: %i\\n\", indent(), VAR_5, VAR_10[VAR_5]);\n  }\n\n  VAR_8 = VAR_9;\n\n  /* COMMENT_2 */\n  for(VAR_5=0; VAR_5<VAR_2; ++VAR_5)\n  {\n    byteAlign();\n    printf(\"%sGlyph %i:\\n\", indent(), VAR_5);\n\n    VAR_6 = readBits(VAR_0, 4);\n    VAR_7 = readBits(VAR_0, 4);\n\n    byteAlign();\n    while(printShapeRec(VAR_0, &VAR_6, &VAR_7, 2)) ;\n\n    putchar('\\n');\n  }\n\n  /* COMMENT_3 */\n  for(VAR_5=0; VAR_5<VAR_2; ++VAR_5)\n  {\n    if(VAR_1 & VAR_12)\n      printf(\"%sglyph code %i: %i\\n\", indent(), VAR_5, readUInt16(VAR_0));\n    else\n      printf(\"%sglyph code %i: %i\\n\", indent(), VAR_5, readUInt8(VAR_0));\n  }\n\n  if(VAR_1 & VAR_13)\n  {\n    int VAR_14, VAR_15, VAR_16;\n\n    printf(\"%sascender height: %i\\n\", indent(), readSInt16(VAR_0));\n    printf(\"%sdescender height: %i\\n\", indent(), readSInt16(VAR_0));\n    printf(\"%sleading height: %i\\n\", indent(), readSInt16(VAR_0));\n\n    for(VAR_5=0; VAR_5<VAR_2; ++VAR_5)\n      printf(\"\\tadvance %i: %i\\n\", VAR_5, readSInt16(VAR_0));\n\n    for(VAR_5=0; VAR_5<VAR_2; ++VAR_5)\n    {\n      printf(\"%sbounds %i: \", indent(), VAR_5);\n      printRect(VAR_0);\n      putchar('\\n');\n    }\n\n    VAR_14 = readUInt16(VAR_0);\n\n    for(VAR_5=0; VAR_5<VAR_14; ++VAR_5)\n    {\n      VAR_15 = (VAR_1 & VAR_12) ? readUInt16(VAR_0) : readUInt8(VAR_0);\n      VAR_16 = (VAR_1 & VAR_12) ? readUInt16(VAR_0) : readUInt8(VAR_0);\n      printf(\"%s(%i,%i): adjustment = %i\\n\", indent(), VAR_15, VAR_16, readSInt16(VAR_0));\n    }\n  }\n\n  putchar('\\n');\n}",
  "func_graph_path_before": "libming/03498cf4e0319d8836aba96ce8a817beaabb441e/listfdb.c/vul/before/0.json",
  "func": "void printDefineFont2(FILE *f)\n{\n  int flags, nGlyphs, namelen, off, i, fillBits, lineBits;\n  unsigned int *offset;\n\n  flags = readUInt8(f);\n\n  readUInt8(f); /* \"reserved\" */\n\n  namelen = readUInt8(f);\n\n  printf(\"%sFont Name: \", indent());\n\n  for(; namelen>0; --namelen)\n    putchar((unsigned char)readUInt8(f));\n\n  putchar('\\n');\n\n  nGlyphs = readUInt16(f);\n  printf(\"%snumber of glyphs: %i\\n\\n\", indent(), nGlyphs);\n\n  offset = (unsigned int *)malloc(nGlyphs*sizeof(int));\n\n  /* offset table */\n\n  for(i=0; i<nGlyphs; ++i)\n  {\n    if(flags & FONTINFO2_WIDEOFFSETS)\n      off = readUInt32(f);\n    else\n      off = readUInt16(f);\n\n    offset[i] = off-nGlyphs*4-4;\n    printf(\"%sOffset%i: %i\\n\", indent(), i, offset[i]);\n  }\n\n  /* shape table */\n  for(i=0; i<nGlyphs; ++i)\n  {\n    byteAlign();\n    printf(\"%sGlyph %i:\\n\", indent(), i);\n\n    fillBits = readBits(f, 4);\n    lineBits = readBits(f, 4);\n\n    byteAlign();\n    while(printShapeRec(f, &fillBits, &lineBits, 2)) ;\n\n    putchar('\\n');\n  }\n\n  /* code table */\n  for(i=0; i<nGlyphs; ++i)\n  {\n    if(flags & FONTINFO2_WIDECODES)\n      printf(\"%sglyph code %i: %i\\n\", indent(), i, readUInt16(f));\n    else\n      printf(\"%sglyph code %i: %i\\n\", indent(), i, readUInt8(f));\n  }\n\n  if(flags & FONTINFO2_HASLAYOUT)\n  {\n    int kernCount, code1, code2;\n\n    printf(\"%sascender height: %i\\n\", indent(), readSInt16(f));\n    printf(\"%sdescender height: %i\\n\", indent(), readSInt16(f));\n    printf(\"%sleading height: %i\\n\", indent(), readSInt16(f));\n\n    for(i=0; i<nGlyphs; ++i)\n      printf(\"\\tadvance %i: %i\\n\", i, readSInt16(f));\n\n    for(i=0; i<nGlyphs; ++i)\n    {\n      printf(\"%sbounds %i: \", indent(), i);\n      printRect(f);\n      putchar('\\n');\n    }\n\n    kernCount = readUInt16(f);\n\n    for(i=0; i<kernCount; ++i)\n    {\n      code1 = (flags & FONTINFO2_WIDECODES) ? readUInt16(f) : readUInt8(f);\n      code2 = (flags & FONTINFO2_WIDECODES) ? readUInt16(f) : readUInt8(f);\n      printf(\"%s(%i,%i): adjustment = %i\\n\", indent(), code1, code2, readSInt16(f));\n    }\n  }\n\n  putchar('\\n');\n}",
  "abstract_func": "void printDefineFont2(FILE *VAR_0)\n{\n  int VAR_1, VAR_2, VAR_3, VAR_4, VAR_5, VAR_6, VAR_7;\n  unsigned int *VAR_8;\n\n  VAR_1 = readUInt8(VAR_0);\n\n  readUInt8(VAR_0); /* COMMENT_0 */\n\n  VAR_3 = readUInt8(VAR_0);\n\n  printf(\"%sFont Name: \", indent());\n\n  for(; VAR_3>0; --VAR_3)\n    putchar((unsigned char)readUInt8(VAR_0));\n\n  putchar('\\n');\n\n  VAR_2 = readUInt16(VAR_0);\n  printf(\"%snumber of glyphs: %i\\n\\n\", indent(), VAR_2);\n\n  VAR_8 = (unsigned int *)malloc(VAR_2*sizeof(int));\n\n  /* COMMENT_1 */\n\n  for(VAR_5=0; VAR_5<VAR_2; ++VAR_5)\n  {\n    if(VAR_1 & VAR_9)\n      VAR_4 = readUInt32(VAR_0);\n    else\n      VAR_4 = readUInt16(VAR_0);\n\n    VAR_8[VAR_5] = VAR_4-VAR_2*4-4;\n    printf(\"%sOffset%i: %i\\n\", indent(), VAR_5, VAR_8[VAR_5]);\n  }\n\n  /* COMMENT_2 */\n  for(VAR_5=0; VAR_5<VAR_2; ++VAR_5)\n  {\n    byteAlign();\n    printf(\"%sGlyph %i:\\n\", indent(), VAR_5);\n\n    VAR_6 = readBits(VAR_0, 4);\n    VAR_7 = readBits(VAR_0, 4);\n\n    byteAlign();\n    while(printShapeRec(VAR_0, &VAR_6, &VAR_7, 2)) ;\n\n    putchar('\\n');\n  }\n\n  /* COMMENT_3 */\n  for(VAR_5=0; VAR_5<VAR_2; ++VAR_5)\n  {\n    if(VAR_1 & VAR_10)\n      printf(\"%sglyph code %i: %i\\n\", indent(), VAR_5, readUInt16(VAR_0));\n    else\n      printf(\"%sglyph code %i: %i\\n\", indent(), VAR_5, readUInt8(VAR_0));\n  }\n\n  if(VAR_1 & VAR_11)\n  {\n    int VAR_12, VAR_13, VAR_14;\n\n    printf(\"%sascender height: %i\\n\", indent(), readSInt16(VAR_0));\n    printf(\"%sdescender height: %i\\n\", indent(), readSInt16(VAR_0));\n    printf(\"%sleading height: %i\\n\", indent(), readSInt16(VAR_0));\n\n    for(VAR_5=0; VAR_5<VAR_2; ++VAR_5)\n      printf(\"\\tadvance %i: %i\\n\", VAR_5, readSInt16(VAR_0));\n\n    for(VAR_5=0; VAR_5<VAR_2; ++VAR_5)\n    {\n      printf(\"%sbounds %i: \", indent(), VAR_5);\n      printRect(VAR_0);\n      putchar('\\n');\n    }\n\n    VAR_12 = readUInt16(VAR_0);\n\n    for(VAR_5=0; VAR_5<VAR_12; ++VAR_5)\n    {\n      VAR_13 = (VAR_1 & VAR_10) ? readUInt16(VAR_0) : readUInt8(VAR_0);\n      VAR_14 = (VAR_1 & VAR_10) ? readUInt16(VAR_0) : readUInt8(VAR_0);\n      printf(\"%s(%i,%i): adjustment = %i\\n\", indent(), VAR_13, VAR_14, readSInt16(VAR_0));\n    }\n  }\n\n  putchar('\\n');\n}",
  "func_graph_path": "libming/03498cf4e0319d8836aba96ce8a817beaabb441e/listfdb.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,7 +1,6 @@\n void printDefineFont2(FILE *f)\n {\n   int flags, nGlyphs, namelen, off, i, fillBits, lineBits;\n-  int here = fileOffset;\n   unsigned int *offset;\n \n   flags = readUInt8(f);\n@@ -24,8 +23,6 @@\n \n   /* offset table */\n \n-  here = fileOffset;\n-\n   for(i=0; i<nGlyphs; ++i)\n   {\n     if(flags & FONTINFO2_WIDEOFFSETS)\n@@ -36,8 +33,6 @@\n     offset[i] = off-nGlyphs*4-4;\n     printf(\"%sOffset%i: %i\\n\", indent(), i, offset[i]);\n   }\n-\n-  here = fileOffset;\n \n   /* shape table */\n   for(i=0; i<nGlyphs; ++i)",
  "diff_line_info": {
    "deleted_lines": [
      "  int here = fileOffset;",
      "  here = fileOffset;",
      "",
      "",
      "  here = fileOffset;"
    ],
    "added_lines": []
  },
  "is_vul": true,
  "pr_url": "https://github.com/libming/libming/pull/124",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/libming/libming/pull/124: 403 Client Error: Forbidden for url: https://api.github.com/repos/libming/libming/pulls/124",
  "Bug Filter": "Supporting & Non-Core Improvements",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "The patch addressed in the commit is focused on resolving compiler warnings by removing unnecessary variables, which is a maintenance task rather than a security fix. The security issues mentioned in the description were handled in separate changes not reflected here.\n\n**Final Classification:** Supporting & Non-Core Improvements  \n**Confidence:** 0.9"
}