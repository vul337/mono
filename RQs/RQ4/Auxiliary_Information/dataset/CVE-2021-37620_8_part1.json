{
  "cve_id": "CVE-2021-37620",
  "cwe_ids": [
    "CWE-125"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "Exiv2/exiv2",
  "commit_msg": "Safer std::vector indexing.",
  "commit_hash": "76e313745e813f80e8910aceb2210af3ad8cf897",
  "git_url": "https://github.com/Exiv2/exiv2/commit/76e313745e813f80e8910aceb2210af3ad8cf897",
  "file_path": "src/actions.cpp",
  "func_name": "Extract::writePreviews",
  "func_before": "int Extract::writePreviews() const\n    {\n        if (!Exiv2::fileExists(path_, true)) {\n            std::cerr << path_\n                      << \": \" << _(\"Failed to open the file\\n\");\n            return -1;\n        }\n        Exiv2::Image::AutoPtr image = Exiv2::ImageFactory::open(path_);\n        assert(image.get() != 0);\n        image->readMetadata();\n\n        Exiv2::PreviewManager pvMgr(*image);\n        Exiv2::PreviewPropertiesList pvList = pvMgr.getPreviewProperties();\n\n        const Params::PreviewNumbers& numbers = Params::instance().previewNumbers_;\n        for (Params::PreviewNumbers::const_iterator n = numbers.begin(); n != numbers.end(); ++n) {\n            if (*n == 0) {\n                // Write all previews\n                for (int num = 0; num < static_cast<int>(pvList.size()); ++num) {\n                    writePreviewFile(pvMgr.getPreviewImage(pvList[num]), num + 1);\n                }\n                break;\n            }\n            if (*n > static_cast<int>(pvList.size())) {\n                std::cerr << path_ << \": \" << _(\"Image does not have preview\")\n                          << \" \" << *n << \"\\n\";\n                continue;\n            }\n            writePreviewFile(pvMgr.getPreviewImage(pvList[*n - 1]), *n);\n        }\n        return 0;\n    }",
  "abstract_func_before": "int Extract::writePreviews() const\n    {\n        if (!Exiv2::fileExists(VAR_0, true)) {\n            std::cerr << VAR_0\n                      << \": \" << _(\"Failed to open the file\\n\");\n            return -1;\n        }\n        Exiv2::Image::AutoPtr VAR_1 = Exiv2::ImageFactory::open(VAR_0);\n        assert(VAR_1.get() != 0);\n        VAR_1->readMetadata();\n\n        Exiv2::PreviewManager VAR_2(*VAR_1);\n        Exiv2::PreviewPropertiesList VAR_3 = VAR_2.getPreviewProperties();\n\n        const Params::PreviewNumbers& VAR_4 = Params::instance().previewNumbers_;\n        for (Params::PreviewNumbers::const_iterator VAR_5 = VAR_4.begin(); VAR_5 != VAR_4.end(); ++VAR_5) {\n            if (*VAR_5 == 0) {\n                /* COMMENT_0 */\n                for (int VAR_6 = 0; VAR_6 < VAR_7<int>(VAR_3.size()); ++VAR_6) {\n                    writePreviewFile(VAR_2.getPreviewImage(VAR_3[VAR_6]), VAR_6 + 1);\n                }\n                break;\n            }\n            if (*VAR_5 > VAR_7<int>(VAR_3.size())) {\n                std::cerr << VAR_0 << \": \" << _(\"Image does not have preview\")\n                          << \" \" << *VAR_5 << \"\\n\";\n                continue;\n            }\n            writePreviewFile(VAR_2.getPreviewImage(VAR_3[*VAR_5 - 1]), *VAR_5);\n        }\n        return 0;\n    }",
  "func_graph_path_before": "Exiv2/exiv2/76e313745e813f80e8910aceb2210af3ad8cf897/actions.cpp/vul/before/3.json",
  "func": "int Extract::writePreviews() const\n    {\n        if (!Exiv2::fileExists(path_, true)) {\n            std::cerr << path_\n                      << \": \" << _(\"Failed to open the file\\n\");\n            return -1;\n        }\n        Exiv2::Image::AutoPtr image = Exiv2::ImageFactory::open(path_);\n        assert(image.get() != 0);\n        image->readMetadata();\n\n        Exiv2::PreviewManager pvMgr(*image);\n        Exiv2::PreviewPropertiesList pvList = pvMgr.getPreviewProperties();\n\n        const Params::PreviewNumbers& numbers = Params::instance().previewNumbers_;\n        for (Params::PreviewNumbers::const_iterator n = numbers.begin(); n != numbers.end(); ++n) {\n            size_t num = static_cast<size_t>(*n);\n            if (num == 0) {\n                // Write all previews\n                for (num = 0; num < pvList.size(); ++num) {\n                    writePreviewFile(pvMgr.getPreviewImage(pvList[num]), static_cast<int>(num + 1));\n                }\n                break;\n            }\n            num--;\n            if (num >= pvList.size()) {\n                std::cerr << path_ << \": \" << _(\"Image does not have preview\")\n                          << \" \" << num + 1 << \"\\n\";\n                continue;\n            }\n            writePreviewFile(pvMgr.getPreviewImage(pvList[num]), static_cast<int>(num + 1));\n        }\n        return 0;\n    }",
  "abstract_func": "int Extract::writePreviews() const\n    {\n        if (!Exiv2::fileExists(VAR_0, true)) {\n            std::cerr << VAR_0\n                      << \": \" << _(\"Failed to open the file\\n\");\n            return -1;\n        }\n        Exiv2::Image::AutoPtr VAR_1 = Exiv2::ImageFactory::open(VAR_0);\n        assert(VAR_1.get() != 0);\n        VAR_1->readMetadata();\n\n        Exiv2::PreviewManager VAR_2(*VAR_1);\n        Exiv2::PreviewPropertiesList VAR_3 = VAR_2.getPreviewProperties();\n\n        const Params::PreviewNumbers& VAR_4 = Params::instance().previewNumbers_;\n        for (Params::PreviewNumbers::const_iterator VAR_5 = VAR_4.begin(); VAR_5 != VAR_4.end(); ++VAR_5) {\n            size_t VAR_6 = VAR_7<size_t>(*VAR_5);\n            if (VAR_6 == 0) {\n                /* COMMENT_0 */\n                for (VAR_6 = 0; VAR_6 < VAR_3.size(); ++VAR_6) {\n                    writePreviewFile(VAR_2.getPreviewImage(VAR_3[VAR_6]), VAR_7<int>(VAR_6 + 1));\n                }\n                break;\n            }\n            VAR_6--;\n            if (VAR_6 >= VAR_3.size()) {\n                std::cerr << VAR_0 << \": \" << _(\"Image does not have preview\")\n                          << \" \" << VAR_6 + 1 << \"\\n\";\n                continue;\n            }\n            writePreviewFile(VAR_2.getPreviewImage(VAR_3[VAR_6]), VAR_7<int>(VAR_6 + 1));\n        }\n        return 0;\n    }",
  "func_graph_path": "Exiv2/exiv2/76e313745e813f80e8910aceb2210af3ad8cf897/actions.cpp/vul/after/3.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -14,19 +14,21 @@\n \n         const Params::PreviewNumbers& numbers = Params::instance().previewNumbers_;\n         for (Params::PreviewNumbers::const_iterator n = numbers.begin(); n != numbers.end(); ++n) {\n-            if (*n == 0) {\n+            size_t num = static_cast<size_t>(*n);\n+            if (num == 0) {\n                 // Write all previews\n-                for (int num = 0; num < static_cast<int>(pvList.size()); ++num) {\n-                    writePreviewFile(pvMgr.getPreviewImage(pvList[num]), num + 1);\n+                for (num = 0; num < pvList.size(); ++num) {\n+                    writePreviewFile(pvMgr.getPreviewImage(pvList[num]), static_cast<int>(num + 1));\n                 }\n                 break;\n             }\n-            if (*n > static_cast<int>(pvList.size())) {\n+            num--;\n+            if (num >= pvList.size()) {\n                 std::cerr << path_ << \": \" << _(\"Image does not have preview\")\n-                          << \" \" << *n << \"\\n\";\n+                          << \" \" << num + 1 << \"\\n\";\n                 continue;\n             }\n-            writePreviewFile(pvMgr.getPreviewImage(pvList[*n - 1]), *n);\n+            writePreviewFile(pvMgr.getPreviewImage(pvList[num]), static_cast<int>(num + 1));\n         }\n         return 0;\n     }",
  "diff_line_info": {
    "deleted_lines": [
      "            if (*n == 0) {",
      "                for (int num = 0; num < static_cast<int>(pvList.size()); ++num) {",
      "                    writePreviewFile(pvMgr.getPreviewImage(pvList[num]), num + 1);",
      "            if (*n > static_cast<int>(pvList.size())) {",
      "                          << \" \" << *n << \"\\n\";",
      "            writePreviewFile(pvMgr.getPreviewImage(pvList[*n - 1]), *n);"
    ],
    "added_lines": [
      "            size_t num = static_cast<size_t>(*n);",
      "            if (num == 0) {",
      "                for (num = 0; num < pvList.size(); ++num) {",
      "                    writePreviewFile(pvMgr.getPreviewImage(pvList[num]), static_cast<int>(num + 1));",
      "            num--;",
      "            if (num >= pvList.size()) {",
      "                          << \" \" << num + 1 << \"\\n\";",
      "            writePreviewFile(pvMgr.getPreviewImage(pvList[num]), static_cast<int>(num + 1));"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/sridharb1/exiv2/pull/4",
  "description": {
    "pr_info": {
      "title": "0.27 maintenance",
      "number": 4
    },
    "comment": []
  },
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Defect Remediation & Feature Upgrades  \n**Confidence:** 0.9  \n\nThe patch addresses incorrect vector indexing, fixing a bug without introducing security measures."
}