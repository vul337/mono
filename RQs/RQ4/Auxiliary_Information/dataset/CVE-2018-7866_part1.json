{
  "cve_id": "CVE-2018-7866",
  "cwe_ids": [
    "CWE-476"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "libming",
  "commit_msg": "decompile: fix null pointer dereference in newVar3\n\ngetString (indirectly called by getName) is passed a variable of non\nstandard type 10 (= \"PUSH_VARIABLE\"), which seems to return the\nstring contained in passed variable, without quotes. If contained\nstring is NULL, a NULL pointer is returned, which later causes NULL\npointer dereference.\n\nIn this patch we address this issue such that if the variable contains\nan invalid string, we act just like in the PUSH_STRING case. Otherwise\na copy of the string is returned.\n\nFixes: #118 (CVE-2018-7866).",
  "commit_hash": "0aab70a3020dd8b4fad66b20995fc691f24a0317",
  "git_url": "https://github.com/libming/libming/commit/0aab70a3020dd8b4fad66b20995fc691f24a0317",
  "file_path": "util/decompile.c",
  "func_name": "getString",
  "func_before": "static char *\ngetString(struct SWF_ACTIONPUSHPARAM *act)\n{\n\tchar *t;\n#ifdef DEBUG\n\tprintf(\"*getString* type=%d\\n\",act->Type);\n#endif\n\tswitch( act->Type ) \n\t{\n\tcase PUSH_STRING: \n\t\tif (!act->p.String) /* Not a NULL string */\n\t\t{\n\t\t        SWF_warn(\"WARNING: Call to getString with NULL string.\\n\");\n\t\t        break;\n\t\t}\n\t\tt=malloc(strlen(act->p.String)+3); /* 2 \"'\"s and a NULL */\n\t\tstrcpy(t,\"'\");\n\t\tstrcat(t,act->p.String);\n\t\tstrcat(t,\"'\");\n\t\treturn t;\n\tcase PUSH_NULL: /* NULL */\n\t\treturn \"null\";\n\tcase PUSH_UNDEF: /* Undefined */\n\t\treturn \"undefined\";\n\tcase PUSH_REGISTER: /* REGISTER */\n\t\tif( regs[act->p.RegisterNumber] &&\n\t\t    regs[act->p.RegisterNumber]->Type != 4 &&\n\t\t    regs[act->p.RegisterNumber]->Type != 7 )\n\t\t{\n\t\t\treturn getName(regs[act->p.RegisterNumber]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tt=malloc(5); /* Rddd */\n\t\t\tsprintf(t,\"R%d\", act->p.RegisterNumber );\n\t\t\treturn t;\n\t\t}\n\tcase PUSH_BOOLEAN: /* BOOLEAN */\n\t\tif( act->p.Boolean )\n\t\t\treturn \"true\";\n\t\telse\n\t\t\treturn \"false\";\n\tcase PUSH_DOUBLE: /* DOUBLE */\n\t{\n\t\tchar length_finder[1];\n\t\tint needed_length = snprintf(length_finder, 1, \"%g\", act->p.Double) + 1;\n\t\tif (needed_length <= 0)\n\t\t{\n\t\t        SWF_warn(\"WARNING: could not evaluate size of buffer (memory issue ?).\\n\");\n\t\t        break;\n\t\t}\n\n\t\tt = malloc(needed_length);\n\t\tsprintf(t, \"%g\", act->p.Double );\n\t\treturn t;\n\t}\n\tcase PUSH_INT: /* INTEGER */\n\t{\n\t\tchar length_finder[1];\n\t\tint needed_length = snprintf(length_finder, 1, \"%ld\", act->p.Integer) + 1;\n\t\tif (needed_length <= 0)\n\t\t{\n\t\t        SWF_warn(\"WARNING: could not evaluate size of buffer (memory issue ?).\\n\");\n\t\t        break;\n\t\t}\n\n\t\tt = malloc(needed_length);\n\t\tsprintf(t, \"%ld\", act->p.Integer );\n\t\treturn t;\n\t}\n\tcase PUSH_CONSTANT: /* CONSTANT8 */\n\t\tif (act->p.Constant8 > poolcounter)\n\t\t{\n\t\t        SWF_warn(\"WARNING: retrieving constants not present in the pool.\\n\");\n\t\t        break;\n\t\t}\n\t\tt=malloc(strlenext(pool[act->p.Constant8])+3); /* 2 \"'\"s and a NULL */\n\t\tstrcpy(t,\"'\");\n\t\tstrcatext(t,pool[act->p.Constant8]);\n\t\tstrcat(t,\"'\");\n\t\treturn t;\n\tcase PUSH_CONSTANT16: /* CONSTANT16 */\n\t\tif (act->p.Constant16 > poolcounter)\n\t\t{\n\t\t        SWF_warn(\"WARNING: retrieving constants not present in the pool.\\n\");\n\t\t        break;\n\t\t}\n\t\tt=malloc(strlenext(pool[act->p.Constant16])+3); /* 2 '\\\"'s and a NULL */\n\t\tstrcpy(t,\"'\");\n\t\tstrcatext(t,pool[act->p.Constant16]);\n\t\tstrcat(t,\"'\");\n\t\treturn t;\n\n\tcase 12:\n\tcase 11: /* INCREMENTED or DECREMENTED VARIABLE */\n\tcase PUSH_VARIABLE: /* VARIABLE */\n\t\treturn act->p.String;\n\tdefault: \n\t\tfprintf (stderr,\"  Can't get string for type: %d\\n\", act->Type);\n\t\tbreak;\n\t}\n\n\tt = malloc(sizeof(char));\n\tstrcpyext(t,\"\");\n\n\treturn t;\n}",
  "abstract_func_before": "static char *\ngetString(struct SWF_ACTIONPUSHPARAM *VAR_0)\n{\n\tchar *VAR_1;\n#ifdef VAR_2\n\tprintf(\"*getString* type=%d\\n\",VAR_0->Type);\n#endif\n\tswitch( VAR_0->Type ) \n\t{\n\tcase VAR_3: \n\t\tif (!VAR_0->p.String) /* COMMENT_0 */\n\t\t{\n\t\t        SWF_warn(\"WARNING: Call to getString with NULL string.\\n\");\n\t\t        break;\n\t\t}\n\t\tVAR_1=malloc(strlen(VAR_0->p.String)+3); /* COMMENT_1 */\n\t\tstrcpy(VAR_1,\"'\");\n\t\tstrcat(VAR_1,VAR_0->p.String);\n\t\tstrcat(VAR_1,\"'\");\n\t\treturn VAR_1;\n\tcase VAR_4: /* COMMENT_2 */\n\t\treturn \"null\";\n\tcase VAR_5: /* COMMENT_3 */\n\t\treturn \"undefined\";\n\tcase VAR_6: /* COMMENT_4 */\n\t\tif( VAR_7[VAR_0->p.RegisterNumber] &&\n\t\t    VAR_7[VAR_0->p.RegisterNumber]->Type != 4 &&\n\t\t    VAR_7[VAR_0->p.RegisterNumber]->Type != 7 )\n\t\t{\n\t\t\treturn getName(VAR_7[VAR_0->p.RegisterNumber]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tVAR_1=malloc(5); /* COMMENT_5 */\n\t\t\tsprintf(VAR_1,\"R%d\", VAR_0->p.RegisterNumber );\n\t\t\treturn VAR_1;\n\t\t}\n\tcase VAR_8: /* COMMENT_6 */\n\t\tif( VAR_0->p.Boolean )\n\t\t\treturn \"true\";\n\t\telse\n\t\t\treturn \"false\";\n\tcase VAR_9: /* COMMENT_7 */\n\t{\n\t\tchar VAR_10[1];\n\t\tint VAR_11 = snprintf(VAR_10, 1, \"%g\", VAR_0->p.Double) + 1;\n\t\tif (VAR_11 <= 0)\n\t\t{\n\t\t        SWF_warn(\"WARNING: could not evaluate size of buffer (memory issue ?).\\n\");\n\t\t        break;\n\t\t}\n\n\t\tVAR_1 = malloc(VAR_11);\n\t\tsprintf(VAR_1, \"%g\", VAR_0->p.Double );\n\t\treturn VAR_1;\n\t}\n\tcase VAR_12: /* COMMENT_8 */\n\t{\n\t\tchar VAR_10[1];\n\t\tint VAR_11 = snprintf(VAR_10, 1, \"%ld\", VAR_0->p.Integer) + 1;\n\t\tif (VAR_11 <= 0)\n\t\t{\n\t\t        SWF_warn(\"WARNING: could not evaluate size of buffer (memory issue ?).\\n\");\n\t\t        break;\n\t\t}\n\n\t\tVAR_1 = malloc(VAR_11);\n\t\tsprintf(VAR_1, \"%ld\", VAR_0->p.Integer );\n\t\treturn VAR_1;\n\t}\n\tcase VAR_13: /* COMMENT_9 */\n\t\tif (VAR_0->p.Constant8 > VAR_14)\n\t\t{\n\t\t        SWF_warn(\"WARNING: retrieving constants not present in the pool.\\n\");\n\t\t        break;\n\t\t}\n\t\tVAR_1=malloc(strlenext(VAR_15[VAR_0->p.Constant8])+3); /* COMMENT_1 */\n\t\tstrcpy(VAR_1,\"'\");\n\t\tstrcatext(VAR_1,VAR_15[VAR_0->p.Constant8]);\n\t\tstrcat(VAR_1,\"'\");\n\t\treturn VAR_1;\n\tcase VAR_16: /* COMMENT_10 */\n\t\tif (VAR_0->p.Constant16 > VAR_14)\n\t\t{\n\t\t        SWF_warn(\"WARNING: retrieving constants not present in the pool.\\n\");\n\t\t        break;\n\t\t}\n\t\tVAR_1=malloc(strlenext(VAR_15[VAR_0->p.Constant16])+3); /* COMMENT_11 */\n\t\tstrcpy(VAR_1,\"'\");\n\t\tstrcatext(VAR_1,VAR_15[VAR_0->p.Constant16]);\n\t\tstrcat(VAR_1,\"'\");\n\t\treturn VAR_1;\n\n\tcase 12:\n\tcase 11: /* COMMENT_12 */\n\tcase VAR_17: /* COMMENT_13 */\n\t\treturn VAR_0->p.String;\n\tdefault: \n\t\tfprintf (VAR_18,\"  Can't get string for type: %d\\n\", VAR_0->Type);\n\t\tbreak;\n\t}\n\n\tVAR_1 = malloc(sizeof(char));\n\tstrcpyext(VAR_1,\"\");\n\n\treturn VAR_1;\n}",
  "func_graph_path_before": "libming/0aab70a3020dd8b4fad66b20995fc691f24a0317/decompile.c/vul/before/0.json",
  "func": "static char *\ngetString(struct SWF_ACTIONPUSHPARAM *act)\n{\n\tchar *t;\n#ifdef DEBUG\n\tprintf(\"*getString* type=%d\\n\",act->Type);\n#endif\n\tswitch( act->Type ) \n\t{\n\tcase PUSH_STRING: \n\t\tif (!act->p.String) /* Not a NULL string */\n\t\t{\n\t\t        SWF_warn(\"WARNING: Call to getString with NULL string.\\n\");\n\t\t        break;\n\t\t}\n\t\tt=malloc(strlen(act->p.String)+3); /* 2 \"'\"s and a NULL */\n\t\tstrcpy(t,\"'\");\n\t\tstrcat(t,act->p.String);\n\t\tstrcat(t,\"'\");\n\t\treturn t;\n\tcase PUSH_NULL: /* NULL */\n\t\treturn \"null\";\n\tcase PUSH_UNDEF: /* Undefined */\n\t\treturn \"undefined\";\n\tcase PUSH_REGISTER: /* REGISTER */\n\t\tif( regs[act->p.RegisterNumber] &&\n\t\t    regs[act->p.RegisterNumber]->Type != 4 &&\n\t\t    regs[act->p.RegisterNumber]->Type != 7 )\n\t\t{\n\t\t\treturn getName(regs[act->p.RegisterNumber]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tt=malloc(5); /* Rddd */\n\t\t\tsprintf(t,\"R%d\", act->p.RegisterNumber );\n\t\t\treturn t;\n\t\t}\n\tcase PUSH_BOOLEAN: /* BOOLEAN */\n\t\tif( act->p.Boolean )\n\t\t\treturn \"true\";\n\t\telse\n\t\t\treturn \"false\";\n\tcase PUSH_DOUBLE: /* DOUBLE */\n\t{\n\t\tchar length_finder[1];\n\t\tint needed_length = snprintf(length_finder, 1, \"%g\", act->p.Double) + 1;\n\t\tif (needed_length <= 0)\n\t\t{\n\t\t        SWF_warn(\"WARNING: could not evaluate size of buffer (memory issue ?).\\n\");\n\t\t        break;\n\t\t}\n\n\t\tt = malloc(needed_length);\n\t\tsprintf(t, \"%g\", act->p.Double );\n\t\treturn t;\n\t}\n\tcase PUSH_INT: /* INTEGER */\n\t{\n\t\tchar length_finder[1];\n\t\tint needed_length = snprintf(length_finder, 1, \"%ld\", act->p.Integer) + 1;\n\t\tif (needed_length <= 0)\n\t\t{\n\t\t        SWF_warn(\"WARNING: could not evaluate size of buffer (memory issue ?).\\n\");\n\t\t        break;\n\t\t}\n\n\t\tt = malloc(needed_length);\n\t\tsprintf(t, \"%ld\", act->p.Integer );\n\t\treturn t;\n\t}\n\tcase PUSH_CONSTANT: /* CONSTANT8 */\n\t\tif (act->p.Constant8 > poolcounter)\n\t\t{\n\t\t        SWF_warn(\"WARNING: retrieving constants not present in the pool.\\n\");\n\t\t        break;\n\t\t}\n\t\tt=malloc(strlenext(pool[act->p.Constant8])+3); /* 2 \"'\"s and a NULL */\n\t\tstrcpy(t,\"'\");\n\t\tstrcatext(t,pool[act->p.Constant8]);\n\t\tstrcat(t,\"'\");\n\t\treturn t;\n\tcase PUSH_CONSTANT16: /* CONSTANT16 */\n\t\tif (act->p.Constant16 > poolcounter)\n\t\t{\n\t\t        SWF_warn(\"WARNING: retrieving constants not present in the pool.\\n\");\n\t\t        break;\n\t\t}\n\t\tt=malloc(strlenext(pool[act->p.Constant16])+3); /* 2 '\\\"'s and a NULL */\n\t\tstrcpy(t,\"'\");\n\t\tstrcatext(t,pool[act->p.Constant16]);\n\t\tstrcat(t,\"'\");\n\t\treturn t;\n\n\tcase 12:\n\tcase 11: /* INCREMENTED or DECREMENTED VARIABLE */\n\tcase PUSH_VARIABLE: /* VARIABLE */\n\t\tif (!act->p.String)\n\t\t{\n\t\t        SWF_warn(\"WARNING: Call to getString with PUSH_VARIABLE defining NULL string.\\n\");\n\t\t        break;\n\t\t}\n\t\tt=malloc(strlen(act->p.String)+1); /* NULL character */\n\t\tstrcpy(t,act->p.String);\n\t\treturn t;\n\tdefault: \n\t\tfprintf (stderr,\"  Can't get string for type: %d\\n\", act->Type);\n\t\tbreak;\n\t}\n\n\tt = malloc(sizeof(char));\n\tstrcpyext(t,\"\");\n\n\treturn t;\n}",
  "abstract_func": "static char *\ngetString(struct SWF_ACTIONPUSHPARAM *VAR_0)\n{\n\tchar *VAR_1;\n#ifdef VAR_2\n\tprintf(\"*getString* type=%d\\n\",VAR_0->Type);\n#endif\n\tswitch( VAR_0->Type ) \n\t{\n\tcase VAR_3: \n\t\tif (!VAR_0->p.String) /* COMMENT_0 */\n\t\t{\n\t\t        SWF_warn(\"WARNING: Call to getString with NULL string.\\n\");\n\t\t        break;\n\t\t}\n\t\tVAR_1=malloc(strlen(VAR_0->p.String)+3); /* COMMENT_1 */\n\t\tstrcpy(VAR_1,\"'\");\n\t\tstrcat(VAR_1,VAR_0->p.String);\n\t\tstrcat(VAR_1,\"'\");\n\t\treturn VAR_1;\n\tcase VAR_4: /* COMMENT_2 */\n\t\treturn \"null\";\n\tcase VAR_5: /* COMMENT_3 */\n\t\treturn \"undefined\";\n\tcase VAR_6: /* COMMENT_4 */\n\t\tif( VAR_7[VAR_0->p.RegisterNumber] &&\n\t\t    VAR_7[VAR_0->p.RegisterNumber]->Type != 4 &&\n\t\t    VAR_7[VAR_0->p.RegisterNumber]->Type != 7 )\n\t\t{\n\t\t\treturn getName(VAR_7[VAR_0->p.RegisterNumber]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tVAR_1=malloc(5); /* COMMENT_5 */\n\t\t\tsprintf(VAR_1,\"R%d\", VAR_0->p.RegisterNumber );\n\t\t\treturn VAR_1;\n\t\t}\n\tcase VAR_8: /* COMMENT_6 */\n\t\tif( VAR_0->p.Boolean )\n\t\t\treturn \"true\";\n\t\telse\n\t\t\treturn \"false\";\n\tcase VAR_9: /* COMMENT_7 */\n\t{\n\t\tchar VAR_10[1];\n\t\tint VAR_11 = snprintf(VAR_10, 1, \"%g\", VAR_0->p.Double) + 1;\n\t\tif (VAR_11 <= 0)\n\t\t{\n\t\t        SWF_warn(\"WARNING: could not evaluate size of buffer (memory issue ?).\\n\");\n\t\t        break;\n\t\t}\n\n\t\tVAR_1 = malloc(VAR_11);\n\t\tsprintf(VAR_1, \"%g\", VAR_0->p.Double );\n\t\treturn VAR_1;\n\t}\n\tcase VAR_12: /* COMMENT_8 */\n\t{\n\t\tchar VAR_10[1];\n\t\tint VAR_11 = snprintf(VAR_10, 1, \"%ld\", VAR_0->p.Integer) + 1;\n\t\tif (VAR_11 <= 0)\n\t\t{\n\t\t        SWF_warn(\"WARNING: could not evaluate size of buffer (memory issue ?).\\n\");\n\t\t        break;\n\t\t}\n\n\t\tVAR_1 = malloc(VAR_11);\n\t\tsprintf(VAR_1, \"%ld\", VAR_0->p.Integer );\n\t\treturn VAR_1;\n\t}\n\tcase VAR_13: /* COMMENT_9 */\n\t\tif (VAR_0->p.Constant8 > VAR_14)\n\t\t{\n\t\t        SWF_warn(\"WARNING: retrieving constants not present in the pool.\\n\");\n\t\t        break;\n\t\t}\n\t\tVAR_1=malloc(strlenext(VAR_15[VAR_0->p.Constant8])+3); /* COMMENT_1 */\n\t\tstrcpy(VAR_1,\"'\");\n\t\tstrcatext(VAR_1,VAR_15[VAR_0->p.Constant8]);\n\t\tstrcat(VAR_1,\"'\");\n\t\treturn VAR_1;\n\tcase VAR_16: /* COMMENT_10 */\n\t\tif (VAR_0->p.Constant16 > VAR_14)\n\t\t{\n\t\t        SWF_warn(\"WARNING: retrieving constants not present in the pool.\\n\");\n\t\t        break;\n\t\t}\n\t\tVAR_1=malloc(strlenext(VAR_15[VAR_0->p.Constant16])+3); /* COMMENT_11 */\n\t\tstrcpy(VAR_1,\"'\");\n\t\tstrcatext(VAR_1,VAR_15[VAR_0->p.Constant16]);\n\t\tstrcat(VAR_1,\"'\");\n\t\treturn VAR_1;\n\n\tcase 12:\n\tcase 11: /* COMMENT_12 */\n\tcase VAR_17: /* COMMENT_13 */\n\t\tif (!VAR_0->p.String)\n\t\t{\n\t\t        SWF_warn(\"WARNING: Call to getString with PUSH_VARIABLE defining NULL string.\\n\");\n\t\t        break;\n\t\t}\n\t\tVAR_1=malloc(strlen(VAR_0->p.String)+1); /* COMMENT_14 */\n\t\tstrcpy(VAR_1,VAR_0->p.String);\n\t\treturn VAR_1;\n\tdefault: \n\t\tfprintf (VAR_18,\"  Can't get string for type: %d\\n\", VAR_0->Type);\n\t\tbreak;\n\t}\n\n\tVAR_1 = malloc(sizeof(char));\n\tstrcpyext(VAR_1,\"\");\n\n\treturn VAR_1;\n}",
  "func_graph_path": "libming/0aab70a3020dd8b4fad66b20995fc691f24a0317/decompile.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -94,7 +94,14 @@\n \tcase 12:\n \tcase 11: /* INCREMENTED or DECREMENTED VARIABLE */\n \tcase PUSH_VARIABLE: /* VARIABLE */\n-\t\treturn act->p.String;\n+\t\tif (!act->p.String)\n+\t\t{\n+\t\t        SWF_warn(\"WARNING: Call to getString with PUSH_VARIABLE defining NULL string.\\n\");\n+\t\t        break;\n+\t\t}\n+\t\tt=malloc(strlen(act->p.String)+1); /* NULL character */\n+\t\tstrcpy(t,act->p.String);\n+\t\treturn t;\n \tdefault: \n \t\tfprintf (stderr,\"  Can't get string for type: %d\\n\", act->Type);\n \t\tbreak;",
  "diff_line_info": {
    "deleted_lines": [
      "\t\treturn act->p.String;"
    ],
    "added_lines": [
      "\t\tif (!act->p.String)",
      "\t\t{",
      "\t\t        SWF_warn(\"WARNING: Call to getString with PUSH_VARIABLE defining NULL string.\\n\");",
      "\t\t        break;",
      "\t\t}",
      "\t\tt=malloc(strlen(act->p.String)+1); /* NULL character */",
      "\t\tstrcpy(t,act->p.String);",
      "\t\treturn t;"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/libming/libming/pull/145",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/libming/libming/pull/145: 403 Client Error: Forbidden for url: https://api.github.com/repos/libming/libming/pulls/145",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 1.0"
}