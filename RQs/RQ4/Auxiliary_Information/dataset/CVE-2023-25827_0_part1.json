{
  "cve_id": "CVE-2023-25827",
  "cwe_ids": [
    "CWE-79"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
  "cvss_is_v3": true,
  "repo_name": "OpenTSDB/opentsdb",
  "commit_msg": "Fix for #2269 and #2267 XSS vulnerability.\nEscaping the user supplied input when outputing the HTML for the old BadRequest\nHTML handlers should help. Thanks to the reporters.\nFixes CVE-2018-13003.",
  "commit_hash": "ff02c1e95e60528275f69b31bcbf7b2ac625cea8",
  "git_url": "https://github.com/OpenTSDB/opentsdb/commit/ff02c1e95e60528275f69b31bcbf7b2ac625cea8",
  "file_path": "test/tsd/TestQueryRpc.java",
  "func_name": "executeNSU",
  "func_before": "@Test\n  public void executeNSU() throws Exception {\n    final DeferredGroupException dge = mock(DeferredGroupException.class);\n    when(dge.getCause()).thenReturn(new NoSuchUniqueName(\"foo\", \"metrics\"));\n\n    when(query_result.configureFromQuery((TSQuery)any(), anyInt()))\n      .thenReturn(Deferred.fromError(dge));\n\n    final HttpQuery query = NettyMocks.getQuery(tsdb,\n        \"/api/query?start=1h-ago&m=sum:sys.cpu.user\");\n    rpc.execute(tsdb, query);\n    assertEquals(HttpResponseStatus.BAD_REQUEST, query.response().getStatus());\n    final String json =\n        query.response().getContent().toString(Charset.forName(\"UTF-8\"));\n    assertTrue(json.contains(\"No such name for 'foo': 'metrics'\"));\n  }",
  "abstract_func_before": "@Test\n  public void executeNSU() throws Exception {\n    final DeferredGroupException VAR_0 = mock(DeferredGroupException.class);\n    when(VAR_0.getCause()).thenReturn(new NoSuchUniqueName(\"foo\", \"metrics\"));\n\n    when(VAR_1.configureFromQuery((TSQuery)any(), anyInt()))\n      .thenReturn(VAR_2.fromError(VAR_0));\n\n    final HttpQuery VAR_3 = VAR_4.getQuery(VAR_5,\n        \"/api/query?start=1h-ago&m=sum:sys.cpu.user\");\n    VAR_6.execute(VAR_5, VAR_3);\n    assertEquals(VAR_7.BAD_REQUEST, VAR_3.response().getStatus());\n    final String VAR_8 =\n        VAR_3.response().getContent().toString(VAR_9.forName(\"UTF-8\"));\n    assertTrue(VAR_8.contains(\"No such name for 'foo': 'metrics'\"));\n  }",
  "func_graph_path_before": "OpenTSDB/opentsdb/ff02c1e95e60528275f69b31bcbf7b2ac625cea8/TestQueryRpc.java/vul/before/1.json",
  "func": "@Test\n  public void executeNSU() throws Exception {\n    final DeferredGroupException dge = mock(DeferredGroupException.class);\n    when(dge.getCause()).thenReturn(new NoSuchUniqueName(\"foo\", \"metrics\"));\n\n    when(query_result.configureFromQuery((TSQuery)any(), anyInt()))\n      .thenReturn(Deferred.fromError(dge));\n\n    final HttpQuery query = NettyMocks.getQuery(tsdb,\n        \"/api/query?start=1h-ago&m=sum:sys.cpu.user\");\n    rpc.execute(tsdb, query);\n    assertEquals(HttpResponseStatus.BAD_REQUEST, query.response().getStatus());\n    final String json =\n        query.response().getContent().toString(Charset.forName(\"UTF-8\"));\n    assertTrue(json.contains(\"No such name for &#39;foo&#39;: &#39;metrics&#39;\"));\n  }",
  "abstract_func": "@Test\n  public void executeNSU() throws Exception {\n    final DeferredGroupException VAR_0 = mock(DeferredGroupException.class);\n    when(VAR_0.getCause()).thenReturn(new NoSuchUniqueName(\"foo\", \"metrics\"));\n\n    when(VAR_1.configureFromQuery((TSQuery)any(), anyInt()))\n      .thenReturn(VAR_2.fromError(VAR_0));\n\n    final HttpQuery VAR_3 = VAR_4.getQuery(VAR_5,\n        \"/api/query?start=1h-ago&m=sum:sys.cpu.user\");\n    VAR_6.execute(VAR_5, VAR_3);\n    assertEquals(VAR_7.BAD_REQUEST, VAR_3.response().getStatus());\n    final String VAR_8 =\n        VAR_3.response().getContent().toString(VAR_9.forName(\"UTF-8\"));\n    assertTrue(VAR_8.contains(\"No such name for &#39;foo&#39;: &#39;metrics&#39;\"));\n  }",
  "func_graph_path": "OpenTSDB/opentsdb/ff02c1e95e60528275f69b31bcbf7b2ac625cea8/TestQueryRpc.java/vul/after/1.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -12,5 +12,5 @@\n     assertEquals(HttpResponseStatus.BAD_REQUEST, query.response().getStatus());\n     final String json =\n         query.response().getContent().toString(Charset.forName(\"UTF-8\"));\n-    assertTrue(json.contains(\"No such name for 'foo': 'metrics'\"));\n+    assertTrue(json.contains(\"No such name for &#39;foo&#39;: &#39;metrics&#39;\"));\n   }",
  "diff_line_info": {
    "deleted_lines": [
      "    assertTrue(json.contains(\"No such name for 'foo': 'metrics'\"));"
    ],
    "added_lines": [
      "    assertTrue(json.contains(\"No such name for &#39;foo&#39;: &#39;metrics&#39;\"));"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/OpenTSDB/opentsdb/pull/2274",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/OpenTSDB/opentsdb/pull/2274: 403 Client Error: Forbidden for url: https://api.github.com/repos/OpenTSDB/opentsdb/pulls/2274",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 1.0  \n**Rationale:** The commit message and code changes explicitly address an XSS vulnerability, involve escaping user input, and reference a specific CVE (CVE-2018-13003), confirming it's a security fix."
}