{
  "cve_id": "CVE-2018-9988",
  "cwe_ids": [
    "CWE-125"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "Mbed-TLS/mbedtls",
  "commit_msg": "Add bounds check before signature length read",
  "commit_hash": "a1098f81c252b317ad34ea978aea2bc47760b215",
  "git_url": "https://github.com/Mbed-TLS/mbedtls/commit/a1098f81c252b317ad34ea978aea2bc47760b215",
  "file_path": "library/ssl_cli.c",
  "func_name": "ssl_parse_server_key_exchange",
  "func_before": "static int ssl_parse_server_key_exchange( mbedtls_ssl_context *ssl )\n{\n    int ret;\n    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =\n        ssl->transform_negotiate->ciphersuite_info;\n    unsigned char *p = NULL, *end = NULL;\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"=> parse server key exchange\" ) );\n\n#if defined(MBEDTLS_KEY_EXCHANGE_RSA_ENABLED)\n    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= skip parse server key exchange\" ) );\n        ssl->state++;\n        return( 0 );\n    }\n    ((void) p);\n    ((void) end);\n#endif\n\n#if defined(MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED) || \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED)\n    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDH_RSA ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA )\n    {\n        if( ( ret = ssl_get_ecdh_params_from_cert( ssl ) ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, \"ssl_get_ecdh_params_from_cert\", ret );\n            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                            MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );\n            return( ret );\n        }\n\n        MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= skip parse server key exchange\" ) );\n        ssl->state++;\n        return( 0 );\n    }\n    ((void) p);\n    ((void) end);\n#endif /* MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED ||\n          MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED */\n\n    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ssl_read_record\", ret );\n        return( ret );\n    }\n\n    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad server key exchange message\" ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );\n        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );\n    }\n\n    /*\n     * ServerKeyExchange may be skipped with PSK and RSA-PSK when the server\n     * doesn't use a psk_identity_hint\n     */\n    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_SERVER_KEY_EXCHANGE )\n    {\n        if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||\n            ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA_PSK )\n        {\n            /* Current message is probably either\n             * CertificateRequest or ServerHelloDone */\n            ssl->keep_current_message = 1;\n            goto exit;\n        }\n\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"server key exchange message must \"\n                                    \"not be skipped\" ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );\n\n        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );\n    }\n\n    p   = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );\n    end = ssl->in_msg + ssl->in_hslen;\n    MBEDTLS_SSL_DEBUG_BUF( 3,   \"server key exchange\", p, end - p );\n\n#if defined(MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED)\n    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA_PSK ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK )\n    {\n        if( ssl_parse_server_psk_hint( ssl, &p, end ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad server key exchange message\" ) );\n            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                            MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );\n            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );\n        }\n    } /* FALLTROUGH */\n#endif /* MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED */\n\n#if defined(MBEDTLS_KEY_EXCHANGE_PSK_ENABLED) ||                       \\\n    defined(MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED)\n    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA_PSK )\n        ; /* nothing more to do */\n    else\n#endif /* MBEDTLS_KEY_EXCHANGE_PSK_ENABLED ||\n          MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED */\n#if defined(MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED) ||                       \\\n    defined(MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED)\n    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_RSA ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK )\n    {\n        if( ssl_parse_server_dh_params( ssl, &p, end ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad server key exchange message\" ) );\n            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                            MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );\n            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );\n        }\n    }\n    else\n#endif /* MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED ||\n          MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED */\n#if defined(MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED) ||                     \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED) ||                     \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED)\n    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_RSA ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA )\n    {\n        if( ssl_parse_server_ecdh_params( ssl, &p, end ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad server key exchange message\" ) );\n            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                            MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );\n            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );\n        }\n    }\n    else\n#endif /* MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED ||\n          MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED ||\n          MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED */\n#if defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)\n    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE )\n    {\n        ret = mbedtls_ecjpake_read_round_two( &ssl->handshake->ecjpake_ctx,\n                                              p, end - p );\n        if( ret != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ecjpake_read_round_two\", ret );\n            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                            MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );\n            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );\n        }\n    }\n    else\n#endif /* MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED */\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"should never happen\" ) );\n        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );\n    }\n\n#if defined(MBEDTLS_KEY_EXCHANGE__WITH_SERVER_SIGNATURE__ENABLED)\n    if( mbedtls_ssl_ciphersuite_uses_server_signature( ciphersuite_info ) )\n    {\n        size_t sig_len, hashlen;\n        unsigned char hash[64];\n        mbedtls_md_type_t md_alg = MBEDTLS_MD_NONE;\n        mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;\n        unsigned char *params = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );\n        size_t params_len = p - params;\n\n        /*\n         * Handle the digitally-signed structure\n         */\n#if defined(MBEDTLS_SSL_PROTO_TLS1_2)\n        if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )\n        {\n            if( ssl_parse_signature_algorithm( ssl, &p, end,\n                                               &md_alg, &pk_alg ) != 0 )\n            {\n                MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad server key exchange message\" ) );\n                mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                                MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );\n                return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );\n            }\n\n            if( pk_alg != mbedtls_ssl_get_ciphersuite_sig_pk_alg( ciphersuite_info ) )\n            {\n                MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad server key exchange message\" ) );\n                mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                                MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );\n                return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );\n            }\n        }\n        else\n#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */\n#if defined(MBEDTLS_SSL_PROTO_SSL3) || defined(MBEDTLS_SSL_PROTO_TLS1) || \\\n    defined(MBEDTLS_SSL_PROTO_TLS1_1)\n        if( ssl->minor_ver < MBEDTLS_SSL_MINOR_VERSION_3 )\n        {\n            pk_alg = mbedtls_ssl_get_ciphersuite_sig_pk_alg( ciphersuite_info );\n\n            /* Default hash for ECDSA is SHA-1 */\n            if( pk_alg == MBEDTLS_PK_ECDSA && md_alg == MBEDTLS_MD_NONE )\n                md_alg = MBEDTLS_MD_SHA1;\n        }\n        else\n#endif\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"should never happen\" ) );\n            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );\n        }\n\n        /*\n         * Read signature\n         */\n        sig_len = ( p[0] << 8 ) | p[1];\n        p += 2;\n\n        if( end != p + sig_len )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad server key exchange message\" ) );\n            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );\n            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );\n        }\n\n        MBEDTLS_SSL_DEBUG_BUF( 3, \"signature\", p, sig_len );\n\n        /*\n         * Compute the hash that has been signed\n         */\n#if defined(MBEDTLS_SSL_PROTO_SSL3) || defined(MBEDTLS_SSL_PROTO_TLS1) || \\\n    defined(MBEDTLS_SSL_PROTO_TLS1_1)\n        if( md_alg == MBEDTLS_MD_NONE )\n        {\n            hashlen = 36;\n            ret = mbedtls_ssl_get_key_exchange_md_ssl_tls( ssl, hash, params,\n                                                           params_len );\n            if( ret != 0 )\n                return( ret );\n        }\n        else\n#endif /* MBEDTLS_SSL_PROTO_SSL3 || MBEDTLS_SSL_PROTO_TLS1 || \\\n          MBEDTLS_SSL_PROTO_TLS1_1 */\n#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \\\n    defined(MBEDTLS_SSL_PROTO_TLS1_2)\n        if( md_alg != MBEDTLS_MD_NONE )\n        {\n            /* Info from md_alg will be used instead */\n            hashlen = 0;\n            ret = mbedtls_ssl_get_key_exchange_md_tls1_2( ssl, hash, params,\n                                                          params_len, md_alg );\n            if( ret != 0 )\n                return( ret );\n        }\n        else\n#endif /* MBEDTLS_SSL_PROTO_TLS1 || MBEDTLS_SSL_PROTO_TLS1_1 || \\\n          MBEDTLS_SSL_PROTO_TLS1_2 */\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"should never happen\" ) );\n            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );\n        }\n\n        MBEDTLS_SSL_DEBUG_BUF( 3, \"parameters hash\", hash, hashlen != 0 ? hashlen :\n            (unsigned int) ( mbedtls_md_get_size( mbedtls_md_info_from_type( md_alg ) ) ) );\n\n        if( ssl->session_negotiate->peer_cert == NULL )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 2, ( \"certificate required\" ) );\n            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                            MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );\n            return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );\n        }\n\n        /*\n         * Verify signature\n         */\n        if( ! mbedtls_pk_can_do( &ssl->session_negotiate->peer_cert->pk, pk_alg ) )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad server key exchange message\" ) );\n            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                            MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );\n            return( MBEDTLS_ERR_SSL_PK_TYPE_MISMATCH );\n        }\n\n        if( ( ret = mbedtls_pk_verify( &ssl->session_negotiate->peer_cert->pk,\n                               md_alg, hash, hashlen, p, sig_len ) ) != 0 )\n        {\n            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                            MBEDTLS_SSL_ALERT_MSG_DECRYPT_ERROR );\n            MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_pk_verify\", ret );\n            return( ret );\n        }\n    }\n#endif /* MBEDTLS_KEY_EXCHANGE__WITH_SERVER_SIGNATURE__ENABLED */\n\nexit:\n    ssl->state++;\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= parse server key exchange\" ) );\n\n    return( 0 );\n}",
  "abstract_func_before": "static int ssl_parse_server_key_exchange( mbedtls_ssl_context *VAR_0 )\n{\n    int VAR_1;\n    const mbedtls_ssl_ciphersuite_t *VAR_2 =\n        VAR_0->transform_negotiate->ciphersuite_info;\n    unsigned char *VAR_3 = NULL, *VAR_4 = NULL;\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"=> parse server key exchange\" ) );\n\n#if defined(VAR_5)\n    if( VAR_2->key_exchange == VAR_6 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= skip parse server key exchange\" ) );\n        VAR_0->state++;\n        return( 0 );\n    }\n    ((void) VAR_3);\n    ((void) VAR_4);\n#endif\n\n#if defined(VAR_7) || \\\n    defined(VAR_8)\n    if( VAR_2->key_exchange == VAR_9 ||\n        VAR_2->key_exchange == VAR_10 )\n    {\n        if( ( VAR_1 = ssl_get_ecdh_params_from_cert( VAR_0 ) ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, \"ssl_get_ecdh_params_from_cert\", VAR_1 );\n            mbedtls_ssl_send_alert_message( VAR_0, VAR_11,\n                                            VAR_12 );\n            return( VAR_1 );\n        }\n\n        MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= skip parse server key exchange\" ) );\n        VAR_0->state++;\n        return( 0 );\n    }\n    ((void) VAR_3);\n    ((void) VAR_4);\n#endif /* COMMENT_0 */\n                                                    \n\n    if( ( VAR_1 = mbedtls_ssl_read_record( VAR_0 ) ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ssl_read_record\", VAR_1 );\n        return( VAR_1 );\n    }\n\n    if( VAR_0->in_msgtype != VAR_13 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad server key exchange message\" ) );\n        mbedtls_ssl_send_alert_message( VAR_0, VAR_11,\n                                        VAR_14 );\n        return( VAR_15 );\n    }\n\n    /* COMMENT_2 */\n                                                                            \n                                      \n       \n    if( VAR_0->in_msg[0] != VAR_16 )\n    {\n        if( VAR_2->key_exchange == VAR_17 ||\n            VAR_2->key_exchange == VAR_18 )\n        {\n            /* COMMENT_6 */\n                                                       \n            VAR_0->keep_current_message = 1;\n            goto exit;\n        }\n\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"server key exchange message must \"\n                                    \"not be skipped\" ) );\n        mbedtls_ssl_send_alert_message( VAR_0, VAR_11,\n                                        VAR_14 );\n\n        return( VAR_15 );\n    }\n\n    VAR_3   = VAR_0->in_msg + mbedtls_ssl_hs_hdr_len( VAR_0 );\n    VAR_4 = VAR_0->in_msg + VAR_0->in_hslen;\n    MBEDTLS_SSL_DEBUG_BUF( 3,   \"server key exchange\", VAR_3, VAR_4 - VAR_3 );\n\n#if defined(VAR_19)\n    if( VAR_2->key_exchange == VAR_17 ||\n        VAR_2->key_exchange == VAR_18 ||\n        VAR_2->key_exchange == VAR_20 ||\n        VAR_2->key_exchange == VAR_21 )\n    {\n        if( ssl_parse_server_psk_hint( VAR_0, &VAR_3, VAR_4 ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad server key exchange message\" ) );\n            mbedtls_ssl_send_alert_message( VAR_0, VAR_11,\n                                            VAR_22 );\n            return( VAR_23 );\n        }\n    } /* COMMENT_8 */\n#endif /* COMMENT_9 */\n\n#if defined(VAR_24) ||                       \\\n    defined(VAR_25)\n    if( VAR_2->key_exchange == VAR_17 ||\n        VAR_2->key_exchange == VAR_18 )\n        ; /* COMMENT_10 */\n    else\n#endif /* COMMENT_11 */\n                                                 \n#if defined(VAR_26) ||                       \\\n    defined(VAR_27)\n    if( VAR_2->key_exchange == VAR_28 ||\n        VAR_2->key_exchange == VAR_20 )\n    {\n        if( ssl_parse_server_dh_params( VAR_0, &VAR_3, VAR_4 ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad server key exchange message\" ) );\n            mbedtls_ssl_send_alert_message( VAR_0, VAR_11,\n                                            VAR_22 );\n            return( VAR_23 );\n        }\n    }\n    else\n#endif /* COMMENT_13 */\n                                                 \n#if defined(VAR_29) ||                     \\\n    defined(VAR_30) ||                     \\\n    defined(VAR_31)\n    if( VAR_2->key_exchange == VAR_32 ||\n        VAR_2->key_exchange == VAR_21 ||\n        VAR_2->key_exchange == VAR_33 )\n    {\n        if( ssl_parse_server_ecdh_params( VAR_0, &VAR_3, VAR_4 ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad server key exchange message\" ) );\n            mbedtls_ssl_send_alert_message( VAR_0, VAR_11,\n                                            VAR_22 );\n            return( VAR_23 );\n        }\n    }\n    else\n#endif /* COMMENT_15 */\n                                                   \n                                                     \n#if defined(VAR_34)\n    if( VAR_2->key_exchange == VAR_35 )\n    {\n        VAR_1 = mbedtls_ecjpake_read_round_two( &VAR_0->handshake->ecjpake_ctx,\n                                              VAR_3, VAR_4 - VAR_3 );\n        if( VAR_1 != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ecjpake_read_round_two\", VAR_1 );\n            mbedtls_ssl_send_alert_message( VAR_0, VAR_11,\n                                            VAR_22 );\n            return( VAR_23 );\n        }\n    }\n    else\n#endif /* COMMENT_18 */\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"should never happen\" ) );\n        return( VAR_36 );\n    }\n\n#if defined(VAR_37)\n    if( mbedtls_ssl_ciphersuite_uses_server_signature( VAR_2 ) )\n    {\n        size_t VAR_38, VAR_39;\n        unsigned char VAR_40[64];\n        mbedtls_md_type_t VAR_41 = VAR_42;\n        mbedtls_pk_type_t VAR_43 = VAR_44;\n        unsigned char *VAR_45 = VAR_0->in_msg + mbedtls_ssl_hs_hdr_len( VAR_0 );\n        size_t VAR_46 = VAR_3 - VAR_45;\n\n        /* COMMENT_19 */\n                                                \n           \n#if defined(VAR_47)\n        if( VAR_0->minor_ver == VAR_48 )\n        {\n            if( ssl_parse_signature_algorithm( VAR_0, &VAR_3, VAR_4,\n                                               &VAR_41, &VAR_43 ) != 0 )\n            {\n                MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad server key exchange message\" ) );\n                mbedtls_ssl_send_alert_message( VAR_0, VAR_11,\n                                                VAR_22 );\n                return( VAR_23 );\n            }\n\n            if( VAR_43 != mbedtls_ssl_get_ciphersuite_sig_pk_alg( VAR_2 ) )\n            {\n                MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad server key exchange message\" ) );\n                mbedtls_ssl_send_alert_message( VAR_0, VAR_11,\n                                                VAR_22 );\n                return( VAR_23 );\n            }\n        }\n        else\n#endif /* COMMENT_22 */\n#if defined(VAR_49) || defined(VAR_50) || \\\n    defined(VAR_51)\n        if( VAR_0->minor_ver < VAR_48 )\n        {\n            VAR_43 = mbedtls_ssl_get_ciphersuite_sig_pk_alg( VAR_2 );\n\n            /* COMMENT_23 */\n            if( VAR_43 == VAR_52 && VAR_41 == VAR_42 )\n                VAR_41 = VAR_53;\n        }\n        else\n#endif\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"should never happen\" ) );\n            return( VAR_36 );\n        }\n\n        /* COMMENT_24 */\n                         \n           \n        VAR_38 = ( VAR_3[0] << 8 ) | VAR_3[1];\n        VAR_3 += 2;\n\n        if( VAR_4 != VAR_3 + VAR_38 )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad server key exchange message\" ) );\n            mbedtls_ssl_send_alert_message( VAR_0, VAR_11,\n                                            VAR_54 );\n            return( VAR_23 );\n        }\n\n        MBEDTLS_SSL_DEBUG_BUF( 3, \"signature\", VAR_3, VAR_38 );\n\n        /* COMMENT_27 */\n                                                \n           \n#if defined(VAR_49) || defined(VAR_50) || \\\n    defined(VAR_51)\n        if( VAR_41 == VAR_42 )\n        {\n            VAR_39 = 36;\n            VAR_1 = mbedtls_ssl_get_key_exchange_md_ssl_tls( VAR_0, VAR_40, VAR_45,\n                                                           VAR_46 );\n            if( VAR_1 != 0 )\n                return( VAR_1 );\n        }\n        else\n#endif /* COMMENT_30 */\n                                     \n#if defined(VAR_50) || defined(VAR_51) || \\\n    defined(VAR_47)\n        if( VAR_41 != VAR_42 )\n        {\n            /* COMMENT_32 */\n            VAR_39 = 0;\n            VAR_1 = mbedtls_ssl_get_key_exchange_md_tls1_2( VAR_0, VAR_40, VAR_45,\n                                                          VAR_46, VAR_41 );\n            if( VAR_1 != 0 )\n                return( VAR_1 );\n        }\n        else\n#endif /* COMMENT_33 */\n                                     \n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"should never happen\" ) );\n            return( VAR_36 );\n        }\n\n        MBEDTLS_SSL_DEBUG_BUF( 3, \"parameters hash\", VAR_40, VAR_39 != 0 ? VAR_39 :\n            (unsigned int) ( mbedtls_md_get_size( mbedtls_md_info_from_type( VAR_41 ) ) ) );\n\n        if( VAR_0->session_negotiate->peer_cert == NULL )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 2, ( \"certificate required\" ) );\n            mbedtls_ssl_send_alert_message( VAR_0, VAR_11,\n                                            VAR_12 );\n            return( VAR_15 );\n        }\n\n        /* COMMENT_35 */\n                           \n           \n        if( ! mbedtls_pk_can_do( &VAR_0->session_negotiate->peer_cert->pk, VAR_43 ) )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad server key exchange message\" ) );\n            mbedtls_ssl_send_alert_message( VAR_0, VAR_11,\n                                            VAR_12 );\n            return( VAR_55 );\n        }\n\n        if( ( VAR_1 = mbedtls_pk_verify( &VAR_0->session_negotiate->peer_cert->pk,\n                               VAR_41, VAR_40, VAR_39, VAR_3, VAR_38 ) ) != 0 )\n        {\n            mbedtls_ssl_send_alert_message( VAR_0, VAR_11,\n                                            VAR_56 );\n            MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_pk_verify\", VAR_1 );\n            return( VAR_1 );\n        }\n    }\n#endif /* COMMENT_38 */\n\nexit:\n    VAR_0->state++;\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= parse server key exchange\" ) );\n\n    return( 0 );\n}",
  "func_graph_path_before": "Mbed-TLS/mbedtls/a1098f81c252b317ad34ea978aea2bc47760b215/ssl_cli.c/vul/before/0.json",
  "func": "static int ssl_parse_server_key_exchange( mbedtls_ssl_context *ssl )\n{\n    int ret;\n    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =\n        ssl->transform_negotiate->ciphersuite_info;\n    unsigned char *p = NULL, *end = NULL;\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"=> parse server key exchange\" ) );\n\n#if defined(MBEDTLS_KEY_EXCHANGE_RSA_ENABLED)\n    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= skip parse server key exchange\" ) );\n        ssl->state++;\n        return( 0 );\n    }\n    ((void) p);\n    ((void) end);\n#endif\n\n#if defined(MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED) || \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED)\n    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDH_RSA ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA )\n    {\n        if( ( ret = ssl_get_ecdh_params_from_cert( ssl ) ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, \"ssl_get_ecdh_params_from_cert\", ret );\n            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                            MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );\n            return( ret );\n        }\n\n        MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= skip parse server key exchange\" ) );\n        ssl->state++;\n        return( 0 );\n    }\n    ((void) p);\n    ((void) end);\n#endif /* MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED ||\n          MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED */\n\n    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ssl_read_record\", ret );\n        return( ret );\n    }\n\n    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad server key exchange message\" ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );\n        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );\n    }\n\n    /*\n     * ServerKeyExchange may be skipped with PSK and RSA-PSK when the server\n     * doesn't use a psk_identity_hint\n     */\n    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_SERVER_KEY_EXCHANGE )\n    {\n        if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||\n            ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA_PSK )\n        {\n            /* Current message is probably either\n             * CertificateRequest or ServerHelloDone */\n            ssl->keep_current_message = 1;\n            goto exit;\n        }\n\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"server key exchange message must \"\n                                    \"not be skipped\" ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );\n\n        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );\n    }\n\n    p   = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );\n    end = ssl->in_msg + ssl->in_hslen;\n    MBEDTLS_SSL_DEBUG_BUF( 3,   \"server key exchange\", p, end - p );\n\n#if defined(MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED)\n    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA_PSK ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK )\n    {\n        if( ssl_parse_server_psk_hint( ssl, &p, end ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad server key exchange message\" ) );\n            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                            MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );\n            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );\n        }\n    } /* FALLTROUGH */\n#endif /* MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED */\n\n#if defined(MBEDTLS_KEY_EXCHANGE_PSK_ENABLED) ||                       \\\n    defined(MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED)\n    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA_PSK )\n        ; /* nothing more to do */\n    else\n#endif /* MBEDTLS_KEY_EXCHANGE_PSK_ENABLED ||\n          MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED */\n#if defined(MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED) ||                       \\\n    defined(MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED)\n    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_RSA ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK )\n    {\n        if( ssl_parse_server_dh_params( ssl, &p, end ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad server key exchange message\" ) );\n            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                            MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );\n            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );\n        }\n    }\n    else\n#endif /* MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED ||\n          MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED */\n#if defined(MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED) ||                     \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED) ||                     \\\n    defined(MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED)\n    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_RSA ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||\n        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA )\n    {\n        if( ssl_parse_server_ecdh_params( ssl, &p, end ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad server key exchange message\" ) );\n            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                            MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );\n            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );\n        }\n    }\n    else\n#endif /* MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED ||\n          MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED ||\n          MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED */\n#if defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)\n    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE )\n    {\n        ret = mbedtls_ecjpake_read_round_two( &ssl->handshake->ecjpake_ctx,\n                                              p, end - p );\n        if( ret != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ecjpake_read_round_two\", ret );\n            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                            MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );\n            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );\n        }\n    }\n    else\n#endif /* MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED */\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"should never happen\" ) );\n        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );\n    }\n\n#if defined(MBEDTLS_KEY_EXCHANGE__WITH_SERVER_SIGNATURE__ENABLED)\n    if( mbedtls_ssl_ciphersuite_uses_server_signature( ciphersuite_info ) )\n    {\n        size_t sig_len, hashlen;\n        unsigned char hash[64];\n        mbedtls_md_type_t md_alg = MBEDTLS_MD_NONE;\n        mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;\n        unsigned char *params = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );\n        size_t params_len = p - params;\n\n        /*\n         * Handle the digitally-signed structure\n         */\n#if defined(MBEDTLS_SSL_PROTO_TLS1_2)\n        if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )\n        {\n            if( ssl_parse_signature_algorithm( ssl, &p, end,\n                                               &md_alg, &pk_alg ) != 0 )\n            {\n                MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad server key exchange message\" ) );\n                mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                                MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );\n                return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );\n            }\n\n            if( pk_alg != mbedtls_ssl_get_ciphersuite_sig_pk_alg( ciphersuite_info ) )\n            {\n                MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad server key exchange message\" ) );\n                mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                                MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );\n                return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );\n            }\n        }\n        else\n#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */\n#if defined(MBEDTLS_SSL_PROTO_SSL3) || defined(MBEDTLS_SSL_PROTO_TLS1) || \\\n    defined(MBEDTLS_SSL_PROTO_TLS1_1)\n        if( ssl->minor_ver < MBEDTLS_SSL_MINOR_VERSION_3 )\n        {\n            pk_alg = mbedtls_ssl_get_ciphersuite_sig_pk_alg( ciphersuite_info );\n\n            /* Default hash for ECDSA is SHA-1 */\n            if( pk_alg == MBEDTLS_PK_ECDSA && md_alg == MBEDTLS_MD_NONE )\n                md_alg = MBEDTLS_MD_SHA1;\n        }\n        else\n#endif\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"should never happen\" ) );\n            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );\n        }\n\n        /*\n         * Read signature\n         */\n\n        if( p > end - 2 )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad server key exchange message\" ) );\n            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );\n            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );\n        }\n        sig_len = ( p[0] << 8 ) | p[1];\n        p += 2;\n\n        if( end != p + sig_len )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad server key exchange message\" ) );\n            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );\n            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );\n        }\n\n        MBEDTLS_SSL_DEBUG_BUF( 3, \"signature\", p, sig_len );\n\n        /*\n         * Compute the hash that has been signed\n         */\n#if defined(MBEDTLS_SSL_PROTO_SSL3) || defined(MBEDTLS_SSL_PROTO_TLS1) || \\\n    defined(MBEDTLS_SSL_PROTO_TLS1_1)\n        if( md_alg == MBEDTLS_MD_NONE )\n        {\n            hashlen = 36;\n            ret = mbedtls_ssl_get_key_exchange_md_ssl_tls( ssl, hash, params,\n                                                           params_len );\n            if( ret != 0 )\n                return( ret );\n        }\n        else\n#endif /* MBEDTLS_SSL_PROTO_SSL3 || MBEDTLS_SSL_PROTO_TLS1 || \\\n          MBEDTLS_SSL_PROTO_TLS1_1 */\n#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \\\n    defined(MBEDTLS_SSL_PROTO_TLS1_2)\n        if( md_alg != MBEDTLS_MD_NONE )\n        {\n            /* Info from md_alg will be used instead */\n            hashlen = 0;\n            ret = mbedtls_ssl_get_key_exchange_md_tls1_2( ssl, hash, params,\n                                                          params_len, md_alg );\n            if( ret != 0 )\n                return( ret );\n        }\n        else\n#endif /* MBEDTLS_SSL_PROTO_TLS1 || MBEDTLS_SSL_PROTO_TLS1_1 || \\\n          MBEDTLS_SSL_PROTO_TLS1_2 */\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"should never happen\" ) );\n            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );\n        }\n\n        MBEDTLS_SSL_DEBUG_BUF( 3, \"parameters hash\", hash, hashlen != 0 ? hashlen :\n            (unsigned int) ( mbedtls_md_get_size( mbedtls_md_info_from_type( md_alg ) ) ) );\n\n        if( ssl->session_negotiate->peer_cert == NULL )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 2, ( \"certificate required\" ) );\n            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                            MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );\n            return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );\n        }\n\n        /*\n         * Verify signature\n         */\n        if( ! mbedtls_pk_can_do( &ssl->session_negotiate->peer_cert->pk, pk_alg ) )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad server key exchange message\" ) );\n            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                            MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );\n            return( MBEDTLS_ERR_SSL_PK_TYPE_MISMATCH );\n        }\n\n        if( ( ret = mbedtls_pk_verify( &ssl->session_negotiate->peer_cert->pk,\n                               md_alg, hash, hashlen, p, sig_len ) ) != 0 )\n        {\n            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                            MBEDTLS_SSL_ALERT_MSG_DECRYPT_ERROR );\n            MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_pk_verify\", ret );\n            return( ret );\n        }\n    }\n#endif /* MBEDTLS_KEY_EXCHANGE__WITH_SERVER_SIGNATURE__ENABLED */\n\nexit:\n    ssl->state++;\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= parse server key exchange\" ) );\n\n    return( 0 );\n}",
  "abstract_func": "static int ssl_parse_server_key_exchange( mbedtls_ssl_context *VAR_0 )\n{\n    int VAR_1;\n    const mbedtls_ssl_ciphersuite_t *VAR_2 =\n        VAR_0->transform_negotiate->ciphersuite_info;\n    unsigned char *VAR_3 = NULL, *VAR_4 = NULL;\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"=> parse server key exchange\" ) );\n\n#if defined(VAR_5)\n    if( VAR_2->key_exchange == VAR_6 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= skip parse server key exchange\" ) );\n        VAR_0->state++;\n        return( 0 );\n    }\n    ((void) VAR_3);\n    ((void) VAR_4);\n#endif\n\n#if defined(VAR_7) || \\\n    defined(VAR_8)\n    if( VAR_2->key_exchange == VAR_9 ||\n        VAR_2->key_exchange == VAR_10 )\n    {\n        if( ( VAR_1 = ssl_get_ecdh_params_from_cert( VAR_0 ) ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, \"ssl_get_ecdh_params_from_cert\", VAR_1 );\n            mbedtls_ssl_send_alert_message( VAR_0, VAR_11,\n                                            VAR_12 );\n            return( VAR_1 );\n        }\n\n        MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= skip parse server key exchange\" ) );\n        VAR_0->state++;\n        return( 0 );\n    }\n    ((void) VAR_3);\n    ((void) VAR_4);\n#endif /* COMMENT_0 */\n                                                    \n\n    if( ( VAR_1 = mbedtls_ssl_read_record( VAR_0 ) ) != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ssl_read_record\", VAR_1 );\n        return( VAR_1 );\n    }\n\n    if( VAR_0->in_msgtype != VAR_13 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad server key exchange message\" ) );\n        mbedtls_ssl_send_alert_message( VAR_0, VAR_11,\n                                        VAR_14 );\n        return( VAR_15 );\n    }\n\n    /* COMMENT_2 */\n                                                                            \n                                      \n       \n    if( VAR_0->in_msg[0] != VAR_16 )\n    {\n        if( VAR_2->key_exchange == VAR_17 ||\n            VAR_2->key_exchange == VAR_18 )\n        {\n            /* COMMENT_6 */\n                                                       \n            VAR_0->keep_current_message = 1;\n            goto exit;\n        }\n\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"server key exchange message must \"\n                                    \"not be skipped\" ) );\n        mbedtls_ssl_send_alert_message( VAR_0, VAR_11,\n                                        VAR_14 );\n\n        return( VAR_15 );\n    }\n\n    VAR_3   = VAR_0->in_msg + mbedtls_ssl_hs_hdr_len( VAR_0 );\n    VAR_4 = VAR_0->in_msg + VAR_0->in_hslen;\n    MBEDTLS_SSL_DEBUG_BUF( 3,   \"server key exchange\", VAR_3, VAR_4 - VAR_3 );\n\n#if defined(VAR_19)\n    if( VAR_2->key_exchange == VAR_17 ||\n        VAR_2->key_exchange == VAR_18 ||\n        VAR_2->key_exchange == VAR_20 ||\n        VAR_2->key_exchange == VAR_21 )\n    {\n        if( ssl_parse_server_psk_hint( VAR_0, &VAR_3, VAR_4 ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad server key exchange message\" ) );\n            mbedtls_ssl_send_alert_message( VAR_0, VAR_11,\n                                            VAR_22 );\n            return( VAR_23 );\n        }\n    } /* COMMENT_8 */\n#endif /* COMMENT_9 */\n\n#if defined(VAR_24) ||                       \\\n    defined(VAR_25)\n    if( VAR_2->key_exchange == VAR_17 ||\n        VAR_2->key_exchange == VAR_18 )\n        ; /* COMMENT_10 */\n    else\n#endif /* COMMENT_11 */\n                                                 \n#if defined(VAR_26) ||                       \\\n    defined(VAR_27)\n    if( VAR_2->key_exchange == VAR_28 ||\n        VAR_2->key_exchange == VAR_20 )\n    {\n        if( ssl_parse_server_dh_params( VAR_0, &VAR_3, VAR_4 ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad server key exchange message\" ) );\n            mbedtls_ssl_send_alert_message( VAR_0, VAR_11,\n                                            VAR_22 );\n            return( VAR_23 );\n        }\n    }\n    else\n#endif /* COMMENT_13 */\n                                                 \n#if defined(VAR_29) ||                     \\\n    defined(VAR_30) ||                     \\\n    defined(VAR_31)\n    if( VAR_2->key_exchange == VAR_32 ||\n        VAR_2->key_exchange == VAR_21 ||\n        VAR_2->key_exchange == VAR_33 )\n    {\n        if( ssl_parse_server_ecdh_params( VAR_0, &VAR_3, VAR_4 ) != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad server key exchange message\" ) );\n            mbedtls_ssl_send_alert_message( VAR_0, VAR_11,\n                                            VAR_22 );\n            return( VAR_23 );\n        }\n    }\n    else\n#endif /* COMMENT_15 */\n                                                   \n                                                     \n#if defined(VAR_34)\n    if( VAR_2->key_exchange == VAR_35 )\n    {\n        VAR_1 = mbedtls_ecjpake_read_round_two( &VAR_0->handshake->ecjpake_ctx,\n                                              VAR_3, VAR_4 - VAR_3 );\n        if( VAR_1 != 0 )\n        {\n            MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_ecjpake_read_round_two\", VAR_1 );\n            mbedtls_ssl_send_alert_message( VAR_0, VAR_11,\n                                            VAR_22 );\n            return( VAR_23 );\n        }\n    }\n    else\n#endif /* COMMENT_18 */\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"should never happen\" ) );\n        return( VAR_36 );\n    }\n\n#if defined(VAR_37)\n    if( mbedtls_ssl_ciphersuite_uses_server_signature( VAR_2 ) )\n    {\n        size_t VAR_38, VAR_39;\n        unsigned char VAR_40[64];\n        mbedtls_md_type_t VAR_41 = VAR_42;\n        mbedtls_pk_type_t VAR_43 = VAR_44;\n        unsigned char *VAR_45 = VAR_0->in_msg + mbedtls_ssl_hs_hdr_len( VAR_0 );\n        size_t VAR_46 = VAR_3 - VAR_45;\n\n        /* COMMENT_19 */\n                                                \n           \n#if defined(VAR_47)\n        if( VAR_0->minor_ver == VAR_48 )\n        {\n            if( ssl_parse_signature_algorithm( VAR_0, &VAR_3, VAR_4,\n                                               &VAR_41, &VAR_43 ) != 0 )\n            {\n                MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad server key exchange message\" ) );\n                mbedtls_ssl_send_alert_message( VAR_0, VAR_11,\n                                                VAR_22 );\n                return( VAR_23 );\n            }\n\n            if( VAR_43 != mbedtls_ssl_get_ciphersuite_sig_pk_alg( VAR_2 ) )\n            {\n                MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad server key exchange message\" ) );\n                mbedtls_ssl_send_alert_message( VAR_0, VAR_11,\n                                                VAR_22 );\n                return( VAR_23 );\n            }\n        }\n        else\n#endif /* COMMENT_22 */\n#if defined(VAR_49) || defined(VAR_50) || \\\n    defined(VAR_51)\n        if( VAR_0->minor_ver < VAR_48 )\n        {\n            VAR_43 = mbedtls_ssl_get_ciphersuite_sig_pk_alg( VAR_2 );\n\n            /* COMMENT_23 */\n            if( VAR_43 == VAR_52 && VAR_41 == VAR_42 )\n                VAR_41 = VAR_53;\n        }\n        else\n#endif\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"should never happen\" ) );\n            return( VAR_36 );\n        }\n\n        /* COMMENT_24 */\n                         \n           \n\n        if( VAR_3 > VAR_4 - 2 )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad server key exchange message\" ) );\n            mbedtls_ssl_send_alert_message( VAR_0, VAR_11,\n                                            VAR_54 );\n            return( VAR_23 );\n        }\n        VAR_38 = ( VAR_3[0] << 8 ) | VAR_3[1];\n        VAR_3 += 2;\n\n        if( VAR_4 != VAR_3 + VAR_38 )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad server key exchange message\" ) );\n            mbedtls_ssl_send_alert_message( VAR_0, VAR_11,\n                                            VAR_54 );\n            return( VAR_23 );\n        }\n\n        MBEDTLS_SSL_DEBUG_BUF( 3, \"signature\", VAR_3, VAR_38 );\n\n        /* COMMENT_27 */\n                                                \n           \n#if defined(VAR_49) || defined(VAR_50) || \\\n    defined(VAR_51)\n        if( VAR_41 == VAR_42 )\n        {\n            VAR_39 = 36;\n            VAR_1 = mbedtls_ssl_get_key_exchange_md_ssl_tls( VAR_0, VAR_40, VAR_45,\n                                                           VAR_46 );\n            if( VAR_1 != 0 )\n                return( VAR_1 );\n        }\n        else\n#endif /* COMMENT_30 */\n                                     \n#if defined(VAR_50) || defined(VAR_51) || \\\n    defined(VAR_47)\n        if( VAR_41 != VAR_42 )\n        {\n            /* COMMENT_32 */\n            VAR_39 = 0;\n            VAR_1 = mbedtls_ssl_get_key_exchange_md_tls1_2( VAR_0, VAR_40, VAR_45,\n                                                          VAR_46, VAR_41 );\n            if( VAR_1 != 0 )\n                return( VAR_1 );\n        }\n        else\n#endif /* COMMENT_33 */\n                                     \n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"should never happen\" ) );\n            return( VAR_36 );\n        }\n\n        MBEDTLS_SSL_DEBUG_BUF( 3, \"parameters hash\", VAR_40, VAR_39 != 0 ? VAR_39 :\n            (unsigned int) ( mbedtls_md_get_size( mbedtls_md_info_from_type( VAR_41 ) ) ) );\n\n        if( VAR_0->session_negotiate->peer_cert == NULL )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 2, ( \"certificate required\" ) );\n            mbedtls_ssl_send_alert_message( VAR_0, VAR_11,\n                                            VAR_12 );\n            return( VAR_15 );\n        }\n\n        /* COMMENT_35 */\n                           \n           \n        if( ! mbedtls_pk_can_do( &VAR_0->session_negotiate->peer_cert->pk, VAR_43 ) )\n        {\n            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad server key exchange message\" ) );\n            mbedtls_ssl_send_alert_message( VAR_0, VAR_11,\n                                            VAR_12 );\n            return( VAR_55 );\n        }\n\n        if( ( VAR_1 = mbedtls_pk_verify( &VAR_0->session_negotiate->peer_cert->pk,\n                               VAR_41, VAR_40, VAR_39, VAR_3, VAR_38 ) ) != 0 )\n        {\n            mbedtls_ssl_send_alert_message( VAR_0, VAR_11,\n                                            VAR_56 );\n            MBEDTLS_SSL_DEBUG_RET( 1, \"mbedtls_pk_verify\", VAR_1 );\n            return( VAR_1 );\n        }\n    }\n#endif /* COMMENT_38 */\n\nexit:\n    VAR_0->state++;\n\n    MBEDTLS_SSL_DEBUG_MSG( 2, ( \"<= parse server key exchange\" ) );\n\n    return( 0 );\n}",
  "func_graph_path": "Mbed-TLS/mbedtls/a1098f81c252b317ad34ea978aea2bc47760b215/ssl_cli.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -215,6 +215,14 @@\n         /*\n          * Read signature\n          */\n+\n+        if( p > end - 2 )\n+        {\n+            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad server key exchange message\" ) );\n+            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n+                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );\n+            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );\n+        }\n         sig_len = ( p[0] << 8 ) | p[1];\n         p += 2;\n ",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "",
      "        if( p > end - 2 )",
      "        {",
      "            MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad server key exchange message\" ) );",
      "            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,",
      "                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );",
      "            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );",
      "        }"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/Mbed-TLS/mbedtls/pull/1439",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/Mbed-TLS/mbedtls/pull/1439: 403 Client Error: Forbidden for url: https://api.github.com/repos/Mbed-TLS/mbedtls/pulls/1439",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "The patch is a security fix addressing a buffer overflow vulnerability by adding a bounds check. The confidence is high as the commit and code changes are aligned with the vulnerability description.\n\n**Final Classification:** Security Vulnerability Fix; **Confidence:** 1.0"
}