{
  "cve_id": "CVE-2021-32700",
  "cwe_ids": [
    "CWE-306"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:P/I:P/A:N",
  "cvss_is_v3": false,
  "repo_name": "ballerina-platform/ballerina-lang",
  "commit_msg": "Fix central connection",
  "commit_hash": "4609ffee1744ecd16aac09303b1783bf0a525816",
  "git_url": "https://github.com/ballerina-platform/ballerina-lang/commit/4609ffee1744ecd16aac09303b1783bf0a525816",
  "file_path": "cli/ballerina-cli-module/src/main/java/org/ballerinalang/cli/module/Search.java",
  "func_name": "handleResponse",
  "func_before": "private static void handleResponse(HttpURLConnection conn, int statusCode, String terminalWidth) {\n        try {\n            // 200 - modules found\n            // Other - Error occurred, json returned with the error message\n            MapValue payload;\n            if (statusCode == HttpURLConnection.HTTP_OK) {\n                try (BufferedReader reader = new BufferedReader(\n                        new InputStreamReader(conn.getInputStream(), Charset.defaultCharset()))) {\n                    StringBuilder result = new StringBuilder();\n                    String line;\n                    while ((line = reader.readLine()) != null) {\n                        result.append(line);\n                    }\n                    payload = (MapValue) JSONParser.parse(result.toString());\n                } catch (IOException e) {\n                    throw ErrorUtil.createCommandException(e.getMessage());\n                }\n\n                if (payload.getIntValue(\"count\") > 0) {\n                    ArrayValue modules = payload.getArrayValue(\"modules\");\n                    printModules(modules, terminalWidth);\n                } else {\n                    outStream.println(\"no modules found\");\n                }\n            } else {\n                StringBuilder result = new StringBuilder();\n                try (BufferedReader reader = new BufferedReader(\n                        new InputStreamReader(conn.getErrorStream(), Charset.defaultCharset()))) {\n                    String line;\n                    while ((line = reader.readLine()) != null) {\n                        result.append(line);\n                    }\n                } catch (IOException e) {\n                    throw ErrorUtil.createCommandException(e.getMessage());\n                }\n\n                payload = (MapValue) JSONParser.parse(result.toString());\n                throw ErrorUtil.createCommandException(payload.getStringValue(\"message\"));\n            }\n        } finally {\n            conn.disconnect();\n        }\n    }",
  "abstract_func_before": "private static void handleResponse(HttpURLConnection VAR_0, int VAR_1, String VAR_2) {\n        try {\n            /* COMMENT_0 */\n            /* COMMENT_1 */\n            MapValue VAR_3;\n            if (VAR_1 == VAR_4.HTTP_OK) {\n                try (BufferedReader VAR_5 = new BufferedReader(\n                        new InputStreamReader(VAR_0.getInputStream(), VAR_6.defaultCharset()))) {\n                    StringBuilder VAR_7 = new StringBuilder();\n                    String VAR_8;\n                    while ((VAR_8 = VAR_5.readLine()) != null) {\n                        VAR_7.append(VAR_8);\n                    }\n                    VAR_3 = (MapValue) VAR_9.parse(VAR_7.toString());\n                } catch (IOException VAR_10) {\n                    throw VAR_11.createCommandException(VAR_10.getMessage());\n                }\n\n                if (VAR_3.getIntValue(\"count\") > 0) {\n                    ArrayValue VAR_12 = VAR_3.getArrayValue(\"modules\");\n                    printModules(VAR_12, VAR_2);\n                } else {\n                    VAR_13.println(\"no modules found\");\n                }\n            } else {\n                StringBuilder VAR_7 = new StringBuilder();\n                try (BufferedReader VAR_5 = new BufferedReader(\n                        new InputStreamReader(VAR_0.getErrorStream(), VAR_6.defaultCharset()))) {\n                    String VAR_8;\n                    while ((VAR_8 = VAR_5.readLine()) != null) {\n                        VAR_7.append(VAR_8);\n                    }\n                } catch (IOException VAR_10) {\n                    throw VAR_11.createCommandException(VAR_10.getMessage());\n                }\n\n                VAR_3 = (MapValue) VAR_9.parse(VAR_7.toString());\n                throw VAR_11.createCommandException(VAR_3.getStringValue(\"message\"));\n            }\n        } finally {\n            VAR_0.disconnect();\n        }\n    }",
  "func_graph_path_before": "ballerina-platform/ballerina-lang/4609ffee1744ecd16aac09303b1783bf0a525816/Search.java/vul/before/1.json",
  "func": "private static void handleResponse(HttpsURLConnection conn, int statusCode, String terminalWidth) {\n        try {\n            // 200 - modules found\n            // Other - Error occurred, json returned with the error message\n            MapValue payload;\n            if (statusCode == HttpsURLConnection.HTTP_OK) {\n                try (BufferedReader reader = new BufferedReader(\n                        new InputStreamReader(conn.getInputStream(), Charset.defaultCharset()))) {\n                    StringBuilder result = new StringBuilder();\n                    String line;\n                    while ((line = reader.readLine()) != null) {\n                        result.append(line);\n                    }\n                    payload = (MapValue) JSONParser.parse(result.toString());\n                } catch (IOException e) {\n                    throw ErrorUtil.createCommandException(e.getMessage());\n                }\n\n                if (payload.getIntValue(\"count\") > 0) {\n                    ArrayValue modules = payload.getArrayValue(\"modules\");\n                    printModules(modules, terminalWidth);\n                } else {\n                    outStream.println(\"no modules found\");\n                }\n            } else {\n                StringBuilder result = new StringBuilder();\n                try (BufferedReader reader = new BufferedReader(\n                        new InputStreamReader(conn.getErrorStream(), Charset.defaultCharset()))) {\n                    String line;\n                    while ((line = reader.readLine()) != null) {\n                        result.append(line);\n                    }\n                } catch (IOException e) {\n                    throw ErrorUtil.createCommandException(e.getMessage());\n                }\n\n                payload = (MapValue) JSONParser.parse(result.toString());\n                throw ErrorUtil.createCommandException(payload.getStringValue(\"message\"));\n            }\n        } finally {\n            conn.disconnect();\n        }\n    }",
  "abstract_func": "private static void handleResponse(HttpsURLConnection VAR_0, int VAR_1, String VAR_2) {\n        try {\n            /* COMMENT_0 */\n            /* COMMENT_1 */\n            MapValue VAR_3;\n            if (VAR_1 == VAR_4.HTTP_OK) {\n                try (BufferedReader VAR_5 = new BufferedReader(\n                        new InputStreamReader(VAR_0.getInputStream(), VAR_6.defaultCharset()))) {\n                    StringBuilder VAR_7 = new StringBuilder();\n                    String VAR_8;\n                    while ((VAR_8 = VAR_5.readLine()) != null) {\n                        VAR_7.append(VAR_8);\n                    }\n                    VAR_3 = (MapValue) VAR_9.parse(VAR_7.toString());\n                } catch (IOException VAR_10) {\n                    throw VAR_11.createCommandException(VAR_10.getMessage());\n                }\n\n                if (VAR_3.getIntValue(\"count\") > 0) {\n                    ArrayValue VAR_12 = VAR_3.getArrayValue(\"modules\");\n                    printModules(VAR_12, VAR_2);\n                } else {\n                    VAR_13.println(\"no modules found\");\n                }\n            } else {\n                StringBuilder VAR_7 = new StringBuilder();\n                try (BufferedReader VAR_5 = new BufferedReader(\n                        new InputStreamReader(VAR_0.getErrorStream(), VAR_6.defaultCharset()))) {\n                    String VAR_8;\n                    while ((VAR_8 = VAR_5.readLine()) != null) {\n                        VAR_7.append(VAR_8);\n                    }\n                } catch (IOException VAR_10) {\n                    throw VAR_11.createCommandException(VAR_10.getMessage());\n                }\n\n                VAR_3 = (MapValue) VAR_9.parse(VAR_7.toString());\n                throw VAR_11.createCommandException(VAR_3.getStringValue(\"message\"));\n            }\n        } finally {\n            VAR_0.disconnect();\n        }\n    }",
  "func_graph_path": "ballerina-platform/ballerina-lang/4609ffee1744ecd16aac09303b1783bf0a525816/Search.java/vul/after/1.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,9 +1,9 @@\n-private static void handleResponse(HttpURLConnection conn, int statusCode, String terminalWidth) {\n+private static void handleResponse(HttpsURLConnection conn, int statusCode, String terminalWidth) {\n         try {\n             // 200 - modules found\n             // Other - Error occurred, json returned with the error message\n             MapValue payload;\n-            if (statusCode == HttpURLConnection.HTTP_OK) {\n+            if (statusCode == HttpsURLConnection.HTTP_OK) {\n                 try (BufferedReader reader = new BufferedReader(\n                         new InputStreamReader(conn.getInputStream(), Charset.defaultCharset()))) {\n                     StringBuilder result = new StringBuilder();",
  "diff_line_info": {
    "deleted_lines": [
      "private static void handleResponse(HttpURLConnection conn, int statusCode, String terminalWidth) {",
      "            if (statusCode == HttpURLConnection.HTTP_OK) {"
    ],
    "added_lines": [
      "private static void handleResponse(HttpsURLConnection conn, int statusCode, String terminalWidth) {",
      "            if (statusCode == HttpsURLConnection.HTTP_OK) {"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/29246",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/ballerina-platform/ballerina-lang/pull/29246: 403 Client Error: Forbidden for url: https://api.github.com/repos/ballerina-platform/ballerina-lang/pulls/29246",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.7,
  "Bug Filter Response": "The patch modifies the connection handling to use HTTPS instead of HTTP, which improves security by using encrypted communication. However, the commit message doesn't explicitly state this, making the classification less certain.\n\n**Final Classification:** Security Vulnerability Fix; **Confidence:** 0.7"
}