{
  "cve_id": "CVE-2018-19607",
  "cwe_ids": [
    "CWE-476"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "Exiv2/exiv2",
  "commit_msg": "Fix #561. Use proper counter for the idx variable",
  "commit_hash": "923e6d3673beeec6a51e68d6340305a1ff5a39ba",
  "git_url": "https://github.com/Exiv2/exiv2/commit/923e6d3673beeec6a51e68d6340305a1ff5a39ba",
  "file_path": "src/easyaccess.cpp",
  "func_name": "isoSpeed",
  "func_before": "ExifData::const_iterator isoSpeed(const ExifData& ed)\n    {\n        static const char* keys[] = {\n            \"Exif.Photo.ISOSpeedRatings\",\n            \"Exif.Image.ISOSpeedRatings\",\n            \"Exif.CanonSi.ISOSpeed\",\n            \"Exif.CanonCs.ISOSpeed\",\n            \"Exif.Nikon1.ISOSpeed\",\n            \"Exif.Nikon2.ISOSpeed\",\n            \"Exif.Nikon3.ISOSpeed\",\n            \"Exif.NikonIi.ISO\",\n            \"Exif.NikonIi.ISO2\",\n            \"Exif.MinoltaCsNew.ISOSetting\",\n            \"Exif.MinoltaCsOld.ISOSetting\",\n            \"Exif.MinoltaCs5D.ISOSpeed\",\n            \"Exif.MinoltaCs7D.ISOSpeed\",\n            \"Exif.Sony1Cs.ISOSetting\",\n            \"Exif.Sony2Cs.ISOSetting\",\n            \"Exif.Sony1Cs2.ISOSetting\",\n            \"Exif.Sony2Cs2.ISOSetting\",\n            \"Exif.Sony1MltCsA100.ISOSetting\",\n            \"Exif.Pentax.ISO\",\n            \"Exif.PentaxDng.ISO\",\n            \"Exif.Olympus.ISOSpeed\",\n            \"Exif.Samsung2.ISO\",\n            \"Exif.Casio.ISO\",\n            \"Exif.Casio2.ISO\",\n            \"Exif.Casio2.ISOSpeed\"\n        };\n\n        struct SensKeyNameList {\n            int count;\n            const char* keys[3];\n        };\n\n        // covers Exif.Phot.SensitivityType values 1-7. Note that SOS, REI and\n        // ISO do differ in their meaning. Values coming first in a list (and\n        // existing as a tag) are picked up first and used as the \"ISO\" value.\n        static const SensKeyNameList sensitivityKey[] = {\n            { 1, { \"Exif.Photo.StandardOutputSensitivity\" }},\n            { 1, { \"Exif.Photo.RecommendedExposureIndex\" }},\n            { 1, { \"Exif.Photo.ISOSpeed\" }},\n            { 2, { \"Exif.Photo.RecommendedExposureIndex\", \"Exif.Photo.StandardOutputSensitivity\" }},\n            { 2, { \"Exif.Photo.ISOSpeed\", \"Exif.Photo.StandardOutputSensitivity\" }},\n            { 2, { \"Exif.Photo.ISOSpeed\", \"Exif.Photo.RecommendedExposureIndex\" }},\n            { 3, { \"Exif.Photo.ISOSpeed\", \"Exif.Photo.RecommendedExposureIndex\", \"Exif.Photo.StandardOutputSensitivity\" }}\n        };\n\n        static const char* sensitivityType[] = {\n            \"Exif.Photo.SensitivityType\"\n        };\n\n        // Find the first ISO value which is not \"0\"\n        const int cnt = EXV_COUNTOF(keys);\n        ExifData::const_iterator md = ed.end();\n        long iso_val = -1;\n        for (int idx = 0; idx < cnt; ) {\n            md = findMetadatum(ed, keys + idx, cnt - idx);\n            if (md == ed.end()) break;\n            std::ostringstream os;\n            md->write(os, &ed);\n            bool ok = false;\n            iso_val = parseLong(os.str(), ok);\n            if (ok && iso_val > 0) break;\n            while (strcmp(keys[idx++], md->key().c_str()) != 0 && idx < cnt) {}\n            md = ed.end();\n        }\n\n        // there is either a possible ISO \"overflow\" or no legacy\n        // ISO tag at all. Check for SensitivityType tag and the referenced\n        // ISO value (see EXIF 2.3 Annex G)\n        long iso_tmp_val = -1;\n        while (iso_tmp_val == -1 && (iso_val == 65535 || md == ed.end())) {\n            ExifData::const_iterator md_st = findMetadatum(ed, sensitivityType, 1);\n            // no SensitivityType? exit with existing data\n            if (md_st == ed.end())\n                break;\n            // otherwise pick up actual value and grab value accordingly\n            std::ostringstream os;\n            md_st->write(os, &ed);\n            bool ok = false;\n            long st_val = parseLong(os.str(), ok);\n            // SensivityType out of range or cannot be parsed properly\n            if (!ok || st_val < 1 || st_val > 7)\n                break;\n            // pick up list of ISO tags, and check for at least one of\n            // them available.\n            const SensKeyNameList *sensKeys = &sensitivityKey[st_val - 1];\n            md_st = ed.end();\n            for (int idx = 0; idx < sensKeys->count; md_st = ed.end()) {\n                md_st = findMetadatum(ed, const_cast<const char**>(sensKeys->keys), sensKeys->count);\n                if (md_st == ed.end())\n                    break;\n                std::ostringstream os_iso;\n                md_st->write(os_iso, &ed);\n                ok = false;\n                iso_tmp_val = parseLong(os_iso.str(), ok);\n                // something wrong with the value\n                if (ok || iso_tmp_val > 0) {\n                    md = md_st;\n                    break;\n                }\n                while (strcmp(sensKeys->keys[idx++], md_st->key().c_str()) != 0 && idx < cnt) {}\n            }\n            break;\n        }\n\n        return md;\n    }",
  "abstract_func_before": "ExifData::const_iterator isoSpeed(const ExifData& VAR_0)\n    {\n        static const char* VAR_1[] = {\n            \"Exif.Photo.ISOSpeedRatings\",\n            \"Exif.Image.ISOSpeedRatings\",\n            \"Exif.CanonSi.ISOSpeed\",\n            \"Exif.CanonCs.ISOSpeed\",\n            \"Exif.Nikon1.ISOSpeed\",\n            \"Exif.Nikon2.ISOSpeed\",\n            \"Exif.Nikon3.ISOSpeed\",\n            \"Exif.NikonIi.ISO\",\n            \"Exif.NikonIi.ISO2\",\n            \"Exif.MinoltaCsNew.ISOSetting\",\n            \"Exif.MinoltaCsOld.ISOSetting\",\n            \"Exif.MinoltaCs5D.ISOSpeed\",\n            \"Exif.MinoltaCs7D.ISOSpeed\",\n            \"Exif.Sony1Cs.ISOSetting\",\n            \"Exif.Sony2Cs.ISOSetting\",\n            \"Exif.Sony1Cs2.ISOSetting\",\n            \"Exif.Sony2Cs2.ISOSetting\",\n            \"Exif.Sony1MltCsA100.ISOSetting\",\n            \"Exif.Pentax.ISO\",\n            \"Exif.PentaxDng.ISO\",\n            \"Exif.Olympus.ISOSpeed\",\n            \"Exif.Samsung2.ISO\",\n            \"Exif.Casio.ISO\",\n            \"Exif.Casio2.ISO\",\n            \"Exif.Casio2.ISOSpeed\"\n        };\n\n        struct SensKeyNameList {\n            int count;\n            const char* keys[3];\n        };\n\n        /* COMMENT_0 */\n        /* COMMENT_1 */\n        /* COMMENT_2 */\n        static const SensKeyNameList VAR_2[] = {\n            { 1, { \"Exif.Photo.StandardOutputSensitivity\" }},\n            { 1, { \"Exif.Photo.RecommendedExposureIndex\" }},\n            { 1, { \"Exif.Photo.ISOSpeed\" }},\n            { 2, { \"Exif.Photo.RecommendedExposureIndex\", \"Exif.Photo.StandardOutputSensitivity\" }},\n            { 2, { \"Exif.Photo.ISOSpeed\", \"Exif.Photo.StandardOutputSensitivity\" }},\n            { 2, { \"Exif.Photo.ISOSpeed\", \"Exif.Photo.RecommendedExposureIndex\" }},\n            { 3, { \"Exif.Photo.ISOSpeed\", \"Exif.Photo.RecommendedExposureIndex\", \"Exif.Photo.StandardOutputSensitivity\" }}\n        };\n\n        static const char* VAR_3[] = {\n            \"Exif.Photo.SensitivityType\"\n        };\n\n        /* COMMENT_3 */\n        const int VAR_4 = EXV_COUNTOF(VAR_1);\n        ExifData::const_iterator VAR_5 = VAR_0.end();\n        long VAR_6 = -1;\n        for (int VAR_7 = 0; VAR_7 < VAR_4; ) {\n            VAR_5 = findMetadatum(VAR_0, VAR_1 + VAR_7, VAR_4 - VAR_7);\n            if (VAR_5 == VAR_0.end()) break;\n            std::ostringstream VAR_8;\n            VAR_5->write(VAR_8, &VAR_0);\n            bool VAR_9 = false;\n            VAR_6 = parseLong(VAR_8.str(), VAR_9);\n            if (VAR_9 && VAR_6 > 0) break;\n            while (strcmp(VAR_1[VAR_7++], VAR_5->key().c_str()) != 0 && VAR_7 < VAR_4) {}\n            VAR_5 = VAR_0.end();\n        }\n\n        /* COMMENT_4 */\n        /* COMMENT_5 */\n        /* COMMENT_6 */\n        long VAR_10 = -1;\n        while (VAR_10 == -1 && (VAR_6 == 65535 || VAR_5 == VAR_0.end())) {\n            ExifData::const_iterator VAR_11 = findMetadatum(VAR_0, VAR_3, 1);\n            /* COMMENT_7 */\n            if (VAR_11 == VAR_0.end())\n                break;\n            /* COMMENT_8 */\n            std::ostringstream VAR_8;\n            VAR_11->write(VAR_8, &VAR_0);\n            bool VAR_9 = false;\n            long VAR_12 = parseLong(VAR_8.str(), VAR_9);\n            /* COMMENT_9 */\n            if (!VAR_9 || VAR_12 < 1 || VAR_12 > 7)\n                break;\n            /* COMMENT_10 */\n            /* COMMENT_11 */\n            const SensKeyNameList *VAR_13 = &VAR_2[VAR_12 - 1];\n            VAR_11 = VAR_0.end();\n            for (int VAR_7 = 0; VAR_7 < VAR_13->count; VAR_11 = VAR_0.end()) {\n                VAR_11 = findMetadatum(VAR_0, VAR_14<const char**>(VAR_13->keys), VAR_13->count);\n                if (VAR_11 == VAR_0.end())\n                    break;\n                std::ostringstream VAR_15;\n                VAR_11->write(VAR_15, &VAR_0);\n                VAR_9 = false;\n                VAR_10 = parseLong(VAR_15.str(), VAR_9);\n                /* COMMENT_12 */\n                if (VAR_9 || VAR_10 > 0) {\n                    VAR_5 = VAR_11;\n                    break;\n                }\n                while (strcmp(VAR_13->keys[VAR_7++], VAR_11->key().c_str()) != 0 && VAR_7 < VAR_4) {}\n            }\n            break;\n        }\n\n        return VAR_5;\n    }",
  "func_graph_path_before": "Exiv2/exiv2/923e6d3673beeec6a51e68d6340305a1ff5a39ba/easyaccess.cpp/vul/before/0.json",
  "func": "ExifData::const_iterator isoSpeed(const ExifData& ed)\n    {\n        static const char* keys[] = {\n            \"Exif.Photo.ISOSpeedRatings\",\n            \"Exif.Image.ISOSpeedRatings\",\n            \"Exif.CanonSi.ISOSpeed\",\n            \"Exif.CanonCs.ISOSpeed\",\n            \"Exif.Nikon1.ISOSpeed\",\n            \"Exif.Nikon2.ISOSpeed\",\n            \"Exif.Nikon3.ISOSpeed\",\n            \"Exif.NikonIi.ISO\",\n            \"Exif.NikonIi.ISO2\",\n            \"Exif.MinoltaCsNew.ISOSetting\",\n            \"Exif.MinoltaCsOld.ISOSetting\",\n            \"Exif.MinoltaCs5D.ISOSpeed\",\n            \"Exif.MinoltaCs7D.ISOSpeed\",\n            \"Exif.Sony1Cs.ISOSetting\",\n            \"Exif.Sony2Cs.ISOSetting\",\n            \"Exif.Sony1Cs2.ISOSetting\",\n            \"Exif.Sony2Cs2.ISOSetting\",\n            \"Exif.Sony1MltCsA100.ISOSetting\",\n            \"Exif.Pentax.ISO\",\n            \"Exif.PentaxDng.ISO\",\n            \"Exif.Olympus.ISOSpeed\",\n            \"Exif.Samsung2.ISO\",\n            \"Exif.Casio.ISO\",\n            \"Exif.Casio2.ISO\",\n            \"Exif.Casio2.ISOSpeed\"\n        };\n\n        struct SensKeyNameList {\n            int count;\n            const char* keys[3];\n        };\n\n        // covers Exif.Phot.SensitivityType values 1-7. Note that SOS, REI and\n        // ISO do differ in their meaning. Values coming first in a list (and\n        // existing as a tag) are picked up first and used as the \"ISO\" value.\n        static const SensKeyNameList sensitivityKey[] = {\n            { 1, { \"Exif.Photo.StandardOutputSensitivity\" }},\n            { 1, { \"Exif.Photo.RecommendedExposureIndex\" }},\n            { 1, { \"Exif.Photo.ISOSpeed\" }},\n            { 2, { \"Exif.Photo.RecommendedExposureIndex\", \"Exif.Photo.StandardOutputSensitivity\" }},\n            { 2, { \"Exif.Photo.ISOSpeed\", \"Exif.Photo.StandardOutputSensitivity\" }},\n            { 2, { \"Exif.Photo.ISOSpeed\", \"Exif.Photo.RecommendedExposureIndex\" }},\n            { 3, { \"Exif.Photo.ISOSpeed\", \"Exif.Photo.RecommendedExposureIndex\", \"Exif.Photo.StandardOutputSensitivity\" }}\n        };\n\n        static const char* sensitivityType[] = {\n            \"Exif.Photo.SensitivityType\"\n        };\n\n        // Find the first ISO value which is not \"0\"\n        const int cnt = EXV_COUNTOF(keys);\n        ExifData::const_iterator md = ed.end();\n        long iso_val = -1;\n        for (int idx = 0; idx < cnt; ) {\n            md = findMetadatum(ed, keys + idx, cnt - idx);\n            if (md == ed.end()) break;\n            std::ostringstream os;\n            md->write(os, &ed);\n            bool ok = false;\n            iso_val = parseLong(os.str(), ok);\n            if (ok && iso_val > 0) break;\n            while (strcmp(keys[idx++], md->key().c_str()) != 0 && idx < cnt) {}\n            md = ed.end();\n        }\n\n        // there is either a possible ISO \"overflow\" or no legacy\n        // ISO tag at all. Check for SensitivityType tag and the referenced\n        // ISO value (see EXIF 2.3 Annex G)\n        long iso_tmp_val = -1;\n        while (iso_tmp_val == -1 && (iso_val == 65535 || md == ed.end())) {\n            ExifData::const_iterator md_st = findMetadatum(ed, sensitivityType, 1);\n            // no SensitivityType? exit with existing data\n            if (md_st == ed.end())\n                break;\n            // otherwise pick up actual value and grab value accordingly\n            std::ostringstream os;\n            md_st->write(os, &ed);\n            bool ok = false;\n            const long st_val = parseLong(os.str(), ok);\n            // SensivityType out of range or cannot be parsed properly\n            if (!ok || st_val < 1 || st_val > 7)\n                break;\n            // pick up list of ISO tags, and check for at least one of\n            // them available.\n            const SensKeyNameList *sensKeys = &sensitivityKey[st_val - 1];\n            md_st = ed.end();\n            for (int idx = 0; idx < sensKeys->count; md_st = ed.end()) {\n                md_st = findMetadatum(ed, const_cast<const char**>(sensKeys->keys), sensKeys->count);\n                if (md_st == ed.end())\n                    break;\n                std::ostringstream os_iso;\n                md_st->write(os_iso, &ed);\n                ok = false;\n                iso_tmp_val = parseLong(os_iso.str(), ok);\n                // something wrong with the value\n                if (ok || iso_tmp_val > 0) {\n                    md = md_st;\n                    break;\n                }\n                while (strcmp(sensKeys->keys[idx++], md_st->key().c_str()) != 0 && idx < sensKeys->count) {}\n            }\n            break;\n        }\n\n        return md;\n    }",
  "abstract_func": "ExifData::const_iterator isoSpeed(const ExifData& VAR_0)\n    {\n        static const char* VAR_1[] = {\n            \"Exif.Photo.ISOSpeedRatings\",\n            \"Exif.Image.ISOSpeedRatings\",\n            \"Exif.CanonSi.ISOSpeed\",\n            \"Exif.CanonCs.ISOSpeed\",\n            \"Exif.Nikon1.ISOSpeed\",\n            \"Exif.Nikon2.ISOSpeed\",\n            \"Exif.Nikon3.ISOSpeed\",\n            \"Exif.NikonIi.ISO\",\n            \"Exif.NikonIi.ISO2\",\n            \"Exif.MinoltaCsNew.ISOSetting\",\n            \"Exif.MinoltaCsOld.ISOSetting\",\n            \"Exif.MinoltaCs5D.ISOSpeed\",\n            \"Exif.MinoltaCs7D.ISOSpeed\",\n            \"Exif.Sony1Cs.ISOSetting\",\n            \"Exif.Sony2Cs.ISOSetting\",\n            \"Exif.Sony1Cs2.ISOSetting\",\n            \"Exif.Sony2Cs2.ISOSetting\",\n            \"Exif.Sony1MltCsA100.ISOSetting\",\n            \"Exif.Pentax.ISO\",\n            \"Exif.PentaxDng.ISO\",\n            \"Exif.Olympus.ISOSpeed\",\n            \"Exif.Samsung2.ISO\",\n            \"Exif.Casio.ISO\",\n            \"Exif.Casio2.ISO\",\n            \"Exif.Casio2.ISOSpeed\"\n        };\n\n        struct SensKeyNameList {\n            int count;\n            const char* keys[3];\n        };\n\n        /* COMMENT_0 */\n        /* COMMENT_1 */\n        /* COMMENT_2 */\n        static const SensKeyNameList VAR_2[] = {\n            { 1, { \"Exif.Photo.StandardOutputSensitivity\" }},\n            { 1, { \"Exif.Photo.RecommendedExposureIndex\" }},\n            { 1, { \"Exif.Photo.ISOSpeed\" }},\n            { 2, { \"Exif.Photo.RecommendedExposureIndex\", \"Exif.Photo.StandardOutputSensitivity\" }},\n            { 2, { \"Exif.Photo.ISOSpeed\", \"Exif.Photo.StandardOutputSensitivity\" }},\n            { 2, { \"Exif.Photo.ISOSpeed\", \"Exif.Photo.RecommendedExposureIndex\" }},\n            { 3, { \"Exif.Photo.ISOSpeed\", \"Exif.Photo.RecommendedExposureIndex\", \"Exif.Photo.StandardOutputSensitivity\" }}\n        };\n\n        static const char* VAR_3[] = {\n            \"Exif.Photo.SensitivityType\"\n        };\n\n        /* COMMENT_3 */\n        const int VAR_4 = EXV_COUNTOF(VAR_1);\n        ExifData::const_iterator VAR_5 = VAR_0.end();\n        long VAR_6 = -1;\n        for (int VAR_7 = 0; VAR_7 < VAR_4; ) {\n            VAR_5 = findMetadatum(VAR_0, VAR_1 + VAR_7, VAR_4 - VAR_7);\n            if (VAR_5 == VAR_0.end()) break;\n            std::ostringstream VAR_8;\n            VAR_5->write(VAR_8, &VAR_0);\n            bool VAR_9 = false;\n            VAR_6 = parseLong(VAR_8.str(), VAR_9);\n            if (VAR_9 && VAR_6 > 0) break;\n            while (strcmp(VAR_1[VAR_7++], VAR_5->key().c_str()) != 0 && VAR_7 < VAR_4) {}\n            VAR_5 = VAR_0.end();\n        }\n\n        /* COMMENT_4 */\n        /* COMMENT_5 */\n        /* COMMENT_6 */\n        long VAR_10 = -1;\n        while (VAR_10 == -1 && (VAR_6 == 65535 || VAR_5 == VAR_0.end())) {\n            ExifData::const_iterator VAR_11 = findMetadatum(VAR_0, VAR_3, 1);\n            /* COMMENT_7 */\n            if (VAR_11 == VAR_0.end())\n                break;\n            /* COMMENT_8 */\n            std::ostringstream VAR_8;\n            VAR_11->write(VAR_8, &VAR_0);\n            bool VAR_9 = false;\n            const long VAR_12 = parseLong(VAR_8.str(), VAR_9);\n            /* COMMENT_9 */\n            if (!VAR_9 || VAR_12 < 1 || VAR_12 > 7)\n                break;\n            /* COMMENT_10 */\n            /* COMMENT_11 */\n            const SensKeyNameList *VAR_13 = &VAR_2[VAR_12 - 1];\n            VAR_11 = VAR_0.end();\n            for (int VAR_7 = 0; VAR_7 < VAR_13->count; VAR_11 = VAR_0.end()) {\n                VAR_11 = findMetadatum(VAR_0, VAR_14<const char**>(VAR_13->keys), VAR_13->count);\n                if (VAR_11 == VAR_0.end())\n                    break;\n                std::ostringstream VAR_15;\n                VAR_11->write(VAR_15, &VAR_0);\n                VAR_9 = false;\n                VAR_10 = parseLong(VAR_15.str(), VAR_9);\n                /* COMMENT_12 */\n                if (VAR_9 || VAR_10 > 0) {\n                    VAR_5 = VAR_11;\n                    break;\n                }\n                while (strcmp(VAR_13->keys[VAR_7++], VAR_11->key().c_str()) != 0 && VAR_7 < VAR_13->count) {}\n            }\n            break;\n        }\n\n        return VAR_5;\n    }",
  "func_graph_path": "Exiv2/exiv2/923e6d3673beeec6a51e68d6340305a1ff5a39ba/easyaccess.cpp/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -79,7 +79,7 @@\n             std::ostringstream os;\n             md_st->write(os, &ed);\n             bool ok = false;\n-            long st_val = parseLong(os.str(), ok);\n+            const long st_val = parseLong(os.str(), ok);\n             // SensivityType out of range or cannot be parsed properly\n             if (!ok || st_val < 1 || st_val > 7)\n                 break;\n@@ -100,7 +100,7 @@\n                     md = md_st;\n                     break;\n                 }\n-                while (strcmp(sensKeys->keys[idx++], md_st->key().c_str()) != 0 && idx < cnt) {}\n+                while (strcmp(sensKeys->keys[idx++], md_st->key().c_str()) != 0 && idx < sensKeys->count) {}\n             }\n             break;\n         }",
  "diff_line_info": {
    "deleted_lines": [
      "            long st_val = parseLong(os.str(), ok);",
      "                while (strcmp(sensKeys->keys[idx++], md_st->key().c_str()) != 0 && idx < cnt) {}"
    ],
    "added_lines": [
      "            const long st_val = parseLong(os.str(), ok);",
      "                while (strcmp(sensKeys->keys[idx++], md_st->key().c_str()) != 0 && idx < sensKeys->count) {}"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/Exiv2/exiv2/pull/564",
  "description": {
    "pr_info": {
      "title": "Fix in isoSpeed()",
      "number": 564
    },
    "comment": [
      "Fix #561.\r\n\r\nI am not very familiar with the code, but It seems that we were using the wrong counter for the **idx** variable in the `isoSpeed()` function. The counter variable **cnt** had a value of 25 while the number of keys is always a number between 1 and 3 (**sensKeys->count**).\r\n",
      "# [Codecov](https://codecov.io/gh/Exiv2/exiv2/pull/564?src=pr&el=h1) Report\n> Merging [#564](https://codecov.io/gh/Exiv2/exiv2/pull/564?src=pr&el=desc) into [master](https://codecov.io/gh/Exiv2/exiv2/commit/3f2e0de0db6e0cc2c027dcffd02c24f56331c6c2?src=pr&el=desc) will **increase** coverage by `<.01%`.\n> The diff coverage is `100%`.\n\n[![Impacted file tree graph](https://codecov.io/gh/Exiv2/exiv2/pull/564/graphs/tree.svg?width=650&token=O9G7Iswx26&height=150&src=pr)](https://codecov.io/gh/Exiv2/exiv2/pull/564?src=pr&el=tree)\n\n```diff\n@@            Coverage Diff             @@\n##           master     #564      +/-   ##\n==========================================\n+ Coverage   62.73%   62.74%   +<.01%     \n==========================================\n  Files         154      154              \n  Lines       20680    20680              \n==========================================\n+ Hits        12974    12976       +2     \n+ Misses       7706     7704       -2\n```\n\n\n| [Impacted Files](https://codecov.io/gh/Exiv2/exiv2/pull/564?src=pr&el=tree) | Coverage Δ | |\n|---|---|---|\n| [src/easyaccess.cpp](https://codecov.io/gh/Exiv2/exiv2/pull/564/diff?src=pr&el=tree#diff-c3JjL2Vhc3lhY2Nlc3MuY3Bw) | `97.59% <100%> (+1.2%)` | :arrow_up: |\n| [src/bigtiffimage.cpp](https://codecov.io/gh/Exiv2/exiv2/pull/564/diff?src=pr&el=tree#diff-c3JjL2JpZ3RpZmZpbWFnZS5jcHA=) | `62.03% <0%> (+0.53%)` | :arrow_up: |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/Exiv2/exiv2/pull/564?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/Exiv2/exiv2/pull/564?src=pr&el=footer). Last update [3f2e0de...923e6d3](https://codecov.io/gh/Exiv2/exiv2/pull/564?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n"
    ]
  },
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Defect Remediation & Feature Upgrades; **Confidence:** 0.9"
}