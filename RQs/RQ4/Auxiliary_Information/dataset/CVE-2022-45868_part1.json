{
  "cve_id": "CVE-2022-45868",
  "cwe_ids": [
    "CWE-312"
  ],
  "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
  "cvss_is_v3": true,
  "repo_name": "h2database",
  "commit_msg": "Disallow plain webAdminPassword values to force usage of hashes",
  "commit_hash": "23ee3d0b973923c135fa01356c8eaed40b895393",
  "git_url": "https://github.com/h2database/h2database/commit/23ee3d0b973923c135fa01356c8eaed40b895393",
  "file_path": "h2/src/main/org/h2/server/web/WebServer.java",
  "func_name": "setAdminPassword",
  "func_before": "void setAdminPassword(String password) {\n        if (password == null || password.isEmpty()) {\n            adminPassword = null;\n            return;\n        }\n        if (password.length() == 128) {\n            try {\n                adminPassword = StringUtils.convertHexToBytes(password);\n                return;\n            } catch (Exception ex) {}\n        }\n        byte[] salt = MathUtils.secureRandomBytes(32);\n        byte[] hash = SHA256.getHashWithSalt(password.getBytes(StandardCharsets.UTF_8), salt);\n        byte[] total = Arrays.copyOf(salt, 64);\n        System.arraycopy(hash, 0, total, 32, 32);\n        adminPassword = total;\n    }",
  "abstract_func_before": "void setAdminPassword(String VAR_0) {\n        if (VAR_0 == null || VAR_0.isEmpty()) {\n            VAR_1 = null;\n            return;\n        }\n        if (VAR_0.length() == 128) {\n            try {\n                VAR_1 = VAR_2.convertHexToBytes(VAR_0);\n                return;\n            } catch (Exception VAR_3) {}\n        }\n        byte[] VAR_4 = VAR_5.secureRandomBytes(32);\n        byte[] VAR_6 = VAR_7.getHashWithSalt(VAR_0.getBytes(VAR_8.UTF_8), VAR_4);\n        byte[] VAR_9 = VAR_10.copyOf(VAR_4, 64);\n        VAR_11.arraycopy(VAR_6, 0, VAR_9, 32, 32);\n        VAR_1 = VAR_9;\n    }",
  "func_graph_path_before": "h2database/23ee3d0b973923c135fa01356c8eaed40b895393/WebServer.java/vul/before/0.json",
  "func": "void setAdminPassword(String password) {\n        if (password == null || password.isEmpty()) {\n            adminPassword = null;\n            return;\n        }\n        if (password.length() != 128) {\n            throw new IllegalArgumentException(\n                    \"Use result of org.h2.server.web.WebServer.encodeAdminPassword(String)\");\n        }\n        adminPassword = StringUtils.convertHexToBytes(password);\n    }",
  "abstract_func": "void setAdminPassword(String VAR_0) {\n        if (VAR_0 == null || VAR_0.isEmpty()) {\n            VAR_1 = null;\n            return;\n        }\n        if (VAR_0.length() != 128) {\n            throw new IllegalArgumentException(\n                    \"Use result of org.h2.server.web.WebServer.encodeAdminPassword(String)\");\n        }\n        VAR_1 = VAR_2.convertHexToBytes(VAR_0);\n    }",
  "func_graph_path": "h2database/23ee3d0b973923c135fa01356c8eaed40b895393/WebServer.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -3,15 +3,9 @@\n             adminPassword = null;\n             return;\n         }\n-        if (password.length() == 128) {\n-            try {\n-                adminPassword = StringUtils.convertHexToBytes(password);\n-                return;\n-            } catch (Exception ex) {}\n+        if (password.length() != 128) {\n+            throw new IllegalArgumentException(\n+                    \"Use result of org.h2.server.web.WebServer.encodeAdminPassword(String)\");\n         }\n-        byte[] salt = MathUtils.secureRandomBytes(32);\n-        byte[] hash = SHA256.getHashWithSalt(password.getBytes(StandardCharsets.UTF_8), salt);\n-        byte[] total = Arrays.copyOf(salt, 64);\n-        System.arraycopy(hash, 0, total, 32, 32);\n-        adminPassword = total;\n+        adminPassword = StringUtils.convertHexToBytes(password);\n     }",
  "diff_line_info": {
    "deleted_lines": [
      "        if (password.length() == 128) {",
      "            try {",
      "                adminPassword = StringUtils.convertHexToBytes(password);",
      "                return;",
      "            } catch (Exception ex) {}",
      "        byte[] salt = MathUtils.secureRandomBytes(32);",
      "        byte[] hash = SHA256.getHashWithSalt(password.getBytes(StandardCharsets.UTF_8), salt);",
      "        byte[] total = Arrays.copyOf(salt, 64);",
      "        System.arraycopy(hash, 0, total, 32, 32);",
      "        adminPassword = total;"
    ],
    "added_lines": [
      "        if (password.length() != 128) {",
      "            throw new IllegalArgumentException(",
      "                    \"Use result of org.h2.server.web.WebServer.encodeAdminPassword(String)\");",
      "        adminPassword = StringUtils.convertHexToBytes(password);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/h2database/h2database/pull/3833",
  "description": {
    "pr_info": {
      "title": "Disallow plain webAdminPassword values to force usage of hashes",
      "number": 3833
    },
    "comment": [
      "`webAdminPassword` setting allowed both clear-text passwords and hashes of salted passwords from the beginning, but there were no documented methods for generation of such hashes. It was possible to write a clear-text password to configuration file and then save settings of H2 Console from H2 Console itself to get a configuration file with hashed password, but this way wasn't documented either.\r\n\r\n1. A new public method is added and documented for this purpose. This method requires at least 12 characters for more safety.\r\n2. Clear-text passwords from all sources are not accepted any more. Old installations with password hashes in configuration files will continue to work after this change.\r\n3. `runTool()` method still allows this parameter to be passed (now only with salted hash), but `main()` method rejects this parameter to make these strange people happy.\r\n\r\n(This setting is probably needed for less than 1% of users, why so many people think that it is something important?)\r\n\r\n@grandinj",
      "+1"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 1.0"
}