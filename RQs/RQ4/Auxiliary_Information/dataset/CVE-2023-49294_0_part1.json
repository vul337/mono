{
  "cve_id": "CVE-2023-49294",
  "cwe_ids": [
    "CWE-22"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
  "cvss_is_v3": true,
  "repo_name": "asterisk",
  "commit_msg": "manager.c: Prevent path traversal with GetConfig.\n\nWhen using AMI GetConfig, it was possible to access files outside of the\nAsterisk configuration directory by using filenames with \"..\" and \"./\"\neven while live_dangerously was not enabled. This change resolves the\nfull path and ensures we are still in the configuration directory before\nattempting to access the file.",
  "commit_hash": "424be345639d75c6cb7d0bd2da5f0f407dbd0bd5",
  "git_url": "https://github.com/asterisk/asterisk/commit/424be345639d75c6cb7d0bd2da5f0f407dbd0bd5",
  "file_path": "main/manager.c",
  "func_name": "restrictedFile",
  "func_before": "static int restrictedFile(const char *filename)\n{\n\tif (!live_dangerously && !strncasecmp(filename, \"/\", 1) &&\n\t\t strncasecmp(filename, ast_config_AST_CONFIG_DIR, strlen(ast_config_AST_CONFIG_DIR))) {\n\t\treturn 1;\n\t}\n\treturn 0;\n}",
  "abstract_func_before": "static int restrictedFile(const char *VAR_0)\n{\n\tif (!VAR_1 && !strncasecmp(VAR_0, \"/\", 1) &&\n\t\t strncasecmp(VAR_0, VAR_2, strlen(VAR_2))) {\n\t\treturn 1;\n\t}\n\treturn 0;\n}",
  "func_graph_path_before": "asterisk/424be345639d75c6cb7d0bd2da5f0f407dbd0bd5/manager.c/vul/before/1.json",
  "func": "static int restrictedFile(const char *filename)\n{\n\tchar *stripped_filename;\n\tRAII_VAR(char *, path, NULL, ast_free);\n\tRAII_VAR(char *, real_path, NULL, ast_free);\n\n\tif (live_dangerously) {\n\t\treturn 0;\n\t}\n\n\tstripped_filename = ast_strip(ast_strdupa(filename));\n\n\t/* If the file path starts with '/', don't prepend ast_config_AST_CONFIG_DIR */\n\tif (stripped_filename[0] == '/') {\n\t\treal_path = realpath(stripped_filename, NULL);\n\t} else {\n\t\tif (ast_asprintf(&path, \"%s/%s\", ast_config_AST_CONFIG_DIR, stripped_filename) == -1) {\n\t\t\treturn -1;\n\t\t}\n\t\treal_path = realpath(path, NULL);\n\t}\n\n\tif (!real_path) {\n\t\treturn -1;\n\t}\n\n\tif (!ast_begins_with(real_path, ast_config_AST_CONFIG_DIR)) {\n\t\treturn 1;\n\t}\n\n\treturn 0;\n}",
  "abstract_func": "static int restrictedFile(const char *VAR_0)\n{\n\tchar *VAR_1;\n\tVAR_2(char *, VAR_3, NULL, VAR_4);\n\tVAR_2(char *, VAR_5, NULL, VAR_4);\n\n\tif (VAR_6) {\n\t\treturn 0;\n\t}\n\n\tVAR_1 = ast_strip(ast_strdupa(VAR_0));\n\n\t/* COMMENT_0 */\n\tif (VAR_1[0] == '/') {\n\t\tVAR_5 = realpath(VAR_1, NULL);\n\t} else {\n\t\tif (ast_asprintf(&VAR_3, \"%s/%s\", VAR_7, VAR_1) == -1) {\n\t\t\treturn -1;\n\t\t}\n\t\tVAR_5 = realpath(VAR_3, NULL);\n\t}\n\n\tif (!VAR_5) {\n\t\treturn -1;\n\t}\n\n\tif (!ast_begins_with(VAR_5, VAR_7)) {\n\t\treturn 1;\n\t}\n\n\treturn 0;\n}",
  "func_graph_path": "asterisk/424be345639d75c6cb7d0bd2da5f0f407dbd0bd5/manager.c/vul/after/1.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,8 +1,32 @@\n static int restrictedFile(const char *filename)\n {\n-\tif (!live_dangerously && !strncasecmp(filename, \"/\", 1) &&\n-\t\t strncasecmp(filename, ast_config_AST_CONFIG_DIR, strlen(ast_config_AST_CONFIG_DIR))) {\n+\tchar *stripped_filename;\n+\tRAII_VAR(char *, path, NULL, ast_free);\n+\tRAII_VAR(char *, real_path, NULL, ast_free);\n+\n+\tif (live_dangerously) {\n+\t\treturn 0;\n+\t}\n+\n+\tstripped_filename = ast_strip(ast_strdupa(filename));\n+\n+\t/* If the file path starts with '/', don't prepend ast_config_AST_CONFIG_DIR */\n+\tif (stripped_filename[0] == '/') {\n+\t\treal_path = realpath(stripped_filename, NULL);\n+\t} else {\n+\t\tif (ast_asprintf(&path, \"%s/%s\", ast_config_AST_CONFIG_DIR, stripped_filename) == -1) {\n+\t\t\treturn -1;\n+\t\t}\n+\t\treal_path = realpath(path, NULL);\n+\t}\n+\n+\tif (!real_path) {\n+\t\treturn -1;\n+\t}\n+\n+\tif (!ast_begins_with(real_path, ast_config_AST_CONFIG_DIR)) {\n \t\treturn 1;\n \t}\n+\n \treturn 0;\n }",
  "diff_line_info": {
    "deleted_lines": [
      "\tif (!live_dangerously && !strncasecmp(filename, \"/\", 1) &&",
      "\t\t strncasecmp(filename, ast_config_AST_CONFIG_DIR, strlen(ast_config_AST_CONFIG_DIR))) {"
    ],
    "added_lines": [
      "\tchar *stripped_filename;",
      "\tRAII_VAR(char *, path, NULL, ast_free);",
      "\tRAII_VAR(char *, real_path, NULL, ast_free);",
      "",
      "\tif (live_dangerously) {",
      "\t\treturn 0;",
      "\t}",
      "",
      "\tstripped_filename = ast_strip(ast_strdupa(filename));",
      "",
      "\t/* If the file path starts with '/', don't prepend ast_config_AST_CONFIG_DIR */",
      "\tif (stripped_filename[0] == '/') {",
      "\t\treal_path = realpath(stripped_filename, NULL);",
      "\t} else {",
      "\t\tif (ast_asprintf(&path, \"%s/%s\", ast_config_AST_CONFIG_DIR, stripped_filename) == -1) {",
      "\t\t\treturn -1;",
      "\t\t}",
      "\t\treal_path = realpath(path, NULL);",
      "\t}",
      "",
      "\tif (!real_path) {",
      "\t\treturn -1;",
      "\t}",
      "",
      "\tif (!ast_begins_with(real_path, ast_config_AST_CONFIG_DIR)) {",
      ""
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/asterisk/asterisk/pull/494",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/asterisk/asterisk/pull/494: 403 Client Error: Forbidden for url: https://api.github.com/repos/asterisk/asterisk/pulls/494",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 1.0"
}