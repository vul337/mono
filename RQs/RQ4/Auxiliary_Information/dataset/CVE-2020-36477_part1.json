{
  "cve_id": "CVE-2020-36477",
  "cwe_ids": [
    "CWE-295"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:N/I:P/A:N",
  "cvss_is_v3": false,
  "repo_name": "Mbed-TLS/mbedtls",
  "commit_msg": "Fix comparison between different name types\n\nSigned-off-by: Manuel Pégourié-Gonnard <manuel.pegourie-gonnard@arm.com>",
  "commit_hash": "f3e4bd8632b71dc491e52e6df87dc3e409d2b869",
  "git_url": "https://github.com/Mbed-TLS/mbedtls/commit/f3e4bd8632b71dc491e52e6df87dc3e409d2b869",
  "file_path": "library/x509_crt.c",
  "func_name": "x509_crt_verify_name",
  "func_before": "static void x509_crt_verify_name( const mbedtls_x509_crt *crt,\n                                  const char *cn,\n                                  uint32_t *flags )\n{\n    const mbedtls_x509_name *name;\n    const mbedtls_x509_sequence *cur;\n    size_t cn_len = strlen( cn );\n\n    if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )\n    {\n        for( cur = &crt->subject_alt_names; cur != NULL; cur = cur->next )\n        {\n            if( x509_crt_check_cn( &cur->buf, cn, cn_len ) == 0 )\n                break;\n        }\n\n        if( cur == NULL )\n            *flags |= MBEDTLS_X509_BADCERT_CN_MISMATCH;\n    }\n    else\n    {\n        for( name = &crt->subject; name != NULL; name = name->next )\n        {\n            if( MBEDTLS_OID_CMP( MBEDTLS_OID_AT_CN, &name->oid ) == 0 &&\n                x509_crt_check_cn( &name->val, cn, cn_len ) == 0 )\n            {\n                break;\n            }\n        }\n\n        if( name == NULL )\n            *flags |= MBEDTLS_X509_BADCERT_CN_MISMATCH;\n    }\n}",
  "abstract_func_before": "static void x509_crt_verify_name( const mbedtls_x509_crt *VAR_0,\n                                  const char *VAR_1,\n                                  uint32_t *VAR_2 )\n{\n    const mbedtls_x509_name *VAR_3;\n    const mbedtls_x509_sequence *VAR_4;\n    size_t VAR_5 = strlen( VAR_1 );\n\n    if( VAR_0->ext_types & VAR_6 )\n    {\n        for( VAR_4 = &VAR_0->subject_alt_names; VAR_4 != NULL; VAR_4 = VAR_4->next )\n        {\n            if( x509_crt_check_cn( &VAR_4->buf, VAR_1, VAR_5 ) == 0 )\n                break;\n        }\n\n        if( VAR_4 == NULL )\n            *VAR_2 |= VAR_7;\n    }\n    else\n    {\n        for( VAR_3 = &VAR_0->subject; VAR_3 != NULL; VAR_3 = VAR_3->next )\n        {\n            if( MBEDTLS_OID_CMP( VAR_8, &VAR_3->oid ) == 0 &&\n                x509_crt_check_cn( &VAR_3->val, VAR_1, VAR_5 ) == 0 )\n            {\n                break;\n            }\n        }\n\n        if( VAR_3 == NULL )\n            *VAR_2 |= VAR_7;\n    }\n}",
  "func_graph_path_before": "Mbed-TLS/mbedtls/f3e4bd8632b71dc491e52e6df87dc3e409d2b869/x509_crt.c/vul/before/0.json",
  "func": "static void x509_crt_verify_name( const mbedtls_x509_crt *crt,\n                                  const char *cn,\n                                  uint32_t *flags )\n{\n    const mbedtls_x509_name *name;\n    const mbedtls_x509_sequence *cur;\n    size_t cn_len = strlen( cn );\n\n    if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )\n    {\n        for( cur = &crt->subject_alt_names; cur != NULL; cur = cur->next )\n        {\n            if( x509_crt_check_san( &cur->buf, cn, cn_len ) == 0 )\n                break;\n        }\n\n        if( cur == NULL )\n            *flags |= MBEDTLS_X509_BADCERT_CN_MISMATCH;\n    }\n    else\n    {\n        for( name = &crt->subject; name != NULL; name = name->next )\n        {\n            if( MBEDTLS_OID_CMP( MBEDTLS_OID_AT_CN, &name->oid ) == 0 &&\n                x509_crt_check_cn( &name->val, cn, cn_len ) == 0 )\n            {\n                break;\n            }\n        }\n\n        if( name == NULL )\n            *flags |= MBEDTLS_X509_BADCERT_CN_MISMATCH;\n    }\n}",
  "abstract_func": "static void x509_crt_verify_name( const mbedtls_x509_crt *VAR_0,\n                                  const char *VAR_1,\n                                  uint32_t *VAR_2 )\n{\n    const mbedtls_x509_name *VAR_3;\n    const mbedtls_x509_sequence *VAR_4;\n    size_t VAR_5 = strlen( VAR_1 );\n\n    if( VAR_0->ext_types & VAR_6 )\n    {\n        for( VAR_4 = &VAR_0->subject_alt_names; VAR_4 != NULL; VAR_4 = VAR_4->next )\n        {\n            if( x509_crt_check_san( &VAR_4->buf, VAR_1, VAR_5 ) == 0 )\n                break;\n        }\n\n        if( VAR_4 == NULL )\n            *VAR_2 |= VAR_7;\n    }\n    else\n    {\n        for( VAR_3 = &VAR_0->subject; VAR_3 != NULL; VAR_3 = VAR_3->next )\n        {\n            if( MBEDTLS_OID_CMP( VAR_8, &VAR_3->oid ) == 0 &&\n                x509_crt_check_cn( &VAR_3->val, VAR_1, VAR_5 ) == 0 )\n            {\n                break;\n            }\n        }\n\n        if( VAR_3 == NULL )\n            *VAR_2 |= VAR_7;\n    }\n}",
  "func_graph_path": "Mbed-TLS/mbedtls/f3e4bd8632b71dc491e52e6df87dc3e409d2b869/x509_crt.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -10,7 +10,7 @@\n     {\n         for( cur = &crt->subject_alt_names; cur != NULL; cur = cur->next )\n         {\n-            if( x509_crt_check_cn( &cur->buf, cn, cn_len ) == 0 )\n+            if( x509_crt_check_san( &cur->buf, cn, cn_len ) == 0 )\n                 break;\n         }\n ",
  "diff_line_info": {
    "deleted_lines": [
      "            if( x509_crt_check_cn( &cur->buf, cn, cn_len ) == 0 )"
    ],
    "added_lines": [
      "            if( x509_crt_check_san( &cur->buf, cn, cn_len ) == 0 )"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/Mbed-TLS/mbedtls/pull/3554",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/Mbed-TLS/mbedtls/pull/3554: 403 Client Error: Forbidden for url: https://api.github.com/repos/Mbed-TLS/mbedtls/pulls/3554",
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.85,
  "Bug Filter Response": "**Final Classification:** Defect Remediation & Feature Upgrades;  \n**Confidence:** 0.85"
}