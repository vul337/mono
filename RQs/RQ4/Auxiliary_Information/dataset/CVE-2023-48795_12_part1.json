{
  "cve_id": "CVE-2023-48795",
  "cwe_ids": [
    "CWE-354"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:H/A:N",
  "cvss_is_v3": true,
  "repo_name": "apache/mina-sshd",
  "commit_msg": "GH-445: OpenSSH \"strict KEX\" protocol extension\n\nImplements the OpenSSH \"strict KEX\" protocol extension.[1] If both\nparties in a an SSH connection announce support for strict KEX in the\ninitial KEX_INIT message, strict KEX is active; otherwise it isn't.\n\nWith strict KEX active, there must be only KEX-related messages during\nthe initial key exchange (no IGNORE or DEBUG messages are allowed), and\nthe KEX_INIT message must be the first one to have been received after\nthe initial version exchange. If these conditions are violated, the\nconnection is terminated.\n\nStrict KEX also resets message sequence numbers to zero after each\nNEW_KEYS message sent or received.\n\n[1] https://github.com/openssh/openssh-portable/blob/master/PROTOCOL",
  "commit_hash": "6b0fd46f64bcb75eeeee31d65f10242660aad7c1",
  "git_url": "https://github.com/apache/mina-sshd/commit/6b0fd46f64bcb75eeeee31d65f10242660aad7c1",
  "file_path": "sshd-core/src/main/java/org/apache/sshd/common/session/helpers/AbstractSession.java",
  "func_name": "receiveKexInit",
  "func_before": "protected byte[] receiveKexInit(Buffer buffer) throws Exception {\n        Map<KexProposalOption, String> proposal = new EnumMap<>(KexProposalOption.class);\n\n        byte[] seed;\n        synchronized (kexState) {\n            seed = receiveKexInit(buffer, proposal);\n            receiveKexInit(proposal, seed);\n        }\n\n        if (log.isTraceEnabled()) {\n            log.trace(\"receiveKexInit({}) proposal={} seed: {}\",\n                    this, proposal, BufferUtils.toHex(':', seed));\n        }\n\n        return seed;\n    }",
  "abstract_func_before": "protected byte[] receiveKexInit(Buffer VAR_0) throws Exception {\n        Map<KexProposalOption, String> VAR_1 = new EnumMap<>(KexProposalOption.class);\n\n        byte[] VAR_2;\n        synchronized (VAR_3) {\n            VAR_2 = receiveKexInit(VAR_0, VAR_1);\n            receiveKexInit(VAR_1, VAR_2);\n        }\n\n        if (VAR_4.isTraceEnabled()) {\n            VAR_4.trace(\"receiveKexInit({}) proposal={} seed: {}\",\n                    this, VAR_1, VAR_5.toHex(':', VAR_2));\n        }\n\n        return VAR_2;\n    }",
  "func_graph_path_before": "apache/mina-sshd/6b0fd46f64bcb75eeeee31d65f10242660aad7c1/AbstractSession.java/vul/before/6.json",
  "func": "protected byte[] receiveKexInit(Buffer buffer) throws Exception {\n        Map<KexProposalOption, String> proposal = new EnumMap<>(KexProposalOption.class);\n\n        if (!initialKexDone) {\n            initialKexInitSequenceNumber = seqi;\n        }\n        byte[] seed;\n        synchronized (kexState) {\n            seed = receiveKexInit(buffer, proposal);\n            receiveKexInit(proposal, seed);\n        }\n\n        if (log.isTraceEnabled()) {\n            log.trace(\"receiveKexInit({}) proposal={} seed: {}\",\n                    this, proposal, BufferUtils.toHex(':', seed));\n        }\n\n        return seed;\n    }",
  "abstract_func": "protected byte[] receiveKexInit(Buffer VAR_0) throws Exception {\n        Map<KexProposalOption, String> VAR_1 = new EnumMap<>(KexProposalOption.class);\n\n        if (!VAR_2) {\n            VAR_3 = VAR_4;\n        }\n        byte[] VAR_5;\n        synchronized (VAR_6) {\n            VAR_5 = receiveKexInit(VAR_0, VAR_1);\n            receiveKexInit(VAR_1, VAR_5);\n        }\n\n        if (VAR_7.isTraceEnabled()) {\n            VAR_7.trace(\"receiveKexInit({}) proposal={} seed: {}\",\n                    this, VAR_1, VAR_8.toHex(':', VAR_5));\n        }\n\n        return VAR_5;\n    }",
  "func_graph_path": "apache/mina-sshd/6b0fd46f64bcb75eeeee31d65f10242660aad7c1/AbstractSession.java/vul/after/6.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,6 +1,9 @@\n protected byte[] receiveKexInit(Buffer buffer) throws Exception {\n         Map<KexProposalOption, String> proposal = new EnumMap<>(KexProposalOption.class);\n \n+        if (!initialKexDone) {\n+            initialKexInitSequenceNumber = seqi;\n+        }\n         byte[] seed;\n         synchronized (kexState) {\n             seed = receiveKexInit(buffer, proposal);",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "        if (!initialKexDone) {",
      "            initialKexInitSequenceNumber = seqi;",
      "        }"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/apache/mina-sshd/pull/449",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/apache/mina-sshd/pull/449: 403 Client Error: Forbidden for url: https://api.github.com/repos/apache/mina-sshd/pulls/449",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.8,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix;  \n**Confidence:** 0.8"
}