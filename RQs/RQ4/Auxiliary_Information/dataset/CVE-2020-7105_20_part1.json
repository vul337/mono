{
  "cve_id": "CVE-2020-7105",
  "cwe_ids": [
    "CWE-476"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "redis/hiredis",
  "commit_msg": "Rename allocation wrappers and add license info\n\nSee #752, #747",
  "commit_hash": "70e73a31ad5edb6c457658c0a0b6752b06cc6a25",
  "git_url": "https://github.com/redis/hiredis/commit/70e73a31ad5edb6c457658c0a0b6752b06cc6a25",
  "file_path": "adapters/libevent.h",
  "func_name": "redisLibeventAttach",
  "func_before": "static int redisLibeventAttach(redisAsyncContext *ac, struct event_base *base) {\n    redisContext *c = &(ac->c);\n    redisLibeventEvents *e;\n\n    /* Nothing should be attached when something is already attached */\n    if (ac->ev.data != NULL)\n        return REDIS_ERR;\n\n    /* Create container for context and r/w events */\n    e = (redisLibeventEvents*)hiredis_safe_calloc(1, sizeof(*e));\n    e->context = ac;\n\n    /* Register functions to start/stop listening for events */\n    ac->ev.addRead = redisLibeventAddRead;\n    ac->ev.delRead = redisLibeventDelRead;\n    ac->ev.addWrite = redisLibeventAddWrite;\n    ac->ev.delWrite = redisLibeventDelWrite;\n    ac->ev.cleanup = redisLibeventCleanup;\n    ac->ev.scheduleTimer = redisLibeventSetTimeout;\n    ac->ev.data = e;\n\n    /* Initialize and install read/write events */\n    e->ev = event_new(base, c->fd, EV_READ | EV_WRITE, redisLibeventHandler, e);\n    e->base = base;\n    return REDIS_OK;\n}",
  "abstract_func_before": "static int redisLibeventAttach(redisAsyncContext *VAR_0, struct event_base *VAR_1) {\n    redisContext *VAR_2 = &(VAR_0->c);\n    redisLibeventEvents *VAR_3;\n\n    /* COMMENT_0 */\n    if (VAR_0->ev.data != NULL)\n        return VAR_4;\n\n    /* COMMENT_1 */\n    VAR_3 = (redisLibeventEvents*)hiredis_safe_calloc(1, sizeof(*VAR_3));\n    VAR_3->context = VAR_0;\n\n    /* COMMENT_2 */\n    VAR_0->ev.addRead = VAR_5;\n    VAR_0->ev.delRead = VAR_6;\n    VAR_0->ev.addWrite = VAR_7;\n    VAR_0->ev.delWrite = VAR_8;\n    VAR_0->ev.cleanup = VAR_9;\n    VAR_0->ev.scheduleTimer = VAR_10;\n    VAR_0->ev.data = VAR_3;\n\n    /* COMMENT_3 */\n    VAR_3->ev = event_new(VAR_1, VAR_2->fd, VAR_11 | VAR_12, VAR_13, VAR_3);\n    VAR_3->base = VAR_1;\n    return VAR_14;\n}",
  "func_graph_path_before": "redis/hiredis/70e73a31ad5edb6c457658c0a0b6752b06cc6a25/libevent.h/vul/before/0.json",
  "func": "static int redisLibeventAttach(redisAsyncContext *ac, struct event_base *base) {\n    redisContext *c = &(ac->c);\n    redisLibeventEvents *e;\n\n    /* Nothing should be attached when something is already attached */\n    if (ac->ev.data != NULL)\n        return REDIS_ERR;\n\n    /* Create container for context and r/w events */\n    e = (redisLibeventEvents*)hi_calloc(1, sizeof(*e));\n    e->context = ac;\n\n    /* Register functions to start/stop listening for events */\n    ac->ev.addRead = redisLibeventAddRead;\n    ac->ev.delRead = redisLibeventDelRead;\n    ac->ev.addWrite = redisLibeventAddWrite;\n    ac->ev.delWrite = redisLibeventDelWrite;\n    ac->ev.cleanup = redisLibeventCleanup;\n    ac->ev.scheduleTimer = redisLibeventSetTimeout;\n    ac->ev.data = e;\n\n    /* Initialize and install read/write events */\n    e->ev = event_new(base, c->fd, EV_READ | EV_WRITE, redisLibeventHandler, e);\n    e->base = base;\n    return REDIS_OK;\n}",
  "abstract_func": "static int redisLibeventAttach(redisAsyncContext *VAR_0, struct event_base *VAR_1) {\n    redisContext *VAR_2 = &(VAR_0->c);\n    redisLibeventEvents *VAR_3;\n\n    /* COMMENT_0 */\n    if (VAR_0->ev.data != NULL)\n        return VAR_4;\n\n    /* COMMENT_1 */\n    VAR_3 = (redisLibeventEvents*)hi_calloc(1, sizeof(*VAR_3));\n    VAR_3->context = VAR_0;\n\n    /* COMMENT_2 */\n    VAR_0->ev.addRead = VAR_5;\n    VAR_0->ev.delRead = VAR_6;\n    VAR_0->ev.addWrite = VAR_7;\n    VAR_0->ev.delWrite = VAR_8;\n    VAR_0->ev.cleanup = VAR_9;\n    VAR_0->ev.scheduleTimer = VAR_10;\n    VAR_0->ev.data = VAR_3;\n\n    /* COMMENT_3 */\n    VAR_3->ev = event_new(VAR_1, VAR_2->fd, VAR_11 | VAR_12, VAR_13, VAR_3);\n    VAR_3->base = VAR_1;\n    return VAR_14;\n}",
  "func_graph_path": "redis/hiredis/70e73a31ad5edb6c457658c0a0b6752b06cc6a25/libevent.h/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -7,7 +7,7 @@\n         return REDIS_ERR;\n \n     /* Create container for context and r/w events */\n-    e = (redisLibeventEvents*)hiredis_safe_calloc(1, sizeof(*e));\n+    e = (redisLibeventEvents*)hi_calloc(1, sizeof(*e));\n     e->context = ac;\n \n     /* Register functions to start/stop listening for events */",
  "diff_line_info": {
    "deleted_lines": [
      "    e = (redisLibeventEvents*)hiredis_safe_calloc(1, sizeof(*e));"
    ],
    "added_lines": [
      "    e = (redisLibeventEvents*)hi_calloc(1, sizeof(*e));"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/redis/hiredis/pull/754",
  "description": {
    "pr_info": {
      "title": "Safe allocation wrappers",
      "number": 754
    },
    "comment": [
      "Adds allocation wrappers that invokes a defined OOM handler.\r\n\r\nMy goal was the smallest surface area of changes possible.  Once we merge this it might be prudent to replace every `malloc`/`free` call with our wrappers.",
      "Just quoting the [last parts of the conversation in a merged PR](https://github.com/redis/hiredis/pull/752#issuecomment-577429138) from @michael-grunder \r\n\r\n>  @lamby I totally understand not wanting such a huge change just for a patch.\r\n\r\nThanks... and I think the changes in this PR would work for me. :+1: ",
      "Would be great to get some more eyes on this. :)",
      "> are we using asprintf and friends anywhere?\r\n\r\nNo, but `sds` has something similar (e.g. [sdscatfmt](https://github.com/redis/hiredis/blob/0501c623c91344e54cb2775a91509650960789b1/sds.c#L582)) although it appears that we're testing for NULL after every allocation/reallocation. \r\n\r\n",
      "Merged, thanks everyone!"
    ]
  },
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.7,
  "Bug Filter Response": "**Final Classification:** Defect Remediation & Feature Upgrades  \n**Confidence:** 0.7  \n\n**Step-by-Step Explanation:**\n\n1. **Commit Message Analysis:** The message mentions renaming allocation wrappers and adding license info, indicating code changes and documentation updates.\n2. **Vulnerability Description:** Describes adding allocation wrappers for OOM handling, aiming for minimal changes. This suggests improvements in memory management rather than a security fix.\n3. **Code Diff Review:** Shows a replacement of memory allocation functions, possibly improving resource handling without clear security implications.\n4. **Ambiguity Check:** The changes could be for bug fixes or feature improvements, not necessarily security, with the license addition confirming non-security aspects.\n5. **Confidence Score:** 0.7 because while minimal changes may address a bug, there's no explicit mention of a security issue, leading to a reasonable but not certain classification.\n\nThe patch appears to focus on code refactoring and memory management improvements, fitting into defect remediation or feature upgrades."
}