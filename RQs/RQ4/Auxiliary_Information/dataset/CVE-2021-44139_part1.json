{
  "cve_id": "CVE-2021-44139",
  "cwe_ids": [
    "CWE-918"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:N/A:N",
  "cvss_is_v3": false,
  "repo_name": "alibaba/Sentinel",
  "commit_msg": "dashboard: Add IP validation in MachineRegistryController\n\n* Fixes #2451\n\nSigned-off-by: Eric Zhao <sczyh16@gmail.com>",
  "commit_hash": "d4ea89e978d44a0991c41e410c6f5b073655b56b",
  "git_url": "https://github.com/alibaba/Sentinel/commit/d4ea89e978d44a0991c41e410c6f5b073655b56b",
  "file_path": "sentinel-dashboard/src/main/java/com/alibaba/csp/sentinel/dashboard/controller/MachineRegistryController.java",
  "func_name": "receiveHeartBeat",
  "func_before": "@ResponseBody\n    @RequestMapping(\"/machine\")\n    public Result<?> receiveHeartBeat(String app,\n                                      @RequestParam(value = \"app_type\", required = false, defaultValue = \"0\")\n                                          Integer appType, Long version, String v, String hostname, String ip,\n                                      Integer port) {\n        if (StringUtil.isBlank(app) || app.length() > 256) {\n            return Result.ofFail(-1, \"invalid appName\");\n        }\n        if (StringUtil.isBlank(ip) || ip.length() > 128) {\n            return Result.ofFail(-1, \"invalid ip: \" + ip);\n        }\n        if (port == null || port < -1) {\n            return Result.ofFail(-1, \"invalid port\");\n        }\n        if (hostname != null && hostname.length() > 256) {\n            return Result.ofFail(-1, \"hostname too long\");\n        }\n        if (port == -1) {\n            logger.warn(\"Receive heartbeat from \" + ip + \" but port not set yet\");\n            return Result.ofFail(-1, \"your port not set yet\");\n        }\n        String sentinelVersion = StringUtil.isBlank(v) ? \"unknown\" : v;\n\n        version = version == null ? System.currentTimeMillis() : version;\n        try {\n            MachineInfo machineInfo = new MachineInfo();\n            machineInfo.setApp(app);\n            machineInfo.setAppType(appType);\n            machineInfo.setHostname(hostname);\n            machineInfo.setIp(ip);\n            machineInfo.setPort(port);\n            machineInfo.setHeartbeatVersion(version);\n            machineInfo.setLastHeartbeat(System.currentTimeMillis());\n            machineInfo.setVersion(sentinelVersion);\n            appManagement.addMachine(machineInfo);\n            return Result.ofSuccessMsg(\"success\");\n        } catch (Exception e) {\n            logger.error(\"Receive heartbeat error\", e);\n            return Result.ofFail(-1, e.getMessage());\n        }\n    }",
  "abstract_func_before": "@ResponseBody\n    @RequestMapping(\"/machine\")\n    public Result<?> receiveHeartBeat(String VAR_0,\n                                      @RequestParam(VAR_1 = \"app_type\", VAR_2 = false, VAR_3 = \"0\")\n                                          Integer VAR_4, Long VAR_5, String VAR_6, String VAR_7, String VAR_8,\n                                      Integer VAR_9) {\n        if (VAR_10.isBlank(VAR_0) || VAR_0.length() > 256) {\n            return VAR_11.ofFail(-1, \"invalid appName\");\n        }\n        if (VAR_10.isBlank(VAR_8) || VAR_8.length() > 128) {\n            return VAR_11.ofFail(-1, \"invalid ip: \" + VAR_8);\n        }\n        if (VAR_9 == null || VAR_9 < -1) {\n            return VAR_11.ofFail(-1, \"invalid port\");\n        }\n        if (VAR_7 != null && VAR_7.length() > 256) {\n            return VAR_11.ofFail(-1, \"hostname too long\");\n        }\n        if (VAR_9 == -1) {\n            VAR_12.warn(\"Receive heartbeat from \" + VAR_8 + \" but port not set yet\");\n            return VAR_11.ofFail(-1, \"your port not set yet\");\n        }\n        String VAR_13 = VAR_10.isBlank(VAR_6) ? \"unknown\" : VAR_6;\n\n        VAR_5 = VAR_5 == null ? VAR_14.currentTimeMillis() : VAR_5;\n        try {\n            MachineInfo VAR_15 = new MachineInfo();\n            VAR_15.setApp(VAR_0);\n            VAR_15.setAppType(VAR_4);\n            VAR_15.setHostname(VAR_7);\n            VAR_15.setIp(VAR_8);\n            VAR_15.setPort(VAR_9);\n            VAR_15.setHeartbeatVersion(VAR_5);\n            VAR_15.setLastHeartbeat(VAR_14.currentTimeMillis());\n            VAR_15.setVersion(VAR_13);\n            VAR_16.addMachine(VAR_15);\n            return VAR_11.ofSuccessMsg(\"success\");\n        } catch (Exception VAR_17) {\n            VAR_12.error(\"Receive heartbeat error\", VAR_17);\n            return VAR_11.ofFail(-1, VAR_17.getMessage());\n        }\n    }",
  "func_graph_path_before": "alibaba/Sentinel/d4ea89e978d44a0991c41e410c6f5b073655b56b/MachineRegistryController.java/vul/before/0.json",
  "func": "@ResponseBody\n    @RequestMapping(\"/machine\")\n    public Result<?> receiveHeartBeat(String app,\n                                      @RequestParam(value = \"app_type\", required = false, defaultValue = \"0\")\n                                          Integer appType, Long version, String v, String hostname, String ip,\n                                      Integer port) {\n        if (StringUtil.isBlank(app) || app.length() > 256) {\n            return Result.ofFail(-1, \"invalid appName\");\n        }\n        if (StringUtil.isBlank(ip) || ip.length() > 128) {\n            return Result.ofFail(-1, \"invalid ip: \" + ip);\n        }\n        if (!IPAddressUtil.isIPv4LiteralAddress(ip) && !IPAddressUtil.isIPv6LiteralAddress(ip)) {\n            return Result.ofFail(-1, \"invalid ip: \" + ip);\n        }\n        if (port == null || port < -1) {\n            return Result.ofFail(-1, \"invalid port\");\n        }\n        if (hostname != null && hostname.length() > 256) {\n            return Result.ofFail(-1, \"hostname too long\");\n        }\n        if (port == -1) {\n            logger.warn(\"Receive heartbeat from \" + ip + \" but port not set yet\");\n            return Result.ofFail(-1, \"your port not set yet\");\n        }\n        String sentinelVersion = StringUtil.isBlank(v) ? \"unknown\" : v;\n\n        version = version == null ? System.currentTimeMillis() : version;\n        try {\n            MachineInfo machineInfo = new MachineInfo();\n            machineInfo.setApp(app);\n            machineInfo.setAppType(appType);\n            machineInfo.setHostname(hostname);\n            machineInfo.setIp(ip);\n            machineInfo.setPort(port);\n            machineInfo.setHeartbeatVersion(version);\n            machineInfo.setLastHeartbeat(System.currentTimeMillis());\n            machineInfo.setVersion(sentinelVersion);\n            appManagement.addMachine(machineInfo);\n            return Result.ofSuccessMsg(\"success\");\n        } catch (Exception e) {\n            logger.error(\"Receive heartbeat error\", e);\n            return Result.ofFail(-1, e.getMessage());\n        }\n    }",
  "abstract_func": "@ResponseBody\n    @RequestMapping(\"/machine\")\n    public Result<?> receiveHeartBeat(String VAR_0,\n                                      @RequestParam(VAR_1 = \"app_type\", VAR_2 = false, VAR_3 = \"0\")\n                                          Integer VAR_4, Long VAR_5, String VAR_6, String VAR_7, String VAR_8,\n                                      Integer VAR_9) {\n        if (VAR_10.isBlank(VAR_0) || VAR_0.length() > 256) {\n            return VAR_11.ofFail(-1, \"invalid appName\");\n        }\n        if (VAR_10.isBlank(VAR_8) || VAR_8.length() > 128) {\n            return VAR_11.ofFail(-1, \"invalid ip: \" + VAR_8);\n        }\n        if (!VAR_12.isIPv4LiteralAddress(VAR_8) && !VAR_12.isIPv6LiteralAddress(VAR_8)) {\n            return VAR_11.ofFail(-1, \"invalid ip: \" + VAR_8);\n        }\n        if (VAR_9 == null || VAR_9 < -1) {\n            return VAR_11.ofFail(-1, \"invalid port\");\n        }\n        if (VAR_7 != null && VAR_7.length() > 256) {\n            return VAR_11.ofFail(-1, \"hostname too long\");\n        }\n        if (VAR_9 == -1) {\n            VAR_13.warn(\"Receive heartbeat from \" + VAR_8 + \" but port not set yet\");\n            return VAR_11.ofFail(-1, \"your port not set yet\");\n        }\n        String VAR_14 = VAR_10.isBlank(VAR_6) ? \"unknown\" : VAR_6;\n\n        VAR_5 = VAR_5 == null ? VAR_15.currentTimeMillis() : VAR_5;\n        try {\n            MachineInfo VAR_16 = new MachineInfo();\n            VAR_16.setApp(VAR_0);\n            VAR_16.setAppType(VAR_4);\n            VAR_16.setHostname(VAR_7);\n            VAR_16.setIp(VAR_8);\n            VAR_16.setPort(VAR_9);\n            VAR_16.setHeartbeatVersion(VAR_5);\n            VAR_16.setLastHeartbeat(VAR_15.currentTimeMillis());\n            VAR_16.setVersion(VAR_14);\n            VAR_17.addMachine(VAR_16);\n            return VAR_11.ofSuccessMsg(\"success\");\n        } catch (Exception VAR_18) {\n            VAR_13.error(\"Receive heartbeat error\", VAR_18);\n            return VAR_11.ofFail(-1, VAR_18.getMessage());\n        }\n    }",
  "func_graph_path": "alibaba/Sentinel/d4ea89e978d44a0991c41e410c6f5b073655b56b/MachineRegistryController.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -8,6 +8,9 @@\n             return Result.ofFail(-1, \"invalid appName\");\n         }\n         if (StringUtil.isBlank(ip) || ip.length() > 128) {\n+            return Result.ofFail(-1, \"invalid ip: \" + ip);\n+        }\n+        if (!IPAddressUtil.isIPv4LiteralAddress(ip) && !IPAddressUtil.isIPv6LiteralAddress(ip)) {\n             return Result.ofFail(-1, \"invalid ip: \" + ip);\n         }\n         if (port == null || port < -1) {",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "            return Result.ofFail(-1, \"invalid ip: \" + ip);",
      "        }",
      "        if (!IPAddressUtil.isIPv4LiteralAddress(ip) && !IPAddressUtil.isIPv6LiteralAddress(ip)) {"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/alibaba/Sentinel/pull/2517",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/alibaba/Sentinel/pull/2517: 403 Client Error: Forbidden for url: https://api.github.com/repos/alibaba/Sentinel/pulls/2517",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.7,
  "Bug Filter Response": "The patch adds IP validation, which is a security-related improvement to prevent invalid IPs that could cause issues. However, without explicit mention of a security vulnerability or CVE, the classification is a reasonable inference.\n\n**Step-by-step Explanation:**\n\n1. **Input Analysis:** The commit adds IP validation, which can prevent invalid inputs potentially leading to security issues.\n2. **Consistency Check:** The code changes align with the commit message about IP validation.\n3. **Purpose Evaluation:** It modifies core logic to validate IPs, indicating a potential security fix.\n4. **Security Assessment:** While IP validation is a security measure, there's no reference to a security issue or CVE.\n5. **Classification:** Given the context, it's likely a security fix but lacks explicit evidence.\n6. **Confidence:** Moderate confidence due to inferred security relevance.\n\n**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.7"
}