{
  "cve_id": "CVE-2020-11002",
  "cwe_ids": [
    "CWE-74"
  ],
  "cvss_vector": "AV:N/AC:L/Au:S/C:C/I:C/A:C",
  "cvss_is_v3": false,
  "repo_name": "dropwizard",
  "commit_msg": "Disable message interpolation in ConstraintViolations by default (#3208)\n\nDisable message interpolation in ConstraintViolations by default but allow enabling it explicitly with `SelfValidating#escapeExpressions()`.\r\n\r\nAdditionally, `ConstraintViolations` now provides a set of methods which take a map of message parameters for interpolation.\r\nThe message parameters will be escaped by default.\r\n\r\nRefs #3153\r\nRefs #3157",
  "commit_hash": "d5a512f7abf965275f2a6b913ac4fe778e424242",
  "git_url": "https://github.com/dropwizard/dropwizard/commit/d5a512f7abf965275f2a6b913ac4fe778e424242",
  "file_path": "dropwizard-validation/src/main/java/io/dropwizard/validation/selfvalidating/ViolationCollector.java",
  "func_name": "addViolation",
  "func_before": "public void addViolation(String propertyName, String key, String message) {\n        violationOccurred = true;\n        String messageTemplate = escapeEl(message);\n        context.buildConstraintViolationWithTemplate(messageTemplate)\n                .addPropertyNode(propertyName)\n                .addBeanNode().inIterable().atKey(key)\n                .addConstraintViolation();\n    }",
  "abstract_func_before": "public void addViolation(String VAR_0, String VAR_1, String VAR_2) {\n        VAR_3 = true;\n        String VAR_4 = escapeEl(VAR_2);\n        VAR_5.buildConstraintViolationWithTemplate(VAR_4)\n                .addPropertyNode(VAR_0)\n                .addBeanNode().inIterable().atKey(VAR_1)\n                .addConstraintViolation();\n    }",
  "func_graph_path_before": "dropwizard/d5a512f7abf965275f2a6b913ac4fe778e424242/ViolationCollector.java/vul/before/1.json",
  "func": "public void addViolation(String propertyName, String key, String message) {\n        addViolation(propertyName, key, message, Collections.emptyMap());\n    }",
  "abstract_func": "public void addViolation(String VAR_0, String VAR_1, String VAR_2) {\n        addViolation(VAR_0, VAR_1, VAR_2, VAR_3.emptyMap());\n    }",
  "func_graph_path": "dropwizard/d5a512f7abf965275f2a6b913ac4fe778e424242/ViolationCollector.java/vul/after/1.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,8 +1,3 @@\n public void addViolation(String propertyName, String key, String message) {\n-        violationOccurred = true;\n-        String messageTemplate = escapeEl(message);\n-        context.buildConstraintViolationWithTemplate(messageTemplate)\n-                .addPropertyNode(propertyName)\n-                .addBeanNode().inIterable().atKey(key)\n-                .addConstraintViolation();\n+        addViolation(propertyName, key, message, Collections.emptyMap());\n     }",
  "diff_line_info": {
    "deleted_lines": [
      "        violationOccurred = true;",
      "        String messageTemplate = escapeEl(message);",
      "        context.buildConstraintViolationWithTemplate(messageTemplate)",
      "                .addPropertyNode(propertyName)",
      "                .addBeanNode().inIterable().atKey(key)",
      "                .addConstraintViolation();"
    ],
    "added_lines": [
      "        addViolation(propertyName, key, message, Collections.emptyMap());"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/dropwizard/dropwizard/pull/3208",
  "description": {
    "pr_info": {
      "title": "Disable message interpolation in ConstraintViolations by default",
      "number": 3208
    },
    "comment": [
      "Disable message interpolation in `ConstraintViolations` by default but allow enabling it explicitly with `SelfValidating#escapeExpressions()`.\r\n\r\nAdditionally, `ConstraintViolations` now provides a set of methods which take a map of message parameters for interpolation. These message parameters are be escaped by default.\r\n\r\nThanks to @pwntester and @gsmet for their invaluable input!\r\n\r\nRefs #3153\r\nRefs #3157",
      "LGTM, thanks!"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 0.95"
}