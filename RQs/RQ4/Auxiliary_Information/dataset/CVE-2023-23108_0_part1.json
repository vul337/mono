{
  "cve_id": "CVE-2023-23108",
  "cwe_ids": [
    "CWE-369",
    "CWE-476"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
  "cvss_is_v3": true,
  "repo_name": "colinbourassa/crasm",
  "commit_msg": "Prevent NULL pointer dereference.\n\nSpecific test cases could cause the `oper` character pointer to\nbe NULL, leading to NULL pointer dereference.",
  "commit_hash": "1be14c2d38cf74d481754ca595fcaa3e928a87a6",
  "git_url": "https://github.com/colinbourassa/crasm/commit/1be14c2d38cf74d481754ca595fcaa3e928a87a6",
  "file_path": "src/pseudos.c",
  "func_name": "Xasc",
  "func_before": "int Xasc(int modifier, char* label, char* mnemo, char* oper)\n{\n  register char* s;\n  register char r;\n  register char delimiter;\n\n  s = oper;\n  delimiter = *s;\n\n  if (delimiter != '\\'' && delimiter != '\\\"')\n  {\n    error(\"Bad operand syntax\");\n  }\n\n  while ((r = *++s) != delimiter)\n  {\n    if (r == '\\\\')\n    {\n      switch (*++s)\n      {\n      case 't':\n        r = '\\t';\n        break;\n\n      case 'n':\n        r = '\\n';\n        break;\n\n      case 'r':\n        r = '\\r';\n        break;\n\n      case '0':\n        r = 0;\n        break;\n\n      case '\\'':\n      case '\\\"':\n      case '\\\\':\n        r = *s;\n        break;\n\n      default:\n        error(\"Bad \\\\X character\");\n      }\n    }\n\n    insert8(r);\n  }\n\n  if (*++s)\n  {\n    error(\"syntax error\");\n  }\n\n  return 0;\n}",
  "abstract_func_before": "int Xasc(int VAR_0, char* VAR_1, char* VAR_2, char* VAR_3)\n{\n  register char* VAR_4;\n  register char VAR_5;\n  register char VAR_6;\n\n  VAR_4 = VAR_3;\n  VAR_6 = *VAR_4;\n\n  if (VAR_6 != '\\'' && VAR_6 != '\\\"')\n  {\n    error(\"Bad operand syntax\");\n  }\n\n  while ((VAR_5 = *++VAR_4) != VAR_6)\n  {\n    if (VAR_5 == '\\\\')\n    {\n      switch (*++VAR_4)\n      {\n      case 't':\n        VAR_5 = '\\t';\n        break;\n\n      case 'n':\n        VAR_5 = '\\n';\n        break;\n\n      case 'r':\n        VAR_5 = '\\r';\n        break;\n\n      case '0':\n        VAR_5 = 0;\n        break;\n\n      case '\\'':\n      case '\\\"':\n      case '\\\\':\n        VAR_5 = *VAR_4;\n        break;\n\n      default:\n        error(\"Bad \\\\X character\");\n      }\n    }\n\n    insert8(VAR_5);\n  }\n\n  if (*++VAR_4)\n  {\n    error(\"syntax error\");\n  }\n\n  return 0;\n}",
  "func_graph_path_before": "colinbourassa/crasm/1be14c2d38cf74d481754ca595fcaa3e928a87a6/pseudos.c/vul/before/0.json",
  "func": "int Xasc(int modifier, char* label, char* mnemo, char* oper)\n{\n\n  if (oper == NULL) {\n    error(\"Need an operand\");\n  }\n\n  register char* s;\n  register char r;\n  register char delimiter;\n\n  s = oper;\n  delimiter = *s;\n\n  if (delimiter != '\\'' && delimiter != '\\\"')\n  {\n    error(\"Bad operand syntax\");\n  }\n\n  while ((r = *++s) != delimiter)\n  {\n    if (r == '\\\\')\n    {\n      switch (*++s)\n      {\n      case 't':\n        r = '\\t';\n        break;\n\n      case 'n':\n        r = '\\n';\n        break;\n\n      case 'r':\n        r = '\\r';\n        break;\n\n      case '0':\n        r = 0;\n        break;\n\n      case '\\'':\n      case '\\\"':\n      case '\\\\':\n        r = *s;\n        break;\n\n      default:\n        error(\"Bad \\\\X character\");\n      }\n    }\n\n    insert8(r);\n  }\n\n  if (*++s)\n  {\n    error(\"syntax error\");\n  }\n\n  return 0;\n}",
  "abstract_func": "int Xasc(int VAR_0, char* VAR_1, char* VAR_2, char* VAR_3)\n{\n\n  if (VAR_3 == NULL) {\n    error(\"Need an operand\");\n  }\n\n  register char* VAR_4;\n  register char VAR_5;\n  register char VAR_6;\n\n  VAR_4 = VAR_3;\n  VAR_6 = *VAR_4;\n\n  if (VAR_6 != '\\'' && VAR_6 != '\\\"')\n  {\n    error(\"Bad operand syntax\");\n  }\n\n  while ((VAR_5 = *++VAR_4) != VAR_6)\n  {\n    if (VAR_5 == '\\\\')\n    {\n      switch (*++VAR_4)\n      {\n      case 't':\n        VAR_5 = '\\t';\n        break;\n\n      case 'n':\n        VAR_5 = '\\n';\n        break;\n\n      case 'r':\n        VAR_5 = '\\r';\n        break;\n\n      case '0':\n        VAR_5 = 0;\n        break;\n\n      case '\\'':\n      case '\\\"':\n      case '\\\\':\n        VAR_5 = *VAR_4;\n        break;\n\n      default:\n        error(\"Bad \\\\X character\");\n      }\n    }\n\n    insert8(VAR_5);\n  }\n\n  if (*++VAR_4)\n  {\n    error(\"syntax error\");\n  }\n\n  return 0;\n}",
  "func_graph_path": "colinbourassa/crasm/1be14c2d38cf74d481754ca595fcaa3e928a87a6/pseudos.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,5 +1,10 @@\n int Xasc(int modifier, char* label, char* mnemo, char* oper)\n {\n+\n+  if (oper == NULL) {\n+    error(\"Need an operand\");\n+  }\n+\n   register char* s;\n   register char r;\n   register char delimiter;",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "",
      "  if (oper == NULL) {",
      "    error(\"Need an operand\");",
      "  }",
      ""
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/colinbourassa/crasm/pull/7",
  "description": {
    "pr_info": {
      "title": "Fix two faulting cases",
      "number": 7
    },
    "comment": [
      "Specific test cases can cause the program to both divide by zero and dereference a null pointer. The proposed PR is a minimal viable patch."
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix;  \n**Confidence:** 0.9"
}