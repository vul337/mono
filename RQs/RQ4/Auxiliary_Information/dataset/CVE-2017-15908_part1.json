{
  "cve_id": "CVE-2017-15908",
  "cwe_ids": [
    "CWE-835"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "systemd",
  "commit_msg": "resolved: fix loop on packets with pseudo dns types\n\nReported by Karim Hossen & Thomas Imbert from Sogeti ESEC R&D.\n\nhttps://bugs.launchpad.net/ubuntu/+source/systemd/+bug/1725351",
  "commit_hash": "9f939335a07085aa9a9663efd1dca06ef6405d62",
  "git_url": "https://github.com/systemd/systemd/commit/9f939335a07085aa9a9663efd1dca06ef6405d62",
  "file_path": "src/resolve/resolved-dns-packet.c",
  "func_name": "dns_packet_read_type_window",
  "func_before": "static int dns_packet_read_type_window(DnsPacket *p, Bitmap **types, size_t *start) {\n        uint8_t window;\n        uint8_t length;\n        const uint8_t *bitmap;\n        uint8_t bit = 0;\n        unsigned i;\n        bool found = false;\n        _cleanup_(rewind_dns_packet) DnsPacketRewinder rewinder;\n        int r;\n\n        assert(p);\n        assert(types);\n        INIT_REWINDER(rewinder, p);\n\n        r = bitmap_ensure_allocated(types);\n        if (r < 0)\n                return r;\n\n        r = dns_packet_read_uint8(p, &window, NULL);\n        if (r < 0)\n                return r;\n\n        r = dns_packet_read_uint8(p, &length, NULL);\n        if (r < 0)\n                return r;\n\n        if (length == 0 || length > 32)\n                return -EBADMSG;\n\n        r = dns_packet_read(p, length, (const void **)&bitmap, NULL);\n        if (r < 0)\n                return r;\n\n        for (i = 0; i < length; i++) {\n                uint8_t bitmask = 1 << 7;\n\n                if (!bitmap[i]) {\n                        found = false;\n                        bit += 8;\n                        continue;\n                }\n\n                found = true;\n\n                while (bitmask) {\n                        if (bitmap[i] & bitmask) {\n                                uint16_t n;\n\n                                n = (uint16_t) window << 8 | (uint16_t) bit;\n\n                                /* Ignore pseudo-types. see RFC4034 section 4.1.2 */\n                                if (dns_type_is_pseudo(n))\n                                        continue;\n\n                                r = bitmap_set(*types, n);\n                                if (r < 0)\n                                        return r;\n                        }\n\n                        bit++;\n                        bitmask >>= 1;\n                }\n        }\n\n        if (!found)\n                return -EBADMSG;\n\n        if (start)\n                *start = rewinder.saved_rindex;\n        CANCEL_REWINDER(rewinder);\n\n        return 0;\n}",
  "abstract_func_before": "static int dns_packet_read_type_window(DnsPacket *VAR_0, Bitmap **VAR_1, size_t *VAR_2) {\n        uint8_t VAR_3;\n        uint8_t VAR_4;\n        const uint8_t *VAR_5;\n        uint8_t VAR_6 = 0;\n        unsigned VAR_7;\n        bool VAR_8 = false;\n        VAR_9(rewind_dns_packet) VAR_10 VAR_11;\n        int VAR_12;\n\n        assert(VAR_0);\n        assert(VAR_1);\n        INIT_REWINDER(VAR_11, VAR_0);\n\n        VAR_12 = bitmap_ensure_allocated(VAR_1);\n        if (VAR_12 < 0)\n                return VAR_12;\n\n        VAR_12 = dns_packet_read_uint8(VAR_0, &VAR_3, NULL);\n        if (VAR_12 < 0)\n                return VAR_12;\n\n        VAR_12 = dns_packet_read_uint8(VAR_0, &VAR_4, NULL);\n        if (VAR_12 < 0)\n                return VAR_12;\n\n        if (VAR_4 == 0 || VAR_4 > 32)\n                return -VAR_13;\n\n        VAR_12 = dns_packet_read(VAR_0, VAR_4, (const void **)&VAR_5, NULL);\n        if (VAR_12 < 0)\n                return VAR_12;\n\n        for (VAR_7 = 0; VAR_7 < VAR_4; VAR_7++) {\n                uint8_t VAR_14 = 1 << 7;\n\n                if (!VAR_5[VAR_7]) {\n                        VAR_8 = false;\n                        VAR_6 += 8;\n                        continue;\n                }\n\n                VAR_8 = true;\n\n                while (VAR_14) {\n                        if (VAR_5[VAR_7] & VAR_14) {\n                                uint16_t VAR_15;\n\n                                VAR_15 = (uint16_t) VAR_3 << 8 | (uint16_t) VAR_6;\n\n                                /* COMMENT_0 */\n                                if (dns_type_is_pseudo(VAR_15))\n                                        continue;\n\n                                VAR_12 = bitmap_set(*VAR_1, VAR_15);\n                                if (VAR_12 < 0)\n                                        return VAR_12;\n                        }\n\n                        VAR_6++;\n                        VAR_14 >>= 1;\n                }\n        }\n\n        if (!VAR_8)\n                return -VAR_13;\n\n        if (VAR_2)\n                *VAR_2 = VAR_11.saved_rindex;\n        CANCEL_REWINDER(VAR_11);\n\n        return 0;\n}",
  "func_graph_path_before": "systemd/9f939335a07085aa9a9663efd1dca06ef6405d62/resolved-dns-packet.c/vul/before/0.json",
  "func": "static int dns_packet_read_type_window(DnsPacket *p, Bitmap **types, size_t *start) {\n        uint8_t window;\n        uint8_t length;\n        const uint8_t *bitmap;\n        uint8_t bit = 0;\n        unsigned i;\n        bool found = false;\n        _cleanup_(rewind_dns_packet) DnsPacketRewinder rewinder;\n        int r;\n\n        assert(p);\n        assert(types);\n        INIT_REWINDER(rewinder, p);\n\n        r = bitmap_ensure_allocated(types);\n        if (r < 0)\n                return r;\n\n        r = dns_packet_read_uint8(p, &window, NULL);\n        if (r < 0)\n                return r;\n\n        r = dns_packet_read_uint8(p, &length, NULL);\n        if (r < 0)\n                return r;\n\n        if (length == 0 || length > 32)\n                return -EBADMSG;\n\n        r = dns_packet_read(p, length, (const void **)&bitmap, NULL);\n        if (r < 0)\n                return r;\n\n        for (i = 0; i < length; i++) {\n                uint8_t bitmask = 1 << 7;\n\n                if (!bitmap[i]) {\n                        found = false;\n                        bit += 8;\n                        continue;\n                }\n\n                found = true;\n\n                for (; bitmask; bit++, bitmask >>= 1)\n                        if (bitmap[i] & bitmask) {\n                                uint16_t n;\n\n                                n = (uint16_t) window << 8 | (uint16_t) bit;\n\n                                /* Ignore pseudo-types. see RFC4034 section 4.1.2 */\n                                if (dns_type_is_pseudo(n))\n                                        continue;\n\n                                r = bitmap_set(*types, n);\n                                if (r < 0)\n                                        return r;\n                        }\n        }\n\n        if (!found)\n                return -EBADMSG;\n\n        if (start)\n                *start = rewinder.saved_rindex;\n        CANCEL_REWINDER(rewinder);\n\n        return 0;\n}",
  "abstract_func": "static int dns_packet_read_type_window(DnsPacket *VAR_0, Bitmap **VAR_1, size_t *VAR_2) {\n        uint8_t VAR_3;\n        uint8_t VAR_4;\n        const uint8_t *VAR_5;\n        uint8_t VAR_6 = 0;\n        unsigned VAR_7;\n        bool VAR_8 = false;\n        VAR_9(rewind_dns_packet) VAR_10 VAR_11;\n        int VAR_12;\n\n        assert(VAR_0);\n        assert(VAR_1);\n        INIT_REWINDER(VAR_11, VAR_0);\n\n        VAR_12 = bitmap_ensure_allocated(VAR_1);\n        if (VAR_12 < 0)\n                return VAR_12;\n\n        VAR_12 = dns_packet_read_uint8(VAR_0, &VAR_3, NULL);\n        if (VAR_12 < 0)\n                return VAR_12;\n\n        VAR_12 = dns_packet_read_uint8(VAR_0, &VAR_4, NULL);\n        if (VAR_12 < 0)\n                return VAR_12;\n\n        if (VAR_4 == 0 || VAR_4 > 32)\n                return -VAR_13;\n\n        VAR_12 = dns_packet_read(VAR_0, VAR_4, (const void **)&VAR_5, NULL);\n        if (VAR_12 < 0)\n                return VAR_12;\n\n        for (VAR_7 = 0; VAR_7 < VAR_4; VAR_7++) {\n                uint8_t VAR_14 = 1 << 7;\n\n                if (!VAR_5[VAR_7]) {\n                        VAR_8 = false;\n                        VAR_6 += 8;\n                        continue;\n                }\n\n                VAR_8 = true;\n\n                for (; VAR_14; VAR_6++, VAR_14 >>= 1)\n                        if (VAR_5[VAR_7] & VAR_14) {\n                                uint16_t VAR_15;\n\n                                VAR_15 = (uint16_t) VAR_3 << 8 | (uint16_t) VAR_6;\n\n                                /* COMMENT_0 */\n                                if (dns_type_is_pseudo(VAR_15))\n                                        continue;\n\n                                VAR_12 = bitmap_set(*VAR_1, VAR_15);\n                                if (VAR_12 < 0)\n                                        return VAR_12;\n                        }\n        }\n\n        if (!VAR_8)\n                return -VAR_13;\n\n        if (VAR_2)\n                *VAR_2 = VAR_11.saved_rindex;\n        CANCEL_REWINDER(VAR_11);\n\n        return 0;\n}",
  "func_graph_path": "systemd/9f939335a07085aa9a9663efd1dca06ef6405d62/resolved-dns-packet.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -42,7 +42,7 @@\n \n                 found = true;\n \n-                while (bitmask) {\n+                for (; bitmask; bit++, bitmask >>= 1)\n                         if (bitmap[i] & bitmask) {\n                                 uint16_t n;\n \n@@ -56,10 +56,6 @@\n                                 if (r < 0)\n                                         return r;\n                         }\n-\n-                        bit++;\n-                        bitmask >>= 1;\n-                }\n         }\n \n         if (!found)",
  "diff_line_info": {
    "deleted_lines": [
      "                while (bitmask) {",
      "",
      "                        bit++;",
      "                        bitmask >>= 1;",
      "                }"
    ],
    "added_lines": [
      "                for (; bitmask; bit++, bitmask >>= 1)"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/systemd/systemd/pull/7184",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/systemd/systemd/pull/7184: 403 Client Error: Forbidden for url: https://api.github.com/repos/systemd/systemd/pulls/7184",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 1.0  \n\nThe changes address a known security vulnerability (CVE-2017-15908) by fixing an infinite loop issue in DNS packet processing, which could lead to a denial of service. All evidence aligns with a security fix."
}