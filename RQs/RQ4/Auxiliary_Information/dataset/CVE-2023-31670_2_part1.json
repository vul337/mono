{
  "cve_id": "CVE-2023-31670",
  "cwe_ids": [
    "CWE-Other"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
  "cvss_is_v3": true,
  "repo_name": "WebAssembly/wabt",
  "commit_msg": "BinaryReader/BinaryReaderIR: add safety checks for missing end markers",
  "commit_hash": "1b3105a132b925a1d300c2f03b3cd213875ffca8",
  "git_url": "https://github.com/WebAssembly/wabt/commit/1b3105a132b925a1d300c2f03b3cd213875ffca8",
  "file_path": "src/binary-reader-ir.cc",
  "func_name": "BinaryReaderIR::TopLabelExpr",
  "func_before": "Result BinaryReaderIR::TopLabelExpr(LabelNode** label, Expr** expr) {\n  CHECK_RESULT(TopLabel(label));\n  LabelNode* parent_label;\n  CHECK_RESULT(GetLabelAt(&parent_label, 1));\n  *expr = &parent_label->exprs->back();\n  return Result::Ok;\n}",
  "abstract_func_before": "Result BinaryReaderIR::TopLabelExpr(LabelNode** VAR_0, Expr** VAR_1) {\n  CHECK_RESULT(TopLabel(VAR_0));\n  LabelNode* VAR_2;\n  CHECK_RESULT(GetLabelAt(&VAR_2, 1));\n  *VAR_1 = &VAR_2->exprs->back();\n  return Result::Ok;\n}",
  "func_graph_path_before": "WebAssembly/wabt/1b3105a132b925a1d300c2f03b3cd213875ffca8/binary-reader-ir.cc/vul/before/2.json",
  "func": "Result BinaryReaderIR::TopLabelExpr(LabelNode** label, Expr** expr) {\n  CHECK_RESULT(TopLabel(label));\n  LabelNode* parent_label;\n  CHECK_RESULT(GetLabelAt(&parent_label, 1));\n  if (parent_label->exprs->empty()) {\n    PrintError(\"TopLabelExpr: parent label has empty expr list\");\n    return Result::Error;\n  }\n  *expr = &parent_label->exprs->back();\n  return Result::Ok;\n}",
  "abstract_func": "Result BinaryReaderIR::TopLabelExpr(LabelNode** VAR_0, Expr** VAR_1) {\n  CHECK_RESULT(TopLabel(VAR_0));\n  LabelNode* VAR_2;\n  CHECK_RESULT(GetLabelAt(&VAR_2, 1));\n  if (VAR_2->exprs->empty()) {\n    PrintError(\"TopLabelExpr: parent label has empty expr list\");\n    return Result::Error;\n  }\n  *VAR_1 = &VAR_2->exprs->back();\n  return Result::Ok;\n}",
  "func_graph_path": "WebAssembly/wabt/1b3105a132b925a1d300c2f03b3cd213875ffca8/binary-reader-ir.cc/vul/after/2.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -2,6 +2,10 @@\n   CHECK_RESULT(TopLabel(label));\n   LabelNode* parent_label;\n   CHECK_RESULT(GetLabelAt(&parent_label, 1));\n+  if (parent_label->exprs->empty()) {\n+    PrintError(\"TopLabelExpr: parent label has empty expr list\");\n+    return Result::Error;\n+  }\n   *expr = &parent_label->exprs->back();\n   return Result::Ok;\n }",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "  if (parent_label->exprs->empty()) {",
      "    PrintError(\"TopLabelExpr: parent label has empty expr list\");",
      "    return Result::Error;",
      "  }"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/WebAssembly/wabt/pull/2218",
  "description": {
    "pr_info": {
      "title": "BinaryReader/BinaryReaderIR: add safety checks for missing end markers in init expressions",
      "number": 2218
    },
    "comment": [
      "Fixes #2199. (Possibly related to #1771)\r\n\r\nThis adds some safety checks in BinaryReader & BinaryReaderIR to prevent crashing on some \"missing end marker\" situations.\r\n\r\n1. Add a check in BinaryReader that init expressions end with an \"end\" opcode (matching the pre-existing check for function bodies).\r\n2. Add checks in BinaryReaderIR that the label stack is empty at the end of an init expression or function body. (This isn't enforced in validation or typechecking because the end markers don't make it into the IR.)\r\n3. The test (regress/bad-missing-end.txt) triggers the same assertion failure as #2199 before applying this PR."
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.8,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 0.8"
}