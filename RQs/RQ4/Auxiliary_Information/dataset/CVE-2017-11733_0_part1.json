{
  "cve_id": "CVE-2017-11733",
  "cwe_ids": [
    "CWE-476"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "libming",
  "commit_msg": "Fix readSInt16, readUInt16 and readSInt32 methods\n\n* Rewrite readSInt16, readUInt16 and readSInt32.\n\n    Avoid calling all read{U,S}Int8(f) in one line, order of\n    evaluation is not guaranteed in the C standard (undefined\n    behavior).\n\n* Change return type of readUInt16 from int to unsigned int.\n\n* Rewrite readUInt32.\n\n    Use |= operator instead of adding four separate integers. Less\n    memory usage, better readable.",
  "commit_hash": "d468907a46a7ca42a78b0ac6f221172905be2fd6",
  "git_url": "https://github.com/libming/libming/commit/d468907a46a7ca42a78b0ac6f221172905be2fd6",
  "file_path": "util/read.c",
  "func_name": "readSInt32",
  "func_before": "long readSInt32(FILE *f)\n{\n  return (long)readUInt8(f) + (readUInt8(f)<<8) + (readUInt8(f)<<16) + (readUInt8(f)<<24);\n}",
  "abstract_func_before": "long readSInt32(FILE *VAR_0)\n{\n  return (long)readUInt8(VAR_0) + (readUInt8(VAR_0)<<8) + (readUInt8(VAR_0)<<16) + (readUInt8(VAR_0)<<24);\n}",
  "func_graph_path_before": "libming/d468907a46a7ca42a78b0ac6f221172905be2fd6/read.c/vul/before/1.json",
  "func": "long readSInt32(FILE *f)\n{\n  long result = 0;\n  result |= readUInt8(f);\n  result |= readUInt8(f) << 8;\n  result |= readUInt8(f) << 16;\n  result |= readUInt8(f) << 24;\n  return result;\n}",
  "abstract_func": "long readSInt32(FILE *VAR_0)\n{\n  long VAR_1 = 0;\n  VAR_1 |= readUInt8(VAR_0);\n  VAR_1 |= readUInt8(VAR_0) << 8;\n  VAR_1 |= readUInt8(VAR_0) << 16;\n  VAR_1 |= readUInt8(VAR_0) << 24;\n  return VAR_1;\n}",
  "func_graph_path": "libming/d468907a46a7ca42a78b0ac6f221172905be2fd6/read.c/vul/after/1.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,4 +1,9 @@\n long readSInt32(FILE *f)\n {\n-  return (long)readUInt8(f) + (readUInt8(f)<<8) + (readUInt8(f)<<16) + (readUInt8(f)<<24);\n+  long result = 0;\n+  result |= readUInt8(f);\n+  result |= readUInt8(f) << 8;\n+  result |= readUInt8(f) << 16;\n+  result |= readUInt8(f) << 24;\n+  return result;\n }",
  "diff_line_info": {
    "deleted_lines": [
      "  return (long)readUInt8(f) + (readUInt8(f)<<8) + (readUInt8(f)<<16) + (readUInt8(f)<<24);"
    ],
    "added_lines": [
      "  long result = 0;",
      "  result |= readUInt8(f);",
      "  result |= readUInt8(f) << 8;",
      "  result |= readUInt8(f) << 16;",
      "  result |= readUInt8(f) << 24;",
      "  return result;"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/libming/libming/pull/93",
  "description": {
    "pr_info": {
      "title": "Fix various issues related to CVE-2017-11733.",
      "number": 93
    },
    "comment": [
      "Avoid processing stackswap when stack only contains one element. In this case, print a warning if debug mode is enabled, and return cleanly.\r\n\r\nThis PR fixes CVE-2017-11733 (fixes #78).\r\n\r\nPlease note:\r\n* This fix only addresses the null pointer dereference issue. See #78.\r\n* I'm going to update this PR in order to also address the memory leaks issue. I'd suggest to wait before merge.",
      "This PR now addresses various issues regarding `readSInt16`, `readUInt16` and `readSInt32`.\r\n\r\nThese issues haven't been reported as such, but I suspect them to be part of those still open.",
      "I also suggest to un-define `DEBUGSTACK`. You'll find more detailed explanations in the commit message.\r\n\r\nThese three commit are addressing three (more or less) separate issues. If you want, I can squash them into a single one, but I wouldn't recommend it.\r\n\r\nCVE-2017-11733 seems to be completely fixed now.",
      "Should that \"stackswap: can't swap\" warning really be protected by\nDEBUG ?\n\nAnyway, I merged it as-is, thank you!\n"
    ]
  },
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.6,
  "Bug Filter Response": "Final Classification: Defect Remediation & Feature Upgrades\nConfidence: 0.6"
}