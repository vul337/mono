{
  "cve_id": "CVE-2023-38407",
  "cwe_ids": [
    "CWE-Other"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
  "cvss_is_v3": true,
  "repo_name": "FRRouting/frr",
  "commit_msg": "bgpd: Fix use beyond end of stream of labeled unicast parsing\n\nFixes a couple crashes associated with attempting to read\nbeyond the end of the stream.\n\nReported-by: Iggy Frankovic <iggyfran@amazon.com>\nSigned-off-by: Donald Sharp <sharpd@nvidia.com>",
  "commit_hash": "7404a914b0cafe046703c8381903a80d3def8f8b",
  "git_url": "https://github.com/FRRouting/frr/commit/7404a914b0cafe046703c8381903a80d3def8f8b",
  "file_path": "bgpd/bgp_label.c",
  "func_name": "bgp_nlri_get_labels",
  "func_before": "static int bgp_nlri_get_labels(struct peer *peer, uint8_t *pnt, uint8_t plen,\n\t\t\t       mpls_label_t *label)\n{\n\tuint8_t *data = pnt;\n\tuint8_t *lim = pnt + plen;\n\tuint8_t llen = 0;\n\tuint8_t label_depth = 0;\n\n\tfor (; data < lim; data += BGP_LABEL_BYTES) {\n\t\tmemcpy(label, data, BGP_LABEL_BYTES);\n\t\tllen += BGP_LABEL_BYTES;\n\n\t\tbgp_set_valid_label(label);\n\t\tlabel_depth += 1;\n\n\t\tif (bgp_is_withdraw_label(label) || label_bos(label))\n\t\t\tbreak;\n\t}\n\n\t/* If we RX multiple labels we will end up keeping only the last\n\t * one. We do not yet support a label stack greater than 1. */\n\tif (label_depth > 1)\n\t\tzlog_info(\"%pBP rcvd UPDATE with label stack %d deep\", peer,\n\t\t\t  label_depth);\n\n\tif (!(bgp_is_withdraw_label(label) || label_bos(label)))\n\t\tflog_warn(\n\t\t\tEC_BGP_INVALID_LABEL_STACK,\n\t\t\t\"%pBP rcvd UPDATE with invalid label stack - no bottom of stack\",\n\t\t\tpeer);\n\n\treturn llen;\n}",
  "abstract_func_before": "static int bgp_nlri_get_labels(struct peer *peer, uint8_t *VAR_0, uint8_t VAR_1,\n\t\t\t       mpls_label_t *VAR_2)\n{\n\tuint8_t *VAR_3 = VAR_0;\n\tuint8_t *VAR_4 = VAR_0 + VAR_1;\n\tuint8_t VAR_5 = 0;\n\tuint8_t VAR_6 = 0;\n\n\tfor (; VAR_3 < VAR_4; VAR_3 += VAR_7) {\n\t\tmemcpy(VAR_2, VAR_3, VAR_7);\n\t\tVAR_5 += VAR_7;\n\n\t\tbgp_set_valid_label(VAR_2);\n\t\tVAR_6 += 1;\n\n\t\tif (bgp_is_withdraw_label(VAR_2) || label_bos(VAR_2))\n\t\t\tbreak;\n\t}\n\n\t/* COMMENT_0 */\n                                                               \n\tif (VAR_6 > 1)\n\t\tzlog_info(\"%pBP rcvd UPDATE with label stack %d deep\", peer,\n\t\t\t  VAR_6);\n\n\tif (!(bgp_is_withdraw_label(VAR_2) || label_bos(VAR_2)))\n\t\tflog_warn(\n\t\t\tVAR_8,\n\t\t\t\"%pBP rcvd UPDATE with invalid label stack - no bottom of stack\",\n\t\t\tpeer);\n\n\treturn VAR_5;\n}",
  "func_graph_path_before": "FRRouting/frr/7404a914b0cafe046703c8381903a80d3def8f8b/bgp_label.c/vul/before/1.json",
  "func": "static int bgp_nlri_get_labels(struct peer *peer, uint8_t *pnt, uint8_t plen,\n\t\t\t       mpls_label_t *label)\n{\n\tuint8_t *data = pnt;\n\tuint8_t *lim = pnt + plen;\n\tuint8_t llen = 0;\n\tuint8_t label_depth = 0;\n\n\tif (plen < BGP_LABEL_BYTES)\n\t\treturn 0;\n\n\tfor (; data < lim; data += BGP_LABEL_BYTES) {\n\t\tmemcpy(label, data, BGP_LABEL_BYTES);\n\t\tllen += BGP_LABEL_BYTES;\n\n\t\tbgp_set_valid_label(label);\n\t\tlabel_depth += 1;\n\n\t\tif (bgp_is_withdraw_label(label) || label_bos(label))\n\t\t\tbreak;\n\t}\n\n\t/* If we RX multiple labels we will end up keeping only the last\n\t * one. We do not yet support a label stack greater than 1. */\n\tif (label_depth > 1)\n\t\tzlog_info(\"%pBP rcvd UPDATE with label stack %d deep\", peer,\n\t\t\t  label_depth);\n\n\tif (!(bgp_is_withdraw_label(label) || label_bos(label)))\n\t\tflog_warn(\n\t\t\tEC_BGP_INVALID_LABEL_STACK,\n\t\t\t\"%pBP rcvd UPDATE with invalid label stack - no bottom of stack\",\n\t\t\tpeer);\n\n\treturn llen;\n}",
  "abstract_func": "static int bgp_nlri_get_labels(struct peer *peer, uint8_t *VAR_0, uint8_t VAR_1,\n\t\t\t       mpls_label_t *VAR_2)\n{\n\tuint8_t *VAR_3 = VAR_0;\n\tuint8_t *VAR_4 = VAR_0 + VAR_1;\n\tuint8_t VAR_5 = 0;\n\tuint8_t VAR_6 = 0;\n\n\tif (VAR_1 < VAR_7)\n\t\treturn 0;\n\n\tfor (; VAR_3 < VAR_4; VAR_3 += VAR_7) {\n\t\tmemcpy(VAR_2, VAR_3, VAR_7);\n\t\tVAR_5 += VAR_7;\n\n\t\tbgp_set_valid_label(VAR_2);\n\t\tVAR_6 += 1;\n\n\t\tif (bgp_is_withdraw_label(VAR_2) || label_bos(VAR_2))\n\t\t\tbreak;\n\t}\n\n\t/* COMMENT_0 */\n                                                               \n\tif (VAR_6 > 1)\n\t\tzlog_info(\"%pBP rcvd UPDATE with label stack %d deep\", peer,\n\t\t\t  VAR_6);\n\n\tif (!(bgp_is_withdraw_label(VAR_2) || label_bos(VAR_2)))\n\t\tflog_warn(\n\t\t\tVAR_8,\n\t\t\t\"%pBP rcvd UPDATE with invalid label stack - no bottom of stack\",\n\t\t\tpeer);\n\n\treturn VAR_5;\n}",
  "func_graph_path": "FRRouting/frr/7404a914b0cafe046703c8381903a80d3def8f8b/bgp_label.c/vul/after/1.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -5,6 +5,9 @@\n \tuint8_t *lim = pnt + plen;\n \tuint8_t llen = 0;\n \tuint8_t label_depth = 0;\n+\n+\tif (plen < BGP_LABEL_BYTES)\n+\t\treturn 0;\n \n \tfor (; data < lim; data += BGP_LABEL_BYTES) {\n \t\tmemcpy(label, data, BGP_LABEL_BYTES);",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "",
      "\tif (plen < BGP_LABEL_BYTES)",
      "\t\treturn 0;"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/FRRouting/frr/pull/12951",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/FRRouting/frr/pull/12951: 403 Client Error: Forbidden for url: https://api.github.com/repos/FRRouting/frr/pulls/12951",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.9"
}