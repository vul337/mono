{
  "cve_id": "CVE-2020-15350",
  "cwe_ids": [
    "CWE-119",
    "CWE-131"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "RIOT-OS/RIOT",
  "commit_msg": "sys/base64: Use void pointer for buffers in API\n\nThis is a non-breaking change, as `unsigned char *` can implicitly be converted\nto `void *`.",
  "commit_hash": "3c7fd0cdc93c1a1be1ccdc394b5bd8d8aef7a303",
  "git_url": "https://github.com/RIOT-OS/RIOT/commit/3c7fd0cdc93c1a1be1ccdc394b5bd8d8aef7a303",
  "file_path": "sys/base64/base64.c",
  "func_name": "getcode",
  "func_before": "static int getcode(char symbol)\n{\n    if (symbol == '/') {\n        return BASE64_SLASH;\n    }\n\n    if (symbol == '_') {\n        return BASE64_UNDERLINE;\n    }\n\n    if (symbol == '+') {\n        return BASE64_PLUS;\n    }\n\n    if (symbol == '-') {\n        return BASE64_MINUS;\n    }\n\n    if (symbol == '=') {\n        /* indicates a padded base64 end */\n        return BASE64_EQUALS;\n    }\n\n    if (symbol < '0') {\n        /* indicates that the given symbol is not base64 and should be ignored */\n        return BASE64_NOT_DEFINED;\n    }\n\n    if (symbol <= '9' && symbol >= '0') {\n        return (symbol + (BASE64_NUMBER_UPPER_BOUND - '9'));\n    }\n\n    if (symbol <= 'Z' && symbol >= 'A') {\n        return (symbol - 'A');\n    }\n\n    if (symbol <= 'z' && symbol >= 'a') {\n        return (symbol + (BASE64_SMALL_UPPER_BOUND - 'z'));\n    }\n\n    /* indicates that the given symbol is not base64 and should be ignored */\n    return BASE64_NOT_DEFINED;\n}",
  "abstract_func_before": "static int getcode(char VAR_0)\n{\n    if (VAR_0 == '/') {\n        return VAR_1;\n    }\n\n    if (VAR_0 == '_') {\n        return VAR_2;\n    }\n\n    if (VAR_0 == '+') {\n        return VAR_3;\n    }\n\n    if (VAR_0 == '-') {\n        return VAR_4;\n    }\n\n    if (VAR_0 == '=') {\n        /* COMMENT_0 */\n        return VAR_5;\n    }\n\n    if (VAR_0 < '0') {\n        /* COMMENT_1 */\n        return VAR_6;\n    }\n\n    if (VAR_0 <= '9' && VAR_0 >= '0') {\n        return (VAR_0 + (VAR_7 - '9'));\n    }\n\n    if (VAR_0 <= 'Z' && VAR_0 >= 'A') {\n        return (VAR_0 - 'A');\n    }\n\n    if (VAR_0 <= 'z' && VAR_0 >= 'a') {\n        return (VAR_0 + (VAR_8 - 'z'));\n    }\n\n    /* COMMENT_1 */\n    return VAR_6;\n}",
  "func_graph_path_before": "RIOT-OS/RIOT/3c7fd0cdc93c1a1be1ccdc394b5bd8d8aef7a303/base64.c/vul/before/3.json",
  "func": "static uint8_t getcode(char symbol)\n{\n    if (symbol == '/') {\n        return BASE64_SLASH;\n    }\n\n    if (symbol == '_') {\n        return BASE64_UNDERLINE;\n    }\n\n    if (symbol == '+') {\n        return BASE64_PLUS;\n    }\n\n    if (symbol == '-') {\n        return BASE64_MINUS;\n    }\n\n    if (symbol == '=') {\n        /* indicates a padded base64 end */\n        return BASE64_EQUALS;\n    }\n\n    if (symbol < '0') {\n        /* indicates that the given symbol is not base64 and should be ignored */\n        return BASE64_NOT_DEFINED;\n    }\n\n    if (symbol <= '9' && symbol >= '0') {\n        return (symbol + (BASE64_NUMBER_UPPER_BOUND - '9'));\n    }\n\n    if (symbol <= 'Z' && symbol >= 'A') {\n        return (symbol - 'A');\n    }\n\n    if (symbol <= 'z' && symbol >= 'a') {\n        return (symbol + (BASE64_SMALL_UPPER_BOUND - 'z'));\n    }\n\n    /* indicates that the given symbol is not base64 and should be ignored */\n    return BASE64_NOT_DEFINED;\n}",
  "abstract_func": "static uint8_t getcode(char VAR_0)\n{\n    if (VAR_0 == '/') {\n        return VAR_1;\n    }\n\n    if (VAR_0 == '_') {\n        return VAR_2;\n    }\n\n    if (VAR_0 == '+') {\n        return VAR_3;\n    }\n\n    if (VAR_0 == '-') {\n        return VAR_4;\n    }\n\n    if (VAR_0 == '=') {\n        /* COMMENT_0 */\n        return VAR_5;\n    }\n\n    if (VAR_0 < '0') {\n        /* COMMENT_1 */\n        return VAR_6;\n    }\n\n    if (VAR_0 <= '9' && VAR_0 >= '0') {\n        return (VAR_0 + (VAR_7 - '9'));\n    }\n\n    if (VAR_0 <= 'Z' && VAR_0 >= 'A') {\n        return (VAR_0 - 'A');\n    }\n\n    if (VAR_0 <= 'z' && VAR_0 >= 'a') {\n        return (VAR_0 + (VAR_8 - 'z'));\n    }\n\n    /* COMMENT_1 */\n    return VAR_6;\n}",
  "func_graph_path": "RIOT-OS/RIOT/3c7fd0cdc93c1a1be1ccdc394b5bd8d8aef7a303/base64.c/vul/after/3.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,4 +1,4 @@\n-static int getcode(char symbol)\n+static uint8_t getcode(char symbol)\n {\n     if (symbol == '/') {\n         return BASE64_SLASH;",
  "diff_line_info": {
    "deleted_lines": [
      "static int getcode(char symbol)"
    ],
    "added_lines": [
      "static uint8_t getcode(char symbol)"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/RIOT-OS/RIOT/pull/14400",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/RIOT-OS/RIOT/pull/14400: 403 Client Error: Forbidden for url: https://api.github.com/repos/RIOT-OS/RIOT/pulls/14400",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.9"
}