{
  "cve_id": "CVE-2021-32792",
  "cwe_ids": [
    "CWE-79"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:N/I:P/A:N",
  "cvss_is_v3": false,
  "repo_name": "OpenIDC/mod_auth_openidc",
  "commit_msg": "Add a function to escape Javascript characters",
  "commit_hash": "55ea0a085290cd2c8cdfdd960a230cbc38ba8b56",
  "git_url": "https://github.com/OpenIDC/mod_auth_openidc/commit/55ea0a085290cd2c8cdfdd960a230cbc38ba8b56",
  "file_path": "src/mod_auth_openidc.c",
  "func_name": "oidc_post_preserve_javascript",
  "func_before": "apr_byte_t oidc_post_preserve_javascript(request_rec *r, const char *location,\n\t\tchar **javascript, char **javascript_method) {\n\n\tif (oidc_cfg_dir_preserve_post(r) == 0)\n\t\treturn FALSE;\n\n\toidc_debug(r, \"enter\");\n\n\toidc_cfg *cfg = ap_get_module_config(r->server->module_config,\n\t\t\t&auth_openidc_module);\n\n\tconst char *method = oidc_original_request_method(r, cfg, FALSE);\n\n\tif (apr_strnatcmp(method, OIDC_METHOD_FORM_POST) != 0)\n\t\treturn FALSE;\n\n\t/* read the parameters that are POST-ed to us */\n\tapr_table_t *params = apr_table_make(r->pool, 8);\n\tif (oidc_util_read_post_params(r, params, FALSE, NULL) == FALSE) {\n\t\toidc_error(r, \"something went wrong when reading the POST parameters\");\n\t\treturn FALSE;\n\t}\n\n\tconst apr_array_header_t *arr = apr_table_elts(params);\n\tconst apr_table_entry_t *elts = (const apr_table_entry_t*) arr->elts;\n\tint i;\n\tchar *json = \"\";\n\tfor (i = 0; i < arr->nelts; i++) {\n\t\tjson = apr_psprintf(r->pool, \"%s'%s': '%s'%s\", json,\n\t\t\t\toidc_util_escape_string(r, elts[i].key),\n\t\t\t\toidc_util_escape_string(r, elts[i].val),\n\t\t\t\ti < arr->nelts - 1 ? \",\" : \"\");\n\t}\n\tjson = apr_psprintf(r->pool, \"{ %s }\", json);\n\n\tconst char *jmethod = \"preserveOnLoad\";\n\tconst char *jscript =\n\t\t\tapr_psprintf(r->pool,\n\t\t\t\t\t\"    <script type=\\\"text/javascript\\\">\\n\"\n\t\t\t\t\t\"      function %s() {\\n\"\n\t\t\t\t\t\"        sessionStorage.setItem('mod_auth_openidc_preserve_post_params', JSON.stringify(%s));\\n\"\n\t\t\t\t\t\"        %s\"\n\t\t\t\t\t\"      }\\n\"\n\t\t\t\t\t\"    </script>\\n\", jmethod, json,\n\t\t\t\t\tlocation ?\n\t\t\t\t\t\t\tapr_psprintf(r->pool, \"window.location='%s';\\n\",\n\t\t\t\t\t\t\t\t\tlocation) :\n\t\t\t\t\t\t\t\t\t\"\");\n\tif (location == NULL) {\n\t\tif (javascript_method)\n\t\t\t*javascript_method = apr_pstrdup(r->pool, jmethod);\n\t\tif (javascript)\n\t\t\t*javascript = apr_pstrdup(r->pool, jscript);\n\t} else {\n\t\toidc_util_html_send(r, \"Preserving...\", jscript, jmethod,\n\t\t\t\t\"<p>Preserving...</p>\", OK);\n\t}\n\n\treturn TRUE;\n}",
  "abstract_func_before": "apr_byte_t oidc_post_preserve_javascript(request_rec *VAR_0, const char *VAR_1,\n\t\tchar **VAR_2, char **VAR_3) {\n\n\tif (oidc_cfg_dir_preserve_post(VAR_0) == 0)\n\t\treturn FALSE;\n\n\toidc_debug(VAR_0, \"enter\");\n\n\toidc_cfg *VAR_4 = ap_get_module_config(VAR_0->server->module_config,\n\t\t\t&VAR_5);\n\n\tconst char *VAR_6 = oidc_original_request_method(VAR_0, VAR_4, FALSE);\n\n\tif (apr_strnatcmp(VAR_6, VAR_7) != 0)\n\t\treturn FALSE;\n\n\t/* COMMENT_0 */\n\tapr_table_t *VAR_8 = apr_table_make(VAR_0->pool, 8);\n\tif (oidc_util_read_post_params(VAR_0, VAR_8, FALSE, NULL) == FALSE) {\n\t\toidc_error(VAR_0, \"something went wrong when reading the POST parameters\");\n\t\treturn FALSE;\n\t}\n\n\tconst apr_array_header_t *VAR_9 = apr_table_elts(VAR_8);\n\tconst apr_table_entry_t *VAR_10 = (const apr_table_entry_t*) VAR_9->elts;\n\tint VAR_11;\n\tchar *VAR_12 = \"\";\n\tfor (VAR_11 = 0; VAR_11 < VAR_9->nelts; VAR_11++) {\n\t\tVAR_12 = apr_psprintf(VAR_0->pool, \"%s'%s': '%s'%s\", VAR_12,\n\t\t\t\toidc_util_escape_string(VAR_0, VAR_10[VAR_11].key),\n\t\t\t\toidc_util_escape_string(VAR_0, VAR_10[VAR_11].val),\n\t\t\t\tVAR_11 < VAR_9->nelts - 1 ? \",\" : \"\");\n\t}\n\tVAR_12 = apr_psprintf(VAR_0->pool, \"{ %s }\", VAR_12);\n\n\tconst char *VAR_13 = \"preserveOnLoad\";\n\tconst char *VAR_14 =\n\t\t\tapr_psprintf(VAR_0->pool,\n\t\t\t\t\t\"    <script type=\\\"text/javascript\\\">\\n\"\n\t\t\t\t\t\"      function %s() {\\n\"\n\t\t\t\t\t\"        sessionStorage.setItem('mod_auth_openidc_preserve_post_params', JSON.stringify(%s));\\n\"\n\t\t\t\t\t\"        %s\"\n\t\t\t\t\t\"      }\\n\"\n\t\t\t\t\t\"    </script>\\n\", VAR_13, VAR_12,\n\t\t\t\t\tVAR_1 ?\n\t\t\t\t\t\t\tapr_psprintf(VAR_0->pool, \"window.location='%s';\\n\",\n\t\t\t\t\t\t\t\t\tVAR_1) :\n\t\t\t\t\t\t\t\t\t\"\");\n\tif (VAR_1 == NULL) {\n\t\tif (VAR_3)\n\t\t\t*VAR_3 = apr_pstrdup(VAR_0->pool, VAR_13);\n\t\tif (VAR_2)\n\t\t\t*VAR_2 = apr_pstrdup(VAR_0->pool, VAR_14);\n\t} else {\n\t\toidc_util_html_send(VAR_0, \"Preserving...\", VAR_14, VAR_13,\n\t\t\t\t\"<p>Preserving...</p>\", VAR_15);\n\t}\n\n\treturn TRUE;\n}",
  "func_graph_path_before": "OpenIDC/mod_auth_openidc/55ea0a085290cd2c8cdfdd960a230cbc38ba8b56/mod_auth_openidc.c/vul/before/0.json",
  "func": "apr_byte_t oidc_post_preserve_javascript(request_rec *r, const char *location,\n\t\tchar **javascript, char **javascript_method) {\n\n\tif (oidc_cfg_dir_preserve_post(r) == 0)\n\t\treturn FALSE;\n\n\toidc_debug(r, \"enter\");\n\n\toidc_cfg *cfg = ap_get_module_config(r->server->module_config,\n\t\t\t&auth_openidc_module);\n\n\tconst char *method = oidc_original_request_method(r, cfg, FALSE);\n\n\tif (apr_strnatcmp(method, OIDC_METHOD_FORM_POST) != 0)\n\t\treturn FALSE;\n\n\t/* read the parameters that are POST-ed to us */\n\tapr_table_t *params = apr_table_make(r->pool, 8);\n\tif (oidc_util_read_post_params(r, params, FALSE, NULL) == FALSE) {\n\t\toidc_error(r, \"something went wrong when reading the POST parameters\");\n\t\treturn FALSE;\n\t}\n\n\tconst apr_array_header_t *arr = apr_table_elts(params);\n\tconst apr_table_entry_t *elts = (const apr_table_entry_t*) arr->elts;\n\tint i;\n\tchar *json = \"\";\n\tfor (i = 0; i < arr->nelts; i++) {\n\t\tjson = apr_psprintf(r->pool, \"%s'%s': '%s'%s\", json,\n\t\t\t\toidc_util_escape_string(r, elts[i].key),\n\t\t\t\toidc_util_escape_string(r, elts[i].val),\n\t\t\t\ti < arr->nelts - 1 ? \",\" : \"\");\n\t}\n\tjson = apr_psprintf(r->pool, \"{ %s }\", json);\n\n\tconst char *jmethod = \"preserveOnLoad\";\n\tconst char *jscript =\n\t\t\tapr_psprintf(r->pool,\n\t\t\t\t\t\"    <script type=\\\"text/javascript\\\">\\n\"\n\t\t\t\t\t\"      function %s() {\\n\"\n\t\t\t\t\t\"        sessionStorage.setItem('mod_auth_openidc_preserve_post_params', JSON.stringify(%s));\\n\"\n\t\t\t\t\t\"        %s\"\n\t\t\t\t\t\"      }\\n\"\n\t\t\t\t\t\"    </script>\\n\", jmethod, json,\n\t\t\t\t\tlocation ?\n\t\t\t\t\t\t\tapr_psprintf(r->pool, \"window.location='%s';\\n\",\n\t\t\t\t\t\t\t\t\toidc_util_javascript_escape(r->pool, location)) :\n\t\t\t\t\t\t\t\t\t\"\");\n\tif (location == NULL) {\n\t\tif (javascript_method)\n\t\t\t*javascript_method = apr_pstrdup(r->pool, jmethod);\n\t\tif (javascript)\n\t\t\t*javascript = apr_pstrdup(r->pool, jscript);\n\t} else {\n\t\toidc_util_html_send(r, \"Preserving...\", jscript, jmethod,\n\t\t\t\t\"<p>Preserving...</p>\", OK);\n\t}\n\n\treturn TRUE;\n}",
  "abstract_func": "apr_byte_t oidc_post_preserve_javascript(request_rec *VAR_0, const char *VAR_1,\n\t\tchar **VAR_2, char **VAR_3) {\n\n\tif (oidc_cfg_dir_preserve_post(VAR_0) == 0)\n\t\treturn FALSE;\n\n\toidc_debug(VAR_0, \"enter\");\n\n\toidc_cfg *VAR_4 = ap_get_module_config(VAR_0->server->module_config,\n\t\t\t&VAR_5);\n\n\tconst char *VAR_6 = oidc_original_request_method(VAR_0, VAR_4, FALSE);\n\n\tif (apr_strnatcmp(VAR_6, VAR_7) != 0)\n\t\treturn FALSE;\n\n\t/* COMMENT_0 */\n\tapr_table_t *VAR_8 = apr_table_make(VAR_0->pool, 8);\n\tif (oidc_util_read_post_params(VAR_0, VAR_8, FALSE, NULL) == FALSE) {\n\t\toidc_error(VAR_0, \"something went wrong when reading the POST parameters\");\n\t\treturn FALSE;\n\t}\n\n\tconst apr_array_header_t *VAR_9 = apr_table_elts(VAR_8);\n\tconst apr_table_entry_t *VAR_10 = (const apr_table_entry_t*) VAR_9->elts;\n\tint VAR_11;\n\tchar *VAR_12 = \"\";\n\tfor (VAR_11 = 0; VAR_11 < VAR_9->nelts; VAR_11++) {\n\t\tVAR_12 = apr_psprintf(VAR_0->pool, \"%s'%s': '%s'%s\", VAR_12,\n\t\t\t\toidc_util_escape_string(VAR_0, VAR_10[VAR_11].key),\n\t\t\t\toidc_util_escape_string(VAR_0, VAR_10[VAR_11].val),\n\t\t\t\tVAR_11 < VAR_9->nelts - 1 ? \",\" : \"\");\n\t}\n\tVAR_12 = apr_psprintf(VAR_0->pool, \"{ %s }\", VAR_12);\n\n\tconst char *VAR_13 = \"preserveOnLoad\";\n\tconst char *VAR_14 =\n\t\t\tapr_psprintf(VAR_0->pool,\n\t\t\t\t\t\"    <script type=\\\"text/javascript\\\">\\n\"\n\t\t\t\t\t\"      function %s() {\\n\"\n\t\t\t\t\t\"        sessionStorage.setItem('mod_auth_openidc_preserve_post_params', JSON.stringify(%s));\\n\"\n\t\t\t\t\t\"        %s\"\n\t\t\t\t\t\"      }\\n\"\n\t\t\t\t\t\"    </script>\\n\", VAR_13, VAR_12,\n\t\t\t\t\tVAR_1 ?\n\t\t\t\t\t\t\tapr_psprintf(VAR_0->pool, \"window.location='%s';\\n\",\n\t\t\t\t\t\t\t\t\toidc_util_javascript_escape(VAR_0->pool, VAR_1)) :\n\t\t\t\t\t\t\t\t\t\"\");\n\tif (VAR_1 == NULL) {\n\t\tif (VAR_3)\n\t\t\t*VAR_3 = apr_pstrdup(VAR_0->pool, VAR_13);\n\t\tif (VAR_2)\n\t\t\t*VAR_2 = apr_pstrdup(VAR_0->pool, VAR_14);\n\t} else {\n\t\toidc_util_html_send(VAR_0, \"Preserving...\", VAR_14, VAR_13,\n\t\t\t\t\"<p>Preserving...</p>\", VAR_15);\n\t}\n\n\treturn TRUE;\n}",
  "func_graph_path": "OpenIDC/mod_auth_openidc/55ea0a085290cd2c8cdfdd960a230cbc38ba8b56/mod_auth_openidc.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -44,7 +44,7 @@\n \t\t\t\t\t\"    </script>\\n\", jmethod, json,\n \t\t\t\t\tlocation ?\n \t\t\t\t\t\t\tapr_psprintf(r->pool, \"window.location='%s';\\n\",\n-\t\t\t\t\t\t\t\t\tlocation) :\n+\t\t\t\t\t\t\t\t\toidc_util_javascript_escape(r->pool, location)) :\n \t\t\t\t\t\t\t\t\t\"\");\n \tif (location == NULL) {\n \t\tif (javascript_method)",
  "diff_line_info": {
    "deleted_lines": [
      "\t\t\t\t\t\t\t\t\tlocation) :"
    ],
    "added_lines": [
      "\t\t\t\t\t\t\t\t\toidc_util_javascript_escape(r->pool, location)) :"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/OpenIDC/mod_auth_openidc/pull/614",
  "description": {
    "pr_info": {
      "title": "Add a function to escape Javascript characters",
      "number": 614
    },
    "comment": [
      "Add a function to escape javascript strings in the HTML generated by mod_auth_openidc"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 1.0"
}