{
  "cve_id": "CVE-2022-25310",
  "cwe_ids": [
    "CWE-476"
  ],
  "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H",
  "cvss_is_v3": true,
  "repo_name": "fribidi",
  "commit_msg": "Fix SEGV issue in fribidi_remove_bidi_marks\n\nEscape from fribidi_remove_bidi_marks() immediately if str is null.\n\nThis fixes https://github.com/fribidi/fribidi/issues/183",
  "commit_hash": "175850b03e1af251d705c1d04b2b9b3c1c06e48f",
  "git_url": "https://github.com/fribidi/fribidi/commit/175850b03e1af251d705c1d04b2b9b3c1c06e48f",
  "file_path": "lib/fribidi.c",
  "func_name": "fribidi_remove_bidi_marks",
  "func_before": "FRIBIDI_ENTRY FriBidiStrIndex\nfribidi_remove_bidi_marks (\n  FriBidiChar *str,\n  const FriBidiStrIndex len,\n  FriBidiStrIndex *positions_to_this,\n  FriBidiStrIndex *position_from_this_list,\n  FriBidiLevel *embedding_levels\n)\n{\n  register FriBidiStrIndex i, j = 0;\n  fribidi_boolean private_from_this = false;\n  fribidi_boolean status = false;\n\n  if UNLIKELY\n    (len == 0)\n    {\n      status = true;\n      goto out;\n    }\n\n  DBG (\"in fribidi_remove_bidi_marks\");\n\n  fribidi_assert (str);\n\n  /* If to_this is not NULL, we must have from_this as well. If it is\n     not given by the caller, we have to make a private instance of it. */\n  if (positions_to_this && !position_from_this_list)\n    {\n      position_from_this_list = fribidi_malloc (sizeof\n\t\t\t\t\t\t(position_from_this_list[0]) *\n\t\t\t\t\t\tlen);\n      if UNLIKELY\n\t(!position_from_this_list) goto out;\n      private_from_this = true;\n      for (i = 0; i < len; i++)\n\tposition_from_this_list[positions_to_this[i]] = i;\n    }\n\n  for (i = 0; i < len; i++)\n    if (!FRIBIDI_IS_EXPLICIT_OR_BN (fribidi_get_bidi_type (str[i]))\n        && !FRIBIDI_IS_ISOLATE (fribidi_get_bidi_type (str[i]))\n\t&& str[i] != FRIBIDI_CHAR_LRM && str[i] != FRIBIDI_CHAR_RLM)\n      {\n\tstr[j] = str[i];\n\tif (embedding_levels)\n\t  embedding_levels[j] = embedding_levels[i];\n\tif (position_from_this_list)\n\t  position_from_this_list[j] = position_from_this_list[i];\n\tj++;\n      }\n\n  /* Convert the from_this list to to_this */\n  if (positions_to_this)\n    {\n      for (i = 0; i < len; i++)\n\tpositions_to_this[i] = -1;\n      for (i = 0; i < len; i++)\n\tpositions_to_this[position_from_this_list[i]] = i;\n    }\n\n  status = true;\n\nout:\n\n  if (private_from_this)\n    fribidi_free (position_from_this_list);\n\n  return status ? j : -1;\n}",
  "abstract_func_before": "FRIBIDI_ENTRY VAR_0\nfribidi_remove_bidi_marks (\n  FriBidiChar *VAR_1,\n  const FriBidiStrIndex VAR_2,\n  FriBidiStrIndex *VAR_3,\n  FriBidiStrIndex *VAR_4,\n  FriBidiLevel *VAR_5\n)\n{\n  register FriBidiStrIndex VAR_6, VAR_7 = 0;\n  fribidi_boolean VAR_8 = false;\n  fribidi_boolean VAR_9 = false;\n\n  if VAR_10\n    (VAR_2 == 0)\n    {\n      VAR_9 = true;\n      goto out;\n    }\n\n  DBG (\"in fribidi_remove_bidi_marks\");\n\n  fribidi_assert (VAR_1);\n\n  /* COMMENT_0 */\n                                                                          \n  if (VAR_3 && !VAR_4)\n    {\n      VAR_4 = fribidi_malloc (sizeof\n\t\t\t\t\t\t(VAR_4[0]) *\n\t\t\t\t\t\tVAR_2);\n      if VAR_10\n\t(!VAR_4) goto out;\n      VAR_8 = true;\n      for (VAR_6 = 0; VAR_6 < VAR_2; VAR_6++)\n\tVAR_4[VAR_3[VAR_6]] = VAR_6;\n    }\n\n  for (VAR_6 = 0; VAR_6 < VAR_2; VAR_6++)\n    if (!FRIBIDI_IS_EXPLICIT_OR_BN (fribidi_get_bidi_type (VAR_1[VAR_6]))\n        && !FRIBIDI_IS_ISOLATE (fribidi_get_bidi_type (VAR_1[VAR_6]))\n\t&& VAR_1[VAR_6] != VAR_11 && VAR_1[VAR_6] != VAR_12)\n      {\n\tVAR_1[VAR_7] = VAR_1[VAR_6];\n\tif (VAR_5)\n\t  VAR_5[VAR_7] = VAR_5[VAR_6];\n\tif (VAR_4)\n\t  VAR_4[VAR_7] = VAR_4[VAR_6];\n\tVAR_7++;\n      }\n\n  /* COMMENT_2 */\n  if (VAR_3)\n    {\n      for (VAR_6 = 0; VAR_6 < VAR_2; VAR_6++)\n\tVAR_3[VAR_6] = -1;\n      for (VAR_6 = 0; VAR_6 < VAR_2; VAR_6++)\n\tVAR_3[VAR_4[VAR_6]] = VAR_6;\n    }\n\n  VAR_9 = true;\n\nout:\n\n  if (VAR_8)\n    fribidi_free (VAR_4);\n\n  return VAR_9 ? VAR_7 : -1;\n}",
  "func_graph_path_before": null,
  "func": "FRIBIDI_ENTRY FriBidiStrIndex\nfribidi_remove_bidi_marks (\n  FriBidiChar *str,\n  const FriBidiStrIndex len,\n  FriBidiStrIndex *positions_to_this,\n  FriBidiStrIndex *position_from_this_list,\n  FriBidiLevel *embedding_levels\n)\n{\n  register FriBidiStrIndex i, j = 0;\n  fribidi_boolean private_from_this = false;\n  fribidi_boolean status = false;\n\n  if UNLIKELY\n    (len == 0 || str == NULL)\n    {\n      status = true;\n      goto out;\n    }\n\n  DBG (\"in fribidi_remove_bidi_marks\");\n\n  fribidi_assert (str);\n\n  /* If to_this is not NULL, we must have from_this as well. If it is\n     not given by the caller, we have to make a private instance of it. */\n  if (positions_to_this && !position_from_this_list)\n    {\n      position_from_this_list = fribidi_malloc (sizeof\n\t\t\t\t\t\t(position_from_this_list[0]) *\n\t\t\t\t\t\tlen);\n      if UNLIKELY\n\t(!position_from_this_list) goto out;\n      private_from_this = true;\n      for (i = 0; i < len; i++)\n\tposition_from_this_list[positions_to_this[i]] = i;\n    }\n\n  for (i = 0; i < len; i++)\n    if (!FRIBIDI_IS_EXPLICIT_OR_BN (fribidi_get_bidi_type (str[i]))\n        && !FRIBIDI_IS_ISOLATE (fribidi_get_bidi_type (str[i]))\n\t&& str[i] != FRIBIDI_CHAR_LRM && str[i] != FRIBIDI_CHAR_RLM)\n      {\n\tstr[j] = str[i];\n\tif (embedding_levels)\n\t  embedding_levels[j] = embedding_levels[i];\n\tif (position_from_this_list)\n\t  position_from_this_list[j] = position_from_this_list[i];\n\tj++;\n      }\n\n  /* Convert the from_this list to to_this */\n  if (positions_to_this)\n    {\n      for (i = 0; i < len; i++)\n\tpositions_to_this[i] = -1;\n      for (i = 0; i < len; i++)\n\tpositions_to_this[position_from_this_list[i]] = i;\n    }\n\n  status = true;\n\nout:\n\n  if (private_from_this)\n    fribidi_free (position_from_this_list);\n\n  return status ? j : -1;\n}",
  "abstract_func": "FRIBIDI_ENTRY VAR_0\nfribidi_remove_bidi_marks (\n  FriBidiChar *VAR_1,\n  const FriBidiStrIndex VAR_2,\n  FriBidiStrIndex *VAR_3,\n  FriBidiStrIndex *VAR_4,\n  FriBidiLevel *VAR_5\n)\n{\n  register FriBidiStrIndex VAR_6, VAR_7 = 0;\n  fribidi_boolean VAR_8 = false;\n  fribidi_boolean VAR_9 = false;\n\n  if VAR_10\n    (VAR_2 == 0 || VAR_1 == NULL)\n    {\n      VAR_9 = true;\n      goto out;\n    }\n\n  DBG (\"in fribidi_remove_bidi_marks\");\n\n  fribidi_assert (VAR_1);\n\n  /* COMMENT_0 */\n                                                                          \n  if (VAR_3 && !VAR_4)\n    {\n      VAR_4 = fribidi_malloc (sizeof\n\t\t\t\t\t\t(VAR_4[0]) *\n\t\t\t\t\t\tVAR_2);\n      if VAR_10\n\t(!VAR_4) goto out;\n      VAR_8 = true;\n      for (VAR_6 = 0; VAR_6 < VAR_2; VAR_6++)\n\tVAR_4[VAR_3[VAR_6]] = VAR_6;\n    }\n\n  for (VAR_6 = 0; VAR_6 < VAR_2; VAR_6++)\n    if (!FRIBIDI_IS_EXPLICIT_OR_BN (fribidi_get_bidi_type (VAR_1[VAR_6]))\n        && !FRIBIDI_IS_ISOLATE (fribidi_get_bidi_type (VAR_1[VAR_6]))\n\t&& VAR_1[VAR_6] != VAR_11 && VAR_1[VAR_6] != VAR_12)\n      {\n\tVAR_1[VAR_7] = VAR_1[VAR_6];\n\tif (VAR_5)\n\t  VAR_5[VAR_7] = VAR_5[VAR_6];\n\tif (VAR_4)\n\t  VAR_4[VAR_7] = VAR_4[VAR_6];\n\tVAR_7++;\n      }\n\n  /* COMMENT_2 */\n  if (VAR_3)\n    {\n      for (VAR_6 = 0; VAR_6 < VAR_2; VAR_6++)\n\tVAR_3[VAR_6] = -1;\n      for (VAR_6 = 0; VAR_6 < VAR_2; VAR_6++)\n\tVAR_3[VAR_4[VAR_6]] = VAR_6;\n    }\n\n  VAR_9 = true;\n\nout:\n\n  if (VAR_8)\n    fribidi_free (VAR_4);\n\n  return VAR_9 ? VAR_7 : -1;\n}",
  "func_graph_path": null,
  "diff_func": "--- func_before\n+++ func_after\n@@ -12,7 +12,7 @@\n   fribidi_boolean status = false;\n \n   if UNLIKELY\n-    (len == 0)\n+    (len == 0 || str == NULL)\n     {\n       status = true;\n       goto out;",
  "diff_line_info": {
    "deleted_lines": [
      "    (len == 0)"
    ],
    "added_lines": [
      "    (len == 0 || str == NULL)"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/fribidi/fribidi/pull/186",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/fribidi/fribidi/pull/186: 403 Client Error: Forbidden for url: https://api.github.com/repos/fribidi/fribidi/pulls/186",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.8,
  "Bug Filter Response": "The patch addresses a potential segmentation fault by preventing a null pointer dereference, thus fixing a security vulnerability.\n\n**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.8"
}