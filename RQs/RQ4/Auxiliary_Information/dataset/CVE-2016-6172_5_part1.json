{
  "cve_id": "CVE-2016-6172",
  "cwe_ids": [
    "CWE-400"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:N/I:N/A:C",
  "cvss_is_v3": false,
  "repo_name": "PowerDNS/pdns",
  "commit_msg": "Add limits to the size of received {A,I}XFR, in megabytes\n\nThis prevents memory exhaustion in case the master is sending a\nvery large amount of data in an update.",
  "commit_hash": "db8f9152168acf5d548d4f256789eae783e01667",
  "git_url": "https://github.com/PowerDNS/pdns/commit/db8f9152168acf5d548d4f256789eae783e01667",
  "file_path": "pdns/reczones.cc",
  "func_name": "RPZIXFRTracker",
  "func_before": "void RPZIXFRTracker(const ComboAddress& master, const DNSName& zone, const std::string& polName, const TSIGTriplet& tt, shared_ptr<SOARecordContent> oursr)\n{\n  int refresh = oursr->d_st.refresh;\n  for(;;) {\n    DNSRecord dr;\n    dr.d_content=oursr;\n\n    sleep(refresh);\n    \n    L<<Logger::Info<<\"Getting IXFR deltas for \"<<zone<<\" from \"<<master.toStringWithPort()<<\", our serial: \"<<getRR<SOARecordContent>(dr)->d_st.serial<<endl;\n    vector<pair<vector<DNSRecord>, vector<DNSRecord> > > deltas;\n    try {\n      deltas = getIXFRDeltas(master, zone, dr, tt);\n    } catch(std::runtime_error& e ){\n      L<<Logger::Warning<<e.what()<<endl;\n      continue;\n    }\n    if(deltas.empty())\n      continue;\n    L<<Logger::Info<<\"Processing \"<<deltas.size()<<\" delta\"<<addS(deltas)<<\" for RPZ \"<<zone<<endl;\n\n    auto luaconfsCopy = g_luaconfs.getCopy();\n    int totremove=0, totadd=0;\n    for(const auto& delta : deltas) {\n      const auto& remove = delta.first;\n      const auto& add = delta.second;\n      if(remove.empty()) {\n        L<<Logger::Warning<<\"IXFR update is a whole new zone\"<<endl;\n        luaconfsCopy.dfe.clear(0);\n      }\n      for(const auto& rr : remove) { // should always contain the SOA\n\ttotremove++;\n\tif(rr.d_type == QType::SOA) {\n\t  auto oldsr = getRR<SOARecordContent>(rr);\n\t  if(oldsr && oldsr->d_st.serial == oursr->d_st.serial) {\n\t    //\t    cout<<\"Got good removal of SOA serial \"<<oldsr->d_st.serial<<endl;\n\t  }\n\t  else\n\t    L<<Logger::Error<<\"GOT WRONG SOA SERIAL REMOVAL, SHOULD TRIGGER WHOLE RELOAD\"<<endl;\n\t}\n\telse {\n\t  L<<Logger::Info<<\"Had removal of \"<<rr.d_name<<endl;\n\t  RPZRecordToPolicy(rr, luaconfsCopy.dfe, polName, false, boost::optional<DNSFilterEngine::Policy>(), 0);\n\t}\n      }\n\n      for(const auto& rr : add) { // should always contain the new SOA\n\ttotadd++;\n\tif(rr.d_type == QType::SOA) {\n\t  auto newsr = getRR<SOARecordContent>(rr);\n\t  //\t  L<<Logger::Info<<\"New SOA serial for \"<<zone<<\": \"<<newsr->d_st.serial<<endl;\n\t  if (newsr) {\n\t    oursr = newsr;\n\t  }\n\t}\n\telse {\n\t  L<<Logger::Info<<\"Had addition of \"<<rr.d_name<<endl;\n\t  RPZRecordToPolicy(rr, luaconfsCopy.dfe, polName, true, boost::optional<DNSFilterEngine::Policy>(), 0);\n\t}\n      }\n    }\n    L<<Logger::Info<<\"Had \"<<totremove<<\" RPZ removal\"<<addS(totremove)<<\", \"<<totadd<<\" addition\"<<addS(totadd)<<\" for \"<<zone<<\" New serial: \"<<oursr->d_st.serial<<endl;\n    g_luaconfs.setState(luaconfsCopy);\n  }\n}",
  "abstract_func_before": "void RPZIXFRTracker(const ComboAddress& VAR_0, const DNSName& VAR_1, const std::string& VAR_2, const TSIGTriplet& VAR_3, shared_ptr<SOARecordContent> VAR_4)\n{\n  int VAR_5 = VAR_4->d_st.refresh;\n  for(;;) {\n    DNSRecord VAR_6;\n    VAR_6.d_content=VAR_4;\n\n    sleep(VAR_5);\n    \n    VAR_7<<Logger::Info<<\"Getting IXFR deltas for \"<<VAR_1<<\" from \"<<VAR_0.toStringWithPort()<<\", our serial: \"<<VAR_8<SOARecordContent>(VAR_6)->d_st.serial<<VAR_9;\n    vector<pair<vector<DNSRecord>, vector<DNSRecord> > > VAR_10;\n    try {\n      VAR_10 = getIXFRDeltas(VAR_0, VAR_1, VAR_6, VAR_3);\n    } catch(std::runtime_error& VAR_11 ){\n      VAR_7<<Logger::Warning<<VAR_11.what()<<VAR_9;\n      continue;\n    }\n    if(VAR_10.empty())\n      continue;\n    VAR_7<<Logger::Info<<\"Processing \"<<VAR_10.size()<<\" delta\"<<addS(VAR_10)<<\" for RPZ \"<<VAR_1<<VAR_9;\n\n    auto VAR_12 = VAR_13.getCopy();\n    int VAR_14=0, VAR_15=0;\n    for(const auto& VAR_16 : VAR_10) {\n      const auto& VAR_17 = VAR_16.first;\n      const auto& VAR_18 = VAR_16.second;\n      if(VAR_17.empty()) {\n        VAR_7<<Logger::Warning<<\"IXFR update is a whole new zone\"<<VAR_9;\n        VAR_12.dfe.clear(0);\n      }\n      for(const auto& VAR_19 : VAR_17) { /* COMMENT_0 */\n\tVAR_14++;\n\tif(VAR_19.d_type == QType::SOA) {\n\t  auto VAR_20 = VAR_8<SOARecordContent>(VAR_19);\n\t  if(VAR_20 && VAR_20->d_st.serial == VAR_4->d_st.serial) {\n\t    /* COMMENT_1 */\n\t  }\n\t  else\n\t    VAR_7<<Logger::Error<<\"GOT WRONG SOA SERIAL REMOVAL, SHOULD TRIGGER WHOLE RELOAD\"<<VAR_9;\n\t}\n\telse {\n\t  VAR_7<<Logger::Info<<\"Had removal of \"<<VAR_19.d_name<<VAR_9;\n\t  RPZRecordToPolicy(VAR_19, VAR_12.dfe, VAR_2, false, boost::VAR_21<DNSFilterEngine::Policy>(), 0);\n\t}\n      }\n\n      for(const auto& VAR_19 : VAR_18) { /* COMMENT_2 */\n\tVAR_15++;\n\tif(VAR_19.d_type == QType::SOA) {\n\t  auto VAR_22 = VAR_8<SOARecordContent>(VAR_19);\n\t  /* COMMENT_3 */\n\t  if (VAR_22) {\n\t    VAR_4 = VAR_22;\n\t  }\n\t}\n\telse {\n\t  VAR_7<<Logger::Info<<\"Had addition of \"<<VAR_19.d_name<<VAR_9;\n\t  RPZRecordToPolicy(VAR_19, VAR_12.dfe, VAR_2, true, boost::VAR_21<DNSFilterEngine::Policy>(), 0);\n\t}\n      }\n    }\n    VAR_7<<Logger::Info<<\"Had \"<<VAR_14<<\" RPZ removal\"<<addS(VAR_14)<<\", \"<<VAR_15<<\" addition\"<<addS(VAR_15)<<\" for \"<<VAR_1<<\" New serial: \"<<VAR_4->d_st.serial<<VAR_9;\n    VAR_13.setState(VAR_12);\n  }\n}",
  "func_graph_path_before": "PowerDNS/pdns/db8f9152168acf5d548d4f256789eae783e01667/reczones.cc/vul/before/0.json",
  "func": "void RPZIXFRTracker(const ComboAddress& master, const DNSName& zone, const std::string& polName, const TSIGTriplet& tt, shared_ptr<SOARecordContent> oursr, size_t maxReceivedBytes)\n{\n  int refresh = oursr->d_st.refresh;\n  for(;;) {\n    DNSRecord dr;\n    dr.d_content=oursr;\n\n    sleep(refresh);\n    \n    L<<Logger::Info<<\"Getting IXFR deltas for \"<<zone<<\" from \"<<master.toStringWithPort()<<\", our serial: \"<<getRR<SOARecordContent>(dr)->d_st.serial<<endl;\n    vector<pair<vector<DNSRecord>, vector<DNSRecord> > > deltas;\n    try {\n      deltas = getIXFRDeltas(master, zone, dr, tt, nullptr, maxReceivedBytes);\n    } catch(std::runtime_error& e ){\n      L<<Logger::Warning<<e.what()<<endl;\n      continue;\n    }\n    if(deltas.empty())\n      continue;\n    L<<Logger::Info<<\"Processing \"<<deltas.size()<<\" delta\"<<addS(deltas)<<\" for RPZ \"<<zone<<endl;\n\n    auto luaconfsCopy = g_luaconfs.getCopy();\n    int totremove=0, totadd=0;\n    for(const auto& delta : deltas) {\n      const auto& remove = delta.first;\n      const auto& add = delta.second;\n      if(remove.empty()) {\n        L<<Logger::Warning<<\"IXFR update is a whole new zone\"<<endl;\n        luaconfsCopy.dfe.clear(0);\n      }\n      for(const auto& rr : remove) { // should always contain the SOA\n\ttotremove++;\n\tif(rr.d_type == QType::SOA) {\n\t  auto oldsr = getRR<SOARecordContent>(rr);\n\t  if(oldsr && oldsr->d_st.serial == oursr->d_st.serial) {\n\t    //\t    cout<<\"Got good removal of SOA serial \"<<oldsr->d_st.serial<<endl;\n\t  }\n\t  else\n\t    L<<Logger::Error<<\"GOT WRONG SOA SERIAL REMOVAL, SHOULD TRIGGER WHOLE RELOAD\"<<endl;\n\t}\n\telse {\n\t  L<<Logger::Info<<\"Had removal of \"<<rr.d_name<<endl;\n\t  RPZRecordToPolicy(rr, luaconfsCopy.dfe, polName, false, boost::optional<DNSFilterEngine::Policy>(), 0);\n\t}\n      }\n\n      for(const auto& rr : add) { // should always contain the new SOA\n\ttotadd++;\n\tif(rr.d_type == QType::SOA) {\n\t  auto newsr = getRR<SOARecordContent>(rr);\n\t  //\t  L<<Logger::Info<<\"New SOA serial for \"<<zone<<\": \"<<newsr->d_st.serial<<endl;\n\t  if (newsr) {\n\t    oursr = newsr;\n\t  }\n\t}\n\telse {\n\t  L<<Logger::Info<<\"Had addition of \"<<rr.d_name<<endl;\n\t  RPZRecordToPolicy(rr, luaconfsCopy.dfe, polName, true, boost::optional<DNSFilterEngine::Policy>(), 0);\n\t}\n      }\n    }\n    L<<Logger::Info<<\"Had \"<<totremove<<\" RPZ removal\"<<addS(totremove)<<\", \"<<totadd<<\" addition\"<<addS(totadd)<<\" for \"<<zone<<\" New serial: \"<<oursr->d_st.serial<<endl;\n    g_luaconfs.setState(luaconfsCopy);\n  }\n}",
  "abstract_func": "void RPZIXFRTracker(const ComboAddress& VAR_0, const DNSName& VAR_1, const std::string& VAR_2, const TSIGTriplet& VAR_3, shared_ptr<SOARecordContent> VAR_4, size_t VAR_5)\n{\n  int VAR_6 = VAR_4->d_st.refresh;\n  for(;;) {\n    DNSRecord VAR_7;\n    VAR_7.d_content=VAR_4;\n\n    sleep(VAR_6);\n    \n    VAR_8<<Logger::Info<<\"Getting IXFR deltas for \"<<VAR_1<<\" from \"<<VAR_0.toStringWithPort()<<\", our serial: \"<<VAR_9<SOARecordContent>(VAR_7)->d_st.serial<<VAR_10;\n    vector<pair<vector<DNSRecord>, vector<DNSRecord> > > VAR_11;\n    try {\n      VAR_11 = getIXFRDeltas(VAR_0, VAR_1, VAR_7, VAR_3, nullptr, VAR_5);\n    } catch(std::runtime_error& VAR_12 ){\n      VAR_8<<Logger::Warning<<VAR_12.what()<<VAR_10;\n      continue;\n    }\n    if(VAR_11.empty())\n      continue;\n    VAR_8<<Logger::Info<<\"Processing \"<<VAR_11.size()<<\" delta\"<<addS(VAR_11)<<\" for RPZ \"<<VAR_1<<VAR_10;\n\n    auto VAR_13 = VAR_14.getCopy();\n    int VAR_15=0, VAR_16=0;\n    for(const auto& VAR_17 : VAR_11) {\n      const auto& VAR_18 = VAR_17.first;\n      const auto& VAR_19 = VAR_17.second;\n      if(VAR_18.empty()) {\n        VAR_8<<Logger::Warning<<\"IXFR update is a whole new zone\"<<VAR_10;\n        VAR_13.dfe.clear(0);\n      }\n      for(const auto& VAR_20 : VAR_18) { /* COMMENT_0 */\n\tVAR_15++;\n\tif(VAR_20.d_type == QType::SOA) {\n\t  auto VAR_21 = VAR_9<SOARecordContent>(VAR_20);\n\t  if(VAR_21 && VAR_21->d_st.serial == VAR_4->d_st.serial) {\n\t    /* COMMENT_1 */\n\t  }\n\t  else\n\t    VAR_8<<Logger::Error<<\"GOT WRONG SOA SERIAL REMOVAL, SHOULD TRIGGER WHOLE RELOAD\"<<VAR_10;\n\t}\n\telse {\n\t  VAR_8<<Logger::Info<<\"Had removal of \"<<VAR_20.d_name<<VAR_10;\n\t  RPZRecordToPolicy(VAR_20, VAR_13.dfe, VAR_2, false, boost::VAR_22<DNSFilterEngine::Policy>(), 0);\n\t}\n      }\n\n      for(const auto& VAR_20 : VAR_19) { /* COMMENT_2 */\n\tVAR_16++;\n\tif(VAR_20.d_type == QType::SOA) {\n\t  auto VAR_23 = VAR_9<SOARecordContent>(VAR_20);\n\t  /* COMMENT_3 */\n\t  if (VAR_23) {\n\t    VAR_4 = VAR_23;\n\t  }\n\t}\n\telse {\n\t  VAR_8<<Logger::Info<<\"Had addition of \"<<VAR_20.d_name<<VAR_10;\n\t  RPZRecordToPolicy(VAR_20, VAR_13.dfe, VAR_2, true, boost::VAR_22<DNSFilterEngine::Policy>(), 0);\n\t}\n      }\n    }\n    VAR_8<<Logger::Info<<\"Had \"<<VAR_15<<\" RPZ removal\"<<addS(VAR_15)<<\", \"<<VAR_16<<\" addition\"<<addS(VAR_16)<<\" for \"<<VAR_1<<\" New serial: \"<<VAR_4->d_st.serial<<VAR_10;\n    VAR_14.setState(VAR_13);\n  }\n}",
  "func_graph_path": "PowerDNS/pdns/db8f9152168acf5d548d4f256789eae783e01667/reczones.cc/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,4 +1,4 @@\n-void RPZIXFRTracker(const ComboAddress& master, const DNSName& zone, const std::string& polName, const TSIGTriplet& tt, shared_ptr<SOARecordContent> oursr)\n+void RPZIXFRTracker(const ComboAddress& master, const DNSName& zone, const std::string& polName, const TSIGTriplet& tt, shared_ptr<SOARecordContent> oursr, size_t maxReceivedBytes)\n {\n   int refresh = oursr->d_st.refresh;\n   for(;;) {\n@@ -10,7 +10,7 @@\n     L<<Logger::Info<<\"Getting IXFR deltas for \"<<zone<<\" from \"<<master.toStringWithPort()<<\", our serial: \"<<getRR<SOARecordContent>(dr)->d_st.serial<<endl;\n     vector<pair<vector<DNSRecord>, vector<DNSRecord> > > deltas;\n     try {\n-      deltas = getIXFRDeltas(master, zone, dr, tt);\n+      deltas = getIXFRDeltas(master, zone, dr, tt, nullptr, maxReceivedBytes);\n     } catch(std::runtime_error& e ){\n       L<<Logger::Warning<<e.what()<<endl;\n       continue;",
  "diff_line_info": {
    "deleted_lines": [
      "void RPZIXFRTracker(const ComboAddress& master, const DNSName& zone, const std::string& polName, const TSIGTriplet& tt, shared_ptr<SOARecordContent> oursr)",
      "      deltas = getIXFRDeltas(master, zone, dr, tt);"
    ],
    "added_lines": [
      "void RPZIXFRTracker(const ComboAddress& master, const DNSName& zone, const std::string& polName, const TSIGTriplet& tt, shared_ptr<SOARecordContent> oursr, size_t maxReceivedBytes)",
      "      deltas = getIXFRDeltas(master, zone, dr, tt, nullptr, maxReceivedBytes);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/PowerDNS/pdns/pull/4133",
  "description": {
    "pr_info": {
      "title": "Add limits to the size of received {A,I}XFR, in megabytes",
      "number": 4133
    },
    "comment": [
      "This prevents memory exhaustion in case the master is sending a\nvery large amount of data in an update.\n",
      "LGTM from a quick glance.\n",
      "Fixes #4128 for master.\n",
      "This is ready for merge if you ask me.\n"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.95"
}