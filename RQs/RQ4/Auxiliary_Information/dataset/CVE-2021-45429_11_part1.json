{
  "cve_id": "CVE-2021-45429",
  "cwe_ids": [
    "CWE-120"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "VirusTotal/yara",
  "commit_msg": "Fix issue #1616\n\nThis is a more comprehensive fix than #1617, it adds new functions to the API for getting/setting uint32 and uint64 settings.  Using these functions is preferable over calling `yr_(get|set)_configuration` directly.",
  "commit_hash": "b34b7e74c862c129b801832b6b85401fbada2b01",
  "git_url": "https://github.com/VirusTotal/yara/commit/b34b7e74c862c129b801832b6b85401fbada2b01",
  "file_path": "libyara/proc/freebsd.c",
  "func_name": "yr_process_get_next_memory_block",
  "func_before": "YR_API YR_MEMORY_BLOCK* yr_process_get_next_memory_block(\n    YR_MEMORY_BLOCK_ITERATOR* iterator)\n{\n  YR_PROC_ITERATOR_CTX* context = (YR_PROC_ITERATOR_CTX*) iterator->context;\n  YR_PROC_INFO* proc_info = (YR_PROC_INFO*) context->proc_info;\n\n  char buf[4096];\n\n  proc_info->vm_entry.pve_path = buf;\n  proc_info->vm_entry.pve_pathlen = sizeof(buf);\n\n  iterator->last_error = ERROR_SUCCESS;\n\n  uint64_t current_begin = context->current_block.base +\n                           context->current_block.size;\n\n  uint64_t max_process_memory_chunk;\n\n  yr_get_configuration(\n      YR_CONFIG_MAX_PROCESS_MEMORY_CHUNK, (void*) &max_process_memory_chunk);\n\n  if (proc_info->vm_entry.pve_end <= current_begin)\n  {\n    if (ptrace(\n            PT_VM_ENTRY, proc_info->pid, (char*) (&proc_info->vm_entry), 0) ==\n        -1)\n    {\n      return NULL;\n    }\n    else\n    {\n      current_begin = proc_info->vm_entry.pve_start;\n    }\n  }\n\n  context->current_block.base = current_begin;\n  context->current_block.size = yr_min(\n      proc_info->vm_entry.pve_end - current_begin + 1,\n      max_process_memory_chunk);\n\n  assert(context->current_block.size > 0);\n\n  return &context->current_block;\n}",
  "abstract_func_before": "YR_API VAR_0* yr_process_get_next_memory_block(\n    YR_MEMORY_BLOCK_ITERATOR* VAR_1)\n{\n  YR_PROC_ITERATOR_CTX* VAR_2 = (YR_PROC_ITERATOR_CTX*) VAR_1->context;\n  YR_PROC_INFO* VAR_3 = (YR_PROC_INFO*) VAR_2->proc_info;\n\n  char VAR_4[4096];\n\n  VAR_3->vm_entry.pve_path = VAR_4;\n  VAR_3->vm_entry.pve_pathlen = sizeof(VAR_4);\n\n  VAR_1->last_error = VAR_5;\n\n  uint64_t VAR_6 = VAR_2->current_block.base +\n                           VAR_2->current_block.size;\n\n  uint64_t VAR_7;\n\n  yr_get_configuration(\n      VAR_8, (void*) &VAR_7);\n\n  if (VAR_3->vm_entry.pve_end <= VAR_6)\n  {\n    if (ptrace(\n            VAR_9, VAR_3->pid, (char*) (&VAR_3->vm_entry), 0) ==\n        -1)\n    {\n      return NULL;\n    }\n    else\n    {\n      VAR_6 = VAR_3->vm_entry.pve_start;\n    }\n  }\n\n  VAR_2->current_block.base = VAR_6;\n  VAR_2->current_block.size = yr_min(\n      VAR_3->vm_entry.pve_end - VAR_6 + 1,\n      VAR_7);\n\n  assert(VAR_2->current_block.size > 0);\n\n  return &VAR_2->current_block;\n}",
  "func_graph_path_before": null,
  "func": "YR_API YR_MEMORY_BLOCK* yr_process_get_next_memory_block(\n    YR_MEMORY_BLOCK_ITERATOR* iterator)\n{\n  YR_PROC_ITERATOR_CTX* context = (YR_PROC_ITERATOR_CTX*) iterator->context;\n  YR_PROC_INFO* proc_info = (YR_PROC_INFO*) context->proc_info;\n\n  char buf[4096];\n\n  proc_info->vm_entry.pve_path = buf;\n  proc_info->vm_entry.pve_pathlen = sizeof(buf);\n\n  iterator->last_error = ERROR_SUCCESS;\n\n  uint64_t current_begin = context->current_block.base +\n                           context->current_block.size;\n\n  uint64_t max_process_memory_chunk;\n\n  yr_get_configuration_uint64(\n      YR_CONFIG_MAX_PROCESS_MEMORY_CHUNK, &max_process_memory_chunk);\n\n  if (proc_info->vm_entry.pve_end <= current_begin)\n  {\n    if (ptrace(\n            PT_VM_ENTRY, proc_info->pid, (char*) (&proc_info->vm_entry), 0) ==\n        -1)\n    {\n      return NULL;\n    }\n    else\n    {\n      current_begin = proc_info->vm_entry.pve_start;\n    }\n  }\n\n  context->current_block.base = current_begin;\n  context->current_block.size = yr_min(\n      proc_info->vm_entry.pve_end - current_begin + 1,\n      max_process_memory_chunk);\n\n  assert(context->current_block.size > 0);\n\n  return &context->current_block;\n}",
  "abstract_func": "YR_API VAR_0* yr_process_get_next_memory_block(\n    YR_MEMORY_BLOCK_ITERATOR* VAR_1)\n{\n  YR_PROC_ITERATOR_CTX* VAR_2 = (YR_PROC_ITERATOR_CTX*) VAR_1->context;\n  YR_PROC_INFO* VAR_3 = (YR_PROC_INFO*) VAR_2->proc_info;\n\n  char VAR_4[4096];\n\n  VAR_3->vm_entry.pve_path = VAR_4;\n  VAR_3->vm_entry.pve_pathlen = sizeof(VAR_4);\n\n  VAR_1->last_error = VAR_5;\n\n  uint64_t VAR_6 = VAR_2->current_block.base +\n                           VAR_2->current_block.size;\n\n  uint64_t VAR_7;\n\n  yr_get_configuration_uint64(\n      VAR_8, &VAR_7);\n\n  if (VAR_3->vm_entry.pve_end <= VAR_6)\n  {\n    if (ptrace(\n            VAR_9, VAR_3->pid, (char*) (&VAR_3->vm_entry), 0) ==\n        -1)\n    {\n      return NULL;\n    }\n    else\n    {\n      VAR_6 = VAR_3->vm_entry.pve_start;\n    }\n  }\n\n  VAR_2->current_block.base = VAR_6;\n  VAR_2->current_block.size = yr_min(\n      VAR_3->vm_entry.pve_end - VAR_6 + 1,\n      VAR_7);\n\n  assert(VAR_2->current_block.size > 0);\n\n  return &VAR_2->current_block;\n}",
  "func_graph_path": null,
  "diff_func": "--- func_before\n+++ func_after\n@@ -16,8 +16,8 @@\n \n   uint64_t max_process_memory_chunk;\n \n-  yr_get_configuration(\n-      YR_CONFIG_MAX_PROCESS_MEMORY_CHUNK, (void*) &max_process_memory_chunk);\n+  yr_get_configuration_uint64(\n+      YR_CONFIG_MAX_PROCESS_MEMORY_CHUNK, &max_process_memory_chunk);\n \n   if (proc_info->vm_entry.pve_end <= current_begin)\n   {",
  "diff_line_info": {
    "deleted_lines": [
      "  yr_get_configuration(",
      "      YR_CONFIG_MAX_PROCESS_MEMORY_CHUNK, (void*) &max_process_memory_chunk);"
    ],
    "added_lines": [
      "  yr_get_configuration_uint64(",
      "      YR_CONFIG_MAX_PROCESS_MEMORY_CHUNK, &max_process_memory_chunk);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/VirusTotal/yara/pull/1621",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/VirusTotal/yara/pull/1621: 403 Client Error: Forbidden for url: https://api.github.com/repos/VirusTotal/yara/pulls/1621",
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Defect Remediation & Feature Upgrades  \n**Confidence:** 0.9"
}