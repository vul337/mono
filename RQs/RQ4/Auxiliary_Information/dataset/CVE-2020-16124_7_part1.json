{
  "cve_id": "CVE-2020-16124",
  "cwe_ids": [
    "CWE-190"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "ros/ros_comm",
  "commit_msg": "Trap for overly large input to XmlRPCPP which could cause problems with int <-> size_t conversions.\n\n - In XmlRpcClient, XmlRpcServerConnection and XmlRpcSocket, recognize when incoming or outgoing data is too large, generate an error and discard the data when practical.\n - Use the safe strtol() rather than atoi() to decode an incoming content-length header, and generate an error if the length is invalid or too large.\n - In XmlRpcUtil, prevent attempts to parse overly large XML input.\n - Add tests where they can reasonably be inserted into existing test routines.\n\nAlthough this fix could be cleaner the update is written to make the update ABI compatible.\n\nThis fix addresses CVE-2020-16124 / Integer overflow in ros_comm.\n\nSigned-off-by: Sid Faber <sid.faber@canonical.com>",
  "commit_hash": "3dd308911d7294bc6cff12f626b8467fe1555423",
  "git_url": "https://github.com/ros/ros_comm/commit/3dd308911d7294bc6cff12f626b8467fe1555423",
  "file_path": "utilities/xmlrpcpp/src/XmlRpcSocket.cpp",
  "func_name": "XmlRpcSocket::nbWrite",
  "func_before": "bool\nXmlRpcSocket::nbWrite(int fd, const std::string& s, int *bytesSoFar)\n{\n  int nToWrite = int(s.length()) - *bytesSoFar;\n  char *sp = const_cast<char*>(s.c_str()) + *bytesSoFar;\n  bool wouldBlock = false;\n\n  while ( nToWrite > 0 && ! wouldBlock ) {\n#if defined(_WINDOWS)\n    int n = send(fd, sp, nToWrite, 0);\n#else\n    int n = write(fd, sp, nToWrite);\n#endif\n    XmlRpcUtil::log(5, \"XmlRpcSocket::nbWrite: send/write returned %d.\", n);\n\n    if (n > 0) {\n      sp += n;\n      *bytesSoFar += n;\n      nToWrite -= n;\n    } else if (nonFatalError()) {\n      wouldBlock = true;\n    } else {\n      return false;   // Error\n    }\n  }\n  return true;\n}",
  "abstract_func_before": "bool\nXmlRpcSocket::nbWrite(int VAR_0, const std::string& VAR_1, int *VAR_2)\n{\n  int VAR_3 = int(VAR_1.length()) - *VAR_2;\n  char *VAR_4 = VAR_5<char*>(VAR_1.c_str()) + *VAR_2;\n  bool VAR_6 = false;\n\n  while ( VAR_3 > 0 && ! VAR_6 ) {\n#if defined(VAR_7)\n    int VAR_8 = send(VAR_0, VAR_4, VAR_3, 0);\n#else\n    int VAR_8 = write(VAR_0, VAR_4, VAR_3);\n#endif\n    XmlRpcUtil::log(5, \"XmlRpcSocket::nbWrite: send/write returned %d.\", VAR_8);\n\n    if (VAR_8 > 0) {\n      VAR_4 += VAR_8;\n      *VAR_2 += VAR_8;\n      VAR_3 -= VAR_8;\n    } else if (nonFatalError()) {\n      VAR_6 = true;\n    } else {\n      return false;   /* COMMENT_0 */\n    }\n  }\n  return true;\n}",
  "func_graph_path_before": "ros/ros_comm/3dd308911d7294bc6cff12f626b8467fe1555423/XmlRpcSocket.cpp/vul/before/1.json",
  "func": "bool\nXmlRpcSocket::nbWrite(int fd, const std::string& s, int *bytesSoFar)\n{\n  // Watch for integer overrun\n  if (s.length() > size_t(__INT_MAX__)) {\n    XmlRpcUtil::error(\"XmlRpcSocket::nbWrite: text size (%u) exceeds the maximum allowed size(%s)\",\n                      s.length(), __INT_MAX__);\n    return false;\n  }\n  int nToWrite = int(s.length()) - *bytesSoFar;\n  char *sp = const_cast<char*>(s.c_str()) + *bytesSoFar;\n  bool wouldBlock = false;\n\n  while ( nToWrite > 0 && ! wouldBlock ) {\n#if defined(_WINDOWS)\n    int n = send(fd, sp, nToWrite, 0);\n#else\n    int n = write(fd, sp, nToWrite);\n#endif\n    XmlRpcUtil::log(5, \"XmlRpcSocket::nbWrite: send/write returned %d.\", n);\n\n    if (n > 0) {\n      sp += n;\n      *bytesSoFar += n;\n      nToWrite -= n;\n    } else if (nonFatalError()) {\n      wouldBlock = true;\n    } else {\n      return false;   // Error\n    }\n  }\n  return true;\n}",
  "abstract_func": "bool\nXmlRpcSocket::nbWrite(int VAR_0, const std::string& VAR_1, int *VAR_2)\n{\n  /* COMMENT_0 */\n  if (VAR_1.length() > size_t(VAR_3)) {\n    XmlRpcUtil::error(\"XmlRpcSocket::nbWrite: text size (%u) exceeds the maximum allowed size(%s)\",\n                      VAR_1.length(), VAR_3);\n    return false;\n  }\n  int VAR_4 = int(VAR_1.length()) - *VAR_2;\n  char *VAR_5 = VAR_6<char*>(VAR_1.c_str()) + *VAR_2;\n  bool VAR_7 = false;\n\n  while ( VAR_4 > 0 && ! VAR_7 ) {\n#if defined(VAR_8)\n    int VAR_9 = send(VAR_0, VAR_5, VAR_4, 0);\n#else\n    int VAR_9 = write(VAR_0, VAR_5, VAR_4);\n#endif\n    XmlRpcUtil::log(5, \"XmlRpcSocket::nbWrite: send/write returned %d.\", VAR_9);\n\n    if (VAR_9 > 0) {\n      VAR_5 += VAR_9;\n      *VAR_2 += VAR_9;\n      VAR_4 -= VAR_9;\n    } else if (nonFatalError()) {\n      VAR_7 = true;\n    } else {\n      return false;   /* COMMENT_1 */\n    }\n  }\n  return true;\n}",
  "func_graph_path": "ros/ros_comm/3dd308911d7294bc6cff12f626b8467fe1555423/XmlRpcSocket.cpp/vul/after/1.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,6 +1,12 @@\n bool\n XmlRpcSocket::nbWrite(int fd, const std::string& s, int *bytesSoFar)\n {\n+  // Watch for integer overrun\n+  if (s.length() > size_t(__INT_MAX__)) {\n+    XmlRpcUtil::error(\"XmlRpcSocket::nbWrite: text size (%u) exceeds the maximum allowed size(%s)\",\n+                      s.length(), __INT_MAX__);\n+    return false;\n+  }\n   int nToWrite = int(s.length()) - *bytesSoFar;\n   char *sp = const_cast<char*>(s.c_str()) + *bytesSoFar;\n   bool wouldBlock = false;",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "  // Watch for integer overrun",
      "  if (s.length() > size_t(__INT_MAX__)) {",
      "    XmlRpcUtil::error(\"XmlRpcSocket::nbWrite: text size (%u) exceeds the maximum allowed size(%s)\",",
      "                      s.length(), __INT_MAX__);",
      "    return false;",
      "  }"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/ros/ros_comm/pull/2065",
  "description": {
    "pr_info": {
      "title": "Trap for overly large input to XmlRPCPP",
      "number": 2065
    },
    "comment": [
      "Oversize input to XmlRPCPP could cause problems with int <-> size_t conversions.\r\n\r\n - Recognize when incoming or outgoing data is too large, generate an error and discard the data when practical.\r\n - Use the safe strtol() rather than atoi() to decode an incoming content-length header and generate an error if the length is invalid or too large.\r\n - Prevent attempts to parse overly large XML input.\r\n - Add tests where they can reasonably be inserted into existing test routines.\r\n\r\nAlthough this fix could be cleaner the update is written to make the update ABI compatible.\r\n\r\nThis fix addresses CVE-2020-16124 / Integer overflow in ros_comm.\r\n\r\nSigned-off-by: Sid Faber <sid.faber@canonical.com>",
      "> Atm CI is failing for two tests though.\r\n\r\n@dirk-thomas, thanks for the review. The overrun tests I added are causing memory allocation failures--they work on my local machine but I assume the CI tests don't expect to be handling 2Gb input values. Any suggestions on how best to handle, is it advisable to remove the overrun tests?",
      "> Any suggestions on how best to handle, is it advisable to remove the overrun tests?\r\n\r\nCan the code be written in a way that it fails gracefully if that much memory isn't available? Maybe marking the test as skipped.",
      "Debian Buster only has Googletest 1.8.1 which doesn't have `GTEST_SKIP`.\r\n\r\nThe `readResponse_oversize` test still fails in CI.",
      "I removed GTEST_SKIP, printed an error message but otherwise let the test succeed. Also I removed one test that was causing problems. The test_client routines for readResponse still run when objects are finalized; since the test object could be in an unpredictable state I couldn't find a good way to ignore the results.",
      "> I removed GTEST_SKIP, printed an error message but otherwise let the test succeed.\r\n\r\nThat sounds like a good fall backback behavior. Can you make this conditional based on if `GTEST_SKIP` is available? If it is use it to give better feedback, otherwise fall back to the error message / succeed.",
      "@dirk-thomas, I added the conditional statement in one of the tests but had to rip another one out--the Ubuntu tests started running long and got killed causing the whole module to fail. I think this is as good as I can get it unless you have any ideas on how to safely & consistently write tests for huge input strings.",
      "Sounds good to me. Thanks for the patch and for iterating on it."
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 1.0\n\nThe commit explicitly addresses a known security vulnerability (CVE-2020-16124) by introducing checks to prevent integer overflows due to large input sizes. The code changes are consistent with the commit message and effectively mitigate the security risk.\n\n**Step-by-Step Explanation:**\n\n1. **Security Reference:** The commit references CVE-2020-16124, indicating a known security issue.\n2. **Code Changes:** The patch adds checks for string length exceeding `INT_MAX`, preventing integer overflows.\n3. **Consistent Intent:** The code modifications directly address the security vulnerability described in the commit message.\n4. **Confidence:** High confidence due to clear reference to CVE and direct fix implementation.\n\n**Final Classification:** Security Vulnerability Fix  \n**Confidence:** **1.0**"
}