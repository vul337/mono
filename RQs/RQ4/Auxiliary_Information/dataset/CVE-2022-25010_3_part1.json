{
  "cve_id": "CVE-2022-25010",
  "cwe_ids": [
    "CWE-732"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:P/A:N",
  "cvss_is_v3": false,
  "repo_name": "stepmania",
  "commit_msg": "Remove access to the root FS from lua\n\nOn linux / is mounted to /rootfs in RageFile, which allows access to the\n_whole_ filesystem from lua. This means themes and mod files can\nre-write user data and extract files via USB profiles.\n\n/rootfs was only added for internal use by the alsa, oss and memory card\ndrivers, so it can be easily replaced with direct fstream file access.",
  "commit_hash": "8490d181c2d301ccca0dc6ee52f25bbadb567a9a",
  "git_url": "https://github.com/stepmania/stepmania/commit/8490d181c2d301ccca0dc6ee52f25bbadb567a9a",
  "file_path": "src/arch/Sound/RageSoundDriver_OSS.cpp",
  "func_name": "RageSoundDriver_OSS::CheckOSSVersion",
  "func_before": "RString RageSoundDriver_OSS::CheckOSSVersion( int fd )\n{\n\tint version = 0;\n\n#if defined(HAVE_OSS_GETVERSION)\n\tif( ioctl(fd, OSS_GETVERSION, &version) != 0 )\n\t{\n\t\tLOG->Warn( \"OSS_GETVERSION failed: %s\", strerror(errno) );\n\t\tversion = 0;\n\t}\n#endif\n\n\t/*\n\t * Find out if /dev/dsp is really ALSA emulating it.  ALSA's OSS emulation has\n\t * been buggy.  If we got here, we probably failed to init ALSA.  The only case\n\t * I've seen of this so far was not having access to /dev/snd devices.\n\t */\n\t/* Reliable but only too recently available:\n\tif (ioctl(fd, OSS_ALSAEMULVER, &ver) == 0 && ver ) */\n\n\t/*\n\t * Ack.  We can't just check for /proc/asound, since a few systems have ALSA\n\t * loaded but actually use OSS.  ALSA returns a specific version; check that,\n\t * too.  It looks like that version is potentially a valid OSS version, so\n\t * check both.\n\t */\n#ifndef FORCE_OSS\n#define ALSA_SNDRV_OSS_VERSION         ((3<<16)|(8<<8)|(1<<4)|(0))\n\tif( version == ALSA_SNDRV_OSS_VERSION && IsADirectory(\"/rootfs/proc/asound\") )\n\t\treturn \"RageSoundDriver_OSS: ALSA detected.  ALSA OSS emulation is buggy; use ALSA natively.\";\n#endif\n\tif( version )\n\t{\n\t\tint major, minor, rev;\n\t\tif( version < 361 )\n\t\t{\n\t\t\tmajor = (version/100)%10;\n\t\t\tminor = (version/10) %10;\n\t\t\trev =   (version/1)  %10;\n\t\t} else {\n\t\t\tmajor = (version/0x10000) % 0x100;\n\t\t\tminor = (version/0x00100) % 0x100;\n\t\t\trev =   (version/0x00001) % 0x100;\n\t\t}\n\n\t\tLOG->Info(\"OSS: %i.%i.%i\", major, minor, rev );\n\t}\n\n\treturn \"\";\n}",
  "abstract_func_before": "RString RageSoundDriver_OSS::CheckOSSVersion( int VAR_0 )\n{\n\tint VAR_1 = 0;\n\n#if defined(VAR_2)\n\tif( ioctl(VAR_0, VAR_3, &VAR_1) != 0 )\n\t{\n\t\tVAR_4->Warn( \"OSS_GETVERSION failed: %s\", strerror(VAR_5) );\n\t\tVAR_1 = 0;\n\t}\n#endif\n\n\t/* COMMENT_0 */\n                                                                               \n                                                                                \n                                                                       \n    \n\t/* COMMENT_5 */\n                                                      \n\n\t/* COMMENT_7 */\n                                                                             \n                                                                              \n                                                                           \n               \n    \n#ifndef VAR_6\n#define VAR_7         ((3<<16)|(8<<8)|(1<<4)|(0))\n\tif( VAR_1 == VAR_7 && IsADirectory(\"/rootfs/proc/asound\") )\n\t\treturn \"RageSoundDriver_OSS: ALSA detected.  ALSA OSS emulation is buggy; use ALSA natively.\";\n#endif\n\tif( VAR_1 )\n\t{\n\t\tint VAR_8, VAR_9, VAR_10;\n\t\tif( VAR_1 < 361 )\n\t\t{\n\t\t\tVAR_8 = (VAR_1/100)%10;\n\t\t\tVAR_9 = (VAR_1/10) %10;\n\t\t\tVAR_10 =   (VAR_1/1)  %10;\n\t\t} else {\n\t\t\tVAR_8 = (VAR_1/0x10000) % 0x100;\n\t\t\tVAR_9 = (VAR_1/0x00100) % 0x100;\n\t\t\tVAR_10 =   (VAR_1/0x00001) % 0x100;\n\t\t}\n\n\t\tVAR_4->Info(\"OSS: %i.%i.%i\", VAR_8, VAR_9, VAR_10 );\n\t}\n\n\treturn \"\";\n}",
  "func_graph_path_before": "stepmania/8490d181c2d301ccca0dc6ee52f25bbadb567a9a/RageSoundDriver_OSS.cpp/vul/before/0.json",
  "func": "RString RageSoundDriver_OSS::CheckOSSVersion( int fd )\n{\n\tint version = 0;\n\n#if defined(HAVE_OSS_GETVERSION)\n\tif( ioctl(fd, OSS_GETVERSION, &version) != 0 )\n\t{\n\t\tLOG->Warn( \"OSS_GETVERSION failed: %s\", strerror(errno) );\n\t\tversion = 0;\n\t}\n#endif\n\n\t/*\n\t * Find out if /dev/dsp is really ALSA emulating it.  ALSA's OSS emulation has\n\t * been buggy.  If we got here, we probably failed to init ALSA.  The only case\n\t * I've seen of this so far was not having access to /dev/snd devices.\n\t */\n\t/* Reliable but only too recently available:\n\tif (ioctl(fd, OSS_ALSAEMULVER, &ver) == 0 && ver ) */\n\n\t/*\n\t * Ack.  We can't just check for /proc/asound, since a few systems have ALSA\n\t * loaded but actually use OSS.  ALSA returns a specific version; check that,\n\t * too.  It looks like that version is potentially a valid OSS version, so\n\t * check both.\n\t */\n#ifndef FORCE_OSS\n#define ALSA_SNDRV_OSS_VERSION         ((3<<16)|(8<<8)|(1<<4)|(0))\n\tstruct stat st;\n\tif( version == ALSA_SNDRV_OSS_VERSION && stat(\"/proc/asound\", &st) && (st.st_mode & S_IFDIR) )\n\t\treturn \"RageSoundDriver_OSS: ALSA detected.  ALSA OSS emulation is buggy; use ALSA natively.\";\n#endif\n\tif( version )\n\t{\n\t\tint major, minor, rev;\n\t\tif( version < 361 )\n\t\t{\n\t\t\tmajor = (version/100)%10;\n\t\t\tminor = (version/10) %10;\n\t\t\trev =   (version/1)  %10;\n\t\t} else {\n\t\t\tmajor = (version/0x10000) % 0x100;\n\t\t\tminor = (version/0x00100) % 0x100;\n\t\t\trev =   (version/0x00001) % 0x100;\n\t\t}\n\n\t\tLOG->Info(\"OSS: %i.%i.%i\", major, minor, rev );\n\t}\n\n\treturn \"\";\n}",
  "abstract_func": "RString RageSoundDriver_OSS::CheckOSSVersion( int VAR_0 )\n{\n\tint VAR_1 = 0;\n\n#if defined(VAR_2)\n\tif( ioctl(VAR_0, VAR_3, &VAR_1) != 0 )\n\t{\n\t\tVAR_4->Warn( \"OSS_GETVERSION failed: %s\", strerror(VAR_5) );\n\t\tVAR_1 = 0;\n\t}\n#endif\n\n\t/* COMMENT_0 */\n                                                                               \n                                                                                \n                                                                       \n    \n\t/* COMMENT_5 */\n                                                      \n\n\t/* COMMENT_7 */\n                                                                             \n                                                                              \n                                                                           \n               \n    \n#ifndef VAR_6\n#define VAR_7         ((3<<16)|(8<<8)|(1<<4)|(0))\n\tstruct stat VAR_8;\n\tif( VAR_1 == VAR_7 && stat(\"/proc/asound\", &VAR_8) && (VAR_8.st_mode & VAR_9) )\n\t\treturn \"RageSoundDriver_OSS: ALSA detected.  ALSA OSS emulation is buggy; use ALSA natively.\";\n#endif\n\tif( VAR_1 )\n\t{\n\t\tint VAR_10, VAR_11, VAR_12;\n\t\tif( VAR_1 < 361 )\n\t\t{\n\t\t\tVAR_10 = (VAR_1/100)%10;\n\t\t\tVAR_11 = (VAR_1/10) %10;\n\t\t\tVAR_12 =   (VAR_1/1)  %10;\n\t\t} else {\n\t\t\tVAR_10 = (VAR_1/0x10000) % 0x100;\n\t\t\tVAR_11 = (VAR_1/0x00100) % 0x100;\n\t\t\tVAR_12 =   (VAR_1/0x00001) % 0x100;\n\t\t}\n\n\t\tVAR_4->Info(\"OSS: %i.%i.%i\", VAR_10, VAR_11, VAR_12 );\n\t}\n\n\treturn \"\";\n}",
  "func_graph_path": "stepmania/8490d181c2d301ccca0dc6ee52f25bbadb567a9a/RageSoundDriver_OSS.cpp/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -26,7 +26,8 @@\n \t */\n #ifndef FORCE_OSS\n #define ALSA_SNDRV_OSS_VERSION         ((3<<16)|(8<<8)|(1<<4)|(0))\n-\tif( version == ALSA_SNDRV_OSS_VERSION && IsADirectory(\"/rootfs/proc/asound\") )\n+\tstruct stat st;\n+\tif( version == ALSA_SNDRV_OSS_VERSION && stat(\"/proc/asound\", &st) && (st.st_mode & S_IFDIR) )\n \t\treturn \"RageSoundDriver_OSS: ALSA detected.  ALSA OSS emulation is buggy; use ALSA natively.\";\n #endif\n \tif( version )",
  "diff_line_info": {
    "deleted_lines": [
      "\tif( version == ALSA_SNDRV_OSS_VERSION && IsADirectory(\"/rootfs/proc/asound\") )"
    ],
    "added_lines": [
      "\tstruct stat st;",
      "\tif( version == ALSA_SNDRV_OSS_VERSION && stat(\"/proc/asound\", &st) && (st.st_mode & S_IFDIR) )"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/stepmania/stepmania/pull/2184",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/stepmania/stepmania/pull/2184: 403 Client Error: Forbidden for url: https://api.github.com/repos/stepmania/stepmania/pulls/2184",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 1.0"
}