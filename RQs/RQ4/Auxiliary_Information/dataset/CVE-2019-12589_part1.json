{
  "cve_id": "CVE-2019-12589",
  "cwe_ids": [
    "CWE-732"
  ],
  "cvss_vector": "AV:L/AC:L/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "netblue30/firejail",
  "commit_msg": "mount runtime seccomp files read-only (#2602)\n\navoid creating locations in the file system that are both writable and\r\nexecutable (in this case for processes with euid of the user).\r\n\r\nfor the same reason also remove user owned libfiles\r\nwhen it is not needed any more",
  "commit_hash": "eecf35c2f8249489a1d3e512bb07f0d427183134",
  "git_url": "https://github.com/netblue30/firejail/commit/eecf35c2f8249489a1d3e512bb07f0d427183134",
  "file_path": "src/firejail/fs_lib.c",
  "func_name": "fslib_copy_libs",
  "func_before": "void fslib_copy_libs(const char *full_path) {\n\tassert(full_path);\n\tif (arg_debug || arg_debug_private_lib)\n\t\tprintf(\"    fslib_copy_libs %s\\n\", full_path);\n\n\t// if library/executable does not exist or the user does not have read access to it\n\t// print a warning and exit the function.\n\tif (access(full_path, R_OK)) {\n\t\tif (arg_debug || arg_debug_private_lib)\n\t\t\tprintf(\"cannot find %s for private-lib, skipping...\\n\", full_path);\n\t\treturn;\n\t}\n\n\t// create an empty RUN_LIB_FILE and allow the user to write to it\n\tunlink(RUN_LIB_FILE);\t\t\t  // in case is there\n\tcreate_empty_file_as_root(RUN_LIB_FILE, 0644);\n\tif (chown(RUN_LIB_FILE, getuid(), getgid()))\n\t\terrExit(\"chown\");\n\n\t// run fldd to extract the list of files\n\tif (arg_debug || arg_debug_private_lib)\n\t\tprintf(\"    running fldd %s\\n\", full_path);\n\tsbox_run(SBOX_USER | SBOX_SECCOMP | SBOX_CAPS_NONE, 3, PATH_FLDD, full_path, RUN_LIB_FILE);\n\n\t// open the list of libraries and install them on by one\n\tFILE *fp = fopen(RUN_LIB_FILE, \"r\");\n\tif (!fp)\n\t\terrExit(\"fopen\");\n\n\tchar buf[MAXBUF];\n\twhile (fgets(buf, MAXBUF, fp)) {\n\t\t// remove \\n\n\t\tchar *ptr = strchr(buf, '\\n');\n\t\tif (ptr)\n\t\t\t*ptr = '\\0';\n\t\tfslib_duplicate(buf);\n\t}\n\tfclose(fp);\n}",
  "abstract_func_before": "void fslib_copy_libs(const char *VAR_0) {\n\tassert(VAR_0);\n\tif (VAR_1 || VAR_2)\n\t\tprintf(\"    fslib_copy_libs %s\\n\", VAR_0);\n\n\t/* COMMENT_0 */\n\t/* COMMENT_1 */\n\tif (access(VAR_0, VAR_3)) {\n\t\tif (VAR_1 || VAR_2)\n\t\t\tprintf(\"cannot find %s for private-lib, skipping...\\n\", VAR_0);\n\t\treturn;\n\t}\n\n\t/* COMMENT_2 */\n\tunlink(VAR_4);\t\t\t  /* COMMENT_3 */\n\tcreate_empty_file_as_root(VAR_4, 0644);\n\tif (chown(VAR_4, getuid(), getgid()))\n\t\terrExit(\"chown\");\n\n\t/* COMMENT_4 */\n\tif (VAR_1 || VAR_2)\n\t\tprintf(\"    running fldd %s\\n\", VAR_0);\n\tsbox_run(VAR_5 | VAR_6 | VAR_7, 3, VAR_8, VAR_0, VAR_4);\n\n\t/* COMMENT_5 */\n\tFILE *VAR_9 = fopen(VAR_4, \"r\");\n\tif (!VAR_9)\n\t\terrExit(\"fopen\");\n\n\tchar VAR_10[VAR_11];\n\twhile (fgets(VAR_10, VAR_11, VAR_9)) {\n\t\t/* COMMENT_6 */\n\t\tchar *VAR_12 = strchr(VAR_10, '\\n');\n\t\tif (VAR_12)\n\t\t\t*VAR_12 = '\\0';\n\t\tfslib_duplicate(VAR_10);\n\t}\n\tfclose(VAR_9);\n}",
  "func_graph_path_before": "netblue30/firejail/eecf35c2f8249489a1d3e512bb07f0d427183134/fs_lib.c/vul/before/0.json",
  "func": "void fslib_copy_libs(const char *full_path) {\n\tassert(full_path);\n\tif (arg_debug || arg_debug_private_lib)\n\t\tprintf(\"    fslib_copy_libs %s\\n\", full_path);\n\n\t// if library/executable does not exist or the user does not have read access to it\n\t// print a warning and exit the function.\n\tif (access(full_path, R_OK)) {\n\t\tif (arg_debug || arg_debug_private_lib)\n\t\t\tprintf(\"cannot find %s for private-lib, skipping...\\n\", full_path);\n\t\treturn;\n\t}\n\n\t// create an empty RUN_LIB_FILE and allow the user to write to it\n\tunlink(RUN_LIB_FILE);\t\t\t  // in case is there\n\tcreate_empty_file_as_root(RUN_LIB_FILE, 0644);\n\tif (chown(RUN_LIB_FILE, getuid(), getgid()))\n\t\terrExit(\"chown\");\n\n\t// run fldd to extract the list of files\n\tif (arg_debug || arg_debug_private_lib)\n\t\tprintf(\"    running fldd %s\\n\", full_path);\n\tsbox_run(SBOX_USER | SBOX_SECCOMP | SBOX_CAPS_NONE, 3, PATH_FLDD, full_path, RUN_LIB_FILE);\n\n\t// open the list of libraries and install them on by one\n\tFILE *fp = fopen(RUN_LIB_FILE, \"r\");\n\tif (!fp)\n\t\terrExit(\"fopen\");\n\n\tchar buf[MAXBUF];\n\twhile (fgets(buf, MAXBUF, fp)) {\n\t\t// remove \\n\n\t\tchar *ptr = strchr(buf, '\\n');\n\t\tif (ptr)\n\t\t\t*ptr = '\\0';\n\t\tfslib_duplicate(buf);\n\t}\n\tfclose(fp);\n\tunlink(RUN_LIB_FILE);\n}",
  "abstract_func": "void fslib_copy_libs(const char *VAR_0) {\n\tassert(VAR_0);\n\tif (VAR_1 || VAR_2)\n\t\tprintf(\"    fslib_copy_libs %s\\n\", VAR_0);\n\n\t/* COMMENT_0 */\n\t/* COMMENT_1 */\n\tif (access(VAR_0, VAR_3)) {\n\t\tif (VAR_1 || VAR_2)\n\t\t\tprintf(\"cannot find %s for private-lib, skipping...\\n\", VAR_0);\n\t\treturn;\n\t}\n\n\t/* COMMENT_2 */\n\tunlink(VAR_4);\t\t\t  /* COMMENT_3 */\n\tcreate_empty_file_as_root(VAR_4, 0644);\n\tif (chown(VAR_4, getuid(), getgid()))\n\t\terrExit(\"chown\");\n\n\t/* COMMENT_4 */\n\tif (VAR_1 || VAR_2)\n\t\tprintf(\"    running fldd %s\\n\", VAR_0);\n\tsbox_run(VAR_5 | VAR_6 | VAR_7, 3, VAR_8, VAR_0, VAR_4);\n\n\t/* COMMENT_5 */\n\tFILE *VAR_9 = fopen(VAR_4, \"r\");\n\tif (!VAR_9)\n\t\terrExit(\"fopen\");\n\n\tchar VAR_10[VAR_11];\n\twhile (fgets(VAR_10, VAR_11, VAR_9)) {\n\t\t/* COMMENT_6 */\n\t\tchar *VAR_12 = strchr(VAR_10, '\\n');\n\t\tif (VAR_12)\n\t\t\t*VAR_12 = '\\0';\n\t\tfslib_duplicate(VAR_10);\n\t}\n\tfclose(VAR_9);\n\tunlink(VAR_4);\n}",
  "func_graph_path": "netblue30/firejail/eecf35c2f8249489a1d3e512bb07f0d427183134/fs_lib.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -36,4 +36,5 @@\n \t\tfslib_duplicate(buf);\n \t}\n \tfclose(fp);\n+\tunlink(RUN_LIB_FILE);\n }",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "\tunlink(RUN_LIB_FILE);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/netblue30/firejail/pull/2602",
  "description": {
    "pr_info": {
      "title": "mount runtime seccomp files read-only",
      "number": 2602
    },
    "comment": [
      "In order to reduce exposure to locations that are both writable and executable (only processes with euid of the user):\r\n* group user owned /run/firejail/mnt/seccomp.* files in a directory and\r\n* mount this directory read-only\r\n* remove user owned /run/firejail/mnt/libfiles once it is not needed any more\r\n\r\n/run/firejail/mnt/pulse and /run/firejail/mnt/sec.Xauthority are noexec already, and the appimage mounts are read-only, so I think this PR should cover the last remaining paths. To make this possible it was necessary to drop capabilities a little bit later during sandbox setup.",
      "@smithosu - looks fine, bring it in! It has a conflict in src/firejail/sandbox.c. Thanks!"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 0.95"
}