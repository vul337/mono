{
  "cve_id": "CVE-2021-45385",
  "cwe_ids": [
    "CWE-476"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "rockcarry/ffjpeg",
  "commit_msg": "exit program when bmp file is oversize",
  "commit_hash": "09df4c4bb16a301ffec153d30ad33cc9956333f0",
  "git_url": "https://github.com/rockcarry/ffjpeg/commit/09df4c4bb16a301ffec153d30ad33cc9956333f0",
  "file_path": "src/ffjpeg.c",
  "func_name": "main",
  "func_before": "int main(int argc, char *argv[])\n{\n    void *jfif = NULL;\n    BMP   bmp  = {0};\n\n    if (argc < 3) {\n        printf(\n            \"jfif test program\\n\"\n            \"usage: ffjpeg -d filename decode jpg file to decode.bmp\\n\"\n            \"       ffjpeg -e filename encode bmp file to encode.jpg\\n\"\n        );\n        return 0;\n    }\n\n    if (strcmp(argv[1], \"-d\") == 0) {\n        jfif = jfif_load(argv[2]);\n        jfif_decode(jfif, &bmp);\n        jfif_free  (jfif);\n        bmp_save(&bmp, \"decode.bmp\");\n        bmp_free(&bmp);\n    } else if (strcmp(argv[1], \"-e\") == 0) {\n        bmp_load(&bmp, argv[2]);\n        jfif = jfif_encode(&bmp);\n        bmp_free(&bmp);\n        jfif_save(jfif, \"encode.jpg\");\n        jfif_free(jfif);\n    }\n\n    return 0;\n}",
  "abstract_func_before": "int main(int VAR_0, char *VAR_1[])\n{\n    void *VAR_2 = NULL;\n    BMP   VAR_3  = {0};\n\n    if (VAR_0 < 3) {\n        printf(\n            \"jfif test program\\n\"\n            \"usage: ffjpeg -d filename decode jpg file to decode.bmp\\n\"\n            \"       ffjpeg -e filename encode bmp file to encode.jpg\\n\"\n        );\n        return 0;\n    }\n\n    if (strcmp(VAR_1[1], \"-d\") == 0) {\n        VAR_2 = jfif_load(VAR_1[2]);\n        jfif_decode(VAR_2, &VAR_3);\n        jfif_free  (VAR_2);\n        bmp_save(&VAR_3, \"decode.bmp\");\n        bmp_free(&VAR_3);\n    } else if (strcmp(VAR_1[1], \"-e\") == 0) {\n        bmp_load(&VAR_3, VAR_1[2]);\n        VAR_2 = jfif_encode(&VAR_3);\n        bmp_free(&VAR_3);\n        jfif_save(VAR_2, \"encode.jpg\");\n        jfif_free(VAR_2);\n    }\n\n    return 0;\n}",
  "func_graph_path_before": "rockcarry/ffjpeg/09df4c4bb16a301ffec153d30ad33cc9956333f0/ffjpeg.c/vul/before/0.json",
  "func": "int main(int argc, char *argv[])\n{\n    void *jfif = NULL;\n    BMP   bmp  = {0};\n\n    if (argc < 3) {\n        printf(\n            \"jfif test program\\n\"\n            \"usage: ffjpeg -d filename decode jpg file to decode.bmp\\n\"\n            \"       ffjpeg -e filename encode bmp file to encode.jpg\\n\"\n        );\n        return 0;\n    }\n\n    if (strcmp(argv[1], \"-d\") == 0) {\n        jfif = jfif_load(argv[2]);\n        jfif_decode(jfif, &bmp);\n        jfif_free  (jfif);\n        bmp_save(&bmp, \"decode.bmp\");\n        bmp_free(&bmp);\n    } else if (strcmp(argv[1], \"-e\") == 0) {\n        if (bmp_load(&bmp, argv[2]) == -1) {\n            printf(\"failed to load bmp file: %s !\\n\", argv[2]);\n            return -1;\n        }\n        jfif = jfif_encode(&bmp);\n        bmp_free(&bmp);\n        jfif_save(jfif, \"encode.jpg\");\n        jfif_free(jfif);\n    }\n\n    return 0;\n}",
  "abstract_func": "int main(int VAR_0, char *VAR_1[])\n{\n    void *VAR_2 = NULL;\n    BMP   VAR_3  = {0};\n\n    if (VAR_0 < 3) {\n        printf(\n            \"jfif test program\\n\"\n            \"usage: ffjpeg -d filename decode jpg file to decode.bmp\\n\"\n            \"       ffjpeg -e filename encode bmp file to encode.jpg\\n\"\n        );\n        return 0;\n    }\n\n    if (strcmp(VAR_1[1], \"-d\") == 0) {\n        VAR_2 = jfif_load(VAR_1[2]);\n        jfif_decode(VAR_2, &VAR_3);\n        jfif_free  (VAR_2);\n        bmp_save(&VAR_3, \"decode.bmp\");\n        bmp_free(&VAR_3);\n    } else if (strcmp(VAR_1[1], \"-e\") == 0) {\n        if (bmp_load(&VAR_3, VAR_1[2]) == -1) {\n            printf(\"failed to load bmp file: %s !\\n\", VAR_1[2]);\n            return -1;\n        }\n        VAR_2 = jfif_encode(&VAR_3);\n        bmp_free(&VAR_3);\n        jfif_save(VAR_2, \"encode.jpg\");\n        jfif_free(VAR_2);\n    }\n\n    return 0;\n}",
  "func_graph_path": "rockcarry/ffjpeg/09df4c4bb16a301ffec153d30ad33cc9956333f0/ffjpeg.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -19,7 +19,10 @@\n         bmp_save(&bmp, \"decode.bmp\");\n         bmp_free(&bmp);\n     } else if (strcmp(argv[1], \"-e\") == 0) {\n-        bmp_load(&bmp, argv[2]);\n+        if (bmp_load(&bmp, argv[2]) == -1) {\n+            printf(\"failed to load bmp file: %s !\\n\", argv[2]);\n+            return -1;\n+        }\n         jfif = jfif_encode(&bmp);\n         bmp_free(&bmp);\n         jfif_save(jfif, \"encode.jpg\");",
  "diff_line_info": {
    "deleted_lines": [
      "        bmp_load(&bmp, argv[2]);"
    ],
    "added_lines": [
      "        if (bmp_load(&bmp, argv[2]) == -1) {",
      "            printf(\"failed to load bmp file: %s !\\n\", argv[2]);",
      "            return -1;",
      "        }"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/rockcarry/ffjpeg/pull/48",
  "description": {
    "pr_info": {
      "title": "exit program when bmp file is oversize",
      "number": 48
    },
    "comment": [
      "fix issue #47\r\n\r\nWhen bmp's size is out of range, it returns without assign memory buffer to `pb->pdata` and did not exit the program.\r\nSo the program crashes when it tries to access the `pb->data` in jfif.c:763, which is a invalid memory address.\r\nhttps://github.com/rockcarry/ffjpeg/blob/d5cfd49f304e2b8eafc0d473d1c217b1c761243b/src/jfif.c#L757-L763",
      "log added"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.8,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.8  \n\nThe patch resolves a crash caused by invalid memory access when loading an oversized BMP file, preventing potential exploitation."
}