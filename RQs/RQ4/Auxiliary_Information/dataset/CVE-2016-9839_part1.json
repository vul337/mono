{
  "cve_id": "CVE-2016-9839",
  "cwe_ids": [
    "CWE-200"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:N/A:N",
  "cvss_is_v3": false,
  "repo_name": "MapServer",
  "commit_msg": "Don't return verbose OGR error messages to clients (#5356)",
  "commit_hash": "3d52307cf0033e3275975b668b7138ba1343f28d",
  "git_url": "https://github.com/MapServer/MapServer/commit/3d52307cf0033e3275975b668b7138ba1343f28d",
  "file_path": "mapogr.cpp",
  "func_name": "msOGRFileWhichShapes",
  "func_before": "static int msOGRFileWhichShapes(layerObj *layer, rectObj rect, msOGRFileInfo *psInfo)\n{\n    // rect is from BBOX parameter in query (In lieu of a FEATUREID or FILTER) or mapfile somehow\n    if (psInfo == NULL || psInfo->hLayer == NULL) {\n        msSetError(MS_MISCERR, \"Assertion failed: OGR layer not opened!!!\", \"msOGRFileWhichShapes()\");\n        return(MS_FAILURE);\n    }\n\n    char *select = (psInfo->pszSelect) ? msStrdup(psInfo->pszSelect) : NULL;\n\n    // we'll go strictly two possible ways: \n    // 1) GetLayer + SetFilter\n    // 2) ExecuteSQL (psInfo->hLayer is an SQL result OR sortBy was requested OR have native_string\n    // and start from the second\n\n    if ( psInfo->bIsOKForSQLCompose && (psInfo->nLayerIndex == -1 ||\n                                        layer->sortBy.nProperties > 0 ||\n                                        layer->filter.native_string ||\n                                        (psInfo->bPaging && layer->maxfeatures > 0)) ) {\n\n        if( psInfo->nLayerIndex == -1 && select == NULL ) {\n            select = msStrdup(psInfo->pszLayerDef);\n            /* If nLayerIndex == -1 then the layer is an SQL result ... free it */\n            OGR_DS_ReleaseResultSet( psInfo->hDS, psInfo->hLayer );\n            psInfo->hLayer = NULL;\n        }\n        else if( select == NULL ) {\n            const char* pszGeometryColumn;\n            int i;\n            select = msStringConcatenate(select, \"SELECT \");\n            for(i = 0; i < layer->numitems; i++) {\n                if( i > 0 )\n                    select = msStringConcatenate(select, \", \");\n                select = msStringConcatenate(select, \"\\\"\");\n                select = msStringConcatenate(select, layer->items[i]);\n                select = msStringConcatenate(select, \"\\\"\");\n            }\n            if( layer->numitems > 0 )\n                select = msStringConcatenate(select, \", \");\n            pszGeometryColumn = OGR_L_GetGeometryColumn(psInfo->hLayer);\n            if( pszGeometryColumn != NULL && pszGeometryColumn[0] != '\\0' ) {\n                select = msStringConcatenate(select, \"\\\"\");\n                select = msStringConcatenate(select, pszGeometryColumn);\n                select = msStringConcatenate(select, \"\\\"\");\n            } else {\n                /* Add \", *\" so that we still have an hope to get the geometry */\n                select = msStringConcatenate(select, \"*\");\n            }\n            select = msStringConcatenate(select, \" FROM \");\n            if( psInfo->nLayerIndex == -1 )\n            {\n              select = msStringConcatenate(select, \"(\");\n              select = msStringConcatenate(select, psInfo->pszLayerDef);\n              select = msStringConcatenate(select, \") MSSUBSELECT\");\n            }\n            else\n            {\n              select = msStringConcatenate(select, \"\\\"\");\n              select = msStringConcatenate(select, OGR_FD_GetName(OGR_L_GetLayerDefn(psInfo->hLayer)));\n              select = msStringConcatenate(select, \"\\\"\");\n            }\n        }\n\n        char *filter = NULL;\n\n        if (msLayerGetProcessingKey(layer, \"NATIVE_FILTER\") != NULL) {\n            filter = msStringConcatenate(filter, \"(\");\n            filter = msStringConcatenate(filter, msLayerGetProcessingKey(layer, \"NATIVE_FILTER\"));\n            filter = msStringConcatenate(filter, \")\");\n        }\n\n        if (psInfo->dialect) {\n            if (EQUAL(psInfo->dialect, \"Spatialite\") || EQUAL(psInfo->dialect, \"PostgreSQL\")) {\n                const char *sql = layer->filter.native_string;\n                if (sql && *sql != '\\0') {\n                    if (filter) filter = msStringConcatenate(filter, \"AND \");\n                    filter = msStringConcatenate(filter, \"(\");\n                    filter = msStringConcatenate(filter, sql);\n                    filter = msStringConcatenate(filter, \")\");\n                }\n            }\n        }\n\n        /* ------------------------------------------------------------------\n         * Set Spatial filter... this may result in no features being returned\n         * if layer does not overlap current view.\n         *\n         * __TODO__ We should return MS_DONE if no shape overlaps the selected\n         * region and matches the layer's FILTER expression, but there is currently\n         * no _efficient_ way to do that with OGR.\n         * ------------------------------------------------------------------ */\n        if (psInfo->rect_is_defined) {\n            rect.minx = MAX(psInfo->rect.minx, rect.minx);\n            rect.miny = MAX(psInfo->rect.miny, rect.miny);\n            rect.maxx = MIN(psInfo->rect.maxx, rect.maxx);\n            rect.maxy = MIN(psInfo->rect.maxy, rect.maxy);\n        }\n        psInfo->rect = rect;\n\n        bool bOffsetAlreadyAdded = false;\n        // use spatial index\n        if (psInfo->dialect) {\n            if (EQUAL(psInfo->dialect, \"PostgreSQL\")) {\n                if (filter) filter = msStringConcatenate(filter, \" AND\");\n                const char *col = OGR_L_GetGeometryColumn(psInfo->hLayer); // which geom field??\n                filter = msStringConcatenate(filter, \" (\");\n                filter = msStringConcatenate(filter, col);\n                filter = msStringConcatenate(filter, \" && ST_MakeEnvelope(\");\n                char *points = (char *)msSmallMalloc(30*2*5);\n                snprintf(points, 30*4, \"%lf,%lf,%lf,%lf\", rect.minx, rect.miny, rect.maxx, rect.maxy);\n                filter = msStringConcatenate(filter, points);\n                msFree(points);\n                filter = msStringConcatenate(filter, \"))\");\n            } else if (EQUAL(psInfo->dialect, \"Spatialite\")) {\n                if (filter) filter = msStringConcatenate(filter, \" AND\");\n                filter = msStringConcatenate(filter, \" \");\n                filter = msStringConcatenate(filter, psInfo->pszMainTableName);\n                filter = msStringConcatenate(filter, \".\");\n                const char* pszFIDColumn = OGR_L_GetFIDColumn(psInfo->hLayer);\n                if( psInfo->pszRowId )\n                  filter = msStringConcatenate(filter, psInfo->pszRowId);\n                else if( pszFIDColumn != NULL && pszFIDColumn[0] != '\\0' )\n                  filter = msStringConcatenate(filter, pszFIDColumn);\n                else\n                  filter = msStringConcatenate(filter, \"ROWID\");\n                filter = msStringConcatenate(filter, \" IN (SELECT ROWID FROM SpatialIndex WHERE f_table_name = '\");\n                filter = msStringConcatenate(filter, psInfo->pszSpatialFilterTableName);\n                filter = msStringConcatenate(filter, \"' \");\n                const char* pszGeometryColumn = OGR_L_GetGeometryColumn(psInfo->hLayer);\n                if( pszGeometryColumn != NULL && pszGeometryColumn[0] != '\\0' ) {\n                  filter = msStringConcatenate(filter, \"AND f_geometry_column = '\");\n                  filter = msStringConcatenate(filter, pszGeometryColumn);\n                  filter = msStringConcatenate(filter, \"' \");\n                }\n                filter = msStringConcatenate(filter, \"AND search_frame = GeomFromText('POLYGON((\");\n                char *points = (char *)msSmallMalloc(30*2*5);\n                snprintf(points, 30*2*5, \"%lf %lf,%lf %lf,%lf %lf,%lf %lf,%lf %lf\", rect.minx, rect.miny, rect.maxx, rect.miny, rect.maxx, rect.maxy, rect.minx, rect.maxy, rect.minx, rect.miny);\n                filter = msStringConcatenate(filter, points);\n                msFree(points);\n                filter = msStringConcatenate(filter, \"))')\");\n\n                // We put the limit in the sub-query, only if we don't have a\n                // order by later. We accept a startindex, provided there's no\n                // other attribute filter combined\n                if ( psInfo->bPaging && layer->maxfeatures >= 0 &&\n                    (layer->startindex <= 0 || layer->filter.native_string == NULL) &&\n                    layer->sortBy.nProperties == 0 )\n                {\n                    char szLimit[50];\n                    snprintf(szLimit, sizeof(szLimit), \" LIMIT %d\", layer->maxfeatures);\n                    filter = msStringConcatenate(filter, szLimit);\n\n                    if( layer->startindex > 0 && layer->filter.native_string == NULL )\n                    {\n                        bOffsetAlreadyAdded = true;\n                        char szOffset[50];\n                        snprintf(szOffset, sizeof(szOffset), \" OFFSET %d\", layer->startindex);\n                        filter = msStringConcatenate(filter, szOffset);\n                    }\n                }\n\n                filter = msStringConcatenate(filter, \")\");\n            }\n        }\n\n        /* get sortBy */\n        char *sort = NULL;\n        if( layer->sortBy.nProperties > 0) {\n\n            char *strOrderBy = msLayerBuildSQLOrderBy(layer);\n            if (strOrderBy) {\n                if( psInfo->nLayerIndex == -1 ) {\n                    if( strcasestr(psInfo->pszLayerDef, \" ORDER BY \") == NULL )\n                        sort = msStringConcatenate(sort, \" ORDER BY \");\n                    else\n                        sort = msStringConcatenate(sort, \", \");\n                } else {\n                    sort = msStringConcatenate(sort, \" ORDER BY \");\n                }\n                sort = msStringConcatenate(sort, strOrderBy);\n                msFree(strOrderBy);\n            }\n        }\n\n        // compose SQL\n        if (filter) {\n            select = msStringConcatenate(select, \" WHERE \");\n            select = msStringConcatenate(select, filter);\n            msFree(filter);\n        }\n        if (sort) {\n            select = msStringConcatenate(select, \" \");\n            select = msStringConcatenate(select, sort);\n            msFree(sort);\n        }\n\n        if ( psInfo->bPaging && layer->maxfeatures >= 0 ) {\n            char szLimit[50];\n            snprintf(szLimit, sizeof(szLimit), \" LIMIT %d\", layer->maxfeatures);\n            select = msStringConcatenate(select, szLimit);\n        }\n\n        if ( !bOffsetAlreadyAdded && psInfo->bPaging && layer->startindex > 0 ) {\n            char szOffset[50];\n            snprintf(szOffset, sizeof(szOffset), \" OFFSET %d\", layer->startindex);\n            select = msStringConcatenate(select, szOffset);\n        }\n\n        if( layer->debug )\n            msDebug(\"msOGRFileWhichShapes: SQL = %s.\\n\", select);\n\n        ACQUIRE_OGR_LOCK;\n        if( psInfo->nLayerIndex == -1 && psInfo->hLayer != NULL )\n        {\n          OGR_DS_ReleaseResultSet( psInfo->hDS, psInfo->hLayer );\n        }\n        psInfo->hLayer = OGR_DS_ExecuteSQL( psInfo->hDS, select, NULL, NULL );\n        psInfo->nLayerIndex = -1;\n\n        if( psInfo->hLayer == NULL ) {\n            RELEASE_OGR_LOCK;\n            msSetError(MS_OGRERR, \"ExecuteSQL(%s) failed.\\n%s\", \"msOGRFileWhichShapes()\", select, CPLGetLastErrorMsg());\n            msFree(select);\n            return MS_FAILURE;\n        }\n\n        // Update itemindexes / layer->iteminfo\n        msOGRLayerInitItemInfo(layer);\n    } \n    else {\n\n        // case of 1) GetLayer + SetFilter\n\n        char *pszOGRFilter = NULL;\n        if (msLayerGetProcessingKey(layer, \"NATIVE_FILTER\") != NULL) {\n            pszOGRFilter = msStringConcatenate(pszOGRFilter, \"(\");\n            pszOGRFilter = msStringConcatenate(pszOGRFilter, msLayerGetProcessingKey(layer, \"NATIVE_FILTER\"));\n            pszOGRFilter = msStringConcatenate(pszOGRFilter, \")\");\n        }\n\n        ACQUIRE_OGR_LOCK;\n\n        if( OGR_L_GetGeomType( psInfo->hLayer ) != wkbNone ) {\n            if (rect.minx == rect.maxx && rect.miny == rect.maxy) {\n                OGRGeometryH hSpatialFilterPoint = OGR_G_CreateGeometry( wkbPoint );\n\n                OGR_G_SetPoint_2D( hSpatialFilterPoint, 0, rect.minx, rect.miny );    \n                OGR_L_SetSpatialFilter( psInfo->hLayer, hSpatialFilterPoint );\n                OGR_G_DestroyGeometry( hSpatialFilterPoint );\n            } else if (rect.minx == rect.maxx || rect.miny == rect.maxy) {\n                OGRGeometryH hSpatialFilterLine = OGR_G_CreateGeometry( wkbLineString );\n\n                OGR_G_AddPoint_2D( hSpatialFilterLine, rect.minx, rect.miny );\n                OGR_G_AddPoint_2D( hSpatialFilterLine, rect.maxx, rect.maxy );\n                OGR_L_SetSpatialFilter( psInfo->hLayer, hSpatialFilterLine );\n                OGR_G_DestroyGeometry( hSpatialFilterLine );\n            } else {\n                OGRGeometryH hSpatialFilterPolygon = OGR_G_CreateGeometry( wkbPolygon );\n                OGRGeometryH hRing = OGR_G_CreateGeometry( wkbLinearRing );\n\n                OGR_G_AddPoint_2D( hRing, rect.minx, rect.miny);\n                OGR_G_AddPoint_2D( hRing, rect.maxx, rect.miny);\n                OGR_G_AddPoint_2D( hRing, rect.maxx, rect.maxy);\n                OGR_G_AddPoint_2D( hRing, rect.minx, rect.maxy);\n                OGR_G_AddPoint_2D( hRing, rect.minx, rect.miny);\n                OGR_G_AddGeometryDirectly( hSpatialFilterPolygon, hRing );\n                OGR_L_SetSpatialFilter( psInfo->hLayer, hSpatialFilterPolygon );\n                OGR_G_DestroyGeometry( hSpatialFilterPolygon );\n            }\n        }\n\n        psInfo->rect = rect;\n\n        if (layer->debug >= MS_DEBUGLEVEL_VVV)\n            msDebug(\"msOGRFileWhichShapes: Setting spatial filter to %f %f %f %f\\n\", rect.minx, rect.miny, rect.maxx, rect.maxy );\n\n        /* ------------------------------------------------------------------\n         * Apply an attribute filter if we have one prefixed with a WHERE\n         * keyword in the filter string.  Otherwise, ensure the attribute\n         * filter is clear.\n         * ------------------------------------------------------------------ */\n        if( pszOGRFilter != NULL ) {\n\n            if (layer->debug >= MS_DEBUGLEVEL_VVV)\n                msDebug(\"msOGRFileWhichShapes: Setting attribute filter to %s\\n\", pszOGRFilter );\n\n            CPLErrorReset();\n            if( OGR_L_SetAttributeFilter( psInfo->hLayer, pszOGRFilter ) != OGRERR_NONE ) {\n                msSetError(MS_OGRERR, \"SetAttributeFilter(%s) failed on layer %s.\\n%s\", \"msOGRFileWhichShapes()\", layer->filter.string+6, layer->name?layer->name:\"(null)\", CPLGetLastErrorMsg() );\n                RELEASE_OGR_LOCK;\n                msFree(pszOGRFilter);\n                msFree(select);\n                return MS_FAILURE;\n            }\n            msFree(pszOGRFilter);\n        } else\n            OGR_L_SetAttributeFilter( psInfo->hLayer, NULL );\n        \n    }\n\n    msFree(select);\n\n    /* ------------------------------------------------------------------\n     * Reset current feature pointer\n     * ------------------------------------------------------------------ */\n    OGR_L_ResetReading( psInfo->hLayer );\n    psInfo->last_record_index_read = -1;\n    \n    RELEASE_OGR_LOCK;\n  \n    return MS_SUCCESS;\n}",
  "abstract_func_before": "static int msOGRFileWhichShapes(layerObj *VAR_0, rectObj VAR_1, msOGRFileInfo *VAR_2)\n{\n    /* COMMENT_0 */\n    if (VAR_2 == NULL || VAR_2->hLayer == NULL) {\n        msSetError(VAR_3, \"Assertion failed: OGR layer not opened!!!\", \"msOGRFileWhichShapes()\");\n        return(VAR_4);\n    }\n\n    char *VAR_5 = (VAR_2->pszSelect) ? msStrdup(VAR_2->pszSelect) : NULL;\n\n    /* COMMENT_1 */\n    /* COMMENT_2 */\n    /* COMMENT_3 */\n    /* COMMENT_4 */\n\n    if ( VAR_2->bIsOKForSQLCompose && (VAR_2->nLayerIndex == -1 ||\n                                        VAR_0->sortBy.nProperties > 0 ||\n                                        VAR_0->filter.native_string ||\n                                        (VAR_2->bPaging && VAR_0->maxfeatures > 0)) ) {\n\n        if( VAR_2->nLayerIndex == -1 && VAR_5 == NULL ) {\n            VAR_5 = msStrdup(VAR_2->pszLayerDef);\n            /* COMMENT_5 */\n            OGR_DS_ReleaseResultSet( VAR_2->hDS, VAR_2->hLayer );\n            VAR_2->hLayer = NULL;\n        }\n        else if( VAR_5 == NULL ) {\n            const char* VAR_6;\n            int VAR_7;\n            VAR_5 = msStringConcatenate(VAR_5, \"SELECT \");\n            for(VAR_7 = 0; VAR_7 < VAR_0->numitems; VAR_7++) {\n                if( VAR_7 > 0 )\n                    VAR_5 = msStringConcatenate(VAR_5, \", \");\n                VAR_5 = msStringConcatenate(VAR_5, \"\\\"\");\n                VAR_5 = msStringConcatenate(VAR_5, VAR_0->items[VAR_7]);\n                VAR_5 = msStringConcatenate(VAR_5, \"\\\"\");\n            }\n            if( VAR_0->numitems > 0 )\n                VAR_5 = msStringConcatenate(VAR_5, \", \");\n            VAR_6 = OGR_L_GetGeometryColumn(VAR_2->hLayer);\n            if( VAR_6 != NULL && VAR_6[0] != '\\0' ) {\n                VAR_5 = msStringConcatenate(VAR_5, \"\\\"\");\n                VAR_5 = msStringConcatenate(VAR_5, VAR_6);\n                VAR_5 = msStringConcatenate(VAR_5, \"\\\"\");\n            } else {\n                /* COMMENT_6 */\n                VAR_5 = msStringConcatenate(VAR_5, \"*\");\n            }\n            VAR_5 = msStringConcatenate(VAR_5, \" FROM \");\n            if( VAR_2->nLayerIndex == -1 )\n            {\n              VAR_5 = msStringConcatenate(VAR_5, \"(\");\n              VAR_5 = msStringConcatenate(VAR_5, VAR_2->pszLayerDef);\n              VAR_5 = msStringConcatenate(VAR_5, \") MSSUBSELECT\");\n            }\n            else\n            {\n              VAR_5 = msStringConcatenate(VAR_5, \"\\\"\");\n              VAR_5 = msStringConcatenate(VAR_5, OGR_FD_GetName(OGR_L_GetLayerDefn(VAR_2->hLayer)));\n              VAR_5 = msStringConcatenate(VAR_5, \"\\\"\");\n            }\n        }\n\n        char *VAR_8 = NULL;\n\n        if (msLayerGetProcessingKey(VAR_0, \"NATIVE_FILTER\") != NULL) {\n            VAR_8 = msStringConcatenate(VAR_8, \"(\");\n            VAR_8 = msStringConcatenate(VAR_8, msLayerGetProcessingKey(VAR_0, \"NATIVE_FILTER\"));\n            VAR_8 = msStringConcatenate(VAR_8, \")\");\n        }\n\n        if (VAR_2->dialect) {\n            if (EQUAL(VAR_2->dialect, \"Spatialite\") || EQUAL(VAR_2->dialect, \"PostgreSQL\")) {\n                const char *VAR_9 = VAR_0->filter.native_string;\n                if (VAR_9 && *VAR_9 != '\\0') {\n                    if (VAR_8) VAR_8 = msStringConcatenate(VAR_8, \"AND \");\n                    VAR_8 = msStringConcatenate(VAR_8, \"(\");\n                    VAR_8 = msStringConcatenate(VAR_8, VAR_9);\n                    VAR_8 = msStringConcatenate(VAR_8, \")\");\n                }\n            }\n        }\n\n        /* COMMENT_7 */\n                                                                              \n                                                  \n          \n                                                                              \n                                                                                   \n                                                  \n                                                                                \n        if (VAR_2->rect_is_defined) {\n            VAR_1.minx = MAX(VAR_2->rect.minx, VAR_1.minx);\n            VAR_1.miny = MAX(VAR_2->rect.miny, VAR_1.miny);\n            VAR_1.maxx = MIN(VAR_2->rect.maxx, VAR_1.maxx);\n            VAR_1.maxy = MIN(VAR_2->rect.maxy, VAR_1.maxy);\n        }\n        VAR_2->rect = VAR_1;\n\n        bool VAR_10 = false;\n        /* COMMENT_15 */\n        if (VAR_2->dialect) {\n            if (EQUAL(VAR_2->dialect, \"PostgreSQL\")) {\n                if (VAR_8) VAR_8 = msStringConcatenate(VAR_8, \" AND\");\n                const char *VAR_11 = OGR_L_GetGeometryColumn(VAR_2->hLayer); /* COMMENT_16 */\n                VAR_8 = msStringConcatenate(VAR_8, \" (\");\n                VAR_8 = msStringConcatenate(VAR_8, VAR_11);\n                VAR_8 = msStringConcatenate(VAR_8, \" && ST_MakeEnvelope(\");\n                char *VAR_12 = (char *)msSmallMalloc(30*2*5);\n                snprintf(VAR_12, 30*4, \"%lf,%lf,%lf,%lf\", VAR_1.minx, VAR_1.miny, VAR_1.maxx, VAR_1.maxy);\n                VAR_8 = msStringConcatenate(VAR_8, VAR_12);\n                msFree(VAR_12);\n                VAR_8 = msStringConcatenate(VAR_8, \"))\");\n            } else if (EQUAL(VAR_2->dialect, \"Spatialite\")) {\n                if (VAR_8) VAR_8 = msStringConcatenate(VAR_8, \" AND\");\n                VAR_8 = msStringConcatenate(VAR_8, \" \");\n                VAR_8 = msStringConcatenate(VAR_8, VAR_2->pszMainTableName);\n                VAR_8 = msStringConcatenate(VAR_8, \".\");\n                const char* VAR_13 = OGR_L_GetFIDColumn(VAR_2->hLayer);\n                if( VAR_2->pszRowId )\n                  VAR_8 = msStringConcatenate(VAR_8, VAR_2->pszRowId);\n                else if( VAR_13 != NULL && VAR_13[0] != '\\0' )\n                  VAR_8 = msStringConcatenate(VAR_8, VAR_13);\n                else\n                  VAR_8 = msStringConcatenate(VAR_8, \"ROWID\");\n                VAR_8 = msStringConcatenate(VAR_8, \" IN (SELECT ROWID FROM SpatialIndex WHERE f_table_name = '\");\n                VAR_8 = msStringConcatenate(VAR_8, VAR_2->pszSpatialFilterTableName);\n                VAR_8 = msStringConcatenate(VAR_8, \"' \");\n                const char* VAR_6 = OGR_L_GetGeometryColumn(VAR_2->hLayer);\n                if( VAR_6 != NULL && VAR_6[0] != '\\0' ) {\n                  VAR_8 = msStringConcatenate(VAR_8, \"AND f_geometry_column = '\");\n                  VAR_8 = msStringConcatenate(VAR_8, VAR_6);\n                  VAR_8 = msStringConcatenate(VAR_8, \"' \");\n                }\n                VAR_8 = msStringConcatenate(VAR_8, \"AND search_frame = GeomFromText('POLYGON((\");\n                char *VAR_12 = (char *)msSmallMalloc(30*2*5);\n                snprintf(VAR_12, 30*2*5, \"%lf %lf,%lf %lf,%lf %lf,%lf %lf,%lf %lf\", VAR_1.minx, VAR_1.miny, VAR_1.maxx, VAR_1.miny, VAR_1.maxx, VAR_1.maxy, VAR_1.minx, VAR_1.maxy, VAR_1.minx, VAR_1.miny);\n                VAR_8 = msStringConcatenate(VAR_8, VAR_12);\n                msFree(VAR_12);\n                VAR_8 = msStringConcatenate(VAR_8, \"))')\");\n\n                /* COMMENT_17 */\n                /* COMMENT_18 */\n                /* COMMENT_19 */\n                if ( VAR_2->bPaging && VAR_0->maxfeatures >= 0 &&\n                    (VAR_0->startindex <= 0 || VAR_0->filter.native_string == NULL) &&\n                    VAR_0->sortBy.nProperties == 0 )\n                {\n                    char VAR_14[50];\n                    snprintf(VAR_14, sizeof(VAR_14), \" LIMIT %d\", VAR_0->maxfeatures);\n                    VAR_8 = msStringConcatenate(VAR_8, VAR_14);\n\n                    if( VAR_0->startindex > 0 && VAR_0->filter.native_string == NULL )\n                    {\n                        VAR_10 = true;\n                        char VAR_15[50];\n                        snprintf(VAR_15, sizeof(VAR_15), \" OFFSET %d\", VAR_0->startindex);\n                        VAR_8 = msStringConcatenate(VAR_8, VAR_15);\n                    }\n                }\n\n                VAR_8 = msStringConcatenate(VAR_8, \")\");\n            }\n        }\n\n        /* COMMENT_20 */\n        char *VAR_16 = NULL;\n        if( VAR_0->sortBy.nProperties > 0) {\n\n            char *VAR_17 = msLayerBuildSQLOrderBy(VAR_0);\n            if (VAR_17) {\n                if( VAR_2->nLayerIndex == -1 ) {\n                    if( strcasestr(VAR_2->pszLayerDef, \" ORDER BY \") == NULL )\n                        VAR_16 = msStringConcatenate(VAR_16, \" ORDER BY \");\n                    else\n                        VAR_16 = msStringConcatenate(VAR_16, \", \");\n                } else {\n                    VAR_16 = msStringConcatenate(VAR_16, \" ORDER BY \");\n                }\n                VAR_16 = msStringConcatenate(VAR_16, VAR_17);\n                msFree(VAR_17);\n            }\n        }\n\n        /* COMMENT_21 */\n        if (VAR_8) {\n            VAR_5 = msStringConcatenate(VAR_5, \" WHERE \");\n            VAR_5 = msStringConcatenate(VAR_5, VAR_8);\n            msFree(VAR_8);\n        }\n        if (VAR_16) {\n            VAR_5 = msStringConcatenate(VAR_5, \" \");\n            VAR_5 = msStringConcatenate(VAR_5, VAR_16);\n            msFree(VAR_16);\n        }\n\n        if ( VAR_2->bPaging && VAR_0->maxfeatures >= 0 ) {\n            char VAR_14[50];\n            snprintf(VAR_14, sizeof(VAR_14), \" LIMIT %d\", VAR_0->maxfeatures);\n            VAR_5 = msStringConcatenate(VAR_5, VAR_14);\n        }\n\n        if ( !VAR_10 && VAR_2->bPaging && VAR_0->startindex > 0 ) {\n            char VAR_15[50];\n            snprintf(VAR_15, sizeof(VAR_15), \" OFFSET %d\", VAR_0->startindex);\n            VAR_5 = msStringConcatenate(VAR_5, VAR_15);\n        }\n\n        if( VAR_0->debug )\n            msDebug(\"msOGRFileWhichShapes: SQL = %s.\\n\", VAR_5);\n\n        VAR_18;\n        if( VAR_2->nLayerIndex == -1 && VAR_2->hLayer != NULL )\n        {\n          OGR_DS_ReleaseResultSet( VAR_2->hDS, VAR_2->hLayer );\n        }\n        VAR_2->hLayer = OGR_DS_ExecuteSQL( VAR_2->hDS, VAR_5, NULL, NULL );\n        VAR_2->nLayerIndex = -1;\n\n        if( VAR_2->hLayer == NULL ) {\n            VAR_19;\n            msSetError(VAR_20, \"ExecuteSQL(%s) failed.\\n%s\", \"msOGRFileWhichShapes()\", VAR_5, CPLGetLastErrorMsg());\n            msFree(VAR_5);\n            return VAR_4;\n        }\n\n        /* COMMENT_22 */\n        msOGRLayerInitItemInfo(VAR_0);\n    } \n    else {\n\n        /* COMMENT_23 */\n\n        char *VAR_21 = NULL;\n        if (msLayerGetProcessingKey(VAR_0, \"NATIVE_FILTER\") != NULL) {\n            VAR_21 = msStringConcatenate(VAR_21, \"(\");\n            VAR_21 = msStringConcatenate(VAR_21, msLayerGetProcessingKey(VAR_0, \"NATIVE_FILTER\"));\n            VAR_21 = msStringConcatenate(VAR_21, \")\");\n        }\n\n        VAR_18;\n\n        if( OGR_L_GetGeomType( VAR_2->hLayer ) != VAR_22 ) {\n            if (VAR_1.minx == VAR_1.maxx && VAR_1.miny == VAR_1.maxy) {\n                OGRGeometryH VAR_23 = OGR_G_CreateGeometry( VAR_24 );\n\n                OGR_G_SetPoint_2D( VAR_23, 0, VAR_1.minx, VAR_1.miny );    \n                OGR_L_SetSpatialFilter( VAR_2->hLayer, VAR_23 );\n                OGR_G_DestroyGeometry( VAR_23 );\n            } else if (VAR_1.minx == VAR_1.maxx || VAR_1.miny == VAR_1.maxy) {\n                OGRGeometryH VAR_25 = OGR_G_CreateGeometry( VAR_26 );\n\n                OGR_G_AddPoint_2D( VAR_25, VAR_1.minx, VAR_1.miny );\n                OGR_G_AddPoint_2D( VAR_25, VAR_1.maxx, VAR_1.maxy );\n                OGR_L_SetSpatialFilter( VAR_2->hLayer, VAR_25 );\n                OGR_G_DestroyGeometry( VAR_25 );\n            } else {\n                OGRGeometryH VAR_27 = OGR_G_CreateGeometry( VAR_28 );\n                OGRGeometryH VAR_29 = OGR_G_CreateGeometry( VAR_30 );\n\n                OGR_G_AddPoint_2D( VAR_29, VAR_1.minx, VAR_1.miny);\n                OGR_G_AddPoint_2D( VAR_29, VAR_1.maxx, VAR_1.miny);\n                OGR_G_AddPoint_2D( VAR_29, VAR_1.maxx, VAR_1.maxy);\n                OGR_G_AddPoint_2D( VAR_29, VAR_1.minx, VAR_1.maxy);\n                OGR_G_AddPoint_2D( VAR_29, VAR_1.minx, VAR_1.miny);\n                OGR_G_AddGeometryDirectly( VAR_27, VAR_29 );\n                OGR_L_SetSpatialFilter( VAR_2->hLayer, VAR_27 );\n                OGR_G_DestroyGeometry( VAR_27 );\n            }\n        }\n\n        VAR_2->rect = VAR_1;\n\n        if (VAR_0->debug >= VAR_31)\n            msDebug(\"msOGRFileWhichShapes: Setting spatial filter to %f %f %f %f\\n\", VAR_1.minx, VAR_1.miny, VAR_1.maxx, VAR_1.maxy );\n\n        /* COMMENT_24 */\n                                                                         \n                                                                         \n                           \n                                                                                \n        if( VAR_21 != NULL ) {\n\n            if (VAR_0->debug >= VAR_31)\n                msDebug(\"msOGRFileWhichShapes: Setting attribute filter to %s\\n\", VAR_21 );\n\n            CPLErrorReset();\n            if( OGR_L_SetAttributeFilter( VAR_2->hLayer, VAR_21 ) != VAR_32 ) {\n                msSetError(VAR_20, \"SetAttributeFilter(%s) failed on layer %s.\\n%s\", \"msOGRFileWhichShapes()\", VAR_0->filter.string+6, VAR_0->name?VAR_0->name:\"(null)\", CPLGetLastErrorMsg() );\n                VAR_19;\n                msFree(VAR_21);\n                msFree(VAR_5);\n                return VAR_4;\n            }\n            msFree(VAR_21);\n        } else\n            OGR_L_SetAttributeFilter( VAR_2->hLayer, NULL );\n        \n    }\n\n    msFree(VAR_5);\n\n    /* COMMENT_29 */\n                                    \n                                                                            \n    OGR_L_ResetReading( VAR_2->hLayer );\n    VAR_2->last_record_index_read = -1;\n    \n    VAR_19;\n  \n    return VAR_33;\n}",
  "func_graph_path_before": "MapServer/3d52307cf0033e3275975b668b7138ba1343f28d/mapogr.cpp/vul/before/0.json",
  "func": "static int msOGRFileWhichShapes(layerObj *layer, rectObj rect, msOGRFileInfo *psInfo)\n{\n    // rect is from BBOX parameter in query (In lieu of a FEATUREID or FILTER) or mapfile somehow\n    if (psInfo == NULL || psInfo->hLayer == NULL) {\n        msSetError(MS_MISCERR, \"Assertion failed: OGR layer not opened!!!\", \"msOGRFileWhichShapes()\");\n        return(MS_FAILURE);\n    }\n\n    char *select = (psInfo->pszSelect) ? msStrdup(psInfo->pszSelect) : NULL;\n\n    // we'll go strictly two possible ways: \n    // 1) GetLayer + SetFilter\n    // 2) ExecuteSQL (psInfo->hLayer is an SQL result OR sortBy was requested OR have native_string\n    // and start from the second\n\n    if ( psInfo->bIsOKForSQLCompose && (psInfo->nLayerIndex == -1 ||\n                                        layer->sortBy.nProperties > 0 ||\n                                        layer->filter.native_string ||\n                                        (psInfo->bPaging && layer->maxfeatures > 0)) ) {\n\n        if( psInfo->nLayerIndex == -1 && select == NULL ) {\n            select = msStrdup(psInfo->pszLayerDef);\n            /* If nLayerIndex == -1 then the layer is an SQL result ... free it */\n            OGR_DS_ReleaseResultSet( psInfo->hDS, psInfo->hLayer );\n            psInfo->hLayer = NULL;\n        }\n        else if( select == NULL ) {\n            const char* pszGeometryColumn;\n            int i;\n            select = msStringConcatenate(select, \"SELECT \");\n            for(i = 0; i < layer->numitems; i++) {\n                if( i > 0 )\n                    select = msStringConcatenate(select, \", \");\n                select = msStringConcatenate(select, \"\\\"\");\n                select = msStringConcatenate(select, layer->items[i]);\n                select = msStringConcatenate(select, \"\\\"\");\n            }\n            if( layer->numitems > 0 )\n                select = msStringConcatenate(select, \", \");\n            pszGeometryColumn = OGR_L_GetGeometryColumn(psInfo->hLayer);\n            if( pszGeometryColumn != NULL && pszGeometryColumn[0] != '\\0' ) {\n                select = msStringConcatenate(select, \"\\\"\");\n                select = msStringConcatenate(select, pszGeometryColumn);\n                select = msStringConcatenate(select, \"\\\"\");\n            } else {\n                /* Add \", *\" so that we still have an hope to get the geometry */\n                select = msStringConcatenate(select, \"*\");\n            }\n            select = msStringConcatenate(select, \" FROM \");\n            if( psInfo->nLayerIndex == -1 )\n            {\n              select = msStringConcatenate(select, \"(\");\n              select = msStringConcatenate(select, psInfo->pszLayerDef);\n              select = msStringConcatenate(select, \") MSSUBSELECT\");\n            }\n            else\n            {\n              select = msStringConcatenate(select, \"\\\"\");\n              select = msStringConcatenate(select, OGR_FD_GetName(OGR_L_GetLayerDefn(psInfo->hLayer)));\n              select = msStringConcatenate(select, \"\\\"\");\n            }\n        }\n\n        char *filter = NULL;\n\n        if (msLayerGetProcessingKey(layer, \"NATIVE_FILTER\") != NULL) {\n            filter = msStringConcatenate(filter, \"(\");\n            filter = msStringConcatenate(filter, msLayerGetProcessingKey(layer, \"NATIVE_FILTER\"));\n            filter = msStringConcatenate(filter, \")\");\n        }\n\n        if (psInfo->dialect) {\n            if (EQUAL(psInfo->dialect, \"Spatialite\") || EQUAL(psInfo->dialect, \"PostgreSQL\")) {\n                const char *sql = layer->filter.native_string;\n                if (sql && *sql != '\\0') {\n                    if (filter) filter = msStringConcatenate(filter, \"AND \");\n                    filter = msStringConcatenate(filter, \"(\");\n                    filter = msStringConcatenate(filter, sql);\n                    filter = msStringConcatenate(filter, \")\");\n                }\n            }\n        }\n\n        /* ------------------------------------------------------------------\n         * Set Spatial filter... this may result in no features being returned\n         * if layer does not overlap current view.\n         *\n         * __TODO__ We should return MS_DONE if no shape overlaps the selected\n         * region and matches the layer's FILTER expression, but there is currently\n         * no _efficient_ way to do that with OGR.\n         * ------------------------------------------------------------------ */\n        if (psInfo->rect_is_defined) {\n            rect.minx = MAX(psInfo->rect.minx, rect.minx);\n            rect.miny = MAX(psInfo->rect.miny, rect.miny);\n            rect.maxx = MIN(psInfo->rect.maxx, rect.maxx);\n            rect.maxy = MIN(psInfo->rect.maxy, rect.maxy);\n        }\n        psInfo->rect = rect;\n\n        bool bOffsetAlreadyAdded = false;\n        // use spatial index\n        if (psInfo->dialect) {\n            if (EQUAL(psInfo->dialect, \"PostgreSQL\")) {\n                if (filter) filter = msStringConcatenate(filter, \" AND\");\n                const char *col = OGR_L_GetGeometryColumn(psInfo->hLayer); // which geom field??\n                filter = msStringConcatenate(filter, \" (\");\n                filter = msStringConcatenate(filter, col);\n                filter = msStringConcatenate(filter, \" && ST_MakeEnvelope(\");\n                char *points = (char *)msSmallMalloc(30*2*5);\n                snprintf(points, 30*4, \"%lf,%lf,%lf,%lf\", rect.minx, rect.miny, rect.maxx, rect.maxy);\n                filter = msStringConcatenate(filter, points);\n                msFree(points);\n                filter = msStringConcatenate(filter, \"))\");\n            } else if (EQUAL(psInfo->dialect, \"Spatialite\")) {\n                if (filter) filter = msStringConcatenate(filter, \" AND\");\n                filter = msStringConcatenate(filter, \" \");\n                filter = msStringConcatenate(filter, psInfo->pszMainTableName);\n                filter = msStringConcatenate(filter, \".\");\n                const char* pszFIDColumn = OGR_L_GetFIDColumn(psInfo->hLayer);\n                if( psInfo->pszRowId )\n                  filter = msStringConcatenate(filter, psInfo->pszRowId);\n                else if( pszFIDColumn != NULL && pszFIDColumn[0] != '\\0' )\n                  filter = msStringConcatenate(filter, pszFIDColumn);\n                else\n                  filter = msStringConcatenate(filter, \"ROWID\");\n                filter = msStringConcatenate(filter, \" IN (SELECT ROWID FROM SpatialIndex WHERE f_table_name = '\");\n                filter = msStringConcatenate(filter, psInfo->pszSpatialFilterTableName);\n                filter = msStringConcatenate(filter, \"' \");\n                const char* pszGeometryColumn = OGR_L_GetGeometryColumn(psInfo->hLayer);\n                if( pszGeometryColumn != NULL && pszGeometryColumn[0] != '\\0' ) {\n                  filter = msStringConcatenate(filter, \"AND f_geometry_column = '\");\n                  filter = msStringConcatenate(filter, pszGeometryColumn);\n                  filter = msStringConcatenate(filter, \"' \");\n                }\n                filter = msStringConcatenate(filter, \"AND search_frame = GeomFromText('POLYGON((\");\n                char *points = (char *)msSmallMalloc(30*2*5);\n                snprintf(points, 30*2*5, \"%lf %lf,%lf %lf,%lf %lf,%lf %lf,%lf %lf\", rect.minx, rect.miny, rect.maxx, rect.miny, rect.maxx, rect.maxy, rect.minx, rect.maxy, rect.minx, rect.miny);\n                filter = msStringConcatenate(filter, points);\n                msFree(points);\n                filter = msStringConcatenate(filter, \"))')\");\n\n                // We put the limit in the sub-query, only if we don't have a\n                // order by later. We accept a startindex, provided there's no\n                // other attribute filter combined\n                if ( psInfo->bPaging && layer->maxfeatures >= 0 &&\n                    (layer->startindex <= 0 || layer->filter.native_string == NULL) &&\n                    layer->sortBy.nProperties == 0 )\n                {\n                    char szLimit[50];\n                    snprintf(szLimit, sizeof(szLimit), \" LIMIT %d\", layer->maxfeatures);\n                    filter = msStringConcatenate(filter, szLimit);\n\n                    if( layer->startindex > 0 && layer->filter.native_string == NULL )\n                    {\n                        bOffsetAlreadyAdded = true;\n                        char szOffset[50];\n                        snprintf(szOffset, sizeof(szOffset), \" OFFSET %d\", layer->startindex);\n                        filter = msStringConcatenate(filter, szOffset);\n                    }\n                }\n\n                filter = msStringConcatenate(filter, \")\");\n            }\n        }\n\n        /* get sortBy */\n        char *sort = NULL;\n        if( layer->sortBy.nProperties > 0) {\n\n            char *strOrderBy = msLayerBuildSQLOrderBy(layer);\n            if (strOrderBy) {\n                if( psInfo->nLayerIndex == -1 ) {\n                    if( strcasestr(psInfo->pszLayerDef, \" ORDER BY \") == NULL )\n                        sort = msStringConcatenate(sort, \" ORDER BY \");\n                    else\n                        sort = msStringConcatenate(sort, \", \");\n                } else {\n                    sort = msStringConcatenate(sort, \" ORDER BY \");\n                }\n                sort = msStringConcatenate(sort, strOrderBy);\n                msFree(strOrderBy);\n            }\n        }\n\n        // compose SQL\n        if (filter) {\n            select = msStringConcatenate(select, \" WHERE \");\n            select = msStringConcatenate(select, filter);\n            msFree(filter);\n        }\n        if (sort) {\n            select = msStringConcatenate(select, \" \");\n            select = msStringConcatenate(select, sort);\n            msFree(sort);\n        }\n\n        if ( psInfo->bPaging && layer->maxfeatures >= 0 ) {\n            char szLimit[50];\n            snprintf(szLimit, sizeof(szLimit), \" LIMIT %d\", layer->maxfeatures);\n            select = msStringConcatenate(select, szLimit);\n        }\n\n        if ( !bOffsetAlreadyAdded && psInfo->bPaging && layer->startindex > 0 ) {\n            char szOffset[50];\n            snprintf(szOffset, sizeof(szOffset), \" OFFSET %d\", layer->startindex);\n            select = msStringConcatenate(select, szOffset);\n        }\n\n        if( layer->debug )\n            msDebug(\"msOGRFileWhichShapes: SQL = %s.\\n\", select);\n\n        ACQUIRE_OGR_LOCK;\n        if( psInfo->nLayerIndex == -1 && psInfo->hLayer != NULL )\n        {\n          OGR_DS_ReleaseResultSet( psInfo->hDS, psInfo->hLayer );\n        }\n        psInfo->hLayer = OGR_DS_ExecuteSQL( psInfo->hDS, select, NULL, NULL );\n        psInfo->nLayerIndex = -1;\n\n        if( psInfo->hLayer == NULL ) {\n            RELEASE_OGR_LOCK;\n            msSetError(MS_OGRERR, \"ExecuteSQL() failed. Check logs.\", \"msOGRFileWhichShapes()\");\n            msDebug(\"ExecuteSQL(%s) failed.\\n%s\\n\", select, CPLGetLastErrorMsg());\n            msFree(select);\n            return MS_FAILURE;\n        }\n\n        // Update itemindexes / layer->iteminfo\n        msOGRLayerInitItemInfo(layer);\n    } \n    else {\n\n        // case of 1) GetLayer + SetFilter\n\n        char *pszOGRFilter = NULL;\n        if (msLayerGetProcessingKey(layer, \"NATIVE_FILTER\") != NULL) {\n            pszOGRFilter = msStringConcatenate(pszOGRFilter, \"(\");\n            pszOGRFilter = msStringConcatenate(pszOGRFilter, msLayerGetProcessingKey(layer, \"NATIVE_FILTER\"));\n            pszOGRFilter = msStringConcatenate(pszOGRFilter, \")\");\n        }\n\n        ACQUIRE_OGR_LOCK;\n\n        if( OGR_L_GetGeomType( psInfo->hLayer ) != wkbNone ) {\n            if (rect.minx == rect.maxx && rect.miny == rect.maxy) {\n                OGRGeometryH hSpatialFilterPoint = OGR_G_CreateGeometry( wkbPoint );\n\n                OGR_G_SetPoint_2D( hSpatialFilterPoint, 0, rect.minx, rect.miny );    \n                OGR_L_SetSpatialFilter( psInfo->hLayer, hSpatialFilterPoint );\n                OGR_G_DestroyGeometry( hSpatialFilterPoint );\n            } else if (rect.minx == rect.maxx || rect.miny == rect.maxy) {\n                OGRGeometryH hSpatialFilterLine = OGR_G_CreateGeometry( wkbLineString );\n\n                OGR_G_AddPoint_2D( hSpatialFilterLine, rect.minx, rect.miny );\n                OGR_G_AddPoint_2D( hSpatialFilterLine, rect.maxx, rect.maxy );\n                OGR_L_SetSpatialFilter( psInfo->hLayer, hSpatialFilterLine );\n                OGR_G_DestroyGeometry( hSpatialFilterLine );\n            } else {\n                OGRGeometryH hSpatialFilterPolygon = OGR_G_CreateGeometry( wkbPolygon );\n                OGRGeometryH hRing = OGR_G_CreateGeometry( wkbLinearRing );\n\n                OGR_G_AddPoint_2D( hRing, rect.minx, rect.miny);\n                OGR_G_AddPoint_2D( hRing, rect.maxx, rect.miny);\n                OGR_G_AddPoint_2D( hRing, rect.maxx, rect.maxy);\n                OGR_G_AddPoint_2D( hRing, rect.minx, rect.maxy);\n                OGR_G_AddPoint_2D( hRing, rect.minx, rect.miny);\n                OGR_G_AddGeometryDirectly( hSpatialFilterPolygon, hRing );\n                OGR_L_SetSpatialFilter( psInfo->hLayer, hSpatialFilterPolygon );\n                OGR_G_DestroyGeometry( hSpatialFilterPolygon );\n            }\n        }\n\n        psInfo->rect = rect;\n\n        if (layer->debug >= MS_DEBUGLEVEL_VVV)\n            msDebug(\"msOGRFileWhichShapes: Setting spatial filter to %f %f %f %f\\n\", rect.minx, rect.miny, rect.maxx, rect.maxy );\n\n        /* ------------------------------------------------------------------\n         * Apply an attribute filter if we have one prefixed with a WHERE\n         * keyword in the filter string.  Otherwise, ensure the attribute\n         * filter is clear.\n         * ------------------------------------------------------------------ */\n        if( pszOGRFilter != NULL ) {\n\n            if (layer->debug >= MS_DEBUGLEVEL_VVV)\n                msDebug(\"msOGRFileWhichShapes: Setting attribute filter to %s\\n\", pszOGRFilter );\n\n            CPLErrorReset();\n            if( OGR_L_SetAttributeFilter( psInfo->hLayer, pszOGRFilter ) != OGRERR_NONE ) {\n                msSetError(MS_OGRERR, \"SetAttributeFilter() failed on layer %s. Check logs.\", \"msOGRFileWhichShapes()\", layer->name?layer->name:\"(null)\");\n                msDebug(\"SetAttributeFilter(%s) failed on layer %s.\\n%s\\n\", layer->filter.string+6, layer->name?layer->name:\"(null)\", CPLGetLastErrorMsg() );\n                RELEASE_OGR_LOCK;\n                msFree(pszOGRFilter);\n                msFree(select);\n                return MS_FAILURE;\n            }\n            msFree(pszOGRFilter);\n        } else\n            OGR_L_SetAttributeFilter( psInfo->hLayer, NULL );\n        \n    }\n\n    msFree(select);\n\n    /* ------------------------------------------------------------------\n     * Reset current feature pointer\n     * ------------------------------------------------------------------ */\n    OGR_L_ResetReading( psInfo->hLayer );\n    psInfo->last_record_index_read = -1;\n    \n    RELEASE_OGR_LOCK;\n  \n    return MS_SUCCESS;\n}",
  "abstract_func": "static int msOGRFileWhichShapes(layerObj *VAR_0, rectObj VAR_1, msOGRFileInfo *VAR_2)\n{\n    /* COMMENT_0 */\n    if (VAR_2 == NULL || VAR_2->hLayer == NULL) {\n        msSetError(VAR_3, \"Assertion failed: OGR layer not opened!!!\", \"msOGRFileWhichShapes()\");\n        return(VAR_4);\n    }\n\n    char *VAR_5 = (VAR_2->pszSelect) ? msStrdup(VAR_2->pszSelect) : NULL;\n\n    /* COMMENT_1 */\n    /* COMMENT_2 */\n    /* COMMENT_3 */\n    /* COMMENT_4 */\n\n    if ( VAR_2->bIsOKForSQLCompose && (VAR_2->nLayerIndex == -1 ||\n                                        VAR_0->sortBy.nProperties > 0 ||\n                                        VAR_0->filter.native_string ||\n                                        (VAR_2->bPaging && VAR_0->maxfeatures > 0)) ) {\n\n        if( VAR_2->nLayerIndex == -1 && VAR_5 == NULL ) {\n            VAR_5 = msStrdup(VAR_2->pszLayerDef);\n            /* COMMENT_5 */\n            OGR_DS_ReleaseResultSet( VAR_2->hDS, VAR_2->hLayer );\n            VAR_2->hLayer = NULL;\n        }\n        else if( VAR_5 == NULL ) {\n            const char* VAR_6;\n            int VAR_7;\n            VAR_5 = msStringConcatenate(VAR_5, \"SELECT \");\n            for(VAR_7 = 0; VAR_7 < VAR_0->numitems; VAR_7++) {\n                if( VAR_7 > 0 )\n                    VAR_5 = msStringConcatenate(VAR_5, \", \");\n                VAR_5 = msStringConcatenate(VAR_5, \"\\\"\");\n                VAR_5 = msStringConcatenate(VAR_5, VAR_0->items[VAR_7]);\n                VAR_5 = msStringConcatenate(VAR_5, \"\\\"\");\n            }\n            if( VAR_0->numitems > 0 )\n                VAR_5 = msStringConcatenate(VAR_5, \", \");\n            VAR_6 = OGR_L_GetGeometryColumn(VAR_2->hLayer);\n            if( VAR_6 != NULL && VAR_6[0] != '\\0' ) {\n                VAR_5 = msStringConcatenate(VAR_5, \"\\\"\");\n                VAR_5 = msStringConcatenate(VAR_5, VAR_6);\n                VAR_5 = msStringConcatenate(VAR_5, \"\\\"\");\n            } else {\n                /* COMMENT_6 */\n                VAR_5 = msStringConcatenate(VAR_5, \"*\");\n            }\n            VAR_5 = msStringConcatenate(VAR_5, \" FROM \");\n            if( VAR_2->nLayerIndex == -1 )\n            {\n              VAR_5 = msStringConcatenate(VAR_5, \"(\");\n              VAR_5 = msStringConcatenate(VAR_5, VAR_2->pszLayerDef);\n              VAR_5 = msStringConcatenate(VAR_5, \") MSSUBSELECT\");\n            }\n            else\n            {\n              VAR_5 = msStringConcatenate(VAR_5, \"\\\"\");\n              VAR_5 = msStringConcatenate(VAR_5, OGR_FD_GetName(OGR_L_GetLayerDefn(VAR_2->hLayer)));\n              VAR_5 = msStringConcatenate(VAR_5, \"\\\"\");\n            }\n        }\n\n        char *VAR_8 = NULL;\n\n        if (msLayerGetProcessingKey(VAR_0, \"NATIVE_FILTER\") != NULL) {\n            VAR_8 = msStringConcatenate(VAR_8, \"(\");\n            VAR_8 = msStringConcatenate(VAR_8, msLayerGetProcessingKey(VAR_0, \"NATIVE_FILTER\"));\n            VAR_8 = msStringConcatenate(VAR_8, \")\");\n        }\n\n        if (VAR_2->dialect) {\n            if (EQUAL(VAR_2->dialect, \"Spatialite\") || EQUAL(VAR_2->dialect, \"PostgreSQL\")) {\n                const char *VAR_9 = VAR_0->filter.native_string;\n                if (VAR_9 && *VAR_9 != '\\0') {\n                    if (VAR_8) VAR_8 = msStringConcatenate(VAR_8, \"AND \");\n                    VAR_8 = msStringConcatenate(VAR_8, \"(\");\n                    VAR_8 = msStringConcatenate(VAR_8, VAR_9);\n                    VAR_8 = msStringConcatenate(VAR_8, \")\");\n                }\n            }\n        }\n\n        /* COMMENT_7 */\n                                                                              \n                                                  \n          \n                                                                              \n                                                                                   \n                                                  \n                                                                                \n        if (VAR_2->rect_is_defined) {\n            VAR_1.minx = MAX(VAR_2->rect.minx, VAR_1.minx);\n            VAR_1.miny = MAX(VAR_2->rect.miny, VAR_1.miny);\n            VAR_1.maxx = MIN(VAR_2->rect.maxx, VAR_1.maxx);\n            VAR_1.maxy = MIN(VAR_2->rect.maxy, VAR_1.maxy);\n        }\n        VAR_2->rect = VAR_1;\n\n        bool VAR_10 = false;\n        /* COMMENT_15 */\n        if (VAR_2->dialect) {\n            if (EQUAL(VAR_2->dialect, \"PostgreSQL\")) {\n                if (VAR_8) VAR_8 = msStringConcatenate(VAR_8, \" AND\");\n                const char *VAR_11 = OGR_L_GetGeometryColumn(VAR_2->hLayer); /* COMMENT_16 */\n                VAR_8 = msStringConcatenate(VAR_8, \" (\");\n                VAR_8 = msStringConcatenate(VAR_8, VAR_11);\n                VAR_8 = msStringConcatenate(VAR_8, \" && ST_MakeEnvelope(\");\n                char *VAR_12 = (char *)msSmallMalloc(30*2*5);\n                snprintf(VAR_12, 30*4, \"%lf,%lf,%lf,%lf\", VAR_1.minx, VAR_1.miny, VAR_1.maxx, VAR_1.maxy);\n                VAR_8 = msStringConcatenate(VAR_8, VAR_12);\n                msFree(VAR_12);\n                VAR_8 = msStringConcatenate(VAR_8, \"))\");\n            } else if (EQUAL(VAR_2->dialect, \"Spatialite\")) {\n                if (VAR_8) VAR_8 = msStringConcatenate(VAR_8, \" AND\");\n                VAR_8 = msStringConcatenate(VAR_8, \" \");\n                VAR_8 = msStringConcatenate(VAR_8, VAR_2->pszMainTableName);\n                VAR_8 = msStringConcatenate(VAR_8, \".\");\n                const char* VAR_13 = OGR_L_GetFIDColumn(VAR_2->hLayer);\n                if( VAR_2->pszRowId )\n                  VAR_8 = msStringConcatenate(VAR_8, VAR_2->pszRowId);\n                else if( VAR_13 != NULL && VAR_13[0] != '\\0' )\n                  VAR_8 = msStringConcatenate(VAR_8, VAR_13);\n                else\n                  VAR_8 = msStringConcatenate(VAR_8, \"ROWID\");\n                VAR_8 = msStringConcatenate(VAR_8, \" IN (SELECT ROWID FROM SpatialIndex WHERE f_table_name = '\");\n                VAR_8 = msStringConcatenate(VAR_8, VAR_2->pszSpatialFilterTableName);\n                VAR_8 = msStringConcatenate(VAR_8, \"' \");\n                const char* VAR_6 = OGR_L_GetGeometryColumn(VAR_2->hLayer);\n                if( VAR_6 != NULL && VAR_6[0] != '\\0' ) {\n                  VAR_8 = msStringConcatenate(VAR_8, \"AND f_geometry_column = '\");\n                  VAR_8 = msStringConcatenate(VAR_8, VAR_6);\n                  VAR_8 = msStringConcatenate(VAR_8, \"' \");\n                }\n                VAR_8 = msStringConcatenate(VAR_8, \"AND search_frame = GeomFromText('POLYGON((\");\n                char *VAR_12 = (char *)msSmallMalloc(30*2*5);\n                snprintf(VAR_12, 30*2*5, \"%lf %lf,%lf %lf,%lf %lf,%lf %lf,%lf %lf\", VAR_1.minx, VAR_1.miny, VAR_1.maxx, VAR_1.miny, VAR_1.maxx, VAR_1.maxy, VAR_1.minx, VAR_1.maxy, VAR_1.minx, VAR_1.miny);\n                VAR_8 = msStringConcatenate(VAR_8, VAR_12);\n                msFree(VAR_12);\n                VAR_8 = msStringConcatenate(VAR_8, \"))')\");\n\n                /* COMMENT_17 */\n                /* COMMENT_18 */\n                /* COMMENT_19 */\n                if ( VAR_2->bPaging && VAR_0->maxfeatures >= 0 &&\n                    (VAR_0->startindex <= 0 || VAR_0->filter.native_string == NULL) &&\n                    VAR_0->sortBy.nProperties == 0 )\n                {\n                    char VAR_14[50];\n                    snprintf(VAR_14, sizeof(VAR_14), \" LIMIT %d\", VAR_0->maxfeatures);\n                    VAR_8 = msStringConcatenate(VAR_8, VAR_14);\n\n                    if( VAR_0->startindex > 0 && VAR_0->filter.native_string == NULL )\n                    {\n                        VAR_10 = true;\n                        char VAR_15[50];\n                        snprintf(VAR_15, sizeof(VAR_15), \" OFFSET %d\", VAR_0->startindex);\n                        VAR_8 = msStringConcatenate(VAR_8, VAR_15);\n                    }\n                }\n\n                VAR_8 = msStringConcatenate(VAR_8, \")\");\n            }\n        }\n\n        /* COMMENT_20 */\n        char *VAR_16 = NULL;\n        if( VAR_0->sortBy.nProperties > 0) {\n\n            char *VAR_17 = msLayerBuildSQLOrderBy(VAR_0);\n            if (VAR_17) {\n                if( VAR_2->nLayerIndex == -1 ) {\n                    if( strcasestr(VAR_2->pszLayerDef, \" ORDER BY \") == NULL )\n                        VAR_16 = msStringConcatenate(VAR_16, \" ORDER BY \");\n                    else\n                        VAR_16 = msStringConcatenate(VAR_16, \", \");\n                } else {\n                    VAR_16 = msStringConcatenate(VAR_16, \" ORDER BY \");\n                }\n                VAR_16 = msStringConcatenate(VAR_16, VAR_17);\n                msFree(VAR_17);\n            }\n        }\n\n        /* COMMENT_21 */\n        if (VAR_8) {\n            VAR_5 = msStringConcatenate(VAR_5, \" WHERE \");\n            VAR_5 = msStringConcatenate(VAR_5, VAR_8);\n            msFree(VAR_8);\n        }\n        if (VAR_16) {\n            VAR_5 = msStringConcatenate(VAR_5, \" \");\n            VAR_5 = msStringConcatenate(VAR_5, VAR_16);\n            msFree(VAR_16);\n        }\n\n        if ( VAR_2->bPaging && VAR_0->maxfeatures >= 0 ) {\n            char VAR_14[50];\n            snprintf(VAR_14, sizeof(VAR_14), \" LIMIT %d\", VAR_0->maxfeatures);\n            VAR_5 = msStringConcatenate(VAR_5, VAR_14);\n        }\n\n        if ( !VAR_10 && VAR_2->bPaging && VAR_0->startindex > 0 ) {\n            char VAR_15[50];\n            snprintf(VAR_15, sizeof(VAR_15), \" OFFSET %d\", VAR_0->startindex);\n            VAR_5 = msStringConcatenate(VAR_5, VAR_15);\n        }\n\n        if( VAR_0->debug )\n            msDebug(\"msOGRFileWhichShapes: SQL = %s.\\n\", VAR_5);\n\n        VAR_18;\n        if( VAR_2->nLayerIndex == -1 && VAR_2->hLayer != NULL )\n        {\n          OGR_DS_ReleaseResultSet( VAR_2->hDS, VAR_2->hLayer );\n        }\n        VAR_2->hLayer = OGR_DS_ExecuteSQL( VAR_2->hDS, VAR_5, NULL, NULL );\n        VAR_2->nLayerIndex = -1;\n\n        if( VAR_2->hLayer == NULL ) {\n            VAR_19;\n            msSetError(VAR_20, \"ExecuteSQL() failed. Check logs.\", \"msOGRFileWhichShapes()\");\n            msDebug(\"ExecuteSQL(%s) failed.\\n%s\\n\", VAR_5, CPLGetLastErrorMsg());\n            msFree(VAR_5);\n            return VAR_4;\n        }\n\n        /* COMMENT_22 */\n        msOGRLayerInitItemInfo(VAR_0);\n    } \n    else {\n\n        /* COMMENT_23 */\n\n        char *VAR_21 = NULL;\n        if (msLayerGetProcessingKey(VAR_0, \"NATIVE_FILTER\") != NULL) {\n            VAR_21 = msStringConcatenate(VAR_21, \"(\");\n            VAR_21 = msStringConcatenate(VAR_21, msLayerGetProcessingKey(VAR_0, \"NATIVE_FILTER\"));\n            VAR_21 = msStringConcatenate(VAR_21, \")\");\n        }\n\n        VAR_18;\n\n        if( OGR_L_GetGeomType( VAR_2->hLayer ) != VAR_22 ) {\n            if (VAR_1.minx == VAR_1.maxx && VAR_1.miny == VAR_1.maxy) {\n                OGRGeometryH VAR_23 = OGR_G_CreateGeometry( VAR_24 );\n\n                OGR_G_SetPoint_2D( VAR_23, 0, VAR_1.minx, VAR_1.miny );    \n                OGR_L_SetSpatialFilter( VAR_2->hLayer, VAR_23 );\n                OGR_G_DestroyGeometry( VAR_23 );\n            } else if (VAR_1.minx == VAR_1.maxx || VAR_1.miny == VAR_1.maxy) {\n                OGRGeometryH VAR_25 = OGR_G_CreateGeometry( VAR_26 );\n\n                OGR_G_AddPoint_2D( VAR_25, VAR_1.minx, VAR_1.miny );\n                OGR_G_AddPoint_2D( VAR_25, VAR_1.maxx, VAR_1.maxy );\n                OGR_L_SetSpatialFilter( VAR_2->hLayer, VAR_25 );\n                OGR_G_DestroyGeometry( VAR_25 );\n            } else {\n                OGRGeometryH VAR_27 = OGR_G_CreateGeometry( VAR_28 );\n                OGRGeometryH VAR_29 = OGR_G_CreateGeometry( VAR_30 );\n\n                OGR_G_AddPoint_2D( VAR_29, VAR_1.minx, VAR_1.miny);\n                OGR_G_AddPoint_2D( VAR_29, VAR_1.maxx, VAR_1.miny);\n                OGR_G_AddPoint_2D( VAR_29, VAR_1.maxx, VAR_1.maxy);\n                OGR_G_AddPoint_2D( VAR_29, VAR_1.minx, VAR_1.maxy);\n                OGR_G_AddPoint_2D( VAR_29, VAR_1.minx, VAR_1.miny);\n                OGR_G_AddGeometryDirectly( VAR_27, VAR_29 );\n                OGR_L_SetSpatialFilter( VAR_2->hLayer, VAR_27 );\n                OGR_G_DestroyGeometry( VAR_27 );\n            }\n        }\n\n        VAR_2->rect = VAR_1;\n\n        if (VAR_0->debug >= VAR_31)\n            msDebug(\"msOGRFileWhichShapes: Setting spatial filter to %f %f %f %f\\n\", VAR_1.minx, VAR_1.miny, VAR_1.maxx, VAR_1.maxy );\n\n        /* COMMENT_24 */\n                                                                         \n                                                                         \n                           \n                                                                                \n        if( VAR_21 != NULL ) {\n\n            if (VAR_0->debug >= VAR_31)\n                msDebug(\"msOGRFileWhichShapes: Setting attribute filter to %s\\n\", VAR_21 );\n\n            CPLErrorReset();\n            if( OGR_L_SetAttributeFilter( VAR_2->hLayer, VAR_21 ) != VAR_32 ) {\n                msSetError(VAR_20, \"SetAttributeFilter() failed on layer %s. Check logs.\", \"msOGRFileWhichShapes()\", VAR_0->name?VAR_0->name:\"(null)\");\n                msDebug(\"SetAttributeFilter(%s) failed on layer %s.\\n%s\\n\", VAR_0->filter.string+6, VAR_0->name?VAR_0->name:\"(null)\", CPLGetLastErrorMsg() );\n                VAR_19;\n                msFree(VAR_21);\n                msFree(VAR_5);\n                return VAR_4;\n            }\n            msFree(VAR_21);\n        } else\n            OGR_L_SetAttributeFilter( VAR_2->hLayer, NULL );\n        \n    }\n\n    msFree(VAR_5);\n\n    /* COMMENT_29 */\n                                    \n                                                                            \n    OGR_L_ResetReading( VAR_2->hLayer );\n    VAR_2->last_record_index_read = -1;\n    \n    VAR_19;\n  \n    return VAR_33;\n}",
  "func_graph_path": "MapServer/3d52307cf0033e3275975b668b7138ba1343f28d/mapogr.cpp/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -219,7 +219,8 @@\n \n         if( psInfo->hLayer == NULL ) {\n             RELEASE_OGR_LOCK;\n-            msSetError(MS_OGRERR, \"ExecuteSQL(%s) failed.\\n%s\", \"msOGRFileWhichShapes()\", select, CPLGetLastErrorMsg());\n+            msSetError(MS_OGRERR, \"ExecuteSQL() failed. Check logs.\", \"msOGRFileWhichShapes()\");\n+            msDebug(\"ExecuteSQL(%s) failed.\\n%s\\n\", select, CPLGetLastErrorMsg());\n             msFree(select);\n             return MS_FAILURE;\n         }\n@@ -286,7 +287,8 @@\n \n             CPLErrorReset();\n             if( OGR_L_SetAttributeFilter( psInfo->hLayer, pszOGRFilter ) != OGRERR_NONE ) {\n-                msSetError(MS_OGRERR, \"SetAttributeFilter(%s) failed on layer %s.\\n%s\", \"msOGRFileWhichShapes()\", layer->filter.string+6, layer->name?layer->name:\"(null)\", CPLGetLastErrorMsg() );\n+                msSetError(MS_OGRERR, \"SetAttributeFilter() failed on layer %s. Check logs.\", \"msOGRFileWhichShapes()\", layer->name?layer->name:\"(null)\");\n+                msDebug(\"SetAttributeFilter(%s) failed on layer %s.\\n%s\\n\", layer->filter.string+6, layer->name?layer->name:\"(null)\", CPLGetLastErrorMsg() );\n                 RELEASE_OGR_LOCK;\n                 msFree(pszOGRFilter);\n                 msFree(select);",
  "diff_line_info": {
    "deleted_lines": [
      "            msSetError(MS_OGRERR, \"ExecuteSQL(%s) failed.\\n%s\", \"msOGRFileWhichShapes()\", select, CPLGetLastErrorMsg());",
      "                msSetError(MS_OGRERR, \"SetAttributeFilter(%s) failed on layer %s.\\n%s\", \"msOGRFileWhichShapes()\", layer->filter.string+6, layer->name?layer->name:\"(null)\", CPLGetLastErrorMsg() );"
    ],
    "added_lines": [
      "            msSetError(MS_OGRERR, \"ExecuteSQL() failed. Check logs.\", \"msOGRFileWhichShapes()\");",
      "            msDebug(\"ExecuteSQL(%s) failed.\\n%s\\n\", select, CPLGetLastErrorMsg());",
      "                msSetError(MS_OGRERR, \"SetAttributeFilter() failed on layer %s. Check logs.\", \"msOGRFileWhichShapes()\", layer->name?layer->name:\"(null)\");",
      "                msDebug(\"SetAttributeFilter(%s) failed on layer %s.\\n%s\\n\", layer->filter.string+6, layer->name?layer->name:\"(null)\", CPLGetLastErrorMsg() );"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/MapServer/MapServer/pull/5356",
  "description": {
    "pr_info": {
      "title": "OGR error messages too verbose",
      "number": 5356
    },
    "comment": [
      "Error messages created by the OGR driver may leak too much information. See http://gis.stackexchange.com/questions/219426/mapserver-hide-ogr-exception\r\nSame issue as #4928 but for OGR"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 0.95"
}