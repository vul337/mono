{
  "cve_id": "CVE-2023-22458",
  "cwe_ids": [
    "CWE-190"
  ],
  "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H",
  "cvss_is_v3": true,
  "repo_name": "redis",
  "commit_msg": "Fix range issues in ZRANDMEMBER and HRANDFIELD (CVE-2023-22458) (#11674)\n\nmissing range check in ZRANDMEMBER and HRANDIFLD leading to panic due\r\nto protocol limitations",
  "commit_hash": "16f408b1a0121cacd44cbf8aee275d69dc627f02",
  "git_url": "https://github.com/redis/redis/commit/16f408b1a0121cacd44cbf8aee275d69dc627f02",
  "file_path": "src/t_hash.c",
  "func_name": "hrandfieldCommand",
  "func_before": "void hrandfieldCommand(client *c) {\n    long l;\n    int withvalues = 0;\n    robj *hash;\n    listpackEntry ele;\n\n    if (c->argc >= 3) {\n        if (getLongFromObjectOrReply(c,c->argv[2],&l,NULL) != C_OK) return;\n        if (c->argc > 4 || (c->argc == 4 && strcasecmp(c->argv[3]->ptr,\"withvalues\"))) {\n            addReplyErrorObject(c,shared.syntaxerr);\n            return;\n        } else if (c->argc == 4)\n            withvalues = 1;\n        hrandfieldWithCountCommand(c, l, withvalues);\n        return;\n    }\n\n    /* Handle variant without <count> argument. Reply with simple bulk string */\n    if ((hash = lookupKeyReadOrReply(c,c->argv[1],shared.null[c->resp]))== NULL ||\n        checkType(c,hash,OBJ_HASH)) {\n        return;\n    }\n\n    hashTypeRandomElement(hash,hashTypeLength(hash),&ele,NULL);\n    hashReplyFromListpackEntry(c, &ele);\n}",
  "abstract_func_before": "void hrandfieldCommand(client *VAR_0) {\n    long VAR_1;\n    int VAR_2 = 0;\n    robj *VAR_3;\n    listpackEntry VAR_4;\n\n    if (VAR_0->argc >= 3) {\n        if (getLongFromObjectOrReply(VAR_0,VAR_0->argv[2],&VAR_1,NULL) != VAR_5) return;\n        if (VAR_0->argc > 4 || (VAR_0->argc == 4 && strcasecmp(VAR_0->argv[3]->ptr,\"withvalues\"))) {\n            addReplyErrorObject(VAR_0,VAR_6.syntaxerr);\n            return;\n        } else if (VAR_0->argc == 4)\n            VAR_2 = 1;\n        hrandfieldWithCountCommand(VAR_0, VAR_1, VAR_2);\n        return;\n    }\n\n    /* COMMENT_0 */\n    if ((VAR_3 = lookupKeyReadOrReply(VAR_0,VAR_0->argv[1],VAR_6.null[VAR_0->resp]))== NULL ||\n        checkType(VAR_0,VAR_3,VAR_7)) {\n        return;\n    }\n\n    hashTypeRandomElement(VAR_3,hashTypeLength(VAR_3),&VAR_4,NULL);\n    hashReplyFromListpackEntry(VAR_0, &VAR_4);\n}",
  "func_graph_path_before": "redis/16f408b1a0121cacd44cbf8aee275d69dc627f02/t_hash.c/vul/before/0.json",
  "func": "void hrandfieldCommand(client *c) {\n    long l;\n    int withvalues = 0;\n    robj *hash;\n    listpackEntry ele;\n\n    if (c->argc >= 3) {\n        if (getLongFromObjectOrReply(c,c->argv[2],&l,NULL) != C_OK) return;\n        if (c->argc > 4 || (c->argc == 4 && strcasecmp(c->argv[3]->ptr,\"withvalues\"))) {\n            addReplyErrorObject(c,shared.syntaxerr);\n            return;\n        } else if (c->argc == 4) {\n            withvalues = 1;\n            if (l < LONG_MIN/2 || l > LONG_MAX/2) {\n                addReplyError(c,\"value is out of range\");\n                return;\n            }\n        }\n        hrandfieldWithCountCommand(c, l, withvalues);\n        return;\n    }\n\n    /* Handle variant without <count> argument. Reply with simple bulk string */\n    if ((hash = lookupKeyReadOrReply(c,c->argv[1],shared.null[c->resp]))== NULL ||\n        checkType(c,hash,OBJ_HASH)) {\n        return;\n    }\n\n    hashTypeRandomElement(hash,hashTypeLength(hash),&ele,NULL);\n    hashReplyFromListpackEntry(c, &ele);\n}",
  "abstract_func": "void hrandfieldCommand(client *VAR_0) {\n    long VAR_1;\n    int VAR_2 = 0;\n    robj *VAR_3;\n    listpackEntry VAR_4;\n\n    if (VAR_0->argc >= 3) {\n        if (getLongFromObjectOrReply(VAR_0,VAR_0->argv[2],&VAR_1,NULL) != VAR_5) return;\n        if (VAR_0->argc > 4 || (VAR_0->argc == 4 && strcasecmp(VAR_0->argv[3]->ptr,\"withvalues\"))) {\n            addReplyErrorObject(VAR_0,VAR_6.syntaxerr);\n            return;\n        } else if (VAR_0->argc == 4) {\n            VAR_2 = 1;\n            if (VAR_1 < VAR_7/2 || VAR_1 > VAR_8/2) {\n                addReplyError(VAR_0,\"value is out of range\");\n                return;\n            }\n        }\n        hrandfieldWithCountCommand(VAR_0, VAR_1, VAR_2);\n        return;\n    }\n\n    /* COMMENT_0 */\n    if ((VAR_3 = lookupKeyReadOrReply(VAR_0,VAR_0->argv[1],VAR_6.null[VAR_0->resp]))== NULL ||\n        checkType(VAR_0,VAR_3,VAR_9)) {\n        return;\n    }\n\n    hashTypeRandomElement(VAR_3,hashTypeLength(VAR_3),&VAR_4,NULL);\n    hashReplyFromListpackEntry(VAR_0, &VAR_4);\n}",
  "func_graph_path": "redis/16f408b1a0121cacd44cbf8aee275d69dc627f02/t_hash.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -9,8 +9,13 @@\n         if (c->argc > 4 || (c->argc == 4 && strcasecmp(c->argv[3]->ptr,\"withvalues\"))) {\n             addReplyErrorObject(c,shared.syntaxerr);\n             return;\n-        } else if (c->argc == 4)\n+        } else if (c->argc == 4) {\n             withvalues = 1;\n+            if (l < LONG_MIN/2 || l > LONG_MAX/2) {\n+                addReplyError(c,\"value is out of range\");\n+                return;\n+            }\n+        }\n         hrandfieldWithCountCommand(c, l, withvalues);\n         return;\n     }",
  "diff_line_info": {
    "deleted_lines": [
      "        } else if (c->argc == 4)"
    ],
    "added_lines": [
      "        } else if (c->argc == 4) {",
      "            if (l < LONG_MIN/2 || l > LONG_MAX/2) {",
      "                addReplyError(c,\"value is out of range\");",
      "                return;",
      "            }",
      "        }"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/redis/redis/pull/11674",
  "description": {
    "pr_info": {
      "title": "Fix range issues in ZRANDMEMBER and HRANDFIELD (CVE-2023-22458)",
      "number": 11674
    },
    "comment": [
      "missing range check in ZRANDMEMBER and HRANDIFLD leading to panic due\r\nto protocol limitations\r\n\r\nfixes #11670",
      "@oranagra Thank you for the incredibly prompt fix for these commands! Just checked the PR and those crashes are mitigated (and the `srandmember` does cause a hang now). Haven't gone through the code though.\r\n\r\nBTW, after this is merged, do you think the 3 crashes (#11669, #11668, #11670) would be assigned 3 cves? I'm in the middle of some research and might need some cve records. Thanks in advance :)",
      "I'll ask @yossigo to respond about opening CVEs.\r\n@yype, btw, it would have been better to report these by email see https://github.com/redis/redis/blob/unstable/SECURITY.md",
      "> I'll ask @yossigo to respond about opening CVEs. @yype, btw, it would have been better to report these by email see https://github.com/redis/redis/blob/unstable/SECURITY.md\r\n\r\nThanks! And sorry about that, I will try to follow the security reporting guideline next time.",
      "I've moved the SRANDMEMBER fix to #11685 to be next to another fix of unreleased bug that originated form the same change.\r\nand slightly improved the SETRANGE fix and test.",
      "moved part of the content of this PR to #11720 (different topics)"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 0.95"
}