{
  "cve_id": "CVE-2016-4074",
  "cwe_ids": [
    "CWE-770"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:N/I:N/A:C",
  "cvss_is_v3": false,
  "repo_name": "jqlang/jq",
  "commit_msg": "Skip printing what's below a MAX_PRINT_DEPTH\n\nThis addresses #1136, and mitigates a stack exhaustion when printing\na very deeply nested term.",
  "commit_hash": "83e2cf607f3599d208b6b3129092fa7deb2e5292",
  "git_url": "https://github.com/jqlang/jq/commit/83e2cf607f3599d208b6b3129092fa7deb2e5292",
  "file_path": "src/jv_print.c",
  "func_name": "jv_dump_term",
  "func_before": "static void jv_dump_term(struct dtoa_context* C, jv x, int flags, int indent, FILE* F, jv* S) {\n  char buf[JVP_DTOA_FMT_MAX_LEN];\n  const char* color = 0;\n  double refcnt = (flags & JV_PRINT_REFCOUNT) ? jv_get_refcnt(x) - 1 : -1;\n  if (flags & JV_PRINT_COLOR) {\n    for (unsigned i=0; i<sizeof(color_kinds)/sizeof(color_kinds[0]); i++) {\n      if (jv_get_kind(x) == color_kinds[i]) {\n        color = colors[i];\n        put_str(color, F, S, flags & JV_PRINT_ISATTY);\n        break;\n      }\n    }\n  }\n  switch (jv_get_kind(x)) {\n  default:\n  case JV_KIND_INVALID:\n    if (flags & JV_PRINT_INVALID) {\n      jv msg = jv_invalid_get_msg(jv_copy(x));\n      if (jv_get_kind(msg) == JV_KIND_STRING) {\n        put_str(\"<invalid:\", F, S, flags & JV_PRINT_ISATTY);\n        jvp_dump_string(msg, flags | JV_PRINT_ASCII, F, S, flags & JV_PRINT_ISATTY);\n        put_str(\">\", F, S, flags & JV_PRINT_ISATTY);\n      } else {\n        put_str(\"<invalid>\", F, S, flags & JV_PRINT_ISATTY);\n      }\n    } else {\n      assert(0 && \"Invalid value\");\n    }\n    break;\n  case JV_KIND_NULL:\n    put_str(\"null\", F, S, flags & JV_PRINT_ISATTY);\n    break;\n  case JV_KIND_FALSE:\n    put_str(\"false\", F, S, flags & JV_PRINT_ISATTY);\n    break;\n  case JV_KIND_TRUE:\n    put_str(\"true\", F, S, flags & JV_PRINT_ISATTY);\n    break;\n  case JV_KIND_NUMBER: {\n    double d = jv_number_value(x);\n    if (d != d) {\n      // JSON doesn't have NaN, so we'll render it as \"null\"\n      put_str(\"null\", F, S, flags & JV_PRINT_ISATTY);\n    } else {\n      // Normalise infinities to something we can print in valid JSON\n      if (d > DBL_MAX) d = DBL_MAX;\n      if (d < -DBL_MAX) d = -DBL_MAX;\n      put_str(jvp_dtoa_fmt(C, buf, d), F, S, flags & JV_PRINT_ISATTY);\n    }\n    break;\n  }\n  case JV_KIND_STRING:\n    jvp_dump_string(x, flags & JV_PRINT_ASCII, F, S, flags & JV_PRINT_ISATTY);\n    if (flags & JV_PRINT_REFCOUNT)\n      put_refcnt(C, refcnt, F, S, flags & JV_PRINT_ISATTY);\n    break;\n  case JV_KIND_ARRAY: {\n    if (jv_array_length(jv_copy(x)) == 0) {\n      put_str(\"[]\", F, S, flags & JV_PRINT_ISATTY);\n      break;\n    }\n    put_str(\"[\", F, S, flags & JV_PRINT_ISATTY);\n    if (flags & JV_PRINT_PRETTY) {\n      put_char('\\n', F, S, flags & JV_PRINT_ISATTY);\n      put_indent(indent + 1, flags, F, S, flags & JV_PRINT_ISATTY);\n    }\n    jv_array_foreach(x, i, elem) {\n      if (i!=0) {\n        if (flags & JV_PRINT_PRETTY) {\n          put_str(\",\\n\", F, S, flags & JV_PRINT_ISATTY);\n          put_indent(indent + 1, flags, F, S, flags & JV_PRINT_ISATTY);\n        } else {\n          put_str(\",\", F, S, flags & JV_PRINT_ISATTY);\n        }\n      }\n      jv_dump_term(C, elem, flags, indent + 1, F, S);\n      if (color) put_str(color, F, S, flags & JV_PRINT_ISATTY);\n    }\n    if (flags & JV_PRINT_PRETTY) {\n      put_char('\\n', F, S, flags & JV_PRINT_ISATTY);\n      put_indent(indent, flags, F, S, flags & JV_PRINT_ISATTY);\n    }\n    if (color) put_str(color, F, S, flags & JV_PRINT_ISATTY);\n    put_char(']', F, S, flags & JV_PRINT_ISATTY);\n    if (flags & JV_PRINT_REFCOUNT)\n      put_refcnt(C, refcnt, F, S, flags & JV_PRINT_ISATTY);\n    break;\n  }\n  case JV_KIND_OBJECT: {\n    if (jv_object_length(jv_copy(x)) == 0) {\n      put_str(\"{}\", F, S, flags & JV_PRINT_ISATTY);\n      break;\n    }\n    put_char('{', F, S, flags & JV_PRINT_ISATTY);\n    if (flags & JV_PRINT_PRETTY) {\n      put_char('\\n', F, S, flags & JV_PRINT_ISATTY);\n      put_indent(indent + 1, flags, F, S, flags & JV_PRINT_ISATTY);\n    }\n    int first = 1;\n    int i = 0;\n    jv keyset = jv_null();\n    while (1) {\n      jv key, value;\n      if (flags & JV_PRINT_SORTED) {\n        if (first) {\n          keyset = jv_keys(jv_copy(x));\n          i = 0;\n        } else {\n          i++;\n        }\n        if (i >= jv_array_length(jv_copy(keyset))) {\n          jv_free(keyset);\n          break;\n        }\n        key = jv_array_get(jv_copy(keyset), i);\n        value = jv_object_get(jv_copy(x), jv_copy(key));\n      } else {\n        if (first) {\n          i = jv_object_iter(x);\n        } else {\n          i = jv_object_iter_next(x, i);\n        }\n        if (!jv_object_iter_valid(x, i)) break;\n        key = jv_object_iter_key(x, i);\n        value = jv_object_iter_value(x, i);\n      }\n\n      if (!first) {\n        if (flags & JV_PRINT_PRETTY){\n          put_str(\",\\n\", F, S, flags & JV_PRINT_ISATTY);\n          put_indent(indent + 1, flags, F, S, flags & JV_PRINT_ISATTY);\n        } else {\n          put_str(\",\", F, S, flags & JV_PRINT_ISATTY);\n        }\n      }\n      if (color) put_str(COLRESET, F, S, flags & JV_PRINT_ISATTY);\n\n      first = 0;\n      if (color) put_str(FIELD_COLOR, F, S, flags & JV_PRINT_ISATTY);\n      jvp_dump_string(key, flags & JV_PRINT_ASCII, F, S, flags & JV_PRINT_ISATTY);\n      jv_free(key);\n      if (color) put_str(COLRESET, F, S, flags & JV_PRINT_ISATTY);\n\n      if (color) put_str(color, F, S, flags & JV_PRINT_ISATTY);\n      put_str((flags & JV_PRINT_PRETTY) ? \": \" : \":\", F, S, flags & JV_PRINT_ISATTY);\n      if (color) put_str(COLRESET, F, S, flags & JV_PRINT_ISATTY);\n\n      jv_dump_term(C, value, flags, indent + 1, F, S);\n      if (color) put_str(color, F, S, flags & JV_PRINT_ISATTY);\n    }\n    if (flags & JV_PRINT_PRETTY) {\n      put_char('\\n', F, S, flags & JV_PRINT_ISATTY);\n      put_indent(indent, flags, F, S, flags & JV_PRINT_ISATTY);\n    }\n    if (color) put_str(color, F, S, flags & JV_PRINT_ISATTY);\n    put_char('}', F, S, flags & JV_PRINT_ISATTY);\n    if (flags & JV_PRINT_REFCOUNT)\n      put_refcnt(C, refcnt, F, S, flags & JV_PRINT_ISATTY);\n  }\n  }\n  jv_free(x);\n  if (color) {\n    put_str(COLRESET, F, S, flags & JV_PRINT_ISATTY);\n  }\n}",
  "abstract_func_before": "static void jv_dump_term(struct dtoa_context* VAR_0, jv VAR_1, int VAR_2, int VAR_3, FILE* VAR_4, jv* VAR_5) {\n  char VAR_6[VAR_7];\n  const char* VAR_8 = 0;\n  double VAR_9 = (VAR_2 & VAR_10) ? jv_get_refcnt(VAR_1) - 1 : -1;\n  if (VAR_2 & VAR_11) {\n    for (unsigned VAR_12=0; VAR_12<sizeof(color_kinds)/sizeof(color_kinds[0]); VAR_12++) {\n      if (jv_get_kind(VAR_1) == color_kinds[VAR_12]) {\n        VAR_8 = VAR_13[VAR_12];\n        put_str(VAR_8, VAR_4, VAR_5, VAR_2 & VAR_14);\n        break;\n      }\n    }\n  }\n  switch (jv_get_kind(VAR_1)) {\n  default:\n  case VAR_15:\n    if (VAR_2 & VAR_16) {\n      jv VAR_17 = jv_invalid_get_msg(jv_copy(VAR_1));\n      if (jv_get_kind(VAR_17) == VAR_18) {\n        put_str(\"<invalid:\", VAR_4, VAR_5, VAR_2 & VAR_14);\n        jvp_dump_string(VAR_17, VAR_2 | VAR_19, VAR_4, VAR_5, VAR_2 & VAR_14);\n        put_str(\">\", VAR_4, VAR_5, VAR_2 & VAR_14);\n      } else {\n        put_str(\"<invalid>\", VAR_4, VAR_5, VAR_2 & VAR_14);\n      }\n    } else {\n      assert(0 && \"Invalid value\");\n    }\n    break;\n  case VAR_20:\n    put_str(\"null\", VAR_4, VAR_5, VAR_2 & VAR_14);\n    break;\n  case VAR_21:\n    put_str(\"false\", VAR_4, VAR_5, VAR_2 & VAR_14);\n    break;\n  case VAR_22:\n    put_str(\"true\", VAR_4, VAR_5, VAR_2 & VAR_14);\n    break;\n  case VAR_23: {\n    double VAR_24 = jv_number_value(VAR_1);\n    if (VAR_24 != VAR_24) {\n      /* COMMENT_0 */\n      put_str(\"null\", VAR_4, VAR_5, VAR_2 & VAR_14);\n    } else {\n      /* COMMENT_1 */\n      if (VAR_24 > VAR_25) VAR_24 = VAR_25;\n      if (VAR_24 < -VAR_25) VAR_24 = -VAR_25;\n      put_str(jvp_dtoa_fmt(VAR_0, VAR_6, VAR_24), VAR_4, VAR_5, VAR_2 & VAR_14);\n    }\n    break;\n  }\n  case VAR_18:\n    jvp_dump_string(VAR_1, VAR_2 & VAR_19, VAR_4, VAR_5, VAR_2 & VAR_14);\n    if (VAR_2 & VAR_10)\n      put_refcnt(VAR_0, VAR_9, VAR_4, VAR_5, VAR_2 & VAR_14);\n    break;\n  case VAR_26: {\n    if (jv_array_length(jv_copy(VAR_1)) == 0) {\n      put_str(\"[]\", VAR_4, VAR_5, VAR_2 & VAR_14);\n      break;\n    }\n    put_str(\"[\", VAR_4, VAR_5, VAR_2 & VAR_14);\n    if (VAR_2 & VAR_27) {\n      put_char('\\n', VAR_4, VAR_5, VAR_2 & VAR_14);\n      put_indent(VAR_3 + 1, VAR_2, VAR_4, VAR_5, VAR_2 & VAR_14);\n    }\n    jv_array_foreach(VAR_1, VAR_12, VAR_28) {\n      if (VAR_12!=0) {\n        if (VAR_2 & VAR_27) {\n          put_str(\",\\n\", VAR_4, VAR_5, VAR_2 & VAR_14);\n          put_indent(VAR_3 + 1, VAR_2, VAR_4, VAR_5, VAR_2 & VAR_14);\n        } else {\n          put_str(\",\", VAR_4, VAR_5, VAR_2 & VAR_14);\n        }\n      }\n      jv_dump_term(VAR_0, VAR_28, VAR_2, VAR_3 + 1, VAR_4, VAR_5);\n      if (VAR_8) put_str(VAR_8, VAR_4, VAR_5, VAR_2 & VAR_14);\n    }\n    if (VAR_2 & VAR_27) {\n      put_char('\\n', VAR_4, VAR_5, VAR_2 & VAR_14);\n      put_indent(VAR_3, VAR_2, VAR_4, VAR_5, VAR_2 & VAR_14);\n    }\n    if (VAR_8) put_str(VAR_8, VAR_4, VAR_5, VAR_2 & VAR_14);\n    put_char(']', VAR_4, VAR_5, VAR_2 & VAR_14);\n    if (VAR_2 & VAR_10)\n      put_refcnt(VAR_0, VAR_9, VAR_4, VAR_5, VAR_2 & VAR_14);\n    break;\n  }\n  case VAR_29: {\n    if (jv_object_length(jv_copy(VAR_1)) == 0) {\n      put_str(\"{}\", VAR_4, VAR_5, VAR_2 & VAR_14);\n      break;\n    }\n    put_char('{', VAR_4, VAR_5, VAR_2 & VAR_14);\n    if (VAR_2 & VAR_27) {\n      put_char('\\n', VAR_4, VAR_5, VAR_2 & VAR_14);\n      put_indent(VAR_3 + 1, VAR_2, VAR_4, VAR_5, VAR_2 & VAR_14);\n    }\n    int VAR_30 = 1;\n    int VAR_12 = 0;\n    jv VAR_31 = jv_null();\n    while (1) {\n      jv VAR_32, VAR_33;\n      if (VAR_2 & VAR_34) {\n        if (VAR_30) {\n          VAR_31 = jv_keys(jv_copy(VAR_1));\n          VAR_12 = 0;\n        } else {\n          VAR_12++;\n        }\n        if (VAR_12 >= jv_array_length(jv_copy(VAR_31))) {\n          jv_free(VAR_31);\n          break;\n        }\n        VAR_32 = jv_array_get(jv_copy(VAR_31), VAR_12);\n        VAR_33 = jv_object_get(jv_copy(VAR_1), jv_copy(VAR_32));\n      } else {\n        if (VAR_30) {\n          VAR_12 = jv_object_iter(VAR_1);\n        } else {\n          VAR_12 = jv_object_iter_next(VAR_1, VAR_12);\n        }\n        if (!jv_object_iter_valid(VAR_1, VAR_12)) break;\n        VAR_32 = jv_object_iter_key(VAR_1, VAR_12);\n        VAR_33 = jv_object_iter_value(VAR_1, VAR_12);\n      }\n\n      if (!VAR_30) {\n        if (VAR_2 & VAR_27){\n          put_str(\",\\n\", VAR_4, VAR_5, VAR_2 & VAR_14);\n          put_indent(VAR_3 + 1, VAR_2, VAR_4, VAR_5, VAR_2 & VAR_14);\n        } else {\n          put_str(\",\", VAR_4, VAR_5, VAR_2 & VAR_14);\n        }\n      }\n      if (VAR_8) put_str(VAR_35, VAR_4, VAR_5, VAR_2 & VAR_14);\n\n      VAR_30 = 0;\n      if (VAR_8) put_str(VAR_36, VAR_4, VAR_5, VAR_2 & VAR_14);\n      jvp_dump_string(VAR_32, VAR_2 & VAR_19, VAR_4, VAR_5, VAR_2 & VAR_14);\n      jv_free(VAR_32);\n      if (VAR_8) put_str(VAR_35, VAR_4, VAR_5, VAR_2 & VAR_14);\n\n      if (VAR_8) put_str(VAR_8, VAR_4, VAR_5, VAR_2 & VAR_14);\n      put_str((VAR_2 & VAR_27) ? \": \" : \":\", VAR_4, VAR_5, VAR_2 & VAR_14);\n      if (VAR_8) put_str(VAR_35, VAR_4, VAR_5, VAR_2 & VAR_14);\n\n      jv_dump_term(VAR_0, VAR_33, VAR_2, VAR_3 + 1, VAR_4, VAR_5);\n      if (VAR_8) put_str(VAR_8, VAR_4, VAR_5, VAR_2 & VAR_14);\n    }\n    if (VAR_2 & VAR_27) {\n      put_char('\\n', VAR_4, VAR_5, VAR_2 & VAR_14);\n      put_indent(VAR_3, VAR_2, VAR_4, VAR_5, VAR_2 & VAR_14);\n    }\n    if (VAR_8) put_str(VAR_8, VAR_4, VAR_5, VAR_2 & VAR_14);\n    put_char('}', VAR_4, VAR_5, VAR_2 & VAR_14);\n    if (VAR_2 & VAR_10)\n      put_refcnt(VAR_0, VAR_9, VAR_4, VAR_5, VAR_2 & VAR_14);\n  }\n  }\n  jv_free(VAR_1);\n  if (VAR_8) {\n    put_str(VAR_35, VAR_4, VAR_5, VAR_2 & VAR_14);\n  }\n}",
  "func_graph_path_before": "jqlang/jq/83e2cf607f3599d208b6b3129092fa7deb2e5292/jv_print.c/vul/before/0.json",
  "func": "static void jv_dump_term(struct dtoa_context* C, jv x, int flags, int indent, FILE* F, jv* S) {\n  char buf[JVP_DTOA_FMT_MAX_LEN];\n  const char* color = 0;\n  double refcnt = (flags & JV_PRINT_REFCOUNT) ? jv_get_refcnt(x) - 1 : -1;\n  if (flags & JV_PRINT_COLOR) {\n    for (unsigned i=0; i<sizeof(color_kinds)/sizeof(color_kinds[0]); i++) {\n      if (jv_get_kind(x) == color_kinds[i]) {\n        color = colors[i];\n        put_str(color, F, S, flags & JV_PRINT_ISATTY);\n        break;\n      }\n    }\n  }\n  if (indent > MAX_PRINT_DEPTH) {\n    put_str(\"<skipped: too deep>\", F, S, flags & JV_PRINT_ISATTY);\n  } else switch (jv_get_kind(x)) {\n  default:\n  case JV_KIND_INVALID:\n    if (flags & JV_PRINT_INVALID) {\n      jv msg = jv_invalid_get_msg(jv_copy(x));\n      if (jv_get_kind(msg) == JV_KIND_STRING) {\n        put_str(\"<invalid:\", F, S, flags & JV_PRINT_ISATTY);\n        jvp_dump_string(msg, flags | JV_PRINT_ASCII, F, S, flags & JV_PRINT_ISATTY);\n        put_str(\">\", F, S, flags & JV_PRINT_ISATTY);\n      } else {\n        put_str(\"<invalid>\", F, S, flags & JV_PRINT_ISATTY);\n      }\n    } else {\n      assert(0 && \"Invalid value\");\n    }\n    break;\n  case JV_KIND_NULL:\n    put_str(\"null\", F, S, flags & JV_PRINT_ISATTY);\n    break;\n  case JV_KIND_FALSE:\n    put_str(\"false\", F, S, flags & JV_PRINT_ISATTY);\n    break;\n  case JV_KIND_TRUE:\n    put_str(\"true\", F, S, flags & JV_PRINT_ISATTY);\n    break;\n  case JV_KIND_NUMBER: {\n    double d = jv_number_value(x);\n    if (d != d) {\n      // JSON doesn't have NaN, so we'll render it as \"null\"\n      put_str(\"null\", F, S, flags & JV_PRINT_ISATTY);\n    } else {\n      // Normalise infinities to something we can print in valid JSON\n      if (d > DBL_MAX) d = DBL_MAX;\n      if (d < -DBL_MAX) d = -DBL_MAX;\n      put_str(jvp_dtoa_fmt(C, buf, d), F, S, flags & JV_PRINT_ISATTY);\n    }\n    break;\n  }\n  case JV_KIND_STRING:\n    jvp_dump_string(x, flags & JV_PRINT_ASCII, F, S, flags & JV_PRINT_ISATTY);\n    if (flags & JV_PRINT_REFCOUNT)\n      put_refcnt(C, refcnt, F, S, flags & JV_PRINT_ISATTY);\n    break;\n  case JV_KIND_ARRAY: {\n    if (jv_array_length(jv_copy(x)) == 0) {\n      put_str(\"[]\", F, S, flags & JV_PRINT_ISATTY);\n      break;\n    }\n    put_str(\"[\", F, S, flags & JV_PRINT_ISATTY);\n    if (flags & JV_PRINT_PRETTY) {\n      put_char('\\n', F, S, flags & JV_PRINT_ISATTY);\n      put_indent(indent + 1, flags, F, S, flags & JV_PRINT_ISATTY);\n    }\n    jv_array_foreach(x, i, elem) {\n      if (i!=0) {\n        if (flags & JV_PRINT_PRETTY) {\n          put_str(\",\\n\", F, S, flags & JV_PRINT_ISATTY);\n          put_indent(indent + 1, flags, F, S, flags & JV_PRINT_ISATTY);\n        } else {\n          put_str(\",\", F, S, flags & JV_PRINT_ISATTY);\n        }\n      }\n      jv_dump_term(C, elem, flags, indent + 1, F, S);\n      if (color) put_str(color, F, S, flags & JV_PRINT_ISATTY);\n    }\n    if (flags & JV_PRINT_PRETTY) {\n      put_char('\\n', F, S, flags & JV_PRINT_ISATTY);\n      put_indent(indent, flags, F, S, flags & JV_PRINT_ISATTY);\n    }\n    if (color) put_str(color, F, S, flags & JV_PRINT_ISATTY);\n    put_char(']', F, S, flags & JV_PRINT_ISATTY);\n    if (flags & JV_PRINT_REFCOUNT)\n      put_refcnt(C, refcnt, F, S, flags & JV_PRINT_ISATTY);\n    break;\n  }\n  case JV_KIND_OBJECT: {\n    if (jv_object_length(jv_copy(x)) == 0) {\n      put_str(\"{}\", F, S, flags & JV_PRINT_ISATTY);\n      break;\n    }\n    put_char('{', F, S, flags & JV_PRINT_ISATTY);\n    if (flags & JV_PRINT_PRETTY) {\n      put_char('\\n', F, S, flags & JV_PRINT_ISATTY);\n      put_indent(indent + 1, flags, F, S, flags & JV_PRINT_ISATTY);\n    }\n    int first = 1;\n    int i = 0;\n    jv keyset = jv_null();\n    while (1) {\n      jv key, value;\n      if (flags & JV_PRINT_SORTED) {\n        if (first) {\n          keyset = jv_keys(jv_copy(x));\n          i = 0;\n        } else {\n          i++;\n        }\n        if (i >= jv_array_length(jv_copy(keyset))) {\n          jv_free(keyset);\n          break;\n        }\n        key = jv_array_get(jv_copy(keyset), i);\n        value = jv_object_get(jv_copy(x), jv_copy(key));\n      } else {\n        if (first) {\n          i = jv_object_iter(x);\n        } else {\n          i = jv_object_iter_next(x, i);\n        }\n        if (!jv_object_iter_valid(x, i)) break;\n        key = jv_object_iter_key(x, i);\n        value = jv_object_iter_value(x, i);\n      }\n\n      if (!first) {\n        if (flags & JV_PRINT_PRETTY){\n          put_str(\",\\n\", F, S, flags & JV_PRINT_ISATTY);\n          put_indent(indent + 1, flags, F, S, flags & JV_PRINT_ISATTY);\n        } else {\n          put_str(\",\", F, S, flags & JV_PRINT_ISATTY);\n        }\n      }\n      if (color) put_str(COLRESET, F, S, flags & JV_PRINT_ISATTY);\n\n      first = 0;\n      if (color) put_str(FIELD_COLOR, F, S, flags & JV_PRINT_ISATTY);\n      jvp_dump_string(key, flags & JV_PRINT_ASCII, F, S, flags & JV_PRINT_ISATTY);\n      jv_free(key);\n      if (color) put_str(COLRESET, F, S, flags & JV_PRINT_ISATTY);\n\n      if (color) put_str(color, F, S, flags & JV_PRINT_ISATTY);\n      put_str((flags & JV_PRINT_PRETTY) ? \": \" : \":\", F, S, flags & JV_PRINT_ISATTY);\n      if (color) put_str(COLRESET, F, S, flags & JV_PRINT_ISATTY);\n\n      jv_dump_term(C, value, flags, indent + 1, F, S);\n      if (color) put_str(color, F, S, flags & JV_PRINT_ISATTY);\n    }\n    if (flags & JV_PRINT_PRETTY) {\n      put_char('\\n', F, S, flags & JV_PRINT_ISATTY);\n      put_indent(indent, flags, F, S, flags & JV_PRINT_ISATTY);\n    }\n    if (color) put_str(color, F, S, flags & JV_PRINT_ISATTY);\n    put_char('}', F, S, flags & JV_PRINT_ISATTY);\n    if (flags & JV_PRINT_REFCOUNT)\n      put_refcnt(C, refcnt, F, S, flags & JV_PRINT_ISATTY);\n  }\n  }\n  jv_free(x);\n  if (color) {\n    put_str(COLRESET, F, S, flags & JV_PRINT_ISATTY);\n  }\n}",
  "abstract_func": "static void jv_dump_term(struct dtoa_context* VAR_0, jv VAR_1, int VAR_2, int VAR_3, FILE* VAR_4, jv* VAR_5) {\n  char VAR_6[VAR_7];\n  const char* VAR_8 = 0;\n  double VAR_9 = (VAR_2 & VAR_10) ? jv_get_refcnt(VAR_1) - 1 : -1;\n  if (VAR_2 & VAR_11) {\n    for (unsigned VAR_12=0; VAR_12<sizeof(color_kinds)/sizeof(color_kinds[0]); VAR_12++) {\n      if (jv_get_kind(VAR_1) == color_kinds[VAR_12]) {\n        VAR_8 = VAR_13[VAR_12];\n        put_str(VAR_8, VAR_4, VAR_5, VAR_2 & VAR_14);\n        break;\n      }\n    }\n  }\n  if (VAR_3 > VAR_15) {\n    put_str(\"<skipped: too deep>\", VAR_4, VAR_5, VAR_2 & VAR_14);\n  } else switch (jv_get_kind(VAR_1)) {\n  default:\n  case VAR_16:\n    if (VAR_2 & VAR_17) {\n      jv VAR_18 = jv_invalid_get_msg(jv_copy(VAR_1));\n      if (jv_get_kind(VAR_18) == VAR_19) {\n        put_str(\"<invalid:\", VAR_4, VAR_5, VAR_2 & VAR_14);\n        jvp_dump_string(VAR_18, VAR_2 | VAR_20, VAR_4, VAR_5, VAR_2 & VAR_14);\n        put_str(\">\", VAR_4, VAR_5, VAR_2 & VAR_14);\n      } else {\n        put_str(\"<invalid>\", VAR_4, VAR_5, VAR_2 & VAR_14);\n      }\n    } else {\n      assert(0 && \"Invalid value\");\n    }\n    break;\n  case VAR_21:\n    put_str(\"null\", VAR_4, VAR_5, VAR_2 & VAR_14);\n    break;\n  case VAR_22:\n    put_str(\"false\", VAR_4, VAR_5, VAR_2 & VAR_14);\n    break;\n  case VAR_23:\n    put_str(\"true\", VAR_4, VAR_5, VAR_2 & VAR_14);\n    break;\n  case VAR_24: {\n    double VAR_25 = jv_number_value(VAR_1);\n    if (VAR_25 != VAR_25) {\n      /* COMMENT_0 */\n      put_str(\"null\", VAR_4, VAR_5, VAR_2 & VAR_14);\n    } else {\n      /* COMMENT_1 */\n      if (VAR_25 > VAR_26) VAR_25 = VAR_26;\n      if (VAR_25 < -VAR_26) VAR_25 = -VAR_26;\n      put_str(jvp_dtoa_fmt(VAR_0, VAR_6, VAR_25), VAR_4, VAR_5, VAR_2 & VAR_14);\n    }\n    break;\n  }\n  case VAR_19:\n    jvp_dump_string(VAR_1, VAR_2 & VAR_20, VAR_4, VAR_5, VAR_2 & VAR_14);\n    if (VAR_2 & VAR_10)\n      put_refcnt(VAR_0, VAR_9, VAR_4, VAR_5, VAR_2 & VAR_14);\n    break;\n  case VAR_27: {\n    if (jv_array_length(jv_copy(VAR_1)) == 0) {\n      put_str(\"[]\", VAR_4, VAR_5, VAR_2 & VAR_14);\n      break;\n    }\n    put_str(\"[\", VAR_4, VAR_5, VAR_2 & VAR_14);\n    if (VAR_2 & VAR_28) {\n      put_char('\\n', VAR_4, VAR_5, VAR_2 & VAR_14);\n      put_indent(VAR_3 + 1, VAR_2, VAR_4, VAR_5, VAR_2 & VAR_14);\n    }\n    jv_array_foreach(VAR_1, VAR_12, VAR_29) {\n      if (VAR_12!=0) {\n        if (VAR_2 & VAR_28) {\n          put_str(\",\\n\", VAR_4, VAR_5, VAR_2 & VAR_14);\n          put_indent(VAR_3 + 1, VAR_2, VAR_4, VAR_5, VAR_2 & VAR_14);\n        } else {\n          put_str(\",\", VAR_4, VAR_5, VAR_2 & VAR_14);\n        }\n      }\n      jv_dump_term(VAR_0, VAR_29, VAR_2, VAR_3 + 1, VAR_4, VAR_5);\n      if (VAR_8) put_str(VAR_8, VAR_4, VAR_5, VAR_2 & VAR_14);\n    }\n    if (VAR_2 & VAR_28) {\n      put_char('\\n', VAR_4, VAR_5, VAR_2 & VAR_14);\n      put_indent(VAR_3, VAR_2, VAR_4, VAR_5, VAR_2 & VAR_14);\n    }\n    if (VAR_8) put_str(VAR_8, VAR_4, VAR_5, VAR_2 & VAR_14);\n    put_char(']', VAR_4, VAR_5, VAR_2 & VAR_14);\n    if (VAR_2 & VAR_10)\n      put_refcnt(VAR_0, VAR_9, VAR_4, VAR_5, VAR_2 & VAR_14);\n    break;\n  }\n  case VAR_30: {\n    if (jv_object_length(jv_copy(VAR_1)) == 0) {\n      put_str(\"{}\", VAR_4, VAR_5, VAR_2 & VAR_14);\n      break;\n    }\n    put_char('{', VAR_4, VAR_5, VAR_2 & VAR_14);\n    if (VAR_2 & VAR_28) {\n      put_char('\\n', VAR_4, VAR_5, VAR_2 & VAR_14);\n      put_indent(VAR_3 + 1, VAR_2, VAR_4, VAR_5, VAR_2 & VAR_14);\n    }\n    int VAR_31 = 1;\n    int VAR_12 = 0;\n    jv VAR_32 = jv_null();\n    while (1) {\n      jv VAR_33, VAR_34;\n      if (VAR_2 & VAR_35) {\n        if (VAR_31) {\n          VAR_32 = jv_keys(jv_copy(VAR_1));\n          VAR_12 = 0;\n        } else {\n          VAR_12++;\n        }\n        if (VAR_12 >= jv_array_length(jv_copy(VAR_32))) {\n          jv_free(VAR_32);\n          break;\n        }\n        VAR_33 = jv_array_get(jv_copy(VAR_32), VAR_12);\n        VAR_34 = jv_object_get(jv_copy(VAR_1), jv_copy(VAR_33));\n      } else {\n        if (VAR_31) {\n          VAR_12 = jv_object_iter(VAR_1);\n        } else {\n          VAR_12 = jv_object_iter_next(VAR_1, VAR_12);\n        }\n        if (!jv_object_iter_valid(VAR_1, VAR_12)) break;\n        VAR_33 = jv_object_iter_key(VAR_1, VAR_12);\n        VAR_34 = jv_object_iter_value(VAR_1, VAR_12);\n      }\n\n      if (!VAR_31) {\n        if (VAR_2 & VAR_28){\n          put_str(\",\\n\", VAR_4, VAR_5, VAR_2 & VAR_14);\n          put_indent(VAR_3 + 1, VAR_2, VAR_4, VAR_5, VAR_2 & VAR_14);\n        } else {\n          put_str(\",\", VAR_4, VAR_5, VAR_2 & VAR_14);\n        }\n      }\n      if (VAR_8) put_str(VAR_36, VAR_4, VAR_5, VAR_2 & VAR_14);\n\n      VAR_31 = 0;\n      if (VAR_8) put_str(VAR_37, VAR_4, VAR_5, VAR_2 & VAR_14);\n      jvp_dump_string(VAR_33, VAR_2 & VAR_20, VAR_4, VAR_5, VAR_2 & VAR_14);\n      jv_free(VAR_33);\n      if (VAR_8) put_str(VAR_36, VAR_4, VAR_5, VAR_2 & VAR_14);\n\n      if (VAR_8) put_str(VAR_8, VAR_4, VAR_5, VAR_2 & VAR_14);\n      put_str((VAR_2 & VAR_28) ? \": \" : \":\", VAR_4, VAR_5, VAR_2 & VAR_14);\n      if (VAR_8) put_str(VAR_36, VAR_4, VAR_5, VAR_2 & VAR_14);\n\n      jv_dump_term(VAR_0, VAR_34, VAR_2, VAR_3 + 1, VAR_4, VAR_5);\n      if (VAR_8) put_str(VAR_8, VAR_4, VAR_5, VAR_2 & VAR_14);\n    }\n    if (VAR_2 & VAR_28) {\n      put_char('\\n', VAR_4, VAR_5, VAR_2 & VAR_14);\n      put_indent(VAR_3, VAR_2, VAR_4, VAR_5, VAR_2 & VAR_14);\n    }\n    if (VAR_8) put_str(VAR_8, VAR_4, VAR_5, VAR_2 & VAR_14);\n    put_char('}', VAR_4, VAR_5, VAR_2 & VAR_14);\n    if (VAR_2 & VAR_10)\n      put_refcnt(VAR_0, VAR_9, VAR_4, VAR_5, VAR_2 & VAR_14);\n  }\n  }\n  jv_free(VAR_1);\n  if (VAR_8) {\n    put_str(VAR_36, VAR_4, VAR_5, VAR_2 & VAR_14);\n  }\n}",
  "func_graph_path": "jqlang/jq/83e2cf607f3599d208b6b3129092fa7deb2e5292/jv_print.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -11,7 +11,9 @@\n       }\n     }\n   }\n-  switch (jv_get_kind(x)) {\n+  if (indent > MAX_PRINT_DEPTH) {\n+    put_str(\"<skipped: too deep>\", F, S, flags & JV_PRINT_ISATTY);\n+  } else switch (jv_get_kind(x)) {\n   default:\n   case JV_KIND_INVALID:\n     if (flags & JV_PRINT_INVALID) {",
  "diff_line_info": {
    "deleted_lines": [
      "  switch (jv_get_kind(x)) {"
    ],
    "added_lines": [
      "  if (indent > MAX_PRINT_DEPTH) {",
      "    put_str(\"<skipped: too deep>\", F, S, flags & JV_PRINT_ISATTY);",
      "  } else switch (jv_get_kind(x)) {"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/jqlang/jq/pull/1214",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/jqlang/jq/pull/1214: 403 Client Error: Forbidden for url: https://api.github.com/repos/jqlang/jq/pulls/1214",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 0.95"
}