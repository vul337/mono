{
  "cve_id": "CVE-2020-7226",
  "cwe_ids": [
    "CWE-770"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "vt-middleware/cryptacular",
  "commit_msg": "Address code review feedback points.",
  "commit_hash": "132f15ead532d78d4c19d2bcb39ec8f319ad6945",
  "git_url": "https://github.com/vt-middleware/cryptacular/commit/132f15ead532d78d4c19d2bcb39ec8f319ad6945",
  "file_path": "src/main/java/org/cryptacular/CiphertextHeaderV2.java",
  "func_name": "encode",
  "func_before": "public byte[] encode(final SecretKey hmacKey)\n  {\n    final ByteBuffer bb = ByteBuffer.allocate(length);\n    bb.order(ByteOrder.BIG_ENDIAN);\n    bb.putInt(VERSION);\n    bb.put(ByteUtil.toBytes(keyName));\n    bb.put((byte) 0);\n    bb.put(ByteUtil.toUnsignedByte(nonce.length));\n    bb.put(nonce);\n    if (hmacKey != null) {\n      final byte[] hmac = hmac(bb.array(), 0, bb.limit() - HMAC_SIZE);\n      bb.put(hmac);\n    }\n    return bb.array();\n  }",
  "abstract_func_before": "public byte[] encode(final SecretKey VAR_0)\n  {\n    final ByteBuffer VAR_1 = VAR_2.allocate(VAR_3);\n    VAR_1.order(VAR_4.BIG_ENDIAN);\n    VAR_1.putInt(VAR_5);\n    VAR_1.put(VAR_6.toBytes(VAR_7));\n    VAR_1.put((byte) 0);\n    VAR_1.put(VAR_6.toUnsignedByte(VAR_8.length));\n    VAR_1.put(VAR_8);\n    if (VAR_0 != null) {\n      final byte[] VAR_9 = hmac(VAR_1.array(), 0, VAR_1.limit() - VAR_10);\n      VAR_1.put(VAR_9);\n    }\n    return VAR_1.array();\n  }",
  "func_graph_path_before": "vt-middleware/cryptacular/132f15ead532d78d4c19d2bcb39ec8f319ad6945/CiphertextHeaderV2.java/vul/before/1.json",
  "func": "public byte[] encode(final SecretKey hmacKey)\n  {\n    if (hmacKey == null) {\n      throw new IllegalArgumentException(\"Secret key cannot be null\");\n    }\n    final ByteBuffer bb = ByteBuffer.allocate(length);\n    bb.order(ByteOrder.BIG_ENDIAN);\n    bb.putInt(VERSION);\n    bb.put(ByteUtil.toBytes(keyName));\n    bb.put((byte) 0);\n    bb.put(ByteUtil.toUnsignedByte(nonce.length));\n    bb.put(nonce);\n    bb.put(hmac(bb.array(), 0, bb.limit() - HMAC_SIZE));\n    return bb.array();\n  }",
  "abstract_func": "public byte[] encode(final SecretKey VAR_0)\n  {\n    if (VAR_0 == null) {\n      throw new IllegalArgumentException(\"Secret key cannot be null\");\n    }\n    final ByteBuffer VAR_1 = VAR_2.allocate(VAR_3);\n    VAR_1.order(VAR_4.BIG_ENDIAN);\n    VAR_1.putInt(VAR_5);\n    VAR_1.put(VAR_6.toBytes(VAR_7));\n    VAR_1.put((byte) 0);\n    VAR_1.put(VAR_6.toUnsignedByte(VAR_8.length));\n    VAR_1.put(VAR_8);\n    VAR_1.put(hmac(VAR_1.array(), 0, VAR_1.limit() - VAR_9));\n    return VAR_1.array();\n  }",
  "func_graph_path": "vt-middleware/cryptacular/132f15ead532d78d4c19d2bcb39ec8f319ad6945/CiphertextHeaderV2.java/vul/after/1.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,5 +1,8 @@\n public byte[] encode(final SecretKey hmacKey)\n   {\n+    if (hmacKey == null) {\n+      throw new IllegalArgumentException(\"Secret key cannot be null\");\n+    }\n     final ByteBuffer bb = ByteBuffer.allocate(length);\n     bb.order(ByteOrder.BIG_ENDIAN);\n     bb.putInt(VERSION);\n@@ -7,9 +10,6 @@\n     bb.put((byte) 0);\n     bb.put(ByteUtil.toUnsignedByte(nonce.length));\n     bb.put(nonce);\n-    if (hmacKey != null) {\n-      final byte[] hmac = hmac(bb.array(), 0, bb.limit() - HMAC_SIZE);\n-      bb.put(hmac);\n-    }\n+    bb.put(hmac(bb.array(), 0, bb.limit() - HMAC_SIZE));\n     return bb.array();\n   }",
  "diff_line_info": {
    "deleted_lines": [
      "    if (hmacKey != null) {",
      "      final byte[] hmac = hmac(bb.array(), 0, bb.limit() - HMAC_SIZE);",
      "      bb.put(hmac);",
      "    }"
    ],
    "added_lines": [
      "    if (hmacKey == null) {",
      "      throw new IllegalArgumentException(\"Secret key cannot be null\");",
      "    }",
      "    bb.put(hmac(bb.array(), 0, bb.limit() - HMAC_SIZE));"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/vt-middleware/cryptacular/pull/53",
  "description": {
    "pr_info": {
      "title": "Define new ciphertext header format.",
      "number": 53
    },
    "comment": [
      "New format does not allocate any memory until HMAC check passes, which\r\nguards against untrusted input. All encryption components have been\r\nupdated to use the new header, while preserving backward compatibility\r\nto decrypt messages encrypted with the old format. The decoding process\r\nfor the old header has been hardened to impose reasonable limits on header\r\nfields: nonce sizes up to 255 bytes, key names up to 500 bytes.\r\n\r\nFixes #52."
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.9"
}