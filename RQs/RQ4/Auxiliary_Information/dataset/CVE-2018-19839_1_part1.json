{
  "cve_id": "CVE-2018-19839",
  "cwe_ids": [
    "CWE-125"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "sass/libsass",
  "commit_msg": "Update utfcpp to v2.3.6\n\nFixes #2657\n\nIncorporates the following utfcpp patches:\n\n1. Sass addition of `retreat`.\n   https://github.com/nemtrif/utfcpp/pull/20\n\n2. Fix for `replace_invalid` throwing on incomplete sequence at the end\n   of the input.\n   https://github.com/nemtrif/utfcpp/pull/21",
  "commit_hash": "a2dff1b59ea8c8ec10680f9e8e5593e4b38554a1",
  "git_url": "https://github.com/sass/libsass/commit/a2dff1b59ea8c8ec10680f9e8e5593e4b38554a1",
  "file_path": "src/utf8/checked.h",
  "func_name": "replace_invalid",
  "func_before": "output_iterator replace_invalid(octet_iterator start, octet_iterator end, output_iterator out, uint32_t replacement)\n    {\n        while (start != end) {\n            octet_iterator sequence_start = start;\n            internal::utf_error err_code = utf8::internal::validate_next(start, end);\n            switch (err_code) {\n                case internal::UTF8_OK :\n                    for (octet_iterator it = sequence_start; it != start; ++it)\n                        *out++ = *it;\n                    break;\n                case internal::NOT_ENOUGH_ROOM:\n                    throw not_enough_room();\n                case internal::INVALID_LEAD:\n                    out = utf8::append (replacement, out);\n                    ++start;\n                    break;\n                case internal::INCOMPLETE_SEQUENCE:\n                case internal::OVERLONG_SEQUENCE:\n                case internal::INVALID_CODE_POINT:\n                    out = utf8::append (replacement, out);\n                    ++start;\n                    // just one replacement mark for the sequence\n                    while (start != end && utf8::internal::is_trail(*start))\n                        ++start;\n                    break;\n            }\n        }\n        return out;\n    }",
  "abstract_func_before": "output_iterator replace_invalid(octet_iterator VAR_0, octet_iterator VAR_1, output_iterator VAR_2, uint32_t VAR_3)\n    {\n        while (VAR_0 != VAR_1) {\n            octet_iterator VAR_4 = VAR_0;\n            internal::utf_error VAR_5 = utf8::internal::validate_next(VAR_0, VAR_1);\n            switch (VAR_5) {\n                case internal::UTF8_OK :\n                    for (octet_iterator VAR_6 = VAR_4; VAR_6 != VAR_0; ++VAR_6)\n                        *VAR_2++ = *VAR_6;\n                    break;\n                case internal::NOT_ENOUGH_ROOM:\n                    throw not_enough_room();\n                case internal::INVALID_LEAD:\n                    VAR_2 = utf8::append (VAR_3, VAR_2);\n                    ++VAR_0;\n                    break;\n                case internal::INCOMPLETE_SEQUENCE:\n                case internal::OVERLONG_SEQUENCE:\n                case internal::INVALID_CODE_POINT:\n                    VAR_2 = utf8::append (VAR_3, VAR_2);\n                    ++VAR_0;\n                    /* COMMENT_0 */\n                    while (VAR_0 != VAR_1 && utf8::internal::is_trail(*VAR_0))\n                        ++VAR_0;\n                    break;\n            }\n        }\n        return VAR_2;\n    }",
  "func_graph_path_before": "sass/libsass/a2dff1b59ea8c8ec10680f9e8e5593e4b38554a1/checked.h/vul/before/2.json",
  "func": "output_iterator replace_invalid(octet_iterator start, octet_iterator end, output_iterator out, uint32_t replacement)\n    {\n        while (start != end) {\n            octet_iterator sequence_start = start;\n            internal::utf_error err_code = utf8::internal::validate_next(start, end);\n            switch (err_code) {\n                case internal::UTF8_OK :\n                    for (octet_iterator it = sequence_start; it != start; ++it)\n                        *out++ = *it;\n                    break;\n                case internal::NOT_ENOUGH_ROOM:\n                    out = utf8::append (replacement, out);\n                    start = end;\n                    break;\n                case internal::INVALID_LEAD:\n                    out = utf8::append (replacement, out);\n                    ++start;\n                    break;\n                case internal::INCOMPLETE_SEQUENCE:\n                case internal::OVERLONG_SEQUENCE:\n                case internal::INVALID_CODE_POINT:\n                    out = utf8::append (replacement, out);\n                    ++start;\n                    // just one replacement mark for the sequence\n                    while (start != end && utf8::internal::is_trail(*start))\n                        ++start;\n                    break;\n            }\n        }\n        return out;\n    }",
  "abstract_func": "output_iterator replace_invalid(octet_iterator VAR_0, octet_iterator VAR_1, output_iterator VAR_2, uint32_t VAR_3)\n    {\n        while (VAR_0 != VAR_1) {\n            octet_iterator VAR_4 = VAR_0;\n            internal::utf_error VAR_5 = utf8::internal::validate_next(VAR_0, VAR_1);\n            switch (VAR_5) {\n                case internal::UTF8_OK :\n                    for (octet_iterator VAR_6 = VAR_4; VAR_6 != VAR_0; ++VAR_6)\n                        *VAR_2++ = *VAR_6;\n                    break;\n                case internal::NOT_ENOUGH_ROOM:\n                    VAR_2 = utf8::append (VAR_3, VAR_2);\n                    VAR_0 = VAR_1;\n                    break;\n                case internal::INVALID_LEAD:\n                    VAR_2 = utf8::append (VAR_3, VAR_2);\n                    ++VAR_0;\n                    break;\n                case internal::INCOMPLETE_SEQUENCE:\n                case internal::OVERLONG_SEQUENCE:\n                case internal::INVALID_CODE_POINT:\n                    VAR_2 = utf8::append (VAR_3, VAR_2);\n                    ++VAR_0;\n                    /* COMMENT_0 */\n                    while (VAR_0 != VAR_1 && utf8::internal::is_trail(*VAR_0))\n                        ++VAR_0;\n                    break;\n            }\n        }\n        return VAR_2;\n    }",
  "func_graph_path": "sass/libsass/a2dff1b59ea8c8ec10680f9e8e5593e4b38554a1/checked.h/vul/after/2.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -9,7 +9,9 @@\n                         *out++ = *it;\n                     break;\n                 case internal::NOT_ENOUGH_ROOM:\n-                    throw not_enough_room();\n+                    out = utf8::append (replacement, out);\n+                    start = end;\n+                    break;\n                 case internal::INVALID_LEAD:\n                     out = utf8::append (replacement, out);\n                     ++start;",
  "diff_line_info": {
    "deleted_lines": [
      "                    throw not_enough_room();"
    ],
    "added_lines": [
      "                    out = utf8::append (replacement, out);",
      "                    start = end;",
      "                    break;"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/sass/libsass/pull/2767",
  "description": {
    "pr_info": {
      "title": "Update utfcpp to v2.3.6",
      "number": 2767
    },
    "comment": [
      "Updates to v2.3.6 with the following patches:\r\n\r\n1. Sass addition of `retreat`. https://github.com/nemtrif/utfcpp/pull/20\r\n\r\n2. Fix for `replace_invalid` throwing on incomplete sequence at the end of the input. https://github.com/nemtrif/utfcpp/pull/21\r\n\r\nFixes #2657. The buffer overflow had already been fixed in #2755. This PR also fixes the error message: previously it just said `Internal Error: Not enough space`, now it outputs the correct error with trace, such as:\r\n\r\n```\r\nError: Invalid UTF-8 sequence\r\n        on line 1:1 of ../../../tmp/libsass-2657/test_m001.txt\r\n>> ï¿½\r\n   ^\r\n```",
      "Thanks"
    ]
  },
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Defect Remediation & Feature Upgrades;  \n**Confidence:** 0.9  \n\nThe patch addresses how invalid UTF-8 sequences are handled, improving error messages rather than fixing a security vulnerability. The code change is consistent with the commit message and doesn't involve security-related issues."
}