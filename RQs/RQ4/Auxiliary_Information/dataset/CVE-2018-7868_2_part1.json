{
  "cve_id": "CVE-2018-7868",
  "cwe_ids": [
    "CWE-119",
    "CWE-476",
    "CWE-125"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "libming",
  "commit_msg": "Fix heap-buffer-overflows when accessing pool\n\nConstants are usually retrieved from the constant pool without verifying\nthat the pool actually contains them, which may lead to various heap\nbuffer overflow issues.\n\nIn this patch we add a counter keeping track of how many elements the pool\ncontains, and checks making sure that whenever the pool is accessed, the\nconstant in present in the pool (constant position < pool counter).\n\nAlso, do not return \"\" when a pointer is excepted (it should be legal to free\nthis return value).\n\nThis patch fixes #112 (CVE-2018-7875), fixes #120 (CVE-2018-7871),\nfixes #117 (CVE-2018-7870), fixes #114 (CVE-2018-7872), fixes #122,\nfixes #113 (CVE-2018-7868), fixes #123.",
  "commit_hash": "3a000c7b6fe978dd9925266bb6847709e06dbaa3",
  "git_url": "https://github.com/libming/libming/commit/3a000c7b6fe978dd9925266bb6847709e06dbaa3",
  "file_path": "util/decompile.c",
  "func_name": "getString",
  "func_before": "static char *\ngetString(struct SWF_ACTIONPUSHPARAM *act)\n{\n\tchar *t;\n#ifdef DEBUG\n\tprintf(\"*getString* type=%d\\n\",act->Type);\n#endif\n\tswitch( act->Type ) \n\t{\n\tcase PUSH_STRING: \n\t\tt=malloc(strlen(act->p.String)+3); /* 2 \"'\"s and a NULL */\n\t\tstrcpy(t,\"'\");\n\t\tstrcat(t,act->p.String);\n\t\tstrcat(t,\"'\");\n\t\treturn t;\n\tcase PUSH_NULL: /* NULL */\n\t\treturn \"null\";\n\tcase PUSH_UNDEF: /* Undefined */\n\t\treturn \"undefined\";\n\tcase PUSH_REGISTER: /* REGISTER */\n\t\tif( regs[act->p.RegisterNumber] &&\n\t\t    regs[act->p.RegisterNumber]->Type != 4 &&\n\t\t    regs[act->p.RegisterNumber]->Type != 7 )\n\t\t{\n\t\t\treturn getName(regs[act->p.RegisterNumber]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tt=malloc(4); /* Rdd */\n\t\t\tsprintf(t,\"R%d\", act->p.RegisterNumber );\n\t\t\treturn t;\n\t\t}\n\tcase PUSH_BOOLEAN: /* BOOLEAN */\n\t\tif( act->p.Boolean )\n\t\t\treturn \"true\";\n\t\telse\n\t\t\treturn \"false\";\n\tcase PUSH_DOUBLE: /* DOUBLE */\n\t\tt=malloc(10); /* big enough? */\n\t\tsprintf(t,\"%g\", act->p.Double );\n\t\treturn t;\n\tcase PUSH_INT: /* INTEGER */\n\t\tt=malloc(10); /* 32-bit decimal */\n\t\tsprintf(t,\"%ld\", act->p.Integer );\n\t\treturn t;\n\tcase PUSH_CONSTANT: /* CONSTANT8 */\n\t\tt=malloc(strlenext(pool[act->p.Constant8])+3); /* 2 \"'\"s and a NULL */\n\t\tstrcpy(t,\"'\");\n\t\tstrcatext(t,pool[act->p.Constant8]);\n\t\tstrcat(t,\"'\");\n\t\treturn t;\n\tcase PUSH_CONSTANT16: /* CONSTANT16 */\n\t\tt=malloc(strlenext(pool[act->p.Constant16])+3); /* 2 '\\\"'s and a NULL */\n\t\tstrcpy(t,\"'\");\n\t\tstrcatext(t,pool[act->p.Constant16]);\n\t\tstrcat(t,\"'\");\n\t\treturn t;\n\n\tcase 12:\n\tcase 11: /* INCREMENTED or DECREMENTED VARIABLE */\n\tcase PUSH_VARIABLE: /* VARIABLE */\n\t\treturn act->p.String;\n\tdefault: \n\t\tfprintf (stderr,\"  Can't get string for type: %d\\n\", act->Type);\n\t\tbreak;\n\t}\n\treturn \"\";\n}",
  "abstract_func_before": "static char *\ngetString(struct SWF_ACTIONPUSHPARAM *VAR_0)\n{\n\tchar *VAR_1;\n#ifdef VAR_2\n\tprintf(\"*getString* type=%d\\n\",VAR_0->Type);\n#endif\n\tswitch( VAR_0->Type ) \n\t{\n\tcase VAR_3: \n\t\tVAR_1=malloc(strlen(VAR_0->p.String)+3); /* COMMENT_0 */\n\t\tstrcpy(VAR_1,\"'\");\n\t\tstrcat(VAR_1,VAR_0->p.String);\n\t\tstrcat(VAR_1,\"'\");\n\t\treturn VAR_1;\n\tcase VAR_4: /* COMMENT_1 */\n\t\treturn \"null\";\n\tcase VAR_5: /* COMMENT_2 */\n\t\treturn \"undefined\";\n\tcase VAR_6: /* COMMENT_3 */\n\t\tif( VAR_7[VAR_0->p.RegisterNumber] &&\n\t\t    VAR_7[VAR_0->p.RegisterNumber]->Type != 4 &&\n\t\t    VAR_7[VAR_0->p.RegisterNumber]->Type != 7 )\n\t\t{\n\t\t\treturn getName(VAR_7[VAR_0->p.RegisterNumber]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tVAR_1=malloc(4); /* COMMENT_4 */\n\t\t\tsprintf(VAR_1,\"R%d\", VAR_0->p.RegisterNumber );\n\t\t\treturn VAR_1;\n\t\t}\n\tcase VAR_8: /* COMMENT_5 */\n\t\tif( VAR_0->p.Boolean )\n\t\t\treturn \"true\";\n\t\telse\n\t\t\treturn \"false\";\n\tcase VAR_9: /* COMMENT_6 */\n\t\tVAR_1=malloc(10); /* COMMENT_7 */\n\t\tsprintf(VAR_1,\"%g\", VAR_0->p.Double );\n\t\treturn VAR_1;\n\tcase VAR_10: /* COMMENT_8 */\n\t\tVAR_1=malloc(10); /* COMMENT_9 */\n\t\tsprintf(VAR_1,\"%ld\", VAR_0->p.Integer );\n\t\treturn VAR_1;\n\tcase VAR_11: /* COMMENT_10 */\n\t\tVAR_1=malloc(strlenext(VAR_12[VAR_0->p.Constant8])+3); /* COMMENT_0 */\n\t\tstrcpy(VAR_1,\"'\");\n\t\tstrcatext(VAR_1,VAR_12[VAR_0->p.Constant8]);\n\t\tstrcat(VAR_1,\"'\");\n\t\treturn VAR_1;\n\tcase VAR_13: /* COMMENT_11 */\n\t\tVAR_1=malloc(strlenext(VAR_12[VAR_0->p.Constant16])+3); /* COMMENT_12 */\n\t\tstrcpy(VAR_1,\"'\");\n\t\tstrcatext(VAR_1,VAR_12[VAR_0->p.Constant16]);\n\t\tstrcat(VAR_1,\"'\");\n\t\treturn VAR_1;\n\n\tcase 12:\n\tcase 11: /* COMMENT_13 */\n\tcase VAR_14: /* COMMENT_14 */\n\t\treturn VAR_0->p.String;\n\tdefault: \n\t\tfprintf (VAR_15,\"  Can't get string for type: %d\\n\", VAR_0->Type);\n\t\tbreak;\n\t}\n\treturn \"\";\n}",
  "func_graph_path_before": "libming/3a000c7b6fe978dd9925266bb6847709e06dbaa3/decompile.c/vul/before/3.json",
  "func": "static char *\ngetString(struct SWF_ACTIONPUSHPARAM *act)\n{\n\tchar *t;\n#ifdef DEBUG\n\tprintf(\"*getString* type=%d\\n\",act->Type);\n#endif\n\tswitch( act->Type ) \n\t{\n\tcase PUSH_STRING: \n\t\tt=malloc(strlen(act->p.String)+3); /* 2 \"'\"s and a NULL */\n\t\tstrcpy(t,\"'\");\n\t\tstrcat(t,act->p.String);\n\t\tstrcat(t,\"'\");\n\t\treturn t;\n\tcase PUSH_NULL: /* NULL */\n\t\treturn \"null\";\n\tcase PUSH_UNDEF: /* Undefined */\n\t\treturn \"undefined\";\n\tcase PUSH_REGISTER: /* REGISTER */\n\t\tif( regs[act->p.RegisterNumber] &&\n\t\t    regs[act->p.RegisterNumber]->Type != 4 &&\n\t\t    regs[act->p.RegisterNumber]->Type != 7 )\n\t\t{\n\t\t\treturn getName(regs[act->p.RegisterNumber]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tt=malloc(4); /* Rdd */\n\t\t\tsprintf(t,\"R%d\", act->p.RegisterNumber );\n\t\t\treturn t;\n\t\t}\n\tcase PUSH_BOOLEAN: /* BOOLEAN */\n\t\tif( act->p.Boolean )\n\t\t\treturn \"true\";\n\t\telse\n\t\t\treturn \"false\";\n\tcase PUSH_DOUBLE: /* DOUBLE */\n\t\tt=malloc(10); /* big enough? */\n\t\tsprintf(t,\"%g\", act->p.Double );\n\t\treturn t;\n\tcase PUSH_INT: /* INTEGER */\n\t\tt=malloc(10); /* 32-bit decimal */\n\t\tsprintf(t,\"%ld\", act->p.Integer );\n\t\treturn t;\n\tcase PUSH_CONSTANT: /* CONSTANT8 */\n\t\tif (act->p.Constant8 > poolcounter)\n\t\t{\n\t\t        SWF_warn(\"WARNING: retrieving constants not present in the pool.\\n\");\n\t\t        break;\n\t\t}\n\t\tt=malloc(strlenext(pool[act->p.Constant8])+3); /* 2 \"'\"s and a NULL */\n\t\tstrcpy(t,\"'\");\n\t\tstrcatext(t,pool[act->p.Constant8]);\n\t\tstrcat(t,\"'\");\n\t\treturn t;\n\tcase PUSH_CONSTANT16: /* CONSTANT16 */\n\t\tif (act->p.Constant16 > poolcounter)\n\t\t{\n\t\t        SWF_warn(\"WARNING: retrieving constants not present in the pool.\\n\");\n\t\t        break;\n\t\t}\n\t\tt=malloc(strlenext(pool[act->p.Constant16])+3); /* 2 '\\\"'s and a NULL */\n\t\tstrcpy(t,\"'\");\n\t\tstrcatext(t,pool[act->p.Constant16]);\n\t\tstrcat(t,\"'\");\n\t\treturn t;\n\n\tcase 12:\n\tcase 11: /* INCREMENTED or DECREMENTED VARIABLE */\n\tcase PUSH_VARIABLE: /* VARIABLE */\n\t\treturn act->p.String;\n\tdefault: \n\t\tfprintf (stderr,\"  Can't get string for type: %d\\n\", act->Type);\n\t\tbreak;\n\t}\n\n\tt = malloc(sizeof(char));\n\tstrcpyext(t,\"\");\n\n\treturn t;\n}",
  "abstract_func": "static char *\ngetString(struct SWF_ACTIONPUSHPARAM *VAR_0)\n{\n\tchar *VAR_1;\n#ifdef VAR_2\n\tprintf(\"*getString* type=%d\\n\",VAR_0->Type);\n#endif\n\tswitch( VAR_0->Type ) \n\t{\n\tcase VAR_3: \n\t\tVAR_1=malloc(strlen(VAR_0->p.String)+3); /* COMMENT_0 */\n\t\tstrcpy(VAR_1,\"'\");\n\t\tstrcat(VAR_1,VAR_0->p.String);\n\t\tstrcat(VAR_1,\"'\");\n\t\treturn VAR_1;\n\tcase VAR_4: /* COMMENT_1 */\n\t\treturn \"null\";\n\tcase VAR_5: /* COMMENT_2 */\n\t\treturn \"undefined\";\n\tcase VAR_6: /* COMMENT_3 */\n\t\tif( VAR_7[VAR_0->p.RegisterNumber] &&\n\t\t    VAR_7[VAR_0->p.RegisterNumber]->Type != 4 &&\n\t\t    VAR_7[VAR_0->p.RegisterNumber]->Type != 7 )\n\t\t{\n\t\t\treturn getName(VAR_7[VAR_0->p.RegisterNumber]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tVAR_1=malloc(4); /* COMMENT_4 */\n\t\t\tsprintf(VAR_1,\"R%d\", VAR_0->p.RegisterNumber );\n\t\t\treturn VAR_1;\n\t\t}\n\tcase VAR_8: /* COMMENT_5 */\n\t\tif( VAR_0->p.Boolean )\n\t\t\treturn \"true\";\n\t\telse\n\t\t\treturn \"false\";\n\tcase VAR_9: /* COMMENT_6 */\n\t\tVAR_1=malloc(10); /* COMMENT_7 */\n\t\tsprintf(VAR_1,\"%g\", VAR_0->p.Double );\n\t\treturn VAR_1;\n\tcase VAR_10: /* COMMENT_8 */\n\t\tVAR_1=malloc(10); /* COMMENT_9 */\n\t\tsprintf(VAR_1,\"%ld\", VAR_0->p.Integer );\n\t\treturn VAR_1;\n\tcase VAR_11: /* COMMENT_10 */\n\t\tif (VAR_0->p.Constant8 > VAR_12)\n\t\t{\n\t\t        SWF_warn(\"WARNING: retrieving constants not present in the pool.\\n\");\n\t\t        break;\n\t\t}\n\t\tVAR_1=malloc(strlenext(VAR_13[VAR_0->p.Constant8])+3); /* COMMENT_0 */\n\t\tstrcpy(VAR_1,\"'\");\n\t\tstrcatext(VAR_1,VAR_13[VAR_0->p.Constant8]);\n\t\tstrcat(VAR_1,\"'\");\n\t\treturn VAR_1;\n\tcase VAR_14: /* COMMENT_11 */\n\t\tif (VAR_0->p.Constant16 > VAR_12)\n\t\t{\n\t\t        SWF_warn(\"WARNING: retrieving constants not present in the pool.\\n\");\n\t\t        break;\n\t\t}\n\t\tVAR_1=malloc(strlenext(VAR_13[VAR_0->p.Constant16])+3); /* COMMENT_12 */\n\t\tstrcpy(VAR_1,\"'\");\n\t\tstrcatext(VAR_1,VAR_13[VAR_0->p.Constant16]);\n\t\tstrcat(VAR_1,\"'\");\n\t\treturn VAR_1;\n\n\tcase 12:\n\tcase 11: /* COMMENT_13 */\n\tcase VAR_15: /* COMMENT_14 */\n\t\treturn VAR_0->p.String;\n\tdefault: \n\t\tfprintf (VAR_16,\"  Can't get string for type: %d\\n\", VAR_0->Type);\n\t\tbreak;\n\t}\n\n\tVAR_1 = malloc(sizeof(char));\n\tstrcpyext(VAR_1,\"\");\n\n\treturn VAR_1;\n}",
  "func_graph_path": "libming/3a000c7b6fe978dd9925266bb6847709e06dbaa3/decompile.c/vul/after/3.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -44,12 +44,22 @@\n \t\tsprintf(t,\"%ld\", act->p.Integer );\n \t\treturn t;\n \tcase PUSH_CONSTANT: /* CONSTANT8 */\n+\t\tif (act->p.Constant8 > poolcounter)\n+\t\t{\n+\t\t        SWF_warn(\"WARNING: retrieving constants not present in the pool.\\n\");\n+\t\t        break;\n+\t\t}\n \t\tt=malloc(strlenext(pool[act->p.Constant8])+3); /* 2 \"'\"s and a NULL */\n \t\tstrcpy(t,\"'\");\n \t\tstrcatext(t,pool[act->p.Constant8]);\n \t\tstrcat(t,\"'\");\n \t\treturn t;\n \tcase PUSH_CONSTANT16: /* CONSTANT16 */\n+\t\tif (act->p.Constant16 > poolcounter)\n+\t\t{\n+\t\t        SWF_warn(\"WARNING: retrieving constants not present in the pool.\\n\");\n+\t\t        break;\n+\t\t}\n \t\tt=malloc(strlenext(pool[act->p.Constant16])+3); /* 2 '\\\"'s and a NULL */\n \t\tstrcpy(t,\"'\");\n \t\tstrcatext(t,pool[act->p.Constant16]);\n@@ -64,5 +74,9 @@\n \t\tfprintf (stderr,\"  Can't get string for type: %d\\n\", act->Type);\n \t\tbreak;\n \t}\n-\treturn \"\";\n+\n+\tt = malloc(sizeof(char));\n+\tstrcpyext(t,\"\");\n+\n+\treturn t;\n }",
  "diff_line_info": {
    "deleted_lines": [
      "\treturn \"\";"
    ],
    "added_lines": [
      "\t\tif (act->p.Constant8 > poolcounter)",
      "\t\t{",
      "\t\t        SWF_warn(\"WARNING: retrieving constants not present in the pool.\\n\");",
      "\t\t        break;",
      "\t\t}",
      "\t\tif (act->p.Constant16 > poolcounter)",
      "\t\t{",
      "\t\t        SWF_warn(\"WARNING: retrieving constants not present in the pool.\\n\");",
      "\t\t        break;",
      "\t\t}",
      "",
      "\tt = malloc(sizeof(char));",
      "\tstrcpyext(t,\"\");",
      "",
      "\treturn t;"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/libming/libming/pull/125",
  "description": {
    "pr_info": {
      "title": "Fix various issues with pool management / access",
      "number": 125
    },
    "comment": [
      "Constants are usually retrieved from the constant pool without verifying that the pool actually contains them, which may lead to various heap buffer overflow issues.\r\n\r\nIn this PR we add a counter keeping track of how many elements the pool contains, and checks making sure that whenever the pool is accessed, the constant in present in the pool (constant position < pool counter).\r\n\r\nAlso, do not return \"\" when a pointer is excepted (it should be legal to free this return value).\r\n\r\nThis PR fixes #112 (CVE-2018-7875), fixes #120 (CVE-2018-7871), fixes #117 (CVE-2018-7870), fixes #114 (CVE-2018-7872), fixes #122, fixes #113 (CVE-2018-7868), fixes #123.\r\n\r\nLots of non trivial stuff here, careful review would be really helpful.",
      "Thanks, always great contributions !"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 1.0"
}