{
  "cve_id": "CVE-2022-24886",
  "cwe_ids": [
    "CWE-732"
  ],
  "cvss_vector": "AV:L/AC:L/Au:N/C:P/I:N/A:N",
  "cvss_is_v3": false,
  "repo_name": "nextcloud/android",
  "commit_msg": "Make PendingIntents immutable\n\nGood practice for security\n\nSigned-off-by: √Ålvaro Brey Vilas <alvaro.brey@nextcloud.com>",
  "commit_hash": "27559efb79d45782e000b762860658d49e9c35e9",
  "git_url": "https://github.com/nextcloud/android/commit/27559efb79d45782e000b762860658d49e9c35e9",
  "file_path": "src/main/java/com/owncloud/android/files/services/FileDownloader.java",
  "func_name": "notifyDownloadResult",
  "func_before": "@SuppressFBWarnings(\"DMI\")\n    private void notifyDownloadResult(DownloadFileOperation download,\n                                      RemoteOperationResult downloadResult) {\n        if (mNotificationManager == null) {\n            mNotificationManager = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);\n        }\n\n        if (!downloadResult.isCancelled()) {\n            if (downloadResult.isSuccess()) {\n                if (conflictUploadId > 0) {\n                    uploadsStorageManager.removeUpload(conflictUploadId);\n                }\n                // Dont show notification except an error has occured.\n                return;\n            }\n            int tickerId = downloadResult.isSuccess() ?\n                    R.string.downloader_download_succeeded_ticker : R.string.downloader_download_failed_ticker;\n\n            boolean needsToUpdateCredentials = ResultCode.UNAUTHORIZED.equals(downloadResult.getCode());\n            tickerId = needsToUpdateCredentials ?\n                    R.string.downloader_download_failed_credentials_error : tickerId;\n\n            mNotificationBuilder\n                    .setTicker(getString(tickerId))\n                    .setContentTitle(getString(tickerId))\n                    .setAutoCancel(true)\n                    .setOngoing(false)\n                    .setProgress(0, 0, false);\n\n            if (needsToUpdateCredentials) {\n                configureUpdateCredentialsNotification(download.getAccount());\n\n            } else {\n                // TODO put something smart in showDetailsIntent\n                Intent showDetailsIntent = new Intent();\n                mNotificationBuilder.setContentIntent(PendingIntent.getActivity(this, (int) System.currentTimeMillis(),\n                        showDetailsIntent, 0));\n            }\n\n            mNotificationBuilder.setContentText(ErrorMessageAdapter.getErrorCauseMessage(downloadResult,\n                    download, getResources()));\n\n            if (mNotificationManager != null) {\n                mNotificationManager.notify((new SecureRandom()).nextInt(), mNotificationBuilder.build());\n\n                // Remove success notification\n                if (downloadResult.isSuccess()) {\n                    // Sleep 2 seconds, so show the notification before remove it\n                    NotificationUtils.cancelWithDelay(mNotificationManager,\n                                                      R.string.downloader_download_succeeded_ticker, 2000);\n                }\n            }\n        }\n    }",
  "abstract_func_before": "@SuppressFBWarnings(\"DMI\")\n    private void notifyDownloadResult(DownloadFileOperation VAR_0,\n                                      RemoteOperationResult VAR_1) {\n        if (VAR_2 == null) {\n            VAR_2 = (NotificationManager) getSystemService(VAR_3);\n        }\n\n        if (!VAR_1.isCancelled()) {\n            if (VAR_1.isSuccess()) {\n                if (VAR_4 > 0) {\n                    VAR_5.removeUpload(VAR_4);\n                }\n                /* COMMENT_0 */\n                return;\n            }\n            int VAR_6 = VAR_1.isSuccess() ?\n                    VAR_7.string.downloader_download_succeeded_ticker : VAR_7.string.downloader_download_failed_ticker;\n\n            boolean VAR_8 = VAR_9.UNAUTHORIZED.equals(VAR_1.getCode());\n            VAR_6 = VAR_8 ?\n                    VAR_7.string.downloader_download_failed_credentials_error : VAR_6;\n\n            VAR_10\n                    .setTicker(getString(VAR_6))\n                    .setContentTitle(getString(VAR_6))\n                    .setAutoCancel(true)\n                    .setOngoing(false)\n                    .setProgress(0, 0, false);\n\n            if (VAR_8) {\n                configureUpdateCredentialsNotification(VAR_0.getAccount());\n\n            } else {\n                /* COMMENT_1 */\n                Intent VAR_11 = new Intent();\n                VAR_10.setContentIntent(VAR_12.getActivity(this, (int) VAR_13.currentTimeMillis(),\n                        VAR_11, 0));\n            }\n\n            VAR_10.setContentText(VAR_14.getErrorCauseMessage(VAR_1,\n                    VAR_0, getResources()));\n\n            if (VAR_2 != null) {\n                VAR_2.notify((new SecureRandom()).nextInt(), VAR_10.build());\n\n                /* COMMENT_2 */\n                if (VAR_1.isSuccess()) {\n                    /* COMMENT_3 */\n                    VAR_15.cancelWithDelay(VAR_2,\n                                                      VAR_7.string.downloader_download_succeeded_ticker, 2000);\n                }\n            }\n        }\n    }",
  "func_graph_path_before": "nextcloud/android/27559efb79d45782e000b762860658d49e9c35e9/FileDownloader.java/vul/before/0.json",
  "func": "@SuppressFBWarnings(\"DMI\")\n    private void notifyDownloadResult(DownloadFileOperation download,\n                                      RemoteOperationResult downloadResult) {\n        if (mNotificationManager == null) {\n            mNotificationManager = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);\n        }\n\n        if (!downloadResult.isCancelled()) {\n            if (downloadResult.isSuccess()) {\n                if (conflictUploadId > 0) {\n                    uploadsStorageManager.removeUpload(conflictUploadId);\n                }\n                // Dont show notification except an error has occured.\n                return;\n            }\n            int tickerId = downloadResult.isSuccess() ?\n                    R.string.downloader_download_succeeded_ticker : R.string.downloader_download_failed_ticker;\n\n            boolean needsToUpdateCredentials = ResultCode.UNAUTHORIZED.equals(downloadResult.getCode());\n            tickerId = needsToUpdateCredentials ?\n                    R.string.downloader_download_failed_credentials_error : tickerId;\n\n            mNotificationBuilder\n                    .setTicker(getString(tickerId))\n                    .setContentTitle(getString(tickerId))\n                    .setAutoCancel(true)\n                    .setOngoing(false)\n                    .setProgress(0, 0, false);\n\n            if (needsToUpdateCredentials) {\n                configureUpdateCredentialsNotification(download.getAccount());\n\n            } else {\n                // TODO put something smart in showDetailsIntent\n                Intent showDetailsIntent = new Intent();\n                mNotificationBuilder.setContentIntent(PendingIntent.getActivity(this, (int) System.currentTimeMillis(),\n                                                                                showDetailsIntent, PendingIntent.FLAG_IMMUTABLE));\n            }\n\n            mNotificationBuilder.setContentText(ErrorMessageAdapter.getErrorCauseMessage(downloadResult,\n                    download, getResources()));\n\n            if (mNotificationManager != null) {\n                mNotificationManager.notify((new SecureRandom()).nextInt(), mNotificationBuilder.build());\n\n                // Remove success notification\n                if (downloadResult.isSuccess()) {\n                    // Sleep 2 seconds, so show the notification before remove it\n                    NotificationUtils.cancelWithDelay(mNotificationManager,\n                                                      R.string.downloader_download_succeeded_ticker, 2000);\n                }\n            }\n        }\n    }",
  "abstract_func": "@SuppressFBWarnings(\"DMI\")\n    private void notifyDownloadResult(DownloadFileOperation VAR_0,\n                                      RemoteOperationResult VAR_1) {\n        if (VAR_2 == null) {\n            VAR_2 = (NotificationManager) getSystemService(VAR_3);\n        }\n\n        if (!VAR_1.isCancelled()) {\n            if (VAR_1.isSuccess()) {\n                if (VAR_4 > 0) {\n                    VAR_5.removeUpload(VAR_4);\n                }\n                /* COMMENT_0 */\n                return;\n            }\n            int VAR_6 = VAR_1.isSuccess() ?\n                    VAR_7.string.downloader_download_succeeded_ticker : VAR_7.string.downloader_download_failed_ticker;\n\n            boolean VAR_8 = VAR_9.UNAUTHORIZED.equals(VAR_1.getCode());\n            VAR_6 = VAR_8 ?\n                    VAR_7.string.downloader_download_failed_credentials_error : VAR_6;\n\n            VAR_10\n                    .setTicker(getString(VAR_6))\n                    .setContentTitle(getString(VAR_6))\n                    .setAutoCancel(true)\n                    .setOngoing(false)\n                    .setProgress(0, 0, false);\n\n            if (VAR_8) {\n                configureUpdateCredentialsNotification(VAR_0.getAccount());\n\n            } else {\n                /* COMMENT_1 */\n                Intent VAR_11 = new Intent();\n                VAR_10.setContentIntent(VAR_12.getActivity(this, (int) VAR_13.currentTimeMillis(),\n                                                                                VAR_11, VAR_12.FLAG_IMMUTABLE));\n            }\n\n            VAR_10.setContentText(VAR_14.getErrorCauseMessage(VAR_1,\n                    VAR_0, getResources()));\n\n            if (VAR_2 != null) {\n                VAR_2.notify((new SecureRandom()).nextInt(), VAR_10.build());\n\n                /* COMMENT_2 */\n                if (VAR_1.isSuccess()) {\n                    /* COMMENT_3 */\n                    VAR_15.cancelWithDelay(VAR_2,\n                                                      VAR_7.string.downloader_download_succeeded_ticker, 2000);\n                }\n            }\n        }\n    }",
  "func_graph_path": "nextcloud/android/27559efb79d45782e000b762860658d49e9c35e9/FileDownloader.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -34,7 +34,7 @@\n                 // TODO put something smart in showDetailsIntent\n                 Intent showDetailsIntent = new Intent();\n                 mNotificationBuilder.setContentIntent(PendingIntent.getActivity(this, (int) System.currentTimeMillis(),\n-                        showDetailsIntent, 0));\n+                                                                                showDetailsIntent, PendingIntent.FLAG_IMMUTABLE));\n             }\n \n             mNotificationBuilder.setContentText(ErrorMessageAdapter.getErrorCauseMessage(downloadResult,",
  "diff_line_info": {
    "deleted_lines": [
      "                        showDetailsIntent, 0));"
    ],
    "added_lines": [
      "                                                                                showDetailsIntent, PendingIntent.FLAG_IMMUTABLE));"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/nextcloud/android/pull/9726",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/nextcloud/android/pull/9726: 403 Client Error: Forbidden for url: https://api.github.com/repos/nextcloud/android/pulls/9726",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.95"
}