{
  "cve_id": "CVE-2020-7226",
  "cwe_ids": [
    "CWE-770"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "vt-middleware/cryptacular",
  "commit_msg": "Define new ciphertext header format.\n\nNew format does not allocate any memory until HMAC check passes, which\nguards against untrusted input. All encryption components have been\nupdated to use the new header, while preserving backward compatibility\nto decrypt messages encrypted with the old format. The decoding process\nfor the old header has been hardened to impose reasonable limits on header\nfields: nonce sizes up to 255 bytes, key names up to 500 bytes.\n\nFixes #52.",
  "commit_hash": "8c6c7528f1e24c6b71f3e36db0cb8a697256ce25",
  "git_url": "https://github.com/vt-middleware/cryptacular/commit/8c6c7528f1e24c6b71f3e36db0cb8a697256ce25",
  "file_path": "src/main/java/org/cryptacular/util/CipherUtil.java",
  "func_name": "decrypt",
  "func_before": "public static void decrypt(\n    final BlockCipher cipher,\n    final SecretKey key,\n    final InputStream input,\n    final OutputStream output)\n    throws CryptoException, EncodingException, StreamException\n  {\n    final CiphertextHeader header = CiphertextHeader.decode(input);\n    final PaddedBufferedBlockCipher padded = new PaddedBufferedBlockCipher(cipher, new PKCS7Padding());\n    padded.init(false, new ParametersWithIV(new KeyParameter(key.getEncoded()), header.getNonce()));\n    process(new BufferedBlockCipherAdapter(padded), input, output);\n  }",
  "abstract_func_before": "public static void decrypt(\n    final BlockCipher VAR_0,\n    final SecretKey VAR_1,\n    final InputStream VAR_2,\n    final OutputStream VAR_3)\n    throws CryptoException, EncodingException, StreamException\n  {\n    final CiphertextHeader VAR_4 = VAR_5.decode(VAR_2);\n    final PaddedBufferedBlockCipher VAR_6 = new PaddedBufferedBlockCipher(VAR_0, new PKCS7Padding());\n    VAR_6.init(false, new ParametersWithIV(new KeyParameter(VAR_1.getEncoded()), VAR_4.getNonce()));\n    process(new BufferedBlockCipherAdapter(VAR_6), VAR_2, VAR_3);\n  }",
  "func_graph_path_before": "vt-middleware/cryptacular/8c6c7528f1e24c6b71f3e36db0cb8a697256ce25/CipherUtil.java/vul/before/1.json",
  "func": "public static void decrypt(\n    final BlockCipher cipher,\n    final SecretKey key,\n    final InputStream input,\n    final OutputStream output)\n    throws CryptoException, EncodingException, StreamException\n  {\n    final CiphertextHeader header = decodeHeader(input, String -> key);\n    final PaddedBufferedBlockCipher padded = new PaddedBufferedBlockCipher(cipher, new PKCS7Padding());\n    padded.init(false, new ParametersWithIV(new KeyParameter(key.getEncoded()), header.getNonce()));\n    process(new BufferedBlockCipherAdapter(padded), input, output);\n  }",
  "abstract_func": "public static void decrypt(\n    final BlockCipher VAR_0,\n    final SecretKey VAR_1,\n    final InputStream VAR_2,\n    final OutputStream VAR_3)\n    throws CryptoException, EncodingException, StreamException\n  {\n    final CiphertextHeader VAR_4 = decodeHeader(VAR_2, VAR_5 -> VAR_1);\n    final PaddedBufferedBlockCipher VAR_6 = new PaddedBufferedBlockCipher(VAR_0, new PKCS7Padding());\n    VAR_6.init(false, new ParametersWithIV(new KeyParameter(VAR_1.getEncoded()), VAR_4.getNonce()));\n    process(new BufferedBlockCipherAdapter(VAR_6), VAR_2, VAR_3);\n  }",
  "func_graph_path": "vt-middleware/cryptacular/8c6c7528f1e24c6b71f3e36db0cb8a697256ce25/CipherUtil.java/vul/after/1.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -5,7 +5,7 @@\n     final OutputStream output)\n     throws CryptoException, EncodingException, StreamException\n   {\n-    final CiphertextHeader header = CiphertextHeader.decode(input);\n+    final CiphertextHeader header = decodeHeader(input, String -> key);\n     final PaddedBufferedBlockCipher padded = new PaddedBufferedBlockCipher(cipher, new PKCS7Padding());\n     padded.init(false, new ParametersWithIV(new KeyParameter(key.getEncoded()), header.getNonce()));\n     process(new BufferedBlockCipherAdapter(padded), input, output);",
  "diff_line_info": {
    "deleted_lines": [
      "    final CiphertextHeader header = CiphertextHeader.decode(input);"
    ],
    "added_lines": [
      "    final CiphertextHeader header = decodeHeader(input, String -> key);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/vt-middleware/cryptacular/pull/53",
  "description": {
    "pr_info": {
      "title": "Define new ciphertext header format.",
      "number": 53
    },
    "comment": [
      "New format does not allocate any memory until HMAC check passes, which\r\nguards against untrusted input. All encryption components have been\r\nupdated to use the new header, while preserving backward compatibility\r\nto decrypt messages encrypted with the old format. The decoding process\r\nfor the old header has been hardened to impose reasonable limits on header\r\nfields: nonce sizes up to 255 bytes, key names up to 500 bytes.\r\n\r\nFixes #52."
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 1.0"
}