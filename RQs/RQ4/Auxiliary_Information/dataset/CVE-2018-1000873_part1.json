{
  "cve_id": "CVE-2018-1000873",
  "cwe_ids": [
    "CWE-20"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "FasterXML/jackson-modules-java8",
  "commit_msg": "Avoid latency problems converting decimal to time.\n\nFixes https://github.com/FasterXML/jackson-databind/issues/2141",
  "commit_hash": "ba27ce5909dfb49bcaf753ad3e04ecb980010b0b",
  "git_url": "https://github.com/FasterXML/jackson-modules-java8/commit/ba27ce5909dfb49bcaf753ad3e04ecb980010b0b",
  "file_path": "datetime/src/main/java/com/fasterxml/jackson/datatype/jsr310/deser/DurationDeserializer.java",
  "func_name": "deserialize",
  "func_before": "@Override\n    public Duration deserialize(JsonParser parser, DeserializationContext context) throws IOException\n    {\n        switch (parser.getCurrentTokenId())\n        {\n            case JsonTokenId.ID_NUMBER_FLOAT:\n                BigDecimal value = parser.getDecimalValue();\n                long seconds = value.longValue();\n                int nanoseconds = DecimalUtils.extractNanosecondDecimal(value, seconds);\n                return Duration.ofSeconds(seconds, nanoseconds);\n\n            case JsonTokenId.ID_NUMBER_INT:\n                if(context.isEnabled(DeserializationFeature.READ_DATE_TIMESTAMPS_AS_NANOSECONDS)) {\n                    return Duration.ofSeconds(parser.getLongValue());\n                }\n                return Duration.ofMillis(parser.getLongValue());\n\n            case JsonTokenId.ID_STRING:\n                String string = parser.getText().trim();\n                if (string.length() == 0) {\n                    return null;\n                }\n                try {\n                    return Duration.parse(string);\n                } catch (DateTimeException e) {\n                    return _handleDateTimeException(context, e, string);\n                }\n            case JsonTokenId.ID_EMBEDDED_OBJECT:\n                // 20-Apr-2016, tatu: Related to [databind#1208], can try supporting embedded\n                //    values quite easily\n                return (Duration) parser.getEmbeddedObject();\n                \n            case JsonTokenId.ID_START_ARRAY:\n            \treturn _deserializeFromArray(parser, context);\n        }\n        return _handleUnexpectedToken(context, parser, JsonToken.VALUE_STRING,\n                JsonToken.VALUE_NUMBER_INT, JsonToken.VALUE_NUMBER_FLOAT);\n    }",
  "abstract_func_before": "@Override\n    public Duration deserialize(JsonParser VAR_0, DeserializationContext VAR_1) throws IOException\n    {\n        switch (VAR_0.getCurrentTokenId())\n        {\n            case VAR_2.ID_NUMBER_FLOAT:\n                BigDecimal VAR_3 = VAR_0.getDecimalValue();\n                long VAR_4 = VAR_3.longValue();\n                int VAR_5 = VAR_6.extractNanosecondDecimal(VAR_3, VAR_4);\n                return VAR_7.ofSeconds(VAR_4, VAR_5);\n\n            case VAR_2.ID_NUMBER_INT:\n                if(VAR_1.isEnabled(VAR_8.READ_DATE_TIMESTAMPS_AS_NANOSECONDS)) {\n                    return VAR_7.ofSeconds(VAR_0.getLongValue());\n                }\n                return VAR_7.ofMillis(VAR_0.getLongValue());\n\n            case VAR_2.ID_STRING:\n                String VAR_9 = VAR_0.getText().trim();\n                if (VAR_9.length() == 0) {\n                    return null;\n                }\n                try {\n                    return VAR_7.parse(VAR_9);\n                } catch (DateTimeException VAR_10) {\n                    return _handleDateTimeException(VAR_1, VAR_10, VAR_9);\n                }\n            case VAR_2.ID_EMBEDDED_OBJECT:\n                /* COMMENT_0 */\n                /* COMMENT_1 */\n                return (Duration) VAR_0.getEmbeddedObject();\n                \n            case VAR_2.ID_START_ARRAY:\n            \treturn _deserializeFromArray(VAR_0, VAR_1);\n        }\n        return _handleUnexpectedToken(VAR_1, VAR_0, VAR_11.VALUE_STRING,\n                VAR_11.VALUE_NUMBER_INT, VAR_11.VALUE_NUMBER_FLOAT);\n    }",
  "func_graph_path_before": "FasterXML/jackson-modules-java8/ba27ce5909dfb49bcaf753ad3e04ecb980010b0b/DurationDeserializer.java/vul/before/0.json",
  "func": "@Override\n    public Duration deserialize(JsonParser parser, DeserializationContext context) throws IOException\n    {\n        switch (parser.getCurrentTokenId())\n        {\n            case JsonTokenId.ID_NUMBER_FLOAT:\n                BigDecimal value = parser.getDecimalValue();\n                return DecimalUtils.extractSecondsAndNanos(value, Duration::ofSeconds);\n\n            case JsonTokenId.ID_NUMBER_INT:\n                if(context.isEnabled(DeserializationFeature.READ_DATE_TIMESTAMPS_AS_NANOSECONDS)) {\n                    return Duration.ofSeconds(parser.getLongValue());\n                }\n                return Duration.ofMillis(parser.getLongValue());\n\n            case JsonTokenId.ID_STRING:\n                String string = parser.getText().trim();\n                if (string.length() == 0) {\n                    return null;\n                }\n                try {\n                    return Duration.parse(string);\n                } catch (DateTimeException e) {\n                    return _handleDateTimeException(context, e, string);\n                }\n            case JsonTokenId.ID_EMBEDDED_OBJECT:\n                // 20-Apr-2016, tatu: Related to [databind#1208], can try supporting embedded\n                //    values quite easily\n                return (Duration) parser.getEmbeddedObject();\n                \n            case JsonTokenId.ID_START_ARRAY:\n            \treturn _deserializeFromArray(parser, context);\n        }\n        return _handleUnexpectedToken(context, parser, JsonToken.VALUE_STRING,\n                JsonToken.VALUE_NUMBER_INT, JsonToken.VALUE_NUMBER_FLOAT);\n    }",
  "abstract_func": "@Override\n    public Duration deserialize(JsonParser VAR_0, DeserializationContext VAR_1) throws IOException\n    {\n        switch (VAR_0.getCurrentTokenId())\n        {\n            case VAR_2.ID_NUMBER_FLOAT:\n                BigDecimal VAR_3 = VAR_0.getDecimalValue();\n                return VAR_4.extractSecondsAndNanos(VAR_3, VAR_5::VAR_6);\n\n            case VAR_2.ID_NUMBER_INT:\n                if(VAR_1.isEnabled(VAR_7.READ_DATE_TIMESTAMPS_AS_NANOSECONDS)) {\n                    return VAR_5.ofSeconds(VAR_0.getLongValue());\n                }\n                return VAR_5.ofMillis(VAR_0.getLongValue());\n\n            case VAR_2.ID_STRING:\n                String VAR_8 = VAR_0.getText().trim();\n                if (VAR_8.length() == 0) {\n                    return null;\n                }\n                try {\n                    return VAR_5.parse(VAR_8);\n                } catch (DateTimeException VAR_9) {\n                    return _handleDateTimeException(VAR_1, VAR_9, VAR_8);\n                }\n            case VAR_2.ID_EMBEDDED_OBJECT:\n                /* COMMENT_0 */\n                /* COMMENT_1 */\n                return (Duration) VAR_0.getEmbeddedObject();\n                \n            case VAR_2.ID_START_ARRAY:\n            \treturn _deserializeFromArray(VAR_0, VAR_1);\n        }\n        return _handleUnexpectedToken(VAR_1, VAR_0, VAR_10.VALUE_STRING,\n                VAR_10.VALUE_NUMBER_INT, VAR_10.VALUE_NUMBER_FLOAT);\n    }",
  "func_graph_path": "FasterXML/jackson-modules-java8/ba27ce5909dfb49bcaf753ad3e04ecb980010b0b/DurationDeserializer.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -5,9 +5,7 @@\n         {\n             case JsonTokenId.ID_NUMBER_FLOAT:\n                 BigDecimal value = parser.getDecimalValue();\n-                long seconds = value.longValue();\n-                int nanoseconds = DecimalUtils.extractNanosecondDecimal(value, seconds);\n-                return Duration.ofSeconds(seconds, nanoseconds);\n+                return DecimalUtils.extractSecondsAndNanos(value, Duration::ofSeconds);\n \n             case JsonTokenId.ID_NUMBER_INT:\n                 if(context.isEnabled(DeserializationFeature.READ_DATE_TIMESTAMPS_AS_NANOSECONDS)) {",
  "diff_line_info": {
    "deleted_lines": [
      "                long seconds = value.longValue();",
      "                int nanoseconds = DecimalUtils.extractNanosecondDecimal(value, seconds);",
      "                return Duration.ofSeconds(seconds, nanoseconds);"
    ],
    "added_lines": [
      "                return DecimalUtils.extractSecondsAndNanos(value, Duration::ofSeconds);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/FasterXML/jackson-modules-java8/pull/87",
  "description": {
    "pr_info": {
      "title": "Prevent unbounded latency converting decimals to time",
      "number": 87
    },
    "comment": [
      "This change prevents latency explosions when working with high-magnitude `BigDecimal` values, while preserving the current behavior on the edge cases.\r\n\r\nIt's fixes the original bug reported in https://github.com/FasterXML/jackson-databind/issues/2141 but not the several related issues discussed therein. It builds atop my earlier PR https://github.com/FasterXML/jackson-modules-java8/pull/85\r\n\r\nOne challenge here is that the current two-step conversion process, using `BigDecimal.longValue()` and `DecimalUtils. extractNanosecondDecimal()` separately, made it hard to control the edge cases because information is lost during the former.  So I combined the two into a single helper method.\r\n\r\n(IMO these helpers shouldn't be public API, since they are bespoke semantics needed by this package, and unlikely to be usable by other contexts.  Frankly I'd prefer to make the new helper method package-protected, if that's okay with the maintainers.)",
      "Ok, yes, excellent thank you for the fix!\r\n\r\n+1 for hiding functionality (I often use `protected` as compromise to allow sub-classing but not advertise it). I also think that deprecation here makes sense, and then dropping method off in 3.0.\r\n\r\nI can make that change after merge.\r\n\r\nLet's see if I can continue discussion on remaining challenge after I merge this.\r\n\r\n\r\n"
    ]
  },
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Defect Remediation & Feature Upgrades; **Confidence:** 0.9"
}