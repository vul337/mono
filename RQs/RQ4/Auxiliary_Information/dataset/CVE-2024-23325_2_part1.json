{
  "cve_id": "CVE-2024-23325",
  "cwe_ids": [
    "CWE-755"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
  "cvss_is_v3": true,
  "repo_name": "envoyproxy/envoy",
  "commit_msg": "Fix crash when proxy protocol receives an address type that isn't\nsupported by the operating system\n\nFix [CVE-2024-23325](https://github.com/envoyproxy/envoy/security/advisories/GHSA-5m7c-mrwr-pm26)\n\nSigned-off-by: Greg Greenway <ggreenway@apple.com>\nSigned-off-by: Ryan Northey <ryan@synca.io>",
  "commit_hash": "bacd3107455b8d387889467725eb72aa0d5b5237",
  "git_url": "https://github.com/envoyproxy/envoy/commit/bacd3107455b8d387889467725eb72aa0d5b5237",
  "file_path": "source/extensions/transport_sockets/tls/utility.cc",
  "func_name": "Utility::getSubjectAltNames",
  "func_before": "std::vector<std::string> Utility::getSubjectAltNames(X509& cert, int type) {\n  std::vector<std::string> subject_alt_names;\n  bssl::UniquePtr<GENERAL_NAMES> san_names(\n      static_cast<GENERAL_NAMES*>(X509_get_ext_d2i(&cert, NID_subject_alt_name, nullptr, nullptr)));\n  if (san_names == nullptr) {\n    return subject_alt_names;\n  }\n  for (const GENERAL_NAME* san : san_names.get()) {\n    if (san->type == type) {\n      subject_alt_names.push_back(generalNameAsString(san));\n    }\n  }\n  return subject_alt_names;\n}",
  "abstract_func_before": "std::vector<std::string> Utility::getSubjectAltNames(X509& VAR_0, int VAR_1) {\n  std::vector<std::string> VAR_2;\n  bssl::UniquePtr<GENERAL_NAMES> VAR_3(\n      VAR_4<GENERAL_NAMES*>(X509_get_ext_d2i(&VAR_0, VAR_5, nullptr, nullptr)));\n  if (VAR_3 == nullptr) {\n    return VAR_2;\n  }\n  for (const GENERAL_NAME* VAR_6 : VAR_3.get()) {\n    if (VAR_6->type == VAR_1) {\n      VAR_2.push_back(generalNameAsString(VAR_6));\n    }\n  }\n  return VAR_2;\n}",
  "func_graph_path_before": null,
  "func": "std::vector<std::string> Utility::getSubjectAltNames(X509& cert, int type, bool skip_unsupported) {\n  std::vector<std::string> subject_alt_names;\n  bssl::UniquePtr<GENERAL_NAMES> san_names(\n      static_cast<GENERAL_NAMES*>(X509_get_ext_d2i(&cert, NID_subject_alt_name, nullptr, nullptr)));\n  if (san_names == nullptr) {\n    return subject_alt_names;\n  }\n  for (const GENERAL_NAME* san : san_names.get()) {\n    if (san->type == type) {\n      if (skip_unsupported) {\n        // An IP SAN for an unsupported IP version will throw an exception.\n        // TODO(ggreenway): remove this when IP address construction no longer throws.\n        TRY_NEEDS_AUDIT_ADDRESS { subject_alt_names.push_back(generalNameAsString(san)); }\n        END_TRY CATCH(const EnvoyException& e,\n                      { ENVOY_LOG_MISC(debug, \"Error reading SAN, value skipped: {}\", e.what()); });\n      } else {\n        subject_alt_names.push_back(generalNameAsString(san));\n      }\n    }\n  }",
  "abstract_func": "std::vector<std::string> Utility::getSubjectAltNames(X509& VAR_0, int VAR_1, bool VAR_2) {\n  std::vector<std::string> VAR_3;\n  bssl::UniquePtr<GENERAL_NAMES> VAR_4(\n      VAR_5<GENERAL_NAMES*>(X509_get_ext_d2i(&VAR_0, VAR_6, nullptr, nullptr)));\n  if (VAR_4 == nullptr) {\n    return VAR_3;\n  }\n  for (const GENERAL_NAME* VAR_7 : VAR_4.get()) {\n    if (VAR_7->type == VAR_1) {\n      if (VAR_2) {\n        /* COMMENT_0 */\n        /* COMMENT_1 */\n        TRY_NEEDS_AUDIT_ADDRESS { VAR_3.push_back(generalNameAsString(VAR_7)); }\n        END_TRY VAR_8(const EnvoyException& VAR_9,\n                      { ENVOY_LOG_MISC(VAR_10, \"Error reading SAN, value skipped: {}\", VAR_9.what()); });\n      } else {\n        VAR_3.push_back(generalNameAsString(VAR_7));\n      }\n    }\n  }",
  "func_graph_path": null,
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,4 +1,4 @@\n-std::vector<std::string> Utility::getSubjectAltNames(X509& cert, int type) {\n+std::vector<std::string> Utility::getSubjectAltNames(X509& cert, int type, bool skip_unsupported) {\n   std::vector<std::string> subject_alt_names;\n   bssl::UniquePtr<GENERAL_NAMES> san_names(\n       static_cast<GENERAL_NAMES*>(X509_get_ext_d2i(&cert, NID_subject_alt_name, nullptr, nullptr)));\n@@ -7,8 +7,14 @@\n   }\n   for (const GENERAL_NAME* san : san_names.get()) {\n     if (san->type == type) {\n-      subject_alt_names.push_back(generalNameAsString(san));\n+      if (skip_unsupported) {\n+        // An IP SAN for an unsupported IP version will throw an exception.\n+        // TODO(ggreenway): remove this when IP address construction no longer throws.\n+        TRY_NEEDS_AUDIT_ADDRESS { subject_alt_names.push_back(generalNameAsString(san)); }\n+        END_TRY CATCH(const EnvoyException& e,\n+                      { ENVOY_LOG_MISC(debug, \"Error reading SAN, value skipped: {}\", e.what()); });\n+      } else {\n+        subject_alt_names.push_back(generalNameAsString(san));\n+      }\n     }\n   }\n-  return subject_alt_names;\n-}",
  "diff_line_info": {
    "deleted_lines": [
      "std::vector<std::string> Utility::getSubjectAltNames(X509& cert, int type) {",
      "      subject_alt_names.push_back(generalNameAsString(san));",
      "  return subject_alt_names;",
      "}"
    ],
    "added_lines": [
      "std::vector<std::string> Utility::getSubjectAltNames(X509& cert, int type, bool skip_unsupported) {",
      "      if (skip_unsupported) {",
      "        // An IP SAN for an unsupported IP version will throw an exception.",
      "        // TODO(ggreenway): remove this when IP address construction no longer throws.",
      "        TRY_NEEDS_AUDIT_ADDRESS { subject_alt_names.push_back(generalNameAsString(san)); }",
      "        END_TRY CATCH(const EnvoyException& e,",
      "                      { ENVOY_LOG_MISC(debug, \"Error reading SAN, value skipped: {}\", e.what()); });",
      "      } else {",
      "        subject_alt_names.push_back(generalNameAsString(san));",
      "      }"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/envoyproxy/envoy/pull/32300",
  "description": {
    "pr_info": {
      "title": "repo: Assorted CVE fixes (IMPORTANT!)",
      "number": 32300
    },
    "comment": [
      "Fix crash from AWS NLB healthchecks when proxy protocol is enabled\r\nFix: [CVE-2024-23327](https://github.com/envoyproxy/envoy/security/advisories/GHSA-4h5x-x9vh-m29j)\r\n\r\nCache RE object in uri template matcher. \r\nFix [CVE-2024-23323](https://github.com/envoyproxy/envoy/security/advisories/GHSA-x278-4w4x-r7ch)\r\n\r\nFix crash when idle and request per try timeouts occur within backoff interval\r\nFix [CVE-2024-23322](https://github.com/envoyproxy/envoy/security/advisories/GHSA-6p83-mfmh-qv38)\r\n\r\nFix crash when proxy protocol receives an address type that isn't supported by the operating system\r\nFix [CVE-2024-23325](https://github.com/envoyproxy/envoy/security/advisories/GHSA-5m7c-mrwr-pm26)\r\n\r\nProxy protocol: sanitise non utf8 chars in TLVs\r\nFix [CVE-2024-23324](https://github.com/envoyproxy/envoy/security/advisories/GHSA-gq3v-vvhj-96j6)\r\n",
      "CC @envoyproxy/coverage-shephards: FYI only for changes made to `(test/per_file_coverage.sh)`.\nenvoyproxy/coverage-shephards assignee is @RyanTheOptimist\n\n\n<details>\n\t<summary>:cat:</summary>\n\nCaused by: https://github.com/envoyproxy/envoy/pull/32300 was opened by phlax.\n\nsee: [more](https://github.com/envoyproxy/envoy/pull/32300), [trace](https://prod.repokitteh.app/traces/ui/envoyproxy/envoy/53df9610-c75a-11ee-99e2-8c29c907fa82).\n</details>",
      "> Can we update the PR description to link to the CVEs that this addresses?\r\n\r\ni think we have been here before 8/\r\n\r\nthis PR will be rebased, the commits contain the linked CVEs\r\n\r\nthis is what needs checking @RyanTheOptimist if you could look through that would be appreciated",
      "> > Can we update the PR description to link to the CVEs that this addresses?\r\n> \r\n> i think we have been here before 8/\r\n> \r\n> this PR will be rebased, the commits contain the linked CVEs\r\n> \r\n> this is what needs checking @RyanTheOptimist if you could look through that would be appreciated\r\n\r\nyes, i agree that the code changes look good. It would still be good to copy the links to the CVEs into the PR description so that when we see the commit in git history it has the relevant context.",
      "i already have to copy this information to each commit on each branch - ie 20+ and also to the release summaries\r\n\r\ngiven that the information is there **and needs to be checked** ill leave any further copypasta as an exercise for the reader",
      "I do not believe that \"Assorted CVE fixes (IMPORTANT!)\" meeds the requirements of a PR description from CONTRIBUTING.md. Feel free to get a second opinion from another maintainer.\r\n\r\n```\r\n* Your PR description should have details on what the PR does. If it fixes an existing issue it\r\n  should end with \"Fixes #XXX\".\r\n```",
      "comment updated",
      "I believe [the commit](https://github.com/envoyproxy/envoy/pull/32300/commits/f1cd344edb2775eef8b9d456c76e4a249f1bac8f) to sanitize the proxy protocol values seems wrong. The [sanitizeUtf8String](https://github.com/envoyproxy/envoy/blob/6231a648424d6ae5209d5346960e825a216f95fa/source/common/protobuf/yaml_utility.cc#L341) function used modifies the bytes in a non-recoverable way, but the actual value isn't always meant to be a valid utf8 string. I believe the [proxy protocol spec](https://www.haproxy.org/download/1.8/doc/proxy-protocol.txt) allows for this.\r\n\r\nMaterially, Google's private service connect (PSC) feature encodes a TLV value as a binary encoded int64. With this commit there's no way to recover the original value in most cases. Example value bytes that should be a valid PSC id\r\n`00 22 6b cf 0a 00 00 02` (decodes to `9688686178336770`)\r\n\r\nI think either using set_bytes within `ProtobufWkt::Value` (which doesn't seem to exist today) or escaping the bad bytes in a reverseable way would be necessary.",
      "I think this happened because Envoy is using a protobuf string for both moving data around internally, and sending protobufs flattened over the network. I agree this is an unintended change in behavior. I'm not sure what the best way to fix this is. Can you open an issue for this @fedya-at-db ?",
      "Thanks, I filed an issue [here](https://github.com/envoyproxy/envoy/issues/32718)."
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 1.0"
}