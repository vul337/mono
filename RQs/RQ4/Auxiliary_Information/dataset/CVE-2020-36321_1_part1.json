{
  "cve_id": "CVE-2020-36321",
  "cwe_ids": [
    "CWE-22"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:N/A:N",
  "cvss_is_v3": false,
  "repo_name": "vaadin/flow",
  "commit_msg": "Add unit tests and change status code",
  "commit_hash": "6ae6460ca4f3a9b50bd46fbf49c807fe67718307",
  "git_url": "https://github.com/vaadin/flow/commit/6ae6460ca4f3a9b50bd46fbf49c807fe67718307",
  "file_path": "flow-server/src/main/java/com/vaadin/flow/server/StaticFileServer.java",
  "func_name": "serveStaticResource",
  "func_before": "@Override\n    public boolean serveStaticResource(HttpServletRequest request,\n            HttpServletResponse response) throws IOException {\n\n        String filenameWithPath = getRequestFilename(request);\n        if (HandlerHelper.isPathUnsafe(filenameWithPath)) {\n            getLogger().info(HandlerHelper.UNSAFE_PATH_ERROR_MESSAGE_PATTERN,\n                    filenameWithPath);\n            response.setStatus(HttpServletResponse.SC_NOT_MODIFIED);\n            return true;\n        }\n\n        URL resourceUrl = null;\n        if (isAllowedVAADINBuildUrl(filenameWithPath)) {\n            resourceUrl = servletService.getClassLoader()\n                    .getResource(\"META-INF\" + filenameWithPath);\n        }\n        if (resourceUrl == null) {\n            resourceUrl = servletService.getStaticResource(filenameWithPath);\n        }\n        if (resourceUrl == null && shouldFixIncorrectWebjarPaths()\n                && isIncorrectWebjarPath(filenameWithPath)) {\n            // Flow issue #4601\n            resourceUrl = servletService.getStaticResource(\n                    fixIncorrectWebjarPath(filenameWithPath));\n        }\n\n        if (resourceUrl == null) {\n            // Not found in webcontent or in META-INF/resources in some JAR\n            response.sendError(HttpServletResponse.SC_NOT_FOUND);\n            return true;\n        }\n\n        // There is a resource!\n\n        // Intentionally writing cache headers also for 304 responses\n        writeCacheHeaders(filenameWithPath, response);\n\n        long timestamp = writeModificationTimestamp(resourceUrl, request,\n                response);\n        if (browserHasNewestVersion(request, timestamp)) {\n            // Browser is up to date, nothing further to do than set the\n            // response code\n            response.setStatus(HttpServletResponse.SC_NOT_MODIFIED);\n            return true;\n        }\n        responseWriter.writeResponseContents(filenameWithPath, resourceUrl,\n                request, response);\n        return true;\n    }",
  "abstract_func_before": "@Override\n    public boolean serveStaticResource(HttpServletRequest VAR_0,\n            HttpServletResponse VAR_1) throws IOException {\n\n        String VAR_2 = getRequestFilename(VAR_0);\n        if (VAR_3.isPathUnsafe(VAR_2)) {\n            getLogger().info(VAR_3.UNSAFE_PATH_ERROR_MESSAGE_PATTERN,\n                    VAR_2);\n            VAR_1.setStatus(VAR_4.SC_NOT_MODIFIED);\n            return true;\n        }\n\n        URL VAR_5 = null;\n        if (isAllowedVAADINBuildUrl(VAR_2)) {\n            VAR_5 = VAR_6.getClassLoader()\n                    .getResource(\"META-INF\" + VAR_2);\n        }\n        if (VAR_5 == null) {\n            VAR_5 = VAR_6.getStaticResource(VAR_2);\n        }\n        if (VAR_5 == null && shouldFixIncorrectWebjarPaths()\n                && isIncorrectWebjarPath(VAR_2)) {\n            /* COMMENT_0 */\n            VAR_5 = VAR_6.getStaticResource(\n                    fixIncorrectWebjarPath(VAR_2));\n        }\n\n        if (VAR_5 == null) {\n            /* COMMENT_1 */\n            VAR_1.sendError(VAR_4.SC_NOT_FOUND);\n            return true;\n        }\n\n        /* COMMENT_2 */\n\n        /* COMMENT_3 */\n        writeCacheHeaders(VAR_2, VAR_1);\n\n        long VAR_7 = writeModificationTimestamp(VAR_5, VAR_0,\n                VAR_1);\n        if (browserHasNewestVersion(VAR_0, VAR_7)) {\n            /* COMMENT_4 */\n            /* COMMENT_5 */\n            VAR_1.setStatus(VAR_4.SC_NOT_MODIFIED);\n            return true;\n        }\n        VAR_8.writeResponseContents(VAR_2, VAR_5,\n                VAR_0, VAR_1);\n        return true;\n    }",
  "func_graph_path_before": "vaadin/flow/6ae6460ca4f3a9b50bd46fbf49c807fe67718307/StaticFileServer.java/vul/before/0.json",
  "func": "@Override\n    public boolean serveStaticResource(HttpServletRequest request,\n            HttpServletResponse response) throws IOException {\n\n        String filenameWithPath = getRequestFilename(request);\n        if (HandlerHelper.isPathUnsafe(filenameWithPath)) {\n            getLogger().info(HandlerHelper.UNSAFE_PATH_ERROR_MESSAGE_PATTERN,\n                    filenameWithPath);\n            response.setStatus(HttpServletResponse.SC_FORBIDDEN);\n            return true;\n        }\n\n        URL resourceUrl = null;\n        if (isAllowedVAADINBuildUrl(filenameWithPath)) {\n            resourceUrl = servletService.getClassLoader()\n                    .getResource(\"META-INF\" + filenameWithPath);\n        }\n        if (resourceUrl == null) {\n            resourceUrl = servletService.getStaticResource(filenameWithPath);\n        }\n        if (resourceUrl == null && shouldFixIncorrectWebjarPaths()\n                && isIncorrectWebjarPath(filenameWithPath)) {\n            // Flow issue #4601\n            resourceUrl = servletService.getStaticResource(\n                    fixIncorrectWebjarPath(filenameWithPath));\n        }\n\n        if (resourceUrl == null) {\n            // Not found in webcontent or in META-INF/resources in some JAR\n            response.sendError(HttpServletResponse.SC_NOT_FOUND);\n            return true;\n        }\n\n        // There is a resource!\n\n        // Intentionally writing cache headers also for 304 responses\n        writeCacheHeaders(filenameWithPath, response);\n\n        long timestamp = writeModificationTimestamp(resourceUrl, request,\n                response);\n        if (browserHasNewestVersion(request, timestamp)) {\n            // Browser is up to date, nothing further to do than set the\n            // response code\n            response.setStatus(HttpServletResponse.SC_NOT_MODIFIED);\n            return true;\n        }\n        responseWriter.writeResponseContents(filenameWithPath, resourceUrl,\n                request, response);\n        return true;\n    }",
  "abstract_func": "@Override\n    public boolean serveStaticResource(HttpServletRequest VAR_0,\n            HttpServletResponse VAR_1) throws IOException {\n\n        String VAR_2 = getRequestFilename(VAR_0);\n        if (VAR_3.isPathUnsafe(VAR_2)) {\n            getLogger().info(VAR_3.UNSAFE_PATH_ERROR_MESSAGE_PATTERN,\n                    VAR_2);\n            VAR_1.setStatus(VAR_4.SC_FORBIDDEN);\n            return true;\n        }\n\n        URL VAR_5 = null;\n        if (isAllowedVAADINBuildUrl(VAR_2)) {\n            VAR_5 = VAR_6.getClassLoader()\n                    .getResource(\"META-INF\" + VAR_2);\n        }\n        if (VAR_5 == null) {\n            VAR_5 = VAR_6.getStaticResource(VAR_2);\n        }\n        if (VAR_5 == null && shouldFixIncorrectWebjarPaths()\n                && isIncorrectWebjarPath(VAR_2)) {\n            /* COMMENT_0 */\n            VAR_5 = VAR_6.getStaticResource(\n                    fixIncorrectWebjarPath(VAR_2));\n        }\n\n        if (VAR_5 == null) {\n            /* COMMENT_1 */\n            VAR_1.sendError(VAR_4.SC_NOT_FOUND);\n            return true;\n        }\n\n        /* COMMENT_2 */\n\n        /* COMMENT_3 */\n        writeCacheHeaders(VAR_2, VAR_1);\n\n        long VAR_7 = writeModificationTimestamp(VAR_5, VAR_0,\n                VAR_1);\n        if (browserHasNewestVersion(VAR_0, VAR_7)) {\n            /* COMMENT_4 */\n            /* COMMENT_5 */\n            VAR_1.setStatus(VAR_4.SC_NOT_MODIFIED);\n            return true;\n        }\n        VAR_8.writeResponseContents(VAR_2, VAR_5,\n                VAR_0, VAR_1);\n        return true;\n    }",
  "func_graph_path": "vaadin/flow/6ae6460ca4f3a9b50bd46fbf49c807fe67718307/StaticFileServer.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -6,7 +6,7 @@\n         if (HandlerHelper.isPathUnsafe(filenameWithPath)) {\n             getLogger().info(HandlerHelper.UNSAFE_PATH_ERROR_MESSAGE_PATTERN,\n                     filenameWithPath);\n-            response.setStatus(HttpServletResponse.SC_NOT_MODIFIED);\n+            response.setStatus(HttpServletResponse.SC_FORBIDDEN);\n             return true;\n         }\n ",
  "diff_line_info": {
    "deleted_lines": [
      "            response.setStatus(HttpServletResponse.SC_NOT_MODIFIED);"
    ],
    "added_lines": [
      "            response.setStatus(HttpServletResponse.SC_FORBIDDEN);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/vaadin/flow/pull/9392",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/vaadin/flow/pull/9392: 403 Client Error: Forbidden for url: https://api.github.com/repos/vaadin/flow/pulls/9392",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 0.95"
}