{
  "cve_id": "CVE-2022-1237",
  "cwe_ids": [
    "CWE-129"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "radareorg/radare2",
  "commit_msg": "Fix oobread segfaults in the NE bin parser ##crash\n\n* Reported by @han0nly via huntr.dev\n* Reproducers: seed1 seed2\n* BountyID: ad3c9c4c-76e7-40c8-bd4a-c095acd8bb40",
  "commit_hash": "2d782cdaa2112c10b8dd5e7a93c134b2ada9c1a6",
  "git_url": "https://github.com/radareorg/radare2/commit/2d782cdaa2112c10b8dd5e7a93c134b2ada9c1a6",
  "file_path": "libr/bin/format/ne/ne.c",
  "func_name": "r_bin_ne_get_segments",
  "func_before": "RList *r_bin_ne_get_segments(r_bin_ne_obj_t *bin) {\n\tint i;\n\tif (!bin) {\n\t\treturn NULL;\n\t}\n\tRList *segments = r_list_newf (free);\n\tfor (i = 0; i < bin->ne_header->SegCount; i++) {\n\t\tRBinSection *bs = R_NEW0 (RBinSection);\n\t\tNE_image_segment_entry *se = &bin->segment_entries[i];\n\t\tif (!bs) {\n\t\t\treturn segments;\n\t\t}\n\t\tbs->size = se->length;\n\t\tbs->vsize = se->minAllocSz ? se->minAllocSz : 64000;\n\t\tbs->bits = R_SYS_BITS_16;\n\t\tbs->is_data = se->flags & IS_DATA;\n\t\tbs->perm = __translate_perms (se->flags);\n\t\tbs->paddr = (ut64)se->offset * bin->alignment;\n\t\tbs->name = r_str_newf (\"%s.%\" PFMT64d, se->flags & IS_MOVEABLE ? \"MOVEABLE\" : \"FIXED\", bs->paddr);\n\t\tbs->is_segment = true;\n\t\tr_list_append (segments, bs);\n\t}\n\tbin->segments = segments;\n\treturn segments;\n}",
  "abstract_func_before": "RList *r_bin_ne_get_segments(r_bin_ne_obj_t *VAR_0) {\n\tint VAR_1;\n\tif (!VAR_0) {\n\t\treturn NULL;\n\t}\n\tRList *VAR_2 = r_list_newf (VAR_3);\n\tfor (VAR_1 = 0; VAR_1 < VAR_0->ne_header->SegCount; VAR_1++) {\n\t\tRBinSection *VAR_4 = R_NEW0 (RBinSection);\n\t\tNE_image_segment_entry *VAR_5 = &VAR_0->segment_entries[VAR_1];\n\t\tif (!VAR_4) {\n\t\t\treturn VAR_2;\n\t\t}\n\t\tVAR_4->size = VAR_5->length;\n\t\tVAR_4->vsize = VAR_5->minAllocSz ? VAR_5->minAllocSz : 64000;\n\t\tVAR_4->bits = VAR_6;\n\t\tVAR_4->is_data = VAR_5->flags & VAR_7;\n\t\tVAR_4->perm = __translate_perms (VAR_5->flags);\n\t\tVAR_4->paddr = (ut64)VAR_5->offset * VAR_0->alignment;\n\t\tVAR_4->name = r_str_newf (\"%s.%\" VAR_8, VAR_5->flags & VAR_9 ? \"MOVEABLE\" : \"FIXED\", VAR_4->paddr);\n\t\tVAR_4->is_segment = true;\n\t\tr_list_append (VAR_2, VAR_4);\n\t}\n\tVAR_0->segments = VAR_2;\n\treturn VAR_2;\n}",
  "func_graph_path_before": "radareorg/radare2/2d782cdaa2112c10b8dd5e7a93c134b2ada9c1a6/ne.c/vul/before/1.json",
  "func": "RList *r_bin_ne_get_segments(r_bin_ne_obj_t *bin) {\n\tint i;\n\tif (!bin) {\n\t\treturn NULL;\n\t}\n\tRList *segments = r_list_newf (free);\n\tfor (i = 0; i < bin->ne_header->SegCount; i++) {\n\t\tRBinSection *bs = R_NEW0 (RBinSection);\n\t\tif (!bs) {\n\t\t\treturn segments;\n\t\t}\n\t\tNE_image_segment_entry *se = &bin->segment_entries[i];\n\t\tbs->size = se->length;\n\t\tbs->vsize = se->minAllocSz ? se->minAllocSz : 64000;\n\t\tbs->bits = R_SYS_BITS_16;\n\t\tbs->is_data = se->flags & IS_DATA;\n\t\tbs->perm = __translate_perms (se->flags);\n\t\tbs->paddr = (ut64)se->offset * bin->alignment;\n\t\tbs->name = r_str_newf (\"%s.%\" PFMT64d, se->flags & IS_MOVEABLE ? \"MOVEABLE\" : \"FIXED\", bs->paddr);\n\t\tbs->is_segment = true;\n\t\tr_list_append (segments, bs);\n\t}\n\tbin->segments = segments;\n\treturn segments;\n}",
  "abstract_func": "RList *r_bin_ne_get_segments(r_bin_ne_obj_t *VAR_0) {\n\tint VAR_1;\n\tif (!VAR_0) {\n\t\treturn NULL;\n\t}\n\tRList *VAR_2 = r_list_newf (VAR_3);\n\tfor (VAR_1 = 0; VAR_1 < VAR_0->ne_header->SegCount; VAR_1++) {\n\t\tRBinSection *VAR_4 = R_NEW0 (RBinSection);\n\t\tif (!VAR_4) {\n\t\t\treturn VAR_2;\n\t\t}\n\t\tNE_image_segment_entry *VAR_5 = &VAR_0->segment_entries[VAR_1];\n\t\tVAR_4->size = VAR_5->length;\n\t\tVAR_4->vsize = VAR_5->minAllocSz ? VAR_5->minAllocSz : 64000;\n\t\tVAR_4->bits = VAR_6;\n\t\tVAR_4->is_data = VAR_5->flags & VAR_7;\n\t\tVAR_4->perm = __translate_perms (VAR_5->flags);\n\t\tVAR_4->paddr = (ut64)VAR_5->offset * VAR_0->alignment;\n\t\tVAR_4->name = r_str_newf (\"%s.%\" VAR_8, VAR_5->flags & VAR_9 ? \"MOVEABLE\" : \"FIXED\", VAR_4->paddr);\n\t\tVAR_4->is_segment = true;\n\t\tr_list_append (VAR_2, VAR_4);\n\t}\n\tVAR_0->segments = VAR_2;\n\treturn VAR_2;\n}",
  "func_graph_path": "radareorg/radare2/2d782cdaa2112c10b8dd5e7a93c134b2ada9c1a6/ne.c/vul/after/1.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -6,10 +6,10 @@\n \tRList *segments = r_list_newf (free);\n \tfor (i = 0; i < bin->ne_header->SegCount; i++) {\n \t\tRBinSection *bs = R_NEW0 (RBinSection);\n-\t\tNE_image_segment_entry *se = &bin->segment_entries[i];\n \t\tif (!bs) {\n \t\t\treturn segments;\n \t\t}\n+\t\tNE_image_segment_entry *se = &bin->segment_entries[i];\n \t\tbs->size = se->length;\n \t\tbs->vsize = se->minAllocSz ? se->minAllocSz : 64000;\n \t\tbs->bits = R_SYS_BITS_16;",
  "diff_line_info": {
    "deleted_lines": [
      "\t\tNE_image_segment_entry *se = &bin->segment_entries[i];"
    ],
    "added_lines": [
      "\t\tNE_image_segment_entry *se = &bin->segment_entries[i];"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/radareorg/radare2/pull/19918",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/radareorg/radare2/pull/19918: 403 Client Error: Forbidden for url: https://api.github.com/repos/radareorg/radare2/pulls/19918",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.95\n\nStep-by-step explanation:\n\n1. **Commit Message Analysis:** The commit message clearly states fixing a segmentation fault (segfault) caused by an out-of-bounds read in the NE binary parser. This indicates a potential security issue.\n\n2. **Vulnerability Description:** It mentions being reported via huntr.dev, a platform for security bug reporting, and includes reproducers and a BountyID, typical of security fixes.\n\n3. **Code Diff:** The fix moves the assignment of `NE_image_segment_entry *se` inside the loop after a null check, preventing an out-of-bounds read if `bs` is null. This addresses a memory access issue, a common security concern.\n\n4. **Security Indicators:** The presence of a BountyID, segfault fixing, and out-of-bounds read strongly suggest a security vulnerability fix.\n\n5. **Confidence:** High confidence due to clear indicators of a security fix in all aspects of the input."
}