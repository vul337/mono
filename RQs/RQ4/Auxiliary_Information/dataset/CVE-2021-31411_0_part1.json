{
  "cve_id": "CVE-2021-31411",
  "cwe_ids": [
    "CWE-379"
  ],
  "cvss_vector": "AV:L/AC:L/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "vaadin/flow",
  "commit_msg": "Compare content from stream\n\nCompare jar file content and existing\ntarget file content before writing to disk.",
  "commit_hash": "dee67b9031c56b7f3a3e03cae4dc1575521006e6",
  "git_url": "https://github.com/vaadin/flow/commit/dee67b9031c56b7f3a3e03cae4dc1575521006e6",
  "file_path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/JarContentsManager.java",
  "func_name": "copyJarEntryTrimmingBasePath",
  "func_before": "private void copyJarEntryTrimmingBasePath(JarFile jarFile,\n            ZipEntry jarEntry, String basePath, File outputDirectory) {\n        String fullPath = jarEntry.getName();\n        String relativePath = fullPath\n                .substring(fullPath.toLowerCase(Locale.ENGLISH)\n                        .indexOf(basePath.toLowerCase(Locale.ENGLISH))\n                        + basePath.length());\n        File target = new File(outputDirectory, relativePath);\n        try {\n            if (target.exists()) {\n                File tempFile = File.createTempFile(fullPath, null);\n                FileUtils.copyInputStreamToFile(\n                        jarFile.getInputStream(jarEntry), tempFile);\n                if (!FileUtils.contentEquals(tempFile, target)) {\n                    FileUtils.forceDelete(target);\n                    FileUtils.moveFile(tempFile, target);\n                } else {\n                    tempFile.delete();\n                }\n            } else {\n                FileUtils.copyInputStreamToFile(\n                        jarFile.getInputStream(jarEntry), target);\n            }\n        } catch (IOException e) {\n            throw new UncheckedIOException(String.format(\n                    \"Failed to extract jar entry '%s' from jarFile '%s'\",\n                    jarEntry, outputDirectory), e);\n        }\n    }",
  "abstract_func_before": "private void copyJarEntryTrimmingBasePath(JarFile VAR_0,\n            ZipEntry VAR_1, String VAR_2, File VAR_3) {\n        String VAR_4 = VAR_1.getName();\n        String VAR_5 = VAR_4\n                .substring(VAR_4.toLowerCase(VAR_6.ENGLISH)\n                        .indexOf(VAR_2.toLowerCase(VAR_6.ENGLISH))\n                        + VAR_2.length());\n        File VAR_7 = new File(VAR_3, VAR_5);\n        try {\n            if (VAR_7.exists()) {\n                File VAR_8 = VAR_9.createTempFile(VAR_4, null);\n                VAR_10.copyInputStreamToFile(\n                        VAR_0.getInputStream(VAR_1), VAR_8);\n                if (!VAR_10.contentEquals(VAR_8, VAR_7)) {\n                    VAR_10.forceDelete(VAR_7);\n                    VAR_10.moveFile(VAR_8, VAR_7);\n                } else {\n                    VAR_8.delete();\n                }\n            } else {\n                VAR_10.copyInputStreamToFile(\n                        VAR_0.getInputStream(VAR_1), VAR_7);\n            }\n        } catch (IOException VAR_11) {\n            throw new UncheckedIOException(VAR_12.format(\n                    \"Failed to extract jar entry '%s' from jarFile '%s'\",\n                    VAR_1, VAR_3), VAR_11);\n        }\n    }",
  "func_graph_path_before": "vaadin/flow/dee67b9031c56b7f3a3e03cae4dc1575521006e6/JarContentsManager.java/vul/before/0.json",
  "func": "private void copyJarEntryTrimmingBasePath(JarFile jarFile,\n            ZipEntry jarEntry, String basePath, File outputDirectory) {\n        String fullPath = jarEntry.getName();\n        String relativePath = fullPath\n                .substring(fullPath.toLowerCase(Locale.ENGLISH)\n                        .indexOf(basePath.toLowerCase(Locale.ENGLISH))\n                        + basePath.length());\n        File target = new File(outputDirectory, relativePath);\n        try {\n            if (target.exists()) {\n                if (!hasSameContent(jarFile.getInputStream(jarEntry), target)) {\n                    FileUtils.copyInputStreamToFile(\n                            jarFile.getInputStream(jarEntry), target);\n                }\n            } else {\n                FileUtils.copyInputStreamToFile(\n                        jarFile.getInputStream(jarEntry), target);\n            }\n        } catch (IOException e) {\n            throw new UncheckedIOException(String.format(\n                    \"Failed to extract jar entry '%s' from jarFile '%s'\",\n                    jarEntry, outputDirectory), e);\n        }\n    }",
  "abstract_func": "private void copyJarEntryTrimmingBasePath(JarFile VAR_0,\n            ZipEntry VAR_1, String VAR_2, File VAR_3) {\n        String VAR_4 = VAR_1.getName();\n        String VAR_5 = VAR_4\n                .substring(VAR_4.toLowerCase(VAR_6.ENGLISH)\n                        .indexOf(VAR_2.toLowerCase(VAR_6.ENGLISH))\n                        + VAR_2.length());\n        File VAR_7 = new File(VAR_3, VAR_5);\n        try {\n            if (VAR_7.exists()) {\n                if (!hasSameContent(VAR_0.getInputStream(VAR_1), VAR_7)) {\n                    VAR_8.copyInputStreamToFile(\n                            VAR_0.getInputStream(VAR_1), VAR_7);\n                }\n            } else {\n                VAR_8.copyInputStreamToFile(\n                        VAR_0.getInputStream(VAR_1), VAR_7);\n            }\n        } catch (IOException VAR_9) {\n            throw new UncheckedIOException(VAR_10.format(\n                    \"Failed to extract jar entry '%s' from jarFile '%s'\",\n                    VAR_1, VAR_3), VAR_9);\n        }\n    }",
  "func_graph_path": "vaadin/flow/dee67b9031c56b7f3a3e03cae4dc1575521006e6/JarContentsManager.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -8,14 +8,9 @@\n         File target = new File(outputDirectory, relativePath);\n         try {\n             if (target.exists()) {\n-                File tempFile = File.createTempFile(fullPath, null);\n-                FileUtils.copyInputStreamToFile(\n-                        jarFile.getInputStream(jarEntry), tempFile);\n-                if (!FileUtils.contentEquals(tempFile, target)) {\n-                    FileUtils.forceDelete(target);\n-                    FileUtils.moveFile(tempFile, target);\n-                } else {\n-                    tempFile.delete();\n+                if (!hasSameContent(jarFile.getInputStream(jarEntry), target)) {\n+                    FileUtils.copyInputStreamToFile(\n+                            jarFile.getInputStream(jarEntry), target);\n                 }\n             } else {\n                 FileUtils.copyInputStreamToFile(",
  "diff_line_info": {
    "deleted_lines": [
      "                File tempFile = File.createTempFile(fullPath, null);",
      "                FileUtils.copyInputStreamToFile(",
      "                        jarFile.getInputStream(jarEntry), tempFile);",
      "                if (!FileUtils.contentEquals(tempFile, target)) {",
      "                    FileUtils.forceDelete(target);",
      "                    FileUtils.moveFile(tempFile, target);",
      "                } else {",
      "                    tempFile.delete();"
    ],
    "added_lines": [
      "                if (!hasSameContent(jarFile.getInputStream(jarEntry), target)) {",
      "                    FileUtils.copyInputStreamToFile(",
      "                            jarFile.getInputStream(jarEntry), target);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/vaadin/flow/pull/10640",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/vaadin/flow/pull/10640: 403 Client Error: Forbidden for url: https://api.github.com/repos/vaadin/flow/pulls/10640",
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "Final Classification: Defect Remediation & Feature Upgrades; Confidence: 0.9"
}