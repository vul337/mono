{
  "cve_id": "CVE-2024-23325",
  "cwe_ids": [
    "CWE-755"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
  "cvss_is_v3": true,
  "repo_name": "envoyproxy/envoy",
  "commit_msg": "Fix crash when proxy protocol receives an address type that isn't\nsupported by the operating system\n\nFix [CVE-2024-23325](https://github.com/envoyproxy/envoy/security/advisories/GHSA-5m7c-mrwr-pm26)\n\nSigned-off-by: Greg Greenway <ggreenway@apple.com>\nSigned-off-by: Ryan Northey <ryan@synca.io>",
  "commit_hash": "bacd3107455b8d387889467725eb72aa0d5b5237",
  "git_url": "https://github.com/envoyproxy/envoy/commit/bacd3107455b8d387889467725eb72aa0d5b5237",
  "file_path": "source/extensions/transport_sockets/tls/connection_info_impl_base.cc",
  "func_name": "ConnectionInfoImplBase::ipSansPeerCertificate",
  "func_before": "absl::Span<const std::string> ConnectionInfoImplBase::ipSansPeerCertificate() const {\n  if (!cached_ip_san_peer_certificate_.empty()) {\n    return cached_ip_san_peer_certificate_;\n  }\n\n  bssl::UniquePtr<X509> cert(SSL_get_peer_certificate(ssl()));\n  if (!cert) {\n    ASSERT(cached_ip_san_peer_certificate_.empty());\n    return cached_ip_san_peer_certificate_;\n  }\n  cached_ip_san_peer_certificate_ = Utility::getSubjectAltNames(*cert, GEN_IPADD);\n  return cached_ip_san_peer_certificate_;\n}",
  "abstract_func_before": "absl::Span<const std::string> ConnectionInfoImplBase::ipSansPeerCertificate() const {\n  if (!VAR_0.empty()) {\n    return VAR_0;\n  }\n\n  bssl::UniquePtr<X509> cert(SSL_get_peer_certificate(ssl()));\n  if (!VAR_1) {\n    ASSERT(VAR_0.empty());\n    return VAR_0;\n  }\n  VAR_0 = Utility::getSubjectAltNames(*VAR_1, VAR_2);\n  return VAR_0;\n}",
  "func_graph_path_before": "envoyproxy/envoy/bacd3107455b8d387889467725eb72aa0d5b5237/connection_info_impl_base.cc/vul/before/0.json",
  "func": "absl::Span<const std::string> ConnectionInfoImplBase::ipSansPeerCertificate() const {\n  if (!cached_ip_san_peer_certificate_.empty()) {\n    return cached_ip_san_peer_certificate_;\n  }\n\n  bssl::UniquePtr<X509> cert(SSL_get_peer_certificate(ssl()));\n  if (!cert) {\n    ASSERT(cached_ip_san_peer_certificate_.empty());\n    return cached_ip_san_peer_certificate_;\n  }\n  cached_ip_san_peer_certificate_ = Utility::getSubjectAltNames(*cert, GEN_IPADD, true);\n  return cached_ip_san_peer_certificate_;\n}",
  "abstract_func": "absl::Span<const std::string> ConnectionInfoImplBase::ipSansPeerCertificate() const {\n  if (!VAR_0.empty()) {\n    return VAR_0;\n  }\n\n  bssl::UniquePtr<X509> cert(SSL_get_peer_certificate(ssl()));\n  if (!VAR_1) {\n    ASSERT(VAR_0.empty());\n    return VAR_0;\n  }\n  VAR_0 = Utility::getSubjectAltNames(*VAR_1, VAR_2, true);\n  return VAR_0;\n}",
  "func_graph_path": "envoyproxy/envoy/bacd3107455b8d387889467725eb72aa0d5b5237/connection_info_impl_base.cc/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -8,6 +8,6 @@\n     ASSERT(cached_ip_san_peer_certificate_.empty());\n     return cached_ip_san_peer_certificate_;\n   }\n-  cached_ip_san_peer_certificate_ = Utility::getSubjectAltNames(*cert, GEN_IPADD);\n+  cached_ip_san_peer_certificate_ = Utility::getSubjectAltNames(*cert, GEN_IPADD, true);\n   return cached_ip_san_peer_certificate_;\n }",
  "diff_line_info": {
    "deleted_lines": [
      "  cached_ip_san_peer_certificate_ = Utility::getSubjectAltNames(*cert, GEN_IPADD);"
    ],
    "added_lines": [
      "  cached_ip_san_peer_certificate_ = Utility::getSubjectAltNames(*cert, GEN_IPADD, true);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/envoyproxy/envoy/pull/32300",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/envoyproxy/envoy/pull/32300: 403 Client Error: Forbidden for url: https://api.github.com/repos/envoyproxy/envoy/pulls/32300",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "The patch addresses a crash related to an unsupported address type, which is classified as a security issue (CVE-2024-23325). The code change ensures proper handling of such cases, preventing potential exploitation.\n\n**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 1.0"
}