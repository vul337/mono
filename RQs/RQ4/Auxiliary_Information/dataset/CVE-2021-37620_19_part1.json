{
  "cve_id": "CVE-2021-37620",
  "cwe_ids": [
    "CWE-125"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "Exiv2/exiv2",
  "commit_msg": "Check that `type` isn't an empty string.",
  "commit_hash": "2e7bb581a234bfb0d0c9e16a1dbf037a8c30681e",
  "git_url": "https://github.com/Exiv2/exiv2/commit/2e7bb581a234bfb0d0c9e16a1dbf037a8c30681e",
  "file_path": "src/value.cpp",
  "func_name": "XmpTextValue::read",
  "func_before": "int XmpTextValue::read(const std::string& buf)\n    {\n        // support a type=Alt,Bag,Seq,Struct indicator\n        std::string b = buf;\n        std::string type;\n        if (buf.length() > 5 && buf.substr(0, 5) == \"type=\") {\n            std::string::size_type pos = buf.find_first_of(' ');\n            type = buf.substr(5, pos-5);\n            // Strip quotes (so you can also specify the type without quotes)\n            if (type[0] == '\"') type = type.substr(1);\n            if (type[type.length()-1] == '\"') type = type.substr(0, type.length()-1);\n            b.clear();\n            if (pos != std::string::npos) b = buf.substr(pos+1);\n        }\n        if (!type.empty()) {\n            if (type == \"Alt\") {\n                setXmpArrayType(XmpValue::xaAlt);\n            }\n            else if (type == \"Bag\") {\n                setXmpArrayType(XmpValue::xaBag);\n            }\n            else if (type == \"Seq\") {\n                setXmpArrayType(XmpValue::xaSeq);\n            }\n            else if (type == \"Struct\") {\n                setXmpStruct();\n            }\n            else {\n                throw Error(kerInvalidXmpText, type);\n            }\n        }\n        value_ = b;\n        return 0;\n    }",
  "abstract_func_before": "int XmpTextValue::read(const std::string& VAR_0)\n    {\n        /* COMMENT_0 */\n        std::string VAR_1 = VAR_0;\n        std::string VAR_2;\n        if (VAR_0.length() > 5 && VAR_0.substr(0, 5) == \"type=\") {\n            std::string::size_type VAR_3 = VAR_0.find_first_of(' ');\n            VAR_2 = VAR_0.substr(5, VAR_3-5);\n            /* COMMENT_1 */\n            if (VAR_2[0] == '\"') VAR_2 = VAR_2.substr(1);\n            if (VAR_2[VAR_2.length()-1] == '\"') VAR_2 = VAR_2.substr(0, VAR_2.length()-1);\n            VAR_1.clear();\n            if (VAR_3 != std::string::npos) VAR_1 = VAR_0.substr(VAR_3+1);\n        }\n        if (!VAR_2.empty()) {\n            if (VAR_2 == \"Alt\") {\n                setXmpArrayType(XmpValue::xaAlt);\n            }\n            else if (VAR_2 == \"Bag\") {\n                setXmpArrayType(XmpValue::xaBag);\n            }\n            else if (VAR_2 == \"Seq\") {\n                setXmpArrayType(XmpValue::xaSeq);\n            }\n            else if (VAR_2 == \"Struct\") {\n                setXmpStruct();\n            }\n            else {\n                throw Error(VAR_4, VAR_2);\n            }\n        }\n        VAR_5 = VAR_1;\n        return 0;\n    }",
  "func_graph_path_before": "Exiv2/exiv2/2e7bb581a234bfb0d0c9e16a1dbf037a8c30681e/value.cpp/vul/before/0.json",
  "func": "int XmpTextValue::read(const std::string& buf)\n    {\n        // support a type=Alt,Bag,Seq,Struct indicator\n        std::string b = buf;\n        std::string type;\n        if (buf.length() > 5 && buf.substr(0, 5) == \"type=\") {\n            std::string::size_type pos = buf.find_first_of(' ');\n            type = buf.substr(5, pos-5);\n            if (type.empty()) {\n                throw Error(kerInvalidXmpText, type);\n            }\n            // Strip quotes (so you can also specify the type without quotes)\n            if (type[0] == '\"') type = type.substr(1);\n            if (type[type.length()-1] == '\"') type = type.substr(0, type.length()-1);\n            b.clear();\n            if (pos != std::string::npos) b = buf.substr(pos+1);\n        }\n        if (!type.empty()) {\n            if (type == \"Alt\") {\n                setXmpArrayType(XmpValue::xaAlt);\n            }\n            else if (type == \"Bag\") {\n                setXmpArrayType(XmpValue::xaBag);\n            }\n            else if (type == \"Seq\") {\n                setXmpArrayType(XmpValue::xaSeq);\n            }\n            else if (type == \"Struct\") {\n                setXmpStruct();\n            }\n            else {\n                throw Error(kerInvalidXmpText, type);\n            }\n        }\n        value_ = b;\n        return 0;\n    }",
  "abstract_func": "int XmpTextValue::read(const std::string& VAR_0)\n    {\n        /* COMMENT_0 */\n        std::string VAR_1 = VAR_0;\n        std::string VAR_2;\n        if (VAR_0.length() > 5 && VAR_0.substr(0, 5) == \"type=\") {\n            std::string::size_type VAR_3 = VAR_0.find_first_of(' ');\n            VAR_2 = VAR_0.substr(5, VAR_3-5);\n            if (VAR_2.empty()) {\n                throw Error(VAR_4, VAR_2);\n            }\n            /* COMMENT_1 */\n            if (VAR_2[0] == '\"') VAR_2 = VAR_2.substr(1);\n            if (VAR_2[VAR_2.length()-1] == '\"') VAR_2 = VAR_2.substr(0, VAR_2.length()-1);\n            VAR_1.clear();\n            if (VAR_3 != std::string::npos) VAR_1 = VAR_0.substr(VAR_3+1);\n        }\n        if (!VAR_2.empty()) {\n            if (VAR_2 == \"Alt\") {\n                setXmpArrayType(XmpValue::xaAlt);\n            }\n            else if (VAR_2 == \"Bag\") {\n                setXmpArrayType(XmpValue::xaBag);\n            }\n            else if (VAR_2 == \"Seq\") {\n                setXmpArrayType(XmpValue::xaSeq);\n            }\n            else if (VAR_2 == \"Struct\") {\n                setXmpStruct();\n            }\n            else {\n                throw Error(VAR_4, VAR_2);\n            }\n        }\n        VAR_5 = VAR_1;\n        return 0;\n    }",
  "func_graph_path": "Exiv2/exiv2/2e7bb581a234bfb0d0c9e16a1dbf037a8c30681e/value.cpp/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -6,6 +6,9 @@\n         if (buf.length() > 5 && buf.substr(0, 5) == \"type=\") {\n             std::string::size_type pos = buf.find_first_of(' ');\n             type = buf.substr(5, pos-5);\n+            if (type.empty()) {\n+                throw Error(kerInvalidXmpText, type);\n+            }\n             // Strip quotes (so you can also specify the type without quotes)\n             if (type[0] == '\"') type = type.substr(1);\n             if (type[type.length()-1] == '\"') type = type.substr(0, type.length()-1);",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "            if (type.empty()) {",
      "                throw Error(kerInvalidXmpText, type);",
      "            }"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/sridharb1/exiv2/pull/4",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/sridharb1/exiv2/pull/4: 403 Client Error: Forbidden for url: https://api.github.com/repos/sridharb1/exiv2/pulls/4",
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Defect Remediation & Feature Upgrades  \n**Confidence:** 0.9"
}