{
  "cve_id": "CVE-2018-15859",
  "cwe_ids": [
    "CWE-476"
  ],
  "cvss_vector": "AV:L/AC:L/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "xkbcommon/libxkbcommon",
  "commit_msg": "Fail expression lookup on invalid atoms\n\nIf we fail atom lookup, then we should not claim that we successfully\nlooked up the expression.\n\nSigned-off-by: Daniel Stone <daniels@collabora.com>",
  "commit_hash": "bb4909d2d8fa6b08155e449986a478101e2b2634",
  "git_url": "https://github.com/xkbcommon/libxkbcommon/commit/bb4909d2d8fa6b08155e449986a478101e2b2634",
  "file_path": "src/xkbcomp/expr.c",
  "func_name": "ExprResolveLhs",
  "func_before": "bool\nExprResolveLhs(struct xkb_context *ctx, const ExprDef *expr,\n               const char **elem_rtrn, const char **field_rtrn,\n               ExprDef **index_rtrn)\n{\n    switch (expr->expr.op) {\n    case EXPR_IDENT:\n        *elem_rtrn = NULL;\n        *field_rtrn = xkb_atom_text(ctx, expr->ident.ident);\n        *index_rtrn = NULL;\n        return (*field_rtrn != NULL);\n    case EXPR_FIELD_REF:\n        *elem_rtrn = xkb_atom_text(ctx, expr->field_ref.element);\n        *field_rtrn = xkb_atom_text(ctx, expr->field_ref.field);\n        *index_rtrn = NULL;\n        return true;\n    case EXPR_ARRAY_REF:\n        *elem_rtrn = xkb_atom_text(ctx, expr->array_ref.element);\n        *field_rtrn = xkb_atom_text(ctx, expr->array_ref.field);\n        *index_rtrn = expr->array_ref.entry;\n        return true;\n    default:\n        break;\n    }\n    log_wsgo(ctx, \"Unexpected operator %d in ResolveLhs\\n\", expr->expr.op);\n    return false;\n}",
  "abstract_func_before": "bool\nExprResolveLhs(struct xkb_context *VAR_0, const ExprDef *VAR_1,\n               const char **VAR_2, const char **VAR_3,\n               ExprDef **VAR_4)\n{\n    switch (VAR_1->expr.op) {\n    case VAR_5:\n        *VAR_2 = NULL;\n        *VAR_3 = xkb_atom_text(VAR_0, VAR_1->ident.ident);\n        *VAR_4 = NULL;\n        return (*VAR_3 != NULL);\n    case VAR_6:\n        *VAR_2 = xkb_atom_text(VAR_0, VAR_1->field_ref.element);\n        *VAR_3 = xkb_atom_text(VAR_0, VAR_1->field_ref.field);\n        *VAR_4 = NULL;\n        return true;\n    case VAR_7:\n        *VAR_2 = xkb_atom_text(VAR_0, VAR_1->array_ref.element);\n        *VAR_3 = xkb_atom_text(VAR_0, VAR_1->array_ref.field);\n        *VAR_4 = VAR_1->array_ref.entry;\n        return true;\n    default:\n        break;\n    }\n    log_wsgo(VAR_0, \"Unexpected operator %d in ResolveLhs\\n\", VAR_1->expr.op);\n    return false;\n}",
  "func_graph_path_before": "xkbcommon/libxkbcommon/bb4909d2d8fa6b08155e449986a478101e2b2634/expr.c/vul/before/0.json",
  "func": "bool\nExprResolveLhs(struct xkb_context *ctx, const ExprDef *expr,\n               const char **elem_rtrn, const char **field_rtrn,\n               ExprDef **index_rtrn)\n{\n    switch (expr->expr.op) {\n    case EXPR_IDENT:\n        *elem_rtrn = NULL;\n        *field_rtrn = xkb_atom_text(ctx, expr->ident.ident);\n        *index_rtrn = NULL;\n        return (*field_rtrn != NULL);\n    case EXPR_FIELD_REF:\n        *elem_rtrn = xkb_atom_text(ctx, expr->field_ref.element);\n        *field_rtrn = xkb_atom_text(ctx, expr->field_ref.field);\n        *index_rtrn = NULL;\n        return (*elem_rtrn != NULL && *field_rtrn != NULL);\n    case EXPR_ARRAY_REF:\n        *elem_rtrn = xkb_atom_text(ctx, expr->array_ref.element);\n        *field_rtrn = xkb_atom_text(ctx, expr->array_ref.field);\n        *index_rtrn = expr->array_ref.entry;\n\tif (expr->array_ref.element != XKB_ATOM_NONE && *elem_rtrn == NULL)\n\t\treturn false;\n\tif (*field_rtrn == NULL)\n\t\treturn false;\n        return true;\n    default:\n        break;\n    }\n    log_wsgo(ctx, \"Unexpected operator %d in ResolveLhs\\n\", expr->expr.op);\n    return false;\n}",
  "abstract_func": "bool\nExprResolveLhs(struct xkb_context *VAR_0, const ExprDef *VAR_1,\n               const char **VAR_2, const char **VAR_3,\n               ExprDef **VAR_4)\n{\n    switch (VAR_1->expr.op) {\n    case VAR_5:\n        *VAR_2 = NULL;\n        *VAR_3 = xkb_atom_text(VAR_0, VAR_1->ident.ident);\n        *VAR_4 = NULL;\n        return (*VAR_3 != NULL);\n    case VAR_6:\n        *VAR_2 = xkb_atom_text(VAR_0, VAR_1->field_ref.element);\n        *VAR_3 = xkb_atom_text(VAR_0, VAR_1->field_ref.field);\n        *VAR_4 = NULL;\n        return (*VAR_2 != NULL && *VAR_3 != NULL);\n    case VAR_7:\n        *VAR_2 = xkb_atom_text(VAR_0, VAR_1->array_ref.element);\n        *VAR_3 = xkb_atom_text(VAR_0, VAR_1->array_ref.field);\n        *VAR_4 = VAR_1->array_ref.entry;\n\tif (VAR_1->array_ref.element != VAR_8 && *VAR_2 == NULL)\n\t\treturn false;\n\tif (*VAR_3 == NULL)\n\t\treturn false;\n        return true;\n    default:\n        break;\n    }\n    log_wsgo(VAR_0, \"Unexpected operator %d in ResolveLhs\\n\", VAR_1->expr.op);\n    return false;\n}",
  "func_graph_path": "xkbcommon/libxkbcommon/bb4909d2d8fa6b08155e449986a478101e2b2634/expr.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -13,11 +13,15 @@\n         *elem_rtrn = xkb_atom_text(ctx, expr->field_ref.element);\n         *field_rtrn = xkb_atom_text(ctx, expr->field_ref.field);\n         *index_rtrn = NULL;\n-        return true;\n+        return (*elem_rtrn != NULL && *field_rtrn != NULL);\n     case EXPR_ARRAY_REF:\n         *elem_rtrn = xkb_atom_text(ctx, expr->array_ref.element);\n         *field_rtrn = xkb_atom_text(ctx, expr->array_ref.field);\n         *index_rtrn = expr->array_ref.entry;\n+\tif (expr->array_ref.element != XKB_ATOM_NONE && *elem_rtrn == NULL)\n+\t\treturn false;\n+\tif (*field_rtrn == NULL)\n+\t\treturn false;\n         return true;\n     default:\n         break;",
  "diff_line_info": {
    "deleted_lines": [
      "        return true;"
    ],
    "added_lines": [
      "        return (*elem_rtrn != NULL && *field_rtrn != NULL);",
      "\tif (expr->array_ref.element != XKB_ATOM_NONE && *elem_rtrn == NULL)",
      "\t\treturn false;",
      "\tif (*field_rtrn == NULL)",
      "\t\treturn false;"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/xkbcommon/libxkbcommon/pull/67",
  "description": {
    "pr_info": {
      "title": "Fix more fuzz-testing fallout",
      "number": 67
    },
    "comment": [
      "Most of this was found quite a while ago but got lost.",
      "Thanks! They all look good to me. I'll make another release with these soon."
    ]
  },
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.6,
  "Bug Filter Response": "**Final Classification:** Defect Remediation & Feature Upgrades;  \n**Confidence:** 0.6"
}