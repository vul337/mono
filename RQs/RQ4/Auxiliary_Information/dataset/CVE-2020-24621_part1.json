{
  "cve_id": "CVE-2020-24621",
  "cwe_ids": [
    "CWE-22"
  ],
  "cvss_vector": "AV:N/AC:L/Au:S/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "openmrs/openmrs-module-uiframework",
  "commit_msg": "UIFR-215: Do not allow loading arbitrary files",
  "commit_hash": "0422fa52c7eba3d96cce2936cb92897dca4b680a",
  "git_url": "https://github.com/openmrs/openmrs-module-uiframework/commit/0422fa52c7eba3d96cce2936cb92897dca4b680a",
  "file_path": "api/src/main/java/org/openmrs/ui/framework/resource/ModuleResourceProvider.java",
  "func_name": "getResource",
  "func_before": "@Override\n\tpublic File getResource(String path) {\n\t\tif (resourceShortcuts != null && resourceShortcuts.containsKey(path))\n\t\t\tpath = resourceShortcuts.get(path);\n\t\t\n\t\tif (developmentFolders != null) {\n\t\t\tfor (File developmentFolder : developmentFolders) {\n\t    \t\t// we're in development mode, and we want to dynamically reload resource from this filesystem directory\n\t\t\t\tFile file = new File(developmentFolder, path);\n\t\t\t\tif (file.exists()) {\n\t\t\t\t\treturn file;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n    \t}\n    \telse {\n    \t\tModuleClassLoader mcl = moduleClassLoader != null ? moduleClassLoader : (ModuleClassLoader) getClass().getClassLoader();\n    \t\t\n    \t\t// force OpenMRS to expand this resource from the jar, if available.\n    \t\t// ideally we'd only look in this module, but this will also look in required modules...\n    \t\tmcl.findResource(resourcePrefix + path);\n    \t\t\n    \t\tFile folderForModule = ModuleClassLoader.getLibCacheFolderForModule(mcl.getModule());\n    \t\tFile resourceFile = new File(folderForModule, resourcePrefix + path);\n    \t\treturn resourceFile.exists() ? resourceFile : null;\n    \t}\n\t}",
  "abstract_func_before": "@Override\n\tpublic File getResource(String VAR_0) {\n\t\tif (VAR_1 != null && VAR_1.containsKey(VAR_0))\n\t\t\tVAR_0 = VAR_1.get(VAR_0);\n\t\t\n\t\tif (VAR_2 != null) {\n\t\t\tfor (File VAR_3 : VAR_2) {\n\t    \t\t/* COMMENT_0 */\n\t\t\t\tFile VAR_4 = new File(VAR_3, VAR_0);\n\t\t\t\tif (VAR_4.exists()) {\n\t\t\t\t\treturn VAR_4;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n    \t}\n    \telse {\n    \t\tModuleClassLoader VAR_5 = VAR_6 != null ? VAR_6 : (ModuleClassLoader) getClass().getClassLoader();\n    \t\t\n    \t\t/* COMMENT_1 */\n    \t\t/* COMMENT_2 */\n    \t\tVAR_5.findResource(VAR_7 + VAR_0);\n    \t\t\n    \t\tFile VAR_8 = VAR_9.getLibCacheFolderForModule(VAR_5.getModule());\n    \t\tFile VAR_10 = new File(VAR_8, VAR_7 + VAR_0);\n    \t\treturn VAR_10.exists() ? VAR_10 : null;\n    \t}\n\t}",
  "func_graph_path_before": "openmrs/openmrs-module-uiframework/0422fa52c7eba3d96cce2936cb92897dca4b680a/ModuleResourceProvider.java/vul/before/0.json",
  "func": "@Override\n\tpublic File getResource(String path) {\n\t\tif (resourceShortcuts != null && resourceShortcuts.containsKey(path)) {\n\t\t\tpath = resourceShortcuts.get(path);\n\t\t}\n\n\t\tif (path == null || new File(path).isAbsolute() || !path.equals(FilenameUtils.normalize(path))) {\n\t\t\treturn null;\n\t\t}\n\t\t\n\t\tif (developmentFolders != null) {\n\t\t\tfor (File developmentFolder : developmentFolders) {\n\t    \t\t// we're in development mode, and we want to dynamically reload resource from this filesystem directory\n\t\t\t\tFile file = new File(developmentFolder, path);\n\t\t\t\tif (file.exists()) {\n\t\t\t\t\treturn file;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n    \t}\n    \telse {\n    \t\tModuleClassLoader mcl = moduleClassLoader != null ? moduleClassLoader : (ModuleClassLoader) getClass().getClassLoader();\n    \t\t\n    \t\t// force OpenMRS to expand this resource from the jar, if available.\n    \t\t// ideally we'd only look in this module, but this will also look in required modules...\n    \t\tmcl.findResource(resourcePrefix + path);\n    \t\t\n    \t\tFile folderForModule = ModuleClassLoader.getLibCacheFolderForModule(mcl.getModule());\n    \t\tFile resourceFile = new File(folderForModule, resourcePrefix + path);\n    \t\treturn resourceFile.exists() ? resourceFile : null;\n    \t}\n\t}",
  "abstract_func": "@Override\n\tpublic File getResource(String VAR_0) {\n\t\tif (VAR_1 != null && VAR_1.containsKey(VAR_0)) {\n\t\t\tVAR_0 = VAR_1.get(VAR_0);\n\t\t}\n\n\t\tif (VAR_0 == null || new File(VAR_0).isAbsolute() || !VAR_0.equals(VAR_2.normalize(VAR_0))) {\n\t\t\treturn null;\n\t\t}\n\t\t\n\t\tif (VAR_3 != null) {\n\t\t\tfor (File VAR_4 : VAR_3) {\n\t    \t\t/* COMMENT_0 */\n\t\t\t\tFile VAR_5 = new File(VAR_4, VAR_0);\n\t\t\t\tif (VAR_5.exists()) {\n\t\t\t\t\treturn VAR_5;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n    \t}\n    \telse {\n    \t\tModuleClassLoader VAR_6 = VAR_7 != null ? VAR_7 : (ModuleClassLoader) getClass().getClassLoader();\n    \t\t\n    \t\t/* COMMENT_1 */\n    \t\t/* COMMENT_2 */\n    \t\tVAR_6.findResource(VAR_8 + VAR_0);\n    \t\t\n    \t\tFile VAR_9 = VAR_10.getLibCacheFolderForModule(VAR_6.getModule());\n    \t\tFile VAR_11 = new File(VAR_9, VAR_8 + VAR_0);\n    \t\treturn VAR_11.exists() ? VAR_11 : null;\n    \t}\n\t}",
  "func_graph_path": "openmrs/openmrs-module-uiframework/0422fa52c7eba3d96cce2936cb92897dca4b680a/ModuleResourceProvider.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,7 +1,12 @@\n @Override\n \tpublic File getResource(String path) {\n-\t\tif (resourceShortcuts != null && resourceShortcuts.containsKey(path))\n+\t\tif (resourceShortcuts != null && resourceShortcuts.containsKey(path)) {\n \t\t\tpath = resourceShortcuts.get(path);\n+\t\t}\n+\n+\t\tif (path == null || new File(path).isAbsolute() || !path.equals(FilenameUtils.normalize(path))) {\n+\t\t\treturn null;\n+\t\t}\n \t\t\n \t\tif (developmentFolders != null) {\n \t\t\tfor (File developmentFolder : developmentFolders) {",
  "diff_line_info": {
    "deleted_lines": [
      "\t\tif (resourceShortcuts != null && resourceShortcuts.containsKey(path))"
    ],
    "added_lines": [
      "\t\tif (resourceShortcuts != null && resourceShortcuts.containsKey(path)) {",
      "\t\t}",
      "",
      "\t\tif (path == null || new File(path).isAbsolute() || !path.equals(FilenameUtils.normalize(path))) {",
      "\t\t\treturn null;",
      "\t\t}"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/openmrs/openmrs-module-uiframework/pull/59",
  "description": {
    "pr_info": {
      "title": "UIFR-215: Do not allow loading arbitrary files",
      "number": 59
    },
    "comment": [
      "This prevents the load of files via absolute paths or path traversal. Ticket is [here](https://issues.openmrs.org/browse/UIFR-215)."
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 1.0"
}