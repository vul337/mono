{
  "cve_id": "CVE-2022-38667",
  "cwe_ids": [
    "CWE-416"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
  "cvss_is_v3": true,
  "repo_name": "CrowCpp/Crow",
  "commit_msg": "Prevent HTTP pipelining which Crow doesn't support.",
  "commit_hash": "fba01dc76d6ea940ad7c8392e8f39f9647241d8e",
  "git_url": "https://github.com/CrowCpp/Crow/commit/fba01dc76d6ea940ad7c8392e8f39f9647241d8e",
  "file_path": "include/crow/http_connection.h",
  "func_name": "start",
  "func_before": "void start()\n        {\n            adaptor_.start([this](const asio::error_code& ec) {\n                if (!ec)\n                {\n                    start_deadline();\n\n                    do_read();\n                }\n                else\n                {\n                    CROW_LOG_ERROR << \"Could not start adaptor: \" << ec.message();\n                    check_destroy();\n                }\n            });\n        }",
  "abstract_func_before": "void start()\n        {\n            VAR_0.start([this](const asio::error_code& VAR_1) {\n                if (!VAR_1)\n                {\n                    start_deadline();\n\n                    do_read();\n                }\n                else\n                {\n                    VAR_2 << \"Could not start adaptor: \" << VAR_1.message();\n                    check_destroy();\n                }\n            });\n        }",
  "func_graph_path_before": "CrowCpp/Crow/fba01dc76d6ea940ad7c8392e8f39f9647241d8e/http_connection.h/vul/before/4.json",
  "func": "void start()\n        {\n            adaptor_.start([this](const asio::error_code& ec) {\n                if (!ec)\n                {\n                    start_deadline();\n                    parser_.clear();\n\n                    do_read();\n                }\n                else\n                {\n                    CROW_LOG_ERROR << \"Could not start adaptor: \" << ec.message();\n                    check_destroy();\n                }\n            });\n        }",
  "abstract_func": "void start()\n        {\n            VAR_0.start([this](const asio::error_code& VAR_1) {\n                if (!VAR_1)\n                {\n                    start_deadline();\n                    VAR_2.clear();\n\n                    do_read();\n                }\n                else\n                {\n                    VAR_3 << \"Could not start adaptor: \" << VAR_1.message();\n                    check_destroy();\n                }\n            });\n        }",
  "func_graph_path": "CrowCpp/Crow/fba01dc76d6ea940ad7c8392e8f39f9647241d8e/http_connection.h/vul/after/4.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -4,6 +4,7 @@\n                 if (!ec)\n                 {\n                     start_deadline();\n+                    parser_.clear();\n \n                     do_read();\n                 }",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "                    parser_.clear();"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/CrowCpp/Crow/pull/524",
  "description": {
    "pr_info": {
      "title": "Prevent HTTP pipelining",
      "number": 524
    },
    "comment": [
      "Fixes a potential use-after-free vulnerability where using HTTP pipelining could cause Crow to execute code related to a connection after deleting it.\r\n\r\nIt also fixes a small bug where websocket connections could be established with invalid HTTP requests (ones that don't have a `Host` header)\r\n\r\nThanks to hebi Gynvael Coldwind for discovering and reporting the vulnerability."
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 0.95"
}