{
  "cve_id": "CVE-2018-20000",
  "cwe_ids": [
    "CWE-611"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:N/A:N",
  "cvss_is_v3": false,
  "repo_name": "Bedework/bw-webdav",
  "commit_msg": "format: follow the repo code style, and welcome mvnvm props to manage maven versions",
  "commit_hash": "0ce2007b3515a23b5f287ef521300bcb1f748edc",
  "git_url": "https://github.com/Bedework/bw-webdav/commit/0ce2007b3515a23b5f287ef521300bcb1f748edc",
  "file_path": "src/main/java/org/bedework/webdav/servlet/common/SecureXml.java",
  "func_name": "parseXmlSafely",
  "func_before": "default Document parseXmlSafely(final int contentLength, final Reader reader) throws WebdavException {\n        if (contentLength == 0) {\n            return null;\n        }\n\n        if (reader == null) {\n            // No content?\n            return null;\n        }\n\n        try {\n            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n            factory.setNamespaceAware(false);\n            factory.setFeature(\"http://javax.xml.XMLConstants/feature/secure-processing\", true);\n            factory.setFeature(\"http://xml.org/sax/features/external-general-entities\", false);\n            factory.setFeature(\"http://xml.org/sax/features/external-parameter-entities\", false);\n            factory.setAttribute(\"http://apache.org/xml/features/nonvalidating/load-external-dtd\", false);\n\n            DocumentBuilder builder = factory.newDocumentBuilder();\n\n            return builder.parse(new InputSource(reader));\n        } catch (SAXException exception) {\n            throw new WebdavBadRequest(exception.getMessage());\n        } catch (Throwable t) {\n            throw new WebdavException(t);\n        }\n    }",
  "abstract_func_before": "default Document parseXmlSafely(final int VAR_0, final Reader VAR_1) throws WebdavException {\n        if (VAR_0 == 0) {\n            return null;\n        }\n\n        if (VAR_1 == null) {\n            /* COMMENT_0 */\n            return null;\n        }\n\n        try {\n            DocumentBuilderFactory VAR_2 = VAR_3.newInstance();\n            VAR_2.setNamespaceAware(false);\n            VAR_2.setFeature(\"http://javax.xml.XMLConstants/feature/secure-processing\", true);\n            VAR_2.setFeature(\"http://xml.org/sax/features/external-general-entities\", false);\n            VAR_2.setFeature(\"http://xml.org/sax/features/external-parameter-entities\", false);\n            VAR_2.setAttribute(\"http://apache.org/xml/features/nonvalidating/load-external-dtd\", false);\n\n            DocumentBuilder VAR_4 = VAR_2.newDocumentBuilder();\n\n            return VAR_4.parse(new InputSource(VAR_1));\n        } catch (SAXException VAR_5) {\n            throw new WebdavBadRequest(VAR_5.getMessage());\n        } catch (Throwable VAR_6) {\n            throw new WebdavException(VAR_6);\n        }\n    }",
  "func_graph_path_before": "Bedework/bw-webdav/0ce2007b3515a23b5f287ef521300bcb1f748edc/SecureXml.java/vul/before/0.json",
  "func": "default Document parseXmlSafely(final int contentLength, final Reader reader) throws WebdavException {\n    if (contentLength == 0) {\n      return null;\n    }\n\n    if (reader == null) {\n      // No content?\n      return null;\n    }\n\n    try {\n      DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n      factory.setNamespaceAware(false);\n      factory.setFeature(\"http://javax.xml.XMLConstants/feature/secure-processing\", true);\n      factory.setFeature(\"http://xml.org/sax/features/external-general-entities\", false);\n      factory.setFeature(\"http://xml.org/sax/features/external-parameter-entities\", false);\n      factory.setAttribute(\"http://apache.org/xml/features/nonvalidating/load-external-dtd\", false);\n\n      DocumentBuilder builder = factory.newDocumentBuilder();\n\n      return builder.parse(new InputSource(reader));\n    } catch (SAXException exception) {\n      throw new WebdavBadRequest(exception.getMessage());\n    } catch (Throwable t) {\n      throw new WebdavException(t);\n    }\n  }",
  "abstract_func": "default Document parseXmlSafely(final int VAR_0, final Reader VAR_1) throws WebdavException {\n    if (VAR_0 == 0) {\n      return null;\n    }\n\n    if (VAR_1 == null) {\n      /* COMMENT_0 */\n      return null;\n    }\n\n    try {\n      DocumentBuilderFactory VAR_2 = VAR_3.newInstance();\n      VAR_2.setNamespaceAware(false);\n      VAR_2.setFeature(\"http://javax.xml.XMLConstants/feature/secure-processing\", true);\n      VAR_2.setFeature(\"http://xml.org/sax/features/external-general-entities\", false);\n      VAR_2.setFeature(\"http://xml.org/sax/features/external-parameter-entities\", false);\n      VAR_2.setAttribute(\"http://apache.org/xml/features/nonvalidating/load-external-dtd\", false);\n\n      DocumentBuilder VAR_4 = VAR_2.newDocumentBuilder();\n\n      return VAR_4.parse(new InputSource(VAR_1));\n    } catch (SAXException VAR_5) {\n      throw new WebdavBadRequest(VAR_5.getMessage());\n    } catch (Throwable VAR_6) {\n      throw new WebdavException(VAR_6);\n    }\n  }",
  "func_graph_path": "Bedework/bw-webdav/0ce2007b3515a23b5f287ef521300bcb1f748edc/SecureXml.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,27 +1,27 @@\n default Document parseXmlSafely(final int contentLength, final Reader reader) throws WebdavException {\n-        if (contentLength == 0) {\n-            return null;\n-        }\n+    if (contentLength == 0) {\n+      return null;\n+    }\n \n-        if (reader == null) {\n-            // No content?\n-            return null;\n-        }\n+    if (reader == null) {\n+      // No content?\n+      return null;\n+    }\n \n-        try {\n-            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n-            factory.setNamespaceAware(false);\n-            factory.setFeature(\"http://javax.xml.XMLConstants/feature/secure-processing\", true);\n-            factory.setFeature(\"http://xml.org/sax/features/external-general-entities\", false);\n-            factory.setFeature(\"http://xml.org/sax/features/external-parameter-entities\", false);\n-            factory.setAttribute(\"http://apache.org/xml/features/nonvalidating/load-external-dtd\", false);\n+    try {\n+      DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n+      factory.setNamespaceAware(false);\n+      factory.setFeature(\"http://javax.xml.XMLConstants/feature/secure-processing\", true);\n+      factory.setFeature(\"http://xml.org/sax/features/external-general-entities\", false);\n+      factory.setFeature(\"http://xml.org/sax/features/external-parameter-entities\", false);\n+      factory.setAttribute(\"http://apache.org/xml/features/nonvalidating/load-external-dtd\", false);\n \n-            DocumentBuilder builder = factory.newDocumentBuilder();\n+      DocumentBuilder builder = factory.newDocumentBuilder();\n \n-            return builder.parse(new InputSource(reader));\n-        } catch (SAXException exception) {\n-            throw new WebdavBadRequest(exception.getMessage());\n-        } catch (Throwable t) {\n-            throw new WebdavException(t);\n-        }\n+      return builder.parse(new InputSource(reader));\n+    } catch (SAXException exception) {\n+      throw new WebdavBadRequest(exception.getMessage());\n+    } catch (Throwable t) {\n+      throw new WebdavException(t);\n     }\n+  }",
  "diff_line_info": {
    "deleted_lines": [
      "        if (contentLength == 0) {",
      "            return null;",
      "        }",
      "        if (reader == null) {",
      "            // No content?",
      "            return null;",
      "        }",
      "        try {",
      "            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();",
      "            factory.setNamespaceAware(false);",
      "            factory.setFeature(\"http://javax.xml.XMLConstants/feature/secure-processing\", true);",
      "            factory.setFeature(\"http://xml.org/sax/features/external-general-entities\", false);",
      "            factory.setFeature(\"http://xml.org/sax/features/external-parameter-entities\", false);",
      "            factory.setAttribute(\"http://apache.org/xml/features/nonvalidating/load-external-dtd\", false);",
      "            DocumentBuilder builder = factory.newDocumentBuilder();",
      "            return builder.parse(new InputSource(reader));",
      "        } catch (SAXException exception) {",
      "            throw new WebdavBadRequest(exception.getMessage());",
      "        } catch (Throwable t) {",
      "            throw new WebdavException(t);",
      "        }"
    ],
    "added_lines": [
      "    if (contentLength == 0) {",
      "      return null;",
      "    }",
      "    if (reader == null) {",
      "      // No content?",
      "      return null;",
      "    }",
      "    try {",
      "      DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();",
      "      factory.setNamespaceAware(false);",
      "      factory.setFeature(\"http://javax.xml.XMLConstants/feature/secure-processing\", true);",
      "      factory.setFeature(\"http://xml.org/sax/features/external-general-entities\", false);",
      "      factory.setFeature(\"http://xml.org/sax/features/external-parameter-entities\", false);",
      "      factory.setAttribute(\"http://apache.org/xml/features/nonvalidating/load-external-dtd\", false);",
      "      DocumentBuilder builder = factory.newDocumentBuilder();",
      "      return builder.parse(new InputSource(reader));",
      "    } catch (SAXException exception) {",
      "      throw new WebdavBadRequest(exception.getMessage());",
      "    } catch (Throwable t) {",
      "      throw new WebdavException(t);",
      "  }"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/Bedework/bw-webdav/pull/1",
  "description": {
    "pr_info": {
      "title": "secure xml",
      "number": 1
    },
    "comment": [
      "I found out that this library is open to some xml vulnerabilities (xxe / ssrf)\r\nThis pull request ensures both the MethodBase and PostRequestPars types are relying on xml secure processing "
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.8,
  "Bug Filter Response": "Final Classification: Security Vulnerability Fix. Confidence: 0.8\n\n**Final Classification:** Security Vulnerability Fix; **Confidence:** 0.8"
}