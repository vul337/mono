{
  "cve_id": "CVE-2019-1010297",
  "cwe_ids": [
    "CWE-190",
    "CWE-787"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:C/I:C/A:C",
  "cvss_is_v3": false,
  "repo_name": "OP-TEE/optee_os",
  "commit_msg": "svc: check for allocation overflow in crypto calls\n\nWithout checking for overflow there is a risk of allocating a buffer\nwith size smaller than anticipated and as a consequence of that it might\nlead to a heap based overflow with attacker controlled data written\noutside the boundaries of the buffer.\n\nFixes: OP-TEE-2018-0010: \"Integer overflow in crypto system calls (x2)\"\n\nSigned-off-by: Joakim Bech <joakim.bech@linaro.org>\nTested-by: Joakim Bech <joakim.bech@linaro.org> (QEMU v7, v8)\nReviewed-by: Jens Wiklander <jens.wiklander@linaro.org>\nReported-by: Riscure <inforequest@riscure.com>\nReported-by: Alyssa Milburn <a.a.milburn@vu.nl>\nAcked-by: Etienne Carriere <etienne.carriere@linaro.org>",
  "commit_hash": "a637243270fc1faae16de059091795c32d86e65e",
  "git_url": "https://github.com/OP-TEE/optee_os/commit/a637243270fc1faae16de059091795c32d86e65e",
  "file_path": "core/tee/tee_svc_cryp.c",
  "func_name": "syscall_obj_generate_key",
  "func_before": "TEE_Result syscall_obj_generate_key(unsigned long obj, unsigned long key_size,\n\t\t\tconst struct utee_attribute *usr_params,\n\t\t\tunsigned long param_count)\n{\n\tTEE_Result res;\n\tstruct tee_ta_session *sess;\n\tconst struct tee_cryp_obj_type_props *type_props;\n\tstruct tee_obj *o;\n\tstruct tee_cryp_obj_secret *key;\n\tsize_t byte_size;\n\tTEE_Attribute *params = NULL;\n\n\tres = tee_ta_get_current_session(&sess);\n\tif (res != TEE_SUCCESS)\n\t\treturn res;\n\n\tres = tee_obj_get(to_user_ta_ctx(sess->ctx),\n\t\t\t  tee_svc_uref_to_vaddr(obj), &o);\n\tif (res != TEE_SUCCESS)\n\t\treturn res;\n\n\t/* Must be a transient object */\n\tif ((o->info.handleFlags & TEE_HANDLE_FLAG_PERSISTENT) != 0)\n\t\treturn TEE_ERROR_BAD_STATE;\n\n\t/* Must not be initialized already */\n\tif ((o->info.handleFlags & TEE_HANDLE_FLAG_INITIALIZED) != 0)\n\t\treturn TEE_ERROR_BAD_STATE;\n\n\t/* Find description of object */\n\ttype_props = tee_svc_find_type_props(o->info.objectType);\n\tif (!type_props)\n\t\treturn TEE_ERROR_NOT_SUPPORTED;\n\n\t/* Check that maxKeySize follows restrictions */\n\tif (key_size % type_props->quanta != 0)\n\t\treturn TEE_ERROR_NOT_SUPPORTED;\n\tif (key_size < type_props->min_size)\n\t\treturn TEE_ERROR_NOT_SUPPORTED;\n\tif (key_size > type_props->max_size)\n\t\treturn TEE_ERROR_NOT_SUPPORTED;\n\n\tparams = malloc(sizeof(TEE_Attribute) * param_count);\n\tif (!params)\n\t\treturn TEE_ERROR_OUT_OF_MEMORY;\n\tres = copy_in_attrs(to_user_ta_ctx(sess->ctx), usr_params, param_count,\n\t\t\t    params);\n\tif (res != TEE_SUCCESS)\n\t\tgoto out;\n\n\tres = tee_svc_cryp_check_attr(ATTR_USAGE_GENERATE_KEY, type_props,\n\t\t\t\t      params, param_count);\n\tif (res != TEE_SUCCESS)\n\t\tgoto out;\n\n\tswitch (o->info.objectType) {\n\tcase TEE_TYPE_AES:\n\tcase TEE_TYPE_DES:\n\tcase TEE_TYPE_DES3:\n\tcase TEE_TYPE_HMAC_MD5:\n\tcase TEE_TYPE_HMAC_SHA1:\n\tcase TEE_TYPE_HMAC_SHA224:\n\tcase TEE_TYPE_HMAC_SHA256:\n\tcase TEE_TYPE_HMAC_SHA384:\n\tcase TEE_TYPE_HMAC_SHA512:\n\tcase TEE_TYPE_GENERIC_SECRET:\n\t\tbyte_size = key_size / 8;\n\n\t\t/*\n\t\t * We have to do it like this because the parity bits aren't\n\t\t * counted when telling the size of the key in bits.\n\t\t */\n\t\tif (o->info.objectType == TEE_TYPE_DES ||\n\t\t    o->info.objectType == TEE_TYPE_DES3) {\n\t\t\tbyte_size = (key_size + key_size / 7) / 8;\n\t\t}\n\n\t\tkey = (struct tee_cryp_obj_secret *)o->attr;\n\t\tif (byte_size > key->alloc_size) {\n\t\t\tres = TEE_ERROR_EXCESS_DATA;\n\t\t\tgoto out;\n\t\t}\n\n\t\tres = crypto_rng_read((void *)(key + 1), byte_size);\n\t\tif (res != TEE_SUCCESS)\n\t\t\tgoto out;\n\n\t\tkey->key_size = byte_size;\n\n\t\t/* Set bits for all known attributes for this object type */\n\t\to->have_attrs = (1 << type_props->num_type_attrs) - 1;\n\n\t\tbreak;\n\n\tcase TEE_TYPE_RSA_KEYPAIR:\n\t\tres = tee_svc_obj_generate_key_rsa(o, type_props, key_size,\n\t\t\t\t\t\t   params, param_count);\n\t\tif (res != TEE_SUCCESS)\n\t\t\tgoto out;\n\t\tbreak;\n\n\tcase TEE_TYPE_DSA_KEYPAIR:\n\t\tres = tee_svc_obj_generate_key_dsa(o, type_props, key_size);\n\t\tif (res != TEE_SUCCESS)\n\t\t\tgoto out;\n\t\tbreak;\n\n\tcase TEE_TYPE_DH_KEYPAIR:\n\t\tres = tee_svc_obj_generate_key_dh(o, type_props, key_size,\n\t\t\t\t\t\t  params, param_count);\n\t\tif (res != TEE_SUCCESS)\n\t\t\tgoto out;\n\t\tbreak;\n\n\tcase TEE_TYPE_ECDSA_KEYPAIR:\n\tcase TEE_TYPE_ECDH_KEYPAIR:\n\t\tres = tee_svc_obj_generate_key_ecc(o, type_props, key_size,\n\t\t\t\t\t\t  params, param_count);\n\t\tif (res != TEE_SUCCESS)\n\t\t\tgoto out;\n\t\tbreak;\n\n\tdefault:\n\t\tres = TEE_ERROR_BAD_FORMAT;\n\t}\n\nout:\n\tfree(params);\n\tif (res == TEE_SUCCESS) {\n\t\to->info.keySize = key_size;\n\t\to->info.handleFlags |= TEE_HANDLE_FLAG_INITIALIZED;\n\t}\n\treturn res;\n}",
  "abstract_func_before": "TEE_Result syscall_obj_generate_key(unsigned long VAR_0, unsigned long VAR_1,\n\t\t\tconst struct utee_attribute *VAR_2,\n\t\t\tunsigned long VAR_3)\n{\n\tTEE_Result VAR_4;\n\tstruct tee_ta_session *VAR_5;\n\tconst struct tee_cryp_obj_type_props *VAR_6;\n\tstruct tee_obj *VAR_7;\n\tstruct tee_cryp_obj_secret *VAR_8;\n\tsize_t VAR_9;\n\tTEE_Attribute *VAR_10 = NULL;\n\n\tVAR_4 = tee_ta_get_current_session(&VAR_5);\n\tif (VAR_4 != VAR_11)\n\t\treturn VAR_4;\n\n\tVAR_4 = tee_obj_get(to_user_ta_ctx(VAR_5->ctx),\n\t\t\t  tee_svc_uref_to_vaddr(VAR_0), &VAR_7);\n\tif (VAR_4 != VAR_11)\n\t\treturn VAR_4;\n\n\t/* COMMENT_0 */\n\tif ((VAR_7->info.handleFlags & VAR_12) != 0)\n\t\treturn VAR_13;\n\n\t/* COMMENT_1 */\n\tif ((VAR_7->info.handleFlags & VAR_14) != 0)\n\t\treturn VAR_13;\n\n\t/* COMMENT_2 */\n\tVAR_6 = tee_svc_find_type_props(VAR_7->info.objectType);\n\tif (!VAR_6)\n\t\treturn VAR_15;\n\n\t/* COMMENT_3 */\n\tif (VAR_1 % VAR_6->quanta != 0)\n\t\treturn VAR_15;\n\tif (VAR_1 < VAR_6->min_size)\n\t\treturn VAR_15;\n\tif (VAR_1 > VAR_6->max_size)\n\t\treturn VAR_15;\n\n\tVAR_10 = malloc(sizeof(TEE_Attribute) * VAR_3);\n\tif (!VAR_10)\n\t\treturn VAR_16;\n\tVAR_4 = copy_in_attrs(to_user_ta_ctx(VAR_5->ctx), VAR_2, VAR_3,\n\t\t\t    VAR_10);\n\tif (VAR_4 != VAR_11)\n\t\tgoto out;\n\n\tVAR_4 = tee_svc_cryp_check_attr(VAR_17, VAR_6,\n\t\t\t\t      VAR_10, VAR_3);\n\tif (VAR_4 != VAR_11)\n\t\tgoto out;\n\n\tswitch (VAR_7->info.objectType) {\n\tcase VAR_18:\n\tcase VAR_19:\n\tcase VAR_20:\n\tcase VAR_21:\n\tcase VAR_22:\n\tcase VAR_23:\n\tcase VAR_24:\n\tcase VAR_25:\n\tcase VAR_26:\n\tcase VAR_27:\n\t\tVAR_9 = VAR_1 / 8;\n\n\t\t/* COMMENT_4 */\n                                                              \n                                                      \n     \n\t\tif (VAR_7->info.objectType == VAR_19 ||\n\t\t    VAR_7->info.objectType == VAR_20) {\n\t\t\tVAR_9 = (VAR_1 + VAR_1 / 7) / 8;\n\t\t}\n\n\t\tVAR_8 = (struct tee_cryp_obj_secret *)VAR_7->attr;\n\t\tif (VAR_9 > VAR_8->alloc_size) {\n\t\t\tVAR_4 = VAR_28;\n\t\t\tgoto out;\n\t\t}\n\n\t\tVAR_4 = crypto_rng_read((void *)(VAR_8 + 1), VAR_9);\n\t\tif (VAR_4 != VAR_11)\n\t\t\tgoto out;\n\n\t\tVAR_8->key_size = VAR_9;\n\n\t\t/* COMMENT_8 */\n\t\tVAR_7->have_attrs = (1 << VAR_6->num_type_attrs) - 1;\n\n\t\tbreak;\n\n\tcase VAR_29:\n\t\tVAR_4 = tee_svc_obj_generate_key_rsa(VAR_7, VAR_6, VAR_1,\n\t\t\t\t\t\t   VAR_10, VAR_3);\n\t\tif (VAR_4 != VAR_11)\n\t\t\tgoto out;\n\t\tbreak;\n\n\tcase VAR_30:\n\t\tVAR_4 = tee_svc_obj_generate_key_dsa(VAR_7, VAR_6, VAR_1);\n\t\tif (VAR_4 != VAR_11)\n\t\t\tgoto out;\n\t\tbreak;\n\n\tcase VAR_31:\n\t\tVAR_4 = tee_svc_obj_generate_key_dh(VAR_7, VAR_6, VAR_1,\n\t\t\t\t\t\t  VAR_10, VAR_3);\n\t\tif (VAR_4 != VAR_11)\n\t\t\tgoto out;\n\t\tbreak;\n\n\tcase VAR_32:\n\tcase VAR_33:\n\t\tVAR_4 = tee_svc_obj_generate_key_ecc(VAR_7, VAR_6, VAR_1,\n\t\t\t\t\t\t  VAR_10, VAR_3);\n\t\tif (VAR_4 != VAR_11)\n\t\t\tgoto out;\n\t\tbreak;\n\n\tdefault:\n\t\tVAR_4 = VAR_34;\n\t}\n\nout:\n\tfree(VAR_10);\n\tif (VAR_4 == VAR_11) {\n\t\tVAR_7->info.keySize = VAR_1;\n\t\tVAR_7->info.handleFlags |= VAR_14;\n\t}\n\treturn VAR_4;\n}",
  "func_graph_path_before": "OP-TEE/optee_os/a637243270fc1faae16de059091795c32d86e65e/tee_svc_cryp.c/vul/before/1.json",
  "func": "TEE_Result syscall_obj_generate_key(unsigned long obj, unsigned long key_size,\n\t\t\tconst struct utee_attribute *usr_params,\n\t\t\tunsigned long param_count)\n{\n\tTEE_Result res;\n\tstruct tee_ta_session *sess;\n\tconst struct tee_cryp_obj_type_props *type_props;\n\tstruct tee_obj *o;\n\tstruct tee_cryp_obj_secret *key;\n\tsize_t byte_size;\n\tTEE_Attribute *params = NULL;\n\n\tres = tee_ta_get_current_session(&sess);\n\tif (res != TEE_SUCCESS)\n\t\treturn res;\n\n\tres = tee_obj_get(to_user_ta_ctx(sess->ctx),\n\t\t\t  tee_svc_uref_to_vaddr(obj), &o);\n\tif (res != TEE_SUCCESS)\n\t\treturn res;\n\n\t/* Must be a transient object */\n\tif ((o->info.handleFlags & TEE_HANDLE_FLAG_PERSISTENT) != 0)\n\t\treturn TEE_ERROR_BAD_STATE;\n\n\t/* Must not be initialized already */\n\tif ((o->info.handleFlags & TEE_HANDLE_FLAG_INITIALIZED) != 0)\n\t\treturn TEE_ERROR_BAD_STATE;\n\n\t/* Find description of object */\n\ttype_props = tee_svc_find_type_props(o->info.objectType);\n\tif (!type_props)\n\t\treturn TEE_ERROR_NOT_SUPPORTED;\n\n\t/* Check that maxKeySize follows restrictions */\n\tif (key_size % type_props->quanta != 0)\n\t\treturn TEE_ERROR_NOT_SUPPORTED;\n\tif (key_size < type_props->min_size)\n\t\treturn TEE_ERROR_NOT_SUPPORTED;\n\tif (key_size > type_props->max_size)\n\t\treturn TEE_ERROR_NOT_SUPPORTED;\n\n\tsize_t alloc_size = 0;\n\n\tif (MUL_OVERFLOW(sizeof(TEE_Attribute), param_count, &alloc_size))\n\t\treturn TEE_ERROR_OVERFLOW;\n\n\tparams = malloc(alloc_size);\n\tif (!params)\n\t\treturn TEE_ERROR_OUT_OF_MEMORY;\n\tres = copy_in_attrs(to_user_ta_ctx(sess->ctx), usr_params, param_count,\n\t\t\t    params);\n\tif (res != TEE_SUCCESS)\n\t\tgoto out;\n\n\tres = tee_svc_cryp_check_attr(ATTR_USAGE_GENERATE_KEY, type_props,\n\t\t\t\t      params, param_count);\n\tif (res != TEE_SUCCESS)\n\t\tgoto out;\n\n\tswitch (o->info.objectType) {\n\tcase TEE_TYPE_AES:\n\tcase TEE_TYPE_DES:\n\tcase TEE_TYPE_DES3:\n\tcase TEE_TYPE_HMAC_MD5:\n\tcase TEE_TYPE_HMAC_SHA1:\n\tcase TEE_TYPE_HMAC_SHA224:\n\tcase TEE_TYPE_HMAC_SHA256:\n\tcase TEE_TYPE_HMAC_SHA384:\n\tcase TEE_TYPE_HMAC_SHA512:\n\tcase TEE_TYPE_GENERIC_SECRET:\n\t\tbyte_size = key_size / 8;\n\n\t\t/*\n\t\t * We have to do it like this because the parity bits aren't\n\t\t * counted when telling the size of the key in bits.\n\t\t */\n\t\tif (o->info.objectType == TEE_TYPE_DES ||\n\t\t    o->info.objectType == TEE_TYPE_DES3) {\n\t\t\tbyte_size = (key_size + key_size / 7) / 8;\n\t\t}\n\n\t\tkey = (struct tee_cryp_obj_secret *)o->attr;\n\t\tif (byte_size > key->alloc_size) {\n\t\t\tres = TEE_ERROR_EXCESS_DATA;\n\t\t\tgoto out;\n\t\t}\n\n\t\tres = crypto_rng_read((void *)(key + 1), byte_size);\n\t\tif (res != TEE_SUCCESS)\n\t\t\tgoto out;\n\n\t\tkey->key_size = byte_size;\n\n\t\t/* Set bits for all known attributes for this object type */\n\t\to->have_attrs = (1 << type_props->num_type_attrs) - 1;\n\n\t\tbreak;\n\n\tcase TEE_TYPE_RSA_KEYPAIR:\n\t\tres = tee_svc_obj_generate_key_rsa(o, type_props, key_size,\n\t\t\t\t\t\t   params, param_count);\n\t\tif (res != TEE_SUCCESS)\n\t\t\tgoto out;\n\t\tbreak;\n\n\tcase TEE_TYPE_DSA_KEYPAIR:\n\t\tres = tee_svc_obj_generate_key_dsa(o, type_props, key_size);\n\t\tif (res != TEE_SUCCESS)\n\t\t\tgoto out;\n\t\tbreak;\n\n\tcase TEE_TYPE_DH_KEYPAIR:\n\t\tres = tee_svc_obj_generate_key_dh(o, type_props, key_size,\n\t\t\t\t\t\t  params, param_count);\n\t\tif (res != TEE_SUCCESS)\n\t\t\tgoto out;\n\t\tbreak;\n\n\tcase TEE_TYPE_ECDSA_KEYPAIR:\n\tcase TEE_TYPE_ECDH_KEYPAIR:\n\t\tres = tee_svc_obj_generate_key_ecc(o, type_props, key_size,\n\t\t\t\t\t\t  params, param_count);\n\t\tif (res != TEE_SUCCESS)\n\t\t\tgoto out;\n\t\tbreak;\n\n\tdefault:\n\t\tres = TEE_ERROR_BAD_FORMAT;\n\t}\n\nout:\n\tfree(params);\n\tif (res == TEE_SUCCESS) {\n\t\to->info.keySize = key_size;\n\t\to->info.handleFlags |= TEE_HANDLE_FLAG_INITIALIZED;\n\t}\n\treturn res;\n}",
  "abstract_func": "TEE_Result syscall_obj_generate_key(unsigned long VAR_0, unsigned long VAR_1,\n\t\t\tconst struct utee_attribute *VAR_2,\n\t\t\tunsigned long VAR_3)\n{\n\tTEE_Result VAR_4;\n\tstruct tee_ta_session *VAR_5;\n\tconst struct tee_cryp_obj_type_props *VAR_6;\n\tstruct tee_obj *VAR_7;\n\tstruct tee_cryp_obj_secret *VAR_8;\n\tsize_t VAR_9;\n\tTEE_Attribute *VAR_10 = NULL;\n\n\tVAR_4 = tee_ta_get_current_session(&VAR_5);\n\tif (VAR_4 != VAR_11)\n\t\treturn VAR_4;\n\n\tVAR_4 = tee_obj_get(to_user_ta_ctx(VAR_5->ctx),\n\t\t\t  tee_svc_uref_to_vaddr(VAR_0), &VAR_7);\n\tif (VAR_4 != VAR_11)\n\t\treturn VAR_4;\n\n\t/* COMMENT_0 */\n\tif ((VAR_7->info.handleFlags & VAR_12) != 0)\n\t\treturn VAR_13;\n\n\t/* COMMENT_1 */\n\tif ((VAR_7->info.handleFlags & VAR_14) != 0)\n\t\treturn VAR_13;\n\n\t/* COMMENT_2 */\n\tVAR_6 = tee_svc_find_type_props(VAR_7->info.objectType);\n\tif (!VAR_6)\n\t\treturn VAR_15;\n\n\t/* COMMENT_3 */\n\tif (VAR_1 % VAR_6->quanta != 0)\n\t\treturn VAR_15;\n\tif (VAR_1 < VAR_6->min_size)\n\t\treturn VAR_15;\n\tif (VAR_1 > VAR_6->max_size)\n\t\treturn VAR_15;\n\n\tsize_t VAR_16 = 0;\n\n\tif (MUL_OVERFLOW(sizeof(TEE_Attribute), VAR_3, &VAR_16))\n\t\treturn VAR_17;\n\n\tVAR_10 = malloc(VAR_16);\n\tif (!VAR_10)\n\t\treturn VAR_18;\n\tVAR_4 = copy_in_attrs(to_user_ta_ctx(VAR_5->ctx), VAR_2, VAR_3,\n\t\t\t    VAR_10);\n\tif (VAR_4 != VAR_11)\n\t\tgoto out;\n\n\tVAR_4 = tee_svc_cryp_check_attr(VAR_19, VAR_6,\n\t\t\t\t      VAR_10, VAR_3);\n\tif (VAR_4 != VAR_11)\n\t\tgoto out;\n\n\tswitch (VAR_7->info.objectType) {\n\tcase VAR_20:\n\tcase VAR_21:\n\tcase VAR_22:\n\tcase VAR_23:\n\tcase VAR_24:\n\tcase VAR_25:\n\tcase VAR_26:\n\tcase VAR_27:\n\tcase VAR_28:\n\tcase VAR_29:\n\t\tVAR_9 = VAR_1 / 8;\n\n\t\t/* COMMENT_4 */\n                                                              \n                                                      \n     \n\t\tif (VAR_7->info.objectType == VAR_21 ||\n\t\t    VAR_7->info.objectType == VAR_22) {\n\t\t\tVAR_9 = (VAR_1 + VAR_1 / 7) / 8;\n\t\t}\n\n\t\tVAR_8 = (struct tee_cryp_obj_secret *)VAR_7->attr;\n\t\tif (VAR_9 > VAR_8->alloc_size) {\n\t\t\tVAR_4 = VAR_30;\n\t\t\tgoto out;\n\t\t}\n\n\t\tVAR_4 = crypto_rng_read((void *)(VAR_8 + 1), VAR_9);\n\t\tif (VAR_4 != VAR_11)\n\t\t\tgoto out;\n\n\t\tVAR_8->key_size = VAR_9;\n\n\t\t/* COMMENT_8 */\n\t\tVAR_7->have_attrs = (1 << VAR_6->num_type_attrs) - 1;\n\n\t\tbreak;\n\n\tcase VAR_31:\n\t\tVAR_4 = tee_svc_obj_generate_key_rsa(VAR_7, VAR_6, VAR_1,\n\t\t\t\t\t\t   VAR_10, VAR_3);\n\t\tif (VAR_4 != VAR_11)\n\t\t\tgoto out;\n\t\tbreak;\n\n\tcase VAR_32:\n\t\tVAR_4 = tee_svc_obj_generate_key_dsa(VAR_7, VAR_6, VAR_1);\n\t\tif (VAR_4 != VAR_11)\n\t\t\tgoto out;\n\t\tbreak;\n\n\tcase VAR_33:\n\t\tVAR_4 = tee_svc_obj_generate_key_dh(VAR_7, VAR_6, VAR_1,\n\t\t\t\t\t\t  VAR_10, VAR_3);\n\t\tif (VAR_4 != VAR_11)\n\t\t\tgoto out;\n\t\tbreak;\n\n\tcase VAR_34:\n\tcase VAR_35:\n\t\tVAR_4 = tee_svc_obj_generate_key_ecc(VAR_7, VAR_6, VAR_1,\n\t\t\t\t\t\t  VAR_10, VAR_3);\n\t\tif (VAR_4 != VAR_11)\n\t\t\tgoto out;\n\t\tbreak;\n\n\tdefault:\n\t\tVAR_4 = VAR_36;\n\t}\n\nout:\n\tfree(VAR_10);\n\tif (VAR_4 == VAR_11) {\n\t\tVAR_7->info.keySize = VAR_1;\n\t\tVAR_7->info.handleFlags |= VAR_14;\n\t}\n\treturn VAR_4;\n}",
  "func_graph_path": "OP-TEE/optee_os/a637243270fc1faae16de059091795c32d86e65e/tee_svc_cryp.c/vul/after/1.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -40,7 +40,12 @@\n \tif (key_size > type_props->max_size)\n \t\treturn TEE_ERROR_NOT_SUPPORTED;\n \n-\tparams = malloc(sizeof(TEE_Attribute) * param_count);\n+\tsize_t alloc_size = 0;\n+\n+\tif (MUL_OVERFLOW(sizeof(TEE_Attribute), param_count, &alloc_size))\n+\t\treturn TEE_ERROR_OVERFLOW;\n+\n+\tparams = malloc(alloc_size);\n \tif (!params)\n \t\treturn TEE_ERROR_OUT_OF_MEMORY;\n \tres = copy_in_attrs(to_user_ta_ctx(sess->ctx), usr_params, param_count,",
  "diff_line_info": {
    "deleted_lines": [
      "\tparams = malloc(sizeof(TEE_Attribute) * param_count);"
    ],
    "added_lines": [
      "\tsize_t alloc_size = 0;",
      "",
      "\tif (MUL_OVERFLOW(sizeof(TEE_Attribute), param_count, &alloc_size))",
      "\t\treturn TEE_ERROR_OVERFLOW;",
      "",
      "\tparams = malloc(alloc_size);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/OP-TEE/optee_os/pull/2745",
  "description": {
    "pr_info": {
      "title": "Fixes for security potential issues reported by Riscure",
      "number": 2745
    },
    "comment": [
      "This patch series address a list of potential security issues and (lack of) hardening as identified by [Riscure](https://www.riscure.com/). More details about the issues themselves will be submitted to https://www.op-tee.org/security-advisories in the coming weeks. \r\n\r\nNote that patches here are already \"pre-reviewed\" (internally at Linaro) and the reason for that is that all patches have already been circulated to trustworthy stakeholders according to our disclosure plan (see the draft [here](https://optee.readthedocs.io/general/disclousure.html)). Having that said, we encourage OP-TEE maintainers and other users to chime in and do a final review here on GitHub.\r\n\r\nI've just rebased it on top of master and all tests in xtest passes. ",
      "I've seen the Shippable error, I'll have a look at it.",
      "> I've seen the Shippable error, I'll have a look at it.\r\n\r\nI've changed the macro to only consider SMALL_PAGE_SIZE, since that is what we check against. Will push a fix soon.",
      "Pushed fixes for all (fixable) comments so far. I've saved the ones that has to be done at rebase/force push time.",
      "LGTM, you may add my:\r\n\r\n`Acked-by: Jerome Forissier <jerome.forissier@linaro.org>`\r\n\r\n...to all the commits that deal with CFG_ flags.",
      "`Acked-by: Etienne Carriere <etienne.carriere@linaro.org>` for the whole with some minor comments.",
      "> `Acked-by: Etienne Carriere <etienne.carriere@linaro.org>` for the whole with some minor comments.\r\n\r\n@etienne-lms , I'm confused. I cannot see any comments from you. Is GitHub playing me a trick here?",
      "Pushed a few more fixes.\r\n\r\nWaiting for:\r\n- Etienne's follow up answers on my replies to his findings.\r\n\r\nTo-do at rebase/force/squash:\r\n- Add Acked-by tags.\r\n- Fix wrong author vs Signed-Off-By.\r\n",
      "- Fixed SoB / Author inconsistency.\r\n- Fixed all outstanding review comments.\r\n- Fixed spelling error found by checkpatch / Shippable.\r\n- Added A-B and T-B tags.\r\n\r\nSo, if IBART and friends are happy .... then ...\r\nSquashed, rebased and tag(s) applied (should be) ready for merge! Thanks!",
      "Sorry, I still have comments on the last 6 commits.\r\n\r\n- \"plat-all: Enable CFG_CORE_STACK_PROTECTOR_STRONG=y by default\" removes `CFG_WITH_STACK_CANARIES ?= y` from `rpi3`. It also enables`CFG_TA_STACK_PROTECTOR_STRONG ?= y` which is introduced in a later commit. Overall I think this commit had better be folded into the parent commit \"core: introduce CFG_CORE_STACK_PROTECTOR_STRONG flag\" (which will also avoid a Travis warning about missing commit description).\r\n- \"ta-dev-kit: enable _FORTIFY_SOURCE=2 on optimized builds\": you say \"shall only be enabled...\", so why isn't it part of commit \"ta-dev-kit: Introduce CFG_TA_FORTIFY_SOURCE\"?\r\n\r\nAlso I think the Travis warnings (missing commit descriptions) should be fixed. When introducing a new flag, we should explain what it does, why we add it, and what is its default value. Things I expect to understand when reading the description are: what is a stack protector? What happens when the \"protection\" detects that something is wrong? Does the TA panic? Does the TEE core panic? Same for the \"fortify\" option.\r\n\r\nIn the end I'd like to have 4 commits:\r\n```\r\n    ta: introduce CFG_TA_STACK_PROTECTOR_STRONG\r\n    ta: introduce CFG_TA_FORTIFY_SOURCE\r\n    core: introduce CFG_CORE_STACK_PROTECTOR_STRONG\r\n    core: introduce CFG_CORE_FORTIFY_SOURCE\r\n```\r\n",
      "@jforissier , makes sense. I'll do another clean-up / clarification round, stay tuned.",
      "Easier said that done trying to trigger the protectors, since I get data abort when trying to put together examples that should trigger the stack-protector for example. I'd expect some output like \"`*** stack smashing detected ***` at least before the data-abort.",
      "@jbech-linaro hard to find documentation, but it looks like the compiler will just call `__stack_chk_fail()`, which we happen to define here: https://github.com/OP-TEE/optee_os/blob/3.3.0/lib/libutils/isoc/stack_check.c\r\nAt least, that's what I can see in the disassembly (`tee.dmp` or `objdump -ldx ta.elf`).\r\n\r\nSo, if I understand correctly, the TA or the TEE core thread would just hang when stack smashing is detected (instead of proceeding with corrupt data).",
      "I think I can trigger it successfully now, since without using the flags I get data-aborts, with the flags enabled I get stuck. I've tried to figure out where I am by checking GDB, but so far I haven't been able to make sense out of the address. I'll try to see whether it ends up in `stack_check.c` or not.",
      "@jbech-linaro sounds good. Perhaps `__stack_chk_fail()` should `EMSG()` and call `panic()` (`ifdef __KERNEL__`) or `abort()`/`utee_panic()` (user mode TA). Or is there any reason we could not do that in this context?",
      "I've tried setting a breakpoint at `__stack_chk_fail`, but it doesn't seem to hang there. But I can see my data (`foo(AAAA...)`) in the `r2` when breaking, so I suspect it is stuck somewhere in strcpy, and/or \"panic\" while(1) as a consequence of this.\r\n```bash\r\nfoo(\"AAAAAAA.....\");\r\n\r\nvoid foo(char *bar) {\r\nchar buffer[16];\r\nstrcpy(buffer, bar)\r\n}\r\n```\r\n\r\n```\r\nr2 = 0x00414141\r\n...\r\n```\r\nI think I will skip the CFG_-patches and submit them as a separate PR if/when I have some time to spare. They weren't really part of the Riscure report, I just added it, since I thought it'd be useful to catch things.",
      "> I think I will skip the CFG_-patches [...]\r\n\r\nSure. They are definitely useful IMO, but certainly not required for 3.4.0. Thanks!",
      "Two things ....\r\n1. I've removed the CFG patches from this PR and pushed that.\r\n2. I've rebuilt QEMU with SMP=1 and now!!! Lo and behold! I'm stuck in .... drum roll ... `__stack_chk_fail() { while (1) }`.\r\n\r\nSo it seems to work as expected.\r\n\r\nAnyhow, as before, if IBART and friends are happy:\r\nSquashed, rebased and tag(s) applied (should be) ready for merge! Thanks!"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.95"
}