{
  "cve_id": "CVE-2021-38388",
  "cwe_ids": [
    "CWE-862"
  ],
  "cvss_vector": "AV:N/AC:L/Au:S/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "line/centraldogma",
  "commit_msg": "Address the comment by @ikhoon",
  "commit_hash": "e83b558ef9eaa44f71b7d9236bdec9f68c85b8bd",
  "git_url": "https://github.com/line/centraldogma/commit/e83b558ef9eaa44f71b7d9236bdec9f68c85b8bd",
  "file_path": "server/src/main/java/com/linecorp/centraldogma/server/internal/thrift/CentralDogmaServiceImpl.java",
  "func_name": "push",
  "func_before": "@Override\n    public void push(String projectName, String repositoryName, Revision baseRevision, Author author,\n                     String summary, Comment detail, List<Change> changes, AsyncMethodCallback resultHandler) {\n\n        // TODO(trustin): Change Repository.commit() to return a Commit.\n        handle(executor.execute(Command.push(convert(author), projectName, repositoryName,\n                                             convert(baseRevision), summary, detail.getContent(),\n                                             convert(detail.getMarkup()), convert(changes, Converter::convert)))\n                       .thenCompose(commitResult -> {\n                           final com.linecorp.centraldogma.common.Revision newRev = commitResult.revision();\n                           return projectManager.get(projectName).repos().get(repositoryName)\n                                                .history(newRev, newRev, \"/**\");\n                       })\n                       .thenApply(commits -> convert(commits.get(0))),\n               resultHandler);\n    }",
  "abstract_func_before": "@Override\n    public void push(String VAR_0, String VAR_1, Revision VAR_2, Author VAR_3,\n                     String VAR_4, Comment VAR_5, List<Change> VAR_6, AsyncMethodCallback VAR_7) {\n\n        /* COMMENT_0 */\n        handle(VAR_8.execute(VAR_9.push(convert(VAR_3), VAR_0, VAR_1,\n                                             convert(VAR_2), VAR_4, VAR_5.getContent(),\n                                             convert(VAR_5.getMarkup()), convert(VAR_6, VAR_10::VAR_11)))\n                       .thenCompose(VAR_12 -> {\n                           final com.linecorp.centraldogma.common.Revision VAR_13 = VAR_12.revision();\n                           return VAR_14.get(VAR_0).repos().get(VAR_1)\n                                                .history(VAR_13, VAR_13, \"/**\");\n                       })\n                       .thenApply(VAR_15 -> convert(VAR_15.get(0))),\n               VAR_7);\n    }",
  "func_graph_path_before": "line/centraldogma/e83b558ef9eaa44f71b7d9236bdec9f68c85b8bd/CentralDogmaServiceImpl.java/vul/before/0.json",
  "func": "@Override\n    public void push(String projectName, String repositoryName, Revision baseRevision, Author author,\n                     String summary, Comment detail, List<Change> changes, AsyncMethodCallback resultHandler) {\n        final List<com.linecorp.centraldogma.common.Change<?>> convertedChanges =\n                convert(changes, Converter::convert);\n        try {\n            checkMirrorLocalRepo(repositoryName, convertedChanges);\n        } catch (Exception e) {\n            resultHandler.onError(e);\n            return;\n        }\n        // TODO(trustin): Change Repository.commit() to return a Commit.\n        handle(executor.execute(Command.push(convert(author), projectName, repositoryName,\n                                             convert(baseRevision), summary, detail.getContent(),\n                                             convert(detail.getMarkup()), convertedChanges))\n                       .thenCompose(commitResult -> {\n                           final com.linecorp.centraldogma.common.Revision newRev = commitResult.revision();\n                           return projectManager.get(projectName).repos().get(repositoryName)\n                                                .history(newRev, newRev, \"/**\");\n                       })\n                       .thenApply(commits -> convert(commits.get(0))),\n               resultHandler);\n    }",
  "abstract_func": "@Override\n    public void push(String VAR_0, String VAR_1, Revision VAR_2, Author VAR_3,\n                     String VAR_4, Comment VAR_5, List<Change> VAR_6, AsyncMethodCallback VAR_7) {\n        final List<com.linecorp.centraldogma.common.Change<?>> VAR_8 =\n                convert(VAR_6, VAR_9::VAR_10);\n        try {\n            checkMirrorLocalRepo(VAR_1, VAR_8);\n        } catch (Exception VAR_11) {\n            VAR_7.onError(VAR_11);\n            return;\n        }\n        /* COMMENT_0 */\n        handle(VAR_12.execute(VAR_13.push(convert(VAR_3), VAR_0, VAR_1,\n                                             convert(VAR_2), VAR_4, VAR_5.getContent(),\n                                             convert(VAR_5.getMarkup()), VAR_8))\n                       .thenCompose(VAR_14 -> {\n                           final com.linecorp.centraldogma.common.Revision VAR_15 = VAR_14.revision();\n                           return VAR_16.get(VAR_0).repos().get(VAR_1)\n                                                .history(VAR_15, VAR_15, \"/**\");\n                       })\n                       .thenApply(VAR_17 -> convert(VAR_17.get(0))),\n               VAR_7);\n    }",
  "func_graph_path": "line/centraldogma/e83b558ef9eaa44f71b7d9236bdec9f68c85b8bd/CentralDogmaServiceImpl.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,11 +1,18 @@\n @Override\n     public void push(String projectName, String repositoryName, Revision baseRevision, Author author,\n                      String summary, Comment detail, List<Change> changes, AsyncMethodCallback resultHandler) {\n-\n+        final List<com.linecorp.centraldogma.common.Change<?>> convertedChanges =\n+                convert(changes, Converter::convert);\n+        try {\n+            checkMirrorLocalRepo(repositoryName, convertedChanges);\n+        } catch (Exception e) {\n+            resultHandler.onError(e);\n+            return;\n+        }\n         // TODO(trustin): Change Repository.commit() to return a Commit.\n         handle(executor.execute(Command.push(convert(author), projectName, repositoryName,\n                                              convert(baseRevision), summary, detail.getContent(),\n-                                             convert(detail.getMarkup()), convert(changes, Converter::convert)))\n+                                             convert(detail.getMarkup()), convertedChanges))\n                        .thenCompose(commitResult -> {\n                            final com.linecorp.centraldogma.common.Revision newRev = commitResult.revision();\n                            return projectManager.get(projectName).repos().get(repositoryName)",
  "diff_line_info": {
    "deleted_lines": [
      "",
      "                                             convert(detail.getMarkup()), convert(changes, Converter::convert)))"
    ],
    "added_lines": [
      "        final List<com.linecorp.centraldogma.common.Change<?>> convertedChanges =",
      "                convert(changes, Converter::convert);",
      "        try {",
      "            checkMirrorLocalRepo(repositoryName, convertedChanges);",
      "        } catch (Exception e) {",
      "            resultHandler.onError(e);",
      "            return;",
      "        }",
      "                                             convert(detail.getMarkup()), convertedChanges))"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/line/centraldogma/pull/621",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/line/centraldogma/pull/621: 403 Client Error: Forbidden for url: https://api.github.com/repos/line/centraldogma/pulls/621",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.9  \n\nThe patch addresses a security concern by preventing mirroring to internal repositories, as indicated by the modification of raising exceptions for specific repositories. The code changes directly implement this security check, aligning with the described vulnerability."
}