{
  "cve_id": "CVE-2018-13139",
  "cwe_ids": [
    "CWE-787"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "libsndfile",
  "commit_msg": "Check MAX_CHANNELS in sndfile-deinterleave\n\nAllocated buffer has space for only 16 channels. Verify that input file\nmeets this limit.\n\nFixes #397",
  "commit_hash": "df18323c622b54221ee7ace74b177cdcccc152d7",
  "git_url": "https://github.com/libsndfile/libsndfile/commit/df18323c622b54221ee7ace74b177cdcccc152d7",
  "file_path": "programs/sndfile-deinterleave.c",
  "func_name": "main",
  "func_before": "int\nmain (int argc, char **argv)\n{\tSTATE state ;\n\tSF_INFO sfinfo ;\n\tchar pathname [512], ext [32], *cptr ;\n\tint ch, double_split ;\n\n\tif (argc != 2)\n\t{\tif (argc != 1)\n\t\t\tputs (\"\\nError : need a single input file.\\n\") ;\n\t\tusage_exit () ;\n\t\t} ;\n\n\tmemset (&state, 0, sizeof (state)) ;\n\tmemset (&sfinfo, 0, sizeof (sfinfo)) ;\n\n\tif ((state.infile = sf_open (argv [1], SFM_READ, &sfinfo)) == NULL)\n\t{\tprintf (\"\\nError : Not able to open input file '%s'\\n%s\\n\", argv [1], sf_strerror (NULL)) ;\n\t\texit (1) ;\n\t\t} ;\n\n\tif (sfinfo.channels < 2)\n\t{\tprintf (\"\\nError : Input file '%s' only has one channel.\\n\", argv [1]) ;\n\t\texit (1) ;\n\t\t} ;\n\n\tstate.channels = sfinfo.channels ;\n\tsfinfo.channels = 1 ;\n\n\tif (snprintf (pathname, sizeof (pathname), \"%s\", argv [1]) > (int) sizeof (pathname))\n\t{\tprintf (\"\\nError : Length of provided filename '%s' exceeds MAX_PATH (%d).\\n\", argv [1], (int) sizeof (pathname)) ;\n\t\texit (1) ;\n\t\t} ;\n\n\tif ((cptr = strrchr (pathname, '.')) == NULL)\n\t\text [0] = 0 ;\n\telse\n\t{\tsnprintf (ext, sizeof (ext), \"%s\", cptr) ;\n\t\tcptr [0] = 0 ;\n\t\t} ;\n\n\tprintf (\"Input file : %s\\n\", pathname) ;\n\tputs (\"Output files :\") ;\n\n\tfor (ch = 0 ; ch < state.channels ; ch++)\n\t{\tchar filename [520] ;\n\n\t\tsnprintf (filename, sizeof (filename), \"%s_%02d%s\", pathname, ch, ext) ;\n\n\t\tif ((state.outfile [ch] = sf_open (filename, SFM_WRITE, &sfinfo)) == NULL)\n\t\t{\tprintf (\"Not able to open output file '%s'\\n%s\\n\", filename, sf_strerror (NULL)) ;\n\t\t\texit (1) ;\n\t\t\t} ;\n\n\t\tprintf (\"    %s\\n\", filename) ;\n\t\t} ;\n\n\tswitch (sfinfo.format & SF_FORMAT_SUBMASK)\n\t{\tcase SF_FORMAT_FLOAT :\n\t\tcase SF_FORMAT_DOUBLE :\n\t\tcase SF_FORMAT_VORBIS :\n\t\t\tdouble_split = 1 ;\n\t\t\tbreak ;\n\n\t\tdefault :\n\t\t\tdouble_split = 0 ;\n\t\t\tbreak ;\n\t\t} ;\n\n\tif (double_split)\n\t\tdeinterleave_double (&state) ;\n\telse\n\t\tdeinterleave_int (&state) ;\n\n\tsf_close (state.infile) ;\n\tfor (ch = 0 ; ch < MAX_CHANNELS ; ch++)\n\t\tif (state.outfile [ch] != NULL)\n\t\t\tsf_close (state.outfile [ch]) ;\n\n\treturn 0 ;\n}",
  "abstract_func_before": "int\nmain (int VAR_0, char **VAR_1)\n{\tSTATE VAR_2 ;\n\tSF_INFO VAR_3 ;\n\tchar VAR_4 [512], VAR_5 [32], *VAR_6 ;\n\tint VAR_7, VAR_8 ;\n\n\tif (VAR_0 != 2)\n\t{\tif (VAR_0 != 1)\n\t\t\tputs (\"\\nError : need a single input file.\\n\") ;\n\t\tusage_exit () ;\n\t\t} ;\n\n\tmemset (&VAR_2, 0, sizeof (VAR_2)) ;\n\tmemset (&VAR_3, 0, sizeof (VAR_3)) ;\n\n\tif ((VAR_2.infile = sf_open (VAR_1 [1], VAR_9, &VAR_3)) == NULL)\n\t{\tprintf (\"\\nError : Not able to open input file '%s'\\n%s\\n\", VAR_1 [1], sf_strerror (NULL)) ;\n\t\texit (1) ;\n\t\t} ;\n\n\tif (VAR_3.channels < 2)\n\t{\tprintf (\"\\nError : Input file '%s' only has one channel.\\n\", VAR_1 [1]) ;\n\t\texit (1) ;\n\t\t} ;\n\n\tVAR_2.channels = VAR_3.channels ;\n\tVAR_3.channels = 1 ;\n\n\tif (snprintf (VAR_4, sizeof (VAR_4), \"%s\", VAR_1 [1]) > (int) sizeof (VAR_4))\n\t{\tprintf (\"\\nError : Length of provided filename '%s' exceeds MAX_PATH (%d).\\n\", VAR_1 [1], (int) sizeof (VAR_4)) ;\n\t\texit (1) ;\n\t\t} ;\n\n\tif ((VAR_6 = strrchr (VAR_4, '.')) == NULL)\n\t\tVAR_5 [0] = 0 ;\n\telse\n\t{\tsnprintf (VAR_5, sizeof (VAR_5), \"%s\", VAR_6) ;\n\t\tVAR_6 [0] = 0 ;\n\t\t} ;\n\n\tprintf (\"Input file : %s\\n\", VAR_4) ;\n\tputs (\"Output files :\") ;\n\n\tfor (VAR_7 = 0 ; VAR_7 < VAR_2.channels ; VAR_7++)\n\t{\tchar VAR_10 [520] ;\n\n\t\tsnprintf (VAR_10, sizeof (VAR_10), \"%s_%02d%s\", VAR_4, VAR_7, VAR_5) ;\n\n\t\tif ((VAR_2.outfile [VAR_7] = sf_open (VAR_10, VAR_11, &VAR_3)) == NULL)\n\t\t{\tprintf (\"Not able to open output file '%s'\\n%s\\n\", VAR_10, sf_strerror (NULL)) ;\n\t\t\texit (1) ;\n\t\t\t} ;\n\n\t\tprintf (\"    %s\\n\", VAR_10) ;\n\t\t} ;\n\n\tswitch (VAR_3.format & VAR_12)\n\t{\tcase VAR_13 :\n\t\tcase VAR_14 :\n\t\tcase VAR_15 :\n\t\t\tVAR_8 = 1 ;\n\t\t\tbreak ;\n\n\t\tdefault :\n\t\t\tVAR_8 = 0 ;\n\t\t\tbreak ;\n\t\t} ;\n\n\tif (VAR_8)\n\t\tdeinterleave_double (&VAR_2) ;\n\telse\n\t\tdeinterleave_int (&VAR_2) ;\n\n\tsf_close (VAR_2.infile) ;\n\tfor (VAR_7 = 0 ; VAR_7 < VAR_16 ; VAR_7++)\n\t\tif (VAR_2.outfile [VAR_7] != NULL)\n\t\t\tsf_close (VAR_2.outfile [VAR_7]) ;\n\n\treturn 0 ;\n}",
  "func_graph_path_before": "libsndfile/df18323c622b54221ee7ace74b177cdcccc152d7/sndfile-deinterleave.c/vul/before/0.json",
  "func": "int\nmain (int argc, char **argv)\n{\tSTATE state ;\n\tSF_INFO sfinfo ;\n\tchar pathname [512], ext [32], *cptr ;\n\tint ch, double_split ;\n\n\tif (argc != 2)\n\t{\tif (argc != 1)\n\t\t\tputs (\"\\nError : need a single input file.\\n\") ;\n\t\tusage_exit () ;\n\t\t} ;\n\n\tmemset (&state, 0, sizeof (state)) ;\n\tmemset (&sfinfo, 0, sizeof (sfinfo)) ;\n\n\tif ((state.infile = sf_open (argv [1], SFM_READ, &sfinfo)) == NULL)\n\t{\tprintf (\"\\nError : Not able to open input file '%s'\\n%s\\n\", argv [1], sf_strerror (NULL)) ;\n\t\texit (1) ;\n\t\t} ;\n\n\tif (sfinfo.channels < 2)\n\t{\tprintf (\"\\nError : Input file '%s' only has one channel.\\n\", argv [1]) ;\n\t\texit (1) ;\n\t\t} ;\n\n\tif (sfinfo.channels > MAX_CHANNELS)\n\t{\tprintf (\"\\nError : Input file '%s' has too many (%d) channels. Limit is %d.\\n\",\n\t\t\targv [1], sfinfo.channels, MAX_CHANNELS) ;\n\t\texit (1) ;\n\t\t} ;\n\n\n\tstate.channels = sfinfo.channels ;\n\tsfinfo.channels = 1 ;\n\n\tif (snprintf (pathname, sizeof (pathname), \"%s\", argv [1]) > (int) sizeof (pathname))\n\t{\tprintf (\"\\nError : Length of provided filename '%s' exceeds MAX_PATH (%d).\\n\", argv [1], (int) sizeof (pathname)) ;\n\t\texit (1) ;\n\t\t} ;\n\n\tif ((cptr = strrchr (pathname, '.')) == NULL)\n\t\text [0] = 0 ;\n\telse\n\t{\tsnprintf (ext, sizeof (ext), \"%s\", cptr) ;\n\t\tcptr [0] = 0 ;\n\t\t} ;\n\n\tprintf (\"Input file : %s\\n\", pathname) ;\n\tputs (\"Output files :\") ;\n\n\tfor (ch = 0 ; ch < state.channels ; ch++)\n\t{\tchar filename [520] ;\n\n\t\tsnprintf (filename, sizeof (filename), \"%s_%02d%s\", pathname, ch, ext) ;\n\n\t\tif ((state.outfile [ch] = sf_open (filename, SFM_WRITE, &sfinfo)) == NULL)\n\t\t{\tprintf (\"Not able to open output file '%s'\\n%s\\n\", filename, sf_strerror (NULL)) ;\n\t\t\texit (1) ;\n\t\t\t} ;\n\n\t\tprintf (\"    %s\\n\", filename) ;\n\t\t} ;\n\n\tswitch (sfinfo.format & SF_FORMAT_SUBMASK)\n\t{\tcase SF_FORMAT_FLOAT :\n\t\tcase SF_FORMAT_DOUBLE :\n\t\tcase SF_FORMAT_VORBIS :\n\t\t\tdouble_split = 1 ;\n\t\t\tbreak ;\n\n\t\tdefault :\n\t\t\tdouble_split = 0 ;\n\t\t\tbreak ;\n\t\t} ;\n\n\tif (double_split)\n\t\tdeinterleave_double (&state) ;\n\telse\n\t\tdeinterleave_int (&state) ;\n\n\tsf_close (state.infile) ;\n\tfor (ch = 0 ; ch < MAX_CHANNELS ; ch++)\n\t\tif (state.outfile [ch] != NULL)\n\t\t\tsf_close (state.outfile [ch]) ;\n\n\treturn 0 ;\n}",
  "abstract_func": "int\nmain (int VAR_0, char **VAR_1)\n{\tSTATE VAR_2 ;\n\tSF_INFO VAR_3 ;\n\tchar VAR_4 [512], VAR_5 [32], *VAR_6 ;\n\tint VAR_7, VAR_8 ;\n\n\tif (VAR_0 != 2)\n\t{\tif (VAR_0 != 1)\n\t\t\tputs (\"\\nError : need a single input file.\\n\") ;\n\t\tusage_exit () ;\n\t\t} ;\n\n\tmemset (&VAR_2, 0, sizeof (VAR_2)) ;\n\tmemset (&VAR_3, 0, sizeof (VAR_3)) ;\n\n\tif ((VAR_2.infile = sf_open (VAR_1 [1], VAR_9, &VAR_3)) == NULL)\n\t{\tprintf (\"\\nError : Not able to open input file '%s'\\n%s\\n\", VAR_1 [1], sf_strerror (NULL)) ;\n\t\texit (1) ;\n\t\t} ;\n\n\tif (VAR_3.channels < 2)\n\t{\tprintf (\"\\nError : Input file '%s' only has one channel.\\n\", VAR_1 [1]) ;\n\t\texit (1) ;\n\t\t} ;\n\n\tif (VAR_3.channels > VAR_10)\n\t{\tprintf (\"\\nError : Input file '%s' has too many (%d) channels. Limit is %d.\\n\",\n\t\t\tVAR_1 [1], VAR_3.channels, VAR_10) ;\n\t\texit (1) ;\n\t\t} ;\n\n\n\tVAR_2.channels = VAR_3.channels ;\n\tVAR_3.channels = 1 ;\n\n\tif (snprintf (VAR_4, sizeof (VAR_4), \"%s\", VAR_1 [1]) > (int) sizeof (VAR_4))\n\t{\tprintf (\"\\nError : Length of provided filename '%s' exceeds MAX_PATH (%d).\\n\", VAR_1 [1], (int) sizeof (VAR_4)) ;\n\t\texit (1) ;\n\t\t} ;\n\n\tif ((VAR_6 = strrchr (VAR_4, '.')) == NULL)\n\t\tVAR_5 [0] = 0 ;\n\telse\n\t{\tsnprintf (VAR_5, sizeof (VAR_5), \"%s\", VAR_6) ;\n\t\tVAR_6 [0] = 0 ;\n\t\t} ;\n\n\tprintf (\"Input file : %s\\n\", VAR_4) ;\n\tputs (\"Output files :\") ;\n\n\tfor (VAR_7 = 0 ; VAR_7 < VAR_2.channels ; VAR_7++)\n\t{\tchar VAR_11 [520] ;\n\n\t\tsnprintf (VAR_11, sizeof (VAR_11), \"%s_%02d%s\", VAR_4, VAR_7, VAR_5) ;\n\n\t\tif ((VAR_2.outfile [VAR_7] = sf_open (VAR_11, VAR_12, &VAR_3)) == NULL)\n\t\t{\tprintf (\"Not able to open output file '%s'\\n%s\\n\", VAR_11, sf_strerror (NULL)) ;\n\t\t\texit (1) ;\n\t\t\t} ;\n\n\t\tprintf (\"    %s\\n\", VAR_11) ;\n\t\t} ;\n\n\tswitch (VAR_3.format & VAR_13)\n\t{\tcase VAR_14 :\n\t\tcase VAR_15 :\n\t\tcase VAR_16 :\n\t\t\tVAR_8 = 1 ;\n\t\t\tbreak ;\n\n\t\tdefault :\n\t\t\tVAR_8 = 0 ;\n\t\t\tbreak ;\n\t\t} ;\n\n\tif (VAR_8)\n\t\tdeinterleave_double (&VAR_2) ;\n\telse\n\t\tdeinterleave_int (&VAR_2) ;\n\n\tsf_close (VAR_2.infile) ;\n\tfor (VAR_7 = 0 ; VAR_7 < VAR_10 ; VAR_7++)\n\t\tif (VAR_2.outfile [VAR_7] != NULL)\n\t\t\tsf_close (VAR_2.outfile [VAR_7]) ;\n\n\treturn 0 ;\n}",
  "func_graph_path": "libsndfile/df18323c622b54221ee7ace74b177cdcccc152d7/sndfile-deinterleave.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -23,6 +23,13 @@\n \t{\tprintf (\"\\nError : Input file '%s' only has one channel.\\n\", argv [1]) ;\n \t\texit (1) ;\n \t\t} ;\n+\n+\tif (sfinfo.channels > MAX_CHANNELS)\n+\t{\tprintf (\"\\nError : Input file '%s' has too many (%d) channels. Limit is %d.\\n\",\n+\t\t\targv [1], sfinfo.channels, MAX_CHANNELS) ;\n+\t\texit (1) ;\n+\t\t} ;\n+\n \n \tstate.channels = sfinfo.channels ;\n \tsfinfo.channels = 1 ;",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "",
      "\tif (sfinfo.channels > MAX_CHANNELS)",
      "\t{\tprintf (\"\\nError : Input file '%s' has too many (%d) channels. Limit is %d.\\n\",",
      "\t\t\targv [1], sfinfo.channels, MAX_CHANNELS) ;",
      "\t\texit (1) ;",
      "\t\t} ;",
      ""
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/libsndfile/libsndfile/pull/408",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/libsndfile/libsndfile/pull/408: 403 Client Error: Forbidden for url: https://api.github.com/repos/libsndfile/libsndfile/pulls/408",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.9"
}