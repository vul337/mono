{
  "cve_id": "CVE-2016-9177",
  "cwe_ids": [
    "CWE-22"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:N/A:N",
  "cvss_is_v3": false,
  "repo_name": "perwendel/spark",
  "commit_msg": "Fix for #700 - Arbitrary File Read Vulnerability",
  "commit_hash": "26b57d0596ee73c14c558463943ef0857e53b91f",
  "git_url": "https://github.com/perwendel/spark/commit/26b57d0596ee73c14c558463943ef0857e53b91f",
  "file_path": "src/main/java/spark/resource/ExternalResourceHandler.java",
  "func_name": "getResource",
  "func_before": "@Override\n    protected AbstractFileResolvingResource getResource(String path) throws MalformedURLException {\n        if (path == null || !path.startsWith(\"/\")) {\n            throw new MalformedURLException(path);\n        }\n\n        try {\n            path = UriPath.canonical(path);\n\n            final String addedPath = addPaths(baseResource, path);\n\n            ExternalResource resource = new ExternalResource(addedPath);\n\n            if (resource.exists() && resource.isDirectory()) {\n                if (welcomeFile != null) {\n                    resource = new ExternalResource(addPaths(resource.getPath(), welcomeFile));\n                } else {\n                    //  No welcome file configured, serve nothing since it's a directory\n                    resource = null;\n                }\n            }\n\n            return (resource != null && resource.exists()) ? resource : null;\n        } catch (Exception e) {\n            if (LOG.isDebugEnabled()) {\n                LOG.debug(e.getClass().getSimpleName() + \" when trying to get resource. \" + e.getMessage());\n            }\n        }\n        return null;\n    }",
  "abstract_func_before": "@Override\n    protected AbstractFileResolvingResource getResource(String VAR_0) throws MalformedURLException {\n        if (VAR_0 == null || !VAR_0.startsWith(\"/\")) {\n            throw new MalformedURLException(VAR_0);\n        }\n\n        try {\n            VAR_0 = VAR_1.canonical(VAR_0);\n\n            final String VAR_2 = addPaths(VAR_3, VAR_0);\n\n            ExternalResource VAR_4 = new ExternalResource(VAR_2);\n\n            if (VAR_4.exists() && VAR_4.isDirectory()) {\n                if (VAR_5 != null) {\n                    VAR_4 = new ExternalResource(addPaths(VAR_4.getPath(), VAR_5));\n                } else {\n                    /* COMMENT_0 */\n                    VAR_4 = null;\n                }\n            }\n\n            return (VAR_4 != null && VAR_4.exists()) ? VAR_4 : null;\n        } catch (Exception VAR_6) {\n            if (VAR_7.isDebugEnabled()) {\n                VAR_7.debug(VAR_6.getClass().getSimpleName() + \" when trying to get resource. \" + VAR_6.getMessage());\n            }\n        }\n        return null;\n    }",
  "func_graph_path_before": "perwendel/spark/26b57d0596ee73c14c558463943ef0857e53b91f/ExternalResourceHandler.java/vul/before/0.json",
  "func": "@Override\n    protected AbstractFileResolvingResource getResource(String path) throws MalformedURLException {\n        if (path == null || !path.startsWith(\"/\")) {\n            throw new MalformedURLException(path);\n        }\n\n        try {\n            path = UriPath.canonical(path);\n\n            final String addedPath = addPaths(baseResource, path);\n\n            ExternalResource resource = new ExternalResource(addedPath);\n\n            DirectoryTraversal.protectAgainstForExternal(resource.getPath());\n\n            if (resource.exists() && resource.isDirectory()) {\n                if (welcomeFile != null) {\n                    resource = new ExternalResource(addPaths(resource.getPath(), welcomeFile));\n                } else {\n                    //  No welcome file configured, serve nothing since it's a directory\n                    resource = null;\n                }\n            }\n\n            return (resource != null && resource.exists()) ? resource : null;\n        } catch (DirectoryTraversal.DirectoryTraversalDetection directoryTraversalDetection) {\n            throw directoryTraversalDetection;\n        } catch (Exception e) {\n            if (LOG.isDebugEnabled()) {\n                LOG.debug(e.getClass().getSimpleName() + \" when trying to get resource. \" + e.getMessage());\n            }\n        }\n        return null;\n    }",
  "abstract_func": "@Override\n    protected AbstractFileResolvingResource getResource(String VAR_0) throws MalformedURLException {\n        if (VAR_0 == null || !VAR_0.startsWith(\"/\")) {\n            throw new MalformedURLException(VAR_0);\n        }\n\n        try {\n            VAR_0 = VAR_1.canonical(VAR_0);\n\n            final String VAR_2 = addPaths(VAR_3, VAR_0);\n\n            ExternalResource VAR_4 = new ExternalResource(VAR_2);\n\n            VAR_5.protectAgainstForExternal(VAR_4.getPath());\n\n            if (VAR_4.exists() && VAR_4.isDirectory()) {\n                if (VAR_6 != null) {\n                    VAR_4 = new ExternalResource(addPaths(VAR_4.getPath(), VAR_6));\n                } else {\n                    /* COMMENT_0 */\n                    VAR_4 = null;\n                }\n            }\n\n            return (VAR_4 != null && VAR_4.exists()) ? VAR_4 : null;\n        } catch (DirectoryTraversal.DirectoryTraversalDetection VAR_7) {\n            throw VAR_7;\n        } catch (Exception VAR_8) {\n            if (VAR_9.isDebugEnabled()) {\n                VAR_9.debug(VAR_8.getClass().getSimpleName() + \" when trying to get resource. \" + VAR_8.getMessage());\n            }\n        }\n        return null;\n    }",
  "func_graph_path": "perwendel/spark/26b57d0596ee73c14c558463943ef0857e53b91f/ExternalResourceHandler.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -11,6 +11,8 @@\n \n             ExternalResource resource = new ExternalResource(addedPath);\n \n+            DirectoryTraversal.protectAgainstForExternal(resource.getPath());\n+\n             if (resource.exists() && resource.isDirectory()) {\n                 if (welcomeFile != null) {\n                     resource = new ExternalResource(addPaths(resource.getPath(), welcomeFile));\n@@ -21,6 +23,8 @@\n             }\n \n             return (resource != null && resource.exists()) ? resource : null;\n+        } catch (DirectoryTraversal.DirectoryTraversalDetection directoryTraversalDetection) {\n+            throw directoryTraversalDetection;\n         } catch (Exception e) {\n             if (LOG.isDebugEnabled()) {\n                 LOG.debug(e.getClass().getSimpleName() + \" when trying to get resource. \" + e.getMessage());",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "            DirectoryTraversal.protectAgainstForExternal(resource.getPath());",
      "",
      "        } catch (DirectoryTraversal.DirectoryTraversalDetection directoryTraversalDetection) {",
      "            throw directoryTraversalDetection;"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/perwendel/spark/pull/701",
  "description": {
    "pr_info": {
      "title": "Fix for #700 - Arbitrary File Read Vulnerability",
      "number": 701
    },
    "comment": [
      "Fix for #700 \r\nThis is my take on the directory traversal problem.\r\nPlease review and try out.",
      "I've just verified it for Windows, didn't have time to test for linux etc.\nWhen travis CI built it didn't detect directory traversal for the test case for external resources. There's probably an issue with how path handling differs in unix-like OSs and windows.\n",
      "DISCLAIMER: Didn't really have time to look closely, so I could be talking out of my arse so to speak, but: wouldn't using `File.getCanonicalPath()` be safer than string manipulation? I'd certainly trust JDK library methods more than my own code, especially when it comes to security. Also, there are all kinds of clever ways (encodings, escapes and what not) of defeating checking strings for \"..\", \"/\", \"\\\" etc.\n",
      "@jakaarl Sorry, merged before I saw your comment. The guy making the post emailed and said it was a good solution. But I'll follow your advise and see if I can make it better. New PR will be created if you're right!\n"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 1.0"
}