{
  "cve_id": "CVE-2020-16269",
  "cwe_ids": [
    "CWE-Other"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "radareorg/radare2",
  "commit_msg": "Fix malformed DWARF crash due invalid .debug_str reference resulting in NULL str",
  "commit_hash": "0523c79d6e63858c990821a990edcb82cf8af284",
  "git_url": "https://github.com/radareorg/radare2/commit/0523c79d6e63858c990821a990edcb82cf8af284",
  "file_path": "libr/anal/type_dwarf.c",
  "func_name": "parse_typedef",
  "func_before": "static void parse_typedef(const RAnal *anal, const RBinDwarfDie *all_dies, \n\tconst ut64 count, ut64 idx) {\n\n\tr_return_if_fail (all_dies);\n\tconst RBinDwarfDie *die = &all_dies[idx];\n\n\tchar *name = NULL;\n\tchar *type = NULL;\n\tut64 size = 0;\n\tRStrBuf strbuf;\n\tr_strbuf_init (&strbuf);\n\tsize_t i;\n\n\tfor (i = 0; i < die->count; i++) {\n\t\tRBinDwarfAttrValue *value = &die->attr_values[i];\n\t\tswitch (die->attr_values[i].attr_name) {\n\t\tcase DW_AT_name:\n\t\t\tname = strdup (value->string.content);\n\t\t\tif (!name) {\n\t\t\t\tgoto cleanup;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase DW_AT_type:\n\t\t\tparse_type (all_dies, count, value->reference, &strbuf, &size);\n\t\t\ttype = r_strbuf_drain_nofree (&strbuf);\n\t\t\tif (!type) {\n\t\t\t\tgoto cleanup;\n\t\t\t}\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (!name) { // type has to have a name for now\n\t\tgoto cleanup;\n\t}\n\tRAnalBaseType *base_type = r_anal_new_base_type (R_ANAL_BASE_TYPE_KIND_TYPEDEF);\n\tif (!base_type) {\n\t\tgoto cleanup;\n\t}\n\tbase_type->name = name;\n\tbase_type->type = type;\n\tr_anal_save_base_type (anal, base_type);\n\tr_anal_free_base_type (base_type);\n\tr_strbuf_fini (&strbuf);\n\treturn;\ncleanup:\n\tfree (name);\n\tfree (type);\n\tr_strbuf_fini (&strbuf);\n}",
  "abstract_func_before": "static void parse_typedef(const RAnal *VAR_0, const RBinDwarfDie *VAR_1, \n\tconst ut64 VAR_2, ut64 VAR_3) {\n\n\tr_return_if_fail (VAR_1);\n\tconst RBinDwarfDie *VAR_4 = &VAR_1[VAR_3];\n\n\tchar *VAR_5 = NULL;\n\tchar *VAR_6 = NULL;\n\tut64 VAR_7 = 0;\n\tRStrBuf VAR_8;\n\tr_strbuf_init (&VAR_8);\n\tsize_t VAR_9;\n\n\tfor (VAR_9 = 0; VAR_9 < VAR_4->count; VAR_9++) {\n\t\tRBinDwarfAttrValue *VAR_10 = &VAR_4->attr_values[VAR_9];\n\t\tswitch (VAR_4->attr_values[VAR_9].attr_name) {\n\t\tcase VAR_11:\n\t\t\tVAR_5 = strdup (VAR_10->string.content);\n\t\t\tif (!VAR_5) {\n\t\t\t\tgoto cleanup;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase VAR_12:\n\t\t\tparse_type (VAR_1, VAR_2, VAR_10->reference, &VAR_8, &VAR_7);\n\t\t\tVAR_6 = r_strbuf_drain_nofree (&VAR_8);\n\t\t\tif (!VAR_6) {\n\t\t\t\tgoto cleanup;\n\t\t\t}\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (!VAR_5) { /* COMMENT_0 */\n\t\tgoto cleanup;\n\t}\n\tRAnalBaseType *VAR_13 = r_anal_new_base_type (VAR_14);\n\tif (!VAR_13) {\n\t\tgoto cleanup;\n\t}\n\tVAR_13->name = VAR_5;\n\tVAR_13->type = VAR_6;\n\tr_anal_save_base_type (VAR_0, VAR_13);\n\tr_anal_free_base_type (VAR_13);\n\tr_strbuf_fini (&VAR_8);\n\treturn;\ncleanup:\n\tfree (VAR_5);\n\tfree (VAR_6);\n\tr_strbuf_fini (&VAR_8);\n}",
  "func_graph_path_before": "radareorg/radare2/0523c79d6e63858c990821a990edcb82cf8af284/type_dwarf.c/vul/before/3.json",
  "func": "static void parse_typedef(const RAnal *anal, const RBinDwarfDie *all_dies, \n\tconst ut64 count, ut64 idx) {\n\n\tr_return_if_fail (all_dies);\n\tconst RBinDwarfDie *die = &all_dies[idx];\n\n\tchar *name = NULL;\n\tchar *type = NULL;\n\tut64 size = 0;\n\tRStrBuf strbuf;\n\tr_strbuf_init (&strbuf);\n\tsize_t i;\n\n\tfor (i = 0; i < die->count; i++) {\n\t\tRBinDwarfAttrValue *value = &die->attr_values[i];\n\t\tswitch (die->attr_values[i].attr_name) {\n\t\tcase DW_AT_name:\n\t\t\tif (!value->string.content) {\n\t\t\t\tname = create_type_name_from_offset (die->offset);\n\t\t\t} else {\n\t\t\t\tname = strdup (value->string.content);\n\t\t\t}\n\t\t\tif (!name) {\n\t\t\t\tgoto cleanup;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase DW_AT_type:\n\t\t\tparse_type (all_dies, count, value->reference, &strbuf, &size);\n\t\t\ttype = r_strbuf_drain_nofree (&strbuf);\n\t\t\tif (!type) {\n\t\t\t\tgoto cleanup;\n\t\t\t}\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (!name) { // type has to have a name for now\n\t\tgoto cleanup;\n\t}\n\tRAnalBaseType *base_type = r_anal_new_base_type (R_ANAL_BASE_TYPE_KIND_TYPEDEF);\n\tif (!base_type) {\n\t\tgoto cleanup;\n\t}\n\tbase_type->name = name;\n\tbase_type->type = type;\n\tr_anal_save_base_type (anal, base_type);\n\tr_anal_free_base_type (base_type);\n\tr_strbuf_fini (&strbuf);\n\treturn;\ncleanup:\n\tfree (name);\n\tfree (type);\n\tr_strbuf_fini (&strbuf);\n}",
  "abstract_func": "static void parse_typedef(const RAnal *VAR_0, const RBinDwarfDie *VAR_1, \n\tconst ut64 VAR_2, ut64 VAR_3) {\n\n\tr_return_if_fail (VAR_1);\n\tconst RBinDwarfDie *VAR_4 = &VAR_1[VAR_3];\n\n\tchar *VAR_5 = NULL;\n\tchar *VAR_6 = NULL;\n\tut64 VAR_7 = 0;\n\tRStrBuf VAR_8;\n\tr_strbuf_init (&VAR_8);\n\tsize_t VAR_9;\n\n\tfor (VAR_9 = 0; VAR_9 < VAR_4->count; VAR_9++) {\n\t\tRBinDwarfAttrValue *VAR_10 = &VAR_4->attr_values[VAR_9];\n\t\tswitch (VAR_4->attr_values[VAR_9].attr_name) {\n\t\tcase VAR_11:\n\t\t\tif (!VAR_10->string.content) {\n\t\t\t\tVAR_5 = create_type_name_from_offset (VAR_4->offset);\n\t\t\t} else {\n\t\t\t\tVAR_5 = strdup (VAR_10->string.content);\n\t\t\t}\n\t\t\tif (!VAR_5) {\n\t\t\t\tgoto cleanup;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase VAR_12:\n\t\t\tparse_type (VAR_1, VAR_2, VAR_10->reference, &VAR_8, &VAR_7);\n\t\t\tVAR_6 = r_strbuf_drain_nofree (&VAR_8);\n\t\t\tif (!VAR_6) {\n\t\t\t\tgoto cleanup;\n\t\t\t}\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (!VAR_5) { /* COMMENT_0 */\n\t\tgoto cleanup;\n\t}\n\tRAnalBaseType *VAR_13 = r_anal_new_base_type (VAR_14);\n\tif (!VAR_13) {\n\t\tgoto cleanup;\n\t}\n\tVAR_13->name = VAR_5;\n\tVAR_13->type = VAR_6;\n\tr_anal_save_base_type (VAR_0, VAR_13);\n\tr_anal_free_base_type (VAR_13);\n\tr_strbuf_fini (&VAR_8);\n\treturn;\ncleanup:\n\tfree (VAR_5);\n\tfree (VAR_6);\n\tr_strbuf_fini (&VAR_8);\n}",
  "func_graph_path": "radareorg/radare2/0523c79d6e63858c990821a990edcb82cf8af284/type_dwarf.c/vul/after/3.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -15,7 +15,11 @@\n \t\tRBinDwarfAttrValue *value = &die->attr_values[i];\n \t\tswitch (die->attr_values[i].attr_name) {\n \t\tcase DW_AT_name:\n-\t\t\tname = strdup (value->string.content);\n+\t\t\tif (!value->string.content) {\n+\t\t\t\tname = create_type_name_from_offset (die->offset);\n+\t\t\t} else {\n+\t\t\t\tname = strdup (value->string.content);\n+\t\t\t}\n \t\t\tif (!name) {\n \t\t\t\tgoto cleanup;\n \t\t\t}",
  "diff_line_info": {
    "deleted_lines": [
      "\t\t\tname = strdup (value->string.content);"
    ],
    "added_lines": [
      "\t\t\tif (!value->string.content) {",
      "\t\t\t\tname = create_type_name_from_offset (die->offset);",
      "\t\t\t} else {",
      "\t\t\t\tname = strdup (value->string.content);",
      "\t\t\t}"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/radareorg/radare2/pull/17399",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/radareorg/radare2/pull/17399: 403 Client Error: Forbidden for url: https://api.github.com/repos/radareorg/radare2/pulls/17399",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.6,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.6\n\nThe patch addresses a crash caused by an invalid .debug_str reference, which could be exploitable. While not explicitly stated, the fix prevents a potential security issue.\n\n**Step-by-Step Explanation:**\n\n1. **Commit Message Analysis:** Mentions a crash due to invalid references, suggesting a potential security issue.\n2. **Vulnerability Description:** Indicates handling of an invalid string, preventing a crash.\n3. **Code Changes:** Adds a NULL check to prevent crashes.\n4. **Security Consideration:** Crash can be a security issue if exploitable, despite no CVE mention.\n5. **Classification:** Leans towards security fix due to crash prevention but with some ambiguity.\n\n**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.6"
}