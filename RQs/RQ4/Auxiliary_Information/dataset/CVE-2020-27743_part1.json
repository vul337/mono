{
  "cve_id": "CVE-2020-27743",
  "cwe_ids": [
    "CWE-330"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "kravietz/pam_tacplus",
  "commit_msg": "magic.c: check for failure of RAND_[pseudo_]bytes\n\nWhen magic() is implemented via libcrypto's RAND_bytes or\nRAND_pseudo_bytes we should check for a failure and abort to\nensure we don't use a predictable session_id.\n\nThis prevents (further) weakening* of the TACACS+ protocol\n\"encryption\" since session_id is an input to the algorithm.\n\n*by modern standards TACACS+ is deemed \"obfuscated\" - RFC 8907.",
  "commit_hash": "c9bed7496e81e550ee22746f23bbb11be2e046ed",
  "git_url": "https://github.com/kravietz/pam_tacplus/commit/c9bed7496e81e550ee22746f23bbb11be2e046ed",
  "file_path": "pam_tacplus.c",
  "func_name": "pam_sm_open_session",
  "func_before": "PAM_EXTERN\nint pam_sm_open_session(pam_handle_t *pamh, int UNUSED(flags), int argc,\n                        const char **argv) {\n#if defined(HAVE_OPENSSL_RAND_H) && defined(HAVE_LIBCRYPTO)\n# if defined(HAVE_RAND_BYTES)\n\tRAND_bytes((unsigned char *) &task_id, sizeof(task_id));\n# else\n\tRAND_pseudo_bytes((unsigned char *) &task_id, sizeof(task_id));\n# endif\n#else\n\ttask_id=(short int) magic();\n#endif\n\n\treturn _pam_account(pamh, argc, argv, TAC_PLUS_ACCT_FLAG_START, NULL);\n}",
  "abstract_func_before": "PAM_EXTERN\nVAR_0 pam_sm_open_session(pam_handle_t *VAR_1, int UNUSED(flags), int VAR_2,\n                        const char **VAR_3) {\n#if defined(VAR_4) && defined(VAR_5)\n# if defined(VAR_6)\n\tRAND_bytes((unsigned char *) &VAR_7, sizeof(VAR_7));\n# else\n\tRAND_pseudo_bytes((unsigned char *) &VAR_7, sizeof(VAR_7));\n# endif\n#else\n\tVAR_7=(short int) magic();\n#endif\n\n\treturn _pam_account(VAR_1, VAR_2, VAR_3, VAR_8, NULL);\n}",
  "func_graph_path_before": null,
  "func": "PAM_EXTERN\nint pam_sm_open_session(pam_handle_t *pamh, int UNUSED(flags), int argc,\n                        const char **argv) {\n\n/* Task ID has no need to be cryptographically strong so we don't\n * check for failures of the RAND functions. If they fail then we are\n * as well sending the accounting request regardless of whether any value\n * was written to task_id.\n */\n#if defined(HAVE_OPENSSL_RAND_H) && defined(HAVE_LIBCRYPTO)\n# if defined(HAVE_RAND_BYTES)\n\tRAND_bytes((unsigned char *) &task_id, sizeof(task_id));\n# else\n\tRAND_pseudo_bytes((unsigned char *) &task_id, sizeof(task_id));\n# endif\n#else\n\ttask_id=(short int) magic();\n#endif\n\n\treturn _pam_account(pamh, argc, argv, TAC_PLUS_ACCT_FLAG_START, NULL);\n}",
  "abstract_func": "PAM_EXTERN\nVAR_0 pam_sm_open_session(pam_handle_t *VAR_1, int UNUSED(flags), int VAR_2,\n                        const char **VAR_3) {\n\n/* COMMENT_0 */\n                                                                     \n                                                                         \n                          \n   \n#if defined(VAR_4) && defined(VAR_5)\n# if defined(VAR_6)\n\tRAND_bytes((unsigned char *) &VAR_7, sizeof(VAR_7));\n# else\n\tRAND_pseudo_bytes((unsigned char *) &VAR_7, sizeof(VAR_7));\n# endif\n#else\n\tVAR_7=(short int) magic();\n#endif\n\n\treturn _pam_account(VAR_1, VAR_2, VAR_3, VAR_8, NULL);\n}",
  "func_graph_path": null,
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,6 +1,12 @@\n PAM_EXTERN\n int pam_sm_open_session(pam_handle_t *pamh, int UNUSED(flags), int argc,\n                         const char **argv) {\n+\n+/* Task ID has no need to be cryptographically strong so we don't\n+ * check for failures of the RAND functions. If they fail then we are\n+ * as well sending the accounting request regardless of whether any value\n+ * was written to task_id.\n+ */\n #if defined(HAVE_OPENSSL_RAND_H) && defined(HAVE_LIBCRYPTO)\n # if defined(HAVE_RAND_BYTES)\n \tRAND_bytes((unsigned char *) &task_id, sizeof(task_id));",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "",
      "/* Task ID has no need to be cryptographically strong so we don't",
      " * check for failures of the RAND functions. If they fail then we are",
      " * as well sending the accounting request regardless of whether any value",
      " * was written to task_id.",
      " */"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/kravietz/pam_tacplus/pull/163",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/kravietz/pam_tacplus/pull/163: 403 Client Error: Forbidden for url: https://api.github.com/repos/kravietz/pam_tacplus/pulls/163",
  "Bug Filter": "Supporting & Non-Core Improvements",
  "Bug Filter Confidence": 0.6,
  "Bug Filter Response": "**Final Classification:** Supporting & Non-Core Improvements  \n**Confidence:** 0.6"
}