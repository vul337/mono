{
  "cve_id": "CVE-2017-11732",
  "cwe_ids": [
    "CWE-119"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "libming",
  "commit_msg": "Fix buffer overflow in dcputs (buffer missing \\0)\n\nThe dcputs function appends passed string at the end of the global\nstring buffer (dcstr), adapting the buffer's size if necessary.\n\nUnfortunately, the strsize variable which holds the global buffer's\nsize is initialized to 0 in dcinit(), which means that no place for\nthe \\0 character is reserved. Hence, whenever dcputs tries to strcat\na string to the global buffer, a byte may be missing leading to a\nheap buffer overflow.\n\nThis commit addresses this issue (CVE-2017-11732, closes #80).",
  "commit_hash": "726c2768805c8c95e8ad8e5f09eddc5b16570365",
  "git_url": "https://github.com/libming/libming/commit/726c2768805c8c95e8ad8e5f09eddc5b16570365",
  "file_path": "util/decompile.c",
  "func_name": "dcinit",
  "func_before": "void\ndcinit()\n{\n\tstrsize=0;\n\tstrmaxsize=DCSTRSIZE;\n\tdcstr=calloc(DCSTRSIZE,1);\n\tdcptr=dcstr;\n}",
  "abstract_func_before": "void\ndcinit()\n{\n\tVAR_0=0;\n\tVAR_1=VAR_2;\n\tVAR_3=calloc(VAR_2,1);\n\tVAR_4=VAR_3;\n}",
  "func_graph_path_before": "libming/726c2768805c8c95e8ad8e5f09eddc5b16570365/decompile.c/vul/before/0.json",
  "func": "void\ndcinit()\n{\n\tstrsize = 1; // We start with empty string, i.e. \\0\n\tstrmaxsize=DCSTRSIZE;\n\tdcstr=calloc(DCSTRSIZE,1);\n\tdcptr=dcstr;\n}",
  "abstract_func": "void\ndcinit()\n{\n\tVAR_0 = 1; /* COMMENT_0 */\n\tVAR_1=VAR_2;\n\tVAR_3=calloc(VAR_2,1);\n\tVAR_4=VAR_3;\n}",
  "func_graph_path": "libming/726c2768805c8c95e8ad8e5f09eddc5b16570365/decompile.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,7 +1,7 @@\n void\n dcinit()\n {\n-\tstrsize=0;\n+\tstrsize = 1; // We start with empty string, i.e. \\0\n \tstrmaxsize=DCSTRSIZE;\n \tdcstr=calloc(DCSTRSIZE,1);\n \tdcptr=dcstr;",
  "diff_line_info": {
    "deleted_lines": [
      "\tstrsize=0;"
    ],
    "added_lines": [
      "\tstrsize = 1; // We start with empty string, i.e. \\0"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/libming/libming/pull/96",
  "description": {
    "pr_info": {
      "title": "Fix buffer overflow in dcputs (buffer missing \\0)",
      "number": 96
    },
    "comment": [
      "The dcputs function appends passed string at the end of the global string buffer (dcstr), adapting the buffer's size if necessary.\r\n\r\nUnfortunately, the strsize variable which holds the global buffer's size is initialized to 0 in dcinit(), which means that no place for the \\0 character is reserved. Hence, whenever dcputs tries to strcat a string to the global buffer, a byte may be missing leading to a heap buffer overflow.\r\n\r\nThis PR addresses this issue (CVE-2017-11732, closes #80)."
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 1.0"
}