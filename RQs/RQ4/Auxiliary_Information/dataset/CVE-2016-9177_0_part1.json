{
  "cve_id": "CVE-2016-9177",
  "cwe_ids": [
    "CWE-22"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:N/A:N",
  "cvss_is_v3": false,
  "repo_name": "perwendel/spark",
  "commit_msg": "Fix for #700 - Arbitrary File Read Vulnerability",
  "commit_hash": "26b57d0596ee73c14c558463943ef0857e53b91f",
  "git_url": "https://github.com/perwendel/spark/commit/26b57d0596ee73c14c558463943ef0857e53b91f",
  "file_path": "src/main/java/spark/staticfiles/StaticFilesConfiguration.java",
  "func_name": "configure",
  "func_before": "public synchronized void configure(String folder) {\n        Assert.notNull(folder, \"'folder' must not be null\");\n\n        if (!staticResourcesSet) {\n            try {\n                ClassPathResource resource = new ClassPathResource(folder);\n\n                if (configureJarCase(folder, resource)) {\n                    return;\n                }\n\n                if (!resource.getFile().isDirectory()) {\n                    LOG.error(\"Static resource location must be a folder\");\n                    return;\n                }\n\n                if (staticResourceHandlers == null) {\n                    staticResourceHandlers = new ArrayList<>();\n                }\n\n                staticResourceHandlers.add(new ClassPathResourceHandler(folder, \"index.html\"));\n                LOG.info(\"StaticResourceHandler configured with folder = \" + folder);\n            } catch (IOException e) {\n                LOG.error(\"Error when creating StaticResourceHandler\", e);\n            }\n            staticResourcesSet = true;\n        }\n\n    }",
  "abstract_func_before": "public synchronized void configure(String VAR_0) {\n        VAR_1.notNull(VAR_0, \"'folder' must not be null\");\n\n        if (!VAR_2) {\n            try {\n                ClassPathResource VAR_3 = new ClassPathResource(VAR_0);\n\n                if (configureJarCase(VAR_0, VAR_3)) {\n                    return;\n                }\n\n                if (!VAR_3.getFile().isDirectory()) {\n                    VAR_4.error(\"Static resource location must be a folder\");\n                    return;\n                }\n\n                if (VAR_5 == null) {\n                    VAR_5 = new ArrayList<>();\n                }\n\n                VAR_5.add(new ClassPathResourceHandler(VAR_0, \"index.html\"));\n                VAR_4.info(\"StaticResourceHandler configured with folder = \" + VAR_0);\n            } catch (IOException VAR_6) {\n                VAR_4.error(\"Error when creating StaticResourceHandler\", VAR_6);\n            }\n            VAR_2 = true;\n        }\n\n    }",
  "func_graph_path_before": "perwendel/spark/26b57d0596ee73c14c558463943ef0857e53b91f/StaticFilesConfiguration.java/vul/before/0.json",
  "func": "public synchronized void configure(String folder) {\n        Assert.notNull(folder, \"'folder' must not be null\");\n\n        if (!staticResourcesSet) {\n            try {\n                ClassPathResource resource = new ClassPathResource(folder);\n\n                if (configureJarCase(folder, resource)) {\n                    return;\n                }\n\n                if (!resource.getFile().isDirectory()) {\n                    LOG.error(\"Static resource location must be a folder\");\n                    return;\n                }\n\n                if (staticResourceHandlers == null) {\n                    staticResourceHandlers = new ArrayList<>();\n                }\n\n                staticResourceHandlers.add(new ClassPathResourceHandler(folder, \"index.html\"));\n                LOG.info(\"StaticResourceHandler configured with folder = \" + folder);\n            } catch (IOException e) {\n                LOG.error(\"Error when creating StaticResourceHandler\", e);\n            }\n\n            StaticFilesFolder.localConfiguredTo(folder);\n            staticResourcesSet = true;\n        }\n\n    }",
  "abstract_func": "public synchronized void configure(String VAR_0) {\n        VAR_1.notNull(VAR_0, \"'folder' must not be null\");\n\n        if (!VAR_2) {\n            try {\n                ClassPathResource VAR_3 = new ClassPathResource(VAR_0);\n\n                if (configureJarCase(VAR_0, VAR_3)) {\n                    return;\n                }\n\n                if (!VAR_3.getFile().isDirectory()) {\n                    VAR_4.error(\"Static resource location must be a folder\");\n                    return;\n                }\n\n                if (VAR_5 == null) {\n                    VAR_5 = new ArrayList<>();\n                }\n\n                VAR_5.add(new ClassPathResourceHandler(VAR_0, \"index.html\"));\n                VAR_4.info(\"StaticResourceHandler configured with folder = \" + VAR_0);\n            } catch (IOException VAR_6) {\n                VAR_4.error(\"Error when creating StaticResourceHandler\", VAR_6);\n            }\n\n            VAR_7.localConfiguredTo(VAR_0);\n            VAR_2 = true;\n        }\n\n    }",
  "func_graph_path": "perwendel/spark/26b57d0596ee73c14c558463943ef0857e53b91f/StaticFilesConfiguration.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -23,6 +23,8 @@\n             } catch (IOException e) {\n                 LOG.error(\"Error when creating StaticResourceHandler\", e);\n             }\n+\n+            StaticFilesFolder.localConfiguredTo(folder);\n             staticResourcesSet = true;\n         }\n ",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "",
      "            StaticFilesFolder.localConfiguredTo(folder);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/perwendel/spark/pull/701",
  "description": {
    "pr_info": {
      "title": "Fix for #700 - Arbitrary File Read Vulnerability",
      "number": 701
    },
    "comment": [
      "Fix for #700 \r\nThis is my take on the directory traversal problem.\r\nPlease review and try out.",
      "I've just verified it for Windows, didn't have time to test for linux etc.\nWhen travis CI built it didn't detect directory traversal for the test case for external resources. There's probably an issue with how path handling differs in unix-like OSs and windows.\n",
      "DISCLAIMER: Didn't really have time to look closely, so I could be talking out of my arse so to speak, but: wouldn't using `File.getCanonicalPath()` be safer than string manipulation? I'd certainly trust JDK library methods more than my own code, especially when it comes to security. Also, there are all kinds of clever ways (encodings, escapes and what not) of defeating checking strings for \"..\", \"/\", \"\\\" etc.\n",
      "@jakaarl Sorry, merged before I saw your comment. The guy making the post emailed and said it was a good solution. But I'll follow your advise and see if I can make it better. New PR will be created if you're right!\n"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 0.9\n\nThe commit message clearly states a security issue, the code change addresses file access restrictions, and there's alignment between description and implementation."
}