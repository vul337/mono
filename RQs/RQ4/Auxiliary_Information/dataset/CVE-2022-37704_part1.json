{
  "cve_id": "CVE-2022-37704",
  "cwe_ids": [
    "CWE-77"
  ],
  "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H",
  "cvss_is_v3": true,
  "repo_name": "zmanda/amanda",
  "commit_msg": "fix : fix increment logic for good_option\n\n- for arguements of type --file=x or --file x, fixed logic while incrementing value.",
  "commit_hash": "43c5b32f46186f3ed78fe6c7503096fa9ad1236c",
  "git_url": "https://github.com/zmanda/amanda/commit/43c5b32f46186f3ed78fe6c7503096fa9ad1236c",
  "file_path": "client-src/runtar.c",
  "func_name": "main",
  "func_before": "int\nmain(\n    int\t\targc,\n    char **\targv)\n{\n#ifdef GNUTAR\n    int i;\n    char *e;\n    char *dbf;\n    char *cmdline;\n    GPtrArray *array = g_ptr_array_new();\n    gchar **strings;\n    char **new_argv;\n    char **env;\n    char *my_realpath = NULL;\n#endif\n    int good_option;\n\n    glib_init();\n\n    if (argc > 1 && argv[1] && g_str_equal(argv[1], \"--version\")) {\n\tprintf(\"runtar-%s\\n\", VERSION);\n\treturn (0);\n    }\n\n    /*\n     * Configure program for internationalization:\n     *   1) Only set the message locale for now.\n     *   2) Set textdomain for all amanda related programs to \"amanda\"\n     *      We don't want to be forced to support dozens of message catalogs.\n     */\n    setlocale(LC_MESSAGES, \"C\");\n    textdomain(\"amanda\"); \n\n    safe_fd(-1, 0);\n    safe_cd();\n\n    set_pname(\"runtar\");\n\n    /* Don't die when child closes pipe */\n    signal(SIGPIPE, SIG_IGN);\n\n    dbopen(DBG_SUBDIR_CLIENT);\n    config_init(CONFIG_INIT_CLIENT|CONFIG_INIT_GLOBAL, NULL);\n\n    if (argc < 3) {\n\terror(_(\"Need at least 3 arguments\\n\"));\n\t/*NOTREACHED*/\n    }\n\n    dbprintf(_(\"version %s\\n\"), VERSION);\n\n    if (!g_str_equal(argv[3], \"--create\")) {\n\terror(_(\"Can only be used to create tar archives\\n\"));\n\t/*NOTREACHED*/\n    }\n\n#ifndef GNUTAR\n\n    g_fprintf(stderr,_(\"gnutar not available on this system.\\n\"));\n    dbprintf(_(\"%s: gnutar not available on this system.\\n\"), argv[0]);\n    dbclose();\n    return 1;\n\n#else\n\n    /*\n     * Print out version information for tar.\n     */\n    do {\n\tFILE *\tversion_file;\n\tchar\tversion_buf[80];\n\n\tif ((version_file = popen(GNUTAR \" --version 2>&1\", \"r\")) != NULL) {\n\t    if (fgets(version_buf, (int)sizeof(version_buf), version_file) != NULL) {\n\t\tdbprintf(_(GNUTAR \" version: %s\\n\"), version_buf);\n\t    } else {\n\t\tif (ferror(version_file)) {\n\t\t    dbprintf(_(GNUTAR \" version: Read failure: %s\\n\"), strerror(errno));\n\t\t} else {\n\t\t    dbprintf(_(GNUTAR \" version: Read failure; EOF\\n\"));\n\t\t}\n\t    }\n\t} else {\n\t    dbprintf(_(GNUTAR \" version: unavailable: %s\\n\"), strerror(errno));\n\t}\n    } while(0);\n\n#ifdef WANT_SETUID_CLIENT\n    check_running_as(RUNNING_AS_CLIENT_LOGIN | RUNNING_AS_UID_ONLY);\n    if (!become_root()) {\n\terror(_(\"error [%s could not become root (is the setuid bit set?)]\\n\"), get_pname());\n\t/*NOTREACHED*/\n    }\n#else\n    check_running_as(RUNNING_AS_CLIENT_LOGIN);\n#endif\n\n    /* skip argv[0] */\n    argc--;\n    argv++;\n\n    dbprintf(_(\"config: %s\\n\"), argv[0]);\n    if (!g_str_equal(argv[0], \"NOCONFIG\"))\n\tdbrename(argv[0], DBG_SUBDIR_CLIENT);\n    argc--;\n    argv++;\n\n    new_argv = g_new0(char *, argc+1);\n\n    if (!check_exec_for_suid(\"GNUTAR_PATH\", GNUTAR, stderr, &my_realpath)) {\n\tdbclose();\n\texit(1);\n    }\n    new_argv[0] = g_strdup_printf(\"%s\", argv[0]);\n    g_ptr_array_add(array, g_strdup(my_realpath));\n    good_option = 0;\n    for (i = 1; argv[i]; i++) {\n\tif (good_option <= 0) {\n\t    if (g_str_has_prefix(argv[i],\"--rsh-command\") ||\n\t\tg_str_has_prefix(argv[i],\"--to-command\") ||\n\t\tg_str_has_prefix(argv[i],\"--info-script\") ||\n\t\tg_str_has_prefix(argv[i],\"--new-volume-script\") ||\n\t\tg_str_has_prefix(argv[i],\"--rmt-command\") ||\n\t\tg_str_has_prefix(argv[i],\"--use-compress-program\")) {\n\t\t/* Filter potential malicious option */\n\t\tgood_option = 0;\n\t    } else if (g_str_has_prefix(argv[i],\"--create\") ||\n\t\tg_str_has_prefix(argv[i],\"--totals\") ||\n\t\tg_str_has_prefix(argv[i],\"--dereference\") ||\n\t\tg_str_has_prefix(argv[i],\"--no-recursion\") ||\n\t\tg_str_has_prefix(argv[i],\"--one-file-system\") ||\n\t\tg_str_has_prefix(argv[i],\"--incremental\") ||\n\t\tg_str_has_prefix(argv[i],\"--atime-preserve\") ||\n\t\tg_str_has_prefix(argv[i],\"--sparse\") ||\n\t\tg_str_has_prefix(argv[i],\"--ignore-failed-read\") ||\n\t\tg_str_has_prefix(argv[i],\"--numeric-owner\") ||\n\t\tg_str_has_prefix(argv[i],\"--verbose\")) {\n\t\t/* Accept theses options */\n\t\tgood_option++;\n\t    } else if (g_str_has_prefix(argv[i],\"--blocking-factor\") ||\n\t\tg_str_has_prefix(argv[i],\"--file\") ||\n\t\tg_str_has_prefix(argv[i],\"--directory\") ||\n\t\tg_str_has_prefix(argv[i],\"--exclude\") ||\n\t\tg_str_has_prefix(argv[i],\"--transform\") ||\n\t\tg_str_has_prefix(argv[i],\"--listed-incremental\") ||\n\t\tg_str_has_prefix(argv[i],\"--newer\") ||\n\t\tg_str_has_prefix(argv[i],\"--exclude-from\") ||\n\t\tg_str_has_prefix(argv[i],\"--files-from\")) {\n\t\t/* Accept theses options with the following argument */\n\t\tgood_option += 2;\n\t    } else if (argv[i][0] != '-') {\n\t\tgood_option++;\n\t    }\n\t}\n\tif (good_option <= 0) {\n\t    error(\"error [%s invalid option: %s]\", get_pname(), argv[i]);\n\t}\n        g_ptr_array_add(array, quote_string(argv[i]));\n\tnew_argv[i] = g_strdup_printf(\"%s\", argv[i]);\n\tgood_option--;\n    }\n\n    g_ptr_array_add(array, NULL);\n    strings = (gchar **)g_ptr_array_free(array, FALSE);\n\n    cmdline = g_strjoinv(\" \", strings);\n    g_strfreev(strings);\n\n    dbprintf(_(\"running: %s\\n\"), cmdline);\n    amfree(cmdline);\n\n    dbf = dbfn();\n    if (dbf) {\n\tdbf = g_strdup(dbf);\n    }\n    dbclose();\n\n    env = safe_env();\n    execve(my_realpath, new_argv, env);\n    free_env(env);\n    free_env(new_argv);\n\n    e = strerror(errno);\n    dbreopen(dbf, \"more\");\n    amfree(dbf);\n    dbprintf(_(\"execve of %s failed (%s)\\n\"), my_realpath, e);\n    dbclose();\n\n    g_fprintf(stderr, _(\"runtar: could not exec %s: %s\\n\"), my_realpath, e);\n    g_free(my_realpath);\n    return 1;\n#endif\n}",
  "abstract_func_before": "int\nmain(\n    int\t\tVAR_0,\n    char **\tVAR_1)\n{\n#ifdef VAR_2\n    int VAR_3;\n    char *VAR_4;\n    char *VAR_5;\n    char *VAR_6;\n    GPtrArray *VAR_7 = g_ptr_array_new();\n    gchar **VAR_8;\n    char **VAR_9;\n    char **VAR_10;\n    char *VAR_11 = NULL;\n#endif\n    int VAR_12;\n\n    glib_init();\n\n    if (VAR_0 > 1 && VAR_1[1] && g_str_equal(VAR_1[1], \"--version\")) {\n\tprintf(\"runtar-%s\\n\", VAR_13);\n\treturn (0);\n    }\n\n    /* COMMENT_0 */\n                                                  \n                                                \n                                                                      \n                                                                             \n       \n    setlocale(VAR_14, \"C\");\n    textdomain(\"amanda\"); \n\n    safe_fd(-1, 0);\n    safe_cd();\n\n    set_pname(\"runtar\");\n\n    /* COMMENT_6 */\n    signal(VAR_15, VAR_16);\n\n    dbopen(VAR_17);\n    config_init(VAR_18|VAR_19, NULL);\n\n    if (VAR_0 < 3) {\n\terror(_(\"Need at least 3 arguments\\n\"));\n\t/* COMMENT_7 */\n    }\n\n    dbprintf(_(\"version %s\\n\"), VAR_13);\n\n    if (!g_str_equal(VAR_1[3], \"--create\")) {\n\terror(_(\"Can only be used to create tar archives\\n\"));\n\t/* COMMENT_7 */\n    }\n\n#ifndef VAR_2\n\n    g_fprintf(VAR_20,_(\"gnutar not available on this system.\\n\"));\n    dbprintf(_(\"%s: gnutar not available on this system.\\n\"), VAR_1[0]);\n    dbclose();\n    return 1;\n\n#else\n\n    /* COMMENT_8 */\n                                             \n       \n    do {\n\tFILE *\tVAR_21;\n\tchar\tVAR_22[80];\n\n\tif ((VAR_21 = popen(VAR_2 \" --version 2>&1\", \"r\")) != NULL) {\n\t    if (fgets(VAR_22, (int)sizeof(VAR_22), VAR_21) != NULL) {\n\t\tVAR_23(VAR_24(VAR_2 \" version: %s\\n\"), VAR_22);\n\t    } else {\n\t\tif (ferror(VAR_21)) {\n\t\t    VAR_23(VAR_24(VAR_2 \" version: Read failure: %s\\n\"), strerror(VAR_25));\n\t\t} else {\n\t\t    VAR_23(VAR_24(VAR_2 \" version: Read failure; EOF\\n\"));\n\t\t}\n\t    }\n\t} else {\n\t    VAR_23(VAR_24(VAR_2 \" version: unavailable: %s\\n\"), strerror(VAR_25));\n\t}\n    } while(0);\n\n#ifdef VAR_26\n    check_running_as(VAR_27 | VAR_28);\n    if (!become_root()) {\n\terror(VAR_24(\"error [%s could not become root (is the setuid bit set?)]\\n\"), get_pname());\n\t/* COMMENT_7 */\n    }\n#else\n    check_running_as(VAR_27);\n#endif\n\n    /* COMMENT_11 */\n    VAR_0--;\n    VAR_1++;\n\n    VAR_23(VAR_24(\"config: %s\\n\"), VAR_1[0]);\n    if (!g_str_equal(VAR_1[0], \"NOCONFIG\"))\n\tdbrename(VAR_1[0], VAR_17);\n    VAR_0--;\n    VAR_1++;\n\n    VAR_9 = g_new0(char *, VAR_0+1);\n\n    if (!check_exec_for_suid(\"GNUTAR_PATH\", VAR_2, VAR_20, &VAR_11)) {\n\tdbclose();\n\texit(1);\n    }\n    VAR_9[0] = g_strdup_printf(\"%s\", VAR_1[0]);\n    g_ptr_array_add(VAR_7, g_strdup(VAR_11));\n    VAR_12 = 0;\n    for (VAR_3 = 1; VAR_1[VAR_3]; VAR_3++) {\n\tif (VAR_12 <= 0) {\n\t    if (g_str_has_prefix(VAR_1[VAR_3],\"--rsh-command\") ||\n\t\tg_str_has_prefix(VAR_1[VAR_3],\"--to-command\") ||\n\t\tg_str_has_prefix(VAR_1[VAR_3],\"--info-script\") ||\n\t\tg_str_has_prefix(VAR_1[VAR_3],\"--new-volume-script\") ||\n\t\tg_str_has_prefix(VAR_1[VAR_3],\"--rmt-command\") ||\n\t\tg_str_has_prefix(VAR_1[VAR_3],\"--use-compress-program\")) {\n\t\t/* COMMENT_12 */\n\t\tVAR_12 = 0;\n\t    } else if (g_str_has_prefix(VAR_1[VAR_3],\"--create\") ||\n\t\tg_str_has_prefix(VAR_1[VAR_3],\"--totals\") ||\n\t\tg_str_has_prefix(VAR_1[VAR_3],\"--dereference\") ||\n\t\tg_str_has_prefix(VAR_1[VAR_3],\"--no-recursion\") ||\n\t\tg_str_has_prefix(VAR_1[VAR_3],\"--one-file-system\") ||\n\t\tg_str_has_prefix(VAR_1[VAR_3],\"--incremental\") ||\n\t\tg_str_has_prefix(VAR_1[VAR_3],\"--atime-preserve\") ||\n\t\tg_str_has_prefix(VAR_1[VAR_3],\"--sparse\") ||\n\t\tg_str_has_prefix(VAR_1[VAR_3],\"--ignore-failed-read\") ||\n\t\tg_str_has_prefix(VAR_1[VAR_3],\"--numeric-owner\") ||\n\t\tg_str_has_prefix(VAR_1[VAR_3],\"--verbose\")) {\n\t\t/* COMMENT_13 */\n\t\tVAR_12++;\n\t    } else if (g_str_has_prefix(VAR_1[VAR_3],\"--blocking-factor\") ||\n\t\tg_str_has_prefix(VAR_1[VAR_3],\"--file\") ||\n\t\tg_str_has_prefix(VAR_1[VAR_3],\"--directory\") ||\n\t\tg_str_has_prefix(VAR_1[VAR_3],\"--exclude\") ||\n\t\tg_str_has_prefix(VAR_1[VAR_3],\"--transform\") ||\n\t\tg_str_has_prefix(VAR_1[VAR_3],\"--listed-incremental\") ||\n\t\tg_str_has_prefix(VAR_1[VAR_3],\"--newer\") ||\n\t\tg_str_has_prefix(VAR_1[VAR_3],\"--exclude-from\") ||\n\t\tg_str_has_prefix(VAR_1[VAR_3],\"--files-from\")) {\n\t\t/* COMMENT_14 */\n\t\tVAR_12 += 2;\n\t    } else if (VAR_1[VAR_3][0] != '-') {\n\t\tVAR_12++;\n\t    }\n\t}\n\tif (VAR_12 <= 0) {\n\t    error(\"error [%s invalid option: %s]\", get_pname(), VAR_1[VAR_3]);\n\t}\n        g_ptr_array_add(VAR_7, quote_string(VAR_1[VAR_3]));\n\tVAR_9[VAR_3] = g_strdup_printf(\"%s\", VAR_1[VAR_3]);\n\tVAR_12--;\n    }\n\n    g_ptr_array_add(VAR_7, NULL);\n    VAR_8 = (gchar **)g_ptr_array_free(VAR_7, FALSE);\n\n    VAR_6 = g_strjoinv(\" \", VAR_8);\n    g_strfreev(VAR_8);\n\n    VAR_23(VAR_24(\"running: %s\\n\"), VAR_6);\n    amfree(VAR_6);\n\n    VAR_5 = dbfn();\n    if (VAR_5) {\n\tVAR_5 = g_strdup(VAR_5);\n    }\n    dbclose();\n\n    VAR_10 = safe_env();\n    execve(VAR_11, VAR_9, VAR_10);\n    free_env(VAR_10);\n    free_env(VAR_9);\n\n    VAR_4 = strerror(VAR_25);\n    dbreopen(VAR_5, \"more\");\n    amfree(VAR_5);\n    VAR_23(VAR_24(\"execve of %s failed (%s)\\n\"), VAR_11, VAR_4);\n    dbclose();\n\n    g_fprintf(VAR_20, VAR_24(\"runtar: could not exec %s: %s\\n\"), VAR_11, VAR_4);\n    g_free(VAR_11);\n    return 1;\n#endif\n}",
  "func_graph_path_before": "zmanda/amanda/43c5b32f46186f3ed78fe6c7503096fa9ad1236c/runtar.c/vul/before/0.json",
  "func": "int\nmain(\n    int\t\targc,\n    char **\targv)\n{\n#ifdef GNUTAR\n    int i;\n    char *e;\n    char *dbf;\n    char *cmdline;\n    GPtrArray *array = g_ptr_array_new();\n    gchar **strings;\n    char **new_argv;\n    char **env;\n    char *my_realpath = NULL;\n#endif\n    int good_option;\n\n    glib_init();\n\n    if (argc > 1 && argv[1] && g_str_equal(argv[1], \"--version\")) {\n\tprintf(\"runtar-%s\\n\", VERSION);\n\treturn (0);\n    }\n\n    /*\n     * Configure program for internationalization:\n     *   1) Only set the message locale for now.\n     *   2) Set textdomain for all amanda related programs to \"amanda\"\n     *      We don't want to be forced to support dozens of message catalogs.\n     */\n    setlocale(LC_MESSAGES, \"C\");\n    textdomain(\"amanda\"); \n\n    safe_fd(-1, 0);\n    safe_cd();\n\n    set_pname(\"runtar\");\n\n    /* Don't die when child closes pipe */\n    signal(SIGPIPE, SIG_IGN);\n\n    dbopen(DBG_SUBDIR_CLIENT);\n    config_init(CONFIG_INIT_CLIENT|CONFIG_INIT_GLOBAL, NULL);\n\n    if (argc < 3) {\n\terror(_(\"Need at least 3 arguments\\n\"));\n\t/*NOTREACHED*/\n    }\n\n    dbprintf(_(\"version %s\\n\"), VERSION);\n\n    if (!g_str_equal(argv[3], \"--create\")) {\n\terror(_(\"Can only be used to create tar archives\\n\"));\n\t/*NOTREACHED*/\n    }\n\n#ifndef GNUTAR\n\n    g_fprintf(stderr,_(\"gnutar not available on this system.\\n\"));\n    dbprintf(_(\"%s: gnutar not available on this system.\\n\"), argv[0]);\n    dbclose();\n    return 1;\n\n#else\n\n    /*\n     * Print out version information for tar.\n     */\n    do {\n\tFILE *\tversion_file;\n\tchar\tversion_buf[80];\n\n\tif ((version_file = popen(GNUTAR \" --version 2>&1\", \"r\")) != NULL) {\n\t    if (fgets(version_buf, (int)sizeof(version_buf), version_file) != NULL) {\n\t\tdbprintf(_(GNUTAR \" version: %s\\n\"), version_buf);\n\t    } else {\n\t\tif (ferror(version_file)) {\n\t\t    dbprintf(_(GNUTAR \" version: Read failure: %s\\n\"), strerror(errno));\n\t\t} else {\n\t\t    dbprintf(_(GNUTAR \" version: Read failure; EOF\\n\"));\n\t\t}\n\t    }\n\t} else {\n\t    dbprintf(_(GNUTAR \" version: unavailable: %s\\n\"), strerror(errno));\n\t}\n    } while(0);\n\n#ifdef WANT_SETUID_CLIENT\n    check_running_as(RUNNING_AS_CLIENT_LOGIN | RUNNING_AS_UID_ONLY);\n    if (!become_root()) {\n\terror(_(\"error [%s could not become root (is the setuid bit set?)]\\n\"), get_pname());\n\t/*NOTREACHED*/\n    }\n#else\n    check_running_as(RUNNING_AS_CLIENT_LOGIN);\n#endif\n\n    /* skip argv[0] */\n    argc--;\n    argv++;\n\n    dbprintf(_(\"config: %s\\n\"), argv[0]);\n    if (!g_str_equal(argv[0], \"NOCONFIG\"))\n\tdbrename(argv[0], DBG_SUBDIR_CLIENT);\n    argc--;\n    argv++;\n\n    new_argv = g_new0(char *, argc+1);\n\n    if (!check_exec_for_suid(\"GNUTAR_PATH\", GNUTAR, stderr, &my_realpath)) {\n\tdbclose();\n\texit(1);\n    }\n    new_argv[0] = g_strdup_printf(\"%s\", argv[0]);\n    g_ptr_array_add(array, g_strdup(my_realpath));\n    good_option = 0;\n    for (i = 1; argv[i]; i++) {\n\tif (good_option <= 0) {\n\t    if (g_str_has_prefix(argv[i],\"--rsh-command\") ||\n\t\tg_str_has_prefix(argv[i],\"--to-command\") ||\n\t\tg_str_has_prefix(argv[i],\"--info-script\") ||\n\t\tg_str_has_prefix(argv[i],\"--new-volume-script\") ||\n\t\tg_str_has_prefix(argv[i],\"--rmt-command\") ||\n\t\tg_str_has_prefix(argv[i],\"--use-compress-program\")) {\n\t\t/* Filter potential malicious option */\n\t\tgood_option = 0;\n\t    } else if (g_str_has_prefix(argv[i],\"--create\") ||\n\t\tg_str_has_prefix(argv[i],\"--totals\") ||\n\t\tg_str_has_prefix(argv[i],\"--dereference\") ||\n\t\tg_str_has_prefix(argv[i],\"--no-recursion\") ||\n\t\tg_str_has_prefix(argv[i],\"--one-file-system\") ||\n\t\tg_str_has_prefix(argv[i],\"--incremental\") ||\n\t\tg_str_has_prefix(argv[i],\"--atime-preserve\") ||\n\t\tg_str_has_prefix(argv[i],\"--sparse\") ||\n\t\tg_str_has_prefix(argv[i],\"--ignore-failed-read\") ||\n\t\tg_str_has_prefix(argv[i],\"--numeric-owner\") ||\n\t\tg_str_has_prefix(argv[i],\"--verbose\")) {\n\t\t/* Accept theses options */\n\t\tgood_option++;\n\t    } else if (g_str_has_prefix(argv[i],\"--blocking-factor\") ||\n\t\tg_str_has_prefix(argv[i],\"--file\") ||\n\t\tg_str_has_prefix(argv[i],\"--directory\") ||\n\t\tg_str_has_prefix(argv[i],\"--exclude\") ||\n\t\tg_str_has_prefix(argv[i],\"--transform\") ||\n\t\tg_str_has_prefix(argv[i],\"--listed-incremental\") ||\n\t\tg_str_has_prefix(argv[i],\"--newer\") ||\n\t\tg_str_has_prefix(argv[i],\"--exclude-from\") ||\n\t\tg_str_has_prefix(argv[i],\"--files-from\")) {\n\t\tgood_option++;\n\t    } else if (argv[i][0] != '-') {\n\t\t/* argument values are accounted for here */\n\t\tgood_option++;\n\t    }\n\t}\n\tif (good_option <= 0) {\n\t    error(\"error [%s invalid option: %s]\", get_pname(), argv[i]);\n\t}\n        g_ptr_array_add(array, quote_string(argv[i]));\n\tnew_argv[i] = g_strdup_printf(\"%s\", argv[i]);\n\tgood_option--;\n    }\n\n    g_ptr_array_add(array, NULL);\n    strings = (gchar **)g_ptr_array_free(array, FALSE);\n\n    cmdline = g_strjoinv(\" \", strings);\n    g_strfreev(strings);\n\n    dbprintf(_(\"running: %s\\n\"), cmdline);\n    amfree(cmdline);\n\n    dbf = dbfn();\n    if (dbf) {\n\tdbf = g_strdup(dbf);\n    }\n    dbclose();\n\n    env = safe_env();\n    execve(my_realpath, new_argv, env);\n    free_env(env);\n    free_env(new_argv);\n\n    e = strerror(errno);\n    dbreopen(dbf, \"more\");\n    amfree(dbf);\n    dbprintf(_(\"execve of %s failed (%s)\\n\"), my_realpath, e);\n    dbclose();\n\n    g_fprintf(stderr, _(\"runtar: could not exec %s: %s\\n\"), my_realpath, e);\n    g_free(my_realpath);\n    return 1;\n#endif\n}",
  "abstract_func": "int\nmain(\n    int\t\tVAR_0,\n    char **\tVAR_1)\n{\n#ifdef VAR_2\n    int VAR_3;\n    char *VAR_4;\n    char *VAR_5;\n    char *VAR_6;\n    GPtrArray *VAR_7 = g_ptr_array_new();\n    gchar **VAR_8;\n    char **VAR_9;\n    char **VAR_10;\n    char *VAR_11 = NULL;\n#endif\n    int VAR_12;\n\n    glib_init();\n\n    if (VAR_0 > 1 && VAR_1[1] && g_str_equal(VAR_1[1], \"--version\")) {\n\tprintf(\"runtar-%s\\n\", VAR_13);\n\treturn (0);\n    }\n\n    /* COMMENT_0 */\n                                                  \n                                                \n                                                                      \n                                                                             \n       \n    setlocale(VAR_14, \"C\");\n    textdomain(\"amanda\"); \n\n    safe_fd(-1, 0);\n    safe_cd();\n\n    set_pname(\"runtar\");\n\n    /* COMMENT_6 */\n    signal(VAR_15, VAR_16);\n\n    dbopen(VAR_17);\n    config_init(VAR_18|VAR_19, NULL);\n\n    if (VAR_0 < 3) {\n\terror(_(\"Need at least 3 arguments\\n\"));\n\t/* COMMENT_7 */\n    }\n\n    dbprintf(_(\"version %s\\n\"), VAR_13);\n\n    if (!g_str_equal(VAR_1[3], \"--create\")) {\n\terror(_(\"Can only be used to create tar archives\\n\"));\n\t/* COMMENT_7 */\n    }\n\n#ifndef VAR_2\n\n    g_fprintf(VAR_20,_(\"gnutar not available on this system.\\n\"));\n    dbprintf(_(\"%s: gnutar not available on this system.\\n\"), VAR_1[0]);\n    dbclose();\n    return 1;\n\n#else\n\n    /* COMMENT_8 */\n                                             \n       \n    do {\n\tFILE *\tVAR_21;\n\tchar\tVAR_22[80];\n\n\tif ((VAR_21 = popen(VAR_2 \" --version 2>&1\", \"r\")) != NULL) {\n\t    if (fgets(VAR_22, (int)sizeof(VAR_22), VAR_21) != NULL) {\n\t\tVAR_23(VAR_24(VAR_2 \" version: %s\\n\"), VAR_22);\n\t    } else {\n\t\tif (ferror(VAR_21)) {\n\t\t    VAR_23(VAR_24(VAR_2 \" version: Read failure: %s\\n\"), strerror(VAR_25));\n\t\t} else {\n\t\t    VAR_23(VAR_24(VAR_2 \" version: Read failure; EOF\\n\"));\n\t\t}\n\t    }\n\t} else {\n\t    VAR_23(VAR_24(VAR_2 \" version: unavailable: %s\\n\"), strerror(VAR_25));\n\t}\n    } while(0);\n\n#ifdef VAR_26\n    check_running_as(VAR_27 | VAR_28);\n    if (!become_root()) {\n\terror(VAR_24(\"error [%s could not become root (is the setuid bit set?)]\\n\"), get_pname());\n\t/* COMMENT_7 */\n    }\n#else\n    check_running_as(VAR_27);\n#endif\n\n    /* COMMENT_11 */\n    VAR_0--;\n    VAR_1++;\n\n    VAR_23(VAR_24(\"config: %s\\n\"), VAR_1[0]);\n    if (!g_str_equal(VAR_1[0], \"NOCONFIG\"))\n\tdbrename(VAR_1[0], VAR_17);\n    VAR_0--;\n    VAR_1++;\n\n    VAR_9 = g_new0(char *, VAR_0+1);\n\n    if (!check_exec_for_suid(\"GNUTAR_PATH\", VAR_2, VAR_20, &VAR_11)) {\n\tdbclose();\n\texit(1);\n    }\n    VAR_9[0] = g_strdup_printf(\"%s\", VAR_1[0]);\n    g_ptr_array_add(VAR_7, g_strdup(VAR_11));\n    VAR_12 = 0;\n    for (VAR_3 = 1; VAR_1[VAR_3]; VAR_3++) {\n\tif (VAR_12 <= 0) {\n\t    if (g_str_has_prefix(VAR_1[VAR_3],\"--rsh-command\") ||\n\t\tg_str_has_prefix(VAR_1[VAR_3],\"--to-command\") ||\n\t\tg_str_has_prefix(VAR_1[VAR_3],\"--info-script\") ||\n\t\tg_str_has_prefix(VAR_1[VAR_3],\"--new-volume-script\") ||\n\t\tg_str_has_prefix(VAR_1[VAR_3],\"--rmt-command\") ||\n\t\tg_str_has_prefix(VAR_1[VAR_3],\"--use-compress-program\")) {\n\t\t/* COMMENT_12 */\n\t\tVAR_12 = 0;\n\t    } else if (g_str_has_prefix(VAR_1[VAR_3],\"--create\") ||\n\t\tg_str_has_prefix(VAR_1[VAR_3],\"--totals\") ||\n\t\tg_str_has_prefix(VAR_1[VAR_3],\"--dereference\") ||\n\t\tg_str_has_prefix(VAR_1[VAR_3],\"--no-recursion\") ||\n\t\tg_str_has_prefix(VAR_1[VAR_3],\"--one-file-system\") ||\n\t\tg_str_has_prefix(VAR_1[VAR_3],\"--incremental\") ||\n\t\tg_str_has_prefix(VAR_1[VAR_3],\"--atime-preserve\") ||\n\t\tg_str_has_prefix(VAR_1[VAR_3],\"--sparse\") ||\n\t\tg_str_has_prefix(VAR_1[VAR_3],\"--ignore-failed-read\") ||\n\t\tg_str_has_prefix(VAR_1[VAR_3],\"--numeric-owner\") ||\n\t\tg_str_has_prefix(VAR_1[VAR_3],\"--verbose\")) {\n\t\t/* COMMENT_13 */\n\t\tVAR_12++;\n\t    } else if (g_str_has_prefix(VAR_1[VAR_3],\"--blocking-factor\") ||\n\t\tg_str_has_prefix(VAR_1[VAR_3],\"--file\") ||\n\t\tg_str_has_prefix(VAR_1[VAR_3],\"--directory\") ||\n\t\tg_str_has_prefix(VAR_1[VAR_3],\"--exclude\") ||\n\t\tg_str_has_prefix(VAR_1[VAR_3],\"--transform\") ||\n\t\tg_str_has_prefix(VAR_1[VAR_3],\"--listed-incremental\") ||\n\t\tg_str_has_prefix(VAR_1[VAR_3],\"--newer\") ||\n\t\tg_str_has_prefix(VAR_1[VAR_3],\"--exclude-from\") ||\n\t\tg_str_has_prefix(VAR_1[VAR_3],\"--files-from\")) {\n\t\tVAR_12++;\n\t    } else if (VAR_1[VAR_3][0] != '-') {\n\t\t/* COMMENT_14 */\n\t\tVAR_12++;\n\t    }\n\t}\n\tif (VAR_12 <= 0) {\n\t    error(\"error [%s invalid option: %s]\", get_pname(), VAR_1[VAR_3]);\n\t}\n        g_ptr_array_add(VAR_7, quote_string(VAR_1[VAR_3]));\n\tVAR_9[VAR_3] = g_strdup_printf(\"%s\", VAR_1[VAR_3]);\n\tVAR_12--;\n    }\n\n    g_ptr_array_add(VAR_7, NULL);\n    VAR_8 = (gchar **)g_ptr_array_free(VAR_7, FALSE);\n\n    VAR_6 = g_strjoinv(\" \", VAR_8);\n    g_strfreev(VAR_8);\n\n    VAR_23(VAR_24(\"running: %s\\n\"), VAR_6);\n    amfree(VAR_6);\n\n    VAR_5 = dbfn();\n    if (VAR_5) {\n\tVAR_5 = g_strdup(VAR_5);\n    }\n    dbclose();\n\n    VAR_10 = safe_env();\n    execve(VAR_11, VAR_9, VAR_10);\n    free_env(VAR_10);\n    free_env(VAR_9);\n\n    VAR_4 = strerror(VAR_25);\n    dbreopen(VAR_5, \"more\");\n    amfree(VAR_5);\n    VAR_23(VAR_24(\"execve of %s failed (%s)\\n\"), VAR_11, VAR_4);\n    dbclose();\n\n    g_fprintf(VAR_20, VAR_24(\"runtar: could not exec %s: %s\\n\"), VAR_11, VAR_4);\n    g_free(VAR_11);\n    return 1;\n#endif\n}",
  "func_graph_path": "zmanda/amanda/43c5b32f46186f3ed78fe6c7503096fa9ad1236c/runtar.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -147,9 +147,9 @@\n \t\tg_str_has_prefix(argv[i],\"--newer\") ||\n \t\tg_str_has_prefix(argv[i],\"--exclude-from\") ||\n \t\tg_str_has_prefix(argv[i],\"--files-from\")) {\n-\t\t/* Accept theses options with the following argument */\n-\t\tgood_option += 2;\n+\t\tgood_option++;\n \t    } else if (argv[i][0] != '-') {\n+\t\t/* argument values are accounted for here */\n \t\tgood_option++;\n \t    }\n \t}",
  "diff_line_info": {
    "deleted_lines": [
      "\t\t/* Accept theses options with the following argument */",
      "\t\tgood_option += 2;"
    ],
    "added_lines": [
      "\t\tgood_option++;",
      "\t\t/* argument values are accounted for here */"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/zmanda/amanda/pull/196",
  "description": {
    "pr_info": {
      "title": "Fixes Open Vulnerability CVE-2022-37705",
      "number": 196
    },
    "comment": [
      "Closes one of vulnerabilities discussed on : https://github.com/zmanda/amanda/issues/192, CVE-2022-37705.\r\n\r\nContext:\r\n\r\nwith careful selection of arguments, runtar binary can be tricked into invoking shell and since it as SUID bit set and owner is root, it spawns a root shell local low privileged user [reference](https://github.com/MaherAzzouzi/CVE-2022-37705)\r\n\r\nCode Context:\r\n\r\nargument check logic for arguments of type --foo bar is being misused to skip parsing malicious arguments.\r\n\r\nruntar keeps good_option variable to keep track of good and bad arguments which are in turn passed to the tar command in the exact order specified to runtar.\r\n\r\nfor arguments of type --foo bar it increments good_option twice ( += 2) accounting for bar to be the next argument and skips checking for it, but --foo bar can also be specified as --foo=bar where value bar is already specified for argument --foo so with good_option still have count >=0 causing immediate argument after this to not checked.\r\n\r\nFix:\r\n\r\nFor arguemnts of type --foo we only increment count by 1, since t[here](https://github.com/zmanda/amanda/blob/master/client-src/runtar.c#L196) is already a check to account for values to arguments here\r\n\r\n```\r\n\t    } else if (argv[i][0] != '-') {\r\n\t\tgood_option++;\r\n\t    }\r\n```"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 1.0"
}