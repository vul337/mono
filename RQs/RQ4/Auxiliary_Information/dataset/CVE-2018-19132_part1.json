{
  "cve_id": "CVE-2018-19132",
  "cwe_ids": [
    "CWE-772"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "squid-cache/squid",
  "commit_msg": "fix memory leak when parsing SNMP packet",
  "commit_hash": "4a49b6dd822597691b4d25c2bd21d0d418413246",
  "git_url": "https://github.com/squid-cache/squid/commit/4a49b6dd822597691b4d25c2bd21d0d418413246",
  "file_path": "src/snmp_core.cc",
  "func_name": "snmpDecodePacket",
  "func_before": "static void\nsnmpDecodePacket(SnmpRequest * rq)\n{\n    struct snmp_pdu *PDU;\n    u_char *Community;\n    u_char *buf = rq->buf;\n    int len = rq->len;\n\n    if (!Config.accessList.snmp) {\n        debugs(49, DBG_IMPORTANT, \"WARNING: snmp_access not configured. agent query DENIED from : \" << rq->from);\n        return;\n    }\n\n    debugs(49, 5, HERE << \"Called.\");\n    PDU = snmp_pdu_create(0);\n    /* Allways answer on SNMPv1 */\n    rq->session.Version = SNMP_VERSION_1;\n    Community = snmp_parse(&rq->session, PDU, buf, len);\n\n    /* Check if we have explicit permission to access SNMP data.\n     * default (set above) is to deny all */\n    if (Community) {\n        ACLFilledChecklist checklist(Config.accessList.snmp, NULL, NULL);\n        checklist.src_addr = rq->from;\n        checklist.snmp_community = (char *) Community;\n\n        if (checklist.fastCheck().allowed() && (snmp_coexist_V2toV1(PDU))) {\n            rq->community = Community;\n            rq->PDU = PDU;\n            debugs(49, 5, \"snmpAgentParse: reqid=[\" << PDU->reqid << \"]\");\n            snmpConstructReponse(rq);\n        } else {\n            debugs(49, DBG_IMPORTANT, \"WARNING: SNMP agent query DENIED from : \" << rq->from);\n        }\n        xfree(Community);\n\n    } else {\n        debugs(49, DBG_IMPORTANT, \"WARNING: Failed SNMP agent query from : \" << rq->from);\n        snmp_free_pdu(PDU);\n    }\n}",
  "abstract_func_before": "static void\nsnmpDecodePacket(SnmpRequest * VAR_0)\n{\n    struct snmp_pdu *VAR_1;\n    u_char *VAR_2;\n    u_char *VAR_3 = VAR_0->buf;\n    int VAR_4 = VAR_0->len;\n\n    if (!VAR_5.accessList.snmp) {\n        debugs(49, VAR_6, \"WARNING: snmp_access not configured. agent query DENIED from : \" << VAR_0->from);\n        return;\n    }\n\n    debugs(49, 5, VAR_7 << \"Called.\");\n    VAR_1 = snmp_pdu_create(0);\n    /* COMMENT_0 */\n    VAR_0->session.Version = VAR_8;\n    VAR_2 = snmp_parse(&VAR_0->session, VAR_1, VAR_3, VAR_4);\n\n    /* COMMENT_1 */\n                                            \n    if (VAR_2) {\n        ACLFilledChecklist VAR_9(VAR_5.accessList.snmp, NULL, NULL);\n        VAR_9.src_addr = VAR_0->from;\n        VAR_9.snmp_community = (char *) VAR_2;\n\n        if (VAR_9.fastCheck().allowed() && (snmp_coexist_V2toV1(VAR_1))) {\n            VAR_0->community = VAR_2;\n            VAR_0->PDU = VAR_1;\n            debugs(49, 5, \"snmpAgentParse: reqid=[\" << VAR_1->reqid << \"]\");\n            snmpConstructReponse(VAR_0);\n        } else {\n            debugs(49, VAR_6, \"WARNING: SNMP agent query DENIED from : \" << VAR_0->from);\n        }\n        xfree(VAR_2);\n\n    } else {\n        debugs(49, VAR_6, \"WARNING: Failed SNMP agent query from : \" << VAR_0->from);\n        snmp_free_pdu(VAR_1);\n    }\n}",
  "func_graph_path_before": "squid-cache/squid/4a49b6dd822597691b4d25c2bd21d0d418413246/snmp_core.cc/vul/before/0.json",
  "func": "static void\nsnmpDecodePacket(SnmpRequest * rq)\n{\n    struct snmp_pdu *PDU;\n    u_char *Community;\n    u_char *buf = rq->buf;\n    int len = rq->len;\n\n    if (!Config.accessList.snmp) {\n        debugs(49, DBG_IMPORTANT, \"WARNING: snmp_access not configured. agent query DENIED from : \" << rq->from);\n        return;\n    }\n\n    debugs(49, 5, HERE << \"Called.\");\n    PDU = snmp_pdu_create(0);\n    /* Allways answer on SNMPv1 */\n    rq->session.Version = SNMP_VERSION_1;\n    Community = snmp_parse(&rq->session, PDU, buf, len);\n\n    /* Check if we have explicit permission to access SNMP data.\n     * default (set above) is to deny all */\n    if (Community) {\n        ACLFilledChecklist checklist(Config.accessList.snmp, NULL, NULL);\n        checklist.src_addr = rq->from;\n        checklist.snmp_community = (char *) Community;\n\n        if (checklist.fastCheck().allowed() && (snmp_coexist_V2toV1(PDU))) {\n            rq->community = Community;\n            rq->PDU = PDU;\n            debugs(49, 5, \"snmpAgentParse: reqid=[\" << PDU->reqid << \"]\");\n            snmpConstructReponse(rq);\n        } else {\n            debugs(49, DBG_IMPORTANT, \"WARNING: SNMP agent query DENIED from : \" << rq->from);\n            snmp_free_pdu(PDU);\n        }\n        xfree(Community);\n\n    } else {\n        debugs(49, DBG_IMPORTANT, \"WARNING: Failed SNMP agent query from : \" << rq->from);\n        snmp_free_pdu(PDU);\n    }\n}",
  "abstract_func": "static void\nsnmpDecodePacket(SnmpRequest * VAR_0)\n{\n    struct snmp_pdu *VAR_1;\n    u_char *VAR_2;\n    u_char *VAR_3 = VAR_0->buf;\n    int VAR_4 = VAR_0->len;\n\n    if (!VAR_5.accessList.snmp) {\n        debugs(49, VAR_6, \"WARNING: snmp_access not configured. agent query DENIED from : \" << VAR_0->from);\n        return;\n    }\n\n    debugs(49, 5, VAR_7 << \"Called.\");\n    VAR_1 = snmp_pdu_create(0);\n    /* COMMENT_0 */\n    VAR_0->session.Version = VAR_8;\n    VAR_2 = snmp_parse(&VAR_0->session, VAR_1, VAR_3, VAR_4);\n\n    /* COMMENT_1 */\n                                            \n    if (VAR_2) {\n        ACLFilledChecklist VAR_9(VAR_5.accessList.snmp, NULL, NULL);\n        VAR_9.src_addr = VAR_0->from;\n        VAR_9.snmp_community = (char *) VAR_2;\n\n        if (VAR_9.fastCheck().allowed() && (snmp_coexist_V2toV1(VAR_1))) {\n            VAR_0->community = VAR_2;\n            VAR_0->PDU = VAR_1;\n            debugs(49, 5, \"snmpAgentParse: reqid=[\" << VAR_1->reqid << \"]\");\n            snmpConstructReponse(VAR_0);\n        } else {\n            debugs(49, VAR_6, \"WARNING: SNMP agent query DENIED from : \" << VAR_0->from);\n            snmp_free_pdu(VAR_1);\n        }\n        xfree(VAR_2);\n\n    } else {\n        debugs(49, VAR_6, \"WARNING: Failed SNMP agent query from : \" << VAR_0->from);\n        snmp_free_pdu(VAR_1);\n    }\n}",
  "func_graph_path": "squid-cache/squid/4a49b6dd822597691b4d25c2bd21d0d418413246/snmp_core.cc/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -31,6 +31,7 @@\n             snmpConstructReponse(rq);\n         } else {\n             debugs(49, DBG_IMPORTANT, \"WARNING: SNMP agent query DENIED from : \" << rq->from);\n+            snmp_free_pdu(PDU);\n         }\n         xfree(Community);\n ",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "            snmp_free_pdu(PDU);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/squid-cache/squid/pull/313",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/squid-cache/squid/pull/313: 403 Client Error: Forbidden for url: https://api.github.com/repos/squid-cache/squid/pulls/313",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.9"
}