{
  "cve_id": "CVE-2022-24754",
  "cwe_ids": [
    "CWE-120"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "pjsip/pjproject",
  "commit_msg": "Use PJ_ASSERT_RETURN() on pjsip_auth_create_digest() and pjsua_init_tpselector() (#3009)\n\n* Use PJ_ASSERT_RETURN on pjsip_auth_create_digest\r\n\r\n* Use PJ_ASSERT_RETURN on pjsua_init_tpselector()\r\n\r\n* Fix incorrect check.\r\n\r\n* Add return value to pjsip_auth_create_digest() and pjsip_auth_create_digestSHA256()\r\n\r\n* Modification based on comments.",
  "commit_hash": "d27f79da11df7bc8bb56c2f291d71e54df8d2c47",
  "git_url": "https://github.com/pjsip/pjproject/commit/d27f79da11df7bc8bb56c2f291d71e54df8d2c47",
  "file_path": "pjsip/src/pjsua-lib/pjsua_core.c",
  "func_name": "pjsua_init_tpselector",
  "func_before": "void pjsua_init_tpselector(pjsua_transport_id tp_id,\n\t\t\t   pjsip_tpselector *sel)\n{\n    pjsua_transport_data *tpdata;\n    unsigned flag;\n\n    pj_bzero(sel, sizeof(*sel));\n    if (tp_id == PJSUA_INVALID_ID)\n\treturn;\n\n    pj_assert(tp_id >= 0 && tp_id < (int)PJ_ARRAY_SIZE(pjsua_var.tpdata));\n    tpdata = &pjsua_var.tpdata[tp_id];\n\n    flag = pjsip_transport_get_flag_from_type(tpdata->type);\n\n    if (flag & PJSIP_TRANSPORT_DATAGRAM) {\n\tsel->type = PJSIP_TPSELECTOR_TRANSPORT;\n\tsel->u.transport = tpdata->data.tp;\n    } else {\n\tsel->type = PJSIP_TPSELECTOR_LISTENER;\n\tsel->u.listener = tpdata->data.factory;\n    }\n}",
  "abstract_func_before": "void pjsua_init_tpselector(pjsua_transport_id VAR_0,\n\t\t\t   pjsip_tpselector *VAR_1)\n{\n    pjsua_transport_data *VAR_2;\n    unsigned VAR_3;\n\n    pj_bzero(VAR_1, sizeof(*VAR_1));\n    if (VAR_0 == VAR_4)\n\treturn;\n\n    pj_assert(VAR_0 >= 0 && VAR_0 < (int)PJ_ARRAY_SIZE(VAR_5.tpdata));\n    VAR_2 = &VAR_5.tpdata[VAR_0];\n\n    VAR_3 = pjsip_transport_get_flag_from_type(VAR_2->type);\n\n    if (VAR_3 & VAR_6) {\n\tVAR_1->type = VAR_7;\n\tVAR_1->u.transport = VAR_2->data.tp;\n    } else {\n\tVAR_1->type = VAR_8;\n\tVAR_1->u.listener = VAR_2->data.factory;\n    }\n}",
  "func_graph_path_before": "pjsip/pjproject/d27f79da11df7bc8bb56c2f291d71e54df8d2c47/pjsua_core.c/vul/before/0.json",
  "func": "void pjsua_init_tpselector(pjsua_transport_id tp_id,\n\t\t\t   pjsip_tpselector *sel)\n{\n    pjsua_transport_data *tpdata;\n    unsigned flag;\n\n    pj_bzero(sel, sizeof(*sel));\n    if (tp_id == PJSUA_INVALID_ID)\n\treturn;\n\n    PJ_ASSERT_RETURN(tp_id >= 0 && \n\t\t     tp_id < (int)PJ_ARRAY_SIZE(pjsua_var.tpdata), );\n    tpdata = &pjsua_var.tpdata[tp_id];\n\n    flag = pjsip_transport_get_flag_from_type(tpdata->type);\n\n    if (flag & PJSIP_TRANSPORT_DATAGRAM) {\n\tsel->type = PJSIP_TPSELECTOR_TRANSPORT;\n\tsel->u.transport = tpdata->data.tp;\n    } else {\n\tsel->type = PJSIP_TPSELECTOR_LISTENER;\n\tsel->u.listener = tpdata->data.factory;\n    }\n}",
  "abstract_func": "void pjsua_init_tpselector(pjsua_transport_id VAR_0,\n\t\t\t   pjsip_tpselector *VAR_1)\n{\n    pjsua_transport_data *VAR_2;\n    unsigned VAR_3;\n\n    pj_bzero(VAR_1, sizeof(*VAR_1));\n    if (VAR_0 == VAR_4)\n\treturn;\n\n    PJ_ASSERT_RETURN(VAR_0 >= 0 && \n\t\t     VAR_0 < (int)PJ_ARRAY_SIZE(VAR_5.tpdata), );\n    VAR_2 = &VAR_5.tpdata[VAR_0];\n\n    VAR_3 = pjsip_transport_get_flag_from_type(VAR_2->type);\n\n    if (VAR_3 & VAR_6) {\n\tVAR_1->type = VAR_7;\n\tVAR_1->u.transport = VAR_2->data.tp;\n    } else {\n\tVAR_1->type = VAR_8;\n\tVAR_1->u.listener = VAR_2->data.factory;\n    }\n}",
  "func_graph_path": "pjsip/pjproject/d27f79da11df7bc8bb56c2f291d71e54df8d2c47/pjsua_core.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -8,7 +8,8 @@\n     if (tp_id == PJSUA_INVALID_ID)\n \treturn;\n \n-    pj_assert(tp_id >= 0 && tp_id < (int)PJ_ARRAY_SIZE(pjsua_var.tpdata));\n+    PJ_ASSERT_RETURN(tp_id >= 0 && \n+\t\t     tp_id < (int)PJ_ARRAY_SIZE(pjsua_var.tpdata), );\n     tpdata = &pjsua_var.tpdata[tp_id];\n \n     flag = pjsip_transport_get_flag_from_type(tpdata->type);",
  "diff_line_info": {
    "deleted_lines": [
      "    pj_assert(tp_id >= 0 && tp_id < (int)PJ_ARRAY_SIZE(pjsua_var.tpdata));"
    ],
    "added_lines": [
      "    PJ_ASSERT_RETURN(tp_id >= 0 && ",
      "\t\t     tp_id < (int)PJ_ARRAY_SIZE(pjsua_var.tpdata), );"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/pjsip/pjproject/pull/3009",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/pjsip/pjproject/pull/3009: 403 Client Error: Forbidden for url: https://api.github.com/repos/pjsip/pjproject/pulls/3009",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.9  \n\n**Step-by-Step Explanation:**\n\n1. **Input Analysis:**  \n   The commit message mentions using `PJ_ASSERT_RETURN()` in specific functions and fixing an incorrect check. The vulnerability description explicitly refers to a buffer overflow in `pjsip_auth_create_digest()` related to a security advisory.\n\n2. **Consistency Check:**  \n   The code diff shows replacing `pj_assert()` with `PJ_ASSERT_RETURN()` in `pjsua_init_tpselector()`, indicating a bounds-checking fix. This aligns with the commit message and vulnerability description.\n\n3. **Purpose Evaluation:**  \n   The changes are aimed at enhancing input validation to prevent buffer overflow, a security risk, rather than addressing non-security issues.\n\n4. **Security Vulnerability Assessment:**  \n   The fix addresses an externally exploitable buffer overflow, and the vulnerability is tied to a known security advisory (GHSA-73f7-48m9-w662).\n\n5. **Confidence Scoring:**  \n   High confidence due to the clear link between the code changes and the security vulnerability, with consistent commit message and diff."
}