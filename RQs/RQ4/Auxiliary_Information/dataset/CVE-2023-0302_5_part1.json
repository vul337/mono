{
  "cve_id": "CVE-2023-0302",
  "cwe_ids": [
    "CWE-74"
  ],
  "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H",
  "cvss_is_v3": true,
  "repo_name": "radareorg/radare2",
  "commit_msg": "Fix ANSI Escape Sequence Injection vulns via DWARF ##vuln\n\n* Reported by @solid-snail via huntrdev\r\n* BountyID: 583133af-7ae6-4a21-beef-a4b0182cf82e\r\n* Reproducer: dwarf_test_func_patched",
  "commit_hash": "961f0e723903011d4f54c2396e44efa91fcc74ce",
  "git_url": "https://github.com/radareorg/radare2/commit/961f0e723903011d4f54c2396e44efa91fcc74ce",
  "file_path": "libr/anal/meta.c",
  "func_name": "meta_set",
  "func_before": "static bool meta_set(RAnal *a, RAnalMetaType type, int subtype, ut64 from, ut64 to, const char *str) {\n\tif (to < from) {\n\t\treturn false;\n\t}\n\tRSpace *space = r_spaces_current (&a->meta_spaces);\n\tRIntervalNode *node = find_node_at (a, type, space, from);\n\tRAnalMetaItem *item = node ? node->data : R_NEW0 (RAnalMetaItem);\n\tif (!item) {\n\t\treturn false;\n\t}\n\titem->type = type;\n\titem->subtype = subtype;\n\titem->space = space;\n\tfree (item->str);\n\titem->str = str ? strdup (str) : NULL;\n\tif (str && !item->str) {\n\t\tif (!node) { // If we just created this\n\t\t\tfree (item);\n\t\t}\n\t\treturn false;\n\t}\n\tR_DIRTY (a);\n\tif (!node) {\n\t\tr_interval_tree_insert (&a->meta, from, to, item);\n\t} else if (node->end != to) {\n\t\tr_interval_tree_resize (&a->meta, node, from, to);\n\t}\n\treturn true;\n}",
  "abstract_func_before": "static bool meta_set(RAnal *VAR_0, RAnalMetaType VAR_1, int VAR_2, ut64 VAR_3, ut64 VAR_4, const char *VAR_5) {\n\tif (VAR_4 < VAR_3) {\n\t\treturn false;\n\t}\n\tRSpace *VAR_6 = r_spaces_current (&VAR_0->meta_spaces);\n\tRIntervalNode *VAR_7 = find_node_at (VAR_0, VAR_1, VAR_6, VAR_3);\n\tRAnalMetaItem *VAR_8 = VAR_7 ? VAR_7->data : R_NEW0 (RAnalMetaItem);\n\tif (!VAR_8) {\n\t\treturn false;\n\t}\n\tVAR_8->type = VAR_1;\n\tVAR_8->subtype = VAR_2;\n\tVAR_8->space = VAR_6;\n\tfree (VAR_8->str);\n\tVAR_8->str = VAR_5 ? strdup (VAR_5) : NULL;\n\tif (VAR_5 && !VAR_8->str) {\n\t\tif (!VAR_7) { /* COMMENT_0 */\n\t\t\tfree (VAR_8);\n\t\t}\n\t\treturn false;\n\t}\n\tR_DIRTY (VAR_0);\n\tif (!VAR_7) {\n\t\tr_interval_tree_insert (&VAR_0->meta, VAR_3, VAR_4, VAR_8);\n\t} else if (VAR_7->end != VAR_4) {\n\t\tr_interval_tree_resize (&VAR_0->meta, VAR_7, VAR_3, VAR_4);\n\t}\n\treturn true;\n}",
  "func_graph_path_before": "radareorg/radare2/961f0e723903011d4f54c2396e44efa91fcc74ce/meta.c/vul/before/0.json",
  "func": "static bool meta_set(RAnal *a, RAnalMetaType type, int subtype, ut64 from, ut64 to, const char *str) {\n\tif (to < from) {\n\t\treturn false;\n\t}\n\tRSpace *space = r_spaces_current (&a->meta_spaces);\n\tRIntervalNode *node = find_node_at (a, type, space, from);\n\tRAnalMetaItem *item = node ? node->data : R_NEW0 (RAnalMetaItem);\n\tif (!item) {\n\t\treturn false;\n\t}\n\titem->type = type;\n\titem->subtype = subtype;\n\titem->space = space;\n\tfree (item->str);\n\tif (R_STR_ISNOTEMPTY (str)) {\n\t\titem->str = strdup (str);\n\t\t// this breaks the `ecHw` command\n\t\t// (highlights word in current instruction, which uses ansi\n\t\t// r_str_ansi_strip (item->str);\n\t} else {\n\t\titem->str = NULL;\n\t}\n\tR_DIRTY (a);\n\tif (!node) {\n\t\tr_interval_tree_insert (&a->meta, from, to, item);\n\t} else if (node->end != to) {\n\t\tr_interval_tree_resize (&a->meta, node, from, to);\n\t}\n\treturn true;\n}",
  "abstract_func": "static bool meta_set(RAnal *VAR_0, RAnalMetaType VAR_1, int VAR_2, ut64 VAR_3, ut64 VAR_4, const char *VAR_5) {\n\tif (VAR_4 < VAR_3) {\n\t\treturn false;\n\t}\n\tRSpace *VAR_6 = r_spaces_current (&VAR_0->meta_spaces);\n\tRIntervalNode *VAR_7 = find_node_at (VAR_0, VAR_1, VAR_6, VAR_3);\n\tRAnalMetaItem *VAR_8 = VAR_7 ? VAR_7->data : R_NEW0 (RAnalMetaItem);\n\tif (!VAR_8) {\n\t\treturn false;\n\t}\n\tVAR_8->type = VAR_1;\n\tVAR_8->subtype = VAR_2;\n\tVAR_8->space = VAR_6;\n\tfree (VAR_8->str);\n\tif (R_STR_ISNOTEMPTY (VAR_5)) {\n\t\tVAR_8->str = strdup (VAR_5);\n\t\t/* COMMENT_0 */\n\t\t/* COMMENT_1 */\n\t\t/* COMMENT_2 */\n\t} else {\n\t\tVAR_8->str = NULL;\n\t}\n\tR_DIRTY (VAR_0);\n\tif (!VAR_7) {\n\t\tr_interval_tree_insert (&VAR_0->meta, VAR_3, VAR_4, VAR_8);\n\t} else if (VAR_7->end != VAR_4) {\n\t\tr_interval_tree_resize (&VAR_0->meta, VAR_7, VAR_3, VAR_4);\n\t}\n\treturn true;\n}",
  "func_graph_path": "radareorg/radare2/961f0e723903011d4f54c2396e44efa91fcc74ce/meta.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -12,12 +12,13 @@\n \titem->subtype = subtype;\n \titem->space = space;\n \tfree (item->str);\n-\titem->str = str ? strdup (str) : NULL;\n-\tif (str && !item->str) {\n-\t\tif (!node) { // If we just created this\n-\t\t\tfree (item);\n-\t\t}\n-\t\treturn false;\n+\tif (R_STR_ISNOTEMPTY (str)) {\n+\t\titem->str = strdup (str);\n+\t\t// this breaks the `ecHw` command\n+\t\t// (highlights word in current instruction, which uses ansi\n+\t\t// r_str_ansi_strip (item->str);\n+\t} else {\n+\t\titem->str = NULL;\n \t}\n \tR_DIRTY (a);\n \tif (!node) {",
  "diff_line_info": {
    "deleted_lines": [
      "\titem->str = str ? strdup (str) : NULL;",
      "\tif (str && !item->str) {",
      "\t\tif (!node) { // If we just created this",
      "\t\t\tfree (item);",
      "\t\t}",
      "\t\treturn false;"
    ],
    "added_lines": [
      "\tif (R_STR_ISNOTEMPTY (str)) {",
      "\t\titem->str = strdup (str);",
      "\t\t// this breaks the `ecHw` command",
      "\t\t// (highlights word in current instruction, which uses ansi",
      "\t\t// r_str_ansi_strip (item->str);",
      "\t} else {",
      "\t\titem->str = NULL;"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/radareorg/radare2/pull/21231",
  "description": {
    "pr_info": {
      "title": "Colorz",
      "number": 21231
    },
    "comment": [
      "<!--\r\nRead https://github.com/radareorg/radare2/blob/master/DEVELOPERS.md\r\n* PR title must be capitalized, concise and use ##tags\r\n* If the PR is fixing a ticket use 'Fix #1234 - ..' in the commit message\r\n* Follow the coding style, add tests and documentation if necessary\r\n-->\r\n\r\n- [ ] Mark this if you consider it ready to merge\r\n- [ ] I've added tests (optional)\r\n- [ ] I wrote some lines in the [book](https://github.com/radareorg/radare2book) (optional)\r\n\r\n**Description**\r\n\r\n<!-- explain your changes if necessary -->\r\n"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "Final Classification: Security Vulnerability Fix; Confidence: 1.0"
}