{
  "cve_id": "CVE-2022-40759",
  "cwe_ids": [
    "CWE-476"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
  "cvss_is_v3": true,
  "repo_name": "Samsung/mTower",
  "commit_msg": "Fixed CVE-2022-40759\n\nSigned-off-by: Taras Drozdovskyi <t.drozdovsky@samsung.com>",
  "commit_hash": "3c1a0d5d4aa2be44d119ad00bc579f49b8547968",
  "git_url": "https://github.com/Samsung/mTower/commit/3c1a0d5d4aa2be44d119ad00bc579f49b8547968",
  "file_path": "tee/lib/libutee/tee_api_operations.c",
  "func_name": "TEE_MACCompareFinal",
  "func_before": "TEE_Result TEE_MACCompareFinal(TEE_OperationHandle operation,\n\t\t\t       const void *message, uint32_t messageLen,\n\t\t\t       const void *mac, uint32_t macLen)\n{\n\tTEE_Result res;\n\tuint8_t computed_mac[TEE_MAX_HASH_SIZE];\n\tuint32_t computed_mac_size = TEE_MAX_HASH_SIZE;\n\n\tif (operation->info.operationClass != TEE_OPERATION_MAC) {\n\t\tres = TEE_ERROR_BAD_PARAMETERS;\n\t\tgoto out;\n\t}\n\n\tif ((operation->info.handleState & TEE_HANDLE_FLAG_INITIALIZED) == 0) {\n\t\tres = TEE_ERROR_BAD_PARAMETERS;\n\t\tgoto out;\n\t}\n\n\tif (operation->operationState != TEE_OPERATION_STATE_ACTIVE) {\n\t\tres = TEE_ERROR_BAD_PARAMETERS;\n\t\tgoto out;\n\t}\n\n\tres = TEE_MACComputeFinal(operation, message, messageLen, computed_mac,\n\t\t\t\t  &computed_mac_size);\n\tif (res != TEE_SUCCESS)\n\t\tgoto out;\n\n\tif (computed_mac_size != macLen) {\n\t\tres = TEE_ERROR_MAC_INVALID;\n\t\tgoto out;\n\t}\n\n\tif (buf_compare_ct(mac, computed_mac, computed_mac_size) != 0) {\n\t\tres = TEE_ERROR_MAC_INVALID;\n\t\tgoto out;\n\t}\n\n\toperation->operationState = TEE_OPERATION_STATE_INITIAL;\n\nout:\n\tif (res != TEE_SUCCESS &&\n\t    res != TEE_ERROR_MAC_INVALID)\n\t\tTEE_Panic(res);\n\n\treturn res;\n}",
  "abstract_func_before": "TEE_Result TEE_MACCompareFinal(TEE_OperationHandle VAR_0,\n\t\t\t       const void *VAR_1, uint32_t VAR_2,\n\t\t\t       const void *VAR_3, uint32_t VAR_4)\n{\n\tTEE_Result VAR_5;\n\tuint8_t VAR_6[VAR_7];\n\tuint32_t VAR_8 = VAR_7;\n\n\tif (VAR_0->info.operationClass != VAR_9) {\n\t\tVAR_5 = VAR_10;\n\t\tgoto out;\n\t}\n\n\tif ((VAR_0->info.handleState & VAR_11) == 0) {\n\t\tVAR_5 = VAR_10;\n\t\tgoto out;\n\t}\n\n\tif (VAR_0->operationState != VAR_12) {\n\t\tVAR_5 = VAR_10;\n\t\tgoto out;\n\t}\n\n\tVAR_5 = TEE_MACComputeFinal(VAR_0, VAR_1, VAR_2, VAR_6,\n\t\t\t\t  &VAR_8);\n\tif (VAR_5 != VAR_13)\n\t\tgoto out;\n\n\tif (VAR_8 != VAR_4) {\n\t\tVAR_5 = VAR_14;\n\t\tgoto out;\n\t}\n\n\tif (buf_compare_ct(VAR_3, VAR_6, VAR_8) != 0) {\n\t\tVAR_5 = VAR_14;\n\t\tgoto out;\n\t}\n\n\tVAR_0->operationState = VAR_15;\n\nout:\n\tif (VAR_5 != VAR_13 &&\n\t    VAR_5 != VAR_14)\n\t\tTEE_Panic(VAR_5);\n\n\treturn VAR_5;\n}",
  "func_graph_path_before": "Samsung/mTower/3c1a0d5d4aa2be44d119ad00bc579f49b8547968/tee_api_operations.c/vul/before/0.json",
  "func": "TEE_Result TEE_MACCompareFinal(TEE_OperationHandle operation,\n\t\t\t       const void *message, uint32_t messageLen,\n\t\t\t       const void *mac, uint32_t macLen)\n{\n\tTEE_Result res;\n\tuint8_t computed_mac[TEE_MAX_HASH_SIZE];\n\tuint32_t computed_mac_size = TEE_MAX_HASH_SIZE;\n\n\tif (operation == TEE_HANDLE_NULL) {\n\t\tres = TEE_ERROR_BAD_PARAMETERS;\n\t\tgoto out;\n\t}\n\n\tif (operation->info.operationClass != TEE_OPERATION_MAC) {\n\t\tres = TEE_ERROR_BAD_PARAMETERS;\n\t\tgoto out;\n\t}\n\n\tif ((operation->info.handleState & TEE_HANDLE_FLAG_INITIALIZED) == 0) {\n\t\tres = TEE_ERROR_BAD_PARAMETERS;\n\t\tgoto out;\n\t}\n\n\tif (operation->operationState != TEE_OPERATION_STATE_ACTIVE) {\n\t\tres = TEE_ERROR_BAD_PARAMETERS;\n\t\tgoto out;\n\t}\n\n\tres = TEE_MACComputeFinal(operation, message, messageLen, computed_mac,\n\t\t\t\t  &computed_mac_size);\n\tif (res != TEE_SUCCESS)\n\t\tgoto out;\n\n\tif (computed_mac_size != macLen) {\n\t\tres = TEE_ERROR_MAC_INVALID;\n\t\tgoto out;\n\t}\n\n\tif (buf_compare_ct(mac, computed_mac, computed_mac_size) != 0) {\n\t\tres = TEE_ERROR_MAC_INVALID;\n\t\tgoto out;\n\t}\n\n\toperation->operationState = TEE_OPERATION_STATE_INITIAL;\n\nout:\n\tif (res != TEE_SUCCESS &&\n\t    res != TEE_ERROR_MAC_INVALID)\n\t\tTEE_Panic(res);\n\n\treturn res;\n}",
  "abstract_func": "TEE_Result TEE_MACCompareFinal(TEE_OperationHandle VAR_0,\n\t\t\t       const void *VAR_1, uint32_t VAR_2,\n\t\t\t       const void *VAR_3, uint32_t VAR_4)\n{\n\tTEE_Result VAR_5;\n\tuint8_t VAR_6[VAR_7];\n\tuint32_t VAR_8 = VAR_7;\n\n\tif (VAR_0 == VAR_9) {\n\t\tVAR_5 = VAR_10;\n\t\tgoto out;\n\t}\n\n\tif (VAR_0->info.operationClass != VAR_11) {\n\t\tVAR_5 = VAR_10;\n\t\tgoto out;\n\t}\n\n\tif ((VAR_0->info.handleState & VAR_12) == 0) {\n\t\tVAR_5 = VAR_10;\n\t\tgoto out;\n\t}\n\n\tif (VAR_0->operationState != VAR_13) {\n\t\tVAR_5 = VAR_10;\n\t\tgoto out;\n\t}\n\n\tVAR_5 = TEE_MACComputeFinal(VAR_0, VAR_1, VAR_2, VAR_6,\n\t\t\t\t  &VAR_8);\n\tif (VAR_5 != VAR_14)\n\t\tgoto out;\n\n\tif (VAR_8 != VAR_4) {\n\t\tVAR_5 = VAR_15;\n\t\tgoto out;\n\t}\n\n\tif (buf_compare_ct(VAR_3, VAR_6, VAR_8) != 0) {\n\t\tVAR_5 = VAR_15;\n\t\tgoto out;\n\t}\n\n\tVAR_0->operationState = VAR_16;\n\nout:\n\tif (VAR_5 != VAR_14 &&\n\t    VAR_5 != VAR_15)\n\t\tTEE_Panic(VAR_5);\n\n\treturn VAR_5;\n}",
  "func_graph_path": "Samsung/mTower/3c1a0d5d4aa2be44d119ad00bc579f49b8547968/tee_api_operations.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -5,6 +5,11 @@\n \tTEE_Result res;\n \tuint8_t computed_mac[TEE_MAX_HASH_SIZE];\n \tuint32_t computed_mac_size = TEE_MAX_HASH_SIZE;\n+\n+\tif (operation == TEE_HANDLE_NULL) {\n+\t\tres = TEE_ERROR_BAD_PARAMETERS;\n+\t\tgoto out;\n+\t}\n \n \tif (operation->info.operationClass != TEE_OPERATION_MAC) {\n \t\tres = TEE_ERROR_BAD_PARAMETERS;",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "",
      "\tif (operation == TEE_HANDLE_NULL) {",
      "\t\tres = TEE_ERROR_BAD_PARAMETERS;",
      "\t\tgoto out;",
      "\t}"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/Samsung/mTower/pull/87",
  "description": {
    "pr_info": {
      "title": "Fixed CVE-2022-40759",
      "number": 87
    },
    "comment": [
      "Signed-off-by: Taras Drozdovskyi <t.drozdovsky@samsung.com>\r\n\r\n# Description\r\n\r\nPlease include a summary of the change and which issue is fixed. Please also include relevant motivation and context. List any dependencies that are required for this change.\r\n\r\nFixes #80\r\n\r\n## Type of change\r\n\r\n- [x] Bug fix (non-breaking change which fixes an issue)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)\r\n- [ ] This change requires a documentation update\r\n\r\n# Checklist:\r\n\r\n- [x] My code follows the style guidelines of this project\r\n- [x] I have performed a self-review of my own code\r\n- [ ] I have commented my code, particularly in hard-to-understand areas\r\n- [ ] I have made corresponding changes to the documentation\r\n- [x] My changes generate no new warnings\r\n- [ ] I have added tests that prove my fix is effective or that my feature works\r\n- [x] New and existing unit tests pass locally with my changes\r\n- [ ] Any dependent changes have been merged and published in downstream modules"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 1.0\n\n**Step-by-Step Explanation:**\n\n1. **Input Analysis:** The commit message references a CVE, indicating a security fix. The code diff adds a null check in a TEE function, which is critical for security.\n2. **Consistency Check:** The commit message aligns with the code change, confirming the fix's purpose.\n3. **Purpose Evaluation:** The code adds validation, preventing potential security issues from a null operation.\n4. **Security Assessment:** The patch addresses a known CVE and enhances security by preventing invalid operations.\n5. **Confidence:** High due to clear indicators and alignment between message, diff, and CVE reference.\n\n**Answer:**  \n**Final Classification:** Security Vulnerability Fix; **Confidence:** 1.0"
}