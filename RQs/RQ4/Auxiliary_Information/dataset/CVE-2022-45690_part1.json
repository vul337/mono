{
  "cve_id": "CVE-2022-45690",
  "cwe_ids": [
    "CWE-787"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
  "cvss_is_v3": true,
  "repo_name": "stleary/JSON-java",
  "commit_msg": "Add test cases for invalid input",
  "commit_hash": "7a124d857dc8da1165c87fa788e53359a317d0f7",
  "git_url": "https://github.com/stleary/JSON-java/commit/7a124d857dc8da1165c87fa788e53359a317d0f7",
  "file_path": "src/main/java/org/json/JSONTokener.java",
  "func_name": "nextValue",
  "func_before": "public Object nextValue() throws JSONException {\n        char c = this.nextClean();\n        String string;\n\n        switch (c) {\n        case '\"':\n        case '\\'':\n            return this.nextString(c);\n        case '{':\n            this.back();\n            return new JSONObject(this);\n        case '[':\n            this.back();\n            return new JSONArray(this);\n        }\n\n        /*\n         * Handle unquoted text. This could be the values true, false, or\n         * null, or it can be a number. An implementation (such as this one)\n         * is allowed to also accept non-standard forms.\n         *\n         * Accumulate characters until we reach the end of the text or a\n         * formatting character.\n         */\n\n        StringBuilder sb = new StringBuilder();\n        while (c >= ' ' && \",:]}/\\\\\\\"[{;=#\".indexOf(c) < 0) {\n            sb.append(c);\n            c = this.next();\n        }\n        if (!this.eof) {\n            this.back();\n        }\n\n        string = sb.toString().trim();\n        if (\"\".equals(string)) {\n            throw this.syntaxError(\"Missing value\");\n        }\n        return JSONObject.stringToValue(string);\n    }",
  "abstract_func_before": "public Object nextValue() throws JSONException {\n        char VAR_0 = this.nextClean();\n        String VAR_1;\n\n        switch (VAR_0) {\n        case '\"':\n        case '\\'':\n            return this.nextString(VAR_0);\n        case '{':\n            this.back();\n            return new JSONObject(this);\n        case '[':\n            this.back();\n            return new JSONArray(this);\n        }\n\n        /* COMMENT_0 */\n                                                                         \n                                                                            \n                                                        \n          \n                                                                        \n                                \n           \n\n        StringBuilder VAR_2 = new StringBuilder();\n        while (VAR_0 >= ' ' && \",:]}/\\\\\\\"[{;=#\".indexOf(VAR_0) < 0) {\n            VAR_2.append(VAR_0);\n            VAR_0 = this.next();\n        }\n        if (!this.eof) {\n            this.back();\n        }\n\n        VAR_1 = VAR_2.toString().trim();\n        if (\"\".equals(VAR_1)) {\n            throw this.syntaxError(\"Missing value\");\n        }\n        return VAR_3.stringToValue(VAR_1);\n    }",
  "func_graph_path_before": "stleary/JSON-java/7a124d857dc8da1165c87fa788e53359a317d0f7/JSONTokener.java/vul/before/0.json",
  "func": "public Object nextValue() throws JSONException {\n        char c = this.nextClean();\n        String string;\n\n        switch (c) {\n        case '\"':\n        case '\\'':\n            return this.nextString(c);\n        case '{':\n            this.back();\n            try {\n                return new JSONObject(this);\n            } catch (StackOverflowError e) {\n                throw new JSONException(\"JSON Array or Object depth too large to process.\", e);\n            }\n        case '[':\n            this.back();\n            try {\n                return new JSONArray(this);\n            } catch (StackOverflowError e) {\n                throw new JSONException(\"JSON Array or Object depth too large to process.\", e);\n            }\n        }\n\n        /*\n         * Handle unquoted text. This could be the values true, false, or\n         * null, or it can be a number. An implementation (such as this one)\n         * is allowed to also accept non-standard forms.\n         *\n         * Accumulate characters until we reach the end of the text or a\n         * formatting character.\n         */\n\n        StringBuilder sb = new StringBuilder();\n        while (c >= ' ' && \",:]}/\\\\\\\"[{;=#\".indexOf(c) < 0) {\n            sb.append(c);\n            c = this.next();\n        }\n        if (!this.eof) {\n            this.back();\n        }\n\n        string = sb.toString().trim();\n        if (\"\".equals(string)) {\n            throw this.syntaxError(\"Missing value\");\n        }\n        return JSONObject.stringToValue(string);\n    }",
  "abstract_func": "public Object nextValue() throws JSONException {\n        char VAR_0 = this.nextClean();\n        String VAR_1;\n\n        switch (VAR_0) {\n        case '\"':\n        case '\\'':\n            return this.nextString(VAR_0);\n        case '{':\n            this.back();\n            try {\n                return new JSONObject(this);\n            } catch (StackOverflowError VAR_2) {\n                throw new JSONException(\"JSON Array or Object depth too large to process.\", VAR_2);\n            }\n        case '[':\n            this.back();\n            try {\n                return new JSONArray(this);\n            } catch (StackOverflowError VAR_2) {\n                throw new JSONException(\"JSON Array or Object depth too large to process.\", VAR_2);\n            }\n        }\n\n        /* COMMENT_0 */\n                                                                         \n                                                                            \n                                                        \n          \n                                                                        \n                                \n           \n\n        StringBuilder VAR_3 = new StringBuilder();\n        while (VAR_0 >= ' ' && \",:]}/\\\\\\\"[{;=#\".indexOf(VAR_0) < 0) {\n            VAR_3.append(VAR_0);\n            VAR_0 = this.next();\n        }\n        if (!this.eof) {\n            this.back();\n        }\n\n        VAR_1 = VAR_3.toString().trim();\n        if (\"\".equals(VAR_1)) {\n            throw this.syntaxError(\"Missing value\");\n        }\n        return VAR_4.stringToValue(VAR_1);\n    }",
  "func_graph_path": "stleary/JSON-java/7a124d857dc8da1165c87fa788e53359a317d0f7/JSONTokener.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -8,10 +8,18 @@\n             return this.nextString(c);\n         case '{':\n             this.back();\n-            return new JSONObject(this);\n+            try {\n+                return new JSONObject(this);\n+            } catch (StackOverflowError e) {\n+                throw new JSONException(\"JSON Array or Object depth too large to process.\", e);\n+            }\n         case '[':\n             this.back();\n-            return new JSONArray(this);\n+            try {\n+                return new JSONArray(this);\n+            } catch (StackOverflowError e) {\n+                throw new JSONException(\"JSON Array or Object depth too large to process.\", e);\n+            }\n         }\n \n         /*",
  "diff_line_info": {
    "deleted_lines": [
      "            return new JSONObject(this);",
      "            return new JSONArray(this);"
    ],
    "added_lines": [
      "            try {",
      "                return new JSONObject(this);",
      "            } catch (StackOverflowError e) {",
      "                throw new JSONException(\"JSON Array or Object depth too large to process.\", e);",
      "            }",
      "            try {",
      "                return new JSONArray(this);",
      "            } catch (StackOverflowError e) {",
      "                throw new JSONException(\"JSON Array or Object depth too large to process.\", e);",
      "            }"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/stleary/JSON-java/pull/660",
  "description": {
    "pr_info": {
      "title": "Wrap StackOverflow with JSONException",
      "number": 660
    },
    "comment": [
      "Fixes #654.\r\n\r\nThis fix is mostly a mitigation in that it wraps a \"Stack Overflow\" into a \"JSON Exception\". To properly fix the issue, we would need to refactor the tokener to not be recursive and instead be iterative.\r\n\r\n**Risks**\r\n\r\nLow. Exceptions still thrown for invalid data, but StackOverflowError is now wrapped.\r\n\r\n**Changes to the API?**\r\n\r\n1. New protected method in the JSONTokener to support look-back at the previously read token.\r\n1. StackOverflowErrors are now handled and re-thrown as JSONException from the JSONTokener.\r\n1. New parsing validation that a JSONObject has keys for embedded objects\r\n\r\n**Will this require a new release?**\r\n\r\nYes\r\n\r\n**Should the documentation be updated?**\r\n\r\nPossibly.\r\n\r\n**Does it break the unit tests?**\r\n\r\nNo. New unit tests were added to reflect the issue reported and also to support new validation for JSONObject\r\n\r\n**Was any code refactored in this commit?**\r\n\r\nno\r\n\r\n**Review status**\r\n**APPROVED**",
      "Starting 3 day comment window",
      "@stleary Do you have plans to release a new version with this commit soon?",
      "This is reported as a HIGH vulnerabilitiy by dependencies tools such as JFrog Xray. I would appreciate a release for this fix as well. Thanks a lot",
      "I should be able to get it released this weekend.",
      "Release 20220320",
      "这个异常需要怎么解决呢？"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.95"
}