{
  "cve_id": "CVE-2018-20552",
  "cwe_ids": [
    "CWE-125"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "appneta/tcpreplay",
  "commit_msg": "Bug #520 Fix heap overflow on zero or 0xFFFF packet length\n\nAdd check for packets that report zero packet length. Example\nof fix:\n\n    src/tcpprep --auto=bridge --pcap=poc16-get_l2len-heapoverflow --cachefile=/dev/null\n    Warning: poc16-get_l2len-heapoverflow was captured using a snaplen of 17 bytes.  This may mean you have truncated packets.\n    safe_pcap_next ERROR: Invalid packet length in tcpprep.c:process_raw_packets() line 334: packet length=0 capture length=0",
  "commit_hash": "6b830a1640ca20528032c89a4fdd8291a4d2d8b2",
  "git_url": "https://github.com/appneta/tcpreplay/commit/6b830a1640ca20528032c89a4fdd8291a4d2d8b2",
  "file_path": "src/common/utils.c",
  "func_name": "_our_safe_pcap_next_ex",
  "func_before": "int _our_safe_pcap_next_ex(pcap_t *pcap, struct pcap_pkthdr **pkthdr,\n        const u_char **pktdata, const char *funcname,\n        const int line, const char *file)\n{\n    int res = pcap_next_ex(pcap, pkthdr, pktdata);\n\n    if (*pktdata && *pkthdr) {\n        if ((*pkthdr)->len > MAXPACKET) {\n            fprintf(stderr, \"safe_pcap_next_ex ERROR: Invalid packet length in %s:%s() line %d: %u is greater than maximum %u\\n\",\n                    file, funcname, line, (*pkthdr)->len, MAXPACKET);\n            exit(-1);\n        }\n\n        if ((*pkthdr)->len < (*pkthdr)->caplen) {\n            fprintf(stderr, \"safe_pcap_next_ex ERROR: Invalid packet length in %s:%s() line %d: packet length %u is less than capture length %u\\n\",\n                    file, funcname, line, (*pkthdr)->len, (*pkthdr)->caplen);\n            exit(-1);\n        }\n    }\n\n    return res;\n}",
  "abstract_func_before": "int _our_safe_pcap_next_ex(pcap_t *VAR_0, struct pcap_pkthdr **VAR_1,\n        const u_char **VAR_2, const char *VAR_3,\n        const int VAR_4, const char *VAR_5)\n{\n    int VAR_6 = pcap_next_ex(VAR_0, VAR_1, VAR_2);\n\n    if (*VAR_2 && *VAR_1) {\n        if ((*VAR_1)->len > VAR_7) {\n            fprintf(VAR_8, \"safe_pcap_next_ex ERROR: Invalid packet length in %s:%s() line %d: %u is greater than maximum %u\\n\",\n                    VAR_5, VAR_3, VAR_4, (*VAR_1)->len, VAR_7);\n            exit(-1);\n        }\n\n        if ((*VAR_1)->len < (*VAR_1)->caplen) {\n            fprintf(VAR_8, \"safe_pcap_next_ex ERROR: Invalid packet length in %s:%s() line %d: packet length %u is less than capture length %u\\n\",\n                    VAR_5, VAR_3, VAR_4, (*VAR_1)->len, (*VAR_1)->caplen);\n            exit(-1);\n        }\n    }\n\n    return VAR_6;\n}",
  "func_graph_path_before": "appneta/tcpreplay/6b830a1640ca20528032c89a4fdd8291a4d2d8b2/utils.c/vul/before/1.json",
  "func": "int _our_safe_pcap_next_ex(pcap_t *pcap, struct pcap_pkthdr **pkthdr,\n        const u_char **pktdata, const char *funcname,\n        const int line, const char *file)\n{\n    int res = pcap_next_ex(pcap, pkthdr, pktdata);\n\n    if (*pktdata && *pkthdr) {\n        if ((*pkthdr)->len > MAXPACKET) {\n            fprintf(stderr, \"safe_pcap_next_ex ERROR: Invalid packet length in %s:%s() line %d: %u is greater than maximum %u\\n\",\n                    file, funcname, line, (*pkthdr)->len, MAXPACKET);\n            exit(-1);\n        }\n\n        if (!(*pkthdr)->len || (*pkthdr)->len < (*pkthdr)->caplen) {\n            fprintf(stderr, \"safe_pcap_next_ex ERROR: Invalid packet length in %s:%s() line %d: packet length=%u capture length=%u\\n\",\n                    file, funcname, line, (*pkthdr)->len, (*pkthdr)->caplen);\n            exit(-1);\n        }\n    }\n\n    return res;\n}",
  "abstract_func": "int _our_safe_pcap_next_ex(pcap_t *VAR_0, struct pcap_pkthdr **VAR_1,\n        const u_char **VAR_2, const char *VAR_3,\n        const int VAR_4, const char *VAR_5)\n{\n    int VAR_6 = pcap_next_ex(VAR_0, VAR_1, VAR_2);\n\n    if (*VAR_2 && *VAR_1) {\n        if ((*VAR_1)->len > VAR_7) {\n            fprintf(VAR_8, \"safe_pcap_next_ex ERROR: Invalid packet length in %s:%s() line %d: %u is greater than maximum %u\\n\",\n                    VAR_5, VAR_3, VAR_4, (*VAR_1)->len, VAR_7);\n            exit(-1);\n        }\n\n        if (!(*VAR_1)->len || (*VAR_1)->len < (*VAR_1)->caplen) {\n            fprintf(VAR_8, \"safe_pcap_next_ex ERROR: Invalid packet length in %s:%s() line %d: packet length=%u capture length=%u\\n\",\n                    VAR_5, VAR_3, VAR_4, (*VAR_1)->len, (*VAR_1)->caplen);\n            exit(-1);\n        }\n    }\n\n    return VAR_6;\n}",
  "func_graph_path": "appneta/tcpreplay/6b830a1640ca20528032c89a4fdd8291a4d2d8b2/utils.c/vul/after/1.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -11,8 +11,8 @@\n             exit(-1);\n         }\n \n-        if ((*pkthdr)->len < (*pkthdr)->caplen) {\n-            fprintf(stderr, \"safe_pcap_next_ex ERROR: Invalid packet length in %s:%s() line %d: packet length %u is less than capture length %u\\n\",\n+        if (!(*pkthdr)->len || (*pkthdr)->len < (*pkthdr)->caplen) {\n+            fprintf(stderr, \"safe_pcap_next_ex ERROR: Invalid packet length in %s:%s() line %d: packet length=%u capture length=%u\\n\",\n                     file, funcname, line, (*pkthdr)->len, (*pkthdr)->caplen);\n             exit(-1);\n         }",
  "diff_line_info": {
    "deleted_lines": [
      "        if ((*pkthdr)->len < (*pkthdr)->caplen) {",
      "            fprintf(stderr, \"safe_pcap_next_ex ERROR: Invalid packet length in %s:%s() line %d: packet length %u is less than capture length %u\\n\","
    ],
    "added_lines": [
      "        if (!(*pkthdr)->len || (*pkthdr)->len < (*pkthdr)->caplen) {",
      "            fprintf(stderr, \"safe_pcap_next_ex ERROR: Invalid packet length in %s:%s() line %d: packet length=%u capture length=%u\\n\","
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/appneta/tcpreplay/pull/532",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/appneta/tcpreplay/pull/532: 403 Client Error: Forbidden for url: https://api.github.com/repos/appneta/tcpreplay/pulls/532",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "**Step-by-Step Explanation:**\n\n1. The commit message explicitly mentions a heap overflow vulnerability and a fix for packet length issues.\n2. The code diff introduces a check for zero-length packets, preventing heap overflow by validating input.\n3. These changes directly fix a security issue, classifying it as a security vulnerability fix.\n4. High confidence due to clear commit message, aligned code changes, and known security implications.\n\n**Final Classification:** Security Vulnerability Fix; **Confidence:** 0.95"
}