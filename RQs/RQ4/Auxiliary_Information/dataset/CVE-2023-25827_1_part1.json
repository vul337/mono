{
  "cve_id": "CVE-2023-25827",
  "cwe_ids": [
    "CWE-79"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
  "cvss_is_v3": true,
  "repo_name": "OpenTSDB/opentsdb",
  "commit_msg": "Fix for #2269 and #2267 XSS vulnerability.\nEscaping the user supplied input when outputing the HTML for the old BadRequest\nHTML handlers should help. Thanks to the reporters.\nFixes CVE-2018-13003.",
  "commit_hash": "ff02c1e95e60528275f69b31bcbf7b2ac625cea8",
  "git_url": "https://github.com/OpenTSDB/opentsdb/commit/ff02c1e95e60528275f69b31bcbf7b2ac625cea8",
  "file_path": "src/tsd/HttpQuery.java",
  "func_name": "badRequest",
  "func_before": "@Override\n  public void badRequest(final BadRequestException exception) {\n    logWarn(\"Bad Request on \" + request().getUri() + \": \" + exception.getMessage());\n    if (this.api_version > 0) {\n      // always default to the latest version of the error formatter since we\n      // need to return something\n      switch (this.api_version) {\n        case 1:\n        default:\n          sendReply(exception.getStatus(), serializer.formatErrorV1(exception));\n      }\n      return;\n    }\n    if (hasQueryStringParam(\"json\")) {\n      final StringBuilder buf = new StringBuilder(10 +\n          exception.getDetails().length());\n      buf.append(\"{\\\"err\\\":\\\"\");\n      HttpQuery.escapeJson(exception.getMessage(), buf);\n      buf.append(\"\\\"}\");\n      sendReply(HttpResponseStatus.BAD_REQUEST, buf);\n    } else {\n      sendReply(HttpResponseStatus.BAD_REQUEST,\n                makePage(\"Bad Request\", \"Looks like it's your fault this time\",\n                         \"<blockquote>\"\n                         + \"<h1>Bad Request</h1>\"\n                         + \"Sorry but your request was rejected as being\"\n                         + \" invalid.<br/><br/>\"\n                         + \"The reason provided was:<blockquote>\"\n                         + exception.getMessage()\n                         + \"</blockquote></blockquote>\"));\n    }\n  }",
  "abstract_func_before": "@Override\n  public void badRequest(final BadRequestException VAR_0) {\n    logWarn(\"Bad Request on \" + request().getUri() + \": \" + VAR_0.getMessage());\n    if (this.api_version > 0) {\n      /* COMMENT_0 */\n      /* COMMENT_1 */\n      switch (this.api_version) {\n        case 1:\n        default:\n          sendReply(VAR_0.getStatus(), VAR_1.formatErrorV1(VAR_0));\n      }\n      return;\n    }\n    if (hasQueryStringParam(\"json\")) {\n      final StringBuilder VAR_2 = new StringBuilder(10 +\n          VAR_0.getDetails().length());\n      VAR_2.append(\"{\\\"err\\\":\\\"\");\n      VAR_3.escapeJson(VAR_0.getMessage(), VAR_2);\n      VAR_2.append(\"\\\"}\");\n      sendReply(VAR_4.BAD_REQUEST, VAR_2);\n    } else {\n      sendReply(VAR_4.BAD_REQUEST,\n                makePage(\"Bad Request\", \"Looks like it's your fault this time\",\n                         \"<blockquote>\"\n                         + \"<h1>Bad Request</h1>\"\n                         + \"Sorry but your request was rejected as being\"\n                         + \" invalid.<br/><br/>\"\n                         + \"The reason provided was:<blockquote>\"\n                         + VAR_0.getMessage()\n                         + \"</blockquote></blockquote>\"));\n    }\n  }",
  "func_graph_path_before": "OpenTSDB/opentsdb/ff02c1e95e60528275f69b31bcbf7b2ac625cea8/HttpQuery.java/vul/before/0.json",
  "func": "@Override\n  public void badRequest(final BadRequestException exception) {\n    logWarn(\"Bad Request on \" + request().getUri() + \": \" + exception.getMessage());\n    if (this.api_version > 0) {\n      // always default to the latest version of the error formatter since we\n      // need to return something\n      switch (this.api_version) {\n        case 1:\n        default:\n          sendReply(exception.getStatus(), serializer.formatErrorV1(exception));\n      }\n      return;\n    }\n    if (hasQueryStringParam(\"json\")) {\n      final StringBuilder buf = new StringBuilder(10 +\n          exception.getDetails().length());\n      buf.append(\"{\\\"err\\\":\\\"\");\n      HttpQuery.escapeJson(exception.getMessage(), buf);\n      buf.append(\"\\\"}\");\n      sendReply(HttpResponseStatus.BAD_REQUEST, buf);\n    } else {\n      String response = \"\";\n      if (exception.getMessage() != null) {\n        response = HtmlEscapers.htmlEscaper().escape(exception.getMessage());\n      }\n      sendReply(HttpResponseStatus.BAD_REQUEST,\n                makePage(\"Bad Request\", \"Looks like it's your fault this time\",\n                         \"<blockquote>\"\n                         + \"<h1>Bad Request</h1>\"\n                         + \"Sorry but your request was rejected as being\"\n                         + \" invalid.<br/><br/>\"\n                         + \"The reason provided was:<blockquote>\"\n                         + response\n                         + \"</blockquote></blockquote>\"));\n    }\n  }",
  "abstract_func": "@Override\n  public void badRequest(final BadRequestException VAR_0) {\n    logWarn(\"Bad Request on \" + request().getUri() + \": \" + VAR_0.getMessage());\n    if (this.api_version > 0) {\n      /* COMMENT_0 */\n      /* COMMENT_1 */\n      switch (this.api_version) {\n        case 1:\n        default:\n          sendReply(VAR_0.getStatus(), VAR_1.formatErrorV1(VAR_0));\n      }\n      return;\n    }\n    if (hasQueryStringParam(\"json\")) {\n      final StringBuilder VAR_2 = new StringBuilder(10 +\n          VAR_0.getDetails().length());\n      VAR_2.append(\"{\\\"err\\\":\\\"\");\n      VAR_3.escapeJson(VAR_0.getMessage(), VAR_2);\n      VAR_2.append(\"\\\"}\");\n      sendReply(VAR_4.BAD_REQUEST, VAR_2);\n    } else {\n      String VAR_5 = \"\";\n      if (VAR_0.getMessage() != null) {\n        VAR_5 = VAR_6.htmlEscaper().escape(VAR_0.getMessage());\n      }\n      sendReply(VAR_4.BAD_REQUEST,\n                makePage(\"Bad Request\", \"Looks like it's your fault this time\",\n                         \"<blockquote>\"\n                         + \"<h1>Bad Request</h1>\"\n                         + \"Sorry but your request was rejected as being\"\n                         + \" invalid.<br/><br/>\"\n                         + \"The reason provided was:<blockquote>\"\n                         + VAR_5\n                         + \"</blockquote></blockquote>\"));\n    }\n  }",
  "func_graph_path": "OpenTSDB/opentsdb/ff02c1e95e60528275f69b31bcbf7b2ac625cea8/HttpQuery.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -19,6 +19,10 @@\n       buf.append(\"\\\"}\");\n       sendReply(HttpResponseStatus.BAD_REQUEST, buf);\n     } else {\n+      String response = \"\";\n+      if (exception.getMessage() != null) {\n+        response = HtmlEscapers.htmlEscaper().escape(exception.getMessage());\n+      }\n       sendReply(HttpResponseStatus.BAD_REQUEST,\n                 makePage(\"Bad Request\", \"Looks like it's your fault this time\",\n                          \"<blockquote>\"\n@@ -26,7 +30,7 @@\n                          + \"Sorry but your request was rejected as being\"\n                          + \" invalid.<br/><br/>\"\n                          + \"The reason provided was:<blockquote>\"\n-                         + exception.getMessage()\n+                         + response\n                          + \"</blockquote></blockquote>\"));\n     }\n   }",
  "diff_line_info": {
    "deleted_lines": [
      "                         + exception.getMessage()"
    ],
    "added_lines": [
      "      String response = \"\";",
      "      if (exception.getMessage() != null) {",
      "        response = HtmlEscapers.htmlEscaper().escape(exception.getMessage());",
      "      }",
      "                         + response"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/OpenTSDB/opentsdb/pull/2274",
  "description": {
    "pr_info": {
      "title": "Fix for #2269 and #2267 XSS vulnerability.",
      "number": 2274
    },
    "comment": [
      "Escaping the user supplied input when outputing the HTML for the old BadRequest HTML handlers should help. Thanks to the reporters. Fixes CVE-2018-13003."
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 1.0"
}