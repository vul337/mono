{
  "cve_id": "CVE-2023-33974",
  "cwe_ids": [
    "CWE-362"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H",
  "cvss_is_v3": true,
  "repo_name": "RIOT-OS/RIOT",
  "commit_msg": "gnrc_sixlowpan_frag_sfr: fix ARQ scheduler race-condition",
  "commit_hash": "31c6191f6196f1a05c9765cffeadba868e3b0723",
  "git_url": "https://github.com/RIOT-OS/RIOT/commit/31c6191f6196f1a05c9765cffeadba868e3b0723",
  "file_path": "sys/net/gnrc/network_layer/sixlowpan/frag/sfr/gnrc_sixlowpan_frag_sfr.c",
  "func_name": "_clean_slate_datagram",
  "func_before": "static void _clean_slate_datagram(gnrc_sixlowpan_frag_fb_t *fbuf)\n{\n    clist_node_t new_queue = { .next = NULL };\n\n    fbuf->sfr.arq_timeout_event.msg.content.ptr = NULL;\n    /* remove potentially scheduled timers for this datagram */\n    evtimer_del((evtimer_t *)(&_arq_timer),\n                &fbuf->sfr.arq_timeout_event.event);\n    fbuf->sfr.arq_timeout_event.event.next = NULL;\n    if (gnrc_sixlowpan_frag_sfr_congure_snd_has_inter_frame_gap()) {\n        for (clist_node_t *node = clist_lpop(&_frame_queue);\n             node != NULL; node = clist_lpop(&_frame_queue)) {\n            _frame_queue_t *entry = (_frame_queue_t *)node;\n            /* remove frames of this datagram from frame queue */\n            if (entry->datagram_tag == fbuf->tag) {\n                gnrc_pktbuf_release(entry->frame);\n                /* unset packet just to be safe */\n                entry->frame = NULL;\n                clist_rpush(&_frag_descs_free, node);\n            }\n            else {\n                clist_rpush(&new_queue, node);\n            }\n        }\n        /* reset frame queue with remaining frames */\n        _frame_queue = new_queue;\n    }\n    fbuf->offset = 0U;\n    fbuf->sfr.cur_seq = 0U;\n    fbuf->sfr.frags_sent = 0U;\n    for (clist_node_t *node = clist_lpop(&fbuf->sfr.window);\n         node != NULL; node = clist_lpop(&fbuf->sfr.window)) {\n        clist_rpush(&_frag_descs_free, node);\n    }\n}",
  "abstract_func_before": "static void _clean_slate_datagram(gnrc_sixlowpan_frag_fb_t *VAR_0)\n{\n    clist_node_t VAR_1 = { .next = NULL };\n\n    VAR_0->sfr.arq_timeout_event.msg.content.ptr = NULL;\n    /* COMMENT_0 */\n    evtimer_del((evtimer_t *)(&VAR_2),\n                &VAR_0->sfr.arq_timeout_event.event);\n    VAR_0->sfr.arq_timeout_event.event.next = NULL;\n    if (gnrc_sixlowpan_frag_sfr_congure_snd_has_inter_frame_gap()) {\n        for (clist_node_t *VAR_3 = clist_lpop(&VAR_4);\n             VAR_3 != NULL; VAR_3 = clist_lpop(&VAR_4)) {\n            _frame_queue_t *VAR_5 = (_frame_queue_t *)VAR_3;\n            /* COMMENT_1 */\n            if (VAR_5->datagram_tag == VAR_0->tag) {\n                gnrc_pktbuf_release(VAR_5->frame);\n                /* COMMENT_2 */\n                VAR_5->frame = NULL;\n                clist_rpush(&VAR_6, VAR_3);\n            }\n            else {\n                clist_rpush(&VAR_1, VAR_3);\n            }\n        }\n        /* COMMENT_3 */\n        VAR_4 = VAR_1;\n    }\n    VAR_0->offset = 0U;\n    VAR_0->sfr.cur_seq = 0U;\n    VAR_0->sfr.frags_sent = 0U;\n    for (clist_node_t *VAR_3 = clist_lpop(&VAR_0->sfr.window);\n         VAR_3 != NULL; VAR_3 = clist_lpop(&VAR_0->sfr.window)) {\n        clist_rpush(&VAR_6, VAR_3);\n    }\n}",
  "func_graph_path_before": "RIOT-OS/RIOT/31c6191f6196f1a05c9765cffeadba868e3b0723/gnrc_sixlowpan_frag_sfr.c/vul/before/3.json",
  "func": "static void _clean_slate_datagram(gnrc_sixlowpan_frag_fb_t *fbuf)\n{\n    clist_node_t new_queue = { .next = NULL };\n\n    fbuf->sfr.arq_timeout_event.msg.content.ptr = NULL;\n    /* remove potentially scheduled timers for this datagram */\n    evtimer_del((evtimer_t *)(&_arq_timer),\n                &fbuf->sfr.arq_timeout_event.event);\n    if (gnrc_sixlowpan_frag_sfr_congure_snd_has_inter_frame_gap()) {\n        for (clist_node_t *node = clist_lpop(&_frame_queue);\n             node != NULL; node = clist_lpop(&_frame_queue)) {\n            _frame_queue_t *entry = (_frame_queue_t *)node;\n            /* remove frames of this datagram from frame queue */\n            if (entry->datagram_tag == fbuf->tag) {\n                gnrc_pktbuf_release(entry->frame);\n                /* unset packet just to be safe */\n                entry->frame = NULL;\n                clist_rpush(&_frag_descs_free, node);\n            }\n            else {\n                clist_rpush(&new_queue, node);\n            }\n        }\n        /* reset frame queue with remaining frames */\n        _frame_queue = new_queue;\n    }\n    fbuf->offset = 0U;\n    fbuf->sfr.cur_seq = 0U;\n    fbuf->sfr.frags_sent = 0U;\n    for (clist_node_t *node = clist_lpop(&fbuf->sfr.window);\n         node != NULL; node = clist_lpop(&fbuf->sfr.window)) {\n        clist_rpush(&_frag_descs_free, node);\n    }\n}",
  "abstract_func": "static void _clean_slate_datagram(gnrc_sixlowpan_frag_fb_t *VAR_0)\n{\n    clist_node_t VAR_1 = { .next = NULL };\n\n    VAR_0->sfr.arq_timeout_event.msg.content.ptr = NULL;\n    /* COMMENT_0 */\n    evtimer_del((evtimer_t *)(&VAR_2),\n                &VAR_0->sfr.arq_timeout_event.event);\n    if (gnrc_sixlowpan_frag_sfr_congure_snd_has_inter_frame_gap()) {\n        for (clist_node_t *VAR_3 = clist_lpop(&VAR_4);\n             VAR_3 != NULL; VAR_3 = clist_lpop(&VAR_4)) {\n            _frame_queue_t *VAR_5 = (_frame_queue_t *)VAR_3;\n            /* COMMENT_1 */\n            if (VAR_5->datagram_tag == VAR_0->tag) {\n                gnrc_pktbuf_release(VAR_5->frame);\n                /* COMMENT_2 */\n                VAR_5->frame = NULL;\n                clist_rpush(&VAR_6, VAR_3);\n            }\n            else {\n                clist_rpush(&VAR_1, VAR_3);\n            }\n        }\n        /* COMMENT_3 */\n        VAR_4 = VAR_1;\n    }\n    VAR_0->offset = 0U;\n    VAR_0->sfr.cur_seq = 0U;\n    VAR_0->sfr.frags_sent = 0U;\n    for (clist_node_t *VAR_3 = clist_lpop(&VAR_0->sfr.window);\n         VAR_3 != NULL; VAR_3 = clist_lpop(&VAR_0->sfr.window)) {\n        clist_rpush(&VAR_6, VAR_3);\n    }\n}",
  "func_graph_path": "RIOT-OS/RIOT/31c6191f6196f1a05c9765cffeadba868e3b0723/gnrc_sixlowpan_frag_sfr.c/vul/after/3.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -6,7 +6,6 @@\n     /* remove potentially scheduled timers for this datagram */\n     evtimer_del((evtimer_t *)(&_arq_timer),\n                 &fbuf->sfr.arq_timeout_event.event);\n-    fbuf->sfr.arq_timeout_event.event.next = NULL;\n     if (gnrc_sixlowpan_frag_sfr_congure_snd_has_inter_frame_gap()) {\n         for (clist_node_t *node = clist_lpop(&_frame_queue);\n              node != NULL; node = clist_lpop(&_frame_queue)) {",
  "diff_line_info": {
    "deleted_lines": [
      "    fbuf->sfr.arq_timeout_event.event.next = NULL;"
    ],
    "added_lines": []
  },
  "is_vul": true,
  "pr_url": "https://github.com/RIOT-OS/RIOT/pull/19679",
  "description": {
    "pr_info": {
      "title": "gnrc_sixlowpan_frag_sfr: fix ARQ scheduler race-condition",
      "number": 19679
    },
    "comment": [
      "<!--\r\nThe RIOT community cares a lot about code quality.\r\nTherefore, before describing what your contribution is about, we would like\r\nyou to make sure that your modifications are compliant with the RIOT\r\ncoding conventions, see https://github.com/RIOT-OS/RIOT/blob/master/CODING_CONVENTIONS.md.\r\n-->\r\n\r\n### Contribution description\r\nSee https://github.com/RIOT-OS/RIOT/security/advisories/GHSA-8m3w-mphf-wxm8\r\n<!--\r\nPut here the description of your contribution:\r\n- describe which part(s) of RIOT is (are) involved\r\n- if it's a bug fix, describe the bug that it solves and how it is solved\r\n- you can also give more information to reviewers about how to test your changes\r\n-->\r\n\r\n\r\n### Testing procedure\r\n\r\n<!--\r\nDetails steps to test your contribution:\r\n- which test/example to compile for which board and is there a 'test' command\r\n- how to know that it was not working/available in master\r\n- the expected success test output\r\n-->\r\n\r\n\r\n### Issues/PRs references\r\n\r\n<!--\r\nExamples: Fixes #1234. See also #5678. Depends on PR #9876.\r\n\r\nPlease use keywords (e.g., fixes, resolve) with the links to the issues you\r\nresolved, this way they will be automatically closed when your pull request\r\nis merged. See https://help.github.com/articles/closing-issues-using-keywords/.\r\n-->\r\n",
      "### Murdock results\n\n:heavy_check_mark: [PASSED](https://ci.riot-os.org/details/4713913fc6d1414691da03713dbc1baa)\n\n31c6191f6196f1a05c9765cffeadba868e3b0723 gnrc_sixlowpan_frag_sfr: fix ARQ scheduler race-condition\n\n|  Success  |  Failures  |  Total  |  Runtime  |\n| :-------: | :--------: | :-----: | :-------: |\n| 6933 | 0 | 6933 | 16m:54s |\n\n\n#### Artifacts\n- [Documentation preview](https://ci.riot-os.org/results/4713913fc6d1414691da03713dbc1baa/doc-preview/)\n",
      "> ### Murdock results\r\n> \r\n> :x: [FAILED](https://ci.riot-os.org/details/8bc8678a27694e7c887b6764198f0a9b)\r\n> \r\n> 7c28616910892d2af21d7ef8c28ff9a60b4ea941 gnrc_sixlowpan_frag_sfr: fix ARQ scheduler race-condition\r\n> \r\n> |  Success  |  Failures  |  Total  |  Runtime  |\r\n> | :-------: | :--------: | :-----: | :-------: |\r\n> | 4235 | 0 | 6933 | 06m:11s |\r\n> \r\n> \r\n> #### Artifacts\r\n> \r\n\r\nSomeone forgot to mention the failures? (/cc @aabadie)",
      "bors merge",
      "This PR was included in a batch that was canceled, it will be automatically retried",
      "  Build succeeded!\n\n  The publicly hosted instance of bors-ng is deprecated and will go away soon.\n\n  If you want to self-host your own instance, [instructions are here][instructions].\n  For more help, visit [the forum].\n\n  If you want to switch to GitHub's built-in merge queue, visit [their help page][gh].\n\n  [instructions]: https://github.com/bors-ng/bors-ng#how-to-set-up-your-own-real-instance\n  [the forum]: https://forum.bors.tech\n  [gh]: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue\n\n\n\n  * [Murdock](https://ci.riot-os.org/details/fb540a7fea3d482dbf15b594aaf08a39)\n  * [static-tests](https://github.com/RIOT-OS/RIOT/actions/runs/5124347194/jobs/9216073113)\n  * [tools-build-success](https://github.com/RIOT-OS/RIOT/actions/runs/5124347197/jobs/9216103309)"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.95"
}