{
  "cve_id": "CVE-2018-1281",
  "cwe_ids": [
    "CWE-200"
  ],
  "cvss_vector": "AV:N/AC:L/Au:S/C:P/I:N/A:N",
  "cvss_is_v3": false,
  "repo_name": "dmlc/ps-lite",
  "commit_msg": "Avoid listening on all interfaces by default",
  "commit_hash": "4be817e8b03e7e92517e91f2dfcc50865e91c6ea",
  "git_url": "https://github.com/dmlc/ps-lite/commit/4be817e8b03e7e92517e91f2dfcc50865e91c6ea",
  "file_path": "src/zmq_van.h",
  "func_name": "Bind",
  "func_before": "int Bind(const Node& node, int max_retry) override {\n    receiver_ = zmq_socket(context_, ZMQ_ROUTER);\n    CHECK(receiver_ != NULL)\n        << \"create receiver socket failed: \" << zmq_strerror(errno);\n    int local = GetEnv(\"DMLC_LOCAL\", 0);\n    std::string addr = local ? \"ipc:///tmp/\" : \"tcp://*:\";\n    int port = node.port;\n    unsigned seed = static_cast<unsigned>(time(NULL)+port);\n    for (int i = 0; i < max_retry+1; ++i) {\n      auto address = addr + std::to_string(port);\n      if (zmq_bind(receiver_, address.c_str()) == 0) break;\n      if (i == max_retry) {\n        port = -1;\n      } else {\n        port = 10000 + rand_r(&seed) % 40000;\n      }\n    }\n    return port;\n  }",
  "abstract_func_before": "int Bind(const Node& VAR_0, int VAR_1) override {\n    VAR_2 = zmq_socket(VAR_3, VAR_4);\n    CHECK(VAR_2 != NULL)\n        << \"create receiver socket failed: \" << zmq_strerror(VAR_5);\n    int VAR_6 = GetEnv(\"DMLC_LOCAL\", 0);\n    std::string VAR_7 = VAR_6 ? \"ipc:///tmp/\" : \"tcp://*:\";\n    int VAR_8 = VAR_0.port;\n    unsigned VAR_9 = VAR_10<unsigned>(time(NULL)+VAR_8);\n    for (int VAR_11 = 0; VAR_11 < VAR_1+1; ++VAR_11) {\n      auto VAR_12 = VAR_7 + std::to_string(VAR_8);\n      if (zmq_bind(VAR_2, VAR_12.c_str()) == 0) break;\n      if (VAR_11 == VAR_1) {\n        VAR_8 = -1;\n      } else {\n        VAR_8 = 10000 + rand_r(&VAR_9) % 40000;\n      }\n    }\n    return VAR_8;\n  }",
  "func_graph_path_before": null,
  "func": "int Bind(const Node& node, int max_retry) override {\n    receiver_ = zmq_socket(context_, ZMQ_ROUTER);\n    CHECK(receiver_ != NULL)\n        << \"create receiver socket failed: \" << zmq_strerror(errno);\n    int local = GetEnv(\"DMLC_LOCAL\", 0);\n    std::string hostname = node.hostname.empty() ? \"*\" : node.hostname;\n    std::string addr = local ? \"ipc:///tmp/\" : \"tcp://\" + hostname + \":\";\n    int port = node.port;\n    unsigned seed = static_cast<unsigned>(time(NULL)+port);\n    for (int i = 0; i < max_retry+1; ++i) {\n      auto address = addr + std::to_string(port);\n      if (zmq_bind(receiver_, address.c_str()) == 0) break;\n      if (i == max_retry) {\n        port = -1;\n      } else {\n        port = 10000 + rand_r(&seed) % 40000;\n      }\n    }\n    return port;\n  }",
  "abstract_func": "int Bind(const Node& VAR_0, int VAR_1) override {\n    VAR_2 = zmq_socket(VAR_3, VAR_4);\n    CHECK(VAR_2 != NULL)\n        << \"create receiver socket failed: \" << zmq_strerror(VAR_5);\n    int VAR_6 = GetEnv(\"DMLC_LOCAL\", 0);\n    std::string VAR_7 = VAR_0.hostname.empty() ? \"*\" : VAR_0.hostname;\n    std::string VAR_8 = VAR_6 ? \"ipc:///tmp/\" : \"tcp://\" + VAR_7 + \":\";\n    int VAR_9 = VAR_0.port;\n    unsigned VAR_10 = VAR_11<unsigned>(time(NULL)+VAR_9);\n    for (int VAR_12 = 0; VAR_12 < VAR_1+1; ++VAR_12) {\n      auto VAR_13 = VAR_8 + std::to_string(VAR_9);\n      if (zmq_bind(VAR_2, VAR_13.c_str()) == 0) break;\n      if (VAR_12 == VAR_1) {\n        VAR_9 = -1;\n      } else {\n        VAR_9 = 10000 + rand_r(&VAR_10) % 40000;\n      }\n    }\n    return VAR_9;\n  }",
  "func_graph_path": null,
  "diff_func": "--- func_before\n+++ func_after\n@@ -3,7 +3,8 @@\n     CHECK(receiver_ != NULL)\n         << \"create receiver socket failed: \" << zmq_strerror(errno);\n     int local = GetEnv(\"DMLC_LOCAL\", 0);\n-    std::string addr = local ? \"ipc:///tmp/\" : \"tcp://*:\";\n+    std::string hostname = node.hostname.empty() ? \"*\" : node.hostname;\n+    std::string addr = local ? \"ipc:///tmp/\" : \"tcp://\" + hostname + \":\";\n     int port = node.port;\n     unsigned seed = static_cast<unsigned>(time(NULL)+port);\n     for (int i = 0; i < max_retry+1; ++i) {",
  "diff_line_info": {
    "deleted_lines": [
      "    std::string addr = local ? \"ipc:///tmp/\" : \"tcp://*:\";"
    ],
    "added_lines": [
      "    std::string hostname = node.hostname.empty() ? \"*\" : node.hostname;",
      "    std::string addr = local ? \"ipc:///tmp/\" : \"tcp://\" + hostname + \":\";"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/dmlc/ps-lite/pull/117",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/dmlc/ps-lite/pull/117: 403 Client Error: Forbidden for url: https://api.github.com/repos/dmlc/ps-lite/pulls/117",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 1.0"
}