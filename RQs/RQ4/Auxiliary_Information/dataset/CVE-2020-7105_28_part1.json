{
  "cve_id": "CVE-2020-7105",
  "cwe_ids": [
    "CWE-476"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "redis/hiredis",
  "commit_msg": "Safe allocation wrappers (#754)\n\nCreate allocation wrappers with a configurable OOM handler (defaults to abort()).\r\n\r\nSee #752, #747",
  "commit_hash": "669ac9d0c843f9ccf07d4969ff6bff75fafee01f",
  "git_url": "https://github.com/redis/hiredis/commit/669ac9d0c843f9ccf07d4969ff6bff75fafee01f",
  "file_path": "adapters/libev.h",
  "func_name": "redisLibevAttach",
  "func_before": "static int redisLibevAttach(EV_P_ redisAsyncContext *ac) {\n    redisContext *c = &(ac->c);\n    redisLibevEvents *e;\n\n    /* Nothing should be attached when something is already attached */\n    if (ac->ev.data != NULL)\n        return REDIS_ERR;\n\n    /* Create container for context and r/w events */\n    e = (redisLibevEvents*)malloc(sizeof(*e));\n    e->context = ac;\n#if EV_MULTIPLICITY\n    e->loop = loop;\n#else\n    e->loop = NULL;\n#endif\n    e->reading = e->writing = 0;\n    e->rev.data = e;\n    e->wev.data = e;\n\n    /* Register functions to start/stop listening for events */\n    ac->ev.addRead = redisLibevAddRead;\n    ac->ev.delRead = redisLibevDelRead;\n    ac->ev.addWrite = redisLibevAddWrite;\n    ac->ev.delWrite = redisLibevDelWrite;\n    ac->ev.cleanup = redisLibevCleanup;\n    ac->ev.data = e;\n\n    /* Initialize read/write events */\n    ev_io_init(&e->rev,redisLibevReadEvent,c->fd,EV_READ);\n    ev_io_init(&e->wev,redisLibevWriteEvent,c->fd,EV_WRITE);\n    return REDIS_OK;\n}",
  "abstract_func_before": "static int redisLibevAttach(EV_P_ VAR_0 *VAR_1) {\n    redisContext *VAR_2 = &(VAR_1->c);\n    redisLibevEvents *VAR_3;\n\n    /* COMMENT_0 */\n    if (VAR_1->ev.data != NULL)\n        return VAR_4;\n\n    /* COMMENT_1 */\n    VAR_3 = (redisLibevEvents*)malloc(sizeof(*VAR_3));\n    VAR_3->context = VAR_1;\n#if VAR_5\n    VAR_3->loop = VAR_6;\n#else\n    VAR_3->loop = NULL;\n#endif\n    VAR_3->reading = VAR_3->writing = 0;\n    VAR_3->rev.data = VAR_3;\n    VAR_3->wev.data = VAR_3;\n\n    /* COMMENT_2 */\n    VAR_1->ev.addRead = VAR_7;\n    VAR_1->ev.delRead = VAR_8;\n    VAR_1->ev.addWrite = VAR_9;\n    VAR_1->ev.delWrite = VAR_10;\n    VAR_1->ev.cleanup = VAR_11;\n    VAR_1->ev.data = VAR_3;\n\n    /* COMMENT_3 */\n    ev_io_init(&VAR_3->rev,VAR_12,VAR_2->fd,VAR_13);\n    ev_io_init(&VAR_3->wev,VAR_14,VAR_2->fd,VAR_15);\n    return VAR_16;\n}",
  "func_graph_path_before": null,
  "func": "static int redisLibevAttach(EV_P_ redisAsyncContext *ac) {\n    redisContext *c = &(ac->c);\n    redisLibevEvents *e;\n\n    /* Nothing should be attached when something is already attached */\n    if (ac->ev.data != NULL)\n        return REDIS_ERR;\n\n    /* Create container for context and r/w events */\n    e = (redisLibevEvents*)hi_malloc(sizeof(*e));\n    e->context = ac;\n#if EV_MULTIPLICITY\n    e->loop = loop;\n#else\n    e->loop = NULL;\n#endif\n    e->reading = e->writing = 0;\n    e->rev.data = e;\n    e->wev.data = e;\n\n    /* Register functions to start/stop listening for events */\n    ac->ev.addRead = redisLibevAddRead;\n    ac->ev.delRead = redisLibevDelRead;\n    ac->ev.addWrite = redisLibevAddWrite;\n    ac->ev.delWrite = redisLibevDelWrite;\n    ac->ev.cleanup = redisLibevCleanup;\n    ac->ev.data = e;\n\n    /* Initialize read/write events */\n    ev_io_init(&e->rev,redisLibevReadEvent,c->fd,EV_READ);\n    ev_io_init(&e->wev,redisLibevWriteEvent,c->fd,EV_WRITE);\n    return REDIS_OK;\n}",
  "abstract_func": "static int redisLibevAttach(EV_P_ VAR_0 *VAR_1) {\n    redisContext *VAR_2 = &(VAR_1->c);\n    redisLibevEvents *VAR_3;\n\n    /* COMMENT_0 */\n    if (VAR_1->ev.data != NULL)\n        return VAR_4;\n\n    /* COMMENT_1 */\n    VAR_3 = (redisLibevEvents*)hi_malloc(sizeof(*VAR_3));\n    VAR_3->context = VAR_1;\n#if VAR_5\n    VAR_3->loop = VAR_6;\n#else\n    VAR_3->loop = NULL;\n#endif\n    VAR_3->reading = VAR_3->writing = 0;\n    VAR_3->rev.data = VAR_3;\n    VAR_3->wev.data = VAR_3;\n\n    /* COMMENT_2 */\n    VAR_1->ev.addRead = VAR_7;\n    VAR_1->ev.delRead = VAR_8;\n    VAR_1->ev.addWrite = VAR_9;\n    VAR_1->ev.delWrite = VAR_10;\n    VAR_1->ev.cleanup = VAR_11;\n    VAR_1->ev.data = VAR_3;\n\n    /* COMMENT_3 */\n    ev_io_init(&VAR_3->rev,VAR_12,VAR_2->fd,VAR_13);\n    ev_io_init(&VAR_3->wev,VAR_14,VAR_2->fd,VAR_15);\n    return VAR_16;\n}",
  "func_graph_path": null,
  "diff_func": "--- func_before\n+++ func_after\n@@ -7,7 +7,7 @@\n         return REDIS_ERR;\n \n     /* Create container for context and r/w events */\n-    e = (redisLibevEvents*)malloc(sizeof(*e));\n+    e = (redisLibevEvents*)hi_malloc(sizeof(*e));\n     e->context = ac;\n #if EV_MULTIPLICITY\n     e->loop = loop;",
  "diff_line_info": {
    "deleted_lines": [
      "    e = (redisLibevEvents*)malloc(sizeof(*e));"
    ],
    "added_lines": [
      "    e = (redisLibevEvents*)hi_malloc(sizeof(*e));"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/redis/hiredis/pull/754",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/redis/hiredis/pull/754: 403 Client Error: Forbidden for url: https://api.github.com/repos/redis/hiredis/pulls/754",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 0.95"
}