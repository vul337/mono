{
  "cve_id": "CVE-2021-33604",
  "cwe_ids": [
    "CWE-172"
  ],
  "cvss_vector": "AV:L/AC:H/Au:N/C:P/I:N/A:N",
  "cvss_is_v3": false,
  "repo_name": "vaadin/flow",
  "commit_msg": "fix: prevent passing bad character to dev-server\n\nThe webpack dev-server does not escape \" character, as it is not valid\nURL. This limitation was not checked when passing request to it via\nDevModeHandlerImpl.",
  "commit_hash": "2a801c42b406a00c44f4a85b4b4e4a4c5bf89adc",
  "git_url": "https://github.com/vaadin/flow/commit/2a801c42b406a00c44f4a85b4b4e4a4c5bf89adc",
  "file_path": "vaadin-dev-server/src/main/java/com/vaadin/base/devserver/DevModeHandlerImpl.java",
  "func_name": "prepareConnection",
  "func_before": "@Override\n    public HttpURLConnection prepareConnection(String path, String method)\n            throws IOException {\n        URL uri = new URL(WEBPACK_HOST + \":\" + getPort() + path);\n        HttpURLConnection connection = (HttpURLConnection) uri.openConnection();\n        connection.setRequestMethod(method);\n        connection.setReadTimeout(DEFAULT_TIMEOUT);\n        connection.setConnectTimeout(DEFAULT_TIMEOUT);\n        return connection;\n    }",
  "abstract_func_before": "@Override\n    public HttpURLConnection prepareConnection(String VAR_0, String VAR_1)\n            throws IOException {\n        URL VAR_2 = new URL(VAR_3 + \":\" + getPort() + VAR_0);\n        HttpURLConnection VAR_4 = (HttpURLConnection) VAR_2.openConnection();\n        VAR_4.setRequestMethod(VAR_1);\n        VAR_4.setReadTimeout(VAR_5);\n        VAR_4.setConnectTimeout(VAR_5);\n        return VAR_4;\n    }",
  "func_graph_path_before": "vaadin/flow/2a801c42b406a00c44f4a85b4b4e4a4c5bf89adc/DevModeHandlerImpl.java/vul/before/0.json",
  "func": "@Override\n    public HttpURLConnection prepareConnection(String path, String method)\n            throws IOException {\n        // path should have been checked at this point for any outside requests\n        URL uri = new URL(WEBPACK_HOST + \":\" + getPort() + path);\n        HttpURLConnection connection = (HttpURLConnection) uri.openConnection();\n        connection.setRequestMethod(method);\n        connection.setReadTimeout(DEFAULT_TIMEOUT);\n        connection.setConnectTimeout(DEFAULT_TIMEOUT);\n        return connection;\n    }",
  "abstract_func": "@Override\n    public HttpURLConnection prepareConnection(String VAR_0, String VAR_1)\n            throws IOException {\n        /* COMMENT_0 */\n        URL VAR_2 = new URL(VAR_3 + \":\" + getPort() + VAR_0);\n        HttpURLConnection VAR_4 = (HttpURLConnection) VAR_2.openConnection();\n        VAR_4.setRequestMethod(VAR_1);\n        VAR_4.setReadTimeout(VAR_5);\n        VAR_4.setConnectTimeout(VAR_5);\n        return VAR_4;\n    }",
  "func_graph_path": "vaadin/flow/2a801c42b406a00c44f4a85b4b4e4a4c5bf89adc/DevModeHandlerImpl.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,6 +1,7 @@\n @Override\n     public HttpURLConnection prepareConnection(String path, String method)\n             throws IOException {\n+        // path should have been checked at this point for any outside requests\n         URL uri = new URL(WEBPACK_HOST + \":\" + getPort() + path);\n         HttpURLConnection connection = (HttpURLConnection) uri.openConnection();\n         connection.setRequestMethod(method);",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "        // path should have been checked at this point for any outside requests"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/vaadin/flow/pull/11099",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/vaadin/flow/pull/11099: 403 Client Error: Forbidden for url: https://api.github.com/repos/vaadin/flow/pulls/11099",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.9"
}