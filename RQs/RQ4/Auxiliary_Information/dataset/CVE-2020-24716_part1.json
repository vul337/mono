{
  "cve_id": "CVE-2020-24716",
  "cwe_ids": [
    "CWE-863",
    "CWE-276"
  ],
  "cvss_vector": "AV:L/AC:L/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "openzfs/zfs",
  "commit_msg": "FreeBSD: Fix UNIX permissions checking\n\nReviewed-by: Ryan Moeller <ryan@iXsystems.com>\r\nReviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>\r\nSigned-off-by: Matt Macy <mmacy@FreeBSD.org>\r\nCloses #10727",
  "commit_hash": "716b53d0a14c72bda16c0872565dd1909757e73f",
  "git_url": "https://github.com/openzfs/zfs/commit/716b53d0a14c72bda16c0872565dd1909757e73f",
  "file_path": "module/zfs/zfs_fuid.c",
  "func_name": "zfs_groupmember",
  "func_before": "boolean_t\nzfs_groupmember(zfsvfs_t *zfsvfs, uint64_t id, cred_t *cr)\n{\n#ifdef HAVE_KSID\n\tksid_t\t\t*ksid = crgetsid(cr, KSID_GROUP);\n\tksidlist_t\t*ksidlist = crgetsidlist(cr);\n\tuid_t\t\tgid;\n\n\tif (ksid && ksidlist) {\n\t\tint\t\ti;\n\t\tksid_t\t\t*ksid_groups;\n\t\tuint32_t\tidx = FUID_INDEX(id);\n\t\tuint32_t\trid = FUID_RID(id);\n\n\t\tksid_groups = ksidlist->ksl_sids;\n\n\t\tfor (i = 0; i != ksidlist->ksl_nsid; i++) {\n\t\t\tif (idx == 0) {\n\t\t\t\tif (id != IDMAP_WK_CREATOR_GROUP_GID &&\n\t\t\t\t    id == ksid_groups[i].ks_id) {\n\t\t\t\t\treturn (B_TRUE);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst char *domain;\n\n\t\t\t\tdomain = zfs_fuid_find_by_idx(zfsvfs, idx);\n\t\t\t\tASSERT(domain != NULL);\n\n\t\t\t\tif (strcmp(domain,\n\t\t\t\t    IDMAP_WK_CREATOR_SID_AUTHORITY) == 0)\n\t\t\t\t\treturn (B_FALSE);\n\n\t\t\t\tif ((strcmp(domain,\n\t\t\t\t    ksid_groups[i].ks_domain->kd_name) == 0) &&\n\t\t\t\t    rid == ksid_groups[i].ks_rid)\n\t\t\t\t\treturn (B_TRUE);\n\t\t\t}\n\t\t}\n\t}\n\n\t/*\n\t * Not found in ksidlist, check posix groups\n\t */\n\tgid = zfs_fuid_map_id(zfsvfs, id, cr, ZFS_GROUP);\n\treturn (groupmember(gid, cr));\n#else\n\treturn (B_TRUE);\n#endif\n}",
  "abstract_func_before": "boolean_t\nzfs_groupmember(zfsvfs_t *VAR_0, uint64_t VAR_1, cred_t *VAR_2)\n{\n#ifdef VAR_3\n\tksid_t\t\t*VAR_4 = crgetsid(VAR_2, VAR_5);\n\tksidlist_t\t*VAR_6 = crgetsidlist(VAR_2);\n\tuid_t\t\tVAR_7;\n\n\tif (VAR_4 && VAR_6) {\n\t\tint\t\tVAR_8;\n\t\tksid_t\t\t*VAR_9;\n\t\tuint32_t\tVAR_10 = FUID_INDEX(VAR_1);\n\t\tuint32_t\tVAR_11 = FUID_RID(VAR_1);\n\n\t\tVAR_9 = VAR_6->ksl_sids;\n\n\t\tfor (VAR_8 = 0; VAR_8 != VAR_6->ksl_nsid; VAR_8++) {\n\t\t\tif (VAR_10 == 0) {\n\t\t\t\tif (VAR_1 != VAR_12 &&\n\t\t\t\t    VAR_1 == VAR_9[VAR_8].ks_id) {\n\t\t\t\t\treturn (VAR_13);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst char *VAR_14;\n\n\t\t\t\tVAR_14 = zfs_fuid_find_by_idx(VAR_0, VAR_10);\n\t\t\t\tASSERT(VAR_14 != NULL);\n\n\t\t\t\tif (strcmp(VAR_14,\n\t\t\t\t    VAR_15) == 0)\n\t\t\t\t\treturn (VAR_16);\n\n\t\t\t\tif ((strcmp(VAR_14,\n\t\t\t\t    VAR_9[VAR_8].ks_domain->kd_name) == 0) &&\n\t\t\t\t    VAR_11 == VAR_9[VAR_8].ks_rid)\n\t\t\t\t\treturn (VAR_13);\n\t\t\t}\n\t\t}\n\t}\n\n\t/* COMMENT_0 */\n                                             \n    \n\tVAR_7 = zfs_fuid_map_id(VAR_0, VAR_1, VAR_2, VAR_17);\n\treturn (groupmember(VAR_7, VAR_2));\n#else\n\treturn (VAR_13);\n#endif\n}",
  "func_graph_path_before": "openzfs/zfs/716b53d0a14c72bda16c0872565dd1909757e73f/zfs_fuid.c/vul/before/0.json",
  "func": "boolean_t\nzfs_groupmember(zfsvfs_t *zfsvfs, uint64_t id, cred_t *cr)\n{\n#ifdef HAVE_KSID\n\tuid_t\t\tgid;\n\n#ifdef illumos\n\tksid_t\t\t*ksid = crgetsid(cr, KSID_GROUP);\n\tksidlist_t\t*ksidlist = crgetsidlist(cr);\n\n\tif (ksid && ksidlist) {\n\t\tint\t\ti;\n\t\tksid_t\t\t*ksid_groups;\n\t\tuint32_t\tidx = FUID_INDEX(id);\n\t\tuint32_t\trid = FUID_RID(id);\n\n\t\tksid_groups = ksidlist->ksl_sids;\n\n\t\tfor (i = 0; i != ksidlist->ksl_nsid; i++) {\n\t\t\tif (idx == 0) {\n\t\t\t\tif (id != IDMAP_WK_CREATOR_GROUP_GID &&\n\t\t\t\t    id == ksid_groups[i].ks_id) {\n\t\t\t\t\treturn (B_TRUE);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst char *domain;\n\n\t\t\t\tdomain = zfs_fuid_find_by_idx(zfsvfs, idx);\n\t\t\t\tASSERT(domain != NULL);\n\n\t\t\t\tif (strcmp(domain,\n\t\t\t\t    IDMAP_WK_CREATOR_SID_AUTHORITY) == 0)\n\t\t\t\t\treturn (B_FALSE);\n\n\t\t\t\tif ((strcmp(domain,\n\t\t\t\t    ksid_groups[i].ks_domain->kd_name) == 0) &&\n\t\t\t\t    rid == ksid_groups[i].ks_rid)\n\t\t\t\t\treturn (B_TRUE);\n\t\t\t}\n\t\t}\n\t}\n#endif /* illumos */\n\n\t/*\n\t * Not found in ksidlist, check posix groups\n\t */\n\tgid = zfs_fuid_map_id(zfsvfs, id, cr, ZFS_GROUP);\n\treturn (groupmember(gid, cr));\n#else\n\treturn (B_TRUE);\n#endif\n}",
  "abstract_func": "boolean_t\nzfs_groupmember(zfsvfs_t *VAR_0, uint64_t VAR_1, cred_t *VAR_2)\n{\n#ifdef VAR_3\n\tuid_t\t\tVAR_4;\n\n#ifdef VAR_5\n\tksid_t\t\t*VAR_6 = crgetsid(VAR_2, VAR_7);\n\tksidlist_t\t*VAR_8 = crgetsidlist(VAR_2);\n\n\tif (VAR_6 && VAR_8) {\n\t\tint\t\tVAR_9;\n\t\tksid_t\t\t*VAR_10;\n\t\tuint32_t\tVAR_11 = FUID_INDEX(VAR_1);\n\t\tuint32_t\tVAR_12 = FUID_RID(VAR_1);\n\n\t\tVAR_10 = VAR_8->ksl_sids;\n\n\t\tfor (VAR_9 = 0; VAR_9 != VAR_8->ksl_nsid; VAR_9++) {\n\t\t\tif (VAR_11 == 0) {\n\t\t\t\tif (VAR_1 != VAR_13 &&\n\t\t\t\t    VAR_1 == VAR_10[VAR_9].ks_id) {\n\t\t\t\t\treturn (VAR_14);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst char *VAR_15;\n\n\t\t\t\tVAR_15 = zfs_fuid_find_by_idx(VAR_0, VAR_11);\n\t\t\t\tASSERT(VAR_15 != NULL);\n\n\t\t\t\tif (strcmp(VAR_15,\n\t\t\t\t    VAR_16) == 0)\n\t\t\t\t\treturn (VAR_17);\n\n\t\t\t\tif ((strcmp(VAR_15,\n\t\t\t\t    VAR_10[VAR_9].ks_domain->kd_name) == 0) &&\n\t\t\t\t    VAR_12 == VAR_10[VAR_9].ks_rid)\n\t\t\t\t\treturn (VAR_14);\n\t\t\t}\n\t\t}\n\t}\n#endif /* COMMENT_0 */\n\n\t/* COMMENT_1 */\n                                             \n    \n\tVAR_4 = zfs_fuid_map_id(VAR_0, VAR_1, VAR_2, VAR_18);\n\treturn (groupmember(VAR_4, VAR_2));\n#else\n\treturn (VAR_14);\n#endif\n}",
  "func_graph_path": "openzfs/zfs/716b53d0a14c72bda16c0872565dd1909757e73f/zfs_fuid.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -2,9 +2,11 @@\n zfs_groupmember(zfsvfs_t *zfsvfs, uint64_t id, cred_t *cr)\n {\n #ifdef HAVE_KSID\n+\tuid_t\t\tgid;\n+\n+#ifdef illumos\n \tksid_t\t\t*ksid = crgetsid(cr, KSID_GROUP);\n \tksidlist_t\t*ksidlist = crgetsidlist(cr);\n-\tuid_t\t\tgid;\n \n \tif (ksid && ksidlist) {\n \t\tint\t\ti;\n@@ -37,6 +39,7 @@\n \t\t\t}\n \t\t}\n \t}\n+#endif /* illumos */\n \n \t/*\n \t * Not found in ksidlist, check posix groups",
  "diff_line_info": {
    "deleted_lines": [
      "\tuid_t\t\tgid;"
    ],
    "added_lines": [
      "\tuid_t\t\tgid;",
      "",
      "#ifdef illumos",
      "#endif /* illumos */"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/openzfs/zfs/pull/10727",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/openzfs/zfs/pull/10727: 403 Client Error: Forbidden for url: https://api.github.com/repos/openzfs/zfs/pulls/10727",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.8,
  "Bug Filter Response": "**Final Output:**  \n**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.8"
}