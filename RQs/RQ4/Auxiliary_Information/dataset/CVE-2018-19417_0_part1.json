{
  "cve_id": "CVE-2018-19417",
  "cwe_ids": [
    "CWE-119"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:C/I:C/A:C",
  "cvss_is_v3": false,
  "repo_name": "contiki-ng",
  "commit_msg": "MQTT parse_publish_vhdr: added missing check of topic length",
  "commit_hash": "bcebd3afcfbd472dfc76b5f2d4f599bbc42c97ba",
  "git_url": "https://github.com/contiki-ng/contiki-ng/commit/bcebd3afcfbd472dfc76b5f2d4f599bbc42c97ba",
  "file_path": "os/net/app-layer/mqtt/mqtt.c",
  "func_name": "parse_publish_vhdr",
  "func_before": "static void\nparse_publish_vhdr(struct mqtt_connection *conn,\n                   uint32_t *pos,\n                   const uint8_t *input_data_ptr,\n                   int input_data_len)\n{\n  uint16_t copy_bytes;\n\n  /* Read out topic length */\n  if(conn->in_packet.topic_len_received == 0) {\n    conn->in_packet.topic_pos = 0;\n    conn->in_packet.topic_len = (input_data_ptr[(*pos)++] << 8);\n    conn->in_packet.byte_counter++;\n    if(*pos >= input_data_len) {\n      return;\n    }\n    conn->in_packet.topic_len |= input_data_ptr[(*pos)++];\n    conn->in_packet.byte_counter++;\n    conn->in_packet.topic_len_received = 1;\n\n    DBG(\"MQTT - Read PUBLISH topic len %i\\n\", conn->in_packet.topic_len);\n    /* WARNING: Check here if TOPIC fits in payload area, otherwise error */\n  }\n\n  /* Read out topic */\n  if(conn->in_packet.topic_len_received == 1 &&\n     conn->in_packet.topic_received == 0) {\n    copy_bytes = MIN(conn->in_packet.topic_len - conn->in_packet.topic_pos,\n                     input_data_len - *pos);\n    DBG(\"MQTT - topic_pos: %i copy_bytes: %i\", conn->in_packet.topic_pos,\n        copy_bytes);\n    memcpy(&conn->in_publish_msg.topic[conn->in_packet.topic_pos],\n           &input_data_ptr[*pos],\n           copy_bytes);\n    (*pos) += copy_bytes;\n    conn->in_packet.byte_counter += copy_bytes;\n    conn->in_packet.topic_pos += copy_bytes;\n\n    if(conn->in_packet.topic_len - conn->in_packet.topic_pos == 0) {\n      DBG(\"MQTT - Got topic '%s'\", conn->in_publish_msg.topic);\n      conn->in_packet.topic_received = 1;\n      conn->in_publish_msg.topic[conn->in_packet.topic_pos] = '\\0';\n      conn->in_publish_msg.payload_length =\n        conn->in_packet.remaining_length - conn->in_packet.topic_len - 2;\n      conn->in_publish_msg.payload_left = conn->in_publish_msg.payload_length;\n    }\n\n    /* Set this once per incomming publish message */\n    conn->in_publish_msg.first_chunk = 1;\n  }\n}",
  "abstract_func_before": "static void\nparse_publish_vhdr(struct mqtt_connection *VAR_0,\n                   uint32_t *VAR_1,\n                   const uint8_t *VAR_2,\n                   int VAR_3)\n{\n  uint16_t VAR_4;\n\n  /* COMMENT_0 */\n  if(VAR_0->in_packet.topic_len_received == 0) {\n    VAR_0->in_packet.topic_pos = 0;\n    VAR_0->in_packet.topic_len = (VAR_2[(*VAR_1)++] << 8);\n    VAR_0->in_packet.byte_counter++;\n    if(*VAR_1 >= VAR_3) {\n      return;\n    }\n    VAR_0->in_packet.topic_len |= VAR_2[(*VAR_1)++];\n    VAR_0->in_packet.byte_counter++;\n    VAR_0->in_packet.topic_len_received = 1;\n\n    DBG(\"MQTT - Read PUBLISH topic len %i\\n\", VAR_0->in_packet.topic_len);\n    /* COMMENT_1 */\n  }\n\n  /* COMMENT_2 */\n  if(VAR_0->in_packet.topic_len_received == 1 &&\n     VAR_0->in_packet.topic_received == 0) {\n    VAR_4 = MIN(VAR_0->in_packet.topic_len - VAR_0->in_packet.topic_pos,\n                     VAR_3 - *VAR_1);\n    DBG(\"MQTT - topic_pos: %i copy_bytes: %i\", VAR_0->in_packet.topic_pos,\n        VAR_4);\n    memcpy(&VAR_0->in_publish_msg.topic[VAR_0->in_packet.topic_pos],\n           &VAR_2[*VAR_1],\n           VAR_4);\n    (*VAR_1) += VAR_4;\n    VAR_0->in_packet.byte_counter += VAR_4;\n    VAR_0->in_packet.topic_pos += VAR_4;\n\n    if(VAR_0->in_packet.topic_len - VAR_0->in_packet.topic_pos == 0) {\n      DBG(\"MQTT - Got topic '%s'\", VAR_0->in_publish_msg.topic);\n      VAR_0->in_packet.topic_received = 1;\n      VAR_0->in_publish_msg.topic[VAR_0->in_packet.topic_pos] = '\\0';\n      VAR_0->in_publish_msg.payload_length =\n        VAR_0->in_packet.remaining_length - VAR_0->in_packet.topic_len - 2;\n      VAR_0->in_publish_msg.payload_left = VAR_0->in_publish_msg.payload_length;\n    }\n\n    /* COMMENT_3 */\n    VAR_0->in_publish_msg.first_chunk = 1;\n  }\n}",
  "func_graph_path_before": "contiki-ng/bcebd3afcfbd472dfc76b5f2d4f599bbc42c97ba/mqtt.c/vul/before/0.json",
  "func": "static void\nparse_publish_vhdr(struct mqtt_connection *conn,\n                   uint32_t *pos,\n                   const uint8_t *input_data_ptr,\n                   int input_data_len)\n{\n  uint16_t copy_bytes;\n\n  /* Read out topic length */\n  if(conn->in_packet.topic_len_received == 0) {\n    conn->in_packet.topic_pos = 0;\n    conn->in_packet.topic_len = (input_data_ptr[(*pos)++] << 8);\n    conn->in_packet.byte_counter++;\n    if(*pos >= input_data_len) {\n      return;\n    }\n    conn->in_packet.topic_len |= input_data_ptr[(*pos)++];\n    conn->in_packet.byte_counter++;\n    conn->in_packet.topic_len_received = 1;\n    /* Abort if topic is longer than our topic buffer */\n    if(conn->in_packet.topic_len > MQTT_MAX_TOPIC_LENGTH) {\n      DBG(\"MQTT - topic too long %u/%u\\n\", conn->in_packet.topic_len, MQTT_MAX_TOPIC_LENGTH);\n      return;\n    }\n    DBG(\"MQTT - Read PUBLISH topic len %i\\n\", conn->in_packet.topic_len);\n    /* WARNING: Check here if TOPIC fits in payload area, otherwise error */\n  }\n\n  /* Read out topic */\n  if(conn->in_packet.topic_len_received == 1 &&\n     conn->in_packet.topic_received == 0) {\n    copy_bytes = MIN(conn->in_packet.topic_len - conn->in_packet.topic_pos,\n                     input_data_len - *pos);\n    DBG(\"MQTT - topic_pos: %i copy_bytes: %i\", conn->in_packet.topic_pos,\n        copy_bytes);\n    memcpy(&conn->in_publish_msg.topic[conn->in_packet.topic_pos],\n           &input_data_ptr[*pos],\n           copy_bytes);\n    (*pos) += copy_bytes;\n    conn->in_packet.byte_counter += copy_bytes;\n    conn->in_packet.topic_pos += copy_bytes;\n\n    if(conn->in_packet.topic_len - conn->in_packet.topic_pos == 0) {\n      DBG(\"MQTT - Got topic '%s'\", conn->in_publish_msg.topic);\n      conn->in_packet.topic_received = 1;\n      conn->in_publish_msg.topic[conn->in_packet.topic_pos] = '\\0';\n      conn->in_publish_msg.payload_length =\n        conn->in_packet.remaining_length - conn->in_packet.topic_len - 2;\n      conn->in_publish_msg.payload_left = conn->in_publish_msg.payload_length;\n    }\n\n    /* Set this once per incomming publish message */\n    conn->in_publish_msg.first_chunk = 1;\n  }\n}",
  "abstract_func": "static void\nparse_publish_vhdr(struct mqtt_connection *VAR_0,\n                   uint32_t *VAR_1,\n                   const uint8_t *VAR_2,\n                   int VAR_3)\n{\n  uint16_t VAR_4;\n\n  /* COMMENT_0 */\n  if(VAR_0->in_packet.topic_len_received == 0) {\n    VAR_0->in_packet.topic_pos = 0;\n    VAR_0->in_packet.topic_len = (VAR_2[(*VAR_1)++] << 8);\n    VAR_0->in_packet.byte_counter++;\n    if(*VAR_1 >= VAR_3) {\n      return;\n    }\n    VAR_0->in_packet.topic_len |= VAR_2[(*VAR_1)++];\n    VAR_0->in_packet.byte_counter++;\n    VAR_0->in_packet.topic_len_received = 1;\n    /* COMMENT_1 */\n    if(VAR_0->in_packet.topic_len > VAR_5) {\n      DBG(\"MQTT - topic too long %u/%u\\n\", VAR_0->in_packet.topic_len, VAR_5);\n      return;\n    }\n    DBG(\"MQTT - Read PUBLISH topic len %i\\n\", VAR_0->in_packet.topic_len);\n    /* COMMENT_2 */\n  }\n\n  /* COMMENT_3 */\n  if(VAR_0->in_packet.topic_len_received == 1 &&\n     VAR_0->in_packet.topic_received == 0) {\n    VAR_4 = MIN(VAR_0->in_packet.topic_len - VAR_0->in_packet.topic_pos,\n                     VAR_3 - *VAR_1);\n    DBG(\"MQTT - topic_pos: %i copy_bytes: %i\", VAR_0->in_packet.topic_pos,\n        VAR_4);\n    memcpy(&VAR_0->in_publish_msg.topic[VAR_0->in_packet.topic_pos],\n           &VAR_2[*VAR_1],\n           VAR_4);\n    (*VAR_1) += VAR_4;\n    VAR_0->in_packet.byte_counter += VAR_4;\n    VAR_0->in_packet.topic_pos += VAR_4;\n\n    if(VAR_0->in_packet.topic_len - VAR_0->in_packet.topic_pos == 0) {\n      DBG(\"MQTT - Got topic '%s'\", VAR_0->in_publish_msg.topic);\n      VAR_0->in_packet.topic_received = 1;\n      VAR_0->in_publish_msg.topic[VAR_0->in_packet.topic_pos] = '\\0';\n      VAR_0->in_publish_msg.payload_length =\n        VAR_0->in_packet.remaining_length - VAR_0->in_packet.topic_len - 2;\n      VAR_0->in_publish_msg.payload_left = VAR_0->in_publish_msg.payload_length;\n    }\n\n    /* COMMENT_4 */\n    VAR_0->in_publish_msg.first_chunk = 1;\n  }\n}",
  "func_graph_path": "contiki-ng/bcebd3afcfbd472dfc76b5f2d4f599bbc42c97ba/mqtt.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -17,7 +17,11 @@\n     conn->in_packet.topic_len |= input_data_ptr[(*pos)++];\n     conn->in_packet.byte_counter++;\n     conn->in_packet.topic_len_received = 1;\n-\n+    /* Abort if topic is longer than our topic buffer */\n+    if(conn->in_packet.topic_len > MQTT_MAX_TOPIC_LENGTH) {\n+      DBG(\"MQTT - topic too long %u/%u\\n\", conn->in_packet.topic_len, MQTT_MAX_TOPIC_LENGTH);\n+      return;\n+    }\n     DBG(\"MQTT - Read PUBLISH topic len %i\\n\", conn->in_packet.topic_len);\n     /* WARNING: Check here if TOPIC fits in payload area, otherwise error */\n   }",
  "diff_line_info": {
    "deleted_lines": [
      ""
    ],
    "added_lines": [
      "    /* Abort if topic is longer than our topic buffer */",
      "    if(conn->in_packet.topic_len > MQTT_MAX_TOPIC_LENGTH) {",
      "      DBG(\"MQTT - topic too long %u/%u\\n\", conn->in_packet.topic_len, MQTT_MAX_TOPIC_LENGTH);",
      "      return;",
      "    }"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/contiki-ng/contiki-ng/pull/702",
  "description": {
    "pr_info": {
      "title": "MQTT buffer overflow fix",
      "number": 702
    },
    "comment": [
      "https://github.com/contiki-ng/contiki-ng/issues/600 reports an a potential MQTT buffer overflow. This PR is an attempt to fix it; I would like someone more familiar with MQTT to double-check and ideally test.\r\n\r\nFixes #600\r\n\r\n",
      "BTW we're missing an MQTT CI test aren't we?",
      "> BTW we're missing an MQTT CI test aren't we?\r\n\r\nYou mean actual execution, yes?",
      "> > BTW we're missing an MQTT CI test aren't we?\r\n> \r\n> You mean actual execution, yes?\r\n\r\nYes not just compilation",
      "Yeah I don't think we have one (I certainly haven't written one!). Should be very easy to knock together using native and mosquitto.",
      "That would be great yes, based on `/tests/Makefile.script-test`"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 0.95\n\nThe commit addresses a buffer overflow vulnerability by adding a check on the topic length, which directly mitigates a security risk. The code and description are consistent, making the classification highly confident."
}