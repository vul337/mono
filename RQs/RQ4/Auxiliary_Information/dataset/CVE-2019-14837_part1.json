{
  "cve_id": "CVE-2019-14837",
  "cwe_ids": [
    "CWE-798"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:P/A:N",
  "cvss_is_v3": false,
  "repo_name": "keycloak",
  "commit_msg": "KEYCLOAK-10780 Stop creating placeholder e-mails for service accounts (#228)",
  "commit_hash": "9a7c1a91a59ab85e7f8889a505be04a71580777f",
  "git_url": "https://github.com/keycloak/keycloak/commit/9a7c1a91a59ab85e7f8889a505be04a71580777f",
  "file_path": "services/src/main/java/org/keycloak/services/managers/ClientManager.java",
  "func_name": "enableServiceAccount",
  "func_before": "public void enableServiceAccount(ClientModel client) {\n        client.setServiceAccountsEnabled(true);\n\n        // Add dedicated user for this service account\n        if (realmManager.getSession().users().getServiceAccount(client) == null) {\n            String username = ServiceAccountConstants.SERVICE_ACCOUNT_USER_PREFIX + client.getClientId();\n            logger.debugf(\"Creating service account user '%s'\", username);\n\n            // Don't use federation for service account user\n            UserModel user = realmManager.getSession().userLocalStorage().addUser(client.getRealm(), username);\n            user.setEnabled(true);\n            user.setEmail(username + \"@placeholder.org\");\n            user.setServiceAccountClientLink(client.getId());\n        }\n\n        // Add protocol mappers to retrieve clientId in access token\n        if (client.getProtocolMapperByName(OIDCLoginProtocol.LOGIN_PROTOCOL, ServiceAccountConstants.CLIENT_ID_PROTOCOL_MAPPER) == null) {\n            logger.debugf(\"Creating service account protocol mapper '%s' for client '%s'\", ServiceAccountConstants.CLIENT_ID_PROTOCOL_MAPPER, client.getClientId());\n            ProtocolMapperModel protocolMapper = UserSessionNoteMapper.createClaimMapper(ServiceAccountConstants.CLIENT_ID_PROTOCOL_MAPPER,\n                    ServiceAccountConstants.CLIENT_ID,\n                    ServiceAccountConstants.CLIENT_ID, \"String\",\n                    true, true);\n            client.addProtocolMapper(protocolMapper);\n        }\n\n        // Add protocol mappers to retrieve hostname and IP address of client in access token\n        if (client.getProtocolMapperByName(OIDCLoginProtocol.LOGIN_PROTOCOL, ServiceAccountConstants.CLIENT_HOST_PROTOCOL_MAPPER) == null) {\n            logger.debugf(\"Creating service account protocol mapper '%s' for client '%s'\", ServiceAccountConstants.CLIENT_HOST_PROTOCOL_MAPPER, client.getClientId());\n            ProtocolMapperModel protocolMapper = UserSessionNoteMapper.createClaimMapper(ServiceAccountConstants.CLIENT_HOST_PROTOCOL_MAPPER,\n                    ServiceAccountConstants.CLIENT_HOST,\n                    ServiceAccountConstants.CLIENT_HOST, \"String\",\n                    true, true);\n            client.addProtocolMapper(protocolMapper);\n        }\n\n        if (client.getProtocolMapperByName(OIDCLoginProtocol.LOGIN_PROTOCOL, ServiceAccountConstants.CLIENT_ADDRESS_PROTOCOL_MAPPER) == null) {\n            logger.debugf(\"Creating service account protocol mapper '%s' for client '%s'\", ServiceAccountConstants.CLIENT_ADDRESS_PROTOCOL_MAPPER, client.getClientId());\n            ProtocolMapperModel protocolMapper = UserSessionNoteMapper.createClaimMapper(ServiceAccountConstants.CLIENT_ADDRESS_PROTOCOL_MAPPER,\n                    ServiceAccountConstants.CLIENT_ADDRESS,\n                    ServiceAccountConstants.CLIENT_ADDRESS, \"String\",\n                    true, true);\n            client.addProtocolMapper(protocolMapper);\n        }\n    }",
  "abstract_func_before": "public void enableServiceAccount(ClientModel VAR_0) {\n        VAR_0.setServiceAccountsEnabled(true);\n\n        /* COMMENT_0 */\n        if (VAR_1.getSession().users().getServiceAccount(VAR_0) == null) {\n            String VAR_2 = VAR_3.SERVICE_ACCOUNT_USER_PREFIX + VAR_0.getClientId();\n            VAR_4.debugf(\"Creating service account user '%s'\", VAR_2);\n\n            /* COMMENT_1 */\n            UserModel VAR_5 = VAR_1.getSession().userLocalStorage().addUser(VAR_0.getRealm(), VAR_2);\n            VAR_5.setEnabled(true);\n            VAR_5.setEmail(VAR_2 + \"@placeholder.org\");\n            VAR_5.setServiceAccountClientLink(VAR_0.getId());\n        }\n\n        /* COMMENT_2 */\n        if (VAR_0.getProtocolMapperByName(VAR_6.LOGIN_PROTOCOL, VAR_3.CLIENT_ID_PROTOCOL_MAPPER) == null) {\n            VAR_4.debugf(\"Creating service account protocol mapper '%s' for client '%s'\", VAR_3.CLIENT_ID_PROTOCOL_MAPPER, VAR_0.getClientId());\n            ProtocolMapperModel VAR_7 = VAR_8.createClaimMapper(VAR_3.CLIENT_ID_PROTOCOL_MAPPER,\n                    VAR_3.CLIENT_ID,\n                    VAR_3.CLIENT_ID, \"String\",\n                    true, true);\n            VAR_0.addProtocolMapper(VAR_7);\n        }\n\n        /* COMMENT_3 */\n        if (VAR_0.getProtocolMapperByName(VAR_6.LOGIN_PROTOCOL, VAR_3.CLIENT_HOST_PROTOCOL_MAPPER) == null) {\n            VAR_4.debugf(\"Creating service account protocol mapper '%s' for client '%s'\", VAR_3.CLIENT_HOST_PROTOCOL_MAPPER, VAR_0.getClientId());\n            ProtocolMapperModel VAR_7 = VAR_8.createClaimMapper(VAR_3.CLIENT_HOST_PROTOCOL_MAPPER,\n                    VAR_3.CLIENT_HOST,\n                    VAR_3.CLIENT_HOST, \"String\",\n                    true, true);\n            VAR_0.addProtocolMapper(VAR_7);\n        }\n\n        if (VAR_0.getProtocolMapperByName(VAR_6.LOGIN_PROTOCOL, VAR_3.CLIENT_ADDRESS_PROTOCOL_MAPPER) == null) {\n            VAR_4.debugf(\"Creating service account protocol mapper '%s' for client '%s'\", VAR_3.CLIENT_ADDRESS_PROTOCOL_MAPPER, VAR_0.getClientId());\n            ProtocolMapperModel VAR_7 = VAR_8.createClaimMapper(VAR_3.CLIENT_ADDRESS_PROTOCOL_MAPPER,\n                    VAR_3.CLIENT_ADDRESS,\n                    VAR_3.CLIENT_ADDRESS, \"String\",\n                    true, true);\n            VAR_0.addProtocolMapper(VAR_7);\n        }\n    }",
  "func_graph_path_before": "keycloak/9a7c1a91a59ab85e7f8889a505be04a71580777f/ClientManager.java/vul/before/0.json",
  "func": "public void enableServiceAccount(ClientModel client) {\n        client.setServiceAccountsEnabled(true);\n\n        // Add dedicated user for this service account\n        if (realmManager.getSession().users().getServiceAccount(client) == null) {\n            String username = ServiceAccountConstants.SERVICE_ACCOUNT_USER_PREFIX + client.getClientId();\n            logger.debugf(\"Creating service account user '%s'\", username);\n\n            // Don't use federation for service account user\n            UserModel user = realmManager.getSession().userLocalStorage().addUser(client.getRealm(), username);\n            user.setEnabled(true);\n            user.setServiceAccountClientLink(client.getId());\n        }\n\n        // Add protocol mappers to retrieve clientId in access token\n        if (client.getProtocolMapperByName(OIDCLoginProtocol.LOGIN_PROTOCOL, ServiceAccountConstants.CLIENT_ID_PROTOCOL_MAPPER) == null) {\n            logger.debugf(\"Creating service account protocol mapper '%s' for client '%s'\", ServiceAccountConstants.CLIENT_ID_PROTOCOL_MAPPER, client.getClientId());\n            ProtocolMapperModel protocolMapper = UserSessionNoteMapper.createClaimMapper(ServiceAccountConstants.CLIENT_ID_PROTOCOL_MAPPER,\n                    ServiceAccountConstants.CLIENT_ID,\n                    ServiceAccountConstants.CLIENT_ID, \"String\",\n                    true, true);\n            client.addProtocolMapper(protocolMapper);\n        }\n\n        // Add protocol mappers to retrieve hostname and IP address of client in access token\n        if (client.getProtocolMapperByName(OIDCLoginProtocol.LOGIN_PROTOCOL, ServiceAccountConstants.CLIENT_HOST_PROTOCOL_MAPPER) == null) {\n            logger.debugf(\"Creating service account protocol mapper '%s' for client '%s'\", ServiceAccountConstants.CLIENT_HOST_PROTOCOL_MAPPER, client.getClientId());\n            ProtocolMapperModel protocolMapper = UserSessionNoteMapper.createClaimMapper(ServiceAccountConstants.CLIENT_HOST_PROTOCOL_MAPPER,\n                    ServiceAccountConstants.CLIENT_HOST,\n                    ServiceAccountConstants.CLIENT_HOST, \"String\",\n                    true, true);\n            client.addProtocolMapper(protocolMapper);\n        }\n\n        if (client.getProtocolMapperByName(OIDCLoginProtocol.LOGIN_PROTOCOL, ServiceAccountConstants.CLIENT_ADDRESS_PROTOCOL_MAPPER) == null) {\n            logger.debugf(\"Creating service account protocol mapper '%s' for client '%s'\", ServiceAccountConstants.CLIENT_ADDRESS_PROTOCOL_MAPPER, client.getClientId());\n            ProtocolMapperModel protocolMapper = UserSessionNoteMapper.createClaimMapper(ServiceAccountConstants.CLIENT_ADDRESS_PROTOCOL_MAPPER,\n                    ServiceAccountConstants.CLIENT_ADDRESS,\n                    ServiceAccountConstants.CLIENT_ADDRESS, \"String\",\n                    true, true);\n            client.addProtocolMapper(protocolMapper);\n        }\n    }",
  "abstract_func": "public void enableServiceAccount(ClientModel VAR_0) {\n        VAR_0.setServiceAccountsEnabled(true);\n\n        /* COMMENT_0 */\n        if (VAR_1.getSession().users().getServiceAccount(VAR_0) == null) {\n            String VAR_2 = VAR_3.SERVICE_ACCOUNT_USER_PREFIX + VAR_0.getClientId();\n            VAR_4.debugf(\"Creating service account user '%s'\", VAR_2);\n\n            /* COMMENT_1 */\n            UserModel VAR_5 = VAR_1.getSession().userLocalStorage().addUser(VAR_0.getRealm(), VAR_2);\n            VAR_5.setEnabled(true);\n            VAR_5.setServiceAccountClientLink(VAR_0.getId());\n        }\n\n        /* COMMENT_2 */\n        if (VAR_0.getProtocolMapperByName(VAR_6.LOGIN_PROTOCOL, VAR_3.CLIENT_ID_PROTOCOL_MAPPER) == null) {\n            VAR_4.debugf(\"Creating service account protocol mapper '%s' for client '%s'\", VAR_3.CLIENT_ID_PROTOCOL_MAPPER, VAR_0.getClientId());\n            ProtocolMapperModel VAR_7 = VAR_8.createClaimMapper(VAR_3.CLIENT_ID_PROTOCOL_MAPPER,\n                    VAR_3.CLIENT_ID,\n                    VAR_3.CLIENT_ID, \"String\",\n                    true, true);\n            VAR_0.addProtocolMapper(VAR_7);\n        }\n\n        /* COMMENT_3 */\n        if (VAR_0.getProtocolMapperByName(VAR_6.LOGIN_PROTOCOL, VAR_3.CLIENT_HOST_PROTOCOL_MAPPER) == null) {\n            VAR_4.debugf(\"Creating service account protocol mapper '%s' for client '%s'\", VAR_3.CLIENT_HOST_PROTOCOL_MAPPER, VAR_0.getClientId());\n            ProtocolMapperModel VAR_7 = VAR_8.createClaimMapper(VAR_3.CLIENT_HOST_PROTOCOL_MAPPER,\n                    VAR_3.CLIENT_HOST,\n                    VAR_3.CLIENT_HOST, \"String\",\n                    true, true);\n            VAR_0.addProtocolMapper(VAR_7);\n        }\n\n        if (VAR_0.getProtocolMapperByName(VAR_6.LOGIN_PROTOCOL, VAR_3.CLIENT_ADDRESS_PROTOCOL_MAPPER) == null) {\n            VAR_4.debugf(\"Creating service account protocol mapper '%s' for client '%s'\", VAR_3.CLIENT_ADDRESS_PROTOCOL_MAPPER, VAR_0.getClientId());\n            ProtocolMapperModel VAR_7 = VAR_8.createClaimMapper(VAR_3.CLIENT_ADDRESS_PROTOCOL_MAPPER,\n                    VAR_3.CLIENT_ADDRESS,\n                    VAR_3.CLIENT_ADDRESS, \"String\",\n                    true, true);\n            VAR_0.addProtocolMapper(VAR_7);\n        }\n    }",
  "func_graph_path": "keycloak/9a7c1a91a59ab85e7f8889a505be04a71580777f/ClientManager.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -9,7 +9,6 @@\n             // Don't use federation for service account user\n             UserModel user = realmManager.getSession().userLocalStorage().addUser(client.getRealm(), username);\n             user.setEnabled(true);\n-            user.setEmail(username + \"@placeholder.org\");\n             user.setServiceAccountClientLink(client.getId());\n         }\n ",
  "diff_line_info": {
    "deleted_lines": [
      "            user.setEmail(username + \"@placeholder.org\");"
    ],
    "added_lines": []
  },
  "is_vul": true,
  "pr_url": "https://github.com/keycloak/keycloak/pull/6486",
  "description": {
    "pr_info": {
      "title": "KEYCLOAK-10780 Stop creating placeholder e-mails for service accoun…",
      "number": 6486
    },
    "comment": [
      "…ts (#228)\r\n\r\n<!---\r\nPlease read https://github.com/keycloak/keycloak/blob/master/CONTRIBUTING.md and follow these guidelines when contributing to Keycloak\r\n-->\r\n"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.7,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.7\n\n**Reasoning:** The commit removes placeholder email creation for service accounts, which likely addresses a security concern related to information exposure. Though without explicit CVE reference, the change aligns with mitigating potential risks."
}