{
  "cve_id": "CVE-2016-6172",
  "cwe_ids": [
    "CWE-400"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:N/I:N/A:C",
  "cvss_is_v3": false,
  "repo_name": "PowerDNS/pdns",
  "commit_msg": "Add limits to the size of received {A,I}XFR, in megabytes\n\nThis prevents memory exhaustion in case the master is sending a\nvery large amount of data in an update.",
  "commit_hash": "db8f9152168acf5d548d4f256789eae783e01667",
  "git_url": "https://github.com/PowerDNS/pdns/commit/db8f9152168acf5d548d4f256789eae783e01667",
  "file_path": "pdns/common_startup.cc",
  "func_name": "declareArguments",
  "func_before": "void declareArguments()\n{\n  ::arg().set(\"local-port\",\"The port on which we listen\")=\"53\";\n  ::arg().setSwitch(\"dnsupdate\",\"Enable/Disable DNS update (RFC2136) support. Default is no.\")=\"no\";\n  ::arg().setSwitch(\"write-pid\",\"Write a PID file\")=\"yes\";\n  ::arg().set(\"allow-dnsupdate-from\",\"A global setting to allow DNS updates from these IP ranges.\")=\"127.0.0.0/8,::1\";\n  ::arg().set(\"allow-unsigned-notify\",\"Allow unsigned notifications for TSIG secured domains\")=\"yes\"; //FIXME: change to 'no' later\n  ::arg().set(\"allow-unsigned-supermaster\", \"Allow supermasters to create zones without TSIG signed NOTIFY\")=\"yes\";\n  ::arg().setSwitch(\"forward-dnsupdate\",\"A global setting to allow DNS update packages that are for a Slave domain, to be forwarded to the master.\")=\"yes\";\n  ::arg().setSwitch(\"log-dns-details\",\"If PDNS should log DNS non-erroneous details\")=\"no\";\n  ::arg().setSwitch(\"log-dns-queries\",\"If PDNS should log all incoming DNS queries\")=\"no\";\n  ::arg().set(\"local-address\",\"Local IP addresses to which we bind\")=\"0.0.0.0\";\n  ::arg().setSwitch(\"local-address-nonexist-fail\",\"Fail to start if one or more of the local-address's do not exist on this server\")=\"yes\";\n  ::arg().setSwitch(\"non-local-bind\", \"Enable binding to non-local addresses by using FREEBIND / BINDANY socket options\")=\"no\";\n  ::arg().set(\"local-ipv6\",\"Local IP address to which we bind\")=\"::\";\n  ::arg().setSwitch(\"reuseport\",\"Enable higher performance on compliant kernels by using SO_REUSEPORT allowing each receiver thread to open its own socket\")=\"no\";\n  ::arg().setSwitch(\"local-ipv6-nonexist-fail\",\"Fail to start if one or more of the local-ipv6 addresses do not exist on this server\")=\"yes\";\n  ::arg().set(\"query-local-address\",\"Source IP address for sending queries\")=\"0.0.0.0\";\n  ::arg().set(\"query-local-address6\",\"Source IPv6 address for sending queries\")=\"::\";\n  ::arg().set(\"overload-queue-length\",\"Maximum queuelength moving to packetcache only\")=\"0\";\n  ::arg().set(\"max-queue-length\",\"Maximum queuelength before considering situation lost\")=\"5000\";\n\n  ::arg().set(\"retrieval-threads\", \"Number of AXFR-retrieval threads for slave operation\")=\"2\";\n  ::arg().setSwitch(\"api\", \"Enable/disable the REST API\")=\"no\";\n  ::arg().set(\"api-key\", \"Static pre-shared authentication key for access to the REST API\")=\"\";\n  ::arg().set(\"api-logfile\", \"Location of the server logfile (used by the REST API)\")=\"/var/log/pdns.log\";\n  ::arg().setSwitch(\"api-readonly\", \"Disallow data modification through the REST API when set\")=\"no\";\n  ::arg().setSwitch(\"dname-processing\", \"If we should support DNAME records\")=\"no\";\n\n  ::arg().setCmd(\"help\",\"Provide a helpful message\");\n  ::arg().setCmd(\"version\",\"Output version and compilation date\");\n  ::arg().setCmd(\"config\",\"Provide configuration file on standard output\");\n  ::arg().setCmd(\"list-modules\",\"Lists all modules available\");\n  ::arg().setCmd(\"no-config\",\"Don't parse configuration file\");\n  \n  ::arg().set(\"version-string\",\"PowerDNS version in packets - full, anonymous, powerdns or custom\")=\"full\"; \n  ::arg().set(\"control-console\",\"Debugging switch - don't use\")=\"no\"; // but I know you will!\n  ::arg().set(\"loglevel\",\"Amount of logging. Higher is more. Do not set below 3\")=\"4\";\n  ::arg().set(\"disable-syslog\",\"Disable logging to syslog, useful when running inside a supervisor that logs stdout\")=\"no\";\n  ::arg().set(\"default-soa-name\",\"name to insert in the SOA record if none set in the backend\")=\"a.misconfigured.powerdns.server\";\n  ::arg().set(\"default-soa-mail\",\"mail address to insert in the SOA record if none set in the backend\")=\"\";\n  ::arg().set(\"distributor-threads\",\"Default number of Distributor (backend) threads to start\")=\"3\";\n  ::arg().set(\"signing-threads\",\"Default number of signer threads to start\")=\"3\";\n  ::arg().set(\"receiver-threads\",\"Default number of receiver threads to start\")=\"1\";\n  ::arg().set(\"queue-limit\",\"Maximum number of milliseconds to queue a query\")=\"1500\"; \n  ::arg().set(\"recursor\",\"If recursion is desired, IP address of a recursing nameserver\")=\"no\"; \n  ::arg().set(\"allow-recursion\",\"List of subnets that are allowed to recurse\")=\"0.0.0.0/0\";\n  ::arg().set(\"udp-truncation-threshold\", \"Maximum UDP response size before we truncate\")=\"1680\";\n  ::arg().set(\"disable-tcp\",\"Do not listen to TCP queries\")=\"no\";\n  \n  ::arg().set(\"config-name\",\"Name of this virtual configuration - will rename the binary image\")=\"\";\n\n  ::arg().set(\"load-modules\",\"Load this module - supply absolute or relative path\")=\"\";\n  ::arg().set(\"launch\",\"Which backends to launch and order to query them in\")=\"\";\n  ::arg().setSwitch(\"disable-axfr\",\"Disable zonetransfers but do allow TCP queries\")=\"no\";\n  ::arg().set(\"allow-axfr-ips\",\"Allow zonetransfers only to these subnets\")=\"127.0.0.0/8,::1\";\n  ::arg().set(\"only-notify\", \"Only send AXFR NOTIFY to these IP addresses or netmasks\")=\"0.0.0.0/0,::/0\";\n  ::arg().set(\"also-notify\", \"When notifying a domain, also notify these nameservers\")=\"\";\n  ::arg().set(\"allow-notify-from\",\"Allow AXFR NOTIFY from these IP ranges. If empty, drop all incoming notifies.\")=\"0.0.0.0/0,::/0\";\n  ::arg().set(\"slave-cycle-interval\",\"Schedule slave freshness checks once every .. seconds\")=\"60\";\n\n  ::arg().set(\"tcp-control-address\",\"If set, PowerDNS can be controlled over TCP on this address\")=\"\";\n  ::arg().set(\"tcp-control-port\",\"If set, PowerDNS can be controlled over TCP on this address\")=\"53000\";\n  ::arg().set(\"tcp-control-secret\",\"If set, PowerDNS can be controlled over TCP after passing this secret\")=\"\";\n  ::arg().set(\"tcp-control-range\",\"If set, remote control of PowerDNS is possible over these networks only\")=\"127.0.0.0/8, 10.0.0.0/8, 192.168.0.0/16, 172.16.0.0/12, ::1/128, fe80::/10\";\n  \n  ::arg().setSwitch(\"slave\",\"Act as a slave\")=\"no\";\n  ::arg().setSwitch(\"master\",\"Act as a master\")=\"no\";\n  ::arg().setSwitch(\"disable-axfr-rectify\",\"Disable the rectify step during an outgoing AXFR. Only required for regression testing.\")=\"no\";\n  ::arg().setSwitch(\"guardian\",\"Run within a guardian process\")=\"no\";\n  ::arg().setSwitch(\"prevent-self-notification\",\"Don't send notifications to what we think is ourself\")=\"yes\";\n  ::arg().setSwitch(\"webserver\",\"Start a webserver for monitoring\")=\"no\"; \n  ::arg().setSwitch(\"webserver-print-arguments\",\"If the webserver should print arguments\")=\"no\"; \n  ::arg().setSwitch(\"edns-subnet-processing\",\"If we should act on EDNS Subnet options\")=\"no\"; \n  ::arg().setSwitch(\"any-to-tcp\",\"Answer ANY queries with tc=1, shunting to TCP\")=\"no\"; \n  ::arg().set(\"webserver-address\",\"IP Address of webserver to listen on\")=\"127.0.0.1\";\n  ::arg().set(\"webserver-port\",\"Port of webserver to listen on\")=\"8081\";\n  ::arg().set(\"webserver-password\",\"Password required for accessing the webserver\")=\"\";\n  ::arg().set(\"webserver-allow-from\",\"Webserver access is only allowed from these subnets\")=\"0.0.0.0/0,::/0\";\n\n  ::arg().setSwitch(\"out-of-zone-additional-processing\",\"Do out of zone additional processing\")=\"yes\";\n  ::arg().setSwitch(\"do-ipv6-additional-processing\", \"Do AAAA additional processing\")=\"yes\";\n  ::arg().setSwitch(\"query-logging\",\"Hint backends that queries should be logged\")=\"no\";\n\n  ::arg().set(\"carbon-ourname\", \"If set, overrides our reported hostname for carbon stats\")=\"\";\n  ::arg().set(\"carbon-server\", \"If set, send metrics in carbon (graphite) format to this server\")=\"\";\n  ::arg().set(\"carbon-interval\", \"Number of seconds between carbon (graphite) updates\")=\"30\";\n\n  ::arg().set(\"cache-ttl\",\"Seconds to store packets in the PacketCache\")=\"20\";\n  ::arg().set(\"recursive-cache-ttl\",\"Seconds to store packets for recursive queries in the PacketCache\")=\"10\";\n  ::arg().set(\"negquery-cache-ttl\",\"Seconds to store negative query results in the QueryCache\")=\"60\";\n  ::arg().set(\"query-cache-ttl\",\"Seconds to store query results in the QueryCache\")=\"20\";\n  ::arg().set(\"soa-minimum-ttl\",\"Default SOA minimum ttl\")=\"3600\";\n  ::arg().set(\"server-id\", \"Returned when queried for 'server.id' TXT or NSID, defaults to hostname - disabled or custom\")=\"\";\n  ::arg().set(\"soa-refresh-default\",\"Default SOA refresh\")=\"10800\";\n  ::arg().set(\"soa-retry-default\",\"Default SOA retry\")=\"3600\";\n  ::arg().set(\"soa-expire-default\",\"Default SOA expire\")=\"604800\";\n  ::arg().set(\"default-soa-edit\",\"Default SOA-EDIT value\")=\"\";\n  ::arg().set(\"default-soa-edit-signed\",\"Default SOA-EDIT value for signed zones\")=\"\";\n  ::arg().set(\"dnssec-key-cache-ttl\",\"Seconds to cache DNSSEC keys from the database\")=\"30\";\n  ::arg().set(\"domain-metadata-cache-ttl\",\"Seconds to cache domain metadata from the database\")=\"60\";\n\n  ::arg().set(\"trusted-notification-proxy\", \"IP address of incoming notification proxy\")=\"\";\n  ::arg().set(\"slave-renotify\", \"If we should send out notifications for slaved updates\")=\"no\";\n\n  ::arg().set(\"default-ttl\",\"Seconds a result is valid if not set otherwise\")=\"3600\";\n  ::arg().set(\"max-tcp-connections\",\"Maximum number of TCP connections\")=\"20\";\n  ::arg().setSwitch(\"no-shuffle\",\"Set this to prevent random shuffling of answers - for regression testing\")=\"off\";\n\n  ::arg().set(\"setuid\",\"If set, change user id to this uid for more security\")=\"\";\n  ::arg().set(\"setgid\",\"If set, change group id to this gid for more security\")=\"\";\n\n  ::arg().set(\"max-cache-entries\", \"Maximum number of cache entries\")=\"1000000\";\n  ::arg().set(\"max-signature-cache-entries\", \"Maximum number of signatures cache entries\")=\"\";\n  ::arg().set(\"max-ent-entries\", \"Maximum number of empty non-terminals in a zone\")=\"100000\";\n  ::arg().set(\"entropy-source\", \"If set, read entropy from this file\")=\"/dev/urandom\";\n\n  ::arg().set(\"lua-prequery-script\", \"Lua script with prequery handler (DO NOT USE)\")=\"\";\n  ::arg().set(\"experimental-lua-policy-script\", \"Lua script for the policy engine\")=\"\";\n\n  ::arg().setSwitch(\"traceback-handler\",\"Enable the traceback handler (Linux only)\")=\"yes\";\n  ::arg().setSwitch(\"direct-dnskey\",\"Fetch DNSKEY RRs from backend during DNSKEY synthesis\")=\"no\";\n  ::arg().set(\"default-ksk-algorithms\",\"Default KSK algorithms\")=\"ecdsa256\";\n  ::arg().set(\"default-ksk-size\",\"Default KSK size (0 means default)\")=\"0\";\n  ::arg().set(\"default-zsk-algorithms\",\"Default ZSK algorithms\")=\"\";\n  ::arg().set(\"default-zsk-size\",\"Default ZSK size (0 means default)\")=\"0\";\n  ::arg().set(\"max-nsec3-iterations\",\"Limit the number of NSEC3 hash iterations\")=\"500\"; // RFC5155 10.3\n\n  ::arg().set(\"include-dir\",\"Include *.conf files from this directory\");\n  ::arg().set(\"security-poll-suffix\",\"Domain name from which to query security update notifications\")=\"secpoll.powerdns.com.\";\n\n  ::arg().setSwitch(\"outgoing-axfr-expand-alias\", \"Expand ALIAS records during outgoing AXFR\")=\"no\";\n  ::arg().setSwitch(\"8bit-dns\", \"Allow 8bit dns queries\")=\"no\";\n}",
  "abstract_func_before": "void declareArguments()\n{\n  ::arg().set(\"local-port\",\"The port on which we listen\")=\"53\";\n  ::arg().setSwitch(\"dnsupdate\",\"Enable/Disable DNS update (RFC2136) support. Default is no.\")=\"no\";\n  ::arg().setSwitch(\"write-pid\",\"Write a PID file\")=\"yes\";\n  ::arg().set(\"allow-dnsupdate-from\",\"A global setting to allow DNS updates from these IP ranges.\")=\"127.0.0.0/8,::1\";\n  ::arg().set(\"allow-unsigned-notify\",\"Allow unsigned notifications for TSIG secured domains\")=\"yes\"; /* COMMENT_0 */\n  ::arg().set(\"allow-unsigned-supermaster\", \"Allow supermasters to create zones without TSIG signed NOTIFY\")=\"yes\";\n  ::arg().setSwitch(\"forward-dnsupdate\",\"A global setting to allow DNS update packages that are for a Slave domain, to be forwarded to the master.\")=\"yes\";\n  ::arg().setSwitch(\"log-dns-details\",\"If PDNS should log DNS non-erroneous details\")=\"no\";\n  ::arg().setSwitch(\"log-dns-queries\",\"If PDNS should log all incoming DNS queries\")=\"no\";\n  ::arg().set(\"local-address\",\"Local IP addresses to which we bind\")=\"0.0.0.0\";\n  ::arg().setSwitch(\"local-address-nonexist-fail\",\"Fail to start if one or more of the local-address's do not exist on this server\")=\"yes\";\n  ::arg().setSwitch(\"non-local-bind\", \"Enable binding to non-local addresses by using FREEBIND / BINDANY socket options\")=\"no\";\n  ::arg().set(\"local-ipv6\",\"Local IP address to which we bind\")=\"::\";\n  ::arg().setSwitch(\"reuseport\",\"Enable higher performance on compliant kernels by using SO_REUSEPORT allowing each receiver thread to open its own socket\")=\"no\";\n  ::arg().setSwitch(\"local-ipv6-nonexist-fail\",\"Fail to start if one or more of the local-ipv6 addresses do not exist on this server\")=\"yes\";\n  ::arg().set(\"query-local-address\",\"Source IP address for sending queries\")=\"0.0.0.0\";\n  ::arg().set(\"query-local-address6\",\"Source IPv6 address for sending queries\")=\"::\";\n  ::arg().set(\"overload-queue-length\",\"Maximum queuelength moving to packetcache only\")=\"0\";\n  ::arg().set(\"max-queue-length\",\"Maximum queuelength before considering situation lost\")=\"5000\";\n\n  ::arg().set(\"retrieval-threads\", \"Number of AXFR-retrieval threads for slave operation\")=\"2\";\n  ::arg().setSwitch(\"api\", \"Enable/disable the REST API\")=\"no\";\n  ::arg().set(\"api-key\", \"Static pre-shared authentication key for access to the REST API\")=\"\";\n  ::arg().set(\"api-logfile\", \"Location of the server logfile (used by the REST API)\")=\"/var/log/pdns.log\";\n  ::arg().setSwitch(\"api-readonly\", \"Disallow data modification through the REST API when set\")=\"no\";\n  ::arg().setSwitch(\"dname-processing\", \"If we should support DNAME records\")=\"no\";\n\n  ::arg().setCmd(\"help\",\"Provide a helpful message\");\n  ::arg().setCmd(\"version\",\"Output version and compilation date\");\n  ::arg().setCmd(\"config\",\"Provide configuration file on standard output\");\n  ::arg().setCmd(\"list-modules\",\"Lists all modules available\");\n  ::arg().setCmd(\"no-config\",\"Don't parse configuration file\");\n  \n  ::arg().set(\"version-string\",\"PowerDNS version in packets - full, anonymous, powerdns or custom\")=\"full\"; \n  ::arg().set(\"control-console\",\"Debugging switch - don't use\")=\"no\"; /* COMMENT_1 */\n  ::arg().set(\"loglevel\",\"Amount of logging. Higher is more. Do not set below 3\")=\"4\";\n  ::arg().set(\"disable-syslog\",\"Disable logging to syslog, useful when running inside a supervisor that logs stdout\")=\"no\";\n  ::arg().set(\"default-soa-name\",\"name to insert in the SOA record if none set in the backend\")=\"a.misconfigured.powerdns.server\";\n  ::arg().set(\"default-soa-mail\",\"mail address to insert in the SOA record if none set in the backend\")=\"\";\n  ::arg().set(\"distributor-threads\",\"Default number of Distributor (backend) threads to start\")=\"3\";\n  ::arg().set(\"signing-threads\",\"Default number of signer threads to start\")=\"3\";\n  ::arg().set(\"receiver-threads\",\"Default number of receiver threads to start\")=\"1\";\n  ::arg().set(\"queue-limit\",\"Maximum number of milliseconds to queue a query\")=\"1500\"; \n  ::arg().set(\"recursor\",\"If recursion is desired, IP address of a recursing nameserver\")=\"no\"; \n  ::arg().set(\"allow-recursion\",\"List of subnets that are allowed to recurse\")=\"0.0.0.0/0\";\n  ::arg().set(\"udp-truncation-threshold\", \"Maximum UDP response size before we truncate\")=\"1680\";\n  ::arg().set(\"disable-tcp\",\"Do not listen to TCP queries\")=\"no\";\n  \n  ::arg().set(\"config-name\",\"Name of this virtual configuration - will rename the binary image\")=\"\";\n\n  ::arg().set(\"load-modules\",\"Load this module - supply absolute or relative path\")=\"\";\n  ::arg().set(\"launch\",\"Which backends to launch and order to query them in\")=\"\";\n  ::arg().setSwitch(\"disable-axfr\",\"Disable zonetransfers but do allow TCP queries\")=\"no\";\n  ::arg().set(\"allow-axfr-ips\",\"Allow zonetransfers only to these subnets\")=\"127.0.0.0/8,::1\";\n  ::arg().set(\"only-notify\", \"Only send AXFR NOTIFY to these IP addresses or netmasks\")=\"0.0.0.0/0,::/0\";\n  ::arg().set(\"also-notify\", \"When notifying a domain, also notify these nameservers\")=\"\";\n  ::arg().set(\"allow-notify-from\",\"Allow AXFR NOTIFY from these IP ranges. If empty, drop all incoming notifies.\")=\"0.0.0.0/0,::/0\";\n  ::arg().set(\"slave-cycle-interval\",\"Schedule slave freshness checks once every .. seconds\")=\"60\";\n\n  ::arg().set(\"tcp-control-address\",\"If set, PowerDNS can be controlled over TCP on this address\")=\"\";\n  ::arg().set(\"tcp-control-port\",\"If set, PowerDNS can be controlled over TCP on this address\")=\"53000\";\n  ::arg().set(\"tcp-control-secret\",\"If set, PowerDNS can be controlled over TCP after passing this secret\")=\"\";\n  ::arg().set(\"tcp-control-range\",\"If set, remote control of PowerDNS is possible over these networks only\")=\"127.0.0.0/8, 10.0.0.0/8, 192.168.0.0/16, 172.16.0.0/12, ::1/128, fe80::/10\";\n  \n  ::arg().setSwitch(\"slave\",\"Act as a slave\")=\"no\";\n  ::arg().setSwitch(\"master\",\"Act as a master\")=\"no\";\n  ::arg().setSwitch(\"disable-axfr-rectify\",\"Disable the rectify step during an outgoing AXFR. Only required for regression testing.\")=\"no\";\n  ::arg().setSwitch(\"guardian\",\"Run within a guardian process\")=\"no\";\n  ::arg().setSwitch(\"prevent-self-notification\",\"Don't send notifications to what we think is ourself\")=\"yes\";\n  ::arg().setSwitch(\"webserver\",\"Start a webserver for monitoring\")=\"no\"; \n  ::arg().setSwitch(\"webserver-print-arguments\",\"If the webserver should print arguments\")=\"no\"; \n  ::arg().setSwitch(\"edns-subnet-processing\",\"If we should act on EDNS Subnet options\")=\"no\"; \n  ::arg().setSwitch(\"any-to-tcp\",\"Answer ANY queries with tc=1, shunting to TCP\")=\"no\"; \n  ::arg().set(\"webserver-address\",\"IP Address of webserver to listen on\")=\"127.0.0.1\";\n  ::arg().set(\"webserver-port\",\"Port of webserver to listen on\")=\"8081\";\n  ::arg().set(\"webserver-password\",\"Password required for accessing the webserver\")=\"\";\n  ::arg().set(\"webserver-allow-from\",\"Webserver access is only allowed from these subnets\")=\"0.0.0.0/0,::/0\";\n\n  ::arg().setSwitch(\"out-of-zone-additional-processing\",\"Do out of zone additional processing\")=\"yes\";\n  ::arg().setSwitch(\"do-ipv6-additional-processing\", \"Do AAAA additional processing\")=\"yes\";\n  ::arg().setSwitch(\"query-logging\",\"Hint backends that queries should be logged\")=\"no\";\n\n  ::arg().set(\"carbon-ourname\", \"If set, overrides our reported hostname for carbon stats\")=\"\";\n  ::arg().set(\"carbon-server\", \"If set, send metrics in carbon (graphite) format to this server\")=\"\";\n  ::arg().set(\"carbon-interval\", \"Number of seconds between carbon (graphite) updates\")=\"30\";\n\n  ::arg().set(\"cache-ttl\",\"Seconds to store packets in the PacketCache\")=\"20\";\n  ::arg().set(\"recursive-cache-ttl\",\"Seconds to store packets for recursive queries in the PacketCache\")=\"10\";\n  ::arg().set(\"negquery-cache-ttl\",\"Seconds to store negative query results in the QueryCache\")=\"60\";\n  ::arg().set(\"query-cache-ttl\",\"Seconds to store query results in the QueryCache\")=\"20\";\n  ::arg().set(\"soa-minimum-ttl\",\"Default SOA minimum ttl\")=\"3600\";\n  ::arg().set(\"server-id\", \"Returned when queried for 'server.id' TXT or NSID, defaults to hostname - disabled or custom\")=\"\";\n  ::arg().set(\"soa-refresh-default\",\"Default SOA refresh\")=\"10800\";\n  ::arg().set(\"soa-retry-default\",\"Default SOA retry\")=\"3600\";\n  ::arg().set(\"soa-expire-default\",\"Default SOA expire\")=\"604800\";\n  ::arg().set(\"default-soa-edit\",\"Default SOA-EDIT value\")=\"\";\n  ::arg().set(\"default-soa-edit-signed\",\"Default SOA-EDIT value for signed zones\")=\"\";\n  ::arg().set(\"dnssec-key-cache-ttl\",\"Seconds to cache DNSSEC keys from the database\")=\"30\";\n  ::arg().set(\"domain-metadata-cache-ttl\",\"Seconds to cache domain metadata from the database\")=\"60\";\n\n  ::arg().set(\"trusted-notification-proxy\", \"IP address of incoming notification proxy\")=\"\";\n  ::arg().set(\"slave-renotify\", \"If we should send out notifications for slaved updates\")=\"no\";\n\n  ::arg().set(\"default-ttl\",\"Seconds a result is valid if not set otherwise\")=\"3600\";\n  ::arg().set(\"max-tcp-connections\",\"Maximum number of TCP connections\")=\"20\";\n  ::arg().setSwitch(\"no-shuffle\",\"Set this to prevent random shuffling of answers - for regression testing\")=\"off\";\n\n  ::arg().set(\"setuid\",\"If set, change user id to this uid for more security\")=\"\";\n  ::arg().set(\"setgid\",\"If set, change group id to this gid for more security\")=\"\";\n\n  ::arg().set(\"max-cache-entries\", \"Maximum number of cache entries\")=\"1000000\";\n  ::arg().set(\"max-signature-cache-entries\", \"Maximum number of signatures cache entries\")=\"\";\n  ::arg().set(\"max-ent-entries\", \"Maximum number of empty non-terminals in a zone\")=\"100000\";\n  ::arg().set(\"entropy-source\", \"If set, read entropy from this file\")=\"/dev/urandom\";\n\n  ::arg().set(\"lua-prequery-script\", \"Lua script with prequery handler (DO NOT USE)\")=\"\";\n  ::arg().set(\"experimental-lua-policy-script\", \"Lua script for the policy engine\")=\"\";\n\n  ::arg().setSwitch(\"traceback-handler\",\"Enable the traceback handler (Linux only)\")=\"yes\";\n  ::arg().setSwitch(\"direct-dnskey\",\"Fetch DNSKEY RRs from backend during DNSKEY synthesis\")=\"no\";\n  ::arg().set(\"default-ksk-algorithms\",\"Default KSK algorithms\")=\"ecdsa256\";\n  ::arg().set(\"default-ksk-size\",\"Default KSK size (0 means default)\")=\"0\";\n  ::arg().set(\"default-zsk-algorithms\",\"Default ZSK algorithms\")=\"\";\n  ::arg().set(\"default-zsk-size\",\"Default ZSK size (0 means default)\")=\"0\";\n  ::arg().set(\"max-nsec3-iterations\",\"Limit the number of NSEC3 hash iterations\")=\"500\"; /* COMMENT_2 */\n\n  ::arg().set(\"include-dir\",\"Include *.conf files from this directory\");\n  ::arg().set(\"security-poll-suffix\",\"Domain name from which to query security update notifications\")=\"secpoll.powerdns.com.\";\n\n  ::arg().setSwitch(\"outgoing-axfr-expand-alias\", \"Expand ALIAS records during outgoing AXFR\")=\"no\";\n  ::arg().setSwitch(\"8bit-dns\", \"Allow 8bit dns queries\")=\"no\";\n}",
  "func_graph_path_before": "PowerDNS/pdns/db8f9152168acf5d548d4f256789eae783e01667/common_startup.cc/vul/before/0.json",
  "func": "void declareArguments()\n{\n  ::arg().set(\"local-port\",\"The port on which we listen\")=\"53\";\n  ::arg().setSwitch(\"dnsupdate\",\"Enable/Disable DNS update (RFC2136) support. Default is no.\")=\"no\";\n  ::arg().setSwitch(\"write-pid\",\"Write a PID file\")=\"yes\";\n  ::arg().set(\"allow-dnsupdate-from\",\"A global setting to allow DNS updates from these IP ranges.\")=\"127.0.0.0/8,::1\";\n  ::arg().set(\"allow-unsigned-notify\",\"Allow unsigned notifications for TSIG secured domains\")=\"yes\"; //FIXME: change to 'no' later\n  ::arg().set(\"allow-unsigned-supermaster\", \"Allow supermasters to create zones without TSIG signed NOTIFY\")=\"yes\";\n  ::arg().setSwitch(\"forward-dnsupdate\",\"A global setting to allow DNS update packages that are for a Slave domain, to be forwarded to the master.\")=\"yes\";\n  ::arg().setSwitch(\"log-dns-details\",\"If PDNS should log DNS non-erroneous details\")=\"no\";\n  ::arg().setSwitch(\"log-dns-queries\",\"If PDNS should log all incoming DNS queries\")=\"no\";\n  ::arg().set(\"local-address\",\"Local IP addresses to which we bind\")=\"0.0.0.0\";\n  ::arg().setSwitch(\"local-address-nonexist-fail\",\"Fail to start if one or more of the local-address's do not exist on this server\")=\"yes\";\n  ::arg().setSwitch(\"non-local-bind\", \"Enable binding to non-local addresses by using FREEBIND / BINDANY socket options\")=\"no\";\n  ::arg().set(\"local-ipv6\",\"Local IP address to which we bind\")=\"::\";\n  ::arg().setSwitch(\"reuseport\",\"Enable higher performance on compliant kernels by using SO_REUSEPORT allowing each receiver thread to open its own socket\")=\"no\";\n  ::arg().setSwitch(\"local-ipv6-nonexist-fail\",\"Fail to start if one or more of the local-ipv6 addresses do not exist on this server\")=\"yes\";\n  ::arg().set(\"query-local-address\",\"Source IP address for sending queries\")=\"0.0.0.0\";\n  ::arg().set(\"query-local-address6\",\"Source IPv6 address for sending queries\")=\"::\";\n  ::arg().set(\"overload-queue-length\",\"Maximum queuelength moving to packetcache only\")=\"0\";\n  ::arg().set(\"max-queue-length\",\"Maximum queuelength before considering situation lost\")=\"5000\";\n\n  ::arg().set(\"retrieval-threads\", \"Number of AXFR-retrieval threads for slave operation\")=\"2\";\n  ::arg().setSwitch(\"api\", \"Enable/disable the REST API\")=\"no\";\n  ::arg().set(\"api-key\", \"Static pre-shared authentication key for access to the REST API\")=\"\";\n  ::arg().set(\"api-logfile\", \"Location of the server logfile (used by the REST API)\")=\"/var/log/pdns.log\";\n  ::arg().setSwitch(\"api-readonly\", \"Disallow data modification through the REST API when set\")=\"no\";\n  ::arg().setSwitch(\"dname-processing\", \"If we should support DNAME records\")=\"no\";\n\n  ::arg().setCmd(\"help\",\"Provide a helpful message\");\n  ::arg().setCmd(\"version\",\"Output version and compilation date\");\n  ::arg().setCmd(\"config\",\"Provide configuration file on standard output\");\n  ::arg().setCmd(\"list-modules\",\"Lists all modules available\");\n  ::arg().setCmd(\"no-config\",\"Don't parse configuration file\");\n  \n  ::arg().set(\"version-string\",\"PowerDNS version in packets - full, anonymous, powerdns or custom\")=\"full\"; \n  ::arg().set(\"control-console\",\"Debugging switch - don't use\")=\"no\"; // but I know you will!\n  ::arg().set(\"loglevel\",\"Amount of logging. Higher is more. Do not set below 3\")=\"4\";\n  ::arg().set(\"disable-syslog\",\"Disable logging to syslog, useful when running inside a supervisor that logs stdout\")=\"no\";\n  ::arg().set(\"default-soa-name\",\"name to insert in the SOA record if none set in the backend\")=\"a.misconfigured.powerdns.server\";\n  ::arg().set(\"default-soa-mail\",\"mail address to insert in the SOA record if none set in the backend\")=\"\";\n  ::arg().set(\"distributor-threads\",\"Default number of Distributor (backend) threads to start\")=\"3\";\n  ::arg().set(\"signing-threads\",\"Default number of signer threads to start\")=\"3\";\n  ::arg().set(\"receiver-threads\",\"Default number of receiver threads to start\")=\"1\";\n  ::arg().set(\"queue-limit\",\"Maximum number of milliseconds to queue a query\")=\"1500\"; \n  ::arg().set(\"recursor\",\"If recursion is desired, IP address of a recursing nameserver\")=\"no\"; \n  ::arg().set(\"allow-recursion\",\"List of subnets that are allowed to recurse\")=\"0.0.0.0/0\";\n  ::arg().set(\"udp-truncation-threshold\", \"Maximum UDP response size before we truncate\")=\"1680\";\n  ::arg().set(\"disable-tcp\",\"Do not listen to TCP queries\")=\"no\";\n  \n  ::arg().set(\"config-name\",\"Name of this virtual configuration - will rename the binary image\")=\"\";\n\n  ::arg().set(\"load-modules\",\"Load this module - supply absolute or relative path\")=\"\";\n  ::arg().set(\"launch\",\"Which backends to launch and order to query them in\")=\"\";\n  ::arg().setSwitch(\"disable-axfr\",\"Disable zonetransfers but do allow TCP queries\")=\"no\";\n  ::arg().set(\"allow-axfr-ips\",\"Allow zonetransfers only to these subnets\")=\"127.0.0.0/8,::1\";\n  ::arg().set(\"only-notify\", \"Only send AXFR NOTIFY to these IP addresses or netmasks\")=\"0.0.0.0/0,::/0\";\n  ::arg().set(\"also-notify\", \"When notifying a domain, also notify these nameservers\")=\"\";\n  ::arg().set(\"allow-notify-from\",\"Allow AXFR NOTIFY from these IP ranges. If empty, drop all incoming notifies.\")=\"0.0.0.0/0,::/0\";\n  ::arg().set(\"slave-cycle-interval\",\"Schedule slave freshness checks once every .. seconds\")=\"60\";\n\n  ::arg().set(\"tcp-control-address\",\"If set, PowerDNS can be controlled over TCP on this address\")=\"\";\n  ::arg().set(\"tcp-control-port\",\"If set, PowerDNS can be controlled over TCP on this address\")=\"53000\";\n  ::arg().set(\"tcp-control-secret\",\"If set, PowerDNS can be controlled over TCP after passing this secret\")=\"\";\n  ::arg().set(\"tcp-control-range\",\"If set, remote control of PowerDNS is possible over these networks only\")=\"127.0.0.0/8, 10.0.0.0/8, 192.168.0.0/16, 172.16.0.0/12, ::1/128, fe80::/10\";\n  \n  ::arg().setSwitch(\"slave\",\"Act as a slave\")=\"no\";\n  ::arg().setSwitch(\"master\",\"Act as a master\")=\"no\";\n  ::arg().setSwitch(\"disable-axfr-rectify\",\"Disable the rectify step during an outgoing AXFR. Only required for regression testing.\")=\"no\";\n  ::arg().setSwitch(\"guardian\",\"Run within a guardian process\")=\"no\";\n  ::arg().setSwitch(\"prevent-self-notification\",\"Don't send notifications to what we think is ourself\")=\"yes\";\n  ::arg().setSwitch(\"webserver\",\"Start a webserver for monitoring\")=\"no\"; \n  ::arg().setSwitch(\"webserver-print-arguments\",\"If the webserver should print arguments\")=\"no\"; \n  ::arg().setSwitch(\"edns-subnet-processing\",\"If we should act on EDNS Subnet options\")=\"no\"; \n  ::arg().setSwitch(\"any-to-tcp\",\"Answer ANY queries with tc=1, shunting to TCP\")=\"no\"; \n  ::arg().set(\"webserver-address\",\"IP Address of webserver to listen on\")=\"127.0.0.1\";\n  ::arg().set(\"webserver-port\",\"Port of webserver to listen on\")=\"8081\";\n  ::arg().set(\"webserver-password\",\"Password required for accessing the webserver\")=\"\";\n  ::arg().set(\"webserver-allow-from\",\"Webserver access is only allowed from these subnets\")=\"0.0.0.0/0,::/0\";\n\n  ::arg().setSwitch(\"out-of-zone-additional-processing\",\"Do out of zone additional processing\")=\"yes\";\n  ::arg().setSwitch(\"do-ipv6-additional-processing\", \"Do AAAA additional processing\")=\"yes\";\n  ::arg().setSwitch(\"query-logging\",\"Hint backends that queries should be logged\")=\"no\";\n\n  ::arg().set(\"carbon-ourname\", \"If set, overrides our reported hostname for carbon stats\")=\"\";\n  ::arg().set(\"carbon-server\", \"If set, send metrics in carbon (graphite) format to this server\")=\"\";\n  ::arg().set(\"carbon-interval\", \"Number of seconds between carbon (graphite) updates\")=\"30\";\n\n  ::arg().set(\"cache-ttl\",\"Seconds to store packets in the PacketCache\")=\"20\";\n  ::arg().set(\"recursive-cache-ttl\",\"Seconds to store packets for recursive queries in the PacketCache\")=\"10\";\n  ::arg().set(\"negquery-cache-ttl\",\"Seconds to store negative query results in the QueryCache\")=\"60\";\n  ::arg().set(\"query-cache-ttl\",\"Seconds to store query results in the QueryCache\")=\"20\";\n  ::arg().set(\"soa-minimum-ttl\",\"Default SOA minimum ttl\")=\"3600\";\n  ::arg().set(\"server-id\", \"Returned when queried for 'server.id' TXT or NSID, defaults to hostname - disabled or custom\")=\"\";\n  ::arg().set(\"soa-refresh-default\",\"Default SOA refresh\")=\"10800\";\n  ::arg().set(\"soa-retry-default\",\"Default SOA retry\")=\"3600\";\n  ::arg().set(\"soa-expire-default\",\"Default SOA expire\")=\"604800\";\n  ::arg().set(\"default-soa-edit\",\"Default SOA-EDIT value\")=\"\";\n  ::arg().set(\"default-soa-edit-signed\",\"Default SOA-EDIT value for signed zones\")=\"\";\n  ::arg().set(\"dnssec-key-cache-ttl\",\"Seconds to cache DNSSEC keys from the database\")=\"30\";\n  ::arg().set(\"domain-metadata-cache-ttl\",\"Seconds to cache domain metadata from the database\")=\"60\";\n\n  ::arg().set(\"trusted-notification-proxy\", \"IP address of incoming notification proxy\")=\"\";\n  ::arg().set(\"slave-renotify\", \"If we should send out notifications for slaved updates\")=\"no\";\n\n  ::arg().set(\"default-ttl\",\"Seconds a result is valid if not set otherwise\")=\"3600\";\n  ::arg().set(\"max-tcp-connections\",\"Maximum number of TCP connections\")=\"20\";\n  ::arg().setSwitch(\"no-shuffle\",\"Set this to prevent random shuffling of answers - for regression testing\")=\"off\";\n\n  ::arg().set(\"setuid\",\"If set, change user id to this uid for more security\")=\"\";\n  ::arg().set(\"setgid\",\"If set, change group id to this gid for more security\")=\"\";\n\n  ::arg().set(\"max-cache-entries\", \"Maximum number of cache entries\")=\"1000000\";\n  ::arg().set(\"max-signature-cache-entries\", \"Maximum number of signatures cache entries\")=\"\";\n  ::arg().set(\"max-ent-entries\", \"Maximum number of empty non-terminals in a zone\")=\"100000\";\n  ::arg().set(\"entropy-source\", \"If set, read entropy from this file\")=\"/dev/urandom\";\n\n  ::arg().set(\"lua-prequery-script\", \"Lua script with prequery handler (DO NOT USE)\")=\"\";\n  ::arg().set(\"experimental-lua-policy-script\", \"Lua script for the policy engine\")=\"\";\n\n  ::arg().setSwitch(\"traceback-handler\",\"Enable the traceback handler (Linux only)\")=\"yes\";\n  ::arg().setSwitch(\"direct-dnskey\",\"Fetch DNSKEY RRs from backend during DNSKEY synthesis\")=\"no\";\n  ::arg().set(\"default-ksk-algorithms\",\"Default KSK algorithms\")=\"ecdsa256\";\n  ::arg().set(\"default-ksk-size\",\"Default KSK size (0 means default)\")=\"0\";\n  ::arg().set(\"default-zsk-algorithms\",\"Default ZSK algorithms\")=\"\";\n  ::arg().set(\"default-zsk-size\",\"Default ZSK size (0 means default)\")=\"0\";\n  ::arg().set(\"max-nsec3-iterations\",\"Limit the number of NSEC3 hash iterations\")=\"500\"; // RFC5155 10.3\n\n  ::arg().set(\"include-dir\",\"Include *.conf files from this directory\");\n  ::arg().set(\"security-poll-suffix\",\"Domain name from which to query security update notifications\")=\"secpoll.powerdns.com.\";\n\n  ::arg().setSwitch(\"outgoing-axfr-expand-alias\", \"Expand ALIAS records during outgoing AXFR\")=\"no\";\n  ::arg().setSwitch(\"8bit-dns\", \"Allow 8bit dns queries\")=\"no\";\n\n  ::arg().set(\"xfr-max-received-mbytes\", \"Maximum number of megabytes received from an incoming XFR\")=\"100\";\n}",
  "abstract_func": "void declareArguments()\n{\n  ::arg().set(\"local-port\",\"The port on which we listen\")=\"53\";\n  ::arg().setSwitch(\"dnsupdate\",\"Enable/Disable DNS update (RFC2136) support. Default is no.\")=\"no\";\n  ::arg().setSwitch(\"write-pid\",\"Write a PID file\")=\"yes\";\n  ::arg().set(\"allow-dnsupdate-from\",\"A global setting to allow DNS updates from these IP ranges.\")=\"127.0.0.0/8,::1\";\n  ::arg().set(\"allow-unsigned-notify\",\"Allow unsigned notifications for TSIG secured domains\")=\"yes\"; /* COMMENT_0 */\n  ::arg().set(\"allow-unsigned-supermaster\", \"Allow supermasters to create zones without TSIG signed NOTIFY\")=\"yes\";\n  ::arg().setSwitch(\"forward-dnsupdate\",\"A global setting to allow DNS update packages that are for a Slave domain, to be forwarded to the master.\")=\"yes\";\n  ::arg().setSwitch(\"log-dns-details\",\"If PDNS should log DNS non-erroneous details\")=\"no\";\n  ::arg().setSwitch(\"log-dns-queries\",\"If PDNS should log all incoming DNS queries\")=\"no\";\n  ::arg().set(\"local-address\",\"Local IP addresses to which we bind\")=\"0.0.0.0\";\n  ::arg().setSwitch(\"local-address-nonexist-fail\",\"Fail to start if one or more of the local-address's do not exist on this server\")=\"yes\";\n  ::arg().setSwitch(\"non-local-bind\", \"Enable binding to non-local addresses by using FREEBIND / BINDANY socket options\")=\"no\";\n  ::arg().set(\"local-ipv6\",\"Local IP address to which we bind\")=\"::\";\n  ::arg().setSwitch(\"reuseport\",\"Enable higher performance on compliant kernels by using SO_REUSEPORT allowing each receiver thread to open its own socket\")=\"no\";\n  ::arg().setSwitch(\"local-ipv6-nonexist-fail\",\"Fail to start if one or more of the local-ipv6 addresses do not exist on this server\")=\"yes\";\n  ::arg().set(\"query-local-address\",\"Source IP address for sending queries\")=\"0.0.0.0\";\n  ::arg().set(\"query-local-address6\",\"Source IPv6 address for sending queries\")=\"::\";\n  ::arg().set(\"overload-queue-length\",\"Maximum queuelength moving to packetcache only\")=\"0\";\n  ::arg().set(\"max-queue-length\",\"Maximum queuelength before considering situation lost\")=\"5000\";\n\n  ::arg().set(\"retrieval-threads\", \"Number of AXFR-retrieval threads for slave operation\")=\"2\";\n  ::arg().setSwitch(\"api\", \"Enable/disable the REST API\")=\"no\";\n  ::arg().set(\"api-key\", \"Static pre-shared authentication key for access to the REST API\")=\"\";\n  ::arg().set(\"api-logfile\", \"Location of the server logfile (used by the REST API)\")=\"/var/log/pdns.log\";\n  ::arg().setSwitch(\"api-readonly\", \"Disallow data modification through the REST API when set\")=\"no\";\n  ::arg().setSwitch(\"dname-processing\", \"If we should support DNAME records\")=\"no\";\n\n  ::arg().setCmd(\"help\",\"Provide a helpful message\");\n  ::arg().setCmd(\"version\",\"Output version and compilation date\");\n  ::arg().setCmd(\"config\",\"Provide configuration file on standard output\");\n  ::arg().setCmd(\"list-modules\",\"Lists all modules available\");\n  ::arg().setCmd(\"no-config\",\"Don't parse configuration file\");\n  \n  ::arg().set(\"version-string\",\"PowerDNS version in packets - full, anonymous, powerdns or custom\")=\"full\"; \n  ::arg().set(\"control-console\",\"Debugging switch - don't use\")=\"no\"; /* COMMENT_1 */\n  ::arg().set(\"loglevel\",\"Amount of logging. Higher is more. Do not set below 3\")=\"4\";\n  ::arg().set(\"disable-syslog\",\"Disable logging to syslog, useful when running inside a supervisor that logs stdout\")=\"no\";\n  ::arg().set(\"default-soa-name\",\"name to insert in the SOA record if none set in the backend\")=\"a.misconfigured.powerdns.server\";\n  ::arg().set(\"default-soa-mail\",\"mail address to insert in the SOA record if none set in the backend\")=\"\";\n  ::arg().set(\"distributor-threads\",\"Default number of Distributor (backend) threads to start\")=\"3\";\n  ::arg().set(\"signing-threads\",\"Default number of signer threads to start\")=\"3\";\n  ::arg().set(\"receiver-threads\",\"Default number of receiver threads to start\")=\"1\";\n  ::arg().set(\"queue-limit\",\"Maximum number of milliseconds to queue a query\")=\"1500\"; \n  ::arg().set(\"recursor\",\"If recursion is desired, IP address of a recursing nameserver\")=\"no\"; \n  ::arg().set(\"allow-recursion\",\"List of subnets that are allowed to recurse\")=\"0.0.0.0/0\";\n  ::arg().set(\"udp-truncation-threshold\", \"Maximum UDP response size before we truncate\")=\"1680\";\n  ::arg().set(\"disable-tcp\",\"Do not listen to TCP queries\")=\"no\";\n  \n  ::arg().set(\"config-name\",\"Name of this virtual configuration - will rename the binary image\")=\"\";\n\n  ::arg().set(\"load-modules\",\"Load this module - supply absolute or relative path\")=\"\";\n  ::arg().set(\"launch\",\"Which backends to launch and order to query them in\")=\"\";\n  ::arg().setSwitch(\"disable-axfr\",\"Disable zonetransfers but do allow TCP queries\")=\"no\";\n  ::arg().set(\"allow-axfr-ips\",\"Allow zonetransfers only to these subnets\")=\"127.0.0.0/8,::1\";\n  ::arg().set(\"only-notify\", \"Only send AXFR NOTIFY to these IP addresses or netmasks\")=\"0.0.0.0/0,::/0\";\n  ::arg().set(\"also-notify\", \"When notifying a domain, also notify these nameservers\")=\"\";\n  ::arg().set(\"allow-notify-from\",\"Allow AXFR NOTIFY from these IP ranges. If empty, drop all incoming notifies.\")=\"0.0.0.0/0,::/0\";\n  ::arg().set(\"slave-cycle-interval\",\"Schedule slave freshness checks once every .. seconds\")=\"60\";\n\n  ::arg().set(\"tcp-control-address\",\"If set, PowerDNS can be controlled over TCP on this address\")=\"\";\n  ::arg().set(\"tcp-control-port\",\"If set, PowerDNS can be controlled over TCP on this address\")=\"53000\";\n  ::arg().set(\"tcp-control-secret\",\"If set, PowerDNS can be controlled over TCP after passing this secret\")=\"\";\n  ::arg().set(\"tcp-control-range\",\"If set, remote control of PowerDNS is possible over these networks only\")=\"127.0.0.0/8, 10.0.0.0/8, 192.168.0.0/16, 172.16.0.0/12, ::1/128, fe80::/10\";\n  \n  ::arg().setSwitch(\"slave\",\"Act as a slave\")=\"no\";\n  ::arg().setSwitch(\"master\",\"Act as a master\")=\"no\";\n  ::arg().setSwitch(\"disable-axfr-rectify\",\"Disable the rectify step during an outgoing AXFR. Only required for regression testing.\")=\"no\";\n  ::arg().setSwitch(\"guardian\",\"Run within a guardian process\")=\"no\";\n  ::arg().setSwitch(\"prevent-self-notification\",\"Don't send notifications to what we think is ourself\")=\"yes\";\n  ::arg().setSwitch(\"webserver\",\"Start a webserver for monitoring\")=\"no\"; \n  ::arg().setSwitch(\"webserver-print-arguments\",\"If the webserver should print arguments\")=\"no\"; \n  ::arg().setSwitch(\"edns-subnet-processing\",\"If we should act on EDNS Subnet options\")=\"no\"; \n  ::arg().setSwitch(\"any-to-tcp\",\"Answer ANY queries with tc=1, shunting to TCP\")=\"no\"; \n  ::arg().set(\"webserver-address\",\"IP Address of webserver to listen on\")=\"127.0.0.1\";\n  ::arg().set(\"webserver-port\",\"Port of webserver to listen on\")=\"8081\";\n  ::arg().set(\"webserver-password\",\"Password required for accessing the webserver\")=\"\";\n  ::arg().set(\"webserver-allow-from\",\"Webserver access is only allowed from these subnets\")=\"0.0.0.0/0,::/0\";\n\n  ::arg().setSwitch(\"out-of-zone-additional-processing\",\"Do out of zone additional processing\")=\"yes\";\n  ::arg().setSwitch(\"do-ipv6-additional-processing\", \"Do AAAA additional processing\")=\"yes\";\n  ::arg().setSwitch(\"query-logging\",\"Hint backends that queries should be logged\")=\"no\";\n\n  ::arg().set(\"carbon-ourname\", \"If set, overrides our reported hostname for carbon stats\")=\"\";\n  ::arg().set(\"carbon-server\", \"If set, send metrics in carbon (graphite) format to this server\")=\"\";\n  ::arg().set(\"carbon-interval\", \"Number of seconds between carbon (graphite) updates\")=\"30\";\n\n  ::arg().set(\"cache-ttl\",\"Seconds to store packets in the PacketCache\")=\"20\";\n  ::arg().set(\"recursive-cache-ttl\",\"Seconds to store packets for recursive queries in the PacketCache\")=\"10\";\n  ::arg().set(\"negquery-cache-ttl\",\"Seconds to store negative query results in the QueryCache\")=\"60\";\n  ::arg().set(\"query-cache-ttl\",\"Seconds to store query results in the QueryCache\")=\"20\";\n  ::arg().set(\"soa-minimum-ttl\",\"Default SOA minimum ttl\")=\"3600\";\n  ::arg().set(\"server-id\", \"Returned when queried for 'server.id' TXT or NSID, defaults to hostname - disabled or custom\")=\"\";\n  ::arg().set(\"soa-refresh-default\",\"Default SOA refresh\")=\"10800\";\n  ::arg().set(\"soa-retry-default\",\"Default SOA retry\")=\"3600\";\n  ::arg().set(\"soa-expire-default\",\"Default SOA expire\")=\"604800\";\n  ::arg().set(\"default-soa-edit\",\"Default SOA-EDIT value\")=\"\";\n  ::arg().set(\"default-soa-edit-signed\",\"Default SOA-EDIT value for signed zones\")=\"\";\n  ::arg().set(\"dnssec-key-cache-ttl\",\"Seconds to cache DNSSEC keys from the database\")=\"30\";\n  ::arg().set(\"domain-metadata-cache-ttl\",\"Seconds to cache domain metadata from the database\")=\"60\";\n\n  ::arg().set(\"trusted-notification-proxy\", \"IP address of incoming notification proxy\")=\"\";\n  ::arg().set(\"slave-renotify\", \"If we should send out notifications for slaved updates\")=\"no\";\n\n  ::arg().set(\"default-ttl\",\"Seconds a result is valid if not set otherwise\")=\"3600\";\n  ::arg().set(\"max-tcp-connections\",\"Maximum number of TCP connections\")=\"20\";\n  ::arg().setSwitch(\"no-shuffle\",\"Set this to prevent random shuffling of answers - for regression testing\")=\"off\";\n\n  ::arg().set(\"setuid\",\"If set, change user id to this uid for more security\")=\"\";\n  ::arg().set(\"setgid\",\"If set, change group id to this gid for more security\")=\"\";\n\n  ::arg().set(\"max-cache-entries\", \"Maximum number of cache entries\")=\"1000000\";\n  ::arg().set(\"max-signature-cache-entries\", \"Maximum number of signatures cache entries\")=\"\";\n  ::arg().set(\"max-ent-entries\", \"Maximum number of empty non-terminals in a zone\")=\"100000\";\n  ::arg().set(\"entropy-source\", \"If set, read entropy from this file\")=\"/dev/urandom\";\n\n  ::arg().set(\"lua-prequery-script\", \"Lua script with prequery handler (DO NOT USE)\")=\"\";\n  ::arg().set(\"experimental-lua-policy-script\", \"Lua script for the policy engine\")=\"\";\n\n  ::arg().setSwitch(\"traceback-handler\",\"Enable the traceback handler (Linux only)\")=\"yes\";\n  ::arg().setSwitch(\"direct-dnskey\",\"Fetch DNSKEY RRs from backend during DNSKEY synthesis\")=\"no\";\n  ::arg().set(\"default-ksk-algorithms\",\"Default KSK algorithms\")=\"ecdsa256\";\n  ::arg().set(\"default-ksk-size\",\"Default KSK size (0 means default)\")=\"0\";\n  ::arg().set(\"default-zsk-algorithms\",\"Default ZSK algorithms\")=\"\";\n  ::arg().set(\"default-zsk-size\",\"Default ZSK size (0 means default)\")=\"0\";\n  ::arg().set(\"max-nsec3-iterations\",\"Limit the number of NSEC3 hash iterations\")=\"500\"; /* COMMENT_2 */\n\n  ::arg().set(\"include-dir\",\"Include *.conf files from this directory\");\n  ::arg().set(\"security-poll-suffix\",\"Domain name from which to query security update notifications\")=\"secpoll.powerdns.com.\";\n\n  ::arg().setSwitch(\"outgoing-axfr-expand-alias\", \"Expand ALIAS records during outgoing AXFR\")=\"no\";\n  ::arg().setSwitch(\"8bit-dns\", \"Allow 8bit dns queries\")=\"no\";\n\n  ::arg().set(\"xfr-max-received-mbytes\", \"Maximum number of megabytes received from an incoming XFR\")=\"100\";\n}",
  "func_graph_path": "PowerDNS/pdns/db8f9152168acf5d548d4f256789eae783e01667/common_startup.cc/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -131,4 +131,6 @@\n \n   ::arg().setSwitch(\"outgoing-axfr-expand-alias\", \"Expand ALIAS records during outgoing AXFR\")=\"no\";\n   ::arg().setSwitch(\"8bit-dns\", \"Allow 8bit dns queries\")=\"no\";\n+\n+  ::arg().set(\"xfr-max-received-mbytes\", \"Maximum number of megabytes received from an incoming XFR\")=\"100\";\n }",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "",
      "  ::arg().set(\"xfr-max-received-mbytes\", \"Maximum number of megabytes received from an incoming XFR\")=\"100\";"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/PowerDNS/pdns/pull/4133",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/PowerDNS/pdns/pull/4133: 403 Client Error: Forbidden for url: https://api.github.com/repos/PowerDNS/pdns/pulls/4133",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "Final Classification: Security Vulnerability Fix; Confidence: 1.0\n\n**Step-by-Step Explanation:**\n\n1. **Input Analysis:** The commit message mentions adding limits to AXFR and IXFR sizes to prevent memory exhaustion. The code diff introduces a new argument setting a maximum received size (100 MB).\n\n2. **Consistency Check:** The commit message and code changes are consistent. The code adds exactly what the message describes.\n\n3. **Purpose Evaluation:** The change modifies core logic by adding a memory limit, specifically targeting potential memory exhaustion, indicating a security concern.\n\n4. **Security Assessment:** Preventing memory exhaustion is a security measure against DoS attacks. The change adds a guard against excessive data intake, a known security risk.\n\n5. **Confidence:** All elements clearly point to a security fix, so the confidence is high.\n\n**Answer:** Security Vulnerability Fix; 1.0"
}