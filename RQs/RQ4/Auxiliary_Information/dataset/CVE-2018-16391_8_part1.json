{
  "cve_id": "CVE-2018-16391",
  "cwe_ids": [
    "CWE-415",
    "CWE-119"
  ],
  "cvss_vector": "AV:L/AC:L/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "OpenSC",
  "commit_msg": "fixed out of bounds writes\n\nThanks to Eric Sesterhenn from X41 D-SEC GmbH\nfor reporting the problems.",
  "commit_hash": "360e95d45ac4123255a4c796db96337f332160ad",
  "git_url": "https://github.com/OpenSC/OpenSC/commit/360e95d45ac4123255a4c796db96337f332160ad",
  "file_path": "src/tools/util.c",
  "func_name": "util_acl_to_str",
  "func_before": "const char * util_acl_to_str(const sc_acl_entry_t *e)\n{\n\tstatic char line[80], buf[20];\n\tunsigned int acl;\n\n\tif (e == NULL)\n\t\treturn \"N/A\";\n\tline[0] = 0;\n\twhile (e != NULL) {\n\t\tacl = e->method;\n\n\t\tswitch (acl) {\n\t\tcase SC_AC_UNKNOWN:\n\t\t\treturn \"N/A\";\n\t\tcase SC_AC_NEVER:\n\t\t\treturn \"NEVR\";\n\t\tcase SC_AC_NONE:\n\t\t\treturn \"NONE\";\n\t\tcase SC_AC_CHV:\n\t\t\tstrcpy(buf, \"CHV\");\n\t\t\tif (e->key_ref != SC_AC_KEY_REF_NONE)\n\t\t\t\tsprintf(buf + 3, \"%d\", e->key_ref);\n\t\t\tbreak;\n\t\tcase SC_AC_TERM:\n\t\t\tstrcpy(buf, \"TERM\");\n\t\t\tbreak;\n\t\tcase SC_AC_PRO:\n\t\t\tstrcpy(buf, \"PROT\");\n\t\t\tbreak;\n\t\tcase SC_AC_AUT:\n\t\t\tstrcpy(buf, \"AUTH\");\n\t\t\tif (e->key_ref != SC_AC_KEY_REF_NONE)\n\t\t\t\tsprintf(buf + 4, \"%d\", e->key_ref);\n\t\t\tbreak;\n\t\tcase SC_AC_SEN:\n\t\t\tstrcpy(buf, \"Sec.Env. \");\n\t\t\tif (e->key_ref != SC_AC_KEY_REF_NONE)\n\t\t\t\tsprintf(buf + 3, \"#%d\", e->key_ref);\n\t\t\tbreak;\n\t\tcase SC_AC_SCB:\n\t\t\tstrcpy(buf, \"Sec.ControlByte \");\n\t\t\tif (e->key_ref != SC_AC_KEY_REF_NONE)\n\t\t\t\tsprintf(buf + 3, \"Ox%X\", e->key_ref);\n\t\t\tbreak;\n\t\tcase SC_AC_IDA:\n\t\t\tstrcpy(buf, \"PKCS#15 AuthID \");\n\t\t\tif (e->key_ref != SC_AC_KEY_REF_NONE)\n\t\t\t\tsprintf(buf + 3, \"#%d\", e->key_ref);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tstrcpy(buf, \"????\");\n\t\t\tbreak;\n\t\t}\n\t\tstrcat(line, buf);\n\t\tstrcat(line, \" \");\n\t\te = e->next;\n\t}\n\tline[strlen(line)-1] = 0; /* get rid of trailing space */\n\treturn line;\n}",
  "abstract_func_before": "const char * util_acl_to_str(const sc_acl_entry_t *VAR_0)\n{\n\tstatic char VAR_1[80], VAR_2[20];\n\tunsigned int VAR_3;\n\n\tif (VAR_0 == NULL)\n\t\treturn \"N/A\";\n\tVAR_1[0] = 0;\n\twhile (VAR_0 != NULL) {\n\t\tVAR_3 = VAR_0->method;\n\n\t\tswitch (VAR_3) {\n\t\tcase VAR_4:\n\t\t\treturn \"N/A\";\n\t\tcase VAR_5:\n\t\t\treturn \"NEVR\";\n\t\tcase VAR_6:\n\t\t\treturn \"NONE\";\n\t\tcase VAR_7:\n\t\t\tstrcpy(VAR_2, \"CHV\");\n\t\t\tif (VAR_0->key_ref != VAR_8)\n\t\t\t\tsprintf(VAR_2 + 3, \"%d\", VAR_0->key_ref);\n\t\t\tbreak;\n\t\tcase VAR_9:\n\t\t\tstrcpy(VAR_2, \"TERM\");\n\t\t\tbreak;\n\t\tcase VAR_10:\n\t\t\tstrcpy(VAR_2, \"PROT\");\n\t\t\tbreak;\n\t\tcase VAR_11:\n\t\t\tstrcpy(VAR_2, \"AUTH\");\n\t\t\tif (VAR_0->key_ref != VAR_8)\n\t\t\t\tsprintf(VAR_2 + 4, \"%d\", VAR_0->key_ref);\n\t\t\tbreak;\n\t\tcase VAR_12:\n\t\t\tstrcpy(VAR_2, \"Sec.Env. \");\n\t\t\tif (VAR_0->key_ref != VAR_8)\n\t\t\t\tsprintf(VAR_2 + 3, \"#%d\", VAR_0->key_ref);\n\t\t\tbreak;\n\t\tcase VAR_13:\n\t\t\tstrcpy(VAR_2, \"Sec.ControlByte \");\n\t\t\tif (VAR_0->key_ref != VAR_8)\n\t\t\t\tsprintf(VAR_2 + 3, \"Ox%X\", VAR_0->key_ref);\n\t\t\tbreak;\n\t\tcase VAR_14:\n\t\t\tstrcpy(VAR_2, \"PKCS#15 AuthID \");\n\t\t\tif (VAR_0->key_ref != VAR_8)\n\t\t\t\tsprintf(VAR_2 + 3, \"#%d\", VAR_0->key_ref);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tstrcpy(VAR_2, \"????\");\n\t\t\tbreak;\n\t\t}\n\t\tstrcat(VAR_1, VAR_2);\n\t\tstrcat(VAR_1, \" \");\n\t\tVAR_0 = VAR_0->next;\n\t}\n\tVAR_1[strlen(VAR_1)-1] = 0; /* COMMENT_0 */\n\treturn VAR_1;\n}",
  "func_graph_path_before": "OpenSC/360e95d45ac4123255a4c796db96337f332160ad/util.c/vul/before/0.json",
  "func": "const char * util_acl_to_str(const sc_acl_entry_t *e)\n{\n\tstatic char line[80], buf[20];\n\tunsigned int acl;\n\n\tif (e == NULL)\n\t\treturn \"N/A\";\n\tline[0] = 0;\n\twhile (e != NULL) {\n\t\tacl = e->method;\n\n\t\tswitch (acl) {\n\t\tcase SC_AC_UNKNOWN:\n\t\t\treturn \"N/A\";\n\t\tcase SC_AC_NEVER:\n\t\t\treturn \"NEVR\";\n\t\tcase SC_AC_NONE:\n\t\t\treturn \"NONE\";\n\t\tcase SC_AC_CHV:\n\t\t\tstrcpy(buf, \"CHV\");\n\t\t\tif (e->key_ref != SC_AC_KEY_REF_NONE)\n\t\t\t\tsprintf(buf + 3, \"%d\", e->key_ref);\n\t\t\tbreak;\n\t\tcase SC_AC_TERM:\n\t\t\tstrcpy(buf, \"TERM\");\n\t\t\tbreak;\n\t\tcase SC_AC_PRO:\n\t\t\tstrcpy(buf, \"PROT\");\n\t\t\tbreak;\n\t\tcase SC_AC_AUT:\n\t\t\tstrcpy(buf, \"AUTH\");\n\t\t\tif (e->key_ref != SC_AC_KEY_REF_NONE)\n\t\t\t\tsprintf(buf + 4, \"%d\", e->key_ref);\n\t\t\tbreak;\n\t\tcase SC_AC_SEN:\n\t\t\tstrcpy(buf, \"Sec.Env. \");\n\t\t\tif (e->key_ref != SC_AC_KEY_REF_NONE)\n\t\t\t\tsprintf(buf + 3, \"#%d\", e->key_ref);\n\t\t\tbreak;\n\t\tcase SC_AC_SCB:\n\t\t\tstrcpy(buf, \"Sec.ControlByte \");\n\t\t\tif (e->key_ref != SC_AC_KEY_REF_NONE)\n\t\t\t\tsprintf(buf + 3, \"Ox%X\", e->key_ref);\n\t\t\tbreak;\n\t\tcase SC_AC_IDA:\n\t\t\tstrcpy(buf, \"PKCS#15 AuthID \");\n\t\t\tif (e->key_ref != SC_AC_KEY_REF_NONE)\n\t\t\t\tsprintf(buf + 3, \"#%d\", e->key_ref);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tstrcpy(buf, \"????\");\n\t\t\tbreak;\n\t\t}\n\t\tstrncat(line, buf, sizeof line);\n\t\tstrncat(line, \" \", sizeof line);\n\t\te = e->next;\n\t}\n\tline[(sizeof line)-1] = '\\0'; /* make sure it's NUL terminated */\n\tline[strlen(line)-1] = 0; /* get rid of trailing space */\n\treturn line;\n}",
  "abstract_func": "const char * util_acl_to_str(const sc_acl_entry_t *VAR_0)\n{\n\tstatic char VAR_1[80], VAR_2[20];\n\tunsigned int VAR_3;\n\n\tif (VAR_0 == NULL)\n\t\treturn \"N/A\";\n\tVAR_1[0] = 0;\n\twhile (VAR_0 != NULL) {\n\t\tVAR_3 = VAR_0->method;\n\n\t\tswitch (VAR_3) {\n\t\tcase VAR_4:\n\t\t\treturn \"N/A\";\n\t\tcase VAR_5:\n\t\t\treturn \"NEVR\";\n\t\tcase VAR_6:\n\t\t\treturn \"NONE\";\n\t\tcase VAR_7:\n\t\t\tstrcpy(VAR_2, \"CHV\");\n\t\t\tif (VAR_0->key_ref != VAR_8)\n\t\t\t\tsprintf(VAR_2 + 3, \"%d\", VAR_0->key_ref);\n\t\t\tbreak;\n\t\tcase VAR_9:\n\t\t\tstrcpy(VAR_2, \"TERM\");\n\t\t\tbreak;\n\t\tcase VAR_10:\n\t\t\tstrcpy(VAR_2, \"PROT\");\n\t\t\tbreak;\n\t\tcase VAR_11:\n\t\t\tstrcpy(VAR_2, \"AUTH\");\n\t\t\tif (VAR_0->key_ref != VAR_8)\n\t\t\t\tsprintf(VAR_2 + 4, \"%d\", VAR_0->key_ref);\n\t\t\tbreak;\n\t\tcase VAR_12:\n\t\t\tstrcpy(VAR_2, \"Sec.Env. \");\n\t\t\tif (VAR_0->key_ref != VAR_8)\n\t\t\t\tsprintf(VAR_2 + 3, \"#%d\", VAR_0->key_ref);\n\t\t\tbreak;\n\t\tcase VAR_13:\n\t\t\tstrcpy(VAR_2, \"Sec.ControlByte \");\n\t\t\tif (VAR_0->key_ref != VAR_8)\n\t\t\t\tsprintf(VAR_2 + 3, \"Ox%X\", VAR_0->key_ref);\n\t\t\tbreak;\n\t\tcase VAR_14:\n\t\t\tstrcpy(VAR_2, \"PKCS#15 AuthID \");\n\t\t\tif (VAR_0->key_ref != VAR_8)\n\t\t\t\tsprintf(VAR_2 + 3, \"#%d\", VAR_0->key_ref);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tstrcpy(VAR_2, \"????\");\n\t\t\tbreak;\n\t\t}\n\t\tstrncat(VAR_1, VAR_2, sizeof VAR_1);\n\t\tstrncat(VAR_1, \" \", sizeof VAR_1);\n\t\tVAR_0 = VAR_0->next;\n\t}\n\tVAR_1[(sizeof VAR_1)-1] = '\\0'; /* COMMENT_0 */\n\tVAR_1[strlen(VAR_1)-1] = 0; /* COMMENT_1 */\n\treturn VAR_1;\n}",
  "func_graph_path": "OpenSC/360e95d45ac4123255a4c796db96337f332160ad/util.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -51,10 +51,11 @@\n \t\t\tstrcpy(buf, \"????\");\n \t\t\tbreak;\n \t\t}\n-\t\tstrcat(line, buf);\n-\t\tstrcat(line, \" \");\n+\t\tstrncat(line, buf, sizeof line);\n+\t\tstrncat(line, \" \", sizeof line);\n \t\te = e->next;\n \t}\n+\tline[(sizeof line)-1] = '\\0'; /* make sure it's NUL terminated */\n \tline[strlen(line)-1] = 0; /* get rid of trailing space */\n \treturn line;\n }",
  "diff_line_info": {
    "deleted_lines": [
      "\t\tstrcat(line, buf);",
      "\t\tstrcat(line, \" \");"
    ],
    "added_lines": [
      "\t\tstrncat(line, buf, sizeof line);",
      "\t\tstrncat(line, \" \", sizeof line);",
      "\tline[(sizeof line)-1] = '\\0'; /* make sure it's NUL terminated */"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/OpenSC/OpenSC/pull/1447",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/OpenSC/OpenSC/pull/1447: 403 Client Error: Forbidden for url: https://api.github.com/repos/OpenSC/OpenSC/pulls/1447",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 1.0"
}