{
  "cve_id": "CVE-2021-4076",
  "cwe_ids": [
    "CWE-200"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:N/A:N",
  "cvss_is_v3": false,
  "repo_name": "latchset/tang",
  "commit_msg": "keys: move signing part out of find_by_thp() and to find_jws() (#81)\n\nHandle just signing keys in find_jws(), to make sure we are\r\nresponding only to proper queries.\r\n\r\nTests were also failing to detect this issue and were updated\r\naccordingly.\r\n\r\nIssue discovered by Twitter Kernel and OS team during a source\r\ncode audit while evaluating Tang/Clevis for their needs.\r\n\r\nFixes CVE-2021-4076",
  "commit_hash": "e82459fda10f0630c3414ed2afbc6320bb9ea7c9",
  "git_url": "https://github.com/latchset/tang/commit/e82459fda10f0630c3414ed2afbc6320bb9ea7c9",
  "file_path": "src/keys.c",
  "func_name": "find_by_thp",
  "func_before": "static json_t*\nfind_by_thp(struct tang_keys_info* tki, const char* target)\n{\n    if (!tki) {\n        return NULL;\n    }\n\n    json_auto_t* keys = json_deep_copy(tki->m_keys);\n    json_array_extend(keys, tki->m_rotated_keys);\n\n    size_t idx;\n    json_t* jwk;\n    const char** hashes = supported_hashes();\n    json_array_foreach(keys, idx, jwk) {\n        for (int i = 0; hashes[i]; i++) {\n            __attribute__ ((__cleanup__(cleanup_str))) char* thumbprint = jwk_thumbprint(jwk, hashes[i]);\n            if (!thumbprint || strcmp(thumbprint, target) != 0) {\n                continue;\n            }\n\n            if (jwk_valid_for_deriving_keys(jwk)) {\n                return json_incref(jwk);\n            } else if (jwk_valid_for_signing(jwk)) {\n                json_auto_t* sign = json_deep_copy(tki->m_sign);\n                if (json_array_append(sign, jwk) == -1) {\n                    return NULL;\n                }\n                json_auto_t* jws = jwk_sign(tki->m_payload, sign);\n                if (!jws) {\n                    return NULL;\n                }\n                return json_incref(jws);\n            }\n        }\n    }\n    return NULL;\n}",
  "abstract_func_before": "static json_t*\nfind_by_thp(struct tang_keys_info* VAR_0, const char* VAR_1)\n{\n    if (!VAR_0) {\n        return NULL;\n    }\n\n    json_auto_t* VAR_2 = json_deep_copy(VAR_0->m_keys);\n    json_array_extend(VAR_2, VAR_0->m_rotated_keys);\n\n    size_t VAR_3;\n    json_t* VAR_4;\n    const char** VAR_5 = supported_hashes();\n    json_array_foreach(VAR_2, VAR_3, VAR_4) {\n        for (int VAR_6 = 0; VAR_5[VAR_6]; VAR_6++) {\n            __attribute__ ((__cleanup__(VAR_7))) char* VAR_8 = jwk_thumbprint(VAR_4, VAR_5[VAR_6]);\n            if (!VAR_8 || strcmp(VAR_8, VAR_1) != 0) {\n                continue;\n            }\n\n            if (jwk_valid_for_deriving_keys(VAR_4)) {\n                return json_incref(VAR_4);\n            } else if (jwk_valid_for_signing(VAR_4)) {\n                json_auto_t* VAR_9 = json_deep_copy(VAR_0->m_sign);\n                if (json_array_append(VAR_9, VAR_4) == -1) {\n                    return NULL;\n                }\n                json_auto_t* VAR_10 = jwk_sign(VAR_0->m_payload, VAR_9);\n                if (!VAR_10) {\n                    return NULL;\n                }\n                return json_incref(VAR_10);\n            }\n        }\n    }\n    return NULL;\n}",
  "func_graph_path_before": "latchset/tang/e82459fda10f0630c3414ed2afbc6320bb9ea7c9/keys.c/vul/before/1.json",
  "func": "static json_t*\nfind_by_thp(struct tang_keys_info* tki, const char* target)\n{\n    if (!tki) {\n        return NULL;\n    }\n\n    json_auto_t* keys = json_deep_copy(tki->m_keys);\n    json_array_extend(keys, tki->m_rotated_keys);\n\n    size_t idx;\n    json_t* jwk;\n    const char** hashes = supported_hashes();\n    json_array_foreach(keys, idx, jwk) {\n        for (int i = 0; hashes[i]; i++) {\n            __attribute__ ((__cleanup__(cleanup_str))) char* thumbprint = jwk_thumbprint(jwk, hashes[i]);\n            if (!thumbprint || strcmp(thumbprint, target) != 0) {\n                continue;\n            }\n            return json_incref(jwk);\n        }\n    }\n    return NULL;\n}",
  "abstract_func": "static json_t*\nfind_by_thp(struct tang_keys_info* VAR_0, const char* VAR_1)\n{\n    if (!VAR_0) {\n        return NULL;\n    }\n\n    json_auto_t* VAR_2 = json_deep_copy(VAR_0->m_keys);\n    json_array_extend(VAR_2, VAR_0->m_rotated_keys);\n\n    size_t VAR_3;\n    json_t* VAR_4;\n    const char** VAR_5 = supported_hashes();\n    json_array_foreach(VAR_2, VAR_3, VAR_4) {\n        for (int VAR_6 = 0; VAR_5[VAR_6]; VAR_6++) {\n            __attribute__ ((__cleanup__(VAR_7))) char* VAR_8 = jwk_thumbprint(VAR_4, VAR_5[VAR_6]);\n            if (!VAR_8 || strcmp(VAR_8, VAR_1) != 0) {\n                continue;\n            }\n            return json_incref(VAR_4);\n        }\n    }\n    return NULL;\n}",
  "func_graph_path": "latchset/tang/e82459fda10f0630c3414ed2afbc6320bb9ea7c9/keys.c/vul/after/1.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -17,20 +17,7 @@\n             if (!thumbprint || strcmp(thumbprint, target) != 0) {\n                 continue;\n             }\n-\n-            if (jwk_valid_for_deriving_keys(jwk)) {\n-                return json_incref(jwk);\n-            } else if (jwk_valid_for_signing(jwk)) {\n-                json_auto_t* sign = json_deep_copy(tki->m_sign);\n-                if (json_array_append(sign, jwk) == -1) {\n-                    return NULL;\n-                }\n-                json_auto_t* jws = jwk_sign(tki->m_payload, sign);\n-                if (!jws) {\n-                    return NULL;\n-                }\n-                return json_incref(jws);\n-            }\n+            return json_incref(jwk);\n         }\n     }\n     return NULL;",
  "diff_line_info": {
    "deleted_lines": [
      "",
      "            if (jwk_valid_for_deriving_keys(jwk)) {",
      "                return json_incref(jwk);",
      "            } else if (jwk_valid_for_signing(jwk)) {",
      "                json_auto_t* sign = json_deep_copy(tki->m_sign);",
      "                if (json_array_append(sign, jwk) == -1) {",
      "                    return NULL;",
      "                }",
      "                json_auto_t* jws = jwk_sign(tki->m_payload, sign);",
      "                if (!jws) {",
      "                    return NULL;",
      "                }",
      "                return json_incref(jws);",
      "            }"
    ],
    "added_lines": [
      "            return json_incref(jwk);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/latchset/tang/pull/81",
  "description": {
    "pr_info": {
      "title": "keys: move signing part out of find_by_thp() and to find_jws()",
      "number": 81
    },
    "comment": [
      "Handle just signing keys in find_jws(), to make sure we are\r\nresponding only to proper queries.\r\n\r\nTests were also failing to detect this issue and were updated\r\naccordingly.\r\n\r\nIssue discovered by Twitter Kernel and OS team during a source\r\ncode audit while evaluating Tang/Clevis for their needs.\r\n\r\nFixes CVE-2021-4076",
      "## [Codecov](https://app.codecov.io/gh/latchset/tang/pull/81?dropdown=coverage&src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=latchset) Report\nAttention: Patch coverage is `63.63636%` with `4 lines` in your changes missing coverage. Please review.\n> Project coverage is 57.35%. Comparing base [(`1d1874b`)](https://app.codecov.io/gh/latchset/tang/commit/1d1874b40d38a0eef788dd630af0a08e0ecda899?dropdown=coverage&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=latchset) to head [(`3503270`)](https://app.codecov.io/gh/latchset/tang/commit/3503270a0b85e16ccd4a6f078a65d62d192df127?dropdown=coverage&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=latchset).\n> Report is 34 commits behind head on master.\n\n| [Files with missing lines](https://app.codecov.io/gh/latchset/tang/pull/81?dropdown=coverage&src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=latchset) | Patch % | Lines |\n|---|---|---|\n| [src/keys.c](https://app.codecov.io/gh/latchset/tang/pull/81?src=pr&el=tree&filepath=src%2Fkeys.c&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=latchset#diff-c3JjL2tleXMuYw==) | 63.63% | [2 Missing and 2 partials :warning: ](https://app.codecov.io/gh/latchset/tang/pull/81?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=latchset) |\n\n<details><summary>Additional details and impacted files</summary>\n\n\n```diff\n@@            Coverage Diff             @@\n##           master      #81      +/-   ##\n==========================================\n+ Coverage   56.10%   57.35%   +1.24%     \n==========================================\n  Files           3        3              \n  Lines         401      401              \n  Branches      115      114       -1     \n==========================================\n+ Hits          225      230       +5     \n+ Misses         90       88       -2     \n+ Partials       86       83       -3     \n```\n\n</details>\n\n[:umbrella: View full report in Codecov by Sentry](https://app.codecov.io/gh/latchset/tang/pull/81?dropdown=coverage&src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=latchset).   \n:loudspeaker: Have feedback on the report? [Share it here](https://about.codecov.io/codecov-pr-comment-feedback/?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=latchset).\n"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "Final Classification: Security Vulnerability Fix  \nConfidence: 1.0"
}