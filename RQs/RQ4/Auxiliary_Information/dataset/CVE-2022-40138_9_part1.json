{
  "cve_id": "CVE-2022-40138",
  "cwe_ids": [
    "CWE-681"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
  "cvss_is_v3": true,
  "repo_name": "facebook/hermes",
  "commit_msg": "Re-sync with internal repository (#822)\n\nCo-authored-by: Facebook Community Bot <6422482+facebook-github-bot@users.noreply.github.com>",
  "commit_hash": "6aa825e480d48127b480b08d13adf70033237097",
  "git_url": "https://github.com/facebook/hermes/commit/6aa825e480d48127b480b08d13adf70033237097",
  "file_path": "lib/CompilerDriver/CompilerDriver.cpp",
  "func_name": "generateBytecodeForExecution",
  "func_before": "CompileResult generateBytecodeForExecution(\n    Module &M,\n    const BytecodeGenerationOptions &genOptions) {\n  std::shared_ptr<Context> context = M.shareContext();\n  CompileResult result{Success};\n  if (cl::BytecodeFormat == cl::BytecodeFormatKind::HBC) {\n    result.bytecodeProvider = hbc::BCProviderFromSrc::createBCProviderFromSrc(\n        hbc::generateBytecodeModule(&M, M.getTopLevelFunction(), genOptions));\n\n  } else {\n    llvm_unreachable(\"Invalid bytecode kind for execution\");\n    result = InvalidFlags;\n  }\n  return result;\n}",
  "abstract_func_before": "CompileResult generateBytecodeForExecution(\n    Module &VAR_0,\n    const BytecodeGenerationOptions &VAR_1) {\n  std::shared_ptr<Context> VAR_2 = VAR_0.shareContext();\n  CompileResult VAR_3{VAR_4};\n  if (cl::BytecodeFormat == cl::BytecodeFormatKind::HBC) {\n    VAR_3.bytecodeProvider = hbc::BCProviderFromSrc::createBCProviderFromSrc(\n        hbc::generateBytecodeModule(&VAR_0, VAR_0.getTopLevelFunction(), VAR_1));\n\n  } else {\n    llvm_unreachable(\"Invalid bytecode kind for execution\");\n    VAR_3 = VAR_5;\n  }\n  return VAR_3;\n}",
  "func_graph_path_before": "facebook/hermes/6aa825e480d48127b480b08d13adf70033237097/CompilerDriver.cpp/vul/before/1.json",
  "func": "CompileResult generateBytecodeForExecution(\n    Module &M,\n    const BytecodeGenerationOptions &genOptions) {\n  std::shared_ptr<Context> context = M.shareContext();\n  CompileResult result{Success};\n  if (cl::BytecodeFormat == cl::BytecodeFormatKind::HBC) {\n    auto BM =\n        hbc::generateBytecodeModule(&M, M.getTopLevelFunction(), genOptions);\n    if (auto N = context->getSourceErrorManager().getErrorCount()) {\n      llvh::errs() << \"Emitted \" << N << \" errors in the backend. exiting.\\n\";\n      return BackendError;\n    }\n\n    result.bytecodeProvider =\n        hbc::BCProviderFromSrc::createBCProviderFromSrc(std::move(BM));\n  } else {\n    llvm_unreachable(\"Invalid bytecode kind for execution\");\n    result = InvalidFlags;\n  }\n  return result;\n}",
  "abstract_func": "CompileResult generateBytecodeForExecution(\n    Module &VAR_0,\n    const BytecodeGenerationOptions &VAR_1) {\n  std::shared_ptr<Context> VAR_2 = VAR_0.shareContext();\n  CompileResult VAR_3{VAR_4};\n  if (cl::BytecodeFormat == cl::BytecodeFormatKind::HBC) {\n    auto VAR_5 =\n        hbc::generateBytecodeModule(&VAR_0, VAR_0.getTopLevelFunction(), VAR_1);\n    if (auto VAR_6 = VAR_2->getSourceErrorManager().getErrorCount()) {\n      llvh::errs() << \"Emitted \" << VAR_6 << \" errors in the backend. exiting.\\n\";\n      return VAR_7;\n    }\n\n    VAR_3.bytecodeProvider =\n        hbc::BCProviderFromSrc::createBCProviderFromSrc(std::move(VAR_5));\n  } else {\n    llvm_unreachable(\"Invalid bytecode kind for execution\");\n    VAR_3 = VAR_8;\n  }\n  return VAR_3;\n}",
  "func_graph_path": "facebook/hermes/6aa825e480d48127b480b08d13adf70033237097/CompilerDriver.cpp/vul/after/1.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -4,9 +4,15 @@\n   std::shared_ptr<Context> context = M.shareContext();\n   CompileResult result{Success};\n   if (cl::BytecodeFormat == cl::BytecodeFormatKind::HBC) {\n-    result.bytecodeProvider = hbc::BCProviderFromSrc::createBCProviderFromSrc(\n-        hbc::generateBytecodeModule(&M, M.getTopLevelFunction(), genOptions));\n+    auto BM =\n+        hbc::generateBytecodeModule(&M, M.getTopLevelFunction(), genOptions);\n+    if (auto N = context->getSourceErrorManager().getErrorCount()) {\n+      llvh::errs() << \"Emitted \" << N << \" errors in the backend. exiting.\\n\";\n+      return BackendError;\n+    }\n \n+    result.bytecodeProvider =\n+        hbc::BCProviderFromSrc::createBCProviderFromSrc(std::move(BM));\n   } else {\n     llvm_unreachable(\"Invalid bytecode kind for execution\");\n     result = InvalidFlags;",
  "diff_line_info": {
    "deleted_lines": [
      "    result.bytecodeProvider = hbc::BCProviderFromSrc::createBCProviderFromSrc(",
      "        hbc::generateBytecodeModule(&M, M.getTopLevelFunction(), genOptions));"
    ],
    "added_lines": [
      "    auto BM =",
      "        hbc::generateBytecodeModule(&M, M.getTopLevelFunction(), genOptions);",
      "    if (auto N = context->getSourceErrorManager().getErrorCount()) {",
      "      llvh::errs() << \"Emitted \" << N << \" errors in the backend. exiting.\\n\";",
      "      return BackendError;",
      "    }",
      "    result.bytecodeProvider =",
      "        hbc::BCProviderFromSrc::createBCProviderFromSrc(std::move(BM));"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/facebook/hermes/pull/822",
  "description": {
    "pr_info": {
      "title": "Re-sync with internal repository",
      "number": 822
    },
    "comment": [
      "The internal and external repositories are out of sync. This attempts to brings them back in sync by patching the GitHub repository. Please carefully review this patch. You must disable ShipIt for your project in order to merge this pull request. DO NOT IMPORT this pull request. Instead, merge it directly on GitHub using the MERGE BUTTON. Re-enable ShipIt after merging."
    ]
  },
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "**Final Classification:** Defect Remediation & Feature Upgrades; **Confidence:** 0.95"
}