{
  "cve_id": "CVE-2020-15166",
  "cwe_ids": [
    "CWE-400"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "zeromq/libzmq",
  "commit_msg": "problem: zeromq connects peer before handshake is completed\n\nSolution: delay connecting the peer pipe until the handshake is completed",
  "commit_hash": "e7f0090b161ce6344f6bd35009816a925c070b09",
  "git_url": "https://github.com/zeromq/libzmq/commit/e7f0090b161ce6344f6bd35009816a925c070b09",
  "file_path": "src/ws_engine.cpp",
  "func_name": "zmq::ws_engine_t::ws_engine_t",
  "func_before": "zmq::ws_engine_t::ws_engine_t (fd_t fd_,\n                               const options_t &options_,\n                               const endpoint_uri_pair_t &endpoint_uri_pair_,\n                               const ws_address_t &address_,\n                               bool client_) :\n    stream_engine_base_t (fd_, options_, endpoint_uri_pair_),\n    _client (client_),\n    _address (address_),\n    _client_handshake_state (client_handshake_initial),\n    _server_handshake_state (handshake_initial),\n    _header_name_position (0),\n    _header_value_position (0),\n    _header_upgrade_websocket (false),\n    _header_connection_upgrade (false),\n    _heartbeat_timeout (0)\n{\n    memset (_websocket_key, 0, MAX_HEADER_VALUE_LENGTH + 1);\n    memset (_websocket_accept, 0, MAX_HEADER_VALUE_LENGTH + 1);\n    memset (_websocket_protocol, 0, 256);\n\n    _next_msg = &ws_engine_t::next_handshake_command;\n    _process_msg = &ws_engine_t::process_handshake_command;\n    _close_msg.init ();\n\n    if (_options.heartbeat_interval > 0) {\n        _heartbeat_timeout = _options.heartbeat_timeout;\n        if (_heartbeat_timeout == -1)\n            _heartbeat_timeout = _options.heartbeat_interval;\n    }\n}",
  "abstract_func_before": "zmq::ws_engine_t::ws_engine_t (fd_t VAR_0,\n                               const options_t &VAR_1,\n                               const endpoint_uri_pair_t &VAR_2,\n                               const ws_address_t &VAR_3,\n                               bool VAR_4) :\n    stream_engine_base_t (VAR_0, VAR_1, VAR_2),\n    _client (VAR_4),\n    _address (VAR_3),\n    _client_handshake_state (VAR_5),\n    _server_handshake_state (VAR_6),\n    _header_name_position (0),\n    _header_value_position (0),\n    _header_upgrade_websocket (false),\n    _header_connection_upgrade (false),\n    _heartbeat_timeout (0)\n{\n    memset (VAR_7, 0, VAR_8 + 1);\n    memset (VAR_9, 0, VAR_8 + 1);\n    memset (VAR_10, 0, 256);\n\n    VAR_11 = &ws_engine_t::next_handshake_command;\n    VAR_12 = &ws_engine_t::process_handshake_command;\n    VAR_13.init ();\n\n    if (VAR_14.heartbeat_interval > 0) {\n        VAR_15 = VAR_14.heartbeat_timeout;\n        if (VAR_15 == -1)\n            VAR_15 = VAR_14.heartbeat_interval;\n    }\n}",
  "func_graph_path_before": "zeromq/libzmq/e7f0090b161ce6344f6bd35009816a925c070b09/ws_engine.cpp/vul/before/0.json",
  "func": "zmq::ws_engine_t::ws_engine_t (fd_t fd_,\n                               const options_t &options_,\n                               const endpoint_uri_pair_t &endpoint_uri_pair_,\n                               const ws_address_t &address_,\n                               bool client_) :\n    stream_engine_base_t (fd_, options_, endpoint_uri_pair_, true),\n    _client (client_),\n    _address (address_),\n    _client_handshake_state (client_handshake_initial),\n    _server_handshake_state (handshake_initial),\n    _header_name_position (0),\n    _header_value_position (0),\n    _header_upgrade_websocket (false),\n    _header_connection_upgrade (false),\n    _heartbeat_timeout (0)\n{\n    memset (_websocket_key, 0, MAX_HEADER_VALUE_LENGTH + 1);\n    memset (_websocket_accept, 0, MAX_HEADER_VALUE_LENGTH + 1);\n    memset (_websocket_protocol, 0, 256);\n\n    _next_msg = &ws_engine_t::next_handshake_command;\n    _process_msg = &ws_engine_t::process_handshake_command;\n    _close_msg.init ();\n\n    if (_options.heartbeat_interval > 0) {\n        _heartbeat_timeout = _options.heartbeat_timeout;\n        if (_heartbeat_timeout == -1)\n            _heartbeat_timeout = _options.heartbeat_interval;\n    }\n}",
  "abstract_func": "zmq::ws_engine_t::ws_engine_t (fd_t VAR_0,\n                               const options_t &VAR_1,\n                               const endpoint_uri_pair_t &VAR_2,\n                               const ws_address_t &VAR_3,\n                               bool VAR_4) :\n    stream_engine_base_t (VAR_0, VAR_1, VAR_2, true),\n    _client (VAR_4),\n    _address (VAR_3),\n    _client_handshake_state (VAR_5),\n    _server_handshake_state (VAR_6),\n    _header_name_position (0),\n    _header_value_position (0),\n    _header_upgrade_websocket (false),\n    _header_connection_upgrade (false),\n    _heartbeat_timeout (0)\n{\n    memset (VAR_7, 0, VAR_8 + 1);\n    memset (VAR_9, 0, VAR_8 + 1);\n    memset (VAR_10, 0, 256);\n\n    VAR_11 = &ws_engine_t::next_handshake_command;\n    VAR_12 = &ws_engine_t::process_handshake_command;\n    VAR_13.init ();\n\n    if (VAR_14.heartbeat_interval > 0) {\n        VAR_15 = VAR_14.heartbeat_timeout;\n        if (VAR_15 == -1)\n            VAR_15 = VAR_14.heartbeat_interval;\n    }\n}",
  "func_graph_path": "zeromq/libzmq/e7f0090b161ce6344f6bd35009816a925c070b09/ws_engine.cpp/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -3,7 +3,7 @@\n                                const endpoint_uri_pair_t &endpoint_uri_pair_,\n                                const ws_address_t &address_,\n                                bool client_) :\n-    stream_engine_base_t (fd_, options_, endpoint_uri_pair_),\n+    stream_engine_base_t (fd_, options_, endpoint_uri_pair_, true),\n     _client (client_),\n     _address (address_),\n     _client_handshake_state (client_handshake_initial),",
  "diff_line_info": {
    "deleted_lines": [
      "    stream_engine_base_t (fd_, options_, endpoint_uri_pair_),"
    ],
    "added_lines": [
      "    stream_engine_base_t (fd_, options_, endpoint_uri_pair_, true),"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/zeromq/libzmq/pull/3913",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/zeromq/libzmq/pull/3913: 403 Client Error: Forbidden for url: https://api.github.com/repos/zeromq/libzmq/pulls/3913",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 0.9\n\nThe patch addresses a security issue where ZeroMQ connects peers before a proper handshake, which could lead to insecure connections. The code change ensures the handshake completes before connecting, mitigating the vulnerability. The confidence is high due to the clear alignment between the issue described and the code modification, though no explicit CVE is mentioned."
}