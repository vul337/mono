{
  "cve_id": "CVE-2017-1000200",
  "cwe_ids": [
    "CWE-476"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "open-iscsi/tcmu-runner",
  "commit_msg": "only allow dynamic UnregisterHandler for external handlers, thereby fixing DoS\n\nTrying to unregister an internal handler ended up in a SEGFAULT, because\nthe tcmur_handler->opaque was NULL. Way to reproduce:\n\ndbus-send --system --print-reply --dest=org.kernel.TCMUService1 /org/kernel/TCMUService1/HandlerManager1 org.kernel.TCMUService1.HandlerManager1.UnregisterHandler string:qcow\n\nwe use a newly introduced boolean in struct tcmur_handler for keeping\ntrack of external handlers. As suggested by mikechristie adjusting the\npublic data structure is acceptable.",
  "commit_hash": "bb80e9c7a798f035768260ebdadffb6eb0786178",
  "git_url": "https://github.com/open-iscsi/tcmu-runner/commit/bb80e9c7a798f035768260ebdadffb6eb0786178",
  "file_path": "main.c",
  "func_name": "on_unregister_handler",
  "func_before": "static gboolean\non_unregister_handler(TCMUService1HandlerManager1 *interface,\n\t\t      GDBusMethodInvocation *invocation,\n\t\t      gchar *subtype,\n\t\t      gpointer user_data)\n{\n\tstruct tcmur_handler *handler = find_handler_by_subtype(subtype);\n\tstruct dbus_info *info = handler ? handler->opaque : NULL;\n\n\tif (!handler) {\n\t\tg_dbus_method_invocation_return_value(invocation,\n\t\t\tg_variant_new(\"(bs)\", FALSE,\n\t\t\t\t      \"unknown subtype\"));\n\t\treturn TRUE;\n\t}\n\tdbus_unexport_handler(handler);\n\ttcmur_unregister_handler(handler);\n\tg_bus_unwatch_name(info->watcher_id);\n\tg_free(info);\n\tg_free(handler);\n\tg_dbus_method_invocation_return_value(invocation,\n\t\tg_variant_new(\"(bs)\", TRUE, \"succeeded\"));\n\treturn TRUE;\n}",
  "abstract_func_before": "static gboolean\non_unregister_handler(TCMUService1HandlerManager1 *VAR_0,\n\t\t      GDBusMethodInvocation *VAR_1,\n\t\t      gchar *VAR_2,\n\t\t      gpointer VAR_3)\n{\n\tstruct tcmur_handler *VAR_4 = find_handler_by_subtype(VAR_2);\n\tstruct dbus_info *VAR_5 = VAR_4 ? VAR_4->opaque : NULL;\n\n\tif (!VAR_4) {\n\t\tg_dbus_method_invocation_return_value(VAR_1,\n\t\t\tg_variant_new(\"(bs)\", FALSE,\n\t\t\t\t      \"unknown subtype\"));\n\t\treturn TRUE;\n\t}\n\tdbus_unexport_handler(VAR_4);\n\ttcmur_unregister_handler(VAR_4);\n\tg_bus_unwatch_name(VAR_5->watcher_id);\n\tg_free(VAR_5);\n\tg_free(VAR_4);\n\tg_dbus_method_invocation_return_value(VAR_1,\n\t\tg_variant_new(\"(bs)\", TRUE, \"succeeded\"));\n\treturn TRUE;\n}",
  "func_graph_path_before": "open-iscsi/tcmu-runner/bb80e9c7a798f035768260ebdadffb6eb0786178/main.c/vul/before/2.json",
  "func": "static gboolean\non_unregister_handler(TCMUService1HandlerManager1 *interface,\n\t\t      GDBusMethodInvocation *invocation,\n\t\t      gchar *subtype,\n\t\t      gpointer user_data)\n{\n\tstruct tcmur_handler *handler = find_handler_by_subtype(subtype);\n\tstruct dbus_info *info = handler ? handler->opaque : NULL;\n\n\tif (!handler) {\n\t\tg_dbus_method_invocation_return_value(invocation,\n\t\t\tg_variant_new(\"(bs)\", FALSE,\n\t\t\t\t      \"unknown subtype\"));\n\t\treturn TRUE;\n\t}\n\telse if (handler->_is_dbus_handler != 1) {\n\t\tg_dbus_method_invocation_return_value(invocation,\n\t\t\tg_variant_new(\"(bs)\", FALSE,\n\t\t\t\t      \"cannot unregister internal handler\"));\n\t\treturn TRUE;\n\t}\n\n\tdbus_unexport_handler(handler);\n\ttcmur_unregister_dbus_handler(handler);\n\n\tg_bus_unwatch_name(info->watcher_id);\n\tg_free(info);\n\tg_free(handler);\n\tg_dbus_method_invocation_return_value(invocation,\n\t\tg_variant_new(\"(bs)\", TRUE, \"succeeded\"));\n\treturn TRUE;\n}",
  "abstract_func": "static gboolean\non_unregister_handler(TCMUService1HandlerManager1 *VAR_0,\n\t\t      GDBusMethodInvocation *VAR_1,\n\t\t      gchar *VAR_2,\n\t\t      gpointer VAR_3)\n{\n\tstruct tcmur_handler *VAR_4 = find_handler_by_subtype(VAR_2);\n\tstruct dbus_info *VAR_5 = VAR_4 ? VAR_4->opaque : NULL;\n\n\tif (!VAR_4) {\n\t\tg_dbus_method_invocation_return_value(VAR_1,\n\t\t\tg_variant_new(\"(bs)\", FALSE,\n\t\t\t\t      \"unknown subtype\"));\n\t\treturn TRUE;\n\t}\n\telse if (VAR_4->_is_dbus_handler != 1) {\n\t\tg_dbus_method_invocation_return_value(VAR_1,\n\t\t\tg_variant_new(\"(bs)\", FALSE,\n\t\t\t\t      \"cannot unregister internal handler\"));\n\t\treturn TRUE;\n\t}\n\n\tdbus_unexport_handler(VAR_4);\n\ttcmur_unregister_dbus_handler(VAR_4);\n\n\tg_bus_unwatch_name(VAR_5->watcher_id);\n\tg_free(VAR_5);\n\tg_free(VAR_4);\n\tg_dbus_method_invocation_return_value(VAR_1,\n\t\tg_variant_new(\"(bs)\", TRUE, \"succeeded\"));\n\treturn TRUE;\n}",
  "func_graph_path": "open-iscsi/tcmu-runner/bb80e9c7a798f035768260ebdadffb6eb0786178/main.c/vul/after/2.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -13,8 +13,16 @@\n \t\t\t\t      \"unknown subtype\"));\n \t\treturn TRUE;\n \t}\n+\telse if (handler->_is_dbus_handler != 1) {\n+\t\tg_dbus_method_invocation_return_value(invocation,\n+\t\t\tg_variant_new(\"(bs)\", FALSE,\n+\t\t\t\t      \"cannot unregister internal handler\"));\n+\t\treturn TRUE;\n+\t}\n+\n \tdbus_unexport_handler(handler);\n-\ttcmur_unregister_handler(handler);\n+\ttcmur_unregister_dbus_handler(handler);\n+\n \tg_bus_unwatch_name(info->watcher_id);\n \tg_free(info);\n \tg_free(handler);",
  "diff_line_info": {
    "deleted_lines": [
      "\ttcmur_unregister_handler(handler);"
    ],
    "added_lines": [
      "\telse if (handler->_is_dbus_handler != 1) {",
      "\t\tg_dbus_method_invocation_return_value(invocation,",
      "\t\t\tg_variant_new(\"(bs)\", FALSE,",
      "\t\t\t\t      \"cannot unregister internal handler\"));",
      "\t\treturn TRUE;",
      "\t}",
      "",
      "\ttcmur_unregister_dbus_handler(handler);",
      ""
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/open-iscsi/tcmu-runner/pull/200",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/open-iscsi/tcmu-runner/pull/200: 403 Client Error: Forbidden for url: https://api.github.com/repos/open-iscsi/tcmu-runner/pulls/200",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.9  \n\nThe commit addresses a Denial of Service (DoS) vulnerability by preventing unauthorized unregistration of internal handlers, which previously caused a crash (SEGFAULT). The changes in the code enforce restrictions and improve handler management, consistent with security fix patterns. The context from the vulnerability description supporting a security audit further confirms this classification."
}