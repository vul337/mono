{
  "cve_id": "CVE-2022-35926",
  "cwe_ids": [
    "CWE-125"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
  "cvss_is_v3": true,
  "repo_name": "contiki-ng",
  "commit_msg": "Check whether there is enough space for ND6 option headers when processing\nincoming packets.",
  "commit_hash": "a4597001d50a04f4b9c78f323ba731e2f979802c",
  "git_url": "https://github.com/contiki-ng/contiki-ng/commit/a4597001d50a04f4b9c78f323ba731e2f979802c",
  "file_path": "os/net/ipv6/uip-nd6.c",
  "func_name": "create_llao",
  "func_before": "static void\ncreate_llao(uint8_t *llao, uint8_t type) {\n  llao[UIP_ND6_OPT_TYPE_OFFSET] = type;\n  llao[UIP_ND6_OPT_LEN_OFFSET] = UIP_ND6_OPT_LLAO_LEN >> 3;\n  memcpy(&llao[UIP_ND6_OPT_DATA_OFFSET], &uip_lladdr, UIP_LLADDR_LEN);\n  /* padding on some */\n  memset(&llao[UIP_ND6_OPT_DATA_OFFSET + UIP_LLADDR_LEN], 0,\n         UIP_ND6_OPT_LLAO_LEN - 2 - UIP_LLADDR_LEN);\n}",
  "abstract_func_before": "static void\ncreate_llao(uint8_t *VAR_0, uint8_t VAR_1) {\n  VAR_0[VAR_2] = VAR_1;\n  VAR_0[VAR_3] = VAR_4 >> 3;\n  memcpy(&VAR_0[VAR_5], &VAR_6, VAR_7);\n  /* COMMENT_0 */\n  memset(&VAR_0[VAR_5 + VAR_7], 0,\n         VAR_4 - 2 - VAR_7);\n}",
  "func_graph_path_before": "contiki-ng/a4597001d50a04f4b9c78f323ba731e2f979802c/uip-nd6.c/vul/before/2.json",
  "func": "static void\ncreate_llao(uint8_t *llao, uint8_t type)\n{\n  llao[UIP_ND6_OPT_TYPE_OFFSET] = type;\n  llao[UIP_ND6_OPT_LEN_OFFSET] = UIP_ND6_OPT_LLAO_LEN >> 3;\n  memcpy(&llao[UIP_ND6_OPT_DATA_OFFSET], &uip_lladdr, UIP_LLADDR_LEN);\n  /* padding on some */\n  memset(&llao[UIP_ND6_OPT_DATA_OFFSET + UIP_LLADDR_LEN], 0,\n         UIP_ND6_OPT_LLAO_LEN - 2 - UIP_LLADDR_LEN);\n}",
  "abstract_func": "static void\ncreate_llao(uint8_t *VAR_0, uint8_t VAR_1)\n{\n  VAR_0[VAR_2] = VAR_1;\n  VAR_0[VAR_3] = VAR_4 >> 3;\n  memcpy(&VAR_0[VAR_5], &VAR_6, VAR_7);\n  /* COMMENT_0 */\n  memset(&VAR_0[VAR_5 + VAR_7], 0,\n         VAR_4 - 2 - VAR_7);\n}",
  "func_graph_path": "contiki-ng/a4597001d50a04f4b9c78f323ba731e2f979802c/uip-nd6.c/vul/after/2.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,5 +1,6 @@\n static void\n-create_llao(uint8_t *llao, uint8_t type) {\n+create_llao(uint8_t *llao, uint8_t type)\n+{\n   llao[UIP_ND6_OPT_TYPE_OFFSET] = type;\n   llao[UIP_ND6_OPT_LEN_OFFSET] = UIP_ND6_OPT_LLAO_LEN >> 3;\n   memcpy(&llao[UIP_ND6_OPT_DATA_OFFSET], &uip_lladdr, UIP_LLADDR_LEN);",
  "diff_line_info": {
    "deleted_lines": [
      "create_llao(uint8_t *llao, uint8_t type) {"
    ],
    "added_lines": [
      "create_llao(uint8_t *llao, uint8_t type)",
      "{"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/contiki-ng/contiki-ng/pull/1654",
  "description": {
    "pr_info": {
      "title": "uip-nd6: Check buffer space for ND6 option headers.",
      "number": 1654
    },
    "comment": [
      "When processing incoming IPv6 neighbor solicitation packets, it is possible for an out-of-bounds read to occur because there are insufficient checks for space with regards to ND option headers.\r\n\r\nThis PR adds a check for first reading the generic 2-byte option header, and then one check for reading the source-link-layer address option (SLLAO). Note that we are currently only supporting SLLAOs using UIP_LLADDR_LEN bytes for the address."
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 0.9"
}