{
  "cve_id": "CVE-2021-3856",
  "cwe_ids": [
    "CWE-22"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:N",
  "cvss_is_v3": true,
  "repo_name": "keycloak",
  "commit_msg": "[KEYCLOAK-19422] ClassLoaderTheme and ClasspathThemeResourceProviderFactory allows reading any file available as a resource to the classloader",
  "commit_hash": "73f0474008e1bebd0733e62a22aceda9e5de6743",
  "git_url": "https://github.com/keycloak/keycloak/commit/73f0474008e1bebd0733e62a22aceda9e5de6743",
  "file_path": "services/src/main/java/org/keycloak/theme/ClassLoaderTheme.java",
  "func_name": "getResourceAsStream",
  "func_before": "@Override\n    public InputStream getResourceAsStream(String path) {\n        return classLoader.getResourceAsStream(resourceRoot + path);\n    }",
  "abstract_func_before": "@Override\n    public InputStream getResourceAsStream(String VAR_0) {\n        return VAR_1.getResourceAsStream(VAR_2 + VAR_0);\n    }",
  "func_graph_path_before": "keycloak/73f0474008e1bebd0733e62a22aceda9e5de6743/ClassLoaderTheme.java/vul/before/0.json",
  "func": "@Override\n    public InputStream getResourceAsStream(String path) throws IOException {\n        final URL rootResourceURL = classLoader.getResource(resourceRoot);\n        if (rootResourceURL == null) {\n            return null;\n        }\n        final String rootPath = rootResourceURL.getPath();\n        final URL resourceURL = classLoader.getResource(resourceRoot + path);\n        if(resourceURL == null || !resourceURL.getPath().startsWith(rootPath)) {\n            return null;\n        }\n        else {\n            return resourceURL.openConnection().getInputStream();\n        }\n    }",
  "abstract_func": "@Override\n    public InputStream getResourceAsStream(String VAR_0) throws IOException {\n        final URL VAR_1 = VAR_2.getResource(VAR_3);\n        if (VAR_1 == null) {\n            return null;\n        }\n        final String VAR_4 = VAR_1.getPath();\n        final URL VAR_5 = VAR_2.getResource(VAR_3 + VAR_0);\n        if(VAR_5 == null || !VAR_5.getPath().startsWith(VAR_4)) {\n            return null;\n        }\n        else {\n            return VAR_5.openConnection().getInputStream();\n        }\n    }",
  "func_graph_path": "keycloak/73f0474008e1bebd0733e62a22aceda9e5de6743/ClassLoaderTheme.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,4 +1,15 @@\n @Override\n-    public InputStream getResourceAsStream(String path) {\n-        return classLoader.getResourceAsStream(resourceRoot + path);\n+    public InputStream getResourceAsStream(String path) throws IOException {\n+        final URL rootResourceURL = classLoader.getResource(resourceRoot);\n+        if (rootResourceURL == null) {\n+            return null;\n+        }\n+        final String rootPath = rootResourceURL.getPath();\n+        final URL resourceURL = classLoader.getResource(resourceRoot + path);\n+        if(resourceURL == null || !resourceURL.getPath().startsWith(rootPath)) {\n+            return null;\n+        }\n+        else {\n+            return resourceURL.openConnection().getInputStream();\n+        }\n     }",
  "diff_line_info": {
    "deleted_lines": [
      "    public InputStream getResourceAsStream(String path) {",
      "        return classLoader.getResourceAsStream(resourceRoot + path);"
    ],
    "added_lines": [
      "    public InputStream getResourceAsStream(String path) throws IOException {",
      "        final URL rootResourceURL = classLoader.getResource(resourceRoot);",
      "        if (rootResourceURL == null) {",
      "            return null;",
      "        }",
      "        final String rootPath = rootResourceURL.getPath();",
      "        final URL resourceURL = classLoader.getResource(resourceRoot + path);",
      "        if(resourceURL == null || !resourceURL.getPath().startsWith(rootPath)) {",
      "            return null;",
      "        }",
      "        else {",
      "            return resourceURL.openConnection().getInputStream();",
      "        }"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/keycloak/keycloak/pull/8588",
  "description": {
    "pr_info": {
      "title": "[KEYCLOAK-19422] ClassLoaderTheme and ClasspathThemeResourceProviderF…",
      "number": 8588
    },
    "comment": [
      "…actory allows reading any file available as a resource to the classloader\r\n\r\n<!---\r\nPlease read https://github.com/keycloak/keycloak/blob/master/CONTRIBUTING.md and follow these guidelines when contributing to Keycloak\r\n-->\r\n"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix;  \n**Confidence:** 0.95"
}