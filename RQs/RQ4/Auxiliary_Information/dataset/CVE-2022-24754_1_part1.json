{
  "cve_id": "CVE-2022-24754",
  "cwe_ids": [
    "CWE-120"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "pjsip/pjproject",
  "commit_msg": "Use PJ_ASSERT_RETURN() on pjsip_auth_create_digest() and pjsua_init_tpselector() (#3009)\n\n* Use PJ_ASSERT_RETURN on pjsip_auth_create_digest\r\n\r\n* Use PJ_ASSERT_RETURN on pjsua_init_tpselector()\r\n\r\n* Fix incorrect check.\r\n\r\n* Add return value to pjsip_auth_create_digest() and pjsip_auth_create_digestSHA256()\r\n\r\n* Modification based on comments.",
  "commit_hash": "d27f79da11df7bc8bb56c2f291d71e54df8d2c47",
  "git_url": "https://github.com/pjsip/pjproject/commit/d27f79da11df7bc8bb56c2f291d71e54df8d2c47",
  "file_path": "pjsip/src/pjsip/sip_auth_server.c",
  "func_name": "pjsip_auth_verify",
  "func_before": "static pj_status_t pjsip_auth_verify( const pjsip_authorization_hdr *hdr,\n\t\t\t\t      const pj_str_t *method,\n\t\t\t\t      const pjsip_cred_info *cred_info )\n{\n    if (pj_stricmp(&hdr->scheme, &pjsip_DIGEST_STR) == 0) {\n\tchar digest_buf[PJSIP_MD5STRLEN];\n\tpj_str_t digest;\n\tconst pjsip_digest_credential *dig = &hdr->credential.digest;\n\n\t/* Check that username and realm match. \n\t * These checks should have been performed before entering this\n\t * function.\n\t */\n\tPJ_ASSERT_RETURN(pj_strcmp(&dig->username, &cred_info->username) == 0,\n\t\t\t PJ_EINVALIDOP);\n\tPJ_ASSERT_RETURN(pj_strcmp(&dig->realm, &cred_info->realm) == 0,\n\t\t\t PJ_EINVALIDOP);\n\n\t/* Prepare for our digest calculation. */\n\tdigest.ptr = digest_buf;\n\tdigest.slen = PJSIP_MD5STRLEN;\n\n\t/* Create digest for comparison. */\n\tpjsip_auth_create_digest(&digest, \n\t\t\t\t &hdr->credential.digest.nonce,\n\t\t\t\t &hdr->credential.digest.nc, \n\t\t\t\t &hdr->credential.digest.cnonce,\n\t\t\t\t &hdr->credential.digest.qop,\n\t\t\t\t &hdr->credential.digest.uri,\n\t\t\t\t &cred_info->realm,\n\t\t\t\t cred_info, \n\t\t\t\t method );\n\n\t/* Compare digest. */\n\treturn (pj_stricmp(&digest, &hdr->credential.digest.response) == 0) ?\n\t       PJ_SUCCESS : PJSIP_EAUTHINVALIDDIGEST;\n\n    } else {\n\tpj_assert(!\"Unsupported authentication scheme\");\n\treturn PJSIP_EINVALIDAUTHSCHEME;\n    }\n}",
  "abstract_func_before": "static pj_status_t pjsip_auth_verify( const pjsip_authorization_hdr *VAR_0,\n\t\t\t\t      const pj_str_t *VAR_1,\n\t\t\t\t      const pjsip_cred_info *VAR_2 )\n{\n    if (pj_stricmp(&VAR_0->scheme, &VAR_3) == 0) {\n\tchar VAR_4[VAR_5];\n\tpj_str_t VAR_6;\n\tconst pjsip_digest_credential *VAR_7 = &VAR_0->credential.digest;\n\n\t/* COMMENT_0 */\n                                                                \n             \n    \n\tPJ_ASSERT_RETURN(pj_strcmp(&VAR_7->username, &VAR_2->username) == 0,\n\t\t\t VAR_8);\n\tPJ_ASSERT_RETURN(pj_strcmp(&VAR_7->realm, &VAR_2->realm) == 0,\n\t\t\t VAR_8);\n\n\t/* COMMENT_4 */\n\tVAR_6.ptr = VAR_4;\n\tVAR_6.slen = VAR_5;\n\n\t/* COMMENT_5 */\n\tpjsip_auth_create_digest(&VAR_6, \n\t\t\t\t &VAR_0->credential.digest.nonce,\n\t\t\t\t &VAR_0->credential.digest.nc, \n\t\t\t\t &VAR_0->credential.digest.cnonce,\n\t\t\t\t &VAR_0->credential.digest.qop,\n\t\t\t\t &VAR_0->credential.digest.uri,\n\t\t\t\t &VAR_2->realm,\n\t\t\t\t VAR_2, \n\t\t\t\t VAR_1 );\n\n\t/* COMMENT_6 */\n\treturn (pj_stricmp(&VAR_6, &VAR_0->credential.digest.response) == 0) ?\n\t       VAR_9 : VAR_10;\n\n    } else {\n\tpj_assert(!\"Unsupported authentication scheme\");\n\treturn VAR_11;\n    }\n}",
  "func_graph_path_before": "pjsip/pjproject/d27f79da11df7bc8bb56c2f291d71e54df8d2c47/sip_auth_server.c/vul/before/0.json",
  "func": "static pj_status_t pjsip_auth_verify( const pjsip_authorization_hdr *hdr,\n\t\t\t\t      const pj_str_t *method,\n\t\t\t\t      const pjsip_cred_info *cred_info )\n{\n    if (pj_stricmp(&hdr->scheme, &pjsip_DIGEST_STR) == 0) {\n\tchar digest_buf[PJSIP_MD5STRLEN];\n\tpj_str_t digest;\n\tpj_status_t status;\n\tconst pjsip_digest_credential *dig = &hdr->credential.digest;\n\n\t/* Check that username and realm match. \n\t * These checks should have been performed before entering this\n\t * function.\n\t */\n\tPJ_ASSERT_RETURN(pj_strcmp(&dig->username, &cred_info->username) == 0,\n\t\t\t PJ_EINVALIDOP);\n\tPJ_ASSERT_RETURN(pj_strcmp(&dig->realm, &cred_info->realm) == 0,\n\t\t\t PJ_EINVALIDOP);\n\n\t/* Prepare for our digest calculation. */\n\tdigest.ptr = digest_buf;\n\tdigest.slen = PJSIP_MD5STRLEN;\n\n\t/* Create digest for comparison. */\n\tstatus = pjsip_auth_create_digest(&digest, \n\t\t\t\t &hdr->credential.digest.nonce,\n\t\t\t\t &hdr->credential.digest.nc, \n\t\t\t\t &hdr->credential.digest.cnonce,\n\t\t\t\t &hdr->credential.digest.qop,\n\t\t\t\t &hdr->credential.digest.uri,\n\t\t\t\t &cred_info->realm,\n\t\t\t\t cred_info, \n\t\t\t\t method );\n\n\tif (status != PJ_SUCCESS)\n\t    return status;\n\n\t/* Compare digest. */\n\treturn (pj_stricmp(&digest, &hdr->credential.digest.response) == 0) ?\n\t       PJ_SUCCESS : PJSIP_EAUTHINVALIDDIGEST;\n\n    } else {\n\tpj_assert(!\"Unsupported authentication scheme\");\n\treturn PJSIP_EINVALIDAUTHSCHEME;\n    }\n}",
  "abstract_func": "static pj_status_t pjsip_auth_verify( const pjsip_authorization_hdr *VAR_0,\n\t\t\t\t      const pj_str_t *VAR_1,\n\t\t\t\t      const pjsip_cred_info *VAR_2 )\n{\n    if (pj_stricmp(&VAR_0->scheme, &VAR_3) == 0) {\n\tchar VAR_4[VAR_5];\n\tpj_str_t VAR_6;\n\tpj_status_t VAR_7;\n\tconst pjsip_digest_credential *VAR_8 = &VAR_0->credential.digest;\n\n\t/* COMMENT_0 */\n                                                                \n             \n    \n\tPJ_ASSERT_RETURN(pj_strcmp(&VAR_8->username, &VAR_2->username) == 0,\n\t\t\t VAR_9);\n\tPJ_ASSERT_RETURN(pj_strcmp(&VAR_8->realm, &VAR_2->realm) == 0,\n\t\t\t VAR_9);\n\n\t/* COMMENT_4 */\n\tVAR_6.ptr = VAR_4;\n\tVAR_6.slen = VAR_5;\n\n\t/* COMMENT_5 */\n\tVAR_7 = pjsip_auth_create_digest(&VAR_6, \n\t\t\t\t &VAR_0->credential.digest.nonce,\n\t\t\t\t &VAR_0->credential.digest.nc, \n\t\t\t\t &VAR_0->credential.digest.cnonce,\n\t\t\t\t &VAR_0->credential.digest.qop,\n\t\t\t\t &VAR_0->credential.digest.uri,\n\t\t\t\t &VAR_2->realm,\n\t\t\t\t VAR_2, \n\t\t\t\t VAR_1 );\n\n\tif (VAR_7 != VAR_10)\n\t    return VAR_7;\n\n\t/* COMMENT_6 */\n\treturn (pj_stricmp(&VAR_6, &VAR_0->credential.digest.response) == 0) ?\n\t       VAR_10 : VAR_11;\n\n    } else {\n\tpj_assert(!\"Unsupported authentication scheme\");\n\treturn VAR_12;\n    }\n}",
  "func_graph_path": "pjsip/pjproject/d27f79da11df7bc8bb56c2f291d71e54df8d2c47/sip_auth_server.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -5,6 +5,7 @@\n     if (pj_stricmp(&hdr->scheme, &pjsip_DIGEST_STR) == 0) {\n \tchar digest_buf[PJSIP_MD5STRLEN];\n \tpj_str_t digest;\n+\tpj_status_t status;\n \tconst pjsip_digest_credential *dig = &hdr->credential.digest;\n \n \t/* Check that username and realm match. \n@@ -21,7 +22,7 @@\n \tdigest.slen = PJSIP_MD5STRLEN;\n \n \t/* Create digest for comparison. */\n-\tpjsip_auth_create_digest(&digest, \n+\tstatus = pjsip_auth_create_digest(&digest, \n \t\t\t\t &hdr->credential.digest.nonce,\n \t\t\t\t &hdr->credential.digest.nc, \n \t\t\t\t &hdr->credential.digest.cnonce,\n@@ -30,6 +31,9 @@\n \t\t\t\t &cred_info->realm,\n \t\t\t\t cred_info, \n \t\t\t\t method );\n+\n+\tif (status != PJ_SUCCESS)\n+\t    return status;\n \n \t/* Compare digest. */\n \treturn (pj_stricmp(&digest, &hdr->credential.digest.response) == 0) ?",
  "diff_line_info": {
    "deleted_lines": [
      "\tpjsip_auth_create_digest(&digest, "
    ],
    "added_lines": [
      "\tpj_status_t status;",
      "\tstatus = pjsip_auth_create_digest(&digest, ",
      "",
      "\tif (status != PJ_SUCCESS)",
      "\t    return status;"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/pjsip/pjproject/pull/3009",
  "description": {
    "pr_info": {
      "title": "Check potential buffer overflow in `pjsip_auth_create_digest()`",
      "number": 3009
    },
    "comment": [
      "Related commit of https://github.com/pjsip/pjproject/commit/d27f79da11df7bc8bb56c2f291d71e54df8d2c47 of [GHSA-73f7-48m9-w662](https://github.com/pjsip/pjproject/security/advisories/GHSA-73f7-48m9-w662) : fix potential buffer overflow in `pjsip_auth_create_digest()`",
      "I'm having a hard time figuring out whether `pjsip_auth_create_digest` is part of the public API and therefore whether applying this patch would be API/ABI-breaking."
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 1.0  \n\nThe changes fix a buffer overflow in `pjsip_auth_create_digest()`, align with the vulnerability description, and the code properly handles errors, confirming it's a security fix."
}