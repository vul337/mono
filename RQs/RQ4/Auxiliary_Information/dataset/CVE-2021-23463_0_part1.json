{
    "cve_id": "CVE-2021-23463",
    "cwe_ids": [
        "CWE-611"
    ],
    "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:N/A:P",
    "cvss_is_v3": false,
    "repo_name": "h2database",
    "commit_msg": "fix for #3195 CQLXML XXE vulnerability",
    "commit_hash": "d83285fd2e48fb075780ee95badee6f5a15ea7f8",
    "git_url": "https://github.com/h2database/h2database/commit/d83285fd2e48fb075780ee95badee6f5a15ea7f8",
    "file_path": "h2/src/main/org/h2/jdbc/JdbcSQLXML.java",
    "func_name": "setResult",
    "func_before": "@SuppressWarnings(\"unchecked\")\n    @Override\n    public <T extends Result> T setResult(Class<T> resultClass) throws SQLException {\n        try {\n            if (isDebugEnabled()) {\n                debugCode(\n                        \"getSource(\" + (resultClass != null ? resultClass.getSimpleName() + \".class\" : \"null\") + ')');\n            }\n            checkEditable();\n            if (resultClass == null || resultClass == DOMResult.class) {\n                domResult = new DOMResult();\n                state = State.SET_CALLED;\n                return (T) domResult;\n            } else if (resultClass == SAXResult.class) {\n                SAXTransformerFactory transformerFactory = (SAXTransformerFactory) TransformerFactory.newInstance();\n                TransformerHandler transformerHandler = transformerFactory.newTransformerHandler();\n                Writer writer = setCharacterStreamImpl();\n                transformerHandler.setResult(new StreamResult(writer));\n                SAXResult saxResult = new SAXResult(transformerHandler);\n                closable = writer;\n                state = State.SET_CALLED;\n                return (T) saxResult;\n            } else if (resultClass == StAXResult.class) {\n                XMLOutputFactory xof = XMLOutputFactory.newInstance();\n                Writer writer = setCharacterStreamImpl();\n                StAXResult staxResult = new StAXResult(xof.createXMLStreamWriter(writer));\n                closable = writer;\n                state = State.SET_CALLED;\n                return (T) staxResult;\n            } else if (StreamResult.class.equals(resultClass)) {\n                Writer writer = setCharacterStreamImpl();\n                StreamResult streamResult = new StreamResult(writer);\n                closable = writer;\n                state = State.SET_CALLED;\n                return (T) streamResult;\n            }\n            throw unsupported(resultClass.getName());\n        } catch (Exception e) {\n            throw logAndConvert(e);\n        }\n    }",
    "abstract_func_before": "@SuppressWarnings(\"unchecked\")\n    @Override\n    public <T extends Result> T setResult(Class<T> VAR_0) throws SQLException {\n        try {\n            if (isDebugEnabled()) {\n                debugCode(\n                        \"getSource(\" + (VAR_0 != null ? VAR_0.getSimpleName() + \".class\" : \"null\") + ')');\n            }\n            checkEditable();\n            if (VAR_0 == null || VAR_0 == DOMResult.class) {\n                VAR_1 = new DOMResult();\n                VAR_2 = VAR_3.SET_CALLED;\n                return (T) VAR_1;\n            } else if (VAR_0 == SAXResult.class) {\n                SAXTransformerFactory VAR_4 = (SAXTransformerFactory) VAR_5.newInstance();\n                TransformerHandler VAR_6 = VAR_4.newTransformerHandler();\n                Writer VAR_7 = setCharacterStreamImpl();\n                VAR_6.setResult(new StreamResult(VAR_7));\n                SAXResult VAR_8 = new SAXResult(VAR_6);\n                VAR_9 = VAR_7;\n                VAR_2 = VAR_3.SET_CALLED;\n                return (T) VAR_8;\n            } else if (VAR_0 == StAXResult.class) {\n                XMLOutputFactory VAR_10 = VAR_11.newInstance();\n                Writer VAR_7 = setCharacterStreamImpl();\n                StAXResult VAR_12 = new StAXResult(VAR_10.createXMLStreamWriter(VAR_7));\n                VAR_9 = VAR_7;\n                VAR_2 = VAR_3.SET_CALLED;\n                return (T) VAR_12;\n            } else if (StreamResult.class.equals(VAR_0)) {\n                Writer VAR_7 = setCharacterStreamImpl();\n                StreamResult VAR_13 = new StreamResult(VAR_7);\n                VAR_9 = VAR_7;\n                VAR_2 = VAR_3.SET_CALLED;\n                return (T) VAR_13;\n            }\n            throw unsupported(VAR_0.getName());\n        } catch (Exception VAR_14) {\n            throw logAndConvert(VAR_14);\n        }\n    }",
    "func_graph_path_before": "h2database/d83285fd2e48fb075780ee95badee6f5a15ea7f8/JdbcSQLXML.java/vul/before/1.json",
    "func": "@SuppressWarnings(\"unchecked\")\n    @Override\n    public <T extends Result> T setResult(Class<T> resultClass) throws SQLException {\n        try {\n            if (isDebugEnabled()) {\n                debugCode(\n                        \"setResult(\" + (resultClass != null ? resultClass.getSimpleName() + \".class\" : \"null\") + ')');\n            }\n            checkEditable();\n            if (resultClass == null || resultClass == DOMResult.class) {\n                domResult = new DOMResult();\n                state = State.SET_CALLED;\n                return (T) domResult;\n            } else if (resultClass == SAXResult.class) {\n                SAXTransformerFactory transformerFactory = (SAXTransformerFactory) TransformerFactory.newInstance();\n                TransformerHandler transformerHandler = transformerFactory.newTransformerHandler();\n                Writer writer = setCharacterStreamImpl();\n                transformerHandler.setResult(new StreamResult(writer));\n                SAXResult saxResult = new SAXResult(transformerHandler);\n                closable = writer;\n                state = State.SET_CALLED;\n                return (T) saxResult;\n            } else if (resultClass == StAXResult.class) {\n                XMLOutputFactory xof = XMLOutputFactory.newInstance();\n                Writer writer = setCharacterStreamImpl();\n                StAXResult staxResult = new StAXResult(xof.createXMLStreamWriter(writer));\n                closable = writer;\n                state = State.SET_CALLED;\n                return (T) staxResult;\n            } else if (StreamResult.class.equals(resultClass)) {\n                Writer writer = setCharacterStreamImpl();\n                StreamResult streamResult = new StreamResult(writer);\n                closable = writer;\n                state = State.SET_CALLED;\n                return (T) streamResult;\n            }\n            throw unsupported(resultClass.getName());\n        } catch (Exception e) {\n            throw logAndConvert(e);\n        }\n    }",
    "abstract_func": "@SuppressWarnings(\"unchecked\")\n    @Override\n    public <T extends Result> T setResult(Class<T> VAR_0) throws SQLException {\n        try {\n            if (isDebugEnabled()) {\n                debugCode(\n                        \"setResult(\" + (VAR_0 != null ? VAR_0.getSimpleName() + \".class\" : \"null\") + ')');\n            }\n            checkEditable();\n            if (VAR_0 == null || VAR_0 == DOMResult.class) {\n                VAR_1 = new DOMResult();\n                VAR_2 = VAR_3.SET_CALLED;\n                return (T) VAR_1;\n            } else if (VAR_0 == SAXResult.class) {\n                SAXTransformerFactory VAR_4 = (SAXTransformerFactory) VAR_5.newInstance();\n                TransformerHandler VAR_6 = VAR_4.newTransformerHandler();\n                Writer VAR_7 = setCharacterStreamImpl();\n                VAR_6.setResult(new StreamResult(VAR_7));\n                SAXResult VAR_8 = new SAXResult(VAR_6);\n                VAR_9 = VAR_7;\n                VAR_2 = VAR_3.SET_CALLED;\n                return (T) VAR_8;\n            } else if (VAR_0 == StAXResult.class) {\n                XMLOutputFactory VAR_10 = VAR_11.newInstance();\n                Writer VAR_7 = setCharacterStreamImpl();\n                StAXResult VAR_12 = new StAXResult(VAR_10.createXMLStreamWriter(VAR_7));\n                VAR_9 = VAR_7;\n                VAR_2 = VAR_3.SET_CALLED;\n                return (T) VAR_12;\n            } else if (StreamResult.class.equals(VAR_0)) {\n                Writer VAR_7 = setCharacterStreamImpl();\n                StreamResult VAR_13 = new StreamResult(VAR_7);\n                VAR_9 = VAR_7;\n                VAR_2 = VAR_3.SET_CALLED;\n                return (T) VAR_13;\n            }\n            throw unsupported(VAR_0.getName());\n        } catch (Exception VAR_14) {\n            throw logAndConvert(VAR_14);\n        }\n    }",
    "func_graph_path": "h2database/d83285fd2e48fb075780ee95badee6f5a15ea7f8/JdbcSQLXML.java/vul/after/1.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -4,7 +4,7 @@\n         try {\n             if (isDebugEnabled()) {\n                 debugCode(\n-                        \"getSource(\" + (resultClass != null ? resultClass.getSimpleName() + \".class\" : \"null\") + ')');\n+                        \"setResult(\" + (resultClass != null ? resultClass.getSimpleName() + \".class\" : \"null\") + ')');\n             }\n             checkEditable();\n             if (resultClass == null || resultClass == DOMResult.class) {",
    "diff_line_info": {
        "deleted_lines": [
            "                        \"getSource(\" + (resultClass != null ? resultClass.getSimpleName() + \".class\" : \"null\") + ')');"
        ],
        "added_lines": [
            "                        \"setResult(\" + (resultClass != null ? resultClass.getSimpleName() + \".class\" : \"null\") + ')');"
        ]
    },
    "is_vul": true,
    "pr_url": "https://github.com/h2database/h2database/pull/3199",
    "description": "Here is the fix #3195 , but I have no idea as to when it might be released. :disappointed: ",
    "Bug Filter": "Supporting & Non-Core Improvements",
    "Bug Filter Confidence": 0.4,
    "Bug Filter Response": "**Final Classification:** Supporting & Non-Core Improvements; **Confidence:** 0.4\n\nThe commit message indicates a security fix for an XXE vulnerability, but the code changes are merely updating debug logging, which doesn't address the security issue, leading to low confidence in the classification."
}