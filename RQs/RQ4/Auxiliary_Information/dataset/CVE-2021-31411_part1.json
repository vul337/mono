{
  "cve_id": "CVE-2021-31411",
  "cwe_ids": [
    "CWE-379"
  ],
  "cvss_vector": "AV:L/AC:L/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "vaadin/flow",
  "commit_msg": "Simplify if else, clean exception.",
  "commit_hash": "82cea56045b8430f7a26f037c01486b1feffa51d",
  "git_url": "https://github.com/vaadin/flow/commit/82cea56045b8430f7a26f037c01486b1feffa51d",
  "file_path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/JarContentsManager.java",
  "func_name": "copyJarEntryTrimmingBasePath",
  "func_before": "private void copyJarEntryTrimmingBasePath(JarFile jarFile,\n            ZipEntry jarEntry, String basePath, File outputDirectory) {\n        String fullPath = jarEntry.getName();\n        String relativePath = fullPath\n                .substring(fullPath.toLowerCase(Locale.ENGLISH)\n                        .indexOf(basePath.toLowerCase(Locale.ENGLISH))\n                        + basePath.length());\n        File target = new File(outputDirectory, relativePath);\n        try {\n            if (target.exists()) {\n                if (!hasSameContent(jarFile.getInputStream(jarEntry), target)) {\n                    FileUtils.copyInputStreamToFile(\n                            jarFile.getInputStream(jarEntry), target);\n                }\n            } else {\n                FileUtils.copyInputStreamToFile(\n                        jarFile.getInputStream(jarEntry), target);\n            }\n        } catch (IOException e) {\n            throw new UncheckedIOException(String.format(\n                    \"Failed to extract jar entry '%s' from jarFile '%s'\",\n                    jarEntry, outputDirectory), e);\n        }\n    }",
  "abstract_func_before": "private void copyJarEntryTrimmingBasePath(JarFile VAR_0,\n            ZipEntry VAR_1, String VAR_2, File VAR_3) {\n        String VAR_4 = VAR_1.getName();\n        String VAR_5 = VAR_4\n                .substring(VAR_4.toLowerCase(VAR_6.ENGLISH)\n                        .indexOf(VAR_2.toLowerCase(VAR_6.ENGLISH))\n                        + VAR_2.length());\n        File VAR_7 = new File(VAR_3, VAR_5);\n        try {\n            if (VAR_7.exists()) {\n                if (!hasSameContent(VAR_0.getInputStream(VAR_1), VAR_7)) {\n                    VAR_8.copyInputStreamToFile(\n                            VAR_0.getInputStream(VAR_1), VAR_7);\n                }\n            } else {\n                VAR_8.copyInputStreamToFile(\n                        VAR_0.getInputStream(VAR_1), VAR_7);\n            }\n        } catch (IOException VAR_9) {\n            throw new UncheckedIOException(VAR_10.format(\n                    \"Failed to extract jar entry '%s' from jarFile '%s'\",\n                    VAR_1, VAR_3), VAR_9);\n        }\n    }",
  "func_graph_path_before": "vaadin/flow/82cea56045b8430f7a26f037c01486b1feffa51d/JarContentsManager.java/vul/before/0.json",
  "func": "private void copyJarEntryTrimmingBasePath(JarFile jarFile,\n            ZipEntry jarEntry, String basePath, File outputDirectory) {\n        String fullPath = jarEntry.getName();\n        String relativePath = fullPath\n                .substring(fullPath.toLowerCase(Locale.ENGLISH)\n                        .indexOf(basePath.toLowerCase(Locale.ENGLISH))\n                        + basePath.length());\n        File target = new File(outputDirectory, relativePath);\n        try {\n            if (!target.exists()\n                    || !hasSameContent(jarFile.getInputStream(jarEntry),\n                            target)) {\n                FileUtils.copyInputStreamToFile(\n                        jarFile.getInputStream(jarEntry), target);\n            }\n        } catch (IOException e) {\n            throw new UncheckedIOException(String.format(\n                    \"Failed to extract jar entry '%s' from jarFile\", jarEntry),\n                    e);\n        }\n    }",
  "abstract_func": "private void copyJarEntryTrimmingBasePath(JarFile VAR_0,\n            ZipEntry VAR_1, String VAR_2, File VAR_3) {\n        String VAR_4 = VAR_1.getName();\n        String VAR_5 = VAR_4\n                .substring(VAR_4.toLowerCase(VAR_6.ENGLISH)\n                        .indexOf(VAR_2.toLowerCase(VAR_6.ENGLISH))\n                        + VAR_2.length());\n        File VAR_7 = new File(VAR_3, VAR_5);\n        try {\n            if (!VAR_7.exists()\n                    || !hasSameContent(VAR_0.getInputStream(VAR_1),\n                            VAR_7)) {\n                VAR_8.copyInputStreamToFile(\n                        VAR_0.getInputStream(VAR_1), VAR_7);\n            }\n        } catch (IOException VAR_9) {\n            throw new UncheckedIOException(VAR_10.format(\n                    \"Failed to extract jar entry '%s' from jarFile\", VAR_1),\n                    VAR_9);\n        }\n    }",
  "func_graph_path": "vaadin/flow/82cea56045b8430f7a26f037c01486b1feffa51d/JarContentsManager.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -7,18 +7,15 @@\n                         + basePath.length());\n         File target = new File(outputDirectory, relativePath);\n         try {\n-            if (target.exists()) {\n-                if (!hasSameContent(jarFile.getInputStream(jarEntry), target)) {\n-                    FileUtils.copyInputStreamToFile(\n-                            jarFile.getInputStream(jarEntry), target);\n-                }\n-            } else {\n+            if (!target.exists()\n+                    || !hasSameContent(jarFile.getInputStream(jarEntry),\n+                            target)) {\n                 FileUtils.copyInputStreamToFile(\n                         jarFile.getInputStream(jarEntry), target);\n             }\n         } catch (IOException e) {\n             throw new UncheckedIOException(String.format(\n-                    \"Failed to extract jar entry '%s' from jarFile '%s'\",\n-                    jarEntry, outputDirectory), e);\n+                    \"Failed to extract jar entry '%s' from jarFile\", jarEntry),\n+                    e);\n         }\n     }",
  "diff_line_info": {
    "deleted_lines": [
      "            if (target.exists()) {",
      "                if (!hasSameContent(jarFile.getInputStream(jarEntry), target)) {",
      "                    FileUtils.copyInputStreamToFile(",
      "                            jarFile.getInputStream(jarEntry), target);",
      "                }",
      "            } else {",
      "                    \"Failed to extract jar entry '%s' from jarFile '%s'\",",
      "                    jarEntry, outputDirectory), e);"
    ],
    "added_lines": [
      "            if (!target.exists()",
      "                    || !hasSameContent(jarFile.getInputStream(jarEntry),",
      "                            target)) {",
      "                    \"Failed to extract jar entry '%s' from jarFile\", jarEntry),",
      "                    e);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/vaadin/flow/pull/10640",
  "description": {
    "pr_info": {
      "title": "fix: Compare file content from stream",
      "number": 10640
    },
    "comment": [
      "Compare jar file content and existing\r\ntarget file content before writing to disk.",
      "LGTM. Not merged it yet in case someone else wants to review.",
      "This ticket/PR has been released with platform 19.0.5. For prerelease versions, it will be included in its final version.",
      "This ticket/PR has been released with platform 14.6.0.beta2. For prerelease versions, it will be included in its final version.",
      "This ticket/PR has been released with platform 14.5.3. For prerelease versions, it will be included in its final version."
    ]
  },
  "Bug Filter": "Supporting & Non-Core Improvements",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Supporting & Non-Core Improvements  \n**Confidence:** 0.9  \n\nThe patch simplifies the code and cleans exceptions without addressing a security vulnerability, hence it's a non-core improvement."
}