{
  "cve_id": "CVE-2021-45942",
  "cwe_ids": [
    "CWE-787"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "AcademySoftwareFoundation/openexr",
  "commit_msg": "enforce xSampling/ySampling==1 in CompositeDeepScanLine (#1209)\n\nSigned-off-by: Peter Hillman <peterh@wetafx.co.nz>",
  "commit_hash": "11cad77da87c4fa2aab7d58dd5339e254db7937e",
  "git_url": "https://github.com/AcademySoftwareFoundation/openexr/commit/11cad77da87c4fa2aab7d58dd5339e254db7937e",
  "file_path": "src/lib/OpenEXR/ImfCompositeDeepScanLine.cpp",
  "func_name": "CompositeDeepScanLine::setFrameBuffer",
  "func_before": "void\nCompositeDeepScanLine::setFrameBuffer(const FrameBuffer& fr)\n{\n    \n    //\n    // count channels; build map between channels in frame buffer\n    // and channels in internal buffers\n    //\n    \n    _Data->_channels.resize(3);\n    _Data->_channels[0]=\"Z\";\n    _Data->_channels[1]=_Data->_zback ? \"ZBack\" : \"Z\";\n    _Data->_channels[2]=\"A\";\n    _Data->_bufferMap.resize(0);\n    \n    for(FrameBuffer::ConstIterator q=fr.begin();q!=fr.end();q++)\n    {\n        string name(q.name());\n        if(name==\"ZBack\")\n        {\n            _Data->_bufferMap.push_back(1);\n        }else if(name==\"Z\")\n        {\n            _Data->_bufferMap.push_back(0);\n        }else if(name==\"A\")\n        {\n            _Data->_bufferMap.push_back(2);\n        }else{\n            _Data->_bufferMap.push_back(static_cast<int>(_Data->_channels.size()));\n            _Data->_channels.push_back(name);\n        }\n    }\n    \n  _Data->_outputFrameBuffer=fr;\n}",
  "abstract_func_before": "void\nCompositeDeepScanLine::setFrameBuffer(const FrameBuffer& VAR_0)\n{\n    \n    /* COMMENT_0 */\n    /* COMMENT_1 */\n    /* COMMENT_2 */\n    /* COMMENT_0 */\n    \n    VAR_1->_channels.resize(3);\n    VAR_1->_channels[0]=\"Z\";\n    VAR_1->_channels[1]=VAR_1->_zback ? \"ZBack\" : \"Z\";\n    VAR_1->_channels[2]=\"A\";\n    VAR_1->_bufferMap.resize(0);\n    \n    for(FrameBuffer::ConstIterator VAR_2=VAR_0.begin();VAR_2!=VAR_0.end();VAR_2++)\n    {\n        string VAR_3(VAR_2.name());\n        if(VAR_3==\"ZBack\")\n        {\n            VAR_1->_bufferMap.push_back(1);\n        }else if(VAR_3==\"Z\")\n        {\n            VAR_1->_bufferMap.push_back(0);\n        }else if(VAR_3==\"A\")\n        {\n            VAR_1->_bufferMap.push_back(2);\n        }else{\n            VAR_1->_bufferMap.push_back(VAR_4<int>(VAR_1->_channels.size()));\n            VAR_1->_channels.push_back(VAR_3);\n        }\n    }\n    \n  VAR_1->_outputFrameBuffer=VAR_0;\n}",
  "func_graph_path_before": "AcademySoftwareFoundation/openexr/11cad77da87c4fa2aab7d58dd5339e254db7937e/ImfCompositeDeepScanLine.cpp/vul/before/0.json",
  "func": "void\nCompositeDeepScanLine::setFrameBuffer(const FrameBuffer& fr)\n{\n    \n    //\n    // count channels; build map between channels in frame buffer\n    // and channels in internal buffers\n    //\n    \n    _Data->_channels.resize(3);\n    _Data->_channels[0]=\"Z\";\n    _Data->_channels[1]=_Data->_zback ? \"ZBack\" : \"Z\";\n    _Data->_channels[2]=\"A\";\n    _Data->_bufferMap.resize(0);\n    \n    for(FrameBuffer::ConstIterator q=fr.begin();q!=fr.end();q++)\n    {\n\n        //\n        // Frame buffer must have xSampling and ySampling set to 1\n        // (Sampling in FrameBuffers must match sampling in file,\n        //  and Header::sanityCheck enforces sampling in deep files is 1)\n        //\n\n        if(q.slice().xSampling!=1 || q.slice().ySampling!=1)\n        {\n             THROW (IEX_NAMESPACE::ArgExc, \"X and/or y subsampling factors \"\n\t\t\t\t\"of \\\"\" << q.name() << \"\\\" channel in framebuffer \"\n\t\t\t\t\"are not 1\");\n        }\n\n        string name(q.name());\n        if(name==\"ZBack\")\n        {\n            _Data->_bufferMap.push_back(1);\n        }else if(name==\"Z\")\n        {\n            _Data->_bufferMap.push_back(0);\n        }else if(name==\"A\")\n        {\n            _Data->_bufferMap.push_back(2);\n        }else{\n            _Data->_bufferMap.push_back(static_cast<int>(_Data->_channels.size()));\n            _Data->_channels.push_back(name);\n        }\n    }\n    \n  _Data->_outputFrameBuffer=fr;\n}",
  "abstract_func": "void\nCompositeDeepScanLine::setFrameBuffer(const FrameBuffer& VAR_0)\n{\n    \n    /* COMMENT_0 */\n    /* COMMENT_1 */\n    /* COMMENT_2 */\n    /* COMMENT_0 */\n    \n    VAR_1->_channels.resize(3);\n    VAR_1->_channels[0]=\"Z\";\n    VAR_1->_channels[1]=VAR_1->_zback ? \"ZBack\" : \"Z\";\n    VAR_1->_channels[2]=\"A\";\n    VAR_1->_bufferMap.resize(0);\n    \n    for(FrameBuffer::ConstIterator VAR_2=VAR_0.begin();VAR_2!=VAR_0.end();VAR_2++)\n    {\n\n        /* COMMENT_0 */\n        /* COMMENT_3 */\n        /* COMMENT_4 */\n        /* COMMENT_5 */\n        /* COMMENT_0 */\n\n        if(VAR_2.slice().xSampling!=1 || VAR_2.slice().ySampling!=1)\n        {\n             THROW (IEX_NAMESPACE::ArgExc, \"X and/or y subsampling factors \"\n\t\t\t\t\"of \\\"\" << VAR_2.name() << \"\\\" channel in framebuffer \"\n\t\t\t\t\"are not 1\");\n        }\n\n        string VAR_3(VAR_2.name());\n        if(VAR_3==\"ZBack\")\n        {\n            VAR_1->_bufferMap.push_back(1);\n        }else if(VAR_3==\"Z\")\n        {\n            VAR_1->_bufferMap.push_back(0);\n        }else if(VAR_3==\"A\")\n        {\n            VAR_1->_bufferMap.push_back(2);\n        }else{\n            VAR_1->_bufferMap.push_back(VAR_4<int>(VAR_1->_channels.size()));\n            VAR_1->_channels.push_back(VAR_3);\n        }\n    }\n    \n  VAR_1->_outputFrameBuffer=VAR_0;\n}",
  "func_graph_path": "AcademySoftwareFoundation/openexr/11cad77da87c4fa2aab7d58dd5339e254db7937e/ImfCompositeDeepScanLine.cpp/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -15,6 +15,20 @@\n     \n     for(FrameBuffer::ConstIterator q=fr.begin();q!=fr.end();q++)\n     {\n+\n+        //\n+        // Frame buffer must have xSampling and ySampling set to 1\n+        // (Sampling in FrameBuffers must match sampling in file,\n+        //  and Header::sanityCheck enforces sampling in deep files is 1)\n+        //\n+\n+        if(q.slice().xSampling!=1 || q.slice().ySampling!=1)\n+        {\n+             THROW (IEX_NAMESPACE::ArgExc, \"X and/or y subsampling factors \"\n+\t\t\t\t\"of \\\"\" << q.name() << \"\\\" channel in framebuffer \"\n+\t\t\t\t\"are not 1\");\n+        }\n+\n         string name(q.name());\n         if(name==\"ZBack\")\n         {",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "",
      "        //",
      "        // Frame buffer must have xSampling and ySampling set to 1",
      "        // (Sampling in FrameBuffers must match sampling in file,",
      "        //  and Header::sanityCheck enforces sampling in deep files is 1)",
      "        //",
      "",
      "        if(q.slice().xSampling!=1 || q.slice().ySampling!=1)",
      "        {",
      "             THROW (IEX_NAMESPACE::ArgExc, \"X and/or y subsampling factors \"",
      "\t\t\t\t\"of \\\"\" << q.name() << \"\\\" channel in framebuffer \"",
      "\t\t\t\t\"are not 1\");",
      "        }",
      ""
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/AcademySoftwareFoundation/openexr/pull/1209",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/AcademySoftwareFoundation/openexr/pull/1209: 403 Client Error: Forbidden for url: https://api.github.com/repos/AcademySoftwareFoundation/openexr/pulls/1209",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.8,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 0.8  \n**Reasoning:** While the change enforces xSampling and ySampling to 1, preventing certain logic errors, the context doesn't confirm it as a security fix, so the confidence is moderate."
}