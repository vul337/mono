{
  "cve_id": "CVE-2022-30334",
  "cwe_ids": [
    "CWE-200"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:N/A:N",
  "cvss_is_v3": false,
  "repo_name": "brave/brave-core",
  "commit_msg": "Add browsertest for cross-origin .onion requests.",
  "commit_hash": "5e415ed9dfb97c87b110da8efb987a616f5b42a9",
  "git_url": "https://github.com/brave/brave-core/commit/5e415ed9dfb97c87b110da8efb987a616f5b42a9",
  "file_path": "components/tor/onion_location_navigation_throttle.cc",
  "func_name": "OnionLocationNavigationThrottle::WillStartRequest",
  "func_before": "content::NavigationThrottle::ThrottleCheckResult\nOnionLocationNavigationThrottle::WillStartRequest() {\n  // If a user enters .onion address in non-Tor window, we block the request and\n  // offer \"Open in Tor\" button or automatically opening it in Tor window.\n  if (!is_tor_profile_) {\n    GURL url = navigation_handle()->GetURL();\n    if (url.SchemeIsHTTPOrHTTPS() && url.DomainIs(\"onion\")) {\n      if (pref_service_->GetBoolean(prefs::kAutoOnionRedirect)) {\n        delegate_->OpenInTorWindow(navigation_handle()->GetWebContents(),\n                                   std::move(url));\n      } else {\n        OnionLocationTabHelper::SetOnionLocation(\n            navigation_handle()->GetWebContents(), url);\n      }\n      return content::NavigationThrottle::BLOCK_REQUEST;\n    } else {\n      OnionLocationTabHelper::SetOnionLocation(\n          navigation_handle()->GetWebContents(), GURL());\n    }\n  }\n  return content::NavigationThrottle::PROCEED;\n}",
  "abstract_func_before": "content::NavigationThrottle::ThrottleCheckResult\nOnionLocationNavigationThrottle::WillStartRequest() {\n  /* COMMENT_0 */\n  /* COMMENT_1 */\n  if (!VAR_0) {\n    GURL VAR_1 = navigation_handle()->GetURL();\n    if (VAR_1.SchemeIsHTTPOrHTTPS() && VAR_1.DomainIs(\"onion\")) {\n      if (VAR_2->GetBoolean(prefs::kAutoOnionRedirect)) {\n        VAR_3->OpenInTorWindow(navigation_handle()->GetWebContents(),\n                                   std::move(VAR_1));\n      } else {\n        OnionLocationTabHelper::SetOnionLocation(\n            navigation_handle()->GetWebContents(), VAR_1);\n      }\n      return content::NavigationThrottle::BLOCK_REQUEST;\n    } else {\n      OnionLocationTabHelper::SetOnionLocation(\n          navigation_handle()->GetWebContents(), GURL());\n    }\n  }\n  return content::NavigationThrottle::PROCEED;\n}",
  "func_graph_path_before": "brave/brave-core/5e415ed9dfb97c87b110da8efb987a616f5b42a9/onion_location_navigation_throttle.cc/vul/before/0.json",
  "func": "content::NavigationThrottle::ThrottleCheckResult\nOnionLocationNavigationThrottle::WillStartRequest() {\n  // If a user enters .onion address in non-Tor window, we block the request and\n  // offer \"Open in Tor\" button or automatically opening it in Tor window.\n  if (!is_tor_profile_) {\n    GURL url = navigation_handle()->GetURL();\n    if (url.SchemeIsHTTPOrHTTPS() && url.DomainIs(\"onion\")) {\n      if (pref_service_->GetBoolean(prefs::kAutoOnionRedirect)) {\n        delegate_->OpenInTorWindow(navigation_handle()->GetWebContents(),\n                                   std::move(url));\n      } else {\n        OnionLocationTabHelper::SetOnionLocation(\n            navigation_handle()->GetWebContents(), url);\n      }\n      return block_onion_requests_outside_tor_for_testing_\n                 ? content::NavigationThrottle::BLOCK_REQUEST\n                 : content::NavigationThrottle::PROCEED;\n    } else {\n      OnionLocationTabHelper::SetOnionLocation(\n          navigation_handle()->GetWebContents(), GURL());\n    }\n  }\n  return content::NavigationThrottle::PROCEED;\n}",
  "abstract_func": "content::NavigationThrottle::ThrottleCheckResult\nOnionLocationNavigationThrottle::WillStartRequest() {\n  /* COMMENT_0 */\n  /* COMMENT_1 */\n  if (!VAR_0) {\n    GURL VAR_1 = navigation_handle()->GetURL();\n    if (VAR_1.SchemeIsHTTPOrHTTPS() && VAR_1.DomainIs(\"onion\")) {\n      if (VAR_2->GetBoolean(prefs::kAutoOnionRedirect)) {\n        VAR_3->OpenInTorWindow(navigation_handle()->GetWebContents(),\n                                   std::move(VAR_1));\n      } else {\n        OnionLocationTabHelper::SetOnionLocation(\n            navigation_handle()->GetWebContents(), VAR_1);\n      }\n      return VAR_4\n                 ? content::NavigationThrottle::BLOCK_REQUEST\n                 : content::NavigationThrottle::PROCEED;\n    } else {\n      OnionLocationTabHelper::SetOnionLocation(\n          navigation_handle()->GetWebContents(), GURL());\n    }\n  }\n  return content::NavigationThrottle::PROCEED;\n}",
  "func_graph_path": "brave/brave-core/5e415ed9dfb97c87b110da8efb987a616f5b42a9/onion_location_navigation_throttle.cc/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -12,7 +12,9 @@\n         OnionLocationTabHelper::SetOnionLocation(\n             navigation_handle()->GetWebContents(), url);\n       }\n-      return content::NavigationThrottle::BLOCK_REQUEST;\n+      return block_onion_requests_outside_tor_for_testing_\n+                 ? content::NavigationThrottle::BLOCK_REQUEST\n+                 : content::NavigationThrottle::PROCEED;\n     } else {\n       OnionLocationTabHelper::SetOnionLocation(\n           navigation_handle()->GetWebContents(), GURL());",
  "diff_line_info": {
    "deleted_lines": [
      "      return content::NavigationThrottle::BLOCK_REQUEST;"
    ],
    "added_lines": [
      "      return block_onion_requests_outside_tor_for_testing_",
      "                 ? content::NavigationThrottle::BLOCK_REQUEST",
      "                 : content::NavigationThrottle::PROCEED;"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/brave/brave-core/pull/10760",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/brave/brave-core/pull/10760: 403 Client Error: Forbidden for url: https://api.github.com/repos/brave/brave-core/pulls/10760",
  "Bug Filter": "Testing & Validation Updates",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Testing & Validation Updates;\n**Confidence:** 0.9"
}