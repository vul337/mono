{
  "cve_id": "CVE-2020-9355",
  "cwe_ids": [
    "CWE-Other"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "danfruehauf/NetworkManager-ssh",
  "commit_msg": "Remove extra options\n\nAfter analyzing some privilege escalation possibilites, it was decided\nit is best to remove extra options",
  "commit_hash": "5d88cd89795352b5df54cc0ebb6a0076b8c89ee4",
  "git_url": "https://github.com/danfruehauf/NetworkManager-ssh/commit/5d88cd89795352b5df54cc0ebb6a0076b8c89ee4",
  "file_path": "properties/nm-ssh.c",
  "func_name": "import",
  "func_before": "static NMConnection *\nimport (NMVpnEditorPlugin *iface, const char *path, GError **error)\n{\n\tNMConnection *connection = NULL;\n\tNMSettingConnection *s_con;\n\tNMSettingVpn *s_vpn;\n\tchar *contents = NULL;\n\tchar **lines = NULL;\n\tchar *ext;\n\tchar **line;\n\n\text = strrchr (path, '.');\n\tif (!ext) {\n\t\tg_set_error (error,\n\t\t             SSH_EDITOR_PLUGIN_ERROR,\n\t\t             SSH_EDITOR_PLUGIN_ERROR_FAILED,\n\t\t             \"unknown SSH file extension, should be .sh\");\n\t\tgoto out;\n\t}\n\n\tif (strncmp (ext, \".sh\", strlen(\".sh\"))) {\n\t\tg_set_error (error,\n\t\t             SSH_EDITOR_PLUGIN_ERROR,\n\t\t             SSH_EDITOR_PLUGIN_ERROR_FAILED,\n\t\t             \"unknown SSH file extension, should be .sh\");\n\t\tgoto out;\n\t}\n\n\tif (!g_file_get_contents (path, &contents, NULL, error))\n\t\treturn NULL;\n\n\tif (!g_utf8_validate (contents, -1, NULL)) {\n\t\tchar *tmp;\n\t\tGError *conv_error = NULL;\n\n\t\ttmp = g_locale_to_utf8 (contents, -1, NULL, NULL, &conv_error);\n\t\tif (conv_error) {\n\t\t\t/* ignore the error, we tried at least. */\n\t\t\tg_error_free (conv_error);\n\t\t\tg_free (tmp);\n\t\t} else {\n\t\t\tg_assert (tmp);\n\t\t\tg_free (contents);\n\t\t\tcontents = tmp;  /* update contents with the UTF-8 safe text */\n\t\t}\n\t}\n\n\tlines = g_strsplit_set (contents, \"\\r\\n\", 0);\n\tif (g_strv_length (lines) <= 1) {\n\t\tg_set_error (error,\n\t\t             SSH_EDITOR_PLUGIN_ERROR,\n\t\t             SSH_EDITOR_PLUGIN_ERROR_FAILED,\n\t\t             \"not a valid SSH configuration file\");\n\t\tgoto out;\n\t}\n\n\tconnection = nm_simple_connection_new ();\n\ts_con = NM_SETTING_CONNECTION (nm_setting_connection_new ());\n\tnm_connection_add_setting (connection, NM_SETTING (s_con));\n\n\ts_vpn = NM_SETTING_VPN (nm_setting_vpn_new ());\n\n\tg_object_set (s_vpn, NM_SETTING_VPN_SERVICE_TYPE, NM_DBUS_SERVICE_SSH, NULL);\n\n\tfor (line = lines; *line; line++) {\n\t\tchar *comment;\n\t\tchar **items = NULL;\n\n\t\tif ((comment = strchr (*line, '#')))\n\t\t\t*comment = '\\0';\n\t\tif ((comment = strchr (*line, ';')))\n\t\t\t*comment = '\\0';\n\t\tif (!strlen (*line))\n\t\t\tcontinue;\n\n\t\titems = g_strsplit_set (*line, \"=\", 0);\n\t\tif (!items) {\n\t\t\tcontinue;\n\t\t} else {\n\t\t\t/* Uncomment if you'd like to debug parsing of items */\n\t\t\t/* g_message(\"%s = %s\", items[0], items[1]); */\n\t\t}\n\n\t\t/* the PARSE_IMPORT_KEY will save heaps of lines of code, it's\n\t\t * on the top of the file if you're looking for it */\n\t\tPARSE_IMPORT_KEY (REMOTE_KEY, NM_SSH_KEY_REMOTE, items, s_vpn)\n\t\tPARSE_IMPORT_KEY_WITH_DEFAULT_VALUE_STR (AUTH_TYPE_KEY, NM_SSH_KEY_AUTH_TYPE, items, s_vpn, NM_SSH_AUTH_TYPE_SSH_AGENT)\n\t\tPARSE_IMPORT_KEY_WITH_DEFAULT_VALUE_STR (REMOTE_USERNAME_KEY, NM_SSH_KEY_REMOTE_USERNAME, items, s_vpn, NM_SSH_DEFAULT_REMOTE_USERNAME);\n\t\tPARSE_IMPORT_KEY (KEY_FILE_KEY, NM_SSH_KEY_KEY_FILE, items, s_vpn)\n\t\tPARSE_IMPORT_KEY (REMOTE_IP_KEY, NM_SSH_KEY_REMOTE_IP, items, s_vpn)\n\t\tPARSE_IMPORT_KEY (LOCAL_IP_KEY, NM_SSH_KEY_LOCAL_IP, items, s_vpn)\n\t\tPARSE_IMPORT_KEY (NETMASK_KEY, NM_SSH_KEY_NETMASK, items, s_vpn)\n\t\tPARSE_IMPORT_KEY (IP_6_KEY, NM_SSH_KEY_IP_6, items, s_vpn)\n\t\tPARSE_IMPORT_KEY (REMOTE_IP_6_KEY, NM_SSH_KEY_REMOTE_IP_6, items, s_vpn)\n\t\tPARSE_IMPORT_KEY (LOCAL_IP_6_KEY, NM_SSH_KEY_LOCAL_IP_6, items, s_vpn)\n\t\tPARSE_IMPORT_KEY (NETMASK_6_KEY, NM_SSH_KEY_NETMASK_6, items, s_vpn)\n\t\tPARSE_IMPORT_KEY_WITH_DEFAULT_VALUE_INT (PORT_KEY, NM_SSH_KEY_PORT, items, s_vpn, NM_SSH_DEFAULT_PORT)\n\t\tPARSE_IMPORT_KEY_WITH_DEFAULT_VALUE_INT (MTU_KEY, NM_SSH_KEY_TUNNEL_MTU, items, s_vpn, NM_SSH_DEFAULT_MTU)\n\t\tPARSE_IMPORT_KEY_WITH_DEFAULT_VALUE_INT (REMOTE_DEV_KEY, NM_SSH_KEY_REMOTE_DEV, items, s_vpn, NM_SSH_DEFAULT_REMOTE_DEV)\n\t\tPARSE_IMPORT_KEY_BOOL (DEV_TYPE_KEY, NM_SSH_KEY_TAP_DEV, items, s_vpn, \"tap\")\n\n\t\t/* Some extra care required with extra_opts as we need to:\n\t\t * 1. Use the whole line (might contain = chars in it)\n\t\t * 2. Strip the single/double quotes */\n\t\tif (!strncmp (items[0], EXTRA_OPTS_KEY, strlen (items[0]))) {\n\t\t\tgchar *parsed_extra_opts = NULL;\n\t\t\tgchar *unquoted_extra_opts = NULL;\n\t\t\t/* Read the whole line, witout the EXTRA_OPTS= part */\n\t\t\tparsed_extra_opts = g_strdup(*line + strlen(EXTRA_OPTS_KEY) + 1);\n\n\t\t\t/* Check if string is quoted */\n\t\t\tif ( (parsed_extra_opts[0] == '\"' && parsed_extra_opts[strlen(parsed_extra_opts)-1] == '\"') ||\n\t\t\t\t/* String is quoted (would usually be), lets strip the quotes */\n\t\t\t\t(parsed_extra_opts[0] == '\\'' && parsed_extra_opts[strlen(parsed_extra_opts)-1] == '\\'') ) {\n\t\t\t\t/* Unquote string */\n\t\t\t\tparsed_extra_opts[strlen(parsed_extra_opts)-1] = '\\0';\n\t\t\t\tunquoted_extra_opts = parsed_extra_opts + 1;\n\t\t\t}\n\t\t\t/* After all this effort, try to compare to the default value */\n\t\t\tif (strncmp(unquoted_extra_opts, NM_SSH_DEFAULT_EXTRA_OPTS, strlen(unquoted_extra_opts)))\n\t\t\t\tnm_setting_vpn_add_data_item (s_vpn, NM_SSH_KEY_EXTRA_OPTS, unquoted_extra_opts);\n\t\t\tg_free (items);\n\t\t\tg_free (parsed_extra_opts);\n\t\t\tcontinue;\n\t\t}\n\t}\n\n\tif (connection)\n\t\tnm_connection_add_setting (connection, NM_SETTING (s_vpn));\n\telse if (s_vpn)\n\t\tg_object_unref (s_vpn);\n\nout:\n\tif (lines)\n\t\tg_strfreev (lines);\n\tg_free (contents);\n\treturn connection;\n}",
  "abstract_func_before": "static NMConnection *\nimport (NMVpnEditorPlugin *VAR_0, const char *VAR_1, GError **VAR_2)\n{\n\tNMConnection *VAR_3 = NULL;\n\tNMSettingConnection *VAR_4;\n\tNMSettingVpn *VAR_5;\n\tchar *VAR_6 = NULL;\n\tchar **VAR_7 = NULL;\n\tchar *VAR_8;\n\tchar **VAR_9;\n\n\tVAR_8 = strrchr (VAR_1, '.');\n\tif (!VAR_8) {\n\t\tg_set_error (VAR_2,\n\t\t             VAR_10,\n\t\t             VAR_11,\n\t\t             \"unknown SSH file extension, should be .sh\");\n\t\tgoto out;\n\t}\n\n\tif (strncmp (VAR_8, \".sh\", strlen(\".sh\"))) {\n\t\tg_set_error (VAR_2,\n\t\t             VAR_10,\n\t\t             VAR_11,\n\t\t             \"unknown SSH file extension, should be .sh\");\n\t\tgoto out;\n\t}\n\n\tif (!g_file_get_contents (VAR_1, &VAR_6, NULL, VAR_2))\n\t\treturn NULL;\n\n\tif (!g_utf8_validate (VAR_6, -1, NULL)) {\n\t\tchar *VAR_12;\n\t\tGError *VAR_13 = NULL;\n\n\t\tVAR_12 = g_locale_to_utf8 (VAR_6, -1, NULL, NULL, &VAR_13);\n\t\tif (VAR_13) {\n\t\t\t/* COMMENT_0 */\n\t\t\tg_error_free (VAR_13);\n\t\t\tg_free (VAR_12);\n\t\t} else {\n\t\t\tg_assert (VAR_12);\n\t\t\tg_free (VAR_6);\n\t\t\tVAR_6 = VAR_12;  /* COMMENT_1 */\n\t\t}\n\t}\n\n\tVAR_7 = g_strsplit_set (VAR_6, \"\\r\\n\", 0);\n\tif (g_strv_length (VAR_7) <= 1) {\n\t\tg_set_error (VAR_2,\n\t\t             VAR_10,\n\t\t             VAR_11,\n\t\t             \"not a valid SSH configuration file\");\n\t\tgoto out;\n\t}\n\n\tVAR_3 = nm_simple_connection_new ();\n\tVAR_4 = NM_SETTING_CONNECTION (nm_setting_connection_new ());\n\tnm_connection_add_setting (VAR_3, NM_SETTING (VAR_4));\n\n\tVAR_5 = NM_SETTING_VPN (nm_setting_vpn_new ());\n\n\tg_object_set (VAR_5, VAR_14, VAR_15, NULL);\n\n\tfor (VAR_9 = VAR_7; *VAR_9; VAR_9++) {\n\t\tchar *VAR_16;\n\t\tchar **VAR_17 = NULL;\n\n\t\tif ((VAR_16 = strchr (*VAR_9, '#')))\n\t\t\t*VAR_16 = '\\0';\n\t\tif ((VAR_16 = strchr (*VAR_9, ';')))\n\t\t\t*VAR_16 = '\\0';\n\t\tif (!strlen (*VAR_9))\n\t\t\tcontinue;\n\n\t\tVAR_17 = g_strsplit_set (*VAR_9, \"=\", 0);\n\t\tif (!VAR_17) {\n\t\t\tcontinue;\n\t\t} else {\n\t\t\t/* COMMENT_2 */\n\t\t\t/* COMMENT_3 */\n\t\t}\n\n\t\t/* COMMENT_4 */\n                                                       \n\t\tPARSE_IMPORT_KEY (VAR_18, VAR_19, VAR_17, VAR_5)\n\t\tPARSE_IMPORT_KEY_WITH_DEFAULT_VALUE_STR (VAR_20, VAR_21, VAR_17, VAR_5, VAR_22)\n\t\tPARSE_IMPORT_KEY_WITH_DEFAULT_VALUE_STR (VAR_23, VAR_24, VAR_17, VAR_5, VAR_25);\n\t\tPARSE_IMPORT_KEY (VAR_26, VAR_27, VAR_17, VAR_5)\n\t\tPARSE_IMPORT_KEY (VAR_28, VAR_29, VAR_17, VAR_5)\n\t\tPARSE_IMPORT_KEY (VAR_30, VAR_31, VAR_17, VAR_5)\n\t\tPARSE_IMPORT_KEY (VAR_32, VAR_33, VAR_17, VAR_5)\n\t\tPARSE_IMPORT_KEY (VAR_34, VAR_35, VAR_17, VAR_5)\n\t\tPARSE_IMPORT_KEY (VAR_36, VAR_37, VAR_17, VAR_5)\n\t\tPARSE_IMPORT_KEY (VAR_38, VAR_39, VAR_17, VAR_5)\n\t\tPARSE_IMPORT_KEY (VAR_40, VAR_41, VAR_17, VAR_5)\n\t\tPARSE_IMPORT_KEY_WITH_DEFAULT_VALUE_INT (VAR_42, VAR_43, VAR_17, VAR_5, VAR_44)\n\t\tPARSE_IMPORT_KEY_WITH_DEFAULT_VALUE_INT (VAR_45, VAR_46, VAR_17, VAR_5, VAR_47)\n\t\tPARSE_IMPORT_KEY_WITH_DEFAULT_VALUE_INT (VAR_48, VAR_49, VAR_17, VAR_5, VAR_50)\n\t\tPARSE_IMPORT_KEY_BOOL (VAR_51, VAR_52, VAR_17, VAR_5, \"tap\")\n\n\t\t/* COMMENT_6 */\n                                                        \n                                         \n\t\tif (!strncmp (VAR_17[0], VAR_53, strlen (VAR_17[0]))) {\n\t\t\tgchar *VAR_54 = NULL;\n\t\t\tgchar *VAR_55 = NULL;\n\t\t\t/* COMMENT_9 */\n\t\t\tVAR_54 = g_strdup(*VAR_9 + strlen(VAR_53) + 1);\n\n\t\t\t/* COMMENT_10 */\n\t\t\tif ( (VAR_54[0] == '\"' && VAR_54[strlen(VAR_54)-1] == '\"') ||\n\t\t\t\t/* COMMENT_11 */\n\t\t\t\t(VAR_54[0] == '\\'' && VAR_54[strlen(VAR_54)-1] == '\\'') ) {\n\t\t\t\t/* COMMENT_12 */\n\t\t\t\tVAR_54[strlen(VAR_54)-1] = '\\0';\n\t\t\t\tVAR_55 = VAR_54 + 1;\n\t\t\t}\n\t\t\t/* COMMENT_13 */\n\t\t\tif (strncmp(VAR_55, VAR_56, strlen(VAR_55)))\n\t\t\t\tnm_setting_vpn_add_data_item (VAR_5, VAR_57, VAR_55);\n\t\t\tg_free (VAR_17);\n\t\t\tg_free (VAR_54);\n\t\t\tcontinue;\n\t\t}\n\t}\n\n\tif (VAR_3)\n\t\tnm_connection_add_setting (VAR_3, NM_SETTING (VAR_5));\n\telse if (VAR_5)\n\t\tg_object_unref (VAR_5);\n\nout:\n\tif (VAR_7)\n\t\tg_strfreev (VAR_7);\n\tg_free (VAR_6);\n\treturn VAR_3;\n}",
  "func_graph_path_before": "danfruehauf/NetworkManager-ssh/5d88cd89795352b5df54cc0ebb6a0076b8c89ee4/nm-ssh.c/vul/before/0.json",
  "func": "static NMConnection *\nimport (NMVpnEditorPlugin *iface, const char *path, GError **error)\n{\n\tNMConnection *connection = NULL;\n\tNMSettingConnection *s_con;\n\tNMSettingVpn *s_vpn;\n\tchar *contents = NULL;\n\tchar **lines = NULL;\n\tchar *ext;\n\tchar **line;\n\n\text = strrchr (path, '.');\n\tif (!ext) {\n\t\tg_set_error (error,\n\t\t             SSH_EDITOR_PLUGIN_ERROR,\n\t\t             SSH_EDITOR_PLUGIN_ERROR_FAILED,\n\t\t             \"unknown SSH file extension, should be .sh\");\n\t\tgoto out;\n\t}\n\n\tif (strncmp (ext, \".sh\", strlen(\".sh\"))) {\n\t\tg_set_error (error,\n\t\t             SSH_EDITOR_PLUGIN_ERROR,\n\t\t             SSH_EDITOR_PLUGIN_ERROR_FAILED,\n\t\t             \"unknown SSH file extension, should be .sh\");\n\t\tgoto out;\n\t}\n\n\tif (!g_file_get_contents (path, &contents, NULL, error))\n\t\treturn NULL;\n\n\tif (!g_utf8_validate (contents, -1, NULL)) {\n\t\tchar *tmp;\n\t\tGError *conv_error = NULL;\n\n\t\ttmp = g_locale_to_utf8 (contents, -1, NULL, NULL, &conv_error);\n\t\tif (conv_error) {\n\t\t\t/* ignore the error, we tried at least. */\n\t\t\tg_error_free (conv_error);\n\t\t\tg_free (tmp);\n\t\t} else {\n\t\t\tg_assert (tmp);\n\t\t\tg_free (contents);\n\t\t\tcontents = tmp;  /* update contents with the UTF-8 safe text */\n\t\t}\n\t}\n\n\tlines = g_strsplit_set (contents, \"\\r\\n\", 0);\n\tif (g_strv_length (lines) <= 1) {\n\t\tg_set_error (error,\n\t\t             SSH_EDITOR_PLUGIN_ERROR,\n\t\t             SSH_EDITOR_PLUGIN_ERROR_FAILED,\n\t\t             \"not a valid SSH configuration file\");\n\t\tgoto out;\n\t}\n\n\tconnection = nm_simple_connection_new ();\n\ts_con = NM_SETTING_CONNECTION (nm_setting_connection_new ());\n\tnm_connection_add_setting (connection, NM_SETTING (s_con));\n\n\ts_vpn = NM_SETTING_VPN (nm_setting_vpn_new ());\n\n\tg_object_set (s_vpn, NM_SETTING_VPN_SERVICE_TYPE, NM_DBUS_SERVICE_SSH, NULL);\n\n\tfor (line = lines; *line; line++) {\n\t\tchar *comment;\n\t\tchar **items = NULL;\n\n\t\tif ((comment = strchr (*line, '#')))\n\t\t\t*comment = '\\0';\n\t\tif ((comment = strchr (*line, ';')))\n\t\t\t*comment = '\\0';\n\t\tif (!strlen (*line))\n\t\t\tcontinue;\n\n\t\titems = g_strsplit_set (*line, \"=\", 0);\n\t\tif (!items) {\n\t\t\tcontinue;\n\t\t} else {\n\t\t\t/* Uncomment if you'd like to debug parsing of items */\n\t\t\t/* g_message(\"%s = %s\", items[0], items[1]); */\n\t\t}\n\n\t\t/* the PARSE_IMPORT_KEY will save heaps of lines of code, it's\n\t\t * on the top of the file if you're looking for it */\n\t\tPARSE_IMPORT_KEY (REMOTE_KEY, NM_SSH_KEY_REMOTE, items, s_vpn)\n\t\tPARSE_IMPORT_KEY_WITH_DEFAULT_VALUE_STR (AUTH_TYPE_KEY, NM_SSH_KEY_AUTH_TYPE, items, s_vpn, NM_SSH_AUTH_TYPE_SSH_AGENT)\n\t\tPARSE_IMPORT_KEY_WITH_DEFAULT_VALUE_STR (REMOTE_USERNAME_KEY, NM_SSH_KEY_REMOTE_USERNAME, items, s_vpn, NM_SSH_DEFAULT_REMOTE_USERNAME);\n\t\tPARSE_IMPORT_KEY (KEY_FILE_KEY, NM_SSH_KEY_KEY_FILE, items, s_vpn)\n\t\tPARSE_IMPORT_KEY (REMOTE_IP_KEY, NM_SSH_KEY_REMOTE_IP, items, s_vpn)\n\t\tPARSE_IMPORT_KEY (LOCAL_IP_KEY, NM_SSH_KEY_LOCAL_IP, items, s_vpn)\n\t\tPARSE_IMPORT_KEY (NETMASK_KEY, NM_SSH_KEY_NETMASK, items, s_vpn)\n\t\tPARSE_IMPORT_KEY (IP_6_KEY, NM_SSH_KEY_IP_6, items, s_vpn)\n\t\tPARSE_IMPORT_KEY (REMOTE_IP_6_KEY, NM_SSH_KEY_REMOTE_IP_6, items, s_vpn)\n\t\tPARSE_IMPORT_KEY (LOCAL_IP_6_KEY, NM_SSH_KEY_LOCAL_IP_6, items, s_vpn)\n\t\tPARSE_IMPORT_KEY (NETMASK_6_KEY, NM_SSH_KEY_NETMASK_6, items, s_vpn)\n\t\tPARSE_IMPORT_KEY_WITH_DEFAULT_VALUE_INT (PORT_KEY, NM_SSH_KEY_PORT, items, s_vpn, NM_SSH_DEFAULT_PORT)\n\t\tPARSE_IMPORT_KEY_WITH_DEFAULT_VALUE_INT (MTU_KEY, NM_SSH_KEY_TUNNEL_MTU, items, s_vpn, NM_SSH_DEFAULT_MTU)\n\t\tPARSE_IMPORT_KEY_WITH_DEFAULT_VALUE_INT (REMOTE_DEV_KEY, NM_SSH_KEY_REMOTE_DEV, items, s_vpn, NM_SSH_DEFAULT_REMOTE_DEV)\n\t\tPARSE_IMPORT_KEY_BOOL (DEV_TYPE_KEY, NM_SSH_KEY_TAP_DEV, items, s_vpn, \"tap\")\n\t}\n\n\tif (connection)\n\t\tnm_connection_add_setting (connection, NM_SETTING (s_vpn));\n\telse if (s_vpn)\n\t\tg_object_unref (s_vpn);\n\nout:\n\tif (lines)\n\t\tg_strfreev (lines);\n\tg_free (contents);\n\treturn connection;\n}",
  "abstract_func": "static NMConnection *\nimport (NMVpnEditorPlugin *VAR_0, const char *VAR_1, GError **VAR_2)\n{\n\tNMConnection *VAR_3 = NULL;\n\tNMSettingConnection *VAR_4;\n\tNMSettingVpn *VAR_5;\n\tchar *VAR_6 = NULL;\n\tchar **VAR_7 = NULL;\n\tchar *VAR_8;\n\tchar **VAR_9;\n\n\tVAR_8 = strrchr (VAR_1, '.');\n\tif (!VAR_8) {\n\t\tg_set_error (VAR_2,\n\t\t             VAR_10,\n\t\t             VAR_11,\n\t\t             \"unknown SSH file extension, should be .sh\");\n\t\tgoto out;\n\t}\n\n\tif (strncmp (VAR_8, \".sh\", strlen(\".sh\"))) {\n\t\tg_set_error (VAR_2,\n\t\t             VAR_10,\n\t\t             VAR_11,\n\t\t             \"unknown SSH file extension, should be .sh\");\n\t\tgoto out;\n\t}\n\n\tif (!g_file_get_contents (VAR_1, &VAR_6, NULL, VAR_2))\n\t\treturn NULL;\n\n\tif (!g_utf8_validate (VAR_6, -1, NULL)) {\n\t\tchar *VAR_12;\n\t\tGError *VAR_13 = NULL;\n\n\t\tVAR_12 = g_locale_to_utf8 (VAR_6, -1, NULL, NULL, &VAR_13);\n\t\tif (VAR_13) {\n\t\t\t/* COMMENT_0 */\n\t\t\tg_error_free (VAR_13);\n\t\t\tg_free (VAR_12);\n\t\t} else {\n\t\t\tg_assert (VAR_12);\n\t\t\tg_free (VAR_6);\n\t\t\tVAR_6 = VAR_12;  /* COMMENT_1 */\n\t\t}\n\t}\n\n\tVAR_7 = g_strsplit_set (VAR_6, \"\\r\\n\", 0);\n\tif (g_strv_length (VAR_7) <= 1) {\n\t\tg_set_error (VAR_2,\n\t\t             VAR_10,\n\t\t             VAR_11,\n\t\t             \"not a valid SSH configuration file\");\n\t\tgoto out;\n\t}\n\n\tVAR_3 = nm_simple_connection_new ();\n\tVAR_4 = NM_SETTING_CONNECTION (nm_setting_connection_new ());\n\tnm_connection_add_setting (VAR_3, NM_SETTING (VAR_4));\n\n\tVAR_5 = NM_SETTING_VPN (nm_setting_vpn_new ());\n\n\tg_object_set (VAR_5, VAR_14, VAR_15, NULL);\n\n\tfor (VAR_9 = VAR_7; *VAR_9; VAR_9++) {\n\t\tchar *VAR_16;\n\t\tchar **VAR_17 = NULL;\n\n\t\tif ((VAR_16 = strchr (*VAR_9, '#')))\n\t\t\t*VAR_16 = '\\0';\n\t\tif ((VAR_16 = strchr (*VAR_9, ';')))\n\t\t\t*VAR_16 = '\\0';\n\t\tif (!strlen (*VAR_9))\n\t\t\tcontinue;\n\n\t\tVAR_17 = g_strsplit_set (*VAR_9, \"=\", 0);\n\t\tif (!VAR_17) {\n\t\t\tcontinue;\n\t\t} else {\n\t\t\t/* COMMENT_2 */\n\t\t\t/* COMMENT_3 */\n\t\t}\n\n\t\t/* COMMENT_4 */\n                                                       \n\t\tPARSE_IMPORT_KEY (VAR_18, VAR_19, VAR_17, VAR_5)\n\t\tPARSE_IMPORT_KEY_WITH_DEFAULT_VALUE_STR (VAR_20, VAR_21, VAR_17, VAR_5, VAR_22)\n\t\tPARSE_IMPORT_KEY_WITH_DEFAULT_VALUE_STR (VAR_23, VAR_24, VAR_17, VAR_5, VAR_25);\n\t\tPARSE_IMPORT_KEY (VAR_26, VAR_27, VAR_17, VAR_5)\n\t\tPARSE_IMPORT_KEY (VAR_28, VAR_29, VAR_17, VAR_5)\n\t\tPARSE_IMPORT_KEY (VAR_30, VAR_31, VAR_17, VAR_5)\n\t\tPARSE_IMPORT_KEY (VAR_32, VAR_33, VAR_17, VAR_5)\n\t\tPARSE_IMPORT_KEY (VAR_34, VAR_35, VAR_17, VAR_5)\n\t\tPARSE_IMPORT_KEY (VAR_36, VAR_37, VAR_17, VAR_5)\n\t\tPARSE_IMPORT_KEY (VAR_38, VAR_39, VAR_17, VAR_5)\n\t\tPARSE_IMPORT_KEY (VAR_40, VAR_41, VAR_17, VAR_5)\n\t\tPARSE_IMPORT_KEY_WITH_DEFAULT_VALUE_INT (VAR_42, VAR_43, VAR_17, VAR_5, VAR_44)\n\t\tPARSE_IMPORT_KEY_WITH_DEFAULT_VALUE_INT (VAR_45, VAR_46, VAR_17, VAR_5, VAR_47)\n\t\tPARSE_IMPORT_KEY_WITH_DEFAULT_VALUE_INT (VAR_48, VAR_49, VAR_17, VAR_5, VAR_50)\n\t\tPARSE_IMPORT_KEY_BOOL (VAR_51, VAR_52, VAR_17, VAR_5, \"tap\")\n\t}\n\n\tif (VAR_3)\n\t\tnm_connection_add_setting (VAR_3, NM_SETTING (VAR_5));\n\telse if (VAR_5)\n\t\tg_object_unref (VAR_5);\n\nout:\n\tif (VAR_7)\n\t\tg_strfreev (VAR_7);\n\tg_free (VAR_6);\n\treturn VAR_3;\n}",
  "func_graph_path": "danfruehauf/NetworkManager-ssh/5d88cd89795352b5df54cc0ebb6a0076b8c89ee4/nm-ssh.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -98,31 +98,6 @@\n \t\tPARSE_IMPORT_KEY_WITH_DEFAULT_VALUE_INT (MTU_KEY, NM_SSH_KEY_TUNNEL_MTU, items, s_vpn, NM_SSH_DEFAULT_MTU)\n \t\tPARSE_IMPORT_KEY_WITH_DEFAULT_VALUE_INT (REMOTE_DEV_KEY, NM_SSH_KEY_REMOTE_DEV, items, s_vpn, NM_SSH_DEFAULT_REMOTE_DEV)\n \t\tPARSE_IMPORT_KEY_BOOL (DEV_TYPE_KEY, NM_SSH_KEY_TAP_DEV, items, s_vpn, \"tap\")\n-\n-\t\t/* Some extra care required with extra_opts as we need to:\n-\t\t * 1. Use the whole line (might contain = chars in it)\n-\t\t * 2. Strip the single/double quotes */\n-\t\tif (!strncmp (items[0], EXTRA_OPTS_KEY, strlen (items[0]))) {\n-\t\t\tgchar *parsed_extra_opts = NULL;\n-\t\t\tgchar *unquoted_extra_opts = NULL;\n-\t\t\t/* Read the whole line, witout the EXTRA_OPTS= part */\n-\t\t\tparsed_extra_opts = g_strdup(*line + strlen(EXTRA_OPTS_KEY) + 1);\n-\n-\t\t\t/* Check if string is quoted */\n-\t\t\tif ( (parsed_extra_opts[0] == '\"' && parsed_extra_opts[strlen(parsed_extra_opts)-1] == '\"') ||\n-\t\t\t\t/* String is quoted (would usually be), lets strip the quotes */\n-\t\t\t\t(parsed_extra_opts[0] == '\\'' && parsed_extra_opts[strlen(parsed_extra_opts)-1] == '\\'') ) {\n-\t\t\t\t/* Unquote string */\n-\t\t\t\tparsed_extra_opts[strlen(parsed_extra_opts)-1] = '\\0';\n-\t\t\t\tunquoted_extra_opts = parsed_extra_opts + 1;\n-\t\t\t}\n-\t\t\t/* After all this effort, try to compare to the default value */\n-\t\t\tif (strncmp(unquoted_extra_opts, NM_SSH_DEFAULT_EXTRA_OPTS, strlen(unquoted_extra_opts)))\n-\t\t\t\tnm_setting_vpn_add_data_item (s_vpn, NM_SSH_KEY_EXTRA_OPTS, unquoted_extra_opts);\n-\t\t\tg_free (items);\n-\t\t\tg_free (parsed_extra_opts);\n-\t\t\tcontinue;\n-\t\t}\n \t}\n \n \tif (connection)",
  "diff_line_info": {
    "deleted_lines": [
      "",
      "\t\t/* Some extra care required with extra_opts as we need to:",
      "\t\t * 1. Use the whole line (might contain = chars in it)",
      "\t\t * 2. Strip the single/double quotes */",
      "\t\tif (!strncmp (items[0], EXTRA_OPTS_KEY, strlen (items[0]))) {",
      "\t\t\tgchar *parsed_extra_opts = NULL;",
      "\t\t\tgchar *unquoted_extra_opts = NULL;",
      "\t\t\t/* Read the whole line, witout the EXTRA_OPTS= part */",
      "\t\t\tparsed_extra_opts = g_strdup(*line + strlen(EXTRA_OPTS_KEY) + 1);",
      "",
      "\t\t\t/* Check if string is quoted */",
      "\t\t\tif ( (parsed_extra_opts[0] == '\"' && parsed_extra_opts[strlen(parsed_extra_opts)-1] == '\"') ||",
      "\t\t\t\t/* String is quoted (would usually be), lets strip the quotes */",
      "\t\t\t\t(parsed_extra_opts[0] == '\\'' && parsed_extra_opts[strlen(parsed_extra_opts)-1] == '\\'') ) {",
      "\t\t\t\t/* Unquote string */",
      "\t\t\t\tparsed_extra_opts[strlen(parsed_extra_opts)-1] = '\\0';",
      "\t\t\t\tunquoted_extra_opts = parsed_extra_opts + 1;",
      "\t\t\t}",
      "\t\t\t/* After all this effort, try to compare to the default value */",
      "\t\t\tif (strncmp(unquoted_extra_opts, NM_SSH_DEFAULT_EXTRA_OPTS, strlen(unquoted_extra_opts)))",
      "\t\t\t\tnm_setting_vpn_add_data_item (s_vpn, NM_SSH_KEY_EXTRA_OPTS, unquoted_extra_opts);",
      "\t\t\tg_free (items);",
      "\t\t\tg_free (parsed_extra_opts);",
      "\t\t\tcontinue;",
      "\t\t}"
    ],
    "added_lines": []
  },
  "is_vul": true,
  "pr_url": "https://github.com/danfruehauf/NetworkManager-ssh/pull/98",
  "description": {
    "pr_info": {
      "title": "Remove extra options",
      "number": 98
    },
    "comment": [
      "After analyzing some privilege escalation possibilites, it was decided\r\nit is best to remove extra options",
      "I understand some people are going to be very unhappy with it. However I hope to add `-L` and `-R` options.\r\n\r\nSee also:\r\nhttps://bugzilla.redhat.com/show_bug.cgi?id=1803499",
      "@lhw This should be urgently deployed. I'll tag it as 1.2.11",
      "@danfruehauf can you please request a CVE as needed for the privilege escalation flaw via https://cveform.mitre.org/ ?",
      "@carnil I've requested a CVE ID and will post it here once I've heard back from them.",
      "@kobus-v-schoor was there any news on the CVE assignment?",
      "@danfruehauf https://bugzilla.redhat.com/show_bug.cgi?id=1803499 is not publicly accessible, possible to open that up? This might be blocking the CVE assignment from MITRE if they have not enough context.",
      "CVE-2020-9355 was assigned for this issue.",
      "Darn. I can't -D anymore. Is there some way to add this? :(",
      "The PR removed the extra options, but left in the README section and the image, giving the false impression this is still supported.\r\n\r\nOn the same topic, I'd really like to have `-L` back, would you be open to merge a very restricted input field that just allows the user to append valid `-L` blocks?"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "Final Classification: Security Vulnerability Fix; Confidence: 0.9"
}