{
  "cve_id": "CVE-2019-10907",
  "cwe_ids": [
    "CWE-326"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:N/A:N",
  "cvss_is_v3": false,
  "repo_name": "airsonic",
  "commit_msg": "Use a random key to \"encrypt\" the remember-me cookie's value\n\nSince Spring's default remember-me technique is\nterrible security-wise (`user:timstamp:md5(use:timestamp:password:key)`),\nwe should at least use a random key, instead of a fixed one,\notherwise, and attacker able to capture the cookies\nmight be able to trivially bruteforce offline\nthe password of the associated user.",
  "commit_hash": "3e07ea52885f88d3fbec444dfd592f27bfb65647",
  "git_url": "https://github.com/airsonic/airsonic/commit/3e07ea52885f88d3fbec444dfd592f27bfb65647",
  "file_path": "airsonic-main/src/main/java/org/airsonic/player/security/GlobalSecurityConfig.java",
  "func_name": "configure",
  "func_before": "@Override\n        protected void configure(HttpSecurity http) throws Exception {\n\n            RESTRequestParameterProcessingFilter restAuthenticationFilter = new RESTRequestParameterProcessingFilter();\n            restAuthenticationFilter.setAuthenticationManager(authenticationManagerBean());\n            restAuthenticationFilter.setSecurityService(securityService);\n            restAuthenticationFilter.setEventPublisher(eventPublisher);\n            http = http.addFilterBefore(restAuthenticationFilter, UsernamePasswordAuthenticationFilter.class);\n\n            http\n                    .csrf()\n                    .requireCsrfProtectionMatcher(csrfSecurityRequestMatcher)\n                    .and().headers()\n                    .frameOptions()\n                    .sameOrigin()\n                    .and().authorizeRequests()\n                    .antMatchers(\"/recover*\", \"/accessDenied*\",\n                            \"/style/**\", \"/icons/**\", \"/flash/**\", \"/script/**\",\n                            \"/sonos/**\", \"/crossdomain.xml\", \"/login\", \"/error\")\n                    .permitAll()\n                    .antMatchers(\"/personalSettings*\", \"/passwordSettings*\",\n                            \"/playerSettings*\", \"/shareSettings*\", \"/passwordSettings*\")\n                    .hasRole(\"SETTINGS\")\n                    .antMatchers(\"/generalSettings*\", \"/advancedSettings*\", \"/userSettings*\",\n                            \"/musicFolderSettings*\", \"/databaseSettings*\", \"/transcodeSettings*\", \"/rest/startScan*\")\n                    .hasRole(\"ADMIN\")\n                    .antMatchers(\"/deletePlaylist*\", \"/savePlaylist*\", \"/db*\")\n                    .hasRole(\"PLAYLIST\")\n                    .antMatchers(\"/download*\")\n                    .hasRole(\"DOWNLOAD\")\n                    .antMatchers(\"/upload*\")\n                    .hasRole(\"UPLOAD\")\n                    .antMatchers(\"/createShare*\")\n                    .hasRole(\"SHARE\")\n                    .antMatchers(\"/changeCoverArt*\", \"/editTags*\")\n                    .hasRole(\"COVERART\")\n                    .antMatchers(\"/setMusicFileInfo*\")\n                    .hasRole(\"COMMENT\")\n                    .antMatchers(\"/podcastReceiverAdmin*\")\n                    .hasRole(\"PODCAST\")\n                    .antMatchers(\"/**\")\n                    .hasRole(\"USER\")\n                    .anyRequest().authenticated()\n                    .and().formLogin()\n                    .loginPage(\"/login\")\n                    .permitAll()\n                    .defaultSuccessUrl(\"/index\", true)\n                    .failureUrl(FAILURE_URL)\n                    .usernameParameter(\"j_username\")\n                    .passwordParameter(\"j_password\")\n                    // see http://docs.spring.io/spring-security/site/docs/3.2.4.RELEASE/reference/htmlsingle/#csrf-logout\n                    .and().logout().logoutRequestMatcher(new AntPathRequestMatcher(\"/logout\", \"GET\")).logoutSuccessUrl(\n                    \"/login?logout\")\n                    .and().rememberMe().key(\"airsonic\");\n        }",
  "abstract_func_before": "@Override\n        protected void configure(HttpSecurity VAR_0) throws Exception {\n\n            RESTRequestParameterProcessingFilter VAR_1 = new RESTRequestParameterProcessingFilter();\n            VAR_1.setAuthenticationManager(authenticationManagerBean());\n            VAR_1.setSecurityService(VAR_2);\n            VAR_1.setEventPublisher(VAR_3);\n            VAR_0 = VAR_0.addFilterBefore(VAR_1, UsernamePasswordAuthenticationFilter.class);\n\n            VAR_0\n                    .csrf()\n                    .requireCsrfProtectionMatcher(VAR_4)\n                    .and().headers()\n                    .frameOptions()\n                    .sameOrigin()\n                    .and().authorizeRequests()\n                    .antMatchers(\"/recover*\", \"/accessDenied*\",\n                            \"/style/**\", \"/icons/**\", \"/flash/**\", \"/script/**\",\n                            \"/sonos/**\", \"/crossdomain.xml\", \"/login\", \"/error\")\n                    .permitAll()\n                    .antMatchers(\"/personalSettings*\", \"/passwordSettings*\",\n                            \"/playerSettings*\", \"/shareSettings*\", \"/passwordSettings*\")\n                    .hasRole(\"SETTINGS\")\n                    .antMatchers(\"/generalSettings*\", \"/advancedSettings*\", \"/userSettings*\",\n                            \"/musicFolderSettings*\", \"/databaseSettings*\", \"/transcodeSettings*\", \"/rest/startScan*\")\n                    .hasRole(\"ADMIN\")\n                    .antMatchers(\"/deletePlaylist*\", \"/savePlaylist*\", \"/db*\")\n                    .hasRole(\"PLAYLIST\")\n                    .antMatchers(\"/download*\")\n                    .hasRole(\"DOWNLOAD\")\n                    .antMatchers(\"/upload*\")\n                    .hasRole(\"UPLOAD\")\n                    .antMatchers(\"/createShare*\")\n                    .hasRole(\"SHARE\")\n                    .antMatchers(\"/changeCoverArt*\", \"/editTags*\")\n                    .hasRole(\"COVERART\")\n                    .antMatchers(\"/setMusicFileInfo*\")\n                    .hasRole(\"COMMENT\")\n                    .antMatchers(\"/podcastReceiverAdmin*\")\n                    .hasRole(\"PODCAST\")\n                    .antMatchers(\"/**\")\n                    .hasRole(\"USER\")\n                    .anyRequest().authenticated()\n                    .and().formLogin()\n                    .loginPage(\"/login\")\n                    .permitAll()\n                    .defaultSuccessUrl(\"/index\", true)\n                    .failureUrl(VAR_5)\n                    .usernameParameter(\"j_username\")\n                    .passwordParameter(\"j_password\")\n                    /* COMMENT_0 */\n                    .and().logout().logoutRequestMatcher(new AntPathRequestMatcher(\"/logout\", \"GET\")).logoutSuccessUrl(\n                    \"/login?logout\")\n                    .and().rememberMe().key(\"airsonic\");\n        }",
  "func_graph_path_before": "airsonic/3e07ea52885f88d3fbec444dfd592f27bfb65647/GlobalSecurityConfig.java/vul/before/0.json",
  "func": "@Override\n        protected void configure(HttpSecurity http) throws Exception {\n\n            RESTRequestParameterProcessingFilter restAuthenticationFilter = new RESTRequestParameterProcessingFilter();\n            restAuthenticationFilter.setAuthenticationManager(authenticationManagerBean());\n            restAuthenticationFilter.setSecurityService(securityService);\n            restAuthenticationFilter.setEventPublisher(eventPublisher);\n            http = http.addFilterBefore(restAuthenticationFilter, UsernamePasswordAuthenticationFilter.class);\n\n            http\n                    .csrf()\n                    .requireCsrfProtectionMatcher(csrfSecurityRequestMatcher)\n                    .and().headers()\n                    .frameOptions()\n                    .sameOrigin()\n                    .and().authorizeRequests()\n                    .antMatchers(\"/recover*\", \"/accessDenied*\",\n                            \"/style/**\", \"/icons/**\", \"/flash/**\", \"/script/**\",\n                            \"/sonos/**\", \"/crossdomain.xml\", \"/login\", \"/error\")\n                    .permitAll()\n                    .antMatchers(\"/personalSettings*\", \"/passwordSettings*\",\n                            \"/playerSettings*\", \"/shareSettings*\", \"/passwordSettings*\")\n                    .hasRole(\"SETTINGS\")\n                    .antMatchers(\"/generalSettings*\", \"/advancedSettings*\", \"/userSettings*\",\n                            \"/musicFolderSettings*\", \"/databaseSettings*\", \"/transcodeSettings*\", \"/rest/startScan*\")\n                    .hasRole(\"ADMIN\")\n                    .antMatchers(\"/deletePlaylist*\", \"/savePlaylist*\", \"/db*\")\n                    .hasRole(\"PLAYLIST\")\n                    .antMatchers(\"/download*\")\n                    .hasRole(\"DOWNLOAD\")\n                    .antMatchers(\"/upload*\")\n                    .hasRole(\"UPLOAD\")\n                    .antMatchers(\"/createShare*\")\n                    .hasRole(\"SHARE\")\n                    .antMatchers(\"/changeCoverArt*\", \"/editTags*\")\n                    .hasRole(\"COVERART\")\n                    .antMatchers(\"/setMusicFileInfo*\")\n                    .hasRole(\"COMMENT\")\n                    .antMatchers(\"/podcastReceiverAdmin*\")\n                    .hasRole(\"PODCAST\")\n                    .antMatchers(\"/**\")\n                    .hasRole(\"USER\")\n                    .anyRequest().authenticated()\n                    .and().formLogin()\n                    .loginPage(\"/login\")\n                    .permitAll()\n                    .defaultSuccessUrl(\"/index\", true)\n                    .failureUrl(FAILURE_URL)\n                    .usernameParameter(\"j_username\")\n                    .passwordParameter(\"j_password\")\n                    // see http://docs.spring.io/spring-security/site/docs/3.2.4.RELEASE/reference/htmlsingle/#csrf-logout\n                    .and().logout().logoutRequestMatcher(new AntPathRequestMatcher(\"/logout\", \"GET\")).logoutSuccessUrl(\n                    \"/login?logout\")\n                    .and().rememberMe().key(key);\n        }",
  "abstract_func": "@Override\n        protected void configure(HttpSecurity VAR_0) throws Exception {\n\n            RESTRequestParameterProcessingFilter VAR_1 = new RESTRequestParameterProcessingFilter();\n            VAR_1.setAuthenticationManager(authenticationManagerBean());\n            VAR_1.setSecurityService(VAR_2);\n            VAR_1.setEventPublisher(VAR_3);\n            VAR_0 = VAR_0.addFilterBefore(VAR_1, UsernamePasswordAuthenticationFilter.class);\n\n            VAR_0\n                    .csrf()\n                    .requireCsrfProtectionMatcher(VAR_4)\n                    .and().headers()\n                    .frameOptions()\n                    .sameOrigin()\n                    .and().authorizeRequests()\n                    .antMatchers(\"/recover*\", \"/accessDenied*\",\n                            \"/style/**\", \"/icons/**\", \"/flash/**\", \"/script/**\",\n                            \"/sonos/**\", \"/crossdomain.xml\", \"/login\", \"/error\")\n                    .permitAll()\n                    .antMatchers(\"/personalSettings*\", \"/passwordSettings*\",\n                            \"/playerSettings*\", \"/shareSettings*\", \"/passwordSettings*\")\n                    .hasRole(\"SETTINGS\")\n                    .antMatchers(\"/generalSettings*\", \"/advancedSettings*\", \"/userSettings*\",\n                            \"/musicFolderSettings*\", \"/databaseSettings*\", \"/transcodeSettings*\", \"/rest/startScan*\")\n                    .hasRole(\"ADMIN\")\n                    .antMatchers(\"/deletePlaylist*\", \"/savePlaylist*\", \"/db*\")\n                    .hasRole(\"PLAYLIST\")\n                    .antMatchers(\"/download*\")\n                    .hasRole(\"DOWNLOAD\")\n                    .antMatchers(\"/upload*\")\n                    .hasRole(\"UPLOAD\")\n                    .antMatchers(\"/createShare*\")\n                    .hasRole(\"SHARE\")\n                    .antMatchers(\"/changeCoverArt*\", \"/editTags*\")\n                    .hasRole(\"COVERART\")\n                    .antMatchers(\"/setMusicFileInfo*\")\n                    .hasRole(\"COMMENT\")\n                    .antMatchers(\"/podcastReceiverAdmin*\")\n                    .hasRole(\"PODCAST\")\n                    .antMatchers(\"/**\")\n                    .hasRole(\"USER\")\n                    .anyRequest().authenticated()\n                    .and().formLogin()\n                    .loginPage(\"/login\")\n                    .permitAll()\n                    .defaultSuccessUrl(\"/index\", true)\n                    .failureUrl(VAR_5)\n                    .usernameParameter(\"j_username\")\n                    .passwordParameter(\"j_password\")\n                    /* COMMENT_0 */\n                    .and().logout().logoutRequestMatcher(new AntPathRequestMatcher(\"/logout\", \"GET\")).logoutSuccessUrl(\n                    \"/login?logout\")\n                    .and().rememberMe().key(VAR_6);\n        }",
  "func_graph_path": "airsonic/3e07ea52885f88d3fbec444dfd592f27bfb65647/GlobalSecurityConfig.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -51,5 +51,5 @@\n                     // see http://docs.spring.io/spring-security/site/docs/3.2.4.RELEASE/reference/htmlsingle/#csrf-logout\n                     .and().logout().logoutRequestMatcher(new AntPathRequestMatcher(\"/logout\", \"GET\")).logoutSuccessUrl(\n                     \"/login?logout\")\n-                    .and().rememberMe().key(\"airsonic\");\n+                    .and().rememberMe().key(key);\n         }",
  "diff_line_info": {
    "deleted_lines": [
      "                    .and().rememberMe().key(\"airsonic\");"
    ],
    "added_lines": [
      "                    .and().rememberMe().key(key);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/airsonic/airsonic/pull/951",
  "description": {
    "pr_info": {
      "title": "Use a random key to \"encrypt\" the remember-me cookie's value",
      "number": 951
    },
    "comment": [
      "Since Spring's default remember-me technique is\r\nterrible security-wise (`user:timstamp:md5(use:timestamp:password:key)`),\r\nwe should at least use a random key, instead of a fixed one,\r\notherwise, and attacker able to capture the cookies\r\nmight be able to trivially bruteforce offline\r\nthe password of the associated user.\r\n\r\nMy Java-fu is pretty weak, so feel free to tell me if there is a more idiomatic way of doing this.",
      "Rather annoyingly (esp. when running a development server) this requires to login each time you reload the server, even when \"Remember me\" is checked. Is there a better way, maybe by storing the random key for a given amount of time / passing it as a property on the command-line?",
      "I don't think that storing it on the filesystem is a good idea, I prefer to have an ephemeral one, invalidating all remember-me cookies on each restart.",
      "I think some users are going to be okay with the tradeoff of storing it on the filesytem. What about making this a property that can be optionally set? If its absent, generate it",
      "I don't really see a use-case for regular users to be honest.\r\nBut it wouldn't really harm to have a property anyway, so if anyone wants to implement it, it's fine by me."
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.95"
}