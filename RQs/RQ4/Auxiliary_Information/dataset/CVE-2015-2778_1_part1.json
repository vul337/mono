{
  "cve_id": "CVE-2015-2778",
  "cwe_ids": [
    "CWE-399"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "quassel",
  "commit_msg": "Improve the message-splitting algorithm for PRIVMSG and CTCP\n\nThis introduces a new message splitting algorithm based on\nQTextBoundaryFinder.  It works by first starting with the entire\nmessage to be sent, encoding it, and checking to see if it is over\nthe maximum message length.  If it is, it uses QTBF to find the\nword boundary most immediately preceding the maximum length.  If no\nsuitable boundary can be found, it falls back to searching for\ngrapheme boundaries.  It repeats this process until the entire\nmessage has been sent.\n\nUnlike what it replaces, the new splitting code is not recursive\nand cannot cause stack overflows.  Additionally, if it is unable\nto split a string, it will give up gracefully and not crash the\ncore or cause a thread to run away.\n\nThis patch fixes two bugs.  The first is garbage characters caused\nby accidentally splitting the string in the middle of a multibyte\ncharacter.  Since the new code splits at a character level instead\nof a byte level, this will no longer be an issue.  The second is\nthe core crash caused by sending an overlength CTCP query (\"/me\")\ncontaining only multibyte characters.  This bug was caused by the\nold CTCP splitter using the byte index from lastParamOverrun() as\na character index for a QString.",
  "commit_hash": "b5e38970ffd55e2dd9f706ce75af9a8d7730b1b8",
  "git_url": "https://github.com/quassel/quassel/commit/b5e38970ffd55e2dd9f706ce75af9a8d7730b1b8",
  "file_path": "src/core/coreuserinputhandler.cpp",
  "func_name": "CoreUserInputHandler::handleMsg",
  "func_before": "void CoreUserInputHandler::handleMsg(const BufferInfo &bufferInfo, const QString &msg)\n{\n    Q_UNUSED(bufferInfo);\n    if (!msg.contains(' '))\n        return;\n\n    QString target = msg.section(' ', 0, 0);\n    QByteArray encMsg = userEncode(target, msg.section(' ', 1));\n\n#ifdef HAVE_QCA2\n    putPrivmsg(serverEncode(target), encMsg, network()->cipher(target));\n#else\n    putPrivmsg(serverEncode(target), encMsg);\n#endif\n}",
  "abstract_func_before": "void CoreUserInputHandler::handleMsg(const BufferInfo &VAR_0, const QString &VAR_1)\n{\n    Q_UNUSED(VAR_0);\n    if (!VAR_1.contains(' '))\n        return;\n\n    QString VAR_2 = VAR_1.section(' ', 0, 0);\n    QByteArray VAR_3 = userEncode(VAR_2, VAR_1.section(' ', 1));\n\n#ifdef VAR_4\n    putPrivmsg(serverEncode(VAR_2), VAR_3, network()->cipher(VAR_2));\n#else\n    putPrivmsg(serverEncode(VAR_2), VAR_3);\n#endif\n}",
  "func_graph_path_before": "quassel/b5e38970ffd55e2dd9f706ce75af9a8d7730b1b8/coreuserinputhandler.cpp/vul/before/1.json",
  "func": "void CoreUserInputHandler::handleMsg(const BufferInfo &bufferInfo, const QString &msg)\n{\n    Q_UNUSED(bufferInfo);\n    if (!msg.contains(' '))\n        return;\n\n    QString target = msg.section(' ', 0, 0);\n    QString msgSection = msg.section(' ', 1);\n\n    std::function<QByteArray(const QString &, const QString &)> encodeFunc = [this] (const QString &target, const QString &message) -> QByteArray {\n        return userEncode(target, message);\n    };\n\n#ifdef HAVE_QCA2\n    putPrivmsg(target, msgSection, encodeFunc, network()->cipher(target));\n#else\n    putPrivmsg(target, msgSection, encodeFunc);\n#endif\n}",
  "abstract_func": "void CoreUserInputHandler::handleMsg(const BufferInfo &VAR_0, const QString &VAR_1)\n{\n    Q_UNUSED(VAR_0);\n    if (!VAR_1.contains(' '))\n        return;\n\n    QString VAR_2 = VAR_1.section(' ', 0, 0);\n    QString VAR_3 = VAR_1.section(' ', 1);\n\n    std::function<QByteArray(const QString &, const QString &)> VAR_4 = [this] (const QString &VAR_2, const QString &VAR_5) -> QByteArray {\n        return userEncode(VAR_2, VAR_5);\n    };\n\n#ifdef VAR_6\n    putPrivmsg(VAR_2, VAR_3, VAR_4, network()->cipher(VAR_2));\n#else\n    putPrivmsg(VAR_2, VAR_3, VAR_4);\n#endif\n}",
  "func_graph_path": "quassel/b5e38970ffd55e2dd9f706ce75af9a8d7730b1b8/coreuserinputhandler.cpp/vul/after/1.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -5,11 +5,15 @@\n         return;\n \n     QString target = msg.section(' ', 0, 0);\n-    QByteArray encMsg = userEncode(target, msg.section(' ', 1));\n+    QString msgSection = msg.section(' ', 1);\n+\n+    std::function<QByteArray(const QString &, const QString &)> encodeFunc = [this] (const QString &target, const QString &message) -> QByteArray {\n+        return userEncode(target, message);\n+    };\n \n #ifdef HAVE_QCA2\n-    putPrivmsg(serverEncode(target), encMsg, network()->cipher(target));\n+    putPrivmsg(target, msgSection, encodeFunc, network()->cipher(target));\n #else\n-    putPrivmsg(serverEncode(target), encMsg);\n+    putPrivmsg(target, msgSection, encodeFunc);\n #endif\n }",
  "diff_line_info": {
    "deleted_lines": [
      "    QByteArray encMsg = userEncode(target, msg.section(' ', 1));",
      "    putPrivmsg(serverEncode(target), encMsg, network()->cipher(target));",
      "    putPrivmsg(serverEncode(target), encMsg);"
    ],
    "added_lines": [
      "    QString msgSection = msg.section(' ', 1);",
      "",
      "    std::function<QByteArray(const QString &, const QString &)> encodeFunc = [this] (const QString &target, const QString &message) -> QByteArray {",
      "        return userEncode(target, message);",
      "    };",
      "    putPrivmsg(target, msgSection, encodeFunc, network()->cipher(target));",
      "    putPrivmsg(target, msgSection, encodeFunc);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/quassel/quassel/pull/116",
  "description": {
    "pr_info": {
      "title": "Improve the message-splitting algorithm for PRIVMSG and CTCP",
      "number": 116
    },
    "comment": [
      "This introduces a new message splitting algorithm based on\nQTextBoundaryFinder.  It works by first starting with the entire\nmessage to be sent, encoding it, and checking to see if it is over\nthe maximum message length.  If it is, it uses QTBF to find the\nword boundary most immediately preceding the maximum length.  If no\nsuitable boundary can be found, it falls back to searching for\ngrapheme boundaries.  It repeats this process until the entire\nmessage has been sent.\n\nUnlike what it replaces, the new splitting code is not recursive\nand cannot cause stack overflows.  Additionally, if it is unable\nto split a string, it will give up gracefully and not crash the\ncore or cause a thread to run away.\n\nThis patch fixes two bugs.  The first is garbage characters caused\nby accidentally splitting the string in the middle of a multibyte\ncharacter.  Since the new code splits at a character level instead\nof a byte level, this will no longer be an issue.  The second is\nthe core crash caused by sending an overlength CTCP query (\"/me\")\ncontaining only multibyte characters.  This bug was caused by the\nold CTCP splitter using the byte index from lastParamOverrun() as\na character index for a QString.\n"
    ]
  },
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "**Final Classification:** Defect Remediation & Feature Upgrades  \n**Confidence:** 0.95  \n\nThe patch addresses two bugs related to message splitting, which are not security vulnerabilities but core functionality issues. The changes improve how messages are processed, preventing crashes and incorrect characters, which are non-security defects. The description and code align clearly without ambiguity."
}