{
  "cve_id": "CVE-2020-12887",
  "cwe_ids": [
    "CWE-401",
    "CWE-190"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "mjurczak/mbed-coap",
  "commit_msg": "Implemented measures to prevent memory leaks in sn_coap_parser_options_parse().\n\nAdded a helper uint16_t addition function with overflow detection. The function is used when calculating the extended length and option delta. The overlow detection is needed to avoid wrap-around of option number or length.\nAdditional checks in options using sn_coap_parser_options_parse_multiple_options() have been implemented to avoid overwriting of pointers pointing to previously allocated memory.",
  "commit_hash": "4647a68e364401e81dbd370728127d844f221d93",
  "git_url": "https://github.com/mjurczak/mbed-coap/commit/4647a68e364401e81dbd370728127d844f221d93",
  "file_path": "source/sn_coap_parser.c",
  "func_name": "sn_coap_parser_options_parse",
  "func_before": "static int8_t sn_coap_parser_options_parse(struct coap_s *handle, uint8_t **packet_data_pptr, sn_coap_hdr_s *dst_coap_msg_ptr, uint8_t *packet_data_start_ptr, uint16_t packet_len)\n{\n    uint8_t previous_option_number = 0;\n    int8_t  ret_status             = 0;\n    uint16_t message_left          = sn_coap_parser_move_packet_ptr(packet_data_pptr,\n                                                                    packet_data_start_ptr,\n                                                                    packet_len,\n                                                                    0);\n\n    /*  Parse token, if exists  */\n    dst_coap_msg_ptr->token_len = *packet_data_start_ptr & COAP_HEADER_TOKEN_LENGTH_MASK;\n\n    if (dst_coap_msg_ptr->token_len) {\n        int8_t ptr_check_result;\n        if ((dst_coap_msg_ptr->token_len > 8) || dst_coap_msg_ptr->token_ptr) {\n            tr_error(\"sn_coap_parser_options_parse - token not valid!\");\n            return -1;\n        }\n\n        ptr_check_result = sn_coap_parser_check_packet_ptr(*packet_data_pptr, packet_data_start_ptr, packet_len, dst_coap_msg_ptr->token_len);\n        if (0 != ptr_check_result) {\n            tr_error(\"sn_coap_parser_options_parse - **packet_data_pptr overflow !\");\n            return -1;\n        }\n\n        dst_coap_msg_ptr->token_ptr = sn_coap_protocol_malloc_copy(handle, *packet_data_pptr, dst_coap_msg_ptr->token_len);\n\n        if (dst_coap_msg_ptr->token_ptr == NULL) {\n            tr_error(\"sn_coap_parser_options_parse - failed to allocate token!\");\n            return -1;\n        }\n\n        message_left = sn_coap_parser_move_packet_ptr(packet_data_pptr,\n                                                      packet_data_start_ptr,\n                                                      packet_len,\n                                                      dst_coap_msg_ptr->token_len);\n    }\n\n    /* Loop all Options */\n    while (message_left && (**packet_data_pptr != 0xff)) {\n        /* Get option length WITHOUT extensions */\n        uint16_t option_len = (**packet_data_pptr & 0x0F);\n        /* Get option number WITHOUT extensions */\n        uint16_t  option_number = (**packet_data_pptr >> COAP_OPTIONS_OPTION_NUMBER_SHIFT);\n\n        message_left = sn_coap_parser_move_packet_ptr(packet_data_pptr, packet_data_start_ptr, packet_len, 1);\n\n        int8_t    option_parse_result;\n        /* Add possible option delta extension */\n        option_parse_result = parse_ext_option(&option_number,\n                                                packet_data_pptr,\n                                                packet_data_start_ptr,\n                                                packet_len,\n                                                &message_left);\n        if (option_parse_result != 0) {\n            return -1;\n        }\n        /* Add previous option to option delta and get option number */\n        option_number += previous_option_number;\n\n        /* Add possible option length extension to resolve full length of the option */\n        option_parse_result = parse_ext_option(&option_len,\n                                                packet_data_pptr,\n                                                packet_data_start_ptr,\n                                                packet_len,\n                                                &message_left);\n        if (option_parse_result != 0) {\n            return -1;\n        }\n\n        /* * * Parse option itself * * */\n        /* Some options are handled independently in own functions */\n        previous_option_number = option_number;\n        /* Allocate options_list_ptr if needed */\n        switch (option_number) {\n            case COAP_OPTION_MAX_AGE:\n            case COAP_OPTION_PROXY_URI:\n            case COAP_OPTION_ETAG:\n            case COAP_OPTION_URI_HOST:\n            case COAP_OPTION_LOCATION_PATH:\n            case COAP_OPTION_URI_PORT:\n            case COAP_OPTION_LOCATION_QUERY:\n            case COAP_OPTION_OBSERVE:\n            case COAP_OPTION_URI_QUERY:\n            case COAP_OPTION_BLOCK2:\n            case COAP_OPTION_BLOCK1:\n            case COAP_OPTION_ACCEPT:\n            case COAP_OPTION_SIZE1:\n            case COAP_OPTION_SIZE2:\n                if (sn_coap_parser_alloc_options(handle, dst_coap_msg_ptr) == NULL) {\n                    tr_error(\"sn_coap_parser_options_parse - failed to allocate options!\");\n                    return -1;\n                }\n                break;\n        }\n\n        if (message_left < option_len){\n            /* packet_data_pptr would overflow! */\n            tr_error(\"sn_coap_parser_options_parse - **packet_data_pptr would overflow when parsing options!\");\n            return -1;\n        }\n\n        /* Parse option */\n        switch (option_number) {\n            case COAP_OPTION_CONTENT_FORMAT:\n                if ((option_len > 2) || (dst_coap_msg_ptr->content_format != COAP_CT_NONE)) {\n                    tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_CONTENT_FORMAT not valid!\");\n                    return -1;\n                }\n                dst_coap_msg_ptr->content_format = (sn_coap_content_format_e) sn_coap_parser_options_parse_uint(packet_data_pptr, option_len);\n                break;\n\n            case COAP_OPTION_MAX_AGE:\n                if (option_len > 4) {\n                    tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_MAX_AGE not valid!\");\n                    return -1;\n                }\n                dst_coap_msg_ptr->options_list_ptr->max_age = sn_coap_parser_options_parse_uint(packet_data_pptr, option_len);\n                break;\n\n            case COAP_OPTION_PROXY_URI:\n                if ((option_len > 1034) || (option_len < 1) || dst_coap_msg_ptr->options_list_ptr->proxy_uri_ptr) {\n                    tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_PROXY_URI not valid!\");\n                    return -1;\n                }\n                dst_coap_msg_ptr->options_list_ptr->proxy_uri_len = option_len;\n                dst_coap_msg_ptr->options_list_ptr->proxy_uri_ptr = sn_coap_protocol_malloc_copy(handle, *packet_data_pptr, option_len);\n\n                if (dst_coap_msg_ptr->options_list_ptr->proxy_uri_ptr == NULL) {\n                    tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_PROXY_URI allocation failed!\");\n                    return -1;\n                }\n                message_left = sn_coap_parser_move_packet_ptr(packet_data_pptr, packet_data_start_ptr, packet_len, option_len);\n                break;\n\n            case COAP_OPTION_ETAG:\n                /* This is managed independently because User gives this option in one character table */\n                ret_status = sn_coap_parser_options_parse_multiple_options(handle, packet_data_pptr,\n                             message_left,\n                             &dst_coap_msg_ptr->options_list_ptr->etag_ptr,\n                             (uint16_t *)&dst_coap_msg_ptr->options_list_ptr->etag_len,\n                             COAP_OPTION_ETAG, option_len);\n                if (ret_status < 0) {\n                    tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_ETAG not valid!\");\n                    return -1;\n                }\n                break;\n\n            case COAP_OPTION_URI_HOST:\n                if ((option_len > 255) || (option_len < 1) || dst_coap_msg_ptr->options_list_ptr->uri_host_ptr) {\n                    tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_URI_HOST not valid!\");\n                    return -1;\n                }\n                dst_coap_msg_ptr->options_list_ptr->uri_host_len = option_len;\n                dst_coap_msg_ptr->options_list_ptr->uri_host_ptr = sn_coap_protocol_malloc_copy(handle, *packet_data_pptr, option_len);\n\n                if (dst_coap_msg_ptr->options_list_ptr->uri_host_ptr == NULL) {\n                    tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_URI_HOST allocation failed!\");\n                    return -1;\n                }\n                message_left = sn_coap_parser_move_packet_ptr(packet_data_pptr, packet_data_start_ptr, packet_len, option_len);\n                break;\n\n            case COAP_OPTION_LOCATION_PATH:\n                if (dst_coap_msg_ptr->options_list_ptr->location_path_ptr) {\n                    tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_LOCATION_PATH exists!\");\n                    return -1;\n                }\n                /* This is managed independently because User gives this option in one character table */\n                ret_status = sn_coap_parser_options_parse_multiple_options(handle, packet_data_pptr, message_left,\n                             &dst_coap_msg_ptr->options_list_ptr->location_path_ptr, &dst_coap_msg_ptr->options_list_ptr->location_path_len,\n                             COAP_OPTION_LOCATION_PATH, option_len);\n                if (ret_status <0) {\n                    tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_LOCATION_PATH not valid!\");\n                    return -1;\n                }\n                break;\n\n            case COAP_OPTION_URI_PORT:\n                if ((option_len > 2) || dst_coap_msg_ptr->options_list_ptr->uri_port != COAP_OPTION_URI_PORT_NONE) {\n                    tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_URI_PORT not valid!\");\n                    return -1;\n                }\n                dst_coap_msg_ptr->options_list_ptr->uri_port = sn_coap_parser_options_parse_uint(packet_data_pptr, option_len);\n                break;\n\n            case COAP_OPTION_LOCATION_QUERY:\n                ret_status = sn_coap_parser_options_parse_multiple_options(handle, packet_data_pptr, message_left,\n                             &dst_coap_msg_ptr->options_list_ptr->location_query_ptr, &dst_coap_msg_ptr->options_list_ptr->location_query_len,\n                             COAP_OPTION_LOCATION_QUERY, option_len);\n                if (ret_status < 0) {\n                    tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_LOCATION_QUERY not valid!\");\n                    return -1;\n                }\n\n                break;\n\n            case COAP_OPTION_URI_PATH:\n                ret_status = sn_coap_parser_options_parse_multiple_options(handle, packet_data_pptr, message_left,\n                             &dst_coap_msg_ptr->uri_path_ptr, &dst_coap_msg_ptr->uri_path_len,\n                             COAP_OPTION_URI_PATH, option_len);\n                if (ret_status < 0) {\n                    tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_URI_PATH not valid!\");\n                    return -1;\n                }\n                break;\n\n            case COAP_OPTION_OBSERVE:\n                if ((option_len > 2) || dst_coap_msg_ptr->options_list_ptr->observe != COAP_OBSERVE_NONE) {\n                    tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_OBSERVE not valid!\");\n                    return -1;\n                }\n                dst_coap_msg_ptr->options_list_ptr->observe = sn_coap_parser_options_parse_uint(packet_data_pptr, option_len);\n                break;\n\n            case COAP_OPTION_URI_QUERY:\n                ret_status = sn_coap_parser_options_parse_multiple_options(handle, packet_data_pptr, message_left,\n                             &dst_coap_msg_ptr->options_list_ptr->uri_query_ptr, &dst_coap_msg_ptr->options_list_ptr->uri_query_len,\n                             COAP_OPTION_URI_QUERY, option_len);\n                if (ret_status < 0) {\n                    tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_URI_QUERY not valid!\");\n                    return -1;\n                }\n                break;\n\n            case COAP_OPTION_BLOCK2:\n                if ((option_len > 3) || dst_coap_msg_ptr->options_list_ptr->block2 != COAP_OPTION_BLOCK_NONE) {\n                    tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_BLOCK2 not valid!\");\n                    return -1;\n                }\n                dst_coap_msg_ptr->options_list_ptr->block2 = sn_coap_parser_options_parse_uint(packet_data_pptr, option_len);\n                break;\n\n            case COAP_OPTION_BLOCK1:\n                if ((option_len > 3) || dst_coap_msg_ptr->options_list_ptr->block1 != COAP_OPTION_BLOCK_NONE) {\n                    tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_BLOCK1 not valid!\");\n                    return -1;\n                }\n                dst_coap_msg_ptr->options_list_ptr->block1 = sn_coap_parser_options_parse_uint(packet_data_pptr, option_len);\n                break;\n\n            case COAP_OPTION_ACCEPT:\n                if ((option_len > 2) || (dst_coap_msg_ptr->options_list_ptr->accept != COAP_CT_NONE)) {\n                    tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_ACCEPT not valid!\");\n                    return -1;\n                }\n                dst_coap_msg_ptr->options_list_ptr->accept = (sn_coap_content_format_e) sn_coap_parser_options_parse_uint(packet_data_pptr, option_len);\n                break;\n\n            case COAP_OPTION_SIZE1:\n                if ((option_len > 4) || dst_coap_msg_ptr->options_list_ptr->use_size1) {\n                    tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_SIZE1 not valid!\");\n                    return -1;\n                }\n                dst_coap_msg_ptr->options_list_ptr->use_size1 = true;\n                dst_coap_msg_ptr->options_list_ptr->size1 = sn_coap_parser_options_parse_uint(packet_data_pptr, option_len);\n                break;\n\n            case COAP_OPTION_SIZE2:\n                if ((option_len > 4) || dst_coap_msg_ptr->options_list_ptr->use_size2) {\n                    tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_SIZE2 not valid!\");\n                    return -1;\n                }\n                dst_coap_msg_ptr->options_list_ptr->use_size2 = true;\n                dst_coap_msg_ptr->options_list_ptr->size2 = sn_coap_parser_options_parse_uint(packet_data_pptr, option_len);\n                break;\n\n            default:\n                tr_error(\"sn_coap_parser_options_parse - unknown option!\");\n                return -1;\n        }\n\n        /* Check for overflow */\n        if ((*packet_data_pptr - packet_data_start_ptr) > packet_len) {\n            return -1;\n        }\n        message_left = sn_coap_parser_move_packet_ptr(packet_data_pptr,\n                                                      packet_data_start_ptr,\n                                                      packet_len,\n                                                      0);\n    }\n    return 0;\n}",
  "abstract_func_before": "static int8_t sn_coap_parser_options_parse(struct coap_s *VAR_0, uint8_t **VAR_1, sn_coap_hdr_s *VAR_2, uint8_t *VAR_3, uint16_t VAR_4)\n{\n    uint8_t VAR_5 = 0;\n    int8_t  VAR_6             = 0;\n    uint16_t VAR_7          = sn_coap_parser_move_packet_ptr(VAR_1,\n                                                                    VAR_3,\n                                                                    VAR_4,\n                                                                    0);\n\n    /* COMMENT_0 */\n    VAR_2->token_len = *VAR_3 & VAR_8;\n\n    if (VAR_2->token_len) {\n        int8_t VAR_9;\n        if ((VAR_2->token_len > 8) || VAR_2->token_ptr) {\n            tr_error(\"sn_coap_parser_options_parse - token not valid!\");\n            return -1;\n        }\n\n        VAR_9 = sn_coap_parser_check_packet_ptr(*VAR_1, VAR_3, VAR_4, VAR_2->token_len);\n        if (0 != VAR_9) {\n            tr_error(\"sn_coap_parser_options_parse - **packet_data_pptr overflow !\");\n            return -1;\n        }\n\n        VAR_2->token_ptr = sn_coap_protocol_malloc_copy(VAR_0, *VAR_1, VAR_2->token_len);\n\n        if (VAR_2->token_ptr == NULL) {\n            tr_error(\"sn_coap_parser_options_parse - failed to allocate token!\");\n            return -1;\n        }\n\n        VAR_7 = sn_coap_parser_move_packet_ptr(VAR_1,\n                                                      VAR_3,\n                                                      VAR_4,\n                                                      VAR_2->token_len);\n    }\n\n    /* COMMENT_1 */\n    while (VAR_7 && (**VAR_1 != 0xff)) {\n        /* COMMENT_2 */\n        uint16_t VAR_10 = (**VAR_1 & 0x0F);\n        /* COMMENT_3 */\n        uint16_t  VAR_11 = (**VAR_1 >> VAR_12);\n\n        VAR_7 = sn_coap_parser_move_packet_ptr(VAR_1, VAR_3, VAR_4, 1);\n\n        int8_t    VAR_13;\n        /* COMMENT_4 */\n        VAR_13 = parse_ext_option(&VAR_11,\n                                                VAR_1,\n                                                VAR_3,\n                                                VAR_4,\n                                                &VAR_7);\n        if (VAR_13 != 0) {\n            return -1;\n        }\n        /* COMMENT_5 */\n        VAR_11 += VAR_5;\n\n        /* COMMENT_6 */\n        VAR_13 = parse_ext_option(&VAR_10,\n                                                VAR_1,\n                                                VAR_3,\n                                                VAR_4,\n                                                &VAR_7);\n        if (VAR_13 != 0) {\n            return -1;\n        }\n\n        /* COMMENT_7 */\n        /* COMMENT_8 */\n        VAR_5 = VAR_11;\n        /* COMMENT_9 */\n        switch (VAR_11) {\n            case VAR_14:\n            case VAR_15:\n            case VAR_16:\n            case VAR_17:\n            case VAR_18:\n            case VAR_19:\n            case VAR_20:\n            case VAR_21:\n            case VAR_22:\n            case VAR_23:\n            case VAR_24:\n            case VAR_25:\n            case VAR_26:\n            case VAR_27:\n                if (sn_coap_parser_alloc_options(VAR_0, VAR_2) == NULL) {\n                    tr_error(\"sn_coap_parser_options_parse - failed to allocate options!\");\n                    return -1;\n                }\n                break;\n        }\n\n        if (VAR_7 < VAR_10){\n            /* COMMENT_10 */\n            tr_error(\"sn_coap_parser_options_parse - **packet_data_pptr would overflow when parsing options!\");\n            return -1;\n        }\n\n        /* COMMENT_11 */\n        switch (VAR_11) {\n            case VAR_28:\n                if ((VAR_10 > 2) || (VAR_2->content_format != VAR_29)) {\n                    tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_CONTENT_FORMAT not valid!\");\n                    return -1;\n                }\n                VAR_2->content_format = (sn_coap_content_format_e) sn_coap_parser_options_parse_uint(VAR_1, VAR_10);\n                break;\n\n            case VAR_14:\n                if (VAR_10 > 4) {\n                    tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_MAX_AGE not valid!\");\n                    return -1;\n                }\n                VAR_2->options_list_ptr->max_age = sn_coap_parser_options_parse_uint(VAR_1, VAR_10);\n                break;\n\n            case VAR_15:\n                if ((VAR_10 > 1034) || (VAR_10 < 1) || VAR_2->options_list_ptr->proxy_uri_ptr) {\n                    tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_PROXY_URI not valid!\");\n                    return -1;\n                }\n                VAR_2->options_list_ptr->proxy_uri_len = VAR_10;\n                VAR_2->options_list_ptr->proxy_uri_ptr = sn_coap_protocol_malloc_copy(VAR_0, *VAR_1, VAR_10);\n\n                if (VAR_2->options_list_ptr->proxy_uri_ptr == NULL) {\n                    tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_PROXY_URI allocation failed!\");\n                    return -1;\n                }\n                VAR_7 = sn_coap_parser_move_packet_ptr(VAR_1, VAR_3, VAR_4, VAR_10);\n                break;\n\n            case VAR_16:\n                /* COMMENT_12 */\n                VAR_6 = sn_coap_parser_options_parse_multiple_options(VAR_0, VAR_1,\n                             VAR_7,\n                             &VAR_2->options_list_ptr->etag_ptr,\n                             (uint16_t *)&VAR_2->options_list_ptr->etag_len,\n                             VAR_16, VAR_10);\n                if (VAR_6 < 0) {\n                    tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_ETAG not valid!\");\n                    return -1;\n                }\n                break;\n\n            case VAR_17:\n                if ((VAR_10 > 255) || (VAR_10 < 1) || VAR_2->options_list_ptr->uri_host_ptr) {\n                    tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_URI_HOST not valid!\");\n                    return -1;\n                }\n                VAR_2->options_list_ptr->uri_host_len = VAR_10;\n                VAR_2->options_list_ptr->uri_host_ptr = sn_coap_protocol_malloc_copy(VAR_0, *VAR_1, VAR_10);\n\n                if (VAR_2->options_list_ptr->uri_host_ptr == NULL) {\n                    tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_URI_HOST allocation failed!\");\n                    return -1;\n                }\n                VAR_7 = sn_coap_parser_move_packet_ptr(VAR_1, VAR_3, VAR_4, VAR_10);\n                break;\n\n            case VAR_18:\n                if (VAR_2->options_list_ptr->location_path_ptr) {\n                    tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_LOCATION_PATH exists!\");\n                    return -1;\n                }\n                /* COMMENT_12 */\n                VAR_6 = sn_coap_parser_options_parse_multiple_options(VAR_0, VAR_1, VAR_7,\n                             &VAR_2->options_list_ptr->location_path_ptr, &VAR_2->options_list_ptr->location_path_len,\n                             VAR_18, VAR_10);\n                if (VAR_6 <0) {\n                    tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_LOCATION_PATH not valid!\");\n                    return -1;\n                }\n                break;\n\n            case VAR_19:\n                if ((VAR_10 > 2) || VAR_2->options_list_ptr->uri_port != VAR_30) {\n                    tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_URI_PORT not valid!\");\n                    return -1;\n                }\n                VAR_2->options_list_ptr->uri_port = sn_coap_parser_options_parse_uint(VAR_1, VAR_10);\n                break;\n\n            case VAR_20:\n                VAR_6 = sn_coap_parser_options_parse_multiple_options(VAR_0, VAR_1, VAR_7,\n                             &VAR_2->options_list_ptr->location_query_ptr, &VAR_2->options_list_ptr->location_query_len,\n                             VAR_20, VAR_10);\n                if (VAR_6 < 0) {\n                    tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_LOCATION_QUERY not valid!\");\n                    return -1;\n                }\n\n                break;\n\n            case VAR_31:\n                VAR_6 = sn_coap_parser_options_parse_multiple_options(VAR_0, VAR_1, VAR_7,\n                             &VAR_2->uri_path_ptr, &VAR_2->uri_path_len,\n                             VAR_31, VAR_10);\n                if (VAR_6 < 0) {\n                    tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_URI_PATH not valid!\");\n                    return -1;\n                }\n                break;\n\n            case VAR_21:\n                if ((VAR_10 > 2) || VAR_2->options_list_ptr->observe != VAR_32) {\n                    tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_OBSERVE not valid!\");\n                    return -1;\n                }\n                VAR_2->options_list_ptr->observe = sn_coap_parser_options_parse_uint(VAR_1, VAR_10);\n                break;\n\n            case VAR_22:\n                VAR_6 = sn_coap_parser_options_parse_multiple_options(VAR_0, VAR_1, VAR_7,\n                             &VAR_2->options_list_ptr->uri_query_ptr, &VAR_2->options_list_ptr->uri_query_len,\n                             VAR_22, VAR_10);\n                if (VAR_6 < 0) {\n                    tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_URI_QUERY not valid!\");\n                    return -1;\n                }\n                break;\n\n            case VAR_23:\n                if ((VAR_10 > 3) || VAR_2->options_list_ptr->block2 != VAR_33) {\n                    tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_BLOCK2 not valid!\");\n                    return -1;\n                }\n                VAR_2->options_list_ptr->block2 = sn_coap_parser_options_parse_uint(VAR_1, VAR_10);\n                break;\n\n            case VAR_24:\n                if ((VAR_10 > 3) || VAR_2->options_list_ptr->block1 != VAR_33) {\n                    tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_BLOCK1 not valid!\");\n                    return -1;\n                }\n                VAR_2->options_list_ptr->block1 = sn_coap_parser_options_parse_uint(VAR_1, VAR_10);\n                break;\n\n            case VAR_25:\n                if ((VAR_10 > 2) || (VAR_2->options_list_ptr->accept != VAR_29)) {\n                    tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_ACCEPT not valid!\");\n                    return -1;\n                }\n                VAR_2->options_list_ptr->accept = (sn_coap_content_format_e) sn_coap_parser_options_parse_uint(VAR_1, VAR_10);\n                break;\n\n            case VAR_26:\n                if ((VAR_10 > 4) || VAR_2->options_list_ptr->use_size1) {\n                    tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_SIZE1 not valid!\");\n                    return -1;\n                }\n                VAR_2->options_list_ptr->use_size1 = true;\n                VAR_2->options_list_ptr->size1 = sn_coap_parser_options_parse_uint(VAR_1, VAR_10);\n                break;\n\n            case VAR_27:\n                if ((VAR_10 > 4) || VAR_2->options_list_ptr->use_size2) {\n                    tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_SIZE2 not valid!\");\n                    return -1;\n                }\n                VAR_2->options_list_ptr->use_size2 = true;\n                VAR_2->options_list_ptr->size2 = sn_coap_parser_options_parse_uint(VAR_1, VAR_10);\n                break;\n\n            default:\n                tr_error(\"sn_coap_parser_options_parse - unknown option!\");\n                return -1;\n        }\n\n        /* COMMENT_13 */\n        if ((*VAR_1 - VAR_3) > VAR_4) {\n            return -1;\n        }\n        VAR_7 = sn_coap_parser_move_packet_ptr(VAR_1,\n                                                      VAR_3,\n                                                      VAR_4,\n                                                      0);\n    }\n    return 0;\n}",
  "func_graph_path_before": "mjurczak/mbed-coap/4647a68e364401e81dbd370728127d844f221d93/sn_coap_parser.c/vul/before/1.json",
  "func": "static int8_t sn_coap_parser_options_parse(struct coap_s *handle, uint8_t **packet_data_pptr, sn_coap_hdr_s *dst_coap_msg_ptr, uint8_t *packet_data_start_ptr, uint16_t packet_len)\n{\n    uint8_t previous_option_number = 0;\n    int8_t  ret_status             = 0;\n    uint16_t message_left          = sn_coap_parser_move_packet_ptr(packet_data_pptr,\n                                                                    packet_data_start_ptr,\n                                                                    packet_len,\n                                                                    0);\n\n    /*  Parse token, if exists  */\n    dst_coap_msg_ptr->token_len = *packet_data_start_ptr & COAP_HEADER_TOKEN_LENGTH_MASK;\n\n    if (dst_coap_msg_ptr->token_len) {\n        int8_t ptr_check_result;\n        if ((dst_coap_msg_ptr->token_len > 8) || dst_coap_msg_ptr->token_ptr) {\n            tr_error(\"sn_coap_parser_options_parse - token not valid!\");\n            return -1;\n        }\n\n        ptr_check_result = sn_coap_parser_check_packet_ptr(*packet_data_pptr, packet_data_start_ptr, packet_len, dst_coap_msg_ptr->token_len);\n        if (0 != ptr_check_result) {\n            tr_error(\"sn_coap_parser_options_parse - **packet_data_pptr overflow !\");\n            return -1;\n        }\n\n        dst_coap_msg_ptr->token_ptr = sn_coap_protocol_malloc_copy(handle, *packet_data_pptr, dst_coap_msg_ptr->token_len);\n\n        if (dst_coap_msg_ptr->token_ptr == NULL) {\n            tr_error(\"sn_coap_parser_options_parse - failed to allocate token!\");\n            return -1;\n        }\n\n        message_left = sn_coap_parser_move_packet_ptr(packet_data_pptr,\n                                                      packet_data_start_ptr,\n                                                      packet_len,\n                                                      dst_coap_msg_ptr->token_len);\n    }\n\n    /* Loop all Options */\n    while (message_left && (**packet_data_pptr != 0xff)) {\n        /* Get option length WITHOUT extensions */\n        uint16_t option_len = (**packet_data_pptr & 0x0F);\n        /* Get option number WITHOUT extensions */\n        uint16_t  option_number = (**packet_data_pptr >> COAP_OPTIONS_OPTION_NUMBER_SHIFT);\n\n        message_left = sn_coap_parser_move_packet_ptr(packet_data_pptr, packet_data_start_ptr, packet_len, 1);\n\n        int8_t    option_parse_result;\n        /* Add possible option delta extension */\n        option_parse_result = parse_ext_option(&option_number,\n                                                packet_data_pptr,\n                                                packet_data_start_ptr,\n                                                packet_len,\n                                                &message_left);\n        if (option_parse_result != 0) {\n            return -1;\n        }\n        /* Add previous option to option delta and get option number */\n        if(sn_coap_parser_add_u16_limit(option_number, previous_option_number, &option_number) != 0)\n        {\n            return -1;\n        }\n\n        /* Add possible option length extension to resolve full length of the option */\n        option_parse_result = parse_ext_option(&option_len,\n                                                packet_data_pptr,\n                                                packet_data_start_ptr,\n                                                packet_len,\n                                                &message_left);\n        if (option_parse_result != 0) {\n            return -1;\n        }\n\n        /* * * Parse option itself * * */\n        /* Some options are handled independently in own functions */\n        previous_option_number = option_number;\n        /* Allocate options_list_ptr if needed */\n        switch (option_number) {\n            case COAP_OPTION_MAX_AGE:\n            case COAP_OPTION_PROXY_URI:\n            case COAP_OPTION_ETAG:\n            case COAP_OPTION_URI_HOST:\n            case COAP_OPTION_LOCATION_PATH:\n            case COAP_OPTION_URI_PORT:\n            case COAP_OPTION_LOCATION_QUERY:\n            case COAP_OPTION_OBSERVE:\n            case COAP_OPTION_URI_QUERY:\n            case COAP_OPTION_BLOCK2:\n            case COAP_OPTION_BLOCK1:\n            case COAP_OPTION_ACCEPT:\n            case COAP_OPTION_SIZE1:\n            case COAP_OPTION_SIZE2:\n                if (sn_coap_parser_alloc_options(handle, dst_coap_msg_ptr) == NULL) {\n                    tr_error(\"sn_coap_parser_options_parse - failed to allocate options!\");\n                    return -1;\n                }\n                break;\n        }\n\n        if (message_left < option_len){\n            /* packet_data_pptr would overflow! */\n            tr_error(\"sn_coap_parser_options_parse - **packet_data_pptr would overflow when parsing options!\");\n            return -1;\n        }\n\n        /* Parse option */\n        switch (option_number) {\n            case COAP_OPTION_CONTENT_FORMAT:\n                if ((option_len > 2) || (dst_coap_msg_ptr->content_format != COAP_CT_NONE)) {\n                    tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_CONTENT_FORMAT not valid!\");\n                    return -1;\n                }\n                dst_coap_msg_ptr->content_format = (sn_coap_content_format_e) sn_coap_parser_options_parse_uint(packet_data_pptr, option_len);\n                break;\n\n            case COAP_OPTION_MAX_AGE:\n                if (option_len > 4) {\n                    tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_MAX_AGE not valid!\");\n                    return -1;\n                }\n                dst_coap_msg_ptr->options_list_ptr->max_age = sn_coap_parser_options_parse_uint(packet_data_pptr, option_len);\n                break;\n\n            case COAP_OPTION_PROXY_URI:\n                if ((option_len > 1034) || (option_len < 1) || dst_coap_msg_ptr->options_list_ptr->proxy_uri_ptr) {\n                    tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_PROXY_URI not valid!\");\n                    return -1;\n                }\n                dst_coap_msg_ptr->options_list_ptr->proxy_uri_len = option_len;\n                dst_coap_msg_ptr->options_list_ptr->proxy_uri_ptr = sn_coap_protocol_malloc_copy(handle, *packet_data_pptr, option_len);\n\n                if (dst_coap_msg_ptr->options_list_ptr->proxy_uri_ptr == NULL) {\n                    tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_PROXY_URI allocation failed!\");\n                    return -1;\n                }\n                message_left = sn_coap_parser_move_packet_ptr(packet_data_pptr, packet_data_start_ptr, packet_len, option_len);\n                break;\n\n            case COAP_OPTION_ETAG:\n                if (dst_coap_msg_ptr->options_list_ptr->etag_ptr)\n                {\n                    tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_ETAG exists!\");\n                    return -1;\n                }\n                /* This is managed independently because User gives this option in one character table */\n                ret_status = sn_coap_parser_options_parse_multiple_options(handle, packet_data_pptr,\n                             message_left,\n                             &dst_coap_msg_ptr->options_list_ptr->etag_ptr,\n                             (uint16_t *)&dst_coap_msg_ptr->options_list_ptr->etag_len,\n                             COAP_OPTION_ETAG, option_len);\n                if (ret_status < 0) {\n                    tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_ETAG not valid!\");\n                    return -1;\n                }\n                break;\n\n            case COAP_OPTION_URI_HOST:\n                if ((option_len > 255) || (option_len < 1) || dst_coap_msg_ptr->options_list_ptr->uri_host_ptr) {\n                    tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_URI_HOST not valid!\");\n                    return -1;\n                }\n                dst_coap_msg_ptr->options_list_ptr->uri_host_len = option_len;\n                dst_coap_msg_ptr->options_list_ptr->uri_host_ptr = sn_coap_protocol_malloc_copy(handle, *packet_data_pptr, option_len);\n\n                if (dst_coap_msg_ptr->options_list_ptr->uri_host_ptr == NULL) {\n                    tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_URI_HOST allocation failed!\");\n                    return -1;\n                }\n                message_left = sn_coap_parser_move_packet_ptr(packet_data_pptr, packet_data_start_ptr, packet_len, option_len);\n                break;\n\n            case COAP_OPTION_LOCATION_PATH:\n                if (dst_coap_msg_ptr->options_list_ptr->location_path_ptr) {\n                    tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_LOCATION_PATH exists!\");\n                    return -1;\n                }\n                /* This is managed independently because User gives this option in one character table */\n                ret_status = sn_coap_parser_options_parse_multiple_options(handle, packet_data_pptr, message_left,\n                             &dst_coap_msg_ptr->options_list_ptr->location_path_ptr, &dst_coap_msg_ptr->options_list_ptr->location_path_len,\n                             COAP_OPTION_LOCATION_PATH, option_len);\n                if (ret_status <0) {\n                    tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_LOCATION_PATH not valid!\");\n                    return -1;\n                }\n                break;\n\n            case COAP_OPTION_URI_PORT:\n                if ((option_len > 2) || dst_coap_msg_ptr->options_list_ptr->uri_port != COAP_OPTION_URI_PORT_NONE) {\n                    tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_URI_PORT not valid!\");\n                    return -1;\n                }\n                dst_coap_msg_ptr->options_list_ptr->uri_port = sn_coap_parser_options_parse_uint(packet_data_pptr, option_len);\n                break;\n\n            case COAP_OPTION_LOCATION_QUERY:\n                if (dst_coap_msg_ptr->options_list_ptr->location_query_ptr)\n                {\n                    tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_LOCATION_QUERY exists!\");\n                    return -1;\n                }\n                ret_status = sn_coap_parser_options_parse_multiple_options(handle, packet_data_pptr, message_left,\n                             &dst_coap_msg_ptr->options_list_ptr->location_query_ptr, &dst_coap_msg_ptr->options_list_ptr->location_query_len,\n                             COAP_OPTION_LOCATION_QUERY, option_len);\n                if (ret_status < 0) {\n                    tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_LOCATION_QUERY not valid!\");\n                    return -1;\n                }\n\n                break;\n\n            case COAP_OPTION_URI_PATH:\n                if (dst_coap_msg_ptr->uri_path_ptr)\n                {\n                    tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_URI_PATH exists!\");\n                    return -1;\n                }\n                ret_status = sn_coap_parser_options_parse_multiple_options(handle, packet_data_pptr, message_left,\n                             &dst_coap_msg_ptr->uri_path_ptr, &dst_coap_msg_ptr->uri_path_len,\n                             COAP_OPTION_URI_PATH, option_len);\n                if (ret_status < 0) {\n                    tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_URI_PATH not valid!\");\n                    return -1;\n                }\n                break;\n\n            case COAP_OPTION_OBSERVE:\n                if ((option_len > 2) || dst_coap_msg_ptr->options_list_ptr->observe != COAP_OBSERVE_NONE) {\n                    tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_OBSERVE not valid!\");\n                    return -1;\n                }\n                dst_coap_msg_ptr->options_list_ptr->observe = sn_coap_parser_options_parse_uint(packet_data_pptr, option_len);\n                break;\n\n            case COAP_OPTION_URI_QUERY:\n                ret_status = sn_coap_parser_options_parse_multiple_options(handle, packet_data_pptr, message_left,\n                             &dst_coap_msg_ptr->options_list_ptr->uri_query_ptr, &dst_coap_msg_ptr->options_list_ptr->uri_query_len,\n                             COAP_OPTION_URI_QUERY, option_len);\n                if (ret_status < 0) {\n                    tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_URI_QUERY not valid!\");\n                    return -1;\n                }\n                break;\n\n            case COAP_OPTION_BLOCK2:\n                if ((option_len > 3) || dst_coap_msg_ptr->options_list_ptr->block2 != COAP_OPTION_BLOCK_NONE) {\n                    tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_BLOCK2 not valid!\");\n                    return -1;\n                }\n                dst_coap_msg_ptr->options_list_ptr->block2 = sn_coap_parser_options_parse_uint(packet_data_pptr, option_len);\n                break;\n\n            case COAP_OPTION_BLOCK1:\n                if ((option_len > 3) || dst_coap_msg_ptr->options_list_ptr->block1 != COAP_OPTION_BLOCK_NONE) {\n                    tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_BLOCK1 not valid!\");\n                    return -1;\n                }\n                dst_coap_msg_ptr->options_list_ptr->block1 = sn_coap_parser_options_parse_uint(packet_data_pptr, option_len);\n                break;\n\n            case COAP_OPTION_ACCEPT:\n                if ((option_len > 2) || (dst_coap_msg_ptr->options_list_ptr->accept != COAP_CT_NONE)) {\n                    tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_ACCEPT not valid!\");\n                    return -1;\n                }\n                dst_coap_msg_ptr->options_list_ptr->accept = (sn_coap_content_format_e) sn_coap_parser_options_parse_uint(packet_data_pptr, option_len);\n                break;\n\n            case COAP_OPTION_SIZE1:\n                if ((option_len > 4) || dst_coap_msg_ptr->options_list_ptr->use_size1) {\n                    tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_SIZE1 not valid!\");\n                    return -1;\n                }\n                dst_coap_msg_ptr->options_list_ptr->use_size1 = true;\n                dst_coap_msg_ptr->options_list_ptr->size1 = sn_coap_parser_options_parse_uint(packet_data_pptr, option_len);\n                break;\n\n            case COAP_OPTION_SIZE2:\n                if ((option_len > 4) || dst_coap_msg_ptr->options_list_ptr->use_size2) {\n                    tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_SIZE2 not valid!\");\n                    return -1;\n                }\n                dst_coap_msg_ptr->options_list_ptr->use_size2 = true;\n                dst_coap_msg_ptr->options_list_ptr->size2 = sn_coap_parser_options_parse_uint(packet_data_pptr, option_len);\n                break;\n\n            default:\n                tr_error(\"sn_coap_parser_options_parse - unknown option!\");\n                return -1;\n        }\n\n        /* Check for overflow */\n        if ((*packet_data_pptr - packet_data_start_ptr) > packet_len) {\n            return -1;\n        }\n        message_left = sn_coap_parser_move_packet_ptr(packet_data_pptr,\n                                                      packet_data_start_ptr,\n                                                      packet_len,\n                                                      0);\n    }\n    return 0;\n}",
  "abstract_func": "static int8_t sn_coap_parser_options_parse(struct coap_s *VAR_0, uint8_t **VAR_1, sn_coap_hdr_s *VAR_2, uint8_t *VAR_3, uint16_t VAR_4)\n{\n    uint8_t VAR_5 = 0;\n    int8_t  VAR_6             = 0;\n    uint16_t VAR_7          = sn_coap_parser_move_packet_ptr(VAR_1,\n                                                                    VAR_3,\n                                                                    VAR_4,\n                                                                    0);\n\n    /* COMMENT_0 */\n    VAR_2->token_len = *VAR_3 & VAR_8;\n\n    if (VAR_2->token_len) {\n        int8_t VAR_9;\n        if ((VAR_2->token_len > 8) || VAR_2->token_ptr) {\n            tr_error(\"sn_coap_parser_options_parse - token not valid!\");\n            return -1;\n        }\n\n        VAR_9 = sn_coap_parser_check_packet_ptr(*VAR_1, VAR_3, VAR_4, VAR_2->token_len);\n        if (0 != VAR_9) {\n            tr_error(\"sn_coap_parser_options_parse - **packet_data_pptr overflow !\");\n            return -1;\n        }\n\n        VAR_2->token_ptr = sn_coap_protocol_malloc_copy(VAR_0, *VAR_1, VAR_2->token_len);\n\n        if (VAR_2->token_ptr == NULL) {\n            tr_error(\"sn_coap_parser_options_parse - failed to allocate token!\");\n            return -1;\n        }\n\n        VAR_7 = sn_coap_parser_move_packet_ptr(VAR_1,\n                                                      VAR_3,\n                                                      VAR_4,\n                                                      VAR_2->token_len);\n    }\n\n    /* COMMENT_1 */\n    while (VAR_7 && (**VAR_1 != 0xff)) {\n        /* COMMENT_2 */\n        uint16_t VAR_10 = (**VAR_1 & 0x0F);\n        /* COMMENT_3 */\n        uint16_t  VAR_11 = (**VAR_1 >> VAR_12);\n\n        VAR_7 = sn_coap_parser_move_packet_ptr(VAR_1, VAR_3, VAR_4, 1);\n\n        int8_t    VAR_13;\n        /* COMMENT_4 */\n        VAR_13 = parse_ext_option(&VAR_11,\n                                                VAR_1,\n                                                VAR_3,\n                                                VAR_4,\n                                                &VAR_7);\n        if (VAR_13 != 0) {\n            return -1;\n        }\n        /* COMMENT_5 */\n        if(sn_coap_parser_add_u16_limit(VAR_11, VAR_5, &VAR_11) != 0)\n        {\n            return -1;\n        }\n\n        /* COMMENT_6 */\n        VAR_13 = parse_ext_option(&VAR_10,\n                                                VAR_1,\n                                                VAR_3,\n                                                VAR_4,\n                                                &VAR_7);\n        if (VAR_13 != 0) {\n            return -1;\n        }\n\n        /* COMMENT_7 */\n        /* COMMENT_8 */\n        VAR_5 = VAR_11;\n        /* COMMENT_9 */\n        switch (VAR_11) {\n            case VAR_14:\n            case VAR_15:\n            case VAR_16:\n            case VAR_17:\n            case VAR_18:\n            case VAR_19:\n            case VAR_20:\n            case VAR_21:\n            case VAR_22:\n            case VAR_23:\n            case VAR_24:\n            case VAR_25:\n            case VAR_26:\n            case VAR_27:\n                if (sn_coap_parser_alloc_options(VAR_0, VAR_2) == NULL) {\n                    tr_error(\"sn_coap_parser_options_parse - failed to allocate options!\");\n                    return -1;\n                }\n                break;\n        }\n\n        if (VAR_7 < VAR_10){\n            /* COMMENT_10 */\n            tr_error(\"sn_coap_parser_options_parse - **packet_data_pptr would overflow when parsing options!\");\n            return -1;\n        }\n\n        /* COMMENT_11 */\n        switch (VAR_11) {\n            case VAR_28:\n                if ((VAR_10 > 2) || (VAR_2->content_format != VAR_29)) {\n                    tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_CONTENT_FORMAT not valid!\");\n                    return -1;\n                }\n                VAR_2->content_format = (sn_coap_content_format_e) sn_coap_parser_options_parse_uint(VAR_1, VAR_10);\n                break;\n\n            case VAR_14:\n                if (VAR_10 > 4) {\n                    tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_MAX_AGE not valid!\");\n                    return -1;\n                }\n                VAR_2->options_list_ptr->max_age = sn_coap_parser_options_parse_uint(VAR_1, VAR_10);\n                break;\n\n            case VAR_15:\n                if ((VAR_10 > 1034) || (VAR_10 < 1) || VAR_2->options_list_ptr->proxy_uri_ptr) {\n                    tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_PROXY_URI not valid!\");\n                    return -1;\n                }\n                VAR_2->options_list_ptr->proxy_uri_len = VAR_10;\n                VAR_2->options_list_ptr->proxy_uri_ptr = sn_coap_protocol_malloc_copy(VAR_0, *VAR_1, VAR_10);\n\n                if (VAR_2->options_list_ptr->proxy_uri_ptr == NULL) {\n                    tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_PROXY_URI allocation failed!\");\n                    return -1;\n                }\n                VAR_7 = sn_coap_parser_move_packet_ptr(VAR_1, VAR_3, VAR_4, VAR_10);\n                break;\n\n            case VAR_16:\n                if (VAR_2->options_list_ptr->etag_ptr)\n                {\n                    tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_ETAG exists!\");\n                    return -1;\n                }\n                /* COMMENT_12 */\n                VAR_6 = sn_coap_parser_options_parse_multiple_options(VAR_0, VAR_1,\n                             VAR_7,\n                             &VAR_2->options_list_ptr->etag_ptr,\n                             (uint16_t *)&VAR_2->options_list_ptr->etag_len,\n                             VAR_16, VAR_10);\n                if (VAR_6 < 0) {\n                    tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_ETAG not valid!\");\n                    return -1;\n                }\n                break;\n\n            case VAR_17:\n                if ((VAR_10 > 255) || (VAR_10 < 1) || VAR_2->options_list_ptr->uri_host_ptr) {\n                    tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_URI_HOST not valid!\");\n                    return -1;\n                }\n                VAR_2->options_list_ptr->uri_host_len = VAR_10;\n                VAR_2->options_list_ptr->uri_host_ptr = sn_coap_protocol_malloc_copy(VAR_0, *VAR_1, VAR_10);\n\n                if (VAR_2->options_list_ptr->uri_host_ptr == NULL) {\n                    tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_URI_HOST allocation failed!\");\n                    return -1;\n                }\n                VAR_7 = sn_coap_parser_move_packet_ptr(VAR_1, VAR_3, VAR_4, VAR_10);\n                break;\n\n            case VAR_18:\n                if (VAR_2->options_list_ptr->location_path_ptr) {\n                    tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_LOCATION_PATH exists!\");\n                    return -1;\n                }\n                /* COMMENT_12 */\n                VAR_6 = sn_coap_parser_options_parse_multiple_options(VAR_0, VAR_1, VAR_7,\n                             &VAR_2->options_list_ptr->location_path_ptr, &VAR_2->options_list_ptr->location_path_len,\n                             VAR_18, VAR_10);\n                if (VAR_6 <0) {\n                    tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_LOCATION_PATH not valid!\");\n                    return -1;\n                }\n                break;\n\n            case VAR_19:\n                if ((VAR_10 > 2) || VAR_2->options_list_ptr->uri_port != VAR_30) {\n                    tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_URI_PORT not valid!\");\n                    return -1;\n                }\n                VAR_2->options_list_ptr->uri_port = sn_coap_parser_options_parse_uint(VAR_1, VAR_10);\n                break;\n\n            case VAR_20:\n                if (VAR_2->options_list_ptr->location_query_ptr)\n                {\n                    tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_LOCATION_QUERY exists!\");\n                    return -1;\n                }\n                VAR_6 = sn_coap_parser_options_parse_multiple_options(VAR_0, VAR_1, VAR_7,\n                             &VAR_2->options_list_ptr->location_query_ptr, &VAR_2->options_list_ptr->location_query_len,\n                             VAR_20, VAR_10);\n                if (VAR_6 < 0) {\n                    tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_LOCATION_QUERY not valid!\");\n                    return -1;\n                }\n\n                break;\n\n            case VAR_31:\n                if (VAR_2->uri_path_ptr)\n                {\n                    tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_URI_PATH exists!\");\n                    return -1;\n                }\n                VAR_6 = sn_coap_parser_options_parse_multiple_options(VAR_0, VAR_1, VAR_7,\n                             &VAR_2->uri_path_ptr, &VAR_2->uri_path_len,\n                             VAR_31, VAR_10);\n                if (VAR_6 < 0) {\n                    tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_URI_PATH not valid!\");\n                    return -1;\n                }\n                break;\n\n            case VAR_21:\n                if ((VAR_10 > 2) || VAR_2->options_list_ptr->observe != VAR_32) {\n                    tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_OBSERVE not valid!\");\n                    return -1;\n                }\n                VAR_2->options_list_ptr->observe = sn_coap_parser_options_parse_uint(VAR_1, VAR_10);\n                break;\n\n            case VAR_22:\n                VAR_6 = sn_coap_parser_options_parse_multiple_options(VAR_0, VAR_1, VAR_7,\n                             &VAR_2->options_list_ptr->uri_query_ptr, &VAR_2->options_list_ptr->uri_query_len,\n                             VAR_22, VAR_10);\n                if (VAR_6 < 0) {\n                    tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_URI_QUERY not valid!\");\n                    return -1;\n                }\n                break;\n\n            case VAR_23:\n                if ((VAR_10 > 3) || VAR_2->options_list_ptr->block2 != VAR_33) {\n                    tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_BLOCK2 not valid!\");\n                    return -1;\n                }\n                VAR_2->options_list_ptr->block2 = sn_coap_parser_options_parse_uint(VAR_1, VAR_10);\n                break;\n\n            case VAR_24:\n                if ((VAR_10 > 3) || VAR_2->options_list_ptr->block1 != VAR_33) {\n                    tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_BLOCK1 not valid!\");\n                    return -1;\n                }\n                VAR_2->options_list_ptr->block1 = sn_coap_parser_options_parse_uint(VAR_1, VAR_10);\n                break;\n\n            case VAR_25:\n                if ((VAR_10 > 2) || (VAR_2->options_list_ptr->accept != VAR_29)) {\n                    tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_ACCEPT not valid!\");\n                    return -1;\n                }\n                VAR_2->options_list_ptr->accept = (sn_coap_content_format_e) sn_coap_parser_options_parse_uint(VAR_1, VAR_10);\n                break;\n\n            case VAR_26:\n                if ((VAR_10 > 4) || VAR_2->options_list_ptr->use_size1) {\n                    tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_SIZE1 not valid!\");\n                    return -1;\n                }\n                VAR_2->options_list_ptr->use_size1 = true;\n                VAR_2->options_list_ptr->size1 = sn_coap_parser_options_parse_uint(VAR_1, VAR_10);\n                break;\n\n            case VAR_27:\n                if ((VAR_10 > 4) || VAR_2->options_list_ptr->use_size2) {\n                    tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_SIZE2 not valid!\");\n                    return -1;\n                }\n                VAR_2->options_list_ptr->use_size2 = true;\n                VAR_2->options_list_ptr->size2 = sn_coap_parser_options_parse_uint(VAR_1, VAR_10);\n                break;\n\n            default:\n                tr_error(\"sn_coap_parser_options_parse - unknown option!\");\n                return -1;\n        }\n\n        /* COMMENT_13 */\n        if ((*VAR_1 - VAR_3) > VAR_4) {\n            return -1;\n        }\n        VAR_7 = sn_coap_parser_move_packet_ptr(VAR_1,\n                                                      VAR_3,\n                                                      VAR_4,\n                                                      0);\n    }\n    return 0;\n}",
  "func_graph_path": "mjurczak/mbed-coap/4647a68e364401e81dbd370728127d844f221d93/sn_coap_parser.c/vul/after/1.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -56,7 +56,10 @@\n             return -1;\n         }\n         /* Add previous option to option delta and get option number */\n-        option_number += previous_option_number;\n+        if(sn_coap_parser_add_u16_limit(option_number, previous_option_number, &option_number) != 0)\n+        {\n+            return -1;\n+        }\n \n         /* Add possible option length extension to resolve full length of the option */\n         option_parse_result = parse_ext_option(&option_len,\n@@ -134,6 +137,11 @@\n                 break;\n \n             case COAP_OPTION_ETAG:\n+                if (dst_coap_msg_ptr->options_list_ptr->etag_ptr)\n+                {\n+                    tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_ETAG exists!\");\n+                    return -1;\n+                }\n                 /* This is managed independently because User gives this option in one character table */\n                 ret_status = sn_coap_parser_options_parse_multiple_options(handle, packet_data_pptr,\n                              message_left,\n@@ -185,6 +193,11 @@\n                 break;\n \n             case COAP_OPTION_LOCATION_QUERY:\n+                if (dst_coap_msg_ptr->options_list_ptr->location_query_ptr)\n+                {\n+                    tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_LOCATION_QUERY exists!\");\n+                    return -1;\n+                }\n                 ret_status = sn_coap_parser_options_parse_multiple_options(handle, packet_data_pptr, message_left,\n                              &dst_coap_msg_ptr->options_list_ptr->location_query_ptr, &dst_coap_msg_ptr->options_list_ptr->location_query_len,\n                              COAP_OPTION_LOCATION_QUERY, option_len);\n@@ -196,6 +209,11 @@\n                 break;\n \n             case COAP_OPTION_URI_PATH:\n+                if (dst_coap_msg_ptr->uri_path_ptr)\n+                {\n+                    tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_URI_PATH exists!\");\n+                    return -1;\n+                }\n                 ret_status = sn_coap_parser_options_parse_multiple_options(handle, packet_data_pptr, message_left,\n                              &dst_coap_msg_ptr->uri_path_ptr, &dst_coap_msg_ptr->uri_path_len,\n                              COAP_OPTION_URI_PATH, option_len);",
  "diff_line_info": {
    "deleted_lines": [
      "        option_number += previous_option_number;"
    ],
    "added_lines": [
      "        if(sn_coap_parser_add_u16_limit(option_number, previous_option_number, &option_number) != 0)",
      "        {",
      "            return -1;",
      "        }",
      "                if (dst_coap_msg_ptr->options_list_ptr->etag_ptr)",
      "                {",
      "                    tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_ETAG exists!\");",
      "                    return -1;",
      "                }",
      "                if (dst_coap_msg_ptr->options_list_ptr->location_query_ptr)",
      "                {",
      "                    tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_LOCATION_QUERY exists!\");",
      "                    return -1;",
      "                }",
      "                if (dst_coap_msg_ptr->uri_path_ptr)",
      "                {",
      "                    tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_URI_PATH exists!\");",
      "                    return -1;",
      "                }"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/mjurczak/mbed-coap/pull/4",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/mjurczak/mbed-coap/pull/4: 403 Client Error: Forbidden for url: https://api.github.com/repos/mjurczak/mbed-coap/pulls/4",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 1.0"
}