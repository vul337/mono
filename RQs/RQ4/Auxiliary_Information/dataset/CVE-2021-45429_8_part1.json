{
  "cve_id": "CVE-2021-45429",
  "cwe_ids": [
    "CWE-120"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "VirusTotal/yara",
  "commit_msg": "Fix issue #1616\n\nThis is a more comprehensive fix than #1617, it adds new functions to the API for getting/setting uint32 and uint64 settings.  Using these functions is preferable over calling `yr_(get|set)_configuration` directly.",
  "commit_hash": "b34b7e74c862c129b801832b6b85401fbada2b01",
  "git_url": "https://github.com/VirusTotal/yara/commit/b34b7e74c862c129b801832b6b85401fbada2b01",
  "file_path": "cli/yarac.c",
  "func_name": "_tmain",
  "func_before": "int _tmain(int argc, const char_t** argv)\n{\n  COMPILER_RESULTS cr;\n\n  YR_COMPILER* compiler = NULL;\n  YR_RULES* rules = NULL;\n\n  int result;\n\n  argc = args_parse(options, argc, argv);\n\n  if (show_version)\n  {\n    printf(\"%s\\n\", YR_VERSION);\n    return EXIT_SUCCESS;\n  }\n\n  if (show_help)\n  {\n    printf(\"%s\\n\\n\", USAGE_STRING);\n\n    args_print_usage(options, 40);\n    printf(\"\\nSend bug reports and suggestions to: vmalvarez@virustotal.com\\n\");\n\n    return EXIT_SUCCESS;\n  }\n\n  if (argc < 2)\n  {\n    fprintf(stderr, \"yarac: wrong number of arguments\\n\");\n    fprintf(stderr, \"%s\\n\\n\", USAGE_STRING);\n    fprintf(stderr, \"Try `--help` for more options\\n\");\n\n    exit_with_code(EXIT_FAILURE);\n  }\n\n  if (yr_initialize() != ERROR_SUCCESS)\n    exit_with_code(EXIT_FAILURE);\n\n  if (yr_compiler_create(&compiler) != ERROR_SUCCESS)\n    exit_with_code(EXIT_FAILURE);\n\n  if (define_external_variables(ext_vars, NULL, compiler) != ERROR_SUCCESS)\n    exit_with_code(EXIT_FAILURE);\n\n  if (atom_quality_table != NULL)\n  {\n    result = yr_compiler_load_atom_quality_table(\n        compiler, atom_quality_table, 0);\n\n    if (result != ERROR_SUCCESS)\n    {\n      fprintf(stderr, \"error loading atom quality table\\n\");\n      exit_with_code(EXIT_FAILURE);\n    }\n  }\n\n  cr.errors = 0;\n  cr.warnings = 0;\n\n  yr_set_configuration(YR_CONFIG_MAX_STRINGS_PER_RULE, &max_strings_per_rule);\n  yr_compiler_set_callback(compiler, report_error, &cr);\n\n  if (!compile_files(compiler, argc, argv))\n    exit_with_code(EXIT_FAILURE);\n\n  if (cr.errors > 0)\n    exit_with_code(EXIT_FAILURE);\n\n  if (fail_on_warnings && cr.warnings > 0)\n    exit_with_code(EXIT_FAILURE);\n\n  result = yr_compiler_get_rules(compiler, &rules);\n\n  if (result != ERROR_SUCCESS)\n  {\n    fprintf(stderr, \"error: %d\\n\", result);\n    exit_with_code(EXIT_FAILURE);\n  }\n\n  // Not using yr_rules_save because it does not have support for unicode\n  // file names. Instead use open _tfopen for openning the file and\n  // yr_rules_save_stream for writing the rules to it.\n\n  FILE* fh = _tfopen(argv[argc - 1], _T(\"wb\"));\n\n  if (fh != NULL)\n  {\n    YR_STREAM stream;\n\n    stream.user_data = fh;\n    stream.write = (YR_STREAM_WRITE_FUNC) fwrite;\n\n    result = yr_rules_save_stream(rules, &stream);\n\n    fclose(fh);\n  }\n\n  if (result != ERROR_SUCCESS)\n  {\n    fprintf(stderr, \"error: %d\\n\", result);\n    exit_with_code(EXIT_FAILURE);\n  }\n\n  result = EXIT_SUCCESS;\n\n_exit:\n\n  if (compiler != NULL)\n    yr_compiler_destroy(compiler);\n\n  if (rules != NULL)\n    yr_rules_destroy(rules);\n\n  yr_finalize();\n\n  args_free(options);\n\n  return result;\n}",
  "abstract_func_before": "int _tmain(int VAR_0, const char_t** VAR_1)\n{\n  COMPILER_RESULTS VAR_2;\n\n  YR_COMPILER* VAR_3 = NULL;\n  YR_RULES* VAR_4 = NULL;\n\n  int VAR_5;\n\n  VAR_0 = args_parse(VAR_6, VAR_0, VAR_1);\n\n  if (VAR_7)\n  {\n    printf(\"%s\\n\", VAR_8);\n    return VAR_9;\n  }\n\n  if (VAR_10)\n  {\n    printf(\"%s\\n\\n\", VAR_11);\n\n    args_print_usage(VAR_6, 40);\n    printf(\"\\nSend bug reports and suggestions to: vmalvarez@virustotal.com\\n\");\n\n    return VAR_9;\n  }\n\n  if (VAR_0 < 2)\n  {\n    fprintf(VAR_12, \"yarac: wrong number of arguments\\n\");\n    fprintf(VAR_12, \"%s\\n\\n\", VAR_11);\n    fprintf(VAR_12, \"Try `--help` for more options\\n\");\n\n    exit_with_code(VAR_13);\n  }\n\n  if (yr_initialize() != VAR_14)\n    exit_with_code(VAR_13);\n\n  if (yr_compiler_create(&VAR_3) != VAR_14)\n    exit_with_code(VAR_13);\n\n  if (define_external_variables(VAR_15, NULL, VAR_3) != VAR_14)\n    exit_with_code(VAR_13);\n\n  if (VAR_16 != NULL)\n  {\n    VAR_5 = yr_compiler_load_atom_quality_table(\n        VAR_3, VAR_16, 0);\n\n    if (VAR_5 != VAR_14)\n    {\n      fprintf(VAR_12, \"error loading atom quality table\\n\");\n      exit_with_code(VAR_13);\n    }\n  }\n\n  VAR_2.errors = 0;\n  VAR_2.warnings = 0;\n\n  yr_set_configuration(VAR_17, &VAR_18);\n  yr_compiler_set_callback(VAR_3, VAR_19, &VAR_2);\n\n  if (!compile_files(VAR_3, VAR_0, VAR_1))\n    exit_with_code(VAR_13);\n\n  if (VAR_2.errors > 0)\n    exit_with_code(VAR_13);\n\n  if (VAR_20 && VAR_2.warnings > 0)\n    exit_with_code(VAR_13);\n\n  VAR_5 = yr_compiler_get_rules(VAR_3, &VAR_4);\n\n  if (VAR_5 != VAR_14)\n  {\n    fprintf(VAR_12, \"error: %d\\n\", VAR_5);\n    exit_with_code(VAR_13);\n  }\n\n  /* COMMENT_0 */\n  /* COMMENT_1 */\n  /* COMMENT_2 */\n\n  FILE* VAR_21 = _tfopen(VAR_1[VAR_0 - 1], _T(\"wb\"));\n\n  if (VAR_21 != NULL)\n  {\n    YR_STREAM VAR_22;\n\n    VAR_22.user_data = VAR_21;\n    VAR_22.write = (YR_STREAM_WRITE_FUNC) VAR_23;\n\n    VAR_5 = yr_rules_save_stream(VAR_4, &VAR_22);\n\n    fclose(VAR_21);\n  }\n\n  if (VAR_5 != VAR_14)\n  {\n    fprintf(VAR_12, \"error: %d\\n\", VAR_5);\n    exit_with_code(VAR_13);\n  }\n\n  VAR_5 = VAR_9;\n\n_exit:\n\n  if (VAR_3 != NULL)\n    yr_compiler_destroy(VAR_3);\n\n  if (VAR_4 != NULL)\n    yr_rules_destroy(VAR_4);\n\n  yr_finalize();\n\n  args_free(VAR_6);\n\n  return VAR_5;\n}",
  "func_graph_path_before": "VirusTotal/yara/b34b7e74c862c129b801832b6b85401fbada2b01/yarac.c/vul/before/0.json",
  "func": "int _tmain(int argc, const char_t** argv)\n{\n  COMPILER_RESULTS cr;\n\n  YR_COMPILER* compiler = NULL;\n  YR_RULES* rules = NULL;\n\n  int result;\n\n  argc = args_parse(options, argc, argv);\n\n  if (show_version)\n  {\n    printf(\"%s\\n\", YR_VERSION);\n    return EXIT_SUCCESS;\n  }\n\n  if (show_help)\n  {\n    printf(\"%s\\n\\n\", USAGE_STRING);\n\n    args_print_usage(options, 40);\n    printf(\"\\nSend bug reports and suggestions to: vmalvarez@virustotal.com\\n\");\n\n    return EXIT_SUCCESS;\n  }\n\n  if (argc < 2)\n  {\n    fprintf(stderr, \"yarac: wrong number of arguments\\n\");\n    fprintf(stderr, \"%s\\n\\n\", USAGE_STRING);\n    fprintf(stderr, \"Try `--help` for more options\\n\");\n\n    exit_with_code(EXIT_FAILURE);\n  }\n\n  if (yr_initialize() != ERROR_SUCCESS)\n    exit_with_code(EXIT_FAILURE);\n\n  if (yr_compiler_create(&compiler) != ERROR_SUCCESS)\n    exit_with_code(EXIT_FAILURE);\n\n  if (define_external_variables(ext_vars, NULL, compiler) != ERROR_SUCCESS)\n    exit_with_code(EXIT_FAILURE);\n\n  if (atom_quality_table != NULL)\n  {\n    result = yr_compiler_load_atom_quality_table(\n        compiler, atom_quality_table, 0);\n\n    if (result != ERROR_SUCCESS)\n    {\n      fprintf(stderr, \"error loading atom quality table\\n\");\n      exit_with_code(EXIT_FAILURE);\n    }\n  }\n\n  cr.errors = 0;\n  cr.warnings = 0;\n\n  yr_set_configuration_uint32(\n      YR_CONFIG_MAX_STRINGS_PER_RULE, max_strings_per_rule);\n\n  yr_compiler_set_callback(compiler, report_error, &cr);\n\n  if (!compile_files(compiler, argc, argv))\n    exit_with_code(EXIT_FAILURE);\n\n  if (cr.errors > 0)\n    exit_with_code(EXIT_FAILURE);\n\n  if (fail_on_warnings && cr.warnings > 0)\n    exit_with_code(EXIT_FAILURE);\n\n  result = yr_compiler_get_rules(compiler, &rules);\n\n  if (result != ERROR_SUCCESS)\n  {\n    fprintf(stderr, \"error: %d\\n\", result);\n    exit_with_code(EXIT_FAILURE);\n  }\n\n  // Not using yr_rules_save because it does not have support for unicode\n  // file names. Instead use open _tfopen for openning the file and\n  // yr_rules_save_stream for writing the rules to it.\n\n  FILE* fh = _tfopen(argv[argc - 1], _T(\"wb\"));\n\n  if (fh != NULL)\n  {\n    YR_STREAM stream;\n\n    stream.user_data = fh;\n    stream.write = (YR_STREAM_WRITE_FUNC) fwrite;\n\n    result = yr_rules_save_stream(rules, &stream);\n\n    fclose(fh);\n  }\n\n  if (result != ERROR_SUCCESS)\n  {\n    fprintf(stderr, \"error: %d\\n\", result);\n    exit_with_code(EXIT_FAILURE);\n  }\n\n  result = EXIT_SUCCESS;\n\n_exit:\n\n  if (compiler != NULL)\n    yr_compiler_destroy(compiler);\n\n  if (rules != NULL)\n    yr_rules_destroy(rules);\n\n  yr_finalize();\n\n  args_free(options);\n\n  return result;\n}",
  "abstract_func": "int _tmain(int VAR_0, const char_t** VAR_1)\n{\n  COMPILER_RESULTS VAR_2;\n\n  YR_COMPILER* VAR_3 = NULL;\n  YR_RULES* VAR_4 = NULL;\n\n  int VAR_5;\n\n  VAR_0 = args_parse(VAR_6, VAR_0, VAR_1);\n\n  if (VAR_7)\n  {\n    printf(\"%s\\n\", VAR_8);\n    return VAR_9;\n  }\n\n  if (VAR_10)\n  {\n    printf(\"%s\\n\\n\", VAR_11);\n\n    args_print_usage(VAR_6, 40);\n    printf(\"\\nSend bug reports and suggestions to: vmalvarez@virustotal.com\\n\");\n\n    return VAR_9;\n  }\n\n  if (VAR_0 < 2)\n  {\n    fprintf(VAR_12, \"yarac: wrong number of arguments\\n\");\n    fprintf(VAR_12, \"%s\\n\\n\", VAR_11);\n    fprintf(VAR_12, \"Try `--help` for more options\\n\");\n\n    exit_with_code(VAR_13);\n  }\n\n  if (yr_initialize() != VAR_14)\n    exit_with_code(VAR_13);\n\n  if (yr_compiler_create(&VAR_3) != VAR_14)\n    exit_with_code(VAR_13);\n\n  if (define_external_variables(VAR_15, NULL, VAR_3) != VAR_14)\n    exit_with_code(VAR_13);\n\n  if (VAR_16 != NULL)\n  {\n    VAR_5 = yr_compiler_load_atom_quality_table(\n        VAR_3, VAR_16, 0);\n\n    if (VAR_5 != VAR_14)\n    {\n      fprintf(VAR_12, \"error loading atom quality table\\n\");\n      exit_with_code(VAR_13);\n    }\n  }\n\n  VAR_2.errors = 0;\n  VAR_2.warnings = 0;\n\n  yr_set_configuration_uint32(\n      VAR_17, VAR_18);\n\n  yr_compiler_set_callback(VAR_3, VAR_19, &VAR_2);\n\n  if (!compile_files(VAR_3, VAR_0, VAR_1))\n    exit_with_code(VAR_13);\n\n  if (VAR_2.errors > 0)\n    exit_with_code(VAR_13);\n\n  if (VAR_20 && VAR_2.warnings > 0)\n    exit_with_code(VAR_13);\n\n  VAR_5 = yr_compiler_get_rules(VAR_3, &VAR_4);\n\n  if (VAR_5 != VAR_14)\n  {\n    fprintf(VAR_12, \"error: %d\\n\", VAR_5);\n    exit_with_code(VAR_13);\n  }\n\n  /* COMMENT_0 */\n  /* COMMENT_1 */\n  /* COMMENT_2 */\n\n  FILE* VAR_21 = _tfopen(VAR_1[VAR_0 - 1], _T(\"wb\"));\n\n  if (VAR_21 != NULL)\n  {\n    YR_STREAM VAR_22;\n\n    VAR_22.user_data = VAR_21;\n    VAR_22.write = (YR_STREAM_WRITE_FUNC) VAR_23;\n\n    VAR_5 = yr_rules_save_stream(VAR_4, &VAR_22);\n\n    fclose(VAR_21);\n  }\n\n  if (VAR_5 != VAR_14)\n  {\n    fprintf(VAR_12, \"error: %d\\n\", VAR_5);\n    exit_with_code(VAR_13);\n  }\n\n  VAR_5 = VAR_9;\n\n_exit:\n\n  if (VAR_3 != NULL)\n    yr_compiler_destroy(VAR_3);\n\n  if (VAR_4 != NULL)\n    yr_rules_destroy(VAR_4);\n\n  yr_finalize();\n\n  args_free(VAR_6);\n\n  return VAR_5;\n}",
  "func_graph_path": "VirusTotal/yara/b34b7e74c862c129b801832b6b85401fbada2b01/yarac.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -58,7 +58,9 @@\n   cr.errors = 0;\n   cr.warnings = 0;\n \n-  yr_set_configuration(YR_CONFIG_MAX_STRINGS_PER_RULE, &max_strings_per_rule);\n+  yr_set_configuration_uint32(\n+      YR_CONFIG_MAX_STRINGS_PER_RULE, max_strings_per_rule);\n+\n   yr_compiler_set_callback(compiler, report_error, &cr);\n \n   if (!compile_files(compiler, argc, argv))",
  "diff_line_info": {
    "deleted_lines": [
      "  yr_set_configuration(YR_CONFIG_MAX_STRINGS_PER_RULE, &max_strings_per_rule);"
    ],
    "added_lines": [
      "  yr_set_configuration_uint32(",
      "      YR_CONFIG_MAX_STRINGS_PER_RULE, max_strings_per_rule);",
      ""
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/VirusTotal/yara/pull/1621",
  "description": {
    "pr_info": {
      "title": "Fix issue #1616",
      "number": 1621
    },
    "comment": [
      "This is a more comprehensive fix than #1617, it adds new functions to the API for getting/setting uint32 and uint64 settings.  Using these functions is preferable over calling `yr_(get|set)_configuration` directly."
    ]
  },
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "The commit introduces new API functions for handling specific data types, improving how configurations are managed. No security implications are mentioned. The code change replaces a general function with a type-specific one, enhancing code structure.\n\n**Final Classification:** Defect Remediation & Feature Upgrades; **Confidence:** 0.9\n\n**Final Classification:** Defect Remediation & Feature Upgrades  \n**Confidence:** 0.9"
}