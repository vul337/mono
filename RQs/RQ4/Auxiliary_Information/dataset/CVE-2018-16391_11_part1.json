{
  "cve_id": "CVE-2018-16391",
  "cwe_ids": [
    "CWE-415",
    "CWE-119"
  ],
  "cvss_vector": "AV:L/AC:L/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "OpenSC",
  "commit_msg": "fixed out of bounds writes\n\nThanks to Eric Sesterhenn from X41 D-SEC GmbH\nfor reporting the problems.",
  "commit_hash": "360e95d45ac4123255a4c796db96337f332160ad",
  "git_url": "https://github.com/OpenSC/OpenSC/commit/360e95d45ac4123255a4c796db96337f332160ad",
  "file_path": "src/libopensc/card-muscle.c",
  "func_name": "muscle_list_files",
  "func_before": "static int muscle_list_files(sc_card_t *card, u8 *buf, size_t bufLen)\n{\n\tmuscle_private_t* priv = MUSCLE_DATA(card);\n\tmscfs_t *fs = priv->fs;\n\tint x;\n\tint count = 0;\n\n\tmscfs_check_cache(priv->fs);\n\n\tfor(x = 0; x < fs->cache.size; x++) {\n\t\tu8* oid= fs->cache.array[x].objectId.id;\n\t\tsc_debug(card->ctx, SC_LOG_DEBUG_NORMAL,\n\t\t\t\"FILE: %02X%02X%02X%02X\\n\",\n\t\t\toid[0],oid[1],oid[2],oid[3]);\n\t\tif(0 == memcmp(fs->currentPath, oid, 2)) {\n\t\t\tbuf[0] = oid[2];\n\t\t\tbuf[1] = oid[3];\n\t\t\tif(buf[0] == 0x00 && buf[1] == 0x00) continue; /* No directories/null names outside of root */\n\t\t\tbuf += 2;\n\t\t\tcount+=2;\n\t\t}\n\t}\n\treturn count;\n}",
  "abstract_func_before": "static int muscle_list_files(sc_card_t *VAR_0, u8 *VAR_1, size_t VAR_2)\n{\n\tmuscle_private_t* VAR_3 = MUSCLE_DATA(VAR_0);\n\tmscfs_t *VAR_4 = VAR_3->fs;\n\tint VAR_5;\n\tint VAR_6 = 0;\n\n\tmscfs_check_cache(VAR_3->fs);\n\n\tfor(VAR_5 = 0; VAR_5 < VAR_4->cache.size; VAR_5++) {\n\t\tu8* VAR_7= VAR_4->cache.array[VAR_5].objectId.id;\n\t\tsc_debug(VAR_0->ctx, VAR_8,\n\t\t\t\"FILE: %02X%02X%02X%02X\\n\",\n\t\t\tVAR_7[0],VAR_7[1],VAR_7[2],VAR_7[3]);\n\t\tif(0 == memcmp(VAR_4->currentPath, VAR_7, 2)) {\n\t\t\tVAR_1[0] = VAR_7[2];\n\t\t\tVAR_1[1] = VAR_7[3];\n\t\t\tif(VAR_1[0] == 0x00 && VAR_1[1] == 0x00) continue; /* COMMENT_0 */\n\t\t\tVAR_1 += 2;\n\t\t\tVAR_6+=2;\n\t\t}\n\t}\n\treturn VAR_6;\n}",
  "func_graph_path_before": "OpenSC/360e95d45ac4123255a4c796db96337f332160ad/card-muscle.c/vul/before/0.json",
  "func": "static int muscle_list_files(sc_card_t *card, u8 *buf, size_t bufLen)\n{\n\tmuscle_private_t* priv = MUSCLE_DATA(card);\n\tmscfs_t *fs = priv->fs;\n\tint x;\n\tint count = 0;\n\n\tmscfs_check_cache(priv->fs);\n\n\tfor(x = 0; x < fs->cache.size; x++) {\n\t\tu8* oid = fs->cache.array[x].objectId.id;\n\t\tif (bufLen < 2)\n\t\t\tbreak;\n\t\tsc_debug(card->ctx, SC_LOG_DEBUG_NORMAL,\n\t\t\t\"FILE: %02X%02X%02X%02X\\n\",\n\t\t\toid[0],oid[1],oid[2],oid[3]);\n\t\tif(0 == memcmp(fs->currentPath, oid, 2)) {\n\t\t\tbuf[0] = oid[2];\n\t\t\tbuf[1] = oid[3];\n\t\t\tif(buf[0] == 0x00 && buf[1] == 0x00) continue; /* No directories/null names outside of root */\n\t\t\tbuf += 2;\n\t\t\tcount += 2;\n\t\t\tbufLen -= 2;\n\t\t}\n\t}\n\treturn count;\n}",
  "abstract_func": "static int muscle_list_files(sc_card_t *VAR_0, u8 *VAR_1, size_t VAR_2)\n{\n\tmuscle_private_t* VAR_3 = MUSCLE_DATA(VAR_0);\n\tmscfs_t *VAR_4 = VAR_3->fs;\n\tint VAR_5;\n\tint VAR_6 = 0;\n\n\tmscfs_check_cache(VAR_3->fs);\n\n\tfor(VAR_5 = 0; VAR_5 < VAR_4->cache.size; VAR_5++) {\n\t\tu8* VAR_7 = VAR_4->cache.array[VAR_5].objectId.id;\n\t\tif (VAR_2 < 2)\n\t\t\tbreak;\n\t\tsc_debug(VAR_0->ctx, VAR_8,\n\t\t\t\"FILE: %02X%02X%02X%02X\\n\",\n\t\t\tVAR_7[0],VAR_7[1],VAR_7[2],VAR_7[3]);\n\t\tif(0 == memcmp(VAR_4->currentPath, VAR_7, 2)) {\n\t\t\tVAR_1[0] = VAR_7[2];\n\t\t\tVAR_1[1] = VAR_7[3];\n\t\t\tif(VAR_1[0] == 0x00 && VAR_1[1] == 0x00) continue; /* COMMENT_0 */\n\t\t\tVAR_1 += 2;\n\t\t\tVAR_6 += 2;\n\t\t\tVAR_2 -= 2;\n\t\t}\n\t}\n\treturn VAR_6;\n}",
  "func_graph_path": "OpenSC/360e95d45ac4123255a4c796db96337f332160ad/card-muscle.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -8,7 +8,9 @@\n \tmscfs_check_cache(priv->fs);\n \n \tfor(x = 0; x < fs->cache.size; x++) {\n-\t\tu8* oid= fs->cache.array[x].objectId.id;\n+\t\tu8* oid = fs->cache.array[x].objectId.id;\n+\t\tif (bufLen < 2)\n+\t\t\tbreak;\n \t\tsc_debug(card->ctx, SC_LOG_DEBUG_NORMAL,\n \t\t\t\"FILE: %02X%02X%02X%02X\\n\",\n \t\t\toid[0],oid[1],oid[2],oid[3]);\n@@ -17,7 +19,8 @@\n \t\t\tbuf[1] = oid[3];\n \t\t\tif(buf[0] == 0x00 && buf[1] == 0x00) continue; /* No directories/null names outside of root */\n \t\t\tbuf += 2;\n-\t\t\tcount+=2;\n+\t\t\tcount += 2;\n+\t\t\tbufLen -= 2;\n \t\t}\n \t}\n \treturn count;",
  "diff_line_info": {
    "deleted_lines": [
      "\t\tu8* oid= fs->cache.array[x].objectId.id;",
      "\t\t\tcount+=2;"
    ],
    "added_lines": [
      "\t\tu8* oid = fs->cache.array[x].objectId.id;",
      "\t\tif (bufLen < 2)",
      "\t\t\tbreak;",
      "\t\t\tcount += 2;",
      "\t\t\tbufLen -= 2;"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/OpenSC/OpenSC/pull/1447",
  "description": {
    "pr_info": {
      "title": "Security issues identified by fuzzing",
      "number": 1447
    },
    "comment": [
      "This PR merges changes addressing issues identified by fuzzing OpenSC driver by Eric Sesterhenn. The separate commits are authored mostly by @frankmorgner, @dengert, Eric and me.\r\n\r\nFor more information, see the blog post:\r\n\r\nhttps://www.x41-dsec.de/lab/blog/smartcards/\r\n\r\nThe changes were tested to ensure they still work for the cards we have, but testing with more cards would be always appreciated.\r\n\r\n##### Checklist\r\n<!-- Remove items that do not apply. For completed items, change [ ] to [x]. -->\r\n- [X] PKCS#11 module is tested\r\n- [ ] Windows minidriver is tested\r\n- [ ] macOS tokend is tested\r\n"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 0.95"
}