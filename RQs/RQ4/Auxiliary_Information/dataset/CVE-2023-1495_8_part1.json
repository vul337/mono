{
  "cve_id": "CVE-2023-1495",
  "cwe_ids": [
    "CWE-89"
  ],
  "cvss_vector": "AV:N/AC:L/Au:S/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "getrebuild/rebuild",
  "commit_msg": "H5 sync2 (#595)\n\n* style: 目录样式gh\r\n\r\n* style: J_new\r\n\r\n* feat: advListFilterTabs\r\n\r\n* feat: nav-copyto\r\n\r\n* enh: 助记码全拼\r\n\r\n* enh: 地图搜索选点\r\n\r\n* enh: topnav\r\n\r\n* list pn\r\n\r\n* .form-line.v33\r\n\r\n* open TAG\r\n\r\n* KVS addShutdownHook\r\n\r\n* fix: #594\r\n\r\n---------\r\n\r\nCo-authored-by: devezhao <zhaofang123@gmail.com>",
  "commit_hash": "c9474f84e5f376dd2ade2078e3039961a9425da7",
  "git_url": "https://github.com/getrebuild/rebuild/commit/c9474f84e5f376dd2ade2078e3039961a9425da7",
  "file_path": "src/main/java/com/rebuild/web/general/RelatedListController.java",
  "func_name": "buildBaseSql",
  "func_before": "private String buildBaseSql(ID mainid, String relatedExpr, String q, boolean count, ID user) {\n        // format: Entity.Field\n        Entity relatedEntity = MetadataHelper.getEntity(relatedExpr.split(\"\\\\.\")[0]);\n\n        String where = new ProtocolFilterParser(null).parseRelated(relatedExpr, mainid);\n\n        // @see FeedsListController#fetchFeeds\n        if (relatedEntity.getEntityCode() == EntityHelper.Feeds) {\n            where += String.format(\" and (type = %d or type = %d)\",\n                    FeedsType.FOLLOWUP.getMask(),\n                    FeedsType.SCHEDULE.getMask());\n\n            List<String> in = new ArrayList<>();\n            in.add(\"scope = 'ALL'\");\n            for (Team t : Application.getUserStore().getUser(user).getOwningTeams()) {\n                in.add(String.format(\"scope = '%s'\", t.getIdentity()));\n            }\n            where += \" and ( \" + StringUtils.join(in, \" or \") + \" )\";\n        }\n\n        if (StringUtils.isNotBlank(q)) {\n            Set<String> searchFields = ParseHelper.buildQuickFields(relatedEntity, null);\n\n            if (!searchFields.isEmpty()) {\n                String like = \" like '%\" + StringEscapeUtils.escapeSql(q) + \"%'\";\n                String searchWhere = \" and ( \" + StringUtils.join(searchFields.iterator(), like + \" or \") + like + \" )\";\n                where += searchWhere;\n            }\n        }\n\n        Field primaryField = relatedEntity.getPrimaryField();\n        Field namedField = relatedEntity.getNameField();\n\n        StringBuilder sql = new StringBuilder(\"select \");\n        if (count) {\n            sql.append(\"count(\").append(primaryField.getName()).append(\")\");\n        } else {\n            sql.append(primaryField.getName()).append(\",\")\n                    .append(namedField.getName()).append(\",\")\n                    .append(EntityHelper.ModifiedOn);\n\n            if (MetadataHelper.hasApprovalField(relatedEntity)) {\n                sql.append(\",\").append(EntityHelper.ApprovalState);\n            }\n        }\n\n        sql.append(\" from \").append(relatedEntity.getName()).append(\" where \").append(where);\n        return sql.toString();\n    }",
  "abstract_func_before": "private String buildBaseSql(ID VAR_0, String VAR_1, String VAR_2, boolean VAR_3, ID VAR_4) {\n        /* COMMENT_0 */\n        Entity VAR_5 = VAR_6.getEntity(VAR_1.split(\"\\\\.\")[0]);\n\n        String VAR_7 = new ProtocolFilterParser(null).parseRelated(VAR_1, VAR_0);\n\n        /* COMMENT_1 */\n        if (VAR_5.getEntityCode() == VAR_8.Feeds) {\n            VAR_7 += VAR_9.format(\" and (type = %d or type = %d)\",\n                    VAR_10.FOLLOWUP.getMask(),\n                    VAR_10.SCHEDULE.getMask());\n\n            List<String> VAR_11 = new ArrayList<>();\n            VAR_11.add(\"scope = 'ALL'\");\n            for (Team VAR_12 : VAR_13.getUserStore().getUser(VAR_4).getOwningTeams()) {\n                VAR_11.add(VAR_9.format(\"scope = '%s'\", VAR_12.getIdentity()));\n            }\n            VAR_7 += \" and ( \" + VAR_14.join(VAR_11, \" or \") + \" )\";\n        }\n\n        if (VAR_14.isNotBlank(VAR_2)) {\n            Set<String> VAR_15 = VAR_16.buildQuickFields(VAR_5, null);\n\n            if (!VAR_15.isEmpty()) {\n                String VAR_17 = \" like '%\" + VAR_18.escapeSql(VAR_2) + \"%'\";\n                String VAR_19 = \" and ( \" + VAR_14.join(VAR_15.iterator(), VAR_17 + \" or \") + VAR_17 + \" )\";\n                VAR_7 += VAR_19;\n            }\n        }\n\n        Field VAR_20 = VAR_5.getPrimaryField();\n        Field VAR_21 = VAR_5.getNameField();\n\n        StringBuilder VAR_22 = new StringBuilder(\"select \");\n        if (VAR_3) {\n            VAR_22.append(\"count(\").append(VAR_20.getName()).append(\")\");\n        } else {\n            VAR_22.append(VAR_20.getName()).append(\",\")\n                    .append(VAR_21.getName()).append(\",\")\n                    .append(VAR_8.ModifiedOn);\n\n            if (VAR_6.hasApprovalField(VAR_5)) {\n                VAR_22.append(\",\").append(VAR_8.ApprovalState);\n            }\n        }\n\n        VAR_22.append(\" from \").append(VAR_5.getName()).append(\" where \").append(VAR_7);\n        return VAR_22.toString();\n    }",
  "func_graph_path_before": "getrebuild/rebuild/c9474f84e5f376dd2ade2078e3039961a9425da7/RelatedListController.java/vul/before/0.json",
  "func": "private String buildBaseSql(ID mainid, String relatedExpr, String q, boolean count, ID user) {\n        // format: Entity.Field\n        Entity relatedEntity = MetadataHelper.getEntity(relatedExpr.split(\"\\\\.\")[0]);\n\n        String where = new ProtocolFilterParser(null).parseRelated(relatedExpr, mainid);\n\n        // @see FeedsListController#fetchFeeds\n        if (relatedEntity.getEntityCode() == EntityHelper.Feeds) {\n            where += String.format(\" and (type = %d or type = %d)\",\n                    FeedsType.FOLLOWUP.getMask(),\n                    FeedsType.SCHEDULE.getMask());\n\n            List<String> in = new ArrayList<>();\n            in.add(\"scope = 'ALL'\");\n            for (Team t : Application.getUserStore().getUser(user).getOwningTeams()) {\n                in.add(String.format(\"scope = '%s'\", t.getIdentity()));\n            }\n            where += \" and ( \" + StringUtils.join(in, \" or \") + \" )\";\n        }\n\n        if (StringUtils.isNotBlank(q)) {\n            Set<String> searchFields = ParseHelper.buildQuickFields(relatedEntity, null);\n\n            if (!searchFields.isEmpty()) {\n                String like = \" like '%\" + CommonsUtils.escapeSql(q) + \"%'\";\n                String searchWhere = \" and ( \" + StringUtils.join(searchFields.iterator(), like + \" or \") + like + \" )\";\n                where += searchWhere;\n            }\n        }\n\n        Field primaryField = relatedEntity.getPrimaryField();\n        Field namedField = relatedEntity.getNameField();\n\n        StringBuilder sql = new StringBuilder(\"select \");\n        if (count) {\n            sql.append(\"count(\").append(primaryField.getName()).append(\")\");\n        } else {\n            sql.append(primaryField.getName()).append(\",\")\n                    .append(namedField.getName()).append(\",\")\n                    .append(EntityHelper.ModifiedOn);\n\n            if (MetadataHelper.hasApprovalField(relatedEntity)) {\n                sql.append(\",\").append(EntityHelper.ApprovalState);\n            }\n        }\n\n        sql.append(\" from \").append(relatedEntity.getName()).append(\" where \").append(where);\n        return sql.toString();\n    }",
  "abstract_func": "private String buildBaseSql(ID VAR_0, String VAR_1, String VAR_2, boolean VAR_3, ID VAR_4) {\n        /* COMMENT_0 */\n        Entity VAR_5 = VAR_6.getEntity(VAR_1.split(\"\\\\.\")[0]);\n\n        String VAR_7 = new ProtocolFilterParser(null).parseRelated(VAR_1, VAR_0);\n\n        /* COMMENT_1 */\n        if (VAR_5.getEntityCode() == VAR_8.Feeds) {\n            VAR_7 += VAR_9.format(\" and (type = %d or type = %d)\",\n                    VAR_10.FOLLOWUP.getMask(),\n                    VAR_10.SCHEDULE.getMask());\n\n            List<String> VAR_11 = new ArrayList<>();\n            VAR_11.add(\"scope = 'ALL'\");\n            for (Team VAR_12 : VAR_13.getUserStore().getUser(VAR_4).getOwningTeams()) {\n                VAR_11.add(VAR_9.format(\"scope = '%s'\", VAR_12.getIdentity()));\n            }\n            VAR_7 += \" and ( \" + VAR_14.join(VAR_11, \" or \") + \" )\";\n        }\n\n        if (VAR_14.isNotBlank(VAR_2)) {\n            Set<String> VAR_15 = VAR_16.buildQuickFields(VAR_5, null);\n\n            if (!VAR_15.isEmpty()) {\n                String VAR_17 = \" like '%\" + VAR_18.escapeSql(VAR_2) + \"%'\";\n                String VAR_19 = \" and ( \" + VAR_14.join(VAR_15.iterator(), VAR_17 + \" or \") + VAR_17 + \" )\";\n                VAR_7 += VAR_19;\n            }\n        }\n\n        Field VAR_20 = VAR_5.getPrimaryField();\n        Field VAR_21 = VAR_5.getNameField();\n\n        StringBuilder VAR_22 = new StringBuilder(\"select \");\n        if (VAR_3) {\n            VAR_22.append(\"count(\").append(VAR_20.getName()).append(\")\");\n        } else {\n            VAR_22.append(VAR_20.getName()).append(\",\")\n                    .append(VAR_21.getName()).append(\",\")\n                    .append(VAR_8.ModifiedOn);\n\n            if (VAR_6.hasApprovalField(VAR_5)) {\n                VAR_22.append(\",\").append(VAR_8.ApprovalState);\n            }\n        }\n\n        VAR_22.append(\" from \").append(VAR_5.getName()).append(\" where \").append(VAR_7);\n        return VAR_22.toString();\n    }",
  "func_graph_path": "getrebuild/rebuild/c9474f84e5f376dd2ade2078e3039961a9425da7/RelatedListController.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -22,7 +22,7 @@\n             Set<String> searchFields = ParseHelper.buildQuickFields(relatedEntity, null);\n \n             if (!searchFields.isEmpty()) {\n-                String like = \" like '%\" + StringEscapeUtils.escapeSql(q) + \"%'\";\n+                String like = \" like '%\" + CommonsUtils.escapeSql(q) + \"%'\";\n                 String searchWhere = \" and ( \" + StringUtils.join(searchFields.iterator(), like + \" or \") + like + \" )\";\n                 where += searchWhere;\n             }",
  "diff_line_info": {
    "deleted_lines": [
      "                String like = \" like '%\" + StringEscapeUtils.escapeSql(q) + \"%'\";"
    ],
    "added_lines": [
      "                String like = \" like '%\" + CommonsUtils.escapeSql(q) + \"%'\";"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/getrebuild/rebuild/pull/595",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/getrebuild/rebuild/pull/595: 403 Client Error: Forbidden for url: https://api.github.com/repos/getrebuild/rebuild/pulls/595",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 1.0"
}