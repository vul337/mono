{
  "cve_id": "CVE-2021-21430",
  "cwe_ids": [
    "CWE-668"
  ],
  "cvss_vector": "AV:L/AC:L/Au:N/C:P/I:N/A:N",
  "cvss_is_v3": false,
  "repo_name": "OpenAPITools/openapi-generator",
  "commit_msg": "use Files.createTempFile",
  "commit_hash": "2c576483f26f85b3979c6948a131f585c237109a",
  "git_url": "https://github.com/OpenAPITools/openapi-generator/commit/2c576483f26f85b3979c6948a131f585c237109a",
  "file_path": "samples/openapi3/client/petstore/java/jersey2-java8/src/main/java/org/openapitools/client/ApiClient.java",
  "func_name": "prepareDownloadFile",
  "func_before": "public File prepareDownloadFile(Response response) throws IOException {\n    String filename = null;\n    String contentDisposition = (String) response.getHeaders().getFirst(\"Content-Disposition\");\n    if (contentDisposition != null && !\"\".equals(contentDisposition)) {\n      // Get filename from the Content-Disposition header.\n      Pattern pattern = Pattern.compile(\"filename=['\\\"]?([^'\\\"\\\\s]+)['\\\"]?\");\n      Matcher matcher = pattern.matcher(contentDisposition);\n      if (matcher.find())\n        filename = matcher.group(1);\n    }\n\n    String prefix;\n    String suffix = null;\n    if (filename == null) {\n      prefix = \"download-\";\n      suffix = \"\";\n    } else {\n      int pos = filename.lastIndexOf('.');\n      if (pos == -1) {\n        prefix = filename + \"-\";\n      } else {\n        prefix = filename.substring(0, pos) + \"-\";\n        suffix = filename.substring(pos);\n      }\n      // File.createTempFile requires the prefix to be at least three characters long\n      if (prefix.length() < 3)\n        prefix = \"download-\";\n    }\n\n    if (tempFolderPath == null)\n      return File.createTempFile(prefix, suffix);\n    else\n      return File.createTempFile(prefix, suffix, new File(tempFolderPath));\n  }",
  "abstract_func_before": "public File prepareDownloadFile(Response VAR_0) throws IOException {\n    String VAR_1 = null;\n    String VAR_2 = (String) VAR_0.getHeaders().getFirst(\"Content-Disposition\");\n    if (VAR_2 != null && !\"\".equals(VAR_2)) {\n      /* COMMENT_0 */\n      Pattern VAR_3 = VAR_4.compile(\"filename=['\\\"]?([^'\\\"\\\\s]+)['\\\"]?\");\n      Matcher VAR_5 = VAR_3.matcher(VAR_2);\n      if (VAR_5.find())\n        VAR_1 = VAR_5.group(1);\n    }\n\n    String VAR_6;\n    String VAR_7 = null;\n    if (VAR_1 == null) {\n      VAR_6 = \"download-\";\n      VAR_7 = \"\";\n    } else {\n      int VAR_8 = VAR_1.lastIndexOf('.');\n      if (VAR_8 == -1) {\n        VAR_6 = VAR_1 + \"-\";\n      } else {\n        VAR_6 = VAR_1.substring(0, VAR_8) + \"-\";\n        VAR_7 = VAR_1.substring(VAR_8);\n      }\n      /* COMMENT_1 */\n      if (VAR_6.length() < 3)\n        VAR_6 = \"download-\";\n    }\n\n    if (VAR_9 == null)\n      return VAR_10.createTempFile(VAR_6, VAR_7);\n    else\n      return VAR_10.createTempFile(VAR_6, VAR_7, new File(VAR_9));\n  }",
  "func_graph_path_before": "OpenAPITools/openapi-generator/2c576483f26f85b3979c6948a131f585c237109a/ApiClient.java/vul/before/0.json",
  "func": "public File prepareDownloadFile(Response response) throws IOException {\n    String filename = null;\n    String contentDisposition = (String) response.getHeaders().getFirst(\"Content-Disposition\");\n    if (contentDisposition != null && !\"\".equals(contentDisposition)) {\n      // Get filename from the Content-Disposition header.\n      Pattern pattern = Pattern.compile(\"filename=['\\\"]?([^'\\\"\\\\s]+)['\\\"]?\");\n      Matcher matcher = pattern.matcher(contentDisposition);\n      if (matcher.find())\n        filename = matcher.group(1);\n    }\n\n    String prefix;\n    String suffix = null;\n    if (filename == null) {\n      prefix = \"download-\";\n      suffix = \"\";\n    } else {\n      int pos = filename.lastIndexOf('.');\n      if (pos == -1) {\n        prefix = filename + \"-\";\n      } else {\n        prefix = filename.substring(0, pos) + \"-\";\n        suffix = filename.substring(pos);\n      }\n      // Files.createTempFile requires the prefix to be at least three characters long\n      if (prefix.length() < 3)\n        prefix = \"download-\";\n    }\n\n    if (tempFolderPath == null)\n      return Files.createTempFile(prefix, suffix).toFile();\n    else\n      return Files.createTempFile(Paths.get(tempFolderPath), prefix, suffix).toFile();\n  }",
  "abstract_func": "public File prepareDownloadFile(Response VAR_0) throws IOException {\n    String VAR_1 = null;\n    String VAR_2 = (String) VAR_0.getHeaders().getFirst(\"Content-Disposition\");\n    if (VAR_2 != null && !\"\".equals(VAR_2)) {\n      /* COMMENT_0 */\n      Pattern VAR_3 = VAR_4.compile(\"filename=['\\\"]?([^'\\\"\\\\s]+)['\\\"]?\");\n      Matcher VAR_5 = VAR_3.matcher(VAR_2);\n      if (VAR_5.find())\n        VAR_1 = VAR_5.group(1);\n    }\n\n    String VAR_6;\n    String VAR_7 = null;\n    if (VAR_1 == null) {\n      VAR_6 = \"download-\";\n      VAR_7 = \"\";\n    } else {\n      int VAR_8 = VAR_1.lastIndexOf('.');\n      if (VAR_8 == -1) {\n        VAR_6 = VAR_1 + \"-\";\n      } else {\n        VAR_6 = VAR_1.substring(0, VAR_8) + \"-\";\n        VAR_7 = VAR_1.substring(VAR_8);\n      }\n      /* COMMENT_1 */\n      if (VAR_6.length() < 3)\n        VAR_6 = \"download-\";\n    }\n\n    if (VAR_9 == null)\n      return VAR_10.createTempFile(VAR_6, VAR_7).toFile();\n    else\n      return VAR_10.createTempFile(VAR_11.get(VAR_9), VAR_6, VAR_7).toFile();\n  }",
  "func_graph_path": "OpenAPITools/openapi-generator/2c576483f26f85b3979c6948a131f585c237109a/ApiClient.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -22,13 +22,13 @@\n         prefix = filename.substring(0, pos) + \"-\";\n         suffix = filename.substring(pos);\n       }\n-      // File.createTempFile requires the prefix to be at least three characters long\n+      // Files.createTempFile requires the prefix to be at least three characters long\n       if (prefix.length() < 3)\n         prefix = \"download-\";\n     }\n \n     if (tempFolderPath == null)\n-      return File.createTempFile(prefix, suffix);\n+      return Files.createTempFile(prefix, suffix).toFile();\n     else\n-      return File.createTempFile(prefix, suffix, new File(tempFolderPath));\n+      return Files.createTempFile(Paths.get(tempFolderPath), prefix, suffix).toFile();\n   }",
  "diff_line_info": {
    "deleted_lines": [
      "      // File.createTempFile requires the prefix to be at least three characters long",
      "      return File.createTempFile(prefix, suffix);",
      "      return File.createTempFile(prefix, suffix, new File(tempFolderPath));"
    ],
    "added_lines": [
      "      // Files.createTempFile requires the prefix to be at least three characters long",
      "      return Files.createTempFile(prefix, suffix).toFile();",
      "      return Files.createTempFile(Paths.get(tempFolderPath), prefix, suffix).toFile();"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/OpenAPITools/openapi-generator/pull/8787",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/OpenAPITools/openapi-generator/pull/8787: 403 Client Error: Forbidden for url: https://api.github.com/repos/OpenAPITools/openapi-generator/pulls/8787",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 1.0"
}