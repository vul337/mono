{
  "cve_id": "CVE-2020-27793",
  "cwe_ids": [
    "CWE-193"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
  "cvss_is_v3": true,
  "repo_name": "radareorg/radare2",
  "commit_msg": "Fix unmatched array length in core_java.c (issue #16304) (#16313)",
  "commit_hash": "ced0223c7a1b3b5344af315715cd28fe7c0d9ebc",
  "git_url": "https://github.com/radareorg/radare2/commit/ced0223c7a1b3b5344af315715cd28fe7c0d9ebc",
  "file_path": "libr/core/p/core_java.c",
  "func_name": "r_cmd_java_call",
  "func_before": "static int r_cmd_java_call(void *user, const char *input) {\n\tRCore *core = (RCore *) user;\n\tint res = false;\n\tut32 i = 0;\n\tif (strncmp (input, \"java\", 4)) {\n\t\treturn false;\n\t}\n\tif (input[4] != ' ') {\n\t\treturn r_cmd_java_handle_help (core, input);\n\t}\n\tfor (; i < END_CMDS; i++) {\n\t\t//IFDBG r_cons_printf (\"Checking cmd: %s %d %s\\n\", JAVA_CMDS[i].name, JAVA_CMDS[i].name_len, p);\n\t\tIFDBG r_cons_printf (\"Checking cmd: %s %d\\n\", JAVA_CMDS[i].name,\n\t\t\tstrncmp (input+5, JAVA_CMDS[i].name, JAVA_CMDS[i].name_len));\n\t\tif (!strncmp (input + 5, JAVA_CMDS[i].name, JAVA_CMDS[i].name_len)) {\n\t\t\tconst char *cmd = input + 5 + JAVA_CMDS[i].name_len;\n\t\t\tif (*cmd && *cmd == ' ') {\n\t\t\t\tcmd++;\n\t\t\t}\n\t\t\t//IFDBG r_cons_printf (\"Executing cmd: %s (%s)\\n\", JAVA_CMDS[i].name, cmd+5+JAVA_CMDS[i].name_len );\n\t\t\tres =  JAVA_CMDS[i].handler (core, cmd);\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (!res) {\n\t\treturn r_cmd_java_handle_help (core, input);\n\t}\n\treturn true;\n}",
  "abstract_func_before": "static int r_cmd_java_call(void *VAR_0, const char *VAR_1) {\n\tRCore *VAR_2 = (RCore *) VAR_0;\n\tint VAR_3 = false;\n\tut32 VAR_4 = 0;\n\tif (strncmp (VAR_1, \"java\", 4)) {\n\t\treturn false;\n\t}\n\tif (VAR_1[4] != ' ') {\n\t\treturn r_cmd_java_handle_help (VAR_2, VAR_1);\n\t}\n\tfor (; VAR_4 < VAR_5; VAR_4++) {\n\t\t/* COMMENT_0 */\n\t\tIFDBG VAR_6 (\"Checking cmd: %s %d\\n\", VAR_7[VAR_4].name,\n\t\t\tstrncmp (VAR_1+5, VAR_7[VAR_4].name, VAR_7[VAR_4].name_len));\n\t\tif (!strncmp (VAR_1 + 5, VAR_7[VAR_4].name, VAR_7[VAR_4].name_len)) {\n\t\t\tconst char *VAR_8 = VAR_1 + 5 + VAR_7[VAR_4].name_len;\n\t\t\tif (*VAR_8 && *VAR_8 == ' ') {\n\t\t\t\tVAR_8++;\n\t\t\t}\n\t\t\t/* COMMENT_1 */\n\t\t\tVAR_3 =  VAR_7[VAR_4].handler (VAR_2, VAR_8);\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (!VAR_3) {\n\t\treturn r_cmd_java_handle_help (VAR_2, VAR_1);\n\t}\n\treturn true;\n}",
  "func_graph_path_before": "radareorg/radare2/ced0223c7a1b3b5344af315715cd28fe7c0d9ebc/core_java.c/vul/before/0.json",
  "func": "static int r_cmd_java_call(void *user, const char *input) {\n\tRCore *core = (RCore *) user;\n\tint res = false;\n\tut32 i = 0;\n\tif (strncmp (input, \"java\", 4)) {\n\t\treturn false;\n\t}\n\tif (input[4] != ' ') {\n\t\treturn r_cmd_java_handle_help (core, input);\n\t}\n\tfor (; i < END_CMDS - 1; i++) {\n\t\t//IFDBG r_cons_printf (\"Checking cmd: %s %d %s\\n\", JAVA_CMDS[i].name, JAVA_CMDS[i].name_len, p);\n\t\tIFDBG r_cons_printf (\"Checking cmd: %s %d\\n\", JAVA_CMDS[i].name,\n\t\t\tstrncmp (input+5, JAVA_CMDS[i].name, JAVA_CMDS[i].name_len));\n\t\tif (!strncmp (input + 5, JAVA_CMDS[i].name, JAVA_CMDS[i].name_len)) {\n\t\t\tconst char *cmd = input + 5 + JAVA_CMDS[i].name_len;\n\t\t\tif (*cmd && *cmd == ' ') {\n\t\t\t\tcmd++;\n\t\t\t}\n\t\t\t//IFDBG r_cons_printf (\"Executing cmd: %s (%s)\\n\", JAVA_CMDS[i].name, cmd+5+JAVA_CMDS[i].name_len );\n\t\t\tres =  JAVA_CMDS[i].handler (core, cmd);\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (!res) {\n\t\treturn r_cmd_java_handle_help (core, input);\n\t}\n\treturn true;\n}",
  "abstract_func": "static int r_cmd_java_call(void *VAR_0, const char *VAR_1) {\n\tRCore *VAR_2 = (RCore *) VAR_0;\n\tint VAR_3 = false;\n\tut32 VAR_4 = 0;\n\tif (strncmp (VAR_1, \"java\", 4)) {\n\t\treturn false;\n\t}\n\tif (VAR_1[4] != ' ') {\n\t\treturn r_cmd_java_handle_help (VAR_2, VAR_1);\n\t}\n\tfor (; VAR_4 < VAR_5 - 1; VAR_4++) {\n\t\t/* COMMENT_0 */\n\t\tIFDBG VAR_6 (\"Checking cmd: %s %d\\n\", VAR_7[VAR_4].name,\n\t\t\tstrncmp (VAR_1+5, VAR_7[VAR_4].name, VAR_7[VAR_4].name_len));\n\t\tif (!strncmp (VAR_1 + 5, VAR_7[VAR_4].name, VAR_7[VAR_4].name_len)) {\n\t\t\tconst char *VAR_8 = VAR_1 + 5 + VAR_7[VAR_4].name_len;\n\t\t\tif (*VAR_8 && *VAR_8 == ' ') {\n\t\t\t\tVAR_8++;\n\t\t\t}\n\t\t\t/* COMMENT_1 */\n\t\t\tVAR_3 =  VAR_7[VAR_4].handler (VAR_2, VAR_8);\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (!VAR_3) {\n\t\treturn r_cmd_java_handle_help (VAR_2, VAR_1);\n\t}\n\treturn true;\n}",
  "func_graph_path": "radareorg/radare2/ced0223c7a1b3b5344af315715cd28fe7c0d9ebc/core_java.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -8,7 +8,7 @@\n \tif (input[4] != ' ') {\n \t\treturn r_cmd_java_handle_help (core, input);\n \t}\n-\tfor (; i < END_CMDS; i++) {\n+\tfor (; i < END_CMDS - 1; i++) {\n \t\t//IFDBG r_cons_printf (\"Checking cmd: %s %d %s\\n\", JAVA_CMDS[i].name, JAVA_CMDS[i].name_len, p);\n \t\tIFDBG r_cons_printf (\"Checking cmd: %s %d\\n\", JAVA_CMDS[i].name,\n \t\t\tstrncmp (input+5, JAVA_CMDS[i].name, JAVA_CMDS[i].name_len));",
  "diff_line_info": {
    "deleted_lines": [
      "\tfor (; i < END_CMDS; i++) {"
    ],
    "added_lines": [
      "\tfor (; i < END_CMDS - 1; i++) {"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/radareorg/radare2/pull/16313",
  "description": {
    "pr_info": {
      "title": "Fix unmatched array length in core_java.c (issue #16304)",
      "number": 16313
    },
    "comment": [
      " <!-- Filling this template is mandatory -->\r\n\r\n**Your checklist for this pull request**\r\n- [x] I've read the [guidelines for contributing](https://github.com/radareorg/radare2/blob/master/DEVELOPERS.md) to this repository\r\n- [x] I made sure to follow the project's [coding style](https://github.com/radareorg/radare2/blob/master/DEVELOPERS.md#code-style)\r\n- [ ] I've added tests that prove my fix is effective or that my feature works (if possible)\r\n- [ ] I've updated the documentation and the [radare2 book](https://github.com/radareorg/radare2book) with the relevant information (if needed)\r\n\r\n**Detailed description**\r\n\r\n<!-- Explain the **details** for making this change. Is a new feature implemented? What existing problem does the pull request solve? How does the pull request solve these issues? Please provide enough information so that others can review your pull request. -->\r\n\r\nEND_CMDS has value of 21, while JAVA_CMDS[] has length of 21, which means using JAVA_CMDS[21] in line 1478 would lead to a segment fault.\r\nAfter decrement the value in for loop by 1, the problem was fixed, running \"java any_unsupport_commamds\" will show the help message\r\n\r\n**Before**\r\n![image](https://user-images.githubusercontent.com/30727682/77617418-19048100-6f6f-11ea-8427-7aa55288b638.png)\r\n\r\n**After**\r\n![image](https://user-images.githubusercontent.com/30727682/77617465-39344000-6f6f-11ea-82b1-818071826caa.png)\r\n\r\n**Closing issues**\r\n\r\n<!-- put \"closes #XXXX\" in your comment to auto-close the issue that your PR fixes (if any). -->\r\n\r\nCloses #16304\r\n"
    ]
  },
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Defect Remediation & Feature Upgrades; **Confidence:** 0.9  \n\nThe analysis shows that the patch addresses an off-by-one error causing a segmentation fault, which is a bug fix rather than a security vulnerability. Although buffer overflows can be security issues, the description focuses on preventing a crash, falling under defect remediation. The confidence is high due to clear code changes but slightly reduced as it's not explicitly a security fix."
}