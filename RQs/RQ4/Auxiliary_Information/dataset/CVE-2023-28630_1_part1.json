{
  "cve_id": "CVE-2023-28630",
  "cwe_ids": [
    "CWE-532"
  ],
  "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:H/UI:N/S:U/C:H/I:N/A:N",
  "cvss_is_v3": true,
  "repo_name": "gocd",
  "commit_msg": "Improve error messages on failure to launch backup process\n\nztexec can include env vars in the error message which we don't want in this case.",
  "commit_hash": "6545481e7b36817dd6033bf614585a8db242070d",
  "git_url": "https://github.com/gocd/gocd/commit/6545481e7b36817dd6033bf614585a8db242070d",
  "file_path": "db-support/db-support-postgresql/src/main/java/com/thoughtworks/go/server/database/pg/PostgresqlBackupProcessor.java",
  "func_name": "backup",
  "func_before": "@Override\n    public void backup(File targetDir, DataSource dataSource, DbProperties dbProperties) throws Exception {\n        ProcessResult processResult = createProcessExecutor(targetDir, dbProperties).execute();\n\n        if (processResult.getExitValue() == 0) {\n            log.info(\"PostgreSQL backup finished successfully.\");\n        } else {\n            log.warn(\"There was an error backing up the database using `pg_dump`. The `pg_dump` process exited with status code {}.\", processResult.getExitValue());\n            throw new RuntimeException(\"There was an error backing up the database using `pg_dump`. The `pg_dump` process exited with status code \" + processResult.getExitValue() +\n                    \". Please see the server logs for more errors.\");\n\n        }\n    }",
  "abstract_func_before": "@Override\n    public void backup(File VAR_0, DataSource VAR_1, DbProperties VAR_2) throws Exception {\n        ProcessResult VAR_3 = createProcessExecutor(VAR_0, VAR_2).execute();\n\n        if (VAR_3.getExitValue() == 0) {\n            VAR_4.info(\"PostgreSQL backup finished successfully.\");\n        } else {\n            VAR_4.warn(\"There was an error backing up the database using `pg_dump`. The `pg_dump` process exited with status code {}.\", VAR_3.getExitValue());\n            throw new RuntimeException(\"There was an error backing up the database using `pg_dump`. The `pg_dump` process exited with status code \" + VAR_3.getExitValue() +\n                    \". Please see the server logs for more errors.\");\n\n        }\n    }",
  "func_graph_path_before": "gocd/6545481e7b36817dd6033bf614585a8db242070d/PostgresqlBackupProcessor.java/vul/before/0.json",
  "func": "@Override\n    public void backup(File targetDir, DataSource dataSource, DbProperties dbProperties) throws Exception {\n        try {\n            ProcessResult processResult = createProcessExecutor(targetDir, dbProperties).execute();\n\n            if (processResult.getExitValue() == 0) {\n                log.info(\"PostgreSQL backup finished successfully.\");\n            } else {\n                throwBackupError(COMMAND, processResult.getExitValue());\n            }\n        } catch (ProcessInitException e) {\n            throwBackupError(COMMAND, e.getErrorCode(), e.getCause());\n        }\n    }",
  "abstract_func": "@Override\n    public void backup(File VAR_0, DataSource VAR_1, DbProperties VAR_2) throws Exception {\n        try {\n            ProcessResult VAR_3 = createProcessExecutor(VAR_0, VAR_2).execute();\n\n            if (VAR_3.getExitValue() == 0) {\n                VAR_4.info(\"PostgreSQL backup finished successfully.\");\n            } else {\n                throwBackupError(VAR_5, VAR_3.getExitValue());\n            }\n        } catch (ProcessInitException VAR_6) {\n            throwBackupError(VAR_5, VAR_6.getErrorCode(), VAR_6.getCause());\n        }\n    }",
  "func_graph_path": "gocd/6545481e7b36817dd6033bf614585a8db242070d/PostgresqlBackupProcessor.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,13 +1,14 @@\n @Override\n     public void backup(File targetDir, DataSource dataSource, DbProperties dbProperties) throws Exception {\n-        ProcessResult processResult = createProcessExecutor(targetDir, dbProperties).execute();\n+        try {\n+            ProcessResult processResult = createProcessExecutor(targetDir, dbProperties).execute();\n \n-        if (processResult.getExitValue() == 0) {\n-            log.info(\"PostgreSQL backup finished successfully.\");\n-        } else {\n-            log.warn(\"There was an error backing up the database using `pg_dump`. The `pg_dump` process exited with status code {}.\", processResult.getExitValue());\n-            throw new RuntimeException(\"There was an error backing up the database using `pg_dump`. The `pg_dump` process exited with status code \" + processResult.getExitValue() +\n-                    \". Please see the server logs for more errors.\");\n-\n+            if (processResult.getExitValue() == 0) {\n+                log.info(\"PostgreSQL backup finished successfully.\");\n+            } else {\n+                throwBackupError(COMMAND, processResult.getExitValue());\n+            }\n+        } catch (ProcessInitException e) {\n+            throwBackupError(COMMAND, e.getErrorCode(), e.getCause());\n         }\n     }",
  "diff_line_info": {
    "deleted_lines": [
      "        ProcessResult processResult = createProcessExecutor(targetDir, dbProperties).execute();",
      "        if (processResult.getExitValue() == 0) {",
      "            log.info(\"PostgreSQL backup finished successfully.\");",
      "        } else {",
      "            log.warn(\"There was an error backing up the database using `pg_dump`. The `pg_dump` process exited with status code {}.\", processResult.getExitValue());",
      "            throw new RuntimeException(\"There was an error backing up the database using `pg_dump`. The `pg_dump` process exited with status code \" + processResult.getExitValue() +",
      "                    \". Please see the server logs for more errors.\");",
      ""
    ],
    "added_lines": [
      "        try {",
      "            ProcessResult processResult = createProcessExecutor(targetDir, dbProperties).execute();",
      "            if (processResult.getExitValue() == 0) {",
      "                log.info(\"PostgreSQL backup finished successfully.\");",
      "            } else {",
      "                throwBackupError(COMMAND, processResult.getExitValue());",
      "            }",
      "        } catch (ProcessInitException e) {",
      "            throwBackupError(COMMAND, e.getErrorCode(), e.getCause());"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/gocd/gocd/pull/11047",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/gocd/gocd/pull/11047: 403 Client Error: Forbidden for url: https://api.github.com/repos/gocd/gocd/pulls/11047",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 1.0\n\n**Step-by-Step Explanation:**\n\n1. **Input Analysis:** The commit message and vulnerability description both address the issue of including env vars in error messages, which is a security concern. The code changes modify how backup errors are handled, specifically removing the problematic details.\n\n2. **Consistency Check:** The commit message accurately reflects the code changes, focusing on error message improvements.\n\n3. **Purpose Evaluation:** The patch modifies the core logic to prevent sensitive data exposure in error messages.\n\n4. **Security Vulnerability Assessment:** This addresses an externally exploitable weakness by stopping the inclusion of sensitive environment variables in error messages, which is a security risk.\n\n5. **Confidence Scoring:** 1.0 because all information is clear and the code changes directly fix the security issue.\n\n**Final Classification:** Security Vulnerability Fix; Confidence: 1.0"
}