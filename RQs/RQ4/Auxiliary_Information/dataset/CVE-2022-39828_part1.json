{
  "cve_id": "CVE-2022-39828",
  "cwe_ids": [
    "CWE-Other",
    "CWE-476"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
  "cvss_is_v3": true,
  "repo_name": "Samsung/mTower",
  "commit_msg": "Fixed: lacking a check for the return value and NULL Pointer Dereference\n\nSigned-off-by: Taras Drozdovskyi <t.drozdovsky@samsung.com>",
  "commit_hash": "b7dc202233026653c682c8fb4fe1251ca5056003",
  "git_url": "https://github.com/Samsung/mTower/commit/b7dc202233026653c682c8fb4fe1251ca5056003",
  "file_path": "tools/ecdsa_keygen.c",
  "func_name": "aes256_encrypt",
  "func_before": "Message *aes256_encrypt(Message * plaintext)\n{\n  EVP_CIPHER_CTX *enc_ctx;\n  Message * encrypted_message;\n  int enc_length = *(plaintext->length)\n      + (AES_BLOCK_SIZE - *(plaintext->length) % AES_BLOCK_SIZE);\n\n  encrypted_message = message_init(enc_length);\n  //set up encryption context\n  enc_ctx = EVP_CIPHER_CTX_new();\n  EVP_EncryptInit(enc_ctx, EVP_aes_256_cfb(), plaintext->aes_settings->key,\n      plaintext->aes_settings->iv);\n  //encrypt all the bytes up to but not including the last block\n  if (!EVP_EncryptUpdate(enc_ctx, encrypted_message->body, &enc_length,\n      plaintext->body, *plaintext->length))\n  {\n    EVP_CIPHER_CTX_cleanup(enc_ctx);\n    printf(\"EVP Error: couldn't update encryption with plain text!\\n\");\n    return NULL;\n  }\n  //update length with the amount of bytes written\n  *(encrypted_message->length) = enc_length;\n  //EncryptFinal will cipher the last block + Padding\n  if (!EVP_EncryptFinal_ex(enc_ctx, enc_length + encrypted_message->body,\n      &enc_length))\n  {\n    EVP_CIPHER_CTX_cleanup(enc_ctx);\n    printf(\"EVP Error: couldn't finalize encryption!\\n\");\n    return NULL;\n  }\n  //add padding to length\n  *(encrypted_message->length) += enc_length;\n  //no errors, copy over key & iv rather than pointing to the plaintext msg\n  memcpy(encrypted_message->aes_settings->key, plaintext->aes_settings->key,\n      AES_KEY_SIZE);\n  memcpy(encrypted_message->aes_settings->iv, plaintext->aes_settings->iv,\n      AES_KEY_SIZE / 2);\n  //Free context and return encrypted message\n  EVP_CIPHER_CTX_cleanup(enc_ctx);\n  return encrypted_message;\n}",
  "abstract_func_before": "Message *aes256_encrypt(Message * VAR_0)\n{\n  EVP_CIPHER_CTX *VAR_1;\n  Message * VAR_2;\n  int VAR_3 = *(VAR_0->length)\n      + (VAR_4 - *(VAR_0->length) % VAR_4);\n\n  VAR_2 = message_init(VAR_3);\n  /* COMMENT_0 */\n  VAR_1 = EVP_CIPHER_CTX_new();\n  EVP_EncryptInit(VAR_1, EVP_aes_256_cfb(), VAR_0->aes_settings->key,\n      VAR_0->aes_settings->iv);\n  /* COMMENT_1 */\n  if (!EVP_EncryptUpdate(VAR_1, VAR_2->body, &VAR_3,\n      VAR_0->body, *VAR_0->length))\n  {\n    EVP_CIPHER_CTX_cleanup(VAR_1);\n    printf(\"EVP Error: couldn't update encryption with plain text!\\n\");\n    return NULL;\n  }\n  /* COMMENT_2 */\n  *(VAR_2->length) = VAR_3;\n  /* COMMENT_3 */\n  if (!EVP_EncryptFinal_ex(VAR_1, VAR_3 + VAR_2->body,\n      &VAR_3))\n  {\n    EVP_CIPHER_CTX_cleanup(VAR_1);\n    printf(\"EVP Error: couldn't finalize encryption!\\n\");\n    return NULL;\n  }\n  /* COMMENT_4 */\n  *(VAR_2->length) += VAR_3;\n  /* COMMENT_5 */\n  memcpy(VAR_2->aes_settings->key, VAR_0->aes_settings->key,\n      VAR_5);\n  memcpy(VAR_2->aes_settings->iv, VAR_0->aes_settings->iv,\n      VAR_5 / 2);\n  /* COMMENT_6 */\n  EVP_CIPHER_CTX_cleanup(VAR_1);\n  return VAR_2;\n}",
  "func_graph_path_before": "Samsung/mTower/b7dc202233026653c682c8fb4fe1251ca5056003/ecdsa_keygen.c/vul/before/0.json",
  "func": "Message *aes256_encrypt(Message * plaintext)\n{\n  EVP_CIPHER_CTX *enc_ctx;\n  Message * encrypted_message;\n  int enc_length = *(plaintext->length)\n      + (AES_BLOCK_SIZE - *(plaintext->length) % AES_BLOCK_SIZE);\n\n  encrypted_message = message_init(enc_length);\n  //set up encryption context\n  if(!(enc_ctx = EVP_CIPHER_CTX_new())){\n    printf(\"EVP Error: couldn't allocate a cipher context!\\n\");\n    return NULL;\n  }\n\n  EVP_EncryptInit(enc_ctx, EVP_aes_256_cfb(), plaintext->aes_settings->key,\n      plaintext->aes_settings->iv);\n  //encrypt all the bytes up to but not including the last block\n  if (!EVP_EncryptUpdate(enc_ctx, encrypted_message->body, &enc_length,\n      plaintext->body, *plaintext->length))\n  {\n    EVP_CIPHER_CTX_cleanup(enc_ctx);\n    printf(\"EVP Error: couldn't update encryption with plain text!\\n\");\n    return NULL;\n  }\n  //update length with the amount of bytes written\n  *(encrypted_message->length) = enc_length;\n  //EncryptFinal will cipher the last block + Padding\n  if (!EVP_EncryptFinal_ex(enc_ctx, enc_length + encrypted_message->body,\n      &enc_length))\n  {\n    EVP_CIPHER_CTX_cleanup(enc_ctx);\n    printf(\"EVP Error: couldn't finalize encryption!\\n\");\n    return NULL;\n  }\n  //add padding to length\n  *(encrypted_message->length) += enc_length;\n  //no errors, copy over key & iv rather than pointing to the plaintext msg\n  memcpy(encrypted_message->aes_settings->key, plaintext->aes_settings->key,\n      AES_KEY_SIZE);\n  memcpy(encrypted_message->aes_settings->iv, plaintext->aes_settings->iv,\n      AES_KEY_SIZE / 2);\n  //Free context and return encrypted message\n  EVP_CIPHER_CTX_cleanup(enc_ctx);\n  return encrypted_message;\n}",
  "abstract_func": "Message *aes256_encrypt(Message * VAR_0)\n{\n  EVP_CIPHER_CTX *VAR_1;\n  Message * VAR_2;\n  int VAR_3 = *(VAR_0->length)\n      + (VAR_4 - *(VAR_0->length) % VAR_4);\n\n  VAR_2 = message_init(VAR_3);\n  /* COMMENT_0 */\n  if(!(VAR_1 = EVP_CIPHER_CTX_new())){\n    printf(\"EVP Error: couldn't allocate a cipher context!\\n\");\n    return NULL;\n  }\n\n  EVP_EncryptInit(VAR_1, EVP_aes_256_cfb(), VAR_0->aes_settings->key,\n      VAR_0->aes_settings->iv);\n  /* COMMENT_1 */\n  if (!EVP_EncryptUpdate(VAR_1, VAR_2->body, &VAR_3,\n      VAR_0->body, *VAR_0->length))\n  {\n    EVP_CIPHER_CTX_cleanup(VAR_1);\n    printf(\"EVP Error: couldn't update encryption with plain text!\\n\");\n    return NULL;\n  }\n  /* COMMENT_2 */\n  *(VAR_2->length) = VAR_3;\n  /* COMMENT_3 */\n  if (!EVP_EncryptFinal_ex(VAR_1, VAR_3 + VAR_2->body,\n      &VAR_3))\n  {\n    EVP_CIPHER_CTX_cleanup(VAR_1);\n    printf(\"EVP Error: couldn't finalize encryption!\\n\");\n    return NULL;\n  }\n  /* COMMENT_4 */\n  *(VAR_2->length) += VAR_3;\n  /* COMMENT_5 */\n  memcpy(VAR_2->aes_settings->key, VAR_0->aes_settings->key,\n      VAR_5);\n  memcpy(VAR_2->aes_settings->iv, VAR_0->aes_settings->iv,\n      VAR_5 / 2);\n  /* COMMENT_6 */\n  EVP_CIPHER_CTX_cleanup(VAR_1);\n  return VAR_2;\n}",
  "func_graph_path": "Samsung/mTower/b7dc202233026653c682c8fb4fe1251ca5056003/ecdsa_keygen.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -7,7 +7,11 @@\n \n   encrypted_message = message_init(enc_length);\n   //set up encryption context\n-  enc_ctx = EVP_CIPHER_CTX_new();\n+  if(!(enc_ctx = EVP_CIPHER_CTX_new())){\n+    printf(\"EVP Error: couldn't allocate a cipher context!\\n\");\n+    return NULL;\n+  }\n+\n   EVP_EncryptInit(enc_ctx, EVP_aes_256_cfb(), plaintext->aes_settings->key,\n       plaintext->aes_settings->iv);\n   //encrypt all the bytes up to but not including the last block",
  "diff_line_info": {
    "deleted_lines": [
      "  enc_ctx = EVP_CIPHER_CTX_new();"
    ],
    "added_lines": [
      "  if(!(enc_ctx = EVP_CIPHER_CTX_new())){",
      "    printf(\"EVP Error: couldn't allocate a cipher context!\\n\");",
      "    return NULL;",
      "  }",
      ""
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/Samsung/mTower/pull/78",
  "description": {
    "pr_info": {
      "title": "Fixed: lacking a check for the return value and NULL Pointer Dereference",
      "number": 78
    },
    "comment": [
      "Signed-off-by: Taras Drozdovskyi <t.drozdovsky@samsung.com>\r\n\r\n# Description\r\n\r\nFixed potential security vulnerabilities.\r\n\r\nFixes #75 #76 #77\r\n\r\n## Type of change\r\n\r\n- [x] Bug fix (non-breaking change which fixes an issue)\r\n\r\n# Checklist:\r\n\r\n- [x] My code follows the style guidelines of this project\r\n- [x] I have performed a self-review of my own code\r\n- [x] I have commented my code, particularly in hard-to-understand areas\r\n- [ ] I have made corresponding changes to the documentation\r\n- [x] My changes generate no new warnings\r\n- [ ] I have added tests that prove my fix is effective or that my feature works\r\n- [ ] New and existing unit tests pass locally with my changes\r\n- [ ] Any dependent changes have been merged and published in downstream modules"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.8,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 0.8\n\nThe patch addresses a potential NULL pointer dereference, which is a security issue."
}