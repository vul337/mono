{
  "cve_id": "CVE-2021-28874",
  "cwe_ids": [
    "CWE-120"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "SerenityOS/serenity",
  "commit_msg": "LibTextCodec: Make UTF16BEDecoder read only up to an even offset\n\nReading up to the end of the input string of odd length results in\nan out-of-bounds read",
  "commit_hash": "c9f25bca048443e317f1994ba9b106f2386688c3",
  "git_url": "https://github.com/SerenityOS/serenity/commit/c9f25bca048443e317f1994ba9b106f2386688c3",
  "file_path": "Userland/Libraries/LibTextCodec/Decoder.cpp",
  "func_name": "UTF16BEDecoder::to_utf8",
  "func_before": "String UTF16BEDecoder::to_utf8(const StringView& input)\n{\n    StringBuilder builder(input.length() / 2);\n    for (size_t i = 0; i < input.length(); i += 2) {\n        u16 code_point = (input[i] << 8) | input[i + 1];\n        builder.append_code_point(code_point);\n    }\n    return builder.to_string();\n}",
  "abstract_func_before": "String UTF16BEDecoder::to_utf8(const StringView& VAR_0)\n{\n    StringBuilder VAR_1(VAR_0.length() / 2);\n    for (size_t VAR_2 = 0; VAR_2 < VAR_0.length(); VAR_2 += 2) {\n        u16 VAR_3 = (VAR_0[VAR_2] << 8) | VAR_0[VAR_2 + 1];\n        VAR_1.append_code_point(VAR_3);\n    }\n    return VAR_1.to_string();\n}",
  "func_graph_path_before": "SerenityOS/serenity/c9f25bca048443e317f1994ba9b106f2386688c3/Decoder.cpp/vul/before/0.json",
  "func": "String UTF16BEDecoder::to_utf8(const StringView& input)\n{\n    StringBuilder builder(input.length() / 2);\n    size_t utf16_length = input.length() - (input.length() % 2);\n    for (size_t i = 0; i < utf16_length; i += 2) {\n        u16 code_point = (input[i] << 8) | input[i + 1];\n        builder.append_code_point(code_point);\n    }\n    return builder.to_string();\n}",
  "abstract_func": "String UTF16BEDecoder::to_utf8(const StringView& VAR_0)\n{\n    StringBuilder VAR_1(VAR_0.length() / 2);\n    size_t VAR_2 = VAR_0.length() - (VAR_0.length() % 2);\n    for (size_t VAR_3 = 0; VAR_3 < VAR_2; VAR_3 += 2) {\n        u16 VAR_4 = (VAR_0[VAR_3] << 8) | VAR_0[VAR_3 + 1];\n        VAR_1.append_code_point(VAR_4);\n    }\n    return VAR_1.to_string();\n}",
  "func_graph_path": "SerenityOS/serenity/c9f25bca048443e317f1994ba9b106f2386688c3/Decoder.cpp/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,7 +1,8 @@\n String UTF16BEDecoder::to_utf8(const StringView& input)\n {\n     StringBuilder builder(input.length() / 2);\n-    for (size_t i = 0; i < input.length(); i += 2) {\n+    size_t utf16_length = input.length() - (input.length() % 2);\n+    for (size_t i = 0; i < utf16_length; i += 2) {\n         u16 code_point = (input[i] << 8) | input[i + 1];\n         builder.append_code_point(code_point);\n     }",
  "diff_line_info": {
    "deleted_lines": [
      "    for (size_t i = 0; i < input.length(); i += 2) {"
    ],
    "added_lines": [
      "    size_t utf16_length = input.length() - (input.length() % 2);",
      "    for (size_t i = 0; i < utf16_length; i += 2) {"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/SerenityOS/serenity/pull/5802",
  "description": {
    "pr_info": {
      "title": "LibTextCodec: Make UTF16BEDecoder read only up to an even offset",
      "number": 5802
    },
    "comment": [
      "Reading up to the end of the input string of odd length results in an out-of-bounds read. (this fixes #5769)\r\n\r\nFuzzUTF16BEDecoder is one of the 3 fuzzers that are crashing on the majority of cases fed to them by oss-fuzz (50% in this case assuming even distribution of input lengths :p), causing oss-fuzz to assume a failing build, so this is the first part of 3 to eventually making #5682 build again."
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 1.0"
}