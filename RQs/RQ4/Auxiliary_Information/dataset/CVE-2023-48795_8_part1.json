{
  "cve_id": "CVE-2023-48795",
  "cwe_ids": [
    "CWE-354"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:H/A:N",
  "cvss_is_v3": true,
  "repo_name": "janmojzis/tinyssh",
  "commit_msg": "implementation kex-strict-s-v00@openssh.com",
  "commit_hash": "12ec08d24e43e382cb6d9b61facd87685f99eae0",
  "git_url": "https://github.com/janmojzis/tinyssh/commit/12ec08d24e43e382cb6d9b61facd87685f99eae0",
  "file_path": "tinyssh/packet_get.c",
  "func_name": "packet_get",
  "func_before": "int packet_get(struct buf *b, crypto_uint8 x) {\n\n    buf_purge(b);\n    if (!packet_get_(b)) return 0;\n    if (b->len <= 0) return 1;\n    if (!packet.flagauthorized) if (packet.receivepacketid > PACKET_UNAUTHENTICATED_MESSAGES) {\n        errno = EPROTO;\n        log_f1(\"too many unauthenticated messages\");\n        global_die(111);\n    }\n\n    switch (b->buf[0]) {\n        case SSH_MSG_DISCONNECT:\n            errno = 0;\n            return 0;\n        case SSH_MSG_IGNORE:\n        case SSH_MSG_DEBUG:\n            buf_purge(b);\n            break;\n        default:\n            if (x && x != b->buf[0]) {\n                char buf1[NUMTOSTR_LEN];\n                char buf2[NUMTOSTR_LEN];\n                errno = EPROTO;\n                log_f4(\"expected packet type \", numtostr(buf1, x), \", got \", numtostr(buf2, b->buf[0]));\n                global_die(111);\n            }\n            break;\n    }\n    return 1;\n}",
  "abstract_func_before": "int packet_get(struct buf *VAR_0, crypto_uint8 VAR_1) {\n\n    buf_purge(VAR_0);\n    if (!packet_get_(VAR_0)) return 0;\n    if (VAR_0->len <= 0) return 1;\n    if (!VAR_2.flagauthorized) if (VAR_2.receivepacketid > VAR_3) {\n        VAR_4 = VAR_5;\n        log_f1(\"too many unauthenticated messages\");\n        global_die(111);\n    }\n\n    switch (VAR_0->buf[0]) {\n        case VAR_6:\n            VAR_4 = 0;\n            return 0;\n        case VAR_7:\n        case VAR_8:\n            buf_purge(VAR_0);\n            break;\n        default:\n            if (VAR_1 && VAR_1 != VAR_0->buf[0]) {\n                char VAR_9[VAR_10];\n                char VAR_11[VAR_10];\n                VAR_4 = VAR_5;\n                log_f4(\"expected packet type \", numtostr(VAR_9, VAR_1), \", got \", numtostr(VAR_11, VAR_0->buf[0]));\n                global_die(111);\n            }\n            break;\n    }\n    return 1;\n}",
  "func_graph_path_before": "janmojzis/tinyssh/12ec08d24e43e382cb6d9b61facd87685f99eae0/packet_get.c/vul/before/0.json",
  "func": "int packet_get(struct buf *b, crypto_uint8 x) {\n\n    buf_purge(b);\n    if (!packet_get_(b)) return 0;\n    if (b->len <= 0) return 1;\n    if (!packet.flagauthorized) if (packet.receivepacketid > PACKET_UNAUTHENTICATED_MESSAGES) {\n        errno = EPROTO;\n        log_f1(\"too many unauthenticated messages\");\n        global_die(111);\n    }\n\n    switch (b->buf[0]) {\n        case SSH_MSG_DISCONNECT:\n            errno = 0;\n            return 0;\n        case SSH_MSG_IGNORE:\n        case SSH_MSG_DEBUG:\n            if (!packet.flagkeys) {\n                log_f1(\"SSH_MSG_IGNORE/SSH_MSG_DEBUG packet rejected in plain-text mode\");\n                global_die(111);\n            }\n            buf_purge(b);\n            break;\n        case SSH_MSG_NEWKEYS:\n            /* strict kex - reset receivepacketid */\n            if (sshcrypto_kex_flags & sshcrypto_FLAGSTRICTKEX) {\n                packet.receivepacketid = 0;\n            }\n        default:\n            if (x && x != b->buf[0]) {\n                char buf1[NUMTOSTR_LEN];\n                char buf2[NUMTOSTR_LEN];\n                errno = EPROTO;\n                log_f4(\"expected packet type \", numtostr(buf1, x), \", got \", numtostr(buf2, b->buf[0]));\n                global_die(111);\n            }\n            break;\n    }\n    return 1;\n}",
  "abstract_func": "int packet_get(struct buf *VAR_0, crypto_uint8 VAR_1) {\n\n    buf_purge(VAR_0);\n    if (!packet_get_(VAR_0)) return 0;\n    if (VAR_0->len <= 0) return 1;\n    if (!VAR_2.flagauthorized) if (VAR_2.receivepacketid > VAR_3) {\n        VAR_4 = VAR_5;\n        log_f1(\"too many unauthenticated messages\");\n        global_die(111);\n    }\n\n    switch (VAR_0->buf[0]) {\n        case VAR_6:\n            VAR_4 = 0;\n            return 0;\n        case VAR_7:\n        case VAR_8:\n            if (!VAR_2.flagkeys) {\n                log_f1(\"SSH_MSG_IGNORE/SSH_MSG_DEBUG packet rejected in plain-text mode\");\n                global_die(111);\n            }\n            buf_purge(VAR_0);\n            break;\n        case VAR_9:\n            /* COMMENT_0 */\n            if (VAR_10 & VAR_11) {\n                VAR_2.receivepacketid = 0;\n            }\n        default:\n            if (VAR_1 && VAR_1 != VAR_0->buf[0]) {\n                char VAR_12[VAR_13];\n                char VAR_14[VAR_13];\n                VAR_4 = VAR_5;\n                log_f4(\"expected packet type \", numtostr(VAR_12, VAR_1), \", got \", numtostr(VAR_14, VAR_0->buf[0]));\n                global_die(111);\n            }\n            break;\n    }\n    return 1;\n}",
  "func_graph_path": "janmojzis/tinyssh/12ec08d24e43e382cb6d9b61facd87685f99eae0/packet_get.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -15,8 +15,17 @@\n             return 0;\n         case SSH_MSG_IGNORE:\n         case SSH_MSG_DEBUG:\n+            if (!packet.flagkeys) {\n+                log_f1(\"SSH_MSG_IGNORE/SSH_MSG_DEBUG packet rejected in plain-text mode\");\n+                global_die(111);\n+            }\n             buf_purge(b);\n             break;\n+        case SSH_MSG_NEWKEYS:\n+            /* strict kex - reset receivepacketid */\n+            if (sshcrypto_kex_flags & sshcrypto_FLAGSTRICTKEX) {\n+                packet.receivepacketid = 0;\n+            }\n         default:\n             if (x && x != b->buf[0]) {\n                 char buf1[NUMTOSTR_LEN];",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "            if (!packet.flagkeys) {",
      "                log_f1(\"SSH_MSG_IGNORE/SSH_MSG_DEBUG packet rejected in plain-text mode\");",
      "                global_die(111);",
      "            }",
      "        case SSH_MSG_NEWKEYS:",
      "            /* strict kex - reset receivepacketid */",
      "            if (sshcrypto_kex_flags & sshcrypto_FLAGSTRICTKEX) {",
      "                packet.receivepacketid = 0;",
      "            }"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/janmojzis/tinyssh/pull/82",
  "description": {
    "pr_info": {
      "title": "implementation kex-strict-s-v00@openssh.com",
      "number": 82
    },
    "comment": [
      "Add new KEX kex-strict-s-v00@openssh.com protocol.\r\n'Terrapin Attack'  mitigation CVE-2023-48795.\r\nFixes https://github.com/janmojzis/tinyssh/issues/81\r\n"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 1.0"
}