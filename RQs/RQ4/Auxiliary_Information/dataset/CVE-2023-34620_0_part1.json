{
  "cve_id": "CVE-2023-34620",
  "cwe_ids": [
    "CWE-787"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
  "cvss_is_v3": true,
  "repo_name": "hjson/hjson-java",
  "commit_msg": "JsonParser too",
  "commit_hash": "91bef056d56bf968451887421c89a44af1d692ff",
  "git_url": "https://github.com/hjson/hjson-java/commit/91bef056d56bf968451887421c89a44af1d692ff",
  "file_path": "src/main/org/hjson/JsonParser.java",
  "func_name": "readValue",
  "func_before": "private JsonValue readValue(int depth) throws IOException {\n    if(current==123) {\n      ++depth;\n    }\n    /* The following has been refrenced for the resolution of the vulnerability:\n    https://github.com/FasterXML/jackson-databind/commit/fcfc4998ec23f0b1f7f8a9521c2b317b6c25892b\n    */\n    if(depth>MAX_DEPTH) {\n      throw error(\"The passed json has exhausted the maximum supported depth of \"+MAX_DEPTH+\".\");\n    }\n    switch(current) {\n      case 'n':\n        return readNull();\n      case 't':\n        return readTrue();\n      case 'f':\n        return readFalse();\n      case '\"':\n        return readString();\n      case '[':\n        return readArray(depth);\n      case '{':\n        return readObject(depth);\n      case '-':\n      case '0':\n      case '1':\n      case '2':\n      case '3':\n      case '4':\n      case '5':\n      case '6':\n      case '7':\n      case '8':\n      case '9':\n        return readNumber();\n      default:\n        throw expected(\"value\");\n    }\n  }",
  "abstract_func_before": "private JsonValue readValue(int VAR_0) throws IOException {\n    if(VAR_1==123) {\n      ++VAR_0;\n    }\n    /* COMMENT_0 */\n                                                                                                 \n      \n    if(VAR_0>VAR_2) {\n      throw error(\"The passed json has exhausted the maximum supported depth of \"+VAR_2+\".\");\n    }\n    switch(VAR_1) {\n      case 'n':\n        return readNull();\n      case 't':\n        return readTrue();\n      case 'f':\n        return readFalse();\n      case '\"':\n        return readString();\n      case '[':\n        return readArray(VAR_0);\n      case '{':\n        return readObject(VAR_0);\n      case '-':\n      case '0':\n      case '1':\n      case '2':\n      case '3':\n      case '4':\n      case '5':\n      case '6':\n      case '7':\n      case '8':\n      case '9':\n        return readNumber();\n      default:\n        throw expected(\"value\");\n    }\n  }",
  "func_graph_path_before": "hjson/hjson-java/91bef056d56bf968451887421c89a44af1d692ff/JsonParser.java/vul/before/0.json",
  "func": "private JsonValue readValue(int depth) throws IOException {\n    /* The following has been refrenced for the resolution of the vulnerability:\n    https://github.com/FasterXML/jackson-databind/commit/fcfc4998ec23f0b1f7f8a9521c2b317b6c25892b\n    */\n    if(depth>MAX_DEPTH) {\n      throw error(\"The passed json has exhausted the maximum supported depth of \"+MAX_DEPTH+\".\");\n    }\n    switch(current) {\n      case 'n':\n        return readNull();\n      case 't':\n        return readTrue();\n      case 'f':\n        return readFalse();\n      case '\"':\n        return readString();\n      case '[':\n        return readArray(depth + 1);\n      case '{':\n        return readObject(depth + 1);\n      case '-':\n      case '0':\n      case '1':\n      case '2':\n      case '3':\n      case '4':\n      case '5':\n      case '6':\n      case '7':\n      case '8':\n      case '9':\n        return readNumber();\n      default:\n        throw expected(\"value\");\n    }\n  }",
  "abstract_func": "private JsonValue readValue(int VAR_0) throws IOException {\n    /* COMMENT_0 */\n                                                                                                 \n      \n    if(VAR_0>VAR_1) {\n      throw error(\"The passed json has exhausted the maximum supported depth of \"+VAR_1+\".\");\n    }\n    switch(VAR_2) {\n      case 'n':\n        return readNull();\n      case 't':\n        return readTrue();\n      case 'f':\n        return readFalse();\n      case '\"':\n        return readString();\n      case '[':\n        return readArray(VAR_0 + 1);\n      case '{':\n        return readObject(VAR_0 + 1);\n      case '-':\n      case '0':\n      case '1':\n      case '2':\n      case '3':\n      case '4':\n      case '5':\n      case '6':\n      case '7':\n      case '8':\n      case '9':\n        return readNumber();\n      default:\n        throw expected(\"value\");\n    }\n  }",
  "func_graph_path": "hjson/hjson-java/91bef056d56bf968451887421c89a44af1d692ff/JsonParser.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,7 +1,4 @@\n private JsonValue readValue(int depth) throws IOException {\n-    if(current==123) {\n-      ++depth;\n-    }\n     /* The following has been refrenced for the resolution of the vulnerability:\n     https://github.com/FasterXML/jackson-databind/commit/fcfc4998ec23f0b1f7f8a9521c2b317b6c25892b\n     */\n@@ -18,9 +15,9 @@\n       case '\"':\n         return readString();\n       case '[':\n-        return readArray(depth);\n+        return readArray(depth + 1);\n       case '{':\n-        return readObject(depth);\n+        return readObject(depth + 1);\n       case '-':\n       case '0':\n       case '1':",
  "diff_line_info": {
    "deleted_lines": [
      "    if(current==123) {",
      "      ++depth;",
      "    }",
      "        return readArray(depth);",
      "        return readObject(depth);"
    ],
    "added_lines": [
      "        return readArray(depth + 1);",
      "        return readObject(depth + 1);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/hjson/hjson-java/pull/26",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/hjson/hjson-java/pull/26: 403 Client Error: Forbidden for url: https://api.github.com/repos/hjson/hjson-java/pulls/26",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 1.0\n\nThe patch addresses a known security vulnerability (CVE-2023-34620) by enforcing a maximum depth during JSON parsing, which prevents potential attacks like stack overflow. The code changes clearly implement this fix, confirming its security nature."
}