{
  "cve_id": "CVE-2017-11462",
  "cwe_ids": [
    "CWE-415"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "krb5",
  "commit_msg": "Preserve GSS context on init/accept failure\n\nAfter gss_init_sec_context() or gss_accept_sec_context() has created a\ncontext, don't delete the mechglue context on failures from subsequent\ncalls, even if the mechanism deletes the mech-specific context (which\nis allowed by RFC 2744 but not preferred).  Check for union contexts\nwith no mechanism context in each GSS function which accepts a\ngss_ctx_id_t.\n\nCVE-2017-11462:\n\nRFC 2744 permits a GSS-API implementation to delete an existing\nsecurity context on a second or subsequent call to\ngss_init_sec_context() or gss_accept_sec_context() if the call results\nin an error.  This API behavior has been found to be dangerous,\nleading to the possibility of memory errors in some callers.  For\nsafety, GSS-API implementations should instead preserve existing\nsecurity contexts on error until the caller deletes them.\n\nAll versions of MIT krb5 prior to this change may delete acceptor\ncontexts on error.  Versions 1.13.4 through 1.13.7, 1.14.1 through\n1.14.5, and 1.15 through 1.15.1 may also delete initiator contexts on\nerror.\n\nticket: 8598 (new)\ntarget_version: 1.15-next\ntarget_version: 1.14-next\ntags: pullup",
  "commit_hash": "56f7b1bc95a2a3eeb420e069e7655fb181ade5cf",
  "git_url": "https://github.com/krb5/krb5/commit/56f7b1bc95a2a3eeb420e069e7655fb181ade5cf",
  "file_path": "src/lib/gssapi/mechglue/g_seal.c",
  "func_name": "gss_wrap_size_limit",
  "func_before": "OM_uint32 KRB5_CALLCONV\ngss_wrap_size_limit(OM_uint32  *minor_status,\n                    gss_ctx_id_t context_handle,\n                    int conf_req_flag,\n                    gss_qop_t qop_req, OM_uint32 req_output_size, OM_uint32 *max_input_size)\n{\n    gss_union_ctx_id_t  ctx;\n    gss_mechanism       mech;\n    OM_uint32           major_status;\n\n    if (minor_status == NULL)\n        return (GSS_S_CALL_INACCESSIBLE_WRITE);\n    *minor_status = 0;\n\n    if (context_handle == GSS_C_NO_CONTEXT)\n        return (GSS_S_CALL_INACCESSIBLE_READ | GSS_S_NO_CONTEXT);\n\n    if (max_input_size == NULL)\n        return (GSS_S_CALL_INACCESSIBLE_WRITE);\n\n    /*\n     * select the approprate underlying mechanism routine and\n     * call it.\n     */\n\n    ctx = (gss_union_ctx_id_t) context_handle;\n    mech = gssint_get_mechanism (ctx->mech_type);\n\n    if (!mech)\n        return (GSS_S_BAD_MECH);\n\n    if (mech->gss_wrap_size_limit)\n        major_status = mech->gss_wrap_size_limit(minor_status,\n                                                 ctx->internal_ctx_id,\n                                                 conf_req_flag, qop_req,\n                                                 req_output_size, max_input_size);\n    else if (mech->gss_wrap_iov_length)\n        major_status = gssint_wrap_size_limit_iov_shim(mech, minor_status,\n                                                       ctx->internal_ctx_id,\n                                                       conf_req_flag, qop_req,\n                                                       req_output_size, max_input_size);\n    else\n        major_status = GSS_S_UNAVAILABLE;\n    if (major_status != GSS_S_COMPLETE)\n        map_error(minor_status, mech);\n    return major_status;\n}",
  "abstract_func_before": "OM_uint32 VAR_0\ngss_wrap_size_limit(OM_uint32  *VAR_1,\n                    gss_ctx_id_t VAR_2,\n                    int VAR_3,\n                    gss_qop_t VAR_4, OM_uint32 VAR_5, OM_uint32 *VAR_6)\n{\n    gss_union_ctx_id_t  VAR_7;\n    gss_mechanism       VAR_8;\n    OM_uint32           VAR_9;\n\n    if (VAR_1 == NULL)\n        return (VAR_10);\n    *VAR_1 = 0;\n\n    if (VAR_2 == VAR_11)\n        return (VAR_12 | VAR_13);\n\n    if (VAR_6 == NULL)\n        return (VAR_10);\n\n    /* COMMENT_0 */\n                                                             \n               \n       \n\n    VAR_7 = (gss_union_ctx_id_t) VAR_2;\n    VAR_8 = gssint_get_mechanism (VAR_7->mech_type);\n\n    if (!VAR_8)\n        return (VAR_14);\n\n    if (VAR_8->gss_wrap_size_limit)\n        VAR_9 = VAR_8->gss_wrap_size_limit(VAR_1,\n                                                 VAR_7->internal_ctx_id,\n                                                 VAR_3, VAR_4,\n                                                 VAR_5, VAR_6);\n    else if (VAR_8->gss_wrap_iov_length)\n        VAR_9 = gssint_wrap_size_limit_iov_shim(VAR_8, VAR_1,\n                                                       VAR_7->internal_ctx_id,\n                                                       VAR_3, VAR_4,\n                                                       VAR_5, VAR_6);\n    else\n        VAR_9 = VAR_15;\n    if (VAR_9 != VAR_16)\n        map_error(VAR_1, VAR_8);\n    return VAR_9;\n}",
  "func_graph_path_before": null,
  "func": "OM_uint32 KRB5_CALLCONV\ngss_wrap_size_limit(OM_uint32  *minor_status,\n                    gss_ctx_id_t context_handle,\n                    int conf_req_flag,\n                    gss_qop_t qop_req, OM_uint32 req_output_size, OM_uint32 *max_input_size)\n{\n    gss_union_ctx_id_t  ctx;\n    gss_mechanism       mech;\n    OM_uint32           major_status;\n\n    if (minor_status == NULL)\n        return (GSS_S_CALL_INACCESSIBLE_WRITE);\n    *minor_status = 0;\n\n    if (context_handle == GSS_C_NO_CONTEXT)\n        return (GSS_S_CALL_INACCESSIBLE_READ | GSS_S_NO_CONTEXT);\n\n    if (max_input_size == NULL)\n        return (GSS_S_CALL_INACCESSIBLE_WRITE);\n\n    /*\n     * select the approprate underlying mechanism routine and\n     * call it.\n     */\n\n    ctx = (gss_union_ctx_id_t) context_handle;\n    if (ctx->internal_ctx_id == GSS_C_NO_CONTEXT)\n        return (GSS_S_NO_CONTEXT);\n    mech = gssint_get_mechanism (ctx->mech_type);\n\n    if (!mech)\n        return (GSS_S_BAD_MECH);\n\n    if (mech->gss_wrap_size_limit)\n        major_status = mech->gss_wrap_size_limit(minor_status,\n                                                 ctx->internal_ctx_id,\n                                                 conf_req_flag, qop_req,\n                                                 req_output_size, max_input_size);\n    else if (mech->gss_wrap_iov_length)\n        major_status = gssint_wrap_size_limit_iov_shim(mech, minor_status,\n                                                       ctx->internal_ctx_id,\n                                                       conf_req_flag, qop_req,\n                                                       req_output_size, max_input_size);\n    else\n        major_status = GSS_S_UNAVAILABLE;\n    if (major_status != GSS_S_COMPLETE)\n        map_error(minor_status, mech);\n    return major_status;\n}",
  "abstract_func": "OM_uint32 VAR_0\ngss_wrap_size_limit(OM_uint32  *VAR_1,\n                    gss_ctx_id_t VAR_2,\n                    int VAR_3,\n                    gss_qop_t VAR_4, OM_uint32 VAR_5, OM_uint32 *VAR_6)\n{\n    gss_union_ctx_id_t  VAR_7;\n    gss_mechanism       VAR_8;\n    OM_uint32           VAR_9;\n\n    if (VAR_1 == NULL)\n        return (VAR_10);\n    *VAR_1 = 0;\n\n    if (VAR_2 == VAR_11)\n        return (VAR_12 | VAR_13);\n\n    if (VAR_6 == NULL)\n        return (VAR_10);\n\n    /* COMMENT_0 */\n                                                             \n               \n       \n\n    VAR_7 = (gss_union_ctx_id_t) VAR_2;\n    if (VAR_7->internal_ctx_id == VAR_11)\n        return (VAR_13);\n    VAR_8 = gssint_get_mechanism (VAR_7->mech_type);\n\n    if (!VAR_8)\n        return (VAR_14);\n\n    if (VAR_8->gss_wrap_size_limit)\n        VAR_9 = VAR_8->gss_wrap_size_limit(VAR_1,\n                                                 VAR_7->internal_ctx_id,\n                                                 VAR_3, VAR_4,\n                                                 VAR_5, VAR_6);\n    else if (VAR_8->gss_wrap_iov_length)\n        VAR_9 = gssint_wrap_size_limit_iov_shim(VAR_8, VAR_1,\n                                                       VAR_7->internal_ctx_id,\n                                                       VAR_3, VAR_4,\n                                                       VAR_5, VAR_6);\n    else\n        VAR_9 = VAR_15;\n    if (VAR_9 != VAR_16)\n        map_error(VAR_1, VAR_8);\n    return VAR_9;\n}",
  "func_graph_path": null,
  "diff_func": "--- func_before\n+++ func_after\n@@ -24,6 +24,8 @@\n      */\n \n     ctx = (gss_union_ctx_id_t) context_handle;\n+    if (ctx->internal_ctx_id == GSS_C_NO_CONTEXT)\n+        return (GSS_S_NO_CONTEXT);\n     mech = gssint_get_mechanism (ctx->mech_type);\n \n     if (!mech)",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "    if (ctx->internal_ctx_id == GSS_C_NO_CONTEXT)",
      "        return (GSS_S_NO_CONTEXT);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/krb5/krb5/pull/677",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/krb5/krb5/pull/677: 403 Client Error: Forbidden for url: https://api.github.com/repos/krb5/krb5/pulls/677",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 1.0\n\n**Reasoning:** The commit explicitly references a CVE (2017-11462) and addresses a known security issue. The code adds checks to prevent unsafe handling of contexts, directly mitigating the vulnerability."
}