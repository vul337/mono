{
  "cve_id": "CVE-2023-27590",
  "cwe_ids": [
    "CWE-120",
    "CWE-121"
  ],
  "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H",
  "cvss_is_v3": true,
  "repo_name": "rizinorg/rizin",
  "commit_msg": "Fix conversion from GDB register profile to rizin profile",
  "commit_hash": "d6196703d89c84467b600ba2692534579dc25ed4",
  "git_url": "https://github.com/rizinorg/rizin/commit/d6196703d89c84467b600ba2692534579dc25ed4",
  "file_path": "librz/debug/p/debug_io.c",
  "func_name": "__io_maps",
  "func_before": "static RzList /*<RzDebugMap *>*/ *__io_maps(RzDebug *dbg) {\n\tRzList *list = rz_list_new();\n\tchar *str = dbg->iob.system(dbg->iob.io, \"dm\");\n\tif (!str) {\n\t\trz_list_free(list);\n\t\treturn NULL;\n\t}\n\tchar *ostr = str;\n\tut64 map_start, map_end;\n\tchar perm[32];\n\tchar name[512];\n\tfor (;;) {\n\t\tchar *nl = strchr(str, '\\n');\n\t\tif (nl) {\n\t\t\t*nl = 0;\n\t\t\t*name = 0;\n\t\t\t*perm = 0;\n\t\t\tmap_start = map_end = 0LL;\n\t\t\tif (!strncmp(str, \"sys \", 4)) {\n\t\t\t\tchar *sp = strchr(str + 4, ' ');\n\t\t\t\tif (sp) {\n\t\t\t\t\tstr = sp + 1;\n\t\t\t\t} else {\n\t\t\t\t\tstr += 4;\n\t\t\t\t}\n\t\t\t}\n\t\t\tchar *_s_ = strstr(str, \" s \");\n\t\t\tif (_s_) {\n\t\t\t\tmemmove(_s_, _s_ + 2, strlen(_s_));\n\t\t\t}\n\t\t\t_s_ = strstr(str, \" ? \");\n\t\t\tif (_s_) {\n\t\t\t\tmemmove(_s_, _s_ + 2, strlen(_s_));\n\t\t\t}\n\t\t\tsscanf(str, \"0x%\" PFMT64x \" - 0x%\" PFMT64x \" %s %s\",\n\t\t\t\t&map_start, &map_end, perm, name);\n\t\t\tif (map_end != 0LL) {\n\t\t\t\tRzDebugMap *map = rz_debug_map_new(name, map_start, map_end, rz_str_rwx(perm), 0);\n\t\t\t\trz_list_append(list, map);\n\t\t\t}\n\t\t\tstr = nl + 1;\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n\tfree(ostr);\n\trz_cons_reset();\n\treturn list;\n}",
  "abstract_func_before": "static RzList /* COMMENT_0 */ *__io_maps(RzDebug *VAR_0) {\n\tRzList *VAR_1 = rz_list_new();\n\tchar *VAR_2 = VAR_0->iob.system(VAR_0->iob.io, \"dm\");\n\tif (!VAR_2) {\n\t\trz_list_free(VAR_1);\n\t\treturn NULL;\n\t}\n\tchar *VAR_3 = VAR_2;\n\tut64 VAR_4, VAR_5;\n\tchar VAR_6[32];\n\tchar VAR_7[512];\n\tfor (;;) {\n\t\tchar *VAR_8 = strchr(VAR_2, '\\n');\n\t\tif (VAR_8) {\n\t\t\t*VAR_8 = 0;\n\t\t\t*VAR_7 = 0;\n\t\t\t*VAR_6 = 0;\n\t\t\tVAR_4 = VAR_5 = 0LL;\n\t\t\tif (!strncmp(VAR_2, \"sys \", 4)) {\n\t\t\t\tchar *VAR_9 = strchr(VAR_2 + 4, ' ');\n\t\t\t\tif (VAR_9) {\n\t\t\t\t\tVAR_2 = VAR_9 + 1;\n\t\t\t\t} else {\n\t\t\t\t\tVAR_2 += 4;\n\t\t\t\t}\n\t\t\t}\n\t\t\tchar *VAR_10 = strstr(VAR_2, \" s \");\n\t\t\tif (VAR_10) {\n\t\t\t\tmemmove(VAR_10, VAR_10 + 2, strlen(VAR_10));\n\t\t\t}\n\t\t\tVAR_10 = strstr(VAR_2, \" ? \");\n\t\t\tif (VAR_10) {\n\t\t\t\tmemmove(VAR_10, VAR_10 + 2, strlen(VAR_10));\n\t\t\t}\n\t\t\tsscanf(VAR_2, \"0x%\" VAR_11 \" - 0x%\" VAR_11 \" %s %s\",\n\t\t\t\t&VAR_4, &VAR_5, VAR_6, VAR_7);\n\t\t\tif (VAR_5 != 0LL) {\n\t\t\t\tRzDebugMap *VAR_12 = rz_debug_map_new(VAR_7, VAR_4, VAR_5, rz_str_rwx(VAR_6), 0);\n\t\t\t\trz_list_append(VAR_1, VAR_12);\n\t\t\t}\n\t\t\tVAR_2 = VAR_8 + 1;\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n\tfree(VAR_3);\n\trz_cons_reset();\n\treturn VAR_1;\n}",
  "func_graph_path_before": "rizinorg/rizin/d6196703d89c84467b600ba2692534579dc25ed4/debug_io.c/vul/before/0.json",
  "func": "static RzList /*<RzDebugMap *>*/ *__io_maps(RzDebug *dbg) {\n\tRzList *list = rz_list_new();\n\tchar *str = dbg->iob.system(dbg->iob.io, \"dm\");\n\tif (!str) {\n\t\trz_list_free(list);\n\t\treturn NULL;\n\t}\n\tchar *ostr = str;\n\tut64 map_start, map_end;\n\tchar perm[IO_MAPS_PERM_SZ + 1];\n\tchar name[IO_MAPS_NAME_SZ + 1];\n\tfor (;;) {\n\t\tchar *nl = strchr(str, '\\n');\n\t\tif (nl) {\n\t\t\t*nl = 0;\n\t\t\t*name = 0;\n\t\t\t*perm = 0;\n\t\t\tmap_start = map_end = 0LL;\n\t\t\tif (!strncmp(str, \"sys \", 4)) {\n\t\t\t\tchar *sp = strchr(str + 4, ' ');\n\t\t\t\tif (sp) {\n\t\t\t\t\tstr = sp + 1;\n\t\t\t\t} else {\n\t\t\t\t\tstr += 4;\n\t\t\t\t}\n\t\t\t}\n\t\t\tchar *_s_ = strstr(str, \" s \");\n\t\t\tif (_s_) {\n\t\t\t\tmemmove(_s_, _s_ + 2, strlen(_s_));\n\t\t\t}\n\t\t\t_s_ = strstr(str, \" ? \");\n\t\t\tif (_s_) {\n\t\t\t\tmemmove(_s_, _s_ + 2, strlen(_s_));\n\t\t\t}\n\t\t\tsscanf(str, \"0x%\" PFMT64x \" - 0x%\" PFMT64x \" %\" RZ_STR_DEF(IO_MAPS_PERM_SZ) \"s %\" RZ_STR_DEF(IO_MAPS_NAME_SZ) \"s\",\n\t\t\t\t&map_start, &map_end, perm, name);\n\t\t\tif (map_end != 0LL) {\n\t\t\t\tRzDebugMap *map = rz_debug_map_new(name, map_start, map_end, rz_str_rwx(perm), 0);\n\t\t\t\trz_list_append(list, map);\n\t\t\t}\n\t\t\tstr = nl + 1;\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n\tfree(ostr);\n\trz_cons_reset();\n\treturn list;\n}",
  "abstract_func": "static RzList /* COMMENT_0 */ *__io_maps(RzDebug *VAR_0) {\n\tRzList *VAR_1 = rz_list_new();\n\tchar *VAR_2 = VAR_0->iob.system(VAR_0->iob.io, \"dm\");\n\tif (!VAR_2) {\n\t\trz_list_free(VAR_1);\n\t\treturn NULL;\n\t}\n\tchar *VAR_3 = VAR_2;\n\tut64 VAR_4, VAR_5;\n\tchar VAR_6[VAR_7 + 1];\n\tchar VAR_8[VAR_9 + 1];\n\tfor (;;) {\n\t\tchar *VAR_10 = strchr(VAR_2, '\\n');\n\t\tif (VAR_10) {\n\t\t\t*VAR_10 = 0;\n\t\t\t*VAR_8 = 0;\n\t\t\t*VAR_6 = 0;\n\t\t\tVAR_4 = VAR_5 = 0LL;\n\t\t\tif (!strncmp(VAR_2, \"sys \", 4)) {\n\t\t\t\tchar *VAR_11 = strchr(VAR_2 + 4, ' ');\n\t\t\t\tif (VAR_11) {\n\t\t\t\t\tVAR_2 = VAR_11 + 1;\n\t\t\t\t} else {\n\t\t\t\t\tVAR_2 += 4;\n\t\t\t\t}\n\t\t\t}\n\t\t\tchar *VAR_12 = strstr(VAR_2, \" s \");\n\t\t\tif (VAR_12) {\n\t\t\t\tmemmove(VAR_12, VAR_12 + 2, strlen(VAR_12));\n\t\t\t}\n\t\t\tVAR_12 = strstr(VAR_2, \" ? \");\n\t\t\tif (VAR_12) {\n\t\t\t\tmemmove(VAR_12, VAR_12 + 2, strlen(VAR_12));\n\t\t\t}\n\t\t\tsscanf(VAR_2, \"0x%\" VAR_13 \" - 0x%\" VAR_13 \" %\" RZ_STR_DEF(VAR_7) \"VAR_14 %\" RZ_STR_DEF(IO_MAPS_NAME_SZ) \"VAR_14\",\n\t\t\t\t&VAR_4, &VAR_5, VAR_6, VAR_8);\n\t\t\tif (VAR_5 != 0LL) {\n\t\t\t\tRzDebugMap *VAR_15 = rz_debug_map_new(VAR_8, VAR_4, VAR_5, rz_str_rwx(VAR_6), 0);\n\t\t\t\trz_list_append(VAR_1, VAR_15);\n\t\t\t}\n\t\t\tVAR_2 = VAR_10 + 1;\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n\tfree(VAR_3);\n\trz_cons_reset();\n\treturn VAR_1;\n}",
  "func_graph_path": "rizinorg/rizin/d6196703d89c84467b600ba2692534579dc25ed4/debug_io.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -7,8 +7,8 @@\n \t}\n \tchar *ostr = str;\n \tut64 map_start, map_end;\n-\tchar perm[32];\n-\tchar name[512];\n+\tchar perm[IO_MAPS_PERM_SZ + 1];\n+\tchar name[IO_MAPS_NAME_SZ + 1];\n \tfor (;;) {\n \t\tchar *nl = strchr(str, '\\n');\n \t\tif (nl) {\n@@ -32,7 +32,7 @@\n \t\t\tif (_s_) {\n \t\t\t\tmemmove(_s_, _s_ + 2, strlen(_s_));\n \t\t\t}\n-\t\t\tsscanf(str, \"0x%\" PFMT64x \" - 0x%\" PFMT64x \" %s %s\",\n+\t\t\tsscanf(str, \"0x%\" PFMT64x \" - 0x%\" PFMT64x \" %\" RZ_STR_DEF(IO_MAPS_PERM_SZ) \"s %\" RZ_STR_DEF(IO_MAPS_NAME_SZ) \"s\",\n \t\t\t\t&map_start, &map_end, perm, name);\n \t\t\tif (map_end != 0LL) {\n \t\t\t\tRzDebugMap *map = rz_debug_map_new(name, map_start, map_end, rz_str_rwx(perm), 0);",
  "diff_line_info": {
    "deleted_lines": [
      "\tchar perm[32];",
      "\tchar name[512];",
      "\t\t\tsscanf(str, \"0x%\" PFMT64x \" - 0x%\" PFMT64x \" %s %s\","
    ],
    "added_lines": [
      "\tchar perm[IO_MAPS_PERM_SZ + 1];",
      "\tchar name[IO_MAPS_NAME_SZ + 1];",
      "\t\t\tsscanf(str, \"0x%\" PFMT64x \" - 0x%\" PFMT64x \" %\" RZ_STR_DEF(IO_MAPS_PERM_SZ) \"s %\" RZ_STR_DEF(IO_MAPS_NAME_SZ) \"s\","
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/rizinorg/rizin/pull/3422",
  "description": {
    "pr_info": {
      "title": "Fix conversion from GDB register profile to rizin profile",
      "number": 3422
    },
    "comment": [
      " <!-- Filling this template is mandatory -->\r\n\r\n**Your checklist for this pull request**\r\n- [x] I've read the [guidelines for contributing](https://github.com/rizinorg/rizin/blob/master/DEVELOPERS.md) to this repository\r\n- [x] I made sure to follow the project's [coding style](https://github.com/rizinorg/rizin/blob/master/DEVELOPERS.md#code-style)\r\n- [ ] I've documented or updated the documentation of every function and struct this PR changes. If not so I've explained why.\r\n- [ ] I've added tests that prove my fix is effective or that my feature works (if possible)\r\n- [ ] I've updated the [rizin book](https://github.com/rizinorg/book) with the relevant information (if needed)\r\n\r\n**Detailed description**\r\n\r\n<!-- Explain the **details** for making this change. Is a new feature implemented? What existing problem does the pull request solve? How does the pull request solve these issues? Please provide enough information so that others can review your pull request. -->\r\n\r\n`scanf(\"%s\")` uses are not safe, limit the number of characters read.\r\n\r\n**Test plan**\r\n\r\n<!-- What steps should the reviewer take to test your pull request? Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots/videos. This is your time to re-check that everything works and that you covered all the edge cases -->\r\n\r\n...\r\n\r\n**Closing issues**\r\n\r\n<!-- put \"closes #XXXX\" in your comment to auto-close the issue that your PR fixes (if any). -->\r\n\r\n...\r\n",
      "```\r\nTranslation unit diagnostic at <rizin/librz/debug/p/debug_gdb.c:221:4>: 'sscanf' may overflow; destination buffer in argument 3 has size 99, but the corresponding specifier may require size 101\r\n```"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "The patch addresses a buffer overflow issue by limiting the input size, thus preventing a potential security vulnerability.\n\n**Final Classification:** Security Vulnerability Fix;  \n**Confidence:** 0.95"
}