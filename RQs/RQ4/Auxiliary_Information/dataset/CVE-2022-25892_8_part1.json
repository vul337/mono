{
  "cve_id": "CVE-2022-25892",
  "cwe_ids": [
    "CWE-Other"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
  "cvss_is_v3": true,
  "repo_name": "galkahana/HummusJS",
  "commit_msg": "corrections",
  "commit_hash": "a9bf2520ab5abb69f9328906e406fbebfb36159a",
  "git_url": "https://github.com/galkahana/HummusJS/commit/a9bf2520ab5abb69f9328906e406fbebfb36159a",
  "file_path": "src/deps/PDFWriter/DecryptionHelper.cpp",
  "func_name": "DecryptionHelper::CreateDecryptionFilterForStream",
  "func_before": "IByteReader*  DecryptionHelper::CreateDecryptionFilterForStream(PDFStreamInput* inStream, IByteReader* inToWrapStream, const std::string& inCryptName) {\n\t// note that here the original stream is returned instead of null\n\tif (!IsEncrypted() || !CanDecryptDocument())\n\t\treturn inToWrapStream;\n\n\tvoid* savedEcnryptionKey = inStream->GetMetadata(scEcnryptionKeyMetadataKey);\n\tif (!savedEcnryptionKey) {\n\t\t// sign for no encryption here\n\t\treturn inToWrapStream;\n\t}\n\tXCryptionCommon* xcryption = GetFilterForName(mXcrypts, inCryptName);\n\n\tif (xcryption && savedEcnryptionKey) {\n\t\treturn CreateDecryptionReader(inToWrapStream, *((ByteList*)savedEcnryptionKey), xcryption->IsUsingAES());\n\t}\n\telse\n\t\treturn inToWrapStream;\n\n}",
  "abstract_func_before": "IByteReader*  DecryptionHelper::CreateDecryptionFilterForStream(PDFStreamInput* VAR_0, IByteReader* VAR_1, const std::string& VAR_2) {\n\t/* COMMENT_0 */\n\tif (!IsEncrypted() || !CanDecryptDocument())\n\t\treturn VAR_1;\n\n\tvoid* VAR_3 = VAR_0->GetMetadata(VAR_4);\n\tif (!VAR_3) {\n\t\t/* COMMENT_1 */\n\t\treturn VAR_1;\n\t}\n\tXCryptionCommon* VAR_5 = GetFilterForName(VAR_6, VAR_2);\n\n\tif (VAR_5 && VAR_3) {\n\t\treturn CreateDecryptionReader(VAR_1, *((ByteList*)VAR_3), VAR_5->IsUsingAES());\n\t}\n\telse\n\t\treturn VAR_1;\n\n}",
  "func_graph_path_before": "galkahana/HummusJS/a9bf2520ab5abb69f9328906e406fbebfb36159a/DecryptionHelper.cpp/vul/before/2.json",
  "func": "IByteReader*  DecryptionHelper::CreateDecryptionFilterForStream(PDFStreamInput* inStream, IByteReader* inToWrapStream, const std::string& inCryptName) {\n\t// note that here the original stream is returned instead of null\n\tif (!IsEncrypted() || !CanDecryptDocument())\n\t\treturn inToWrapStream;\n\n\tIDeletable* savedEcnryptionKey = inStream->GetMetadata(scEcnryptionKeyMetadataKey);\n\tif (!savedEcnryptionKey) {\n\t\t// sign for no encryption here\n\t\treturn inToWrapStream;\n\t}\n\tXCryptionCommon* xcryption = GetFilterForName(mXcrypts, inCryptName);\n\n\tif (xcryption && savedEcnryptionKey) {\n\t\treturn CreateDecryptionReader(inToWrapStream, *(((Deletable<ByteList>*)savedEcnryptionKey)->GetPtr()), xcryption->IsUsingAES());\n\t}\n\telse\n\t\treturn inToWrapStream;\n\n}",
  "abstract_func": "IByteReader*  DecryptionHelper::CreateDecryptionFilterForStream(PDFStreamInput* VAR_0, IByteReader* VAR_1, const std::string& VAR_2) {\n\t/* COMMENT_0 */\n\tif (!IsEncrypted() || !CanDecryptDocument())\n\t\treturn VAR_1;\n\n\tIDeletable* VAR_3 = VAR_0->GetMetadata(VAR_4);\n\tif (!VAR_3) {\n\t\t/* COMMENT_1 */\n\t\treturn VAR_1;\n\t}\n\tXCryptionCommon* VAR_5 = GetFilterForName(VAR_6, VAR_2);\n\n\tif (VAR_5 && VAR_3) {\n\t\treturn CreateDecryptionReader(VAR_1, *(((Deletable<ByteList>*)VAR_3)->GetPtr()), VAR_5->IsUsingAES());\n\t}\n\telse\n\t\treturn VAR_1;\n\n}",
  "func_graph_path": "galkahana/HummusJS/a9bf2520ab5abb69f9328906e406fbebfb36159a/DecryptionHelper.cpp/vul/after/2.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -3,7 +3,7 @@\n \tif (!IsEncrypted() || !CanDecryptDocument())\n \t\treturn inToWrapStream;\n \n-\tvoid* savedEcnryptionKey = inStream->GetMetadata(scEcnryptionKeyMetadataKey);\n+\tIDeletable* savedEcnryptionKey = inStream->GetMetadata(scEcnryptionKeyMetadataKey);\n \tif (!savedEcnryptionKey) {\n \t\t// sign for no encryption here\n \t\treturn inToWrapStream;\n@@ -11,7 +11,7 @@\n \tXCryptionCommon* xcryption = GetFilterForName(mXcrypts, inCryptName);\n \n \tif (xcryption && savedEcnryptionKey) {\n-\t\treturn CreateDecryptionReader(inToWrapStream, *((ByteList*)savedEcnryptionKey), xcryption->IsUsingAES());\n+\t\treturn CreateDecryptionReader(inToWrapStream, *(((Deletable<ByteList>*)savedEcnryptionKey)->GetPtr()), xcryption->IsUsingAES());\n \t}\n \telse\n \t\treturn inToWrapStream;",
  "diff_line_info": {
    "deleted_lines": [
      "\tvoid* savedEcnryptionKey = inStream->GetMetadata(scEcnryptionKeyMetadataKey);",
      "\t\treturn CreateDecryptionReader(inToWrapStream, *((ByteList*)savedEcnryptionKey), xcryption->IsUsingAES());"
    ],
    "added_lines": [
      "\tIDeletable* savedEcnryptionKey = inStream->GetMetadata(scEcnryptionKeyMetadataKey);",
      "\t\treturn CreateDecryptionReader(inToWrapStream, *(((Deletable<ByteList>*)savedEcnryptionKey)->GetPtr()), xcryption->IsUsingAES());"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/galkahana/HummusJS/pull/464",
  "description": {
    "pr_info": {
      "title": "Npe corrections",
      "number": 464
    },
    "comment": [
      "corrections based on discussion in:\r\nhttps://github.com/galkahana/HummusJS/issues/463\r\n\r\n+ note recommending transition to muhammara\r\n+ safe metadata release with deletable instead of void* which never got here apparently\r\n",
      "pending on travis build enablement"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.8,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix;  \n**Confidence:** 0.8"
}