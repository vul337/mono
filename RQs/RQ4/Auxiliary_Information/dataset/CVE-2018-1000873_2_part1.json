{
  "cve_id": "CVE-2018-1000873",
  "cwe_ids": [
    "CWE-20"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "FasterXML/jackson-modules-java8",
  "commit_msg": "Avoid latency problems converting decimal to time.\n\nFixes https://github.com/FasterXML/jackson-databind/issues/2141",
  "commit_hash": "ba27ce5909dfb49bcaf753ad3e04ecb980010b0b",
  "git_url": "https://github.com/FasterXML/jackson-modules-java8/commit/ba27ce5909dfb49bcaf753ad3e04ecb980010b0b",
  "file_path": "datetime/src/test/java/com/fasterxml/jackson/datatype/jsr310/TestInstantSerialization.java",
  "func_name": "testDeserializationAsFloatEdgeCase09",
  "func_before": "@Test\n    public void testDeserializationAsFloatEdgeCase09() throws Exception\n    {\n        String input = \"-1e10000000\";\n        Instant value = MAPPER.readValue(input, Instant.class);\n        assertEquals(0, value.getEpochSecond());\n    }",
  "abstract_func_before": "@Test\n    public void testDeserializationAsFloatEdgeCase09() throws Exception\n    {\n        String VAR_0 = \"-1e10000000\";\n        Instant VAR_1 = VAR_2.readValue(VAR_0, Instant.class);\n        assertEquals(0, VAR_1.getEpochSecond());\n    }",
  "func_graph_path_before": "FasterXML/jackson-modules-java8/ba27ce5909dfb49bcaf753ad3e04ecb980010b0b/TestInstantSerialization.java/vul/before/2.json",
  "func": "@Test(timeout = 100)\n    public void testDeserializationAsFloatEdgeCase09() throws Exception\n    {\n        String input = \"-1e10000000\";\n        Instant value = MAPPER.readValue(input, Instant.class);\n        assertEquals(0, value.getEpochSecond());\n    }",
  "abstract_func": "@Test(VAR_0 = 100)\n    public void testDeserializationAsFloatEdgeCase09() throws Exception\n    {\n        String VAR_1 = \"-1e10000000\";\n        Instant VAR_2 = VAR_3.readValue(VAR_1, Instant.class);\n        assertEquals(0, VAR_2.getEpochSecond());\n    }",
  "func_graph_path": "FasterXML/jackson-modules-java8/ba27ce5909dfb49bcaf753ad3e04ecb980010b0b/TestInstantSerialization.java/vul/after/2.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,4 +1,4 @@\n-@Test\n+@Test(timeout = 100)\n     public void testDeserializationAsFloatEdgeCase09() throws Exception\n     {\n         String input = \"-1e10000000\";",
  "diff_line_info": {
    "deleted_lines": [
      "@Test"
    ],
    "added_lines": [
      "@Test(timeout = 100)"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/FasterXML/jackson-modules-java8/pull/87",
  "description": {
    "pr_info": {
      "title": "Prevent unbounded latency converting decimals to time",
      "number": 87
    },
    "comment": [
      "This change prevents latency explosions when working with high-magnitude `BigDecimal` values, while preserving the current behavior on the edge cases.\r\n\r\nIt's fixes the original bug reported in https://github.com/FasterXML/jackson-databind/issues/2141 but not the several related issues discussed therein. It builds atop my earlier PR https://github.com/FasterXML/jackson-modules-java8/pull/85\r\n\r\nOne challenge here is that the current two-step conversion process, using `BigDecimal.longValue()` and `DecimalUtils. extractNanosecondDecimal()` separately, made it hard to control the edge cases because information is lost during the former.  So I combined the two into a single helper method.\r\n\r\n(IMO these helpers shouldn't be public API, since they are bespoke semantics needed by this package, and unlikely to be usable by other contexts.  Frankly I'd prefer to make the new helper method package-protected, if that's okay with the maintainers.)",
      "Ok, yes, excellent thank you for the fix!\r\n\r\n+1 for hiding functionality (I often use `protected` as compromise to allow sub-classing but not advertise it). I also think that deprecation here makes sense, and then dropping method off in 3.0.\r\n\r\nI can make that change after merge.\r\n\r\nLet's see if I can continue discussion on remaining challenge after I merge this.\r\n\r\n\r\n"
    ]
  },
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Step-by-Step Explanation:**\n\n1. **Input Analysis**: The commit addresses a bug related to converting `BigDecimal` values, not a security issue.\n\n2. **Consistency Check**: The commit and code changes are about fixing performance issues, not security.\n\n3. **Purpose Evaluation**: The fix improves the conversion logic and test reliability, relating to core functionality.\n\n4. **Security Assessment**: No mention of security risks or CVEs.\n\n5. **Non-Security Classification**: It's a defect fix enhancing core logic, thus \"Defect Remediation & Feature Upgrades.\"\n\n**Final Classification:** Defect Remediation & Feature Upgrades; **Confidence:** 0.9"
}