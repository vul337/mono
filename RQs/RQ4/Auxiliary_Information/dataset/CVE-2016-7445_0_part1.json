{
  "cve_id": "CVE-2016-7445",
  "cwe_ids": [
    "CWE-476"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "uclouvain/openjpeg",
  "commit_msg": "Fix PNM file reading\n\nMalformed PNM file could cause a crash in opj_compress.\nChecks were added to prevent this.\n\nFixes #843\nUpdates #440",
  "commit_hash": "7c8620461f4a65e56c19633fe6a883e6cdb5f70f",
  "git_url": "https://github.com/uclouvain/openjpeg/commit/7c8620461f4a65e56c19633fe6a883e6cdb5f70f",
  "file_path": "src/bin/jp2/convert.c",
  "func_name": "read_pnm_header",
  "func_before": "static void read_pnm_header(FILE *reader, struct pnm_header *ph)\n{\n    int format, have_wh, end, ttype;\n    char idf[256], type[256];\n    char line[256];\n\n    if (fgets(line, 250, reader) == NULL)\n    {\n        fprintf(stderr,\"\\nWARNING: fgets return a NULL value\");\n        return;\n    }\n\n    if(line[0] != 'P')\n    {\n        fprintf(stderr,\"read_pnm_header:PNM:magic P missing\\n\"); return;\n    }\n    format = atoi(line + 1);\n    if(format < 1 || format > 7)\n    {\n        fprintf(stderr,\"read_pnm_header:magic format %d invalid\\n\", format);\n        return;\n    }\n    ph->format = format;\n    ttype = end = have_wh = 0;\n\n    while(fgets(line, 250, reader))\n    {\n        char *s;\n\n        if(*line == '#') continue;\n\n        s = line;\n\n        if(format == 7)\n        {\n            s = skip_idf(s, idf);\n\n            if(s == NULL || *s == 0) return;\n\n            if(strcmp(idf, \"ENDHDR\") == 0)\n            {\n                end = 1; break;\n            }\n            if(strcmp(idf, \"WIDTH\") == 0)\n            {\n                s = skip_int(s, &ph->width);\n                if(s == NULL || *s == 0) return;\n\n                continue;\n            }\n            if(strcmp(idf, \"HEIGHT\") == 0)\n            {\n                s = skip_int(s, &ph->height);\n                if(s == NULL || *s == 0) return;\n\n                continue;\n            }\n            if(strcmp(idf, \"DEPTH\") == 0)\n            {\n                s = skip_int(s, &ph->depth);\n                if(s == NULL || *s == 0) return;\n\n                continue;\n            }\n            if(strcmp(idf, \"MAXVAL\") == 0)\n            {\n                s = skip_int(s, &ph->maxval);\n                if(s == NULL || *s == 0) return;\n\n                continue;\n            }\n            if(strcmp(idf, \"TUPLTYPE\") == 0)\n            {\n                s = skip_idf(s, type);\n                if(s == NULL || *s == 0) return;\n\n                if(strcmp(type, \"BLACKANDWHITE\") == 0)\n                {\n                    ph->bw = 1; ttype = 1; continue;\n                }\n                if(strcmp(type, \"GRAYSCALE\") == 0)\n                {\n                    ph->gray = 1; ttype = 1; continue;\n                }\n                if(strcmp(type, \"GRAYSCALE_ALPHA\") == 0)\n                {\n                    ph->graya = 1; ttype = 1; continue;\n                }\n                if(strcmp(type, \"RGB\") == 0)\n                {\n                    ph->rgb = 1; ttype = 1; continue;\n                }\n                if(strcmp(type, \"RGB_ALPHA\") == 0)\n                {\n                    ph->rgba = 1; ttype = 1; continue;\n                }\n                fprintf(stderr,\"read_pnm_header:unknown P7 TUPLTYPE %s\\n\",type);\n                return;\n            }\n            fprintf(stderr,\"read_pnm_header:unknown P7 idf %s\\n\",idf);\n            return;\n        } /* if(format == 7) */\n\n        if( !have_wh)\n        {\n            s = skip_int(s, &ph->width);\n\n            s = skip_int(s, &ph->height);\n\n            have_wh = 1;\n\n            if(format == 1 || format == 4) break;\n\t\t\t\t\t\n            if(format == 2 || format == 3 || format == 5 || format == 6)\n            {\n                if (skip_int(s, &ph->maxval) != NULL) {\n                    if(ph->maxval > 65535) {\n                        return;\n                    }\n                    else {\n                        break;\n                    }\n                }\n            }\n            continue;\n        }\n        if(format == 2 || format == 3 || format == 5 || format == 6)\n        {\n            /* P2, P3, P5, P6: */\n            s = skip_int(s, &ph->maxval);\n\n            if(ph->maxval > 65535) return;\n        }\n        break;\n    }/* while(fgets( ) */\n    if(format == 2 || format == 3 || format > 4)\n    {\n        if(ph->maxval < 1 || ph->maxval > 65535) return;\n    }\n    if(ph->width < 1 || ph->height < 1) return;\n\n    if(format == 7)\n    {\n        if(!end)\n        {\n            fprintf(stderr,\"read_pnm_header:P7 without ENDHDR\\n\"); return;\n        }\n        if(ph->depth < 1 || ph->depth > 4) return;\n\n        if(ph->width && ph->height && ph->depth && ph->maxval && ttype)\n            ph->ok = 1;\n    }\n    else\n    {\n        if(format != 1 && format != 4)\n        {\n            if(ph->width && ph->height && ph->maxval) ph->ok = 1;\n        }\n        else\n        {\n            if(ph->width && ph->height) ph->ok = 1;\n            ph->maxval = 255;\n        }\n    }\n}",
  "abstract_func_before": "static void read_pnm_header(FILE *VAR_0, struct pnm_header *VAR_1)\n{\n    int VAR_2, VAR_3, VAR_4, VAR_5;\n    char VAR_6[256], VAR_7[256];\n    char VAR_8[256];\n\n    if (fgets(VAR_8, 250, VAR_0) == NULL)\n    {\n        fprintf(VAR_9,\"\\nWARNING: fgets return a NULL value\");\n        return;\n    }\n\n    if(VAR_8[0] != 'P')\n    {\n        fprintf(VAR_9,\"read_pnm_header:PNM:magic P missing\\n\"); return;\n    }\n    VAR_2 = atoi(VAR_8 + 1);\n    if(VAR_2 < 1 || VAR_2 > 7)\n    {\n        fprintf(VAR_9,\"read_pnm_header:magic format %d invalid\\n\", VAR_2);\n        return;\n    }\n    VAR_1->format = VAR_2;\n    VAR_5 = VAR_4 = VAR_3 = 0;\n\n    while(fgets(VAR_8, 250, VAR_0))\n    {\n        char *VAR_10;\n\n        if(*VAR_8 == '#') continue;\n\n        VAR_10 = VAR_8;\n\n        if(VAR_2 == 7)\n        {\n            VAR_10 = skip_idf(VAR_10, VAR_6);\n\n            if(VAR_10 == NULL || *VAR_10 == 0) return;\n\n            if(strcmp(VAR_6, \"ENDHDR\") == 0)\n            {\n                VAR_4 = 1; break;\n            }\n            if(strcmp(VAR_6, \"WIDTH\") == 0)\n            {\n                VAR_10 = skip_int(VAR_10, &VAR_1->width);\n                if(VAR_10 == NULL || *VAR_10 == 0) return;\n\n                continue;\n            }\n            if(strcmp(VAR_6, \"HEIGHT\") == 0)\n            {\n                VAR_10 = skip_int(VAR_10, &VAR_1->height);\n                if(VAR_10 == NULL || *VAR_10 == 0) return;\n\n                continue;\n            }\n            if(strcmp(VAR_6, \"DEPTH\") == 0)\n            {\n                VAR_10 = skip_int(VAR_10, &VAR_1->depth);\n                if(VAR_10 == NULL || *VAR_10 == 0) return;\n\n                continue;\n            }\n            if(strcmp(VAR_6, \"MAXVAL\") == 0)\n            {\n                VAR_10 = skip_int(VAR_10, &VAR_1->maxval);\n                if(VAR_10 == NULL || *VAR_10 == 0) return;\n\n                continue;\n            }\n            if(strcmp(VAR_6, \"TUPLTYPE\") == 0)\n            {\n                VAR_10 = skip_idf(VAR_10, VAR_7);\n                if(VAR_10 == NULL || *VAR_10 == 0) return;\n\n                if(strcmp(VAR_7, \"BLACKANDWHITE\") == 0)\n                {\n                    VAR_1->bw = 1; VAR_5 = 1; continue;\n                }\n                if(strcmp(VAR_7, \"GRAYSCALE\") == 0)\n                {\n                    VAR_1->gray = 1; VAR_5 = 1; continue;\n                }\n                if(strcmp(VAR_7, \"GRAYSCALE_ALPHA\") == 0)\n                {\n                    VAR_1->graya = 1; VAR_5 = 1; continue;\n                }\n                if(strcmp(VAR_7, \"RGB\") == 0)\n                {\n                    VAR_1->rgb = 1; VAR_5 = 1; continue;\n                }\n                if(strcmp(VAR_7, \"RGB_ALPHA\") == 0)\n                {\n                    VAR_1->rgba = 1; VAR_5 = 1; continue;\n                }\n                fprintf(VAR_9,\"read_pnm_header:unknown P7 TUPLTYPE %s\\n\",VAR_7);\n                return;\n            }\n            fprintf(VAR_9,\"read_pnm_header:unknown P7 idf %s\\n\",VAR_6);\n            return;\n        } /* COMMENT_0 */\n\n        if( !VAR_3)\n        {\n            VAR_10 = skip_int(VAR_10, &VAR_1->width);\n\n            VAR_10 = skip_int(VAR_10, &VAR_1->height);\n\n            VAR_3 = 1;\n\n            if(VAR_2 == 1 || VAR_2 == 4) break;\n\t\t\t\t\t\n            if(VAR_2 == 2 || VAR_2 == 3 || VAR_2 == 5 || VAR_2 == 6)\n            {\n                if (skip_int(VAR_10, &VAR_1->maxval) != NULL) {\n                    if(VAR_1->maxval > 65535) {\n                        return;\n                    }\n                    else {\n                        break;\n                    }\n                }\n            }\n            continue;\n        }\n        if(VAR_2 == 2 || VAR_2 == 3 || VAR_2 == 5 || VAR_2 == 6)\n        {\n            /* COMMENT_1 */\n            VAR_10 = skip_int(VAR_10, &VAR_1->maxval);\n\n            if(VAR_1->maxval > 65535) return;\n        }\n        break;\n    }/* COMMENT_2 */\n    if(VAR_2 == 2 || VAR_2 == 3 || VAR_2 > 4)\n    {\n        if(VAR_1->maxval < 1 || VAR_1->maxval > 65535) return;\n    }\n    if(VAR_1->width < 1 || VAR_1->height < 1) return;\n\n    if(VAR_2 == 7)\n    {\n        if(!VAR_4)\n        {\n            fprintf(VAR_9,\"read_pnm_header:P7 without ENDHDR\\n\"); return;\n        }\n        if(VAR_1->depth < 1 || VAR_1->depth > 4) return;\n\n        if(VAR_1->width && VAR_1->height && VAR_1->depth && VAR_1->maxval && VAR_5)\n            VAR_1->ok = 1;\n    }\n    else\n    {\n        if(VAR_2 != 1 && VAR_2 != 4)\n        {\n            if(VAR_1->width && VAR_1->height && VAR_1->maxval) VAR_1->ok = 1;\n        }\n        else\n        {\n            if(VAR_1->width && VAR_1->height) VAR_1->ok = 1;\n            VAR_1->maxval = 255;\n        }\n    }\n}",
  "func_graph_path_before": "uclouvain/openjpeg/7c8620461f4a65e56c19633fe6a883e6cdb5f70f/convert.c/vul/before/1.json",
  "func": "static void read_pnm_header(FILE *reader, struct pnm_header *ph)\n{\n    int format, end, ttype;\n    char idf[256], type[256];\n    char line[256];\n\n    if (fgets(line, 250, reader) == NULL)\n    {\n        fprintf(stderr,\"\\nWARNING: fgets return a NULL value\");\n        return;\n    }\n\n    if(line[0] != 'P')\n    {\n        fprintf(stderr,\"read_pnm_header:PNM:magic P missing\\n\"); return;\n    }\n    format = atoi(line + 1);\n    if(format < 1 || format > 7)\n    {\n        fprintf(stderr,\"read_pnm_header:magic format %d invalid\\n\", format);\n        return;\n    }\n    ph->format = format;\n    ttype = end = 0;\n\n    while(fgets(line, 250, reader))\n    {\n        char *s;\n        int allow_null = 0;\n\n        if(*line == '#') continue;\n\n        s = line;\n\n        if(format == 7)\n        {\n            s = skip_idf(s, idf);\n\n            if(s == NULL || *s == 0) return;\n\n            if(strcmp(idf, \"ENDHDR\") == 0)\n            {\n                end = 1; break;\n            }\n            if(strcmp(idf, \"WIDTH\") == 0)\n            {\n                s = skip_int(s, &ph->width);\n                if(s == NULL || *s == 0) return;\n\n                continue;\n            }\n            if(strcmp(idf, \"HEIGHT\") == 0)\n            {\n                s = skip_int(s, &ph->height);\n                if(s == NULL || *s == 0) return;\n\n                continue;\n            }\n            if(strcmp(idf, \"DEPTH\") == 0)\n            {\n                s = skip_int(s, &ph->depth);\n                if(s == NULL || *s == 0) return;\n\n                continue;\n            }\n            if(strcmp(idf, \"MAXVAL\") == 0)\n            {\n                s = skip_int(s, &ph->maxval);\n                if(s == NULL || *s == 0) return;\n\n                continue;\n            }\n            if(strcmp(idf, \"TUPLTYPE\") == 0)\n            {\n                s = skip_idf(s, type);\n                if(s == NULL || *s == 0) return;\n\n                if(strcmp(type, \"BLACKANDWHITE\") == 0)\n                {\n                    ph->bw = 1; ttype = 1; continue;\n                }\n                if(strcmp(type, \"GRAYSCALE\") == 0)\n                {\n                    ph->gray = 1; ttype = 1; continue;\n                }\n                if(strcmp(type, \"GRAYSCALE_ALPHA\") == 0)\n                {\n                    ph->graya = 1; ttype = 1; continue;\n                }\n                if(strcmp(type, \"RGB\") == 0)\n                {\n                    ph->rgb = 1; ttype = 1; continue;\n                }\n                if(strcmp(type, \"RGB_ALPHA\") == 0)\n                {\n                    ph->rgba = 1; ttype = 1; continue;\n                }\n                fprintf(stderr,\"read_pnm_header:unknown P7 TUPLTYPE %s\\n\",type);\n                return;\n            }\n            fprintf(stderr,\"read_pnm_header:unknown P7 idf %s\\n\",idf);\n            return;\n        } /* if(format == 7) */\n\n        /* Here format is in range [1,6] */\n        if (ph->width == 0) {\n            s = skip_int(s, &ph->width);\n            if ((s == NULL) || (*s == 0) || (ph->width < 1)) return;\n            allow_null = 1;\n        }\n        if (ph->height == 0) {\n            s = skip_int(s, &ph->height);\n            if ((s == NULL) && allow_null) continue;\n            if ((s == NULL) || (*s == 0) || (ph->height < 1)) return;\n            if(format == 1 || format == 4) {\n                break;\n            }\n            allow_null = 1;\n        }\n        /* here, format is in P2, P3, P5, P6 */\n        s = skip_int(s, &ph->maxval);\n        if ((s == NULL) && allow_null) continue;\n        if ((s == NULL) || (*s == 0)) return;\n        break;\n    }/* while(fgets( ) */\n    if(format == 2 || format == 3 || format > 4)\n    {\n        if(ph->maxval < 1 || ph->maxval > 65535) return;\n    }\n    if(ph->width < 1 || ph->height < 1) return;\n\n    if(format == 7)\n    {\n        if(!end)\n        {\n            fprintf(stderr,\"read_pnm_header:P7 without ENDHDR\\n\"); return;\n        }\n        if(ph->depth < 1 || ph->depth > 4) return;\n\n        if (ttype)\n            ph->ok = 1;\n    }\n    else\n    {\n        ph->ok = 1;\n        if(format == 1 || format == 4)\n        {\n            ph->maxval = 255;\n        }\n    }\n}",
  "abstract_func": "static void read_pnm_header(FILE *VAR_0, struct pnm_header *VAR_1)\n{\n    int VAR_2, VAR_3, VAR_4;\n    char VAR_5[256], VAR_6[256];\n    char VAR_7[256];\n\n    if (fgets(VAR_7, 250, VAR_0) == NULL)\n    {\n        fprintf(VAR_8,\"\\nWARNING: fgets return a NULL value\");\n        return;\n    }\n\n    if(VAR_7[0] != 'P')\n    {\n        fprintf(VAR_8,\"read_pnm_header:PNM:magic P missing\\n\"); return;\n    }\n    VAR_2 = atoi(VAR_7 + 1);\n    if(VAR_2 < 1 || VAR_2 > 7)\n    {\n        fprintf(VAR_8,\"read_pnm_header:magic format %d invalid\\n\", VAR_2);\n        return;\n    }\n    VAR_1->format = VAR_2;\n    VAR_4 = VAR_3 = 0;\n\n    while(fgets(VAR_7, 250, VAR_0))\n    {\n        char *VAR_9;\n        int VAR_10 = 0;\n\n        if(*VAR_7 == '#') continue;\n\n        VAR_9 = VAR_7;\n\n        if(VAR_2 == 7)\n        {\n            VAR_9 = skip_idf(VAR_9, VAR_5);\n\n            if(VAR_9 == NULL || *VAR_9 == 0) return;\n\n            if(strcmp(VAR_5, \"ENDHDR\") == 0)\n            {\n                VAR_3 = 1; break;\n            }\n            if(strcmp(VAR_5, \"WIDTH\") == 0)\n            {\n                VAR_9 = skip_int(VAR_9, &VAR_1->width);\n                if(VAR_9 == NULL || *VAR_9 == 0) return;\n\n                continue;\n            }\n            if(strcmp(VAR_5, \"HEIGHT\") == 0)\n            {\n                VAR_9 = skip_int(VAR_9, &VAR_1->height);\n                if(VAR_9 == NULL || *VAR_9 == 0) return;\n\n                continue;\n            }\n            if(strcmp(VAR_5, \"DEPTH\") == 0)\n            {\n                VAR_9 = skip_int(VAR_9, &VAR_1->depth);\n                if(VAR_9 == NULL || *VAR_9 == 0) return;\n\n                continue;\n            }\n            if(strcmp(VAR_5, \"MAXVAL\") == 0)\n            {\n                VAR_9 = skip_int(VAR_9, &VAR_1->maxval);\n                if(VAR_9 == NULL || *VAR_9 == 0) return;\n\n                continue;\n            }\n            if(strcmp(VAR_5, \"TUPLTYPE\") == 0)\n            {\n                VAR_9 = skip_idf(VAR_9, VAR_6);\n                if(VAR_9 == NULL || *VAR_9 == 0) return;\n\n                if(strcmp(VAR_6, \"BLACKANDWHITE\") == 0)\n                {\n                    VAR_1->bw = 1; VAR_4 = 1; continue;\n                }\n                if(strcmp(VAR_6, \"GRAYSCALE\") == 0)\n                {\n                    VAR_1->gray = 1; VAR_4 = 1; continue;\n                }\n                if(strcmp(VAR_6, \"GRAYSCALE_ALPHA\") == 0)\n                {\n                    VAR_1->graya = 1; VAR_4 = 1; continue;\n                }\n                if(strcmp(VAR_6, \"RGB\") == 0)\n                {\n                    VAR_1->rgb = 1; VAR_4 = 1; continue;\n                }\n                if(strcmp(VAR_6, \"RGB_ALPHA\") == 0)\n                {\n                    VAR_1->rgba = 1; VAR_4 = 1; continue;\n                }\n                fprintf(VAR_8,\"read_pnm_header:unknown P7 TUPLTYPE %s\\n\",VAR_6);\n                return;\n            }\n            fprintf(VAR_8,\"read_pnm_header:unknown P7 idf %s\\n\",VAR_5);\n            return;\n        } /* COMMENT_0 */\n\n        /* COMMENT_1 */\n        if (VAR_1->width == 0) {\n            VAR_9 = skip_int(VAR_9, &VAR_1->width);\n            if ((VAR_9 == NULL) || (*VAR_9 == 0) || (VAR_1->width < 1)) return;\n            VAR_10 = 1;\n        }\n        if (VAR_1->height == 0) {\n            VAR_9 = skip_int(VAR_9, &VAR_1->height);\n            if ((VAR_9 == NULL) && VAR_10) continue;\n            if ((VAR_9 == NULL) || (*VAR_9 == 0) || (VAR_1->height < 1)) return;\n            if(VAR_2 == 1 || VAR_2 == 4) {\n                break;\n            }\n            VAR_10 = 1;\n        }\n        /* COMMENT_2 */\n        VAR_9 = skip_int(VAR_9, &VAR_1->maxval);\n        if ((VAR_9 == NULL) && VAR_10) continue;\n        if ((VAR_9 == NULL) || (*VAR_9 == 0)) return;\n        break;\n    }/* COMMENT_3 */\n    if(VAR_2 == 2 || VAR_2 == 3 || VAR_2 > 4)\n    {\n        if(VAR_1->maxval < 1 || VAR_1->maxval > 65535) return;\n    }\n    if(VAR_1->width < 1 || VAR_1->height < 1) return;\n\n    if(VAR_2 == 7)\n    {\n        if(!VAR_3)\n        {\n            fprintf(VAR_8,\"read_pnm_header:P7 without ENDHDR\\n\"); return;\n        }\n        if(VAR_1->depth < 1 || VAR_1->depth > 4) return;\n\n        if (VAR_4)\n            VAR_1->ok = 1;\n    }\n    else\n    {\n        VAR_1->ok = 1;\n        if(VAR_2 == 1 || VAR_2 == 4)\n        {\n            VAR_1->maxval = 255;\n        }\n    }\n}",
  "func_graph_path": "uclouvain/openjpeg/7c8620461f4a65e56c19633fe6a883e6cdb5f70f/convert.c/vul/after/1.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,6 +1,6 @@\n static void read_pnm_header(FILE *reader, struct pnm_header *ph)\n {\n-    int format, have_wh, end, ttype;\n+    int format, end, ttype;\n     char idf[256], type[256];\n     char line[256];\n \n@@ -21,11 +21,12 @@\n         return;\n     }\n     ph->format = format;\n-    ttype = end = have_wh = 0;\n+    ttype = end = 0;\n \n     while(fgets(line, 250, reader))\n     {\n         char *s;\n+        int allow_null = 0;\n \n         if(*line == '#') continue;\n \n@@ -101,36 +102,25 @@\n             return;\n         } /* if(format == 7) */\n \n-        if( !have_wh)\n-        {\n+        /* Here format is in range [1,6] */\n+        if (ph->width == 0) {\n             s = skip_int(s, &ph->width);\n-\n+            if ((s == NULL) || (*s == 0) || (ph->width < 1)) return;\n+            allow_null = 1;\n+        }\n+        if (ph->height == 0) {\n             s = skip_int(s, &ph->height);\n-\n-            have_wh = 1;\n-\n-            if(format == 1 || format == 4) break;\n-\t\t\t\t\t\n-            if(format == 2 || format == 3 || format == 5 || format == 6)\n-            {\n-                if (skip_int(s, &ph->maxval) != NULL) {\n-                    if(ph->maxval > 65535) {\n-                        return;\n-                    }\n-                    else {\n-                        break;\n-                    }\n-                }\n+            if ((s == NULL) && allow_null) continue;\n+            if ((s == NULL) || (*s == 0) || (ph->height < 1)) return;\n+            if(format == 1 || format == 4) {\n+                break;\n             }\n-            continue;\n+            allow_null = 1;\n         }\n-        if(format == 2 || format == 3 || format == 5 || format == 6)\n-        {\n-            /* P2, P3, P5, P6: */\n-            s = skip_int(s, &ph->maxval);\n-\n-            if(ph->maxval > 65535) return;\n-        }\n+        /* here, format is in P2, P3, P5, P6 */\n+        s = skip_int(s, &ph->maxval);\n+        if ((s == NULL) && allow_null) continue;\n+        if ((s == NULL) || (*s == 0)) return;\n         break;\n     }/* while(fgets( ) */\n     if(format == 2 || format == 3 || format > 4)\n@@ -147,18 +137,14 @@\n         }\n         if(ph->depth < 1 || ph->depth > 4) return;\n \n-        if(ph->width && ph->height && ph->depth && ph->maxval && ttype)\n+        if (ttype)\n             ph->ok = 1;\n     }\n     else\n     {\n-        if(format != 1 && format != 4)\n+        ph->ok = 1;\n+        if(format == 1 || format == 4)\n         {\n-            if(ph->width && ph->height && ph->maxval) ph->ok = 1;\n-        }\n-        else\n-        {\n-            if(ph->width && ph->height) ph->ok = 1;\n             ph->maxval = 255;\n         }\n     }",
  "diff_line_info": {
    "deleted_lines": [
      "    int format, have_wh, end, ttype;",
      "    ttype = end = have_wh = 0;",
      "        if( !have_wh)",
      "        {",
      "",
      "",
      "            have_wh = 1;",
      "",
      "            if(format == 1 || format == 4) break;",
      "\t\t\t\t\t",
      "            if(format == 2 || format == 3 || format == 5 || format == 6)",
      "            {",
      "                if (skip_int(s, &ph->maxval) != NULL) {",
      "                    if(ph->maxval > 65535) {",
      "                        return;",
      "                    }",
      "                    else {",
      "                        break;",
      "                    }",
      "                }",
      "            continue;",
      "        if(format == 2 || format == 3 || format == 5 || format == 6)",
      "        {",
      "            /* P2, P3, P5, P6: */",
      "            s = skip_int(s, &ph->maxval);",
      "",
      "            if(ph->maxval > 65535) return;",
      "        }",
      "        if(ph->width && ph->height && ph->depth && ph->maxval && ttype)",
      "        if(format != 1 && format != 4)",
      "            if(ph->width && ph->height && ph->maxval) ph->ok = 1;",
      "        }",
      "        else",
      "        {",
      "            if(ph->width && ph->height) ph->ok = 1;"
    ],
    "added_lines": [
      "    int format, end, ttype;",
      "    ttype = end = 0;",
      "        int allow_null = 0;",
      "        /* Here format is in range [1,6] */",
      "        if (ph->width == 0) {",
      "            if ((s == NULL) || (*s == 0) || (ph->width < 1)) return;",
      "            allow_null = 1;",
      "        }",
      "        if (ph->height == 0) {",
      "            if ((s == NULL) && allow_null) continue;",
      "            if ((s == NULL) || (*s == 0) || (ph->height < 1)) return;",
      "            if(format == 1 || format == 4) {",
      "                break;",
      "            allow_null = 1;",
      "        /* here, format is in P2, P3, P5, P6 */",
      "        s = skip_int(s, &ph->maxval);",
      "        if ((s == NULL) && allow_null) continue;",
      "        if ((s == NULL) || (*s == 0)) return;",
      "        if (ttype)",
      "        ph->ok = 1;",
      "        if(format == 1 || format == 4)"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/uclouvain/openjpeg/pull/847",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/uclouvain/openjpeg/pull/847: 403 Client Error: Forbidden for url: https://api.github.com/repos/uclouvain/openjpeg/pulls/847",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 1.0"
}