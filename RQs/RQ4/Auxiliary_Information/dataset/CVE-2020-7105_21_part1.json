{
  "cve_id": "CVE-2020-7105",
  "cwe_ids": [
    "CWE-476"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "redis/hiredis",
  "commit_msg": "Safe allocation wrappers (#754)\n\nCreate allocation wrappers with a configurable OOM handler (defaults to abort()).\r\n\r\nSee #752, #747",
  "commit_hash": "669ac9d0c843f9ccf07d4969ff6bff75fafee01f",
  "git_url": "https://github.com/redis/hiredis/commit/669ac9d0c843f9ccf07d4969ff6bff75fafee01f",
  "file_path": "ssl.c",
  "func_name": "initOpensslLocks",
  "func_before": "static void initOpensslLocks(void) {\n    unsigned ii, nlocks;\n    if (CRYPTO_get_locking_callback() != NULL) {\n        /* Someone already set the callback before us. Don't destroy it! */\n        return;\n    }\n    nlocks = CRYPTO_num_locks();\n    ossl_locks = malloc(sizeof(*ossl_locks) * nlocks);\n    for (ii = 0; ii < nlocks; ii++) {\n        sslLockInit(ossl_locks + ii);\n    }\n    CRYPTO_set_locking_callback(opensslDoLock);\n}",
  "abstract_func_before": "static void initOpensslLocks(void) {\n    unsigned VAR_0, VAR_1;\n    if (CRYPTO_get_locking_callback() != NULL) {\n        /* COMMENT_0 */\n        return;\n    }\n    VAR_1 = CRYPTO_num_locks();\n    VAR_2 = malloc(sizeof(*VAR_2) * VAR_1);\n    for (VAR_0 = 0; VAR_0 < VAR_1; VAR_0++) {\n        sslLockInit(VAR_2 + VAR_0);\n    }\n    CRYPTO_set_locking_callback(VAR_3);\n}",
  "func_graph_path_before": "redis/hiredis/669ac9d0c843f9ccf07d4969ff6bff75fafee01f/ssl.c/vul/before/0.json",
  "func": "static void initOpensslLocks(void) {\n    unsigned ii, nlocks;\n    if (CRYPTO_get_locking_callback() != NULL) {\n        /* Someone already set the callback before us. Don't destroy it! */\n        return;\n    }\n    nlocks = CRYPTO_num_locks();\n    ossl_locks = hi_malloc(sizeof(*ossl_locks) * nlocks);\n    for (ii = 0; ii < nlocks; ii++) {\n        sslLockInit(ossl_locks + ii);\n    }\n    CRYPTO_set_locking_callback(opensslDoLock);\n}",
  "abstract_func": "static void initOpensslLocks(void) {\n    unsigned VAR_0, VAR_1;\n    if (CRYPTO_get_locking_callback() != NULL) {\n        /* COMMENT_0 */\n        return;\n    }\n    VAR_1 = CRYPTO_num_locks();\n    VAR_2 = hi_malloc(sizeof(*VAR_2) * VAR_1);\n    for (VAR_0 = 0; VAR_0 < VAR_1; VAR_0++) {\n        sslLockInit(VAR_2 + VAR_0);\n    }\n    CRYPTO_set_locking_callback(VAR_3);\n}",
  "func_graph_path": "redis/hiredis/669ac9d0c843f9ccf07d4969ff6bff75fafee01f/ssl.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -5,7 +5,7 @@\n         return;\n     }\n     nlocks = CRYPTO_num_locks();\n-    ossl_locks = malloc(sizeof(*ossl_locks) * nlocks);\n+    ossl_locks = hi_malloc(sizeof(*ossl_locks) * nlocks);\n     for (ii = 0; ii < nlocks; ii++) {\n         sslLockInit(ossl_locks + ii);\n     }",
  "diff_line_info": {
    "deleted_lines": [
      "    ossl_locks = malloc(sizeof(*ossl_locks) * nlocks);"
    ],
    "added_lines": [
      "    ossl_locks = hi_malloc(sizeof(*ossl_locks) * nlocks);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/redis/hiredis/pull/754",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/redis/hiredis/pull/754: 403 Client Error: Forbidden for url: https://api.github.com/repos/redis/hiredis/pulls/754",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "Final Classification: Security Vulnerability Fix\nConfidence: 0.9\n\nThe patch introduces allocation wrappers that handle out-of-memory scenarios, mitigating potential security risks related to improper memory management. The changes are consistent with the intent to improve security, replacing standard functions with safer alternatives."
}