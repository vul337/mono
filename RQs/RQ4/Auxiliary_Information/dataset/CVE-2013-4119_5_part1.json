{
  "cve_id": "CVE-2013-4119",
  "cwe_ids": [
    "CWE-476"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "FreeRDP",
  "commit_msg": "nla: invalidate sec handle after creation\n\nIf sec pointer isn't invalidated after creation it is not possible\nto check if the upper and lower pointers are valid.\n\nThis fixes a segfault in the server part if the client disconnects before\nthe authentication was finished.",
  "commit_hash": "0773bb9303d24473fe1185d85a424dfe159aff53",
  "git_url": "https://github.com/FreeRDP/FreeRDP/commit/0773bb9303d24473fe1185d85a424dfe159aff53",
  "file_path": "libfreerdp/core/transport.c",
  "func_name": "transport_accept_nla",
  "func_before": "BOOL transport_accept_nla(rdpTransport* transport)\n{\n\tfreerdp* instance;\n\trdpSettings* settings;\n\n\tif (transport->TlsIn == NULL)\n\t\ttransport->TlsIn = tls_new(transport->settings);\n\n\tif (transport->TlsOut == NULL)\n\t\ttransport->TlsOut = transport->TlsIn;\n\n\ttransport->layer = TRANSPORT_LAYER_TLS;\n\ttransport->TlsIn->sockfd = transport->TcpIn->sockfd;\n\n\tif (tls_accept(transport->TlsIn, transport->settings->CertificateFile, transport->settings->PrivateKeyFile) != TRUE)\n\t\treturn FALSE;\n\n\t/* Network Level Authentication */\n\n\tif (transport->settings->Authentication != TRUE)\n\t\treturn TRUE;\n\n\tsettings = transport->settings;\n\tinstance = (freerdp*) settings->instance;\n\n\tif (transport->credssp == NULL)\n\t\ttransport->credssp = credssp_new(instance, transport, settings);\n\n\tif (credssp_authenticate(transport->credssp) < 0)\n\t{\n\t\tfprintf(stderr, \"client authentication failure\\n\");\n\t\tcredssp_free(transport->credssp);\n\t\treturn FALSE;\n\t}\n\n\t/* don't free credssp module yet, we need to copy the credentials from it first */\n\n\treturn TRUE;\n}",
  "abstract_func_before": "BOOL transport_accept_nla(rdpTransport* VAR_0)\n{\n\tfreerdp* VAR_1;\n\trdpSettings* VAR_2;\n\n\tif (VAR_0->TlsIn == NULL)\n\t\tVAR_0->TlsIn = tls_new(VAR_0->settings);\n\n\tif (VAR_0->TlsOut == NULL)\n\t\tVAR_0->TlsOut = VAR_0->TlsIn;\n\n\tVAR_0->layer = VAR_3;\n\tVAR_0->TlsIn->sockfd = VAR_0->TcpIn->sockfd;\n\n\tif (tls_accept(VAR_0->TlsIn, VAR_0->settings->CertificateFile, VAR_0->settings->PrivateKeyFile) != TRUE)\n\t\treturn FALSE;\n\n\t/* COMMENT_0 */\n\n\tif (VAR_0->settings->Authentication != TRUE)\n\t\treturn TRUE;\n\n\tVAR_2 = VAR_0->settings;\n\tVAR_1 = (freerdp*) VAR_2->instance;\n\n\tif (VAR_0->credssp == NULL)\n\t\tVAR_0->credssp = credssp_new(VAR_1, VAR_0, VAR_2);\n\n\tif (credssp_authenticate(VAR_0->credssp) < 0)\n\t{\n\t\tfprintf(VAR_4, \"client authentication failure\\n\");\n\t\tcredssp_free(VAR_0->credssp);\n\t\treturn FALSE;\n\t}\n\n\t/* COMMENT_1 */\n\n\treturn TRUE;\n}",
  "func_graph_path_before": "FreeRDP/0773bb9303d24473fe1185d85a424dfe159aff53/transport.c/vul/before/1.json",
  "func": "BOOL transport_accept_nla(rdpTransport* transport)\n{\n\tfreerdp* instance;\n\trdpSettings* settings;\n\n\tif (transport->TlsIn == NULL)\n\t\ttransport->TlsIn = tls_new(transport->settings);\n\n\tif (transport->TlsOut == NULL)\n\t\ttransport->TlsOut = transport->TlsIn;\n\n\ttransport->layer = TRANSPORT_LAYER_TLS;\n\ttransport->TlsIn->sockfd = transport->TcpIn->sockfd;\n\n\tif (tls_accept(transport->TlsIn, transport->settings->CertificateFile, transport->settings->PrivateKeyFile) != TRUE)\n\t\treturn FALSE;\n\n\t/* Network Level Authentication */\n\n\tif (transport->settings->Authentication != TRUE)\n\t\treturn TRUE;\n\n\tsettings = transport->settings;\n\tinstance = (freerdp*) settings->instance;\n\n\tif (transport->credssp == NULL)\n\t\ttransport->credssp = credssp_new(instance, transport, settings);\n\n\tif (credssp_authenticate(transport->credssp) < 0)\n\t{\n\t\tfprintf(stderr, \"client authentication failure\\n\");\n\t\tcredssp_free(transport->credssp);\n\t\ttransport->credssp = NULL;\n\t\treturn FALSE;\n\t}\n\n\t/* don't free credssp module yet, we need to copy the credentials from it first */\n\n\treturn TRUE;\n}",
  "abstract_func": "BOOL transport_accept_nla(rdpTransport* VAR_0)\n{\n\tfreerdp* VAR_1;\n\trdpSettings* VAR_2;\n\n\tif (VAR_0->TlsIn == NULL)\n\t\tVAR_0->TlsIn = tls_new(VAR_0->settings);\n\n\tif (VAR_0->TlsOut == NULL)\n\t\tVAR_0->TlsOut = VAR_0->TlsIn;\n\n\tVAR_0->layer = VAR_3;\n\tVAR_0->TlsIn->sockfd = VAR_0->TcpIn->sockfd;\n\n\tif (tls_accept(VAR_0->TlsIn, VAR_0->settings->CertificateFile, VAR_0->settings->PrivateKeyFile) != TRUE)\n\t\treturn FALSE;\n\n\t/* COMMENT_0 */\n\n\tif (VAR_0->settings->Authentication != TRUE)\n\t\treturn TRUE;\n\n\tVAR_2 = VAR_0->settings;\n\tVAR_1 = (freerdp*) VAR_2->instance;\n\n\tif (VAR_0->credssp == NULL)\n\t\tVAR_0->credssp = credssp_new(VAR_1, VAR_0, VAR_2);\n\n\tif (credssp_authenticate(VAR_0->credssp) < 0)\n\t{\n\t\tfprintf(VAR_4, \"client authentication failure\\n\");\n\t\tcredssp_free(VAR_0->credssp);\n\t\tVAR_0->credssp = NULL;\n\t\treturn FALSE;\n\t}\n\n\t/* COMMENT_1 */\n\n\treturn TRUE;\n}",
  "func_graph_path": "FreeRDP/0773bb9303d24473fe1185d85a424dfe159aff53/transport.c/vul/after/1.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -30,6 +30,7 @@\n \t{\n \t\tfprintf(stderr, \"client authentication failure\\n\");\n \t\tcredssp_free(transport->credssp);\n+\t\ttransport->credssp = NULL;\n \t\treturn FALSE;\n \t}\n ",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "\t\ttransport->credssp = NULL;"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/FreeRDP/FreeRDP/pull/1330",
  "description": {
    "pr_info": {
      "title": "Misc fixes",
      "number": 1330
    },
    "comment": [
      "- updated certificate mismatch messages properly fixes #1043\n- fixed a server side segfault if client disconnects before authentication was finished\n",
      "Test PASSed.\nRefer to this link for build results: https://ci.freerdp.com/job/Github%20pull%20request%20tester/140/\n"
    ]
  },
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Defect Remediation & Feature Upgrades; **Confidence:** 0.9\n\n**Step-by-Step Explanation:**\n\n1. **Input Analysis:** The commit message and diff address a segfault issue when a client disconnects before authentication. The code change invalidates a pointer to prevent dangling references.\n\n2. **Consistency Check:** The commit message aligns with the code change, focusing on resource cleanup.\n\n3. **Purpose Evaluation:** The change fixes a crash, which is a non-security bug in core business logic.\n\n4. **Security Assessment:** The patch isn't a security fix; it prevents a crash but doesn't address exploited vulnerabilities like data exposure or unauthorized access.\n\n5. **Non-Security Classification:** This falls under defect remediation as it resolves a functional bug, not a security issue.\n\n6. **Confidence Scoring:** High confidence (0.9) because the intent is clear and the change is straightforward."
}