{
  "cve_id": "CVE-2020-10576",
  "cwe_ids": [
    "CWE-362"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "meetecho/janus-gateway",
  "commit_msg": "Fixes to leaks and race conditions in VoiceMail plugin",
  "commit_hash": "eb99ac8674c554bab6775f4378b24e991b4a2fa1",
  "git_url": "https://github.com/meetecho/janus-gateway/commit/eb99ac8674c554bab6775f4378b24e991b4a2fa1",
  "file_path": "plugins/janus_voicemail.c",
  "func_name": "janus_voicemail_handler",
  "func_before": "static void *janus_voicemail_handler(void *data) {\n\tJANUS_LOG(LOG_VERB, \"Joining VoiceMail handler thread\\n\");\n\tjanus_voicemail_message *msg = NULL;\n\tint error_code = 0;\n\tchar error_cause[512];\n\tjson_t *root = NULL;\n\twhile(g_atomic_int_get(&initialized) && !g_atomic_int_get(&stopping)) {\n\t\tmsg = g_async_queue_pop(messages);\n\t\tif(msg == &exit_message)\n\t\t\tbreak;\n\t\tif(msg->handle == NULL) {\n\t\t\tjanus_voicemail_message_free(msg);\n\t\t\tcontinue;\n\t\t}\n\t\tjanus_mutex_lock(&sessions_mutex);\n\t\tjanus_voicemail_session *session = janus_voicemail_lookup_session(msg->handle);\n\t\tif(!session) {\n\t\t\tjanus_mutex_unlock(&sessions_mutex);\n\t\t\tJANUS_LOG(LOG_ERR, \"No session associated with this handle...\\n\");\n\t\t\tjanus_voicemail_message_free(msg);\n\t\t\tcontinue;\n\t\t}\n\t\tif(g_atomic_int_get(&session->destroyed)) {\n\t\t\tjanus_mutex_unlock(&sessions_mutex);\n\t\t\tjanus_voicemail_message_free(msg);\n\t\t\tcontinue;\n\t\t}\n\t\tjanus_mutex_unlock(&sessions_mutex);\n\t\t/* Handle request */\n\t\terror_code = 0;\n\t\troot = msg->message;\n\t\tif(msg->message == NULL) {\n\t\t\tJANUS_LOG(LOG_ERR, \"No message??\\n\");\n\t\t\terror_code = JANUS_VOICEMAIL_ERROR_NO_MESSAGE;\n\t\t\tg_snprintf(error_cause, 512, \"%s\", \"No message??\");\n\t\t\tgoto error;\n\t\t}\n\t\tif(!json_is_object(root)) {\n\t\t\tJANUS_LOG(LOG_ERR, \"JSON error: not an object\\n\");\n\t\t\terror_code = JANUS_VOICEMAIL_ERROR_INVALID_JSON;\n\t\t\tg_snprintf(error_cause, 512, \"JSON error: not an object\");\n\t\t\tgoto error;\n\t\t}\n\t\t/* Get the request first */\n\t\tJANUS_VALIDATE_JSON_OBJECT(root, request_parameters,\n\t\t\terror_code, error_cause, TRUE,\n\t\t\tJANUS_VOICEMAIL_ERROR_MISSING_ELEMENT, JANUS_VOICEMAIL_ERROR_INVALID_ELEMENT);\n\t\tif(error_code != 0)\n\t\t\tgoto error;\n\t\tjson_t *request = json_object_get(root, \"request\");\n\t\tconst char *request_text = json_string_value(request);\n\t\tjson_t *event = NULL;\n\t\tgboolean sdp_update = FALSE;\n\t\tif(json_object_get(msg->jsep, \"update\") != NULL)\n\t\t\tsdp_update = json_is_true(json_object_get(msg->jsep, \"update\"));\n\t\tif(!strcasecmp(request_text, \"record\")) {\n\t\t\tJANUS_LOG(LOG_VERB, \"Starting new recording\\n\");\n\t\t\tif(session->file != NULL) {\n\t\t\t\tJANUS_LOG(LOG_ERR, \"Already recording (%s)\\n\", session->filename ? session->filename : \"??\");\n\t\t\t\terror_code = JANUS_VOICEMAIL_ERROR_ALREADY_RECORDING;\n\t\t\t\tg_snprintf(error_cause, 512, \"Already recording\");\n\t\t\t\tgoto error;\n\t\t\t}\n\t\t\tsession->stream = g_malloc0(sizeof(ogg_stream_state));\n\t\t\tif(ogg_stream_init(session->stream, rand()) < 0) {\n\t\t\t\tJANUS_LOG(LOG_ERR, \"Couldn't initialize Ogg stream state\\n\");\n\t\t\t\terror_code = JANUS_VOICEMAIL_ERROR_LIBOGG_ERROR;\n\t\t\t\tg_snprintf(error_cause, 512, \"Couldn't initialize Ogg stream state\\n\");\n\t\t\t\tgoto error;\n\t\t\t}\n\t\t\tsession->file = fopen(session->filename, \"wb\");\n\t\t\tif(session->file == NULL) {\n\t\t\t\tJANUS_LOG(LOG_ERR, \"Couldn't open output file\\n\");\n\t\t\t\terror_code = JANUS_VOICEMAIL_ERROR_IO_ERROR;\n\t\t\t\tg_snprintf(error_cause, 512, \"Couldn't open output file\");\n\t\t\t\tgoto error;\n\t\t\t}\n\t\t\tsession->seq = 0;\n\t\t\t/* Write stream headers */\n\t\t\togg_packet *op = op_opushead();\n\t\t\togg_stream_packetin(session->stream, op);\n\t\t\top_free(op);\n\t\t\top = op_opustags();\n\t\t\togg_stream_packetin(session->stream, op);\n\t\t\top_free(op);\n\t\t\togg_flush(session);\n\t\t\t/* Done: now wait for the setup_media callback to be called */\n\t\t\tevent = json_object();\n\t\t\tjson_object_set_new(event, \"voicemail\", json_string(\"event\"));\n\t\t\tjson_object_set_new(event, \"status\", json_string(session->started ? \"started\" : \"starting\"));\n\t\t\t/* Also notify event handlers */\n\t\t\tif(notify_events && gateway->events_is_enabled()) {\n\t\t\t\tjson_t *info = json_object();\n\t\t\t\tjson_object_set_new(info, \"event\", json_string(\"starting\"));\n\t\t\t\tgateway->notify_event(&janus_voicemail_plugin, session->handle, info);\n\t\t\t}\n\t\t} else if(!strcasecmp(request_text, \"update\")) {\n\t\t\t/* Only needed in case of renegotiations and ICE restarts (but with 10s messages is this worth it?) */\n\t\t\tJANUS_LOG(LOG_VERB, \"Updating existing recording\\n\");\n\t\t\tif(session->stream == NULL || !session->started) {\n\t\t\t\tJANUS_LOG(LOG_ERR, \"Invalid state (not recording)\\n\");\n\t\t\t\terror_code = JANUS_VOICEMAIL_ERROR_INVALID_STATE;\n\t\t\t\tg_snprintf(error_cause, 512, \"Invalid state (not recording)\");\n\t\t\t\tgoto error;\n\t\t\t}\n\t\t\tsdp_update = TRUE;\n\t\t\tevent = json_object();\n\t\t\tjson_object_set_new(event, \"voicemail\", json_string(\"event\"));\n\t\t\tjson_object_set_new(event, \"status\", json_string(\"updating\"));\n\t\t} else if(!strcasecmp(request_text, \"stop\")) {\n\t\t\t/* Stop the recording */\n\t\t\tsession->started = FALSE;\n\t\t\tsession->stopping = TRUE;\n\t\t\tif(session->file)\n\t\t\t\tfclose(session->file);\n\t\t\tsession->file = NULL;\n\t\t\tif(session->stream)\n\t\t\t\togg_stream_destroy(session->stream);\n\t\t\tsession->stream = NULL;\n\t\t\t/* Done: send the event and close the handle */\n\t\t\tevent = json_object();\n\t\t\tjson_object_set_new(event, \"voicemail\", json_string(\"event\"));\n\t\t\tjson_object_set_new(event, \"status\", json_string(\"done\"));\n\t\t\tchar url[1024];\n\t\t\tg_snprintf(url, 1024, \"%s/janus-voicemail-%\"SCNu64\".opus\", recordings_base, session->recording_id);\n\t\t\tjson_object_set_new(event, \"recording\", json_string(url));\n\t\t\t/* Also notify event handlers */\n\t\t\tif(notify_events && gateway->events_is_enabled()) {\n\t\t\t\tjson_t *info = json_object();\n\t\t\t\tjson_object_set_new(info, \"event\", json_string(\"done\"));\n\t\t\t\tgateway->notify_event(&janus_voicemail_plugin, session->handle, info);\n\t\t\t}\n\t\t} else {\n\t\t\tJANUS_LOG(LOG_ERR, \"Unknown request '%s'\\n\", request_text);\n\t\t\terror_code = JANUS_VOICEMAIL_ERROR_INVALID_REQUEST;\n\t\t\tg_snprintf(error_cause, 512, \"Unknown request '%s'\", request_text);\n\t\t\tgoto error;\n\t\t}\n\n\t\t/* Prepare JSON event */\n\t\tJANUS_LOG(LOG_VERB, \"Preparing JSON event as a reply\\n\");\n\t\t/* Any SDP to handle? */\n\t\tconst char *msg_sdp_type = json_string_value(json_object_get(msg->jsep, \"type\"));\n\t\tconst char *msg_sdp = json_string_value(json_object_get(msg->jsep, \"sdp\"));\n\t\tif(!msg_sdp) {\n\t\t\tint ret = gateway->push_event(msg->handle, &janus_voicemail_plugin, msg->transaction, event, NULL);\n\t\t\tJANUS_LOG(LOG_VERB, \"  >> %d (%s)\\n\", ret, janus_get_api_error(ret));\n\t\t\tjson_decref(event);\n\t\t} else {\n\t\t\tJANUS_LOG(LOG_VERB, \"This is involving a negotiation (%s) as well:\\n%s\\n\", msg_sdp_type, msg_sdp);\n\t\t\tconst char *type = NULL;\n\t\t\tif(!strcasecmp(msg_sdp_type, \"offer\"))\n\t\t\t\ttype = \"answer\";\n\t\t\tif(!strcasecmp(msg_sdp_type, \"answer\"))\n\t\t\t\ttype = \"offer\";\n\t\t\tif(sdp_update) {\n\t\t\t\t/* Renegotiation: make sure the user provided an offer, and send answer */\n\t\t\t\tJANUS_LOG(LOG_VERB, \"Request to update existing connection\\n\");\n\t\t\t\tsession->sdp_version++;\t\t/* This needs to be increased when it changes */\n\t\t\t} else {\n\t\t\t\t/* New PeerConnection */\n\t\t\t\tsession->sdp_version = 1;\t/* This needs to be increased when it changes */\n\t\t\t\tsession->sdp_sessid = janus_get_real_time();\n\t\t\t}\n\t\t\t/* Fill the SDP template and use that as our answer */\n\t\t\tchar sdp[1024];\n\t\t\t/* What is the Opus payload type? */\n\t\t\tint opus_pt = janus_get_codec_pt(msg_sdp, \"opus\");\n\t\t\tJANUS_LOG(LOG_VERB, \"Opus payload type is %d\\n\", opus_pt);\n\t\t\tg_snprintf(sdp, 1024, sdp_template,\n\t\t\t\tsession->sdp_sessid,\n\t\t\t\tsession->sdp_version,\n\t\t\t\tsession->recording_id,\t\t\t/* Recording ID */\n\t\t\t\topus_pt,\t\t\t\t\t\t/* Opus payload type */\n\t\t\t\topus_pt\t\t\t\t\t\t\t/* Opus payload type */);\n\t\t\t/* Did the peer negotiate video? */\n\t\t\tif(strstr(msg_sdp, \"m=video\") != NULL) {\n\t\t\t\t/* If so, reject it */\n\t\t\t\tg_strlcat(sdp, \"m=video 0 RTP/SAVPF 0\\r\\n\", 1024);\n\t\t\t}\n\t\t\tjson_t *jsep = json_pack(\"{ssss}\", \"type\", type, \"sdp\", sdp);\n\t\t\t/* How long will the Janus core take to push the event? */\n\t\t\tg_atomic_int_set(&session->hangingup, 0);\n\t\t\tgint64 start = janus_get_monotonic_time();\n\t\t\tint res = gateway->push_event(msg->handle, &janus_voicemail_plugin, msg->transaction, event, jsep);\n\t\t\tJANUS_LOG(LOG_VERB, \"  >> Pushing event: %d (took %\"SCNu64\" us)\\n\", res, janus_get_monotonic_time()-start);\n\t\t\tjson_decref(event);\n\t\t\tjson_decref(jsep);\n\t\t\tif(res != JANUS_OK) {\n\t\t\t\t/* TODO Failed to negotiate? We should remove this participant */\n\t\t\t}\n\t\t}\n\t\tjanus_voicemail_message_free(msg);\n\n\t\tif(session->stopping) {\n\t\t\tgateway->end_session(session->handle);\n\t\t}\n\n\t\tcontinue;\n\nerror:\n\t\t{\n\t\t\t/* Prepare JSON error event */\n\t\t\tjson_t *event = json_object();\n\t\t\tjson_object_set_new(event, \"voicemail\", json_string(\"event\"));\n\t\t\tjson_object_set_new(event, \"error_code\", json_integer(error_code));\n\t\t\tjson_object_set_new(event, \"error\", json_string(error_cause));\n\t\t\tint ret = gateway->push_event(msg->handle, &janus_voicemail_plugin, msg->transaction, event, NULL);\n\t\t\tJANUS_LOG(LOG_VERB, \"  >> Pushing event: %d (%s)\\n\", ret, janus_get_api_error(ret));\n\t\t\tjson_decref(event);\n\t\t\tjanus_voicemail_message_free(msg);\n\t\t}\n\t}\n\tJANUS_LOG(LOG_VERB, \"Leaving VoiceMail handler thread\\n\");\n\treturn NULL;\n}",
  "abstract_func_before": "static void *janus_voicemail_handler(void *VAR_0) {\n\tJANUS_LOG(VAR_1, \"Joining VoiceMail handler thread\\n\");\n\tjanus_voicemail_message *VAR_2 = NULL;\n\tint VAR_3 = 0;\n\tchar VAR_4[512];\n\tjson_t *VAR_5 = NULL;\n\twhile(g_atomic_int_get(&VAR_6) && !g_atomic_int_get(&VAR_7)) {\n\t\tVAR_2 = g_async_queue_pop(VAR_8);\n\t\tif(VAR_2 == &VAR_9)\n\t\t\tbreak;\n\t\tif(VAR_2->handle == NULL) {\n\t\t\tjanus_voicemail_message_free(VAR_2);\n\t\t\tcontinue;\n\t\t}\n\t\tjanus_mutex_lock(&VAR_10);\n\t\tjanus_voicemail_session *VAR_11 = janus_voicemail_lookup_session(VAR_2->handle);\n\t\tif(!VAR_11) {\n\t\t\tjanus_mutex_unlock(&VAR_10);\n\t\t\tJANUS_LOG(VAR_12, \"No session associated with this handle...\\n\");\n\t\t\tjanus_voicemail_message_free(VAR_2);\n\t\t\tcontinue;\n\t\t}\n\t\tif(g_atomic_int_get(&VAR_11->destroyed)) {\n\t\t\tjanus_mutex_unlock(&VAR_10);\n\t\t\tjanus_voicemail_message_free(VAR_2);\n\t\t\tcontinue;\n\t\t}\n\t\tjanus_mutex_unlock(&VAR_10);\n\t\t/* COMMENT_0 */\n\t\tVAR_3 = 0;\n\t\tVAR_5 = VAR_2->message;\n\t\tif(VAR_2->message == NULL) {\n\t\t\tJANUS_LOG(VAR_12, \"No message??\\n\");\n\t\t\tVAR_3 = VAR_13;\n\t\t\tg_snprintf(VAR_4, 512, \"%s\", \"No message??\");\n\t\t\tgoto error;\n\t\t}\n\t\tif(!json_is_object(VAR_5)) {\n\t\t\tJANUS_LOG(VAR_12, \"JSON error: not an object\\n\");\n\t\t\tVAR_3 = VAR_14;\n\t\t\tg_snprintf(VAR_4, 512, \"JSON error: not an object\");\n\t\t\tgoto error;\n\t\t}\n\t\t/* COMMENT_1 */\n\t\tJANUS_VALIDATE_JSON_OBJECT(VAR_5, VAR_15,\n\t\t\tVAR_3, VAR_4, TRUE,\n\t\t\tVAR_16, VAR_17);\n\t\tif(VAR_3 != 0)\n\t\t\tgoto error;\n\t\tjson_t *VAR_18 = json_object_get(VAR_5, \"request\");\n\t\tconst char *VAR_19 = json_string_value(VAR_18);\n\t\tjson_t *VAR_20 = NULL;\n\t\tgboolean VAR_21 = FALSE;\n\t\tif(json_object_get(VAR_2->jsep, \"update\") != NULL)\n\t\t\tVAR_21 = json_is_true(json_object_get(VAR_2->jsep, \"update\"));\n\t\tif(!strcasecmp(VAR_19, \"record\")) {\n\t\t\tJANUS_LOG(VAR_1, \"Starting new recording\\n\");\n\t\t\tif(VAR_11->file != NULL) {\n\t\t\t\tJANUS_LOG(VAR_12, \"Already recording (%s)\\n\", VAR_11->filename ? VAR_11->filename : \"??\");\n\t\t\t\tVAR_3 = VAR_22;\n\t\t\t\tg_snprintf(VAR_4, 512, \"Already recording\");\n\t\t\t\tgoto error;\n\t\t\t}\n\t\t\tVAR_11->stream = g_malloc0(sizeof(VAR_23));\n\t\t\tif(ogg_stream_init(VAR_11->stream, rand()) < 0) {\n\t\t\t\tJANUS_LOG(VAR_12, \"Couldn't initialize Ogg stream state\\n\");\n\t\t\t\tVAR_3 = VAR_24;\n\t\t\t\tg_snprintf(VAR_4, 512, \"Couldn't initialize Ogg stream state\\n\");\n\t\t\t\tgoto error;\n\t\t\t}\n\t\t\tVAR_11->file = fopen(VAR_11->filename, \"wb\");\n\t\t\tif(VAR_11->file == NULL) {\n\t\t\t\tJANUS_LOG(VAR_12, \"Couldn't open output file\\n\");\n\t\t\t\tVAR_3 = VAR_25;\n\t\t\t\tg_snprintf(VAR_4, 512, \"Couldn't open output file\");\n\t\t\t\tgoto error;\n\t\t\t}\n\t\t\tVAR_11->seq = 0;\n\t\t\t/* COMMENT_2 */\n\t\t\togg_packet *VAR_26 = op_opushead();\n\t\t\togg_stream_packetin(VAR_11->stream, VAR_26);\n\t\t\top_free(VAR_26);\n\t\t\tVAR_26 = op_opustags();\n\t\t\togg_stream_packetin(VAR_11->stream, VAR_26);\n\t\t\top_free(VAR_26);\n\t\t\togg_flush(VAR_11);\n\t\t\t/* COMMENT_3 */\n\t\t\tVAR_20 = json_object();\n\t\t\tjson_object_set_new(VAR_20, \"voicemail\", json_string(\"event\"));\n\t\t\tjson_object_set_new(VAR_20, \"status\", json_string(VAR_11->started ? \"started\" : \"starting\"));\n\t\t\t/* COMMENT_4 */\n\t\t\tif(VAR_27 && VAR_28->events_is_enabled()) {\n\t\t\t\tjson_t *VAR_29 = json_object();\n\t\t\t\tjson_object_set_new(VAR_29, \"event\", json_string(\"starting\"));\n\t\t\t\tVAR_28->notify_event(&VAR_30, VAR_11->handle, VAR_29);\n\t\t\t}\n\t\t} else if(!strcasecmp(VAR_19, \"update\")) {\n\t\t\t/* COMMENT_5 */\n\t\t\tJANUS_LOG(VAR_1, \"Updating existing recording\\n\");\n\t\t\tif(VAR_11->stream == NULL || !VAR_11->started) {\n\t\t\t\tJANUS_LOG(VAR_12, \"Invalid state (not recording)\\n\");\n\t\t\t\tVAR_3 = VAR_31;\n\t\t\t\tg_snprintf(VAR_4, 512, \"Invalid state (not recording)\");\n\t\t\t\tgoto error;\n\t\t\t}\n\t\t\tVAR_21 = TRUE;\n\t\t\tVAR_20 = json_object();\n\t\t\tjson_object_set_new(VAR_20, \"voicemail\", json_string(\"event\"));\n\t\t\tjson_object_set_new(VAR_20, \"status\", json_string(\"updating\"));\n\t\t} else if(!strcasecmp(VAR_19, \"stop\")) {\n\t\t\t/* COMMENT_6 */\n\t\t\tVAR_11->started = FALSE;\n\t\t\tVAR_11->stopping = TRUE;\n\t\t\tif(VAR_11->file)\n\t\t\t\tfclose(VAR_11->file);\n\t\t\tVAR_11->file = NULL;\n\t\t\tif(VAR_11->stream)\n\t\t\t\togg_stream_destroy(VAR_11->stream);\n\t\t\tVAR_11->stream = NULL;\n\t\t\t/* COMMENT_7 */\n\t\t\tVAR_20 = json_object();\n\t\t\tjson_object_set_new(VAR_20, \"voicemail\", json_string(\"event\"));\n\t\t\tjson_object_set_new(VAR_20, \"status\", json_string(\"done\"));\n\t\t\tchar VAR_32[1024];\n\t\t\tg_snprintf(VAR_32, 1024, \"%s/janus-voicemail-%\"VAR_33\".opus\", VAR_34, VAR_11->recording_id);\n\t\t\tjson_object_set_new(VAR_20, \"recording\", json_string(VAR_32));\n\t\t\t/* COMMENT_4 */\n\t\t\tif(VAR_27 && VAR_28->events_is_enabled()) {\n\t\t\t\tjson_t *VAR_29 = json_object();\n\t\t\t\tjson_object_set_new(VAR_29, \"event\", json_string(\"done\"));\n\t\t\t\tVAR_28->notify_event(&VAR_30, VAR_11->handle, VAR_29);\n\t\t\t}\n\t\t} else {\n\t\t\tJANUS_LOG(VAR_12, \"Unknown request '%s'\\n\", VAR_19);\n\t\t\tVAR_3 = VAR_35;\n\t\t\tg_snprintf(VAR_4, 512, \"Unknown request '%s'\", VAR_19);\n\t\t\tgoto error;\n\t\t}\n\n\t\t/* COMMENT_8 */\n\t\tJANUS_LOG(VAR_1, \"Preparing JSON event as a reply\\n\");\n\t\t/* COMMENT_9 */\n\t\tconst char *VAR_36 = json_string_value(json_object_get(VAR_2->jsep, \"type\"));\n\t\tconst char *VAR_37 = json_string_value(json_object_get(VAR_2->jsep, \"sdp\"));\n\t\tif(!VAR_37) {\n\t\t\tint VAR_38 = VAR_28->push_event(VAR_2->handle, &VAR_30, VAR_2->transaction, VAR_20, NULL);\n\t\t\tJANUS_LOG(VAR_1, \"  >> %d (%s)\\n\", VAR_38, janus_get_api_error(VAR_38));\n\t\t\tjson_decref(VAR_20);\n\t\t} else {\n\t\t\tJANUS_LOG(VAR_1, \"This is involving a negotiation (%s) as well:\\n%s\\n\", VAR_36, VAR_37);\n\t\t\tconst char *VAR_39 = NULL;\n\t\t\tif(!strcasecmp(VAR_36, \"offer\"))\n\t\t\t\tVAR_39 = \"answer\";\n\t\t\tif(!strcasecmp(VAR_36, \"answer\"))\n\t\t\t\tVAR_39 = \"offer\";\n\t\t\tif(VAR_21) {\n\t\t\t\t/* COMMENT_10 */\n\t\t\t\tJANUS_LOG(VAR_1, \"Request to update existing connection\\n\");\n\t\t\t\tVAR_11->sdp_version++;\t\t/* COMMENT_11 */\n\t\t\t} else {\n\t\t\t\t/* COMMENT_12 */\n\t\t\t\tVAR_11->sdp_version = 1;\t/* COMMENT_11 */\n\t\t\t\tVAR_11->sdp_sessid = janus_get_real_time();\n\t\t\t}\n\t\t\t/* COMMENT_13 */\n\t\t\tchar VAR_40[1024];\n\t\t\t/* COMMENT_14 */\n\t\t\tint VAR_41 = janus_get_codec_pt(VAR_37, \"opus\");\n\t\t\tJANUS_LOG(VAR_1, \"Opus payload type is %d\\n\", VAR_41);\n\t\t\tg_snprintf(VAR_40, 1024, VAR_42,\n\t\t\t\tVAR_11->sdp_sessid,\n\t\t\t\tVAR_11->sdp_version,\n\t\t\t\tVAR_11->recording_id,\t\t\t/* COMMENT_15 */\n\t\t\t\tVAR_41,\t\t\t\t\t\t/* COMMENT_16 */\n\t\t\t\tVAR_41\t\t\t\t\t\t\t/* COMMENT_16 */);\n\t\t\t/* COMMENT_17 */\n\t\t\tif(strstr(VAR_37, \"m=video\") != NULL) {\n\t\t\t\t/* COMMENT_18 */\n\t\t\t\tg_strlcat(VAR_40, \"m=video 0 RTP/SAVPF 0\\r\\n\", 1024);\n\t\t\t}\n\t\t\tjson_t *VAR_43 = json_pack(\"{ssss}\", \"type\", VAR_39, \"sdp\", VAR_40);\n\t\t\t/* COMMENT_19 */\n\t\t\tg_atomic_int_set(&VAR_11->hangingup, 0);\n\t\t\tgint64 VAR_44 = janus_get_monotonic_time();\n\t\t\tint VAR_45 = VAR_28->push_event(VAR_2->handle, &VAR_30, VAR_2->transaction, VAR_20, VAR_43);\n\t\t\tJANUS_LOG(VAR_1, \"  >> Pushing event: %d (took %\"VAR_33\" us)\\n\", VAR_45, janus_get_monotonic_time()-VAR_44);\n\t\t\tjson_decref(VAR_20);\n\t\t\tjson_decref(VAR_43);\n\t\t\tif(VAR_45 != VAR_46) {\n\t\t\t\t/* COMMENT_20 */\n\t\t\t}\n\t\t}\n\t\tjanus_voicemail_message_free(VAR_2);\n\n\t\tif(VAR_11->stopping) {\n\t\t\tVAR_28->end_session(VAR_11->handle);\n\t\t}\n\n\t\tcontinue;\n\nerror:\n\t\t{\n\t\t\t/* COMMENT_21 */\n\t\t\tjson_t *VAR_20 = json_object();\n\t\t\tjson_object_set_new(VAR_20, \"voicemail\", json_string(\"event\"));\n\t\t\tjson_object_set_new(VAR_20, \"error_code\", json_integer(VAR_3));\n\t\t\tjson_object_set_new(VAR_20, \"error\", json_string(VAR_4));\n\t\t\tint VAR_38 = VAR_28->push_event(VAR_2->handle, &VAR_30, VAR_2->transaction, VAR_20, NULL);\n\t\t\tJANUS_LOG(VAR_1, \"  >> Pushing event: %d (%s)\\n\", VAR_38, janus_get_api_error(VAR_38));\n\t\t\tjson_decref(VAR_20);\n\t\t\tjanus_voicemail_message_free(VAR_2);\n\t\t}\n\t}\n\tJANUS_LOG(VAR_1, \"Leaving VoiceMail handler thread\\n\");\n\treturn NULL;\n}",
  "func_graph_path_before": "meetecho/janus-gateway/eb99ac8674c554bab6775f4378b24e991b4a2fa1/janus_voicemail.c/vul/before/2.json",
  "func": "static void *janus_voicemail_handler(void *data) {\n\tJANUS_LOG(LOG_VERB, \"Joining VoiceMail handler thread\\n\");\n\tjanus_voicemail_message *msg = NULL;\n\tint error_code = 0;\n\tchar error_cause[512];\n\tjson_t *root = NULL;\n\twhile(g_atomic_int_get(&initialized) && !g_atomic_int_get(&stopping)) {\n\t\tmsg = g_async_queue_pop(messages);\n\t\tif(msg == &exit_message)\n\t\t\tbreak;\n\t\tif(msg->handle == NULL) {\n\t\t\tjanus_voicemail_message_free(msg);\n\t\t\tcontinue;\n\t\t}\n\t\tjanus_mutex_lock(&sessions_mutex);\n\t\tjanus_voicemail_session *session = janus_voicemail_lookup_session(msg->handle);\n\t\tif(!session) {\n\t\t\tjanus_mutex_unlock(&sessions_mutex);\n\t\t\tJANUS_LOG(LOG_ERR, \"No session associated with this handle...\\n\");\n\t\t\tjanus_voicemail_message_free(msg);\n\t\t\tcontinue;\n\t\t}\n\t\tif(g_atomic_int_get(&session->destroyed)) {\n\t\t\tjanus_mutex_unlock(&sessions_mutex);\n\t\t\tjanus_voicemail_message_free(msg);\n\t\t\tcontinue;\n\t\t}\n\t\tjanus_mutex_unlock(&sessions_mutex);\n\t\t/* Handle request */\n\t\terror_code = 0;\n\t\troot = msg->message;\n\t\tif(msg->message == NULL) {\n\t\t\tJANUS_LOG(LOG_ERR, \"No message??\\n\");\n\t\t\terror_code = JANUS_VOICEMAIL_ERROR_NO_MESSAGE;\n\t\t\tg_snprintf(error_cause, 512, \"%s\", \"No message??\");\n\t\t\tgoto error;\n\t\t}\n\t\tif(!json_is_object(root)) {\n\t\t\tJANUS_LOG(LOG_ERR, \"JSON error: not an object\\n\");\n\t\t\terror_code = JANUS_VOICEMAIL_ERROR_INVALID_JSON;\n\t\t\tg_snprintf(error_cause, 512, \"JSON error: not an object\");\n\t\t\tgoto error;\n\t\t}\n\t\t/* Get the request first */\n\t\tJANUS_VALIDATE_JSON_OBJECT(root, request_parameters,\n\t\t\terror_code, error_cause, TRUE,\n\t\t\tJANUS_VOICEMAIL_ERROR_MISSING_ELEMENT, JANUS_VOICEMAIL_ERROR_INVALID_ELEMENT);\n\t\tif(error_code != 0)\n\t\t\tgoto error;\n\t\tjson_t *request = json_object_get(root, \"request\");\n\t\tconst char *request_text = json_string_value(request);\n\t\tjson_t *event = NULL;\n\t\tgboolean sdp_update = FALSE;\n\t\tif(json_object_get(msg->jsep, \"update\") != NULL)\n\t\t\tsdp_update = json_is_true(json_object_get(msg->jsep, \"update\"));\n\t\tif(!strcasecmp(request_text, \"record\")) {\n\t\t\tJANUS_LOG(LOG_VERB, \"Starting new recording\\n\");\n\t\t\tif(session->file != NULL) {\n\t\t\t\tJANUS_LOG(LOG_ERR, \"Already recording (%s)\\n\", session->filename ? session->filename : \"??\");\n\t\t\t\terror_code = JANUS_VOICEMAIL_ERROR_ALREADY_RECORDING;\n\t\t\t\tg_snprintf(error_cause, 512, \"Already recording\");\n\t\t\t\tgoto error;\n\t\t\t}\n\t\t\tsession->stream = g_malloc0(sizeof(ogg_stream_state));\n\t\t\tif(ogg_stream_init(session->stream, rand()) < 0) {\n\t\t\t\tJANUS_LOG(LOG_ERR, \"Couldn't initialize Ogg stream state\\n\");\n\t\t\t\terror_code = JANUS_VOICEMAIL_ERROR_LIBOGG_ERROR;\n\t\t\t\tg_snprintf(error_cause, 512, \"Couldn't initialize Ogg stream state\\n\");\n\t\t\t\tgoto error;\n\t\t\t}\n\t\t\tsession->file = fopen(session->filename, \"wb\");\n\t\t\tif(session->file == NULL) {\n\t\t\t\tJANUS_LOG(LOG_ERR, \"Couldn't open output file\\n\");\n\t\t\t\terror_code = JANUS_VOICEMAIL_ERROR_IO_ERROR;\n\t\t\t\tg_snprintf(error_cause, 512, \"Couldn't open output file\");\n\t\t\t\tgoto error;\n\t\t\t}\n\t\t\tsession->seq = 0;\n\t\t\t/* Write stream headers */\n\t\t\togg_packet *op = op_opushead();\n\t\t\togg_stream_packetin(session->stream, op);\n\t\t\top_free(op);\n\t\t\top = op_opustags();\n\t\t\togg_stream_packetin(session->stream, op);\n\t\t\top_free(op);\n\t\t\togg_flush(session);\n\t\t\t/* Done: now wait for the setup_media callback to be called */\n\t\t\tevent = json_object();\n\t\t\tjson_object_set_new(event, \"voicemail\", json_string(\"event\"));\n\t\t\tjson_object_set_new(event, \"status\", json_string(g_atomic_int_get(&session->started) ? \"started\" : \"starting\"));\n\t\t\t/* Also notify event handlers */\n\t\t\tif(notify_events && gateway->events_is_enabled()) {\n\t\t\t\tjson_t *info = json_object();\n\t\t\t\tjson_object_set_new(info, \"event\", json_string(\"starting\"));\n\t\t\t\tgateway->notify_event(&janus_voicemail_plugin, session->handle, info);\n\t\t\t}\n\t\t} else if(!strcasecmp(request_text, \"update\")) {\n\t\t\t/* Only needed in case of renegotiations and ICE restarts (but with 10s messages is this worth it?) */\n\t\t\tJANUS_LOG(LOG_VERB, \"Updating existing recording\\n\");\n\t\t\tif(session->stream == NULL || !g_atomic_int_get(&session->started)) {\n\t\t\t\tJANUS_LOG(LOG_ERR, \"Invalid state (not recording)\\n\");\n\t\t\t\terror_code = JANUS_VOICEMAIL_ERROR_INVALID_STATE;\n\t\t\t\tg_snprintf(error_cause, 512, \"Invalid state (not recording)\");\n\t\t\t\tgoto error;\n\t\t\t}\n\t\t\tsdp_update = TRUE;\n\t\t\tevent = json_object();\n\t\t\tjson_object_set_new(event, \"voicemail\", json_string(\"event\"));\n\t\t\tjson_object_set_new(event, \"status\", json_string(\"updating\"));\n\t\t} else if(!strcasecmp(request_text, \"stop\")) {\n\t\t\t/* Stop the recording */\n\t\t\tg_atomic_int_set(&session->started, 0);\n\t\t\tg_atomic_int_set(&session->stopping, 1);\n\t\t\tif(session->file)\n\t\t\t\tfclose(session->file);\n\t\t\tsession->file = NULL;\n\t\t\tif(session->stream)\n\t\t\t\togg_stream_destroy(session->stream);\n\t\t\tsession->stream = NULL;\n\t\t\t/* Done: send the event and close the handle */\n\t\t\tevent = json_object();\n\t\t\tjson_object_set_new(event, \"voicemail\", json_string(\"event\"));\n\t\t\tjson_object_set_new(event, \"status\", json_string(\"done\"));\n\t\t\tif(session->recording_id > 0) {\n\t\t\t\tchar url[1024];\n\t\t\t\tg_snprintf(url, 1024, \"%s/janus-voicemail-%\"SCNu64\".opus\", recordings_base, session->recording_id);\n\t\t\t\tjson_object_set_new(event, \"recording\", json_string(url));\n\t\t\t}\n\t\t\t/* Also notify event handlers */\n\t\t\tif(notify_events && gateway->events_is_enabled()) {\n\t\t\t\tjson_t *info = json_object();\n\t\t\t\tjson_object_set_new(info, \"event\", json_string(\"done\"));\n\t\t\t\tgateway->notify_event(&janus_voicemail_plugin, session->handle, info);\n\t\t\t}\n\t\t} else {\n\t\t\tJANUS_LOG(LOG_ERR, \"Unknown request '%s'\\n\", request_text);\n\t\t\terror_code = JANUS_VOICEMAIL_ERROR_INVALID_REQUEST;\n\t\t\tg_snprintf(error_cause, 512, \"Unknown request '%s'\", request_text);\n\t\t\tgoto error;\n\t\t}\n\n\t\t/* Prepare JSON event */\n\t\tJANUS_LOG(LOG_VERB, \"Preparing JSON event as a reply\\n\");\n\t\t/* Any SDP to handle? */\n\t\tconst char *msg_sdp_type = json_string_value(json_object_get(msg->jsep, \"type\"));\n\t\tconst char *msg_sdp = json_string_value(json_object_get(msg->jsep, \"sdp\"));\n\t\tif(!msg_sdp) {\n\t\t\tint ret = gateway->push_event(msg->handle, &janus_voicemail_plugin, msg->transaction, event, NULL);\n\t\t\tJANUS_LOG(LOG_VERB, \"  >> %d (%s)\\n\", ret, janus_get_api_error(ret));\n\t\t\tjson_decref(event);\n\t\t} else {\n\t\t\tJANUS_LOG(LOG_VERB, \"This is involving a negotiation (%s) as well:\\n%s\\n\", msg_sdp_type, msg_sdp);\n\t\t\tconst char *type = NULL;\n\t\t\tif(!strcasecmp(msg_sdp_type, \"offer\"))\n\t\t\t\ttype = \"answer\";\n\t\t\tif(!strcasecmp(msg_sdp_type, \"answer\"))\n\t\t\t\ttype = \"offer\";\n\t\t\tif(sdp_update) {\n\t\t\t\t/* Renegotiation: make sure the user provided an offer, and send answer */\n\t\t\t\tJANUS_LOG(LOG_VERB, \"Request to update existing connection\\n\");\n\t\t\t\tsession->sdp_version++;\t\t/* This needs to be increased when it changes */\n\t\t\t} else {\n\t\t\t\t/* New PeerConnection */\n\t\t\t\tsession->sdp_version = 1;\t/* This needs to be increased when it changes */\n\t\t\t\tsession->sdp_sessid = janus_get_real_time();\n\t\t\t}\n\t\t\t/* Fill the SDP template and use that as our answer */\n\t\t\tchar sdp[1024];\n\t\t\t/* What is the Opus payload type? */\n\t\t\tint opus_pt = janus_get_codec_pt(msg_sdp, \"opus\");\n\t\t\tJANUS_LOG(LOG_VERB, \"Opus payload type is %d\\n\", opus_pt);\n\t\t\tg_snprintf(sdp, 1024, sdp_template,\n\t\t\t\tsession->sdp_sessid,\n\t\t\t\tsession->sdp_version,\n\t\t\t\tsession->recording_id,\t\t\t/* Recording ID */\n\t\t\t\topus_pt,\t\t\t\t\t\t/* Opus payload type */\n\t\t\t\topus_pt\t\t\t\t\t\t\t/* Opus payload type */);\n\t\t\t/* Did the peer negotiate video? */\n\t\t\tif(strstr(msg_sdp, \"m=video\") != NULL) {\n\t\t\t\t/* If so, reject it */\n\t\t\t\tg_strlcat(sdp, \"m=video 0 RTP/SAVPF 0\\r\\n\", 1024);\n\t\t\t}\n\t\t\tjson_t *jsep = json_pack(\"{ssss}\", \"type\", type, \"sdp\", sdp);\n\t\t\t/* How long will the Janus core take to push the event? */\n\t\t\tg_atomic_int_set(&session->hangingup, 0);\n\t\t\tgint64 start = janus_get_monotonic_time();\n\t\t\tint res = gateway->push_event(msg->handle, &janus_voicemail_plugin, msg->transaction, event, jsep);\n\t\t\tJANUS_LOG(LOG_VERB, \"  >> Pushing event: %d (took %\"SCNu64\" us)\\n\", res, janus_get_monotonic_time()-start);\n\t\t\tjson_decref(event);\n\t\t\tjson_decref(jsep);\n\t\t\tif(res != JANUS_OK) {\n\t\t\t\t/* TODO Failed to negotiate? We should remove this participant */\n\t\t\t}\n\t\t}\n\n\t\t/* Tear down the session if we're done */\n\t\tif(g_atomic_int_get(&session->stopping))\n\t\t\tgateway->end_session(session->handle);\n\t\tjanus_voicemail_message_free(msg);\n\n\t\tcontinue;\n\nerror:\n\t\t{\n\t\t\t/* Prepare JSON error event */\n\t\t\tjson_t *event = json_object();\n\t\t\tjson_object_set_new(event, \"voicemail\", json_string(\"event\"));\n\t\t\tjson_object_set_new(event, \"error_code\", json_integer(error_code));\n\t\t\tjson_object_set_new(event, \"error\", json_string(error_cause));\n\t\t\tint ret = gateway->push_event(msg->handle, &janus_voicemail_plugin, msg->transaction, event, NULL);\n\t\t\tJANUS_LOG(LOG_VERB, \"  >> Pushing event: %d (%s)\\n\", ret, janus_get_api_error(ret));\n\t\t\tjson_decref(event);\n\t\t\tjanus_voicemail_message_free(msg);\n\t\t}\n\t}\n\tJANUS_LOG(LOG_VERB, \"Leaving VoiceMail handler thread\\n\");\n\treturn NULL;\n}",
  "abstract_func": "static void *janus_voicemail_handler(void *VAR_0) {\n\tJANUS_LOG(VAR_1, \"Joining VoiceMail handler thread\\n\");\n\tjanus_voicemail_message *VAR_2 = NULL;\n\tint VAR_3 = 0;\n\tchar VAR_4[512];\n\tjson_t *VAR_5 = NULL;\n\twhile(g_atomic_int_get(&VAR_6) && !g_atomic_int_get(&VAR_7)) {\n\t\tVAR_2 = g_async_queue_pop(VAR_8);\n\t\tif(VAR_2 == &VAR_9)\n\t\t\tbreak;\n\t\tif(VAR_2->handle == NULL) {\n\t\t\tjanus_voicemail_message_free(VAR_2);\n\t\t\tcontinue;\n\t\t}\n\t\tjanus_mutex_lock(&VAR_10);\n\t\tjanus_voicemail_session *VAR_11 = janus_voicemail_lookup_session(VAR_2->handle);\n\t\tif(!VAR_11) {\n\t\t\tjanus_mutex_unlock(&VAR_10);\n\t\t\tJANUS_LOG(VAR_12, \"No session associated with this handle...\\n\");\n\t\t\tjanus_voicemail_message_free(VAR_2);\n\t\t\tcontinue;\n\t\t}\n\t\tif(g_atomic_int_get(&VAR_11->destroyed)) {\n\t\t\tjanus_mutex_unlock(&VAR_10);\n\t\t\tjanus_voicemail_message_free(VAR_2);\n\t\t\tcontinue;\n\t\t}\n\t\tjanus_mutex_unlock(&VAR_10);\n\t\t/* COMMENT_0 */\n\t\tVAR_3 = 0;\n\t\tVAR_5 = VAR_2->message;\n\t\tif(VAR_2->message == NULL) {\n\t\t\tJANUS_LOG(VAR_12, \"No message??\\n\");\n\t\t\tVAR_3 = VAR_13;\n\t\t\tg_snprintf(VAR_4, 512, \"%s\", \"No message??\");\n\t\t\tgoto error;\n\t\t}\n\t\tif(!json_is_object(VAR_5)) {\n\t\t\tJANUS_LOG(VAR_12, \"JSON error: not an object\\n\");\n\t\t\tVAR_3 = VAR_14;\n\t\t\tg_snprintf(VAR_4, 512, \"JSON error: not an object\");\n\t\t\tgoto error;\n\t\t}\n\t\t/* COMMENT_1 */\n\t\tJANUS_VALIDATE_JSON_OBJECT(VAR_5, VAR_15,\n\t\t\tVAR_3, VAR_4, TRUE,\n\t\t\tVAR_16, VAR_17);\n\t\tif(VAR_3 != 0)\n\t\t\tgoto error;\n\t\tjson_t *VAR_18 = json_object_get(VAR_5, \"request\");\n\t\tconst char *VAR_19 = json_string_value(VAR_18);\n\t\tjson_t *VAR_20 = NULL;\n\t\tgboolean VAR_21 = FALSE;\n\t\tif(json_object_get(VAR_2->jsep, \"update\") != NULL)\n\t\t\tVAR_21 = json_is_true(json_object_get(VAR_2->jsep, \"update\"));\n\t\tif(!strcasecmp(VAR_19, \"record\")) {\n\t\t\tJANUS_LOG(VAR_1, \"Starting new recording\\n\");\n\t\t\tif(VAR_11->file != NULL) {\n\t\t\t\tJANUS_LOG(VAR_12, \"Already recording (%s)\\n\", VAR_11->filename ? VAR_11->filename : \"??\");\n\t\t\t\tVAR_3 = VAR_22;\n\t\t\t\tg_snprintf(VAR_4, 512, \"Already recording\");\n\t\t\t\tgoto error;\n\t\t\t}\n\t\t\tVAR_11->stream = g_malloc0(sizeof(VAR_23));\n\t\t\tif(ogg_stream_init(VAR_11->stream, rand()) < 0) {\n\t\t\t\tJANUS_LOG(VAR_12, \"Couldn't initialize Ogg stream state\\n\");\n\t\t\t\tVAR_3 = VAR_24;\n\t\t\t\tg_snprintf(VAR_4, 512, \"Couldn't initialize Ogg stream state\\n\");\n\t\t\t\tgoto error;\n\t\t\t}\n\t\t\tVAR_11->file = fopen(VAR_11->filename, \"wb\");\n\t\t\tif(VAR_11->file == NULL) {\n\t\t\t\tJANUS_LOG(VAR_12, \"Couldn't open output file\\n\");\n\t\t\t\tVAR_3 = VAR_25;\n\t\t\t\tg_snprintf(VAR_4, 512, \"Couldn't open output file\");\n\t\t\t\tgoto error;\n\t\t\t}\n\t\t\tVAR_11->seq = 0;\n\t\t\t/* COMMENT_2 */\n\t\t\togg_packet *VAR_26 = op_opushead();\n\t\t\togg_stream_packetin(VAR_11->stream, VAR_26);\n\t\t\top_free(VAR_26);\n\t\t\tVAR_26 = op_opustags();\n\t\t\togg_stream_packetin(VAR_11->stream, VAR_26);\n\t\t\top_free(VAR_26);\n\t\t\togg_flush(VAR_11);\n\t\t\t/* COMMENT_3 */\n\t\t\tVAR_20 = json_object();\n\t\t\tjson_object_set_new(VAR_20, \"voicemail\", json_string(\"event\"));\n\t\t\tjson_object_set_new(VAR_20, \"status\", json_string(g_atomic_int_get(&VAR_11->started) ? \"started\" : \"starting\"));\n\t\t\t/* COMMENT_4 */\n\t\t\tif(VAR_27 && VAR_28->events_is_enabled()) {\n\t\t\t\tjson_t *VAR_29 = json_object();\n\t\t\t\tjson_object_set_new(VAR_29, \"event\", json_string(\"starting\"));\n\t\t\t\tVAR_28->notify_event(&VAR_30, VAR_11->handle, VAR_29);\n\t\t\t}\n\t\t} else if(!strcasecmp(VAR_19, \"update\")) {\n\t\t\t/* COMMENT_5 */\n\t\t\tJANUS_LOG(VAR_1, \"Updating existing recording\\n\");\n\t\t\tif(VAR_11->stream == NULL || !g_atomic_int_get(&VAR_11->started)) {\n\t\t\t\tJANUS_LOG(VAR_12, \"Invalid state (not recording)\\n\");\n\t\t\t\tVAR_3 = VAR_31;\n\t\t\t\tg_snprintf(VAR_4, 512, \"Invalid state (not recording)\");\n\t\t\t\tgoto error;\n\t\t\t}\n\t\t\tVAR_21 = TRUE;\n\t\t\tVAR_20 = json_object();\n\t\t\tjson_object_set_new(VAR_20, \"voicemail\", json_string(\"event\"));\n\t\t\tjson_object_set_new(VAR_20, \"status\", json_string(\"updating\"));\n\t\t} else if(!strcasecmp(VAR_19, \"stop\")) {\n\t\t\t/* COMMENT_6 */\n\t\t\tg_atomic_int_set(&VAR_11->started, 0);\n\t\t\tg_atomic_int_set(&VAR_11->stopping, 1);\n\t\t\tif(VAR_11->file)\n\t\t\t\tfclose(VAR_11->file);\n\t\t\tVAR_11->file = NULL;\n\t\t\tif(VAR_11->stream)\n\t\t\t\togg_stream_destroy(VAR_11->stream);\n\t\t\tVAR_11->stream = NULL;\n\t\t\t/* COMMENT_7 */\n\t\t\tVAR_20 = json_object();\n\t\t\tjson_object_set_new(VAR_20, \"voicemail\", json_string(\"event\"));\n\t\t\tjson_object_set_new(VAR_20, \"status\", json_string(\"done\"));\n\t\t\tif(VAR_11->recording_id > 0) {\n\t\t\t\tchar VAR_32[1024];\n\t\t\t\tg_snprintf(VAR_32, 1024, \"%s/janus-voicemail-%\"VAR_33\".opus\", VAR_34, VAR_11->recording_id);\n\t\t\t\tjson_object_set_new(VAR_20, \"recording\", json_string(VAR_32));\n\t\t\t}\n\t\t\t/* COMMENT_4 */\n\t\t\tif(VAR_27 && VAR_28->events_is_enabled()) {\n\t\t\t\tjson_t *VAR_29 = json_object();\n\t\t\t\tjson_object_set_new(VAR_29, \"event\", json_string(\"done\"));\n\t\t\t\tVAR_28->notify_event(&VAR_30, VAR_11->handle, VAR_29);\n\t\t\t}\n\t\t} else {\n\t\t\tJANUS_LOG(VAR_12, \"Unknown request '%s'\\n\", VAR_19);\n\t\t\tVAR_3 = VAR_35;\n\t\t\tg_snprintf(VAR_4, 512, \"Unknown request '%s'\", VAR_19);\n\t\t\tgoto error;\n\t\t}\n\n\t\t/* COMMENT_8 */\n\t\tJANUS_LOG(VAR_1, \"Preparing JSON event as a reply\\n\");\n\t\t/* COMMENT_9 */\n\t\tconst char *VAR_36 = json_string_value(json_object_get(VAR_2->jsep, \"type\"));\n\t\tconst char *VAR_37 = json_string_value(json_object_get(VAR_2->jsep, \"sdp\"));\n\t\tif(!VAR_37) {\n\t\t\tint VAR_38 = VAR_28->push_event(VAR_2->handle, &VAR_30, VAR_2->transaction, VAR_20, NULL);\n\t\t\tJANUS_LOG(VAR_1, \"  >> %d (%s)\\n\", VAR_38, janus_get_api_error(VAR_38));\n\t\t\tjson_decref(VAR_20);\n\t\t} else {\n\t\t\tJANUS_LOG(VAR_1, \"This is involving a negotiation (%s) as well:\\n%s\\n\", VAR_36, VAR_37);\n\t\t\tconst char *VAR_39 = NULL;\n\t\t\tif(!strcasecmp(VAR_36, \"offer\"))\n\t\t\t\tVAR_39 = \"answer\";\n\t\t\tif(!strcasecmp(VAR_36, \"answer\"))\n\t\t\t\tVAR_39 = \"offer\";\n\t\t\tif(VAR_21) {\n\t\t\t\t/* COMMENT_10 */\n\t\t\t\tJANUS_LOG(VAR_1, \"Request to update existing connection\\n\");\n\t\t\t\tVAR_11->sdp_version++;\t\t/* COMMENT_11 */\n\t\t\t} else {\n\t\t\t\t/* COMMENT_12 */\n\t\t\t\tVAR_11->sdp_version = 1;\t/* COMMENT_11 */\n\t\t\t\tVAR_11->sdp_sessid = janus_get_real_time();\n\t\t\t}\n\t\t\t/* COMMENT_13 */\n\t\t\tchar VAR_40[1024];\n\t\t\t/* COMMENT_14 */\n\t\t\tint VAR_41 = janus_get_codec_pt(VAR_37, \"opus\");\n\t\t\tJANUS_LOG(VAR_1, \"Opus payload type is %d\\n\", VAR_41);\n\t\t\tg_snprintf(VAR_40, 1024, VAR_42,\n\t\t\t\tVAR_11->sdp_sessid,\n\t\t\t\tVAR_11->sdp_version,\n\t\t\t\tVAR_11->recording_id,\t\t\t/* COMMENT_15 */\n\t\t\t\tVAR_41,\t\t\t\t\t\t/* COMMENT_16 */\n\t\t\t\tVAR_41\t\t\t\t\t\t\t/* COMMENT_16 */);\n\t\t\t/* COMMENT_17 */\n\t\t\tif(strstr(VAR_37, \"m=video\") != NULL) {\n\t\t\t\t/* COMMENT_18 */\n\t\t\t\tg_strlcat(VAR_40, \"m=video 0 RTP/SAVPF 0\\r\\n\", 1024);\n\t\t\t}\n\t\t\tjson_t *VAR_43 = json_pack(\"{ssss}\", \"type\", VAR_39, \"sdp\", VAR_40);\n\t\t\t/* COMMENT_19 */\n\t\t\tg_atomic_int_set(&VAR_11->hangingup, 0);\n\t\t\tgint64 VAR_44 = janus_get_monotonic_time();\n\t\t\tint VAR_45 = VAR_28->push_event(VAR_2->handle, &VAR_30, VAR_2->transaction, VAR_20, VAR_43);\n\t\t\tJANUS_LOG(VAR_1, \"  >> Pushing event: %d (took %\"VAR_33\" us)\\n\", VAR_45, janus_get_monotonic_time()-VAR_44);\n\t\t\tjson_decref(VAR_20);\n\t\t\tjson_decref(VAR_43);\n\t\t\tif(VAR_45 != VAR_46) {\n\t\t\t\t/* COMMENT_20 */\n\t\t\t}\n\t\t}\n\n\t\t/* COMMENT_21 */\n\t\tif(g_atomic_int_get(&VAR_11->stopping))\n\t\t\tVAR_28->end_session(VAR_11->handle);\n\t\tjanus_voicemail_message_free(VAR_2);\n\n\t\tcontinue;\n\nerror:\n\t\t{\n\t\t\t/* COMMENT_22 */\n\t\t\tjson_t *VAR_20 = json_object();\n\t\t\tjson_object_set_new(VAR_20, \"voicemail\", json_string(\"event\"));\n\t\t\tjson_object_set_new(VAR_20, \"error_code\", json_integer(VAR_3));\n\t\t\tjson_object_set_new(VAR_20, \"error\", json_string(VAR_4));\n\t\t\tint VAR_38 = VAR_28->push_event(VAR_2->handle, &VAR_30, VAR_2->transaction, VAR_20, NULL);\n\t\t\tJANUS_LOG(VAR_1, \"  >> Pushing event: %d (%s)\\n\", VAR_38, janus_get_api_error(VAR_38));\n\t\t\tjson_decref(VAR_20);\n\t\t\tjanus_voicemail_message_free(VAR_2);\n\t\t}\n\t}\n\tJANUS_LOG(VAR_1, \"Leaving VoiceMail handler thread\\n\");\n\treturn NULL;\n}",
  "func_graph_path": "meetecho/janus-gateway/eb99ac8674c554bab6775f4378b24e991b4a2fa1/janus_voicemail.c/vul/after/2.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -87,7 +87,7 @@\n \t\t\t/* Done: now wait for the setup_media callback to be called */\n \t\t\tevent = json_object();\n \t\t\tjson_object_set_new(event, \"voicemail\", json_string(\"event\"));\n-\t\t\tjson_object_set_new(event, \"status\", json_string(session->started ? \"started\" : \"starting\"));\n+\t\t\tjson_object_set_new(event, \"status\", json_string(g_atomic_int_get(&session->started) ? \"started\" : \"starting\"));\n \t\t\t/* Also notify event handlers */\n \t\t\tif(notify_events && gateway->events_is_enabled()) {\n \t\t\t\tjson_t *info = json_object();\n@@ -97,7 +97,7 @@\n \t\t} else if(!strcasecmp(request_text, \"update\")) {\n \t\t\t/* Only needed in case of renegotiations and ICE restarts (but with 10s messages is this worth it?) */\n \t\t\tJANUS_LOG(LOG_VERB, \"Updating existing recording\\n\");\n-\t\t\tif(session->stream == NULL || !session->started) {\n+\t\t\tif(session->stream == NULL || !g_atomic_int_get(&session->started)) {\n \t\t\t\tJANUS_LOG(LOG_ERR, \"Invalid state (not recording)\\n\");\n \t\t\t\terror_code = JANUS_VOICEMAIL_ERROR_INVALID_STATE;\n \t\t\t\tg_snprintf(error_cause, 512, \"Invalid state (not recording)\");\n@@ -109,8 +109,8 @@\n \t\t\tjson_object_set_new(event, \"status\", json_string(\"updating\"));\n \t\t} else if(!strcasecmp(request_text, \"stop\")) {\n \t\t\t/* Stop the recording */\n-\t\t\tsession->started = FALSE;\n-\t\t\tsession->stopping = TRUE;\n+\t\t\tg_atomic_int_set(&session->started, 0);\n+\t\t\tg_atomic_int_set(&session->stopping, 1);\n \t\t\tif(session->file)\n \t\t\t\tfclose(session->file);\n \t\t\tsession->file = NULL;\n@@ -121,9 +121,11 @@\n \t\t\tevent = json_object();\n \t\t\tjson_object_set_new(event, \"voicemail\", json_string(\"event\"));\n \t\t\tjson_object_set_new(event, \"status\", json_string(\"done\"));\n-\t\t\tchar url[1024];\n-\t\t\tg_snprintf(url, 1024, \"%s/janus-voicemail-%\"SCNu64\".opus\", recordings_base, session->recording_id);\n-\t\t\tjson_object_set_new(event, \"recording\", json_string(url));\n+\t\t\tif(session->recording_id > 0) {\n+\t\t\t\tchar url[1024];\n+\t\t\t\tg_snprintf(url, 1024, \"%s/janus-voicemail-%\"SCNu64\".opus\", recordings_base, session->recording_id);\n+\t\t\t\tjson_object_set_new(event, \"recording\", json_string(url));\n+\t\t\t}\n \t\t\t/* Also notify event handlers */\n \t\t\tif(notify_events && gateway->events_is_enabled()) {\n \t\t\t\tjson_t *info = json_object();\n@@ -190,11 +192,11 @@\n \t\t\t\t/* TODO Failed to negotiate? We should remove this participant */\n \t\t\t}\n \t\t}\n+\n+\t\t/* Tear down the session if we're done */\n+\t\tif(g_atomic_int_get(&session->stopping))\n+\t\t\tgateway->end_session(session->handle);\n \t\tjanus_voicemail_message_free(msg);\n-\n-\t\tif(session->stopping) {\n-\t\t\tgateway->end_session(session->handle);\n-\t\t}\n \n \t\tcontinue;\n ",
  "diff_line_info": {
    "deleted_lines": [
      "\t\t\tjson_object_set_new(event, \"status\", json_string(session->started ? \"started\" : \"starting\"));",
      "\t\t\tif(session->stream == NULL || !session->started) {",
      "\t\t\tsession->started = FALSE;",
      "\t\t\tsession->stopping = TRUE;",
      "\t\t\tchar url[1024];",
      "\t\t\tg_snprintf(url, 1024, \"%s/janus-voicemail-%\"SCNu64\".opus\", recordings_base, session->recording_id);",
      "\t\t\tjson_object_set_new(event, \"recording\", json_string(url));",
      "",
      "\t\tif(session->stopping) {",
      "\t\t\tgateway->end_session(session->handle);",
      "\t\t}"
    ],
    "added_lines": [
      "\t\t\tjson_object_set_new(event, \"status\", json_string(g_atomic_int_get(&session->started) ? \"started\" : \"starting\"));",
      "\t\t\tif(session->stream == NULL || !g_atomic_int_get(&session->started)) {",
      "\t\t\tg_atomic_int_set(&session->started, 0);",
      "\t\t\tg_atomic_int_set(&session->stopping, 1);",
      "\t\t\tif(session->recording_id > 0) {",
      "\t\t\t\tchar url[1024];",
      "\t\t\t\tg_snprintf(url, 1024, \"%s/janus-voicemail-%\"SCNu64\".opus\", recordings_base, session->recording_id);",
      "\t\t\t\tjson_object_set_new(event, \"recording\", json_string(url));",
      "\t\t\t}",
      "",
      "\t\t/* Tear down the session if we're done */",
      "\t\tif(g_atomic_int_get(&session->stopping))",
      "\t\t\tgateway->end_session(session->handle);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/meetecho/janus-gateway/pull/1993",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/meetecho/janus-gateway/pull/1993: 403 Client Error: Forbidden for url: https://api.github.com/repos/meetecho/janus-gateway/pulls/1993",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "The patch addresses known security issues related to race conditions and memory leaks in the VoiceMail plugin, referencing a specific CVE. The code changes use atomic operations to fix concurrency issues, aligning with the security fix.\n\n**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 1.0"
}