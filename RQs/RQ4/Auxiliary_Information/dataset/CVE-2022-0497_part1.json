{
  "cve_id": "CVE-2022-0497",
  "cwe_ids": [
    "CWE-125"
  ],
  "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:H",
  "cvss_is_v3": true,
  "repo_name": "openscad",
  "commit_msg": "Add file bounds check to comment parser",
  "commit_hash": "b81369dffc3f385257a9b1f5c271118a88671d6d",
  "git_url": "https://github.com/openscad/openscad/commit/b81369dffc3f385257a9b1f5c271118a88671d6d",
  "file_path": "src/comment.cc",
  "func_name": "getComment",
  "func_before": "static std::string getComment(const std::string &fulltext, int line)\n{\n\tif (line < 1) return \"\";\n\n\t// Locate line\n\tunsigned int start = 0;\n\tfor (; start<fulltext.length() ; ++start) {\n\t\tif (line <= 1) break;\n\t\tif (fulltext[start] == '\\n') line--;\n\t}\n\n\tint end = start + 1;\n\twhile (fulltext[end] != '\\n') end++;\n\n\tstd::string comment = fulltext.substr(start, end - start);\n\n\t// Locate comment\n\tunsigned int startText = 0;\n\tint noOfSemicolon = 0;\n\tbool inString = false;\n\tfor (; startText < comment.length() - 1; ++startText) {\n\t\tif (inString && comment.compare(startText, 2, \"\\\\\\\"\") == 0) {\n\t\t\tstartText++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (comment[startText] == '\"') inString = !inString;\n\t\tif (!inString) {\n\t\t\tif (comment.compare(startText, 2, \"//\") == 0) break;\n\t\t\tif (comment[startText] == ';' && noOfSemicolon > 0) return \"\";\n\t\t\tif (comment[startText] == ';') noOfSemicolon++;\n\t\t}\n\t}\n\n\tif (startText + 2 > comment.length()) return \"\";\n\n\tstd::string result = comment.substr(startText + 2);\n\treturn result;\n}",
  "abstract_func_before": "static std::string getComment(const std::string &VAR_0, int VAR_1)\n{\n\tif (VAR_1 < 1) return \"\";\n\n\t/* COMMENT_0 */\n\tunsigned int VAR_2 = 0;\n\tfor (; VAR_2<VAR_0.length() ; ++VAR_2) {\n\t\tif (VAR_1 <= 1) break;\n\t\tif (VAR_0[VAR_2] == '\\n') VAR_1--;\n\t}\n\n\tint VAR_3 = VAR_2 + 1;\n\twhile (VAR_0[VAR_3] != '\\n') VAR_3++;\n\n\tstd::string VAR_4 = VAR_0.substr(VAR_2, VAR_3 - VAR_2);\n\n\t/* COMMENT_1 */\n\tunsigned int VAR_5 = 0;\n\tint VAR_6 = 0;\n\tbool VAR_7 = false;\n\tfor (; VAR_5 < VAR_4.length() - 1; ++VAR_5) {\n\t\tif (VAR_7 && VAR_4.compare(VAR_5, 2, \"\\\\\\\"\") == 0) {\n\t\t\tVAR_5++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (VAR_4[VAR_5] == '\"') VAR_7 = !VAR_7;\n\t\tif (!VAR_7) {\n\t\t\tif (VAR_4.compare(VAR_5, 2, \"//\") == 0) break;\n\t\t\tif (VAR_4[VAR_5] == ';' && VAR_6 > 0) return \"\";\n\t\t\tif (VAR_4[VAR_5] == ';') VAR_6++;\n\t\t}\n\t}\n\n\tif (VAR_5 + 2 > VAR_4.length()) return \"\";\n\n\tstd::string VAR_8 = VAR_4.substr(VAR_5 + 2);\n\treturn VAR_8;\n}",
  "func_graph_path_before": "openscad/b81369dffc3f385257a9b1f5c271118a88671d6d/comment.cc/vul/before/0.json",
  "func": "static std::string getComment(const std::string &fulltext, int line)\n{\n\tif (line < 1) return \"\";\n\n\t// Locate line\n\tunsigned int start = 0;\n\tfor (; start<fulltext.length() ; ++start) {\n\t\tif (line <= 1) break;\n\t\tif (fulltext[start] == '\\n') line--;\n\t}\n\n\tint end = start + 1;\n\twhile (end < fulltext.size() && fulltext[end] != '\\n') end++;\n\n\tstd::string comment = fulltext.substr(start, end - start);\n\n\t// Locate comment\n\tunsigned int startText = 0;\n\tint noOfSemicolon = 0;\n\tbool inString = false;\n\tfor (; startText < comment.length() - 1; ++startText) {\n\t\tif (inString && comment.compare(startText, 2, \"\\\\\\\"\") == 0) {\n\t\t\tstartText++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (comment[startText] == '\"') inString = !inString;\n\t\tif (!inString) {\n\t\t\tif (comment.compare(startText, 2, \"//\") == 0) break;\n\t\t\tif (comment[startText] == ';' && noOfSemicolon > 0) return \"\";\n\t\t\tif (comment[startText] == ';') noOfSemicolon++;\n\t\t}\n\t}\n\n\tif (startText + 2 > comment.length()) return \"\";\n\n\tstd::string result = comment.substr(startText + 2);\n\treturn result;\n}",
  "abstract_func": "static std::string getComment(const std::string &VAR_0, int VAR_1)\n{\n\tif (VAR_1 < 1) return \"\";\n\n\t/* COMMENT_0 */\n\tunsigned int VAR_2 = 0;\n\tfor (; VAR_2<VAR_0.length() ; ++VAR_2) {\n\t\tif (VAR_1 <= 1) break;\n\t\tif (VAR_0[VAR_2] == '\\n') VAR_1--;\n\t}\n\n\tint VAR_3 = VAR_2 + 1;\n\twhile (VAR_3 < VAR_0.size() && VAR_0[VAR_3] != '\\n') VAR_3++;\n\n\tstd::string VAR_4 = VAR_0.substr(VAR_2, VAR_3 - VAR_2);\n\n\t/* COMMENT_1 */\n\tunsigned int VAR_5 = 0;\n\tint VAR_6 = 0;\n\tbool VAR_7 = false;\n\tfor (; VAR_5 < VAR_4.length() - 1; ++VAR_5) {\n\t\tif (VAR_7 && VAR_4.compare(VAR_5, 2, \"\\\\\\\"\") == 0) {\n\t\t\tVAR_5++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (VAR_4[VAR_5] == '\"') VAR_7 = !VAR_7;\n\t\tif (!VAR_7) {\n\t\t\tif (VAR_4.compare(VAR_5, 2, \"//\") == 0) break;\n\t\t\tif (VAR_4[VAR_5] == ';' && VAR_6 > 0) return \"\";\n\t\t\tif (VAR_4[VAR_5] == ';') VAR_6++;\n\t\t}\n\t}\n\n\tif (VAR_5 + 2 > VAR_4.length()) return \"\";\n\n\tstd::string VAR_8 = VAR_4.substr(VAR_5 + 2);\n\treturn VAR_8;\n}",
  "func_graph_path": "openscad/b81369dffc3f385257a9b1f5c271118a88671d6d/comment.cc/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -10,7 +10,7 @@\n \t}\n \n \tint end = start + 1;\n-\twhile (fulltext[end] != '\\n') end++;\n+\twhile (end < fulltext.size() && fulltext[end] != '\\n') end++;\n \n \tstd::string comment = fulltext.substr(start, end - start);\n ",
  "diff_line_info": {
    "deleted_lines": [
      "\twhile (fulltext[end] != '\\n') end++;"
    ],
    "added_lines": [
      "\twhile (end < fulltext.size() && fulltext[end] != '\\n') end++;"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/openscad/openscad/pull/4044",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/openscad/openscad/pull/4044: 403 Client Error: Forbidden for url: https://api.github.com/repos/openscad/openscad/pulls/4044",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "Final Classification: Security Vulnerability Fix; Confidence: 1.0"
}