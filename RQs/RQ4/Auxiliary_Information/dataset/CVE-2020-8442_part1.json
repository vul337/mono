{
  "cve_id": "CVE-2020-8442",
  "cwe_ids": [
    "CWE-787"
  ],
  "cvss_vector": "AV:N/AC:L/Au:S/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "ossec/ossec-hids",
  "commit_msg": "analysisd: fix heap overflow in rootkit decoder.\n\nThe `RK_File` function of the rootcheck decoder needs to ensure it\ndoesn't index outside of `MAX_AGENTS` when trying to find/open\na rootcheck file for a given agent.\n\nPrev. to this change the value of `i` could exceed `MAX_AGENTS`\nresulting in a heap buffer overflow accessing `rk_agent_ips[i]` or\n`rk_agent_fps[i]`.\n\nThe fix is adapted from similar logic in the syscheck decoder, added as\na response to a matching vulnerability in that decoder patched in 2012.",
  "commit_hash": "1fe77689c0d42ce58d22f95d69b6e4a77ff96bd0",
  "git_url": "https://github.com/ossec/ossec-hids/commit/1fe77689c0d42ce58d22f95d69b6e4a77ff96bd0",
  "file_path": "src/analysisd/decoders/rootcheck.c",
  "func_name": "RK_File",
  "func_before": "static FILE *RK_File(const char *agent, int *agent_id)\n{\n    int i = 0;\n    char rk_buf[OS_SIZE_1024 + 1];\n\n    while (rk_agent_ips[i] != NULL) {\n        if (strcmp(rk_agent_ips[i], agent) == 0) {\n            /* Pointing to the beginning of the file */\n            fseek(rk_agent_fps[i], 0, SEEK_SET);\n            *agent_id = i;\n            return (rk_agent_fps[i]);\n        }\n\n        i++;\n    }\n\n    /* If here, our agent wasn't found */\n    rk_agent_ips[i] = strdup(agent);\n\n    if (rk_agent_ips[i] != NULL) {\n        snprintf(rk_buf, OS_SIZE_1024, \"%s/%s\", ROOTCHECK_DIR, agent);\n\n        /* r+ to read and write. Do not truncate */\n        rk_agent_fps[i] = fopen(rk_buf, \"r+\");\n        if (!rk_agent_fps[i]) {\n            /* Try opening with a w flag, file probably does not exist */\n            rk_agent_fps[i] = fopen(rk_buf, \"w\");\n            if (rk_agent_fps[i]) {\n                fclose(rk_agent_fps[i]);\n                rk_agent_fps[i] = fopen(rk_buf, \"r+\");\n            }\n        }\n        if (!rk_agent_fps[i]) {\n            merror(FOPEN_ERROR, ARGV0, rk_buf, errno, strerror(errno));\n\n            free(rk_agent_ips[i]);\n            rk_agent_ips[i] = NULL;\n\n            return (NULL);\n        }\n\n        /* Return the opened pointer (the beginning of it) */\n        fseek(rk_agent_fps[i], 0, SEEK_SET);\n        *agent_id = i;\n        return (rk_agent_fps[i]);\n    }\n\n    else {\n        merror(MEM_ERROR, ARGV0, errno, strerror(errno));\n        return (NULL);\n    }\n\n    return (NULL);\n}",
  "abstract_func_before": "static FILE *RK_File(const char *VAR_0, int *VAR_1)\n{\n    int VAR_2 = 0;\n    char VAR_3[VAR_4 + 1];\n\n    while (VAR_5[VAR_2] != NULL) {\n        if (strcmp(VAR_5[VAR_2], VAR_0) == 0) {\n            /* COMMENT_0 */\n            fseek(VAR_6[VAR_2], 0, VAR_7);\n            *VAR_1 = VAR_2;\n            return (VAR_6[VAR_2]);\n        }\n\n        VAR_2++;\n    }\n\n    /* COMMENT_1 */\n    VAR_5[VAR_2] = strdup(VAR_0);\n\n    if (VAR_5[VAR_2] != NULL) {\n        snprintf(VAR_3, VAR_4, \"%s/%s\", VAR_8, VAR_0);\n\n        /* COMMENT_2 */\n        VAR_6[VAR_2] = fopen(VAR_3, \"r+\");\n        if (!VAR_6[VAR_2]) {\n            /* COMMENT_3 */\n            VAR_6[VAR_2] = fopen(VAR_3, \"w\");\n            if (VAR_6[VAR_2]) {\n                fclose(VAR_6[VAR_2]);\n                VAR_6[VAR_2] = fopen(VAR_3, \"r+\");\n            }\n        }\n        if (!VAR_6[VAR_2]) {\n            merror(VAR_9, VAR_10, VAR_3, VAR_11, strerror(VAR_11));\n\n            free(VAR_5[VAR_2]);\n            VAR_5[VAR_2] = NULL;\n\n            return (NULL);\n        }\n\n        /* COMMENT_4 */\n        fseek(VAR_6[VAR_2], 0, VAR_7);\n        *VAR_1 = VAR_2;\n        return (VAR_6[VAR_2]);\n    }\n\n    else {\n        merror(VAR_12, VAR_10, VAR_11, strerror(VAR_11));\n        return (NULL);\n    }\n\n    return (NULL);\n}",
  "func_graph_path_before": "ossec/ossec-hids/1fe77689c0d42ce58d22f95d69b6e4a77ff96bd0/rootcheck.c/vul/before/0.json",
  "func": "static FILE *RK_File(const char *agent, int *agent_id)\n{\n    int i = 0;\n    char rk_buf[OS_SIZE_1024 + 1];\n\n    while (i < MAX_AGENTS && rk_agent_ips[i] != NULL) {\n        if (strcmp(rk_agent_ips[i], agent) == 0) {\n            /* Pointing to the beginning of the file */\n            fseek(rk_agent_fps[i], 0, SEEK_SET);\n            *agent_id = i;\n            return (rk_agent_fps[i]);\n        }\n\n        i++;\n    }\n\n    /* If here, our agent wasn't found */\n    if (i == MAX_AGENTS) {\n        merror(\"%s: Unable to open rootcheck file. Increase MAX_AGENTS.\", ARGV0);\n        return (NULL);\n    }\n\n    /* If here, our agent wasn't found */\n    rk_agent_ips[i] = strdup(agent);\n\n    if (rk_agent_ips[i] != NULL) {\n        snprintf(rk_buf, OS_SIZE_1024, \"%s/%s\", ROOTCHECK_DIR, agent);\n\n        /* r+ to read and write. Do not truncate */\n        rk_agent_fps[i] = fopen(rk_buf, \"r+\");\n        if (!rk_agent_fps[i]) {\n            /* Try opening with a w flag, file probably does not exist */\n            rk_agent_fps[i] = fopen(rk_buf, \"w\");\n            if (rk_agent_fps[i]) {\n                fclose(rk_agent_fps[i]);\n                rk_agent_fps[i] = fopen(rk_buf, \"r+\");\n            }\n        }\n        if (!rk_agent_fps[i]) {\n            merror(FOPEN_ERROR, ARGV0, rk_buf, errno, strerror(errno));\n\n            free(rk_agent_ips[i]);\n            rk_agent_ips[i] = NULL;\n\n            return (NULL);\n        }\n\n        /* Return the opened pointer (the beginning of it) */\n        fseek(rk_agent_fps[i], 0, SEEK_SET);\n        *agent_id = i;\n        return (rk_agent_fps[i]);\n    }\n\n    else {\n        merror(MEM_ERROR, ARGV0, errno, strerror(errno));\n        return (NULL);\n    }\n\n    return (NULL);\n}",
  "abstract_func": "static FILE *RK_File(const char *VAR_0, int *VAR_1)\n{\n    int VAR_2 = 0;\n    char VAR_3[VAR_4 + 1];\n\n    while (VAR_2 < VAR_5 && VAR_6[VAR_2] != NULL) {\n        if (strcmp(VAR_6[VAR_2], VAR_0) == 0) {\n            /* COMMENT_0 */\n            fseek(VAR_7[VAR_2], 0, VAR_8);\n            *VAR_1 = VAR_2;\n            return (VAR_7[VAR_2]);\n        }\n\n        VAR_2++;\n    }\n\n    /* COMMENT_1 */\n    if (VAR_2 == VAR_5) {\n        merror(\"%s: Unable to open rootcheck file. Increase MAX_AGENTS.\", VAR_9);\n        return (NULL);\n    }\n\n    /* COMMENT_1 */\n    VAR_6[VAR_2] = strdup(VAR_0);\n\n    if (VAR_6[VAR_2] != NULL) {\n        snprintf(VAR_3, VAR_4, \"%s/%s\", VAR_10, VAR_0);\n\n        /* COMMENT_2 */\n        VAR_7[VAR_2] = fopen(VAR_3, \"r+\");\n        if (!VAR_7[VAR_2]) {\n            /* COMMENT_3 */\n            VAR_7[VAR_2] = fopen(VAR_3, \"w\");\n            if (VAR_7[VAR_2]) {\n                fclose(VAR_7[VAR_2]);\n                VAR_7[VAR_2] = fopen(VAR_3, \"r+\");\n            }\n        }\n        if (!VAR_7[VAR_2]) {\n            merror(VAR_11, VAR_9, VAR_3, VAR_12, strerror(VAR_12));\n\n            free(VAR_6[VAR_2]);\n            VAR_6[VAR_2] = NULL;\n\n            return (NULL);\n        }\n\n        /* COMMENT_4 */\n        fseek(VAR_7[VAR_2], 0, VAR_8);\n        *VAR_1 = VAR_2;\n        return (VAR_7[VAR_2]);\n    }\n\n    else {\n        merror(VAR_13, VAR_9, VAR_12, strerror(VAR_12));\n        return (NULL);\n    }\n\n    return (NULL);\n}",
  "func_graph_path": "ossec/ossec-hids/1fe77689c0d42ce58d22f95d69b6e4a77ff96bd0/rootcheck.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -3,7 +3,7 @@\n     int i = 0;\n     char rk_buf[OS_SIZE_1024 + 1];\n \n-    while (rk_agent_ips[i] != NULL) {\n+    while (i < MAX_AGENTS && rk_agent_ips[i] != NULL) {\n         if (strcmp(rk_agent_ips[i], agent) == 0) {\n             /* Pointing to the beginning of the file */\n             fseek(rk_agent_fps[i], 0, SEEK_SET);\n@@ -12,6 +12,12 @@\n         }\n \n         i++;\n+    }\n+\n+    /* If here, our agent wasn't found */\n+    if (i == MAX_AGENTS) {\n+        merror(\"%s: Unable to open rootcheck file. Increase MAX_AGENTS.\", ARGV0);\n+        return (NULL);\n     }\n \n     /* If here, our agent wasn't found */",
  "diff_line_info": {
    "deleted_lines": [
      "    while (rk_agent_ips[i] != NULL) {"
    ],
    "added_lines": [
      "    while (i < MAX_AGENTS && rk_agent_ips[i] != NULL) {",
      "    }",
      "",
      "    /* If here, our agent wasn't found */",
      "    if (i == MAX_AGENTS) {",
      "        merror(\"%s: Unable to open rootcheck file. Increase MAX_AGENTS.\", ARGV0);",
      "        return (NULL);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/ossec/ossec-hids/pull/1825",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/ossec/ossec-hids/pull/1825: 403 Client Error: Forbidden for url: https://api.github.com/repos/ossec/ossec-hids/pulls/1825",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 1.0"
}