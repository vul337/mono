{
  "cve_id": "CVE-2022-40761",
  "cwe_ids": [
    "CWE-1284"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
  "cvss_is_v3": true,
  "repo_name": "Samsung/mTower",
  "commit_msg": "Fixed CVE-2022-40761\n\nSigned-off-by: Taras Drozdovskyi <t.drozdovsky@samsung.com>",
  "commit_hash": "c5f30c70e48786e1aef8c815f35e406a6c4fb3ae",
  "git_url": "https://github.com/Samsung/mTower/commit/c5f30c70e48786e1aef8c815f35e406a6c4fb3ae",
  "file_path": "tee/kernel/pseudo_ta.c",
  "func_name": "tee_ta_init_pseudo_ta_session",
  "func_before": "TEE_Result tee_ta_init_pseudo_ta_session(const TEE_UUID *uuid,\n\t\t\tstruct tee_ta_session *s)\n{\n\tstruct pseudo_ta_ctx *stc = NULL;\n\tstruct tee_ta_ctx *ctx;\n\tconst struct pseudo_ta_head *ta;\n\n  DMSG(\"Lookup pseudo TA %pUl\", (void *)uuid);\n\n\tta = &__start_ta_head_section;\n\twhile (true) {\n\t\tif (ta >= &__stop_ta_head_section)\n\t\t\treturn TEE_ERROR_ITEM_NOT_FOUND;\n//    uuid_print(&ta->uuid);\n//    uuid_print(uuid);\n\t\tif (memcmp(&ta->uuid, uuid, sizeof(TEE_UUID)) == 0)\n\t\t\tbreak;\n\t\tta++;\n\t}\n\n\t/* Load a new TA and create a session */\n\tDMSG(\"Open %s\", ta->name);\n\tstc = calloc(1, sizeof(struct pseudo_ta_ctx));\n\tif (!stc)\n\t\treturn TEE_ERROR_OUT_OF_MEMORY;\n\tctx = &stc->ctx;\n\n//\tctx->ref_count = 1;\n\ts->ctx = ctx;\n\tctx->flags = ta->flags;\n\tstc->pseudo_ta = ta;\n\tctx->uuid = ta->uuid;\n\tctx->ops = &pseudo_ta_ops;\n\tTAILQ_INSERT_TAIL(&tee_ctxes, ctx, link);\n\n\tDMSG(\"%s : %pUl\", stc->pseudo_ta->name, (void *)&ctx->uuid);\n\n\treturn TEE_SUCCESS;\n}",
  "abstract_func_before": "TEE_Result tee_ta_init_pseudo_ta_session(const TEE_UUID *VAR_0,\n\t\t\tstruct tee_ta_session *VAR_1)\n{\n\tstruct pseudo_ta_ctx *VAR_2 = NULL;\n\tstruct tee_ta_ctx *VAR_3;\n\tconst struct pseudo_ta_head *VAR_4;\n\n  DMSG(\"Lookup pseudo TA %pUl\", (void *)VAR_0);\n\n\tVAR_4 = &VAR_5;\n\twhile (true) {\n\t\tif (VAR_4 >= &VAR_6)\n\t\t\treturn VAR_7;\n/* COMMENT_0 */\n/* COMMENT_1 */\n\t\tif (memcmp(&VAR_4->uuid, VAR_0, sizeof(TEE_UUID)) == 0)\n\t\t\tbreak;\n\t\tVAR_4++;\n\t}\n\n\t/* COMMENT_2 */\n\tDMSG(\"Open %s\", VAR_4->name);\n\tVAR_2 = calloc(1, sizeof(struct pseudo_ta_ctx));\n\tif (!VAR_2)\n\t\treturn VAR_8;\n\tVAR_3 = &VAR_2->ctx;\n\n/* COMMENT_3 */\n\tVAR_1->ctx = VAR_3;\n\tVAR_3->flags = VAR_4->flags;\n\tVAR_2->pseudo_ta = VAR_4;\n\tVAR_3->uuid = VAR_4->uuid;\n\tVAR_3->ops = &VAR_9;\n\tTAILQ_INSERT_TAIL(&VAR_10, VAR_3, VAR_11);\n\n\tDMSG(\"%s : %pUl\", VAR_2->pseudo_ta->name, (void *)&VAR_3->uuid);\n\n\treturn VAR_12;\n}",
  "func_graph_path_before": "Samsung/mTower/c5f30c70e48786e1aef8c815f35e406a6c4fb3ae/pseudo_ta.c/vul/before/0.json",
  "func": "TEE_Result tee_ta_init_pseudo_ta_session(const TEE_UUID *uuid,\n\t\t\tstruct tee_ta_session *s)\n{\n\tstruct pseudo_ta_ctx *stc = NULL;\n\tstruct tee_ta_ctx *ctx;\n\tconst struct pseudo_ta_head *ta;\n\n  DMSG(\"Lookup pseudo TA %pUl\", (void *)uuid);\n\n\tta = &__start_ta_head_section;\n\twhile (true) {\n\t\tif (ta >= &__stop_ta_head_section)\n\t\t\treturn TEE_ERROR_ITEM_NOT_FOUND;\n//    uuid_print(&ta->uuid);\n//    uuid_print(uuid);\n\t\tif (memcmp(&ta->uuid, uuid, sizeof(TEE_UUID)) == 0)\n\t\t\tbreak;\n\t\tta++;\n\t}\n\n\t/* Load a new TA and create a session */\n\tDMSG(\"Open %s\", ta->name);\n\t// stc = calloc(1, sizeof(struct pseudo_ta_ctx));\n\tstc = TEE_Malloc(sizeof(struct pseudo_ta_ctx), TEE_MALLOC_FILL_ZERO);\n\tif (!stc)\n\t\treturn TEE_ERROR_OUT_OF_MEMORY;\n\tctx = &stc->ctx;\n\n//\tctx->ref_count = 1;\n\ts->ctx = ctx;\n\tctx->flags = ta->flags;\n\tstc->pseudo_ta = ta;\n\tctx->uuid = ta->uuid;\n\tctx->ops = &pseudo_ta_ops;\n\tTAILQ_INSERT_TAIL(&tee_ctxes, ctx, link);\n\n\tDMSG(\"%s : %pUl\", stc->pseudo_ta->name, (void *)&ctx->uuid);\n\n\treturn TEE_SUCCESS;\n}",
  "abstract_func": "TEE_Result tee_ta_init_pseudo_ta_session(const TEE_UUID *VAR_0,\n\t\t\tstruct tee_ta_session *VAR_1)\n{\n\tstruct pseudo_ta_ctx *VAR_2 = NULL;\n\tstruct tee_ta_ctx *VAR_3;\n\tconst struct pseudo_ta_head *VAR_4;\n\n  DMSG(\"Lookup pseudo TA %pUl\", (void *)VAR_0);\n\n\tVAR_4 = &VAR_5;\n\twhile (true) {\n\t\tif (VAR_4 >= &VAR_6)\n\t\t\treturn VAR_7;\n/* COMMENT_0 */\n/* COMMENT_1 */\n\t\tif (memcmp(&VAR_4->uuid, VAR_0, sizeof(TEE_UUID)) == 0)\n\t\t\tbreak;\n\t\tVAR_4++;\n\t}\n\n\t/* COMMENT_2 */\n\tDMSG(\"Open %s\", VAR_4->name);\n\t/* COMMENT_3 */\n\tVAR_2 = TEE_Malloc(sizeof(struct pseudo_ta_ctx), VAR_8);\n\tif (!VAR_2)\n\t\treturn VAR_9;\n\tVAR_3 = &VAR_2->ctx;\n\n/* COMMENT_4 */\n\tVAR_1->ctx = VAR_3;\n\tVAR_3->flags = VAR_4->flags;\n\tVAR_2->pseudo_ta = VAR_4;\n\tVAR_3->uuid = VAR_4->uuid;\n\tVAR_3->ops = &VAR_10;\n\tTAILQ_INSERT_TAIL(&VAR_11, VAR_3, VAR_12);\n\n\tDMSG(\"%s : %pUl\", VAR_2->pseudo_ta->name, (void *)&VAR_3->uuid);\n\n\treturn VAR_13;\n}",
  "func_graph_path": "Samsung/mTower/c5f30c70e48786e1aef8c815f35e406a6c4fb3ae/pseudo_ta.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -20,7 +20,8 @@\n \n \t/* Load a new TA and create a session */\n \tDMSG(\"Open %s\", ta->name);\n-\tstc = calloc(1, sizeof(struct pseudo_ta_ctx));\n+\t// stc = calloc(1, sizeof(struct pseudo_ta_ctx));\n+\tstc = TEE_Malloc(sizeof(struct pseudo_ta_ctx), TEE_MALLOC_FILL_ZERO);\n \tif (!stc)\n \t\treturn TEE_ERROR_OUT_OF_MEMORY;\n \tctx = &stc->ctx;",
  "diff_line_info": {
    "deleted_lines": [
      "\tstc = calloc(1, sizeof(struct pseudo_ta_ctx));"
    ],
    "added_lines": [
      "\t// stc = calloc(1, sizeof(struct pseudo_ta_ctx));",
      "\tstc = TEE_Malloc(sizeof(struct pseudo_ta_ctx), TEE_MALLOC_FILL_ZERO);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/Samsung/mTower/pull/88",
  "description": {
    "pr_info": {
      "title": "Fixed CVE-2022-40761",
      "number": 88
    },
    "comment": [
      "Signed-off-by: Taras Drozdovskyi <t.drozdovsky@samsung.com>\r\n\r\n\r\nFixes #83\r\n\r\n## Type of change\r\n\r\n- [x] Bug fix (non-breaking change which fixes an issue)\r\n\r\n# Checklist:\r\n\r\n- [x] My code follows the style guidelines of this project\r\n- [x] I have performed a self-review of my own code\r\n- [x] I have commented my code, particularly in hard-to-understand areas\r\n- [ ] I have made corresponding changes to the documentation\r\n- [x] My changes generate no new warnings\r\n- [ ] I have added tests that prove my fix is effective or that my feature works\r\n- [x] New and existing unit tests pass locally with my changes\r\n- [ ] Any dependent changes have been merged and published in downstream modules"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix\n\n**Confidence:** 0.9\n\nThe commit message explicitly references a CVE identifier (CVE-2022-40761), indicating a security vulnerability fix. The code change modifies memory allocation from 'calloc' to 'TEE_Malloc' with a zero-fill flag, which aligns with security best practices for preventing buffer leaks. The context and code change reinforce this classification."
}