{
  "cve_id": "CVE-2019-18212",
  "cwe_ids": [
    "CWE-22"
  ],
  "cvss_vector": "AV:N/AC:L/Au:S/C:N/I:P/A:N",
  "cvss_is_v3": false,
  "repo_name": "eclipse/lemminx",
  "commit_msg": "Reject download of resource which are not in the cache folder (url which\nuses several ../../).\n\nSigned-off-by: azerr <azerr@redhat.com>",
  "commit_hash": "e37c399aa266be1b7a43061d4afc43dc230410d2",
  "git_url": "https://github.com/eclipse/lemminx/commit/e37c399aa266be1b7a43061d4afc43dc230410d2",
  "file_path": "org.eclipse.lsp4xml/src/main/java/org/eclipse/lsp4xml/utils/FilesUtils.java",
  "func_name": "getNormalizedPath",
  "func_before": "public static Path getNormalizedPath(String parentDirectory, String givenPath) {\n\n\t\tif (givenPath == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tint lastIndexOfSlash = givenPath.lastIndexOf(SLASH);\n\n\t\t// in case the given path is incomplete, trim the end\n\t\tString givenPathCleaned;\n\t\tif(lastIndexOfSlash == 0) { // Looks like `/someFileOrFolder`\n\t\t\treturn Paths.get(SLASH);\n\t\t}\n\t\telse {\n\t\t\tgivenPathCleaned = lastIndexOfSlash > -1 ? givenPath.substring(0, lastIndexOfSlash) : null;\n\t\t}\n\t\t\n\n\t\tPath p;\n\n\t\t// The following 2 are for when the given path is already valid\n\t\tp = getPathIfExists(givenPath);\n\t\tif (p != null) {\n\t\t\t// givenPath is absolute\n\t\t\treturn p;\n\t\t}\n\n\t\tp = getPathIfExists(givenPathCleaned);\n\t\tif (p != null) {\n\t\t\t// givenPath is absolute\n\t\t\treturn p;\n\t\t}\n\n\n\n\t\tif (parentDirectory == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif (parentDirectory.endsWith(SLASH)) {\n\t\t\tparentDirectory = parentDirectory.substring(0, parentDirectory.length() - 1);\n\t\t}\n\t\t\n\t\tString combinedPath = parentDirectory + SLASH + givenPath;\n\t\tp = getPathIfExists(combinedPath);\n\t\tif (p != null) {\n\t\t\treturn p;\n\t\t}\n\n\t\tcombinedPath = parentDirectory + SLASH + givenPathCleaned;\n\t\tp = getPathIfExists(combinedPath);\n\t\tif (p != null) {\n\t\t\treturn p;\n\t\t}\n\n\t\treturn null;\n\t}",
  "abstract_func_before": "public static Path getNormalizedPath(String VAR_0, String VAR_1) {\n\n\t\tif (VAR_1 == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tint VAR_2 = VAR_1.lastIndexOf(VAR_3);\n\n\t\t/* COMMENT_0 */\n\t\tString VAR_4;\n\t\tif(VAR_2 == 0) { /* COMMENT_1 */\n\t\t\treturn VAR_5.get(VAR_3);\n\t\t}\n\t\telse {\n\t\t\tVAR_4 = VAR_2 > -1 ? VAR_1.substring(0, VAR_2) : null;\n\t\t}\n\t\t\n\n\t\tPath VAR_6;\n\n\t\t/* COMMENT_2 */\n\t\tVAR_6 = getPathIfExists(VAR_1);\n\t\tif (VAR_6 != null) {\n\t\t\t/* COMMENT_3 */\n\t\t\treturn VAR_6;\n\t\t}\n\n\t\tVAR_6 = getPathIfExists(VAR_4);\n\t\tif (VAR_6 != null) {\n\t\t\t/* COMMENT_3 */\n\t\t\treturn VAR_6;\n\t\t}\n\n\n\n\t\tif (VAR_0 == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif (VAR_0.endsWith(VAR_3)) {\n\t\t\tVAR_0 = VAR_0.substring(0, VAR_0.length() - 1);\n\t\t}\n\t\t\n\t\tString VAR_7 = VAR_0 + VAR_3 + VAR_1;\n\t\tVAR_6 = getPathIfExists(VAR_7);\n\t\tif (VAR_6 != null) {\n\t\t\treturn VAR_6;\n\t\t}\n\n\t\tVAR_7 = VAR_0 + VAR_3 + VAR_4;\n\t\tVAR_6 = getPathIfExists(VAR_7);\n\t\tif (VAR_6 != null) {\n\t\t\treturn VAR_6;\n\t\t}\n\n\t\treturn null;\n\t}",
  "func_graph_path_before": "eclipse/lemminx/e37c399aa266be1b7a43061d4afc43dc230410d2/FilesUtils.java/vul/before/2.json",
  "func": "public static Path getNormalizedPath(String parentDirectory, String givenPath) {\n\n\t\tif (givenPath == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tint lastIndexOfSlash = givenPath.lastIndexOf(SLASH);\n\n\t\t// in case the given path is incomplete, trim the end\n\t\tString givenPathCleaned;\n\t\tif (lastIndexOfSlash == 0) { // Looks like `/someFileOrFolder`\n\t\t\treturn Paths.get(SLASH);\n\t\t} else {\n\t\t\tgivenPathCleaned = lastIndexOfSlash > -1 ? givenPath.substring(0, lastIndexOfSlash) : null;\n\t\t}\n\n\t\tPath p;\n\n\t\t// The following 2 are for when the given path is already valid\n\t\tp = getPathIfExists(givenPath);\n\t\tif (p != null) {\n\t\t\t// givenPath is absolute\n\t\t\treturn p;\n\t\t}\n\n\t\tp = getPathIfExists(givenPathCleaned);\n\t\tif (p != null) {\n\t\t\t// givenPath is absolute\n\t\t\treturn p;\n\t\t}\n\n\t\tif (parentDirectory == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif (parentDirectory.endsWith(SLASH)) {\n\t\t\tparentDirectory = parentDirectory.substring(0, parentDirectory.length() - 1);\n\t\t}\n\n\t\tString combinedPath = parentDirectory + SLASH + givenPath;\n\t\tp = getPathIfExists(combinedPath);\n\t\tif (p != null) {\n\t\t\treturn p;\n\t\t}\n\n\t\tcombinedPath = parentDirectory + SLASH + givenPathCleaned;\n\t\tp = getPathIfExists(combinedPath);\n\t\tif (p != null) {\n\t\t\treturn p;\n\t\t}\n\n\t\treturn null;\n\t}",
  "abstract_func": "public static Path getNormalizedPath(String VAR_0, String VAR_1) {\n\n\t\tif (VAR_1 == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tint VAR_2 = VAR_1.lastIndexOf(VAR_3);\n\n\t\t/* COMMENT_0 */\n\t\tString VAR_4;\n\t\tif (VAR_2 == 0) { /* COMMENT_1 */\n\t\t\treturn VAR_5.get(VAR_3);\n\t\t} else {\n\t\t\tVAR_4 = VAR_2 > -1 ? VAR_1.substring(0, VAR_2) : null;\n\t\t}\n\n\t\tPath VAR_6;\n\n\t\t/* COMMENT_2 */\n\t\tVAR_6 = getPathIfExists(VAR_1);\n\t\tif (VAR_6 != null) {\n\t\t\t/* COMMENT_3 */\n\t\t\treturn VAR_6;\n\t\t}\n\n\t\tVAR_6 = getPathIfExists(VAR_4);\n\t\tif (VAR_6 != null) {\n\t\t\t/* COMMENT_3 */\n\t\t\treturn VAR_6;\n\t\t}\n\n\t\tif (VAR_0 == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif (VAR_0.endsWith(VAR_3)) {\n\t\t\tVAR_0 = VAR_0.substring(0, VAR_0.length() - 1);\n\t\t}\n\n\t\tString VAR_7 = VAR_0 + VAR_3 + VAR_1;\n\t\tVAR_6 = getPathIfExists(VAR_7);\n\t\tif (VAR_6 != null) {\n\t\t\treturn VAR_6;\n\t\t}\n\n\t\tVAR_7 = VAR_0 + VAR_3 + VAR_4;\n\t\tVAR_6 = getPathIfExists(VAR_7);\n\t\tif (VAR_6 != null) {\n\t\t\treturn VAR_6;\n\t\t}\n\n\t\treturn null;\n\t}",
  "func_graph_path": "eclipse/lemminx/e37c399aa266be1b7a43061d4afc43dc230410d2/FilesUtils.java/vul/after/2.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -8,13 +8,11 @@\n \n \t\t// in case the given path is incomplete, trim the end\n \t\tString givenPathCleaned;\n-\t\tif(lastIndexOfSlash == 0) { // Looks like `/someFileOrFolder`\n+\t\tif (lastIndexOfSlash == 0) { // Looks like `/someFileOrFolder`\n \t\t\treturn Paths.get(SLASH);\n-\t\t}\n-\t\telse {\n+\t\t} else {\n \t\t\tgivenPathCleaned = lastIndexOfSlash > -1 ? givenPath.substring(0, lastIndexOfSlash) : null;\n \t\t}\n-\t\t\n \n \t\tPath p;\n \n@@ -31,8 +29,6 @@\n \t\t\treturn p;\n \t\t}\n \n-\n-\n \t\tif (parentDirectory == null) {\n \t\t\treturn null;\n \t\t}\n@@ -40,7 +36,7 @@\n \t\tif (parentDirectory.endsWith(SLASH)) {\n \t\t\tparentDirectory = parentDirectory.substring(0, parentDirectory.length() - 1);\n \t\t}\n-\t\t\n+\n \t\tString combinedPath = parentDirectory + SLASH + givenPath;\n \t\tp = getPathIfExists(combinedPath);\n \t\tif (p != null) {",
  "diff_line_info": {
    "deleted_lines": [
      "\t\tif(lastIndexOfSlash == 0) { // Looks like `/someFileOrFolder`",
      "\t\t}",
      "\t\telse {",
      "\t\t",
      "",
      "",
      "\t\t"
    ],
    "added_lines": [
      "\t\tif (lastIndexOfSlash == 0) { // Looks like `/someFileOrFolder`",
      "\t\t} else {",
      ""
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/eclipse-lemminx/lemminx/pull/567",
  "description": {
    "pr_info": {
      "title": "Reject download of resource which are not in the cache folder",
      "number": 567
    },
    "comment": [
      "Reject download of resource which are not in the cache folder (url which uses several ../../).\r\n\r\nSigned-off-by: azerr <azerr@redhat.com>",
      "[CVE-2019-18212](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-18212) was opened  about this issue."
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.95  \n**Step-by-Step Explanation:**\n\n1. **Commit Message Analysis:** The message clearly states that the patch rejects downloads of resources outside the cache folder, specifically mentioning URLs using \"../../\", which indicates path traversal, a security issue.\n2. **Vulnerability Description:** It mirrors the commit message, reinforcing the security fix intention.\n3. **Code Diff Review:** The changes in the function focus on sanitizing paths, preventing traversal by enforcing directory boundaries.\n4. **Security Assessment:** The patch directly addresses a path traversal vulnerability, a known security risk (CWE-22), enhancing system security.\n5. **Confidence Score:** High confidence as all elements clearly indicate a security fix.\n\n**Final Answer:**  \n**Final Classification:** Security Vulnerability Fix; **Confidence:** 0.95"
}