{
  "cve_id": "CVE-2020-12279",
  "cwe_ids": [
    "CWE-706"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "libgit2",
  "commit_msg": "Protect against 8.3 \"short name\" attacks also on Linux/macOS\n\nThe Windows Subsystem for Linux (WSL) is getting increasingly popular,\nin particular because it makes it _so_ easy to run Linux software on\nWindows' files, via the auto-mounted Windows drives (`C:\\` is mapped to\n`/mnt/c/`, no need to set that up manually).\n\nUnfortunately, files/directories on the Windows drives can be accessed\nvia their _short names_, if that feature is enabled (which it is on the\n`C:` drive by default).\n\nWhich means that we have to safeguard even our Linux users against the\nshort name attacks.\n\nFurther, while the default options of CIFS/SMB-mounts seem to disallow\naccessing files on network shares via their short names on Linux/macOS,\nit _is_ possible to do so with the right options.\n\nSo let's just safe-guard against short name attacks _everywhere_.\n\nSigned-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>",
  "commit_hash": "64c612cc3e25eff5fb02c59ef5a66ba7a14751e4",
  "git_url": "https://github.com/libgit2/libgit2/commit/64c612cc3e25eff5fb02c59ef5a66ba7a14751e4",
  "file_path": "src/checkout.c",
  "func_name": "checkout_verify_paths",
  "func_before": "static int checkout_verify_paths(\n\tgit_repository *repo,\n\tint action,\n\tgit_diff_delta *delta)\n{\n\tunsigned int flags = GIT_PATH_REJECT_WORKDIR_DEFAULTS;\n\n\tif (action & CHECKOUT_ACTION__REMOVE) {\n\t\tif (!git_path_isvalid(repo, delta->old_file.path, delta->old_file.mode, flags)) {\n\t\t\tgit_error_set(GIT_ERROR_CHECKOUT, \"cannot remove invalid path '%s'\", delta->old_file.path);\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\tif (action & ~CHECKOUT_ACTION__REMOVE) {\n\t\tif (!git_path_isvalid(repo, delta->new_file.path, delta->new_file.mode, flags)) {\n\t\t\tgit_error_set(GIT_ERROR_CHECKOUT, \"cannot checkout to invalid path '%s'\", delta->new_file.path);\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\treturn 0;\n}",
  "abstract_func_before": "static int checkout_verify_paths(\n\tgit_repository *VAR_0,\n\tint VAR_1,\n\tgit_diff_delta *VAR_2)\n{\n\tunsigned int VAR_3 = VAR_4;\n\n\tif (VAR_1 & VAR_5) {\n\t\tif (!git_path_isvalid(VAR_0, VAR_2->old_file.path, VAR_2->old_file.mode, VAR_3)) {\n\t\t\tgit_error_set(VAR_6, \"cannot remove invalid path '%s'\", VAR_2->old_file.path);\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\tif (VAR_1 & ~VAR_5) {\n\t\tif (!git_path_isvalid(VAR_0, VAR_2->new_file.path, VAR_2->new_file.mode, VAR_3)) {\n\t\t\tgit_error_set(VAR_6, \"cannot checkout to invalid path '%s'\", VAR_2->new_file.path);\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\treturn 0;\n}",
  "func_graph_path_before": "libgit2/64c612cc3e25eff5fb02c59ef5a66ba7a14751e4/checkout.c/vul/before/0.json",
  "func": "static int checkout_verify_paths(\n\tgit_repository *repo,\n\tint action,\n\tgit_diff_delta *delta)\n{\n\tunsigned int flags = GIT_PATH_REJECT_WORKDIR_DEFAULTS | GIT_PATH_REJECT_DOT_GIT_NTFS;\n\n\tif (action & CHECKOUT_ACTION__REMOVE) {\n\t\tif (!git_path_isvalid(repo, delta->old_file.path, delta->old_file.mode, flags)) {\n\t\t\tgit_error_set(GIT_ERROR_CHECKOUT, \"cannot remove invalid path '%s'\", delta->old_file.path);\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\tif (action & ~CHECKOUT_ACTION__REMOVE) {\n\t\tif (!git_path_isvalid(repo, delta->new_file.path, delta->new_file.mode, flags)) {\n\t\t\tgit_error_set(GIT_ERROR_CHECKOUT, \"cannot checkout to invalid path '%s'\", delta->new_file.path);\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\treturn 0;\n}",
  "abstract_func": "static int checkout_verify_paths(\n\tgit_repository *VAR_0,\n\tint VAR_1,\n\tgit_diff_delta *VAR_2)\n{\n\tunsigned int VAR_3 = VAR_4 | VAR_5;\n\n\tif (VAR_1 & VAR_6) {\n\t\tif (!git_path_isvalid(VAR_0, VAR_2->old_file.path, VAR_2->old_file.mode, VAR_3)) {\n\t\t\tgit_error_set(VAR_7, \"cannot remove invalid path '%s'\", VAR_2->old_file.path);\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\tif (VAR_1 & ~VAR_6) {\n\t\tif (!git_path_isvalid(VAR_0, VAR_2->new_file.path, VAR_2->new_file.mode, VAR_3)) {\n\t\t\tgit_error_set(VAR_7, \"cannot checkout to invalid path '%s'\", VAR_2->new_file.path);\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\treturn 0;\n}",
  "func_graph_path": "libgit2/64c612cc3e25eff5fb02c59ef5a66ba7a14751e4/checkout.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -3,7 +3,7 @@\n \tint action,\n \tgit_diff_delta *delta)\n {\n-\tunsigned int flags = GIT_PATH_REJECT_WORKDIR_DEFAULTS;\n+\tunsigned int flags = GIT_PATH_REJECT_WORKDIR_DEFAULTS | GIT_PATH_REJECT_DOT_GIT_NTFS;\n \n \tif (action & CHECKOUT_ACTION__REMOVE) {\n \t\tif (!git_path_isvalid(repo, delta->old_file.path, delta->old_file.mode, flags)) {",
  "diff_line_info": {
    "deleted_lines": [
      "\tunsigned int flags = GIT_PATH_REJECT_WORKDIR_DEFAULTS;"
    ],
    "added_lines": [
      "\tunsigned int flags = GIT_PATH_REJECT_WORKDIR_DEFAULTS | GIT_PATH_REJECT_DOT_GIT_NTFS;"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/libgit2/libgit2/pull/5331",
  "description": {
    "pr_info": {
      "title": "Security fixes for master",
      "number": 5331
    },
    "comment": [
      "This contains security fixes for the following issues:\r\n\r\n- CVE-2019-1348: the fast-import stream command \"feature\r\n  export-marks=path\" allows writing to arbitrary file paths. As\r\n  libgit2 does not offer any interface for fast-import, it is not\r\n  susceptible to this vulnerability.\r\n\r\n- CVE-2019-1349: by using NTFS 8.3 short names, backslashes or\r\n  alternate filesystreams, it is possible to cause submodules to\r\n  be written into pre-existing directories during a recursive\r\n  clone using git. As libgit2 rejects cloning into non-empty\r\n  directories by default, it is not susceptible to this\r\n  vulnerability.\r\n\r\n- CVE-2019-1350: recursive clones may lead to arbitrary remote\r\n  code executing due to improper quoting of command line\r\n  arguments. As libgit2 uses libssh2, which does not require us\r\n  to perform command line parsing, it is not susceptible to this\r\n  vulnerability.\r\n\r\n- CVE-2019-1351: Windows provides the ability to substitute\r\n  drive letters with arbitrary letters, including multi-byte\r\n  Unicode letters. To fix any potential issues arising from\r\n  interpreting such paths as relative paths, we have extended\r\n  detection of DOS drive prefixes to accomodate for such cases.\r\n\r\n- CVE-2019-1352: by using NTFS-style alternative file streams for\r\n  the \".git\" directory, it is possible to overwrite parts of the\r\n  repository. While this has been fixed in the past for Windows,\r\n  the same vulnerability may also exist on other systems that\r\n  write to NTFS filesystems. We now reject any paths starting\r\n  with \".git:\" on all systems.\r\n\r\n- CVE-2019-1353: by using NTFS-style 8.3 short names, it was\r\n  possible to write to the \".git\" directory and thus overwrite\r\n  parts of the repository, leading to possible remote code\r\n  execution. While this problem was already fixed in the past for\r\n  Windows, other systems accessing NTFS filesystems are\r\n  vulnerable to this issue too. We now enable NTFS protecions by\r\n  default on all systems to fix this attack vector.\r\n\r\n- CVE-2019-1354: on Windows, backslashes are not a valid part of\r\n  a filename but are instead interpreted as directory separators.\r\n  As other platforms allowed to use such paths, it was possible\r\n  to write such invalid entries into a Git repository and was\r\n  thus an attack vector to write into the \".git\" dierctory. We\r\n  now reject any entries starting with \".git\\\" on all systems.\r\n\r\n- CVE-2019-1387: it is possible to let a submodule's git\r\n  directory point into a sibling's submodule directory, which may\r\n  result in overwriting parts of the Git repository and thus lead\r\n  to arbitrary command execution. As libgit2 doesn't provide any\r\n  way to do submodule clones natively, it is not susceptible to\r\n  this vulnerability. Users of libgit2 that have implemented\r\n  recursive submodule clones manually are encouraged to review\r\n  their implementation for this vulnerability.\r\n"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 1.0\n\n**Reasoning:**\nThe commit message explicitly discusses protecting against 8.3 \"short name\" attacks on Linux/macOS, referencing security concerns. The vulnerability description lists several CVEs related to attacks on file paths and .git directories. The code diff alters flags to reject certain paths, specifically those involving NTFS protections. These elements are consistent and clearly indicate a security fix."
}