{
  "cve_id": "CVE-2021-32762",
  "cwe_ids": [
    "CWE-190",
    "CWE-680"
  ],
  "cvss_vector": "AV:N/AC:L/Au:S/C:C/I:C/A:C",
  "cvss_is_v3": false,
  "repo_name": "redis",
  "commit_msg": "Fix redis-cli / redis-sential overflow on some platforms (CVE-2021-32762) (#9587)\n\nThe redis-cli command line tool and redis-sentinel service may be vulnerable\r\nto integer overflow when parsing specially crafted large multi-bulk network\r\nreplies. This is a result of a vulnerability in the underlying hiredis\r\nlibrary which does not perform an overflow check before calling the calloc()\r\nheap allocation function.\r\n\r\nThis issue only impacts systems with heap allocators that do not perform their\r\nown overflow checks. Most modern systems do and are therefore not likely to\r\nbe affected. Furthermore, by default redis-sentinel uses the jemalloc allocator\r\nwhich is also not vulnerable.\r\n\r\nCo-authored-by: Yossi Gottlieb <yossigo@gmail.com>",
  "commit_hash": "0215324a66af949be39b34be2d55143232c1cb71",
  "git_url": "https://github.com/redis/redis/commit/0215324a66af949be39b34be2d55143232c1cb71",
  "file_path": "deps/hiredis/hiredis.c",
  "func_name": "createArrayObject",
  "func_before": "static void *createArrayObject(const redisReadTask *task, size_t elements) {\n    redisReply *r, *parent;\n\n    r = createReplyObject(task->type);\n    if (r == NULL)\n        return NULL;\n\n    if (elements > 0) {\n        r->element = hi_calloc(elements,sizeof(redisReply*));\n        if (r->element == NULL) {\n            freeReplyObject(r);\n            return NULL;\n        }\n    }\n\n    r->elements = elements;\n\n    if (task->parent) {\n        parent = task->parent->obj;\n        assert(parent->type == REDIS_REPLY_ARRAY ||\n               parent->type == REDIS_REPLY_MAP ||\n               parent->type == REDIS_REPLY_SET ||\n               parent->type == REDIS_REPLY_PUSH);\n        parent->element[task->idx] = r;\n    }\n    return r;\n}",
  "abstract_func_before": "static void *createArrayObject(const redisReadTask *VAR_0, size_t VAR_1) {\n    redisReply *VAR_2, *VAR_3;\n\n    VAR_2 = createReplyObject(VAR_0->type);\n    if (VAR_2 == NULL)\n        return NULL;\n\n    if (VAR_1 > 0) {\n        VAR_2->element = hi_calloc(VAR_1,sizeof(redisReply*));\n        if (VAR_2->element == NULL) {\n            freeReplyObject(VAR_2);\n            return NULL;\n        }\n    }\n\n    VAR_2->elements = VAR_1;\n\n    if (VAR_0->parent) {\n        VAR_3 = VAR_0->parent->obj;\n        assert(VAR_3->type == VAR_4 ||\n               VAR_3->type == VAR_5 ||\n               VAR_3->type == VAR_6 ||\n               VAR_3->type == VAR_7);\n        VAR_3->element[VAR_0->idx] = VAR_2;\n    }\n    return VAR_2;\n}",
  "func_graph_path_before": "redis/0215324a66af949be39b34be2d55143232c1cb71/hiredis.c/vul/before/0.json",
  "func": "static void *createArrayObject(const redisReadTask *task, size_t elements) {\n    redisReply *r, *parent;\n\n    r = createReplyObject(task->type);\n    if (r == NULL)\n        return NULL;\n\n    if (elements > 0) {\n        if (SIZE_MAX / sizeof(redisReply*) < elements) return NULL;  /* Don't overflow */\n        r->element = hi_calloc(elements,sizeof(redisReply*));\n        if (r->element == NULL) {\n            freeReplyObject(r);\n            return NULL;\n        }\n    }\n\n    r->elements = elements;\n\n    if (task->parent) {\n        parent = task->parent->obj;\n        assert(parent->type == REDIS_REPLY_ARRAY ||\n               parent->type == REDIS_REPLY_MAP ||\n               parent->type == REDIS_REPLY_SET ||\n               parent->type == REDIS_REPLY_PUSH);\n        parent->element[task->idx] = r;\n    }\n    return r;\n}",
  "abstract_func": "static void *createArrayObject(const redisReadTask *VAR_0, size_t VAR_1) {\n    redisReply *VAR_2, *VAR_3;\n\n    VAR_2 = createReplyObject(VAR_0->type);\n    if (VAR_2 == NULL)\n        return NULL;\n\n    if (VAR_1 > 0) {\n        if (VAR_4 / sizeof(redisReply*) < VAR_1) return NULL;  /* COMMENT_0 */\n        VAR_2->element = hi_calloc(VAR_1,sizeof(redisReply*));\n        if (VAR_2->element == NULL) {\n            freeReplyObject(VAR_2);\n            return NULL;\n        }\n    }\n\n    VAR_2->elements = VAR_1;\n\n    if (VAR_0->parent) {\n        VAR_3 = VAR_0->parent->obj;\n        assert(VAR_3->type == VAR_5 ||\n               VAR_3->type == VAR_6 ||\n               VAR_3->type == VAR_7 ||\n               VAR_3->type == VAR_8);\n        VAR_3->element[VAR_0->idx] = VAR_2;\n    }\n    return VAR_2;\n}",
  "func_graph_path": "redis/0215324a66af949be39b34be2d55143232c1cb71/hiredis.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -6,6 +6,7 @@\n         return NULL;\n \n     if (elements > 0) {\n+        if (SIZE_MAX / sizeof(redisReply*) < elements) return NULL;  /* Don't overflow */\n         r->element = hi_calloc(elements,sizeof(redisReply*));\n         if (r->element == NULL) {\n             freeReplyObject(r);",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "        if (SIZE_MAX / sizeof(redisReply*) < elements) return NULL;  /* Don't overflow */"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/redis/redis/pull/9587",
  "description": {
    "pr_info": {
      "title": "Fix redis-cli / redis-sential overflow on some platforms (CVE-2021-32762)",
      "number": 9587
    },
    "comment": [
      "The redis-cli command line tool and redis-sentinel service may be vulnerable\r\nto integer overflow when parsing specially crafted large multi-bulk network\r\nreplies. This is a result of a vulnerability in the underlying hiredis\r\nlibrary which does not perform an overflow check before calling the calloc()\r\nheap allocation function.\r\n\r\nThis issue only impacts systems with heap allocators that do not perform their\r\nown overflow checks. Most modern systems do and are therefore not likely to\r\nbe affected. Furthermore, by default redis-sentinel uses the jemalloc allocator\r\nwhich is also not vulnerable."
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix;  \n**Confidence:** 1.0"
}