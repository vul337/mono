{
  "cve_id": "CVE-2018-1000820",
  "cwe_ids": [
    "CWE-611"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "neo4j-contrib/neo4j-apoc-procedures",
  "commit_msg": "Fixes #931 (#962)",
  "commit_hash": "45bc09c8bd7f17283e2a7e85ce3f02cb4be4fd1a",
  "git_url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/commit/45bc09c8bd7f17283e2a7e85ce3f02cb4be4fd1a",
  "file_path": "src/main/java/apoc/load/Xml.java",
  "func_name": "xmlXpathToMapResult",
  "func_before": "private Stream<MapResult> xmlXpathToMapResult(@Name(\"url\") String url, boolean simpleMode, String path, Map<String, Object> config) throws Exception {\n        if (config == null) config = Collections.emptyMap();\n        boolean failOnError = (boolean) config.getOrDefault(\"failOnError\", true);\n        List<MapResult> result = new ArrayList<>();\n        try {\n            DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();\n            documentBuilderFactory.setNamespaceAware(true);\n            documentBuilderFactory.setIgnoringElementContentWhitespace(true);\n            DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();\n\n            FileUtils.checkReadAllowed(url);\n\n            Map<String, Object> headers = (Map) config.getOrDefault( \"headers\", Collections.emptyMap() );\n\n            Document doc = documentBuilder.parse(Util.openInputStream(url, headers, null));\n            XPathFactory xPathFactory = XPathFactory.newInstance();\n\n            XPath xPath = xPathFactory.newXPath();\n\n            path = StringUtils.isEmpty(path) ? \"/\" : path;\n            XPathExpression xPathExpression = xPath.compile(path);\n            NodeList nodeList = (NodeList) xPathExpression.evaluate(doc, XPathConstants.NODESET);\n\n            for (int i = 0; i < nodeList.getLength(); i++) {\n                final Deque<Map<String, Object>> stack = new LinkedList<>();\n\n                handleNode(stack, nodeList.item(i), simpleMode);\n                for (int index = 0; index < stack.size(); index++) {\n                    result.add(new MapResult(stack.pollFirst()));\n                }\n            }\n        }\n        catch (FileNotFoundException e){\n            if(!failOnError)\n                return Stream.of(new MapResult(Collections.emptyMap()));\n            else\n                throw new FileNotFoundException(e.getMessage());\n        }\n        catch (Exception e){\n            if(!failOnError)\n                return Stream.of(new MapResult(Collections.emptyMap()));\n            else\n                throw new Exception(e);\n        }\n        return result.stream();\n    }",
  "abstract_func_before": "private Stream<MapResult> xmlXpathToMapResult(@Name(\"url\") String VAR_0, boolean VAR_1, String VAR_2, Map<String, Object> VAR_3) throws Exception {\n        if (VAR_3 == null) VAR_3 = VAR_4.emptyMap();\n        boolean VAR_5 = (boolean) VAR_3.getOrDefault(\"failOnError\", true);\n        List<MapResult> VAR_6 = new ArrayList<>();\n        try {\n            DocumentBuilderFactory VAR_7 = VAR_8.newInstance();\n            VAR_7.setNamespaceAware(true);\n            VAR_7.setIgnoringElementContentWhitespace(true);\n            DocumentBuilder VAR_9 = VAR_7.newDocumentBuilder();\n\n            VAR_10.checkReadAllowed(VAR_0);\n\n            Map<String, Object> VAR_11 = (Map) VAR_3.getOrDefault( \"headers\", VAR_4.emptyMap() );\n\n            Document VAR_12 = VAR_9.parse(VAR_13.openInputStream(VAR_0, VAR_11, null));\n            XPathFactory VAR_14 = VAR_15.newInstance();\n\n            XPath VAR_16 = VAR_14.newXPath();\n\n            VAR_2 = VAR_17.isEmpty(VAR_2) ? \"/\" : VAR_2;\n            XPathExpression VAR_18 = VAR_16.compile(VAR_2);\n            NodeList VAR_19 = (NodeList) VAR_18.evaluate(VAR_12, VAR_20.NODESET);\n\n            for (int VAR_21 = 0; VAR_21 < VAR_19.getLength(); VAR_21++) {\n                final Deque<Map<String, Object>> VAR_22 = new LinkedList<>();\n\n                handleNode(VAR_22, VAR_19.item(VAR_21), VAR_1);\n                for (int VAR_23 = 0; VAR_23 < VAR_22.size(); VAR_23++) {\n                    VAR_6.add(new MapResult(VAR_22.pollFirst()));\n                }\n            }\n        }\n        catch (FileNotFoundException VAR_24){\n            if(!VAR_5)\n                return VAR_25.of(new MapResult(VAR_4.emptyMap()));\n            else\n                throw new FileNotFoundException(VAR_24.getMessage());\n        }\n        catch (Exception VAR_24){\n            if(!VAR_5)\n                return VAR_25.of(new MapResult(VAR_4.emptyMap()));\n            else\n                throw new Exception(VAR_24);\n        }\n        return VAR_6.stream();\n    }",
  "func_graph_path_before": "neo4j-contrib/neo4j-apoc-procedures/45bc09c8bd7f17283e2a7e85ce3f02cb4be4fd1a/Xml.java/vul/before/0.json",
  "func": "private Stream<MapResult> xmlXpathToMapResult(@Name(\"url\") String url, boolean simpleMode, String path, Map<String, Object> config) throws Exception {\n        if (config == null) config = Collections.emptyMap();\n        boolean failOnError = (boolean) config.getOrDefault(\"failOnError\", true);\n        List<MapResult> result = new ArrayList<>();\n        try {\n            DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();\n            documentBuilderFactory.setNamespaceAware(true);\n            documentBuilderFactory.setIgnoringElementContentWhitespace(true);\n            documentBuilderFactory.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n            DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();\n\n            FileUtils.checkReadAllowed(url);\n\n            Map<String, Object> headers = (Map) config.getOrDefault( \"headers\", Collections.emptyMap() );\n\n            Document doc = documentBuilder.parse(Util.openInputStream(url, headers, null));\n            XPathFactory xPathFactory = XPathFactory.newInstance();\n\n            XPath xPath = xPathFactory.newXPath();\n\n            path = StringUtils.isEmpty(path) ? \"/\" : path;\n            XPathExpression xPathExpression = xPath.compile(path);\n            NodeList nodeList = (NodeList) xPathExpression.evaluate(doc, XPathConstants.NODESET);\n\n            for (int i = 0; i < nodeList.getLength(); i++) {\n                final Deque<Map<String, Object>> stack = new LinkedList<>();\n\n                handleNode(stack, nodeList.item(i), simpleMode);\n                for (int index = 0; index < stack.size(); index++) {\n                    result.add(new MapResult(stack.pollFirst()));\n                }\n            }\n        }\n        catch (FileNotFoundException e){\n            if(!failOnError)\n                return Stream.of(new MapResult(Collections.emptyMap()));\n            else\n                throw new FileNotFoundException(e.getMessage());\n        }\n        catch (Exception e){\n            if(!failOnError)\n                return Stream.of(new MapResult(Collections.emptyMap()));\n            else\n                throw new Exception(e);\n        }\n        return result.stream();\n    }",
  "abstract_func": "private Stream<MapResult> xmlXpathToMapResult(@Name(\"url\") String VAR_0, boolean VAR_1, String VAR_2, Map<String, Object> VAR_3) throws Exception {\n        if (VAR_3 == null) VAR_3 = VAR_4.emptyMap();\n        boolean VAR_5 = (boolean) VAR_3.getOrDefault(\"failOnError\", true);\n        List<MapResult> VAR_6 = new ArrayList<>();\n        try {\n            DocumentBuilderFactory VAR_7 = VAR_8.newInstance();\n            VAR_7.setNamespaceAware(true);\n            VAR_7.setIgnoringElementContentWhitespace(true);\n            VAR_7.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n            DocumentBuilder VAR_9 = VAR_7.newDocumentBuilder();\n\n            VAR_10.checkReadAllowed(VAR_0);\n\n            Map<String, Object> VAR_11 = (Map) VAR_3.getOrDefault( \"headers\", VAR_4.emptyMap() );\n\n            Document VAR_12 = VAR_9.parse(VAR_13.openInputStream(VAR_0, VAR_11, null));\n            XPathFactory VAR_14 = VAR_15.newInstance();\n\n            XPath VAR_16 = VAR_14.newXPath();\n\n            VAR_2 = VAR_17.isEmpty(VAR_2) ? \"/\" : VAR_2;\n            XPathExpression VAR_18 = VAR_16.compile(VAR_2);\n            NodeList VAR_19 = (NodeList) VAR_18.evaluate(VAR_12, VAR_20.NODESET);\n\n            for (int VAR_21 = 0; VAR_21 < VAR_19.getLength(); VAR_21++) {\n                final Deque<Map<String, Object>> VAR_22 = new LinkedList<>();\n\n                handleNode(VAR_22, VAR_19.item(VAR_21), VAR_1);\n                for (int VAR_23 = 0; VAR_23 < VAR_22.size(); VAR_23++) {\n                    VAR_6.add(new MapResult(VAR_22.pollFirst()));\n                }\n            }\n        }\n        catch (FileNotFoundException VAR_24){\n            if(!VAR_5)\n                return VAR_25.of(new MapResult(VAR_4.emptyMap()));\n            else\n                throw new FileNotFoundException(VAR_24.getMessage());\n        }\n        catch (Exception VAR_24){\n            if(!VAR_5)\n                return VAR_25.of(new MapResult(VAR_4.emptyMap()));\n            else\n                throw new Exception(VAR_24);\n        }\n        return VAR_6.stream();\n    }",
  "func_graph_path": "neo4j-contrib/neo4j-apoc-procedures/45bc09c8bd7f17283e2a7e85ce3f02cb4be4fd1a/Xml.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -6,6 +6,7 @@\n             DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();\n             documentBuilderFactory.setNamespaceAware(true);\n             documentBuilderFactory.setIgnoringElementContentWhitespace(true);\n+            documentBuilderFactory.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n             DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();\n \n             FileUtils.checkReadAllowed(url);",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "            documentBuilderFactory.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/pull/962",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/neo4j-contrib/neo4j-apoc-procedures/pull/962: 403 Client Error: Forbidden for url: https://api.github.com/repos/neo4j-contrib/neo4j-apoc-procedures/pulls/962",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix;  \n**Confidence:** 0.9  \n\nThe patch addresses a security concern by disabling XML doctype declarations to prevent entity attacks, which aligns with the vulnerability description and code changes."
}