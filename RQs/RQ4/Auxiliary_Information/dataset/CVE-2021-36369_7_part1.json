{
  "cve_id": "CVE-2021-36369",
  "cwe_ids": [
    "CWE-287"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
  "cvss_is_v3": true,
  "repo_name": "mkj/dropbear",
  "commit_msg": "added option to disable trivial auth methods",
  "commit_hash": "7c2e8fcd0d162d2ba9fac116f96a5e82ac77f11c",
  "git_url": "https://github.com/mkj/dropbear/commit/7c2e8fcd0d162d2ba9fac116f96a5e82ac77f11c",
  "file_path": "cli-authpasswd.c",
  "func_name": "cli_auth_password",
  "func_before": "void cli_auth_password() {\n\n\tchar* password = NULL;\n\tchar prompt[80];\n\n\tTRACE((\"enter cli_auth_password\"))\n\tCHECKCLEARTOWRITE();\n\n\tsnprintf(prompt, sizeof(prompt), \"%s@%s's password: \", \n\t\t\t\tcli_opts.username, cli_opts.remotehost);\n#if DROPBEAR_CLI_ASKPASS_HELPER\n\tif (want_askpass())\n\t{\n\t\tpassword = gui_getpass(prompt);\n\t\tif (!password) {\n\t\t\tdropbear_exit(\"No password\");\n\t\t}\n\t} else\n#endif\n\t{\n\t\tpassword = getpass_or_cancel(prompt);\n\t}\n\n\tbuf_putbyte(ses.writepayload, SSH_MSG_USERAUTH_REQUEST);\n\n\tbuf_putstring(ses.writepayload, cli_opts.username,\n\t\t\tstrlen(cli_opts.username));\n\n\tbuf_putstring(ses.writepayload, SSH_SERVICE_CONNECTION,\n\t\t\tSSH_SERVICE_CONNECTION_LEN);\n\n\tbuf_putstring(ses.writepayload, AUTH_METHOD_PASSWORD,\n\t\t\tAUTH_METHOD_PASSWORD_LEN);\n\n\tbuf_putbyte(ses.writepayload, 0); /* FALSE - so says the spec */\n\n\tbuf_putstring(ses.writepayload, password, strlen(password));\n\n\tencrypt_packet();\n\tm_burn(password, strlen(password));\n\n\tTRACE((\"leave cli_auth_password\"))\n}",
  "abstract_func_before": "void cli_auth_password() {\n\n\tchar* VAR_0 = NULL;\n\tchar VAR_1[80];\n\n\tTRACE((\"enter cli_auth_password\"))\n\tCHECKCLEARTOWRITE();\n\n\tsnprintf(VAR_1, sizeof(VAR_1), \"%s@%s's password: \", \n\t\t\t\tVAR_2.username, VAR_2.remotehost);\n#if VAR_3\n\tif (want_askpass())\n\t{\n\t\tVAR_0 = gui_getpass(VAR_1);\n\t\tif (!VAR_0) {\n\t\t\tdropbear_exit(\"No password\");\n\t\t}\n\t} else\n#endif\n\t{\n\t\tVAR_0 = getpass_or_cancel(VAR_1);\n\t}\n\n\tbuf_putbyte(VAR_4.writepayload, VAR_5);\n\n\tbuf_putstring(VAR_4.writepayload, VAR_2.username,\n\t\t\tstrlen(VAR_2.username));\n\n\tbuf_putstring(VAR_4.writepayload, VAR_6,\n\t\t\tVAR_7);\n\n\tbuf_putstring(VAR_4.writepayload, VAR_8,\n\t\t\tVAR_9);\n\n\tbuf_putbyte(VAR_4.writepayload, 0); /* COMMENT_0 */\n\n\tbuf_putstring(VAR_4.writepayload, VAR_0, strlen(VAR_0));\n\n\tencrypt_packet();\n\tm_burn(VAR_0, strlen(VAR_0));\n\n\tTRACE((\"leave cli_auth_password\"))\n}",
  "func_graph_path_before": "mkj/dropbear/7c2e8fcd0d162d2ba9fac116f96a5e82ac77f11c/cli-authpasswd.c/vul/before/0.json",
  "func": "void cli_auth_password() {\n\n\tchar* password = NULL;\n\tchar prompt[80];\n\n\tTRACE((\"enter cli_auth_password\"))\n\tCHECKCLEARTOWRITE();\n\n\tsnprintf(prompt, sizeof(prompt), \"%s@%s's password: \", \n\t\t\t\tcli_opts.username, cli_opts.remotehost);\n#if DROPBEAR_CLI_ASKPASS_HELPER\n\tif (want_askpass())\n\t{\n\t\tpassword = gui_getpass(prompt);\n\t\tif (!password) {\n\t\t\tdropbear_exit(\"No password\");\n\t\t}\n\t} else\n#endif\n\t{\n\t\tpassword = getpass_or_cancel(prompt);\n\t}\n\n\tbuf_putbyte(ses.writepayload, SSH_MSG_USERAUTH_REQUEST);\n\n\tbuf_putstring(ses.writepayload, cli_opts.username,\n\t\t\tstrlen(cli_opts.username));\n\n\tbuf_putstring(ses.writepayload, SSH_SERVICE_CONNECTION,\n\t\t\tSSH_SERVICE_CONNECTION_LEN);\n\n\tbuf_putstring(ses.writepayload, AUTH_METHOD_PASSWORD,\n\t\t\tAUTH_METHOD_PASSWORD_LEN);\n\n\tbuf_putbyte(ses.writepayload, 0); /* FALSE - so says the spec */\n\n\tbuf_putstring(ses.writepayload, password, strlen(password));\n\n\tencrypt_packet();\n\tm_burn(password, strlen(password));\n\tcli_ses.is_trivial_auth = 0;\n\tTRACE((\"leave cli_auth_password\"))\n}",
  "abstract_func": "void cli_auth_password() {\n\n\tchar* VAR_0 = NULL;\n\tchar VAR_1[80];\n\n\tTRACE((\"enter cli_auth_password\"))\n\tCHECKCLEARTOWRITE();\n\n\tsnprintf(VAR_1, sizeof(VAR_1), \"%s@%s's password: \", \n\t\t\t\tVAR_2.username, VAR_2.remotehost);\n#if VAR_3\n\tif (want_askpass())\n\t{\n\t\tVAR_0 = gui_getpass(VAR_1);\n\t\tif (!VAR_0) {\n\t\t\tdropbear_exit(\"No password\");\n\t\t}\n\t} else\n#endif\n\t{\n\t\tVAR_0 = getpass_or_cancel(VAR_1);\n\t}\n\n\tbuf_putbyte(VAR_4.writepayload, VAR_5);\n\n\tbuf_putstring(VAR_4.writepayload, VAR_2.username,\n\t\t\tstrlen(VAR_2.username));\n\n\tbuf_putstring(VAR_4.writepayload, VAR_6,\n\t\t\tVAR_7);\n\n\tbuf_putstring(VAR_4.writepayload, VAR_8,\n\t\t\tVAR_9);\n\n\tbuf_putbyte(VAR_4.writepayload, 0); /* COMMENT_0 */\n\n\tbuf_putstring(VAR_4.writepayload, VAR_0, strlen(VAR_0));\n\n\tencrypt_packet();\n\tm_burn(VAR_0, strlen(VAR_0));\n\tVAR_10.is_trivial_auth = 0;\n\tTRACE((\"leave cli_auth_password\"))\n}",
  "func_graph_path": "mkj/dropbear/7c2e8fcd0d162d2ba9fac116f96a5e82ac77f11c/cli-authpasswd.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -38,6 +38,6 @@\n \n \tencrypt_packet();\n \tm_burn(password, strlen(password));\n-\n+\tcli_ses.is_trivial_auth = 0;\n \tTRACE((\"leave cli_auth_password\"))\n }",
  "diff_line_info": {
    "deleted_lines": [
      ""
    ],
    "added_lines": [
      "\tcli_ses.is_trivial_auth = 0;"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/mkj/dropbear/pull/128",
  "description": {
    "pr_info": {
      "title": "added option to disable trivial auth methods",
      "number": 128
    },
    "comment": [
      "I have added an option ``-o ExitOnTrivialAuth=yes`` to disable trivial authentications as discussed in our mails",
      "I have renamed to argument to ``-o DisableTrivialAuth=yes`` to match OpenSSH's parameter",
      "Would you merge this pull request, because we are planning to create a CVE and I think this should be mitigated before we publish a full disclosure. ",
      "Hello, we are planning to release information about trivial succes authentication. Do you need help with merging the pull requests and creating the new release?"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.95  \n\nThe commit introduces an option to disable trivial authentication methods, which directly relates to addressing a security concern by preventing the use of weak authentication, thus reducing potential security risks. The code changes confirm this by modifying authentication handling. The description and code are consistent, leading to a high confidence in this classification."
}