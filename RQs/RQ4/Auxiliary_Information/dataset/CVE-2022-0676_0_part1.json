{
  "cve_id": "CVE-2022-0676",
  "cwe_ids": [
    "CWE-787"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "radareorg/radare2",
  "commit_msg": "Fix heap buffer overflow in dyldcache parser ##crash\n\n* Reported by: Lazymio via huntr.dev\n* Reproducer: dyldovf",
  "commit_hash": "c84b7232626badd075caf3ae29661b609164bac6",
  "git_url": "https://github.com/radareorg/radare2/commit/c84b7232626badd075caf3ae29661b609164bac6",
  "file_path": "libr/bin/p/bin_dyldcache.c",
  "func_name": "load_buffer",
  "func_before": "static bool load_buffer(RBinFile *bf, void **bin_obj, RBuffer *buf, ut64 loadaddr, Sdb *sdb) {\n\tRDyldCache *cache = R_NEW0 (RDyldCache);\n\tmemcpy (cache->magic, \"dyldcac\", 7);\n\tcache->buf = r_buf_ref (buf);\n\tpopulate_cache_headers (cache);\n\tif (!cache->hdr) {\n\t\tr_dyldcache_free (cache);\n\t\treturn false;\n\t}\n\tpopulate_cache_maps (cache);\n\tif (!cache->maps) {\n\t\tr_dyldcache_free (cache);\n\t\treturn false;\n\t}\n\tcache->accel = read_cache_accel (cache->buf, cache->hdr, cache->maps);\n\tcache->bins = create_cache_bins (bf, cache);\n\tif (!cache->bins) {\n\t\tr_dyldcache_free (cache);\n\t\treturn false;\n\t}\n\tcache->locsym = r_dyld_locsym_new (cache);\n\tcache->rebase_infos = get_rebase_infos (bf, cache);\n\tif (cache->rebase_infos) {\n\t\tif (!rebase_infos_get_slide (cache)) {\n\t\t\tif (!pending_bin_files) {\n\t\t\t\tpending_bin_files = r_list_new ();\n\t\t\t\tif (!pending_bin_files) {\n\t\t\t\t\tr_dyldcache_free (cache);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\tr_list_push (pending_bin_files, bf);\n\t\t\tswizzle_io_read (cache, bf->rbin->iob.io);\n\t\t}\n\t}\n\t*bin_obj = cache;\n\treturn true;\n}",
  "abstract_func_before": "static bool load_buffer(RBinFile *VAR_0, void **VAR_1, RBuffer *VAR_2, ut64 VAR_3, Sdb *VAR_4) {\n\tRDyldCache *VAR_5 = R_NEW0 (RDyldCache);\n\tmemcpy (VAR_5->magic, \"dyldcac\", 7);\n\tVAR_5->buf = r_buf_ref (VAR_2);\n\tpopulate_cache_headers (VAR_5);\n\tif (!VAR_5->hdr) {\n\t\tr_dyldcache_free (VAR_5);\n\t\treturn false;\n\t}\n\tpopulate_cache_maps (VAR_5);\n\tif (!VAR_5->maps) {\n\t\tr_dyldcache_free (VAR_5);\n\t\treturn false;\n\t}\n\tVAR_5->accel = read_cache_accel (VAR_5->buf, VAR_5->hdr, VAR_5->maps);\n\tVAR_5->bins = create_cache_bins (VAR_0, VAR_5);\n\tif (!VAR_5->bins) {\n\t\tr_dyldcache_free (VAR_5);\n\t\treturn false;\n\t}\n\tVAR_5->locsym = r_dyld_locsym_new (VAR_5);\n\tVAR_5->rebase_infos = get_rebase_infos (VAR_0, VAR_5);\n\tif (VAR_5->rebase_infos) {\n\t\tif (!rebase_infos_get_slide (VAR_5)) {\n\t\t\tif (!VAR_6) {\n\t\t\t\tVAR_6 = r_list_new ();\n\t\t\t\tif (!VAR_6) {\n\t\t\t\t\tr_dyldcache_free (VAR_5);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\tr_list_push (VAR_6, VAR_0);\n\t\t\tswizzle_io_read (VAR_5, VAR_0->rbin->iob.io);\n\t\t}\n\t}\n\t*VAR_1 = VAR_5;\n\treturn true;\n}",
  "func_graph_path_before": "radareorg/radare2/c84b7232626badd075caf3ae29661b609164bac6/bin_dyldcache.c/vul/before/1.json",
  "func": "static bool load_buffer(RBinFile *bf, void **bin_obj, RBuffer *buf, ut64 loadaddr, Sdb *sdb) {\n\tRDyldCache *cache = R_NEW0 (RDyldCache);\n\tmemcpy (cache->magic, \"dyldcac\", 7);\n\tcache->buf = r_buf_ref (buf);\n\tpopulate_cache_headers (cache);\n\tif (!cache->hdr) {\n\t\tr_dyldcache_free (cache);\n\t\treturn false;\n\t}\n\tpopulate_cache_maps (cache);\n\tif (!cache->maps) {\n\t\tr_dyldcache_free (cache);\n\t\treturn false;\n\t}\n\tcache->accel = read_cache_accel (cache->buf, cache->hdr, cache->maps, cache->n_maps);\n\tcache->bins = create_cache_bins (bf, cache);\n\tif (!cache->bins) {\n\t\tr_dyldcache_free (cache);\n\t\treturn false;\n\t}\n\tcache->locsym = r_dyld_locsym_new (cache);\n\tcache->rebase_infos = get_rebase_infos (bf, cache);\n\tif (cache->rebase_infos) {\n\t\tif (!rebase_infos_get_slide (cache)) {\n\t\t\tif (!pending_bin_files) {\n\t\t\t\tpending_bin_files = r_list_new ();\n\t\t\t\tif (!pending_bin_files) {\n\t\t\t\t\tr_dyldcache_free (cache);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\tr_list_push (pending_bin_files, bf);\n\t\t\tswizzle_io_read (cache, bf->rbin->iob.io);\n\t\t}\n\t}\n\t*bin_obj = cache;\n\treturn true;\n}",
  "abstract_func": "static bool load_buffer(RBinFile *VAR_0, void **VAR_1, RBuffer *VAR_2, ut64 VAR_3, Sdb *VAR_4) {\n\tRDyldCache *VAR_5 = R_NEW0 (RDyldCache);\n\tmemcpy (VAR_5->magic, \"dyldcac\", 7);\n\tVAR_5->buf = r_buf_ref (VAR_2);\n\tpopulate_cache_headers (VAR_5);\n\tif (!VAR_5->hdr) {\n\t\tr_dyldcache_free (VAR_5);\n\t\treturn false;\n\t}\n\tpopulate_cache_maps (VAR_5);\n\tif (!VAR_5->maps) {\n\t\tr_dyldcache_free (VAR_5);\n\t\treturn false;\n\t}\n\tVAR_5->accel = read_cache_accel (VAR_5->buf, VAR_5->hdr, VAR_5->maps, VAR_5->n_maps);\n\tVAR_5->bins = create_cache_bins (VAR_0, VAR_5);\n\tif (!VAR_5->bins) {\n\t\tr_dyldcache_free (VAR_5);\n\t\treturn false;\n\t}\n\tVAR_5->locsym = r_dyld_locsym_new (VAR_5);\n\tVAR_5->rebase_infos = get_rebase_infos (VAR_0, VAR_5);\n\tif (VAR_5->rebase_infos) {\n\t\tif (!rebase_infos_get_slide (VAR_5)) {\n\t\t\tif (!VAR_6) {\n\t\t\t\tVAR_6 = r_list_new ();\n\t\t\t\tif (!VAR_6) {\n\t\t\t\t\tr_dyldcache_free (VAR_5);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\tr_list_push (VAR_6, VAR_0);\n\t\t\tswizzle_io_read (VAR_5, VAR_0->rbin->iob.io);\n\t\t}\n\t}\n\t*VAR_1 = VAR_5;\n\treturn true;\n}",
  "func_graph_path": "radareorg/radare2/c84b7232626badd075caf3ae29661b609164bac6/bin_dyldcache.c/vul/after/1.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -12,7 +12,7 @@\n \t\tr_dyldcache_free (cache);\n \t\treturn false;\n \t}\n-\tcache->accel = read_cache_accel (cache->buf, cache->hdr, cache->maps);\n+\tcache->accel = read_cache_accel (cache->buf, cache->hdr, cache->maps, cache->n_maps);\n \tcache->bins = create_cache_bins (bf, cache);\n \tif (!cache->bins) {\n \t\tr_dyldcache_free (cache);",
  "diff_line_info": {
    "deleted_lines": [
      "\tcache->accel = read_cache_accel (cache->buf, cache->hdr, cache->maps);"
    ],
    "added_lines": [
      "\tcache->accel = read_cache_accel (cache->buf, cache->hdr, cache->maps, cache->n_maps);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/radareorg/radare2/pull/19728",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/radareorg/radare2/pull/19728: 403 Client Error: Forbidden for url: https://api.github.com/repos/radareorg/radare2/pulls/19728",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 1.0"
}