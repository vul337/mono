{
  "cve_id": "CVE-2023-52263",
  "cwe_ids": [
    "CWE-601"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
  "cvss_is_v3": true,
  "repo_name": "brave/brave-core",
  "commit_msg": "Further restrict the schema for WebUI factory and redirect\n\nFixes https://github.com/brave/brave-browser/issues/32449\nContains follow up feedback for https://girave-browser/issthub.com/brave/bues/32425",
  "commit_hash": "9da202f7f4bc80b6975909b684bbc0764a31c4e9",
  "git_url": "https://github.com/brave/brave-core/commit/9da202f7f4bc80b6975909b684bbc0764a31c4e9",
  "file_path": "browser/ui/webui/brave_web_ui_controller_factory.cc",
  "func_name": "GetWebUIFactoryFunction",
  "func_before": "WebUIFactoryFunction GetWebUIFactoryFunction(WebUI* web_ui,\n                                             Profile* profile,\n                                             const GURL& url) {\n  // This will get called a lot to check all URLs, so do a quick check of other\n  // schemes to filter out most URLs.\n  if (!content::HasWebUIScheme(url)) {\n    return nullptr;\n  }\n\n  if (url.host_piece() == kAdblockHost ||\n      url.host_piece() == kAdblockInternalsHost ||\n      url.host_piece() == kWebcompatReporterHost ||\n      (url.host_piece() == kSkusInternalsHost &&\n       base::FeatureList::IsEnabled(skus::features::kSkusFeature)) ||\n#if BUILDFLAG(ENABLE_IPFS_INTERNALS_WEBUI)\n      (url.host_piece() == kIPFSWebUIHost &&\n       ipfs::IpfsServiceFactory::IsIpfsEnabled(profile)) ||\n#endif  // BUILDFLAG(ENABLE_IPFS_INTERNALS_WEBUI)\n#if BUILDFLAG(IS_ANDROID)\n      (url.is_valid() && url.host_piece() == kWalletPageHost &&\n       (url.path() == kWalletSwapPagePath ||\n        url.path() == kWalletSendPagePath || url.path() == kWalletBuyPagePath ||\n        url.path() == kWalletDepositPagePath)) ||\n#else\n      (base::FeatureList::IsEnabled(\n           brave_news::features::kBraveNewsFeedUpdate) &&\n       url.host_piece() == kBraveNewsInternalsHost) ||\n      ((url.host_piece() == kWalletPanelHost ||\n        url.host_piece() == kWalletPageHost) &&\n       brave_wallet::IsAllowedForContext(profile)) ||\n      url.host_piece() == kBraveRewardsPanelHost ||\n      url.host_piece() == kBraveTipPanelHost ||\n      url.host_piece() == kSpeedreaderPanelHost ||\n      // On Android New Tab is a native page implemented in Java, so no need in\n      // WebUI.\n      url.host_piece() == chrome::kChromeUINewTabHost ||\n      url.host_piece() == chrome::kChromeUISettingsHost ||\n      ((url.host_piece() == kWelcomeHost ||\n        url.host_piece() == chrome::kChromeUIWelcomeURL) &&\n       !profile->IsGuestSession()) ||\n      url.host_piece() == kShieldsPanelHost ||\n      (url.host_piece() == kCookieListOptInHost &&\n       base::FeatureList::IsEnabled(\n           brave_shields::features::kBraveAdblockCookieListOptIn)) ||\n#endif  // BUILDFLAG(IS_ANDROID)\n#if BUILDFLAG(ENABLE_TOR)\n      url.host_piece() == kTorInternalsHost ||\n#endif\n      url.host_piece() == kRewardsPageHost ||\n      url.host_piece() == kRewardsInternalsHost) {\n    return &NewWebUI;\n  }\n\n  return nullptr;\n}",
  "abstract_func_before": "WebUIFactoryFunction GetWebUIFactoryFunction(WebUI* VAR_0,\n                                             Profile* VAR_1,\n                                             const GURL& VAR_2) {\n  /* COMMENT_0 */\n  /* COMMENT_1 */\n  if (!content::HasWebUIScheme(VAR_2)) {\n    return nullptr;\n  }\n\n  if (VAR_2.host_piece() == VAR_3 ||\n      VAR_2.host_piece() == VAR_4 ||\n      VAR_2.host_piece() == VAR_5 ||\n      (VAR_2.host_piece() == VAR_6 &&\n       base::FeatureList::IsEnabled(skus::features::kSkusFeature)) ||\n#if BUILDFLAG(VAR_7)\n      (VAR_2.host_piece() == VAR_8 &&\n       ipfs::IpfsServiceFactory::IsIpfsEnabled(VAR_1)) ||\n#endif  /* COMMENT_2 */\n#if BUILDFLAG(VAR_9)\n      (VAR_2.is_valid() && VAR_2.host_piece() == VAR_10 &&\n       (VAR_2.path() == VAR_11 ||\n        VAR_2.path() == VAR_12 || VAR_2.path() == VAR_13 ||\n        VAR_2.path() == VAR_14)) ||\n#else\n      (base::FeatureList::IsEnabled(\n           brave_news::features::kBraveNewsFeedUpdate) &&\n       VAR_2.host_piece() == VAR_15) ||\n      ((VAR_2.host_piece() == VAR_16 ||\n        VAR_2.host_piece() == VAR_10) &&\n       brave_wallet::IsAllowedForContext(VAR_1)) ||\n      VAR_2.host_piece() == VAR_17 ||\n      VAR_2.host_piece() == VAR_18 ||\n      VAR_2.host_piece() == VAR_19 ||\n      /* COMMENT_3 */\n      /* COMMENT_4 */\n      VAR_2.host_piece() == chrome::kChromeUINewTabHost ||\n      VAR_2.host_piece() == chrome::kChromeUISettingsHost ||\n      ((VAR_2.host_piece() == VAR_20 ||\n        VAR_2.host_piece() == chrome::kChromeUIWelcomeURL) &&\n       !VAR_1->IsGuestSession()) ||\n      VAR_2.host_piece() == VAR_21 ||\n      (VAR_2.host_piece() == VAR_22 &&\n       base::FeatureList::IsEnabled(\n           brave_shields::features::kBraveAdblockCookieListOptIn)) ||\n#endif  /* COMMENT_5 */\n#if BUILDFLAG(VAR_23)\n      VAR_2.host_piece() == VAR_24 ||\n#endif\n      VAR_2.host_piece() == VAR_25 ||\n      VAR_2.host_piece() == VAR_26) {\n    return &VAR_27;\n  }\n\n  return nullptr;\n}",
  "func_graph_path_before": "brave/brave-core/9da202f7f4bc80b6975909b684bbc0764a31c4e9/brave_web_ui_controller_factory.cc/vul/before/0.json",
  "func": "WebUIFactoryFunction GetWebUIFactoryFunction(WebUI* web_ui,\n                                             Profile* profile,\n                                             const GURL& url) {\n  // This will get called a lot to check all URLs, so do a quick check of other\n  // schemes to filter out most URLs.\n  //\n  // This has a narrow scoper scope than content::HasWebUIScheme(url) which also\n  // allows both `chrome-untrusted` and `chrome-devtools`.\n  if (!url.SchemeIs(content::kBraveUIScheme) &&\n      !url.SchemeIs(content::kChromeUIScheme)) {\n    return nullptr;\n  }\n\n  if (url.host_piece() == kAdblockHost ||\n      url.host_piece() == kAdblockInternalsHost ||\n      url.host_piece() == kWebcompatReporterHost ||\n      (url.host_piece() == kSkusInternalsHost &&\n       base::FeatureList::IsEnabled(skus::features::kSkusFeature)) ||\n#if BUILDFLAG(ENABLE_IPFS_INTERNALS_WEBUI)\n      (url.host_piece() == kIPFSWebUIHost &&\n       ipfs::IpfsServiceFactory::IsIpfsEnabled(profile)) ||\n#endif  // BUILDFLAG(ENABLE_IPFS_INTERNALS_WEBUI)\n#if BUILDFLAG(IS_ANDROID)\n      (url.is_valid() && url.host_piece() == kWalletPageHost &&\n       (url.path() == kWalletSwapPagePath ||\n        url.path() == kWalletSendPagePath || url.path() == kWalletBuyPagePath ||\n        url.path() == kWalletDepositPagePath)) ||\n#else\n      (base::FeatureList::IsEnabled(\n           brave_news::features::kBraveNewsFeedUpdate) &&\n       url.host_piece() == kBraveNewsInternalsHost) ||\n      ((url.host_piece() == kWalletPanelHost ||\n        url.host_piece() == kWalletPageHost) &&\n       brave_wallet::IsAllowedForContext(profile)) ||\n      url.host_piece() == kBraveRewardsPanelHost ||\n      url.host_piece() == kBraveTipPanelHost ||\n      url.host_piece() == kSpeedreaderPanelHost ||\n      // On Android New Tab is a native page implemented in Java, so no need in\n      // WebUI.\n      url.host_piece() == chrome::kChromeUINewTabHost ||\n      url.host_piece() == chrome::kChromeUISettingsHost ||\n      ((url.host_piece() == kWelcomeHost ||\n        url.host_piece() == chrome::kChromeUIWelcomeURL) &&\n       !profile->IsGuestSession()) ||\n      url.host_piece() == kShieldsPanelHost ||\n      (url.host_piece() == kCookieListOptInHost &&\n       base::FeatureList::IsEnabled(\n           brave_shields::features::kBraveAdblockCookieListOptIn)) ||\n#endif  // BUILDFLAG(IS_ANDROID)\n#if BUILDFLAG(ENABLE_TOR)\n      url.host_piece() == kTorInternalsHost ||\n#endif\n      url.host_piece() == kRewardsPageHost ||\n      url.host_piece() == kRewardsInternalsHost) {\n    return &NewWebUI;\n  }\n\n  return nullptr;\n}",
  "abstract_func": "WebUIFactoryFunction GetWebUIFactoryFunction(WebUI* VAR_0,\n                                             Profile* VAR_1,\n                                             const GURL& VAR_2) {\n  /* COMMENT_0 */\n  /* COMMENT_1 */\n  /* COMMENT_2 */\n  /* COMMENT_3 */\n  /* COMMENT_4 */\n  if (!VAR_2.SchemeIs(content::kBraveUIScheme) &&\n      !VAR_2.SchemeIs(content::kChromeUIScheme)) {\n    return nullptr;\n  }\n\n  if (VAR_2.host_piece() == VAR_3 ||\n      VAR_2.host_piece() == VAR_4 ||\n      VAR_2.host_piece() == VAR_5 ||\n      (VAR_2.host_piece() == VAR_6 &&\n       base::FeatureList::IsEnabled(skus::features::kSkusFeature)) ||\n#if BUILDFLAG(VAR_7)\n      (VAR_2.host_piece() == VAR_8 &&\n       ipfs::IpfsServiceFactory::IsIpfsEnabled(VAR_1)) ||\n#endif  /* COMMENT_5 */\n#if BUILDFLAG(VAR_9)\n      (VAR_2.is_valid() && VAR_2.host_piece() == VAR_10 &&\n       (VAR_2.path() == VAR_11 ||\n        VAR_2.path() == VAR_12 || VAR_2.path() == VAR_13 ||\n        VAR_2.path() == VAR_14)) ||\n#else\n      (base::FeatureList::IsEnabled(\n           brave_news::features::kBraveNewsFeedUpdate) &&\n       VAR_2.host_piece() == VAR_15) ||\n      ((VAR_2.host_piece() == VAR_16 ||\n        VAR_2.host_piece() == VAR_10) &&\n       brave_wallet::IsAllowedForContext(VAR_1)) ||\n      VAR_2.host_piece() == VAR_17 ||\n      VAR_2.host_piece() == VAR_18 ||\n      VAR_2.host_piece() == VAR_19 ||\n      /* COMMENT_6 */\n      /* COMMENT_7 */\n      VAR_2.host_piece() == chrome::kChromeUINewTabHost ||\n      VAR_2.host_piece() == chrome::kChromeUISettingsHost ||\n      ((VAR_2.host_piece() == VAR_20 ||\n        VAR_2.host_piece() == chrome::kChromeUIWelcomeURL) &&\n       !VAR_1->IsGuestSession()) ||\n      VAR_2.host_piece() == VAR_21 ||\n      (VAR_2.host_piece() == VAR_22 &&\n       base::FeatureList::IsEnabled(\n           brave_shields::features::kBraveAdblockCookieListOptIn)) ||\n#endif  /* COMMENT_8 */\n#if BUILDFLAG(VAR_23)\n      VAR_2.host_piece() == VAR_24 ||\n#endif\n      VAR_2.host_piece() == VAR_25 ||\n      VAR_2.host_piece() == VAR_26) {\n    return &VAR_27;\n  }\n\n  return nullptr;\n}",
  "func_graph_path": "brave/brave-core/9da202f7f4bc80b6975909b684bbc0764a31c4e9/brave_web_ui_controller_factory.cc/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -3,7 +3,11 @@\n                                              const GURL& url) {\n   // This will get called a lot to check all URLs, so do a quick check of other\n   // schemes to filter out most URLs.\n-  if (!content::HasWebUIScheme(url)) {\n+  //\n+  // This has a narrow scoper scope than content::HasWebUIScheme(url) which also\n+  // allows both `chrome-untrusted` and `chrome-devtools`.\n+  if (!url.SchemeIs(content::kBraveUIScheme) &&\n+      !url.SchemeIs(content::kChromeUIScheme)) {\n     return nullptr;\n   }\n ",
  "diff_line_info": {
    "deleted_lines": [
      "  if (!content::HasWebUIScheme(url)) {"
    ],
    "added_lines": [
      "  //",
      "  // This has a narrow scoper scope than content::HasWebUIScheme(url) which also",
      "  // allows both `chrome-untrusted` and `chrome-devtools`.",
      "  if (!url.SchemeIs(content::kBraveUIScheme) &&",
      "      !url.SchemeIs(content::kChromeUIScheme)) {"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/brave/brave-core/pull/19820",
  "description": {
    "pr_info": {
      "title": "Further restrict the schema for WebUI factory and redirect",
      "number": 19820
    },
    "comment": [
      "Fixes https://github.com/brave/brave-browser/issues/32449 \r\n\r\nContains follow up feedback for https://github.com/brave/brave-browser/issues/32425\r\n\r\n<!-- CI-related labels that can be applied to this PR:\r\n* CI/run-audit-deps (1) - check for known npm/cargo vulnerabilities (audit_deps)\r\n* CI/run-network-audit (1) - run network-audit\r\n* CI/run-upstream-tests - run Chromium unit and browser tests on Linux and Windows (otherwise only on Linux)\r\n* CI/skip - do not run CI builds (except noplatform)\r\n* CI/skip-linux-arm64, CI/skip-linux-x64, CI/skip-android, CI/skip-macos, CI/skip-ios, CI/skip-windows-arm64, CI/skip-windows-x64, CI/skip-windows-x86 - skip CI builds for specific platforms\r\n* CI/skip-upstream-tests - do not run Chromium unit, or browser tests (otherwise only on Linux)\r\n* CI/skip-all-linters - do not run presubmit and lint checks\r\n* CI/storybook-url (1) - deploy storybook and provide a unique URL for each build\r\n\r\n(1) applied automatically when some files are changed (see: https://github.com/brave/brave-core/blob/master/.github/labeler.yml)\r\n-->\r\n\r\n## Submitter Checklist:\r\n\r\n- [x] I confirm that no [security/privacy review is needed](https://github.com/brave/brave-browser/wiki/Security-reviews) and no other type of reviews are needed, or that I have [requested](https://github.com/brave/reviews/issues/new/choose) them\r\n- [x] There is a [ticket](https://github.com/brave/brave-browser/issues) for my issue\r\n- [x] Used Github [auto-closing keywords](https://docs.github.com/en/github/managing-your-work-on-github/linking-a-pull-request-to-an-issue) in the PR description above\r\n- [x] Wrote a good [PR/commit description](https://google.github.io/eng-practices/review/developer/cl-descriptions.html)\r\n- [ ] Squashed any review feedback or \"fixup\" commits before merge, so that history is a record of what happened in the repo, not your PR\r\n- [x] Added appropriate labels (`QA/Yes` or `QA/No`; `release-notes/include` or `release-notes/exclude`; `OS/...`) to the associated issue\r\n- [ ] Checked the PR locally:\r\n  * `npm run test -- brave_browser_tests`, `npm run test -- brave_unit_tests` [wiki](https://github.com/brave/brave-browser/wiki/Tests)\r\n  * `npm run lint`, `npm run presubmit` [wiki](https://github.com/brave/brave-browser/wiki/Presubmit-checks), `npm run gn_check`, `npm run tslint`\r\n- [ ] Ran `git rebase master` (if needed)\r\n\r\n## Reviewer Checklist:\r\n\r\n- [ ] A security review [is not needed](https://github.com/brave/brave-browser/wiki/Security-reviews), or a link to one is included in the PR description\r\n- [ ] New files have MPL-2.0 license header\r\n- [ ] Adequate test coverage exists to prevent regressions\r\n- [ ] Major classes, functions and non-trivial code blocks are well-commented\r\n- [ ] Changes in component dependencies are properly reflected in `gn`\r\n- [ ] Code follows the [style guide](https://chromium.googlesource.com/chromium/src/+/HEAD/styleguide/c++/c++.md)\r\n- [ ] Test plan is specified in PR before merging\r\n\r\n## After-merge Checklist:\r\n\r\n- [ ] The associated issue milestone is set to the smallest version that the\r\n  changes has landed on\r\n- [ ] All relevant documentation has been updated, for instance:\r\n  - [ ] https://github.com/brave/brave-browser/wiki/Deviations-from-Chromium-(features-we-disable-or-remove)\r\n  - [ ] https://github.com/brave/brave-browser/wiki/Proxy-redirected-URLs\r\n  - [ ] https://github.com/brave/brave-browser/wiki/Fingerprinting-Protections\r\n  - [ ] https://github.com/brave/brave-browser/wiki/Brave%E2%80%99s-Use-of-Referral-Codes\r\n  - [ ] https://github.com/brave/brave-browser/wiki/Custom-Headers\r\n  - [ ] https://github.com/brave/brave-browser/wiki/Web-Compatibility-Exceptions-in-Brave\r\n  - [ ] https://github.com/brave/brave-browser/wiki/QA-Guide\r\n  - [ ] https://github.com/brave/brave-browser/wiki/P3A\r\n\r\n## Test Plan:\r\n\r\n",
      "Verification **PASSED** on `Win 11 x64` using the following build(s):\r\n\r\n```\r\nBrave | 1.59.40 Chromium: 116.0.5845.96 (Official Build) nightly (64-bit)\r\n-- | --\r\nRevision | 282a4599cb1dedb4c3f8788bd21a3bf228b55d62\r\nOS | Windows 11 Version 22H2 (Build 22621.2134)\r\n```\r\n\r\nVerification notes can be found via https://github.com/brave/internal/issues/1064#issuecomment-1689280347."
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.85,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.85"
}