{
  "cve_id": "CVE-2017-9780",
  "cwe_ids": [
    "CWE-732"
  ],
  "cvss_vector": "AV:L/AC:L/Au:N/C:C/I:C/A:C",
  "cvss_is_v3": false,
  "repo_name": "flatpak",
  "commit_msg": "Use new libostree APIs to reject world-writable/suid content\n\nThis uses the new libostree APIs that landed recently to ensure\nthat we reject any files with mode outside of `0775` for system\nhelper pulls, and we also mask directory modes during checkout.\n\nHowever, this does *not* fix up any already downloaded content.\nFor that, one could uninstall/reinstall; or a future patch could\ndo a one-time fixup pass.\n\nNote that I am not aware of a way for flatpak applications to escalate their\nprivileges directly with this flaw; the bubblewrap `PR_SET_NO_NEW_PRIVS` turns\nof setuid. However, in combination with code execution on the host via another\nmechanism (e.g. unsandboxed app), a setuid app injected could be used to gain\nfull host privileges.\n\nAt this time we're not aware of any flatpak content exploiting this issue.\n\nCloses: https://github.com/flatpak/flatpak/issues/845",
  "commit_hash": "aed5d0919830c02e490f669fc36bd9af42e632d6",
  "git_url": "https://github.com/flatpak/flatpak/commit/aed5d0919830c02e490f669fc36bd9af42e632d6",
  "file_path": "common/flatpak-dir.c",
  "func_name": "repo_pull_one_dir",
  "func_before": "static gboolean\nrepo_pull_one_dir (OstreeRepo          *self,\n                   const char          *remote_name,\n                   const char         **dirs_to_pull,\n                   const char          *ref_to_fetch,\n                   const char          *rev_to_fetch,\n                   FlatpakPullFlags     flatpak_flags,\n                   OstreeRepoPullFlags  flags,\n                   OstreeAsyncProgress *progress,\n                   GCancellable        *cancellable,\n                   GError             **error)\n{\n  GVariantBuilder builder;\n  gboolean force_disable_deltas = (flatpak_flags & FLATPAK_PULL_FLAGS_NO_STATIC_DELTAS) != 0;\n  g_autofree char *remote_and_branch = NULL;\n  g_autofree char *current_checksum = NULL;\n  g_autoptr(GVariant) options = NULL;\n  g_autoptr(GVariant) old_commit = NULL;\n  g_autoptr(GVariant) new_commit = NULL;\n  const char *refs_to_fetch[2];\n  const char *revs_to_fetch[2];\n  guint32 update_freq = 0;\n\n  g_variant_builder_init (&builder, G_VARIANT_TYPE (\"a{sv}\"));\n\n  if (dirs_to_pull)\n    {\n      g_variant_builder_add (&builder, \"{s@v}\", \"subdirs\",\n                             g_variant_new_variant (g_variant_new_strv ((const char * const *)dirs_to_pull, -1)));\n      force_disable_deltas = TRUE;\n    }\n\n  if (force_disable_deltas)\n    g_variant_builder_add (&builder, \"{s@v}\", \"disable-static-deltas\",\n                           g_variant_new_variant (g_variant_new_boolean (TRUE)));\n\n  g_variant_builder_add (&builder, \"{s@v}\", \"inherit-transaction\",\n                         g_variant_new_variant (g_variant_new_boolean (TRUE)));\n\n  g_variant_builder_add (&builder, \"{s@v}\", \"flags\",\n                         g_variant_new_variant (g_variant_new_int32 (flags)));\n\n  refs_to_fetch[0] = ref_to_fetch;\n  refs_to_fetch[1] = NULL;\n  g_variant_builder_add (&builder, \"{s@v}\", \"refs\",\n                         g_variant_new_variant (g_variant_new_strv ((const char * const *) refs_to_fetch, -1)));\n\n  revs_to_fetch[0] = rev_to_fetch;\n  revs_to_fetch[1] = NULL;\n  g_variant_builder_add (&builder, \"{s@v}\", \"override-commit-ids\",\n                         g_variant_new_variant (g_variant_new_strv ((const char * const *) revs_to_fetch, -1)));\n\n  if (progress != NULL)\n    update_freq = GPOINTER_TO_UINT (g_object_get_data (G_OBJECT (progress), \"update-frequency\"));\n  if (update_freq == 0)\n    update_freq = FLATPAK_DEFAULT_UPDATE_FREQUENCY;\n\n  g_variant_builder_add (&builder, \"{s@v}\", \"update-frequency\",\n                         g_variant_new_variant (g_variant_new_uint32 (update_freq)));\n\n  options = g_variant_ref_sink (g_variant_builder_end (&builder));\n\n  remote_and_branch = g_strdup_printf (\"%s:%s\", remote_name, ref_to_fetch);\n  if (!ostree_repo_resolve_rev (self, remote_and_branch, TRUE, &current_checksum, error))\n    return FALSE;\n  if (current_checksum != NULL &&\n      !ostree_repo_load_commit (self, current_checksum, &old_commit, NULL, error))\n    return FALSE;\n\n  if (!ostree_repo_pull_with_options (self, remote_name, options,\n                                      progress, cancellable, error))\n    return FALSE;\n\n  if (old_commit &&\n      (flatpak_flags & FLATPAK_PULL_FLAGS_ALLOW_DOWNGRADE) == 0)\n    {\n      guint64 old_timestamp;\n      guint64 new_timestamp;\n\n      if (!ostree_repo_load_commit (self, rev_to_fetch, &new_commit, NULL, error))\n        return FALSE;\n\n      old_timestamp = ostree_commit_get_timestamp (old_commit);\n      new_timestamp = ostree_commit_get_timestamp (new_commit);\n\n      if (new_timestamp < old_timestamp)\n        return flatpak_fail (error, \"Update is older then current version\");\n    }\n\n  return TRUE;\n}",
  "abstract_func_before": "static gboolean\nrepo_pull_one_dir (OstreeRepo          *VAR_0,\n                   const char          *VAR_1,\n                   const char         **VAR_2,\n                   const char          *VAR_3,\n                   const char          *VAR_4,\n                   FlatpakPullFlags     VAR_5,\n                   OstreeRepoPullFlags  VAR_6,\n                   OstreeAsyncProgress *VAR_7,\n                   GCancellable        *VAR_8,\n                   GError             **VAR_9)\n{\n  GVariantBuilder VAR_10;\n  gboolean VAR_11 = (VAR_5 & VAR_12) != 0;\n  g_autofree char *VAR_13 = NULL;\n  g_autofree char *VAR_14 = NULL;\n  VAR_15(GVariant) VAR_16 = NULL;\n  VAR_15(GVariant) VAR_17 = NULL;\n  VAR_15(GVariant) VAR_18 = NULL;\n  const char *VAR_19[2];\n  const char *VAR_20[2];\n  guint32 VAR_21 = 0;\n\n  g_variant_builder_init (&VAR_10, G_VARIANT_TYPE (\"a{sv}\"));\n\n  if (VAR_2)\n    {\n      g_variant_builder_add (&VAR_10, \"{s@v}\", \"subdirs\",\n                             g_variant_new_variant (g_variant_new_strv ((const char * const *)VAR_2, -1)));\n      VAR_11 = TRUE;\n    }\n\n  if (VAR_11)\n    g_variant_builder_add (&VAR_10, \"{s@v}\", \"disable-static-deltas\",\n                           g_variant_new_variant (g_variant_new_boolean (TRUE)));\n\n  g_variant_builder_add (&VAR_10, \"{s@v}\", \"inherit-transaction\",\n                         g_variant_new_variant (g_variant_new_boolean (TRUE)));\n\n  g_variant_builder_add (&VAR_10, \"{s@v}\", \"flags\",\n                         g_variant_new_variant (g_variant_new_int32 (VAR_6)));\n\n  VAR_19[0] = VAR_3;\n  VAR_19[1] = NULL;\n  g_variant_builder_add (&VAR_10, \"{s@v}\", \"refs\",\n                         g_variant_new_variant (g_variant_new_strv ((const char * const *) VAR_19, -1)));\n\n  VAR_20[0] = VAR_4;\n  VAR_20[1] = NULL;\n  g_variant_builder_add (&VAR_10, \"{s@v}\", \"override-commit-ids\",\n                         g_variant_new_variant (g_variant_new_strv ((const char * const *) VAR_20, -1)));\n\n  if (VAR_7 != NULL)\n    VAR_21 = GPOINTER_TO_UINT (g_object_get_data (G_OBJECT (VAR_7), \"update-frequency\"));\n  if (VAR_21 == 0)\n    VAR_21 = VAR_22;\n\n  g_variant_builder_add (&VAR_10, \"{s@v}\", \"update-frequency\",\n                         g_variant_new_variant (g_variant_new_uint32 (VAR_21)));\n\n  VAR_16 = g_variant_ref_sink (g_variant_builder_end (&VAR_10));\n\n  VAR_13 = g_strdup_printf (\"%s:%s\", VAR_1, VAR_3);\n  if (!ostree_repo_resolve_rev (VAR_0, VAR_13, TRUE, &VAR_14, VAR_9))\n    return FALSE;\n  if (VAR_14 != NULL &&\n      !ostree_repo_load_commit (VAR_0, VAR_14, &VAR_17, NULL, VAR_9))\n    return FALSE;\n\n  if (!ostree_repo_pull_with_options (VAR_0, VAR_1, VAR_16,\n                                      VAR_7, VAR_8, VAR_9))\n    return FALSE;\n\n  if (VAR_17 &&\n      (VAR_5 & VAR_23) == 0)\n    {\n      guint64 VAR_24;\n      guint64 VAR_25;\n\n      if (!ostree_repo_load_commit (VAR_0, VAR_4, &VAR_18, NULL, VAR_9))\n        return FALSE;\n\n      VAR_24 = ostree_commit_get_timestamp (VAR_17);\n      VAR_25 = ostree_commit_get_timestamp (VAR_18);\n\n      if (VAR_25 < VAR_24)\n        return flatpak_fail (VAR_9, \"Update is older then current version\");\n    }\n\n  return TRUE;\n}",
  "func_graph_path_before": "flatpak/aed5d0919830c02e490f669fc36bd9af42e632d6/flatpak-dir.c/vul/before/0.json",
  "func": "static gboolean\nrepo_pull_one_dir (OstreeRepo          *self,\n                   const char          *remote_name,\n                   const char         **dirs_to_pull,\n                   const char          *ref_to_fetch,\n                   const char          *rev_to_fetch,\n                   FlatpakPullFlags     flatpak_flags,\n                   OstreeRepoPullFlags  flags,\n                   OstreeAsyncProgress *progress,\n                   GCancellable        *cancellable,\n                   GError             **error)\n{\n  GVariantBuilder builder;\n  gboolean force_disable_deltas = (flatpak_flags & FLATPAK_PULL_FLAGS_NO_STATIC_DELTAS) != 0;\n  g_autofree char *remote_and_branch = NULL;\n  g_autofree char *current_checksum = NULL;\n  g_autoptr(GVariant) options = NULL;\n  g_autoptr(GVariant) old_commit = NULL;\n  g_autoptr(GVariant) new_commit = NULL;\n  const char *refs_to_fetch[2];\n  const char *revs_to_fetch[2];\n  guint32 update_freq = 0;\n\n  /* We always want this on for every type of pull */\n  flags |= OSTREE_REPO_PULL_FLAGS_BAREUSERONLY_FILES;\n\n  g_variant_builder_init (&builder, G_VARIANT_TYPE (\"a{sv}\"));\n\n  if (dirs_to_pull)\n    {\n      g_variant_builder_add (&builder, \"{s@v}\", \"subdirs\",\n                             g_variant_new_variant (g_variant_new_strv ((const char * const *)dirs_to_pull, -1)));\n      force_disable_deltas = TRUE;\n    }\n\n  if (force_disable_deltas)\n    g_variant_builder_add (&builder, \"{s@v}\", \"disable-static-deltas\",\n                           g_variant_new_variant (g_variant_new_boolean (TRUE)));\n\n  g_variant_builder_add (&builder, \"{s@v}\", \"inherit-transaction\",\n                         g_variant_new_variant (g_variant_new_boolean (TRUE)));\n\n  g_variant_builder_add (&builder, \"{s@v}\", \"flags\",\n                         g_variant_new_variant (g_variant_new_int32 (flags)));\n\n  refs_to_fetch[0] = ref_to_fetch;\n  refs_to_fetch[1] = NULL;\n  g_variant_builder_add (&builder, \"{s@v}\", \"refs\",\n                         g_variant_new_variant (g_variant_new_strv ((const char * const *) refs_to_fetch, -1)));\n\n  revs_to_fetch[0] = rev_to_fetch;\n  revs_to_fetch[1] = NULL;\n  g_variant_builder_add (&builder, \"{s@v}\", \"override-commit-ids\",\n                         g_variant_new_variant (g_variant_new_strv ((const char * const *) revs_to_fetch, -1)));\n\n  if (progress != NULL)\n    update_freq = GPOINTER_TO_UINT (g_object_get_data (G_OBJECT (progress), \"update-frequency\"));\n  if (update_freq == 0)\n    update_freq = FLATPAK_DEFAULT_UPDATE_FREQUENCY;\n\n  g_variant_builder_add (&builder, \"{s@v}\", \"update-frequency\",\n                         g_variant_new_variant (g_variant_new_uint32 (update_freq)));\n\n  options = g_variant_ref_sink (g_variant_builder_end (&builder));\n\n  remote_and_branch = g_strdup_printf (\"%s:%s\", remote_name, ref_to_fetch);\n  if (!ostree_repo_resolve_rev (self, remote_and_branch, TRUE, &current_checksum, error))\n    return FALSE;\n  if (current_checksum != NULL &&\n      !ostree_repo_load_commit (self, current_checksum, &old_commit, NULL, error))\n    return FALSE;\n\n  if (!ostree_repo_pull_with_options (self, remote_name, options,\n                                      progress, cancellable, error))\n    return FALSE;\n\n  if (old_commit &&\n      (flatpak_flags & FLATPAK_PULL_FLAGS_ALLOW_DOWNGRADE) == 0)\n    {\n      guint64 old_timestamp;\n      guint64 new_timestamp;\n\n      if (!ostree_repo_load_commit (self, rev_to_fetch, &new_commit, NULL, error))\n        return FALSE;\n\n      old_timestamp = ostree_commit_get_timestamp (old_commit);\n      new_timestamp = ostree_commit_get_timestamp (new_commit);\n\n      if (new_timestamp < old_timestamp)\n        return flatpak_fail (error, \"Update is older then current version\");\n    }\n\n  return TRUE;\n}",
  "abstract_func": "static gboolean\nrepo_pull_one_dir (OstreeRepo          *VAR_0,\n                   const char          *VAR_1,\n                   const char         **VAR_2,\n                   const char          *VAR_3,\n                   const char          *VAR_4,\n                   FlatpakPullFlags     VAR_5,\n                   OstreeRepoPullFlags  VAR_6,\n                   OstreeAsyncProgress *VAR_7,\n                   GCancellable        *VAR_8,\n                   GError             **VAR_9)\n{\n  GVariantBuilder VAR_10;\n  gboolean VAR_11 = (VAR_5 & VAR_12) != 0;\n  g_autofree char *VAR_13 = NULL;\n  g_autofree char *VAR_14 = NULL;\n  VAR_15(GVariant) VAR_16 = NULL;\n  VAR_15(GVariant) VAR_17 = NULL;\n  VAR_15(GVariant) VAR_18 = NULL;\n  const char *VAR_19[2];\n  const char *VAR_20[2];\n  guint32 VAR_21 = 0;\n\n  /* COMMENT_0 */\n  VAR_6 |= VAR_22;\n\n  g_variant_builder_init (&VAR_10, G_VARIANT_TYPE (\"a{sv}\"));\n\n  if (VAR_2)\n    {\n      g_variant_builder_add (&VAR_10, \"{s@v}\", \"subdirs\",\n                             g_variant_new_variant (g_variant_new_strv ((const char * const *)VAR_2, -1)));\n      VAR_11 = TRUE;\n    }\n\n  if (VAR_11)\n    g_variant_builder_add (&VAR_10, \"{s@v}\", \"disable-static-deltas\",\n                           g_variant_new_variant (g_variant_new_boolean (TRUE)));\n\n  g_variant_builder_add (&VAR_10, \"{s@v}\", \"inherit-transaction\",\n                         g_variant_new_variant (g_variant_new_boolean (TRUE)));\n\n  g_variant_builder_add (&VAR_10, \"{s@v}\", \"flags\",\n                         g_variant_new_variant (g_variant_new_int32 (VAR_6)));\n\n  VAR_19[0] = VAR_3;\n  VAR_19[1] = NULL;\n  g_variant_builder_add (&VAR_10, \"{s@v}\", \"refs\",\n                         g_variant_new_variant (g_variant_new_strv ((const char * const *) VAR_19, -1)));\n\n  VAR_20[0] = VAR_4;\n  VAR_20[1] = NULL;\n  g_variant_builder_add (&VAR_10, \"{s@v}\", \"override-commit-ids\",\n                         g_variant_new_variant (g_variant_new_strv ((const char * const *) VAR_20, -1)));\n\n  if (VAR_7 != NULL)\n    VAR_21 = GPOINTER_TO_UINT (g_object_get_data (G_OBJECT (VAR_7), \"update-frequency\"));\n  if (VAR_21 == 0)\n    VAR_21 = VAR_23;\n\n  g_variant_builder_add (&VAR_10, \"{s@v}\", \"update-frequency\",\n                         g_variant_new_variant (g_variant_new_uint32 (VAR_21)));\n\n  VAR_16 = g_variant_ref_sink (g_variant_builder_end (&VAR_10));\n\n  VAR_13 = g_strdup_printf (\"%s:%s\", VAR_1, VAR_3);\n  if (!ostree_repo_resolve_rev (VAR_0, VAR_13, TRUE, &VAR_14, VAR_9))\n    return FALSE;\n  if (VAR_14 != NULL &&\n      !ostree_repo_load_commit (VAR_0, VAR_14, &VAR_17, NULL, VAR_9))\n    return FALSE;\n\n  if (!ostree_repo_pull_with_options (VAR_0, VAR_1, VAR_16,\n                                      VAR_7, VAR_8, VAR_9))\n    return FALSE;\n\n  if (VAR_17 &&\n      (VAR_5 & VAR_24) == 0)\n    {\n      guint64 VAR_25;\n      guint64 VAR_26;\n\n      if (!ostree_repo_load_commit (VAR_0, VAR_4, &VAR_18, NULL, VAR_9))\n        return FALSE;\n\n      VAR_25 = ostree_commit_get_timestamp (VAR_17);\n      VAR_26 = ostree_commit_get_timestamp (VAR_18);\n\n      if (VAR_26 < VAR_25)\n        return flatpak_fail (VAR_9, \"Update is older then current version\");\n    }\n\n  return TRUE;\n}",
  "func_graph_path": "flatpak/aed5d0919830c02e490f669fc36bd9af42e632d6/flatpak-dir.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -20,6 +20,9 @@\n   const char *refs_to_fetch[2];\n   const char *revs_to_fetch[2];\n   guint32 update_freq = 0;\n+\n+  /* We always want this on for every type of pull */\n+  flags |= OSTREE_REPO_PULL_FLAGS_BAREUSERONLY_FILES;\n \n   g_variant_builder_init (&builder, G_VARIANT_TYPE (\"a{sv}\"));\n ",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "",
      "  /* We always want this on for every type of pull */",
      "  flags |= OSTREE_REPO_PULL_FLAGS_BAREUSERONLY_FILES;"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/flatpak/flatpak/pull/848",
  "description": {
    "pr_info": {
      "title": "system-helper: Use new ostree APIs to reject world-writable/suid content",
      "number": 848
    },
    "comment": [
      "This uses the new libostree APIs that landed recently to ensure\r\nthat we reject any files with mode outside of `0775` for system\r\nhelper pulls, and we also neuter directories during checkout.\r\n\r\nHowever, this does *not* fix up any already downloaded content.\r\nFor that, one could uninstall/reinstall; or a future patch could\r\ndo a one-time fixup pass.\r\n\r\nCloses: https://github.com/flatpak/flatpak/issues/845",
      "Side note; I found it double plus confusing that the system helper path actually wasn't using `flatpak_dir_pull_untrusted_local()`...why does the code try to distinguish between \"local repo\" and `file:///` URI?  In libostree they should be the same thing.",
      "Also something I'm not entirely sure of is the appstream stuff; we appear to be doing pulls for that too that go through separate paths? ",
      "It *is* using flatpak_dir_pull_untrusted_local(). There are two codepaths here. \r\n\r\nOne is the case where the system repo has a remote configured with a file: uri. In this case we just do the pull entierly in the system helper. This is the codepath your current patch has implemented.\r\n\r\nThe other case is where the remote has a non-local uri, but the app already downloaded this to a separate local directory, which is specified with arg_repo_path. In this case we're using flatpak_dir_pull_untrusted_local(). The current patch doesn't handle this case.\r\n\r\nThese are not the same, because in one case the sysadmin defined a pathname as \"trusted\" by configuring a remote at that location. In the second case the caller (who is untrusted) passes in the directory in which to read the files from, and we have to be much more careful about what we pull from this. \r\n\r\nFor the appstream we're pulling in the same way as for app, but the deploy is different (because the checkout is to a different location). This looks fine in the patch.",
      "Ah, and because I was testing this with a \"local\" remote from a locally built app I ended up in the other path.  OK.\r\n\r\nI actually did patch `flatpak_dir_pull_untrusted_local()` though.  That's what I tried first and was really confused when it didn't work.\r\n",
      "Or in other words, the patch is correct?",
      "Oh, lemme check.\r\nIt needs a configure check for the new ostree version though.",
      "Ah, yes. It is correct. However, i would like you to also pass that flag in repo_pull_one_dir, so we get nice warnings about this earlier in the process (and for --user installs).",
      "Let's land https://github.com/flatpak/flatpak/pull/849 first.",
      "Like that :arrow_up:  ?",
      "> error: Can't use bareuseronly-files with non-local origin repo\r\n\r\nAh, yes.  Mrm.  I had originally designed this only for the system helper but perhaps it's better to support it for HTTP pulls too.  Will make a change in libostree.\r\n",
      "Now depends on https://github.com/ostreedev/ostree/pull/930",
      "I guess you can rebase this on master now.",
      "Done. :surfing_man: ",
      "OK, let's give things a day or two at least in git master and do releases?"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 0.95"
}