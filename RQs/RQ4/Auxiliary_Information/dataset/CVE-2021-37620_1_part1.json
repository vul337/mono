{
  "cve_id": "CVE-2021-37620",
  "cwe_ids": [
    "CWE-125"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "Exiv2/exiv2",
  "commit_msg": "Safer std::vector indexing.",
  "commit_hash": "76e313745e813f80e8910aceb2210af3ad8cf897",
  "git_url": "https://github.com/Exiv2/exiv2/commit/76e313745e813f80e8910aceb2210af3ad8cf897",
  "file_path": "src/types.cpp",
  "func_name": "stringTo",
  "func_before": "bool stringTo<bool>(const std::string& s, bool& ok)\n    {\n        std::string lcs(s); /* lowercase string */\n        for(unsigned i = 0; i < lcs.length(); i++) {\n            lcs[i] = std::tolower(s[i]);\n        }\n        /* handle the same values as xmp sdk */\n        if (lcs == \"false\" || lcs == \"f\" || lcs == \"0\") {\n            ok = true;\n            return false;\n        }\n        if (lcs == \"true\" || lcs == \"t\" || lcs == \"1\") {\n            ok = true;\n            return true;\n        }\n        ok = false;\n        return false;\n    }",
  "abstract_func_before": "bool VAR_0<bool>(const std::string& VAR_1, bool& VAR_2)\n    {\n        std::string lcs(s); /* COMMENT_0 */\n        for(unsigned VAR_3 = 0; VAR_3 < VAR_4.length(); VAR_3++) {\n            VAR_4[VAR_3] = std::tolower(s[VAR_3]);\n        }\n        /* COMMENT_1 */\n        if (VAR_4 == \"false\" || VAR_4 == \"f\" || VAR_4 == \"0\") {\n            VAR_2 = true;\n            return false;\n        }\n        if (VAR_4 == \"true\" || VAR_4 == \"t\" || VAR_4 == \"1\") {\n            VAR_2 = true;\n            return true;\n        }\n        VAR_2 = false;\n        return false;\n    }",
  "func_graph_path_before": "Exiv2/exiv2/76e313745e813f80e8910aceb2210af3ad8cf897/types.cpp/vul/before/0.json",
  "func": "bool stringTo<bool>(const std::string& s, bool& ok)\n    {\n        std::string lcs(s); /* lowercase string */\n        for(size_t i = 0; i < lcs.length(); i++) {\n            lcs[i] = std::tolower(s[i]);\n        }\n        /* handle the same values as xmp sdk */\n        if (lcs == \"false\" || lcs == \"f\" || lcs == \"0\") {\n            ok = true;\n            return false;\n        }\n        if (lcs == \"true\" || lcs == \"t\" || lcs == \"1\") {\n            ok = true;\n            return true;\n        }\n        ok = false;\n        return false;\n    }",
  "abstract_func": "bool VAR_0<bool>(const std::string& VAR_1, bool& VAR_2)\n    {\n        std::string lcs(s); /* COMMENT_0 */\n        for(size_t VAR_3 = 0; VAR_3 < VAR_4.length(); VAR_3++) {\n            VAR_4[VAR_3] = std::tolower(s[VAR_3]);\n        }\n        /* COMMENT_1 */\n        if (VAR_4 == \"false\" || VAR_4 == \"f\" || VAR_4 == \"0\") {\n            VAR_2 = true;\n            return false;\n        }\n        if (VAR_4 == \"true\" || VAR_4 == \"t\" || VAR_4 == \"1\") {\n            VAR_2 = true;\n            return true;\n        }\n        VAR_2 = false;\n        return false;\n    }",
  "func_graph_path": "Exiv2/exiv2/76e313745e813f80e8910aceb2210af3ad8cf897/types.cpp/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,7 +1,7 @@\n bool stringTo<bool>(const std::string& s, bool& ok)\n     {\n         std::string lcs(s); /* lowercase string */\n-        for(unsigned i = 0; i < lcs.length(); i++) {\n+        for(size_t i = 0; i < lcs.length(); i++) {\n             lcs[i] = std::tolower(s[i]);\n         }\n         /* handle the same values as xmp sdk */",
  "diff_line_info": {
    "deleted_lines": [
      "        for(unsigned i = 0; i < lcs.length(); i++) {"
    ],
    "added_lines": [
      "        for(size_t i = 0; i < lcs.length(); i++) {"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/sridharb1/exiv2/pull/4",
  "description": {
    "pr_info": {
      "title": "0.27 maintenance",
      "number": 4
    },
    "comment": []
  },
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.6,
  "Bug Filter Response": "**Final Classification:** Defect Remediation & Feature Upgrades; **Confidence:** 0.6"
}