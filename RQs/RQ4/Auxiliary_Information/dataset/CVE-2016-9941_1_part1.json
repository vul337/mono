{
  "cve_id": "CVE-2016-9941",
  "cwe_ids": [
    "CWE-119"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "LibVNC/libvncserver",
  "commit_msg": "Fix heap overflows in the various rectangle fill functions\n\nAltough rfbproto.c does check whether the overall FramebufferUpdate rectangle is\ntoo large, some of the individual encoding decoders do not, which allows a\nmalicious server to overwrite parts of the heap.",
  "commit_hash": "5418e8007c248bf9668d22a8c1fa9528149b69f2",
  "git_url": "https://github.com/LibVNC/libvncserver/commit/5418e8007c248bf9668d22a8c1fa9528149b69f2",
  "file_path": "libvncclient/rfbproto.c",
  "func_name": "CopyRectangleFromRectangle",
  "func_before": "static void CopyRectangleFromRectangle(rfbClient* client, int src_x, int src_y, int w, int h, int dest_x, int dest_y) {\n  int i,j;\n\n  if (client->frameBuffer == NULL) {\n      return;\n  }\n\n#define COPY_RECT_FROM_RECT(BPP) \\\n  { \\\n    uint##BPP##_t* _buffer=((uint##BPP##_t*)client->frameBuffer)+(src_y-dest_y)*client->width+src_x-dest_x; \\\n    if (dest_y < src_y) { \\\n      for(j = dest_y*client->width; j < (dest_y+h)*client->width; j += client->width) { \\\n        if (dest_x < src_x) { \\\n          for(i = dest_x; i < dest_x+w; i++) { \\\n            ((uint##BPP##_t*)client->frameBuffer)[j+i]=_buffer[j+i]; \\\n          } \\\n        } else { \\\n          for(i = dest_x+w-1; i >= dest_x; i--) { \\\n            ((uint##BPP##_t*)client->frameBuffer)[j+i]=_buffer[j+i]; \\\n          } \\\n        } \\\n      } \\\n    } else { \\\n      for(j = (dest_y+h-1)*client->width; j >= dest_y*client->width; j-=client->width) { \\\n        if (dest_x < src_x) { \\\n          for(i = dest_x; i < dest_x+w; i++) { \\\n            ((uint##BPP##_t*)client->frameBuffer)[j+i]=_buffer[j+i]; \\\n          } \\\n        } else { \\\n          for(i = dest_x+w-1; i >= dest_x; i--) { \\\n            ((uint##BPP##_t*)client->frameBuffer)[j+i]=_buffer[j+i]; \\\n          } \\\n        } \\\n      } \\\n    } \\\n  }\n\n  switch(client->format.bitsPerPixel) {\n  case  8: COPY_RECT_FROM_RECT(8);  break;\n  case 16: COPY_RECT_FROM_RECT(16); break;\n  case 32: COPY_RECT_FROM_RECT(32); break;\n  default:\n    rfbClientLog(\"Unsupported bitsPerPixel: %d\\n\",client->format.bitsPerPixel);\n  }\n}",
  "abstract_func_before": "static void CopyRectangleFromRectangle(rfbClient* VAR_0, int VAR_1, int VAR_2, int VAR_3, int VAR_4, int VAR_5, int VAR_6) {\n  int VAR_7,VAR_8;\n\n  if (VAR_0->frameBuffer == NULL) {\n      return;\n  }\n\n#define COPY_RECT_FROM_RECT(VAR_9) \\\n  { \\\n    uint##BPP##_t* _buffer=((uint##BPP##_t*)client->frameBuffer)+(src_y-dest_y)*client->width+src_x-dest_x; \\\n    if (dest_y < src_y) { \\\n      for(j = dest_y*client->width; j < (dest_y+h)*client->width; j += client->width) { \\\n        if (dest_x < src_x) { \\\n          for(i = dest_x; i < dest_x+w; i++) { \\\n            ((uint##BPP##_t*)client->frameBuffer)[j+i]=_buffer[j+i]; \\\n          } \\\n        } else { \\\n          for(i = dest_x+w-1; i >= dest_x; i--) { \\\n            ((uint##BPP##_t*)client->frameBuffer)[j+i]=_buffer[j+i]; \\\n          } \\\n        } \\\n      } \\\n    } else { \\\n      for(j = (dest_y+h-1)*client->width; j >= dest_y*client->width; j-=client->width) { \\\n        if (dest_x < src_x) { \\\n          for(i = dest_x; i < dest_x+w; i++) { \\\n            ((uint##BPP##_t*)client->frameBuffer)[j+i]=_buffer[j+i]; \\\n          } \\\n        } else { \\\n          for(i = dest_x+w-1; i >= dest_x; i--) { \\\n            ((uint##BPP##_t*)client->frameBuffer)[j+i]=_buffer[j+i]; \\\n          } \\\n        } \\\n      } \\\n    } \\\n  }\n\n  switch(VAR_0->format.bitsPerPixel) {\n  case  8: COPY_RECT_FROM_RECT(8);  break;\n  case 16: COPY_RECT_FROM_RECT(16); break;\n  case 32: COPY_RECT_FROM_RECT(32); break;\n  default:\n    rfbClientLog(\"Unsupported bitsPerPixel: %d\\n\",VAR_0->format.bitsPerPixel);\n  }\n}",
  "func_graph_path_before": "LibVNC/libvncserver/5418e8007c248bf9668d22a8c1fa9528149b69f2/rfbproto.c/vul/before/2.json",
  "func": "static void CopyRectangleFromRectangle(rfbClient* client, int src_x, int src_y, int w, int h, int dest_x, int dest_y) {\n  int i,j;\n\n  if (client->frameBuffer == NULL) {\n      return;\n  }\n\n  if (!CheckRect(client, src_x, src_y, w, h)) {\n    rfbClientLog(\"Source rect out of bounds: %dx%d at (%d, %d)\\n\", src_x, src_y, w, h);\n    return;\n  }\n\n  if (!CheckRect(client, dest_x, dest_y, w, h)) {\n    rfbClientLog(\"Dest rect out of bounds: %dx%d at (%d, %d)\\n\", dest_x, dest_y, w, h);\n    return;\n  }\n\n#define COPY_RECT_FROM_RECT(BPP) \\\n  { \\\n    uint##BPP##_t* _buffer=((uint##BPP##_t*)client->frameBuffer)+(src_y-dest_y)*client->width+src_x-dest_x; \\\n    if (dest_y < src_y) { \\\n      for(j = dest_y*client->width; j < (dest_y+h)*client->width; j += client->width) { \\\n        if (dest_x < src_x) { \\\n          for(i = dest_x; i < dest_x+w; i++) { \\\n            ((uint##BPP##_t*)client->frameBuffer)[j+i]=_buffer[j+i]; \\\n          } \\\n        } else { \\\n          for(i = dest_x+w-1; i >= dest_x; i--) { \\\n            ((uint##BPP##_t*)client->frameBuffer)[j+i]=_buffer[j+i]; \\\n          } \\\n        } \\\n      } \\\n    } else { \\\n      for(j = (dest_y+h-1)*client->width; j >= dest_y*client->width; j-=client->width) { \\\n        if (dest_x < src_x) { \\\n          for(i = dest_x; i < dest_x+w; i++) { \\\n            ((uint##BPP##_t*)client->frameBuffer)[j+i]=_buffer[j+i]; \\\n          } \\\n        } else { \\\n          for(i = dest_x+w-1; i >= dest_x; i--) { \\\n            ((uint##BPP##_t*)client->frameBuffer)[j+i]=_buffer[j+i]; \\\n          } \\\n        } \\\n      } \\\n    } \\\n  }\n\n  switch(client->format.bitsPerPixel) {\n  case  8: COPY_RECT_FROM_RECT(8);  break;\n  case 16: COPY_RECT_FROM_RECT(16); break;\n  case 32: COPY_RECT_FROM_RECT(32); break;\n  default:\n    rfbClientLog(\"Unsupported bitsPerPixel: %d\\n\",client->format.bitsPerPixel);\n  }\n}",
  "abstract_func": "static void CopyRectangleFromRectangle(rfbClient* VAR_0, int VAR_1, int VAR_2, int VAR_3, int VAR_4, int VAR_5, int VAR_6) {\n  int VAR_7,VAR_8;\n\n  if (VAR_0->frameBuffer == NULL) {\n      return;\n  }\n\n  if (!CheckRect(VAR_0, VAR_1, VAR_2, VAR_3, VAR_4)) {\n    rfbClientLog(\"Source rect out of bounds: %dx%d at (%d, %d)\\n\", VAR_1, VAR_2, VAR_3, VAR_4);\n    return;\n  }\n\n  if (!CheckRect(VAR_0, VAR_5, VAR_6, VAR_3, VAR_4)) {\n    rfbClientLog(\"Dest rect out of bounds: %dx%d at (%d, %d)\\n\", VAR_5, VAR_6, VAR_3, VAR_4);\n    return;\n  }\n\n#define COPY_RECT_FROM_RECT(VAR_9) \\\n  { \\\n    uint##BPP##_t* _buffer=((uint##BPP##_t*)client->frameBuffer)+(src_y-dest_y)*client->width+src_x-dest_x; \\\n    if (dest_y < src_y) { \\\n      for(j = dest_y*client->width; j < (dest_y+h)*client->width; j += client->width) { \\\n        if (dest_x < src_x) { \\\n          for(i = dest_x; i < dest_x+w; i++) { \\\n            ((uint##BPP##_t*)client->frameBuffer)[j+i]=_buffer[j+i]; \\\n          } \\\n        } else { \\\n          for(i = dest_x+w-1; i >= dest_x; i--) { \\\n            ((uint##BPP##_t*)client->frameBuffer)[j+i]=_buffer[j+i]; \\\n          } \\\n        } \\\n      } \\\n    } else { \\\n      for(j = (dest_y+h-1)*client->width; j >= dest_y*client->width; j-=client->width) { \\\n        if (dest_x < src_x) { \\\n          for(i = dest_x; i < dest_x+w; i++) { \\\n            ((uint##BPP##_t*)client->frameBuffer)[j+i]=_buffer[j+i]; \\\n          } \\\n        } else { \\\n          for(i = dest_x+w-1; i >= dest_x; i--) { \\\n            ((uint##BPP##_t*)client->frameBuffer)[j+i]=_buffer[j+i]; \\\n          } \\\n        } \\\n      } \\\n    } \\\n  }\n\n  switch(VAR_0->format.bitsPerPixel) {\n  case  8: COPY_RECT_FROM_RECT(8);  break;\n  case 16: COPY_RECT_FROM_RECT(16); break;\n  case 32: COPY_RECT_FROM_RECT(32); break;\n  default:\n    rfbClientLog(\"Unsupported bitsPerPixel: %d\\n\",VAR_0->format.bitsPerPixel);\n  }\n}",
  "func_graph_path": "LibVNC/libvncserver/5418e8007c248bf9668d22a8c1fa9528149b69f2/rfbproto.c/vul/after/2.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -3,6 +3,16 @@\n \n   if (client->frameBuffer == NULL) {\n       return;\n+  }\n+\n+  if (!CheckRect(client, src_x, src_y, w, h)) {\n+    rfbClientLog(\"Source rect out of bounds: %dx%d at (%d, %d)\\n\", src_x, src_y, w, h);\n+    return;\n+  }\n+\n+  if (!CheckRect(client, dest_x, dest_y, w, h)) {\n+    rfbClientLog(\"Dest rect out of bounds: %dx%d at (%d, %d)\\n\", dest_x, dest_y, w, h);\n+    return;\n   }\n \n #define COPY_RECT_FROM_RECT(BPP) \\",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "  }",
      "",
      "  if (!CheckRect(client, src_x, src_y, w, h)) {",
      "    rfbClientLog(\"Source rect out of bounds: %dx%d at (%d, %d)\\n\", src_x, src_y, w, h);",
      "    return;",
      "  }",
      "",
      "  if (!CheckRect(client, dest_x, dest_y, w, h)) {",
      "    rfbClientLog(\"Dest rect out of bounds: %dx%d at (%d, %d)\\n\", dest_x, dest_y, w, h);",
      "    return;"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/LibVNC/libvncserver/pull/137",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/LibVNC/libvncserver/pull/137: 403 Client Error: Forbidden for url: https://api.github.com/repos/LibVNC/libvncserver/pulls/137",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "The commit addresses heap overflows, confirmed by the vulnerability description and PoC, and fixes it with bounds checking. \n\n**Final Classification:** Security Vulnerability Fix; **Confidence:** 1.0"
}