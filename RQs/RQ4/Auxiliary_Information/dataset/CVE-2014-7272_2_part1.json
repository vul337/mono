{
  "cve_id": "CVE-2014-7272",
  "cwe_ids": [
    "CWE-264"
  ],
  "cvss_vector": "AV:L/AC:L/Au:N/C:C/I:C/A:C",
  "cvss_is_v3": false,
  "repo_name": "sddm",
  "commit_msg": "Move onAuthenticated XAUTHORITY generation to the helper\n\nThis avoids it being created as root and then chown'd.",
  "commit_hash": "e92c466f5c324b429ce1a8aa1b40d208574c778a",
  "git_url": "https://github.com/sddm/sddm/commit/e92c466f5c324b429ce1a8aa1b40d208574c778a",
  "file_path": "src/helper/HelperApp.cpp",
  "func_name": "HelperApp::authenticated",
  "func_before": "QProcessEnvironment HelperApp::authenticated(const QString &user) {\n        Msg m = Msg::MSG_UNKNOWN;\n        QProcessEnvironment response;\n        SafeDataStream str(m_socket);\n        str << Msg::AUTHENTICATED << user;\n        str.send();\n        if (user.isEmpty())\n            return response;\n        str.receive();\n        str >> m >> response;\n        if (m != AUTHENTICATED) {\n            response = QProcessEnvironment();\n            qCritical() << \"Received a wrong opcode instead of AUTHENTICATED:\" << m;\n        }\n        return response;\n    }",
  "abstract_func_before": "QProcessEnvironment HelperApp::authenticated(const QString &VAR_0) {\n        Msg VAR_1 = Msg::MSG_UNKNOWN;\n        QProcessEnvironment VAR_2;\n        SafeDataStream str(m_socket);\n        VAR_3 << Msg::AUTHENTICATED << VAR_0;\n        VAR_3.send();\n        if (VAR_0.isEmpty())\n            return VAR_2;\n        VAR_3.receive();\n        VAR_3 >> VAR_1 >> VAR_2;\n        if (VAR_1 != VAR_4) {\n            VAR_2 = QProcessEnvironment();\n            qCritical() << \"Received a wrong opcode instead of AUTHENTICATED:\" << VAR_1;\n        }\n        return VAR_2;\n    }",
  "func_graph_path_before": "sddm/e92c466f5c324b429ce1a8aa1b40d208574c778a/HelperApp.cpp/vul/before/0.json",
  "func": "QProcessEnvironment HelperApp::authenticated(const QString &user) {\n        Msg m = Msg::MSG_UNKNOWN;\n        QProcessEnvironment env;\n        SafeDataStream str(m_socket);\n        str << Msg::AUTHENTICATED << user;\n        str.send();\n        if (user.isEmpty())\n            return env;\n        str.receive();\n        str >> m >> env >> m_cookie;\n        if (m != AUTHENTICATED) {\n            env = QProcessEnvironment();\n            m_cookie = QString();\n            qCritical() << \"Received a wrong opcode instead of AUTHENTICATED:\" << m;\n        }\n        return env;\n    }",
  "abstract_func": "QProcessEnvironment HelperApp::authenticated(const QString &VAR_0) {\n        Msg VAR_1 = Msg::MSG_UNKNOWN;\n        QProcessEnvironment VAR_2;\n        SafeDataStream str(m_socket);\n        VAR_3 << Msg::AUTHENTICATED << VAR_0;\n        VAR_3.send();\n        if (VAR_0.isEmpty())\n            return VAR_2;\n        VAR_3.receive();\n        VAR_3 >> VAR_1 >> VAR_2 >> VAR_4;\n        if (VAR_1 != VAR_5) {\n            VAR_2 = QProcessEnvironment();\n            VAR_4 = QString();\n            qCritical() << \"Received a wrong opcode instead of AUTHENTICATED:\" << VAR_1;\n        }\n        return VAR_2;\n    }",
  "func_graph_path": "sddm/e92c466f5c324b429ce1a8aa1b40d208574c778a/HelperApp.cpp/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,16 +1,17 @@\n QProcessEnvironment HelperApp::authenticated(const QString &user) {\n         Msg m = Msg::MSG_UNKNOWN;\n-        QProcessEnvironment response;\n+        QProcessEnvironment env;\n         SafeDataStream str(m_socket);\n         str << Msg::AUTHENTICATED << user;\n         str.send();\n         if (user.isEmpty())\n-            return response;\n+            return env;\n         str.receive();\n-        str >> m >> response;\n+        str >> m >> env >> m_cookie;\n         if (m != AUTHENTICATED) {\n-            response = QProcessEnvironment();\n+            env = QProcessEnvironment();\n+            m_cookie = QString();\n             qCritical() << \"Received a wrong opcode instead of AUTHENTICATED:\" << m;\n         }\n-        return response;\n+        return env;\n     }",
  "diff_line_info": {
    "deleted_lines": [
      "        QProcessEnvironment response;",
      "            return response;",
      "        str >> m >> response;",
      "            response = QProcessEnvironment();",
      "        return response;"
    ],
    "added_lines": [
      "        QProcessEnvironment env;",
      "            return env;",
      "        str >> m >> env >> m_cookie;",
      "            env = QProcessEnvironment();",
      "            m_cookie = QString();",
      "        return env;"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/sddm/sddm/pull/280",
  "description": {
    "pr_info": {
      "title": "Move onAuthenticated XAUTHORITY generation to the helper",
      "number": 280
    },
    "comment": [
      "This avoids it being created as root and then chown'd.\n\nOpen for discussion, I know it's not by all means clean code.\n",
      "Also should fix .xsession-errors being owned by root\n"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "The patch focuses on security by preventing the use of root privileges for generating XAUTHORITY, which reduces potential exploitation risks. The code changes support this intent by modifying how environment variables are managed.\n\n**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.9\n\nThe changes clearly address a security concern by avoiding the creation of a file with root privileges and altering ownership, thus mitigating potential exploitation. The confidence is high due to the explicit mention of security-related actions in the commit and the subsequent code adjustments."
}