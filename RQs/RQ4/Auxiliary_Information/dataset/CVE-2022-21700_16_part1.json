{
  "cve_id": "CVE-2022-21700",
  "cwe_ids": [
    "CWE-400"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "micronaut-projects/micronaut-core",
  "commit_msg": "Use ConversionContext constants where possible instead of class (#2356)\n\nChanges\r\n-------\r\n * Added ArgumentConversionContext constants in ConversionContext\r\n * Replaced Argument.of and use of argument classes with\r\nConversionContext constants where possible\r\n * Added getFirst method in ConvertibleMultiValues that accepts\r\nArgumentConversionContent parameter\r\n\r\nPartially addresses issue #2355",
  "commit_hash": "b8ec32c311689667c69ae7d9f9c3b3a8abc96fe3",
  "git_url": "https://github.com/micronaut-projects/micronaut-core/commit/b8ec32c311689667c69ae7d9f9c3b3a8abc96fe3",
  "file_path": "http-server/src/main/java/io/micronaut/http/server/cors/CorsOriginConverter.java",
  "func_name": "convert",
  "func_before": "@Override\n    public Optional<CorsOriginConfiguration> convert(Object object, Class<CorsOriginConfiguration> targetType, ConversionContext context) {\n        CorsOriginConfiguration configuration = new CorsOriginConfiguration();\n        if (object instanceof Map) {\n            Map mapConfig = (Map) object;\n            ConvertibleValues<Object> convertibleValues = new ConvertibleValuesMap<>(mapConfig);\n\n            convertibleValues\n                .get(ALLOWED_ORIGINS, Argument.listOf(String.class))\n                .ifPresent(configuration::setAllowedOrigins);\n\n            convertibleValues\n                .get(ALLOWED_METHODS, Argument.listOf(HttpMethod.class))\n                .ifPresent(configuration::setAllowedMethods);\n\n            convertibleValues\n                .get(ALLOWED_HEADERS, Argument.listOf(String.class))\n                .ifPresent(configuration::setAllowedHeaders);\n\n            convertibleValues\n                .get(EXPOSED_HEADERS, Argument.listOf(String.class))\n                .ifPresent(configuration::setExposedHeaders);\n\n            convertibleValues\n                .get(ALLOW_CREDENTIALS, Boolean.class)\n                .ifPresent(configuration::setAllowCredentials);\n\n            convertibleValues\n                .get(MAX_AGE, Long.class)\n                .ifPresent(configuration::setMaxAge);\n        }\n        return Optional.of(configuration);\n    }",
  "abstract_func_before": "@Override\n    public Optional<CorsOriginConfiguration> convert(Object VAR_0, Class<CorsOriginConfiguration> VAR_1, ConversionContext VAR_2) {\n        CorsOriginConfiguration VAR_3 = new CorsOriginConfiguration();\n        if (VAR_0 instanceof Map) {\n            Map VAR_4 = (Map) VAR_0;\n            ConvertibleValues<Object> VAR_5 = new ConvertibleValuesMap<>(VAR_4);\n\n            VAR_5\n                .get(VAR_6, VAR_7.listOf(String.class))\n                .ifPresent(VAR_3::VAR_8);\n\n            VAR_5\n                .get(VAR_9, VAR_7.listOf(HttpMethod.class))\n                .ifPresent(VAR_3::VAR_10);\n\n            VAR_5\n                .get(VAR_11, VAR_7.listOf(String.class))\n                .ifPresent(VAR_3::VAR_12);\n\n            VAR_5\n                .get(VAR_13, VAR_7.listOf(String.class))\n                .ifPresent(VAR_3::VAR_14);\n\n            VAR_5\n                .get(VAR_15, Boolean.class)\n                .ifPresent(VAR_3::VAR_16);\n\n            VAR_5\n                .get(VAR_17, Long.class)\n                .ifPresent(VAR_3::VAR_18);\n        }\n        return VAR_19.of(VAR_3);\n    }",
  "func_graph_path_before": "micronaut-projects/micronaut-core/b8ec32c311689667c69ae7d9f9c3b3a8abc96fe3/CorsOriginConverter.java/vul/before/0.json",
  "func": "@Override\n    public Optional<CorsOriginConfiguration> convert(Object object, Class<CorsOriginConfiguration> targetType, ConversionContext context) {\n        CorsOriginConfiguration configuration = new CorsOriginConfiguration();\n        if (object instanceof Map) {\n            Map mapConfig = (Map) object;\n            ConvertibleValues<Object> convertibleValues = new ConvertibleValuesMap<>(mapConfig);\n\n            convertibleValues\n                .get(ALLOWED_ORIGINS, ConversionContext.LIST_OF_STRING)\n                .ifPresent(configuration::setAllowedOrigins);\n\n            convertibleValues\n                .get(ALLOWED_METHODS, CONVERSION_CONTEXT_LIST_OF_HTTP_METHOD)\n                .ifPresent(configuration::setAllowedMethods);\n\n            convertibleValues\n                .get(ALLOWED_HEADERS, ConversionContext.LIST_OF_STRING)\n                .ifPresent(configuration::setAllowedHeaders);\n\n            convertibleValues\n                .get(EXPOSED_HEADERS, ConversionContext.LIST_OF_STRING)\n                .ifPresent(configuration::setExposedHeaders);\n\n            convertibleValues\n                .get(ALLOW_CREDENTIALS, ConversionContext.BOOLEAN)\n                .ifPresent(configuration::setAllowCredentials);\n\n            convertibleValues\n                .get(MAX_AGE, ConversionContext.LONG)\n                .ifPresent(configuration::setMaxAge);\n        }\n        return Optional.of(configuration);\n    }",
  "abstract_func": "@Override\n    public Optional<CorsOriginConfiguration> convert(Object VAR_0, Class<CorsOriginConfiguration> VAR_1, ConversionContext VAR_2) {\n        CorsOriginConfiguration VAR_3 = new CorsOriginConfiguration();\n        if (VAR_0 instanceof Map) {\n            Map VAR_4 = (Map) VAR_0;\n            ConvertibleValues<Object> VAR_5 = new ConvertibleValuesMap<>(VAR_4);\n\n            VAR_5\n                .get(VAR_6, VAR_7.LIST_OF_STRING)\n                .ifPresent(VAR_3::VAR_8);\n\n            VAR_5\n                .get(VAR_9, VAR_10)\n                .ifPresent(VAR_3::VAR_11);\n\n            VAR_5\n                .get(VAR_12, VAR_7.LIST_OF_STRING)\n                .ifPresent(VAR_3::VAR_13);\n\n            VAR_5\n                .get(VAR_14, VAR_7.LIST_OF_STRING)\n                .ifPresent(VAR_3::VAR_15);\n\n            VAR_5\n                .get(VAR_16, VAR_7.BOOLEAN)\n                .ifPresent(VAR_3::VAR_17);\n\n            VAR_5\n                .get(VAR_18, VAR_7.LONG)\n                .ifPresent(VAR_3::VAR_19);\n        }\n        return VAR_20.of(VAR_3);\n    }",
  "func_graph_path": "micronaut-projects/micronaut-core/b8ec32c311689667c69ae7d9f9c3b3a8abc96fe3/CorsOriginConverter.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -6,27 +6,27 @@\n             ConvertibleValues<Object> convertibleValues = new ConvertibleValuesMap<>(mapConfig);\n \n             convertibleValues\n-                .get(ALLOWED_ORIGINS, Argument.listOf(String.class))\n+                .get(ALLOWED_ORIGINS, ConversionContext.LIST_OF_STRING)\n                 .ifPresent(configuration::setAllowedOrigins);\n \n             convertibleValues\n-                .get(ALLOWED_METHODS, Argument.listOf(HttpMethod.class))\n+                .get(ALLOWED_METHODS, CONVERSION_CONTEXT_LIST_OF_HTTP_METHOD)\n                 .ifPresent(configuration::setAllowedMethods);\n \n             convertibleValues\n-                .get(ALLOWED_HEADERS, Argument.listOf(String.class))\n+                .get(ALLOWED_HEADERS, ConversionContext.LIST_OF_STRING)\n                 .ifPresent(configuration::setAllowedHeaders);\n \n             convertibleValues\n-                .get(EXPOSED_HEADERS, Argument.listOf(String.class))\n+                .get(EXPOSED_HEADERS, ConversionContext.LIST_OF_STRING)\n                 .ifPresent(configuration::setExposedHeaders);\n \n             convertibleValues\n-                .get(ALLOW_CREDENTIALS, Boolean.class)\n+                .get(ALLOW_CREDENTIALS, ConversionContext.BOOLEAN)\n                 .ifPresent(configuration::setAllowCredentials);\n \n             convertibleValues\n-                .get(MAX_AGE, Long.class)\n+                .get(MAX_AGE, ConversionContext.LONG)\n                 .ifPresent(configuration::setMaxAge);\n         }\n         return Optional.of(configuration);",
  "diff_line_info": {
    "deleted_lines": [
      "                .get(ALLOWED_ORIGINS, Argument.listOf(String.class))",
      "                .get(ALLOWED_METHODS, Argument.listOf(HttpMethod.class))",
      "                .get(ALLOWED_HEADERS, Argument.listOf(String.class))",
      "                .get(EXPOSED_HEADERS, Argument.listOf(String.class))",
      "                .get(ALLOW_CREDENTIALS, Boolean.class)",
      "                .get(MAX_AGE, Long.class)"
    ],
    "added_lines": [
      "                .get(ALLOWED_ORIGINS, ConversionContext.LIST_OF_STRING)",
      "                .get(ALLOWED_METHODS, CONVERSION_CONTEXT_LIST_OF_HTTP_METHOD)",
      "                .get(ALLOWED_HEADERS, ConversionContext.LIST_OF_STRING)",
      "                .get(EXPOSED_HEADERS, ConversionContext.LIST_OF_STRING)",
      "                .get(ALLOW_CREDENTIALS, ConversionContext.BOOLEAN)",
      "                .get(MAX_AGE, ConversionContext.LONG)"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/micronaut-projects/micronaut-core/pull/2356",
  "description": {
    "pr_info": {
      "title": "Use Argument constants where possible instead of class",
      "number": 2356
    },
    "comment": [
      "Changes\r\n-------\r\n * Added ArgumentConversionContext constants in ConversionContext\r\n * Replaced Argument.of and use of argument classes with\r\nConversionContext constants where possible\r\n * Added getFirst method in ConvertibleMultiValues that accepts\r\nArgumentConversionContent parameter\r\n\r\nPartially addresses issue #2355",
      "Nice progress"
    ]
  },
  "Bug Filter": "Supporting & Non-Core Improvements",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Supporting & Non-Core Improvements  \n**Confidence:** 0.9"
}