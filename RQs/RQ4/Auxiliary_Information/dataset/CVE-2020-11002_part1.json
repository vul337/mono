{
  "cve_id": "CVE-2020-11002",
  "cwe_ids": [
    "CWE-74"
  ],
  "cvss_vector": "AV:N/AC:L/Au:S/C:C/I:C/A:C",
  "cvss_is_v3": false,
  "repo_name": "dropwizard",
  "commit_msg": "Disable message interpolation in ConstraintViolations by default (#3208)\n\nDisable message interpolation in ConstraintViolations by default but allow enabling it explicitly with `SelfValidating#escapeExpressions()`.\r\n\r\nAdditionally, `ConstraintViolations` now provides a set of methods which take a map of message parameters for interpolation.\r\nThe message parameters will be escaped by default.\r\n\r\nRefs #3153\r\nRefs #3157",
  "commit_hash": "d5a512f7abf965275f2a6b913ac4fe778e424242",
  "git_url": "https://github.com/dropwizard/dropwizard/commit/d5a512f7abf965275f2a6b913ac4fe778e424242",
  "file_path": "dropwizard-validation/src/main/java/io/dropwizard/validation/selfvalidating/SelfValidatingValidator.java",
  "func_name": "isValid",
  "func_before": "@SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    @Override\n    public boolean isValid(Object value, ConstraintValidatorContext context) {\n        final ViolationCollector collector = new ViolationCollector(context);\n        context.disableDefaultConstraintViolation();\n        for (ValidationCaller caller : methodMap.computeIfAbsent(value.getClass(), this::findMethods)) {\n            caller.setValidationObject(value);\n            caller.call(collector);\n        }\n        return !collector.hasViolationOccurred();\n    }",
  "abstract_func_before": "@SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    @Override\n    public boolean isValid(Object VAR_0, ConstraintValidatorContext VAR_1) {\n        final ViolationCollector VAR_2 = new ViolationCollector(VAR_1);\n        VAR_1.disableDefaultConstraintViolation();\n        for (ValidationCaller VAR_3 : VAR_4.computeIfAbsent(VAR_0.getClass(), this::VAR_5)) {\n            VAR_3.setValidationObject(VAR_0);\n            VAR_3.call(VAR_2);\n        }\n        return !VAR_2.hasViolationOccurred();\n    }",
  "func_graph_path_before": "dropwizard/d5a512f7abf965275f2a6b913ac4fe778e424242/SelfValidatingValidator.java/vul/before/0.json",
  "func": "@SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    @Override\n    public boolean isValid(Object value, ConstraintValidatorContext context) {\n        final ViolationCollector collector = new ViolationCollector(context, escapeExpressions);\n        context.disableDefaultConstraintViolation();\n        for (ValidationCaller caller : methodMap.computeIfAbsent(value.getClass(), this::findMethods)) {\n            caller.setValidationObject(value);\n            caller.call(collector);\n        }\n        return !collector.hasViolationOccurred();\n    }",
  "abstract_func": "@SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    @Override\n    public boolean isValid(Object VAR_0, ConstraintValidatorContext VAR_1) {\n        final ViolationCollector VAR_2 = new ViolationCollector(VAR_1, VAR_3);\n        VAR_1.disableDefaultConstraintViolation();\n        for (ValidationCaller VAR_4 : VAR_5.computeIfAbsent(VAR_0.getClass(), this::VAR_6)) {\n            VAR_4.setValidationObject(VAR_0);\n            VAR_4.call(VAR_2);\n        }\n        return !VAR_2.hasViolationOccurred();\n    }",
  "func_graph_path": "dropwizard/d5a512f7abf965275f2a6b913ac4fe778e424242/SelfValidatingValidator.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,7 +1,7 @@\n @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n     @Override\n     public boolean isValid(Object value, ConstraintValidatorContext context) {\n-        final ViolationCollector collector = new ViolationCollector(context);\n+        final ViolationCollector collector = new ViolationCollector(context, escapeExpressions);\n         context.disableDefaultConstraintViolation();\n         for (ValidationCaller caller : methodMap.computeIfAbsent(value.getClass(), this::findMethods)) {\n             caller.setValidationObject(value);",
  "diff_line_info": {
    "deleted_lines": [
      "        final ViolationCollector collector = new ViolationCollector(context);"
    ],
    "added_lines": [
      "        final ViolationCollector collector = new ViolationCollector(context, escapeExpressions);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/dropwizard/dropwizard/pull/3208",
  "description": {
    "pr_info": {
      "title": "Disable message interpolation in ConstraintViolations by default",
      "number": 3208
    },
    "comment": [
      "Disable message interpolation in `ConstraintViolations` by default but allow enabling it explicitly with `SelfValidating#escapeExpressions()`.\r\n\r\nAdditionally, `ConstraintViolations` now provides a set of methods which take a map of message parameters for interpolation. These message parameters are be escaped by default.\r\n\r\nThanks to @pwntester and @gsmet for their invaluable input!\r\n\r\nRefs #3153\r\nRefs #3157",
      "LGTM, thanks!"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 1.0"
}