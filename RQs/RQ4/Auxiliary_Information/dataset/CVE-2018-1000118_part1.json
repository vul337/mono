{
  "cve_id": "CVE-2018-1000118",
  "cwe_ids": [
    "CWE-78"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:C/I:C/A:C",
  "cvss_is_v3": false,
  "repo_name": "electron",
  "commit_msg": "Use case-insensitive switch comparisons",
  "commit_hash": "ce361a12e355f9e1e99c989f1ea056c9e502dbe7",
  "git_url": "https://github.com/electron/electron/commit/ce361a12e355f9e1e99c989f1ea056c9e502dbe7",
  "file_path": "atom/app/command_line_args.cc",
  "func_name": "IsBlacklistedArg",
  "func_before": "bool IsBlacklistedArg(const base::CommandLine::CharType* arg) {\n#if defined(OS_WIN)\n  const auto converted = base::WideToUTF8(arg);\n  const char* a = converted.c_str();\n#else\n  const char* a = arg;\n#endif\n\n  static const char* prefixes[] = {\"--\", \"-\", \"/\"};\n\n  int prefix_length = 0;\n  for (auto& prefix : prefixes) {\n    if (base::StartsWith(a, prefix, base::CompareCase::SENSITIVE)) {\n      prefix_length = strlen(prefix);\n      break;\n    }\n  }\n\n  if (prefix_length > 0) {\n    a += prefix_length;\n    std::string switch_name(a, strcspn(a, \"=\"));\n    auto* iter = std::lower_bound(std::begin(kBlacklist), std::end(kBlacklist),\n                                  switch_name);\n    if (iter != std::end(kBlacklist) && switch_name == *iter) {\n      return true;\n    }\n  }\n\n  return false;\n}",
  "abstract_func_before": "bool IsBlacklistedArg(const base::CommandLine::CharType* VAR_0) {\n#if defined(VAR_1)\n  const auto VAR_2 = base::WideToUTF8(VAR_0);\n  const char* VAR_3 = VAR_2.c_str();\n#else\n  const char* VAR_3 = VAR_0;\n#endif\n\n  static const char* VAR_4[] = {\"--\", \"-\", \"/\"};\n\n  int VAR_5 = 0;\n  for (auto& VAR_6 : VAR_4) {\n    if (base::StartsWith(VAR_3, VAR_6, base::CompareCase::SENSITIVE)) {\n      VAR_5 = strlen(VAR_6);\n      break;\n    }\n  }\n\n  if (VAR_5 > 0) {\n    VAR_3 += VAR_5;\n    std::string VAR_7(VAR_3, strcspn(VAR_3, \"=\"));\n    auto* VAR_8 = std::lower_bound(std::begin(VAR_9), std::end(VAR_9),\n                                  VAR_7);\n    if (VAR_8 != std::end(VAR_9) && VAR_7 == *VAR_8) {\n      return true;\n    }\n  }\n\n  return false;\n}",
  "func_graph_path_before": "electron/ce361a12e355f9e1e99c989f1ea056c9e502dbe7/command_line_args.cc/vul/before/0.json",
  "func": "bool IsBlacklistedArg(const base::CommandLine::CharType* arg) {\n#if defined(OS_WIN)\n  const auto converted = base::WideToUTF8(arg);\n  const char* a = converted.c_str();\n#else\n  const char* a = arg;\n#endif\n\n  static const char* prefixes[] = {\"--\", \"-\", \"/\"};\n\n  int prefix_length = 0;\n  for (auto& prefix : prefixes) {\n    if (base::StartsWith(a, prefix, base::CompareCase::SENSITIVE)) {\n      prefix_length = strlen(prefix);\n      break;\n    }\n  }\n\n  if (prefix_length > 0) {\n    a += prefix_length;\n    std::string switch_name =\n        base::ToLowerASCII(base::StringPiece(a, strcspn(a, \"=\")));\n    auto* iter = std::lower_bound(std::begin(kBlacklist), std::end(kBlacklist),\n                                  switch_name);\n    if (iter != std::end(kBlacklist) && switch_name == *iter) {\n      return true;\n    }\n  }\n\n  return false;\n}",
  "abstract_func": "bool IsBlacklistedArg(const base::CommandLine::CharType* VAR_0) {\n#if defined(VAR_1)\n  const auto VAR_2 = base::WideToUTF8(VAR_0);\n  const char* VAR_3 = VAR_2.c_str();\n#else\n  const char* VAR_3 = VAR_0;\n#endif\n\n  static const char* VAR_4[] = {\"--\", \"-\", \"/\"};\n\n  int VAR_5 = 0;\n  for (auto& VAR_6 : VAR_4) {\n    if (base::StartsWith(VAR_3, VAR_6, base::CompareCase::SENSITIVE)) {\n      VAR_5 = strlen(VAR_6);\n      break;\n    }\n  }\n\n  if (VAR_5 > 0) {\n    VAR_3 += VAR_5;\n    std::string VAR_7 =\n        base::ToLowerASCII(base::StringPiece(VAR_3, strcspn(VAR_3, \"=\")));\n    auto* VAR_8 = std::lower_bound(std::begin(VAR_9), std::end(VAR_9),\n                                  VAR_7);\n    if (VAR_8 != std::end(VAR_9) && VAR_7 == *VAR_8) {\n      return true;\n    }\n  }\n\n  return false;\n}",
  "func_graph_path": "electron/ce361a12e355f9e1e99c989f1ea056c9e502dbe7/command_line_args.cc/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -18,7 +18,8 @@\n \n   if (prefix_length > 0) {\n     a += prefix_length;\n-    std::string switch_name(a, strcspn(a, \"=\"));\n+    std::string switch_name =\n+        base::ToLowerASCII(base::StringPiece(a, strcspn(a, \"=\")));\n     auto* iter = std::lower_bound(std::begin(kBlacklist), std::end(kBlacklist),\n                                   switch_name);\n     if (iter != std::end(kBlacklist) && switch_name == *iter) {",
  "diff_line_info": {
    "deleted_lines": [
      "    std::string switch_name(a, strcspn(a, \"=\"));"
    ],
    "added_lines": [
      "    std::string switch_name =",
      "        base::ToLowerASCII(base::StringPiece(a, strcspn(a, \"=\")));"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/electron/electron/pull/11796",
  "description": {
    "pr_info": {
      "title": "Case insensitive blacklist",
      "number": 11796
    },
    "comment": [
      "* Applies Sam's case-insensitive blacklist patch.\r\n\r\n* Uses std::binary_search as discussed in #11726 with @zcbenz and @alespergl \r\n\r\n* Make a blacklist recipe that can be copied and pasted from the code comments into a shell",
      "I don't like the use of binary search here. I already commented on the original PR that introduced the `lower_bound`. I think it's a overly complex and risky optimization with no real performance gain. Let's keep it simple and safe, and go back to the linear scan algorithm. Please.",
      "@alespergl since there's not consensus on that and this PR doesn't change what's already in master vis. linear vs binary search, I'd prefer to land this case fix here and have the search discussion separately"
    ]
  },
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.85,
  "Bug Filter Response": "**Final Classification:** Defect Remediation & Feature Upgrades  \n**Confidence:** 0.85"
}