{
  "cve_id": "CVE-2023-45132",
  "cwe_ids": [
    "CWE-693"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
  "cvss_is_v3": true,
  "repo_name": "wargio/naxsi",
  "commit_msg": "Remove X-Forwarded-For header special processing (#103)\n\n* Change tests IgnoreCIDR/IgnoreIP with/without real_ip support\r\n* Remove X-Forwarding-For header special processing\r\n* Change tests IgnoreCIDR/IgnoreIP set_real_ip_from 127.0.0.1 for IPv6 (for IPv4 machine only)\r\n* Change tests IgnoreCIDR/IgnoreIP set_real_ip_from 127.0.0.1 and ::1/128 for IPv6",
  "commit_hash": "1b712526ed3314dd6be7e8b0259eabda63c19537",
  "git_url": "https://github.com/wargio/naxsi/commit/1b712526ed3314dd6be7e8b0259eabda63c19537",
  "file_path": "naxsi_src/naxsi_runtime.c",
  "func_name": "ngx_http_naxsi_update_current_ctx_status",
  "func_before": "void\nngx_http_naxsi_update_current_ctx_status(ngx_http_request_ctx_t*    ctx,\n                                         ngx_http_naxsi_loc_conf_t* cf,\n                                         ngx_http_request_t*        r)\n{\n  unsigned int              i, z;\n  unsigned int              matched;\n  ngx_http_check_rule_t*    cr;\n  ngx_http_special_score_t* sc;\n\n  NX_DEBUG(_debug_custom_score, NGX_LOG_DEBUG_HTTP, r->connection->log, 0, \"XX-custom check rules\");\n\n  if (!ctx->ignore && (cf->ignore_ips || cf->ignore_cidrs)) {\n#if (NGX_HTTP_X_FORWARDED_FOR)\n#if (nginx_version < 1023000)\n    ngx_table_elt_t** h;\n    if (r->headers_in.x_forwarded_for.nelts >= 1) {\n      h = r->headers_in.x_forwarded_for.elts;\n      NX_DEBUG(_debug_whitelist_ignore,\n               NGX_LOG_DEBUG_HTTP,\n               r->connection->log,\n               0,\n               \"XX- lookup ignore X-Forwarded-For: %V\",\n               h[0]->value);\n      ngx_str_t* ip = &h[0]->value;\n      ctx->ignore   = naxsi_can_ignore_ip(ip, cf) || naxsi_can_ignore_cidr(ip, cf);\n    } else\n#else\n    ngx_table_elt_t* xff;\n    if (r->headers_in.x_forwarded_for != NULL) {\n      xff = r->headers_in.x_forwarded_for;\n      NX_DEBUG(_debug_whitelist_ignore,\n               NGX_LOG_DEBUG_HTTP,\n               r->connection->log,\n               0,\n               \"XX- lookup ignore X-Forwarded-For: %V\",\n               xff->value);\n      ngx_str_t* ip = &xff->value;\n      ctx->ignore   = naxsi_can_ignore_ip(ip, cf) || naxsi_can_ignore_cidr(ip, cf);\n    } else\n#endif\n#endif\n    {\n      ngx_str_t* ip = &r->connection->addr_text;\n      NX_DEBUG(_debug_whitelist_ignore,\n               NGX_LOG_DEBUG_HTTP,\n               r->connection->log,\n               0,\n               \"XX- lookup ignore client ip: %V\",\n               ip);\n      ctx->ignore = naxsi_can_ignore_ip(ip, cf) || naxsi_can_ignore_cidr(ip, cf);\n    }\n  }\n\n  if (cf->check_rules && ctx->special_scores) {\n    NX_DEBUG(_debug_custom_score,\n             NGX_LOG_DEBUG_HTTP,\n             r->connection->log,\n             0,\n             \"XX-we have custom check rules and CTX got special score :)\");\n\n    cr = cf->check_rules->elts;\n    sc = ctx->special_scores->elts;\n    for (z = 0; z < ctx->special_scores->nelts; z++)\n      for (i = 0; i < cf->check_rules->nelts; i++) {\n        NX_DEBUG(_debug_custom_score,\n                 NGX_LOG_DEBUG_HTTP,\n                 r->connection->log,\n                 0,\n                 \"XX- rule says :(%s:%d) vs current context:(%s:%d) (flag=%d)\",\n                 cr[i].sc_tag.data,\n                 cr[i].sc_score,\n                 sc[z].sc_tag->data,\n                 sc[z].sc_score,\n                 cr[i].cmp);\n\n        if (!ngx_strcmp(sc[z].sc_tag->data, cr[i].sc_tag.data)) {\n          NX_DEBUG(_debug_custom_score,\n                   NGX_LOG_DEBUG_HTTP,\n                   r->connection->log,\n                   0,\n                   \"XX- rule says :(%s:%d) vs current context:(%s:%d) (flag=%d)\",\n                   cr[i].sc_tag.data,\n                   cr[i].sc_score,\n                   sc[z].sc_tag->data,\n                   sc[z].sc_score,\n                   cr[i].cmp);\n\n          matched = 0;\n          // huglier than your mom :)\n          switch (cr[i].cmp) {\n            case SUP:\n              matched = sc[z].sc_score > cr[i].sc_score ? 1 : 0;\n              break;\n            case SUP_OR_EQUAL:\n              matched = sc[z].sc_score >= cr[i].sc_score ? 1 : 0;\n              break;\n            case INF:\n              matched = sc[z].sc_score < cr[i].sc_score ? 1 : 0;\n              break;\n            case INF_OR_EQUAL:\n              matched = sc[z].sc_score <= cr[i].sc_score ? 1 : 0;\n              break;\n          }\n          if (matched) {\n            NX_DEBUG(_debug_custom_score,\n                     NGX_LOG_DEBUG_HTTP,\n                     r->connection->log,\n                     0,\n                     \"XX- custom score rule triggered ..\");\n            if (cr[i].block) {\n              ctx->block = 1;\n            }\n            if (cr[i].drop) {\n              ctx->drop = 1;\n            }\n            if (cr[i].allow) {\n              ctx->allow = 1;\n            }\n            if (cr[i].log) {\n              ctx->log = 1;\n            }\n          }\n        }\n      }\n  }\n  if (ctx->ignore) {\n    ctx->block = 0;\n    ctx->drop  = 0;\n  }\n}",
  "abstract_func_before": "void\nngx_http_naxsi_update_current_ctx_status(ngx_http_request_ctx_t*    VAR_0,\n                                         ngx_http_naxsi_loc_conf_t* VAR_1,\n                                         ngx_http_request_t*        VAR_2)\n{\n  unsigned int              VAR_3, VAR_4;\n  unsigned int              VAR_5;\n  ngx_http_check_rule_t*    VAR_6;\n  ngx_http_special_score_t* VAR_7;\n\n  NX_DEBUG(VAR_8, VAR_9, VAR_2->connection->log, 0, \"XX-custom check rules\");\n\n  if (!VAR_0->ignore && (VAR_1->ignore_ips || VAR_1->ignore_cidrs)) {\n#if (VAR_10)\n#if (VAR_11 < 1023000)\n    ngx_table_elt_t** VAR_12;\n    if (VAR_2->headers_in.x_forwarded_for.nelts >= 1) {\n      VAR_12 = VAR_2->headers_in.x_forwarded_for.elts;\n      NX_DEBUG(VAR_13,\n               VAR_9,\n               VAR_2->connection->log,\n               0,\n               \"XX- lookup ignore X-Forwarded-For: %V\",\n               VAR_12[0]->value);\n      ngx_str_t* VAR_14 = &VAR_12[0]->value;\n      VAR_0->ignore   = naxsi_can_ignore_ip(VAR_14, VAR_1) || naxsi_can_ignore_cidr(VAR_14, VAR_1);\n    } else\n#else\n    ngx_table_elt_t* VAR_15;\n    if (VAR_2->headers_in.x_forwarded_for != NULL) {\n      VAR_15 = VAR_2->headers_in.x_forwarded_for;\n      NX_DEBUG(VAR_13,\n               VAR_9,\n               VAR_2->connection->log,\n               0,\n               \"XX- lookup ignore X-Forwarded-For: %V\",\n               VAR_15->value);\n      ngx_str_t* VAR_14 = &VAR_15->value;\n      VAR_0->ignore   = naxsi_can_ignore_ip(VAR_14, VAR_1) || naxsi_can_ignore_cidr(VAR_14, VAR_1);\n    } else\n#endif\n#endif\n    {\n      ngx_str_t* VAR_14 = &VAR_2->connection->addr_text;\n      NX_DEBUG(VAR_13,\n               VAR_9,\n               VAR_2->connection->log,\n               0,\n               \"XX- lookup ignore client ip: %V\",\n               VAR_14);\n      VAR_0->ignore = naxsi_can_ignore_ip(VAR_14, VAR_1) || naxsi_can_ignore_cidr(VAR_14, VAR_1);\n    }\n  }\n\n  if (VAR_1->check_rules && VAR_0->special_scores) {\n    NX_DEBUG(VAR_8,\n             VAR_9,\n             VAR_2->connection->log,\n             0,\n             \"XX-we have custom check rules and CTX got special score :)\");\n\n    VAR_6 = VAR_1->check_rules->elts;\n    VAR_7 = VAR_0->special_scores->elts;\n    for (VAR_4 = 0; VAR_4 < VAR_0->special_scores->nelts; VAR_4++)\n      for (VAR_3 = 0; VAR_3 < VAR_1->check_rules->nelts; VAR_3++) {\n        NX_DEBUG(VAR_8,\n                 VAR_9,\n                 VAR_2->connection->log,\n                 0,\n                 \"XX- rule says :(%s:%d) vs current context:(%s:%d) (flag=%d)\",\n                 VAR_6[VAR_3].sc_tag.data,\n                 VAR_6[VAR_3].sc_score,\n                 VAR_7[VAR_4].sc_tag->data,\n                 VAR_7[VAR_4].sc_score,\n                 VAR_6[VAR_3].cmp);\n\n        if (!ngx_strcmp(VAR_7[VAR_4].sc_tag->data, VAR_6[VAR_3].sc_tag.data)) {\n          NX_DEBUG(VAR_8,\n                   VAR_9,\n                   VAR_2->connection->log,\n                   0,\n                   \"XX- rule says :(%s:%d) vs current context:(%s:%d) (flag=%d)\",\n                   VAR_6[VAR_3].sc_tag.data,\n                   VAR_6[VAR_3].sc_score,\n                   VAR_7[VAR_4].sc_tag->data,\n                   VAR_7[VAR_4].sc_score,\n                   VAR_6[VAR_3].cmp);\n\n          VAR_5 = 0;\n          /* COMMENT_0 */\n          switch (VAR_6[VAR_3].cmp) {\n            case VAR_16:\n              VAR_5 = VAR_7[VAR_4].sc_score > VAR_6[VAR_3].sc_score ? 1 : 0;\n              break;\n            case VAR_17:\n              VAR_5 = VAR_7[VAR_4].sc_score >= VAR_6[VAR_3].sc_score ? 1 : 0;\n              break;\n            case VAR_18:\n              VAR_5 = VAR_7[VAR_4].sc_score < VAR_6[VAR_3].sc_score ? 1 : 0;\n              break;\n            case VAR_19:\n              VAR_5 = VAR_7[VAR_4].sc_score <= VAR_6[VAR_3].sc_score ? 1 : 0;\n              break;\n          }\n          if (VAR_5) {\n            NX_DEBUG(VAR_8,\n                     VAR_9,\n                     VAR_2->connection->log,\n                     0,\n                     \"XX- custom score rule triggered ..\");\n            if (VAR_6[VAR_3].block) {\n              VAR_0->block = 1;\n            }\n            if (VAR_6[VAR_3].drop) {\n              VAR_0->drop = 1;\n            }\n            if (VAR_6[VAR_3].allow) {\n              VAR_0->allow = 1;\n            }\n            if (VAR_6[VAR_3].log) {\n              VAR_0->log = 1;\n            }\n          }\n        }\n      }\n  }\n  if (VAR_0->ignore) {\n    VAR_0->block = 0;\n    VAR_0->drop  = 0;\n  }\n}",
  "func_graph_path_before": "wargio/naxsi/1b712526ed3314dd6be7e8b0259eabda63c19537/naxsi_runtime.c/vul/before/0.json",
  "func": "void\nngx_http_naxsi_update_current_ctx_status(ngx_http_request_ctx_t*    ctx,\n                                         ngx_http_naxsi_loc_conf_t* cf,\n                                         ngx_http_request_t*        r)\n{\n  unsigned int              i, z;\n  unsigned int              matched;\n  ngx_http_check_rule_t*    cr;\n  ngx_http_special_score_t* sc;\n\n  NX_DEBUG(_debug_custom_score, NGX_LOG_DEBUG_HTTP, r->connection->log, 0, \"XX-custom check rules\");\n\n  if (!ctx->ignore && (cf->ignore_ips || cf->ignore_cidrs)) {\n      ngx_str_t* ip = &r->connection->addr_text;\n      NX_DEBUG(_debug_whitelist_ignore,\n               NGX_LOG_DEBUG_HTTP,\n               r->connection->log,\n               0,\n               \"XX- lookup ignore client ip: %V\",\n               ip);\n      ctx->ignore = naxsi_can_ignore_ip(ip, cf) || naxsi_can_ignore_cidr(ip, cf);\n  }\n\n  if (cf->check_rules && ctx->special_scores) {\n    NX_DEBUG(_debug_custom_score,\n             NGX_LOG_DEBUG_HTTP,\n             r->connection->log,\n             0,\n             \"XX-we have custom check rules and CTX got special score :)\");\n\n    cr = cf->check_rules->elts;\n    sc = ctx->special_scores->elts;\n    for (z = 0; z < ctx->special_scores->nelts; z++)\n      for (i = 0; i < cf->check_rules->nelts; i++) {\n        NX_DEBUG(_debug_custom_score,\n                 NGX_LOG_DEBUG_HTTP,\n                 r->connection->log,\n                 0,\n                 \"XX- rule says :(%s:%d) vs current context:(%s:%d) (flag=%d)\",\n                 cr[i].sc_tag.data,\n                 cr[i].sc_score,\n                 sc[z].sc_tag->data,\n                 sc[z].sc_score,\n                 cr[i].cmp);\n\n        if (!ngx_strcmp(sc[z].sc_tag->data, cr[i].sc_tag.data)) {\n          NX_DEBUG(_debug_custom_score,\n                   NGX_LOG_DEBUG_HTTP,\n                   r->connection->log,\n                   0,\n                   \"XX- rule says :(%s:%d) vs current context:(%s:%d) (flag=%d)\",\n                   cr[i].sc_tag.data,\n                   cr[i].sc_score,\n                   sc[z].sc_tag->data,\n                   sc[z].sc_score,\n                   cr[i].cmp);\n\n          matched = 0;\n          // huglier than your mom :)\n          switch (cr[i].cmp) {\n            case SUP:\n              matched = sc[z].sc_score > cr[i].sc_score ? 1 : 0;\n              break;\n            case SUP_OR_EQUAL:\n              matched = sc[z].sc_score >= cr[i].sc_score ? 1 : 0;\n              break;\n            case INF:\n              matched = sc[z].sc_score < cr[i].sc_score ? 1 : 0;\n              break;\n            case INF_OR_EQUAL:\n              matched = sc[z].sc_score <= cr[i].sc_score ? 1 : 0;\n              break;\n          }\n          if (matched) {\n            NX_DEBUG(_debug_custom_score,\n                     NGX_LOG_DEBUG_HTTP,\n                     r->connection->log,\n                     0,\n                     \"XX- custom score rule triggered ..\");\n            if (cr[i].block) {\n              ctx->block = 1;\n            }\n            if (cr[i].drop) {\n              ctx->drop = 1;\n            }\n            if (cr[i].allow) {\n              ctx->allow = 1;\n            }\n            if (cr[i].log) {\n              ctx->log = 1;\n            }\n          }\n        }\n      }\n  }\n  if (ctx->ignore) {\n    ctx->block = 0;\n    ctx->drop  = 0;\n  }\n}",
  "abstract_func": "void\nngx_http_naxsi_update_current_ctx_status(ngx_http_request_ctx_t*    VAR_0,\n                                         ngx_http_naxsi_loc_conf_t* VAR_1,\n                                         ngx_http_request_t*        VAR_2)\n{\n  unsigned int              VAR_3, VAR_4;\n  unsigned int              VAR_5;\n  ngx_http_check_rule_t*    VAR_6;\n  ngx_http_special_score_t* VAR_7;\n\n  NX_DEBUG(VAR_8, VAR_9, VAR_2->connection->log, 0, \"XX-custom check rules\");\n\n  if (!VAR_0->ignore && (VAR_1->ignore_ips || VAR_1->ignore_cidrs)) {\n      ngx_str_t* VAR_10 = &VAR_2->connection->addr_text;\n      NX_DEBUG(VAR_11,\n               VAR_9,\n               VAR_2->connection->log,\n               0,\n               \"XX- lookup ignore client ip: %V\",\n               VAR_10);\n      VAR_0->ignore = naxsi_can_ignore_ip(VAR_10, VAR_1) || naxsi_can_ignore_cidr(VAR_10, VAR_1);\n  }\n\n  if (VAR_1->check_rules && VAR_0->special_scores) {\n    NX_DEBUG(VAR_8,\n             VAR_9,\n             VAR_2->connection->log,\n             0,\n             \"XX-we have custom check rules and CTX got special score :)\");\n\n    VAR_6 = VAR_1->check_rules->elts;\n    VAR_7 = VAR_0->special_scores->elts;\n    for (VAR_4 = 0; VAR_4 < VAR_0->special_scores->nelts; VAR_4++)\n      for (VAR_3 = 0; VAR_3 < VAR_1->check_rules->nelts; VAR_3++) {\n        NX_DEBUG(VAR_8,\n                 VAR_9,\n                 VAR_2->connection->log,\n                 0,\n                 \"XX- rule says :(%s:%d) vs current context:(%s:%d) (flag=%d)\",\n                 VAR_6[VAR_3].sc_tag.data,\n                 VAR_6[VAR_3].sc_score,\n                 VAR_7[VAR_4].sc_tag->data,\n                 VAR_7[VAR_4].sc_score,\n                 VAR_6[VAR_3].cmp);\n\n        if (!ngx_strcmp(VAR_7[VAR_4].sc_tag->data, VAR_6[VAR_3].sc_tag.data)) {\n          NX_DEBUG(VAR_8,\n                   VAR_9,\n                   VAR_2->connection->log,\n                   0,\n                   \"XX- rule says :(%s:%d) vs current context:(%s:%d) (flag=%d)\",\n                   VAR_6[VAR_3].sc_tag.data,\n                   VAR_6[VAR_3].sc_score,\n                   VAR_7[VAR_4].sc_tag->data,\n                   VAR_7[VAR_4].sc_score,\n                   VAR_6[VAR_3].cmp);\n\n          VAR_5 = 0;\n          /* COMMENT_0 */\n          switch (VAR_6[VAR_3].cmp) {\n            case VAR_12:\n              VAR_5 = VAR_7[VAR_4].sc_score > VAR_6[VAR_3].sc_score ? 1 : 0;\n              break;\n            case VAR_13:\n              VAR_5 = VAR_7[VAR_4].sc_score >= VAR_6[VAR_3].sc_score ? 1 : 0;\n              break;\n            case VAR_14:\n              VAR_5 = VAR_7[VAR_4].sc_score < VAR_6[VAR_3].sc_score ? 1 : 0;\n              break;\n            case VAR_15:\n              VAR_5 = VAR_7[VAR_4].sc_score <= VAR_6[VAR_3].sc_score ? 1 : 0;\n              break;\n          }\n          if (VAR_5) {\n            NX_DEBUG(VAR_8,\n                     VAR_9,\n                     VAR_2->connection->log,\n                     0,\n                     \"XX- custom score rule triggered ..\");\n            if (VAR_6[VAR_3].block) {\n              VAR_0->block = 1;\n            }\n            if (VAR_6[VAR_3].drop) {\n              VAR_0->drop = 1;\n            }\n            if (VAR_6[VAR_3].allow) {\n              VAR_0->allow = 1;\n            }\n            if (VAR_6[VAR_3].log) {\n              VAR_0->log = 1;\n            }\n          }\n        }\n      }\n  }\n  if (VAR_0->ignore) {\n    VAR_0->block = 0;\n    VAR_0->drop  = 0;\n  }\n}",
  "func_graph_path": "wargio/naxsi/1b712526ed3314dd6be7e8b0259eabda63c19537/naxsi_runtime.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -11,36 +11,6 @@\n   NX_DEBUG(_debug_custom_score, NGX_LOG_DEBUG_HTTP, r->connection->log, 0, \"XX-custom check rules\");\n \n   if (!ctx->ignore && (cf->ignore_ips || cf->ignore_cidrs)) {\n-#if (NGX_HTTP_X_FORWARDED_FOR)\n-#if (nginx_version < 1023000)\n-    ngx_table_elt_t** h;\n-    if (r->headers_in.x_forwarded_for.nelts >= 1) {\n-      h = r->headers_in.x_forwarded_for.elts;\n-      NX_DEBUG(_debug_whitelist_ignore,\n-               NGX_LOG_DEBUG_HTTP,\n-               r->connection->log,\n-               0,\n-               \"XX- lookup ignore X-Forwarded-For: %V\",\n-               h[0]->value);\n-      ngx_str_t* ip = &h[0]->value;\n-      ctx->ignore   = naxsi_can_ignore_ip(ip, cf) || naxsi_can_ignore_cidr(ip, cf);\n-    } else\n-#else\n-    ngx_table_elt_t* xff;\n-    if (r->headers_in.x_forwarded_for != NULL) {\n-      xff = r->headers_in.x_forwarded_for;\n-      NX_DEBUG(_debug_whitelist_ignore,\n-               NGX_LOG_DEBUG_HTTP,\n-               r->connection->log,\n-               0,\n-               \"XX- lookup ignore X-Forwarded-For: %V\",\n-               xff->value);\n-      ngx_str_t* ip = &xff->value;\n-      ctx->ignore   = naxsi_can_ignore_ip(ip, cf) || naxsi_can_ignore_cidr(ip, cf);\n-    } else\n-#endif\n-#endif\n-    {\n       ngx_str_t* ip = &r->connection->addr_text;\n       NX_DEBUG(_debug_whitelist_ignore,\n                NGX_LOG_DEBUG_HTTP,\n@@ -49,7 +19,6 @@\n                \"XX- lookup ignore client ip: %V\",\n                ip);\n       ctx->ignore = naxsi_can_ignore_ip(ip, cf) || naxsi_can_ignore_cidr(ip, cf);\n-    }\n   }\n \n   if (cf->check_rules && ctx->special_scores) {",
  "diff_line_info": {
    "deleted_lines": [
      "#if (NGX_HTTP_X_FORWARDED_FOR)",
      "#if (nginx_version < 1023000)",
      "    ngx_table_elt_t** h;",
      "    if (r->headers_in.x_forwarded_for.nelts >= 1) {",
      "      h = r->headers_in.x_forwarded_for.elts;",
      "      NX_DEBUG(_debug_whitelist_ignore,",
      "               NGX_LOG_DEBUG_HTTP,",
      "               r->connection->log,",
      "               0,",
      "               \"XX- lookup ignore X-Forwarded-For: %V\",",
      "               h[0]->value);",
      "      ngx_str_t* ip = &h[0]->value;",
      "      ctx->ignore   = naxsi_can_ignore_ip(ip, cf) || naxsi_can_ignore_cidr(ip, cf);",
      "    } else",
      "#else",
      "    ngx_table_elt_t* xff;",
      "    if (r->headers_in.x_forwarded_for != NULL) {",
      "      xff = r->headers_in.x_forwarded_for;",
      "      NX_DEBUG(_debug_whitelist_ignore,",
      "               NGX_LOG_DEBUG_HTTP,",
      "               r->connection->log,",
      "               0,",
      "               \"XX- lookup ignore X-Forwarded-For: %V\",",
      "               xff->value);",
      "      ngx_str_t* ip = &xff->value;",
      "      ctx->ignore   = naxsi_can_ignore_ip(ip, cf) || naxsi_can_ignore_cidr(ip, cf);",
      "    } else",
      "#endif",
      "#endif",
      "    {",
      "    }"
    ],
    "added_lines": []
  },
  "is_vul": true,
  "pr_url": "https://github.com/wargio/naxsi/pull/103",
  "description": {
    "pr_info": {
      "title": "Remove X-Forwarded-For header special processing",
      "number": 103
    },
    "comment": [
      "Hi\r\n\r\nThe special handling of X-Forwarded-For in runtime.c is a security hole and VERY DANGEROUS.\r\n\r\nIf the ngx_http_realip_module module configuration is enabled, the NGINX  $remote_addr variable is replaced with X-Forwarded-For if (and only if) the IP packet came from any trusted host in set_real_ip_from.\r\nIf the IP packet arrived from any other hosts or the ngx_http_realip_module module is not enabled, processing of the X-Forwarded-For header is ignored.\r\n\r\nHandling of the X-Forwarded-For header must be completely transparent to NAXSI",
      "i think the issue should be solved by checking the actual trusted list of IPs.\r\nif you have 3 reverse proxy then you should be able to know which IPs it should be in the headers and block bad requests.\r\nThe original feature has always been problematic, and i do agree on the issue you are raising.",
      "This problem does not exist in NGINX\r\nIt handles everything correctly\r\n\r\nBut NAXSI in its current implementation additionally tries to check the X-Forwarded-For header itself and, regardless of the settings of trusted hosts, passes requests if the header contains a value from IgnoreCIDR / IgnoreIP.\r\n\r\nFor example, in our organization, internal addresses are not checked by NAXSI. Specified IgnoreCIDR 192.168.0.0/16, 172.16.0.0/16\r\nBut now **any packet from any host** with X-Forfarded-For: 192.168.1.1 will be passed by NAXSI",
      "Probably i'm still stuck with issues that afflicted very old versions of nginx.",
      "I have made a special release due this security bug. i have requested a CVE at your name :) @lubomudr  \r\n\r\nhttps://github.com/wargio/naxsi/security/advisories/GHSA-7qjc-q4j9-pc8x",
      "Thank you\r\nI just haven't figured out what it is yet ;-)",
      "https://en.wikipedia.org/wiki/Common_Vulnerabilities_and_Exposures\r\n"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 1.0"
}