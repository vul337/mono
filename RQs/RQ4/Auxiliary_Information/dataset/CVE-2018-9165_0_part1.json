{
  "cve_id": "CVE-2018-9165",
  "cwe_ids": [
    "CWE-476"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "libming",
  "commit_msg": "Fix null pointer dereference in getName/getString\n\nWhenever getString or getName are called with an act such that act->p.String\nis a NULL pointer, a NULL pointer dereference might happen\n(strlen(act->p.string) is called).\n\nIn this commit we add checks at the beginning of the PUSH_STRING block so\nthat a warning is displayed and an empty string is returned in this case.\n\nThis patch fixes #121.",
  "commit_hash": "358abc21a7cb9286288ab0812231da39e31144bb",
  "git_url": "https://github.com/libming/libming/commit/358abc21a7cb9286288ab0812231da39e31144bb",
  "file_path": "util/decompile.c",
  "func_name": "getString",
  "func_before": "static char *\ngetString(struct SWF_ACTIONPUSHPARAM *act)\n{\n\tchar *t;\n#ifdef DEBUG\n\tprintf(\"*getString* type=%d\\n\",act->Type);\n#endif\n\tswitch( act->Type ) \n\t{\n\tcase PUSH_STRING: \n\t\tt=malloc(strlen(act->p.String)+3); /* 2 \"'\"s and a NULL */\n\t\tstrcpy(t,\"'\");\n\t\tstrcat(t,act->p.String);\n\t\tstrcat(t,\"'\");\n\t\treturn t;\n\tcase PUSH_NULL: /* NULL */\n\t\treturn \"null\";\n\tcase PUSH_UNDEF: /* Undefined */\n\t\treturn \"undefined\";\n\tcase PUSH_REGISTER: /* REGISTER */\n\t\tif( regs[act->p.RegisterNumber] &&\n\t\t    regs[act->p.RegisterNumber]->Type != 4 &&\n\t\t    regs[act->p.RegisterNumber]->Type != 7 )\n\t\t{\n\t\t\treturn getName(regs[act->p.RegisterNumber]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tt=malloc(4); /* Rdd */\n\t\t\tsprintf(t,\"R%d\", act->p.RegisterNumber );\n\t\t\treturn t;\n\t\t}\n\tcase PUSH_BOOLEAN: /* BOOLEAN */\n\t\tif( act->p.Boolean )\n\t\t\treturn \"true\";\n\t\telse\n\t\t\treturn \"false\";\n\tcase PUSH_DOUBLE: /* DOUBLE */\n\t\tt=malloc(10); /* big enough? */\n\t\tsprintf(t,\"%g\", act->p.Double );\n\t\treturn t;\n\tcase PUSH_INT: /* INTEGER */\n\t\tt=malloc(10); /* 32-bit decimal */\n\t\tsprintf(t,\"%ld\", act->p.Integer );\n\t\treturn t;\n\tcase PUSH_CONSTANT: /* CONSTANT8 */\n\t\tif (act->p.Constant8 > poolcounter)\n\t\t{\n\t\t        SWF_warn(\"WARNING: retrieving constants not present in the pool.\\n\");\n\t\t        break;\n\t\t}\n\t\tt=malloc(strlenext(pool[act->p.Constant8])+3); /* 2 \"'\"s and a NULL */\n\t\tstrcpy(t,\"'\");\n\t\tstrcatext(t,pool[act->p.Constant8]);\n\t\tstrcat(t,\"'\");\n\t\treturn t;\n\tcase PUSH_CONSTANT16: /* CONSTANT16 */\n\t\tif (act->p.Constant16 > poolcounter)\n\t\t{\n\t\t        SWF_warn(\"WARNING: retrieving constants not present in the pool.\\n\");\n\t\t        break;\n\t\t}\n\t\tt=malloc(strlenext(pool[act->p.Constant16])+3); /* 2 '\\\"'s and a NULL */\n\t\tstrcpy(t,\"'\");\n\t\tstrcatext(t,pool[act->p.Constant16]);\n\t\tstrcat(t,\"'\");\n\t\treturn t;\n\n\tcase 12:\n\tcase 11: /* INCREMENTED or DECREMENTED VARIABLE */\n\tcase PUSH_VARIABLE: /* VARIABLE */\n\t\treturn act->p.String;\n\tdefault: \n\t\tfprintf (stderr,\"  Can't get string for type: %d\\n\", act->Type);\n\t\tbreak;\n\t}\n\n\tt = malloc(sizeof(char));\n\tstrcpyext(t,\"\");\n\n\treturn t;\n}",
  "abstract_func_before": "static char *\ngetString(struct SWF_ACTIONPUSHPARAM *VAR_0)\n{\n\tchar *VAR_1;\n#ifdef VAR_2\n\tprintf(\"*getString* type=%d\\n\",VAR_0->Type);\n#endif\n\tswitch( VAR_0->Type ) \n\t{\n\tcase VAR_3: \n\t\tVAR_1=malloc(strlen(VAR_0->p.String)+3); /* COMMENT_0 */\n\t\tstrcpy(VAR_1,\"'\");\n\t\tstrcat(VAR_1,VAR_0->p.String);\n\t\tstrcat(VAR_1,\"'\");\n\t\treturn VAR_1;\n\tcase VAR_4: /* COMMENT_1 */\n\t\treturn \"null\";\n\tcase VAR_5: /* COMMENT_2 */\n\t\treturn \"undefined\";\n\tcase VAR_6: /* COMMENT_3 */\n\t\tif( VAR_7[VAR_0->p.RegisterNumber] &&\n\t\t    VAR_7[VAR_0->p.RegisterNumber]->Type != 4 &&\n\t\t    VAR_7[VAR_0->p.RegisterNumber]->Type != 7 )\n\t\t{\n\t\t\treturn getName(VAR_7[VAR_0->p.RegisterNumber]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tVAR_1=malloc(4); /* COMMENT_4 */\n\t\t\tsprintf(VAR_1,\"R%d\", VAR_0->p.RegisterNumber );\n\t\t\treturn VAR_1;\n\t\t}\n\tcase VAR_8: /* COMMENT_5 */\n\t\tif( VAR_0->p.Boolean )\n\t\t\treturn \"true\";\n\t\telse\n\t\t\treturn \"false\";\n\tcase VAR_9: /* COMMENT_6 */\n\t\tVAR_1=malloc(10); /* COMMENT_7 */\n\t\tsprintf(VAR_1,\"%g\", VAR_0->p.Double );\n\t\treturn VAR_1;\n\tcase VAR_10: /* COMMENT_8 */\n\t\tVAR_1=malloc(10); /* COMMENT_9 */\n\t\tsprintf(VAR_1,\"%ld\", VAR_0->p.Integer );\n\t\treturn VAR_1;\n\tcase VAR_11: /* COMMENT_10 */\n\t\tif (VAR_0->p.Constant8 > VAR_12)\n\t\t{\n\t\t        SWF_warn(\"WARNING: retrieving constants not present in the pool.\\n\");\n\t\t        break;\n\t\t}\n\t\tVAR_1=malloc(strlenext(VAR_13[VAR_0->p.Constant8])+3); /* COMMENT_0 */\n\t\tstrcpy(VAR_1,\"'\");\n\t\tstrcatext(VAR_1,VAR_13[VAR_0->p.Constant8]);\n\t\tstrcat(VAR_1,\"'\");\n\t\treturn VAR_1;\n\tcase VAR_14: /* COMMENT_11 */\n\t\tif (VAR_0->p.Constant16 > VAR_12)\n\t\t{\n\t\t        SWF_warn(\"WARNING: retrieving constants not present in the pool.\\n\");\n\t\t        break;\n\t\t}\n\t\tVAR_1=malloc(strlenext(VAR_13[VAR_0->p.Constant16])+3); /* COMMENT_12 */\n\t\tstrcpy(VAR_1,\"'\");\n\t\tstrcatext(VAR_1,VAR_13[VAR_0->p.Constant16]);\n\t\tstrcat(VAR_1,\"'\");\n\t\treturn VAR_1;\n\n\tcase 12:\n\tcase 11: /* COMMENT_13 */\n\tcase VAR_15: /* COMMENT_14 */\n\t\treturn VAR_0->p.String;\n\tdefault: \n\t\tfprintf (VAR_16,\"  Can't get string for type: %d\\n\", VAR_0->Type);\n\t\tbreak;\n\t}\n\n\tVAR_1 = malloc(sizeof(char));\n\tstrcpyext(VAR_1,\"\");\n\n\treturn VAR_1;\n}",
  "func_graph_path_before": "libming/358abc21a7cb9286288ab0812231da39e31144bb/decompile.c/vul/before/1.json",
  "func": "static char *\ngetString(struct SWF_ACTIONPUSHPARAM *act)\n{\n\tchar *t;\n#ifdef DEBUG\n\tprintf(\"*getString* type=%d\\n\",act->Type);\n#endif\n\tswitch( act->Type ) \n\t{\n\tcase PUSH_STRING: \n\t\tif (!act->p.String) /* Not a NULL string */\n\t\t{\n\t\t        SWF_warn(\"WARNING: Call to getString with NULL string.\\n\");\n\t\t        break;\n\t\t}\n\t\tt=malloc(strlen(act->p.String)+3); /* 2 \"'\"s and a NULL */\n\t\tstrcpy(t,\"'\");\n\t\tstrcat(t,act->p.String);\n\t\tstrcat(t,\"'\");\n\t\treturn t;\n\tcase PUSH_NULL: /* NULL */\n\t\treturn \"null\";\n\tcase PUSH_UNDEF: /* Undefined */\n\t\treturn \"undefined\";\n\tcase PUSH_REGISTER: /* REGISTER */\n\t\tif( regs[act->p.RegisterNumber] &&\n\t\t    regs[act->p.RegisterNumber]->Type != 4 &&\n\t\t    regs[act->p.RegisterNumber]->Type != 7 )\n\t\t{\n\t\t\treturn getName(regs[act->p.RegisterNumber]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tt=malloc(4); /* Rdd */\n\t\t\tsprintf(t,\"R%d\", act->p.RegisterNumber );\n\t\t\treturn t;\n\t\t}\n\tcase PUSH_BOOLEAN: /* BOOLEAN */\n\t\tif( act->p.Boolean )\n\t\t\treturn \"true\";\n\t\telse\n\t\t\treturn \"false\";\n\tcase PUSH_DOUBLE: /* DOUBLE */\n\t\tt=malloc(10); /* big enough? */\n\t\tsprintf(t,\"%g\", act->p.Double );\n\t\treturn t;\n\tcase PUSH_INT: /* INTEGER */\n\t\tt=malloc(10); /* 32-bit decimal */\n\t\tsprintf(t,\"%ld\", act->p.Integer );\n\t\treturn t;\n\tcase PUSH_CONSTANT: /* CONSTANT8 */\n\t\tif (act->p.Constant8 > poolcounter)\n\t\t{\n\t\t        SWF_warn(\"WARNING: retrieving constants not present in the pool.\\n\");\n\t\t        break;\n\t\t}\n\t\tt=malloc(strlenext(pool[act->p.Constant8])+3); /* 2 \"'\"s and a NULL */\n\t\tstrcpy(t,\"'\");\n\t\tstrcatext(t,pool[act->p.Constant8]);\n\t\tstrcat(t,\"'\");\n\t\treturn t;\n\tcase PUSH_CONSTANT16: /* CONSTANT16 */\n\t\tif (act->p.Constant16 > poolcounter)\n\t\t{\n\t\t        SWF_warn(\"WARNING: retrieving constants not present in the pool.\\n\");\n\t\t        break;\n\t\t}\n\t\tt=malloc(strlenext(pool[act->p.Constant16])+3); /* 2 '\\\"'s and a NULL */\n\t\tstrcpy(t,\"'\");\n\t\tstrcatext(t,pool[act->p.Constant16]);\n\t\tstrcat(t,\"'\");\n\t\treturn t;\n\n\tcase 12:\n\tcase 11: /* INCREMENTED or DECREMENTED VARIABLE */\n\tcase PUSH_VARIABLE: /* VARIABLE */\n\t\treturn act->p.String;\n\tdefault: \n\t\tfprintf (stderr,\"  Can't get string for type: %d\\n\", act->Type);\n\t\tbreak;\n\t}\n\n\tt = malloc(sizeof(char));\n\tstrcpyext(t,\"\");\n\n\treturn t;\n}",
  "abstract_func": "static char *\ngetString(struct SWF_ACTIONPUSHPARAM *VAR_0)\n{\n\tchar *VAR_1;\n#ifdef VAR_2\n\tprintf(\"*getString* type=%d\\n\",VAR_0->Type);\n#endif\n\tswitch( VAR_0->Type ) \n\t{\n\tcase VAR_3: \n\t\tif (!VAR_0->p.String) /* COMMENT_0 */\n\t\t{\n\t\t        SWF_warn(\"WARNING: Call to getString with NULL string.\\n\");\n\t\t        break;\n\t\t}\n\t\tVAR_1=malloc(strlen(VAR_0->p.String)+3); /* COMMENT_1 */\n\t\tstrcpy(VAR_1,\"'\");\n\t\tstrcat(VAR_1,VAR_0->p.String);\n\t\tstrcat(VAR_1,\"'\");\n\t\treturn VAR_1;\n\tcase VAR_4: /* COMMENT_2 */\n\t\treturn \"null\";\n\tcase VAR_5: /* COMMENT_3 */\n\t\treturn \"undefined\";\n\tcase VAR_6: /* COMMENT_4 */\n\t\tif( VAR_7[VAR_0->p.RegisterNumber] &&\n\t\t    VAR_7[VAR_0->p.RegisterNumber]->Type != 4 &&\n\t\t    VAR_7[VAR_0->p.RegisterNumber]->Type != 7 )\n\t\t{\n\t\t\treturn getName(VAR_7[VAR_0->p.RegisterNumber]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tVAR_1=malloc(4); /* COMMENT_5 */\n\t\t\tsprintf(VAR_1,\"R%d\", VAR_0->p.RegisterNumber );\n\t\t\treturn VAR_1;\n\t\t}\n\tcase VAR_8: /* COMMENT_6 */\n\t\tif( VAR_0->p.Boolean )\n\t\t\treturn \"true\";\n\t\telse\n\t\t\treturn \"false\";\n\tcase VAR_9: /* COMMENT_7 */\n\t\tVAR_1=malloc(10); /* COMMENT_8 */\n\t\tsprintf(VAR_1,\"%g\", VAR_0->p.Double );\n\t\treturn VAR_1;\n\tcase VAR_10: /* COMMENT_9 */\n\t\tVAR_1=malloc(10); /* COMMENT_10 */\n\t\tsprintf(VAR_1,\"%ld\", VAR_0->p.Integer );\n\t\treturn VAR_1;\n\tcase VAR_11: /* COMMENT_11 */\n\t\tif (VAR_0->p.Constant8 > VAR_12)\n\t\t{\n\t\t        SWF_warn(\"WARNING: retrieving constants not present in the pool.\\n\");\n\t\t        break;\n\t\t}\n\t\tVAR_1=malloc(strlenext(VAR_13[VAR_0->p.Constant8])+3); /* COMMENT_1 */\n\t\tstrcpy(VAR_1,\"'\");\n\t\tstrcatext(VAR_1,VAR_13[VAR_0->p.Constant8]);\n\t\tstrcat(VAR_1,\"'\");\n\t\treturn VAR_1;\n\tcase VAR_14: /* COMMENT_12 */\n\t\tif (VAR_0->p.Constant16 > VAR_12)\n\t\t{\n\t\t        SWF_warn(\"WARNING: retrieving constants not present in the pool.\\n\");\n\t\t        break;\n\t\t}\n\t\tVAR_1=malloc(strlenext(VAR_13[VAR_0->p.Constant16])+3); /* COMMENT_13 */\n\t\tstrcpy(VAR_1,\"'\");\n\t\tstrcatext(VAR_1,VAR_13[VAR_0->p.Constant16]);\n\t\tstrcat(VAR_1,\"'\");\n\t\treturn VAR_1;\n\n\tcase 12:\n\tcase 11: /* COMMENT_14 */\n\tcase VAR_15: /* COMMENT_15 */\n\t\treturn VAR_0->p.String;\n\tdefault: \n\t\tfprintf (VAR_16,\"  Can't get string for type: %d\\n\", VAR_0->Type);\n\t\tbreak;\n\t}\n\n\tVAR_1 = malloc(sizeof(char));\n\tstrcpyext(VAR_1,\"\");\n\n\treturn VAR_1;\n}",
  "func_graph_path": "libming/358abc21a7cb9286288ab0812231da39e31144bb/decompile.c/vul/after/1.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -8,6 +8,11 @@\n \tswitch( act->Type ) \n \t{\n \tcase PUSH_STRING: \n+\t\tif (!act->p.String) /* Not a NULL string */\n+\t\t{\n+\t\t        SWF_warn(\"WARNING: Call to getString with NULL string.\\n\");\n+\t\t        break;\n+\t\t}\n \t\tt=malloc(strlen(act->p.String)+3); /* 2 \"'\"s and a NULL */\n \t\tstrcpy(t,\"'\");\n \t\tstrcat(t,act->p.String);",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "\t\tif (!act->p.String) /* Not a NULL string */",
      "\t\t{",
      "\t\t        SWF_warn(\"WARNING: Call to getString with NULL string.\\n\");",
      "\t\t        break;",
      "\t\t}"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/libming/libming/pull/127",
  "description": {
    "pr_info": {
      "title": "Fix null pointer dereference in getName/getString",
      "number": 127
    },
    "comment": [
      "Whenever `getString` or `getName` are called with an act such that `act->p.String` is a NULL pointer, a NULL pointer dereference might happen (`strlen(act->p.string)` is called).\r\n\r\nIn this commit we add checks at the beginning of the `PUSH_STRING` block so that a warning is displayed and an empty string is returned in this case.\r\n\r\nThis PR (partially) fixes #121. In fact I am still working on another patch which would involve patching `pushdup` to do deep copies instead of shallow copies, but before I will have to analyze the specification in order to be able to clearly state which interpretation is the right one.",
      "I have just added another commit addressing #116.",
      "snprintf returns number of characters that would have been printed\nout _excluding_ the terminating NULL so I think you'll want to\nincrement the return of it by 1 before assigning to \"needed_length\"\n",
      "Thanks Sandro for the feedback. I have pushed an updated patch which also handles the case where `snprintf` would return negative `needed_length` (error code). Not sure in which circumstances this might happen, but better check it.",
      "I have just pushed the changes to `pushdup`. See commit message for more information. This PR now fully adresses #121 and #116.",
      "Oh well, wait, looks like something is still going wrong.\r\n\r\nI'm going to push an updated version of this PR soon.",
      "It should be fine now. There is a fairly high amount of changes, so even if I already tested everything, a careful review would be nice.\r\n\r\nThanks !",
      "Any chance you could look at re-introducing the now-broken\n\"make gen\" rule under test/ directory ?\n\nThe rule is still present in test/Makefile.inc but that Makefile\nis not included by test/Makefile.am. The \"make gen\" rule is\nreferenced by test/README and Makefile.inc itself has some\ninteresting comments/documentation.\n\nI'm thinking it could be useful to test all the changes you\nare doing in the decompiler.\n",
      "While I indeed think writing unit tests would be a very important step towards more stability in libming, this is most likely not something that I can do as part of my Debian LTS duties, and I don't have much spare time currently...\r\n\r\nIs there any bug report on this build system issue ? If I can get a precise description of the problem, I'll maybe check if can do something.",
      "But anyways, this is not something I'd do in this PR.",
      "Ok thanks, tests postponed",
      "Thanks !"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 1.0"
}