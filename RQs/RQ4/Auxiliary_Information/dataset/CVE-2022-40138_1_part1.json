{
  "cve_id": "CVE-2022-40138",
  "cwe_ids": [
    "CWE-681"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
  "cvss_is_v3": true,
  "repo_name": "facebook/hermes",
  "commit_msg": "Re-sync with internal repository (#822)\n\nCo-authored-by: Facebook Community Bot <6422482+facebook-github-bot@users.noreply.github.com>",
  "commit_hash": "6aa825e480d48127b480b08d13adf70033237097",
  "git_url": "https://github.com/facebook/hermes/commit/6aa825e480d48127b480b08d13adf70033237097",
  "file_path": "lib/BCGen/HBC/ISel.cpp",
  "func_name": "HBCISel::generateHBCResolveEnvironment",
  "func_before": "void HBCISel::generateHBCResolveEnvironment(\n    HBCResolveEnvironment *Inst,\n    BasicBlock *next) {\n  // We statically determine the relative depth delta of the current scope\n  // and the scope that the variable belongs to. Such delta is used as\n  // the operand to get_scope instruction.\n  VariableScope *instScope = Inst->getScope();\n  Optional<int32_t> instScopeDepth = scopeAnalysis_.getScopeDepth(instScope);\n  Optional<int32_t> curScopeDepth =\n      scopeAnalysis_.getScopeDepth(F_->getFunctionScope());\n  if (!instScopeDepth || !curScopeDepth) {\n    // the function did not have any CreateFunctionInst, this function is dead.\n    emitUnreachableIfDebug();\n    return;\n  }\n  assert(\n      curScopeDepth && curScopeDepth.getValue() >= instScopeDepth.getValue() &&\n      \"Cannot access variables in inner scopes\");\n  int32_t delta = curScopeDepth.getValue() - instScopeDepth.getValue();\n  assert(delta > 0 && \"HBCResolveEnvironment for current scope\");\n  BCFGen_->emitGetEnvironment(encodeValue(Inst), delta - 1);\n}",
  "abstract_func_before": "void HBCISel::generateHBCResolveEnvironment(\n    HBCResolveEnvironment *VAR_0,\n    BasicBlock *VAR_1) {\n  /* COMMENT_0 */\n  /* COMMENT_1 */\n  /* COMMENT_2 */\n  VariableScope *VAR_2 = VAR_0->getScope();\n  Optional<int32_t> VAR_3 = VAR_4.getScopeDepth(VAR_2);\n  Optional<int32_t> VAR_5 =\n      VAR_4.getScopeDepth(VAR_6->getFunctionScope());\n  if (!VAR_3 || !VAR_5) {\n    /* COMMENT_3 */\n    emitUnreachableIfDebug();\n    return;\n  }\n  assert(\n      VAR_5 && VAR_5.getValue() >= VAR_3.getValue() &&\n      \"Cannot access variables in inner scopes\");\n  int32_t VAR_7 = VAR_5.getValue() - VAR_3.getValue();\n  assert(VAR_7 > 0 && \"HBCResolveEnvironment for current scope\");\n  VAR_8->emitGetEnvironment(encodeValue(VAR_0), VAR_7 - 1);\n}",
  "func_graph_path_before": "facebook/hermes/6aa825e480d48127b480b08d13adf70033237097/ISel.cpp/vul/before/0.json",
  "func": "void HBCISel::generateHBCResolveEnvironment(\n    HBCResolveEnvironment *Inst,\n    BasicBlock *next) {\n  // We statically determine the relative depth delta of the current scope\n  // and the scope that the variable belongs to. Such delta is used as\n  // the operand to get_scope instruction.\n  VariableScope *instScope = Inst->getScope();\n  Optional<int32_t> instScopeDepth = scopeAnalysis_.getScopeDepth(instScope);\n  Optional<int32_t> curScopeDepth =\n      scopeAnalysis_.getScopeDepth(F_->getFunctionScope());\n  if (!instScopeDepth || !curScopeDepth) {\n    // the function did not have any CreateFunctionInst, this function is dead.\n    emitUnreachableIfDebug();\n    return;\n  }\n  assert(\n      curScopeDepth && curScopeDepth.getValue() >= instScopeDepth.getValue() &&\n      \"Cannot access variables in inner scopes\");\n  int32_t delta = curScopeDepth.getValue() - instScopeDepth.getValue();\n  assert(delta > 0 && \"HBCResolveEnvironment for current scope\");\n  if (std::numeric_limits<uint8_t>::max() < delta) {\n    F_->getContext().getSourceErrorManager().error(\n        Inst->getLocation(), \"Variable environment is out-of-reach\");\n  }\n  BCFGen_->emitGetEnvironment(encodeValue(Inst), delta - 1);\n}",
  "abstract_func": "void HBCISel::generateHBCResolveEnvironment(\n    HBCResolveEnvironment *VAR_0,\n    BasicBlock *VAR_1) {\n  /* COMMENT_0 */\n  /* COMMENT_1 */\n  /* COMMENT_2 */\n  VariableScope *VAR_2 = VAR_0->getScope();\n  Optional<int32_t> VAR_3 = VAR_4.getScopeDepth(VAR_2);\n  Optional<int32_t> VAR_5 =\n      VAR_4.getScopeDepth(VAR_6->getFunctionScope());\n  if (!VAR_3 || !VAR_5) {\n    /* COMMENT_3 */\n    emitUnreachableIfDebug();\n    return;\n  }\n  assert(\n      VAR_5 && VAR_5.getValue() >= VAR_3.getValue() &&\n      \"Cannot access variables in inner scopes\");\n  int32_t VAR_7 = VAR_5.getValue() - VAR_3.getValue();\n  assert(VAR_7 > 0 && \"HBCResolveEnvironment for current scope\");\n  if (std::numeric_limits<uint8_t>::max() < VAR_7) {\n    VAR_6->getContext().getSourceErrorManager().error(\n        VAR_0->getLocation(), \"Variable environment is out-of-reach\");\n  }\n  VAR_8->emitGetEnvironment(encodeValue(VAR_0), VAR_7 - 1);\n}",
  "func_graph_path": "facebook/hermes/6aa825e480d48127b480b08d13adf70033237097/ISel.cpp/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -18,5 +18,9 @@\n       \"Cannot access variables in inner scopes\");\n   int32_t delta = curScopeDepth.getValue() - instScopeDepth.getValue();\n   assert(delta > 0 && \"HBCResolveEnvironment for current scope\");\n+  if (std::numeric_limits<uint8_t>::max() < delta) {\n+    F_->getContext().getSourceErrorManager().error(\n+        Inst->getLocation(), \"Variable environment is out-of-reach\");\n+  }\n   BCFGen_->emitGetEnvironment(encodeValue(Inst), delta - 1);\n }",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "  if (std::numeric_limits<uint8_t>::max() < delta) {",
      "    F_->getContext().getSourceErrorManager().error(",
      "        Inst->getLocation(), \"Variable environment is out-of-reach\");",
      "  }"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/facebook/hermes/pull/822",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/facebook/hermes/pull/822: 403 Client Error: Forbidden for url: https://api.github.com/repos/facebook/hermes/pulls/822",
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.8,
  "Bug Filter Response": "**Final Classification:** Defect Remediation & Feature Upgrades; **Confidence:** 0.8"
}