{
  "cve_id": "CVE-2021-30045",
  "cwe_ids": [
    "CWE-120"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "SerenityOS/serenity",
  "commit_msg": "LibArchive: Make bounds checks stricter in the Zip parser\n\nWe now also check we have enough space in the incoming buffer for the\nvarious signatures and optional (length specified) fields. This helps\nprevents a possible heap overflow read.",
  "commit_hash": "4317db7498eaa5a37068052bb0310fbc6a5f78e4",
  "git_url": "https://github.com/SerenityOS/serenity/commit/4317db7498eaa5a37068052bb0310fbc6a5f78e4",
  "file_path": "Userland/Libraries/LibArchive/Zip.h",
  "func_name": "read",
  "func_before": "bool read(ReadonlyBytes buffer)\n    {\n        auto fields_size = sizeof(LocalFileHeader) - (sizeof(u8*) * 3);\n        if (buffer.size() < fields_size)\n            return false;\n        if (memcmp(buffer.data(), local_file_header_signature, sizeof(local_file_header_signature)) != 0)\n            return false;\n        memcpy(reinterpret_cast<void*>(&minimum_version), buffer.data() + sizeof(local_file_header_signature), fields_size);\n        name = buffer.data() + sizeof(local_file_header_signature) + fields_size;\n        extra_data = name + name_length;\n        compressed_data = extra_data + extra_data_length;\n        return true;\n    }",
  "abstract_func_before": "bool read(ReadonlyBytes VAR_0)\n    {\n        auto fields_sizeVAR_1 = sizeof(VAR_2) - (sizeof(u8*) * 3);\n        if (VAR_0.size() < fields_size)\n            return false;\n        if (memcmp(VAR_0.data(), VAR_3, sizeof(VAR_3)) != 0)\n            return false;\n        memcpy(VAR_4<VAR_5*>(&VAR_6), VAR_0.data() + sizeof(VAR_3), fields_size);\n        VAR_7 = VAR_0.data() + sizeof(VAR_3) + fields_size;\n        VAR_8 = VAR_7 + VAR_9;\n        VAR_10 = VAR_8 + VAR_11;\n        return true;\n    }",
  "func_graph_path_before": "SerenityOS/serenity/4317db7498eaa5a37068052bb0310fbc6a5f78e4/Zip.h/vul/before/0.json",
  "func": "bool read(ReadonlyBytes buffer)\n    {\n        auto fields_size = sizeof(LocalFileHeader) - (sizeof(u8*) * 3);\n        if (buffer.size() < sizeof(local_file_header_signature) + fields_size)\n            return false;\n        if (memcmp(buffer.data(), local_file_header_signature, sizeof(local_file_header_signature)) != 0)\n            return false;\n        memcpy(reinterpret_cast<void*>(&minimum_version), buffer.data() + sizeof(local_file_header_signature), fields_size);\n        if (buffer.size() < sizeof(end_of_central_directory_signature) + fields_size + name_length + extra_data_length + compressed_size)\n            return false;\n        name = buffer.data() + sizeof(local_file_header_signature) + fields_size;\n        extra_data = name + name_length;\n        compressed_data = extra_data + extra_data_length;\n        return true;\n    }",
  "abstract_func": "bool read(ReadonlyBytes VAR_0)\n    {\n        auto fields_sizeVAR_1 = sizeof(VAR_2) - (sizeof(u8*) * 3);\n        if (VAR_0.size() < sizeof(VAR_3) + fields_size)\n            return false;\n        if (memcmp(VAR_0.data(), VAR_3, sizeof(VAR_3)) != 0)\n            return false;\n        memcpy(VAR_4<VAR_5*>(&VAR_6), VAR_0.data() + sizeof(VAR_3), fields_size);\n        if (VAR_0.size() < sizeof(VAR_7) + fields_size + VAR_8 + VAR_9 + VAR_10)\n            return false;\n        VAR_11 = VAR_0.data() + sizeof(VAR_3) + fields_size;\n        VAR_12 = VAR_11 + VAR_8;\n        VAR_13 = VAR_12 + VAR_9;\n        return true;\n    }",
  "func_graph_path": "SerenityOS/serenity/4317db7498eaa5a37068052bb0310fbc6a5f78e4/Zip.h/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,11 +1,13 @@\n bool read(ReadonlyBytes buffer)\n     {\n         auto fields_size = sizeof(LocalFileHeader) - (sizeof(u8*) * 3);\n-        if (buffer.size() < fields_size)\n+        if (buffer.size() < sizeof(local_file_header_signature) + fields_size)\n             return false;\n         if (memcmp(buffer.data(), local_file_header_signature, sizeof(local_file_header_signature)) != 0)\n             return false;\n         memcpy(reinterpret_cast<void*>(&minimum_version), buffer.data() + sizeof(local_file_header_signature), fields_size);\n+        if (buffer.size() < sizeof(end_of_central_directory_signature) + fields_size + name_length + extra_data_length + compressed_size)\n+            return false;\n         name = buffer.data() + sizeof(local_file_header_signature) + fields_size;\n         extra_data = name + name_length;\n         compressed_data = extra_data + extra_data_length;",
  "diff_line_info": {
    "deleted_lines": [
      "        if (buffer.size() < fields_size)"
    ],
    "added_lines": [
      "        if (buffer.size() < sizeof(local_file_header_signature) + fields_size)",
      "        if (buffer.size() < sizeof(end_of_central_directory_signature) + fields_size + name_length + extra_data_length + compressed_size)",
      "            return false;"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/SerenityOS/serenity/pull/5977",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/SerenityOS/serenity/pull/5977: 403 Client Error: Forbidden for url: https://api.github.com/repos/SerenityOS/serenity/pulls/5977",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.95"
}