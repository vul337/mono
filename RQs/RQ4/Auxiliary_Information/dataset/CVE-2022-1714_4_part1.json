{
  "cve_id": "CVE-2022-1714",
  "cwe_ids": [
    "CWE-125"
  ],
  "cvss_vector": "AV:L/AC:L/Au:N/C:P/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "radareorg/radare2",
  "commit_msg": "Fix 4 byte oobread in msp430 disassembler ##crash\n\n* Only crashes with asan builds\n* Add missing =SN register\n* Reported by cnitlrt via huntrdev\n* BountyID: 1c22055b-b015-47a8-a57b-4982978751d0",
  "commit_hash": "3ecdbf8e21186a9c5a4d3cfa3b1e9fd27045340e",
  "git_url": "https://github.com/radareorg/radare2/commit/3ecdbf8e21186a9c5a4d3cfa3b1e9fd27045340e",
  "file_path": "libr/bin/format/elf/elf.c",
  "func_name": "init_strtab",
  "func_before": "static int init_strtab(ELFOBJ *bin) {\n\tr_return_val_if_fail (!bin->strtab, false);\n\n\tif (!bin->shdr) {\n\t\treturn false;\n\t}\n\n\tElf_(Half) shstrndx = bin->ehdr.e_shstrndx;\n\tif (shstrndx != SHN_UNDEF && !is_shidx_valid (bin, shstrndx)) {\n\t\treturn false;\n\t}\n\n\t/* sh_size must be lower than UT32_MAX and not equal to zero, to avoid bugs on malloc() */\n\tif (bin->shdr[shstrndx].sh_size > UT32_MAX) {\n\t\treturn false;\n\t}\n\tif (!bin->shdr[shstrndx].sh_size) {\n\t\treturn false;\n\t}\n\tbin->shstrtab_section = bin->strtab_section = &bin->shdr[shstrndx];\n\tbin->shstrtab_size = bin->shstrtab_section->sh_size;\n\tif (bin->shstrtab_size > bin->size) {\n\t\treturn false;\n\t}\n\tif (bin->shstrtab_section->sh_offset > bin->size) {\n\t\treturn false;\n\t}\n\tif (bin->shstrtab_section->sh_offset + bin->shstrtab_section->sh_size > bin->size) {\n\t\treturn false;\n\t}\n\n\tif (!(bin->shstrtab = calloc (1, bin->shstrtab_size + 1))) {\n\t\tr_sys_perror (\"malloc\");\n\t\tbin->shstrtab = NULL;\n\t\treturn false;\n\t}\n\tint res = r_buf_read_at (bin->b, bin->shstrtab_section->sh_offset, (ut8*)bin->shstrtab,\n\t\tbin->shstrtab_section->sh_size);\n\tif (res < 1) {\n\t\tR_LOG_ERROR (\"read (shstrtab) at 0x%\" PFMT64x, (ut64) bin->shstrtab_section->sh_offset);\n\t\tR_FREE (bin->shstrtab);\n\t\treturn false;\n\t}\n\tbin->shstrtab[bin->shstrtab_section->sh_size] = '\\0';\n\n\tsdb_num_set (bin->kv, \"elf_shstrtab.offset\", bin->shstrtab_section->sh_offset, 0);\n\tsdb_num_set (bin->kv, \"elf_shstrtab.size\", bin->shstrtab_section->sh_size, 0);\n\n\treturn true;\n}",
  "abstract_func_before": "static int init_strtab(ELFOBJ *VAR_0) {\n\tr_return_val_if_fail (!VAR_0->strtab, false);\n\n\tif (!VAR_0->shdr) {\n\t\treturn false;\n\t}\n\n\tVAR_1(Half) VAR_2 = VAR_0->ehdr.e_shstrndx;\n\tif (VAR_2 != VAR_3 && !is_shidx_valid (VAR_0, VAR_2)) {\n\t\treturn false;\n\t}\n\n\t/* COMMENT_0 */\n\tif (VAR_0->shdr[VAR_2].sh_size > VAR_4) {\n\t\treturn false;\n\t}\n\tif (!VAR_0->shdr[VAR_2].sh_size) {\n\t\treturn false;\n\t}\n\tVAR_0->shstrtab_section = VAR_0->strtab_section = &VAR_0->shdr[VAR_2];\n\tVAR_0->shstrtab_size = VAR_0->shstrtab_section->sh_size;\n\tif (VAR_0->shstrtab_size > VAR_0->size) {\n\t\treturn false;\n\t}\n\tif (VAR_0->shstrtab_section->sh_offset > VAR_0->size) {\n\t\treturn false;\n\t}\n\tif (VAR_0->shstrtab_section->sh_offset + VAR_0->shstrtab_section->sh_size > VAR_0->size) {\n\t\treturn false;\n\t}\n\n\tif (!(VAR_0->shstrtab = calloc (1, VAR_0->shstrtab_size + 1))) {\n\t\tr_sys_perror (\"malloc\");\n\t\tVAR_0->shstrtab = NULL;\n\t\treturn false;\n\t}\n\tint VAR_5 = r_buf_read_at (VAR_0->b, VAR_0->shstrtab_section->sh_offset, (ut8*)VAR_0->shstrtab,\n\t\tVAR_0->shstrtab_section->sh_size);\n\tif (VAR_5 < 1) {\n\t\tR_LOG_ERROR (\"read (shstrtab) at 0x%\" VAR_6, (ut64) VAR_0->shstrtab_section->sh_offset);\n\t\tR_FREE (VAR_0->shstrtab);\n\t\treturn false;\n\t}\n\tVAR_0->shstrtab[VAR_0->shstrtab_section->sh_size] = '\\0';\n\n\tsdb_num_set (VAR_0->kv, \"elf_shstrtab.offset\", VAR_0->shstrtab_section->sh_offset, 0);\n\tsdb_num_set (VAR_0->kv, \"elf_shstrtab.size\", VAR_0->shstrtab_section->sh_size, 0);\n\n\treturn true;\n}",
  "func_graph_path_before": "radareorg/radare2/3ecdbf8e21186a9c5a4d3cfa3b1e9fd27045340e/elf.c/vul/before/3.json",
  "func": "static int init_strtab(ELFOBJ *bin) {\n\tr_return_val_if_fail (!bin->strtab, false);\n\n\tif (!bin->shdr) {\n\t\treturn false;\n\t}\n\n\tElf_(Half) shstrndx = bin->ehdr.e_shstrndx;\n\tif (shstrndx != SHN_UNDEF && !is_shidx_valid (bin, shstrndx)) {\n\t\treturn false;\n\t}\n\n\t/* sh_size must be lower than UT32_MAX and not equal to zero, to avoid bugs on malloc() */\n\tif (bin->shdr[shstrndx].sh_size > UT32_MAX) {\n\t\treturn false;\n\t}\n\tif (!bin->shdr[shstrndx].sh_size) {\n\t\treturn false;\n\t}\n\tbin->shstrtab_section = bin->strtab_section = &bin->shdr[shstrndx];\n\tbin->shstrtab_size = bin->shstrtab_section->sh_size;\n\tif (bin->shstrtab_size > bin->size) {\n\t\treturn false;\n\t}\n\tif (bin->shstrtab_section->sh_offset > bin->size) {\n\t\treturn false;\n\t}\n\tif (bin->shstrtab_section->sh_offset + bin->shstrtab_section->sh_size > bin->size) {\n\t\treturn false;\n\t}\n\n\tif (!(bin->shstrtab = calloc (1, bin->shstrtab_size + 1))) {\n\t\tr_sys_perror (\"malloc\");\n\t\tbin->shstrtab = NULL;\n\t\treturn false;\n\t}\n\tint res = r_buf_read_at (bin->b, bin->shstrtab_section->sh_offset, (ut8*)bin->shstrtab,\n\t\tbin->shstrtab_section->sh_size);\n\tif (res < 1) {\n\t\tR_LOG_DEBUG (\"read (shstrtab) at 0x%\" PFMT64x, (ut64) bin->shstrtab_section->sh_offset);\n\t\tR_FREE (bin->shstrtab);\n\t\treturn false;\n\t}\n\tbin->shstrtab[bin->shstrtab_section->sh_size] = '\\0';\n\n\tsdb_num_set (bin->kv, \"elf_shstrtab.offset\", bin->shstrtab_section->sh_offset, 0);\n\tsdb_num_set (bin->kv, \"elf_shstrtab.size\", bin->shstrtab_section->sh_size, 0);\n\n\treturn true;\n}",
  "abstract_func": "static int init_strtab(ELFOBJ *VAR_0) {\n\tr_return_val_if_fail (!VAR_0->strtab, false);\n\n\tif (!VAR_0->shdr) {\n\t\treturn false;\n\t}\n\n\tVAR_1(Half) VAR_2 = VAR_0->ehdr.e_shstrndx;\n\tif (VAR_2 != VAR_3 && !is_shidx_valid (VAR_0, VAR_2)) {\n\t\treturn false;\n\t}\n\n\t/* COMMENT_0 */\n\tif (VAR_0->shdr[VAR_2].sh_size > VAR_4) {\n\t\treturn false;\n\t}\n\tif (!VAR_0->shdr[VAR_2].sh_size) {\n\t\treturn false;\n\t}\n\tVAR_0->shstrtab_section = VAR_0->strtab_section = &VAR_0->shdr[VAR_2];\n\tVAR_0->shstrtab_size = VAR_0->shstrtab_section->sh_size;\n\tif (VAR_0->shstrtab_size > VAR_0->size) {\n\t\treturn false;\n\t}\n\tif (VAR_0->shstrtab_section->sh_offset > VAR_0->size) {\n\t\treturn false;\n\t}\n\tif (VAR_0->shstrtab_section->sh_offset + VAR_0->shstrtab_section->sh_size > VAR_0->size) {\n\t\treturn false;\n\t}\n\n\tif (!(VAR_0->shstrtab = calloc (1, VAR_0->shstrtab_size + 1))) {\n\t\tr_sys_perror (\"malloc\");\n\t\tVAR_0->shstrtab = NULL;\n\t\treturn false;\n\t}\n\tint VAR_5 = r_buf_read_at (VAR_0->b, VAR_0->shstrtab_section->sh_offset, (ut8*)VAR_0->shstrtab,\n\t\tVAR_0->shstrtab_section->sh_size);\n\tif (VAR_5 < 1) {\n\t\tR_LOG_DEBUG (\"read (shstrtab) at 0x%\" VAR_6, (ut64) VAR_0->shstrtab_section->sh_offset);\n\t\tR_FREE (VAR_0->shstrtab);\n\t\treturn false;\n\t}\n\tVAR_0->shstrtab[VAR_0->shstrtab_section->sh_size] = '\\0';\n\n\tsdb_num_set (VAR_0->kv, \"elf_shstrtab.offset\", VAR_0->shstrtab_section->sh_offset, 0);\n\tsdb_num_set (VAR_0->kv, \"elf_shstrtab.size\", VAR_0->shstrtab_section->sh_size, 0);\n\n\treturn true;\n}",
  "func_graph_path": "radareorg/radare2/3ecdbf8e21186a9c5a4d3cfa3b1e9fd27045340e/elf.c/vul/after/3.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -37,7 +37,7 @@\n \tint res = r_buf_read_at (bin->b, bin->shstrtab_section->sh_offset, (ut8*)bin->shstrtab,\n \t\tbin->shstrtab_section->sh_size);\n \tif (res < 1) {\n-\t\tR_LOG_ERROR (\"read (shstrtab) at 0x%\" PFMT64x, (ut64) bin->shstrtab_section->sh_offset);\n+\t\tR_LOG_DEBUG (\"read (shstrtab) at 0x%\" PFMT64x, (ut64) bin->shstrtab_section->sh_offset);\n \t\tR_FREE (bin->shstrtab);\n \t\treturn false;\n \t}",
  "diff_line_info": {
    "deleted_lines": [
      "\t\tR_LOG_ERROR (\"read (shstrtab) at 0x%\" PFMT64x, (ut64) bin->shstrtab_section->sh_offset);"
    ],
    "added_lines": [
      "\t\tR_LOG_DEBUG (\"read (shstrtab) at 0x%\" PFMT64x, (ut64) bin->shstrtab_section->sh_offset);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/radareorg/radare2/pull/20097",
  "description": {
    "pr_info": {
      "title": "Fix 4 byte oobread in msp430 disassembler ##crash",
      "number": 20097
    },
    "comment": [
      "* Only crashes with asan builds\r\n* Add missing =SN register\r\n* Reported by cnitlrt via huntrdev\r\n* BountyID: 1c22055b-b015-47a8-a57b-4982978751d0\r\n\r\n<!--\r\nRead https://github.com/radareorg/radare2/blob/master/DEVELOPERS.md\r\n* PR title must be capitalized, concise and use ##tags\r\n* If the PR is fixing a ticket use 'Fix #1234 - ..' in the commit message\r\n* Follow the coding style, add tests and documentation if necessary\r\n-->\r\n\r\n- [ ] Mark this if you consider it ready to merge\r\n- [ ] I've added tests (optional)\r\n- [ ] I wrote some lines in the [book](https://github.com/radareorg/radare2book) (optional)\r\n\r\n**Description**\r\n\r\n<!-- explain your changes if necessary -->\r\n"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.93,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 0.93  \n**Rationale:** The commit addresses an out-of-bounds read in the disassembler, a clear security issue. The code change modifies error handling, but the commit's focus on fixing a crash and missing register strongly indicates a security patch. The confidence is high due to the explicit mention of 'oobread' and the context of crash reporting.\n\n**Final Output:**  \n**Final Classification:** Security Vulnerability Fix; **Confidence:** 0.93"
}