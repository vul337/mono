{
  "cve_id": "CVE-2018-20406",
  "cwe_ids": [
    "CWE-190"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "python/cpython",
  "commit_msg": "closes bpo-34656: Avoid relying on signed overflow in _pickle memos. (GH-9261)",
  "commit_hash": "a4ae828ee416a66d8c7bf5ee71d653c2cc6a26dd",
  "git_url": "https://github.com/python/cpython/commit/a4ae828ee416a66d8c7bf5ee71d653c2cc6a26dd",
  "file_path": "Modules/_pickle.c",
  "func_name": "PyMemoTable_Copy",
  "func_before": "static PyMemoTable *\nPyMemoTable_Copy(PyMemoTable *self)\n{\n    Py_ssize_t i;\n    PyMemoTable *new = PyMemoTable_New();\n    if (new == NULL)\n        return NULL;\n\n    new->mt_used = self->mt_used;\n    new->mt_allocated = self->mt_allocated;\n    new->mt_mask = self->mt_mask;\n    /* The table we get from _New() is probably smaller than we wanted.\n       Free it and allocate one that's the right size. */\n    PyMem_FREE(new->mt_table);\n    new->mt_table = PyMem_NEW(PyMemoEntry, self->mt_allocated);\n    if (new->mt_table == NULL) {\n        PyMem_FREE(new);\n        PyErr_NoMemory();\n        return NULL;\n    }\n    for (i = 0; i < self->mt_allocated; i++) {\n        Py_XINCREF(self->mt_table[i].me_key);\n    }\n    memcpy(new->mt_table, self->mt_table,\n           sizeof(PyMemoEntry) * self->mt_allocated);\n\n    return new;\n}",
  "abstract_func_before": "static PyMemoTable *\nPyMemoTable_Copy(PyMemoTable *VAR_0)\n{\n    Py_ssize_t VAR_1;\n    PyMemoTable *VAR_2 = PyMemoTable_New();\n    if (VAR_2 == NULL)\n        return NULL;\n\n    VAR_2->mt_used = VAR_0->mt_used;\n    VAR_2->mt_allocated = VAR_0->mt_allocated;\n    VAR_2->mt_mask = VAR_0->mt_mask;\n    /* COMMENT_0 */\n                                                         \n    PyMem_FREE(VAR_2->mt_table);\n    VAR_2->mt_table = PyMem_NEW(VAR_3, VAR_0->mt_allocated);\n    if (VAR_2->mt_table == NULL) {\n        PyMem_FREE(VAR_2);\n        PyErr_NoMemory();\n        return NULL;\n    }\n    for (VAR_1 = 0; VAR_1 < VAR_0->mt_allocated; VAR_1++) {\n        Py_XINCREF(VAR_0->mt_table[VAR_1].me_key);\n    }\n    memcpy(VAR_2->mt_table, VAR_0->mt_table,\n           sizeof(VAR_3) * VAR_0->mt_allocated);\n\n    return VAR_2;\n}",
  "func_graph_path_before": "python/cpython/a4ae828ee416a66d8c7bf5ee71d653c2cc6a26dd/_pickle.c/vul/before/8.json",
  "func": "static PyMemoTable *\nPyMemoTable_Copy(PyMemoTable *self)\n{\n    PyMemoTable *new = PyMemoTable_New();\n    if (new == NULL)\n        return NULL;\n\n    new->mt_used = self->mt_used;\n    new->mt_allocated = self->mt_allocated;\n    new->mt_mask = self->mt_mask;\n    /* The table we get from _New() is probably smaller than we wanted.\n       Free it and allocate one that's the right size. */\n    PyMem_FREE(new->mt_table);\n    new->mt_table = PyMem_NEW(PyMemoEntry, self->mt_allocated);\n    if (new->mt_table == NULL) {\n        PyMem_FREE(new);\n        PyErr_NoMemory();\n        return NULL;\n    }\n    for (size_t i = 0; i < self->mt_allocated; i++) {\n        Py_XINCREF(self->mt_table[i].me_key);\n    }\n    memcpy(new->mt_table, self->mt_table,\n           sizeof(PyMemoEntry) * self->mt_allocated);\n\n    return new;\n}",
  "abstract_func": "static PyMemoTable *\nPyMemoTable_Copy(PyMemoTable *VAR_0)\n{\n    PyMemoTable *VAR_1 = PyMemoTable_New();\n    if (VAR_1 == NULL)\n        return NULL;\n\n    VAR_1->mt_used = VAR_0->mt_used;\n    VAR_1->mt_allocated = VAR_0->mt_allocated;\n    VAR_1->mt_mask = VAR_0->mt_mask;\n    /* COMMENT_0 */\n                                                         \n    PyMem_FREE(VAR_1->mt_table);\n    VAR_1->mt_table = PyMem_NEW(VAR_2, VAR_0->mt_allocated);\n    if (VAR_1->mt_table == NULL) {\n        PyMem_FREE(VAR_1);\n        PyErr_NoMemory();\n        return NULL;\n    }\n    for (size_t VAR_3 = 0; VAR_3 < VAR_0->mt_allocated; VAR_3++) {\n        Py_XINCREF(VAR_0->mt_table[VAR_3].me_key);\n    }\n    memcpy(VAR_1->mt_table, VAR_0->mt_table,\n           sizeof(VAR_2) * VAR_0->mt_allocated);\n\n    return VAR_1;\n}",
  "func_graph_path": "python/cpython/a4ae828ee416a66d8c7bf5ee71d653c2cc6a26dd/_pickle.c/vul/after/8.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,7 +1,6 @@\n static PyMemoTable *\n PyMemoTable_Copy(PyMemoTable *self)\n {\n-    Py_ssize_t i;\n     PyMemoTable *new = PyMemoTable_New();\n     if (new == NULL)\n         return NULL;\n@@ -18,7 +17,7 @@\n         PyErr_NoMemory();\n         return NULL;\n     }\n-    for (i = 0; i < self->mt_allocated; i++) {\n+    for (size_t i = 0; i < self->mt_allocated; i++) {\n         Py_XINCREF(self->mt_table[i].me_key);\n     }\n     memcpy(new->mt_table, self->mt_table,",
  "diff_line_info": {
    "deleted_lines": [
      "    Py_ssize_t i;",
      "    for (i = 0; i < self->mt_allocated; i++) {"
    ],
    "added_lines": [
      "    for (size_t i = 0; i < self->mt_allocated; i++) {"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/python/cpython/pull/9261",
  "description": {
    "pr_info": {
      "title": "bpo-34656: Avoid relying on signed overflow in _pickle memos.",
      "number": 9261
    },
    "comment": [
      "<!--\r\nThanks for your contribution!\r\nPlease read this comment in its entirety. It's quite important.\r\n\r\n# Pull Request title\r\n\r\nIt should be in the following format:\r\n\r\n```\r\nbpo-NNNN: Summary of the changes made\r\n```\r\n\r\nWhere: bpo-NNNN refers to the issue number in the https://bugs.python.org.\r\n\r\nMost PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue.\r\n\r\n# Backport Pull Request title\r\n\r\nIf this is a backport PR (PR made against branches other than `master`),\r\nplease ensure that the PR title is in the following format:\r\n\r\n```\r\n[X.Y] <title from the original PR> (GH-NNNN)\r\n```\r\n\r\nWhere: [X.Y] is the branch name, e.g. [3.6].\r\n\r\nGH-NNNN refers to the PR number from `master`.\r\n\r\n-->\r\n\n\n<!-- issue-number: [bpo-1621](https://www.bugs.python.org/issue1621) -->\nhttps://bugs.python.org/issue1621\n<!-- /issue-number -->\n",
      "Thanks @benjaminp for the PR üåÆüéâ.. I'm working now to backport this PR to: 3.6, 3.7.\nüêçüçí‚õèü§ñ ",
      "[GH-9465](https://github.com/python/cpython/pull/9465) is a backport of this pull request to the [3.7 branch](https://github.com/python/cpython/tree/3.7).",
      "[GH-9466](https://github.com/python/cpython/pull/9466) is a backport of this pull request to the [3.6 branch](https://github.com/python/cpython/tree/3.6)."
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "The commit addresses an integer overflow issue in the _pickle module, which is a security concern. The code changes fix the underlying vulnerability, and although no CVE is explicitly mentioned, the context strongly implies it's a security patch.\n\n**Final Classification:** Security Vulnerability Fix; **Confidence:** 0.9"
}