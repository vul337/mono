{
  "cve_id": "CVE-2023-29383",
  "cwe_ids": [
    "CWE-74"
  ],
  "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N",
  "cvss_is_v3": true,
  "repo_name": "shadow-maint/shadow",
  "commit_msg": "Added control character check\n\nAdded control character check, returning -1 (to \"err\") if control characters are present.",
  "commit_hash": "e5905c4b84d4fb90aefcd96ee618411ebfac663d",
  "git_url": "https://github.com/shadow-maint/shadow/commit/e5905c4b84d4fb90aefcd96ee618411ebfac663d",
  "file_path": "lib/fields.c",
  "func_name": "valid_field",
  "func_before": "int valid_field (const char *field, const char *illegal)\n{\n\tconst char *cp;\n\tint err = 0;\n\n\tif (NULL == field) {\n\t\treturn -1;\n\t}\n\n\t/* For each character of field, search if it appears in the list\n\t * of illegal characters. */\n\tfor (cp = field; '\\0' != *cp; cp++) {\n\t\tif (strchr (illegal, *cp) != NULL) {\n\t\t\terr = -1;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (0 == err) {\n\t\t/* Search if there are some non-printable characters */\n\t\tfor (cp = field; '\\0' != *cp; cp++) {\n\t\t\tif (!isprint (*cp)) {\n\t\t\t\terr = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn err;\n}",
  "abstract_func_before": "int valid_field (const char *VAR_0, const char *VAR_1)\n{\n\tconst char *VAR_2;\n\tint VAR_3 = 0;\n\n\tif (NULL == VAR_0) {\n\t\treturn -1;\n\t}\n\n\t/* COMMENT_0 */\n                             \n\tfor (VAR_2 = VAR_0; '\\0' != *VAR_2; VAR_2++) {\n\t\tif (strchr (VAR_1, *VAR_2) != NULL) {\n\t\t\tVAR_3 = -1;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (0 == VAR_3) {\n\t\t/* COMMENT_2 */\n\t\tfor (VAR_2 = VAR_0; '\\0' != *VAR_2; VAR_2++) {\n\t\t\tif (!isprint (*VAR_2)) {\n\t\t\t\tVAR_3 = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn VAR_3;\n}",
  "func_graph_path_before": "shadow-maint/shadow/e5905c4b84d4fb90aefcd96ee618411ebfac663d/fields.c/vul/before/0.json",
  "func": "int valid_field (const char *field, const char *illegal)\n{\n\tconst char *cp;\n\tint err = 0;\n\n\tif (NULL == field) {\n\t\treturn -1;\n\t}\n\n\t/* For each character of field, search if it appears in the list\n\t * of illegal characters. */\n\tfor (cp = field; '\\0' != *cp; cp++) {\n\t\tif (strchr (illegal, *cp) != NULL) {\n\t\t\terr = -1;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (0 == err) {\n\t\t/* Search if there are non-printable or control characters */\n\t\tfor (cp = field; '\\0' != *cp; cp++) {\n\t\t\tif (!isprint (*cp)) {\n\t\t\t\terr = 1;\n\t\t\t}\n\t\t\tif (!iscntrl (*cp)) {\n\t\t\t\terr = -1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn err;\n}",
  "abstract_func": "int valid_field (const char *VAR_0, const char *VAR_1)\n{\n\tconst char *VAR_2;\n\tint VAR_3 = 0;\n\n\tif (NULL == VAR_0) {\n\t\treturn -1;\n\t}\n\n\t/* COMMENT_0 */\n                             \n\tfor (VAR_2 = VAR_0; '\\0' != *VAR_2; VAR_2++) {\n\t\tif (strchr (VAR_1, *VAR_2) != NULL) {\n\t\t\tVAR_3 = -1;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (0 == VAR_3) {\n\t\t/* COMMENT_2 */\n\t\tfor (VAR_2 = VAR_0; '\\0' != *VAR_2; VAR_2++) {\n\t\t\tif (!isprint (*VAR_2)) {\n\t\t\t\tVAR_3 = 1;\n\t\t\t}\n\t\t\tif (!iscntrl (*VAR_2)) {\n\t\t\t\tVAR_3 = -1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn VAR_3;\n}",
  "func_graph_path": "shadow-maint/shadow/e5905c4b84d4fb90aefcd96ee618411ebfac663d/fields.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -17,10 +17,13 @@\n \t}\n \n \tif (0 == err) {\n-\t\t/* Search if there are some non-printable characters */\n+\t\t/* Search if there are non-printable or control characters */\n \t\tfor (cp = field; '\\0' != *cp; cp++) {\n \t\t\tif (!isprint (*cp)) {\n \t\t\t\terr = 1;\n+\t\t\t}\n+\t\t\tif (!iscntrl (*cp)) {\n+\t\t\t\terr = -1;\n \t\t\t\tbreak;\n \t\t\t}\n \t\t}",
  "diff_line_info": {
    "deleted_lines": [
      "\t\t/* Search if there are some non-printable characters */"
    ],
    "added_lines": [
      "\t\t/* Search if there are non-printable or control characters */",
      "\t\t\t}",
      "\t\t\tif (!iscntrl (*cp)) {",
      "\t\t\t\terr = -1;"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/shadow-maint/shadow/pull/687",
  "description": {
    "pr_info": {
      "title": "Control character check",
      "number": 687
    },
    "comment": [
      "Added a check to search for control characters and return -1 (in \"err\") if found.",
      "You have successfully added a new shellcheck configuration `differential-shellcheck`. As part of the setup process, we have scanned this repository and found no existing alerts. In the future, you will see all code scanning alerts on the repository [Security tab](/shadow-maint/shadow/security/code-scanning?query=pr%3A687+tool%3Ashellcheck+is%3Aopen).",
      "@hallyn what do we do with the failing test case?",
      "> @hallyn what do we do with the failing test case?\r\n\r\nI'll have to look into it this hopefully tonight, else this weekend. I'll look at the others you mentioned too.",
      "Oh - I see, it fails in your doc-only pr too.  Let's just merge then."
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.9\n\n**Step-by-Step Explanation:**\n\n1. **Input Analysis:**  \n   The commit message and code changes focus on adding a check for control characters, returning an error when detected. This suggests a security concern related to input validation.\n\n2. **Consistency Check:**  \n   The commit message aligns with the code modifications, showing a clear intent to enhance input validation by detecting control characters.\n\n3. **Purpose Evaluation:**  \n   The code change modifies the core logic to include a security check for control characters, which could mitigate attacks exploiting such inputs.\n\n4. **Security Vulnerability Assessment:**  \n   The patch addresses a potential security risk by preventing the use of control characters, which could be maliciously exploited, even without a specific CVE reference.\n\n5. **Confidence Scoring:**  \n   High confidence due to clear intent and alignment between description and code changes, though the absence of a CVE ID slightly reduces certainty.\n\n**Answer:**  \n**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.9"
}