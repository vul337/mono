{
  "cve_id": "CVE-2019-1000020",
  "cwe_ids": [
    "CWE-835"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "libarchive",
  "commit_msg": "iso9660: Fail when expected Rockridge extensions is missing\n\nA corrupted or malicious ISO9660 image can cause read_CE() to loop\nforever.\n\nread_CE() calls parse_rockridge(), expecting a Rockridge extension\nto be read. However, parse_rockridge() is structured as a while\nloop starting with a sanity check, and if the sanity check fails\nbefore the loop has run, the function returns ARCHIVE_OK without\nadvancing the position in the file. This causes read_CE() to retry\nindefinitely.\n\nMake parse_rockridge() return ARCHIVE_WARN if it didn't read an\nextension. As someone with no real knowledge of the format, this\nseems more apt than ARCHIVE_FATAL, but both the call-sites escalate\nit to a fatal error immediately anyway.\n\nFound with a combination of AFL, afl-rb (FairFuzz) and qsym.",
  "commit_hash": "8312eaa576014cd9b965012af51bc1f967b12423",
  "git_url": "https://github.com/libarchive/libarchive/commit/8312eaa576014cd9b965012af51bc1f967b12423",
  "file_path": "libarchive/archive_read_support_format_iso9660.c",
  "func_name": "parse_rockridge",
  "func_before": "static int\nparse_rockridge(struct archive_read *a, struct file_info *file,\n    const unsigned char *p, const unsigned char *end)\n{\n\tstruct iso9660 *iso9660;\n\n\tiso9660 = (struct iso9660 *)(a->format->data);\n\n\twhile (p + 4 <= end  /* Enough space for another entry. */\n\t    && p[0] >= 'A' && p[0] <= 'Z' /* Sanity-check 1st char of name. */\n\t    && p[1] >= 'A' && p[1] <= 'Z' /* Sanity-check 2nd char of name. */\n\t    && p[2] >= 4 /* Sanity-check length. */\n\t    && p + p[2] <= end) { /* Sanity-check length. */\n\t\tconst unsigned char *data = p + 4;\n\t\tint data_length = p[2] - 4;\n\t\tint version = p[3];\n\n\t\tswitch(p[0]) {\n\t\tcase 'C':\n\t\t\tif (p[1] == 'E') {\n\t\t\t\tif (version == 1 && data_length == 24) {\n\t\t\t\t\t/*\n\t\t\t\t\t * CE extension comprises:\n\t\t\t\t\t *   8 byte sector containing extension\n\t\t\t\t\t *   8 byte offset w/in above sector\n\t\t\t\t\t *   8 byte length of continuation\n\t\t\t\t\t */\n\t\t\t\t\tint32_t location =\n\t\t\t\t\t    archive_le32dec(data);\n\t\t\t\t\tfile->ce_offset =\n\t\t\t\t\t    archive_le32dec(data+8);\n\t\t\t\t\tfile->ce_size =\n\t\t\t\t\t    archive_le32dec(data+16);\n\t\t\t\t\tif (register_CE(a, location, file)\n\t\t\t\t\t    != ARCHIVE_OK)\n\t\t\t\t\t\treturn (ARCHIVE_FATAL);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (p[1] == 'L') {\n\t\t\t\tif (version == 1 && data_length == 8) {\n\t\t\t\t\tfile->cl_offset = (uint64_t)\n\t\t\t\t\t    iso9660->logical_block_size *\n\t\t\t\t\t    (uint64_t)archive_le32dec(data);\n\t\t\t\t\tiso9660->seenRockridge = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'N':\n\t\t\tif (p[1] == 'M') {\n\t\t\t\tif (version == 1) {\n\t\t\t\t\tparse_rockridge_NM1(file,\n\t\t\t\t\t    data, data_length);\n\t\t\t\t\tiso9660->seenRockridge = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'P':\n\t\t\t/*\n\t\t\t * PD extension is padding;\n\t\t\t * contents are always ignored.\n\t\t\t *\n\t\t\t * PL extension won't appear;\n\t\t\t * contents are always ignored.\n\t\t\t */\n\t\t\tif (p[1] == 'N') {\n\t\t\t\tif (version == 1 && data_length == 16) {\n\t\t\t\t\tfile->rdev = toi(data,4);\n\t\t\t\t\tfile->rdev <<= 32;\n\t\t\t\t\tfile->rdev |= toi(data + 8, 4);\n\t\t\t\t\tiso9660->seenRockridge = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (p[1] == 'X') {\n\t\t\t\t/*\n\t\t\t\t * PX extension comprises:\n\t\t\t\t *   8 bytes for mode,\n\t\t\t\t *   8 bytes for nlinks,\n\t\t\t\t *   8 bytes for uid,\n\t\t\t\t *   8 bytes for gid,\n\t\t\t\t *   8 bytes for inode.\n\t\t\t\t */\n\t\t\t\tif (version == 1) {\n\t\t\t\t\tif (data_length >= 8)\n\t\t\t\t\t\tfile->mode\n\t\t\t\t\t\t    = toi(data, 4);\n\t\t\t\t\tif (data_length >= 16)\n\t\t\t\t\t\tfile->nlinks\n\t\t\t\t\t\t    = toi(data + 8, 4);\n\t\t\t\t\tif (data_length >= 24)\n\t\t\t\t\t\tfile->uid\n\t\t\t\t\t\t    = toi(data + 16, 4);\n\t\t\t\t\tif (data_length >= 32)\n\t\t\t\t\t\tfile->gid\n\t\t\t\t\t\t    = toi(data + 24, 4);\n\t\t\t\t\tif (data_length >= 40)\n\t\t\t\t\t\tfile->number\n\t\t\t\t\t\t    = toi(data + 32, 4);\n\t\t\t\t\tiso9660->seenRockridge = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'R':\n\t\t\tif (p[1] == 'E' && version == 1) {\n\t\t\t\tfile->re = 1;\n\t\t\t\tiso9660->seenRockridge = 1;\n\t\t\t}\n\t\t\telse if (p[1] == 'R' && version == 1) {\n\t\t\t\t/*\n\t\t\t\t * RR extension comprises:\n\t\t\t\t *    one byte flag value\n\t\t\t\t * This extension is obsolete,\n\t\t\t\t * so contents are always ignored.\n\t\t\t\t */\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'S':\n\t\t\tif (p[1] == 'L') {\n\t\t\t\tif (version == 1) {\n\t\t\t\t\tparse_rockridge_SL1(file,\n\t\t\t\t\t    data, data_length);\n\t\t\t\t\tiso9660->seenRockridge = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (p[1] == 'T'\n\t\t\t    && data_length == 0 && version == 1) {\n\t\t\t\t/*\n\t\t\t\t * ST extension marks end of this\n\t\t\t\t * block of SUSP entries.\n\t\t\t\t *\n\t\t\t\t * It allows SUSP to coexist with\n\t\t\t\t * non-SUSP uses of the System\n\t\t\t\t * Use Area by placing non-SUSP data\n\t\t\t\t * after SUSP data.\n\t\t\t\t */\n\t\t\t\tiso9660->seenSUSP = 0;\n\t\t\t\tiso9660->seenRockridge = 0;\n\t\t\t\treturn (ARCHIVE_OK);\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'T':\n\t\t\tif (p[1] == 'F') {\n\t\t\t\tif (version == 1) {\n\t\t\t\t\tparse_rockridge_TF1(file,\n\t\t\t\t\t    data, data_length);\n\t\t\t\t\tiso9660->seenRockridge = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'Z':\n\t\t\tif (p[1] == 'F') {\n\t\t\t\tif (version == 1)\n\t\t\t\t\tparse_rockridge_ZF1(file,\n\t\t\t\t\t    data, data_length);\n\t\t\t}\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tbreak;\n\t\t}\n\n\t\tp += p[2];\n\t}\n\treturn (ARCHIVE_OK);\n}",
  "abstract_func_before": "static int\nparse_rockridge(struct archive_read *VAR_0, struct file_info *VAR_1,\n    const unsigned char *VAR_2, const unsigned char *VAR_3)\n{\n\tstruct iso9660 *iso9660;\n\n\tiso9660 = (struct iso9660 *)(VAR_0->format->data);\n\n\twhile (VAR_2 + 4 <= VAR_3  /* COMMENT_0 */\n\t    && VAR_2[0] >= 'A' && VAR_2[0] <= 'Z' /* COMMENT_1 */\n\t    && VAR_2[1] >= 'A' && VAR_2[1] <= 'Z' /* COMMENT_2 */\n\t    && VAR_2[2] >= 4 /* COMMENT_3 */\n\t    && VAR_2 + VAR_2[2] <= VAR_3) { /* COMMENT_3 */\n\t\tconst unsigned char *VAR_4 = VAR_2 + 4;\n\t\tint VAR_5 = VAR_2[2] - 4;\n\t\tint VAR_6 = VAR_2[3];\n\n\t\tswitch(VAR_2[0]) {\n\t\tcase 'C':\n\t\t\tif (VAR_2[1] == 'E') {\n\t\t\t\tif (VAR_6 == 1 && VAR_5 == 24) {\n\t\t\t\t\t/* COMMENT_4 */\n                               \n                                            \n                                         \n                                       \n        \n\t\t\t\t\tint32_t VAR_7 =\n\t\t\t\t\t    archive_le32dec(VAR_4);\n\t\t\t\t\tVAR_1->ce_offset =\n\t\t\t\t\t    archive_le32dec(VAR_4+8);\n\t\t\t\t\tVAR_1->ce_size =\n\t\t\t\t\t    archive_le32dec(VAR_4+16);\n\t\t\t\t\tif (register_CE(VAR_0, VAR_7, VAR_1)\n\t\t\t\t\t    != VAR_8)\n\t\t\t\t\t\treturn (VAR_9);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (VAR_2[1] == 'L') {\n\t\t\t\tif (VAR_6 == 1 && VAR_5 == 8) {\n\t\t\t\t\tVAR_1->cl_offset = (uint64_t)\n\t\t\t\t\t    iso9660->logical_block_size *\n\t\t\t\t\t    (uint64_t)archive_le32dec(VAR_4);\n\t\t\t\t\tiso9660->seenRockridge = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'N':\n\t\t\tif (VAR_2[1] == 'M') {\n\t\t\t\tif (VAR_6 == 1) {\n\t\t\t\t\tparse_rockridge_NM1(VAR_1,\n\t\t\t\t\t    VAR_4, VAR_5);\n\t\t\t\t\tiso9660->seenRockridge = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'P':\n\t\t\t/* COMMENT_10 */\n                              \n                                  \n     \n                                \n                                  \n      \n\t\t\tif (VAR_2[1] == 'N') {\n\t\t\t\tif (VAR_6 == 1 && VAR_5 == 16) {\n\t\t\t\t\tVAR_1->rdev = toi(VAR_4,4);\n\t\t\t\t\tVAR_1->rdev <<= 32;\n\t\t\t\t\tVAR_1->rdev |= toi(VAR_4 + 8, 4);\n\t\t\t\t\tiso9660->seenRockridge = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (VAR_2[1] == 'X') {\n\t\t\t\t/* COMMENT_16 */\n                              \n                          \n                            \n                         \n                         \n                           \n       \n\t\t\t\tif (VAR_6 == 1) {\n\t\t\t\t\tif (VAR_5 >= 8)\n\t\t\t\t\t\tVAR_1->mode\n\t\t\t\t\t\t    = toi(VAR_4, 4);\n\t\t\t\t\tif (VAR_5 >= 16)\n\t\t\t\t\t\tVAR_1->nlinks\n\t\t\t\t\t\t    = toi(VAR_4 + 8, 4);\n\t\t\t\t\tif (VAR_5 >= 24)\n\t\t\t\t\t\tVAR_1->uid\n\t\t\t\t\t\t    = toi(VAR_4 + 16, 4);\n\t\t\t\t\tif (VAR_5 >= 32)\n\t\t\t\t\t\tVAR_1->gid\n\t\t\t\t\t\t    = toi(VAR_4 + 24, 4);\n\t\t\t\t\tif (VAR_5 >= 40)\n\t\t\t\t\t\tVAR_1->number\n\t\t\t\t\t\t    = toi(VAR_4 + 32, 4);\n\t\t\t\t\tiso9660->seenRockridge = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'R':\n\t\t\tif (VAR_2[1] == 'E' && VAR_6 == 1) {\n\t\t\t\tVAR_1->re = 1;\n\t\t\t\tiso9660->seenRockridge = 1;\n\t\t\t}\n\t\t\telse if (VAR_2[1] == 'R' && VAR_6 == 1) {\n\t\t\t\t/* COMMENT_24 */\n                              \n                             \n                                  \n                                      \n       \n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'S':\n\t\t\tif (VAR_2[1] == 'L') {\n\t\t\t\tif (VAR_6 == 1) {\n\t\t\t\t\tparse_rockridge_SL1(VAR_1,\n\t\t\t\t\t    VAR_4, VAR_5);\n\t\t\t\t\tiso9660->seenRockridge = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (VAR_2[1] == 'T'\n\t\t\t    && VAR_5 == 0 && VAR_6 == 1) {\n\t\t\t\t/* COMMENT_30 */\n                                     \n                             \n      \n                                     \n                                  \n                                        \n                       \n       \n\t\t\t\tiso9660->seenSUSP = 0;\n\t\t\t\tiso9660->seenRockridge = 0;\n\t\t\t\treturn (VAR_8);\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'T':\n\t\t\tif (VAR_2[1] == 'F') {\n\t\t\t\tif (VAR_6 == 1) {\n\t\t\t\t\tparse_rockridge_TF1(VAR_1,\n\t\t\t\t\t    VAR_4, VAR_5);\n\t\t\t\t\tiso9660->seenRockridge = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'Z':\n\t\t\tif (VAR_2[1] == 'F') {\n\t\t\t\tif (VAR_6 == 1)\n\t\t\t\t\tparse_rockridge_ZF1(VAR_1,\n\t\t\t\t\t    VAR_4, VAR_5);\n\t\t\t}\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tbreak;\n\t\t}\n\n\t\tVAR_2 += VAR_2[2];\n\t}\n\treturn (VAR_8);\n}",
  "func_graph_path_before": "libarchive/8312eaa576014cd9b965012af51bc1f967b12423/archive_read_support_format_iso9660.c/vul/before/0.json",
  "func": "static int\nparse_rockridge(struct archive_read *a, struct file_info *file,\n    const unsigned char *p, const unsigned char *end)\n{\n\tstruct iso9660 *iso9660;\n\tint entry_seen = 0;\n\n\tiso9660 = (struct iso9660 *)(a->format->data);\n\n\twhile (p + 4 <= end  /* Enough space for another entry. */\n\t    && p[0] >= 'A' && p[0] <= 'Z' /* Sanity-check 1st char of name. */\n\t    && p[1] >= 'A' && p[1] <= 'Z' /* Sanity-check 2nd char of name. */\n\t    && p[2] >= 4 /* Sanity-check length. */\n\t    && p + p[2] <= end) { /* Sanity-check length. */\n\t\tconst unsigned char *data = p + 4;\n\t\tint data_length = p[2] - 4;\n\t\tint version = p[3];\n\n\t\tswitch(p[0]) {\n\t\tcase 'C':\n\t\t\tif (p[1] == 'E') {\n\t\t\t\tif (version == 1 && data_length == 24) {\n\t\t\t\t\t/*\n\t\t\t\t\t * CE extension comprises:\n\t\t\t\t\t *   8 byte sector containing extension\n\t\t\t\t\t *   8 byte offset w/in above sector\n\t\t\t\t\t *   8 byte length of continuation\n\t\t\t\t\t */\n\t\t\t\t\tint32_t location =\n\t\t\t\t\t    archive_le32dec(data);\n\t\t\t\t\tfile->ce_offset =\n\t\t\t\t\t    archive_le32dec(data+8);\n\t\t\t\t\tfile->ce_size =\n\t\t\t\t\t    archive_le32dec(data+16);\n\t\t\t\t\tif (register_CE(a, location, file)\n\t\t\t\t\t    != ARCHIVE_OK)\n\t\t\t\t\t\treturn (ARCHIVE_FATAL);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (p[1] == 'L') {\n\t\t\t\tif (version == 1 && data_length == 8) {\n\t\t\t\t\tfile->cl_offset = (uint64_t)\n\t\t\t\t\t    iso9660->logical_block_size *\n\t\t\t\t\t    (uint64_t)archive_le32dec(data);\n\t\t\t\t\tiso9660->seenRockridge = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'N':\n\t\t\tif (p[1] == 'M') {\n\t\t\t\tif (version == 1) {\n\t\t\t\t\tparse_rockridge_NM1(file,\n\t\t\t\t\t    data, data_length);\n\t\t\t\t\tiso9660->seenRockridge = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'P':\n\t\t\t/*\n\t\t\t * PD extension is padding;\n\t\t\t * contents are always ignored.\n\t\t\t *\n\t\t\t * PL extension won't appear;\n\t\t\t * contents are always ignored.\n\t\t\t */\n\t\t\tif (p[1] == 'N') {\n\t\t\t\tif (version == 1 && data_length == 16) {\n\t\t\t\t\tfile->rdev = toi(data,4);\n\t\t\t\t\tfile->rdev <<= 32;\n\t\t\t\t\tfile->rdev |= toi(data + 8, 4);\n\t\t\t\t\tiso9660->seenRockridge = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (p[1] == 'X') {\n\t\t\t\t/*\n\t\t\t\t * PX extension comprises:\n\t\t\t\t *   8 bytes for mode,\n\t\t\t\t *   8 bytes for nlinks,\n\t\t\t\t *   8 bytes for uid,\n\t\t\t\t *   8 bytes for gid,\n\t\t\t\t *   8 bytes for inode.\n\t\t\t\t */\n\t\t\t\tif (version == 1) {\n\t\t\t\t\tif (data_length >= 8)\n\t\t\t\t\t\tfile->mode\n\t\t\t\t\t\t    = toi(data, 4);\n\t\t\t\t\tif (data_length >= 16)\n\t\t\t\t\t\tfile->nlinks\n\t\t\t\t\t\t    = toi(data + 8, 4);\n\t\t\t\t\tif (data_length >= 24)\n\t\t\t\t\t\tfile->uid\n\t\t\t\t\t\t    = toi(data + 16, 4);\n\t\t\t\t\tif (data_length >= 32)\n\t\t\t\t\t\tfile->gid\n\t\t\t\t\t\t    = toi(data + 24, 4);\n\t\t\t\t\tif (data_length >= 40)\n\t\t\t\t\t\tfile->number\n\t\t\t\t\t\t    = toi(data + 32, 4);\n\t\t\t\t\tiso9660->seenRockridge = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'R':\n\t\t\tif (p[1] == 'E' && version == 1) {\n\t\t\t\tfile->re = 1;\n\t\t\t\tiso9660->seenRockridge = 1;\n\t\t\t}\n\t\t\telse if (p[1] == 'R' && version == 1) {\n\t\t\t\t/*\n\t\t\t\t * RR extension comprises:\n\t\t\t\t *    one byte flag value\n\t\t\t\t * This extension is obsolete,\n\t\t\t\t * so contents are always ignored.\n\t\t\t\t */\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'S':\n\t\t\tif (p[1] == 'L') {\n\t\t\t\tif (version == 1) {\n\t\t\t\t\tparse_rockridge_SL1(file,\n\t\t\t\t\t    data, data_length);\n\t\t\t\t\tiso9660->seenRockridge = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (p[1] == 'T'\n\t\t\t    && data_length == 0 && version == 1) {\n\t\t\t\t/*\n\t\t\t\t * ST extension marks end of this\n\t\t\t\t * block of SUSP entries.\n\t\t\t\t *\n\t\t\t\t * It allows SUSP to coexist with\n\t\t\t\t * non-SUSP uses of the System\n\t\t\t\t * Use Area by placing non-SUSP data\n\t\t\t\t * after SUSP data.\n\t\t\t\t */\n\t\t\t\tiso9660->seenSUSP = 0;\n\t\t\t\tiso9660->seenRockridge = 0;\n\t\t\t\treturn (ARCHIVE_OK);\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'T':\n\t\t\tif (p[1] == 'F') {\n\t\t\t\tif (version == 1) {\n\t\t\t\t\tparse_rockridge_TF1(file,\n\t\t\t\t\t    data, data_length);\n\t\t\t\t\tiso9660->seenRockridge = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'Z':\n\t\t\tif (p[1] == 'F') {\n\t\t\t\tif (version == 1)\n\t\t\t\t\tparse_rockridge_ZF1(file,\n\t\t\t\t\t    data, data_length);\n\t\t\t}\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tbreak;\n\t\t}\n\n\t\tp += p[2];\n\t\tentry_seen = 1;\n\t}\n\n\tif (entry_seen)\n\t\treturn (ARCHIVE_OK);\n\telse {\n\t\tarchive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,\n\t\t\t\t  \"Tried to parse Rockridge extensions, but none found\");\n\t\treturn (ARCHIVE_WARN);\n\t}\n}",
  "abstract_func": "static int\nparse_rockridge(struct archive_read *VAR_0, struct file_info *VAR_1,\n    const unsigned char *VAR_2, const unsigned char *VAR_3)\n{\n\tstruct iso9660 *iso9660;\n\tint VAR_4 = 0;\n\n\tiso9660 = (struct iso9660 *)(VAR_0->format->data);\n\n\twhile (VAR_2 + 4 <= VAR_3  /* COMMENT_0 */\n\t    && VAR_2[0] >= 'A' && VAR_2[0] <= 'Z' /* COMMENT_1 */\n\t    && VAR_2[1] >= 'A' && VAR_2[1] <= 'Z' /* COMMENT_2 */\n\t    && VAR_2[2] >= 4 /* COMMENT_3 */\n\t    && VAR_2 + VAR_2[2] <= VAR_3) { /* COMMENT_3 */\n\t\tconst unsigned char *VAR_5 = VAR_2 + 4;\n\t\tint VAR_6 = VAR_2[2] - 4;\n\t\tint VAR_7 = VAR_2[3];\n\n\t\tswitch(VAR_2[0]) {\n\t\tcase 'C':\n\t\t\tif (VAR_2[1] == 'E') {\n\t\t\t\tif (VAR_7 == 1 && VAR_6 == 24) {\n\t\t\t\t\t/* COMMENT_4 */\n                               \n                                            \n                                         \n                                       \n        \n\t\t\t\t\tint32_t VAR_8 =\n\t\t\t\t\t    archive_le32dec(VAR_5);\n\t\t\t\t\tVAR_1->ce_offset =\n\t\t\t\t\t    archive_le32dec(VAR_5+8);\n\t\t\t\t\tVAR_1->ce_size =\n\t\t\t\t\t    archive_le32dec(VAR_5+16);\n\t\t\t\t\tif (register_CE(VAR_0, VAR_8, VAR_1)\n\t\t\t\t\t    != VAR_9)\n\t\t\t\t\t\treturn (VAR_10);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (VAR_2[1] == 'L') {\n\t\t\t\tif (VAR_7 == 1 && VAR_6 == 8) {\n\t\t\t\t\tVAR_1->cl_offset = (uint64_t)\n\t\t\t\t\t    iso9660->logical_block_size *\n\t\t\t\t\t    (uint64_t)archive_le32dec(VAR_5);\n\t\t\t\t\tiso9660->seenRockridge = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'N':\n\t\t\tif (VAR_2[1] == 'M') {\n\t\t\t\tif (VAR_7 == 1) {\n\t\t\t\t\tparse_rockridge_NM1(VAR_1,\n\t\t\t\t\t    VAR_5, VAR_6);\n\t\t\t\t\tiso9660->seenRockridge = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'P':\n\t\t\t/* COMMENT_10 */\n                              \n                                  \n     \n                                \n                                  \n      \n\t\t\tif (VAR_2[1] == 'N') {\n\t\t\t\tif (VAR_7 == 1 && VAR_6 == 16) {\n\t\t\t\t\tVAR_1->rdev = toi(VAR_5,4);\n\t\t\t\t\tVAR_1->rdev <<= 32;\n\t\t\t\t\tVAR_1->rdev |= toi(VAR_5 + 8, 4);\n\t\t\t\t\tiso9660->seenRockridge = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (VAR_2[1] == 'X') {\n\t\t\t\t/* COMMENT_16 */\n                              \n                          \n                            \n                         \n                         \n                           \n       \n\t\t\t\tif (VAR_7 == 1) {\n\t\t\t\t\tif (VAR_6 >= 8)\n\t\t\t\t\t\tVAR_1->mode\n\t\t\t\t\t\t    = toi(VAR_5, 4);\n\t\t\t\t\tif (VAR_6 >= 16)\n\t\t\t\t\t\tVAR_1->nlinks\n\t\t\t\t\t\t    = toi(VAR_5 + 8, 4);\n\t\t\t\t\tif (VAR_6 >= 24)\n\t\t\t\t\t\tVAR_1->uid\n\t\t\t\t\t\t    = toi(VAR_5 + 16, 4);\n\t\t\t\t\tif (VAR_6 >= 32)\n\t\t\t\t\t\tVAR_1->gid\n\t\t\t\t\t\t    = toi(VAR_5 + 24, 4);\n\t\t\t\t\tif (VAR_6 >= 40)\n\t\t\t\t\t\tVAR_1->number\n\t\t\t\t\t\t    = toi(VAR_5 + 32, 4);\n\t\t\t\t\tiso9660->seenRockridge = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'R':\n\t\t\tif (VAR_2[1] == 'E' && VAR_7 == 1) {\n\t\t\t\tVAR_1->re = 1;\n\t\t\t\tiso9660->seenRockridge = 1;\n\t\t\t}\n\t\t\telse if (VAR_2[1] == 'R' && VAR_7 == 1) {\n\t\t\t\t/* COMMENT_24 */\n                              \n                             \n                                  \n                                      \n       \n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'S':\n\t\t\tif (VAR_2[1] == 'L') {\n\t\t\t\tif (VAR_7 == 1) {\n\t\t\t\t\tparse_rockridge_SL1(VAR_1,\n\t\t\t\t\t    VAR_5, VAR_6);\n\t\t\t\t\tiso9660->seenRockridge = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (VAR_2[1] == 'T'\n\t\t\t    && VAR_6 == 0 && VAR_7 == 1) {\n\t\t\t\t/* COMMENT_30 */\n                                     \n                             \n      \n                                     \n                                  \n                                        \n                       \n       \n\t\t\t\tiso9660->seenSUSP = 0;\n\t\t\t\tiso9660->seenRockridge = 0;\n\t\t\t\treturn (VAR_9);\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'T':\n\t\t\tif (VAR_2[1] == 'F') {\n\t\t\t\tif (VAR_7 == 1) {\n\t\t\t\t\tparse_rockridge_TF1(VAR_1,\n\t\t\t\t\t    VAR_5, VAR_6);\n\t\t\t\t\tiso9660->seenRockridge = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'Z':\n\t\t\tif (VAR_2[1] == 'F') {\n\t\t\t\tif (VAR_7 == 1)\n\t\t\t\t\tparse_rockridge_ZF1(VAR_1,\n\t\t\t\t\t    VAR_5, VAR_6);\n\t\t\t}\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tbreak;\n\t\t}\n\n\t\tVAR_2 += VAR_2[2];\n\t\tVAR_4 = 1;\n\t}\n\n\tif (VAR_4)\n\t\treturn (VAR_9);\n\telse {\n\t\tarchive_set_error(&VAR_0->archive, VAR_11,\n\t\t\t\t  \"Tried to parse Rockridge extensions, but none found\");\n\t\treturn (VAR_12);\n\t}\n}",
  "func_graph_path": "libarchive/8312eaa576014cd9b965012af51bc1f967b12423/archive_read_support_format_iso9660.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -3,6 +3,7 @@\n     const unsigned char *p, const unsigned char *end)\n {\n \tstruct iso9660 *iso9660;\n+\tint entry_seen = 0;\n \n \tiso9660 = (struct iso9660 *)(a->format->data);\n \n@@ -158,6 +159,14 @@\n \t\t}\n \n \t\tp += p[2];\n+\t\tentry_seen = 1;\n \t}\n-\treturn (ARCHIVE_OK);\n+\n+\tif (entry_seen)\n+\t\treturn (ARCHIVE_OK);\n+\telse {\n+\t\tarchive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,\n+\t\t\t\t  \"Tried to parse Rockridge extensions, but none found\");\n+\t\treturn (ARCHIVE_WARN);\n+\t}\n }",
  "diff_line_info": {
    "deleted_lines": [
      "\treturn (ARCHIVE_OK);"
    ],
    "added_lines": [
      "\tint entry_seen = 0;",
      "\t\tentry_seen = 1;",
      "",
      "\tif (entry_seen)",
      "\t\treturn (ARCHIVE_OK);",
      "\telse {",
      "\t\tarchive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,",
      "\t\t\t\t  \"Tried to parse Rockridge extensions, but none found\");",
      "\t\treturn (ARCHIVE_WARN);",
      "\t}"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/libarchive/libarchive/pull/1120",
  "description": {
    "pr_info": {
      "title": "Fix a 7zip crash and a ISO9660 infinite loop",
      "number": 1120
    },
    "comment": [
      "Fuzzing found two further file-format specific issues - a read-only segfault in 7z, and an infinite loop in ISO9660. Full details are in the commit messages.\r\n\r\nTest cases are (tested on Ubuntu bionic and git head):\r\n - for the 7zip crash: [crash.7z.txt](https://github.com/libarchive/libarchive/files/2762797/crash.7z.txt)\r\n - for the ISO9660 infinite loop: [rrforever.iso.txt](https://github.com/libarchive/libarchive/files/2762827/rrforever.iso.txt)\r\n\r\nIn order to allow me to upload them to GitHub, I have converted them to text with `xxd`.  To replicate:\r\n\r\n ```\r\nxxd -r rrforever.iso.txt rrforever.iso\r\nbsdtar -Oxf rrforever.iso\r\n```\r\n(and likewise for `crash.7z`)\r\n\r\nFuzzing was done with AFL, FairFuzz (afl-rb) and a little bit of qsym.",
      "These have been assigned CVEs through the DWF project:\r\n - CVE-2019-1000019 for 65a23f5\r\n - CVE-2019-1000020 for 8312eaa"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.95"
}