{
  "cve_id": "CVE-2023-1495",
  "cwe_ids": [
    "CWE-89"
  ],
  "cvss_vector": "AV:N/AC:L/Au:S/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "getrebuild/rebuild",
  "commit_msg": "H5 sync2 (#595)\n\n* style: 目录样式gh\r\n\r\n* style: J_new\r\n\r\n* feat: advListFilterTabs\r\n\r\n* feat: nav-copyto\r\n\r\n* enh: 助记码全拼\r\n\r\n* enh: 地图搜索选点\r\n\r\n* enh: topnav\r\n\r\n* list pn\r\n\r\n* .form-line.v33\r\n\r\n* open TAG\r\n\r\n* KVS addShutdownHook\r\n\r\n* fix: #594\r\n\r\n---------\r\n\r\nCo-authored-by: devezhao <zhaofang123@gmail.com>",
  "commit_hash": "c9474f84e5f376dd2ade2078e3039961a9425da7",
  "git_url": "https://github.com/getrebuild/rebuild/commit/c9474f84e5f376dd2ade2078e3039961a9425da7",
  "file_path": "src/main/java/com/rebuild/core/service/general/QuickCodeReindexTask.java",
  "func_name": "generateQuickCode",
  "func_before": "public static String generateQuickCode(String nameVal) {\n        if (StringUtils.isBlank(nameVal)) return StringUtils.EMPTY;\n\n        if (nameVal.length() > 100) nameVal = nameVal.substring(0, 100);\n\n        if (EasyPhone.isPhone(nameVal) || EasyEmail.isEmail(nameVal) || EasyUrl.isUrl(nameVal)) return StringUtils.EMPTY;\n\n        // 提取 0-9+a-z+A-Z+中文+空格，忽略特殊字符\n        nameVal = nameVal.replaceAll(\"[^a-zA-Z0-9\\\\s\\u4e00-\\u9fa5]\", \"\");\n        // 忽略数字或小字母\n        if (nameVal.matches(\"[a-z0-9]+\")) return StringUtils.EMPTY;\n\n        String quickCode = StringUtils.EMPTY;\n\n        // 仅包含字母数字或空格\n        if (nameVal.matches(\"[a-zA-Z0-9\\\\s]+\")) {\n            // 提取英文单词的首字母\n            String[] asplit = nameVal.split(\"(?=[A-Z\\\\s])\");\n            if (asplit.length == 1) {\n                quickCode = nameVal;\n            } else {\n                StringBuilder sb = new StringBuilder();\n                for (String a : asplit) {\n                    if (a.trim().length() > 0) {\n                        sb.append(a.trim(), 0, 1);\n                    }\n                }\n                quickCode = sb.toString();\n            }\n\n        } else {\n            // 拼音首字母\n            nameVal = nameVal.replaceAll(\" \", \"\");\n            try {\n                quickCode = HanLP.convertToPinyinFirstCharString(nameVal, \"\", false);\n            } catch (Exception e) {\n                log.error(\"QuickCode shorting error : \" + nameVal, e);\n            }\n        }\n\n        return CommonsUtils.maxstr(quickCode, 50).toUpperCase();\n    }",
  "abstract_func_before": "public static String generateQuickCode(String VAR_0) {\n        if (VAR_1.isBlank(VAR_0)) return VAR_1.EMPTY;\n\n        if (VAR_0.length() > 100) VAR_0 = VAR_0.substring(0, 100);\n\n        if (VAR_2.isPhone(VAR_0) || VAR_3.isEmail(VAR_0) || VAR_4.isUrl(VAR_0)) return VAR_1.EMPTY;\n\n        /* COMMENT_0 */\n        VAR_0 = VAR_0.replaceAll(\"[^a-zA-Z0-9\\\\s\\u4e00-\\u9fa5]\", \"\");\n        /* COMMENT_1 */\n        if (VAR_0.matches(\"[a-z0-9]+\")) return VAR_1.EMPTY;\n\n        String VAR_5 = VAR_1.EMPTY;\n\n        /* COMMENT_2 */\n        if (VAR_0.matches(\"[a-zA-Z0-9\\\\s]+\")) {\n            /* COMMENT_3 */\n            String[] VAR_6 = VAR_0.split(\"(?=[A-Z\\\\s])\");\n            if (VAR_6.length == 1) {\n                VAR_5 = VAR_0;\n            } else {\n                StringBuilder VAR_7 = new StringBuilder();\n                for (String VAR_8 : VAR_6) {\n                    if (VAR_8.trim().length() > 0) {\n                        VAR_7.append(VAR_8.trim(), 0, 1);\n                    }\n                }\n                VAR_5 = VAR_7.toString();\n            }\n\n        } else {\n            /* COMMENT_4 */\n            VAR_0 = VAR_0.replaceAll(\" \", \"\");\n            try {\n                VAR_5 = VAR_9.convertToPinyinFirstCharString(VAR_0, \"\", false);\n            } catch (Exception VAR_10) {\n                VAR_11.error(\"QuickCode shorting error : \" + VAR_0, VAR_10);\n            }\n        }\n\n        return VAR_12.maxstr(VAR_5, 50).toUpperCase();\n    }",
  "func_graph_path_before": "getrebuild/rebuild/c9474f84e5f376dd2ade2078e3039961a9425da7/QuickCodeReindexTask.java/vul/before/0.json",
  "func": "public static String generateQuickCode(String nameVal) {\n        if (StringUtils.isBlank(nameVal)) return StringUtils.EMPTY;\n\n        if (nameVal.length() > 100) nameVal = nameVal.substring(0, 100);\n\n        if (EasyPhone.isPhone(nameVal) || EasyEmail.isEmail(nameVal) || EasyUrl.isUrl(nameVal)) return StringUtils.EMPTY;\n\n        // 提取 0-9+a-z+A-Z+中文+空格，忽略特殊字符\n        nameVal = nameVal.replaceAll(\"[^a-zA-Z0-9\\\\s\\u4e00-\\u9fa5]\", \"\");\n        // 忽略数字或小字母\n        if (nameVal.matches(\"[a-z0-9]+\")) return StringUtils.EMPTY;\n\n        String quickCode = nameVal;\n\n        if (nameVal.matches(\"[a-zA-Z0-9\\\\s]+\")) {\n            // 仅包含字母数字或空格\n        } else {\n            // v3.3 拼音全拼\n            try {\n                quickCode = HanLP.convertToPinyinString(nameVal, \"\", Boolean.FALSE);\n            } catch (Exception e) {\n                log.error(\"QuickCode shorting error : \" + nameVal, e);\n                quickCode = StringUtils.EMPTY;\n            }\n        }\n\n        // 去除空格\n        quickCode = quickCode.replaceAll(\" \", \"\");\n        return CommonsUtils.maxstr(quickCode, 50).toUpperCase();\n    }",
  "abstract_func": "public static String generateQuickCode(String VAR_0) {\n        if (VAR_1.isBlank(VAR_0)) return VAR_1.EMPTY;\n\n        if (VAR_0.length() > 100) VAR_0 = VAR_0.substring(0, 100);\n\n        if (VAR_2.isPhone(VAR_0) || VAR_3.isEmail(VAR_0) || VAR_4.isUrl(VAR_0)) return VAR_1.EMPTY;\n\n        /* COMMENT_0 */\n        VAR_0 = VAR_0.replaceAll(\"[^a-zA-Z0-9\\\\s\\u4e00-\\u9fa5]\", \"\");\n        /* COMMENT_1 */\n        if (VAR_0.matches(\"[a-z0-9]+\")) return VAR_1.EMPTY;\n\n        String VAR_5 = VAR_0;\n\n        if (VAR_0.matches(\"[a-zA-Z0-9\\\\s]+\")) {\n            /* COMMENT_2 */\n        } else {\n            /* COMMENT_3 */\n            try {\n                VAR_5 = VAR_6.convertToPinyinString(VAR_0, \"\", VAR_7.FALSE);\n            } catch (Exception VAR_8) {\n                VAR_9.error(\"QuickCode shorting error : \" + VAR_0, VAR_8);\n                VAR_5 = VAR_1.EMPTY;\n            }\n        }\n\n        /* COMMENT_4 */\n        VAR_5 = VAR_5.replaceAll(\" \", \"\");\n        return VAR_10.maxstr(VAR_5, 50).toUpperCase();\n    }",
  "func_graph_path": "getrebuild/rebuild/c9474f84e5f376dd2ade2078e3039961a9425da7/QuickCodeReindexTask.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -10,33 +10,21 @@\n         // 忽略数字或小字母\n         if (nameVal.matches(\"[a-z0-9]+\")) return StringUtils.EMPTY;\n \n-        String quickCode = StringUtils.EMPTY;\n+        String quickCode = nameVal;\n \n-        // 仅包含字母数字或空格\n         if (nameVal.matches(\"[a-zA-Z0-9\\\\s]+\")) {\n-            // 提取英文单词的首字母\n-            String[] asplit = nameVal.split(\"(?=[A-Z\\\\s])\");\n-            if (asplit.length == 1) {\n-                quickCode = nameVal;\n-            } else {\n-                StringBuilder sb = new StringBuilder();\n-                for (String a : asplit) {\n-                    if (a.trim().length() > 0) {\n-                        sb.append(a.trim(), 0, 1);\n-                    }\n-                }\n-                quickCode = sb.toString();\n-            }\n-\n+            // 仅包含字母数字或空格\n         } else {\n-            // 拼音首字母\n-            nameVal = nameVal.replaceAll(\" \", \"\");\n+            // v3.3 拼音全拼\n             try {\n-                quickCode = HanLP.convertToPinyinFirstCharString(nameVal, \"\", false);\n+                quickCode = HanLP.convertToPinyinString(nameVal, \"\", Boolean.FALSE);\n             } catch (Exception e) {\n                 log.error(\"QuickCode shorting error : \" + nameVal, e);\n+                quickCode = StringUtils.EMPTY;\n             }\n         }\n \n+        // 去除空格\n+        quickCode = quickCode.replaceAll(\" \", \"\");\n         return CommonsUtils.maxstr(quickCode, 50).toUpperCase();\n     }",
  "diff_line_info": {
    "deleted_lines": [
      "        String quickCode = StringUtils.EMPTY;",
      "        // 仅包含字母数字或空格",
      "            // 提取英文单词的首字母",
      "            String[] asplit = nameVal.split(\"(?=[A-Z\\\\s])\");",
      "            if (asplit.length == 1) {",
      "                quickCode = nameVal;",
      "            } else {",
      "                StringBuilder sb = new StringBuilder();",
      "                for (String a : asplit) {",
      "                    if (a.trim().length() > 0) {",
      "                        sb.append(a.trim(), 0, 1);",
      "                    }",
      "                }",
      "                quickCode = sb.toString();",
      "            }",
      "",
      "            // 拼音首字母",
      "            nameVal = nameVal.replaceAll(\" \", \"\");",
      "                quickCode = HanLP.convertToPinyinFirstCharString(nameVal, \"\", false);"
    ],
    "added_lines": [
      "        String quickCode = nameVal;",
      "            // 仅包含字母数字或空格",
      "            // v3.3 拼音全拼",
      "                quickCode = HanLP.convertToPinyinString(nameVal, \"\", Boolean.FALSE);",
      "                quickCode = StringUtils.EMPTY;",
      "        // 去除空格",
      "        quickCode = quickCode.replaceAll(\" \", \"\");"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/getrebuild/rebuild/pull/595",
  "description": {
    "pr_info": {
      "title": "H5 sync2",
      "number": 595
    },
    "comment": [
      "Most styles:\r\n1. Nav copy\r\n2. Arrow for form line \r\n3. Quick-code full-pinyin\r\n4. Open Tag of field\r\n5. feat: `advListFilterTabs` (boss-key)\r\n6. Map search\r\n7. feat: Can input page-no on list\r\n8. CVE fix"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 0.9"
}