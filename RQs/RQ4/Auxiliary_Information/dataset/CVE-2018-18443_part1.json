{
  "cve_id": "CVE-2018-18443",
  "cwe_ids": [
    "CWE-772"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "AcademySoftwareFoundation/openexr",
  "commit_msg": "Fix #350 - memory leak on exit\n\nThis fixes CVE-2018-18443, the last thread pool provider set into the\npool was not being correctly cleaned up at shutdown of the thread pool.\n\nSigned-off-by: Kimball Thurston <kdt3rd@gmail.com>",
  "commit_hash": "adbc1900cb9d25fcc4df008d4008b781cf2fa4f8",
  "git_url": "https://github.com/AcademySoftwareFoundation/openexr/commit/adbc1900cb9d25fcc4df008d4008b781cf2fa4f8",
  "file_path": "IlmBase/IlmThread/IlmThreadPool.cpp",
  "func_name": "ThreadPool::Data::~Data",
  "func_before": "ThreadPool::Data::~Data()\n{\n#ifdef ILMBASE_FORCE_CXX03\n    provider->finish();\n#else\n    ThreadPoolProvider *p = provider.load( std::memory_order_relaxed );\n    p->finish();\n#endif\n}",
  "abstract_func_before": "ThreadPool::Data::~VAR_0()\n{\n#ifdef VAR_1\n    VAR_2->finish();\n#else\n    ThreadPoolProvider *VAR_3 = VAR_2.load( std::memory_order_relaxed );\n    VAR_3->finish();\n#endif\n}",
  "func_graph_path_before": "AcademySoftwareFoundation/openexr/adbc1900cb9d25fcc4df008d4008b781cf2fa4f8/IlmThreadPool.cpp/vul/before/0.json",
  "func": "ThreadPool::Data::~Data()\n{\n#ifdef ILMBASE_FORCE_CXX03\n    provider->finish();\n    delete provider;\n#else\n    ThreadPoolProvider *p = provider.load( std::memory_order_relaxed );\n    p->finish();\n    delete p;\n#endif\n}",
  "abstract_func": "ThreadPool::Data::~VAR_0()\n{\n#ifdef VAR_1\n    VAR_2->finish();\n    delete VAR_2;\n#else\n    ThreadPoolProvider *VAR_3 = VAR_2.load( std::memory_order_relaxed );\n    VAR_3->finish();\n    delete VAR_3;\n#endif\n}",
  "func_graph_path": "AcademySoftwareFoundation/openexr/adbc1900cb9d25fcc4df008d4008b781cf2fa4f8/IlmThreadPool.cpp/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -2,8 +2,10 @@\n {\n #ifdef ILMBASE_FORCE_CXX03\n     provider->finish();\n+    delete provider;\n #else\n     ThreadPoolProvider *p = provider.load( std::memory_order_relaxed );\n     p->finish();\n+    delete p;\n #endif\n }",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "    delete provider;",
      "    delete p;"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/AcademySoftwareFoundation/openexr/pull/412",
  "description": {
    "pr_info": {
      "title": "Fix #350 - memory leak on exit",
      "number": 412
    },
    "comment": [
      "This fixes CVE-2018-18443, the last thread pool provider set into the\r\npool was not being correctly cleaned up at shutdown of the thread pool.\r\n\r\nSigned-off-by: Kimball Thurston <kdt3rd@gmail.com>",
      "Looks good to me."
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 1.0\n\n**Reasoning:**\nThe patch explicitly fixes a memory leak confirmed as a security vulnerability (CVE-2018-18443), and the code changes directly address the issue by cleaning up resources correctly. There's no ambiguity; the classification is certain."
}