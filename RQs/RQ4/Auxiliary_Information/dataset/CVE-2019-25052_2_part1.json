{
  "cve_id": "CVE-2019-25052",
  "cwe_ids": [
    "CWE-327"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "OP-TEE/optee_os",
  "commit_msg": "cryp: prevent direct calls to update and final functions\n\nWith inconsistent or malformed data it has been possible to call\n\"update\" and \"final\" crypto functions directly. Using a fuzzer tool [1]\nwe have seen that this results in asserts, i.e., a crash that\npotentially could leak sensitive information.\n\nBy setting the state (initialized) in the crypto context (i.e., the\ntee_cryp_state) at the end of all syscall_*_init functions and then add\na check of the state at the beginning of all update and final functions,\n  we prevent direct entrance to the \"update\" and \"final\" functions.\n\n[1] https://github.com/MartijnB/optee_fuzzer\n\nFixes: OP-TEE-2019-0021\n\nSigned-off-by: Joakim Bech <joakim.bech@linaro.org>\nReported-by: Martijn Bogaard <bogaard@riscure.com>\nAcked-by: Jerome Forissier <jerome.forissier@linaro.org>\nReviewed-by: Jens Wiklander <jens.wiklander@linaro.org>",
  "commit_hash": "34a08bec755670ea0490cb53bbc68058cafc69b6",
  "git_url": "https://github.com/OP-TEE/optee_os/commit/34a08bec755670ea0490cb53bbc68058cafc69b6",
  "file_path": "core/tee/tee_svc_cryp.c",
  "func_name": "syscall_cryp_state_copy",
  "func_before": "TEE_Result syscall_cryp_state_copy(unsigned long dst, unsigned long src)\n{\n\tTEE_Result res;\n\tstruct tee_cryp_state *cs_dst;\n\tstruct tee_cryp_state *cs_src;\n\tstruct tee_ta_session *sess;\n\n\tres = tee_ta_get_current_session(&sess);\n\tif (res != TEE_SUCCESS)\n\t\treturn res;\n\n\tres = tee_svc_cryp_get_state(sess, tee_svc_uref_to_vaddr(dst), &cs_dst);\n\tif (res != TEE_SUCCESS)\n\t\treturn res;\n\n\tres = tee_svc_cryp_get_state(sess, tee_svc_uref_to_vaddr(src), &cs_src);\n\tif (res != TEE_SUCCESS)\n\t\treturn res;\n\tif (cs_dst->algo != cs_src->algo || cs_dst->mode != cs_src->mode)\n\t\treturn TEE_ERROR_BAD_PARAMETERS;\n\n\tswitch (TEE_ALG_GET_CLASS(cs_src->algo)) {\n\tcase TEE_OPERATION_CIPHER:\n\t\tcrypto_cipher_copy_state(cs_dst->ctx, cs_src->ctx,\n\t\t\t\t\t cs_src->algo);\n\t\tbreak;\n\tcase TEE_OPERATION_AE:\n\t\tcrypto_authenc_copy_state(cs_dst->ctx, cs_src->ctx,\n\t\t\t\t\t  cs_src->algo);\n\t\tbreak;\n\tcase TEE_OPERATION_DIGEST:\n\t\tcrypto_hash_copy_state(cs_dst->ctx, cs_src->ctx, cs_src->algo);\n\t\tbreak;\n\tcase TEE_OPERATION_MAC:\n\t\tcrypto_mac_copy_state(cs_dst->ctx, cs_src->ctx, cs_src->algo);\n\t\tbreak;\n\tdefault:\n\t\treturn TEE_ERROR_BAD_STATE;\n\t}\n\n\treturn TEE_SUCCESS;\n}",
  "abstract_func_before": "TEE_Result syscall_cryp_state_copy(unsigned long VAR_0, unsigned long VAR_1)\n{\n\tTEE_Result VAR_2;\n\tstruct tee_cryp_state *VAR_3;\n\tstruct tee_cryp_state *VAR_4;\n\tstruct tee_ta_session *VAR_5;\n\n\tVAR_2 = tee_ta_get_current_session(&VAR_5);\n\tif (VAR_2 != VAR_6)\n\t\treturn VAR_2;\n\n\tVAR_2 = tee_svc_cryp_get_state(VAR_5, tee_svc_uref_to_vaddr(VAR_0), &VAR_3);\n\tif (VAR_2 != VAR_6)\n\t\treturn VAR_2;\n\n\tVAR_2 = tee_svc_cryp_get_state(VAR_5, tee_svc_uref_to_vaddr(VAR_1), &VAR_4);\n\tif (VAR_2 != VAR_6)\n\t\treturn VAR_2;\n\tif (VAR_3->algo != VAR_4->algo || VAR_3->mode != VAR_4->mode)\n\t\treturn VAR_7;\n\n\tswitch (TEE_ALG_GET_CLASS(VAR_4->algo)) {\n\tcase VAR_8:\n\t\tcrypto_cipher_copy_state(VAR_3->ctx, VAR_4->ctx,\n\t\t\t\t\t VAR_4->algo);\n\t\tbreak;\n\tcase VAR_9:\n\t\tcrypto_authenc_copy_state(VAR_3->ctx, VAR_4->ctx,\n\t\t\t\t\t  VAR_4->algo);\n\t\tbreak;\n\tcase VAR_10:\n\t\tcrypto_hash_copy_state(VAR_3->ctx, VAR_4->ctx, VAR_4->algo);\n\t\tbreak;\n\tcase VAR_11:\n\t\tcrypto_mac_copy_state(VAR_3->ctx, VAR_4->ctx, VAR_4->algo);\n\t\tbreak;\n\tdefault:\n\t\treturn VAR_12;\n\t}\n\n\treturn VAR_6;\n}",
  "func_graph_path_before": "OP-TEE/optee_os/34a08bec755670ea0490cb53bbc68058cafc69b6/tee_svc_cryp.c/vul/before/3.json",
  "func": "TEE_Result syscall_cryp_state_copy(unsigned long dst, unsigned long src)\n{\n\tTEE_Result res;\n\tstruct tee_cryp_state *cs_dst;\n\tstruct tee_cryp_state *cs_src;\n\tstruct tee_ta_session *sess;\n\n\tres = tee_ta_get_current_session(&sess);\n\tif (res != TEE_SUCCESS)\n\t\treturn res;\n\n\tres = tee_svc_cryp_get_state(sess, tee_svc_uref_to_vaddr(dst), &cs_dst);\n\tif (res != TEE_SUCCESS)\n\t\treturn res;\n\n\tres = tee_svc_cryp_get_state(sess, tee_svc_uref_to_vaddr(src), &cs_src);\n\tif (res != TEE_SUCCESS)\n\t\treturn res;\n\tif (cs_dst->algo != cs_src->algo || cs_dst->mode != cs_src->mode)\n\t\treturn TEE_ERROR_BAD_PARAMETERS;\n\n\tswitch (TEE_ALG_GET_CLASS(cs_src->algo)) {\n\tcase TEE_OPERATION_CIPHER:\n\t\tcrypto_cipher_copy_state(cs_dst->ctx, cs_src->ctx,\n\t\t\t\t\t cs_src->algo);\n\t\tbreak;\n\tcase TEE_OPERATION_AE:\n\t\tcrypto_authenc_copy_state(cs_dst->ctx, cs_src->ctx,\n\t\t\t\t\t  cs_src->algo);\n\t\tbreak;\n\tcase TEE_OPERATION_DIGEST:\n\t\tcrypto_hash_copy_state(cs_dst->ctx, cs_src->ctx, cs_src->algo);\n\t\tbreak;\n\tcase TEE_OPERATION_MAC:\n\t\tcrypto_mac_copy_state(cs_dst->ctx, cs_src->ctx, cs_src->algo);\n\t\tbreak;\n\tdefault:\n\t\treturn TEE_ERROR_BAD_STATE;\n\t}\n\n\tcs_dst->state = cs_src->state;\n\n\treturn TEE_SUCCESS;\n}",
  "abstract_func": "TEE_Result syscall_cryp_state_copy(unsigned long VAR_0, unsigned long VAR_1)\n{\n\tTEE_Result VAR_2;\n\tstruct tee_cryp_state *VAR_3;\n\tstruct tee_cryp_state *VAR_4;\n\tstruct tee_ta_session *VAR_5;\n\n\tVAR_2 = tee_ta_get_current_session(&VAR_5);\n\tif (VAR_2 != VAR_6)\n\t\treturn VAR_2;\n\n\tVAR_2 = tee_svc_cryp_get_state(VAR_5, tee_svc_uref_to_vaddr(VAR_0), &VAR_3);\n\tif (VAR_2 != VAR_6)\n\t\treturn VAR_2;\n\n\tVAR_2 = tee_svc_cryp_get_state(VAR_5, tee_svc_uref_to_vaddr(VAR_1), &VAR_4);\n\tif (VAR_2 != VAR_6)\n\t\treturn VAR_2;\n\tif (VAR_3->algo != VAR_4->algo || VAR_3->mode != VAR_4->mode)\n\t\treturn VAR_7;\n\n\tswitch (TEE_ALG_GET_CLASS(VAR_4->algo)) {\n\tcase VAR_8:\n\t\tcrypto_cipher_copy_state(VAR_3->ctx, VAR_4->ctx,\n\t\t\t\t\t VAR_4->algo);\n\t\tbreak;\n\tcase VAR_9:\n\t\tcrypto_authenc_copy_state(VAR_3->ctx, VAR_4->ctx,\n\t\t\t\t\t  VAR_4->algo);\n\t\tbreak;\n\tcase VAR_10:\n\t\tcrypto_hash_copy_state(VAR_3->ctx, VAR_4->ctx, VAR_4->algo);\n\t\tbreak;\n\tcase VAR_11:\n\t\tcrypto_mac_copy_state(VAR_3->ctx, VAR_4->ctx, VAR_4->algo);\n\t\tbreak;\n\tdefault:\n\t\treturn VAR_12;\n\t}\n\n\tVAR_3->state = VAR_4->state;\n\n\treturn VAR_6;\n}",
  "func_graph_path": "OP-TEE/optee_os/34a08bec755670ea0490cb53bbc68058cafc69b6/tee_svc_cryp.c/vul/after/3.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -38,5 +38,7 @@\n \t\treturn TEE_ERROR_BAD_STATE;\n \t}\n \n+\tcs_dst->state = cs_src->state;\n+\n \treturn TEE_SUCCESS;\n }",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "\tcs_dst->state = cs_src->state;",
      ""
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/OP-TEE/optee_os/pull/3316",
  "description": {
    "pr_info": {
      "title": "Riscure fuzzer vuln",
      "number": 3316
    },
    "comment": [
      "Fixes for potential security issues found by Riscure's fuzzer tool.\r\n\r\nI've tested this in QEMU v7, no regressions seen.\r\n```bash\r\n24105 subtests of which 0 failed\r\n96 test cases of which 0 failed\r\n0 test cases were skipped\r\nTEE test application done!\r\n```",
      "Squashed, rebased and tag(s) applied (should be) ready for merge! Thanks!"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 1.0"
}