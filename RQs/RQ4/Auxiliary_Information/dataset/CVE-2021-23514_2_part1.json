{
  "cve_id": "CVE-2021-23514",
  "cwe_ids": [
    "CWE-79",
    "CWE-22"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:N/A:N",
  "cvss_is_v3": false,
  "repo_name": "CrowCpp/Crow",
  "commit_msg": "Fixed another vulnerability in mustache file loading\nand made the file sanitizer a copy-less function",
  "commit_hash": "e688cbd18ea85a4a61b32be4e8d6b37c66943c4a",
  "git_url": "https://github.com/CrowCpp/Crow/commit/e688cbd18ea85a4a61b32be4e8d6b37c66943c4a",
  "file_path": "include/crow/utility.h",
  "func_name": "sanitize_filename",
  "func_before": "inline std::string sanitize_filename(std::string data, char replacement = '_')\n        {\n            unsigned char i = 0, length_limit;\n\n            length_limit = data.length() < 255 ? data.length() : 255;\n            data = data.substr(0, length_limit);\n\n            for (; i < length_limit; i++)\n            {\n                switch (data[i])\n                {\n                    case '/':\n                    case '?':\n                    case '<':\n                    case '>':\n                    case '\\\\':\n                    case ':':\n                    case '*':\n                    case '|':\n                    case '\\\"':\n\n                    case 0x00:\n                    case 0x01:\n                    case 0x02:\n                    case 0x03:\n                    case 0x04:\n                    case 0x05:\n                    case 0x06:\n                    case 0x07:\n                    case 0x08:\n                    case 0x09:\n                    case 0x0a:\n                    case 0x0b:\n                    case 0x0c:\n                    case 0x0d:\n                    case 0x0e:\n                    case 0x0f:\n                    case 0x10:\n                    case 0x11:\n                    case 0x12:\n                    case 0x13:\n                    case 0x14:\n                    case 0x15:\n                    case 0x16:\n                    case 0x17:\n                    case 0x18:\n                    case 0x19:\n                    case 0x1a:\n                    case 0x1b:\n                    case 0x1c:\n                    case 0x1d:\n                    case 0x1e:\n                    case 0x1f:\n\n                    case 0x80:\n                    case 0x81:\n                    case 0x82:\n                    case 0x83:\n                    case 0x84:\n                    case 0x85:\n                    case 0x86:\n                    case 0x87:\n                    case 0x88:\n                    case 0x89:\n                    case 0x8a:\n                    case 0x8b:\n                    case 0x8c:\n                    case 0x8d:\n                    case 0x8e:\n                    case 0x8f:\n                    case 0x90:\n                    case 0x91:\n                    case 0x92:\n                    case 0x93:\n                    case 0x94:\n                    case 0x95:\n                    case 0x96:\n                    case 0x97:\n                    case 0x98:\n                    case 0x99:\n                    case 0x9a:\n                    case 0x9b:\n                    case 0x9c:\n                    case 0x9d:\n                    case 0x9e:\n                    case 0x9f:\n\n                        data[i] = replacement;\n                        break;\n\n                    default:\n                        break;\n                }\n            }\n            std::string str_replacement(1, replacement);\n\n            boost::ireplace_all(data, \"..\", str_replacement);\n\n            boost::ireplace_all(data, \"CON\", str_replacement);\n            boost::ireplace_all(data, \"PRN\", str_replacement);\n            boost::ireplace_all(data, \"AUX\", str_replacement);\n            boost::ireplace_all(data, \"NUL\", str_replacement);\n            boost::ireplace_all(data, \"COM1\", str_replacement);\n            boost::ireplace_all(data, \"COM2\", str_replacement);\n            boost::ireplace_all(data, \"COM3\", str_replacement);\n            boost::ireplace_all(data, \"COM4\", str_replacement);\n            boost::ireplace_all(data, \"COM5\", str_replacement);\n            boost::ireplace_all(data, \"COM6\", str_replacement);\n            boost::ireplace_all(data, \"COM7\", str_replacement);\n            boost::ireplace_all(data, \"COM8\", str_replacement);\n            boost::ireplace_all(data, \"COM9\", str_replacement);\n            boost::ireplace_all(data, \"LPT1\", str_replacement);\n            boost::ireplace_all(data, \"LPT2\", str_replacement);\n            boost::ireplace_all(data, \"LPT3\", str_replacement);\n            boost::ireplace_all(data, \"LPT4\", str_replacement);\n            boost::ireplace_all(data, \"LPT5\", str_replacement);\n            boost::ireplace_all(data, \"LPT6\", str_replacement);\n            boost::ireplace_all(data, \"LPT7\", str_replacement);\n            boost::ireplace_all(data, \"LPT8\", str_replacement);\n            boost::ireplace_all(data, \"LPT9\", str_replacement);\n\n            return data;\n        }",
  "abstract_func_before": "inline std::string sanitize_filename(std::string VAR_0, char VAR_1 = '_')\n        {\n            unsigned char VAR_2 = 0, VAR_3;\n\n            VAR_3 = VAR_0.length() < 255 ? VAR_0.length() : 255;\n            VAR_0 = VAR_0.substr(0, VAR_3);\n\n            for (; VAR_2 < VAR_3; VAR_2++)\n            {\n                switch (VAR_0[VAR_2])\n                {\n                    case '/':\n                    case '?':\n                    case '<':\n                    case '>':\n                    case '\\\\':\n                    case ':':\n                    case '*':\n                    case '|':\n                    case '\\\"':\n\n                    case 0x00:\n                    case 0x01:\n                    case 0x02:\n                    case 0x03:\n                    case 0x04:\n                    case 0x05:\n                    case 0x06:\n                    case 0x07:\n                    case 0x08:\n                    case 0x09:\n                    case 0x0a:\n                    case 0x0b:\n                    case 0x0c:\n                    case 0x0d:\n                    case 0x0e:\n                    case 0x0f:\n                    case 0x10:\n                    case 0x11:\n                    case 0x12:\n                    case 0x13:\n                    case 0x14:\n                    case 0x15:\n                    case 0x16:\n                    case 0x17:\n                    case 0x18:\n                    case 0x19:\n                    case 0x1a:\n                    case 0x1b:\n                    case 0x1c:\n                    case 0x1d:\n                    case 0x1e:\n                    case 0x1f:\n\n                    case 0x80:\n                    case 0x81:\n                    case 0x82:\n                    case 0x83:\n                    case 0x84:\n                    case 0x85:\n                    case 0x86:\n                    case 0x87:\n                    case 0x88:\n                    case 0x89:\n                    case 0x8a:\n                    case 0x8b:\n                    case 0x8c:\n                    case 0x8d:\n                    case 0x8e:\n                    case 0x8f:\n                    case 0x90:\n                    case 0x91:\n                    case 0x92:\n                    case 0x93:\n                    case 0x94:\n                    case 0x95:\n                    case 0x96:\n                    case 0x97:\n                    case 0x98:\n                    case 0x99:\n                    case 0x9a:\n                    case 0x9b:\n                    case 0x9c:\n                    case 0x9d:\n                    case 0x9e:\n                    case 0x9f:\n\n                        VAR_0[VAR_2] = VAR_1;\n                        break;\n\n                    default:\n                        break;\n                }\n            }\n            std::string VAR_4(1, VAR_1);\n\n            boost::ireplace_all(VAR_0, \"..\", VAR_4);\n\n            boost::ireplace_all(VAR_0, \"CON\", VAR_4);\n            boost::ireplace_all(VAR_0, \"PRN\", VAR_4);\n            boost::ireplace_all(VAR_0, \"AUX\", VAR_4);\n            boost::ireplace_all(VAR_0, \"NUL\", VAR_4);\n            boost::ireplace_all(VAR_0, \"COM1\", VAR_4);\n            boost::ireplace_all(VAR_0, \"COM2\", VAR_4);\n            boost::ireplace_all(VAR_0, \"COM3\", VAR_4);\n            boost::ireplace_all(VAR_0, \"COM4\", VAR_4);\n            boost::ireplace_all(VAR_0, \"COM5\", VAR_4);\n            boost::ireplace_all(VAR_0, \"COM6\", VAR_4);\n            boost::ireplace_all(VAR_0, \"COM7\", VAR_4);\n            boost::ireplace_all(VAR_0, \"COM8\", VAR_4);\n            boost::ireplace_all(VAR_0, \"COM9\", VAR_4);\n            boost::ireplace_all(VAR_0, \"LPT1\", VAR_4);\n            boost::ireplace_all(VAR_0, \"LPT2\", VAR_4);\n            boost::ireplace_all(VAR_0, \"LPT3\", VAR_4);\n            boost::ireplace_all(VAR_0, \"LPT4\", VAR_4);\n            boost::ireplace_all(VAR_0, \"LPT5\", VAR_4);\n            boost::ireplace_all(VAR_0, \"LPT6\", VAR_4);\n            boost::ireplace_all(VAR_0, \"LPT7\", VAR_4);\n            boost::ireplace_all(VAR_0, \"LPT8\", VAR_4);\n            boost::ireplace_all(VAR_0, \"LPT9\", VAR_4);\n\n            return VAR_0;\n        }",
  "func_graph_path_before": "CrowCpp/Crow/e688cbd18ea85a4a61b32be4e8d6b37c66943c4a/utility.h/vul/before/0.json",
  "func": "inline static void sanitize_filename(std::string& data, char replacement = '_')\n        {\n            unsigned char i = 0, length_limit;\n\n            length_limit = data.length() < 255 ? data.length() : 255;\n            data = data.substr(0, length_limit);\n\n            for (; i < length_limit; i++)\n            {\n                switch ((unsigned char)data[i])\n                {\n                    // WARNING While I can't see how using '\\' or '/' would cause a problem, it still warrants an investigation\n                    //case '/':\n                    case '?':\n                    case '<':\n                    case '>':\n                    //case '\\\\':\n                    case ':':\n                    case '*':\n                    case '|':\n                    case '\\\"':\n\n                    case 0x00:\n                    case 0x01:\n                    case 0x02:\n                    case 0x03:\n                    case 0x04:\n                    case 0x05:\n                    case 0x06:\n                    case 0x07:\n                    case 0x08:\n                    case 0x09:\n                    case 0x0a:\n                    case 0x0b:\n                    case 0x0c:\n                    case 0x0d:\n                    case 0x0e:\n                    case 0x0f:\n                    case 0x10:\n                    case 0x11:\n                    case 0x12:\n                    case 0x13:\n                    case 0x14:\n                    case 0x15:\n                    case 0x16:\n                    case 0x17:\n                    case 0x18:\n                    case 0x19:\n                    case 0x1a:\n                    case 0x1b:\n                    case 0x1c:\n                    case 0x1d:\n                    case 0x1e:\n                    case 0x1f:\n\n                    case 0x80:\n                    case 0x81:\n                    case 0x82:\n                    case 0x83:\n                    case 0x84:\n                    case 0x85:\n                    case 0x86:\n                    case 0x87:\n                    case 0x88:\n                    case 0x89:\n                    case 0x8a:\n                    case 0x8b:\n                    case 0x8c:\n                    case 0x8d:\n                    case 0x8e:\n                    case 0x8f:\n                    case 0x90:\n                    case 0x91:\n                    case 0x92:\n                    case 0x93:\n                    case 0x94:\n                    case 0x95:\n                    case 0x96:\n                    case 0x97:\n                    case 0x98:\n                    case 0x99:\n                    case 0x9a:\n                    case 0x9b:\n                    case 0x9c:\n                    case 0x9d:\n                    case 0x9e:\n                    case 0x9f:\n\n                        data[i] = replacement;\n                        break;\n\n                    default:\n                        break;\n                }\n            }\n            std::string str_replacement(1, replacement);\n\n            boost::ireplace_all(data, \"..\", str_replacement);\n\n            boost::ireplace_all(data, \"CON\", str_replacement);\n            boost::ireplace_all(data, \"PRN\", str_replacement);\n            boost::ireplace_all(data, \"AUX\", str_replacement);\n            boost::ireplace_all(data, \"NUL\", str_replacement);\n            boost::ireplace_all(data, \"COM1\", str_replacement);\n            boost::ireplace_all(data, \"COM2\", str_replacement);\n            boost::ireplace_all(data, \"COM3\", str_replacement);\n            boost::ireplace_all(data, \"COM4\", str_replacement);\n            boost::ireplace_all(data, \"COM5\", str_replacement);\n            boost::ireplace_all(data, \"COM6\", str_replacement);\n            boost::ireplace_all(data, \"COM7\", str_replacement);\n            boost::ireplace_all(data, \"COM8\", str_replacement);\n            boost::ireplace_all(data, \"COM9\", str_replacement);\n            boost::ireplace_all(data, \"LPT1\", str_replacement);\n            boost::ireplace_all(data, \"LPT2\", str_replacement);\n            boost::ireplace_all(data, \"LPT3\", str_replacement);\n            boost::ireplace_all(data, \"LPT4\", str_replacement);\n            boost::ireplace_all(data, \"LPT5\", str_replacement);\n            boost::ireplace_all(data, \"LPT6\", str_replacement);\n            boost::ireplace_all(data, \"LPT7\", str_replacement);\n            boost::ireplace_all(data, \"LPT8\", str_replacement);\n            boost::ireplace_all(data, \"LPT9\", str_replacement);\n        }",
  "abstract_func": "inline static void sanitize_filename(std::string& VAR_0, char VAR_1 = '_')\n        {\n            unsigned char VAR_2 = 0, VAR_3;\n\n            VAR_3 = VAR_0.length() < 255 ? VAR_0.length() : 255;\n            VAR_0 = VAR_0.substr(0, VAR_3);\n\n            for (; VAR_2 < VAR_3; VAR_2++)\n            {\n                switch ((unsigned char)VAR_0[VAR_2])\n                {\n                    /* COMMENT_0 */\n                    /* COMMENT_1 */\n                    case '?':\n                    case '<':\n                    case '>':\n                    /* COMMENT_2 */\n                    case ':':\n                    case '*':\n                    case '|':\n                    case '\\\"':\n\n                    case 0x00:\n                    case 0x01:\n                    case 0x02:\n                    case 0x03:\n                    case 0x04:\n                    case 0x05:\n                    case 0x06:\n                    case 0x07:\n                    case 0x08:\n                    case 0x09:\n                    case 0x0a:\n                    case 0x0b:\n                    case 0x0c:\n                    case 0x0d:\n                    case 0x0e:\n                    case 0x0f:\n                    case 0x10:\n                    case 0x11:\n                    case 0x12:\n                    case 0x13:\n                    case 0x14:\n                    case 0x15:\n                    case 0x16:\n                    case 0x17:\n                    case 0x18:\n                    case 0x19:\n                    case 0x1a:\n                    case 0x1b:\n                    case 0x1c:\n                    case 0x1d:\n                    case 0x1e:\n                    case 0x1f:\n\n                    case 0x80:\n                    case 0x81:\n                    case 0x82:\n                    case 0x83:\n                    case 0x84:\n                    case 0x85:\n                    case 0x86:\n                    case 0x87:\n                    case 0x88:\n                    case 0x89:\n                    case 0x8a:\n                    case 0x8b:\n                    case 0x8c:\n                    case 0x8d:\n                    case 0x8e:\n                    case 0x8f:\n                    case 0x90:\n                    case 0x91:\n                    case 0x92:\n                    case 0x93:\n                    case 0x94:\n                    case 0x95:\n                    case 0x96:\n                    case 0x97:\n                    case 0x98:\n                    case 0x99:\n                    case 0x9a:\n                    case 0x9b:\n                    case 0x9c:\n                    case 0x9d:\n                    case 0x9e:\n                    case 0x9f:\n\n                        VAR_0[VAR_2] = VAR_1;\n                        break;\n\n                    default:\n                        break;\n                }\n            }\n            std::string VAR_4(1, VAR_1);\n\n            boost::ireplace_all(VAR_0, \"..\", VAR_4);\n\n            boost::ireplace_all(VAR_0, \"CON\", VAR_4);\n            boost::ireplace_all(VAR_0, \"PRN\", VAR_4);\n            boost::ireplace_all(VAR_0, \"AUX\", VAR_4);\n            boost::ireplace_all(VAR_0, \"NUL\", VAR_4);\n            boost::ireplace_all(VAR_0, \"COM1\", VAR_4);\n            boost::ireplace_all(VAR_0, \"COM2\", VAR_4);\n            boost::ireplace_all(VAR_0, \"COM3\", VAR_4);\n            boost::ireplace_all(VAR_0, \"COM4\", VAR_4);\n            boost::ireplace_all(VAR_0, \"COM5\", VAR_4);\n            boost::ireplace_all(VAR_0, \"COM6\", VAR_4);\n            boost::ireplace_all(VAR_0, \"COM7\", VAR_4);\n            boost::ireplace_all(VAR_0, \"COM8\", VAR_4);\n            boost::ireplace_all(VAR_0, \"COM9\", VAR_4);\n            boost::ireplace_all(VAR_0, \"LPT1\", VAR_4);\n            boost::ireplace_all(VAR_0, \"LPT2\", VAR_4);\n            boost::ireplace_all(VAR_0, \"LPT3\", VAR_4);\n            boost::ireplace_all(VAR_0, \"LPT4\", VAR_4);\n            boost::ireplace_all(VAR_0, \"LPT5\", VAR_4);\n            boost::ireplace_all(VAR_0, \"LPT6\", VAR_4);\n            boost::ireplace_all(VAR_0, \"LPT7\", VAR_4);\n            boost::ireplace_all(VAR_0, \"LPT8\", VAR_4);\n            boost::ireplace_all(VAR_0, \"LPT9\", VAR_4);\n        }",
  "func_graph_path": "CrowCpp/Crow/e688cbd18ea85a4a61b32be4e8d6b37c66943c4a/utility.h/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,4 +1,4 @@\n-inline std::string sanitize_filename(std::string data, char replacement = '_')\n+inline static void sanitize_filename(std::string& data, char replacement = '_')\n         {\n             unsigned char i = 0, length_limit;\n \n@@ -7,13 +7,14 @@\n \n             for (; i < length_limit; i++)\n             {\n-                switch (data[i])\n+                switch ((unsigned char)data[i])\n                 {\n-                    case '/':\n+                    // WARNING While I can't see how using '\\' or '/' would cause a problem, it still warrants an investigation\n+                    //case '/':\n                     case '?':\n                     case '<':\n                     case '>':\n-                    case '\\\\':\n+                    //case '\\\\':\n                     case ':':\n                     case '*':\n                     case '|':\n@@ -118,6 +119,4 @@\n             boost::ireplace_all(data, \"LPT7\", str_replacement);\n             boost::ireplace_all(data, \"LPT8\", str_replacement);\n             boost::ireplace_all(data, \"LPT9\", str_replacement);\n-\n-            return data;\n         }",
  "diff_line_info": {
    "deleted_lines": [
      "inline std::string sanitize_filename(std::string data, char replacement = '_')",
      "                switch (data[i])",
      "                    case '/':",
      "                    case '\\\\':",
      "",
      "            return data;"
    ],
    "added_lines": [
      "inline static void sanitize_filename(std::string& data, char replacement = '_')",
      "                switch ((unsigned char)data[i])",
      "                    // WARNING While I can't see how using '\\' or '/' would cause a problem, it still warrants an investigation",
      "                    //case '/':",
      "                    //case '\\\\':"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/CrowCpp/Crow/pull/317",
  "description": {
    "pr_info": {
      "title": "Fix vulnerabilities",
      "number": 317
    },
    "comment": [
      "The PR fixes 2 Vulnerabilities found in Crow.\r\n1. A Path Traversal exploit made possible by Crow's default `static` directory and Mustache's `templates` directory.\r\n2. A Content Injection exploit made possible by Crow's Mustache implementation not escaping some characters.\r\n\r\nOnce merged, This PR, along with #292, #296, and #304 Will be released immediately as part of `v0.3+4`.\r\n\r\nNote: This PR introduces a slowdown between `50µs` and `1.5ms` for any static file or template being loaded (depending on the length of the filename). Therefore I would advise optimization of the `sanitize_filename()` function before the next minor/major release.\r\n\r\nA special Thank you to the [Snyk Security team](https://snyk.io) for their effort in identifying and reporting these vulnerabilities."
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 1.0"
}