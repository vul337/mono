{
  "cve_id": "CVE-2022-21700",
  "cwe_ids": [
    "CWE-400"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "micronaut-projects/micronaut-core",
  "commit_msg": "Use ConversionContext constants where possible instead of class (#2356)\n\nChanges\r\n-------\r\n * Added ArgumentConversionContext constants in ConversionContext\r\n * Replaced Argument.of and use of argument classes with\r\nConversionContext constants where possible\r\n * Added getFirst method in ConvertibleMultiValues that accepts\r\nArgumentConversionContent parameter\r\n\r\nPartially addresses issue #2355",
  "commit_hash": "b8ec32c311689667c69ae7d9f9c3b3a8abc96fe3",
  "git_url": "https://github.com/micronaut-projects/micronaut-core/commit/b8ec32c311689667c69ae7d9f9c3b3a8abc96fe3",
  "file_path": "http-server/src/main/java/io/micronaut/http/server/cors/CorsFilter.java",
  "func_name": "handleResponse",
  "func_before": "protected void handleResponse(HttpRequest<?> request, MutableHttpResponse<?> response) {\n        HttpHeaders headers = request.getHeaders();\n        Optional<String> originHeader = headers.getOrigin();\n        originHeader.ifPresent(requestOrigin -> {\n\n            Optional<CorsOriginConfiguration> optionalConfig = getConfiguration(requestOrigin);\n\n            if (optionalConfig.isPresent()) {\n                CorsOriginConfiguration config = optionalConfig.get();\n\n                if (CorsUtil.isPreflightRequest(request)) {\n                    Optional<HttpMethod> result = headers.getFirst(ACCESS_CONTROL_REQUEST_METHOD, HttpMethod.class);\n                    setAllowMethods(result.get(), response);\n                    Optional<List> allowedHeaders = headers.get(ACCESS_CONTROL_REQUEST_HEADERS, Argument.of(List.class, String.class));\n                    allowedHeaders.ifPresent(val ->\n                        setAllowHeaders(val, response)\n                    );\n\n                    setMaxAge(config.getMaxAge(), response);\n                }\n\n                setOrigin(requestOrigin, response);\n                setVary(response);\n                setExposeHeaders(config.getExposedHeaders(), response);\n                setAllowCredentials(config, response);\n            }\n        });\n    }",
  "abstract_func_before": "protected void handleResponse(HttpRequest<?> VAR_0, MutableHttpResponse<?> VAR_1) {\n        HttpHeaders VAR_2 = VAR_0.getHeaders();\n        Optional<String> VAR_3 = VAR_2.getOrigin();\n        VAR_3.ifPresent(VAR_4 -> {\n\n            Optional<CorsOriginConfiguration> VAR_5 = getConfiguration(VAR_4);\n\n            if (VAR_5.isPresent()) {\n                CorsOriginConfiguration VAR_6 = VAR_5.get();\n\n                if (VAR_7.isPreflightRequest(VAR_0)) {\n                    Optional<HttpMethod> VAR_8 = VAR_2.getFirst(VAR_9, HttpMethod.class);\n                    setAllowMethods(VAR_8.get(), VAR_1);\n                    Optional<List> VAR_10 = VAR_2.get(VAR_11, VAR_12.of(List.class, String.class));\n                    VAR_10.ifPresent(VAR_13 ->\n                        setAllowHeaders(VAR_13, VAR_1)\n                    );\n\n                    setMaxAge(VAR_6.getMaxAge(), VAR_1);\n                }\n\n                setOrigin(VAR_4, VAR_1);\n                setVary(VAR_1);\n                setExposeHeaders(VAR_6.getExposedHeaders(), VAR_1);\n                setAllowCredentials(VAR_6, VAR_1);\n            }\n        });\n    }",
  "func_graph_path_before": "micronaut-projects/micronaut-core/b8ec32c311689667c69ae7d9f9c3b3a8abc96fe3/CorsFilter.java/vul/before/1.json",
  "func": "protected void handleResponse(HttpRequest<?> request, MutableHttpResponse<?> response) {\n        HttpHeaders headers = request.getHeaders();\n        Optional<String> originHeader = headers.getOrigin();\n        originHeader.ifPresent(requestOrigin -> {\n\n            Optional<CorsOriginConfiguration> optionalConfig = getConfiguration(requestOrigin);\n\n            if (optionalConfig.isPresent()) {\n                CorsOriginConfiguration config = optionalConfig.get();\n\n                if (CorsUtil.isPreflightRequest(request)) {\n                    Optional<HttpMethod> result = headers.getFirst(ACCESS_CONTROL_REQUEST_METHOD, CONVERSION_CONTEXT_HTTP_METHOD);\n                    setAllowMethods(result.get(), response);\n                    Optional<List<String>> allowedHeaders = headers.get(ACCESS_CONTROL_REQUEST_HEADERS, ConversionContext.LIST_OF_STRING);\n                    allowedHeaders.ifPresent(val ->\n                        setAllowHeaders(val, response)\n                    );\n\n                    setMaxAge(config.getMaxAge(), response);\n                }\n\n                setOrigin(requestOrigin, response);\n                setVary(response);\n                setExposeHeaders(config.getExposedHeaders(), response);\n                setAllowCredentials(config, response);\n            }\n        });\n    }",
  "abstract_func": "protected void handleResponse(HttpRequest<?> VAR_0, MutableHttpResponse<?> VAR_1) {\n        HttpHeaders VAR_2 = VAR_0.getHeaders();\n        Optional<String> VAR_3 = VAR_2.getOrigin();\n        VAR_3.ifPresent(VAR_4 -> {\n\n            Optional<CorsOriginConfiguration> VAR_5 = getConfiguration(VAR_4);\n\n            if (VAR_5.isPresent()) {\n                CorsOriginConfiguration VAR_6 = VAR_5.get();\n\n                if (VAR_7.isPreflightRequest(VAR_0)) {\n                    Optional<HttpMethod> VAR_8 = VAR_2.getFirst(VAR_9, VAR_10);\n                    setAllowMethods(VAR_8.get(), VAR_1);\n                    Optional<List<String>> VAR_11 = VAR_2.get(VAR_12, VAR_13.LIST_OF_STRING);\n                    VAR_11.ifPresent(VAR_14 ->\n                        setAllowHeaders(VAR_14, VAR_1)\n                    );\n\n                    setMaxAge(VAR_6.getMaxAge(), VAR_1);\n                }\n\n                setOrigin(VAR_4, VAR_1);\n                setVary(VAR_1);\n                setExposeHeaders(VAR_6.getExposedHeaders(), VAR_1);\n                setAllowCredentials(VAR_6, VAR_1);\n            }\n        });\n    }",
  "func_graph_path": "micronaut-projects/micronaut-core/b8ec32c311689667c69ae7d9f9c3b3a8abc96fe3/CorsFilter.java/vul/after/1.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -9,9 +9,9 @@\n                 CorsOriginConfiguration config = optionalConfig.get();\n \n                 if (CorsUtil.isPreflightRequest(request)) {\n-                    Optional<HttpMethod> result = headers.getFirst(ACCESS_CONTROL_REQUEST_METHOD, HttpMethod.class);\n+                    Optional<HttpMethod> result = headers.getFirst(ACCESS_CONTROL_REQUEST_METHOD, CONVERSION_CONTEXT_HTTP_METHOD);\n                     setAllowMethods(result.get(), response);\n-                    Optional<List> allowedHeaders = headers.get(ACCESS_CONTROL_REQUEST_HEADERS, Argument.of(List.class, String.class));\n+                    Optional<List<String>> allowedHeaders = headers.get(ACCESS_CONTROL_REQUEST_HEADERS, ConversionContext.LIST_OF_STRING);\n                     allowedHeaders.ifPresent(val ->\n                         setAllowHeaders(val, response)\n                     );",
  "diff_line_info": {
    "deleted_lines": [
      "                    Optional<HttpMethod> result = headers.getFirst(ACCESS_CONTROL_REQUEST_METHOD, HttpMethod.class);",
      "                    Optional<List> allowedHeaders = headers.get(ACCESS_CONTROL_REQUEST_HEADERS, Argument.of(List.class, String.class));"
    ],
    "added_lines": [
      "                    Optional<HttpMethod> result = headers.getFirst(ACCESS_CONTROL_REQUEST_METHOD, CONVERSION_CONTEXT_HTTP_METHOD);",
      "                    Optional<List<String>> allowedHeaders = headers.get(ACCESS_CONTROL_REQUEST_HEADERS, ConversionContext.LIST_OF_STRING);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/micronaut-projects/micronaut-core/pull/2356",
  "description": {
    "pr_info": {
      "title": "Use Argument constants where possible instead of class",
      "number": 2356
    },
    "comment": [
      "Changes\r\n-------\r\n * Added ArgumentConversionContext constants in ConversionContext\r\n * Replaced Argument.of and use of argument classes with\r\nConversionContext constants where possible\r\n * Added getFirst method in ConvertibleMultiValues that accepts\r\nArgumentConversionContent parameter\r\n\r\nPartially addresses issue #2355",
      "Nice progress"
    ]
  },
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Defect Remediation & Feature Upgrades  \n**Confidence:** 0.9"
}