{
  "cve_id": "CVE-2021-37155",
  "cwe_ids": [
    "CWE-Other"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "wolfSSL/wolfssl",
  "commit_msg": "Fix CompareOcspReqResp.\n\nThere was a bug in this function that could cause a match to be reported even\nwhen the OCSP request and response in fact had a mismatch.",
  "commit_hash": "73076940af8904f98eee085994c176fe1876b95a",
  "git_url": "https://github.com/wolfSSL/wolfssl/commit/73076940af8904f98eee085994c176fe1876b95a",
  "file_path": "wolfcrypt/src/asn.c",
  "func_name": "CompareOcspReqResp",
  "func_before": "int CompareOcspReqResp(OcspRequest* req, OcspResponse* resp)\n{\n    int cmp = -1; /* default as not matching, cmp gets set on each check */\n    OcspEntry *single, *next, *prev = NULL, *top;\n\n    WOLFSSL_ENTER(\"CompareOcspReqResp\");\n\n    if (req == NULL) {\n        WOLFSSL_MSG(\"\\tReq missing\");\n        return -1;\n    }\n    if (resp == NULL || resp->single == NULL) {\n        WOLFSSL_MSG(\"\\tResp missing\");\n        return 1;\n    }\n\n    /* Nonces are not critical. The responder may not necessarily add\n     * the nonce to the response. */\n    if (req->nonceSz && resp->nonce != NULL\n#ifndef WOLFSSL_FORCE_OCSP_NONCE_CHECK\n            && resp->nonceSz != 0\n#endif\n    ) {\n        cmp = req->nonceSz - resp->nonceSz;\n        if (cmp != 0) {\n            WOLFSSL_MSG(\"\\tnonceSz mismatch\");\n            return cmp;\n        }\n\n        cmp = XMEMCMP(req->nonce, resp->nonce, req->nonceSz);\n        if (cmp != 0) {\n            WOLFSSL_MSG(\"\\tnonce mismatch\");\n            return cmp;\n        }\n    }\n\n    /* match based on found status and return */\n    for (single = resp->single; single; single = next) {\n        cmp = req->serialSz - single->status->serialSz;\n        if (cmp == 0) {\n            if ((XMEMCMP(req->serial, single->status->serial, req->serialSz) == 0)\n             && (XMEMCMP(req->issuerHash, single->issuerHash, OCSP_DIGEST_SIZE) == 0)\n             && (XMEMCMP(req->issuerKeyHash, single->issuerKeyHash, OCSP_DIGEST_SIZE) == 0)) {\n                /* match found */\n                if (resp->single != single && prev) {\n                    /* move to top of list */\n                    top = resp->single;\n                    resp->single = single;\n                    prev->next = single->next;\n                    single->next = top;\n                }\n                break;\n            }\n        }\n        next = single->next;\n        prev = single;\n    }\n\n    if (cmp != 0) {\n        WOLFSSL_MSG(\"\\trequest and response mismatch\");\n        return cmp;\n    }\n\n    return 0;\n}",
  "abstract_func_before": "int CompareOcspReqResp(OcspRequest* VAR_0, OcspResponse* VAR_1)\n{\n    int VAR_2 = -1; /* COMMENT_0 */\n    OcspEntry *VAR_3, *VAR_4, *VAR_5 = NULL, *VAR_6;\n\n    WOLFSSL_ENTER(\"CompareOcspReqResp\");\n\n    if (VAR_0 == NULL) {\n        WOLFSSL_MSG(\"\\tReq missing\");\n        return -1;\n    }\n    if (VAR_1 == NULL || VAR_1->single == NULL) {\n        WOLFSSL_MSG(\"\\tResp missing\");\n        return 1;\n    }\n\n    /* COMMENT_1 */\n                                    \n    if (VAR_0->nonceSz && VAR_1->nonce != NULL\n#ifndef VAR_7\n            && VAR_1->nonceSz != 0\n#endif\n    ) {\n        VAR_2 = VAR_0->nonceSz - VAR_1->nonceSz;\n        if (VAR_2 != 0) {\n            WOLFSSL_MSG(\"\\tnonceSz mismatch\");\n            return VAR_2;\n        }\n\n        VAR_2 = XMEMCMP(VAR_0->nonce, VAR_1->nonce, VAR_0->nonceSz);\n        if (VAR_2 != 0) {\n            WOLFSSL_MSG(\"\\tnonce mismatch\");\n            return VAR_2;\n        }\n    }\n\n    /* COMMENT_3 */\n    for (VAR_3 = VAR_1->single; VAR_3; VAR_3 = VAR_4) {\n        VAR_2 = VAR_0->serialSz - VAR_3->status->serialSz;\n        if (VAR_2 == 0) {\n            if ((XMEMCMP(VAR_0->serial, VAR_3->status->serial, VAR_0->serialSz) == 0)\n             && (XMEMCMP(VAR_0->issuerHash, VAR_3->issuerHash, VAR_8) == 0)\n             && (XMEMCMP(VAR_0->issuerKeyHash, VAR_3->issuerKeyHash, VAR_8) == 0)) {\n                /* COMMENT_4 */\n                if (VAR_1->single != VAR_3 && VAR_5) {\n                    /* COMMENT_5 */\n                    VAR_6 = VAR_1->single;\n                    VAR_1->single = VAR_3;\n                    VAR_5->next = VAR_3->next;\n                    VAR_3->next = VAR_6;\n                }\n                break;\n            }\n        }\n        VAR_4 = VAR_3->next;\n        VAR_5 = VAR_3;\n    }\n\n    if (VAR_2 != 0) {\n        WOLFSSL_MSG(\"\\trequest and response mismatch\");\n        return VAR_2;\n    }\n\n    return 0;\n}",
  "func_graph_path_before": "wolfSSL/wolfssl/73076940af8904f98eee085994c176fe1876b95a/asn.c/vul/before/0.json",
  "func": "int CompareOcspReqResp(OcspRequest* req, OcspResponse* resp)\n{\n    int cmp = -1; /* default as not matching, cmp gets set on each check */\n    OcspEntry *single, *next, *prev = NULL, *top;\n\n    WOLFSSL_ENTER(\"CompareOcspReqResp\");\n\n    if (req == NULL) {\n        WOLFSSL_MSG(\"\\tReq missing\");\n        return -1;\n    }\n    if (resp == NULL || resp->single == NULL) {\n        WOLFSSL_MSG(\"\\tResp missing\");\n        return 1;\n    }\n\n    /* Nonces are not critical. The responder may not necessarily add\n     * the nonce to the response. */\n    if (req->nonceSz && resp->nonce != NULL\n#ifndef WOLFSSL_FORCE_OCSP_NONCE_CHECK\n            && resp->nonceSz != 0\n#endif\n    ) {\n        cmp = req->nonceSz - resp->nonceSz;\n        if (cmp != 0) {\n            WOLFSSL_MSG(\"\\tnonceSz mismatch\");\n            return cmp;\n        }\n\n        cmp = XMEMCMP(req->nonce, resp->nonce, req->nonceSz);\n        if (cmp != 0) {\n            WOLFSSL_MSG(\"\\tnonce mismatch\");\n            return cmp;\n        }\n    }\n\n    /* match based on found status and return */\n    for (single = resp->single; single; single = next) {\n        cmp = req->serialSz - single->status->serialSz;\n        if (cmp == 0) {\n            cmp = XMEMCMP(req->serial, single->status->serial, req->serialSz)\n               || XMEMCMP(req->issuerHash, single->issuerHash, OCSP_DIGEST_SIZE)\n               || XMEMCMP(req->issuerKeyHash, single->issuerKeyHash, OCSP_DIGEST_SIZE);\n            if (cmp == 0) {\n                /* match found */\n                if (resp->single != single && prev) {\n                    /* move to top of list */\n                    top = resp->single;\n                    resp->single = single;\n                    prev->next = single->next;\n                    single->next = top;\n                }\n                break;\n            }\n        }\n        next = single->next;\n        prev = single;\n    }\n\n    if (cmp != 0) {\n        WOLFSSL_MSG(\"\\trequest and response mismatch\");\n        return cmp;\n    }\n\n    return 0;\n}",
  "abstract_func": "int CompareOcspReqResp(OcspRequest* VAR_0, OcspResponse* VAR_1)\n{\n    int VAR_2 = -1; /* COMMENT_0 */\n    OcspEntry *VAR_3, *VAR_4, *VAR_5 = NULL, *VAR_6;\n\n    WOLFSSL_ENTER(\"CompareOcspReqResp\");\n\n    if (VAR_0 == NULL) {\n        WOLFSSL_MSG(\"\\tReq missing\");\n        return -1;\n    }\n    if (VAR_1 == NULL || VAR_1->single == NULL) {\n        WOLFSSL_MSG(\"\\tResp missing\");\n        return 1;\n    }\n\n    /* COMMENT_1 */\n                                    \n    if (VAR_0->nonceSz && VAR_1->nonce != NULL\n#ifndef VAR_7\n            && VAR_1->nonceSz != 0\n#endif\n    ) {\n        VAR_2 = VAR_0->nonceSz - VAR_1->nonceSz;\n        if (VAR_2 != 0) {\n            WOLFSSL_MSG(\"\\tnonceSz mismatch\");\n            return VAR_2;\n        }\n\n        VAR_2 = XMEMCMP(VAR_0->nonce, VAR_1->nonce, VAR_0->nonceSz);\n        if (VAR_2 != 0) {\n            WOLFSSL_MSG(\"\\tnonce mismatch\");\n            return VAR_2;\n        }\n    }\n\n    /* COMMENT_3 */\n    for (VAR_3 = VAR_1->single; VAR_3; VAR_3 = VAR_4) {\n        VAR_2 = VAR_0->serialSz - VAR_3->status->serialSz;\n        if (VAR_2 == 0) {\n            VAR_2 = XMEMCMP(VAR_0->serial, VAR_3->status->serial, VAR_0->serialSz)\n               || XMEMCMP(VAR_0->issuerHash, VAR_3->issuerHash, VAR_8)\n               || XMEMCMP(VAR_0->issuerKeyHash, VAR_3->issuerKeyHash, VAR_8);\n            if (VAR_2 == 0) {\n                /* COMMENT_4 */\n                if (VAR_1->single != VAR_3 && VAR_5) {\n                    /* COMMENT_5 */\n                    VAR_6 = VAR_1->single;\n                    VAR_1->single = VAR_3;\n                    VAR_5->next = VAR_3->next;\n                    VAR_3->next = VAR_6;\n                }\n                break;\n            }\n        }\n        VAR_4 = VAR_3->next;\n        VAR_5 = VAR_3;\n    }\n\n    if (VAR_2 != 0) {\n        WOLFSSL_MSG(\"\\trequest and response mismatch\");\n        return VAR_2;\n    }\n\n    return 0;\n}",
  "func_graph_path": "wolfSSL/wolfssl/73076940af8904f98eee085994c176fe1876b95a/asn.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -38,9 +38,10 @@\n     for (single = resp->single; single; single = next) {\n         cmp = req->serialSz - single->status->serialSz;\n         if (cmp == 0) {\n-            if ((XMEMCMP(req->serial, single->status->serial, req->serialSz) == 0)\n-             && (XMEMCMP(req->issuerHash, single->issuerHash, OCSP_DIGEST_SIZE) == 0)\n-             && (XMEMCMP(req->issuerKeyHash, single->issuerKeyHash, OCSP_DIGEST_SIZE) == 0)) {\n+            cmp = XMEMCMP(req->serial, single->status->serial, req->serialSz)\n+               || XMEMCMP(req->issuerHash, single->issuerHash, OCSP_DIGEST_SIZE)\n+               || XMEMCMP(req->issuerKeyHash, single->issuerKeyHash, OCSP_DIGEST_SIZE);\n+            if (cmp == 0) {\n                 /* match found */\n                 if (resp->single != single && prev) {\n                     /* move to top of list */",
  "diff_line_info": {
    "deleted_lines": [
      "            if ((XMEMCMP(req->serial, single->status->serial, req->serialSz) == 0)",
      "             && (XMEMCMP(req->issuerHash, single->issuerHash, OCSP_DIGEST_SIZE) == 0)",
      "             && (XMEMCMP(req->issuerKeyHash, single->issuerKeyHash, OCSP_DIGEST_SIZE) == 0)) {"
    ],
    "added_lines": [
      "            cmp = XMEMCMP(req->serial, single->status->serial, req->serialSz)",
      "               || XMEMCMP(req->issuerHash, single->issuerHash, OCSP_DIGEST_SIZE)",
      "               || XMEMCMP(req->issuerKeyHash, single->issuerKeyHash, OCSP_DIGEST_SIZE);",
      "            if (cmp == 0) {"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/wolfSSL/wolfssl/pull/3990",
  "description": {
    "pr_info": {
      "title": "Fix CompareOcspReqResp.",
      "number": 3990
    },
    "comment": [
      "There was a bug in this function that could cause a match to be reported even\r\nwhen the OCSP request and response in fact had a mismatch.\r\nZD 12148",
      "@haydenroche5 , this PR now appears to be causing failures in master with --enable-all?\r\n\r\n```\r\n./configure --enable-all && make\r\n\r\n./scripts/unit.test\r\nstarting unit tests...\r\n\r\n-----------------Porting tests------------------\r\n Begin API Tests\r\n   wolfSSL_Init(): passed\r\n   wolfSSL_CTX_use_certificate_buffer(): passed\r\n   wolfSSL_CertManagerCheckOCSPResponse():\r\nERROR - tests/api.c line 1254 failed with:\r\n    expected: wolfSSL_CertManagerCheckOCSPResponse(cm, response, sizeof(response), ((void *)0), status, entry, request) == WOLFSSL_SUCCESS\r\n    result:   -367 != 1\r\n```\r\n\r\nGuessing it has to do with the date in the captured OCSP response? Can you look into this? Thanks",
      "This also appears to be the same issue without having to do enable all:\r\n\r\n```\r\n./configure --enable-jni && make\r\n\r\n./tests/unit.test\r\nERROR - tests/api.c line 1254 failed with:\r\n    expected: wolfSSL_CertManagerCheckOCSPResponse(cm, response, sizeof(response), ((void *)0), status, entry, request) == WOLFSSL_SUCCESS\r\n    result:   -367 != 1\r\nzsh: abort      ./scripts/unit.test\r\n```",
      "For anyone else late to the party it seems the test failure got addressed in 822aa92fccf77558e250131c1c6e9bb84d07afe8"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 0.9"
}