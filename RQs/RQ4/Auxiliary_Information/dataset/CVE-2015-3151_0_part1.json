{
  "cve_id": "CVE-2015-3151",
  "cwe_ids": [
    "CWE-22"
  ],
  "cvss_vector": "AV:L/AC:L/Au:N/C:C/I:C/A:C",
  "cvss_is_v3": false,
  "repo_name": "abrt/libreport",
  "commit_msg": "dd: harden functions against directory traversal issues\n\nTest correctness of all accessed dump dir files in all dd* functions.\nBefore this commit, the callers were allowed to pass strings like\n\"../../etc/shadow\" in the filename argument of all dd* functions.\n\nRelated: #1214457\n\nSigned-off-by: Jakub Filak <jfilak@redhat.com>",
  "commit_hash": "239c4f7d1f47265526b39ad70106767d00805277",
  "git_url": "https://github.com/abrt/libreport/commit/239c4f7d1f47265526b39ad70106767d00805277",
  "file_path": "src/lib/dump_dir.c",
  "func_name": "dd_load_text_ext",
  "func_before": "char* dd_load_text_ext(const struct dump_dir *dd, const char *name, unsigned flags)\n{\n//    if (!dd->locked)\n//        error_msg_and_die(\"dump_dir is not opened\"); /* bug */\n\n    /* Compat with old abrt dumps. Remove in abrt-2.1 */\n    if (strcmp(name, \"release\") == 0)\n        name = FILENAME_OS_RELEASE;\n\n    char *full_path = concat_path_file(dd->dd_dirname, name);\n    char *ret = load_text_file(full_path, flags);\n    free(full_path);\n\n    return ret;\n}",
  "abstract_func_before": "char* dd_load_text_ext(const struct dump_dir *VAR_0, const char *VAR_1, unsigned VAR_2)\n{\n/* COMMENT_0 */\n/* COMMENT_1 */\n\n    /* COMMENT_2 */\n    if (strcmp(VAR_1, \"release\") == 0)\n        VAR_1 = VAR_3;\n\n    char *VAR_4 = concat_path_file(VAR_0->dd_dirname, VAR_1);\n    char *VAR_5 = load_text_file(VAR_4, VAR_2);\n    free(VAR_4);\n\n    return VAR_5;\n}",
  "func_graph_path_before": "abrt/libreport/239c4f7d1f47265526b39ad70106767d00805277/dump_dir.c/vul/before/0.json",
  "func": "char* dd_load_text_ext(const struct dump_dir *dd, const char *name, unsigned flags)\n{\n//    if (!dd->locked)\n//        error_msg_and_die(\"dump_dir is not opened\"); /* bug */\n\n    if (!str_is_correct_filename(name))\n    {\n        error_msg(\"Cannot load text. '%s' is not a valid file name\", name);\n        if (!(flags & DD_LOAD_TEXT_RETURN_NULL_ON_FAILURE))\n            xfunc_die();\n    }\n\n    /* Compat with old abrt dumps. Remove in abrt-2.1 */\n    if (strcmp(name, \"release\") == 0)\n        name = FILENAME_OS_RELEASE;\n\n    char *full_path = concat_path_file(dd->dd_dirname, name);\n    char *ret = load_text_file(full_path, flags);\n    free(full_path);\n\n    return ret;\n}",
  "abstract_func": "char* dd_load_text_ext(const struct dump_dir *VAR_0, const char *VAR_1, unsigned VAR_2)\n{\n/* COMMENT_0 */\n/* COMMENT_1 */\n\n    if (!str_is_correct_filename(VAR_1))\n    {\n        error_msg(\"Cannot load text. '%s' is not a valid file name\", VAR_1);\n        if (!(VAR_2 & VAR_3))\n            xfunc_die();\n    }\n\n    /* COMMENT_2 */\n    if (strcmp(VAR_1, \"release\") == 0)\n        VAR_1 = VAR_4;\n\n    char *VAR_5 = concat_path_file(VAR_0->dd_dirname, VAR_1);\n    char *VAR_6 = load_text_file(VAR_5, VAR_2);\n    free(VAR_5);\n\n    return VAR_6;\n}",
  "func_graph_path": "abrt/libreport/239c4f7d1f47265526b39ad70106767d00805277/dump_dir.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -2,6 +2,13 @@\n {\n //    if (!dd->locked)\n //        error_msg_and_die(\"dump_dir is not opened\"); /* bug */\n+\n+    if (!str_is_correct_filename(name))\n+    {\n+        error_msg(\"Cannot load text. '%s' is not a valid file name\", name);\n+        if (!(flags & DD_LOAD_TEXT_RETURN_NULL_ON_FAILURE))\n+            xfunc_die();\n+    }\n \n     /* Compat with old abrt dumps. Remove in abrt-2.1 */\n     if (strcmp(name, \"release\") == 0)",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "",
      "    if (!str_is_correct_filename(name))",
      "    {",
      "        error_msg(\"Cannot load text. '%s' is not a valid file name\", name);",
      "        if (!(flags & DD_LOAD_TEXT_RETURN_NULL_ON_FAILURE))",
      "            xfunc_die();",
      "    }"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/abrt/libreport/pull/343",
  "description": {
    "pr_info": {
      "title": "RHEL7: copy file chown",
      "number": 343
    },
    "comment": [
      "Needed to avoid race-conditions between copy & chown.\n\nRelated: #1211835\n\nSigned-off-by: Jakub Filak jfilak@redhat.com\n",
      "Went through the code and it seems to mitigate time of check / time of use race conditions and improve malicious path handling. Ack.\n"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 0.9"
}