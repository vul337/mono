{
  "cve_id": "CVE-2020-16269",
  "cwe_ids": [
    "CWE-Other"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "radareorg/radare2",
  "commit_msg": "Fix malformed DWARF crash due invalid .debug_str reference resulting in NULL str",
  "commit_hash": "0523c79d6e63858c990821a990edcb82cf8af284",
  "git_url": "https://github.com/radareorg/radare2/commit/0523c79d6e63858c990821a990edcb82cf8af284",
  "file_path": "libr/anal/type_dwarf.c",
  "func_name": "parse_enumerator",
  "func_before": "static RAnalEnumCase *parse_enumerator(const RBinDwarfDie *all_dies,\n\tconst ut64 count, ut64 idx, RAnalEnumCase *result) {\n\n\tr_return_val_if_fail (all_dies && result, NULL);\n\tconst RBinDwarfDie *die = &all_dies[idx];\n\n\tchar *name = NULL;\n\tint val = 0;\n\tsize_t i;\n\n\t// Enumerator has DW_AT_name and DW_AT_const_value\n\tfor (i = 0; i < die->count; i++) {\n\t\tRBinDwarfAttrValue *value = &die->attr_values[i];\n\t\tswitch (die->attr_values[i].attr_name) {\n\t\tcase DW_AT_name:\n\t\t\tname = strdup (value->string.content);\n\t\t\tif (!name) {\n\t\t\t\tgoto cleanup;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase DW_AT_const_value:\n\t\t\t// ?? can be block, sdata, data, string w/e\n\t\t\tval = value->constant; // TODO solve the encoding, I don't know in which union member is it store\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tresult->name = name;\n\tresult->val = (int)val;\n\treturn result;\ncleanup:\n\tfree (name);\n\treturn NULL;\n}",
  "abstract_func_before": "static RAnalEnumCase *parse_enumerator(const RBinDwarfDie *VAR_0,\n\tconst ut64 VAR_1, ut64 VAR_2, RAnalEnumCase *VAR_3) {\n\n\tr_return_val_if_fail (VAR_0 && VAR_3, NULL);\n\tconst RBinDwarfDie *VAR_4 = &VAR_0[VAR_2];\n\n\tchar *VAR_5 = NULL;\n\tint VAR_6 = 0;\n\tsize_t VAR_7;\n\n\t/* COMMENT_0 */\n\tfor (VAR_7 = 0; VAR_7 < VAR_4->count; VAR_7++) {\n\t\tRBinDwarfAttrValue *VAR_8 = &VAR_4->attr_values[VAR_7];\n\t\tswitch (VAR_4->attr_values[VAR_7].attr_name) {\n\t\tcase VAR_9:\n\t\t\tVAR_5 = strdup (VAR_8->string.content);\n\t\t\tif (!VAR_5) {\n\t\t\t\tgoto cleanup;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase VAR_10:\n\t\t\t/* COMMENT_1 */\n\t\t\tVAR_6 = VAR_8->constant; /* COMMENT_2 */\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tVAR_3->name = VAR_5;\n\tVAR_3->val = (int)VAR_6;\n\treturn VAR_3;\ncleanup:\n\tfree (VAR_5);\n\treturn NULL;\n}",
  "func_graph_path_before": "radareorg/radare2/0523c79d6e63858c990821a990edcb82cf8af284/type_dwarf.c/vul/before/2.json",
  "func": "static RAnalEnumCase *parse_enumerator(const RBinDwarfDie *all_dies,\n\tconst ut64 count, ut64 idx, RAnalEnumCase *result) {\n\n\tr_return_val_if_fail (all_dies && result, NULL);\n\tconst RBinDwarfDie *die = &all_dies[idx];\n\n\tchar *name = NULL;\n\tint val = 0;\n\tsize_t i;\n\n\t// Enumerator has DW_AT_name and DW_AT_const_value\n\tfor (i = 0; i < die->count; i++) {\n\t\tRBinDwarfAttrValue *value = &die->attr_values[i];\n\t\tswitch (die->attr_values[i].attr_name) {\n\t\tcase DW_AT_name:\n\t\t\tif (!value->string.content) {\n\t\t\t\tname = create_type_name_from_offset (die->offset);\n\t\t\t} else {\n\t\t\t\tname = strdup (value->string.content);\n\t\t\t}\n\t\t\tif (!name) {\n\t\t\t\tgoto cleanup;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase DW_AT_const_value:\n\t\t\t// ?? can be block, sdata, data, string w/e\n\t\t\tval = value->constant; // TODO solve the encoding, I don't know in which union member is it store\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tresult->name = name;\n\tresult->val = (int)val;\n\treturn result;\ncleanup:\n\tfree (name);\n\treturn NULL;\n}",
  "abstract_func": "static RAnalEnumCase *parse_enumerator(const RBinDwarfDie *VAR_0,\n\tconst ut64 VAR_1, ut64 VAR_2, RAnalEnumCase *VAR_3) {\n\n\tr_return_val_if_fail (VAR_0 && VAR_3, NULL);\n\tconst RBinDwarfDie *VAR_4 = &VAR_0[VAR_2];\n\n\tchar *VAR_5 = NULL;\n\tint VAR_6 = 0;\n\tsize_t VAR_7;\n\n\t/* COMMENT_0 */\n\tfor (VAR_7 = 0; VAR_7 < VAR_4->count; VAR_7++) {\n\t\tRBinDwarfAttrValue *VAR_8 = &VAR_4->attr_values[VAR_7];\n\t\tswitch (VAR_4->attr_values[VAR_7].attr_name) {\n\t\tcase VAR_9:\n\t\t\tif (!VAR_8->string.content) {\n\t\t\t\tVAR_5 = create_type_name_from_offset (VAR_4->offset);\n\t\t\t} else {\n\t\t\t\tVAR_5 = strdup (VAR_8->string.content);\n\t\t\t}\n\t\t\tif (!VAR_5) {\n\t\t\t\tgoto cleanup;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase VAR_10:\n\t\t\t/* COMMENT_1 */\n\t\t\tVAR_6 = VAR_8->constant; /* COMMENT_2 */\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tVAR_3->name = VAR_5;\n\tVAR_3->val = (int)VAR_6;\n\treturn VAR_3;\ncleanup:\n\tfree (VAR_5);\n\treturn NULL;\n}",
  "func_graph_path": "radareorg/radare2/0523c79d6e63858c990821a990edcb82cf8af284/type_dwarf.c/vul/after/2.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -13,7 +13,11 @@\n \t\tRBinDwarfAttrValue *value = &die->attr_values[i];\n \t\tswitch (die->attr_values[i].attr_name) {\n \t\tcase DW_AT_name:\n-\t\t\tname = strdup (value->string.content);\n+\t\t\tif (!value->string.content) {\n+\t\t\t\tname = create_type_name_from_offset (die->offset);\n+\t\t\t} else {\n+\t\t\t\tname = strdup (value->string.content);\n+\t\t\t}\n \t\t\tif (!name) {\n \t\t\t\tgoto cleanup;\n \t\t\t}",
  "diff_line_info": {
    "deleted_lines": [
      "\t\t\tname = strdup (value->string.content);"
    ],
    "added_lines": [
      "\t\t\tif (!value->string.content) {",
      "\t\t\t\tname = create_type_name_from_offset (die->offset);",
      "\t\t\t} else {",
      "\t\t\t\tname = strdup (value->string.content);",
      "\t\t\t}"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/radareorg/radare2/pull/17399",
  "description": {
    "pr_info": {
      "title": "Fix malformed DWARF crash due invalid .debug_str reference ##bin",
      "number": 17399
    },
    "comment": [
      " <!-- Filling this template is mandatory -->\r\n\r\n**Your checklist for this pull request**\r\n- [x] I've read the [guidelines for contributing](https://github.com/radareorg/radare2/blob/master/DEVELOPERS.md) to this repository\r\n- [x] I made sure to follow the project's [coding style](https://github.com/radareorg/radare2/blob/master/DEVELOPERS.md#code-style)\r\n- [ ] I've added tests that prove my fix is effective or that my feature works (if possible)\r\n- [ ] I've updated the documentation and the [radare2 book](https://github.com/radareorg/radare2book) with the relevant information (if needed)\r\n\r\n**Detailed description**\r\n\r\nFix for #17383 \r\n\r\nIn case the string pointer into debug_str isn't valid, the string can be NULL which wasn't accounted for in the future type parsing, I've added the handling for this situation.",
      "Btw, you might want to create a macros or a small inline function for this pattern:\r\n```c\r\n\t\tif (!value->string.content) {\r\n\t\t\t\tname = create_type_name_from_offset (die->offset);\r\n\t\t\t} else {\r\n\t\t\t\tname = strdup (value->string.content);\r\n\t\t\t}\r\n\t\t\tif (!name) {\r\n\t\t\t\tgoto cleanup;\r\n\t\t\t}\r\n```"
    ]
  },
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "**Final Classification:** Defect Remediation & Feature Upgrades; **Confidence:** 0.95"
}