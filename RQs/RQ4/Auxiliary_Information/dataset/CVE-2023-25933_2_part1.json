{
  "cve_id": "CVE-2023-25933",
  "cwe_ids": [
    "CWE-416",
    "CWE-843"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
  "cvss_is_v3": true,
  "repo_name": "facebook/hermes",
  "commit_msg": "Re-sync with internal repository (#960)\n\nCo-authored-by: Facebook Community Bot <6422482+facebook-github-bot@users.noreply.github.com>",
  "commit_hash": "e6ed9c1a4b02dc219de1648f44cd808a56171b81",
  "git_url": "https://github.com/facebook/hermes/commit/e6ed9c1a4b02dc219de1648f44cd808a56171b81",
  "file_path": "lib/Optimizer/Scalar/TypeInference.cpp",
  "func_name": "inferBinaryBitwise",
  "func_before": "static bool inferBinaryBitwise(BinaryOperatorInst *BOI) {\n  Type LeftTy = BOI->getLeftHandSide()->getType();\n  Type RightTy = BOI->getRightHandSide()->getType();\n\n  Type mayBeBigInt = LeftTy.canBeBigInt() && RightTy.canBeBigInt()\n      ? Type::createBigInt()\n      : Type::createNoType();\n\n  // ?? - ?? => Int32|?BigInt. BigInt is only possible if both operands can be\n  // BigInt due to the no automatic BigInt conversion.\n  BOI->setType(Type::unionTy(Type::createInt32(), mayBeBigInt));\n  return true;\n}",
  "abstract_func_before": "static bool inferBinaryBitwise(BinaryOperatorInst *VAR_0) {\n  Type VAR_1 = VAR_0->getLeftHandSide()->getType();\n  Type VAR_2 = VAR_0->getRightHandSide()->getType();\n\n  Type VAR_3 = VAR_1.canBeBigInt() && VAR_2.canBeBigInt()\n      ? Type::createBigInt()\n      : Type::createNoType();\n\n  /* COMMENT_0 */\n  /* COMMENT_1 */\n  VAR_0->setType(Type::unionTy(Type::createInt32(), VAR_3));\n  return true;\n}",
  "func_graph_path_before": "facebook/hermes/e6ed9c1a4b02dc219de1648f44cd808a56171b81/TypeInference.cpp/vul/before/3.json",
  "func": "static bool inferBinaryBitwise(BinaryOperatorInst *BOI) {\n  Type LeftTy = BOI->getLeftHandSide()->getType();\n  Type RightTy = BOI->getRightHandSide()->getType();\n\n  Type mayBeBigInt = (isBigIntOrObject(LeftTy) && isBigIntOrObject(RightTy))\n      ? Type::createBigInt()\n      : Type::createNoType();\n\n  // ?? - ?? => Int32|?BigInt. BigInt is only possible if both operands are\n  // BigInt|Object due to the no automatic BigInt conversion.\n  BOI->setType(Type::unionTy(Type::createInt32(), mayBeBigInt));\n  return true;\n}",
  "abstract_func": "static bool inferBinaryBitwise(BinaryOperatorInst *VAR_0) {\n  Type VAR_1 = VAR_0->getLeftHandSide()->getType();\n  Type VAR_2 = VAR_0->getRightHandSide()->getType();\n\n  Type VAR_3 = (isBigIntOrObject(VAR_1) && isBigIntOrObject(VAR_2))\n      ? Type::createBigInt()\n      : Type::createNoType();\n\n  /* COMMENT_0 */\n  /* COMMENT_1 */\n  VAR_0->setType(Type::unionTy(Type::createInt32(), VAR_3));\n  return true;\n}",
  "func_graph_path": "facebook/hermes/e6ed9c1a4b02dc219de1648f44cd808a56171b81/TypeInference.cpp/vul/after/3.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -2,12 +2,12 @@\n   Type LeftTy = BOI->getLeftHandSide()->getType();\n   Type RightTy = BOI->getRightHandSide()->getType();\n \n-  Type mayBeBigInt = LeftTy.canBeBigInt() && RightTy.canBeBigInt()\n+  Type mayBeBigInt = (isBigIntOrObject(LeftTy) && isBigIntOrObject(RightTy))\n       ? Type::createBigInt()\n       : Type::createNoType();\n \n-  // ?? - ?? => Int32|?BigInt. BigInt is only possible if both operands can be\n-  // BigInt due to the no automatic BigInt conversion.\n+  // ?? - ?? => Int32|?BigInt. BigInt is only possible if both operands are\n+  // BigInt|Object due to the no automatic BigInt conversion.\n   BOI->setType(Type::unionTy(Type::createInt32(), mayBeBigInt));\n   return true;\n }",
  "diff_line_info": {
    "deleted_lines": [
      "  Type mayBeBigInt = LeftTy.canBeBigInt() && RightTy.canBeBigInt()",
      "  // ?? - ?? => Int32|?BigInt. BigInt is only possible if both operands can be",
      "  // BigInt due to the no automatic BigInt conversion."
    ],
    "added_lines": [
      "  Type mayBeBigInt = (isBigIntOrObject(LeftTy) && isBigIntOrObject(RightTy))",
      "  // ?? - ?? => Int32|?BigInt. BigInt is only possible if both operands are",
      "  // BigInt|Object due to the no automatic BigInt conversion."
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/facebook/hermes/pull/960",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/facebook/hermes/pull/960: 403 Client Error: Forbidden for url: https://api.github.com/repos/facebook/hermes/pulls/960",
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Defect Remediation & Feature Upgrades; **Confidence:** 0.9"
}