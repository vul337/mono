{
  "cve_id": "CVE-2022-40138",
  "cwe_ids": [
    "CWE-681"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
  "cvss_is_v3": true,
  "repo_name": "facebook/hermes",
  "commit_msg": "Re-sync with internal repository (#822)\n\nCo-authored-by: Facebook Community Bot <6422482+facebook-github-bot@users.noreply.github.com>",
  "commit_hash": "6aa825e480d48127b480b08d13adf70033237097",
  "git_url": "https://github.com/facebook/hermes/commit/6aa825e480d48127b480b08d13adf70033237097",
  "file_path": "lib/BCGen/HBC/HBC.cpp",
  "func_name": "hbc::generateBytecode",
  "func_before": "std::unique_ptr<BytecodeModule> hbc::generateBytecode(\n    Module *M,\n    raw_ostream &OS,\n    const BytecodeGenerationOptions &options,\n    const SHA1 &sourceHash,\n    hermes::OptValue<uint32_t> segment,\n    SourceMapGenerator *sourceMapGen,\n    std::unique_ptr<BCProviderBase> baseBCProvider) {\n  auto BM = generateBytecodeModule(\n      M,\n      M->getTopLevelFunction(),\n      options,\n      segment,\n      sourceMapGen,\n      std::move(baseBCProvider));\n\n  if (options.format == OutputFormatKind::EmitBundle) {\n    assert(BM != nullptr);\n    BytecodeSerializer BS{OS, options};\n    BS.serialize(*BM, sourceHash);\n  }\n  // Now that the BytecodeFunctions know their offsets into the stream, we can\n  // populate the source map.\n  if (sourceMapGen)\n    BM->populateSourceMap(sourceMapGen);\n  return BM;\n}",
  "abstract_func_before": "std::unique_ptr<BytecodeModule> hbc::generateBytecode(\n    Module *VAR_0,\n    raw_ostream &VAR_1,\n    const BytecodeGenerationOptions &VAR_2,\n    const SHA1 &VAR_3,\n    hermes::OptValue<uint32_t> VAR_4,\n    SourceMapGenerator *VAR_5,\n    std::unique_ptr<BCProviderBase> VAR_6) {\n  auto VAR_7 = generateBytecodeModule(\n      VAR_0,\n      VAR_0->getTopLevelFunction(),\n      VAR_2,\n      VAR_4,\n      VAR_5,\n      std::move(VAR_6));\n\n  if (VAR_2.format == OutputFormatKind::EmitBundle) {\n    assert(VAR_7 != nullptr);\n    BytecodeSerializer VAR_8{VAR_1, VAR_2};\n    VAR_8.serialize(*VAR_7, VAR_3);\n  }\n  /* COMMENT_0 */\n  /* COMMENT_1 */\n  if (VAR_5)\n    VAR_7->populateSourceMap(VAR_5);\n  return VAR_7;\n}",
  "func_graph_path_before": "facebook/hermes/6aa825e480d48127b480b08d13adf70033237097/HBC.cpp/vul/before/0.json",
  "func": "std::unique_ptr<BytecodeModule> hbc::generateBytecode(\n    Module *M,\n    raw_ostream &OS,\n    const BytecodeGenerationOptions &options,\n    const SHA1 &sourceHash,\n    hermes::OptValue<uint32_t> segment,\n    SourceMapGenerator *sourceMapGen,\n    std::unique_ptr<BCProviderBase> baseBCProvider) {\n  auto BM = generateBytecodeModule(\n      M,\n      M->getTopLevelFunction(),\n      options,\n      segment,\n      sourceMapGen,\n      std::move(baseBCProvider));\n\n  if (!BM) {\n    return {};\n  }\n\n  if (options.format == OutputFormatKind::EmitBundle) {\n    assert(BM != nullptr);\n    BytecodeSerializer BS{OS, options};\n    BS.serialize(*BM, sourceHash);\n  }\n  // Now that the BytecodeFunctions know their offsets into the stream, we can\n  // populate the source map.\n  if (sourceMapGen)\n    BM->populateSourceMap(sourceMapGen);\n  return BM;\n}",
  "abstract_func": "std::unique_ptr<BytecodeModule> hbc::generateBytecode(\n    Module *VAR_0,\n    raw_ostream &VAR_1,\n    const BytecodeGenerationOptions &VAR_2,\n    const SHA1 &VAR_3,\n    hermes::OptValue<uint32_t> VAR_4,\n    SourceMapGenerator *VAR_5,\n    std::unique_ptr<BCProviderBase> VAR_6) {\n  auto VAR_7 = generateBytecodeModule(\n      VAR_0,\n      VAR_0->getTopLevelFunction(),\n      VAR_2,\n      VAR_4,\n      VAR_5,\n      std::move(VAR_6));\n\n  if (!VAR_7) {\n    return {};\n  }\n\n  if (VAR_2.format == OutputFormatKind::EmitBundle) {\n    assert(VAR_7 != nullptr);\n    BytecodeSerializer VAR_8{VAR_1, VAR_2};\n    VAR_8.serialize(*VAR_7, VAR_3);\n  }\n  /* COMMENT_0 */\n  /* COMMENT_1 */\n  if (VAR_5)\n    VAR_7->populateSourceMap(VAR_5);\n  return VAR_7;\n}",
  "func_graph_path": "facebook/hermes/6aa825e480d48127b480b08d13adf70033237097/HBC.cpp/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -14,6 +14,10 @@\n       sourceMapGen,\n       std::move(baseBCProvider));\n \n+  if (!BM) {\n+    return {};\n+  }\n+\n   if (options.format == OutputFormatKind::EmitBundle) {\n     assert(BM != nullptr);\n     BytecodeSerializer BS{OS, options};",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "  if (!BM) {",
      "    return {};",
      "  }",
      ""
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/facebook/hermes/pull/822",
  "description": {
    "pr_info": {
      "title": "Re-sync with internal repository",
      "number": 822
    },
    "comment": [
      "The internal and external repositories are out of sync. This attempts to brings them back in sync by patching the GitHub repository. Please carefully review this patch. You must disable ShipIt for your project in order to merge this pull request. DO NOT IMPORT this pull request. Instead, merge it directly on GitHub using the MERGE BUTTON. Re-enable ShipIt after merging."
    ]
  },
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.8,
  "Bug Filter Response": "**Final Classification:** Defect Remediation & Feature Upgrades  \n**Confidence:** 0.8"
}