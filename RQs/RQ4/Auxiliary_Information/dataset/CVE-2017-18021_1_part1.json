{
  "cve_id": "CVE-2017-18021",
  "cwe_ids": [
    "CWE-338"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:N/A:N",
  "cvss_is_v3": false,
  "repo_name": "IJHack/QtPass",
  "commit_msg": "Generate Password code from #338 placed",
  "commit_hash": "f14282412b8a82888b71a3268c985709ba9364d3",
  "git_url": "https://github.com/IJHack/QtPass/commit/f14282412b8a82888b71a3268c985709ba9364d3",
  "file_path": "src/pass.cpp",
  "func_name": "Pass::Generate_b",
  "func_before": "QString Pass::Generate_b(unsigned int length, const QString &charset) {\n  QString passwd;\n  if (QtPassSettings::isUsePwgen()) {\n    // --secure goes first as it overrides --no-* otherwise\n    QStringList args;\n    args.append(\"-1\");\n    if (QtPassSettings::isLessRandom())\n      args.append(\"--secure\");\n    args.append(QtPassSettings::isAvoidCapitals() ? \"--no-capitalize\"\n                                                  : \"--capitalize\");\n    args.append(QtPassSettings::isAvoidNumbers() ? \"--no-numerals\"\n                                                 : \"--numerals\");\n    if (QtPassSettings::isUseSymbols())\n      args.append(\"--symbols\");\n    args.append(QString::number(length));\n    QString p_out;\n    //  TODO(bezet): try-catch here(2 statuses to merge o_O)\n    if (exec.executeBlocking(QtPassSettings::getPwgenExecutable(), args,\n                             &passwd) == 0)\n      passwd.remove(QRegExp(\"[\\\\n\\\\r]\"));\n    else {\n      passwd.clear();\n      qDebug() << __FILE__ << \":\" << __LINE__ << \"\\t\"\n               << \"pwgen fail\";\n      //    TODO(bezet): emit critical ?\n    }\n  } else {\n    if (charset.length() > 0) {\n      passwd = Util::generateRandomPassword(charset, length);\n    } else {\n      emit critical(\n          tr(\"No characters chosen\"),\n          tr(\"Can't generate password, there are no characters to choose from \"\n             \"set in the configuration!\"));\n    }\n  }\n  return passwd;\n}",
  "abstract_func_before": "QString Pass::Generate_b(unsigned int VAR_0, const QString &VAR_1) {\n  QString VAR_2;\n  if (QtPassSettings::isUsePwgen()) {\n    /* COMMENT_0 */\n    QStringList VAR_3;\n    VAR_3.append(\"-1\");\n    if (QtPassSettings::isLessRandom())\n      VAR_3.append(\"--secure\");\n    VAR_3.append(QtPassSettings::isAvoidCapitals() ? \"--no-capitalize\"\n                                                  : \"--capitalize\");\n    VAR_3.append(QtPassSettings::isAvoidNumbers() ? \"--no-numerals\"\n                                                 : \"--numerals\");\n    if (QtPassSettings::isUseSymbols())\n      VAR_3.append(\"--symbols\");\n    VAR_3.append(QString::number(VAR_0));\n    QString VAR_4;\n    /* COMMENT_1 */\n    if (VAR_5.executeBlocking(QtPassSettings::getPwgenExecutable(), VAR_3,\n                             &VAR_2) == 0)\n      VAR_2.remove(QRegExp(\"[\\\\n\\\\r]\"));\n    else {\n      VAR_2.clear();\n      qDebug() << VAR_6 << \":\" << VAR_7 << \"\\t\"\n               << \"pwgen fail\";\n      /* COMMENT_2 */\n    }\n  } else {\n    if (VAR_1.length() > 0) {\n      VAR_2 = Util::generateRandomPassword(VAR_1, VAR_0);\n    } else {\n      emit VAR_8(\n          tr(\"No characters chosen\"),\n          tr(\"Can't generate password, there are no characters to choose from \"\n             \"set in the configuration!\"));\n    }\n  }\n  return VAR_2;\n}",
  "func_graph_path_before": "IJHack/QtPass/f14282412b8a82888b71a3268c985709ba9364d3/pass.cpp/vul/before/0.json",
  "func": "QString Pass::Generate_b(unsigned int length, const QString &charset) {\n  QString passwd;\n  if (QtPassSettings::isUsePwgen()) {\n    // --secure goes first as it overrides --no-* otherwise\n    QStringList args;\n    args.append(\"-1\");\n    if (QtPassSettings::isLessRandom())\n      args.append(\"--secure\");\n    args.append(QtPassSettings::isAvoidCapitals() ? \"--no-capitalize\"\n                                                  : \"--capitalize\");\n    args.append(QtPassSettings::isAvoidNumbers() ? \"--no-numerals\"\n                                                 : \"--numerals\");\n    if (QtPassSettings::isUseSymbols())\n      args.append(\"--symbols\");\n    args.append(QString::number(length));\n    QString p_out;\n    //  TODO(bezet): try-catch here(2 statuses to merge o_O)\n    if (exec.executeBlocking(QtPassSettings::getPwgenExecutable(), args,\n                             &passwd) == 0)\n      passwd.remove(QRegExp(\"[\\\\n\\\\r]\"));\n    else {\n      passwd.clear();\n      qDebug() << __FILE__ << \":\" << __LINE__ << \"\\t\"\n               << \"pwgen fail\";\n      //    TODO(bezet): emit critical ?\n    }\n  } else {\n    if (charset.length() > 0) {\n      passwd = generateRandomPassword(charset, length);\n    } else {\n      emit critical(\n          tr(\"No characters chosen\"),\n          tr(\"Can't generate password, there are no characters to choose from \"\n             \"set in the configuration!\"));\n    }\n  }\n  return passwd;\n}",
  "abstract_func": "QString Pass::Generate_b(unsigned int VAR_0, const QString &VAR_1) {\n  QString VAR_2;\n  if (QtPassSettings::isUsePwgen()) {\n    /* COMMENT_0 */\n    QStringList VAR_3;\n    VAR_3.append(\"-1\");\n    if (QtPassSettings::isLessRandom())\n      VAR_3.append(\"--secure\");\n    VAR_3.append(QtPassSettings::isAvoidCapitals() ? \"--no-capitalize\"\n                                                  : \"--capitalize\");\n    VAR_3.append(QtPassSettings::isAvoidNumbers() ? \"--no-numerals\"\n                                                 : \"--numerals\");\n    if (QtPassSettings::isUseSymbols())\n      VAR_3.append(\"--symbols\");\n    VAR_3.append(QString::number(VAR_0));\n    QString VAR_4;\n    /* COMMENT_1 */\n    if (VAR_5.executeBlocking(QtPassSettings::getPwgenExecutable(), VAR_3,\n                             &VAR_2) == 0)\n      VAR_2.remove(QRegExp(\"[\\\\n\\\\r]\"));\n    else {\n      VAR_2.clear();\n      qDebug() << VAR_6 << \":\" << VAR_7 << \"\\t\"\n               << \"pwgen fail\";\n      /* COMMENT_2 */\n    }\n  } else {\n    if (VAR_1.length() > 0) {\n      VAR_2 = generateRandomPassword(VAR_1, VAR_0);\n    } else {\n      emit VAR_8(\n          tr(\"No characters chosen\"),\n          tr(\"Can't generate password, there are no characters to choose from \"\n             \"set in the configuration!\"));\n    }\n  }\n  return VAR_2;\n}",
  "func_graph_path": "IJHack/QtPass/f14282412b8a82888b71a3268c985709ba9364d3/pass.cpp/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -26,7 +26,7 @@\n     }\n   } else {\n     if (charset.length() > 0) {\n-      passwd = Util::generateRandomPassword(charset, length);\n+      passwd = generateRandomPassword(charset, length);\n     } else {\n       emit critical(\n           tr(\"No characters chosen\"),",
  "diff_line_info": {
    "deleted_lines": [
      "      passwd = Util::generateRandomPassword(charset, length);"
    ],
    "added_lines": [
      "      passwd = generateRandomPassword(charset, length);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/IJHack/QtPass/pull/342",
  "description": {
    "pr_info": {
      "title": "Insecure password generation",
      "number": 342
    },
    "comment": [
      "Merge @zx2c4 proposed fix for #338\r\n\r\nNote, only works on Windows with Qt 5.10 +",
      "\n[![Coverage Status](https://coveralls.io/builds/14865635/badge)](https://coveralls.io/builds/14865635)\n\nCoverage decreased (-0.004%) to 1.776% when pulling **2bb71d4e6681f9791fe8d69d62ff980b32032d0b on insecure_password_generation** into **f3e89ac2bb1dbd9821a4034d9d8219feb5826148 on master**.\n"
    ]
  },
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.65,
  "Bug Filter Response": "Final Classification: Defect Remediation & Feature Upgrades  \nConfidence: 0.65  \n\nThe patch addresses a fix for #338, but without explicit security terms or clear evidence of a security issue. The code change involves renaming a method, suggesting a functional fix rather than a security one."
}