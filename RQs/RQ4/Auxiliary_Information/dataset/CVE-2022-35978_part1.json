{
  "cve_id": "CVE-2022-35978",
  "cwe_ids": [
    "CWE-693"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
  "cvss_is_v3": true,
  "repo_name": "minetest",
  "commit_msg": "Protect a few more settings from being set from mods\n\nOf those settings main_menu_script has concrete security impact, the rest are added out of abundance of caution.",
  "commit_hash": "da71e86633d0b27cd02d7aac9fdac625d141ca13",
  "git_url": "https://github.com/minetest/minetest/commit/da71e86633d0b27cd02d7aac9fdac625d141ca13",
  "file_path": "src/script/lua_api/l_settings.cpp",
  "func_name": "checkSettingSecurity",
  "func_before": "static inline int checkSettingSecurity(lua_State* L, const std::string &name)\n{\n\tif (ScriptApiSecurity::isSecure(L) && name.compare(0, 7, \"secure.\") == 0)\n\t\tthrow LuaError(\"Attempt to set secure setting.\");\n\n\tbool is_mainmenu = false;\n#ifndef SERVER\n\tis_mainmenu = ModApiBase::getGuiEngine(L) != nullptr;\n#endif\n\tif (!is_mainmenu && (name == \"mg_name\" || name == \"mg_flags\")) {\n\t\terrorstream << \"Tried to set global setting \" << name << \", ignoring. \"\n\t\t\t\"minetest.set_mapgen_setting() should be used instead.\" << std::endl;\n\t\tinfostream << script_get_backtrace(L) << std::endl;\n\t\treturn -1;\n\t}\n\n\treturn 0;\n}",
  "abstract_func_before": "static inline int checkSettingSecurity(lua_State* VAR_0, const std::string &VAR_1)\n{\n\tif (ScriptApiSecurity::isSecure(VAR_0) && VAR_1.compare(0, 7, \"secure.\") == 0)\n\t\tthrow LuaError(\"Attempt to set secure setting.\");\n\n\tbool VAR_2 = false;\n#ifndef VAR_3\n\tVAR_2 = ModApiBase::getGuiEngine(VAR_0) != nullptr;\n#endif\n\tif (!VAR_2 && (VAR_1 == \"mg_name\" || VAR_1 == \"mg_flags\")) {\n\t\tVAR_4 << \"Tried to set global setting \" << VAR_1 << \", ignoring. \"\n\t\t\t\"minetest.set_mapgen_setting() should be used instead.\" << std::endl;\n\t\tVAR_5 << script_get_backtrace(VAR_0) << std::endl;\n\t\treturn -1;\n\t}\n\n\treturn 0;\n}",
  "func_graph_path_before": "minetest/da71e86633d0b27cd02d7aac9fdac625d141ca13/l_settings.cpp/vul/before/0.json",
  "func": "static inline int checkSettingSecurity(lua_State* L, const std::string &name)\n{\n\tif (ScriptApiSecurity::isSecure(L) && name.compare(0, 7, \"secure.\") == 0)\n\t\tthrow LuaError(\"Attempted to set secure setting.\");\n\n\tbool is_mainmenu = false;\n#ifndef SERVER\n\tis_mainmenu = ModApiBase::getGuiEngine(L) != nullptr;\n#endif\n\tif (!is_mainmenu && (name == \"mg_name\" || name == \"mg_flags\")) {\n\t\terrorstream << \"Tried to set global setting \" << name << \", ignoring. \"\n\t\t\t\"minetest.set_mapgen_setting() should be used instead.\" << std::endl;\n\t\tinfostream << script_get_backtrace(L) << std::endl;\n\t\treturn -1;\n\t}\n\n\tconst char *disallowed[] = {\n\t\t\"main_menu_script\", \"shader_path\", \"texture_path\", \"screenshot_path\",\n\t\t\"serverlist_file\", \"serverlist_url\", \"map-dir\", \"contentdb_url\",\n\t};\n\tif (!is_mainmenu) {\n\t\tfor (const char *name2 : disallowed) {\n\t\t\tif (name == name2)\n\t\t\t\tthrow LuaError(\"Attempted to set disallowed setting.\");\n\t\t}\n\t}\n\n\treturn 0;\n}",
  "abstract_func": "static inline int checkSettingSecurity(lua_State* VAR_0, const std::string &VAR_1)\n{\n\tif (ScriptApiSecurity::isSecure(VAR_0) && VAR_1.compare(0, 7, \"secure.\") == 0)\n\t\tthrow LuaError(\"Attempted to set secure setting.\");\n\n\tbool VAR_2 = false;\n#ifndef VAR_3\n\tVAR_2 = ModApiBase::getGuiEngine(VAR_0) != nullptr;\n#endif\n\tif (!VAR_2 && (VAR_1 == \"mg_name\" || VAR_1 == \"mg_flags\")) {\n\t\tVAR_4 << \"Tried to set global setting \" << VAR_1 << \", ignoring. \"\n\t\t\t\"minetest.set_mapgen_setting() should be used instead.\" << std::endl;\n\t\tVAR_5 << script_get_backtrace(VAR_0) << std::endl;\n\t\treturn -1;\n\t}\n\n\tconst char *VAR_6[] = {\n\t\t\"main_menu_script\", \"shader_path\", \"texture_path\", \"screenshot_path\",\n\t\t\"serverlist_file\", \"serverlist_url\", \"map-dir\", \"contentdb_url\",\n\t};\n\tif (!VAR_2) {\n\t\tfor (const char *VAR_7 : VAR_6) {\n\t\t\tif (VAR_1 == VAR_7)\n\t\t\t\tthrow LuaError(\"Attempted to set disallowed setting.\");\n\t\t}\n\t}\n\n\treturn 0;\n}",
  "func_graph_path": "minetest/da71e86633d0b27cd02d7aac9fdac625d141ca13/l_settings.cpp/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,7 +1,7 @@\n static inline int checkSettingSecurity(lua_State* L, const std::string &name)\n {\n \tif (ScriptApiSecurity::isSecure(L) && name.compare(0, 7, \"secure.\") == 0)\n-\t\tthrow LuaError(\"Attempt to set secure setting.\");\n+\t\tthrow LuaError(\"Attempted to set secure setting.\");\n \n \tbool is_mainmenu = false;\n #ifndef SERVER\n@@ -14,5 +14,16 @@\n \t\treturn -1;\n \t}\n \n+\tconst char *disallowed[] = {\n+\t\t\"main_menu_script\", \"shader_path\", \"texture_path\", \"screenshot_path\",\n+\t\t\"serverlist_file\", \"serverlist_url\", \"map-dir\", \"contentdb_url\",\n+\t};\n+\tif (!is_mainmenu) {\n+\t\tfor (const char *name2 : disallowed) {\n+\t\t\tif (name == name2)\n+\t\t\t\tthrow LuaError(\"Attempted to set disallowed setting.\");\n+\t\t}\n+\t}\n+\n \treturn 0;\n }",
  "diff_line_info": {
    "deleted_lines": [
      "\t\tthrow LuaError(\"Attempt to set secure setting.\");"
    ],
    "added_lines": [
      "\t\tthrow LuaError(\"Attempted to set secure setting.\");",
      "\tconst char *disallowed[] = {",
      "\t\t\"main_menu_script\", \"shader_path\", \"texture_path\", \"screenshot_path\",",
      "\t\t\"serverlist_file\", \"serverlist_url\", \"map-dir\", \"contentdb_url\",",
      "\t};",
      "\tif (!is_mainmenu) {",
      "\t\tfor (const char *name2 : disallowed) {",
      "\t\t\tif (name == name2)",
      "\t\t\t\tthrow LuaError(\"Attempted to set disallowed setting.\");",
      "\t\t}",
      "\t}",
      ""
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/luanti-org/luanti/pull/12378",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/luanti-org/luanti/pull/12378: 403 Client Error: Forbidden for url: https://api.github.com/repos/luanti-org/luanti/pulls/12378",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 0.95"
}