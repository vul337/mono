{
  "cve_id": "CVE-2020-9355",
  "cwe_ids": [
    "CWE-Other"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "danfruehauf/NetworkManager-ssh",
  "commit_msg": "Remove extra options\n\nAfter analyzing some privilege escalation possibilites, it was decided\nit is best to remove extra options",
  "commit_hash": "5d88cd89795352b5df54cc0ebb6a0076b8c89ee4",
  "git_url": "https://github.com/danfruehauf/NetworkManager-ssh/commit/5d88cd89795352b5df54cc0ebb6a0076b8c89ee4",
  "file_path": "properties/nm-ssh.c",
  "func_name": "export",
  "func_before": "static gboolean\nexport (NMVpnEditorPlugin *iface,\n        const char *path,\n        NMConnection *connection,\n        GError **error)\n{\n\tNMSettingConnection *s_con;\n\tNMSettingVpn *s_vpn;\n\tFILE *f;\n\tconst char *value;\n\tconst char *auth_type = NULL;\n\tconst char *key_file = NULL;\n\tconst char *gateway = NULL;\n\tconst char *port = NULL;\n\tconst char *local_ip = NULL;\n\tconst char *remote_ip = NULL;\n\tconst char *netmask = NULL;\n\tconst char *local_ip_6 = NULL;\n\tconst char *remote_ip_6 = NULL;\n\tconst char *netmask_6 = NULL;\n\tconst char *extra_opts = NULL;\n\tconst char *remote_dev = NULL;\n\tconst char *mtu = NULL;\n\tconst char *remote_username = NULL;\n\tchar *device_type = NULL;\n\tchar *tunnel_type = NULL;\n\tchar *ifconfig_cmd_local_6 = NULL;\n\tchar *ifconfig_cmd_remote_6 = NULL;\n\tchar *preferred_authentication = NULL;\n\tunsigned password_prompt_nr = 0;\n\tgboolean ipv6 = FALSE;\n\tgboolean success = FALSE;\n\n\ts_con = NM_SETTING_CONNECTION (nm_connection_get_setting (connection, NM_TYPE_SETTING_CONNECTION));\n\tg_assert (s_con);\n\n\ts_vpn = (NMSettingVpn *) nm_connection_get_setting (connection, NM_TYPE_SETTING_VPN);\n\n\tf = fopen (path, \"w\");\n\tif (!f) {\n\t\tg_set_error (error, 0, 0, \"could not open file for writing\");\n\t\treturn FALSE;\n\t}\n\n\tvalue = nm_setting_vpn_get_data_item (s_vpn, NM_SSH_KEY_REMOTE);\n\tif (value && strlen (value))\n\t\tgateway = value;\n\telse {\n\t\tg_set_error (error, 0, 0, \"connection was incomplete (missing gateway)\");\n\t\tgoto done;\n\t}\n\n\tvalue = nm_setting_vpn_get_data_item (s_vpn, NM_SSH_KEY_REMOTE_IP);\n\tif (value && strlen (value))\n\t\tremote_ip = value;\n\telse {\n\t\tg_set_error (error, 0, 0, \"connection was incomplete (missing remote IP)\");\n\t\tgoto done;\n\t}\n\n\tvalue = nm_setting_vpn_get_data_item (s_vpn, NM_SSH_KEY_LOCAL_IP);\n\tif (value && strlen (value))\n\t\tlocal_ip = value;\n\telse {\n\t\tg_set_error (error, 0, 0, \"connection was incomplete (missing local IP)\");\n\t\tgoto done;\n\t}\n\n\tvalue = nm_setting_vpn_get_data_item (s_vpn, NM_SSH_KEY_NETMASK);\n\tif (value && strlen (value))\n\t\tnetmask = value;\n\telse {\n\t\tg_set_error (error, 0, 0, \"connection was incomplete (missing netmask)\");\n\t\tgoto done;\n\t}\n\n\t/* Auth type */\n\tauth_type = nm_setting_vpn_get_data_item (s_vpn, NM_SSH_KEY_AUTH_TYPE);\n\tif (auth_type) {\n\t\tif (!strncmp (auth_type, NM_SSH_AUTH_TYPE_PASSWORD, strlen(NM_SSH_AUTH_TYPE_PASSWORD))) {\n\t\t\tpassword_prompt_nr = 1;\n\t\t\tpreferred_authentication = g_strdup(\"password\");\n\t\t} else if (!strncmp (auth_type, NM_SSH_AUTH_TYPE_KEY, strlen(NM_SSH_AUTH_TYPE_KEY))) {\n\t\t\tkey_file = nm_setting_vpn_get_data_item (s_vpn, NM_SSH_KEY_KEY_FILE);\n\t\t\tpreferred_authentication = g_strdup(\"publickey\");\n\t\t} else { // (!strncmp (auth_type, NM_SSH_AUTH_TYPE_SSH_AGENT, strlen(NM_SSH_AUTH_TYPE_SSH_AGENT))) {\n\t\t\t// Nothing to be done for ssh-agent, the wise choice...\n\t\t\tpreferred_authentication = g_strdup(\"publickey\");\n\t\t}\n\t}\n\t/* Auth type */\n\n\t/* Advanced values start */\n\tvalue = nm_setting_vpn_get_data_item (s_vpn, NM_SSH_KEY_PORT);\n\tif (value && strlen (value))\n\t\tport = value;\n\telse\n\t\tport = g_strdup_printf(\"%d\", NM_SSH_DEFAULT_PORT);\n\n\tvalue = nm_setting_vpn_get_data_item (s_vpn, NM_SSH_KEY_TUNNEL_MTU);\n\tif (value && strlen (value))\n\t\tmtu = value;\n\telse\n\t\tmtu = g_strdup_printf(\"%d\", NM_SSH_DEFAULT_MTU);\n\n\tvalue = nm_setting_vpn_get_data_item (s_vpn, NM_SSH_KEY_EXTRA_OPTS);\n\tif (value && strlen (value))\n\t\textra_opts = value;\n\telse\n\t\textra_opts = g_strdup(NM_SSH_DEFAULT_EXTRA_OPTS);\n\n\tvalue = nm_setting_vpn_get_data_item (s_vpn, NM_SSH_KEY_REMOTE_DEV);\n\tif (value && strlen (value))\n\t\tremote_dev = value;\n\telse\n\t\tremote_dev = g_strdup_printf(\"%d\", NM_SSH_DEFAULT_REMOTE_DEV);\n\n\tvalue = nm_setting_vpn_get_data_item (s_vpn, NM_SSH_KEY_REMOTE_USERNAME);\n\tif (value && strlen (value))\n\t\tremote_username = value;\n\telse\n\t\tremote_username = g_strdup(NM_SSH_DEFAULT_REMOTE_USERNAME);\n\n\tvalue = nm_setting_vpn_get_data_item (s_vpn, NM_SSH_KEY_TAP_DEV);\n\tif (value && IS_YES(value)) {\n\t\tdevice_type = g_strdup(\"tap\");\n\t\ttunnel_type = g_strdup(\"ethernet\");\n\t} else {\n\t\tdevice_type = g_strdup(\"tun\");\n\t\ttunnel_type = g_strdup(\"point-to-point\");\n\t}\n\n\tvalue = nm_setting_vpn_get_data_item (s_vpn, NM_SSH_KEY_IP_6);\n\tif (value && IS_YES(value)) {\n\t\tipv6 = TRUE;\n\n\t\tvalue = nm_setting_vpn_get_data_item (s_vpn, NM_SSH_KEY_REMOTE_IP_6);\n\t\tif (value && strlen (value))\n\t\t\tremote_ip_6 = value;\n\t\telse {\n\t\t\tg_set_error (error, 0, 0, \"connection was incomplete (missing IPv6 remote IP)\");\n\t\t\tgoto done;\n\t\t}\n\t\n\t\tvalue = nm_setting_vpn_get_data_item (s_vpn, NM_SSH_KEY_LOCAL_IP_6);\n\t\tif (value && strlen (value))\n\t\t\tlocal_ip_6 = value;\n\t\telse {\n\t\t\tg_set_error (error, 0, 0, \"connection was incomplete (missing IPv6 local IP)\");\n\t\t\tgoto done;\n\t\t}\n\n\t\tvalue = nm_setting_vpn_get_data_item (s_vpn, NM_SSH_KEY_NETMASK_6);\n\t\tif (value && strlen (value))\n\t\t\tnetmask_6 = value;\n\t\telse {\n\t\t\tg_set_error (error, 0, 0, \"connection was incomplete (missing IPv6 netmask)\");\n\t\t\tgoto done;\n\t\t}\n\n\t\tifconfig_cmd_local_6 = g_strdup_printf(\"%s $DEV_TYPE$LOCAL_DEV add $LOCAL_IP_6/$NETMASK_6\", IFCONFIG);\n\t\tifconfig_cmd_remote_6 = g_strdup_printf(\"%s $DEV_TYPE$REMOTE_DEV add $REMOTE_IP_6/$NETMASK_6\", IFCONFIG);\n\t} else {\n\t\tipv6 = FALSE;\n\t\tifconfig_cmd_local_6 = g_strdup(\"\");\n\t\tifconfig_cmd_remote_6 = g_strdup(\"\");\n\t}\n\n\t/* Advanced values end */\n\n\t/* Serialize everything to a file */\n\tfprintf (f, \"#!/bin/bash\\n\");\n\t/* Make my life easier and just add the AUTH_TYPE= key, not used though */\n\tfprintf (f, \"%s=%s\\n\", AUTH_TYPE_KEY, auth_type);\n\tif (key_file) {\n\t\tfprintf (f, \"%s=%s\\n\", KEY_FILE_KEY, key_file);\n\t}\n\tfprintf (f, \"%s=%s\\n\", REMOTE_KEY, gateway);\n\tfprintf (f, \"%s=%s\\n\", REMOTE_USERNAME_KEY, remote_username);\n\tfprintf (f, \"%s=%s\\n\", REMOTE_IP_KEY, remote_ip);\n\tfprintf (f, \"%s=%s\\n\", LOCAL_IP_KEY, local_ip);\n\tfprintf (f, \"%s=%s\\n\", NETMASK_KEY, netmask);\n\tif (ipv6) {\n\t\tfprintf (f, \"%s=%s\\n\", IP_6_KEY, YES);\n\t\tfprintf (f, \"%s=%s\\n\", REMOTE_IP_6_KEY, remote_ip_6);\n\t\tfprintf (f, \"%s=%s\\n\", LOCAL_IP_6_KEY, local_ip_6);\n\t\tfprintf (f, \"%s=%s\\n\", NETMASK_6_KEY, netmask_6);\n\t}\n\tfprintf (f, \"%s=%s\\n\", PORT_KEY, port);\n\tfprintf (f, \"%s=%s\\n\", MTU_KEY, mtu);\n\tfprintf (f, \"%s='%s'\\n\", EXTRA_OPTS_KEY, extra_opts);\n\tfprintf (f, \"%s=%s\\n\", REMOTE_DEV_KEY, remote_dev);\n\n\t/* Assign tun/tap */\n\tfprintf (f, \"%s=%s\\n\", DEV_TYPE_KEY, device_type);\n\tfprintf (f, \"%s=%s\\n\", TUNNEL_TYPE_KEY, tunnel_type);\n\n\t/* Add a little of bash script to probe for a free tun/tap device */\n\tfprintf (f, \"for i in `seq 0 255`; do ! %s $DEV_TYPE$i >& /dev/null && LOCAL_DEV=$i && break; done\", IFCONFIG);\n\n\t/* The generic lines that will perform the connection */\n\tfprintf (f, \"\\n\");\n\tfprintf(f, \"ssh -f %s -o PreferredAuthentications=%s -o NumberOfPasswordPrompts=%d -o Tunnel=$TUNNEL_TYPE $EXTRA_OPTS -o TunnelDevice=$LOCAL_DEV:$REMOTE_DEV -o User=$REMOTE_USERNAME -o Port=$PORT -o HostName=$REMOTE $REMOTE \\\"%s $DEV_TYPE$REMOTE_DEV $REMOTE_IP netmask $NETMASK pointopoint $LOCAL_IP; %s\\\" && \\\\\\n\",\n\t\t(key_file ? g_strconcat(\"-i \", key_file, NULL) : \"\"),\n\t\tpreferred_authentication,\n\t\tpassword_prompt_nr,\n\t\tIFCONFIG,\n\t\tifconfig_cmd_remote_6);\n\tfprintf(f, \"%s $DEV_TYPE$LOCAL_DEV $LOCAL_IP netmask $NETMASK pointopoint $REMOTE_IP; %s\\n\", IFCONFIG, ifconfig_cmd_local_6);\n\n\tsuccess = TRUE;\n\n\tg_free(device_type);\n\tg_free(tunnel_type);\n\tg_free(ifconfig_cmd_local_6);\n\tg_free(ifconfig_cmd_remote_6);\n\tg_free(preferred_authentication);\n\ndone:\n\tfclose (f);\n\treturn success;\n}",
  "abstract_func_before": "static gboolean\nexport (NMVpnEditorPlugin *VAR_0,\n        const char *VAR_1,\n        NMConnection *VAR_2,\n        GError **VAR_3)\n{\n\tNMSettingConnection *VAR_4;\n\tNMSettingVpn *VAR_5;\n\tFILE *VAR_6;\n\tconst char *VAR_7;\n\tconst char *VAR_8 = NULL;\n\tconst char *VAR_9 = NULL;\n\tconst char *VAR_10 = NULL;\n\tconst char *VAR_11 = NULL;\n\tconst char *VAR_12 = NULL;\n\tconst char *VAR_13 = NULL;\n\tconst char *VAR_14 = NULL;\n\tconst char *VAR_15 = NULL;\n\tconst char *VAR_16 = NULL;\n\tconst char *VAR_17 = NULL;\n\tconst char *VAR_18 = NULL;\n\tconst char *VAR_19 = NULL;\n\tconst char *VAR_20 = NULL;\n\tconst char *VAR_21 = NULL;\n\tchar *VAR_22 = NULL;\n\tchar *VAR_23 = NULL;\n\tchar *VAR_24 = NULL;\n\tchar *VAR_25 = NULL;\n\tchar *VAR_26 = NULL;\n\tunsigned VAR_27 = 0;\n\tgboolean VAR_28 = FALSE;\n\tgboolean VAR_29 = FALSE;\n\n\tVAR_4 = NM_SETTING_CONNECTION (nm_connection_get_setting (VAR_2, VAR_30));\n\tg_assert (VAR_4);\n\n\tVAR_5 = (NMSettingVpn *) nm_connection_get_setting (VAR_2, VAR_31);\n\n\tVAR_6 = fopen (VAR_1, \"w\");\n\tif (!VAR_6) {\n\t\tg_set_error (VAR_3, 0, 0, \"could not open file for writing\");\n\t\treturn FALSE;\n\t}\n\n\tVAR_7 = nm_setting_vpn_get_data_item (VAR_5, VAR_32);\n\tif (VAR_7 && strlen (VAR_7))\n\t\tVAR_10 = VAR_7;\n\telse {\n\t\tg_set_error (VAR_3, 0, 0, \"connection was incomplete (missing gateway)\");\n\t\tgoto done;\n\t}\n\n\tVAR_7 = nm_setting_vpn_get_data_item (VAR_5, VAR_33);\n\tif (VAR_7 && strlen (VAR_7))\n\t\tVAR_13 = VAR_7;\n\telse {\n\t\tg_set_error (VAR_3, 0, 0, \"connection was incomplete (missing remote IP)\");\n\t\tgoto done;\n\t}\n\n\tVAR_7 = nm_setting_vpn_get_data_item (VAR_5, VAR_34);\n\tif (VAR_7 && strlen (VAR_7))\n\t\tVAR_12 = VAR_7;\n\telse {\n\t\tg_set_error (VAR_3, 0, 0, \"connection was incomplete (missing local IP)\");\n\t\tgoto done;\n\t}\n\n\tVAR_7 = nm_setting_vpn_get_data_item (VAR_5, VAR_35);\n\tif (VAR_7 && strlen (VAR_7))\n\t\tVAR_14 = VAR_7;\n\telse {\n\t\tg_set_error (VAR_3, 0, 0, \"connection was incomplete (missing netmask)\");\n\t\tgoto done;\n\t}\n\n\t/* COMMENT_0 */\n\tVAR_8 = nm_setting_vpn_get_data_item (VAR_5, VAR_36);\n\tif (VAR_8) {\n\t\tif (!strncmp (VAR_8, VAR_37, strlen(VAR_37))) {\n\t\t\tVAR_27 = 1;\n\t\t\tVAR_26 = g_strdup(\"password\");\n\t\t} else if (!strncmp (VAR_8, VAR_38, strlen(VAR_38))) {\n\t\t\tVAR_9 = nm_setting_vpn_get_data_item (VAR_5, VAR_39);\n\t\t\tVAR_26 = g_strdup(\"publickey\");\n\t\t} else { /* COMMENT_1 */\n\t\t\t/* COMMENT_2 */\n\t\t\tVAR_26 = g_strdup(\"publickey\");\n\t\t}\n\t}\n\t/* COMMENT_0 */\n\n\t/* COMMENT_3 */\n\tVAR_7 = nm_setting_vpn_get_data_item (VAR_5, VAR_40);\n\tif (VAR_7 && strlen (VAR_7))\n\t\tVAR_11 = VAR_7;\n\telse\n\t\tVAR_11 = g_strdup_printf(\"%d\", VAR_41);\n\n\tVAR_7 = nm_setting_vpn_get_data_item (VAR_5, VAR_42);\n\tif (VAR_7 && strlen (VAR_7))\n\t\tVAR_20 = VAR_7;\n\telse\n\t\tVAR_20 = g_strdup_printf(\"%d\", VAR_43);\n\n\tVAR_7 = nm_setting_vpn_get_data_item (VAR_5, VAR_44);\n\tif (VAR_7 && strlen (VAR_7))\n\t\tVAR_18 = VAR_7;\n\telse\n\t\tVAR_18 = g_strdup(VAR_45);\n\n\tVAR_7 = nm_setting_vpn_get_data_item (VAR_5, VAR_46);\n\tif (VAR_7 && strlen (VAR_7))\n\t\tVAR_19 = VAR_7;\n\telse\n\t\tVAR_19 = g_strdup_printf(\"%d\", VAR_47);\n\n\tVAR_7 = nm_setting_vpn_get_data_item (VAR_5, VAR_48);\n\tif (VAR_7 && strlen (VAR_7))\n\t\tVAR_21 = VAR_7;\n\telse\n\t\tVAR_21 = g_strdup(VAR_49);\n\n\tVAR_7 = nm_setting_vpn_get_data_item (VAR_5, VAR_50);\n\tif (VAR_7 && IS_YES(VAR_7)) {\n\t\tVAR_22 = g_strdup(\"tap\");\n\t\tVAR_23 = g_strdup(\"ethernet\");\n\t} else {\n\t\tVAR_22 = g_strdup(\"tun\");\n\t\tVAR_23 = g_strdup(\"point-to-point\");\n\t}\n\n\tVAR_7 = nm_setting_vpn_get_data_item (VAR_5, VAR_51);\n\tif (VAR_7 && IS_YES(VAR_7)) {\n\t\tVAR_28 = TRUE;\n\n\t\tVAR_7 = nm_setting_vpn_get_data_item (VAR_5, VAR_52);\n\t\tif (VAR_7 && strlen (VAR_7))\n\t\t\tVAR_16 = VAR_7;\n\t\telse {\n\t\t\tg_set_error (VAR_3, 0, 0, \"connection was incomplete (missing IPv6 remote IP)\");\n\t\t\tgoto done;\n\t\t}\n\t\n\t\tVAR_7 = nm_setting_vpn_get_data_item (VAR_5, VAR_53);\n\t\tif (VAR_7 && strlen (VAR_7))\n\t\t\tVAR_15 = VAR_7;\n\t\telse {\n\t\t\tg_set_error (VAR_3, 0, 0, \"connection was incomplete (missing IPv6 local IP)\");\n\t\t\tgoto done;\n\t\t}\n\n\t\tVAR_7 = nm_setting_vpn_get_data_item (VAR_5, VAR_54);\n\t\tif (VAR_7 && strlen (VAR_7))\n\t\t\tVAR_17 = VAR_7;\n\t\telse {\n\t\t\tg_set_error (VAR_3, 0, 0, \"connection was incomplete (missing IPv6 netmask)\");\n\t\t\tgoto done;\n\t\t}\n\n\t\tVAR_24 = g_strdup_printf(\"%s $DEV_TYPE$LOCAL_DEV add $LOCAL_IP_6/$NETMASK_6\", VAR_55);\n\t\tVAR_25 = g_strdup_printf(\"%s $DEV_TYPE$REMOTE_DEV add $REMOTE_IP_6/$NETMASK_6\", VAR_55);\n\t} else {\n\t\tVAR_28 = FALSE;\n\t\tVAR_24 = g_strdup(\"\");\n\t\tVAR_25 = g_strdup(\"\");\n\t}\n\n\t/* COMMENT_4 */\n\n\t/* COMMENT_5 */\n\tfprintf (VAR_6, \"#!/bin/bash\\n\");\n\t/* COMMENT_6 */\n\tfprintf (VAR_6, \"%s=%s\\n\", VAR_56, VAR_8);\n\tif (VAR_9) {\n\t\tfprintf (VAR_6, \"%s=%s\\n\", VAR_57, VAR_9);\n\t}\n\tfprintf (VAR_6, \"%s=%s\\n\", VAR_58, VAR_10);\n\tfprintf (VAR_6, \"%s=%s\\n\", VAR_59, VAR_21);\n\tfprintf (VAR_6, \"%s=%s\\n\", VAR_60, VAR_13);\n\tfprintf (VAR_6, \"%s=%s\\n\", VAR_61, VAR_12);\n\tfprintf (VAR_6, \"%s=%s\\n\", VAR_62, VAR_14);\n\tif (VAR_28) {\n\t\tfprintf (VAR_6, \"%s=%s\\n\", VAR_63, VAR_64);\n\t\tfprintf (VAR_6, \"%s=%s\\n\", VAR_65, VAR_16);\n\t\tfprintf (VAR_6, \"%s=%s\\n\", VAR_66, VAR_15);\n\t\tfprintf (VAR_6, \"%s=%s\\n\", VAR_67, VAR_17);\n\t}\n\tfprintf (VAR_6, \"%s=%s\\n\", VAR_68, VAR_11);\n\tfprintf (VAR_6, \"%s=%s\\n\", VAR_69, VAR_20);\n\tfprintf (VAR_6, \"%s='%s'\\n\", VAR_70, VAR_18);\n\tfprintf (VAR_6, \"%s=%s\\n\", VAR_71, VAR_19);\n\n\t/* COMMENT_7 */\n\tfprintf (VAR_6, \"%s=%s\\n\", VAR_72, VAR_22);\n\tfprintf (VAR_6, \"%s=%s\\n\", VAR_73, VAR_23);\n\n\t/* COMMENT_8 */\n\tfprintf (VAR_6, \"for i in `seq 0 255`; do ! %s $DEV_TYPE$i >& /dev/null && LOCAL_DEV=$i && break; done\", VAR_55);\n\n\t/* COMMENT_9 */\n\tfprintf (VAR_6, \"\\n\");\n\tfprintf(VAR_6, \"ssh -f %s -o PreferredAuthentications=%s -o NumberOfPasswordPrompts=%d -o Tunnel=$TUNNEL_TYPE $EXTRA_OPTS -o TunnelDevice=$LOCAL_DEV:$REMOTE_DEV -o User=$REMOTE_USERNAME -o Port=$PORT -o HostName=$REMOTE $REMOTE \\\"%s $DEV_TYPE$REMOTE_DEV $REMOTE_IP netmask $NETMASK pointopoint $LOCAL_IP; %s\\\" && \\\\\\n\",\n\t\t(VAR_9 ? g_strconcat(\"-i \", VAR_9, NULL) : \"\"),\n\t\tVAR_26,\n\t\tVAR_27,\n\t\tVAR_55,\n\t\tVAR_25);\n\tfprintf(VAR_6, \"%s $DEV_TYPE$LOCAL_DEV $LOCAL_IP netmask $NETMASK pointopoint $REMOTE_IP; %s\\n\", VAR_55, VAR_24);\n\n\tVAR_29 = TRUE;\n\n\tg_free(VAR_22);\n\tg_free(VAR_23);\n\tg_free(VAR_24);\n\tg_free(VAR_25);\n\tg_free(VAR_26);\n\ndone:\n\tfclose (VAR_6);\n\treturn VAR_29;\n}",
  "func_graph_path_before": "danfruehauf/NetworkManager-ssh/5d88cd89795352b5df54cc0ebb6a0076b8c89ee4/nm-ssh.c/vul/before/1.json",
  "func": "static gboolean\nexport (NMVpnEditorPlugin *iface,\n        const char *path,\n        NMConnection *connection,\n        GError **error)\n{\n\tNMSettingConnection *s_con;\n\tNMSettingVpn *s_vpn;\n\tFILE *f;\n\tconst char *value;\n\tconst char *auth_type = NULL;\n\tconst char *key_file = NULL;\n\tconst char *gateway = NULL;\n\tconst char *port = NULL;\n\tconst char *local_ip = NULL;\n\tconst char *remote_ip = NULL;\n\tconst char *netmask = NULL;\n\tconst char *local_ip_6 = NULL;\n\tconst char *remote_ip_6 = NULL;\n\tconst char *netmask_6 = NULL;\n\tconst char *remote_dev = NULL;\n\tconst char *mtu = NULL;\n\tconst char *remote_username = NULL;\n\tchar *device_type = NULL;\n\tchar *tunnel_type = NULL;\n\tchar *ifconfig_cmd_local_6 = NULL;\n\tchar *ifconfig_cmd_remote_6 = NULL;\n\tchar *preferred_authentication = NULL;\n\tunsigned password_prompt_nr = 0;\n\tgboolean ipv6 = FALSE;\n\tgboolean success = FALSE;\n\n\ts_con = NM_SETTING_CONNECTION (nm_connection_get_setting (connection, NM_TYPE_SETTING_CONNECTION));\n\tg_assert (s_con);\n\n\ts_vpn = (NMSettingVpn *) nm_connection_get_setting (connection, NM_TYPE_SETTING_VPN);\n\n\tf = fopen (path, \"w\");\n\tif (!f) {\n\t\tg_set_error (error, 0, 0, \"could not open file for writing\");\n\t\treturn FALSE;\n\t}\n\n\tvalue = nm_setting_vpn_get_data_item (s_vpn, NM_SSH_KEY_REMOTE);\n\tif (value && strlen (value))\n\t\tgateway = value;\n\telse {\n\t\tg_set_error (error, 0, 0, \"connection was incomplete (missing gateway)\");\n\t\tgoto done;\n\t}\n\n\tvalue = nm_setting_vpn_get_data_item (s_vpn, NM_SSH_KEY_REMOTE_IP);\n\tif (value && strlen (value))\n\t\tremote_ip = value;\n\telse {\n\t\tg_set_error (error, 0, 0, \"connection was incomplete (missing remote IP)\");\n\t\tgoto done;\n\t}\n\n\tvalue = nm_setting_vpn_get_data_item (s_vpn, NM_SSH_KEY_LOCAL_IP);\n\tif (value && strlen (value))\n\t\tlocal_ip = value;\n\telse {\n\t\tg_set_error (error, 0, 0, \"connection was incomplete (missing local IP)\");\n\t\tgoto done;\n\t}\n\n\tvalue = nm_setting_vpn_get_data_item (s_vpn, NM_SSH_KEY_NETMASK);\n\tif (value && strlen (value))\n\t\tnetmask = value;\n\telse {\n\t\tg_set_error (error, 0, 0, \"connection was incomplete (missing netmask)\");\n\t\tgoto done;\n\t}\n\n\t/* Auth type */\n\tauth_type = nm_setting_vpn_get_data_item (s_vpn, NM_SSH_KEY_AUTH_TYPE);\n\tif (auth_type) {\n\t\tif (!strncmp (auth_type, NM_SSH_AUTH_TYPE_PASSWORD, strlen(NM_SSH_AUTH_TYPE_PASSWORD))) {\n\t\t\tpassword_prompt_nr = 1;\n\t\t\tpreferred_authentication = g_strdup(\"password\");\n\t\t} else if (!strncmp (auth_type, NM_SSH_AUTH_TYPE_KEY, strlen(NM_SSH_AUTH_TYPE_KEY))) {\n\t\t\tkey_file = nm_setting_vpn_get_data_item (s_vpn, NM_SSH_KEY_KEY_FILE);\n\t\t\tpreferred_authentication = g_strdup(\"publickey\");\n\t\t} else { // (!strncmp (auth_type, NM_SSH_AUTH_TYPE_SSH_AGENT, strlen(NM_SSH_AUTH_TYPE_SSH_AGENT))) {\n\t\t\t// Nothing to be done for ssh-agent, the wise choice...\n\t\t\tpreferred_authentication = g_strdup(\"publickey\");\n\t\t}\n\t}\n\t/* Auth type */\n\n\t/* Advanced values start */\n\tvalue = nm_setting_vpn_get_data_item (s_vpn, NM_SSH_KEY_PORT);\n\tif (value && strlen (value))\n\t\tport = value;\n\telse\n\t\tport = g_strdup_printf(\"%d\", NM_SSH_DEFAULT_PORT);\n\n\tvalue = nm_setting_vpn_get_data_item (s_vpn, NM_SSH_KEY_TUNNEL_MTU);\n\tif (value && strlen (value))\n\t\tmtu = value;\n\telse\n\t\tmtu = g_strdup_printf(\"%d\", NM_SSH_DEFAULT_MTU);\n\n\tvalue = nm_setting_vpn_get_data_item (s_vpn, NM_SSH_KEY_REMOTE_DEV);\n\tif (value && strlen (value))\n\t\tremote_dev = value;\n\telse\n\t\tremote_dev = g_strdup_printf(\"%d\", NM_SSH_DEFAULT_REMOTE_DEV);\n\n\tvalue = nm_setting_vpn_get_data_item (s_vpn, NM_SSH_KEY_REMOTE_USERNAME);\n\tif (value && strlen (value))\n\t\tremote_username = value;\n\telse\n\t\tremote_username = g_strdup(NM_SSH_DEFAULT_REMOTE_USERNAME);\n\n\tvalue = nm_setting_vpn_get_data_item (s_vpn, NM_SSH_KEY_TAP_DEV);\n\tif (value && IS_YES(value)) {\n\t\tdevice_type = g_strdup(\"tap\");\n\t\ttunnel_type = g_strdup(\"ethernet\");\n\t} else {\n\t\tdevice_type = g_strdup(\"tun\");\n\t\ttunnel_type = g_strdup(\"point-to-point\");\n\t}\n\n\tvalue = nm_setting_vpn_get_data_item (s_vpn, NM_SSH_KEY_IP_6);\n\tif (value && IS_YES(value)) {\n\t\tipv6 = TRUE;\n\n\t\tvalue = nm_setting_vpn_get_data_item (s_vpn, NM_SSH_KEY_REMOTE_IP_6);\n\t\tif (value && strlen (value))\n\t\t\tremote_ip_6 = value;\n\t\telse {\n\t\t\tg_set_error (error, 0, 0, \"connection was incomplete (missing IPv6 remote IP)\");\n\t\t\tgoto done;\n\t\t}\n\t\n\t\tvalue = nm_setting_vpn_get_data_item (s_vpn, NM_SSH_KEY_LOCAL_IP_6);\n\t\tif (value && strlen (value))\n\t\t\tlocal_ip_6 = value;\n\t\telse {\n\t\t\tg_set_error (error, 0, 0, \"connection was incomplete (missing IPv6 local IP)\");\n\t\t\tgoto done;\n\t\t}\n\n\t\tvalue = nm_setting_vpn_get_data_item (s_vpn, NM_SSH_KEY_NETMASK_6);\n\t\tif (value && strlen (value))\n\t\t\tnetmask_6 = value;\n\t\telse {\n\t\t\tg_set_error (error, 0, 0, \"connection was incomplete (missing IPv6 netmask)\");\n\t\t\tgoto done;\n\t\t}\n\n\t\tifconfig_cmd_local_6 = g_strdup_printf(\"%s $DEV_TYPE$LOCAL_DEV add $LOCAL_IP_6/$NETMASK_6\", IFCONFIG);\n\t\tifconfig_cmd_remote_6 = g_strdup_printf(\"%s $DEV_TYPE$REMOTE_DEV add $REMOTE_IP_6/$NETMASK_6\", IFCONFIG);\n\t} else {\n\t\tipv6 = FALSE;\n\t\tifconfig_cmd_local_6 = g_strdup(\"\");\n\t\tifconfig_cmd_remote_6 = g_strdup(\"\");\n\t}\n\n\t/* Advanced values end */\n\n\t/* Serialize everything to a file */\n\tfprintf (f, \"#!/bin/bash\\n\");\n\t/* Make my life easier and just add the AUTH_TYPE= key, not used though */\n\tfprintf (f, \"%s=%s\\n\", AUTH_TYPE_KEY, auth_type);\n\tif (key_file) {\n\t\tfprintf (f, \"%s=%s\\n\", KEY_FILE_KEY, key_file);\n\t}\n\tfprintf (f, \"%s=%s\\n\", REMOTE_KEY, gateway);\n\tfprintf (f, \"%s=%s\\n\", REMOTE_USERNAME_KEY, remote_username);\n\tfprintf (f, \"%s=%s\\n\", REMOTE_IP_KEY, remote_ip);\n\tfprintf (f, \"%s=%s\\n\", LOCAL_IP_KEY, local_ip);\n\tfprintf (f, \"%s=%s\\n\", NETMASK_KEY, netmask);\n\tif (ipv6) {\n\t\tfprintf (f, \"%s=%s\\n\", IP_6_KEY, YES);\n\t\tfprintf (f, \"%s=%s\\n\", REMOTE_IP_6_KEY, remote_ip_6);\n\t\tfprintf (f, \"%s=%s\\n\", LOCAL_IP_6_KEY, local_ip_6);\n\t\tfprintf (f, \"%s=%s\\n\", NETMASK_6_KEY, netmask_6);\n\t}\n\tfprintf (f, \"%s=%s\\n\", PORT_KEY, port);\n\tfprintf (f, \"%s=%s\\n\", MTU_KEY, mtu);\n\tfprintf (f, \"%s=%s\\n\", REMOTE_DEV_KEY, remote_dev);\n\n\t/* Assign tun/tap */\n\tfprintf (f, \"%s=%s\\n\", DEV_TYPE_KEY, device_type);\n\tfprintf (f, \"%s=%s\\n\", TUNNEL_TYPE_KEY, tunnel_type);\n\n\t/* Add a little of bash script to probe for a free tun/tap device */\n\tfprintf (f, \"for i in `seq 0 255`; do ! %s $DEV_TYPE$i >& /dev/null && LOCAL_DEV=$i && break; done\", IFCONFIG);\n\n\t/* The generic lines that will perform the connection */\n\tfprintf (f, \"\\n\");\n\tfprintf(f, \"ssh -f %s -o PreferredAuthentications=%s -o NumberOfPasswordPrompts=%d -o Tunnel=$TUNNEL_TYPE -o ServerAliveInterval=10 -o TCPKeepAlive=yes -o TunnelDevice=$LOCAL_DEV:$REMOTE_DEV -o User=$REMOTE_USERNAME -o Port=$PORT -o HostName=$REMOTE $REMOTE \\\"%s $DEV_TYPE$REMOTE_DEV $REMOTE_IP netmask $NETMASK pointopoint $LOCAL_IP; %s\\\" && \\\\\\n\",\n\t\t(key_file ? g_strconcat(\"-i \", key_file, NULL) : \"\"),\n\t\tpreferred_authentication,\n\t\tpassword_prompt_nr,\n\t\tIFCONFIG,\n\t\tifconfig_cmd_remote_6);\n\tfprintf(f, \"%s $DEV_TYPE$LOCAL_DEV $LOCAL_IP netmask $NETMASK pointopoint $REMOTE_IP; %s\\n\", IFCONFIG, ifconfig_cmd_local_6);\n\n\tsuccess = TRUE;\n\n\tg_free(device_type);\n\tg_free(tunnel_type);\n\tg_free(ifconfig_cmd_local_6);\n\tg_free(ifconfig_cmd_remote_6);\n\tg_free(preferred_authentication);\n\ndone:\n\tfclose (f);\n\treturn success;\n}",
  "abstract_func": "static gboolean\nexport (NMVpnEditorPlugin *VAR_0,\n        const char *VAR_1,\n        NMConnection *VAR_2,\n        GError **VAR_3)\n{\n\tNMSettingConnection *VAR_4;\n\tNMSettingVpn *VAR_5;\n\tFILE *VAR_6;\n\tconst char *VAR_7;\n\tconst char *VAR_8 = NULL;\n\tconst char *VAR_9 = NULL;\n\tconst char *VAR_10 = NULL;\n\tconst char *VAR_11 = NULL;\n\tconst char *VAR_12 = NULL;\n\tconst char *VAR_13 = NULL;\n\tconst char *VAR_14 = NULL;\n\tconst char *VAR_15 = NULL;\n\tconst char *VAR_16 = NULL;\n\tconst char *VAR_17 = NULL;\n\tconst char *VAR_18 = NULL;\n\tconst char *VAR_19 = NULL;\n\tconst char *VAR_20 = NULL;\n\tchar *VAR_21 = NULL;\n\tchar *VAR_22 = NULL;\n\tchar *VAR_23 = NULL;\n\tchar *VAR_24 = NULL;\n\tchar *VAR_25 = NULL;\n\tunsigned VAR_26 = 0;\n\tgboolean VAR_27 = FALSE;\n\tgboolean VAR_28 = FALSE;\n\n\tVAR_4 = NM_SETTING_CONNECTION (nm_connection_get_setting (VAR_2, VAR_29));\n\tg_assert (VAR_4);\n\n\tVAR_5 = (NMSettingVpn *) nm_connection_get_setting (VAR_2, VAR_30);\n\n\tVAR_6 = fopen (VAR_1, \"w\");\n\tif (!VAR_6) {\n\t\tg_set_error (VAR_3, 0, 0, \"could not open file for writing\");\n\t\treturn FALSE;\n\t}\n\n\tVAR_7 = nm_setting_vpn_get_data_item (VAR_5, VAR_31);\n\tif (VAR_7 && strlen (VAR_7))\n\t\tVAR_10 = VAR_7;\n\telse {\n\t\tg_set_error (VAR_3, 0, 0, \"connection was incomplete (missing gateway)\");\n\t\tgoto done;\n\t}\n\n\tVAR_7 = nm_setting_vpn_get_data_item (VAR_5, VAR_32);\n\tif (VAR_7 && strlen (VAR_7))\n\t\tVAR_13 = VAR_7;\n\telse {\n\t\tg_set_error (VAR_3, 0, 0, \"connection was incomplete (missing remote IP)\");\n\t\tgoto done;\n\t}\n\n\tVAR_7 = nm_setting_vpn_get_data_item (VAR_5, VAR_33);\n\tif (VAR_7 && strlen (VAR_7))\n\t\tVAR_12 = VAR_7;\n\telse {\n\t\tg_set_error (VAR_3, 0, 0, \"connection was incomplete (missing local IP)\");\n\t\tgoto done;\n\t}\n\n\tVAR_7 = nm_setting_vpn_get_data_item (VAR_5, VAR_34);\n\tif (VAR_7 && strlen (VAR_7))\n\t\tVAR_14 = VAR_7;\n\telse {\n\t\tg_set_error (VAR_3, 0, 0, \"connection was incomplete (missing netmask)\");\n\t\tgoto done;\n\t}\n\n\t/* COMMENT_0 */\n\tVAR_8 = nm_setting_vpn_get_data_item (VAR_5, VAR_35);\n\tif (VAR_8) {\n\t\tif (!strncmp (VAR_8, VAR_36, strlen(VAR_36))) {\n\t\t\tVAR_26 = 1;\n\t\t\tVAR_25 = g_strdup(\"password\");\n\t\t} else if (!strncmp (VAR_8, VAR_37, strlen(VAR_37))) {\n\t\t\tVAR_9 = nm_setting_vpn_get_data_item (VAR_5, VAR_38);\n\t\t\tVAR_25 = g_strdup(\"publickey\");\n\t\t} else { /* COMMENT_1 */\n\t\t\t/* COMMENT_2 */\n\t\t\tVAR_25 = g_strdup(\"publickey\");\n\t\t}\n\t}\n\t/* COMMENT_0 */\n\n\t/* COMMENT_3 */\n\tVAR_7 = nm_setting_vpn_get_data_item (VAR_5, VAR_39);\n\tif (VAR_7 && strlen (VAR_7))\n\t\tVAR_11 = VAR_7;\n\telse\n\t\tVAR_11 = g_strdup_printf(\"%d\", VAR_40);\n\n\tVAR_7 = nm_setting_vpn_get_data_item (VAR_5, VAR_41);\n\tif (VAR_7 && strlen (VAR_7))\n\t\tVAR_19 = VAR_7;\n\telse\n\t\tVAR_19 = g_strdup_printf(\"%d\", VAR_42);\n\n\tVAR_7 = nm_setting_vpn_get_data_item (VAR_5, VAR_43);\n\tif (VAR_7 && strlen (VAR_7))\n\t\tVAR_18 = VAR_7;\n\telse\n\t\tVAR_18 = g_strdup_printf(\"%d\", VAR_44);\n\n\tVAR_7 = nm_setting_vpn_get_data_item (VAR_5, VAR_45);\n\tif (VAR_7 && strlen (VAR_7))\n\t\tVAR_20 = VAR_7;\n\telse\n\t\tVAR_20 = g_strdup(VAR_46);\n\n\tVAR_7 = nm_setting_vpn_get_data_item (VAR_5, VAR_47);\n\tif (VAR_7 && IS_YES(VAR_7)) {\n\t\tVAR_21 = g_strdup(\"tap\");\n\t\tVAR_22 = g_strdup(\"ethernet\");\n\t} else {\n\t\tVAR_21 = g_strdup(\"tun\");\n\t\tVAR_22 = g_strdup(\"point-to-point\");\n\t}\n\n\tVAR_7 = nm_setting_vpn_get_data_item (VAR_5, VAR_48);\n\tif (VAR_7 && IS_YES(VAR_7)) {\n\t\tVAR_27 = TRUE;\n\n\t\tVAR_7 = nm_setting_vpn_get_data_item (VAR_5, VAR_49);\n\t\tif (VAR_7 && strlen (VAR_7))\n\t\t\tVAR_16 = VAR_7;\n\t\telse {\n\t\t\tg_set_error (VAR_3, 0, 0, \"connection was incomplete (missing IPv6 remote IP)\");\n\t\t\tgoto done;\n\t\t}\n\t\n\t\tVAR_7 = nm_setting_vpn_get_data_item (VAR_5, VAR_50);\n\t\tif (VAR_7 && strlen (VAR_7))\n\t\t\tVAR_15 = VAR_7;\n\t\telse {\n\t\t\tg_set_error (VAR_3, 0, 0, \"connection was incomplete (missing IPv6 local IP)\");\n\t\t\tgoto done;\n\t\t}\n\n\t\tVAR_7 = nm_setting_vpn_get_data_item (VAR_5, VAR_51);\n\t\tif (VAR_7 && strlen (VAR_7))\n\t\t\tVAR_17 = VAR_7;\n\t\telse {\n\t\t\tg_set_error (VAR_3, 0, 0, \"connection was incomplete (missing IPv6 netmask)\");\n\t\t\tgoto done;\n\t\t}\n\n\t\tVAR_23 = g_strdup_printf(\"%s $DEV_TYPE$LOCAL_DEV add $LOCAL_IP_6/$NETMASK_6\", VAR_52);\n\t\tVAR_24 = g_strdup_printf(\"%s $DEV_TYPE$REMOTE_DEV add $REMOTE_IP_6/$NETMASK_6\", VAR_52);\n\t} else {\n\t\tVAR_27 = FALSE;\n\t\tVAR_23 = g_strdup(\"\");\n\t\tVAR_24 = g_strdup(\"\");\n\t}\n\n\t/* COMMENT_4 */\n\n\t/* COMMENT_5 */\n\tfprintf (VAR_6, \"#!/bin/bash\\n\");\n\t/* COMMENT_6 */\n\tfprintf (VAR_6, \"%s=%s\\n\", VAR_53, VAR_8);\n\tif (VAR_9) {\n\t\tfprintf (VAR_6, \"%s=%s\\n\", VAR_54, VAR_9);\n\t}\n\tfprintf (VAR_6, \"%s=%s\\n\", VAR_55, VAR_10);\n\tfprintf (VAR_6, \"%s=%s\\n\", VAR_56, VAR_20);\n\tfprintf (VAR_6, \"%s=%s\\n\", VAR_57, VAR_13);\n\tfprintf (VAR_6, \"%s=%s\\n\", VAR_58, VAR_12);\n\tfprintf (VAR_6, \"%s=%s\\n\", VAR_59, VAR_14);\n\tif (VAR_27) {\n\t\tfprintf (VAR_6, \"%s=%s\\n\", VAR_60, VAR_61);\n\t\tfprintf (VAR_6, \"%s=%s\\n\", VAR_62, VAR_16);\n\t\tfprintf (VAR_6, \"%s=%s\\n\", VAR_63, VAR_15);\n\t\tfprintf (VAR_6, \"%s=%s\\n\", VAR_64, VAR_17);\n\t}\n\tfprintf (VAR_6, \"%s=%s\\n\", VAR_65, VAR_11);\n\tfprintf (VAR_6, \"%s=%s\\n\", VAR_66, VAR_19);\n\tfprintf (VAR_6, \"%s=%s\\n\", VAR_67, VAR_18);\n\n\t/* COMMENT_7 */\n\tfprintf (VAR_6, \"%s=%s\\n\", VAR_68, VAR_21);\n\tfprintf (VAR_6, \"%s=%s\\n\", VAR_69, VAR_22);\n\n\t/* COMMENT_8 */\n\tfprintf (VAR_6, \"for i in `seq 0 255`; do ! %s $DEV_TYPE$i >& /dev/null && LOCAL_DEV=$i && break; done\", VAR_52);\n\n\t/* COMMENT_9 */\n\tfprintf (VAR_6, \"\\n\");\n\tfprintf(VAR_6, \"ssh -f %s -o PreferredAuthentications=%s -o NumberOfPasswordPrompts=%d -o Tunnel=$TUNNEL_TYPE -o ServerAliveInterval=10 -o TCPKeepAlive=yes -o TunnelDevice=$LOCAL_DEV:$REMOTE_DEV -o User=$REMOTE_USERNAME -o Port=$PORT -o HostName=$REMOTE $REMOTE \\\"%s $DEV_TYPE$REMOTE_DEV $REMOTE_IP netmask $NETMASK pointopoint $LOCAL_IP; %s\\\" && \\\\\\n\",\n\t\t(VAR_9 ? g_strconcat(\"-i \", VAR_9, NULL) : \"\"),\n\t\tVAR_25,\n\t\tVAR_26,\n\t\tVAR_52,\n\t\tVAR_24);\n\tfprintf(VAR_6, \"%s $DEV_TYPE$LOCAL_DEV $LOCAL_IP netmask $NETMASK pointopoint $REMOTE_IP; %s\\n\", VAR_52, VAR_23);\n\n\tVAR_28 = TRUE;\n\n\tg_free(VAR_21);\n\tg_free(VAR_22);\n\tg_free(VAR_23);\n\tg_free(VAR_24);\n\tg_free(VAR_25);\n\ndone:\n\tfclose (VAR_6);\n\treturn VAR_28;\n}",
  "func_graph_path": "danfruehauf/NetworkManager-ssh/5d88cd89795352b5df54cc0ebb6a0076b8c89ee4/nm-ssh.c/vul/after/1.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -18,7 +18,6 @@\n \tconst char *local_ip_6 = NULL;\n \tconst char *remote_ip_6 = NULL;\n \tconst char *netmask_6 = NULL;\n-\tconst char *extra_opts = NULL;\n \tconst char *remote_dev = NULL;\n \tconst char *mtu = NULL;\n \tconst char *remote_username = NULL;\n@@ -103,12 +102,6 @@\n \telse\n \t\tmtu = g_strdup_printf(\"%d\", NM_SSH_DEFAULT_MTU);\n \n-\tvalue = nm_setting_vpn_get_data_item (s_vpn, NM_SSH_KEY_EXTRA_OPTS);\n-\tif (value && strlen (value))\n-\t\textra_opts = value;\n-\telse\n-\t\textra_opts = g_strdup(NM_SSH_DEFAULT_EXTRA_OPTS);\n-\n \tvalue = nm_setting_vpn_get_data_item (s_vpn, NM_SSH_KEY_REMOTE_DEV);\n \tif (value && strlen (value))\n \t\tremote_dev = value;\n@@ -188,7 +181,6 @@\n \t}\n \tfprintf (f, \"%s=%s\\n\", PORT_KEY, port);\n \tfprintf (f, \"%s=%s\\n\", MTU_KEY, mtu);\n-\tfprintf (f, \"%s='%s'\\n\", EXTRA_OPTS_KEY, extra_opts);\n \tfprintf (f, \"%s=%s\\n\", REMOTE_DEV_KEY, remote_dev);\n \n \t/* Assign tun/tap */\n@@ -200,7 +192,7 @@\n \n \t/* The generic lines that will perform the connection */\n \tfprintf (f, \"\\n\");\n-\tfprintf(f, \"ssh -f %s -o PreferredAuthentications=%s -o NumberOfPasswordPrompts=%d -o Tunnel=$TUNNEL_TYPE $EXTRA_OPTS -o TunnelDevice=$LOCAL_DEV:$REMOTE_DEV -o User=$REMOTE_USERNAME -o Port=$PORT -o HostName=$REMOTE $REMOTE \\\"%s $DEV_TYPE$REMOTE_DEV $REMOTE_IP netmask $NETMASK pointopoint $LOCAL_IP; %s\\\" && \\\\\\n\",\n+\tfprintf(f, \"ssh -f %s -o PreferredAuthentications=%s -o NumberOfPasswordPrompts=%d -o Tunnel=$TUNNEL_TYPE -o ServerAliveInterval=10 -o TCPKeepAlive=yes -o TunnelDevice=$LOCAL_DEV:$REMOTE_DEV -o User=$REMOTE_USERNAME -o Port=$PORT -o HostName=$REMOTE $REMOTE \\\"%s $DEV_TYPE$REMOTE_DEV $REMOTE_IP netmask $NETMASK pointopoint $LOCAL_IP; %s\\\" && \\\\\\n\",\n \t\t(key_file ? g_strconcat(\"-i \", key_file, NULL) : \"\"),\n \t\tpreferred_authentication,\n \t\tpassword_prompt_nr,",
  "diff_line_info": {
    "deleted_lines": [
      "\tconst char *extra_opts = NULL;",
      "\tvalue = nm_setting_vpn_get_data_item (s_vpn, NM_SSH_KEY_EXTRA_OPTS);",
      "\tif (value && strlen (value))",
      "\t\textra_opts = value;",
      "\telse",
      "\t\textra_opts = g_strdup(NM_SSH_DEFAULT_EXTRA_OPTS);",
      "",
      "\tfprintf (f, \"%s='%s'\\n\", EXTRA_OPTS_KEY, extra_opts);",
      "\tfprintf(f, \"ssh -f %s -o PreferredAuthentications=%s -o NumberOfPasswordPrompts=%d -o Tunnel=$TUNNEL_TYPE $EXTRA_OPTS -o TunnelDevice=$LOCAL_DEV:$REMOTE_DEV -o User=$REMOTE_USERNAME -o Port=$PORT -o HostName=$REMOTE $REMOTE \\\"%s $DEV_TYPE$REMOTE_DEV $REMOTE_IP netmask $NETMASK pointopoint $LOCAL_IP; %s\\\" && \\\\\\n\","
    ],
    "added_lines": [
      "\tfprintf(f, \"ssh -f %s -o PreferredAuthentications=%s -o NumberOfPasswordPrompts=%d -o Tunnel=$TUNNEL_TYPE -o ServerAliveInterval=10 -o TCPKeepAlive=yes -o TunnelDevice=$LOCAL_DEV:$REMOTE_DEV -o User=$REMOTE_USERNAME -o Port=$PORT -o HostName=$REMOTE $REMOTE \\\"%s $DEV_TYPE$REMOTE_DEV $REMOTE_IP netmask $NETMASK pointopoint $LOCAL_IP; %s\\\" && \\\\\\n\","
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/danfruehauf/NetworkManager-ssh/pull/98",
  "description": {
    "pr_info": {
      "title": "Remove extra options",
      "number": 98
    },
    "comment": [
      "After analyzing some privilege escalation possibilites, it was decided\r\nit is best to remove extra options",
      "I understand some people are going to be very unhappy with it. However I hope to add `-L` and `-R` options.\r\n\r\nSee also:\r\nhttps://bugzilla.redhat.com/show_bug.cgi?id=1803499",
      "@lhw This should be urgently deployed. I'll tag it as 1.2.11",
      "@danfruehauf can you please request a CVE as needed for the privilege escalation flaw via https://cveform.mitre.org/ ?",
      "@carnil I've requested a CVE ID and will post it here once I've heard back from them.",
      "@kobus-v-schoor was there any news on the CVE assignment?",
      "@danfruehauf https://bugzilla.redhat.com/show_bug.cgi?id=1803499 is not publicly accessible, possible to open that up? This might be blocking the CVE assignment from MITRE if they have not enough context.",
      "CVE-2020-9355 was assigned for this issue.",
      "Darn. I can't -D anymore. Is there some way to add this? :(",
      "The PR removed the extra options, but left in the README section and the image, giving the false impression this is still supported.\r\n\r\nOn the same topic, I'd really like to have `-L` back, would you be open to merge a very restricted input field that just allows the user to append valid `-L` blocks?"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.95  \n\nThe commit addresses a security concern related to privilege escalation by removing the ability to pass extra SSH options, which could be exploited."
}