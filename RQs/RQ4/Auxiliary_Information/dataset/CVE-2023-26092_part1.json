{
  "cve_id": "CVE-2023-26092",
  "cwe_ids": [
    "CWE-917"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
  "cvss_is_v3": true,
  "repo_name": "liimaorg/liima",
  "commit_msg": "prevent usage of dangerous freemarker functions",
  "commit_hash": "78ba2e198c615dc8858e56eee3290989f0362686",
  "git_url": "https://github.com/liimaorg/liima/commit/78ba2e198c615dc8858e56eee3290989f0362686",
  "file_path": "AMW_business/src/main/java/ch/puzzle/itc/mobiliar/business/generator/control/extracted/templates/BaseTemplateProcessor.java",
  "func_name": "getConfiguration",
  "func_before": "public static Configuration getConfiguration(AMWTemplateExceptionHandler templateExceptionHandler) {\n        Configuration cfg = new Configuration(Configuration.VERSION_2_3_22);\n        cfg.setTemplateExceptionHandler(templateExceptionHandler);\n        cfg.setShowErrorTips(false);\n        cfg.setLogTemplateExceptions(false);\n        // because otherwise freemarker renders numbers by default like 1,000,000 http://freemarker.org/docs/app_faq.html#faq_number_grouping\n        cfg.setNumberFormat(\"0.######\");\n        return cfg;\n    }",
  "abstract_func_before": "public static Configuration getConfiguration(AMWTemplateExceptionHandler VAR_0) {\n        Configuration VAR_1 = new Configuration(VAR_2.VERSION_2_3_22);\n        VAR_1.setTemplateExceptionHandler(VAR_0);\n        VAR_1.setShowErrorTips(false);\n        VAR_1.setLogTemplateExceptions(false);\n        /* COMMENT_0 */\n        VAR_1.setNumberFormat(\"0.######\");\n        return VAR_1;\n    }",
  "func_graph_path_before": "liimaorg/liima/78ba2e198c615dc8858e56eee3290989f0362686/BaseTemplateProcessor.java/vul/before/0.json",
  "func": "public static Configuration getConfiguration(AMWTemplateExceptionHandler templateExceptionHandler) {\n        Configuration cfg = new Configuration(Configuration.VERSION_2_3_22);\n        // prevents Server-Side Template Injection\n        cfg.setNewBuiltinClassResolver(TemplateClassResolver.ALLOWS_NOTHING_RESOLVER);\n        cfg.setAPIBuiltinEnabled(false);\n        cfg.setTemplateExceptionHandler(templateExceptionHandler);\n        cfg.setShowErrorTips(false);\n        cfg.setLogTemplateExceptions(false);\n        // because otherwise freemarker renders numbers by default like 1,000,000 http://freemarker.org/docs/app_faq.html#faq_number_grouping\n        cfg.setNumberFormat(\"0.######\");\n        return cfg;\n    }",
  "abstract_func": "public static Configuration getConfiguration(AMWTemplateExceptionHandler VAR_0) {\n        Configuration VAR_1 = new Configuration(VAR_2.VERSION_2_3_22);\n        /* COMMENT_0 */\n        VAR_1.setNewBuiltinClassResolver(VAR_3.ALLOWS_NOTHING_RESOLVER);\n        VAR_1.setAPIBuiltinEnabled(false);\n        VAR_1.setTemplateExceptionHandler(VAR_0);\n        VAR_1.setShowErrorTips(false);\n        VAR_1.setLogTemplateExceptions(false);\n        /* COMMENT_1 */\n        VAR_1.setNumberFormat(\"0.######\");\n        return VAR_1;\n    }",
  "func_graph_path": "liimaorg/liima/78ba2e198c615dc8858e56eee3290989f0362686/BaseTemplateProcessor.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,5 +1,8 @@\n public static Configuration getConfiguration(AMWTemplateExceptionHandler templateExceptionHandler) {\n         Configuration cfg = new Configuration(Configuration.VERSION_2_3_22);\n+        // prevents Server-Side Template Injection\n+        cfg.setNewBuiltinClassResolver(TemplateClassResolver.ALLOWS_NOTHING_RESOLVER);\n+        cfg.setAPIBuiltinEnabled(false);\n         cfg.setTemplateExceptionHandler(templateExceptionHandler);\n         cfg.setShowErrorTips(false);\n         cfg.setLogTemplateExceptions(false);",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "        // prevents Server-Side Template Injection",
      "        cfg.setNewBuiltinClassResolver(TemplateClassResolver.ALLOWS_NOTHING_RESOLVER);",
      "        cfg.setAPIBuiltinEnabled(false);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/liimaorg/liima/pull/678",
  "description": {
    "pr_info": {
      "title": "542 server side template injection",
      "number": 678
    },
    "comment": [
      "With this pull request, the freemarker-template-processor prevents the usage of `api()` and `new()`-functions in template-expressions with the updated configuration and limits server-side-code-execution.\r\n"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix;  \n**Confidence:** 0.9"
}