{
  "cve_id": "CVE-2020-29394",
  "cwe_ids": [
    "CWE-787"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "COVESA/dlt-daemon",
  "commit_msg": "dlt_common: Fix buffer overflow in dlt_filter_load\n\nA buffer overflow in the dlt_filter_load function in dlt_common.c in dlt-daemon allows arbitrary code execution via an unsafe usage of fscanf, because it does not limit the number of characters to be read in a format argument.\n\nFixed: #274\n\nSigned-off-by: GwanYeong Kim <gy741.kim@gmail.com>",
  "commit_hash": "7f5cd5404a03fa330e192084f6bdafb2dc9bdcb7",
  "git_url": "https://github.com/COVESA/dlt-daemon/commit/7f5cd5404a03fa330e192084f6bdafb2dc9bdcb7",
  "file_path": "src/shared/dlt_common.c",
  "func_name": "dlt_filter_load",
  "func_before": "DltReturnValue dlt_filter_load(DltFilter *filter, const char *filename, int verbose)\n{\n    if ((filter == NULL) || (filename == NULL))\n        return DLT_RETURN_WRONG_PARAMETER;\n\n    FILE *handle;\n    char str1[DLT_COMMON_BUFFER_LENGTH];\n    char apid[DLT_ID_SIZE], ctid[DLT_ID_SIZE];\n\n    PRINT_FUNCTION_VERBOSE(verbose);\n\n    handle = fopen(filename, \"r\");\n\n    if (handle == NULL) {\n        dlt_vlog(LOG_WARNING, \"Filter file %s cannot be opened!\\n\", filename);\n        return DLT_RETURN_ERROR;\n    }\n\n    /* Reset filters */\n    filter->counter = 0;\n\n    while (!feof(handle)) {\n        str1[0] = 0;\n\n        if (fscanf(handle, \"%s\", str1) != 1)\n            break;\n\n        if (str1[0] == 0)\n            break;\n\n        printf(\" %s\", str1);\n\n        if (strcmp(str1, \"----\") == 0)\n            dlt_set_id(apid, \"\");\n        else\n            dlt_set_id(apid, str1);\n\n        str1[0] = 0;\n\n        if (fscanf(handle, \"%s\", str1) != 1)\n            break;\n\n        if (str1[0] == 0)\n            break;\n\n        printf(\" %s\\r\\n\", str1);\n\n        if (strcmp(str1, \"----\") == 0)\n            dlt_set_id(ctid, \"\");\n        else\n            dlt_set_id(ctid, str1);\n\n        if (filter->counter < DLT_FILTER_MAX) {\n            dlt_filter_add(filter, apid, ctid, verbose);\n        }\n        else {\n            dlt_vlog(LOG_WARNING,\n                     \"Maximum number (%d) of allowed filters reached, ignoring rest of filters!\\n\",\n                     DLT_FILTER_MAX);\n        }\n    }\n\n    fclose(handle);\n\n    return DLT_RETURN_OK;\n}",
  "abstract_func_before": "DltReturnValue dlt_filter_load(DltFilter *VAR_0, const char *VAR_1, int VAR_2)\n{\n    if ((VAR_0 == NULL) || (VAR_1 == NULL))\n        return VAR_3;\n\n    FILE *VAR_4;\n    char VAR_5[VAR_6];\n    char VAR_7[VAR_8], VAR_9[VAR_8];\n\n    PRINT_FUNCTION_VERBOSE(VAR_2);\n\n    VAR_4 = fopen(VAR_1, \"r\");\n\n    if (VAR_4 == NULL) {\n        dlt_vlog(VAR_10, \"Filter file %s cannot be opened!\\n\", VAR_1);\n        return VAR_11;\n    }\n\n    /* COMMENT_0 */\n    VAR_0->counter = 0;\n\n    while (!feof(VAR_4)) {\n        VAR_5[0] = 0;\n\n        if (fscanf(VAR_4, \"%s\", VAR_5) != 1)\n            break;\n\n        if (VAR_5[0] == 0)\n            break;\n\n        printf(\" %s\", VAR_5);\n\n        if (strcmp(VAR_5, \"----\") == 0)\n            dlt_set_id(VAR_7, \"\");\n        else\n            dlt_set_id(VAR_7, VAR_5);\n\n        VAR_5[0] = 0;\n\n        if (fscanf(VAR_4, \"%s\", VAR_5) != 1)\n            break;\n\n        if (VAR_5[0] == 0)\n            break;\n\n        printf(\" %s\\r\\n\", VAR_5);\n\n        if (strcmp(VAR_5, \"----\") == 0)\n            dlt_set_id(VAR_9, \"\");\n        else\n            dlt_set_id(VAR_9, VAR_5);\n\n        if (VAR_0->counter < VAR_12) {\n            dlt_filter_add(VAR_0, VAR_7, VAR_9, VAR_2);\n        }\n        else {\n            dlt_vlog(VAR_10,\n                     \"Maximum number (%d) of allowed filters reached, ignoring rest of filters!\\n\",\n                     VAR_12);\n        }\n    }\n\n    fclose(VAR_4);\n\n    return VAR_13;\n}",
  "func_graph_path_before": "COVESA/dlt-daemon/7f5cd5404a03fa330e192084f6bdafb2dc9bdcb7/dlt_common.c/vul/before/0.json",
  "func": "DltReturnValue dlt_filter_load(DltFilter *filter, const char *filename, int verbose)\n{\n    if ((filter == NULL) || (filename == NULL))\n        return DLT_RETURN_WRONG_PARAMETER;\n\n    FILE *handle;\n    char str1[DLT_COMMON_BUFFER_LENGTH];\n    char apid[DLT_ID_SIZE], ctid[DLT_ID_SIZE];\n\n    PRINT_FUNCTION_VERBOSE(verbose);\n\n    handle = fopen(filename, \"r\");\n\n    if (handle == NULL) {\n        dlt_vlog(LOG_WARNING, \"Filter file %s cannot be opened!\\n\", filename);\n        return DLT_RETURN_ERROR;\n    }\n\n    /* Reset filters */\n    filter->counter = 0;\n\n    while (!feof(handle)) {\n        str1[0] = 0;\n\n        if (fscanf(handle, \"%254s\", str1) != 1)\n            break;\n\n        if (str1[0] == 0)\n            break;\n\n        printf(\" %s\", str1);\n\n        if (strcmp(str1, \"----\") == 0)\n            dlt_set_id(apid, \"\");\n        else\n            dlt_set_id(apid, str1);\n\n        str1[0] = 0;\n\n        if (fscanf(handle, \"%254s\", str1) != 1)\n            break;\n\n        if (str1[0] == 0)\n            break;\n\n        printf(\" %s\\r\\n\", str1);\n\n        if (strcmp(str1, \"----\") == 0)\n            dlt_set_id(ctid, \"\");\n        else\n            dlt_set_id(ctid, str1);\n\n        if (filter->counter < DLT_FILTER_MAX) {\n            dlt_filter_add(filter, apid, ctid, verbose);\n        }\n        else {\n            dlt_vlog(LOG_WARNING,\n                     \"Maximum number (%d) of allowed filters reached, ignoring rest of filters!\\n\",\n                     DLT_FILTER_MAX);\n        }\n    }\n\n    fclose(handle);\n\n    return DLT_RETURN_OK;\n}",
  "abstract_func": "DltReturnValue dlt_filter_load(DltFilter *VAR_0, const char *VAR_1, int VAR_2)\n{\n    if ((VAR_0 == NULL) || (VAR_1 == NULL))\n        return VAR_3;\n\n    FILE *VAR_4;\n    char VAR_5[VAR_6];\n    char VAR_7[VAR_8], VAR_9[VAR_8];\n\n    PRINT_FUNCTION_VERBOSE(VAR_2);\n\n    VAR_4 = fopen(VAR_1, \"r\");\n\n    if (VAR_4 == NULL) {\n        dlt_vlog(VAR_10, \"Filter file %s cannot be opened!\\n\", VAR_1);\n        return VAR_11;\n    }\n\n    /* COMMENT_0 */\n    VAR_0->counter = 0;\n\n    while (!feof(VAR_4)) {\n        VAR_5[0] = 0;\n\n        if (fscanf(VAR_4, \"%254s\", VAR_5) != 1)\n            break;\n\n        if (VAR_5[0] == 0)\n            break;\n\n        printf(\" %s\", VAR_5);\n\n        if (strcmp(VAR_5, \"----\") == 0)\n            dlt_set_id(VAR_7, \"\");\n        else\n            dlt_set_id(VAR_7, VAR_5);\n\n        VAR_5[0] = 0;\n\n        if (fscanf(VAR_4, \"%254s\", VAR_5) != 1)\n            break;\n\n        if (VAR_5[0] == 0)\n            break;\n\n        printf(\" %s\\r\\n\", VAR_5);\n\n        if (strcmp(VAR_5, \"----\") == 0)\n            dlt_set_id(VAR_9, \"\");\n        else\n            dlt_set_id(VAR_9, VAR_5);\n\n        if (VAR_0->counter < VAR_12) {\n            dlt_filter_add(VAR_0, VAR_7, VAR_9, VAR_2);\n        }\n        else {\n            dlt_vlog(VAR_10,\n                     \"Maximum number (%d) of allowed filters reached, ignoring rest of filters!\\n\",\n                     VAR_12);\n        }\n    }\n\n    fclose(VAR_4);\n\n    return VAR_13;\n}",
  "func_graph_path": "COVESA/dlt-daemon/7f5cd5404a03fa330e192084f6bdafb2dc9bdcb7/dlt_common.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -22,7 +22,7 @@\n     while (!feof(handle)) {\n         str1[0] = 0;\n \n-        if (fscanf(handle, \"%s\", str1) != 1)\n+        if (fscanf(handle, \"%254s\", str1) != 1)\n             break;\n \n         if (str1[0] == 0)\n@@ -37,7 +37,7 @@\n \n         str1[0] = 0;\n \n-        if (fscanf(handle, \"%s\", str1) != 1)\n+        if (fscanf(handle, \"%254s\", str1) != 1)\n             break;\n \n         if (str1[0] == 0)",
  "diff_line_info": {
    "deleted_lines": [
      "        if (fscanf(handle, \"%s\", str1) != 1)",
      "        if (fscanf(handle, \"%s\", str1) != 1)"
    ],
    "added_lines": [
      "        if (fscanf(handle, \"%254s\", str1) != 1)",
      "        if (fscanf(handle, \"%254s\", str1) != 1)"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/COVESA/dlt-daemon/pull/275",
  "description": {
    "pr_info": {
      "title": "dlt_common: Fix buffer overflow in dlt_filter_load",
      "number": 275
    },
    "comment": [
      "A buffer overflow in the dlt_filter_load function in dlt_common.c in dlt-daemon allows arbitrary code execution via an unsafe usage of fscanf, because it does not limit the number of characters to be read in a format argument.\r\n\r\nFixed: #274\r\n\r\nSigned-off-by: GwanYeong Kim <gy741.kim@gmail.com>",
      "Use CVE-2020-29394."
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 1.0  \n\nThe patch addresses a buffer overflow issue caused by an unsafe usage of fscanf. The code change explicitly limits the number of characters read, which directly mitigates the security risk, confirming it's a security vulnerability fix."
}