{
  "cve_id": "CVE-2021-42779",
  "cwe_ids": [
    "CWE-416"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "OpenSC",
  "commit_msg": "oberthur: Correctly check for return values\n\nThanks oss-fuzz\n\nhttps://bugs.chromium.org/p/oss-fuzz/issues/detail?id=28843",
  "commit_hash": "1db88374",
  "git_url": "https://github.com/OpenSC/OpenSC/commit/1db88374bb7706a115d5c3617c6f16115c33bf27",
  "file_path": "src/libopensc/pkcs15-oberthur.c",
  "func_name": "sc_oberthur_read_file",
  "func_before": "static int\nsc_oberthur_read_file(struct sc_pkcs15_card *p15card, const char *in_path,\n\t\tunsigned char **out, size_t *out_len,\n\t\tint verify_pin)\n{\n\tstruct sc_context *ctx = p15card->card->ctx;\n\tstruct sc_card *card = p15card->card;\n\tstruct sc_file *file = NULL;\n\tstruct sc_path path;\n\tsize_t sz;\n\tint rv;\n\n\tLOG_FUNC_CALLED(ctx);\n\tif (!in_path || !out || !out_len)\n\t\tLOG_TEST_RET(ctx, SC_ERROR_INVALID_ARGUMENTS, \"Cannot read oberthur file\");\n\n\tsc_log(ctx, \"read file '%s'; verify_pin:%i\", in_path, verify_pin);\n\n\t*out = NULL;\n\t*out_len = 0;\n\n\tsc_format_path(in_path, &path);\n\trv = sc_select_file(card, &path, &file);\n\tif (rv != SC_SUCCESS) {\n\t\tsc_file_free(file);\n\t\tLOG_TEST_RET(ctx, rv, \"Cannot select oberthur file to read\");\n\t}\n\n\tif (file->ef_structure == SC_FILE_EF_TRANSPARENT)\n\t\tsz = file->size;\n\telse\n\t\tsz = (file->record_length + 2) * file->record_count;\n\n\t*out = calloc(sz, 1);\n\tif (*out == NULL) {\n\t\tsc_file_free(file);\n\t\tLOG_TEST_RET(ctx, SC_ERROR_OUT_OF_MEMORY, \"Cannot read oberthur file\");\n\t}\n\n\tif (file->ef_structure == SC_FILE_EF_TRANSPARENT)   {\n\t\trv = sc_read_binary(card, 0, *out, sz, 0);\n\t}\n\telse\t{\n\t\tsize_t rec;\n\t\tsize_t offs = 0;\n\t\tsize_t rec_len = file->record_length;\n\n\t\tfor (rec = 1; ; rec++)   {\n\t\t\tif (rec > file->record_count) {\n\t\t\t\trv = 0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\trv = sc_read_record(card, rec, *out + offs + 2, rec_len, SC_RECORD_BY_REC_NR);\n\t\t\tif (rv == SC_ERROR_RECORD_NOT_FOUND)   {\n\t\t\t\trv = 0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if (rv < 0)   {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\trec_len = rv;\n\n\t\t\t*(*out + offs) = 'R';\n\t\t\t*(*out + offs + 1) = rv;\n\n\t\t\toffs += rv + 2;\n\t\t}\n\n\t\tsz = offs;\n\t}\n\n\tsc_log(ctx, \"read oberthur file result %i\", rv);\n\tif (verify_pin && rv == SC_ERROR_SECURITY_STATUS_NOT_SATISFIED)   {\n\t\tstruct sc_pkcs15_object *objs[0x10], *pin_obj = NULL;\n\t\tconst struct sc_acl_entry *acl = sc_file_get_acl_entry(file, SC_AC_OP_READ);\n\t\tint ii;\n\n\t\tif (acl == NULL) {\n\t\t\tsc_file_free(file);\n\t\t\tfree(*out);\n\t\t\t*out = NULL;\n\t\t\tLOG_FUNC_RETURN(ctx, SC_ERROR_INVALID_DATA);\n\t\t}\n\n\t\trv = sc_pkcs15_get_objects(p15card, SC_PKCS15_TYPE_AUTH_PIN, objs, 0x10);\n\t\tif (rv != SC_SUCCESS) {\n\t\t\tsc_file_free(file);\n\t\t\tfree(*out);\n\t\t\t*out = NULL;\n\t\t\tLOG_TEST_RET(ctx, rv, \"Cannot read oberthur file: get AUTH objects error\");\n\t\t}\n\n\t\tfor (ii=0; ii<rv; ii++)   {\n\t\t\tstruct sc_pkcs15_auth_info *auth_info = (struct sc_pkcs15_auth_info *) objs[ii]->data;\n\t\t\tsc_log(ctx, \"compare PIN/ACL refs:%i/%i, method:%i/%i\",\n\t\t\t\t\tauth_info->attrs.pin.reference, acl->key_ref, auth_info->auth_method, acl->method);\n\t\t\tif (auth_info->attrs.pin.reference == (int)acl->key_ref && auth_info->auth_method == (unsigned)acl->method)   {\n\t\t\t\tpin_obj = objs[ii];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (!pin_obj || !pin_obj->content.value)    {\n\t\t\trv = SC_ERROR_SECURITY_STATUS_NOT_SATISFIED;\n\t\t}\n\t\telse    {\n\t\t\trv = sc_pkcs15_verify_pin(p15card, pin_obj, pin_obj->content.value, pin_obj->content.len);\n\t\t\tif (!rv)\n\t\t\t\trv = sc_oberthur_read_file(p15card, in_path, out, out_len, 0);\n\t\t}\n\t}\n\n\tsc_file_free(file);\n\n\tif (rv < 0)   {\n\t\tfree(*out);\n\t\t*out = NULL;\n\t\t*out_len = 0;\n\t}\n\n\t*out_len = sz;\n\n\tLOG_FUNC_RETURN(ctx, rv);\n}",
  "abstract_func_before": "static int\nsc_oberthur_read_file(struct sc_pkcs15_card *VAR_0, const char *VAR_1,\n\t\tunsigned char **VAR_2, size_t *VAR_3,\n\t\tint VAR_4)\n{\n\tstruct sc_context *VAR_5 = VAR_0->card->ctx;\n\tstruct sc_card *VAR_6 = VAR_0->card;\n\tstruct sc_file *VAR_7 = NULL;\n\tstruct sc_path VAR_8;\n\tsize_t VAR_9;\n\tint VAR_10;\n\n\tLOG_FUNC_CALLED(VAR_5);\n\tif (!VAR_1 || !VAR_2 || !VAR_3)\n\t\tLOG_TEST_RET(VAR_5, VAR_11, \"Cannot read oberthur file\");\n\n\tsc_log(VAR_5, \"read file '%s'; verify_pin:%i\", VAR_1, VAR_4);\n\n\t*VAR_2 = NULL;\n\t*VAR_3 = 0;\n\n\tsc_format_path(VAR_1, &VAR_8);\n\tVAR_10 = sc_select_file(VAR_6, &VAR_8, &VAR_7);\n\tif (VAR_10 != VAR_12) {\n\t\tsc_file_free(VAR_7);\n\t\tLOG_TEST_RET(VAR_5, VAR_10, \"Cannot select oberthur file to read\");\n\t}\n\n\tif (VAR_7->ef_structure == VAR_13)\n\t\tVAR_9 = VAR_7->size;\n\telse\n\t\tVAR_9 = (VAR_7->record_length + 2) * VAR_7->record_count;\n\n\t*VAR_2 = calloc(VAR_9, 1);\n\tif (*VAR_2 == NULL) {\n\t\tsc_file_free(VAR_7);\n\t\tLOG_TEST_RET(VAR_5, VAR_14, \"Cannot read oberthur file\");\n\t}\n\n\tif (VAR_7->ef_structure == VAR_13)   {\n\t\tVAR_10 = sc_read_binary(VAR_6, 0, *VAR_2, VAR_9, 0);\n\t}\n\telse\t{\n\t\tsize_t VAR_15;\n\t\tsize_t VAR_16 = 0;\n\t\tsize_t VAR_17 = VAR_7->record_length;\n\n\t\tfor (VAR_15 = 1; ; VAR_15++)   {\n\t\t\tif (VAR_15 > VAR_7->record_count) {\n\t\t\t\tVAR_10 = 0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tVAR_10 = sc_read_record(VAR_6, VAR_15, *VAR_2 + VAR_16 + 2, VAR_17, VAR_18);\n\t\t\tif (VAR_10 == VAR_19)   {\n\t\t\t\tVAR_10 = 0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if (VAR_10 < 0)   {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tVAR_17 = VAR_10;\n\n\t\t\t*(*VAR_2 + VAR_16) = 'R';\n\t\t\t*(*VAR_2 + VAR_16 + 1) = VAR_10;\n\n\t\t\tVAR_16 += VAR_10 + 2;\n\t\t}\n\n\t\tVAR_9 = VAR_16;\n\t}\n\n\tsc_log(VAR_5, \"read oberthur file result %i\", VAR_10);\n\tif (VAR_4 && VAR_10 == VAR_20)   {\n\t\tstruct sc_pkcs15_object *VAR_21[0x10], *VAR_22 = NULL;\n\t\tconst struct sc_acl_entry *VAR_23 = sc_file_get_acl_entry(VAR_7, VAR_24);\n\t\tint VAR_25;\n\n\t\tif (VAR_23 == NULL) {\n\t\t\tsc_file_free(VAR_7);\n\t\t\tfree(*VAR_2);\n\t\t\t*VAR_2 = NULL;\n\t\t\tLOG_FUNC_RETURN(VAR_5, VAR_26);\n\t\t}\n\n\t\tVAR_10 = sc_pkcs15_get_objects(VAR_0, VAR_27, VAR_21, 0x10);\n\t\tif (VAR_10 != VAR_12) {\n\t\t\tsc_file_free(VAR_7);\n\t\t\tfree(*VAR_2);\n\t\t\t*VAR_2 = NULL;\n\t\t\tLOG_TEST_RET(VAR_5, VAR_10, \"Cannot read oberthur file: get AUTH objects error\");\n\t\t}\n\n\t\tfor (VAR_25=0; VAR_25<VAR_10; VAR_25++)   {\n\t\t\tstruct sc_pkcs15_auth_info *VAR_28 = (struct sc_pkcs15_auth_info *) VAR_21[VAR_25]->data;\n\t\t\tsc_log(VAR_5, \"compare PIN/ACL refs:%i/%i, method:%i/%i\",\n\t\t\t\t\tVAR_28->attrs.pin.reference, VAR_23->key_ref, VAR_28->auth_method, VAR_23->method);\n\t\t\tif (VAR_28->attrs.pin.reference == (int)VAR_23->key_ref && VAR_28->auth_method == (unsigned)VAR_23->method)   {\n\t\t\t\tVAR_22 = VAR_21[VAR_25];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (!VAR_22 || !VAR_22->content.value)    {\n\t\t\tVAR_10 = VAR_20;\n\t\t}\n\t\telse    {\n\t\t\tVAR_10 = sc_pkcs15_verify_pin(VAR_0, VAR_22, VAR_22->content.value, VAR_22->content.len);\n\t\t\tif (!VAR_10)\n\t\t\t\tVAR_10 = sc_oberthur_read_file(VAR_0, VAR_1, VAR_2, VAR_3, 0);\n\t\t}\n\t}\n\n\tsc_file_free(VAR_7);\n\n\tif (VAR_10 < 0)   {\n\t\tfree(*VAR_2);\n\t\t*VAR_2 = NULL;\n\t\t*VAR_3 = 0;\n\t}\n\n\t*VAR_3 = VAR_9;\n\n\tLOG_FUNC_RETURN(VAR_5, VAR_10);\n}",
  "func_graph_path_before": "OpenSC/1db88374/pkcs15-oberthur.c/vul/before/0.json",
  "func": "static int\nsc_oberthur_read_file(struct sc_pkcs15_card *p15card, const char *in_path,\n\t\tunsigned char **out, size_t *out_len,\n\t\tint verify_pin)\n{\n\tstruct sc_context *ctx = p15card->card->ctx;\n\tstruct sc_card *card = p15card->card;\n\tstruct sc_file *file = NULL;\n\tstruct sc_path path;\n\tsize_t sz;\n\tint rv;\n\n\tLOG_FUNC_CALLED(ctx);\n\tif (!in_path || !out || !out_len)\n\t\tLOG_TEST_RET(ctx, SC_ERROR_INVALID_ARGUMENTS, \"Cannot read oberthur file\");\n\n\tsc_log(ctx, \"read file '%s'; verify_pin:%i\", in_path, verify_pin);\n\n\t*out = NULL;\n\t*out_len = 0;\n\n\tsc_format_path(in_path, &path);\n\trv = sc_select_file(card, &path, &file);\n\tif (rv != SC_SUCCESS) {\n\t\tsc_file_free(file);\n\t\tLOG_TEST_RET(ctx, rv, \"Cannot select oberthur file to read\");\n\t}\n\n\tif (file->ef_structure == SC_FILE_EF_TRANSPARENT)\n\t\tsz = file->size;\n\telse\n\t\tsz = (file->record_length + 2) * file->record_count;\n\n\t*out = calloc(sz, 1);\n\tif (*out == NULL) {\n\t\tsc_file_free(file);\n\t\tLOG_TEST_RET(ctx, SC_ERROR_OUT_OF_MEMORY, \"Cannot read oberthur file\");\n\t}\n\n\tif (file->ef_structure == SC_FILE_EF_TRANSPARENT)   {\n\t\trv = sc_read_binary(card, 0, *out, sz, 0);\n\t}\n\telse\t{\n\t\tsize_t rec;\n\t\tsize_t offs = 0;\n\t\tsize_t rec_len = file->record_length;\n\n\t\tfor (rec = 1; ; rec++)   {\n\t\t\tif (rec > file->record_count) {\n\t\t\t\trv = 0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\trv = sc_read_record(card, rec, *out + offs + 2, rec_len, SC_RECORD_BY_REC_NR);\n\t\t\tif (rv == SC_ERROR_RECORD_NOT_FOUND)   {\n\t\t\t\trv = 0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if (rv < 0)   {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\trec_len = rv;\n\n\t\t\t*(*out + offs) = 'R';\n\t\t\t*(*out + offs + 1) = rv;\n\n\t\t\toffs += rv + 2;\n\t\t}\n\n\t\tsz = offs;\n\t}\n\n\tsc_log(ctx, \"read oberthur file result %i\", rv);\n\tif (verify_pin && rv == SC_ERROR_SECURITY_STATUS_NOT_SATISFIED)   {\n\t\tstruct sc_pkcs15_object *objs[0x10], *pin_obj = NULL;\n\t\tconst struct sc_acl_entry *acl = sc_file_get_acl_entry(file, SC_AC_OP_READ);\n\t\tint ii, nobjs;\n\n\t\tif (acl == NULL) {\n\t\t\tsc_file_free(file);\n\t\t\tfree(*out);\n\t\t\t*out = NULL;\n\t\t\tLOG_FUNC_RETURN(ctx, SC_ERROR_INVALID_DATA);\n\t\t}\n\n\t\tnobjs = sc_pkcs15_get_objects(p15card, SC_PKCS15_TYPE_AUTH_PIN, objs, 0x10);\n\t\tif (nobjs < 1) {\n\t\t\tsc_file_free(file);\n\t\t\tfree(*out);\n\t\t\t*out = NULL;\n\t\t\tLOG_TEST_RET(ctx, SC_ERROR_DATA_OBJECT_NOT_FOUND,\n\t\t\t\t\"Cannot read oberthur file: get AUTH objects error\");\n\t\t}\n\n\t\tfor (ii = 0; ii < nobjs; ii++) {\n\t\t\tstruct sc_pkcs15_auth_info *auth_info = (struct sc_pkcs15_auth_info *) objs[ii]->data;\n\t\t\tsc_log(ctx, \"compare PIN/ACL refs:%i/%i, method:%i/%i\",\n\t\t\t\tauth_info->attrs.pin.reference, acl->key_ref, auth_info->auth_method, acl->method);\n\t\t\tif (auth_info->attrs.pin.reference == (int)acl->key_ref && auth_info->auth_method == (unsigned)acl->method)   {\n\t\t\t\tpin_obj = objs[ii];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (!pin_obj || !pin_obj->content.value)    {\n\t\t\trv = SC_ERROR_SECURITY_STATUS_NOT_SATISFIED;\n\t\t}\n\t\telse    {\n\t\t\trv = sc_pkcs15_verify_pin(p15card, pin_obj, pin_obj->content.value, pin_obj->content.len);\n\t\t\tif (!rv)\n\t\t\t\trv = sc_oberthur_read_file(p15card, in_path, out, out_len, 0);\n\t\t}\n\t}\n\n\tsc_file_free(file);\n\n\tif (rv < 0)   {\n\t\tfree(*out);\n\t\t*out = NULL;\n\t\t*out_len = 0;\n\t}\n\n\t*out_len = sz;\n\n\tLOG_FUNC_RETURN(ctx, rv);\n}",
  "abstract_func": "static int\nsc_oberthur_read_file(struct sc_pkcs15_card *VAR_0, const char *VAR_1,\n\t\tunsigned char **VAR_2, size_t *VAR_3,\n\t\tint VAR_4)\n{\n\tstruct sc_context *VAR_5 = VAR_0->card->ctx;\n\tstruct sc_card *VAR_6 = VAR_0->card;\n\tstruct sc_file *VAR_7 = NULL;\n\tstruct sc_path VAR_8;\n\tsize_t VAR_9;\n\tint VAR_10;\n\n\tLOG_FUNC_CALLED(VAR_5);\n\tif (!VAR_1 || !VAR_2 || !VAR_3)\n\t\tLOG_TEST_RET(VAR_5, VAR_11, \"Cannot read oberthur file\");\n\n\tsc_log(VAR_5, \"read file '%s'; verify_pin:%i\", VAR_1, VAR_4);\n\n\t*VAR_2 = NULL;\n\t*VAR_3 = 0;\n\n\tsc_format_path(VAR_1, &VAR_8);\n\tVAR_10 = sc_select_file(VAR_6, &VAR_8, &VAR_7);\n\tif (VAR_10 != VAR_12) {\n\t\tsc_file_free(VAR_7);\n\t\tLOG_TEST_RET(VAR_5, VAR_10, \"Cannot select oberthur file to read\");\n\t}\n\n\tif (VAR_7->ef_structure == VAR_13)\n\t\tVAR_9 = VAR_7->size;\n\telse\n\t\tVAR_9 = (VAR_7->record_length + 2) * VAR_7->record_count;\n\n\t*VAR_2 = calloc(VAR_9, 1);\n\tif (*VAR_2 == NULL) {\n\t\tsc_file_free(VAR_7);\n\t\tLOG_TEST_RET(VAR_5, VAR_14, \"Cannot read oberthur file\");\n\t}\n\n\tif (VAR_7->ef_structure == VAR_13)   {\n\t\tVAR_10 = sc_read_binary(VAR_6, 0, *VAR_2, VAR_9, 0);\n\t}\n\telse\t{\n\t\tsize_t VAR_15;\n\t\tsize_t VAR_16 = 0;\n\t\tsize_t VAR_17 = VAR_7->record_length;\n\n\t\tfor (VAR_15 = 1; ; VAR_15++)   {\n\t\t\tif (VAR_15 > VAR_7->record_count) {\n\t\t\t\tVAR_10 = 0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tVAR_10 = sc_read_record(VAR_6, VAR_15, *VAR_2 + VAR_16 + 2, VAR_17, VAR_18);\n\t\t\tif (VAR_10 == VAR_19)   {\n\t\t\t\tVAR_10 = 0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if (VAR_10 < 0)   {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tVAR_17 = VAR_10;\n\n\t\t\t*(*VAR_2 + VAR_16) = 'R';\n\t\t\t*(*VAR_2 + VAR_16 + 1) = VAR_10;\n\n\t\t\tVAR_16 += VAR_10 + 2;\n\t\t}\n\n\t\tVAR_9 = VAR_16;\n\t}\n\n\tsc_log(VAR_5, \"read oberthur file result %i\", VAR_10);\n\tif (VAR_4 && VAR_10 == VAR_20)   {\n\t\tstruct sc_pkcs15_object *VAR_21[0x10], *VAR_22 = NULL;\n\t\tconst struct sc_acl_entry *VAR_23 = sc_file_get_acl_entry(VAR_7, VAR_24);\n\t\tint VAR_25, VAR_26;\n\n\t\tif (VAR_23 == NULL) {\n\t\t\tsc_file_free(VAR_7);\n\t\t\tfree(*VAR_2);\n\t\t\t*VAR_2 = NULL;\n\t\t\tLOG_FUNC_RETURN(VAR_5, VAR_27);\n\t\t}\n\n\t\tVAR_26 = sc_pkcs15_get_objects(VAR_0, VAR_28, VAR_21, 0x10);\n\t\tif (VAR_26 < 1) {\n\t\t\tsc_file_free(VAR_7);\n\t\t\tfree(*VAR_2);\n\t\t\t*VAR_2 = NULL;\n\t\t\tLOG_TEST_RET(VAR_5, VAR_29,\n\t\t\t\t\"Cannot read oberthur file: get AUTH objects error\");\n\t\t}\n\n\t\tfor (VAR_25 = 0; VAR_25 < VAR_26; VAR_25++) {\n\t\t\tstruct sc_pkcs15_auth_info *VAR_30 = (struct sc_pkcs15_auth_info *) VAR_21[VAR_25]->data;\n\t\t\tsc_log(VAR_5, \"compare PIN/ACL refs:%i/%i, method:%i/%i\",\n\t\t\t\tVAR_30->attrs.pin.reference, VAR_23->key_ref, VAR_30->auth_method, VAR_23->method);\n\t\t\tif (VAR_30->attrs.pin.reference == (int)VAR_23->key_ref && VAR_30->auth_method == (unsigned)VAR_23->method)   {\n\t\t\t\tVAR_22 = VAR_21[VAR_25];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (!VAR_22 || !VAR_22->content.value)    {\n\t\t\tVAR_10 = VAR_20;\n\t\t}\n\t\telse    {\n\t\t\tVAR_10 = sc_pkcs15_verify_pin(VAR_0, VAR_22, VAR_22->content.value, VAR_22->content.len);\n\t\t\tif (!VAR_10)\n\t\t\t\tVAR_10 = sc_oberthur_read_file(VAR_0, VAR_1, VAR_2, VAR_3, 0);\n\t\t}\n\t}\n\n\tsc_file_free(VAR_7);\n\n\tif (VAR_10 < 0)   {\n\t\tfree(*VAR_2);\n\t\t*VAR_2 = NULL;\n\t\t*VAR_3 = 0;\n\t}\n\n\t*VAR_3 = VAR_9;\n\n\tLOG_FUNC_RETURN(VAR_5, VAR_10);\n}",
  "func_graph_path": "OpenSC/1db88374/pkcs15-oberthur.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -74,7 +74,7 @@\n \tif (verify_pin && rv == SC_ERROR_SECURITY_STATUS_NOT_SATISFIED)   {\n \t\tstruct sc_pkcs15_object *objs[0x10], *pin_obj = NULL;\n \t\tconst struct sc_acl_entry *acl = sc_file_get_acl_entry(file, SC_AC_OP_READ);\n-\t\tint ii;\n+\t\tint ii, nobjs;\n \n \t\tif (acl == NULL) {\n \t\t\tsc_file_free(file);\n@@ -83,18 +83,19 @@\n \t\t\tLOG_FUNC_RETURN(ctx, SC_ERROR_INVALID_DATA);\n \t\t}\n \n-\t\trv = sc_pkcs15_get_objects(p15card, SC_PKCS15_TYPE_AUTH_PIN, objs, 0x10);\n-\t\tif (rv != SC_SUCCESS) {\n+\t\tnobjs = sc_pkcs15_get_objects(p15card, SC_PKCS15_TYPE_AUTH_PIN, objs, 0x10);\n+\t\tif (nobjs < 1) {\n \t\t\tsc_file_free(file);\n \t\t\tfree(*out);\n \t\t\t*out = NULL;\n-\t\t\tLOG_TEST_RET(ctx, rv, \"Cannot read oberthur file: get AUTH objects error\");\n+\t\t\tLOG_TEST_RET(ctx, SC_ERROR_DATA_OBJECT_NOT_FOUND,\n+\t\t\t\t\"Cannot read oberthur file: get AUTH objects error\");\n \t\t}\n \n-\t\tfor (ii=0; ii<rv; ii++)   {\n+\t\tfor (ii = 0; ii < nobjs; ii++) {\n \t\t\tstruct sc_pkcs15_auth_info *auth_info = (struct sc_pkcs15_auth_info *) objs[ii]->data;\n \t\t\tsc_log(ctx, \"compare PIN/ACL refs:%i/%i, method:%i/%i\",\n-\t\t\t\t\tauth_info->attrs.pin.reference, acl->key_ref, auth_info->auth_method, acl->method);\n+\t\t\t\tauth_info->attrs.pin.reference, acl->key_ref, auth_info->auth_method, acl->method);\n \t\t\tif (auth_info->attrs.pin.reference == (int)acl->key_ref && auth_info->auth_method == (unsigned)acl->method)   {\n \t\t\t\tpin_obj = objs[ii];\n \t\t\t\tbreak;",
  "diff_line_info": {
    "deleted_lines": [
      "\t\tint ii;",
      "\t\trv = sc_pkcs15_get_objects(p15card, SC_PKCS15_TYPE_AUTH_PIN, objs, 0x10);",
      "\t\tif (rv != SC_SUCCESS) {",
      "\t\t\tLOG_TEST_RET(ctx, rv, \"Cannot read oberthur file: get AUTH objects error\");",
      "\t\tfor (ii=0; ii<rv; ii++)   {",
      "\t\t\t\t\tauth_info->attrs.pin.reference, acl->key_ref, auth_info->auth_method, acl->method);"
    ],
    "added_lines": [
      "\t\tint ii, nobjs;",
      "\t\tnobjs = sc_pkcs15_get_objects(p15card, SC_PKCS15_TYPE_AUTH_PIN, objs, 0x10);",
      "\t\tif (nobjs < 1) {",
      "\t\t\tLOG_TEST_RET(ctx, SC_ERROR_DATA_OBJECT_NOT_FOUND,",
      "\t\t\t\t\"Cannot read oberthur file: get AUTH objects error\");",
      "\t\tfor (ii = 0; ii < nobjs; ii++) {",
      "\t\t\t\tauth_info->attrs.pin.reference, acl->key_ref, auth_info->auth_method, acl->method);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/OpenSC/OpenSC/pull/2203",
  "description": {
    "pr_info": {
      "title": "Another batch of fixes for fuzzing issues as reported by oss-fuzz",
      "number": 2203
    },
    "comment": [
      "##### Checklist\r\n<!-- Remove items that do not apply. For completed items, change [ ] to [x]. -->\r\n- [ ] PKCS#11 module is tested\r\n- [ ] Windows minidriver is tested\r\n- [ ] macOS tokend is tested\r\n"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.9"
}