{
  "cve_id": "CVE-2020-26945",
  "cwe_ids": [
    "CWE-502"
  ],
  "cvss_vector": "AV:N/AC:H/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "mybatis/mybatis-3",
  "commit_msg": "Output warning when deserializing object stream with no JEP-290 filter defined",
  "commit_hash": "9caf480e05c389548c9889362c2cb080d728b5d8",
  "git_url": "https://github.com/mybatis/mybatis-3/commit/9caf480e05c389548c9889362c2cb080d728b5d8",
  "file_path": "src/main/java/org/apache/ibatis/executor/loader/AbstractSerialStateHolder.java",
  "func_name": "readResolve",
  "func_before": "@SuppressWarnings(\"unchecked\")\n  protected final Object readResolve() throws ObjectStreamException {\n    /* Second run */\n    if (this.userBean != null && this.userBeanBytes.length == 0) {\n      return this.userBean;\n    }\n\n    /* First run */\n    try (ObjectInputStream in = new LookAheadObjectInputStream(new ByteArrayInputStream(this.userBeanBytes))) {\n      this.userBean = in.readObject();\n      this.unloadedProperties = (Map<String, ResultLoaderMap.LoadPair>) in.readObject();\n      this.objectFactory = (ObjectFactory) in.readObject();\n      this.constructorArgTypes = (Class<?>[]) in.readObject();\n      this.constructorArgs = (Object[]) in.readObject();\n    } catch (final IOException ex) {\n      throw (ObjectStreamException) new StreamCorruptedException().initCause(ex);\n    } catch (final ClassNotFoundException ex) {\n      throw (ObjectStreamException) new InvalidClassException(ex.getLocalizedMessage()).initCause(ex);\n    }\n\n    final Map<String, ResultLoaderMap.LoadPair> arrayProps = new HashMap<>(this.unloadedProperties);\n    final List<Class<?>> arrayTypes = Arrays.asList(this.constructorArgTypes);\n    final List<Object> arrayValues = Arrays.asList(this.constructorArgs);\n\n    return this.createDeserializationProxy(userBean, arrayProps, objectFactory, arrayTypes, arrayValues);\n  }",
  "abstract_func_before": "@SuppressWarnings(\"unchecked\")\n  protected final Object readResolve() throws ObjectStreamException {\n    /* COMMENT_0 */\n    if (this.userBean != null && this.userBeanBytes.length == 0) {\n      return this.userBean;\n    }\n\n    /* COMMENT_1 */\n    try (ObjectInputStream VAR_0 = new LookAheadObjectInputStream(new ByteArrayInputStream(this.userBeanBytes))) {\n      this.userBean = VAR_0.readObject();\n      this.unloadedProperties = (Map<String, ResultLoaderMap.LoadPair>) VAR_0.readObject();\n      this.objectFactory = (ObjectFactory) VAR_0.readObject();\n      this.constructorArgTypes = (Class<?>[]) VAR_0.readObject();\n      this.constructorArgs = (Object[]) VAR_0.readObject();\n    } catch (final IOException VAR_1) {\n      throw (ObjectStreamException) new StreamCorruptedException().initCause(VAR_1);\n    } catch (final ClassNotFoundException VAR_1) {\n      throw (ObjectStreamException) new InvalidClassException(VAR_1.getLocalizedMessage()).initCause(VAR_1);\n    }\n\n    final Map<String, ResultLoaderMap.LoadPair> VAR_2 = new HashMap<>(this.unloadedProperties);\n    final List<Class<?>> VAR_3 = VAR_4.asList(this.constructorArgTypes);\n    final List<Object> VAR_5 = VAR_4.asList(this.constructorArgs);\n\n    return this.createDeserializationProxy(VAR_6, VAR_2, VAR_7, VAR_3, VAR_5);\n  }",
  "func_graph_path_before": "mybatis/mybatis-3/9caf480e05c389548c9889362c2cb080d728b5d8/AbstractSerialStateHolder.java/vul/before/0.json",
  "func": "@SuppressWarnings(\"unchecked\")\n  protected final Object readResolve() throws ObjectStreamException {\n    /* Second run */\n    if (this.userBean != null && this.userBeanBytes.length == 0) {\n      return this.userBean;\n    }\n\n    SerialFilterChecker.check();\n\n    /* First run */\n    try (ObjectInputStream in = new ObjectInputStream(new ByteArrayInputStream(this.userBeanBytes))) {\n      this.userBean = in.readObject();\n      this.unloadedProperties = (Map<String, ResultLoaderMap.LoadPair>) in.readObject();\n      this.objectFactory = (ObjectFactory) in.readObject();\n      this.constructorArgTypes = (Class<?>[]) in.readObject();\n      this.constructorArgs = (Object[]) in.readObject();\n    } catch (final IOException ex) {\n      throw (ObjectStreamException) new StreamCorruptedException().initCause(ex);\n    } catch (final ClassNotFoundException ex) {\n      throw (ObjectStreamException) new InvalidClassException(ex.getLocalizedMessage()).initCause(ex);\n    }\n\n    final Map<String, ResultLoaderMap.LoadPair> arrayProps = new HashMap<>(this.unloadedProperties);\n    final List<Class<?>> arrayTypes = Arrays.asList(this.constructorArgTypes);\n    final List<Object> arrayValues = Arrays.asList(this.constructorArgs);\n\n    return this.createDeserializationProxy(userBean, arrayProps, objectFactory, arrayTypes, arrayValues);\n  }",
  "abstract_func": "@SuppressWarnings(\"unchecked\")\n  protected final Object readResolve() throws ObjectStreamException {\n    /* COMMENT_0 */\n    if (this.userBean != null && this.userBeanBytes.length == 0) {\n      return this.userBean;\n    }\n\n    VAR_0.check();\n\n    /* COMMENT_1 */\n    try (ObjectInputStream VAR_1 = new ObjectInputStream(new ByteArrayInputStream(this.userBeanBytes))) {\n      this.userBean = VAR_1.readObject();\n      this.unloadedProperties = (Map<String, ResultLoaderMap.LoadPair>) VAR_1.readObject();\n      this.objectFactory = (ObjectFactory) VAR_1.readObject();\n      this.constructorArgTypes = (Class<?>[]) VAR_1.readObject();\n      this.constructorArgs = (Object[]) VAR_1.readObject();\n    } catch (final IOException VAR_2) {\n      throw (ObjectStreamException) new StreamCorruptedException().initCause(VAR_2);\n    } catch (final ClassNotFoundException VAR_2) {\n      throw (ObjectStreamException) new InvalidClassException(VAR_2.getLocalizedMessage()).initCause(VAR_2);\n    }\n\n    final Map<String, ResultLoaderMap.LoadPair> VAR_3 = new HashMap<>(this.unloadedProperties);\n    final List<Class<?>> VAR_4 = VAR_5.asList(this.constructorArgTypes);\n    final List<Object> VAR_6 = VAR_5.asList(this.constructorArgs);\n\n    return this.createDeserializationProxy(VAR_7, VAR_3, VAR_8, VAR_4, VAR_6);\n  }",
  "func_graph_path": "mybatis/mybatis-3/9caf480e05c389548c9889362c2cb080d728b5d8/AbstractSerialStateHolder.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -5,8 +5,10 @@\n       return this.userBean;\n     }\n \n+    SerialFilterChecker.check();\n+\n     /* First run */\n-    try (ObjectInputStream in = new LookAheadObjectInputStream(new ByteArrayInputStream(this.userBeanBytes))) {\n+    try (ObjectInputStream in = new ObjectInputStream(new ByteArrayInputStream(this.userBeanBytes))) {\n       this.userBean = in.readObject();\n       this.unloadedProperties = (Map<String, ResultLoaderMap.LoadPair>) in.readObject();\n       this.objectFactory = (ObjectFactory) in.readObject();",
  "diff_line_info": {
    "deleted_lines": [
      "    try (ObjectInputStream in = new LookAheadObjectInputStream(new ByteArrayInputStream(this.userBeanBytes))) {"
    ],
    "added_lines": [
      "    SerialFilterChecker.check();",
      "",
      "    try (ObjectInputStream in = new ObjectInputStream(new ByteArrayInputStream(this.userBeanBytes))) {"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/mybatis/mybatis-3/pull/2079",
  "description": {
    "pr_info": {
      "title": "Output warning when deserializing object stream",
      "number": 2079
    },
    "comment": [
      "We have received another security vulnerability report caused by object stream deserialization.\r\n\r\nWhen all of the following conditions are met, the attacker can trigger RCE (remote code execution).\r\n\r\n1) the user enabled the built-in 2nd level cache [1]\r\n2) the user did not setup JEP-290 filter\r\n3) the attacker found a way to modify entries of the private `Map` field i.e. `org.apache.ibatis.cache.impl.PerpetualCache.cache` and a valid cache key\r\n\r\nWe thank clanceyzzz of JD Sprite Team for reporting the issue!\r\n\r\nOnce this PR gets merged, MyBatis outputs WARN level log message when deserializing object.\r\n\r\n> As you are using functionality that deserializes object streams, it is recommended to define the JEP-290 serial filter. Please refer to https://docs.oracle.com/pls/topic/lookup?ctx=javase15&id=GUID-8296D8E8-2B93-4B9A-856E-0A65AF9B8C66\r\n\r\nNote that:\r\n\r\n- the message is not logged when the JEP-290 filter is already defined\r\n- the message is logged just once right before the first deserialization\r\n\r\nIf WARN message is not enough, we can throw an exception instead, but that may surprise users a little bit.\r\n\r\n[1] Some of the custom cache implementations also perform deserialization (e.g. [mybatis-redis-cache](https://github.com/mybatis/redis-cache)). I plan to look into it later, but the recommended solution is the same i.e. the JEP-290 filter.",
      " if the `LookAheadObjectInputStream` has been removed , will it affect the functionality of earlier versionï¼Ÿlike the `blacklist`.",
      "Thank you for the feedback, @nothingzhl !\r\n\r\nThis change won't break anything if that is what you mean.\r\nYou just need to setup the JEP-290 filter by yourself (using whitelist approach, preferably) to protect your application instead of relying on the built-in blacklist filter.\r\n"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 1.0"
}