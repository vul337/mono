{
  "cve_id": "CVE-2018-5702",
  "cwe_ids": [
    "CWE-Other"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "transmission",
  "commit_msg": "mitigate dns rebinding attacks against daemon",
  "commit_hash": "cf7173df930cfa7ac1b1b0e9027c1deffd0b3c84",
  "git_url": "https://github.com/transmission/transmission/commit/cf7173df930cfa7ac1b1b0e9027c1deffd0b3c84",
  "file_path": "libtransmission/rpc-server.c",
  "func_name": "tr_rpcInit",
  "func_before": "tr_rpc_server* tr_rpcInit(tr_session* session, tr_variant* settings)\n{\n    tr_rpc_server* s;\n    bool boolVal;\n    int64_t i;\n    char const* str;\n    tr_quark key;\n    tr_address address;\n\n    s = tr_new0(tr_rpc_server, 1);\n    s->session = session;\n\n    key = TR_KEY_rpc_enabled;\n\n    if (!tr_variantDictFindBool(settings, key, &boolVal))\n    {\n        missing_settings_key(key);\n    }\n    else\n    {\n        s->isEnabled = boolVal;\n    }\n\n    key = TR_KEY_rpc_port;\n\n    if (!tr_variantDictFindInt(settings, key, &i))\n    {\n        missing_settings_key(key);\n    }\n    else\n    {\n        s->port = i;\n    }\n\n    key = TR_KEY_rpc_url;\n\n    if (!tr_variantDictFindStr(settings, key, &str, NULL))\n    {\n        missing_settings_key(key);\n    }\n    else\n    {\n        s->url = tr_strdup(str);\n    }\n\n    key = TR_KEY_rpc_whitelist_enabled;\n\n    if (!tr_variantDictFindBool(settings, key, &boolVal))\n    {\n        missing_settings_key(key);\n    }\n    else\n    {\n        tr_rpcSetWhitelistEnabled(s, boolVal);\n    }\n\n    key = TR_KEY_rpc_authentication_required;\n\n    if (!tr_variantDictFindBool(settings, key, &boolVal))\n    {\n        missing_settings_key(key);\n    }\n    else\n    {\n        tr_rpcSetPasswordEnabled(s, boolVal);\n    }\n\n    key = TR_KEY_rpc_whitelist;\n\n    if (!tr_variantDictFindStr(settings, key, &str, NULL) && str != NULL)\n    {\n        missing_settings_key(key);\n    }\n    else\n    {\n        tr_rpcSetWhitelist(s, str);\n    }\n\n    key = TR_KEY_rpc_username;\n\n    if (!tr_variantDictFindStr(settings, key, &str, NULL))\n    {\n        missing_settings_key(key);\n    }\n    else\n    {\n        tr_rpcSetUsername(s, str);\n    }\n\n    key = TR_KEY_rpc_password;\n\n    if (!tr_variantDictFindStr(settings, key, &str, NULL))\n    {\n        missing_settings_key(key);\n    }\n    else\n    {\n        tr_rpcSetPassword(s, str);\n    }\n\n    key = TR_KEY_rpc_bind_address;\n\n    if (!tr_variantDictFindStr(settings, key, &str, NULL))\n    {\n        missing_settings_key(key);\n        address = tr_inaddr_any;\n    }\n    else if (!tr_address_from_string(&address, str))\n    {\n        tr_logAddNamedError(MY_NAME, _(\"%s is not a valid address\"), str);\n        address = tr_inaddr_any;\n    }\n    else if (address.type != TR_AF_INET && address.type != TR_AF_INET6)\n    {\n        tr_logAddNamedError(MY_NAME, _(\"%s is not an IPv4 or IPv6 address. RPC listeners must be IPv4 or IPv6\"), str);\n        address = tr_inaddr_any;\n    }\n\n    s->bindAddress = address;\n\n    if (s->isEnabled)\n    {\n        tr_logAddNamedInfo(MY_NAME, _(\"Serving RPC and Web requests on %s:%d%s\"), tr_rpcGetBindAddress(s), (int)s->port, s->url);\n        tr_runInEventThread(session, startServer, s);\n\n        if (s->isWhitelistEnabled)\n        {\n            tr_logAddNamedInfo(MY_NAME, \"%s\", _(\"Whitelist enabled\"));\n        }\n\n        if (s->isPasswordEnabled)\n        {\n            tr_logAddNamedInfo(MY_NAME, \"%s\", _(\"Password required\"));\n        }\n    }\n\n    return s;\n}",
  "abstract_func_before": "tr_rpc_server* tr_rpcInit(tr_session* VAR_0, tr_variant* VAR_1)\n{\n    tr_rpc_server* VAR_2;\n    bool VAR_3;\n    int64_t VAR_4;\n    char const* VAR_5;\n    tr_quark VAR_6;\n    tr_address VAR_7;\n\n    VAR_2 = tr_new0(tr_rpc_server, 1);\n    VAR_2->session = VAR_0;\n\n    VAR_6 = VAR_8;\n\n    if (!tr_variantDictFindBool(VAR_1, VAR_6, &VAR_3))\n    {\n        missing_settings_key(VAR_6);\n    }\n    else\n    {\n        VAR_2->isEnabled = VAR_3;\n    }\n\n    VAR_6 = VAR_9;\n\n    if (!tr_variantDictFindInt(VAR_1, VAR_6, &VAR_4))\n    {\n        missing_settings_key(VAR_6);\n    }\n    else\n    {\n        VAR_2->port = VAR_4;\n    }\n\n    VAR_6 = VAR_10;\n\n    if (!tr_variantDictFindStr(VAR_1, VAR_6, &VAR_5, NULL))\n    {\n        missing_settings_key(VAR_6);\n    }\n    else\n    {\n        VAR_2->url = tr_strdup(VAR_5);\n    }\n\n    VAR_6 = VAR_11;\n\n    if (!tr_variantDictFindBool(VAR_1, VAR_6, &VAR_3))\n    {\n        missing_settings_key(VAR_6);\n    }\n    else\n    {\n        tr_rpcSetWhitelistEnabled(VAR_2, VAR_3);\n    }\n\n    VAR_6 = VAR_12;\n\n    if (!tr_variantDictFindBool(VAR_1, VAR_6, &VAR_3))\n    {\n        missing_settings_key(VAR_6);\n    }\n    else\n    {\n        tr_rpcSetPasswordEnabled(VAR_2, VAR_3);\n    }\n\n    VAR_6 = VAR_13;\n\n    if (!tr_variantDictFindStr(VAR_1, VAR_6, &VAR_5, NULL) && VAR_5 != NULL)\n    {\n        missing_settings_key(VAR_6);\n    }\n    else\n    {\n        tr_rpcSetWhitelist(VAR_2, VAR_5);\n    }\n\n    VAR_6 = VAR_14;\n\n    if (!tr_variantDictFindStr(VAR_1, VAR_6, &VAR_5, NULL))\n    {\n        missing_settings_key(VAR_6);\n    }\n    else\n    {\n        tr_rpcSetUsername(VAR_2, VAR_5);\n    }\n\n    VAR_6 = VAR_15;\n\n    if (!tr_variantDictFindStr(VAR_1, VAR_6, &VAR_5, NULL))\n    {\n        missing_settings_key(VAR_6);\n    }\n    else\n    {\n        tr_rpcSetPassword(VAR_2, VAR_5);\n    }\n\n    VAR_6 = VAR_16;\n\n    if (!tr_variantDictFindStr(VAR_1, VAR_6, &VAR_5, NULL))\n    {\n        missing_settings_key(VAR_6);\n        VAR_7 = VAR_17;\n    }\n    else if (!tr_address_from_string(&VAR_7, VAR_5))\n    {\n        tr_logAddNamedError(VAR_18, _(\"%s is not a valid address\"), VAR_5);\n        VAR_7 = VAR_17;\n    }\n    else if (VAR_7.type != VAR_19 && VAR_7.type != VAR_20)\n    {\n        tr_logAddNamedError(VAR_18, _(\"%s is not an IPv4 or IPv6 address. RPC listeners must be IPv4 or IPv6\"), VAR_5);\n        VAR_7 = VAR_17;\n    }\n\n    VAR_2->bindAddress = VAR_7;\n\n    if (VAR_2->isEnabled)\n    {\n        tr_logAddNamedInfo(VAR_18, _(\"Serving RPC and Web requests on %s:%d%s\"), tr_rpcGetBindAddress(VAR_2), (int)VAR_2->port, VAR_2->url);\n        tr_runInEventThread(VAR_0, VAR_21, VAR_2);\n\n        if (VAR_2->isWhitelistEnabled)\n        {\n            tr_logAddNamedInfo(VAR_18, \"%s\", _(\"Whitelist enabled\"));\n        }\n\n        if (VAR_2->isPasswordEnabled)\n        {\n            tr_logAddNamedInfo(VAR_18, \"%s\", _(\"Password required\"));\n        }\n    }\n\n    return VAR_2;\n}",
  "func_graph_path_before": "transmission/cf7173df930cfa7ac1b1b0e9027c1deffd0b3c84/rpc-server.c/vul/before/2.json",
  "func": "tr_rpc_server* tr_rpcInit(tr_session* session, tr_variant* settings)\n{\n    tr_rpc_server* s;\n    bool boolVal;\n    int64_t i;\n    char const* str;\n    tr_quark key;\n    tr_address address;\n\n    s = tr_new0(tr_rpc_server, 1);\n    s->session = session;\n\n    key = TR_KEY_rpc_enabled;\n\n    if (!tr_variantDictFindBool(settings, key, &boolVal))\n    {\n        missing_settings_key(key);\n    }\n    else\n    {\n        s->isEnabled = boolVal;\n    }\n\n    key = TR_KEY_rpc_port;\n\n    if (!tr_variantDictFindInt(settings, key, &i))\n    {\n        missing_settings_key(key);\n    }\n    else\n    {\n        s->port = i;\n    }\n\n    key = TR_KEY_rpc_url;\n\n    if (!tr_variantDictFindStr(settings, key, &str, NULL))\n    {\n        missing_settings_key(key);\n    }\n    else\n    {\n        s->url = tr_strdup(str);\n    }\n\n    key = TR_KEY_rpc_whitelist_enabled;\n\n    if (!tr_variantDictFindBool(settings, key, &boolVal))\n    {\n        missing_settings_key(key);\n    }\n    else\n    {\n        tr_rpcSetWhitelistEnabled(s, boolVal);\n    }\n\n    key = TR_KEY_rpc_host_whitelist_enabled;\n\n    if (!tr_variantDictFindBool(settings, key, &boolVal))\n    {\n        missing_settings_key(key);\n    }\n    else\n    {\n        tr_rpcSetHostWhitelistEnabled(s, boolVal);\n    }\n\n    key = TR_KEY_rpc_host_whitelist;\n\n    if (!tr_variantDictFindStr(settings, key, &str, NULL) && str != NULL)\n    {\n        missing_settings_key(key);\n    }\n    else\n    {\n        tr_rpcSetHostWhitelist(s, str);\n    }\n\n    key = TR_KEY_rpc_authentication_required;\n\n    if (!tr_variantDictFindBool(settings, key, &boolVal))\n    {\n        missing_settings_key(key);\n    }\n    else\n    {\n        tr_rpcSetPasswordEnabled(s, boolVal);\n    }\n\n    key = TR_KEY_rpc_whitelist;\n\n    if (!tr_variantDictFindStr(settings, key, &str, NULL) && str != NULL)\n    {\n        missing_settings_key(key);\n    }\n    else\n    {\n        tr_rpcSetWhitelist(s, str);\n    }\n\n    key = TR_KEY_rpc_username;\n\n    if (!tr_variantDictFindStr(settings, key, &str, NULL))\n    {\n        missing_settings_key(key);\n    }\n    else\n    {\n        tr_rpcSetUsername(s, str);\n    }\n\n    key = TR_KEY_rpc_password;\n\n    if (!tr_variantDictFindStr(settings, key, &str, NULL))\n    {\n        missing_settings_key(key);\n    }\n    else\n    {\n        tr_rpcSetPassword(s, str);\n    }\n\n    key = TR_KEY_rpc_bind_address;\n\n    if (!tr_variantDictFindStr(settings, key, &str, NULL))\n    {\n        missing_settings_key(key);\n        address = tr_inaddr_any;\n    }\n    else if (!tr_address_from_string(&address, str))\n    {\n        tr_logAddNamedError(MY_NAME, _(\"%s is not a valid address\"), str);\n        address = tr_inaddr_any;\n    }\n    else if (address.type != TR_AF_INET && address.type != TR_AF_INET6)\n    {\n        tr_logAddNamedError(MY_NAME, _(\"%s is not an IPv4 or IPv6 address. RPC listeners must be IPv4 or IPv6\"), str);\n        address = tr_inaddr_any;\n    }\n\n    s->bindAddress = address;\n\n    if (s->isEnabled)\n    {\n        tr_logAddNamedInfo(MY_NAME, _(\"Serving RPC and Web requests on %s:%d%s\"), tr_rpcGetBindAddress(s), (int)s->port, s->url);\n        tr_runInEventThread(session, startServer, s);\n\n        if (s->isWhitelistEnabled)\n        {\n            tr_logAddNamedInfo(MY_NAME, \"%s\", _(\"Whitelist enabled\"));\n        }\n\n        if (s->isPasswordEnabled)\n        {\n            tr_logAddNamedInfo(MY_NAME, \"%s\", _(\"Password required\"));\n        }\n    }\n\n    return s;\n}",
  "abstract_func": "tr_rpc_server* tr_rpcInit(tr_session* VAR_0, tr_variant* VAR_1)\n{\n    tr_rpc_server* VAR_2;\n    bool VAR_3;\n    int64_t VAR_4;\n    char const* VAR_5;\n    tr_quark VAR_6;\n    tr_address VAR_7;\n\n    VAR_2 = tr_new0(tr_rpc_server, 1);\n    VAR_2->session = VAR_0;\n\n    VAR_6 = VAR_8;\n\n    if (!tr_variantDictFindBool(VAR_1, VAR_6, &VAR_3))\n    {\n        missing_settings_key(VAR_6);\n    }\n    else\n    {\n        VAR_2->isEnabled = VAR_3;\n    }\n\n    VAR_6 = VAR_9;\n\n    if (!tr_variantDictFindInt(VAR_1, VAR_6, &VAR_4))\n    {\n        missing_settings_key(VAR_6);\n    }\n    else\n    {\n        VAR_2->port = VAR_4;\n    }\n\n    VAR_6 = VAR_10;\n\n    if (!tr_variantDictFindStr(VAR_1, VAR_6, &VAR_5, NULL))\n    {\n        missing_settings_key(VAR_6);\n    }\n    else\n    {\n        VAR_2->url = tr_strdup(VAR_5);\n    }\n\n    VAR_6 = VAR_11;\n\n    if (!tr_variantDictFindBool(VAR_1, VAR_6, &VAR_3))\n    {\n        missing_settings_key(VAR_6);\n    }\n    else\n    {\n        tr_rpcSetWhitelistEnabled(VAR_2, VAR_3);\n    }\n\n    VAR_6 = VAR_12;\n\n    if (!tr_variantDictFindBool(VAR_1, VAR_6, &VAR_3))\n    {\n        missing_settings_key(VAR_6);\n    }\n    else\n    {\n        tr_rpcSetHostWhitelistEnabled(VAR_2, VAR_3);\n    }\n\n    VAR_6 = VAR_13;\n\n    if (!tr_variantDictFindStr(VAR_1, VAR_6, &VAR_5, NULL) && VAR_5 != NULL)\n    {\n        missing_settings_key(VAR_6);\n    }\n    else\n    {\n        tr_rpcSetHostWhitelist(VAR_2, VAR_5);\n    }\n\n    VAR_6 = VAR_14;\n\n    if (!tr_variantDictFindBool(VAR_1, VAR_6, &VAR_3))\n    {\n        missing_settings_key(VAR_6);\n    }\n    else\n    {\n        tr_rpcSetPasswordEnabled(VAR_2, VAR_3);\n    }\n\n    VAR_6 = VAR_15;\n\n    if (!tr_variantDictFindStr(VAR_1, VAR_6, &VAR_5, NULL) && VAR_5 != NULL)\n    {\n        missing_settings_key(VAR_6);\n    }\n    else\n    {\n        tr_rpcSetWhitelist(VAR_2, VAR_5);\n    }\n\n    VAR_6 = VAR_16;\n\n    if (!tr_variantDictFindStr(VAR_1, VAR_6, &VAR_5, NULL))\n    {\n        missing_settings_key(VAR_6);\n    }\n    else\n    {\n        tr_rpcSetUsername(VAR_2, VAR_5);\n    }\n\n    VAR_6 = VAR_17;\n\n    if (!tr_variantDictFindStr(VAR_1, VAR_6, &VAR_5, NULL))\n    {\n        missing_settings_key(VAR_6);\n    }\n    else\n    {\n        tr_rpcSetPassword(VAR_2, VAR_5);\n    }\n\n    VAR_6 = VAR_18;\n\n    if (!tr_variantDictFindStr(VAR_1, VAR_6, &VAR_5, NULL))\n    {\n        missing_settings_key(VAR_6);\n        VAR_7 = VAR_19;\n    }\n    else if (!tr_address_from_string(&VAR_7, VAR_5))\n    {\n        tr_logAddNamedError(VAR_20, _(\"%s is not a valid address\"), VAR_5);\n        VAR_7 = VAR_19;\n    }\n    else if (VAR_7.type != VAR_21 && VAR_7.type != VAR_22)\n    {\n        tr_logAddNamedError(VAR_20, _(\"%s is not an IPv4 or IPv6 address. RPC listeners must be IPv4 or IPv6\"), VAR_5);\n        VAR_7 = VAR_19;\n    }\n\n    VAR_2->bindAddress = VAR_7;\n\n    if (VAR_2->isEnabled)\n    {\n        tr_logAddNamedInfo(VAR_20, _(\"Serving RPC and Web requests on %s:%d%s\"), tr_rpcGetBindAddress(VAR_2), (int)VAR_2->port, VAR_2->url);\n        tr_runInEventThread(VAR_0, VAR_23, VAR_2);\n\n        if (VAR_2->isWhitelistEnabled)\n        {\n            tr_logAddNamedInfo(VAR_20, \"%s\", _(\"Whitelist enabled\"));\n        }\n\n        if (VAR_2->isPasswordEnabled)\n        {\n            tr_logAddNamedInfo(VAR_20, \"%s\", _(\"Password required\"));\n        }\n    }\n\n    return VAR_2;\n}",
  "func_graph_path": "transmission/cf7173df930cfa7ac1b1b0e9027c1deffd0b3c84/rpc-server.c/vul/after/2.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -52,6 +52,28 @@\n     else\n     {\n         tr_rpcSetWhitelistEnabled(s, boolVal);\n+    }\n+\n+    key = TR_KEY_rpc_host_whitelist_enabled;\n+\n+    if (!tr_variantDictFindBool(settings, key, &boolVal))\n+    {\n+        missing_settings_key(key);\n+    }\n+    else\n+    {\n+        tr_rpcSetHostWhitelistEnabled(s, boolVal);\n+    }\n+\n+    key = TR_KEY_rpc_host_whitelist;\n+\n+    if (!tr_variantDictFindStr(settings, key, &str, NULL) && str != NULL)\n+    {\n+        missing_settings_key(key);\n+    }\n+    else\n+    {\n+        tr_rpcSetHostWhitelist(s, str);\n     }\n \n     key = TR_KEY_rpc_authentication_required;",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "    }",
      "",
      "    key = TR_KEY_rpc_host_whitelist_enabled;",
      "",
      "    if (!tr_variantDictFindBool(settings, key, &boolVal))",
      "    {",
      "        missing_settings_key(key);",
      "    }",
      "    else",
      "    {",
      "        tr_rpcSetHostWhitelistEnabled(s, boolVal);",
      "    }",
      "",
      "    key = TR_KEY_rpc_host_whitelist;",
      "",
      "    if (!tr_variantDictFindStr(settings, key, &str, NULL) && str != NULL)",
      "    {",
      "        missing_settings_key(key);",
      "    }",
      "    else",
      "    {",
      "        tr_rpcSetHostWhitelist(s, str);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/transmission/transmission/pull/468",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/transmission/transmission/pull/468: 403 Client Error: Forbidden for url: https://api.github.com/repos/transmission/transmission/pulls/468",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 1.0"
}