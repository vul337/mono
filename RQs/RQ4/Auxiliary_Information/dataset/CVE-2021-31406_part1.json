{
  "cve_id": "CVE-2021-31406",
  "cwe_ids": [
    "CWE-203"
  ],
  "cvss_vector": "AV:L/AC:M/Au:N/C:P/I:N/A:N",
  "cvss_is_v3": false,
  "repo_name": "vaadin/flow",
  "commit_msg": "Use time-constant comparison for CSRF tokens in endpoint",
  "commit_hash": "3fe644cab2cffa5b86316dbe71b11df1083861a9",
  "git_url": "https://github.com/vaadin/flow/commit/3fe644cab2cffa5b86316dbe71b11df1083861a9",
  "file_path": "fusion-endpoint/src/main/java/com/vaadin/flow/server/connect/auth/VaadinConnectAccessChecker.java",
  "func_name": "requestForbidden",
  "func_before": "private boolean requestForbidden(HttpServletRequest request) {\n        if (!xsrfProtectionEnabled) {\n            return false;\n        }\n\n        HttpSession session = request.getSession(false);\n        if (session == null) {\n            return false;\n        }\n\n        String csrfTokenInSession = (String) session\n                .getAttribute(VaadinService.getCsrfTokenAttributeName());\n        if (csrfTokenInSession == null) {\n            if (getLogger().isInfoEnabled()) {\n                getLogger().info(\n                        \"Unable to verify CSRF token for endpoint request, got null token in session\");\n            }\n\n            return true;\n        }\n\n        if (!csrfTokenInSession.equals(request.getHeader(\"X-CSRF-Token\"))) {\n            if (getLogger().isInfoEnabled()) {\n                getLogger().info(\"Invalid CSRF token in endpoint request\");\n            }\n\n            return true;\n        }\n\n        return false;\n    }",
  "abstract_func_before": "private boolean requestForbidden(HttpServletRequest VAR_0) {\n        if (!VAR_1) {\n            return false;\n        }\n\n        HttpSession VAR_2 = VAR_0.getSession(false);\n        if (VAR_2 == null) {\n            return false;\n        }\n\n        String VAR_3 = (String) VAR_2\n                .getAttribute(VAR_4.getCsrfTokenAttributeName());\n        if (VAR_3 == null) {\n            if (getLogger().isInfoEnabled()) {\n                getLogger().info(\n                        \"Unable to verify CSRF token for endpoint request, got null token in session\");\n            }\n\n            return true;\n        }\n\n        if (!VAR_3.equals(VAR_0.getHeader(\"X-CSRF-Token\"))) {\n            if (getLogger().isInfoEnabled()) {\n                getLogger().info(\"Invalid CSRF token in endpoint request\");\n            }\n\n            return true;\n        }\n\n        return false;\n    }",
  "func_graph_path_before": "vaadin/flow/3fe644cab2cffa5b86316dbe71b11df1083861a9/VaadinConnectAccessChecker.java/vul/before/0.json",
  "func": "private boolean requestForbidden(HttpServletRequest request) {\n        if (!xsrfProtectionEnabled) {\n            return false;\n        }\n\n        HttpSession session = request.getSession(false);\n        if (session == null) {\n            return false;\n        }\n\n        String csrfTokenInSession = (String) session\n                .getAttribute(VaadinService.getCsrfTokenAttributeName());\n        if (csrfTokenInSession == null) {\n            if (getLogger().isInfoEnabled()) {\n                getLogger().info(\n                        \"Unable to verify CSRF token for endpoint request, got null token in session\");\n            }\n\n            return true;\n        }\n\n        String csrfTokenInRequest = request.getHeader(\"X-CSRF-Token\");\n        if (csrfTokenInRequest == null || !MessageDigest.isEqual(\n                csrfTokenInSession.getBytes(StandardCharsets.UTF_8), \n                csrfTokenInRequest.getBytes(StandardCharsets.UTF_8))) {\n            if (getLogger().isInfoEnabled()) {\n                getLogger().info(\"Invalid CSRF token in endpoint request\");\n            }\n\n            return true;\n        }\n\n        return false;\n    }",
  "abstract_func": "private boolean requestForbidden(HttpServletRequest VAR_0) {\n        if (!VAR_1) {\n            return false;\n        }\n\n        HttpSession VAR_2 = VAR_0.getSession(false);\n        if (VAR_2 == null) {\n            return false;\n        }\n\n        String VAR_3 = (String) VAR_2\n                .getAttribute(VAR_4.getCsrfTokenAttributeName());\n        if (VAR_3 == null) {\n            if (getLogger().isInfoEnabled()) {\n                getLogger().info(\n                        \"Unable to verify CSRF token for endpoint request, got null token in session\");\n            }\n\n            return true;\n        }\n\n        String VAR_5 = VAR_0.getHeader(\"X-CSRF-Token\");\n        if (VAR_5 == null || !VAR_6.isEqual(\n                VAR_3.getBytes(VAR_7.UTF_8), \n                VAR_5.getBytes(VAR_7.UTF_8))) {\n            if (getLogger().isInfoEnabled()) {\n                getLogger().info(\"Invalid CSRF token in endpoint request\");\n            }\n\n            return true;\n        }\n\n        return false;\n    }",
  "func_graph_path": "vaadin/flow/3fe644cab2cffa5b86316dbe71b11df1083861a9/VaadinConnectAccessChecker.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -19,7 +19,10 @@\n             return true;\n         }\n \n-        if (!csrfTokenInSession.equals(request.getHeader(\"X-CSRF-Token\"))) {\n+        String csrfTokenInRequest = request.getHeader(\"X-CSRF-Token\");\n+        if (csrfTokenInRequest == null || !MessageDigest.isEqual(\n+                csrfTokenInSession.getBytes(StandardCharsets.UTF_8), \n+                csrfTokenInRequest.getBytes(StandardCharsets.UTF_8))) {\n             if (getLogger().isInfoEnabled()) {\n                 getLogger().info(\"Invalid CSRF token in endpoint request\");\n             }",
  "diff_line_info": {
    "deleted_lines": [
      "        if (!csrfTokenInSession.equals(request.getHeader(\"X-CSRF-Token\"))) {"
    ],
    "added_lines": [
      "        String csrfTokenInRequest = request.getHeader(\"X-CSRF-Token\");",
      "        if (csrfTokenInRequest == null || !MessageDigest.isEqual(",
      "                csrfTokenInSession.getBytes(StandardCharsets.UTF_8), ",
      "                csrfTokenInRequest.getBytes(StandardCharsets.UTF_8))) {"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/vaadin/flow/pull/10157",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/vaadin/flow/pull/10157: 403 Client Error: Forbidden for url: https://api.github.com/repos/vaadin/flow/pulls/10157",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 0.95"
}