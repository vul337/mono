{
  "cve_id": "CVE-2020-15170",
  "cwe_ids": [
    "CWE-20"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "apolloconfig/apollo",
  "commit_msg": "add access control support for admin service",
  "commit_hash": "ae9ba6cfd32ed80469f162e5e3583e2477862ddf",
  "git_url": "https://github.com/apolloconfig/apollo/commit/ae9ba6cfd32ed80469f162e5e3583e2477862ddf",
  "file_path": "apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/component/RetryableRestTemplate.java",
  "func_name": "exchangeGet",
  "func_before": "private <T> ResponseEntity<T> exchangeGet(Env env, String path, ParameterizedTypeReference<T> reference,\n                                            Object... uriVariables) {\n    if (path.startsWith(\"/\")) {\n      path = path.substring(1, path.length());\n    }\n\n    String uri = uriTemplateHandler.expand(path, uriVariables).getPath();\n    Transaction ct = Tracer.newTransaction(\"AdminAPI\", uri);\n    ct.addData(\"Env\", env);\n\n    List<ServiceDTO> services = getAdminServices(env, ct);\n\n    for (ServiceDTO serviceDTO : services) {\n      try {\n\n        ResponseEntity<T> result =\n            restTemplate.exchange(parseHost(serviceDTO) + path, HttpMethod.GET, null, reference, uriVariables);\n\n        ct.setStatus(Transaction.SUCCESS);\n        ct.complete();\n        return result;\n      } catch (Throwable t) {\n        logger.error(\"Http request failed, uri: {}, method: {}\", uri, HttpMethod.GET, t);\n        Tracer.logError(t);\n        if (canRetry(t, HttpMethod.GET)) {\n          Tracer.logEvent(TracerEventType.API_RETRY, uri);\n        } else {// biz exception rethrow\n          ct.setStatus(t);\n          ct.complete();\n          throw t;\n        }\n\n      }\n    }\n\n    //all admin server down\n    ServiceException e =\n        new ServiceException(String.format(\"Admin servers are unresponsive. meta server address: %s, admin servers: %s\",\n                portalMetaDomainService.getDomain(env), services));\n    ct.setStatus(e);\n    ct.complete();\n    throw e;\n\n  }",
  "abstract_func_before": "private <T> ResponseEntity<T> exchangeGet(Env VAR_0, String VAR_1, ParameterizedTypeReference<T> VAR_2,\n                                            Object... VAR_3) {\n    if (VAR_1.startsWith(\"/\")) {\n      VAR_1 = VAR_1.substring(1, VAR_1.length());\n    }\n\n    String VAR_4 = VAR_5.expand(VAR_1, VAR_3).getPath();\n    Transaction VAR_6 = VAR_7.newTransaction(\"AdminAPI\", VAR_4);\n    VAR_6.addData(\"Env\", VAR_0);\n\n    List<ServiceDTO> VAR_8 = getAdminServices(VAR_0, VAR_6);\n\n    for (ServiceDTO VAR_9 : VAR_8) {\n      try {\n\n        ResponseEntity<T> VAR_10 =\n            VAR_11.exchange(parseHost(VAR_9) + VAR_1, VAR_12.GET, null, VAR_2, VAR_3);\n\n        VAR_6.setStatus(VAR_13.SUCCESS);\n        VAR_6.complete();\n        return VAR_10;\n      } catch (Throwable VAR_14) {\n        VAR_15.error(\"Http request failed, uri: {}, method: {}\", VAR_4, VAR_12.GET, VAR_14);\n        VAR_7.logError(VAR_14);\n        if (canRetry(VAR_14, VAR_12.GET)) {\n          VAR_7.logEvent(VAR_16.API_RETRY, VAR_4);\n        } else {/* COMMENT_0 */\n          VAR_6.setStatus(VAR_14);\n          VAR_6.complete();\n          throw VAR_14;\n        }\n\n      }\n    }\n\n    /* COMMENT_1 */\n    ServiceException VAR_17 =\n        new ServiceException(VAR_18.format(\"Admin servers are unresponsive. meta server address: %s, admin servers: %s\",\n                VAR_19.getDomain(VAR_0), VAR_8));\n    VAR_6.setStatus(VAR_17);\n    VAR_6.complete();\n    throw VAR_17;\n\n  }",
  "func_graph_path_before": "apolloconfig/apollo/ae9ba6cfd32ed80469f162e5e3583e2477862ddf/RetryableRestTemplate.java/vul/before/1.json",
  "func": "private <T> ResponseEntity<T> exchangeGet(Env env, String path, ParameterizedTypeReference<T> reference,\n                                            Object... uriVariables) {\n    if (path.startsWith(\"/\")) {\n      path = path.substring(1, path.length());\n    }\n\n    String uri = uriTemplateHandler.expand(path, uriVariables).getPath();\n    Transaction ct = Tracer.newTransaction(\"AdminAPI\", uri);\n    ct.addData(\"Env\", env);\n\n    List<ServiceDTO> services = getAdminServices(env, ct);\n    HttpEntity<Void> entity = new HttpEntity<>(assembleExtraHeaders(env));\n\n    for (ServiceDTO serviceDTO : services) {\n      try {\n\n        ResponseEntity<T> result =\n            restTemplate.exchange(parseHost(serviceDTO) + path, HttpMethod.GET, entity, reference, uriVariables);\n\n        ct.setStatus(Transaction.SUCCESS);\n        ct.complete();\n        return result;\n      } catch (Throwable t) {\n        logger.error(\"Http request failed, uri: {}, method: {}\", uri, HttpMethod.GET, t);\n        Tracer.logError(t);\n        if (canRetry(t, HttpMethod.GET)) {\n          Tracer.logEvent(TracerEventType.API_RETRY, uri);\n        } else {// biz exception rethrow\n          ct.setStatus(t);\n          ct.complete();\n          throw t;\n        }\n\n      }\n    }\n\n    //all admin server down\n    ServiceException e =\n        new ServiceException(String.format(\"Admin servers are unresponsive. meta server address: %s, admin servers: %s\",\n                portalMetaDomainService.getDomain(env), services));\n    ct.setStatus(e);\n    ct.complete();\n    throw e;\n\n  }",
  "abstract_func": "private <T> ResponseEntity<T> exchangeGet(Env VAR_0, String VAR_1, ParameterizedTypeReference<T> VAR_2,\n                                            Object... VAR_3) {\n    if (VAR_1.startsWith(\"/\")) {\n      VAR_1 = VAR_1.substring(1, VAR_1.length());\n    }\n\n    String VAR_4 = VAR_5.expand(VAR_1, VAR_3).getPath();\n    Transaction VAR_6 = VAR_7.newTransaction(\"AdminAPI\", VAR_4);\n    VAR_6.addData(\"Env\", VAR_0);\n\n    List<ServiceDTO> VAR_8 = getAdminServices(VAR_0, VAR_6);\n    HttpEntity<Void> VAR_9 = new HttpEntity<>(assembleExtraHeaders(VAR_0));\n\n    for (ServiceDTO VAR_10 : VAR_8) {\n      try {\n\n        ResponseEntity<T> VAR_11 =\n            VAR_12.exchange(parseHost(VAR_10) + VAR_1, VAR_13.GET, VAR_9, VAR_2, VAR_3);\n\n        VAR_6.setStatus(VAR_14.SUCCESS);\n        VAR_6.complete();\n        return VAR_11;\n      } catch (Throwable VAR_15) {\n        VAR_16.error(\"Http request failed, uri: {}, method: {}\", VAR_4, VAR_13.GET, VAR_15);\n        VAR_7.logError(VAR_15);\n        if (canRetry(VAR_15, VAR_13.GET)) {\n          VAR_7.logEvent(VAR_17.API_RETRY, VAR_4);\n        } else {/* COMMENT_0 */\n          VAR_6.setStatus(VAR_15);\n          VAR_6.complete();\n          throw VAR_15;\n        }\n\n      }\n    }\n\n    /* COMMENT_1 */\n    ServiceException VAR_18 =\n        new ServiceException(VAR_19.format(\"Admin servers are unresponsive. meta server address: %s, admin servers: %s\",\n                VAR_20.getDomain(VAR_0), VAR_8));\n    VAR_6.setStatus(VAR_18);\n    VAR_6.complete();\n    throw VAR_18;\n\n  }",
  "func_graph_path": "apolloconfig/apollo/ae9ba6cfd32ed80469f162e5e3583e2477862ddf/RetryableRestTemplate.java/vul/after/1.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -9,12 +9,13 @@\n     ct.addData(\"Env\", env);\n \n     List<ServiceDTO> services = getAdminServices(env, ct);\n+    HttpEntity<Void> entity = new HttpEntity<>(assembleExtraHeaders(env));\n \n     for (ServiceDTO serviceDTO : services) {\n       try {\n \n         ResponseEntity<T> result =\n-            restTemplate.exchange(parseHost(serviceDTO) + path, HttpMethod.GET, null, reference, uriVariables);\n+            restTemplate.exchange(parseHost(serviceDTO) + path, HttpMethod.GET, entity, reference, uriVariables);\n \n         ct.setStatus(Transaction.SUCCESS);\n         ct.complete();",
  "diff_line_info": {
    "deleted_lines": [
      "            restTemplate.exchange(parseHost(serviceDTO) + path, HttpMethod.GET, null, reference, uriVariables);"
    ],
    "added_lines": [
      "    HttpEntity<Void> entity = new HttpEntity<>(assembleExtraHeaders(env));",
      "            restTemplate.exchange(parseHost(serviceDTO) + path, HttpMethod.GET, entity, reference, uriVariables);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/apolloconfig/apollo/pull/3233",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/apolloconfig/apollo/pull/3233: 403 Client Error: Forbidden for url: https://api.github.com/repos/apolloconfig/apollo/pulls/3233",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 1.0"
}