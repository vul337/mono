{
  "cve_id": "CVE-2020-15953",
  "cwe_ids": [
    "CWE-74"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:P/I:P/A:N",
  "cvss_is_v3": false,
  "repo_name": "dinhvh/libetpan",
  "commit_msg": "Detect extra data after SMTP STARTTLS response and return error",
  "commit_hash": "874ebf7ce9d108c6c1def733f90d156b44fb6ef7",
  "git_url": "https://github.com/dinhvh/libetpan/commit/874ebf7ce9d108c6c1def733f90d156b44fb6ef7",
  "file_path": "src/low-level/smtp/mailsmtp.c",
  "func_name": "mailesmtp_starttls",
  "func_before": "int mailesmtp_starttls(mailsmtp * session)\n{\n  int r;\n\n  if (!(session->esmtp & MAILSMTP_ESMTP_STARTTLS))\n    return MAILSMTP_ERROR_STARTTLS_NOT_SUPPORTED;\n\n  r = send_command(session, \"STARTTLS\\r\\n\");\n  if (r == -1)\n    return MAILSMTP_ERROR_STREAM;\n  r = read_response(session);\n\n  switch (r) {\n  case 220:\n    return MAILSMTP_NO_ERROR;\n\n  case 454:\n    return MAILSMTP_ERROR_STARTTLS_TEMPORARY_FAILURE;\n\n  case 0:\n    return MAILSMTP_ERROR_STREAM;\n\n  default:\n    return MAILSMTP_ERROR_UNEXPECTED_CODE;\n  }\n}",
  "abstract_func_before": "int mailesmtp_starttls(mailsmtp * VAR_0)\n{\n  int VAR_1;\n\n  if (!(VAR_0->esmtp & VAR_2))\n    return VAR_3;\n\n  VAR_1 = send_command(VAR_0, \"STARTTLS\\r\\n\");\n  if (VAR_1 == -1)\n    return VAR_4;\n  VAR_1 = read_response(VAR_0);\n\n  switch (VAR_1) {\n  case 220:\n    return VAR_5;\n\n  case 454:\n    return VAR_6;\n\n  case 0:\n    return VAR_4;\n\n  default:\n    return VAR_7;\n  }\n}",
  "func_graph_path_before": "dinhvh/libetpan/874ebf7ce9d108c6c1def733f90d156b44fb6ef7/mailsmtp.c/vul/before/0.json",
  "func": "int mailesmtp_starttls(mailsmtp * session)\n{\n  int r;\n\n  if (!(session->esmtp & MAILSMTP_ESMTP_STARTTLS))\n    return MAILSMTP_ERROR_STARTTLS_NOT_SUPPORTED;\n\n  r = send_command(session, \"STARTTLS\\r\\n\");\n  if (r == -1)\n    return MAILSMTP_ERROR_STREAM;\n  r = read_response(session);\n\n  // Detect if the server send extra data after the STARTTLS response.\n  // This *may* be a \"response injection attack\".\n  if (session->stream->read_buffer_len != 0) {\n    // Since it is also protocol violation, exit.\n    // There is no general error type for STARTTLS errors in SMTP\n    return MAILSMTP_ERROR_SSL;\n  }\n\n  switch (r) {\n  case 220:\n    return MAILSMTP_NO_ERROR;\n\n  case 454:\n    return MAILSMTP_ERROR_STARTTLS_TEMPORARY_FAILURE;\n\n  case 0:\n    return MAILSMTP_ERROR_STREAM;\n\n  default:\n    return MAILSMTP_ERROR_UNEXPECTED_CODE;\n  }\n}",
  "abstract_func": "int mailesmtp_starttls(mailsmtp * VAR_0)\n{\n  int VAR_1;\n\n  if (!(VAR_0->esmtp & VAR_2))\n    return VAR_3;\n\n  VAR_1 = send_command(VAR_0, \"STARTTLS\\r\\n\");\n  if (VAR_1 == -1)\n    return VAR_4;\n  VAR_1 = read_response(VAR_0);\n\n  /* COMMENT_0 */\n  /* COMMENT_1 */\n  if (VAR_0->stream->read_buffer_len != 0) {\n    /* COMMENT_2 */\n    /* COMMENT_3 */\n    return VAR_5;\n  }\n\n  switch (VAR_1) {\n  case 220:\n    return VAR_6;\n\n  case 454:\n    return VAR_7;\n\n  case 0:\n    return VAR_4;\n\n  default:\n    return VAR_8;\n  }\n}",
  "func_graph_path": "dinhvh/libetpan/874ebf7ce9d108c6c1def733f90d156b44fb6ef7/mailsmtp.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -9,6 +9,14 @@\n   if (r == -1)\n     return MAILSMTP_ERROR_STREAM;\n   r = read_response(session);\n+\n+  // Detect if the server send extra data after the STARTTLS response.\n+  // This *may* be a \"response injection attack\".\n+  if (session->stream->read_buffer_len != 0) {\n+    // Since it is also protocol violation, exit.\n+    // There is no general error type for STARTTLS errors in SMTP\n+    return MAILSMTP_ERROR_SSL;\n+  }\n \n   switch (r) {\n   case 220:",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "",
      "  // Detect if the server send extra data after the STARTTLS response.",
      "  // This *may* be a \"response injection attack\".",
      "  if (session->stream->read_buffer_len != 0) {",
      "    // Since it is also protocol violation, exit.",
      "    // There is no general error type for STARTTLS errors in SMTP",
      "    return MAILSMTP_ERROR_SSL;",
      "  }"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/dinhvh/libetpan/pull/388",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/dinhvh/libetpan/pull/388: 403 Client Error: Forbidden for url: https://api.github.com/repos/dinhvh/libetpan/pulls/388",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix;  \n**Confidence:** 1.0"
}