{
  "cve_id": "CVE-2023-23082",
  "cwe_ids": [
    "CWE-787"
  ],
  "cvss_vector": "CVSS:3.1/AV:P/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
  "cvss_is_v3": true,
  "repo_name": "xbmc",
  "commit_msg": "ExifParse: Backport further upstream fixes\n\nPartially via upstream commit:\nhttps://android.googlesource.com/platform/external/jhead/+/2a4c12f5e5808e309b9ba04fe8b1539debf466d1",
  "commit_hash": "7e5f9fbf9aaa3540aab35e7504036855b23dcf60",
  "git_url": "https://github.com/xbmc/xbmc/commit/7e5f9fbf9aaa3540aab35e7504036855b23dcf60",
  "file_path": "xbmc/pictures/ExifParse.cpp",
  "func_name": "CExifParse::ProcessGpsInfo",
  "func_before": "void CExifParse::ProcessGpsInfo(\n                    const unsigned char* const DirStart,\n                    int ByteCountUnused,\n                    const unsigned char* const OffsetBase,\n                    unsigned ExifLength)\n{\n  int NumDirEntries = Get16(DirStart, m_MotorolaOrder);\n\n  for (int de=0;de<NumDirEntries;de++)\n  {\n    const unsigned char* DirEntry = DIR_ENTRY_ADDR(DirStart, de);\n\n    // Fix from aosp 34a2564d3268a5ca1472c5076675782fbaf724d6\n    if (DirEntry + 12 > OffsetBase + ExifLength)\n    {\n      ErrNonfatal(\"GPS info directory goes past end of exif\", 0, 0);\n      return;\n    }\n\n    unsigned Tag        = Get16(DirEntry, m_MotorolaOrder);\n    unsigned Format     = Get16(DirEntry+2, m_MotorolaOrder);\n    unsigned Components = (unsigned)Get32(DirEntry+4, m_MotorolaOrder);\n    if (Format == 0 || Format > NUM_FORMATS)\n    {\n      ErrNonfatal(\"Illegal number format %d for tag %04x\", Format, Tag);\n      continue;\n    }\n\n    unsigned ComponentSize = BytesPerFormat[Format - 1];\n    unsigned ByteCount = Components * ComponentSize;\n\n    const unsigned char* ValuePtr;\n\n    if (ByteCount > 4)\n    {\n      unsigned OffsetVal = (unsigned)Get32(DirEntry+8, m_MotorolaOrder);\n      // If its bigger than 4 bytes, the dir entry contains an offset.\n      if (OffsetVal+ByteCount > ExifLength)\n      {\n        // Bogus pointer offset and / or bytecount value\n        ErrNonfatal(\"Illegal value pointer for tag %04x\", Tag,0);\n        continue;\n      }\n      ValuePtr = OffsetBase+OffsetVal;\n    }\n    else\n    {\n      // 4 bytes or less and value is in the dir entry itself\n      ValuePtr = DirEntry+8;\n    }\n\n    switch(Tag)\n    {\n      case TAG_GPS_LAT_REF:\n        m_ExifInfo->GpsLat[0] = ValuePtr[0];\n        m_ExifInfo->GpsLat[1] = 0;\n      break;\n\n      case TAG_GPS_LONG_REF:\n        m_ExifInfo->GpsLong[0] = ValuePtr[0];\n        m_ExifInfo->GpsLong[1] = 0;\n      break;\n\n      case TAG_GPS_LAT:\n        GetLatLong(Format, ValuePtr, ComponentSize, m_ExifInfo->GpsLat);\n      break;\n      case TAG_GPS_LONG:\n        GetLatLong(Format, ValuePtr, ComponentSize, m_ExifInfo->GpsLong);\n      break;\n\n      case TAG_GPS_ALT_REF:\n        if (ValuePtr[0] != 0)\n          m_ExifInfo->GpsAlt[0] = '-';\n        m_ExifInfo->GpsAlt[1] = 0;\n      break;\n\n      case TAG_GPS_ALT:\n        {\n          char temp[18];\n          sprintf(temp, \"%.2fm\", static_cast<double>(ConvertAnyFormat(ValuePtr, Format)));\n          strcat(m_ExifInfo->GpsAlt, temp);\n        }\n      break;\n    }\n  }\n}",
  "abstract_func_before": "void CExifParse::ProcessGpsInfo(\n                    const unsigned char* const VAR_0,\n                    int VAR_1,\n                    const unsigned char* const VAR_2,\n                    unsigned VAR_3)\n{\n  int VAR_4 = Get16(VAR_0, VAR_5);\n\n  for (int VAR_6=0;VAR_6<VAR_4;VAR_6++)\n  {\n    const unsigned char* VAR_7 = DIR_ENTRY_ADDR(VAR_0, VAR_6);\n\n    /* COMMENT_0 */\n    if (VAR_7 + 12 > VAR_2 + VAR_3)\n    {\n      ErrNonfatal(\"GPS info directory goes past end of exif\", 0, 0);\n      return;\n    }\n\n    unsigned VAR_8        = Get16(VAR_7, VAR_5);\n    unsigned VAR_9     = Get16(VAR_7+2, VAR_5);\n    unsigned VAR_10 = (unsigned)Get32(VAR_7+4, VAR_5);\n    if (VAR_9 == 0 || VAR_9 > VAR_11)\n    {\n      ErrNonfatal(\"Illegal number format %d for tag %04x\", VAR_9, VAR_8);\n      continue;\n    }\n\n    unsigned VAR_12 = VAR_13[VAR_9 - 1];\n    unsigned VAR_14 = VAR_10 * VAR_12;\n\n    const unsigned char* VAR_15;\n\n    if (VAR_14 > 4)\n    {\n      unsigned VAR_16 = (unsigned)Get32(VAR_7+8, VAR_5);\n      /* COMMENT_1 */\n      if (VAR_16+VAR_14 > VAR_3)\n      {\n        /* COMMENT_2 */\n        ErrNonfatal(\"Illegal value pointer for tag %04x\", VAR_8,0);\n        continue;\n      }\n      VAR_15 = VAR_2+VAR_16;\n    }\n    else\n    {\n      /* COMMENT_3 */\n      VAR_15 = VAR_7+8;\n    }\n\n    switch(VAR_8)\n    {\n      case VAR_17:\n        VAR_18->GpsLat[0] = VAR_15[0];\n        VAR_18->GpsLat[1] = 0;\n      break;\n\n      case VAR_19:\n        VAR_18->GpsLong[0] = VAR_15[0];\n        VAR_18->GpsLong[1] = 0;\n      break;\n\n      case VAR_20:\n        GetLatLong(VAR_9, VAR_15, VAR_12, VAR_18->GpsLat);\n      break;\n      case VAR_21:\n        GetLatLong(VAR_9, VAR_15, VAR_12, VAR_18->GpsLong);\n      break;\n\n      case VAR_22:\n        if (VAR_15[0] != 0)\n          VAR_18->GpsAlt[0] = '-';\n        VAR_18->GpsAlt[1] = 0;\n      break;\n\n      case VAR_23:\n        {\n          char VAR_24[18];\n          sprintf(VAR_24, \"%.2fm\", VAR_25<double>(ConvertAnyFormat(VAR_15, VAR_9)));\n          strcat(VAR_18->GpsAlt, VAR_24);\n        }\n      break;\n    }\n  }\n}",
  "func_graph_path_before": "xbmc/7e5f9fbf9aaa3540aab35e7504036855b23dcf60/ExifParse.cpp/vul/before/0.json",
  "func": "void CExifParse::ProcessGpsInfo(\n                    const unsigned char* const DirStart,\n                    int ByteCountUnused,\n                    const unsigned char* const OffsetBase,\n                    unsigned ExifLength)\n{\n  int NumDirEntries = Get16(DirStart, m_MotorolaOrder);\n\n  for (int de=0;de<NumDirEntries;de++)\n  {\n    const unsigned char* DirEntry = DIR_ENTRY_ADDR(DirStart, de);\n\n    // Fix from aosp 34a2564d3268a5ca1472c5076675782fbaf724d6\n    if (DirEntry + 12 > OffsetBase + ExifLength)\n    {\n      ErrNonfatal(\"GPS info directory goes past end of exif\", 0, 0);\n      return;\n    }\n\n    unsigned Tag        = Get16(DirEntry, m_MotorolaOrder);\n    unsigned Format     = Get16(DirEntry+2, m_MotorolaOrder);\n    unsigned Components = (unsigned)Get32(DirEntry+4, m_MotorolaOrder);\n    if (Format == 0 || Format > NUM_FORMATS)\n    {\n      ErrNonfatal(\"Illegal number format %d for tag %04x\", Format, Tag);\n      continue;\n    }\n\n    unsigned ComponentSize = BytesPerFormat[Format - 1];\n    unsigned ByteCount = Components * ComponentSize;\n\n    const unsigned char* ValuePtr;\n\n    if (ByteCount > 4)\n    {\n      unsigned OffsetVal = (unsigned)Get32(DirEntry+8, m_MotorolaOrder);\n      // If its bigger than 4 bytes, the dir entry contains an offset.\n      if (OffsetVal > UINT32_MAX - ByteCount || OffsetVal + ByteCount > ExifLength)\n      {\n        // Bogus pointer offset and / or bytecount value\n        ErrNonfatal(\"Illegal value pointer for tag %04x\", Tag,0);\n        continue;\n      }\n      ValuePtr = OffsetBase+OffsetVal;\n    }\n    else\n    {\n      // 4 bytes or less and value is in the dir entry itself\n      ValuePtr = DirEntry+8;\n    }\n\n    switch(Tag)\n    {\n      case TAG_GPS_LAT_REF:\n        m_ExifInfo->GpsLat[0] = ValuePtr[0];\n        m_ExifInfo->GpsLat[1] = 0;\n      break;\n\n      case TAG_GPS_LONG_REF:\n        m_ExifInfo->GpsLong[0] = ValuePtr[0];\n        m_ExifInfo->GpsLong[1] = 0;\n      break;\n\n      case TAG_GPS_LAT:\n        GetLatLong(Format, ValuePtr, ComponentSize, m_ExifInfo->GpsLat);\n      break;\n      case TAG_GPS_LONG:\n        GetLatLong(Format, ValuePtr, ComponentSize, m_ExifInfo->GpsLong);\n      break;\n\n      case TAG_GPS_ALT_REF:\n        if (ValuePtr[0] != 0)\n          m_ExifInfo->GpsAlt[0] = '-';\n        m_ExifInfo->GpsAlt[1] = 0;\n      break;\n\n      case TAG_GPS_ALT:\n        {\n          char temp[18];\n          sprintf(temp, \"%.2fm\", static_cast<double>(ConvertAnyFormat(ValuePtr, Format)));\n          strcat(m_ExifInfo->GpsAlt, temp);\n        }\n      break;\n    }\n  }\n}",
  "abstract_func": "void CExifParse::ProcessGpsInfo(\n                    const unsigned char* const VAR_0,\n                    int VAR_1,\n                    const unsigned char* const VAR_2,\n                    unsigned VAR_3)\n{\n  int VAR_4 = Get16(VAR_0, VAR_5);\n\n  for (int VAR_6=0;VAR_6<VAR_4;VAR_6++)\n  {\n    const unsigned char* VAR_7 = DIR_ENTRY_ADDR(VAR_0, VAR_6);\n\n    /* COMMENT_0 */\n    if (VAR_7 + 12 > VAR_2 + VAR_3)\n    {\n      ErrNonfatal(\"GPS info directory goes past end of exif\", 0, 0);\n      return;\n    }\n\n    unsigned VAR_8        = Get16(VAR_7, VAR_5);\n    unsigned VAR_9     = Get16(VAR_7+2, VAR_5);\n    unsigned VAR_10 = (unsigned)Get32(VAR_7+4, VAR_5);\n    if (VAR_9 == 0 || VAR_9 > VAR_11)\n    {\n      ErrNonfatal(\"Illegal number format %d for tag %04x\", VAR_9, VAR_8);\n      continue;\n    }\n\n    unsigned VAR_12 = VAR_13[VAR_9 - 1];\n    unsigned VAR_14 = VAR_10 * VAR_12;\n\n    const unsigned char* VAR_15;\n\n    if (VAR_14 > 4)\n    {\n      unsigned VAR_16 = (unsigned)Get32(VAR_7+8, VAR_5);\n      /* COMMENT_1 */\n      if (VAR_16 > VAR_17 - VAR_14 || VAR_16 + VAR_14 > VAR_3)\n      {\n        /* COMMENT_2 */\n        ErrNonfatal(\"Illegal value pointer for tag %04x\", VAR_8,0);\n        continue;\n      }\n      VAR_15 = VAR_2+VAR_16;\n    }\n    else\n    {\n      /* COMMENT_3 */\n      VAR_15 = VAR_7+8;\n    }\n\n    switch(VAR_8)\n    {\n      case VAR_18:\n        VAR_19->GpsLat[0] = VAR_15[0];\n        VAR_19->GpsLat[1] = 0;\n      break;\n\n      case VAR_20:\n        VAR_19->GpsLong[0] = VAR_15[0];\n        VAR_19->GpsLong[1] = 0;\n      break;\n\n      case VAR_21:\n        GetLatLong(VAR_9, VAR_15, VAR_12, VAR_19->GpsLat);\n      break;\n      case VAR_22:\n        GetLatLong(VAR_9, VAR_15, VAR_12, VAR_19->GpsLong);\n      break;\n\n      case VAR_23:\n        if (VAR_15[0] != 0)\n          VAR_19->GpsAlt[0] = '-';\n        VAR_19->GpsAlt[1] = 0;\n      break;\n\n      case VAR_24:\n        {\n          char VAR_25[18];\n          sprintf(VAR_25, \"%.2fm\", VAR_26<double>(ConvertAnyFormat(VAR_15, VAR_9)));\n          strcat(VAR_19->GpsAlt, VAR_25);\n        }\n      break;\n    }\n  }\n}",
  "func_graph_path": "xbmc/7e5f9fbf9aaa3540aab35e7504036855b23dcf60/ExifParse.cpp/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -35,7 +35,7 @@\n     {\n       unsigned OffsetVal = (unsigned)Get32(DirEntry+8, m_MotorolaOrder);\n       // If its bigger than 4 bytes, the dir entry contains an offset.\n-      if (OffsetVal+ByteCount > ExifLength)\n+      if (OffsetVal > UINT32_MAX - ByteCount || OffsetVal + ByteCount > ExifLength)\n       {\n         // Bogus pointer offset and / or bytecount value\n         ErrNonfatal(\"Illegal value pointer for tag %04x\", Tag,0);",
  "diff_line_info": {
    "deleted_lines": [
      "      if (OffsetVal+ByteCount > ExifLength)"
    ],
    "added_lines": [
      "      if (OffsetVal > UINT32_MAX - ByteCount || OffsetVal + ByteCount > ExifLength)"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/xbmc/xbmc/pull/22380",
  "description": {
    "pr_info": {
      "title": "ExifParser: Fix several out of bounds accesses while parsing exif information",
      "number": 22380
    },
    "comment": [
      "Several drafted images could crash kodi. This was tested with memory, address sanitizers enabled.\r\ncmake -DENABLE_VAAPI=1 -DCORE_PLATFORM_NAME=wayland -DCMAKE_BUILD_TYPE=Debug -DAPP_RENDER_SYSTEM=gl -DECM_ENABLE_SANITIZERS=address,memory\r\n\r\nExample Output:\r\nSUMMARY: AddressSanitizer: heap-buffer-overflow (/home/fritsch/Desktop/xbmc-fritsch/xbmc/build/kodi-wayland+0x3dca321) in CExifParse::Get32(void const*, bool)\r\nShadow bytes around the buggy address:\r\n  0x0c3c8004e070: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\r\n  0x0c3c8004e080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\r\n  0x0c3c8004e090: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\r\n  0x0c3c8004e0a0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\r\n  0x0c3c8004e0b0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\r\n=>0x0c3c8004e0c0: 00 00 00 00 00[04]fa fa fa fa fa fa fa fa fa fa\r\n  0x0c3c8004e0d0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\r\n  0x0c3c8004e0e0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\r\n  0x0c3c8004e0f0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\r\n  0x0c3c8004e100: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\r\n  0x0c3c8004e110: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\r\nShadow byte legend (one shadow byte represents 8 application bytes):\r\n  Addressable:           00\r\n  Partially addressable: 01 02 03 04 05 06 07 \r\n  Heap left redzone:       fa\r\n  Freed heap region:       fd\r\n  Stack left redzone:      f1\r\n  Stack mid redzone:       f2\r\n  Stack right redzone:     f3\r\n  Stack after return:      f5\r\n  Stack use after scope:   f8\r\n  Global redzone:          f9\r\n  Global init order:       f6\r\n  Poisoned by user:        f7\r\n  Container overflow:      fc\r\n  Array cookie:            ac\r\n  Intra object redzone:    bb\r\n  ASan internal:           fe\r\n  Left alloca redzone:     ca\r\n  Right alloca redzone:    cb\r\n  Shadow gap:              cc\r\n==824657==ABORTING\r\n\r\nvia: https://paste.kodi.tv/kagukejefa.kodi\r\n\r\nThe issues were long fixed upstream: https://android.googlesource.com/platform/external/jhead/+/2a4c12f5e5808e309b9ba04fe8b1539debf466d1\r\n\r\nKodi should remove the copied libexif code and use jhead directly.\r\n\r\nThis fixes: #22377 "
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.95  \n\n**Step-by-Step Explanation:**\n\n1. **Commit Message Analysis:** The message refers to a backport of upstream fixes for ExifParse, indicating it's adopting a known resolution for a bug.\n\n2. **Vulnerability Description Review:** A crash occurs in Kodi due to a heap-buffer-overflow, detected via sanitizers. The issue was fixed upstream, confirming it's a security concern.\n\n3. **Code Diff Analysis:** The change in `CExifParse::ProcessGpsInfo` adds a check to prevent integer overflow by ensuring that `OffsetVal` and `ByteCount` don't exceed `UINT32_MAX`, thus preventing buffer overflow.\n\n4. **Security Assessment:** The fix addresses a buffer overflow vulnerability, a critical security issue that can lead to arbitrary code execution.\n\n**Conclusion:** The patch corrects a memory overflow issue, qualifying it as a security fix with high confidence."
}