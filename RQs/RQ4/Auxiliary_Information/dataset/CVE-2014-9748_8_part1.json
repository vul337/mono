{
  "cve_id": "CVE-2014-9748",
  "cwe_ids": [
    "CWE-362"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "libuv",
  "commit_msg": "win: fix unsavory rwlock fallback implementation\n\nBefore this patch an uv_mutex_t (backed by a critical section) could be\nreleased by a tread different from the thread that acquired it, which is\nnot allowed. This is fixed by using a semaphore instead.\n\nNote that the affected code paths were used on Windows XP and Windows\nServer 2003 only.\n\nFixes: https://github.com/libuv/libuv/issues/515\nPR-URL: https://github.com/libuv/libuv/pull/516\nReviewed-By: Ben Noordhuis <info@bnoordhuis.nl>\nReviewed-By: Saúl Ibarra Corretgé <saghul@gmail.com>",
  "commit_hash": "3eb6764acd2d708f6873c177a77f9bef3b266fa9",
  "git_url": "https://github.com/libuv/libuv/commit/3eb6764acd2d708f6873c177a77f9bef3b266fa9",
  "file_path": "src/win/thread.c",
  "func_name": "uv__rwlock_fallback_init",
  "func_before": "static int uv__rwlock_fallback_init(uv_rwlock_t* rwlock) {\n  int err;\n\n  err = uv_mutex_init(&rwlock->fallback_.read_mutex_);\n  if (err)\n    return err;\n\n  err = uv_mutex_init(&rwlock->fallback_.write_mutex_);\n  if (err) {\n    uv_mutex_destroy(&rwlock->fallback_.read_mutex_);\n    return err;\n  }\n\n  rwlock->fallback_.num_readers_ = 0;\n\n  return 0;\n}",
  "abstract_func_before": "static int uv__rwlock_fallback_init(uv_rwlock_t* VAR_0) {\n  int VAR_1;\n\n  VAR_1 = uv_mutex_init(&VAR_0->fallback_.read_mutex_);\n  if (VAR_1)\n    return VAR_1;\n\n  VAR_1 = uv_mutex_init(&VAR_0->fallback_.write_mutex_);\n  if (VAR_1) {\n    uv_mutex_destroy(&VAR_0->fallback_.read_mutex_);\n    return VAR_1;\n  }\n\n  VAR_0->fallback_.num_readers_ = 0;\n\n  return 0;\n}",
  "func_graph_path_before": "libuv/3eb6764acd2d708f6873c177a77f9bef3b266fa9/thread.c/vul/before/0.json",
  "func": "static int uv__rwlock_fallback_init(uv_rwlock_t* rwlock) {\n  /* Initialize the semaphore that acts as the write lock. */\n  HANDLE handle = CreateSemaphoreW(NULL, 1, 1, NULL);\n  if (handle == NULL)\n    return uv_translate_sys_error(GetLastError());\n  rwlock->fallback_.write_lock_.sem = handle;\n\n  /* Initialize the critical section protecting the reader count. */\n  InitializeCriticalSection(&rwlock->fallback_.read_lock_.cs);\n\n  /* Initialize the reader count. */\n  rwlock->fallback_.num_readers_ = 0;\n\n  return 0;\n}",
  "abstract_func": "static int uv__rwlock_fallback_init(uv_rwlock_t* VAR_0) {\n  /* COMMENT_0 */\n  HANDLE VAR_1 = CreateSemaphoreW(NULL, 1, 1, NULL);\n  if (VAR_1 == NULL)\n    return uv_translate_sys_error(GetLastError());\n  VAR_0->fallback_.write_lock_.sem = VAR_1;\n\n  /* COMMENT_1 */\n  InitializeCriticalSection(&VAR_0->fallback_.read_lock_.cs);\n\n  /* COMMENT_2 */\n  VAR_0->fallback_.num_readers_ = 0;\n\n  return 0;\n}",
  "func_graph_path": "libuv/3eb6764acd2d708f6873c177a77f9bef3b266fa9/thread.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,16 +1,14 @@\n static int uv__rwlock_fallback_init(uv_rwlock_t* rwlock) {\n-  int err;\n+  /* Initialize the semaphore that acts as the write lock. */\n+  HANDLE handle = CreateSemaphoreW(NULL, 1, 1, NULL);\n+  if (handle == NULL)\n+    return uv_translate_sys_error(GetLastError());\n+  rwlock->fallback_.write_lock_.sem = handle;\n \n-  err = uv_mutex_init(&rwlock->fallback_.read_mutex_);\n-  if (err)\n-    return err;\n+  /* Initialize the critical section protecting the reader count. */\n+  InitializeCriticalSection(&rwlock->fallback_.read_lock_.cs);\n \n-  err = uv_mutex_init(&rwlock->fallback_.write_mutex_);\n-  if (err) {\n-    uv_mutex_destroy(&rwlock->fallback_.read_mutex_);\n-    return err;\n-  }\n-\n+  /* Initialize the reader count. */\n   rwlock->fallback_.num_readers_ = 0;\n \n   return 0;",
  "diff_line_info": {
    "deleted_lines": [
      "  int err;",
      "  err = uv_mutex_init(&rwlock->fallback_.read_mutex_);",
      "  if (err)",
      "    return err;",
      "  err = uv_mutex_init(&rwlock->fallback_.write_mutex_);",
      "  if (err) {",
      "    uv_mutex_destroy(&rwlock->fallback_.read_mutex_);",
      "    return err;",
      "  }",
      ""
    ],
    "added_lines": [
      "  /* Initialize the semaphore that acts as the write lock. */",
      "  HANDLE handle = CreateSemaphoreW(NULL, 1, 1, NULL);",
      "  if (handle == NULL)",
      "    return uv_translate_sys_error(GetLastError());",
      "  rwlock->fallback_.write_lock_.sem = handle;",
      "  /* Initialize the critical section protecting the reader count. */",
      "  InitializeCriticalSection(&rwlock->fallback_.read_lock_.cs);",
      "  /* Initialize the reader count. */"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/libuv/libuv/pull/516",
  "description": {
    "pr_info": {
      "title": "win: fix unsavory rwlock fallback implementation",
      "number": 516
    },
    "comment": [
      "Before this patch an uv_mutex_t (backed by a critical section) could be\nreleased by a tread different from the thread that acquired it, which is\nnot allowed. This is fixed by using a semaphore instead.\n\nBUG: https://github.com/libuv/libuv/issues/515\nREF: https://github.com/nodejs/node/pull/2723\n\nR=@bnoordhuis\nR=@saghul\n",
      "LGTM, sans the c++ style comments, and a couple of small questions.\n",
      "Fixed the comment style and the typos.\n\n@saghul, let me know what you want to do with the WaitForSingleObject() failure modes. I think it's fine as it is, all those \"failure\" scenarios are purely hypothetical anyway. My thinking was that I would return a mapped error from every function that actually returns a value, and abort (by means of `uv_fatal_error`) in functions that return void.\n\ncc @bnoordhuis \n",
      "LGTM. Let's leave it as is then.\n"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "The patch addresses a concurrency issue where a mutex could be released by a different thread, which is a security risk. The fix uses a semaphore to correct this, indicating a security vulnerability. \n\n**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.95"
}