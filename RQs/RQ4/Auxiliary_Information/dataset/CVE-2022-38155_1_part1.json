{
  "cve_id": "CVE-2022-38155",
  "cwe_ids": [
    "CWE-770"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
  "cvss_is_v3": true,
  "repo_name": "Samsung/mTower",
  "commit_msg": "Fixed CVE-2022-38155, CVE-2022-40762\n\nSigned-off-by: Taras Drozdovskyi <t.drozdovsky@samsung.com>",
  "commit_hash": "236357f0e756f0fd2120a1a78cf573765471e088",
  "git_url": "https://github.com/Samsung/mTower/commit/236357f0e756f0fd2120a1a78cf573765471e088",
  "file_path": "tee/lib/libutee/tee_user_mem.c",
  "func_name": "tee_user_mem_alloc",
  "func_before": "void *tee_user_mem_alloc(size_t len, uint32_t hint)\n{\n\tuint8_t *p;\n\n\tswitch (hint) {\n\tcase TEE_MALLOC_FILL_ZERO:\n\tcase TEE_USER_MEM_HINT_NO_FILL_ZERO:\n\t\tbreak;\n\tdefault:\n\t\tEMSG(\"Invalid alloc hint [%X]\", (unsigned int)hint);\n\t\treturn NULL;\n\t}\n\n\t//  p = utee_malloc(len);\n\tp = malloc(len);\n\tif (p == NULL)\n\t\treturn NULL;\n\n\tif (hint == TEE_MALLOC_FILL_ZERO)\n\t\tmemset(p, 0, len);\n#if (CFG_TEE_CORE_USER_MEM_DEBUG == 1)\n\tif (hint == (typeof(hint)) TEE_USER_MEM_HINT_NO_FILL_ZERO)\n\t\tmemset(p, 0xBB, len);\n#endif\n\treturn p;\n}",
  "abstract_func_before": "void *tee_user_mem_alloc(size_t VAR_0, uint32_t VAR_1)\n{\n\tuint8_t *VAR_2;\n\n\tswitch (VAR_1) {\n\tcase VAR_3:\n\tcase VAR_4:\n\t\tbreak;\n\tdefault:\n\t\tEMSG(\"Invalid alloc hint [%X]\", (unsigned int)VAR_1);\n\t\treturn NULL;\n\t}\n\n\t/* COMMENT_0 */\n\tVAR_2 = malloc(VAR_0);\n\tif (VAR_2 == NULL)\n\t\treturn NULL;\n\n\tif (VAR_1 == VAR_3)\n\t\tmemset(VAR_2, 0, VAR_0);\n#if (VAR_5 == 1)\n\tif (VAR_1 == (typeof(hint)) VAR_4)\n\t\tmemset(VAR_2, 0xBB, VAR_0);\n#endif\n\treturn VAR_2;\n}",
  "func_graph_path_before": "Samsung/mTower/236357f0e756f0fd2120a1a78cf573765471e088/tee_user_mem.c/vul/before/2.json",
  "func": "void *tee_user_mem_alloc(size_t len, uint32_t hint)\n{\n\tuint8_t *p;\n\tvoid* limit = &__HeapLimit;\n\tvoid* base = &__HeapBase;\n\n\tswitch (hint) {\n\tcase TEE_MALLOC_FILL_ZERO:\n\tcase TEE_USER_MEM_HINT_NO_FILL_ZERO:\n\t\tbreak;\n\tdefault:\n\t\tEMSG(\"Invalid alloc hint [%X]\", (unsigned int)hint);\n\t\treturn NULL;\n\t}\n\t// printf(\"malloc = base = %x\\n\", base );\n\t// printf(\"malloc = (limit - base)/2 = %x\\n\", (limit - base)/2 );\n\tif ((limit - base)/2 < len + 8)\n\t\treturn NULL;\n\t//  p = utee_malloc(len);\n\tp = malloc(len);\n\t// printf(\"malloc 1 = base + ((limit - base)/2) = %x\\n\", base + ((limit - base)/2) );\n\t// printf(\"malloc 2 = p + len = %x\\n\", p + len );\n\tif ( base + ((limit - base)/2) < p + len) {\n\t\tfree(p);\n\t\treturn NULL;\n\t}\n\tif (p == NULL)\n\t\treturn NULL;\n\n\tif (hint == TEE_MALLOC_FILL_ZERO)\n\t\tmemset(p, 0, len);\n#if (CFG_TEE_CORE_USER_MEM_DEBUG == 1)\n\tif (hint == (typeof(hint)) TEE_USER_MEM_HINT_NO_FILL_ZERO)\n\t\tmemset(p, 0xBB, len);\n#endif\n\treturn p;\n}",
  "abstract_func": "void *tee_user_mem_alloc(size_t VAR_0, uint32_t VAR_1)\n{\n\tuint8_t *VAR_2;\n\tvoid* VAR_3 = &VAR_4;\n\tvoid* VAR_5 = &VAR_6;\n\n\tswitch (VAR_1) {\n\tcase VAR_7:\n\tcase VAR_8:\n\t\tbreak;\n\tdefault:\n\t\tEMSG(\"Invalid alloc hint [%X]\", (unsigned int)VAR_1);\n\t\treturn NULL;\n\t}\n\t/* COMMENT_0 */\n\t/* COMMENT_1 */\n\tif ((VAR_3 - VAR_5)/2 < VAR_0 + 8)\n\t\treturn NULL;\n\t/* COMMENT_2 */\n\tVAR_2 = malloc(VAR_0);\n\t/* COMMENT_3 */\n\t/* COMMENT_4 */\n\tif ( VAR_5 + ((VAR_3 - VAR_5)/2) < VAR_2 + VAR_0) {\n\t\tfree(VAR_2);\n\t\treturn NULL;\n\t}\n\tif (VAR_2 == NULL)\n\t\treturn NULL;\n\n\tif (VAR_1 == VAR_7)\n\t\tmemset(VAR_2, 0, VAR_0);\n#if (VAR_9 == 1)\n\tif (VAR_1 == (typeof(hint)) VAR_8)\n\t\tmemset(VAR_2, 0xBB, VAR_0);\n#endif\n\treturn VAR_2;\n}",
  "func_graph_path": "Samsung/mTower/236357f0e756f0fd2120a1a78cf573765471e088/tee_user_mem.c/vul/after/2.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,6 +1,8 @@\n void *tee_user_mem_alloc(size_t len, uint32_t hint)\n {\n \tuint8_t *p;\n+\tvoid* limit = &__HeapLimit;\n+\tvoid* base = &__HeapBase;\n \n \tswitch (hint) {\n \tcase TEE_MALLOC_FILL_ZERO:\n@@ -10,9 +12,18 @@\n \t\tEMSG(\"Invalid alloc hint [%X]\", (unsigned int)hint);\n \t\treturn NULL;\n \t}\n-\n+\t// printf(\"malloc = base = %x\\n\", base );\n+\t// printf(\"malloc = (limit - base)/2 = %x\\n\", (limit - base)/2 );\n+\tif ((limit - base)/2 < len + 8)\n+\t\treturn NULL;\n \t//  p = utee_malloc(len);\n \tp = malloc(len);\n+\t// printf(\"malloc 1 = base + ((limit - base)/2) = %x\\n\", base + ((limit - base)/2) );\n+\t// printf(\"malloc 2 = p + len = %x\\n\", p + len );\n+\tif ( base + ((limit - base)/2) < p + len) {\n+\t\tfree(p);\n+\t\treturn NULL;\n+\t}\n \tif (p == NULL)\n \t\treturn NULL;\n ",
  "diff_line_info": {
    "deleted_lines": [
      ""
    ],
    "added_lines": [
      "\tvoid* limit = &__HeapLimit;",
      "\tvoid* base = &__HeapBase;",
      "\t// printf(\"malloc = base = %x\\n\", base );",
      "\t// printf(\"malloc = (limit - base)/2 = %x\\n\", (limit - base)/2 );",
      "\tif ((limit - base)/2 < len + 8)",
      "\t\treturn NULL;",
      "\t// printf(\"malloc 1 = base + ((limit - base)/2) = %x\\n\", base + ((limit - base)/2) );",
      "\t// printf(\"malloc 2 = p + len = %x\\n\", p + len );",
      "\tif ( base + ((limit - base)/2) < p + len) {",
      "\t\tfree(p);",
      "\t\treturn NULL;",
      "\t}"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/Samsung/mTower/pull/86",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/Samsung/mTower/pull/86: 403 Client Error: Forbidden for url: https://api.github.com/repos/Samsung/mTower/pulls/86",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 1.0"
}