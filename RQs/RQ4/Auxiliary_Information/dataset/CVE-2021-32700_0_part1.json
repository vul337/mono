{
  "cve_id": "CVE-2021-32700",
  "cwe_ids": [
    "CWE-306"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:P/I:P/A:N",
  "cvss_is_v3": false,
  "repo_name": "ballerina-platform/ballerina-lang",
  "commit_msg": "Fix central connection",
  "commit_hash": "4609ffee1744ecd16aac09303b1783bf0a525816",
  "git_url": "https://github.com/ballerina-platform/ballerina-lang/commit/4609ffee1744ecd16aac09303b1783bf0a525816",
  "file_path": "tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/packaging/PackagingTestCase.java",
  "func_name": "testPullCount",
  "func_before": "@Test(description = \"Test pullCount of a package from central\", dependsOnMethods = \"testPull\", enabled = false)\n    public void testPullCount() throws IOException {\n        initializeSsl();\n        String url = RepoUtils.getRemoteRepoURL() + \"/modules/info/\" + orgName + \"/\" + moduleName + \"/*/\";\n        HttpURLConnection conn = createHttpUrlConnection(convertToUrl(url), \"\", 0, \"\", \"\");\n        conn.setInstanceFollowRedirects(false);\n        setRequestMethod(conn, Utils.RequestMethod.GET);\n\n        int statusCode = conn.getResponseCode();\n        if (statusCode == 200) {\n            try (BufferedReader reader = new BufferedReader(new InputStreamReader(conn.getInputStream(),\n                    Charset.defaultCharset()))) {\n                StringBuilder result = new StringBuilder();\n                String line;\n                while ((line = reader.readLine()) != null) {\n                    result.append(line);\n                }\n                Object payload = JSONParser.parse(result.toString());\n                if (payload instanceof MapValue) {\n                    long pullCount = ((MapValue) payload).getIntValue(\"totalPullCount\");\n                    Assert.assertEquals(pullCount, totalPullCount);\n                } else {\n                    Assert.fail(\"error: invalid response received\");\n                }\n            }\n        } else {\n            Assert.fail(\"error: could not connect to remote repository to find the latest version of module\");\n        }\n    }",
  "abstract_func_before": "@Test(VAR_0 = \"Test pullCount of a package from central\", VAR_1 = \"testPull\", VAR_2 = false)\n    public void testPullCount() throws IOException {\n        initializeSsl();\n        String VAR_3 = VAR_4.getRemoteRepoURL() + \"/modules/info/\" + VAR_5 + \"/\" + VAR_6 + \"/*/\";\n        HttpURLConnection VAR_7 = createHttpUrlConnection(convertToUrl(VAR_3), \"\", 0, \"\", \"\");\n        VAR_7.setInstanceFollowRedirects(false);\n        setRequestMethod(VAR_7, VAR_8.RequestMethod.GET);\n\n        int VAR_9 = VAR_7.getResponseCode();\n        if (VAR_9 == 200) {\n            try (BufferedReader VAR_10 = new BufferedReader(new InputStreamReader(VAR_7.getInputStream(),\n                    VAR_11.defaultCharset()))) {\n                StringBuilder VAR_12 = new StringBuilder();\n                String VAR_13;\n                while ((VAR_13 = VAR_10.readLine()) != null) {\n                    VAR_12.append(VAR_13);\n                }\n                Object VAR_14 = VAR_15.parse(VAR_12.toString());\n                if (VAR_14 instanceof MapValue) {\n                    long VAR_16 = ((MapValue) VAR_14).getIntValue(\"totalPullCount\");\n                    VAR_17.assertEquals(VAR_16, VAR_18);\n                } else {\n                    VAR_17.fail(\"error: invalid response received\");\n                }\n            }\n        } else {\n            VAR_17.fail(\"error: could not connect to remote repository to find the latest version of module\");\n        }\n    }",
  "func_graph_path_before": "ballerina-platform/ballerina-lang/4609ffee1744ecd16aac09303b1783bf0a525816/PackagingTestCase.java/vul/before/0.json",
  "func": "@Test(description = \"Test pullCount of a package from central\", dependsOnMethods = \"testPull\", enabled = false)\n    public void testPullCount() throws IOException {\n        String url = RepoUtils.getRemoteRepoURL() + \"/modules/info/\" + orgName + \"/\" + moduleName + \"/*/\";\n        HttpsURLConnection conn = createHttpsUrlConnection(convertToUrl(url), \"\", 0, \"\", \"\");\n        conn.setInstanceFollowRedirects(false);\n        setRequestMethod(conn, Utils.RequestMethod.GET);\n\n        int statusCode = conn.getResponseCode();\n        if (statusCode == 200) {\n            try (BufferedReader reader = new BufferedReader(new InputStreamReader(conn.getInputStream(),\n                    Charset.defaultCharset()))) {\n                StringBuilder result = new StringBuilder();\n                String line;\n                while ((line = reader.readLine()) != null) {\n                    result.append(line);\n                }\n                Object payload = JSONParser.parse(result.toString());\n                if (payload instanceof MapValue) {\n                    long pullCount = ((MapValue) payload).getIntValue(\"totalPullCount\");\n                    Assert.assertEquals(pullCount, totalPullCount);\n                } else {\n                    Assert.fail(\"error: invalid response received\");\n                }\n            }\n        } else {\n            Assert.fail(\"error: could not connect to remote repository to find the latest version of module\");\n        }\n    }",
  "abstract_func": "@Test(VAR_0 = \"Test pullCount of a package from central\", VAR_1 = \"testPull\", VAR_2 = false)\n    public void testPullCount() throws IOException {\n        String VAR_3 = VAR_4.getRemoteRepoURL() + \"/modules/info/\" + VAR_5 + \"/\" + VAR_6 + \"/*/\";\n        HttpsURLConnection VAR_7 = createHttpsUrlConnection(convertToUrl(VAR_3), \"\", 0, \"\", \"\");\n        VAR_7.setInstanceFollowRedirects(false);\n        setRequestMethod(VAR_7, VAR_8.RequestMethod.GET);\n\n        int VAR_9 = VAR_7.getResponseCode();\n        if (VAR_9 == 200) {\n            try (BufferedReader VAR_10 = new BufferedReader(new InputStreamReader(VAR_7.getInputStream(),\n                    VAR_11.defaultCharset()))) {\n                StringBuilder VAR_12 = new StringBuilder();\n                String VAR_13;\n                while ((VAR_13 = VAR_10.readLine()) != null) {\n                    VAR_12.append(VAR_13);\n                }\n                Object VAR_14 = VAR_15.parse(VAR_12.toString());\n                if (VAR_14 instanceof MapValue) {\n                    long VAR_16 = ((MapValue) VAR_14).getIntValue(\"totalPullCount\");\n                    VAR_17.assertEquals(VAR_16, VAR_18);\n                } else {\n                    VAR_17.fail(\"error: invalid response received\");\n                }\n            }\n        } else {\n            VAR_17.fail(\"error: could not connect to remote repository to find the latest version of module\");\n        }\n    }",
  "func_graph_path": "ballerina-platform/ballerina-lang/4609ffee1744ecd16aac09303b1783bf0a525816/PackagingTestCase.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,8 +1,7 @@\n @Test(description = \"Test pullCount of a package from central\", dependsOnMethods = \"testPull\", enabled = false)\n     public void testPullCount() throws IOException {\n-        initializeSsl();\n         String url = RepoUtils.getRemoteRepoURL() + \"/modules/info/\" + orgName + \"/\" + moduleName + \"/*/\";\n-        HttpURLConnection conn = createHttpUrlConnection(convertToUrl(url), \"\", 0, \"\", \"\");\n+        HttpsURLConnection conn = createHttpsUrlConnection(convertToUrl(url), \"\", 0, \"\", \"\");\n         conn.setInstanceFollowRedirects(false);\n         setRequestMethod(conn, Utils.RequestMethod.GET);\n ",
  "diff_line_info": {
    "deleted_lines": [
      "        initializeSsl();",
      "        HttpURLConnection conn = createHttpUrlConnection(convertToUrl(url), \"\", 0, \"\", \"\");"
    ],
    "added_lines": [
      "        HttpsURLConnection conn = createHttpsUrlConnection(convertToUrl(url), \"\", 0, \"\", \"\");"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/29246",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/ballerina-platform/ballerina-lang/pull/29246: 403 Client Error: Forbidden for url: https://api.github.com/repos/ballerina-platform/ballerina-lang/pulls/29246",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.8,
  "Bug Filter Response": "The commit message suggests a general fix, but the code changes from HTTP to HTTPS imply a security improvement. However, the absence of explicit security terms reduces confidence.\n\n**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.8"
}