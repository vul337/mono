{
  "cve_id": "CVE-2021-45809",
  "cwe_ids": [
    "CWE-Other"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:C/I:C/A:C",
  "cvss_is_v3": false,
  "repo_name": "yuezk/GlobalProtect-openconnect",
  "commit_msg": "add configuration file for gpservice",
  "commit_hash": "767286b898f2d1d361c3834de1d4d0b5836ffecd",
  "git_url": "https://github.com/yuezk/GlobalProtect-openconnect/commit/767286b898f2d1d361c3834de1d4d0b5836ffecd",
  "file_path": "GPService/gpservice.cpp",
  "func_name": "GPService::splitCommand",
  "func_before": "QStringList GPService::splitCommand(QString command)\n{\n    QStringList args;\n    QString tmp;\n    int quoteCount = 0;\n    bool inQuote = false;\n\n    // handle quoting. tokens can be surrounded by double quotes\n    // \"hello world\". three consecutive double quotes represent\n    // the quote character itself.\n    for (int i = 0; i < command.size(); ++i) {\n        if (command.at(i) == QLatin1Char('\"')) {\n            ++quoteCount;\n            if (quoteCount == 3) {\n                // third consecutive quote\n                quoteCount = 0;\n                tmp += command.at(i);\n            }\n            continue;\n        }\n        if (quoteCount) {\n            if (quoteCount == 1)\n                inQuote = !inQuote;\n            quoteCount = 0;\n        }\n        if (!inQuote && command.at(i).isSpace()) {\n            if (!tmp.isEmpty()) {\n                args += tmp;\n                tmp.clear();\n            }\n        } else {\n            tmp += command.at(i);\n        }\n    }\n    if (!tmp.isEmpty())\n        args += tmp;\n\n    return args;\n}",
  "abstract_func_before": "QStringList GPService::splitCommand(QString VAR_0)\n{\n    QStringList VAR_1;\n    QString VAR_2;\n    int VAR_3 = 0;\n    bool VAR_4 = false;\n\n    /* COMMENT_0 */\n    /* COMMENT_1 */\n    /* COMMENT_2 */\n    for (int VAR_5 = 0; VAR_5 < VAR_0.size(); ++VAR_5) {\n        if (VAR_0.at(VAR_5) == QLatin1Char('\"')) {\n            ++VAR_3;\n            if (VAR_3 == 3) {\n                /* COMMENT_3 */\n                VAR_3 = 0;\n                VAR_2 += VAR_0.at(VAR_5);\n            }\n            continue;\n        }\n        if (VAR_3) {\n            if (VAR_3 == 1)\n                VAR_4 = !VAR_4;\n            VAR_3 = 0;\n        }\n        if (!VAR_4 && VAR_0.at(VAR_5).isSpace()) {\n            if (!VAR_2.isEmpty()) {\n                VAR_1 += VAR_2;\n                VAR_2.clear();\n            }\n        } else {\n            VAR_2 += VAR_0.at(VAR_5);\n        }\n    }\n    if (!VAR_2.isEmpty())\n        VAR_1 += VAR_2;\n\n    return VAR_1;\n}",
  "func_graph_path_before": "yuezk/GlobalProtect-openconnect/767286b898f2d1d361c3834de1d4d0b5836ffecd/gpservice.cpp/vul/before/0.json",
  "func": "QStringList GPService::splitCommand(const QString &command)\n{\n    QStringList args;\n    QString tmp;\n    int quoteCount = 0;\n    bool inQuote = false;\n\n    // handle quoting. tokens can be surrounded by double quotes\n    // \"hello world\". three consecutive double quotes represent\n    // the quote character itself.\n    for (int i = 0; i < command.size(); ++i) {\n        if (command.at(i) == QLatin1Char('\"')) {\n            ++quoteCount;\n            if (quoteCount == 3) {\n                // third consecutive quote\n                quoteCount = 0;\n                tmp += command.at(i);\n            }\n            continue;\n        }\n        if (quoteCount) {\n            if (quoteCount == 1)\n                inQuote = !inQuote;\n            quoteCount = 0;\n        }\n        if (!inQuote && command.at(i).isSpace()) {\n            if (!tmp.isEmpty()) {\n                args += tmp;\n                tmp.clear();\n            }\n        } else {\n            tmp += command.at(i);\n        }\n    }\n    if (!tmp.isEmpty())\n        args += tmp;\n\n    return args;\n}",
  "abstract_func": "QStringList GPService::splitCommand(const QString &VAR_0)\n{\n    QStringList VAR_1;\n    QString VAR_2;\n    int VAR_3 = 0;\n    bool VAR_4 = false;\n\n    /* COMMENT_0 */\n    /* COMMENT_1 */\n    /* COMMENT_2 */\n    for (int VAR_5 = 0; VAR_5 < VAR_0.size(); ++VAR_5) {\n        if (VAR_0.at(VAR_5) == QLatin1Char('\"')) {\n            ++VAR_3;\n            if (VAR_3 == 3) {\n                /* COMMENT_3 */\n                VAR_3 = 0;\n                VAR_2 += VAR_0.at(VAR_5);\n            }\n            continue;\n        }\n        if (VAR_3) {\n            if (VAR_3 == 1)\n                VAR_4 = !VAR_4;\n            VAR_3 = 0;\n        }\n        if (!VAR_4 && VAR_0.at(VAR_5).isSpace()) {\n            if (!VAR_2.isEmpty()) {\n                VAR_1 += VAR_2;\n                VAR_2.clear();\n            }\n        } else {\n            VAR_2 += VAR_0.at(VAR_5);\n        }\n    }\n    if (!VAR_2.isEmpty())\n        VAR_1 += VAR_2;\n\n    return VAR_1;\n}",
  "func_graph_path": "yuezk/GlobalProtect-openconnect/767286b898f2d1d361c3834de1d4d0b5836ffecd/gpservice.cpp/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,4 +1,4 @@\n-QStringList GPService::splitCommand(QString command)\n+QStringList GPService::splitCommand(const QString &command)\n {\n     QStringList args;\n     QString tmp;",
  "diff_line_info": {
    "deleted_lines": [
      "QStringList GPService::splitCommand(QString command)"
    ],
    "added_lines": [
      "QStringList GPService::splitCommand(const QString &command)"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/yuezk/GlobalProtect-openconnect/pull/149",
  "description": {
    "pr_info": {
      "title": "Prepare release 1.4.3",
      "number": 149
    },
    "comment": [
      "1. Fixed security problem #113.\r\n1. Introduce a more elegant configuration. See https://github.com/yuezk/GlobalProtect-openconnect/wiki/Configuration\r\n1. Restart the `gpservice` after the package upgrade for Archlinux and Fedora.\r\n"
    ]
  },
  "Bug Filter": "Supporting & Non-Core Improvements",
  "Bug Filter Confidence": 0.8,
  "Bug Filter Response": "**Final Classification:** Supporting & Non-Core Improvements; **Confidence:** 0.8"
}