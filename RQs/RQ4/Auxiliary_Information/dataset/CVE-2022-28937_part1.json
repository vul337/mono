{
  "cve_id": "CVE-2022-28937",
  "cwe_ids": [
    "CWE-190"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "FISCO-BCOS",
  "commit_msg": "Fix the problem that malicious nodes set the view to int64_t max and cause the view to overflow when the fastViewChange",
  "commit_hash": "111d939c948cc54e5742ac1d50c24cd0e0cf9ab2",
  "git_url": "https://github.com/FISCO-BCOS/FISCO-BCOS/commit/111d939c948cc54e5742ac1d50c24cd0e0cf9ab2",
  "file_path": "bcos-pbft/bcos-pbft/pbft/engine/PBFTEngine.cpp",
  "func_name": "PBFTEngine::handleMsg",
  "func_before": "void PBFTEngine::handleMsg(std::shared_ptr<PBFTBaseMessageInterface> _msg)\n{\n    RecursiveGuard l(m_mutex);\n    switch (_msg->packetType())\n    {\n    case PacketType::PrePreparePacket:\n    {\n        auto prePrepareMsg = std::dynamic_pointer_cast<PBFTMessageInterface>(_msg);\n        handlePrePrepareMsg(prePrepareMsg, true);\n        break;\n    }\n    case PacketType::PreparePacket:\n    {\n        auto prepareMsg = std::dynamic_pointer_cast<PBFTMessageInterface>(_msg);\n        handlePrepareMsg(prepareMsg);\n        break;\n    }\n    case PacketType::CommitPacket:\n    {\n        auto commitMsg = std::dynamic_pointer_cast<PBFTMessageInterface>(_msg);\n        handleCommitMsg(commitMsg);\n        break;\n    }\n    case PacketType::ViewChangePacket:\n    {\n        auto viewChangeMsg = std::dynamic_pointer_cast<ViewChangeMsgInterface>(_msg);\n        handleViewChangeMsg(viewChangeMsg);\n        break;\n    }\n    case PacketType::NewViewPacket:\n    {\n        auto newViewMsg = std::dynamic_pointer_cast<NewViewMsgInterface>(_msg);\n        handleNewViewMsg(newViewMsg);\n        break;\n    }\n    case PacketType::CheckPoint:\n    {\n        auto checkPointMsg = std::dynamic_pointer_cast<PBFTMessageInterface>(_msg);\n        handleCheckPointMsg(checkPointMsg);\n        break;\n    }\n    case PacketType::RecoverRequest:\n    {\n        auto request = std::dynamic_pointer_cast<PBFTMessageInterface>(_msg);\n        handleRecoverRequest(request);\n        break;\n    }\n    case PacketType::RecoverResponse:\n    {\n        auto recoverResponse = std::dynamic_pointer_cast<PBFTMessageInterface>(_msg);\n        handleRecoverResponse(recoverResponse);\n        break;\n    }\n    default:\n    {\n        PBFT_LOG(WARNING) << LOG_DESC(\"handleMsg: unknown PBFT message\")\n                          << LOG_KV(\"type\", std::to_string(_msg->packetType()))\n                          << LOG_KV(\"genIdx\", _msg->generatedFrom())\n                          << LOG_KV(\"nodesef\", m_config->nodeID()->hex());\n        return;\n    }\n    }\n}",
  "abstract_func_before": "void PBFTEngine::handleMsg(std::shared_ptr<PBFTBaseMessageInterface> VAR_0)\n{\n    RecursiveGuard l(m_mutex);\n    switch (VAR_0->packetType())\n    {\n    case PacketType::PrePreparePacket:\n    {\n        auto VAR_1 = std::VAR_2<PBFTMessageInterface>(VAR_0);\n        handlePrePrepareMsg(VAR_1, true);\n        break;\n    }\n    case PacketType::PreparePacket:\n    {\n        auto VAR_3 = std::VAR_2<PBFTMessageInterface>(VAR_0);\n        handlePrepareMsg(VAR_3);\n        break;\n    }\n    case PacketType::CommitPacket:\n    {\n        auto VAR_4 = std::VAR_2<PBFTMessageInterface>(VAR_0);\n        handleCommitMsg(VAR_4);\n        break;\n    }\n    case PacketType::ViewChangePacket:\n    {\n        auto VAR_5 = std::VAR_2<ViewChangeMsgInterface>(VAR_0);\n        handleViewChangeMsg(VAR_5);\n        break;\n    }\n    case PacketType::NewViewPacket:\n    {\n        auto VAR_6 = std::VAR_2<NewViewMsgInterface>(VAR_0);\n        handleNewViewMsg(VAR_6);\n        break;\n    }\n    case PacketType::CheckPoint:\n    {\n        auto VAR_7 = std::VAR_2<PBFTMessageInterface>(VAR_0);\n        handleCheckPointMsg(VAR_7);\n        break;\n    }\n    case PacketType::RecoverRequest:\n    {\n        auto VAR_8 = std::VAR_2<PBFTMessageInterface>(VAR_0);\n        handleRecoverRequest(VAR_8);\n        break;\n    }\n    case PacketType::RecoverResponse:\n    {\n        auto VAR_9 = std::VAR_2<PBFTMessageInterface>(VAR_0);\n        handleRecoverResponse(VAR_9);\n        break;\n    }\n    default:\n    {\n        PBFT_LOG(VAR_10) << LOG_DESC(\"handleMsg: unknown PBFT message\")\n                          << LOG_KV(\"type\", std::to_string(VAR_0->packetType()))\n                          << LOG_KV(\"genIdx\", VAR_0->generatedFrom())\n                          << LOG_KV(\"nodesef\", VAR_11->nodeID()->hex());\n        return;\n    }\n    }\n}",
  "func_graph_path_before": "FISCO-BCOS/111d939c948cc54e5742ac1d50c24cd0e0cf9ab2/PBFTEngine.cpp/vul/before/0.json",
  "func": "void PBFTEngine::handleMsg(std::shared_ptr<PBFTBaseMessageInterface> _msg)\n{\n    // check the view\n    if (_msg->view() > MaxView)\n    {\n        PBFT_LOG(WARNING) << LOG_DESC(\"handleMsg: reject msg with invalid view\")\n                          << printPBFTMsgInfo(_msg);\n        return;\n    }\n    RecursiveGuard l(m_mutex);\n    switch (_msg->packetType())\n    {\n    case PacketType::PrePreparePacket:\n    {\n        auto prePrepareMsg = std::dynamic_pointer_cast<PBFTMessageInterface>(_msg);\n        handlePrePrepareMsg(prePrepareMsg, true);\n        break;\n    }\n    case PacketType::PreparePacket:\n    {\n        auto prepareMsg = std::dynamic_pointer_cast<PBFTMessageInterface>(_msg);\n        handlePrepareMsg(prepareMsg);\n        break;\n    }\n    case PacketType::CommitPacket:\n    {\n        auto commitMsg = std::dynamic_pointer_cast<PBFTMessageInterface>(_msg);\n        handleCommitMsg(commitMsg);\n        break;\n    }\n    case PacketType::ViewChangePacket:\n    {\n        auto viewChangeMsg = std::dynamic_pointer_cast<ViewChangeMsgInterface>(_msg);\n        handleViewChangeMsg(viewChangeMsg);\n        break;\n    }\n    case PacketType::NewViewPacket:\n    {\n        auto newViewMsg = std::dynamic_pointer_cast<NewViewMsgInterface>(_msg);\n        handleNewViewMsg(newViewMsg);\n        break;\n    }\n    case PacketType::CheckPoint:\n    {\n        auto checkPointMsg = std::dynamic_pointer_cast<PBFTMessageInterface>(_msg);\n        handleCheckPointMsg(checkPointMsg);\n        break;\n    }\n    case PacketType::RecoverRequest:\n    {\n        auto request = std::dynamic_pointer_cast<PBFTMessageInterface>(_msg);\n        handleRecoverRequest(request);\n        break;\n    }\n    case PacketType::RecoverResponse:\n    {\n        auto recoverResponse = std::dynamic_pointer_cast<PBFTMessageInterface>(_msg);\n        handleRecoverResponse(recoverResponse);\n        break;\n    }\n    default:\n    {\n        PBFT_LOG(WARNING) << LOG_DESC(\"handleMsg: unknown PBFT message\")\n                          << LOG_KV(\"type\", std::to_string(_msg->packetType()))\n                          << LOG_KV(\"genIdx\", _msg->generatedFrom())\n                          << LOG_KV(\"nodesef\", m_config->nodeID()->hex());\n        return;\n    }\n    }\n}",
  "abstract_func": "void PBFTEngine::handleMsg(std::shared_ptr<PBFTBaseMessageInterface> VAR_0)\n{\n    /* COMMENT_0 */\n    if (VAR_0->view() > VAR_1)\n    {\n        PBFT_LOG(VAR_2) << LOG_DESC(\"handleMsg: reject msg with invalid view\")\n                          << printPBFTMsgInfo(VAR_0);\n        return;\n    }\n    RecursiveGuard l(m_mutex);\n    switch (VAR_0->packetType())\n    {\n    case PacketType::PrePreparePacket:\n    {\n        auto VAR_3 = std::VAR_4<PBFTMessageInterface>(VAR_0);\n        handlePrePrepareMsg(VAR_3, true);\n        break;\n    }\n    case PacketType::PreparePacket:\n    {\n        auto VAR_5 = std::VAR_4<PBFTMessageInterface>(VAR_0);\n        handlePrepareMsg(VAR_5);\n        break;\n    }\n    case PacketType::CommitPacket:\n    {\n        auto VAR_6 = std::VAR_4<PBFTMessageInterface>(VAR_0);\n        handleCommitMsg(VAR_6);\n        break;\n    }\n    case PacketType::ViewChangePacket:\n    {\n        auto VAR_7 = std::VAR_4<ViewChangeMsgInterface>(VAR_0);\n        handleViewChangeMsg(VAR_7);\n        break;\n    }\n    case PacketType::NewViewPacket:\n    {\n        auto VAR_8 = std::VAR_4<NewViewMsgInterface>(VAR_0);\n        handleNewViewMsg(VAR_8);\n        break;\n    }\n    case PacketType::CheckPoint:\n    {\n        auto VAR_9 = std::VAR_4<PBFTMessageInterface>(VAR_0);\n        handleCheckPointMsg(VAR_9);\n        break;\n    }\n    case PacketType::RecoverRequest:\n    {\n        auto VAR_10 = std::VAR_4<PBFTMessageInterface>(VAR_0);\n        handleRecoverRequest(VAR_10);\n        break;\n    }\n    case PacketType::RecoverResponse:\n    {\n        auto VAR_11 = std::VAR_4<PBFTMessageInterface>(VAR_0);\n        handleRecoverResponse(VAR_11);\n        break;\n    }\n    default:\n    {\n        PBFT_LOG(VAR_2) << LOG_DESC(\"handleMsg: unknown PBFT message\")\n                          << LOG_KV(\"type\", std::to_string(VAR_0->packetType()))\n                          << LOG_KV(\"genIdx\", VAR_0->generatedFrom())\n                          << LOG_KV(\"nodesef\", VAR_12->nodeID()->hex());\n        return;\n    }\n    }\n}",
  "func_graph_path": "FISCO-BCOS/111d939c948cc54e5742ac1d50c24cd0e0cf9ab2/PBFTEngine.cpp/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,5 +1,12 @@\n void PBFTEngine::handleMsg(std::shared_ptr<PBFTBaseMessageInterface> _msg)\n {\n+    // check the view\n+    if (_msg->view() > MaxView)\n+    {\n+        PBFT_LOG(WARNING) << LOG_DESC(\"handleMsg: reject msg with invalid view\")\n+                          << printPBFTMsgInfo(_msg);\n+        return;\n+    }\n     RecursiveGuard l(m_mutex);\n     switch (_msg->packetType())\n     {",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "    // check the view",
      "    if (_msg->view() > MaxView)",
      "    {",
      "        PBFT_LOG(WARNING) << LOG_DESC(\"handleMsg: reject msg with invalid view\")",
      "                          << printPBFTMsgInfo(_msg);",
      "        return;",
      "    }"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/FISCO-BCOS/FISCO-BCOS/pull/2311",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/FISCO-BCOS/FISCO-BCOS/pull/2311: 403 Client Error: Forbidden for url: https://api.github.com/repos/FISCO-BCOS/FISCO-BCOS/pulls/2311",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 1.0"
}