{
  "cve_id": "CVE-2021-33604",
  "cwe_ids": [
    "CWE-172"
  ],
  "cvss_vector": "AV:L/AC:H/Au:N/C:P/I:N/A:N",
  "cvss_is_v3": false,
  "repo_name": "vaadin/flow",
  "commit_msg": "fix: prevent passing bad character to dev-server\n\nThe webpack dev-server does not escape \" character, as it is not valid\nURL. This limitation was not checked when passing request to it via\nDevModeHandlerImpl.",
  "commit_hash": "2a801c42b406a00c44f4a85b4b4e4a4c5bf89adc",
  "git_url": "https://github.com/vaadin/flow/commit/2a801c42b406a00c44f4a85b4b4e4a4c5bf89adc",
  "file_path": "vaadin-dev-server/src/main/java/com/vaadin/base/devserver/DevModeHandlerImpl.java",
  "func_name": "serveDevModeRequest",
  "func_before": "@Override\n    public boolean serveDevModeRequest(HttpServletRequest request,\n            HttpServletResponse response) throws IOException {\n        // Do not serve requests if dev server starting or failed to start.\n        if (isDevServerFailedToStart.get() || !devServerStartFuture.isDone()) {\n            return false;\n        }\n        // Since we have 'publicPath=/VAADIN/' in webpack config,\n        // a valid request for webpack-dev-server should start with '/VAADIN/'\n        String requestFilename = request.getPathInfo();\n\n        if (HandlerHelper.isPathUnsafe(requestFilename)) {\n            getLogger().info(\"Blocked attempt to access file: {}\",\n                    requestFilename);\n            response.setStatus(HttpServletResponse.SC_FORBIDDEN);\n            return true;\n        }\n\n        // Redirect theme source request\n        if (APP_THEME_PATTERN.matcher(requestFilename).find()) {\n            requestFilename = \"/VAADIN/static\" + requestFilename;\n        }\n\n        HttpURLConnection connection = prepareConnection(requestFilename,\n                request.getMethod());\n\n        // Copies all the headers from the original request\n        Enumeration<String> headerNames = request.getHeaderNames();\n        while (headerNames.hasMoreElements()) {\n            String header = headerNames.nextElement();\n            connection.setRequestProperty(header,\n                    // Exclude keep-alive\n                    \"Connect\".equals(header) ? \"close\"\n                            : request.getHeader(header));\n        }\n\n        // Send the request\n        getLogger().debug(\"Requesting resource to webpack {}\",\n                connection.getURL());\n        int responseCode = connection.getResponseCode();\n        if (responseCode == HTTP_NOT_FOUND) {\n            getLogger().debug(\"Resource not served by webpack {}\",\n                    requestFilename);\n            // webpack cannot access the resource, return false so as flow can\n            // handle it\n            return false;\n        }\n        getLogger().debug(\"Served resource by webpack: {} {}\", responseCode,\n                requestFilename);\n\n        // Copies response headers\n        connection.getHeaderFields().forEach((header, values) -> {\n            if (header != null) {\n                response.addHeader(header, values.get(0));\n            }\n        });\n\n        if (responseCode == HTTP_OK) {\n            // Copies response payload\n            writeStream(response.getOutputStream(),\n                    connection.getInputStream());\n        } else if (responseCode < 400) {\n            response.setStatus(responseCode);\n        } else {\n            // Copies response code\n            response.sendError(responseCode);\n        }\n\n        // Close request to avoid issues in CI and Chrome\n        response.getOutputStream().close();\n\n        return true;\n    }",
  "abstract_func_before": "@Override\n    public boolean serveDevModeRequest(HttpServletRequest VAR_0,\n            HttpServletResponse VAR_1) throws IOException {\n        /* COMMENT_0 */\n        if (VAR_2.get() || !VAR_3.isDone()) {\n            return false;\n        }\n        /* COMMENT_1 */\n        /* COMMENT_2 */\n        String VAR_4 = VAR_0.getPathInfo();\n\n        if (VAR_5.isPathUnsafe(VAR_4)) {\n            getLogger().info(\"Blocked attempt to access file: {}\",\n                    VAR_4);\n            VAR_1.setStatus(VAR_6.SC_FORBIDDEN);\n            return true;\n        }\n\n        /* COMMENT_3 */\n        if (VAR_7.matcher(VAR_4).find()) {\n            VAR_4 = \"/VAADIN/static\" + VAR_4;\n        }\n\n        HttpURLConnection VAR_8 = prepareConnection(VAR_4,\n                VAR_0.getMethod());\n\n        /* COMMENT_4 */\n        Enumeration<String> VAR_9 = VAR_0.getHeaderNames();\n        while (VAR_9.hasMoreElements()) {\n            String VAR_10 = VAR_9.nextElement();\n            VAR_8.setRequestProperty(VAR_10,\n                    /* COMMENT_5 */\n                    \"Connect\".equals(VAR_10) ? \"close\"\n                            : VAR_0.getHeader(VAR_10));\n        }\n\n        /* COMMENT_6 */\n        getLogger().debug(\"Requesting resource to webpack {}\",\n                VAR_8.getURL());\n        int VAR_11 = VAR_8.getResponseCode();\n        if (VAR_11 == VAR_12) {\n            getLogger().debug(\"Resource not served by webpack {}\",\n                    VAR_4);\n            /* COMMENT_7 */\n            /* COMMENT_8 */\n            return false;\n        }\n        getLogger().debug(\"Served resource by webpack: {} {}\", VAR_11,\n                VAR_4);\n\n        /* COMMENT_9 */\n        VAR_8.getHeaderFields().forEach((VAR_10, VAR_13) -> {\n            if (VAR_10 != null) {\n                VAR_1.addHeader(VAR_10, VAR_13.get(0));\n            }\n        });\n\n        if (VAR_11 == VAR_14) {\n            /* COMMENT_10 */\n            writeStream(VAR_1.getOutputStream(),\n                    VAR_8.getInputStream());\n        } else if (VAR_11 < 400) {\n            VAR_1.setStatus(VAR_11);\n        } else {\n            /* COMMENT_11 */\n            VAR_1.sendError(VAR_11);\n        }\n\n        /* COMMENT_12 */\n        VAR_1.getOutputStream().close();\n\n        return true;\n    }",
  "func_graph_path_before": "vaadin/flow/2a801c42b406a00c44f4a85b4b4e4a4c5bf89adc/DevModeHandlerImpl.java/vul/before/1.json",
  "func": "@Override\n    public boolean serveDevModeRequest(HttpServletRequest request,\n            HttpServletResponse response) throws IOException {\n        // Do not serve requests if dev server starting or failed to start.\n        if (isDevServerFailedToStart.get() || !devServerStartFuture.isDone()) {\n            return false;\n        }\n        // Since we have 'publicPath=/VAADIN/' in webpack config,\n        // a valid request for webpack-dev-server should start with '/VAADIN/'\n        String requestFilename = request.getPathInfo();\n\n        if (HandlerHelper.isPathUnsafe(requestFilename)\n                || WEBPACK_ILLEGAL_CHAR_PATTERN.matcher(requestFilename)\n                        .find()) {\n            getLogger().info(\"Blocked attempt to access file: {}\",\n                    requestFilename);\n            response.setStatus(HttpServletResponse.SC_FORBIDDEN);\n            return true;\n        }\n\n        // Redirect theme source request\n        if (APP_THEME_PATTERN.matcher(requestFilename).find()) {\n            requestFilename = \"/VAADIN/static\" + requestFilename;\n        }\n\n        HttpURLConnection connection = prepareConnection(requestFilename,\n                request.getMethod());\n\n        // Copies all the headers from the original request\n        Enumeration<String> headerNames = request.getHeaderNames();\n        while (headerNames.hasMoreElements()) {\n            String header = headerNames.nextElement();\n            connection.setRequestProperty(header,\n                    // Exclude keep-alive\n                    \"Connect\".equals(header) ? \"close\"\n                            : request.getHeader(header));\n        }\n\n        // Send the request\n        getLogger().debug(\"Requesting resource to webpack {}\",\n                connection.getURL());\n        int responseCode = connection.getResponseCode();\n        if (responseCode == HTTP_NOT_FOUND) {\n            getLogger().debug(\"Resource not served by webpack {}\",\n                    requestFilename);\n            // webpack cannot access the resource, return false so as flow can\n            // handle it\n            return false;\n        }\n        getLogger().debug(\"Served resource by webpack: {} {}\", responseCode,\n                requestFilename);\n\n        // Copies response headers\n        connection.getHeaderFields().forEach((header, values) -> {\n            if (header != null) {\n                response.addHeader(header, values.get(0));\n            }\n        });\n\n        if (responseCode == HTTP_OK) {\n            // Copies response payload\n            writeStream(response.getOutputStream(),\n                    connection.getInputStream());\n        } else if (responseCode < 400) {\n            response.setStatus(responseCode);\n        } else {\n            // Copies response code\n            response.sendError(responseCode);\n        }\n\n        // Close request to avoid issues in CI and Chrome\n        response.getOutputStream().close();\n\n        return true;\n    }",
  "abstract_func": "@Override\n    public boolean serveDevModeRequest(HttpServletRequest VAR_0,\n            HttpServletResponse VAR_1) throws IOException {\n        /* COMMENT_0 */\n        if (VAR_2.get() || !VAR_3.isDone()) {\n            return false;\n        }\n        /* COMMENT_1 */\n        /* COMMENT_2 */\n        String VAR_4 = VAR_0.getPathInfo();\n\n        if (VAR_5.isPathUnsafe(VAR_4)\n                || VAR_6.matcher(VAR_4)\n                        .find()) {\n            getLogger().info(\"Blocked attempt to access file: {}\",\n                    VAR_4);\n            VAR_1.setStatus(VAR_7.SC_FORBIDDEN);\n            return true;\n        }\n\n        /* COMMENT_3 */\n        if (VAR_8.matcher(VAR_4).find()) {\n            VAR_4 = \"/VAADIN/static\" + VAR_4;\n        }\n\n        HttpURLConnection VAR_9 = prepareConnection(VAR_4,\n                VAR_0.getMethod());\n\n        /* COMMENT_4 */\n        Enumeration<String> VAR_10 = VAR_0.getHeaderNames();\n        while (VAR_10.hasMoreElements()) {\n            String VAR_11 = VAR_10.nextElement();\n            VAR_9.setRequestProperty(VAR_11,\n                    /* COMMENT_5 */\n                    \"Connect\".equals(VAR_11) ? \"close\"\n                            : VAR_0.getHeader(VAR_11));\n        }\n\n        /* COMMENT_6 */\n        getLogger().debug(\"Requesting resource to webpack {}\",\n                VAR_9.getURL());\n        int VAR_12 = VAR_9.getResponseCode();\n        if (VAR_12 == VAR_13) {\n            getLogger().debug(\"Resource not served by webpack {}\",\n                    VAR_4);\n            /* COMMENT_7 */\n            /* COMMENT_8 */\n            return false;\n        }\n        getLogger().debug(\"Served resource by webpack: {} {}\", VAR_12,\n                VAR_4);\n\n        /* COMMENT_9 */\n        VAR_9.getHeaderFields().forEach((VAR_11, VAR_14) -> {\n            if (VAR_11 != null) {\n                VAR_1.addHeader(VAR_11, VAR_14.get(0));\n            }\n        });\n\n        if (VAR_12 == VAR_15) {\n            /* COMMENT_10 */\n            writeStream(VAR_1.getOutputStream(),\n                    VAR_9.getInputStream());\n        } else if (VAR_12 < 400) {\n            VAR_1.setStatus(VAR_12);\n        } else {\n            /* COMMENT_11 */\n            VAR_1.sendError(VAR_12);\n        }\n\n        /* COMMENT_12 */\n        VAR_1.getOutputStream().close();\n\n        return true;\n    }",
  "func_graph_path": "vaadin/flow/2a801c42b406a00c44f4a85b4b4e4a4c5bf89adc/DevModeHandlerImpl.java/vul/after/1.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -9,7 +9,9 @@\n         // a valid request for webpack-dev-server should start with '/VAADIN/'\n         String requestFilename = request.getPathInfo();\n \n-        if (HandlerHelper.isPathUnsafe(requestFilename)) {\n+        if (HandlerHelper.isPathUnsafe(requestFilename)\n+                || WEBPACK_ILLEGAL_CHAR_PATTERN.matcher(requestFilename)\n+                        .find()) {\n             getLogger().info(\"Blocked attempt to access file: {}\",\n                     requestFilename);\n             response.setStatus(HttpServletResponse.SC_FORBIDDEN);",
  "diff_line_info": {
    "deleted_lines": [
      "        if (HandlerHelper.isPathUnsafe(requestFilename)) {"
    ],
    "added_lines": [
      "        if (HandlerHelper.isPathUnsafe(requestFilename)",
      "                || WEBPACK_ILLEGAL_CHAR_PATTERN.matcher(requestFilename)",
      "                        .find()) {"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/vaadin/flow/pull/11099",
  "description": {
    "pr_info": {
      "title": "fix: prevent passing bad character to dev-server",
      "number": 11099
    },
    "comment": [
      "The webpack dev-server does not escape \" character, as it is not valid\r\nURL. This limitation was not checked when passing request to it via\r\nDevModeHandlerImpl.\r\n",
      "Formatter run and hopefully ccdm tests pass this time too",
      "SonarQube analysis reported 7 issues\n\n1. ![MAJOR][MAJOR] [HandlerHelper.java#L408](https://github.com/vaadin/flow/blob/eb24d8c7938c71961b6bd7210a78937a674168d4/flow-server/src/main/java/com/vaadin/flow/server/HandlerHelper.java#L408): Define and throw a dedicated exception instead of using a generic one. [![rule](https://sonarsource.github.io/sonar-github/rule.png)](https://sonar.projects.vaadin.com/coding_rules#rule_key=squid%3AS00112)\n1. ![MAJOR][MAJOR] [DevModeHandlerImpl.java#L1](https://github.com/vaadin/flow/blob/eb24d8c7938c71961b6bd7210a78937a674168d4/vaadin-dev-server/src/main/java/com/vaadin/base/devserver/DevModeHandlerImpl.java#L1): Class com.vaadin.base.devserver.DevModeHandlerImpl defines non-transient non-serializable instance field devServerStartFuture [![rule](https://sonarsource.github.io/sonar-github/rule.png)](https://sonar.projects.vaadin.com/coding_rules#rule_key=findbugs%3ASE_BAD_FIELD)\n1. ![MAJOR][MAJOR] [DevModeHandlerImpl.java#L157](https://github.com/vaadin/flow/blob/eb24d8c7938c71961b6bd7210a78937a674168d4/vaadin-dev-server/src/main/java/com/vaadin/base/devserver/DevModeHandlerImpl.java#L157): Make \"devServerStartFuture\" transient or serializable. [![rule](https://sonarsource.github.io/sonar-github/rule.png)](https://sonar.projects.vaadin.com/coding_rules#rule_key=squid%3AS1948)\n1. ![MAJOR][MAJOR] [DevModeHandlerImpl.java#L249](https://github.com/vaadin/flow/blob/eb24d8c7938c71961b6bd7210a78937a674168d4/vaadin-dev-server/src/main/java/com/vaadin/base/devserver/DevModeHandlerImpl.java#L249): Null passed for non-null parameter of java.util.concurrent.CompletableFuture.getNow(Object) in com.vaadin.base.devserver.DevModeHandlerImpl.handleRequest(VaadinSession, VaadinRequest, VaadinResponse) [![rule](https://sonarsource.github.io/sonar-github/rule.png)](https://sonar.projects.vaadin.com/coding_rules#rule_key=findbugs%3ANP_NONNULL_PARAM_VIOLATION)\n1. ![MAJOR][MAJOR] [DevModeHandlerImpl.java#L581](https://github.com/vaadin/flow/blob/eb24d8c7938c71961b6bd7210a78937a674168d4/vaadin-dev-server/src/main/java/com/vaadin/base/devserver/DevModeHandlerImpl.java#L581): Remove this unused private \"checkPort\" method. [![rule](https://sonarsource.github.io/sonar-github/rule.png)](https://sonar.projects.vaadin.com/coding_rules#rule_key=squid%3AUnusedPrivateMethod)\n1. ![MAJOR][MAJOR] [DevModeHandlerImpl.java#L718](https://github.com/vaadin/flow/blob/eb24d8c7938c71961b6bd7210a78937a674168d4/vaadin-dev-server/src/main/java/com/vaadin/base/devserver/DevModeHandlerImpl.java#L718): Either re-interrupt this method or rethrow the \"InterruptedException\". [![rule](https://sonarsource.github.io/sonar-github/rule.png)](https://sonar.projects.vaadin.com/coding_rules#rule_key=squid%3AS2142)\n1. ![INFO][INFO] [HandlerHelper.java#L420](https://github.com/vaadin/flow/blob/eb24d8c7938c71961b6bd7210a78937a674168d4/flow-server/src/main/java/com/vaadin/flow/server/HandlerHelper.java#L420): Public static com.vaadin.flow.server.HandlerHelper.getPublicResources() may expose internal representation by returning HandlerHelper.publicResources [![rule](https://sonarsource.github.io/sonar-github/rule.png)](https://sonar.projects.vaadin.com/coding_rules#rule_key=findbugs%3AMS_EXPOSE_REP)\n\n[INFO]: https://sonarsource.github.io/sonar-github/severity-info.png 'Severity: INFO'\n[MAJOR]: https://sonarsource.github.io/sonar-github/severity-major.png 'Severity: MAJOR'",
      "Hi @pleku , this commit cannot be picked to 7.0 by this bot, can you take a look and pick it manually?\n Error Message: Error: Command failed: git cherry-pick f18ea9a4e4f9d2347d24e7e98fdefe84a3cfbed1\nerror: could not apply f18ea9a4e4... fix: prevent passing bad character to dev-server (#11099)\nhint: after resolving the conflicts, mark the corrected paths\nhint: with 'git add <paths>' or 'git rm <paths>'\nhint: and commit the result with 'git commit'\n",
      "Hi @pleku , this commit cannot be picked to 6.0 by this bot, can you take a look and pick it manually?\n Error Message: Error: Command failed: git cherry-pick f18ea9a4e4f9d2347d24e7e98fdefe84a3cfbed1\nerror: could not apply f18ea9a4e4... fix: prevent passing bad character to dev-server (#11099)\nhint: after resolving the conflicts, mark the corrected paths\nhint: with 'git add <paths>' or 'git rm <paths>'\nhint: and commit the result with 'git commit'\n",
      "Hi @pleku , this commit cannot be picked to 2.7 by this bot, can you take a look and pick it manually?\n Error Message: Error: Command failed: git cherry-pick f18ea9a4e4f9d2347d24e7e98fdefe84a3cfbed1\nerror: could not apply f18ea9a4e4... fix: prevent passing bad character to dev-server (#11099)\nhint: after resolving the conflicts, mark the corrected paths\nhint: with 'git add <paths>' or 'git rm <paths>'\nhint: and commit the result with 'git commit'\n",
      "Hi @pleku , this commit cannot be picked to 2.6 by this bot, can you take a look and pick it manually?\n Error Message: Error: Command failed: git cherry-pick f18ea9a4e4f9d2347d24e7e98fdefe84a3cfbed1\nerror: could not apply f18ea9a4e4... fix: prevent passing bad character to dev-server (#11099)\nhint: after resolving the conflicts, mark the corrected paths\nhint: with 'git add <paths>' or 'git rm <paths>'\nhint: and commit the result with 'git commit'\n",
      "This ticket/PR has been released with platform 21.0.0.alpha3. For prerelease versions, it will be included in its final version."
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 0.9\n\nStep-by-Step Explanation:\n\n1. **Input Analysis:**\n   - The commit message and vulnerability description both address a situation where double quotes aren't escaped, leading to potential issues with the dev-server's URL handling.\n   - The code diff introduces a check for illegal characters using `WEBPACK_ILLEGAL_CHAR_PATTERN`, specifically targeting such unsafe characters.\n\n2. **Consistency Check:**\n   - The commit message and code diff are aligned. Both focus on preventing the passing of unsafe characters to the dev-server.\n\n3. **Purpose Evaluation:**\n   - The change modifies core logic by adding a security check, which is intended to prevent improper URL handling. This addresses an exploited weakness, indicating a security concern.\n\n4. **Security Vulnerability Assessment:**\n   - The patch directly addresses an unescaped character issue, which could lead to security risks like URL injection or similar attacks. The addition of the regex pattern to block such characters suggests it's a security fix aimed at mitigating an exploit.\n\n5. **Confidence Scoring:**\n   - The classification is based on clear code modifications that target a security issue without any conflicting information. The presence of known risky behavior (unescaped quotes) supports the security fix categorization. \n\nThus, the confidence is high because the code change is explicitly aimed at fixing a security vulnerability related to URL character validation."
}