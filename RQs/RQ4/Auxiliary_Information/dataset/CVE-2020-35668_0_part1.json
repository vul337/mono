{
  "cve_id": "CVE-2020-35668",
  "cwe_ids": [
    "CWE-476"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "RedisGraph",
  "commit_msg": "Error on alias references in parameters",
  "commit_hash": "5dba254abe97c1bae905a99e63b21a58d3cb4b08",
  "git_url": "https://github.com/RedisGraph/RedisGraph/commit/5dba254abe97c1bae905a99e63b21a58d3cb4b08",
  "file_path": "src/arithmetic/arithmetic_expression_construct.c",
  "func_name": "_AR_EXP_FromIdentifier",
  "func_before": "static AR_ExpNode *_AR_EXP_FromIdentifier(const cypher_astnode_t *expr) {\n\t// check if the identifier is a named path identifier\n\tAST *ast = QueryCtx_GetAST();\n\tAnnotationCtx *named_paths_ctx =\n\t\tAST_AnnotationCtxCollection_GetNamedPathsCtx(ast->anot_ctx_collection);\n\n\tconst cypher_astnode_t *named_path_annotation =\n\t\tcypher_astnode_get_annotation(named_paths_ctx, expr);\n\n\t// if the identifier is a named path identifier,\n\t// evaluate the path expression accordingly\n\tif(named_path_annotation) return _AR_EXP_FromASTNode(named_path_annotation);\n\t// else, evalute the identifier\n\treturn _AR_EXP_FromIdentifierExpression(expr);\n}",
  "abstract_func_before": "static AR_ExpNode *_AR_EXP_FromIdentifier(const cypher_astnode_t *VAR_0) {\n\t/* COMMENT_0 */\n\tAST *VAR_1 = QueryCtx_GetAST();\n\tAnnotationCtx *VAR_2 =\n\t\tAST_AnnotationCtxCollection_GetNamedPathsCtx(VAR_1->anot_ctx_collection);\n\n\tconst cypher_astnode_t *VAR_3 =\n\t\tcypher_astnode_get_annotation(VAR_2, VAR_0);\n\n\t/* COMMENT_1 */\n\t/* COMMENT_2 */\n\tif(VAR_3) return _AR_EXP_FromASTNode(VAR_3);\n\t/* COMMENT_3 */\n\treturn _AR_EXP_FromIdentifierExpression(VAR_0);\n}",
  "func_graph_path_before": "RedisGraph/5dba254abe97c1bae905a99e63b21a58d3cb4b08/arithmetic_expression_construct.c/vul/before/0.json",
  "func": "static AR_ExpNode *_AR_EXP_FromIdentifier(const cypher_astnode_t *expr) {\n\tAST *ast = QueryCtx_GetAST();\n\tif(ast == NULL) {\n\t\t// Attempted to access the AST before it has been constructed.\n\t\tErrorCtx_SetError(\"Attempted to access variable before it has been defined\");\n\t\treturn AR_EXP_NewConstOperandNode(SI_NullVal());\n\t}\n\n\t// check if the identifier is a named path identifier\n\tAnnotationCtx *named_paths_ctx =\n\t\tAST_AnnotationCtxCollection_GetNamedPathsCtx(ast->anot_ctx_collection);\n\n\tconst cypher_astnode_t *named_path_annotation =\n\t\tcypher_astnode_get_annotation(named_paths_ctx, expr);\n\n\t// if the identifier is a named path identifier,\n\t// evaluate the path expression accordingly\n\tif(named_path_annotation) return _AR_EXP_FromASTNode(named_path_annotation);\n\t// else, evalute the identifier\n\treturn _AR_EXP_FromIdentifierExpression(expr);\n}",
  "abstract_func": "static AR_ExpNode *_AR_EXP_FromIdentifier(const cypher_astnode_t *VAR_0) {\n\tAST *VAR_1 = QueryCtx_GetAST();\n\tif(VAR_1 == NULL) {\n\t\t/* COMMENT_0 */\n\t\tErrorCtx_SetError(\"Attempted to access variable before it has been defined\");\n\t\treturn AR_EXP_NewConstOperandNode(SI_NullVal());\n\t}\n\n\t/* COMMENT_1 */\n\tAnnotationCtx *VAR_2 =\n\t\tAST_AnnotationCtxCollection_GetNamedPathsCtx(VAR_1->anot_ctx_collection);\n\n\tconst cypher_astnode_t *VAR_3 =\n\t\tcypher_astnode_get_annotation(VAR_2, VAR_0);\n\n\t/* COMMENT_2 */\n\t/* COMMENT_3 */\n\tif(VAR_3) return _AR_EXP_FromASTNode(VAR_3);\n\t/* COMMENT_4 */\n\treturn _AR_EXP_FromIdentifierExpression(VAR_0);\n}",
  "func_graph_path": "RedisGraph/5dba254abe97c1bae905a99e63b21a58d3cb4b08/arithmetic_expression_construct.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,6 +1,12 @@\n static AR_ExpNode *_AR_EXP_FromIdentifier(const cypher_astnode_t *expr) {\n+\tAST *ast = QueryCtx_GetAST();\n+\tif(ast == NULL) {\n+\t\t// Attempted to access the AST before it has been constructed.\n+\t\tErrorCtx_SetError(\"Attempted to access variable before it has been defined\");\n+\t\treturn AR_EXP_NewConstOperandNode(SI_NullVal());\n+\t}\n+\n \t// check if the identifier is a named path identifier\n-\tAST *ast = QueryCtx_GetAST();\n \tAnnotationCtx *named_paths_ctx =\n \t\tAST_AnnotationCtxCollection_GetNamedPathsCtx(ast->anot_ctx_collection);\n ",
  "diff_line_info": {
    "deleted_lines": [
      "\tAST *ast = QueryCtx_GetAST();"
    ],
    "added_lines": [
      "\tAST *ast = QueryCtx_GetAST();",
      "\tif(ast == NULL) {",
      "\t\t// Attempted to access the AST before it has been constructed.",
      "\t\tErrorCtx_SetError(\"Attempted to access variable before it has been defined\");",
      "\t\treturn AR_EXP_NewConstOperandNode(SI_NullVal());",
      "\t}",
      ""
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/RedisGraph/RedisGraph/pull/1503",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/RedisGraph/RedisGraph/pull/1503: 403 Client Error: Forbidden for url: https://api.github.com/repos/RedisGraph/RedisGraph/pulls/1503",
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.8,
  "Bug Filter Response": "The patch addresses a bug that causes a compile-time error when accessing uninitialized AST nodes. It adds a check to handle this case properly, preventing runtime issues. Since the issue is related to an error state rather than a security vulnerability, it falls under defect remediation.\n\n**Final Classification:** Defect Remediation & Feature Upgrades; **Confidence:** 0.8\n\nThe confidence is high because the change clearly fixes a bug causing errors, albeit without explicit security implications."
}