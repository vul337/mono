{
  "cve_id": "CVE-2020-22597",
  "cwe_ids": [
    "CWE-Other"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
  "cvss_is_v3": true,
  "repo_name": "jerryscript-project/jerryscript",
  "commit_msg": "Fix Array.slice when using fast arrays\n\nWhen a fast array was used during the Array.slice call and\nthe input array's properties were removed the property\nlist was used incorrectly.\n\nFixes: #3637\n\nJerryScript-DCO-1.0-Signed-off-by: Peter Gal pgal.u-szeged@partner.samsung.com",
  "commit_hash": "092be292185dc026bf819cb7a878ee3adb1913f3",
  "git_url": "https://github.com/jerryscript-project/jerryscript/commit/092be292185dc026bf819cb7a878ee3adb1913f3",
  "file_path": "jerry-core/ecma/builtin-objects/ecma-builtin-array-prototype.c",
  "func_name": "ecma_builtin_array_prototype_object_slice",
  "func_before": "static ecma_value_t\necma_builtin_array_prototype_object_slice (ecma_value_t arg1, /**< start */\n                                           ecma_value_t arg2, /**< end */\n                                           ecma_object_t *obj_p, /**< array object */\n                                           uint32_t len) /**< array object's length */\n{\n  uint32_t start = 0, end = len;\n\n  /* 5. 6.*/\n  if (ECMA_IS_VALUE_ERROR (ecma_builtin_helper_array_index_normalize (arg1,\n                                                                      len,\n                                                                      &start)))\n  {\n    return ECMA_VALUE_ERROR;\n  }\n\n  /* 7. */\n  if (ecma_is_value_undefined (arg2))\n  {\n    end = len;\n  }\n  else\n  {\n    /* 7. part 2, 8.*/\n    if (ECMA_IS_VALUE_ERROR (ecma_builtin_helper_array_index_normalize (arg2,\n                                                                        len,\n                                                                        &end)))\n    {\n      return ECMA_VALUE_ERROR;\n    }\n  }\n\n  JERRY_ASSERT (start <= len && end <= len);\n\n  bool use_fast_path = ecma_op_object_is_fast_array (obj_p);\n  uint32_t copied_length = (end > start) ? end - start : 0;\n#if ENABLED (JERRY_ES2015)\n  ecma_value_t new_array = ecma_op_array_species_create (obj_p, copied_length);\n\n  if (ECMA_IS_VALUE_ERROR (new_array))\n  {\n    return new_array;\n  }\n  use_fast_path &= ecma_op_object_is_fast_array (ecma_get_object_from_value (new_array));\n#else /* !ENABLED (JERRY_ES2015) */\n  ecma_value_t new_array = ecma_op_create_array_object (NULL, 0, false);\n  JERRY_ASSERT (!ECMA_IS_VALUE_ERROR (new_array));\n#endif /* ENABLED (JERRY_ES2015) */\n\n  ecma_object_t *new_array_p = ecma_get_object_from_value (new_array);\n\n  /* 9. */\n  uint32_t n = 0;\n\n  if (use_fast_path && copied_length > 0)\n  {\n    ecma_extended_object_t *ext_from_obj_p = (ecma_extended_object_t *) obj_p;\n\n    if (ext_from_obj_p->u.array.u.hole_count < ECMA_FAST_ARRAY_HOLE_ONE)\n    {\n      ecma_extended_object_t *ext_to_obj_p = (ecma_extended_object_t *) new_array_p;\n\n#if ENABLED (JERRY_ES2015)\n      uint32_t target_length = ext_to_obj_p->u.array.length;\n      ecma_value_t *to_buffer_p;\n      if (copied_length == target_length)\n      {\n        to_buffer_p = ECMA_GET_NON_NULL_POINTER (ecma_value_t, new_array_p->u1.property_list_cp);\n      }\n      else if (copied_length > target_length)\n      {\n        to_buffer_p = ecma_fast_array_extend (new_array_p, copied_length);\n      }\n      else\n      {\n        ecma_delete_fast_array_properties (new_array_p, copied_length);\n        to_buffer_p = ECMA_GET_NON_NULL_POINTER (ecma_value_t, new_array_p->u1.property_list_cp);\n      }\n#else /* !ENABLED (JERRY_ES2015) */\n      ecma_value_t *to_buffer_p = ecma_fast_array_extend (new_array_p, copied_length);\n#endif /* ENABLED (JERRY_ES2015) */\n\n      ecma_value_t *from_buffer_p = ECMA_GET_NON_NULL_POINTER (ecma_value_t, obj_p->u1.property_list_cp);\n\n      for (uint32_t k = start; k < end; k++, n++)\n      {\n#if ENABLED (JERRY_ES2015)\n        ecma_free_value_if_not_object (to_buffer_p[n]);\n#endif /* ENABLED (JERRY_ES2015) */\n        to_buffer_p[n] = ecma_copy_value_if_not_object (from_buffer_p[k]);\n      }\n\n      ext_to_obj_p->u.array.u.hole_count &= ECMA_FAST_ARRAY_HOLE_ONE - 1;\n\n      return new_array;\n    }\n  }\n\n  /* 10. */\n  for (uint32_t k = start; k < end; k++, n++)\n  {\n    /* 10.c */\n    ecma_value_t get_value = ecma_op_object_find_by_uint32_index (obj_p, k);\n\n    if (ECMA_IS_VALUE_ERROR (get_value))\n    {\n      ecma_deref_object (new_array_p);\n      return get_value;\n    }\n\n    if (ecma_is_value_found (get_value))\n    {\n      /* 10.c.ii */\n      ecma_value_t put_comp = ecma_builtin_helper_def_prop_by_index (new_array_p,\n                                                                     n,\n                                                                     get_value,\n                                                                     ECMA_PROPERTY_CONFIGURABLE_ENUMERABLE_WRITABLE);\n      ecma_free_value (get_value);\n\n#if ENABLED (JERRY_ES2015)\n      if (ECMA_IS_VALUE_ERROR (put_comp))\n      {\n        ecma_deref_object (new_array_p);\n        return put_comp;\n      }\n#else /* !ENABLED (JERRY_ES2015) */\n      JERRY_ASSERT (ecma_is_value_true (put_comp));\n#endif /* ENABLED (JERRY_ES2015) */\n    }\n  }\n\n#if ENABLED (JERRY_ES2015)\n  ecma_value_t set_length_value = ecma_builtin_array_prototype_helper_set_length (new_array_p, ((ecma_number_t) n));\n\n  if (ECMA_IS_VALUE_ERROR (set_length_value))\n  {\n    ecma_deref_object (new_array_p);\n    return set_length_value;\n  }\n#endif /* ENABLED (JERRY_ES2015) */\n\n  return new_array;\n}",
  "abstract_func_before": "static ecma_value_t\necma_builtin_array_prototype_object_slice (ecma_value_t VAR_0, /* COMMENT_0 */\n                                           ecma_value_t VAR_1, /* COMMENT_1 */\n                                           ecma_object_t *VAR_2, /* COMMENT_2 */\n                                           uint32_t VAR_3) /* COMMENT_3 */\n{\n  uint32_t VAR_4 = 0, VAR_5 = VAR_3;\n\n  /* COMMENT_4 */\n  if (ECMA_IS_VALUE_ERROR (ecma_builtin_helper_array_index_normalize (VAR_0,\n                                                                      VAR_3,\n                                                                      &VAR_4)))\n  {\n    return VAR_6;\n  }\n\n  /* COMMENT_5 */\n  if (ecma_is_value_undefined (VAR_1))\n  {\n    VAR_5 = VAR_3;\n  }\n  else\n  {\n    /* COMMENT_6 */\n    if (ECMA_IS_VALUE_ERROR (ecma_builtin_helper_array_index_normalize (VAR_1,\n                                                                        VAR_3,\n                                                                        &VAR_5)))\n    {\n      return VAR_6;\n    }\n  }\n\n  JERRY_ASSERT (VAR_4 <= VAR_3 && VAR_5 <= VAR_3);\n\n  bool VAR_7 = ecma_op_object_is_fast_array (VAR_2);\n  uint32_t VAR_8 = (VAR_5 > VAR_4) ? VAR_5 - VAR_4 : 0;\n#if ENABLED (VAR_9)\n  ecma_value_t VAR_10 = ecma_op_array_species_create (VAR_2, VAR_8);\n\n  if (ECMA_IS_VALUE_ERROR (VAR_10))\n  {\n    return VAR_10;\n  }\n  VAR_7 &= ecma_op_object_is_fast_array (ecma_get_object_from_value (VAR_10));\n#else /* COMMENT_7 */\n  ecma_value_t VAR_10 = ecma_op_create_array_object (NULL, 0, false);\n  JERRY_ASSERT (!ECMA_IS_VALUE_ERROR (VAR_10));\n#endif /* COMMENT_8 */\n\n  ecma_object_t *VAR_11 = ecma_get_object_from_value (VAR_10);\n\n  /* COMMENT_9 */\n  uint32_t VAR_12 = 0;\n\n  if (VAR_7 && VAR_8 > 0)\n  {\n    ecma_extended_object_t *VAR_13 = (ecma_extended_object_t *) VAR_2;\n\n    if (VAR_13->u.array.u.hole_count < VAR_14)\n    {\n      ecma_extended_object_t *VAR_15 = (ecma_extended_object_t *) VAR_11;\n\n#if ENABLED (VAR_9)\n      uint32_t VAR_16 = VAR_15->u.array.length;\n      ecma_value_t *VAR_17;\n      if (VAR_8 == VAR_16)\n      {\n        VAR_17 = ECMA_GET_NON_NULL_POINTER (ecma_value_t, VAR_11->u1.property_list_cp);\n      }\n      else if (VAR_8 > VAR_16)\n      {\n        VAR_17 = ecma_fast_array_extend (VAR_11, VAR_8);\n      }\n      else\n      {\n        ecma_delete_fast_array_properties (VAR_11, VAR_8);\n        VAR_17 = ECMA_GET_NON_NULL_POINTER (ecma_value_t, VAR_11->u1.property_list_cp);\n      }\n#else /* COMMENT_7 */\n      ecma_value_t *VAR_17 = ecma_fast_array_extend (VAR_11, VAR_8);\n#endif /* COMMENT_8 */\n\n      ecma_value_t *VAR_18 = ECMA_GET_NON_NULL_POINTER (ecma_value_t, VAR_2->u1.property_list_cp);\n\n      for (uint32_t VAR_19 = VAR_4; VAR_19 < VAR_5; VAR_19++, VAR_12++)\n      {\n#if ENABLED (VAR_9)\n        ecma_free_value_if_not_object (VAR_17[VAR_12]);\n#endif /* COMMENT_8 */\n        VAR_17[VAR_12] = ecma_copy_value_if_not_object (VAR_18[VAR_19]);\n      }\n\n      VAR_15->u.array.u.hole_count &= VAR_14 - 1;\n\n      return VAR_10;\n    }\n  }\n\n  /* COMMENT_10 */\n  for (uint32_t VAR_19 = VAR_4; VAR_19 < VAR_5; VAR_19++, VAR_12++)\n  {\n    /* COMMENT_11 */\n    ecma_value_t VAR_20 = ecma_op_object_find_by_uint32_index (VAR_2, VAR_19);\n\n    if (ECMA_IS_VALUE_ERROR (VAR_20))\n    {\n      ecma_deref_object (VAR_11);\n      return VAR_20;\n    }\n\n    if (ecma_is_value_found (VAR_20))\n    {\n      /* COMMENT_12 */\n      ecma_value_t VAR_21 = ecma_builtin_helper_def_prop_by_index (VAR_11,\n                                                                     VAR_12,\n                                                                     VAR_20,\n                                                                     VAR_22);\n      ecma_free_value (VAR_20);\n\n#if ENABLED (VAR_9)\n      if (ECMA_IS_VALUE_ERROR (VAR_21))\n      {\n        ecma_deref_object (VAR_11);\n        return VAR_21;\n      }\n#else /* COMMENT_7 */\n      JERRY_ASSERT (ecma_is_value_true (VAR_21));\n#endif /* COMMENT_8 */\n    }\n  }\n\n#if ENABLED (VAR_9)\n  ecma_value_t VAR_23 = ecma_builtin_array_prototype_helper_set_length (VAR_11, ((ecma_number_t) VAR_12));\n\n  if (ECMA_IS_VALUE_ERROR (VAR_23))\n  {\n    ecma_deref_object (VAR_11);\n    return VAR_23;\n  }\n#endif /* COMMENT_8 */\n\n  return VAR_10;\n}",
  "func_graph_path_before": "jerryscript-project/jerryscript/092be292185dc026bf819cb7a878ee3adb1913f3/ecma-builtin-array-prototype.c/vul/before/0.json",
  "func": "static ecma_value_t\necma_builtin_array_prototype_object_slice (ecma_value_t arg1, /**< start */\n                                           ecma_value_t arg2, /**< end */\n                                           ecma_object_t *obj_p, /**< array object */\n                                           uint32_t len) /**< array object's length */\n{\n  uint32_t start = 0, end = len;\n\n  /* 5. 6.*/\n  if (ECMA_IS_VALUE_ERROR (ecma_builtin_helper_array_index_normalize (arg1,\n                                                                      len,\n                                                                      &start)))\n  {\n    return ECMA_VALUE_ERROR;\n  }\n\n  /* 7. */\n  if (ecma_is_value_undefined (arg2))\n  {\n    end = len;\n  }\n  else\n  {\n    /* 7. part 2, 8.*/\n    if (ECMA_IS_VALUE_ERROR (ecma_builtin_helper_array_index_normalize (arg2,\n                                                                        len,\n                                                                        &end)))\n    {\n      return ECMA_VALUE_ERROR;\n    }\n  }\n\n  JERRY_ASSERT (start <= len && end <= len);\n\n  bool use_fast_path = ecma_op_object_is_fast_array (obj_p);\n  uint32_t copied_length = (end > start) ? end - start : 0;\n#if ENABLED (JERRY_ES2015)\n  ecma_value_t new_array = ecma_op_array_species_create (obj_p, copied_length);\n\n  if (ECMA_IS_VALUE_ERROR (new_array))\n  {\n    return new_array;\n  }\n  use_fast_path &= ecma_op_object_is_fast_array (ecma_get_object_from_value (new_array));\n#else /* !ENABLED (JERRY_ES2015) */\n  ecma_value_t new_array = ecma_op_create_array_object (NULL, 0, false);\n  JERRY_ASSERT (!ECMA_IS_VALUE_ERROR (new_array));\n#endif /* ENABLED (JERRY_ES2015) */\n\n  ecma_object_t *new_array_p = ecma_get_object_from_value (new_array);\n\n  /* 9. */\n  uint32_t n = 0;\n\n  if (use_fast_path && copied_length > 0)\n  {\n    ecma_extended_object_t *ext_from_obj_p = (ecma_extended_object_t *) obj_p;\n\n    if (ext_from_obj_p->u.array.u.hole_count < ECMA_FAST_ARRAY_HOLE_ONE)\n    {\n      if (JERRY_UNLIKELY (obj_p->u1.property_list_cp == JMEM_CP_NULL))\n      {\n        /**\n         * Very unlikely case: the buffer copied from is a fast buffer and the property list was deleted.\n         * There is no need to do any copy.\n         */\n        return new_array;\n      }\n\n      ecma_extended_object_t *ext_to_obj_p = (ecma_extended_object_t *) new_array_p;\n\n#if ENABLED (JERRY_ES2015)\n      uint32_t target_length = ext_to_obj_p->u.array.length;\n      ecma_value_t *to_buffer_p;\n      if (copied_length == target_length)\n      {\n        to_buffer_p = ECMA_GET_NON_NULL_POINTER (ecma_value_t, new_array_p->u1.property_list_cp);\n      }\n      else if (copied_length > target_length)\n      {\n        to_buffer_p = ecma_fast_array_extend (new_array_p, copied_length);\n      }\n      else\n      {\n        ecma_delete_fast_array_properties (new_array_p, copied_length);\n        to_buffer_p = ECMA_GET_NON_NULL_POINTER (ecma_value_t, new_array_p->u1.property_list_cp);\n      }\n#else /* !ENABLED (JERRY_ES2015) */\n      ecma_value_t *to_buffer_p = ecma_fast_array_extend (new_array_p, copied_length);\n#endif /* ENABLED (JERRY_ES2015) */\n\n      ecma_value_t *from_buffer_p = ECMA_GET_NON_NULL_POINTER (ecma_value_t, obj_p->u1.property_list_cp);\n\n      for (uint32_t k = start; k < end; k++, n++)\n      {\n#if ENABLED (JERRY_ES2015)\n        ecma_free_value_if_not_object (to_buffer_p[n]);\n#endif /* ENABLED (JERRY_ES2015) */\n        to_buffer_p[n] = ecma_copy_value_if_not_object (from_buffer_p[k]);\n      }\n\n      ext_to_obj_p->u.array.u.hole_count &= ECMA_FAST_ARRAY_HOLE_ONE - 1;\n\n      return new_array;\n    }\n  }\n\n  /* 10. */\n  for (uint32_t k = start; k < end; k++, n++)\n  {\n    /* 10.c */\n    ecma_value_t get_value = ecma_op_object_find_by_uint32_index (obj_p, k);\n\n    if (ECMA_IS_VALUE_ERROR (get_value))\n    {\n      ecma_deref_object (new_array_p);\n      return get_value;\n    }\n\n    if (ecma_is_value_found (get_value))\n    {\n      /* 10.c.ii */\n      ecma_value_t put_comp = ecma_builtin_helper_def_prop_by_index (new_array_p,\n                                                                     n,\n                                                                     get_value,\n                                                                     ECMA_PROPERTY_CONFIGURABLE_ENUMERABLE_WRITABLE);\n      ecma_free_value (get_value);\n\n#if ENABLED (JERRY_ES2015)\n      if (ECMA_IS_VALUE_ERROR (put_comp))\n      {\n        ecma_deref_object (new_array_p);\n        return put_comp;\n      }\n#else /* !ENABLED (JERRY_ES2015) */\n      JERRY_ASSERT (ecma_is_value_true (put_comp));\n#endif /* ENABLED (JERRY_ES2015) */\n    }\n  }\n\n#if ENABLED (JERRY_ES2015)\n  ecma_value_t set_length_value = ecma_builtin_array_prototype_helper_set_length (new_array_p, ((ecma_number_t) n));\n\n  if (ECMA_IS_VALUE_ERROR (set_length_value))\n  {\n    ecma_deref_object (new_array_p);\n    return set_length_value;\n  }\n#endif /* ENABLED (JERRY_ES2015) */\n\n  return new_array;\n}",
  "abstract_func": "static ecma_value_t\necma_builtin_array_prototype_object_slice (ecma_value_t VAR_0, /* COMMENT_0 */\n                                           ecma_value_t VAR_1, /* COMMENT_1 */\n                                           ecma_object_t *VAR_2, /* COMMENT_2 */\n                                           uint32_t VAR_3) /* COMMENT_3 */\n{\n  uint32_t VAR_4 = 0, VAR_5 = VAR_3;\n\n  /* COMMENT_4 */\n  if (ECMA_IS_VALUE_ERROR (ecma_builtin_helper_array_index_normalize (VAR_0,\n                                                                      VAR_3,\n                                                                      &VAR_4)))\n  {\n    return VAR_6;\n  }\n\n  /* COMMENT_5 */\n  if (ecma_is_value_undefined (VAR_1))\n  {\n    VAR_5 = VAR_3;\n  }\n  else\n  {\n    /* COMMENT_6 */\n    if (ECMA_IS_VALUE_ERROR (ecma_builtin_helper_array_index_normalize (VAR_1,\n                                                                        VAR_3,\n                                                                        &VAR_5)))\n    {\n      return VAR_6;\n    }\n  }\n\n  JERRY_ASSERT (VAR_4 <= VAR_3 && VAR_5 <= VAR_3);\n\n  bool VAR_7 = ecma_op_object_is_fast_array (VAR_2);\n  uint32_t VAR_8 = (VAR_5 > VAR_4) ? VAR_5 - VAR_4 : 0;\n#if ENABLED (VAR_9)\n  ecma_value_t VAR_10 = ecma_op_array_species_create (VAR_2, VAR_8);\n\n  if (ECMA_IS_VALUE_ERROR (VAR_10))\n  {\n    return VAR_10;\n  }\n  VAR_7 &= ecma_op_object_is_fast_array (ecma_get_object_from_value (VAR_10));\n#else /* COMMENT_7 */\n  ecma_value_t VAR_10 = ecma_op_create_array_object (NULL, 0, false);\n  JERRY_ASSERT (!ECMA_IS_VALUE_ERROR (VAR_10));\n#endif /* COMMENT_8 */\n\n  ecma_object_t *VAR_11 = ecma_get_object_from_value (VAR_10);\n\n  /* COMMENT_9 */\n  uint32_t VAR_12 = 0;\n\n  if (VAR_7 && VAR_8 > 0)\n  {\n    ecma_extended_object_t *VAR_13 = (ecma_extended_object_t *) VAR_2;\n\n    if (VAR_13->u.array.u.hole_count < VAR_14)\n    {\n      if (JERRY_UNLIKELY (VAR_2->u1.property_list_cp == VAR_15))\n      {\n        /* COMMENT_10 */\n                                                                                                         \n                                           \n           \n        return VAR_10;\n      }\n\n      ecma_extended_object_t *VAR_16 = (ecma_extended_object_t *) VAR_11;\n\n#if ENABLED (VAR_9)\n      uint32_t VAR_17 = VAR_16->u.array.length;\n      ecma_value_t *VAR_18;\n      if (VAR_8 == VAR_17)\n      {\n        VAR_18 = ECMA_GET_NON_NULL_POINTER (ecma_value_t, VAR_11->u1.property_list_cp);\n      }\n      else if (VAR_8 > VAR_17)\n      {\n        VAR_18 = ecma_fast_array_extend (VAR_11, VAR_8);\n      }\n      else\n      {\n        ecma_delete_fast_array_properties (VAR_11, VAR_8);\n        VAR_18 = ECMA_GET_NON_NULL_POINTER (ecma_value_t, VAR_11->u1.property_list_cp);\n      }\n#else /* COMMENT_7 */\n      ecma_value_t *VAR_18 = ecma_fast_array_extend (VAR_11, VAR_8);\n#endif /* COMMENT_8 */\n\n      ecma_value_t *VAR_19 = ECMA_GET_NON_NULL_POINTER (ecma_value_t, VAR_2->u1.property_list_cp);\n\n      for (uint32_t VAR_20 = VAR_4; VAR_20 < VAR_5; VAR_20++, VAR_12++)\n      {\n#if ENABLED (VAR_9)\n        ecma_free_value_if_not_object (VAR_18[VAR_12]);\n#endif /* COMMENT_8 */\n        VAR_18[VAR_12] = ecma_copy_value_if_not_object (VAR_19[VAR_20]);\n      }\n\n      VAR_16->u.array.u.hole_count &= VAR_14 - 1;\n\n      return VAR_10;\n    }\n  }\n\n  /* COMMENT_14 */\n  for (uint32_t VAR_20 = VAR_4; VAR_20 < VAR_5; VAR_20++, VAR_12++)\n  {\n    /* COMMENT_15 */\n    ecma_value_t VAR_21 = ecma_op_object_find_by_uint32_index (VAR_2, VAR_20);\n\n    if (ECMA_IS_VALUE_ERROR (VAR_21))\n    {\n      ecma_deref_object (VAR_11);\n      return VAR_21;\n    }\n\n    if (ecma_is_value_found (VAR_21))\n    {\n      /* COMMENT_16 */\n      ecma_value_t VAR_22 = ecma_builtin_helper_def_prop_by_index (VAR_11,\n                                                                     VAR_12,\n                                                                     VAR_21,\n                                                                     VAR_23);\n      ecma_free_value (VAR_21);\n\n#if ENABLED (VAR_9)\n      if (ECMA_IS_VALUE_ERROR (VAR_22))\n      {\n        ecma_deref_object (VAR_11);\n        return VAR_22;\n      }\n#else /* COMMENT_7 */\n      JERRY_ASSERT (ecma_is_value_true (VAR_22));\n#endif /* COMMENT_8 */\n    }\n  }\n\n#if ENABLED (VAR_9)\n  ecma_value_t VAR_24 = ecma_builtin_array_prototype_helper_set_length (VAR_11, ((ecma_number_t) VAR_12));\n\n  if (ECMA_IS_VALUE_ERROR (VAR_24))\n  {\n    ecma_deref_object (VAR_11);\n    return VAR_24;\n  }\n#endif /* COMMENT_8 */\n\n  return VAR_10;\n}",
  "func_graph_path": "jerryscript-project/jerryscript/092be292185dc026bf819cb7a878ee3adb1913f3/ecma-builtin-array-prototype.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -58,6 +58,15 @@\n \n     if (ext_from_obj_p->u.array.u.hole_count < ECMA_FAST_ARRAY_HOLE_ONE)\n     {\n+      if (JERRY_UNLIKELY (obj_p->u1.property_list_cp == JMEM_CP_NULL))\n+      {\n+        /**\n+         * Very unlikely case: the buffer copied from is a fast buffer and the property list was deleted.\n+         * There is no need to do any copy.\n+         */\n+        return new_array;\n+      }\n+\n       ecma_extended_object_t *ext_to_obj_p = (ecma_extended_object_t *) new_array_p;\n \n #if ENABLED (JERRY_ES2015)",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "      if (JERRY_UNLIKELY (obj_p->u1.property_list_cp == JMEM_CP_NULL))",
      "      {",
      "        /**",
      "         * Very unlikely case: the buffer copied from is a fast buffer and the property list was deleted.",
      "         * There is no need to do any copy.",
      "         */",
      "        return new_array;",
      "      }",
      ""
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/jerryscript-project/jerryscript/pull/3649",
  "description": {
    "pr_info": {
      "title": "Fix Array.slice when using fast arrays",
      "number": 3649
    },
    "comment": [
      "When a fast array was used during the Array.slice call and\r\nthe input array's properties were removed the property\r\nlist was used incorrectly.\r\n\r\nFixes: #3637\r\n",
      "@rerobika I've updated the PR"
    ]
  },
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "Final Classification: Defect Remediation & Feature Upgrades; Confidence: 0.9\n\n**Final Output:**\n\n**Final Classification:** Defect Remediation & Feature Upgrades; **Confidence:** 0.9"
}