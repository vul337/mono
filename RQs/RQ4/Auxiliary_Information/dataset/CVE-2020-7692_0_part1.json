{
  "cve_id": "CVE-2020-7692",
  "cwe_ids": [
    "CWE-863"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:P/A:N",
  "cvss_is_v3": false,
  "repo_name": "googleapis/google-oauth-java-client",
  "commit_msg": "feat: add PKCE support to AuthorizationCodeFlow (#470)\n\n* Initial test code for a PKCE enabled Authorization Code Flow\r\n\r\n* WIP: work on README.md\r\n\r\n* Script to initialize keycloak by adding client via REST API.\r\n\r\n* Improve keycloak init script and some code cleanup. Still WIP.\r\n\r\n* WIP: work on README.md\r\n\r\n* Working PKCE AuthorizationCodeFlow. Some cleanup of test classes.\r\n\r\n* Add scopes back to the AuthorizationCodeRequestUrl creation.\r\n\r\n* Simplify code by moving PKCE entirely into the AuthorizationCodeFlow class. Add documentation.\r\n\r\n* Remove wildcard imports as that seems to be the way to do things here.\r\n\r\n* Add @since annotation in JavaDoc to the PKCE parameters of the autorization url class.\r\n\r\n* Add PKCE unit test, documentation and minor cleanup of dependencies for code sample.\r\n\r\n* Add PKCE unit test, documentation and minor cleanup of dependencies for code sample.\r\n\r\n* Annotate PKCE with Beta annotation.\r\n\r\n* Responding to code review comments\r\n\r\n* Responding to more PR comments\r\n\r\n* Improve Keycloak PKCE sample documentation\r\n\r\n* Add license header with copyright to new files. Improve documentation.",
  "commit_hash": "13433cd7dd06267fc261f0b1d4764f8e3432c824",
  "git_url": "https://github.com/googleapis/google-oauth-java-client/commit/13433cd7dd06267fc261f0b1d4764f8e3432c824",
  "file_path": "google-oauth-client/src/main/java/com/google/api/client/auth/oauth2/AuthorizationCodeFlow.java",
  "func_name": "newTokenRequest",
  "func_before": "public AuthorizationCodeTokenRequest newTokenRequest(String authorizationCode) {\n    return new AuthorizationCodeTokenRequest(transport, jsonFactory,\n        new GenericUrl(tokenServerEncodedUrl), authorizationCode).setClientAuthentication(\n        clientAuthentication).setRequestInitializer(requestInitializer).setScopes(scopes);\n  }",
  "abstract_func_before": "public AuthorizationCodeTokenRequest newTokenRequest(String VAR_0) {\n    return new AuthorizationCodeTokenRequest(VAR_1, VAR_2,\n        new GenericUrl(VAR_3), VAR_0).setClientAuthentication(\n        VAR_4).setRequestInitializer(VAR_5).setScopes(VAR_6);\n  }",
  "func_graph_path_before": "googleapis/google-oauth-java-client/13433cd7dd06267fc261f0b1d4764f8e3432c824/AuthorizationCodeFlow.java/vul/before/1.json",
  "func": "public AuthorizationCodeTokenRequest newTokenRequest(String authorizationCode) {\n    HttpExecuteInterceptor pkceClientAuthenticationWrapper = new HttpExecuteInterceptor() {\n      @Override\n      public void intercept(HttpRequest request) throws IOException {\n        clientAuthentication.intercept(request);\n        if (pkce != null) {\n          Map<String, Object> data = Data.mapOf(UrlEncodedContent.getContent(request).getData());\n          data.put(\"code_verifier\", pkce.getVerifier());\n        }\n      }\n    };\n\n    return new AuthorizationCodeTokenRequest(transport, jsonFactory,\n        new GenericUrl(tokenServerEncodedUrl), authorizationCode).setClientAuthentication(\n        pkceClientAuthenticationWrapper).setRequestInitializer(requestInitializer).setScopes(scopes);\n  }",
  "abstract_func": "public AuthorizationCodeTokenRequest newTokenRequest(String VAR_0) {\n    HttpExecuteInterceptor VAR_1 = new HttpExecuteInterceptor() {\n      @Override\n      public void intercept(HttpRequest VAR_2) throws IOException {\n        VAR_3.intercept(VAR_2);\n        if (VAR_4 != null) {\n          Map<String, Object> VAR_5 = VAR_6.mapOf(VAR_7.getContent(VAR_2).getData());\n          VAR_5.put(\"code_verifier\", VAR_4.getVerifier());\n        }\n      }\n    };\n\n    return new AuthorizationCodeTokenRequest(VAR_8, VAR_9,\n        new GenericUrl(VAR_10), VAR_0).setClientAuthentication(\n        VAR_1).setRequestInitializer(VAR_11).setScopes(VAR_12);\n  }",
  "func_graph_path": "googleapis/google-oauth-java-client/13433cd7dd06267fc261f0b1d4764f8e3432c824/AuthorizationCodeFlow.java/vul/after/1.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,5 +1,16 @@\n public AuthorizationCodeTokenRequest newTokenRequest(String authorizationCode) {\n+    HttpExecuteInterceptor pkceClientAuthenticationWrapper = new HttpExecuteInterceptor() {\n+      @Override\n+      public void intercept(HttpRequest request) throws IOException {\n+        clientAuthentication.intercept(request);\n+        if (pkce != null) {\n+          Map<String, Object> data = Data.mapOf(UrlEncodedContent.getContent(request).getData());\n+          data.put(\"code_verifier\", pkce.getVerifier());\n+        }\n+      }\n+    };\n+\n     return new AuthorizationCodeTokenRequest(transport, jsonFactory,\n         new GenericUrl(tokenServerEncodedUrl), authorizationCode).setClientAuthentication(\n-        clientAuthentication).setRequestInitializer(requestInitializer).setScopes(scopes);\n+        pkceClientAuthenticationWrapper).setRequestInitializer(requestInitializer).setScopes(scopes);\n   }",
  "diff_line_info": {
    "deleted_lines": [
      "        clientAuthentication).setRequestInitializer(requestInitializer).setScopes(scopes);"
    ],
    "added_lines": [
      "    HttpExecuteInterceptor pkceClientAuthenticationWrapper = new HttpExecuteInterceptor() {",
      "      @Override",
      "      public void intercept(HttpRequest request) throws IOException {",
      "        clientAuthentication.intercept(request);",
      "        if (pkce != null) {",
      "          Map<String, Object> data = Data.mapOf(UrlEncodedContent.getContent(request).getData());",
      "          data.put(\"code_verifier\", pkce.getVerifier());",
      "        }",
      "      }",
      "    };",
      "",
      "        pkceClientAuthenticationWrapper).setRequestInitializer(requestInitializer).setScopes(scopes);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/googleapis/google-oauth-java-client/pull/470",
  "description": {
    "pr_info": {
      "title": "feat: add PKCE support to AuthorizationCodeFlow",
      "number": 470
    },
    "comment": [
      "feat: Add PKCE support to the AuthorizationCodeFlow\r\n\r\nAccording to the OAuth 2.0 for Native Apps RFC, public native clients MUST implement PKCE (https://tools.ietf.org/html/rfc8252#section-6). It is therefor important to add this mechanism to the google-oauth-java-client library. \r\n\r\n- [✓] Make sure to open an issue as a [bug/issue](https://github.com/googleapis/google-oauth-java-client/issues/new/choose) before writing your code!  That way we can discuss the change, evaluate designs, and agree on the general idea\r\n- [✓] Ensure the tests and linter pass\r\n- [✓] Code coverage does not decrease (if any source code was changed)\r\n- [✓] Appropriate docs were updated (if necessary)\r\n\r\nFixes #469 ☕️",
      "@chingor13 I think I've responded to all your comments and resolved them.\r\n\r\nThank you again so much for taking the time to review this and thanks for your excellent comments. Please let me know if anything else is needed. Should I update the versions.txt file to bump the version or is that just handled by you when you release a new version?",
      "@chingor13 what are the next steps here? I believe I've addressed everything you and @elharo have pointed out. The only still outstanding question is whether we can include the PKCE sampe project because it requires the user to run Keycloak in a docker container. I can remove it, but as I said, compared to the other example which requires a user to register with dailymotion.com I would argue that the PKCE sample is more self contained that that.\r\n\r\nBut mainly I'm eager to get this merged and into a new release so I don't have to create my own custom patch version of the library for us to use ;-)",
      "> Sorry for the delay in reviewing again. Keycloak looks fine to me. The only change we need to make is to ensure the source files have license headers. You can duplicate the other source files for examples.\r\n\r\nNo worries. Sorry for being so pushy ;)\r\n\r\nI've resolved the issue with the license header and added some documentation. Please advise if anything else is needed from me for next steps.\r\n",
      "@chingor13 just another friendly nudge to get this merged :)",
      "Thanks @chingor13 \r\n\r\nJust two questions:\r\n1) When would you expect a new version to be released?\r\n2) You commented on the PR that this should be a bump on the minor version since new API is being introduced. Do you keep track of that somewhere (that the next release should be a minor release, not a patch release)?"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "The commit introduces PKCE support, a security feature required for OAuth 2.0, which prevents certain attacks by adding a code_verifier. \n\n**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 1.0"
}