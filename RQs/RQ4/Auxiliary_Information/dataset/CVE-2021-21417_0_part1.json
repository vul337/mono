{
  "cve_id": "CVE-2021-21417",
  "cwe_ids": [
    "CWE-416"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "FluidSynth/fluidsynth",
  "commit_msg": "Invalid generator were not removed from list\n\nfluid_list_remove() should receive the beginning of a list, so it can adjust the predecessor of the element to be removed. Otherwise the element would remain in the list, which in this case led to a use-after-free afterwards.",
  "commit_hash": "67596a87731dc593551975ca0268a438ab7410a2",
  "git_url": "https://github.com/FluidSynth/fluidsynth/commit/67596a87731dc593551975ca0268a438ab7410a2",
  "file_path": "src/sfloader/fluid_sffile.c",
  "func_name": "load_pgen",
  "func_before": "static int load_pgen(SFData *sf, int size)\n{\n    fluid_list_t *p, *p2, *p3, *dup, **hz = NULL;\n    SFZone *z;\n    SFGen *g;\n    SFGenAmount genval;\n    unsigned short genid;\n    int level, skip, drop, gzone, discarded;\n\n    p = sf->preset;\n\n    while(p)\n    {\n        /* traverse through all presets */\n        gzone = FALSE;\n        discarded = FALSE;\n        p2 = ((SFPreset *)(p->data))->zone;\n\n        if(p2)\n        {\n            hz = &p2;\n        }\n\n        while(p2)\n        {\n            /* traverse preset's zones */\n            level = 0;\n            z = (SFZone *)(p2->data);\n            p3 = z->gen;\n\n            while(p3)\n            {\n                /* load zone's generators */\n                dup = NULL;\n                skip = FALSE;\n                drop = FALSE;\n\n                if((size -= SF_GEN_SIZE) < 0)\n                {\n                    FLUID_LOG(FLUID_ERR, \"Preset generator chunk size mismatch\");\n                    return FALSE;\n                }\n\n                READW(sf, genid);\n\n                if(genid == Gen_KeyRange)\n                {\n                    /* nothing precedes */\n                    if(level == 0)\n                    {\n                        level = 1;\n                        READB(sf, genval.range.lo);\n                        READB(sf, genval.range.hi);\n                    }\n                    else\n                    {\n                        skip = TRUE;\n                    }\n                }\n                else if(genid == Gen_VelRange)\n                {\n                    /* only KeyRange precedes */\n                    if(level <= 1)\n                    {\n                        level = 2;\n                        READB(sf, genval.range.lo);\n                        READB(sf, genval.range.hi);\n                    }\n                    else\n                    {\n                        skip = TRUE;\n                    }\n                }\n                else if(genid == Gen_Instrument)\n                {\n                    /* inst is last gen */\n                    level = 3;\n                    READW(sf, genval.uword);\n                    ((SFZone *)(p2->data))->instsamp = FLUID_INT_TO_POINTER(genval.uword + 1);\n                    break; /* break out of generator loop */\n                }\n                else\n                {\n                    level = 2;\n\n                    if(valid_preset_genid(genid))\n                    {\n                        /* generator valid? */\n                        READW(sf, genval.sword);\n                        dup = find_gen_by_id(genid, z->gen);\n                    }\n                    else\n                    {\n                        skip = TRUE;\n                    }\n                }\n\n                if(!skip)\n                {\n                    if(!dup)\n                    {\n                        /* if gen ! dup alloc new */\n                        if((g = FLUID_NEW(SFGen)) == NULL)\n                        {\n                            FLUID_LOG(FLUID_ERR, \"Out of memory\");\n                            return FALSE;\n                        }\n\n                        p3->data = g;\n                        g->id = genid;\n                    }\n                    else\n                    {\n                        g = (SFGen *)(dup->data); /* ptr to orig gen */\n                        drop = TRUE;\n                    }\n\n                    g->amount = genval;\n                }\n                else\n                {\n                    /* Skip this generator */\n                    discarded = TRUE;\n                    drop = TRUE;\n                    FSKIPW(sf);\n                }\n\n                if(!drop)\n                {\n                    p3 = fluid_list_next(p3);    /* next gen */\n                }\n                else\n                {\n                    SLADVREM(z->gen, p3);    /* drop place holder */\n                }\n\n            } /* generator loop */\n\n            if(level == 3)\n            {\n                SLADVREM(z->gen, p3);    /* zone has inst? */\n            }\n            else\n            {\n                /* congratulations its a global zone */\n                if(!gzone)\n                {\n                    /* Prior global zones? */\n                    gzone = TRUE;\n\n                    /* if global zone is not 1st zone, relocate */\n                    if(*hz != p2)\n                    {\n                        void *save = p2->data;\n                        FLUID_LOG(FLUID_WARN, \"Preset '%s': Global zone is not first zone\",\n                                  ((SFPreset *)(p->data))->name);\n                        SLADVREM(*hz, p2);\n                        *hz = fluid_list_prepend(*hz, save);\n                        continue;\n                    }\n                }\n                else\n                {\n                    /* previous global zone exists, discard */\n                    FLUID_LOG(FLUID_WARN, \"Preset '%s': Discarding invalid global zone\",\n                              ((SFPreset *)(p->data))->name);\n                    *hz = fluid_list_remove(*hz, p2->data);\n                    delete_zone((SFZone *)fluid_list_get(p2));\n                }\n            }\n\n            while(p3)\n            {\n                /* Kill any zones following an instrument */\n                discarded = TRUE;\n\n                if((size -= SF_GEN_SIZE) < 0)\n                {\n                    FLUID_LOG(FLUID_ERR, \"Preset generator chunk size mismatch\");\n                    return FALSE;\n                }\n\n                FSKIP(sf, SF_GEN_SIZE);\n                SLADVREM(z->gen, p3);\n            }\n\n            p2 = fluid_list_next(p2); /* next zone */\n        }\n\n        if(discarded)\n        {\n            FLUID_LOG(FLUID_WARN,\n                      \"Preset '%s': Some invalid generators were discarded\",\n                      ((SFPreset *)(p->data))->name);\n        }\n\n        p = fluid_list_next(p);\n    }\n\n    /* in case there isn't a terminal record */\n    if(size == 0)\n    {\n        return TRUE;\n    }\n\n    size -= SF_GEN_SIZE;\n\n    if(size != 0)\n    {\n        FLUID_LOG(FLUID_ERR, \"Preset generator chunk size mismatch\");\n        return FALSE;\n    }\n\n    FSKIP(sf, SF_GEN_SIZE); /* terminal gen */\n\n    return TRUE;\n}",
  "abstract_func_before": "static int load_pgen(SFData *VAR_0, int VAR_1)\n{\n    fluid_list_t *VAR_2, *VAR_3, *VAR_4, *VAR_5, **VAR_6 = NULL;\n    SFZone *VAR_7;\n    SFGen *VAR_8;\n    SFGenAmount VAR_9;\n    unsigned short VAR_10;\n    int VAR_11, VAR_12, VAR_13, VAR_14, VAR_15;\n\n    VAR_2 = VAR_0->preset;\n\n    while(VAR_2)\n    {\n        /* COMMENT_0 */\n        VAR_14 = FALSE;\n        VAR_15 = FALSE;\n        VAR_3 = ((SFPreset *)(VAR_2->data))->zone;\n\n        if(VAR_3)\n        {\n            VAR_6 = &VAR_3;\n        }\n\n        while(VAR_3)\n        {\n            /* COMMENT_1 */\n            VAR_11 = 0;\n            VAR_7 = (SFZone *)(VAR_3->data);\n            VAR_4 = VAR_7->gen;\n\n            while(VAR_4)\n            {\n                /* COMMENT_2 */\n                VAR_5 = NULL;\n                VAR_12 = FALSE;\n                VAR_13 = FALSE;\n\n                if((VAR_1 -= VAR_16) < 0)\n                {\n                    FLUID_LOG(VAR_17, \"Preset generator chunk size mismatch\");\n                    return FALSE;\n                }\n\n                READW(VAR_0, VAR_10);\n\n                if(VAR_10 == VAR_18)\n                {\n                    /* COMMENT_3 */\n                    if(VAR_11 == 0)\n                    {\n                        VAR_11 = 1;\n                        READB(VAR_0, VAR_9.range.lo);\n                        READB(VAR_0, VAR_9.range.hi);\n                    }\n                    else\n                    {\n                        VAR_12 = TRUE;\n                    }\n                }\n                else if(VAR_10 == VAR_19)\n                {\n                    /* COMMENT_4 */\n                    if(VAR_11 <= 1)\n                    {\n                        VAR_11 = 2;\n                        READB(VAR_0, VAR_9.range.lo);\n                        READB(VAR_0, VAR_9.range.hi);\n                    }\n                    else\n                    {\n                        VAR_12 = TRUE;\n                    }\n                }\n                else if(VAR_10 == VAR_20)\n                {\n                    /* COMMENT_5 */\n                    VAR_11 = 3;\n                    READW(VAR_0, VAR_9.uword);\n                    ((SFZone *)(VAR_3->data))->instsamp = FLUID_INT_TO_POINTER(VAR_9.uword + 1);\n                    break; /* COMMENT_6 */\n                }\n                else\n                {\n                    VAR_11 = 2;\n\n                    if(valid_preset_genid(VAR_10))\n                    {\n                        /* COMMENT_7 */\n                        READW(VAR_0, VAR_9.sword);\n                        VAR_5 = find_gen_by_id(VAR_10, VAR_7->gen);\n                    }\n                    else\n                    {\n                        VAR_12 = TRUE;\n                    }\n                }\n\n                if(!VAR_12)\n                {\n                    if(!VAR_5)\n                    {\n                        /* COMMENT_8 */\n                        if((VAR_8 = FLUID_NEW(SFGen)) == NULL)\n                        {\n                            FLUID_LOG(VAR_17, \"Out of memory\");\n                            return FALSE;\n                        }\n\n                        VAR_4->data = VAR_8;\n                        VAR_8->id = VAR_10;\n                    }\n                    else\n                    {\n                        VAR_8 = (SFGen *)(VAR_5->data); /* COMMENT_9 */\n                        VAR_13 = TRUE;\n                    }\n\n                    VAR_8->amount = VAR_9;\n                }\n                else\n                {\n                    /* COMMENT_10 */\n                    VAR_15 = TRUE;\n                    VAR_13 = TRUE;\n                    FSKIPW(VAR_0);\n                }\n\n                if(!VAR_13)\n                {\n                    VAR_4 = fluid_list_next(VAR_4);    /* COMMENT_11 */\n                }\n                else\n                {\n                    SLADVREM(VAR_7->gen, VAR_4);    /* COMMENT_12 */\n                }\n\n            } /* COMMENT_13 */\n\n            if(VAR_11 == 3)\n            {\n                SLADVREM(VAR_7->gen, VAR_4);    /* COMMENT_14 */\n            }\n            else\n            {\n                /* COMMENT_15 */\n                if(!VAR_14)\n                {\n                    /* COMMENT_16 */\n                    VAR_14 = TRUE;\n\n                    /* COMMENT_17 */\n                    if(*VAR_6 != VAR_3)\n                    {\n                        void *VAR_21 = VAR_3->data;\n                        FLUID_LOG(VAR_22, \"Preset '%s': Global zone is not first zone\",\n                                  ((SFPreset *)(VAR_2->data))->name);\n                        SLADVREM(*VAR_6, VAR_3);\n                        *VAR_6 = fluid_list_prepend(*VAR_6, VAR_21);\n                        continue;\n                    }\n                }\n                else\n                {\n                    /* COMMENT_18 */\n                    FLUID_LOG(VAR_22, \"Preset '%s': Discarding invalid global zone\",\n                              ((SFPreset *)(VAR_2->data))->name);\n                    *VAR_6 = fluid_list_remove(*VAR_6, VAR_3->data);\n                    delete_zone((SFZone *)fluid_list_get(VAR_3));\n                }\n            }\n\n            while(VAR_4)\n            {\n                /* COMMENT_19 */\n                VAR_15 = TRUE;\n\n                if((VAR_1 -= VAR_16) < 0)\n                {\n                    FLUID_LOG(VAR_17, \"Preset generator chunk size mismatch\");\n                    return FALSE;\n                }\n\n                FSKIP(VAR_0, VAR_16);\n                SLADVREM(VAR_7->gen, VAR_4);\n            }\n\n            VAR_3 = fluid_list_next(VAR_3); /* COMMENT_20 */\n        }\n\n        if(VAR_15)\n        {\n            FLUID_LOG(VAR_22,\n                      \"Preset '%s': Some invalid generators were discarded\",\n                      ((SFPreset *)(VAR_2->data))->name);\n        }\n\n        VAR_2 = fluid_list_next(VAR_2);\n    }\n\n    /* COMMENT_21 */\n    if(VAR_1 == 0)\n    {\n        return TRUE;\n    }\n\n    VAR_1 -= VAR_16;\n\n    if(VAR_1 != 0)\n    {\n        FLUID_LOG(VAR_17, \"Preset generator chunk size mismatch\");\n        return FALSE;\n    }\n\n    FSKIP(VAR_0, VAR_16); /* COMMENT_22 */\n\n    return TRUE;\n}",
  "func_graph_path_before": "FluidSynth/fluidsynth/67596a87731dc593551975ca0268a438ab7410a2/fluid_sffile.c/vul/before/1.json",
  "func": "static int load_pgen(SFData *sf, int size)\n{\n    fluid_list_t *p, *p2, *p3, *dup, **hz = NULL, *start_of_zone_list;\n    SFZone *z;\n    SFGen *g;\n    SFGenAmount genval;\n    unsigned short genid;\n    int level, skip, drop, gzone, discarded;\n\n    p = sf->preset;\n\n    while(p)\n    {\n        /* traverse through all presets */\n        gzone = FALSE;\n        discarded = FALSE;\n        start_of_zone_list = p2 = ((SFPreset *)(p->data))->zone;\n\n        if(p2)\n        {\n            hz = &p2;\n        }\n\n        while(p2)\n        {\n            /* traverse preset's zones */\n            level = 0;\n            z = (SFZone *)(p2->data);\n            p3 = z->gen;\n\n            while(p3)\n            {\n                /* load zone's generators */\n                dup = NULL;\n                skip = FALSE;\n                drop = FALSE;\n\n                if((size -= SF_GEN_SIZE) < 0)\n                {\n                    FLUID_LOG(FLUID_ERR, \"Preset generator chunk size mismatch\");\n                    return FALSE;\n                }\n\n                READW(sf, genid);\n\n                if(genid == Gen_KeyRange)\n                {\n                    /* nothing precedes */\n                    if(level == 0)\n                    {\n                        level = 1;\n                        READB(sf, genval.range.lo);\n                        READB(sf, genval.range.hi);\n                    }\n                    else\n                    {\n                        skip = TRUE;\n                    }\n                }\n                else if(genid == Gen_VelRange)\n                {\n                    /* only KeyRange precedes */\n                    if(level <= 1)\n                    {\n                        level = 2;\n                        READB(sf, genval.range.lo);\n                        READB(sf, genval.range.hi);\n                    }\n                    else\n                    {\n                        skip = TRUE;\n                    }\n                }\n                else if(genid == Gen_Instrument)\n                {\n                    /* inst is last gen */\n                    level = 3;\n                    READW(sf, genval.uword);\n                    ((SFZone *)(p2->data))->instsamp = FLUID_INT_TO_POINTER(genval.uword + 1);\n                    break; /* break out of generator loop */\n                }\n                else\n                {\n                    level = 2;\n\n                    if(valid_preset_genid(genid))\n                    {\n                        /* generator valid? */\n                        READW(sf, genval.sword);\n                        dup = find_gen_by_id(genid, z->gen);\n                    }\n                    else\n                    {\n                        skip = TRUE;\n                    }\n                }\n\n                if(!skip)\n                {\n                    if(!dup)\n                    {\n                        /* if gen ! dup alloc new */\n                        if((g = FLUID_NEW(SFGen)) == NULL)\n                        {\n                            FLUID_LOG(FLUID_ERR, \"Out of memory\");\n                            return FALSE;\n                        }\n\n                        p3->data = g;\n                        g->id = genid;\n                    }\n                    else\n                    {\n                        g = (SFGen *)(dup->data); /* ptr to orig gen */\n                        drop = TRUE;\n                    }\n\n                    g->amount = genval;\n                }\n                else\n                {\n                    /* Skip this generator */\n                    discarded = TRUE;\n                    drop = TRUE;\n                    FSKIPW(sf);\n                }\n\n                if(!drop)\n                {\n                    p3 = fluid_list_next(p3);    /* next gen */\n                }\n                else\n                {\n                    SLADVREM(z->gen, p3);    /* drop place holder */\n                }\n\n            } /* generator loop */\n\n            if(level == 3)\n            {\n                SLADVREM(z->gen, p3);    /* zone has inst? */\n            }\n            else\n            {\n                /* congratulations its a global zone */\n                if(!gzone)\n                {\n                    /* Prior global zones? */\n                    gzone = TRUE;\n\n                    /* if global zone is not 1st zone, relocate */\n                    if(*hz != p2)\n                    {\n                        void *save = p2->data;\n                        FLUID_LOG(FLUID_WARN, \"Preset '%s': Global zone is not first zone\",\n                                  ((SFPreset *)(p->data))->name);\n                        SLADVREM(*hz, p2);\n                        *hz = fluid_list_prepend(*hz, save);\n                        continue;\n                    }\n                }\n                else\n                {\n                    SFZone * pzone = fluid_list_get(p2);\n                    /* previous global zone exists, discard */\n                    FLUID_LOG(FLUID_WARN, \"Preset '%s': Discarding invalid global zone\",\n                              ((SFPreset *)(p->data))->name);\n                    *hz = fluid_list_remove(start_of_zone_list, pzone);\n                    delete_zone(pzone);\n                }\n            }\n\n            while(p3)\n            {\n                /* Kill any zones following an instrument */\n                discarded = TRUE;\n\n                if((size -= SF_GEN_SIZE) < 0)\n                {\n                    FLUID_LOG(FLUID_ERR, \"Preset generator chunk size mismatch\");\n                    return FALSE;\n                }\n\n                FSKIP(sf, SF_GEN_SIZE);\n                SLADVREM(z->gen, p3);\n            }\n\n            p2 = fluid_list_next(p2); /* next zone */\n        }\n\n        if(discarded)\n        {\n            FLUID_LOG(FLUID_WARN,\n                      \"Preset '%s': Some invalid generators were discarded\",\n                      ((SFPreset *)(p->data))->name);\n        }\n\n        p = fluid_list_next(p);\n    }\n\n    /* in case there isn't a terminal record */\n    if(size == 0)\n    {\n        return TRUE;\n    }\n\n    size -= SF_GEN_SIZE;\n\n    if(size != 0)\n    {\n        FLUID_LOG(FLUID_ERR, \"Preset generator chunk size mismatch\");\n        return FALSE;\n    }\n\n    FSKIP(sf, SF_GEN_SIZE); /* terminal gen */\n\n    return TRUE;\n}",
  "abstract_func": "static int load_pgen(SFData *VAR_0, int VAR_1)\n{\n    fluid_list_t *VAR_2, *VAR_3, *VAR_4, *VAR_5, **VAR_6 = NULL, *VAR_7;\n    SFZone *VAR_8;\n    SFGen *VAR_9;\n    SFGenAmount VAR_10;\n    unsigned short VAR_11;\n    int VAR_12, VAR_13, VAR_14, VAR_15, VAR_16;\n\n    VAR_2 = VAR_0->preset;\n\n    while(VAR_2)\n    {\n        /* COMMENT_0 */\n        VAR_15 = FALSE;\n        VAR_16 = FALSE;\n        VAR_7 = VAR_3 = ((SFPreset *)(VAR_2->data))->zone;\n\n        if(VAR_3)\n        {\n            VAR_6 = &VAR_3;\n        }\n\n        while(VAR_3)\n        {\n            /* COMMENT_1 */\n            VAR_12 = 0;\n            VAR_8 = (SFZone *)(VAR_3->data);\n            VAR_4 = VAR_8->gen;\n\n            while(VAR_4)\n            {\n                /* COMMENT_2 */\n                VAR_5 = NULL;\n                VAR_13 = FALSE;\n                VAR_14 = FALSE;\n\n                if((VAR_1 -= VAR_17) < 0)\n                {\n                    FLUID_LOG(VAR_18, \"Preset generator chunk size mismatch\");\n                    return FALSE;\n                }\n\n                READW(VAR_0, VAR_11);\n\n                if(VAR_11 == VAR_19)\n                {\n                    /* COMMENT_3 */\n                    if(VAR_12 == 0)\n                    {\n                        VAR_12 = 1;\n                        READB(VAR_0, VAR_10.range.lo);\n                        READB(VAR_0, VAR_10.range.hi);\n                    }\n                    else\n                    {\n                        VAR_13 = TRUE;\n                    }\n                }\n                else if(VAR_11 == VAR_20)\n                {\n                    /* COMMENT_4 */\n                    if(VAR_12 <= 1)\n                    {\n                        VAR_12 = 2;\n                        READB(VAR_0, VAR_10.range.lo);\n                        READB(VAR_0, VAR_10.range.hi);\n                    }\n                    else\n                    {\n                        VAR_13 = TRUE;\n                    }\n                }\n                else if(VAR_11 == VAR_21)\n                {\n                    /* COMMENT_5 */\n                    VAR_12 = 3;\n                    READW(VAR_0, VAR_10.uword);\n                    ((SFZone *)(VAR_3->data))->instsamp = FLUID_INT_TO_POINTER(VAR_10.uword + 1);\n                    break; /* COMMENT_6 */\n                }\n                else\n                {\n                    VAR_12 = 2;\n\n                    if(valid_preset_genid(VAR_11))\n                    {\n                        /* COMMENT_7 */\n                        READW(VAR_0, VAR_10.sword);\n                        VAR_5 = find_gen_by_id(VAR_11, VAR_8->gen);\n                    }\n                    else\n                    {\n                        VAR_13 = TRUE;\n                    }\n                }\n\n                if(!VAR_13)\n                {\n                    if(!VAR_5)\n                    {\n                        /* COMMENT_8 */\n                        if((VAR_9 = FLUID_NEW(SFGen)) == NULL)\n                        {\n                            FLUID_LOG(VAR_18, \"Out of memory\");\n                            return FALSE;\n                        }\n\n                        VAR_4->data = VAR_9;\n                        VAR_9->id = VAR_11;\n                    }\n                    else\n                    {\n                        VAR_9 = (SFGen *)(VAR_5->data); /* COMMENT_9 */\n                        VAR_14 = TRUE;\n                    }\n\n                    VAR_9->amount = VAR_10;\n                }\n                else\n                {\n                    /* COMMENT_10 */\n                    VAR_16 = TRUE;\n                    VAR_14 = TRUE;\n                    FSKIPW(VAR_0);\n                }\n\n                if(!VAR_14)\n                {\n                    VAR_4 = fluid_list_next(VAR_4);    /* COMMENT_11 */\n                }\n                else\n                {\n                    SLADVREM(VAR_8->gen, VAR_4);    /* COMMENT_12 */\n                }\n\n            } /* COMMENT_13 */\n\n            if(VAR_12 == 3)\n            {\n                SLADVREM(VAR_8->gen, VAR_4);    /* COMMENT_14 */\n            }\n            else\n            {\n                /* COMMENT_15 */\n                if(!VAR_15)\n                {\n                    /* COMMENT_16 */\n                    VAR_15 = TRUE;\n\n                    /* COMMENT_17 */\n                    if(*VAR_6 != VAR_3)\n                    {\n                        void *VAR_22 = VAR_3->data;\n                        FLUID_LOG(VAR_23, \"Preset '%s': Global zone is not first zone\",\n                                  ((SFPreset *)(VAR_2->data))->name);\n                        SLADVREM(*VAR_6, VAR_3);\n                        *VAR_6 = fluid_list_prepend(*VAR_6, VAR_22);\n                        continue;\n                    }\n                }\n                else\n                {\n                    SFZone * VAR_24 = fluid_list_get(VAR_3);\n                    /* COMMENT_18 */\n                    FLUID_LOG(VAR_23, \"Preset '%s': Discarding invalid global zone\",\n                              ((SFPreset *)(VAR_2->data))->name);\n                    *VAR_6 = fluid_list_remove(VAR_7, VAR_24);\n                    delete_zone(VAR_24);\n                }\n            }\n\n            while(VAR_4)\n            {\n                /* COMMENT_19 */\n                VAR_16 = TRUE;\n\n                if((VAR_1 -= VAR_17) < 0)\n                {\n                    FLUID_LOG(VAR_18, \"Preset generator chunk size mismatch\");\n                    return FALSE;\n                }\n\n                FSKIP(VAR_0, VAR_17);\n                SLADVREM(VAR_8->gen, VAR_4);\n            }\n\n            VAR_3 = fluid_list_next(VAR_3); /* COMMENT_20 */\n        }\n\n        if(VAR_16)\n        {\n            FLUID_LOG(VAR_23,\n                      \"Preset '%s': Some invalid generators were discarded\",\n                      ((SFPreset *)(VAR_2->data))->name);\n        }\n\n        VAR_2 = fluid_list_next(VAR_2);\n    }\n\n    /* COMMENT_21 */\n    if(VAR_1 == 0)\n    {\n        return TRUE;\n    }\n\n    VAR_1 -= VAR_17;\n\n    if(VAR_1 != 0)\n    {\n        FLUID_LOG(VAR_18, \"Preset generator chunk size mismatch\");\n        return FALSE;\n    }\n\n    FSKIP(VAR_0, VAR_17); /* COMMENT_22 */\n\n    return TRUE;\n}",
  "func_graph_path": "FluidSynth/fluidsynth/67596a87731dc593551975ca0268a438ab7410a2/fluid_sffile.c/vul/after/1.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,6 +1,6 @@\n static int load_pgen(SFData *sf, int size)\n {\n-    fluid_list_t *p, *p2, *p3, *dup, **hz = NULL;\n+    fluid_list_t *p, *p2, *p3, *dup, **hz = NULL, *start_of_zone_list;\n     SFZone *z;\n     SFGen *g;\n     SFGenAmount genval;\n@@ -14,7 +14,7 @@\n         /* traverse through all presets */\n         gzone = FALSE;\n         discarded = FALSE;\n-        p2 = ((SFPreset *)(p->data))->zone;\n+        start_of_zone_list = p2 = ((SFPreset *)(p->data))->zone;\n \n         if(p2)\n         {\n@@ -161,11 +161,12 @@\n                 }\n                 else\n                 {\n+                    SFZone * pzone = fluid_list_get(p2);\n                     /* previous global zone exists, discard */\n                     FLUID_LOG(FLUID_WARN, \"Preset '%s': Discarding invalid global zone\",\n                               ((SFPreset *)(p->data))->name);\n-                    *hz = fluid_list_remove(*hz, p2->data);\n-                    delete_zone((SFZone *)fluid_list_get(p2));\n+                    *hz = fluid_list_remove(start_of_zone_list, pzone);\n+                    delete_zone(pzone);\n                 }\n             }\n ",
  "diff_line_info": {
    "deleted_lines": [
      "    fluid_list_t *p, *p2, *p3, *dup, **hz = NULL;",
      "        p2 = ((SFPreset *)(p->data))->zone;",
      "                    *hz = fluid_list_remove(*hz, p2->data);",
      "                    delete_zone((SFZone *)fluid_list_get(p2));"
    ],
    "added_lines": [
      "    fluid_list_t *p, *p2, *p3, *dup, **hz = NULL, *start_of_zone_list;",
      "        start_of_zone_list = p2 = ((SFPreset *)(p->data))->zone;",
      "                    SFZone * pzone = fluid_list_get(p2);",
      "                    *hz = fluid_list_remove(start_of_zone_list, pzone);",
      "                    delete_zone(pzone);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/FluidSynth/fluidsynth/pull/810",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/FluidSynth/fluidsynth/pull/810: 403 Client Error: Forbidden for url: https://api.github.com/repos/FluidSynth/fluidsynth/pulls/810",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.9\n\nThe patch addresses a use-after-free issue by correcting the removal of elements from a list, which is a security concern. The modifications to fluid_list_remove() directly fix the vulnerability, making this a security fix with high confidence."
}