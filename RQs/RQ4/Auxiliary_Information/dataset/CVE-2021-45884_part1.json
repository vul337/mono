{
  "cve_id": "CVE-2021-45884",
  "cwe_ids": [
    "CWE-200"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:P/I:N/A:N",
  "cvss_is_v3": false,
  "repo_name": "brave/brave-core",
  "commit_msg": "disable CNAME uncloaking when a proxy extension with a socks fallback is enabled",
  "commit_hash": "133af65c89c035b2934ca3532f8442c719c5b471",
  "git_url": "https://github.com/brave/brave-core/commit/133af65c89c035b2934ca3532f8442c719c5b471",
  "file_path": "browser/net/brave_ad_block_tp_network_delegate_helper.cc",
  "func_name": "ProxySettingsAllowUncloaking",
  "func_before": "bool ProxySettingsAllowUncloaking(content::BrowserContext* browser_context) {\n  DCHECK(browser_context);\n\n  bool can_uncloak = true;\n\n  Profile* profile = Profile::FromBrowserContext(browser_context);\n\n  std::unique_ptr<PrefProxyConfigTracker> config_tracker =\n      ProxyServiceFactory::CreatePrefProxyConfigTrackerOfProfile(\n          profile->GetPrefs(), nullptr);\n  std::unique_ptr<net::ProxyConfigService> proxy_config_service =\n      ProxyServiceFactory::CreateProxyConfigService(config_tracker.get());\n\n  net::ProxyConfigWithAnnotation config;\n  net::ProxyConfigService::ConfigAvailability availability =\n      proxy_config_service->GetLatestProxyConfig(&config);\n\n  if (availability ==\n      net::ProxyConfigService::ConfigAvailability::CONFIG_VALID) {\n    // PROXY_LIST corresponds to SingleProxy mode.\n    if (config.value().proxy_rules().type ==\n        net::ProxyConfig::ProxyRules::Type::PROXY_LIST) {\n      can_uncloak = false;\n    }\n  }\n\n  config_tracker->DetachFromPrefService();\n\n  return can_uncloak;\n}",
  "abstract_func_before": "bool ProxySettingsAllowUncloaking(content::BrowserContext* VAR_0) {\n  DCHECK(VAR_0);\n\n  bool VAR_1 = true;\n\n  Profile* VAR_2 = Profile::FromBrowserContext(VAR_0);\n\n  std::unique_ptr<PrefProxyConfigTracker> VAR_3 =\n      ProxyServiceFactory::CreatePrefProxyConfigTrackerOfProfile(\n          VAR_2->GetPrefs(), nullptr);\n  std::unique_ptr<net::ProxyConfigService> VAR_4 =\n      ProxyServiceFactory::CreateProxyConfigService(VAR_3.get());\n\n  net::ProxyConfigWithAnnotation VAR_5;\n  net::ProxyConfigService::ConfigAvailability VAR_6 =\n      VAR_4->GetLatestProxyConfig(&VAR_5);\n\n  if (VAR_6 ==\n      net::ProxyConfigService::ConfigAvailability::CONFIG_VALID) {\n    /* COMMENT_0 */\n    if (VAR_5.value().proxy_rules().type ==\n        net::ProxyConfig::ProxyRules::Type::PROXY_LIST) {\n      VAR_1 = false;\n    }\n  }\n\n  VAR_3->DetachFromPrefService();\n\n  return VAR_1;\n}",
  "func_graph_path_before": "brave/brave-core/133af65c89c035b2934ca3532f8442c719c5b471/brave_ad_block_tp_network_delegate_helper.cc/vul/before/0.json",
  "func": "bool ProxySettingsAllowUncloaking(content::BrowserContext* browser_context) {\n  DCHECK(browser_context);\n\n  bool can_uncloak = true;\n\n  Profile* profile = Profile::FromBrowserContext(browser_context);\n\n  std::unique_ptr<PrefProxyConfigTracker> config_tracker =\n      ProxyServiceFactory::CreatePrefProxyConfigTrackerOfProfile(\n          profile->GetPrefs(), nullptr);\n  std::unique_ptr<net::ProxyConfigService> proxy_config_service =\n      ProxyServiceFactory::CreateProxyConfigService(config_tracker.get());\n\n  net::ProxyConfigWithAnnotation config;\n  net::ProxyConfigService::ConfigAvailability availability =\n      proxy_config_service->GetLatestProxyConfig(&config);\n\n  if (availability ==\n      net::ProxyConfigService::ConfigAvailability::CONFIG_VALID) {\n    // PROXY_LIST corresponds to SingleProxy mode.\n    if (config.value().proxy_rules().type ==\n            net::ProxyConfig::ProxyRules::Type::PROXY_LIST ||\n        (config.value().proxy_rules().type ==\n             net::ProxyConfig::ProxyRules::Type::PROXY_LIST_PER_SCHEME &&\n         !config.value().proxy_rules().fallback_proxies.IsEmpty())) {\n      can_uncloak = false;\n    }\n  }\n\n  config_tracker->DetachFromPrefService();\n\n  return can_uncloak;\n}",
  "abstract_func": "bool ProxySettingsAllowUncloaking(content::BrowserContext* VAR_0) {\n  DCHECK(VAR_0);\n\n  bool VAR_1 = true;\n\n  Profile* VAR_2 = Profile::FromBrowserContext(VAR_0);\n\n  std::unique_ptr<PrefProxyConfigTracker> VAR_3 =\n      ProxyServiceFactory::CreatePrefProxyConfigTrackerOfProfile(\n          VAR_2->GetPrefs(), nullptr);\n  std::unique_ptr<net::ProxyConfigService> VAR_4 =\n      ProxyServiceFactory::CreateProxyConfigService(VAR_3.get());\n\n  net::ProxyConfigWithAnnotation VAR_5;\n  net::ProxyConfigService::ConfigAvailability VAR_6 =\n      VAR_4->GetLatestProxyConfig(&VAR_5);\n\n  if (VAR_6 ==\n      net::ProxyConfigService::ConfigAvailability::CONFIG_VALID) {\n    /* COMMENT_0 */\n    if (VAR_5.value().proxy_rules().type ==\n            net::ProxyConfig::ProxyRules::Type::PROXY_LIST ||\n        (VAR_5.value().proxy_rules().type ==\n             net::ProxyConfig::ProxyRules::Type::PROXY_LIST_PER_SCHEME &&\n         !VAR_5.value().proxy_rules().fallback_proxies.IsEmpty())) {\n      VAR_1 = false;\n    }\n  }\n\n  VAR_3->DetachFromPrefService();\n\n  return VAR_1;\n}",
  "func_graph_path": "brave/brave-core/133af65c89c035b2934ca3532f8442c719c5b471/brave_ad_block_tp_network_delegate_helper.cc/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -19,7 +19,10 @@\n       net::ProxyConfigService::ConfigAvailability::CONFIG_VALID) {\n     // PROXY_LIST corresponds to SingleProxy mode.\n     if (config.value().proxy_rules().type ==\n-        net::ProxyConfig::ProxyRules::Type::PROXY_LIST) {\n+            net::ProxyConfig::ProxyRules::Type::PROXY_LIST ||\n+        (config.value().proxy_rules().type ==\n+             net::ProxyConfig::ProxyRules::Type::PROXY_LIST_PER_SCHEME &&\n+         !config.value().proxy_rules().fallback_proxies.IsEmpty())) {\n       can_uncloak = false;\n     }\n   }",
  "diff_line_info": {
    "deleted_lines": [
      "        net::ProxyConfig::ProxyRules::Type::PROXY_LIST) {"
    ],
    "added_lines": [
      "            net::ProxyConfig::ProxyRules::Type::PROXY_LIST ||",
      "        (config.value().proxy_rules().type ==",
      "             net::ProxyConfig::ProxyRules::Type::PROXY_LIST_PER_SCHEME &&",
      "         !config.value().proxy_rules().fallback_proxies.IsEmpty())) {"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/brave/brave-core/pull/10742",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/brave/brave-core/pull/10742: 403 Client Error: Forbidden for url: https://api.github.com/repos/brave/brave-core/pulls/10742",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.8,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 0.8"
}