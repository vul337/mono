{
  "cve_id": "CVE-2020-7105",
  "cwe_ids": [
    "CWE-476"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "redis/hiredis",
  "commit_msg": "Rename allocation wrappers and add license info\n\nSee #752, #747",
  "commit_hash": "70e73a31ad5edb6c457658c0a0b6752b06cc6a25",
  "git_url": "https://github.com/redis/hiredis/commit/70e73a31ad5edb6c457658c0a0b6752b06cc6a25",
  "file_path": "dict.c",
  "func_name": "dictAdd",
  "func_before": "static int dictAdd(dict *ht, void *key, void *val) {\n    int index;\n    dictEntry *entry;\n\n    /* Get the index of the new element, or -1 if\n     * the element already exists. */\n    if ((index = _dictKeyIndex(ht, key)) == -1)\n        return DICT_ERR;\n\n    /* Allocates the memory and stores key */\n    entry = hiredis_safe_malloc(sizeof(*entry));\n    entry->next = ht->table[index];\n    ht->table[index] = entry;\n\n    /* Set the hash entry fields. */\n    dictSetHashKey(ht, entry, key);\n    dictSetHashVal(ht, entry, val);\n    ht->used++;\n    return DICT_OK;\n}",
  "abstract_func_before": "static int dictAdd(dict *VAR_0, void *VAR_1, void *VAR_2) {\n    int VAR_3;\n    dictEntry *VAR_4;\n\n    /* COMMENT_0 */\n                                     \n    if ((VAR_3 = _dictKeyIndex(VAR_0, VAR_1)) == -1)\n        return VAR_5;\n\n    /* COMMENT_2 */\n    VAR_4 = hiredis_safe_malloc(sizeof(*VAR_4));\n    VAR_4->next = VAR_0->table[VAR_3];\n    VAR_0->table[VAR_3] = VAR_4;\n\n    /* COMMENT_3 */\n    dictSetHashKey(VAR_0, VAR_4, VAR_1);\n    dictSetHashVal(VAR_0, VAR_4, VAR_2);\n    VAR_0->used++;\n    return VAR_6;\n}",
  "func_graph_path_before": "redis/hiredis/70e73a31ad5edb6c457658c0a0b6752b06cc6a25/dict.c/vul/before/2.json",
  "func": "static int dictAdd(dict *ht, void *key, void *val) {\n    int index;\n    dictEntry *entry;\n\n    /* Get the index of the new element, or -1 if\n     * the element already exists. */\n    if ((index = _dictKeyIndex(ht, key)) == -1)\n        return DICT_ERR;\n\n    /* Allocates the memory and stores key */\n    entry = hi_malloc(sizeof(*entry));\n    entry->next = ht->table[index];\n    ht->table[index] = entry;\n\n    /* Set the hash entry fields. */\n    dictSetHashKey(ht, entry, key);\n    dictSetHashVal(ht, entry, val);\n    ht->used++;\n    return DICT_OK;\n}",
  "abstract_func": "static int dictAdd(dict *VAR_0, void *VAR_1, void *VAR_2) {\n    int VAR_3;\n    dictEntry *VAR_4;\n\n    /* COMMENT_0 */\n                                     \n    if ((VAR_3 = _dictKeyIndex(VAR_0, VAR_1)) == -1)\n        return VAR_5;\n\n    /* COMMENT_2 */\n    VAR_4 = hi_malloc(sizeof(*VAR_4));\n    VAR_4->next = VAR_0->table[VAR_3];\n    VAR_0->table[VAR_3] = VAR_4;\n\n    /* COMMENT_3 */\n    dictSetHashKey(VAR_0, VAR_4, VAR_1);\n    dictSetHashVal(VAR_0, VAR_4, VAR_2);\n    VAR_0->used++;\n    return VAR_6;\n}",
  "func_graph_path": "redis/hiredis/70e73a31ad5edb6c457658c0a0b6752b06cc6a25/dict.c/vul/after/2.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -8,7 +8,7 @@\n         return DICT_ERR;\n \n     /* Allocates the memory and stores key */\n-    entry = hiredis_safe_malloc(sizeof(*entry));\n+    entry = hi_malloc(sizeof(*entry));\n     entry->next = ht->table[index];\n     ht->table[index] = entry;\n ",
  "diff_line_info": {
    "deleted_lines": [
      "    entry = hiredis_safe_malloc(sizeof(*entry));"
    ],
    "added_lines": [
      "    entry = hi_malloc(sizeof(*entry));"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/redis/hiredis/pull/754",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/redis/hiredis/pull/754: 403 Client Error: Forbidden for url: https://api.github.com/repos/redis/hiredis/pulls/754",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.85,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.85  \n\nThe patch introduces memory allocation wrappers to handle OOM conditions, which is a security concern. The code change modifies core memory management logic, suggesting a security enhancement to prevent potential exploits related to memory allocation failures."
}