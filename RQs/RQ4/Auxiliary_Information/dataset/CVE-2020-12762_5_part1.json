{
  "cve_id": "CVE-2020-12762",
  "cwe_ids": [
    "CWE-190",
    "CWE-787"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "json-c",
  "commit_msg": "Fix integer overflows.\n\nThe data structures linkhash and printbuf are limited to 2 GB in size\ndue to a signed integer being used to track their current size.\n\nIf too much data is added, then size variable can overflow, which is\nan undefined behaviour in C programming language.\n\nAssuming that a signed int overflow just leads to a negative value,\nlike it happens on many sytems (Linux i686/amd64 with gcc), then\nprintbuf is vulnerable to an out of boundary write on 64 bit systems.",
  "commit_hash": "d07b91014986900a3a75f306d302e13e005e9d67",
  "git_url": "https://github.com/json-c/json-c/commit/d07b91014986900a3a75f306d302e13e005e9d67",
  "file_path": "printbuf.c",
  "func_name": "printbuf_memappend",
  "func_before": "int printbuf_memappend(struct printbuf *p, const char *buf, int size)\n{\n\tif (p->size <= p->bpos + size + 1)\n\t{\n\t\tif (printbuf_extend(p, p->bpos + size + 1) < 0)\n\t\t\treturn -1;\n\t}\n\tmemcpy(p->buf + p->bpos, buf, size);\n\tp->bpos += size;\n\tp->buf[p->bpos] = '\\0';\n\treturn size;\n}",
  "abstract_func_before": "int printbuf_memappend(struct printbuf *VAR_0, const char *VAR_1, int VAR_2)\n{\n\tif (VAR_0->size <= VAR_0->bpos + VAR_2 + 1)\n\t{\n\t\tif (printbuf_extend(VAR_0, VAR_0->bpos + VAR_2 + 1) < 0)\n\t\t\treturn -1;\n\t}\n\tmemcpy(VAR_0->buf + VAR_0->bpos, VAR_1, VAR_2);\n\tVAR_0->bpos += VAR_2;\n\tVAR_0->buf[VAR_0->bpos] = '\\0';\n\treturn VAR_2;\n}",
  "func_graph_path_before": "json-c/d07b91014986900a3a75f306d302e13e005e9d67/printbuf.c/vul/before/1.json",
  "func": "int printbuf_memappend(struct printbuf *p, const char *buf, int size)\n{\n\t/* Prevent signed integer overflows with large buffers. */\n\tif (size > INT_MAX - p->bpos - 1)\n\t\treturn -1;\n\tif (p->size <= p->bpos + size + 1)\n\t{\n\t\tif (printbuf_extend(p, p->bpos + size + 1) < 0)\n\t\t\treturn -1;\n\t}\n\tmemcpy(p->buf + p->bpos, buf, size);\n\tp->bpos += size;\n\tp->buf[p->bpos] = '\\0';\n\treturn size;\n}",
  "abstract_func": "int printbuf_memappend(struct printbuf *VAR_0, const char *VAR_1, int VAR_2)\n{\n\t/* COMMENT_0 */\n\tif (VAR_2 > VAR_3 - VAR_0->bpos - 1)\n\t\treturn -1;\n\tif (VAR_0->size <= VAR_0->bpos + VAR_2 + 1)\n\t{\n\t\tif (printbuf_extend(VAR_0, VAR_0->bpos + VAR_2 + 1) < 0)\n\t\t\treturn -1;\n\t}\n\tmemcpy(VAR_0->buf + VAR_0->bpos, VAR_1, VAR_2);\n\tVAR_0->bpos += VAR_2;\n\tVAR_0->buf[VAR_0->bpos] = '\\0';\n\treturn VAR_2;\n}",
  "func_graph_path": "json-c/d07b91014986900a3a75f306d302e13e005e9d67/printbuf.c/vul/after/1.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,5 +1,8 @@\n int printbuf_memappend(struct printbuf *p, const char *buf, int size)\n {\n+\t/* Prevent signed integer overflows with large buffers. */\n+\tif (size > INT_MAX - p->bpos - 1)\n+\t\treturn -1;\n \tif (p->size <= p->bpos + size + 1)\n \t{\n \t\tif (printbuf_extend(p, p->bpos + size + 1) < 0)",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "\t/* Prevent signed integer overflows with large buffers. */",
      "\tif (size > INT_MAX - p->bpos - 1)",
      "\t\treturn -1;"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/json-c/json-c/pull/592",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/json-c/json-c/pull/592: 403 Client Error: Forbidden for url: https://api.github.com/repos/json-c/json-c/pulls/592",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 1.0"
}