{
  "cve_id": "CVE-2022-40761",
  "cwe_ids": [
    "CWE-1284"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
  "cvss_is_v3": true,
  "repo_name": "Samsung/mTower",
  "commit_msg": "Fixed CVE-2022-40761\n\nSigned-off-by: Taras Drozdovskyi <t.drozdovsky@samsung.com>",
  "commit_hash": "c5f30c70e48786e1aef8c815f35e406a6c4fb3ae",
  "git_url": "https://github.com/Samsung/mTower/commit/c5f30c70e48786e1aef8c815f35e406a6c4fb3ae",
  "file_path": "crypto/libtomcrypt/src/tee_ltc_provider.c",
  "func_name": "crypto_hash_alloc_ctx",
  "func_before": "TEE_Result crypto_hash_alloc_ctx(void **ctx_ret, uint32_t algo)\n{\n\tTEE_Result res;\n\tsize_t ctx_size;\n\tvoid *ctx;\n\n\tres = hash_get_ctx_size(algo, &ctx_size);\n\tif (res)\n\t\treturn res;\n\n\tctx = calloc(1, ctx_size);\n\tif (!ctx)\n\t\treturn TEE_ERROR_OUT_OF_MEMORY;\n\n\t*ctx_ret = ctx;\n\treturn TEE_SUCCESS;\n}",
  "abstract_func_before": "TEE_Result crypto_hash_alloc_ctx(void **VAR_0, uint32_t VAR_1)\n{\n\tTEE_Result VAR_2;\n\tsize_t VAR_3;\n\tvoid *VAR_4;\n\n\tVAR_2 = hash_get_ctx_size(VAR_1, &VAR_3);\n\tif (VAR_2)\n\t\treturn VAR_2;\n\n\tVAR_4 = calloc(1, VAR_3);\n\tif (!VAR_4)\n\t\treturn VAR_5;\n\n\t*VAR_0 = VAR_4;\n\treturn VAR_6;\n}",
  "func_graph_path_before": "Samsung/mTower/c5f30c70e48786e1aef8c815f35e406a6c4fb3ae/tee_ltc_provider.c/vul/before/1.json",
  "func": "TEE_Result crypto_hash_alloc_ctx(void **ctx_ret, uint32_t algo)\n{\n\tTEE_Result res;\n\tsize_t ctx_size;\n\tvoid *ctx;\n\n\tres = hash_get_ctx_size(algo, &ctx_size);\n\tif (res)\n\t\treturn res;\n\n\tctx = TEE_Malloc(ctx_size, TEE_MALLOC_FILL_ZERO);\n\t// ctx = calloc(1, ctx_size);\n\tif (!ctx)\n\t\treturn TEE_ERROR_OUT_OF_MEMORY;\n\n\t*ctx_ret = ctx;\n\treturn TEE_SUCCESS;\n}",
  "abstract_func": "TEE_Result crypto_hash_alloc_ctx(void **VAR_0, uint32_t VAR_1)\n{\n\tTEE_Result VAR_2;\n\tsize_t VAR_3;\n\tvoid *VAR_4;\n\n\tVAR_2 = hash_get_ctx_size(VAR_1, &VAR_3);\n\tif (VAR_2)\n\t\treturn VAR_2;\n\n\tVAR_4 = TEE_Malloc(VAR_3, VAR_5);\n\t/* COMMENT_0 */\n\tif (!VAR_4)\n\t\treturn VAR_6;\n\n\t*VAR_0 = VAR_4;\n\treturn VAR_7;\n}",
  "func_graph_path": "Samsung/mTower/c5f30c70e48786e1aef8c815f35e406a6c4fb3ae/tee_ltc_provider.c/vul/after/1.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -8,7 +8,8 @@\n \tif (res)\n \t\treturn res;\n \n-\tctx = calloc(1, ctx_size);\n+\tctx = TEE_Malloc(ctx_size, TEE_MALLOC_FILL_ZERO);\n+\t// ctx = calloc(1, ctx_size);\n \tif (!ctx)\n \t\treturn TEE_ERROR_OUT_OF_MEMORY;\n ",
  "diff_line_info": {
    "deleted_lines": [
      "\tctx = calloc(1, ctx_size);"
    ],
    "added_lines": [
      "\tctx = TEE_Malloc(ctx_size, TEE_MALLOC_FILL_ZERO);",
      "\t// ctx = calloc(1, ctx_size);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/Samsung/mTower/pull/88",
  "description": {
    "pr_info": {
      "title": "Fixed CVE-2022-40761",
      "number": 88
    },
    "comment": [
      "Signed-off-by: Taras Drozdovskyi <t.drozdovsky@samsung.com>\r\n\r\n\r\nFixes #83\r\n\r\n## Type of change\r\n\r\n- [x] Bug fix (non-breaking change which fixes an issue)\r\n\r\n# Checklist:\r\n\r\n- [x] My code follows the style guidelines of this project\r\n- [x] I have performed a self-review of my own code\r\n- [x] I have commented my code, particularly in hard-to-understand areas\r\n- [ ] I have made corresponding changes to the documentation\r\n- [x] My changes generate no new warnings\r\n- [ ] I have added tests that prove my fix is effective or that my feature works\r\n- [x] New and existing unit tests pass locally with my changes\r\n- [ ] Any dependent changes have been merged and published in downstream modules"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 1.0  \n\nStep-by-Step Explanation:\n\n1. **Input Analysis:** The commit message explicitly references a CVE (CVE-2022-40761), a known security identifier, indicating a security fix. The code diff modifies memory allocation from calloc to TEE_Malloc with a fill-zero flag, which addresses potential security issues like memory leaks.\n\n2. **Consistency Check:** Thecommit message and code changes align perfectly, showing a clear intent to fix a specific security issue.\n\n3. **Purpose Evaluation:** Modifies memory allocation to enhance security, preventing potential data exposure.\n\n4. **Security Vulnerability Assessment:** Directly fixes a CVE, indicating a security vulnerability.\n\n5. **Confidence:** High confidence due to explicit CVE reference and relevant code change."
}