{
  "cve_id": "CVE-2020-28191",
  "cwe_ids": [
    "CWE-352"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H",
  "cvss_is_v3": true,
  "repo_name": "togglz",
  "commit_msg": "Added CSRF protection to the togglz console via a CSRF token passed between the server and the clinet. This remediates the vulnerabilty CVE-2020-28191 by blocking CSRF attacks as the attcker will not be able to guess the CSRF token value. (#495)\n\nThis has been implemented with either the session timeout of the application the togglz console is embedded in. Or if no user session is available it defaults to a 10 minute timeout for the CSRF token.\r\nThis CSRF token does not interfere with either OWASP's CSRFGuard or Spring-Security's CSRF protection if they are used within the application.\r\n\r\nCo-authored-by: Joseph Beeton <joseph.p.beeton1@aexp.com>",
  "commit_hash": "ed66e3f584de954297ebaf98ea4a235286784707",
  "git_url": "https://github.com/togglz/togglz/commit/ed66e3f584de954297ebaf98ea4a235286784707",
  "file_path": "console/src/main/java/org/togglz/console/handlers/edit/EditPageHandler.java",
  "func_name": "process",
  "func_before": "@Override\n    public void process(RequestEvent event) throws IOException {\n        FeatureManager featureManager = event.getFeatureManager();\n        HttpServletRequest request = event.getRequest();\n        HttpServletResponse response = event.getResponse();\n\n        // identify the feature\n        Feature feature = null;\n        String featureAsString = request.getParameter(\"f\");\n        for (Feature f : featureManager.getFeatures()) {\n            if (f.name().equals(featureAsString)) {\n                feature = f;\n            }\n        }\n        if (feature == null) {\n            response.sendError(400);\n            return;\n        }\n\n        FeatureMetaData metadata = featureManager.getMetaData(feature);\n        List<ActivationStrategy> impls = featureManager.getActivationStrategies();\n        FeatureModel featureModel = new FeatureModel(feature, metadata, impls);\n\n        // GET requests for this feature\n        if (\"GET\".equals(request.getMethod())) {\n\n            FeatureState state = featureManager.getFeatureState(feature);\n            featureModel.populateFromFeatureState(state);\n\n            renderEditPage(event, featureModel);\n\n        }\n\n        // POST requests for this feature\n        if (\"POST\".equals(request.getMethod())) {\n\n            featureModel.restoreFromRequest(request);\n\n            // no validation errors\n            if (featureModel.isValid()) {\n\n                FeatureState state = featureModel.toFeatureState();\n                featureManager.setFeatureState(state);\n                response.sendRedirect(\"index\");\n\n            }\n\n            // got validation errors\n            else {\n                renderEditPage(event, featureModel);\n            }\n\n        }\n\n    }",
  "abstract_func_before": "@Override\n    public void process(RequestEvent VAR_0) throws IOException {\n        FeatureManager VAR_1 = VAR_0.getFeatureManager();\n        HttpServletRequest VAR_2 = VAR_0.getRequest();\n        HttpServletResponse VAR_3 = VAR_0.getResponse();\n\n        /* COMMENT_0 */\n        Feature VAR_4 = null;\n        String VAR_5 = VAR_2.getParameter(\"f\");\n        for (Feature VAR_6 : VAR_1.getFeatures()) {\n            if (VAR_6.name().equals(VAR_5)) {\n                VAR_4 = VAR_6;\n            }\n        }\n        if (VAR_4 == null) {\n            VAR_3.sendError(400);\n            return;\n        }\n\n        FeatureMetaData VAR_7 = VAR_1.getMetaData(VAR_4);\n        List<ActivationStrategy> VAR_8 = VAR_1.getActivationStrategies();\n        FeatureModel VAR_9 = new FeatureModel(VAR_4, VAR_7, VAR_8);\n\n        /* COMMENT_1 */\n        if (\"GET\".equals(VAR_2.getMethod())) {\n\n            FeatureState VAR_10 = VAR_1.getFeatureState(VAR_4);\n            VAR_9.populateFromFeatureState(VAR_10);\n\n            renderEditPage(VAR_0, VAR_9);\n\n        }\n\n        /* COMMENT_2 */\n        if (\"POST\".equals(VAR_2.getMethod())) {\n\n            VAR_9.restoreFromRequest(VAR_2);\n\n            /* COMMENT_3 */\n            if (VAR_9.isValid()) {\n\n                FeatureState VAR_10 = VAR_9.toFeatureState();\n                VAR_1.setFeatureState(VAR_10);\n                VAR_3.sendRedirect(\"index\");\n\n            }\n\n            /* COMMENT_4 */\n            else {\n                renderEditPage(VAR_0, VAR_9);\n            }\n\n        }\n\n    }",
  "func_graph_path_before": "togglz/ed66e3f584de954297ebaf98ea4a235286784707/EditPageHandler.java/vul/before/1.json",
  "func": "@Override\n    public void process(RequestEvent event) throws IOException {\n        FeatureManager featureManager = event.getFeatureManager();\n        HttpServletRequest request = event.getRequest();\n        HttpServletResponse response = event.getResponse();\n\t\tif(!validateCSRFToken(event)) {\n\t\t\trenderErrorPage(event);\n\t\t\treturn;\n\t\t}\n        // identify the feature\n        Feature feature = null;\n        String featureAsString = request.getParameter(\"f\");\n        for (Feature f : featureManager.getFeatures()) {\n            if (f.name().equals(featureAsString)) {\n                feature = f;\n            }\n        }\n        if (feature == null) {\n            response.sendError(400);\n            return;\n        }\n\n        FeatureMetaData metadata = featureManager.getMetaData(feature);\n        List<ActivationStrategy> impls = featureManager.getActivationStrategies();\n        FeatureModel featureModel = new FeatureModel(feature, metadata, impls);\n\n        // GET requests for this feature\n        if (\"GET\".equals(request.getMethod())) {\n\n            FeatureState state = featureManager.getFeatureState(feature);\n            featureModel.populateFromFeatureState(state);\n\n            renderEditPage(event, featureModel);\n\n        }\n\n        // POST requests for this feature\n        if (\"POST\".equals(request.getMethod())) {\n\n            featureModel.restoreFromRequest(request);\n\n            // no validation errors\n            if (featureModel.isValid()) {\n\n                FeatureState state = featureModel.toFeatureState();\n                featureManager.setFeatureState(state);\n                response.sendRedirect(\"index\");\n\n            }\n            // got validation errors\n            else {\n                renderEditPage(event, featureModel);\n            }\n\n        }\n\n    }",
  "abstract_func": "@Override\n    public void process(RequestEvent VAR_0) throws IOException {\n        FeatureManager VAR_1 = VAR_0.getFeatureManager();\n        HttpServletRequest VAR_2 = VAR_0.getRequest();\n        HttpServletResponse VAR_3 = VAR_0.getResponse();\n\t\tif(!validateCSRFToken(VAR_0)) {\n\t\t\trenderErrorPage(VAR_0);\n\t\t\treturn;\n\t\t}\n        /* COMMENT_0 */\n        Feature VAR_4 = null;\n        String VAR_5 = VAR_2.getParameter(\"f\");\n        for (Feature VAR_6 : VAR_1.getFeatures()) {\n            if (VAR_6.name().equals(VAR_5)) {\n                VAR_4 = VAR_6;\n            }\n        }\n        if (VAR_4 == null) {\n            VAR_3.sendError(400);\n            return;\n        }\n\n        FeatureMetaData VAR_7 = VAR_1.getMetaData(VAR_4);\n        List<ActivationStrategy> VAR_8 = VAR_1.getActivationStrategies();\n        FeatureModel VAR_9 = new FeatureModel(VAR_4, VAR_7, VAR_8);\n\n        /* COMMENT_1 */\n        if (\"GET\".equals(VAR_2.getMethod())) {\n\n            FeatureState VAR_10 = VAR_1.getFeatureState(VAR_4);\n            VAR_9.populateFromFeatureState(VAR_10);\n\n            renderEditPage(VAR_0, VAR_9);\n\n        }\n\n        /* COMMENT_2 */\n        if (\"POST\".equals(VAR_2.getMethod())) {\n\n            VAR_9.restoreFromRequest(VAR_2);\n\n            /* COMMENT_3 */\n            if (VAR_9.isValid()) {\n\n                FeatureState VAR_10 = VAR_9.toFeatureState();\n                VAR_1.setFeatureState(VAR_10);\n                VAR_3.sendRedirect(\"index\");\n\n            }\n            /* COMMENT_4 */\n            else {\n                renderEditPage(VAR_0, VAR_9);\n            }\n\n        }\n\n    }",
  "func_graph_path": "togglz/ed66e3f584de954297ebaf98ea4a235286784707/EditPageHandler.java/vul/after/1.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -3,7 +3,10 @@\n         FeatureManager featureManager = event.getFeatureManager();\n         HttpServletRequest request = event.getRequest();\n         HttpServletResponse response = event.getResponse();\n-\n+\t\tif(!validateCSRFToken(event)) {\n+\t\t\trenderErrorPage(event);\n+\t\t\treturn;\n+\t\t}\n         // identify the feature\n         Feature feature = null;\n         String featureAsString = request.getParameter(\"f\");\n@@ -44,7 +47,6 @@\n                 response.sendRedirect(\"index\");\n \n             }\n-\n             // got validation errors\n             else {\n                 renderEditPage(event, featureModel);",
  "diff_line_info": {
    "deleted_lines": [
      "",
      ""
    ],
    "added_lines": [
      "\t\tif(!validateCSRFToken(event)) {",
      "\t\t\trenderErrorPage(event);",
      "\t\t\treturn;",
      "\t\t}"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/togglz/togglz/pull/495",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/togglz/togglz/pull/495: 403 Client Error: Forbidden for url: https://api.github.com/repos/togglz/togglz/pulls/495",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "The patch is explicitly addressing a known CSRF vulnerability (CVE-2020-28191) by implementing a CSRF token validation mechanism. This directly fixes a security issue.\n\n**Final Classification:** Security Vulnerability Fix; **Confidence:** 1.0"
}