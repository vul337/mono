{
  "cve_id": "CVE-2022-0520",
  "cwe_ids": [
    "CWE-416"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "radareorg/radare2",
  "commit_msg": "Fix bins/*/rep8 - UAF crash in pyc parser ##crash\n\n* Reported by Cen Zhang via huntr.dev",
  "commit_hash": "8525ad0b9fd596f4b251bb3d7b114e6dc7ce1ee8",
  "git_url": "https://github.com/radareorg/radare2/commit/8525ad0b9fd596f4b251bb3d7b114e6dc7ce1ee8",
  "file_path": "libr/bin/format/pyc/marshal.c",
  "func_name": "get_object",
  "func_before": "static pyc_object *get_object(RBuffer *buffer) {\n\tbool error = false;\n\tpyc_object *ret = NULL;\n\tut8 code = get_ut8 (buffer, &error);\n\tbool flag = (code & FLAG_REF);\n\tRListIter *ref_idx = NULL;\n\tut8 type = (code & ~FLAG_REF);\n\n\tif (error) {\n\t\treturn NULL;\n\t}\n\n\tif (flag) {\n\t\tpyc_object *noneret = get_none_object ();\n\t\tif (noneret) {\n\t\t\tref_idx = r_list_append (refs, noneret);\n\t\t}\n\t}\n\n\tswitch (type) {\n\tcase TYPE_NULL:\n\t\tfree_object (ret);\n\t\treturn NULL;\n\tcase TYPE_TRUE:\n\t\treturn get_true_object ();\n\tcase TYPE_FALSE:\n\t\tfree_object (ret);\n\t\treturn get_false_object ();\n\tcase TYPE_NONE:\n\t\tfree_object (ret);\n\t\treturn get_none_object ();\n\tcase TYPE_REF:\n\t\tfree_object (ret);\n\t\treturn get_ref_object (buffer);\n\tcase TYPE_SMALL_TUPLE:\n\t\tret = get_small_tuple_object (buffer);\n\t\tbreak;\n\tcase TYPE_TUPLE:\n\t\tret = get_tuple_object (buffer);\n\t\tbreak;\n\tcase TYPE_STRING:\n\t\tret = get_string_object (buffer);\n\t\tbreak;\n\tcase TYPE_CODE_v0:\n\t\tret = get_code_object (buffer);\n\t\tif (ret) {\n\t\t\tret->type = TYPE_CODE_v0;\n\t\t}\n\t\tbreak;\n\tcase TYPE_CODE_v1:\n\t\tret = get_code_object (buffer);\n\t\tif (ret) {\n\t\t\tret->type = TYPE_CODE_v1;\n\t\t}\n\t\tbreak;\n\tcase TYPE_INT:\n\t\tret = get_int_object (buffer);\n\t\tbreak;\n\tcase TYPE_ASCII_INTERNED:\n\t\tret = get_ascii_interned_object (buffer);\n\t\tbreak;\n\tcase TYPE_SHORT_ASCII:\n\t\tret = get_short_ascii_object (buffer);\n\t\tbreak;\n\tcase TYPE_ASCII:\n\t\tret = get_ascii_object (buffer);\n\t\tbreak;\n\tcase TYPE_SHORT_ASCII_INTERNED:\n\t\tret = get_short_ascii_interned_object (buffer);\n\t\tbreak;\n\tcase TYPE_INT64:\n\t\tret = get_int64_object (buffer);\n\t\tbreak;\n\tcase TYPE_INTERNED:\n\t\tret = get_interned_object (buffer);\n\t\tbreak;\n\tcase TYPE_STRINGREF:\n\t\tret = get_stringref_object (buffer);\n\t\tbreak;\n\tcase TYPE_FLOAT:\n\t\tret = get_float_object (buffer);\n\t\tbreak;\n\tcase TYPE_BINARY_FLOAT:\n\t\tret = get_binary_float_object (buffer);\n\t\tbreak;\n\tcase TYPE_COMPLEX:\n\t\tret = get_complex_object (buffer); // behaviour depends on Python version\n\t\tbreak;\n\tcase TYPE_BINARY_COMPLEX:\n\t\tret = get_binary_complex_object (buffer);\n\t\tbreak;\n\tcase TYPE_LIST:\n\t\tret = get_list_object (buffer);\n\t\tbreak;\n\tcase TYPE_LONG:\n\t\tret = get_long_object (buffer);\n\t\tbreak;\n\tcase TYPE_UNICODE:\n\t\tret = get_unicode_object (buffer);\n\t\tbreak;\n\tcase TYPE_DICT:\n\t\tret = get_dict_object (buffer);\n\t\tbreak;\n\tcase TYPE_FROZENSET:\n\tcase TYPE_SET:\n\t\tret = get_set_object (buffer);\n\t\tbreak;\n\tcase TYPE_STOPITER:\n\tcase TYPE_ELLIPSIS:\n\t\tret = R_NEW0 (pyc_object);\n\t\tbreak;\n\tcase TYPE_UNKNOWN:\n\t\teprintf (\"Get not implemented for type 0x%x\\n\", type);\n\t\tr_list_pop (refs);\n\t\tfree_object (ret);\n\t\treturn NULL;\n\tcase 0:\n\t\t// nop\n\t\tbreak;\n\tdefault:\n\t\teprintf (\"Undefined type in get_object (0x%x)\\n\", type);\n\t\t// r_list_pop (refs);\n\t\treturn NULL;\n\t}\n\n\tif (ret && flag && ref_idx) {\n\t\tif (ref_idx->data != ret) {\n\t\t\tfree_object (ref_idx->data);\n\t\t}\n\t\tref_idx->data = copy_object (ret);\n\t}\n\tif (ret) {\n\t\treturn ret;\n\t}\n\tret = get_none_object ();\n\tif (!ret) {\n\t\treturn NULL;\n\t}\n\tr_list_append (refs, ret);\n\treturn ret;\n}",
  "abstract_func_before": "static pyc_object *get_object(RBuffer *VAR_0) {\n\tbool VAR_1 = false;\n\tpyc_object *VAR_2 = NULL;\n\tut8 VAR_3 = get_ut8 (VAR_0, &VAR_1);\n\tbool VAR_4 = (VAR_3 & VAR_5);\n\tRListIter *VAR_6 = NULL;\n\tut8 VAR_7 = (VAR_3 & ~VAR_5);\n\n\tif (VAR_1) {\n\t\treturn NULL;\n\t}\n\n\tif (VAR_4) {\n\t\tpyc_object *VAR_8 = get_none_object ();\n\t\tif (VAR_8) {\n\t\t\tVAR_6 = r_list_append (VAR_9, VAR_8);\n\t\t}\n\t}\n\n\tswitch (VAR_7) {\n\tcase VAR_10:\n\t\tfree_object (VAR_2);\n\t\treturn NULL;\n\tcase VAR_11:\n\t\treturn get_true_object ();\n\tcase VAR_12:\n\t\tfree_object (VAR_2);\n\t\treturn get_false_object ();\n\tcase VAR_13:\n\t\tfree_object (VAR_2);\n\t\treturn get_none_object ();\n\tcase VAR_14:\n\t\tfree_object (VAR_2);\n\t\treturn get_ref_object (VAR_0);\n\tcase VAR_15:\n\t\tVAR_2 = get_small_tuple_object (VAR_0);\n\t\tbreak;\n\tcase VAR_16:\n\t\tVAR_2 = get_tuple_object (VAR_0);\n\t\tbreak;\n\tcase VAR_17:\n\t\tVAR_2 = get_string_object (VAR_0);\n\t\tbreak;\n\tcase VAR_18:\n\t\tVAR_2 = get_code_object (VAR_0);\n\t\tif (VAR_2) {\n\t\t\tVAR_2->type = VAR_18;\n\t\t}\n\t\tbreak;\n\tcase VAR_19:\n\t\tVAR_2 = get_code_object (VAR_0);\n\t\tif (VAR_2) {\n\t\t\tVAR_2->type = VAR_19;\n\t\t}\n\t\tbreak;\n\tcase VAR_20:\n\t\tVAR_2 = get_int_object (VAR_0);\n\t\tbreak;\n\tcase VAR_21:\n\t\tVAR_2 = get_ascii_interned_object (VAR_0);\n\t\tbreak;\n\tcase VAR_22:\n\t\tVAR_2 = get_short_ascii_object (VAR_0);\n\t\tbreak;\n\tcase VAR_23:\n\t\tVAR_2 = get_ascii_object (VAR_0);\n\t\tbreak;\n\tcase VAR_24:\n\t\tVAR_2 = get_short_ascii_interned_object (VAR_0);\n\t\tbreak;\n\tcase VAR_25:\n\t\tVAR_2 = get_int64_object (VAR_0);\n\t\tbreak;\n\tcase VAR_26:\n\t\tVAR_2 = get_interned_object (VAR_0);\n\t\tbreak;\n\tcase VAR_27:\n\t\tVAR_2 = get_stringref_object (VAR_0);\n\t\tbreak;\n\tcase VAR_28:\n\t\tVAR_2 = get_float_object (VAR_0);\n\t\tbreak;\n\tcase VAR_29:\n\t\tVAR_2 = get_binary_float_object (VAR_0);\n\t\tbreak;\n\tcase VAR_30:\n\t\tVAR_2 = get_complex_object (VAR_0); /* COMMENT_0 */\n\t\tbreak;\n\tcase VAR_31:\n\t\tVAR_2 = get_binary_complex_object (VAR_0);\n\t\tbreak;\n\tcase VAR_32:\n\t\tVAR_2 = get_list_object (VAR_0);\n\t\tbreak;\n\tcase VAR_33:\n\t\tVAR_2 = get_long_object (VAR_0);\n\t\tbreak;\n\tcase VAR_34:\n\t\tVAR_2 = get_unicode_object (VAR_0);\n\t\tbreak;\n\tcase VAR_35:\n\t\tVAR_2 = get_dict_object (VAR_0);\n\t\tbreak;\n\tcase VAR_36:\n\tcase VAR_37:\n\t\tVAR_2 = get_set_object (VAR_0);\n\t\tbreak;\n\tcase VAR_38:\n\tcase VAR_39:\n\t\tVAR_2 = R_NEW0 (pyc_object);\n\t\tbreak;\n\tcase VAR_40:\n\t\teprintf (\"Get not implemented for type 0x%x\\n\", VAR_7);\n\t\tr_list_pop (VAR_9);\n\t\tfree_object (VAR_2);\n\t\treturn NULL;\n\tcase 0:\n\t\t/* COMMENT_1 */\n\t\tbreak;\n\tdefault:\n\t\teprintf (\"Undefined type in get_object (0x%x)\\n\", VAR_7);\n\t\t/* COMMENT_2 */\n\t\treturn NULL;\n\t}\n\n\tif (VAR_2 && VAR_4 && VAR_6) {\n\t\tif (VAR_6->data != VAR_2) {\n\t\t\tfree_object (VAR_6->data);\n\t\t}\n\t\tVAR_6->data = copy_object (VAR_2);\n\t}\n\tif (VAR_2) {\n\t\treturn VAR_2;\n\t}\n\tVAR_2 = get_none_object ();\n\tif (!VAR_2) {\n\t\treturn NULL;\n\t}\n\tr_list_append (VAR_9, VAR_2);\n\treturn VAR_2;\n}",
  "func_graph_path_before": "radareorg/radare2/8525ad0b9fd596f4b251bb3d7b114e6dc7ce1ee8/marshal.c/vul/before/0.json",
  "func": "static pyc_object *get_object(RBuffer *buffer) {\n\tbool error = false;\n\tpyc_object *ret = NULL;\n\tut8 code = get_ut8 (buffer, &error);\n\tbool flag = (code & FLAG_REF);\n\tRListIter *ref_idx = NULL;\n\tut8 type = (code & ~FLAG_REF);\n\n\tif (error) {\n\t\treturn NULL;\n\t}\n\n\tif (flag) {\n\t\tpyc_object *noneret = get_none_object ();\n\t\tif (noneret) {\n\t\t\tref_idx = r_list_append (refs, noneret);\n\t\t}\n\t}\n\n\tswitch (type) {\n\tcase TYPE_NULL:\n\t\tfree_object (ret);\n\t\treturn NULL;\n\tcase TYPE_TRUE:\n\t\treturn get_true_object ();\n\tcase TYPE_FALSE:\n\t\tfree_object (ret);\n\t\treturn get_false_object ();\n\tcase TYPE_NONE:\n\t\tfree_object (ret);\n\t\treturn get_none_object ();\n\tcase TYPE_REF:\n\t\tfree_object (ret);\n\t\treturn get_ref_object (buffer);\n\tcase TYPE_SMALL_TUPLE:\n\t\tret = get_small_tuple_object (buffer);\n\t\tbreak;\n\tcase TYPE_TUPLE:\n\t\tret = get_tuple_object (buffer);\n\t\tbreak;\n\tcase TYPE_STRING:\n\t\tret = get_string_object (buffer);\n\t\tbreak;\n\tcase TYPE_CODE_v0:\n\t\tret = get_code_object (buffer);\n\t\tif (ret) {\n\t\t\tret->type = TYPE_CODE_v0;\n\t\t}\n\t\tbreak;\n\tcase TYPE_CODE_v1:\n\t\tret = get_code_object (buffer);\n\t\tif (ret) {\n\t\t\tret->type = TYPE_CODE_v1;\n\t\t}\n\t\tbreak;\n\tcase TYPE_INT:\n\t\tret = get_int_object (buffer);\n\t\tbreak;\n\tcase TYPE_ASCII_INTERNED:\n\t\tret = get_ascii_interned_object (buffer);\n\t\tbreak;\n\tcase TYPE_SHORT_ASCII:\n\t\tret = get_short_ascii_object (buffer);\n\t\tbreak;\n\tcase TYPE_ASCII:\n\t\tret = get_ascii_object (buffer);\n\t\tbreak;\n\tcase TYPE_SHORT_ASCII_INTERNED:\n\t\tret = get_short_ascii_interned_object (buffer);\n\t\tbreak;\n\tcase TYPE_INT64:\n\t\tret = get_int64_object (buffer);\n\t\tbreak;\n\tcase TYPE_INTERNED:\n\t\tret = get_interned_object (buffer);\n\t\tbreak;\n\tcase TYPE_STRINGREF:\n\t\tret = get_stringref_object (buffer);\n\t\tbreak;\n\tcase TYPE_FLOAT:\n\t\tret = get_float_object (buffer);\n\t\tbreak;\n\tcase TYPE_BINARY_FLOAT:\n\t\tret = get_binary_float_object (buffer);\n\t\tbreak;\n\tcase TYPE_COMPLEX:\n\t\tret = get_complex_object (buffer); // behaviour depends on Python version\n\t\tbreak;\n\tcase TYPE_BINARY_COMPLEX:\n\t\tret = get_binary_complex_object (buffer);\n\t\tbreak;\n\tcase TYPE_LIST:\n\t\tret = get_list_object (buffer);\n\t\tbreak;\n\tcase TYPE_LONG:\n\t\tret = get_long_object (buffer);\n\t\tbreak;\n\tcase TYPE_UNICODE:\n\t\tret = get_unicode_object (buffer);\n\t\tbreak;\n\tcase TYPE_DICT:\n\t\tret = get_dict_object (buffer);\n\t\tbreak;\n\tcase TYPE_FROZENSET:\n\tcase TYPE_SET:\n\t\tret = get_set_object (buffer);\n\t\tbreak;\n\tcase TYPE_STOPITER:\n\tcase TYPE_ELLIPSIS:\n\t\tret = R_NEW0 (pyc_object);\n\t\tbreak;\n\tcase TYPE_UNKNOWN:\n\t\teprintf (\"Get not implemented for type 0x%x\\n\", type);\n\t\t// r_list_pop (refs);\n\t\tfree_object (ret);\n\t\treturn NULL;\n\tcase 0:\n\t\t// nop\n\t\tbreak;\n\tdefault:\n\t\teprintf (\"Undefined type in get_object (0x%x)\\n\", type);\n\t\t// r_list_pop (refs);\n\t\treturn NULL;\n\t}\n\n\tif (ret && flag && ref_idx) {\n\t\tif (ref_idx->data != ret) {\n\t\t\tfree_object (ref_idx->data);\n\t\t}\n\t\tref_idx->data = copy_object (ret);\n\t}\n\tif (ret) {\n\t\treturn ret;\n\t}\n\tret = get_none_object ();\n\tif (!ret) {\n\t\treturn NULL;\n\t}\n\tr_list_append (refs, ret);\n\treturn ret;\n}",
  "abstract_func": "static pyc_object *get_object(RBuffer *VAR_0) {\n\tbool VAR_1 = false;\n\tpyc_object *VAR_2 = NULL;\n\tut8 VAR_3 = get_ut8 (VAR_0, &VAR_1);\n\tbool VAR_4 = (VAR_3 & VAR_5);\n\tRListIter *VAR_6 = NULL;\n\tut8 VAR_7 = (VAR_3 & ~VAR_5);\n\n\tif (VAR_1) {\n\t\treturn NULL;\n\t}\n\n\tif (VAR_4) {\n\t\tpyc_object *VAR_8 = get_none_object ();\n\t\tif (VAR_8) {\n\t\t\tVAR_6 = r_list_append (VAR_9, VAR_8);\n\t\t}\n\t}\n\n\tswitch (VAR_7) {\n\tcase VAR_10:\n\t\tfree_object (VAR_2);\n\t\treturn NULL;\n\tcase VAR_11:\n\t\treturn get_true_object ();\n\tcase VAR_12:\n\t\tfree_object (VAR_2);\n\t\treturn get_false_object ();\n\tcase VAR_13:\n\t\tfree_object (VAR_2);\n\t\treturn get_none_object ();\n\tcase VAR_14:\n\t\tfree_object (VAR_2);\n\t\treturn get_ref_object (VAR_0);\n\tcase VAR_15:\n\t\tVAR_2 = get_small_tuple_object (VAR_0);\n\t\tbreak;\n\tcase VAR_16:\n\t\tVAR_2 = get_tuple_object (VAR_0);\n\t\tbreak;\n\tcase VAR_17:\n\t\tVAR_2 = get_string_object (VAR_0);\n\t\tbreak;\n\tcase VAR_18:\n\t\tVAR_2 = get_code_object (VAR_0);\n\t\tif (VAR_2) {\n\t\t\tVAR_2->type = VAR_18;\n\t\t}\n\t\tbreak;\n\tcase VAR_19:\n\t\tVAR_2 = get_code_object (VAR_0);\n\t\tif (VAR_2) {\n\t\t\tVAR_2->type = VAR_19;\n\t\t}\n\t\tbreak;\n\tcase VAR_20:\n\t\tVAR_2 = get_int_object (VAR_0);\n\t\tbreak;\n\tcase VAR_21:\n\t\tVAR_2 = get_ascii_interned_object (VAR_0);\n\t\tbreak;\n\tcase VAR_22:\n\t\tVAR_2 = get_short_ascii_object (VAR_0);\n\t\tbreak;\n\tcase VAR_23:\n\t\tVAR_2 = get_ascii_object (VAR_0);\n\t\tbreak;\n\tcase VAR_24:\n\t\tVAR_2 = get_short_ascii_interned_object (VAR_0);\n\t\tbreak;\n\tcase VAR_25:\n\t\tVAR_2 = get_int64_object (VAR_0);\n\t\tbreak;\n\tcase VAR_26:\n\t\tVAR_2 = get_interned_object (VAR_0);\n\t\tbreak;\n\tcase VAR_27:\n\t\tVAR_2 = get_stringref_object (VAR_0);\n\t\tbreak;\n\tcase VAR_28:\n\t\tVAR_2 = get_float_object (VAR_0);\n\t\tbreak;\n\tcase VAR_29:\n\t\tVAR_2 = get_binary_float_object (VAR_0);\n\t\tbreak;\n\tcase VAR_30:\n\t\tVAR_2 = get_complex_object (VAR_0); /* COMMENT_0 */\n\t\tbreak;\n\tcase VAR_31:\n\t\tVAR_2 = get_binary_complex_object (VAR_0);\n\t\tbreak;\n\tcase VAR_32:\n\t\tVAR_2 = get_list_object (VAR_0);\n\t\tbreak;\n\tcase VAR_33:\n\t\tVAR_2 = get_long_object (VAR_0);\n\t\tbreak;\n\tcase VAR_34:\n\t\tVAR_2 = get_unicode_object (VAR_0);\n\t\tbreak;\n\tcase VAR_35:\n\t\tVAR_2 = get_dict_object (VAR_0);\n\t\tbreak;\n\tcase VAR_36:\n\tcase VAR_37:\n\t\tVAR_2 = get_set_object (VAR_0);\n\t\tbreak;\n\tcase VAR_38:\n\tcase VAR_39:\n\t\tVAR_2 = R_NEW0 (pyc_object);\n\t\tbreak;\n\tcase VAR_40:\n\t\teprintf (\"Get not implemented for type 0x%x\\n\", VAR_7);\n\t\t/* COMMENT_1 */\n\t\tfree_object (VAR_2);\n\t\treturn NULL;\n\tcase 0:\n\t\t/* COMMENT_2 */\n\t\tbreak;\n\tdefault:\n\t\teprintf (\"Undefined type in get_object (0x%x)\\n\", VAR_7);\n\t\t/* COMMENT_1 */\n\t\treturn NULL;\n\t}\n\n\tif (VAR_2 && VAR_4 && VAR_6) {\n\t\tif (VAR_6->data != VAR_2) {\n\t\t\tfree_object (VAR_6->data);\n\t\t}\n\t\tVAR_6->data = copy_object (VAR_2);\n\t}\n\tif (VAR_2) {\n\t\treturn VAR_2;\n\t}\n\tVAR_2 = get_none_object ();\n\tif (!VAR_2) {\n\t\treturn NULL;\n\t}\n\tr_list_append (VAR_9, VAR_2);\n\treturn VAR_2;\n}",
  "func_graph_path": "radareorg/radare2/8525ad0b9fd596f4b251bb3d7b114e6dc7ce1ee8/marshal.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -111,7 +111,7 @@\n \t\tbreak;\n \tcase TYPE_UNKNOWN:\n \t\teprintf (\"Get not implemented for type 0x%x\\n\", type);\n-\t\tr_list_pop (refs);\n+\t\t// r_list_pop (refs);\n \t\tfree_object (ret);\n \t\treturn NULL;\n \tcase 0:",
  "diff_line_info": {
    "deleted_lines": [
      "\t\tr_list_pop (refs);"
    ],
    "added_lines": [
      "\t\t// r_list_pop (refs);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/radareorg/radare2/pull/19669",
  "description": {
    "pr_info": {
      "title": "Huntr fixes",
      "number": 19669
    },
    "comment": [
      "<!-- Please read the contributing guidelines:\r\n* https://github.com/radareorg/radare2/blob/master/DEVELOPERS.md\r\nIn short:\r\n* PR title must be capitalized, concise and use ##tags\r\n* Follow the coding style, add tests and documentation if necessary\r\n-->\r\n\r\n**Checklist**\r\n\r\n- [ ] Closing issues: #issue\r\n- [x] Mark this if you consider it ready to merge\r\n- [ ] I've added tests (optional)\r\n- [ ] I wrote some lines in the [radare2book](https://github.com/radareorg/radare2book)\r\n\r\n**Description**\r\n\r\n<!-- Explain the **details** to understand the purpose of this contribution, with enough information to help us understand better the changes. -->\r\n"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.9"
}