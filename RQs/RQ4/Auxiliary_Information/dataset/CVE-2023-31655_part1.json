{
  "cve_id": "CVE-2023-31655",
  "cwe_ids": [
    "CWE-Other"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
  "cvss_is_v3": true,
  "repo_name": "RedisLabs/redisraft",
  "commit_msg": "Better redis version check",
  "commit_hash": "1df932be8dc5301d63d73121dd0fdf8beee40b02",
  "git_url": "https://github.com/RedisLabs/redisraft/commit/1df932be8dc5301d63d73121dd0fdf8beee40b02",
  "file_path": "src/redisraft.c",
  "func_name": "RedisModule_OnLoad",
  "func_before": "__attribute__((__unused__)) int RedisModule_OnLoad(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)\n{\n    int ret;\n\n    ret = RedisModule_Init(ctx, \"raft\", 1, REDISMODULE_APIVER_1);\n    if (ret != REDISMODULE_OK) {\n        return REDISMODULE_ERR;\n    }\n\n    RedisModule_Log(ctx, REDISMODULE_LOGLEVEL_NOTICE,\n                    \"RedisRaft version %s [%s]\",\n                    REDISRAFT_VERSION, REDISRAFT_GIT_SHA1);\n\n    const int MIN_SUPPORTED_REDIS_VERSION = 0x00070000;\n    if (!RMAPI_FUNC_SUPPORTED(RedisModule_GetServerVersion) ||\n        RedisModule_GetServerVersion() < MIN_SUPPORTED_REDIS_VERSION) {\n        RedisModule_Log(ctx, REDISMODULE_LOGLEVEL_WARNING,\n                        \"RedisRaft requires Redis 7.0 or above\");\n        return REDISMODULE_ERR;\n    }\n\n    /* Create a logging context */\n    redisraft_log_ctx = RedisModule_GetDetachedThreadSafeContext(ctx);\n\n    RedisModule_RegisterInfoFunc(ctx, handleInfo);\n    RedisModule_RegisterCommandFilter(ctx, interceptRedisCommands, 0);\n\n    if (registerRaftCommands(ctx) == RR_ERROR) {\n        LOG_WARNING(\"Failed to register commands\");\n        goto error;\n    }\n\n    ret = RedisModule_SubscribeToServerEvent(ctx, RedisModuleEvent_ClientChange,\n                                             handleClientEvent);\n    if (ret != REDISMODULE_OK) {\n        LOG_WARNING(\"Failed to subscribe to server events.\");\n        goto error;\n    }\n\n    ret = RedisModule_SubscribeToServerEvent(ctx, RedisModuleEvent_EventLoop,\n                                             beforeSleep);\n    if (ret != REDISMODULE_OK) {\n        LOG_WARNING(\"Failed to subscribe to server events.\");\n        goto error;\n    }\n\n    ret = RedisModule_SubscribeToServerEvent(ctx, RedisModuleEvent_Config,\n                                             ConfigRedisEventCallback);\n    if (ret != REDISMODULE_OK) {\n        LOG_WARNING(\"Failed to subscribe to server events.\");\n        goto error;\n    }\n\n    if (RedisModule_SubscribeToServerEvent(ctx, RedisModuleEvent_ModuleChange,\n                                           moduleChangeCallback) != REDISMODULE_OK) {\n        LOG_WARNING(\"Failed to subscribe to server events.\");\n        goto error;\n    }\n\n    RedisRaftCtx *rr = &redis_raft;\n\n    if (RedisRaftCtxInit(rr, ctx) == RR_ERROR) {\n        LOG_WARNING(\"Failed to init redis raft context\");\n        goto error;\n    }\n\n    LOG_NOTICE(\"Raft module loaded, state is '%s'\", getStateStr(rr));\n    return REDISMODULE_OK;\nerror:\n    RedisRaftFreeGlobals();\n    return REDISMODULE_ERR;\n}",
  "abstract_func_before": "__attribute__((VAR_0)) int RedisModule_OnLoad(RedisModuleCtx *VAR_1, RedisModuleString **VAR_2, int VAR_3)\n{\n    int VAR_4;\n\n    VAR_4 = RedisModule_Init(VAR_1, \"raft\", 1, VAR_5);\n    if (VAR_4 != VAR_6) {\n        return VAR_7;\n    }\n\n    RedisModule_Log(VAR_1, VAR_8,\n                    \"RedisRaft version %s [%s]\",\n                    VAR_9, VAR_10);\n\n    const int VAR_11 = 0x00070000;\n    if (!RMAPI_FUNC_SUPPORTED(VAR_12) ||\n        VAR_12() < VAR_11) {\n        RedisModule_Log(VAR_1, VAR_13,\n                        \"RedisRaft requires Redis 7.0 or above\");\n        return VAR_7;\n    }\n\n    /* COMMENT_0 */\n    VAR_14 = RedisModule_GetDetachedThreadSafeContext(VAR_1);\n\n    RedisModule_RegisterInfoFunc(VAR_1, VAR_15);\n    RedisModule_RegisterCommandFilter(VAR_1, VAR_16, 0);\n\n    if (registerRaftCommands(VAR_1) == VAR_17) {\n        LOG_WARNING(\"Failed to register commands\");\n        goto error;\n    }\n\n    VAR_4 = RedisModule_SubscribeToServerEvent(VAR_1, VAR_18,\n                                             VAR_19);\n    if (VAR_4 != VAR_6) {\n        LOG_WARNING(\"Failed to subscribe to server events.\");\n        goto error;\n    }\n\n    VAR_4 = RedisModule_SubscribeToServerEvent(VAR_1, VAR_20,\n                                             VAR_21);\n    if (VAR_4 != VAR_6) {\n        LOG_WARNING(\"Failed to subscribe to server events.\");\n        goto error;\n    }\n\n    VAR_4 = RedisModule_SubscribeToServerEvent(VAR_1, VAR_22,\n                                             VAR_23);\n    if (VAR_4 != VAR_6) {\n        LOG_WARNING(\"Failed to subscribe to server events.\");\n        goto error;\n    }\n\n    if (RedisModule_SubscribeToServerEvent(VAR_1, VAR_24,\n                                           VAR_25) != VAR_6) {\n        LOG_WARNING(\"Failed to subscribe to server events.\");\n        goto error;\n    }\n\n    RedisRaftCtx *VAR_26 = &VAR_27;\n\n    if (RedisRaftCtxInit(VAR_26, VAR_1) == VAR_17) {\n        LOG_WARNING(\"Failed to init redis raft context\");\n        goto error;\n    }\n\n    LOG_NOTICE(\"Raft module loaded, state is '%s'\", getStateStr(VAR_26));\n    return VAR_6;\nerror:\n    RedisRaftFreeGlobals();\n    return VAR_7;\n}",
  "func_graph_path_before": "RedisLabs/redisraft/1df932be8dc5301d63d73121dd0fdf8beee40b02/redisraft.c/vul/before/0.json",
  "func": "__attribute__((__unused__)) int RedisModule_OnLoad(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)\n{\n    int ret;\n\n    ret = RedisModule_Init(ctx, \"raft\", 1, REDISMODULE_APIVER_1);\n    if (ret != REDISMODULE_OK) {\n        return REDISMODULE_ERR;\n    }\n\n    RedisModule_Log(ctx, REDISMODULE_LOGLEVEL_NOTICE,\n                    \"RedisRaft version %s [%s]\",\n                    REDISRAFT_VERSION, REDISRAFT_GIT_SHA1);\n\n    const int MIN_SUPPORTED_REDIS_VERSION = 0x00070000;\n    if (!RMAPI_FUNC_SUPPORTED(RedisModule_CallReplyPromiseAbort) ||\n        !RMAPI_FUNC_SUPPORTED(RedisModule_GetServerVersion) ||\n        RedisModule_GetServerVersion() < MIN_SUPPORTED_REDIS_VERSION) {\n        RedisModule_Log(ctx, REDISMODULE_LOGLEVEL_WARNING,\n                        \"RedisRaft requires Redis build from 'unstable' branch\");\n        return REDISMODULE_ERR;\n    }\n\n    /* Create a logging context */\n    redisraft_log_ctx = RedisModule_GetDetachedThreadSafeContext(ctx);\n\n    RedisModule_RegisterInfoFunc(ctx, handleInfo);\n    RedisModule_RegisterCommandFilter(ctx, interceptRedisCommands, 0);\n\n    if (registerRaftCommands(ctx) == RR_ERROR) {\n        LOG_WARNING(\"Failed to register commands\");\n        goto error;\n    }\n\n    ret = RedisModule_SubscribeToServerEvent(ctx, RedisModuleEvent_ClientChange,\n                                             handleClientEvent);\n    if (ret != REDISMODULE_OK) {\n        LOG_WARNING(\"Failed to subscribe to server events.\");\n        goto error;\n    }\n\n    ret = RedisModule_SubscribeToServerEvent(ctx, RedisModuleEvent_EventLoop,\n                                             beforeSleep);\n    if (ret != REDISMODULE_OK) {\n        LOG_WARNING(\"Failed to subscribe to server events.\");\n        goto error;\n    }\n\n    ret = RedisModule_SubscribeToServerEvent(ctx, RedisModuleEvent_Config,\n                                             ConfigRedisEventCallback);\n    if (ret != REDISMODULE_OK) {\n        LOG_WARNING(\"Failed to subscribe to server events.\");\n        goto error;\n    }\n\n    if (RedisModule_SubscribeToServerEvent(ctx, RedisModuleEvent_ModuleChange,\n                                           moduleChangeCallback) != REDISMODULE_OK) {\n        LOG_WARNING(\"Failed to subscribe to server events.\");\n        goto error;\n    }\n\n    RedisRaftCtx *rr = &redis_raft;\n\n    if (RedisRaftCtxInit(rr, ctx) == RR_ERROR) {\n        LOG_WARNING(\"Failed to init redis raft context\");\n        goto error;\n    }\n\n    LOG_NOTICE(\"Raft module loaded, state is '%s'\", getStateStr(rr));\n    return REDISMODULE_OK;\nerror:\n    RedisRaftFreeGlobals();\n    return REDISMODULE_ERR;\n}",
  "abstract_func": "__attribute__((VAR_0)) int RedisModule_OnLoad(RedisModuleCtx *VAR_1, RedisModuleString **VAR_2, int VAR_3)\n{\n    int VAR_4;\n\n    VAR_4 = RedisModule_Init(VAR_1, \"raft\", 1, VAR_5);\n    if (VAR_4 != VAR_6) {\n        return VAR_7;\n    }\n\n    RedisModule_Log(VAR_1, VAR_8,\n                    \"RedisRaft version %s [%s]\",\n                    VAR_9, VAR_10);\n\n    const int VAR_11 = 0x00070000;\n    if (!RMAPI_FUNC_SUPPORTED(VAR_12) ||\n        !RMAPI_FUNC_SUPPORTED(VAR_13) ||\n        VAR_13() < VAR_11) {\n        RedisModule_Log(VAR_1, VAR_14,\n                        \"RedisRaft requires Redis build from 'unstable' branch\");\n        return VAR_7;\n    }\n\n    /* COMMENT_0 */\n    VAR_15 = RedisModule_GetDetachedThreadSafeContext(VAR_1);\n\n    RedisModule_RegisterInfoFunc(VAR_1, VAR_16);\n    RedisModule_RegisterCommandFilter(VAR_1, VAR_17, 0);\n\n    if (registerRaftCommands(VAR_1) == VAR_18) {\n        LOG_WARNING(\"Failed to register commands\");\n        goto error;\n    }\n\n    VAR_4 = RedisModule_SubscribeToServerEvent(VAR_1, VAR_19,\n                                             VAR_20);\n    if (VAR_4 != VAR_6) {\n        LOG_WARNING(\"Failed to subscribe to server events.\");\n        goto error;\n    }\n\n    VAR_4 = RedisModule_SubscribeToServerEvent(VAR_1, VAR_21,\n                                             VAR_22);\n    if (VAR_4 != VAR_6) {\n        LOG_WARNING(\"Failed to subscribe to server events.\");\n        goto error;\n    }\n\n    VAR_4 = RedisModule_SubscribeToServerEvent(VAR_1, VAR_23,\n                                             VAR_24);\n    if (VAR_4 != VAR_6) {\n        LOG_WARNING(\"Failed to subscribe to server events.\");\n        goto error;\n    }\n\n    if (RedisModule_SubscribeToServerEvent(VAR_1, VAR_25,\n                                           VAR_26) != VAR_6) {\n        LOG_WARNING(\"Failed to subscribe to server events.\");\n        goto error;\n    }\n\n    RedisRaftCtx *VAR_27 = &VAR_28;\n\n    if (RedisRaftCtxInit(VAR_27, VAR_1) == VAR_18) {\n        LOG_WARNING(\"Failed to init redis raft context\");\n        goto error;\n    }\n\n    LOG_NOTICE(\"Raft module loaded, state is '%s'\", getStateStr(VAR_27));\n    return VAR_6;\nerror:\n    RedisRaftFreeGlobals();\n    return VAR_7;\n}",
  "func_graph_path": "RedisLabs/redisraft/1df932be8dc5301d63d73121dd0fdf8beee40b02/redisraft.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -12,10 +12,11 @@\n                     REDISRAFT_VERSION, REDISRAFT_GIT_SHA1);\n \n     const int MIN_SUPPORTED_REDIS_VERSION = 0x00070000;\n-    if (!RMAPI_FUNC_SUPPORTED(RedisModule_GetServerVersion) ||\n+    if (!RMAPI_FUNC_SUPPORTED(RedisModule_CallReplyPromiseAbort) ||\n+        !RMAPI_FUNC_SUPPORTED(RedisModule_GetServerVersion) ||\n         RedisModule_GetServerVersion() < MIN_SUPPORTED_REDIS_VERSION) {\n         RedisModule_Log(ctx, REDISMODULE_LOGLEVEL_WARNING,\n-                        \"RedisRaft requires Redis 7.0 or above\");\n+                        \"RedisRaft requires Redis build from 'unstable' branch\");\n         return REDISMODULE_ERR;\n     }\n ",
  "diff_line_info": {
    "deleted_lines": [
      "    if (!RMAPI_FUNC_SUPPORTED(RedisModule_GetServerVersion) ||",
      "                        \"RedisRaft requires Redis 7.0 or above\");"
    ],
    "added_lines": [
      "    if (!RMAPI_FUNC_SUPPORTED(RedisModule_CallReplyPromiseAbort) ||",
      "        !RMAPI_FUNC_SUPPORTED(RedisModule_GetServerVersion) ||",
      "                        \"RedisRaft requires Redis build from 'unstable' branch\");"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/RedisLabs/redisraft/pull/609",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/RedisLabs/redisraft/pull/609: 403 Client Error: Forbidden for url: https://api.github.com/repos/RedisLabs/redisraft/pulls/609",
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Defect Remediation & Feature Upgrades; **Confidence:** 0.9\n\n**Step-by-Step Explanation:**\n\n1. **Commit Message:** The message mentions improving version checks, indicating a focus on compatibility rather than security.\n2. **Vulnerability Description:** References an issue about compatibility warnings, not security flaws.\n3. **Code Changes:** Modify the version check in RedisModule_OnLoad, adding a function check and updating the warning message.\n4. **Purpose Evaluation:** Enhances compatibility detection, improving core functionality without addressing security.\n5. **Security Assessment:** No security terms or indicators, classified as a non-security fix.\n6. **Classification:** Fits \"Defect Remediation & Feature Upgrades\" due to core functionality improvement.\n7. **Confidence:** High at 0.9 due to clear non-security nature and definite core logic improvement."
}