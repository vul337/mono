{
  "cve_id": "CVE-2021-4284",
  "cwe_ids": [
    "CWE-79"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
  "cvss_is_v3": true,
  "repo_name": "openmrs/openmrs-module-htmlformentryui",
  "commit_msg": "Ra 1424:  escapeJs is vulnerable to XSS attacks  (#51)\n\n* RA-1424: escapeJs vulnerable to XSS\r\n\r\n* RA-1424: escapeJs vulnerable to XSS",
  "commit_hash": "811990972ea07649ae33c4b56c61c3b520895f07",
  "git_url": "https://github.com/openmrs/openmrs-module-htmlformentryui/commit/811990972ea07649ae33c4b56c61c3b520895f07",
  "file_path": "omod/src/main/java/org/openmrs/module/htmlformentryui/fragment/controller/htmlform/EnterHtmlFormFragmentController.java",
  "func_name": "submit",
  "func_before": "@Transactional\n\tpublic SimpleObject submit(UiSessionContext sessionContext, @RequestParam(\"personId\") Patient patient,\n\t        @RequestParam(\"htmlFormId\") HtmlForm hf,\n\t        @RequestParam(value = \"encounterId\", required = false) Encounter encounter,\n\t        @RequestParam(value = \"visitId\", required = false) Visit visit,\n\t        @RequestParam(value = \"createVisit\", required = false) Boolean createVisit,\n\t        @RequestParam(value = \"returnUrl\", required = false) String returnUrl,\n\t        @SpringBean(\"adtService\") AdtService adtService,\n\t        @SpringBean(\"featureToggles\") FeatureToggleProperties featureToggles, UiUtils ui, HttpServletRequest request)\n\t        throws Exception {\n\t\t\n\t\t// TODO formModifiedTimestamp and encounterModifiedTimestamp\n\t\t\n\t\tboolean editMode = encounter != null;\n\t\t\n\t\tFormEntrySession fes;\n\t\tif (encounter != null) {\n\t\t\tfes = new FormEntrySession(patient, encounter, FormEntryContext.Mode.EDIT, hf, request.getSession());\n\t\t} else {\n\t\t\tfes = new FormEntrySession(patient, hf, FormEntryContext.Mode.ENTER, request.getSession());\n\t\t}\n\t\t\n\t\tVisitDomainWrapper visitDomainWrapper = getVisitDomainWrapper(visit, encounter, adtService);\n\t\tsetupVelocityContext(fes, visitDomainWrapper, ui, sessionContext, featureToggles);\n\t\tsetupFormEntrySession(fes, visitDomainWrapper, null, ui, sessionContext, returnUrl);\n\t\tfes.getHtmlToDisplay(); // needs to happen before we validate or process a form\n\t\t\n\t\t// Validate and return with errors if any are found\n\t\tList<FormSubmissionError> validationErrors = fes.getSubmissionController().validateSubmission(fes.getContext(),\n\t\t    request);\n\t\tif (validationErrors.size() > 0) {\n\t\t\treturn returnHelper(validationErrors, fes, null);\n\t\t}\n\t\t\n\t\ttry {\n\t\t\t// No validation errors found so process form submission\n\t\t\tfes.prepareForSubmit();\n\t\t\tfes.getSubmissionController().handleFormSubmission(fes, request);\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\tStringWriter sw = new StringWriter();\n\t\t\tex.printStackTrace(new PrintWriter(sw));\n\t\t\tvalidationErrors.add(new FormSubmissionError(\"general-form-error\",\n\t\t\t        \"Form submission error \" + ex.getMessage() + \"<br/>\" + sw.toString()));\n\t\t\treturn returnHelper(validationErrors, fes, null);\n\t\t}\n\t\t\n\t\t// Check this form will actually create an encounter if its supposed to\n\t\tif (fes.getContext().getMode() == FormEntryContext.Mode.ENTER && fes.hasEncouterTag()\n\t\t        && (fes.getSubmissionActions().getEncountersToCreate() == null\n\t\t                || fes.getSubmissionActions().getEncountersToCreate().size() == 0)) {\n\t\t\tthrow new IllegalArgumentException(\"This form is not going to create an encounter\");\n\t\t}\n\t\t\n\t\tEncounter formEncounter = fes.getContext().getMode() == FormEntryContext.Mode.ENTER\n\t\t        ? fes.getSubmissionActions().getEncountersToCreate().get(0)\n\t\t        : encounter;\n\t\t\n\t\t// create a visit if necessary (note that this currently only works in real-time mode)\n\t\tif (createVisit != null && (createVisit) && visit == null) {\n\t\t\tvisit = adtService.ensureActiveVisit(patient, sessionContext.getSessionLocation());\n\t\t\tfes.getContext().setVisit(visit);\n\t\t}\n\t\t\n\t\t// attach to the visit if it exists and not already attached\n\t\tif (visit != null && (encounter == null || encounter.getVisit() == null)) {\n\t\t\ttry {\n\t\t\t\tnew EncounterDomainWrapper(formEncounter).attachToVisit(visit);\n\t\t\t}\n\t\t\tcatch (EncounterDateBeforeVisitStartDateException e) {\n\t\t\t\tvalidationErrors.add(\n\t\t\t\t    new FormSubmissionError(\"general-form-error\", ui.message(\"htmlformentryui.datetimeAfterVisitDate\")));\n\t\t\t}\n\t\t\tcatch (EncounterDateAfterVisitStopDateException e) {\n\t\t\t\tvalidationErrors.add(\n\t\t\t\t    new FormSubmissionError(\"general-form-error\", ui.message(\"htmlformentryui.datetimeBeforeVisitDate\")));\n\t\t\t}\n\t\t\t\n\t\t\tif (validationErrors.size() > 0) {\n\t\t\t\treturn returnHelper(validationErrors, fes, null);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Do actual encounter creation/updating\n\t\tfes.applyActions();\n\t\t\n\t\trequest.getSession().setAttribute(UiCommonsConstants.SESSION_ATTRIBUTE_INFO_MESSAGE,\n\t\t    ui.message(\n\t\t        editMode ? \"htmlformentryui.editHtmlForm.successMessage\" : \"htmlformentryui.enterHtmlForm.successMessage\",\n\t\t        ui.format(hf.getForm()), ui.escapeJs(ui.format(patient))));\n\t\trequest.getSession().setAttribute(UiCommonsConstants.SESSION_ATTRIBUTE_TOAST_MESSAGE, \"true\");\n\t\t\n\t\treturn returnHelper(null, fes, formEncounter);\n\t}",
  "abstract_func_before": "@Transactional\n\tpublic SimpleObject submit(UiSessionContext VAR_0, @RequestParam(\"personId\") Patient VAR_1,\n\t        @RequestParam(\"htmlFormId\") HtmlForm VAR_2,\n\t        @RequestParam(VAR_3 = \"encounterId\", VAR_4 = false) Encounter VAR_5,\n\t        @RequestParam(VAR_3 = \"visitId\", VAR_4 = false) Visit VAR_6,\n\t        @RequestParam(VAR_3 = \"createVisit\", VAR_4 = false) Boolean VAR_7,\n\t        @RequestParam(VAR_3 = \"returnUrl\", VAR_4 = false) String VAR_8,\n\t        @SpringBean(\"adtService\") AdtService VAR_9,\n\t        @SpringBean(\"featureToggles\") FeatureToggleProperties VAR_10, UiUtils VAR_11, HttpServletRequest VAR_12)\n\t        throws Exception {\n\t\t\n\t\t/* COMMENT_0 */\n\t\t\n\t\tboolean VAR_13 = VAR_5 != null;\n\t\t\n\t\tFormEntrySession VAR_14;\n\t\tif (VAR_5 != null) {\n\t\t\tVAR_14 = new FormEntrySession(VAR_1, VAR_5, VAR_15.Mode.EDIT, VAR_2, VAR_12.getSession());\n\t\t} else {\n\t\t\tVAR_14 = new FormEntrySession(VAR_1, VAR_2, VAR_15.Mode.ENTER, VAR_12.getSession());\n\t\t}\n\t\t\n\t\tVisitDomainWrapper VAR_16 = getVisitDomainWrapper(VAR_6, VAR_5, VAR_9);\n\t\tsetupVelocityContext(VAR_14, VAR_16, VAR_11, VAR_0, VAR_10);\n\t\tsetupFormEntrySession(VAR_14, VAR_16, null, VAR_11, VAR_0, VAR_8);\n\t\tVAR_14.getHtmlToDisplay(); /* COMMENT_1 */\n\t\t\n\t\t/* COMMENT_2 */\n\t\tList<FormSubmissionError> VAR_17 = VAR_14.getSubmissionController().validateSubmission(VAR_14.getContext(),\n\t\t    VAR_12);\n\t\tif (VAR_17.size() > 0) {\n\t\t\treturn returnHelper(VAR_17, VAR_14, null);\n\t\t}\n\t\t\n\t\ttry {\n\t\t\t/* COMMENT_3 */\n\t\t\tVAR_14.prepareForSubmit();\n\t\t\tVAR_14.getSubmissionController().handleFormSubmission(VAR_14, VAR_12);\n\t\t}\n\t\tcatch (Exception VAR_18) {\n\t\t\tStringWriter VAR_19 = new StringWriter();\n\t\t\tVAR_18.printStackTrace(new PrintWriter(VAR_19));\n\t\t\tVAR_17.add(new FormSubmissionError(\"general-form-error\",\n\t\t\t        \"Form submission error \" + VAR_18.getMessage() + \"<br/>\" + VAR_19.toString()));\n\t\t\treturn returnHelper(VAR_17, VAR_14, null);\n\t\t}\n\t\t\n\t\t/* COMMENT_4 */\n\t\tif (VAR_14.getContext().getMode() == VAR_15.Mode.ENTER && VAR_14.hasEncouterTag()\n\t\t        && (VAR_14.getSubmissionActions().getEncountersToCreate() == null\n\t\t                || VAR_14.getSubmissionActions().getEncountersToCreate().size() == 0)) {\n\t\t\tthrow new IllegalArgumentException(\"This form is not going to create an encounter\");\n\t\t}\n\t\t\n\t\tEncounter VAR_20 = VAR_14.getContext().getMode() == VAR_15.Mode.ENTER\n\t\t        ? VAR_14.getSubmissionActions().getEncountersToCreate().get(0)\n\t\t        : VAR_5;\n\t\t\n\t\t/* COMMENT_5 */\n\t\tif (VAR_7 != null && (VAR_7) && VAR_6 == null) {\n\t\t\tVAR_6 = VAR_9.ensureActiveVisit(VAR_1, VAR_0.getSessionLocation());\n\t\t\tVAR_14.getContext().setVisit(VAR_6);\n\t\t}\n\t\t\n\t\t/* COMMENT_6 */\n\t\tif (VAR_6 != null && (VAR_5 == null || VAR_5.getVisit() == null)) {\n\t\t\ttry {\n\t\t\t\tnew EncounterDomainWrapper(VAR_20).attachToVisit(VAR_6);\n\t\t\t}\n\t\t\tcatch (EncounterDateBeforeVisitStartDateException VAR_21) {\n\t\t\t\tVAR_17.add(\n\t\t\t\t    new FormSubmissionError(\"general-form-error\", VAR_11.message(\"htmlformentryui.datetimeAfterVisitDate\")));\n\t\t\t}\n\t\t\tcatch (EncounterDateAfterVisitStopDateException VAR_21) {\n\t\t\t\tVAR_17.add(\n\t\t\t\t    new FormSubmissionError(\"general-form-error\", VAR_11.message(\"htmlformentryui.datetimeBeforeVisitDate\")));\n\t\t\t}\n\t\t\t\n\t\t\tif (VAR_17.size() > 0) {\n\t\t\t\treturn returnHelper(VAR_17, VAR_14, null);\n\t\t\t}\n\t\t}\n\t\t\n\t\t/* COMMENT_7 */\n\t\tVAR_14.applyActions();\n\t\t\n\t\tVAR_12.getSession().setAttribute(VAR_22.SESSION_ATTRIBUTE_INFO_MESSAGE,\n\t\t    VAR_11.message(\n\t\t        VAR_13 ? \"htmlformentryui.editHtmlForm.successMessage\" : \"htmlformentryui.enterHtmlForm.successMessage\",\n\t\t        VAR_11.format(VAR_2.getForm()), VAR_11.escapeJs(VAR_11.format(VAR_1))));\n\t\tVAR_12.getSession().setAttribute(VAR_22.SESSION_ATTRIBUTE_TOAST_MESSAGE, \"true\");\n\t\t\n\t\treturn returnHelper(null, VAR_14, VAR_20);\n\t}",
  "func_graph_path_before": "openmrs/openmrs-module-htmlformentryui/811990972ea07649ae33c4b56c61c3b520895f07/EnterHtmlFormFragmentController.java/vul/before/0.json",
  "func": "@Transactional\n\tpublic SimpleObject submit(UiSessionContext sessionContext, @RequestParam(\"personId\") Patient patient,\n\t        @RequestParam(\"htmlFormId\") HtmlForm hf,\n\t        @RequestParam(value = \"encounterId\", required = false) Encounter encounter,\n\t        @RequestParam(value = \"visitId\", required = false) Visit visit,\n\t        @RequestParam(value = \"createVisit\", required = false) Boolean createVisit,\n\t        @RequestParam(value = \"returnUrl\", required = false) String returnUrl,\n\t        @SpringBean(\"adtService\") AdtService adtService,\n\t        @SpringBean(\"featureToggles\") FeatureToggleProperties featureToggles, UiUtils ui, HttpServletRequest request)\n\t        throws Exception {\n\t\t\n\t\t// TODO formModifiedTimestamp and encounterModifiedTimestamp\n\t\t\n\t\tboolean editMode = encounter != null;\n\t\t\n\t\tFormEntrySession fes;\n\t\tif (encounter != null) {\n\t\t\tfes = new FormEntrySession(patient, encounter, FormEntryContext.Mode.EDIT, hf, request.getSession());\n\t\t} else {\n\t\t\tfes = new FormEntrySession(patient, hf, FormEntryContext.Mode.ENTER, request.getSession());\n\t\t}\n\t\t\n\t\tVisitDomainWrapper visitDomainWrapper = getVisitDomainWrapper(visit, encounter, adtService);\n\t\tsetupVelocityContext(fes, visitDomainWrapper, ui, sessionContext, featureToggles);\n\t\tsetupFormEntrySession(fes, visitDomainWrapper, null, ui, sessionContext, returnUrl);\n\t\tfes.getHtmlToDisplay(); // needs to happen before we validate or process a form\n\t\t\n\t\t// Validate and return with errors if any are found\n\t\tList<FormSubmissionError> validationErrors = fes.getSubmissionController().validateSubmission(fes.getContext(),\n\t\t    request);\n\t\tif (validationErrors.size() > 0) {\n\t\t\treturn returnHelper(validationErrors, fes, null);\n\t\t}\n\t\t\n\t\ttry {\n\t\t\t// No validation errors found so process form submission\n\t\t\tfes.prepareForSubmit();\n\t\t\tfes.getSubmissionController().handleFormSubmission(fes, request);\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\tStringWriter sw = new StringWriter();\n\t\t\tex.printStackTrace(new PrintWriter(sw));\n\t\t\tvalidationErrors.add(new FormSubmissionError(\"general-form-error\",\n\t\t\t        \"Form submission error \" + ex.getMessage() + \"<br/>\" + sw.toString()));\n\t\t\treturn returnHelper(validationErrors, fes, null);\n\t\t}\n\t\t\n\t\t// Check this form will actually create an encounter if its supposed to\n\t\tif (fes.getContext().getMode() == FormEntryContext.Mode.ENTER && fes.hasEncouterTag()\n\t\t        && (fes.getSubmissionActions().getEncountersToCreate() == null\n\t\t                || fes.getSubmissionActions().getEncountersToCreate().size() == 0)) {\n\t\t\tthrow new IllegalArgumentException(\"This form is not going to create an encounter\");\n\t\t}\n\t\t\n\t\tEncounter formEncounter = fes.getContext().getMode() == FormEntryContext.Mode.ENTER\n\t\t        ? fes.getSubmissionActions().getEncountersToCreate().get(0)\n\t\t        : encounter;\n\t\t\n\t\t// create a visit if necessary (note that this currently only works in real-time mode)\n\t\tif (createVisit != null && (createVisit) && visit == null) {\n\t\t\tvisit = adtService.ensureActiveVisit(patient, sessionContext.getSessionLocation());\n\t\t\tfes.getContext().setVisit(visit);\n\t\t}\n\t\t\n\t\t// attach to the visit if it exists and not already attached\n\t\tif (visit != null && (encounter == null || encounter.getVisit() == null)) {\n\t\t\ttry {\n\t\t\t\tnew EncounterDomainWrapper(formEncounter).attachToVisit(visit);\n\t\t\t}\n\t\t\tcatch (EncounterDateBeforeVisitStartDateException e) {\n\t\t\t\tvalidationErrors.add(\n\t\t\t\t    new FormSubmissionError(\"general-form-error\", ui.message(\"htmlformentryui.datetimeAfterVisitDate\")));\n\t\t\t}\n\t\t\tcatch (EncounterDateAfterVisitStopDateException e) {\n\t\t\t\tvalidationErrors.add(\n\t\t\t\t    new FormSubmissionError(\"general-form-error\", ui.message(\"htmlformentryui.datetimeBeforeVisitDate\")));\n\t\t\t}\n\t\t\t\n\t\t\tif (validationErrors.size() > 0) {\n\t\t\t\treturn returnHelper(validationErrors, fes, null);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Do actual encounter creation/updating\n\t\tfes.applyActions();\n\t\t\n\t\trequest.getSession().setAttribute(UiCommonsConstants.SESSION_ATTRIBUTE_INFO_MESSAGE,\n\t\t    ui.message(\n\t\t        editMode ? \"htmlformentryui.editHtmlForm.successMessage\" : \"htmlformentryui.enterHtmlForm.successMessage\",\n\t\t        ui.format(hf.getForm()), ui.encodeJavaScript(ui.format(patient))));\n\t\trequest.getSession().setAttribute(UiCommonsConstants.SESSION_ATTRIBUTE_TOAST_MESSAGE, \"true\");\n\t\t\n\t\treturn returnHelper(null, fes, formEncounter);\n\t}",
  "abstract_func": "@Transactional\n\tpublic SimpleObject submit(UiSessionContext VAR_0, @RequestParam(\"personId\") Patient VAR_1,\n\t        @RequestParam(\"htmlFormId\") HtmlForm VAR_2,\n\t        @RequestParam(VAR_3 = \"encounterId\", VAR_4 = false) Encounter VAR_5,\n\t        @RequestParam(VAR_3 = \"visitId\", VAR_4 = false) Visit VAR_6,\n\t        @RequestParam(VAR_3 = \"createVisit\", VAR_4 = false) Boolean VAR_7,\n\t        @RequestParam(VAR_3 = \"returnUrl\", VAR_4 = false) String VAR_8,\n\t        @SpringBean(\"adtService\") AdtService VAR_9,\n\t        @SpringBean(\"featureToggles\") FeatureToggleProperties VAR_10, UiUtils VAR_11, HttpServletRequest VAR_12)\n\t        throws Exception {\n\t\t\n\t\t/* COMMENT_0 */\n\t\t\n\t\tboolean VAR_13 = VAR_5 != null;\n\t\t\n\t\tFormEntrySession VAR_14;\n\t\tif (VAR_5 != null) {\n\t\t\tVAR_14 = new FormEntrySession(VAR_1, VAR_5, VAR_15.Mode.EDIT, VAR_2, VAR_12.getSession());\n\t\t} else {\n\t\t\tVAR_14 = new FormEntrySession(VAR_1, VAR_2, VAR_15.Mode.ENTER, VAR_12.getSession());\n\t\t}\n\t\t\n\t\tVisitDomainWrapper VAR_16 = getVisitDomainWrapper(VAR_6, VAR_5, VAR_9);\n\t\tsetupVelocityContext(VAR_14, VAR_16, VAR_11, VAR_0, VAR_10);\n\t\tsetupFormEntrySession(VAR_14, VAR_16, null, VAR_11, VAR_0, VAR_8);\n\t\tVAR_14.getHtmlToDisplay(); /* COMMENT_1 */\n\t\t\n\t\t/* COMMENT_2 */\n\t\tList<FormSubmissionError> VAR_17 = VAR_14.getSubmissionController().validateSubmission(VAR_14.getContext(),\n\t\t    VAR_12);\n\t\tif (VAR_17.size() > 0) {\n\t\t\treturn returnHelper(VAR_17, VAR_14, null);\n\t\t}\n\t\t\n\t\ttry {\n\t\t\t/* COMMENT_3 */\n\t\t\tVAR_14.prepareForSubmit();\n\t\t\tVAR_14.getSubmissionController().handleFormSubmission(VAR_14, VAR_12);\n\t\t}\n\t\tcatch (Exception VAR_18) {\n\t\t\tStringWriter VAR_19 = new StringWriter();\n\t\t\tVAR_18.printStackTrace(new PrintWriter(VAR_19));\n\t\t\tVAR_17.add(new FormSubmissionError(\"general-form-error\",\n\t\t\t        \"Form submission error \" + VAR_18.getMessage() + \"<br/>\" + VAR_19.toString()));\n\t\t\treturn returnHelper(VAR_17, VAR_14, null);\n\t\t}\n\t\t\n\t\t/* COMMENT_4 */\n\t\tif (VAR_14.getContext().getMode() == VAR_15.Mode.ENTER && VAR_14.hasEncouterTag()\n\t\t        && (VAR_14.getSubmissionActions().getEncountersToCreate() == null\n\t\t                || VAR_14.getSubmissionActions().getEncountersToCreate().size() == 0)) {\n\t\t\tthrow new IllegalArgumentException(\"This form is not going to create an encounter\");\n\t\t}\n\t\t\n\t\tEncounter VAR_20 = VAR_14.getContext().getMode() == VAR_15.Mode.ENTER\n\t\t        ? VAR_14.getSubmissionActions().getEncountersToCreate().get(0)\n\t\t        : VAR_5;\n\t\t\n\t\t/* COMMENT_5 */\n\t\tif (VAR_7 != null && (VAR_7) && VAR_6 == null) {\n\t\t\tVAR_6 = VAR_9.ensureActiveVisit(VAR_1, VAR_0.getSessionLocation());\n\t\t\tVAR_14.getContext().setVisit(VAR_6);\n\t\t}\n\t\t\n\t\t/* COMMENT_6 */\n\t\tif (VAR_6 != null && (VAR_5 == null || VAR_5.getVisit() == null)) {\n\t\t\ttry {\n\t\t\t\tnew EncounterDomainWrapper(VAR_20).attachToVisit(VAR_6);\n\t\t\t}\n\t\t\tcatch (EncounterDateBeforeVisitStartDateException VAR_21) {\n\t\t\t\tVAR_17.add(\n\t\t\t\t    new FormSubmissionError(\"general-form-error\", VAR_11.message(\"htmlformentryui.datetimeAfterVisitDate\")));\n\t\t\t}\n\t\t\tcatch (EncounterDateAfterVisitStopDateException VAR_21) {\n\t\t\t\tVAR_17.add(\n\t\t\t\t    new FormSubmissionError(\"general-form-error\", VAR_11.message(\"htmlformentryui.datetimeBeforeVisitDate\")));\n\t\t\t}\n\t\t\t\n\t\t\tif (VAR_17.size() > 0) {\n\t\t\t\treturn returnHelper(VAR_17, VAR_14, null);\n\t\t\t}\n\t\t}\n\t\t\n\t\t/* COMMENT_7 */\n\t\tVAR_14.applyActions();\n\t\t\n\t\tVAR_12.getSession().setAttribute(VAR_22.SESSION_ATTRIBUTE_INFO_MESSAGE,\n\t\t    VAR_11.message(\n\t\t        VAR_13 ? \"htmlformentryui.editHtmlForm.successMessage\" : \"htmlformentryui.enterHtmlForm.successMessage\",\n\t\t        VAR_11.format(VAR_2.getForm()), VAR_11.encodeJavaScript(VAR_11.format(VAR_1))));\n\t\tVAR_12.getSession().setAttribute(VAR_22.SESSION_ATTRIBUTE_TOAST_MESSAGE, \"true\");\n\t\t\n\t\treturn returnHelper(null, VAR_14, VAR_20);\n\t}",
  "func_graph_path": "openmrs/openmrs-module-htmlformentryui/811990972ea07649ae33c4b56c61c3b520895f07/EnterHtmlFormFragmentController.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -87,7 +87,7 @@\n \t\trequest.getSession().setAttribute(UiCommonsConstants.SESSION_ATTRIBUTE_INFO_MESSAGE,\n \t\t    ui.message(\n \t\t        editMode ? \"htmlformentryui.editHtmlForm.successMessage\" : \"htmlformentryui.enterHtmlForm.successMessage\",\n-\t\t        ui.format(hf.getForm()), ui.escapeJs(ui.format(patient))));\n+\t\t        ui.format(hf.getForm()), ui.encodeJavaScript(ui.format(patient))));\n \t\trequest.getSession().setAttribute(UiCommonsConstants.SESSION_ATTRIBUTE_TOAST_MESSAGE, \"true\");\n \t\t\n \t\treturn returnHelper(null, fes, formEncounter);",
  "diff_line_info": {
    "deleted_lines": [
      "\t\t        ui.format(hf.getForm()), ui.escapeJs(ui.format(patient))));"
    ],
    "added_lines": [
      "\t\t        ui.format(hf.getForm()), ui.encodeJavaScript(ui.format(patient))));"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/openmrs/openmrs-module-htmlformentryui/pull/51",
  "description": {
    "pr_info": {
      "title": "Ra 1424:  escapeJs is vulnerable to XSS attacks ",
      "number": 51
    },
    "comment": [
      "issue link:  https://issues.openmrs.org/browse/RA-1424?filter=-1\r\n\r\nThere is no breakage in the UI\r\ncc @isears @sherrif10 \r\n"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 1.0"
}