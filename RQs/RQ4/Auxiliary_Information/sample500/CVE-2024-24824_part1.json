{
  "cve_id": "CVE-2024-24824",
  "cwe_ids": [
    "CWE-863"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
  "cvss_is_v3": true,
  "repo_name": "Graylog2/graylog2-server",
  "commit_msg": "Restrict classes allowed for cluster config and event types (#18165) (#18179)\n\n* Restrict classes allowed for cluster config and event types (#18165)\r\n\r\nAdd a new safe_classes configuration option to restrict the classes allowed to be used\r\nas cluster config and event types.\r\nThe configuration option allows to specify a comma-separated set of prefixes matched\r\nagainst the fully qualified class name.\r\n\r\nFor now, the default value for the configuration is org.graylog.,org.graylog2., which will\r\nallow all classes that Graylog maintains.\r\n\r\nThis should work out of the box for almost all setups. Changing the default value might\r\nonly be necessary if external plugins require cluster config or event types outside the\r\n\"org.graylog.\" or \"org.graylog2.\" namespaces. If that is the case, the configuration setting\r\ncan be adjusted to cover this use case, e.b. by setting it to\r\n\r\n    safe_classes = org.graylog.,org.graylog2.,custom.plugin.namespace.\r\n\r\nif said classes are located within the custom.plugin.namespace package.\r\n\r\nRefs: https://github.com/Graylog2/graylog2-server/security/advisories/GHSA-p6gg-5hf4-4rgj\r\n\r\n(cherry picked from commit 813203263b06dda18e2aed68ae92b34277f904b4)\r\n\r\n* Use javax.inject.Inject instead of jakarta.inject.Inject\r\n\r\n* Use javax.ws.rs instead of jakarta.ws.rs\r\n\r\n---------\r\n\r\nCo-authored-by: Othello Maurer <othello@graylog.com>",
  "commit_hash": "75ef2b8d60e7d67f859b79fe712c8ae7b2e861d8",
  "git_url": "https://github.com/Graylog2/graylog2-server/commit/75ef2b8d60e7d67f859b79fe712c8ae7b2e861d8",
  "file_path": "graylog2-server/src/main/java/org/graylog2/events/ClusterEventPeriodical.java",
  "func_name": "extractPayload",
  "func_before": "private Object extractPayload(Object payload, String eventClass) {\n        try {\n            final Class<?> clazz = chainingClassLoader.loadClass(eventClass);\n            return objectMapper.convertValue(payload, clazz);\n        } catch (ClassNotFoundException e) {\n            LOG.debug(\"Couldn't load class <\" + eventClass + \"> for event\", e);\n            return null;\n        } catch (IllegalArgumentException e) {\n            LOG.debug(\"Error while deserializing payload\", e);\n            return null;\n\n        }\n    }",
  "abstract_func_before": "private Object extractPayload(Object VAR_0, String VAR_1) {\n        try {\n            final Class<?> VAR_2 = VAR_3.loadClass(VAR_1);\n            return VAR_4.convertValue(VAR_0, VAR_2);\n        } catch (ClassNotFoundException VAR_5) {\n            VAR_6.debug(\"Couldn't load class <\" + VAR_1 + \"> for event\", VAR_5);\n            return null;\n        } catch (IllegalArgumentException VAR_5) {\n            VAR_6.debug(\"Error while deserializing payload\", VAR_5);\n            return null;\n\n        }\n    }",
  "func_graph_path_before": "Graylog2/graylog2-server/75ef2b8d60e7d67f859b79fe712c8ae7b2e861d8/ClusterEventPeriodical.java/vul/before/0.json",
  "func": "private Object extractPayload(Object payload, String eventClass) {\n        try {\n            final Class<?> clazz = chainingClassLoader.loadClassSafely(eventClass);\n            return objectMapper.convertValue(payload, clazz);\n        } catch (ClassNotFoundException e) {\n            LOG.debug(\"Couldn't load class <\" + eventClass + \"> for event\", e);\n        } catch (IllegalArgumentException e) {\n            LOG.debug(\"Error while deserializing payload\", e);\n        } catch (UnsafeClassLoadingAttemptException e) {\n            LOG.warn(\"Couldn't load class <{}>.\", eventClass, e);\n        }\n        return null;\n    }",
  "abstract_func": "private Object extractPayload(Object VAR_0, String VAR_1) {\n        try {\n            final Class<?> VAR_2 = VAR_3.loadClassSafely(VAR_1);\n            return VAR_4.convertValue(VAR_0, VAR_2);\n        } catch (ClassNotFoundException VAR_5) {\n            VAR_6.debug(\"Couldn't load class <\" + VAR_1 + \"> for event\", VAR_5);\n        } catch (IllegalArgumentException VAR_5) {\n            VAR_6.debug(\"Error while deserializing payload\", VAR_5);\n        } catch (UnsafeClassLoadingAttemptException VAR_5) {\n            VAR_6.warn(\"Couldn't load class <{}>.\", VAR_1, VAR_5);\n        }\n        return null;\n    }",
  "func_graph_path": "Graylog2/graylog2-server/75ef2b8d60e7d67f859b79fe712c8ae7b2e861d8/ClusterEventPeriodical.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,13 +1,13 @@\n private Object extractPayload(Object payload, String eventClass) {\n         try {\n-            final Class<?> clazz = chainingClassLoader.loadClass(eventClass);\n+            final Class<?> clazz = chainingClassLoader.loadClassSafely(eventClass);\n             return objectMapper.convertValue(payload, clazz);\n         } catch (ClassNotFoundException e) {\n             LOG.debug(\"Couldn't load class <\" + eventClass + \"> for event\", e);\n-            return null;\n         } catch (IllegalArgumentException e) {\n             LOG.debug(\"Error while deserializing payload\", e);\n-            return null;\n-\n+        } catch (UnsafeClassLoadingAttemptException e) {\n+            LOG.warn(\"Couldn't load class <{}>.\", eventClass, e);\n         }\n+        return null;\n     }",
  "diff_line_info": {
    "deleted_lines": [
      "            final Class<?> clazz = chainingClassLoader.loadClass(eventClass);",
      "            return null;",
      "            return null;",
      ""
    ],
    "added_lines": [
      "            final Class<?> clazz = chainingClassLoader.loadClassSafely(eventClass);",
      "        } catch (UnsafeClassLoadingAttemptException e) {",
      "            LOG.warn(\"Couldn't load class <{}>.\", eventClass, e);",
      "        return null;"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/Graylog2/graylog2-server/pull/18179",
  "description": {
    "pr_info": {
      "title": "Restrict classes allowed for cluster config and event types (#18165)",
      "number": 18179
    },
    "comment": [
      "Add a new safe_classes configuration option to restrict the classes allowed to be used as cluster config and event types.\r\nThe configuration option allows to specify a comma-separated set of prefixes matched against the fully qualified class name.\r\n\r\nFor now, the default value for the configuration is org.graylog.,org.graylog2., which will allow all classes that Graylog maintains.\r\n\r\nThis should work out of the box for almost all setups. Changing the default value might only be necessary if external plugins require cluster config or event types outside the \"org.graylog.\" or \"org.graylog2.\" namespaces. If that is the case, the configuration setting can be adjusted to cover this use case, e.b. by setting it to\r\n\r\n    safe_classes = org.graylog.,org.graylog2.,custom.plugin.namespace.\r\n\r\nif said classes are located within the custom.plugin.namespace package.\r\n\r\nRefs: https://github.com/Graylog2/graylog2-server/security/advisories/GHSA-p6gg-5hf4-4rgj\r\n\r\n(cherry picked from commit 813203263b06dda18e2aed68ae92b34277f904b4)"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 1.0"
}