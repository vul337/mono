{
  "cve_id": "CVE-2021-36144",
  "cwe_ids": [
    "CWE-416"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "projectacrn/acrn-hypervisor",
  "commit_msg": "dm: Reset virtio device before release\n\nWith virtio polling mode enabled, a timer is running in the virtio\nbackend service. And the timer will also be triggered if its frondend\ndriver didn't do the device reset in shutdown. A freed virtio device\nwill be accessed in the polling timer handler.\n\nDo the virtio reset() callback specifically to clear the polling timer\nbefore the free.\n\nTracked-On: #6147\nSigned-off-by: Shuo A Liu <shuo.a.liu@intel.com>\nSigned-off-by: Yonghua Huang <yonghua.huang@intel.com>",
  "commit_hash": "dd88504804e186029f845a166dc5c31695e2cca2",
  "git_url": "https://github.com/projectacrn/acrn-hypervisor/commit/dd88504804e186029f845a166dc5c31695e2cca2",
  "file_path": "devicemodel/hw/pci/virtio/virtio_rpmb.c",
  "func_name": "virtio_rpmb_deinit",
  "func_before": "static void\nvirtio_rpmb_deinit(struct vmctx *ctx, struct pci_vdev *dev, char *opts)\n{\n\tif (dev->arg) {\n\t\tDPRINTF((\"virtio_rpmb_be_deinit: free struct virtio_rpmb!\\n\"));\n\t\tfree((struct virtio_rpmb *)dev->arg);\n\t}\n}",
  "abstract_func_before": "static void\nvirtio_rpmb_deinit(struct vmctx *VAR_0, struct pci_vdev *VAR_1, char *VAR_2)\n{\n\tif (VAR_1->arg) {\n\t\tDPRINTF((\"virtio_rpmb_be_deinit: free struct virtio_rpmb!\\n\"));\n\t\tfree((struct virtio_rpmb *)VAR_1->arg);\n\t}\n}",
  "func_graph_path_before": "projectacrn/acrn-hypervisor/dd88504804e186029f845a166dc5c31695e2cca2/virtio_rpmb.c/vul/before/0.json",
  "func": "static void\nvirtio_rpmb_deinit(struct vmctx *ctx, struct pci_vdev *dev, char *opts)\n{\n\tif (dev->arg) {\n\t\tDPRINTF((\"virtio_rpmb_be_deinit: free struct virtio_rpmb!\\n\"));\n\t\tvirtio_rpmb_reset(dev->arg);\n\t\tfree((struct virtio_rpmb *)dev->arg);\n\t}\n}",
  "abstract_func": "static void\nvirtio_rpmb_deinit(struct vmctx *VAR_0, struct pci_vdev *VAR_1, char *VAR_2)\n{\n\tif (VAR_1->arg) {\n\t\tDPRINTF((\"virtio_rpmb_be_deinit: free struct virtio_rpmb!\\n\"));\n\t\tvirtio_rpmb_reset(VAR_1->arg);\n\t\tfree((struct virtio_rpmb *)VAR_1->arg);\n\t}\n}",
  "func_graph_path": "projectacrn/acrn-hypervisor/dd88504804e186029f845a166dc5c31695e2cca2/virtio_rpmb.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -3,6 +3,7 @@\n {\n \tif (dev->arg) {\n \t\tDPRINTF((\"virtio_rpmb_be_deinit: free struct virtio_rpmb!\\n\"));\n+\t\tvirtio_rpmb_reset(dev->arg);\n \t\tfree((struct virtio_rpmb *)dev->arg);\n \t}\n }",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "\t\tvirtio_rpmb_reset(dev->arg);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/projectacrn/acrn-hypervisor/pull/6268",
  "description": {
    "pr_info": {
      "title": "dm: Reset virtio device before release",
      "number": 6268
    },
    "comment": [
      "With virtio polling mode enabled, a timer is running in the virtio\r\nbackend service. And the timer will also be triggered if its frondend\r\ndriver didn't do the device reset in shutdown. A freed virtio device\r\nwill be accessed in the polling timer handler.\r\n\r\nDo the virtio reset() callback specifically to clear the polling timer\r\nbefore the free.\r\n\r\nTracked-On: #6147\r\nSigned-off-by: Shuo A Liu <shuo.a.liu@intel.com>\r\nSigned-off-by: Yonghua Huang <yonghua.huang@intel.com>",
      "@shuox  @ywan170  this PR to back backport from release_2.5 branch, please review.",
      "No new violations to the coding guideline detected.<br>No New Name Conflict<br>No New Function Declaration/Definition Mismatch"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "The patch addresses a potential use-after-free vulnerability in the virtio device management, ensuring resources are properly reset and cleared before being freed, which prevents unauthorized access to already released memory. \n\n**Final Classification:** Security Vulnerability Fix; **Confidence:** 0.95\n\nStep-by-step explanation:\n\n1. **Input Analysis**: The commit message and description indicate that a timer might access a freed device, which is a security risk. The code adds a reset before freeing, addressing this issue.\n\n2. **Consistency Check**: The code change directly matches the problem described, ensuring the reset happens before freeing.\n\n3. **Purpose Evaluation**: The change modifies core logic to fix a memory management issue, which is crucial for security.\n\n4. **Security Assessment**: The fix addresses a memory corruption vulnerability, classifying it as a security patch.\n\n5. **Confidence**: High confidence as the issue is clearly a security concern and the fix is direct and relevant.\n\n**Final Classification:** Security Vulnerability Fix; **Confidence:** 0.95"
}