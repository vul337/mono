{
  "cve_id": "CVE-2018-20742",
  "cwe_ids": [
    "CWE-787"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:N/I:P/A:N",
  "cvss_is_v3": false,
  "repo_name": "mc2-project/opaque-sql",
  "commit_msg": "Check that ecall [user_check] pointers and ocall_malloc result pointer are outside enclave (#67)\n\nThis should reduce the enclave's attack surface by preventing an attacker from invoking ecalls on or triggering unexpected writes to arbitrary enclave memory, which could potentially leak information about that memory or lead to incorrect results.\r\n\r\nFixes #36. Fixes #66.",
  "commit_hash": "5ddda15d89f5ac82f4416208c5319ace4aecdc36",
  "git_url": "https://github.com/mc2-project/opaque-sql/commit/5ddda15d89f5ac82f4416208c5319ace4aecdc36",
  "file_path": "src/enclave/Enclave/Enclave.cpp",
  "func_name": "ecall_project",
  "func_before": "void ecall_project(uint8_t *condition, size_t condition_length,\n                   uint8_t *input_rows, size_t input_rows_length,\n                   uint8_t **output_rows, size_t *output_rows_length) {\n  try {\n    project(condition, condition_length,\n            input_rows, input_rows_length,\n            output_rows, output_rows_length);\n  } catch (const std::runtime_error &e) {\n    ocall_throw(e.what());\n  }\n}",
  "abstract_func_before": "void ecall_project(uint8_t *VAR_0, size_t VAR_1,\n                   uint8_t *VAR_2, size_t VAR_3,\n                   uint8_t **VAR_4, size_t *VAR_5) {\n  try {\n    project(VAR_0, VAR_1,\n            VAR_2, VAR_3,\n            VAR_4, VAR_5);\n  } catch (const std::runtime_error &VAR_6) {\n    ocall_throw(VAR_6.what());\n  }\n}",
  "func_graph_path_before": "mc2-project/opaque-sql/5ddda15d89f5ac82f4416208c5319ace4aecdc36/Enclave.cpp/vul/before/2.json",
  "func": "void ecall_project(uint8_t *condition, size_t condition_length,\n                   uint8_t *input_rows, size_t input_rows_length,\n                   uint8_t **output_rows, size_t *output_rows_length) {\n  // Guard against operating on arbitrary enclave memory\n  assert(sgx_is_outside_enclave(input_rows, input_rows_length) == 1);\n  sgx_lfence();\n\n  try {\n    project(condition, condition_length,\n            input_rows, input_rows_length,\n            output_rows, output_rows_length);\n  } catch (const std::runtime_error &e) {\n    ocall_throw(e.what());\n  }\n}",
  "abstract_func": "void ecall_project(uint8_t *VAR_0, size_t VAR_1,\n                   uint8_t *VAR_2, size_t VAR_3,\n                   uint8_t **VAR_4, size_t *VAR_5) {\n  /* COMMENT_0 */\n  assert(sgx_is_outside_enclave(VAR_2, VAR_3) == 1);\n  sgx_lfence();\n\n  try {\n    project(VAR_0, VAR_1,\n            VAR_2, VAR_3,\n            VAR_4, VAR_5);\n  } catch (const std::runtime_error &VAR_6) {\n    ocall_throw(VAR_6.what());\n  }\n}",
  "func_graph_path": "mc2-project/opaque-sql/5ddda15d89f5ac82f4416208c5319ace4aecdc36/Enclave.cpp/vul/after/2.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,6 +1,10 @@\n void ecall_project(uint8_t *condition, size_t condition_length,\n                    uint8_t *input_rows, size_t input_rows_length,\n                    uint8_t **output_rows, size_t *output_rows_length) {\n+  // Guard against operating on arbitrary enclave memory\n+  assert(sgx_is_outside_enclave(input_rows, input_rows_length) == 1);\n+  sgx_lfence();\n+\n   try {\n     project(condition, condition_length,\n             input_rows, input_rows_length,",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "  // Guard against operating on arbitrary enclave memory",
      "  assert(sgx_is_outside_enclave(input_rows, input_rows_length) == 1);",
      "  sgx_lfence();",
      ""
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/mc2-project/opaque-sql/pull/67",
  "description": {
    "pr_info": {
      "title": "Check that ecall [user_check] pointers and ocall_malloc result pointer are outside enclave",
      "number": 67
    },
    "comment": [
      "This should reduce the enclave's attack surface by preventing an attacker from invoking ecalls on or triggering unexpected writes to arbitrary enclave memory, which could potentially leak information about that memory or lead to incorrect results.\r\n\r\nFixes #36. Fixes #66."
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 1.0"
}