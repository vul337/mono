{
  "cve_id": "CVE-2014-7272",
  "cwe_ids": [
    "CWE-264"
  ],
  "cvss_vector": "AV:L/AC:L/Au:N/C:C/I:C/A:C",
  "cvss_is_v3": false,
  "repo_name": "sddm",
  "commit_msg": "Move onAuthenticated XAUTHORITY generation to the helper\n\nThis avoids it being created as root and then chown'd.",
  "commit_hash": "e92c466f5c324b429ce1a8aa1b40d208574c778a",
  "git_url": "https://github.com/sddm/sddm/commit/e92c466f5c324b429ce1a8aa1b40d208574c778a",
  "file_path": "src/auth/Auth.cpp",
  "func_name": "Auth::Private::dataPending",
  "func_before": "void Auth::Private::dataPending() {\n        Auth *auth = qobject_cast<Auth*>(parent());\n        Msg m = MSG_UNKNOWN;\n        SafeDataStream str(socket);\n        str.receive();\n        str >> m;\n        switch (m) {\n            case ERROR: {\n                QString message;\n                Error type = ERROR_NONE;\n                str >> message >> type;\n                Q_EMIT auth->error(message, type);\n                break;\n            }\n            case INFO: {\n                QString message;\n                Info type = INFO_NONE;\n                str >> message >> type;\n                Q_EMIT auth->info(message, type);\n                break;\n            }\n            case REQUEST: {\n                Request r;\n                str >> r;\n                request->setRequest(&r);\n                break;\n            }\n            case AUTHENTICATED: {\n                QString user;\n                str >> user;\n                if (!user.isEmpty()) {\n                    auth->setUser(user);\n                    Q_EMIT auth->authentication(user, true);\n                    str.reset();\n                    str << AUTHENTICATED << environment;\n                    str.send();\n                }\n                else {\n                    Q_EMIT auth->authentication(user, false);\n                }\n                break;\n            }\n            case SESSION_STATUS: {\n                bool status;\n                str >> status;\n                Q_EMIT auth->session(status);\n                str.reset();\n                str << SESSION_STATUS;\n                str.send();\n                break;\n            }\n            default: {\n                Q_EMIT auth->error(QString(\"Auth: Unexpected value received: %1\").arg(m), ERROR_INTERNAL);\n            }\n        }\n    }",
  "abstract_func_before": "void Auth::Private::dataPending() {\n        Auth *VAR_0 = VAR_1<Auth*>(parent());\n        Msg VAR_2 = VAR_3;\n        SafeDataStream str(socket);\n        VAR_4.receive();\n        VAR_4 >> VAR_2;\n        switch (VAR_2) {\n            case VAR_5: {\n                QString VAR_6;\n                Error VAR_7 = VAR_8;\n                VAR_4 >> VAR_6 >> VAR_7;\n                Q_EMIT VAR_0->error(VAR_6, VAR_7);\n                break;\n            }\n            case VAR_9: {\n                QString VAR_6;\n                Info VAR_7 = VAR_10;\n                VAR_4 >> VAR_6 >> VAR_7;\n                Q_EMIT VAR_0->info(message, type);\n                break;\n            }\n            case VAR_11: {\n                Request VAR_12;\n                VAR_4 >> VAR_12;\n                VAR_13->setRequest(&VAR_12);\n                break;\n            }\n            case VAR_14: {\n                QString VAR_15;\n                VAR_4 >> VAR_15;\n                if (!VAR_15.isEmpty()) {\n                    VAR_0->setUser(VAR_15);\n                    Q_EMIT VAR_0->authentication(user, true);\n                    VAR_4.reset();\n                    VAR_4 << VAR_14 << VAR_16;\n                    VAR_4.send();\n                }\n                else {\n                    Q_EMIT VAR_0->authentication(user, false);\n                }\n                break;\n            }\n            case VAR_17: {\n                bool VAR_18;\n                VAR_4 >> VAR_18;\n                Q_EMIT VAR_0->session(status);\n                VAR_4.reset();\n                VAR_4 << VAR_17;\n                VAR_4.send();\n                break;\n            }\n            default: {\n                Q_EMIT VAR_0->error(QString(\"Auth: Unexpected value received: %1\").arg(VAR_2), VAR_19);\n            }\n        }\n    }",
  "func_graph_path_before": "sddm/e92c466f5c324b429ce1a8aa1b40d208574c778a/Auth.cpp/vul/before/0.json",
  "func": "void Auth::Private::dataPending() {\n        Auth *auth = qobject_cast<Auth*>(parent());\n        Msg m = MSG_UNKNOWN;\n        SafeDataStream str(socket);\n        str.receive();\n        str >> m;\n        switch (m) {\n            case ERROR: {\n                QString message;\n                Error type = ERROR_NONE;\n                str >> message >> type;\n                Q_EMIT auth->error(message, type);\n                break;\n            }\n            case INFO: {\n                QString message;\n                Info type = INFO_NONE;\n                str >> message >> type;\n                Q_EMIT auth->info(message, type);\n                break;\n            }\n            case REQUEST: {\n                Request r;\n                str >> r;\n                request->setRequest(&r);\n                break;\n            }\n            case AUTHENTICATED: {\n                QString user;\n                str >> user;\n                if (!user.isEmpty()) {\n                    auth->setUser(user);\n                    Q_EMIT auth->authentication(user, true);\n                    str.reset();\n                    str << AUTHENTICATED << environment << cookie;\n                    str.send();\n                }\n                else {\n                    Q_EMIT auth->authentication(user, false);\n                }\n                break;\n            }\n            case SESSION_STATUS: {\n                bool status;\n                str >> status;\n                Q_EMIT auth->session(status);\n                str.reset();\n                str << SESSION_STATUS;\n                str.send();\n                break;\n            }\n            default: {\n                Q_EMIT auth->error(QString(\"Auth: Unexpected value received: %1\").arg(m), ERROR_INTERNAL);\n            }\n        }\n    }",
  "abstract_func": "void Auth::Private::dataPending() {\n        Auth *VAR_0 = VAR_1<Auth*>(parent());\n        Msg VAR_2 = VAR_3;\n        SafeDataStream str(socket);\n        VAR_4.receive();\n        VAR_4 >> VAR_2;\n        switch (VAR_2) {\n            case VAR_5: {\n                QString VAR_6;\n                Error VAR_7 = VAR_8;\n                VAR_4 >> VAR_6 >> VAR_7;\n                Q_EMIT VAR_0->error(VAR_6, VAR_7);\n                break;\n            }\n            case VAR_9: {\n                QString VAR_6;\n                Info VAR_7 = VAR_10;\n                VAR_4 >> VAR_6 >> VAR_7;\n                Q_EMIT VAR_0->info(message, type);\n                break;\n            }\n            case VAR_11: {\n                Request VAR_12;\n                VAR_4 >> VAR_12;\n                VAR_13->setRequest(&VAR_12);\n                break;\n            }\n            case VAR_14: {\n                QString VAR_15;\n                VAR_4 >> VAR_15;\n                if (!VAR_15.isEmpty()) {\n                    VAR_0->setUser(VAR_15);\n                    Q_EMIT VAR_0->authentication(user, true);\n                    VAR_4.reset();\n                    VAR_4 << VAR_14 << VAR_16 << VAR_17;\n                    VAR_4.send();\n                }\n                else {\n                    Q_EMIT VAR_0->authentication(user, false);\n                }\n                break;\n            }\n            case VAR_18: {\n                bool VAR_19;\n                VAR_4 >> VAR_19;\n                Q_EMIT VAR_0->session(status);\n                VAR_4.reset();\n                VAR_4 << VAR_18;\n                VAR_4.send();\n                break;\n            }\n            default: {\n                Q_EMIT VAR_0->error(QString(\"Auth: Unexpected value received: %1\").arg(VAR_2), VAR_20);\n            }\n        }\n    }",
  "func_graph_path": "sddm/e92c466f5c324b429ce1a8aa1b40d208574c778a/Auth.cpp/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -32,7 +32,7 @@\n                     auth->setUser(user);\n                     Q_EMIT auth->authentication(user, true);\n                     str.reset();\n-                    str << AUTHENTICATED << environment;\n+                    str << AUTHENTICATED << environment << cookie;\n                     str.send();\n                 }\n                 else {",
  "diff_line_info": {
    "deleted_lines": [
      "                    str << AUTHENTICATED << environment;"
    ],
    "added_lines": [
      "                    str << AUTHENTICATED << environment << cookie;"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/sddm/sddm/pull/280",
  "description": {
    "pr_info": {
      "title": "Move onAuthenticated XAUTHORITY generation to the helper",
      "number": 280
    },
    "comment": [
      "This avoids it being created as root and then chown'd.\n\nOpen for discussion, I know it's not by all means clean code.\n",
      "Also should fix .xsession-errors being owned by root\n"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.8,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 0.8"
}