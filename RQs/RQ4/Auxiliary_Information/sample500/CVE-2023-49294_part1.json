{
  "cve_id": "CVE-2023-49294",
  "cwe_ids": [
    "CWE-22"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
  "cvss_is_v3": true,
  "repo_name": "asterisk",
  "commit_msg": "manager.c: Prevent path traversal with GetConfig.\n\nWhen using AMI GetConfig, it was possible to access files outside of the\nAsterisk configuration directory by using filenames with \"..\" and \"./\"\neven while live_dangerously was not enabled. This change resolves the\nfull path and ensures we are still in the configuration directory before\nattempting to access the file.",
  "commit_hash": "424be345639d75c6cb7d0bd2da5f0f407dbd0bd5",
  "git_url": "https://github.com/asterisk/asterisk/commit/424be345639d75c6cb7d0bd2da5f0f407dbd0bd5",
  "file_path": "main/manager.c",
  "func_name": "action_getconfig",
  "func_before": "static int action_getconfig(struct mansession *s, const struct message *m)\n{\n\tstruct ast_config *cfg;\n\tconst char *fn = astman_get_header(m, \"Filename\");\n\tconst char *category = astman_get_header(m, \"Category\");\n\tconst char *filter = astman_get_header(m, \"Filter\");\n\tconst char *category_name;\n\tint catcount = 0;\n\tint lineno = 0;\n\tstruct ast_category *cur_category = NULL;\n\tstruct ast_variable *v;\n\tstruct ast_flags config_flags = { CONFIG_FLAG_WITHCOMMENTS | CONFIG_FLAG_NOCACHE };\n\n\tif (ast_strlen_zero(fn)) {\n\t\tastman_send_error(s, m, \"Filename not specified\");\n\t\treturn 0;\n\t}\n\n\tif (restrictedFile(fn)) {\n\t\tastman_send_error(s, m, \"File requires escalated priveledges\");\n\t\treturn 0;\n\t}\n\n\tcfg = ast_config_load2(fn, \"manager\", config_flags);\n\tif (cfg == CONFIG_STATUS_FILEMISSING) {\n\t\tastman_send_error(s, m, \"Config file not found\");\n\t\treturn 0;\n\t} else if (cfg == CONFIG_STATUS_FILEINVALID) {\n\t\tastman_send_error(s, m, \"Config file has invalid format\");\n\t\treturn 0;\n\t}\n\n\tastman_start_ack(s, m);\n\twhile ((cur_category = ast_category_browse_filtered(cfg, category, cur_category, filter))) {\n\t\tstruct ast_str *templates;\n\n\t\tcategory_name = ast_category_get_name(cur_category);\n\t\tlineno = 0;\n\t\tastman_append(s, \"Category-%06d: %s\\r\\n\", catcount, category_name);\n\n\t\tif (ast_category_is_template(cur_category)) {\n\t\t\tastman_append(s, \"IsTemplate-%06d: %d\\r\\n\", catcount, 1);\n\t\t}\n\n\t\tif ((templates = ast_category_get_templates(cur_category))\n\t\t\t&& ast_str_strlen(templates) > 0) {\n\t\t\tastman_append(s, \"Templates-%06d: %s\\r\\n\", catcount, ast_str_buffer(templates));\n\t\t\tast_free(templates);\n\t\t}\n\n\t\tfor (v = ast_category_first(cur_category); v; v = v->next) {\n\t\t\tastman_append(s, \"Line-%06d-%06d: %s=%s\\r\\n\", catcount, lineno++, v->name, v->value);\n\t\t}\n\n\t\tcatcount++;\n\t}\n\n\tif (!ast_strlen_zero(category) && catcount == 0) { /* TODO: actually, a config with no categories doesn't even get loaded */\n\t\tastman_append(s, \"No categories found\\r\\n\");\n\t}\n\n\tast_config_destroy(cfg);\n\tastman_append(s, \"\\r\\n\");\n\n\treturn 0;\n}",
  "abstract_func_before": "static int action_getconfig(struct mansession *VAR_0, const struct message *VAR_1)\n{\n\tstruct ast_config *VAR_2;\n\tconst char *VAR_3 = astman_get_header(VAR_1, \"Filename\");\n\tconst char *VAR_4 = astman_get_header(VAR_1, \"Category\");\n\tconst char *VAR_5 = astman_get_header(VAR_1, \"Filter\");\n\tconst char *VAR_6;\n\tint VAR_7 = 0;\n\tint VAR_8 = 0;\n\tstruct ast_category *VAR_9 = NULL;\n\tstruct ast_variable *VAR_10;\n\tstruct ast_flags VAR_11 = { VAR_12 | VAR_13 };\n\n\tif (ast_strlen_zero(VAR_3)) {\n\t\tastman_send_error(VAR_0, VAR_1, \"Filename not specified\");\n\t\treturn 0;\n\t}\n\n\tif (restrictedFile(VAR_3)) {\n\t\tastman_send_error(VAR_0, VAR_1, \"File requires escalated priveledges\");\n\t\treturn 0;\n\t}\n\n\tVAR_2 = ast_config_load2(VAR_3, \"manager\", VAR_11);\n\tif (VAR_2 == VAR_14) {\n\t\tastman_send_error(VAR_0, VAR_1, \"Config file not found\");\n\t\treturn 0;\n\t} else if (VAR_2 == VAR_15) {\n\t\tastman_send_error(VAR_0, VAR_1, \"Config file has invalid format\");\n\t\treturn 0;\n\t}\n\n\tastman_start_ack(VAR_0, VAR_1);\n\twhile ((VAR_9 = ast_category_browse_filtered(VAR_2, VAR_4, VAR_9, VAR_5))) {\n\t\tstruct ast_str *VAR_16;\n\n\t\tVAR_6 = ast_category_get_name(VAR_9);\n\t\tVAR_8 = 0;\n\t\tastman_append(VAR_0, \"Category-%06d: %s\\r\\n\", VAR_7, VAR_6);\n\n\t\tif (ast_category_is_template(VAR_9)) {\n\t\t\tastman_append(VAR_0, \"IsTemplate-%06d: %d\\r\\n\", VAR_7, 1);\n\t\t}\n\n\t\tif ((VAR_16 = ast_category_get_templates(VAR_9))\n\t\t\t&& ast_str_strlen(VAR_16) > 0) {\n\t\t\tastman_append(VAR_0, \"Templates-%06d: %s\\r\\n\", VAR_7, ast_str_buffer(VAR_16));\n\t\t\tast_free(VAR_16);\n\t\t}\n\n\t\tfor (VAR_10 = ast_category_first(VAR_9); VAR_10; VAR_10 = VAR_10->next) {\n\t\t\tastman_append(VAR_0, \"Line-%06d-%06d: %s=%s\\r\\n\", VAR_7, VAR_8++, VAR_10->name, VAR_10->value);\n\t\t}\n\n\t\tVAR_7++;\n\t}\n\n\tif (!ast_strlen_zero(VAR_4) && VAR_7 == 0) { /* COMMENT_0 */\n\t\tastman_append(VAR_0, \"No categories found\\r\\n\");\n\t}\n\n\tast_config_destroy(VAR_2);\n\tastman_append(VAR_0, \"\\r\\n\");\n\n\treturn 0;\n}",
  "func_graph_path_before": "asterisk/424be345639d75c6cb7d0bd2da5f0f407dbd0bd5/manager.c/vul/before/0.json",
  "func": "static int action_getconfig(struct mansession *s, const struct message *m)\n{\n\tstruct ast_config *cfg;\n\tconst char *fn = astman_get_header(m, \"Filename\");\n\tconst char *category = astman_get_header(m, \"Category\");\n\tconst char *filter = astman_get_header(m, \"Filter\");\n\tconst char *category_name;\n\tint catcount = 0;\n\tint lineno = 0;\n\tint ret = 0;\n\tstruct ast_category *cur_category = NULL;\n\tstruct ast_variable *v;\n\tstruct ast_flags config_flags = { CONFIG_FLAG_WITHCOMMENTS | CONFIG_FLAG_NOCACHE };\n\n\tif (ast_strlen_zero(fn)) {\n\t\tastman_send_error(s, m, \"Filename not specified\");\n\t\treturn 0;\n\t}\n\n\tret = restrictedFile(fn);\n\tif (ret == 1) {\n\t\tastman_send_error(s, m, \"File requires escalated priveledges\");\n\t\treturn 0;\n\t} else if (ret == -1) {\n\t\tastman_send_error(s, m, \"Config file not found\");\n\t\treturn 0;\n\t}\n\n\tcfg = ast_config_load2(fn, \"manager\", config_flags);\n\tif (cfg == CONFIG_STATUS_FILEMISSING) {\n\t\tastman_send_error(s, m, \"Config file not found\");\n\t\treturn 0;\n\t} else if (cfg == CONFIG_STATUS_FILEINVALID) {\n\t\tastman_send_error(s, m, \"Config file has invalid format\");\n\t\treturn 0;\n\t}\n\n\tastman_start_ack(s, m);\n\twhile ((cur_category = ast_category_browse_filtered(cfg, category, cur_category, filter))) {\n\t\tstruct ast_str *templates;\n\n\t\tcategory_name = ast_category_get_name(cur_category);\n\t\tlineno = 0;\n\t\tastman_append(s, \"Category-%06d: %s\\r\\n\", catcount, category_name);\n\n\t\tif (ast_category_is_template(cur_category)) {\n\t\t\tastman_append(s, \"IsTemplate-%06d: %d\\r\\n\", catcount, 1);\n\t\t}\n\n\t\tif ((templates = ast_category_get_templates(cur_category))\n\t\t\t&& ast_str_strlen(templates) > 0) {\n\t\t\tastman_append(s, \"Templates-%06d: %s\\r\\n\", catcount, ast_str_buffer(templates));\n\t\t\tast_free(templates);\n\t\t}\n\n\t\tfor (v = ast_category_first(cur_category); v; v = v->next) {\n\t\t\tastman_append(s, \"Line-%06d-%06d: %s=%s\\r\\n\", catcount, lineno++, v->name, v->value);\n\t\t}\n\n\t\tcatcount++;\n\t}\n\n\tif (!ast_strlen_zero(category) && catcount == 0) { /* TODO: actually, a config with no categories doesn't even get loaded */\n\t\tastman_append(s, \"No categories found\\r\\n\");\n\t}\n\n\tast_config_destroy(cfg);\n\tastman_append(s, \"\\r\\n\");\n\n\treturn 0;\n}",
  "abstract_func": "static int action_getconfig(struct mansession *VAR_0, const struct message *VAR_1)\n{\n\tstruct ast_config *VAR_2;\n\tconst char *VAR_3 = astman_get_header(VAR_1, \"Filename\");\n\tconst char *VAR_4 = astman_get_header(VAR_1, \"Category\");\n\tconst char *VAR_5 = astman_get_header(VAR_1, \"Filter\");\n\tconst char *VAR_6;\n\tint VAR_7 = 0;\n\tint VAR_8 = 0;\n\tint VAR_9 = 0;\n\tstruct ast_category *VAR_10 = NULL;\n\tstruct ast_variable *VAR_11;\n\tstruct ast_flags VAR_12 = { VAR_13 | VAR_14 };\n\n\tif (ast_strlen_zero(VAR_3)) {\n\t\tastman_send_error(VAR_0, VAR_1, \"Filename not specified\");\n\t\treturn 0;\n\t}\n\n\tVAR_9 = restrictedFile(VAR_3);\n\tif (VAR_9 == 1) {\n\t\tastman_send_error(VAR_0, VAR_1, \"File requires escalated priveledges\");\n\t\treturn 0;\n\t} else if (VAR_9 == -1) {\n\t\tastman_send_error(VAR_0, VAR_1, \"Config file not found\");\n\t\treturn 0;\n\t}\n\n\tVAR_2 = ast_config_load2(VAR_3, \"manager\", VAR_12);\n\tif (VAR_2 == VAR_15) {\n\t\tastman_send_error(VAR_0, VAR_1, \"Config file not found\");\n\t\treturn 0;\n\t} else if (VAR_2 == VAR_16) {\n\t\tastman_send_error(VAR_0, VAR_1, \"Config file has invalid format\");\n\t\treturn 0;\n\t}\n\n\tastman_start_ack(VAR_0, VAR_1);\n\twhile ((VAR_10 = ast_category_browse_filtered(VAR_2, VAR_4, VAR_10, VAR_5))) {\n\t\tstruct ast_str *VAR_17;\n\n\t\tVAR_6 = ast_category_get_name(VAR_10);\n\t\tVAR_8 = 0;\n\t\tastman_append(VAR_0, \"Category-%06d: %s\\r\\n\", VAR_7, VAR_6);\n\n\t\tif (ast_category_is_template(VAR_10)) {\n\t\t\tastman_append(VAR_0, \"IsTemplate-%06d: %d\\r\\n\", VAR_7, 1);\n\t\t}\n\n\t\tif ((VAR_17 = ast_category_get_templates(VAR_10))\n\t\t\t&& ast_str_strlen(VAR_17) > 0) {\n\t\t\tastman_append(VAR_0, \"Templates-%06d: %s\\r\\n\", VAR_7, ast_str_buffer(VAR_17));\n\t\t\tast_free(VAR_17);\n\t\t}\n\n\t\tfor (VAR_11 = ast_category_first(VAR_10); VAR_11; VAR_11 = VAR_11->next) {\n\t\t\tastman_append(VAR_0, \"Line-%06d-%06d: %s=%s\\r\\n\", VAR_7, VAR_8++, VAR_11->name, VAR_11->value);\n\t\t}\n\n\t\tVAR_7++;\n\t}\n\n\tif (!ast_strlen_zero(VAR_4) && VAR_7 == 0) { /* COMMENT_0 */\n\t\tastman_append(VAR_0, \"No categories found\\r\\n\");\n\t}\n\n\tast_config_destroy(VAR_2);\n\tastman_append(VAR_0, \"\\r\\n\");\n\n\treturn 0;\n}",
  "func_graph_path": "asterisk/424be345639d75c6cb7d0bd2da5f0f407dbd0bd5/manager.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -7,6 +7,7 @@\n \tconst char *category_name;\n \tint catcount = 0;\n \tint lineno = 0;\n+\tint ret = 0;\n \tstruct ast_category *cur_category = NULL;\n \tstruct ast_variable *v;\n \tstruct ast_flags config_flags = { CONFIG_FLAG_WITHCOMMENTS | CONFIG_FLAG_NOCACHE };\n@@ -16,8 +17,12 @@\n \t\treturn 0;\n \t}\n \n-\tif (restrictedFile(fn)) {\n+\tret = restrictedFile(fn);\n+\tif (ret == 1) {\n \t\tastman_send_error(s, m, \"File requires escalated priveledges\");\n+\t\treturn 0;\n+\t} else if (ret == -1) {\n+\t\tastman_send_error(s, m, \"Config file not found\");\n \t\treturn 0;\n \t}\n ",
  "diff_line_info": {
    "deleted_lines": [
      "\tif (restrictedFile(fn)) {"
    ],
    "added_lines": [
      "\tint ret = 0;",
      "\tret = restrictedFile(fn);",
      "\tif (ret == 1) {",
      "\t\treturn 0;",
      "\t} else if (ret == -1) {",
      "\t\tastman_send_error(s, m, \"Config file not found\");"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/asterisk/asterisk/pull/494",
  "description": {
    "pr_info": {
      "title": "manager.c: Prevent path traversal with GetConfig.",
      "number": 494
    },
    "comment": [
      "When using AMI GetConfig, it was possible to access files outside of the\nAsterisk configuration directory by using filenames with \"..\" and \"./\"\neven while live_dangerously was not enabled. This change resolves the\nfull path and ensures we are still in the configuration directory before\nattempting to access the file.\n",
      "cherry-pick-to: 18\r\ncherry-pick-to: 20\r\ncherry-pick-to: 21\r\ncherry-pick-to: certified/18.9",
      "cherry-pick-test",
      "Successfully merged to branch master and cherry-picked to [\"18\",\"20\",\"21\",\"certified/18.9\"]"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 1.0"
}