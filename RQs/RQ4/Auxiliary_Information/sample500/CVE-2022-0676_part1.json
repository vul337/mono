{
  "cve_id": "CVE-2022-0676",
  "cwe_ids": [
    "CWE-787"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "radareorg/radare2",
  "commit_msg": "Fix heap buffer overflow in dyldcache parser ##crash\n\n* Reported by: Lazymio via huntr.dev\n* Reproducer: dyldovf",
  "commit_hash": "c84b7232626badd075caf3ae29661b609164bac6",
  "git_url": "https://github.com/radareorg/radare2/commit/c84b7232626badd075caf3ae29661b609164bac6",
  "file_path": "libr/bin/p/bin_dyldcache.c",
  "func_name": "read_cache_accel",
  "func_before": "static cache_accel_t *read_cache_accel(RBuffer *cache_buf, cache_hdr_t *hdr, cache_map_t *maps) {\n\tif (!cache_buf || !hdr || !hdr->accelerateInfoSize || !hdr->accelerateInfoAddr) {\n\t\treturn NULL;\n\t}\n\n\tut64 offset = va2pa (hdr->accelerateInfoAddr, hdr->mappingCount, maps, cache_buf, 0, NULL, NULL);\n\tif (!offset) {\n\t\treturn NULL;\n\t}\n\n\tut64 size = sizeof (cache_accel_t);\n\tcache_accel_t *accel = R_NEW0 (cache_accel_t);\n\tif (!accel) {\n\t\treturn NULL;\n\t}\n\n\tif (r_buf_fread_at (cache_buf, offset, (ut8*) accel, \"16il\", 1) != size) {\n\t\tR_FREE (accel);\n\t\treturn NULL;\n\t}\n\n\taccel->imagesExtrasOffset += offset;\n\taccel->bottomUpListOffset += offset;\n\taccel->dylibTrieOffset += offset;\n\taccel->initializersOffset += offset;\n\taccel->dofSectionsOffset += offset;\n\taccel->reExportListOffset += offset;\n\taccel->depListOffset += offset;\n\taccel->rangeTableOffset += offset;\n\n\treturn accel;\n}",
  "abstract_func_before": "static cache_accel_t *read_cache_accel(RBuffer *VAR_0, cache_hdr_t *VAR_1, cache_map_t *VAR_2) {\n\tif (!VAR_0 || !VAR_1 || !VAR_1->accelerateInfoSize || !VAR_1->accelerateInfoAddr) {\n\t\treturn NULL;\n\t}\n\n\tut64 VAR_3 = va2pa (VAR_1->accelerateInfoAddr, VAR_1->mappingCount, VAR_2, VAR_0, 0, NULL, NULL);\n\tif (!VAR_3) {\n\t\treturn NULL;\n\t}\n\n\tut64 VAR_4 = sizeof (cache_accel_t);\n\tcache_accel_t *VAR_5 = R_NEW0 (cache_accel_t);\n\tif (!VAR_5) {\n\t\treturn NULL;\n\t}\n\n\tif (r_buf_fread_at (VAR_0, VAR_3, (ut8*) VAR_5, \"16il\", 1) != VAR_4) {\n\t\tR_FREE (VAR_5);\n\t\treturn NULL;\n\t}\n\n\tVAR_5->imagesExtrasOffset += VAR_3;\n\tVAR_5->bottomUpListOffset += VAR_3;\n\tVAR_5->dylibTrieOffset += VAR_3;\n\tVAR_5->initializersOffset += VAR_3;\n\tVAR_5->dofSectionsOffset += VAR_3;\n\tVAR_5->reExportListOffset += VAR_3;\n\tVAR_5->depListOffset += VAR_3;\n\tVAR_5->rangeTableOffset += VAR_3;\n\n\treturn VAR_5;\n}",
  "func_graph_path_before": "radareorg/radare2/c84b7232626badd075caf3ae29661b609164bac6/bin_dyldcache.c/vul/before/0.json",
  "func": "static cache_accel_t *read_cache_accel(RBuffer *cache_buf, cache_hdr_t *hdr, cache_map_t *maps, int n_maps) {\n\tif (!cache_buf || !hdr || !hdr->accelerateInfoSize || !hdr->accelerateInfoAddr) {\n\t\treturn NULL;\n\t}\n\tsize_t mc = R_MIN (hdr->mappingCount, n_maps);\n\tut64 offset = va2pa (hdr->accelerateInfoAddr, mc, maps, cache_buf, 0, NULL, NULL);\n\tif (!offset) {\n\t\treturn NULL;\n\t}\n\n\tut64 size = sizeof (cache_accel_t);\n\tcache_accel_t *accel = R_NEW0 (cache_accel_t);\n\tif (!accel) {\n\t\treturn NULL;\n\t}\n\n\tif (r_buf_fread_at (cache_buf, offset, (ut8*) accel, \"16il\", 1) != size) {\n\t\tR_FREE (accel);\n\t\treturn NULL;\n\t}\n\n\taccel->imagesExtrasOffset += offset;\n\taccel->bottomUpListOffset += offset;\n\taccel->dylibTrieOffset += offset;\n\taccel->initializersOffset += offset;\n\taccel->dofSectionsOffset += offset;\n\taccel->reExportListOffset += offset;\n\taccel->depListOffset += offset;\n\taccel->rangeTableOffset += offset;\n\n\treturn accel;\n}",
  "abstract_func": "static cache_accel_t *read_cache_accel(RBuffer *VAR_0, cache_hdr_t *VAR_1, cache_map_t *VAR_2, int VAR_3) {\n\tif (!VAR_0 || !VAR_1 || !VAR_1->accelerateInfoSize || !VAR_1->accelerateInfoAddr) {\n\t\treturn NULL;\n\t}\n\tsize_t VAR_4 = R_MIN (VAR_1->mappingCount, VAR_3);\n\tut64 VAR_5 = va2pa (VAR_1->accelerateInfoAddr, VAR_4, VAR_2, VAR_0, 0, NULL, NULL);\n\tif (!VAR_5) {\n\t\treturn NULL;\n\t}\n\n\tut64 VAR_6 = sizeof (cache_accel_t);\n\tcache_accel_t *VAR_7 = R_NEW0 (cache_accel_t);\n\tif (!VAR_7) {\n\t\treturn NULL;\n\t}\n\n\tif (r_buf_fread_at (VAR_0, VAR_5, (ut8*) VAR_7, \"16il\", 1) != VAR_6) {\n\t\tR_FREE (VAR_7);\n\t\treturn NULL;\n\t}\n\n\tVAR_7->imagesExtrasOffset += VAR_5;\n\tVAR_7->bottomUpListOffset += VAR_5;\n\tVAR_7->dylibTrieOffset += VAR_5;\n\tVAR_7->initializersOffset += VAR_5;\n\tVAR_7->dofSectionsOffset += VAR_5;\n\tVAR_7->reExportListOffset += VAR_5;\n\tVAR_7->depListOffset += VAR_5;\n\tVAR_7->rangeTableOffset += VAR_5;\n\n\treturn VAR_7;\n}",
  "func_graph_path": "radareorg/radare2/c84b7232626badd075caf3ae29661b609164bac6/bin_dyldcache.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,9 +1,9 @@\n-static cache_accel_t *read_cache_accel(RBuffer *cache_buf, cache_hdr_t *hdr, cache_map_t *maps) {\n+static cache_accel_t *read_cache_accel(RBuffer *cache_buf, cache_hdr_t *hdr, cache_map_t *maps, int n_maps) {\n \tif (!cache_buf || !hdr || !hdr->accelerateInfoSize || !hdr->accelerateInfoAddr) {\n \t\treturn NULL;\n \t}\n-\n-\tut64 offset = va2pa (hdr->accelerateInfoAddr, hdr->mappingCount, maps, cache_buf, 0, NULL, NULL);\n+\tsize_t mc = R_MIN (hdr->mappingCount, n_maps);\n+\tut64 offset = va2pa (hdr->accelerateInfoAddr, mc, maps, cache_buf, 0, NULL, NULL);\n \tif (!offset) {\n \t\treturn NULL;\n \t}",
  "diff_line_info": {
    "deleted_lines": [
      "static cache_accel_t *read_cache_accel(RBuffer *cache_buf, cache_hdr_t *hdr, cache_map_t *maps) {",
      "",
      "\tut64 offset = va2pa (hdr->accelerateInfoAddr, hdr->mappingCount, maps, cache_buf, 0, NULL, NULL);"
    ],
    "added_lines": [
      "static cache_accel_t *read_cache_accel(RBuffer *cache_buf, cache_hdr_t *hdr, cache_map_t *maps, int n_maps) {",
      "\tsize_t mc = R_MIN (hdr->mappingCount, n_maps);",
      "\tut64 offset = va2pa (hdr->accelerateInfoAddr, mc, maps, cache_buf, 0, NULL, NULL);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/radareorg/radare2/pull/19728",
  "description": {
    "pr_info": {
      "title": "Fix heap buffer overflow in dyldcache parser ##crash",
      "number": 19728
    },
    "comment": [
      "* Reported by: Lazymio via huntr.dev\r\n* Reproducer: dyldovf\r\n\r\n```mermaid\r\ngraph LR;\r\n   Fuzz --> Crash;\r\n   Crash -->Verify;\r\n   Crash --> Fuzz;\r\n   Verify --> Report;\r\n   Report --> Fix;\r\n   Fix --> Verify;\r\n   Fix --> Publish\r\n``` ",
      "Verified the fix works."
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "The patch addresses a heap buffer overflow issue, a known security vulnerability, by adding a bound check to prevent out-of-bounds access. \n\n**Final Classification:** Security Vulnerability Fix;  \n**Confidence:** 1.0"
}