{
  "cve_id": "CVE-2023-50572",
  "cwe_ids": [
    "CWE-787"
  ],
  "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H",
  "cvss_is_v3": true,
  "repo_name": "jline/jline3",
  "commit_msg": "GroovyEngine.execute cause an OOM exception, fixes #909",
  "commit_hash": "f3c60a3e6255e8e0c20d5043a4fe248446f292bb",
  "git_url": "https://github.com/jline/jline3/commit/f3c60a3e6255e8e0c20d5043a4fe248446f292bb",
  "file_path": "console/src/main/java/org/jline/console/impl/DefaultPrinter.java",
  "func_name": "internalPrintln",
  "func_before": "@SuppressWarnings(\"unchecked\")\n    private void internalPrintln(Map<String, Object> options, Object object) {\n        if (object == null) {\n            return;\n        }\n        long start = new Date().getTime();\n        if (options.containsKey(Printer.EXCLUDE)) {\n            List<String> colOut = optionList(Printer.EXCLUDE, options);\n            List<String> colIn = optionList(Printer.COLUMNS_IN, options);\n            colIn.removeAll(colOut);\n            colOut.addAll((List<String>) options.get(Printer.COLUMNS_OUT));\n            options.put(Printer.COLUMNS_IN, colIn);\n            options.put(Printer.COLUMNS_OUT, colOut);\n        }\n        if (options.containsKey(Printer.INCLUDE)) {\n            List<String> colIn = optionList(Printer.INCLUDE, options);\n            colIn.addAll((List<String>) options.get(Printer.COLUMNS_IN));\n            options.put(Printer.COLUMNS_IN, colIn);\n        }\n        options.put(Printer.VALUE_STYLE, valueHighlighter((String) options.getOrDefault(Printer.VALUE_STYLE, null)));\n        prntStyle = Styles.prntStyle();\n        options.putIfAbsent(Printer.WIDTH, terminal().getSize().getColumns());\n        String style = (String) options.getOrDefault(Printer.STYLE, \"\");\n        options.put(Printer.STYLE, valueHighlighter(style));\n        int width = (int) options.get(Printer.WIDTH);\n        if (!style.isEmpty() && object instanceof String) {\n            highlightAndPrint(width, (SyntaxHighlighter) options.get(Printer.STYLE), (String) object, true);\n        } else if (style.equalsIgnoreCase(\"JSON\")) {\n            if (engine == null) {\n                throw new IllegalArgumentException(\"JSON style not supported!\");\n            }\n            String json = engine.toJson(object);\n            highlightAndPrint(width, (SyntaxHighlighter) options.get(Printer.STYLE), json, true);\n        } else if (options.containsKey(Printer.SKIP_DEFAULT_OPTIONS)) {\n            highlightAndPrint(options, object);\n        } else if (object instanceof Exception) {\n            highlightAndPrint(options, (Exception) object);\n        } else if (object instanceof CmdDesc) {\n            highlight((CmdDesc) object).println(terminal());\n        } else if (object instanceof String || object instanceof Number) {\n            String str = object.toString();\n            SyntaxHighlighter highlighter = (SyntaxHighlighter) options.getOrDefault(Printer.VALUE_STYLE, null);\n            highlightAndPrint(width, highlighter, str, doValueHighlight(options, str));\n        } else {\n            highlightAndPrint(options, object);\n        }\n        terminal().flush();\n        Log.debug(\"println: \", new Date().getTime() - start, \" msec\");\n    }",
  "abstract_func_before": "@SuppressWarnings(\"unchecked\")\n    private void internalPrintln(Map<String, Object> VAR_0, Object VAR_1) {\n        if (VAR_1 == null) {\n            return;\n        }\n        long VAR_2 = new Date().getTime();\n        if (VAR_0.containsKey(VAR_3.EXCLUDE)) {\n            List<String> VAR_4 = optionList(VAR_3.EXCLUDE, VAR_0);\n            List<String> VAR_5 = optionList(VAR_3.COLUMNS_IN, VAR_0);\n            VAR_5.removeAll(VAR_4);\n            VAR_4.addAll((List<String>) VAR_0.get(VAR_3.COLUMNS_OUT));\n            VAR_0.put(VAR_3.COLUMNS_IN, VAR_5);\n            VAR_0.put(VAR_3.COLUMNS_OUT, VAR_4);\n        }\n        if (VAR_0.containsKey(VAR_3.INCLUDE)) {\n            List<String> VAR_5 = optionList(VAR_3.INCLUDE, VAR_0);\n            VAR_5.addAll((List<String>) VAR_0.get(VAR_3.COLUMNS_IN));\n            VAR_0.put(VAR_3.COLUMNS_IN, VAR_5);\n        }\n        VAR_0.put(VAR_3.VALUE_STYLE, valueHighlighter((String) VAR_0.getOrDefault(VAR_3.VALUE_STYLE, null)));\n        VAR_6 = VAR_7.prntStyle();\n        VAR_0.putIfAbsent(VAR_3.WIDTH, terminal().getSize().getColumns());\n        String VAR_8 = (String) VAR_0.getOrDefault(VAR_3.STYLE, \"\");\n        VAR_0.put(VAR_3.STYLE, valueHighlighter(VAR_8));\n        int VAR_9 = (int) VAR_0.get(VAR_3.WIDTH);\n        if (!VAR_8.isEmpty() && VAR_1 instanceof String) {\n            highlightAndPrint(VAR_9, (SyntaxHighlighter) VAR_0.get(VAR_3.STYLE), (String) VAR_1, true);\n        } else if (VAR_8.equalsIgnoreCase(\"JSON\")) {\n            if (VAR_10 == null) {\n                throw new IllegalArgumentException(\"JSON style not supported!\");\n            }\n            String VAR_11 = VAR_10.toJson(VAR_1);\n            highlightAndPrint(VAR_9, (SyntaxHighlighter) VAR_0.get(VAR_3.STYLE), VAR_11, true);\n        } else if (VAR_0.containsKey(VAR_3.SKIP_DEFAULT_OPTIONS)) {\n            highlightAndPrint(VAR_0, VAR_1);\n        } else if (VAR_1 instanceof Exception) {\n            highlightAndPrint(VAR_0, (Exception) VAR_1);\n        } else if (VAR_1 instanceof CmdDesc) {\n            highlight((CmdDesc) VAR_1).println(terminal());\n        } else if (VAR_1 instanceof String || VAR_1 instanceof Number) {\n            String VAR_12 = VAR_1.toString();\n            SyntaxHighlighter VAR_13 = (SyntaxHighlighter) VAR_0.getOrDefault(VAR_3.VALUE_STYLE, null);\n            highlightAndPrint(VAR_9, VAR_13, VAR_12, doValueHighlight(VAR_0, VAR_12));\n        } else {\n            highlightAndPrint(VAR_0, VAR_1);\n        }\n        terminal().flush();\n        VAR_14.debug(\"println: \", new Date().getTime() - VAR_2, \" msec\");\n    }",
  "func_graph_path_before": "jline/jline3/f3c60a3e6255e8e0c20d5043a4fe248446f292bb/DefaultPrinter.java/vul/before/0.json",
  "func": "@SuppressWarnings(\"unchecked\")\n    private void internalPrintln(Map<String, Object> options, Object object) {\n        if (object == null) {\n            return;\n        }\n        long start = new Date().getTime();\n        if (options.containsKey(Printer.EXCLUDE)) {\n            List<String> colOut = optionList(Printer.EXCLUDE, options);\n            List<String> colIn = optionList(Printer.COLUMNS_IN, options);\n            colIn.removeAll(colOut);\n            colOut.addAll((List<String>) options.get(Printer.COLUMNS_OUT));\n            options.put(Printer.COLUMNS_IN, colIn);\n            options.put(Printer.COLUMNS_OUT, colOut);\n        }\n        if (options.containsKey(Printer.INCLUDE)) {\n            List<String> colIn = optionList(Printer.INCLUDE, options);\n            colIn.addAll((List<String>) options.get(Printer.COLUMNS_IN));\n            options.put(Printer.COLUMNS_IN, colIn);\n        }\n        options.put(Printer.VALUE_STYLE, valueHighlighter((String) options.getOrDefault(Printer.VALUE_STYLE, null)));\n        prntStyle = Styles.prntStyle();\n        options.putIfAbsent(Printer.WIDTH, terminal().getSize().getColumns());\n        String style = (String) options.getOrDefault(Printer.STYLE, \"\");\n        options.put(Printer.STYLE, valueHighlighter(style));\n        int width = (int) options.get(Printer.WIDTH);\n        int maxrows = (int) options.get(Printer.MAXROWS);\n        if (!style.isEmpty() && object instanceof String) {\n            highlightAndPrint(width, (SyntaxHighlighter) options.get(Printer.STYLE), (String) object, true, maxrows);\n        } else if (style.equalsIgnoreCase(\"JSON\")) {\n            if (engine == null) {\n                throw new IllegalArgumentException(\"JSON style not supported!\");\n            }\n            String json = engine.toJson(object);\n            highlightAndPrint(width, (SyntaxHighlighter) options.get(Printer.STYLE), json, true, maxrows);\n        } else if (options.containsKey(Printer.SKIP_DEFAULT_OPTIONS)) {\n            highlightAndPrint(options, object);\n        } else if (object instanceof Exception) {\n            highlightAndPrint(options, (Exception) object);\n        } else if (object instanceof CmdDesc) {\n            highlight((CmdDesc) object).println(terminal());\n        } else if (object instanceof String || object instanceof Number) {\n            String str = object.toString();\n            SyntaxHighlighter highlighter = (SyntaxHighlighter) options.getOrDefault(Printer.VALUE_STYLE, null);\n            highlightAndPrint(width, highlighter, str, doValueHighlight(options, str), maxrows);\n        } else {\n            highlightAndPrint(options, object);\n        }\n        terminal().flush();\n        Log.debug(\"println: \", new Date().getTime() - start, \" msec\");\n    }",
  "abstract_func": "@SuppressWarnings(\"unchecked\")\n    private void internalPrintln(Map<String, Object> VAR_0, Object VAR_1) {\n        if (VAR_1 == null) {\n            return;\n        }\n        long VAR_2 = new Date().getTime();\n        if (VAR_0.containsKey(VAR_3.EXCLUDE)) {\n            List<String> VAR_4 = optionList(VAR_3.EXCLUDE, VAR_0);\n            List<String> VAR_5 = optionList(VAR_3.COLUMNS_IN, VAR_0);\n            VAR_5.removeAll(VAR_4);\n            VAR_4.addAll((List<String>) VAR_0.get(VAR_3.COLUMNS_OUT));\n            VAR_0.put(VAR_3.COLUMNS_IN, VAR_5);\n            VAR_0.put(VAR_3.COLUMNS_OUT, VAR_4);\n        }\n        if (VAR_0.containsKey(VAR_3.INCLUDE)) {\n            List<String> VAR_5 = optionList(VAR_3.INCLUDE, VAR_0);\n            VAR_5.addAll((List<String>) VAR_0.get(VAR_3.COLUMNS_IN));\n            VAR_0.put(VAR_3.COLUMNS_IN, VAR_5);\n        }\n        VAR_0.put(VAR_3.VALUE_STYLE, valueHighlighter((String) VAR_0.getOrDefault(VAR_3.VALUE_STYLE, null)));\n        VAR_6 = VAR_7.prntStyle();\n        VAR_0.putIfAbsent(VAR_3.WIDTH, terminal().getSize().getColumns());\n        String VAR_8 = (String) VAR_0.getOrDefault(VAR_3.STYLE, \"\");\n        VAR_0.put(VAR_3.STYLE, valueHighlighter(VAR_8));\n        int VAR_9 = (int) VAR_0.get(VAR_3.WIDTH);\n        int VAR_10 = (int) VAR_0.get(VAR_3.MAXROWS);\n        if (!VAR_8.isEmpty() && VAR_1 instanceof String) {\n            highlightAndPrint(VAR_9, (SyntaxHighlighter) VAR_0.get(VAR_3.STYLE), (String) VAR_1, true, VAR_10);\n        } else if (VAR_8.equalsIgnoreCase(\"JSON\")) {\n            if (VAR_11 == null) {\n                throw new IllegalArgumentException(\"JSON style not supported!\");\n            }\n            String VAR_12 = VAR_11.toJson(VAR_1);\n            highlightAndPrint(VAR_9, (SyntaxHighlighter) VAR_0.get(VAR_3.STYLE), VAR_12, true, VAR_10);\n        } else if (VAR_0.containsKey(VAR_3.SKIP_DEFAULT_OPTIONS)) {\n            highlightAndPrint(VAR_0, VAR_1);\n        } else if (VAR_1 instanceof Exception) {\n            highlightAndPrint(VAR_0, (Exception) VAR_1);\n        } else if (VAR_1 instanceof CmdDesc) {\n            highlight((CmdDesc) VAR_1).println(terminal());\n        } else if (VAR_1 instanceof String || VAR_1 instanceof Number) {\n            String VAR_13 = VAR_1.toString();\n            SyntaxHighlighter VAR_14 = (SyntaxHighlighter) VAR_0.getOrDefault(VAR_3.VALUE_STYLE, null);\n            highlightAndPrint(VAR_9, VAR_14, VAR_13, doValueHighlight(VAR_0, VAR_13), VAR_10);\n        } else {\n            highlightAndPrint(VAR_0, VAR_1);\n        }\n        terminal().flush();\n        VAR_15.debug(\"println: \", new Date().getTime() - VAR_2, \" msec\");\n    }",
  "func_graph_path": "jline/jline3/f3c60a3e6255e8e0c20d5043a4fe248446f292bb/DefaultPrinter.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -23,14 +23,15 @@\n         String style = (String) options.getOrDefault(Printer.STYLE, \"\");\n         options.put(Printer.STYLE, valueHighlighter(style));\n         int width = (int) options.get(Printer.WIDTH);\n+        int maxrows = (int) options.get(Printer.MAXROWS);\n         if (!style.isEmpty() && object instanceof String) {\n-            highlightAndPrint(width, (SyntaxHighlighter) options.get(Printer.STYLE), (String) object, true);\n+            highlightAndPrint(width, (SyntaxHighlighter) options.get(Printer.STYLE), (String) object, true, maxrows);\n         } else if (style.equalsIgnoreCase(\"JSON\")) {\n             if (engine == null) {\n                 throw new IllegalArgumentException(\"JSON style not supported!\");\n             }\n             String json = engine.toJson(object);\n-            highlightAndPrint(width, (SyntaxHighlighter) options.get(Printer.STYLE), json, true);\n+            highlightAndPrint(width, (SyntaxHighlighter) options.get(Printer.STYLE), json, true, maxrows);\n         } else if (options.containsKey(Printer.SKIP_DEFAULT_OPTIONS)) {\n             highlightAndPrint(options, object);\n         } else if (object instanceof Exception) {\n@@ -40,7 +41,7 @@\n         } else if (object instanceof String || object instanceof Number) {\n             String str = object.toString();\n             SyntaxHighlighter highlighter = (SyntaxHighlighter) options.getOrDefault(Printer.VALUE_STYLE, null);\n-            highlightAndPrint(width, highlighter, str, doValueHighlight(options, str));\n+            highlightAndPrint(width, highlighter, str, doValueHighlight(options, str), maxrows);\n         } else {\n             highlightAndPrint(options, object);\n         }",
  "diff_line_info": {
    "deleted_lines": [
      "            highlightAndPrint(width, (SyntaxHighlighter) options.get(Printer.STYLE), (String) object, true);",
      "            highlightAndPrint(width, (SyntaxHighlighter) options.get(Printer.STYLE), json, true);",
      "            highlightAndPrint(width, highlighter, str, doValueHighlight(options, str));"
    ],
    "added_lines": [
      "        int maxrows = (int) options.get(Printer.MAXROWS);",
      "            highlightAndPrint(width, (SyntaxHighlighter) options.get(Printer.STYLE), (String) object, true, maxrows);",
      "            highlightAndPrint(width, (SyntaxHighlighter) options.get(Printer.STYLE), json, true, maxrows);",
      "            highlightAndPrint(width, highlighter, str, doValueHighlight(options, str), maxrows);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/jline/jline3/pull/917",
  "description": {
    "pr_info": {
      "title": "Curses update",
      "number": 917
    },
    "comment": [
      "Merged master int curses, sorted out some conflicts, but does not compile"
    ]
  },
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Defect Remediation & Feature Upgrades  \n**Confidence:** 0.9"
}