{
  "cve_id": "CVE-2020-7105",
  "cwe_ids": [
    "CWE-476"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "redis/hiredis",
  "commit_msg": "Safe allocation wrappers (#754)\n\nCreate allocation wrappers with a configurable OOM handler (defaults to abort()).\r\n\r\nSee #752, #747",
  "commit_hash": "669ac9d0c843f9ccf07d4969ff6bff75fafee01f",
  "git_url": "https://github.com/redis/hiredis/commit/669ac9d0c843f9ccf07d4969ff6bff75fafee01f",
  "file_path": "net.c",
  "func_name": "redisContextConnectUnix",
  "func_before": "int redisContextConnectUnix(redisContext *c, const char *path, const struct timeval *timeout) {\n#ifndef _WIN32\n    int blocking = (c->flags & REDIS_BLOCK);\n    struct sockaddr_un *sa;\n    long timeout_msec = -1;\n\n    if (redisCreateSocket(c,AF_UNIX) < 0)\n        return REDIS_ERR;\n    if (redisSetBlocking(c,0) != REDIS_OK)\n        return REDIS_ERR;\n\n    c->connection_type = REDIS_CONN_UNIX;\n    if (c->unix_sock.path != path)\n        c->unix_sock.path = strdup(path);\n\n    if (timeout) {\n        if (c->timeout != timeout) {\n            if (c->timeout == NULL)\n                c->timeout = malloc(sizeof(struct timeval));\n\n            memcpy(c->timeout, timeout, sizeof(struct timeval));\n        }\n    } else {\n        free(c->timeout);\n        c->timeout = NULL;\n    }\n\n    if (redisContextTimeoutMsec(c,&timeout_msec) != REDIS_OK)\n        return REDIS_ERR;\n\n    sa = (struct sockaddr_un*)(c->saddr = malloc(sizeof(struct sockaddr_un)));\n    c->addrlen = sizeof(struct sockaddr_un);\n    sa->sun_family = AF_UNIX;\n    strncpy(sa->sun_path, path, sizeof(sa->sun_path) - 1);\n    if (connect(c->fd, (struct sockaddr*)sa, sizeof(*sa)) == -1) {\n        if (errno == EINPROGRESS && !blocking) {\n            /* This is ok. */\n        } else {\n            if (redisContextWaitReady(c,timeout_msec) != REDIS_OK)\n                return REDIS_ERR;\n        }\n    }\n\n    /* Reset socket to be blocking after connect(2). */\n    if (blocking && redisSetBlocking(c,1) != REDIS_OK)\n        return REDIS_ERR;\n\n    c->flags |= REDIS_CONNECTED;\n    return REDIS_OK;\n#else\n    /* We currently do not support Unix sockets for Windows. */\n    /* TODO(m): https://devblogs.microsoft.com/commandline/af_unix-comes-to-windows/ */\n    errno = EPROTONOSUPPORT;\n    return REDIS_ERR;\n#endif /* _WIN32 */\n}",
  "abstract_func_before": "int redisContextConnectUnix(redisContext *VAR_0, const char *VAR_1, const struct timeval *VAR_2) {\n#ifndef VAR_3\n    int VAR_4 = (VAR_0->flags & VAR_5);\n    struct sockaddr_un *VAR_6;\n    long VAR_7 = -1;\n\n    if (redisCreateSocket(VAR_0,VAR_8) < 0)\n        return VAR_9;\n    if (redisSetBlocking(VAR_0,0) != VAR_10)\n        return VAR_9;\n\n    VAR_0->connection_type = VAR_11;\n    if (VAR_0->unix_sock.path != VAR_1)\n        VAR_0->unix_sock.path = strdup(VAR_1);\n\n    if (VAR_2) {\n        if (VAR_0->timeout != VAR_2) {\n            if (VAR_0->timeout == NULL)\n                VAR_0->timeout = malloc(sizeof(struct timeval));\n\n            memcpy(VAR_0->timeout, VAR_2, sizeof(struct timeval));\n        }\n    } else {\n        free(VAR_0->timeout);\n        VAR_0->timeout = NULL;\n    }\n\n    if (redisContextTimeoutMsec(VAR_0,&VAR_7) != VAR_10)\n        return VAR_9;\n\n    VAR_6 = (struct sockaddr_un*)(VAR_0->saddr = malloc(sizeof(struct sockaddr_un)));\n    VAR_0->addrlen = sizeof(struct sockaddr_un);\n    VAR_6->sun_family = VAR_8;\n    strncpy(VAR_6->sun_path, VAR_1, sizeof(VAR_6->sun_path) - 1);\n    if (connect(VAR_0->fd, (struct sockaddr*)VAR_6, sizeof(*VAR_6)) == -1) {\n        if (VAR_12 == VAR_13 && !VAR_4) {\n            /* COMMENT_0 */\n        } else {\n            if (redisContextWaitReady(VAR_0,VAR_7) != VAR_10)\n                return VAR_9;\n        }\n    }\n\n    /* COMMENT_1 */\n    if (VAR_4 && redisSetBlocking(VAR_0,1) != VAR_10)\n        return VAR_9;\n\n    VAR_0->flags |= VAR_14;\n    return VAR_10;\n#else\n    /* COMMENT_2 */\n    /* COMMENT_3 */\n    VAR_12 = VAR_15;\n    return VAR_9;\n#endif /* COMMENT_4 */\n}",
  "func_graph_path_before": "redis/hiredis/669ac9d0c843f9ccf07d4969ff6bff75fafee01f/net.c/vul/before/1.json",
  "func": "int redisContextConnectUnix(redisContext *c, const char *path, const struct timeval *timeout) {\n#ifndef _WIN32\n    int blocking = (c->flags & REDIS_BLOCK);\n    struct sockaddr_un *sa;\n    long timeout_msec = -1;\n\n    if (redisCreateSocket(c,AF_UNIX) < 0)\n        return REDIS_ERR;\n    if (redisSetBlocking(c,0) != REDIS_OK)\n        return REDIS_ERR;\n\n    c->connection_type = REDIS_CONN_UNIX;\n    if (c->unix_sock.path != path)\n        c->unix_sock.path = hi_strdup(path);\n\n    if (timeout) {\n        if (c->timeout != timeout) {\n            if (c->timeout == NULL)\n                c->timeout = hi_malloc(sizeof(struct timeval));\n\n            memcpy(c->timeout, timeout, sizeof(struct timeval));\n        }\n    } else {\n        free(c->timeout);\n        c->timeout = NULL;\n    }\n\n    if (redisContextTimeoutMsec(c,&timeout_msec) != REDIS_OK)\n        return REDIS_ERR;\n\n    sa = (struct sockaddr_un*)(c->saddr = hi_malloc(sizeof(struct sockaddr_un)));\n    c->addrlen = sizeof(struct sockaddr_un);\n    sa->sun_family = AF_UNIX;\n    strncpy(sa->sun_path, path, sizeof(sa->sun_path) - 1);\n    if (connect(c->fd, (struct sockaddr*)sa, sizeof(*sa)) == -1) {\n        if (errno == EINPROGRESS && !blocking) {\n            /* This is ok. */\n        } else {\n            if (redisContextWaitReady(c,timeout_msec) != REDIS_OK)\n                return REDIS_ERR;\n        }\n    }\n\n    /* Reset socket to be blocking after connect(2). */\n    if (blocking && redisSetBlocking(c,1) != REDIS_OK)\n        return REDIS_ERR;\n\n    c->flags |= REDIS_CONNECTED;\n    return REDIS_OK;\n#else\n    /* We currently do not support Unix sockets for Windows. */\n    /* TODO(m): https://devblogs.microsoft.com/commandline/af_unix-comes-to-windows/ */\n    errno = EPROTONOSUPPORT;\n    return REDIS_ERR;\n#endif /* _WIN32 */\n}",
  "abstract_func": "int redisContextConnectUnix(redisContext *VAR_0, const char *VAR_1, const struct timeval *VAR_2) {\n#ifndef VAR_3\n    int VAR_4 = (VAR_0->flags & VAR_5);\n    struct sockaddr_un *VAR_6;\n    long VAR_7 = -1;\n\n    if (redisCreateSocket(VAR_0,VAR_8) < 0)\n        return VAR_9;\n    if (redisSetBlocking(VAR_0,0) != VAR_10)\n        return VAR_9;\n\n    VAR_0->connection_type = VAR_11;\n    if (VAR_0->unix_sock.path != VAR_1)\n        VAR_0->unix_sock.path = hi_strdup(VAR_1);\n\n    if (VAR_2) {\n        if (VAR_0->timeout != VAR_2) {\n            if (VAR_0->timeout == NULL)\n                VAR_0->timeout = hi_malloc(sizeof(struct timeval));\n\n            memcpy(VAR_0->timeout, VAR_2, sizeof(struct timeval));\n        }\n    } else {\n        free(VAR_0->timeout);\n        VAR_0->timeout = NULL;\n    }\n\n    if (redisContextTimeoutMsec(VAR_0,&VAR_7) != VAR_10)\n        return VAR_9;\n\n    VAR_6 = (struct sockaddr_un*)(VAR_0->saddr = hi_malloc(sizeof(struct sockaddr_un)));\n    VAR_0->addrlen = sizeof(struct sockaddr_un);\n    VAR_6->sun_family = VAR_8;\n    strncpy(VAR_6->sun_path, VAR_1, sizeof(VAR_6->sun_path) - 1);\n    if (connect(VAR_0->fd, (struct sockaddr*)VAR_6, sizeof(*VAR_6)) == -1) {\n        if (VAR_12 == VAR_13 && !VAR_4) {\n            /* COMMENT_0 */\n        } else {\n            if (redisContextWaitReady(VAR_0,VAR_7) != VAR_10)\n                return VAR_9;\n        }\n    }\n\n    /* COMMENT_1 */\n    if (VAR_4 && redisSetBlocking(VAR_0,1) != VAR_10)\n        return VAR_9;\n\n    VAR_0->flags |= VAR_14;\n    return VAR_10;\n#else\n    /* COMMENT_2 */\n    /* COMMENT_3 */\n    VAR_12 = VAR_15;\n    return VAR_9;\n#endif /* COMMENT_4 */\n}",
  "func_graph_path": "redis/hiredis/669ac9d0c843f9ccf07d4969ff6bff75fafee01f/net.c/vul/after/1.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -11,12 +11,12 @@\n \n     c->connection_type = REDIS_CONN_UNIX;\n     if (c->unix_sock.path != path)\n-        c->unix_sock.path = strdup(path);\n+        c->unix_sock.path = hi_strdup(path);\n \n     if (timeout) {\n         if (c->timeout != timeout) {\n             if (c->timeout == NULL)\n-                c->timeout = malloc(sizeof(struct timeval));\n+                c->timeout = hi_malloc(sizeof(struct timeval));\n \n             memcpy(c->timeout, timeout, sizeof(struct timeval));\n         }\n@@ -28,7 +28,7 @@\n     if (redisContextTimeoutMsec(c,&timeout_msec) != REDIS_OK)\n         return REDIS_ERR;\n \n-    sa = (struct sockaddr_un*)(c->saddr = malloc(sizeof(struct sockaddr_un)));\n+    sa = (struct sockaddr_un*)(c->saddr = hi_malloc(sizeof(struct sockaddr_un)));\n     c->addrlen = sizeof(struct sockaddr_un);\n     sa->sun_family = AF_UNIX;\n     strncpy(sa->sun_path, path, sizeof(sa->sun_path) - 1);",
  "diff_line_info": {
    "deleted_lines": [
      "        c->unix_sock.path = strdup(path);",
      "                c->timeout = malloc(sizeof(struct timeval));",
      "    sa = (struct sockaddr_un*)(c->saddr = malloc(sizeof(struct sockaddr_un)));"
    ],
    "added_lines": [
      "        c->unix_sock.path = hi_strdup(path);",
      "                c->timeout = hi_malloc(sizeof(struct timeval));",
      "    sa = (struct sockaddr_un*)(c->saddr = hi_malloc(sizeof(struct sockaddr_un)));"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/redis/hiredis/pull/754",
  "description": {
    "pr_info": {
      "title": "Safe allocation wrappers",
      "number": 754
    },
    "comment": [
      "Adds allocation wrappers that invokes a defined OOM handler.\r\n\r\nMy goal was the smallest surface area of changes possible.  Once we merge this it might be prudent to replace every `malloc`/`free` call with our wrappers.",
      "Just quoting the [last parts of the conversation in a merged PR](https://github.com/redis/hiredis/pull/752#issuecomment-577429138) from @michael-grunder \r\n\r\n>  @lamby I totally understand not wanting such a huge change just for a patch.\r\n\r\nThanks... and I think the changes in this PR would work for me. :+1: ",
      "Would be great to get some more eyes on this. :)",
      "> are we using asprintf and friends anywhere?\r\n\r\nNo, but `sds` has something similar (e.g. [sdscatfmt](https://github.com/redis/hiredis/blob/0501c623c91344e54cb2775a91509650960789b1/sds.c#L582)) although it appears that we're testing for NULL after every allocation/reallocation. \r\n\r\n",
      "Merged, thanks everyone!"
    ]
  },
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "**Final Classification:** Defect Remediation & Feature Upgrades; **Confidence:** 0.95"
}