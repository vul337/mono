{
  "cve_id": "CVE-2021-21309",
  "cwe_ids": [
    "CWE-190"
  ],
  "cvss_vector": "AV:N/AC:L/Au:S/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "redis",
  "commit_msg": "Fix integer overflow (CVE-2021-21309). (#8522)\n\nOn 32-bit systems, setting the proto-max-bulk-len config parameter to a high value may result with integer overflow and a subsequent heap overflow when parsing an input bulk (CVE-2021-21309).\n\nThis fix has two parts:\n\nSet a reasonable limit to the config parameter.\nAdd additional checks to prevent the problem in other potential but unknown code paths.\n\n(cherry picked from commit d32f2e9999ce003bad0bd2c3bca29f64dcce4433)",
  "commit_hash": "c992857618db99776917f10bf4f2345a5fdc78b0",
  "git_url": "https://github.com/redis/redis/commit/c992857618db99776917f10bf4f2345a5fdc78b0",
  "file_path": "src/zmalloc.c",
  "func_name": "zrealloc",
  "func_before": "void *zrealloc(void *ptr, size_t size) {\n#ifndef HAVE_MALLOC_SIZE\n    void *realptr;\n#endif\n    size_t oldsize;\n    void *newptr;\n\n    if (size == 0 && ptr != NULL) {\n        zfree(ptr);\n        return NULL;\n    }\n    if (ptr == NULL) return zmalloc(size);\n#ifdef HAVE_MALLOC_SIZE\n    oldsize = zmalloc_size(ptr);\n    newptr = realloc(ptr,size);\n    if (!newptr) zmalloc_oom_handler(size);\n\n    update_zmalloc_stat_free(oldsize);\n    update_zmalloc_stat_alloc(zmalloc_size(newptr));\n    return newptr;\n#else\n    realptr = (char*)ptr-PREFIX_SIZE;\n    oldsize = *((size_t*)realptr);\n    newptr = realloc(realptr,size+PREFIX_SIZE);\n    if (!newptr) zmalloc_oom_handler(size);\n\n    *((size_t*)newptr) = size;\n    update_zmalloc_stat_free(oldsize+PREFIX_SIZE);\n    update_zmalloc_stat_alloc(size+PREFIX_SIZE);\n    return (char*)newptr+PREFIX_SIZE;\n#endif\n}",
  "abstract_func_before": "void *zrealloc(void *VAR_0, size_t VAR_1) {\n#ifndef VAR_2\n    void *VAR_3;\n#endif\n    size_t VAR_4;\n    void *VAR_5;\n\n    if (VAR_1 == 0 && VAR_0 != NULL) {\n        zfree(VAR_0);\n        return NULL;\n    }\n    if (VAR_0 == NULL) return zmalloc(VAR_1);\n#ifdef VAR_2\n    VAR_4 = zmalloc_size(VAR_0);\n    VAR_5 = realloc(VAR_0,VAR_1);\n    if (!VAR_5) zmalloc_oom_handler(VAR_1);\n\n    update_zmalloc_stat_free(VAR_4);\n    update_zmalloc_stat_alloc(zmalloc_size(VAR_5));\n    return VAR_5;\n#else\n    VAR_3 = (char*)VAR_0-VAR_6;\n    VAR_4 = *((size_t*)VAR_3);\n    VAR_5 = realloc(VAR_3,VAR_1+VAR_6);\n    if (!VAR_5) zmalloc_oom_handler(VAR_1);\n\n    *((size_t*)VAR_5) = VAR_1;\n    update_zmalloc_stat_free(VAR_4+VAR_6);\n    update_zmalloc_stat_alloc(VAR_1+VAR_6);\n    return (char*)VAR_5+VAR_6;\n#endif\n}",
  "func_graph_path_before": "redis/c992857618db99776917f10bf4f2345a5fdc78b0/zmalloc.c/vul/before/0.json",
  "func": "void *zrealloc(void *ptr, size_t size) {\n    ASSERT_NO_SIZE_OVERFLOW(size);\n#ifndef HAVE_MALLOC_SIZE\n    void *realptr;\n#endif\n    size_t oldsize;\n    void *newptr;\n\n    if (size == 0 && ptr != NULL) {\n        zfree(ptr);\n        return NULL;\n    }\n    if (ptr == NULL) return zmalloc(size);\n#ifdef HAVE_MALLOC_SIZE\n    oldsize = zmalloc_size(ptr);\n    newptr = realloc(ptr,size);\n    if (!newptr) zmalloc_oom_handler(size);\n\n    update_zmalloc_stat_free(oldsize);\n    update_zmalloc_stat_alloc(zmalloc_size(newptr));\n    return newptr;\n#else\n    realptr = (char*)ptr-PREFIX_SIZE;\n    oldsize = *((size_t*)realptr);\n    newptr = realloc(realptr,size+PREFIX_SIZE);\n    if (!newptr) zmalloc_oom_handler(size);\n\n    *((size_t*)newptr) = size;\n    update_zmalloc_stat_free(oldsize+PREFIX_SIZE);\n    update_zmalloc_stat_alloc(size+PREFIX_SIZE);\n    return (char*)newptr+PREFIX_SIZE;\n#endif\n}",
  "abstract_func": "void *zrealloc(void *VAR_0, size_t VAR_1) {\n    ASSERT_NO_SIZE_OVERFLOW(VAR_1);\n#ifndef VAR_2\n    void *VAR_3;\n#endif\n    size_t VAR_4;\n    void *VAR_5;\n\n    if (VAR_1 == 0 && VAR_0 != NULL) {\n        zfree(VAR_0);\n        return NULL;\n    }\n    if (VAR_0 == NULL) return zmalloc(VAR_1);\n#ifdef VAR_2\n    VAR_4 = zmalloc_size(VAR_0);\n    VAR_5 = realloc(VAR_0,VAR_1);\n    if (!VAR_5) zmalloc_oom_handler(VAR_1);\n\n    update_zmalloc_stat_free(VAR_4);\n    update_zmalloc_stat_alloc(zmalloc_size(VAR_5));\n    return VAR_5;\n#else\n    VAR_3 = (char*)VAR_0-VAR_6;\n    VAR_4 = *((size_t*)VAR_3);\n    VAR_5 = realloc(VAR_3,VAR_1+VAR_6);\n    if (!VAR_5) zmalloc_oom_handler(VAR_1);\n\n    *((size_t*)VAR_5) = VAR_1;\n    update_zmalloc_stat_free(VAR_4+VAR_6);\n    update_zmalloc_stat_alloc(VAR_1+VAR_6);\n    return (char*)VAR_5+VAR_6;\n#endif\n}",
  "func_graph_path": "redis/c992857618db99776917f10bf4f2345a5fdc78b0/zmalloc.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,4 +1,5 @@\n void *zrealloc(void *ptr, size_t size) {\n+    ASSERT_NO_SIZE_OVERFLOW(size);\n #ifndef HAVE_MALLOC_SIZE\n     void *realptr;\n #endif",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "    ASSERT_NO_SIZE_OVERFLOW(size);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/redis/redis/pull/8527",
  "description": {
    "pr_info": {
      "title": "Release 6.0.11",
      "number": 8527
    },
    "comment": [
      "Upgrade urgency: SECURITY if you use 32bit build of redis (see bellow), LOW\r\notherwise.\r\n\r\nInteger overflow on 32-bit systems (CVE-2021-21309):\r\nRedis 4.0 or newer uses a configurable limit for the maximum supported bulk\r\ninput size. By default, it is 512MB which is a safe value for all platforms.\r\nIf the limit is significantly increased, receiving a large request from a client\r\nmay trigger several integer overflow scenarios, which would result with buffer\r\noverflow and heap corruption.\r\n\r\nBug fixes:\r\n* Avoid 32-bit overflows when proto-max-bulk-len is set high (#8522)\r\n* Fix handling of threaded IO and CLIENT PAUSE (failover), could lead to data loss or a crash (#8520)\r\n* Fix the selection of a random element from large hash tables (#8133)\r\n* Fix broken protocol in client tracking tracking-redir-broken message (#8456)\r\n* XINFO able to access expired keys on a replica (#8436)\r\n* Fix broken protocol in redis-benchmark when used with -a or --dbnum (#8486)\r\n* Avoid assertions (on older kernels) when testing arm64 CoW bug (#8405)\r\n* CONFIG REWRITE should honor umask settings (#8371)\r\n* Fix firstkey,lastkey,step in COMMAND command for some commands (#8367)\r\n\r\nModules:\r\n* RM_ZsetRem: Delete key if empty, the bug could leave empty zset keys (#8453)"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "The commit addresses a security issue by adding checks to prevent integer overflow, which is a known vulnerability. The presence of a CVE identifier and the code modifications confirm this as a security fix.\n\n**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 1.0"
}