{
  "cve_id": "CVE-2021-3674",
  "cwe_ids": [
    "CWE-125"
  ],
  "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H",
  "cvss_is_v3": true,
  "repo_name": "rizinorg/rizin",
  "commit_msg": "Fix memory corruption in create_section_from_phdr",
  "commit_hash": "1e0c34946dddf9b8e5e63933aefacf2b26d08103",
  "git_url": "https://github.com/rizinorg/rizin/commit/1e0c34946dddf9b8e5e63933aefacf2b26d08103",
  "file_path": "librz/bin/format/elf/elf_sections.c",
  "func_name": "create_section_from_phdr",
  "func_before": "static bool create_section_from_phdr(ELFOBJ *bin, RzVector *result, const char *name, ut64 addr, ut64 sz) {\n\tRzBinElfSection *section = rz_vector_push(result, NULL);\n\tif (!section) {\n\t\tRZ_LOG_WARN(\"Failed to allocate memory for the section.\")\n\t\treturn false;\n\t}\n\n\tsection->offset = Elf_(rz_bin_elf_v2p_new)(bin, addr);\n\tif (section->offset == UT64_MAX) {\n\t\tRZ_LOG_WARN(\"invalid section offset.\")\n\t\treturn false;\n\t}\n\n\tsection->rva = addr;\n\tsection->size = sz;\n\tsection->name = strdup(name);\n\tif (!section->name) {\n\t\tRZ_LOG_WARN(\"Failed to allocate memory for the section name.\")\n\t\treturn false;\n\t}\n\n\treturn true;\n}",
  "abstract_func_before": "static bool create_section_from_phdr(ELFOBJ *VAR_0, RzVector *VAR_1, const char *VAR_2, ut64 VAR_3, ut64 VAR_4) {\n\tRzBinElfSection *VAR_5 = rz_vector_push(VAR_1, NULL);\n\tif (!VAR_5) {\n\t\tRZ_LOG_WARN(\"Failed to allocate memory for the section.\")\n\t\treturn false;\n\t}\n\n\tVAR_5->offset = Elf_(VAR_6)(VAR_0, VAR_3);\n\tif (VAR_5->offset == VAR_7) {\n\t\tRZ_LOG_WARN(\"invalid section offset.\")\n\t\treturn false;\n\t}\n\n\tVAR_5->rva = VAR_3;\n\tVAR_5->size = VAR_4;\n\tVAR_5->name = strdup(VAR_2);\n\tif (!VAR_5->name) {\n\t\tRZ_LOG_WARN(\"Failed to allocate memory for the section name.\")\n\t\treturn false;\n\t}\n\n\treturn true;\n}",
  "func_graph_path_before": "rizinorg/rizin/1e0c34946dddf9b8e5e63933aefacf2b26d08103/elf_sections.c/vul/before/0.json",
  "func": "static bool create_section_from_phdr(ELFOBJ *bin, RzVector *result, const char *name, ut64 addr, ut64 sz) {\n\tRzBinElfSection section;\n\n\tsection.offset = Elf_(rz_bin_elf_v2p_new)(bin, addr);\n\tif (section.offset == UT64_MAX) {\n\t\tRZ_LOG_WARN(\"invalid section offset.\")\n\t\treturn false;\n\t}\n\n\tsection.rva = addr;\n\tsection.size = sz;\n\tsection.name = strdup(name);\n\tif (!section.name) {\n\t\tRZ_LOG_WARN(\"Failed to allocate memory for the section name.\")\n\t\treturn false;\n\t}\n\n\tif (!rz_vector_push(result, &section)) {\n\t\tRZ_LOG_WARN(\"Failed to allocate memory for the section.\")\n\t\treturn false;\n\t}\n\n\treturn true;\n}",
  "abstract_func": "static bool create_section_from_phdr(ELFOBJ *VAR_0, RzVector *VAR_1, const char *VAR_2, ut64 VAR_3, ut64 VAR_4) {\n\tRzBinElfSection VAR_5;\n\n\tVAR_5.offset = Elf_(VAR_6)(VAR_0, VAR_3);\n\tif (VAR_5.offset == VAR_7) {\n\t\tRZ_LOG_WARN(\"invalid section offset.\")\n\t\treturn false;\n\t}\n\n\tVAR_5.rva = VAR_3;\n\tVAR_5.size = VAR_4;\n\tVAR_5.name = strdup(VAR_2);\n\tif (!VAR_5.name) {\n\t\tRZ_LOG_WARN(\"Failed to allocate memory for the section name.\")\n\t\treturn false;\n\t}\n\n\tif (!rz_vector_push(VAR_1, &VAR_5)) {\n\t\tRZ_LOG_WARN(\"Failed to allocate memory for the section.\")\n\t\treturn false;\n\t}\n\n\treturn true;\n}",
  "func_graph_path": "rizinorg/rizin/1e0c34946dddf9b8e5e63933aefacf2b26d08103/elf_sections.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,21 +1,22 @@\n static bool create_section_from_phdr(ELFOBJ *bin, RzVector *result, const char *name, ut64 addr, ut64 sz) {\n-\tRzBinElfSection *section = rz_vector_push(result, NULL);\n-\tif (!section) {\n-\t\tRZ_LOG_WARN(\"Failed to allocate memory for the section.\")\n-\t\treturn false;\n-\t}\n+\tRzBinElfSection section;\n \n-\tsection->offset = Elf_(rz_bin_elf_v2p_new)(bin, addr);\n-\tif (section->offset == UT64_MAX) {\n+\tsection.offset = Elf_(rz_bin_elf_v2p_new)(bin, addr);\n+\tif (section.offset == UT64_MAX) {\n \t\tRZ_LOG_WARN(\"invalid section offset.\")\n \t\treturn false;\n \t}\n \n-\tsection->rva = addr;\n-\tsection->size = sz;\n-\tsection->name = strdup(name);\n-\tif (!section->name) {\n+\tsection.rva = addr;\n+\tsection.size = sz;\n+\tsection.name = strdup(name);\n+\tif (!section.name) {\n \t\tRZ_LOG_WARN(\"Failed to allocate memory for the section name.\")\n+\t\treturn false;\n+\t}\n+\n+\tif (!rz_vector_push(result, &section)) {\n+\t\tRZ_LOG_WARN(\"Failed to allocate memory for the section.\")\n \t\treturn false;\n \t}\n ",
  "diff_line_info": {
    "deleted_lines": [
      "\tRzBinElfSection *section = rz_vector_push(result, NULL);",
      "\tif (!section) {",
      "\t\tRZ_LOG_WARN(\"Failed to allocate memory for the section.\")",
      "\t\treturn false;",
      "\t}",
      "\tsection->offset = Elf_(rz_bin_elf_v2p_new)(bin, addr);",
      "\tif (section->offset == UT64_MAX) {",
      "\tsection->rva = addr;",
      "\tsection->size = sz;",
      "\tsection->name = strdup(name);",
      "\tif (!section->name) {"
    ],
    "added_lines": [
      "\tRzBinElfSection section;",
      "\tsection.offset = Elf_(rz_bin_elf_v2p_new)(bin, addr);",
      "\tif (section.offset == UT64_MAX) {",
      "\tsection.rva = addr;",
      "\tsection.size = sz;",
      "\tsection.name = strdup(name);",
      "\tif (!section.name) {",
      "\t\treturn false;",
      "\t}",
      "",
      "\tif (!rz_vector_push(result, &section)) {",
      "\t\tRZ_LOG_WARN(\"Failed to allocate memory for the section.\")"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/rizinorg/rizin/pull/1313",
  "description": {
    "pr_info": {
      "title": "Fix memory corruption in create_section_from_phdr",
      "number": 1313
    },
    "comment": [
      " <!-- Filling this template is mandatory -->\r\n\r\n**Your checklist for this pull request**\r\n- [x] I've read the [guidelines for contributing](https://github.com/rizinorg/rizin/blob/master/DEVELOPERS.md) to this repository\r\n- [x] I made sure to follow the project's [coding style](https://github.com/rizinorg/rizin/blob/master/DEVELOPERS.md#code-style)\r\n- [ ] I've added tests that prove my fix is effective or that my feature works (if possible)\r\n- [ ] I've updated the documentation and the [rizin book](https://github.com/rizinorg/book) with the relevant information (if needed)\r\n\r\n**Detailed description**\r\n\r\n* fix the memory corruption => the vector push create a new section but the section->name could be a garbage value if section->offset is invalid.\r\n* fix some warning generated when there is no sections\r\n\r\n**Test plan**\r\n\r\n`rizin POC.bin`\r\n\r\n[POC.zip](https://github.com/rizinorg/rizin/files/6822961/POC.zip)\r\n\r\n**Closing issues**\r\n\r\n<!-- put \"closes #XXXX\" in your comment to auto-close the issue that your PR fixes (if any). -->\r\n\r\n...\r\n",
      "+1 test waiting https://github.com/rizinorg/rizin-testbins/pull/40"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 0.95"
}