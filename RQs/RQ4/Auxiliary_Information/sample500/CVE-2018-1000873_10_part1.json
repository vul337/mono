{
  "cve_id": "CVE-2018-1000873",
  "cwe_ids": [
    "CWE-20"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "FasterXML/jackson-modules-java8",
  "commit_msg": "Avoid latency problems converting decimal to time.\n\nFixes https://github.com/FasterXML/jackson-databind/issues/2141",
  "commit_hash": "ba27ce5909dfb49bcaf753ad3e04ecb980010b0b",
  "git_url": "https://github.com/FasterXML/jackson-modules-java8/commit/ba27ce5909dfb49bcaf753ad3e04ecb980010b0b",
  "file_path": "datetime/src/main/java/com/fasterxml/jackson/datatype/jsr310/deser/InstantDeserializer.java",
  "func_name": "deserialize",
  "func_before": "@SuppressWarnings(\"unchecked\")\n    @Override\n    public T deserialize(JsonParser parser, DeserializationContext context) throws IOException\n    {\n        //NOTE: Timestamps contain no timezone info, and are always in configured TZ. Only\n        //string values have to be adjusted to the configured TZ.\n        switch (parser.getCurrentTokenId())\n        {\n            case JsonTokenId.ID_NUMBER_FLOAT:\n                return _fromDecimal(context, parser.getDecimalValue());\n\n            case JsonTokenId.ID_NUMBER_INT:\n                return _fromLong(context, parser.getLongValue());\n\n            case JsonTokenId.ID_STRING:\n            {\n                String string = parser.getText().trim();\n                if (string.length() == 0) {\n                    return null;\n                }\n                // only check for other parsing modes if we are using default formatter\n                if (_formatter == DateTimeFormatter.ISO_INSTANT ||\n                    _formatter == DateTimeFormatter.ISO_OFFSET_DATE_TIME ||\n                    _formatter == DateTimeFormatter.ISO_ZONED_DATE_TIME) {\n                    // 22-Jan-2016, [datatype-jsr310#16]: Allow quoted numbers too\n                    int dots = _countPeriods(string);\n                    if (dots >= 0) { // negative if not simple number\n                        try {\n                            if (dots == 0) {\n                                return _fromLong(context, Long.parseLong(string));\n                            }\n                            if (dots == 1) {\n                                return _fromDecimal(context, new BigDecimal(string));\n                            }\n                        } catch (NumberFormatException e) {\n                            // fall through to default handling, to get error there\n                        }\n                    }\n\n                    string = replaceZeroOffsetAsZIfNecessary(string);\n                }\n\n                T value;\n                try {\n                    TemporalAccessor acc = _formatter.parse(string);\n                    value = parsedToValue.apply(acc);\n                    if (shouldAdjustToContextTimezone(context)) {\n                        return adjust.apply(value, this.getZone(context));\n                    }\n                } catch (DateTimeException e) {\n                    value = _handleDateTimeException(context, e, string);\n                }\n                return value;\n            }\n\n            case JsonTokenId.ID_EMBEDDED_OBJECT:\n                // 20-Apr-2016, tatu: Related to [databind#1208], can try supporting embedded\n                //    values quite easily\n                return (T) parser.getEmbeddedObject();\n                \n            case JsonTokenId.ID_START_ARRAY:\n            \treturn _deserializeFromArray(parser, context);\n        }\n        return _handleUnexpectedToken(context, parser, JsonToken.VALUE_STRING,\n                JsonToken.VALUE_NUMBER_INT, JsonToken.VALUE_NUMBER_FLOAT);\n    }",
  "abstract_func_before": "@SuppressWarnings(\"unchecked\")\n    @Override\n    public T deserialize(JsonParser VAR_0, DeserializationContext VAR_1) throws IOException\n    {\n        /* COMMENT_0 */\n        /* COMMENT_1 */\n        switch (VAR_0.getCurrentTokenId())\n        {\n            case VAR_2.ID_NUMBER_FLOAT:\n                return _fromDecimal(VAR_1, VAR_0.getDecimalValue());\n\n            case VAR_2.ID_NUMBER_INT:\n                return _fromLong(VAR_1, VAR_0.getLongValue());\n\n            case VAR_2.ID_STRING:\n            {\n                String VAR_3 = VAR_0.getText().trim();\n                if (VAR_3.length() == 0) {\n                    return null;\n                }\n                /* COMMENT_2 */\n                if (VAR_4 == VAR_5.ISO_INSTANT ||\n                    VAR_4 == VAR_5.ISO_OFFSET_DATE_TIME ||\n                    VAR_4 == VAR_5.ISO_ZONED_DATE_TIME) {\n                    /* COMMENT_3 */\n                    int VAR_6 = _countPeriods(VAR_3);\n                    if (VAR_6 >= 0) { /* COMMENT_4 */\n                        try {\n                            if (VAR_6 == 0) {\n                                return _fromLong(VAR_1, VAR_7.parseLong(VAR_3));\n                            }\n                            if (VAR_6 == 1) {\n                                return _fromDecimal(VAR_1, new BigDecimal(VAR_3));\n                            }\n                        } catch (NumberFormatException VAR_8) {\n                            /* COMMENT_5 */\n                        }\n                    }\n\n                    VAR_3 = replaceZeroOffsetAsZIfNecessary(VAR_3);\n                }\n\n                T VAR_9;\n                try {\n                    TemporalAccessor VAR_10 = VAR_4.parse(VAR_3);\n                    VAR_9 = VAR_11.apply(VAR_10);\n                    if (shouldAdjustToContextTimezone(VAR_1)) {\n                        return VAR_12.apply(VAR_9, this.getZone(VAR_1));\n                    }\n                } catch (DateTimeException VAR_8) {\n                    VAR_9 = _handleDateTimeException(VAR_1, VAR_8, VAR_3);\n                }\n                return VAR_9;\n            }\n\n            case VAR_2.ID_EMBEDDED_OBJECT:\n                /* COMMENT_6 */\n                /* COMMENT_7 */\n                return (T) VAR_0.getEmbeddedObject();\n                \n            case VAR_2.ID_START_ARRAY:\n            \treturn _deserializeFromArray(VAR_0, VAR_1);\n        }\n        return _handleUnexpectedToken(VAR_1, VAR_0, VAR_13.VALUE_STRING,\n                VAR_13.VALUE_NUMBER_INT, VAR_13.VALUE_NUMBER_FLOAT);\n    }",
  "func_graph_path_before": "FasterXML/jackson-modules-java8/ba27ce5909dfb49bcaf753ad3e04ecb980010b0b/InstantDeserializer.java/vul/before/1.json",
  "func": "@SuppressWarnings(\"unchecked\")\n    @Override\n    public T deserialize(JsonParser parser, DeserializationContext context) throws IOException\n    {\n        //NOTE: Timestamps contain no timezone info, and are always in configured TZ. Only\n        //string values have to be adjusted to the configured TZ.\n        switch (parser.getCurrentTokenId())\n        {\n            case JsonTokenId.ID_NUMBER_FLOAT:\n                return _fromDecimal(context, parser.getDecimalValue());\n\n            case JsonTokenId.ID_NUMBER_INT:\n                return _fromLong(context, parser.getLongValue());\n\n            case JsonTokenId.ID_STRING:\n            {\n                String string = parser.getText().trim();\n                if (string.length() == 0) {\n                    return null;\n                }\n                // only check for other parsing modes if we are using default formatter\n                if (_formatter == DateTimeFormatter.ISO_INSTANT ||\n                    _formatter == DateTimeFormatter.ISO_OFFSET_DATE_TIME ||\n                    _formatter == DateTimeFormatter.ISO_ZONED_DATE_TIME) {\n                    // 22-Jan-2016, [datatype-jsr310#16]: Allow quoted numbers too\n                    int dots = _countPeriods(string);\n                    if (dots >= 0) { // negative if not simple number\n                        try {\n                            if (dots == 0) {\n                                return _fromLong(context, Long.parseLong(string));\n                            }\n                            if (dots == 1) {\n                                return _fromDecimal(context, new BigDecimal(string));\n                            }\n                        } catch (NumberFormatException e) {\n                            // fall through to default handling, to get error there\n                        }\n                    }\n\n                    string = replaceZeroOffsetAsZIfNecessary(string);\n                }\n\n                T value;\n                try {\n                    TemporalAccessor acc = _formatter.parse(string);\n                    value = parsedToValue.apply(acc);\n                    if (shouldAdjustToContextTimezone(context)) {\n                        return adjust.apply(value, this.getZone(context));\n                    }\n                } catch (DateTimeException e) {\n                    value = _handleDateTimeException(context, e, string);\n                }\n                return value;\n            }\n\n            case JsonTokenId.ID_EMBEDDED_OBJECT:\n                // 20-Apr-2016, tatu: Related to [databind#1208], can try supporting embedded\n                //    values quite easily\n                return (T) parser.getEmbeddedObject();\n\n            case JsonTokenId.ID_START_ARRAY:\n            \treturn _deserializeFromArray(parser, context);\n        }\n        return _handleUnexpectedToken(context, parser, JsonToken.VALUE_STRING,\n                JsonToken.VALUE_NUMBER_INT, JsonToken.VALUE_NUMBER_FLOAT);\n    }",
  "abstract_func": "@SuppressWarnings(\"unchecked\")\n    @Override\n    public T deserialize(JsonParser VAR_0, DeserializationContext VAR_1) throws IOException\n    {\n        /* COMMENT_0 */\n        /* COMMENT_1 */\n        switch (VAR_0.getCurrentTokenId())\n        {\n            case VAR_2.ID_NUMBER_FLOAT:\n                return _fromDecimal(VAR_1, VAR_0.getDecimalValue());\n\n            case VAR_2.ID_NUMBER_INT:\n                return _fromLong(VAR_1, VAR_0.getLongValue());\n\n            case VAR_2.ID_STRING:\n            {\n                String VAR_3 = VAR_0.getText().trim();\n                if (VAR_3.length() == 0) {\n                    return null;\n                }\n                /* COMMENT_2 */\n                if (VAR_4 == VAR_5.ISO_INSTANT ||\n                    VAR_4 == VAR_5.ISO_OFFSET_DATE_TIME ||\n                    VAR_4 == VAR_5.ISO_ZONED_DATE_TIME) {\n                    /* COMMENT_3 */\n                    int VAR_6 = _countPeriods(VAR_3);\n                    if (VAR_6 >= 0) { /* COMMENT_4 */\n                        try {\n                            if (VAR_6 == 0) {\n                                return _fromLong(VAR_1, VAR_7.parseLong(VAR_3));\n                            }\n                            if (VAR_6 == 1) {\n                                return _fromDecimal(VAR_1, new BigDecimal(VAR_3));\n                            }\n                        } catch (NumberFormatException VAR_8) {\n                            /* COMMENT_5 */\n                        }\n                    }\n\n                    VAR_3 = replaceZeroOffsetAsZIfNecessary(VAR_3);\n                }\n\n                T VAR_9;\n                try {\n                    TemporalAccessor VAR_10 = VAR_4.parse(VAR_3);\n                    VAR_9 = VAR_11.apply(VAR_10);\n                    if (shouldAdjustToContextTimezone(VAR_1)) {\n                        return VAR_12.apply(VAR_9, this.getZone(VAR_1));\n                    }\n                } catch (DateTimeException VAR_8) {\n                    VAR_9 = _handleDateTimeException(VAR_1, VAR_8, VAR_3);\n                }\n                return VAR_9;\n            }\n\n            case VAR_2.ID_EMBEDDED_OBJECT:\n                /* COMMENT_6 */\n                /* COMMENT_7 */\n                return (T) VAR_0.getEmbeddedObject();\n\n            case VAR_2.ID_START_ARRAY:\n            \treturn _deserializeFromArray(VAR_0, VAR_1);\n        }\n        return _handleUnexpectedToken(VAR_1, VAR_0, VAR_13.VALUE_STRING,\n                VAR_13.VALUE_NUMBER_INT, VAR_13.VALUE_NUMBER_FLOAT);\n    }",
  "func_graph_path": "FasterXML/jackson-modules-java8/ba27ce5909dfb49bcaf753ad3e04ecb980010b0b/InstantDeserializer.java/vul/after/1.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -57,7 +57,7 @@\n                 // 20-Apr-2016, tatu: Related to [databind#1208], can try supporting embedded\n                 //    values quite easily\n                 return (T) parser.getEmbeddedObject();\n-                \n+\n             case JsonTokenId.ID_START_ARRAY:\n             \treturn _deserializeFromArray(parser, context);\n         }",
  "diff_line_info": {
    "deleted_lines": [
      "                "
    ],
    "added_lines": [
      ""
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/FasterXML/jackson-modules-java8/pull/87",
  "description": {
    "pr_info": {
      "title": "Prevent unbounded latency converting decimals to time",
      "number": 87
    },
    "comment": [
      "This change prevents latency explosions when working with high-magnitude `BigDecimal` values, while preserving the current behavior on the edge cases.\r\n\r\nIt's fixes the original bug reported in https://github.com/FasterXML/jackson-databind/issues/2141 but not the several related issues discussed therein. It builds atop my earlier PR https://github.com/FasterXML/jackson-modules-java8/pull/85\r\n\r\nOne challenge here is that the current two-step conversion process, using `BigDecimal.longValue()` and `DecimalUtils. extractNanosecondDecimal()` separately, made it hard to control the edge cases because information is lost during the former.  So I combined the two into a single helper method.\r\n\r\n(IMO these helpers shouldn't be public API, since they are bespoke semantics needed by this package, and unlikely to be usable by other contexts.  Frankly I'd prefer to make the new helper method package-protected, if that's okay with the maintainers.)",
      "Ok, yes, excellent thank you for the fix!\r\n\r\n+1 for hiding functionality (I often use `protected` as compromise to allow sub-classing but not advertise it). I also think that deprecation here makes sense, and then dropping method off in 3.0.\r\n\r\nI can make that change after merge.\r\n\r\nLet's see if I can continue discussion on remaining challenge after I merge this.\r\n\r\n\r\n"
    ]
  },
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.6,
  "Bug Filter Response": "**Final Classification:** Defect Remediation & Feature Upgrades; **Confidence:** 0.6"
}