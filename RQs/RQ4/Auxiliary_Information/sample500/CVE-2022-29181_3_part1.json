{
  "cve_id": "CVE-2022-29181",
  "cwe_ids": [
    "CWE-241"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "sparklemotion/nokogiri",
  "commit_msg": "fix: {HTML4,XML}::SAX::{Parser,ParserContext} check arg types\n\nPreviously, arguments of the wrong type might cause segfault on CRuby.",
  "commit_hash": "db05ba9a1bd4b90aa6c76742cf6102a7c7297267",
  "git_url": "https://github.com/sparklemotion/nokogiri/commit/db05ba9a1bd4b90aa6c76742cf6102a7c7297267",
  "file_path": "ext/java/nokogiri/internals/ParserContext.java",
  "func_name": "setIOInputSource",
  "func_before": "public void\n  setIOInputSource(ThreadContext context, IRubyObject data, IRubyObject url)\n  {\n    source = new InputSource();\n    ParserContext.setUrl(context, source, url);\n\n    source.setByteStream(new IOInputStream(data));\n    if (java_encoding != null) {\n      source.setEncoding(java_encoding);\n    }\n  }",
  "abstract_func_before": "public void\n  setIOInputSource(ThreadContext VAR_0, IRubyObject VAR_1, IRubyObject VAR_2)\n  {\n    VAR_3 = new InputSource();\n    VAR_4.setUrl(VAR_0, VAR_3, VAR_2);\n\n    VAR_3.setByteStream(new IOInputStream(VAR_1));\n    if (VAR_5 != null) {\n      VAR_3.setEncoding(VAR_5);\n    }\n  }",
  "func_graph_path_before": "sparklemotion/nokogiri/db05ba9a1bd4b90aa6c76742cf6102a7c7297267/ParserContext.java/vul/before/1.json",
  "func": "public void\n  setIOInputSource(ThreadContext context, IRubyObject data, IRubyObject url)\n  {\n    source = new InputSource();\n    ParserContext.setUrl(context, source, url);\n\n    Ruby ruby = context.getRuntime();\n\n    if (!(data.respondsTo(\"read\"))) {\n      throw ruby.newTypeError(\"must respond to :read\");\n    }\n\n    source.setByteStream(new IOInputStream(data));\n    if (java_encoding != null) {\n      source.setEncoding(java_encoding);\n    }\n  }",
  "abstract_func": "public void\n  setIOInputSource(ThreadContext VAR_0, IRubyObject VAR_1, IRubyObject VAR_2)\n  {\n    VAR_3 = new InputSource();\n    VAR_4.setUrl(VAR_0, VAR_3, VAR_2);\n\n    Ruby VAR_5 = VAR_0.getRuntime();\n\n    if (!(VAR_1.respondsTo(\"read\"))) {\n      throw VAR_5.newTypeError(\"must respond to :read\");\n    }\n\n    VAR_3.setByteStream(new IOInputStream(VAR_1));\n    if (VAR_6 != null) {\n      VAR_3.setEncoding(VAR_6);\n    }\n  }",
  "func_graph_path": "sparklemotion/nokogiri/db05ba9a1bd4b90aa6c76742cf6102a7c7297267/ParserContext.java/vul/after/1.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -4,6 +4,12 @@\n     source = new InputSource();\n     ParserContext.setUrl(context, source, url);\n \n+    Ruby ruby = context.getRuntime();\n+\n+    if (!(data.respondsTo(\"read\"))) {\n+      throw ruby.newTypeError(\"must respond to :read\");\n+    }\n+\n     source.setByteStream(new IOInputStream(data));\n     if (java_encoding != null) {\n       source.setEncoding(java_encoding);",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "    Ruby ruby = context.getRuntime();",
      "",
      "    if (!(data.respondsTo(\"read\"))) {",
      "      throw ruby.newTypeError(\"must respond to :read\");",
      "    }",
      ""
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/sparklemotion/nokogiri/pull/2529",
  "description": {
    "pr_info": {
      "title": "SAX::Parser constructors check types",
      "number": 2529
    },
    "comment": [
      "**What problem is this PR intended to solve?**\r\n\r\nHTML4::SAX::Parser, HTML4::SAX::ParserContext, XML::SAX::Parser, and XML::SAX::ParserContext now properly check the types of the arguments to their various constructor methods.\r\n\r\nPreviously, passing arguments of unexpected types might cause a segfault or other less-obvious exceptions.\r\n\r\n**Have you included adequate test coverage?**\r\n\r\nYes! Added test coverage for these cases.\r\n\r\n\r\n**Does this change affect the behavior of either the C or the Java implementations?**\r\n\r\nBoth the C and Java implementations have been updated to behave identically in this circumstance."
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "**Step-by-Step Explanation:**\n\n1. **Input Analysis:**\n   - The commit message and vulnerability description indicate that the patch addresses incorrect argument types leading to segfaults.\n   - Code diff shows added type checking which prevents crashes.\n\n2. **Consistency Check:**\n   - Changes align with the described issue and commit message, adding necessary validation.\n\n3. **Purpose Evaluation:**\n   - Modifies core logic to fix a crash, which is a critical issue.\n\n4. **Security Assessment:**\n   - Segfaults due to invalid inputs are security risks as they can lead to unexpected behavior or exploitation.\n\n5. **Confidence Scoring:**\n   - High confidence as all components clearly indicate a security fix.\n\n**Final Classification:** Security Vulnerability Fix; **Confidence:** 0.95"
}