{
  "cve_id": "CVE-2022-21227",
  "cwe_ids": [
    "CWE-Other"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "TryGhost/node-sqlite3",
  "commit_msg": "bug: fix segfault of invalid toString() object (#1450)\n\n* bug: verify toString() returns valid data\r\n* test: faulty toString test",
  "commit_hash": "593c9d498be2510d286349134537e3bf89401c4a",
  "git_url": "https://github.com/TryGhost/node-sqlite3/commit/593c9d498be2510d286349134537e3bf89401c4a",
  "file_path": "src/statement.cc",
  "func_name": "Statement::BindParameter",
  "func_before": "Values::Field*\n                   Statement::BindParameter(const Napi::Value source, T pos) {\n    if (source.IsString()) {\n        std::string val = source.As<Napi::String>().Utf8Value();\n        return new Values::Text(pos, val.length(), val.c_str());\n    }\n    else if (OtherInstanceOf(source.As<Object>(), \"RegExp\")) {\n        std::string val = source.ToString().Utf8Value();\n        return new Values::Text(pos, val.length(), val.c_str());\n    }\n    else if (source.IsNumber()) {\n        if (OtherIsInt(source.As<Napi::Number>())) {\n            return new Values::Integer(pos, source.As<Napi::Number>().Int32Value());\n        } else {\n            return new Values::Float(pos, source.As<Napi::Number>().DoubleValue());\n        }\n    }\n    else if (source.IsBoolean()) {\n        return new Values::Integer(pos, source.As<Napi::Boolean>().Value() ? 1 : 0);\n    }\n    else if (source.IsNull()) {\n        return new Values::Null(pos);\n    }\n    else if (source.IsBuffer()) {\n        Napi::Buffer<char> buffer = source.As<Napi::Buffer<char>>();\n        return new Values::Blob(pos, buffer.Length(), buffer.Data());\n    }\n    else if (OtherInstanceOf(source.As<Object>(), \"Date\")) {\n        return new Values::Float(pos, source.ToNumber().DoubleValue());\n    }\n    else if (source.IsObject()) {\n        std::string val = source.ToString().Utf8Value();\n        return new Values::Text(pos, val.length(), val.c_str());\n    }\n    else {\n        return NULL;\n    }\n}",
  "abstract_func_before": "Values::Field*\n                   Statement::BindParameter(const Napi::Value VAR_0, T VAR_1) {\n    if (VAR_0.IsString()) {\n        std::string VAR_2 = VAR_0.As<Napi::String>().Utf8Value();\n        return new Values::Text(VAR_1, VAR_2.length(), VAR_2.c_str());\n    }\n    else if (OtherInstanceOf(VAR_0.As<Object>(), \"RegExp\")) {\n        std::string VAR_2 = VAR_0.ToString().Utf8Value();\n        return new Values::Text(VAR_1, VAR_2.length(), VAR_2.c_str());\n    }\n    else if (VAR_0.IsNumber()) {\n        if (OtherIsInt(VAR_0.As<Napi::Number>())) {\n            return new Values::Integer(VAR_1, VAR_0.As<Napi::Number>().Int32Value());\n        } else {\n            return new Values::Float(VAR_1, VAR_0.As<Napi::Number>().DoubleValue());\n        }\n    }\n    else if (VAR_0.IsBoolean()) {\n        return new Values::Integer(VAR_1, VAR_0.As<Napi::Boolean>().Value() ? 1 : 0);\n    }\n    else if (VAR_0.IsNull()) {\n        return new Values::Null(VAR_1);\n    }\n    else if (VAR_0.IsBuffer()) {\n        Napi::Buffer<char> VAR_3 = VAR_0.As<Napi::Buffer<char>>();\n        return new Values::Blob(VAR_1, VAR_3.Length(), VAR_3.Data());\n    }\n    else if (OtherInstanceOf(VAR_0.As<Object>(), \"Date\")) {\n        return new Values::Float(VAR_1, VAR_0.ToNumber().DoubleValue());\n    }\n    else if (VAR_0.IsObject()) {\n        std::string VAR_2 = VAR_0.ToString().Utf8Value();\n        return new Values::Text(VAR_1, VAR_2.length(), VAR_2.c_str());\n    }\n    else {\n        return NULL;\n    }\n}",
  "func_graph_path_before": "TryGhost/node-sqlite3/593c9d498be2510d286349134537e3bf89401c4a/statement.cc/vul/before/0.json",
  "func": "Values::Field*\n                   Statement::BindParameter(const Napi::Value source, T pos) {\n    if (source.IsString()) {\n        std::string val = source.As<Napi::String>().Utf8Value();\n        return new Values::Text(pos, val.length(), val.c_str());\n    }\n    else if (OtherInstanceOf(source.As<Object>(), \"RegExp\")) {\n        std::string val = source.ToString().Utf8Value();\n        return new Values::Text(pos, val.length(), val.c_str());\n    }\n    else if (source.IsNumber()) {\n        if (OtherIsInt(source.As<Napi::Number>())) {\n            return new Values::Integer(pos, source.As<Napi::Number>().Int32Value());\n        } else {\n            return new Values::Float(pos, source.As<Napi::Number>().DoubleValue());\n        }\n    }\n    else if (source.IsBoolean()) {\n        return new Values::Integer(pos, source.As<Napi::Boolean>().Value() ? 1 : 0);\n    }\n    else if (source.IsNull()) {\n        return new Values::Null(pos);\n    }\n    else if (source.IsBuffer()) {\n        Napi::Buffer<char> buffer = source.As<Napi::Buffer<char>>();\n        return new Values::Blob(pos, buffer.Length(), buffer.Data());\n    }\n    else if (OtherInstanceOf(source.As<Object>(), \"Date\")) {\n        return new Values::Float(pos, source.ToNumber().DoubleValue());\n    }\n    else if (source.IsObject()) {\n        Napi::String napiVal = source.ToString();\n        // Check whether toString returned a value that is not undefined.\n        if(napiVal.Type() == 0) {\n            return NULL;\n        }\n\n        std::string val = napiVal.Utf8Value();\n        return new Values::Text(pos, val.length(), val.c_str());\n    }\n    else {\n        return NULL;\n    }\n}",
  "abstract_func": "Values::Field*\n                   Statement::BindParameter(const Napi::Value VAR_0, T VAR_1) {\n    if (VAR_0.IsString()) {\n        std::string VAR_2 = VAR_0.As<Napi::String>().Utf8Value();\n        return new Values::Text(VAR_1, VAR_2.length(), VAR_2.c_str());\n    }\n    else if (OtherInstanceOf(VAR_0.As<Object>(), \"RegExp\")) {\n        std::string VAR_2 = VAR_0.ToString().Utf8Value();\n        return new Values::Text(VAR_1, VAR_2.length(), VAR_2.c_str());\n    }\n    else if (VAR_0.IsNumber()) {\n        if (OtherIsInt(VAR_0.As<Napi::Number>())) {\n            return new Values::Integer(VAR_1, VAR_0.As<Napi::Number>().Int32Value());\n        } else {\n            return new Values::Float(VAR_1, VAR_0.As<Napi::Number>().DoubleValue());\n        }\n    }\n    else if (VAR_0.IsBoolean()) {\n        return new Values::Integer(VAR_1, VAR_0.As<Napi::Boolean>().Value() ? 1 : 0);\n    }\n    else if (VAR_0.IsNull()) {\n        return new Values::Null(VAR_1);\n    }\n    else if (VAR_0.IsBuffer()) {\n        Napi::Buffer<char> VAR_3 = VAR_0.As<Napi::Buffer<char>>();\n        return new Values::Blob(VAR_1, VAR_3.Length(), VAR_3.Data());\n    }\n    else if (OtherInstanceOf(VAR_0.As<Object>(), \"Date\")) {\n        return new Values::Float(VAR_1, VAR_0.ToNumber().DoubleValue());\n    }\n    else if (VAR_0.IsObject()) {\n        Napi::String VAR_4 = VAR_0.ToString();\n        /* COMMENT_0 */\n        if(VAR_4.Type() == 0) {\n            return NULL;\n        }\n\n        std::string VAR_2 = VAR_4.Utf8Value();\n        return new Values::Text(VAR_1, VAR_2.length(), VAR_2.c_str());\n    }\n    else {\n        return NULL;\n    }\n}",
  "func_graph_path": "TryGhost/node-sqlite3/593c9d498be2510d286349134537e3bf89401c4a/statement.cc/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -29,7 +29,13 @@\n         return new Values::Float(pos, source.ToNumber().DoubleValue());\n     }\n     else if (source.IsObject()) {\n-        std::string val = source.ToString().Utf8Value();\n+        Napi::String napiVal = source.ToString();\n+        // Check whether toString returned a value that is not undefined.\n+        if(napiVal.Type() == 0) {\n+            return NULL;\n+        }\n+\n+        std::string val = napiVal.Utf8Value();\n         return new Values::Text(pos, val.length(), val.c_str());\n     }\n     else {",
  "diff_line_info": {
    "deleted_lines": [
      "        std::string val = source.ToString().Utf8Value();"
    ],
    "added_lines": [
      "        Napi::String napiVal = source.ToString();",
      "        // Check whether toString returned a value that is not undefined.",
      "        if(napiVal.Type() == 0) {",
      "            return NULL;",
      "        }",
      "",
      "        std::string val = napiVal.Utf8Value();"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/TryGhost/node-sqlite3/pull/1450",
  "description": {
    "pr_info": {
      "title": "bug: fix segfault of invalid toString() object",
      "number": 1450
    },
    "comment": [
      "Verify ToString() returns valid data before casting to utf-8 encoding.\r\nfixes #1440 \r\nfixes #1449 "
    ]
  },
  "Bug Filter": "Security Vulnerability Fix  \nConfidence Score: 0.95",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "\n\nThe patch addresses a security issue by preventing a segfault caused by an invalid toString() return, which could lead to a denial of service. The fix adds validation to handle such cases gracefully.\n\n**Final Output:**\n\nAnalysis: The patch fixes a segmentation fault caused by an invalid toString() return, which could be exploited to cause a crash. The added validation prevents this, addressing a security issue.\n\nFinal Classification: Security Vulnerability Fix  \nConfidence Score: 0.95"
}