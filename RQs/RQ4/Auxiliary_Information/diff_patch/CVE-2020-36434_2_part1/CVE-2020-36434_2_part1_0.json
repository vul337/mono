{
  "cve_id": "CVE-2020-36434",
  "cwe_ids": [
    "CWE-415"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "FillZpp/sys-info-rs",
  "commit_msg": "Make Disk Info Thread-Safe on Linux",
  "commit_hash": "4fda8b6a5ffbea03d05fcfc0a89594e6ca495fc7",
  "git_url": "https://github.com/FillZpp/sys-info-rs/commit/4fda8b6a5ffbea03d05fcfc0a89594e6ca495fc7",
  "file_path": "c/linux.c",
  "func_name": "DFcleanup",
  "func_before": "void DFcleanup()\n{\n\tstruct nlist *np, *next;\n\tint i;\n\tfor (i=0; i<DFHASHSIZE; i++) {\n\t\t/* Non-standard for loop. Note the last clause happens at the end of the loop. */\n\t\tfor (np = DFhashvector[i]; np; np=next) {\n\t\t\tnext=np->next;\n\t\t\tfree(np->name);\n\t\t\tfree(np);\n\t\t}\n\t\tDFhashvector[i] = 0;\n\t}\n}",
  "abstract_func_before": "void DFcleanup()\n{\n\tstruct nlist *VAR_0, *VAR_1;\n\tint VAR_2;\n\tfor (VAR_2=0; VAR_2<VAR_3; VAR_2++) {\n\t\t/* COMMENT_0 */\n\t\tfor (VAR_0 = VAR_4[VAR_2]; VAR_0; VAR_0=VAR_1) {\n\t\t\tVAR_1=VAR_0->next;\n\t\t\tfree(VAR_0->name);\n\t\t\tfree(VAR_0);\n\t\t}\n\t\tVAR_4[VAR_2] = 0;\n\t}\n}",
  "func_graph_path_before": "FillZpp/sys-info-rs/4fda8b6a5ffbea03d05fcfc0a89594e6ca495fc7/linux.c/vul/before/3.json",
  "func": "void DFcleanup(struct nlist **DFhashvector)\n{\n\tstruct nlist *np, *next;\n\tint i;\n\tfor (i=0; i<DFHASHSIZE; i++) {\n\t\t/* Non-standard for loop. Note the last clause happens at the end of the loop. */\n\t\tfor (np = DFhashvector[i]; np; np=next) {\n\t\t\tnext=np->next;\n\t\t\tfree(np->name);\n\t\t\tfree(np);\n\t\t}\n\t\tDFhashvector[i] = 0;\n\t}\n}",
  "abstract_func": "void DFcleanup(struct nlist **VAR_0)\n{\n\tstruct nlist *VAR_1, *VAR_2;\n\tint VAR_3;\n\tfor (VAR_3=0; VAR_3<VAR_4; VAR_3++) {\n\t\t/* COMMENT_0 */\n\t\tfor (VAR_1 = VAR_0[VAR_3]; VAR_1; VAR_1=VAR_2) {\n\t\t\tVAR_2=VAR_1->next;\n\t\t\tfree(VAR_1->name);\n\t\t\tfree(VAR_1);\n\t\t}\n\t\tVAR_0[VAR_3] = 0;\n\t}\n}",
  "func_graph_path": "FillZpp/sys-info-rs/4fda8b6a5ffbea03d05fcfc0a89594e6ca495fc7/linux.c/vul/after/3.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,4 +1,4 @@\n-void DFcleanup()\n+void DFcleanup(struct nlist **DFhashvector)\n {\n \tstruct nlist *np, *next;\n \tint i;",
  "diff_line_info": {
    "deleted_lines": [
      "void DFcleanup()"
    ],
    "added_lines": [
      "void DFcleanup(struct nlist **DFhashvector)"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/FillZpp/sys-info-rs/pull/84",
  "description": {
    "pr_info": {
      "title": "Make Disk Info Thread-Safe on Linux",
      "number": 84
    },
    "comment": [
      "Closes #63\r\n\r\nPass the `DFhashvector` around as an argument instead of using a global variable.\r\n\r\npossible alternatives: a lock"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix\n\nConfidence Score: 0.8",
  "Bug Filter Confidence": 0.8,
  "Bug Filter Response": "\n\n**Final Output:**\n\nAnalysis: The patch modifies the function DFcleanup to make disk info handling thread-safe on Linux. The code change suggests addressing a potential race condition by properly handling a shared resource, which could be a security vulnerability if exploited.\n\nFinal Classification: Security Vulnerability Fix\n\nConfidence Score: 0.8"
}