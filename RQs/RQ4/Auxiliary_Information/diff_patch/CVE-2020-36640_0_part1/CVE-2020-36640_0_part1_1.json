{
  "cve_id": "CVE-2020-36640",
  "cwe_ids": [
    "CWE-611"
  ],
  "cvss_vector": "AV:A/AC:M/Au:S/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "bonitasoft/bonita-connector-webservice",
  "commit_msg": "fix(vulnerabilities): fix XXE attacks vulnerabilities and other code smell (#17)\n\n* Access to external entities and network access should always be\r\ndisable to avoid XXS attacks vulnerabilities.\r\n* Log error properly\r\n* refactor logger name to be compliant with java naming conventions",
  "commit_hash": "a12ad691c05af19e9061d7949b6b828ce48815d5",
  "git_url": "https://github.com/bonitasoft/bonita-connector-webservice/commit/a12ad691c05af19e9061d7949b6b828ce48815d5",
  "file_path": "src/main/java/org/bonitasoft/connectors/ws/SecureWSConnector.java",
  "func_name": "executeBusinessLogic",
  "func_before": "@SuppressWarnings(\"unchecked\")\n    @Override\n    protected void executeBusinessLogic() throws ConnectorException {\n        configureProxy();\n        final String serviceNS = (String) getInputParameter(SERVICE_NS);\n        LOGGER.info(SERVICE_NS + \" \" + serviceNS);\n        final String serviceName = (String) getInputParameter(SERVICE_NAME);\n        LOGGER.info(SERVICE_NAME + \" \" + serviceName);\n        final String portName = (String) getInputParameter(PORT_NAME);\n        LOGGER.info(PORT_NAME + \" \" + portName);\n        final String binding = (String) getInputParameter(BINDING);\n        LOGGER.info(BINDING + \" \" + binding);\n        final String endpointAddress = (String) getInputParameter(ENDPOINT_ADDRESS);\n        LOGGER.info(ENDPOINT_ADDRESS + \" \" + endpointAddress);\n\n        final QName serviceQName = new QName(serviceNS, serviceName);\n        final QName portQName = new QName(serviceNS, portName);\n        final Service service = Service.create(serviceQName);\n        service.addPort(portQName, binding, endpointAddress);\n\n        final Dispatch<Source> dispatch = service.createDispatch(portQName, Source.class, Service.Mode.MESSAGE);\n        dispatch.getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, endpointAddress);\n        final Object authUserName = getInputParameter(USER_NAME);\n        if (authUserName != null) {\n            LOGGER.info(USER_NAME + \" \" + authUserName);\n            dispatch.getRequestContext().put(BindingProvider.USERNAME_PROPERTY, authUserName);\n            final Object authPassword = getInputParameter(PASSWORD);\n            LOGGER.info(PASSWORD + \" ********\");\n            dispatch.getRequestContext().put(BindingProvider.PASSWORD_PROPERTY, authPassword);\n        }\n\n        final String soapAction = (String) getInputParameter(SOAP_ACTION);\n        LOGGER.info(SOAP_ACTION + \" \" + soapAction);\n\n        if (soapAction != null) {\n            dispatch.getRequestContext().put(BindingProvider.SOAPACTION_USE_PROPERTY, true);\n            dispatch.getRequestContext().put(BindingProvider.SOAPACTION_URI_PROPERTY, soapAction);\n        }\n\n        final List<List<Object>> httpHeadersList = (List<List<Object>>) getInputParameter(HTTP_HEADERS);\n\n        if (httpHeadersList != null) {\n            final Map<String, List<String>> httpHeadersMap = new HashMap<>();\n            for (final List<Object> row : httpHeadersList) {\n                if (row.size() == 2) {\n                    final List<String> parameters = new ArrayList<>();\n                    final Object value = row.get(1);\n                    if (value instanceof Collection) {\n                        for (final Object parameter : (Collection<Object>) value) {\n                            parameters.add(parameter.toString());\n                        }\n                    } else {\n                        parameters.add(value.toString());\n                    }\n                    httpHeadersMap.put((String) row.get(0), parameters);\n\n                }\n            }\n            dispatch.getRequestContext().put(MessageContext.HTTP_REQUEST_HEADERS, httpHeadersMap);\n        }\n\n        String initialEnvelope = (String) getInputParameter(ENVELOPE);\n        String sanitizedEnvelope = sanitizeString(initialEnvelope);\n        if (!Objects.equals(initialEnvelope, sanitizedEnvelope)) {\n            LOGGER.warning(\"Invalid XML characters have been detected in the envelope, they will be removed.\");\n        }\n        LOGGER.info(ENVELOPE + \" \" + sanitizedEnvelope);\n\n        Boolean oneWayInvoke = (Boolean) getInputParameter(ONE_WAY_INVOKE);\n        if (oneWayInvoke == null) {\n            oneWayInvoke = false;\n        }\n        Source sourceResponse = null;\n        try {\n            Source message = new StreamSource(new StringReader(sanitizedEnvelope));\n            if (oneWayInvoke) {\n                dispatch.invokeOneWay(message);\n            } else {\n                sourceResponse = dispatch.invoke(message);\n            }\n        } catch (final Exception e) {\n            throw new ConnectorException(\"Exception trying to call remote webservice\", e);\n        }\n\n        restoreConfiguration();\n\n        Boolean buildResponseDocumentEnvelope = (Boolean) getInputParameter(BUILD_RESPONSE_DOCUMENT_ENVELOPE);\n        LOGGER.info(BUILD_RESPONSE_DOCUMENT_ENVELOPE + \" \" + buildResponseDocumentEnvelope);\n        Boolean buildResponseDocumentBody = (Boolean) getInputParameter(BUILD_RESPONSE_DOCUMENT_BODY);\n        LOGGER.info(BUILD_RESPONSE_DOCUMENT_BODY + \" \" + buildResponseDocumentBody);\n        if (buildResponseDocumentEnvelope == null) {\n            buildResponseDocumentEnvelope = false;\n        }\n        if (buildResponseDocumentBody == null) {\n            buildResponseDocumentBody = false;\n        }\n        Document responseDocumentEnvelope = null;\n\n        if (sourceResponse != null && (buildResponseDocumentEnvelope || buildResponseDocumentBody)) {\n            responseDocumentEnvelope = buildResponseDocumentEnvelope(sourceResponse);\n        }\n        Document responseDocumentBody = null;\n        if (buildResponseDocumentBody) {\n            responseDocumentBody = buildResponseDocumentBody(responseDocumentEnvelope);\n        }\n\n        Boolean printRequestAndResponse = (Boolean) getInputParameter(PRINT_REQUEST_AND_RESPONSE);\n        LOGGER.info(PRINT_REQUEST_AND_RESPONSE + \" \" + printRequestAndResponse);\n        if (printRequestAndResponse == null) {\n            printRequestAndResponse = false;\n        }\n        if (printRequestAndResponse) {\n            printRequestAndResponse(sourceResponse, buildResponseDocumentEnvelope, buildResponseDocumentBody,\n                    responseDocumentEnvelope, responseDocumentBody);\n        }\n\n        setOutputParameter(OUTPUT_SOURCE_RESPONSE, sourceResponse);\n        setOutputParameter(OUTPUT_RESPONSE_DOCUMENT_ENVELOPE, responseDocumentEnvelope);\n        setOutputParameter(OUTPUT_RESPONSE_DOCUMENT_BODY, responseDocumentBody);\n    }",
  "abstract_func_before": "@SuppressWarnings(\"unchecked\")\n    @Override\n    protected void executeBusinessLogic() throws ConnectorException {\n        configureProxy();\n        final String VAR_0 = (String) getInputParameter(VAR_1);\n        VAR_2.info(VAR_1 + \" \" + VAR_0);\n        final String VAR_3 = (String) getInputParameter(VAR_4);\n        VAR_2.info(VAR_4 + \" \" + VAR_3);\n        final String VAR_5 = (String) getInputParameter(VAR_6);\n        VAR_2.info(VAR_6 + \" \" + VAR_5);\n        final String VAR_7 = (String) getInputParameter(VAR_8);\n        VAR_2.info(VAR_8 + \" \" + VAR_7);\n        final String VAR_9 = (String) getInputParameter(VAR_10);\n        VAR_2.info(VAR_10 + \" \" + VAR_9);\n\n        final QName VAR_11 = new QName(VAR_0, VAR_3);\n        final QName VAR_12 = new QName(VAR_0, VAR_5);\n        final Service VAR_13 = VAR_14.create(VAR_11);\n        VAR_13.addPort(VAR_12, VAR_7, VAR_9);\n\n        final Dispatch<Source> VAR_15 = VAR_13.createDispatch(VAR_12, Source.class, VAR_14.Mode.MESSAGE);\n        VAR_15.getRequestContext().put(VAR_16.ENDPOINT_ADDRESS_PROPERTY, VAR_9);\n        final Object VAR_17 = getInputParameter(VAR_18);\n        if (VAR_17 != null) {\n            VAR_2.info(VAR_18 + \" \" + VAR_17);\n            VAR_15.getRequestContext().put(VAR_16.USERNAME_PROPERTY, VAR_17);\n            final Object VAR_19 = getInputParameter(VAR_20);\n            VAR_2.info(VAR_20 + \" ********\");\n            VAR_15.getRequestContext().put(VAR_16.PASSWORD_PROPERTY, VAR_19);\n        }\n\n        final String VAR_21 = (String) getInputParameter(VAR_22);\n        VAR_2.info(VAR_22 + \" \" + VAR_21);\n\n        if (VAR_21 != null) {\n            VAR_15.getRequestContext().put(VAR_16.SOAPACTION_USE_PROPERTY, true);\n            VAR_15.getRequestContext().put(VAR_16.SOAPACTION_URI_PROPERTY, VAR_21);\n        }\n\n        final List<List<Object>> VAR_23 = (List<List<Object>>) getInputParameter(VAR_24);\n\n        if (VAR_23 != null) {\n            final Map<String, List<String>> VAR_25 = new HashMap<>();\n            for (final List<Object> VAR_26 : VAR_23) {\n                if (VAR_26.size() == 2) {\n                    final List<String> VAR_27 = new ArrayList<>();\n                    final Object VAR_28 = VAR_26.get(1);\n                    if (VAR_28 instanceof Collection) {\n                        for (final Object VAR_29 : (Collection<Object>) VAR_28) {\n                            VAR_27.add(VAR_29.toString());\n                        }\n                    } else {\n                        VAR_27.add(VAR_28.toString());\n                    }\n                    VAR_25.put((String) VAR_26.get(0), VAR_27);\n\n                }\n            }\n            VAR_15.getRequestContext().put(VAR_30.HTTP_REQUEST_HEADERS, VAR_25);\n        }\n\n        String VAR_31 = (String) getInputParameter(VAR_32);\n        String VAR_33 = sanitizeString(VAR_31);\n        if (!VAR_34.equals(VAR_31, VAR_33)) {\n            VAR_2.warning(\"Invalid XML characters have been detected in the envelope, they will be removed.\");\n        }\n        VAR_2.info(VAR_32 + \" \" + VAR_33);\n\n        Boolean VAR_35 = (Boolean) getInputParameter(VAR_36);\n        if (VAR_35 == null) {\n            VAR_35 = false;\n        }\n        Source VAR_37 = null;\n        try {\n            Source VAR_38 = new StreamSource(new StringReader(VAR_33));\n            if (VAR_35) {\n                VAR_15.invokeOneWay(VAR_38);\n            } else {\n                VAR_37 = VAR_15.invoke(VAR_38);\n            }\n        } catch (final Exception VAR_39) {\n            throw new ConnectorException(\"Exception trying to call remote webservice\", VAR_39);\n        }\n\n        restoreConfiguration();\n\n        Boolean VAR_40 = (Boolean) getInputParameter(VAR_41);\n        VAR_2.info(VAR_41 + \" \" + VAR_40);\n        Boolean VAR_42 = (Boolean) getInputParameter(VAR_43);\n        VAR_2.info(VAR_43 + \" \" + VAR_42);\n        if (VAR_40 == null) {\n            VAR_40 = false;\n        }\n        if (VAR_42 == null) {\n            VAR_42 = false;\n        }\n        Document VAR_44 = null;\n\n        if (VAR_37 != null && (VAR_40 || VAR_42)) {\n            VAR_44 = buildResponseDocumentEnvelope(VAR_37);\n        }\n        Document VAR_45 = null;\n        if (VAR_42) {\n            VAR_45 = buildResponseDocumentBody(VAR_44);\n        }\n\n        Boolean VAR_46 = (Boolean) getInputParameter(VAR_47);\n        VAR_2.info(VAR_47 + \" \" + VAR_46);\n        if (VAR_46 == null) {\n            VAR_46 = false;\n        }\n        if (VAR_46) {\n            printRequestAndResponse(VAR_37, VAR_40, VAR_42,\n                    VAR_44, VAR_45);\n        }\n\n        setOutputParameter(VAR_48, VAR_37);\n        setOutputParameter(VAR_49, VAR_44);\n        setOutputParameter(VAR_50, VAR_45);\n    }",
  "func_graph_path_before": "bonitasoft/bonita-connector-webservice/a12ad691c05af19e9061d7949b6b828ce48815d5/SecureWSConnector.java/vul/before/1.json",
  "func": "@Override\n    protected void executeBusinessLogic() throws ConnectorException {\n        configureProxy();\n        final String serviceNS = (String) getInputParameter(SERVICE_NS);\n        logger.info(SERVICE_NS + \" \" + serviceNS);\n        final String serviceName = (String) getInputParameter(SERVICE_NAME);\n        logger.info(SERVICE_NAME + \" \" + serviceName);\n        final String portName = (String) getInputParameter(PORT_NAME);\n        logger.info(PORT_NAME + \" \" + portName);\n        final String binding = (String) getInputParameter(BINDING);\n        logger.info(BINDING + \" \" + binding);\n        final String endpointAddress = (String) getInputParameter(ENDPOINT_ADDRESS);\n        logger.info(ENDPOINT_ADDRESS + \" \" + endpointAddress);\n\n        final QName serviceQName = new QName(serviceNS, serviceName);\n        final QName portQName = new QName(serviceNS, portName);\n        final Service service = Service.create(serviceQName);\n        service.addPort(portQName, binding, endpointAddress);\n\n        final Dispatch<Source> dispatch = service.createDispatch(portQName, Source.class, Service.Mode.MESSAGE);\n        dispatch.getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, endpointAddress);\n        final Object authUserName = getInputParameter(USER_NAME);\n        if (authUserName != null) {\n            logger.info(USER_NAME + \" \" + authUserName);\n            dispatch.getRequestContext().put(BindingProvider.USERNAME_PROPERTY, authUserName);\n            final Object authPassword = getInputParameter(PASSWORD);\n            logger.info(PASSWORD + \" ********\");\n            dispatch.getRequestContext().put(BindingProvider.PASSWORD_PROPERTY, authPassword);\n        }\n\n        final String soapAction = (String) getInputParameter(SOAP_ACTION);\n        logger.info(SOAP_ACTION + \" \" + soapAction);\n\n        if (soapAction != null) {\n            dispatch.getRequestContext().put(BindingProvider.SOAPACTION_USE_PROPERTY, true);\n            dispatch.getRequestContext().put(BindingProvider.SOAPACTION_URI_PROPERTY, soapAction);\n        }\n\n        final List<List<Object>> httpHeadersList = (List<List<Object>>) getInputParameter(HTTP_HEADERS);\n\n        if (httpHeadersList != null) {\n            final Map<String, List<String>> httpHeadersMap = new HashMap<>();\n            for (final List<Object> row : httpHeadersList) {\n                if (row.size() == 2) {\n                    final List<String> parameters = new ArrayList<>();\n                    final Object value = row.get(1);\n                    if (value instanceof Collection) {\n                        for (final Object parameter : (Collection<Object>) value) {\n                            parameters.add(parameter.toString());\n                        }\n                    } else {\n                        parameters.add(value.toString());\n                    }\n                    httpHeadersMap.put((String) row.get(0), parameters);\n\n                }\n            }\n            dispatch.getRequestContext().put(MessageContext.HTTP_REQUEST_HEADERS, httpHeadersMap);\n        }\n\n        String initialEnvelope = (String) getInputParameter(ENVELOPE);\n        String sanitizedEnvelope = sanitizeString(initialEnvelope);\n        if (!Objects.equals(initialEnvelope, sanitizedEnvelope)) {\n            logger.warning(\"Invalid XML characters have been detected in the envelope, they will be removed.\");\n        }\n        logger.info(ENVELOPE + \" \" + sanitizedEnvelope);\n\n        Boolean oneWayInvoke = (Boolean) getInputParameter(ONE_WAY_INVOKE);\n        if (oneWayInvoke == null) {\n            oneWayInvoke = false;\n        }\n        Source sourceResponse = null;\n        try {\n            Source message = new StreamSource(new StringReader(sanitizedEnvelope));\n            if (oneWayInvoke) {\n                dispatch.invokeOneWay(message);\n            } else {\n                sourceResponse = dispatch.invoke(message);\n            }\n        } catch (final Exception e) {\n            throw new ConnectorException(\"Exception trying to call remote webservice\", e);\n        }\n\n        restoreConfiguration();\n\n        Boolean buildResponseDocumentEnvelope = (Boolean) getInputParameter(BUILD_RESPONSE_DOCUMENT_ENVELOPE);\n        logger.info(BUILD_RESPONSE_DOCUMENT_ENVELOPE + \" \" + buildResponseDocumentEnvelope);\n        Boolean buildResponseDocumentBody = (Boolean) getInputParameter(BUILD_RESPONSE_DOCUMENT_BODY);\n        logger.info(BUILD_RESPONSE_DOCUMENT_BODY + \" \" + buildResponseDocumentBody);\n        if (buildResponseDocumentEnvelope == null) {\n            buildResponseDocumentEnvelope = false;\n        }\n        if (buildResponseDocumentBody == null) {\n            buildResponseDocumentBody = false;\n        }\n        Document responseDocumentEnvelope = null;\n\n        if (sourceResponse != null && (buildResponseDocumentEnvelope || buildResponseDocumentBody)) {\n            responseDocumentEnvelope = buildResponseDocumentEnvelope(sourceResponse);\n        }\n        Document responseDocumentBody = null;\n        if (buildResponseDocumentBody) {\n            responseDocumentBody = buildResponseDocumentBody(responseDocumentEnvelope);\n        }\n\n        Boolean printRequestAndResponse = (Boolean) getInputParameter(PRINT_REQUEST_AND_RESPONSE);\n        logger.info(PRINT_REQUEST_AND_RESPONSE + \" \" + printRequestAndResponse);\n        if (printRequestAndResponse == null) {\n            printRequestAndResponse = false;\n        }\n        if (printRequestAndResponse) {\n            printRequestAndResponse(sourceResponse, buildResponseDocumentEnvelope, buildResponseDocumentBody,\n                    responseDocumentEnvelope, responseDocumentBody);\n        }\n\n        setOutputParameter(OUTPUT_SOURCE_RESPONSE, sourceResponse);\n        setOutputParameter(OUTPUT_RESPONSE_DOCUMENT_ENVELOPE, responseDocumentEnvelope);\n        setOutputParameter(OUTPUT_RESPONSE_DOCUMENT_BODY, responseDocumentBody);\n    }",
  "abstract_func": "@Override\n    protected void executeBusinessLogic() throws ConnectorException {\n        configureProxy();\n        final String VAR_0 = (String) getInputParameter(VAR_1);\n        VAR_2.info(VAR_1 + \" \" + VAR_0);\n        final String VAR_3 = (String) getInputParameter(VAR_4);\n        VAR_2.info(VAR_4 + \" \" + VAR_3);\n        final String VAR_5 = (String) getInputParameter(VAR_6);\n        VAR_2.info(VAR_6 + \" \" + VAR_5);\n        final String VAR_7 = (String) getInputParameter(VAR_8);\n        VAR_2.info(VAR_8 + \" \" + VAR_7);\n        final String VAR_9 = (String) getInputParameter(VAR_10);\n        VAR_2.info(VAR_10 + \" \" + VAR_9);\n\n        final QName VAR_11 = new QName(VAR_0, VAR_3);\n        final QName VAR_12 = new QName(VAR_0, VAR_5);\n        final Service VAR_13 = VAR_14.create(VAR_11);\n        VAR_13.addPort(VAR_12, VAR_7, VAR_9);\n\n        final Dispatch<Source> VAR_15 = VAR_13.createDispatch(VAR_12, Source.class, VAR_14.Mode.MESSAGE);\n        VAR_15.getRequestContext().put(VAR_16.ENDPOINT_ADDRESS_PROPERTY, VAR_9);\n        final Object VAR_17 = getInputParameter(VAR_18);\n        if (VAR_17 != null) {\n            VAR_2.info(VAR_18 + \" \" + VAR_17);\n            VAR_15.getRequestContext().put(VAR_16.USERNAME_PROPERTY, VAR_17);\n            final Object VAR_19 = getInputParameter(VAR_20);\n            VAR_2.info(VAR_20 + \" ********\");\n            VAR_15.getRequestContext().put(VAR_16.PASSWORD_PROPERTY, VAR_19);\n        }\n\n        final String VAR_21 = (String) getInputParameter(VAR_22);\n        VAR_2.info(VAR_22 + \" \" + VAR_21);\n\n        if (VAR_21 != null) {\n            VAR_15.getRequestContext().put(VAR_16.SOAPACTION_USE_PROPERTY, true);\n            VAR_15.getRequestContext().put(VAR_16.SOAPACTION_URI_PROPERTY, VAR_21);\n        }\n\n        final List<List<Object>> VAR_23 = (List<List<Object>>) getInputParameter(VAR_24);\n\n        if (VAR_23 != null) {\n            final Map<String, List<String>> VAR_25 = new HashMap<>();\n            for (final List<Object> VAR_26 : VAR_23) {\n                if (VAR_26.size() == 2) {\n                    final List<String> VAR_27 = new ArrayList<>();\n                    final Object VAR_28 = VAR_26.get(1);\n                    if (VAR_28 instanceof Collection) {\n                        for (final Object VAR_29 : (Collection<Object>) VAR_28) {\n                            VAR_27.add(VAR_29.toString());\n                        }\n                    } else {\n                        VAR_27.add(VAR_28.toString());\n                    }\n                    VAR_25.put((String) VAR_26.get(0), VAR_27);\n\n                }\n            }\n            VAR_15.getRequestContext().put(VAR_30.HTTP_REQUEST_HEADERS, VAR_25);\n        }\n\n        String VAR_31 = (String) getInputParameter(VAR_32);\n        String VAR_33 = sanitizeString(VAR_31);\n        if (!VAR_34.equals(VAR_31, VAR_33)) {\n            VAR_2.warning(\"Invalid XML characters have been detected in the envelope, they will be removed.\");\n        }\n        VAR_2.info(VAR_32 + \" \" + VAR_33);\n\n        Boolean VAR_35 = (Boolean) getInputParameter(VAR_36);\n        if (VAR_35 == null) {\n            VAR_35 = false;\n        }\n        Source VAR_37 = null;\n        try {\n            Source VAR_38 = new StreamSource(new StringReader(VAR_33));\n            if (VAR_35) {\n                VAR_15.invokeOneWay(VAR_38);\n            } else {\n                VAR_37 = VAR_15.invoke(VAR_38);\n            }\n        } catch (final Exception VAR_39) {\n            throw new ConnectorException(\"Exception trying to call remote webservice\", VAR_39);\n        }\n\n        restoreConfiguration();\n\n        Boolean VAR_40 = (Boolean) getInputParameter(VAR_41);\n        VAR_2.info(VAR_41 + \" \" + VAR_40);\n        Boolean VAR_42 = (Boolean) getInputParameter(VAR_43);\n        VAR_2.info(VAR_43 + \" \" + VAR_42);\n        if (VAR_40 == null) {\n            VAR_40 = false;\n        }\n        if (VAR_42 == null) {\n            VAR_42 = false;\n        }\n        Document VAR_44 = null;\n\n        if (VAR_37 != null && (VAR_40 || VAR_42)) {\n            VAR_44 = buildResponseDocumentEnvelope(VAR_37);\n        }\n        Document VAR_45 = null;\n        if (VAR_42) {\n            VAR_45 = buildResponseDocumentBody(VAR_44);\n        }\n\n        Boolean VAR_46 = (Boolean) getInputParameter(VAR_47);\n        VAR_2.info(VAR_47 + \" \" + VAR_46);\n        if (VAR_46 == null) {\n            VAR_46 = false;\n        }\n        if (VAR_46) {\n            printRequestAndResponse(VAR_37, VAR_40, VAR_42,\n                    VAR_44, VAR_45);\n        }\n\n        setOutputParameter(VAR_48, VAR_37);\n        setOutputParameter(VAR_49, VAR_44);\n        setOutputParameter(VAR_50, VAR_45);\n    }",
  "func_graph_path": "bonitasoft/bonita-connector-webservice/a12ad691c05af19e9061d7949b6b828ce48815d5/SecureWSConnector.java/vul/after/1.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,17 +1,16 @@\n-@SuppressWarnings(\"unchecked\")\n-    @Override\n+@Override\n     protected void executeBusinessLogic() throws ConnectorException {\n         configureProxy();\n         final String serviceNS = (String) getInputParameter(SERVICE_NS);\n-        LOGGER.info(SERVICE_NS + \" \" + serviceNS);\n+        logger.info(SERVICE_NS + \" \" + serviceNS);\n         final String serviceName = (String) getInputParameter(SERVICE_NAME);\n-        LOGGER.info(SERVICE_NAME + \" \" + serviceName);\n+        logger.info(SERVICE_NAME + \" \" + serviceName);\n         final String portName = (String) getInputParameter(PORT_NAME);\n-        LOGGER.info(PORT_NAME + \" \" + portName);\n+        logger.info(PORT_NAME + \" \" + portName);\n         final String binding = (String) getInputParameter(BINDING);\n-        LOGGER.info(BINDING + \" \" + binding);\n+        logger.info(BINDING + \" \" + binding);\n         final String endpointAddress = (String) getInputParameter(ENDPOINT_ADDRESS);\n-        LOGGER.info(ENDPOINT_ADDRESS + \" \" + endpointAddress);\n+        logger.info(ENDPOINT_ADDRESS + \" \" + endpointAddress);\n \n         final QName serviceQName = new QName(serviceNS, serviceName);\n         final QName portQName = new QName(serviceNS, portName);\n@@ -22,15 +21,15 @@\n         dispatch.getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, endpointAddress);\n         final Object authUserName = getInputParameter(USER_NAME);\n         if (authUserName != null) {\n-            LOGGER.info(USER_NAME + \" \" + authUserName);\n+            logger.info(USER_NAME + \" \" + authUserName);\n             dispatch.getRequestContext().put(BindingProvider.USERNAME_PROPERTY, authUserName);\n             final Object authPassword = getInputParameter(PASSWORD);\n-            LOGGER.info(PASSWORD + \" ********\");\n+            logger.info(PASSWORD + \" ********\");\n             dispatch.getRequestContext().put(BindingProvider.PASSWORD_PROPERTY, authPassword);\n         }\n \n         final String soapAction = (String) getInputParameter(SOAP_ACTION);\n-        LOGGER.info(SOAP_ACTION + \" \" + soapAction);\n+        logger.info(SOAP_ACTION + \" \" + soapAction);\n \n         if (soapAction != null) {\n             dispatch.getRequestContext().put(BindingProvider.SOAPACTION_USE_PROPERTY, true);\n@@ -62,9 +61,9 @@\n         String initialEnvelope = (String) getInputParameter(ENVELOPE);\n         String sanitizedEnvelope = sanitizeString(initialEnvelope);\n         if (!Objects.equals(initialEnvelope, sanitizedEnvelope)) {\n-            LOGGER.warning(\"Invalid XML characters have been detected in the envelope, they will be removed.\");\n+            logger.warning(\"Invalid XML characters have been detected in the envelope, they will be removed.\");\n         }\n-        LOGGER.info(ENVELOPE + \" \" + sanitizedEnvelope);\n+        logger.info(ENVELOPE + \" \" + sanitizedEnvelope);\n \n         Boolean oneWayInvoke = (Boolean) getInputParameter(ONE_WAY_INVOKE);\n         if (oneWayInvoke == null) {\n@@ -85,9 +84,9 @@\n         restoreConfiguration();\n \n         Boolean buildResponseDocumentEnvelope = (Boolean) getInputParameter(BUILD_RESPONSE_DOCUMENT_ENVELOPE);\n-        LOGGER.info(BUILD_RESPONSE_DOCUMENT_ENVELOPE + \" \" + buildResponseDocumentEnvelope);\n+        logger.info(BUILD_RESPONSE_DOCUMENT_ENVELOPE + \" \" + buildResponseDocumentEnvelope);\n         Boolean buildResponseDocumentBody = (Boolean) getInputParameter(BUILD_RESPONSE_DOCUMENT_BODY);\n-        LOGGER.info(BUILD_RESPONSE_DOCUMENT_BODY + \" \" + buildResponseDocumentBody);\n+        logger.info(BUILD_RESPONSE_DOCUMENT_BODY + \" \" + buildResponseDocumentBody);\n         if (buildResponseDocumentEnvelope == null) {\n             buildResponseDocumentEnvelope = false;\n         }\n@@ -105,7 +104,7 @@\n         }\n \n         Boolean printRequestAndResponse = (Boolean) getInputParameter(PRINT_REQUEST_AND_RESPONSE);\n-        LOGGER.info(PRINT_REQUEST_AND_RESPONSE + \" \" + printRequestAndResponse);\n+        logger.info(PRINT_REQUEST_AND_RESPONSE + \" \" + printRequestAndResponse);\n         if (printRequestAndResponse == null) {\n             printRequestAndResponse = false;\n         }",
  "diff_line_info": {
    "deleted_lines": [
      "@SuppressWarnings(\"unchecked\")",
      "    @Override",
      "        LOGGER.info(SERVICE_NS + \" \" + serviceNS);",
      "        LOGGER.info(SERVICE_NAME + \" \" + serviceName);",
      "        LOGGER.info(PORT_NAME + \" \" + portName);",
      "        LOGGER.info(BINDING + \" \" + binding);",
      "        LOGGER.info(ENDPOINT_ADDRESS + \" \" + endpointAddress);",
      "            LOGGER.info(USER_NAME + \" \" + authUserName);",
      "            LOGGER.info(PASSWORD + \" ********\");",
      "        LOGGER.info(SOAP_ACTION + \" \" + soapAction);",
      "            LOGGER.warning(\"Invalid XML characters have been detected in the envelope, they will be removed.\");",
      "        LOGGER.info(ENVELOPE + \" \" + sanitizedEnvelope);",
      "        LOGGER.info(BUILD_RESPONSE_DOCUMENT_ENVELOPE + \" \" + buildResponseDocumentEnvelope);",
      "        LOGGER.info(BUILD_RESPONSE_DOCUMENT_BODY + \" \" + buildResponseDocumentBody);",
      "        LOGGER.info(PRINT_REQUEST_AND_RESPONSE + \" \" + printRequestAndResponse);"
    ],
    "added_lines": [
      "@Override",
      "        logger.info(SERVICE_NS + \" \" + serviceNS);",
      "        logger.info(SERVICE_NAME + \" \" + serviceName);",
      "        logger.info(PORT_NAME + \" \" + portName);",
      "        logger.info(BINDING + \" \" + binding);",
      "        logger.info(ENDPOINT_ADDRESS + \" \" + endpointAddress);",
      "            logger.info(USER_NAME + \" \" + authUserName);",
      "            logger.info(PASSWORD + \" ********\");",
      "        logger.info(SOAP_ACTION + \" \" + soapAction);",
      "            logger.warning(\"Invalid XML characters have been detected in the envelope, they will be removed.\");",
      "        logger.info(ENVELOPE + \" \" + sanitizedEnvelope);",
      "        logger.info(BUILD_RESPONSE_DOCUMENT_ENVELOPE + \" \" + buildResponseDocumentEnvelope);",
      "        logger.info(BUILD_RESPONSE_DOCUMENT_BODY + \" \" + buildResponseDocumentBody);",
      "        logger.info(PRINT_REQUEST_AND_RESPONSE + \" \" + printRequestAndResponse);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/bonitasoft/bonita-connector-webservice/pull/17",
  "description": {
    "pr_info": {
      "title": "fix(vulnerabilities): fix XXE attacks vulnerabilities and other code smell",
      "number": 17
    },
    "comment": [
      "* Access to external entities and network access should always be\r\ndisable to avoid XXS attacks vulnerabilities.",
      "SonarCloud Quality Gate failed.\n\n[<img src='https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug.png' alt='Bug' width='16' height='16' />](https://sonarcloud.io/project/issues?id=bonitasoft_bonita-connector-webservice&pullRequest=17&resolved=false&types=BUG) [<img src='https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A.png' alt='A' width='16' height='16' />](https://sonarcloud.io/project/issues?id=bonitasoft_bonita-connector-webservice&pullRequest=17&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=bonitasoft_bonita-connector-webservice&pullRequest=17&resolved=false&types=BUG)  \n[<img src='https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability.png' alt='Vulnerability' width='16' height='16' />](https://sonarcloud.io/project/issues?id=bonitasoft_bonita-connector-webservice&pullRequest=17&resolved=false&types=VULNERABILITY) [<img src='https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A.png' alt='A' width='16' height='16' />](https://sonarcloud.io/project/issues?id=bonitasoft_bonita-connector-webservice&pullRequest=17&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=bonitasoft_bonita-connector-webservice&pullRequest=17&resolved=false&types=VULNERABILITY) (and [<img src='https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot.png' alt='Security Hotspot' width='16' height='16' />](https://sonarcloud.io/project/issues?id=bonitasoft_bonita-connector-webservice&pullRequest=17&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/issues?id=bonitasoft_bonita-connector-webservice&pullRequest=17&resolved=false&types=SECURITY_HOTSPOT) to review)  \n[<img src='https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell.png' alt='Code Smell' width='16' height='16' />](https://sonarcloud.io/project/issues?id=bonitasoft_bonita-connector-webservice&pullRequest=17&resolved=false&types=CODE_SMELL) [<img src='https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A.png' alt='A' width='16' height='16' />](https://sonarcloud.io/project/issues?id=bonitasoft_bonita-connector-webservice&pullRequest=17&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=bonitasoft_bonita-connector-webservice&pullRequest=17&resolved=false&types=CODE_SMELL)\n\n[<img src='https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/60.png' alt='68.8%' width='16' height='16' />](https://sonarcloud.io/component_measures?id=bonitasoft_bonita-connector-webservice&pullRequest=17&metric=new_coverage&view=list) [68.8% Coverage](https://sonarcloud.io/component_measures?id=bonitasoft_bonita-connector-webservice&pullRequest=17&metric=new_coverage&view=list)  \n[<img src='https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3.png' alt='0.0%' width='16' height='16' />](https://sonarcloud.io/component_measures?id=bonitasoft_bonita-connector-webservice&pullRequest=17&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=bonitasoft_bonita-connector-webservice&pullRequest=17&metric=new_duplicated_lines_density&view=list)\n\n<img src='https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/message_warning.png' alt='warning' width='16' height='16' /> The version of Java (1.8.0_265) you have used to run this analysis is deprecated and we will stop accepting it from October 2020. Please update to at least Java 11.\nRead more [here](https://sonarcloud.io/documentation/upcoming/)\n\n\n"
    ]
  },
  "Bug Filter": "Supporting & Non-Core Improvements",
  "Bug Filter Confidence": 0.8,
  "Bug Filter Response": "\n\n**Final Output:**\n\nAnalysis: The patch primarily involves refactoring logging statements and improving code style, with minimal evidence of directly addressing a security vulnerability like XXE attacks. The commit message suggests security fixes, but the code changes don't clearly implement them.\n\nFinal Classification: Supporting & Non-Core Improvements  \nConfidence Score: 0.8"
}