{
    "patch": [
        {
            "func_name": "OpCode",
            "patch": "--- func_before\n+++ func_after\n@@ -865,6 +865,12 @@\n \t\tSWF_warn(\"OpCode: want %i, max %i\\n\", n, maxn);\n #endif\n \t\treturn -999;\n-\t}\n+\t} else if (n < 1) {\n+\n+#if DEBUG\n+\t\tSWF_warn(\"OpCode: want %i < 1\\n\", n);\n+#endif\n+\t\treturn -998;\n+        }\n \treturn actions[n].SWF_ACTIONRECORD.ActionCode;\n }",
            "file_path": "util/decompile.c"
        },
        {
            "func_name": "readBytes",
            "patch": "--- func_before\n+++ func_after\n@@ -228,5 +228,13 @@\n char *readBytes(FILE *f,int size)\n {\n+\n+  if (size < 1) {\n+#if DEBUG\n+    SWF_warn(\"readBytes: want to read %i < 1 bytes: Handling a 0\\n\", size);\n+#endif\n+    size = 0;\n+  }\n+\n   int i;\n   char *buf;\n ",
            "file_path": "util/read.c"
        }
    ],
    "description": "A heap-based buffer over-read was found in the function OpCode (called from decompileSETMEMBER) in util/decompile.c in Ming 0.4.8, which allows attackers to cause a denial of service via a crafted file.",
    "msg": "Fix various overflows in OpCode and readBytes\n\n* OpCode: Add a check to avoid reading the stack when n < 1\n\n    In this case, print a debug warning and return error code -998\n\n* readBytes: When size < 0, set it to zero (don't read anything)\n\nThis commit fixes CVE-2017-11728 (Fixes #82), CVE-2017-11729 (Fixes #79),\nCVE-2017-11730 (Fixes #81) and CVE-2017-11731 (Fixes #84).",
    "root_cause": "In decompile.c:865-871, OpCode accesses actions[n] without validating n < 1. This is triggered by decompileAction (util/decompile.c:3135-3141) processing SWF action records, where 'n' is derived from untrusted SWF action offsets. For readBytes (util/read.c:228-236), negative 'size' values from SWF parsing (e.g., parseSWF_DEFINEBITS in util/parser.c:1480) could cause undersized buffer allocation. The patch adds n < 1 and size < 0 checks to prevent out-of-bounds access.",
    "confidence_score": 0.95,
    "enriched_data": [
        {
            "tool": "caller_info.find_caller_for_func_file({'file_path': 'util/decompile.c', 'func_name': 'OpCode', 'project_dir': './storage/result/Part2_result/github/CVE-2017-11728/old_repos/libming-libming_4e35b4b'})",
            "result": [
                {
                    "type": "caller_info",
                    "call_line": 874,
                    "call_code": "OpCode(actions, n, maxn)",
                    "caller_code": "static int\nisStoreOp(int n, SWF_ACTION *actions,int maxn)\n{\n\tswitch(OpCode(actions, n, maxn))\n\t{\n\tcase SWFACTION_STOREREGISTER:\n\tcase SWFACTION_SETVARIABLE:\n\tcase SWFACTION_SETMEMBER:\n\tcase SWFACTION_CASTOP:\n\t\treturn 1;\n\tdefault:\n\t\treturn 0;\n\t}\n}",
                    "caller_start": 871,
                    "file_path": "util/decompile.c"
                },
                {
                    "type": "caller_info",
                    "call_line": 894,
                    "call_code": "OpCode(actions, n+1, maxn)",
                    "caller_code": "static int \ndecompileGOTOFRAME(int n, SWF_ACTION *actions,int maxn,int islabel)\n{\n\tint i=0;\n\tstruct SWF_ACTIONGOTOLABEL *sactv2;\n\tOUT_BEGIN2(SWF_ACTIONGOTOFRAME);\n\tsactv2 = (struct SWF_ACTIONGOTOLABEL*)sact;\n\tINDENT\n\tif (OpCode(actions, n+1, maxn) == SWFACTION_PLAY)\n\t{\n\t\ti=1;\n\t\tputs(\"gotoAndPlay(\");\n\t}\n\telse\n\t{\n\t\tif (OpCode(actions, n+1, maxn) == SWFACTION_STOP)\n\t\t\ti=1;\n\t\tputs(\"gotoAndStop(\");\n\t}\n\t\n\tif (islabel)\n\t\tprintln(\"'%s');\", sactv2->FrameLabel);\n\telse\n\t\tprintln(\"%d);\", sact->Frame+1); /* GOTOFRAME arg is 0-based */\n\treturn i;\n}",
                    "caller_start": 886,
                    "file_path": "util/decompile.c"
                },
                {
                    "type": "caller_info",
                    "call_line": 901,
                    "call_code": "OpCode(actions, n+1, maxn)",
                    "caller_code": "static int \ndecompileGOTOFRAME(int n, SWF_ACTION *actions,int maxn,int islabel)\n{\n\tint i=0;\n\tstruct SWF_ACTIONGOTOLABEL *sactv2;\n\tOUT_BEGIN2(SWF_ACTIONGOTOFRAME);\n\tsactv2 = (struct SWF_ACTIONGOTOLABEL*)sact;\n\tINDENT\n\tif (OpCode(actions, n+1, maxn) == SWFACTION_PLAY)\n\t{\n\t\ti=1;\n\t\tputs(\"gotoAndPlay(\");\n\t}\n\telse\n\t{\n\t\tif (OpCode(actions, n+1, maxn) == SWFACTION_STOP)\n\t\t\ti=1;\n\t\tputs(\"gotoAndStop(\");\n\t}\n\t\n\tif (islabel)\n\t\tprintln(\"'%s');\", sactv2->FrameLabel);\n\telse\n\t\tprintln(\"%d);\", sact->Frame+1); /* GOTOFRAME arg is 0-based */\n\treturn i;\n}",
                    "caller_start": 886,
                    "file_path": "util/decompile.c"
                },
                {
                    "type": "caller_info",
                    "call_line": 921,
                    "call_code": "OpCode(actions, n+1, maxn)",
                    "caller_code": "static int \ndecompileGOTOFRAME2(int n, SWF_ACTION *actions, int maxn)\n{\n\tint i=0;\n\tOUT_BEGIN2(SWF_ACTIONGOTOFRAME2);\n\tINDENT\n\tif (n+1 < maxn)\n\t{\n\t\tif (OpCode(actions, n+1, maxn) == SWFACTION_PLAY ||\n\t\t    OpCode(actions, n+1, maxn) == SWFACTION_STOP)\n\t\t\ti=1;\n\t\tif (OpCode(actions, n+1, maxn) == SWFACTION_PLAY)\n\t\t\tputs(\"gotoAndPlay(\");\n\t\telse\n\t\t{\n\t\t\tif (OpCode(actions, n+1, maxn) == SWFACTION_STOP)\n\t\t\t\tputs(\"gotoAndStop(\");\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (sact->f.FlagBits.PlayFlag)\n\t\t\t\t\tputs(\"gotoAndPlay(\");\n\t\t\t\telse\n\t\t\t\t\tputs(\"gotoAndStop(\");\n\t\t\t}\n\t\t}\n\t}\n\telse \n\t{\n\t\tif (sact->f.FlagBits.PlayFlag)\n\t\t\tputs(\"gotoAndPlay(\");\n\t\telse\n\t\t\tputs(\"gotoAndStop(\");\n\t}\n\tdecompilePUSHPARAM(pop(),0);\n\tprintln(\");\");\n\treturn i;\n}",
                    "caller_start": 913,
                    "file_path": "util/decompile.c"
                },
                {
                    "type": "caller_info",
                    "call_line": 922,
                    "call_code": "OpCode(actions, n+1, maxn)",
                    "caller_code": "static int \ndecompileGOTOFRAME2(int n, SWF_ACTION *actions, int maxn)\n{\n\tint i=0;\n\tOUT_BEGIN2(SWF_ACTIONGOTOFRAME2);\n\tINDENT\n\tif (n+1 < maxn)\n\t{\n\t\tif (OpCode(actions, n+1, maxn) == SWFACTION_PLAY ||\n\t\t    OpCode(actions, n+1, maxn) == SWFACTION_STOP)\n\t\t\ti=1;\n\t\tif (OpCode(actions, n+1, maxn) == SWFACTION_PLAY)\n\t\t\tputs(\"gotoAndPlay(\");\n\t\telse\n\t\t{\n\t\t\tif (OpCode(actions, n+1, maxn) == SWFACTION_STOP)\n\t\t\t\tputs(\"gotoAndStop(\");\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (sact->f.FlagBits.PlayFlag)\n\t\t\t\t\tputs(\"gotoAndPlay(\");\n\t\t\t\telse\n\t\t\t\t\tputs(\"gotoAndStop(\");\n\t\t\t}\n\t\t}\n\t}\n\telse \n\t{\n\t\tif (sact->f.FlagBits.PlayFlag)\n\t\t\tputs(\"gotoAndPlay(\");\n\t\telse\n\t\t\tputs(\"gotoAndStop(\");\n\t}\n\tdecompilePUSHPARAM(pop(),0);\n\tprintln(\");\");\n\treturn i;\n}",
                    "caller_start": 913,
                    "file_path": "util/decompile.c"
                },
                {
                    "type": "caller_info",
                    "call_line": 924,
                    "call_code": "OpCode(actions, n+1, maxn)",
                    "caller_code": "static int \ndecompileGOTOFRAME2(int n, SWF_ACTION *actions, int maxn)\n{\n\tint i=0;\n\tOUT_BEGIN2(SWF_ACTIONGOTOFRAME2);\n\tINDENT\n\tif (n+1 < maxn)\n\t{\n\t\tif (OpCode(actions, n+1, maxn) == SWFACTION_PLAY ||\n\t\t    OpCode(actions, n+1, maxn) == SWFACTION_STOP)\n\t\t\ti=1;\n\t\tif (OpCode(actions, n+1, maxn) == SWFACTION_PLAY)\n\t\t\tputs(\"gotoAndPlay(\");\n\t\telse\n\t\t{\n\t\t\tif (OpCode(actions, n+1, maxn) == SWFACTION_STOP)\n\t\t\t\tputs(\"gotoAndStop(\");\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (sact->f.FlagBits.PlayFlag)\n\t\t\t\t\tputs(\"gotoAndPlay(\");\n\t\t\t\telse\n\t\t\t\t\tputs(\"gotoAndStop(\");\n\t\t\t}\n\t\t}\n\t}\n\telse \n\t{\n\t\tif (sact->f.FlagBits.PlayFlag)\n\t\t\tputs(\"gotoAndPlay(\");\n\t\telse\n\t\t\tputs(\"gotoAndStop(\");\n\t}\n\tdecompilePUSHPARAM(pop(),0);\n\tprintln(\");\");\n\treturn i;\n}",
                    "caller_start": 913,
                    "file_path": "util/decompile.c"
                },
                {
                    "type": "caller_info",
                    "call_line": 928,
                    "call_code": "OpCode(actions, n+1, maxn)",
                    "caller_code": "static int \ndecompileGOTOFRAME2(int n, SWF_ACTION *actions, int maxn)\n{\n\tint i=0;\n\tOUT_BEGIN2(SWF_ACTIONGOTOFRAME2);\n\tINDENT\n\tif (n+1 < maxn)\n\t{\n\t\tif (OpCode(actions, n+1, maxn) == SWFACTION_PLAY ||\n\t\t    OpCode(actions, n+1, maxn) == SWFACTION_STOP)\n\t\t\ti=1;\n\t\tif (OpCode(actions, n+1, maxn) == SWFACTION_PLAY)\n\t\t\tputs(\"gotoAndPlay(\");\n\t\telse\n\t\t{\n\t\t\tif (OpCode(actions, n+1, maxn) == SWFACTION_STOP)\n\t\t\t\tputs(\"gotoAndStop(\");\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (sact->f.FlagBits.PlayFlag)\n\t\t\t\t\tputs(\"gotoAndPlay(\");\n\t\t\t\telse\n\t\t\t\t\tputs(\"gotoAndStop(\");\n\t\t\t}\n\t\t}\n\t}\n\telse \n\t{\n\t\tif (sact->f.FlagBits.PlayFlag)\n\t\t\tputs(\"gotoAndPlay(\");\n\t\telse\n\t\t\tputs(\"gotoAndStop(\");\n\t}\n\tdecompilePUSHPARAM(pop(),0);\n\tprintln(\");\");\n\treturn i;\n}",
                    "caller_start": 913,
                    "file_path": "util/decompile.c"
                },
                {
                    "type": "caller_info",
                    "call_line": 1004,
                    "call_code": "OpCode(actions, n, maxn)",
                    "caller_code": "static int\ndecompileArithmeticOp(int n, SWF_ACTION *actions, int maxn)\n{\n\tstruct SWF_ACTIONPUSHPARAM *left, *right;\n\tint op_l = OpCode(actions, n, maxn);\n\tint op_r = OpCode(actions, n+1, maxn);\n\tright=pop();\n\tleft=pop();\n\tswitch(OpCode(actions, n, maxn))\n\t{\n\t/*\n\tcase SWFACTION_GETMEMBER:\n\t\tdecompilePUSHPARAM(peek(),0);\n\t\tbreak;\n\t*/\n\tcase SWFACTION_INSTANCEOF:\n\t\tif (precedence(op_l, op_r))\n\t\t\tpush(newVar3(getString(left),\" instanceof \",getString(right)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(left),\" instanceof \",getString(right),0,\")\"));\n\t\tbreak;\n\tcase SWFACTION_ADD:\n\tcase SWFACTION_ADD2:\n\t\tif (precedence(op_l, op_r))\n\t\t\tpush(newVar3(getString(left),\"+\",getString(right)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(left),\"+\",getString(right),0,\")\"));\n\t\tbreak;\n\tcase SWFACTION_SUBTRACT:\n\t\tif (precedence(op_l, op_r))\n\t\t\tpush(newVar3(getString(left),\"-\",getString(right)));\t      \n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(left),\"-\",getString(right),0,\")\"));\n\t\tbreak;\n\tcase SWFACTION_MULTIPLY:\n\t\tif (precedence(op_l, op_r))\n\t\t\tpush(newVar3(getString(left),\"*\",getString(right)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(left),\"*\",getString(right),0,\")\"));\n\t\tbreak;\n\tcase SWFACTION_DIVIDE:\n\t\tif (precedence(op_l, op_r))\n\t\t\tpush(newVar3(getString(left),\"/\",getString(right)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(left),\"/\",getString(right),0,\")\"));\n\t\tbreak;\n\tcase SWFACTION_MODULO:\n\t\tif (precedence(op_l, op_r))\n\t\t\tpush(newVar3(getString(left),\"%\",getString(right)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(left),\"%\",getString(right),0,\")\"));\n\t\tbreak;\n\tcase SWFACTION_SHIFTLEFT:\n\t\tif (precedence(op_l, op_r))\n\t\t\tpush(newVar3(getString(left),\"<<\",getString(right)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(left),\"<<\",getString(right),0,\")\"));\n\t\tbreak;\n\tcase SWFACTION_SHIFTRIGHT:\n\t\tif (precedence(op_l, op_r))\n\t\t\tpush(newVar3(getString(left),\">>\",getString(right)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(left),\">>\",getString(right),0,\")\"));\n\t\tbreak;\n\tcase SWFACTION_SHIFTRIGHT2:\n\t\tif (precedence(op_l, op_r))\n\t\t\tpush(newVar3(getString(left),\">>>\",getString(right)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(left),\">>>\",getString(right),0,\")\"));\n\t\tbreak;\n\tcase SWFACTION_LOGICALAND:\n\t\tif (precedence(op_l, op_r))\n\t\t\tpush(newVar3(getString(left),\"&&\",getString(right)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(left),\"&&\",getString(right),0,\")\"));\n\t\tbreak;\n\tcase SWFACTION_LOGICALOR:\n\t\tif (precedence(op_l, op_r))\n\t\t\tpush(newVar3(getString(left),\"||\",getString(right)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(left),\"||\",getString(right),0,\")\"));\n\t\tbreak;\n\tcase SWFACTION_BITWISEAND:\n\t\tif (precedence(op_l, op_r))\n\t\t\tpush(newVar3(getString(left),\"&\",getString(right)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(left),\"&\",getString(right),0,\")\"));\n\t\tbreak;\n\tcase SWFACTION_BITWISEOR:\n\t\tif (precedence(op_l, op_r))\n\t\t\tpush(newVar3(getString(left),\"|\",getString(right)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(left),\"|\",getString(right),0,\")\"));\n\t\tbreak;\n\tcase SWFACTION_BITWISEXOR:\n\t\tif (precedence(op_l, op_r))\n\t\t\tpush(newVar3(getString(left),\"^\",getString(right)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(left),\"^\",getString(right),0,\")\"));\n\t\tbreak;\n\tcase SWFACTION_EQUALS2:\t/* including negation */\n\tcase SWFACTION_EQUAL:\n\t\tif( OpCode(actions, n+1, maxn) == SWFACTION_LOGICALNOT &&\n\t\t    OpCode(actions, n+2, maxn) != SWFACTION_IF)\n\t\t{\n\t\t\top_r = OpCode(actions, n+1, maxn);\n\t\t\tif (precedence(op_l, op_r))\n\t\t\t\tpush(newVar3(getString(left),\"!=\",getString(right)));\n\t\t\telse\n\t\t\t\tpush(newVar_N(\"(\",getString(left),\"!=\",getString(right),0,\")\"));\n\t\t\treturn 1; /* due negation op */\n\t\t}\n\t\tif (precedence(op_l, op_r))\n\t\t\tpush(newVar3(getString(left),\"==\",getString(right)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(left),\"==\",getString(right),0,\")\"));\n\t\tbreak;\n\tcase SWFACTION_LESS2:\n\t\tif( OpCode(actions, n+1, maxn)  == SWFACTION_LOGICALNOT &&\n\t\t    OpCode(actions, n+2, maxn) != SWFACTION_IF ) \n\t\t{\n\t\t\top_r = OpCode(actions, n+2, maxn);\n\t\t\tif (precedence(op_l, op_r))\n\t\t\t\tpush(newVar3(getString(left),\">=\",getString(right)));\n\t\t\telse\n\t\t\t\tpush(newVar_N(\"(\",getString(left),\">=\",getString(right),0,\")\"));\n\t\t\treturn 1; /* due negation op */\n\t\t}\n\t\tif (precedence(op_l, op_r))\n\t\t\tpush(newVar3(getString(left),\"<\",getString(right)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(left),\"<\",getString(right),0,\")\"));\n\t\tbreak;\n\tcase SWFACTION_GREATER:\n\t\tif (precedence(op_l, op_r))\n\t\t\tpush(newVar3(getString(left),\">\",getString(right)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(left),\">\",getString(right),0,\")\"));\n\t\tbreak;\n\tcase SWFACTION_LESSTHAN:\n\t\tif (precedence(op_l, op_r))\n\t\t\tpush(newVar3(getString(left),\"<\",getString(right)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(left),\"<\",getString(right),0,\")\"));\n\t\tbreak;\n\tcase SWFACTION_STRINGEQ:\n\t\tif (precedence(op_l, op_r))\n\t\t\tpush(newVar3(getString(left),\"==\",getString(right)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(left),\"==\",getString(right),0,\")\"));\n\t\tbreak;\n\tcase SWFACTION_STRINGCOMPARE:\n\t\tputs(\"STRINGCOMPARE\");\n\t\tbreak;\n\tcase SWFACTION_STRICTEQUALS:\n#ifdef DECOMP_SWITCH\n\t\tif  (OpCode(actions, n, maxn) == SWFACTION_IF)\n\t\t{\n\t\t\tint code = actions[n+1].SWF_ACTIONIF.Actions[0].SWF_ACTIONRECORD.ActionCode;\n\t\t\tif(check_switch(code))\n\t\t\t{\n\t\t\t\tpush(right);\t// keep left and right side separated\n\t\t\t\tpush(left);\t// because it seems we have found a switch(){} and\n\t\t\t\tbreak;\t// let decompileIF() once more do all the dirty work\n\t\t\t}\n\t\t}\n#endif\n\t\tif( OpCode(actions, n+1, maxn) == SWFACTION_LOGICALNOT &&\n\t\t    OpCode(actions, n+2, maxn) != SWFACTION_IF ) \n\t\t{\n\t\t\top_r = OpCode(actions, n+2, maxn);\n\t\t\tif (precedence(op_l, op_r))\n\t\t\t\tpush(newVar3(getString(left),\"!==\",getString(right)));\n\t\t\telse\n\t\t\t\tpush(newVar_N(\"(\",getString(left),\"!==\",getString(right),0,\")\"));\n\t\t\treturn 1; /* due negation op */\n\t\t} else {\n\t\t\tif (precedence(op_l, op_r))\n\t\t\t\tpush(newVar3(getString(left),\"===\",getString(right)));\n\t\t\telse\n\t\t\t\tpush(newVar_N(\"(\",getString(left),\"===\",getString(right),0,\")\"));\n\t\t\tbreak;\n\t\t}\n\tdefault:\n\t\tprintf(\"Unhandled Arithmetic/Logic OP %x\\n\",\n\t\t\tactions[n].SWF_ACTIONRECORD.ActionCode);\n\t}\n\treturn 0;\n}\n",
                    "caller_start": 1000,
                    "file_path": "util/decompile.c"
                }
            ]
        },
        {
            "tool": "caller_info.find_caller_for_func_file({'file_path': 'util/read.c', 'func_name': 'readBytes', 'project_dir': './storage/result/Part2_result/github/CVE-2017-11728/old_repos/libming-libming_4e35b4b'})",
            "result": [
                {
                    "type": "caller_info",
                    "call_line": 1468,
                    "call_code": "readBytes(f, length)",
                    "caller_code": "SWF_Parserstruct *\nparseSWF_CHARACTERSET (FILE * f, int length)\n{\n  PAR_BEGIN (SWF_CHARACTERSET);\n  SKIP;\n  PAR_END;\n}",
                    "caller_start": 1464,
                    "file_path": "util/parser.c"
                },
                {
                    "type": "caller_info",
                    "call_line": 1480,
                    "call_code": "readBytes(f,end-fileOffset)",
                    "caller_code": "SWF_Parserstruct *\nparseSWF_DEFINEBITS (FILE * f, int length)\n{\n  int end = fileOffset + length;\n  PAR_BEGIN (SWF_DEFINEBITS);\n\n  parserrec->CharacterID = readUInt16 (f);\n  parserrec->JPEGDataSize = end-fileOffset;\n  parserrec->JPEGData = (UI8 *)readBytes(f,end-fileOffset);\n\n  PAR_END;\n}",
                    "caller_start": 1472,
                    "file_path": "util/parser.c"
                },
                {
                    "type": "caller_info",
                    "call_line": 1493,
                    "call_code": "readBytes(f,end-fileOffset)",
                    "caller_code": "SWF_Parserstruct *\nparseSWF_DEFINEBITSJPEG2 (FILE * f, int length)\n{\n  int end = fileOffset + length;\n  PAR_BEGIN (SWF_DEFINEBITSJPEG2);\n\n  parserrec->CharacterID = readUInt16 (f);\n  parserrec->JPEGDataSize = end-fileOffset;\n  parserrec->JPEGData = (UI8 *)readBytes(f,end-fileOffset);\n\n  PAR_END;\n}",
                    "caller_start": 1485,
                    "file_path": "util/parser.c"
                },
                {
                    "type": "caller_info",
                    "call_line": 1506,
                    "call_code": "readBytes(f,parserrec->AlphaDataOffset)",
                    "caller_code": "SWF_Parserstruct *\nparseSWF_DEFINEBITSJPEG3 (FILE * f, int length)\n{\n  int end = fileOffset + length;\n  PAR_BEGIN (SWF_DEFINEBITSJPEG3);\n\n  parserrec->CharacterID = readUInt16 (f);\n  parserrec->AlphaDataOffset = readUInt32 (f);\n  parserrec->JPEGData = (UI8 *)readBytes(f,parserrec->AlphaDataOffset);\n  parserrec->AlphaDataSize = end-fileOffset;\n  parserrec->BitmapAlphaData = (UI8 *)readBytes(f,end-fileOffset);\n\n\n  PAR_END;\n}",
                    "caller_start": 1498,
                    "file_path": "util/parser.c"
                },
                {
                    "type": "caller_info",
                    "call_line": 1508,
                    "call_code": "readBytes(f,end-fileOffset)",
                    "caller_code": "SWF_Parserstruct *\nparseSWF_DEFINEBITSJPEG3 (FILE * f, int length)\n{\n  int end = fileOffset + length;\n  PAR_BEGIN (SWF_DEFINEBITSJPEG3);\n\n  parserrec->CharacterID = readUInt16 (f);\n  parserrec->AlphaDataOffset = readUInt32 (f);\n  parserrec->JPEGData = (UI8 *)readBytes(f,parserrec->AlphaDataOffset);\n  parserrec->AlphaDataSize = end-fileOffset;\n  parserrec->BitmapAlphaData = (UI8 *)readBytes(f,end-fileOffset);\n\n\n  PAR_END;\n}",
                    "caller_start": 1498,
                    "file_path": "util/parser.c"
                },
                {
                    "type": "caller_info",
                    "call_line": 1518,
                    "call_code": "readBytes(f, length)",
                    "caller_code": "SWF_Parserstruct *\nparseSWF_DEFINEBITSPTR (FILE * f, int length)\n{\n  PAR_BEGIN (SWF_DEFINEBITSPTR);\n  SKIP;\n  PAR_END;\n}",
                    "caller_start": 1514,
                    "file_path": "util/parser.c"
                },
                {
                    "type": "caller_info",
                    "call_line": 1637,
                    "call_code": "readBytes(f, length)",
                    "caller_code": "SWF_Parserstruct *\nparseSWF_DEFINECOMMANDOBJ (FILE * f, int length)\n{\n  PAR_BEGIN (SWF_DEFINECOMMANDOBJ);\n  SKIP;\n  PAR_END;\n}",
                    "caller_start": 1633,
                    "file_path": "util/parser.c"
                },
                {
                    "type": "caller_info",
                    "call_line": 2150,
                    "call_code": "readBytes (f,end-fileOffset)",
                    "caller_code": "SWF_Parserstruct *\nparseSWF_DEFINELOSSLESS (FILE * f, int length)\n{\n  int end = fileOffset + length;\n  PAR_BEGIN (SWF_DEFINELOSSLESS);\n\n  parserrec->CharacterID = readUInt16 (f);\n  parserrec->BitmapFormat = readUInt8 (f);\n  parserrec->BitmapWidth = readUInt16 (f);\n  parserrec->BitmapHeight = readUInt16 (f);\n  if( parserrec->BitmapFormat == 3 /* 8-bit */ ) {\n      parserrec->BitmapColorTableSize = readUInt8 (f);\n  }\n  parserrec->ZlibBitmapData = (UI8 *)readBytes (f,end-fileOffset);\n\n  PAR_END;\n}",
                    "caller_start": 2137,
                    "file_path": "util/parser.c"
                }
            ]
        },
        {
            "tool": "caller_info.find_caller_for_func_file({'file_path': 'util/decompile.c', 'func_name': 'isStoreOp', 'project_dir': './storage/result/Part2_result/github/CVE-2017-11728/old_repos/libming-libming_4e35b4b'})",
            "result": [
                {
                    "type": "caller_info",
                    "call_line": 2687,
                    "call_code": "isStoreOp(n+1, actions,maxn)",
                    "caller_code": "static int\ndecompileDEFINEFUNCTION(int n, SWF_ACTION *actions, int maxn, int is_type2)\n{\n\tint i,j,k,m,r;\n\tstruct SWF_ACTIONPUSHPARAM *myregs[ 256 ];\n\tstruct _stack *StackSave;    \n\tstruct SWF_ACTIONDEFINEFUNCTION2 *sactv2;\n\tstruct strbufinfo origbuf;\n\tOUT_BEGIN2(SWF_ACTIONDEFINEFUNCTION);\n\tsactv2 = (struct SWF_ACTIONDEFINEFUNCTION2*)sact;\n\n#ifdef DEBUG\n\tif(n+1 < maxn)\n\t{\n\t\tprintln(\"/* function followed by OP %x */\", \n\t\t        OpCode(actions, n+1, maxn));\n\t}\n#endif\n#if USE_LIB\n\tif (isStoreOp(n+1, actions,maxn) \n\t    || (  *sact->FunctionName==0 && !is_type2 )\n\t    || (*sactv2->FunctionName==0 && is_type2  ))\n\t{\n\t\torigbuf=setTempString();\t/* switch to a temporary string buffer */\n\t}\n#endif\n\tputs(\"function \");\n\tif (is_type2)\n\t{\n\t\tfor(j=1;j<sactv2->RegisterCount;j++) \n\t\t{\n\t\t\tmyregs[j]=regs[j];\n\t\t\tregs[j]=NULL;\n\t\t}\n\t\tr=1;\n\t\tif (sactv2->PreloadThisFlag)\tregs[r++]=newVar(\"this\");\n\t\tif (sactv2->PreloadArgumentsFlag)\tregs[r++]=newVar(\"arguments\");\n\t\tif (sactv2->PreloadSuperFlag)\tregs[r++]=newVar(\"super\");\n\t\tif (sactv2->PreloadRootFlag)\tregs[r++]=newVar(\"root\");\n\t\tif (sactv2->PreloadParentFlag)\tregs[r++]=newVar(\"parent\");\n\t\tif (sactv2->PreloadGlobalFlag)\tregs[r++]=newVar(\"global\");\n\n\t\tputs(sactv2->FunctionName);\n\t\tputs(\"(\");\n\n\t\tfor(i=0,m=0;i<sactv2->NumParams;i++) \n\t\t{\n\t\t\tputs(sactv2->Params[i].ParamName);\n\t\t\tif ( sactv2->Params[i].Register)\n\t\t\t{\n\t\t\t\t printf(\" /*=R%d*/ \",sactv2->Params[i].Register);\n\t\t\t\t regs[sactv2->Params[i].Register] = newVar(sactv2->Params[i].ParamName);\n\t\t\t\t m++;\t\t\t\t\t// do not count 'void' etc\n\t\t\t}\n\t\t\tif( sactv2->NumParams > i+1 ) puts(\",\");\n\t\t}\n\t\tprintln(\") {\" );\n\t\tif (r+m < sactv2->RegisterCount)\n\t\t{\n\t\t\tINDENT\n\t\t\tputs(\"  var \");\n\t\t}\n\t\tfor(k=r;r<sactv2->RegisterCount;r++)\n\t\t{\n\t\t\tif (!regs[r])\n\t\t\t{\n\t\t\t\tchar *t=malloc(5); /* Rddd */\n\t\t\t\tsprintf(t,\"R%d\", r );\n\t\t\t\tputs (t);\n\t\t\t\tif (k++ < sactv2->RegisterCount- m -1)\n\t\t\t\t\tputs(\", \");\n\t\t\t\telse\n\t\t\t\t\tprintln(\";\" );\n\t\t\t\tregs[r]=newVar(t);\n\t\t\t}\n\t\t}\n\t\tStackSave=Stack;\n\t\tdecompileActions(sactv2->numActions, sactv2->Actions,gIndent+1);\n#ifdef DEBUG\n\t\tif (Stack!=StackSave)\n\t\t{\n\t\t\tprintln(\"/* Stack problem in function code above */\");\n\t\t}\n#endif\n\t\tStack=StackSave;\n\t\tfor(j=1;j<sactv2->RegisterCount;j++) \n\t\t\tregs[j]=myregs[j];\n\t}\n\telse\n\t{\n\t\tputs(sact->FunctionName);\n\t\tputs(\"(\");\n\t\tfor(i=0;i<sact->NumParams;i++) {\n\t\t\tputs(sact->Params[i]);\n\t\t\tif( sact->NumParams > i+1 ) puts(\",\");\n\t\t}\n\t\tprintln(\") {\" );\n\t\tk=0;\n\t\tif (sact->Actions[0].SWF_ACTIONRECORD.ActionCode == SWFACTION_PUSH)\n\t\t{\n\t\t\tstruct SWF_ACTIONPUSH *sactPush=(struct SWF_ACTIONPUSH *)sact->Actions;\n\t\t\tfor(i=0;i<sactPush->NumParam;i++)\n\t\t\t{\n\t\t\t\tif ((&(sactPush->Params[i]))->Type == PUSH_REGISTER) \n\t\t\t\t\tk++;\t/* REGISTER */\n\t\t\t}\n\t\t\tif (k)\n\t\t\t{\n\t\t\t\tINDENT\n\t\t\t\tputs(\"  var \");\n\t\t\t\tfor(i=1;i<=k;i++)\n\t\t\t\t{\n\t\t\t\t\tchar *t=malloc(5); /* Rddd */\n\t\t\t\t\tsprintf(t,\"R%d\", i );\n\t\t\t\t\tputs (t);\n\t\t\t\t\tif (i < k)\n\t\t\t\t\t\tputs(\", \");\n\t\t\t\t\telse\n\t\t\t\t\t\tprintln(\";\" );\n\t\t\t\t\tregs[i]=newVar(t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor(j=1;j<=k;j++) \n\t\t\tmyregs[j]=regs[j];\n\t\tStackSave=Stack;\n\t\tdecompileActions(sact->numActions, sact->Actions,gIndent+1);\n#ifdef DEBUG\n\t\tif (Stack!=StackSave)\n\t\t{\n\t\t\tprintln(\"/* Stack problem in function code above */\");\n\t\t}\n#endif\n\t\tStack=StackSave;\n\t\tfor(j=1;j<=k;j++) \n\t\t\tregs[j]=myregs[j];\n\t}\n\tINDENT\n\tif (isStoreOp(n+1, actions,maxn) \n\t    || ( *sact->FunctionName==0 && !is_type2 )\n\t    || (*sactv2->FunctionName==0 && is_type2 ))\n\t{\n\t\tputs(\"}\");\n#if USE_LIB\n\t\tpush (newVar(dcgetstr()));\t/* push func body for later assignment */\n\t\tsetOrigString(origbuf);\t\t/* switch back to orig buffer */\n#else\n\t\tpush (newVar(\"/* see function code above */\"));\t/* workaround only if LIB is not in use */\n#endif\n\t}\n\telse\n\t\tprintln(\"}\" );\n\treturn 0;\n}\n",
                    "caller_start": 2668,
                    "file_path": "util/decompile.c"
                },
                {
                    "type": "caller_info",
                    "call_line": 2806,
                    "call_code": "isStoreOp(n+1, actions,maxn)",
                    "caller_code": "static int\ndecompileDEFINEFUNCTION(int n, SWF_ACTION *actions, int maxn, int is_type2)\n{\n\tint i,j,k,m,r;\n\tstruct SWF_ACTIONPUSHPARAM *myregs[ 256 ];\n\tstruct _stack *StackSave;    \n\tstruct SWF_ACTIONDEFINEFUNCTION2 *sactv2;\n\tstruct strbufinfo origbuf;\n\tOUT_BEGIN2(SWF_ACTIONDEFINEFUNCTION);\n\tsactv2 = (struct SWF_ACTIONDEFINEFUNCTION2*)sact;\n\n#ifdef DEBUG\n\tif(n+1 < maxn)\n\t{\n\t\tprintln(\"/* function followed by OP %x */\", \n\t\t        OpCode(actions, n+1, maxn));\n\t}\n#endif\n#if USE_LIB\n\tif (isStoreOp(n+1, actions,maxn) \n\t    || (  *sact->FunctionName==0 && !is_type2 )\n\t    || (*sactv2->FunctionName==0 && is_type2  ))\n\t{\n\t\torigbuf=setTempString();\t/* switch to a temporary string buffer */\n\t}\n#endif\n\tputs(\"function \");\n\tif (is_type2)\n\t{\n\t\tfor(j=1;j<sactv2->RegisterCount;j++) \n\t\t{\n\t\t\tmyregs[j]=regs[j];\n\t\t\tregs[j]=NULL;\n\t\t}\n\t\tr=1;\n\t\tif (sactv2->PreloadThisFlag)\tregs[r++]=newVar(\"this\");\n\t\tif (sactv2->PreloadArgumentsFlag)\tregs[r++]=newVar(\"arguments\");\n\t\tif (sactv2->PreloadSuperFlag)\tregs[r++]=newVar(\"super\");\n\t\tif (sactv2->PreloadRootFlag)\tregs[r++]=newVar(\"root\");\n\t\tif (sactv2->PreloadParentFlag)\tregs[r++]=newVar(\"parent\");\n\t\tif (sactv2->PreloadGlobalFlag)\tregs[r++]=newVar(\"global\");\n\n\t\tputs(sactv2->FunctionName);\n\t\tputs(\"(\");\n\n\t\tfor(i=0,m=0;i<sactv2->NumParams;i++) \n\t\t{\n\t\t\tputs(sactv2->Params[i].ParamName);\n\t\t\tif ( sactv2->Params[i].Register)\n\t\t\t{\n\t\t\t\t printf(\" /*=R%d*/ \",sactv2->Params[i].Register);\n\t\t\t\t regs[sactv2->Params[i].Register] = newVar(sactv2->Params[i].ParamName);\n\t\t\t\t m++;\t\t\t\t\t// do not count 'void' etc\n\t\t\t}\n\t\t\tif( sactv2->NumParams > i+1 ) puts(\",\");\n\t\t}\n\t\tprintln(\") {\" );\n\t\tif (r+m < sactv2->RegisterCount)\n\t\t{\n\t\t\tINDENT\n\t\t\tputs(\"  var \");\n\t\t}\n\t\tfor(k=r;r<sactv2->RegisterCount;r++)\n\t\t{\n\t\t\tif (!regs[r])\n\t\t\t{\n\t\t\t\tchar *t=malloc(5); /* Rddd */\n\t\t\t\tsprintf(t,\"R%d\", r );\n\t\t\t\tputs (t);\n\t\t\t\tif (k++ < sactv2->RegisterCount- m -1)\n\t\t\t\t\tputs(\", \");\n\t\t\t\telse\n\t\t\t\t\tprintln(\";\" );\n\t\t\t\tregs[r]=newVar(t);\n\t\t\t}\n\t\t}\n\t\tStackSave=Stack;\n\t\tdecompileActions(sactv2->numActions, sactv2->Actions,gIndent+1);\n#ifdef DEBUG\n\t\tif (Stack!=StackSave)\n\t\t{\n\t\t\tprintln(\"/* Stack problem in function code above */\");\n\t\t}\n#endif\n\t\tStack=StackSave;\n\t\tfor(j=1;j<sactv2->RegisterCount;j++) \n\t\t\tregs[j]=myregs[j];\n\t}\n\telse\n\t{\n\t\tputs(sact->FunctionName);\n\t\tputs(\"(\");\n\t\tfor(i=0;i<sact->NumParams;i++) {\n\t\t\tputs(sact->Params[i]);\n\t\t\tif( sact->NumParams > i+1 ) puts(\",\");\n\t\t}\n\t\tprintln(\") {\" );\n\t\tk=0;\n\t\tif (sact->Actions[0].SWF_ACTIONRECORD.ActionCode == SWFACTION_PUSH)\n\t\t{\n\t\t\tstruct SWF_ACTIONPUSH *sactPush=(struct SWF_ACTIONPUSH *)sact->Actions;\n\t\t\tfor(i=0;i<sactPush->NumParam;i++)\n\t\t\t{\n\t\t\t\tif ((&(sactPush->Params[i]))->Type == PUSH_REGISTER) \n\t\t\t\t\tk++;\t/* REGISTER */\n\t\t\t}\n\t\t\tif (k)\n\t\t\t{\n\t\t\t\tINDENT\n\t\t\t\tputs(\"  var \");\n\t\t\t\tfor(i=1;i<=k;i++)\n\t\t\t\t{\n\t\t\t\t\tchar *t=malloc(5); /* Rddd */\n\t\t\t\t\tsprintf(t,\"R%d\", i );\n\t\t\t\t\tputs (t);\n\t\t\t\t\tif (i < k)\n\t\t\t\t\t\tputs(\", \");\n\t\t\t\t\telse\n\t\t\t\t\t\tprintln(\";\" );\n\t\t\t\t\tregs[i]=newVar(t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor(j=1;j<=k;j++) \n\t\t\tmyregs[j]=regs[j];\n\t\tStackSave=Stack;\n\t\tdecompileActions(sact->numActions, sact->Actions,gIndent+1);\n#ifdef DEBUG\n\t\tif (Stack!=StackSave)\n\t\t{\n\t\t\tprintln(\"/* Stack problem in function code above */\");\n\t\t}\n#endif\n\t\tStack=StackSave;\n\t\tfor(j=1;j<=k;j++) \n\t\t\tregs[j]=myregs[j];\n\t}\n\tINDENT\n\tif (isStoreOp(n+1, actions,maxn) \n\t    || ( *sact->FunctionName==0 && !is_type2 )\n\t    || (*sactv2->FunctionName==0 && is_type2 ))\n\t{\n\t\tputs(\"}\");\n#if USE_LIB\n\t\tpush (newVar(dcgetstr()));\t/* push func body for later assignment */\n\t\tsetOrigString(origbuf);\t\t/* switch back to orig buffer */\n#else\n\t\tpush (newVar(\"/* see function code above */\"));\t/* workaround only if LIB is not in use */\n#endif\n\t}\n\telse\n\t\tprintln(\"}\" );\n\treturn 0;\n}\n",
                    "caller_start": 2668,
                    "file_path": "util/decompile.c"
                }
            ]
        },
        {
            "tool": "caller_info.find_caller_for_func_file({'file_path': 'util/decompile.c', 'func_name': 'decompileGOTOFRAME', 'project_dir': './storage/result/Part2_result/github/CVE-2017-11728/old_repos/libming-libming_4e35b4b'})",
            "result": [
                {
                    "type": "caller_info",
                    "call_line": 3135,
                    "call_code": "decompileGOTOFRAME(n, actions, maxn,1)",
                    "caller_code": "int\ndecompileAction(int n, SWF_ACTION *actions, int maxn)\n{\n\tif( n > maxn ) SWF_error(\"Action overflow!!\");\n\n#ifdef DEBUG\n\tfprintf(stderr,\"%d:\\tACTION[%3.3d]: %s\\n\",\n\t        actions[n].SWF_ACTIONRECORD.Offset, n, \n\t        actionName(actions[n].SWF_ACTIONRECORD.ActionCode));\n#endif\n\n\tswitch(actions[n].SWF_ACTIONRECORD.ActionCode)\n\t{\n\tcase SWFACTION_END:\n\t\treturn 0;\n\n\tcase SWFACTION_CONSTANTPOOL:\n\t\tdecompileCONSTANTPOOL(&actions[n]);\n\t\treturn 0;\n\n\tcase SWFACTION_GOTOLABEL:\n\t\treturn decompileGOTOFRAME(n, actions, maxn,1);\n\n\tcase SWFACTION_GOTOFRAME:\n\t\treturn decompileGOTOFRAME(n, actions, maxn,0);\n\n\tcase SWFACTION_GOTOFRAME2:\n\t\treturn decompileGOTOFRAME2(n, actions, maxn);\n\n\tcase SWFACTION_WAITFORFRAME:\n\t\tdecompileWAITFORFRAME(&actions[n]);\n\t\treturn 0;\n\n\tcase SWFACTION_GETURL2:\n\t\tdecompileGETURL2(&actions[n]);\n\t\treturn 0;\n\n\tcase SWFACTION_GETURL:\n\t\tdecompileGETURL(&actions[n]);\n\t\treturn 0;\n\n\tcase SWFACTION_PUSH:\n\t\tdecompilePUSH(&actions[n]);\n\t\treturn 0;\n\n\tcase SWFACTION_PUSHDUP:\n\t\tdecompilePUSHDUP(&actions[n]);\n\t\treturn 0;\n\n\tcase SWFACTION_STACKSWAP:\n\t\tdecompileSTACKSWAP(&actions[n]);\t\n\t\treturn 0;\n\n\tcase SWFACTION_SETPROPERTY:\n\t\tdecompileSETPROPERTY(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_GETPROPERTY:\n\t\tdecompileGETPROPERTY(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_GETTIME:\n\t\treturn decompileGETTIME(n, actions, maxn);\n\n\tcase SWFACTION_TRACE:\n\t\tdecompileTRACE(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_CALLFRAME:\n\t\tdecompileCALLFRAME(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_EXTENDS:\n\t\tdecompileEXTENDS(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_INITOBJECT:\n\t\tdecompileINITOBJECT(n, actions, maxn);\n\t\treturn 0;\t        \n\n\tcase SWFACTION_NEWOBJECT:\n\t\tdecompileNEWOBJECT(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_NEWMETHOD:\n\t\tdecompileNEWMETHOD(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_GETMEMBER:\n\t\tdecompileGETMEMBER(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_SETMEMBER:\n\t\tdecompileSETMEMBER(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_GETVARIABLE:\n\t\tdecompileGETVARIABLE(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_SETVARIABLE:\n\t\tdecompileSETVARIABLE(n, actions, maxn, 0);\n\t\treturn 0;\n\n\tcase SWFACTION_DEFINELOCAL:\n\t\tdecompileSETVARIABLE(n, actions, maxn, 1);\n\t\treturn 0;\n\n\tcase SWFACTION_DEFINELOCAL2:\n\t\tdecompileDEFINELOCAL2(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_DECREMENT:\n\t\treturn decompileINCR_DECR(n, actions, maxn, 0);\n\n\tcase SWFACTION_INCREMENT:\n\t\treturn decompileINCR_DECR(n, actions, maxn,1);\n\n\tcase SWFACTION_STOREREGISTER:\n\t\tdecompileSTOREREGISTER(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_JUMP:\n\t\treturn decompileJUMP(n, actions, maxn);\n\n\tcase SWFACTION_RETURN:\n\t\tdecompileRETURN(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_LOGICALNOT:\n\t\treturn decompileLogicalNot(n, actions, maxn);\n\n\tcase SWFACTION_IF:\n\t\treturn decompileIF(n, actions, maxn);\n\n\tcase SWFACTION_WITH:\n\t\tdecompileWITH(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_ENUMERATE:\n\t\treturn decompileENUMERATE(n, actions, maxn, 0);\n\n\tcase SWFACTION_ENUMERATE2 :\n\t\treturn decompileENUMERATE(n, actions, maxn,1);\n\n\tcase SWFACTION_INITARRAY:\n\t\treturn decompileINITARRAY(n, actions, maxn);\n\n\tcase SWFACTION_DEFINEFUNCTION:\t\n\t\treturn decompileDEFINEFUNCTION(n, actions, maxn,0);\n\n\tcase SWFACTION_DEFINEFUNCTION2:\n\t\treturn decompileDEFINEFUNCTION(n, actions, maxn,1);\n\n\tcase SWFACTION_CALLFUNCTION:\n\t\treturn decompileCALLFUNCTION(n, actions, maxn);\n\n\tcase SWFACTION_CALLMETHOD:\n\t\treturn decompileCALLMETHOD(n, actions, maxn);\n\n\tcase SWFACTION_INSTANCEOF:\n\tcase SWFACTION_SHIFTLEFT:\n\tcase SWFACTION_SHIFTRIGHT:\n\tcase SWFACTION_SHIFTRIGHT2:        \n\tcase SWFACTION_ADD:\n\tcase SWFACTION_ADD2:\n\tcase SWFACTION_SUBTRACT:\n\tcase SWFACTION_MULTIPLY:\n\tcase SWFACTION_DIVIDE:\n\tcase SWFACTION_MODULO:\n\tcase SWFACTION_BITWISEAND:\n\tcase SWFACTION_BITWISEOR:\n\tcase SWFACTION_BITWISEXOR:\n\tcase SWFACTION_EQUAL:\n\tcase SWFACTION_EQUALS2:\n\tcase SWFACTION_LESS2:\n\tcase SWFACTION_LOGICALAND:\n\tcase SWFACTION_LOGICALOR:\n\tcase SWFACTION_GREATER:\n\tcase SWFACTION_LESSTHAN:\n\tcase SWFACTION_STRINGEQ:\n\tcase SWFACTION_STRINGCOMPARE:\n\tcase SWFACTION_STRICTEQUALS:\n\t\treturn decompileArithmeticOp(n, actions, maxn);\n\n\tcase SWFACTION_POP:\n\t\tpop();\n\t\treturn 0;\n\n\tcase SWFACTION_STARTDRAG:\n\t\treturn decompileSTARTDRAG(n, actions, maxn);\n\n\tcase SWFACTION_DELETE:\n\t\treturn decompileDELETE(n, actions, maxn,0);\n\n\tcase SWFACTION_DELETE2:\n\t\treturn decompileDELETE(n, actions, maxn,1);\n\n\tcase SWFACTION_TARGETPATH:\n\t\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\"targetPath\");\n\n\tcase SWFACTION_TYPEOF:\n\t\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\"typeof\");\n\n\tcase SWFACTION_ORD:\n\t\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\"ord\");\n\n\tcase SWFACTION_CHR:\n\t\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\"chr\");\n\n\tcase SWFACTION_INT:\n\t\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\"int\");\n\n\tcase SWFACTION_TOSTRING:\n\t\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\"String\");     \n\n\tcase SWFACTION_TONUMBER:\n\t\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\"Number\");\n\n\tcase SWFACTION_RANDOMNUMBER:\n\t\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\"random\");\n\n\tcase SWFACTION_STRINGLENGTH:\n\t\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\"length\");\n\n\tcase SWFACTION_PLAY:\n\t\treturn decompile_Null_ArgBuiltInFunctionCall(n, actions, maxn,\"play\");\n\n\tcase SWFACTION_STOP:\n\t\treturn decompile_Null_ArgBuiltInFunctionCall(n, actions, maxn,\"stop\");\n\n\tcase SWFACTION_NEXTFRAME:\n\t\treturn decompile_Null_ArgBuiltInFunctionCall(n, actions, maxn,\"nextFrame\");\n\n\tcase SWFACTION_PREVFRAME:\n\t\treturn decompile_Null_ArgBuiltInFunctionCall(n, actions, maxn,\"prevFrame\");\n\n\tcase SWFACTION_ENDDRAG:\n\t\treturn decompile_Null_ArgBuiltInFunctionCall(n, actions, maxn,\"stopDrag\");\n\n\tcase SWFACTION_STOPSOUNDS:\n\t\treturn decompile_Null_ArgBuiltInFunctionCall(n, actions, maxn,\"stopAllSounds\");   \n\n\tcase SWFACTION_TOGGLEQUALITY:\n\t\treturn decompile_Null_ArgBuiltInFunctionCall(n, actions, maxn,\"toggleHighQuality\");      \n\n\tcase SWFACTION_MBSUBSTRING:\n\tcase SWFACTION_SUBSTRING:\n\t\treturn decompileSUBSTRING(n, actions, maxn);\n\n\tcase SWFACTION_STRINGCONCAT:\n\t\treturn decompileSTRINGCONCAT(n, actions, maxn);\n\n\tcase SWFACTION_REMOVECLIP:\n\t\treturn decompileREMOVECLIP(n, actions, maxn);\n\n\tcase SWFACTION_DUPLICATECLIP:\n\t\treturn decompileDUPLICATECLIP(n, actions, maxn);\n\n\tcase SWFACTION_SETTARGET:\n\t\treturn decompileSETTARGET(n, actions, maxn,0);\n\n\tcase SWFACTION_SETTARGET2:\n\t\treturn decompileSETTARGET(n, actions, maxn,1);\n\n\tcase SWFACTION_IMPLEMENTSOP:\n\t\treturn decompileIMPLEMENTS(n, actions, maxn);\n\n\tcase SWFACTION_CASTOP:\n\t\treturn decompileCAST(n, actions, maxn);\n\n\tcase SWFACTION_THROW:\n\t\treturn decompileTHROW(n, actions, maxn);\n\n\tcase SWFACTION_TRY:\n\t\treturn decompileTRY(n, actions, maxn);\n\n\tdefault:\n\t\toutputSWF_ACTION(n,&actions[n]);\n\t\treturn 0;\n\t}\n}\n",
                    "caller_start": 3114,
                    "file_path": "util/decompile.c"
                },
                {
                    "type": "caller_info",
                    "call_line": 3138,
                    "call_code": "decompileGOTOFRAME(n, actions, maxn,0)",
                    "caller_code": "int\ndecompileAction(int n, SWF_ACTION *actions, int maxn)\n{\n\tif( n > maxn ) SWF_error(\"Action overflow!!\");\n\n#ifdef DEBUG\n\tfprintf(stderr,\"%d:\\tACTION[%3.3d]: %s\\n\",\n\t        actions[n].SWF_ACTIONRECORD.Offset, n, \n\t        actionName(actions[n].SWF_ACTIONRECORD.ActionCode));\n#endif\n\n\tswitch(actions[n].SWF_ACTIONRECORD.ActionCode)\n\t{\n\tcase SWFACTION_END:\n\t\treturn 0;\n\n\tcase SWFACTION_CONSTANTPOOL:\n\t\tdecompileCONSTANTPOOL(&actions[n]);\n\t\treturn 0;\n\n\tcase SWFACTION_GOTOLABEL:\n\t\treturn decompileGOTOFRAME(n, actions, maxn,1);\n\n\tcase SWFACTION_GOTOFRAME:\n\t\treturn decompileGOTOFRAME(n, actions, maxn,0);\n\n\tcase SWFACTION_GOTOFRAME2:\n\t\treturn decompileGOTOFRAME2(n, actions, maxn);\n\n\tcase SWFACTION_WAITFORFRAME:\n\t\tdecompileWAITFORFRAME(&actions[n]);\n\t\treturn 0;\n\n\tcase SWFACTION_GETURL2:\n\t\tdecompileGETURL2(&actions[n]);\n\t\treturn 0;\n\n\tcase SWFACTION_GETURL:\n\t\tdecompileGETURL(&actions[n]);\n\t\treturn 0;\n\n\tcase SWFACTION_PUSH:\n\t\tdecompilePUSH(&actions[n]);\n\t\treturn 0;\n\n\tcase SWFACTION_PUSHDUP:\n\t\tdecompilePUSHDUP(&actions[n]);\n\t\treturn 0;\n\n\tcase SWFACTION_STACKSWAP:\n\t\tdecompileSTACKSWAP(&actions[n]);\t\n\t\treturn 0;\n\n\tcase SWFACTION_SETPROPERTY:\n\t\tdecompileSETPROPERTY(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_GETPROPERTY:\n\t\tdecompileGETPROPERTY(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_GETTIME:\n\t\treturn decompileGETTIME(n, actions, maxn);\n\n\tcase SWFACTION_TRACE:\n\t\tdecompileTRACE(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_CALLFRAME:\n\t\tdecompileCALLFRAME(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_EXTENDS:\n\t\tdecompileEXTENDS(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_INITOBJECT:\n\t\tdecompileINITOBJECT(n, actions, maxn);\n\t\treturn 0;\t        \n\n\tcase SWFACTION_NEWOBJECT:\n\t\tdecompileNEWOBJECT(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_NEWMETHOD:\n\t\tdecompileNEWMETHOD(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_GETMEMBER:\n\t\tdecompileGETMEMBER(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_SETMEMBER:\n\t\tdecompileSETMEMBER(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_GETVARIABLE:\n\t\tdecompileGETVARIABLE(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_SETVARIABLE:\n\t\tdecompileSETVARIABLE(n, actions, maxn, 0);\n\t\treturn 0;\n\n\tcase SWFACTION_DEFINELOCAL:\n\t\tdecompileSETVARIABLE(n, actions, maxn, 1);\n\t\treturn 0;\n\n\tcase SWFACTION_DEFINELOCAL2:\n\t\tdecompileDEFINELOCAL2(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_DECREMENT:\n\t\treturn decompileINCR_DECR(n, actions, maxn, 0);\n\n\tcase SWFACTION_INCREMENT:\n\t\treturn decompileINCR_DECR(n, actions, maxn,1);\n\n\tcase SWFACTION_STOREREGISTER:\n\t\tdecompileSTOREREGISTER(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_JUMP:\n\t\treturn decompileJUMP(n, actions, maxn);\n\n\tcase SWFACTION_RETURN:\n\t\tdecompileRETURN(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_LOGICALNOT:\n\t\treturn decompileLogicalNot(n, actions, maxn);\n\n\tcase SWFACTION_IF:\n\t\treturn decompileIF(n, actions, maxn);\n\n\tcase SWFACTION_WITH:\n\t\tdecompileWITH(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_ENUMERATE:\n\t\treturn decompileENUMERATE(n, actions, maxn, 0);\n\n\tcase SWFACTION_ENUMERATE2 :\n\t\treturn decompileENUMERATE(n, actions, maxn,1);\n\n\tcase SWFACTION_INITARRAY:\n\t\treturn decompileINITARRAY(n, actions, maxn);\n\n\tcase SWFACTION_DEFINEFUNCTION:\t\n\t\treturn decompileDEFINEFUNCTION(n, actions, maxn,0);\n\n\tcase SWFACTION_DEFINEFUNCTION2:\n\t\treturn decompileDEFINEFUNCTION(n, actions, maxn,1);\n\n\tcase SWFACTION_CALLFUNCTION:\n\t\treturn decompileCALLFUNCTION(n, actions, maxn);\n\n\tcase SWFACTION_CALLMETHOD:\n\t\treturn decompileCALLMETHOD(n, actions, maxn);\n\n\tcase SWFACTION_INSTANCEOF:\n\tcase SWFACTION_SHIFTLEFT:\n\tcase SWFACTION_SHIFTRIGHT:\n\tcase SWFACTION_SHIFTRIGHT2:        \n\tcase SWFACTION_ADD:\n\tcase SWFACTION_ADD2:\n\tcase SWFACTION_SUBTRACT:\n\tcase SWFACTION_MULTIPLY:\n\tcase SWFACTION_DIVIDE:\n\tcase SWFACTION_MODULO:\n\tcase SWFACTION_BITWISEAND:\n\tcase SWFACTION_BITWISEOR:\n\tcase SWFACTION_BITWISEXOR:\n\tcase SWFACTION_EQUAL:\n\tcase SWFACTION_EQUALS2:\n\tcase SWFACTION_LESS2:\n\tcase SWFACTION_LOGICALAND:\n\tcase SWFACTION_LOGICALOR:\n\tcase SWFACTION_GREATER:\n\tcase SWFACTION_LESSTHAN:\n\tcase SWFACTION_STRINGEQ:\n\tcase SWFACTION_STRINGCOMPARE:\n\tcase SWFACTION_STRICTEQUALS:\n\t\treturn decompileArithmeticOp(n, actions, maxn);\n\n\tcase SWFACTION_POP:\n\t\tpop();\n\t\treturn 0;\n\n\tcase SWFACTION_STARTDRAG:\n\t\treturn decompileSTARTDRAG(n, actions, maxn);\n\n\tcase SWFACTION_DELETE:\n\t\treturn decompileDELETE(n, actions, maxn,0);\n\n\tcase SWFACTION_DELETE2:\n\t\treturn decompileDELETE(n, actions, maxn,1);\n\n\tcase SWFACTION_TARGETPATH:\n\t\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\"targetPath\");\n\n\tcase SWFACTION_TYPEOF:\n\t\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\"typeof\");\n\n\tcase SWFACTION_ORD:\n\t\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\"ord\");\n\n\tcase SWFACTION_CHR:\n\t\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\"chr\");\n\n\tcase SWFACTION_INT:\n\t\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\"int\");\n\n\tcase SWFACTION_TOSTRING:\n\t\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\"String\");     \n\n\tcase SWFACTION_TONUMBER:\n\t\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\"Number\");\n\n\tcase SWFACTION_RANDOMNUMBER:\n\t\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\"random\");\n\n\tcase SWFACTION_STRINGLENGTH:\n\t\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\"length\");\n\n\tcase SWFACTION_PLAY:\n\t\treturn decompile_Null_ArgBuiltInFunctionCall(n, actions, maxn,\"play\");\n\n\tcase SWFACTION_STOP:\n\t\treturn decompile_Null_ArgBuiltInFunctionCall(n, actions, maxn,\"stop\");\n\n\tcase SWFACTION_NEXTFRAME:\n\t\treturn decompile_Null_ArgBuiltInFunctionCall(n, actions, maxn,\"nextFrame\");\n\n\tcase SWFACTION_PREVFRAME:\n\t\treturn decompile_Null_ArgBuiltInFunctionCall(n, actions, maxn,\"prevFrame\");\n\n\tcase SWFACTION_ENDDRAG:\n\t\treturn decompile_Null_ArgBuiltInFunctionCall(n, actions, maxn,\"stopDrag\");\n\n\tcase SWFACTION_STOPSOUNDS:\n\t\treturn decompile_Null_ArgBuiltInFunctionCall(n, actions, maxn,\"stopAllSounds\");   \n\n\tcase SWFACTION_TOGGLEQUALITY:\n\t\treturn decompile_Null_ArgBuiltInFunctionCall(n, actions, maxn,\"toggleHighQuality\");      \n\n\tcase SWFACTION_MBSUBSTRING:\n\tcase SWFACTION_SUBSTRING:\n\t\treturn decompileSUBSTRING(n, actions, maxn);\n\n\tcase SWFACTION_STRINGCONCAT:\n\t\treturn decompileSTRINGCONCAT(n, actions, maxn);\n\n\tcase SWFACTION_REMOVECLIP:\n\t\treturn decompileREMOVECLIP(n, actions, maxn);\n\n\tcase SWFACTION_DUPLICATECLIP:\n\t\treturn decompileDUPLICATECLIP(n, actions, maxn);\n\n\tcase SWFACTION_SETTARGET:\n\t\treturn decompileSETTARGET(n, actions, maxn,0);\n\n\tcase SWFACTION_SETTARGET2:\n\t\treturn decompileSETTARGET(n, actions, maxn,1);\n\n\tcase SWFACTION_IMPLEMENTSOP:\n\t\treturn decompileIMPLEMENTS(n, actions, maxn);\n\n\tcase SWFACTION_CASTOP:\n\t\treturn decompileCAST(n, actions, maxn);\n\n\tcase SWFACTION_THROW:\n\t\treturn decompileTHROW(n, actions, maxn);\n\n\tcase SWFACTION_TRY:\n\t\treturn decompileTRY(n, actions, maxn);\n\n\tdefault:\n\t\toutputSWF_ACTION(n,&actions[n]);\n\t\treturn 0;\n\t}\n}\n",
                    "caller_start": 3114,
                    "file_path": "util/decompile.c"
                }
            ]
        },
        {
            "tool": "caller_info.find_caller_for_func_file({'file_path': 'util/decompile.c', 'func_name': 'decompileGOTOFRAME2', 'project_dir': './storage/result/Part2_result/github/CVE-2017-11728/old_repos/libming-libming_4e35b4b'})",
            "result": [
                {
                    "type": "caller_info",
                    "call_line": 3141,
                    "call_code": "decompileGOTOFRAME2(n, actions, maxn)",
                    "caller_code": "int\ndecompileAction(int n, SWF_ACTION *actions, int maxn)\n{\n\tif( n > maxn ) SWF_error(\"Action overflow!!\");\n\n#ifdef DEBUG\n\tfprintf(stderr,\"%d:\\tACTION[%3.3d]: %s\\n\",\n\t        actions[n].SWF_ACTIONRECORD.Offset, n, \n\t        actionName(actions[n].SWF_ACTIONRECORD.ActionCode));\n#endif\n\n\tswitch(actions[n].SWF_ACTIONRECORD.ActionCode)\n\t{\n\tcase SWFACTION_END:\n\t\treturn 0;\n\n\tcase SWFACTION_CONSTANTPOOL:\n\t\tdecompileCONSTANTPOOL(&actions[n]);\n\t\treturn 0;\n\n\tcase SWFACTION_GOTOLABEL:\n\t\treturn decompileGOTOFRAME(n, actions, maxn,1);\n\n\tcase SWFACTION_GOTOFRAME:\n\t\treturn decompileGOTOFRAME(n, actions, maxn,0);\n\n\tcase SWFACTION_GOTOFRAME2:\n\t\treturn decompileGOTOFRAME2(n, actions, maxn);\n\n\tcase SWFACTION_WAITFORFRAME:\n\t\tdecompileWAITFORFRAME(&actions[n]);\n\t\treturn 0;\n\n\tcase SWFACTION_GETURL2:\n\t\tdecompileGETURL2(&actions[n]);\n\t\treturn 0;\n\n\tcase SWFACTION_GETURL:\n\t\tdecompileGETURL(&actions[n]);\n\t\treturn 0;\n\n\tcase SWFACTION_PUSH:\n\t\tdecompilePUSH(&actions[n]);\n\t\treturn 0;\n\n\tcase SWFACTION_PUSHDUP:\n\t\tdecompilePUSHDUP(&actions[n]);\n\t\treturn 0;\n\n\tcase SWFACTION_STACKSWAP:\n\t\tdecompileSTACKSWAP(&actions[n]);\t\n\t\treturn 0;\n\n\tcase SWFACTION_SETPROPERTY:\n\t\tdecompileSETPROPERTY(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_GETPROPERTY:\n\t\tdecompileGETPROPERTY(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_GETTIME:\n\t\treturn decompileGETTIME(n, actions, maxn);\n\n\tcase SWFACTION_TRACE:\n\t\tdecompileTRACE(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_CALLFRAME:\n\t\tdecompileCALLFRAME(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_EXTENDS:\n\t\tdecompileEXTENDS(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_INITOBJECT:\n\t\tdecompileINITOBJECT(n, actions, maxn);\n\t\treturn 0;\t        \n\n\tcase SWFACTION_NEWOBJECT:\n\t\tdecompileNEWOBJECT(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_NEWMETHOD:\n\t\tdecompileNEWMETHOD(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_GETMEMBER:\n\t\tdecompileGETMEMBER(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_SETMEMBER:\n\t\tdecompileSETMEMBER(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_GETVARIABLE:\n\t\tdecompileGETVARIABLE(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_SETVARIABLE:\n\t\tdecompileSETVARIABLE(n, actions, maxn, 0);\n\t\treturn 0;\n\n\tcase SWFACTION_DEFINELOCAL:\n\t\tdecompileSETVARIABLE(n, actions, maxn, 1);\n\t\treturn 0;\n\n\tcase SWFACTION_DEFINELOCAL2:\n\t\tdecompileDEFINELOCAL2(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_DECREMENT:\n\t\treturn decompileINCR_DECR(n, actions, maxn, 0);\n\n\tcase SWFACTION_INCREMENT:\n\t\treturn decompileINCR_DECR(n, actions, maxn,1);\n\n\tcase SWFACTION_STOREREGISTER:\n\t\tdecompileSTOREREGISTER(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_JUMP:\n\t\treturn decompileJUMP(n, actions, maxn);\n\n\tcase SWFACTION_RETURN:\n\t\tdecompileRETURN(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_LOGICALNOT:\n\t\treturn decompileLogicalNot(n, actions, maxn);\n\n\tcase SWFACTION_IF:\n\t\treturn decompileIF(n, actions, maxn);\n\n\tcase SWFACTION_WITH:\n\t\tdecompileWITH(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_ENUMERATE:\n\t\treturn decompileENUMERATE(n, actions, maxn, 0);\n\n\tcase SWFACTION_ENUMERATE2 :\n\t\treturn decompileENUMERATE(n, actions, maxn,1);\n\n\tcase SWFACTION_INITARRAY:\n\t\treturn decompileINITARRAY(n, actions, maxn);\n\n\tcase SWFACTION_DEFINEFUNCTION:\t\n\t\treturn decompileDEFINEFUNCTION(n, actions, maxn,0);\n\n\tcase SWFACTION_DEFINEFUNCTION2:\n\t\treturn decompileDEFINEFUNCTION(n, actions, maxn,1);\n\n\tcase SWFACTION_CALLFUNCTION:\n\t\treturn decompileCALLFUNCTION(n, actions, maxn);\n\n\tcase SWFACTION_CALLMETHOD:\n\t\treturn decompileCALLMETHOD(n, actions, maxn);\n\n\tcase SWFACTION_INSTANCEOF:\n\tcase SWFACTION_SHIFTLEFT:\n\tcase SWFACTION_SHIFTRIGHT:\n\tcase SWFACTION_SHIFTRIGHT2:        \n\tcase SWFACTION_ADD:\n\tcase SWFACTION_ADD2:\n\tcase SWFACTION_SUBTRACT:\n\tcase SWFACTION_MULTIPLY:\n\tcase SWFACTION_DIVIDE:\n\tcase SWFACTION_MODULO:\n\tcase SWFACTION_BITWISEAND:\n\tcase SWFACTION_BITWISEOR:\n\tcase SWFACTION_BITWISEXOR:\n\tcase SWFACTION_EQUAL:\n\tcase SWFACTION_EQUALS2:\n\tcase SWFACTION_LESS2:\n\tcase SWFACTION_LOGICALAND:\n\tcase SWFACTION_LOGICALOR:\n\tcase SWFACTION_GREATER:\n\tcase SWFACTION_LESSTHAN:\n\tcase SWFACTION_STRINGEQ:\n\tcase SWFACTION_STRINGCOMPARE:\n\tcase SWFACTION_STRICTEQUALS:\n\t\treturn decompileArithmeticOp(n, actions, maxn);\n\n\tcase SWFACTION_POP:\n\t\tpop();\n\t\treturn 0;\n\n\tcase SWFACTION_STARTDRAG:\n\t\treturn decompileSTARTDRAG(n, actions, maxn);\n\n\tcase SWFACTION_DELETE:\n\t\treturn decompileDELETE(n, actions, maxn,0);\n\n\tcase SWFACTION_DELETE2:\n\t\treturn decompileDELETE(n, actions, maxn,1);\n\n\tcase SWFACTION_TARGETPATH:\n\t\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\"targetPath\");\n\n\tcase SWFACTION_TYPEOF:\n\t\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\"typeof\");\n\n\tcase SWFACTION_ORD:\n\t\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\"ord\");\n\n\tcase SWFACTION_CHR:\n\t\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\"chr\");\n\n\tcase SWFACTION_INT:\n\t\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\"int\");\n\n\tcase SWFACTION_TOSTRING:\n\t\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\"String\");     \n\n\tcase SWFACTION_TONUMBER:\n\t\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\"Number\");\n\n\tcase SWFACTION_RANDOMNUMBER:\n\t\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\"random\");\n\n\tcase SWFACTION_STRINGLENGTH:\n\t\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\"length\");\n\n\tcase SWFACTION_PLAY:\n\t\treturn decompile_Null_ArgBuiltInFunctionCall(n, actions, maxn,\"play\");\n\n\tcase SWFACTION_STOP:\n\t\treturn decompile_Null_ArgBuiltInFunctionCall(n, actions, maxn,\"stop\");\n\n\tcase SWFACTION_NEXTFRAME:\n\t\treturn decompile_Null_ArgBuiltInFunctionCall(n, actions, maxn,\"nextFrame\");\n\n\tcase SWFACTION_PREVFRAME:\n\t\treturn decompile_Null_ArgBuiltInFunctionCall(n, actions, maxn,\"prevFrame\");\n\n\tcase SWFACTION_ENDDRAG:\n\t\treturn decompile_Null_ArgBuiltInFunctionCall(n, actions, maxn,\"stopDrag\");\n\n\tcase SWFACTION_STOPSOUNDS:\n\t\treturn decompile_Null_ArgBuiltInFunctionCall(n, actions, maxn,\"stopAllSounds\");   \n\n\tcase SWFACTION_TOGGLEQUALITY:\n\t\treturn decompile_Null_ArgBuiltInFunctionCall(n, actions, maxn,\"toggleHighQuality\");      \n\n\tcase SWFACTION_MBSUBSTRING:\n\tcase SWFACTION_SUBSTRING:\n\t\treturn decompileSUBSTRING(n, actions, maxn);\n\n\tcase SWFACTION_STRINGCONCAT:\n\t\treturn decompileSTRINGCONCAT(n, actions, maxn);\n\n\tcase SWFACTION_REMOVECLIP:\n\t\treturn decompileREMOVECLIP(n, actions, maxn);\n\n\tcase SWFACTION_DUPLICATECLIP:\n\t\treturn decompileDUPLICATECLIP(n, actions, maxn);\n\n\tcase SWFACTION_SETTARGET:\n\t\treturn decompileSETTARGET(n, actions, maxn,0);\n\n\tcase SWFACTION_SETTARGET2:\n\t\treturn decompileSETTARGET(n, actions, maxn,1);\n\n\tcase SWFACTION_IMPLEMENTSOP:\n\t\treturn decompileIMPLEMENTS(n, actions, maxn);\n\n\tcase SWFACTION_CASTOP:\n\t\treturn decompileCAST(n, actions, maxn);\n\n\tcase SWFACTION_THROW:\n\t\treturn decompileTHROW(n, actions, maxn);\n\n\tcase SWFACTION_TRY:\n\t\treturn decompileTRY(n, actions, maxn);\n\n\tdefault:\n\t\toutputSWF_ACTION(n,&actions[n]);\n\t\treturn 0;\n\t}\n}\n",
                    "caller_start": 3114,
                    "file_path": "util/decompile.c"
                }
            ]
        },
        {
            "tool": "caller_info.find_caller_for_func_file({'file_path': 'util/decompile.c', 'func_name': 'decompileArithmeticOp', 'project_dir': './storage/result/Part2_result/github/CVE-2017-11728/old_repos/libming-libming_4e35b4b'})",
            "result": [
                {
                    "type": "caller_info",
                    "call_line": 3297,
                    "call_code": "decompileArithmeticOp(n, actions, maxn)",
                    "caller_code": "int\ndecompileAction(int n, SWF_ACTION *actions, int maxn)\n{\n\tif( n > maxn ) SWF_error(\"Action overflow!!\");\n\n#ifdef DEBUG\n\tfprintf(stderr,\"%d:\\tACTION[%3.3d]: %s\\n\",\n\t        actions[n].SWF_ACTIONRECORD.Offset, n, \n\t        actionName(actions[n].SWF_ACTIONRECORD.ActionCode));\n#endif\n\n\tswitch(actions[n].SWF_ACTIONRECORD.ActionCode)\n\t{\n\tcase SWFACTION_END:\n\t\treturn 0;\n\n\tcase SWFACTION_CONSTANTPOOL:\n\t\tdecompileCONSTANTPOOL(&actions[n]);\n\t\treturn 0;\n\n\tcase SWFACTION_GOTOLABEL:\n\t\treturn decompileGOTOFRAME(n, actions, maxn,1);\n\n\tcase SWFACTION_GOTOFRAME:\n\t\treturn decompileGOTOFRAME(n, actions, maxn,0);\n\n\tcase SWFACTION_GOTOFRAME2:\n\t\treturn decompileGOTOFRAME2(n, actions, maxn);\n\n\tcase SWFACTION_WAITFORFRAME:\n\t\tdecompileWAITFORFRAME(&actions[n]);\n\t\treturn 0;\n\n\tcase SWFACTION_GETURL2:\n\t\tdecompileGETURL2(&actions[n]);\n\t\treturn 0;\n\n\tcase SWFACTION_GETURL:\n\t\tdecompileGETURL(&actions[n]);\n\t\treturn 0;\n\n\tcase SWFACTION_PUSH:\n\t\tdecompilePUSH(&actions[n]);\n\t\treturn 0;\n\n\tcase SWFACTION_PUSHDUP:\n\t\tdecompilePUSHDUP(&actions[n]);\n\t\treturn 0;\n\n\tcase SWFACTION_STACKSWAP:\n\t\tdecompileSTACKSWAP(&actions[n]);\t\n\t\treturn 0;\n\n\tcase SWFACTION_SETPROPERTY:\n\t\tdecompileSETPROPERTY(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_GETPROPERTY:\n\t\tdecompileGETPROPERTY(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_GETTIME:\n\t\treturn decompileGETTIME(n, actions, maxn);\n\n\tcase SWFACTION_TRACE:\n\t\tdecompileTRACE(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_CALLFRAME:\n\t\tdecompileCALLFRAME(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_EXTENDS:\n\t\tdecompileEXTENDS(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_INITOBJECT:\n\t\tdecompileINITOBJECT(n, actions, maxn);\n\t\treturn 0;\t        \n\n\tcase SWFACTION_NEWOBJECT:\n\t\tdecompileNEWOBJECT(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_NEWMETHOD:\n\t\tdecompileNEWMETHOD(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_GETMEMBER:\n\t\tdecompileGETMEMBER(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_SETMEMBER:\n\t\tdecompileSETMEMBER(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_GETVARIABLE:\n\t\tdecompileGETVARIABLE(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_SETVARIABLE:\n\t\tdecompileSETVARIABLE(n, actions, maxn, 0);\n\t\treturn 0;\n\n\tcase SWFACTION_DEFINELOCAL:\n\t\tdecompileSETVARIABLE(n, actions, maxn, 1);\n\t\treturn 0;\n\n\tcase SWFACTION_DEFINELOCAL2:\n\t\tdecompileDEFINELOCAL2(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_DECREMENT:\n\t\treturn decompileINCR_DECR(n, actions, maxn, 0);\n\n\tcase SWFACTION_INCREMENT:\n\t\treturn decompileINCR_DECR(n, actions, maxn,1);\n\n\tcase SWFACTION_STOREREGISTER:\n\t\tdecompileSTOREREGISTER(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_JUMP:\n\t\treturn decompileJUMP(n, actions, maxn);\n\n\tcase SWFACTION_RETURN:\n\t\tdecompileRETURN(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_LOGICALNOT:\n\t\treturn decompileLogicalNot(n, actions, maxn);\n\n\tcase SWFACTION_IF:\n\t\treturn decompileIF(n, actions, maxn);\n\n\tcase SWFACTION_WITH:\n\t\tdecompileWITH(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_ENUMERATE:\n\t\treturn decompileENUMERATE(n, actions, maxn, 0);\n\n\tcase SWFACTION_ENUMERATE2 :\n\t\treturn decompileENUMERATE(n, actions, maxn,1);\n\n\tcase SWFACTION_INITARRAY:\n\t\treturn decompileINITARRAY(n, actions, maxn);\n\n\tcase SWFACTION_DEFINEFUNCTION:\t\n\t\treturn decompileDEFINEFUNCTION(n, actions, maxn,0);\n\n\tcase SWFACTION_DEFINEFUNCTION2:\n\t\treturn decompileDEFINEFUNCTION(n, actions, maxn,1);\n\n\tcase SWFACTION_CALLFUNCTION:\n\t\treturn decompileCALLFUNCTION(n, actions, maxn);\n\n\tcase SWFACTION_CALLMETHOD:\n\t\treturn decompileCALLMETHOD(n, actions, maxn);\n\n\tcase SWFACTION_INSTANCEOF:\n\tcase SWFACTION_SHIFTLEFT:\n\tcase SWFACTION_SHIFTRIGHT:\n\tcase SWFACTION_SHIFTRIGHT2:        \n\tcase SWFACTION_ADD:\n\tcase SWFACTION_ADD2:\n\tcase SWFACTION_SUBTRACT:\n\tcase SWFACTION_MULTIPLY:\n\tcase SWFACTION_DIVIDE:\n\tcase SWFACTION_MODULO:\n\tcase SWFACTION_BITWISEAND:\n\tcase SWFACTION_BITWISEOR:\n\tcase SWFACTION_BITWISEXOR:\n\tcase SWFACTION_EQUAL:\n\tcase SWFACTION_EQUALS2:\n\tcase SWFACTION_LESS2:\n\tcase SWFACTION_LOGICALAND:\n\tcase SWFACTION_LOGICALOR:\n\tcase SWFACTION_GREATER:\n\tcase SWFACTION_LESSTHAN:\n\tcase SWFACTION_STRINGEQ:\n\tcase SWFACTION_STRINGCOMPARE:\n\tcase SWFACTION_STRICTEQUALS:\n\t\treturn decompileArithmeticOp(n, actions, maxn);\n\n\tcase SWFACTION_POP:\n\t\tpop();\n\t\treturn 0;\n\n\tcase SWFACTION_STARTDRAG:\n\t\treturn decompileSTARTDRAG(n, actions, maxn);\n\n\tcase SWFACTION_DELETE:\n\t\treturn decompileDELETE(n, actions, maxn,0);\n\n\tcase SWFACTION_DELETE2:\n\t\treturn decompileDELETE(n, actions, maxn,1);\n\n\tcase SWFACTION_TARGETPATH:\n\t\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\"targetPath\");\n\n\tcase SWFACTION_TYPEOF:\n\t\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\"typeof\");\n\n\tcase SWFACTION_ORD:\n\t\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\"ord\");\n\n\tcase SWFACTION_CHR:\n\t\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\"chr\");\n\n\tcase SWFACTION_INT:\n\t\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\"int\");\n\n\tcase SWFACTION_TOSTRING:\n\t\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\"String\");     \n\n\tcase SWFACTION_TONUMBER:\n\t\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\"Number\");\n\n\tcase SWFACTION_RANDOMNUMBER:\n\t\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\"random\");\n\n\tcase SWFACTION_STRINGLENGTH:\n\t\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\"length\");\n\n\tcase SWFACTION_PLAY:\n\t\treturn decompile_Null_ArgBuiltInFunctionCall(n, actions, maxn,\"play\");\n\n\tcase SWFACTION_STOP:\n\t\treturn decompile_Null_ArgBuiltInFunctionCall(n, actions, maxn,\"stop\");\n\n\tcase SWFACTION_NEXTFRAME:\n\t\treturn decompile_Null_ArgBuiltInFunctionCall(n, actions, maxn,\"nextFrame\");\n\n\tcase SWFACTION_PREVFRAME:\n\t\treturn decompile_Null_ArgBuiltInFunctionCall(n, actions, maxn,\"prevFrame\");\n\n\tcase SWFACTION_ENDDRAG:\n\t\treturn decompile_Null_ArgBuiltInFunctionCall(n, actions, maxn,\"stopDrag\");\n\n\tcase SWFACTION_STOPSOUNDS:\n\t\treturn decompile_Null_ArgBuiltInFunctionCall(n, actions, maxn,\"stopAllSounds\");   \n\n\tcase SWFACTION_TOGGLEQUALITY:\n\t\treturn decompile_Null_ArgBuiltInFunctionCall(n, actions, maxn,\"toggleHighQuality\");      \n\n\tcase SWFACTION_MBSUBSTRING:\n\tcase SWFACTION_SUBSTRING:\n\t\treturn decompileSUBSTRING(n, actions, maxn);\n\n\tcase SWFACTION_STRINGCONCAT:\n\t\treturn decompileSTRINGCONCAT(n, actions, maxn);\n\n\tcase SWFACTION_REMOVECLIP:\n\t\treturn decompileREMOVECLIP(n, actions, maxn);\n\n\tcase SWFACTION_DUPLICATECLIP:\n\t\treturn decompileDUPLICATECLIP(n, actions, maxn);\n\n\tcase SWFACTION_SETTARGET:\n\t\treturn decompileSETTARGET(n, actions, maxn,0);\n\n\tcase SWFACTION_SETTARGET2:\n\t\treturn decompileSETTARGET(n, actions, maxn,1);\n\n\tcase SWFACTION_IMPLEMENTSOP:\n\t\treturn decompileIMPLEMENTS(n, actions, maxn);\n\n\tcase SWFACTION_CASTOP:\n\t\treturn decompileCAST(n, actions, maxn);\n\n\tcase SWFACTION_THROW:\n\t\treturn decompileTHROW(n, actions, maxn);\n\n\tcase SWFACTION_TRY:\n\t\treturn decompileTRY(n, actions, maxn);\n\n\tdefault:\n\t\toutputSWF_ACTION(n,&actions[n]);\n\t\treturn 0;\n\t}\n}\n",
                    "caller_start": 3114,
                    "file_path": "util/decompile.c"
                }
            ]
        }
    ],
    "analysis": {
        "patch": [
            {
                "func_name": "OpCode",
                "patch": "--- func_before\n+++ func_after\n@@ -865,6 +865,12 @@\n \t\tSWF_warn(\"OpCode: want %i, max %i\\n\", n, maxn);\n #endif\n \t\treturn -999;\n-\t}\n+\t} else if (n < 1) {\n+\n+#if DEBUG\n+\t\tSWF_warn(\"OpCode: want %i < 1\\n\", n);\n+#endif\n+\t\treturn -998;\n+        }\n \treturn actions[n].SWF_ACTIONRECORD.ActionCode;\n }",
                "file_path": "util/decompile.c"
            },
            {
                "func_name": "readBytes",
                "patch": "--- func_before\n+++ func_after\n@@ -228,5 +228,13 @@\n char *readBytes(FILE *f,int size)\n {\n+\n+  if (size < 1) {\n+#if DEBUG\n+    SWF_warn(\"readBytes: want to read %i < 1 bytes: Handling a 0\\n\", size);\n+#endif\n+    size = 0;\n+  }\n+\n   int i;\n   char *buf;\n ",
                "file_path": "util/read.c"
            }
        ],
        "msg": "Fix various overflows in OpCode and readBytes\n\n* OpCode: Add a check to avoid reading the stack when n < 1\n\n    In this case, print a debug warning and return error code -998\n\n* readBytes: When size < 0, set it to zero (don't read anything)\n\nThis commit fixes CVE-2017-11728 (Fixes #82), CVE-2017-11729 (Fixes #79),\nCVE-2017-11730 (Fixes #81) and CVE-2017-11731 (Fixes #84).",
        "description": "A heap-based buffer over-read was found in the function OpCode (called from decompileSETMEMBER) in util/decompile.c in Ming 0.4.8, which allows attackers to cause a denial of service via a crafted file.",
        "language": "c",
        "vulnerability_type": "memory",
        "repair_strategy": "In decompile.c:865-871, OpCode adds a check for n < 1 to prevent stack reads by returning -998. In read.c:228-236, readBytes sets negative size to 0 to avoid underflow.",
        "need_context": false,
        "required_context": [
            "caller: util/decompile.c::isStoreOp",
            "caller: util/decompile.c::decompileGOTOFRAME",
            "caller: util/decompile.c::decompileGOTOFRAME2",
            "caller: util/decompile.c::decompileArithmeticOp"
        ],
        "confidence_score": 0.95,
        "root_cause": "In decompile.c:865-871, OpCode accesses actions[n] without validating n < 1. This is triggered by decompileAction (util/decompile.c:3135-3141) processing SWF action records, where 'n' is derived from untrusted SWF action offsets. For readBytes (util/read.c:228-236), negative 'size' values from SWF parsing (e.g., parseSWF_DEFINEBITS in util/parser.c:1480) could cause undersized buffer allocation. The patch adds n < 1 and size < 0 checks to prevent out-of-bounds access.",
        "analysis": "The root cause is confirmed as missing validation in OpCode for n < 1 and readBytes for negative size values. The trigger chain traces to SWF action records and file parsing logic. No critical gaps remain; the chain is fully evidenced via decompileAction and parser functions.",
        "attack_vectors": [
            "Crafted SWF file with invalid action offsets (n < 1) triggers OpCode's out-of-bounds access in util/decompile.c:865.",
            "Malformed SWF file with negative size fields triggers readBytes buffer underflow in util/read.c:228."
        ]
    },
    "iteration": 2,
    "history": [
        {
            "stage": "initial",
            "prompt": "You are a senior security engineer. Using **only the provided patch and description**, and **restricted to context retrievable by the 'caller' and 'function' tools**, perform the initial vulnerability analysis.\n\n## INPUTS\n- **Commit Message**: Fix various overflows in OpCode and readBytes\n\n* OpCode: Add a check to avoid reading the stack when n < 1\n\n    In this case, print a debug warning and return error code -998\n\n* readBytes: When size < 0, set it to zero (don't read anything)\n\nThis commit fixes CVE-2017-11728 (Fixes #82), CVE-2017-11729 (Fixes #79),\nCVE-2017-11730 (Fixes #81) and CVE-2017-11731 (Fixes #84).\n- **Vulnerability Description**: A heap-based buffer over-read was found in the function OpCode (called from decompileSETMEMBER) in util/decompile.c in Ming 0.4.8, which allows attackers to cause a denial of service via a crafted file.\n- **Patch Code**: [{'func_name': 'OpCode', 'patch': '--- func_before\\n+++ func_after\\n@@ -865,6 +865,12 @@\\n \\t\\tSWF_warn(\"OpCode: want %i, max %i\\\\n\", n, maxn);\\n #endif\\n \\t\\treturn -999;\\n-\\t}\\n+\\t} else if (n < 1) {\\n+\\n+#if DEBUG\\n+\\t\\tSWF_warn(\"OpCode: want %i < 1\\\\n\", n);\\n+#endif\\n+\\t\\treturn -998;\\n+        }\\n \\treturn actions[n].SWF_ACTIONRECORD.ActionCode;\\n }', 'file_path': 'util/decompile.c'}, {'func_name': 'readBytes', 'patch': '--- func_before\\n+++ func_after\\n@@ -228,5 +228,13 @@\\n char *readBytes(FILE *f,int size)\\n {\\n+\\n+  if (size < 1) {\\n+#if DEBUG\\n+    SWF_warn(\"readBytes: want to read %i < 1 bytes: Handling a 0\\\\n\", size);\\n+#endif\\n+    size = 0;\\n+  }\\n+\\n   int i;\\n   char *buf;\\n ', 'file_path': 'util/read.c'}]\n\n## INSTRUCTIONS\n1. **Patch Review**  \n   • Detect primary language (`c`, `cpp`, `java`).  \n   • Classify vulnerability (`memory`, `logic`, `config`).  \n   • Explain how each patch hunk mitigates risk, citing `file:line`.  \n   → Populate `language`, `vulnerability_type`, `repair_rationale`.\n\n2. **Trace Root Cause within Patch**  \n   Follow calls / data flow in the patch, citing `file:line`.  \n   Where evidence ends, insert: `GAP: <why evidence stops>` → build `root_cause`.\n\n3. **Determine Missing Context (tools limited)**  \n   If gaps remain:  \n     • set `\"need_context\": true`  \n     • add precise, non-duplicate requests to `\"required_context\"` using **only**:  \n       - `function: …`  \n       - `caller: …`  \n   If the chain is fully evidenced from the patch, set `\"need_context\": false`.\n\n4. **Confidence Score**  \n   Set `confidence_score ≥ 0.90` only if the full chain is evidenced; otherwise `≤ 0.75`.\n\n## OUTPUT (MUST valid JSON — double quotes, no trailing commas)\n```json\n  {\n      \"language\": \"c | cpp | java\",\n      \"vulnerability_type\": \"memory | logic | config\",\n      \"repair_strategy\": \"<citing file:line from the patch>\",\n      \"analysis\": \"<Synthesis from Process Step 2. If full chain evident, explain that. If context needed, explain why requested context is essential to bridge gaps.>\",\n      \"need_context\": true | false, //false ONLY IF the full pattern was unambiguously evident from patch alone.\n      \"required_context\": \"<list of precise context requests if any context needed>\" ,\n      \"root_cause\": \"\"<Partial/complete trace with file:line evidence from the patch, noting gaps. If full chain evident, provide it.>\",\n      \"confidence_score\": 0.0-1.0 // Confidence in understanding the *full* path based on *this initial analysis phase*\n  }\n  ```\n\n## RULES\n* **Output must be valid JSON (no trailing commas).**\n* **Source-of-Truth** – Cite only code visible in the patch (`file:line`). Commit message / description are auxiliary.\n* **Zero-Assumption** – Never infer. Missing evidence → declare GAP, set `need_context=true`, and request context with allowed tools.\n* **Tool Restriction** – `required_context` items **must** be of type `function` or `caller` only.\n* **Stop Condition** – Terminate only when the trigger chain is fully evidenced from the patch; else continue requesting context.\n",
            "result": {
                "language": "c",
                "vulnerability_type": "memory",
                "repair_strategy": "In decompile.c:865-871, OpCode adds a check for n < 1 to prevent stack reads by returning -998. In read.c:228-236, readBytes sets negative size to 0 to avoid underflow.",
                "analysis": "The patches address invalid memory access by adding bounds checks. However, the root cause depends on how 'n' and 'size' parameters are derived. For full validation, we need to trace these parameters' origins.",
                "need_context": true,
                "required_context": [
                    "caller: util/decompile.c::OpCode",
                    "caller: util/read.c::readBytes"
                ],
                "root_cause": "In decompile.c:865-871, OpCode previously allowed n < 1, risking invalid actions[n] access. In read.c:228-236, readBytes accepted negative size values, leading to undersized buffer allocation. GAP: Parameter sources not visible in patch.",
                "confidence_score": 0.75
            },
            "timestamp": "2025-05-26T15:19:39.444272"
        },
        {
            "stage": "collection",
            "required_context": [
                "caller: util/decompile.c::OpCode",
                "caller: util/read.c::readBytes"
            ],
            "results": [
                {
                    "tool": "caller_info.find_caller_for_func_file({'file_path': 'util/decompile.c', 'func_name': 'OpCode', 'project_dir': './storage/result/Part2_result/github/CVE-2017-11728/old_repos/libming-libming_4e35b4b'})",
                    "result": [
                        {
                            "type": "caller_info",
                            "call_line": 874,
                            "call_code": "OpCode(actions, n, maxn)",
                            "caller_code": "static int\nisStoreOp(int n, SWF_ACTION *actions,int maxn)\n{\n\tswitch(OpCode(actions, n, maxn))\n\t{\n\tcase SWFACTION_STOREREGISTER:\n\tcase SWFACTION_SETVARIABLE:\n\tcase SWFACTION_SETMEMBER:\n\tcase SWFACTION_CASTOP:\n\t\treturn 1;\n\tdefault:\n\t\treturn 0;\n\t}\n}",
                            "caller_start": 871,
                            "file_path": "util/decompile.c"
                        },
                        {
                            "type": "caller_info",
                            "call_line": 894,
                            "call_code": "OpCode(actions, n+1, maxn)",
                            "caller_code": "static int \ndecompileGOTOFRAME(int n, SWF_ACTION *actions,int maxn,int islabel)\n{\n\tint i=0;\n\tstruct SWF_ACTIONGOTOLABEL *sactv2;\n\tOUT_BEGIN2(SWF_ACTIONGOTOFRAME);\n\tsactv2 = (struct SWF_ACTIONGOTOLABEL*)sact;\n\tINDENT\n\tif (OpCode(actions, n+1, maxn) == SWFACTION_PLAY)\n\t{\n\t\ti=1;\n\t\tputs(\"gotoAndPlay(\");\n\t}\n\telse\n\t{\n\t\tif (OpCode(actions, n+1, maxn) == SWFACTION_STOP)\n\t\t\ti=1;\n\t\tputs(\"gotoAndStop(\");\n\t}\n\t\n\tif (islabel)\n\t\tprintln(\"'%s');\", sactv2->FrameLabel);\n\telse\n\t\tprintln(\"%d);\", sact->Frame+1); /* GOTOFRAME arg is 0-based */\n\treturn i;\n}",
                            "caller_start": 886,
                            "file_path": "util/decompile.c"
                        },
                        {
                            "type": "caller_info",
                            "call_line": 901,
                            "call_code": "OpCode(actions, n+1, maxn)",
                            "caller_code": "static int \ndecompileGOTOFRAME(int n, SWF_ACTION *actions,int maxn,int islabel)\n{\n\tint i=0;\n\tstruct SWF_ACTIONGOTOLABEL *sactv2;\n\tOUT_BEGIN2(SWF_ACTIONGOTOFRAME);\n\tsactv2 = (struct SWF_ACTIONGOTOLABEL*)sact;\n\tINDENT\n\tif (OpCode(actions, n+1, maxn) == SWFACTION_PLAY)\n\t{\n\t\ti=1;\n\t\tputs(\"gotoAndPlay(\");\n\t}\n\telse\n\t{\n\t\tif (OpCode(actions, n+1, maxn) == SWFACTION_STOP)\n\t\t\ti=1;\n\t\tputs(\"gotoAndStop(\");\n\t}\n\t\n\tif (islabel)\n\t\tprintln(\"'%s');\", sactv2->FrameLabel);\n\telse\n\t\tprintln(\"%d);\", sact->Frame+1); /* GOTOFRAME arg is 0-based */\n\treturn i;\n}",
                            "caller_start": 886,
                            "file_path": "util/decompile.c"
                        },
                        {
                            "type": "caller_info",
                            "call_line": 921,
                            "call_code": "OpCode(actions, n+1, maxn)",
                            "caller_code": "static int \ndecompileGOTOFRAME2(int n, SWF_ACTION *actions, int maxn)\n{\n\tint i=0;\n\tOUT_BEGIN2(SWF_ACTIONGOTOFRAME2);\n\tINDENT\n\tif (n+1 < maxn)\n\t{\n\t\tif (OpCode(actions, n+1, maxn) == SWFACTION_PLAY ||\n\t\t    OpCode(actions, n+1, maxn) == SWFACTION_STOP)\n\t\t\ti=1;\n\t\tif (OpCode(actions, n+1, maxn) == SWFACTION_PLAY)\n\t\t\tputs(\"gotoAndPlay(\");\n\t\telse\n\t\t{\n\t\t\tif (OpCode(actions, n+1, maxn) == SWFACTION_STOP)\n\t\t\t\tputs(\"gotoAndStop(\");\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (sact->f.FlagBits.PlayFlag)\n\t\t\t\t\tputs(\"gotoAndPlay(\");\n\t\t\t\telse\n\t\t\t\t\tputs(\"gotoAndStop(\");\n\t\t\t}\n\t\t}\n\t}\n\telse \n\t{\n\t\tif (sact->f.FlagBits.PlayFlag)\n\t\t\tputs(\"gotoAndPlay(\");\n\t\telse\n\t\t\tputs(\"gotoAndStop(\");\n\t}\n\tdecompilePUSHPARAM(pop(),0);\n\tprintln(\");\");\n\treturn i;\n}",
                            "caller_start": 913,
                            "file_path": "util/decompile.c"
                        },
                        {
                            "type": "caller_info",
                            "call_line": 922,
                            "call_code": "OpCode(actions, n+1, maxn)",
                            "caller_code": "static int \ndecompileGOTOFRAME2(int n, SWF_ACTION *actions, int maxn)\n{\n\tint i=0;\n\tOUT_BEGIN2(SWF_ACTIONGOTOFRAME2);\n\tINDENT\n\tif (n+1 < maxn)\n\t{\n\t\tif (OpCode(actions, n+1, maxn) == SWFACTION_PLAY ||\n\t\t    OpCode(actions, n+1, maxn) == SWFACTION_STOP)\n\t\t\ti=1;\n\t\tif (OpCode(actions, n+1, maxn) == SWFACTION_PLAY)\n\t\t\tputs(\"gotoAndPlay(\");\n\t\telse\n\t\t{\n\t\t\tif (OpCode(actions, n+1, maxn) == SWFACTION_STOP)\n\t\t\t\tputs(\"gotoAndStop(\");\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (sact->f.FlagBits.PlayFlag)\n\t\t\t\t\tputs(\"gotoAndPlay(\");\n\t\t\t\telse\n\t\t\t\t\tputs(\"gotoAndStop(\");\n\t\t\t}\n\t\t}\n\t}\n\telse \n\t{\n\t\tif (sact->f.FlagBits.PlayFlag)\n\t\t\tputs(\"gotoAndPlay(\");\n\t\telse\n\t\t\tputs(\"gotoAndStop(\");\n\t}\n\tdecompilePUSHPARAM(pop(),0);\n\tprintln(\");\");\n\treturn i;\n}",
                            "caller_start": 913,
                            "file_path": "util/decompile.c"
                        },
                        {
                            "type": "caller_info",
                            "call_line": 924,
                            "call_code": "OpCode(actions, n+1, maxn)",
                            "caller_code": "static int \ndecompileGOTOFRAME2(int n, SWF_ACTION *actions, int maxn)\n{\n\tint i=0;\n\tOUT_BEGIN2(SWF_ACTIONGOTOFRAME2);\n\tINDENT\n\tif (n+1 < maxn)\n\t{\n\t\tif (OpCode(actions, n+1, maxn) == SWFACTION_PLAY ||\n\t\t    OpCode(actions, n+1, maxn) == SWFACTION_STOP)\n\t\t\ti=1;\n\t\tif (OpCode(actions, n+1, maxn) == SWFACTION_PLAY)\n\t\t\tputs(\"gotoAndPlay(\");\n\t\telse\n\t\t{\n\t\t\tif (OpCode(actions, n+1, maxn) == SWFACTION_STOP)\n\t\t\t\tputs(\"gotoAndStop(\");\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (sact->f.FlagBits.PlayFlag)\n\t\t\t\t\tputs(\"gotoAndPlay(\");\n\t\t\t\telse\n\t\t\t\t\tputs(\"gotoAndStop(\");\n\t\t\t}\n\t\t}\n\t}\n\telse \n\t{\n\t\tif (sact->f.FlagBits.PlayFlag)\n\t\t\tputs(\"gotoAndPlay(\");\n\t\telse\n\t\t\tputs(\"gotoAndStop(\");\n\t}\n\tdecompilePUSHPARAM(pop(),0);\n\tprintln(\");\");\n\treturn i;\n}",
                            "caller_start": 913,
                            "file_path": "util/decompile.c"
                        },
                        {
                            "type": "caller_info",
                            "call_line": 928,
                            "call_code": "OpCode(actions, n+1, maxn)",
                            "caller_code": "static int \ndecompileGOTOFRAME2(int n, SWF_ACTION *actions, int maxn)\n{\n\tint i=0;\n\tOUT_BEGIN2(SWF_ACTIONGOTOFRAME2);\n\tINDENT\n\tif (n+1 < maxn)\n\t{\n\t\tif (OpCode(actions, n+1, maxn) == SWFACTION_PLAY ||\n\t\t    OpCode(actions, n+1, maxn) == SWFACTION_STOP)\n\t\t\ti=1;\n\t\tif (OpCode(actions, n+1, maxn) == SWFACTION_PLAY)\n\t\t\tputs(\"gotoAndPlay(\");\n\t\telse\n\t\t{\n\t\t\tif (OpCode(actions, n+1, maxn) == SWFACTION_STOP)\n\t\t\t\tputs(\"gotoAndStop(\");\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (sact->f.FlagBits.PlayFlag)\n\t\t\t\t\tputs(\"gotoAndPlay(\");\n\t\t\t\telse\n\t\t\t\t\tputs(\"gotoAndStop(\");\n\t\t\t}\n\t\t}\n\t}\n\telse \n\t{\n\t\tif (sact->f.FlagBits.PlayFlag)\n\t\t\tputs(\"gotoAndPlay(\");\n\t\telse\n\t\t\tputs(\"gotoAndStop(\");\n\t}\n\tdecompilePUSHPARAM(pop(),0);\n\tprintln(\");\");\n\treturn i;\n}",
                            "caller_start": 913,
                            "file_path": "util/decompile.c"
                        },
                        {
                            "type": "caller_info",
                            "call_line": 1004,
                            "call_code": "OpCode(actions, n, maxn)",
                            "caller_code": "static int\ndecompileArithmeticOp(int n, SWF_ACTION *actions, int maxn)\n{\n\tstruct SWF_ACTIONPUSHPARAM *left, *right;\n\tint op_l = OpCode(actions, n, maxn);\n\tint op_r = OpCode(actions, n+1, maxn);\n\tright=pop();\n\tleft=pop();\n\tswitch(OpCode(actions, n, maxn))\n\t{\n\t/*\n\tcase SWFACTION_GETMEMBER:\n\t\tdecompilePUSHPARAM(peek(),0);\n\t\tbreak;\n\t*/\n\tcase SWFACTION_INSTANCEOF:\n\t\tif (precedence(op_l, op_r))\n\t\t\tpush(newVar3(getString(left),\" instanceof \",getString(right)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(left),\" instanceof \",getString(right),0,\")\"));\n\t\tbreak;\n\tcase SWFACTION_ADD:\n\tcase SWFACTION_ADD2:\n\t\tif (precedence(op_l, op_r))\n\t\t\tpush(newVar3(getString(left),\"+\",getString(right)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(left),\"+\",getString(right),0,\")\"));\n\t\tbreak;\n\tcase SWFACTION_SUBTRACT:\n\t\tif (precedence(op_l, op_r))\n\t\t\tpush(newVar3(getString(left),\"-\",getString(right)));\t      \n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(left),\"-\",getString(right),0,\")\"));\n\t\tbreak;\n\tcase SWFACTION_MULTIPLY:\n\t\tif (precedence(op_l, op_r))\n\t\t\tpush(newVar3(getString(left),\"*\",getString(right)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(left),\"*\",getString(right),0,\")\"));\n\t\tbreak;\n\tcase SWFACTION_DIVIDE:\n\t\tif (precedence(op_l, op_r))\n\t\t\tpush(newVar3(getString(left),\"/\",getString(right)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(left),\"/\",getString(right),0,\")\"));\n\t\tbreak;\n\tcase SWFACTION_MODULO:\n\t\tif (precedence(op_l, op_r))\n\t\t\tpush(newVar3(getString(left),\"%\",getString(right)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(left),\"%\",getString(right),0,\")\"));\n\t\tbreak;\n\tcase SWFACTION_SHIFTLEFT:\n\t\tif (precedence(op_l, op_r))\n\t\t\tpush(newVar3(getString(left),\"<<\",getString(right)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(left),\"<<\",getString(right),0,\")\"));\n\t\tbreak;\n\tcase SWFACTION_SHIFTRIGHT:\n\t\tif (precedence(op_l, op_r))\n\t\t\tpush(newVar3(getString(left),\">>\",getString(right)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(left),\">>\",getString(right),0,\")\"));\n\t\tbreak;\n\tcase SWFACTION_SHIFTRIGHT2:\n\t\tif (precedence(op_l, op_r))\n\t\t\tpush(newVar3(getString(left),\">>>\",getString(right)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(left),\">>>\",getString(right),0,\")\"));\n\t\tbreak;\n\tcase SWFACTION_LOGICALAND:\n\t\tif (precedence(op_l, op_r))\n\t\t\tpush(newVar3(getString(left),\"&&\",getString(right)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(left),\"&&\",getString(right),0,\")\"));\n\t\tbreak;\n\tcase SWFACTION_LOGICALOR:\n\t\tif (precedence(op_l, op_r))\n\t\t\tpush(newVar3(getString(left),\"||\",getString(right)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(left),\"||\",getString(right),0,\")\"));\n\t\tbreak;\n\tcase SWFACTION_BITWISEAND:\n\t\tif (precedence(op_l, op_r))\n\t\t\tpush(newVar3(getString(left),\"&\",getString(right)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(left),\"&\",getString(right),0,\")\"));\n\t\tbreak;\n\tcase SWFACTION_BITWISEOR:\n\t\tif (precedence(op_l, op_r))\n\t\t\tpush(newVar3(getString(left),\"|\",getString(right)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(left),\"|\",getString(right),0,\")\"));\n\t\tbreak;\n\tcase SWFACTION_BITWISEXOR:\n\t\tif (precedence(op_l, op_r))\n\t\t\tpush(newVar3(getString(left),\"^\",getString(right)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(left),\"^\",getString(right),0,\")\"));\n\t\tbreak;\n\tcase SWFACTION_EQUALS2:\t/* including negation */\n\tcase SWFACTION_EQUAL:\n\t\tif( OpCode(actions, n+1, maxn) == SWFACTION_LOGICALNOT &&\n\t\t    OpCode(actions, n+2, maxn) != SWFACTION_IF)\n\t\t{\n\t\t\top_r = OpCode(actions, n+1, maxn);\n\t\t\tif (precedence(op_l, op_r))\n\t\t\t\tpush(newVar3(getString(left),\"!=\",getString(right)));\n\t\t\telse\n\t\t\t\tpush(newVar_N(\"(\",getString(left),\"!=\",getString(right),0,\")\"));\n\t\t\treturn 1; /* due negation op */\n\t\t}\n\t\tif (precedence(op_l, op_r))\n\t\t\tpush(newVar3(getString(left),\"==\",getString(right)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(left),\"==\",getString(right),0,\")\"));\n\t\tbreak;\n\tcase SWFACTION_LESS2:\n\t\tif( OpCode(actions, n+1, maxn)  == SWFACTION_LOGICALNOT &&\n\t\t    OpCode(actions, n+2, maxn) != SWFACTION_IF ) \n\t\t{\n\t\t\top_r = OpCode(actions, n+2, maxn);\n\t\t\tif (precedence(op_l, op_r))\n\t\t\t\tpush(newVar3(getString(left),\">=\",getString(right)));\n\t\t\telse\n\t\t\t\tpush(newVar_N(\"(\",getString(left),\">=\",getString(right),0,\")\"));\n\t\t\treturn 1; /* due negation op */\n\t\t}\n\t\tif (precedence(op_l, op_r))\n\t\t\tpush(newVar3(getString(left),\"<\",getString(right)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(left),\"<\",getString(right),0,\")\"));\n\t\tbreak;\n\tcase SWFACTION_GREATER:\n\t\tif (precedence(op_l, op_r))\n\t\t\tpush(newVar3(getString(left),\">\",getString(right)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(left),\">\",getString(right),0,\")\"));\n\t\tbreak;\n\tcase SWFACTION_LESSTHAN:\n\t\tif (precedence(op_l, op_r))\n\t\t\tpush(newVar3(getString(left),\"<\",getString(right)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(left),\"<\",getString(right),0,\")\"));\n\t\tbreak;\n\tcase SWFACTION_STRINGEQ:\n\t\tif (precedence(op_l, op_r))\n\t\t\tpush(newVar3(getString(left),\"==\",getString(right)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(left),\"==\",getString(right),0,\")\"));\n\t\tbreak;\n\tcase SWFACTION_STRINGCOMPARE:\n\t\tputs(\"STRINGCOMPARE\");\n\t\tbreak;\n\tcase SWFACTION_STRICTEQUALS:\n#ifdef DECOMP_SWITCH\n\t\tif  (OpCode(actions, n, maxn) == SWFACTION_IF)\n\t\t{\n\t\t\tint code = actions[n+1].SWF_ACTIONIF.Actions[0].SWF_ACTIONRECORD.ActionCode;\n\t\t\tif(check_switch(code))\n\t\t\t{\n\t\t\t\tpush(right);\t// keep left and right side separated\n\t\t\t\tpush(left);\t// because it seems we have found a switch(){} and\n\t\t\t\tbreak;\t// let decompileIF() once more do all the dirty work\n\t\t\t}\n\t\t}\n#endif\n\t\tif( OpCode(actions, n+1, maxn) == SWFACTION_LOGICALNOT &&\n\t\t    OpCode(actions, n+2, maxn) != SWFACTION_IF ) \n\t\t{\n\t\t\top_r = OpCode(actions, n+2, maxn);\n\t\t\tif (precedence(op_l, op_r))\n\t\t\t\tpush(newVar3(getString(left),\"!==\",getString(right)));\n\t\t\telse\n\t\t\t\tpush(newVar_N(\"(\",getString(left),\"!==\",getString(right),0,\")\"));\n\t\t\treturn 1; /* due negation op */\n\t\t} else {\n\t\t\tif (precedence(op_l, op_r))\n\t\t\t\tpush(newVar3(getString(left),\"===\",getString(right)));\n\t\t\telse\n\t\t\t\tpush(newVar_N(\"(\",getString(left),\"===\",getString(right),0,\")\"));\n\t\t\tbreak;\n\t\t}\n\tdefault:\n\t\tprintf(\"Unhandled Arithmetic/Logic OP %x\\n\",\n\t\t\tactions[n].SWF_ACTIONRECORD.ActionCode);\n\t}\n\treturn 0;\n}\n",
                            "caller_start": 1000,
                            "file_path": "util/decompile.c"
                        }
                    ]
                },
                {
                    "tool": "caller_info.find_caller_for_func_file({'file_path': 'util/read.c', 'func_name': 'readBytes', 'project_dir': './storage/result/Part2_result/github/CVE-2017-11728/old_repos/libming-libming_4e35b4b'})",
                    "result": [
                        {
                            "type": "caller_info",
                            "call_line": 1468,
                            "call_code": "readBytes(f, length)",
                            "caller_code": "SWF_Parserstruct *\nparseSWF_CHARACTERSET (FILE * f, int length)\n{\n  PAR_BEGIN (SWF_CHARACTERSET);\n  SKIP;\n  PAR_END;\n}",
                            "caller_start": 1464,
                            "file_path": "util/parser.c"
                        },
                        {
                            "type": "caller_info",
                            "call_line": 1480,
                            "call_code": "readBytes(f,end-fileOffset)",
                            "caller_code": "SWF_Parserstruct *\nparseSWF_DEFINEBITS (FILE * f, int length)\n{\n  int end = fileOffset + length;\n  PAR_BEGIN (SWF_DEFINEBITS);\n\n  parserrec->CharacterID = readUInt16 (f);\n  parserrec->JPEGDataSize = end-fileOffset;\n  parserrec->JPEGData = (UI8 *)readBytes(f,end-fileOffset);\n\n  PAR_END;\n}",
                            "caller_start": 1472,
                            "file_path": "util/parser.c"
                        },
                        {
                            "type": "caller_info",
                            "call_line": 1493,
                            "call_code": "readBytes(f,end-fileOffset)",
                            "caller_code": "SWF_Parserstruct *\nparseSWF_DEFINEBITSJPEG2 (FILE * f, int length)\n{\n  int end = fileOffset + length;\n  PAR_BEGIN (SWF_DEFINEBITSJPEG2);\n\n  parserrec->CharacterID = readUInt16 (f);\n  parserrec->JPEGDataSize = end-fileOffset;\n  parserrec->JPEGData = (UI8 *)readBytes(f,end-fileOffset);\n\n  PAR_END;\n}",
                            "caller_start": 1485,
                            "file_path": "util/parser.c"
                        },
                        {
                            "type": "caller_info",
                            "call_line": 1506,
                            "call_code": "readBytes(f,parserrec->AlphaDataOffset)",
                            "caller_code": "SWF_Parserstruct *\nparseSWF_DEFINEBITSJPEG3 (FILE * f, int length)\n{\n  int end = fileOffset + length;\n  PAR_BEGIN (SWF_DEFINEBITSJPEG3);\n\n  parserrec->CharacterID = readUInt16 (f);\n  parserrec->AlphaDataOffset = readUInt32 (f);\n  parserrec->JPEGData = (UI8 *)readBytes(f,parserrec->AlphaDataOffset);\n  parserrec->AlphaDataSize = end-fileOffset;\n  parserrec->BitmapAlphaData = (UI8 *)readBytes(f,end-fileOffset);\n\n\n  PAR_END;\n}",
                            "caller_start": 1498,
                            "file_path": "util/parser.c"
                        },
                        {
                            "type": "caller_info",
                            "call_line": 1508,
                            "call_code": "readBytes(f,end-fileOffset)",
                            "caller_code": "SWF_Parserstruct *\nparseSWF_DEFINEBITSJPEG3 (FILE * f, int length)\n{\n  int end = fileOffset + length;\n  PAR_BEGIN (SWF_DEFINEBITSJPEG3);\n\n  parserrec->CharacterID = readUInt16 (f);\n  parserrec->AlphaDataOffset = readUInt32 (f);\n  parserrec->JPEGData = (UI8 *)readBytes(f,parserrec->AlphaDataOffset);\n  parserrec->AlphaDataSize = end-fileOffset;\n  parserrec->BitmapAlphaData = (UI8 *)readBytes(f,end-fileOffset);\n\n\n  PAR_END;\n}",
                            "caller_start": 1498,
                            "file_path": "util/parser.c"
                        },
                        {
                            "type": "caller_info",
                            "call_line": 1518,
                            "call_code": "readBytes(f, length)",
                            "caller_code": "SWF_Parserstruct *\nparseSWF_DEFINEBITSPTR (FILE * f, int length)\n{\n  PAR_BEGIN (SWF_DEFINEBITSPTR);\n  SKIP;\n  PAR_END;\n}",
                            "caller_start": 1514,
                            "file_path": "util/parser.c"
                        },
                        {
                            "type": "caller_info",
                            "call_line": 1637,
                            "call_code": "readBytes(f, length)",
                            "caller_code": "SWF_Parserstruct *\nparseSWF_DEFINECOMMANDOBJ (FILE * f, int length)\n{\n  PAR_BEGIN (SWF_DEFINECOMMANDOBJ);\n  SKIP;\n  PAR_END;\n}",
                            "caller_start": 1633,
                            "file_path": "util/parser.c"
                        },
                        {
                            "type": "caller_info",
                            "call_line": 2150,
                            "call_code": "readBytes (f,end-fileOffset)",
                            "caller_code": "SWF_Parserstruct *\nparseSWF_DEFINELOSSLESS (FILE * f, int length)\n{\n  int end = fileOffset + length;\n  PAR_BEGIN (SWF_DEFINELOSSLESS);\n\n  parserrec->CharacterID = readUInt16 (f);\n  parserrec->BitmapFormat = readUInt8 (f);\n  parserrec->BitmapWidth = readUInt16 (f);\n  parserrec->BitmapHeight = readUInt16 (f);\n  if( parserrec->BitmapFormat == 3 /* 8-bit */ ) {\n      parserrec->BitmapColorTableSize = readUInt8 (f);\n  }\n  parserrec->ZlibBitmapData = (UI8 *)readBytes (f,end-fileOffset);\n\n  PAR_END;\n}",
                            "caller_start": 2137,
                            "file_path": "util/parser.c"
                        }
                    ]
                }
            ],
            "timestamp": "2025-05-26T15:20:07.046373"
        },
        {
            "stage": "analysis",
            "iteration": 1,
            "prompt": "You are a senior security engineer. Using **all available code context**, build the **complete, evidence-backed root-cause and trigger chain** for the vulnerability.\n\n## INPUTS\n- **Commit Message**: Fix various overflows in OpCode and readBytes\n\n* OpCode: Add a check to avoid reading the stack when n < 1\n\n    In this case, print a debug warning and return error code -998\n\n* readBytes: When size < 0, set it to zero (don't read anything)\n\nThis commit fixes CVE-2017-11728 (Fixes #82), CVE-2017-11729 (Fixes #79),\nCVE-2017-11730 (Fixes #81) and CVE-2017-11731 (Fixes #84).\n- **Vulnerability Description**: A heap-based buffer over-read was found in the function OpCode (called from decompileSETMEMBER) in util/decompile.c in Ming 0.4.8, which allows attackers to cause a denial of service via a crafted file.\n- **Patch Code**: [{'func_name': 'OpCode', 'patch': '--- func_before\\n+++ func_after\\n@@ -865,6 +865,12 @@\\n \\t\\tSWF_warn(\"OpCode: want %i, max %i\\\\n\", n, maxn);\\n #endif\\n \\t\\treturn -999;\\n-\\t}\\n+\\t} else if (n < 1) {\\n+\\n+#if DEBUG\\n+\\t\\tSWF_warn(\"OpCode: want %i < 1\\\\n\", n);\\n+#endif\\n+\\t\\treturn -998;\\n+        }\\n \\treturn actions[n].SWF_ACTIONRECORD.ActionCode;\\n }', 'file_path': 'util/decompile.c'}, {'func_name': 'readBytes', 'patch': '--- func_before\\n+++ func_after\\n@@ -228,5 +228,13 @@\\n char *readBytes(FILE *f,int size)\\n {\\n+\\n+  if (size < 1) {\\n+#if DEBUG\\n+    SWF_warn(\"readBytes: want to read %i < 1 bytes: Handling a 0\\\\n\", size);\\n+#endif\\n+    size = 0;\\n+  }\\n+\\n   int i;\\n   char *buf;\\n ', 'file_path': 'util/read.c'}]\n- **History Summary (all prior context & analysis)**: [\n  {\n    \"stage\": \"initial\",\n    \"result\": {\n      \"language\": \"c\",\n      \"vulnerability_type\": \"memory\",\n      \"repair_strategy\": \"In decompile.c:865-871, OpCode adds a check for n < 1 to prevent stack reads by returning -998. In read.c:228-236, readBytes sets negative size to 0 to avoid underflow.\",\n      \"required_context\": [\n        \"caller: util/decompile.c::OpCode\",\n        \"caller: util/read.c::readBytes\"\n      ],\n      \"root_cause\": \"In decompile.c:865-871, OpCode previously allowed n < 1, risking invalid actions[n] access. In read.c:228-236, readBytes accepted negative size values, leading to undersized buffer allocation. GAP: Parameter sources not visible in patch.\"\n    }\n  },\n  {\n    \"stage\": \"collection\",\n    \"result\": [\n      {\n        \"source\": \"caller_info(file:decompile.c, func:OpCode)\",\n        \"result\": [\n          {\n            \"call_line\": 874,\n            \"call_code\": \"OpCode(actions, n, maxn)\",\n            \"caller_code\": \"static int\\nisStoreOp(int n, SWF_ACTION *actions,int maxn)\\n{\\n\\tswitch(OpCode(actions, n, maxn))\\n\\t{\\n\\tcase SWFACTION_STOREREGISTER:\\n\\tcase SWFACTION_SETVARIABLE:\\n\\tcase SWFACTION_SETMEMBER:\\n\\tcase SWFACTION_CASTOP:\\n\\t\\treturn 1;\\n\\tdefault:\\n\\t\\treturn 0;\\n\\t}\\n}\",\n            \"caller_start\": 871,\n            \"file_path\": \"util/decompile.c\"\n          },\n          {\n            \"call_line\": 894,\n            \"call_code\": \"OpCode(actions, n+1, maxn)\",\n            \"caller_code\": \"static int \\ndecompileGOTOFRAME(int n, SWF_ACTION *actions,int maxn,int islabel)\\n{\\n\\tint i=0;\\n\\tstruct SWF_ACTIONGOTOLABEL *sactv2;\\n\\tOUT_BEGIN2(SWF_ACTIONGOTOFRAME);\\n\\tsactv2 = (struct SWF_ACTIONGOTOLABEL*)sact;\\n\\tINDENT\\n\\tif (OpCode(actions, n+1, maxn) == SWFACTION_PLAY)\\n\\t{\\n\\t\\ti=1;\\n\\t\\tputs(\\\"gotoAndPlay(\\\");\\n\\t}\\n\\telse\\n\\t{\\n\\t\\tif (OpCode(actions, n+1, maxn) == SWFACTION_STOP)\\n\\t\\t\\ti=1;\\n\\t\\tputs(\\\"gotoAndStop(\\\");\\n\\t}\\n\\t\\n\\tif (islabel)\\n\\t\\tprintln(\\\"'%s');\\\", sactv2->FrameLabel);\\n\\telse\\n\\t\\tprintln(\\\"%d);\\\", sact->Frame+1); /* GOTOFRAME arg is 0-based */\\n\\treturn i;\\n}\",\n            \"caller_start\": 886,\n            \"file_path\": \"util/decompile.c\"\n          },\n          {\n            \"call_line\": 901,\n            \"call_code\": \"OpCode(actions, n+1, maxn)\",\n            \"caller_code\": \"static int \\ndecompileGOTOFRAME(int n, SWF_ACTION *actions,int maxn,int islabel)\\n{\\n\\tint i=0;\\n\\tstruct SWF_ACTIONGOTOLABEL *sactv2;\\n\\tOUT_BEGIN2(SWF_ACTIONGOTOFRAME);\\n\\tsactv2 = (struct SWF_ACTIONGOTOLABEL*)sact;\\n\\tINDENT\\n\\tif (OpCode(actions, n+1, maxn) == SWFACTION_PLAY)\\n\\t{\\n\\t\\ti=1;\\n\\t\\tputs(\\\"gotoAndPlay(\\\");\\n\\t}\\n\\telse\\n\\t{\\n\\t\\tif (OpCode(actions, n+1, maxn) == SWFACTION_STOP)\\n\\t\\t\\ti=1;\\n\\t\\tputs(\\\"gotoAndStop(\\\");\\n\\t}\\n\\t\\n\\tif (islabel)\\n\\t\\tprintln(\\\"'%s');\\\", sactv2->FrameLabel);\\n\\telse\\n\\t\\tprintln(\\\"%d);\\\", sact->Frame+1); /* GOTOFRAME arg is 0-based */\\n\\treturn i;\\n}\",\n            \"caller_start\": 886,\n            \"file_path\": \"util/decompile.c\"\n          },\n          {\n            \"call_line\": 921,\n            \"call_code\": \"OpCode(actions, n+1, maxn)\",\n            \"caller_code\": \"static int \\ndecompileGOTOFRAME2(int n, SWF_ACTION *actions, int maxn)\\n{\\n\\tint i=0;\\n\\tOUT_BEGIN2(SWF_ACTIONGOTOFRAME2);\\n\\tINDENT\\n\\tif (n+1 < maxn)\\n\\t{\\n\\t\\tif (OpCode(actions, n+1, maxn) == SWFACTION_PLAY ||\\n\\t\\t    OpCode(actions, n+1, maxn) == SWFACTION_STOP)\\n\\t\\t\\ti=1;\\n\\t\\tif (OpCode(actions, n+1, maxn) == SWFACTION_PLAY)\\n\\t\\t\\tputs(\\\"gotoAndPlay(\\\");\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tif (OpCode(actions, n+1, maxn) == SWFACTION_STOP)\\n\\t\\t\\t\\tputs(\\\"gotoAndStop(\\\");\\n\\t\\t\\telse\\n\\t\\t\\t{\\n\\t\\t\\t\\tif (sact->f.FlagBits.PlayFlag)\\n\\t\\t\\t\\t\\tputs(\\\"gotoAndPlay(\\\");\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\tputs(\\\"gotoAndStop(\\\");\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\telse \\n\\t{\\n\\t\\tif (sact->f.FlagBits.PlayFlag)\\n\\t\\t\\tputs(\\\"gotoAndPlay(\\\");\\n\\t\\telse\\n\\t\\t\\tputs(\\\"gotoAndStop(\\\");\\n\\t}\\n\\tdecompilePUSHPARAM(pop(),0);\\n\\tprintln(\\\");\\\");\\n\\treturn i;\\n}\",\n            \"caller_start\": 913,\n            \"file_path\": \"util/decompile.c\"\n          },\n          {\n            \"call_line\": 922,\n            \"call_code\": \"OpCode(actions, n+1, maxn)\",\n            \"caller_code\": \"static int \\ndecompileGOTOFRAME2(int n, SWF_ACTION *actions, int maxn)\\n{\\n\\tint i=0;\\n\\tOUT_BEGIN2(SWF_ACTIONGOTOFRAME2);\\n\\tINDENT\\n\\tif (n+1 < maxn)\\n\\t{\\n\\t\\tif (OpCode(actions, n+1, maxn) == SWFACTION_PLAY ||\\n\\t\\t    OpCode(actions, n+1, maxn) == SWFACTION_STOP)\\n\\t\\t\\ti=1;\\n\\t\\tif (OpCode(actions, n+1, maxn) == SWFACTION_PLAY)\\n\\t\\t\\tputs(\\\"gotoAndPlay(\\\");\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tif (OpCode(actions, n+1, maxn) == SWFACTION_STOP)\\n\\t\\t\\t\\tputs(\\\"gotoAndStop(\\\");\\n\\t\\t\\telse\\n\\t\\t\\t{\\n\\t\\t\\t\\tif (sact->f.FlagBits.PlayFlag)\\n\\t\\t\\t\\t\\tputs(\\\"gotoAndPlay(\\\");\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\tputs(\\\"gotoAndStop(\\\");\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\telse \\n\\t{\\n\\t\\tif (sact->f.FlagBits.PlayFlag)\\n\\t\\t\\tputs(\\\"gotoAndPlay(\\\");\\n\\t\\telse\\n\\t\\t\\tputs(\\\"gotoAndStop(\\\");\\n\\t}\\n\\tdecompilePUSHPARAM(pop(),0);\\n\\tprintln(\\\");\\\");\\n\\treturn i;\\n}\",\n            \"caller_start\": 913,\n            \"file_path\": \"util/decompile.c\"\n          },\n          {\n            \"call_line\": 924,\n            \"call_code\": \"OpCode(actions, n+1, maxn)\",\n            \"caller_code\": \"static int \\ndecompileGOTOFRAME2(int n, SWF_ACTION *actions, int maxn)\\n{\\n\\tint i=0;\\n\\tOUT_BEGIN2(SWF_ACTIONGOTOFRAME2);\\n\\tINDENT\\n\\tif (n+1 < maxn)\\n\\t{\\n\\t\\tif (OpCode(actions, n+1, maxn) == SWFACTION_PLAY ||\\n\\t\\t    OpCode(actions, n+1, maxn) == SWFACTION_STOP)\\n\\t\\t\\ti=1;\\n\\t\\tif (OpCode(actions, n+1, maxn) == SWFACTION_PLAY)\\n\\t\\t\\tputs(\\\"gotoAndPlay(\\\");\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tif (OpCode(actions, n+1, maxn) == SWFACTION_STOP)\\n\\t\\t\\t\\tputs(\\\"gotoAndStop(\\\");\\n\\t\\t\\telse\\n\\t\\t\\t{\\n\\t\\t\\t\\tif (sact->f.FlagBits.PlayFlag)\\n\\t\\t\\t\\t\\tputs(\\\"gotoAndPlay(\\\");\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\tputs(\\\"gotoAndStop(\\\");\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\telse \\n\\t{\\n\\t\\tif (sact->f.FlagBits.PlayFlag)\\n\\t\\t\\tputs(\\\"gotoAndPlay(\\\");\\n\\t\\telse\\n\\t\\t\\tputs(\\\"gotoAndStop(\\\");\\n\\t}\\n\\tdecompilePUSHPARAM(pop(),0);\\n\\tprintln(\\\");\\\");\\n\\treturn i;\\n}\",\n            \"caller_start\": 913,\n            \"file_path\": \"util/decompile.c\"\n          },\n          {\n            \"call_line\": 928,\n            \"call_code\": \"OpCode(actions, n+1, maxn)\",\n            \"caller_code\": \"static int \\ndecompileGOTOFRAME2(int n, SWF_ACTION *actions, int maxn)\\n{\\n\\tint i=0;\\n\\tOUT_BEGIN2(SWF_ACTIONGOTOFRAME2);\\n\\tINDENT\\n\\tif (n+1 < maxn)\\n\\t{\\n\\t\\tif (OpCode(actions, n+1, maxn) == SWFACTION_PLAY ||\\n\\t\\t    OpCode(actions, n+1, maxn) == SWFACTION_STOP)\\n\\t\\t\\ti=1;\\n\\t\\tif (OpCode(actions, n+1, maxn) == SWFACTION_PLAY)\\n\\t\\t\\tputs(\\\"gotoAndPlay(\\\");\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tif (OpCode(actions, n+1, maxn) == SWFACTION_STOP)\\n\\t\\t\\t\\tputs(\\\"gotoAndStop(\\\");\\n\\t\\t\\telse\\n\\t\\t\\t{\\n\\t\\t\\t\\tif (sact->f.FlagBits.PlayFlag)\\n\\t\\t\\t\\t\\tputs(\\\"gotoAndPlay(\\\");\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\tputs(\\\"gotoAndStop(\\\");\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\telse \\n\\t{\\n\\t\\tif (sact->f.FlagBits.PlayFlag)\\n\\t\\t\\tputs(\\\"gotoAndPlay(\\\");\\n\\t\\telse\\n\\t\\t\\tputs(\\\"gotoAndStop(\\\");\\n\\t}\\n\\tdecompilePUSHPARAM(pop(),0);\\n\\tprintln(\\\");\\\");\\n\\treturn i;\\n}\",\n            \"caller_start\": 913,\n            \"file_path\": \"util/decompile.c\"\n          },\n          {\n            \"call_line\": 1004,\n            \"call_code\": \"OpCode(actions, n, maxn)\",\n            \"caller_code\": \"static int\\ndecompileArithmeticOp(int n, SWF_ACTION *actions, int maxn)\\n{\\n\\tstruct SWF_ACTIONPUSHPARAM *left, *right;\\n\\tint op_l = OpCode(actions, n, maxn);\\n\\tint op_r = OpCode(actions, n+1, maxn);\\n\\tright=pop();\\n\\tleft=pop();\\n\\tswitch(OpCode(actions, n, maxn))\\n\\t{\\n\\t/*\\n\\tcase SWFACTION_GETMEMBER:\\n\\t\\tdecompilePUSHPARAM(peek(),0);\\n\\t\\tbreak;\\n\\t*/\\n\\tcase SWFACTION_INSTANCEOF:\\n\\t\\tif (precedence(op_l, op_r))\\n\\t\\t\\tpush(newVar3(getString(left),\\\" instanceof \\\",getString(right)));\\n\\t\\telse\\n\\t\\t\\tpush(newVar_N(\\\"(\\\",getString(left),\\\" instanceof \\\",getString(right),0,\\\")\\\"));\\n\\t\\tbreak;\\n\\tcase SWFACTION_ADD:\\n\\tcase SWFACTION_ADD2:\\n\\t\\tif (precedence(op_l, op_r))\\n\\t\\t\\tpush(newVar3(getString(left),\\\"+\\\",getString(right)));\\n\\t\\telse\\n\\t\\t\\tpush(newVar_N(\\\"(\\\",getString(left),\\\"+\\\",getString(right),0,\\\")\\\"));\\n\\t\\tbreak;\\n\\tcase SWFACTION_SUBTRACT:\\n\\t\\tif (precedence(op_l, op_r))\\n\\t\\t\\tpush(newVar3(getString(left),\\\"-\\\",getString(right)));\\t      \\n\\t\\telse\\n\\t\\t\\tpush(newVar_N(\\\"(\\\",getString(left),\\\"-\\\",getString(right),0,\\\")\\\"));\\n\\t\\tbreak;\\n\\tcase SWFACTION_MULTIPLY:\\n\\t\\tif (precedence(op_l, op_r))\\n\\t\\t\\tpush(newVar3(getString(left),\\\"*\\\",getString(right)));\\n\\t\\telse\\n\\t\\t\\tpush(newVar_N(\\\"(\\\",getString(left),\\\"*\\\",getString(right),0,\\\")\\\"));\\n\\t\\tbreak;\\n\\tcase SWFACTION_DIVIDE:\\n\\t\\tif (precedence(op_l, op_r))\\n\\t\\t\\tpush(newVar3(getString(left),\\\"/\\\",getString(right)));\\n\\t\\telse\\n\\t\\t\\tpush(newVar_N(\\\"(\\\",getString(left),\\\"/\\\",getString(right),0,\\\")\\\"));\\n\\t\\tbreak;\\n\\tcase SWFACTION_MODULO:\\n\\t\\tif (precedence(op_l, op_r))\\n\\t\\t\\tpush(newVar3(getString(left),\\\"%\\\",getString(right)));\\n\\t\\telse\\n\\t\\t\\tpush(newVar_N(\\\"(\\\",getString(left),\\\"%\\\",getString(right),0,\\\")\\\"));\\n\\t\\tbreak;\\n\\tcase SWFACTION_SHIFTLEFT:\\n\\t\\tif (precedence(op_l, op_r))\\n\\t\\t\\tpush(newVar3(getString(left),\\\"<<\\\",getString(right)));\\n\\t\\telse\\n\\t\\t\\tpush(newVar_N(\\\"(\\\",getString(left),\\\"<<\\\",getString(right),0,\\\")\\\"));\\n\\t\\tbreak;\\n\\tcase SWFACTION_SHIFTRIGHT:\\n\\t\\tif (precedence(op_l, op_r))\\n\\t\\t\\tpush(newVar3(getString(left),\\\">>\\\",getString(right)));\\n\\t\\telse\\n\\t\\t\\tpush(newVar_N(\\\"(\\\",getString(left),\\\">>\\\",getString(right),0,\\\")\\\"));\\n\\t\\tbreak;\\n\\tcase SWFACTION_SHIFTRIGHT2:\\n\\t\\tif (precedence(op_l, op_r))\\n\\t\\t\\tpush(newVar3(getString(left),\\\">>>\\\",getString(right)));\\n\\t\\telse\\n\\t\\t\\tpush(newVar_N(\\\"(\\\",getString(left),\\\">>>\\\",getString(right),0,\\\")\\\"));\\n\\t\\tbreak;\\n\\tcase SWFACTION_LOGICALAND:\\n\\t\\tif (precedence(op_l, op_r))\\n\\t\\t\\tpush(newVar3(getString(left),\\\"&&\\\",getString(right)));\\n\\t\\telse\\n\\t\\t\\tpush(newVar_N(\\\"(\\\",getString(left),\\\"&&\\\",getString(right),0,\\\")\\\"));\\n\\t\\tbreak;\\n\\tcase SWFACTION_LOGICALOR:\\n\\t\\tif (precedence(op_l, op_r))\\n\\t\\t\\tpush(newVar3(getString(left),\\\"||\\\",getString(right)));\\n\\t\\telse\\n\\t\\t\\tpush(newVar_N(\\\"(\\\",getString(left),\\\"||\\\",getString(right),0,\\\")\\\"));\\n\\t\\tbreak;\\n\\tcase SWFACTION_BITWISEAND:\\n\\t\\tif (precedence(op_l, op_r))\\n\\t\\t\\tpush(newVar3(getString(left),\\\"&\\\",getString(right)));\\n\\t\\telse\\n\\t\\t\\tpush(newVar_N(\\\"(\\\",getString(left),\\\"&\\\",getString(right),0,\\\")\\\"));\\n\\t\\tbreak;\\n\\tcase SWFACTION_BITWISEOR:\\n\\t\\tif (precedence(op_l, op_r))\\n\\t\\t\\tpush(newVar3(getString(left),\\\"|\\\",getString(right)));\\n\\t\\telse\\n\\t\\t\\tpush(newVar_N(\\\"(\\\",getString(left),\\\"|\\\",getString(right),0,\\\")\\\"));\\n\\t\\tbreak;\\n\\tcase SWFACTION_BITWISEXOR:\\n\\t\\tif (precedence(op_l, op_r))\\n\\t\\t\\tpush(newVar3(getString(left),\\\"^\\\",getString(right)));\\n\\t\\telse\\n\\t\\t\\tpush(newVar_N(\\\"(\\\",getString(left),\\\"^\\\",getString(right),0,\\\")\\\"));\\n\\t\\tbreak;\\n\\tcase SWFACTION_EQUALS2:\\t/* including negation */\\n\\tcase SWFACTION_EQUAL:\\n\\t\\tif( OpCode(actions, n+1, maxn) == SWFACTION_LOGICALNOT &&\\n\\t\\t    OpCode(actions, n+2, maxn) != SWFACTION_IF)\\n\\t\\t{\\n\\t\\t\\top_r = OpCode(actions, n+1, maxn);\\n\\t\\t\\tif (precedence(op_l, op_r))\\n\\t\\t\\t\\tpush(newVar3(getString(left),\\\"!=\\\",getString(right)));\\n\\t\\t\\telse\\n\\t\\t\\t\\tpush(newVar_N(\\\"(\\\",getString(left),\\\"!=\\\",getString(right),0,\\\")\\\"));\\n\\t\\t\\treturn 1; /* due negation op */\\n\\t\\t}\\n\\t\\tif (precedence(op_l, op_r))\\n\\t\\t\\tpush(newVar3(getString(left),\\\"==\\\",getString(right)));\\n\\t\\telse\\n\\t\\t\\tpush(newVar_N(\\\"(\\\",getString(left),\\\"==\\\",getString(right),0,\\\")\\\"));\\n\\t\\tbreak;\\n\\tcase SWFACTION_LESS2:\\n\\t\\tif( OpCode(actions, n+1, maxn)  == SWFACTION_LOGICALNOT &&\\n\\t\\t    OpCode(actions, n+2, maxn) != SWFACTION_IF ) \\n\\t\\t{\\n\\t\\t\\top_r = OpCode(actions, n+2, maxn);\\n\\t\\t\\tif (precedence(op_l, op_r))\\n\\t\\t\\t\\tpush(newVar3(getString(left),\\\">=\\\",getString(right)));\\n\\t\\t\\telse\\n\\t\\t\\t\\tpush(newVar_N(\\\"(\\\",getString(left),\\\">=\\\",getString(right),0,\\\")\\\"));\\n\\t\\t\\treturn 1; /* due negation op */\\n\\t\\t}\\n\\t\\tif (precedence(op_l, op_r))\\n\\t\\t\\tpush(newVar3(getString(left),\\\"<\\\",getString(right)));\\n\\t\\telse\\n\\t\\t\\tpush(newVar_N(\\\"(\\\",getString(left),\\\"<\\\",getString(right),0,\\\")\\\"));\\n\\t\\tbreak;\\n\\tcase SWFACTION_GREATER:\\n\\t\\tif (precedence(op_l, op_r))\\n\\t\\t\\tpush(newVar3(getString(left),\\\">\\\",getString(right)));\\n\\t\\telse\\n\\t\\t\\tpush(newVar_N(\\\"(\\\",getString(left),\\\">\\\",getString(right),0,\\\")\\\"));\\n\\t\\tbreak;\\n\\tcase SWFACTION_LESSTHAN:\\n\\t\\tif (precedence(op_l, op_r))\\n\\t\\t\\tpush(newVar3(getString(left),\\\"<\\\",getString(right)));\\n\\t\\telse\\n\\t\\t\\tpush(newVar_N(\\\"(\\\",getString(left),\\\"<\\\",getString(right),0,\\\")\\\"));\\n\\t\\tbreak;\\n\\tcase SWFACTION_STRINGEQ:\\n\\t\\tif (precedence(op_l, op_r))\\n\\t\\t\\tpush(newVar3(getString(left),\\\"==\\\",getString(right)));\\n\\t\\telse\\n\\t\\t\\tpush(newVar_N(\\\"(\\\",getString(left),\\\"==\\\",getString(right),0,\\\")\\\"));\\n\\t\\tbreak;\\n\\tcase SWFACTION_STRINGCOMPARE:\\n\\t\\tputs(\\\"STRINGCOMPARE\\\");\\n\\t\\tbreak;\\n\\tcase SWFACTION_STRICTEQUALS:\\n#ifdef DECOMP_SWITCH\\n\\t\\tif  (OpCode(actions, n, maxn) == SWFACTION_IF)\\n\\t\\t{\\n\\t\\t\\tint code = actions[n+1].SWF_ACTIONIF.Actions[0].SWF_ACTIONRECORD.ActionCode;\\n\\t\\t\\tif(check_switch(code))\\n\\t\\t\\t{\\n\\t\\t\\t\\tpush(right);\\t// keep left and right side separated\\n\\t\\t\\t\\tpush(left);\\t// because it seems we have found a switch(){} and\\n\\t\\t\\t\\tbreak;\\t// let decompileIF() once more do all the dirty work\\n\\t\\t\\t}\\n\\t\\t}\\n#endif\\n\\t\\tif( OpCode(actions, n+1, maxn) == SWFACTION_LOGICALNOT &&\\n\\t\\t    OpCode(actions, n+2, maxn) != SWFACTION_IF ) \\n\\t\\t{\\n\\t\\t\\top_r = OpCode(actions, n+2, maxn);\\n\\t\\t\\tif (precedence(op_l, op_r))\\n\\t\\t\\t\\tpush(newVar3(getString(left),\\\"!==\\\",getString(right)));\\n\\t\\t\\telse\\n\\t\\t\\t\\tpush(newVar_N(\\\"(\\\",getString(left),\\\"!==\\\",getString(right),0,\\\")\\\"));\\n\\t\\t\\treturn 1; /* due negation op */\\n\\t\\t} else {\\n\\t\\t\\tif (precedence(op_l, op_r))\\n\\t\\t\\t\\tpush(newVar3(getString(left),\\\"===\\\",getString(right)));\\n\\t\\t\\telse\\n\\t\\t\\t\\tpush(newVar_N(\\\"(\\\",getString(left),\\\"===\\\",getString(right),0,\\\")\\\"));\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\tdefault:\\n\\t\\tprintf(\\\"Unhandled Arithmetic/Logic OP %x\\\\n\\\",\\n\\t\\t\\tactions[n].SWF_ACTIONRECORD.ActionCode);\\n\\t}\\n\\treturn 0;\\n}\\n\",\n            \"caller_start\": 1000,\n            \"file_path\": \"util/decompile.c\"\n          }\n        ]\n      },\n      {\n        \"source\": \"caller_info(file:read.c, func:readBytes)\",\n        \"result\": [\n          {\n            \"call_line\": 1468,\n            \"call_code\": \"readBytes(f, length)\",\n            \"caller_code\": \"SWF_Parserstruct *\\nparseSWF_CHARACTERSET (FILE * f, int length)\\n{\\n  PAR_BEGIN (SWF_CHARACTERSET);\\n  SKIP;\\n  PAR_END;\\n}\",\n            \"caller_start\": 1464,\n            \"file_path\": \"util/parser.c\"\n          },\n          {\n            \"call_line\": 1480,\n            \"call_code\": \"readBytes(f,end-fileOffset)\",\n            \"caller_code\": \"SWF_Parserstruct *\\nparseSWF_DEFINEBITS (FILE * f, int length)\\n{\\n  int end = fileOffset + length;\\n  PAR_BEGIN (SWF_DEFINEBITS);\\n\\n  parserrec->CharacterID = readUInt16 (f);\\n  parserrec->JPEGDataSize = end-fileOffset;\\n  parserrec->JPEGData = (UI8 *)readBytes(f,end-fileOffset);\\n\\n  PAR_END;\\n}\",\n            \"caller_start\": 1472,\n            \"file_path\": \"util/parser.c\"\n          },\n          {\n            \"call_line\": 1493,\n            \"call_code\": \"readBytes(f,end-fileOffset)\",\n            \"caller_code\": \"SWF_Parserstruct *\\nparseSWF_DEFINEBITSJPEG2 (FILE * f, int length)\\n{\\n  int end = fileOffset + length;\\n  PAR_BEGIN (SWF_DEFINEBITSJPEG2);\\n\\n  parserrec->CharacterID = readUInt16 (f);\\n  parserrec->JPEGDataSize = end-fileOffset;\\n  parserrec->JPEGData = (UI8 *)readBytes(f,end-fileOffset);\\n\\n  PAR_END;\\n}\",\n            \"caller_start\": 1485,\n            \"file_path\": \"util/parser.c\"\n          },\n          {\n            \"call_line\": 1506,\n            \"call_code\": \"readBytes(f,parserrec->AlphaDataOffset)\",\n            \"caller_code\": \"SWF_Parserstruct *\\nparseSWF_DEFINEBITSJPEG3 (FILE * f, int length)\\n{\\n  int end = fileOffset + length;\\n  PAR_BEGIN (SWF_DEFINEBITSJPEG3);\\n\\n  parserrec->CharacterID = readUInt16 (f);\\n  parserrec->AlphaDataOffset = readUInt32 (f);\\n  parserrec->JPEGData = (UI8 *)readBytes(f,parserrec->AlphaDataOffset);\\n  parserrec->AlphaDataSize = end-fileOffset;\\n  parserrec->BitmapAlphaData = (UI8 *)readBytes(f,end-fileOffset);\\n\\n\\n  PAR_END;\\n}\",\n            \"caller_start\": 1498,\n            \"file_path\": \"util/parser.c\"\n          },\n          {\n            \"call_line\": 1508,\n            \"call_code\": \"readBytes(f,end-fileOffset)\",\n            \"caller_code\": \"SWF_Parserstruct *\\nparseSWF_DEFINEBITSJPEG3 (FILE * f, int length)\\n{\\n  int end = fileOffset + length;\\n  PAR_BEGIN (SWF_DEFINEBITSJPEG3);\\n\\n  parserrec->CharacterID = readUInt16 (f);\\n  parserrec->AlphaDataOffset = readUInt32 (f);\\n  parserrec->JPEGData = (UI8 *)readBytes(f,parserrec->AlphaDataOffset);\\n  parserrec->AlphaDataSize = end-fileOffset;\\n  parserrec->BitmapAlphaData = (UI8 *)readBytes(f,end-fileOffset);\\n\\n\\n  PAR_END;\\n}\",\n            \"caller_start\": 1498,\n            \"file_path\": \"util/parser.c\"\n          },\n          {\n            \"call_line\": 1518,\n            \"call_code\": \"readBytes(f, length)\",\n            \"caller_code\": \"SWF_Parserstruct *\\nparseSWF_DEFINEBITSPTR (FILE * f, int length)\\n{\\n  PAR_BEGIN (SWF_DEFINEBITSPTR);\\n  SKIP;\\n  PAR_END;\\n}\",\n            \"caller_start\": 1514,\n            \"file_path\": \"util/parser.c\"\n          },\n          {\n            \"call_line\": 1637,\n            \"call_code\": \"readBytes(f, length)\",\n            \"caller_code\": \"SWF_Parserstruct *\\nparseSWF_DEFINECOMMANDOBJ (FILE * f, int length)\\n{\\n  PAR_BEGIN (SWF_DEFINECOMMANDOBJ);\\n  SKIP;\\n  PAR_END;\\n}\",\n            \"caller_start\": 1633,\n            \"file_path\": \"util/parser.c\"\n          },\n          {\n            \"call_line\": 2150,\n            \"call_code\": \"readBytes (f,end-fileOffset)\",\n            \"caller_code\": \"SWF_Parserstruct *\\nparseSWF_DEFINELOSSLESS (FILE * f, int length)\\n{\\n  int end = fileOffset + length;\\n  PAR_BEGIN (SWF_DEFINELOSSLESS);\\n\\n  parserrec->CharacterID = readUInt16 (f);\\n  parserrec->BitmapFormat = readUInt8 (f);\\n  parserrec->BitmapWidth = readUInt16 (f);\\n  parserrec->BitmapHeight = readUInt16 (f);\\n  if( parserrec->BitmapFormat == 3 /* 8-bit */ ) {\\n      parserrec->BitmapColorTableSize = readUInt8 (f);\\n  }\\n  parserrec->ZlibBitmapData = (UI8 *)readBytes (f,end-fileOffset);\\n\\n  PAR_END;\\n}\",\n            \"caller_start\": 2137,\n            \"file_path\": \"util/parser.c\"\n          }\n        ]\n      }\n    ]\n  }\n]\n\n## INSTRUCTIONS\n1. **Review & Integrate Context** \n  Review all `history_summary` (*incl. past analysis and request results*) \n\n2. **Extend Chain from Code**  \n   Trace calls / data flow step-by-step, citing `file:line` for each fact.  \n   Where evidence ends, insert  \n   `GAP: <why evidence stops>`.\n\n3. **Request Missing Context**  \n   If any critical gap remains:  \n     * Always request context and set `\"need_context\": true`. \n     * Add precise, non-duplicate requests to `\"required_context\"` using the following types:  \n      `function`, `caller`, `e.g. caller: I need the caller of function X in file Y`.\n      **DO NOT** request the new patch code.\n     * Try alternative parameters or request types for gaps previously unfulfilled.  \n   If the chain is fully evidenced, set `\"need_context\": false`.\n\n4. **Score Confidence**  \n   *Full chain with direct evidence* ≥ 0.90.  Incomplete chain ≤ 0.75.\n\n## OUTPUT  (JSON only, no trailing commas)\n  ```json\n  {\n      \"analysis\": \"Summary of iteration progress, remaining gaps, explanation for new context requests (if any). If complete, summarize the full chain.\",\n      \"need_context\": true/false, \n      \"required_context\": \"<list of precise context requests>\" ,\n      \"root_cause\": \"<Partial/complete trace with file:line evidence from ALL available context>\",\n      \"confidence_score\": 0.0-1.0\n      // attack_vectors added when confidence >= 0.90 AND need_context is False\n  }\n  ```\n  ## RULES\n  * Output must be valid JSON.\n  * **Source-of-Truth** – Only accept facts visible in code (file:line). Commit message & description are auxiliary.\n  * **Reject every hypothesis or inference** - When evidence is missing, always declare a GAP and request the needed context.\n  * **Tool Restriction** – `required_context` items **must** be of type `function` or `caller` only.\n  * **Stop Condition** – Terminate only when the trigger chain is fully evidenced from the patch; else continue requesting context.\n",
            "result": {
                "analysis": "The root cause is identified as missing validation in OpCode for n < 1, leading to potential stack reads. The trigger chain is partially evidenced but lacks parameter source details. The readBytes fix prevents negative size reads. However, the origin of 'n' and 'size' parameters in callers remains untraced, requiring additional context.",
                "need_context": true,
                "required_context": [
                    "caller: util/decompile.c::isStoreOp",
                    "caller: util/decompile.c::decompileGOTOFRAME",
                    "caller: util/decompile.c::decompileGOTOFRAME2",
                    "caller: util/decompile.c::decompileArithmeticOp"
                ],
                "root_cause": "In decompile.c:865-871, OpCode accesses actions[n] without validating n < 1. If n is derived from untrusted SWF action data (e.g., via decompileGOTOFRAME:894), a crafted file could set n < 1, causing actions[n] to read invalid stack memory. The patch adds a check for n < 1 (return -998) to prevent this. In read.c:228-236, negative size values for readBytes could lead to undersized buffer allocation; the patch clamps size to 0. GAP: Parameters 'n' and 'size' sources in callers are not visible in current context.",
                "confidence_score": 0.75
            },
            "timestamp": "2025-05-26T15:21:15.793221"
        },
        {
            "stage": "collection",
            "required_context": [
                "caller: util/decompile.c::isStoreOp",
                "caller: util/decompile.c::decompileGOTOFRAME",
                "caller: util/decompile.c::decompileGOTOFRAME2",
                "caller: util/decompile.c::decompileArithmeticOp"
            ],
            "results": [
                {
                    "tool": "caller_info.find_caller_for_func_file({'file_path': 'util/decompile.c', 'func_name': 'isStoreOp', 'project_dir': './storage/result/Part2_result/github/CVE-2017-11728/old_repos/libming-libming_4e35b4b'})",
                    "result": [
                        {
                            "type": "caller_info",
                            "call_line": 2687,
                            "call_code": "isStoreOp(n+1, actions,maxn)",
                            "caller_code": "static int\ndecompileDEFINEFUNCTION(int n, SWF_ACTION *actions, int maxn, int is_type2)\n{\n\tint i,j,k,m,r;\n\tstruct SWF_ACTIONPUSHPARAM *myregs[ 256 ];\n\tstruct _stack *StackSave;    \n\tstruct SWF_ACTIONDEFINEFUNCTION2 *sactv2;\n\tstruct strbufinfo origbuf;\n\tOUT_BEGIN2(SWF_ACTIONDEFINEFUNCTION);\n\tsactv2 = (struct SWF_ACTIONDEFINEFUNCTION2*)sact;\n\n#ifdef DEBUG\n\tif(n+1 < maxn)\n\t{\n\t\tprintln(\"/* function followed by OP %x */\", \n\t\t        OpCode(actions, n+1, maxn));\n\t}\n#endif\n#if USE_LIB\n\tif (isStoreOp(n+1, actions,maxn) \n\t    || (  *sact->FunctionName==0 && !is_type2 )\n\t    || (*sactv2->FunctionName==0 && is_type2  ))\n\t{\n\t\torigbuf=setTempString();\t/* switch to a temporary string buffer */\n\t}\n#endif\n\tputs(\"function \");\n\tif (is_type2)\n\t{\n\t\tfor(j=1;j<sactv2->RegisterCount;j++) \n\t\t{\n\t\t\tmyregs[j]=regs[j];\n\t\t\tregs[j]=NULL;\n\t\t}\n\t\tr=1;\n\t\tif (sactv2->PreloadThisFlag)\tregs[r++]=newVar(\"this\");\n\t\tif (sactv2->PreloadArgumentsFlag)\tregs[r++]=newVar(\"arguments\");\n\t\tif (sactv2->PreloadSuperFlag)\tregs[r++]=newVar(\"super\");\n\t\tif (sactv2->PreloadRootFlag)\tregs[r++]=newVar(\"root\");\n\t\tif (sactv2->PreloadParentFlag)\tregs[r++]=newVar(\"parent\");\n\t\tif (sactv2->PreloadGlobalFlag)\tregs[r++]=newVar(\"global\");\n\n\t\tputs(sactv2->FunctionName);\n\t\tputs(\"(\");\n\n\t\tfor(i=0,m=0;i<sactv2->NumParams;i++) \n\t\t{\n\t\t\tputs(sactv2->Params[i].ParamName);\n\t\t\tif ( sactv2->Params[i].Register)\n\t\t\t{\n\t\t\t\t printf(\" /*=R%d*/ \",sactv2->Params[i].Register);\n\t\t\t\t regs[sactv2->Params[i].Register] = newVar(sactv2->Params[i].ParamName);\n\t\t\t\t m++;\t\t\t\t\t// do not count 'void' etc\n\t\t\t}\n\t\t\tif( sactv2->NumParams > i+1 ) puts(\",\");\n\t\t}\n\t\tprintln(\") {\" );\n\t\tif (r+m < sactv2->RegisterCount)\n\t\t{\n\t\t\tINDENT\n\t\t\tputs(\"  var \");\n\t\t}\n\t\tfor(k=r;r<sactv2->RegisterCount;r++)\n\t\t{\n\t\t\tif (!regs[r])\n\t\t\t{\n\t\t\t\tchar *t=malloc(5); /* Rddd */\n\t\t\t\tsprintf(t,\"R%d\", r );\n\t\t\t\tputs (t);\n\t\t\t\tif (k++ < sactv2->RegisterCount- m -1)\n\t\t\t\t\tputs(\", \");\n\t\t\t\telse\n\t\t\t\t\tprintln(\";\" );\n\t\t\t\tregs[r]=newVar(t);\n\t\t\t}\n\t\t}\n\t\tStackSave=Stack;\n\t\tdecompileActions(sactv2->numActions, sactv2->Actions,gIndent+1);\n#ifdef DEBUG\n\t\tif (Stack!=StackSave)\n\t\t{\n\t\t\tprintln(\"/* Stack problem in function code above */\");\n\t\t}\n#endif\n\t\tStack=StackSave;\n\t\tfor(j=1;j<sactv2->RegisterCount;j++) \n\t\t\tregs[j]=myregs[j];\n\t}\n\telse\n\t{\n\t\tputs(sact->FunctionName);\n\t\tputs(\"(\");\n\t\tfor(i=0;i<sact->NumParams;i++) {\n\t\t\tputs(sact->Params[i]);\n\t\t\tif( sact->NumParams > i+1 ) puts(\",\");\n\t\t}\n\t\tprintln(\") {\" );\n\t\tk=0;\n\t\tif (sact->Actions[0].SWF_ACTIONRECORD.ActionCode == SWFACTION_PUSH)\n\t\t{\n\t\t\tstruct SWF_ACTIONPUSH *sactPush=(struct SWF_ACTIONPUSH *)sact->Actions;\n\t\t\tfor(i=0;i<sactPush->NumParam;i++)\n\t\t\t{\n\t\t\t\tif ((&(sactPush->Params[i]))->Type == PUSH_REGISTER) \n\t\t\t\t\tk++;\t/* REGISTER */\n\t\t\t}\n\t\t\tif (k)\n\t\t\t{\n\t\t\t\tINDENT\n\t\t\t\tputs(\"  var \");\n\t\t\t\tfor(i=1;i<=k;i++)\n\t\t\t\t{\n\t\t\t\t\tchar *t=malloc(5); /* Rddd */\n\t\t\t\t\tsprintf(t,\"R%d\", i );\n\t\t\t\t\tputs (t);\n\t\t\t\t\tif (i < k)\n\t\t\t\t\t\tputs(\", \");\n\t\t\t\t\telse\n\t\t\t\t\t\tprintln(\";\" );\n\t\t\t\t\tregs[i]=newVar(t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor(j=1;j<=k;j++) \n\t\t\tmyregs[j]=regs[j];\n\t\tStackSave=Stack;\n\t\tdecompileActions(sact->numActions, sact->Actions,gIndent+1);\n#ifdef DEBUG\n\t\tif (Stack!=StackSave)\n\t\t{\n\t\t\tprintln(\"/* Stack problem in function code above */\");\n\t\t}\n#endif\n\t\tStack=StackSave;\n\t\tfor(j=1;j<=k;j++) \n\t\t\tregs[j]=myregs[j];\n\t}\n\tINDENT\n\tif (isStoreOp(n+1, actions,maxn) \n\t    || ( *sact->FunctionName==0 && !is_type2 )\n\t    || (*sactv2->FunctionName==0 && is_type2 ))\n\t{\n\t\tputs(\"}\");\n#if USE_LIB\n\t\tpush (newVar(dcgetstr()));\t/* push func body for later assignment */\n\t\tsetOrigString(origbuf);\t\t/* switch back to orig buffer */\n#else\n\t\tpush (newVar(\"/* see function code above */\"));\t/* workaround only if LIB is not in use */\n#endif\n\t}\n\telse\n\t\tprintln(\"}\" );\n\treturn 0;\n}\n",
                            "caller_start": 2668,
                            "file_path": "util/decompile.c"
                        },
                        {
                            "type": "caller_info",
                            "call_line": 2806,
                            "call_code": "isStoreOp(n+1, actions,maxn)",
                            "caller_code": "static int\ndecompileDEFINEFUNCTION(int n, SWF_ACTION *actions, int maxn, int is_type2)\n{\n\tint i,j,k,m,r;\n\tstruct SWF_ACTIONPUSHPARAM *myregs[ 256 ];\n\tstruct _stack *StackSave;    \n\tstruct SWF_ACTIONDEFINEFUNCTION2 *sactv2;\n\tstruct strbufinfo origbuf;\n\tOUT_BEGIN2(SWF_ACTIONDEFINEFUNCTION);\n\tsactv2 = (struct SWF_ACTIONDEFINEFUNCTION2*)sact;\n\n#ifdef DEBUG\n\tif(n+1 < maxn)\n\t{\n\t\tprintln(\"/* function followed by OP %x */\", \n\t\t        OpCode(actions, n+1, maxn));\n\t}\n#endif\n#if USE_LIB\n\tif (isStoreOp(n+1, actions,maxn) \n\t    || (  *sact->FunctionName==0 && !is_type2 )\n\t    || (*sactv2->FunctionName==0 && is_type2  ))\n\t{\n\t\torigbuf=setTempString();\t/* switch to a temporary string buffer */\n\t}\n#endif\n\tputs(\"function \");\n\tif (is_type2)\n\t{\n\t\tfor(j=1;j<sactv2->RegisterCount;j++) \n\t\t{\n\t\t\tmyregs[j]=regs[j];\n\t\t\tregs[j]=NULL;\n\t\t}\n\t\tr=1;\n\t\tif (sactv2->PreloadThisFlag)\tregs[r++]=newVar(\"this\");\n\t\tif (sactv2->PreloadArgumentsFlag)\tregs[r++]=newVar(\"arguments\");\n\t\tif (sactv2->PreloadSuperFlag)\tregs[r++]=newVar(\"super\");\n\t\tif (sactv2->PreloadRootFlag)\tregs[r++]=newVar(\"root\");\n\t\tif (sactv2->PreloadParentFlag)\tregs[r++]=newVar(\"parent\");\n\t\tif (sactv2->PreloadGlobalFlag)\tregs[r++]=newVar(\"global\");\n\n\t\tputs(sactv2->FunctionName);\n\t\tputs(\"(\");\n\n\t\tfor(i=0,m=0;i<sactv2->NumParams;i++) \n\t\t{\n\t\t\tputs(sactv2->Params[i].ParamName);\n\t\t\tif ( sactv2->Params[i].Register)\n\t\t\t{\n\t\t\t\t printf(\" /*=R%d*/ \",sactv2->Params[i].Register);\n\t\t\t\t regs[sactv2->Params[i].Register] = newVar(sactv2->Params[i].ParamName);\n\t\t\t\t m++;\t\t\t\t\t// do not count 'void' etc\n\t\t\t}\n\t\t\tif( sactv2->NumParams > i+1 ) puts(\",\");\n\t\t}\n\t\tprintln(\") {\" );\n\t\tif (r+m < sactv2->RegisterCount)\n\t\t{\n\t\t\tINDENT\n\t\t\tputs(\"  var \");\n\t\t}\n\t\tfor(k=r;r<sactv2->RegisterCount;r++)\n\t\t{\n\t\t\tif (!regs[r])\n\t\t\t{\n\t\t\t\tchar *t=malloc(5); /* Rddd */\n\t\t\t\tsprintf(t,\"R%d\", r );\n\t\t\t\tputs (t);\n\t\t\t\tif (k++ < sactv2->RegisterCount- m -1)\n\t\t\t\t\tputs(\", \");\n\t\t\t\telse\n\t\t\t\t\tprintln(\";\" );\n\t\t\t\tregs[r]=newVar(t);\n\t\t\t}\n\t\t}\n\t\tStackSave=Stack;\n\t\tdecompileActions(sactv2->numActions, sactv2->Actions,gIndent+1);\n#ifdef DEBUG\n\t\tif (Stack!=StackSave)\n\t\t{\n\t\t\tprintln(\"/* Stack problem in function code above */\");\n\t\t}\n#endif\n\t\tStack=StackSave;\n\t\tfor(j=1;j<sactv2->RegisterCount;j++) \n\t\t\tregs[j]=myregs[j];\n\t}\n\telse\n\t{\n\t\tputs(sact->FunctionName);\n\t\tputs(\"(\");\n\t\tfor(i=0;i<sact->NumParams;i++) {\n\t\t\tputs(sact->Params[i]);\n\t\t\tif( sact->NumParams > i+1 ) puts(\",\");\n\t\t}\n\t\tprintln(\") {\" );\n\t\tk=0;\n\t\tif (sact->Actions[0].SWF_ACTIONRECORD.ActionCode == SWFACTION_PUSH)\n\t\t{\n\t\t\tstruct SWF_ACTIONPUSH *sactPush=(struct SWF_ACTIONPUSH *)sact->Actions;\n\t\t\tfor(i=0;i<sactPush->NumParam;i++)\n\t\t\t{\n\t\t\t\tif ((&(sactPush->Params[i]))->Type == PUSH_REGISTER) \n\t\t\t\t\tk++;\t/* REGISTER */\n\t\t\t}\n\t\t\tif (k)\n\t\t\t{\n\t\t\t\tINDENT\n\t\t\t\tputs(\"  var \");\n\t\t\t\tfor(i=1;i<=k;i++)\n\t\t\t\t{\n\t\t\t\t\tchar *t=malloc(5); /* Rddd */\n\t\t\t\t\tsprintf(t,\"R%d\", i );\n\t\t\t\t\tputs (t);\n\t\t\t\t\tif (i < k)\n\t\t\t\t\t\tputs(\", \");\n\t\t\t\t\telse\n\t\t\t\t\t\tprintln(\";\" );\n\t\t\t\t\tregs[i]=newVar(t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor(j=1;j<=k;j++) \n\t\t\tmyregs[j]=regs[j];\n\t\tStackSave=Stack;\n\t\tdecompileActions(sact->numActions, sact->Actions,gIndent+1);\n#ifdef DEBUG\n\t\tif (Stack!=StackSave)\n\t\t{\n\t\t\tprintln(\"/* Stack problem in function code above */\");\n\t\t}\n#endif\n\t\tStack=StackSave;\n\t\tfor(j=1;j<=k;j++) \n\t\t\tregs[j]=myregs[j];\n\t}\n\tINDENT\n\tif (isStoreOp(n+1, actions,maxn) \n\t    || ( *sact->FunctionName==0 && !is_type2 )\n\t    || (*sactv2->FunctionName==0 && is_type2 ))\n\t{\n\t\tputs(\"}\");\n#if USE_LIB\n\t\tpush (newVar(dcgetstr()));\t/* push func body for later assignment */\n\t\tsetOrigString(origbuf);\t\t/* switch back to orig buffer */\n#else\n\t\tpush (newVar(\"/* see function code above */\"));\t/* workaround only if LIB is not in use */\n#endif\n\t}\n\telse\n\t\tprintln(\"}\" );\n\treturn 0;\n}\n",
                            "caller_start": 2668,
                            "file_path": "util/decompile.c"
                        }
                    ]
                },
                {
                    "tool": "caller_info.find_caller_for_func_file({'file_path': 'util/decompile.c', 'func_name': 'decompileGOTOFRAME', 'project_dir': './storage/result/Part2_result/github/CVE-2017-11728/old_repos/libming-libming_4e35b4b'})",
                    "result": [
                        {
                            "type": "caller_info",
                            "call_line": 3135,
                            "call_code": "decompileGOTOFRAME(n, actions, maxn,1)",
                            "caller_code": "int\ndecompileAction(int n, SWF_ACTION *actions, int maxn)\n{\n\tif( n > maxn ) SWF_error(\"Action overflow!!\");\n\n#ifdef DEBUG\n\tfprintf(stderr,\"%d:\\tACTION[%3.3d]: %s\\n\",\n\t        actions[n].SWF_ACTIONRECORD.Offset, n, \n\t        actionName(actions[n].SWF_ACTIONRECORD.ActionCode));\n#endif\n\n\tswitch(actions[n].SWF_ACTIONRECORD.ActionCode)\n\t{\n\tcase SWFACTION_END:\n\t\treturn 0;\n\n\tcase SWFACTION_CONSTANTPOOL:\n\t\tdecompileCONSTANTPOOL(&actions[n]);\n\t\treturn 0;\n\n\tcase SWFACTION_GOTOLABEL:\n\t\treturn decompileGOTOFRAME(n, actions, maxn,1);\n\n\tcase SWFACTION_GOTOFRAME:\n\t\treturn decompileGOTOFRAME(n, actions, maxn,0);\n\n\tcase SWFACTION_GOTOFRAME2:\n\t\treturn decompileGOTOFRAME2(n, actions, maxn);\n\n\tcase SWFACTION_WAITFORFRAME:\n\t\tdecompileWAITFORFRAME(&actions[n]);\n\t\treturn 0;\n\n\tcase SWFACTION_GETURL2:\n\t\tdecompileGETURL2(&actions[n]);\n\t\treturn 0;\n\n\tcase SWFACTION_GETURL:\n\t\tdecompileGETURL(&actions[n]);\n\t\treturn 0;\n\n\tcase SWFACTION_PUSH:\n\t\tdecompilePUSH(&actions[n]);\n\t\treturn 0;\n\n\tcase SWFACTION_PUSHDUP:\n\t\tdecompilePUSHDUP(&actions[n]);\n\t\treturn 0;\n\n\tcase SWFACTION_STACKSWAP:\n\t\tdecompileSTACKSWAP(&actions[n]);\t\n\t\treturn 0;\n\n\tcase SWFACTION_SETPROPERTY:\n\t\tdecompileSETPROPERTY(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_GETPROPERTY:\n\t\tdecompileGETPROPERTY(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_GETTIME:\n\t\treturn decompileGETTIME(n, actions, maxn);\n\n\tcase SWFACTION_TRACE:\n\t\tdecompileTRACE(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_CALLFRAME:\n\t\tdecompileCALLFRAME(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_EXTENDS:\n\t\tdecompileEXTENDS(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_INITOBJECT:\n\t\tdecompileINITOBJECT(n, actions, maxn);\n\t\treturn 0;\t        \n\n\tcase SWFACTION_NEWOBJECT:\n\t\tdecompileNEWOBJECT(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_NEWMETHOD:\n\t\tdecompileNEWMETHOD(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_GETMEMBER:\n\t\tdecompileGETMEMBER(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_SETMEMBER:\n\t\tdecompileSETMEMBER(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_GETVARIABLE:\n\t\tdecompileGETVARIABLE(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_SETVARIABLE:\n\t\tdecompileSETVARIABLE(n, actions, maxn, 0);\n\t\treturn 0;\n\n\tcase SWFACTION_DEFINELOCAL:\n\t\tdecompileSETVARIABLE(n, actions, maxn, 1);\n\t\treturn 0;\n\n\tcase SWFACTION_DEFINELOCAL2:\n\t\tdecompileDEFINELOCAL2(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_DECREMENT:\n\t\treturn decompileINCR_DECR(n, actions, maxn, 0);\n\n\tcase SWFACTION_INCREMENT:\n\t\treturn decompileINCR_DECR(n, actions, maxn,1);\n\n\tcase SWFACTION_STOREREGISTER:\n\t\tdecompileSTOREREGISTER(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_JUMP:\n\t\treturn decompileJUMP(n, actions, maxn);\n\n\tcase SWFACTION_RETURN:\n\t\tdecompileRETURN(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_LOGICALNOT:\n\t\treturn decompileLogicalNot(n, actions, maxn);\n\n\tcase SWFACTION_IF:\n\t\treturn decompileIF(n, actions, maxn);\n\n\tcase SWFACTION_WITH:\n\t\tdecompileWITH(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_ENUMERATE:\n\t\treturn decompileENUMERATE(n, actions, maxn, 0);\n\n\tcase SWFACTION_ENUMERATE2 :\n\t\treturn decompileENUMERATE(n, actions, maxn,1);\n\n\tcase SWFACTION_INITARRAY:\n\t\treturn decompileINITARRAY(n, actions, maxn);\n\n\tcase SWFACTION_DEFINEFUNCTION:\t\n\t\treturn decompileDEFINEFUNCTION(n, actions, maxn,0);\n\n\tcase SWFACTION_DEFINEFUNCTION2:\n\t\treturn decompileDEFINEFUNCTION(n, actions, maxn,1);\n\n\tcase SWFACTION_CALLFUNCTION:\n\t\treturn decompileCALLFUNCTION(n, actions, maxn);\n\n\tcase SWFACTION_CALLMETHOD:\n\t\treturn decompileCALLMETHOD(n, actions, maxn);\n\n\tcase SWFACTION_INSTANCEOF:\n\tcase SWFACTION_SHIFTLEFT:\n\tcase SWFACTION_SHIFTRIGHT:\n\tcase SWFACTION_SHIFTRIGHT2:        \n\tcase SWFACTION_ADD:\n\tcase SWFACTION_ADD2:\n\tcase SWFACTION_SUBTRACT:\n\tcase SWFACTION_MULTIPLY:\n\tcase SWFACTION_DIVIDE:\n\tcase SWFACTION_MODULO:\n\tcase SWFACTION_BITWISEAND:\n\tcase SWFACTION_BITWISEOR:\n\tcase SWFACTION_BITWISEXOR:\n\tcase SWFACTION_EQUAL:\n\tcase SWFACTION_EQUALS2:\n\tcase SWFACTION_LESS2:\n\tcase SWFACTION_LOGICALAND:\n\tcase SWFACTION_LOGICALOR:\n\tcase SWFACTION_GREATER:\n\tcase SWFACTION_LESSTHAN:\n\tcase SWFACTION_STRINGEQ:\n\tcase SWFACTION_STRINGCOMPARE:\n\tcase SWFACTION_STRICTEQUALS:\n\t\treturn decompileArithmeticOp(n, actions, maxn);\n\n\tcase SWFACTION_POP:\n\t\tpop();\n\t\treturn 0;\n\n\tcase SWFACTION_STARTDRAG:\n\t\treturn decompileSTARTDRAG(n, actions, maxn);\n\n\tcase SWFACTION_DELETE:\n\t\treturn decompileDELETE(n, actions, maxn,0);\n\n\tcase SWFACTION_DELETE2:\n\t\treturn decompileDELETE(n, actions, maxn,1);\n\n\tcase SWFACTION_TARGETPATH:\n\t\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\"targetPath\");\n\n\tcase SWFACTION_TYPEOF:\n\t\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\"typeof\");\n\n\tcase SWFACTION_ORD:\n\t\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\"ord\");\n\n\tcase SWFACTION_CHR:\n\t\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\"chr\");\n\n\tcase SWFACTION_INT:\n\t\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\"int\");\n\n\tcase SWFACTION_TOSTRING:\n\t\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\"String\");     \n\n\tcase SWFACTION_TONUMBER:\n\t\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\"Number\");\n\n\tcase SWFACTION_RANDOMNUMBER:\n\t\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\"random\");\n\n\tcase SWFACTION_STRINGLENGTH:\n\t\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\"length\");\n\n\tcase SWFACTION_PLAY:\n\t\treturn decompile_Null_ArgBuiltInFunctionCall(n, actions, maxn,\"play\");\n\n\tcase SWFACTION_STOP:\n\t\treturn decompile_Null_ArgBuiltInFunctionCall(n, actions, maxn,\"stop\");\n\n\tcase SWFACTION_NEXTFRAME:\n\t\treturn decompile_Null_ArgBuiltInFunctionCall(n, actions, maxn,\"nextFrame\");\n\n\tcase SWFACTION_PREVFRAME:\n\t\treturn decompile_Null_ArgBuiltInFunctionCall(n, actions, maxn,\"prevFrame\");\n\n\tcase SWFACTION_ENDDRAG:\n\t\treturn decompile_Null_ArgBuiltInFunctionCall(n, actions, maxn,\"stopDrag\");\n\n\tcase SWFACTION_STOPSOUNDS:\n\t\treturn decompile_Null_ArgBuiltInFunctionCall(n, actions, maxn,\"stopAllSounds\");   \n\n\tcase SWFACTION_TOGGLEQUALITY:\n\t\treturn decompile_Null_ArgBuiltInFunctionCall(n, actions, maxn,\"toggleHighQuality\");      \n\n\tcase SWFACTION_MBSUBSTRING:\n\tcase SWFACTION_SUBSTRING:\n\t\treturn decompileSUBSTRING(n, actions, maxn);\n\n\tcase SWFACTION_STRINGCONCAT:\n\t\treturn decompileSTRINGCONCAT(n, actions, maxn);\n\n\tcase SWFACTION_REMOVECLIP:\n\t\treturn decompileREMOVECLIP(n, actions, maxn);\n\n\tcase SWFACTION_DUPLICATECLIP:\n\t\treturn decompileDUPLICATECLIP(n, actions, maxn);\n\n\tcase SWFACTION_SETTARGET:\n\t\treturn decompileSETTARGET(n, actions, maxn,0);\n\n\tcase SWFACTION_SETTARGET2:\n\t\treturn decompileSETTARGET(n, actions, maxn,1);\n\n\tcase SWFACTION_IMPLEMENTSOP:\n\t\treturn decompileIMPLEMENTS(n, actions, maxn);\n\n\tcase SWFACTION_CASTOP:\n\t\treturn decompileCAST(n, actions, maxn);\n\n\tcase SWFACTION_THROW:\n\t\treturn decompileTHROW(n, actions, maxn);\n\n\tcase SWFACTION_TRY:\n\t\treturn decompileTRY(n, actions, maxn);\n\n\tdefault:\n\t\toutputSWF_ACTION(n,&actions[n]);\n\t\treturn 0;\n\t}\n}\n",
                            "caller_start": 3114,
                            "file_path": "util/decompile.c"
                        },
                        {
                            "type": "caller_info",
                            "call_line": 3138,
                            "call_code": "decompileGOTOFRAME(n, actions, maxn,0)",
                            "caller_code": "int\ndecompileAction(int n, SWF_ACTION *actions, int maxn)\n{\n\tif( n > maxn ) SWF_error(\"Action overflow!!\");\n\n#ifdef DEBUG\n\tfprintf(stderr,\"%d:\\tACTION[%3.3d]: %s\\n\",\n\t        actions[n].SWF_ACTIONRECORD.Offset, n, \n\t        actionName(actions[n].SWF_ACTIONRECORD.ActionCode));\n#endif\n\n\tswitch(actions[n].SWF_ACTIONRECORD.ActionCode)\n\t{\n\tcase SWFACTION_END:\n\t\treturn 0;\n\n\tcase SWFACTION_CONSTANTPOOL:\n\t\tdecompileCONSTANTPOOL(&actions[n]);\n\t\treturn 0;\n\n\tcase SWFACTION_GOTOLABEL:\n\t\treturn decompileGOTOFRAME(n, actions, maxn,1);\n\n\tcase SWFACTION_GOTOFRAME:\n\t\treturn decompileGOTOFRAME(n, actions, maxn,0);\n\n\tcase SWFACTION_GOTOFRAME2:\n\t\treturn decompileGOTOFRAME2(n, actions, maxn);\n\n\tcase SWFACTION_WAITFORFRAME:\n\t\tdecompileWAITFORFRAME(&actions[n]);\n\t\treturn 0;\n\n\tcase SWFACTION_GETURL2:\n\t\tdecompileGETURL2(&actions[n]);\n\t\treturn 0;\n\n\tcase SWFACTION_GETURL:\n\t\tdecompileGETURL(&actions[n]);\n\t\treturn 0;\n\n\tcase SWFACTION_PUSH:\n\t\tdecompilePUSH(&actions[n]);\n\t\treturn 0;\n\n\tcase SWFACTION_PUSHDUP:\n\t\tdecompilePUSHDUP(&actions[n]);\n\t\treturn 0;\n\n\tcase SWFACTION_STACKSWAP:\n\t\tdecompileSTACKSWAP(&actions[n]);\t\n\t\treturn 0;\n\n\tcase SWFACTION_SETPROPERTY:\n\t\tdecompileSETPROPERTY(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_GETPROPERTY:\n\t\tdecompileGETPROPERTY(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_GETTIME:\n\t\treturn decompileGETTIME(n, actions, maxn);\n\n\tcase SWFACTION_TRACE:\n\t\tdecompileTRACE(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_CALLFRAME:\n\t\tdecompileCALLFRAME(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_EXTENDS:\n\t\tdecompileEXTENDS(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_INITOBJECT:\n\t\tdecompileINITOBJECT(n, actions, maxn);\n\t\treturn 0;\t        \n\n\tcase SWFACTION_NEWOBJECT:\n\t\tdecompileNEWOBJECT(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_NEWMETHOD:\n\t\tdecompileNEWMETHOD(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_GETMEMBER:\n\t\tdecompileGETMEMBER(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_SETMEMBER:\n\t\tdecompileSETMEMBER(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_GETVARIABLE:\n\t\tdecompileGETVARIABLE(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_SETVARIABLE:\n\t\tdecompileSETVARIABLE(n, actions, maxn, 0);\n\t\treturn 0;\n\n\tcase SWFACTION_DEFINELOCAL:\n\t\tdecompileSETVARIABLE(n, actions, maxn, 1);\n\t\treturn 0;\n\n\tcase SWFACTION_DEFINELOCAL2:\n\t\tdecompileDEFINELOCAL2(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_DECREMENT:\n\t\treturn decompileINCR_DECR(n, actions, maxn, 0);\n\n\tcase SWFACTION_INCREMENT:\n\t\treturn decompileINCR_DECR(n, actions, maxn,1);\n\n\tcase SWFACTION_STOREREGISTER:\n\t\tdecompileSTOREREGISTER(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_JUMP:\n\t\treturn decompileJUMP(n, actions, maxn);\n\n\tcase SWFACTION_RETURN:\n\t\tdecompileRETURN(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_LOGICALNOT:\n\t\treturn decompileLogicalNot(n, actions, maxn);\n\n\tcase SWFACTION_IF:\n\t\treturn decompileIF(n, actions, maxn);\n\n\tcase SWFACTION_WITH:\n\t\tdecompileWITH(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_ENUMERATE:\n\t\treturn decompileENUMERATE(n, actions, maxn, 0);\n\n\tcase SWFACTION_ENUMERATE2 :\n\t\treturn decompileENUMERATE(n, actions, maxn,1);\n\n\tcase SWFACTION_INITARRAY:\n\t\treturn decompileINITARRAY(n, actions, maxn);\n\n\tcase SWFACTION_DEFINEFUNCTION:\t\n\t\treturn decompileDEFINEFUNCTION(n, actions, maxn,0);\n\n\tcase SWFACTION_DEFINEFUNCTION2:\n\t\treturn decompileDEFINEFUNCTION(n, actions, maxn,1);\n\n\tcase SWFACTION_CALLFUNCTION:\n\t\treturn decompileCALLFUNCTION(n, actions, maxn);\n\n\tcase SWFACTION_CALLMETHOD:\n\t\treturn decompileCALLMETHOD(n, actions, maxn);\n\n\tcase SWFACTION_INSTANCEOF:\n\tcase SWFACTION_SHIFTLEFT:\n\tcase SWFACTION_SHIFTRIGHT:\n\tcase SWFACTION_SHIFTRIGHT2:        \n\tcase SWFACTION_ADD:\n\tcase SWFACTION_ADD2:\n\tcase SWFACTION_SUBTRACT:\n\tcase SWFACTION_MULTIPLY:\n\tcase SWFACTION_DIVIDE:\n\tcase SWFACTION_MODULO:\n\tcase SWFACTION_BITWISEAND:\n\tcase SWFACTION_BITWISEOR:\n\tcase SWFACTION_BITWISEXOR:\n\tcase SWFACTION_EQUAL:\n\tcase SWFACTION_EQUALS2:\n\tcase SWFACTION_LESS2:\n\tcase SWFACTION_LOGICALAND:\n\tcase SWFACTION_LOGICALOR:\n\tcase SWFACTION_GREATER:\n\tcase SWFACTION_LESSTHAN:\n\tcase SWFACTION_STRINGEQ:\n\tcase SWFACTION_STRINGCOMPARE:\n\tcase SWFACTION_STRICTEQUALS:\n\t\treturn decompileArithmeticOp(n, actions, maxn);\n\n\tcase SWFACTION_POP:\n\t\tpop();\n\t\treturn 0;\n\n\tcase SWFACTION_STARTDRAG:\n\t\treturn decompileSTARTDRAG(n, actions, maxn);\n\n\tcase SWFACTION_DELETE:\n\t\treturn decompileDELETE(n, actions, maxn,0);\n\n\tcase SWFACTION_DELETE2:\n\t\treturn decompileDELETE(n, actions, maxn,1);\n\n\tcase SWFACTION_TARGETPATH:\n\t\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\"targetPath\");\n\n\tcase SWFACTION_TYPEOF:\n\t\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\"typeof\");\n\n\tcase SWFACTION_ORD:\n\t\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\"ord\");\n\n\tcase SWFACTION_CHR:\n\t\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\"chr\");\n\n\tcase SWFACTION_INT:\n\t\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\"int\");\n\n\tcase SWFACTION_TOSTRING:\n\t\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\"String\");     \n\n\tcase SWFACTION_TONUMBER:\n\t\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\"Number\");\n\n\tcase SWFACTION_RANDOMNUMBER:\n\t\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\"random\");\n\n\tcase SWFACTION_STRINGLENGTH:\n\t\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\"length\");\n\n\tcase SWFACTION_PLAY:\n\t\treturn decompile_Null_ArgBuiltInFunctionCall(n, actions, maxn,\"play\");\n\n\tcase SWFACTION_STOP:\n\t\treturn decompile_Null_ArgBuiltInFunctionCall(n, actions, maxn,\"stop\");\n\n\tcase SWFACTION_NEXTFRAME:\n\t\treturn decompile_Null_ArgBuiltInFunctionCall(n, actions, maxn,\"nextFrame\");\n\n\tcase SWFACTION_PREVFRAME:\n\t\treturn decompile_Null_ArgBuiltInFunctionCall(n, actions, maxn,\"prevFrame\");\n\n\tcase SWFACTION_ENDDRAG:\n\t\treturn decompile_Null_ArgBuiltInFunctionCall(n, actions, maxn,\"stopDrag\");\n\n\tcase SWFACTION_STOPSOUNDS:\n\t\treturn decompile_Null_ArgBuiltInFunctionCall(n, actions, maxn,\"stopAllSounds\");   \n\n\tcase SWFACTION_TOGGLEQUALITY:\n\t\treturn decompile_Null_ArgBuiltInFunctionCall(n, actions, maxn,\"toggleHighQuality\");      \n\n\tcase SWFACTION_MBSUBSTRING:\n\tcase SWFACTION_SUBSTRING:\n\t\treturn decompileSUBSTRING(n, actions, maxn);\n\n\tcase SWFACTION_STRINGCONCAT:\n\t\treturn decompileSTRINGCONCAT(n, actions, maxn);\n\n\tcase SWFACTION_REMOVECLIP:\n\t\treturn decompileREMOVECLIP(n, actions, maxn);\n\n\tcase SWFACTION_DUPLICATECLIP:\n\t\treturn decompileDUPLICATECLIP(n, actions, maxn);\n\n\tcase SWFACTION_SETTARGET:\n\t\treturn decompileSETTARGET(n, actions, maxn,0);\n\n\tcase SWFACTION_SETTARGET2:\n\t\treturn decompileSETTARGET(n, actions, maxn,1);\n\n\tcase SWFACTION_IMPLEMENTSOP:\n\t\treturn decompileIMPLEMENTS(n, actions, maxn);\n\n\tcase SWFACTION_CASTOP:\n\t\treturn decompileCAST(n, actions, maxn);\n\n\tcase SWFACTION_THROW:\n\t\treturn decompileTHROW(n, actions, maxn);\n\n\tcase SWFACTION_TRY:\n\t\treturn decompileTRY(n, actions, maxn);\n\n\tdefault:\n\t\toutputSWF_ACTION(n,&actions[n]);\n\t\treturn 0;\n\t}\n}\n",
                            "caller_start": 3114,
                            "file_path": "util/decompile.c"
                        }
                    ]
                },
                {
                    "tool": "caller_info.find_caller_for_func_file({'file_path': 'util/decompile.c', 'func_name': 'decompileGOTOFRAME2', 'project_dir': './storage/result/Part2_result/github/CVE-2017-11728/old_repos/libming-libming_4e35b4b'})",
                    "result": [
                        {
                            "type": "caller_info",
                            "call_line": 3141,
                            "call_code": "decompileGOTOFRAME2(n, actions, maxn)",
                            "caller_code": "int\ndecompileAction(int n, SWF_ACTION *actions, int maxn)\n{\n\tif( n > maxn ) SWF_error(\"Action overflow!!\");\n\n#ifdef DEBUG\n\tfprintf(stderr,\"%d:\\tACTION[%3.3d]: %s\\n\",\n\t        actions[n].SWF_ACTIONRECORD.Offset, n, \n\t        actionName(actions[n].SWF_ACTIONRECORD.ActionCode));\n#endif\n\n\tswitch(actions[n].SWF_ACTIONRECORD.ActionCode)\n\t{\n\tcase SWFACTION_END:\n\t\treturn 0;\n\n\tcase SWFACTION_CONSTANTPOOL:\n\t\tdecompileCONSTANTPOOL(&actions[n]);\n\t\treturn 0;\n\n\tcase SWFACTION_GOTOLABEL:\n\t\treturn decompileGOTOFRAME(n, actions, maxn,1);\n\n\tcase SWFACTION_GOTOFRAME:\n\t\treturn decompileGOTOFRAME(n, actions, maxn,0);\n\n\tcase SWFACTION_GOTOFRAME2:\n\t\treturn decompileGOTOFRAME2(n, actions, maxn);\n\n\tcase SWFACTION_WAITFORFRAME:\n\t\tdecompileWAITFORFRAME(&actions[n]);\n\t\treturn 0;\n\n\tcase SWFACTION_GETURL2:\n\t\tdecompileGETURL2(&actions[n]);\n\t\treturn 0;\n\n\tcase SWFACTION_GETURL:\n\t\tdecompileGETURL(&actions[n]);\n\t\treturn 0;\n\n\tcase SWFACTION_PUSH:\n\t\tdecompilePUSH(&actions[n]);\n\t\treturn 0;\n\n\tcase SWFACTION_PUSHDUP:\n\t\tdecompilePUSHDUP(&actions[n]);\n\t\treturn 0;\n\n\tcase SWFACTION_STACKSWAP:\n\t\tdecompileSTACKSWAP(&actions[n]);\t\n\t\treturn 0;\n\n\tcase SWFACTION_SETPROPERTY:\n\t\tdecompileSETPROPERTY(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_GETPROPERTY:\n\t\tdecompileGETPROPERTY(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_GETTIME:\n\t\treturn decompileGETTIME(n, actions, maxn);\n\n\tcase SWFACTION_TRACE:\n\t\tdecompileTRACE(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_CALLFRAME:\n\t\tdecompileCALLFRAME(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_EXTENDS:\n\t\tdecompileEXTENDS(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_INITOBJECT:\n\t\tdecompileINITOBJECT(n, actions, maxn);\n\t\treturn 0;\t        \n\n\tcase SWFACTION_NEWOBJECT:\n\t\tdecompileNEWOBJECT(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_NEWMETHOD:\n\t\tdecompileNEWMETHOD(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_GETMEMBER:\n\t\tdecompileGETMEMBER(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_SETMEMBER:\n\t\tdecompileSETMEMBER(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_GETVARIABLE:\n\t\tdecompileGETVARIABLE(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_SETVARIABLE:\n\t\tdecompileSETVARIABLE(n, actions, maxn, 0);\n\t\treturn 0;\n\n\tcase SWFACTION_DEFINELOCAL:\n\t\tdecompileSETVARIABLE(n, actions, maxn, 1);\n\t\treturn 0;\n\n\tcase SWFACTION_DEFINELOCAL2:\n\t\tdecompileDEFINELOCAL2(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_DECREMENT:\n\t\treturn decompileINCR_DECR(n, actions, maxn, 0);\n\n\tcase SWFACTION_INCREMENT:\n\t\treturn decompileINCR_DECR(n, actions, maxn,1);\n\n\tcase SWFACTION_STOREREGISTER:\n\t\tdecompileSTOREREGISTER(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_JUMP:\n\t\treturn decompileJUMP(n, actions, maxn);\n\n\tcase SWFACTION_RETURN:\n\t\tdecompileRETURN(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_LOGICALNOT:\n\t\treturn decompileLogicalNot(n, actions, maxn);\n\n\tcase SWFACTION_IF:\n\t\treturn decompileIF(n, actions, maxn);\n\n\tcase SWFACTION_WITH:\n\t\tdecompileWITH(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_ENUMERATE:\n\t\treturn decompileENUMERATE(n, actions, maxn, 0);\n\n\tcase SWFACTION_ENUMERATE2 :\n\t\treturn decompileENUMERATE(n, actions, maxn,1);\n\n\tcase SWFACTION_INITARRAY:\n\t\treturn decompileINITARRAY(n, actions, maxn);\n\n\tcase SWFACTION_DEFINEFUNCTION:\t\n\t\treturn decompileDEFINEFUNCTION(n, actions, maxn,0);\n\n\tcase SWFACTION_DEFINEFUNCTION2:\n\t\treturn decompileDEFINEFUNCTION(n, actions, maxn,1);\n\n\tcase SWFACTION_CALLFUNCTION:\n\t\treturn decompileCALLFUNCTION(n, actions, maxn);\n\n\tcase SWFACTION_CALLMETHOD:\n\t\treturn decompileCALLMETHOD(n, actions, maxn);\n\n\tcase SWFACTION_INSTANCEOF:\n\tcase SWFACTION_SHIFTLEFT:\n\tcase SWFACTION_SHIFTRIGHT:\n\tcase SWFACTION_SHIFTRIGHT2:        \n\tcase SWFACTION_ADD:\n\tcase SWFACTION_ADD2:\n\tcase SWFACTION_SUBTRACT:\n\tcase SWFACTION_MULTIPLY:\n\tcase SWFACTION_DIVIDE:\n\tcase SWFACTION_MODULO:\n\tcase SWFACTION_BITWISEAND:\n\tcase SWFACTION_BITWISEOR:\n\tcase SWFACTION_BITWISEXOR:\n\tcase SWFACTION_EQUAL:\n\tcase SWFACTION_EQUALS2:\n\tcase SWFACTION_LESS2:\n\tcase SWFACTION_LOGICALAND:\n\tcase SWFACTION_LOGICALOR:\n\tcase SWFACTION_GREATER:\n\tcase SWFACTION_LESSTHAN:\n\tcase SWFACTION_STRINGEQ:\n\tcase SWFACTION_STRINGCOMPARE:\n\tcase SWFACTION_STRICTEQUALS:\n\t\treturn decompileArithmeticOp(n, actions, maxn);\n\n\tcase SWFACTION_POP:\n\t\tpop();\n\t\treturn 0;\n\n\tcase SWFACTION_STARTDRAG:\n\t\treturn decompileSTARTDRAG(n, actions, maxn);\n\n\tcase SWFACTION_DELETE:\n\t\treturn decompileDELETE(n, actions, maxn,0);\n\n\tcase SWFACTION_DELETE2:\n\t\treturn decompileDELETE(n, actions, maxn,1);\n\n\tcase SWFACTION_TARGETPATH:\n\t\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\"targetPath\");\n\n\tcase SWFACTION_TYPEOF:\n\t\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\"typeof\");\n\n\tcase SWFACTION_ORD:\n\t\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\"ord\");\n\n\tcase SWFACTION_CHR:\n\t\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\"chr\");\n\n\tcase SWFACTION_INT:\n\t\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\"int\");\n\n\tcase SWFACTION_TOSTRING:\n\t\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\"String\");     \n\n\tcase SWFACTION_TONUMBER:\n\t\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\"Number\");\n\n\tcase SWFACTION_RANDOMNUMBER:\n\t\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\"random\");\n\n\tcase SWFACTION_STRINGLENGTH:\n\t\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\"length\");\n\n\tcase SWFACTION_PLAY:\n\t\treturn decompile_Null_ArgBuiltInFunctionCall(n, actions, maxn,\"play\");\n\n\tcase SWFACTION_STOP:\n\t\treturn decompile_Null_ArgBuiltInFunctionCall(n, actions, maxn,\"stop\");\n\n\tcase SWFACTION_NEXTFRAME:\n\t\treturn decompile_Null_ArgBuiltInFunctionCall(n, actions, maxn,\"nextFrame\");\n\n\tcase SWFACTION_PREVFRAME:\n\t\treturn decompile_Null_ArgBuiltInFunctionCall(n, actions, maxn,\"prevFrame\");\n\n\tcase SWFACTION_ENDDRAG:\n\t\treturn decompile_Null_ArgBuiltInFunctionCall(n, actions, maxn,\"stopDrag\");\n\n\tcase SWFACTION_STOPSOUNDS:\n\t\treturn decompile_Null_ArgBuiltInFunctionCall(n, actions, maxn,\"stopAllSounds\");   \n\n\tcase SWFACTION_TOGGLEQUALITY:\n\t\treturn decompile_Null_ArgBuiltInFunctionCall(n, actions, maxn,\"toggleHighQuality\");      \n\n\tcase SWFACTION_MBSUBSTRING:\n\tcase SWFACTION_SUBSTRING:\n\t\treturn decompileSUBSTRING(n, actions, maxn);\n\n\tcase SWFACTION_STRINGCONCAT:\n\t\treturn decompileSTRINGCONCAT(n, actions, maxn);\n\n\tcase SWFACTION_REMOVECLIP:\n\t\treturn decompileREMOVECLIP(n, actions, maxn);\n\n\tcase SWFACTION_DUPLICATECLIP:\n\t\treturn decompileDUPLICATECLIP(n, actions, maxn);\n\n\tcase SWFACTION_SETTARGET:\n\t\treturn decompileSETTARGET(n, actions, maxn,0);\n\n\tcase SWFACTION_SETTARGET2:\n\t\treturn decompileSETTARGET(n, actions, maxn,1);\n\n\tcase SWFACTION_IMPLEMENTSOP:\n\t\treturn decompileIMPLEMENTS(n, actions, maxn);\n\n\tcase SWFACTION_CASTOP:\n\t\treturn decompileCAST(n, actions, maxn);\n\n\tcase SWFACTION_THROW:\n\t\treturn decompileTHROW(n, actions, maxn);\n\n\tcase SWFACTION_TRY:\n\t\treturn decompileTRY(n, actions, maxn);\n\n\tdefault:\n\t\toutputSWF_ACTION(n,&actions[n]);\n\t\treturn 0;\n\t}\n}\n",
                            "caller_start": 3114,
                            "file_path": "util/decompile.c"
                        }
                    ]
                },
                {
                    "tool": "caller_info.find_caller_for_func_file({'file_path': 'util/decompile.c', 'func_name': 'decompileArithmeticOp', 'project_dir': './storage/result/Part2_result/github/CVE-2017-11728/old_repos/libming-libming_4e35b4b'})",
                    "result": [
                        {
                            "type": "caller_info",
                            "call_line": 3297,
                            "call_code": "decompileArithmeticOp(n, actions, maxn)",
                            "caller_code": "int\ndecompileAction(int n, SWF_ACTION *actions, int maxn)\n{\n\tif( n > maxn ) SWF_error(\"Action overflow!!\");\n\n#ifdef DEBUG\n\tfprintf(stderr,\"%d:\\tACTION[%3.3d]: %s\\n\",\n\t        actions[n].SWF_ACTIONRECORD.Offset, n, \n\t        actionName(actions[n].SWF_ACTIONRECORD.ActionCode));\n#endif\n\n\tswitch(actions[n].SWF_ACTIONRECORD.ActionCode)\n\t{\n\tcase SWFACTION_END:\n\t\treturn 0;\n\n\tcase SWFACTION_CONSTANTPOOL:\n\t\tdecompileCONSTANTPOOL(&actions[n]);\n\t\treturn 0;\n\n\tcase SWFACTION_GOTOLABEL:\n\t\treturn decompileGOTOFRAME(n, actions, maxn,1);\n\n\tcase SWFACTION_GOTOFRAME:\n\t\treturn decompileGOTOFRAME(n, actions, maxn,0);\n\n\tcase SWFACTION_GOTOFRAME2:\n\t\treturn decompileGOTOFRAME2(n, actions, maxn);\n\n\tcase SWFACTION_WAITFORFRAME:\n\t\tdecompileWAITFORFRAME(&actions[n]);\n\t\treturn 0;\n\n\tcase SWFACTION_GETURL2:\n\t\tdecompileGETURL2(&actions[n]);\n\t\treturn 0;\n\n\tcase SWFACTION_GETURL:\n\t\tdecompileGETURL(&actions[n]);\n\t\treturn 0;\n\n\tcase SWFACTION_PUSH:\n\t\tdecompilePUSH(&actions[n]);\n\t\treturn 0;\n\n\tcase SWFACTION_PUSHDUP:\n\t\tdecompilePUSHDUP(&actions[n]);\n\t\treturn 0;\n\n\tcase SWFACTION_STACKSWAP:\n\t\tdecompileSTACKSWAP(&actions[n]);\t\n\t\treturn 0;\n\n\tcase SWFACTION_SETPROPERTY:\n\t\tdecompileSETPROPERTY(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_GETPROPERTY:\n\t\tdecompileGETPROPERTY(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_GETTIME:\n\t\treturn decompileGETTIME(n, actions, maxn);\n\n\tcase SWFACTION_TRACE:\n\t\tdecompileTRACE(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_CALLFRAME:\n\t\tdecompileCALLFRAME(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_EXTENDS:\n\t\tdecompileEXTENDS(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_INITOBJECT:\n\t\tdecompileINITOBJECT(n, actions, maxn);\n\t\treturn 0;\t        \n\n\tcase SWFACTION_NEWOBJECT:\n\t\tdecompileNEWOBJECT(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_NEWMETHOD:\n\t\tdecompileNEWMETHOD(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_GETMEMBER:\n\t\tdecompileGETMEMBER(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_SETMEMBER:\n\t\tdecompileSETMEMBER(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_GETVARIABLE:\n\t\tdecompileGETVARIABLE(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_SETVARIABLE:\n\t\tdecompileSETVARIABLE(n, actions, maxn, 0);\n\t\treturn 0;\n\n\tcase SWFACTION_DEFINELOCAL:\n\t\tdecompileSETVARIABLE(n, actions, maxn, 1);\n\t\treturn 0;\n\n\tcase SWFACTION_DEFINELOCAL2:\n\t\tdecompileDEFINELOCAL2(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_DECREMENT:\n\t\treturn decompileINCR_DECR(n, actions, maxn, 0);\n\n\tcase SWFACTION_INCREMENT:\n\t\treturn decompileINCR_DECR(n, actions, maxn,1);\n\n\tcase SWFACTION_STOREREGISTER:\n\t\tdecompileSTOREREGISTER(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_JUMP:\n\t\treturn decompileJUMP(n, actions, maxn);\n\n\tcase SWFACTION_RETURN:\n\t\tdecompileRETURN(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_LOGICALNOT:\n\t\treturn decompileLogicalNot(n, actions, maxn);\n\n\tcase SWFACTION_IF:\n\t\treturn decompileIF(n, actions, maxn);\n\n\tcase SWFACTION_WITH:\n\t\tdecompileWITH(n, actions, maxn);\n\t\treturn 0;\n\n\tcase SWFACTION_ENUMERATE:\n\t\treturn decompileENUMERATE(n, actions, maxn, 0);\n\n\tcase SWFACTION_ENUMERATE2 :\n\t\treturn decompileENUMERATE(n, actions, maxn,1);\n\n\tcase SWFACTION_INITARRAY:\n\t\treturn decompileINITARRAY(n, actions, maxn);\n\n\tcase SWFACTION_DEFINEFUNCTION:\t\n\t\treturn decompileDEFINEFUNCTION(n, actions, maxn,0);\n\n\tcase SWFACTION_DEFINEFUNCTION2:\n\t\treturn decompileDEFINEFUNCTION(n, actions, maxn,1);\n\n\tcase SWFACTION_CALLFUNCTION:\n\t\treturn decompileCALLFUNCTION(n, actions, maxn);\n\n\tcase SWFACTION_CALLMETHOD:\n\t\treturn decompileCALLMETHOD(n, actions, maxn);\n\n\tcase SWFACTION_INSTANCEOF:\n\tcase SWFACTION_SHIFTLEFT:\n\tcase SWFACTION_SHIFTRIGHT:\n\tcase SWFACTION_SHIFTRIGHT2:        \n\tcase SWFACTION_ADD:\n\tcase SWFACTION_ADD2:\n\tcase SWFACTION_SUBTRACT:\n\tcase SWFACTION_MULTIPLY:\n\tcase SWFACTION_DIVIDE:\n\tcase SWFACTION_MODULO:\n\tcase SWFACTION_BITWISEAND:\n\tcase SWFACTION_BITWISEOR:\n\tcase SWFACTION_BITWISEXOR:\n\tcase SWFACTION_EQUAL:\n\tcase SWFACTION_EQUALS2:\n\tcase SWFACTION_LESS2:\n\tcase SWFACTION_LOGICALAND:\n\tcase SWFACTION_LOGICALOR:\n\tcase SWFACTION_GREATER:\n\tcase SWFACTION_LESSTHAN:\n\tcase SWFACTION_STRINGEQ:\n\tcase SWFACTION_STRINGCOMPARE:\n\tcase SWFACTION_STRICTEQUALS:\n\t\treturn decompileArithmeticOp(n, actions, maxn);\n\n\tcase SWFACTION_POP:\n\t\tpop();\n\t\treturn 0;\n\n\tcase SWFACTION_STARTDRAG:\n\t\treturn decompileSTARTDRAG(n, actions, maxn);\n\n\tcase SWFACTION_DELETE:\n\t\treturn decompileDELETE(n, actions, maxn,0);\n\n\tcase SWFACTION_DELETE2:\n\t\treturn decompileDELETE(n, actions, maxn,1);\n\n\tcase SWFACTION_TARGETPATH:\n\t\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\"targetPath\");\n\n\tcase SWFACTION_TYPEOF:\n\t\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\"typeof\");\n\n\tcase SWFACTION_ORD:\n\t\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\"ord\");\n\n\tcase SWFACTION_CHR:\n\t\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\"chr\");\n\n\tcase SWFACTION_INT:\n\t\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\"int\");\n\n\tcase SWFACTION_TOSTRING:\n\t\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\"String\");     \n\n\tcase SWFACTION_TONUMBER:\n\t\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\"Number\");\n\n\tcase SWFACTION_RANDOMNUMBER:\n\t\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\"random\");\n\n\tcase SWFACTION_STRINGLENGTH:\n\t\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\"length\");\n\n\tcase SWFACTION_PLAY:\n\t\treturn decompile_Null_ArgBuiltInFunctionCall(n, actions, maxn,\"play\");\n\n\tcase SWFACTION_STOP:\n\t\treturn decompile_Null_ArgBuiltInFunctionCall(n, actions, maxn,\"stop\");\n\n\tcase SWFACTION_NEXTFRAME:\n\t\treturn decompile_Null_ArgBuiltInFunctionCall(n, actions, maxn,\"nextFrame\");\n\n\tcase SWFACTION_PREVFRAME:\n\t\treturn decompile_Null_ArgBuiltInFunctionCall(n, actions, maxn,\"prevFrame\");\n\n\tcase SWFACTION_ENDDRAG:\n\t\treturn decompile_Null_ArgBuiltInFunctionCall(n, actions, maxn,\"stopDrag\");\n\n\tcase SWFACTION_STOPSOUNDS:\n\t\treturn decompile_Null_ArgBuiltInFunctionCall(n, actions, maxn,\"stopAllSounds\");   \n\n\tcase SWFACTION_TOGGLEQUALITY:\n\t\treturn decompile_Null_ArgBuiltInFunctionCall(n, actions, maxn,\"toggleHighQuality\");      \n\n\tcase SWFACTION_MBSUBSTRING:\n\tcase SWFACTION_SUBSTRING:\n\t\treturn decompileSUBSTRING(n, actions, maxn);\n\n\tcase SWFACTION_STRINGCONCAT:\n\t\treturn decompileSTRINGCONCAT(n, actions, maxn);\n\n\tcase SWFACTION_REMOVECLIP:\n\t\treturn decompileREMOVECLIP(n, actions, maxn);\n\n\tcase SWFACTION_DUPLICATECLIP:\n\t\treturn decompileDUPLICATECLIP(n, actions, maxn);\n\n\tcase SWFACTION_SETTARGET:\n\t\treturn decompileSETTARGET(n, actions, maxn,0);\n\n\tcase SWFACTION_SETTARGET2:\n\t\treturn decompileSETTARGET(n, actions, maxn,1);\n\n\tcase SWFACTION_IMPLEMENTSOP:\n\t\treturn decompileIMPLEMENTS(n, actions, maxn);\n\n\tcase SWFACTION_CASTOP:\n\t\treturn decompileCAST(n, actions, maxn);\n\n\tcase SWFACTION_THROW:\n\t\treturn decompileTHROW(n, actions, maxn);\n\n\tcase SWFACTION_TRY:\n\t\treturn decompileTRY(n, actions, maxn);\n\n\tdefault:\n\t\toutputSWF_ACTION(n,&actions[n]);\n\t\treturn 0;\n\t}\n}\n",
                            "caller_start": 3114,
                            "file_path": "util/decompile.c"
                        }
                    ]
                }
            ],
            "timestamp": "2025-05-26T15:21:35.620665"
        },
        {
            "stage": "analysis",
            "iteration": 2,
            "prompt": "You are a senior security engineer. Using **all available code context**, build the **complete, evidence-backed root-cause and trigger chain** for the vulnerability.\n\n## INPUTS\n- **Commit Message**: Fix various overflows in OpCode and readBytes\n\n* OpCode: Add a check to avoid reading the stack when n < 1\n\n    In this case, print a debug warning and return error code -998\n\n* readBytes: When size < 0, set it to zero (don't read anything)\n\nThis commit fixes CVE-2017-11728 (Fixes #82), CVE-2017-11729 (Fixes #79),\nCVE-2017-11730 (Fixes #81) and CVE-2017-11731 (Fixes #84).\n- **Vulnerability Description**: A heap-based buffer over-read was found in the function OpCode (called from decompileSETMEMBER) in util/decompile.c in Ming 0.4.8, which allows attackers to cause a denial of service via a crafted file.\n- **Patch Code**: [{'func_name': 'OpCode', 'patch': '--- func_before\\n+++ func_after\\n@@ -865,6 +865,12 @@\\n \\t\\tSWF_warn(\"OpCode: want %i, max %i\\\\n\", n, maxn);\\n #endif\\n \\t\\treturn -999;\\n-\\t}\\n+\\t} else if (n < 1) {\\n+\\n+#if DEBUG\\n+\\t\\tSWF_warn(\"OpCode: want %i < 1\\\\n\", n);\\n+#endif\\n+\\t\\treturn -998;\\n+        }\\n \\treturn actions[n].SWF_ACTIONRECORD.ActionCode;\\n }', 'file_path': 'util/decompile.c'}, {'func_name': 'readBytes', 'patch': '--- func_before\\n+++ func_after\\n@@ -228,5 +228,13 @@\\n char *readBytes(FILE *f,int size)\\n {\\n+\\n+  if (size < 1) {\\n+#if DEBUG\\n+    SWF_warn(\"readBytes: want to read %i < 1 bytes: Handling a 0\\\\n\", size);\\n+#endif\\n+    size = 0;\\n+  }\\n+\\n   int i;\\n   char *buf;\\n ', 'file_path': 'util/read.c'}]\n- **History Summary (all prior context & analysis)**: [\n  {\n    \"stage\": \"initial\",\n    \"result\": {\n      \"language\": \"c\",\n      \"vulnerability_type\": \"memory\",\n      \"repair_strategy\": \"In decompile.c:865-871, OpCode adds a check for n < 1 to prevent stack reads by returning -998. In read.c:228-236, readBytes sets negative size to 0 to avoid underflow.\",\n      \"required_context\": [\n        \"caller: util/decompile.c::OpCode\",\n        \"caller: util/read.c::readBytes\"\n      ],\n      \"root_cause\": \"In decompile.c:865-871, OpCode previously allowed n < 1, risking invalid actions[n] access. In read.c:228-236, readBytes accepted negative size values, leading to undersized buffer allocation. GAP: Parameter sources not visible in patch.\"\n    }\n  },\n  {\n    \"stage\": \"collection\",\n    \"result\": [\n      {\n        \"source\": \"caller_info(file:decompile.c, func:OpCode)\",\n        \"result\": [\n          {\n            \"call_line\": 874,\n            \"call_code\": \"OpCode(actions, n, maxn)\",\n            \"caller_code\": \"static int\\nisStoreOp(int n, SWF_ACTION *actions,int maxn)\\n{\\n\\tswitch(OpCode(actions, n, maxn))\\n\\t{\\n\\tcase SWFACTION_STOREREGISTER:\\n\\tcase SWFACTION_SETVARIABLE:\\n\\tcase SWFACTION_SETMEMBER:\\n\\tcase SWFACTION_CASTOP:\\n\\t\\treturn 1;\\n\\tdefault:\\n\\t\\treturn 0;\\n\\t}\\n}\",\n            \"caller_start\": 871,\n            \"file_path\": \"util/decompile.c\"\n          },\n          {\n            \"call_line\": 894,\n            \"call_code\": \"OpCode(actions, n+1, maxn)\",\n            \"caller_code\": \"static int \\ndecompileGOTOFRAME(int n, SWF_ACTION *actions,int maxn,int islabel)\\n{\\n\\tint i=0;\\n\\tstruct SWF_ACTIONGOTOLABEL *sactv2;\\n\\tOUT_BEGIN2(SWF_ACTIONGOTOFRAME);\\n\\tsactv2 = (struct SWF_ACTIONGOTOLABEL*)sact;\\n\\tINDENT\\n\\tif (OpCode(actions, n+1, maxn) == SWFACTION_PLAY)\\n\\t{\\n\\t\\ti=1;\\n\\t\\tputs(\\\"gotoAndPlay(\\\");\\n\\t}\\n\\telse\\n\\t{\\n\\t\\tif (OpCode(actions, n+1, maxn) == SWFACTION_STOP)\\n\\t\\t\\ti=1;\\n\\t\\tputs(\\\"gotoAndStop(\\\");\\n\\t}\\n\\t\\n\\tif (islabel)\\n\\t\\tprintln(\\\"'%s');\\\", sactv2->FrameLabel);\\n\\telse\\n\\t\\tprintln(\\\"%d);\\\", sact->Frame+1); /* GOTOFRAME arg is 0-based */\\n\\treturn i;\\n}\",\n            \"caller_start\": 886,\n            \"file_path\": \"util/decompile.c\"\n          },\n          {\n            \"call_line\": 901,\n            \"call_code\": \"OpCode(actions, n+1, maxn)\",\n            \"caller_code\": \"static int \\ndecompileGOTOFRAME(int n, SWF_ACTION *actions,int maxn,int islabel)\\n{\\n\\tint i=0;\\n\\tstruct SWF_ACTIONGOTOLABEL *sactv2;\\n\\tOUT_BEGIN2(SWF_ACTIONGOTOFRAME);\\n\\tsactv2 = (struct SWF_ACTIONGOTOLABEL*)sact;\\n\\tINDENT\\n\\tif (OpCode(actions, n+1, maxn) == SWFACTION_PLAY)\\n\\t{\\n\\t\\ti=1;\\n\\t\\tputs(\\\"gotoAndPlay(\\\");\\n\\t}\\n\\telse\\n\\t{\\n\\t\\tif (OpCode(actions, n+1, maxn) == SWFACTION_STOP)\\n\\t\\t\\ti=1;\\n\\t\\tputs(\\\"gotoAndStop(\\\");\\n\\t}\\n\\t\\n\\tif (islabel)\\n\\t\\tprintln(\\\"'%s');\\\", sactv2->FrameLabel);\\n\\telse\\n\\t\\tprintln(\\\"%d);\\\", sact->Frame+1); /* GOTOFRAME arg is 0-based */\\n\\treturn i;\\n}\",\n            \"caller_start\": 886,\n            \"file_path\": \"util/decompile.c\"\n          },\n          {\n            \"call_line\": 921,\n            \"call_code\": \"OpCode(actions, n+1, maxn)\",\n            \"caller_code\": \"static int \\ndecompileGOTOFRAME2(int n, SWF_ACTION *actions, int maxn)\\n{\\n\\tint i=0;\\n\\tOUT_BEGIN2(SWF_ACTIONGOTOFRAME2);\\n\\tINDENT\\n\\tif (n+1 < maxn)\\n\\t{\\n\\t\\tif (OpCode(actions, n+1, maxn) == SWFACTION_PLAY ||\\n\\t\\t    OpCode(actions, n+1, maxn) == SWFACTION_STOP)\\n\\t\\t\\ti=1;\\n\\t\\tif (OpCode(actions, n+1, maxn) == SWFACTION_PLAY)\\n\\t\\t\\tputs(\\\"gotoAndPlay(\\\");\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tif (OpCode(actions, n+1, maxn) == SWFACTION_STOP)\\n\\t\\t\\t\\tputs(\\\"gotoAndStop(\\\");\\n\\t\\t\\telse\\n\\t\\t\\t{\\n\\t\\t\\t\\tif (sact->f.FlagBits.PlayFlag)\\n\\t\\t\\t\\t\\tputs(\\\"gotoAndPlay(\\\");\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\tputs(\\\"gotoAndStop(\\\");\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\telse \\n\\t{\\n\\t\\tif (sact->f.FlagBits.PlayFlag)\\n\\t\\t\\tputs(\\\"gotoAndPlay(\\\");\\n\\t\\telse\\n\\t\\t\\tputs(\\\"gotoAndStop(\\\");\\n\\t}\\n\\tdecompilePUSHPARAM(pop(),0);\\n\\tprintln(\\\");\\\");\\n\\treturn i;\\n}\",\n            \"caller_start\": 913,\n            \"file_path\": \"util/decompile.c\"\n          },\n          {\n            \"call_line\": 922,\n            \"call_code\": \"OpCode(actions, n+1, maxn)\",\n            \"caller_code\": \"static int \\ndecompileGOTOFRAME2(int n, SWF_ACTION *actions, int maxn)\\n{\\n\\tint i=0;\\n\\tOUT_BEGIN2(SWF_ACTIONGOTOFRAME2);\\n\\tINDENT\\n\\tif (n+1 < maxn)\\n\\t{\\n\\t\\tif (OpCode(actions, n+1, maxn) == SWFACTION_PLAY ||\\n\\t\\t    OpCode(actions, n+1, maxn) == SWFACTION_STOP)\\n\\t\\t\\ti=1;\\n\\t\\tif (OpCode(actions, n+1, maxn) == SWFACTION_PLAY)\\n\\t\\t\\tputs(\\\"gotoAndPlay(\\\");\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tif (OpCode(actions, n+1, maxn) == SWFACTION_STOP)\\n\\t\\t\\t\\tputs(\\\"gotoAndStop(\\\");\\n\\t\\t\\telse\\n\\t\\t\\t{\\n\\t\\t\\t\\tif (sact->f.FlagBits.PlayFlag)\\n\\t\\t\\t\\t\\tputs(\\\"gotoAndPlay(\\\");\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\tputs(\\\"gotoAndStop(\\\");\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\telse \\n\\t{\\n\\t\\tif (sact->f.FlagBits.PlayFlag)\\n\\t\\t\\tputs(\\\"gotoAndPlay(\\\");\\n\\t\\telse\\n\\t\\t\\tputs(\\\"gotoAndStop(\\\");\\n\\t}\\n\\tdecompilePUSHPARAM(pop(),0);\\n\\tprintln(\\\");\\\");\\n\\treturn i;\\n}\",\n            \"caller_start\": 913,\n            \"file_path\": \"util/decompile.c\"\n          },\n          {\n            \"call_line\": 924,\n            \"call_code\": \"OpCode(actions, n+1, maxn)\",\n            \"caller_code\": \"static int \\ndecompileGOTOFRAME2(int n, SWF_ACTION *actions, int maxn)\\n{\\n\\tint i=0;\\n\\tOUT_BEGIN2(SWF_ACTIONGOTOFRAME2);\\n\\tINDENT\\n\\tif (n+1 < maxn)\\n\\t{\\n\\t\\tif (OpCode(actions, n+1, maxn) == SWFACTION_PLAY ||\\n\\t\\t    OpCode(actions, n+1, maxn) == SWFACTION_STOP)\\n\\t\\t\\ti=1;\\n\\t\\tif (OpCode(actions, n+1, maxn) == SWFACTION_PLAY)\\n\\t\\t\\tputs(\\\"gotoAndPlay(\\\");\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tif (OpCode(actions, n+1, maxn) == SWFACTION_STOP)\\n\\t\\t\\t\\tputs(\\\"gotoAndStop(\\\");\\n\\t\\t\\telse\\n\\t\\t\\t{\\n\\t\\t\\t\\tif (sact->f.FlagBits.PlayFlag)\\n\\t\\t\\t\\t\\tputs(\\\"gotoAndPlay(\\\");\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\tputs(\\\"gotoAndStop(\\\");\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\telse \\n\\t{\\n\\t\\tif (sact->f.FlagBits.PlayFlag)\\n\\t\\t\\tputs(\\\"gotoAndPlay(\\\");\\n\\t\\telse\\n\\t\\t\\tputs(\\\"gotoAndStop(\\\");\\n\\t}\\n\\tdecompilePUSHPARAM(pop(),0);\\n\\tprintln(\\\");\\\");\\n\\treturn i;\\n}\",\n            \"caller_start\": 913,\n            \"file_path\": \"util/decompile.c\"\n          },\n          {\n            \"call_line\": 928,\n            \"call_code\": \"OpCode(actions, n+1, maxn)\",\n            \"caller_code\": \"static int \\ndecompileGOTOFRAME2(int n, SWF_ACTION *actions, int maxn)\\n{\\n\\tint i=0;\\n\\tOUT_BEGIN2(SWF_ACTIONGOTOFRAME2);\\n\\tINDENT\\n\\tif (n+1 < maxn)\\n\\t{\\n\\t\\tif (OpCode(actions, n+1, maxn) == SWFACTION_PLAY ||\\n\\t\\t    OpCode(actions, n+1, maxn) == SWFACTION_STOP)\\n\\t\\t\\ti=1;\\n\\t\\tif (OpCode(actions, n+1, maxn) == SWFACTION_PLAY)\\n\\t\\t\\tputs(\\\"gotoAndPlay(\\\");\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tif (OpCode(actions, n+1, maxn) == SWFACTION_STOP)\\n\\t\\t\\t\\tputs(\\\"gotoAndStop(\\\");\\n\\t\\t\\telse\\n\\t\\t\\t{\\n\\t\\t\\t\\tif (sact->f.FlagBits.PlayFlag)\\n\\t\\t\\t\\t\\tputs(\\\"gotoAndPlay(\\\");\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\tputs(\\\"gotoAndStop(\\\");\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\telse \\n\\t{\\n\\t\\tif (sact->f.FlagBits.PlayFlag)\\n\\t\\t\\tputs(\\\"gotoAndPlay(\\\");\\n\\t\\telse\\n\\t\\t\\tputs(\\\"gotoAndStop(\\\");\\n\\t}\\n\\tdecompilePUSHPARAM(pop(),0);\\n\\tprintln(\\\");\\\");\\n\\treturn i;\\n}\",\n            \"caller_start\": 913,\n            \"file_path\": \"util/decompile.c\"\n          },\n          {\n            \"call_line\": 1004,\n            \"call_code\": \"OpCode(actions, n, maxn)\",\n            \"caller_code\": \"static int\\ndecompileArithmeticOp(int n, SWF_ACTION *actions, int maxn)\\n{\\n\\tstruct SWF_ACTIONPUSHPARAM *left, *right;\\n\\tint op_l = OpCode(actions, n, maxn);\\n\\tint op_r = OpCode(actions, n+1, maxn);\\n\\tright=pop();\\n\\tleft=pop();\\n\\tswitch(OpCode(actions, n, maxn))\\n\\t{\\n\\t/*\\n\\tcase SWFACTION_GETMEMBER:\\n\\t\\tdecompilePUSHPARAM(peek(),0);\\n\\t\\tbreak;\\n\\t*/\\n\\tcase SWFACTION_INSTANCEOF:\\n\\t\\tif (precedence(op_l, op_r))\\n\\t\\t\\tpush(newVar3(getString(left),\\\" instanceof \\\",getString(right)));\\n\\t\\telse\\n\\t\\t\\tpush(newVar_N(\\\"(\\\",getString(left),\\\" instanceof \\\",getString(right),0,\\\")\\\"));\\n\\t\\tbreak;\\n\\tcase SWFACTION_ADD:\\n\\tcase SWFACTION_ADD2:\\n\\t\\tif (precedence(op_l, op_r))\\n\\t\\t\\tpush(newVar3(getString(left),\\\"+\\\",getString(right)));\\n\\t\\telse\\n\\t\\t\\tpush(newVar_N(\\\"(\\\",getString(left),\\\"+\\\",getString(right),0,\\\")\\\"));\\n\\t\\tbreak;\\n\\tcase SWFACTION_SUBTRACT:\\n\\t\\tif (precedence(op_l, op_r))\\n\\t\\t\\tpush(newVar3(getString(left),\\\"-\\\",getString(right)));\\t      \\n\\t\\telse\\n\\t\\t\\tpush(newVar_N(\\\"(\\\",getString(left),\\\"-\\\",getString(right),0,\\\")\\\"));\\n\\t\\tbreak;\\n\\tcase SWFACTION_MULTIPLY:\\n\\t\\tif (precedence(op_l, op_r))\\n\\t\\t\\tpush(newVar3(getString(left),\\\"*\\\",getString(right)));\\n\\t\\telse\\n\\t\\t\\tpush(newVar_N(\\\"(\\\",getString(left),\\\"*\\\",getString(right),0,\\\")\\\"));\\n\\t\\tbreak;\\n\\tcase SWFACTION_DIVIDE:\\n\\t\\tif (precedence(op_l, op_r))\\n\\t\\t\\tpush(newVar3(getString(left),\\\"/\\\",getString(right)));\\n\\t\\telse\\n\\t\\t\\tpush(newVar_N(\\\"(\\\",getString(left),\\\"/\\\",getString(right),0,\\\")\\\"));\\n\\t\\tbreak;\\n\\tcase SWFACTION_MODULO:\\n\\t\\tif (precedence(op_l, op_r))\\n\\t\\t\\tpush(newVar3(getString(left),\\\"%\\\",getString(right)));\\n\\t\\telse\\n\\t\\t\\tpush(newVar_N(\\\"(\\\",getString(left),\\\"%\\\",getString(right),0,\\\")\\\"));\\n\\t\\tbreak;\\n\\tcase SWFACTION_SHIFTLEFT:\\n\\t\\tif (precedence(op_l, op_r))\\n\\t\\t\\tpush(newVar3(getString(left),\\\"<<\\\",getString(right)));\\n\\t\\telse\\n\\t\\t\\tpush(newVar_N(\\\"(\\\",getString(left),\\\"<<\\\",getString(right),0,\\\")\\\"));\\n\\t\\tbreak;\\n\\tcase SWFACTION_SHIFTRIGHT:\\n\\t\\tif (precedence(op_l, op_r))\\n\\t\\t\\tpush(newVar3(getString(left),\\\">>\\\",getString(right)));\\n\\t\\telse\\n\\t\\t\\tpush(newVar_N(\\\"(\\\",getString(left),\\\">>\\\",getString(right),0,\\\")\\\"));\\n\\t\\tbreak;\\n\\tcase SWFACTION_SHIFTRIGHT2:\\n\\t\\tif (precedence(op_l, op_r))\\n\\t\\t\\tpush(newVar3(getString(left),\\\">>>\\\",getString(right)));\\n\\t\\telse\\n\\t\\t\\tpush(newVar_N(\\\"(\\\",getString(left),\\\">>>\\\",getString(right),0,\\\")\\\"));\\n\\t\\tbreak;\\n\\tcase SWFACTION_LOGICALAND:\\n\\t\\tif (precedence(op_l, op_r))\\n\\t\\t\\tpush(newVar3(getString(left),\\\"&&\\\",getString(right)));\\n\\t\\telse\\n\\t\\t\\tpush(newVar_N(\\\"(\\\",getString(left),\\\"&&\\\",getString(right),0,\\\")\\\"));\\n\\t\\tbreak;\\n\\tcase SWFACTION_LOGICALOR:\\n\\t\\tif (precedence(op_l, op_r))\\n\\t\\t\\tpush(newVar3(getString(left),\\\"||\\\",getString(right)));\\n\\t\\telse\\n\\t\\t\\tpush(newVar_N(\\\"(\\\",getString(left),\\\"||\\\",getString(right),0,\\\")\\\"));\\n\\t\\tbreak;\\n\\tcase SWFACTION_BITWISEAND:\\n\\t\\tif (precedence(op_l, op_r))\\n\\t\\t\\tpush(newVar3(getString(left),\\\"&\\\",getString(right)));\\n\\t\\telse\\n\\t\\t\\tpush(newVar_N(\\\"(\\\",getString(left),\\\"&\\\",getString(right),0,\\\")\\\"));\\n\\t\\tbreak;\\n\\tcase SWFACTION_BITWISEOR:\\n\\t\\tif (precedence(op_l, op_r))\\n\\t\\t\\tpush(newVar3(getString(left),\\\"|\\\",getString(right)));\\n\\t\\telse\\n\\t\\t\\tpush(newVar_N(\\\"(\\\",getString(left),\\\"|\\\",getString(right),0,\\\")\\\"));\\n\\t\\tbreak;\\n\\tcase SWFACTION_BITWISEXOR:\\n\\t\\tif (precedence(op_l, op_r))\\n\\t\\t\\tpush(newVar3(getString(left),\\\"^\\\",getString(right)));\\n\\t\\telse\\n\\t\\t\\tpush(newVar_N(\\\"(\\\",getString(left),\\\"^\\\",getString(right),0,\\\")\\\"));\\n\\t\\tbreak;\\n\\tcase SWFACTION_EQUALS2:\\t/* including negation */\\n\\tcase SWFACTION_EQUAL:\\n\\t\\tif( OpCode(actions, n+1, maxn) == SWFACTION_LOGICALNOT &&\\n\\t\\t    OpCode(actions, n+2, maxn) != SWFACTION_IF)\\n\\t\\t{\\n\\t\\t\\top_r = OpCode(actions, n+1, maxn);\\n\\t\\t\\tif (precedence(op_l, op_r))\\n\\t\\t\\t\\tpush(newVar3(getString(left),\\\"!=\\\",getString(right)));\\n\\t\\t\\telse\\n\\t\\t\\t\\tpush(newVar_N(\\\"(\\\",getString(left),\\\"!=\\\",getString(right),0,\\\")\\\"));\\n\\t\\t\\treturn 1; /* due negation op */\\n\\t\\t}\\n\\t\\tif (precedence(op_l, op_r))\\n\\t\\t\\tpush(newVar3(getString(left),\\\"==\\\",getString(right)));\\n\\t\\telse\\n\\t\\t\\tpush(newVar_N(\\\"(\\\",getString(left),\\\"==\\\",getString(right),0,\\\")\\\"));\\n\\t\\tbreak;\\n\\tcase SWFACTION_LESS2:\\n\\t\\tif( OpCode(actions, n+1, maxn)  == SWFACTION_LOGICALNOT &&\\n\\t\\t    OpCode(actions, n+2, maxn) != SWFACTION_IF ) \\n\\t\\t{\\n\\t\\t\\top_r = OpCode(actions, n+2, maxn);\\n\\t\\t\\tif (precedence(op_l, op_r))\\n\\t\\t\\t\\tpush(newVar3(getString(left),\\\">=\\\",getString(right)));\\n\\t\\t\\telse\\n\\t\\t\\t\\tpush(newVar_N(\\\"(\\\",getString(left),\\\">=\\\",getString(right),0,\\\")\\\"));\\n\\t\\t\\treturn 1; /* due negation op */\\n\\t\\t}\\n\\t\\tif (precedence(op_l, op_r))\\n\\t\\t\\tpush(newVar3(getString(left),\\\"<\\\",getString(right)));\\n\\t\\telse\\n\\t\\t\\tpush(newVar_N(\\\"(\\\",getString(left),\\\"<\\\",getString(right),0,\\\")\\\"));\\n\\t\\tbreak;\\n\\tcase SWFACTION_GREATER:\\n\\t\\tif (precedence(op_l, op_r))\\n\\t\\t\\tpush(newVar3(getString(left),\\\">\\\",getString(right)));\\n\\t\\telse\\n\\t\\t\\tpush(newVar_N(\\\"(\\\",getString(left),\\\">\\\",getString(right),0,\\\")\\\"));\\n\\t\\tbreak;\\n\\tcase SWFACTION_LESSTHAN:\\n\\t\\tif (precedence(op_l, op_r))\\n\\t\\t\\tpush(newVar3(getString(left),\\\"<\\\",getString(right)));\\n\\t\\telse\\n\\t\\t\\tpush(newVar_N(\\\"(\\\",getString(left),\\\"<\\\",getString(right),0,\\\")\\\"));\\n\\t\\tbreak;\\n\\tcase SWFACTION_STRINGEQ:\\n\\t\\tif (precedence(op_l, op_r))\\n\\t\\t\\tpush(newVar3(getString(left),\\\"==\\\",getString(right)));\\n\\t\\telse\\n\\t\\t\\tpush(newVar_N(\\\"(\\\",getString(left),\\\"==\\\",getString(right),0,\\\")\\\"));\\n\\t\\tbreak;\\n\\tcase SWFACTION_STRINGCOMPARE:\\n\\t\\tputs(\\\"STRINGCOMPARE\\\");\\n\\t\\tbreak;\\n\\tcase SWFACTION_STRICTEQUALS:\\n#ifdef DECOMP_SWITCH\\n\\t\\tif  (OpCode(actions, n, maxn) == SWFACTION_IF)\\n\\t\\t{\\n\\t\\t\\tint code = actions[n+1].SWF_ACTIONIF.Actions[0].SWF_ACTIONRECORD.ActionCode;\\n\\t\\t\\tif(check_switch(code))\\n\\t\\t\\t{\\n\\t\\t\\t\\tpush(right);\\t// keep left and right side separated\\n\\t\\t\\t\\tpush(left);\\t// because it seems we have found a switch(){} and\\n\\t\\t\\t\\tbreak;\\t// let decompileIF() once more do all the dirty work\\n\\t\\t\\t}\\n\\t\\t}\\n#endif\\n\\t\\tif( OpCode(actions, n+1, maxn) == SWFACTION_LOGICALNOT &&\\n\\t\\t    OpCode(actions, n+2, maxn) != SWFACTION_IF ) \\n\\t\\t{\\n\\t\\t\\top_r = OpCode(actions, n+2, maxn);\\n\\t\\t\\tif (precedence(op_l, op_r))\\n\\t\\t\\t\\tpush(newVar3(getString(left),\\\"!==\\\",getString(right)));\\n\\t\\t\\telse\\n\\t\\t\\t\\tpush(newVar_N(\\\"(\\\",getString(left),\\\"!==\\\",getString(right),0,\\\")\\\"));\\n\\t\\t\\treturn 1; /* due negation op */\\n\\t\\t} else {\\n\\t\\t\\tif (precedence(op_l, op_r))\\n\\t\\t\\t\\tpush(newVar3(getString(left),\\\"===\\\",getString(right)));\\n\\t\\t\\telse\\n\\t\\t\\t\\tpush(newVar_N(\\\"(\\\",getString(left),\\\"===\\\",getString(right),0,\\\")\\\"));\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\tdefault:\\n\\t\\tprintf(\\\"Unhandled Arithmetic/Logic OP %x\\\\n\\\",\\n\\t\\t\\tactions[n].SWF_ACTIONRECORD.ActionCode);\\n\\t}\\n\\treturn 0;\\n}\\n\",\n            \"caller_start\": 1000,\n            \"file_path\": \"util/decompile.c\"\n          }\n        ]\n      },\n      {\n        \"source\": \"caller_info(file:read.c, func:readBytes)\",\n        \"result\": [\n          {\n            \"call_line\": 1468,\n            \"call_code\": \"readBytes(f, length)\",\n            \"caller_code\": \"SWF_Parserstruct *\\nparseSWF_CHARACTERSET (FILE * f, int length)\\n{\\n  PAR_BEGIN (SWF_CHARACTERSET);\\n  SKIP;\\n  PAR_END;\\n}\",\n            \"caller_start\": 1464,\n            \"file_path\": \"util/parser.c\"\n          },\n          {\n            \"call_line\": 1480,\n            \"call_code\": \"readBytes(f,end-fileOffset)\",\n            \"caller_code\": \"SWF_Parserstruct *\\nparseSWF_DEFINEBITS (FILE * f, int length)\\n{\\n  int end = fileOffset + length;\\n  PAR_BEGIN (SWF_DEFINEBITS);\\n\\n  parserrec->CharacterID = readUInt16 (f);\\n  parserrec->JPEGDataSize = end-fileOffset;\\n  parserrec->JPEGData = (UI8 *)readBytes(f,end-fileOffset);\\n\\n  PAR_END;\\n}\",\n            \"caller_start\": 1472,\n            \"file_path\": \"util/parser.c\"\n          },\n          {\n            \"call_line\": 1493,\n            \"call_code\": \"readBytes(f,end-fileOffset)\",\n            \"caller_code\": \"SWF_Parserstruct *\\nparseSWF_DEFINEBITSJPEG2 (FILE * f, int length)\\n{\\n  int end = fileOffset + length;\\n  PAR_BEGIN (SWF_DEFINEBITSJPEG2);\\n\\n  parserrec->CharacterID = readUInt16 (f);\\n  parserrec->JPEGDataSize = end-fileOffset;\\n  parserrec->JPEGData = (UI8 *)readBytes(f,end-fileOffset);\\n\\n  PAR_END;\\n}\",\n            \"caller_start\": 1485,\n            \"file_path\": \"util/parser.c\"\n          },\n          {\n            \"call_line\": 1506,\n            \"call_code\": \"readBytes(f,parserrec->AlphaDataOffset)\",\n            \"caller_code\": \"SWF_Parserstruct *\\nparseSWF_DEFINEBITSJPEG3 (FILE * f, int length)\\n{\\n  int end = fileOffset + length;\\n  PAR_BEGIN (SWF_DEFINEBITSJPEG3);\\n\\n  parserrec->CharacterID = readUInt16 (f);\\n  parserrec->AlphaDataOffset = readUInt32 (f);\\n  parserrec->JPEGData = (UI8 *)readBytes(f,parserrec->AlphaDataOffset);\\n  parserrec->AlphaDataSize = end-fileOffset;\\n  parserrec->BitmapAlphaData = (UI8 *)readBytes(f,end-fileOffset);\\n\\n\\n  PAR_END;\\n}\",\n            \"caller_start\": 1498,\n            \"file_path\": \"util/parser.c\"\n          },\n          {\n            \"call_line\": 1508,\n            \"call_code\": \"readBytes(f,end-fileOffset)\",\n            \"caller_code\": \"SWF_Parserstruct *\\nparseSWF_DEFINEBITSJPEG3 (FILE * f, int length)\\n{\\n  int end = fileOffset + length;\\n  PAR_BEGIN (SWF_DEFINEBITSJPEG3);\\n\\n  parserrec->CharacterID = readUInt16 (f);\\n  parserrec->AlphaDataOffset = readUInt32 (f);\\n  parserrec->JPEGData = (UI8 *)readBytes(f,parserrec->AlphaDataOffset);\\n  parserrec->AlphaDataSize = end-fileOffset;\\n  parserrec->BitmapAlphaData = (UI8 *)readBytes(f,end-fileOffset);\\n\\n\\n  PAR_END;\\n}\",\n            \"caller_start\": 1498,\n            \"file_path\": \"util/parser.c\"\n          },\n          {\n            \"call_line\": 1518,\n            \"call_code\": \"readBytes(f, length)\",\n            \"caller_code\": \"SWF_Parserstruct *\\nparseSWF_DEFINEBITSPTR (FILE * f, int length)\\n{\\n  PAR_BEGIN (SWF_DEFINEBITSPTR);\\n  SKIP;\\n  PAR_END;\\n}\",\n            \"caller_start\": 1514,\n            \"file_path\": \"util/parser.c\"\n          },\n          {\n            \"call_line\": 1637,\n            \"call_code\": \"readBytes(f, length)\",\n            \"caller_code\": \"SWF_Parserstruct *\\nparseSWF_DEFINECOMMANDOBJ (FILE * f, int length)\\n{\\n  PAR_BEGIN (SWF_DEFINECOMMANDOBJ);\\n  SKIP;\\n  PAR_END;\\n}\",\n            \"caller_start\": 1633,\n            \"file_path\": \"util/parser.c\"\n          },\n          {\n            \"call_line\": 2150,\n            \"call_code\": \"readBytes (f,end-fileOffset)\",\n            \"caller_code\": \"SWF_Parserstruct *\\nparseSWF_DEFINELOSSLESS (FILE * f, int length)\\n{\\n  int end = fileOffset + length;\\n  PAR_BEGIN (SWF_DEFINELOSSLESS);\\n\\n  parserrec->CharacterID = readUInt16 (f);\\n  parserrec->BitmapFormat = readUInt8 (f);\\n  parserrec->BitmapWidth = readUInt16 (f);\\n  parserrec->BitmapHeight = readUInt16 (f);\\n  if( parserrec->BitmapFormat == 3 /* 8-bit */ ) {\\n      parserrec->BitmapColorTableSize = readUInt8 (f);\\n  }\\n  parserrec->ZlibBitmapData = (UI8 *)readBytes (f,end-fileOffset);\\n\\n  PAR_END;\\n}\",\n            \"caller_start\": 2137,\n            \"file_path\": \"util/parser.c\"\n          }\n        ]\n      }\n    ]\n  },\n  {\n    \"stage\": \"analysis\",\n    \"need_context\": true,\n    \"root_cause_partial\": \"In decompile.c:865-871, OpCode accesses actions[n] without validating n < 1. If n is derived from untrusted SWF action data (e.g., via decompileGOTOFRAME:894), a crafted file could set n < 1, causing actions[n] to read invalid stack memory. The patch adds a check for n < 1 (return -998) to prevent this. In read.c:228-236, negative size values for readBytes could lead to undersized buffer allocation; the patch clamps size to 0. GAP: Parameters 'n' and 'size' sources in callers are not visible in current context.\",\n    \"required_context_next\": [\n      \"caller: util/decompile.c::isStoreOp\",\n      \"caller: util/decompile.c::decompileGOTOFRAME\",\n      \"caller: util/decompile.c::decompileGOTOFRAME2\",\n      \"caller: util/decompile.c::decompileArithmeticOp\"\n    ],\n    \"analysis_summary_text\": \"The root cause is identified as missing validation in OpCode for n < 1, leading to potential stack reads. The trigger chain is partially evidenced but lacks parameter source details. The readBytes fix prevents negative size reads. However, the origin of 'n' and 'size' parameters in callers remains untraced, requiring additional context.\"\n  },\n  {\n    \"stage\": \"collection\",\n    \"result\": [\n      {\n        \"source\": \"caller_info(file:decompile.c, func:isStoreOp)\",\n        \"result\": [\n          {\n            \"call_line\": 2687,\n            \"call_code\": \"isStoreOp(n+1, actions,maxn)\",\n            \"caller_code\": \"static int\\ndecompileDEFINEFUNCTION(int n, SWF_ACTION *actions, int maxn, int is_type2)\\n{\\n\\tint i,j,k,m,r;\\n\\tstruct SWF_ACTIONPUSHPARAM *myregs[ 256 ];\\n\\tstruct _stack *StackSave;    \\n\\tstruct SWF_ACTIONDEFINEFUNCTION2 *sactv2;\\n\\tstruct strbufinfo origbuf;\\n\\tOUT_BEGIN2(SWF_ACTIONDEFINEFUNCTION);\\n\\tsactv2 = (struct SWF_ACTIONDEFINEFUNCTION2*)sact;\\n\\n#ifdef DEBUG\\n\\tif(n+1 < maxn)\\n\\t{\\n\\t\\tprintln(\\\"/* function followed by OP %x */\\\", \\n\\t\\t        OpCode(actions, n+1, maxn));\\n\\t}\\n#endif\\n#if USE_LIB\\n\\tif (isStoreOp(n+1, actions,maxn) \\n\\t    || (  *sact->FunctionName==0 && !is_type2 )\\n\\t    || (*sactv2->FunctionName==0 && is_type2  ))\\n\\t{\\n\\t\\torigbuf=setTempString();\\t/* switch to a temporary string buffer */\\n\\t}\\n#endif\\n\\tputs(\\\"function \\\");\\n\\tif (is_type2)\\n\\t{\\n\\t\\tfor(j=1;j<sactv2->RegisterCount;j++) \\n\\t\\t{\\n\\t\\t\\tmyregs[j]=regs[j];\\n\\t\\t\\tregs[j]=NULL;\\n\\t\\t}\\n\\t\\tr=1;\\n\\t\\tif (sactv2->PreloadThisFlag)\\tregs[r++]=newVar(\\\"this\\\");\\n\\t\\tif (sactv2->PreloadArgumentsFlag)\\tregs[r++]=newVar(\\\"arguments\\\");\\n\\t\\tif (sactv2->PreloadSuperFlag)\\tregs[r++]=newVar(\\\"super\\\");\\n\\t\\tif (sactv2->PreloadRootFlag)\\tregs[r++]=newVar(\\\"root\\\");\\n\\t\\tif (sactv2->PreloadParentFlag)\\tregs[r++]=newVar(\\\"parent\\\");\\n\\t\\tif (sactv2->PreloadGlobalFlag)\\tregs[r++]=newVar(\\\"global\\\");\\n\\n\\t\\tputs(sactv2->FunctionName);\\n\\t\\tputs(\\\"(\\\");\\n\\n\\t\\tfor(i=0,m=0;i<sactv2->NumParams;i++) \\n\\t\\t{\\n\\t\\t\\tputs(sactv2->Params[i].ParamName);\\n\\t\\t\\tif ( sactv2->Params[i].Register)\\n\\t\\t\\t{\\n\\t\\t\\t\\t printf(\\\" /*=R%d*/ \\\",sactv2->Params[i].Register);\\n\\t\\t\\t\\t regs[sactv2->Params[i].Register] = newVar(sactv2->Params[i].ParamName);\\n\\t\\t\\t\\t m++;\\t\\t\\t\\t\\t// do not count 'void' etc\\n\\t\\t\\t}\\n\\t\\t\\tif( sactv2->NumParams > i+1 ) puts(\\\",\\\");\\n\\t\\t}\\n\\t\\tprintln(\\\") {\\\" );\\n\\t\\tif (r+m < sactv2->RegisterCount)\\n\\t\\t{\\n\\t\\t\\tINDENT\\n\\t\\t\\tputs(\\\"  var \\\");\\n\\t\\t}\\n\\t\\tfor(k=r;r<sactv2->RegisterCount;r++)\\n\\t\\t{\\n\\t\\t\\tif (!regs[r])\\n\\t\\t\\t{\\n\\t\\t\\t\\tchar *t=malloc(5); /* Rddd */\\n\\t\\t\\t\\tsprintf(t,\\\"R%d\\\", r );\\n\\t\\t\\t\\tputs (t);\\n\\t\\t\\t\\tif (k++ < sactv2->RegisterCount- m -1)\\n\\t\\t\\t\\t\\tputs(\\\", \\\");\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\tprintln(\\\";\\\" );\\n\\t\\t\\t\\tregs[r]=newVar(t);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tStackSave=Stack;\\n\\t\\tdecompileActions(sactv2->numActions, sactv2->Actions,gIndent+1);\\n#ifdef DEBUG\\n\\t\\tif (Stack!=StackSave)\\n\\t\\t{\\n\\t\\t\\tprintln(\\\"/* Stack problem in function code above */\\\");\\n\\t\\t}\\n#endif\\n\\t\\tStack=StackSave;\\n\\t\\tfor(j=1;j<sactv2->RegisterCount;j++) \\n\\t\\t\\tregs[j]=myregs[j];\\n\\t}\\n\\telse\\n\\t{\\n\\t\\tputs(sact->FunctionName);\\n\\t\\tputs(\\\"(\\\");\\n\\t\\tfor(i=0;i<sact->NumParams;i++) {\\n\\t\\t\\tputs(sact->Params[i]);\\n\\t\\t\\tif( sact->NumParams > i+1 ) puts(\\\",\\\");\\n\\t\\t}\\n\\t\\tprintln(\\\") {\\\" );\\n\\t\\tk=0;\\n\\t\\tif (sact->Actions[0].SWF_ACTIONRECORD.ActionCode == SWFACTION_PUSH)\\n\\t\\t{\\n\\t\\t\\tstruct SWF_ACTIONPUSH *sactPush=(struct SWF_ACTIONPUSH *)sact->Actions;\\n\\t\\t\\tfor(i=0;i<sactPush->NumParam;i++)\\n\\t\\t\\t{\\n\\t\\t\\t\\tif ((&(sactPush->Params[i]))->Type == PUSH_REGISTER) \\n\\t\\t\\t\\t\\tk++;\\t/* REGISTER */\\n\\t\\t\\t}\\n\\t\\t\\tif (k)\\n\\t\\t\\t{\\n\\t\\t\\t\\tINDENT\\n\\t\\t\\t\\tputs(\\\"  var \\\");\\n\\t\\t\\t\\tfor(i=1;i<=k;i++)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tchar *t=malloc(5); /* Rddd */\\n\\t\\t\\t\\t\\tsprintf(t,\\\"R%d\\\", i );\\n\\t\\t\\t\\t\\tputs (t);\\n\\t\\t\\t\\t\\tif (i < k)\\n\\t\\t\\t\\t\\t\\tputs(\\\", \\\");\\n\\t\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\t\\tprintln(\\\";\\\" );\\n\\t\\t\\t\\t\\tregs[i]=newVar(t);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tfor(j=1;j<=k;j++) \\n\\t\\t\\tmyregs[j]=regs[j];\\n\\t\\tStackSave=Stack;\\n\\t\\tdecompileActions(sact->numActions, sact->Actions,gIndent+1);\\n#ifdef DEBUG\\n\\t\\tif (Stack!=StackSave)\\n\\t\\t{\\n\\t\\t\\tprintln(\\\"/* Stack problem in function code above */\\\");\\n\\t\\t}\\n#endif\\n\\t\\tStack=StackSave;\\n\\t\\tfor(j=1;j<=k;j++) \\n\\t\\t\\tregs[j]=myregs[j];\\n\\t}\\n\\tINDENT\\n\\tif (isStoreOp(n+1, actions,maxn) \\n\\t    || ( *sact->FunctionName==0 && !is_type2 )\\n\\t    || (*sactv2->FunctionName==0 && is_type2 ))\\n\\t{\\n\\t\\tputs(\\\"}\\\");\\n#if USE_LIB\\n\\t\\tpush (newVar(dcgetstr()));\\t/* push func body for later assignment */\\n\\t\\tsetOrigString(origbuf);\\t\\t/* switch back to orig buffer */\\n#else\\n\\t\\tpush (newVar(\\\"/* see function code above */\\\"));\\t/* workaround only if LIB is not in use */\\n#endif\\n\\t}\\n\\telse\\n\\t\\tprintln(\\\"}\\\" );\\n\\treturn 0;\\n}\\n\",\n            \"caller_start\": 2668,\n            \"file_path\": \"util/decompile.c\"\n          },\n          {\n            \"call_line\": 2806,\n            \"call_code\": \"isStoreOp(n+1, actions,maxn)\",\n            \"caller_code\": \"static int\\ndecompileDEFINEFUNCTION(int n, SWF_ACTION *actions, int maxn, int is_type2)\\n{\\n\\tint i,j,k,m,r;\\n\\tstruct SWF_ACTIONPUSHPARAM *myregs[ 256 ];\\n\\tstruct _stack *StackSave;    \\n\\tstruct SWF_ACTIONDEFINEFUNCTION2 *sactv2;\\n\\tstruct strbufinfo origbuf;\\n\\tOUT_BEGIN2(SWF_ACTIONDEFINEFUNCTION);\\n\\tsactv2 = (struct SWF_ACTIONDEFINEFUNCTION2*)sact;\\n\\n#ifdef DEBUG\\n\\tif(n+1 < maxn)\\n\\t{\\n\\t\\tprintln(\\\"/* function followed by OP %x */\\\", \\n\\t\\t        OpCode(actions, n+1, maxn));\\n\\t}\\n#endif\\n#if USE_LIB\\n\\tif (isStoreOp(n+1, actions,maxn) \\n\\t    || (  *sact->FunctionName==0 && !is_type2 )\\n\\t    || (*sactv2->FunctionName==0 && is_type2  ))\\n\\t{\\n\\t\\torigbuf=setTempString();\\t/* switch to a temporary string buffer */\\n\\t}\\n#endif\\n\\tputs(\\\"function \\\");\\n\\tif (is_type2)\\n\\t{\\n\\t\\tfor(j=1;j<sactv2->RegisterCount;j++) \\n\\t\\t{\\n\\t\\t\\tmyregs[j]=regs[j];\\n\\t\\t\\tregs[j]=NULL;\\n\\t\\t}\\n\\t\\tr=1;\\n\\t\\tif (sactv2->PreloadThisFlag)\\tregs[r++]=newVar(\\\"this\\\");\\n\\t\\tif (sactv2->PreloadArgumentsFlag)\\tregs[r++]=newVar(\\\"arguments\\\");\\n\\t\\tif (sactv2->PreloadSuperFlag)\\tregs[r++]=newVar(\\\"super\\\");\\n\\t\\tif (sactv2->PreloadRootFlag)\\tregs[r++]=newVar(\\\"root\\\");\\n\\t\\tif (sactv2->PreloadParentFlag)\\tregs[r++]=newVar(\\\"parent\\\");\\n\\t\\tif (sactv2->PreloadGlobalFlag)\\tregs[r++]=newVar(\\\"global\\\");\\n\\n\\t\\tputs(sactv2->FunctionName);\\n\\t\\tputs(\\\"(\\\");\\n\\n\\t\\tfor(i=0,m=0;i<sactv2->NumParams;i++) \\n\\t\\t{\\n\\t\\t\\tputs(sactv2->Params[i].ParamName);\\n\\t\\t\\tif ( sactv2->Params[i].Register)\\n\\t\\t\\t{\\n\\t\\t\\t\\t printf(\\\" /*=R%d*/ \\\",sactv2->Params[i].Register);\\n\\t\\t\\t\\t regs[sactv2->Params[i].Register] = newVar(sactv2->Params[i].ParamName);\\n\\t\\t\\t\\t m++;\\t\\t\\t\\t\\t// do not count 'void' etc\\n\\t\\t\\t}\\n\\t\\t\\tif( sactv2->NumParams > i+1 ) puts(\\\",\\\");\\n\\t\\t}\\n\\t\\tprintln(\\\") {\\\" );\\n\\t\\tif (r+m < sactv2->RegisterCount)\\n\\t\\t{\\n\\t\\t\\tINDENT\\n\\t\\t\\tputs(\\\"  var \\\");\\n\\t\\t}\\n\\t\\tfor(k=r;r<sactv2->RegisterCount;r++)\\n\\t\\t{\\n\\t\\t\\tif (!regs[r])\\n\\t\\t\\t{\\n\\t\\t\\t\\tchar *t=malloc(5); /* Rddd */\\n\\t\\t\\t\\tsprintf(t,\\\"R%d\\\", r );\\n\\t\\t\\t\\tputs (t);\\n\\t\\t\\t\\tif (k++ < sactv2->RegisterCount- m -1)\\n\\t\\t\\t\\t\\tputs(\\\", \\\");\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\tprintln(\\\";\\\" );\\n\\t\\t\\t\\tregs[r]=newVar(t);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tStackSave=Stack;\\n\\t\\tdecompileActions(sactv2->numActions, sactv2->Actions,gIndent+1);\\n#ifdef DEBUG\\n\\t\\tif (Stack!=StackSave)\\n\\t\\t{\\n\\t\\t\\tprintln(\\\"/* Stack problem in function code above */\\\");\\n\\t\\t}\\n#endif\\n\\t\\tStack=StackSave;\\n\\t\\tfor(j=1;j<sactv2->RegisterCount;j++) \\n\\t\\t\\tregs[j]=myregs[j];\\n\\t}\\n\\telse\\n\\t{\\n\\t\\tputs(sact->FunctionName);\\n\\t\\tputs(\\\"(\\\");\\n\\t\\tfor(i=0;i<sact->NumParams;i++) {\\n\\t\\t\\tputs(sact->Params[i]);\\n\\t\\t\\tif( sact->NumParams > i+1 ) puts(\\\",\\\");\\n\\t\\t}\\n\\t\\tprintln(\\\") {\\\" );\\n\\t\\tk=0;\\n\\t\\tif (sact->Actions[0].SWF_ACTIONRECORD.ActionCode == SWFACTION_PUSH)\\n\\t\\t{\\n\\t\\t\\tstruct SWF_ACTIONPUSH *sactPush=(struct SWF_ACTIONPUSH *)sact->Actions;\\n\\t\\t\\tfor(i=0;i<sactPush->NumParam;i++)\\n\\t\\t\\t{\\n\\t\\t\\t\\tif ((&(sactPush->Params[i]))->Type == PUSH_REGISTER) \\n\\t\\t\\t\\t\\tk++;\\t/* REGISTER */\\n\\t\\t\\t}\\n\\t\\t\\tif (k)\\n\\t\\t\\t{\\n\\t\\t\\t\\tINDENT\\n\\t\\t\\t\\tputs(\\\"  var \\\");\\n\\t\\t\\t\\tfor(i=1;i<=k;i++)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tchar *t=malloc(5); /* Rddd */\\n\\t\\t\\t\\t\\tsprintf(t,\\\"R%d\\\", i );\\n\\t\\t\\t\\t\\tputs (t);\\n\\t\\t\\t\\t\\tif (i < k)\\n\\t\\t\\t\\t\\t\\tputs(\\\", \\\");\\n\\t\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\t\\tprintln(\\\";\\\" );\\n\\t\\t\\t\\t\\tregs[i]=newVar(t);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tfor(j=1;j<=k;j++) \\n\\t\\t\\tmyregs[j]=regs[j];\\n\\t\\tStackSave=Stack;\\n\\t\\tdecompileActions(sact->numActions, sact->Actions,gIndent+1);\\n#ifdef DEBUG\\n\\t\\tif (Stack!=StackSave)\\n\\t\\t{\\n\\t\\t\\tprintln(\\\"/* Stack problem in function code above */\\\");\\n\\t\\t}\\n#endif\\n\\t\\tStack=StackSave;\\n\\t\\tfor(j=1;j<=k;j++) \\n\\t\\t\\tregs[j]=myregs[j];\\n\\t}\\n\\tINDENT\\n\\tif (isStoreOp(n+1, actions,maxn) \\n\\t    || ( *sact->FunctionName==0 && !is_type2 )\\n\\t    || (*sactv2->FunctionName==0 && is_type2 ))\\n\\t{\\n\\t\\tputs(\\\"}\\\");\\n#if USE_LIB\\n\\t\\tpush (newVar(dcgetstr()));\\t/* push func body for later assignment */\\n\\t\\tsetOrigString(origbuf);\\t\\t/* switch back to orig buffer */\\n#else\\n\\t\\tpush (newVar(\\\"/* see function code above */\\\"));\\t/* workaround only if LIB is not in use */\\n#endif\\n\\t}\\n\\telse\\n\\t\\tprintln(\\\"}\\\" );\\n\\treturn 0;\\n}\\n\",\n            \"caller_start\": 2668,\n            \"file_path\": \"util/decompile.c\"\n          }\n        ]\n      },\n      {\n        \"source\": \"caller_info(file:decompile.c, func:decompileGOTOFRAME)\",\n        \"result\": [\n          {\n            \"call_line\": 3135,\n            \"call_code\": \"decompileGOTOFRAME(n, actions, maxn,1)\",\n            \"caller_code\": \"int\\ndecompileAction(int n, SWF_ACTION *actions, int maxn)\\n{\\n\\tif( n > maxn ) SWF_error(\\\"Action overflow!!\\\");\\n\\n#ifdef DEBUG\\n\\tfprintf(stderr,\\\"%d:\\\\tACTION[%3.3d]: %s\\\\n\\\",\\n\\t        actions[n].SWF_ACTIONRECORD.Offset, n, \\n\\t        actionName(actions[n].SWF_ACTIONRECORD.ActionCode));\\n#endif\\n\\n\\tswitch(actions[n].SWF_ACTIONRECORD.ActionCode)\\n\\t{\\n\\tcase SWFACTION_END:\\n\\t\\treturn 0;\\n\\n\\tcase SWFACTION_CONSTANTPOOL:\\n\\t\\tdecompileCONSTANTPOOL(&actions[n]);\\n\\t\\treturn 0;\\n\\n\\tcase SWFACTION_GOTOLABEL:\\n\\t\\treturn decompileGOTOFRAME(n, actions, maxn,1);\\n\\n\\tcase SWFACTION_GOTOFRAME:\\n\\t\\treturn decompileGOTOFRAME(n, actions, maxn,0);\\n\\n\\tcase SWFACTION_GOTOFRAME2:\\n\\t\\treturn decompileGOTOFRAME2(n, actions, maxn);\\n\\n\\tcase SWFACTION_WAITFORFRAME:\\n\\t\\tdecompileWAITFORFRAME(&actions[n]);\\n\\t\\treturn 0;\\n\\n\\tcase SWFACTION_GETURL2:\\n\\t\\tdecompileGETURL2(&actions[n]);\\n\\t\\treturn 0;\\n\\n\\tcase SWFACTION_GETURL:\\n\\t\\tdecompileGETURL(&actions[n]);\\n\\t\\treturn 0;\\n\\n\\tcase SWFACTION_PUSH:\\n\\t\\tdecompilePUSH(&actions[n]);\\n\\t\\treturn 0;\\n\\n\\tcase SWFACTION_PUSHDUP:\\n\\t\\tdecompilePUSHDUP(&actions[n]);\\n\\t\\treturn 0;\\n\\n\\tcase SWFACTION_STACKSWAP:\\n\\t\\tdecompileSTACKSWAP(&actions[n]);\\t\\n\\t\\treturn 0;\\n\\n\\tcase SWFACTION_SETPROPERTY:\\n\\t\\tdecompileSETPROPERTY(n, actions, maxn);\\n\\t\\treturn 0;\\n\\n\\tcase SWFACTION_GETPROPERTY:\\n\\t\\tdecompileGETPROPERTY(n, actions, maxn);\\n\\t\\treturn 0;\\n\\n\\tcase SWFACTION_GETTIME:\\n\\t\\treturn decompileGETTIME(n, actions, maxn);\\n\\n\\tcase SWFACTION_TRACE:\\n\\t\\tdecompileTRACE(n, actions, maxn);\\n\\t\\treturn 0;\\n\\n\\tcase SWFACTION_CALLFRAME:\\n\\t\\tdecompileCALLFRAME(n, actions, maxn);\\n\\t\\treturn 0;\\n\\n\\tcase SWFACTION_EXTENDS:\\n\\t\\tdecompileEXTENDS(n, actions, maxn);\\n\\t\\treturn 0;\\n\\n\\tcase SWFACTION_INITOBJECT:\\n\\t\\tdecompileINITOBJECT(n, actions, maxn);\\n\\t\\treturn 0;\\t        \\n\\n\\tcase SWFACTION_NEWOBJECT:\\n\\t\\tdecompileNEWOBJECT(n, actions, maxn);\\n\\t\\treturn 0;\\n\\n\\tcase SWFACTION_NEWMETHOD:\\n\\t\\tdecompileNEWMETHOD(n, actions, maxn);\\n\\t\\treturn 0;\\n\\n\\tcase SWFACTION_GETMEMBER:\\n\\t\\tdecompileGETMEMBER(n, actions, maxn);\\n\\t\\treturn 0;\\n\\n\\tcase SWFACTION_SETMEMBER:\\n\\t\\tdecompileSETMEMBER(n, actions, maxn);\\n\\t\\treturn 0;\\n\\n\\tcase SWFACTION_GETVARIABLE:\\n\\t\\tdecompileGETVARIABLE(n, actions, maxn);\\n\\t\\treturn 0;\\n\\n\\tcase SWFACTION_SETVARIABLE:\\n\\t\\tdecompileSETVARIABLE(n, actions, maxn, 0);\\n\\t\\treturn 0;\\n\\n\\tcase SWFACTION_DEFINELOCAL:\\n\\t\\tdecompileSETVARIABLE(n, actions, maxn, 1);\\n\\t\\treturn 0;\\n\\n\\tcase SWFACTION_DEFINELOCAL2:\\n\\t\\tdecompileDEFINELOCAL2(n, actions, maxn);\\n\\t\\treturn 0;\\n\\n\\tcase SWFACTION_DECREMENT:\\n\\t\\treturn decompileINCR_DECR(n, actions, maxn, 0);\\n\\n\\tcase SWFACTION_INCREMENT:\\n\\t\\treturn decompileINCR_DECR(n, actions, maxn,1);\\n\\n\\tcase SWFACTION_STOREREGISTER:\\n\\t\\tdecompileSTOREREGISTER(n, actions, maxn);\\n\\t\\treturn 0;\\n\\n\\tcase SWFACTION_JUMP:\\n\\t\\treturn decompileJUMP(n, actions, maxn);\\n\\n\\tcase SWFACTION_RETURN:\\n\\t\\tdecompileRETURN(n, actions, maxn);\\n\\t\\treturn 0;\\n\\n\\tcase SWFACTION_LOGICALNOT:\\n\\t\\treturn decompileLogicalNot(n, actions, maxn);\\n\\n\\tcase SWFACTION_IF:\\n\\t\\treturn decompileIF(n, actions, maxn);\\n\\n\\tcase SWFACTION_WITH:\\n\\t\\tdecompileWITH(n, actions, maxn);\\n\\t\\treturn 0;\\n\\n\\tcase SWFACTION_ENUMERATE:\\n\\t\\treturn decompileENUMERATE(n, actions, maxn, 0);\\n\\n\\tcase SWFACTION_ENUMERATE2 :\\n\\t\\treturn decompileENUMERATE(n, actions, maxn,1);\\n\\n\\tcase SWFACTION_INITARRAY:\\n\\t\\treturn decompileINITARRAY(n, actions, maxn);\\n\\n\\tcase SWFACTION_DEFINEFUNCTION:\\t\\n\\t\\treturn decompileDEFINEFUNCTION(n, actions, maxn,0);\\n\\n\\tcase SWFACTION_DEFINEFUNCTION2:\\n\\t\\treturn decompileDEFINEFUNCTION(n, actions, maxn,1);\\n\\n\\tcase SWFACTION_CALLFUNCTION:\\n\\t\\treturn decompileCALLFUNCTION(n, actions, maxn);\\n\\n\\tcase SWFACTION_CALLMETHOD:\\n\\t\\treturn decompileCALLMETHOD(n, actions, maxn);\\n\\n\\tcase SWFACTION_INSTANCEOF:\\n\\tcase SWFACTION_SHIFTLEFT:\\n\\tcase SWFACTION_SHIFTRIGHT:\\n\\tcase SWFACTION_SHIFTRIGHT2:        \\n\\tcase SWFACTION_ADD:\\n\\tcase SWFACTION_ADD2:\\n\\tcase SWFACTION_SUBTRACT:\\n\\tcase SWFACTION_MULTIPLY:\\n\\tcase SWFACTION_DIVIDE:\\n\\tcase SWFACTION_MODULO:\\n\\tcase SWFACTION_BITWISEAND:\\n\\tcase SWFACTION_BITWISEOR:\\n\\tcase SWFACTION_BITWISEXOR:\\n\\tcase SWFACTION_EQUAL:\\n\\tcase SWFACTION_EQUALS2:\\n\\tcase SWFACTION_LESS2:\\n\\tcase SWFACTION_LOGICALAND:\\n\\tcase SWFACTION_LOGICALOR:\\n\\tcase SWFACTION_GREATER:\\n\\tcase SWFACTION_LESSTHAN:\\n\\tcase SWFACTION_STRINGEQ:\\n\\tcase SWFACTION_STRINGCOMPARE:\\n\\tcase SWFACTION_STRICTEQUALS:\\n\\t\\treturn decompileArithmeticOp(n, actions, maxn);\\n\\n\\tcase SWFACTION_POP:\\n\\t\\tpop();\\n\\t\\treturn 0;\\n\\n\\tcase SWFACTION_STARTDRAG:\\n\\t\\treturn decompileSTARTDRAG(n, actions, maxn);\\n\\n\\tcase SWFACTION_DELETE:\\n\\t\\treturn decompileDELETE(n, actions, maxn,0);\\n\\n\\tcase SWFACTION_DELETE2:\\n\\t\\treturn decompileDELETE(n, actions, maxn,1);\\n\\n\\tcase SWFACTION_TARGETPATH:\\n\\t\\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\\\"targetPath\\\");\\n\\n\\tcase SWFACTION_TYPEOF:\\n\\t\\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\\\"typeof\\\");\\n\\n\\tcase SWFACTION_ORD:\\n\\t\\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\\\"ord\\\");\\n\\n\\tcase SWFACTION_CHR:\\n\\t\\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\\\"chr\\\");\\n\\n\\tcase SWFACTION_INT:\\n\\t\\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\\\"int\\\");\\n\\n\\tcase SWFACTION_TOSTRING:\\n\\t\\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\\\"String\\\");     \\n\\n\\tcase SWFACTION_TONUMBER:\\n\\t\\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\\\"Number\\\");\\n\\n\\tcase SWFACTION_RANDOMNUMBER:\\n\\t\\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\\\"random\\\");\\n\\n\\tcase SWFACTION_STRINGLENGTH:\\n\\t\\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\\\"length\\\");\\n\\n\\tcase SWFACTION_PLAY:\\n\\t\\treturn decompile_Null_ArgBuiltInFunctionCall(n, actions, maxn,\\\"play\\\");\\n\\n\\tcase SWFACTION_STOP:\\n\\t\\treturn decompile_Null_ArgBuiltInFunctionCall(n, actions, maxn,\\\"stop\\\");\\n\\n\\tcase SWFACTION_NEXTFRAME:\\n\\t\\treturn decompile_Null_ArgBuiltInFunctionCall(n, actions, maxn,\\\"nextFrame\\\");\\n\\n\\tcase SWFACTION_PREVFRAME:\\n\\t\\treturn decompile_Null_ArgBuiltInFunctionCall(n, actions, maxn,\\\"prevFrame\\\");\\n\\n\\tcase SWFACTION_ENDDRAG:\\n\\t\\treturn decompile_Null_ArgBuiltInFunctionCall(n, actions, maxn,\\\"stopDrag\\\");\\n\\n\\tcase SWFACTION_STOPSOUNDS:\\n\\t\\treturn decompile_Null_ArgBuiltInFunctionCall(n, actions, maxn,\\\"stopAllSounds\\\");   \\n\\n\\tcase SWFACTION_TOGGLEQUALITY:\\n\\t\\treturn decompile_Null_ArgBuiltInFunctionCall(n, actions, maxn,\\\"toggleHighQuality\\\");      \\n\\n\\tcase SWFACTION_MBSUBSTRING:\\n\\tcase SWFACTION_SUBSTRING:\\n\\t\\treturn decompileSUBSTRING(n, actions, maxn);\\n\\n\\tcase SWFACTION_STRINGCONCAT:\\n\\t\\treturn decompileSTRINGCONCAT(n, actions, maxn);\\n\\n\\tcase SWFACTION_REMOVECLIP:\\n\\t\\treturn decompileREMOVECLIP(n, actions, maxn);\\n\\n\\tcase SWFACTION_DUPLICATECLIP:\\n\\t\\treturn decompileDUPLICATECLIP(n, actions, maxn);\\n\\n\\tcase SWFACTION_SETTARGET:\\n\\t\\treturn decompileSETTARGET(n, actions, maxn,0);\\n\\n\\tcase SWFACTION_SETTARGET2:\\n\\t\\treturn decompileSETTARGET(n, actions, maxn,1);\\n\\n\\tcase SWFACTION_IMPLEMENTSOP:\\n\\t\\treturn decompileIMPLEMENTS(n, actions, maxn);\\n\\n\\tcase SWFACTION_CASTOP:\\n\\t\\treturn decompileCAST(n, actions, maxn);\\n\\n\\tcase SWFACTION_THROW:\\n\\t\\treturn decompileTHROW(n, actions, maxn);\\n\\n\\tcase SWFACTION_TRY:\\n\\t\\treturn decompileTRY(n, actions, maxn);\\n\\n\\tdefault:\\n\\t\\toutputSWF_ACTION(n,&actions[n]);\\n\\t\\treturn 0;\\n\\t}\\n}\\n\",\n            \"caller_start\": 3114,\n            \"file_path\": \"util/decompile.c\"\n          },\n          {\n            \"call_line\": 3138,\n            \"call_code\": \"decompileGOTOFRAME(n, actions, maxn,0)\",\n            \"caller_code\": \"int\\ndecompileAction(int n, SWF_ACTION *actions, int maxn)\\n{\\n\\tif( n > maxn ) SWF_error(\\\"Action overflow!!\\\");\\n\\n#ifdef DEBUG\\n\\tfprintf(stderr,\\\"%d:\\\\tACTION[%3.3d]: %s\\\\n\\\",\\n\\t        actions[n].SWF_ACTIONRECORD.Offset, n, \\n\\t        actionName(actions[n].SWF_ACTIONRECORD.ActionCode));\\n#endif\\n\\n\\tswitch(actions[n].SWF_ACTIONRECORD.ActionCode)\\n\\t{\\n\\tcase SWFACTION_END:\\n\\t\\treturn 0;\\n\\n\\tcase SWFACTION_CONSTANTPOOL:\\n\\t\\tdecompileCONSTANTPOOL(&actions[n]);\\n\\t\\treturn 0;\\n\\n\\tcase SWFACTION_GOTOLABEL:\\n\\t\\treturn decompileGOTOFRAME(n, actions, maxn,1);\\n\\n\\tcase SWFACTION_GOTOFRAME:\\n\\t\\treturn decompileGOTOFRAME(n, actions, maxn,0);\\n\\n\\tcase SWFACTION_GOTOFRAME2:\\n\\t\\treturn decompileGOTOFRAME2(n, actions, maxn);\\n\\n\\tcase SWFACTION_WAITFORFRAME:\\n\\t\\tdecompileWAITFORFRAME(&actions[n]);\\n\\t\\treturn 0;\\n\\n\\tcase SWFACTION_GETURL2:\\n\\t\\tdecompileGETURL2(&actions[n]);\\n\\t\\treturn 0;\\n\\n\\tcase SWFACTION_GETURL:\\n\\t\\tdecompileGETURL(&actions[n]);\\n\\t\\treturn 0;\\n\\n\\tcase SWFACTION_PUSH:\\n\\t\\tdecompilePUSH(&actions[n]);\\n\\t\\treturn 0;\\n\\n\\tcase SWFACTION_PUSHDUP:\\n\\t\\tdecompilePUSHDUP(&actions[n]);\\n\\t\\treturn 0;\\n\\n\\tcase SWFACTION_STACKSWAP:\\n\\t\\tdecompileSTACKSWAP(&actions[n]);\\t\\n\\t\\treturn 0;\\n\\n\\tcase SWFACTION_SETPROPERTY:\\n\\t\\tdecompileSETPROPERTY(n, actions, maxn);\\n\\t\\treturn 0;\\n\\n\\tcase SWFACTION_GETPROPERTY:\\n\\t\\tdecompileGETPROPERTY(n, actions, maxn);\\n\\t\\treturn 0;\\n\\n\\tcase SWFACTION_GETTIME:\\n\\t\\treturn decompileGETTIME(n, actions, maxn);\\n\\n\\tcase SWFACTION_TRACE:\\n\\t\\tdecompileTRACE(n, actions, maxn);\\n\\t\\treturn 0;\\n\\n\\tcase SWFACTION_CALLFRAME:\\n\\t\\tdecompileCALLFRAME(n, actions, maxn);\\n\\t\\treturn 0;\\n\\n\\tcase SWFACTION_EXTENDS:\\n\\t\\tdecompileEXTENDS(n, actions, maxn);\\n\\t\\treturn 0;\\n\\n\\tcase SWFACTION_INITOBJECT:\\n\\t\\tdecompileINITOBJECT(n, actions, maxn);\\n\\t\\treturn 0;\\t        \\n\\n\\tcase SWFACTION_NEWOBJECT:\\n\\t\\tdecompileNEWOBJECT(n, actions, maxn);\\n\\t\\treturn 0;\\n\\n\\tcase SWFACTION_NEWMETHOD:\\n\\t\\tdecompileNEWMETHOD(n, actions, maxn);\\n\\t\\treturn 0;\\n\\n\\tcase SWFACTION_GETMEMBER:\\n\\t\\tdecompileGETMEMBER(n, actions, maxn);\\n\\t\\treturn 0;\\n\\n\\tcase SWFACTION_SETMEMBER:\\n\\t\\tdecompileSETMEMBER(n, actions, maxn);\\n\\t\\treturn 0;\\n\\n\\tcase SWFACTION_GETVARIABLE:\\n\\t\\tdecompileGETVARIABLE(n, actions, maxn);\\n\\t\\treturn 0;\\n\\n\\tcase SWFACTION_SETVARIABLE:\\n\\t\\tdecompileSETVARIABLE(n, actions, maxn, 0);\\n\\t\\treturn 0;\\n\\n\\tcase SWFACTION_DEFINELOCAL:\\n\\t\\tdecompileSETVARIABLE(n, actions, maxn, 1);\\n\\t\\treturn 0;\\n\\n\\tcase SWFACTION_DEFINELOCAL2:\\n\\t\\tdecompileDEFINELOCAL2(n, actions, maxn);\\n\\t\\treturn 0;\\n\\n\\tcase SWFACTION_DECREMENT:\\n\\t\\treturn decompileINCR_DECR(n, actions, maxn, 0);\\n\\n\\tcase SWFACTION_INCREMENT:\\n\\t\\treturn decompileINCR_DECR(n, actions, maxn,1);\\n\\n\\tcase SWFACTION_STOREREGISTER:\\n\\t\\tdecompileSTOREREGISTER(n, actions, maxn);\\n\\t\\treturn 0;\\n\\n\\tcase SWFACTION_JUMP:\\n\\t\\treturn decompileJUMP(n, actions, maxn);\\n\\n\\tcase SWFACTION_RETURN:\\n\\t\\tdecompileRETURN(n, actions, maxn);\\n\\t\\treturn 0;\\n\\n\\tcase SWFACTION_LOGICALNOT:\\n\\t\\treturn decompileLogicalNot(n, actions, maxn);\\n\\n\\tcase SWFACTION_IF:\\n\\t\\treturn decompileIF(n, actions, maxn);\\n\\n\\tcase SWFACTION_WITH:\\n\\t\\tdecompileWITH(n, actions, maxn);\\n\\t\\treturn 0;\\n\\n\\tcase SWFACTION_ENUMERATE:\\n\\t\\treturn decompileENUMERATE(n, actions, maxn, 0);\\n\\n\\tcase SWFACTION_ENUMERATE2 :\\n\\t\\treturn decompileENUMERATE(n, actions, maxn,1);\\n\\n\\tcase SWFACTION_INITARRAY:\\n\\t\\treturn decompileINITARRAY(n, actions, maxn);\\n\\n\\tcase SWFACTION_DEFINEFUNCTION:\\t\\n\\t\\treturn decompileDEFINEFUNCTION(n, actions, maxn,0);\\n\\n\\tcase SWFACTION_DEFINEFUNCTION2:\\n\\t\\treturn decompileDEFINEFUNCTION(n, actions, maxn,1);\\n\\n\\tcase SWFACTION_CALLFUNCTION:\\n\\t\\treturn decompileCALLFUNCTION(n, actions, maxn);\\n\\n\\tcase SWFACTION_CALLMETHOD:\\n\\t\\treturn decompileCALLMETHOD(n, actions, maxn);\\n\\n\\tcase SWFACTION_INSTANCEOF:\\n\\tcase SWFACTION_SHIFTLEFT:\\n\\tcase SWFACTION_SHIFTRIGHT:\\n\\tcase SWFACTION_SHIFTRIGHT2:        \\n\\tcase SWFACTION_ADD:\\n\\tcase SWFACTION_ADD2:\\n\\tcase SWFACTION_SUBTRACT:\\n\\tcase SWFACTION_MULTIPLY:\\n\\tcase SWFACTION_DIVIDE:\\n\\tcase SWFACTION_MODULO:\\n\\tcase SWFACTION_BITWISEAND:\\n\\tcase SWFACTION_BITWISEOR:\\n\\tcase SWFACTION_BITWISEXOR:\\n\\tcase SWFACTION_EQUAL:\\n\\tcase SWFACTION_EQUALS2:\\n\\tcase SWFACTION_LESS2:\\n\\tcase SWFACTION_LOGICALAND:\\n\\tcase SWFACTION_LOGICALOR:\\n\\tcase SWFACTION_GREATER:\\n\\tcase SWFACTION_LESSTHAN:\\n\\tcase SWFACTION_STRINGEQ:\\n\\tcase SWFACTION_STRINGCOMPARE:\\n\\tcase SWFACTION_STRICTEQUALS:\\n\\t\\treturn decompileArithmeticOp(n, actions, maxn);\\n\\n\\tcase SWFACTION_POP:\\n\\t\\tpop();\\n\\t\\treturn 0;\\n\\n\\tcase SWFACTION_STARTDRAG:\\n\\t\\treturn decompileSTARTDRAG(n, actions, maxn);\\n\\n\\tcase SWFACTION_DELETE:\\n\\t\\treturn decompileDELETE(n, actions, maxn,0);\\n\\n\\tcase SWFACTION_DELETE2:\\n\\t\\treturn decompileDELETE(n, actions, maxn,1);\\n\\n\\tcase SWFACTION_TARGETPATH:\\n\\t\\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\\\"targetPath\\\");\\n\\n\\tcase SWFACTION_TYPEOF:\\n\\t\\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\\\"typeof\\\");\\n\\n\\tcase SWFACTION_ORD:\\n\\t\\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\\\"ord\\\");\\n\\n\\tcase SWFACTION_CHR:\\n\\t\\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\\\"chr\\\");\\n\\n\\tcase SWFACTION_INT:\\n\\t\\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\\\"int\\\");\\n\\n\\tcase SWFACTION_TOSTRING:\\n\\t\\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\\\"String\\\");     \\n\\n\\tcase SWFACTION_TONUMBER:\\n\\t\\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\\\"Number\\\");\\n\\n\\tcase SWFACTION_RANDOMNUMBER:\\n\\t\\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\\\"random\\\");\\n\\n\\tcase SWFACTION_STRINGLENGTH:\\n\\t\\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\\\"length\\\");\\n\\n\\tcase SWFACTION_PLAY:\\n\\t\\treturn decompile_Null_ArgBuiltInFunctionCall(n, actions, maxn,\\\"play\\\");\\n\\n\\tcase SWFACTION_STOP:\\n\\t\\treturn decompile_Null_ArgBuiltInFunctionCall(n, actions, maxn,\\\"stop\\\");\\n\\n\\tcase SWFACTION_NEXTFRAME:\\n\\t\\treturn decompile_Null_ArgBuiltInFunctionCall(n, actions, maxn,\\\"nextFrame\\\");\\n\\n\\tcase SWFACTION_PREVFRAME:\\n\\t\\treturn decompile_Null_ArgBuiltInFunctionCall(n, actions, maxn,\\\"prevFrame\\\");\\n\\n\\tcase SWFACTION_ENDDRAG:\\n\\t\\treturn decompile_Null_ArgBuiltInFunctionCall(n, actions, maxn,\\\"stopDrag\\\");\\n\\n\\tcase SWFACTION_STOPSOUNDS:\\n\\t\\treturn decompile_Null_ArgBuiltInFunctionCall(n, actions, maxn,\\\"stopAllSounds\\\");   \\n\\n\\tcase SWFACTION_TOGGLEQUALITY:\\n\\t\\treturn decompile_Null_ArgBuiltInFunctionCall(n, actions, maxn,\\\"toggleHighQuality\\\");      \\n\\n\\tcase SWFACTION_MBSUBSTRING:\\n\\tcase SWFACTION_SUBSTRING:\\n\\t\\treturn decompileSUBSTRING(n, actions, maxn);\\n\\n\\tcase SWFACTION_STRINGCONCAT:\\n\\t\\treturn decompileSTRINGCONCAT(n, actions, maxn);\\n\\n\\tcase SWFACTION_REMOVECLIP:\\n\\t\\treturn decompileREMOVECLIP(n, actions, maxn);\\n\\n\\tcase SWFACTION_DUPLICATECLIP:\\n\\t\\treturn decompileDUPLICATECLIP(n, actions, maxn);\\n\\n\\tcase SWFACTION_SETTARGET:\\n\\t\\treturn decompileSETTARGET(n, actions, maxn,0);\\n\\n\\tcase SWFACTION_SETTARGET2:\\n\\t\\treturn decompileSETTARGET(n, actions, maxn,1);\\n\\n\\tcase SWFACTION_IMPLEMENTSOP:\\n\\t\\treturn decompileIMPLEMENTS(n, actions, maxn);\\n\\n\\tcase SWFACTION_CASTOP:\\n\\t\\treturn decompileCAST(n, actions, maxn);\\n\\n\\tcase SWFACTION_THROW:\\n\\t\\treturn decompileTHROW(n, actions, maxn);\\n\\n\\tcase SWFACTION_TRY:\\n\\t\\treturn decompileTRY(n, actions, maxn);\\n\\n\\tdefault:\\n\\t\\toutputSWF_ACTION(n,&actions[n]);\\n\\t\\treturn 0;\\n\\t}\\n}\\n\",\n            \"caller_start\": 3114,\n            \"file_path\": \"util/decompile.c\"\n          }\n        ]\n      },\n      {\n        \"source\": \"caller_info(file:decompile.c, func:decompileGOTOFRAME2)\",\n        \"result\": [\n          {\n            \"call_line\": 3141,\n            \"call_code\": \"decompileGOTOFRAME2(n, actions, maxn)\",\n            \"caller_code\": \"int\\ndecompileAction(int n, SWF_ACTION *actions, int maxn)\\n{\\n\\tif( n > maxn ) SWF_error(\\\"Action overflow!!\\\");\\n\\n#ifdef DEBUG\\n\\tfprintf(stderr,\\\"%d:\\\\tACTION[%3.3d]: %s\\\\n\\\",\\n\\t        actions[n].SWF_ACTIONRECORD.Offset, n, \\n\\t        actionName(actions[n].SWF_ACTIONRECORD.ActionCode));\\n#endif\\n\\n\\tswitch(actions[n].SWF_ACTIONRECORD.ActionCode)\\n\\t{\\n\\tcase SWFACTION_END:\\n\\t\\treturn 0;\\n\\n\\tcase SWFACTION_CONSTANTPOOL:\\n\\t\\tdecompileCONSTANTPOOL(&actions[n]);\\n\\t\\treturn 0;\\n\\n\\tcase SWFACTION_GOTOLABEL:\\n\\t\\treturn decompileGOTOFRAME(n, actions, maxn,1);\\n\\n\\tcase SWFACTION_GOTOFRAME:\\n\\t\\treturn decompileGOTOFRAME(n, actions, maxn,0);\\n\\n\\tcase SWFACTION_GOTOFRAME2:\\n\\t\\treturn decompileGOTOFRAME2(n, actions, maxn);\\n\\n\\tcase SWFACTION_WAITFORFRAME:\\n\\t\\tdecompileWAITFORFRAME(&actions[n]);\\n\\t\\treturn 0;\\n\\n\\tcase SWFACTION_GETURL2:\\n\\t\\tdecompileGETURL2(&actions[n]);\\n\\t\\treturn 0;\\n\\n\\tcase SWFACTION_GETURL:\\n\\t\\tdecompileGETURL(&actions[n]);\\n\\t\\treturn 0;\\n\\n\\tcase SWFACTION_PUSH:\\n\\t\\tdecompilePUSH(&actions[n]);\\n\\t\\treturn 0;\\n\\n\\tcase SWFACTION_PUSHDUP:\\n\\t\\tdecompilePUSHDUP(&actions[n]);\\n\\t\\treturn 0;\\n\\n\\tcase SWFACTION_STACKSWAP:\\n\\t\\tdecompileSTACKSWAP(&actions[n]);\\t\\n\\t\\treturn 0;\\n\\n\\tcase SWFACTION_SETPROPERTY:\\n\\t\\tdecompileSETPROPERTY(n, actions, maxn);\\n\\t\\treturn 0;\\n\\n\\tcase SWFACTION_GETPROPERTY:\\n\\t\\tdecompileGETPROPERTY(n, actions, maxn);\\n\\t\\treturn 0;\\n\\n\\tcase SWFACTION_GETTIME:\\n\\t\\treturn decompileGETTIME(n, actions, maxn);\\n\\n\\tcase SWFACTION_TRACE:\\n\\t\\tdecompileTRACE(n, actions, maxn);\\n\\t\\treturn 0;\\n\\n\\tcase SWFACTION_CALLFRAME:\\n\\t\\tdecompileCALLFRAME(n, actions, maxn);\\n\\t\\treturn 0;\\n\\n\\tcase SWFACTION_EXTENDS:\\n\\t\\tdecompileEXTENDS(n, actions, maxn);\\n\\t\\treturn 0;\\n\\n\\tcase SWFACTION_INITOBJECT:\\n\\t\\tdecompileINITOBJECT(n, actions, maxn);\\n\\t\\treturn 0;\\t        \\n\\n\\tcase SWFACTION_NEWOBJECT:\\n\\t\\tdecompileNEWOBJECT(n, actions, maxn);\\n\\t\\treturn 0;\\n\\n\\tcase SWFACTION_NEWMETHOD:\\n\\t\\tdecompileNEWMETHOD(n, actions, maxn);\\n\\t\\treturn 0;\\n\\n\\tcase SWFACTION_GETMEMBER:\\n\\t\\tdecompileGETMEMBER(n, actions, maxn);\\n\\t\\treturn 0;\\n\\n\\tcase SWFACTION_SETMEMBER:\\n\\t\\tdecompileSETMEMBER(n, actions, maxn);\\n\\t\\treturn 0;\\n\\n\\tcase SWFACTION_GETVARIABLE:\\n\\t\\tdecompileGETVARIABLE(n, actions, maxn);\\n\\t\\treturn 0;\\n\\n\\tcase SWFACTION_SETVARIABLE:\\n\\t\\tdecompileSETVARIABLE(n, actions, maxn, 0);\\n\\t\\treturn 0;\\n\\n\\tcase SWFACTION_DEFINELOCAL:\\n\\t\\tdecompileSETVARIABLE(n, actions, maxn, 1);\\n\\t\\treturn 0;\\n\\n\\tcase SWFACTION_DEFINELOCAL2:\\n\\t\\tdecompileDEFINELOCAL2(n, actions, maxn);\\n\\t\\treturn 0;\\n\\n\\tcase SWFACTION_DECREMENT:\\n\\t\\treturn decompileINCR_DECR(n, actions, maxn, 0);\\n\\n\\tcase SWFACTION_INCREMENT:\\n\\t\\treturn decompileINCR_DECR(n, actions, maxn,1);\\n\\n\\tcase SWFACTION_STOREREGISTER:\\n\\t\\tdecompileSTOREREGISTER(n, actions, maxn);\\n\\t\\treturn 0;\\n\\n\\tcase SWFACTION_JUMP:\\n\\t\\treturn decompileJUMP(n, actions, maxn);\\n\\n\\tcase SWFACTION_RETURN:\\n\\t\\tdecompileRETURN(n, actions, maxn);\\n\\t\\treturn 0;\\n\\n\\tcase SWFACTION_LOGICALNOT:\\n\\t\\treturn decompileLogicalNot(n, actions, maxn);\\n\\n\\tcase SWFACTION_IF:\\n\\t\\treturn decompileIF(n, actions, maxn);\\n\\n\\tcase SWFACTION_WITH:\\n\\t\\tdecompileWITH(n, actions, maxn);\\n\\t\\treturn 0;\\n\\n\\tcase SWFACTION_ENUMERATE:\\n\\t\\treturn decompileENUMERATE(n, actions, maxn, 0);\\n\\n\\tcase SWFACTION_ENUMERATE2 :\\n\\t\\treturn decompileENUMERATE(n, actions, maxn,1);\\n\\n\\tcase SWFACTION_INITARRAY:\\n\\t\\treturn decompileINITARRAY(n, actions, maxn);\\n\\n\\tcase SWFACTION_DEFINEFUNCTION:\\t\\n\\t\\treturn decompileDEFINEFUNCTION(n, actions, maxn,0);\\n\\n\\tcase SWFACTION_DEFINEFUNCTION2:\\n\\t\\treturn decompileDEFINEFUNCTION(n, actions, maxn,1);\\n\\n\\tcase SWFACTION_CALLFUNCTION:\\n\\t\\treturn decompileCALLFUNCTION(n, actions, maxn);\\n\\n\\tcase SWFACTION_CALLMETHOD:\\n\\t\\treturn decompileCALLMETHOD(n, actions, maxn);\\n\\n\\tcase SWFACTION_INSTANCEOF:\\n\\tcase SWFACTION_SHIFTLEFT:\\n\\tcase SWFACTION_SHIFTRIGHT:\\n\\tcase SWFACTION_SHIFTRIGHT2:        \\n\\tcase SWFACTION_ADD:\\n\\tcase SWFACTION_ADD2:\\n\\tcase SWFACTION_SUBTRACT:\\n\\tcase SWFACTION_MULTIPLY:\\n\\tcase SWFACTION_DIVIDE:\\n\\tcase SWFACTION_MODULO:\\n\\tcase SWFACTION_BITWISEAND:\\n\\tcase SWFACTION_BITWISEOR:\\n\\tcase SWFACTION_BITWISEXOR:\\n\\tcase SWFACTION_EQUAL:\\n\\tcase SWFACTION_EQUALS2:\\n\\tcase SWFACTION_LESS2:\\n\\tcase SWFACTION_LOGICALAND:\\n\\tcase SWFACTION_LOGICALOR:\\n\\tcase SWFACTION_GREATER:\\n\\tcase SWFACTION_LESSTHAN:\\n\\tcase SWFACTION_STRINGEQ:\\n\\tcase SWFACTION_STRINGCOMPARE:\\n\\tcase SWFACTION_STRICTEQUALS:\\n\\t\\treturn decompileArithmeticOp(n, actions, maxn);\\n\\n\\tcase SWFACTION_POP:\\n\\t\\tpop();\\n\\t\\treturn 0;\\n\\n\\tcase SWFACTION_STARTDRAG:\\n\\t\\treturn decompileSTARTDRAG(n, actions, maxn);\\n\\n\\tcase SWFACTION_DELETE:\\n\\t\\treturn decompileDELETE(n, actions, maxn,0);\\n\\n\\tcase SWFACTION_DELETE2:\\n\\t\\treturn decompileDELETE(n, actions, maxn,1);\\n\\n\\tcase SWFACTION_TARGETPATH:\\n\\t\\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\\\"targetPath\\\");\\n\\n\\tcase SWFACTION_TYPEOF:\\n\\t\\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\\\"typeof\\\");\\n\\n\\tcase SWFACTION_ORD:\\n\\t\\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\\\"ord\\\");\\n\\n\\tcase SWFACTION_CHR:\\n\\t\\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\\\"chr\\\");\\n\\n\\tcase SWFACTION_INT:\\n\\t\\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\\\"int\\\");\\n\\n\\tcase SWFACTION_TOSTRING:\\n\\t\\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\\\"String\\\");     \\n\\n\\tcase SWFACTION_TONUMBER:\\n\\t\\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\\\"Number\\\");\\n\\n\\tcase SWFACTION_RANDOMNUMBER:\\n\\t\\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\\\"random\\\");\\n\\n\\tcase SWFACTION_STRINGLENGTH:\\n\\t\\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\\\"length\\\");\\n\\n\\tcase SWFACTION_PLAY:\\n\\t\\treturn decompile_Null_ArgBuiltInFunctionCall(n, actions, maxn,\\\"play\\\");\\n\\n\\tcase SWFACTION_STOP:\\n\\t\\treturn decompile_Null_ArgBuiltInFunctionCall(n, actions, maxn,\\\"stop\\\");\\n\\n\\tcase SWFACTION_NEXTFRAME:\\n\\t\\treturn decompile_Null_ArgBuiltInFunctionCall(n, actions, maxn,\\\"nextFrame\\\");\\n\\n\\tcase SWFACTION_PREVFRAME:\\n\\t\\treturn decompile_Null_ArgBuiltInFunctionCall(n, actions, maxn,\\\"prevFrame\\\");\\n\\n\\tcase SWFACTION_ENDDRAG:\\n\\t\\treturn decompile_Null_ArgBuiltInFunctionCall(n, actions, maxn,\\\"stopDrag\\\");\\n\\n\\tcase SWFACTION_STOPSOUNDS:\\n\\t\\treturn decompile_Null_ArgBuiltInFunctionCall(n, actions, maxn,\\\"stopAllSounds\\\");   \\n\\n\\tcase SWFACTION_TOGGLEQUALITY:\\n\\t\\treturn decompile_Null_ArgBuiltInFunctionCall(n, actions, maxn,\\\"toggleHighQuality\\\");      \\n\\n\\tcase SWFACTION_MBSUBSTRING:\\n\\tcase SWFACTION_SUBSTRING:\\n\\t\\treturn decompileSUBSTRING(n, actions, maxn);\\n\\n\\tcase SWFACTION_STRINGCONCAT:\\n\\t\\treturn decompileSTRINGCONCAT(n, actions, maxn);\\n\\n\\tcase SWFACTION_REMOVECLIP:\\n\\t\\treturn decompileREMOVECLIP(n, actions, maxn);\\n\\n\\tcase SWFACTION_DUPLICATECLIP:\\n\\t\\treturn decompileDUPLICATECLIP(n, actions, maxn);\\n\\n\\tcase SWFACTION_SETTARGET:\\n\\t\\treturn decompileSETTARGET(n, actions, maxn,0);\\n\\n\\tcase SWFACTION_SETTARGET2:\\n\\t\\treturn decompileSETTARGET(n, actions, maxn,1);\\n\\n\\tcase SWFACTION_IMPLEMENTSOP:\\n\\t\\treturn decompileIMPLEMENTS(n, actions, maxn);\\n\\n\\tcase SWFACTION_CASTOP:\\n\\t\\treturn decompileCAST(n, actions, maxn);\\n\\n\\tcase SWFACTION_THROW:\\n\\t\\treturn decompileTHROW(n, actions, maxn);\\n\\n\\tcase SWFACTION_TRY:\\n\\t\\treturn decompileTRY(n, actions, maxn);\\n\\n\\tdefault:\\n\\t\\toutputSWF_ACTION(n,&actions[n]);\\n\\t\\treturn 0;\\n\\t}\\n}\\n\",\n            \"caller_start\": 3114,\n            \"file_path\": \"util/decompile.c\"\n          }\n        ]\n      },\n      {\n        \"source\": \"caller_info(file:decompile.c, func:decompileArithmeticOp)\",\n        \"result\": [\n          {\n            \"call_line\": 3297,\n            \"call_code\": \"decompileArithmeticOp(n, actions, maxn)\",\n            \"caller_code\": \"int\\ndecompileAction(int n, SWF_ACTION *actions, int maxn)\\n{\\n\\tif( n > maxn ) SWF_error(\\\"Action overflow!!\\\");\\n\\n#ifdef DEBUG\\n\\tfprintf(stderr,\\\"%d:\\\\tACTION[%3.3d]: %s\\\\n\\\",\\n\\t        actions[n].SWF_ACTIONRECORD.Offset, n, \\n\\t        actionName(actions[n].SWF_ACTIONRECORD.ActionCode));\\n#endif\\n\\n\\tswitch(actions[n].SWF_ACTIONRECORD.ActionCode)\\n\\t{\\n\\tcase SWFACTION_END:\\n\\t\\treturn 0;\\n\\n\\tcase SWFACTION_CONSTANTPOOL:\\n\\t\\tdecompileCONSTANTPOOL(&actions[n]);\\n\\t\\treturn 0;\\n\\n\\tcase SWFACTION_GOTOLABEL:\\n\\t\\treturn decompileGOTOFRAME(n, actions, maxn,1);\\n\\n\\tcase SWFACTION_GOTOFRAME:\\n\\t\\treturn decompileGOTOFRAME(n, actions, maxn,0);\\n\\n\\tcase SWFACTION_GOTOFRAME2:\\n\\t\\treturn decompileGOTOFRAME2(n, actions, maxn);\\n\\n\\tcase SWFACTION_WAITFORFRAME:\\n\\t\\tdecompileWAITFORFRAME(&actions[n]);\\n\\t\\treturn 0;\\n\\n\\tcase SWFACTION_GETURL2:\\n\\t\\tdecompileGETURL2(&actions[n]);\\n\\t\\treturn 0;\\n\\n\\tcase SWFACTION_GETURL:\\n\\t\\tdecompileGETURL(&actions[n]);\\n\\t\\treturn 0;\\n\\n\\tcase SWFACTION_PUSH:\\n\\t\\tdecompilePUSH(&actions[n]);\\n\\t\\treturn 0;\\n\\n\\tcase SWFACTION_PUSHDUP:\\n\\t\\tdecompilePUSHDUP(&actions[n]);\\n\\t\\treturn 0;\\n\\n\\tcase SWFACTION_STACKSWAP:\\n\\t\\tdecompileSTACKSWAP(&actions[n]);\\t\\n\\t\\treturn 0;\\n\\n\\tcase SWFACTION_SETPROPERTY:\\n\\t\\tdecompileSETPROPERTY(n, actions, maxn);\\n\\t\\treturn 0;\\n\\n\\tcase SWFACTION_GETPROPERTY:\\n\\t\\tdecompileGETPROPERTY(n, actions, maxn);\\n\\t\\treturn 0;\\n\\n\\tcase SWFACTION_GETTIME:\\n\\t\\treturn decompileGETTIME(n, actions, maxn);\\n\\n\\tcase SWFACTION_TRACE:\\n\\t\\tdecompileTRACE(n, actions, maxn);\\n\\t\\treturn 0;\\n\\n\\tcase SWFACTION_CALLFRAME:\\n\\t\\tdecompileCALLFRAME(n, actions, maxn);\\n\\t\\treturn 0;\\n\\n\\tcase SWFACTION_EXTENDS:\\n\\t\\tdecompileEXTENDS(n, actions, maxn);\\n\\t\\treturn 0;\\n\\n\\tcase SWFACTION_INITOBJECT:\\n\\t\\tdecompileINITOBJECT(n, actions, maxn);\\n\\t\\treturn 0;\\t        \\n\\n\\tcase SWFACTION_NEWOBJECT:\\n\\t\\tdecompileNEWOBJECT(n, actions, maxn);\\n\\t\\treturn 0;\\n\\n\\tcase SWFACTION_NEWMETHOD:\\n\\t\\tdecompileNEWMETHOD(n, actions, maxn);\\n\\t\\treturn 0;\\n\\n\\tcase SWFACTION_GETMEMBER:\\n\\t\\tdecompileGETMEMBER(n, actions, maxn);\\n\\t\\treturn 0;\\n\\n\\tcase SWFACTION_SETMEMBER:\\n\\t\\tdecompileSETMEMBER(n, actions, maxn);\\n\\t\\treturn 0;\\n\\n\\tcase SWFACTION_GETVARIABLE:\\n\\t\\tdecompileGETVARIABLE(n, actions, maxn);\\n\\t\\treturn 0;\\n\\n\\tcase SWFACTION_SETVARIABLE:\\n\\t\\tdecompileSETVARIABLE(n, actions, maxn, 0);\\n\\t\\treturn 0;\\n\\n\\tcase SWFACTION_DEFINELOCAL:\\n\\t\\tdecompileSETVARIABLE(n, actions, maxn, 1);\\n\\t\\treturn 0;\\n\\n\\tcase SWFACTION_DEFINELOCAL2:\\n\\t\\tdecompileDEFINELOCAL2(n, actions, maxn);\\n\\t\\treturn 0;\\n\\n\\tcase SWFACTION_DECREMENT:\\n\\t\\treturn decompileINCR_DECR(n, actions, maxn, 0);\\n\\n\\tcase SWFACTION_INCREMENT:\\n\\t\\treturn decompileINCR_DECR(n, actions, maxn,1);\\n\\n\\tcase SWFACTION_STOREREGISTER:\\n\\t\\tdecompileSTOREREGISTER(n, actions, maxn);\\n\\t\\treturn 0;\\n\\n\\tcase SWFACTION_JUMP:\\n\\t\\treturn decompileJUMP(n, actions, maxn);\\n\\n\\tcase SWFACTION_RETURN:\\n\\t\\tdecompileRETURN(n, actions, maxn);\\n\\t\\treturn 0;\\n\\n\\tcase SWFACTION_LOGICALNOT:\\n\\t\\treturn decompileLogicalNot(n, actions, maxn);\\n\\n\\tcase SWFACTION_IF:\\n\\t\\treturn decompileIF(n, actions, maxn);\\n\\n\\tcase SWFACTION_WITH:\\n\\t\\tdecompileWITH(n, actions, maxn);\\n\\t\\treturn 0;\\n\\n\\tcase SWFACTION_ENUMERATE:\\n\\t\\treturn decompileENUMERATE(n, actions, maxn, 0);\\n\\n\\tcase SWFACTION_ENUMERATE2 :\\n\\t\\treturn decompileENUMERATE(n, actions, maxn,1);\\n\\n\\tcase SWFACTION_INITARRAY:\\n\\t\\treturn decompileINITARRAY(n, actions, maxn);\\n\\n\\tcase SWFACTION_DEFINEFUNCTION:\\t\\n\\t\\treturn decompileDEFINEFUNCTION(n, actions, maxn,0);\\n\\n\\tcase SWFACTION_DEFINEFUNCTION2:\\n\\t\\treturn decompileDEFINEFUNCTION(n, actions, maxn,1);\\n\\n\\tcase SWFACTION_CALLFUNCTION:\\n\\t\\treturn decompileCALLFUNCTION(n, actions, maxn);\\n\\n\\tcase SWFACTION_CALLMETHOD:\\n\\t\\treturn decompileCALLMETHOD(n, actions, maxn);\\n\\n\\tcase SWFACTION_INSTANCEOF:\\n\\tcase SWFACTION_SHIFTLEFT:\\n\\tcase SWFACTION_SHIFTRIGHT:\\n\\tcase SWFACTION_SHIFTRIGHT2:        \\n\\tcase SWFACTION_ADD:\\n\\tcase SWFACTION_ADD2:\\n\\tcase SWFACTION_SUBTRACT:\\n\\tcase SWFACTION_MULTIPLY:\\n\\tcase SWFACTION_DIVIDE:\\n\\tcase SWFACTION_MODULO:\\n\\tcase SWFACTION_BITWISEAND:\\n\\tcase SWFACTION_BITWISEOR:\\n\\tcase SWFACTION_BITWISEXOR:\\n\\tcase SWFACTION_EQUAL:\\n\\tcase SWFACTION_EQUALS2:\\n\\tcase SWFACTION_LESS2:\\n\\tcase SWFACTION_LOGICALAND:\\n\\tcase SWFACTION_LOGICALOR:\\n\\tcase SWFACTION_GREATER:\\n\\tcase SWFACTION_LESSTHAN:\\n\\tcase SWFACTION_STRINGEQ:\\n\\tcase SWFACTION_STRINGCOMPARE:\\n\\tcase SWFACTION_STRICTEQUALS:\\n\\t\\treturn decompileArithmeticOp(n, actions, maxn);\\n\\n\\tcase SWFACTION_POP:\\n\\t\\tpop();\\n\\t\\treturn 0;\\n\\n\\tcase SWFACTION_STARTDRAG:\\n\\t\\treturn decompileSTARTDRAG(n, actions, maxn);\\n\\n\\tcase SWFACTION_DELETE:\\n\\t\\treturn decompileDELETE(n, actions, maxn,0);\\n\\n\\tcase SWFACTION_DELETE2:\\n\\t\\treturn decompileDELETE(n, actions, maxn,1);\\n\\n\\tcase SWFACTION_TARGETPATH:\\n\\t\\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\\\"targetPath\\\");\\n\\n\\tcase SWFACTION_TYPEOF:\\n\\t\\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\\\"typeof\\\");\\n\\n\\tcase SWFACTION_ORD:\\n\\t\\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\\\"ord\\\");\\n\\n\\tcase SWFACTION_CHR:\\n\\t\\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\\\"chr\\\");\\n\\n\\tcase SWFACTION_INT:\\n\\t\\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\\\"int\\\");\\n\\n\\tcase SWFACTION_TOSTRING:\\n\\t\\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\\\"String\\\");     \\n\\n\\tcase SWFACTION_TONUMBER:\\n\\t\\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\\\"Number\\\");\\n\\n\\tcase SWFACTION_RANDOMNUMBER:\\n\\t\\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\\\"random\\\");\\n\\n\\tcase SWFACTION_STRINGLENGTH:\\n\\t\\treturn decompileSingleArgBuiltInFunctionCall(n, actions, maxn,\\\"length\\\");\\n\\n\\tcase SWFACTION_PLAY:\\n\\t\\treturn decompile_Null_ArgBuiltInFunctionCall(n, actions, maxn,\\\"play\\\");\\n\\n\\tcase SWFACTION_STOP:\\n\\t\\treturn decompile_Null_ArgBuiltInFunctionCall(n, actions, maxn,\\\"stop\\\");\\n\\n\\tcase SWFACTION_NEXTFRAME:\\n\\t\\treturn decompile_Null_ArgBuiltInFunctionCall(n, actions, maxn,\\\"nextFrame\\\");\\n\\n\\tcase SWFACTION_PREVFRAME:\\n\\t\\treturn decompile_Null_ArgBuiltInFunctionCall(n, actions, maxn,\\\"prevFrame\\\");\\n\\n\\tcase SWFACTION_ENDDRAG:\\n\\t\\treturn decompile_Null_ArgBuiltInFunctionCall(n, actions, maxn,\\\"stopDrag\\\");\\n\\n\\tcase SWFACTION_STOPSOUNDS:\\n\\t\\treturn decompile_Null_ArgBuiltInFunctionCall(n, actions, maxn,\\\"stopAllSounds\\\");   \\n\\n\\tcase SWFACTION_TOGGLEQUALITY:\\n\\t\\treturn decompile_Null_ArgBuiltInFunctionCall(n, actions, maxn,\\\"toggleHighQuality\\\");      \\n\\n\\tcase SWFACTION_MBSUBSTRING:\\n\\tcase SWFACTION_SUBSTRING:\\n\\t\\treturn decompileSUBSTRING(n, actions, maxn);\\n\\n\\tcase SWFACTION_STRINGCONCAT:\\n\\t\\treturn decompileSTRINGCONCAT(n, actions, maxn);\\n\\n\\tcase SWFACTION_REMOVECLIP:\\n\\t\\treturn decompileREMOVECLIP(n, actions, maxn);\\n\\n\\tcase SWFACTION_DUPLICATECLIP:\\n\\t\\treturn decompileDUPLICATECLIP(n, actions, maxn);\\n\\n\\tcase SWFACTION_SETTARGET:\\n\\t\\treturn decompileSETTARGET(n, actions, maxn,0);\\n\\n\\tcase SWFACTION_SETTARGET2:\\n\\t\\treturn decompileSETTARGET(n, actions, maxn,1);\\n\\n\\tcase SWFACTION_IMPLEMENTSOP:\\n\\t\\treturn decompileIMPLEMENTS(n, actions, maxn);\\n\\n\\tcase SWFACTION_CASTOP:\\n\\t\\treturn decompileCAST(n, actions, maxn);\\n\\n\\tcase SWFACTION_THROW:\\n\\t\\treturn decompileTHROW(n, actions, maxn);\\n\\n\\tcase SWFACTION_TRY:\\n\\t\\treturn decompileTRY(n, actions, maxn);\\n\\n\\tdefault:\\n\\t\\toutputSWF_ACTION(n,&actions[n]);\\n\\t\\treturn 0;\\n\\t}\\n}\\n\",\n            \"caller_start\": 3114,\n            \"file_path\": \"util/decompile.c\"\n          }\n        ]\n      }\n    ]\n  }\n]\n\n## INSTRUCTIONS\n1. **Review & Integrate Context** \n  Review all `history_summary` (*incl. past analysis and request results*) \n\n2. **Extend Chain from Code**  \n   Trace calls / data flow step-by-step, citing `file:line` for each fact.  \n   Where evidence ends, insert  \n   `GAP: <why evidence stops>`.\n\n3. **Request Missing Context**  \n   If any critical gap remains:  \n     * Always request context and set `\"need_context\": true`. \n     * Add precise, non-duplicate requests to `\"required_context\"` using the following types:  \n      `function`, `caller`, `e.g. caller: I need the caller of function X in file Y`.\n      **DO NOT** request the new patch code.\n     * Try alternative parameters or request types for gaps previously unfulfilled.  \n   If the chain is fully evidenced, set `\"need_context\": false`.\n\n4. **Score Confidence**  \n   *Full chain with direct evidence* ≥ 0.90.  Incomplete chain ≤ 0.75.\n\n## OUTPUT  (JSON only, no trailing commas)\n  ```json\n  {\n      \"analysis\": \"Summary of iteration progress, remaining gaps, explanation for new context requests (if any). If complete, summarize the full chain.\",\n      \"need_context\": true/false, \n      \"required_context\": \"<list of precise context requests>\" ,\n      \"root_cause\": \"<Partial/complete trace with file:line evidence from ALL available context>\",\n      \"confidence_score\": 0.0-1.0\n      // attack_vectors added when confidence >= 0.90 AND need_context is False\n  }\n  ```\n  ## RULES\n  * Output must be valid JSON.\n  * **Source-of-Truth** – Only accept facts visible in code (file:line). Commit message & description are auxiliary.\n  * **Reject every hypothesis or inference** - When evidence is missing, always declare a GAP and request the needed context.\n  * **Tool Restriction** – `required_context` items **must** be of type `function` or `caller` only.\n  * **Stop Condition** – Terminate only when the trigger chain is fully evidenced from the patch; else continue requesting context.\n",
            "result": {
                "analysis": "The root cause is confirmed as missing validation in OpCode for n < 1 and readBytes for negative size values. The trigger chain traces to SWF action records and file parsing logic. No critical gaps remain; the chain is fully evidenced via decompileAction and parser functions.",
                "need_context": false,
                "root_cause": "In decompile.c:865-871, OpCode accesses actions[n] without validating n < 1. This is triggered by decompileAction (util/decompile.c:3135-3141) processing SWF action records, where 'n' is derived from untrusted SWF action offsets. For readBytes (util/read.c:228-236), negative 'size' values from SWF parsing (e.g., parseSWF_DEFINEBITS in util/parser.c:1480) could cause undersized buffer allocation. The patch adds n < 1 and size < 0 checks to prevent out-of-bounds access.",
                "confidence_score": 0.95,
                "attack_vectors": [
                    "Crafted SWF file with invalid action offsets (n < 1) triggers OpCode's out-of-bounds access in util/decompile.c:865.",
                    "Malformed SWF file with negative size fields triggers readBytes buffer underflow in util/read.c:228."
                ]
            },
            "timestamp": "2025-05-26T15:22:26.967470"
        }
    ],
    "debug_trace": [
        "Collected 2 context items. (0 failed)",
        "Performed analysis iteration 1. Needs more context: True. Confidence: 0.75",
        "Collected 4 context items. (0 failed)",
        "Performed analysis iteration 2. Needs more context: False. Confidence: 0.95",
        "Report generation completed."
    ],
    "status": "completed",
    "error": null
}