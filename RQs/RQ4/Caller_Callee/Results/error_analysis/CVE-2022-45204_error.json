{
    "patch": [
        {
            "func_name": "dimC_box_read",
            "patch": "--- func_before\n+++ func_after\n@@ -1048,5 +1048,6 @@\n GF_Err dimC_box_read(GF_Box *s, GF_BitStream *bs)\n {\n+\tGF_Err e = GF_OK;\n \tu32 i, msize;\n \tGF_DIMSSceneConfigBox *p = (GF_DIMSSceneConfigBox *)s;\n \n@@ -1065,7 +1066,7 @@\n \ti=0;\n \tstr[0]=0;\n \twhile (i < msize) {\n-\t\tISOM_DECREASE_SIZE(p, 1);\n+\t\tISOM_DECREASE_SIZE_GOTO_EXIT(p, 1);\n \t\tstr[i] = gf_bs_read_u8(bs);\n \t\tif (!str[i]) break;\n \t\ti++;\n@@ -1080,7 +1081,7 @@\n \ti=0;\n \tstr[0]=0;\n \twhile (i < msize) {\n-\t\tISOM_DECREASE_SIZE(p, 1);\n+\t\tISOM_DECREASE_SIZE_GOTO_EXIT(p, 1);\n \t\tstr[i] = gf_bs_read_u8(bs);\n \t\tif (!str[i]) break;\n \t\ti++;\n@@ -1095,4 +1096,8 @@\n \tif (!p->textEncoding || !p->contentEncoding)\n \t\treturn GF_OUT_OF_MEM;\n \treturn GF_OK;\n+\n+exit:\n+\tgf_free(str);\n+\treturn e;\n }",
            "file_path": "src/isomedia/box_code_3gpp.c"
        }
    ],
    "description": "GPAC v2.1-DEV-rev428-gcb8ae46c8-master was discovered to contain a memory leak via the function dimC_box_read at isomedia/box_code_3gpp.c.",
    "msg": "fixed #2307",
    "root_cause": "Original code allocated 'str' but lacked guaranteed deallocation on error paths. The patch adds 'gf_free(str)' at 'exit' (box_code_3gpp.c:1096) but depends on 'ISOM_DECREASE_SIZE_GOTO_EXIT' (box_code_3gpp.c:1066,1081) to trigger error propagation. Without the macro definition, it's unknown how/when the error condition activates the 'exit' label.",
    "confidence_score": 0.75,
    "enriched_data": [
        {
            "tool": "caller_info.find_caller_for_func({'func_name': 'ISOM_DECREASE_SIZE_GOTO_EXIT', 'project_dir': './storage/result/Part2_result/github/CVE-2022-45204/old_repos/gpac-gpac_aa486c3'})",
            "result": [
                {
                    "type": "caller_info",
                    "call_line": 103,
                    "call_code": "ISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)",
                    "caller_code": "GF_Err abst_box_read(GF_Box *s, GF_BitStream *bs)\n{\n\tGF_AdobeBootstrapInfoBox *ptr = (GF_AdobeBootstrapInfoBox *)s;\n\tint i;\n\tu32 tmp_strsize;\n\tchar *tmp_str;\n\tBool zfound=GF_FALSE;\n\tGF_Err e = GF_OK;\n\n\tISOM_DECREASE_SIZE(ptr, 25)\n\tptr->bootstrapinfo_version = gf_bs_read_u32(bs);\n\tptr->profile = gf_bs_read_int(bs, 2);\n\tptr->live = gf_bs_read_int(bs, 1);\n\tptr->update = gf_bs_read_int(bs, 1);\n\tptr->reserved = gf_bs_read_int(bs, 4);\n\tptr->time_scale = gf_bs_read_u32(bs);\n\tptr->current_media_time = gf_bs_read_u64(bs);\n\tptr->smpte_time_code_offset = gf_bs_read_u64(bs);\n\n\ti=0;\n\tif (ptr->size<8) return GF_ISOM_INVALID_FILE;\n\ttmp_strsize =(u32)ptr->size;\n\ttmp_str = gf_malloc(sizeof(char)*(tmp_strsize+1));\n\tif (!tmp_str) return GF_OUT_OF_MEM;\n\tmemset(tmp_str, 0, sizeof(char)*(tmp_strsize+1) );\n\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\tif (i) {\n\t\tptr->movie_identifier = gf_strdup(tmp_str);\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->server_entry_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->server_entry_count; i++) {\n\t\tint j=0;\n\t\tzfound = GF_FALSE;\n\t\ttmp_strsize=(u32)ptr->size;\n\t\twhile (tmp_strsize) {\n\t\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\t\ttmp_str[j] = gf_bs_read_u8(bs);\n\t\t\ttmp_strsize--;\n\t\t\tif (!tmp_str[j]) {\n\t\t\t\tzfound = GF_TRUE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t\tif (!zfound) {\n\t\t\te = GF_ISOM_INVALID_FILE;\n\t\t\tgoto exit;\n\t\t}\n\t\tif (j) {\n\t\t\tgf_list_insert(ptr->server_entry_table, gf_strdup(tmp_str), i);\n\t\t}\n\t}\n\tif (ptr->server_entry_count != gf_list_count(ptr->server_entry_table)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->quality_entry_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->quality_entry_count; i++) {\n\t\tint j=0;\n\t\tzfound = GF_FALSE;\n\t\ttmp_strsize=(u32)ptr->size;\n\t\twhile (tmp_strsize) {\n\t\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\t\ttmp_str[j] = gf_bs_read_u8(bs);\n\t\t\ttmp_strsize--;\n\t\t\tif (!tmp_str[j]) {\n\t\t\t\tzfound = GF_TRUE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\n\t\tif (!zfound) {\n\t\t\te = GF_ISOM_INVALID_FILE;\n\t\t\tgoto exit;\n\t\t}\n\t\tif (j) {\n\t\t\tgf_list_insert(ptr->quality_entry_table, gf_strdup(tmp_str), i);\n\t\t}\n\t}\n\tif (ptr->quality_entry_count != gf_list_count(ptr->quality_entry_table)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\ti=0;\n\ttmp_strsize=(u32)ptr->size;\n\tzfound = GF_FALSE;\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tif (i) {\n\t\tptr->drm_data = gf_strdup(tmp_str);\n\t}\n\n\ti=0;\n\ttmp_strsize=(u32)ptr->size;\n\tzfound = GF_FALSE;\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tif (i) {\n\t\tptr->meta_data = gf_strdup(tmp_str);\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->segment_run_table_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->segment_run_table_count; i++) {\n\t\tGF_AdobeSegmentRunTableBox *asrt = NULL;\n\t\te = gf_isom_box_parse((GF_Box **)&asrt, bs);\n\t\tif (e) {\n\t\t\tif (asrt) gf_isom_box_del((GF_Box*)asrt);\n\t\t\tgoto exit;\n\t\t}\n\t\tgf_list_add(ptr->segment_run_table_entries, asrt);\n\t}\n\tif (ptr->segment_run_table_count != gf_list_count(ptr->segment_run_table_entries)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->fragment_run_table_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->fragment_run_table_count; i++) {\n\t\tGF_AdobeFragmentRunTableBox *afrt = NULL;\n\t\te = gf_isom_box_parse((GF_Box **)&afrt, bs);\n\t\tif (e) {\n\t\t\tif (afrt) gf_isom_box_del((GF_Box*)afrt);\n\t\t\tgoto exit;\n\t\t}\n\t\tgf_list_add(ptr->fragment_run_table_entries, afrt);\n\t}\n\tif (ptr->fragment_run_table_count != gf_list_count(ptr->fragment_run_table_entries)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\nexit:\n\tgf_free(tmp_str);\n\treturn e;\n}\n",
                    "caller_start": 76,
                    "file_path": "src/isomedia/box_code_adobe.c"
                },
                {
                    "type": "caller_info",
                    "call_line": 120,
                    "call_code": "ISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)",
                    "caller_code": "GF_Err abst_box_read(GF_Box *s, GF_BitStream *bs)\n{\n\tGF_AdobeBootstrapInfoBox *ptr = (GF_AdobeBootstrapInfoBox *)s;\n\tint i;\n\tu32 tmp_strsize;\n\tchar *tmp_str;\n\tBool zfound=GF_FALSE;\n\tGF_Err e = GF_OK;\n\n\tISOM_DECREASE_SIZE(ptr, 25)\n\tptr->bootstrapinfo_version = gf_bs_read_u32(bs);\n\tptr->profile = gf_bs_read_int(bs, 2);\n\tptr->live = gf_bs_read_int(bs, 1);\n\tptr->update = gf_bs_read_int(bs, 1);\n\tptr->reserved = gf_bs_read_int(bs, 4);\n\tptr->time_scale = gf_bs_read_u32(bs);\n\tptr->current_media_time = gf_bs_read_u64(bs);\n\tptr->smpte_time_code_offset = gf_bs_read_u64(bs);\n\n\ti=0;\n\tif (ptr->size<8) return GF_ISOM_INVALID_FILE;\n\ttmp_strsize =(u32)ptr->size;\n\ttmp_str = gf_malloc(sizeof(char)*(tmp_strsize+1));\n\tif (!tmp_str) return GF_OUT_OF_MEM;\n\tmemset(tmp_str, 0, sizeof(char)*(tmp_strsize+1) );\n\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\tif (i) {\n\t\tptr->movie_identifier = gf_strdup(tmp_str);\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->server_entry_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->server_entry_count; i++) {\n\t\tint j=0;\n\t\tzfound = GF_FALSE;\n\t\ttmp_strsize=(u32)ptr->size;\n\t\twhile (tmp_strsize) {\n\t\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\t\ttmp_str[j] = gf_bs_read_u8(bs);\n\t\t\ttmp_strsize--;\n\t\t\tif (!tmp_str[j]) {\n\t\t\t\tzfound = GF_TRUE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t\tif (!zfound) {\n\t\t\te = GF_ISOM_INVALID_FILE;\n\t\t\tgoto exit;\n\t\t}\n\t\tif (j) {\n\t\t\tgf_list_insert(ptr->server_entry_table, gf_strdup(tmp_str), i);\n\t\t}\n\t}\n\tif (ptr->server_entry_count != gf_list_count(ptr->server_entry_table)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->quality_entry_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->quality_entry_count; i++) {\n\t\tint j=0;\n\t\tzfound = GF_FALSE;\n\t\ttmp_strsize=(u32)ptr->size;\n\t\twhile (tmp_strsize) {\n\t\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\t\ttmp_str[j] = gf_bs_read_u8(bs);\n\t\t\ttmp_strsize--;\n\t\t\tif (!tmp_str[j]) {\n\t\t\t\tzfound = GF_TRUE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\n\t\tif (!zfound) {\n\t\t\te = GF_ISOM_INVALID_FILE;\n\t\t\tgoto exit;\n\t\t}\n\t\tif (j) {\n\t\t\tgf_list_insert(ptr->quality_entry_table, gf_strdup(tmp_str), i);\n\t\t}\n\t}\n\tif (ptr->quality_entry_count != gf_list_count(ptr->quality_entry_table)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\ti=0;\n\ttmp_strsize=(u32)ptr->size;\n\tzfound = GF_FALSE;\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tif (i) {\n\t\tptr->drm_data = gf_strdup(tmp_str);\n\t}\n\n\ti=0;\n\ttmp_strsize=(u32)ptr->size;\n\tzfound = GF_FALSE;\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tif (i) {\n\t\tptr->meta_data = gf_strdup(tmp_str);\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->segment_run_table_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->segment_run_table_count; i++) {\n\t\tGF_AdobeSegmentRunTableBox *asrt = NULL;\n\t\te = gf_isom_box_parse((GF_Box **)&asrt, bs);\n\t\tif (e) {\n\t\t\tif (asrt) gf_isom_box_del((GF_Box*)asrt);\n\t\t\tgoto exit;\n\t\t}\n\t\tgf_list_add(ptr->segment_run_table_entries, asrt);\n\t}\n\tif (ptr->segment_run_table_count != gf_list_count(ptr->segment_run_table_entries)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->fragment_run_table_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->fragment_run_table_count; i++) {\n\t\tGF_AdobeFragmentRunTableBox *afrt = NULL;\n\t\te = gf_isom_box_parse((GF_Box **)&afrt, bs);\n\t\tif (e) {\n\t\t\tif (afrt) gf_isom_box_del((GF_Box*)afrt);\n\t\t\tgoto exit;\n\t\t}\n\t\tgf_list_add(ptr->fragment_run_table_entries, afrt);\n\t}\n\tif (ptr->fragment_run_table_count != gf_list_count(ptr->fragment_run_table_entries)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\nexit:\n\tgf_free(tmp_str);\n\treturn e;\n}\n",
                    "caller_start": 76,
                    "file_path": "src/isomedia/box_code_adobe.c"
                },
                {
                    "type": "caller_info",
                    "call_line": 127,
                    "call_code": "ISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)",
                    "caller_code": "GF_Err abst_box_read(GF_Box *s, GF_BitStream *bs)\n{\n\tGF_AdobeBootstrapInfoBox *ptr = (GF_AdobeBootstrapInfoBox *)s;\n\tint i;\n\tu32 tmp_strsize;\n\tchar *tmp_str;\n\tBool zfound=GF_FALSE;\n\tGF_Err e = GF_OK;\n\n\tISOM_DECREASE_SIZE(ptr, 25)\n\tptr->bootstrapinfo_version = gf_bs_read_u32(bs);\n\tptr->profile = gf_bs_read_int(bs, 2);\n\tptr->live = gf_bs_read_int(bs, 1);\n\tptr->update = gf_bs_read_int(bs, 1);\n\tptr->reserved = gf_bs_read_int(bs, 4);\n\tptr->time_scale = gf_bs_read_u32(bs);\n\tptr->current_media_time = gf_bs_read_u64(bs);\n\tptr->smpte_time_code_offset = gf_bs_read_u64(bs);\n\n\ti=0;\n\tif (ptr->size<8) return GF_ISOM_INVALID_FILE;\n\ttmp_strsize =(u32)ptr->size;\n\ttmp_str = gf_malloc(sizeof(char)*(tmp_strsize+1));\n\tif (!tmp_str) return GF_OUT_OF_MEM;\n\tmemset(tmp_str, 0, sizeof(char)*(tmp_strsize+1) );\n\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\tif (i) {\n\t\tptr->movie_identifier = gf_strdup(tmp_str);\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->server_entry_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->server_entry_count; i++) {\n\t\tint j=0;\n\t\tzfound = GF_FALSE;\n\t\ttmp_strsize=(u32)ptr->size;\n\t\twhile (tmp_strsize) {\n\t\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\t\ttmp_str[j] = gf_bs_read_u8(bs);\n\t\t\ttmp_strsize--;\n\t\t\tif (!tmp_str[j]) {\n\t\t\t\tzfound = GF_TRUE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t\tif (!zfound) {\n\t\t\te = GF_ISOM_INVALID_FILE;\n\t\t\tgoto exit;\n\t\t}\n\t\tif (j) {\n\t\t\tgf_list_insert(ptr->server_entry_table, gf_strdup(tmp_str), i);\n\t\t}\n\t}\n\tif (ptr->server_entry_count != gf_list_count(ptr->server_entry_table)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->quality_entry_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->quality_entry_count; i++) {\n\t\tint j=0;\n\t\tzfound = GF_FALSE;\n\t\ttmp_strsize=(u32)ptr->size;\n\t\twhile (tmp_strsize) {\n\t\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\t\ttmp_str[j] = gf_bs_read_u8(bs);\n\t\t\ttmp_strsize--;\n\t\t\tif (!tmp_str[j]) {\n\t\t\t\tzfound = GF_TRUE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\n\t\tif (!zfound) {\n\t\t\te = GF_ISOM_INVALID_FILE;\n\t\t\tgoto exit;\n\t\t}\n\t\tif (j) {\n\t\t\tgf_list_insert(ptr->quality_entry_table, gf_strdup(tmp_str), i);\n\t\t}\n\t}\n\tif (ptr->quality_entry_count != gf_list_count(ptr->quality_entry_table)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\ti=0;\n\ttmp_strsize=(u32)ptr->size;\n\tzfound = GF_FALSE;\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tif (i) {\n\t\tptr->drm_data = gf_strdup(tmp_str);\n\t}\n\n\ti=0;\n\ttmp_strsize=(u32)ptr->size;\n\tzfound = GF_FALSE;\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tif (i) {\n\t\tptr->meta_data = gf_strdup(tmp_str);\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->segment_run_table_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->segment_run_table_count; i++) {\n\t\tGF_AdobeSegmentRunTableBox *asrt = NULL;\n\t\te = gf_isom_box_parse((GF_Box **)&asrt, bs);\n\t\tif (e) {\n\t\t\tif (asrt) gf_isom_box_del((GF_Box*)asrt);\n\t\t\tgoto exit;\n\t\t}\n\t\tgf_list_add(ptr->segment_run_table_entries, asrt);\n\t}\n\tif (ptr->segment_run_table_count != gf_list_count(ptr->segment_run_table_entries)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->fragment_run_table_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->fragment_run_table_count; i++) {\n\t\tGF_AdobeFragmentRunTableBox *afrt = NULL;\n\t\te = gf_isom_box_parse((GF_Box **)&afrt, bs);\n\t\tif (e) {\n\t\t\tif (afrt) gf_isom_box_del((GF_Box*)afrt);\n\t\t\tgoto exit;\n\t\t}\n\t\tgf_list_add(ptr->fragment_run_table_entries, afrt);\n\t}\n\tif (ptr->fragment_run_table_count != gf_list_count(ptr->fragment_run_table_entries)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\nexit:\n\tgf_free(tmp_str);\n\treturn e;\n}\n",
                    "caller_start": 76,
                    "file_path": "src/isomedia/box_code_adobe.c"
                },
                {
                    "type": "caller_info",
                    "call_line": 149,
                    "call_code": "ISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)",
                    "caller_code": "GF_Err abst_box_read(GF_Box *s, GF_BitStream *bs)\n{\n\tGF_AdobeBootstrapInfoBox *ptr = (GF_AdobeBootstrapInfoBox *)s;\n\tint i;\n\tu32 tmp_strsize;\n\tchar *tmp_str;\n\tBool zfound=GF_FALSE;\n\tGF_Err e = GF_OK;\n\n\tISOM_DECREASE_SIZE(ptr, 25)\n\tptr->bootstrapinfo_version = gf_bs_read_u32(bs);\n\tptr->profile = gf_bs_read_int(bs, 2);\n\tptr->live = gf_bs_read_int(bs, 1);\n\tptr->update = gf_bs_read_int(bs, 1);\n\tptr->reserved = gf_bs_read_int(bs, 4);\n\tptr->time_scale = gf_bs_read_u32(bs);\n\tptr->current_media_time = gf_bs_read_u64(bs);\n\tptr->smpte_time_code_offset = gf_bs_read_u64(bs);\n\n\ti=0;\n\tif (ptr->size<8) return GF_ISOM_INVALID_FILE;\n\ttmp_strsize =(u32)ptr->size;\n\ttmp_str = gf_malloc(sizeof(char)*(tmp_strsize+1));\n\tif (!tmp_str) return GF_OUT_OF_MEM;\n\tmemset(tmp_str, 0, sizeof(char)*(tmp_strsize+1) );\n\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\tif (i) {\n\t\tptr->movie_identifier = gf_strdup(tmp_str);\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->server_entry_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->server_entry_count; i++) {\n\t\tint j=0;\n\t\tzfound = GF_FALSE;\n\t\ttmp_strsize=(u32)ptr->size;\n\t\twhile (tmp_strsize) {\n\t\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\t\ttmp_str[j] = gf_bs_read_u8(bs);\n\t\t\ttmp_strsize--;\n\t\t\tif (!tmp_str[j]) {\n\t\t\t\tzfound = GF_TRUE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t\tif (!zfound) {\n\t\t\te = GF_ISOM_INVALID_FILE;\n\t\t\tgoto exit;\n\t\t}\n\t\tif (j) {\n\t\t\tgf_list_insert(ptr->server_entry_table, gf_strdup(tmp_str), i);\n\t\t}\n\t}\n\tif (ptr->server_entry_count != gf_list_count(ptr->server_entry_table)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->quality_entry_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->quality_entry_count; i++) {\n\t\tint j=0;\n\t\tzfound = GF_FALSE;\n\t\ttmp_strsize=(u32)ptr->size;\n\t\twhile (tmp_strsize) {\n\t\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\t\ttmp_str[j] = gf_bs_read_u8(bs);\n\t\t\ttmp_strsize--;\n\t\t\tif (!tmp_str[j]) {\n\t\t\t\tzfound = GF_TRUE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\n\t\tif (!zfound) {\n\t\t\te = GF_ISOM_INVALID_FILE;\n\t\t\tgoto exit;\n\t\t}\n\t\tif (j) {\n\t\t\tgf_list_insert(ptr->quality_entry_table, gf_strdup(tmp_str), i);\n\t\t}\n\t}\n\tif (ptr->quality_entry_count != gf_list_count(ptr->quality_entry_table)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\ti=0;\n\ttmp_strsize=(u32)ptr->size;\n\tzfound = GF_FALSE;\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tif (i) {\n\t\tptr->drm_data = gf_strdup(tmp_str);\n\t}\n\n\ti=0;\n\ttmp_strsize=(u32)ptr->size;\n\tzfound = GF_FALSE;\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tif (i) {\n\t\tptr->meta_data = gf_strdup(tmp_str);\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->segment_run_table_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->segment_run_table_count; i++) {\n\t\tGF_AdobeSegmentRunTableBox *asrt = NULL;\n\t\te = gf_isom_box_parse((GF_Box **)&asrt, bs);\n\t\tif (e) {\n\t\t\tif (asrt) gf_isom_box_del((GF_Box*)asrt);\n\t\t\tgoto exit;\n\t\t}\n\t\tgf_list_add(ptr->segment_run_table_entries, asrt);\n\t}\n\tif (ptr->segment_run_table_count != gf_list_count(ptr->segment_run_table_entries)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->fragment_run_table_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->fragment_run_table_count; i++) {\n\t\tGF_AdobeFragmentRunTableBox *afrt = NULL;\n\t\te = gf_isom_box_parse((GF_Box **)&afrt, bs);\n\t\tif (e) {\n\t\t\tif (afrt) gf_isom_box_del((GF_Box*)afrt);\n\t\t\tgoto exit;\n\t\t}\n\t\tgf_list_add(ptr->fragment_run_table_entries, afrt);\n\t}\n\tif (ptr->fragment_run_table_count != gf_list_count(ptr->fragment_run_table_entries)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\nexit:\n\tgf_free(tmp_str);\n\treturn e;\n}\n",
                    "caller_start": 76,
                    "file_path": "src/isomedia/box_code_adobe.c"
                },
                {
                    "type": "caller_info",
                    "call_line": 156,
                    "call_code": "ISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)",
                    "caller_code": "GF_Err abst_box_read(GF_Box *s, GF_BitStream *bs)\n{\n\tGF_AdobeBootstrapInfoBox *ptr = (GF_AdobeBootstrapInfoBox *)s;\n\tint i;\n\tu32 tmp_strsize;\n\tchar *tmp_str;\n\tBool zfound=GF_FALSE;\n\tGF_Err e = GF_OK;\n\n\tISOM_DECREASE_SIZE(ptr, 25)\n\tptr->bootstrapinfo_version = gf_bs_read_u32(bs);\n\tptr->profile = gf_bs_read_int(bs, 2);\n\tptr->live = gf_bs_read_int(bs, 1);\n\tptr->update = gf_bs_read_int(bs, 1);\n\tptr->reserved = gf_bs_read_int(bs, 4);\n\tptr->time_scale = gf_bs_read_u32(bs);\n\tptr->current_media_time = gf_bs_read_u64(bs);\n\tptr->smpte_time_code_offset = gf_bs_read_u64(bs);\n\n\ti=0;\n\tif (ptr->size<8) return GF_ISOM_INVALID_FILE;\n\ttmp_strsize =(u32)ptr->size;\n\ttmp_str = gf_malloc(sizeof(char)*(tmp_strsize+1));\n\tif (!tmp_str) return GF_OUT_OF_MEM;\n\tmemset(tmp_str, 0, sizeof(char)*(tmp_strsize+1) );\n\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\tif (i) {\n\t\tptr->movie_identifier = gf_strdup(tmp_str);\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->server_entry_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->server_entry_count; i++) {\n\t\tint j=0;\n\t\tzfound = GF_FALSE;\n\t\ttmp_strsize=(u32)ptr->size;\n\t\twhile (tmp_strsize) {\n\t\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\t\ttmp_str[j] = gf_bs_read_u8(bs);\n\t\t\ttmp_strsize--;\n\t\t\tif (!tmp_str[j]) {\n\t\t\t\tzfound = GF_TRUE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t\tif (!zfound) {\n\t\t\te = GF_ISOM_INVALID_FILE;\n\t\t\tgoto exit;\n\t\t}\n\t\tif (j) {\n\t\t\tgf_list_insert(ptr->server_entry_table, gf_strdup(tmp_str), i);\n\t\t}\n\t}\n\tif (ptr->server_entry_count != gf_list_count(ptr->server_entry_table)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->quality_entry_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->quality_entry_count; i++) {\n\t\tint j=0;\n\t\tzfound = GF_FALSE;\n\t\ttmp_strsize=(u32)ptr->size;\n\t\twhile (tmp_strsize) {\n\t\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\t\ttmp_str[j] = gf_bs_read_u8(bs);\n\t\t\ttmp_strsize--;\n\t\t\tif (!tmp_str[j]) {\n\t\t\t\tzfound = GF_TRUE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\n\t\tif (!zfound) {\n\t\t\te = GF_ISOM_INVALID_FILE;\n\t\t\tgoto exit;\n\t\t}\n\t\tif (j) {\n\t\t\tgf_list_insert(ptr->quality_entry_table, gf_strdup(tmp_str), i);\n\t\t}\n\t}\n\tif (ptr->quality_entry_count != gf_list_count(ptr->quality_entry_table)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\ti=0;\n\ttmp_strsize=(u32)ptr->size;\n\tzfound = GF_FALSE;\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tif (i) {\n\t\tptr->drm_data = gf_strdup(tmp_str);\n\t}\n\n\ti=0;\n\ttmp_strsize=(u32)ptr->size;\n\tzfound = GF_FALSE;\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tif (i) {\n\t\tptr->meta_data = gf_strdup(tmp_str);\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->segment_run_table_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->segment_run_table_count; i++) {\n\t\tGF_AdobeSegmentRunTableBox *asrt = NULL;\n\t\te = gf_isom_box_parse((GF_Box **)&asrt, bs);\n\t\tif (e) {\n\t\t\tif (asrt) gf_isom_box_del((GF_Box*)asrt);\n\t\t\tgoto exit;\n\t\t}\n\t\tgf_list_add(ptr->segment_run_table_entries, asrt);\n\t}\n\tif (ptr->segment_run_table_count != gf_list_count(ptr->segment_run_table_entries)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->fragment_run_table_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->fragment_run_table_count; i++) {\n\t\tGF_AdobeFragmentRunTableBox *afrt = NULL;\n\t\te = gf_isom_box_parse((GF_Box **)&afrt, bs);\n\t\tif (e) {\n\t\t\tif (afrt) gf_isom_box_del((GF_Box*)afrt);\n\t\t\tgoto exit;\n\t\t}\n\t\tgf_list_add(ptr->fragment_run_table_entries, afrt);\n\t}\n\tif (ptr->fragment_run_table_count != gf_list_count(ptr->fragment_run_table_entries)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\nexit:\n\tgf_free(tmp_str);\n\treturn e;\n}\n",
                    "caller_start": 76,
                    "file_path": "src/isomedia/box_code_adobe.c"
                },
                {
                    "type": "caller_info",
                    "call_line": 183,
                    "call_code": "ISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)",
                    "caller_code": "GF_Err abst_box_read(GF_Box *s, GF_BitStream *bs)\n{\n\tGF_AdobeBootstrapInfoBox *ptr = (GF_AdobeBootstrapInfoBox *)s;\n\tint i;\n\tu32 tmp_strsize;\n\tchar *tmp_str;\n\tBool zfound=GF_FALSE;\n\tGF_Err e = GF_OK;\n\n\tISOM_DECREASE_SIZE(ptr, 25)\n\tptr->bootstrapinfo_version = gf_bs_read_u32(bs);\n\tptr->profile = gf_bs_read_int(bs, 2);\n\tptr->live = gf_bs_read_int(bs, 1);\n\tptr->update = gf_bs_read_int(bs, 1);\n\tptr->reserved = gf_bs_read_int(bs, 4);\n\tptr->time_scale = gf_bs_read_u32(bs);\n\tptr->current_media_time = gf_bs_read_u64(bs);\n\tptr->smpte_time_code_offset = gf_bs_read_u64(bs);\n\n\ti=0;\n\tif (ptr->size<8) return GF_ISOM_INVALID_FILE;\n\ttmp_strsize =(u32)ptr->size;\n\ttmp_str = gf_malloc(sizeof(char)*(tmp_strsize+1));\n\tif (!tmp_str) return GF_OUT_OF_MEM;\n\tmemset(tmp_str, 0, sizeof(char)*(tmp_strsize+1) );\n\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\tif (i) {\n\t\tptr->movie_identifier = gf_strdup(tmp_str);\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->server_entry_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->server_entry_count; i++) {\n\t\tint j=0;\n\t\tzfound = GF_FALSE;\n\t\ttmp_strsize=(u32)ptr->size;\n\t\twhile (tmp_strsize) {\n\t\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\t\ttmp_str[j] = gf_bs_read_u8(bs);\n\t\t\ttmp_strsize--;\n\t\t\tif (!tmp_str[j]) {\n\t\t\t\tzfound = GF_TRUE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t\tif (!zfound) {\n\t\t\te = GF_ISOM_INVALID_FILE;\n\t\t\tgoto exit;\n\t\t}\n\t\tif (j) {\n\t\t\tgf_list_insert(ptr->server_entry_table, gf_strdup(tmp_str), i);\n\t\t}\n\t}\n\tif (ptr->server_entry_count != gf_list_count(ptr->server_entry_table)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->quality_entry_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->quality_entry_count; i++) {\n\t\tint j=0;\n\t\tzfound = GF_FALSE;\n\t\ttmp_strsize=(u32)ptr->size;\n\t\twhile (tmp_strsize) {\n\t\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\t\ttmp_str[j] = gf_bs_read_u8(bs);\n\t\t\ttmp_strsize--;\n\t\t\tif (!tmp_str[j]) {\n\t\t\t\tzfound = GF_TRUE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\n\t\tif (!zfound) {\n\t\t\te = GF_ISOM_INVALID_FILE;\n\t\t\tgoto exit;\n\t\t}\n\t\tif (j) {\n\t\t\tgf_list_insert(ptr->quality_entry_table, gf_strdup(tmp_str), i);\n\t\t}\n\t}\n\tif (ptr->quality_entry_count != gf_list_count(ptr->quality_entry_table)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\ti=0;\n\ttmp_strsize=(u32)ptr->size;\n\tzfound = GF_FALSE;\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tif (i) {\n\t\tptr->drm_data = gf_strdup(tmp_str);\n\t}\n\n\ti=0;\n\ttmp_strsize=(u32)ptr->size;\n\tzfound = GF_FALSE;\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tif (i) {\n\t\tptr->meta_data = gf_strdup(tmp_str);\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->segment_run_table_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->segment_run_table_count; i++) {\n\t\tGF_AdobeSegmentRunTableBox *asrt = NULL;\n\t\te = gf_isom_box_parse((GF_Box **)&asrt, bs);\n\t\tif (e) {\n\t\t\tif (asrt) gf_isom_box_del((GF_Box*)asrt);\n\t\t\tgoto exit;\n\t\t}\n\t\tgf_list_add(ptr->segment_run_table_entries, asrt);\n\t}\n\tif (ptr->segment_run_table_count != gf_list_count(ptr->segment_run_table_entries)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->fragment_run_table_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->fragment_run_table_count; i++) {\n\t\tGF_AdobeFragmentRunTableBox *afrt = NULL;\n\t\te = gf_isom_box_parse((GF_Box **)&afrt, bs);\n\t\tif (e) {\n\t\t\tif (afrt) gf_isom_box_del((GF_Box*)afrt);\n\t\t\tgoto exit;\n\t\t}\n\t\tgf_list_add(ptr->fragment_run_table_entries, afrt);\n\t}\n\tif (ptr->fragment_run_table_count != gf_list_count(ptr->fragment_run_table_entries)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\nexit:\n\tgf_free(tmp_str);\n\treturn e;\n}\n",
                    "caller_start": 76,
                    "file_path": "src/isomedia/box_code_adobe.c"
                },
                {
                    "type": "caller_info",
                    "call_line": 205,
                    "call_code": "ISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)",
                    "caller_code": "GF_Err abst_box_read(GF_Box *s, GF_BitStream *bs)\n{\n\tGF_AdobeBootstrapInfoBox *ptr = (GF_AdobeBootstrapInfoBox *)s;\n\tint i;\n\tu32 tmp_strsize;\n\tchar *tmp_str;\n\tBool zfound=GF_FALSE;\n\tGF_Err e = GF_OK;\n\n\tISOM_DECREASE_SIZE(ptr, 25)\n\tptr->bootstrapinfo_version = gf_bs_read_u32(bs);\n\tptr->profile = gf_bs_read_int(bs, 2);\n\tptr->live = gf_bs_read_int(bs, 1);\n\tptr->update = gf_bs_read_int(bs, 1);\n\tptr->reserved = gf_bs_read_int(bs, 4);\n\tptr->time_scale = gf_bs_read_u32(bs);\n\tptr->current_media_time = gf_bs_read_u64(bs);\n\tptr->smpte_time_code_offset = gf_bs_read_u64(bs);\n\n\ti=0;\n\tif (ptr->size<8) return GF_ISOM_INVALID_FILE;\n\ttmp_strsize =(u32)ptr->size;\n\ttmp_str = gf_malloc(sizeof(char)*(tmp_strsize+1));\n\tif (!tmp_str) return GF_OUT_OF_MEM;\n\tmemset(tmp_str, 0, sizeof(char)*(tmp_strsize+1) );\n\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\tif (i) {\n\t\tptr->movie_identifier = gf_strdup(tmp_str);\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->server_entry_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->server_entry_count; i++) {\n\t\tint j=0;\n\t\tzfound = GF_FALSE;\n\t\ttmp_strsize=(u32)ptr->size;\n\t\twhile (tmp_strsize) {\n\t\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\t\ttmp_str[j] = gf_bs_read_u8(bs);\n\t\t\ttmp_strsize--;\n\t\t\tif (!tmp_str[j]) {\n\t\t\t\tzfound = GF_TRUE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t\tif (!zfound) {\n\t\t\te = GF_ISOM_INVALID_FILE;\n\t\t\tgoto exit;\n\t\t}\n\t\tif (j) {\n\t\t\tgf_list_insert(ptr->server_entry_table, gf_strdup(tmp_str), i);\n\t\t}\n\t}\n\tif (ptr->server_entry_count != gf_list_count(ptr->server_entry_table)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->quality_entry_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->quality_entry_count; i++) {\n\t\tint j=0;\n\t\tzfound = GF_FALSE;\n\t\ttmp_strsize=(u32)ptr->size;\n\t\twhile (tmp_strsize) {\n\t\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\t\ttmp_str[j] = gf_bs_read_u8(bs);\n\t\t\ttmp_strsize--;\n\t\t\tif (!tmp_str[j]) {\n\t\t\t\tzfound = GF_TRUE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\n\t\tif (!zfound) {\n\t\t\te = GF_ISOM_INVALID_FILE;\n\t\t\tgoto exit;\n\t\t}\n\t\tif (j) {\n\t\t\tgf_list_insert(ptr->quality_entry_table, gf_strdup(tmp_str), i);\n\t\t}\n\t}\n\tif (ptr->quality_entry_count != gf_list_count(ptr->quality_entry_table)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\ti=0;\n\ttmp_strsize=(u32)ptr->size;\n\tzfound = GF_FALSE;\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tif (i) {\n\t\tptr->drm_data = gf_strdup(tmp_str);\n\t}\n\n\ti=0;\n\ttmp_strsize=(u32)ptr->size;\n\tzfound = GF_FALSE;\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tif (i) {\n\t\tptr->meta_data = gf_strdup(tmp_str);\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->segment_run_table_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->segment_run_table_count; i++) {\n\t\tGF_AdobeSegmentRunTableBox *asrt = NULL;\n\t\te = gf_isom_box_parse((GF_Box **)&asrt, bs);\n\t\tif (e) {\n\t\t\tif (asrt) gf_isom_box_del((GF_Box*)asrt);\n\t\t\tgoto exit;\n\t\t}\n\t\tgf_list_add(ptr->segment_run_table_entries, asrt);\n\t}\n\tif (ptr->segment_run_table_count != gf_list_count(ptr->segment_run_table_entries)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->fragment_run_table_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->fragment_run_table_count; i++) {\n\t\tGF_AdobeFragmentRunTableBox *afrt = NULL;\n\t\te = gf_isom_box_parse((GF_Box **)&afrt, bs);\n\t\tif (e) {\n\t\t\tif (afrt) gf_isom_box_del((GF_Box*)afrt);\n\t\t\tgoto exit;\n\t\t}\n\t\tgf_list_add(ptr->fragment_run_table_entries, afrt);\n\t}\n\tif (ptr->fragment_run_table_count != gf_list_count(ptr->fragment_run_table_entries)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\nexit:\n\tgf_free(tmp_str);\n\treturn e;\n}\n",
                    "caller_start": 76,
                    "file_path": "src/isomedia/box_code_adobe.c"
                },
                {
                    "type": "caller_info",
                    "call_line": 223,
                    "call_code": "ISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)",
                    "caller_code": "GF_Err abst_box_read(GF_Box *s, GF_BitStream *bs)\n{\n\tGF_AdobeBootstrapInfoBox *ptr = (GF_AdobeBootstrapInfoBox *)s;\n\tint i;\n\tu32 tmp_strsize;\n\tchar *tmp_str;\n\tBool zfound=GF_FALSE;\n\tGF_Err e = GF_OK;\n\n\tISOM_DECREASE_SIZE(ptr, 25)\n\tptr->bootstrapinfo_version = gf_bs_read_u32(bs);\n\tptr->profile = gf_bs_read_int(bs, 2);\n\tptr->live = gf_bs_read_int(bs, 1);\n\tptr->update = gf_bs_read_int(bs, 1);\n\tptr->reserved = gf_bs_read_int(bs, 4);\n\tptr->time_scale = gf_bs_read_u32(bs);\n\tptr->current_media_time = gf_bs_read_u64(bs);\n\tptr->smpte_time_code_offset = gf_bs_read_u64(bs);\n\n\ti=0;\n\tif (ptr->size<8) return GF_ISOM_INVALID_FILE;\n\ttmp_strsize =(u32)ptr->size;\n\ttmp_str = gf_malloc(sizeof(char)*(tmp_strsize+1));\n\tif (!tmp_str) return GF_OUT_OF_MEM;\n\tmemset(tmp_str, 0, sizeof(char)*(tmp_strsize+1) );\n\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\tif (i) {\n\t\tptr->movie_identifier = gf_strdup(tmp_str);\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->server_entry_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->server_entry_count; i++) {\n\t\tint j=0;\n\t\tzfound = GF_FALSE;\n\t\ttmp_strsize=(u32)ptr->size;\n\t\twhile (tmp_strsize) {\n\t\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\t\ttmp_str[j] = gf_bs_read_u8(bs);\n\t\t\ttmp_strsize--;\n\t\t\tif (!tmp_str[j]) {\n\t\t\t\tzfound = GF_TRUE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t\tif (!zfound) {\n\t\t\te = GF_ISOM_INVALID_FILE;\n\t\t\tgoto exit;\n\t\t}\n\t\tif (j) {\n\t\t\tgf_list_insert(ptr->server_entry_table, gf_strdup(tmp_str), i);\n\t\t}\n\t}\n\tif (ptr->server_entry_count != gf_list_count(ptr->server_entry_table)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->quality_entry_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->quality_entry_count; i++) {\n\t\tint j=0;\n\t\tzfound = GF_FALSE;\n\t\ttmp_strsize=(u32)ptr->size;\n\t\twhile (tmp_strsize) {\n\t\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\t\ttmp_str[j] = gf_bs_read_u8(bs);\n\t\t\ttmp_strsize--;\n\t\t\tif (!tmp_str[j]) {\n\t\t\t\tzfound = GF_TRUE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\n\t\tif (!zfound) {\n\t\t\te = GF_ISOM_INVALID_FILE;\n\t\t\tgoto exit;\n\t\t}\n\t\tif (j) {\n\t\t\tgf_list_insert(ptr->quality_entry_table, gf_strdup(tmp_str), i);\n\t\t}\n\t}\n\tif (ptr->quality_entry_count != gf_list_count(ptr->quality_entry_table)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\ti=0;\n\ttmp_strsize=(u32)ptr->size;\n\tzfound = GF_FALSE;\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tif (i) {\n\t\tptr->drm_data = gf_strdup(tmp_str);\n\t}\n\n\ti=0;\n\ttmp_strsize=(u32)ptr->size;\n\tzfound = GF_FALSE;\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tif (i) {\n\t\tptr->meta_data = gf_strdup(tmp_str);\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->segment_run_table_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->segment_run_table_count; i++) {\n\t\tGF_AdobeSegmentRunTableBox *asrt = NULL;\n\t\te = gf_isom_box_parse((GF_Box **)&asrt, bs);\n\t\tif (e) {\n\t\t\tif (asrt) gf_isom_box_del((GF_Box*)asrt);\n\t\t\tgoto exit;\n\t\t}\n\t\tgf_list_add(ptr->segment_run_table_entries, asrt);\n\t}\n\tif (ptr->segment_run_table_count != gf_list_count(ptr->segment_run_table_entries)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->fragment_run_table_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->fragment_run_table_count; i++) {\n\t\tGF_AdobeFragmentRunTableBox *afrt = NULL;\n\t\te = gf_isom_box_parse((GF_Box **)&afrt, bs);\n\t\tif (e) {\n\t\t\tif (afrt) gf_isom_box_del((GF_Box*)afrt);\n\t\t\tgoto exit;\n\t\t}\n\t\tgf_list_add(ptr->fragment_run_table_entries, afrt);\n\t}\n\tif (ptr->fragment_run_table_count != gf_list_count(ptr->fragment_run_table_entries)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\nexit:\n\tgf_free(tmp_str);\n\treturn e;\n}\n",
                    "caller_start": 76,
                    "file_path": "src/isomedia/box_code_adobe.c"
                }
            ]
        },
        {
            "tool": "caller_info.find_caller_for_func({'func_name': 'ISOM_DECREASE_SIZE_GOTO_EXIT', 'project_dir': './storage/result/Part2_result/github/CVE-2022-45204/old_repos/gpac-gpac_aa486c3'})",
            "result": [
                {
                    "type": "caller_info",
                    "call_line": 103,
                    "call_code": "ISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)",
                    "caller_code": "GF_Err abst_box_read(GF_Box *s, GF_BitStream *bs)\n{\n\tGF_AdobeBootstrapInfoBox *ptr = (GF_AdobeBootstrapInfoBox *)s;\n\tint i;\n\tu32 tmp_strsize;\n\tchar *tmp_str;\n\tBool zfound=GF_FALSE;\n\tGF_Err e = GF_OK;\n\n\tISOM_DECREASE_SIZE(ptr, 25)\n\tptr->bootstrapinfo_version = gf_bs_read_u32(bs);\n\tptr->profile = gf_bs_read_int(bs, 2);\n\tptr->live = gf_bs_read_int(bs, 1);\n\tptr->update = gf_bs_read_int(bs, 1);\n\tptr->reserved = gf_bs_read_int(bs, 4);\n\tptr->time_scale = gf_bs_read_u32(bs);\n\tptr->current_media_time = gf_bs_read_u64(bs);\n\tptr->smpte_time_code_offset = gf_bs_read_u64(bs);\n\n\ti=0;\n\tif (ptr->size<8) return GF_ISOM_INVALID_FILE;\n\ttmp_strsize =(u32)ptr->size;\n\ttmp_str = gf_malloc(sizeof(char)*(tmp_strsize+1));\n\tif (!tmp_str) return GF_OUT_OF_MEM;\n\tmemset(tmp_str, 0, sizeof(char)*(tmp_strsize+1) );\n\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\tif (i) {\n\t\tptr->movie_identifier = gf_strdup(tmp_str);\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->server_entry_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->server_entry_count; i++) {\n\t\tint j=0;\n\t\tzfound = GF_FALSE;\n\t\ttmp_strsize=(u32)ptr->size;\n\t\twhile (tmp_strsize) {\n\t\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\t\ttmp_str[j] = gf_bs_read_u8(bs);\n\t\t\ttmp_strsize--;\n\t\t\tif (!tmp_str[j]) {\n\t\t\t\tzfound = GF_TRUE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t\tif (!zfound) {\n\t\t\te = GF_ISOM_INVALID_FILE;\n\t\t\tgoto exit;\n\t\t}\n\t\tif (j) {\n\t\t\tgf_list_insert(ptr->server_entry_table, gf_strdup(tmp_str), i);\n\t\t}\n\t}\n\tif (ptr->server_entry_count != gf_list_count(ptr->server_entry_table)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->quality_entry_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->quality_entry_count; i++) {\n\t\tint j=0;\n\t\tzfound = GF_FALSE;\n\t\ttmp_strsize=(u32)ptr->size;\n\t\twhile (tmp_strsize) {\n\t\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\t\ttmp_str[j] = gf_bs_read_u8(bs);\n\t\t\ttmp_strsize--;\n\t\t\tif (!tmp_str[j]) {\n\t\t\t\tzfound = GF_TRUE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\n\t\tif (!zfound) {\n\t\t\te = GF_ISOM_INVALID_FILE;\n\t\t\tgoto exit;\n\t\t}\n\t\tif (j) {\n\t\t\tgf_list_insert(ptr->quality_entry_table, gf_strdup(tmp_str), i);\n\t\t}\n\t}\n\tif (ptr->quality_entry_count != gf_list_count(ptr->quality_entry_table)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\ti=0;\n\ttmp_strsize=(u32)ptr->size;\n\tzfound = GF_FALSE;\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tif (i) {\n\t\tptr->drm_data = gf_strdup(tmp_str);\n\t}\n\n\ti=0;\n\ttmp_strsize=(u32)ptr->size;\n\tzfound = GF_FALSE;\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tif (i) {\n\t\tptr->meta_data = gf_strdup(tmp_str);\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->segment_run_table_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->segment_run_table_count; i++) {\n\t\tGF_AdobeSegmentRunTableBox *asrt = NULL;\n\t\te = gf_isom_box_parse((GF_Box **)&asrt, bs);\n\t\tif (e) {\n\t\t\tif (asrt) gf_isom_box_del((GF_Box*)asrt);\n\t\t\tgoto exit;\n\t\t}\n\t\tgf_list_add(ptr->segment_run_table_entries, asrt);\n\t}\n\tif (ptr->segment_run_table_count != gf_list_count(ptr->segment_run_table_entries)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->fragment_run_table_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->fragment_run_table_count; i++) {\n\t\tGF_AdobeFragmentRunTableBox *afrt = NULL;\n\t\te = gf_isom_box_parse((GF_Box **)&afrt, bs);\n\t\tif (e) {\n\t\t\tif (afrt) gf_isom_box_del((GF_Box*)afrt);\n\t\t\tgoto exit;\n\t\t}\n\t\tgf_list_add(ptr->fragment_run_table_entries, afrt);\n\t}\n\tif (ptr->fragment_run_table_count != gf_list_count(ptr->fragment_run_table_entries)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\nexit:\n\tgf_free(tmp_str);\n\treturn e;\n}\n",
                    "caller_start": 76,
                    "file_path": "src/isomedia/box_code_adobe.c"
                },
                {
                    "type": "caller_info",
                    "call_line": 120,
                    "call_code": "ISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)",
                    "caller_code": "GF_Err abst_box_read(GF_Box *s, GF_BitStream *bs)\n{\n\tGF_AdobeBootstrapInfoBox *ptr = (GF_AdobeBootstrapInfoBox *)s;\n\tint i;\n\tu32 tmp_strsize;\n\tchar *tmp_str;\n\tBool zfound=GF_FALSE;\n\tGF_Err e = GF_OK;\n\n\tISOM_DECREASE_SIZE(ptr, 25)\n\tptr->bootstrapinfo_version = gf_bs_read_u32(bs);\n\tptr->profile = gf_bs_read_int(bs, 2);\n\tptr->live = gf_bs_read_int(bs, 1);\n\tptr->update = gf_bs_read_int(bs, 1);\n\tptr->reserved = gf_bs_read_int(bs, 4);\n\tptr->time_scale = gf_bs_read_u32(bs);\n\tptr->current_media_time = gf_bs_read_u64(bs);\n\tptr->smpte_time_code_offset = gf_bs_read_u64(bs);\n\n\ti=0;\n\tif (ptr->size<8) return GF_ISOM_INVALID_FILE;\n\ttmp_strsize =(u32)ptr->size;\n\ttmp_str = gf_malloc(sizeof(char)*(tmp_strsize+1));\n\tif (!tmp_str) return GF_OUT_OF_MEM;\n\tmemset(tmp_str, 0, sizeof(char)*(tmp_strsize+1) );\n\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\tif (i) {\n\t\tptr->movie_identifier = gf_strdup(tmp_str);\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->server_entry_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->server_entry_count; i++) {\n\t\tint j=0;\n\t\tzfound = GF_FALSE;\n\t\ttmp_strsize=(u32)ptr->size;\n\t\twhile (tmp_strsize) {\n\t\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\t\ttmp_str[j] = gf_bs_read_u8(bs);\n\t\t\ttmp_strsize--;\n\t\t\tif (!tmp_str[j]) {\n\t\t\t\tzfound = GF_TRUE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t\tif (!zfound) {\n\t\t\te = GF_ISOM_INVALID_FILE;\n\t\t\tgoto exit;\n\t\t}\n\t\tif (j) {\n\t\t\tgf_list_insert(ptr->server_entry_table, gf_strdup(tmp_str), i);\n\t\t}\n\t}\n\tif (ptr->server_entry_count != gf_list_count(ptr->server_entry_table)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->quality_entry_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->quality_entry_count; i++) {\n\t\tint j=0;\n\t\tzfound = GF_FALSE;\n\t\ttmp_strsize=(u32)ptr->size;\n\t\twhile (tmp_strsize) {\n\t\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\t\ttmp_str[j] = gf_bs_read_u8(bs);\n\t\t\ttmp_strsize--;\n\t\t\tif (!tmp_str[j]) {\n\t\t\t\tzfound = GF_TRUE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\n\t\tif (!zfound) {\n\t\t\te = GF_ISOM_INVALID_FILE;\n\t\t\tgoto exit;\n\t\t}\n\t\tif (j) {\n\t\t\tgf_list_insert(ptr->quality_entry_table, gf_strdup(tmp_str), i);\n\t\t}\n\t}\n\tif (ptr->quality_entry_count != gf_list_count(ptr->quality_entry_table)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\ti=0;\n\ttmp_strsize=(u32)ptr->size;\n\tzfound = GF_FALSE;\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tif (i) {\n\t\tptr->drm_data = gf_strdup(tmp_str);\n\t}\n\n\ti=0;\n\ttmp_strsize=(u32)ptr->size;\n\tzfound = GF_FALSE;\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tif (i) {\n\t\tptr->meta_data = gf_strdup(tmp_str);\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->segment_run_table_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->segment_run_table_count; i++) {\n\t\tGF_AdobeSegmentRunTableBox *asrt = NULL;\n\t\te = gf_isom_box_parse((GF_Box **)&asrt, bs);\n\t\tif (e) {\n\t\t\tif (asrt) gf_isom_box_del((GF_Box*)asrt);\n\t\t\tgoto exit;\n\t\t}\n\t\tgf_list_add(ptr->segment_run_table_entries, asrt);\n\t}\n\tif (ptr->segment_run_table_count != gf_list_count(ptr->segment_run_table_entries)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->fragment_run_table_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->fragment_run_table_count; i++) {\n\t\tGF_AdobeFragmentRunTableBox *afrt = NULL;\n\t\te = gf_isom_box_parse((GF_Box **)&afrt, bs);\n\t\tif (e) {\n\t\t\tif (afrt) gf_isom_box_del((GF_Box*)afrt);\n\t\t\tgoto exit;\n\t\t}\n\t\tgf_list_add(ptr->fragment_run_table_entries, afrt);\n\t}\n\tif (ptr->fragment_run_table_count != gf_list_count(ptr->fragment_run_table_entries)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\nexit:\n\tgf_free(tmp_str);\n\treturn e;\n}\n",
                    "caller_start": 76,
                    "file_path": "src/isomedia/box_code_adobe.c"
                },
                {
                    "type": "caller_info",
                    "call_line": 127,
                    "call_code": "ISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)",
                    "caller_code": "GF_Err abst_box_read(GF_Box *s, GF_BitStream *bs)\n{\n\tGF_AdobeBootstrapInfoBox *ptr = (GF_AdobeBootstrapInfoBox *)s;\n\tint i;\n\tu32 tmp_strsize;\n\tchar *tmp_str;\n\tBool zfound=GF_FALSE;\n\tGF_Err e = GF_OK;\n\n\tISOM_DECREASE_SIZE(ptr, 25)\n\tptr->bootstrapinfo_version = gf_bs_read_u32(bs);\n\tptr->profile = gf_bs_read_int(bs, 2);\n\tptr->live = gf_bs_read_int(bs, 1);\n\tptr->update = gf_bs_read_int(bs, 1);\n\tptr->reserved = gf_bs_read_int(bs, 4);\n\tptr->time_scale = gf_bs_read_u32(bs);\n\tptr->current_media_time = gf_bs_read_u64(bs);\n\tptr->smpte_time_code_offset = gf_bs_read_u64(bs);\n\n\ti=0;\n\tif (ptr->size<8) return GF_ISOM_INVALID_FILE;\n\ttmp_strsize =(u32)ptr->size;\n\ttmp_str = gf_malloc(sizeof(char)*(tmp_strsize+1));\n\tif (!tmp_str) return GF_OUT_OF_MEM;\n\tmemset(tmp_str, 0, sizeof(char)*(tmp_strsize+1) );\n\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\tif (i) {\n\t\tptr->movie_identifier = gf_strdup(tmp_str);\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->server_entry_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->server_entry_count; i++) {\n\t\tint j=0;\n\t\tzfound = GF_FALSE;\n\t\ttmp_strsize=(u32)ptr->size;\n\t\twhile (tmp_strsize) {\n\t\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\t\ttmp_str[j] = gf_bs_read_u8(bs);\n\t\t\ttmp_strsize--;\n\t\t\tif (!tmp_str[j]) {\n\t\t\t\tzfound = GF_TRUE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t\tif (!zfound) {\n\t\t\te = GF_ISOM_INVALID_FILE;\n\t\t\tgoto exit;\n\t\t}\n\t\tif (j) {\n\t\t\tgf_list_insert(ptr->server_entry_table, gf_strdup(tmp_str), i);\n\t\t}\n\t}\n\tif (ptr->server_entry_count != gf_list_count(ptr->server_entry_table)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->quality_entry_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->quality_entry_count; i++) {\n\t\tint j=0;\n\t\tzfound = GF_FALSE;\n\t\ttmp_strsize=(u32)ptr->size;\n\t\twhile (tmp_strsize) {\n\t\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\t\ttmp_str[j] = gf_bs_read_u8(bs);\n\t\t\ttmp_strsize--;\n\t\t\tif (!tmp_str[j]) {\n\t\t\t\tzfound = GF_TRUE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\n\t\tif (!zfound) {\n\t\t\te = GF_ISOM_INVALID_FILE;\n\t\t\tgoto exit;\n\t\t}\n\t\tif (j) {\n\t\t\tgf_list_insert(ptr->quality_entry_table, gf_strdup(tmp_str), i);\n\t\t}\n\t}\n\tif (ptr->quality_entry_count != gf_list_count(ptr->quality_entry_table)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\ti=0;\n\ttmp_strsize=(u32)ptr->size;\n\tzfound = GF_FALSE;\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tif (i) {\n\t\tptr->drm_data = gf_strdup(tmp_str);\n\t}\n\n\ti=0;\n\ttmp_strsize=(u32)ptr->size;\n\tzfound = GF_FALSE;\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tif (i) {\n\t\tptr->meta_data = gf_strdup(tmp_str);\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->segment_run_table_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->segment_run_table_count; i++) {\n\t\tGF_AdobeSegmentRunTableBox *asrt = NULL;\n\t\te = gf_isom_box_parse((GF_Box **)&asrt, bs);\n\t\tif (e) {\n\t\t\tif (asrt) gf_isom_box_del((GF_Box*)asrt);\n\t\t\tgoto exit;\n\t\t}\n\t\tgf_list_add(ptr->segment_run_table_entries, asrt);\n\t}\n\tif (ptr->segment_run_table_count != gf_list_count(ptr->segment_run_table_entries)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->fragment_run_table_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->fragment_run_table_count; i++) {\n\t\tGF_AdobeFragmentRunTableBox *afrt = NULL;\n\t\te = gf_isom_box_parse((GF_Box **)&afrt, bs);\n\t\tif (e) {\n\t\t\tif (afrt) gf_isom_box_del((GF_Box*)afrt);\n\t\t\tgoto exit;\n\t\t}\n\t\tgf_list_add(ptr->fragment_run_table_entries, afrt);\n\t}\n\tif (ptr->fragment_run_table_count != gf_list_count(ptr->fragment_run_table_entries)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\nexit:\n\tgf_free(tmp_str);\n\treturn e;\n}\n",
                    "caller_start": 76,
                    "file_path": "src/isomedia/box_code_adobe.c"
                },
                {
                    "type": "caller_info",
                    "call_line": 149,
                    "call_code": "ISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)",
                    "caller_code": "GF_Err abst_box_read(GF_Box *s, GF_BitStream *bs)\n{\n\tGF_AdobeBootstrapInfoBox *ptr = (GF_AdobeBootstrapInfoBox *)s;\n\tint i;\n\tu32 tmp_strsize;\n\tchar *tmp_str;\n\tBool zfound=GF_FALSE;\n\tGF_Err e = GF_OK;\n\n\tISOM_DECREASE_SIZE(ptr, 25)\n\tptr->bootstrapinfo_version = gf_bs_read_u32(bs);\n\tptr->profile = gf_bs_read_int(bs, 2);\n\tptr->live = gf_bs_read_int(bs, 1);\n\tptr->update = gf_bs_read_int(bs, 1);\n\tptr->reserved = gf_bs_read_int(bs, 4);\n\tptr->time_scale = gf_bs_read_u32(bs);\n\tptr->current_media_time = gf_bs_read_u64(bs);\n\tptr->smpte_time_code_offset = gf_bs_read_u64(bs);\n\n\ti=0;\n\tif (ptr->size<8) return GF_ISOM_INVALID_FILE;\n\ttmp_strsize =(u32)ptr->size;\n\ttmp_str = gf_malloc(sizeof(char)*(tmp_strsize+1));\n\tif (!tmp_str) return GF_OUT_OF_MEM;\n\tmemset(tmp_str, 0, sizeof(char)*(tmp_strsize+1) );\n\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\tif (i) {\n\t\tptr->movie_identifier = gf_strdup(tmp_str);\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->server_entry_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->server_entry_count; i++) {\n\t\tint j=0;\n\t\tzfound = GF_FALSE;\n\t\ttmp_strsize=(u32)ptr->size;\n\t\twhile (tmp_strsize) {\n\t\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\t\ttmp_str[j] = gf_bs_read_u8(bs);\n\t\t\ttmp_strsize--;\n\t\t\tif (!tmp_str[j]) {\n\t\t\t\tzfound = GF_TRUE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t\tif (!zfound) {\n\t\t\te = GF_ISOM_INVALID_FILE;\n\t\t\tgoto exit;\n\t\t}\n\t\tif (j) {\n\t\t\tgf_list_insert(ptr->server_entry_table, gf_strdup(tmp_str), i);\n\t\t}\n\t}\n\tif (ptr->server_entry_count != gf_list_count(ptr->server_entry_table)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->quality_entry_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->quality_entry_count; i++) {\n\t\tint j=0;\n\t\tzfound = GF_FALSE;\n\t\ttmp_strsize=(u32)ptr->size;\n\t\twhile (tmp_strsize) {\n\t\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\t\ttmp_str[j] = gf_bs_read_u8(bs);\n\t\t\ttmp_strsize--;\n\t\t\tif (!tmp_str[j]) {\n\t\t\t\tzfound = GF_TRUE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\n\t\tif (!zfound) {\n\t\t\te = GF_ISOM_INVALID_FILE;\n\t\t\tgoto exit;\n\t\t}\n\t\tif (j) {\n\t\t\tgf_list_insert(ptr->quality_entry_table, gf_strdup(tmp_str), i);\n\t\t}\n\t}\n\tif (ptr->quality_entry_count != gf_list_count(ptr->quality_entry_table)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\ti=0;\n\ttmp_strsize=(u32)ptr->size;\n\tzfound = GF_FALSE;\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tif (i) {\n\t\tptr->drm_data = gf_strdup(tmp_str);\n\t}\n\n\ti=0;\n\ttmp_strsize=(u32)ptr->size;\n\tzfound = GF_FALSE;\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tif (i) {\n\t\tptr->meta_data = gf_strdup(tmp_str);\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->segment_run_table_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->segment_run_table_count; i++) {\n\t\tGF_AdobeSegmentRunTableBox *asrt = NULL;\n\t\te = gf_isom_box_parse((GF_Box **)&asrt, bs);\n\t\tif (e) {\n\t\t\tif (asrt) gf_isom_box_del((GF_Box*)asrt);\n\t\t\tgoto exit;\n\t\t}\n\t\tgf_list_add(ptr->segment_run_table_entries, asrt);\n\t}\n\tif (ptr->segment_run_table_count != gf_list_count(ptr->segment_run_table_entries)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->fragment_run_table_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->fragment_run_table_count; i++) {\n\t\tGF_AdobeFragmentRunTableBox *afrt = NULL;\n\t\te = gf_isom_box_parse((GF_Box **)&afrt, bs);\n\t\tif (e) {\n\t\t\tif (afrt) gf_isom_box_del((GF_Box*)afrt);\n\t\t\tgoto exit;\n\t\t}\n\t\tgf_list_add(ptr->fragment_run_table_entries, afrt);\n\t}\n\tif (ptr->fragment_run_table_count != gf_list_count(ptr->fragment_run_table_entries)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\nexit:\n\tgf_free(tmp_str);\n\treturn e;\n}\n",
                    "caller_start": 76,
                    "file_path": "src/isomedia/box_code_adobe.c"
                },
                {
                    "type": "caller_info",
                    "call_line": 156,
                    "call_code": "ISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)",
                    "caller_code": "GF_Err abst_box_read(GF_Box *s, GF_BitStream *bs)\n{\n\tGF_AdobeBootstrapInfoBox *ptr = (GF_AdobeBootstrapInfoBox *)s;\n\tint i;\n\tu32 tmp_strsize;\n\tchar *tmp_str;\n\tBool zfound=GF_FALSE;\n\tGF_Err e = GF_OK;\n\n\tISOM_DECREASE_SIZE(ptr, 25)\n\tptr->bootstrapinfo_version = gf_bs_read_u32(bs);\n\tptr->profile = gf_bs_read_int(bs, 2);\n\tptr->live = gf_bs_read_int(bs, 1);\n\tptr->update = gf_bs_read_int(bs, 1);\n\tptr->reserved = gf_bs_read_int(bs, 4);\n\tptr->time_scale = gf_bs_read_u32(bs);\n\tptr->current_media_time = gf_bs_read_u64(bs);\n\tptr->smpte_time_code_offset = gf_bs_read_u64(bs);\n\n\ti=0;\n\tif (ptr->size<8) return GF_ISOM_INVALID_FILE;\n\ttmp_strsize =(u32)ptr->size;\n\ttmp_str = gf_malloc(sizeof(char)*(tmp_strsize+1));\n\tif (!tmp_str) return GF_OUT_OF_MEM;\n\tmemset(tmp_str, 0, sizeof(char)*(tmp_strsize+1) );\n\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\tif (i) {\n\t\tptr->movie_identifier = gf_strdup(tmp_str);\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->server_entry_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->server_entry_count; i++) {\n\t\tint j=0;\n\t\tzfound = GF_FALSE;\n\t\ttmp_strsize=(u32)ptr->size;\n\t\twhile (tmp_strsize) {\n\t\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\t\ttmp_str[j] = gf_bs_read_u8(bs);\n\t\t\ttmp_strsize--;\n\t\t\tif (!tmp_str[j]) {\n\t\t\t\tzfound = GF_TRUE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t\tif (!zfound) {\n\t\t\te = GF_ISOM_INVALID_FILE;\n\t\t\tgoto exit;\n\t\t}\n\t\tif (j) {\n\t\t\tgf_list_insert(ptr->server_entry_table, gf_strdup(tmp_str), i);\n\t\t}\n\t}\n\tif (ptr->server_entry_count != gf_list_count(ptr->server_entry_table)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->quality_entry_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->quality_entry_count; i++) {\n\t\tint j=0;\n\t\tzfound = GF_FALSE;\n\t\ttmp_strsize=(u32)ptr->size;\n\t\twhile (tmp_strsize) {\n\t\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\t\ttmp_str[j] = gf_bs_read_u8(bs);\n\t\t\ttmp_strsize--;\n\t\t\tif (!tmp_str[j]) {\n\t\t\t\tzfound = GF_TRUE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\n\t\tif (!zfound) {\n\t\t\te = GF_ISOM_INVALID_FILE;\n\t\t\tgoto exit;\n\t\t}\n\t\tif (j) {\n\t\t\tgf_list_insert(ptr->quality_entry_table, gf_strdup(tmp_str), i);\n\t\t}\n\t}\n\tif (ptr->quality_entry_count != gf_list_count(ptr->quality_entry_table)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\ti=0;\n\ttmp_strsize=(u32)ptr->size;\n\tzfound = GF_FALSE;\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tif (i) {\n\t\tptr->drm_data = gf_strdup(tmp_str);\n\t}\n\n\ti=0;\n\ttmp_strsize=(u32)ptr->size;\n\tzfound = GF_FALSE;\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tif (i) {\n\t\tptr->meta_data = gf_strdup(tmp_str);\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->segment_run_table_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->segment_run_table_count; i++) {\n\t\tGF_AdobeSegmentRunTableBox *asrt = NULL;\n\t\te = gf_isom_box_parse((GF_Box **)&asrt, bs);\n\t\tif (e) {\n\t\t\tif (asrt) gf_isom_box_del((GF_Box*)asrt);\n\t\t\tgoto exit;\n\t\t}\n\t\tgf_list_add(ptr->segment_run_table_entries, asrt);\n\t}\n\tif (ptr->segment_run_table_count != gf_list_count(ptr->segment_run_table_entries)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->fragment_run_table_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->fragment_run_table_count; i++) {\n\t\tGF_AdobeFragmentRunTableBox *afrt = NULL;\n\t\te = gf_isom_box_parse((GF_Box **)&afrt, bs);\n\t\tif (e) {\n\t\t\tif (afrt) gf_isom_box_del((GF_Box*)afrt);\n\t\t\tgoto exit;\n\t\t}\n\t\tgf_list_add(ptr->fragment_run_table_entries, afrt);\n\t}\n\tif (ptr->fragment_run_table_count != gf_list_count(ptr->fragment_run_table_entries)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\nexit:\n\tgf_free(tmp_str);\n\treturn e;\n}\n",
                    "caller_start": 76,
                    "file_path": "src/isomedia/box_code_adobe.c"
                },
                {
                    "type": "caller_info",
                    "call_line": 183,
                    "call_code": "ISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)",
                    "caller_code": "GF_Err abst_box_read(GF_Box *s, GF_BitStream *bs)\n{\n\tGF_AdobeBootstrapInfoBox *ptr = (GF_AdobeBootstrapInfoBox *)s;\n\tint i;\n\tu32 tmp_strsize;\n\tchar *tmp_str;\n\tBool zfound=GF_FALSE;\n\tGF_Err e = GF_OK;\n\n\tISOM_DECREASE_SIZE(ptr, 25)\n\tptr->bootstrapinfo_version = gf_bs_read_u32(bs);\n\tptr->profile = gf_bs_read_int(bs, 2);\n\tptr->live = gf_bs_read_int(bs, 1);\n\tptr->update = gf_bs_read_int(bs, 1);\n\tptr->reserved = gf_bs_read_int(bs, 4);\n\tptr->time_scale = gf_bs_read_u32(bs);\n\tptr->current_media_time = gf_bs_read_u64(bs);\n\tptr->smpte_time_code_offset = gf_bs_read_u64(bs);\n\n\ti=0;\n\tif (ptr->size<8) return GF_ISOM_INVALID_FILE;\n\ttmp_strsize =(u32)ptr->size;\n\ttmp_str = gf_malloc(sizeof(char)*(tmp_strsize+1));\n\tif (!tmp_str) return GF_OUT_OF_MEM;\n\tmemset(tmp_str, 0, sizeof(char)*(tmp_strsize+1) );\n\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\tif (i) {\n\t\tptr->movie_identifier = gf_strdup(tmp_str);\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->server_entry_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->server_entry_count; i++) {\n\t\tint j=0;\n\t\tzfound = GF_FALSE;\n\t\ttmp_strsize=(u32)ptr->size;\n\t\twhile (tmp_strsize) {\n\t\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\t\ttmp_str[j] = gf_bs_read_u8(bs);\n\t\t\ttmp_strsize--;\n\t\t\tif (!tmp_str[j]) {\n\t\t\t\tzfound = GF_TRUE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t\tif (!zfound) {\n\t\t\te = GF_ISOM_INVALID_FILE;\n\t\t\tgoto exit;\n\t\t}\n\t\tif (j) {\n\t\t\tgf_list_insert(ptr->server_entry_table, gf_strdup(tmp_str), i);\n\t\t}\n\t}\n\tif (ptr->server_entry_count != gf_list_count(ptr->server_entry_table)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->quality_entry_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->quality_entry_count; i++) {\n\t\tint j=0;\n\t\tzfound = GF_FALSE;\n\t\ttmp_strsize=(u32)ptr->size;\n\t\twhile (tmp_strsize) {\n\t\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\t\ttmp_str[j] = gf_bs_read_u8(bs);\n\t\t\ttmp_strsize--;\n\t\t\tif (!tmp_str[j]) {\n\t\t\t\tzfound = GF_TRUE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\n\t\tif (!zfound) {\n\t\t\te = GF_ISOM_INVALID_FILE;\n\t\t\tgoto exit;\n\t\t}\n\t\tif (j) {\n\t\t\tgf_list_insert(ptr->quality_entry_table, gf_strdup(tmp_str), i);\n\t\t}\n\t}\n\tif (ptr->quality_entry_count != gf_list_count(ptr->quality_entry_table)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\ti=0;\n\ttmp_strsize=(u32)ptr->size;\n\tzfound = GF_FALSE;\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tif (i) {\n\t\tptr->drm_data = gf_strdup(tmp_str);\n\t}\n\n\ti=0;\n\ttmp_strsize=(u32)ptr->size;\n\tzfound = GF_FALSE;\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tif (i) {\n\t\tptr->meta_data = gf_strdup(tmp_str);\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->segment_run_table_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->segment_run_table_count; i++) {\n\t\tGF_AdobeSegmentRunTableBox *asrt = NULL;\n\t\te = gf_isom_box_parse((GF_Box **)&asrt, bs);\n\t\tif (e) {\n\t\t\tif (asrt) gf_isom_box_del((GF_Box*)asrt);\n\t\t\tgoto exit;\n\t\t}\n\t\tgf_list_add(ptr->segment_run_table_entries, asrt);\n\t}\n\tif (ptr->segment_run_table_count != gf_list_count(ptr->segment_run_table_entries)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->fragment_run_table_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->fragment_run_table_count; i++) {\n\t\tGF_AdobeFragmentRunTableBox *afrt = NULL;\n\t\te = gf_isom_box_parse((GF_Box **)&afrt, bs);\n\t\tif (e) {\n\t\t\tif (afrt) gf_isom_box_del((GF_Box*)afrt);\n\t\t\tgoto exit;\n\t\t}\n\t\tgf_list_add(ptr->fragment_run_table_entries, afrt);\n\t}\n\tif (ptr->fragment_run_table_count != gf_list_count(ptr->fragment_run_table_entries)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\nexit:\n\tgf_free(tmp_str);\n\treturn e;\n}\n",
                    "caller_start": 76,
                    "file_path": "src/isomedia/box_code_adobe.c"
                },
                {
                    "type": "caller_info",
                    "call_line": 205,
                    "call_code": "ISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)",
                    "caller_code": "GF_Err abst_box_read(GF_Box *s, GF_BitStream *bs)\n{\n\tGF_AdobeBootstrapInfoBox *ptr = (GF_AdobeBootstrapInfoBox *)s;\n\tint i;\n\tu32 tmp_strsize;\n\tchar *tmp_str;\n\tBool zfound=GF_FALSE;\n\tGF_Err e = GF_OK;\n\n\tISOM_DECREASE_SIZE(ptr, 25)\n\tptr->bootstrapinfo_version = gf_bs_read_u32(bs);\n\tptr->profile = gf_bs_read_int(bs, 2);\n\tptr->live = gf_bs_read_int(bs, 1);\n\tptr->update = gf_bs_read_int(bs, 1);\n\tptr->reserved = gf_bs_read_int(bs, 4);\n\tptr->time_scale = gf_bs_read_u32(bs);\n\tptr->current_media_time = gf_bs_read_u64(bs);\n\tptr->smpte_time_code_offset = gf_bs_read_u64(bs);\n\n\ti=0;\n\tif (ptr->size<8) return GF_ISOM_INVALID_FILE;\n\ttmp_strsize =(u32)ptr->size;\n\ttmp_str = gf_malloc(sizeof(char)*(tmp_strsize+1));\n\tif (!tmp_str) return GF_OUT_OF_MEM;\n\tmemset(tmp_str, 0, sizeof(char)*(tmp_strsize+1) );\n\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\tif (i) {\n\t\tptr->movie_identifier = gf_strdup(tmp_str);\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->server_entry_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->server_entry_count; i++) {\n\t\tint j=0;\n\t\tzfound = GF_FALSE;\n\t\ttmp_strsize=(u32)ptr->size;\n\t\twhile (tmp_strsize) {\n\t\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\t\ttmp_str[j] = gf_bs_read_u8(bs);\n\t\t\ttmp_strsize--;\n\t\t\tif (!tmp_str[j]) {\n\t\t\t\tzfound = GF_TRUE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t\tif (!zfound) {\n\t\t\te = GF_ISOM_INVALID_FILE;\n\t\t\tgoto exit;\n\t\t}\n\t\tif (j) {\n\t\t\tgf_list_insert(ptr->server_entry_table, gf_strdup(tmp_str), i);\n\t\t}\n\t}\n\tif (ptr->server_entry_count != gf_list_count(ptr->server_entry_table)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->quality_entry_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->quality_entry_count; i++) {\n\t\tint j=0;\n\t\tzfound = GF_FALSE;\n\t\ttmp_strsize=(u32)ptr->size;\n\t\twhile (tmp_strsize) {\n\t\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\t\ttmp_str[j] = gf_bs_read_u8(bs);\n\t\t\ttmp_strsize--;\n\t\t\tif (!tmp_str[j]) {\n\t\t\t\tzfound = GF_TRUE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\n\t\tif (!zfound) {\n\t\t\te = GF_ISOM_INVALID_FILE;\n\t\t\tgoto exit;\n\t\t}\n\t\tif (j) {\n\t\t\tgf_list_insert(ptr->quality_entry_table, gf_strdup(tmp_str), i);\n\t\t}\n\t}\n\tif (ptr->quality_entry_count != gf_list_count(ptr->quality_entry_table)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\ti=0;\n\ttmp_strsize=(u32)ptr->size;\n\tzfound = GF_FALSE;\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tif (i) {\n\t\tptr->drm_data = gf_strdup(tmp_str);\n\t}\n\n\ti=0;\n\ttmp_strsize=(u32)ptr->size;\n\tzfound = GF_FALSE;\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tif (i) {\n\t\tptr->meta_data = gf_strdup(tmp_str);\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->segment_run_table_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->segment_run_table_count; i++) {\n\t\tGF_AdobeSegmentRunTableBox *asrt = NULL;\n\t\te = gf_isom_box_parse((GF_Box **)&asrt, bs);\n\t\tif (e) {\n\t\t\tif (asrt) gf_isom_box_del((GF_Box*)asrt);\n\t\t\tgoto exit;\n\t\t}\n\t\tgf_list_add(ptr->segment_run_table_entries, asrt);\n\t}\n\tif (ptr->segment_run_table_count != gf_list_count(ptr->segment_run_table_entries)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->fragment_run_table_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->fragment_run_table_count; i++) {\n\t\tGF_AdobeFragmentRunTableBox *afrt = NULL;\n\t\te = gf_isom_box_parse((GF_Box **)&afrt, bs);\n\t\tif (e) {\n\t\t\tif (afrt) gf_isom_box_del((GF_Box*)afrt);\n\t\t\tgoto exit;\n\t\t}\n\t\tgf_list_add(ptr->fragment_run_table_entries, afrt);\n\t}\n\tif (ptr->fragment_run_table_count != gf_list_count(ptr->fragment_run_table_entries)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\nexit:\n\tgf_free(tmp_str);\n\treturn e;\n}\n",
                    "caller_start": 76,
                    "file_path": "src/isomedia/box_code_adobe.c"
                },
                {
                    "type": "caller_info",
                    "call_line": 223,
                    "call_code": "ISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)",
                    "caller_code": "GF_Err abst_box_read(GF_Box *s, GF_BitStream *bs)\n{\n\tGF_AdobeBootstrapInfoBox *ptr = (GF_AdobeBootstrapInfoBox *)s;\n\tint i;\n\tu32 tmp_strsize;\n\tchar *tmp_str;\n\tBool zfound=GF_FALSE;\n\tGF_Err e = GF_OK;\n\n\tISOM_DECREASE_SIZE(ptr, 25)\n\tptr->bootstrapinfo_version = gf_bs_read_u32(bs);\n\tptr->profile = gf_bs_read_int(bs, 2);\n\tptr->live = gf_bs_read_int(bs, 1);\n\tptr->update = gf_bs_read_int(bs, 1);\n\tptr->reserved = gf_bs_read_int(bs, 4);\n\tptr->time_scale = gf_bs_read_u32(bs);\n\tptr->current_media_time = gf_bs_read_u64(bs);\n\tptr->smpte_time_code_offset = gf_bs_read_u64(bs);\n\n\ti=0;\n\tif (ptr->size<8) return GF_ISOM_INVALID_FILE;\n\ttmp_strsize =(u32)ptr->size;\n\ttmp_str = gf_malloc(sizeof(char)*(tmp_strsize+1));\n\tif (!tmp_str) return GF_OUT_OF_MEM;\n\tmemset(tmp_str, 0, sizeof(char)*(tmp_strsize+1) );\n\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\tif (i) {\n\t\tptr->movie_identifier = gf_strdup(tmp_str);\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->server_entry_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->server_entry_count; i++) {\n\t\tint j=0;\n\t\tzfound = GF_FALSE;\n\t\ttmp_strsize=(u32)ptr->size;\n\t\twhile (tmp_strsize) {\n\t\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\t\ttmp_str[j] = gf_bs_read_u8(bs);\n\t\t\ttmp_strsize--;\n\t\t\tif (!tmp_str[j]) {\n\t\t\t\tzfound = GF_TRUE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t\tif (!zfound) {\n\t\t\te = GF_ISOM_INVALID_FILE;\n\t\t\tgoto exit;\n\t\t}\n\t\tif (j) {\n\t\t\tgf_list_insert(ptr->server_entry_table, gf_strdup(tmp_str), i);\n\t\t}\n\t}\n\tif (ptr->server_entry_count != gf_list_count(ptr->server_entry_table)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->quality_entry_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->quality_entry_count; i++) {\n\t\tint j=0;\n\t\tzfound = GF_FALSE;\n\t\ttmp_strsize=(u32)ptr->size;\n\t\twhile (tmp_strsize) {\n\t\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\t\ttmp_str[j] = gf_bs_read_u8(bs);\n\t\t\ttmp_strsize--;\n\t\t\tif (!tmp_str[j]) {\n\t\t\t\tzfound = GF_TRUE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\n\t\tif (!zfound) {\n\t\t\te = GF_ISOM_INVALID_FILE;\n\t\t\tgoto exit;\n\t\t}\n\t\tif (j) {\n\t\t\tgf_list_insert(ptr->quality_entry_table, gf_strdup(tmp_str), i);\n\t\t}\n\t}\n\tif (ptr->quality_entry_count != gf_list_count(ptr->quality_entry_table)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\ti=0;\n\ttmp_strsize=(u32)ptr->size;\n\tzfound = GF_FALSE;\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tif (i) {\n\t\tptr->drm_data = gf_strdup(tmp_str);\n\t}\n\n\ti=0;\n\ttmp_strsize=(u32)ptr->size;\n\tzfound = GF_FALSE;\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tif (i) {\n\t\tptr->meta_data = gf_strdup(tmp_str);\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->segment_run_table_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->segment_run_table_count; i++) {\n\t\tGF_AdobeSegmentRunTableBox *asrt = NULL;\n\t\te = gf_isom_box_parse((GF_Box **)&asrt, bs);\n\t\tif (e) {\n\t\t\tif (asrt) gf_isom_box_del((GF_Box*)asrt);\n\t\t\tgoto exit;\n\t\t}\n\t\tgf_list_add(ptr->segment_run_table_entries, asrt);\n\t}\n\tif (ptr->segment_run_table_count != gf_list_count(ptr->segment_run_table_entries)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->fragment_run_table_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->fragment_run_table_count; i++) {\n\t\tGF_AdobeFragmentRunTableBox *afrt = NULL;\n\t\te = gf_isom_box_parse((GF_Box **)&afrt, bs);\n\t\tif (e) {\n\t\t\tif (afrt) gf_isom_box_del((GF_Box*)afrt);\n\t\t\tgoto exit;\n\t\t}\n\t\tgf_list_add(ptr->fragment_run_table_entries, afrt);\n\t}\n\tif (ptr->fragment_run_table_count != gf_list_count(ptr->fragment_run_table_entries)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\nexit:\n\tgf_free(tmp_str);\n\treturn e;\n}\n",
                    "caller_start": 76,
                    "file_path": "src/isomedia/box_code_adobe.c"
                }
            ]
        },
        {
            "tool": "caller_info.find_caller_for_func({'func_name': 'ISOM_DECREASE_SIZE_GOTO_EXIT', 'project_dir': './storage/result/Part2_result/github/CVE-2022-45204/old_repos/gpac-gpac_aa486c3'})",
            "result": [
                {
                    "type": "caller_info",
                    "call_line": 103,
                    "call_code": "ISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)",
                    "caller_code": "GF_Err abst_box_read(GF_Box *s, GF_BitStream *bs)\n{\n\tGF_AdobeBootstrapInfoBox *ptr = (GF_AdobeBootstrapInfoBox *)s;\n\tint i;\n\tu32 tmp_strsize;\n\tchar *tmp_str;\n\tBool zfound=GF_FALSE;\n\tGF_Err e = GF_OK;\n\n\tISOM_DECREASE_SIZE(ptr, 25)\n\tptr->bootstrapinfo_version = gf_bs_read_u32(bs);\n\tptr->profile = gf_bs_read_int(bs, 2);\n\tptr->live = gf_bs_read_int(bs, 1);\n\tptr->update = gf_bs_read_int(bs, 1);\n\tptr->reserved = gf_bs_read_int(bs, 4);\n\tptr->time_scale = gf_bs_read_u32(bs);\n\tptr->current_media_time = gf_bs_read_u64(bs);\n\tptr->smpte_time_code_offset = gf_bs_read_u64(bs);\n\n\ti=0;\n\tif (ptr->size<8) return GF_ISOM_INVALID_FILE;\n\ttmp_strsize =(u32)ptr->size;\n\ttmp_str = gf_malloc(sizeof(char)*(tmp_strsize+1));\n\tif (!tmp_str) return GF_OUT_OF_MEM;\n\tmemset(tmp_str, 0, sizeof(char)*(tmp_strsize+1) );\n\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\tif (i) {\n\t\tptr->movie_identifier = gf_strdup(tmp_str);\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->server_entry_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->server_entry_count; i++) {\n\t\tint j=0;\n\t\tzfound = GF_FALSE;\n\t\ttmp_strsize=(u32)ptr->size;\n\t\twhile (tmp_strsize) {\n\t\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\t\ttmp_str[j] = gf_bs_read_u8(bs);\n\t\t\ttmp_strsize--;\n\t\t\tif (!tmp_str[j]) {\n\t\t\t\tzfound = GF_TRUE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t\tif (!zfound) {\n\t\t\te = GF_ISOM_INVALID_FILE;\n\t\t\tgoto exit;\n\t\t}\n\t\tif (j) {\n\t\t\tgf_list_insert(ptr->server_entry_table, gf_strdup(tmp_str), i);\n\t\t}\n\t}\n\tif (ptr->server_entry_count != gf_list_count(ptr->server_entry_table)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->quality_entry_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->quality_entry_count; i++) {\n\t\tint j=0;\n\t\tzfound = GF_FALSE;\n\t\ttmp_strsize=(u32)ptr->size;\n\t\twhile (tmp_strsize) {\n\t\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\t\ttmp_str[j] = gf_bs_read_u8(bs);\n\t\t\ttmp_strsize--;\n\t\t\tif (!tmp_str[j]) {\n\t\t\t\tzfound = GF_TRUE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\n\t\tif (!zfound) {\n\t\t\te = GF_ISOM_INVALID_FILE;\n\t\t\tgoto exit;\n\t\t}\n\t\tif (j) {\n\t\t\tgf_list_insert(ptr->quality_entry_table, gf_strdup(tmp_str), i);\n\t\t}\n\t}\n\tif (ptr->quality_entry_count != gf_list_count(ptr->quality_entry_table)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\ti=0;\n\ttmp_strsize=(u32)ptr->size;\n\tzfound = GF_FALSE;\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tif (i) {\n\t\tptr->drm_data = gf_strdup(tmp_str);\n\t}\n\n\ti=0;\n\ttmp_strsize=(u32)ptr->size;\n\tzfound = GF_FALSE;\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tif (i) {\n\t\tptr->meta_data = gf_strdup(tmp_str);\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->segment_run_table_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->segment_run_table_count; i++) {\n\t\tGF_AdobeSegmentRunTableBox *asrt = NULL;\n\t\te = gf_isom_box_parse((GF_Box **)&asrt, bs);\n\t\tif (e) {\n\t\t\tif (asrt) gf_isom_box_del((GF_Box*)asrt);\n\t\t\tgoto exit;\n\t\t}\n\t\tgf_list_add(ptr->segment_run_table_entries, asrt);\n\t}\n\tif (ptr->segment_run_table_count != gf_list_count(ptr->segment_run_table_entries)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->fragment_run_table_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->fragment_run_table_count; i++) {\n\t\tGF_AdobeFragmentRunTableBox *afrt = NULL;\n\t\te = gf_isom_box_parse((GF_Box **)&afrt, bs);\n\t\tif (e) {\n\t\t\tif (afrt) gf_isom_box_del((GF_Box*)afrt);\n\t\t\tgoto exit;\n\t\t}\n\t\tgf_list_add(ptr->fragment_run_table_entries, afrt);\n\t}\n\tif (ptr->fragment_run_table_count != gf_list_count(ptr->fragment_run_table_entries)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\nexit:\n\tgf_free(tmp_str);\n\treturn e;\n}\n",
                    "caller_start": 76,
                    "file_path": "src/isomedia/box_code_adobe.c"
                },
                {
                    "type": "caller_info",
                    "call_line": 120,
                    "call_code": "ISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)",
                    "caller_code": "GF_Err abst_box_read(GF_Box *s, GF_BitStream *bs)\n{\n\tGF_AdobeBootstrapInfoBox *ptr = (GF_AdobeBootstrapInfoBox *)s;\n\tint i;\n\tu32 tmp_strsize;\n\tchar *tmp_str;\n\tBool zfound=GF_FALSE;\n\tGF_Err e = GF_OK;\n\n\tISOM_DECREASE_SIZE(ptr, 25)\n\tptr->bootstrapinfo_version = gf_bs_read_u32(bs);\n\tptr->profile = gf_bs_read_int(bs, 2);\n\tptr->live = gf_bs_read_int(bs, 1);\n\tptr->update = gf_bs_read_int(bs, 1);\n\tptr->reserved = gf_bs_read_int(bs, 4);\n\tptr->time_scale = gf_bs_read_u32(bs);\n\tptr->current_media_time = gf_bs_read_u64(bs);\n\tptr->smpte_time_code_offset = gf_bs_read_u64(bs);\n\n\ti=0;\n\tif (ptr->size<8) return GF_ISOM_INVALID_FILE;\n\ttmp_strsize =(u32)ptr->size;\n\ttmp_str = gf_malloc(sizeof(char)*(tmp_strsize+1));\n\tif (!tmp_str) return GF_OUT_OF_MEM;\n\tmemset(tmp_str, 0, sizeof(char)*(tmp_strsize+1) );\n\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\tif (i) {\n\t\tptr->movie_identifier = gf_strdup(tmp_str);\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->server_entry_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->server_entry_count; i++) {\n\t\tint j=0;\n\t\tzfound = GF_FALSE;\n\t\ttmp_strsize=(u32)ptr->size;\n\t\twhile (tmp_strsize) {\n\t\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\t\ttmp_str[j] = gf_bs_read_u8(bs);\n\t\t\ttmp_strsize--;\n\t\t\tif (!tmp_str[j]) {\n\t\t\t\tzfound = GF_TRUE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t\tif (!zfound) {\n\t\t\te = GF_ISOM_INVALID_FILE;\n\t\t\tgoto exit;\n\t\t}\n\t\tif (j) {\n\t\t\tgf_list_insert(ptr->server_entry_table, gf_strdup(tmp_str), i);\n\t\t}\n\t}\n\tif (ptr->server_entry_count != gf_list_count(ptr->server_entry_table)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->quality_entry_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->quality_entry_count; i++) {\n\t\tint j=0;\n\t\tzfound = GF_FALSE;\n\t\ttmp_strsize=(u32)ptr->size;\n\t\twhile (tmp_strsize) {\n\t\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\t\ttmp_str[j] = gf_bs_read_u8(bs);\n\t\t\ttmp_strsize--;\n\t\t\tif (!tmp_str[j]) {\n\t\t\t\tzfound = GF_TRUE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\n\t\tif (!zfound) {\n\t\t\te = GF_ISOM_INVALID_FILE;\n\t\t\tgoto exit;\n\t\t}\n\t\tif (j) {\n\t\t\tgf_list_insert(ptr->quality_entry_table, gf_strdup(tmp_str), i);\n\t\t}\n\t}\n\tif (ptr->quality_entry_count != gf_list_count(ptr->quality_entry_table)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\ti=0;\n\ttmp_strsize=(u32)ptr->size;\n\tzfound = GF_FALSE;\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tif (i) {\n\t\tptr->drm_data = gf_strdup(tmp_str);\n\t}\n\n\ti=0;\n\ttmp_strsize=(u32)ptr->size;\n\tzfound = GF_FALSE;\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tif (i) {\n\t\tptr->meta_data = gf_strdup(tmp_str);\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->segment_run_table_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->segment_run_table_count; i++) {\n\t\tGF_AdobeSegmentRunTableBox *asrt = NULL;\n\t\te = gf_isom_box_parse((GF_Box **)&asrt, bs);\n\t\tif (e) {\n\t\t\tif (asrt) gf_isom_box_del((GF_Box*)asrt);\n\t\t\tgoto exit;\n\t\t}\n\t\tgf_list_add(ptr->segment_run_table_entries, asrt);\n\t}\n\tif (ptr->segment_run_table_count != gf_list_count(ptr->segment_run_table_entries)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->fragment_run_table_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->fragment_run_table_count; i++) {\n\t\tGF_AdobeFragmentRunTableBox *afrt = NULL;\n\t\te = gf_isom_box_parse((GF_Box **)&afrt, bs);\n\t\tif (e) {\n\t\t\tif (afrt) gf_isom_box_del((GF_Box*)afrt);\n\t\t\tgoto exit;\n\t\t}\n\t\tgf_list_add(ptr->fragment_run_table_entries, afrt);\n\t}\n\tif (ptr->fragment_run_table_count != gf_list_count(ptr->fragment_run_table_entries)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\nexit:\n\tgf_free(tmp_str);\n\treturn e;\n}\n",
                    "caller_start": 76,
                    "file_path": "src/isomedia/box_code_adobe.c"
                },
                {
                    "type": "caller_info",
                    "call_line": 127,
                    "call_code": "ISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)",
                    "caller_code": "GF_Err abst_box_read(GF_Box *s, GF_BitStream *bs)\n{\n\tGF_AdobeBootstrapInfoBox *ptr = (GF_AdobeBootstrapInfoBox *)s;\n\tint i;\n\tu32 tmp_strsize;\n\tchar *tmp_str;\n\tBool zfound=GF_FALSE;\n\tGF_Err e = GF_OK;\n\n\tISOM_DECREASE_SIZE(ptr, 25)\n\tptr->bootstrapinfo_version = gf_bs_read_u32(bs);\n\tptr->profile = gf_bs_read_int(bs, 2);\n\tptr->live = gf_bs_read_int(bs, 1);\n\tptr->update = gf_bs_read_int(bs, 1);\n\tptr->reserved = gf_bs_read_int(bs, 4);\n\tptr->time_scale = gf_bs_read_u32(bs);\n\tptr->current_media_time = gf_bs_read_u64(bs);\n\tptr->smpte_time_code_offset = gf_bs_read_u64(bs);\n\n\ti=0;\n\tif (ptr->size<8) return GF_ISOM_INVALID_FILE;\n\ttmp_strsize =(u32)ptr->size;\n\ttmp_str = gf_malloc(sizeof(char)*(tmp_strsize+1));\n\tif (!tmp_str) return GF_OUT_OF_MEM;\n\tmemset(tmp_str, 0, sizeof(char)*(tmp_strsize+1) );\n\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\tif (i) {\n\t\tptr->movie_identifier = gf_strdup(tmp_str);\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->server_entry_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->server_entry_count; i++) {\n\t\tint j=0;\n\t\tzfound = GF_FALSE;\n\t\ttmp_strsize=(u32)ptr->size;\n\t\twhile (tmp_strsize) {\n\t\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\t\ttmp_str[j] = gf_bs_read_u8(bs);\n\t\t\ttmp_strsize--;\n\t\t\tif (!tmp_str[j]) {\n\t\t\t\tzfound = GF_TRUE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t\tif (!zfound) {\n\t\t\te = GF_ISOM_INVALID_FILE;\n\t\t\tgoto exit;\n\t\t}\n\t\tif (j) {\n\t\t\tgf_list_insert(ptr->server_entry_table, gf_strdup(tmp_str), i);\n\t\t}\n\t}\n\tif (ptr->server_entry_count != gf_list_count(ptr->server_entry_table)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->quality_entry_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->quality_entry_count; i++) {\n\t\tint j=0;\n\t\tzfound = GF_FALSE;\n\t\ttmp_strsize=(u32)ptr->size;\n\t\twhile (tmp_strsize) {\n\t\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\t\ttmp_str[j] = gf_bs_read_u8(bs);\n\t\t\ttmp_strsize--;\n\t\t\tif (!tmp_str[j]) {\n\t\t\t\tzfound = GF_TRUE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\n\t\tif (!zfound) {\n\t\t\te = GF_ISOM_INVALID_FILE;\n\t\t\tgoto exit;\n\t\t}\n\t\tif (j) {\n\t\t\tgf_list_insert(ptr->quality_entry_table, gf_strdup(tmp_str), i);\n\t\t}\n\t}\n\tif (ptr->quality_entry_count != gf_list_count(ptr->quality_entry_table)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\ti=0;\n\ttmp_strsize=(u32)ptr->size;\n\tzfound = GF_FALSE;\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tif (i) {\n\t\tptr->drm_data = gf_strdup(tmp_str);\n\t}\n\n\ti=0;\n\ttmp_strsize=(u32)ptr->size;\n\tzfound = GF_FALSE;\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tif (i) {\n\t\tptr->meta_data = gf_strdup(tmp_str);\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->segment_run_table_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->segment_run_table_count; i++) {\n\t\tGF_AdobeSegmentRunTableBox *asrt = NULL;\n\t\te = gf_isom_box_parse((GF_Box **)&asrt, bs);\n\t\tif (e) {\n\t\t\tif (asrt) gf_isom_box_del((GF_Box*)asrt);\n\t\t\tgoto exit;\n\t\t}\n\t\tgf_list_add(ptr->segment_run_table_entries, asrt);\n\t}\n\tif (ptr->segment_run_table_count != gf_list_count(ptr->segment_run_table_entries)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->fragment_run_table_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->fragment_run_table_count; i++) {\n\t\tGF_AdobeFragmentRunTableBox *afrt = NULL;\n\t\te = gf_isom_box_parse((GF_Box **)&afrt, bs);\n\t\tif (e) {\n\t\t\tif (afrt) gf_isom_box_del((GF_Box*)afrt);\n\t\t\tgoto exit;\n\t\t}\n\t\tgf_list_add(ptr->fragment_run_table_entries, afrt);\n\t}\n\tif (ptr->fragment_run_table_count != gf_list_count(ptr->fragment_run_table_entries)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\nexit:\n\tgf_free(tmp_str);\n\treturn e;\n}\n",
                    "caller_start": 76,
                    "file_path": "src/isomedia/box_code_adobe.c"
                },
                {
                    "type": "caller_info",
                    "call_line": 149,
                    "call_code": "ISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)",
                    "caller_code": "GF_Err abst_box_read(GF_Box *s, GF_BitStream *bs)\n{\n\tGF_AdobeBootstrapInfoBox *ptr = (GF_AdobeBootstrapInfoBox *)s;\n\tint i;\n\tu32 tmp_strsize;\n\tchar *tmp_str;\n\tBool zfound=GF_FALSE;\n\tGF_Err e = GF_OK;\n\n\tISOM_DECREASE_SIZE(ptr, 25)\n\tptr->bootstrapinfo_version = gf_bs_read_u32(bs);\n\tptr->profile = gf_bs_read_int(bs, 2);\n\tptr->live = gf_bs_read_int(bs, 1);\n\tptr->update = gf_bs_read_int(bs, 1);\n\tptr->reserved = gf_bs_read_int(bs, 4);\n\tptr->time_scale = gf_bs_read_u32(bs);\n\tptr->current_media_time = gf_bs_read_u64(bs);\n\tptr->smpte_time_code_offset = gf_bs_read_u64(bs);\n\n\ti=0;\n\tif (ptr->size<8) return GF_ISOM_INVALID_FILE;\n\ttmp_strsize =(u32)ptr->size;\n\ttmp_str = gf_malloc(sizeof(char)*(tmp_strsize+1));\n\tif (!tmp_str) return GF_OUT_OF_MEM;\n\tmemset(tmp_str, 0, sizeof(char)*(tmp_strsize+1) );\n\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\tif (i) {\n\t\tptr->movie_identifier = gf_strdup(tmp_str);\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->server_entry_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->server_entry_count; i++) {\n\t\tint j=0;\n\t\tzfound = GF_FALSE;\n\t\ttmp_strsize=(u32)ptr->size;\n\t\twhile (tmp_strsize) {\n\t\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\t\ttmp_str[j] = gf_bs_read_u8(bs);\n\t\t\ttmp_strsize--;\n\t\t\tif (!tmp_str[j]) {\n\t\t\t\tzfound = GF_TRUE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t\tif (!zfound) {\n\t\t\te = GF_ISOM_INVALID_FILE;\n\t\t\tgoto exit;\n\t\t}\n\t\tif (j) {\n\t\t\tgf_list_insert(ptr->server_entry_table, gf_strdup(tmp_str), i);\n\t\t}\n\t}\n\tif (ptr->server_entry_count != gf_list_count(ptr->server_entry_table)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->quality_entry_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->quality_entry_count; i++) {\n\t\tint j=0;\n\t\tzfound = GF_FALSE;\n\t\ttmp_strsize=(u32)ptr->size;\n\t\twhile (tmp_strsize) {\n\t\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\t\ttmp_str[j] = gf_bs_read_u8(bs);\n\t\t\ttmp_strsize--;\n\t\t\tif (!tmp_str[j]) {\n\t\t\t\tzfound = GF_TRUE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\n\t\tif (!zfound) {\n\t\t\te = GF_ISOM_INVALID_FILE;\n\t\t\tgoto exit;\n\t\t}\n\t\tif (j) {\n\t\t\tgf_list_insert(ptr->quality_entry_table, gf_strdup(tmp_str), i);\n\t\t}\n\t}\n\tif (ptr->quality_entry_count != gf_list_count(ptr->quality_entry_table)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\ti=0;\n\ttmp_strsize=(u32)ptr->size;\n\tzfound = GF_FALSE;\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tif (i) {\n\t\tptr->drm_data = gf_strdup(tmp_str);\n\t}\n\n\ti=0;\n\ttmp_strsize=(u32)ptr->size;\n\tzfound = GF_FALSE;\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tif (i) {\n\t\tptr->meta_data = gf_strdup(tmp_str);\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->segment_run_table_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->segment_run_table_count; i++) {\n\t\tGF_AdobeSegmentRunTableBox *asrt = NULL;\n\t\te = gf_isom_box_parse((GF_Box **)&asrt, bs);\n\t\tif (e) {\n\t\t\tif (asrt) gf_isom_box_del((GF_Box*)asrt);\n\t\t\tgoto exit;\n\t\t}\n\t\tgf_list_add(ptr->segment_run_table_entries, asrt);\n\t}\n\tif (ptr->segment_run_table_count != gf_list_count(ptr->segment_run_table_entries)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->fragment_run_table_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->fragment_run_table_count; i++) {\n\t\tGF_AdobeFragmentRunTableBox *afrt = NULL;\n\t\te = gf_isom_box_parse((GF_Box **)&afrt, bs);\n\t\tif (e) {\n\t\t\tif (afrt) gf_isom_box_del((GF_Box*)afrt);\n\t\t\tgoto exit;\n\t\t}\n\t\tgf_list_add(ptr->fragment_run_table_entries, afrt);\n\t}\n\tif (ptr->fragment_run_table_count != gf_list_count(ptr->fragment_run_table_entries)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\nexit:\n\tgf_free(tmp_str);\n\treturn e;\n}\n",
                    "caller_start": 76,
                    "file_path": "src/isomedia/box_code_adobe.c"
                },
                {
                    "type": "caller_info",
                    "call_line": 156,
                    "call_code": "ISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)",
                    "caller_code": "GF_Err abst_box_read(GF_Box *s, GF_BitStream *bs)\n{\n\tGF_AdobeBootstrapInfoBox *ptr = (GF_AdobeBootstrapInfoBox *)s;\n\tint i;\n\tu32 tmp_strsize;\n\tchar *tmp_str;\n\tBool zfound=GF_FALSE;\n\tGF_Err e = GF_OK;\n\n\tISOM_DECREASE_SIZE(ptr, 25)\n\tptr->bootstrapinfo_version = gf_bs_read_u32(bs);\n\tptr->profile = gf_bs_read_int(bs, 2);\n\tptr->live = gf_bs_read_int(bs, 1);\n\tptr->update = gf_bs_read_int(bs, 1);\n\tptr->reserved = gf_bs_read_int(bs, 4);\n\tptr->time_scale = gf_bs_read_u32(bs);\n\tptr->current_media_time = gf_bs_read_u64(bs);\n\tptr->smpte_time_code_offset = gf_bs_read_u64(bs);\n\n\ti=0;\n\tif (ptr->size<8) return GF_ISOM_INVALID_FILE;\n\ttmp_strsize =(u32)ptr->size;\n\ttmp_str = gf_malloc(sizeof(char)*(tmp_strsize+1));\n\tif (!tmp_str) return GF_OUT_OF_MEM;\n\tmemset(tmp_str, 0, sizeof(char)*(tmp_strsize+1) );\n\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\tif (i) {\n\t\tptr->movie_identifier = gf_strdup(tmp_str);\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->server_entry_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->server_entry_count; i++) {\n\t\tint j=0;\n\t\tzfound = GF_FALSE;\n\t\ttmp_strsize=(u32)ptr->size;\n\t\twhile (tmp_strsize) {\n\t\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\t\ttmp_str[j] = gf_bs_read_u8(bs);\n\t\t\ttmp_strsize--;\n\t\t\tif (!tmp_str[j]) {\n\t\t\t\tzfound = GF_TRUE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t\tif (!zfound) {\n\t\t\te = GF_ISOM_INVALID_FILE;\n\t\t\tgoto exit;\n\t\t}\n\t\tif (j) {\n\t\t\tgf_list_insert(ptr->server_entry_table, gf_strdup(tmp_str), i);\n\t\t}\n\t}\n\tif (ptr->server_entry_count != gf_list_count(ptr->server_entry_table)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->quality_entry_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->quality_entry_count; i++) {\n\t\tint j=0;\n\t\tzfound = GF_FALSE;\n\t\ttmp_strsize=(u32)ptr->size;\n\t\twhile (tmp_strsize) {\n\t\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\t\ttmp_str[j] = gf_bs_read_u8(bs);\n\t\t\ttmp_strsize--;\n\t\t\tif (!tmp_str[j]) {\n\t\t\t\tzfound = GF_TRUE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\n\t\tif (!zfound) {\n\t\t\te = GF_ISOM_INVALID_FILE;\n\t\t\tgoto exit;\n\t\t}\n\t\tif (j) {\n\t\t\tgf_list_insert(ptr->quality_entry_table, gf_strdup(tmp_str), i);\n\t\t}\n\t}\n\tif (ptr->quality_entry_count != gf_list_count(ptr->quality_entry_table)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\ti=0;\n\ttmp_strsize=(u32)ptr->size;\n\tzfound = GF_FALSE;\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tif (i) {\n\t\tptr->drm_data = gf_strdup(tmp_str);\n\t}\n\n\ti=0;\n\ttmp_strsize=(u32)ptr->size;\n\tzfound = GF_FALSE;\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tif (i) {\n\t\tptr->meta_data = gf_strdup(tmp_str);\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->segment_run_table_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->segment_run_table_count; i++) {\n\t\tGF_AdobeSegmentRunTableBox *asrt = NULL;\n\t\te = gf_isom_box_parse((GF_Box **)&asrt, bs);\n\t\tif (e) {\n\t\t\tif (asrt) gf_isom_box_del((GF_Box*)asrt);\n\t\t\tgoto exit;\n\t\t}\n\t\tgf_list_add(ptr->segment_run_table_entries, asrt);\n\t}\n\tif (ptr->segment_run_table_count != gf_list_count(ptr->segment_run_table_entries)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->fragment_run_table_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->fragment_run_table_count; i++) {\n\t\tGF_AdobeFragmentRunTableBox *afrt = NULL;\n\t\te = gf_isom_box_parse((GF_Box **)&afrt, bs);\n\t\tif (e) {\n\t\t\tif (afrt) gf_isom_box_del((GF_Box*)afrt);\n\t\t\tgoto exit;\n\t\t}\n\t\tgf_list_add(ptr->fragment_run_table_entries, afrt);\n\t}\n\tif (ptr->fragment_run_table_count != gf_list_count(ptr->fragment_run_table_entries)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\nexit:\n\tgf_free(tmp_str);\n\treturn e;\n}\n",
                    "caller_start": 76,
                    "file_path": "src/isomedia/box_code_adobe.c"
                },
                {
                    "type": "caller_info",
                    "call_line": 183,
                    "call_code": "ISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)",
                    "caller_code": "GF_Err abst_box_read(GF_Box *s, GF_BitStream *bs)\n{\n\tGF_AdobeBootstrapInfoBox *ptr = (GF_AdobeBootstrapInfoBox *)s;\n\tint i;\n\tu32 tmp_strsize;\n\tchar *tmp_str;\n\tBool zfound=GF_FALSE;\n\tGF_Err e = GF_OK;\n\n\tISOM_DECREASE_SIZE(ptr, 25)\n\tptr->bootstrapinfo_version = gf_bs_read_u32(bs);\n\tptr->profile = gf_bs_read_int(bs, 2);\n\tptr->live = gf_bs_read_int(bs, 1);\n\tptr->update = gf_bs_read_int(bs, 1);\n\tptr->reserved = gf_bs_read_int(bs, 4);\n\tptr->time_scale = gf_bs_read_u32(bs);\n\tptr->current_media_time = gf_bs_read_u64(bs);\n\tptr->smpte_time_code_offset = gf_bs_read_u64(bs);\n\n\ti=0;\n\tif (ptr->size<8) return GF_ISOM_INVALID_FILE;\n\ttmp_strsize =(u32)ptr->size;\n\ttmp_str = gf_malloc(sizeof(char)*(tmp_strsize+1));\n\tif (!tmp_str) return GF_OUT_OF_MEM;\n\tmemset(tmp_str, 0, sizeof(char)*(tmp_strsize+1) );\n\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\tif (i) {\n\t\tptr->movie_identifier = gf_strdup(tmp_str);\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->server_entry_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->server_entry_count; i++) {\n\t\tint j=0;\n\t\tzfound = GF_FALSE;\n\t\ttmp_strsize=(u32)ptr->size;\n\t\twhile (tmp_strsize) {\n\t\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\t\ttmp_str[j] = gf_bs_read_u8(bs);\n\t\t\ttmp_strsize--;\n\t\t\tif (!tmp_str[j]) {\n\t\t\t\tzfound = GF_TRUE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t\tif (!zfound) {\n\t\t\te = GF_ISOM_INVALID_FILE;\n\t\t\tgoto exit;\n\t\t}\n\t\tif (j) {\n\t\t\tgf_list_insert(ptr->server_entry_table, gf_strdup(tmp_str), i);\n\t\t}\n\t}\n\tif (ptr->server_entry_count != gf_list_count(ptr->server_entry_table)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->quality_entry_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->quality_entry_count; i++) {\n\t\tint j=0;\n\t\tzfound = GF_FALSE;\n\t\ttmp_strsize=(u32)ptr->size;\n\t\twhile (tmp_strsize) {\n\t\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\t\ttmp_str[j] = gf_bs_read_u8(bs);\n\t\t\ttmp_strsize--;\n\t\t\tif (!tmp_str[j]) {\n\t\t\t\tzfound = GF_TRUE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\n\t\tif (!zfound) {\n\t\t\te = GF_ISOM_INVALID_FILE;\n\t\t\tgoto exit;\n\t\t}\n\t\tif (j) {\n\t\t\tgf_list_insert(ptr->quality_entry_table, gf_strdup(tmp_str), i);\n\t\t}\n\t}\n\tif (ptr->quality_entry_count != gf_list_count(ptr->quality_entry_table)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\ti=0;\n\ttmp_strsize=(u32)ptr->size;\n\tzfound = GF_FALSE;\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tif (i) {\n\t\tptr->drm_data = gf_strdup(tmp_str);\n\t}\n\n\ti=0;\n\ttmp_strsize=(u32)ptr->size;\n\tzfound = GF_FALSE;\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tif (i) {\n\t\tptr->meta_data = gf_strdup(tmp_str);\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->segment_run_table_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->segment_run_table_count; i++) {\n\t\tGF_AdobeSegmentRunTableBox *asrt = NULL;\n\t\te = gf_isom_box_parse((GF_Box **)&asrt, bs);\n\t\tif (e) {\n\t\t\tif (asrt) gf_isom_box_del((GF_Box*)asrt);\n\t\t\tgoto exit;\n\t\t}\n\t\tgf_list_add(ptr->segment_run_table_entries, asrt);\n\t}\n\tif (ptr->segment_run_table_count != gf_list_count(ptr->segment_run_table_entries)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->fragment_run_table_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->fragment_run_table_count; i++) {\n\t\tGF_AdobeFragmentRunTableBox *afrt = NULL;\n\t\te = gf_isom_box_parse((GF_Box **)&afrt, bs);\n\t\tif (e) {\n\t\t\tif (afrt) gf_isom_box_del((GF_Box*)afrt);\n\t\t\tgoto exit;\n\t\t}\n\t\tgf_list_add(ptr->fragment_run_table_entries, afrt);\n\t}\n\tif (ptr->fragment_run_table_count != gf_list_count(ptr->fragment_run_table_entries)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\nexit:\n\tgf_free(tmp_str);\n\treturn e;\n}\n",
                    "caller_start": 76,
                    "file_path": "src/isomedia/box_code_adobe.c"
                },
                {
                    "type": "caller_info",
                    "call_line": 205,
                    "call_code": "ISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)",
                    "caller_code": "GF_Err abst_box_read(GF_Box *s, GF_BitStream *bs)\n{\n\tGF_AdobeBootstrapInfoBox *ptr = (GF_AdobeBootstrapInfoBox *)s;\n\tint i;\n\tu32 tmp_strsize;\n\tchar *tmp_str;\n\tBool zfound=GF_FALSE;\n\tGF_Err e = GF_OK;\n\n\tISOM_DECREASE_SIZE(ptr, 25)\n\tptr->bootstrapinfo_version = gf_bs_read_u32(bs);\n\tptr->profile = gf_bs_read_int(bs, 2);\n\tptr->live = gf_bs_read_int(bs, 1);\n\tptr->update = gf_bs_read_int(bs, 1);\n\tptr->reserved = gf_bs_read_int(bs, 4);\n\tptr->time_scale = gf_bs_read_u32(bs);\n\tptr->current_media_time = gf_bs_read_u64(bs);\n\tptr->smpte_time_code_offset = gf_bs_read_u64(bs);\n\n\ti=0;\n\tif (ptr->size<8) return GF_ISOM_INVALID_FILE;\n\ttmp_strsize =(u32)ptr->size;\n\ttmp_str = gf_malloc(sizeof(char)*(tmp_strsize+1));\n\tif (!tmp_str) return GF_OUT_OF_MEM;\n\tmemset(tmp_str, 0, sizeof(char)*(tmp_strsize+1) );\n\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\tif (i) {\n\t\tptr->movie_identifier = gf_strdup(tmp_str);\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->server_entry_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->server_entry_count; i++) {\n\t\tint j=0;\n\t\tzfound = GF_FALSE;\n\t\ttmp_strsize=(u32)ptr->size;\n\t\twhile (tmp_strsize) {\n\t\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\t\ttmp_str[j] = gf_bs_read_u8(bs);\n\t\t\ttmp_strsize--;\n\t\t\tif (!tmp_str[j]) {\n\t\t\t\tzfound = GF_TRUE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t\tif (!zfound) {\n\t\t\te = GF_ISOM_INVALID_FILE;\n\t\t\tgoto exit;\n\t\t}\n\t\tif (j) {\n\t\t\tgf_list_insert(ptr->server_entry_table, gf_strdup(tmp_str), i);\n\t\t}\n\t}\n\tif (ptr->server_entry_count != gf_list_count(ptr->server_entry_table)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->quality_entry_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->quality_entry_count; i++) {\n\t\tint j=0;\n\t\tzfound = GF_FALSE;\n\t\ttmp_strsize=(u32)ptr->size;\n\t\twhile (tmp_strsize) {\n\t\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\t\ttmp_str[j] = gf_bs_read_u8(bs);\n\t\t\ttmp_strsize--;\n\t\t\tif (!tmp_str[j]) {\n\t\t\t\tzfound = GF_TRUE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\n\t\tif (!zfound) {\n\t\t\te = GF_ISOM_INVALID_FILE;\n\t\t\tgoto exit;\n\t\t}\n\t\tif (j) {\n\t\t\tgf_list_insert(ptr->quality_entry_table, gf_strdup(tmp_str), i);\n\t\t}\n\t}\n\tif (ptr->quality_entry_count != gf_list_count(ptr->quality_entry_table)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\ti=0;\n\ttmp_strsize=(u32)ptr->size;\n\tzfound = GF_FALSE;\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tif (i) {\n\t\tptr->drm_data = gf_strdup(tmp_str);\n\t}\n\n\ti=0;\n\ttmp_strsize=(u32)ptr->size;\n\tzfound = GF_FALSE;\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tif (i) {\n\t\tptr->meta_data = gf_strdup(tmp_str);\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->segment_run_table_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->segment_run_table_count; i++) {\n\t\tGF_AdobeSegmentRunTableBox *asrt = NULL;\n\t\te = gf_isom_box_parse((GF_Box **)&asrt, bs);\n\t\tif (e) {\n\t\t\tif (asrt) gf_isom_box_del((GF_Box*)asrt);\n\t\t\tgoto exit;\n\t\t}\n\t\tgf_list_add(ptr->segment_run_table_entries, asrt);\n\t}\n\tif (ptr->segment_run_table_count != gf_list_count(ptr->segment_run_table_entries)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->fragment_run_table_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->fragment_run_table_count; i++) {\n\t\tGF_AdobeFragmentRunTableBox *afrt = NULL;\n\t\te = gf_isom_box_parse((GF_Box **)&afrt, bs);\n\t\tif (e) {\n\t\t\tif (afrt) gf_isom_box_del((GF_Box*)afrt);\n\t\t\tgoto exit;\n\t\t}\n\t\tgf_list_add(ptr->fragment_run_table_entries, afrt);\n\t}\n\tif (ptr->fragment_run_table_count != gf_list_count(ptr->fragment_run_table_entries)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\nexit:\n\tgf_free(tmp_str);\n\treturn e;\n}\n",
                    "caller_start": 76,
                    "file_path": "src/isomedia/box_code_adobe.c"
                },
                {
                    "type": "caller_info",
                    "call_line": 223,
                    "call_code": "ISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)",
                    "caller_code": "GF_Err abst_box_read(GF_Box *s, GF_BitStream *bs)\n{\n\tGF_AdobeBootstrapInfoBox *ptr = (GF_AdobeBootstrapInfoBox *)s;\n\tint i;\n\tu32 tmp_strsize;\n\tchar *tmp_str;\n\tBool zfound=GF_FALSE;\n\tGF_Err e = GF_OK;\n\n\tISOM_DECREASE_SIZE(ptr, 25)\n\tptr->bootstrapinfo_version = gf_bs_read_u32(bs);\n\tptr->profile = gf_bs_read_int(bs, 2);\n\tptr->live = gf_bs_read_int(bs, 1);\n\tptr->update = gf_bs_read_int(bs, 1);\n\tptr->reserved = gf_bs_read_int(bs, 4);\n\tptr->time_scale = gf_bs_read_u32(bs);\n\tptr->current_media_time = gf_bs_read_u64(bs);\n\tptr->smpte_time_code_offset = gf_bs_read_u64(bs);\n\n\ti=0;\n\tif (ptr->size<8) return GF_ISOM_INVALID_FILE;\n\ttmp_strsize =(u32)ptr->size;\n\ttmp_str = gf_malloc(sizeof(char)*(tmp_strsize+1));\n\tif (!tmp_str) return GF_OUT_OF_MEM;\n\tmemset(tmp_str, 0, sizeof(char)*(tmp_strsize+1) );\n\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\tif (i) {\n\t\tptr->movie_identifier = gf_strdup(tmp_str);\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->server_entry_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->server_entry_count; i++) {\n\t\tint j=0;\n\t\tzfound = GF_FALSE;\n\t\ttmp_strsize=(u32)ptr->size;\n\t\twhile (tmp_strsize) {\n\t\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\t\ttmp_str[j] = gf_bs_read_u8(bs);\n\t\t\ttmp_strsize--;\n\t\t\tif (!tmp_str[j]) {\n\t\t\t\tzfound = GF_TRUE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t\tif (!zfound) {\n\t\t\te = GF_ISOM_INVALID_FILE;\n\t\t\tgoto exit;\n\t\t}\n\t\tif (j) {\n\t\t\tgf_list_insert(ptr->server_entry_table, gf_strdup(tmp_str), i);\n\t\t}\n\t}\n\tif (ptr->server_entry_count != gf_list_count(ptr->server_entry_table)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->quality_entry_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->quality_entry_count; i++) {\n\t\tint j=0;\n\t\tzfound = GF_FALSE;\n\t\ttmp_strsize=(u32)ptr->size;\n\t\twhile (tmp_strsize) {\n\t\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\t\ttmp_str[j] = gf_bs_read_u8(bs);\n\t\t\ttmp_strsize--;\n\t\t\tif (!tmp_str[j]) {\n\t\t\t\tzfound = GF_TRUE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\n\t\tif (!zfound) {\n\t\t\te = GF_ISOM_INVALID_FILE;\n\t\t\tgoto exit;\n\t\t}\n\t\tif (j) {\n\t\t\tgf_list_insert(ptr->quality_entry_table, gf_strdup(tmp_str), i);\n\t\t}\n\t}\n\tif (ptr->quality_entry_count != gf_list_count(ptr->quality_entry_table)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\ti=0;\n\ttmp_strsize=(u32)ptr->size;\n\tzfound = GF_FALSE;\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tif (i) {\n\t\tptr->drm_data = gf_strdup(tmp_str);\n\t}\n\n\ti=0;\n\ttmp_strsize=(u32)ptr->size;\n\tzfound = GF_FALSE;\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tif (i) {\n\t\tptr->meta_data = gf_strdup(tmp_str);\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->segment_run_table_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->segment_run_table_count; i++) {\n\t\tGF_AdobeSegmentRunTableBox *asrt = NULL;\n\t\te = gf_isom_box_parse((GF_Box **)&asrt, bs);\n\t\tif (e) {\n\t\t\tif (asrt) gf_isom_box_del((GF_Box*)asrt);\n\t\t\tgoto exit;\n\t\t}\n\t\tgf_list_add(ptr->segment_run_table_entries, asrt);\n\t}\n\tif (ptr->segment_run_table_count != gf_list_count(ptr->segment_run_table_entries)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->fragment_run_table_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->fragment_run_table_count; i++) {\n\t\tGF_AdobeFragmentRunTableBox *afrt = NULL;\n\t\te = gf_isom_box_parse((GF_Box **)&afrt, bs);\n\t\tif (e) {\n\t\t\tif (afrt) gf_isom_box_del((GF_Box*)afrt);\n\t\t\tgoto exit;\n\t\t}\n\t\tgf_list_add(ptr->fragment_run_table_entries, afrt);\n\t}\n\tif (ptr->fragment_run_table_count != gf_list_count(ptr->fragment_run_table_entries)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\nexit:\n\tgf_free(tmp_str);\n\treturn e;\n}\n",
                    "caller_start": 76,
                    "file_path": "src/isomedia/box_code_adobe.c"
                }
            ]
        }
    ],
    "analysis": {
        "patch": [
            {
                "func_name": "dimC_box_read",
                "patch": "--- func_before\n+++ func_after\n@@ -1048,5 +1048,6 @@\n GF_Err dimC_box_read(GF_Box *s, GF_BitStream *bs)\n {\n+\tGF_Err e = GF_OK;\n \tu32 i, msize;\n \tGF_DIMSSceneConfigBox *p = (GF_DIMSSceneConfigBox *)s;\n \n@@ -1065,7 +1066,7 @@\n \ti=0;\n \tstr[0]=0;\n \twhile (i < msize) {\n-\t\tISOM_DECREASE_SIZE(p, 1);\n+\t\tISOM_DECREASE_SIZE_GOTO_EXIT(p, 1);\n \t\tstr[i] = gf_bs_read_u8(bs);\n \t\tif (!str[i]) break;\n \t\ti++;\n@@ -1080,7 +1081,7 @@\n \ti=0;\n \tstr[0]=0;\n \twhile (i < msize) {\n-\t\tISOM_DECREASE_SIZE(p, 1);\n+\t\tISOM_DECREASE_SIZE_GOTO_EXIT(p, 1);\n \t\tstr[i] = gf_bs_read_u8(bs);\n \t\tif (!str[i]) break;\n \t\ti++;\n@@ -1095,4 +1096,8 @@\n \tif (!p->textEncoding || !p->contentEncoding)\n \t\treturn GF_OUT_OF_MEM;\n \treturn GF_OK;\n+\n+exit:\n+\tgf_free(str);\n+\treturn e;\n }",
                "file_path": "src/isomedia/box_code_3gpp.c"
            }
        ],
        "msg": "fixed #2307",
        "description": "GPAC v2.1-DEV-rev428-gcb8ae46c8-master was discovered to contain a memory leak via the function dimC_box_read at isomedia/box_code_3gpp.c.",
        "language": "c",
        "vulnerability_type": "memory",
        "repair_strategy": "The patch introduces an explicit 'exit' label with 'gf_free(str)' (box_code_3gpp.c:1096-1099) to ensure deallocation of the 'str' buffer. It replaces 'ISOM_DECREASE_SIZE' with 'ISOM_DECREASE_SIZE_GOTO_EXIT' (box_code_3gpp.c:1066,1081), which likely aborts processing on error and jumps to the cleanup label.",
        "need_context": true,
        "required_context": [
            "function: ISOM_DECREASE_SIZE_GOTO_EXIT"
        ],
        "confidence_score": 0.75,
        "root_cause": "Original code allocated 'str' but lacked guaranteed deallocation on error paths. The patch adds 'gf_free(str)' at 'exit' (box_code_3gpp.c:1096) but depends on 'ISOM_DECREASE_SIZE_GOTO_EXIT' (box_code_3gpp.c:1066,1081) to trigger error propagation. Without the macro definition, it's unknown how/when the error condition activates the 'exit' label.",
        "analysis": "The patch introduces an 'exit' label with 'gf_free(str)' in dimC_box_read (box_code_3gpp.c:1096) to address the memory leak. The original code failed to free 'str' when errors occurred during buffer reads. The patch replaces 'ISOM_DECREASE_SIZE' with 'ISOM_DECREASE_SIZE_GOTO_EXIT' (box_code_3gpp.c:1066,1081) to trigger error paths leading to the cleanup label. However, the exact behavior of 'ISOM_DECREASE_SIZE_GOTO_EXIT' remains unclear without its macro definition. This macro is critical to understanding how error conditions propagate to the 'exit' label for proper cleanup."
    },
    "iteration": 3,
    "history": [
        {
            "stage": "initial",
            "prompt": "You are a senior security engineer. Using **only the provided patch and description**, and **restricted to context retrievable by the 'caller' and 'function' tools**, perform the initial vulnerability analysis.\n\n## INPUTS\n- **Commit Message**: fixed #2307\n- **Vulnerability Description**: GPAC v2.1-DEV-rev428-gcb8ae46c8-master was discovered to contain a memory leak via the function dimC_box_read at isomedia/box_code_3gpp.c.\n- **Patch Code**: [{'func_name': 'dimC_box_read', 'patch': '--- func_before\\n+++ func_after\\n@@ -1048,5 +1048,6 @@\\n GF_Err dimC_box_read(GF_Box *s, GF_BitStream *bs)\\n {\\n+\\tGF_Err e = GF_OK;\\n \\tu32 i, msize;\\n \\tGF_DIMSSceneConfigBox *p = (GF_DIMSSceneConfigBox *)s;\\n \\n@@ -1065,7 +1066,7 @@\\n \\ti=0;\\n \\tstr[0]=0;\\n \\twhile (i < msize) {\\n-\\t\\tISOM_DECREASE_SIZE(p, 1);\\n+\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(p, 1);\\n \\t\\tstr[i] = gf_bs_read_u8(bs);\\n \\t\\tif (!str[i]) break;\\n \\t\\ti++;\\n@@ -1080,7 +1081,7 @@\\n \\ti=0;\\n \\tstr[0]=0;\\n \\twhile (i < msize) {\\n-\\t\\tISOM_DECREASE_SIZE(p, 1);\\n+\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(p, 1);\\n \\t\\tstr[i] = gf_bs_read_u8(bs);\\n \\t\\tif (!str[i]) break;\\n \\t\\ti++;\\n@@ -1095,4 +1096,8 @@\\n \\tif (!p->textEncoding || !p->contentEncoding)\\n \\t\\treturn GF_OUT_OF_MEM;\\n \\treturn GF_OK;\\n+\\n+exit:\\n+\\tgf_free(str);\\n+\\treturn e;\\n }', 'file_path': 'src/isomedia/box_code_3gpp.c'}]\n\n## INSTRUCTIONS\n1. **Patch Review**  \n   • Detect primary language (`c`, `cpp`, `java`).  \n   • Classify vulnerability (`memory`, `logic`, `config`).  \n   • Explain how each patch hunk mitigates risk, citing `file:line`.  \n   → Populate `language`, `vulnerability_type`, `repair_rationale`.\n\n2. **Trace Root Cause within Patch**  \n   Follow calls / data flow in the patch, citing `file:line`.  \n   Where evidence ends, insert: `GAP: <why evidence stops>` → build `root_cause`.\n\n3. **Determine Missing Context (tools limited)**  \n   If gaps remain:  \n     • set `\"need_context\": true`  \n     • add precise, non-duplicate requests to `\"required_context\"` using **only**:  \n       - `function: …`  \n       - `caller: …`  \n   If the chain is fully evidenced from the patch, set `\"need_context\": false`.\n\n4. **Confidence Score**  \n   Set `confidence_score ≥ 0.90` only if the full chain is evidenced; otherwise `≤ 0.75`.\n\n## OUTPUT (MUST valid JSON — double quotes, no trailing commas)\n```json\n  {\n      \"language\": \"c | cpp | java\",\n      \"vulnerability_type\": \"memory | logic | config\",\n      \"repair_strategy\": \"<citing file:line from the patch>\",\n      \"analysis\": \"<Synthesis from Process Step 2. If full chain evident, explain that. If context needed, explain why requested context is essential to bridge gaps.>\",\n      \"need_context\": true | false, //false ONLY IF the full pattern was unambiguously evident from patch alone.\n      \"required_context\": \"<list of precise context requests if any context needed>\" ,\n      \"root_cause\": \"\"<Partial/complete trace with file:line evidence from the patch, noting gaps. If full chain evident, provide it.>\",\n      \"confidence_score\": 0.0-1.0 // Confidence in understanding the *full* path based on *this initial analysis phase*\n  }\n  ```\n\n## RULES\n* **Output must be valid JSON (no trailing commas).**\n* **Source-of-Truth** – Cite only code visible in the patch (`file:line`). Commit message / description are auxiliary.\n* **Zero-Assumption** – Never infer. Missing evidence → declare GAP, set `need_context=true`, and request context with allowed tools.\n* **Tool Restriction** – `required_context` items **must** be of type `function` or `caller` only.\n* **Stop Condition** – Terminate only when the trigger chain is fully evidenced from the patch; else continue requesting context.\n",
            "result": {
                "language": "c",
                "vulnerability_type": "memory",
                "repair_strategy": "The patch introduces an explicit 'exit' label with 'gf_free(str)' (box_code_3gpp.c:1096-1099) to ensure deallocation of the 'str' buffer. It replaces 'ISOM_DECREASE_SIZE' with 'ISOM_DECREASE_SIZE_GOTO_EXIT' (box_code_3gpp.c:1066,1081), which likely aborts processing on error and jumps to the cleanup label.",
                "analysis": "The memory leak occurs when 'str' is not freed on error paths. The patch adds a centralized cleanup point ('exit') and modifies macros to trigger early exit on size errors. However, the behavior of 'ISOM_DECREASE_SIZE_GOTO_EXIT' is not visible in the patch, requiring its definition to confirm it properly handles error propagation and jumps to 'exit'.",
                "need_context": true,
                "required_context": [
                    "function: ISOM_DECREASE_SIZE_GOTO_EXIT"
                ],
                "root_cause": "The original code failed to free 'str' when error conditions occurred during buffer reads. The patch adds 'gf_free(str)' at 'exit' (box_code_3gpp.c:1096) but relies on 'ISOM_DECREASE_SIZE_GOTO_EXIT' to trigger the error path. Without the macro's definition, the exact error propagation mechanism remains unclear.",
                "confidence_score": 0.75
            },
            "timestamp": "2025-05-29T19:59:53.528819"
        },
        {
            "stage": "collection",
            "required_context": [
                "function: ISOM_DECREASE_SIZE_GOTO_EXIT"
            ],
            "results": [
                {
                    "tool": "caller_info.find_caller_for_func({'func_name': 'ISOM_DECREASE_SIZE_GOTO_EXIT', 'project_dir': './storage/result/Part2_result/github/CVE-2022-45204/old_repos/gpac-gpac_aa486c3'})",
                    "result": [
                        {
                            "type": "caller_info",
                            "call_line": 103,
                            "call_code": "ISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)",
                            "caller_code": "GF_Err abst_box_read(GF_Box *s, GF_BitStream *bs)\n{\n\tGF_AdobeBootstrapInfoBox *ptr = (GF_AdobeBootstrapInfoBox *)s;\n\tint i;\n\tu32 tmp_strsize;\n\tchar *tmp_str;\n\tBool zfound=GF_FALSE;\n\tGF_Err e = GF_OK;\n\n\tISOM_DECREASE_SIZE(ptr, 25)\n\tptr->bootstrapinfo_version = gf_bs_read_u32(bs);\n\tptr->profile = gf_bs_read_int(bs, 2);\n\tptr->live = gf_bs_read_int(bs, 1);\n\tptr->update = gf_bs_read_int(bs, 1);\n\tptr->reserved = gf_bs_read_int(bs, 4);\n\tptr->time_scale = gf_bs_read_u32(bs);\n\tptr->current_media_time = gf_bs_read_u64(bs);\n\tptr->smpte_time_code_offset = gf_bs_read_u64(bs);\n\n\ti=0;\n\tif (ptr->size<8) return GF_ISOM_INVALID_FILE;\n\ttmp_strsize =(u32)ptr->size;\n\ttmp_str = gf_malloc(sizeof(char)*(tmp_strsize+1));\n\tif (!tmp_str) return GF_OUT_OF_MEM;\n\tmemset(tmp_str, 0, sizeof(char)*(tmp_strsize+1) );\n\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\tif (i) {\n\t\tptr->movie_identifier = gf_strdup(tmp_str);\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->server_entry_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->server_entry_count; i++) {\n\t\tint j=0;\n\t\tzfound = GF_FALSE;\n\t\ttmp_strsize=(u32)ptr->size;\n\t\twhile (tmp_strsize) {\n\t\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\t\ttmp_str[j] = gf_bs_read_u8(bs);\n\t\t\ttmp_strsize--;\n\t\t\tif (!tmp_str[j]) {\n\t\t\t\tzfound = GF_TRUE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t\tif (!zfound) {\n\t\t\te = GF_ISOM_INVALID_FILE;\n\t\t\tgoto exit;\n\t\t}\n\t\tif (j) {\n\t\t\tgf_list_insert(ptr->server_entry_table, gf_strdup(tmp_str), i);\n\t\t}\n\t}\n\tif (ptr->server_entry_count != gf_list_count(ptr->server_entry_table)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->quality_entry_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->quality_entry_count; i++) {\n\t\tint j=0;\n\t\tzfound = GF_FALSE;\n\t\ttmp_strsize=(u32)ptr->size;\n\t\twhile (tmp_strsize) {\n\t\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\t\ttmp_str[j] = gf_bs_read_u8(bs);\n\t\t\ttmp_strsize--;\n\t\t\tif (!tmp_str[j]) {\n\t\t\t\tzfound = GF_TRUE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\n\t\tif (!zfound) {\n\t\t\te = GF_ISOM_INVALID_FILE;\n\t\t\tgoto exit;\n\t\t}\n\t\tif (j) {\n\t\t\tgf_list_insert(ptr->quality_entry_table, gf_strdup(tmp_str), i);\n\t\t}\n\t}\n\tif (ptr->quality_entry_count != gf_list_count(ptr->quality_entry_table)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\ti=0;\n\ttmp_strsize=(u32)ptr->size;\n\tzfound = GF_FALSE;\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tif (i) {\n\t\tptr->drm_data = gf_strdup(tmp_str);\n\t}\n\n\ti=0;\n\ttmp_strsize=(u32)ptr->size;\n\tzfound = GF_FALSE;\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tif (i) {\n\t\tptr->meta_data = gf_strdup(tmp_str);\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->segment_run_table_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->segment_run_table_count; i++) {\n\t\tGF_AdobeSegmentRunTableBox *asrt = NULL;\n\t\te = gf_isom_box_parse((GF_Box **)&asrt, bs);\n\t\tif (e) {\n\t\t\tif (asrt) gf_isom_box_del((GF_Box*)asrt);\n\t\t\tgoto exit;\n\t\t}\n\t\tgf_list_add(ptr->segment_run_table_entries, asrt);\n\t}\n\tif (ptr->segment_run_table_count != gf_list_count(ptr->segment_run_table_entries)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->fragment_run_table_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->fragment_run_table_count; i++) {\n\t\tGF_AdobeFragmentRunTableBox *afrt = NULL;\n\t\te = gf_isom_box_parse((GF_Box **)&afrt, bs);\n\t\tif (e) {\n\t\t\tif (afrt) gf_isom_box_del((GF_Box*)afrt);\n\t\t\tgoto exit;\n\t\t}\n\t\tgf_list_add(ptr->fragment_run_table_entries, afrt);\n\t}\n\tif (ptr->fragment_run_table_count != gf_list_count(ptr->fragment_run_table_entries)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\nexit:\n\tgf_free(tmp_str);\n\treturn e;\n}\n",
                            "caller_start": 76,
                            "file_path": "src/isomedia/box_code_adobe.c"
                        },
                        {
                            "type": "caller_info",
                            "call_line": 120,
                            "call_code": "ISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)",
                            "caller_code": "GF_Err abst_box_read(GF_Box *s, GF_BitStream *bs)\n{\n\tGF_AdobeBootstrapInfoBox *ptr = (GF_AdobeBootstrapInfoBox *)s;\n\tint i;\n\tu32 tmp_strsize;\n\tchar *tmp_str;\n\tBool zfound=GF_FALSE;\n\tGF_Err e = GF_OK;\n\n\tISOM_DECREASE_SIZE(ptr, 25)\n\tptr->bootstrapinfo_version = gf_bs_read_u32(bs);\n\tptr->profile = gf_bs_read_int(bs, 2);\n\tptr->live = gf_bs_read_int(bs, 1);\n\tptr->update = gf_bs_read_int(bs, 1);\n\tptr->reserved = gf_bs_read_int(bs, 4);\n\tptr->time_scale = gf_bs_read_u32(bs);\n\tptr->current_media_time = gf_bs_read_u64(bs);\n\tptr->smpte_time_code_offset = gf_bs_read_u64(bs);\n\n\ti=0;\n\tif (ptr->size<8) return GF_ISOM_INVALID_FILE;\n\ttmp_strsize =(u32)ptr->size;\n\ttmp_str = gf_malloc(sizeof(char)*(tmp_strsize+1));\n\tif (!tmp_str) return GF_OUT_OF_MEM;\n\tmemset(tmp_str, 0, sizeof(char)*(tmp_strsize+1) );\n\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\tif (i) {\n\t\tptr->movie_identifier = gf_strdup(tmp_str);\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->server_entry_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->server_entry_count; i++) {\n\t\tint j=0;\n\t\tzfound = GF_FALSE;\n\t\ttmp_strsize=(u32)ptr->size;\n\t\twhile (tmp_strsize) {\n\t\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\t\ttmp_str[j] = gf_bs_read_u8(bs);\n\t\t\ttmp_strsize--;\n\t\t\tif (!tmp_str[j]) {\n\t\t\t\tzfound = GF_TRUE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t\tif (!zfound) {\n\t\t\te = GF_ISOM_INVALID_FILE;\n\t\t\tgoto exit;\n\t\t}\n\t\tif (j) {\n\t\t\tgf_list_insert(ptr->server_entry_table, gf_strdup(tmp_str), i);\n\t\t}\n\t}\n\tif (ptr->server_entry_count != gf_list_count(ptr->server_entry_table)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->quality_entry_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->quality_entry_count; i++) {\n\t\tint j=0;\n\t\tzfound = GF_FALSE;\n\t\ttmp_strsize=(u32)ptr->size;\n\t\twhile (tmp_strsize) {\n\t\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\t\ttmp_str[j] = gf_bs_read_u8(bs);\n\t\t\ttmp_strsize--;\n\t\t\tif (!tmp_str[j]) {\n\t\t\t\tzfound = GF_TRUE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\n\t\tif (!zfound) {\n\t\t\te = GF_ISOM_INVALID_FILE;\n\t\t\tgoto exit;\n\t\t}\n\t\tif (j) {\n\t\t\tgf_list_insert(ptr->quality_entry_table, gf_strdup(tmp_str), i);\n\t\t}\n\t}\n\tif (ptr->quality_entry_count != gf_list_count(ptr->quality_entry_table)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\ti=0;\n\ttmp_strsize=(u32)ptr->size;\n\tzfound = GF_FALSE;\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tif (i) {\n\t\tptr->drm_data = gf_strdup(tmp_str);\n\t}\n\n\ti=0;\n\ttmp_strsize=(u32)ptr->size;\n\tzfound = GF_FALSE;\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tif (i) {\n\t\tptr->meta_data = gf_strdup(tmp_str);\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->segment_run_table_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->segment_run_table_count; i++) {\n\t\tGF_AdobeSegmentRunTableBox *asrt = NULL;\n\t\te = gf_isom_box_parse((GF_Box **)&asrt, bs);\n\t\tif (e) {\n\t\t\tif (asrt) gf_isom_box_del((GF_Box*)asrt);\n\t\t\tgoto exit;\n\t\t}\n\t\tgf_list_add(ptr->segment_run_table_entries, asrt);\n\t}\n\tif (ptr->segment_run_table_count != gf_list_count(ptr->segment_run_table_entries)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->fragment_run_table_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->fragment_run_table_count; i++) {\n\t\tGF_AdobeFragmentRunTableBox *afrt = NULL;\n\t\te = gf_isom_box_parse((GF_Box **)&afrt, bs);\n\t\tif (e) {\n\t\t\tif (afrt) gf_isom_box_del((GF_Box*)afrt);\n\t\t\tgoto exit;\n\t\t}\n\t\tgf_list_add(ptr->fragment_run_table_entries, afrt);\n\t}\n\tif (ptr->fragment_run_table_count != gf_list_count(ptr->fragment_run_table_entries)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\nexit:\n\tgf_free(tmp_str);\n\treturn e;\n}\n",
                            "caller_start": 76,
                            "file_path": "src/isomedia/box_code_adobe.c"
                        },
                        {
                            "type": "caller_info",
                            "call_line": 127,
                            "call_code": "ISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)",
                            "caller_code": "GF_Err abst_box_read(GF_Box *s, GF_BitStream *bs)\n{\n\tGF_AdobeBootstrapInfoBox *ptr = (GF_AdobeBootstrapInfoBox *)s;\n\tint i;\n\tu32 tmp_strsize;\n\tchar *tmp_str;\n\tBool zfound=GF_FALSE;\n\tGF_Err e = GF_OK;\n\n\tISOM_DECREASE_SIZE(ptr, 25)\n\tptr->bootstrapinfo_version = gf_bs_read_u32(bs);\n\tptr->profile = gf_bs_read_int(bs, 2);\n\tptr->live = gf_bs_read_int(bs, 1);\n\tptr->update = gf_bs_read_int(bs, 1);\n\tptr->reserved = gf_bs_read_int(bs, 4);\n\tptr->time_scale = gf_bs_read_u32(bs);\n\tptr->current_media_time = gf_bs_read_u64(bs);\n\tptr->smpte_time_code_offset = gf_bs_read_u64(bs);\n\n\ti=0;\n\tif (ptr->size<8) return GF_ISOM_INVALID_FILE;\n\ttmp_strsize =(u32)ptr->size;\n\ttmp_str = gf_malloc(sizeof(char)*(tmp_strsize+1));\n\tif (!tmp_str) return GF_OUT_OF_MEM;\n\tmemset(tmp_str, 0, sizeof(char)*(tmp_strsize+1) );\n\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\tif (i) {\n\t\tptr->movie_identifier = gf_strdup(tmp_str);\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->server_entry_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->server_entry_count; i++) {\n\t\tint j=0;\n\t\tzfound = GF_FALSE;\n\t\ttmp_strsize=(u32)ptr->size;\n\t\twhile (tmp_strsize) {\n\t\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\t\ttmp_str[j] = gf_bs_read_u8(bs);\n\t\t\ttmp_strsize--;\n\t\t\tif (!tmp_str[j]) {\n\t\t\t\tzfound = GF_TRUE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t\tif (!zfound) {\n\t\t\te = GF_ISOM_INVALID_FILE;\n\t\t\tgoto exit;\n\t\t}\n\t\tif (j) {\n\t\t\tgf_list_insert(ptr->server_entry_table, gf_strdup(tmp_str), i);\n\t\t}\n\t}\n\tif (ptr->server_entry_count != gf_list_count(ptr->server_entry_table)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->quality_entry_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->quality_entry_count; i++) {\n\t\tint j=0;\n\t\tzfound = GF_FALSE;\n\t\ttmp_strsize=(u32)ptr->size;\n\t\twhile (tmp_strsize) {\n\t\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\t\ttmp_str[j] = gf_bs_read_u8(bs);\n\t\t\ttmp_strsize--;\n\t\t\tif (!tmp_str[j]) {\n\t\t\t\tzfound = GF_TRUE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\n\t\tif (!zfound) {\n\t\t\te = GF_ISOM_INVALID_FILE;\n\t\t\tgoto exit;\n\t\t}\n\t\tif (j) {\n\t\t\tgf_list_insert(ptr->quality_entry_table, gf_strdup(tmp_str), i);\n\t\t}\n\t}\n\tif (ptr->quality_entry_count != gf_list_count(ptr->quality_entry_table)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\ti=0;\n\ttmp_strsize=(u32)ptr->size;\n\tzfound = GF_FALSE;\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tif (i) {\n\t\tptr->drm_data = gf_strdup(tmp_str);\n\t}\n\n\ti=0;\n\ttmp_strsize=(u32)ptr->size;\n\tzfound = GF_FALSE;\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tif (i) {\n\t\tptr->meta_data = gf_strdup(tmp_str);\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->segment_run_table_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->segment_run_table_count; i++) {\n\t\tGF_AdobeSegmentRunTableBox *asrt = NULL;\n\t\te = gf_isom_box_parse((GF_Box **)&asrt, bs);\n\t\tif (e) {\n\t\t\tif (asrt) gf_isom_box_del((GF_Box*)asrt);\n\t\t\tgoto exit;\n\t\t}\n\t\tgf_list_add(ptr->segment_run_table_entries, asrt);\n\t}\n\tif (ptr->segment_run_table_count != gf_list_count(ptr->segment_run_table_entries)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->fragment_run_table_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->fragment_run_table_count; i++) {\n\t\tGF_AdobeFragmentRunTableBox *afrt = NULL;\n\t\te = gf_isom_box_parse((GF_Box **)&afrt, bs);\n\t\tif (e) {\n\t\t\tif (afrt) gf_isom_box_del((GF_Box*)afrt);\n\t\t\tgoto exit;\n\t\t}\n\t\tgf_list_add(ptr->fragment_run_table_entries, afrt);\n\t}\n\tif (ptr->fragment_run_table_count != gf_list_count(ptr->fragment_run_table_entries)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\nexit:\n\tgf_free(tmp_str);\n\treturn e;\n}\n",
                            "caller_start": 76,
                            "file_path": "src/isomedia/box_code_adobe.c"
                        },
                        {
                            "type": "caller_info",
                            "call_line": 149,
                            "call_code": "ISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)",
                            "caller_code": "GF_Err abst_box_read(GF_Box *s, GF_BitStream *bs)\n{\n\tGF_AdobeBootstrapInfoBox *ptr = (GF_AdobeBootstrapInfoBox *)s;\n\tint i;\n\tu32 tmp_strsize;\n\tchar *tmp_str;\n\tBool zfound=GF_FALSE;\n\tGF_Err e = GF_OK;\n\n\tISOM_DECREASE_SIZE(ptr, 25)\n\tptr->bootstrapinfo_version = gf_bs_read_u32(bs);\n\tptr->profile = gf_bs_read_int(bs, 2);\n\tptr->live = gf_bs_read_int(bs, 1);\n\tptr->update = gf_bs_read_int(bs, 1);\n\tptr->reserved = gf_bs_read_int(bs, 4);\n\tptr->time_scale = gf_bs_read_u32(bs);\n\tptr->current_media_time = gf_bs_read_u64(bs);\n\tptr->smpte_time_code_offset = gf_bs_read_u64(bs);\n\n\ti=0;\n\tif (ptr->size<8) return GF_ISOM_INVALID_FILE;\n\ttmp_strsize =(u32)ptr->size;\n\ttmp_str = gf_malloc(sizeof(char)*(tmp_strsize+1));\n\tif (!tmp_str) return GF_OUT_OF_MEM;\n\tmemset(tmp_str, 0, sizeof(char)*(tmp_strsize+1) );\n\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\tif (i) {\n\t\tptr->movie_identifier = gf_strdup(tmp_str);\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->server_entry_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->server_entry_count; i++) {\n\t\tint j=0;\n\t\tzfound = GF_FALSE;\n\t\ttmp_strsize=(u32)ptr->size;\n\t\twhile (tmp_strsize) {\n\t\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\t\ttmp_str[j] = gf_bs_read_u8(bs);\n\t\t\ttmp_strsize--;\n\t\t\tif (!tmp_str[j]) {\n\t\t\t\tzfound = GF_TRUE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t\tif (!zfound) {\n\t\t\te = GF_ISOM_INVALID_FILE;\n\t\t\tgoto exit;\n\t\t}\n\t\tif (j) {\n\t\t\tgf_list_insert(ptr->server_entry_table, gf_strdup(tmp_str), i);\n\t\t}\n\t}\n\tif (ptr->server_entry_count != gf_list_count(ptr->server_entry_table)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->quality_entry_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->quality_entry_count; i++) {\n\t\tint j=0;\n\t\tzfound = GF_FALSE;\n\t\ttmp_strsize=(u32)ptr->size;\n\t\twhile (tmp_strsize) {\n\t\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\t\ttmp_str[j] = gf_bs_read_u8(bs);\n\t\t\ttmp_strsize--;\n\t\t\tif (!tmp_str[j]) {\n\t\t\t\tzfound = GF_TRUE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\n\t\tif (!zfound) {\n\t\t\te = GF_ISOM_INVALID_FILE;\n\t\t\tgoto exit;\n\t\t}\n\t\tif (j) {\n\t\t\tgf_list_insert(ptr->quality_entry_table, gf_strdup(tmp_str), i);\n\t\t}\n\t}\n\tif (ptr->quality_entry_count != gf_list_count(ptr->quality_entry_table)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\ti=0;\n\ttmp_strsize=(u32)ptr->size;\n\tzfound = GF_FALSE;\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tif (i) {\n\t\tptr->drm_data = gf_strdup(tmp_str);\n\t}\n\n\ti=0;\n\ttmp_strsize=(u32)ptr->size;\n\tzfound = GF_FALSE;\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tif (i) {\n\t\tptr->meta_data = gf_strdup(tmp_str);\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->segment_run_table_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->segment_run_table_count; i++) {\n\t\tGF_AdobeSegmentRunTableBox *asrt = NULL;\n\t\te = gf_isom_box_parse((GF_Box **)&asrt, bs);\n\t\tif (e) {\n\t\t\tif (asrt) gf_isom_box_del((GF_Box*)asrt);\n\t\t\tgoto exit;\n\t\t}\n\t\tgf_list_add(ptr->segment_run_table_entries, asrt);\n\t}\n\tif (ptr->segment_run_table_count != gf_list_count(ptr->segment_run_table_entries)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->fragment_run_table_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->fragment_run_table_count; i++) {\n\t\tGF_AdobeFragmentRunTableBox *afrt = NULL;\n\t\te = gf_isom_box_parse((GF_Box **)&afrt, bs);\n\t\tif (e) {\n\t\t\tif (afrt) gf_isom_box_del((GF_Box*)afrt);\n\t\t\tgoto exit;\n\t\t}\n\t\tgf_list_add(ptr->fragment_run_table_entries, afrt);\n\t}\n\tif (ptr->fragment_run_table_count != gf_list_count(ptr->fragment_run_table_entries)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\nexit:\n\tgf_free(tmp_str);\n\treturn e;\n}\n",
                            "caller_start": 76,
                            "file_path": "src/isomedia/box_code_adobe.c"
                        },
                        {
                            "type": "caller_info",
                            "call_line": 156,
                            "call_code": "ISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)",
                            "caller_code": "GF_Err abst_box_read(GF_Box *s, GF_BitStream *bs)\n{\n\tGF_AdobeBootstrapInfoBox *ptr = (GF_AdobeBootstrapInfoBox *)s;\n\tint i;\n\tu32 tmp_strsize;\n\tchar *tmp_str;\n\tBool zfound=GF_FALSE;\n\tGF_Err e = GF_OK;\n\n\tISOM_DECREASE_SIZE(ptr, 25)\n\tptr->bootstrapinfo_version = gf_bs_read_u32(bs);\n\tptr->profile = gf_bs_read_int(bs, 2);\n\tptr->live = gf_bs_read_int(bs, 1);\n\tptr->update = gf_bs_read_int(bs, 1);\n\tptr->reserved = gf_bs_read_int(bs, 4);\n\tptr->time_scale = gf_bs_read_u32(bs);\n\tptr->current_media_time = gf_bs_read_u64(bs);\n\tptr->smpte_time_code_offset = gf_bs_read_u64(bs);\n\n\ti=0;\n\tif (ptr->size<8) return GF_ISOM_INVALID_FILE;\n\ttmp_strsize =(u32)ptr->size;\n\ttmp_str = gf_malloc(sizeof(char)*(tmp_strsize+1));\n\tif (!tmp_str) return GF_OUT_OF_MEM;\n\tmemset(tmp_str, 0, sizeof(char)*(tmp_strsize+1) );\n\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\tif (i) {\n\t\tptr->movie_identifier = gf_strdup(tmp_str);\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->server_entry_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->server_entry_count; i++) {\n\t\tint j=0;\n\t\tzfound = GF_FALSE;\n\t\ttmp_strsize=(u32)ptr->size;\n\t\twhile (tmp_strsize) {\n\t\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\t\ttmp_str[j] = gf_bs_read_u8(bs);\n\t\t\ttmp_strsize--;\n\t\t\tif (!tmp_str[j]) {\n\t\t\t\tzfound = GF_TRUE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t\tif (!zfound) {\n\t\t\te = GF_ISOM_INVALID_FILE;\n\t\t\tgoto exit;\n\t\t}\n\t\tif (j) {\n\t\t\tgf_list_insert(ptr->server_entry_table, gf_strdup(tmp_str), i);\n\t\t}\n\t}\n\tif (ptr->server_entry_count != gf_list_count(ptr->server_entry_table)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->quality_entry_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->quality_entry_count; i++) {\n\t\tint j=0;\n\t\tzfound = GF_FALSE;\n\t\ttmp_strsize=(u32)ptr->size;\n\t\twhile (tmp_strsize) {\n\t\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\t\ttmp_str[j] = gf_bs_read_u8(bs);\n\t\t\ttmp_strsize--;\n\t\t\tif (!tmp_str[j]) {\n\t\t\t\tzfound = GF_TRUE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\n\t\tif (!zfound) {\n\t\t\te = GF_ISOM_INVALID_FILE;\n\t\t\tgoto exit;\n\t\t}\n\t\tif (j) {\n\t\t\tgf_list_insert(ptr->quality_entry_table, gf_strdup(tmp_str), i);\n\t\t}\n\t}\n\tif (ptr->quality_entry_count != gf_list_count(ptr->quality_entry_table)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\ti=0;\n\ttmp_strsize=(u32)ptr->size;\n\tzfound = GF_FALSE;\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tif (i) {\n\t\tptr->drm_data = gf_strdup(tmp_str);\n\t}\n\n\ti=0;\n\ttmp_strsize=(u32)ptr->size;\n\tzfound = GF_FALSE;\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tif (i) {\n\t\tptr->meta_data = gf_strdup(tmp_str);\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->segment_run_table_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->segment_run_table_count; i++) {\n\t\tGF_AdobeSegmentRunTableBox *asrt = NULL;\n\t\te = gf_isom_box_parse((GF_Box **)&asrt, bs);\n\t\tif (e) {\n\t\t\tif (asrt) gf_isom_box_del((GF_Box*)asrt);\n\t\t\tgoto exit;\n\t\t}\n\t\tgf_list_add(ptr->segment_run_table_entries, asrt);\n\t}\n\tif (ptr->segment_run_table_count != gf_list_count(ptr->segment_run_table_entries)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->fragment_run_table_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->fragment_run_table_count; i++) {\n\t\tGF_AdobeFragmentRunTableBox *afrt = NULL;\n\t\te = gf_isom_box_parse((GF_Box **)&afrt, bs);\n\t\tif (e) {\n\t\t\tif (afrt) gf_isom_box_del((GF_Box*)afrt);\n\t\t\tgoto exit;\n\t\t}\n\t\tgf_list_add(ptr->fragment_run_table_entries, afrt);\n\t}\n\tif (ptr->fragment_run_table_count != gf_list_count(ptr->fragment_run_table_entries)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\nexit:\n\tgf_free(tmp_str);\n\treturn e;\n}\n",
                            "caller_start": 76,
                            "file_path": "src/isomedia/box_code_adobe.c"
                        },
                        {
                            "type": "caller_info",
                            "call_line": 183,
                            "call_code": "ISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)",
                            "caller_code": "GF_Err abst_box_read(GF_Box *s, GF_BitStream *bs)\n{\n\tGF_AdobeBootstrapInfoBox *ptr = (GF_AdobeBootstrapInfoBox *)s;\n\tint i;\n\tu32 tmp_strsize;\n\tchar *tmp_str;\n\tBool zfound=GF_FALSE;\n\tGF_Err e = GF_OK;\n\n\tISOM_DECREASE_SIZE(ptr, 25)\n\tptr->bootstrapinfo_version = gf_bs_read_u32(bs);\n\tptr->profile = gf_bs_read_int(bs, 2);\n\tptr->live = gf_bs_read_int(bs, 1);\n\tptr->update = gf_bs_read_int(bs, 1);\n\tptr->reserved = gf_bs_read_int(bs, 4);\n\tptr->time_scale = gf_bs_read_u32(bs);\n\tptr->current_media_time = gf_bs_read_u64(bs);\n\tptr->smpte_time_code_offset = gf_bs_read_u64(bs);\n\n\ti=0;\n\tif (ptr->size<8) return GF_ISOM_INVALID_FILE;\n\ttmp_strsize =(u32)ptr->size;\n\ttmp_str = gf_malloc(sizeof(char)*(tmp_strsize+1));\n\tif (!tmp_str) return GF_OUT_OF_MEM;\n\tmemset(tmp_str, 0, sizeof(char)*(tmp_strsize+1) );\n\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\tif (i) {\n\t\tptr->movie_identifier = gf_strdup(tmp_str);\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->server_entry_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->server_entry_count; i++) {\n\t\tint j=0;\n\t\tzfound = GF_FALSE;\n\t\ttmp_strsize=(u32)ptr->size;\n\t\twhile (tmp_strsize) {\n\t\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\t\ttmp_str[j] = gf_bs_read_u8(bs);\n\t\t\ttmp_strsize--;\n\t\t\tif (!tmp_str[j]) {\n\t\t\t\tzfound = GF_TRUE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t\tif (!zfound) {\n\t\t\te = GF_ISOM_INVALID_FILE;\n\t\t\tgoto exit;\n\t\t}\n\t\tif (j) {\n\t\t\tgf_list_insert(ptr->server_entry_table, gf_strdup(tmp_str), i);\n\t\t}\n\t}\n\tif (ptr->server_entry_count != gf_list_count(ptr->server_entry_table)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->quality_entry_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->quality_entry_count; i++) {\n\t\tint j=0;\n\t\tzfound = GF_FALSE;\n\t\ttmp_strsize=(u32)ptr->size;\n\t\twhile (tmp_strsize) {\n\t\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\t\ttmp_str[j] = gf_bs_read_u8(bs);\n\t\t\ttmp_strsize--;\n\t\t\tif (!tmp_str[j]) {\n\t\t\t\tzfound = GF_TRUE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\n\t\tif (!zfound) {\n\t\t\te = GF_ISOM_INVALID_FILE;\n\t\t\tgoto exit;\n\t\t}\n\t\tif (j) {\n\t\t\tgf_list_insert(ptr->quality_entry_table, gf_strdup(tmp_str), i);\n\t\t}\n\t}\n\tif (ptr->quality_entry_count != gf_list_count(ptr->quality_entry_table)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\ti=0;\n\ttmp_strsize=(u32)ptr->size;\n\tzfound = GF_FALSE;\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tif (i) {\n\t\tptr->drm_data = gf_strdup(tmp_str);\n\t}\n\n\ti=0;\n\ttmp_strsize=(u32)ptr->size;\n\tzfound = GF_FALSE;\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tif (i) {\n\t\tptr->meta_data = gf_strdup(tmp_str);\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->segment_run_table_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->segment_run_table_count; i++) {\n\t\tGF_AdobeSegmentRunTableBox *asrt = NULL;\n\t\te = gf_isom_box_parse((GF_Box **)&asrt, bs);\n\t\tif (e) {\n\t\t\tif (asrt) gf_isom_box_del((GF_Box*)asrt);\n\t\t\tgoto exit;\n\t\t}\n\t\tgf_list_add(ptr->segment_run_table_entries, asrt);\n\t}\n\tif (ptr->segment_run_table_count != gf_list_count(ptr->segment_run_table_entries)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->fragment_run_table_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->fragment_run_table_count; i++) {\n\t\tGF_AdobeFragmentRunTableBox *afrt = NULL;\n\t\te = gf_isom_box_parse((GF_Box **)&afrt, bs);\n\t\tif (e) {\n\t\t\tif (afrt) gf_isom_box_del((GF_Box*)afrt);\n\t\t\tgoto exit;\n\t\t}\n\t\tgf_list_add(ptr->fragment_run_table_entries, afrt);\n\t}\n\tif (ptr->fragment_run_table_count != gf_list_count(ptr->fragment_run_table_entries)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\nexit:\n\tgf_free(tmp_str);\n\treturn e;\n}\n",
                            "caller_start": 76,
                            "file_path": "src/isomedia/box_code_adobe.c"
                        },
                        {
                            "type": "caller_info",
                            "call_line": 205,
                            "call_code": "ISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)",
                            "caller_code": "GF_Err abst_box_read(GF_Box *s, GF_BitStream *bs)\n{\n\tGF_AdobeBootstrapInfoBox *ptr = (GF_AdobeBootstrapInfoBox *)s;\n\tint i;\n\tu32 tmp_strsize;\n\tchar *tmp_str;\n\tBool zfound=GF_FALSE;\n\tGF_Err e = GF_OK;\n\n\tISOM_DECREASE_SIZE(ptr, 25)\n\tptr->bootstrapinfo_version = gf_bs_read_u32(bs);\n\tptr->profile = gf_bs_read_int(bs, 2);\n\tptr->live = gf_bs_read_int(bs, 1);\n\tptr->update = gf_bs_read_int(bs, 1);\n\tptr->reserved = gf_bs_read_int(bs, 4);\n\tptr->time_scale = gf_bs_read_u32(bs);\n\tptr->current_media_time = gf_bs_read_u64(bs);\n\tptr->smpte_time_code_offset = gf_bs_read_u64(bs);\n\n\ti=0;\n\tif (ptr->size<8) return GF_ISOM_INVALID_FILE;\n\ttmp_strsize =(u32)ptr->size;\n\ttmp_str = gf_malloc(sizeof(char)*(tmp_strsize+1));\n\tif (!tmp_str) return GF_OUT_OF_MEM;\n\tmemset(tmp_str, 0, sizeof(char)*(tmp_strsize+1) );\n\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\tif (i) {\n\t\tptr->movie_identifier = gf_strdup(tmp_str);\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->server_entry_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->server_entry_count; i++) {\n\t\tint j=0;\n\t\tzfound = GF_FALSE;\n\t\ttmp_strsize=(u32)ptr->size;\n\t\twhile (tmp_strsize) {\n\t\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\t\ttmp_str[j] = gf_bs_read_u8(bs);\n\t\t\ttmp_strsize--;\n\t\t\tif (!tmp_str[j]) {\n\t\t\t\tzfound = GF_TRUE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t\tif (!zfound) {\n\t\t\te = GF_ISOM_INVALID_FILE;\n\t\t\tgoto exit;\n\t\t}\n\t\tif (j) {\n\t\t\tgf_list_insert(ptr->server_entry_table, gf_strdup(tmp_str), i);\n\t\t}\n\t}\n\tif (ptr->server_entry_count != gf_list_count(ptr->server_entry_table)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->quality_entry_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->quality_entry_count; i++) {\n\t\tint j=0;\n\t\tzfound = GF_FALSE;\n\t\ttmp_strsize=(u32)ptr->size;\n\t\twhile (tmp_strsize) {\n\t\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\t\ttmp_str[j] = gf_bs_read_u8(bs);\n\t\t\ttmp_strsize--;\n\t\t\tif (!tmp_str[j]) {\n\t\t\t\tzfound = GF_TRUE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\n\t\tif (!zfound) {\n\t\t\te = GF_ISOM_INVALID_FILE;\n\t\t\tgoto exit;\n\t\t}\n\t\tif (j) {\n\t\t\tgf_list_insert(ptr->quality_entry_table, gf_strdup(tmp_str), i);\n\t\t}\n\t}\n\tif (ptr->quality_entry_count != gf_list_count(ptr->quality_entry_table)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\ti=0;\n\ttmp_strsize=(u32)ptr->size;\n\tzfound = GF_FALSE;\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tif (i) {\n\t\tptr->drm_data = gf_strdup(tmp_str);\n\t}\n\n\ti=0;\n\ttmp_strsize=(u32)ptr->size;\n\tzfound = GF_FALSE;\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tif (i) {\n\t\tptr->meta_data = gf_strdup(tmp_str);\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->segment_run_table_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->segment_run_table_count; i++) {\n\t\tGF_AdobeSegmentRunTableBox *asrt = NULL;\n\t\te = gf_isom_box_parse((GF_Box **)&asrt, bs);\n\t\tif (e) {\n\t\t\tif (asrt) gf_isom_box_del((GF_Box*)asrt);\n\t\t\tgoto exit;\n\t\t}\n\t\tgf_list_add(ptr->segment_run_table_entries, asrt);\n\t}\n\tif (ptr->segment_run_table_count != gf_list_count(ptr->segment_run_table_entries)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->fragment_run_table_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->fragment_run_table_count; i++) {\n\t\tGF_AdobeFragmentRunTableBox *afrt = NULL;\n\t\te = gf_isom_box_parse((GF_Box **)&afrt, bs);\n\t\tif (e) {\n\t\t\tif (afrt) gf_isom_box_del((GF_Box*)afrt);\n\t\t\tgoto exit;\n\t\t}\n\t\tgf_list_add(ptr->fragment_run_table_entries, afrt);\n\t}\n\tif (ptr->fragment_run_table_count != gf_list_count(ptr->fragment_run_table_entries)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\nexit:\n\tgf_free(tmp_str);\n\treturn e;\n}\n",
                            "caller_start": 76,
                            "file_path": "src/isomedia/box_code_adobe.c"
                        },
                        {
                            "type": "caller_info",
                            "call_line": 223,
                            "call_code": "ISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)",
                            "caller_code": "GF_Err abst_box_read(GF_Box *s, GF_BitStream *bs)\n{\n\tGF_AdobeBootstrapInfoBox *ptr = (GF_AdobeBootstrapInfoBox *)s;\n\tint i;\n\tu32 tmp_strsize;\n\tchar *tmp_str;\n\tBool zfound=GF_FALSE;\n\tGF_Err e = GF_OK;\n\n\tISOM_DECREASE_SIZE(ptr, 25)\n\tptr->bootstrapinfo_version = gf_bs_read_u32(bs);\n\tptr->profile = gf_bs_read_int(bs, 2);\n\tptr->live = gf_bs_read_int(bs, 1);\n\tptr->update = gf_bs_read_int(bs, 1);\n\tptr->reserved = gf_bs_read_int(bs, 4);\n\tptr->time_scale = gf_bs_read_u32(bs);\n\tptr->current_media_time = gf_bs_read_u64(bs);\n\tptr->smpte_time_code_offset = gf_bs_read_u64(bs);\n\n\ti=0;\n\tif (ptr->size<8) return GF_ISOM_INVALID_FILE;\n\ttmp_strsize =(u32)ptr->size;\n\ttmp_str = gf_malloc(sizeof(char)*(tmp_strsize+1));\n\tif (!tmp_str) return GF_OUT_OF_MEM;\n\tmemset(tmp_str, 0, sizeof(char)*(tmp_strsize+1) );\n\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\tif (i) {\n\t\tptr->movie_identifier = gf_strdup(tmp_str);\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->server_entry_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->server_entry_count; i++) {\n\t\tint j=0;\n\t\tzfound = GF_FALSE;\n\t\ttmp_strsize=(u32)ptr->size;\n\t\twhile (tmp_strsize) {\n\t\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\t\ttmp_str[j] = gf_bs_read_u8(bs);\n\t\t\ttmp_strsize--;\n\t\t\tif (!tmp_str[j]) {\n\t\t\t\tzfound = GF_TRUE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t\tif (!zfound) {\n\t\t\te = GF_ISOM_INVALID_FILE;\n\t\t\tgoto exit;\n\t\t}\n\t\tif (j) {\n\t\t\tgf_list_insert(ptr->server_entry_table, gf_strdup(tmp_str), i);\n\t\t}\n\t}\n\tif (ptr->server_entry_count != gf_list_count(ptr->server_entry_table)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->quality_entry_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->quality_entry_count; i++) {\n\t\tint j=0;\n\t\tzfound = GF_FALSE;\n\t\ttmp_strsize=(u32)ptr->size;\n\t\twhile (tmp_strsize) {\n\t\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\t\ttmp_str[j] = gf_bs_read_u8(bs);\n\t\t\ttmp_strsize--;\n\t\t\tif (!tmp_str[j]) {\n\t\t\t\tzfound = GF_TRUE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\n\t\tif (!zfound) {\n\t\t\te = GF_ISOM_INVALID_FILE;\n\t\t\tgoto exit;\n\t\t}\n\t\tif (j) {\n\t\t\tgf_list_insert(ptr->quality_entry_table, gf_strdup(tmp_str), i);\n\t\t}\n\t}\n\tif (ptr->quality_entry_count != gf_list_count(ptr->quality_entry_table)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\ti=0;\n\ttmp_strsize=(u32)ptr->size;\n\tzfound = GF_FALSE;\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tif (i) {\n\t\tptr->drm_data = gf_strdup(tmp_str);\n\t}\n\n\ti=0;\n\ttmp_strsize=(u32)ptr->size;\n\tzfound = GF_FALSE;\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tif (i) {\n\t\tptr->meta_data = gf_strdup(tmp_str);\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->segment_run_table_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->segment_run_table_count; i++) {\n\t\tGF_AdobeSegmentRunTableBox *asrt = NULL;\n\t\te = gf_isom_box_parse((GF_Box **)&asrt, bs);\n\t\tif (e) {\n\t\t\tif (asrt) gf_isom_box_del((GF_Box*)asrt);\n\t\t\tgoto exit;\n\t\t}\n\t\tgf_list_add(ptr->segment_run_table_entries, asrt);\n\t}\n\tif (ptr->segment_run_table_count != gf_list_count(ptr->segment_run_table_entries)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->fragment_run_table_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->fragment_run_table_count; i++) {\n\t\tGF_AdobeFragmentRunTableBox *afrt = NULL;\n\t\te = gf_isom_box_parse((GF_Box **)&afrt, bs);\n\t\tif (e) {\n\t\t\tif (afrt) gf_isom_box_del((GF_Box*)afrt);\n\t\t\tgoto exit;\n\t\t}\n\t\tgf_list_add(ptr->fragment_run_table_entries, afrt);\n\t}\n\tif (ptr->fragment_run_table_count != gf_list_count(ptr->fragment_run_table_entries)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\nexit:\n\tgf_free(tmp_str);\n\treturn e;\n}\n",
                            "caller_start": 76,
                            "file_path": "src/isomedia/box_code_adobe.c"
                        }
                    ]
                }
            ],
            "timestamp": "2025-05-29T20:00:02.202906"
        },
        {
            "stage": "analysis",
            "iteration": 1,
            "prompt": "You are a senior security engineer. Using **all available code context**, build the **complete, evidence-backed root-cause and trigger chain** for the vulnerability.\n\n## INPUTS\n- **Commit Message**: fixed #2307\n- **Vulnerability Description**: GPAC v2.1-DEV-rev428-gcb8ae46c8-master was discovered to contain a memory leak via the function dimC_box_read at isomedia/box_code_3gpp.c.\n- **Patch Code**: [{'func_name': 'dimC_box_read', 'patch': '--- func_before\\n+++ func_after\\n@@ -1048,5 +1048,6 @@\\n GF_Err dimC_box_read(GF_Box *s, GF_BitStream *bs)\\n {\\n+\\tGF_Err e = GF_OK;\\n \\tu32 i, msize;\\n \\tGF_DIMSSceneConfigBox *p = (GF_DIMSSceneConfigBox *)s;\\n \\n@@ -1065,7 +1066,7 @@\\n \\ti=0;\\n \\tstr[0]=0;\\n \\twhile (i < msize) {\\n-\\t\\tISOM_DECREASE_SIZE(p, 1);\\n+\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(p, 1);\\n \\t\\tstr[i] = gf_bs_read_u8(bs);\\n \\t\\tif (!str[i]) break;\\n \\t\\ti++;\\n@@ -1080,7 +1081,7 @@\\n \\ti=0;\\n \\tstr[0]=0;\\n \\twhile (i < msize) {\\n-\\t\\tISOM_DECREASE_SIZE(p, 1);\\n+\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(p, 1);\\n \\t\\tstr[i] = gf_bs_read_u8(bs);\\n \\t\\tif (!str[i]) break;\\n \\t\\ti++;\\n@@ -1095,4 +1096,8 @@\\n \\tif (!p->textEncoding || !p->contentEncoding)\\n \\t\\treturn GF_OUT_OF_MEM;\\n \\treturn GF_OK;\\n+\\n+exit:\\n+\\tgf_free(str);\\n+\\treturn e;\\n }', 'file_path': 'src/isomedia/box_code_3gpp.c'}]\n- **History Summary (all prior context & analysis)**: [\n  {\n    \"stage\": \"initial\",\n    \"result\": {\n      \"language\": \"c\",\n      \"vulnerability_type\": \"memory\",\n      \"repair_strategy\": \"The patch introduces an explicit 'exit' label with 'gf_free(str)' (box_code_3gpp.c:1096-1099) to ensure deallocation of the 'str' buffer. It replaces 'ISOM_DECREASE_SIZE' with 'ISOM_DECREASE_SIZE_GOTO_EXIT' (box_code_3gpp.c:1066,1081), which likely aborts processing on error and jumps to the cleanup label.\",\n      \"required_context\": [\n        \"function: ISOM_DECREASE_SIZE_GOTO_EXIT\"\n      ],\n      \"root_cause\": \"The original code failed to free 'str' when error conditions occurred during buffer reads. The patch adds 'gf_free(str)' at 'exit' (box_code_3gpp.c:1096) but relies on 'ISOM_DECREASE_SIZE_GOTO_EXIT' to trigger the error path. Without the macro's definition, the exact error propagation mechanism remains unclear.\"\n    }\n  },\n  {\n    \"stage\": \"collection\",\n    \"result\": [\n      {\n        \"source\": \"caller_info(func:ISOM_DECREASE_SIZE_GOTO_EXIT)\",\n        \"result\": [\n          {\n            \"call_line\": 103,\n            \"call_code\": \"ISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\",\n            \"caller_code\": \"GF_Err abst_box_read(GF_Box *s, GF_BitStream *bs)\\n{\\n\\tGF_AdobeBootstrapInfoBox *ptr = (GF_AdobeBootstrapInfoBox *)s;\\n\\tint i;\\n\\tu32 tmp_strsize;\\n\\tchar *tmp_str;\\n\\tBool zfound=GF_FALSE;\\n\\tGF_Err e = GF_OK;\\n\\n\\tISOM_DECREASE_SIZE(ptr, 25)\\n\\tptr->bootstrapinfo_version = gf_bs_read_u32(bs);\\n\\tptr->profile = gf_bs_read_int(bs, 2);\\n\\tptr->live = gf_bs_read_int(bs, 1);\\n\\tptr->update = gf_bs_read_int(bs, 1);\\n\\tptr->reserved = gf_bs_read_int(bs, 4);\\n\\tptr->time_scale = gf_bs_read_u32(bs);\\n\\tptr->current_media_time = gf_bs_read_u64(bs);\\n\\tptr->smpte_time_code_offset = gf_bs_read_u64(bs);\\n\\n\\ti=0;\\n\\tif (ptr->size<8) return GF_ISOM_INVALID_FILE;\\n\\ttmp_strsize =(u32)ptr->size;\\n\\ttmp_str = gf_malloc(sizeof(char)*(tmp_strsize+1));\\n\\tif (!tmp_str) return GF_OUT_OF_MEM;\\n\\tmemset(tmp_str, 0, sizeof(char)*(tmp_strsize+1) );\\n\\n\\twhile (tmp_strsize) {\\n\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\ttmp_str[i] = gf_bs_read_u8(bs);\\n\\t\\ttmp_strsize--;\\n\\t\\tif (!tmp_str[i]) {\\n\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\ti++;\\n\\t}\\n\\tif (!zfound) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\tif (i) {\\n\\t\\tptr->movie_identifier = gf_strdup(tmp_str);\\n\\t}\\n\\n\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\tptr->server_entry_count = gf_bs_read_u8(bs);\\n\\tfor (i=0; i<ptr->server_entry_count; i++) {\\n\\t\\tint j=0;\\n\\t\\tzfound = GF_FALSE;\\n\\t\\ttmp_strsize=(u32)ptr->size;\\n\\t\\twhile (tmp_strsize) {\\n\\t\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\t\\ttmp_str[j] = gf_bs_read_u8(bs);\\n\\t\\t\\ttmp_strsize--;\\n\\t\\t\\tif (!tmp_str[j]) {\\n\\t\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t\\tj++;\\n\\t\\t}\\n\\t\\tif (!zfound) {\\n\\t\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\t\\tgoto exit;\\n\\t\\t}\\n\\t\\tif (j) {\\n\\t\\t\\tgf_list_insert(ptr->server_entry_table, gf_strdup(tmp_str), i);\\n\\t\\t}\\n\\t}\\n\\tif (ptr->server_entry_count != gf_list_count(ptr->server_entry_table)) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\tptr->quality_entry_count = gf_bs_read_u8(bs);\\n\\tfor (i=0; i<ptr->quality_entry_count; i++) {\\n\\t\\tint j=0;\\n\\t\\tzfound = GF_FALSE;\\n\\t\\ttmp_strsize=(u32)ptr->size;\\n\\t\\twhile (tmp_strsize) {\\n\\t\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\t\\ttmp_str[j] = gf_bs_read_u8(bs);\\n\\t\\t\\ttmp_strsize--;\\n\\t\\t\\tif (!tmp_str[j]) {\\n\\t\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t\\tj++;\\n\\t\\t}\\n\\n\\t\\tif (!zfound) {\\n\\t\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\t\\tgoto exit;\\n\\t\\t}\\n\\t\\tif (j) {\\n\\t\\t\\tgf_list_insert(ptr->quality_entry_table, gf_strdup(tmp_str), i);\\n\\t\\t}\\n\\t}\\n\\tif (ptr->quality_entry_count != gf_list_count(ptr->quality_entry_table)) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\ti=0;\\n\\ttmp_strsize=(u32)ptr->size;\\n\\tzfound = GF_FALSE;\\n\\twhile (tmp_strsize) {\\n\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\ttmp_str[i] = gf_bs_read_u8(bs);\\n\\t\\ttmp_strsize--;\\n\\t\\tif (!tmp_str[i]) {\\n\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\ti++;\\n\\t}\\n\\tif (!zfound) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\tif (i) {\\n\\t\\tptr->drm_data = gf_strdup(tmp_str);\\n\\t}\\n\\n\\ti=0;\\n\\ttmp_strsize=(u32)ptr->size;\\n\\tzfound = GF_FALSE;\\n\\twhile (tmp_strsize) {\\n\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\ttmp_str[i] = gf_bs_read_u8(bs);\\n\\t\\ttmp_strsize--;\\n\\t\\tif (!tmp_str[i]) {\\n\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\ti++;\\n\\t}\\n\\tif (!zfound) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\tif (i) {\\n\\t\\tptr->meta_data = gf_strdup(tmp_str);\\n\\t}\\n\\n\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\tptr->segment_run_table_count = gf_bs_read_u8(bs);\\n\\tfor (i=0; i<ptr->segment_run_table_count; i++) {\\n\\t\\tGF_AdobeSegmentRunTableBox *asrt = NULL;\\n\\t\\te = gf_isom_box_parse((GF_Box **)&asrt, bs);\\n\\t\\tif (e) {\\n\\t\\t\\tif (asrt) gf_isom_box_del((GF_Box*)asrt);\\n\\t\\t\\tgoto exit;\\n\\t\\t}\\n\\t\\tgf_list_add(ptr->segment_run_table_entries, asrt);\\n\\t}\\n\\tif (ptr->segment_run_table_count != gf_list_count(ptr->segment_run_table_entries)) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\tptr->fragment_run_table_count = gf_bs_read_u8(bs);\\n\\tfor (i=0; i<ptr->fragment_run_table_count; i++) {\\n\\t\\tGF_AdobeFragmentRunTableBox *afrt = NULL;\\n\\t\\te = gf_isom_box_parse((GF_Box **)&afrt, bs);\\n\\t\\tif (e) {\\n\\t\\t\\tif (afrt) gf_isom_box_del((GF_Box*)afrt);\\n\\t\\t\\tgoto exit;\\n\\t\\t}\\n\\t\\tgf_list_add(ptr->fragment_run_table_entries, afrt);\\n\\t}\\n\\tif (ptr->fragment_run_table_count != gf_list_count(ptr->fragment_run_table_entries)) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\nexit:\\n\\tgf_free(tmp_str);\\n\\treturn e;\\n}\\n\",\n            \"caller_start\": 76,\n            \"file_path\": \"src/isomedia/box_code_adobe.c\"\n          },\n          {\n            \"call_line\": 120,\n            \"call_code\": \"ISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\",\n            \"caller_code\": \"GF_Err abst_box_read(GF_Box *s, GF_BitStream *bs)\\n{\\n\\tGF_AdobeBootstrapInfoBox *ptr = (GF_AdobeBootstrapInfoBox *)s;\\n\\tint i;\\n\\tu32 tmp_strsize;\\n\\tchar *tmp_str;\\n\\tBool zfound=GF_FALSE;\\n\\tGF_Err e = GF_OK;\\n\\n\\tISOM_DECREASE_SIZE(ptr, 25)\\n\\tptr->bootstrapinfo_version = gf_bs_read_u32(bs);\\n\\tptr->profile = gf_bs_read_int(bs, 2);\\n\\tptr->live = gf_bs_read_int(bs, 1);\\n\\tptr->update = gf_bs_read_int(bs, 1);\\n\\tptr->reserved = gf_bs_read_int(bs, 4);\\n\\tptr->time_scale = gf_bs_read_u32(bs);\\n\\tptr->current_media_time = gf_bs_read_u64(bs);\\n\\tptr->smpte_time_code_offset = gf_bs_read_u64(bs);\\n\\n\\ti=0;\\n\\tif (ptr->size<8) return GF_ISOM_INVALID_FILE;\\n\\ttmp_strsize =(u32)ptr->size;\\n\\ttmp_str = gf_malloc(sizeof(char)*(tmp_strsize+1));\\n\\tif (!tmp_str) return GF_OUT_OF_MEM;\\n\\tmemset(tmp_str, 0, sizeof(char)*(tmp_strsize+1) );\\n\\n\\twhile (tmp_strsize) {\\n\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\ttmp_str[i] = gf_bs_read_u8(bs);\\n\\t\\ttmp_strsize--;\\n\\t\\tif (!tmp_str[i]) {\\n\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\ti++;\\n\\t}\\n\\tif (!zfound) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\tif (i) {\\n\\t\\tptr->movie_identifier = gf_strdup(tmp_str);\\n\\t}\\n\\n\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\tptr->server_entry_count = gf_bs_read_u8(bs);\\n\\tfor (i=0; i<ptr->server_entry_count; i++) {\\n\\t\\tint j=0;\\n\\t\\tzfound = GF_FALSE;\\n\\t\\ttmp_strsize=(u32)ptr->size;\\n\\t\\twhile (tmp_strsize) {\\n\\t\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\t\\ttmp_str[j] = gf_bs_read_u8(bs);\\n\\t\\t\\ttmp_strsize--;\\n\\t\\t\\tif (!tmp_str[j]) {\\n\\t\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t\\tj++;\\n\\t\\t}\\n\\t\\tif (!zfound) {\\n\\t\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\t\\tgoto exit;\\n\\t\\t}\\n\\t\\tif (j) {\\n\\t\\t\\tgf_list_insert(ptr->server_entry_table, gf_strdup(tmp_str), i);\\n\\t\\t}\\n\\t}\\n\\tif (ptr->server_entry_count != gf_list_count(ptr->server_entry_table)) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\tptr->quality_entry_count = gf_bs_read_u8(bs);\\n\\tfor (i=0; i<ptr->quality_entry_count; i++) {\\n\\t\\tint j=0;\\n\\t\\tzfound = GF_FALSE;\\n\\t\\ttmp_strsize=(u32)ptr->size;\\n\\t\\twhile (tmp_strsize) {\\n\\t\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\t\\ttmp_str[j] = gf_bs_read_u8(bs);\\n\\t\\t\\ttmp_strsize--;\\n\\t\\t\\tif (!tmp_str[j]) {\\n\\t\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t\\tj++;\\n\\t\\t}\\n\\n\\t\\tif (!zfound) {\\n\\t\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\t\\tgoto exit;\\n\\t\\t}\\n\\t\\tif (j) {\\n\\t\\t\\tgf_list_insert(ptr->quality_entry_table, gf_strdup(tmp_str), i);\\n\\t\\t}\\n\\t}\\n\\tif (ptr->quality_entry_count != gf_list_count(ptr->quality_entry_table)) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\ti=0;\\n\\ttmp_strsize=(u32)ptr->size;\\n\\tzfound = GF_FALSE;\\n\\twhile (tmp_strsize) {\\n\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\ttmp_str[i] = gf_bs_read_u8(bs);\\n\\t\\ttmp_strsize--;\\n\\t\\tif (!tmp_str[i]) {\\n\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\ti++;\\n\\t}\\n\\tif (!zfound) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\tif (i) {\\n\\t\\tptr->drm_data = gf_strdup(tmp_str);\\n\\t}\\n\\n\\ti=0;\\n\\ttmp_strsize=(u32)ptr->size;\\n\\tzfound = GF_FALSE;\\n\\twhile (tmp_strsize) {\\n\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\ttmp_str[i] = gf_bs_read_u8(bs);\\n\\t\\ttmp_strsize--;\\n\\t\\tif (!tmp_str[i]) {\\n\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\ti++;\\n\\t}\\n\\tif (!zfound) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\tif (i) {\\n\\t\\tptr->meta_data = gf_strdup(tmp_str);\\n\\t}\\n\\n\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\tptr->segment_run_table_count = gf_bs_read_u8(bs);\\n\\tfor (i=0; i<ptr->segment_run_table_count; i++) {\\n\\t\\tGF_AdobeSegmentRunTableBox *asrt = NULL;\\n\\t\\te = gf_isom_box_parse((GF_Box **)&asrt, bs);\\n\\t\\tif (e) {\\n\\t\\t\\tif (asrt) gf_isom_box_del((GF_Box*)asrt);\\n\\t\\t\\tgoto exit;\\n\\t\\t}\\n\\t\\tgf_list_add(ptr->segment_run_table_entries, asrt);\\n\\t}\\n\\tif (ptr->segment_run_table_count != gf_list_count(ptr->segment_run_table_entries)) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\tptr->fragment_run_table_count = gf_bs_read_u8(bs);\\n\\tfor (i=0; i<ptr->fragment_run_table_count; i++) {\\n\\t\\tGF_AdobeFragmentRunTableBox *afrt = NULL;\\n\\t\\te = gf_isom_box_parse((GF_Box **)&afrt, bs);\\n\\t\\tif (e) {\\n\\t\\t\\tif (afrt) gf_isom_box_del((GF_Box*)afrt);\\n\\t\\t\\tgoto exit;\\n\\t\\t}\\n\\t\\tgf_list_add(ptr->fragment_run_table_entries, afrt);\\n\\t}\\n\\tif (ptr->fragment_run_table_count != gf_list_count(ptr->fragment_run_table_entries)) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\nexit:\\n\\tgf_free(tmp_str);\\n\\treturn e;\\n}\\n\",\n            \"caller_start\": 76,\n            \"file_path\": \"src/isomedia/box_code_adobe.c\"\n          },\n          {\n            \"call_line\": 127,\n            \"call_code\": \"ISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\",\n            \"caller_code\": \"GF_Err abst_box_read(GF_Box *s, GF_BitStream *bs)\\n{\\n\\tGF_AdobeBootstrapInfoBox *ptr = (GF_AdobeBootstrapInfoBox *)s;\\n\\tint i;\\n\\tu32 tmp_strsize;\\n\\tchar *tmp_str;\\n\\tBool zfound=GF_FALSE;\\n\\tGF_Err e = GF_OK;\\n\\n\\tISOM_DECREASE_SIZE(ptr, 25)\\n\\tptr->bootstrapinfo_version = gf_bs_read_u32(bs);\\n\\tptr->profile = gf_bs_read_int(bs, 2);\\n\\tptr->live = gf_bs_read_int(bs, 1);\\n\\tptr->update = gf_bs_read_int(bs, 1);\\n\\tptr->reserved = gf_bs_read_int(bs, 4);\\n\\tptr->time_scale = gf_bs_read_u32(bs);\\n\\tptr->current_media_time = gf_bs_read_u64(bs);\\n\\tptr->smpte_time_code_offset = gf_bs_read_u64(bs);\\n\\n\\ti=0;\\n\\tif (ptr->size<8) return GF_ISOM_INVALID_FILE;\\n\\ttmp_strsize =(u32)ptr->size;\\n\\ttmp_str = gf_malloc(sizeof(char)*(tmp_strsize+1));\\n\\tif (!tmp_str) return GF_OUT_OF_MEM;\\n\\tmemset(tmp_str, 0, sizeof(char)*(tmp_strsize+1) );\\n\\n\\twhile (tmp_strsize) {\\n\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\ttmp_str[i] = gf_bs_read_u8(bs);\\n\\t\\ttmp_strsize--;\\n\\t\\tif (!tmp_str[i]) {\\n\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\ti++;\\n\\t}\\n\\tif (!zfound) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\tif (i) {\\n\\t\\tptr->movie_identifier = gf_strdup(tmp_str);\\n\\t}\\n\\n\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\tptr->server_entry_count = gf_bs_read_u8(bs);\\n\\tfor (i=0; i<ptr->server_entry_count; i++) {\\n\\t\\tint j=0;\\n\\t\\tzfound = GF_FALSE;\\n\\t\\ttmp_strsize=(u32)ptr->size;\\n\\t\\twhile (tmp_strsize) {\\n\\t\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\t\\ttmp_str[j] = gf_bs_read_u8(bs);\\n\\t\\t\\ttmp_strsize--;\\n\\t\\t\\tif (!tmp_str[j]) {\\n\\t\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t\\tj++;\\n\\t\\t}\\n\\t\\tif (!zfound) {\\n\\t\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\t\\tgoto exit;\\n\\t\\t}\\n\\t\\tif (j) {\\n\\t\\t\\tgf_list_insert(ptr->server_entry_table, gf_strdup(tmp_str), i);\\n\\t\\t}\\n\\t}\\n\\tif (ptr->server_entry_count != gf_list_count(ptr->server_entry_table)) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\tptr->quality_entry_count = gf_bs_read_u8(bs);\\n\\tfor (i=0; i<ptr->quality_entry_count; i++) {\\n\\t\\tint j=0;\\n\\t\\tzfound = GF_FALSE;\\n\\t\\ttmp_strsize=(u32)ptr->size;\\n\\t\\twhile (tmp_strsize) {\\n\\t\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\t\\ttmp_str[j] = gf_bs_read_u8(bs);\\n\\t\\t\\ttmp_strsize--;\\n\\t\\t\\tif (!tmp_str[j]) {\\n\\t\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t\\tj++;\\n\\t\\t}\\n\\n\\t\\tif (!zfound) {\\n\\t\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\t\\tgoto exit;\\n\\t\\t}\\n\\t\\tif (j) {\\n\\t\\t\\tgf_list_insert(ptr->quality_entry_table, gf_strdup(tmp_str), i);\\n\\t\\t}\\n\\t}\\n\\tif (ptr->quality_entry_count != gf_list_count(ptr->quality_entry_table)) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\ti=0;\\n\\ttmp_strsize=(u32)ptr->size;\\n\\tzfound = GF_FALSE;\\n\\twhile (tmp_strsize) {\\n\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\ttmp_str[i] = gf_bs_read_u8(bs);\\n\\t\\ttmp_strsize--;\\n\\t\\tif (!tmp_str[i]) {\\n\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\ti++;\\n\\t}\\n\\tif (!zfound) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\tif (i) {\\n\\t\\tptr->drm_data = gf_strdup(tmp_str);\\n\\t}\\n\\n\\ti=0;\\n\\ttmp_strsize=(u32)ptr->size;\\n\\tzfound = GF_FALSE;\\n\\twhile (tmp_strsize) {\\n\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\ttmp_str[i] = gf_bs_read_u8(bs);\\n\\t\\ttmp_strsize--;\\n\\t\\tif (!tmp_str[i]) {\\n\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\ti++;\\n\\t}\\n\\tif (!zfound) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\tif (i) {\\n\\t\\tptr->meta_data = gf_strdup(tmp_str);\\n\\t}\\n\\n\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\tptr->segment_run_table_count = gf_bs_read_u8(bs);\\n\\tfor (i=0; i<ptr->segment_run_table_count; i++) {\\n\\t\\tGF_AdobeSegmentRunTableBox *asrt = NULL;\\n\\t\\te = gf_isom_box_parse((GF_Box **)&asrt, bs);\\n\\t\\tif (e) {\\n\\t\\t\\tif (asrt) gf_isom_box_del((GF_Box*)asrt);\\n\\t\\t\\tgoto exit;\\n\\t\\t}\\n\\t\\tgf_list_add(ptr->segment_run_table_entries, asrt);\\n\\t}\\n\\tif (ptr->segment_run_table_count != gf_list_count(ptr->segment_run_table_entries)) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\tptr->fragment_run_table_count = gf_bs_read_u8(bs);\\n\\tfor (i=0; i<ptr->fragment_run_table_count; i++) {\\n\\t\\tGF_AdobeFragmentRunTableBox *afrt = NULL;\\n\\t\\te = gf_isom_box_parse((GF_Box **)&afrt, bs);\\n\\t\\tif (e) {\\n\\t\\t\\tif (afrt) gf_isom_box_del((GF_Box*)afrt);\\n\\t\\t\\tgoto exit;\\n\\t\\t}\\n\\t\\tgf_list_add(ptr->fragment_run_table_entries, afrt);\\n\\t}\\n\\tif (ptr->fragment_run_table_count != gf_list_count(ptr->fragment_run_table_entries)) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\nexit:\\n\\tgf_free(tmp_str);\\n\\treturn e;\\n}\\n\",\n            \"caller_start\": 76,\n            \"file_path\": \"src/isomedia/box_code_adobe.c\"\n          },\n          {\n            \"call_line\": 149,\n            \"call_code\": \"ISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\",\n            \"caller_code\": \"GF_Err abst_box_read(GF_Box *s, GF_BitStream *bs)\\n{\\n\\tGF_AdobeBootstrapInfoBox *ptr = (GF_AdobeBootstrapInfoBox *)s;\\n\\tint i;\\n\\tu32 tmp_strsize;\\n\\tchar *tmp_str;\\n\\tBool zfound=GF_FALSE;\\n\\tGF_Err e = GF_OK;\\n\\n\\tISOM_DECREASE_SIZE(ptr, 25)\\n\\tptr->bootstrapinfo_version = gf_bs_read_u32(bs);\\n\\tptr->profile = gf_bs_read_int(bs, 2);\\n\\tptr->live = gf_bs_read_int(bs, 1);\\n\\tptr->update = gf_bs_read_int(bs, 1);\\n\\tptr->reserved = gf_bs_read_int(bs, 4);\\n\\tptr->time_scale = gf_bs_read_u32(bs);\\n\\tptr->current_media_time = gf_bs_read_u64(bs);\\n\\tptr->smpte_time_code_offset = gf_bs_read_u64(bs);\\n\\n\\ti=0;\\n\\tif (ptr->size<8) return GF_ISOM_INVALID_FILE;\\n\\ttmp_strsize =(u32)ptr->size;\\n\\ttmp_str = gf_malloc(sizeof(char)*(tmp_strsize+1));\\n\\tif (!tmp_str) return GF_OUT_OF_MEM;\\n\\tmemset(tmp_str, 0, sizeof(char)*(tmp_strsize+1) );\\n\\n\\twhile (tmp_strsize) {\\n\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\ttmp_str[i] = gf_bs_read_u8(bs);\\n\\t\\ttmp_strsize--;\\n\\t\\tif (!tmp_str[i]) {\\n\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\ti++;\\n\\t}\\n\\tif (!zfound) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\tif (i) {\\n\\t\\tptr->movie_identifier = gf_strdup(tmp_str);\\n\\t}\\n\\n\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\tptr->server_entry_count = gf_bs_read_u8(bs);\\n\\tfor (i=0; i<ptr->server_entry_count; i++) {\\n\\t\\tint j=0;\\n\\t\\tzfound = GF_FALSE;\\n\\t\\ttmp_strsize=(u32)ptr->size;\\n\\t\\twhile (tmp_strsize) {\\n\\t\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\t\\ttmp_str[j] = gf_bs_read_u8(bs);\\n\\t\\t\\ttmp_strsize--;\\n\\t\\t\\tif (!tmp_str[j]) {\\n\\t\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t\\tj++;\\n\\t\\t}\\n\\t\\tif (!zfound) {\\n\\t\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\t\\tgoto exit;\\n\\t\\t}\\n\\t\\tif (j) {\\n\\t\\t\\tgf_list_insert(ptr->server_entry_table, gf_strdup(tmp_str), i);\\n\\t\\t}\\n\\t}\\n\\tif (ptr->server_entry_count != gf_list_count(ptr->server_entry_table)) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\tptr->quality_entry_count = gf_bs_read_u8(bs);\\n\\tfor (i=0; i<ptr->quality_entry_count; i++) {\\n\\t\\tint j=0;\\n\\t\\tzfound = GF_FALSE;\\n\\t\\ttmp_strsize=(u32)ptr->size;\\n\\t\\twhile (tmp_strsize) {\\n\\t\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\t\\ttmp_str[j] = gf_bs_read_u8(bs);\\n\\t\\t\\ttmp_strsize--;\\n\\t\\t\\tif (!tmp_str[j]) {\\n\\t\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t\\tj++;\\n\\t\\t}\\n\\n\\t\\tif (!zfound) {\\n\\t\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\t\\tgoto exit;\\n\\t\\t}\\n\\t\\tif (j) {\\n\\t\\t\\tgf_list_insert(ptr->quality_entry_table, gf_strdup(tmp_str), i);\\n\\t\\t}\\n\\t}\\n\\tif (ptr->quality_entry_count != gf_list_count(ptr->quality_entry_table)) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\ti=0;\\n\\ttmp_strsize=(u32)ptr->size;\\n\\tzfound = GF_FALSE;\\n\\twhile (tmp_strsize) {\\n\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\ttmp_str[i] = gf_bs_read_u8(bs);\\n\\t\\ttmp_strsize--;\\n\\t\\tif (!tmp_str[i]) {\\n\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\ti++;\\n\\t}\\n\\tif (!zfound) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\tif (i) {\\n\\t\\tptr->drm_data = gf_strdup(tmp_str);\\n\\t}\\n\\n\\ti=0;\\n\\ttmp_strsize=(u32)ptr->size;\\n\\tzfound = GF_FALSE;\\n\\twhile (tmp_strsize) {\\n\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\ttmp_str[i] = gf_bs_read_u8(bs);\\n\\t\\ttmp_strsize--;\\n\\t\\tif (!tmp_str[i]) {\\n\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\ti++;\\n\\t}\\n\\tif (!zfound) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\tif (i) {\\n\\t\\tptr->meta_data = gf_strdup(tmp_str);\\n\\t}\\n\\n\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\tptr->segment_run_table_count = gf_bs_read_u8(bs);\\n\\tfor (i=0; i<ptr->segment_run_table_count; i++) {\\n\\t\\tGF_AdobeSegmentRunTableBox *asrt = NULL;\\n\\t\\te = gf_isom_box_parse((GF_Box **)&asrt, bs);\\n\\t\\tif (e) {\\n\\t\\t\\tif (asrt) gf_isom_box_del((GF_Box*)asrt);\\n\\t\\t\\tgoto exit;\\n\\t\\t}\\n\\t\\tgf_list_add(ptr->segment_run_table_entries, asrt);\\n\\t}\\n\\tif (ptr->segment_run_table_count != gf_list_count(ptr->segment_run_table_entries)) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\tptr->fragment_run_table_count = gf_bs_read_u8(bs);\\n\\tfor (i=0; i<ptr->fragment_run_table_count; i++) {\\n\\t\\tGF_AdobeFragmentRunTableBox *afrt = NULL;\\n\\t\\te = gf_isom_box_parse((GF_Box **)&afrt, bs);\\n\\t\\tif (e) {\\n\\t\\t\\tif (afrt) gf_isom_box_del((GF_Box*)afrt);\\n\\t\\t\\tgoto exit;\\n\\t\\t}\\n\\t\\tgf_list_add(ptr->fragment_run_table_entries, afrt);\\n\\t}\\n\\tif (ptr->fragment_run_table_count != gf_list_count(ptr->fragment_run_table_entries)) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\nexit:\\n\\tgf_free(tmp_str);\\n\\treturn e;\\n}\\n\",\n            \"caller_start\": 76,\n            \"file_path\": \"src/isomedia/box_code_adobe.c\"\n          },\n          {\n            \"call_line\": 156,\n            \"call_code\": \"ISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\",\n            \"caller_code\": \"GF_Err abst_box_read(GF_Box *s, GF_BitStream *bs)\\n{\\n\\tGF_AdobeBootstrapInfoBox *ptr = (GF_AdobeBootstrapInfoBox *)s;\\n\\tint i;\\n\\tu32 tmp_strsize;\\n\\tchar *tmp_str;\\n\\tBool zfound=GF_FALSE;\\n\\tGF_Err e = GF_OK;\\n\\n\\tISOM_DECREASE_SIZE(ptr, 25)\\n\\tptr->bootstrapinfo_version = gf_bs_read_u32(bs);\\n\\tptr->profile = gf_bs_read_int(bs, 2);\\n\\tptr->live = gf_bs_read_int(bs, 1);\\n\\tptr->update = gf_bs_read_int(bs, 1);\\n\\tptr->reserved = gf_bs_read_int(bs, 4);\\n\\tptr->time_scale = gf_bs_read_u32(bs);\\n\\tptr->current_media_time = gf_bs_read_u64(bs);\\n\\tptr->smpte_time_code_offset = gf_bs_read_u64(bs);\\n\\n\\ti=0;\\n\\tif (ptr->size<8) return GF_ISOM_INVALID_FILE;\\n\\ttmp_strsize =(u32)ptr->size;\\n\\ttmp_str = gf_malloc(sizeof(char)*(tmp_strsize+1));\\n\\tif (!tmp_str) return GF_OUT_OF_MEM;\\n\\tmemset(tmp_str, 0, sizeof(char)*(tmp_strsize+1) );\\n\\n\\twhile (tmp_strsize) {\\n\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\ttmp_str[i] = gf_bs_read_u8(bs);\\n\\t\\ttmp_strsize--;\\n\\t\\tif (!tmp_str[i]) {\\n\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\ti++;\\n\\t}\\n\\tif (!zfound) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\tif (i) {\\n\\t\\tptr->movie_identifier = gf_strdup(tmp_str);\\n\\t}\\n\\n\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\tptr->server_entry_count = gf_bs_read_u8(bs);\\n\\tfor (i=0; i<ptr->server_entry_count; i++) {\\n\\t\\tint j=0;\\n\\t\\tzfound = GF_FALSE;\\n\\t\\ttmp_strsize=(u32)ptr->size;\\n\\t\\twhile (tmp_strsize) {\\n\\t\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\t\\ttmp_str[j] = gf_bs_read_u8(bs);\\n\\t\\t\\ttmp_strsize--;\\n\\t\\t\\tif (!tmp_str[j]) {\\n\\t\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t\\tj++;\\n\\t\\t}\\n\\t\\tif (!zfound) {\\n\\t\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\t\\tgoto exit;\\n\\t\\t}\\n\\t\\tif (j) {\\n\\t\\t\\tgf_list_insert(ptr->server_entry_table, gf_strdup(tmp_str), i);\\n\\t\\t}\\n\\t}\\n\\tif (ptr->server_entry_count != gf_list_count(ptr->server_entry_table)) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\tptr->quality_entry_count = gf_bs_read_u8(bs);\\n\\tfor (i=0; i<ptr->quality_entry_count; i++) {\\n\\t\\tint j=0;\\n\\t\\tzfound = GF_FALSE;\\n\\t\\ttmp_strsize=(u32)ptr->size;\\n\\t\\twhile (tmp_strsize) {\\n\\t\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\t\\ttmp_str[j] = gf_bs_read_u8(bs);\\n\\t\\t\\ttmp_strsize--;\\n\\t\\t\\tif (!tmp_str[j]) {\\n\\t\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t\\tj++;\\n\\t\\t}\\n\\n\\t\\tif (!zfound) {\\n\\t\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\t\\tgoto exit;\\n\\t\\t}\\n\\t\\tif (j) {\\n\\t\\t\\tgf_list_insert(ptr->quality_entry_table, gf_strdup(tmp_str), i);\\n\\t\\t}\\n\\t}\\n\\tif (ptr->quality_entry_count != gf_list_count(ptr->quality_entry_table)) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\ti=0;\\n\\ttmp_strsize=(u32)ptr->size;\\n\\tzfound = GF_FALSE;\\n\\twhile (tmp_strsize) {\\n\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\ttmp_str[i] = gf_bs_read_u8(bs);\\n\\t\\ttmp_strsize--;\\n\\t\\tif (!tmp_str[i]) {\\n\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\ti++;\\n\\t}\\n\\tif (!zfound) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\tif (i) {\\n\\t\\tptr->drm_data = gf_strdup(tmp_str);\\n\\t}\\n\\n\\ti=0;\\n\\ttmp_strsize=(u32)ptr->size;\\n\\tzfound = GF_FALSE;\\n\\twhile (tmp_strsize) {\\n\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\ttmp_str[i] = gf_bs_read_u8(bs);\\n\\t\\ttmp_strsize--;\\n\\t\\tif (!tmp_str[i]) {\\n\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\ti++;\\n\\t}\\n\\tif (!zfound) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\tif (i) {\\n\\t\\tptr->meta_data = gf_strdup(tmp_str);\\n\\t}\\n\\n\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\tptr->segment_run_table_count = gf_bs_read_u8(bs);\\n\\tfor (i=0; i<ptr->segment_run_table_count; i++) {\\n\\t\\tGF_AdobeSegmentRunTableBox *asrt = NULL;\\n\\t\\te = gf_isom_box_parse((GF_Box **)&asrt, bs);\\n\\t\\tif (e) {\\n\\t\\t\\tif (asrt) gf_isom_box_del((GF_Box*)asrt);\\n\\t\\t\\tgoto exit;\\n\\t\\t}\\n\\t\\tgf_list_add(ptr->segment_run_table_entries, asrt);\\n\\t}\\n\\tif (ptr->segment_run_table_count != gf_list_count(ptr->segment_run_table_entries)) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\tptr->fragment_run_table_count = gf_bs_read_u8(bs);\\n\\tfor (i=0; i<ptr->fragment_run_table_count; i++) {\\n\\t\\tGF_AdobeFragmentRunTableBox *afrt = NULL;\\n\\t\\te = gf_isom_box_parse((GF_Box **)&afrt, bs);\\n\\t\\tif (e) {\\n\\t\\t\\tif (afrt) gf_isom_box_del((GF_Box*)afrt);\\n\\t\\t\\tgoto exit;\\n\\t\\t}\\n\\t\\tgf_list_add(ptr->fragment_run_table_entries, afrt);\\n\\t}\\n\\tif (ptr->fragment_run_table_count != gf_list_count(ptr->fragment_run_table_entries)) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\nexit:\\n\\tgf_free(tmp_str);\\n\\treturn e;\\n}\\n\",\n            \"caller_start\": 76,\n            \"file_path\": \"src/isomedia/box_code_adobe.c\"\n          },\n          {\n            \"call_line\": 183,\n            \"call_code\": \"ISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\",\n            \"caller_code\": \"GF_Err abst_box_read(GF_Box *s, GF_BitStream *bs)\\n{\\n\\tGF_AdobeBootstrapInfoBox *ptr = (GF_AdobeBootstrapInfoBox *)s;\\n\\tint i;\\n\\tu32 tmp_strsize;\\n\\tchar *tmp_str;\\n\\tBool zfound=GF_FALSE;\\n\\tGF_Err e = GF_OK;\\n\\n\\tISOM_DECREASE_SIZE(ptr, 25)\\n\\tptr->bootstrapinfo_version = gf_bs_read_u32(bs);\\n\\tptr->profile = gf_bs_read_int(bs, 2);\\n\\tptr->live = gf_bs_read_int(bs, 1);\\n\\tptr->update = gf_bs_read_int(bs, 1);\\n\\tptr->reserved = gf_bs_read_int(bs, 4);\\n\\tptr->time_scale = gf_bs_read_u32(bs);\\n\\tptr->current_media_time = gf_bs_read_u64(bs);\\n\\tptr->smpte_time_code_offset = gf_bs_read_u64(bs);\\n\\n\\ti=0;\\n\\tif (ptr->size<8) return GF_ISOM_INVALID_FILE;\\n\\ttmp_strsize =(u32)ptr->size;\\n\\ttmp_str = gf_malloc(sizeof(char)*(tmp_strsize+1));\\n\\tif (!tmp_str) return GF_OUT_OF_MEM;\\n\\tmemset(tmp_str, 0, sizeof(char)*(tmp_strsize+1) );\\n\\n\\twhile (tmp_strsize) {\\n\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\ttmp_str[i] = gf_bs_read_u8(bs);\\n\\t\\ttmp_strsize--;\\n\\t\\tif (!tmp_str[i]) {\\n\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\ti++;\\n\\t}\\n\\tif (!zfound) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\tif (i) {\\n\\t\\tptr->movie_identifier = gf_strdup(tmp_str);\\n\\t}\\n\\n\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\tptr->server_entry_count = gf_bs_read_u8(bs);\\n\\tfor (i=0; i<ptr->server_entry_count; i++) {\\n\\t\\tint j=0;\\n\\t\\tzfound = GF_FALSE;\\n\\t\\ttmp_strsize=(u32)ptr->size;\\n\\t\\twhile (tmp_strsize) {\\n\\t\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\t\\ttmp_str[j] = gf_bs_read_u8(bs);\\n\\t\\t\\ttmp_strsize--;\\n\\t\\t\\tif (!tmp_str[j]) {\\n\\t\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t\\tj++;\\n\\t\\t}\\n\\t\\tif (!zfound) {\\n\\t\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\t\\tgoto exit;\\n\\t\\t}\\n\\t\\tif (j) {\\n\\t\\t\\tgf_list_insert(ptr->server_entry_table, gf_strdup(tmp_str), i);\\n\\t\\t}\\n\\t}\\n\\tif (ptr->server_entry_count != gf_list_count(ptr->server_entry_table)) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\tptr->quality_entry_count = gf_bs_read_u8(bs);\\n\\tfor (i=0; i<ptr->quality_entry_count; i++) {\\n\\t\\tint j=0;\\n\\t\\tzfound = GF_FALSE;\\n\\t\\ttmp_strsize=(u32)ptr->size;\\n\\t\\twhile (tmp_strsize) {\\n\\t\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\t\\ttmp_str[j] = gf_bs_read_u8(bs);\\n\\t\\t\\ttmp_strsize--;\\n\\t\\t\\tif (!tmp_str[j]) {\\n\\t\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t\\tj++;\\n\\t\\t}\\n\\n\\t\\tif (!zfound) {\\n\\t\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\t\\tgoto exit;\\n\\t\\t}\\n\\t\\tif (j) {\\n\\t\\t\\tgf_list_insert(ptr->quality_entry_table, gf_strdup(tmp_str), i);\\n\\t\\t}\\n\\t}\\n\\tif (ptr->quality_entry_count != gf_list_count(ptr->quality_entry_table)) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\ti=0;\\n\\ttmp_strsize=(u32)ptr->size;\\n\\tzfound = GF_FALSE;\\n\\twhile (tmp_strsize) {\\n\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\ttmp_str[i] = gf_bs_read_u8(bs);\\n\\t\\ttmp_strsize--;\\n\\t\\tif (!tmp_str[i]) {\\n\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\ti++;\\n\\t}\\n\\tif (!zfound) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\tif (i) {\\n\\t\\tptr->drm_data = gf_strdup(tmp_str);\\n\\t}\\n\\n\\ti=0;\\n\\ttmp_strsize=(u32)ptr->size;\\n\\tzfound = GF_FALSE;\\n\\twhile (tmp_strsize) {\\n\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\ttmp_str[i] = gf_bs_read_u8(bs);\\n\\t\\ttmp_strsize--;\\n\\t\\tif (!tmp_str[i]) {\\n\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\ti++;\\n\\t}\\n\\tif (!zfound) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\tif (i) {\\n\\t\\tptr->meta_data = gf_strdup(tmp_str);\\n\\t}\\n\\n\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\tptr->segment_run_table_count = gf_bs_read_u8(bs);\\n\\tfor (i=0; i<ptr->segment_run_table_count; i++) {\\n\\t\\tGF_AdobeSegmentRunTableBox *asrt = NULL;\\n\\t\\te = gf_isom_box_parse((GF_Box **)&asrt, bs);\\n\\t\\tif (e) {\\n\\t\\t\\tif (asrt) gf_isom_box_del((GF_Box*)asrt);\\n\\t\\t\\tgoto exit;\\n\\t\\t}\\n\\t\\tgf_list_add(ptr->segment_run_table_entries, asrt);\\n\\t}\\n\\tif (ptr->segment_run_table_count != gf_list_count(ptr->segment_run_table_entries)) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\tptr->fragment_run_table_count = gf_bs_read_u8(bs);\\n\\tfor (i=0; i<ptr->fragment_run_table_count; i++) {\\n\\t\\tGF_AdobeFragmentRunTableBox *afrt = NULL;\\n\\t\\te = gf_isom_box_parse((GF_Box **)&afrt, bs);\\n\\t\\tif (e) {\\n\\t\\t\\tif (afrt) gf_isom_box_del((GF_Box*)afrt);\\n\\t\\t\\tgoto exit;\\n\\t\\t}\\n\\t\\tgf_list_add(ptr->fragment_run_table_entries, afrt);\\n\\t}\\n\\tif (ptr->fragment_run_table_count != gf_list_count(ptr->fragment_run_table_entries)) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\nexit:\\n\\tgf_free(tmp_str);\\n\\treturn e;\\n}\\n\",\n            \"caller_start\": 76,\n            \"file_path\": \"src/isomedia/box_code_adobe.c\"\n          },\n          {\n            \"call_line\": 205,\n            \"call_code\": \"ISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\",\n            \"caller_code\": \"GF_Err abst_box_read(GF_Box *s, GF_BitStream *bs)\\n{\\n\\tGF_AdobeBootstrapInfoBox *ptr = (GF_AdobeBootstrapInfoBox *)s;\\n\\tint i;\\n\\tu32 tmp_strsize;\\n\\tchar *tmp_str;\\n\\tBool zfound=GF_FALSE;\\n\\tGF_Err e = GF_OK;\\n\\n\\tISOM_DECREASE_SIZE(ptr, 25)\\n\\tptr->bootstrapinfo_version = gf_bs_read_u32(bs);\\n\\tptr->profile = gf_bs_read_int(bs, 2);\\n\\tptr->live = gf_bs_read_int(bs, 1);\\n\\tptr->update = gf_bs_read_int(bs, 1);\\n\\tptr->reserved = gf_bs_read_int(bs, 4);\\n\\tptr->time_scale = gf_bs_read_u32(bs);\\n\\tptr->current_media_time = gf_bs_read_u64(bs);\\n\\tptr->smpte_time_code_offset = gf_bs_read_u64(bs);\\n\\n\\ti=0;\\n\\tif (ptr->size<8) return GF_ISOM_INVALID_FILE;\\n\\ttmp_strsize =(u32)ptr->size;\\n\\ttmp_str = gf_malloc(sizeof(char)*(tmp_strsize+1));\\n\\tif (!tmp_str) return GF_OUT_OF_MEM;\\n\\tmemset(tmp_str, 0, sizeof(char)*(tmp_strsize+1) );\\n\\n\\twhile (tmp_strsize) {\\n\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\ttmp_str[i] = gf_bs_read_u8(bs);\\n\\t\\ttmp_strsize--;\\n\\t\\tif (!tmp_str[i]) {\\n\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\ti++;\\n\\t}\\n\\tif (!zfound) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\tif (i) {\\n\\t\\tptr->movie_identifier = gf_strdup(tmp_str);\\n\\t}\\n\\n\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\tptr->server_entry_count = gf_bs_read_u8(bs);\\n\\tfor (i=0; i<ptr->server_entry_count; i++) {\\n\\t\\tint j=0;\\n\\t\\tzfound = GF_FALSE;\\n\\t\\ttmp_strsize=(u32)ptr->size;\\n\\t\\twhile (tmp_strsize) {\\n\\t\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\t\\ttmp_str[j] = gf_bs_read_u8(bs);\\n\\t\\t\\ttmp_strsize--;\\n\\t\\t\\tif (!tmp_str[j]) {\\n\\t\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t\\tj++;\\n\\t\\t}\\n\\t\\tif (!zfound) {\\n\\t\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\t\\tgoto exit;\\n\\t\\t}\\n\\t\\tif (j) {\\n\\t\\t\\tgf_list_insert(ptr->server_entry_table, gf_strdup(tmp_str), i);\\n\\t\\t}\\n\\t}\\n\\tif (ptr->server_entry_count != gf_list_count(ptr->server_entry_table)) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\tptr->quality_entry_count = gf_bs_read_u8(bs);\\n\\tfor (i=0; i<ptr->quality_entry_count; i++) {\\n\\t\\tint j=0;\\n\\t\\tzfound = GF_FALSE;\\n\\t\\ttmp_strsize=(u32)ptr->size;\\n\\t\\twhile (tmp_strsize) {\\n\\t\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\t\\ttmp_str[j] = gf_bs_read_u8(bs);\\n\\t\\t\\ttmp_strsize--;\\n\\t\\t\\tif (!tmp_str[j]) {\\n\\t\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t\\tj++;\\n\\t\\t}\\n\\n\\t\\tif (!zfound) {\\n\\t\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\t\\tgoto exit;\\n\\t\\t}\\n\\t\\tif (j) {\\n\\t\\t\\tgf_list_insert(ptr->quality_entry_table, gf_strdup(tmp_str), i);\\n\\t\\t}\\n\\t}\\n\\tif (ptr->quality_entry_count != gf_list_count(ptr->quality_entry_table)) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\ti=0;\\n\\ttmp_strsize=(u32)ptr->size;\\n\\tzfound = GF_FALSE;\\n\\twhile (tmp_strsize) {\\n\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\ttmp_str[i] = gf_bs_read_u8(bs);\\n\\t\\ttmp_strsize--;\\n\\t\\tif (!tmp_str[i]) {\\n\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\ti++;\\n\\t}\\n\\tif (!zfound) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\tif (i) {\\n\\t\\tptr->drm_data = gf_strdup(tmp_str);\\n\\t}\\n\\n\\ti=0;\\n\\ttmp_strsize=(u32)ptr->size;\\n\\tzfound = GF_FALSE;\\n\\twhile (tmp_strsize) {\\n\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\ttmp_str[i] = gf_bs_read_u8(bs);\\n\\t\\ttmp_strsize--;\\n\\t\\tif (!tmp_str[i]) {\\n\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\ti++;\\n\\t}\\n\\tif (!zfound) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\tif (i) {\\n\\t\\tptr->meta_data = gf_strdup(tmp_str);\\n\\t}\\n\\n\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\tptr->segment_run_table_count = gf_bs_read_u8(bs);\\n\\tfor (i=0; i<ptr->segment_run_table_count; i++) {\\n\\t\\tGF_AdobeSegmentRunTableBox *asrt = NULL;\\n\\t\\te = gf_isom_box_parse((GF_Box **)&asrt, bs);\\n\\t\\tif (e) {\\n\\t\\t\\tif (asrt) gf_isom_box_del((GF_Box*)asrt);\\n\\t\\t\\tgoto exit;\\n\\t\\t}\\n\\t\\tgf_list_add(ptr->segment_run_table_entries, asrt);\\n\\t}\\n\\tif (ptr->segment_run_table_count != gf_list_count(ptr->segment_run_table_entries)) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\tptr->fragment_run_table_count = gf_bs_read_u8(bs);\\n\\tfor (i=0; i<ptr->fragment_run_table_count; i++) {\\n\\t\\tGF_AdobeFragmentRunTableBox *afrt = NULL;\\n\\t\\te = gf_isom_box_parse((GF_Box **)&afrt, bs);\\n\\t\\tif (e) {\\n\\t\\t\\tif (afrt) gf_isom_box_del((GF_Box*)afrt);\\n\\t\\t\\tgoto exit;\\n\\t\\t}\\n\\t\\tgf_list_add(ptr->fragment_run_table_entries, afrt);\\n\\t}\\n\\tif (ptr->fragment_run_table_count != gf_list_count(ptr->fragment_run_table_entries)) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\nexit:\\n\\tgf_free(tmp_str);\\n\\treturn e;\\n}\\n\",\n            \"caller_start\": 76,\n            \"file_path\": \"src/isomedia/box_code_adobe.c\"\n          },\n          {\n            \"call_line\": 223,\n            \"call_code\": \"ISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\",\n            \"caller_code\": \"GF_Err abst_box_read(GF_Box *s, GF_BitStream *bs)\\n{\\n\\tGF_AdobeBootstrapInfoBox *ptr = (GF_AdobeBootstrapInfoBox *)s;\\n\\tint i;\\n\\tu32 tmp_strsize;\\n\\tchar *tmp_str;\\n\\tBool zfound=GF_FALSE;\\n\\tGF_Err e = GF_OK;\\n\\n\\tISOM_DECREASE_SIZE(ptr, 25)\\n\\tptr->bootstrapinfo_version = gf_bs_read_u32(bs);\\n\\tptr->profile = gf_bs_read_int(bs, 2);\\n\\tptr->live = gf_bs_read_int(bs, 1);\\n\\tptr->update = gf_bs_read_int(bs, 1);\\n\\tptr->reserved = gf_bs_read_int(bs, 4);\\n\\tptr->time_scale = gf_bs_read_u32(bs);\\n\\tptr->current_media_time = gf_bs_read_u64(bs);\\n\\tptr->smpte_time_code_offset = gf_bs_read_u64(bs);\\n\\n\\ti=0;\\n\\tif (ptr->size<8) return GF_ISOM_INVALID_FILE;\\n\\ttmp_strsize =(u32)ptr->size;\\n\\ttmp_str = gf_malloc(sizeof(char)*(tmp_strsize+1));\\n\\tif (!tmp_str) return GF_OUT_OF_MEM;\\n\\tmemset(tmp_str, 0, sizeof(char)*(tmp_strsize+1) );\\n\\n\\twhile (tmp_strsize) {\\n\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\ttmp_str[i] = gf_bs_read_u8(bs);\\n\\t\\ttmp_strsize--;\\n\\t\\tif (!tmp_str[i]) {\\n\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\ti++;\\n\\t}\\n\\tif (!zfound) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\tif (i) {\\n\\t\\tptr->movie_identifier = gf_strdup(tmp_str);\\n\\t}\\n\\n\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\tptr->server_entry_count = gf_bs_read_u8(bs);\\n\\tfor (i=0; i<ptr->server_entry_count; i++) {\\n\\t\\tint j=0;\\n\\t\\tzfound = GF_FALSE;\\n\\t\\ttmp_strsize=(u32)ptr->size;\\n\\t\\twhile (tmp_strsize) {\\n\\t\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\t\\ttmp_str[j] = gf_bs_read_u8(bs);\\n\\t\\t\\ttmp_strsize--;\\n\\t\\t\\tif (!tmp_str[j]) {\\n\\t\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t\\tj++;\\n\\t\\t}\\n\\t\\tif (!zfound) {\\n\\t\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\t\\tgoto exit;\\n\\t\\t}\\n\\t\\tif (j) {\\n\\t\\t\\tgf_list_insert(ptr->server_entry_table, gf_strdup(tmp_str), i);\\n\\t\\t}\\n\\t}\\n\\tif (ptr->server_entry_count != gf_list_count(ptr->server_entry_table)) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\tptr->quality_entry_count = gf_bs_read_u8(bs);\\n\\tfor (i=0; i<ptr->quality_entry_count; i++) {\\n\\t\\tint j=0;\\n\\t\\tzfound = GF_FALSE;\\n\\t\\ttmp_strsize=(u32)ptr->size;\\n\\t\\twhile (tmp_strsize) {\\n\\t\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\t\\ttmp_str[j] = gf_bs_read_u8(bs);\\n\\t\\t\\ttmp_strsize--;\\n\\t\\t\\tif (!tmp_str[j]) {\\n\\t\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t\\tj++;\\n\\t\\t}\\n\\n\\t\\tif (!zfound) {\\n\\t\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\t\\tgoto exit;\\n\\t\\t}\\n\\t\\tif (j) {\\n\\t\\t\\tgf_list_insert(ptr->quality_entry_table, gf_strdup(tmp_str), i);\\n\\t\\t}\\n\\t}\\n\\tif (ptr->quality_entry_count != gf_list_count(ptr->quality_entry_table)) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\ti=0;\\n\\ttmp_strsize=(u32)ptr->size;\\n\\tzfound = GF_FALSE;\\n\\twhile (tmp_strsize) {\\n\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\ttmp_str[i] = gf_bs_read_u8(bs);\\n\\t\\ttmp_strsize--;\\n\\t\\tif (!tmp_str[i]) {\\n\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\ti++;\\n\\t}\\n\\tif (!zfound) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\tif (i) {\\n\\t\\tptr->drm_data = gf_strdup(tmp_str);\\n\\t}\\n\\n\\ti=0;\\n\\ttmp_strsize=(u32)ptr->size;\\n\\tzfound = GF_FALSE;\\n\\twhile (tmp_strsize) {\\n\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\ttmp_str[i] = gf_bs_read_u8(bs);\\n\\t\\ttmp_strsize--;\\n\\t\\tif (!tmp_str[i]) {\\n\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\ti++;\\n\\t}\\n\\tif (!zfound) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\tif (i) {\\n\\t\\tptr->meta_data = gf_strdup(tmp_str);\\n\\t}\\n\\n\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\tptr->segment_run_table_count = gf_bs_read_u8(bs);\\n\\tfor (i=0; i<ptr->segment_run_table_count; i++) {\\n\\t\\tGF_AdobeSegmentRunTableBox *asrt = NULL;\\n\\t\\te = gf_isom_box_parse((GF_Box **)&asrt, bs);\\n\\t\\tif (e) {\\n\\t\\t\\tif (asrt) gf_isom_box_del((GF_Box*)asrt);\\n\\t\\t\\tgoto exit;\\n\\t\\t}\\n\\t\\tgf_list_add(ptr->segment_run_table_entries, asrt);\\n\\t}\\n\\tif (ptr->segment_run_table_count != gf_list_count(ptr->segment_run_table_entries)) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\tptr->fragment_run_table_count = gf_bs_read_u8(bs);\\n\\tfor (i=0; i<ptr->fragment_run_table_count; i++) {\\n\\t\\tGF_AdobeFragmentRunTableBox *afrt = NULL;\\n\\t\\te = gf_isom_box_parse((GF_Box **)&afrt, bs);\\n\\t\\tif (e) {\\n\\t\\t\\tif (afrt) gf_isom_box_del((GF_Box*)afrt);\\n\\t\\t\\tgoto exit;\\n\\t\\t}\\n\\t\\tgf_list_add(ptr->fragment_run_table_entries, afrt);\\n\\t}\\n\\tif (ptr->fragment_run_table_count != gf_list_count(ptr->fragment_run_table_entries)) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\nexit:\\n\\tgf_free(tmp_str);\\n\\treturn e;\\n}\\n\",\n            \"caller_start\": 76,\n            \"file_path\": \"src/isomedia/box_code_adobe.c\"\n          }\n        ]\n      }\n    ]\n  }\n]\n\n## INSTRUCTIONS\n1. **Review & Integrate Context** \n  Review all `history_summary` (*incl. past analysis and request results*) \n\n2. **Extend Chain from Code**  \n   Trace calls / data flow step-by-step, citing `file:line` for each fact.  \n   Where evidence ends, insert  \n   `GAP: <why evidence stops>`.\n\n3. **Request Missing Context**  \n   If any critical gap remains:  \n     * Always request context and set `\"need_context\": true`. \n     * Add precise, non-duplicate requests to `\"required_context\"` using the following types:  \n      `function`, `caller`, `e.g. caller: I need the caller of function X in file Y`.\n      **DO NOT** request the new patch code.\n     * Try alternative parameters or request types for gaps previously unfulfilled.  \n   If the chain is fully evidenced, set `\"need_context\": false`.\n\n4. **Score Confidence**  \n   *Full chain with direct evidence* ≥ 0.90.  Incomplete chain ≤ 0.75.\n\n## OUTPUT  (JSON only, no trailing commas)\n  ```json\n  {\n      \"analysis\": \"Summary of iteration progress, remaining gaps, explanation for new context requests (if any). If complete, summarize the full chain.\",\n      \"need_context\": true/false, \n      \"required_context\": \"<list of precise context requests>\" ,\n      \"root_cause\": \"<Partial/complete trace with file:line evidence from ALL available context>\",\n      \"confidence_score\": 0.0-1.0\n      // attack_vectors added when confidence >= 0.90 AND need_context is False\n  }\n  ```\n  ## RULES\n  * Output must be valid JSON.\n  * **Source-of-Truth** – Only accept facts visible in code (file:line). Commit message & description are auxiliary.\n  * **Reject every hypothesis or inference** - When evidence is missing, always declare a GAP and request the needed context.\n  * **Tool Restriction** – `required_context` items **must** be of type `function` or `caller` only.\n  * **Stop Condition** – Terminate only when the trigger chain is fully evidenced from the patch; else continue requesting context.\n",
            "result": {
                "analysis": "The patch adds an 'exit' label with 'gf_free(str)' in dimC_box_read to ensure cleanup. It replaces 'ISOM_DECREASE_SIZE' with 'ISOM_DECREASE_SIZE_GOTO_EXIT' to trigger error paths leading to the cleanup label. However, the exact behavior of 'ISOM_DECREASE_SIZE_GOTO_EXIT' remains unclear without its macro definition. The root cause is the lack of 'str' deallocation on error conditions in the original code. To complete the chain, the macro definition of ISOM_DECREASE_SIZE_GOTO_EXIT is required.",
                "need_context": true,
                "required_context": [
                    "function: ISOM_DECREASE_SIZE_GOTO_EXIT"
                ],
                "root_cause": "Original code failed to free 'str' when error conditions occurred during buffer reads. Patch adds 'gf_free(str)' at 'exit' (box_code_3gpp.c:1096) but relies on 'ISOM_DECREASE_SIZE_GOTO_EXIT' (box_code_3gpp.c:1066,1081) to trigger error paths. Without the macro's definition, the exact error propagation mechanism remains unclear.",
                "confidence_score": 0.75
            },
            "timestamp": "2025-05-29T20:00:02.313879"
        },
        {
            "stage": "collection",
            "required_context": [
                "function: ISOM_DECREASE_SIZE_GOTO_EXIT"
            ],
            "results": [
                {
                    "tool": "caller_info.find_caller_for_func({'func_name': 'ISOM_DECREASE_SIZE_GOTO_EXIT', 'project_dir': './storage/result/Part2_result/github/CVE-2022-45204/old_repos/gpac-gpac_aa486c3'})",
                    "result": [
                        {
                            "type": "caller_info",
                            "call_line": 103,
                            "call_code": "ISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)",
                            "caller_code": "GF_Err abst_box_read(GF_Box *s, GF_BitStream *bs)\n{\n\tGF_AdobeBootstrapInfoBox *ptr = (GF_AdobeBootstrapInfoBox *)s;\n\tint i;\n\tu32 tmp_strsize;\n\tchar *tmp_str;\n\tBool zfound=GF_FALSE;\n\tGF_Err e = GF_OK;\n\n\tISOM_DECREASE_SIZE(ptr, 25)\n\tptr->bootstrapinfo_version = gf_bs_read_u32(bs);\n\tptr->profile = gf_bs_read_int(bs, 2);\n\tptr->live = gf_bs_read_int(bs, 1);\n\tptr->update = gf_bs_read_int(bs, 1);\n\tptr->reserved = gf_bs_read_int(bs, 4);\n\tptr->time_scale = gf_bs_read_u32(bs);\n\tptr->current_media_time = gf_bs_read_u64(bs);\n\tptr->smpte_time_code_offset = gf_bs_read_u64(bs);\n\n\ti=0;\n\tif (ptr->size<8) return GF_ISOM_INVALID_FILE;\n\ttmp_strsize =(u32)ptr->size;\n\ttmp_str = gf_malloc(sizeof(char)*(tmp_strsize+1));\n\tif (!tmp_str) return GF_OUT_OF_MEM;\n\tmemset(tmp_str, 0, sizeof(char)*(tmp_strsize+1) );\n\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\tif (i) {\n\t\tptr->movie_identifier = gf_strdup(tmp_str);\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->server_entry_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->server_entry_count; i++) {\n\t\tint j=0;\n\t\tzfound = GF_FALSE;\n\t\ttmp_strsize=(u32)ptr->size;\n\t\twhile (tmp_strsize) {\n\t\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\t\ttmp_str[j] = gf_bs_read_u8(bs);\n\t\t\ttmp_strsize--;\n\t\t\tif (!tmp_str[j]) {\n\t\t\t\tzfound = GF_TRUE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t\tif (!zfound) {\n\t\t\te = GF_ISOM_INVALID_FILE;\n\t\t\tgoto exit;\n\t\t}\n\t\tif (j) {\n\t\t\tgf_list_insert(ptr->server_entry_table, gf_strdup(tmp_str), i);\n\t\t}\n\t}\n\tif (ptr->server_entry_count != gf_list_count(ptr->server_entry_table)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->quality_entry_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->quality_entry_count; i++) {\n\t\tint j=0;\n\t\tzfound = GF_FALSE;\n\t\ttmp_strsize=(u32)ptr->size;\n\t\twhile (tmp_strsize) {\n\t\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\t\ttmp_str[j] = gf_bs_read_u8(bs);\n\t\t\ttmp_strsize--;\n\t\t\tif (!tmp_str[j]) {\n\t\t\t\tzfound = GF_TRUE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\n\t\tif (!zfound) {\n\t\t\te = GF_ISOM_INVALID_FILE;\n\t\t\tgoto exit;\n\t\t}\n\t\tif (j) {\n\t\t\tgf_list_insert(ptr->quality_entry_table, gf_strdup(tmp_str), i);\n\t\t}\n\t}\n\tif (ptr->quality_entry_count != gf_list_count(ptr->quality_entry_table)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\ti=0;\n\ttmp_strsize=(u32)ptr->size;\n\tzfound = GF_FALSE;\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tif (i) {\n\t\tptr->drm_data = gf_strdup(tmp_str);\n\t}\n\n\ti=0;\n\ttmp_strsize=(u32)ptr->size;\n\tzfound = GF_FALSE;\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tif (i) {\n\t\tptr->meta_data = gf_strdup(tmp_str);\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->segment_run_table_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->segment_run_table_count; i++) {\n\t\tGF_AdobeSegmentRunTableBox *asrt = NULL;\n\t\te = gf_isom_box_parse((GF_Box **)&asrt, bs);\n\t\tif (e) {\n\t\t\tif (asrt) gf_isom_box_del((GF_Box*)asrt);\n\t\t\tgoto exit;\n\t\t}\n\t\tgf_list_add(ptr->segment_run_table_entries, asrt);\n\t}\n\tif (ptr->segment_run_table_count != gf_list_count(ptr->segment_run_table_entries)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->fragment_run_table_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->fragment_run_table_count; i++) {\n\t\tGF_AdobeFragmentRunTableBox *afrt = NULL;\n\t\te = gf_isom_box_parse((GF_Box **)&afrt, bs);\n\t\tif (e) {\n\t\t\tif (afrt) gf_isom_box_del((GF_Box*)afrt);\n\t\t\tgoto exit;\n\t\t}\n\t\tgf_list_add(ptr->fragment_run_table_entries, afrt);\n\t}\n\tif (ptr->fragment_run_table_count != gf_list_count(ptr->fragment_run_table_entries)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\nexit:\n\tgf_free(tmp_str);\n\treturn e;\n}\n",
                            "caller_start": 76,
                            "file_path": "src/isomedia/box_code_adobe.c"
                        },
                        {
                            "type": "caller_info",
                            "call_line": 120,
                            "call_code": "ISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)",
                            "caller_code": "GF_Err abst_box_read(GF_Box *s, GF_BitStream *bs)\n{\n\tGF_AdobeBootstrapInfoBox *ptr = (GF_AdobeBootstrapInfoBox *)s;\n\tint i;\n\tu32 tmp_strsize;\n\tchar *tmp_str;\n\tBool zfound=GF_FALSE;\n\tGF_Err e = GF_OK;\n\n\tISOM_DECREASE_SIZE(ptr, 25)\n\tptr->bootstrapinfo_version = gf_bs_read_u32(bs);\n\tptr->profile = gf_bs_read_int(bs, 2);\n\tptr->live = gf_bs_read_int(bs, 1);\n\tptr->update = gf_bs_read_int(bs, 1);\n\tptr->reserved = gf_bs_read_int(bs, 4);\n\tptr->time_scale = gf_bs_read_u32(bs);\n\tptr->current_media_time = gf_bs_read_u64(bs);\n\tptr->smpte_time_code_offset = gf_bs_read_u64(bs);\n\n\ti=0;\n\tif (ptr->size<8) return GF_ISOM_INVALID_FILE;\n\ttmp_strsize =(u32)ptr->size;\n\ttmp_str = gf_malloc(sizeof(char)*(tmp_strsize+1));\n\tif (!tmp_str) return GF_OUT_OF_MEM;\n\tmemset(tmp_str, 0, sizeof(char)*(tmp_strsize+1) );\n\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\tif (i) {\n\t\tptr->movie_identifier = gf_strdup(tmp_str);\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->server_entry_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->server_entry_count; i++) {\n\t\tint j=0;\n\t\tzfound = GF_FALSE;\n\t\ttmp_strsize=(u32)ptr->size;\n\t\twhile (tmp_strsize) {\n\t\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\t\ttmp_str[j] = gf_bs_read_u8(bs);\n\t\t\ttmp_strsize--;\n\t\t\tif (!tmp_str[j]) {\n\t\t\t\tzfound = GF_TRUE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t\tif (!zfound) {\n\t\t\te = GF_ISOM_INVALID_FILE;\n\t\t\tgoto exit;\n\t\t}\n\t\tif (j) {\n\t\t\tgf_list_insert(ptr->server_entry_table, gf_strdup(tmp_str), i);\n\t\t}\n\t}\n\tif (ptr->server_entry_count != gf_list_count(ptr->server_entry_table)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->quality_entry_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->quality_entry_count; i++) {\n\t\tint j=0;\n\t\tzfound = GF_FALSE;\n\t\ttmp_strsize=(u32)ptr->size;\n\t\twhile (tmp_strsize) {\n\t\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\t\ttmp_str[j] = gf_bs_read_u8(bs);\n\t\t\ttmp_strsize--;\n\t\t\tif (!tmp_str[j]) {\n\t\t\t\tzfound = GF_TRUE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\n\t\tif (!zfound) {\n\t\t\te = GF_ISOM_INVALID_FILE;\n\t\t\tgoto exit;\n\t\t}\n\t\tif (j) {\n\t\t\tgf_list_insert(ptr->quality_entry_table, gf_strdup(tmp_str), i);\n\t\t}\n\t}\n\tif (ptr->quality_entry_count != gf_list_count(ptr->quality_entry_table)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\ti=0;\n\ttmp_strsize=(u32)ptr->size;\n\tzfound = GF_FALSE;\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tif (i) {\n\t\tptr->drm_data = gf_strdup(tmp_str);\n\t}\n\n\ti=0;\n\ttmp_strsize=(u32)ptr->size;\n\tzfound = GF_FALSE;\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tif (i) {\n\t\tptr->meta_data = gf_strdup(tmp_str);\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->segment_run_table_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->segment_run_table_count; i++) {\n\t\tGF_AdobeSegmentRunTableBox *asrt = NULL;\n\t\te = gf_isom_box_parse((GF_Box **)&asrt, bs);\n\t\tif (e) {\n\t\t\tif (asrt) gf_isom_box_del((GF_Box*)asrt);\n\t\t\tgoto exit;\n\t\t}\n\t\tgf_list_add(ptr->segment_run_table_entries, asrt);\n\t}\n\tif (ptr->segment_run_table_count != gf_list_count(ptr->segment_run_table_entries)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->fragment_run_table_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->fragment_run_table_count; i++) {\n\t\tGF_AdobeFragmentRunTableBox *afrt = NULL;\n\t\te = gf_isom_box_parse((GF_Box **)&afrt, bs);\n\t\tif (e) {\n\t\t\tif (afrt) gf_isom_box_del((GF_Box*)afrt);\n\t\t\tgoto exit;\n\t\t}\n\t\tgf_list_add(ptr->fragment_run_table_entries, afrt);\n\t}\n\tif (ptr->fragment_run_table_count != gf_list_count(ptr->fragment_run_table_entries)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\nexit:\n\tgf_free(tmp_str);\n\treturn e;\n}\n",
                            "caller_start": 76,
                            "file_path": "src/isomedia/box_code_adobe.c"
                        },
                        {
                            "type": "caller_info",
                            "call_line": 127,
                            "call_code": "ISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)",
                            "caller_code": "GF_Err abst_box_read(GF_Box *s, GF_BitStream *bs)\n{\n\tGF_AdobeBootstrapInfoBox *ptr = (GF_AdobeBootstrapInfoBox *)s;\n\tint i;\n\tu32 tmp_strsize;\n\tchar *tmp_str;\n\tBool zfound=GF_FALSE;\n\tGF_Err e = GF_OK;\n\n\tISOM_DECREASE_SIZE(ptr, 25)\n\tptr->bootstrapinfo_version = gf_bs_read_u32(bs);\n\tptr->profile = gf_bs_read_int(bs, 2);\n\tptr->live = gf_bs_read_int(bs, 1);\n\tptr->update = gf_bs_read_int(bs, 1);\n\tptr->reserved = gf_bs_read_int(bs, 4);\n\tptr->time_scale = gf_bs_read_u32(bs);\n\tptr->current_media_time = gf_bs_read_u64(bs);\n\tptr->smpte_time_code_offset = gf_bs_read_u64(bs);\n\n\ti=0;\n\tif (ptr->size<8) return GF_ISOM_INVALID_FILE;\n\ttmp_strsize =(u32)ptr->size;\n\ttmp_str = gf_malloc(sizeof(char)*(tmp_strsize+1));\n\tif (!tmp_str) return GF_OUT_OF_MEM;\n\tmemset(tmp_str, 0, sizeof(char)*(tmp_strsize+1) );\n\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\tif (i) {\n\t\tptr->movie_identifier = gf_strdup(tmp_str);\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->server_entry_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->server_entry_count; i++) {\n\t\tint j=0;\n\t\tzfound = GF_FALSE;\n\t\ttmp_strsize=(u32)ptr->size;\n\t\twhile (tmp_strsize) {\n\t\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\t\ttmp_str[j] = gf_bs_read_u8(bs);\n\t\t\ttmp_strsize--;\n\t\t\tif (!tmp_str[j]) {\n\t\t\t\tzfound = GF_TRUE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t\tif (!zfound) {\n\t\t\te = GF_ISOM_INVALID_FILE;\n\t\t\tgoto exit;\n\t\t}\n\t\tif (j) {\n\t\t\tgf_list_insert(ptr->server_entry_table, gf_strdup(tmp_str), i);\n\t\t}\n\t}\n\tif (ptr->server_entry_count != gf_list_count(ptr->server_entry_table)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->quality_entry_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->quality_entry_count; i++) {\n\t\tint j=0;\n\t\tzfound = GF_FALSE;\n\t\ttmp_strsize=(u32)ptr->size;\n\t\twhile (tmp_strsize) {\n\t\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\t\ttmp_str[j] = gf_bs_read_u8(bs);\n\t\t\ttmp_strsize--;\n\t\t\tif (!tmp_str[j]) {\n\t\t\t\tzfound = GF_TRUE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\n\t\tif (!zfound) {\n\t\t\te = GF_ISOM_INVALID_FILE;\n\t\t\tgoto exit;\n\t\t}\n\t\tif (j) {\n\t\t\tgf_list_insert(ptr->quality_entry_table, gf_strdup(tmp_str), i);\n\t\t}\n\t}\n\tif (ptr->quality_entry_count != gf_list_count(ptr->quality_entry_table)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\ti=0;\n\ttmp_strsize=(u32)ptr->size;\n\tzfound = GF_FALSE;\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tif (i) {\n\t\tptr->drm_data = gf_strdup(tmp_str);\n\t}\n\n\ti=0;\n\ttmp_strsize=(u32)ptr->size;\n\tzfound = GF_FALSE;\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tif (i) {\n\t\tptr->meta_data = gf_strdup(tmp_str);\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->segment_run_table_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->segment_run_table_count; i++) {\n\t\tGF_AdobeSegmentRunTableBox *asrt = NULL;\n\t\te = gf_isom_box_parse((GF_Box **)&asrt, bs);\n\t\tif (e) {\n\t\t\tif (asrt) gf_isom_box_del((GF_Box*)asrt);\n\t\t\tgoto exit;\n\t\t}\n\t\tgf_list_add(ptr->segment_run_table_entries, asrt);\n\t}\n\tif (ptr->segment_run_table_count != gf_list_count(ptr->segment_run_table_entries)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->fragment_run_table_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->fragment_run_table_count; i++) {\n\t\tGF_AdobeFragmentRunTableBox *afrt = NULL;\n\t\te = gf_isom_box_parse((GF_Box **)&afrt, bs);\n\t\tif (e) {\n\t\t\tif (afrt) gf_isom_box_del((GF_Box*)afrt);\n\t\t\tgoto exit;\n\t\t}\n\t\tgf_list_add(ptr->fragment_run_table_entries, afrt);\n\t}\n\tif (ptr->fragment_run_table_count != gf_list_count(ptr->fragment_run_table_entries)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\nexit:\n\tgf_free(tmp_str);\n\treturn e;\n}\n",
                            "caller_start": 76,
                            "file_path": "src/isomedia/box_code_adobe.c"
                        },
                        {
                            "type": "caller_info",
                            "call_line": 149,
                            "call_code": "ISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)",
                            "caller_code": "GF_Err abst_box_read(GF_Box *s, GF_BitStream *bs)\n{\n\tGF_AdobeBootstrapInfoBox *ptr = (GF_AdobeBootstrapInfoBox *)s;\n\tint i;\n\tu32 tmp_strsize;\n\tchar *tmp_str;\n\tBool zfound=GF_FALSE;\n\tGF_Err e = GF_OK;\n\n\tISOM_DECREASE_SIZE(ptr, 25)\n\tptr->bootstrapinfo_version = gf_bs_read_u32(bs);\n\tptr->profile = gf_bs_read_int(bs, 2);\n\tptr->live = gf_bs_read_int(bs, 1);\n\tptr->update = gf_bs_read_int(bs, 1);\n\tptr->reserved = gf_bs_read_int(bs, 4);\n\tptr->time_scale = gf_bs_read_u32(bs);\n\tptr->current_media_time = gf_bs_read_u64(bs);\n\tptr->smpte_time_code_offset = gf_bs_read_u64(bs);\n\n\ti=0;\n\tif (ptr->size<8) return GF_ISOM_INVALID_FILE;\n\ttmp_strsize =(u32)ptr->size;\n\ttmp_str = gf_malloc(sizeof(char)*(tmp_strsize+1));\n\tif (!tmp_str) return GF_OUT_OF_MEM;\n\tmemset(tmp_str, 0, sizeof(char)*(tmp_strsize+1) );\n\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\tif (i) {\n\t\tptr->movie_identifier = gf_strdup(tmp_str);\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->server_entry_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->server_entry_count; i++) {\n\t\tint j=0;\n\t\tzfound = GF_FALSE;\n\t\ttmp_strsize=(u32)ptr->size;\n\t\twhile (tmp_strsize) {\n\t\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\t\ttmp_str[j] = gf_bs_read_u8(bs);\n\t\t\ttmp_strsize--;\n\t\t\tif (!tmp_str[j]) {\n\t\t\t\tzfound = GF_TRUE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t\tif (!zfound) {\n\t\t\te = GF_ISOM_INVALID_FILE;\n\t\t\tgoto exit;\n\t\t}\n\t\tif (j) {\n\t\t\tgf_list_insert(ptr->server_entry_table, gf_strdup(tmp_str), i);\n\t\t}\n\t}\n\tif (ptr->server_entry_count != gf_list_count(ptr->server_entry_table)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->quality_entry_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->quality_entry_count; i++) {\n\t\tint j=0;\n\t\tzfound = GF_FALSE;\n\t\ttmp_strsize=(u32)ptr->size;\n\t\twhile (tmp_strsize) {\n\t\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\t\ttmp_str[j] = gf_bs_read_u8(bs);\n\t\t\ttmp_strsize--;\n\t\t\tif (!tmp_str[j]) {\n\t\t\t\tzfound = GF_TRUE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\n\t\tif (!zfound) {\n\t\t\te = GF_ISOM_INVALID_FILE;\n\t\t\tgoto exit;\n\t\t}\n\t\tif (j) {\n\t\t\tgf_list_insert(ptr->quality_entry_table, gf_strdup(tmp_str), i);\n\t\t}\n\t}\n\tif (ptr->quality_entry_count != gf_list_count(ptr->quality_entry_table)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\ti=0;\n\ttmp_strsize=(u32)ptr->size;\n\tzfound = GF_FALSE;\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tif (i) {\n\t\tptr->drm_data = gf_strdup(tmp_str);\n\t}\n\n\ti=0;\n\ttmp_strsize=(u32)ptr->size;\n\tzfound = GF_FALSE;\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tif (i) {\n\t\tptr->meta_data = gf_strdup(tmp_str);\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->segment_run_table_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->segment_run_table_count; i++) {\n\t\tGF_AdobeSegmentRunTableBox *asrt = NULL;\n\t\te = gf_isom_box_parse((GF_Box **)&asrt, bs);\n\t\tif (e) {\n\t\t\tif (asrt) gf_isom_box_del((GF_Box*)asrt);\n\t\t\tgoto exit;\n\t\t}\n\t\tgf_list_add(ptr->segment_run_table_entries, asrt);\n\t}\n\tif (ptr->segment_run_table_count != gf_list_count(ptr->segment_run_table_entries)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->fragment_run_table_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->fragment_run_table_count; i++) {\n\t\tGF_AdobeFragmentRunTableBox *afrt = NULL;\n\t\te = gf_isom_box_parse((GF_Box **)&afrt, bs);\n\t\tif (e) {\n\t\t\tif (afrt) gf_isom_box_del((GF_Box*)afrt);\n\t\t\tgoto exit;\n\t\t}\n\t\tgf_list_add(ptr->fragment_run_table_entries, afrt);\n\t}\n\tif (ptr->fragment_run_table_count != gf_list_count(ptr->fragment_run_table_entries)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\nexit:\n\tgf_free(tmp_str);\n\treturn e;\n}\n",
                            "caller_start": 76,
                            "file_path": "src/isomedia/box_code_adobe.c"
                        },
                        {
                            "type": "caller_info",
                            "call_line": 156,
                            "call_code": "ISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)",
                            "caller_code": "GF_Err abst_box_read(GF_Box *s, GF_BitStream *bs)\n{\n\tGF_AdobeBootstrapInfoBox *ptr = (GF_AdobeBootstrapInfoBox *)s;\n\tint i;\n\tu32 tmp_strsize;\n\tchar *tmp_str;\n\tBool zfound=GF_FALSE;\n\tGF_Err e = GF_OK;\n\n\tISOM_DECREASE_SIZE(ptr, 25)\n\tptr->bootstrapinfo_version = gf_bs_read_u32(bs);\n\tptr->profile = gf_bs_read_int(bs, 2);\n\tptr->live = gf_bs_read_int(bs, 1);\n\tptr->update = gf_bs_read_int(bs, 1);\n\tptr->reserved = gf_bs_read_int(bs, 4);\n\tptr->time_scale = gf_bs_read_u32(bs);\n\tptr->current_media_time = gf_bs_read_u64(bs);\n\tptr->smpte_time_code_offset = gf_bs_read_u64(bs);\n\n\ti=0;\n\tif (ptr->size<8) return GF_ISOM_INVALID_FILE;\n\ttmp_strsize =(u32)ptr->size;\n\ttmp_str = gf_malloc(sizeof(char)*(tmp_strsize+1));\n\tif (!tmp_str) return GF_OUT_OF_MEM;\n\tmemset(tmp_str, 0, sizeof(char)*(tmp_strsize+1) );\n\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\tif (i) {\n\t\tptr->movie_identifier = gf_strdup(tmp_str);\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->server_entry_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->server_entry_count; i++) {\n\t\tint j=0;\n\t\tzfound = GF_FALSE;\n\t\ttmp_strsize=(u32)ptr->size;\n\t\twhile (tmp_strsize) {\n\t\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\t\ttmp_str[j] = gf_bs_read_u8(bs);\n\t\t\ttmp_strsize--;\n\t\t\tif (!tmp_str[j]) {\n\t\t\t\tzfound = GF_TRUE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t\tif (!zfound) {\n\t\t\te = GF_ISOM_INVALID_FILE;\n\t\t\tgoto exit;\n\t\t}\n\t\tif (j) {\n\t\t\tgf_list_insert(ptr->server_entry_table, gf_strdup(tmp_str), i);\n\t\t}\n\t}\n\tif (ptr->server_entry_count != gf_list_count(ptr->server_entry_table)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->quality_entry_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->quality_entry_count; i++) {\n\t\tint j=0;\n\t\tzfound = GF_FALSE;\n\t\ttmp_strsize=(u32)ptr->size;\n\t\twhile (tmp_strsize) {\n\t\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\t\ttmp_str[j] = gf_bs_read_u8(bs);\n\t\t\ttmp_strsize--;\n\t\t\tif (!tmp_str[j]) {\n\t\t\t\tzfound = GF_TRUE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\n\t\tif (!zfound) {\n\t\t\te = GF_ISOM_INVALID_FILE;\n\t\t\tgoto exit;\n\t\t}\n\t\tif (j) {\n\t\t\tgf_list_insert(ptr->quality_entry_table, gf_strdup(tmp_str), i);\n\t\t}\n\t}\n\tif (ptr->quality_entry_count != gf_list_count(ptr->quality_entry_table)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\ti=0;\n\ttmp_strsize=(u32)ptr->size;\n\tzfound = GF_FALSE;\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tif (i) {\n\t\tptr->drm_data = gf_strdup(tmp_str);\n\t}\n\n\ti=0;\n\ttmp_strsize=(u32)ptr->size;\n\tzfound = GF_FALSE;\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tif (i) {\n\t\tptr->meta_data = gf_strdup(tmp_str);\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->segment_run_table_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->segment_run_table_count; i++) {\n\t\tGF_AdobeSegmentRunTableBox *asrt = NULL;\n\t\te = gf_isom_box_parse((GF_Box **)&asrt, bs);\n\t\tif (e) {\n\t\t\tif (asrt) gf_isom_box_del((GF_Box*)asrt);\n\t\t\tgoto exit;\n\t\t}\n\t\tgf_list_add(ptr->segment_run_table_entries, asrt);\n\t}\n\tif (ptr->segment_run_table_count != gf_list_count(ptr->segment_run_table_entries)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->fragment_run_table_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->fragment_run_table_count; i++) {\n\t\tGF_AdobeFragmentRunTableBox *afrt = NULL;\n\t\te = gf_isom_box_parse((GF_Box **)&afrt, bs);\n\t\tif (e) {\n\t\t\tif (afrt) gf_isom_box_del((GF_Box*)afrt);\n\t\t\tgoto exit;\n\t\t}\n\t\tgf_list_add(ptr->fragment_run_table_entries, afrt);\n\t}\n\tif (ptr->fragment_run_table_count != gf_list_count(ptr->fragment_run_table_entries)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\nexit:\n\tgf_free(tmp_str);\n\treturn e;\n}\n",
                            "caller_start": 76,
                            "file_path": "src/isomedia/box_code_adobe.c"
                        },
                        {
                            "type": "caller_info",
                            "call_line": 183,
                            "call_code": "ISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)",
                            "caller_code": "GF_Err abst_box_read(GF_Box *s, GF_BitStream *bs)\n{\n\tGF_AdobeBootstrapInfoBox *ptr = (GF_AdobeBootstrapInfoBox *)s;\n\tint i;\n\tu32 tmp_strsize;\n\tchar *tmp_str;\n\tBool zfound=GF_FALSE;\n\tGF_Err e = GF_OK;\n\n\tISOM_DECREASE_SIZE(ptr, 25)\n\tptr->bootstrapinfo_version = gf_bs_read_u32(bs);\n\tptr->profile = gf_bs_read_int(bs, 2);\n\tptr->live = gf_bs_read_int(bs, 1);\n\tptr->update = gf_bs_read_int(bs, 1);\n\tptr->reserved = gf_bs_read_int(bs, 4);\n\tptr->time_scale = gf_bs_read_u32(bs);\n\tptr->current_media_time = gf_bs_read_u64(bs);\n\tptr->smpte_time_code_offset = gf_bs_read_u64(bs);\n\n\ti=0;\n\tif (ptr->size<8) return GF_ISOM_INVALID_FILE;\n\ttmp_strsize =(u32)ptr->size;\n\ttmp_str = gf_malloc(sizeof(char)*(tmp_strsize+1));\n\tif (!tmp_str) return GF_OUT_OF_MEM;\n\tmemset(tmp_str, 0, sizeof(char)*(tmp_strsize+1) );\n\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\tif (i) {\n\t\tptr->movie_identifier = gf_strdup(tmp_str);\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->server_entry_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->server_entry_count; i++) {\n\t\tint j=0;\n\t\tzfound = GF_FALSE;\n\t\ttmp_strsize=(u32)ptr->size;\n\t\twhile (tmp_strsize) {\n\t\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\t\ttmp_str[j] = gf_bs_read_u8(bs);\n\t\t\ttmp_strsize--;\n\t\t\tif (!tmp_str[j]) {\n\t\t\t\tzfound = GF_TRUE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t\tif (!zfound) {\n\t\t\te = GF_ISOM_INVALID_FILE;\n\t\t\tgoto exit;\n\t\t}\n\t\tif (j) {\n\t\t\tgf_list_insert(ptr->server_entry_table, gf_strdup(tmp_str), i);\n\t\t}\n\t}\n\tif (ptr->server_entry_count != gf_list_count(ptr->server_entry_table)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->quality_entry_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->quality_entry_count; i++) {\n\t\tint j=0;\n\t\tzfound = GF_FALSE;\n\t\ttmp_strsize=(u32)ptr->size;\n\t\twhile (tmp_strsize) {\n\t\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\t\ttmp_str[j] = gf_bs_read_u8(bs);\n\t\t\ttmp_strsize--;\n\t\t\tif (!tmp_str[j]) {\n\t\t\t\tzfound = GF_TRUE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\n\t\tif (!zfound) {\n\t\t\te = GF_ISOM_INVALID_FILE;\n\t\t\tgoto exit;\n\t\t}\n\t\tif (j) {\n\t\t\tgf_list_insert(ptr->quality_entry_table, gf_strdup(tmp_str), i);\n\t\t}\n\t}\n\tif (ptr->quality_entry_count != gf_list_count(ptr->quality_entry_table)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\ti=0;\n\ttmp_strsize=(u32)ptr->size;\n\tzfound = GF_FALSE;\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tif (i) {\n\t\tptr->drm_data = gf_strdup(tmp_str);\n\t}\n\n\ti=0;\n\ttmp_strsize=(u32)ptr->size;\n\tzfound = GF_FALSE;\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tif (i) {\n\t\tptr->meta_data = gf_strdup(tmp_str);\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->segment_run_table_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->segment_run_table_count; i++) {\n\t\tGF_AdobeSegmentRunTableBox *asrt = NULL;\n\t\te = gf_isom_box_parse((GF_Box **)&asrt, bs);\n\t\tif (e) {\n\t\t\tif (asrt) gf_isom_box_del((GF_Box*)asrt);\n\t\t\tgoto exit;\n\t\t}\n\t\tgf_list_add(ptr->segment_run_table_entries, asrt);\n\t}\n\tif (ptr->segment_run_table_count != gf_list_count(ptr->segment_run_table_entries)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->fragment_run_table_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->fragment_run_table_count; i++) {\n\t\tGF_AdobeFragmentRunTableBox *afrt = NULL;\n\t\te = gf_isom_box_parse((GF_Box **)&afrt, bs);\n\t\tif (e) {\n\t\t\tif (afrt) gf_isom_box_del((GF_Box*)afrt);\n\t\t\tgoto exit;\n\t\t}\n\t\tgf_list_add(ptr->fragment_run_table_entries, afrt);\n\t}\n\tif (ptr->fragment_run_table_count != gf_list_count(ptr->fragment_run_table_entries)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\nexit:\n\tgf_free(tmp_str);\n\treturn e;\n}\n",
                            "caller_start": 76,
                            "file_path": "src/isomedia/box_code_adobe.c"
                        },
                        {
                            "type": "caller_info",
                            "call_line": 205,
                            "call_code": "ISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)",
                            "caller_code": "GF_Err abst_box_read(GF_Box *s, GF_BitStream *bs)\n{\n\tGF_AdobeBootstrapInfoBox *ptr = (GF_AdobeBootstrapInfoBox *)s;\n\tint i;\n\tu32 tmp_strsize;\n\tchar *tmp_str;\n\tBool zfound=GF_FALSE;\n\tGF_Err e = GF_OK;\n\n\tISOM_DECREASE_SIZE(ptr, 25)\n\tptr->bootstrapinfo_version = gf_bs_read_u32(bs);\n\tptr->profile = gf_bs_read_int(bs, 2);\n\tptr->live = gf_bs_read_int(bs, 1);\n\tptr->update = gf_bs_read_int(bs, 1);\n\tptr->reserved = gf_bs_read_int(bs, 4);\n\tptr->time_scale = gf_bs_read_u32(bs);\n\tptr->current_media_time = gf_bs_read_u64(bs);\n\tptr->smpte_time_code_offset = gf_bs_read_u64(bs);\n\n\ti=0;\n\tif (ptr->size<8) return GF_ISOM_INVALID_FILE;\n\ttmp_strsize =(u32)ptr->size;\n\ttmp_str = gf_malloc(sizeof(char)*(tmp_strsize+1));\n\tif (!tmp_str) return GF_OUT_OF_MEM;\n\tmemset(tmp_str, 0, sizeof(char)*(tmp_strsize+1) );\n\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\tif (i) {\n\t\tptr->movie_identifier = gf_strdup(tmp_str);\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->server_entry_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->server_entry_count; i++) {\n\t\tint j=0;\n\t\tzfound = GF_FALSE;\n\t\ttmp_strsize=(u32)ptr->size;\n\t\twhile (tmp_strsize) {\n\t\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\t\ttmp_str[j] = gf_bs_read_u8(bs);\n\t\t\ttmp_strsize--;\n\t\t\tif (!tmp_str[j]) {\n\t\t\t\tzfound = GF_TRUE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t\tif (!zfound) {\n\t\t\te = GF_ISOM_INVALID_FILE;\n\t\t\tgoto exit;\n\t\t}\n\t\tif (j) {\n\t\t\tgf_list_insert(ptr->server_entry_table, gf_strdup(tmp_str), i);\n\t\t}\n\t}\n\tif (ptr->server_entry_count != gf_list_count(ptr->server_entry_table)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->quality_entry_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->quality_entry_count; i++) {\n\t\tint j=0;\n\t\tzfound = GF_FALSE;\n\t\ttmp_strsize=(u32)ptr->size;\n\t\twhile (tmp_strsize) {\n\t\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\t\ttmp_str[j] = gf_bs_read_u8(bs);\n\t\t\ttmp_strsize--;\n\t\t\tif (!tmp_str[j]) {\n\t\t\t\tzfound = GF_TRUE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\n\t\tif (!zfound) {\n\t\t\te = GF_ISOM_INVALID_FILE;\n\t\t\tgoto exit;\n\t\t}\n\t\tif (j) {\n\t\t\tgf_list_insert(ptr->quality_entry_table, gf_strdup(tmp_str), i);\n\t\t}\n\t}\n\tif (ptr->quality_entry_count != gf_list_count(ptr->quality_entry_table)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\ti=0;\n\ttmp_strsize=(u32)ptr->size;\n\tzfound = GF_FALSE;\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tif (i) {\n\t\tptr->drm_data = gf_strdup(tmp_str);\n\t}\n\n\ti=0;\n\ttmp_strsize=(u32)ptr->size;\n\tzfound = GF_FALSE;\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tif (i) {\n\t\tptr->meta_data = gf_strdup(tmp_str);\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->segment_run_table_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->segment_run_table_count; i++) {\n\t\tGF_AdobeSegmentRunTableBox *asrt = NULL;\n\t\te = gf_isom_box_parse((GF_Box **)&asrt, bs);\n\t\tif (e) {\n\t\t\tif (asrt) gf_isom_box_del((GF_Box*)asrt);\n\t\t\tgoto exit;\n\t\t}\n\t\tgf_list_add(ptr->segment_run_table_entries, asrt);\n\t}\n\tif (ptr->segment_run_table_count != gf_list_count(ptr->segment_run_table_entries)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->fragment_run_table_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->fragment_run_table_count; i++) {\n\t\tGF_AdobeFragmentRunTableBox *afrt = NULL;\n\t\te = gf_isom_box_parse((GF_Box **)&afrt, bs);\n\t\tif (e) {\n\t\t\tif (afrt) gf_isom_box_del((GF_Box*)afrt);\n\t\t\tgoto exit;\n\t\t}\n\t\tgf_list_add(ptr->fragment_run_table_entries, afrt);\n\t}\n\tif (ptr->fragment_run_table_count != gf_list_count(ptr->fragment_run_table_entries)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\nexit:\n\tgf_free(tmp_str);\n\treturn e;\n}\n",
                            "caller_start": 76,
                            "file_path": "src/isomedia/box_code_adobe.c"
                        },
                        {
                            "type": "caller_info",
                            "call_line": 223,
                            "call_code": "ISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)",
                            "caller_code": "GF_Err abst_box_read(GF_Box *s, GF_BitStream *bs)\n{\n\tGF_AdobeBootstrapInfoBox *ptr = (GF_AdobeBootstrapInfoBox *)s;\n\tint i;\n\tu32 tmp_strsize;\n\tchar *tmp_str;\n\tBool zfound=GF_FALSE;\n\tGF_Err e = GF_OK;\n\n\tISOM_DECREASE_SIZE(ptr, 25)\n\tptr->bootstrapinfo_version = gf_bs_read_u32(bs);\n\tptr->profile = gf_bs_read_int(bs, 2);\n\tptr->live = gf_bs_read_int(bs, 1);\n\tptr->update = gf_bs_read_int(bs, 1);\n\tptr->reserved = gf_bs_read_int(bs, 4);\n\tptr->time_scale = gf_bs_read_u32(bs);\n\tptr->current_media_time = gf_bs_read_u64(bs);\n\tptr->smpte_time_code_offset = gf_bs_read_u64(bs);\n\n\ti=0;\n\tif (ptr->size<8) return GF_ISOM_INVALID_FILE;\n\ttmp_strsize =(u32)ptr->size;\n\ttmp_str = gf_malloc(sizeof(char)*(tmp_strsize+1));\n\tif (!tmp_str) return GF_OUT_OF_MEM;\n\tmemset(tmp_str, 0, sizeof(char)*(tmp_strsize+1) );\n\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\tif (i) {\n\t\tptr->movie_identifier = gf_strdup(tmp_str);\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->server_entry_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->server_entry_count; i++) {\n\t\tint j=0;\n\t\tzfound = GF_FALSE;\n\t\ttmp_strsize=(u32)ptr->size;\n\t\twhile (tmp_strsize) {\n\t\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\t\ttmp_str[j] = gf_bs_read_u8(bs);\n\t\t\ttmp_strsize--;\n\t\t\tif (!tmp_str[j]) {\n\t\t\t\tzfound = GF_TRUE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t\tif (!zfound) {\n\t\t\te = GF_ISOM_INVALID_FILE;\n\t\t\tgoto exit;\n\t\t}\n\t\tif (j) {\n\t\t\tgf_list_insert(ptr->server_entry_table, gf_strdup(tmp_str), i);\n\t\t}\n\t}\n\tif (ptr->server_entry_count != gf_list_count(ptr->server_entry_table)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->quality_entry_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->quality_entry_count; i++) {\n\t\tint j=0;\n\t\tzfound = GF_FALSE;\n\t\ttmp_strsize=(u32)ptr->size;\n\t\twhile (tmp_strsize) {\n\t\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\t\ttmp_str[j] = gf_bs_read_u8(bs);\n\t\t\ttmp_strsize--;\n\t\t\tif (!tmp_str[j]) {\n\t\t\t\tzfound = GF_TRUE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\n\t\tif (!zfound) {\n\t\t\te = GF_ISOM_INVALID_FILE;\n\t\t\tgoto exit;\n\t\t}\n\t\tif (j) {\n\t\t\tgf_list_insert(ptr->quality_entry_table, gf_strdup(tmp_str), i);\n\t\t}\n\t}\n\tif (ptr->quality_entry_count != gf_list_count(ptr->quality_entry_table)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\ti=0;\n\ttmp_strsize=(u32)ptr->size;\n\tzfound = GF_FALSE;\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tif (i) {\n\t\tptr->drm_data = gf_strdup(tmp_str);\n\t}\n\n\ti=0;\n\ttmp_strsize=(u32)ptr->size;\n\tzfound = GF_FALSE;\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tif (i) {\n\t\tptr->meta_data = gf_strdup(tmp_str);\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->segment_run_table_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->segment_run_table_count; i++) {\n\t\tGF_AdobeSegmentRunTableBox *asrt = NULL;\n\t\te = gf_isom_box_parse((GF_Box **)&asrt, bs);\n\t\tif (e) {\n\t\t\tif (asrt) gf_isom_box_del((GF_Box*)asrt);\n\t\t\tgoto exit;\n\t\t}\n\t\tgf_list_add(ptr->segment_run_table_entries, asrt);\n\t}\n\tif (ptr->segment_run_table_count != gf_list_count(ptr->segment_run_table_entries)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->fragment_run_table_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->fragment_run_table_count; i++) {\n\t\tGF_AdobeFragmentRunTableBox *afrt = NULL;\n\t\te = gf_isom_box_parse((GF_Box **)&afrt, bs);\n\t\tif (e) {\n\t\t\tif (afrt) gf_isom_box_del((GF_Box*)afrt);\n\t\t\tgoto exit;\n\t\t}\n\t\tgf_list_add(ptr->fragment_run_table_entries, afrt);\n\t}\n\tif (ptr->fragment_run_table_count != gf_list_count(ptr->fragment_run_table_entries)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\nexit:\n\tgf_free(tmp_str);\n\treturn e;\n}\n",
                            "caller_start": 76,
                            "file_path": "src/isomedia/box_code_adobe.c"
                        }
                    ]
                }
            ],
            "timestamp": "2025-05-29T20:00:04.452355"
        },
        {
            "stage": "analysis",
            "iteration": 2,
            "prompt": "You are a senior security engineer. Using **all available code context**, build the **complete, evidence-backed root-cause and trigger chain** for the vulnerability.\n\n## INPUTS\n- **Commit Message**: fixed #2307\n- **Vulnerability Description**: GPAC v2.1-DEV-rev428-gcb8ae46c8-master was discovered to contain a memory leak via the function dimC_box_read at isomedia/box_code_3gpp.c.\n- **Patch Code**: [{'func_name': 'dimC_box_read', 'patch': '--- func_before\\n+++ func_after\\n@@ -1048,5 +1048,6 @@\\n GF_Err dimC_box_read(GF_Box *s, GF_BitStream *bs)\\n {\\n+\\tGF_Err e = GF_OK;\\n \\tu32 i, msize;\\n \\tGF_DIMSSceneConfigBox *p = (GF_DIMSSceneConfigBox *)s;\\n \\n@@ -1065,7 +1066,7 @@\\n \\ti=0;\\n \\tstr[0]=0;\\n \\twhile (i < msize) {\\n-\\t\\tISOM_DECREASE_SIZE(p, 1);\\n+\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(p, 1);\\n \\t\\tstr[i] = gf_bs_read_u8(bs);\\n \\t\\tif (!str[i]) break;\\n \\t\\ti++;\\n@@ -1080,7 +1081,7 @@\\n \\ti=0;\\n \\tstr[0]=0;\\n \\twhile (i < msize) {\\n-\\t\\tISOM_DECREASE_SIZE(p, 1);\\n+\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(p, 1);\\n \\t\\tstr[i] = gf_bs_read_u8(bs);\\n \\t\\tif (!str[i]) break;\\n \\t\\ti++;\\n@@ -1095,4 +1096,8 @@\\n \\tif (!p->textEncoding || !p->contentEncoding)\\n \\t\\treturn GF_OUT_OF_MEM;\\n \\treturn GF_OK;\\n+\\n+exit:\\n+\\tgf_free(str);\\n+\\treturn e;\\n }', 'file_path': 'src/isomedia/box_code_3gpp.c'}]\n- **History Summary (all prior context & analysis)**: [\n  {\n    \"stage\": \"initial\",\n    \"result\": {\n      \"language\": \"c\",\n      \"vulnerability_type\": \"memory\",\n      \"repair_strategy\": \"The patch introduces an explicit 'exit' label with 'gf_free(str)' (box_code_3gpp.c:1096-1099) to ensure deallocation of the 'str' buffer. It replaces 'ISOM_DECREASE_SIZE' with 'ISOM_DECREASE_SIZE_GOTO_EXIT' (box_code_3gpp.c:1066,1081), which likely aborts processing on error and jumps to the cleanup label.\",\n      \"required_context\": [\n        \"function: ISOM_DECREASE_SIZE_GOTO_EXIT\"\n      ],\n      \"root_cause\": \"The original code failed to free 'str' when error conditions occurred during buffer reads. The patch adds 'gf_free(str)' at 'exit' (box_code_3gpp.c:1096) but relies on 'ISOM_DECREASE_SIZE_GOTO_EXIT' to trigger the error path. Without the macro's definition, the exact error propagation mechanism remains unclear.\"\n    }\n  },\n  {\n    \"stage\": \"collection\",\n    \"result\": [\n      {\n        \"source\": \"caller_info(func:ISOM_DECREASE_SIZE_GOTO_EXIT)\",\n        \"result\": [\n          {\n            \"call_line\": 103,\n            \"call_code\": \"ISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\",\n            \"caller_code\": \"GF_Err abst_box_read(GF_Box *s, GF_BitStream *bs)\\n{\\n\\tGF_AdobeBootstrapInfoBox *ptr = (GF_AdobeBootstrapInfoBox *)s;\\n\\tint i;\\n\\tu32 tmp_strsize;\\n\\tchar *tmp_str;\\n\\tBool zfound=GF_FALSE;\\n\\tGF_Err e = GF_OK;\\n\\n\\tISOM_DECREASE_SIZE(ptr, 25)\\n\\tptr->bootstrapinfo_version = gf_bs_read_u32(bs);\\n\\tptr->profile = gf_bs_read_int(bs, 2);\\n\\tptr->live = gf_bs_read_int(bs, 1);\\n\\tptr->update = gf_bs_read_int(bs, 1);\\n\\tptr->reserved = gf_bs_read_int(bs, 4);\\n\\tptr->time_scale = gf_bs_read_u32(bs);\\n\\tptr->current_media_time = gf_bs_read_u64(bs);\\n\\tptr->smpte_time_code_offset = gf_bs_read_u64(bs);\\n\\n\\ti=0;\\n\\tif (ptr->size<8) return GF_ISOM_INVALID_FILE;\\n\\ttmp_strsize =(u32)ptr->size;\\n\\ttmp_str = gf_malloc(sizeof(char)*(tmp_strsize+1));\\n\\tif (!tmp_str) return GF_OUT_OF_MEM;\\n\\tmemset(tmp_str, 0, sizeof(char)*(tmp_strsize+1) );\\n\\n\\twhile (tmp_strsize) {\\n\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\ttmp_str[i] = gf_bs_read_u8(bs);\\n\\t\\ttmp_strsize--;\\n\\t\\tif (!tmp_str[i]) {\\n\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\ti++;\\n\\t}\\n\\tif (!zfound) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\tif (i) {\\n\\t\\tptr->movie_identifier = gf_strdup(tmp_str);\\n\\t}\\n\\n\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\tptr->server_entry_count = gf_bs_read_u8(bs);\\n\\tfor (i=0; i<ptr->server_entry_count; i++) {\\n\\t\\tint j=0;\\n\\t\\tzfound = GF_FALSE;\\n\\t\\ttmp_strsize=(u32)ptr->size;\\n\\t\\twhile (tmp_strsize) {\\n\\t\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\t\\ttmp_str[j] = gf_bs_read_u8(bs);\\n\\t\\t\\ttmp_strsize--;\\n\\t\\t\\tif (!tmp_str[j]) {\\n\\t\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t\\tj++;\\n\\t\\t}\\n\\t\\tif (!zfound) {\\n\\t\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\t\\tgoto exit;\\n\\t\\t}\\n\\t\\tif (j) {\\n\\t\\t\\tgf_list_insert(ptr->server_entry_table, gf_strdup(tmp_str), i);\\n\\t\\t}\\n\\t}\\n\\tif (ptr->server_entry_count != gf_list_count(ptr->server_entry_table)) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\tptr->quality_entry_count = gf_bs_read_u8(bs);\\n\\tfor (i=0; i<ptr->quality_entry_count; i++) {\\n\\t\\tint j=0;\\n\\t\\tzfound = GF_FALSE;\\n\\t\\ttmp_strsize=(u32)ptr->size;\\n\\t\\twhile (tmp_strsize) {\\n\\t\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\t\\ttmp_str[j] = gf_bs_read_u8(bs);\\n\\t\\t\\ttmp_strsize--;\\n\\t\\t\\tif (!tmp_str[j]) {\\n\\t\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t\\tj++;\\n\\t\\t}\\n\\n\\t\\tif (!zfound) {\\n\\t\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\t\\tgoto exit;\\n\\t\\t}\\n\\t\\tif (j) {\\n\\t\\t\\tgf_list_insert(ptr->quality_entry_table, gf_strdup(tmp_str), i);\\n\\t\\t}\\n\\t}\\n\\tif (ptr->quality_entry_count != gf_list_count(ptr->quality_entry_table)) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\ti=0;\\n\\ttmp_strsize=(u32)ptr->size;\\n\\tzfound = GF_FALSE;\\n\\twhile (tmp_strsize) {\\n\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\ttmp_str[i] = gf_bs_read_u8(bs);\\n\\t\\ttmp_strsize--;\\n\\t\\tif (!tmp_str[i]) {\\n\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\ti++;\\n\\t}\\n\\tif (!zfound) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\tif (i) {\\n\\t\\tptr->drm_data = gf_strdup(tmp_str);\\n\\t}\\n\\n\\ti=0;\\n\\ttmp_strsize=(u32)ptr->size;\\n\\tzfound = GF_FALSE;\\n\\twhile (tmp_strsize) {\\n\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\ttmp_str[i] = gf_bs_read_u8(bs);\\n\\t\\ttmp_strsize--;\\n\\t\\tif (!tmp_str[i]) {\\n\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\ti++;\\n\\t}\\n\\tif (!zfound) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\tif (i) {\\n\\t\\tptr->meta_data = gf_strdup(tmp_str);\\n\\t}\\n\\n\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\tptr->segment_run_table_count = gf_bs_read_u8(bs);\\n\\tfor (i=0; i<ptr->segment_run_table_count; i++) {\\n\\t\\tGF_AdobeSegmentRunTableBox *asrt = NULL;\\n\\t\\te = gf_isom_box_parse((GF_Box **)&asrt, bs);\\n\\t\\tif (e) {\\n\\t\\t\\tif (asrt) gf_isom_box_del((GF_Box*)asrt);\\n\\t\\t\\tgoto exit;\\n\\t\\t}\\n\\t\\tgf_list_add(ptr->segment_run_table_entries, asrt);\\n\\t}\\n\\tif (ptr->segment_run_table_count != gf_list_count(ptr->segment_run_table_entries)) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\tptr->fragment_run_table_count = gf_bs_read_u8(bs);\\n\\tfor (i=0; i<ptr->fragment_run_table_count; i++) {\\n\\t\\tGF_AdobeFragmentRunTableBox *afrt = NULL;\\n\\t\\te = gf_isom_box_parse((GF_Box **)&afrt, bs);\\n\\t\\tif (e) {\\n\\t\\t\\tif (afrt) gf_isom_box_del((GF_Box*)afrt);\\n\\t\\t\\tgoto exit;\\n\\t\\t}\\n\\t\\tgf_list_add(ptr->fragment_run_table_entries, afrt);\\n\\t}\\n\\tif (ptr->fragment_run_table_count != gf_list_count(ptr->fragment_run_table_entries)) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\nexit:\\n\\tgf_free(tmp_str);\\n\\treturn e;\\n}\\n\",\n            \"caller_start\": 76,\n            \"file_path\": \"src/isomedia/box_code_adobe.c\"\n          },\n          {\n            \"call_line\": 120,\n            \"call_code\": \"ISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\",\n            \"caller_code\": \"GF_Err abst_box_read(GF_Box *s, GF_BitStream *bs)\\n{\\n\\tGF_AdobeBootstrapInfoBox *ptr = (GF_AdobeBootstrapInfoBox *)s;\\n\\tint i;\\n\\tu32 tmp_strsize;\\n\\tchar *tmp_str;\\n\\tBool zfound=GF_FALSE;\\n\\tGF_Err e = GF_OK;\\n\\n\\tISOM_DECREASE_SIZE(ptr, 25)\\n\\tptr->bootstrapinfo_version = gf_bs_read_u32(bs);\\n\\tptr->profile = gf_bs_read_int(bs, 2);\\n\\tptr->live = gf_bs_read_int(bs, 1);\\n\\tptr->update = gf_bs_read_int(bs, 1);\\n\\tptr->reserved = gf_bs_read_int(bs, 4);\\n\\tptr->time_scale = gf_bs_read_u32(bs);\\n\\tptr->current_media_time = gf_bs_read_u64(bs);\\n\\tptr->smpte_time_code_offset = gf_bs_read_u64(bs);\\n\\n\\ti=0;\\n\\tif (ptr->size<8) return GF_ISOM_INVALID_FILE;\\n\\ttmp_strsize =(u32)ptr->size;\\n\\ttmp_str = gf_malloc(sizeof(char)*(tmp_strsize+1));\\n\\tif (!tmp_str) return GF_OUT_OF_MEM;\\n\\tmemset(tmp_str, 0, sizeof(char)*(tmp_strsize+1) );\\n\\n\\twhile (tmp_strsize) {\\n\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\ttmp_str[i] = gf_bs_read_u8(bs);\\n\\t\\ttmp_strsize--;\\n\\t\\tif (!tmp_str[i]) {\\n\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\ti++;\\n\\t}\\n\\tif (!zfound) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\tif (i) {\\n\\t\\tptr->movie_identifier = gf_strdup(tmp_str);\\n\\t}\\n\\n\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\tptr->server_entry_count = gf_bs_read_u8(bs);\\n\\tfor (i=0; i<ptr->server_entry_count; i++) {\\n\\t\\tint j=0;\\n\\t\\tzfound = GF_FALSE;\\n\\t\\ttmp_strsize=(u32)ptr->size;\\n\\t\\twhile (tmp_strsize) {\\n\\t\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\t\\ttmp_str[j] = gf_bs_read_u8(bs);\\n\\t\\t\\ttmp_strsize--;\\n\\t\\t\\tif (!tmp_str[j]) {\\n\\t\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t\\tj++;\\n\\t\\t}\\n\\t\\tif (!zfound) {\\n\\t\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\t\\tgoto exit;\\n\\t\\t}\\n\\t\\tif (j) {\\n\\t\\t\\tgf_list_insert(ptr->server_entry_table, gf_strdup(tmp_str), i);\\n\\t\\t}\\n\\t}\\n\\tif (ptr->server_entry_count != gf_list_count(ptr->server_entry_table)) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\tptr->quality_entry_count = gf_bs_read_u8(bs);\\n\\tfor (i=0; i<ptr->quality_entry_count; i++) {\\n\\t\\tint j=0;\\n\\t\\tzfound = GF_FALSE;\\n\\t\\ttmp_strsize=(u32)ptr->size;\\n\\t\\twhile (tmp_strsize) {\\n\\t\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\t\\ttmp_str[j] = gf_bs_read_u8(bs);\\n\\t\\t\\ttmp_strsize--;\\n\\t\\t\\tif (!tmp_str[j]) {\\n\\t\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t\\tj++;\\n\\t\\t}\\n\\n\\t\\tif (!zfound) {\\n\\t\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\t\\tgoto exit;\\n\\t\\t}\\n\\t\\tif (j) {\\n\\t\\t\\tgf_list_insert(ptr->quality_entry_table, gf_strdup(tmp_str), i);\\n\\t\\t}\\n\\t}\\n\\tif (ptr->quality_entry_count != gf_list_count(ptr->quality_entry_table)) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\ti=0;\\n\\ttmp_strsize=(u32)ptr->size;\\n\\tzfound = GF_FALSE;\\n\\twhile (tmp_strsize) {\\n\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\ttmp_str[i] = gf_bs_read_u8(bs);\\n\\t\\ttmp_strsize--;\\n\\t\\tif (!tmp_str[i]) {\\n\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\ti++;\\n\\t}\\n\\tif (!zfound) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\tif (i) {\\n\\t\\tptr->drm_data = gf_strdup(tmp_str);\\n\\t}\\n\\n\\ti=0;\\n\\ttmp_strsize=(u32)ptr->size;\\n\\tzfound = GF_FALSE;\\n\\twhile (tmp_strsize) {\\n\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\ttmp_str[i] = gf_bs_read_u8(bs);\\n\\t\\ttmp_strsize--;\\n\\t\\tif (!tmp_str[i]) {\\n\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\ti++;\\n\\t}\\n\\tif (!zfound) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\tif (i) {\\n\\t\\tptr->meta_data = gf_strdup(tmp_str);\\n\\t}\\n\\n\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\tptr->segment_run_table_count = gf_bs_read_u8(bs);\\n\\tfor (i=0; i<ptr->segment_run_table_count; i++) {\\n\\t\\tGF_AdobeSegmentRunTableBox *asrt = NULL;\\n\\t\\te = gf_isom_box_parse((GF_Box **)&asrt, bs);\\n\\t\\tif (e) {\\n\\t\\t\\tif (asrt) gf_isom_box_del((GF_Box*)asrt);\\n\\t\\t\\tgoto exit;\\n\\t\\t}\\n\\t\\tgf_list_add(ptr->segment_run_table_entries, asrt);\\n\\t}\\n\\tif (ptr->segment_run_table_count != gf_list_count(ptr->segment_run_table_entries)) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\tptr->fragment_run_table_count = gf_bs_read_u8(bs);\\n\\tfor (i=0; i<ptr->fragment_run_table_count; i++) {\\n\\t\\tGF_AdobeFragmentRunTableBox *afrt = NULL;\\n\\t\\te = gf_isom_box_parse((GF_Box **)&afrt, bs);\\n\\t\\tif (e) {\\n\\t\\t\\tif (afrt) gf_isom_box_del((GF_Box*)afrt);\\n\\t\\t\\tgoto exit;\\n\\t\\t}\\n\\t\\tgf_list_add(ptr->fragment_run_table_entries, afrt);\\n\\t}\\n\\tif (ptr->fragment_run_table_count != gf_list_count(ptr->fragment_run_table_entries)) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\nexit:\\n\\tgf_free(tmp_str);\\n\\treturn e;\\n}\\n\",\n            \"caller_start\": 76,\n            \"file_path\": \"src/isomedia/box_code_adobe.c\"\n          },\n          {\n            \"call_line\": 127,\n            \"call_code\": \"ISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\",\n            \"caller_code\": \"GF_Err abst_box_read(GF_Box *s, GF_BitStream *bs)\\n{\\n\\tGF_AdobeBootstrapInfoBox *ptr = (GF_AdobeBootstrapInfoBox *)s;\\n\\tint i;\\n\\tu32 tmp_strsize;\\n\\tchar *tmp_str;\\n\\tBool zfound=GF_FALSE;\\n\\tGF_Err e = GF_OK;\\n\\n\\tISOM_DECREASE_SIZE(ptr, 25)\\n\\tptr->bootstrapinfo_version = gf_bs_read_u32(bs);\\n\\tptr->profile = gf_bs_read_int(bs, 2);\\n\\tptr->live = gf_bs_read_int(bs, 1);\\n\\tptr->update = gf_bs_read_int(bs, 1);\\n\\tptr->reserved = gf_bs_read_int(bs, 4);\\n\\tptr->time_scale = gf_bs_read_u32(bs);\\n\\tptr->current_media_time = gf_bs_read_u64(bs);\\n\\tptr->smpte_time_code_offset = gf_bs_read_u64(bs);\\n\\n\\ti=0;\\n\\tif (ptr->size<8) return GF_ISOM_INVALID_FILE;\\n\\ttmp_strsize =(u32)ptr->size;\\n\\ttmp_str = gf_malloc(sizeof(char)*(tmp_strsize+1));\\n\\tif (!tmp_str) return GF_OUT_OF_MEM;\\n\\tmemset(tmp_str, 0, sizeof(char)*(tmp_strsize+1) );\\n\\n\\twhile (tmp_strsize) {\\n\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\ttmp_str[i] = gf_bs_read_u8(bs);\\n\\t\\ttmp_strsize--;\\n\\t\\tif (!tmp_str[i]) {\\n\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\ti++;\\n\\t}\\n\\tif (!zfound) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\tif (i) {\\n\\t\\tptr->movie_identifier = gf_strdup(tmp_str);\\n\\t}\\n\\n\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\tptr->server_entry_count = gf_bs_read_u8(bs);\\n\\tfor (i=0; i<ptr->server_entry_count; i++) {\\n\\t\\tint j=0;\\n\\t\\tzfound = GF_FALSE;\\n\\t\\ttmp_strsize=(u32)ptr->size;\\n\\t\\twhile (tmp_strsize) {\\n\\t\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\t\\ttmp_str[j] = gf_bs_read_u8(bs);\\n\\t\\t\\ttmp_strsize--;\\n\\t\\t\\tif (!tmp_str[j]) {\\n\\t\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t\\tj++;\\n\\t\\t}\\n\\t\\tif (!zfound) {\\n\\t\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\t\\tgoto exit;\\n\\t\\t}\\n\\t\\tif (j) {\\n\\t\\t\\tgf_list_insert(ptr->server_entry_table, gf_strdup(tmp_str), i);\\n\\t\\t}\\n\\t}\\n\\tif (ptr->server_entry_count != gf_list_count(ptr->server_entry_table)) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\tptr->quality_entry_count = gf_bs_read_u8(bs);\\n\\tfor (i=0; i<ptr->quality_entry_count; i++) {\\n\\t\\tint j=0;\\n\\t\\tzfound = GF_FALSE;\\n\\t\\ttmp_strsize=(u32)ptr->size;\\n\\t\\twhile (tmp_strsize) {\\n\\t\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\t\\ttmp_str[j] = gf_bs_read_u8(bs);\\n\\t\\t\\ttmp_strsize--;\\n\\t\\t\\tif (!tmp_str[j]) {\\n\\t\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t\\tj++;\\n\\t\\t}\\n\\n\\t\\tif (!zfound) {\\n\\t\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\t\\tgoto exit;\\n\\t\\t}\\n\\t\\tif (j) {\\n\\t\\t\\tgf_list_insert(ptr->quality_entry_table, gf_strdup(tmp_str), i);\\n\\t\\t}\\n\\t}\\n\\tif (ptr->quality_entry_count != gf_list_count(ptr->quality_entry_table)) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\ti=0;\\n\\ttmp_strsize=(u32)ptr->size;\\n\\tzfound = GF_FALSE;\\n\\twhile (tmp_strsize) {\\n\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\ttmp_str[i] = gf_bs_read_u8(bs);\\n\\t\\ttmp_strsize--;\\n\\t\\tif (!tmp_str[i]) {\\n\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\ti++;\\n\\t}\\n\\tif (!zfound) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\tif (i) {\\n\\t\\tptr->drm_data = gf_strdup(tmp_str);\\n\\t}\\n\\n\\ti=0;\\n\\ttmp_strsize=(u32)ptr->size;\\n\\tzfound = GF_FALSE;\\n\\twhile (tmp_strsize) {\\n\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\ttmp_str[i] = gf_bs_read_u8(bs);\\n\\t\\ttmp_strsize--;\\n\\t\\tif (!tmp_str[i]) {\\n\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\ti++;\\n\\t}\\n\\tif (!zfound) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\tif (i) {\\n\\t\\tptr->meta_data = gf_strdup(tmp_str);\\n\\t}\\n\\n\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\tptr->segment_run_table_count = gf_bs_read_u8(bs);\\n\\tfor (i=0; i<ptr->segment_run_table_count; i++) {\\n\\t\\tGF_AdobeSegmentRunTableBox *asrt = NULL;\\n\\t\\te = gf_isom_box_parse((GF_Box **)&asrt, bs);\\n\\t\\tif (e) {\\n\\t\\t\\tif (asrt) gf_isom_box_del((GF_Box*)asrt);\\n\\t\\t\\tgoto exit;\\n\\t\\t}\\n\\t\\tgf_list_add(ptr->segment_run_table_entries, asrt);\\n\\t}\\n\\tif (ptr->segment_run_table_count != gf_list_count(ptr->segment_run_table_entries)) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\tptr->fragment_run_table_count = gf_bs_read_u8(bs);\\n\\tfor (i=0; i<ptr->fragment_run_table_count; i++) {\\n\\t\\tGF_AdobeFragmentRunTableBox *afrt = NULL;\\n\\t\\te = gf_isom_box_parse((GF_Box **)&afrt, bs);\\n\\t\\tif (e) {\\n\\t\\t\\tif (afrt) gf_isom_box_del((GF_Box*)afrt);\\n\\t\\t\\tgoto exit;\\n\\t\\t}\\n\\t\\tgf_list_add(ptr->fragment_run_table_entries, afrt);\\n\\t}\\n\\tif (ptr->fragment_run_table_count != gf_list_count(ptr->fragment_run_table_entries)) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\nexit:\\n\\tgf_free(tmp_str);\\n\\treturn e;\\n}\\n\",\n            \"caller_start\": 76,\n            \"file_path\": \"src/isomedia/box_code_adobe.c\"\n          },\n          {\n            \"call_line\": 149,\n            \"call_code\": \"ISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\",\n            \"caller_code\": \"GF_Err abst_box_read(GF_Box *s, GF_BitStream *bs)\\n{\\n\\tGF_AdobeBootstrapInfoBox *ptr = (GF_AdobeBootstrapInfoBox *)s;\\n\\tint i;\\n\\tu32 tmp_strsize;\\n\\tchar *tmp_str;\\n\\tBool zfound=GF_FALSE;\\n\\tGF_Err e = GF_OK;\\n\\n\\tISOM_DECREASE_SIZE(ptr, 25)\\n\\tptr->bootstrapinfo_version = gf_bs_read_u32(bs);\\n\\tptr->profile = gf_bs_read_int(bs, 2);\\n\\tptr->live = gf_bs_read_int(bs, 1);\\n\\tptr->update = gf_bs_read_int(bs, 1);\\n\\tptr->reserved = gf_bs_read_int(bs, 4);\\n\\tptr->time_scale = gf_bs_read_u32(bs);\\n\\tptr->current_media_time = gf_bs_read_u64(bs);\\n\\tptr->smpte_time_code_offset = gf_bs_read_u64(bs);\\n\\n\\ti=0;\\n\\tif (ptr->size<8) return GF_ISOM_INVALID_FILE;\\n\\ttmp_strsize =(u32)ptr->size;\\n\\ttmp_str = gf_malloc(sizeof(char)*(tmp_strsize+1));\\n\\tif (!tmp_str) return GF_OUT_OF_MEM;\\n\\tmemset(tmp_str, 0, sizeof(char)*(tmp_strsize+1) );\\n\\n\\twhile (tmp_strsize) {\\n\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\ttmp_str[i] = gf_bs_read_u8(bs);\\n\\t\\ttmp_strsize--;\\n\\t\\tif (!tmp_str[i]) {\\n\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\ti++;\\n\\t}\\n\\tif (!zfound) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\tif (i) {\\n\\t\\tptr->movie_identifier = gf_strdup(tmp_str);\\n\\t}\\n\\n\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\tptr->server_entry_count = gf_bs_read_u8(bs);\\n\\tfor (i=0; i<ptr->server_entry_count; i++) {\\n\\t\\tint j=0;\\n\\t\\tzfound = GF_FALSE;\\n\\t\\ttmp_strsize=(u32)ptr->size;\\n\\t\\twhile (tmp_strsize) {\\n\\t\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\t\\ttmp_str[j] = gf_bs_read_u8(bs);\\n\\t\\t\\ttmp_strsize--;\\n\\t\\t\\tif (!tmp_str[j]) {\\n\\t\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t\\tj++;\\n\\t\\t}\\n\\t\\tif (!zfound) {\\n\\t\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\t\\tgoto exit;\\n\\t\\t}\\n\\t\\tif (j) {\\n\\t\\t\\tgf_list_insert(ptr->server_entry_table, gf_strdup(tmp_str), i);\\n\\t\\t}\\n\\t}\\n\\tif (ptr->server_entry_count != gf_list_count(ptr->server_entry_table)) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\tptr->quality_entry_count = gf_bs_read_u8(bs);\\n\\tfor (i=0; i<ptr->quality_entry_count; i++) {\\n\\t\\tint j=0;\\n\\t\\tzfound = GF_FALSE;\\n\\t\\ttmp_strsize=(u32)ptr->size;\\n\\t\\twhile (tmp_strsize) {\\n\\t\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\t\\ttmp_str[j] = gf_bs_read_u8(bs);\\n\\t\\t\\ttmp_strsize--;\\n\\t\\t\\tif (!tmp_str[j]) {\\n\\t\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t\\tj++;\\n\\t\\t}\\n\\n\\t\\tif (!zfound) {\\n\\t\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\t\\tgoto exit;\\n\\t\\t}\\n\\t\\tif (j) {\\n\\t\\t\\tgf_list_insert(ptr->quality_entry_table, gf_strdup(tmp_str), i);\\n\\t\\t}\\n\\t}\\n\\tif (ptr->quality_entry_count != gf_list_count(ptr->quality_entry_table)) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\ti=0;\\n\\ttmp_strsize=(u32)ptr->size;\\n\\tzfound = GF_FALSE;\\n\\twhile (tmp_strsize) {\\n\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\ttmp_str[i] = gf_bs_read_u8(bs);\\n\\t\\ttmp_strsize--;\\n\\t\\tif (!tmp_str[i]) {\\n\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\ti++;\\n\\t}\\n\\tif (!zfound) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\tif (i) {\\n\\t\\tptr->drm_data = gf_strdup(tmp_str);\\n\\t}\\n\\n\\ti=0;\\n\\ttmp_strsize=(u32)ptr->size;\\n\\tzfound = GF_FALSE;\\n\\twhile (tmp_strsize) {\\n\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\ttmp_str[i] = gf_bs_read_u8(bs);\\n\\t\\ttmp_strsize--;\\n\\t\\tif (!tmp_str[i]) {\\n\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\ti++;\\n\\t}\\n\\tif (!zfound) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\tif (i) {\\n\\t\\tptr->meta_data = gf_strdup(tmp_str);\\n\\t}\\n\\n\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\tptr->segment_run_table_count = gf_bs_read_u8(bs);\\n\\tfor (i=0; i<ptr->segment_run_table_count; i++) {\\n\\t\\tGF_AdobeSegmentRunTableBox *asrt = NULL;\\n\\t\\te = gf_isom_box_parse((GF_Box **)&asrt, bs);\\n\\t\\tif (e) {\\n\\t\\t\\tif (asrt) gf_isom_box_del((GF_Box*)asrt);\\n\\t\\t\\tgoto exit;\\n\\t\\t}\\n\\t\\tgf_list_add(ptr->segment_run_table_entries, asrt);\\n\\t}\\n\\tif (ptr->segment_run_table_count != gf_list_count(ptr->segment_run_table_entries)) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\tptr->fragment_run_table_count = gf_bs_read_u8(bs);\\n\\tfor (i=0; i<ptr->fragment_run_table_count; i++) {\\n\\t\\tGF_AdobeFragmentRunTableBox *afrt = NULL;\\n\\t\\te = gf_isom_box_parse((GF_Box **)&afrt, bs);\\n\\t\\tif (e) {\\n\\t\\t\\tif (afrt) gf_isom_box_del((GF_Box*)afrt);\\n\\t\\t\\tgoto exit;\\n\\t\\t}\\n\\t\\tgf_list_add(ptr->fragment_run_table_entries, afrt);\\n\\t}\\n\\tif (ptr->fragment_run_table_count != gf_list_count(ptr->fragment_run_table_entries)) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\nexit:\\n\\tgf_free(tmp_str);\\n\\treturn e;\\n}\\n\",\n            \"caller_start\": 76,\n            \"file_path\": \"src/isomedia/box_code_adobe.c\"\n          },\n          {\n            \"call_line\": 156,\n            \"call_code\": \"ISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\",\n            \"caller_code\": \"GF_Err abst_box_read(GF_Box *s, GF_BitStream *bs)\\n{\\n\\tGF_AdobeBootstrapInfoBox *ptr = (GF_AdobeBootstrapInfoBox *)s;\\n\\tint i;\\n\\tu32 tmp_strsize;\\n\\tchar *tmp_str;\\n\\tBool zfound=GF_FALSE;\\n\\tGF_Err e = GF_OK;\\n\\n\\tISOM_DECREASE_SIZE(ptr, 25)\\n\\tptr->bootstrapinfo_version = gf_bs_read_u32(bs);\\n\\tptr->profile = gf_bs_read_int(bs, 2);\\n\\tptr->live = gf_bs_read_int(bs, 1);\\n\\tptr->update = gf_bs_read_int(bs, 1);\\n\\tptr->reserved = gf_bs_read_int(bs, 4);\\n\\tptr->time_scale = gf_bs_read_u32(bs);\\n\\tptr->current_media_time = gf_bs_read_u64(bs);\\n\\tptr->smpte_time_code_offset = gf_bs_read_u64(bs);\\n\\n\\ti=0;\\n\\tif (ptr->size<8) return GF_ISOM_INVALID_FILE;\\n\\ttmp_strsize =(u32)ptr->size;\\n\\ttmp_str = gf_malloc(sizeof(char)*(tmp_strsize+1));\\n\\tif (!tmp_str) return GF_OUT_OF_MEM;\\n\\tmemset(tmp_str, 0, sizeof(char)*(tmp_strsize+1) );\\n\\n\\twhile (tmp_strsize) {\\n\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\ttmp_str[i] = gf_bs_read_u8(bs);\\n\\t\\ttmp_strsize--;\\n\\t\\tif (!tmp_str[i]) {\\n\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\ti++;\\n\\t}\\n\\tif (!zfound) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\tif (i) {\\n\\t\\tptr->movie_identifier = gf_strdup(tmp_str);\\n\\t}\\n\\n\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\tptr->server_entry_count = gf_bs_read_u8(bs);\\n\\tfor (i=0; i<ptr->server_entry_count; i++) {\\n\\t\\tint j=0;\\n\\t\\tzfound = GF_FALSE;\\n\\t\\ttmp_strsize=(u32)ptr->size;\\n\\t\\twhile (tmp_strsize) {\\n\\t\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\t\\ttmp_str[j] = gf_bs_read_u8(bs);\\n\\t\\t\\ttmp_strsize--;\\n\\t\\t\\tif (!tmp_str[j]) {\\n\\t\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t\\tj++;\\n\\t\\t}\\n\\t\\tif (!zfound) {\\n\\t\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\t\\tgoto exit;\\n\\t\\t}\\n\\t\\tif (j) {\\n\\t\\t\\tgf_list_insert(ptr->server_entry_table, gf_strdup(tmp_str), i);\\n\\t\\t}\\n\\t}\\n\\tif (ptr->server_entry_count != gf_list_count(ptr->server_entry_table)) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\tptr->quality_entry_count = gf_bs_read_u8(bs);\\n\\tfor (i=0; i<ptr->quality_entry_count; i++) {\\n\\t\\tint j=0;\\n\\t\\tzfound = GF_FALSE;\\n\\t\\ttmp_strsize=(u32)ptr->size;\\n\\t\\twhile (tmp_strsize) {\\n\\t\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\t\\ttmp_str[j] = gf_bs_read_u8(bs);\\n\\t\\t\\ttmp_strsize--;\\n\\t\\t\\tif (!tmp_str[j]) {\\n\\t\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t\\tj++;\\n\\t\\t}\\n\\n\\t\\tif (!zfound) {\\n\\t\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\t\\tgoto exit;\\n\\t\\t}\\n\\t\\tif (j) {\\n\\t\\t\\tgf_list_insert(ptr->quality_entry_table, gf_strdup(tmp_str), i);\\n\\t\\t}\\n\\t}\\n\\tif (ptr->quality_entry_count != gf_list_count(ptr->quality_entry_table)) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\ti=0;\\n\\ttmp_strsize=(u32)ptr->size;\\n\\tzfound = GF_FALSE;\\n\\twhile (tmp_strsize) {\\n\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\ttmp_str[i] = gf_bs_read_u8(bs);\\n\\t\\ttmp_strsize--;\\n\\t\\tif (!tmp_str[i]) {\\n\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\ti++;\\n\\t}\\n\\tif (!zfound) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\tif (i) {\\n\\t\\tptr->drm_data = gf_strdup(tmp_str);\\n\\t}\\n\\n\\ti=0;\\n\\ttmp_strsize=(u32)ptr->size;\\n\\tzfound = GF_FALSE;\\n\\twhile (tmp_strsize) {\\n\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\ttmp_str[i] = gf_bs_read_u8(bs);\\n\\t\\ttmp_strsize--;\\n\\t\\tif (!tmp_str[i]) {\\n\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\ti++;\\n\\t}\\n\\tif (!zfound) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\tif (i) {\\n\\t\\tptr->meta_data = gf_strdup(tmp_str);\\n\\t}\\n\\n\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\tptr->segment_run_table_count = gf_bs_read_u8(bs);\\n\\tfor (i=0; i<ptr->segment_run_table_count; i++) {\\n\\t\\tGF_AdobeSegmentRunTableBox *asrt = NULL;\\n\\t\\te = gf_isom_box_parse((GF_Box **)&asrt, bs);\\n\\t\\tif (e) {\\n\\t\\t\\tif (asrt) gf_isom_box_del((GF_Box*)asrt);\\n\\t\\t\\tgoto exit;\\n\\t\\t}\\n\\t\\tgf_list_add(ptr->segment_run_table_entries, asrt);\\n\\t}\\n\\tif (ptr->segment_run_table_count != gf_list_count(ptr->segment_run_table_entries)) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\tptr->fragment_run_table_count = gf_bs_read_u8(bs);\\n\\tfor (i=0; i<ptr->fragment_run_table_count; i++) {\\n\\t\\tGF_AdobeFragmentRunTableBox *afrt = NULL;\\n\\t\\te = gf_isom_box_parse((GF_Box **)&afrt, bs);\\n\\t\\tif (e) {\\n\\t\\t\\tif (afrt) gf_isom_box_del((GF_Box*)afrt);\\n\\t\\t\\tgoto exit;\\n\\t\\t}\\n\\t\\tgf_list_add(ptr->fragment_run_table_entries, afrt);\\n\\t}\\n\\tif (ptr->fragment_run_table_count != gf_list_count(ptr->fragment_run_table_entries)) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\nexit:\\n\\tgf_free(tmp_str);\\n\\treturn e;\\n}\\n\",\n            \"caller_start\": 76,\n            \"file_path\": \"src/isomedia/box_code_adobe.c\"\n          },\n          {\n            \"call_line\": 183,\n            \"call_code\": \"ISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\",\n            \"caller_code\": \"GF_Err abst_box_read(GF_Box *s, GF_BitStream *bs)\\n{\\n\\tGF_AdobeBootstrapInfoBox *ptr = (GF_AdobeBootstrapInfoBox *)s;\\n\\tint i;\\n\\tu32 tmp_strsize;\\n\\tchar *tmp_str;\\n\\tBool zfound=GF_FALSE;\\n\\tGF_Err e = GF_OK;\\n\\n\\tISOM_DECREASE_SIZE(ptr, 25)\\n\\tptr->bootstrapinfo_version = gf_bs_read_u32(bs);\\n\\tptr->profile = gf_bs_read_int(bs, 2);\\n\\tptr->live = gf_bs_read_int(bs, 1);\\n\\tptr->update = gf_bs_read_int(bs, 1);\\n\\tptr->reserved = gf_bs_read_int(bs, 4);\\n\\tptr->time_scale = gf_bs_read_u32(bs);\\n\\tptr->current_media_time = gf_bs_read_u64(bs);\\n\\tptr->smpte_time_code_offset = gf_bs_read_u64(bs);\\n\\n\\ti=0;\\n\\tif (ptr->size<8) return GF_ISOM_INVALID_FILE;\\n\\ttmp_strsize =(u32)ptr->size;\\n\\ttmp_str = gf_malloc(sizeof(char)*(tmp_strsize+1));\\n\\tif (!tmp_str) return GF_OUT_OF_MEM;\\n\\tmemset(tmp_str, 0, sizeof(char)*(tmp_strsize+1) );\\n\\n\\twhile (tmp_strsize) {\\n\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\ttmp_str[i] = gf_bs_read_u8(bs);\\n\\t\\ttmp_strsize--;\\n\\t\\tif (!tmp_str[i]) {\\n\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\ti++;\\n\\t}\\n\\tif (!zfound) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\tif (i) {\\n\\t\\tptr->movie_identifier = gf_strdup(tmp_str);\\n\\t}\\n\\n\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\tptr->server_entry_count = gf_bs_read_u8(bs);\\n\\tfor (i=0; i<ptr->server_entry_count; i++) {\\n\\t\\tint j=0;\\n\\t\\tzfound = GF_FALSE;\\n\\t\\ttmp_strsize=(u32)ptr->size;\\n\\t\\twhile (tmp_strsize) {\\n\\t\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\t\\ttmp_str[j] = gf_bs_read_u8(bs);\\n\\t\\t\\ttmp_strsize--;\\n\\t\\t\\tif (!tmp_str[j]) {\\n\\t\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t\\tj++;\\n\\t\\t}\\n\\t\\tif (!zfound) {\\n\\t\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\t\\tgoto exit;\\n\\t\\t}\\n\\t\\tif (j) {\\n\\t\\t\\tgf_list_insert(ptr->server_entry_table, gf_strdup(tmp_str), i);\\n\\t\\t}\\n\\t}\\n\\tif (ptr->server_entry_count != gf_list_count(ptr->server_entry_table)) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\tptr->quality_entry_count = gf_bs_read_u8(bs);\\n\\tfor (i=0; i<ptr->quality_entry_count; i++) {\\n\\t\\tint j=0;\\n\\t\\tzfound = GF_FALSE;\\n\\t\\ttmp_strsize=(u32)ptr->size;\\n\\t\\twhile (tmp_strsize) {\\n\\t\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\t\\ttmp_str[j] = gf_bs_read_u8(bs);\\n\\t\\t\\ttmp_strsize--;\\n\\t\\t\\tif (!tmp_str[j]) {\\n\\t\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t\\tj++;\\n\\t\\t}\\n\\n\\t\\tif (!zfound) {\\n\\t\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\t\\tgoto exit;\\n\\t\\t}\\n\\t\\tif (j) {\\n\\t\\t\\tgf_list_insert(ptr->quality_entry_table, gf_strdup(tmp_str), i);\\n\\t\\t}\\n\\t}\\n\\tif (ptr->quality_entry_count != gf_list_count(ptr->quality_entry_table)) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\ti=0;\\n\\ttmp_strsize=(u32)ptr->size;\\n\\tzfound = GF_FALSE;\\n\\twhile (tmp_strsize) {\\n\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\ttmp_str[i] = gf_bs_read_u8(bs);\\n\\t\\ttmp_strsize--;\\n\\t\\tif (!tmp_str[i]) {\\n\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\ti++;\\n\\t}\\n\\tif (!zfound) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\tif (i) {\\n\\t\\tptr->drm_data = gf_strdup(tmp_str);\\n\\t}\\n\\n\\ti=0;\\n\\ttmp_strsize=(u32)ptr->size;\\n\\tzfound = GF_FALSE;\\n\\twhile (tmp_strsize) {\\n\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\ttmp_str[i] = gf_bs_read_u8(bs);\\n\\t\\ttmp_strsize--;\\n\\t\\tif (!tmp_str[i]) {\\n\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\ti++;\\n\\t}\\n\\tif (!zfound) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\tif (i) {\\n\\t\\tptr->meta_data = gf_strdup(tmp_str);\\n\\t}\\n\\n\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\tptr->segment_run_table_count = gf_bs_read_u8(bs);\\n\\tfor (i=0; i<ptr->segment_run_table_count; i++) {\\n\\t\\tGF_AdobeSegmentRunTableBox *asrt = NULL;\\n\\t\\te = gf_isom_box_parse((GF_Box **)&asrt, bs);\\n\\t\\tif (e) {\\n\\t\\t\\tif (asrt) gf_isom_box_del((GF_Box*)asrt);\\n\\t\\t\\tgoto exit;\\n\\t\\t}\\n\\t\\tgf_list_add(ptr->segment_run_table_entries, asrt);\\n\\t}\\n\\tif (ptr->segment_run_table_count != gf_list_count(ptr->segment_run_table_entries)) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\tptr->fragment_run_table_count = gf_bs_read_u8(bs);\\n\\tfor (i=0; i<ptr->fragment_run_table_count; i++) {\\n\\t\\tGF_AdobeFragmentRunTableBox *afrt = NULL;\\n\\t\\te = gf_isom_box_parse((GF_Box **)&afrt, bs);\\n\\t\\tif (e) {\\n\\t\\t\\tif (afrt) gf_isom_box_del((GF_Box*)afrt);\\n\\t\\t\\tgoto exit;\\n\\t\\t}\\n\\t\\tgf_list_add(ptr->fragment_run_table_entries, afrt);\\n\\t}\\n\\tif (ptr->fragment_run_table_count != gf_list_count(ptr->fragment_run_table_entries)) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\nexit:\\n\\tgf_free(tmp_str);\\n\\treturn e;\\n}\\n\",\n            \"caller_start\": 76,\n            \"file_path\": \"src/isomedia/box_code_adobe.c\"\n          },\n          {\n            \"call_line\": 205,\n            \"call_code\": \"ISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\",\n            \"caller_code\": \"GF_Err abst_box_read(GF_Box *s, GF_BitStream *bs)\\n{\\n\\tGF_AdobeBootstrapInfoBox *ptr = (GF_AdobeBootstrapInfoBox *)s;\\n\\tint i;\\n\\tu32 tmp_strsize;\\n\\tchar *tmp_str;\\n\\tBool zfound=GF_FALSE;\\n\\tGF_Err e = GF_OK;\\n\\n\\tISOM_DECREASE_SIZE(ptr, 25)\\n\\tptr->bootstrapinfo_version = gf_bs_read_u32(bs);\\n\\tptr->profile = gf_bs_read_int(bs, 2);\\n\\tptr->live = gf_bs_read_int(bs, 1);\\n\\tptr->update = gf_bs_read_int(bs, 1);\\n\\tptr->reserved = gf_bs_read_int(bs, 4);\\n\\tptr->time_scale = gf_bs_read_u32(bs);\\n\\tptr->current_media_time = gf_bs_read_u64(bs);\\n\\tptr->smpte_time_code_offset = gf_bs_read_u64(bs);\\n\\n\\ti=0;\\n\\tif (ptr->size<8) return GF_ISOM_INVALID_FILE;\\n\\ttmp_strsize =(u32)ptr->size;\\n\\ttmp_str = gf_malloc(sizeof(char)*(tmp_strsize+1));\\n\\tif (!tmp_str) return GF_OUT_OF_MEM;\\n\\tmemset(tmp_str, 0, sizeof(char)*(tmp_strsize+1) );\\n\\n\\twhile (tmp_strsize) {\\n\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\ttmp_str[i] = gf_bs_read_u8(bs);\\n\\t\\ttmp_strsize--;\\n\\t\\tif (!tmp_str[i]) {\\n\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\ti++;\\n\\t}\\n\\tif (!zfound) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\tif (i) {\\n\\t\\tptr->movie_identifier = gf_strdup(tmp_str);\\n\\t}\\n\\n\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\tptr->server_entry_count = gf_bs_read_u8(bs);\\n\\tfor (i=0; i<ptr->server_entry_count; i++) {\\n\\t\\tint j=0;\\n\\t\\tzfound = GF_FALSE;\\n\\t\\ttmp_strsize=(u32)ptr->size;\\n\\t\\twhile (tmp_strsize) {\\n\\t\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\t\\ttmp_str[j] = gf_bs_read_u8(bs);\\n\\t\\t\\ttmp_strsize--;\\n\\t\\t\\tif (!tmp_str[j]) {\\n\\t\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t\\tj++;\\n\\t\\t}\\n\\t\\tif (!zfound) {\\n\\t\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\t\\tgoto exit;\\n\\t\\t}\\n\\t\\tif (j) {\\n\\t\\t\\tgf_list_insert(ptr->server_entry_table, gf_strdup(tmp_str), i);\\n\\t\\t}\\n\\t}\\n\\tif (ptr->server_entry_count != gf_list_count(ptr->server_entry_table)) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\tptr->quality_entry_count = gf_bs_read_u8(bs);\\n\\tfor (i=0; i<ptr->quality_entry_count; i++) {\\n\\t\\tint j=0;\\n\\t\\tzfound = GF_FALSE;\\n\\t\\ttmp_strsize=(u32)ptr->size;\\n\\t\\twhile (tmp_strsize) {\\n\\t\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\t\\ttmp_str[j] = gf_bs_read_u8(bs);\\n\\t\\t\\ttmp_strsize--;\\n\\t\\t\\tif (!tmp_str[j]) {\\n\\t\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t\\tj++;\\n\\t\\t}\\n\\n\\t\\tif (!zfound) {\\n\\t\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\t\\tgoto exit;\\n\\t\\t}\\n\\t\\tif (j) {\\n\\t\\t\\tgf_list_insert(ptr->quality_entry_table, gf_strdup(tmp_str), i);\\n\\t\\t}\\n\\t}\\n\\tif (ptr->quality_entry_count != gf_list_count(ptr->quality_entry_table)) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\ti=0;\\n\\ttmp_strsize=(u32)ptr->size;\\n\\tzfound = GF_FALSE;\\n\\twhile (tmp_strsize) {\\n\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\ttmp_str[i] = gf_bs_read_u8(bs);\\n\\t\\ttmp_strsize--;\\n\\t\\tif (!tmp_str[i]) {\\n\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\ti++;\\n\\t}\\n\\tif (!zfound) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\tif (i) {\\n\\t\\tptr->drm_data = gf_strdup(tmp_str);\\n\\t}\\n\\n\\ti=0;\\n\\ttmp_strsize=(u32)ptr->size;\\n\\tzfound = GF_FALSE;\\n\\twhile (tmp_strsize) {\\n\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\ttmp_str[i] = gf_bs_read_u8(bs);\\n\\t\\ttmp_strsize--;\\n\\t\\tif (!tmp_str[i]) {\\n\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\ti++;\\n\\t}\\n\\tif (!zfound) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\tif (i) {\\n\\t\\tptr->meta_data = gf_strdup(tmp_str);\\n\\t}\\n\\n\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\tptr->segment_run_table_count = gf_bs_read_u8(bs);\\n\\tfor (i=0; i<ptr->segment_run_table_count; i++) {\\n\\t\\tGF_AdobeSegmentRunTableBox *asrt = NULL;\\n\\t\\te = gf_isom_box_parse((GF_Box **)&asrt, bs);\\n\\t\\tif (e) {\\n\\t\\t\\tif (asrt) gf_isom_box_del((GF_Box*)asrt);\\n\\t\\t\\tgoto exit;\\n\\t\\t}\\n\\t\\tgf_list_add(ptr->segment_run_table_entries, asrt);\\n\\t}\\n\\tif (ptr->segment_run_table_count != gf_list_count(ptr->segment_run_table_entries)) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\tptr->fragment_run_table_count = gf_bs_read_u8(bs);\\n\\tfor (i=0; i<ptr->fragment_run_table_count; i++) {\\n\\t\\tGF_AdobeFragmentRunTableBox *afrt = NULL;\\n\\t\\te = gf_isom_box_parse((GF_Box **)&afrt, bs);\\n\\t\\tif (e) {\\n\\t\\t\\tif (afrt) gf_isom_box_del((GF_Box*)afrt);\\n\\t\\t\\tgoto exit;\\n\\t\\t}\\n\\t\\tgf_list_add(ptr->fragment_run_table_entries, afrt);\\n\\t}\\n\\tif (ptr->fragment_run_table_count != gf_list_count(ptr->fragment_run_table_entries)) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\nexit:\\n\\tgf_free(tmp_str);\\n\\treturn e;\\n}\\n\",\n            \"caller_start\": 76,\n            \"file_path\": \"src/isomedia/box_code_adobe.c\"\n          },\n          {\n            \"call_line\": 223,\n            \"call_code\": \"ISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\",\n            \"caller_code\": \"GF_Err abst_box_read(GF_Box *s, GF_BitStream *bs)\\n{\\n\\tGF_AdobeBootstrapInfoBox *ptr = (GF_AdobeBootstrapInfoBox *)s;\\n\\tint i;\\n\\tu32 tmp_strsize;\\n\\tchar *tmp_str;\\n\\tBool zfound=GF_FALSE;\\n\\tGF_Err e = GF_OK;\\n\\n\\tISOM_DECREASE_SIZE(ptr, 25)\\n\\tptr->bootstrapinfo_version = gf_bs_read_u32(bs);\\n\\tptr->profile = gf_bs_read_int(bs, 2);\\n\\tptr->live = gf_bs_read_int(bs, 1);\\n\\tptr->update = gf_bs_read_int(bs, 1);\\n\\tptr->reserved = gf_bs_read_int(bs, 4);\\n\\tptr->time_scale = gf_bs_read_u32(bs);\\n\\tptr->current_media_time = gf_bs_read_u64(bs);\\n\\tptr->smpte_time_code_offset = gf_bs_read_u64(bs);\\n\\n\\ti=0;\\n\\tif (ptr->size<8) return GF_ISOM_INVALID_FILE;\\n\\ttmp_strsize =(u32)ptr->size;\\n\\ttmp_str = gf_malloc(sizeof(char)*(tmp_strsize+1));\\n\\tif (!tmp_str) return GF_OUT_OF_MEM;\\n\\tmemset(tmp_str, 0, sizeof(char)*(tmp_strsize+1) );\\n\\n\\twhile (tmp_strsize) {\\n\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\ttmp_str[i] = gf_bs_read_u8(bs);\\n\\t\\ttmp_strsize--;\\n\\t\\tif (!tmp_str[i]) {\\n\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\ti++;\\n\\t}\\n\\tif (!zfound) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\tif (i) {\\n\\t\\tptr->movie_identifier = gf_strdup(tmp_str);\\n\\t}\\n\\n\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\tptr->server_entry_count = gf_bs_read_u8(bs);\\n\\tfor (i=0; i<ptr->server_entry_count; i++) {\\n\\t\\tint j=0;\\n\\t\\tzfound = GF_FALSE;\\n\\t\\ttmp_strsize=(u32)ptr->size;\\n\\t\\twhile (tmp_strsize) {\\n\\t\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\t\\ttmp_str[j] = gf_bs_read_u8(bs);\\n\\t\\t\\ttmp_strsize--;\\n\\t\\t\\tif (!tmp_str[j]) {\\n\\t\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t\\tj++;\\n\\t\\t}\\n\\t\\tif (!zfound) {\\n\\t\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\t\\tgoto exit;\\n\\t\\t}\\n\\t\\tif (j) {\\n\\t\\t\\tgf_list_insert(ptr->server_entry_table, gf_strdup(tmp_str), i);\\n\\t\\t}\\n\\t}\\n\\tif (ptr->server_entry_count != gf_list_count(ptr->server_entry_table)) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\tptr->quality_entry_count = gf_bs_read_u8(bs);\\n\\tfor (i=0; i<ptr->quality_entry_count; i++) {\\n\\t\\tint j=0;\\n\\t\\tzfound = GF_FALSE;\\n\\t\\ttmp_strsize=(u32)ptr->size;\\n\\t\\twhile (tmp_strsize) {\\n\\t\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\t\\ttmp_str[j] = gf_bs_read_u8(bs);\\n\\t\\t\\ttmp_strsize--;\\n\\t\\t\\tif (!tmp_str[j]) {\\n\\t\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t\\tj++;\\n\\t\\t}\\n\\n\\t\\tif (!zfound) {\\n\\t\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\t\\tgoto exit;\\n\\t\\t}\\n\\t\\tif (j) {\\n\\t\\t\\tgf_list_insert(ptr->quality_entry_table, gf_strdup(tmp_str), i);\\n\\t\\t}\\n\\t}\\n\\tif (ptr->quality_entry_count != gf_list_count(ptr->quality_entry_table)) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\ti=0;\\n\\ttmp_strsize=(u32)ptr->size;\\n\\tzfound = GF_FALSE;\\n\\twhile (tmp_strsize) {\\n\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\ttmp_str[i] = gf_bs_read_u8(bs);\\n\\t\\ttmp_strsize--;\\n\\t\\tif (!tmp_str[i]) {\\n\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\ti++;\\n\\t}\\n\\tif (!zfound) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\tif (i) {\\n\\t\\tptr->drm_data = gf_strdup(tmp_str);\\n\\t}\\n\\n\\ti=0;\\n\\ttmp_strsize=(u32)ptr->size;\\n\\tzfound = GF_FALSE;\\n\\twhile (tmp_strsize) {\\n\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\ttmp_str[i] = gf_bs_read_u8(bs);\\n\\t\\ttmp_strsize--;\\n\\t\\tif (!tmp_str[i]) {\\n\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\ti++;\\n\\t}\\n\\tif (!zfound) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\tif (i) {\\n\\t\\tptr->meta_data = gf_strdup(tmp_str);\\n\\t}\\n\\n\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\tptr->segment_run_table_count = gf_bs_read_u8(bs);\\n\\tfor (i=0; i<ptr->segment_run_table_count; i++) {\\n\\t\\tGF_AdobeSegmentRunTableBox *asrt = NULL;\\n\\t\\te = gf_isom_box_parse((GF_Box **)&asrt, bs);\\n\\t\\tif (e) {\\n\\t\\t\\tif (asrt) gf_isom_box_del((GF_Box*)asrt);\\n\\t\\t\\tgoto exit;\\n\\t\\t}\\n\\t\\tgf_list_add(ptr->segment_run_table_entries, asrt);\\n\\t}\\n\\tif (ptr->segment_run_table_count != gf_list_count(ptr->segment_run_table_entries)) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\tptr->fragment_run_table_count = gf_bs_read_u8(bs);\\n\\tfor (i=0; i<ptr->fragment_run_table_count; i++) {\\n\\t\\tGF_AdobeFragmentRunTableBox *afrt = NULL;\\n\\t\\te = gf_isom_box_parse((GF_Box **)&afrt, bs);\\n\\t\\tif (e) {\\n\\t\\t\\tif (afrt) gf_isom_box_del((GF_Box*)afrt);\\n\\t\\t\\tgoto exit;\\n\\t\\t}\\n\\t\\tgf_list_add(ptr->fragment_run_table_entries, afrt);\\n\\t}\\n\\tif (ptr->fragment_run_table_count != gf_list_count(ptr->fragment_run_table_entries)) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\nexit:\\n\\tgf_free(tmp_str);\\n\\treturn e;\\n}\\n\",\n            \"caller_start\": 76,\n            \"file_path\": \"src/isomedia/box_code_adobe.c\"\n          }\n        ]\n      }\n    ]\n  },\n  {\n    \"stage\": \"analysis\",\n    \"need_context\": true,\n    \"root_cause_partial\": \"Original code failed to free 'str' when error conditions occurred during buffer reads. Patch adds 'gf_free(str)' at 'exit' (box_code_3gpp.c:1096) but relies on 'ISOM_DECREASE_SIZE_GOTO_EXIT' (box_code_3gpp.c:1066,1081) to trigger error paths. Without the macro's definition, the exact error propagation mechanism remains unclear.\",\n    \"required_context_next\": [\n      \"function: ISOM_DECREASE_SIZE_GOTO_EXIT\"\n    ],\n    \"analysis_summary_text\": \"The patch adds an 'exit' label with 'gf_free(str)' in dimC_box_read to ensure cleanup. It replaces 'ISOM_DECREASE_SIZE' with 'ISOM_DECREASE_SIZE_GOTO_EXIT' to trigger error paths leading to the cleanup label. However, the exact behavior of 'ISOM_DECREASE_SIZE_GOTO_EXIT' remains unclear without its macro definition. The root cause is the lack of 'str' deallocation on error conditions in the original code. To complete the chain, the macro definition of ISOM_DECREASE_SIZE_GOTO_EXIT is required.\"\n  },\n  {\n    \"stage\": \"collection\",\n    \"result\": [\n      {\n        \"source\": \"caller_info(func:ISOM_DECREASE_SIZE_GOTO_EXIT)\",\n        \"result\": [\n          {\n            \"call_line\": 103,\n            \"call_code\": \"ISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\",\n            \"caller_code\": \"GF_Err abst_box_read(GF_Box *s, GF_BitStream *bs)\\n{\\n\\tGF_AdobeBootstrapInfoBox *ptr = (GF_AdobeBootstrapInfoBox *)s;\\n\\tint i;\\n\\tu32 tmp_strsize;\\n\\tchar *tmp_str;\\n\\tBool zfound=GF_FALSE;\\n\\tGF_Err e = GF_OK;\\n\\n\\tISOM_DECREASE_SIZE(ptr, 25)\\n\\tptr->bootstrapinfo_version = gf_bs_read_u32(bs);\\n\\tptr->profile = gf_bs_read_int(bs, 2);\\n\\tptr->live = gf_bs_read_int(bs, 1);\\n\\tptr->update = gf_bs_read_int(bs, 1);\\n\\tptr->reserved = gf_bs_read_int(bs, 4);\\n\\tptr->time_scale = gf_bs_read_u32(bs);\\n\\tptr->current_media_time = gf_bs_read_u64(bs);\\n\\tptr->smpte_time_code_offset = gf_bs_read_u64(bs);\\n\\n\\ti=0;\\n\\tif (ptr->size<8) return GF_ISOM_INVALID_FILE;\\n\\ttmp_strsize =(u32)ptr->size;\\n\\ttmp_str = gf_malloc(sizeof(char)*(tmp_strsize+1));\\n\\tif (!tmp_str) return GF_OUT_OF_MEM;\\n\\tmemset(tmp_str, 0, sizeof(char)*(tmp_strsize+1) );\\n\\n\\twhile (tmp_strsize) {\\n\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\ttmp_str[i] = gf_bs_read_u8(bs);\\n\\t\\ttmp_strsize--;\\n\\t\\tif (!tmp_str[i]) {\\n\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\ti++;\\n\\t}\\n\\tif (!zfound) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\tif (i) {\\n\\t\\tptr->movie_identifier = gf_strdup(tmp_str);\\n\\t}\\n\\n\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\tptr->server_entry_count = gf_bs_read_u8(bs);\\n\\tfor (i=0; i<ptr->server_entry_count; i++) {\\n\\t\\tint j=0;\\n\\t\\tzfound = GF_FALSE;\\n\\t\\ttmp_strsize=(u32)ptr->size;\\n\\t\\twhile (tmp_strsize) {\\n\\t\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\t\\ttmp_str[j] = gf_bs_read_u8(bs);\\n\\t\\t\\ttmp_strsize--;\\n\\t\\t\\tif (!tmp_str[j]) {\\n\\t\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t\\tj++;\\n\\t\\t}\\n\\t\\tif (!zfound) {\\n\\t\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\t\\tgoto exit;\\n\\t\\t}\\n\\t\\tif (j) {\\n\\t\\t\\tgf_list_insert(ptr->server_entry_table, gf_strdup(tmp_str), i);\\n\\t\\t}\\n\\t}\\n\\tif (ptr->server_entry_count != gf_list_count(ptr->server_entry_table)) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\tptr->quality_entry_count = gf_bs_read_u8(bs);\\n\\tfor (i=0; i<ptr->quality_entry_count; i++) {\\n\\t\\tint j=0;\\n\\t\\tzfound = GF_FALSE;\\n\\t\\ttmp_strsize=(u32)ptr->size;\\n\\t\\twhile (tmp_strsize) {\\n\\t\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\t\\ttmp_str[j] = gf_bs_read_u8(bs);\\n\\t\\t\\ttmp_strsize--;\\n\\t\\t\\tif (!tmp_str[j]) {\\n\\t\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t\\tj++;\\n\\t\\t}\\n\\n\\t\\tif (!zfound) {\\n\\t\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\t\\tgoto exit;\\n\\t\\t}\\n\\t\\tif (j) {\\n\\t\\t\\tgf_list_insert(ptr->quality_entry_table, gf_strdup(tmp_str), i);\\n\\t\\t}\\n\\t}\\n\\tif (ptr->quality_entry_count != gf_list_count(ptr->quality_entry_table)) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\ti=0;\\n\\ttmp_strsize=(u32)ptr->size;\\n\\tzfound = GF_FALSE;\\n\\twhile (tmp_strsize) {\\n\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\ttmp_str[i] = gf_bs_read_u8(bs);\\n\\t\\ttmp_strsize--;\\n\\t\\tif (!tmp_str[i]) {\\n\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\ti++;\\n\\t}\\n\\tif (!zfound) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\tif (i) {\\n\\t\\tptr->drm_data = gf_strdup(tmp_str);\\n\\t}\\n\\n\\ti=0;\\n\\ttmp_strsize=(u32)ptr->size;\\n\\tzfound = GF_FALSE;\\n\\twhile (tmp_strsize) {\\n\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\ttmp_str[i] = gf_bs_read_u8(bs);\\n\\t\\ttmp_strsize--;\\n\\t\\tif (!tmp_str[i]) {\\n\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\ti++;\\n\\t}\\n\\tif (!zfound) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\tif (i) {\\n\\t\\tptr->meta_data = gf_strdup(tmp_str);\\n\\t}\\n\\n\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\tptr->segment_run_table_count = gf_bs_read_u8(bs);\\n\\tfor (i=0; i<ptr->segment_run_table_count; i++) {\\n\\t\\tGF_AdobeSegmentRunTableBox *asrt = NULL;\\n\\t\\te = gf_isom_box_parse((GF_Box **)&asrt, bs);\\n\\t\\tif (e) {\\n\\t\\t\\tif (asrt) gf_isom_box_del((GF_Box*)asrt);\\n\\t\\t\\tgoto exit;\\n\\t\\t}\\n\\t\\tgf_list_add(ptr->segment_run_table_entries, asrt);\\n\\t}\\n\\tif (ptr->segment_run_table_count != gf_list_count(ptr->segment_run_table_entries)) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\tptr->fragment_run_table_count = gf_bs_read_u8(bs);\\n\\tfor (i=0; i<ptr->fragment_run_table_count; i++) {\\n\\t\\tGF_AdobeFragmentRunTableBox *afrt = NULL;\\n\\t\\te = gf_isom_box_parse((GF_Box **)&afrt, bs);\\n\\t\\tif (e) {\\n\\t\\t\\tif (afrt) gf_isom_box_del((GF_Box*)afrt);\\n\\t\\t\\tgoto exit;\\n\\t\\t}\\n\\t\\tgf_list_add(ptr->fragment_run_table_entries, afrt);\\n\\t}\\n\\tif (ptr->fragment_run_table_count != gf_list_count(ptr->fragment_run_table_entries)) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\nexit:\\n\\tgf_free(tmp_str);\\n\\treturn e;\\n}\\n\",\n            \"caller_start\": 76,\n            \"file_path\": \"src/isomedia/box_code_adobe.c\"\n          },\n          {\n            \"call_line\": 120,\n            \"call_code\": \"ISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\",\n            \"caller_code\": \"GF_Err abst_box_read(GF_Box *s, GF_BitStream *bs)\\n{\\n\\tGF_AdobeBootstrapInfoBox *ptr = (GF_AdobeBootstrapInfoBox *)s;\\n\\tint i;\\n\\tu32 tmp_strsize;\\n\\tchar *tmp_str;\\n\\tBool zfound=GF_FALSE;\\n\\tGF_Err e = GF_OK;\\n\\n\\tISOM_DECREASE_SIZE(ptr, 25)\\n\\tptr->bootstrapinfo_version = gf_bs_read_u32(bs);\\n\\tptr->profile = gf_bs_read_int(bs, 2);\\n\\tptr->live = gf_bs_read_int(bs, 1);\\n\\tptr->update = gf_bs_read_int(bs, 1);\\n\\tptr->reserved = gf_bs_read_int(bs, 4);\\n\\tptr->time_scale = gf_bs_read_u32(bs);\\n\\tptr->current_media_time = gf_bs_read_u64(bs);\\n\\tptr->smpte_time_code_offset = gf_bs_read_u64(bs);\\n\\n\\ti=0;\\n\\tif (ptr->size<8) return GF_ISOM_INVALID_FILE;\\n\\ttmp_strsize =(u32)ptr->size;\\n\\ttmp_str = gf_malloc(sizeof(char)*(tmp_strsize+1));\\n\\tif (!tmp_str) return GF_OUT_OF_MEM;\\n\\tmemset(tmp_str, 0, sizeof(char)*(tmp_strsize+1) );\\n\\n\\twhile (tmp_strsize) {\\n\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\ttmp_str[i] = gf_bs_read_u8(bs);\\n\\t\\ttmp_strsize--;\\n\\t\\tif (!tmp_str[i]) {\\n\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\ti++;\\n\\t}\\n\\tif (!zfound) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\tif (i) {\\n\\t\\tptr->movie_identifier = gf_strdup(tmp_str);\\n\\t}\\n\\n\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\tptr->server_entry_count = gf_bs_read_u8(bs);\\n\\tfor (i=0; i<ptr->server_entry_count; i++) {\\n\\t\\tint j=0;\\n\\t\\tzfound = GF_FALSE;\\n\\t\\ttmp_strsize=(u32)ptr->size;\\n\\t\\twhile (tmp_strsize) {\\n\\t\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\t\\ttmp_str[j] = gf_bs_read_u8(bs);\\n\\t\\t\\ttmp_strsize--;\\n\\t\\t\\tif (!tmp_str[j]) {\\n\\t\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t\\tj++;\\n\\t\\t}\\n\\t\\tif (!zfound) {\\n\\t\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\t\\tgoto exit;\\n\\t\\t}\\n\\t\\tif (j) {\\n\\t\\t\\tgf_list_insert(ptr->server_entry_table, gf_strdup(tmp_str), i);\\n\\t\\t}\\n\\t}\\n\\tif (ptr->server_entry_count != gf_list_count(ptr->server_entry_table)) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\tptr->quality_entry_count = gf_bs_read_u8(bs);\\n\\tfor (i=0; i<ptr->quality_entry_count; i++) {\\n\\t\\tint j=0;\\n\\t\\tzfound = GF_FALSE;\\n\\t\\ttmp_strsize=(u32)ptr->size;\\n\\t\\twhile (tmp_strsize) {\\n\\t\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\t\\ttmp_str[j] = gf_bs_read_u8(bs);\\n\\t\\t\\ttmp_strsize--;\\n\\t\\t\\tif (!tmp_str[j]) {\\n\\t\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t\\tj++;\\n\\t\\t}\\n\\n\\t\\tif (!zfound) {\\n\\t\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\t\\tgoto exit;\\n\\t\\t}\\n\\t\\tif (j) {\\n\\t\\t\\tgf_list_insert(ptr->quality_entry_table, gf_strdup(tmp_str), i);\\n\\t\\t}\\n\\t}\\n\\tif (ptr->quality_entry_count != gf_list_count(ptr->quality_entry_table)) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\ti=0;\\n\\ttmp_strsize=(u32)ptr->size;\\n\\tzfound = GF_FALSE;\\n\\twhile (tmp_strsize) {\\n\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\ttmp_str[i] = gf_bs_read_u8(bs);\\n\\t\\ttmp_strsize--;\\n\\t\\tif (!tmp_str[i]) {\\n\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\ti++;\\n\\t}\\n\\tif (!zfound) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\tif (i) {\\n\\t\\tptr->drm_data = gf_strdup(tmp_str);\\n\\t}\\n\\n\\ti=0;\\n\\ttmp_strsize=(u32)ptr->size;\\n\\tzfound = GF_FALSE;\\n\\twhile (tmp_strsize) {\\n\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\ttmp_str[i] = gf_bs_read_u8(bs);\\n\\t\\ttmp_strsize--;\\n\\t\\tif (!tmp_str[i]) {\\n\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\ti++;\\n\\t}\\n\\tif (!zfound) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\tif (i) {\\n\\t\\tptr->meta_data = gf_strdup(tmp_str);\\n\\t}\\n\\n\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\tptr->segment_run_table_count = gf_bs_read_u8(bs);\\n\\tfor (i=0; i<ptr->segment_run_table_count; i++) {\\n\\t\\tGF_AdobeSegmentRunTableBox *asrt = NULL;\\n\\t\\te = gf_isom_box_parse((GF_Box **)&asrt, bs);\\n\\t\\tif (e) {\\n\\t\\t\\tif (asrt) gf_isom_box_del((GF_Box*)asrt);\\n\\t\\t\\tgoto exit;\\n\\t\\t}\\n\\t\\tgf_list_add(ptr->segment_run_table_entries, asrt);\\n\\t}\\n\\tif (ptr->segment_run_table_count != gf_list_count(ptr->segment_run_table_entries)) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\tptr->fragment_run_table_count = gf_bs_read_u8(bs);\\n\\tfor (i=0; i<ptr->fragment_run_table_count; i++) {\\n\\t\\tGF_AdobeFragmentRunTableBox *afrt = NULL;\\n\\t\\te = gf_isom_box_parse((GF_Box **)&afrt, bs);\\n\\t\\tif (e) {\\n\\t\\t\\tif (afrt) gf_isom_box_del((GF_Box*)afrt);\\n\\t\\t\\tgoto exit;\\n\\t\\t}\\n\\t\\tgf_list_add(ptr->fragment_run_table_entries, afrt);\\n\\t}\\n\\tif (ptr->fragment_run_table_count != gf_list_count(ptr->fragment_run_table_entries)) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\nexit:\\n\\tgf_free(tmp_str);\\n\\treturn e;\\n}\\n\",\n            \"caller_start\": 76,\n            \"file_path\": \"src/isomedia/box_code_adobe.c\"\n          },\n          {\n            \"call_line\": 127,\n            \"call_code\": \"ISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\",\n            \"caller_code\": \"GF_Err abst_box_read(GF_Box *s, GF_BitStream *bs)\\n{\\n\\tGF_AdobeBootstrapInfoBox *ptr = (GF_AdobeBootstrapInfoBox *)s;\\n\\tint i;\\n\\tu32 tmp_strsize;\\n\\tchar *tmp_str;\\n\\tBool zfound=GF_FALSE;\\n\\tGF_Err e = GF_OK;\\n\\n\\tISOM_DECREASE_SIZE(ptr, 25)\\n\\tptr->bootstrapinfo_version = gf_bs_read_u32(bs);\\n\\tptr->profile = gf_bs_read_int(bs, 2);\\n\\tptr->live = gf_bs_read_int(bs, 1);\\n\\tptr->update = gf_bs_read_int(bs, 1);\\n\\tptr->reserved = gf_bs_read_int(bs, 4);\\n\\tptr->time_scale = gf_bs_read_u32(bs);\\n\\tptr->current_media_time = gf_bs_read_u64(bs);\\n\\tptr->smpte_time_code_offset = gf_bs_read_u64(bs);\\n\\n\\ti=0;\\n\\tif (ptr->size<8) return GF_ISOM_INVALID_FILE;\\n\\ttmp_strsize =(u32)ptr->size;\\n\\ttmp_str = gf_malloc(sizeof(char)*(tmp_strsize+1));\\n\\tif (!tmp_str) return GF_OUT_OF_MEM;\\n\\tmemset(tmp_str, 0, sizeof(char)*(tmp_strsize+1) );\\n\\n\\twhile (tmp_strsize) {\\n\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\ttmp_str[i] = gf_bs_read_u8(bs);\\n\\t\\ttmp_strsize--;\\n\\t\\tif (!tmp_str[i]) {\\n\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\ti++;\\n\\t}\\n\\tif (!zfound) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\tif (i) {\\n\\t\\tptr->movie_identifier = gf_strdup(tmp_str);\\n\\t}\\n\\n\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\tptr->server_entry_count = gf_bs_read_u8(bs);\\n\\tfor (i=0; i<ptr->server_entry_count; i++) {\\n\\t\\tint j=0;\\n\\t\\tzfound = GF_FALSE;\\n\\t\\ttmp_strsize=(u32)ptr->size;\\n\\t\\twhile (tmp_strsize) {\\n\\t\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\t\\ttmp_str[j] = gf_bs_read_u8(bs);\\n\\t\\t\\ttmp_strsize--;\\n\\t\\t\\tif (!tmp_str[j]) {\\n\\t\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t\\tj++;\\n\\t\\t}\\n\\t\\tif (!zfound) {\\n\\t\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\t\\tgoto exit;\\n\\t\\t}\\n\\t\\tif (j) {\\n\\t\\t\\tgf_list_insert(ptr->server_entry_table, gf_strdup(tmp_str), i);\\n\\t\\t}\\n\\t}\\n\\tif (ptr->server_entry_count != gf_list_count(ptr->server_entry_table)) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\tptr->quality_entry_count = gf_bs_read_u8(bs);\\n\\tfor (i=0; i<ptr->quality_entry_count; i++) {\\n\\t\\tint j=0;\\n\\t\\tzfound = GF_FALSE;\\n\\t\\ttmp_strsize=(u32)ptr->size;\\n\\t\\twhile (tmp_strsize) {\\n\\t\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\t\\ttmp_str[j] = gf_bs_read_u8(bs);\\n\\t\\t\\ttmp_strsize--;\\n\\t\\t\\tif (!tmp_str[j]) {\\n\\t\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t\\tj++;\\n\\t\\t}\\n\\n\\t\\tif (!zfound) {\\n\\t\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\t\\tgoto exit;\\n\\t\\t}\\n\\t\\tif (j) {\\n\\t\\t\\tgf_list_insert(ptr->quality_entry_table, gf_strdup(tmp_str), i);\\n\\t\\t}\\n\\t}\\n\\tif (ptr->quality_entry_count != gf_list_count(ptr->quality_entry_table)) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\ti=0;\\n\\ttmp_strsize=(u32)ptr->size;\\n\\tzfound = GF_FALSE;\\n\\twhile (tmp_strsize) {\\n\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\ttmp_str[i] = gf_bs_read_u8(bs);\\n\\t\\ttmp_strsize--;\\n\\t\\tif (!tmp_str[i]) {\\n\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\ti++;\\n\\t}\\n\\tif (!zfound) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\tif (i) {\\n\\t\\tptr->drm_data = gf_strdup(tmp_str);\\n\\t}\\n\\n\\ti=0;\\n\\ttmp_strsize=(u32)ptr->size;\\n\\tzfound = GF_FALSE;\\n\\twhile (tmp_strsize) {\\n\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\ttmp_str[i] = gf_bs_read_u8(bs);\\n\\t\\ttmp_strsize--;\\n\\t\\tif (!tmp_str[i]) {\\n\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\ti++;\\n\\t}\\n\\tif (!zfound) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\tif (i) {\\n\\t\\tptr->meta_data = gf_strdup(tmp_str);\\n\\t}\\n\\n\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\tptr->segment_run_table_count = gf_bs_read_u8(bs);\\n\\tfor (i=0; i<ptr->segment_run_table_count; i++) {\\n\\t\\tGF_AdobeSegmentRunTableBox *asrt = NULL;\\n\\t\\te = gf_isom_box_parse((GF_Box **)&asrt, bs);\\n\\t\\tif (e) {\\n\\t\\t\\tif (asrt) gf_isom_box_del((GF_Box*)asrt);\\n\\t\\t\\tgoto exit;\\n\\t\\t}\\n\\t\\tgf_list_add(ptr->segment_run_table_entries, asrt);\\n\\t}\\n\\tif (ptr->segment_run_table_count != gf_list_count(ptr->segment_run_table_entries)) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\tptr->fragment_run_table_count = gf_bs_read_u8(bs);\\n\\tfor (i=0; i<ptr->fragment_run_table_count; i++) {\\n\\t\\tGF_AdobeFragmentRunTableBox *afrt = NULL;\\n\\t\\te = gf_isom_box_parse((GF_Box **)&afrt, bs);\\n\\t\\tif (e) {\\n\\t\\t\\tif (afrt) gf_isom_box_del((GF_Box*)afrt);\\n\\t\\t\\tgoto exit;\\n\\t\\t}\\n\\t\\tgf_list_add(ptr->fragment_run_table_entries, afrt);\\n\\t}\\n\\tif (ptr->fragment_run_table_count != gf_list_count(ptr->fragment_run_table_entries)) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\nexit:\\n\\tgf_free(tmp_str);\\n\\treturn e;\\n}\\n\",\n            \"caller_start\": 76,\n            \"file_path\": \"src/isomedia/box_code_adobe.c\"\n          },\n          {\n            \"call_line\": 149,\n            \"call_code\": \"ISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\",\n            \"caller_code\": \"GF_Err abst_box_read(GF_Box *s, GF_BitStream *bs)\\n{\\n\\tGF_AdobeBootstrapInfoBox *ptr = (GF_AdobeBootstrapInfoBox *)s;\\n\\tint i;\\n\\tu32 tmp_strsize;\\n\\tchar *tmp_str;\\n\\tBool zfound=GF_FALSE;\\n\\tGF_Err e = GF_OK;\\n\\n\\tISOM_DECREASE_SIZE(ptr, 25)\\n\\tptr->bootstrapinfo_version = gf_bs_read_u32(bs);\\n\\tptr->profile = gf_bs_read_int(bs, 2);\\n\\tptr->live = gf_bs_read_int(bs, 1);\\n\\tptr->update = gf_bs_read_int(bs, 1);\\n\\tptr->reserved = gf_bs_read_int(bs, 4);\\n\\tptr->time_scale = gf_bs_read_u32(bs);\\n\\tptr->current_media_time = gf_bs_read_u64(bs);\\n\\tptr->smpte_time_code_offset = gf_bs_read_u64(bs);\\n\\n\\ti=0;\\n\\tif (ptr->size<8) return GF_ISOM_INVALID_FILE;\\n\\ttmp_strsize =(u32)ptr->size;\\n\\ttmp_str = gf_malloc(sizeof(char)*(tmp_strsize+1));\\n\\tif (!tmp_str) return GF_OUT_OF_MEM;\\n\\tmemset(tmp_str, 0, sizeof(char)*(tmp_strsize+1) );\\n\\n\\twhile (tmp_strsize) {\\n\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\ttmp_str[i] = gf_bs_read_u8(bs);\\n\\t\\ttmp_strsize--;\\n\\t\\tif (!tmp_str[i]) {\\n\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\ti++;\\n\\t}\\n\\tif (!zfound) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\tif (i) {\\n\\t\\tptr->movie_identifier = gf_strdup(tmp_str);\\n\\t}\\n\\n\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\tptr->server_entry_count = gf_bs_read_u8(bs);\\n\\tfor (i=0; i<ptr->server_entry_count; i++) {\\n\\t\\tint j=0;\\n\\t\\tzfound = GF_FALSE;\\n\\t\\ttmp_strsize=(u32)ptr->size;\\n\\t\\twhile (tmp_strsize) {\\n\\t\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\t\\ttmp_str[j] = gf_bs_read_u8(bs);\\n\\t\\t\\ttmp_strsize--;\\n\\t\\t\\tif (!tmp_str[j]) {\\n\\t\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t\\tj++;\\n\\t\\t}\\n\\t\\tif (!zfound) {\\n\\t\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\t\\tgoto exit;\\n\\t\\t}\\n\\t\\tif (j) {\\n\\t\\t\\tgf_list_insert(ptr->server_entry_table, gf_strdup(tmp_str), i);\\n\\t\\t}\\n\\t}\\n\\tif (ptr->server_entry_count != gf_list_count(ptr->server_entry_table)) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\tptr->quality_entry_count = gf_bs_read_u8(bs);\\n\\tfor (i=0; i<ptr->quality_entry_count; i++) {\\n\\t\\tint j=0;\\n\\t\\tzfound = GF_FALSE;\\n\\t\\ttmp_strsize=(u32)ptr->size;\\n\\t\\twhile (tmp_strsize) {\\n\\t\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\t\\ttmp_str[j] = gf_bs_read_u8(bs);\\n\\t\\t\\ttmp_strsize--;\\n\\t\\t\\tif (!tmp_str[j]) {\\n\\t\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t\\tj++;\\n\\t\\t}\\n\\n\\t\\tif (!zfound) {\\n\\t\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\t\\tgoto exit;\\n\\t\\t}\\n\\t\\tif (j) {\\n\\t\\t\\tgf_list_insert(ptr->quality_entry_table, gf_strdup(tmp_str), i);\\n\\t\\t}\\n\\t}\\n\\tif (ptr->quality_entry_count != gf_list_count(ptr->quality_entry_table)) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\ti=0;\\n\\ttmp_strsize=(u32)ptr->size;\\n\\tzfound = GF_FALSE;\\n\\twhile (tmp_strsize) {\\n\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\ttmp_str[i] = gf_bs_read_u8(bs);\\n\\t\\ttmp_strsize--;\\n\\t\\tif (!tmp_str[i]) {\\n\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\ti++;\\n\\t}\\n\\tif (!zfound) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\tif (i) {\\n\\t\\tptr->drm_data = gf_strdup(tmp_str);\\n\\t}\\n\\n\\ti=0;\\n\\ttmp_strsize=(u32)ptr->size;\\n\\tzfound = GF_FALSE;\\n\\twhile (tmp_strsize) {\\n\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\ttmp_str[i] = gf_bs_read_u8(bs);\\n\\t\\ttmp_strsize--;\\n\\t\\tif (!tmp_str[i]) {\\n\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\ti++;\\n\\t}\\n\\tif (!zfound) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\tif (i) {\\n\\t\\tptr->meta_data = gf_strdup(tmp_str);\\n\\t}\\n\\n\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\tptr->segment_run_table_count = gf_bs_read_u8(bs);\\n\\tfor (i=0; i<ptr->segment_run_table_count; i++) {\\n\\t\\tGF_AdobeSegmentRunTableBox *asrt = NULL;\\n\\t\\te = gf_isom_box_parse((GF_Box **)&asrt, bs);\\n\\t\\tif (e) {\\n\\t\\t\\tif (asrt) gf_isom_box_del((GF_Box*)asrt);\\n\\t\\t\\tgoto exit;\\n\\t\\t}\\n\\t\\tgf_list_add(ptr->segment_run_table_entries, asrt);\\n\\t}\\n\\tif (ptr->segment_run_table_count != gf_list_count(ptr->segment_run_table_entries)) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\tptr->fragment_run_table_count = gf_bs_read_u8(bs);\\n\\tfor (i=0; i<ptr->fragment_run_table_count; i++) {\\n\\t\\tGF_AdobeFragmentRunTableBox *afrt = NULL;\\n\\t\\te = gf_isom_box_parse((GF_Box **)&afrt, bs);\\n\\t\\tif (e) {\\n\\t\\t\\tif (afrt) gf_isom_box_del((GF_Box*)afrt);\\n\\t\\t\\tgoto exit;\\n\\t\\t}\\n\\t\\tgf_list_add(ptr->fragment_run_table_entries, afrt);\\n\\t}\\n\\tif (ptr->fragment_run_table_count != gf_list_count(ptr->fragment_run_table_entries)) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\nexit:\\n\\tgf_free(tmp_str);\\n\\treturn e;\\n}\\n\",\n            \"caller_start\": 76,\n            \"file_path\": \"src/isomedia/box_code_adobe.c\"\n          },\n          {\n            \"call_line\": 156,\n            \"call_code\": \"ISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\",\n            \"caller_code\": \"GF_Err abst_box_read(GF_Box *s, GF_BitStream *bs)\\n{\\n\\tGF_AdobeBootstrapInfoBox *ptr = (GF_AdobeBootstrapInfoBox *)s;\\n\\tint i;\\n\\tu32 tmp_strsize;\\n\\tchar *tmp_str;\\n\\tBool zfound=GF_FALSE;\\n\\tGF_Err e = GF_OK;\\n\\n\\tISOM_DECREASE_SIZE(ptr, 25)\\n\\tptr->bootstrapinfo_version = gf_bs_read_u32(bs);\\n\\tptr->profile = gf_bs_read_int(bs, 2);\\n\\tptr->live = gf_bs_read_int(bs, 1);\\n\\tptr->update = gf_bs_read_int(bs, 1);\\n\\tptr->reserved = gf_bs_read_int(bs, 4);\\n\\tptr->time_scale = gf_bs_read_u32(bs);\\n\\tptr->current_media_time = gf_bs_read_u64(bs);\\n\\tptr->smpte_time_code_offset = gf_bs_read_u64(bs);\\n\\n\\ti=0;\\n\\tif (ptr->size<8) return GF_ISOM_INVALID_FILE;\\n\\ttmp_strsize =(u32)ptr->size;\\n\\ttmp_str = gf_malloc(sizeof(char)*(tmp_strsize+1));\\n\\tif (!tmp_str) return GF_OUT_OF_MEM;\\n\\tmemset(tmp_str, 0, sizeof(char)*(tmp_strsize+1) );\\n\\n\\twhile (tmp_strsize) {\\n\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\ttmp_str[i] = gf_bs_read_u8(bs);\\n\\t\\ttmp_strsize--;\\n\\t\\tif (!tmp_str[i]) {\\n\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\ti++;\\n\\t}\\n\\tif (!zfound) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\tif (i) {\\n\\t\\tptr->movie_identifier = gf_strdup(tmp_str);\\n\\t}\\n\\n\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\tptr->server_entry_count = gf_bs_read_u8(bs);\\n\\tfor (i=0; i<ptr->server_entry_count; i++) {\\n\\t\\tint j=0;\\n\\t\\tzfound = GF_FALSE;\\n\\t\\ttmp_strsize=(u32)ptr->size;\\n\\t\\twhile (tmp_strsize) {\\n\\t\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\t\\ttmp_str[j] = gf_bs_read_u8(bs);\\n\\t\\t\\ttmp_strsize--;\\n\\t\\t\\tif (!tmp_str[j]) {\\n\\t\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t\\tj++;\\n\\t\\t}\\n\\t\\tif (!zfound) {\\n\\t\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\t\\tgoto exit;\\n\\t\\t}\\n\\t\\tif (j) {\\n\\t\\t\\tgf_list_insert(ptr->server_entry_table, gf_strdup(tmp_str), i);\\n\\t\\t}\\n\\t}\\n\\tif (ptr->server_entry_count != gf_list_count(ptr->server_entry_table)) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\tptr->quality_entry_count = gf_bs_read_u8(bs);\\n\\tfor (i=0; i<ptr->quality_entry_count; i++) {\\n\\t\\tint j=0;\\n\\t\\tzfound = GF_FALSE;\\n\\t\\ttmp_strsize=(u32)ptr->size;\\n\\t\\twhile (tmp_strsize) {\\n\\t\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\t\\ttmp_str[j] = gf_bs_read_u8(bs);\\n\\t\\t\\ttmp_strsize--;\\n\\t\\t\\tif (!tmp_str[j]) {\\n\\t\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t\\tj++;\\n\\t\\t}\\n\\n\\t\\tif (!zfound) {\\n\\t\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\t\\tgoto exit;\\n\\t\\t}\\n\\t\\tif (j) {\\n\\t\\t\\tgf_list_insert(ptr->quality_entry_table, gf_strdup(tmp_str), i);\\n\\t\\t}\\n\\t}\\n\\tif (ptr->quality_entry_count != gf_list_count(ptr->quality_entry_table)) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\ti=0;\\n\\ttmp_strsize=(u32)ptr->size;\\n\\tzfound = GF_FALSE;\\n\\twhile (tmp_strsize) {\\n\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\ttmp_str[i] = gf_bs_read_u8(bs);\\n\\t\\ttmp_strsize--;\\n\\t\\tif (!tmp_str[i]) {\\n\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\ti++;\\n\\t}\\n\\tif (!zfound) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\tif (i) {\\n\\t\\tptr->drm_data = gf_strdup(tmp_str);\\n\\t}\\n\\n\\ti=0;\\n\\ttmp_strsize=(u32)ptr->size;\\n\\tzfound = GF_FALSE;\\n\\twhile (tmp_strsize) {\\n\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\ttmp_str[i] = gf_bs_read_u8(bs);\\n\\t\\ttmp_strsize--;\\n\\t\\tif (!tmp_str[i]) {\\n\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\ti++;\\n\\t}\\n\\tif (!zfound) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\tif (i) {\\n\\t\\tptr->meta_data = gf_strdup(tmp_str);\\n\\t}\\n\\n\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\tptr->segment_run_table_count = gf_bs_read_u8(bs);\\n\\tfor (i=0; i<ptr->segment_run_table_count; i++) {\\n\\t\\tGF_AdobeSegmentRunTableBox *asrt = NULL;\\n\\t\\te = gf_isom_box_parse((GF_Box **)&asrt, bs);\\n\\t\\tif (e) {\\n\\t\\t\\tif (asrt) gf_isom_box_del((GF_Box*)asrt);\\n\\t\\t\\tgoto exit;\\n\\t\\t}\\n\\t\\tgf_list_add(ptr->segment_run_table_entries, asrt);\\n\\t}\\n\\tif (ptr->segment_run_table_count != gf_list_count(ptr->segment_run_table_entries)) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\tptr->fragment_run_table_count = gf_bs_read_u8(bs);\\n\\tfor (i=0; i<ptr->fragment_run_table_count; i++) {\\n\\t\\tGF_AdobeFragmentRunTableBox *afrt = NULL;\\n\\t\\te = gf_isom_box_parse((GF_Box **)&afrt, bs);\\n\\t\\tif (e) {\\n\\t\\t\\tif (afrt) gf_isom_box_del((GF_Box*)afrt);\\n\\t\\t\\tgoto exit;\\n\\t\\t}\\n\\t\\tgf_list_add(ptr->fragment_run_table_entries, afrt);\\n\\t}\\n\\tif (ptr->fragment_run_table_count != gf_list_count(ptr->fragment_run_table_entries)) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\nexit:\\n\\tgf_free(tmp_str);\\n\\treturn e;\\n}\\n\",\n            \"caller_start\": 76,\n            \"file_path\": \"src/isomedia/box_code_adobe.c\"\n          },\n          {\n            \"call_line\": 183,\n            \"call_code\": \"ISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\",\n            \"caller_code\": \"GF_Err abst_box_read(GF_Box *s, GF_BitStream *bs)\\n{\\n\\tGF_AdobeBootstrapInfoBox *ptr = (GF_AdobeBootstrapInfoBox *)s;\\n\\tint i;\\n\\tu32 tmp_strsize;\\n\\tchar *tmp_str;\\n\\tBool zfound=GF_FALSE;\\n\\tGF_Err e = GF_OK;\\n\\n\\tISOM_DECREASE_SIZE(ptr, 25)\\n\\tptr->bootstrapinfo_version = gf_bs_read_u32(bs);\\n\\tptr->profile = gf_bs_read_int(bs, 2);\\n\\tptr->live = gf_bs_read_int(bs, 1);\\n\\tptr->update = gf_bs_read_int(bs, 1);\\n\\tptr->reserved = gf_bs_read_int(bs, 4);\\n\\tptr->time_scale = gf_bs_read_u32(bs);\\n\\tptr->current_media_time = gf_bs_read_u64(bs);\\n\\tptr->smpte_time_code_offset = gf_bs_read_u64(bs);\\n\\n\\ti=0;\\n\\tif (ptr->size<8) return GF_ISOM_INVALID_FILE;\\n\\ttmp_strsize =(u32)ptr->size;\\n\\ttmp_str = gf_malloc(sizeof(char)*(tmp_strsize+1));\\n\\tif (!tmp_str) return GF_OUT_OF_MEM;\\n\\tmemset(tmp_str, 0, sizeof(char)*(tmp_strsize+1) );\\n\\n\\twhile (tmp_strsize) {\\n\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\ttmp_str[i] = gf_bs_read_u8(bs);\\n\\t\\ttmp_strsize--;\\n\\t\\tif (!tmp_str[i]) {\\n\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\ti++;\\n\\t}\\n\\tif (!zfound) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\tif (i) {\\n\\t\\tptr->movie_identifier = gf_strdup(tmp_str);\\n\\t}\\n\\n\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\tptr->server_entry_count = gf_bs_read_u8(bs);\\n\\tfor (i=0; i<ptr->server_entry_count; i++) {\\n\\t\\tint j=0;\\n\\t\\tzfound = GF_FALSE;\\n\\t\\ttmp_strsize=(u32)ptr->size;\\n\\t\\twhile (tmp_strsize) {\\n\\t\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\t\\ttmp_str[j] = gf_bs_read_u8(bs);\\n\\t\\t\\ttmp_strsize--;\\n\\t\\t\\tif (!tmp_str[j]) {\\n\\t\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t\\tj++;\\n\\t\\t}\\n\\t\\tif (!zfound) {\\n\\t\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\t\\tgoto exit;\\n\\t\\t}\\n\\t\\tif (j) {\\n\\t\\t\\tgf_list_insert(ptr->server_entry_table, gf_strdup(tmp_str), i);\\n\\t\\t}\\n\\t}\\n\\tif (ptr->server_entry_count != gf_list_count(ptr->server_entry_table)) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\tptr->quality_entry_count = gf_bs_read_u8(bs);\\n\\tfor (i=0; i<ptr->quality_entry_count; i++) {\\n\\t\\tint j=0;\\n\\t\\tzfound = GF_FALSE;\\n\\t\\ttmp_strsize=(u32)ptr->size;\\n\\t\\twhile (tmp_strsize) {\\n\\t\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\t\\ttmp_str[j] = gf_bs_read_u8(bs);\\n\\t\\t\\ttmp_strsize--;\\n\\t\\t\\tif (!tmp_str[j]) {\\n\\t\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t\\tj++;\\n\\t\\t}\\n\\n\\t\\tif (!zfound) {\\n\\t\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\t\\tgoto exit;\\n\\t\\t}\\n\\t\\tif (j) {\\n\\t\\t\\tgf_list_insert(ptr->quality_entry_table, gf_strdup(tmp_str), i);\\n\\t\\t}\\n\\t}\\n\\tif (ptr->quality_entry_count != gf_list_count(ptr->quality_entry_table)) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\ti=0;\\n\\ttmp_strsize=(u32)ptr->size;\\n\\tzfound = GF_FALSE;\\n\\twhile (tmp_strsize) {\\n\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\ttmp_str[i] = gf_bs_read_u8(bs);\\n\\t\\ttmp_strsize--;\\n\\t\\tif (!tmp_str[i]) {\\n\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\ti++;\\n\\t}\\n\\tif (!zfound) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\tif (i) {\\n\\t\\tptr->drm_data = gf_strdup(tmp_str);\\n\\t}\\n\\n\\ti=0;\\n\\ttmp_strsize=(u32)ptr->size;\\n\\tzfound = GF_FALSE;\\n\\twhile (tmp_strsize) {\\n\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\ttmp_str[i] = gf_bs_read_u8(bs);\\n\\t\\ttmp_strsize--;\\n\\t\\tif (!tmp_str[i]) {\\n\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\ti++;\\n\\t}\\n\\tif (!zfound) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\tif (i) {\\n\\t\\tptr->meta_data = gf_strdup(tmp_str);\\n\\t}\\n\\n\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\tptr->segment_run_table_count = gf_bs_read_u8(bs);\\n\\tfor (i=0; i<ptr->segment_run_table_count; i++) {\\n\\t\\tGF_AdobeSegmentRunTableBox *asrt = NULL;\\n\\t\\te = gf_isom_box_parse((GF_Box **)&asrt, bs);\\n\\t\\tif (e) {\\n\\t\\t\\tif (asrt) gf_isom_box_del((GF_Box*)asrt);\\n\\t\\t\\tgoto exit;\\n\\t\\t}\\n\\t\\tgf_list_add(ptr->segment_run_table_entries, asrt);\\n\\t}\\n\\tif (ptr->segment_run_table_count != gf_list_count(ptr->segment_run_table_entries)) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\tptr->fragment_run_table_count = gf_bs_read_u8(bs);\\n\\tfor (i=0; i<ptr->fragment_run_table_count; i++) {\\n\\t\\tGF_AdobeFragmentRunTableBox *afrt = NULL;\\n\\t\\te = gf_isom_box_parse((GF_Box **)&afrt, bs);\\n\\t\\tif (e) {\\n\\t\\t\\tif (afrt) gf_isom_box_del((GF_Box*)afrt);\\n\\t\\t\\tgoto exit;\\n\\t\\t}\\n\\t\\tgf_list_add(ptr->fragment_run_table_entries, afrt);\\n\\t}\\n\\tif (ptr->fragment_run_table_count != gf_list_count(ptr->fragment_run_table_entries)) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\nexit:\\n\\tgf_free(tmp_str);\\n\\treturn e;\\n}\\n\",\n            \"caller_start\": 76,\n            \"file_path\": \"src/isomedia/box_code_adobe.c\"\n          },\n          {\n            \"call_line\": 205,\n            \"call_code\": \"ISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\",\n            \"caller_code\": \"GF_Err abst_box_read(GF_Box *s, GF_BitStream *bs)\\n{\\n\\tGF_AdobeBootstrapInfoBox *ptr = (GF_AdobeBootstrapInfoBox *)s;\\n\\tint i;\\n\\tu32 tmp_strsize;\\n\\tchar *tmp_str;\\n\\tBool zfound=GF_FALSE;\\n\\tGF_Err e = GF_OK;\\n\\n\\tISOM_DECREASE_SIZE(ptr, 25)\\n\\tptr->bootstrapinfo_version = gf_bs_read_u32(bs);\\n\\tptr->profile = gf_bs_read_int(bs, 2);\\n\\tptr->live = gf_bs_read_int(bs, 1);\\n\\tptr->update = gf_bs_read_int(bs, 1);\\n\\tptr->reserved = gf_bs_read_int(bs, 4);\\n\\tptr->time_scale = gf_bs_read_u32(bs);\\n\\tptr->current_media_time = gf_bs_read_u64(bs);\\n\\tptr->smpte_time_code_offset = gf_bs_read_u64(bs);\\n\\n\\ti=0;\\n\\tif (ptr->size<8) return GF_ISOM_INVALID_FILE;\\n\\ttmp_strsize =(u32)ptr->size;\\n\\ttmp_str = gf_malloc(sizeof(char)*(tmp_strsize+1));\\n\\tif (!tmp_str) return GF_OUT_OF_MEM;\\n\\tmemset(tmp_str, 0, sizeof(char)*(tmp_strsize+1) );\\n\\n\\twhile (tmp_strsize) {\\n\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\ttmp_str[i] = gf_bs_read_u8(bs);\\n\\t\\ttmp_strsize--;\\n\\t\\tif (!tmp_str[i]) {\\n\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\ti++;\\n\\t}\\n\\tif (!zfound) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\tif (i) {\\n\\t\\tptr->movie_identifier = gf_strdup(tmp_str);\\n\\t}\\n\\n\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\tptr->server_entry_count = gf_bs_read_u8(bs);\\n\\tfor (i=0; i<ptr->server_entry_count; i++) {\\n\\t\\tint j=0;\\n\\t\\tzfound = GF_FALSE;\\n\\t\\ttmp_strsize=(u32)ptr->size;\\n\\t\\twhile (tmp_strsize) {\\n\\t\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\t\\ttmp_str[j] = gf_bs_read_u8(bs);\\n\\t\\t\\ttmp_strsize--;\\n\\t\\t\\tif (!tmp_str[j]) {\\n\\t\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t\\tj++;\\n\\t\\t}\\n\\t\\tif (!zfound) {\\n\\t\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\t\\tgoto exit;\\n\\t\\t}\\n\\t\\tif (j) {\\n\\t\\t\\tgf_list_insert(ptr->server_entry_table, gf_strdup(tmp_str), i);\\n\\t\\t}\\n\\t}\\n\\tif (ptr->server_entry_count != gf_list_count(ptr->server_entry_table)) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\tptr->quality_entry_count = gf_bs_read_u8(bs);\\n\\tfor (i=0; i<ptr->quality_entry_count; i++) {\\n\\t\\tint j=0;\\n\\t\\tzfound = GF_FALSE;\\n\\t\\ttmp_strsize=(u32)ptr->size;\\n\\t\\twhile (tmp_strsize) {\\n\\t\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\t\\ttmp_str[j] = gf_bs_read_u8(bs);\\n\\t\\t\\ttmp_strsize--;\\n\\t\\t\\tif (!tmp_str[j]) {\\n\\t\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t\\tj++;\\n\\t\\t}\\n\\n\\t\\tif (!zfound) {\\n\\t\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\t\\tgoto exit;\\n\\t\\t}\\n\\t\\tif (j) {\\n\\t\\t\\tgf_list_insert(ptr->quality_entry_table, gf_strdup(tmp_str), i);\\n\\t\\t}\\n\\t}\\n\\tif (ptr->quality_entry_count != gf_list_count(ptr->quality_entry_table)) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\ti=0;\\n\\ttmp_strsize=(u32)ptr->size;\\n\\tzfound = GF_FALSE;\\n\\twhile (tmp_strsize) {\\n\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\ttmp_str[i] = gf_bs_read_u8(bs);\\n\\t\\ttmp_strsize--;\\n\\t\\tif (!tmp_str[i]) {\\n\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\ti++;\\n\\t}\\n\\tif (!zfound) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\tif (i) {\\n\\t\\tptr->drm_data = gf_strdup(tmp_str);\\n\\t}\\n\\n\\ti=0;\\n\\ttmp_strsize=(u32)ptr->size;\\n\\tzfound = GF_FALSE;\\n\\twhile (tmp_strsize) {\\n\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\ttmp_str[i] = gf_bs_read_u8(bs);\\n\\t\\ttmp_strsize--;\\n\\t\\tif (!tmp_str[i]) {\\n\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\ti++;\\n\\t}\\n\\tif (!zfound) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\tif (i) {\\n\\t\\tptr->meta_data = gf_strdup(tmp_str);\\n\\t}\\n\\n\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\tptr->segment_run_table_count = gf_bs_read_u8(bs);\\n\\tfor (i=0; i<ptr->segment_run_table_count; i++) {\\n\\t\\tGF_AdobeSegmentRunTableBox *asrt = NULL;\\n\\t\\te = gf_isom_box_parse((GF_Box **)&asrt, bs);\\n\\t\\tif (e) {\\n\\t\\t\\tif (asrt) gf_isom_box_del((GF_Box*)asrt);\\n\\t\\t\\tgoto exit;\\n\\t\\t}\\n\\t\\tgf_list_add(ptr->segment_run_table_entries, asrt);\\n\\t}\\n\\tif (ptr->segment_run_table_count != gf_list_count(ptr->segment_run_table_entries)) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\tptr->fragment_run_table_count = gf_bs_read_u8(bs);\\n\\tfor (i=0; i<ptr->fragment_run_table_count; i++) {\\n\\t\\tGF_AdobeFragmentRunTableBox *afrt = NULL;\\n\\t\\te = gf_isom_box_parse((GF_Box **)&afrt, bs);\\n\\t\\tif (e) {\\n\\t\\t\\tif (afrt) gf_isom_box_del((GF_Box*)afrt);\\n\\t\\t\\tgoto exit;\\n\\t\\t}\\n\\t\\tgf_list_add(ptr->fragment_run_table_entries, afrt);\\n\\t}\\n\\tif (ptr->fragment_run_table_count != gf_list_count(ptr->fragment_run_table_entries)) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\nexit:\\n\\tgf_free(tmp_str);\\n\\treturn e;\\n}\\n\",\n            \"caller_start\": 76,\n            \"file_path\": \"src/isomedia/box_code_adobe.c\"\n          },\n          {\n            \"call_line\": 223,\n            \"call_code\": \"ISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\",\n            \"caller_code\": \"GF_Err abst_box_read(GF_Box *s, GF_BitStream *bs)\\n{\\n\\tGF_AdobeBootstrapInfoBox *ptr = (GF_AdobeBootstrapInfoBox *)s;\\n\\tint i;\\n\\tu32 tmp_strsize;\\n\\tchar *tmp_str;\\n\\tBool zfound=GF_FALSE;\\n\\tGF_Err e = GF_OK;\\n\\n\\tISOM_DECREASE_SIZE(ptr, 25)\\n\\tptr->bootstrapinfo_version = gf_bs_read_u32(bs);\\n\\tptr->profile = gf_bs_read_int(bs, 2);\\n\\tptr->live = gf_bs_read_int(bs, 1);\\n\\tptr->update = gf_bs_read_int(bs, 1);\\n\\tptr->reserved = gf_bs_read_int(bs, 4);\\n\\tptr->time_scale = gf_bs_read_u32(bs);\\n\\tptr->current_media_time = gf_bs_read_u64(bs);\\n\\tptr->smpte_time_code_offset = gf_bs_read_u64(bs);\\n\\n\\ti=0;\\n\\tif (ptr->size<8) return GF_ISOM_INVALID_FILE;\\n\\ttmp_strsize =(u32)ptr->size;\\n\\ttmp_str = gf_malloc(sizeof(char)*(tmp_strsize+1));\\n\\tif (!tmp_str) return GF_OUT_OF_MEM;\\n\\tmemset(tmp_str, 0, sizeof(char)*(tmp_strsize+1) );\\n\\n\\twhile (tmp_strsize) {\\n\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\ttmp_str[i] = gf_bs_read_u8(bs);\\n\\t\\ttmp_strsize--;\\n\\t\\tif (!tmp_str[i]) {\\n\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\ti++;\\n\\t}\\n\\tif (!zfound) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\tif (i) {\\n\\t\\tptr->movie_identifier = gf_strdup(tmp_str);\\n\\t}\\n\\n\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\tptr->server_entry_count = gf_bs_read_u8(bs);\\n\\tfor (i=0; i<ptr->server_entry_count; i++) {\\n\\t\\tint j=0;\\n\\t\\tzfound = GF_FALSE;\\n\\t\\ttmp_strsize=(u32)ptr->size;\\n\\t\\twhile (tmp_strsize) {\\n\\t\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\t\\ttmp_str[j] = gf_bs_read_u8(bs);\\n\\t\\t\\ttmp_strsize--;\\n\\t\\t\\tif (!tmp_str[j]) {\\n\\t\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t\\tj++;\\n\\t\\t}\\n\\t\\tif (!zfound) {\\n\\t\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\t\\tgoto exit;\\n\\t\\t}\\n\\t\\tif (j) {\\n\\t\\t\\tgf_list_insert(ptr->server_entry_table, gf_strdup(tmp_str), i);\\n\\t\\t}\\n\\t}\\n\\tif (ptr->server_entry_count != gf_list_count(ptr->server_entry_table)) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\tptr->quality_entry_count = gf_bs_read_u8(bs);\\n\\tfor (i=0; i<ptr->quality_entry_count; i++) {\\n\\t\\tint j=0;\\n\\t\\tzfound = GF_FALSE;\\n\\t\\ttmp_strsize=(u32)ptr->size;\\n\\t\\twhile (tmp_strsize) {\\n\\t\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\t\\ttmp_str[j] = gf_bs_read_u8(bs);\\n\\t\\t\\ttmp_strsize--;\\n\\t\\t\\tif (!tmp_str[j]) {\\n\\t\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t\\tj++;\\n\\t\\t}\\n\\n\\t\\tif (!zfound) {\\n\\t\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\t\\tgoto exit;\\n\\t\\t}\\n\\t\\tif (j) {\\n\\t\\t\\tgf_list_insert(ptr->quality_entry_table, gf_strdup(tmp_str), i);\\n\\t\\t}\\n\\t}\\n\\tif (ptr->quality_entry_count != gf_list_count(ptr->quality_entry_table)) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\ti=0;\\n\\ttmp_strsize=(u32)ptr->size;\\n\\tzfound = GF_FALSE;\\n\\twhile (tmp_strsize) {\\n\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\ttmp_str[i] = gf_bs_read_u8(bs);\\n\\t\\ttmp_strsize--;\\n\\t\\tif (!tmp_str[i]) {\\n\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\ti++;\\n\\t}\\n\\tif (!zfound) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\tif (i) {\\n\\t\\tptr->drm_data = gf_strdup(tmp_str);\\n\\t}\\n\\n\\ti=0;\\n\\ttmp_strsize=(u32)ptr->size;\\n\\tzfound = GF_FALSE;\\n\\twhile (tmp_strsize) {\\n\\t\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\t\\ttmp_str[i] = gf_bs_read_u8(bs);\\n\\t\\ttmp_strsize--;\\n\\t\\tif (!tmp_str[i]) {\\n\\t\\t\\tzfound = GF_TRUE;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\ti++;\\n\\t}\\n\\tif (!zfound) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\tif (i) {\\n\\t\\tptr->meta_data = gf_strdup(tmp_str);\\n\\t}\\n\\n\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\tptr->segment_run_table_count = gf_bs_read_u8(bs);\\n\\tfor (i=0; i<ptr->segment_run_table_count; i++) {\\n\\t\\tGF_AdobeSegmentRunTableBox *asrt = NULL;\\n\\t\\te = gf_isom_box_parse((GF_Box **)&asrt, bs);\\n\\t\\tif (e) {\\n\\t\\t\\tif (asrt) gf_isom_box_del((GF_Box*)asrt);\\n\\t\\t\\tgoto exit;\\n\\t\\t}\\n\\t\\tgf_list_add(ptr->segment_run_table_entries, asrt);\\n\\t}\\n\\tif (ptr->segment_run_table_count != gf_list_count(ptr->segment_run_table_entries)) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\n\\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\\n\\tptr->fragment_run_table_count = gf_bs_read_u8(bs);\\n\\tfor (i=0; i<ptr->fragment_run_table_count; i++) {\\n\\t\\tGF_AdobeFragmentRunTableBox *afrt = NULL;\\n\\t\\te = gf_isom_box_parse((GF_Box **)&afrt, bs);\\n\\t\\tif (e) {\\n\\t\\t\\tif (afrt) gf_isom_box_del((GF_Box*)afrt);\\n\\t\\t\\tgoto exit;\\n\\t\\t}\\n\\t\\tgf_list_add(ptr->fragment_run_table_entries, afrt);\\n\\t}\\n\\tif (ptr->fragment_run_table_count != gf_list_count(ptr->fragment_run_table_entries)) {\\n\\t\\te = GF_ISOM_INVALID_FILE;\\n\\t\\tgoto exit;\\n\\t}\\n\\nexit:\\n\\tgf_free(tmp_str);\\n\\treturn e;\\n}\\n\",\n            \"caller_start\": 76,\n            \"file_path\": \"src/isomedia/box_code_adobe.c\"\n          }\n        ]\n      }\n    ]\n  }\n]\n\n## INSTRUCTIONS\n1. **Review & Integrate Context** \n  Review all `history_summary` (*incl. past analysis and request results*) \n\n2. **Extend Chain from Code**  \n   Trace calls / data flow step-by-step, citing `file:line` for each fact.  \n   Where evidence ends, insert  \n   `GAP: <why evidence stops>`.\n\n3. **Request Missing Context**  \n   If any critical gap remains:  \n     * Always request context and set `\"need_context\": true`. \n     * Add precise, non-duplicate requests to `\"required_context\"` using the following types:  \n      `function`, `caller`, `e.g. caller: I need the caller of function X in file Y`.\n      **DO NOT** request the new patch code.\n     * Try alternative parameters or request types for gaps previously unfulfilled.  \n   If the chain is fully evidenced, set `\"need_context\": false`.\n\n4. **Score Confidence**  \n   *Full chain with direct evidence* ≥ 0.90.  Incomplete chain ≤ 0.75.\n\n## OUTPUT  (JSON only, no trailing commas)\n  ```json\n  {\n      \"analysis\": \"Summary of iteration progress, remaining gaps, explanation for new context requests (if any). If complete, summarize the full chain.\",\n      \"need_context\": true/false, \n      \"required_context\": \"<list of precise context requests>\" ,\n      \"root_cause\": \"<Partial/complete trace with file:line evidence from ALL available context>\",\n      \"confidence_score\": 0.0-1.0\n      // attack_vectors added when confidence >= 0.90 AND need_context is False\n  }\n  ```\n  ## RULES\n  * Output must be valid JSON.\n  * **Source-of-Truth** – Only accept facts visible in code (file:line). Commit message & description are auxiliary.\n  * **Reject every hypothesis or inference** - When evidence is missing, always declare a GAP and request the needed context.\n  * **Tool Restriction** – `required_context` items **must** be of type `function` or `caller` only.\n  * **Stop Condition** – Terminate only when the trigger chain is fully evidenced from the patch; else continue requesting context.\n",
            "result": {
                "analysis": "The patch introduces an 'exit' label with 'gf_free(str)' in dimC_box_read (box_code_3gpp.c:1096) to address the memory leak. The original code failed to free 'str' when errors occurred during buffer reads. The patch replaces 'ISOM_DECREASE_SIZE' with 'ISOM_DECREASE_SIZE_GOTO_EXIT' (box_code_3gpp.c:1066,1081) to trigger error paths leading to the cleanup label. However, the exact behavior of 'ISOM_DECREASE_SIZE_GOTO_EXIT' remains unclear without its macro definition. This macro is critical to understanding how error conditions propagate to the 'exit' label for proper cleanup.",
                "need_context": true,
                "required_context": [
                    "function: ISOM_DECREASE_SIZE_GOTO_EXIT"
                ],
                "root_cause": "Original code allocated 'str' but lacked guaranteed deallocation on error paths. The patch adds 'gf_free(str)' at 'exit' (box_code_3gpp.c:1096) but depends on 'ISOM_DECREASE_SIZE_GOTO_EXIT' (box_code_3gpp.c:1066,1081) to trigger error propagation. Without the macro definition, it's unknown how/when the error condition activates the 'exit' label.",
                "confidence_score": 0.75
            },
            "timestamp": "2025-05-29T20:00:04.682887"
        },
        {
            "stage": "collection",
            "required_context": [
                "function: ISOM_DECREASE_SIZE_GOTO_EXIT"
            ],
            "results": [
                {
                    "tool": "caller_info.find_caller_for_func({'func_name': 'ISOM_DECREASE_SIZE_GOTO_EXIT', 'project_dir': './storage/result/Part2_result/github/CVE-2022-45204/old_repos/gpac-gpac_aa486c3'})",
                    "result": [
                        {
                            "type": "caller_info",
                            "call_line": 103,
                            "call_code": "ISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)",
                            "caller_code": "GF_Err abst_box_read(GF_Box *s, GF_BitStream *bs)\n{\n\tGF_AdobeBootstrapInfoBox *ptr = (GF_AdobeBootstrapInfoBox *)s;\n\tint i;\n\tu32 tmp_strsize;\n\tchar *tmp_str;\n\tBool zfound=GF_FALSE;\n\tGF_Err e = GF_OK;\n\n\tISOM_DECREASE_SIZE(ptr, 25)\n\tptr->bootstrapinfo_version = gf_bs_read_u32(bs);\n\tptr->profile = gf_bs_read_int(bs, 2);\n\tptr->live = gf_bs_read_int(bs, 1);\n\tptr->update = gf_bs_read_int(bs, 1);\n\tptr->reserved = gf_bs_read_int(bs, 4);\n\tptr->time_scale = gf_bs_read_u32(bs);\n\tptr->current_media_time = gf_bs_read_u64(bs);\n\tptr->smpte_time_code_offset = gf_bs_read_u64(bs);\n\n\ti=0;\n\tif (ptr->size<8) return GF_ISOM_INVALID_FILE;\n\ttmp_strsize =(u32)ptr->size;\n\ttmp_str = gf_malloc(sizeof(char)*(tmp_strsize+1));\n\tif (!tmp_str) return GF_OUT_OF_MEM;\n\tmemset(tmp_str, 0, sizeof(char)*(tmp_strsize+1) );\n\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\tif (i) {\n\t\tptr->movie_identifier = gf_strdup(tmp_str);\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->server_entry_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->server_entry_count; i++) {\n\t\tint j=0;\n\t\tzfound = GF_FALSE;\n\t\ttmp_strsize=(u32)ptr->size;\n\t\twhile (tmp_strsize) {\n\t\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\t\ttmp_str[j] = gf_bs_read_u8(bs);\n\t\t\ttmp_strsize--;\n\t\t\tif (!tmp_str[j]) {\n\t\t\t\tzfound = GF_TRUE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t\tif (!zfound) {\n\t\t\te = GF_ISOM_INVALID_FILE;\n\t\t\tgoto exit;\n\t\t}\n\t\tif (j) {\n\t\t\tgf_list_insert(ptr->server_entry_table, gf_strdup(tmp_str), i);\n\t\t}\n\t}\n\tif (ptr->server_entry_count != gf_list_count(ptr->server_entry_table)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->quality_entry_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->quality_entry_count; i++) {\n\t\tint j=0;\n\t\tzfound = GF_FALSE;\n\t\ttmp_strsize=(u32)ptr->size;\n\t\twhile (tmp_strsize) {\n\t\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\t\ttmp_str[j] = gf_bs_read_u8(bs);\n\t\t\ttmp_strsize--;\n\t\t\tif (!tmp_str[j]) {\n\t\t\t\tzfound = GF_TRUE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\n\t\tif (!zfound) {\n\t\t\te = GF_ISOM_INVALID_FILE;\n\t\t\tgoto exit;\n\t\t}\n\t\tif (j) {\n\t\t\tgf_list_insert(ptr->quality_entry_table, gf_strdup(tmp_str), i);\n\t\t}\n\t}\n\tif (ptr->quality_entry_count != gf_list_count(ptr->quality_entry_table)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\ti=0;\n\ttmp_strsize=(u32)ptr->size;\n\tzfound = GF_FALSE;\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tif (i) {\n\t\tptr->drm_data = gf_strdup(tmp_str);\n\t}\n\n\ti=0;\n\ttmp_strsize=(u32)ptr->size;\n\tzfound = GF_FALSE;\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tif (i) {\n\t\tptr->meta_data = gf_strdup(tmp_str);\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->segment_run_table_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->segment_run_table_count; i++) {\n\t\tGF_AdobeSegmentRunTableBox *asrt = NULL;\n\t\te = gf_isom_box_parse((GF_Box **)&asrt, bs);\n\t\tif (e) {\n\t\t\tif (asrt) gf_isom_box_del((GF_Box*)asrt);\n\t\t\tgoto exit;\n\t\t}\n\t\tgf_list_add(ptr->segment_run_table_entries, asrt);\n\t}\n\tif (ptr->segment_run_table_count != gf_list_count(ptr->segment_run_table_entries)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->fragment_run_table_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->fragment_run_table_count; i++) {\n\t\tGF_AdobeFragmentRunTableBox *afrt = NULL;\n\t\te = gf_isom_box_parse((GF_Box **)&afrt, bs);\n\t\tif (e) {\n\t\t\tif (afrt) gf_isom_box_del((GF_Box*)afrt);\n\t\t\tgoto exit;\n\t\t}\n\t\tgf_list_add(ptr->fragment_run_table_entries, afrt);\n\t}\n\tif (ptr->fragment_run_table_count != gf_list_count(ptr->fragment_run_table_entries)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\nexit:\n\tgf_free(tmp_str);\n\treturn e;\n}\n",
                            "caller_start": 76,
                            "file_path": "src/isomedia/box_code_adobe.c"
                        },
                        {
                            "type": "caller_info",
                            "call_line": 120,
                            "call_code": "ISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)",
                            "caller_code": "GF_Err abst_box_read(GF_Box *s, GF_BitStream *bs)\n{\n\tGF_AdobeBootstrapInfoBox *ptr = (GF_AdobeBootstrapInfoBox *)s;\n\tint i;\n\tu32 tmp_strsize;\n\tchar *tmp_str;\n\tBool zfound=GF_FALSE;\n\tGF_Err e = GF_OK;\n\n\tISOM_DECREASE_SIZE(ptr, 25)\n\tptr->bootstrapinfo_version = gf_bs_read_u32(bs);\n\tptr->profile = gf_bs_read_int(bs, 2);\n\tptr->live = gf_bs_read_int(bs, 1);\n\tptr->update = gf_bs_read_int(bs, 1);\n\tptr->reserved = gf_bs_read_int(bs, 4);\n\tptr->time_scale = gf_bs_read_u32(bs);\n\tptr->current_media_time = gf_bs_read_u64(bs);\n\tptr->smpte_time_code_offset = gf_bs_read_u64(bs);\n\n\ti=0;\n\tif (ptr->size<8) return GF_ISOM_INVALID_FILE;\n\ttmp_strsize =(u32)ptr->size;\n\ttmp_str = gf_malloc(sizeof(char)*(tmp_strsize+1));\n\tif (!tmp_str) return GF_OUT_OF_MEM;\n\tmemset(tmp_str, 0, sizeof(char)*(tmp_strsize+1) );\n\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\tif (i) {\n\t\tptr->movie_identifier = gf_strdup(tmp_str);\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->server_entry_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->server_entry_count; i++) {\n\t\tint j=0;\n\t\tzfound = GF_FALSE;\n\t\ttmp_strsize=(u32)ptr->size;\n\t\twhile (tmp_strsize) {\n\t\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\t\ttmp_str[j] = gf_bs_read_u8(bs);\n\t\t\ttmp_strsize--;\n\t\t\tif (!tmp_str[j]) {\n\t\t\t\tzfound = GF_TRUE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t\tif (!zfound) {\n\t\t\te = GF_ISOM_INVALID_FILE;\n\t\t\tgoto exit;\n\t\t}\n\t\tif (j) {\n\t\t\tgf_list_insert(ptr->server_entry_table, gf_strdup(tmp_str), i);\n\t\t}\n\t}\n\tif (ptr->server_entry_count != gf_list_count(ptr->server_entry_table)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->quality_entry_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->quality_entry_count; i++) {\n\t\tint j=0;\n\t\tzfound = GF_FALSE;\n\t\ttmp_strsize=(u32)ptr->size;\n\t\twhile (tmp_strsize) {\n\t\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\t\ttmp_str[j] = gf_bs_read_u8(bs);\n\t\t\ttmp_strsize--;\n\t\t\tif (!tmp_str[j]) {\n\t\t\t\tzfound = GF_TRUE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\n\t\tif (!zfound) {\n\t\t\te = GF_ISOM_INVALID_FILE;\n\t\t\tgoto exit;\n\t\t}\n\t\tif (j) {\n\t\t\tgf_list_insert(ptr->quality_entry_table, gf_strdup(tmp_str), i);\n\t\t}\n\t}\n\tif (ptr->quality_entry_count != gf_list_count(ptr->quality_entry_table)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\ti=0;\n\ttmp_strsize=(u32)ptr->size;\n\tzfound = GF_FALSE;\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tif (i) {\n\t\tptr->drm_data = gf_strdup(tmp_str);\n\t}\n\n\ti=0;\n\ttmp_strsize=(u32)ptr->size;\n\tzfound = GF_FALSE;\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tif (i) {\n\t\tptr->meta_data = gf_strdup(tmp_str);\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->segment_run_table_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->segment_run_table_count; i++) {\n\t\tGF_AdobeSegmentRunTableBox *asrt = NULL;\n\t\te = gf_isom_box_parse((GF_Box **)&asrt, bs);\n\t\tif (e) {\n\t\t\tif (asrt) gf_isom_box_del((GF_Box*)asrt);\n\t\t\tgoto exit;\n\t\t}\n\t\tgf_list_add(ptr->segment_run_table_entries, asrt);\n\t}\n\tif (ptr->segment_run_table_count != gf_list_count(ptr->segment_run_table_entries)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->fragment_run_table_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->fragment_run_table_count; i++) {\n\t\tGF_AdobeFragmentRunTableBox *afrt = NULL;\n\t\te = gf_isom_box_parse((GF_Box **)&afrt, bs);\n\t\tif (e) {\n\t\t\tif (afrt) gf_isom_box_del((GF_Box*)afrt);\n\t\t\tgoto exit;\n\t\t}\n\t\tgf_list_add(ptr->fragment_run_table_entries, afrt);\n\t}\n\tif (ptr->fragment_run_table_count != gf_list_count(ptr->fragment_run_table_entries)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\nexit:\n\tgf_free(tmp_str);\n\treturn e;\n}\n",
                            "caller_start": 76,
                            "file_path": "src/isomedia/box_code_adobe.c"
                        },
                        {
                            "type": "caller_info",
                            "call_line": 127,
                            "call_code": "ISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)",
                            "caller_code": "GF_Err abst_box_read(GF_Box *s, GF_BitStream *bs)\n{\n\tGF_AdobeBootstrapInfoBox *ptr = (GF_AdobeBootstrapInfoBox *)s;\n\tint i;\n\tu32 tmp_strsize;\n\tchar *tmp_str;\n\tBool zfound=GF_FALSE;\n\tGF_Err e = GF_OK;\n\n\tISOM_DECREASE_SIZE(ptr, 25)\n\tptr->bootstrapinfo_version = gf_bs_read_u32(bs);\n\tptr->profile = gf_bs_read_int(bs, 2);\n\tptr->live = gf_bs_read_int(bs, 1);\n\tptr->update = gf_bs_read_int(bs, 1);\n\tptr->reserved = gf_bs_read_int(bs, 4);\n\tptr->time_scale = gf_bs_read_u32(bs);\n\tptr->current_media_time = gf_bs_read_u64(bs);\n\tptr->smpte_time_code_offset = gf_bs_read_u64(bs);\n\n\ti=0;\n\tif (ptr->size<8) return GF_ISOM_INVALID_FILE;\n\ttmp_strsize =(u32)ptr->size;\n\ttmp_str = gf_malloc(sizeof(char)*(tmp_strsize+1));\n\tif (!tmp_str) return GF_OUT_OF_MEM;\n\tmemset(tmp_str, 0, sizeof(char)*(tmp_strsize+1) );\n\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\tif (i) {\n\t\tptr->movie_identifier = gf_strdup(tmp_str);\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->server_entry_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->server_entry_count; i++) {\n\t\tint j=0;\n\t\tzfound = GF_FALSE;\n\t\ttmp_strsize=(u32)ptr->size;\n\t\twhile (tmp_strsize) {\n\t\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\t\ttmp_str[j] = gf_bs_read_u8(bs);\n\t\t\ttmp_strsize--;\n\t\t\tif (!tmp_str[j]) {\n\t\t\t\tzfound = GF_TRUE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t\tif (!zfound) {\n\t\t\te = GF_ISOM_INVALID_FILE;\n\t\t\tgoto exit;\n\t\t}\n\t\tif (j) {\n\t\t\tgf_list_insert(ptr->server_entry_table, gf_strdup(tmp_str), i);\n\t\t}\n\t}\n\tif (ptr->server_entry_count != gf_list_count(ptr->server_entry_table)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->quality_entry_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->quality_entry_count; i++) {\n\t\tint j=0;\n\t\tzfound = GF_FALSE;\n\t\ttmp_strsize=(u32)ptr->size;\n\t\twhile (tmp_strsize) {\n\t\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\t\ttmp_str[j] = gf_bs_read_u8(bs);\n\t\t\ttmp_strsize--;\n\t\t\tif (!tmp_str[j]) {\n\t\t\t\tzfound = GF_TRUE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\n\t\tif (!zfound) {\n\t\t\te = GF_ISOM_INVALID_FILE;\n\t\t\tgoto exit;\n\t\t}\n\t\tif (j) {\n\t\t\tgf_list_insert(ptr->quality_entry_table, gf_strdup(tmp_str), i);\n\t\t}\n\t}\n\tif (ptr->quality_entry_count != gf_list_count(ptr->quality_entry_table)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\ti=0;\n\ttmp_strsize=(u32)ptr->size;\n\tzfound = GF_FALSE;\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tif (i) {\n\t\tptr->drm_data = gf_strdup(tmp_str);\n\t}\n\n\ti=0;\n\ttmp_strsize=(u32)ptr->size;\n\tzfound = GF_FALSE;\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tif (i) {\n\t\tptr->meta_data = gf_strdup(tmp_str);\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->segment_run_table_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->segment_run_table_count; i++) {\n\t\tGF_AdobeSegmentRunTableBox *asrt = NULL;\n\t\te = gf_isom_box_parse((GF_Box **)&asrt, bs);\n\t\tif (e) {\n\t\t\tif (asrt) gf_isom_box_del((GF_Box*)asrt);\n\t\t\tgoto exit;\n\t\t}\n\t\tgf_list_add(ptr->segment_run_table_entries, asrt);\n\t}\n\tif (ptr->segment_run_table_count != gf_list_count(ptr->segment_run_table_entries)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->fragment_run_table_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->fragment_run_table_count; i++) {\n\t\tGF_AdobeFragmentRunTableBox *afrt = NULL;\n\t\te = gf_isom_box_parse((GF_Box **)&afrt, bs);\n\t\tif (e) {\n\t\t\tif (afrt) gf_isom_box_del((GF_Box*)afrt);\n\t\t\tgoto exit;\n\t\t}\n\t\tgf_list_add(ptr->fragment_run_table_entries, afrt);\n\t}\n\tif (ptr->fragment_run_table_count != gf_list_count(ptr->fragment_run_table_entries)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\nexit:\n\tgf_free(tmp_str);\n\treturn e;\n}\n",
                            "caller_start": 76,
                            "file_path": "src/isomedia/box_code_adobe.c"
                        },
                        {
                            "type": "caller_info",
                            "call_line": 149,
                            "call_code": "ISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)",
                            "caller_code": "GF_Err abst_box_read(GF_Box *s, GF_BitStream *bs)\n{\n\tGF_AdobeBootstrapInfoBox *ptr = (GF_AdobeBootstrapInfoBox *)s;\n\tint i;\n\tu32 tmp_strsize;\n\tchar *tmp_str;\n\tBool zfound=GF_FALSE;\n\tGF_Err e = GF_OK;\n\n\tISOM_DECREASE_SIZE(ptr, 25)\n\tptr->bootstrapinfo_version = gf_bs_read_u32(bs);\n\tptr->profile = gf_bs_read_int(bs, 2);\n\tptr->live = gf_bs_read_int(bs, 1);\n\tptr->update = gf_bs_read_int(bs, 1);\n\tptr->reserved = gf_bs_read_int(bs, 4);\n\tptr->time_scale = gf_bs_read_u32(bs);\n\tptr->current_media_time = gf_bs_read_u64(bs);\n\tptr->smpte_time_code_offset = gf_bs_read_u64(bs);\n\n\ti=0;\n\tif (ptr->size<8) return GF_ISOM_INVALID_FILE;\n\ttmp_strsize =(u32)ptr->size;\n\ttmp_str = gf_malloc(sizeof(char)*(tmp_strsize+1));\n\tif (!tmp_str) return GF_OUT_OF_MEM;\n\tmemset(tmp_str, 0, sizeof(char)*(tmp_strsize+1) );\n\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\tif (i) {\n\t\tptr->movie_identifier = gf_strdup(tmp_str);\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->server_entry_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->server_entry_count; i++) {\n\t\tint j=0;\n\t\tzfound = GF_FALSE;\n\t\ttmp_strsize=(u32)ptr->size;\n\t\twhile (tmp_strsize) {\n\t\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\t\ttmp_str[j] = gf_bs_read_u8(bs);\n\t\t\ttmp_strsize--;\n\t\t\tif (!tmp_str[j]) {\n\t\t\t\tzfound = GF_TRUE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t\tif (!zfound) {\n\t\t\te = GF_ISOM_INVALID_FILE;\n\t\t\tgoto exit;\n\t\t}\n\t\tif (j) {\n\t\t\tgf_list_insert(ptr->server_entry_table, gf_strdup(tmp_str), i);\n\t\t}\n\t}\n\tif (ptr->server_entry_count != gf_list_count(ptr->server_entry_table)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->quality_entry_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->quality_entry_count; i++) {\n\t\tint j=0;\n\t\tzfound = GF_FALSE;\n\t\ttmp_strsize=(u32)ptr->size;\n\t\twhile (tmp_strsize) {\n\t\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\t\ttmp_str[j] = gf_bs_read_u8(bs);\n\t\t\ttmp_strsize--;\n\t\t\tif (!tmp_str[j]) {\n\t\t\t\tzfound = GF_TRUE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\n\t\tif (!zfound) {\n\t\t\te = GF_ISOM_INVALID_FILE;\n\t\t\tgoto exit;\n\t\t}\n\t\tif (j) {\n\t\t\tgf_list_insert(ptr->quality_entry_table, gf_strdup(tmp_str), i);\n\t\t}\n\t}\n\tif (ptr->quality_entry_count != gf_list_count(ptr->quality_entry_table)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\ti=0;\n\ttmp_strsize=(u32)ptr->size;\n\tzfound = GF_FALSE;\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tif (i) {\n\t\tptr->drm_data = gf_strdup(tmp_str);\n\t}\n\n\ti=0;\n\ttmp_strsize=(u32)ptr->size;\n\tzfound = GF_FALSE;\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tif (i) {\n\t\tptr->meta_data = gf_strdup(tmp_str);\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->segment_run_table_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->segment_run_table_count; i++) {\n\t\tGF_AdobeSegmentRunTableBox *asrt = NULL;\n\t\te = gf_isom_box_parse((GF_Box **)&asrt, bs);\n\t\tif (e) {\n\t\t\tif (asrt) gf_isom_box_del((GF_Box*)asrt);\n\t\t\tgoto exit;\n\t\t}\n\t\tgf_list_add(ptr->segment_run_table_entries, asrt);\n\t}\n\tif (ptr->segment_run_table_count != gf_list_count(ptr->segment_run_table_entries)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->fragment_run_table_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->fragment_run_table_count; i++) {\n\t\tGF_AdobeFragmentRunTableBox *afrt = NULL;\n\t\te = gf_isom_box_parse((GF_Box **)&afrt, bs);\n\t\tif (e) {\n\t\t\tif (afrt) gf_isom_box_del((GF_Box*)afrt);\n\t\t\tgoto exit;\n\t\t}\n\t\tgf_list_add(ptr->fragment_run_table_entries, afrt);\n\t}\n\tif (ptr->fragment_run_table_count != gf_list_count(ptr->fragment_run_table_entries)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\nexit:\n\tgf_free(tmp_str);\n\treturn e;\n}\n",
                            "caller_start": 76,
                            "file_path": "src/isomedia/box_code_adobe.c"
                        },
                        {
                            "type": "caller_info",
                            "call_line": 156,
                            "call_code": "ISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)",
                            "caller_code": "GF_Err abst_box_read(GF_Box *s, GF_BitStream *bs)\n{\n\tGF_AdobeBootstrapInfoBox *ptr = (GF_AdobeBootstrapInfoBox *)s;\n\tint i;\n\tu32 tmp_strsize;\n\tchar *tmp_str;\n\tBool zfound=GF_FALSE;\n\tGF_Err e = GF_OK;\n\n\tISOM_DECREASE_SIZE(ptr, 25)\n\tptr->bootstrapinfo_version = gf_bs_read_u32(bs);\n\tptr->profile = gf_bs_read_int(bs, 2);\n\tptr->live = gf_bs_read_int(bs, 1);\n\tptr->update = gf_bs_read_int(bs, 1);\n\tptr->reserved = gf_bs_read_int(bs, 4);\n\tptr->time_scale = gf_bs_read_u32(bs);\n\tptr->current_media_time = gf_bs_read_u64(bs);\n\tptr->smpte_time_code_offset = gf_bs_read_u64(bs);\n\n\ti=0;\n\tif (ptr->size<8) return GF_ISOM_INVALID_FILE;\n\ttmp_strsize =(u32)ptr->size;\n\ttmp_str = gf_malloc(sizeof(char)*(tmp_strsize+1));\n\tif (!tmp_str) return GF_OUT_OF_MEM;\n\tmemset(tmp_str, 0, sizeof(char)*(tmp_strsize+1) );\n\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\tif (i) {\n\t\tptr->movie_identifier = gf_strdup(tmp_str);\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->server_entry_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->server_entry_count; i++) {\n\t\tint j=0;\n\t\tzfound = GF_FALSE;\n\t\ttmp_strsize=(u32)ptr->size;\n\t\twhile (tmp_strsize) {\n\t\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\t\ttmp_str[j] = gf_bs_read_u8(bs);\n\t\t\ttmp_strsize--;\n\t\t\tif (!tmp_str[j]) {\n\t\t\t\tzfound = GF_TRUE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t\tif (!zfound) {\n\t\t\te = GF_ISOM_INVALID_FILE;\n\t\t\tgoto exit;\n\t\t}\n\t\tif (j) {\n\t\t\tgf_list_insert(ptr->server_entry_table, gf_strdup(tmp_str), i);\n\t\t}\n\t}\n\tif (ptr->server_entry_count != gf_list_count(ptr->server_entry_table)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->quality_entry_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->quality_entry_count; i++) {\n\t\tint j=0;\n\t\tzfound = GF_FALSE;\n\t\ttmp_strsize=(u32)ptr->size;\n\t\twhile (tmp_strsize) {\n\t\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\t\ttmp_str[j] = gf_bs_read_u8(bs);\n\t\t\ttmp_strsize--;\n\t\t\tif (!tmp_str[j]) {\n\t\t\t\tzfound = GF_TRUE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\n\t\tif (!zfound) {\n\t\t\te = GF_ISOM_INVALID_FILE;\n\t\t\tgoto exit;\n\t\t}\n\t\tif (j) {\n\t\t\tgf_list_insert(ptr->quality_entry_table, gf_strdup(tmp_str), i);\n\t\t}\n\t}\n\tif (ptr->quality_entry_count != gf_list_count(ptr->quality_entry_table)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\ti=0;\n\ttmp_strsize=(u32)ptr->size;\n\tzfound = GF_FALSE;\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tif (i) {\n\t\tptr->drm_data = gf_strdup(tmp_str);\n\t}\n\n\ti=0;\n\ttmp_strsize=(u32)ptr->size;\n\tzfound = GF_FALSE;\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tif (i) {\n\t\tptr->meta_data = gf_strdup(tmp_str);\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->segment_run_table_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->segment_run_table_count; i++) {\n\t\tGF_AdobeSegmentRunTableBox *asrt = NULL;\n\t\te = gf_isom_box_parse((GF_Box **)&asrt, bs);\n\t\tif (e) {\n\t\t\tif (asrt) gf_isom_box_del((GF_Box*)asrt);\n\t\t\tgoto exit;\n\t\t}\n\t\tgf_list_add(ptr->segment_run_table_entries, asrt);\n\t}\n\tif (ptr->segment_run_table_count != gf_list_count(ptr->segment_run_table_entries)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->fragment_run_table_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->fragment_run_table_count; i++) {\n\t\tGF_AdobeFragmentRunTableBox *afrt = NULL;\n\t\te = gf_isom_box_parse((GF_Box **)&afrt, bs);\n\t\tif (e) {\n\t\t\tif (afrt) gf_isom_box_del((GF_Box*)afrt);\n\t\t\tgoto exit;\n\t\t}\n\t\tgf_list_add(ptr->fragment_run_table_entries, afrt);\n\t}\n\tif (ptr->fragment_run_table_count != gf_list_count(ptr->fragment_run_table_entries)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\nexit:\n\tgf_free(tmp_str);\n\treturn e;\n}\n",
                            "caller_start": 76,
                            "file_path": "src/isomedia/box_code_adobe.c"
                        },
                        {
                            "type": "caller_info",
                            "call_line": 183,
                            "call_code": "ISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)",
                            "caller_code": "GF_Err abst_box_read(GF_Box *s, GF_BitStream *bs)\n{\n\tGF_AdobeBootstrapInfoBox *ptr = (GF_AdobeBootstrapInfoBox *)s;\n\tint i;\n\tu32 tmp_strsize;\n\tchar *tmp_str;\n\tBool zfound=GF_FALSE;\n\tGF_Err e = GF_OK;\n\n\tISOM_DECREASE_SIZE(ptr, 25)\n\tptr->bootstrapinfo_version = gf_bs_read_u32(bs);\n\tptr->profile = gf_bs_read_int(bs, 2);\n\tptr->live = gf_bs_read_int(bs, 1);\n\tptr->update = gf_bs_read_int(bs, 1);\n\tptr->reserved = gf_bs_read_int(bs, 4);\n\tptr->time_scale = gf_bs_read_u32(bs);\n\tptr->current_media_time = gf_bs_read_u64(bs);\n\tptr->smpte_time_code_offset = gf_bs_read_u64(bs);\n\n\ti=0;\n\tif (ptr->size<8) return GF_ISOM_INVALID_FILE;\n\ttmp_strsize =(u32)ptr->size;\n\ttmp_str = gf_malloc(sizeof(char)*(tmp_strsize+1));\n\tif (!tmp_str) return GF_OUT_OF_MEM;\n\tmemset(tmp_str, 0, sizeof(char)*(tmp_strsize+1) );\n\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\tif (i) {\n\t\tptr->movie_identifier = gf_strdup(tmp_str);\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->server_entry_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->server_entry_count; i++) {\n\t\tint j=0;\n\t\tzfound = GF_FALSE;\n\t\ttmp_strsize=(u32)ptr->size;\n\t\twhile (tmp_strsize) {\n\t\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\t\ttmp_str[j] = gf_bs_read_u8(bs);\n\t\t\ttmp_strsize--;\n\t\t\tif (!tmp_str[j]) {\n\t\t\t\tzfound = GF_TRUE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t\tif (!zfound) {\n\t\t\te = GF_ISOM_INVALID_FILE;\n\t\t\tgoto exit;\n\t\t}\n\t\tif (j) {\n\t\t\tgf_list_insert(ptr->server_entry_table, gf_strdup(tmp_str), i);\n\t\t}\n\t}\n\tif (ptr->server_entry_count != gf_list_count(ptr->server_entry_table)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->quality_entry_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->quality_entry_count; i++) {\n\t\tint j=0;\n\t\tzfound = GF_FALSE;\n\t\ttmp_strsize=(u32)ptr->size;\n\t\twhile (tmp_strsize) {\n\t\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\t\ttmp_str[j] = gf_bs_read_u8(bs);\n\t\t\ttmp_strsize--;\n\t\t\tif (!tmp_str[j]) {\n\t\t\t\tzfound = GF_TRUE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\n\t\tif (!zfound) {\n\t\t\te = GF_ISOM_INVALID_FILE;\n\t\t\tgoto exit;\n\t\t}\n\t\tif (j) {\n\t\t\tgf_list_insert(ptr->quality_entry_table, gf_strdup(tmp_str), i);\n\t\t}\n\t}\n\tif (ptr->quality_entry_count != gf_list_count(ptr->quality_entry_table)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\ti=0;\n\ttmp_strsize=(u32)ptr->size;\n\tzfound = GF_FALSE;\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tif (i) {\n\t\tptr->drm_data = gf_strdup(tmp_str);\n\t}\n\n\ti=0;\n\ttmp_strsize=(u32)ptr->size;\n\tzfound = GF_FALSE;\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tif (i) {\n\t\tptr->meta_data = gf_strdup(tmp_str);\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->segment_run_table_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->segment_run_table_count; i++) {\n\t\tGF_AdobeSegmentRunTableBox *asrt = NULL;\n\t\te = gf_isom_box_parse((GF_Box **)&asrt, bs);\n\t\tif (e) {\n\t\t\tif (asrt) gf_isom_box_del((GF_Box*)asrt);\n\t\t\tgoto exit;\n\t\t}\n\t\tgf_list_add(ptr->segment_run_table_entries, asrt);\n\t}\n\tif (ptr->segment_run_table_count != gf_list_count(ptr->segment_run_table_entries)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->fragment_run_table_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->fragment_run_table_count; i++) {\n\t\tGF_AdobeFragmentRunTableBox *afrt = NULL;\n\t\te = gf_isom_box_parse((GF_Box **)&afrt, bs);\n\t\tif (e) {\n\t\t\tif (afrt) gf_isom_box_del((GF_Box*)afrt);\n\t\t\tgoto exit;\n\t\t}\n\t\tgf_list_add(ptr->fragment_run_table_entries, afrt);\n\t}\n\tif (ptr->fragment_run_table_count != gf_list_count(ptr->fragment_run_table_entries)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\nexit:\n\tgf_free(tmp_str);\n\treturn e;\n}\n",
                            "caller_start": 76,
                            "file_path": "src/isomedia/box_code_adobe.c"
                        },
                        {
                            "type": "caller_info",
                            "call_line": 205,
                            "call_code": "ISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)",
                            "caller_code": "GF_Err abst_box_read(GF_Box *s, GF_BitStream *bs)\n{\n\tGF_AdobeBootstrapInfoBox *ptr = (GF_AdobeBootstrapInfoBox *)s;\n\tint i;\n\tu32 tmp_strsize;\n\tchar *tmp_str;\n\tBool zfound=GF_FALSE;\n\tGF_Err e = GF_OK;\n\n\tISOM_DECREASE_SIZE(ptr, 25)\n\tptr->bootstrapinfo_version = gf_bs_read_u32(bs);\n\tptr->profile = gf_bs_read_int(bs, 2);\n\tptr->live = gf_bs_read_int(bs, 1);\n\tptr->update = gf_bs_read_int(bs, 1);\n\tptr->reserved = gf_bs_read_int(bs, 4);\n\tptr->time_scale = gf_bs_read_u32(bs);\n\tptr->current_media_time = gf_bs_read_u64(bs);\n\tptr->smpte_time_code_offset = gf_bs_read_u64(bs);\n\n\ti=0;\n\tif (ptr->size<8) return GF_ISOM_INVALID_FILE;\n\ttmp_strsize =(u32)ptr->size;\n\ttmp_str = gf_malloc(sizeof(char)*(tmp_strsize+1));\n\tif (!tmp_str) return GF_OUT_OF_MEM;\n\tmemset(tmp_str, 0, sizeof(char)*(tmp_strsize+1) );\n\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\tif (i) {\n\t\tptr->movie_identifier = gf_strdup(tmp_str);\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->server_entry_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->server_entry_count; i++) {\n\t\tint j=0;\n\t\tzfound = GF_FALSE;\n\t\ttmp_strsize=(u32)ptr->size;\n\t\twhile (tmp_strsize) {\n\t\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\t\ttmp_str[j] = gf_bs_read_u8(bs);\n\t\t\ttmp_strsize--;\n\t\t\tif (!tmp_str[j]) {\n\t\t\t\tzfound = GF_TRUE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t\tif (!zfound) {\n\t\t\te = GF_ISOM_INVALID_FILE;\n\t\t\tgoto exit;\n\t\t}\n\t\tif (j) {\n\t\t\tgf_list_insert(ptr->server_entry_table, gf_strdup(tmp_str), i);\n\t\t}\n\t}\n\tif (ptr->server_entry_count != gf_list_count(ptr->server_entry_table)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->quality_entry_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->quality_entry_count; i++) {\n\t\tint j=0;\n\t\tzfound = GF_FALSE;\n\t\ttmp_strsize=(u32)ptr->size;\n\t\twhile (tmp_strsize) {\n\t\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\t\ttmp_str[j] = gf_bs_read_u8(bs);\n\t\t\ttmp_strsize--;\n\t\t\tif (!tmp_str[j]) {\n\t\t\t\tzfound = GF_TRUE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\n\t\tif (!zfound) {\n\t\t\te = GF_ISOM_INVALID_FILE;\n\t\t\tgoto exit;\n\t\t}\n\t\tif (j) {\n\t\t\tgf_list_insert(ptr->quality_entry_table, gf_strdup(tmp_str), i);\n\t\t}\n\t}\n\tif (ptr->quality_entry_count != gf_list_count(ptr->quality_entry_table)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\ti=0;\n\ttmp_strsize=(u32)ptr->size;\n\tzfound = GF_FALSE;\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tif (i) {\n\t\tptr->drm_data = gf_strdup(tmp_str);\n\t}\n\n\ti=0;\n\ttmp_strsize=(u32)ptr->size;\n\tzfound = GF_FALSE;\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tif (i) {\n\t\tptr->meta_data = gf_strdup(tmp_str);\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->segment_run_table_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->segment_run_table_count; i++) {\n\t\tGF_AdobeSegmentRunTableBox *asrt = NULL;\n\t\te = gf_isom_box_parse((GF_Box **)&asrt, bs);\n\t\tif (e) {\n\t\t\tif (asrt) gf_isom_box_del((GF_Box*)asrt);\n\t\t\tgoto exit;\n\t\t}\n\t\tgf_list_add(ptr->segment_run_table_entries, asrt);\n\t}\n\tif (ptr->segment_run_table_count != gf_list_count(ptr->segment_run_table_entries)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->fragment_run_table_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->fragment_run_table_count; i++) {\n\t\tGF_AdobeFragmentRunTableBox *afrt = NULL;\n\t\te = gf_isom_box_parse((GF_Box **)&afrt, bs);\n\t\tif (e) {\n\t\t\tif (afrt) gf_isom_box_del((GF_Box*)afrt);\n\t\t\tgoto exit;\n\t\t}\n\t\tgf_list_add(ptr->fragment_run_table_entries, afrt);\n\t}\n\tif (ptr->fragment_run_table_count != gf_list_count(ptr->fragment_run_table_entries)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\nexit:\n\tgf_free(tmp_str);\n\treturn e;\n}\n",
                            "caller_start": 76,
                            "file_path": "src/isomedia/box_code_adobe.c"
                        },
                        {
                            "type": "caller_info",
                            "call_line": 223,
                            "call_code": "ISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)",
                            "caller_code": "GF_Err abst_box_read(GF_Box *s, GF_BitStream *bs)\n{\n\tGF_AdobeBootstrapInfoBox *ptr = (GF_AdobeBootstrapInfoBox *)s;\n\tint i;\n\tu32 tmp_strsize;\n\tchar *tmp_str;\n\tBool zfound=GF_FALSE;\n\tGF_Err e = GF_OK;\n\n\tISOM_DECREASE_SIZE(ptr, 25)\n\tptr->bootstrapinfo_version = gf_bs_read_u32(bs);\n\tptr->profile = gf_bs_read_int(bs, 2);\n\tptr->live = gf_bs_read_int(bs, 1);\n\tptr->update = gf_bs_read_int(bs, 1);\n\tptr->reserved = gf_bs_read_int(bs, 4);\n\tptr->time_scale = gf_bs_read_u32(bs);\n\tptr->current_media_time = gf_bs_read_u64(bs);\n\tptr->smpte_time_code_offset = gf_bs_read_u64(bs);\n\n\ti=0;\n\tif (ptr->size<8) return GF_ISOM_INVALID_FILE;\n\ttmp_strsize =(u32)ptr->size;\n\ttmp_str = gf_malloc(sizeof(char)*(tmp_strsize+1));\n\tif (!tmp_str) return GF_OUT_OF_MEM;\n\tmemset(tmp_str, 0, sizeof(char)*(tmp_strsize+1) );\n\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\tif (i) {\n\t\tptr->movie_identifier = gf_strdup(tmp_str);\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->server_entry_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->server_entry_count; i++) {\n\t\tint j=0;\n\t\tzfound = GF_FALSE;\n\t\ttmp_strsize=(u32)ptr->size;\n\t\twhile (tmp_strsize) {\n\t\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\t\ttmp_str[j] = gf_bs_read_u8(bs);\n\t\t\ttmp_strsize--;\n\t\t\tif (!tmp_str[j]) {\n\t\t\t\tzfound = GF_TRUE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t\tif (!zfound) {\n\t\t\te = GF_ISOM_INVALID_FILE;\n\t\t\tgoto exit;\n\t\t}\n\t\tif (j) {\n\t\t\tgf_list_insert(ptr->server_entry_table, gf_strdup(tmp_str), i);\n\t\t}\n\t}\n\tif (ptr->server_entry_count != gf_list_count(ptr->server_entry_table)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->quality_entry_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->quality_entry_count; i++) {\n\t\tint j=0;\n\t\tzfound = GF_FALSE;\n\t\ttmp_strsize=(u32)ptr->size;\n\t\twhile (tmp_strsize) {\n\t\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\t\ttmp_str[j] = gf_bs_read_u8(bs);\n\t\t\ttmp_strsize--;\n\t\t\tif (!tmp_str[j]) {\n\t\t\t\tzfound = GF_TRUE;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\n\t\tif (!zfound) {\n\t\t\te = GF_ISOM_INVALID_FILE;\n\t\t\tgoto exit;\n\t\t}\n\t\tif (j) {\n\t\t\tgf_list_insert(ptr->quality_entry_table, gf_strdup(tmp_str), i);\n\t\t}\n\t}\n\tif (ptr->quality_entry_count != gf_list_count(ptr->quality_entry_table)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\ti=0;\n\ttmp_strsize=(u32)ptr->size;\n\tzfound = GF_FALSE;\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tif (i) {\n\t\tptr->drm_data = gf_strdup(tmp_str);\n\t}\n\n\ti=0;\n\ttmp_strsize=(u32)ptr->size;\n\tzfound = GF_FALSE;\n\twhile (tmp_strsize) {\n\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\t\ttmp_str[i] = gf_bs_read_u8(bs);\n\t\ttmp_strsize--;\n\t\tif (!tmp_str[i]) {\n\t\t\tzfound = GF_TRUE;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (!zfound) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tif (i) {\n\t\tptr->meta_data = gf_strdup(tmp_str);\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->segment_run_table_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->segment_run_table_count; i++) {\n\t\tGF_AdobeSegmentRunTableBox *asrt = NULL;\n\t\te = gf_isom_box_parse((GF_Box **)&asrt, bs);\n\t\tif (e) {\n\t\t\tif (asrt) gf_isom_box_del((GF_Box*)asrt);\n\t\t\tgoto exit;\n\t\t}\n\t\tgf_list_add(ptr->segment_run_table_entries, asrt);\n\t}\n\tif (ptr->segment_run_table_count != gf_list_count(ptr->segment_run_table_entries)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\n\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n\tptr->fragment_run_table_count = gf_bs_read_u8(bs);\n\tfor (i=0; i<ptr->fragment_run_table_count; i++) {\n\t\tGF_AdobeFragmentRunTableBox *afrt = NULL;\n\t\te = gf_isom_box_parse((GF_Box **)&afrt, bs);\n\t\tif (e) {\n\t\t\tif (afrt) gf_isom_box_del((GF_Box*)afrt);\n\t\t\tgoto exit;\n\t\t}\n\t\tgf_list_add(ptr->fragment_run_table_entries, afrt);\n\t}\n\tif (ptr->fragment_run_table_count != gf_list_count(ptr->fragment_run_table_entries)) {\n\t\te = GF_ISOM_INVALID_FILE;\n\t\tgoto exit;\n\t}\n\nexit:\n\tgf_free(tmp_str);\n\treturn e;\n}\n",
                            "caller_start": 76,
                            "file_path": "src/isomedia/box_code_adobe.c"
                        }
                    ]
                }
            ],
            "timestamp": "2025-05-29T20:00:07.126043"
        }
    ],
    "debug_trace": [
        "Collected 1 context items. (0 failed)",
        "Performed analysis iteration 1. Needs more context: True. Confidence: 0.75",
        "Collected 1 context items. (0 failed)",
        "Performed analysis iteration 2. Needs more context: True. Confidence: 0.75",
        "Collected 1 context items. (0 failed)",
        "Analysis failed: [Analysis ERROR] Root cause analysis failed"
    ],
    "status": "error",
    "error": "Analysis failed: [Analysis ERROR] Root cause analysis failed"
}