{
  "cve_id": "CVE-2022-25892",
  "cwe_ids": [
    "CWE-Other"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
  "cvss_is_v3": true,
  "repo_name": "galkahana/HummusJS",
  "commit_msg": "corrections",
  "commit_hash": "a9bf2520ab5abb69f9328906e406fbebfb36159a",
  "git_url": "https://github.com/galkahana/HummusJS/commit/a9bf2520ab5abb69f9328906e406fbebfb36159a",
  "file_path": "src/deps/PDFWriter/DecryptionHelper.cpp",
  "func_name": "DecryptionHelper::CreateDefaultDecryptionFilterForStream",
  "func_before": "IByteReader* DecryptionHelper::CreateDefaultDecryptionFilterForStream(PDFStreamInput* inStream, IByteReader* inToWrapStream) {\n\t// This will create a decryption filter for streams that dont have their own defined crypt filters. null for no decryption filter\n\tif (!IsEncrypted() || !CanDecryptDocument() || HasCryptFilterDefinition(mParser, inStream) || !mXcryptStreams)\n\t\treturn NULL;\n\t\n\tvoid* savedEcnryptionKey = inStream->GetMetadata(scEcnryptionKeyMetadataKey);\n\tif (savedEcnryptionKey) {\n\t\treturn CreateDecryptionReader(inToWrapStream, *((ByteList*)savedEcnryptionKey), mXcryptStreams->IsUsingAES());\n\t}\n\telse \n\t\treturn NULL;\n}",
  "abstract_func_before": "IByteReader* DecryptionHelper::CreateDefaultDecryptionFilterForStream(PDFStreamInput* VAR_0, IByteReader* VAR_1) {\n\t/* COMMENT_0 */\n\tif (!IsEncrypted() || !CanDecryptDocument() || HasCryptFilterDefinition(VAR_2, VAR_0) || !VAR_3)\n\t\treturn NULL;\n\t\n\tvoid* VAR_4 = VAR_0->GetMetadata(VAR_5);\n\tif (VAR_4) {\n\t\treturn CreateDecryptionReader(VAR_1, *((ByteList*)VAR_4), VAR_3->IsUsingAES());\n\t}\n\telse \n\t\treturn NULL;\n}",
  "func_graph_path_before": "galkahana/HummusJS/a9bf2520ab5abb69f9328906e406fbebfb36159a/DecryptionHelper.cpp/vul/before/0.json",
  "func": "IByteReader* DecryptionHelper::CreateDefaultDecryptionFilterForStream(PDFStreamInput* inStream, IByteReader* inToWrapStream) {\n\t// This will create a decryption filter for streams that dont have their own defined crypt filters. null for no decryption filter\n\tif (!IsEncrypted() || !CanDecryptDocument() || HasCryptFilterDefinition(mParser, inStream) || !mXcryptStreams)\n\t\treturn NULL;\n\t\n\tIDeletable* savedEcnryptionKey = inStream->GetMetadata(scEcnryptionKeyMetadataKey);\n\tif (savedEcnryptionKey) {\n\t\treturn CreateDecryptionReader(inToWrapStream, *(((Deletable<ByteList>*)savedEcnryptionKey)->GetPtr()), mXcryptStreams->IsUsingAES());\n\t}\n\telse \n\t\treturn NULL;\n}",
  "abstract_func": "IByteReader* DecryptionHelper::CreateDefaultDecryptionFilterForStream(PDFStreamInput* VAR_0, IByteReader* VAR_1) {\n\t/* COMMENT_0 */\n\tif (!IsEncrypted() || !CanDecryptDocument() || HasCryptFilterDefinition(VAR_2, VAR_0) || !VAR_3)\n\t\treturn NULL;\n\t\n\tIDeletable* VAR_4 = VAR_0->GetMetadata(VAR_5);\n\tif (VAR_4) {\n\t\treturn CreateDecryptionReader(VAR_1, *(((Deletable<ByteList>*)VAR_4)->GetPtr()), VAR_3->IsUsingAES());\n\t}\n\telse \n\t\treturn NULL;\n}",
  "func_graph_path": "galkahana/HummusJS/a9bf2520ab5abb69f9328906e406fbebfb36159a/DecryptionHelper.cpp/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -3,9 +3,9 @@\n \tif (!IsEncrypted() || !CanDecryptDocument() || HasCryptFilterDefinition(mParser, inStream) || !mXcryptStreams)\n \t\treturn NULL;\n \t\n-\tvoid* savedEcnryptionKey = inStream->GetMetadata(scEcnryptionKeyMetadataKey);\n+\tIDeletable* savedEcnryptionKey = inStream->GetMetadata(scEcnryptionKeyMetadataKey);\n \tif (savedEcnryptionKey) {\n-\t\treturn CreateDecryptionReader(inToWrapStream, *((ByteList*)savedEcnryptionKey), mXcryptStreams->IsUsingAES());\n+\t\treturn CreateDecryptionReader(inToWrapStream, *(((Deletable<ByteList>*)savedEcnryptionKey)->GetPtr()), mXcryptStreams->IsUsingAES());\n \t}\n \telse \n \t\treturn NULL;",
  "diff_line_info": {
    "deleted_lines": [
      "\tvoid* savedEcnryptionKey = inStream->GetMetadata(scEcnryptionKeyMetadataKey);",
      "\t\treturn CreateDecryptionReader(inToWrapStream, *((ByteList*)savedEcnryptionKey), mXcryptStreams->IsUsingAES());"
    ],
    "added_lines": [
      "\tIDeletable* savedEcnryptionKey = inStream->GetMetadata(scEcnryptionKeyMetadataKey);",
      "\t\treturn CreateDecryptionReader(inToWrapStream, *(((Deletable<ByteList>*)savedEcnryptionKey)->GetPtr()), mXcryptStreams->IsUsingAES());"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/galkahana/HummusJS/pull/464",
  "description": {
    "pr_info": {
      "title": "Npe corrections",
      "number": 464
    },
    "comment": [
      "corrections based on discussion in:\r\nhttps://github.com/galkahana/HummusJS/issues/463\r\n\r\n+ note recommending transition to muhammara\r\n+ safe metadata release with deletable instead of void* which never got here apparently\r\n",
      "pending on travis build enablement"
    ]
  },
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.8,
  "Bug Filter Response": "\n\n**Final Output:**\n\nAnalysis: The patch modifies how decryption keys are retrieved and used, changing from a raw pointer to a smart pointer. This likely improves memory management, preventing issues like leaks or dangling pointers. However, there's no clear indication that it addresses a security exploit or protects against unauthorized access.\n\nFinal Classification: Defect Remediation & Feature Upgrades\n\nConfidence Score: 0.8"
}