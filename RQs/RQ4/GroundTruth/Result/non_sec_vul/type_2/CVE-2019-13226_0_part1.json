{
  "cve_id": "CVE-2019-13226",
  "cwe_ids": [
    "CWE-362",
    "CWE-59"
  ],
  "cvss_vector": "AV:L/AC:M/Au:N/C:C/I:C/A:C",
  "cvss_is_v3": false,
  "repo_name": "linuxdeepin/deepin-clone",
  "commit_msg": "fix: Do not use the \"/tmp\" directory\n\nhttps://github.com/linuxdeepin/deepin-clone/issues/16\nhttps://bugzilla.opensuse.org/show_bug.cgi?id=1130388",
  "commit_hash": "e079f3e2712b4f8c28e3e63e71ba1a1f90fce1ab",
  "git_url": "https://github.com/linuxdeepin/deepin-clone/commit/e079f3e2712b4f8c28e3e63e71ba1a1f90fce1ab",
  "file_path": "app/src/corelib/ddevicediskinfo.cpp",
  "func_name": "DDeviceDiskInfoPrivate::openDataStream",
  "func_before": "bool DDeviceDiskInfoPrivate::openDataStream(int index)\n{\n    if (process) {\n        process->deleteLater();\n    }\n\n    process = new QProcess();\n\n    QObject::connect(process, static_cast<void (QProcess::*)(int, QProcess::ExitStatus)>(&QProcess::finished),\n                     process, [this] (int code, QProcess::ExitStatus status) {\n        if (isClosing())\n            return;\n\n        if (status == QProcess::CrashExit) {\n            setErrorString(QObject::tr(\"process \\\"%1 %2\\\" crashed\").arg(process->program()).arg(process->arguments().join(\" \")));\n        } else if (code != 0) {\n            setErrorString(QObject::tr(\"Failed to perform process \\\"%1 %2\\\", error: %3\").arg(process->program()).arg(process->arguments().join(\" \")).arg(QString::fromUtf8(process->readAllStandardError())));\n        }\n    });\n\n    switch (currentScope) {\n    case DDiskInfo::Headgear: {\n        if (type != DDiskInfo::Disk) {\n            setErrorString(QObject::tr(\"\\\"%1\\\" is not a disk device\").arg(filePath()));\n\n            return false;\n        }\n\n        if (currentMode == DDiskInfo::Read) {\n            process->start(QStringLiteral(\"dd if=%1 bs=512 count=2048 status=none\").arg(filePath()), QIODevice::ReadOnly);\n        } else {\n            process->start(QStringLiteral(\"dd of=%1 bs=512 status=none conv=fsync\").arg(filePath()));\n        }\n\n        break;\n    }\n    case DDiskInfo::PartitionTable: {\n        if (type != DDiskInfo::Disk) {\n            setErrorString(QObject::tr(\"\\\"%1\\\" is not a disk device\").arg(filePath()));\n\n            return false;\n        }\n\n        if (currentMode == DDiskInfo::Read)\n            process->start(QStringLiteral(\"sfdisk -d %1\").arg(filePath()), QIODevice::ReadOnly);\n        else\n            process->start(QStringLiteral(\"sfdisk %1 --no-reread\").arg(filePath()));\n\n        break;\n    }\n    case DDiskInfo::Partition: {\n        const DPartInfo &part = (index == 0 && currentMode == DDiskInfo::Write) ? DDevicePartInfo(filePath()) : q->getPartByNumber(index);\n\n        if (!part) {\n            dCDebug(\"Part is null(index: %d)\", index);\n\n            return false;\n        }\n\n        dCDebug(\"Try open device: %s, mode: %s\", qPrintable(part.filePath()), currentMode == DDiskInfo::Read ? \"Read\" : \"Write\");\n\n        if (Helper::isMounted(part.filePath())) {\n            if (Helper::umountDevice(part.filePath())) {\n                part.d->mountPoint.clear();\n            } else {\n                setErrorString(QObject::tr(\"\\\"%1\\\" is busy\").arg(part.filePath()));\n\n                return false;\n            }\n        }\n\n        if (currentMode == DDiskInfo::Read) {\n            const QString &executer = Helper::getPartcloneExecuter(part);\n            process->start(QStringLiteral(\"%1 -s %2 -o - -c -z %3 -L /tmp/partclone.log\").arg(executer).arg(part.filePath()).arg(Global::bufferSize), QIODevice::ReadOnly);\n        } else {\n            process->start(QStringLiteral(\"partclone.restore -s - -o %2 -z %3 -L /tmp/partclone.log\").arg(part.filePath()).arg(Global::bufferSize));\n        }\n\n        break;\n    }\n    case DDiskInfo::JsonInfo: {\n        process->deleteLater();\n        process = 0;\n        buffer.setData(q->toJson());\n        break;\n    }\n    default:\n        return false;\n    }\n\n    if (process) {\n        if (!process->waitForStarted()) {\n            setErrorString(QObject::tr(\"Failed to start \\\"%1 %2\\\", error: %3\").arg(process->program()).arg(process->arguments().join(\" \")).arg(process->errorString()));\n\n            return false;\n        }\n\n        dCDebug(\"The \\\"%s %s\\\" command start finished\", qPrintable(process->program()), qPrintable(process->arguments().join(\" \")));\n    }\n\n    bool ok = process ? process->isOpen() : buffer.open(QIODevice::ReadOnly);\n\n    if (!ok) {\n        setErrorString(QObject::tr(\"Failed to open process, error: %1\").arg(process ? process->errorString(): buffer.errorString()));\n    }\n\n    return ok;\n}",
  "abstract_func_before": "bool DDeviceDiskInfoPrivate::openDataStream(int VAR_0)\n{\n    if (VAR_1) {\n        VAR_1->deleteLater();\n    }\n\n    VAR_1 = new QProcess();\n\n    QObject::connect(VAR_1, VAR_2<void (QProcess::*)(int, QProcess::ExitStatus)>(&QProcess::finished),\n                     VAR_1, [this] (int VAR_3, QProcess::ExitStatus VAR_4) {\n        if (isClosing())\n            return;\n\n        if (VAR_4 == QProcess::CrashExit) {\n            setErrorString(QObject::tr(\"process \\\"%1 %2\\\" crashed\").arg(VAR_1->program()).arg(VAR_1->arguments().join(\" \")));\n        } else if (VAR_3 != 0) {\n            setErrorString(QObject::tr(\"Failed to perform process \\\"%1 %2\\\", error: %3\").arg(VAR_1->program()).arg(VAR_1->arguments().join(\" \")).arg(QString::fromUtf8(VAR_1->readAllStandardError())));\n        }\n    });\n\n    switch (VAR_5) {\n    case DDiskInfo::Headgear: {\n        if (VAR_6 != DDiskInfo::Disk) {\n            setErrorString(QObject::tr(\"\\\"%1\\\" is not a disk device\").arg(filePath()));\n\n            return false;\n        }\n\n        if (VAR_7 == DDiskInfo::Read) {\n            VAR_1->start(QStringLiteral(\"dd if=%1 bs=512 count=2048 status=none\").arg(filePath()), QIODevice::ReadOnly);\n        } else {\n            VAR_1->start(QStringLiteral(\"dd of=%1 bs=512 status=none conv=fsync\").arg(filePath()));\n        }\n\n        break;\n    }\n    case DDiskInfo::PartitionTable: {\n        if (VAR_6 != DDiskInfo::Disk) {\n            setErrorString(QObject::tr(\"\\\"%1\\\" is not a disk device\").arg(filePath()));\n\n            return false;\n        }\n\n        if (VAR_7 == DDiskInfo::Read)\n            VAR_1->start(QStringLiteral(\"sfdisk -d %1\").arg(filePath()), QIODevice::ReadOnly);\n        else\n            VAR_1->start(QStringLiteral(\"sfdisk %1 --no-reread\").arg(filePath()));\n\n        break;\n    }\n    case DDiskInfo::Partition: {\n        const DPartInfo &VAR_8 = (VAR_0 == 0 && VAR_7 == DDiskInfo::Write) ? DDevicePartInfo(filePath()) : VAR_9->getPartByNumber(VAR_0);\n\n        if (!VAR_8) {\n            dCDebug(\"Part is null(index: %d)\", VAR_0);\n\n            return false;\n        }\n\n        dCDebug(\"Try open device: %s, mode: %s\", qPrintable(VAR_8.filePath()), VAR_7 == DDiskInfo::Read ? \"Read\" : \"Write\");\n\n        if (Helper::isMounted(VAR_8.filePath())) {\n            if (Helper::umountDevice(VAR_8.filePath())) {\n                VAR_8.d->mountPoint.clear();\n            } else {\n                setErrorString(QObject::tr(\"\\\"%1\\\" is busy\").arg(VAR_8.filePath()));\n\n                return false;\n            }\n        }\n\n        if (VAR_7 == DDiskInfo::Read) {\n            const QString &VAR_10 = Helper::getPartcloneExecuter(VAR_8);\n            VAR_1->start(QStringLiteral(\"%1 -s %2 -o - -c -z %3 -L /tmp/partclone.log\").arg(VAR_10).arg(VAR_8.filePath()).arg(Global::bufferSize), QIODevice::ReadOnly);\n        } else {\n            VAR_1->start(QStringLiteral(\"partclone.restore -s - -o %2 -z %3 -L /tmp/partclone.log\").arg(VAR_8.filePath()).arg(Global::bufferSize));\n        }\n\n        break;\n    }\n    case DDiskInfo::JsonInfo: {\n        VAR_1->deleteLater();\n        VAR_1 = 0;\n        VAR_11.setData(VAR_9->toJson());\n        break;\n    }\n    default:\n        return false;\n    }\n\n    if (VAR_1) {\n        if (!VAR_1->waitForStarted()) {\n            setErrorString(QObject::tr(\"Failed to start \\\"%1 %2\\\", error: %3\").arg(VAR_1->program()).arg(VAR_1->arguments().join(\" \")).arg(VAR_1->errorString()));\n\n            return false;\n        }\n\n        dCDebug(\"The \\\"%s %s\\\" command start finished\", qPrintable(VAR_1->program()), qPrintable(VAR_1->arguments().join(\" \")));\n    }\n\n    bool VAR_12 = VAR_1 ? VAR_1->isOpen() : VAR_11.open(QIODevice::ReadOnly);\n\n    if (!VAR_12) {\n        setErrorString(QObject::tr(\"Failed to open process, error: %1\").arg(VAR_1 ? VAR_1->errorString(): VAR_11.errorString()));\n    }\n\n    return VAR_12;\n}",
  "func_graph_path_before": "linuxdeepin/deepin-clone/e079f3e2712b4f8c28e3e63e71ba1a1f90fce1ab/ddevicediskinfo.cpp/vul/before/0.json",
  "func": "bool DDeviceDiskInfoPrivate::openDataStream(int index)\n{\n    if (process) {\n        process->deleteLater();\n    }\n\n    process = new QProcess();\n\n    QObject::connect(process, static_cast<void (QProcess::*)(int, QProcess::ExitStatus)>(&QProcess::finished),\n                     process, [this] (int code, QProcess::ExitStatus status) {\n        if (isClosing())\n            return;\n\n        if (status == QProcess::CrashExit) {\n            setErrorString(QObject::tr(\"process \\\"%1 %2\\\" crashed\").arg(process->program()).arg(process->arguments().join(\" \")));\n        } else if (code != 0) {\n            setErrorString(QObject::tr(\"Failed to perform process \\\"%1 %2\\\", error: %3\").arg(process->program()).arg(process->arguments().join(\" \")).arg(QString::fromUtf8(process->readAllStandardError())));\n        }\n    });\n\n    switch (currentScope) {\n    case DDiskInfo::Headgear: {\n        if (type != DDiskInfo::Disk) {\n            setErrorString(QObject::tr(\"\\\"%1\\\" is not a disk device\").arg(filePath()));\n\n            return false;\n        }\n\n        if (currentMode == DDiskInfo::Read) {\n            process->start(QStringLiteral(\"dd if=%1 bs=512 count=2048 status=none\").arg(filePath()), QIODevice::ReadOnly);\n        } else {\n            process->start(QStringLiteral(\"dd of=%1 bs=512 status=none conv=fsync\").arg(filePath()));\n        }\n\n        break;\n    }\n    case DDiskInfo::PartitionTable: {\n        if (type != DDiskInfo::Disk) {\n            setErrorString(QObject::tr(\"\\\"%1\\\" is not a disk device\").arg(filePath()));\n\n            return false;\n        }\n\n        if (currentMode == DDiskInfo::Read)\n            process->start(QStringLiteral(\"sfdisk -d %1\").arg(filePath()), QIODevice::ReadOnly);\n        else\n            process->start(QStringLiteral(\"sfdisk %1 --no-reread\").arg(filePath()));\n\n        break;\n    }\n    case DDiskInfo::Partition: {\n        const DPartInfo &part = (index == 0 && currentMode == DDiskInfo::Write) ? DDevicePartInfo(filePath()) : q->getPartByNumber(index);\n\n        if (!part) {\n            dCDebug(\"Part is null(index: %d)\", index);\n\n            return false;\n        }\n\n        dCDebug(\"Try open device: %s, mode: %s\", qPrintable(part.filePath()), currentMode == DDiskInfo::Read ? \"Read\" : \"Write\");\n\n        if (Helper::isMounted(part.filePath())) {\n            if (Helper::umountDevice(part.filePath())) {\n                part.d->mountPoint.clear();\n            } else {\n                setErrorString(QObject::tr(\"\\\"%1\\\" is busy\").arg(part.filePath()));\n\n                return false;\n            }\n        }\n\n        if (currentMode == DDiskInfo::Read) {\n            const QString &executer = Helper::getPartcloneExecuter(part);\n            process->start(QStringLiteral(\"%1 -s %2 -o - -c -z %3 -L /var/log/partclone.log\").arg(executer).arg(part.filePath()).arg(Global::bufferSize), QIODevice::ReadOnly);\n        } else {\n            process->start(QStringLiteral(\"partclone.restore -s - -o %2 -z %3 -L /var/log/partclone.log\").arg(part.filePath()).arg(Global::bufferSize));\n        }\n\n        break;\n    }\n    case DDiskInfo::JsonInfo: {\n        process->deleteLater();\n        process = 0;\n        buffer.setData(q->toJson());\n        break;\n    }\n    default:\n        return false;\n    }\n\n    if (process) {\n        if (!process->waitForStarted()) {\n            setErrorString(QObject::tr(\"Failed to start \\\"%1 %2\\\", error: %3\").arg(process->program()).arg(process->arguments().join(\" \")).arg(process->errorString()));\n\n            return false;\n        }\n\n        dCDebug(\"The \\\"%s %s\\\" command start finished\", qPrintable(process->program()), qPrintable(process->arguments().join(\" \")));\n    }\n\n    bool ok = process ? process->isOpen() : buffer.open(QIODevice::ReadOnly);\n\n    if (!ok) {\n        setErrorString(QObject::tr(\"Failed to open process, error: %1\").arg(process ? process->errorString(): buffer.errorString()));\n    }\n\n    return ok;\n}",
  "abstract_func": "bool DDeviceDiskInfoPrivate::openDataStream(int VAR_0)\n{\n    if (VAR_1) {\n        VAR_1->deleteLater();\n    }\n\n    VAR_1 = new QProcess();\n\n    QObject::connect(VAR_1, VAR_2<void (QProcess::*)(int, QProcess::ExitStatus)>(&QProcess::finished),\n                     VAR_1, [this] (int VAR_3, QProcess::ExitStatus VAR_4) {\n        if (isClosing())\n            return;\n\n        if (VAR_4 == QProcess::CrashExit) {\n            setErrorString(QObject::tr(\"process \\\"%1 %2\\\" crashed\").arg(VAR_1->program()).arg(VAR_1->arguments().join(\" \")));\n        } else if (VAR_3 != 0) {\n            setErrorString(QObject::tr(\"Failed to perform process \\\"%1 %2\\\", error: %3\").arg(VAR_1->program()).arg(VAR_1->arguments().join(\" \")).arg(QString::fromUtf8(VAR_1->readAllStandardError())));\n        }\n    });\n\n    switch (VAR_5) {\n    case DDiskInfo::Headgear: {\n        if (VAR_6 != DDiskInfo::Disk) {\n            setErrorString(QObject::tr(\"\\\"%1\\\" is not a disk device\").arg(filePath()));\n\n            return false;\n        }\n\n        if (VAR_7 == DDiskInfo::Read) {\n            VAR_1->start(QStringLiteral(\"dd if=%1 bs=512 count=2048 status=none\").arg(filePath()), QIODevice::ReadOnly);\n        } else {\n            VAR_1->start(QStringLiteral(\"dd of=%1 bs=512 status=none conv=fsync\").arg(filePath()));\n        }\n\n        break;\n    }\n    case DDiskInfo::PartitionTable: {\n        if (VAR_6 != DDiskInfo::Disk) {\n            setErrorString(QObject::tr(\"\\\"%1\\\" is not a disk device\").arg(filePath()));\n\n            return false;\n        }\n\n        if (VAR_7 == DDiskInfo::Read)\n            VAR_1->start(QStringLiteral(\"sfdisk -d %1\").arg(filePath()), QIODevice::ReadOnly);\n        else\n            VAR_1->start(QStringLiteral(\"sfdisk %1 --no-reread\").arg(filePath()));\n\n        break;\n    }\n    case DDiskInfo::Partition: {\n        const DPartInfo &VAR_8 = (VAR_0 == 0 && VAR_7 == DDiskInfo::Write) ? DDevicePartInfo(filePath()) : VAR_9->getPartByNumber(VAR_0);\n\n        if (!VAR_8) {\n            dCDebug(\"Part is null(index: %d)\", VAR_0);\n\n            return false;\n        }\n\n        dCDebug(\"Try open device: %s, mode: %s\", qPrintable(VAR_8.filePath()), VAR_7 == DDiskInfo::Read ? \"Read\" : \"Write\");\n\n        if (Helper::isMounted(VAR_8.filePath())) {\n            if (Helper::umountDevice(VAR_8.filePath())) {\n                VAR_8.d->mountPoint.clear();\n            } else {\n                setErrorString(QObject::tr(\"\\\"%1\\\" is busy\").arg(VAR_8.filePath()));\n\n                return false;\n            }\n        }\n\n        if (VAR_7 == DDiskInfo::Read) {\n            const QString &VAR_10 = Helper::getPartcloneExecuter(VAR_8);\n            VAR_1->start(QStringLiteral(\"%1 -s %2 -o - -c -z %3 -L /var/log/partclone.log\").arg(VAR_10).arg(VAR_8.filePath()).arg(Global::bufferSize), QIODevice::ReadOnly);\n        } else {\n            VAR_1->start(QStringLiteral(\"partclone.restore -s - -o %2 -z %3 -L /var/log/partclone.log\").arg(VAR_8.filePath()).arg(Global::bufferSize));\n        }\n\n        break;\n    }\n    case DDiskInfo::JsonInfo: {\n        VAR_1->deleteLater();\n        VAR_1 = 0;\n        VAR_11.setData(VAR_9->toJson());\n        break;\n    }\n    default:\n        return false;\n    }\n\n    if (VAR_1) {\n        if (!VAR_1->waitForStarted()) {\n            setErrorString(QObject::tr(\"Failed to start \\\"%1 %2\\\", error: %3\").arg(VAR_1->program()).arg(VAR_1->arguments().join(\" \")).arg(VAR_1->errorString()));\n\n            return false;\n        }\n\n        dCDebug(\"The \\\"%s %s\\\" command start finished\", qPrintable(VAR_1->program()), qPrintable(VAR_1->arguments().join(\" \")));\n    }\n\n    bool VAR_12 = VAR_1 ? VAR_1->isOpen() : VAR_11.open(QIODevice::ReadOnly);\n\n    if (!VAR_12) {\n        setErrorString(QObject::tr(\"Failed to open process, error: %1\").arg(VAR_1 ? VAR_1->errorString(): VAR_11.errorString()));\n    }\n\n    return VAR_12;\n}",
  "func_graph_path": "linuxdeepin/deepin-clone/e079f3e2712b4f8c28e3e63e71ba1a1f90fce1ab/ddevicediskinfo.cpp/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -71,9 +71,9 @@\n \n         if (currentMode == DDiskInfo::Read) {\n             const QString &executer = Helper::getPartcloneExecuter(part);\n-            process->start(QStringLiteral(\"%1 -s %2 -o - -c -z %3 -L /tmp/partclone.log\").arg(executer).arg(part.filePath()).arg(Global::bufferSize), QIODevice::ReadOnly);\n+            process->start(QStringLiteral(\"%1 -s %2 -o - -c -z %3 -L /var/log/partclone.log\").arg(executer).arg(part.filePath()).arg(Global::bufferSize), QIODevice::ReadOnly);\n         } else {\n-            process->start(QStringLiteral(\"partclone.restore -s - -o %2 -z %3 -L /tmp/partclone.log\").arg(part.filePath()).arg(Global::bufferSize));\n+            process->start(QStringLiteral(\"partclone.restore -s - -o %2 -z %3 -L /var/log/partclone.log\").arg(part.filePath()).arg(Global::bufferSize));\n         }\n \n         break;",
  "diff_line_info": {
    "deleted_lines": [
      "            process->start(QStringLiteral(\"%1 -s %2 -o - -c -z %3 -L /tmp/partclone.log\").arg(executer).arg(part.filePath()).arg(Global::bufferSize), QIODevice::ReadOnly);",
      "            process->start(QStringLiteral(\"partclone.restore -s - -o %2 -z %3 -L /tmp/partclone.log\").arg(part.filePath()).arg(Global::bufferSize));"
    ],
    "added_lines": [
      "            process->start(QStringLiteral(\"%1 -s %2 -o - -c -z %3 -L /var/log/partclone.log\").arg(executer).arg(part.filePath()).arg(Global::bufferSize), QIODevice::ReadOnly);",
      "            process->start(QStringLiteral(\"partclone.restore -s - -o %2 -z %3 -L /var/log/partclone.log\").arg(part.filePath()).arg(Global::bufferSize));"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/linuxdeepin/deepin-clone/pull/18",
  "description": {
    "pr_info": {
      "title": "修复隐藏的安全隐患",
      "number": 18
    },
    "comment": [
      "任何位置都不在使用 /tmp 目录\r\n所有的命令调用都把命令和参数分开传递给QProcess\n\n<!-- Reviewable:start -->\n---\nThis change is [<img src=\"https://reviewable.io/review_button.svg\" height=\"34\" align=\"absmiddle\" alt=\"Reviewable\"/>](https://reviewable.io/reviews/linuxdeepin/deepin-clone/18)\n<!-- Reviewable:end -->\n"
    ]
  },
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "\n\n**Final Output:**\n\nAnalysis: The patch changes the log file directory from '/tmp' to '/var/log', addressing an issue with log storage. This doesn't fix a security vulnerability but improves logging practices.\n\nFinal Classification: Defect Remediation & Feature Upgrades\n\nConfidence Score: 0.9"
}