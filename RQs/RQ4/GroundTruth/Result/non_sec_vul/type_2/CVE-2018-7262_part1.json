{
  "cve_id": "CVE-2018-7262",
  "cwe_ids": [
    "CWE-476"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "ceph",
  "commit_msg": "rgw:  make init env methods return an error\n\nSince web frontends may signal an error when requests are malformed or so, let\nus double check this and raise errors early. The current user of this is\ncivetweb frontend; which can potentially return null from `parse_http_headers`\nwhen a HTTP header without a \":\" is supplied at which point headers.value is\nnull which can lead to undefined behaviour later in RGW.\n\nFixes: http://tracker.ceph.com/issues/23039\nSigned-off-by: Abhishek Lekshmanan <abhishek@suse.com>",
  "commit_hash": "7872a831783e17dcc4d0aa70cffc256afb664f7a",
  "git_url": "https://github.com/ceph/ceph/commit/7872a831783e17dcc4d0aa70cffc256afb664f7a",
  "file_path": "src/rgw/rgw_client_io.cc",
  "func_name": "BasicClient::init",
  "func_before": "void BasicClient::init(CephContext *cct) {\n  init_env(cct);\n\n  if (cct->_conf->subsys.should_gather(ceph_subsys_rgw, 20)) {\n    const auto& env_map = get_env().get_map();\n\n    for (const auto& iter: env_map) {\n      rgw::crypt_sanitize::env x{iter.first, iter.second};\n      ldout(cct, 20) << iter.first << \"=\" << (x) << dendl;\n    }\n  }\n}",
  "abstract_func_before": "void BasicClient::init(CephContext *VAR_0) {\n  init_env(VAR_0);\n\n  if (VAR_0->_conf->subsys.should_gather(VAR_1, 20)) {\n    const auto& VAR_2 = get_env().get_map();\n\n    for (const auto& VAR_3: VAR_2) {\n      rgw::crypt_sanitize::env VAR_4{VAR_3.first, VAR_3.second};\n      ldout(VAR_0, 20) << VAR_3.first << \"=\" << (VAR_4) << VAR_5;\n    }\n  }\n}",
  "func_graph_path_before": "ceph/7872a831783e17dcc4d0aa70cffc256afb664f7a/rgw_client_io.cc/vul/before/0.json",
  "func": "[[nodiscard]] int BasicClient::init(CephContext *cct) {\n  int init_error = init_env(cct);\n\n  if (init_error != 0)\n    return init_error;\n\n  if (cct->_conf->subsys.should_gather(ceph_subsys_rgw, 20)) {\n    const auto& env_map = get_env().get_map();\n\n    for (const auto& iter: env_map) {\n      rgw::crypt_sanitize::env x{iter.first, iter.second};\n      ldout(cct, 20) << iter.first << \"=\" << (x) << dendl;\n    }\n  }\n  return init_error;\n}",
  "abstract_func": "[[VAR_0]] int BasicClient::init(CephContext *VAR_1) {\n  int VAR_2 = init_env(VAR_1);\n\n  if (VAR_2 != 0)\n    return VAR_2;\n\n  if (VAR_1->_conf->subsys.should_gather(VAR_3, 20)) {\n    const auto& VAR_4 = get_env().get_map();\n\n    for (const auto& VAR_5: VAR_4) {\n      rgw::crypt_sanitize::env VAR_6{VAR_5.first, VAR_5.second};\n      ldout(VAR_1, 20) << VAR_5.first << \"=\" << (VAR_6) << VAR_7;\n    }\n  }\n  return VAR_2;\n}",
  "func_graph_path": "ceph/7872a831783e17dcc4d0aa70cffc256afb664f7a/rgw_client_io.cc/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,5 +1,8 @@\n-void BasicClient::init(CephContext *cct) {\n-  init_env(cct);\n+[[nodiscard]] int BasicClient::init(CephContext *cct) {\n+  int init_error = init_env(cct);\n+\n+  if (init_error != 0)\n+    return init_error;\n \n   if (cct->_conf->subsys.should_gather(ceph_subsys_rgw, 20)) {\n     const auto& env_map = get_env().get_map();\n@@ -9,4 +12,5 @@\n       ldout(cct, 20) << iter.first << \"=\" << (x) << dendl;\n     }\n   }\n+  return init_error;\n }",
  "diff_line_info": {
    "deleted_lines": [
      "void BasicClient::init(CephContext *cct) {",
      "  init_env(cct);"
    ],
    "added_lines": [
      "[[nodiscard]] int BasicClient::init(CephContext *cct) {",
      "  int init_error = init_env(cct);",
      "",
      "  if (init_error != 0)",
      "    return init_error;",
      "  return init_error;"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/ceph/ceph/pull/20488",
  "description": {
    "pr_info": {
      "title": "rgw:  make init env methods return an error",
      "number": 20488
    },
    "comment": [
      "Since web frontends may signal an error when requests are malformed or so, let\r\nus double check this and raise errors early. The current user of this is\r\ncivetweb frontend; which can potentially return null from `parse_http_headers`\r\nwhen a HTTP header without a \":\" is supplied at which point headers.value is\r\nnull which can lead to undefined behaviour later in RGW.\r\n\r\nFixes: http://tracker.ceph.com/issues/23039\r\nSigned-off-by: Abhishek Lekshmanan <abhishek@suse.com>",
      "changelog: \r\n- drop init_error variable in rgw_civetweb\r\n- raise -EINVAL if mg_request info isn't populated in rgw_civetweb.cc\r\n   this is a changed behaviour  from earlier where we return and fail at a much later stage in rgw process \r\n",
      "@yehudasa @cbodley do these changes look okay?",
      "was unable to reproduce the failures in manual testing :+1: "
    ]
  },
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "\n\nThe patch modifies the `init` function to return an error code, addressing a bug where a malformed header could cause undefined behavior. It's classified as a defect fix, not a security vulnerability.\n\n**Final Output:**\nAnalysis: The patch modifies the `init` function to return an error code, addressing a bug where a malformed header could cause undefined behavior. It's classified as a defect fix, not a security vulnerability.\n\nFinal Classification: Defect Remediation & Feature Upgrades\nConfidence Score: 0.9"
}