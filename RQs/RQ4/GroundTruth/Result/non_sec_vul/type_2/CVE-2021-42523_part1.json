{
  "cve_id": "CVE-2021-42523",
  "cwe_ids": [
    "CWE-401"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
  "cvss_is_v3": true,
  "repo_name": "hughsie/colord",
  "commit_msg": "Fix a small memory leak in sqlite3_exec()\n\nFixes https://github.com/hughsie/colord/issues/110",
  "commit_hash": "adf41f36cf7214d7d6fa8d528b74eba47c377405",
  "git_url": "https://github.com/hughsie/colord/commit/adf41f36cf7214d7d6fa8d528b74eba47c377405",
  "file_path": "src/cd-device-db.c",
  "func_name": "cd_device_db_load",
  "func_before": "gboolean  \ncd_device_db_load (CdDeviceDb *ddb,\n\t\t    const gchar *filename,\n\t\t    GError  **error)\n{\n\tCdDeviceDbPrivate *priv = GET_PRIVATE (ddb);\n\tconst gchar *statement;\n\tgchar *error_msg = NULL;\n\tgint rc;\n\tg_autofree gchar *path = NULL;\n\n\tg_return_val_if_fail (CD_IS_DEVICE_DB (ddb), FALSE);\n\tg_return_val_if_fail (priv->db == NULL, FALSE);\n\n\t/* ensure the path exists */\n\tpath = g_path_get_dirname (filename);\n\tif (!cd_main_mkdir_with_parents (path, error))\n\t\treturn FALSE;\n\n\tg_debug (\"CdDeviceDb: trying to open database '%s'\", filename);\n\tg_info (\"Using device database file %s\", filename);\n\trc = sqlite3_open (filename, &priv->db);\n\tif (rc != SQLITE_OK) {\n\t\tg_set_error (error,\n\t\t\t     CD_CLIENT_ERROR,\n\t\t\t     CD_CLIENT_ERROR_INTERNAL,\n\t\t\t     \"Can't open database: %s\\n\",\n\t\t\t     sqlite3_errmsg (priv->db));\n\t\tsqlite3_close (priv->db);\n\t\treturn FALSE;\n\t}\n\n\t/* we don't need to keep doing fsync */\n\tsqlite3_exec (priv->db, \"PRAGMA synchronous=OFF\",\n\t\t      NULL, NULL, NULL);\n\n\t/* check devices */\n\trc = sqlite3_exec (priv->db, \"SELECT * FROM devices LIMIT 1\",\n\t\t\t   NULL, NULL, &error_msg);\n\tif (rc != SQLITE_OK) {\n\t\tg_debug (\"CdDeviceDb: creating table to repair: %s\", error_msg);\n\t\tsqlite3_free (error_msg);\n\t\tstatement = \"CREATE TABLE devices (\"\n\t\t\t    \"device_id TEXT PRIMARY KEY,\"\n\t\t\t    \"device TEXT);\";\n\t\tsqlite3_exec (priv->db, statement, NULL, NULL, NULL);\n\t}\n\n\t/* check properties version 2 */\n\trc = sqlite3_exec (priv->db, \"SELECT * FROM properties_v2 LIMIT 1\",\n\t\t\t   NULL, NULL, &error_msg);\n\tif (rc != SQLITE_OK) {\n\t\tstatement = \"CREATE TABLE properties_v2 (\"\n\t\t\t    \"device_id TEXT,\"\n\t\t\t    \"property TEXT,\"\n\t\t\t    \"value TEXT,\"\n\t\t\t    \"PRIMARY KEY (device_id, property));\";\n\t\tsqlite3_exec (priv->db, statement, NULL, NULL, NULL);\n\t}\n\treturn TRUE;\n}",
  "abstract_func_before": "gboolean  \ncd_device_db_load (CdDeviceDb *VAR_0,\n\t\t    const gchar *VAR_1,\n\t\t    GError  **VAR_2)\n{\n\tCdDeviceDbPrivate *VAR_3 = GET_PRIVATE (VAR_0);\n\tconst gchar *VAR_4;\n\tgchar *VAR_5 = NULL;\n\tgint VAR_6;\n\tg_autofree gchar *VAR_7 = NULL;\n\n\tg_return_val_if_fail (CD_IS_DEVICE_DB (VAR_0), FALSE);\n\tg_return_val_if_fail (VAR_3->db == NULL, FALSE);\n\n\t/* COMMENT_0 */\n\tVAR_7 = g_path_get_dirname (VAR_1);\n\tif (!cd_main_mkdir_with_parents (VAR_7, VAR_2))\n\t\treturn FALSE;\n\n\tg_debug (\"CdDeviceDb: trying to open database '%s'\", VAR_1);\n\tg_info (\"Using device database file %s\", VAR_1);\n\tVAR_6 = sqlite3_open (VAR_1, &VAR_3->db);\n\tif (VAR_6 != VAR_8) {\n\t\tg_set_error (VAR_2,\n\t\t\t     VAR_9,\n\t\t\t     VAR_10,\n\t\t\t     \"Can't open database: %s\\n\",\n\t\t\t     sqlite3_errmsg (VAR_3->db));\n\t\tsqlite3_close (VAR_3->db);\n\t\treturn FALSE;\n\t}\n\n\t/* COMMENT_1 */\n\tsqlite3_exec (VAR_3->db, \"PRAGMA synchronous=OFF\",\n\t\t      NULL, NULL, NULL);\n\n\t/* COMMENT_2 */\n\tVAR_6 = sqlite3_exec (VAR_3->db, \"SELECT * FROM devices LIMIT 1\",\n\t\t\t   NULL, NULL, &VAR_5);\n\tif (VAR_6 != VAR_8) {\n\t\tg_debug (\"CdDeviceDb: creating table to repair: %s\", VAR_5);\n\t\tsqlite3_free (VAR_5);\n\t\tVAR_4 = \"CREATE TABLE devices (\"\n\t\t\t    \"device_id TEXT PRIMARY KEY,\"\n\t\t\t    \"device TEXT);\";\n\t\tsqlite3_exec (VAR_3->db, VAR_4, NULL, NULL, NULL);\n\t}\n\n\t/* COMMENT_3 */\n\tVAR_6 = sqlite3_exec (VAR_3->db, \"SELECT * FROM properties_v2 LIMIT 1\",\n\t\t\t   NULL, NULL, &VAR_5);\n\tif (VAR_6 != VAR_8) {\n\t\tVAR_4 = \"CREATE TABLE properties_v2 (\"\n\t\t\t    \"device_id TEXT,\"\n\t\t\t    \"property TEXT,\"\n\t\t\t    \"value TEXT,\"\n\t\t\t    \"PRIMARY KEY (device_id, property));\";\n\t\tsqlite3_exec (VAR_3->db, VAR_4, NULL, NULL, NULL);\n\t}\n\treturn TRUE;\n}",
  "func_graph_path_before": "hughsie/colord/adf41f36cf7214d7d6fa8d528b74eba47c377405/cd-device-db.c/vul/before/0.json",
  "func": "gboolean  \ncd_device_db_load (CdDeviceDb *ddb,\n\t\t    const gchar *filename,\n\t\t    GError  **error)\n{\n\tCdDeviceDbPrivate *priv = GET_PRIVATE (ddb);\n\tconst gchar *statement;\n\tgchar *error_msg = NULL;\n\tgint rc;\n\tg_autofree gchar *path = NULL;\n\n\tg_return_val_if_fail (CD_IS_DEVICE_DB (ddb), FALSE);\n\tg_return_val_if_fail (priv->db == NULL, FALSE);\n\n\t/* ensure the path exists */\n\tpath = g_path_get_dirname (filename);\n\tif (!cd_main_mkdir_with_parents (path, error))\n\t\treturn FALSE;\n\n\tg_debug (\"CdDeviceDb: trying to open database '%s'\", filename);\n\tg_info (\"Using device database file %s\", filename);\n\trc = sqlite3_open (filename, &priv->db);\n\tif (rc != SQLITE_OK) {\n\t\tg_set_error (error,\n\t\t\t     CD_CLIENT_ERROR,\n\t\t\t     CD_CLIENT_ERROR_INTERNAL,\n\t\t\t     \"Can't open database: %s\\n\",\n\t\t\t     sqlite3_errmsg (priv->db));\n\t\tsqlite3_close (priv->db);\n\t\treturn FALSE;\n\t}\n\n\t/* we don't need to keep doing fsync */\n\tsqlite3_exec (priv->db, \"PRAGMA synchronous=OFF\",\n\t\t      NULL, NULL, NULL);\n\n\t/* check devices */\n\trc = sqlite3_exec (priv->db, \"SELECT * FROM devices LIMIT 1\",\n\t\t\t   NULL, NULL, &error_msg);\n\tif (rc != SQLITE_OK) {\n\t\tg_debug (\"CdDeviceDb: creating table to repair: %s\", error_msg);\n\t\tsqlite3_free (error_msg);\n\t\tstatement = \"CREATE TABLE devices (\"\n\t\t\t    \"device_id TEXT PRIMARY KEY,\"\n\t\t\t    \"device TEXT);\";\n\t\tsqlite3_exec (priv->db, statement, NULL, NULL, NULL);\n\t}\n\n\t/* check properties version 2 */\n\trc = sqlite3_exec (priv->db, \"SELECT * FROM properties_v2 LIMIT 1\",\n\t\t\t   NULL, NULL, NULL);\n\tif (rc != SQLITE_OK) {\n\t\tstatement = \"CREATE TABLE properties_v2 (\"\n\t\t\t    \"device_id TEXT,\"\n\t\t\t    \"property TEXT,\"\n\t\t\t    \"value TEXT,\"\n\t\t\t    \"PRIMARY KEY (device_id, property));\";\n\t\tsqlite3_exec (priv->db, statement, NULL, NULL, NULL);\n\t}\n\treturn TRUE;\n}",
  "abstract_func": "gboolean  \ncd_device_db_load (CdDeviceDb *VAR_0,\n\t\t    const gchar *VAR_1,\n\t\t    GError  **VAR_2)\n{\n\tCdDeviceDbPrivate *VAR_3 = GET_PRIVATE (VAR_0);\n\tconst gchar *VAR_4;\n\tgchar *VAR_5 = NULL;\n\tgint VAR_6;\n\tg_autofree gchar *VAR_7 = NULL;\n\n\tg_return_val_if_fail (CD_IS_DEVICE_DB (VAR_0), FALSE);\n\tg_return_val_if_fail (VAR_3->db == NULL, FALSE);\n\n\t/* COMMENT_0 */\n\tVAR_7 = g_path_get_dirname (VAR_1);\n\tif (!cd_main_mkdir_with_parents (VAR_7, VAR_2))\n\t\treturn FALSE;\n\n\tg_debug (\"CdDeviceDb: trying to open database '%s'\", VAR_1);\n\tg_info (\"Using device database file %s\", VAR_1);\n\tVAR_6 = sqlite3_open (VAR_1, &VAR_3->db);\n\tif (VAR_6 != VAR_8) {\n\t\tg_set_error (VAR_2,\n\t\t\t     VAR_9,\n\t\t\t     VAR_10,\n\t\t\t     \"Can't open database: %s\\n\",\n\t\t\t     sqlite3_errmsg (VAR_3->db));\n\t\tsqlite3_close (VAR_3->db);\n\t\treturn FALSE;\n\t}\n\n\t/* COMMENT_1 */\n\tsqlite3_exec (VAR_3->db, \"PRAGMA synchronous=OFF\",\n\t\t      NULL, NULL, NULL);\n\n\t/* COMMENT_2 */\n\tVAR_6 = sqlite3_exec (VAR_3->db, \"SELECT * FROM devices LIMIT 1\",\n\t\t\t   NULL, NULL, &VAR_5);\n\tif (VAR_6 != VAR_8) {\n\t\tg_debug (\"CdDeviceDb: creating table to repair: %s\", VAR_5);\n\t\tsqlite3_free (VAR_5);\n\t\tVAR_4 = \"CREATE TABLE devices (\"\n\t\t\t    \"device_id TEXT PRIMARY KEY,\"\n\t\t\t    \"device TEXT);\";\n\t\tsqlite3_exec (VAR_3->db, VAR_4, NULL, NULL, NULL);\n\t}\n\n\t/* COMMENT_3 */\n\tVAR_6 = sqlite3_exec (VAR_3->db, \"SELECT * FROM properties_v2 LIMIT 1\",\n\t\t\t   NULL, NULL, NULL);\n\tif (VAR_6 != VAR_8) {\n\t\tVAR_4 = \"CREATE TABLE properties_v2 (\"\n\t\t\t    \"device_id TEXT,\"\n\t\t\t    \"property TEXT,\"\n\t\t\t    \"value TEXT,\"\n\t\t\t    \"PRIMARY KEY (device_id, property));\";\n\t\tsqlite3_exec (VAR_3->db, VAR_4, NULL, NULL, NULL);\n\t}\n\treturn TRUE;\n}",
  "func_graph_path": "hughsie/colord/adf41f36cf7214d7d6fa8d528b74eba47c377405/cd-device-db.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -48,7 +48,7 @@\n \n \t/* check properties version 2 */\n \trc = sqlite3_exec (priv->db, \"SELECT * FROM properties_v2 LIMIT 1\",\n-\t\t\t   NULL, NULL, &error_msg);\n+\t\t\t   NULL, NULL, NULL);\n \tif (rc != SQLITE_OK) {\n \t\tstatement = \"CREATE TABLE properties_v2 (\"\n \t\t\t    \"device_id TEXT,\"",
  "diff_line_info": {
    "deleted_lines": [
      "\t\t\t   NULL, NULL, &error_msg);"
    ],
    "added_lines": [
      "\t\t\t   NULL, NULL, NULL);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/hughsie/colord/pull/130",
  "description": {
    "pr_info": {
      "title": "Fix the potential memory leak of sqlite3_exec()",
      "number": 130
    },
    "comment": [
      "This PR fixes the issue https://github.com/hughsie/colord/issues/110 by setting the 5th parameter of `sqlite3_exec()` to NULL.\r\n"
    ]
  },
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.8,
  "Bug Filter Response": "\n\nThe patch addresses a memory leak in `sqlite3_exec` by preventing the allocation of an error message string. This fix resolves a bug that could lead to resource exhaustion but doesn't directly address a security vulnerability. \n\n**Final Classification:** Defect Remediation & Feature Upgrades  \n**Confidence Score:** 0.8"
}