{
  "cve_id": "CVE-2018-6794",
  "cwe_ids": [
    "CWE-693"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:N/I:P/A:N",
  "cvss_is_v3": false,
  "repo_name": "OISF/suricata",
  "commit_msg": "stream: still inspect packets dropped by stream\n\nThe detect engine would bypass packets that are set as dropped. This\nseems sane, as these packets are going to be dropped anyway.\n\nHowever, it lead to the following corner case: stream events that\ntriggered the drop could not be matched on the rules. The packet\nwith the event wouldn't make it to the detect engine due to the bypass.\n\nThis patch changes the logic to not bypass DROP packets anymore.\nPackets that are dropped by the stream engine will set the no payload\ninspection flag, so avoid needless cost.",
  "commit_hash": "e1ef57c848bbe4e567d5d4b66d346a742e3f77a1",
  "git_url": "https://github.com/OISF/suricata/commit/e1ef57c848bbe4e567d5d4b66d346a742e3f77a1",
  "file_path": "src/detect.c",
  "func_name": "DetectFlow",
  "func_before": "static void DetectFlow(ThreadVars *tv,\n                       DetectEngineCtx *de_ctx, DetectEngineThreadCtx *det_ctx,\n                       Packet *p)\n{\n    /* No need to perform any detection on this packet, if the the given flag is set.*/\n    if ((p->flags & PKT_NOPACKET_INSPECTION) ||\n        (PACKET_TEST_ACTION(p, ACTION_DROP)))\n    {\n        /* hack: if we are in pass the entire flow mode, we need to still\n         * update the inspect_id forward. So test for the condition here,\n         * and call the update code if necessary. */\n        const int pass = ((p->flow->flags & FLOW_NOPACKET_INSPECTION));\n        const AppProto alproto = FlowGetAppProtocol(p->flow);\n        if (pass && AppLayerParserProtocolSupportsTxs(p->proto, alproto)) {\n            uint8_t flags;\n            if (p->flowflags & FLOW_PKT_TOSERVER) {\n                flags = STREAM_TOSERVER;\n            } else {\n                flags = STREAM_TOCLIENT;\n            }\n            flags = FlowGetDisruptionFlags(p->flow, flags);\n            DeStateUpdateInspectTransactionId(p->flow, flags, true);\n        }\n        return;\n    }\n\n    /* see if the packet matches one or more of the sigs */\n    (void)DetectRun(tv, de_ctx, det_ctx, p);\n}",
  "abstract_func_before": "static void DetectFlow(ThreadVars *VAR_0,\n                       DetectEngineCtx *VAR_1, DetectEngineThreadCtx *VAR_2,\n                       Packet *VAR_3)\n{\n    /* COMMENT_0 */\n    if ((VAR_3->flags & VAR_4) ||\n        (PACKET_TEST_ACTION(VAR_3, VAR_5)))\n    {\n        /* COMMENT_1 */\n                                                                         \n                                                    \n        const int VAR_6 = ((VAR_3->flow->flags & VAR_7));\n        const AppProto VAR_8 = FlowGetAppProtocol(VAR_3->flow);\n        if (VAR_6 && AppLayerParserProtocolSupportsTxs(VAR_3->proto, VAR_8)) {\n            uint8_t VAR_9;\n            if (VAR_3->flowflags & VAR_10) {\n                VAR_9 = VAR_11;\n            } else {\n                VAR_9 = VAR_12;\n            }\n            VAR_9 = FlowGetDisruptionFlags(VAR_3->flow, VAR_9);\n            DeStateUpdateInspectTransactionId(VAR_3->flow, VAR_9, true);\n        }\n        return;\n    }\n\n    /* COMMENT_4 */\n    (void)DetectRun(VAR_0, VAR_1, VAR_2, VAR_3);\n}",
  "func_graph_path_before": "OISF/suricata/e1ef57c848bbe4e567d5d4b66d346a742e3f77a1/detect.c/vul/before/0.json",
  "func": "static void DetectFlow(ThreadVars *tv,\n                       DetectEngineCtx *de_ctx, DetectEngineThreadCtx *det_ctx,\n                       Packet *p)\n{\n    if (p->flags & PKT_NOPACKET_INSPECTION) {\n        /* hack: if we are in pass the entire flow mode, we need to still\n         * update the inspect_id forward. So test for the condition here,\n         * and call the update code if necessary. */\n        const int pass = ((p->flow->flags & FLOW_NOPACKET_INSPECTION));\n        const AppProto alproto = FlowGetAppProtocol(p->flow);\n        if (pass && AppLayerParserProtocolSupportsTxs(p->proto, alproto)) {\n            uint8_t flags;\n            if (p->flowflags & FLOW_PKT_TOSERVER) {\n                flags = STREAM_TOSERVER;\n            } else {\n                flags = STREAM_TOCLIENT;\n            }\n            flags = FlowGetDisruptionFlags(p->flow, flags);\n            DeStateUpdateInspectTransactionId(p->flow, flags, true);\n        }\n        SCLogDebug(\"p->pcap %\"PRIu64\": no detection on packet, \"\n                \"PKT_NOPACKET_INSPECTION is set\", p->pcap_cnt);\n        return;\n    }\n\n    /* see if the packet matches one or more of the sigs */\n    (void)DetectRun(tv, de_ctx, det_ctx, p);\n}",
  "abstract_func": "static void DetectFlow(ThreadVars *VAR_0,\n                       DetectEngineCtx *VAR_1, DetectEngineThreadCtx *VAR_2,\n                       Packet *VAR_3)\n{\n    if (VAR_3->flags & VAR_4) {\n        /* COMMENT_0 */\n                                                                         \n                                                    \n        const int VAR_5 = ((VAR_3->flow->flags & VAR_6));\n        const AppProto VAR_7 = FlowGetAppProtocol(VAR_3->flow);\n        if (VAR_5 && AppLayerParserProtocolSupportsTxs(VAR_3->proto, VAR_7)) {\n            uint8_t VAR_8;\n            if (VAR_3->flowflags & VAR_9) {\n                VAR_8 = VAR_10;\n            } else {\n                VAR_8 = VAR_11;\n            }\n            VAR_8 = FlowGetDisruptionFlags(VAR_3->flow, VAR_8);\n            DeStateUpdateInspectTransactionId(VAR_3->flow, VAR_8, true);\n        }\n        SCLogDebug(\"p->pcap %\"VAR_12\": no detection on packet, \"\n                \"PKT_NOPACKET_INSPECTION is set\", VAR_3->pcap_cnt);\n        return;\n    }\n\n    /* COMMENT_3 */\n    (void)DetectRun(VAR_0, VAR_1, VAR_2, VAR_3);\n}",
  "func_graph_path": "OISF/suricata/e1ef57c848bbe4e567d5d4b66d346a742e3f77a1/detect.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -2,10 +2,7 @@\n                        DetectEngineCtx *de_ctx, DetectEngineThreadCtx *det_ctx,\n                        Packet *p)\n {\n-    /* No need to perform any detection on this packet, if the the given flag is set.*/\n-    if ((p->flags & PKT_NOPACKET_INSPECTION) ||\n-        (PACKET_TEST_ACTION(p, ACTION_DROP)))\n-    {\n+    if (p->flags & PKT_NOPACKET_INSPECTION) {\n         /* hack: if we are in pass the entire flow mode, we need to still\n          * update the inspect_id forward. So test for the condition here,\n          * and call the update code if necessary. */\n@@ -21,6 +18,8 @@\n             flags = FlowGetDisruptionFlags(p->flow, flags);\n             DeStateUpdateInspectTransactionId(p->flow, flags, true);\n         }\n+        SCLogDebug(\"p->pcap %\"PRIu64\": no detection on packet, \"\n+                \"PKT_NOPACKET_INSPECTION is set\", p->pcap_cnt);\n         return;\n     }\n ",
  "diff_line_info": {
    "deleted_lines": [
      "    /* No need to perform any detection on this packet, if the the given flag is set.*/",
      "    if ((p->flags & PKT_NOPACKET_INSPECTION) ||",
      "        (PACKET_TEST_ACTION(p, ACTION_DROP)))",
      "    {"
    ],
    "added_lines": [
      "    if (p->flags & PKT_NOPACKET_INSPECTION) {",
      "        SCLogDebug(\"p->pcap %\"PRIu64\": no detection on packet, \"",
      "                \"PKT_NOPACKET_INSPECTION is set\", p->pcap_cnt);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/OISF/suricata/pull/3201",
  "description": {
    "pr_info": {
      "title": "Next/20180129/v12",
      "number": 3201
    },
    "comment": [
      "Supports HTTP pickup by response. Requires https://github.com/OISF/libhtp/pull/163\r\nImproves NFS file handling.\r\nAdds the metadata work from #3198\r\nAdds doc updates from #3194\r\nAdds TFTP logging from #3185\r\n\r\nhttps://redmine.openinfosecfoundation.org/issues/993\r\nhttps://redmine.openinfosecfoundation.org/issues/2391\r\nhttps://redmine.openinfosecfoundation.org/issues/2427\r\n\r\n[PRScript](https://redmine.openinfosecfoundation.org/projects/suricata/wiki/PRscript) output (if applicable):\r\n- PR victorjulien-pcap: https://buildbot.openinfosecfoundation.org/builders/victorjulien-pcap/builds/81\r\n- PR victorjulien: https://buildbot.openinfosecfoundation.org/builders/victorjulien/builds/83\r\n"
    ]
  },
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.8,
  "Bug Filter Response": "\n\nFinal Classification: Defect Remediation & Feature Upgrades  \nConfidence Score: 0.8  \n\n**Analysis:**  \nThe patch addresses a functional issue where certain packets were bypassed in the detect engine, potentially missing security events. While it improves detection accuracy, there's no explicit indication of a security vulnerability. The change is categorized as a defect fix."
}