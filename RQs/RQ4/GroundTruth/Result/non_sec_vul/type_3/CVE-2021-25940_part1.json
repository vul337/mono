{
  "cve_id": "CVE-2021-25940",
  "cwe_ids": [
    "CWE-613"
  ],
  "cvss_vector": "AV:N/AC:M/Au:S/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "arangodb",
  "commit_msg": "Revive startup parameter `--server.session-timeout` (#14118)\n\nCo-authored-by: Tobias GÃ¶dderz <tobias@arangodb.com>",
  "commit_hash": "e9c6ee9dcca7b9b4fbcd02a0b323d205bee838d3",
  "git_url": "https://github.com/arangodb/arangodb/commit/e9c6ee9dcca7b9b4fbcd02a0b323d205bee838d3",
  "file_path": "arangod/GeneralServer/AuthenticationFeature.cpp",
  "func_name": "AuthenticationFeature::collectOptions",
  "func_before": "void AuthenticationFeature::collectOptions(std::shared_ptr<ProgramOptions> options) {\n  options->addOldOption(\"server.disable-authentication\",\n                        \"server.authentication\");\n  options->addOldOption(\"server.disable-authentication-unix-sockets\",\n                        \"server.authentication-unix-sockets\");\n  options->addOldOption(\"server.authenticate-system-only\",\n                        \"server.authentication-system-only\");\n  options->addOldOption(\"server.allow-method-override\",\n                        \"http.allow-method-override\");\n  options->addOldOption(\"server.hide-product-header\",\n                        \"http.hide-product-header\");\n  options->addOldOption(\"server.keep-alive-timeout\", \"http.keep-alive-timeout\");\n  options->addOldOption(\"server.default-api-compatibility\", \"\");\n  options->addOldOption(\"no-server\", \"server.rest-server\");\n\n  options->addOption(\"--server.authentication\",\n                     \"enable authentication for ALL client requests\",\n                     new BooleanParameter(&_active));\n\n  options->addOption(\n      \"--server.authentication-timeout\",\n      \"timeout for the authentication cache in seconds (0 = indefinitely)\",\n      new DoubleParameter(&_authenticationTimeout));\n\n  options->addOption(\"--server.local-authentication\",\n                     \"enable authentication using the local user database\",\n                     new BooleanParameter(&_localAuthentication));\n\n  options->addOption(\n      \"--server.authentication-system-only\",\n      \"use HTTP authentication only for requests to /_api and /_admin\",\n      new BooleanParameter(&_authenticationSystemOnly));\n\n#ifdef ARANGODB_HAVE_DOMAIN_SOCKETS\n  options->addOption(\"--server.authentication-unix-sockets\",\n                     \"authentication for requests via UNIX domain sockets\",\n                     new BooleanParameter(&_authenticationUnixSockets));\n#endif\n\n  // Maybe deprecate this option in devel\n  options\n      ->addOption(\"--server.jwt-secret\",\n                  \"secret to use when doing jwt authentication\",\n                  new StringParameter(&_jwtSecretProgramOption))\n      .setDeprecatedIn(30322)\n      .setDeprecatedIn(30402);\n\n  options->addOption(\n      \"--server.jwt-secret-keyfile\",\n      \"file containing jwt secret to use when doing jwt authentication.\",\n      new StringParameter(&_jwtSecretKeyfileProgramOption));\n\n  options->addOption(\n      \"--server.jwt-secret-folder\",\n      \"folder containing one or more jwt secret files to use for jwt \"\n      \"authentication. Files are sorted alphabetically: First secret \"\n      \"is used for signing + verifying JWT tokens. The latter secrets \"\n      \"are only used for verifying.\",\n      new StringParameter(&_jwtSecretFolderProgramOption),\n      arangodb::options::makeDefaultFlags(arangodb::options::Flags::Enterprise))\n      .setIntroducedIn(30700);\n}",
  "abstract_func_before": "void AuthenticationFeature::collectOptions(std::shared_ptr<ProgramOptions> VAR_0) {\n  VAR_0->addOldOption(\"server.disable-authentication\",\n                        \"server.authentication\");\n  VAR_0->addOldOption(\"server.disable-authentication-unix-sockets\",\n                        \"server.authentication-unix-sockets\");\n  VAR_0->addOldOption(\"server.authenticate-system-only\",\n                        \"server.authentication-system-only\");\n  VAR_0->addOldOption(\"server.allow-method-override\",\n                        \"http.allow-method-override\");\n  VAR_0->addOldOption(\"server.hide-product-header\",\n                        \"http.hide-product-header\");\n  VAR_0->addOldOption(\"server.keep-alive-timeout\", \"http.keep-alive-timeout\");\n  VAR_0->addOldOption(\"server.default-api-compatibility\", \"\");\n  VAR_0->addOldOption(\"no-server\", \"server.rest-server\");\n\n  VAR_0->addOption(\"--server.authentication\",\n                     \"enable authentication for ALL client requests\",\n                     new BooleanParameter(&VAR_1));\n\n  VAR_0->addOption(\n      \"--server.authentication-timeout\",\n      \"timeout for the authentication cache in seconds (0 = indefinitely)\",\n      new DoubleParameter(&VAR_2));\n\n  VAR_0->addOption(\"--server.local-authentication\",\n                     \"enable authentication using the local user database\",\n                     new BooleanParameter(&VAR_3));\n\n  VAR_0->addOption(\n      \"--server.authentication-system-only\",\n      \"use HTTP authentication only for requests to /_api and /_admin\",\n      new BooleanParameter(&VAR_4));\n\n#ifdef VAR_5\n  VAR_0->addOption(\"--server.authentication-unix-sockets\",\n                     \"authentication for requests via UNIX domain sockets\",\n                     new BooleanParameter(&VAR_6));\n#endif\n\n  /* COMMENT_0 */\n  VAR_0\n      ->addOption(\"--server.jwt-secret\",\n                  \"secret to use when doing jwt authentication\",\n                  new StringParameter(&VAR_7))\n      .setDeprecatedIn(30322)\n      .setDeprecatedIn(30402);\n\n  VAR_0->addOption(\n      \"--server.jwt-secret-keyfile\",\n      \"file containing jwt secret to use when doing jwt authentication.\",\n      new StringParameter(&VAR_8));\n\n  VAR_0->addOption(\n      \"--server.jwt-secret-folder\",\n      \"folder containing one or more jwt secret files to use for jwt \"\n      \"authentication. Files are sorted alphabetically: First secret \"\n      \"is used for signing + verifying JWT tokens. The latter secrets \"\n      \"are only used for verifying.\",\n      new StringParameter(&VAR_9),\n      arangodb::options::makeDefaultFlags(arangodb::options::Flags::Enterprise))\n      .setIntroducedIn(30700);\n}",
  "func_graph_path_before": "arangodb/e9c6ee9dcca7b9b4fbcd02a0b323d205bee838d3/AuthenticationFeature.cpp/vul/before/0.json",
  "func": "void AuthenticationFeature::collectOptions(std::shared_ptr<ProgramOptions> options) {\n  options->addOldOption(\"server.disable-authentication\",\n                        \"server.authentication\");\n  options->addOldOption(\"server.disable-authentication-unix-sockets\",\n                        \"server.authentication-unix-sockets\");\n  options->addOldOption(\"server.authenticate-system-only\",\n                        \"server.authentication-system-only\");\n  options->addOldOption(\"server.allow-method-override\",\n                        \"http.allow-method-override\");\n  options->addOldOption(\"server.hide-product-header\",\n                        \"http.hide-product-header\");\n  options->addOldOption(\"server.keep-alive-timeout\", \"http.keep-alive-timeout\");\n  options->addOldOption(\"server.default-api-compatibility\", \"\");\n  options->addOldOption(\"no-server\", \"server.rest-server\");\n\n  options->addOption(\"--server.authentication\",\n                     \"enable authentication for ALL client requests\",\n                     new BooleanParameter(&_active));\n\n  options->addOption(\n      \"--server.authentication-timeout\",\n      \"timeout for the authentication cache in seconds (0 = indefinitely)\",\n      new DoubleParameter(&_authenticationTimeout));\n  \n  options->addOption(\"--server.session-timeout\",\n                     \"timeout in seconds for web interface JWT sessions\",\n                     new DoubleParameter(&_sessionTimeout),\n                     arangodb::options::makeFlags(\n                       arangodb::options::Flags::DefaultNoComponents,\n                       arangodb::options::Flags::OnCoordinator,\n                       arangodb::options::Flags::OnSingle))\n                     .setIntroducedIn(30900);\n\n  options->addOption(\"--server.local-authentication\",\n                     \"enable authentication using the local user database\",\n                     new BooleanParameter(&_localAuthentication),\n                     arangodb::options::makeFlags(\n                       arangodb::options::Flags::DefaultNoComponents,\n                       arangodb::options::Flags::OnCoordinator,\n                       arangodb::options::Flags::OnSingle));\n\n  options->addOption(\n      \"--server.authentication-system-only\",\n      \"use HTTP authentication only for requests to /_api and /_admin\",\n      new BooleanParameter(&_authenticationSystemOnly));\n\n#ifdef ARANGODB_HAVE_DOMAIN_SOCKETS\n  options->addOption(\"--server.authentication-unix-sockets\",\n                     \"authentication for requests via UNIX domain sockets\",\n                     new BooleanParameter(&_authenticationUnixSockets),\n                     arangodb::options::makeFlags(\n                       arangodb::options::Flags::DefaultNoOs,\n                       arangodb::options::Flags::OsLinux,\n                       arangodb::options::Flags::OsMac));\n#endif\n\n  options\n      ->addOption(\"--server.jwt-secret\",\n                  \"secret to use when doing jwt authentication\",\n                  new StringParameter(&_jwtSecretProgramOption))\n      .setDeprecatedIn(30322)\n      .setDeprecatedIn(30402);\n\n  options->addOption(\n      \"--server.jwt-secret-keyfile\",\n      \"file containing jwt secret to use when doing jwt authentication.\",\n      new StringParameter(&_jwtSecretKeyfileProgramOption));\n\n  options->addOption(\n      \"--server.jwt-secret-folder\",\n      \"folder containing one or more jwt secret files to use for jwt \"\n      \"authentication. Files are sorted alphabetically: First secret \"\n      \"is used for signing + verifying JWT tokens. The latter secrets \"\n      \"are only used for verifying.\",\n      new StringParameter(&_jwtSecretFolderProgramOption),\n      arangodb::options::makeDefaultFlags(arangodb::options::Flags::Enterprise))\n      .setIntroducedIn(30700);\n}",
  "abstract_func": "void AuthenticationFeature::collectOptions(std::shared_ptr<ProgramOptions> VAR_0) {\n  VAR_0->addOldOption(\"server.disable-authentication\",\n                        \"server.authentication\");\n  VAR_0->addOldOption(\"server.disable-authentication-unix-sockets\",\n                        \"server.authentication-unix-sockets\");\n  VAR_0->addOldOption(\"server.authenticate-system-only\",\n                        \"server.authentication-system-only\");\n  VAR_0->addOldOption(\"server.allow-method-override\",\n                        \"http.allow-method-override\");\n  VAR_0->addOldOption(\"server.hide-product-header\",\n                        \"http.hide-product-header\");\n  VAR_0->addOldOption(\"server.keep-alive-timeout\", \"http.keep-alive-timeout\");\n  VAR_0->addOldOption(\"server.default-api-compatibility\", \"\");\n  VAR_0->addOldOption(\"no-server\", \"server.rest-server\");\n\n  VAR_0->addOption(\"--server.authentication\",\n                     \"enable authentication for ALL client requests\",\n                     new BooleanParameter(&VAR_1));\n\n  VAR_0->addOption(\n      \"--server.authentication-timeout\",\n      \"timeout for the authentication cache in seconds (0 = indefinitely)\",\n      new DoubleParameter(&VAR_2));\n  \n  VAR_0->addOption(\"--server.session-timeout\",\n                     \"timeout in seconds for web interface JWT sessions\",\n                     new DoubleParameter(&VAR_3),\n                     arangodb::options::makeFlags(\n                       arangodb::options::Flags::DefaultNoComponents,\n                       arangodb::options::Flags::OnCoordinator,\n                       arangodb::options::Flags::OnSingle))\n                     .setIntroducedIn(30900);\n\n  VAR_0->addOption(\"--server.local-authentication\",\n                     \"enable authentication using the local user database\",\n                     new BooleanParameter(&VAR_4),\n                     arangodb::options::makeFlags(\n                       arangodb::options::Flags::DefaultNoComponents,\n                       arangodb::options::Flags::OnCoordinator,\n                       arangodb::options::Flags::OnSingle));\n\n  VAR_0->addOption(\n      \"--server.authentication-system-only\",\n      \"use HTTP authentication only for requests to /_api and /_admin\",\n      new BooleanParameter(&VAR_5));\n\n#ifdef VAR_6\n  VAR_0->addOption(\"--server.authentication-unix-sockets\",\n                     \"authentication for requests via UNIX domain sockets\",\n                     new BooleanParameter(&VAR_7),\n                     arangodb::options::makeFlags(\n                       arangodb::options::Flags::DefaultNoOs,\n                       arangodb::options::Flags::OsLinux,\n                       arangodb::options::Flags::OsMac));\n#endif\n\n  VAR_0\n      ->addOption(\"--server.jwt-secret\",\n                  \"secret to use when doing jwt authentication\",\n                  new StringParameter(&VAR_8))\n      .setDeprecatedIn(30322)\n      .setDeprecatedIn(30402);\n\n  VAR_0->addOption(\n      \"--server.jwt-secret-keyfile\",\n      \"file containing jwt secret to use when doing jwt authentication.\",\n      new StringParameter(&VAR_9));\n\n  VAR_0->addOption(\n      \"--server.jwt-secret-folder\",\n      \"folder containing one or more jwt secret files to use for jwt \"\n      \"authentication. Files are sorted alphabetically: First secret \"\n      \"is used for signing + verifying JWT tokens. The latter secrets \"\n      \"are only used for verifying.\",\n      new StringParameter(&VAR_10),\n      arangodb::options::makeDefaultFlags(arangodb::options::Flags::Enterprise))\n      .setIntroducedIn(30700);\n}",
  "func_graph_path": "arangodb/e9c6ee9dcca7b9b4fbcd02a0b323d205bee838d3/AuthenticationFeature.cpp/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -21,10 +21,23 @@\n       \"--server.authentication-timeout\",\n       \"timeout for the authentication cache in seconds (0 = indefinitely)\",\n       new DoubleParameter(&_authenticationTimeout));\n+  \n+  options->addOption(\"--server.session-timeout\",\n+                     \"timeout in seconds for web interface JWT sessions\",\n+                     new DoubleParameter(&_sessionTimeout),\n+                     arangodb::options::makeFlags(\n+                       arangodb::options::Flags::DefaultNoComponents,\n+                       arangodb::options::Flags::OnCoordinator,\n+                       arangodb::options::Flags::OnSingle))\n+                     .setIntroducedIn(30900);\n \n   options->addOption(\"--server.local-authentication\",\n                      \"enable authentication using the local user database\",\n-                     new BooleanParameter(&_localAuthentication));\n+                     new BooleanParameter(&_localAuthentication),\n+                     arangodb::options::makeFlags(\n+                       arangodb::options::Flags::DefaultNoComponents,\n+                       arangodb::options::Flags::OnCoordinator,\n+                       arangodb::options::Flags::OnSingle));\n \n   options->addOption(\n       \"--server.authentication-system-only\",\n@@ -34,10 +47,13 @@\n #ifdef ARANGODB_HAVE_DOMAIN_SOCKETS\n   options->addOption(\"--server.authentication-unix-sockets\",\n                      \"authentication for requests via UNIX domain sockets\",\n-                     new BooleanParameter(&_authenticationUnixSockets));\n+                     new BooleanParameter(&_authenticationUnixSockets),\n+                     arangodb::options::makeFlags(\n+                       arangodb::options::Flags::DefaultNoOs,\n+                       arangodb::options::Flags::OsLinux,\n+                       arangodb::options::Flags::OsMac));\n #endif\n \n-  // Maybe deprecate this option in devel\n   options\n       ->addOption(\"--server.jwt-secret\",\n                   \"secret to use when doing jwt authentication\",",
  "diff_line_info": {
    "deleted_lines": [
      "                     new BooleanParameter(&_localAuthentication));",
      "                     new BooleanParameter(&_authenticationUnixSockets));",
      "  // Maybe deprecate this option in devel"
    ],
    "added_lines": [
      "  ",
      "  options->addOption(\"--server.session-timeout\",",
      "                     \"timeout in seconds for web interface JWT sessions\",",
      "                     new DoubleParameter(&_sessionTimeout),",
      "                     arangodb::options::makeFlags(",
      "                       arangodb::options::Flags::DefaultNoComponents,",
      "                       arangodb::options::Flags::OnCoordinator,",
      "                       arangodb::options::Flags::OnSingle))",
      "                     .setIntroducedIn(30900);",
      "                     new BooleanParameter(&_localAuthentication),",
      "                     arangodb::options::makeFlags(",
      "                       arangodb::options::Flags::DefaultNoComponents,",
      "                       arangodb::options::Flags::OnCoordinator,",
      "                       arangodb::options::Flags::OnSingle));",
      "                     new BooleanParameter(&_authenticationUnixSockets),",
      "                     arangodb::options::makeFlags(",
      "                       arangodb::options::Flags::DefaultNoOs,",
      "                       arangodb::options::Flags::OsLinux,",
      "                       arangodb::options::Flags::OsMac));"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/arangodb/arangodb/pull/14118",
  "description": {
    "pr_info": {
      "title": "Revive startup parameter `--server.session-timeout`",
      "number": 14118
    },
    "comment": [
      "### Scope & Purpose\r\n\r\nIn order to address APM-79: https://arangodb.atlassian.net/browse/APM-79\r\nDocs PR: https://github.com/arangodb/docs/pull/720\r\n\r\nRevive startup parameter `--server.session-timeout` to control the timeout for web interface sessions and other sessions that are based on JWTs created by the `/_open/auth` API.\r\nThe default timeout value is 30 days, which is identical to the currently hard-coded timeout used.\r\n\r\nQuestions: shall we introduce this with a lower timeout value? Or at least adjust the timeout in devel?\r\n\r\n- [x] :hankey: Bugfix (requires CHANGELOG entry)\r\n- [x] :pizza: New feature (requires CHANGELOG entry, feature documentation and release notes)\r\n- [ ] :fire: Performance improvement\r\n- [ ] :hammer: Refactoring/simplification\r\n- [x] :book: CHANGELOG entry made\r\n\r\n#### Backports:\r\n\r\n- [x] Backports required for: *3.8*, *3.7*\r\n\r\n#### Related Information\r\n\r\n- [x] Docs PR: https://github.com/arangodb/docs/pull/720\r\n- [x] GitHub issue / Jira ticket number: https://arangodb.atlassian.net/browse/APM-79\r\n\r\n### Testing & Verification\r\n\r\n- [x] This change is a trivial rework / code cleanup without any test coverage.\r\n- [x] The behavior in this PR was *manually tested*\r\n"
    ]
  },
  "Bug Filter": "Supporting & Non-Core Improvements",
  "Bug Filter Confidence": 0.85,
  "Bug Filter Response": "\n\n**Final Output:**\n\nAnalysis: The patch introduces a new configuration option `--server.session-timeout` to control JWT session timeouts in the web interface. The commit message focuses on reviving a parameter without indicating a security fix. The code changes involve adding and modifying configuration flags, which are supporting features rather than addressing a security vulnerability.\n\nFinal Classification: Supporting & Non-Core Improvements\n\nConfidence Score: 0.85"
}