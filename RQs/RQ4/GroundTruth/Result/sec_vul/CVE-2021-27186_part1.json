{
  "cve_id": "CVE-2021-27186",
  "cwe_ids": [
    "CWE-476"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "fluent/fluent-bit",
  "commit_msg": "http_server: v1: metrics: fix potential SIGSEGV by memory allocation errors\n\nThis is a follow up on PR 3045. While 3045 fixed the potential SIGSERV\nissue caused by memory allocation error in flb_avro, after searching/reviewing\nit looks like  src/http_server/api/v1/metrics.c also consists of several\nsimilar issues.\n\nThis PR adds proper check to prevent the potential SIGSERV issues.\n\nSigned-off-by: Yong Tang <yong.tang.github@outlook.com>",
  "commit_hash": "4deb051cb0277d32ab402da4f941f6e502518388",
  "git_url": "https://github.com/fluent/fluent-bit/commit/4deb051cb0277d32ab402da4f941f6e502518388",
  "file_path": "src/http_server/api/v1/metrics.c",
  "func_name": "cb_mq_metrics",
  "func_before": "static void cb_mq_metrics(mk_mq_t *queue, void *data, size_t size)\n{\n    flb_sds_t out_data;\n    struct flb_hs_buf *buf;\n    struct mk_list *metrics_list = NULL;\n\n    metrics_list = pthread_getspecific(hs_metrics_key);\n    if (!metrics_list) {\n        metrics_list = flb_malloc(sizeof(struct mk_list));\n        if (!metrics_list) {\n            flb_errno();\n            return;\n        }\n        mk_list_init(metrics_list);\n        pthread_setspecific(hs_metrics_key, metrics_list);\n    }\n\n    /* Convert msgpack to JSON */\n    out_data = flb_msgpack_raw_to_json_sds(data, size);\n    if (!out_data) {\n        return;\n    }\n\n    buf = flb_malloc(sizeof(struct flb_hs_buf));\n    if (!buf) {\n        flb_errno();\n        flb_sds_destroy(out_data);\n        return;\n    }\n    buf->users = 0;\n    buf->data = out_data;\n\n    buf->raw_data = flb_malloc(size);\n    memcpy(buf->raw_data, data, size);\n    buf->raw_size = size;\n\n    mk_list_add(&buf->_head, metrics_list);\n\n    cleanup_metrics();\n}",
  "abstract_func_before": "static void cb_mq_metrics(mk_mq_t *VAR_0, void *VAR_1, size_t VAR_2)\n{\n    flb_sds_t VAR_3;\n    struct flb_hs_buf *VAR_4;\n    struct mk_list *VAR_5 = NULL;\n\n    VAR_5 = pthread_getspecific(VAR_6);\n    if (!VAR_5) {\n        VAR_5 = flb_malloc(sizeof(struct mk_list));\n        if (!VAR_5) {\n            flb_errno();\n            return;\n        }\n        mk_list_init(VAR_5);\n        pthread_setspecific(VAR_6, VAR_5);\n    }\n\n    /* COMMENT_0 */\n    VAR_3 = flb_msgpack_raw_to_json_sds(VAR_1, VAR_2);\n    if (!VAR_3) {\n        return;\n    }\n\n    VAR_4 = flb_malloc(sizeof(struct flb_hs_buf));\n    if (!VAR_4) {\n        flb_errno();\n        flb_sds_destroy(VAR_3);\n        return;\n    }\n    VAR_4->users = 0;\n    VAR_4->data = VAR_3;\n\n    VAR_4->raw_data = flb_malloc(VAR_2);\n    memcpy(VAR_4->raw_data, VAR_1, VAR_2);\n    VAR_4->raw_size = VAR_2;\n\n    mk_list_add(&VAR_4->_head, VAR_5);\n\n    cleanup_metrics();\n}",
  "func_graph_path_before": "fluent/fluent-bit/4deb051cb0277d32ab402da4f941f6e502518388/metrics.c/vul/before/0.json",
  "func": "static void cb_mq_metrics(mk_mq_t *queue, void *data, size_t size)\n{\n    flb_sds_t out_data;\n    struct flb_hs_buf *buf;\n    struct mk_list *metrics_list = NULL;\n\n    metrics_list = pthread_getspecific(hs_metrics_key);\n    if (!metrics_list) {\n        metrics_list = flb_malloc(sizeof(struct mk_list));\n        if (!metrics_list) {\n            flb_errno();\n            return;\n        }\n        mk_list_init(metrics_list);\n        pthread_setspecific(hs_metrics_key, metrics_list);\n    }\n\n    /* Convert msgpack to JSON */\n    out_data = flb_msgpack_raw_to_json_sds(data, size);\n    if (!out_data) {\n        return;\n    }\n\n    buf = flb_malloc(sizeof(struct flb_hs_buf));\n    if (!buf) {\n        flb_errno();\n        flb_sds_destroy(out_data);\n        return;\n    }\n    buf->users = 0;\n    buf->data = out_data;\n\n    buf->raw_data = flb_malloc(size);\n    if (!buf->raw_data) {\n        flb_errno();\n        flb_sds_destroy(out_data);\n        flb_free(buf);\n        return;\n    }\n    memcpy(buf->raw_data, data, size);\n    buf->raw_size = size;\n\n    mk_list_add(&buf->_head, metrics_list);\n\n    cleanup_metrics();\n}",
  "abstract_func": "static void cb_mq_metrics(mk_mq_t *VAR_0, void *VAR_1, size_t VAR_2)\n{\n    flb_sds_t VAR_3;\n    struct flb_hs_buf *VAR_4;\n    struct mk_list *VAR_5 = NULL;\n\n    VAR_5 = pthread_getspecific(VAR_6);\n    if (!VAR_5) {\n        VAR_5 = flb_malloc(sizeof(struct mk_list));\n        if (!VAR_5) {\n            flb_errno();\n            return;\n        }\n        mk_list_init(VAR_5);\n        pthread_setspecific(VAR_6, VAR_5);\n    }\n\n    /* COMMENT_0 */\n    VAR_3 = flb_msgpack_raw_to_json_sds(VAR_1, VAR_2);\n    if (!VAR_3) {\n        return;\n    }\n\n    VAR_4 = flb_malloc(sizeof(struct flb_hs_buf));\n    if (!VAR_4) {\n        flb_errno();\n        flb_sds_destroy(VAR_3);\n        return;\n    }\n    VAR_4->users = 0;\n    VAR_4->data = VAR_3;\n\n    VAR_4->raw_data = flb_malloc(VAR_2);\n    if (!VAR_4->raw_data) {\n        flb_errno();\n        flb_sds_destroy(VAR_3);\n        flb_free(VAR_4);\n        return;\n    }\n    memcpy(VAR_4->raw_data, VAR_1, VAR_2);\n    VAR_4->raw_size = VAR_2;\n\n    mk_list_add(&VAR_4->_head, VAR_5);\n\n    cleanup_metrics();\n}",
  "func_graph_path": "fluent/fluent-bit/4deb051cb0277d32ab402da4f941f6e502518388/metrics.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -31,6 +31,12 @@\n     buf->data = out_data;\n \n     buf->raw_data = flb_malloc(size);\n+    if (!buf->raw_data) {\n+        flb_errno();\n+        flb_sds_destroy(out_data);\n+        flb_free(buf);\n+        return;\n+    }\n     memcpy(buf->raw_data, data, size);\n     buf->raw_size = size;\n ",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "    if (!buf->raw_data) {",
      "        flb_errno();",
      "        flb_sds_destroy(out_data);",
      "        flb_free(buf);",
      "        return;",
      "    }"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/fluent/fluent-bit/pull/3047",
  "description": {
    "pr_info": {
      "title": "http_server: v1: metrics: fix potential SIGSEGV by memory allocation errors",
      "number": 3047
    },
    "comment": [
      "This is a follow up on PR #3045. While #3045 fixed the potential SIGSERV\r\nissue caused by memory allocation error in flb_avro, after searching/reviewing\r\nit looks like  src/http_server/api/v1/metrics.c also consists of several\r\nsimilar issues.\r\n\r\nThis PR adds proper check to prevent the potential SIGSERV issues.\r\n\r\nSigned-off-by: Yong Tang <yong.tang.github@outlook.com>\r\n\r\n<!-- Provide summary of changes -->\r\n\r\n<!-- Issue number, if available. E.g. \"Fixes #31\", \"Addresses #42, #77\" -->\r\n\r\n----\r\nEnter `[N/A]` in the box, if an item is not applicable to your change.\r\n\r\n**Testing**\r\nBefore we can approve your change; please submit the following in a comment:\r\n- [n/a] Example configuration file for the change\r\n- [n/a] Debug log output from testing the change\r\n<!-- Invoke Fluent Bit and Valgrind as: $ valgrind ./bin/fluent-bit <args> -->\r\n- [n/a] Attached [Valgrind](https://valgrind.org/docs/manual/quick-start.html) output that shows no leaks or memory corruption was found\r\n\r\n**Documentation**\r\n<!-- Docs can be edited at https://github.com/fluent/fluent-bit-docs -->\r\n- [n/a] Documentation required for this feature\r\n\r\n<!--  Doc PR (not required but highly recommended) -->\r\n\r\n----\r\n\r\nFluent Bit is licensed under Apache 2.0, by submitting this pull request I understand that this code will be released under the terms of that license.\r\n"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix  \nConfidence Score: 0.95",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "\n\nThe patch addresses a potential segmentation fault due to memory allocation errors, preventing a crash and thus mitigating a Denial of Service condition. This is classified as a security fix.\n\n**Final Output:**\nAnalysis: The patch adds a null check after memory allocation to prevent a segmentation fault, addressing a potential security issue that could cause a DoS.\n\nFinal Classification: Security Vulnerability Fix  \nConfidence Score: 0.95"
}