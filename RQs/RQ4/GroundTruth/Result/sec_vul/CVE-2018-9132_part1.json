{
  "cve_id": "CVE-2018-9132",
  "cwe_ids": [
    "CWE-476"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "libming",
  "commit_msg": "decompile: Fix null pointer dereference in getInt\n\nWhen getInt is passed a PUSH_REGISTER parameter, it retrieves the\ncontent of this register and returns the value contained by this\nregister as an int. When this register is empty, we call getInt with\na NULL pointer and a null pointer dereference occurs.\n\nIn this patch we first make sure that regs[act->p.RegisterNumber] is\nnot NULL before doing anything with it.\n\nFixes #133 (CVE-2018-9132).",
  "commit_hash": "dc65ba0497f4c5ca58be2018e2816e72baf63634",
  "git_url": "https://github.com/libming/libming/commit/dc65ba0497f4c5ca58be2018e2816e72baf63634",
  "file_path": "util/decompile.c",
  "func_name": "getInt",
  "func_before": "static int\ngetInt(struct SWF_ACTIONPUSHPARAM *act)\n{\n\tswitch( act->Type ) \n\t{\n\tcase PUSH_FLOAT: /* FLOAT -- also used for PROPERTY storing */\n\t\treturn ((int)act->p.Float);\n\tcase PUSH_NULL: /* NULL */\n\t\treturn 0;\n\tcase PUSH_REGISTER: /* REGISTER */\n\t\treturn getInt(regs[act->p.RegisterNumber]);\n\tcase PUSH_DOUBLE: /* DOUBLE */\n\t\treturn (int)act->p.Double;\n\tcase PUSH_INT: /* INTEGER */\n\t\treturn act->p.Integer;\n\tdefault: \n\t\tfprintf (stderr,\"  Can't get int for type: %d\\n\", act->Type);\n\t}\n\treturn 0;\n}",
  "abstract_func_before": "static int\ngetInt(struct SWF_ACTIONPUSHPARAM *VAR_0)\n{\n\tswitch( VAR_0->Type ) \n\t{\n\tcase VAR_1: /* COMMENT_0 */\n\t\treturn ((int)VAR_0->p.Float);\n\tcase VAR_2: /* COMMENT_1 */\n\t\treturn 0;\n\tcase VAR_3: /* COMMENT_2 */\n\t\treturn getInt(VAR_4[VAR_0->p.RegisterNumber]);\n\tcase VAR_5: /* COMMENT_3 */\n\t\treturn (int)VAR_0->p.Double;\n\tcase VAR_6: /* COMMENT_4 */\n\t\treturn VAR_0->p.Integer;\n\tdefault: \n\t\tfprintf (VAR_7,\"  Can't get int for type: %d\\n\", VAR_0->Type);\n\t}\n\treturn 0;\n}",
  "func_graph_path_before": "libming/dc65ba0497f4c5ca58be2018e2816e72baf63634/decompile.c/vul/before/0.json",
  "func": "static int\ngetInt(struct SWF_ACTIONPUSHPARAM *act)\n{\n\tswitch( act->Type ) \n\t{\n\tcase PUSH_FLOAT: /* FLOAT -- also used for PROPERTY storing */\n\t\treturn ((int)act->p.Float);\n\tcase PUSH_NULL: /* NULL */\n\t\treturn 0;\n\tcase PUSH_REGISTER: /* REGISTER */\n\t\tif (regs[act->p.RegisterNumber])\n\t\t{\n\t\t\treturn getInt(regs[act->p.RegisterNumber]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tSWF_warn(\"WARNING: retrieving undefined register values.\\n\");\n\t\t\tbreak;\n\t\t}\n\tcase PUSH_DOUBLE: /* DOUBLE */\n\t\treturn (int)act->p.Double;\n\tcase PUSH_INT: /* INTEGER */\n\t\treturn act->p.Integer;\n\tdefault: \n\t\tfprintf (stderr,\"  Can't get int for type: %d\\n\", act->Type);\n\t}\n\treturn 0;\n}",
  "abstract_func": "static int\ngetInt(struct SWF_ACTIONPUSHPARAM *VAR_0)\n{\n\tswitch( VAR_0->Type ) \n\t{\n\tcase VAR_1: /* COMMENT_0 */\n\t\treturn ((int)VAR_0->p.Float);\n\tcase VAR_2: /* COMMENT_1 */\n\t\treturn 0;\n\tcase VAR_3: /* COMMENT_2 */\n\t\tif (VAR_4[VAR_0->p.RegisterNumber])\n\t\t{\n\t\t\treturn getInt(VAR_4[VAR_0->p.RegisterNumber]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tSWF_warn(\"WARNING: retrieving undefined register values.\\n\");\n\t\t\tbreak;\n\t\t}\n\tcase VAR_5: /* COMMENT_3 */\n\t\treturn (int)VAR_0->p.Double;\n\tcase VAR_6: /* COMMENT_4 */\n\t\treturn VAR_0->p.Integer;\n\tdefault: \n\t\tfprintf (VAR_7,\"  Can't get int for type: %d\\n\", VAR_0->Type);\n\t}\n\treturn 0;\n}",
  "func_graph_path": "libming/dc65ba0497f4c5ca58be2018e2816e72baf63634/decompile.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -8,7 +8,15 @@\n \tcase PUSH_NULL: /* NULL */\n \t\treturn 0;\n \tcase PUSH_REGISTER: /* REGISTER */\n-\t\treturn getInt(regs[act->p.RegisterNumber]);\n+\t\tif (regs[act->p.RegisterNumber])\n+\t\t{\n+\t\t\treturn getInt(regs[act->p.RegisterNumber]);\n+\t\t}\n+\t\telse\n+\t\t{\n+\t\t\tSWF_warn(\"WARNING: retrieving undefined register values.\\n\");\n+\t\t\tbreak;\n+\t\t}\n \tcase PUSH_DOUBLE: /* DOUBLE */\n \t\treturn (int)act->p.Double;\n \tcase PUSH_INT: /* INTEGER */",
  "diff_line_info": {
    "deleted_lines": [
      "\t\treturn getInt(regs[act->p.RegisterNumber]);"
    ],
    "added_lines": [
      "\t\tif (regs[act->p.RegisterNumber])",
      "\t\t{",
      "\t\t\treturn getInt(regs[act->p.RegisterNumber]);",
      "\t\t}",
      "\t\telse",
      "\t\t{",
      "\t\t\tSWF_warn(\"WARNING: retrieving undefined register values.\\n\");",
      "\t\t\tbreak;",
      "\t\t}"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/libming/libming/pull/145",
  "description": {
    "pr_info": {
      "title": "decompile: fix various security issues",
      "number": 145
    },
    "comment": [
      "Hi,\r\n\r\nThis PR addresses the following security issues:\r\n- `CVE-2018-9132`, issue #133\r\n- `CVE-2018-9009`, issue #131\r\n- `CVE-2018-7876`, issue #109\r\n- `CVE-2018-7873`, issue #111\r\n- `CVE-2018-7866`, issue #118\r\n\r\nAs always, I'll be happy to provide additional information !\r\n\r\nThanks !",
      "(By the way, thanks for adding me to the group, but even if I have the permissions to merge now I still consider it essential to get an external review before getting any line of code into the master)",
      "Just noticed some NEWS entries are missing. Will be fixed soon.",
      "Do you want to include an entry for merged PR #138 since you're at it ?",
      "Thanks for the great work guys!\r\n\r\nwell.. i have some doubts, with the death of the flash, this library still be useful?\r\n\r\nin other words, AS3 is supported?",
      "@hlef how about fixing those NEWS entries so we merge this ?\r\n@Guardian820 Ming does not support AS3"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix  \nConfidence Score: 0.95",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "\n\nAnalysis: The patch addresses a null pointer dereference in the getInt function, which could be exploited to cause a crash. This is a security vulnerability fix as it prevents unauthorized access or system compromise.\n\nFinal Classification: Security Vulnerability Fix  \nConfidence Score: 0.95"
}