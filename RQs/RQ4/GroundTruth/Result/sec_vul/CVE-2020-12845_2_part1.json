{
  "cve_id": "CVE-2020-12845",
  "cwe_ids": [
    "CWE-476"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "cherokee/webserver",
  "commit_msg": "Don't process empty input for cherokee_validator_parse_basic and cherokee_validator_parse_digest",
  "commit_hash": "1542244907b4c0a595444640341b2daea91d5767",
  "git_url": "https://github.com/cherokee/webserver/commit/1542244907b4c0a595444640341b2daea91d5767",
  "file_path": "cherokee/validator.c",
  "func_name": "cherokee_validator_parse_digest",
  "func_before": "ret_t\ncherokee_validator_parse_digest (cherokee_validator_t *validator,\n                                 char *str, cuint_t str_len)\n{\n\tcuint_t             len;\n\tchar               *end;\n\tchar               *entry;\n\tchar               *comma;\n\tchar               *equal;\n\tcherokee_buffer_t   auth = CHEROKEE_BUF_INIT;\n\tcherokee_buffer_t  *entry_buf;\n\n\t/* Copy authentication string\n\t */\n\tcherokee_buffer_add (&auth, str, str_len);\n\n\tentry = auth.buf;\n\tend   = auth.buf + auth.len;\n\n\tdo {\n\t\t/* Skip some chars\n\t\t */\n\t\twhile ((*entry == CHR_SP) ||\n\t\t       (*entry == CHR_CR) ||\n\t\t       (*entry == CHR_LF)) entry++;\n\n\t\t/* Check for the end\n\t\t */\n\t\tif (entry >= end)\n\t\t\tbreak;\n\n\t\tcomma = strchr(entry, ',');\n\n\t\tif (equal_str (entry, \"nc\")) {\n\t\t\tentry_buf = &validator->nc;\n\t\t} else if (equal_str (entry, \"uri\")) {\n\t\t\tentry_buf = &validator->uri;\n\t\t} else if (equal_str (entry, \"qop\")) {\n\t\t\tentry_buf = &validator->qop;\n\t\t} else if (equal_str (entry, \"realm\")) {\n\t\t\tentry_buf = &validator->realm;\n\t\t} else if (equal_str (entry, \"nonce\")) {\n\t\t\tentry_buf = &validator->nonce;\n\t\t} else if (equal_str (entry, \"cnonce\")) {\n\t\t\tentry_buf = &validator->cnonce;\n\t\t} else if (equal_str (entry, \"username\")) {\n\t\t\tentry_buf = &validator->user;\n\t\t} else if (equal_str (entry, \"response\")) {\n\t\t\tentry_buf = &validator->response;\n\t\t} else if (equal_str (entry, \"algorithm\")) {\n\t\t\tentry_buf = &validator->algorithm;\n\t\t} else {\n\t\t\tentry = comma + 1;\n\t\t\tcontinue;\n\t\t}\n\n\t\t/* Split the string [1]\n\t\t */\n\t\tif (comma) *comma = '\\0';\n\n\t\tequal = strchr (entry, '=');\n\t\tif (equal == NULL) {\n\t\t\tif (comma) *comma = ',';  /* [1] */\n\t\t\tcontinue;\n\t\t}\n\n\t\t/* Check for \"s and skip it\n\t\t */\n\t\tequal += (equal[1] == '\"') ? 2 : 1;\n\t\tlen = strlen(equal);\n\t\twhile ((len > 0) &&\n\t\t       ((equal[len-1] == '\"')  ||\n\t\t       (equal[len-1] == CHR_CR) ||\n\t\t       (equal[len-1] == CHR_LF))) {\n\n\t\t\tlen--;\n\t\t}\n\n\t\t/* Copy the entry value\n\t\t */\n\t\tcherokee_buffer_add (entry_buf, equal, len);\n\n\t\t/* Resore [1], and prepare next loop\n\t\t */\n\t\tif (comma)\n\t\t\t*comma = ',';\n\t\tentry = comma + 1;\n\n\t} while (comma != NULL);\n\n#if 0\n\tprintf (\"nc           %s\\n\", validator->nc.buf);\n\tprintf (\"uri          %s\\n\", validator->uri.buf);\n\tprintf (\"qop          %s\\n\", validator->qop.buf);\n\tprintf (\"realm        %s\\n\", validator->realm.buf);\n\tprintf (\"nonce        %s\\n\", validator->nonce.buf);\n\tprintf (\"cnonce       %s\\n\", validator->cnonce.buf);\n\tprintf (\"username     %s\\n\", validator->user.buf);\n\tprintf (\"reponse      %s\\n\", validator->response.buf);\n\tprintf (\"algorithm    %s\\n\", validator->algorithm.buf);\n#endif\n\n\t/* Clean up and exit\n\t */\n\tcherokee_buffer_mrproper (&auth);\n\treturn ret_ok;\n}",
  "abstract_func_before": "ret_t\ncherokee_validator_parse_digest (cherokee_validator_t *VAR_0,\n                                 char *VAR_1, cuint_t VAR_2)\n{\n\tcuint_t             VAR_3;\n\tchar               *VAR_4;\n\tchar               *VAR_5;\n\tchar               *VAR_6;\n\tchar               *VAR_7;\n\tcherokee_buffer_t   VAR_8 = VAR_9;\n\tcherokee_buffer_t  *VAR_10;\n\n\t/* COMMENT_0 */\n    \n\tcherokee_buffer_add (&VAR_8, VAR_1, VAR_2);\n\n\tVAR_5 = VAR_8.buf;\n\tVAR_4   = VAR_8.buf + VAR_8.len;\n\n\tdo {\n\t\t/* COMMENT_2 */\n     \n\t\twhile ((*VAR_5 == VAR_11) ||\n\t\t       (*VAR_5 == VAR_12) ||\n\t\t       (*VAR_5 == VAR_13)) VAR_5++;\n\n\t\t/* COMMENT_4 */\n     \n\t\tif (VAR_5 >= VAR_4)\n\t\t\tbreak;\n\n\t\tVAR_6 = strchr(VAR_5, ',');\n\n\t\tif (equal_str (VAR_5, \"nc\")) {\n\t\t\tVAR_10 = &VAR_0->nc;\n\t\t} else if (equal_str (VAR_5, \"uri\")) {\n\t\t\tVAR_10 = &VAR_0->uri;\n\t\t} else if (equal_str (VAR_5, \"qop\")) {\n\t\t\tVAR_10 = &VAR_0->qop;\n\t\t} else if (equal_str (VAR_5, \"realm\")) {\n\t\t\tVAR_10 = &VAR_0->realm;\n\t\t} else if (equal_str (VAR_5, \"nonce\")) {\n\t\t\tVAR_10 = &VAR_0->nonce;\n\t\t} else if (equal_str (VAR_5, \"cnonce\")) {\n\t\t\tVAR_10 = &VAR_0->cnonce;\n\t\t} else if (equal_str (VAR_5, \"username\")) {\n\t\t\tVAR_10 = &VAR_0->user;\n\t\t} else if (equal_str (VAR_5, \"response\")) {\n\t\t\tVAR_10 = &VAR_0->response;\n\t\t} else if (equal_str (VAR_5, \"algorithm\")) {\n\t\t\tVAR_10 = &VAR_0->algorithm;\n\t\t} else {\n\t\t\tVAR_5 = VAR_6 + 1;\n\t\t\tcontinue;\n\t\t}\n\n\t\t/* COMMENT_6 */\n     \n\t\tif (VAR_6) *VAR_6 = '\\0';\n\n\t\tVAR_7 = strchr (VAR_5, '=');\n\t\tif (VAR_7 == NULL) {\n\t\t\tif (VAR_6) *VAR_6 = ',';  /* COMMENT_8 */\n\t\t\tcontinue;\n\t\t}\n\n\t\t/* COMMENT_9 */\n     \n\t\tVAR_7 += (VAR_7[1] == '\"') ? 2 : 1;\n\t\tVAR_3 = strlen(VAR_7);\n\t\twhile ((VAR_3 > 0) &&\n\t\t       ((VAR_7[VAR_3-1] == '\"')  ||\n\t\t       (VAR_7[VAR_3-1] == VAR_12) ||\n\t\t       (VAR_7[VAR_3-1] == VAR_13))) {\n\n\t\t\tVAR_3--;\n\t\t}\n\n\t\t/* COMMENT_11 */\n     \n\t\tcherokee_buffer_add (VAR_10, VAR_7, VAR_3);\n\n\t\t/* COMMENT_13 */\n     \n\t\tif (VAR_6)\n\t\t\t*VAR_6 = ',';\n\t\tVAR_5 = VAR_6 + 1;\n\n\t} while (VAR_6 != NULL);\n\n#if 0\n\tprintf (\"nc           %s\\n\", VAR_0->nc.buf);\n\tprintf (\"uri          %s\\n\", VAR_0->uri.buf);\n\tprintf (\"qop          %s\\n\", VAR_0->qop.buf);\n\tprintf (\"realm        %s\\n\", VAR_0->realm.buf);\n\tprintf (\"nonce        %s\\n\", VAR_0->nonce.buf);\n\tprintf (\"cnonce       %s\\n\", VAR_0->cnonce.buf);\n\tprintf (\"username     %s\\n\", VAR_0->user.buf);\n\tprintf (\"reponse      %s\\n\", VAR_0->response.buf);\n\tprintf (\"algorithm    %s\\n\", VAR_0->algorithm.buf);\n#endif\n\n\t/* COMMENT_15 */\n    \n\tcherokee_buffer_mrproper (&VAR_8);\n\treturn VAR_14;\n}",
  "func_graph_path_before": "cherokee/webserver/1542244907b4c0a595444640341b2daea91d5767/validator.c/vul/before/1.json",
  "func": "ret_t\ncherokee_validator_parse_digest (cherokee_validator_t *validator,\n                                 char *str, cuint_t str_len)\n{\n\tcuint_t             len;\n\tchar               *end;\n\tchar               *entry;\n\tchar               *comma;\n\tchar               *equal;\n\tcherokee_buffer_t   auth = CHEROKEE_BUF_INIT;\n\tcherokee_buffer_t  *entry_buf;\n\n\t/* Guard empty input\n\t */\n\tif (unlikely(str == NULL || str_len == 0))\n\t\tgoto error;\n\n\t/* Copy authentication string\n\t */\n\tcherokee_buffer_add (&auth, str, str_len);\n\n\tentry = auth.buf;\n\tend   = auth.buf + auth.len;\n\n\tdo {\n\t\t/* Skip some chars\n\t\t */\n\t\twhile ((*entry == CHR_SP) ||\n\t\t       (*entry == CHR_CR) ||\n\t\t       (*entry == CHR_LF)) entry++;\n\n\t\t/* Check for the end\n\t\t */\n\t\tif (entry >= end)\n\t\t\tbreak;\n\n\t\tcomma = strchr(entry, ',');\n\n\t\tif (equal_str (entry, \"nc\")) {\n\t\t\tentry_buf = &validator->nc;\n\t\t} else if (equal_str (entry, \"uri\")) {\n\t\t\tentry_buf = &validator->uri;\n\t\t} else if (equal_str (entry, \"qop\")) {\n\t\t\tentry_buf = &validator->qop;\n\t\t} else if (equal_str (entry, \"realm\")) {\n\t\t\tentry_buf = &validator->realm;\n\t\t} else if (equal_str (entry, \"nonce\")) {\n\t\t\tentry_buf = &validator->nonce;\n\t\t} else if (equal_str (entry, \"cnonce\")) {\n\t\t\tentry_buf = &validator->cnonce;\n\t\t} else if (equal_str (entry, \"username\")) {\n\t\t\tentry_buf = &validator->user;\n\t\t} else if (equal_str (entry, \"response\")) {\n\t\t\tentry_buf = &validator->response;\n\t\t} else if (equal_str (entry, \"algorithm\")) {\n\t\t\tentry_buf = &validator->algorithm;\n\t\t} else {\n\t\t\tentry = comma + 1;\n\t\t\tcontinue;\n\t\t}\n\n\t\t/* Split the string [1]\n\t\t */\n\t\tif (comma) *comma = '\\0';\n\n\t\tequal = strchr (entry, '=');\n\t\tif (equal == NULL) {\n\t\t\tif (comma) *comma = ',';  /* [1] */\n\t\t\tcontinue;\n\t\t}\n\n\t\t/* Check for \"s and skip it\n\t\t */\n\t\tequal += (equal[1] == '\"') ? 2 : 1;\n\t\tlen = strlen(equal);\n\t\twhile ((len > 0) &&\n\t\t       ((equal[len-1] == '\"')  ||\n\t\t       (equal[len-1] == CHR_CR) ||\n\t\t       (equal[len-1] == CHR_LF))) {\n\n\t\t\tlen--;\n\t\t}\n\n\t\t/* Copy the entry value\n\t\t */\n\t\tcherokee_buffer_add (entry_buf, equal, len);\n\n\t\t/* Resore [1], and prepare next loop\n\t\t */\n\t\tif (comma)\n\t\t\t*comma = ',';\n\t\tentry = comma + 1;\n\n\t} while (comma != NULL);\n\n#if 0\n\tprintf (\"nc           %s\\n\", validator->nc.buf);\n\tprintf (\"uri          %s\\n\", validator->uri.buf);\n\tprintf (\"qop          %s\\n\", validator->qop.buf);\n\tprintf (\"realm        %s\\n\", validator->realm.buf);\n\tprintf (\"nonce        %s\\n\", validator->nonce.buf);\n\tprintf (\"cnonce       %s\\n\", validator->cnonce.buf);\n\tprintf (\"username     %s\\n\", validator->user.buf);\n\tprintf (\"reponse      %s\\n\", validator->response.buf);\n\tprintf (\"algorithm    %s\\n\", validator->algorithm.buf);\n#endif\n\n\t/* Clean up and exit\n\t */\n\tcherokee_buffer_mrproper (&auth);\n\treturn ret_ok;\n\nerror:\n\tcherokee_buffer_mrproper (&auth);\n\treturn ret_error;\n}",
  "abstract_func": "ret_t\ncherokee_validator_parse_digest (cherokee_validator_t *VAR_0,\n                                 char *VAR_1, cuint_t VAR_2)\n{\n\tcuint_t             VAR_3;\n\tchar               *VAR_4;\n\tchar               *VAR_5;\n\tchar               *VAR_6;\n\tchar               *VAR_7;\n\tcherokee_buffer_t   VAR_8 = VAR_9;\n\tcherokee_buffer_t  *VAR_10;\n\n\t/* COMMENT_0 */\n    \n\tif (unlikely(VAR_1 == NULL || VAR_2 == 0))\n\t\tgoto error;\n\n\t/* COMMENT_2 */\n    \n\tcherokee_buffer_add (&VAR_8, VAR_1, VAR_2);\n\n\tVAR_5 = VAR_8.buf;\n\tVAR_4   = VAR_8.buf + VAR_8.len;\n\n\tdo {\n\t\t/* COMMENT_4 */\n     \n\t\twhile ((*VAR_5 == VAR_11) ||\n\t\t       (*VAR_5 == VAR_12) ||\n\t\t       (*VAR_5 == VAR_13)) VAR_5++;\n\n\t\t/* COMMENT_6 */\n     \n\t\tif (VAR_5 >= VAR_4)\n\t\t\tbreak;\n\n\t\tVAR_6 = strchr(VAR_5, ',');\n\n\t\tif (equal_str (VAR_5, \"nc\")) {\n\t\t\tVAR_10 = &VAR_0->nc;\n\t\t} else if (equal_str (VAR_5, \"uri\")) {\n\t\t\tVAR_10 = &VAR_0->uri;\n\t\t} else if (equal_str (VAR_5, \"qop\")) {\n\t\t\tVAR_10 = &VAR_0->qop;\n\t\t} else if (equal_str (VAR_5, \"realm\")) {\n\t\t\tVAR_10 = &VAR_0->realm;\n\t\t} else if (equal_str (VAR_5, \"nonce\")) {\n\t\t\tVAR_10 = &VAR_0->nonce;\n\t\t} else if (equal_str (VAR_5, \"cnonce\")) {\n\t\t\tVAR_10 = &VAR_0->cnonce;\n\t\t} else if (equal_str (VAR_5, \"username\")) {\n\t\t\tVAR_10 = &VAR_0->user;\n\t\t} else if (equal_str (VAR_5, \"response\")) {\n\t\t\tVAR_10 = &VAR_0->response;\n\t\t} else if (equal_str (VAR_5, \"algorithm\")) {\n\t\t\tVAR_10 = &VAR_0->algorithm;\n\t\t} else {\n\t\t\tVAR_5 = VAR_6 + 1;\n\t\t\tcontinue;\n\t\t}\n\n\t\t/* COMMENT_8 */\n     \n\t\tif (VAR_6) *VAR_6 = '\\0';\n\n\t\tVAR_7 = strchr (VAR_5, '=');\n\t\tif (VAR_7 == NULL) {\n\t\t\tif (VAR_6) *VAR_6 = ',';  /* COMMENT_10 */\n\t\t\tcontinue;\n\t\t}\n\n\t\t/* COMMENT_11 */\n     \n\t\tVAR_7 += (VAR_7[1] == '\"') ? 2 : 1;\n\t\tVAR_3 = strlen(VAR_7);\n\t\twhile ((VAR_3 > 0) &&\n\t\t       ((VAR_7[VAR_3-1] == '\"')  ||\n\t\t       (VAR_7[VAR_3-1] == VAR_12) ||\n\t\t       (VAR_7[VAR_3-1] == VAR_13))) {\n\n\t\t\tVAR_3--;\n\t\t}\n\n\t\t/* COMMENT_13 */\n     \n\t\tcherokee_buffer_add (VAR_10, VAR_7, VAR_3);\n\n\t\t/* COMMENT_15 */\n     \n\t\tif (VAR_6)\n\t\t\t*VAR_6 = ',';\n\t\tVAR_5 = VAR_6 + 1;\n\n\t} while (VAR_6 != NULL);\n\n#if 0\n\tprintf (\"nc           %s\\n\", VAR_0->nc.buf);\n\tprintf (\"uri          %s\\n\", VAR_0->uri.buf);\n\tprintf (\"qop          %s\\n\", VAR_0->qop.buf);\n\tprintf (\"realm        %s\\n\", VAR_0->realm.buf);\n\tprintf (\"nonce        %s\\n\", VAR_0->nonce.buf);\n\tprintf (\"cnonce       %s\\n\", VAR_0->cnonce.buf);\n\tprintf (\"username     %s\\n\", VAR_0->user.buf);\n\tprintf (\"reponse      %s\\n\", VAR_0->response.buf);\n\tprintf (\"algorithm    %s\\n\", VAR_0->algorithm.buf);\n#endif\n\n\t/* COMMENT_17 */\n    \n\tcherokee_buffer_mrproper (&VAR_8);\n\treturn VAR_14;\n\nerror:\n\tcherokee_buffer_mrproper (&VAR_8);\n\treturn VAR_15;\n}",
  "func_graph_path": "cherokee/webserver/1542244907b4c0a595444640341b2daea91d5767/validator.c/vul/after/1.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -9,6 +9,11 @@\n \tchar               *equal;\n \tcherokee_buffer_t   auth = CHEROKEE_BUF_INIT;\n \tcherokee_buffer_t  *entry_buf;\n+\n+\t/* Guard empty input\n+\t */\n+\tif (unlikely(str == NULL || str_len == 0))\n+\t\tgoto error;\n \n \t/* Copy authentication string\n \t */\n@@ -104,4 +109,8 @@\n \t */\n \tcherokee_buffer_mrproper (&auth);\n \treturn ret_ok;\n+\n+error:\n+\tcherokee_buffer_mrproper (&auth);\n+\treturn ret_error;\n }",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "",
      "\t/* Guard empty input",
      "\t */",
      "\tif (unlikely(str == NULL || str_len == 0))",
      "\t\tgoto error;",
      "",
      "error:",
      "\tcherokee_buffer_mrproper (&auth);",
      "\treturn ret_error;"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/cherokee/webserver/pull/1243",
  "description": {
    "pr_info": {
      "title": "Fix CVE-2020-12845",
      "number": 1243
    },
    "comment": [
      "Fix #1242\r\n\r\nThis resolves the bug originally reported by @pjlantz from F-Secure and includes QA tests to verify. Considering QA 098 failing (hard) in master, this QA test must be resolved first."
    ]
  },
  "Bug Filter": "Security Vulnerability Fix\n\nConfidence Score: 0.95",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "\n\n**Final Output:**\n\nAnalysis: The patch adds a check for empty or null input in the function `cherokee_validator_parse_digest`, preventing it from processing invalid input. This addresses a potential security issue where improper handling of such inputs could lead to vulnerabilities like buffer overflows or unauthorized access.\n\nFinal Classification: Security Vulnerability Fix\n\nConfidence Score: 0.95"
}