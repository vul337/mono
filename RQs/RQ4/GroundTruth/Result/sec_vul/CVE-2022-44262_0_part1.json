{
  "cve_id": "CVE-2022-44262",
  "cwe_ids": [
    "CWE-Other"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
  "cvss_is_v3": true,
  "repo_name": "ff4j",
  "commit_msg": "fix: Validate FlippingStrategy in various parsers (#624)",
  "commit_hash": "991df72725f78adbc413d9b0fbb676201f1882e0",
  "git_url": "https://github.com/ff4j/ff4j/commit/991df72725f78adbc413d9b0fbb676201f1882e0",
  "file_path": "ff4j-config-yaml/src/main/java/org/ff4j/parser/yaml/YamlParser.java",
  "func_name": "parseFlipStrategy",
  "func_before": "@SuppressWarnings(\"unchecked\")\n    private FlippingStrategy parseFlipStrategy(Feature feature, Map<String, Object> toggleStrategy) {\n        try {\n            // Parse class\n            String clazzName = (String) toggleStrategy.get(TOGGLE_STRATEGY_ATTCLASS);\n            FlippingStrategy flipStrategy = (FlippingStrategy) Class.forName(clazzName).newInstance();\n            // Parse Params\n            List<Map<String, Object>> mapYamlParam = (List<Map<String, Object>>) toggleStrategy.get(TOGGLE_STRATEGY_PARAMTAG);\n            Map<String,String> params = new HashMap<>();\n            for (Map<String, Object> currentParam : mapYamlParam) {\n                params.put(\n                        currentParam.get(TOGGLE_STRATEGY_PARAMNAME).toString(), \n                        currentParam.get(TOGGLE_STRATEGY_PARAMVALUE).toString());\n            }\n            flipStrategy.init(feature.getUid(), params);\n            return flipStrategy;\n        } catch (Exception e) {\n            throw new IllegalArgumentException(\"An error occurs during flipstrategy parsing TAG\" + feature.getUid(), e);\n        }\n    }",
  "abstract_func_before": "@SuppressWarnings(\"unchecked\")\n    private FlippingStrategy parseFlipStrategy(Feature VAR_0, Map<String, Object> VAR_1) {\n        try {\n            /* COMMENT_0 */\n            String VAR_2 = (String) VAR_1.get(VAR_3);\n            FlippingStrategy VAR_4 = (FlippingStrategy) VAR_5.forName(VAR_2).newInstance();\n            /* COMMENT_1 */\n            List<Map<String, Object>> VAR_6 = (List<Map<String, Object>>) VAR_1.get(VAR_7);\n            Map<String,String> VAR_8 = new HashMap<>();\n            for (Map<String, Object> VAR_9 : VAR_6) {\n                VAR_8.put(\n                        VAR_9.get(VAR_10).toString(), \n                        VAR_9.get(VAR_11).toString());\n            }\n            VAR_4.init(VAR_0.getUid(), VAR_8);\n            return VAR_4;\n        } catch (Exception VAR_12) {\n            throw new IllegalArgumentException(\"An error occurs during flipstrategy parsing TAG\" + VAR_0.getUid(), VAR_12);\n        }\n    }",
  "func_graph_path_before": "ff4j/991df72725f78adbc413d9b0fbb676201f1882e0/YamlParser.java/vul/before/0.json",
  "func": "@SuppressWarnings(\"unchecked\")\n    private FlippingStrategy parseFlipStrategy(Feature feature, Map<String, Object> toggleStrategy) {\n        try {\n            // Parse class\n            String clazzName = (String) toggleStrategy.get(TOGGLE_STRATEGY_ATTCLASS);\n            Class<?> typeClass = Class.forName(clazzName);\n            if (!FlippingStrategy.class.isAssignableFrom(typeClass)) {\n                throw new IllegalArgumentException(\"Cannot create flipstrategy <\" + clazzName + \"> invalid type\");\n            }\n            FlippingStrategy flipStrategy = (FlippingStrategy) typeClass.newInstance();\n            // Parse Params\n            List<Map<String, Object>> mapYamlParam = (List<Map<String, Object>>) toggleStrategy.get(TOGGLE_STRATEGY_PARAMTAG);\n            Map<String,String> params = new HashMap<>();\n            for (Map<String, Object> currentParam : mapYamlParam) {\n                params.put(\n                        currentParam.get(TOGGLE_STRATEGY_PARAMNAME).toString(), \n                        currentParam.get(TOGGLE_STRATEGY_PARAMVALUE).toString());\n            }\n            flipStrategy.init(feature.getUid(), params);\n            return flipStrategy;\n        } catch (Exception e) {\n            throw new IllegalArgumentException(\"An error occurs during flipstrategy parsing TAG\" + feature.getUid(), e);\n        }\n    }",
  "abstract_func": "@SuppressWarnings(\"unchecked\")\n    private FlippingStrategy parseFlipStrategy(Feature VAR_0, Map<String, Object> VAR_1) {\n        try {\n            /* COMMENT_0 */\n            String VAR_2 = (String) VAR_1.get(VAR_3);\n            Class<?> VAR_4 = VAR_5.forName(VAR_2);\n            if (!FlippingStrategy.class.isAssignableFrom(VAR_4)) {\n                throw new IllegalArgumentException(\"Cannot create flipstrategy <\" + VAR_2 + \"> invalid type\");\n            }\n            FlippingStrategy VAR_6 = (FlippingStrategy) VAR_4.newInstance();\n            /* COMMENT_1 */\n            List<Map<String, Object>> VAR_7 = (List<Map<String, Object>>) VAR_1.get(VAR_8);\n            Map<String,String> VAR_9 = new HashMap<>();\n            for (Map<String, Object> VAR_10 : VAR_7) {\n                VAR_9.put(\n                        VAR_10.get(VAR_11).toString(), \n                        VAR_10.get(VAR_12).toString());\n            }\n            VAR_6.init(VAR_0.getUid(), VAR_9);\n            return VAR_6;\n        } catch (Exception VAR_13) {\n            throw new IllegalArgumentException(\"An error occurs during flipstrategy parsing TAG\" + VAR_0.getUid(), VAR_13);\n        }\n    }",
  "func_graph_path": "ff4j/991df72725f78adbc413d9b0fbb676201f1882e0/YamlParser.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -3,7 +3,11 @@\n         try {\n             // Parse class\n             String clazzName = (String) toggleStrategy.get(TOGGLE_STRATEGY_ATTCLASS);\n-            FlippingStrategy flipStrategy = (FlippingStrategy) Class.forName(clazzName).newInstance();\n+            Class<?> typeClass = Class.forName(clazzName);\n+            if (!FlippingStrategy.class.isAssignableFrom(typeClass)) {\n+                throw new IllegalArgumentException(\"Cannot create flipstrategy <\" + clazzName + \"> invalid type\");\n+            }\n+            FlippingStrategy flipStrategy = (FlippingStrategy) typeClass.newInstance();\n             // Parse Params\n             List<Map<String, Object>> mapYamlParam = (List<Map<String, Object>>) toggleStrategy.get(TOGGLE_STRATEGY_PARAMTAG);\n             Map<String,String> params = new HashMap<>();",
  "diff_line_info": {
    "deleted_lines": [
      "            FlippingStrategy flipStrategy = (FlippingStrategy) Class.forName(clazzName).newInstance();"
    ],
    "added_lines": [
      "            Class<?> typeClass = Class.forName(clazzName);",
      "            if (!FlippingStrategy.class.isAssignableFrom(typeClass)) {",
      "                throw new IllegalArgumentException(\"Cannot create flipstrategy <\" + clazzName + \"> invalid type\");",
      "            }",
      "            FlippingStrategy flipStrategy = (FlippingStrategy) typeClass.newInstance();"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/ff4j/ff4j/pull/625",
  "description": {
    "pr_info": {
      "title": "fix: CVE-2022-44262 (#624)",
      "number": 625
    },
    "comment": [
      "Fixes #624 \r\n\r\nThis asserts that the Property being constructed extends `org.ff4j.property.Property`\r\n\r\n```\r\nConstructor<?> constr = Class.forName(optionalType).getConstructor(String.class, String.class);\r\nap = (Property<?>) constr.newInstance(name, strValue);\r\n```\r\n\r\nThis seems to be what is happening in the above code:\r\n\r\n1.`Class.forName(optionalType)` retrieves the target class\r\n2. `.getConstructor(String.class, String.class)` finds a constructor on the target class that accepts two String parameters\r\n3. `constr.newInstance(name, strValue)` constructs the instance (where the side effect happens)\r\n4. `(Property<?>)` type casts the new instance of the class. This throws an IllegalArgumentException, but the instance has been created already.",
      "the RCE is present in different points of the FF4j project.\r\nAll inputs must be validated with the proper \"isAssignableFrom\" method before executing \"newInstance\" of Class.forName(\"someinputstring\")\r\nThis applies to both property and strategy parsing/creating.\r\n\r\nExamples: \r\nff4j-core:\r\norg.ff4j.utils.MappingUtil line 183\r\norg.ff4j.conf.XmlParser line 387\r\n\r\nff4j-config-yaml:\r\norg.ff4j.parser.yaml.YamlParser line 175\r\n\r\n"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix\n\nConfidence Score: 0.95",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "\n\n**Final Output:**\n\nAnalysis: The patch adds validation to ensure that the class being loaded is a valid FlippingStrategy. This prevents unauthorized or malicious classes from being instantiated, addressing a security issue.\n\nFinal Classification: Security Vulnerability Fix\n\nConfidence Score: 0.95"
}