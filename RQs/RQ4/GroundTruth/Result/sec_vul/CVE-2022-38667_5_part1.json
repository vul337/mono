{
  "cve_id": "CVE-2022-38667",
  "cwe_ids": [
    "CWE-416"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
  "cvss_is_v3": true,
  "repo_name": "CrowCpp/Crow",
  "commit_msg": "Prevent HTTP pipelining which Crow doesn't support.",
  "commit_hash": "fba01dc76d6ea940ad7c8392e8f39f9647241d8e",
  "git_url": "https://github.com/CrowCpp/Crow/commit/fba01dc76d6ea940ad7c8392e8f39f9647241d8e",
  "file_path": "include/crow/http_connection.h",
  "func_name": "do_write",
  "func_before": "void do_write()\n        {\n            //auto self = this->shared_from_this();\n            is_writing = true;\n            asio::async_write(\n              adaptor_.socket(), buffers_,\n              [&](const asio::error_code& ec, std::size_t /*bytes_transferred*/) {\n                  is_writing = false;\n                  res.clear();\n                  res_body_copy_.clear();\n                  if (!ec)\n                  {\n                      if (close_connection_)\n                      {\n                          adaptor_.shutdown_write();\n                          adaptor_.close();\n                          CROW_LOG_DEBUG << this << \" from write(1)\";\n                          check_destroy();\n                      }\n                  }\n                  else\n                  {\n                      CROW_LOG_DEBUG << this << \" from write(2)\";\n                      check_destroy();\n                  }\n              });\n        }",
  "abstract_func_before": "void do_write()\n        {\n            /* COMMENT_0 */\n            VAR_0 = true;\n            asio::async_write(\n              VAR_1.socket(), VAR_2,\n              [&](const asio::error_code& VAR_3, std::size_t /* COMMENT_1 */) {\n                  VAR_0 = false;\n                  VAR_4.clear();\n                  VAR_5.clear();\n                  if (!VAR_3)\n                  {\n                      if (VAR_6)\n                      {\n                          VAR_1.shutdown_write();\n                          VAR_1.close();\n                          VAR_7 << this << \" from write(1)\";\n                          check_destroy();\n                      }\n                  }\n                  else\n                  {\n                      VAR_7 << this << \" from write(2)\";\n                      check_destroy();\n                  }\n              });\n        }",
  "func_graph_path_before": "CrowCpp/Crow/fba01dc76d6ea940ad7c8392e8f39f9647241d8e/http_connection.h/vul/before/1.json",
  "func": "void do_write()\n        {\n            //auto self = this->shared_from_this();\n            is_writing = true;\n            asio::async_write(\n              adaptor_.socket(), buffers_,\n              [&](const asio::error_code& ec, std::size_t /*bytes_transferred*/) {\n                  is_writing = false;\n                  res.clear();\n                  res_body_copy_.clear();\n                  parser_.clear();\n                  if (!ec)\n                  {\n                      if (close_connection_)\n                      {\n                          adaptor_.shutdown_write();\n                          adaptor_.close();\n                          CROW_LOG_DEBUG << this << \" from write(1)\";\n                          check_destroy();\n                      }\n                  }\n                  else\n                  {\n                      CROW_LOG_DEBUG << this << \" from write(2)\";\n                      check_destroy();\n                  }\n              });\n        }",
  "abstract_func": "void do_write()\n        {\n            /* COMMENT_0 */\n            VAR_0 = true;\n            asio::async_write(\n              VAR_1.socket(), VAR_2,\n              [&](const asio::error_code& VAR_3, std::size_t /* COMMENT_1 */) {\n                  VAR_0 = false;\n                  VAR_4.clear();\n                  VAR_5.clear();\n                  VAR_6.clear();\n                  if (!VAR_3)\n                  {\n                      if (VAR_7)\n                      {\n                          VAR_1.shutdown_write();\n                          VAR_1.close();\n                          VAR_8 << this << \" from write(1)\";\n                          check_destroy();\n                      }\n                  }\n                  else\n                  {\n                      VAR_8 << this << \" from write(2)\";\n                      check_destroy();\n                  }\n              });\n        }",
  "func_graph_path": "CrowCpp/Crow/fba01dc76d6ea940ad7c8392e8f39f9647241d8e/http_connection.h/vul/after/1.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -8,6 +8,7 @@\n                   is_writing = false;\n                   res.clear();\n                   res_body_copy_.clear();\n+                  parser_.clear();\n                   if (!ec)\n                   {\n                       if (close_connection_)",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "                  parser_.clear();"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/CrowCpp/Crow/pull/524",
  "description": {
    "pr_info": {
      "title": "Prevent HTTP pipelining",
      "number": 524
    },
    "comment": [
      "Fixes a potential use-after-free vulnerability where using HTTP pipelining could cause Crow to execute code related to a connection after deleting it.\r\n\r\nIt also fixes a small bug where websocket connections could be established with invalid HTTP requests (ones that don't have a `Host` header)\r\n\r\nThanks to hebi Gynvael Coldwind for discovering and reporting the vulnerability."
    ]
  },
  "Bug Filter": "Security Vulnerability Fix\n\nConfidence Score: 0.9",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "\n\n**Final Output:**\n\nAnalysis: The commit aims to prevent HTTP pipelining, which Crow doesn't support. The code change clears the parser after each response, mitigating potential resource exhaustion or DoS attacks. This addresses a security concern related to availability.\n\nFinal Classification: Security Vulnerability Fix\n\nConfidence Score: 0.9"
}