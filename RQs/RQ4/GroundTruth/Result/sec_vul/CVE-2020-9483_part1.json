{
  "cve_id": "CVE-2020-9483",
  "cwe_ids": [
    "CWE-89"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:N/A:N",
  "cvss_is_v3": false,
  "repo_name": "apache/skywalking",
  "commit_msg": "Fix security issue of the metrics query",
  "commit_hash": "2b6aae3b733f9dbeae1d6eff4f1975c723e1e7d1",
  "git_url": "https://github.com/apache/skywalking/commit/2b6aae3b733f9dbeae1d6eff4f1975c723e1e7d1",
  "file_path": "oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2MetricsQueryDAO.java",
  "func_name": "getLinearIntValues",
  "func_before": "@Override\n    public IntValues getLinearIntValues(String tableName, DownSampling downsampling, List<String> ids,\n                                        String valueCName) throws IOException {\n        StringBuilder idValues = new StringBuilder();\n        for (int valueIdx = 0; valueIdx < ids.size(); valueIdx++) {\n            if (valueIdx != 0) {\n                idValues.append(\",\");\n            }\n            idValues.append(\"'\").append(ids.get(valueIdx)).append(\"'\");\n        }\n\n        IntValues intValues = new IntValues();\n\n        try (Connection connection = h2Client.getConnection()) {\n            try (ResultSet resultSet = h2Client.executeQuery(\n                connection, \"select id, \" + valueCName + \" from \" + tableName + \" where id in (\" + idValues\n                    .toString() + \")\")) {\n                while (resultSet.next()) {\n                    KVInt kv = new KVInt();\n                    kv.setId(resultSet.getString(\"id\"));\n                    kv.setValue(resultSet.getLong(valueCName));\n                    intValues.addKVInt(kv);\n                }\n            }\n        } catch (SQLException e) {\n            throw new IOException(e);\n        }\n\n        return orderWithDefault0(intValues, ids);\n    }",
  "abstract_func_before": "@Override\n    public IntValues getLinearIntValues(String VAR_0, DownSampling VAR_1, List<String> VAR_2,\n                                        String VAR_3) throws IOException {\n        StringBuilder VAR_4 = new StringBuilder();\n        for (int VAR_5 = 0; VAR_5 < VAR_2.size(); VAR_5++) {\n            if (VAR_5 != 0) {\n                VAR_4.append(\",\");\n            }\n            VAR_4.append(\"'\").append(VAR_2.get(VAR_5)).append(\"'\");\n        }\n\n        IntValues VAR_6 = new IntValues();\n\n        try (Connection VAR_7 = VAR_8.getConnection()) {\n            try (ResultSet VAR_9 = VAR_8.executeQuery(\n                VAR_7, \"select id, \" + VAR_3 + \" from \" + VAR_0 + \" where id in (\" + VAR_4\n                    .toString() + \")\")) {\n                while (VAR_9.next()) {\n                    KVInt VAR_10 = new KVInt();\n                    VAR_10.setId(VAR_9.getString(\"id\"));\n                    VAR_10.setValue(VAR_9.getLong(VAR_3));\n                    VAR_6.addKVInt(VAR_10);\n                }\n            }\n        } catch (SQLException VAR_11) {\n            throw new IOException(VAR_11);\n        }\n\n        return orderWithDefault0(VAR_6, VAR_2);\n    }",
  "func_graph_path_before": "apache/skywalking/2b6aae3b733f9dbeae1d6eff4f1975c723e1e7d1/H2MetricsQueryDAO.java/vul/before/0.json",
  "func": "@Override\n    public IntValues getLinearIntValues(String tableName, DownSampling downsampling, List<String> ids,\n                                        String valueCName) throws IOException {\n        StringBuilder sql = new StringBuilder(\"select id, \" + valueCName + \" from \" + tableName + \" where id in (\");\n        List<Object> parameters = new ArrayList();\n        for (int i = 0; i < ids.size(); i++) {\n            if (i == 0) {\n                sql.append(\"?\");\n            } else {\n                sql.append(\",?\");\n            }\n            parameters.add(ids.get(i));\n        }\n        sql.append(\")\");\n\n        IntValues intValues = new IntValues();\n\n        try (Connection connection = h2Client.getConnection()) {\n\n            try (ResultSet resultSet = h2Client.executeQuery(\n                connection, sql.toString(), parameters.toArray(new Object[0]))) {\n                while (resultSet.next()) {\n                    KVInt kv = new KVInt();\n                    kv.setId(resultSet.getString(\"id\"));\n                    kv.setValue(resultSet.getLong(valueCName));\n                    intValues.addKVInt(kv);\n                }\n            }\n        } catch (SQLException e) {\n            throw new IOException(e);\n        }\n\n        return orderWithDefault0(intValues, ids);\n    }",
  "abstract_func": "@Override\n    public IntValues getLinearIntValues(String VAR_0, DownSampling VAR_1, List<String> VAR_2,\n                                        String VAR_3) throws IOException {\n        StringBuilder VAR_4 = new StringBuilder(\"select id, \" + VAR_3 + \" from \" + VAR_0 + \" where id in (\");\n        List<Object> VAR_5 = new ArrayList();\n        for (int VAR_6 = 0; VAR_6 < VAR_2.size(); VAR_6++) {\n            if (VAR_6 == 0) {\n                VAR_4.append(\"?\");\n            } else {\n                VAR_4.append(\",?\");\n            }\n            VAR_5.add(VAR_2.get(VAR_6));\n        }\n        VAR_4.append(\")\");\n\n        IntValues VAR_7 = new IntValues();\n\n        try (Connection VAR_8 = VAR_9.getConnection()) {\n\n            try (ResultSet VAR_10 = VAR_9.executeQuery(\n                VAR_8, VAR_4.toString(), VAR_5.toArray(new Object[0]))) {\n                while (VAR_10.next()) {\n                    KVInt VAR_11 = new KVInt();\n                    VAR_11.setId(VAR_10.getString(\"id\"));\n                    VAR_11.setValue(VAR_10.getLong(VAR_3));\n                    VAR_7.addKVInt(VAR_11);\n                }\n            }\n        } catch (SQLException VAR_12) {\n            throw new IOException(VAR_12);\n        }\n\n        return orderWithDefault0(VAR_7, VAR_2);\n    }",
  "func_graph_path": "apache/skywalking/2b6aae3b733f9dbeae1d6eff4f1975c723e1e7d1/H2MetricsQueryDAO.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,20 +1,24 @@\n @Override\n     public IntValues getLinearIntValues(String tableName, DownSampling downsampling, List<String> ids,\n                                         String valueCName) throws IOException {\n-        StringBuilder idValues = new StringBuilder();\n-        for (int valueIdx = 0; valueIdx < ids.size(); valueIdx++) {\n-            if (valueIdx != 0) {\n-                idValues.append(\",\");\n+        StringBuilder sql = new StringBuilder(\"select id, \" + valueCName + \" from \" + tableName + \" where id in (\");\n+        List<Object> parameters = new ArrayList();\n+        for (int i = 0; i < ids.size(); i++) {\n+            if (i == 0) {\n+                sql.append(\"?\");\n+            } else {\n+                sql.append(\",?\");\n             }\n-            idValues.append(\"'\").append(ids.get(valueIdx)).append(\"'\");\n+            parameters.add(ids.get(i));\n         }\n+        sql.append(\")\");\n \n         IntValues intValues = new IntValues();\n \n         try (Connection connection = h2Client.getConnection()) {\n+\n             try (ResultSet resultSet = h2Client.executeQuery(\n-                connection, \"select id, \" + valueCName + \" from \" + tableName + \" where id in (\" + idValues\n-                    .toString() + \")\")) {\n+                connection, sql.toString(), parameters.toArray(new Object[0]))) {\n                 while (resultSet.next()) {\n                     KVInt kv = new KVInt();\n                     kv.setId(resultSet.getString(\"id\"));",
  "diff_line_info": {
    "deleted_lines": [
      "        StringBuilder idValues = new StringBuilder();",
      "        for (int valueIdx = 0; valueIdx < ids.size(); valueIdx++) {",
      "            if (valueIdx != 0) {",
      "                idValues.append(\",\");",
      "            idValues.append(\"'\").append(ids.get(valueIdx)).append(\"'\");",
      "                connection, \"select id, \" + valueCName + \" from \" + tableName + \" where id in (\" + idValues",
      "                    .toString() + \")\")) {"
    ],
    "added_lines": [
      "        StringBuilder sql = new StringBuilder(\"select id, \" + valueCName + \" from \" + tableName + \" where id in (\");",
      "        List<Object> parameters = new ArrayList();",
      "        for (int i = 0; i < ids.size(); i++) {",
      "            if (i == 0) {",
      "                sql.append(\"?\");",
      "            } else {",
      "                sql.append(\",?\");",
      "            parameters.add(ids.get(i));",
      "        sql.append(\")\");",
      "",
      "                connection, sql.toString(), parameters.toArray(new Object[0]))) {"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/apache/skywalking/pull/4639",
  "description": {
    "pr_info": {
      "title": "[CVE] Fix SQL Injection vulnerability in H2/MySQL implementation.",
      "number": 4639
    },
    "comment": [
      "Because of previous SQL builder, there is SQL Injection vulnerability. I fixed 3 methods of SQL implementation.",
      "# [Codecov](https://codecov.io/gh/apache/skywalking/pull/4639?src=pr&el=h1) Report\n> Merging [#4639](https://codecov.io/gh/apache/skywalking/pull/4639?src=pr&el=desc) into [master](https://codecov.io/gh/apache/skywalking/commit/5646dfbb2365d3232ddb35263c34e0377fce4dc2&el=desc) will **decrease** coverage by `0.00%`.\n> The diff coverage is `0.00%`.\n\n[![Impacted file tree graph](https://codecov.io/gh/apache/skywalking/pull/4639/graphs/tree.svg?width=650&height=150&src=pr&token=qrILxY5yA8)](https://codecov.io/gh/apache/skywalking/pull/4639?src=pr&el=tree)\n\n```diff\n@@            Coverage Diff             @@\n##           master    #4639      +/-   ##\n==========================================\n- Coverage   28.73%   28.72%   -0.01%     \n==========================================\n  Files        1192     1192              \n  Lines       26047    26056       +9     \n  Branches     3480     3480              \n==========================================\n  Hits         7484     7484              \n- Misses      17881    17890       +9     \n  Partials      682      682              \n```\n\n\n| [Impacted Files](https://codecov.io/gh/apache/skywalking/pull/4639?src=pr&el=tree) | Coverage Δ | |\n|---|---|---|\n| [.../storage/plugin/jdbc/h2/dao/H2MetricsQueryDAO.java](https://codecov.io/gh/apache/skywalking/pull/4639/diff?src=pr&el=tree#diff-b2FwLXNlcnZlci9zZXJ2ZXItc3RvcmFnZS1wbHVnaW4vc3RvcmFnZS1qZGJjLWhpa2FyaWNwLXBsdWdpbi9zcmMvbWFpbi9qYXZhL29yZy9hcGFjaGUvc2t5d2Fsa2luZy9vYXAvc2VydmVyL3N0b3JhZ2UvcGx1Z2luL2pkYmMvaDIvZGFvL0gyTWV0cmljc1F1ZXJ5REFPLmphdmE=) | `0.00% <0.00%> (ø)` | |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/apache/skywalking/pull/4639?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/apache/skywalking/pull/4639?src=pr&el=footer). Last update [5646dfb...2b6aae3](https://codecov.io/gh/apache/skywalking/pull/4639?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix  \nConfidence Score: 1.0",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "\n\nFinal Classification: Security Vulnerability Fix  \nConfidence Score: 1.0"
}