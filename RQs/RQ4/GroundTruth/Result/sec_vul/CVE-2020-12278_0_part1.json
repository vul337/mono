{
  "cve_id": "CVE-2020-12278",
  "cwe_ids": [
    "CWE-706"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "libgit2",
  "commit_msg": "Disallow NTFS Alternate Data Stream attacks, even on Linux/macOS\n\nA little-known feature of NTFS is that it offers to store metadata in\nso-called \"Alternate Data Streams\" (inspired by Apple's \"resource\nforks\") that are copied together with the file they are associated with.\nThese Alternate Data Streams can be accessed via `<file name>:<stream\nname>:<stream type>`.\n\nDirectories, too, have Alternate Data Streams, and they even have a\ndefault stream type `$INDEX_ALLOCATION`. Which means that `abc/` and\n`abc::$INDEX_ALLOCATION/` are actually equivalent.\n\nThis is of course another attack vector on the Git directory that we\ndefinitely want to prevent.\n\nOn Windows, we already do this incidentally, by disallowing colons in\nfile/directory names.\n\nWhile it looks as if files'/directories' Alternate Data Streams are not\naccessible in the Windows Subsystem for Linux, and neither via\nCIFS/SMB-mounted network shares in Linux, it _is_ possible to access\nthem on SMB-mounted network shares on macOS.\n\nTherefore, let's go the extra mile and prevent this particular attack\n_everywhere_. To keep things simple, let's just disallow *any* Alternate\nData Stream of `.git`.\n\nThis is libgit2's variant of CVE-2019-1352.\n\nSigned-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>",
  "commit_hash": "3f7851eadca36a99627ad78cbe56a40d3776ed01",
  "git_url": "https://github.com/libgit2/libgit2/commit/3f7851eadca36a99627ad78cbe56a40d3776ed01",
  "file_path": "src/path.c",
  "func_name": "verify_dotgit_ntfs",
  "func_before": "GIT_INLINE(bool) verify_dotgit_ntfs(git_repository *repo, const char *path, size_t len)\n{\n\tgit_buf *reserved = git_repository__reserved_names_win32;\n\tsize_t reserved_len = git_repository__reserved_names_win32_len;\n\tsize_t start = 0, i;\n\n\tif (repo)\n\t\tgit_repository__reserved_names(&reserved, &reserved_len, repo, true);\n\n\tfor (i = 0; i < reserved_len; i++) {\n\t\tgit_buf *r = &reserved[i];\n\n\t\tif (len >= r->size &&\n\t\t\tstrncasecmp(path, r->ptr, r->size) == 0) {\n\t\t\tstart = r->size;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (!start)\n\t\treturn true;\n\n\t/* Reject paths like \".git\\\" */\n\tif (path[start] == '\\\\')\n\t\treturn false;\n\n\t/* Reject paths like '.git ' or '.git.' */\n\tfor (i = start; i < len; i++) {\n\t\tif (path[i] != ' ' && path[i] != '.')\n\t\t\treturn true;\n\t}\n\n\treturn false;\n}",
  "abstract_func_before": "VAR_0(bool) verify_dotgit_ntfs(git_repository *VAR_1, const char *VAR_2, size_t VAR_3)\n{\n\tgit_buf *VAR_4 = VAR_5;\n\tsize_t VAR_6 = VAR_7;\n\tsize_t VAR_8 = 0, VAR_9;\n\n\tif (VAR_1)\n\t\tgit_repository__reserved_names(&VAR_4, &VAR_6, VAR_1, true);\n\n\tfor (VAR_9 = 0; VAR_9 < VAR_6; VAR_9++) {\n\t\tgit_buf *VAR_10 = &VAR_4[VAR_9];\n\n\t\tif (VAR_3 >= VAR_10->size &&\n\t\t\tstrncasecmp(VAR_2, VAR_10->ptr, VAR_10->size) == 0) {\n\t\t\tVAR_8 = VAR_10->size;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (!VAR_8)\n\t\treturn true;\n\n\t/* COMMENT_0 */\n\tif (VAR_2[VAR_8] == '\\\\')\n\t\treturn false;\n\n\t/* COMMENT_1 */\n\tfor (VAR_9 = VAR_8; VAR_9 < VAR_3; VAR_9++) {\n\t\tif (VAR_2[VAR_9] != ' ' && VAR_2[VAR_9] != '.')\n\t\t\treturn true;\n\t}\n\n\treturn false;\n}",
  "func_graph_path_before": null,
  "func": "GIT_INLINE(bool) verify_dotgit_ntfs(git_repository *repo, const char *path, size_t len)\n{\n\tgit_buf *reserved = git_repository__reserved_names_win32;\n\tsize_t reserved_len = git_repository__reserved_names_win32_len;\n\tsize_t start = 0, i;\n\n\tif (repo)\n\t\tgit_repository__reserved_names(&reserved, &reserved_len, repo, true);\n\n\tfor (i = 0; i < reserved_len; i++) {\n\t\tgit_buf *r = &reserved[i];\n\n\t\tif (len >= r->size &&\n\t\t\tstrncasecmp(path, r->ptr, r->size) == 0) {\n\t\t\tstart = r->size;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (!start)\n\t\treturn true;\n\n\t/*\n\t * Reject paths that start with Windows-style directory separators\n\t * (\".git\\\") or NTFS alternate streams (\".git:\") and could be used\n\t * to write to the \".git\" directory on Windows platforms.\n\t */\n\tif (path[start] == '\\\\' || path[start] == ':')\n\t\treturn false;\n\n\t/* Reject paths like '.git ' or '.git.' */\n\tfor (i = start; i < len; i++) {\n\t\tif (path[i] != ' ' && path[i] != '.')\n\t\t\treturn true;\n\t}\n\n\treturn false;\n}",
  "abstract_func": "VAR_0(bool) verify_dotgit_ntfs(git_repository *VAR_1, const char *VAR_2, size_t VAR_3)\n{\n\tgit_buf *VAR_4 = VAR_5;\n\tsize_t VAR_6 = VAR_7;\n\tsize_t VAR_8 = 0, VAR_9;\n\n\tif (VAR_1)\n\t\tgit_repository__reserved_names(&VAR_4, &VAR_6, VAR_1, true);\n\n\tfor (VAR_9 = 0; VAR_9 < VAR_6; VAR_9++) {\n\t\tgit_buf *VAR_10 = &VAR_4[VAR_9];\n\n\t\tif (VAR_3 >= VAR_10->size &&\n\t\t\tstrncasecmp(VAR_2, VAR_10->ptr, VAR_10->size) == 0) {\n\t\t\tVAR_8 = VAR_10->size;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (!VAR_8)\n\t\treturn true;\n\n\t/* COMMENT_0 */\n                                                                   \n                                                                   \n                                                          \n    \n\tif (VAR_2[VAR_8] == '\\\\' || VAR_2[VAR_8] == ':')\n\t\treturn false;\n\n\t/* COMMENT_5 */\n\tfor (VAR_9 = VAR_8; VAR_9 < VAR_3; VAR_9++) {\n\t\tif (VAR_2[VAR_9] != ' ' && VAR_2[VAR_9] != '.')\n\t\t\treturn true;\n\t}\n\n\treturn false;\n}",
  "func_graph_path": null,
  "diff_func": "--- func_before\n+++ func_after\n@@ -20,8 +20,12 @@\n \tif (!start)\n \t\treturn true;\n \n-\t/* Reject paths like \".git\\\" */\n-\tif (path[start] == '\\\\')\n+\t/*\n+\t * Reject paths that start with Windows-style directory separators\n+\t * (\".git\\\") or NTFS alternate streams (\".git:\") and could be used\n+\t * to write to the \".git\" directory on Windows platforms.\n+\t */\n+\tif (path[start] == '\\\\' || path[start] == ':')\n \t\treturn false;\n \n \t/* Reject paths like '.git ' or '.git.' */",
  "diff_line_info": {
    "deleted_lines": [
      "\t/* Reject paths like \".git\\\" */",
      "\tif (path[start] == '\\\\')"
    ],
    "added_lines": [
      "\t/*",
      "\t * Reject paths that start with Windows-style directory separators",
      "\t * (\".git\\\") or NTFS alternate streams (\".git:\") and could be used",
      "\t * to write to the \".git\" directory on Windows platforms.",
      "\t */",
      "\tif (path[start] == '\\\\' || path[start] == ':')"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/libgit2/libgit2/pull/5331",
  "description": {
    "pr_info": {
      "title": "Security fixes for master",
      "number": 5331
    },
    "comment": [
      "This contains security fixes for the following issues:\r\n\r\n- CVE-2019-1348: the fast-import stream command \"feature\r\n  export-marks=path\" allows writing to arbitrary file paths. As\r\n  libgit2 does not offer any interface for fast-import, it is not\r\n  susceptible to this vulnerability.\r\n\r\n- CVE-2019-1349: by using NTFS 8.3 short names, backslashes or\r\n  alternate filesystreams, it is possible to cause submodules to\r\n  be written into pre-existing directories during a recursive\r\n  clone using git. As libgit2 rejects cloning into non-empty\r\n  directories by default, it is not susceptible to this\r\n  vulnerability.\r\n\r\n- CVE-2019-1350: recursive clones may lead to arbitrary remote\r\n  code executing due to improper quoting of command line\r\n  arguments. As libgit2 uses libssh2, which does not require us\r\n  to perform command line parsing, it is not susceptible to this\r\n  vulnerability.\r\n\r\n- CVE-2019-1351: Windows provides the ability to substitute\r\n  drive letters with arbitrary letters, including multi-byte\r\n  Unicode letters. To fix any potential issues arising from\r\n  interpreting such paths as relative paths, we have extended\r\n  detection of DOS drive prefixes to accomodate for such cases.\r\n\r\n- CVE-2019-1352: by using NTFS-style alternative file streams for\r\n  the \".git\" directory, it is possible to overwrite parts of the\r\n  repository. While this has been fixed in the past for Windows,\r\n  the same vulnerability may also exist on other systems that\r\n  write to NTFS filesystems. We now reject any paths starting\r\n  with \".git:\" on all systems.\r\n\r\n- CVE-2019-1353: by using NTFS-style 8.3 short names, it was\r\n  possible to write to the \".git\" directory and thus overwrite\r\n  parts of the repository, leading to possible remote code\r\n  execution. While this problem was already fixed in the past for\r\n  Windows, other systems accessing NTFS filesystems are\r\n  vulnerable to this issue too. We now enable NTFS protecions by\r\n  default on all systems to fix this attack vector.\r\n\r\n- CVE-2019-1354: on Windows, backslashes are not a valid part of\r\n  a filename but are instead interpreted as directory separators.\r\n  As other platforms allowed to use such paths, it was possible\r\n  to write such invalid entries into a Git repository and was\r\n  thus an attack vector to write into the \".git\" dierctory. We\r\n  now reject any entries starting with \".git\\\" on all systems.\r\n\r\n- CVE-2019-1387: it is possible to let a submodule's git\r\n  directory point into a sibling's submodule directory, which may\r\n  result in overwriting parts of the Git repository and thus lead\r\n  to arbitrary command execution. As libgit2 doesn't provide any\r\n  way to do submodule clones natively, it is not susceptible to\r\n  this vulnerability. Users of libgit2 that have implemented\r\n  recursive submodule clones manually are encouraged to review\r\n  their implementation for this vulnerability.\r\n"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix\n\nConfidence Score: 1.0",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "\n\n**Final Output:**\n\nAnalysis: The patch addresses a security vulnerability by preventing access to NTFS Alternate Data Streams in the `.git` directory, which could be exploited for unauthorized access. The code change adds checks for colons in paths, directly mitigating a known attack vector referenced by CVE-2019-1352.\n\nFinal Classification: Security Vulnerability Fix\n\nConfidence Score: 1.0"
}