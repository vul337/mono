{
  "cve_id": "CVE-2017-10671",
  "cwe_ids": [
    "CWE-119"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "blueness/sthttpd",
  "commit_msg": "Fix heap buffer overflow in de_dotdot",
  "commit_hash": "c0dc63a49d8605649f1d8e4a96c9b468b0bff660",
  "git_url": "https://github.com/blueness/sthttpd/commit/c0dc63a49d8605649f1d8e4a96c9b468b0bff660",
  "file_path": "src/libhttpd.c",
  "func_name": "de_dotdot",
  "func_before": "static void\nde_dotdot( char* file )\n    {\n    char* cp;\n    char* cp2;\n    int l;\n\n    /* Collapse any multiple / sequences. */\n    while ( ( cp = strstr( file, \"//\") ) != (char*) 0 )\n\t{\n\tfor ( cp2 = cp + 2; *cp2 == '/'; ++cp2 )\n\t    continue;\n\t(void) strcpy( cp + 1, cp2 );\n\t}\n\n    /* Remove leading ./ and any /./ sequences. */\n    while ( strncmp( file, \"./\", 2 ) == 0 )\n\t(void) memmove( file, file + 2, strlen( file ) - 1 );\n    while ( ( cp = strstr( file, \"/./\") ) != (char*) 0 )\n\t(void) memmove( cp, cp + 2, strlen( file ) - 1 );\n\n    /* Alternate between removing leading ../ and removing xxx/../ */\n    for (;;)\n\t{\n\twhile ( strncmp( file, \"../\", 3 ) == 0 )\n\t    (void) memmove( file, file + 3, strlen( file ) - 2 );\n\tcp = strstr( file, \"/../\" );\n\tif ( cp == (char*) 0 )\n\t    break;\n\tfor ( cp2 = cp - 1; cp2 >= file && *cp2 != '/'; --cp2 )\n\t    continue;\n\t(void) strcpy( cp2 + 1, cp + 4 );\n\t}\n\n    /* Also elide any xxx/.. at the end. */\n    while ( ( l = strlen( file ) ) > 3 &&\n\t    strcmp( ( cp = file + l - 3 ), \"/..\" ) == 0 )\n\t{\n\tfor ( cp2 = cp - 1; cp2 >= file && *cp2 != '/'; --cp2 )\n\t    continue;\n\tif ( cp2 < file )\n\t    break;\n\t*cp2 = '\\0';\n\t}\n    }",
  "abstract_func_before": "static void\nde_dotdot( char* VAR_0 )\n    {\n    char* VAR_1;\n    char* VAR_2;\n    int VAR_3;\n\n    /* COMMENT_0 */\n    while ( ( VAR_1 = strstr( VAR_0, \"//\") ) != (char*) 0 )\n\t{\n\tfor ( VAR_2 = VAR_1 + 2; *VAR_2 == '/'; ++VAR_2 )\n\t    continue;\n\t(void) strcpy( VAR_1 + 1, VAR_2 );\n\t}\n\n    /* COMMENT_1 */\n    while ( strncmp( VAR_0, \"./\", 2 ) == 0 )\n\t(void) memmove( VAR_0, VAR_0 + 2, strlen( VAR_0 ) - 1 );\n    while ( ( VAR_1 = strstr( VAR_0, \"/./\") ) != (char*) 0 )\n\t(void) memmove( VAR_1, VAR_1 + 2, strlen( VAR_0 ) - 1 );\n\n    /* COMMENT_2 */\n    for (;;)\n\t{\n\twhile ( strncmp( VAR_0, \"../\", 3 ) == 0 )\n\t    (void) memmove( VAR_0, VAR_0 + 3, strlen( VAR_0 ) - 2 );\n\tVAR_1 = strstr( VAR_0, \"/../\" );\n\tif ( VAR_1 == (char*) 0 )\n\t    break;\n\tfor ( VAR_2 = VAR_1 - 1; VAR_2 >= VAR_0 && *VAR_2 != '/'; --VAR_2 )\n\t    continue;\n\t(void) strcpy( VAR_2 + 1, VAR_1 + 4 );\n\t}\n\n    /* COMMENT_3 */\n    while ( ( VAR_3 = strlen( VAR_0 ) ) > 3 &&\n\t    strcmp( ( VAR_1 = VAR_0 + VAR_3 - 3 ), \"/..\" ) == 0 )\n\t{\n\tfor ( VAR_2 = VAR_1 - 1; VAR_2 >= VAR_0 && *VAR_2 != '/'; --VAR_2 )\n\t    continue;\n\tif ( VAR_2 < VAR_0 )\n\t    break;\n\t*VAR_2 = '\\0';\n\t}\n    }",
  "func_graph_path_before": "blueness/sthttpd/c0dc63a49d8605649f1d8e4a96c9b468b0bff660/libhttpd.c/vul/before/0.json",
  "func": "static void\nde_dotdot( char* file )\n    {\n    char* cp;\n    char* cp2;\n    int l;\n\n    /* Collapse any multiple / sequences. */\n    while ( ( cp = strstr( file, \"//\") ) != (char*) 0 )\n\t{\n\tfor ( cp2 = cp + 2; *cp2 == '/'; ++cp2 )\n\t    continue;\n\t(void) strcpy( cp + 1, cp2 );\n\t}\n\n    /* Remove leading ./ and any /./ sequences. */\n    while ( strncmp( file, \"./\", 2 ) == 0 )\n\t(void) memmove( file, file + 2, strlen( file ) - 1 );\n    while ( ( cp = strstr( file, \"/./\") ) != (char*) 0 )\n\t(void) memmove( cp, cp + 2, strlen( cp ) - 1 );\n\n    /* Alternate between removing leading ../ and removing xxx/../ */\n    for (;;)\n\t{\n\twhile ( strncmp( file, \"../\", 3 ) == 0 )\n\t    (void) memmove( file, file + 3, strlen( file ) - 2 );\n\tcp = strstr( file, \"/../\" );\n\tif ( cp == (char*) 0 )\n\t    break;\n\tfor ( cp2 = cp - 1; cp2 >= file && *cp2 != '/'; --cp2 )\n\t    continue;\n\t(void) strcpy( cp2 + 1, cp + 4 );\n\t}\n\n    /* Also elide any xxx/.. at the end. */\n    while ( ( l = strlen( file ) ) > 3 &&\n\t    strcmp( ( cp = file + l - 3 ), \"/..\" ) == 0 )\n\t{\n\tfor ( cp2 = cp - 1; cp2 >= file && *cp2 != '/'; --cp2 )\n\t    continue;\n\tif ( cp2 < file )\n\t    break;\n\t*cp2 = '\\0';\n\t}\n    }",
  "abstract_func": "static void\nde_dotdot( char* VAR_0 )\n    {\n    char* VAR_1;\n    char* VAR_2;\n    int VAR_3;\n\n    /* COMMENT_0 */\n    while ( ( VAR_1 = strstr( VAR_0, \"//\") ) != (char*) 0 )\n\t{\n\tfor ( VAR_2 = VAR_1 + 2; *VAR_2 == '/'; ++VAR_2 )\n\t    continue;\n\t(void) strcpy( VAR_1 + 1, VAR_2 );\n\t}\n\n    /* COMMENT_1 */\n    while ( strncmp( VAR_0, \"./\", 2 ) == 0 )\n\t(void) memmove( VAR_0, VAR_0 + 2, strlen( VAR_0 ) - 1 );\n    while ( ( VAR_1 = strstr( VAR_0, \"/./\") ) != (char*) 0 )\n\t(void) memmove( VAR_1, VAR_1 + 2, strlen( VAR_1 ) - 1 );\n\n    /* COMMENT_2 */\n    for (;;)\n\t{\n\twhile ( strncmp( VAR_0, \"../\", 3 ) == 0 )\n\t    (void) memmove( VAR_0, VAR_0 + 3, strlen( VAR_0 ) - 2 );\n\tVAR_1 = strstr( VAR_0, \"/../\" );\n\tif ( VAR_1 == (char*) 0 )\n\t    break;\n\tfor ( VAR_2 = VAR_1 - 1; VAR_2 >= VAR_0 && *VAR_2 != '/'; --VAR_2 )\n\t    continue;\n\t(void) strcpy( VAR_2 + 1, VAR_1 + 4 );\n\t}\n\n    /* COMMENT_3 */\n    while ( ( VAR_3 = strlen( VAR_0 ) ) > 3 &&\n\t    strcmp( ( VAR_1 = VAR_0 + VAR_3 - 3 ), \"/..\" ) == 0 )\n\t{\n\tfor ( VAR_2 = VAR_1 - 1; VAR_2 >= VAR_0 && *VAR_2 != '/'; --VAR_2 )\n\t    continue;\n\tif ( VAR_2 < VAR_0 )\n\t    break;\n\t*VAR_2 = '\\0';\n\t}\n    }",
  "func_graph_path": "blueness/sthttpd/c0dc63a49d8605649f1d8e4a96c9b468b0bff660/libhttpd.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -17,7 +17,7 @@\n     while ( strncmp( file, \"./\", 2 ) == 0 )\n \t(void) memmove( file, file + 2, strlen( file ) - 1 );\n     while ( ( cp = strstr( file, \"/./\") ) != (char*) 0 )\n-\t(void) memmove( cp, cp + 2, strlen( file ) - 1 );\n+\t(void) memmove( cp, cp + 2, strlen( cp ) - 1 );\n \n     /* Alternate between removing leading ../ and removing xxx/../ */\n     for (;;)",
  "diff_line_info": {
    "deleted_lines": [
      "\t(void) memmove( cp, cp + 2, strlen( file ) - 1 );"
    ],
    "added_lines": [
      "\t(void) memmove( cp, cp + 2, strlen( cp ) - 1 );"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/blueness/sthttpd/pull/4",
  "description": {
    "pr_info": {
      "title": "Fix heap buffer overflow in de_dotdot",
      "number": 4
    },
    "comment": [
      "A heap buffer overflow was introduced after switching some strcpy calls to memmove. The length of a memmove was computed incorrectly, leading to an overflow. This PR fixes the length computation.",
      "looks good to me",
      "Just for reference, this vulnerability is CVE-2017-10671, correct?",
      "Yes, this is CVE-2017-10671"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix\nConfidence Score: 1.0",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "\n\nThe patch addresses a heap buffer overflow in the de_dotdot function by correcting the length parameter in memmove, preventing unauthorized memory access. This is a security fix.\n\n**Final Output:**\nAnalysis: The patch fixes a heap buffer overflow by adjusting the memmove length, preventing unauthorized memory access.\nFinal Classification: Security Vulnerability Fix\nConfidence Score: 1.0"
}