{
  "cve_id": "CVE-2023-34620",
  "cwe_ids": [
    "CWE-787"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
  "cvss_is_v3": true,
  "repo_name": "hjson/hjson-java",
  "commit_msg": "Fixing vulnerability CVE-2023-34620 in hjson library by adding the implementation of maximum depth while parsing input JSON.",
  "commit_hash": "a16cb6a6078d76ddeaf715059213878d0ec7e057",
  "git_url": "https://github.com/hjson/hjson-java/commit/a16cb6a6078d76ddeaf715059213878d0ec7e057",
  "file_path": "src/main/org/hjson/JsonParser.java",
  "func_name": "readObject",
  "func_before": "private JsonObject readObject() throws IOException {\n    read();\n    JsonObject object=new JsonObject();\n    skipWhiteSpace();\n    if (readIf('}')) {\n      return object;\n    }\n    do {\n      skipWhiteSpace();\n      String name=readName();\n      skipWhiteSpace();\n      if (!readIf(':')) {\n        throw expected(\"':'\");\n      }\n      skipWhiteSpace();\n      object.add(name, readValue());\n      skipWhiteSpace();\n    } while (readIf(','));\n    if (!readIf('}')) {\n      throw expected(\"',' or '}'\");\n    }\n    return object;\n  }",
  "abstract_func_before": "private JsonObject readObject() throws IOException {\n    read();\n    JsonObject VAR_0=new JsonObject();\n    skipWhiteSpace();\n    if (readIf('}')) {\n      return VAR_0;\n    }\n    do {\n      skipWhiteSpace();\n      String VAR_1=readName();\n      skipWhiteSpace();\n      if (!readIf(':')) {\n        throw expected(\"':'\");\n      }\n      skipWhiteSpace();\n      VAR_0.add(VAR_1, readValue());\n      skipWhiteSpace();\n    } while (readIf(','));\n    if (!readIf('}')) {\n      throw expected(\"',' or '}'\");\n    }\n    return VAR_0;\n  }",
  "func_graph_path_before": "hjson/hjson-java/a16cb6a6078d76ddeaf715059213878d0ec7e057/JsonParser.java/vul/before/0.json",
  "func": "private JsonObject readObject(int depth) throws IOException {\n    read();\n    JsonObject object=new JsonObject();\n    skipWhiteSpace();\n    if (readIf('}')) {\n      return object;\n    }\n    do {\n      skipWhiteSpace();\n      String name=readName();\n      skipWhiteSpace();\n      if (!readIf(':')) {\n        throw expected(\"':'\");\n      }\n      skipWhiteSpace();\n      object.add(name, readValue(depth));\n      skipWhiteSpace();\n    } while (readIf(','));\n    if (!readIf('}')) {\n      throw expected(\"',' or '}'\");\n    }\n    return object;\n  }",
  "abstract_func": "private JsonObject readObject(int VAR_0) throws IOException {\n    read();\n    JsonObject VAR_1=new JsonObject();\n    skipWhiteSpace();\n    if (readIf('}')) {\n      return VAR_1;\n    }\n    do {\n      skipWhiteSpace();\n      String VAR_2=readName();\n      skipWhiteSpace();\n      if (!readIf(':')) {\n        throw expected(\"':'\");\n      }\n      skipWhiteSpace();\n      VAR_1.add(VAR_2, readValue(VAR_0));\n      skipWhiteSpace();\n    } while (readIf(','));\n    if (!readIf('}')) {\n      throw expected(\"',' or '}'\");\n    }\n    return VAR_1;\n  }",
  "func_graph_path": "hjson/hjson-java/a16cb6a6078d76ddeaf715059213878d0ec7e057/JsonParser.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,4 +1,4 @@\n-private JsonObject readObject() throws IOException {\n+private JsonObject readObject(int depth) throws IOException {\n     read();\n     JsonObject object=new JsonObject();\n     skipWhiteSpace();\n@@ -13,7 +13,7 @@\n         throw expected(\"':'\");\n       }\n       skipWhiteSpace();\n-      object.add(name, readValue());\n+      object.add(name, readValue(depth));\n       skipWhiteSpace();\n     } while (readIf(','));\n     if (!readIf('}')) {",
  "diff_line_info": {
    "deleted_lines": [
      "private JsonObject readObject() throws IOException {",
      "      object.add(name, readValue());"
    ],
    "added_lines": [
      "private JsonObject readObject(int depth) throws IOException {",
      "      object.add(name, readValue(depth));"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/hjson/hjson-java/pull/26",
  "description": {
    "pr_info": {
      "title": "Fixing vulnerability CVE-2023-34620 in hjson library by adding the implementation of maximum depth while parsing input JSON.",
      "number": 26
    },
    "comment": [
      "Fixing vulnerability CVE-2023-34620 in hjson library by adding the implementation of maximum depth while parsing input JSON.",
      "Thanks for you contribution! This only fixed the problem for objects, not for arrays, so I added a commit with a general fix.",
      "Fixes #23\r\nFixes #24"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix\n\nConfidence Score: 0.9",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "\n\nThe patch addresses a known security vulnerability (CVE-2023-34620) by implementing a maximum depth check during JSON parsing, which prevents potential DoS attacks from deep recursion. The code changes clearly indicate a security fix.\n\n**Final Output:**\n\nAnalysis:\n- The commit message explicitly mentions fixing a security vulnerability (CVE-2023-34620) by adding a maximum depth check during JSON parsing.\n- The code diff shows modifications to the `readObject` function to include a depth parameter and pass it to `readValue`, indicating the addition of a depth limit to prevent deep recursion.\n\nFinal Classification: Security Vulnerability Fix\n\nConfidence Score: 0.9"
}