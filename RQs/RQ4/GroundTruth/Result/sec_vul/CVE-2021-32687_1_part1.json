{
  "cve_id": "CVE-2021-32687",
  "cwe_ids": [
    "CWE-190",
    "CWE-680"
  ],
  "cvss_vector": "AV:N/AC:M/Au:S/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "redis",
  "commit_msg": "Fix Integer overflow issue with intsets (CVE-2021-32687)\n\nThe vulnerability involves changing the default set-max-intset-entries\nconfiguration parameter to a very large value and constructing specially\ncrafted commands to manipulate sets",
  "commit_hash": "a30d367a71b7017581cf1ca104242a3c644dec0f",
  "git_url": "https://github.com/redis/redis/commit/a30d367a71b7017581cf1ca104242a3c644dec0f",
  "file_path": "src/intset.c",
  "func_name": "intsetResize",
  "func_before": "static intset *intsetResize(intset *is, uint32_t len) {\n    uint32_t size = len*intrev32ifbe(is->encoding);\n    is = zrealloc(is,sizeof(intset)+size);\n    return is;\n}",
  "abstract_func_before": "static intset *intsetResize(intset *VAR_0, uint32_t VAR_1) {\n    uint32_t VAR_2 = VAR_1*intrev32ifbe(VAR_0->encoding);\n    VAR_0 = zrealloc(VAR_0,sizeof(intset)+VAR_2);\n    return VAR_0;\n}",
  "func_graph_path_before": "redis/a30d367a71b7017581cf1ca104242a3c644dec0f/intset.c/vul/before/0.json",
  "func": "static intset *intsetResize(intset *is, uint32_t len) {\n    uint64_t size = (uint64_t)len*intrev32ifbe(is->encoding);\n    assert(size <= SIZE_MAX - sizeof(intset));\n    is = zrealloc(is,sizeof(intset)+size);\n    return is;\n}",
  "abstract_func": "static intset *intsetResize(intset *VAR_0, uint32_t VAR_1) {\n    uint64_t VAR_2 = (uint64_t)VAR_1*intrev32ifbe(VAR_0->encoding);\n    assert(VAR_2 <= VAR_3 - sizeof(intset));\n    VAR_0 = zrealloc(VAR_0,sizeof(intset)+VAR_2);\n    return VAR_0;\n}",
  "func_graph_path": "redis/a30d367a71b7017581cf1ca104242a3c644dec0f/intset.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,5 +1,6 @@\n static intset *intsetResize(intset *is, uint32_t len) {\n-    uint32_t size = len*intrev32ifbe(is->encoding);\n+    uint64_t size = (uint64_t)len*intrev32ifbe(is->encoding);\n+    assert(size <= SIZE_MAX - sizeof(intset));\n     is = zrealloc(is,sizeof(intset)+size);\n     return is;\n }",
  "diff_line_info": {
    "deleted_lines": [
      "    uint32_t size = len*intrev32ifbe(is->encoding);"
    ],
    "added_lines": [
      "    uint64_t size = (uint64_t)len*intrev32ifbe(is->encoding);",
      "    assert(size <= SIZE_MAX - sizeof(intset));"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/redis/redis/pull/9584",
  "description": {
    "pr_info": {
      "title": "Release 6.0.16",
      "number": 9584
    },
    "comment": [
      "Upgrade urgency: SECURITY, contains fixes to security issues.\r\n\r\nSecurity Fixes:\r\n* (CVE-2021-41099) Integer to heap buffer overflow handling certain string\r\n  commands and network payloads, when proto-max-bulk-len is manually configured\r\n  to a non-default, very large value [reported by yiyuaner].\r\n* (CVE-2021-32762) Integer to heap buffer overflow issue in redis-cli and\r\n  redis-sentinel parsing large multi-bulk replies on some older and less common\r\n  platforms [reported by Microsoft Vulnerability Research].\r\n* (CVE-2021-32687) Integer to heap buffer overflow with intsets, when\r\n  set-max-intset-entries is manually configured to a non-default, very large\r\n  value [reported by Pawel Wieczorkiewicz, AWS].\r\n* (CVE-2021-32675) Denial Of Service when processing RESP request payloads with\r\n  a large number of elements on many connections.\r\n* (CVE-2021-32672) Random heap reading issue with Lua Debugger [reported by\r\n  Meir Shpilraien].\r\n* (CVE-2021-32628) Integer to heap buffer overflow handling ziplist-encoded\r\n  data types, when configuring a large, non-default value for\r\n  hash-max-ziplist-entries, hash-max-ziplist-value, zset-max-ziplist-entries\r\n  or zset-max-ziplist-value [reported by sundb].\r\n* (CVE-2021-32627) Integer to heap buffer overflow issue with streams, when\r\n  configuring a non-default, large value for proto-max-bulk-len and\r\n  client-query-buffer-limit [reported by sundb].\r\n* (CVE-2021-32626) Specially crafted Lua scripts may result with Heap buffer\r\n  overflow [reported by Meir Shpilraien].\r\n\r\nOther bug fixes:\r\n* Fix appendfsync to always guarantee fsync before reply, on MacOS and FreeBSD (kqueue) (#9416)\r\n* Fix the wrong mis-detection of sync_file_range system call, affecting performance (#9371)\r\n* Fix replication issues when repl-diskless-load is used (#9280)\r\n",
      "CI failures on MacOS (due to tests being timing sensitive): \r\n```\r\n*** [err]: No write if min-slaves-max-lag is > of the slave lag in tests/integration/replication-2.tcl\r\nExpected 'NOREPLICAS*' to equal or match 'OK'\r\n*** [err]: With min-slaves-to-write: master not writable with lagged slave in tests/integration/replication-4.tcl\r\nExpected 'NOREPLICAS*' to equal or match 'OK'\r\nCleanup: may take some time... OK\r\n```\r\nsolved by #8461 and #8583\r\n\r\nalso, the `build-ubuntu-old` CI got hung (probably no longer supported)",
      "Hi,\r\n [hi_sdsMakeRoomFor](https://github.com/redis/redis/blob/4930d19e70c391750479951022e207e19111eb55/deps/hiredis/sds.c#L196)  in deps/hiredis/sds.c wouldn't c487a9c03f89498976b3b6574df2cac763af16cc commit be applicable for hiredis code as well?\r\n",
      "Pinging @michael-grunder, do you think this fix is relevant for hiredis?"
    ]
  },
  "Bug Filter": "** Security Vulnerability Fix  \n**Confidence Score:** 1.0",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "\n\nThe patch addresses an integer overflow vulnerability by expanding the data type and adding a safety check, directly mitigating a known security issue.\n\n**Final Classification:** Security Vulnerability Fix  \n**Confidence Score:** 1.0"
}