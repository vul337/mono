{
  "cve_id": "CVE-2022-44262",
  "cwe_ids": [
    "CWE-Other"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
  "cvss_is_v3": true,
  "repo_name": "ff4j",
  "commit_msg": "fix: Validate FlippingStrategy in various parsers (#624)",
  "commit_hash": "991df72725f78adbc413d9b0fbb676201f1882e0",
  "git_url": "https://github.com/ff4j/ff4j/commit/991df72725f78adbc413d9b0fbb676201f1882e0",
  "file_path": "ff4j-web/src/main/java/org/ff4j/web/embedded/ConsoleOperations.java",
  "func_name": "updateFlippingStrategy",
  "func_before": "private static void updateFlippingStrategy(Feature fp, String strategy, String strategyParams) {\n        \n        if (null != strategy && !strategy.isEmpty()) {\n            try {\n                Class<?> strategyClass = Class.forName(strategy);\n                FlippingStrategy fstrategy = (FlippingStrategy) strategyClass.newInstance();\n               \n                if (null != strategyParams && !strategyParams.isEmpty()) {\n                    Map<String, String> initParams = new HashMap<String, String>();\n                    String[] params = strategyParams.split(\";\");\n                    for (String currentP : params) {\n                        String[] cur = currentP.split(\"=\");\n                        if (cur.length < 2) {\n                            throw new IllegalArgumentException(\"Invalid Syntax : param1=val1,val2;param2=val3,val4\");\n                        }\n                        initParams.put(cur[0], cur[1]);\n                    }\n                    fstrategy.init(fp.getUid(), initParams);\n                }\n                fp.setFlippingStrategy(fstrategy);\n\n            } catch (ClassNotFoundException e) {\n                throw new IllegalArgumentException(\"Cannot find strategy class\", e);\n            } catch (InstantiationException e) {\n                throw new IllegalArgumentException(\"Cannot instantiate strategy\", e);\n            } catch (IllegalAccessException e) {\n                throw new IllegalArgumentException(\"Cannot instantiate : no public constructor\", e);\n            }\n        }\n    }",
  "abstract_func_before": "private static void updateFlippingStrategy(Feature VAR_0, String VAR_1, String VAR_2) {\n        \n        if (null != VAR_1 && !VAR_1.isEmpty()) {\n            try {\n                Class<?> VAR_3 = VAR_4.forName(VAR_1);\n                FlippingStrategy VAR_5 = (FlippingStrategy) VAR_3.newInstance();\n               \n                if (null != VAR_2 && !VAR_2.isEmpty()) {\n                    Map<String, String> VAR_6 = new HashMap<String, String>();\n                    String[] VAR_7 = VAR_2.split(\";\");\n                    for (String VAR_8 : VAR_7) {\n                        String[] VAR_9 = VAR_8.split(\"=\");\n                        if (VAR_9.length < 2) {\n                            throw new IllegalArgumentException(\"Invalid Syntax : param1=val1,val2;param2=val3,val4\");\n                        }\n                        VAR_6.put(VAR_9[0], VAR_9[1]);\n                    }\n                    VAR_5.init(VAR_0.getUid(), VAR_6);\n                }\n                VAR_0.setFlippingStrategy(VAR_5);\n\n            } catch (ClassNotFoundException VAR_10) {\n                throw new IllegalArgumentException(\"Cannot find strategy class\", VAR_10);\n            } catch (InstantiationException VAR_10) {\n                throw new IllegalArgumentException(\"Cannot instantiate strategy\", VAR_10);\n            } catch (IllegalAccessException VAR_10) {\n                throw new IllegalArgumentException(\"Cannot instantiate : no public constructor\", VAR_10);\n            }\n        }\n    }",
  "func_graph_path_before": "ff4j/991df72725f78adbc413d9b0fbb676201f1882e0/ConsoleOperations.java/vul/before/1.json",
  "func": "private static void updateFlippingStrategy(Feature fp, String strategy, String strategyParams) {\n        \n        if (null != strategy && !strategy.isEmpty()) {\n            try {\n                Class<?> strategyClass = Class.forName(strategy);\n                if (!FlippingStrategy.class.isAssignableFrom(strategyClass)) {\n                    throw new IllegalArgumentException(\"Cannot create flipstrategy <\" + strategy + \"> invalid type\");\n                }\n                FlippingStrategy fstrategy = (FlippingStrategy) strategyClass.newInstance();\n               \n                if (null != strategyParams && !strategyParams.isEmpty()) {\n                    Map<String, String> initParams = new HashMap<String, String>();\n                    String[] params = strategyParams.split(\";\");\n                    for (String currentP : params) {\n                        String[] cur = currentP.split(\"=\");\n                        if (cur.length < 2) {\n                            throw new IllegalArgumentException(\"Invalid Syntax : param1=val1,val2;param2=val3,val4\");\n                        }\n                        initParams.put(cur[0], cur[1]);\n                    }\n                    fstrategy.init(fp.getUid(), initParams);\n                }\n                fp.setFlippingStrategy(fstrategy);\n\n            } catch (ClassNotFoundException e) {\n                throw new IllegalArgumentException(\"Cannot find strategy class\", e);\n            } catch (InstantiationException e) {\n                throw new IllegalArgumentException(\"Cannot instantiate strategy\", e);\n            } catch (IllegalAccessException e) {\n                throw new IllegalArgumentException(\"Cannot instantiate : no public constructor\", e);\n            }\n        }\n    }",
  "abstract_func": "private static void updateFlippingStrategy(Feature VAR_0, String VAR_1, String VAR_2) {\n        \n        if (null != VAR_1 && !VAR_1.isEmpty()) {\n            try {\n                Class<?> VAR_3 = VAR_4.forName(VAR_1);\n                if (!FlippingStrategy.class.isAssignableFrom(VAR_3)) {\n                    throw new IllegalArgumentException(\"Cannot create flipstrategy <\" + VAR_1 + \"> invalid type\");\n                }\n                FlippingStrategy VAR_5 = (FlippingStrategy) VAR_3.newInstance();\n               \n                if (null != VAR_2 && !VAR_2.isEmpty()) {\n                    Map<String, String> VAR_6 = new HashMap<String, String>();\n                    String[] VAR_7 = VAR_2.split(\";\");\n                    for (String VAR_8 : VAR_7) {\n                        String[] VAR_9 = VAR_8.split(\"=\");\n                        if (VAR_9.length < 2) {\n                            throw new IllegalArgumentException(\"Invalid Syntax : param1=val1,val2;param2=val3,val4\");\n                        }\n                        VAR_6.put(VAR_9[0], VAR_9[1]);\n                    }\n                    VAR_5.init(VAR_0.getUid(), VAR_6);\n                }\n                VAR_0.setFlippingStrategy(VAR_5);\n\n            } catch (ClassNotFoundException VAR_10) {\n                throw new IllegalArgumentException(\"Cannot find strategy class\", VAR_10);\n            } catch (InstantiationException VAR_10) {\n                throw new IllegalArgumentException(\"Cannot instantiate strategy\", VAR_10);\n            } catch (IllegalAccessException VAR_10) {\n                throw new IllegalArgumentException(\"Cannot instantiate : no public constructor\", VAR_10);\n            }\n        }\n    }",
  "func_graph_path": "ff4j/991df72725f78adbc413d9b0fbb676201f1882e0/ConsoleOperations.java/vul/after/1.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -3,6 +3,9 @@\n         if (null != strategy && !strategy.isEmpty()) {\n             try {\n                 Class<?> strategyClass = Class.forName(strategy);\n+                if (!FlippingStrategy.class.isAssignableFrom(strategyClass)) {\n+                    throw new IllegalArgumentException(\"Cannot create flipstrategy <\" + strategy + \"> invalid type\");\n+                }\n                 FlippingStrategy fstrategy = (FlippingStrategy) strategyClass.newInstance();\n                \n                 if (null != strategyParams && !strategyParams.isEmpty()) {",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "                if (!FlippingStrategy.class.isAssignableFrom(strategyClass)) {",
      "                    throw new IllegalArgumentException(\"Cannot create flipstrategy <\" + strategy + \"> invalid type\");",
      "                }"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/ff4j/ff4j/pull/625",
  "description": {
    "pr_info": {
      "title": "fix: CVE-2022-44262 (#624)",
      "number": 625
    },
    "comment": [
      "Fixes #624 \r\n\r\nThis asserts that the Property being constructed extends `org.ff4j.property.Property`\r\n\r\n```\r\nConstructor<?> constr = Class.forName(optionalType).getConstructor(String.class, String.class);\r\nap = (Property<?>) constr.newInstance(name, strValue);\r\n```\r\n\r\nThis seems to be what is happening in the above code:\r\n\r\n1.`Class.forName(optionalType)` retrieves the target class\r\n2. `.getConstructor(String.class, String.class)` finds a constructor on the target class that accepts two String parameters\r\n3. `constr.newInstance(name, strValue)` constructs the instance (where the side effect happens)\r\n4. `(Property<?>)` type casts the new instance of the class. This throws an IllegalArgumentException, but the instance has been created already.",
      "the RCE is present in different points of the FF4j project.\r\nAll inputs must be validated with the proper \"isAssignableFrom\" method before executing \"newInstance\" of Class.forName(\"someinputstring\")\r\nThis applies to both property and strategy parsing/creating.\r\n\r\nExamples: \r\nff4j-core:\r\norg.ff4j.utils.MappingUtil line 183\r\norg.ff4j.conf.XmlParser line 387\r\n\r\nff4j-config-yaml:\r\norg.ff4j.parser.yaml.YamlParser line 175\r\n\r\n"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix**\n\n**Confidence Score: 0.8**",
  "Bug Filter Confidence": 0.8,
  "Bug Filter Response": "\n\nThe patch adds a validation check to ensure that the FlippingStrategy class is correctly used, preventing potential misuse. This could address a security concern by validating attacker-controllable inputs, thus mitigating unauthorized behavior.\n\n**Final Classification: Security Vulnerability Fix**\n\n**Confidence Score: 0.8**"
}