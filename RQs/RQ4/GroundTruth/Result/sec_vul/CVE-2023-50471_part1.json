{
  "cve_id": "CVE-2023-50471",
  "cwe_ids": [
    "CWE-476"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
  "cvss_is_v3": true,
  "repo_name": "DaveGamble/cJSON",
  "commit_msg": "add NULL checkings (#809)\n\n* add NULL checks in cJSON_SetValuestring\r\n\r\nFixes #803(CVE-2023-50472)\r\n\r\n* add NULL check in cJSON_InsertItemInArray\r\n\r\nFixes #802(CVE-2023-50471)\r\n\r\n* add tests for NULL checks\r\n\r\nadd tests for NULL checks in cJSON_InsertItemInArray and cJSON_SetValuestring",
  "commit_hash": "60ff122ef5862d04b39b150541459e7f5e35add8",
  "git_url": "https://github.com/DaveGamble/cJSON/commit/60ff122ef5862d04b39b150541459e7f5e35add8",
  "file_path": "cJSON.c",
  "func_name": "cJSON_SetValuestring",
  "func_before": "CJSON_PUBLIC(char*) cJSON_SetValuestring(cJSON *object, const char *valuestring)\n{\n    char *copy = NULL;\n    /* if object's type is not cJSON_String or is cJSON_IsReference, it should not set valuestring */\n    if (!(object->type & cJSON_String) || (object->type & cJSON_IsReference))\n    {\n        return NULL;\n    }\n    if (strlen(valuestring) <= strlen(object->valuestring))\n    {\n        strcpy(object->valuestring, valuestring);\n        return object->valuestring;\n    }\n    copy = (char*) cJSON_strdup((const unsigned char*)valuestring, &global_hooks);\n    if (copy == NULL)\n    {\n        return NULL;\n    }\n    if (object->valuestring != NULL)\n    {\n        cJSON_free(object->valuestring);\n    }\n    object->valuestring = copy;\n\n    return copy;\n}",
  "abstract_func_before": "VAR_0(char*) cJSON_SetValuestring(cJSON *VAR_1, const char *VAR_2)\n{\n    char *VAR_3 = NULL;\n    /* COMMENT_0 */\n    if (!(VAR_1->type & VAR_4) || (VAR_1->type & VAR_5))\n    {\n        return NULL;\n    }\n    if (strlen(VAR_2) <= strlen(VAR_1->valuestring))\n    {\n        strcpy(VAR_1->valuestring, VAR_2);\n        return VAR_1->valuestring;\n    }\n    VAR_3 = (char*) cJSON_strdup((const unsigned char*)VAR_2, &VAR_6);\n    if (VAR_3 == NULL)\n    {\n        return NULL;\n    }\n    if (VAR_1->valuestring != NULL)\n    {\n        cJSON_free(VAR_1->valuestring);\n    }\n    VAR_1->valuestring = VAR_3;\n\n    return VAR_3;\n}",
  "func_graph_path_before": null,
  "func": "CJSON_PUBLIC(char*) cJSON_SetValuestring(cJSON *object, const char *valuestring)\n{\n    char *copy = NULL;\n    /* if object's type is not cJSON_String or is cJSON_IsReference, it should not set valuestring */\n    if ((object == NULL) || !(object->type & cJSON_String) || (object->type & cJSON_IsReference))\n    {\n        return NULL;\n    }\n    /* return NULL if the object is corrupted */\n    if (object->valuestring == NULL)\n    {\n        return NULL;\n    }\n    if (strlen(valuestring) <= strlen(object->valuestring))\n    {\n        strcpy(object->valuestring, valuestring);\n        return object->valuestring;\n    }\n    copy = (char*) cJSON_strdup((const unsigned char*)valuestring, &global_hooks);\n    if (copy == NULL)\n    {\n        return NULL;\n    }\n    if (object->valuestring != NULL)\n    {\n        cJSON_free(object->valuestring);\n    }\n    object->valuestring = copy;\n\n    return copy;\n}",
  "abstract_func": "VAR_0(char*) cJSON_SetValuestring(cJSON *VAR_1, const char *VAR_2)\n{\n    char *VAR_3 = NULL;\n    /* COMMENT_0 */\n    if ((VAR_1 == NULL) || !(VAR_1->type & VAR_4) || (VAR_1->type & VAR_5))\n    {\n        return NULL;\n    }\n    /* COMMENT_1 */\n    if (VAR_1->valuestring == NULL)\n    {\n        return NULL;\n    }\n    if (strlen(VAR_2) <= strlen(VAR_1->valuestring))\n    {\n        strcpy(VAR_1->valuestring, VAR_2);\n        return VAR_1->valuestring;\n    }\n    VAR_3 = (char*) cJSON_strdup((const unsigned char*)VAR_2, &VAR_6);\n    if (VAR_3 == NULL)\n    {\n        return NULL;\n    }\n    if (VAR_1->valuestring != NULL)\n    {\n        cJSON_free(VAR_1->valuestring);\n    }\n    VAR_1->valuestring = VAR_3;\n\n    return VAR_3;\n}",
  "func_graph_path": null,
  "diff_func": "--- func_before\n+++ func_after\n@@ -2,7 +2,12 @@\n {\n     char *copy = NULL;\n     /* if object's type is not cJSON_String or is cJSON_IsReference, it should not set valuestring */\n-    if (!(object->type & cJSON_String) || (object->type & cJSON_IsReference))\n+    if ((object == NULL) || !(object->type & cJSON_String) || (object->type & cJSON_IsReference))\n+    {\n+        return NULL;\n+    }\n+    /* return NULL if the object is corrupted */\n+    if (object->valuestring == NULL)\n     {\n         return NULL;\n     }",
  "diff_line_info": {
    "deleted_lines": [
      "    if (!(object->type & cJSON_String) || (object->type & cJSON_IsReference))"
    ],
    "added_lines": [
      "    if ((object == NULL) || !(object->type & cJSON_String) || (object->type & cJSON_IsReference))",
      "    {",
      "        return NULL;",
      "    }",
      "    /* return NULL if the object is corrupted */",
      "    if (object->valuestring == NULL)"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/DaveGamble/cJSON/pull/809",
  "description": {
    "pr_info": {
      "title": "add NULL checkings",
      "number": 809
    },
    "comment": [
      "Add NULL checkings in cJSON_InsertItemInArray and cJSON_SetValuestring\r\nFixing #802(CVE-2023-50471) and #803(CVE-2023-50472)",
      "LGTM"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix\n\nConfidence Score: 1.0",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "\n\n**Final Output:**\n\nAnalysis: The patch adds NULL checks in cJSON_SetValuestring and cJSON_InsertItemInArray, addressing CVE-2023-50472 and CVE-2023-50471. These changes prevent potential crashes or exploits due to NULL pointer dereferences, indicating a security fix.\n\nFinal Classification: Security Vulnerability Fix\n\nConfidence Score: 1.0"
}