{
  "cve_id": "CVE-2023-1495",
  "cwe_ids": [
    "CWE-89"
  ],
  "cvss_vector": "AV:N/AC:L/Au:S/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "getrebuild/rebuild",
  "commit_msg": "H5 sync2 (#595)\n\n* style: 目录样式gh\r\n\r\n* style: J_new\r\n\r\n* feat: advListFilterTabs\r\n\r\n* feat: nav-copyto\r\n\r\n* enh: 助记码全拼\r\n\r\n* enh: 地图搜索选点\r\n\r\n* enh: topnav\r\n\r\n* list pn\r\n\r\n* .form-line.v33\r\n\r\n* open TAG\r\n\r\n* KVS addShutdownHook\r\n\r\n* fix: #594\r\n\r\n---------\r\n\r\nCo-authored-by: devezhao <zhaofang123@gmail.com>",
  "commit_hash": "c9474f84e5f376dd2ade2078e3039961a9425da7",
  "git_url": "https://github.com/getrebuild/rebuild/commit/c9474f84e5f376dd2ade2078e3039961a9425da7",
  "file_path": "src/main/java/com/rebuild/web/general/ReferenceSearchController.java",
  "func_name": "buildResultSearch",
  "func_before": "private JSON buildResultSearch(Entity searchEntity, String quickFields, String q, String appendWhere, int maxResults) {\n        String searchWhere = \"(1=1)\";\n\n        if (StringUtils.isNotBlank(q)) {\n            // 查询字段\n            Set<String> searchFields = ParseHelper.buildQuickFields(searchEntity, quickFields);\n            if (searchFields.isEmpty()) {\n                return JSONUtils.EMPTY_ARRAY;\n            }\n\n            String like = \" like '%\" + StringEscapeUtils.escapeSql(q) + \"%'\";\n            searchWhere = StringUtils.join(searchFields.iterator(), like + \" or \") + like;\n        }\n\n        if (appendWhere != null) {\n            searchWhere = String.format(\"(%s) and (%s)\", appendWhere, searchWhere);\n        } else {\n            searchWhere = String.format(\"(%s)\", searchWhere);\n        }\n\n        List<Object> result = resultSearch(searchWhere, searchEntity, maxResults);\n        return (JSON) JSON.toJSON(result);\n    }",
  "abstract_func_before": "private JSON buildResultSearch(Entity VAR_0, String VAR_1, String VAR_2, String VAR_3, int VAR_4) {\n        String VAR_5 = \"(1=1)\";\n\n        if (VAR_6.isNotBlank(VAR_2)) {\n            /* COMMENT_0 */\n            Set<String> VAR_7 = VAR_8.buildQuickFields(VAR_0, VAR_1);\n            if (VAR_7.isEmpty()) {\n                return VAR_9.EMPTY_ARRAY;\n            }\n\n            String VAR_10 = \" like '%\" + VAR_11.escapeSql(VAR_2) + \"%'\";\n            VAR_5 = VAR_6.join(VAR_7.iterator(), VAR_10 + \" or \") + VAR_10;\n        }\n\n        if (VAR_3 != null) {\n            VAR_5 = VAR_12.format(\"(%s) and (%s)\", VAR_3, VAR_5);\n        } else {\n            VAR_5 = VAR_12.format(\"(%s)\", VAR_5);\n        }\n\n        List<Object> VAR_13 = resultSearch(VAR_5, VAR_0, VAR_4);\n        return (JSON) VAR_14.toJSON(VAR_13);\n    }",
  "func_graph_path_before": "getrebuild/rebuild/c9474f84e5f376dd2ade2078e3039961a9425da7/ReferenceSearchController.java/vul/before/1.json",
  "func": "private JSON buildResultSearch(Entity searchEntity, String quickFields, String q, String appendWhere, int maxResults) {\n        String searchWhere = \"(1=1)\";\n\n        if (StringUtils.isNotBlank(q)) {\n            // 查询字段\n            Set<String> searchFields = ParseHelper.buildQuickFields(searchEntity, quickFields);\n            if (searchFields.isEmpty()) {\n                return JSONUtils.EMPTY_ARRAY;\n            }\n\n            String like = \" like '%\" + CommonsUtils.escapeSql(q) + \"%'\";\n            searchWhere = StringUtils.join(searchFields.iterator(), like + \" or \") + like;\n        }\n\n        if (appendWhere != null) {\n            searchWhere = String.format(\"(%s) and (%s)\", appendWhere, searchWhere);\n        } else {\n            searchWhere = String.format(\"(%s)\", searchWhere);\n        }\n\n        List<Object> result = resultSearch(searchWhere, searchEntity, maxResults);\n        return (JSON) JSON.toJSON(result);\n    }",
  "abstract_func": "private JSON buildResultSearch(Entity VAR_0, String VAR_1, String VAR_2, String VAR_3, int VAR_4) {\n        String VAR_5 = \"(1=1)\";\n\n        if (VAR_6.isNotBlank(VAR_2)) {\n            /* COMMENT_0 */\n            Set<String> VAR_7 = VAR_8.buildQuickFields(VAR_0, VAR_1);\n            if (VAR_7.isEmpty()) {\n                return VAR_9.EMPTY_ARRAY;\n            }\n\n            String VAR_10 = \" like '%\" + VAR_11.escapeSql(VAR_2) + \"%'\";\n            VAR_5 = VAR_6.join(VAR_7.iterator(), VAR_10 + \" or \") + VAR_10;\n        }\n\n        if (VAR_3 != null) {\n            VAR_5 = VAR_12.format(\"(%s) and (%s)\", VAR_3, VAR_5);\n        } else {\n            VAR_5 = VAR_12.format(\"(%s)\", VAR_5);\n        }\n\n        List<Object> VAR_13 = resultSearch(VAR_5, VAR_0, VAR_4);\n        return (JSON) VAR_14.toJSON(VAR_13);\n    }",
  "func_graph_path": "getrebuild/rebuild/c9474f84e5f376dd2ade2078e3039961a9425da7/ReferenceSearchController.java/vul/after/1.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -8,7 +8,7 @@\n                 return JSONUtils.EMPTY_ARRAY;\n             }\n \n-            String like = \" like '%\" + StringEscapeUtils.escapeSql(q) + \"%'\";\n+            String like = \" like '%\" + CommonsUtils.escapeSql(q) + \"%'\";\n             searchWhere = StringUtils.join(searchFields.iterator(), like + \" or \") + like;\n         }\n ",
  "diff_line_info": {
    "deleted_lines": [
      "            String like = \" like '%\" + StringEscapeUtils.escapeSql(q) + \"%'\";"
    ],
    "added_lines": [
      "            String like = \" like '%\" + CommonsUtils.escapeSql(q) + \"%'\";"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/getrebuild/rebuild/pull/595",
  "description": {
    "pr_info": {
      "title": "H5 sync2",
      "number": 595
    },
    "comment": [
      "Most styles:\r\n1. Nav copy\r\n2. Arrow for form line \r\n3. Quick-code full-pinyin\r\n4. Open Tag of field\r\n5. feat: `advListFilterTabs` (boss-key)\r\n6. Map search\r\n7. feat: Can input page-no on list\r\n8. CVE fix"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix\nConfidence Score: 0.9",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "\n\nThe patch addresses a security vulnerability by correcting the SQL escaping method, which prevents SQL injection attacks.\n\n**Final Output:**\nAnalysis: The patch changes the SQL escaping method, which is crucial for preventing SQL injection, a security vulnerability.\nFinal Classification: Security Vulnerability Fix\nConfidence Score: 0.9"
}