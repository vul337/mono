{
  "cve_id": "CVE-2022-1451",
  "cwe_ids": [
    "CWE-125"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:P/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "radareorg/radare2",
  "commit_msg": "Fix oobread crash in java parser ##crash\n\n* Reported by @bet4it via @huntrdev\n* BountyID: 229a2e0d-9e5c-402f-9a24-57fa2eb1aaa7\n* Reproducer: poc4java",
  "commit_hash": "0927ed3ae99444e7b47b84e43118deb10fe37529",
  "git_url": "https://github.com/radareorg/radare2/commit/0927ed3ae99444e7b47b84e43118deb10fe37529",
  "file_path": "shlr/java/class.c",
  "func_name": "r_bin_java_get_attr_buf",
  "func_before": "R_API ut8 *r_bin_java_get_attr_buf(RBinJavaObj *bin, ut64 sz, const ut64 offset, const ut8 *buf, const ut64 len) {\n\tut8 *attr_buf = NULL;\n\tint pending = len - offset;\n\tconst ut8 *a_buf = offset + buf;\n\tattr_buf = (ut8 *) calloc (pending + 1, 1);\n\tif (!attr_buf) {\n\t\teprintf (\"Unable to allocate enough bytes (0x%04\"PFMT64x\n\t\t\t\") to read in the attribute.\\n\", sz);\n\t\treturn attr_buf;\n\t}\n\tmemcpy (attr_buf, a_buf, pending); // sz+1);\n\treturn attr_buf;\n}",
  "abstract_func_before": "R_API ut8 *r_bin_java_get_attr_buf(RBinJavaObj *VAR_0, ut64 VAR_1, const ut64 VAR_2, const ut8 *VAR_3, const ut64 VAR_4) {\n\tut8 *VAR_5 = NULL;\n\tint VAR_6 = VAR_4 - VAR_2;\n\tconst ut8 *VAR_7 = VAR_2 + VAR_3;\n\tVAR_5 = (ut8 *) calloc (VAR_6 + 1, 1);\n\tif (!VAR_5) {\n\t\teprintf (\"Unable to allocate enough bytes (0x%04\"VAR_8\n\t\t\t\") to read in the attribute.\\n\", VAR_1);\n\t\treturn VAR_5;\n\t}\n\tmemcpy (VAR_5, VAR_7, VAR_6); /* COMMENT_0 */\n\treturn VAR_5;\n}",
  "func_graph_path_before": null,
  "func": "R_API ut8 *r_bin_java_get_attr_buf(RBinJavaObj *bin, ut64 sz, const ut64 offset, const ut8 *buf, const ut64 len) {\n\t// XXX this pending is wrong and too expensive\n\tint pending = len - offset;\n\tconst ut8 *a_buf = offset + buf;\n\tut8 *attr_buf = (ut8 *) calloc (pending + 1, 1);\n\tif (!attr_buf) {\n\t\teprintf (\"Unable to allocate enough bytes (0x%04\"PFMT64x\n\t\t\t\") to read in the attribute.\\n\", sz);\n\t\treturn attr_buf;\n\t}\n\tmemcpy (attr_buf, a_buf, pending); // sz+1);\n\treturn attr_buf;\n}",
  "abstract_func": "R_API ut8 *r_bin_java_get_attr_buf(RBinJavaObj *VAR_0, ut64 VAR_1, const ut64 VAR_2, const ut8 *VAR_3, const ut64 VAR_4) {\n\t/* COMMENT_0 */\n\tint VAR_5 = VAR_4 - VAR_2;\n\tconst ut8 *VAR_6 = VAR_2 + VAR_3;\n\tut8 *VAR_7 = (ut8 *) calloc (VAR_5 + 1, 1);\n\tif (!VAR_7) {\n\t\teprintf (\"Unable to allocate enough bytes (0x%04\"VAR_8\n\t\t\t\") to read in the attribute.\\n\", VAR_1);\n\t\treturn VAR_7;\n\t}\n\tmemcpy (VAR_7, VAR_6, VAR_5); /* COMMENT_1 */\n\treturn VAR_7;\n}",
  "func_graph_path": null,
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,8 +1,8 @@\n R_API ut8 *r_bin_java_get_attr_buf(RBinJavaObj *bin, ut64 sz, const ut64 offset, const ut8 *buf, const ut64 len) {\n-\tut8 *attr_buf = NULL;\n+\t// XXX this pending is wrong and too expensive\n \tint pending = len - offset;\n \tconst ut8 *a_buf = offset + buf;\n-\tattr_buf = (ut8 *) calloc (pending + 1, 1);\n+\tut8 *attr_buf = (ut8 *) calloc (pending + 1, 1);\n \tif (!attr_buf) {\n \t\teprintf (\"Unable to allocate enough bytes (0x%04\"PFMT64x\n \t\t\t\") to read in the attribute.\\n\", sz);",
  "diff_line_info": {
    "deleted_lines": [
      "\tut8 *attr_buf = NULL;",
      "\tattr_buf = (ut8 *) calloc (pending + 1, 1);"
    ],
    "added_lines": [
      "\t// XXX this pending is wrong and too expensive",
      "\tut8 *attr_buf = (ut8 *) calloc (pending + 1, 1);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/radareorg/radare2/pull/19993",
  "description": {
    "pr_info": {
      "title": "Fix oobread crash in java parser ##crash",
      "number": 19993
    },
    "comment": [
      "* Reported by @bet4it via @huntrdev\r\n* BountyID: 229a2e0d-9e5c-402f-9a24-57fa2eb1aaa7\r\n* Reproducer: poc4java\r\n\r\n<!--\r\nRead https://github.com/radareorg/radare2/blob/master/DEVELOPERS.md\r\n* PR title must be capitalized, concise and use ##tags\r\n* If the PR is fixing a ticket use 'Fix #1234 - ..' in the commit message\r\n* Follow the coding style, add tests and documentation if necessary\r\n-->\r\n\r\n- [ ] Mark this if you consider it ready to merge\r\n- [ ] I've added tests (optional)\r\n- [ ] I wrote some lines in the [book](https://github.com/radareorg/radare2book) (optional)\r\n\r\n**Description**\r\n\r\n<!-- explain your changes if necessary -->\r\n"
    ]
  },
  "Bug Filter": "** Security Vulnerability Fix  \n**Confidence Score:** 0.95",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "\n\nThe patch addresses an out-of-bounds read vulnerability in the Java parser, which could be exploited to cause a crash. The fix corrects the buffer allocation to prevent such issues, making it a security vulnerability fix.\n\n**Final Classification:** Security Vulnerability Fix  \n**Confidence Score:** 0.95"
}