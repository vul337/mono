{
  "cve_id": "CVE-2023-4322",
  "cwe_ids": [
    "CWE-787"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
  "cvss_is_v3": true,
  "repo_name": "radareorg/radare2",
  "commit_msg": "Fix 1byte heap oobread in the brainfuck disassembler\n\n* https://huntr.dev/bounties/06e2484c-d6f1-4497-af67-26549be9fffd/\n* Kudos to @7resp4ss for reporting",
  "commit_hash": "ba919adb74ac368bf76b150a00347ded78b572dd",
  "git_url": "https://github.com/radareorg/radare2/commit/ba919adb74ac368bf76b150a00347ded78b572dd",
  "file_path": "libr/core/cmd_anal.c",
  "func_name": "axfm",
  "func_before": "static void axfm(RCore *core) {\n\tRVecAnalRef *refs = r_anal_xrefs_get_from (core->anal, UT64_MAX);\n\tif (refs && !RVecAnalRef_empty (refs)) {\n\t\tRVecAnalRef_sort (refs, compare_ref);\n\n\t\tut64 last_addr = UT64_MAX;\n\t\tRAnalRef *ref;\n\t\tR_VEC_FOREACH (refs, ref) {\n\t\t\tconst bool is_first = ref->addr != last_addr;\n\t\t\tconst char *name;\n\t\t\tif (is_first) {\n\t\t\t\tname = axtm_name (core, ref->addr);\n\t\t\t\tr_cons_printf (\"0x%\"PFMT64x\": %s\\n\", ref->addr, name? name: \"?\");\n\t\t\t}\n\n\t\t\tname = axtm_name (core, ref->at);\n\t\t\tr_cons_printf (\"  0x%\"PFMT64x\": %s\\n\", ref->at, name? name: \"?\");\n\n\t\t\tlast_addr = ref->addr;\n\t\t}\n\t}\n\n\tRVecAnalRef_free (refs);\n}",
  "abstract_func_before": "static void axfm(RCore *VAR_0) {\n\tRVecAnalRef *VAR_1 = r_anal_xrefs_get_from (VAR_0->anal, VAR_2);\n\tif (VAR_1 && !RVecAnalRef_empty (VAR_1)) {\n\t\tRVecAnalRef_sort (VAR_1, VAR_3);\n\n\t\tut64 VAR_4 = VAR_2;\n\t\tRAnalRef *VAR_5;\n\t\tR_VEC_FOREACH (VAR_1, VAR_5) {\n\t\t\tconst bool VAR_6 = VAR_5->addr != VAR_4;\n\t\t\tconst char *VAR_7;\n\t\t\tif (VAR_6) {\n\t\t\t\tVAR_7 = axtm_name (VAR_0, VAR_5->addr);\n\t\t\t\tr_cons_printf (\"0x%\"VAR_8\": %s\\n\", VAR_5->addr, VAR_7? VAR_7: \"?\");\n\t\t\t}\n\n\t\t\tVAR_7 = axtm_name (VAR_0, VAR_5->at);\n\t\t\tr_cons_printf (\"  0x%\"VAR_8\": %s\\n\", VAR_5->at, VAR_7? VAR_7: \"?\");\n\n\t\t\tVAR_4 = VAR_5->addr;\n\t\t}\n\t}\n\n\tRVecAnalRef_free (VAR_1);\n}",
  "func_graph_path_before": "radareorg/radare2/ba919adb74ac368bf76b150a00347ded78b572dd/cmd_anal.c/vul/before/2.json",
  "func": "static void axfm(RCore *core) {\n\tRVecAnalRef *refs = r_anal_xrefs_get_from (core->anal, UT64_MAX);\n\tif (refs && !RVecAnalRef_empty (refs)) {\n\t\tRVecAnalRef_sort (refs, compare_ref);\n\n\t\tut64 last_addr = UT64_MAX;\n\t\tRAnalRef *ref;\n\t\tR_VEC_FOREACH (refs, ref) {\n\t\t\tconst bool is_first = ref->addr != last_addr;\n\t\t\tconst char *name;\n\t\t\tif (is_first) {\n\t\t\t\tname = axtm_name (core, ref->addr);\n\t\t\t\tr_cons_printf (\"0x%\"PFMT64x\": %s\\n\", ref->addr, name? name: \"?\");\n\t\t\t}\n\n\t\t\tname = axtm_name (core, ref->at);\n\t\t\tr_cons_printf (\"  0x%\"PFMT64x\": %s\\n\", ref->at, name? name: \"?\");\n\n\t\t\tlast_addr = ref->addr;\n\t\t}\n\t}\n\tRVecAnalRef_free (refs);\n}",
  "abstract_func": "static void axfm(RCore *VAR_0) {\n\tRVecAnalRef *VAR_1 = r_anal_xrefs_get_from (VAR_0->anal, VAR_2);\n\tif (VAR_1 && !RVecAnalRef_empty (VAR_1)) {\n\t\tRVecAnalRef_sort (VAR_1, VAR_3);\n\n\t\tut64 VAR_4 = VAR_2;\n\t\tRAnalRef *VAR_5;\n\t\tR_VEC_FOREACH (VAR_1, VAR_5) {\n\t\t\tconst bool VAR_6 = VAR_5->addr != VAR_4;\n\t\t\tconst char *VAR_7;\n\t\t\tif (VAR_6) {\n\t\t\t\tVAR_7 = axtm_name (VAR_0, VAR_5->addr);\n\t\t\t\tr_cons_printf (\"0x%\"VAR_8\": %s\\n\", VAR_5->addr, VAR_7? VAR_7: \"?\");\n\t\t\t}\n\n\t\t\tVAR_7 = axtm_name (VAR_0, VAR_5->at);\n\t\t\tr_cons_printf (\"  0x%\"VAR_8\": %s\\n\", VAR_5->at, VAR_7? VAR_7: \"?\");\n\n\t\t\tVAR_4 = VAR_5->addr;\n\t\t}\n\t}\n\tRVecAnalRef_free (VAR_1);\n}",
  "func_graph_path": "radareorg/radare2/ba919adb74ac368bf76b150a00347ded78b572dd/cmd_anal.c/vul/after/2.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -19,6 +19,5 @@\n \t\t\tlast_addr = ref->addr;\n \t\t}\n \t}\n-\n \tRVecAnalRef_free (refs);\n }",
  "diff_line_info": {
    "deleted_lines": [
      ""
    ],
    "added_lines": []
  },
  "is_vul": true,
  "pr_url": "https://github.com/radareorg/radare2/pull/22154",
  "description": {
    "pr_info": {
      "title": "Fix 1byte heap oobread in the brainfuck disassembler",
      "number": 22154
    },
    "comment": [
      "* https://huntr.dev/bounties/06e2484c-d6f1-4497-af67-26549be9fffd/\r\n* Kudos to @7resp4ss for reporting\r\n\r\n<!--\r\nRead https://github.com/radareorg/radare2/blob/master/DEVELOPERS.md\r\n* PR title must be capitalized, concise and use ##tags\r\n* If the PR is fixing a ticket use 'Fix #1234 - ..' in the commit message\r\n* Follow the coding style, add tests and documentation if necessary\r\n-->\r\n\r\n- [ ] Mark this if you consider it ready to merge\r\n- [ ] I've added tests (optional)\r\n- [ ] I wrote some lines in the [book](https://github.com/radareorg/radare2book) (optional)\r\n\r\n**Description**\r\n\r\n<!-- explain your changes if necessary -->\r\n\r\n**Copilot**\r\n\r\n<!--\r\ncopilot:all\r\n-->\r\n"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix\n\nConfidence Score: 0.95",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "\n\n**Final Output:**\nAnalysis: The commit addresses a heap out-of-bounds read, a security issue, by modifying memory handling to prevent unauthorized access.\n\nFinal Classification: Security Vulnerability Fix\n\nConfidence Score: 0.95"
}