{
  "cve_id": "CVE-2016-9839",
  "cwe_ids": [
    "CWE-200"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:N/A:N",
  "cvss_is_v3": false,
  "repo_name": "MapServer",
  "commit_msg": "Don't return verbose OGR error messages to clients (#5356)",
  "commit_hash": "3d52307cf0033e3275975b668b7138ba1343f28d",
  "git_url": "https://github.com/MapServer/MapServer/commit/3d52307cf0033e3275975b668b7138ba1343f28d",
  "file_path": "mapogr.cpp",
  "func_name": "msOGRFileOpen",
  "func_before": "static msOGRFileInfo *\nmsOGRFileOpen(layerObj *layer, const char *connection )\n\n{\n  char *conn_decrypted = NULL;\n\n  msOGRInitialize();\n\n  /* ------------------------------------------------------------------\n   * Make sure any encrypted token in the connection string are decrypted\n   * ------------------------------------------------------------------ */\n  if (connection) {\n    conn_decrypted = msDecryptStringTokens(layer->map, connection);\n    if (conn_decrypted == NULL)\n      return NULL;  /* An error should already have been reported */\n  }\n\n  /* ------------------------------------------------------------------\n   * Parse connection string into dataset name, and layer name.\n   * ------------------------------------------------------------------ */\n  char *pszDSName = NULL, *pszLayerDef = NULL;\n\n  if( conn_decrypted == NULL ) {\n    /* we don't have anything */\n  } else if( layer->data != NULL ) {\n    pszDSName = CPLStrdup(conn_decrypted);\n    pszLayerDef = CPLStrdup(layer->data);\n  } else {\n    char **papszTokens = NULL;\n\n    papszTokens = CSLTokenizeStringComplex( conn_decrypted, \",\", TRUE, FALSE );\n\n    if( CSLCount(papszTokens) > 0 )\n      pszDSName = CPLStrdup( papszTokens[0] );\n    if( CSLCount(papszTokens) > 1 )\n      pszLayerDef = CPLStrdup( papszTokens[1] );\n\n    CSLDestroy(papszTokens);\n  }\n\n  /* Get rid of decrypted connection string. We'll use the original (not\n   * decrypted) string for debug and error messages in the rest of the code.\n   */\n  msFree(conn_decrypted);\n  conn_decrypted = NULL;\n\n  if( pszDSName == NULL ) {\n    msSetError(MS_OGRERR,\n               \"Error parsing OGR connection information in layer `%s'\",\n               \"msOGRFileOpen()\",\n               layer->name?layer->name:\"(null)\" );\n    return NULL;\n  }\n\n  if( pszLayerDef == NULL )\n    pszLayerDef = CPLStrdup(\"0\");\n\n  /* -------------------------------------------------------------------- */\n  /*      Can we get an existing connection for this layer?               */\n  /* -------------------------------------------------------------------- */\n  OGRDataSourceH hDS;\n\n  hDS = (OGRDataSourceH) msConnPoolRequest( layer );\n\n  /* -------------------------------------------------------------------- */\n  /*      If not, open now, and register this connection with the         */\n  /*      pool.                                                           */\n  /* -------------------------------------------------------------------- */\n  if( hDS == NULL ) {\n    char szPath[MS_MAXPATHLEN] = \"\";\n    const char *pszDSSelectedName = pszDSName;\n\n    if( layer->debug )\n      msDebug(\"msOGRFileOpen(%s)...\\n\", connection);\n\n    CPLErrorReset();\n    if (msTryBuildPath3(szPath, layer->map->mappath,\n                        layer->map->shapepath, pszDSName) != NULL ||\n        msTryBuildPath(szPath, layer->map->mappath, pszDSName) != NULL) {\n      /* Use relative path */\n      pszDSSelectedName = szPath;\n    }\n\n    if( layer->debug )\n      msDebug(\"OGROPen(%s)\\n\", pszDSSelectedName);\n\n    ACQUIRE_OGR_LOCK;\n    hDS = OGROpen( pszDSSelectedName, MS_FALSE, NULL );\n    RELEASE_OGR_LOCK;\n\n    if( hDS == NULL ) {\n      if( strlen(CPLGetLastErrorMsg()) == 0 )\n        msSetError(MS_OGRERR,\n                   \"Open failed for OGR connection in layer `%s'.  \"\n                   \"File not found or unsupported format.\",\n                   \"msOGRFileOpen()\",\n                   layer->name?layer->name:\"(null)\" );\n      else\n        msSetError(MS_OGRERR,\n                   \"Open failed for OGR connection in layer `%s'.\\n%s\\n\",\n                   \"msOGRFileOpen()\",\n                   layer->name?layer->name:\"(null)\",\n                   CPLGetLastErrorMsg() );\n      CPLFree( pszDSName );\n      CPLFree( pszLayerDef );\n      return NULL;\n    }\n\n    msConnPoolRegister( layer, hDS, msOGRCloseConnection );\n  }\n\n  CPLFree( pszDSName );\n  pszDSName = NULL;\n\n  /* ------------------------------------------------------------------\n   * Find the layer selected.\n   * ------------------------------------------------------------------ */\n\n  int   nLayerIndex = 0;\n  OGRLayerH     hLayer = NULL;\n\n  int  iLayer;\n\n  if( EQUALN(pszLayerDef,\"SELECT \",7) ) {\n    ACQUIRE_OGR_LOCK;\n    hLayer = OGR_DS_ExecuteSQL( hDS, pszLayerDef, NULL, NULL );\n    if( hLayer == NULL ) {\n      msSetError(MS_OGRERR,\n                 \"ExecuteSQL(%s) failed.\\n%s\",\n                 \"msOGRFileOpen()\",\n                 pszLayerDef, CPLGetLastErrorMsg() );\n      RELEASE_OGR_LOCK;\n      msConnPoolRelease( layer, hDS );\n      CPLFree( pszLayerDef );\n      return NULL;\n    }\n    RELEASE_OGR_LOCK;\n    nLayerIndex = -1;\n  }\n\n  for( iLayer = 0; hLayer == NULL && iLayer < OGR_DS_GetLayerCount(hDS); iLayer++ ) {\n    hLayer = OGR_DS_GetLayer( hDS, iLayer );\n    if( hLayer != NULL\n#if GDAL_VERSION_NUM >= 1800\n        && EQUAL(OGR_L_GetName(hLayer),pszLayerDef) )\n#else\n        && EQUAL(OGR_FD_GetName( OGR_L_GetLayerDefn(hLayer) ),pszLayerDef) )\n#endif\n    {\n      nLayerIndex = iLayer;\n      break;\n    } else\n      hLayer = NULL;\n  }\n\n  if( hLayer == NULL && (atoi(pszLayerDef) > 0 || EQUAL(pszLayerDef,\"0\")) ) {\n    nLayerIndex = atoi(pszLayerDef);\n    if( nLayerIndex <  OGR_DS_GetLayerCount(hDS) )\n      hLayer = OGR_DS_GetLayer( hDS, nLayerIndex );\n  }\n\n  if (hLayer == NULL) {\n    msSetError(MS_OGRERR, \"GetLayer(%s) failed for OGR connection `%s'.\",\n               \"msOGRFileOpen()\",\n               pszLayerDef, connection );\n    CPLFree( pszLayerDef );\n    msConnPoolRelease( layer, hDS );\n    return NULL;\n  }\n\n  /* ------------------------------------------------------------------\n   * OK... open succeded... alloc and fill msOGRFileInfo inside layer obj\n   * ------------------------------------------------------------------ */\n  msOGRFileInfo *psInfo =(msOGRFileInfo*)CPLCalloc(1,sizeof(msOGRFileInfo));\n\n  psInfo->pszFname = CPLStrdup(OGR_DS_GetName( hDS ));\n  psInfo->pszLayerDef = pszLayerDef;\n  psInfo->nLayerIndex = nLayerIndex;\n  psInfo->hDS = hDS;\n  psInfo->hLayer = hLayer;\n\n  psInfo->nTileId = 0;\n  psInfo->poCurTile = NULL;\n  psInfo->rect_is_defined = false;\n  psInfo->rect.minx = psInfo->rect.maxx = 0;\n  psInfo->rect.miny = psInfo->rect.maxy = 0;\n  psInfo->last_record_index_read = -1;\n  psInfo->dialect = NULL;\n\n    // GDAL 1.x API\n  OGRSFDriverH dr = OGR_DS_GetDriver(hDS);\n  const char *name = OGR_Dr_GetName(dr);\n  if (strcmp(name, \"SQLite\") == 0) {\n    bool have_spatialite = false;\n\n    CPLPushErrorHandler(CPLQuietErrorHandler);\n\n    // test for Spatialite support in driver\n    const char *test_spatialite = \"SELECT spatialite_version()\";\n    OGRLayerH l = OGR_DS_ExecuteSQL(hDS, test_spatialite, NULL, NULL);\n    if (l) {\n        OGR_DS_ReleaseResultSet(hDS, l);\n        have_spatialite = true;\n    }\n\n    // test for Spatialite enabled db\n    if (have_spatialite) {\n        have_spatialite = false;\n        const char *test_sql = \"select 1 from sqlite_master where name = 'geometry_columns' and sql LIKE '%spatial_index_enabled%'\";\n        OGRLayerH l = OGR_DS_ExecuteSQL(hDS, test_sql, NULL, NULL);\n        if (l) {\n            if (OGR_L_GetFeatureCount(l, TRUE) == 1)\n                have_spatialite = true;\n            OGR_DS_ReleaseResultSet(hDS, l);\n        }\n    }\n\n    CPLPopErrorHandler();\n\n    if (have_spatialite)\n        psInfo->dialect = \"Spatialite\";\n    else\n        msDebug(\"msOGRTranslateMsExpressionToOGRSQL: Native SQL not available, no Spatialite support and/or not a Spatialite enabled db\\n\");\n  } else if (strcmp(name, \"PostgreSQL\") == 0) {\n    psInfo->dialect = \"PostgreSQL\";\n    // todo: PostgreSQL not yet tested\n\n  } // todo: other dialects, for example OGR SQL\n\n\n  psInfo->pszSelect = NULL;\n  psInfo->pszSpatialFilterTableName = NULL;\n  psInfo->pszMainTableName = NULL;\n  psInfo->pszRowId = NULL;\n  psInfo->bIsOKForSQLCompose = true;\n\n  // In the case of a SQLite DB, check that we can identify the\n  // underlying table\n  if( psInfo->nLayerIndex == -1 &&\n      psInfo->dialect != NULL && EQUAL(psInfo->dialect, \"Spatialite\") )\n  {\n      psInfo->bIsOKForSQLCompose = false;\n\n      const char* from = strstr( psInfo->pszLayerDef, \" from \");\n      if( from == NULL )\n        from = strstr( psInfo->pszLayerDef, \" FROM \");\n      if( from )\n      {\n        const char* pszBeginningOfTable = from + strlen(\" FROM \");\n        const char* pszIter = pszBeginningOfTable;\n        while( *pszIter && *pszIter != ' ' )\n          pszIter ++;\n        if( strchr(pszIter, ',') == NULL &&\n            strstr(pszIter, \" where \") == NULL && strstr(pszIter, \" WHERE \") == NULL &&\n            strstr(pszIter, \" join \") == NULL && strstr(pszIter, \" JOIN \") == NULL &&\n            strstr(pszIter, \" order by \") == NULL && strstr(pszIter, \" ORDER BY \") == NULL)\n        {\n          psInfo->bIsOKForSQLCompose = true;\n          psInfo->pszMainTableName = msStrdup(pszBeginningOfTable);\n          psInfo->pszMainTableName[pszIter - pszBeginningOfTable] = '\\0';\n          psInfo->pszSpatialFilterTableName = msStrdup(psInfo->pszMainTableName);\n\n          char* pszRequest = NULL;\n          pszRequest = msStringConcatenate(pszRequest,\n              \"SELECT * FROM sqlite_master WHERE type = 'table' AND name = lower('\");\n          pszRequest = msStringConcatenate(pszRequest, psInfo->pszMainTableName);\n          pszRequest = msStringConcatenate(pszRequest, \"')\");\n          OGRLayerH hLayer = OGR_DS_ExecuteSQL( psInfo->hDS, pszRequest, NULL, NULL );\n          msFree(pszRequest);\n\n          if( hLayer )\n          {\n              OGRFeatureH hFeature = OGR_L_GetNextFeature(hLayer);\n              psInfo->bIsOKForSQLCompose = (hFeature != NULL);\n              if( hFeature )\n                OGR_F_Destroy(hFeature);\n              OGR_DS_ReleaseResultSet( psInfo->hDS, hLayer );\n          }\n          if( psInfo->bIsOKForSQLCompose )\n          {\n            psInfo->pszSelect = msStrdup(psInfo->pszLayerDef);\n          }\n          else\n          {\n            // Test if it is a spatial view\n            pszRequest = msStringConcatenate(NULL,\n              \"SELECT f_table_name, view_rowid FROM views_geometry_columns WHERE view_name = lower('\");\n            pszRequest = msStringConcatenate(pszRequest, psInfo->pszMainTableName);\n            pszRequest = msStringConcatenate(pszRequest, \"')\");\n            CPLPushErrorHandler(CPLQuietErrorHandler);\n            OGRLayerH hLayer = OGR_DS_ExecuteSQL( psInfo->hDS, pszRequest, NULL, NULL );\n            CPLPopErrorHandler();\n            msFree(pszRequest);\n\n            if( hLayer )\n            {\n                OGRFeatureH hFeature = OGR_L_GetNextFeature(hLayer);\n                psInfo->bIsOKForSQLCompose = (hFeature != NULL);\n                if( hFeature )\n                {\n                  psInfo->pszSelect = msStrdup(psInfo->pszLayerDef);\n                  msFree(psInfo->pszSpatialFilterTableName);\n                  psInfo->pszSpatialFilterTableName = msStrdup( OGR_F_GetFieldAsString( hFeature, 0 ) );\n                  psInfo->pszRowId = msStrdup( OGR_F_GetFieldAsString( hFeature, 1 ) );\n                  OGR_F_Destroy(hFeature);\n                }\n                OGR_DS_ReleaseResultSet( psInfo->hDS, hLayer );\n            }\n          }\n        }\n      }\n  }\n  else if( psInfo->dialect != NULL && EQUAL(psInfo->dialect, \"Spatialite\") )\n  {\n      psInfo->bIsOKForSQLCompose = false;\n\n      char* pszRequest = NULL;\n      pszRequest = msStringConcatenate(pszRequest,\n          \"SELECT * FROM sqlite_master WHERE type = 'table' AND name = lower('\");\n      pszRequest = msStringConcatenate(pszRequest, OGR_FD_GetName(OGR_L_GetLayerDefn(psInfo->hLayer)));\n      pszRequest = msStringConcatenate(pszRequest, \"')\");\n      OGRLayerH hLayer = OGR_DS_ExecuteSQL( psInfo->hDS, pszRequest, NULL, NULL );\n      msFree(pszRequest);\n\n      if( hLayer )\n      {\n          OGRFeatureH hFeature = OGR_L_GetNextFeature(hLayer);\n          psInfo->bIsOKForSQLCompose = (hFeature != NULL);\n          if( hFeature )\n            OGR_F_Destroy(hFeature);\n          OGR_DS_ReleaseResultSet( psInfo->hDS, hLayer );\n      }\n      if( psInfo->bIsOKForSQLCompose )\n      {\n        psInfo->pszMainTableName = msStrdup(OGR_FD_GetName(OGR_L_GetLayerDefn(psInfo->hLayer)));\n        psInfo->pszSpatialFilterTableName = msStrdup(psInfo->pszMainTableName);\n      }\n      else\n      {\n        // Test if it is a spatial view\n        pszRequest = msStringConcatenate(NULL,\n          \"SELECT f_table_name, view_rowid FROM views_geometry_columns WHERE view_name = lower('\");\n        pszRequest = msStringConcatenate(pszRequest, OGR_FD_GetName(OGR_L_GetLayerDefn(psInfo->hLayer)));\n        pszRequest = msStringConcatenate(pszRequest, \"')\");\n        CPLPushErrorHandler(CPLQuietErrorHandler);\n        OGRLayerH hLayer = OGR_DS_ExecuteSQL( psInfo->hDS, pszRequest, NULL, NULL );\n        CPLPopErrorHandler();\n        msFree(pszRequest);\n\n        if( hLayer )\n        {\n            OGRFeatureH hFeature = OGR_L_GetNextFeature(hLayer);\n            psInfo->bIsOKForSQLCompose = (hFeature != NULL);\n            if( hFeature )\n            {\n              psInfo->pszMainTableName = msStrdup(OGR_FD_GetName(OGR_L_GetLayerDefn(psInfo->hLayer)));\n              psInfo->pszSpatialFilterTableName = msStrdup( OGR_F_GetFieldAsString( hFeature, 0 ) );\n              psInfo->pszRowId = msStrdup( OGR_F_GetFieldAsString( hFeature, 1 ) );\n              OGR_F_Destroy(hFeature);\n            }\n            OGR_DS_ReleaseResultSet( psInfo->hDS, hLayer );\n        }\n      }\n  }\n\n  // in the case we cannot handle the native string, go back to the client\n  // side evaluation by unsetting it.\n  if( !psInfo->bIsOKForSQLCompose && psInfo->dialect != NULL )\n  {\n      msDebug(\"msOGRFileOpen(): Falling back to MapServer only evaluation\\n\");\n      psInfo->dialect = NULL;\n  }\n\n  psInfo->bPaging = (psInfo->dialect != NULL);\n\n  return psInfo;\n}",
  "abstract_func_before": "static msOGRFileInfo *\nmsOGRFileOpen(layerObj *VAR_0, const char *VAR_1 )\n\n{\n  char *VAR_2 = NULL;\n\n  msOGRInitialize();\n\n  /* COMMENT_0 */\n                                                                         \n                                                                          \n  if (VAR_1) {\n    VAR_2 = msDecryptStringTokens(VAR_0->map, VAR_1);\n    if (VAR_2 == NULL)\n      return NULL;  /* COMMENT_3 */\n  }\n\n  /* COMMENT_4 */\n                                                               \n                                                                          \n  char *VAR_3 = NULL, *VAR_4 = NULL;\n\n  if( VAR_2 == NULL ) {\n    /* COMMENT_7 */\n  } else if( VAR_0->data != NULL ) {\n    VAR_3 = CPLStrdup(VAR_2);\n    VAR_4 = CPLStrdup(VAR_0->data);\n  } else {\n    char **VAR_5 = NULL;\n\n    VAR_5 = CSLTokenizeStringComplex( VAR_2, \",\", TRUE, FALSE );\n\n    if( CSLCount(VAR_5) > 0 )\n      VAR_3 = CPLStrdup( VAR_5[0] );\n    if( CSLCount(VAR_5) > 1 )\n      VAR_4 = CPLStrdup( VAR_5[1] );\n\n    CSLDestroy(VAR_5);\n  }\n\n  /* COMMENT_8 */\n                                                                            \n     \n  msFree(VAR_2);\n  VAR_2 = NULL;\n\n  if( VAR_3 == NULL ) {\n    msSetError(VAR_6,\n               \"Error parsing OGR connection information in layer `%s'\",\n               \"msOGRFileOpen()\",\n               VAR_0->name?VAR_0->name:\"(null)\" );\n    return NULL;\n  }\n\n  if( VAR_4 == NULL )\n    VAR_4 = CPLStrdup(\"0\");\n\n  /* COMMENT_11 */\n  /* COMMENT_12 */\n  /* COMMENT_11 */\n  OGRDataSourceH VAR_7;\n\n  VAR_7 = (OGRDataSourceH) msConnPoolRequest( VAR_0 );\n\n  /* COMMENT_11 */\n  /* COMMENT_13 */\n  /* COMMENT_14 */\n  /* COMMENT_11 */\n  if( VAR_7 == NULL ) {\n    char VAR_8[VAR_9] = \"\";\n    const char *VAR_10 = VAR_3;\n\n    if( VAR_0->debug )\n      msDebug(\"msOGRFileOpen(%s)...\\n\", VAR_1);\n\n    CPLErrorReset();\n    if (msTryBuildPath3(VAR_8, VAR_0->map->mappath,\n                        VAR_0->map->shapepath, VAR_3) != NULL ||\n        msTryBuildPath(VAR_8, VAR_0->map->mappath, VAR_3) != NULL) {\n      /* COMMENT_15 */\n      VAR_10 = VAR_8;\n    }\n\n    if( VAR_0->debug )\n      msDebug(\"OGROPen(%s)\\n\", VAR_10);\n\n    VAR_11;\n    VAR_7 = OGROpen( VAR_10, VAR_12, NULL );\n    VAR_13;\n\n    if( VAR_7 == NULL ) {\n      if( strlen(CPLGetLastErrorMsg()) == 0 )\n        msSetError(VAR_6,\n                   \"Open failed for OGR connection in layer `%s'.  \"\n                   \"File not found or unsupported format.\",\n                   \"msOGRFileOpen()\",\n                   VAR_0->name?VAR_0->name:\"(null)\" );\n      else\n        msSetError(VAR_6,\n                   \"Open failed for OGR connection in layer `%s'.\\n%s\\n\",\n                   \"msOGRFileOpen()\",\n                   VAR_0->name?VAR_0->name:\"(null)\",\n                   CPLGetLastErrorMsg() );\n      CPLFree( VAR_3 );\n      CPLFree( VAR_4 );\n      return NULL;\n    }\n\n    msConnPoolRegister( VAR_0, VAR_7, VAR_14 );\n  }\n\n  CPLFree( VAR_3 );\n  VAR_3 = NULL;\n\n  /* COMMENT_16 */\n                             \n                                                                          \n\n  int   VAR_15 = 0;\n  OGRLayerH     VAR_16 = NULL;\n\n  int  VAR_17;\n\n  if( EQUALN(VAR_4,\"SELECT \",7) ) {\n    VAR_11;\n    VAR_16 = OGR_DS_ExecuteSQL( VAR_7, VAR_4, NULL, NULL );\n    if( VAR_16 == NULL ) {\n      msSetError(VAR_6,\n                 \"ExecuteSQL(%s) failed.\\n%s\",\n                 \"msOGRFileOpen()\",\n                 VAR_4, CPLGetLastErrorMsg() );\n      VAR_13;\n      msConnPoolRelease( VAR_0, VAR_7 );\n      CPLFree( VAR_4 );\n      return NULL;\n    }\n    VAR_13;\n    VAR_15 = -1;\n  }\n\n  for( VAR_17 = 0; VAR_16 == NULL && VAR_17 < OGR_DS_GetLayerCount(VAR_7); VAR_17++ ) {\n    VAR_16 = OGR_DS_GetLayer( VAR_7, VAR_17 );\n    if( VAR_16 != NULL\n#if VAR_18 >= 1800\n        && EQUAL(OGR_L_GetName(VAR_16),VAR_4) )\n#else\n        && EQUAL(OGR_FD_GetName( OGR_L_GetLayerDefn(VAR_16) ),VAR_4) )\n#endif\n    {\n      VAR_15 = VAR_17;\n      break;\n    } else\n      VAR_16 = NULL;\n  }\n\n  if( VAR_16 == NULL && (atoi(VAR_4) > 0 || EQUAL(VAR_4,\"0\")) ) {\n    VAR_15 = atoi(VAR_4);\n    if( VAR_15 <  OGR_DS_GetLayerCount(VAR_7) )\n      VAR_16 = OGR_DS_GetLayer( VAR_7, VAR_15 );\n  }\n\n  if (VAR_16 == NULL) {\n    msSetError(VAR_6, \"GetLayer(%s) failed for OGR connection `%s'.\",\n               \"msOGRFileOpen()\",\n               VAR_4, VAR_1 );\n    CPLFree( VAR_4 );\n    msConnPoolRelease( VAR_0, VAR_7 );\n    return NULL;\n  }\n\n  /* COMMENT_19 */\n                                                                         \n                                                                          \n  msOGRFileInfo *VAR_19 =(msOGRFileInfo*)CPLCalloc(1,sizeof(msOGRFileInfo));\n\n  VAR_19->pszFname = CPLStrdup(OGR_DS_GetName( VAR_7 ));\n  VAR_19->pszLayerDef = VAR_4;\n  VAR_19->nLayerIndex = VAR_15;\n  VAR_19->hDS = VAR_7;\n  VAR_19->hLayer = VAR_16;\n\n  VAR_19->nTileId = 0;\n  VAR_19->poCurTile = NULL;\n  VAR_19->rect_is_defined = false;\n  VAR_19->rect.minx = VAR_19->rect.maxx = 0;\n  VAR_19->rect.miny = VAR_19->rect.maxy = 0;\n  VAR_19->last_record_index_read = -1;\n  VAR_19->dialect = NULL;\n\n    /* COMMENT_22 */\n  OGRSFDriverH VAR_20 = OGR_DS_GetDriver(VAR_7);\n  const char *VAR_21 = OGR_Dr_GetName(VAR_20);\n  if (strcmp(VAR_21, \"SQLite\") == 0) {\n    bool VAR_22 = false;\n\n    CPLPushErrorHandler(VAR_23);\n\n    /* COMMENT_23 */\n    const char *VAR_24 = \"SELECT spatialite_version()\";\n    OGRLayerH VAR_25 = OGR_DS_ExecuteSQL(VAR_7, VAR_24, NULL, NULL);\n    if (VAR_25) {\n        OGR_DS_ReleaseResultSet(VAR_7, VAR_25);\n        VAR_22 = true;\n    }\n\n    /* COMMENT_24 */\n    if (VAR_22) {\n        VAR_22 = false;\n        const char *VAR_26 = \"select 1 from sqlite_master where name = 'geometry_columns' and sql LIKE '%spatial_index_enabled%'\";\n        OGRLayerH VAR_25 = OGR_DS_ExecuteSQL(VAR_7, VAR_26, NULL, NULL);\n        if (VAR_25) {\n            if (OGR_L_GetFeatureCount(VAR_25, TRUE) == 1)\n                VAR_22 = true;\n            OGR_DS_ReleaseResultSet(VAR_7, VAR_25);\n        }\n    }\n\n    CPLPopErrorHandler();\n\n    if (VAR_22)\n        VAR_19->dialect = \"Spatialite\";\n    else\n        msDebug(\"msOGRTranslateMsExpressionToOGRSQL: Native SQL not available, no Spatialite support and/or not a Spatialite enabled db\\n\");\n  } else if (strcmp(VAR_21, \"PostgreSQL\") == 0) {\n    VAR_19->dialect = \"PostgreSQL\";\n    /* COMMENT_25 */\n\n  } /* COMMENT_26 */\n\n\n  VAR_19->pszSelect = NULL;\n  VAR_19->pszSpatialFilterTableName = NULL;\n  VAR_19->pszMainTableName = NULL;\n  VAR_19->pszRowId = NULL;\n  VAR_19->bIsOKForSQLCompose = true;\n\n  /* COMMENT_27 */\n  /* COMMENT_28 */\n  if( VAR_19->nLayerIndex == -1 &&\n      VAR_19->dialect != NULL && EQUAL(VAR_19->dialect, \"Spatialite\") )\n  {\n      VAR_19->bIsOKForSQLCompose = false;\n\n      const char* VAR_27 = strstr( VAR_19->pszLayerDef, \" from \");\n      if( VAR_27 == NULL )\n        VAR_27 = strstr( VAR_19->pszLayerDef, \" FROM \");\n      if( VAR_27 )\n      {\n        const char* VAR_28 = VAR_27 + strlen(\" FROM \");\n        const char* VAR_29 = VAR_28;\n        while( *VAR_29 && *VAR_29 != ' ' )\n          VAR_29 ++;\n        if( strchr(VAR_29, ',') == NULL &&\n            strstr(VAR_29, \" where \") == NULL && strstr(VAR_29, \" WHERE \") == NULL &&\n            strstr(VAR_29, \" join \") == NULL && strstr(VAR_29, \" JOIN \") == NULL &&\n            strstr(VAR_29, \" order by \") == NULL && strstr(VAR_29, \" ORDER BY \") == NULL)\n        {\n          VAR_19->bIsOKForSQLCompose = true;\n          VAR_19->pszMainTableName = msStrdup(VAR_28);\n          VAR_19->pszMainTableName[VAR_29 - VAR_28] = '\\0';\n          VAR_19->pszSpatialFilterTableName = msStrdup(VAR_19->pszMainTableName);\n\n          char* VAR_30 = NULL;\n          VAR_30 = msStringConcatenate(VAR_30,\n              \"SELECT * FROM sqlite_master WHERE type = 'table' AND name = lower('\");\n          VAR_30 = msStringConcatenate(VAR_30, VAR_19->pszMainTableName);\n          VAR_30 = msStringConcatenate(VAR_30, \"')\");\n          OGRLayerH VAR_16 = OGR_DS_ExecuteSQL( VAR_19->hDS, VAR_30, NULL, NULL );\n          msFree(VAR_30);\n\n          if( VAR_16 )\n          {\n              OGRFeatureH VAR_31 = OGR_L_GetNextFeature(VAR_16);\n              VAR_19->bIsOKForSQLCompose = (VAR_31 != NULL);\n              if( VAR_31 )\n                OGR_F_Destroy(VAR_31);\n              OGR_DS_ReleaseResultSet( VAR_19->hDS, VAR_16 );\n          }\n          if( VAR_19->bIsOKForSQLCompose )\n          {\n            VAR_19->pszSelect = msStrdup(VAR_19->pszLayerDef);\n          }\n          else\n          {\n            /* COMMENT_29 */\n            VAR_30 = msStringConcatenate(NULL,\n              \"SELECT f_table_name, view_rowid FROM views_geometry_columns WHERE view_name = lower('\");\n            VAR_30 = msStringConcatenate(VAR_30, VAR_19->pszMainTableName);\n            VAR_30 = msStringConcatenate(VAR_30, \"')\");\n            CPLPushErrorHandler(VAR_23);\n            OGRLayerH VAR_16 = OGR_DS_ExecuteSQL( VAR_19->hDS, VAR_30, NULL, NULL );\n            CPLPopErrorHandler();\n            msFree(VAR_30);\n\n            if( VAR_16 )\n            {\n                OGRFeatureH VAR_31 = OGR_L_GetNextFeature(VAR_16);\n                VAR_19->bIsOKForSQLCompose = (VAR_31 != NULL);\n                if( VAR_31 )\n                {\n                  VAR_19->pszSelect = msStrdup(VAR_19->pszLayerDef);\n                  msFree(VAR_19->pszSpatialFilterTableName);\n                  VAR_19->pszSpatialFilterTableName = msStrdup( OGR_F_GetFieldAsString( VAR_31, 0 ) );\n                  VAR_19->pszRowId = msStrdup( OGR_F_GetFieldAsString( VAR_31, 1 ) );\n                  OGR_F_Destroy(VAR_31);\n                }\n                OGR_DS_ReleaseResultSet( VAR_19->hDS, VAR_16 );\n            }\n          }\n        }\n      }\n  }\n  else if( VAR_19->dialect != NULL && EQUAL(VAR_19->dialect, \"Spatialite\") )\n  {\n      VAR_19->bIsOKForSQLCompose = false;\n\n      char* VAR_30 = NULL;\n      VAR_30 = msStringConcatenate(VAR_30,\n          \"SELECT * FROM sqlite_master WHERE type = 'table' AND name = lower('\");\n      VAR_30 = msStringConcatenate(VAR_30, OGR_FD_GetName(OGR_L_GetLayerDefn(VAR_19->hLayer)));\n      VAR_30 = msStringConcatenate(VAR_30, \"')\");\n      OGRLayerH VAR_16 = OGR_DS_ExecuteSQL( VAR_19->hDS, VAR_30, NULL, NULL );\n      msFree(VAR_30);\n\n      if( VAR_16 )\n      {\n          OGRFeatureH VAR_31 = OGR_L_GetNextFeature(VAR_16);\n          VAR_19->bIsOKForSQLCompose = (VAR_31 != NULL);\n          if( VAR_31 )\n            OGR_F_Destroy(VAR_31);\n          OGR_DS_ReleaseResultSet( VAR_19->hDS, VAR_16 );\n      }\n      if( VAR_19->bIsOKForSQLCompose )\n      {\n        VAR_19->pszMainTableName = msStrdup(OGR_FD_GetName(OGR_L_GetLayerDefn(VAR_19->hLayer)));\n        VAR_19->pszSpatialFilterTableName = msStrdup(VAR_19->pszMainTableName);\n      }\n      else\n      {\n        /* COMMENT_29 */\n        VAR_30 = msStringConcatenate(NULL,\n          \"SELECT f_table_name, view_rowid FROM views_geometry_columns WHERE view_name = lower('\");\n        VAR_30 = msStringConcatenate(VAR_30, OGR_FD_GetName(OGR_L_GetLayerDefn(VAR_19->hLayer)));\n        VAR_30 = msStringConcatenate(VAR_30, \"')\");\n        CPLPushErrorHandler(VAR_23);\n        OGRLayerH VAR_16 = OGR_DS_ExecuteSQL( VAR_19->hDS, VAR_30, NULL, NULL );\n        CPLPopErrorHandler();\n        msFree(VAR_30);\n\n        if( VAR_16 )\n        {\n            OGRFeatureH VAR_31 = OGR_L_GetNextFeature(VAR_16);\n            VAR_19->bIsOKForSQLCompose = (VAR_31 != NULL);\n            if( VAR_31 )\n            {\n              VAR_19->pszMainTableName = msStrdup(OGR_FD_GetName(OGR_L_GetLayerDefn(VAR_19->hLayer)));\n              VAR_19->pszSpatialFilterTableName = msStrdup( OGR_F_GetFieldAsString( VAR_31, 0 ) );\n              VAR_19->pszRowId = msStrdup( OGR_F_GetFieldAsString( VAR_31, 1 ) );\n              OGR_F_Destroy(VAR_31);\n            }\n            OGR_DS_ReleaseResultSet( VAR_19->hDS, VAR_16 );\n        }\n      }\n  }\n\n  /* COMMENT_30 */\n  /* COMMENT_31 */\n  if( !VAR_19->bIsOKForSQLCompose && VAR_19->dialect != NULL )\n  {\n      msDebug(\"msOGRFileOpen(): Falling back to MapServer only evaluation\\n\");\n      VAR_19->dialect = NULL;\n  }\n\n  VAR_19->bPaging = (VAR_19->dialect != NULL);\n\n  return VAR_19;\n}",
  "func_graph_path_before": "MapServer/3d52307cf0033e3275975b668b7138ba1343f28d/mapogr.cpp/vul/before/1.json",
  "func": "static msOGRFileInfo *\nmsOGRFileOpen(layerObj *layer, const char *connection )\n\n{\n  char *conn_decrypted = NULL;\n\n  msOGRInitialize();\n\n  /* ------------------------------------------------------------------\n   * Make sure any encrypted token in the connection string are decrypted\n   * ------------------------------------------------------------------ */\n  if (connection) {\n    conn_decrypted = msDecryptStringTokens(layer->map, connection);\n    if (conn_decrypted == NULL)\n      return NULL;  /* An error should already have been reported */\n  }\n\n  /* ------------------------------------------------------------------\n   * Parse connection string into dataset name, and layer name.\n   * ------------------------------------------------------------------ */\n  char *pszDSName = NULL, *pszLayerDef = NULL;\n\n  if( conn_decrypted == NULL ) {\n    /* we don't have anything */\n  } else if( layer->data != NULL ) {\n    pszDSName = CPLStrdup(conn_decrypted);\n    pszLayerDef = CPLStrdup(layer->data);\n  } else {\n    char **papszTokens = NULL;\n\n    papszTokens = CSLTokenizeStringComplex( conn_decrypted, \",\", TRUE, FALSE );\n\n    if( CSLCount(papszTokens) > 0 )\n      pszDSName = CPLStrdup( papszTokens[0] );\n    if( CSLCount(papszTokens) > 1 )\n      pszLayerDef = CPLStrdup( papszTokens[1] );\n\n    CSLDestroy(papszTokens);\n  }\n\n  /* Get rid of decrypted connection string. We'll use the original (not\n   * decrypted) string for debug and error messages in the rest of the code.\n   */\n  msFree(conn_decrypted);\n  conn_decrypted = NULL;\n\n  if( pszDSName == NULL ) {\n    msSetError(MS_OGRERR,\n               \"Error parsing OGR connection information in layer `%s'\",\n               \"msOGRFileOpen()\",\n               layer->name?layer->name:\"(null)\" );\n    return NULL;\n  }\n\n  if( pszLayerDef == NULL )\n    pszLayerDef = CPLStrdup(\"0\");\n\n  /* -------------------------------------------------------------------- */\n  /*      Can we get an existing connection for this layer?               */\n  /* -------------------------------------------------------------------- */\n  OGRDataSourceH hDS;\n\n  hDS = (OGRDataSourceH) msConnPoolRequest( layer );\n\n  /* -------------------------------------------------------------------- */\n  /*      If not, open now, and register this connection with the         */\n  /*      pool.                                                           */\n  /* -------------------------------------------------------------------- */\n  if( hDS == NULL ) {\n    char szPath[MS_MAXPATHLEN] = \"\";\n    const char *pszDSSelectedName = pszDSName;\n\n    if( layer->debug )\n      msDebug(\"msOGRFileOpen(%s)...\\n\", connection);\n\n    CPLErrorReset();\n    if (msTryBuildPath3(szPath, layer->map->mappath,\n                        layer->map->shapepath, pszDSName) != NULL ||\n        msTryBuildPath(szPath, layer->map->mappath, pszDSName) != NULL) {\n      /* Use relative path */\n      pszDSSelectedName = szPath;\n    }\n\n    if( layer->debug )\n      msDebug(\"OGROPen(%s)\\n\", pszDSSelectedName);\n\n    ACQUIRE_OGR_LOCK;\n    hDS = OGROpen( pszDSSelectedName, MS_FALSE, NULL );\n    RELEASE_OGR_LOCK;\n\n    if( hDS == NULL ) {\n      msSetError(MS_OGRERR,\n                   \"Open failed for OGR connection in layer `%s'.  \"\n                   \"File not found or unsupported format. Check server logs.\",\n                   \"msOGRFileOpen()\",\n                   layer->name?layer->name:\"(null)\" );\n      if( strlen(CPLGetLastErrorMsg()) == 0 )\n        msDebug(\"Open failed for OGR connection in layer `%s'.\\n%s\\n\",\n                   layer->name?layer->name:\"(null)\",\n                   CPLGetLastErrorMsg() );\n      CPLFree( pszDSName );\n      CPLFree( pszLayerDef );\n      return NULL;\n    }\n\n    msConnPoolRegister( layer, hDS, msOGRCloseConnection );\n  }\n\n  CPLFree( pszDSName );\n  pszDSName = NULL;\n\n  /* ------------------------------------------------------------------\n   * Find the layer selected.\n   * ------------------------------------------------------------------ */\n\n  int   nLayerIndex = 0;\n  OGRLayerH     hLayer = NULL;\n\n  int  iLayer;\n\n  if( EQUALN(pszLayerDef,\"SELECT \",7) ) {\n    ACQUIRE_OGR_LOCK;\n    hLayer = OGR_DS_ExecuteSQL( hDS, pszLayerDef, NULL, NULL );\n    if( hLayer == NULL ) {\n      msSetError(MS_OGRERR,\n                 \"ExecuteSQL() failed. Check server logs.\",\n                 \"msOGRFileOpen()\");\n      if( strlen(CPLGetLastErrorMsg()) == 0 )\n        msDebug(\"ExecuteSQL(%s) failed.\\n%s\\n\",\n                pszLayerDef, CPLGetLastErrorMsg() );\n      RELEASE_OGR_LOCK;\n      msConnPoolRelease( layer, hDS );\n      CPLFree( pszLayerDef );\n      return NULL;\n    }\n    RELEASE_OGR_LOCK;\n    nLayerIndex = -1;\n  }\n\n  for( iLayer = 0; hLayer == NULL && iLayer < OGR_DS_GetLayerCount(hDS); iLayer++ ) {\n    hLayer = OGR_DS_GetLayer( hDS, iLayer );\n    if( hLayer != NULL\n#if GDAL_VERSION_NUM >= 1800\n        && EQUAL(OGR_L_GetName(hLayer),pszLayerDef) )\n#else\n        && EQUAL(OGR_FD_GetName( OGR_L_GetLayerDefn(hLayer) ),pszLayerDef) )\n#endif\n    {\n      nLayerIndex = iLayer;\n      break;\n    } else\n      hLayer = NULL;\n  }\n\n  if( hLayer == NULL && (atoi(pszLayerDef) > 0 || EQUAL(pszLayerDef,\"0\")) ) {\n    nLayerIndex = atoi(pszLayerDef);\n    if( nLayerIndex <  OGR_DS_GetLayerCount(hDS) )\n      hLayer = OGR_DS_GetLayer( hDS, nLayerIndex );\n  }\n\n  if (hLayer == NULL) {\n    msSetError(MS_OGRERR, \"GetLayer(%s) failed for OGR connection. Check logs.\",\n               \"msOGRFileOpen()\",\n               pszLayerDef);\n    msDebug(\"GetLayer(%s) failed for OGR connection `%s'.\\n\",\n            pszLayerDef, connection );\n    CPLFree( pszLayerDef );\n    msConnPoolRelease( layer, hDS );\n    return NULL;\n  }\n\n  /* ------------------------------------------------------------------\n   * OK... open succeded... alloc and fill msOGRFileInfo inside layer obj\n   * ------------------------------------------------------------------ */\n  msOGRFileInfo *psInfo =(msOGRFileInfo*)CPLCalloc(1,sizeof(msOGRFileInfo));\n\n  psInfo->pszFname = CPLStrdup(OGR_DS_GetName( hDS ));\n  psInfo->pszLayerDef = pszLayerDef;\n  psInfo->nLayerIndex = nLayerIndex;\n  psInfo->hDS = hDS;\n  psInfo->hLayer = hLayer;\n\n  psInfo->nTileId = 0;\n  psInfo->poCurTile = NULL;\n  psInfo->rect_is_defined = false;\n  psInfo->rect.minx = psInfo->rect.maxx = 0;\n  psInfo->rect.miny = psInfo->rect.maxy = 0;\n  psInfo->last_record_index_read = -1;\n  psInfo->dialect = NULL;\n\n    // GDAL 1.x API\n  OGRSFDriverH dr = OGR_DS_GetDriver(hDS);\n  const char *name = OGR_Dr_GetName(dr);\n  if (strcmp(name, \"SQLite\") == 0) {\n    bool have_spatialite = false;\n\n    CPLPushErrorHandler(CPLQuietErrorHandler);\n\n    // test for Spatialite support in driver\n    const char *test_spatialite = \"SELECT spatialite_version()\";\n    OGRLayerH l = OGR_DS_ExecuteSQL(hDS, test_spatialite, NULL, NULL);\n    if (l) {\n        OGR_DS_ReleaseResultSet(hDS, l);\n        have_spatialite = true;\n    }\n\n    // test for Spatialite enabled db\n    if (have_spatialite) {\n        have_spatialite = false;\n        const char *test_sql = \"select 1 from sqlite_master where name = 'geometry_columns' and sql LIKE '%spatial_index_enabled%'\";\n        OGRLayerH l = OGR_DS_ExecuteSQL(hDS, test_sql, NULL, NULL);\n        if (l) {\n            if (OGR_L_GetFeatureCount(l, TRUE) == 1)\n                have_spatialite = true;\n            OGR_DS_ReleaseResultSet(hDS, l);\n        }\n    }\n\n    CPLPopErrorHandler();\n\n    if (have_spatialite)\n        psInfo->dialect = \"Spatialite\";\n    else\n        msDebug(\"msOGRTranslateMsExpressionToOGRSQL: Native SQL not available, no Spatialite support and/or not a Spatialite enabled db\\n\");\n  } else if (strcmp(name, \"PostgreSQL\") == 0) {\n    psInfo->dialect = \"PostgreSQL\";\n    // todo: PostgreSQL not yet tested\n\n  } // todo: other dialects, for example OGR SQL\n\n\n  psInfo->pszSelect = NULL;\n  psInfo->pszSpatialFilterTableName = NULL;\n  psInfo->pszMainTableName = NULL;\n  psInfo->pszRowId = NULL;\n  psInfo->bIsOKForSQLCompose = true;\n\n  // In the case of a SQLite DB, check that we can identify the\n  // underlying table\n  if( psInfo->nLayerIndex == -1 &&\n      psInfo->dialect != NULL && EQUAL(psInfo->dialect, \"Spatialite\") )\n  {\n      psInfo->bIsOKForSQLCompose = false;\n\n      const char* from = strstr( psInfo->pszLayerDef, \" from \");\n      if( from == NULL )\n        from = strstr( psInfo->pszLayerDef, \" FROM \");\n      if( from )\n      {\n        const char* pszBeginningOfTable = from + strlen(\" FROM \");\n        const char* pszIter = pszBeginningOfTable;\n        while( *pszIter && *pszIter != ' ' )\n          pszIter ++;\n        if( strchr(pszIter, ',') == NULL &&\n            strstr(pszIter, \" where \") == NULL && strstr(pszIter, \" WHERE \") == NULL &&\n            strstr(pszIter, \" join \") == NULL && strstr(pszIter, \" JOIN \") == NULL &&\n            strstr(pszIter, \" order by \") == NULL && strstr(pszIter, \" ORDER BY \") == NULL)\n        {\n          psInfo->bIsOKForSQLCompose = true;\n          psInfo->pszMainTableName = msStrdup(pszBeginningOfTable);\n          psInfo->pszMainTableName[pszIter - pszBeginningOfTable] = '\\0';\n          psInfo->pszSpatialFilterTableName = msStrdup(psInfo->pszMainTableName);\n\n          char* pszRequest = NULL;\n          pszRequest = msStringConcatenate(pszRequest,\n              \"SELECT * FROM sqlite_master WHERE type = 'table' AND name = lower('\");\n          pszRequest = msStringConcatenate(pszRequest, psInfo->pszMainTableName);\n          pszRequest = msStringConcatenate(pszRequest, \"')\");\n          OGRLayerH hLayer = OGR_DS_ExecuteSQL( psInfo->hDS, pszRequest, NULL, NULL );\n          msFree(pszRequest);\n\n          if( hLayer )\n          {\n              OGRFeatureH hFeature = OGR_L_GetNextFeature(hLayer);\n              psInfo->bIsOKForSQLCompose = (hFeature != NULL);\n              if( hFeature )\n                OGR_F_Destroy(hFeature);\n              OGR_DS_ReleaseResultSet( psInfo->hDS, hLayer );\n          }\n          if( psInfo->bIsOKForSQLCompose )\n          {\n            psInfo->pszSelect = msStrdup(psInfo->pszLayerDef);\n          }\n          else\n          {\n            // Test if it is a spatial view\n            pszRequest = msStringConcatenate(NULL,\n              \"SELECT f_table_name, view_rowid FROM views_geometry_columns WHERE view_name = lower('\");\n            pszRequest = msStringConcatenate(pszRequest, psInfo->pszMainTableName);\n            pszRequest = msStringConcatenate(pszRequest, \"')\");\n            CPLPushErrorHandler(CPLQuietErrorHandler);\n            OGRLayerH hLayer = OGR_DS_ExecuteSQL( psInfo->hDS, pszRequest, NULL, NULL );\n            CPLPopErrorHandler();\n            msFree(pszRequest);\n\n            if( hLayer )\n            {\n                OGRFeatureH hFeature = OGR_L_GetNextFeature(hLayer);\n                psInfo->bIsOKForSQLCompose = (hFeature != NULL);\n                if( hFeature )\n                {\n                  psInfo->pszSelect = msStrdup(psInfo->pszLayerDef);\n                  msFree(psInfo->pszSpatialFilterTableName);\n                  psInfo->pszSpatialFilterTableName = msStrdup( OGR_F_GetFieldAsString( hFeature, 0 ) );\n                  psInfo->pszRowId = msStrdup( OGR_F_GetFieldAsString( hFeature, 1 ) );\n                  OGR_F_Destroy(hFeature);\n                }\n                OGR_DS_ReleaseResultSet( psInfo->hDS, hLayer );\n            }\n          }\n        }\n      }\n  }\n  else if( psInfo->dialect != NULL && EQUAL(psInfo->dialect, \"Spatialite\") )\n  {\n      psInfo->bIsOKForSQLCompose = false;\n\n      char* pszRequest = NULL;\n      pszRequest = msStringConcatenate(pszRequest,\n          \"SELECT * FROM sqlite_master WHERE type = 'table' AND name = lower('\");\n      pszRequest = msStringConcatenate(pszRequest, OGR_FD_GetName(OGR_L_GetLayerDefn(psInfo->hLayer)));\n      pszRequest = msStringConcatenate(pszRequest, \"')\");\n      OGRLayerH hLayer = OGR_DS_ExecuteSQL( psInfo->hDS, pszRequest, NULL, NULL );\n      msFree(pszRequest);\n\n      if( hLayer )\n      {\n          OGRFeatureH hFeature = OGR_L_GetNextFeature(hLayer);\n          psInfo->bIsOKForSQLCompose = (hFeature != NULL);\n          if( hFeature )\n            OGR_F_Destroy(hFeature);\n          OGR_DS_ReleaseResultSet( psInfo->hDS, hLayer );\n      }\n      if( psInfo->bIsOKForSQLCompose )\n      {\n        psInfo->pszMainTableName = msStrdup(OGR_FD_GetName(OGR_L_GetLayerDefn(psInfo->hLayer)));\n        psInfo->pszSpatialFilterTableName = msStrdup(psInfo->pszMainTableName);\n      }\n      else\n      {\n        // Test if it is a spatial view\n        pszRequest = msStringConcatenate(NULL,\n          \"SELECT f_table_name, view_rowid FROM views_geometry_columns WHERE view_name = lower('\");\n        pszRequest = msStringConcatenate(pszRequest, OGR_FD_GetName(OGR_L_GetLayerDefn(psInfo->hLayer)));\n        pszRequest = msStringConcatenate(pszRequest, \"')\");\n        CPLPushErrorHandler(CPLQuietErrorHandler);\n        OGRLayerH hLayer = OGR_DS_ExecuteSQL( psInfo->hDS, pszRequest, NULL, NULL );\n        CPLPopErrorHandler();\n        msFree(pszRequest);\n\n        if( hLayer )\n        {\n            OGRFeatureH hFeature = OGR_L_GetNextFeature(hLayer);\n            psInfo->bIsOKForSQLCompose = (hFeature != NULL);\n            if( hFeature )\n            {\n              psInfo->pszMainTableName = msStrdup(OGR_FD_GetName(OGR_L_GetLayerDefn(psInfo->hLayer)));\n              psInfo->pszSpatialFilterTableName = msStrdup( OGR_F_GetFieldAsString( hFeature, 0 ) );\n              psInfo->pszRowId = msStrdup( OGR_F_GetFieldAsString( hFeature, 1 ) );\n              OGR_F_Destroy(hFeature);\n            }\n            OGR_DS_ReleaseResultSet( psInfo->hDS, hLayer );\n        }\n      }\n  }\n\n  // in the case we cannot handle the native string, go back to the client\n  // side evaluation by unsetting it.\n  if( !psInfo->bIsOKForSQLCompose && psInfo->dialect != NULL )\n  {\n      msDebug(\"msOGRFileOpen(): Falling back to MapServer only evaluation\\n\");\n      psInfo->dialect = NULL;\n  }\n\n  psInfo->bPaging = (psInfo->dialect != NULL);\n\n  return psInfo;\n}",
  "abstract_func": "static msOGRFileInfo *\nmsOGRFileOpen(layerObj *VAR_0, const char *VAR_1 )\n\n{\n  char *VAR_2 = NULL;\n\n  msOGRInitialize();\n\n  /* COMMENT_0 */\n                                                                         \n                                                                          \n  if (VAR_1) {\n    VAR_2 = msDecryptStringTokens(VAR_0->map, VAR_1);\n    if (VAR_2 == NULL)\n      return NULL;  /* COMMENT_3 */\n  }\n\n  /* COMMENT_4 */\n                                                               \n                                                                          \n  char *VAR_3 = NULL, *VAR_4 = NULL;\n\n  if( VAR_2 == NULL ) {\n    /* COMMENT_7 */\n  } else if( VAR_0->data != NULL ) {\n    VAR_3 = CPLStrdup(VAR_2);\n    VAR_4 = CPLStrdup(VAR_0->data);\n  } else {\n    char **VAR_5 = NULL;\n\n    VAR_5 = CSLTokenizeStringComplex( VAR_2, \",\", TRUE, FALSE );\n\n    if( CSLCount(VAR_5) > 0 )\n      VAR_3 = CPLStrdup( VAR_5[0] );\n    if( CSLCount(VAR_5) > 1 )\n      VAR_4 = CPLStrdup( VAR_5[1] );\n\n    CSLDestroy(VAR_5);\n  }\n\n  /* COMMENT_8 */\n                                                                            \n     \n  msFree(VAR_2);\n  VAR_2 = NULL;\n\n  if( VAR_3 == NULL ) {\n    msSetError(VAR_6,\n               \"Error parsing OGR connection information in layer `%s'\",\n               \"msOGRFileOpen()\",\n               VAR_0->name?VAR_0->name:\"(null)\" );\n    return NULL;\n  }\n\n  if( VAR_4 == NULL )\n    VAR_4 = CPLStrdup(\"0\");\n\n  /* COMMENT_11 */\n  /* COMMENT_12 */\n  /* COMMENT_11 */\n  OGRDataSourceH VAR_7;\n\n  VAR_7 = (OGRDataSourceH) msConnPoolRequest( VAR_0 );\n\n  /* COMMENT_11 */\n  /* COMMENT_13 */\n  /* COMMENT_14 */\n  /* COMMENT_11 */\n  if( VAR_7 == NULL ) {\n    char VAR_8[VAR_9] = \"\";\n    const char *VAR_10 = VAR_3;\n\n    if( VAR_0->debug )\n      msDebug(\"msOGRFileOpen(%s)...\\n\", VAR_1);\n\n    CPLErrorReset();\n    if (msTryBuildPath3(VAR_8, VAR_0->map->mappath,\n                        VAR_0->map->shapepath, VAR_3) != NULL ||\n        msTryBuildPath(VAR_8, VAR_0->map->mappath, VAR_3) != NULL) {\n      /* COMMENT_15 */\n      VAR_10 = VAR_8;\n    }\n\n    if( VAR_0->debug )\n      msDebug(\"OGROPen(%s)\\n\", VAR_10);\n\n    VAR_11;\n    VAR_7 = OGROpen( VAR_10, VAR_12, NULL );\n    VAR_13;\n\n    if( VAR_7 == NULL ) {\n      msSetError(VAR_6,\n                   \"Open failed for OGR connection in layer `%s'.  \"\n                   \"File not found or unsupported format. Check server logs.\",\n                   \"msOGRFileOpen()\",\n                   VAR_0->name?VAR_0->name:\"(null)\" );\n      if( strlen(CPLGetLastErrorMsg()) == 0 )\n        msDebug(\"Open failed for OGR connection in layer `%s'.\\n%s\\n\",\n                   VAR_0->name?VAR_0->name:\"(null)\",\n                   CPLGetLastErrorMsg() );\n      CPLFree( VAR_3 );\n      CPLFree( VAR_4 );\n      return NULL;\n    }\n\n    msConnPoolRegister( VAR_0, VAR_7, VAR_14 );\n  }\n\n  CPLFree( VAR_3 );\n  VAR_3 = NULL;\n\n  /* COMMENT_16 */\n                             \n                                                                          \n\n  int   VAR_15 = 0;\n  OGRLayerH     VAR_16 = NULL;\n\n  int  VAR_17;\n\n  if( EQUALN(VAR_4,\"SELECT \",7) ) {\n    VAR_11;\n    VAR_16 = OGR_DS_ExecuteSQL( VAR_7, VAR_4, NULL, NULL );\n    if( VAR_16 == NULL ) {\n      msSetError(VAR_6,\n                 \"ExecuteSQL() failed. Check server logs.\",\n                 \"msOGRFileOpen()\");\n      if( strlen(CPLGetLastErrorMsg()) == 0 )\n        msDebug(\"ExecuteSQL(%s) failed.\\n%s\\n\",\n                VAR_4, CPLGetLastErrorMsg() );\n      VAR_13;\n      msConnPoolRelease( VAR_0, VAR_7 );\n      CPLFree( VAR_4 );\n      return NULL;\n    }\n    VAR_13;\n    VAR_15 = -1;\n  }\n\n  for( VAR_17 = 0; VAR_16 == NULL && VAR_17 < OGR_DS_GetLayerCount(VAR_7); VAR_17++ ) {\n    VAR_16 = OGR_DS_GetLayer( VAR_7, VAR_17 );\n    if( VAR_16 != NULL\n#if VAR_18 >= 1800\n        && EQUAL(OGR_L_GetName(VAR_16),VAR_4) )\n#else\n        && EQUAL(OGR_FD_GetName( OGR_L_GetLayerDefn(VAR_16) ),VAR_4) )\n#endif\n    {\n      VAR_15 = VAR_17;\n      break;\n    } else\n      VAR_16 = NULL;\n  }\n\n  if( VAR_16 == NULL && (atoi(VAR_4) > 0 || EQUAL(VAR_4,\"0\")) ) {\n    VAR_15 = atoi(VAR_4);\n    if( VAR_15 <  OGR_DS_GetLayerCount(VAR_7) )\n      VAR_16 = OGR_DS_GetLayer( VAR_7, VAR_15 );\n  }\n\n  if (VAR_16 == NULL) {\n    msSetError(VAR_6, \"GetLayer(%s) failed for OGR connection. Check logs.\",\n               \"msOGRFileOpen()\",\n               VAR_4);\n    msDebug(\"GetLayer(%s) failed for OGR connection `%s'.\\n\",\n            VAR_4, VAR_1 );\n    CPLFree( VAR_4 );\n    msConnPoolRelease( VAR_0, VAR_7 );\n    return NULL;\n  }\n\n  /* COMMENT_19 */\n                                                                         \n                                                                          \n  msOGRFileInfo *VAR_19 =(msOGRFileInfo*)CPLCalloc(1,sizeof(msOGRFileInfo));\n\n  VAR_19->pszFname = CPLStrdup(OGR_DS_GetName( VAR_7 ));\n  VAR_19->pszLayerDef = VAR_4;\n  VAR_19->nLayerIndex = VAR_15;\n  VAR_19->hDS = VAR_7;\n  VAR_19->hLayer = VAR_16;\n\n  VAR_19->nTileId = 0;\n  VAR_19->poCurTile = NULL;\n  VAR_19->rect_is_defined = false;\n  VAR_19->rect.minx = VAR_19->rect.maxx = 0;\n  VAR_19->rect.miny = VAR_19->rect.maxy = 0;\n  VAR_19->last_record_index_read = -1;\n  VAR_19->dialect = NULL;\n\n    /* COMMENT_22 */\n  OGRSFDriverH VAR_20 = OGR_DS_GetDriver(VAR_7);\n  const char *VAR_21 = OGR_Dr_GetName(VAR_20);\n  if (strcmp(VAR_21, \"SQLite\") == 0) {\n    bool VAR_22 = false;\n\n    CPLPushErrorHandler(VAR_23);\n\n    /* COMMENT_23 */\n    const char *VAR_24 = \"SELECT spatialite_version()\";\n    OGRLayerH VAR_25 = OGR_DS_ExecuteSQL(VAR_7, VAR_24, NULL, NULL);\n    if (VAR_25) {\n        OGR_DS_ReleaseResultSet(VAR_7, VAR_25);\n        VAR_22 = true;\n    }\n\n    /* COMMENT_24 */\n    if (VAR_22) {\n        VAR_22 = false;\n        const char *VAR_26 = \"select 1 from sqlite_master where name = 'geometry_columns' and sql LIKE '%spatial_index_enabled%'\";\n        OGRLayerH VAR_25 = OGR_DS_ExecuteSQL(VAR_7, VAR_26, NULL, NULL);\n        if (VAR_25) {\n            if (OGR_L_GetFeatureCount(VAR_25, TRUE) == 1)\n                VAR_22 = true;\n            OGR_DS_ReleaseResultSet(VAR_7, VAR_25);\n        }\n    }\n\n    CPLPopErrorHandler();\n\n    if (VAR_22)\n        VAR_19->dialect = \"Spatialite\";\n    else\n        msDebug(\"msOGRTranslateMsExpressionToOGRSQL: Native SQL not available, no Spatialite support and/or not a Spatialite enabled db\\n\");\n  } else if (strcmp(VAR_21, \"PostgreSQL\") == 0) {\n    VAR_19->dialect = \"PostgreSQL\";\n    /* COMMENT_25 */\n\n  } /* COMMENT_26 */\n\n\n  VAR_19->pszSelect = NULL;\n  VAR_19->pszSpatialFilterTableName = NULL;\n  VAR_19->pszMainTableName = NULL;\n  VAR_19->pszRowId = NULL;\n  VAR_19->bIsOKForSQLCompose = true;\n\n  /* COMMENT_27 */\n  /* COMMENT_28 */\n  if( VAR_19->nLayerIndex == -1 &&\n      VAR_19->dialect != NULL && EQUAL(VAR_19->dialect, \"Spatialite\") )\n  {\n      VAR_19->bIsOKForSQLCompose = false;\n\n      const char* VAR_27 = strstr( VAR_19->pszLayerDef, \" from \");\n      if( VAR_27 == NULL )\n        VAR_27 = strstr( VAR_19->pszLayerDef, \" FROM \");\n      if( VAR_27 )\n      {\n        const char* VAR_28 = VAR_27 + strlen(\" FROM \");\n        const char* VAR_29 = VAR_28;\n        while( *VAR_29 && *VAR_29 != ' ' )\n          VAR_29 ++;\n        if( strchr(VAR_29, ',') == NULL &&\n            strstr(VAR_29, \" where \") == NULL && strstr(VAR_29, \" WHERE \") == NULL &&\n            strstr(VAR_29, \" join \") == NULL && strstr(VAR_29, \" JOIN \") == NULL &&\n            strstr(VAR_29, \" order by \") == NULL && strstr(VAR_29, \" ORDER BY \") == NULL)\n        {\n          VAR_19->bIsOKForSQLCompose = true;\n          VAR_19->pszMainTableName = msStrdup(VAR_28);\n          VAR_19->pszMainTableName[VAR_29 - VAR_28] = '\\0';\n          VAR_19->pszSpatialFilterTableName = msStrdup(VAR_19->pszMainTableName);\n\n          char* VAR_30 = NULL;\n          VAR_30 = msStringConcatenate(VAR_30,\n              \"SELECT * FROM sqlite_master WHERE type = 'table' AND name = lower('\");\n          VAR_30 = msStringConcatenate(VAR_30, VAR_19->pszMainTableName);\n          VAR_30 = msStringConcatenate(VAR_30, \"')\");\n          OGRLayerH VAR_16 = OGR_DS_ExecuteSQL( VAR_19->hDS, VAR_30, NULL, NULL );\n          msFree(VAR_30);\n\n          if( VAR_16 )\n          {\n              OGRFeatureH VAR_31 = OGR_L_GetNextFeature(VAR_16);\n              VAR_19->bIsOKForSQLCompose = (VAR_31 != NULL);\n              if( VAR_31 )\n                OGR_F_Destroy(VAR_31);\n              OGR_DS_ReleaseResultSet( VAR_19->hDS, VAR_16 );\n          }\n          if( VAR_19->bIsOKForSQLCompose )\n          {\n            VAR_19->pszSelect = msStrdup(VAR_19->pszLayerDef);\n          }\n          else\n          {\n            /* COMMENT_29 */\n            VAR_30 = msStringConcatenate(NULL,\n              \"SELECT f_table_name, view_rowid FROM views_geometry_columns WHERE view_name = lower('\");\n            VAR_30 = msStringConcatenate(VAR_30, VAR_19->pszMainTableName);\n            VAR_30 = msStringConcatenate(VAR_30, \"')\");\n            CPLPushErrorHandler(VAR_23);\n            OGRLayerH VAR_16 = OGR_DS_ExecuteSQL( VAR_19->hDS, VAR_30, NULL, NULL );\n            CPLPopErrorHandler();\n            msFree(VAR_30);\n\n            if( VAR_16 )\n            {\n                OGRFeatureH VAR_31 = OGR_L_GetNextFeature(VAR_16);\n                VAR_19->bIsOKForSQLCompose = (VAR_31 != NULL);\n                if( VAR_31 )\n                {\n                  VAR_19->pszSelect = msStrdup(VAR_19->pszLayerDef);\n                  msFree(VAR_19->pszSpatialFilterTableName);\n                  VAR_19->pszSpatialFilterTableName = msStrdup( OGR_F_GetFieldAsString( VAR_31, 0 ) );\n                  VAR_19->pszRowId = msStrdup( OGR_F_GetFieldAsString( VAR_31, 1 ) );\n                  OGR_F_Destroy(VAR_31);\n                }\n                OGR_DS_ReleaseResultSet( VAR_19->hDS, VAR_16 );\n            }\n          }\n        }\n      }\n  }\n  else if( VAR_19->dialect != NULL && EQUAL(VAR_19->dialect, \"Spatialite\") )\n  {\n      VAR_19->bIsOKForSQLCompose = false;\n\n      char* VAR_30 = NULL;\n      VAR_30 = msStringConcatenate(VAR_30,\n          \"SELECT * FROM sqlite_master WHERE type = 'table' AND name = lower('\");\n      VAR_30 = msStringConcatenate(VAR_30, OGR_FD_GetName(OGR_L_GetLayerDefn(VAR_19->hLayer)));\n      VAR_30 = msStringConcatenate(VAR_30, \"')\");\n      OGRLayerH VAR_16 = OGR_DS_ExecuteSQL( VAR_19->hDS, VAR_30, NULL, NULL );\n      msFree(VAR_30);\n\n      if( VAR_16 )\n      {\n          OGRFeatureH VAR_31 = OGR_L_GetNextFeature(VAR_16);\n          VAR_19->bIsOKForSQLCompose = (VAR_31 != NULL);\n          if( VAR_31 )\n            OGR_F_Destroy(VAR_31);\n          OGR_DS_ReleaseResultSet( VAR_19->hDS, VAR_16 );\n      }\n      if( VAR_19->bIsOKForSQLCompose )\n      {\n        VAR_19->pszMainTableName = msStrdup(OGR_FD_GetName(OGR_L_GetLayerDefn(VAR_19->hLayer)));\n        VAR_19->pszSpatialFilterTableName = msStrdup(VAR_19->pszMainTableName);\n      }\n      else\n      {\n        /* COMMENT_29 */\n        VAR_30 = msStringConcatenate(NULL,\n          \"SELECT f_table_name, view_rowid FROM views_geometry_columns WHERE view_name = lower('\");\n        VAR_30 = msStringConcatenate(VAR_30, OGR_FD_GetName(OGR_L_GetLayerDefn(VAR_19->hLayer)));\n        VAR_30 = msStringConcatenate(VAR_30, \"')\");\n        CPLPushErrorHandler(VAR_23);\n        OGRLayerH VAR_16 = OGR_DS_ExecuteSQL( VAR_19->hDS, VAR_30, NULL, NULL );\n        CPLPopErrorHandler();\n        msFree(VAR_30);\n\n        if( VAR_16 )\n        {\n            OGRFeatureH VAR_31 = OGR_L_GetNextFeature(VAR_16);\n            VAR_19->bIsOKForSQLCompose = (VAR_31 != NULL);\n            if( VAR_31 )\n            {\n              VAR_19->pszMainTableName = msStrdup(OGR_FD_GetName(OGR_L_GetLayerDefn(VAR_19->hLayer)));\n              VAR_19->pszSpatialFilterTableName = msStrdup( OGR_F_GetFieldAsString( VAR_31, 0 ) );\n              VAR_19->pszRowId = msStrdup( OGR_F_GetFieldAsString( VAR_31, 1 ) );\n              OGR_F_Destroy(VAR_31);\n            }\n            OGR_DS_ReleaseResultSet( VAR_19->hDS, VAR_16 );\n        }\n      }\n  }\n\n  /* COMMENT_30 */\n  /* COMMENT_31 */\n  if( !VAR_19->bIsOKForSQLCompose && VAR_19->dialect != NULL )\n  {\n      msDebug(\"msOGRFileOpen(): Falling back to MapServer only evaluation\\n\");\n      VAR_19->dialect = NULL;\n  }\n\n  VAR_19->bPaging = (VAR_19->dialect != NULL);\n\n  return VAR_19;\n}",
  "func_graph_path": "MapServer/3d52307cf0033e3275975b668b7138ba1343f28d/mapogr.cpp/vul/after/1.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -89,16 +89,13 @@\n     RELEASE_OGR_LOCK;\n \n     if( hDS == NULL ) {\n-      if( strlen(CPLGetLastErrorMsg()) == 0 )\n-        msSetError(MS_OGRERR,\n+      msSetError(MS_OGRERR,\n                    \"Open failed for OGR connection in layer `%s'.  \"\n-                   \"File not found or unsupported format.\",\n+                   \"File not found or unsupported format. Check server logs.\",\n                    \"msOGRFileOpen()\",\n                    layer->name?layer->name:\"(null)\" );\n-      else\n-        msSetError(MS_OGRERR,\n-                   \"Open failed for OGR connection in layer `%s'.\\n%s\\n\",\n-                   \"msOGRFileOpen()\",\n+      if( strlen(CPLGetLastErrorMsg()) == 0 )\n+        msDebug(\"Open failed for OGR connection in layer `%s'.\\n%s\\n\",\n                    layer->name?layer->name:\"(null)\",\n                    CPLGetLastErrorMsg() );\n       CPLFree( pszDSName );\n@@ -126,9 +123,11 @@\n     hLayer = OGR_DS_ExecuteSQL( hDS, pszLayerDef, NULL, NULL );\n     if( hLayer == NULL ) {\n       msSetError(MS_OGRERR,\n-                 \"ExecuteSQL(%s) failed.\\n%s\",\n-                 \"msOGRFileOpen()\",\n-                 pszLayerDef, CPLGetLastErrorMsg() );\n+                 \"ExecuteSQL() failed. Check server logs.\",\n+                 \"msOGRFileOpen()\");\n+      if( strlen(CPLGetLastErrorMsg()) == 0 )\n+        msDebug(\"ExecuteSQL(%s) failed.\\n%s\\n\",\n+                pszLayerDef, CPLGetLastErrorMsg() );\n       RELEASE_OGR_LOCK;\n       msConnPoolRelease( layer, hDS );\n       CPLFree( pszLayerDef );\n@@ -160,9 +159,11 @@\n   }\n \n   if (hLayer == NULL) {\n-    msSetError(MS_OGRERR, \"GetLayer(%s) failed for OGR connection `%s'.\",\n+    msSetError(MS_OGRERR, \"GetLayer(%s) failed for OGR connection. Check logs.\",\n                \"msOGRFileOpen()\",\n-               pszLayerDef, connection );\n+               pszLayerDef);\n+    msDebug(\"GetLayer(%s) failed for OGR connection `%s'.\\n\",\n+            pszLayerDef, connection );\n     CPLFree( pszLayerDef );\n     msConnPoolRelease( layer, hDS );\n     return NULL;",
  "diff_line_info": {
    "deleted_lines": [
      "      if( strlen(CPLGetLastErrorMsg()) == 0 )",
      "        msSetError(MS_OGRERR,",
      "                   \"File not found or unsupported format.\",",
      "      else",
      "        msSetError(MS_OGRERR,",
      "                   \"Open failed for OGR connection in layer `%s'.\\n%s\\n\",",
      "                   \"msOGRFileOpen()\",",
      "                 \"ExecuteSQL(%s) failed.\\n%s\",",
      "                 \"msOGRFileOpen()\",",
      "                 pszLayerDef, CPLGetLastErrorMsg() );",
      "    msSetError(MS_OGRERR, \"GetLayer(%s) failed for OGR connection `%s'.\",",
      "               pszLayerDef, connection );"
    ],
    "added_lines": [
      "      msSetError(MS_OGRERR,",
      "                   \"File not found or unsupported format. Check server logs.\",",
      "      if( strlen(CPLGetLastErrorMsg()) == 0 )",
      "        msDebug(\"Open failed for OGR connection in layer `%s'.\\n%s\\n\",",
      "                 \"ExecuteSQL() failed. Check server logs.\",",
      "                 \"msOGRFileOpen()\");",
      "      if( strlen(CPLGetLastErrorMsg()) == 0 )",
      "        msDebug(\"ExecuteSQL(%s) failed.\\n%s\\n\",",
      "                pszLayerDef, CPLGetLastErrorMsg() );",
      "    msSetError(MS_OGRERR, \"GetLayer(%s) failed for OGR connection. Check logs.\",",
      "               pszLayerDef);",
      "    msDebug(\"GetLayer(%s) failed for OGR connection `%s'.\\n\",",
      "            pszLayerDef, connection );"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/MapServer/MapServer/pull/5356",
  "description": {
    "pr_info": {
      "title": "OGR error messages too verbose",
      "number": 5356
    },
    "comment": [
      "Error messages created by the OGR driver may leak too much information. See http://gis.stackexchange.com/questions/219426/mapserver-hide-ogr-exception\r\nSame issue as #4928 but for OGR"
    ]
  },
  "Bug Filter": "** Security Vulnerability Fix  \n**Confidence Score:** 0.9",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "\n\nThe patch modifies error handling to prevent verbose messages from being returned to clients, which addresses a security concern by reducing information exposure.\n\n**Final Classification:** Security Vulnerability Fix  \n**Confidence Score:** 0.9"
}