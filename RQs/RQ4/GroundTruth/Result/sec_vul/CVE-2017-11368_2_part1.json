{
  "cve_id": "CVE-2017-11368",
  "cwe_ids": [
    "CWE-617"
  ],
  "cvss_vector": "AV:N/AC:L/Au:S/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "krb5",
  "commit_msg": "Prevent KDC unset status assertion failures\n\nAssign status values if S4U2Self padata fails to decode, if an\nS4U2Proxy request uses invalid KDC options, or if an S4U2Proxy request\nuses an evidence ticket which does not match the canonicalized request\nserver principal name.  Reported by Samuel Cabrero.\n\nIf a status value is not assigned during KDC processing, default to\n\"UNKNOWN_REASON\" rather than failing an assertion.  This change will\nprevent future denial of service bugs due to similar mistakes, and\nwill allow us to omit assigning status values for unlikely errors such\nas small memory allocation failures.\n\nCVE-2017-11368:\n\nIn MIT krb5 1.7 and later, an authenticated attacker can cause an\nassertion failure in krb5kdc by sending an invalid S4U2Self or\nS4U2Proxy request.\n\n  CVSSv3 Vector: AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H/E:H/RL:O/RC:C\n\nticket: 8599 (new)\ntarget_version: 1.15-next\ntarget_version: 1.14-next\ntags: pullup",
  "commit_hash": "ffb35baac6981f9e8914f8f3bffd37f284b85970",
  "git_url": "https://github.com/krb5/krb5/commit/ffb35baac6981f9e8914f8f3bffd37f284b85970",
  "file_path": "src/kdc/kdc_util.c",
  "func_name": "kdc_process_s4u2proxy_req",
  "func_before": "krb5_error_code\nkdc_process_s4u2proxy_req(kdc_realm_t *kdc_active_realm,\n                          krb5_kdc_req *request,\n                          const krb5_enc_tkt_part *t2enc,\n                          const krb5_db_entry *server,\n                          krb5_const_principal server_princ,\n                          krb5_const_principal proxy_princ,\n                          const char **status)\n{\n    krb5_error_code errcode;\n\n    /*\n     * Constrained delegation is mutually exclusive with renew/forward/etc.\n     * We can assert from this check that the header ticket was a TGT, as\n     * that is validated previously in validate_tgs_request().\n     */\n    if (request->kdc_options & (NON_TGT_OPTION | KDC_OPT_ENC_TKT_IN_SKEY)) {\n        return KRB5KDC_ERR_BADOPTION;\n    }\n\n    /* Ensure that evidence ticket server matches TGT client */\n    if (!krb5_principal_compare(kdc_context,\n                                server->princ, /* after canon */\n                                server_princ)) {\n        return KRB5KDC_ERR_SERVER_NOMATCH;\n    }\n\n    if (!isflagset(t2enc->flags, TKT_FLG_FORWARDABLE)) {\n        *status = \"EVIDENCE_TKT_NOT_FORWARDABLE\";\n        return KRB5_TKT_NOT_FORWARDABLE;\n    }\n\n    /* Backend policy check */\n    errcode = check_allowed_to_delegate_to(kdc_context,\n                                           t2enc->client,\n                                           server,\n                                           proxy_princ);\n    if (errcode) {\n        *status = \"NOT_ALLOWED_TO_DELEGATE\";\n        return errcode;\n    }\n\n    return 0;\n}",
  "abstract_func_before": "krb5_error_code\nkdc_process_s4u2proxy_req(kdc_realm_t *VAR_0,\n                          krb5_kdc_req *VAR_1,\n                          const krb5_enc_tkt_part *VAR_2,\n                          const krb5_db_entry *VAR_3,\n                          krb5_const_principal VAR_4,\n                          krb5_const_principal VAR_5,\n                          const char **VAR_6)\n{\n    krb5_error_code VAR_7;\n\n    /* COMMENT_0 */\n                                                                           \n                                                                         \n                                                              \n       \n    if (VAR_1->kdc_options & (VAR_8 | VAR_9)) {\n        return VAR_10;\n    }\n\n    /* COMMENT_5 */\n    if (!krb5_principal_compare(VAR_11,\n                                VAR_3->princ, /* COMMENT_6 */\n                                VAR_4)) {\n        return VAR_12;\n    }\n\n    if (!isflagset(VAR_2->flags, VAR_13)) {\n        *VAR_6 = \"EVIDENCE_TKT_NOT_FORWARDABLE\";\n        return VAR_14;\n    }\n\n    /* COMMENT_7 */\n    VAR_7 = check_allowed_to_delegate_to(VAR_11,\n                                           VAR_2->client,\n                                           VAR_3,\n                                           VAR_5);\n    if (VAR_7) {\n        *VAR_6 = \"NOT_ALLOWED_TO_DELEGATE\";\n        return VAR_7;\n    }\n\n    return 0;\n}",
  "func_graph_path_before": "krb5/ffb35baac6981f9e8914f8f3bffd37f284b85970/kdc_util.c/vul/before/1.json",
  "func": "krb5_error_code\nkdc_process_s4u2proxy_req(kdc_realm_t *kdc_active_realm,\n                          krb5_kdc_req *request,\n                          const krb5_enc_tkt_part *t2enc,\n                          const krb5_db_entry *server,\n                          krb5_const_principal server_princ,\n                          krb5_const_principal proxy_princ,\n                          const char **status)\n{\n    krb5_error_code errcode;\n\n    /*\n     * Constrained delegation is mutually exclusive with renew/forward/etc.\n     * We can assert from this check that the header ticket was a TGT, as\n     * that is validated previously in validate_tgs_request().\n     */\n    if (request->kdc_options & (NON_TGT_OPTION | KDC_OPT_ENC_TKT_IN_SKEY)) {\n        *status = \"INVALID_S4U2PROXY_OPTIONS\";\n        return KRB5KDC_ERR_BADOPTION;\n    }\n\n    /* Ensure that evidence ticket server matches TGT client */\n    if (!krb5_principal_compare(kdc_context,\n                                server->princ, /* after canon */\n                                server_princ)) {\n        *status = \"EVIDENCE_TICKET_MISMATCH\";\n        return KRB5KDC_ERR_SERVER_NOMATCH;\n    }\n\n    if (!isflagset(t2enc->flags, TKT_FLG_FORWARDABLE)) {\n        *status = \"EVIDENCE_TKT_NOT_FORWARDABLE\";\n        return KRB5_TKT_NOT_FORWARDABLE;\n    }\n\n    /* Backend policy check */\n    errcode = check_allowed_to_delegate_to(kdc_context,\n                                           t2enc->client,\n                                           server,\n                                           proxy_princ);\n    if (errcode) {\n        *status = \"NOT_ALLOWED_TO_DELEGATE\";\n        return errcode;\n    }\n\n    return 0;\n}",
  "abstract_func": "krb5_error_code\nkdc_process_s4u2proxy_req(kdc_realm_t *VAR_0,\n                          krb5_kdc_req *VAR_1,\n                          const krb5_enc_tkt_part *VAR_2,\n                          const krb5_db_entry *VAR_3,\n                          krb5_const_principal VAR_4,\n                          krb5_const_principal VAR_5,\n                          const char **VAR_6)\n{\n    krb5_error_code VAR_7;\n\n    /* COMMENT_0 */\n                                                                           \n                                                                         \n                                                              \n       \n    if (VAR_1->kdc_options & (VAR_8 | VAR_9)) {\n        *VAR_6 = \"INVALID_S4U2PROXY_OPTIONS\";\n        return VAR_10;\n    }\n\n    /* COMMENT_5 */\n    if (!krb5_principal_compare(VAR_11,\n                                VAR_3->princ, /* COMMENT_6 */\n                                VAR_4)) {\n        *VAR_6 = \"EVIDENCE_TICKET_MISMATCH\";\n        return VAR_12;\n    }\n\n    if (!isflagset(VAR_2->flags, VAR_13)) {\n        *VAR_6 = \"EVIDENCE_TKT_NOT_FORWARDABLE\";\n        return VAR_14;\n    }\n\n    /* COMMENT_7 */\n    VAR_7 = check_allowed_to_delegate_to(VAR_11,\n                                           VAR_2->client,\n                                           VAR_3,\n                                           VAR_5);\n    if (VAR_7) {\n        *VAR_6 = \"NOT_ALLOWED_TO_DELEGATE\";\n        return VAR_7;\n    }\n\n    return 0;\n}",
  "func_graph_path": "krb5/ffb35baac6981f9e8914f8f3bffd37f284b85970/kdc_util.c/vul/after/1.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -15,6 +15,7 @@\n      * that is validated previously in validate_tgs_request().\n      */\n     if (request->kdc_options & (NON_TGT_OPTION | KDC_OPT_ENC_TKT_IN_SKEY)) {\n+        *status = \"INVALID_S4U2PROXY_OPTIONS\";\n         return KRB5KDC_ERR_BADOPTION;\n     }\n \n@@ -22,6 +23,7 @@\n     if (!krb5_principal_compare(kdc_context,\n                                 server->princ, /* after canon */\n                                 server_princ)) {\n+        *status = \"EVIDENCE_TICKET_MISMATCH\";\n         return KRB5KDC_ERR_SERVER_NOMATCH;\n     }\n ",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "        *status = \"INVALID_S4U2PROXY_OPTIONS\";",
      "        *status = \"EVIDENCE_TICKET_MISMATCH\";"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/krb5/krb5/pull/678",
  "description": {
    "pr_info": {
      "title": "Prevent KDC unset status assertion failures",
      "number": 678
    },
    "comment": [
      "Assign status values if S4U2Self padata fails to decode, if an\r\nS4U2Proxy request uses invalid KDC options, or if an S4U2Proxy request\r\nuses an evidence ticket which does not match the canonicalized request\r\nserver principal name.  Reported by Samuel Cabrero.\r\n    \r\nIf a status value is not assigned during KDC processing, default to\r\n\"UNKNOWN_REASON\" rather than failing an assertion.  This change will\r\nprevent future denial of service bugs due to similar mistakes, and\r\nwill allow us to omit assigning status values for unlikely errors such\r\nas small memory allocation failures.\r\n\r\n[There is a second non-backport commit to remove status assignments for error conditions which don't look practically reachable to me.]"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix\nConfidence Score: 0.95",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "\n\nThe patch addresses a security vulnerability by preventing assertion failures in the KDC due to invalid requests, thus mitigating a denial of service attack.\n\n**Final Output:**\nAnalysis: The patch resolves a security issue where invalid requests caused assertion failures, potentially leading to a DoS. The code assigns specific status values to handle these cases, preventing such failures.\nFinal Classification: Security Vulnerability Fix\nConfidence Score: 0.95"
}