{
  "cve_id": "CVE-2017-5581",
  "cwe_ids": [
    "CWE-119"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "TigerVNC/tigervnc",
  "commit_msg": "Fix buffer overflow in ModifiablePixelBuffer::fillRect.\n\nIt can be triggered by RRE message with subrectangle out of framebuffer\nboundaries. It may prevent the same kind of issue caused by evil message\nfrom another encoding too.",
  "commit_hash": "18c020124ff1b2441f714da2017f63dba50720ba",
  "git_url": "https://github.com/TigerVNC/tigervnc/commit/18c020124ff1b2441f714da2017f63dba50720ba",
  "file_path": "common/rfb/PixelBuffer.cxx",
  "func_name": "ModifiablePixelBuffer::fillRect",
  "func_before": "void ModifiablePixelBuffer::fillRect(const Rect& r, const void* pix)\n{\n  int stride;\n  U8 *buf;\n  int w, h, b;\n\n  w = r.width();\n  h = r.height();\n  b = format.bpp/8;\n\n  if (h == 0)\n    return;\n\n  buf = getBufferRW(r, &stride);\n\n  if (b == 1) {\n    while (h--) {\n      memset(buf, *(const U8*)pix, w);\n      buf += stride * b;\n    }\n  } else {\n    U8 *start;\n    int w1;\n\n    start = buf;\n\n    w1 = w;\n    while (w1--) {\n      memcpy(buf, pix, b);\n      buf += b;\n    }\n    buf += (stride - w) * b;\n    h--;\n\n    while (h--) {\n      memcpy(buf, start, w * b);\n      buf += stride * b;\n    }\n  }\n\n  commitBufferRW(r);\n}",
  "abstract_func_before": "void ModifiablePixelBuffer::fillRect(const Rect& VAR_0, const void* VAR_1)\n{\n  int VAR_2;\n  U8 *VAR_3;\n  int VAR_4, VAR_5, VAR_6;\n\n  VAR_4 = VAR_0.width();\n  VAR_5 = VAR_0.height();\n  VAR_6 = VAR_7.bpp/8;\n\n  if (VAR_5 == 0)\n    return;\n\n  VAR_3 = getBufferRW(VAR_0, &VAR_2);\n\n  if (VAR_6 == 1) {\n    while (VAR_5--) {\n      memset(VAR_3, *(const U8*)VAR_1, VAR_4);\n      VAR_3 += VAR_2 * VAR_6;\n    }\n  } else {\n    U8 *VAR_8;\n    int VAR_9;\n\n    VAR_8 = VAR_3;\n\n    VAR_9 = VAR_4;\n    while (VAR_9--) {\n      memcpy(VAR_3, VAR_1, VAR_6);\n      VAR_3 += VAR_6;\n    }\n    VAR_3 += (VAR_2 - VAR_4) * VAR_6;\n    VAR_5--;\n\n    while (VAR_5--) {\n      memcpy(VAR_3, VAR_8, VAR_4 * VAR_6);\n      VAR_3 += VAR_2 * VAR_6;\n    }\n  }\n\n  commitBufferRW(VAR_0);\n}",
  "func_graph_path_before": "TigerVNC/tigervnc/18c020124ff1b2441f714da2017f63dba50720ba/PixelBuffer.cxx/vul/before/0.json",
  "func": "void ModifiablePixelBuffer::fillRect(const Rect& r, const void* pix)\n{\n  int stride;\n  U8 *buf;\n  int w, h, b;\n  Rect drect;\n\n  drect = r;\n  if (!drect.enclosed_by(getRect())) {\n    vlog.error(\"Destination rect %dx%d at %d,%d exceeds framebuffer %dx%d\",\n               drect.width(), drect.height(), drect.tl.x, drect.tl.y, width_, height_);\n    drect = drect.intersect(getRect());\n  }\n\n  if (drect.is_empty())\n    return;\n\n  w = drect.width();\n  h = drect.height();\n  b = format.bpp/8;\n\n  if (h == 0)\n    return;\n\n  buf = getBufferRW(drect, &stride);\n\n  if (b == 1) {\n    while (h--) {\n      memset(buf, *(const U8*)pix, w);\n      buf += stride * b;\n    }\n  } else {\n    U8 *start;\n    int w1;\n\n    start = buf;\n\n    w1 = w;\n    while (w1--) {\n      memcpy(buf, pix, b);\n      buf += b;\n    }\n    buf += (stride - w) * b;\n    h--;\n\n    while (h--) {\n      memcpy(buf, start, w * b);\n      buf += stride * b;\n    }\n  }\n\n  commitBufferRW(drect);\n}",
  "abstract_func": "void ModifiablePixelBuffer::fillRect(const Rect& VAR_0, const void* VAR_1)\n{\n  int VAR_2;\n  U8 *VAR_3;\n  int VAR_4, VAR_5, VAR_6;\n  Rect VAR_7;\n\n  VAR_7 = VAR_0;\n  if (!VAR_7.enclosed_by(getRect())) {\n    VAR_8.error(\"Destination rect %dx%d at %d,%d exceeds framebuffer %dx%d\",\n               VAR_7.width(), VAR_7.height(), VAR_7.tl.x, VAR_7.tl.y, VAR_9, VAR_10);\n    VAR_7 = VAR_7.intersect(getRect());\n  }\n\n  if (VAR_7.is_empty())\n    return;\n\n  VAR_4 = VAR_7.width();\n  VAR_5 = VAR_7.height();\n  VAR_6 = VAR_11.bpp/8;\n\n  if (VAR_5 == 0)\n    return;\n\n  VAR_3 = getBufferRW(VAR_7, &VAR_2);\n\n  if (VAR_6 == 1) {\n    while (VAR_5--) {\n      memset(VAR_3, *(const U8*)VAR_1, VAR_4);\n      VAR_3 += VAR_2 * VAR_6;\n    }\n  } else {\n    U8 *VAR_12;\n    int VAR_13;\n\n    VAR_12 = VAR_3;\n\n    VAR_13 = VAR_4;\n    while (VAR_13--) {\n      memcpy(VAR_3, VAR_1, VAR_6);\n      VAR_3 += VAR_6;\n    }\n    VAR_3 += (VAR_2 - VAR_4) * VAR_6;\n    VAR_5--;\n\n    while (VAR_5--) {\n      memcpy(VAR_3, VAR_12, VAR_4 * VAR_6);\n      VAR_3 += VAR_2 * VAR_6;\n    }\n  }\n\n  commitBufferRW(VAR_7);\n}",
  "func_graph_path": "TigerVNC/tigervnc/18c020124ff1b2441f714da2017f63dba50720ba/PixelBuffer.cxx/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -3,15 +3,26 @@\n   int stride;\n   U8 *buf;\n   int w, h, b;\n+  Rect drect;\n \n-  w = r.width();\n-  h = r.height();\n+  drect = r;\n+  if (!drect.enclosed_by(getRect())) {\n+    vlog.error(\"Destination rect %dx%d at %d,%d exceeds framebuffer %dx%d\",\n+               drect.width(), drect.height(), drect.tl.x, drect.tl.y, width_, height_);\n+    drect = drect.intersect(getRect());\n+  }\n+\n+  if (drect.is_empty())\n+    return;\n+\n+  w = drect.width();\n+  h = drect.height();\n   b = format.bpp/8;\n \n   if (h == 0)\n     return;\n \n-  buf = getBufferRW(r, &stride);\n+  buf = getBufferRW(drect, &stride);\n \n   if (b == 1) {\n     while (h--) {\n@@ -38,5 +49,5 @@\n     }\n   }\n \n-  commitBufferRW(r);\n+  commitBufferRW(drect);\n }",
  "diff_line_info": {
    "deleted_lines": [
      "  w = r.width();",
      "  h = r.height();",
      "  buf = getBufferRW(r, &stride);",
      "  commitBufferRW(r);"
    ],
    "added_lines": [
      "  Rect drect;",
      "  drect = r;",
      "  if (!drect.enclosed_by(getRect())) {",
      "    vlog.error(\"Destination rect %dx%d at %d,%d exceeds framebuffer %dx%d\",",
      "               drect.width(), drect.height(), drect.tl.x, drect.tl.y, width_, height_);",
      "    drect = drect.intersect(getRect());",
      "  }",
      "",
      "  if (drect.is_empty())",
      "    return;",
      "",
      "  w = drect.width();",
      "  h = drect.height();",
      "  buf = getBufferRW(drect, &stride);",
      "  commitBufferRW(drect);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/TigerVNC/tigervnc/pull/399",
  "description": {
    "pr_info": {
      "title": "Fix buffer overflow in ModifiablePixelBuffer::fillRect.",
      "number": 399
    },
    "comment": [
      "LibVNC had security bug and the reproducer can trigger similar kind of security bug in vncviewer as well:\r\nhttps://github.com/LibVNC/libvncserver/pull/137\r\n(Using the `send_copyrect_crash` function, which has bit misleading name because the issue is in RRE and filling rectangles, not copying.)\r\n\r\nMalicious VNC server can send RRE message with subrectangle which is out of the framebuffer rectangle. Vncviewer then fills this rectangle and writes into random memory.\r\n\r\nI wasn't sure at what level should the test whether the subrectangle is inside framebuffer be. I've added it to `PixelBuffer::fillRect` inspired by the checks inside `PixelBuffer::copyRect`.",
      "A good start. We should probably add more checks at other layers as well though. If nothing else to get better error messages.\r\n\r\nAnd I don't see why we don't just completely fail things at this point, as these are invalid requests. I'll do some follow up commits.\r\n\r\nThanks for the report and patch.",
      "This has been assigned [CVE-2017-5581](http://www.openwall.com/lists/oss-security/2017/01/25/6)"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix\n\nConfidence Score: 0.95",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "\n\n**Final Output:**\n\nAnalysis: The patch adds bounds checking to prevent buffer overflow in ModifiablePixelBuffer::fillRect, addressing a security vulnerability that could be exploited via crafted inputs.\n\nFinal Classification: Security Vulnerability Fix\n\nConfidence Score: 0.95"
}