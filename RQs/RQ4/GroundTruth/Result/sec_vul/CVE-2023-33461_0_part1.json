{
  "cve_id": "CVE-2023-33461",
  "cwe_ids": [
    "CWE-476"
  ],
  "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H",
  "cvss_is_v3": true,
  "repo_name": "ndevilla/iniparser",
  "commit_msg": "Handle null return from iniparser_getstring\n\nFix handling of NULL returns from iniparser_getstring in\niniparser_getboolean, iniparser_getlongint and iniparser_getdouble,\navoiding a crash.",
  "commit_hash": "ace9871f65d11b5d73f0b9ee8cf5d2807439442d",
  "git_url": "https://github.com/ndevilla/iniparser/commit/ace9871f65d11b5d73f0b9ee8cf5d2807439442d",
  "file_path": "src/iniparser.c",
  "func_name": "iniparser_getboolean",
  "func_before": "int iniparser_getboolean(const dictionary * d, const char * key, int notfound)\n{\n    int          ret ;\n    const char * c ;\n\n    c = iniparser_getstring(d, key, INI_INVALID_KEY);\n    if (c==INI_INVALID_KEY) return notfound ;\n    if (c[0]=='y' || c[0]=='Y' || c[0]=='1' || c[0]=='t' || c[0]=='T') {\n        ret = 1 ;\n    } else if (c[0]=='n' || c[0]=='N' || c[0]=='0' || c[0]=='f' || c[0]=='F') {\n        ret = 0 ;\n    } else {\n        ret = notfound ;\n    }\n    return ret;\n}",
  "abstract_func_before": "int iniparser_getboolean(const dictionary * VAR_0, const char * VAR_1, int VAR_2)\n{\n    int          VAR_3 ;\n    const char * VAR_4 ;\n\n    VAR_4 = iniparser_getstring(VAR_0, VAR_1, VAR_5);\n    if (VAR_4==VAR_5) return VAR_2 ;\n    if (VAR_4[0]=='y' || VAR_4[0]=='Y' || VAR_4[0]=='1' || VAR_4[0]=='t' || VAR_4[0]=='T') {\n        VAR_3 = 1 ;\n    } else if (VAR_4[0]=='n' || VAR_4[0]=='N' || VAR_4[0]=='0' || VAR_4[0]=='f' || VAR_4[0]=='F') {\n        VAR_3 = 0 ;\n    } else {\n        VAR_3 = VAR_2 ;\n    }\n    return VAR_3;\n}",
  "func_graph_path_before": "ndevilla/iniparser/ace9871f65d11b5d73f0b9ee8cf5d2807439442d/iniparser.c/vul/before/1.json",
  "func": "int iniparser_getboolean(const dictionary * d, const char * key, int notfound)\n{\n    int          ret ;\n    const char * c ;\n\n    c = iniparser_getstring(d, key, INI_INVALID_KEY);\n    if (c==NULL || c==INI_INVALID_KEY) return notfound ;\n    if (c[0]=='y' || c[0]=='Y' || c[0]=='1' || c[0]=='t' || c[0]=='T') {\n        ret = 1 ;\n    } else if (c[0]=='n' || c[0]=='N' || c[0]=='0' || c[0]=='f' || c[0]=='F') {\n        ret = 0 ;\n    } else {\n        ret = notfound ;\n    }\n    return ret;\n}",
  "abstract_func": "int iniparser_getboolean(const dictionary * VAR_0, const char * VAR_1, int VAR_2)\n{\n    int          VAR_3 ;\n    const char * VAR_4 ;\n\n    VAR_4 = iniparser_getstring(VAR_0, VAR_1, VAR_5);\n    if (VAR_4==NULL || VAR_4==VAR_5) return VAR_2 ;\n    if (VAR_4[0]=='y' || VAR_4[0]=='Y' || VAR_4[0]=='1' || VAR_4[0]=='t' || VAR_4[0]=='T') {\n        VAR_3 = 1 ;\n    } else if (VAR_4[0]=='n' || VAR_4[0]=='N' || VAR_4[0]=='0' || VAR_4[0]=='f' || VAR_4[0]=='F') {\n        VAR_3 = 0 ;\n    } else {\n        VAR_3 = VAR_2 ;\n    }\n    return VAR_3;\n}",
  "func_graph_path": "ndevilla/iniparser/ace9871f65d11b5d73f0b9ee8cf5d2807439442d/iniparser.c/vul/after/1.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -4,7 +4,7 @@\n     const char * c ;\n \n     c = iniparser_getstring(d, key, INI_INVALID_KEY);\n-    if (c==INI_INVALID_KEY) return notfound ;\n+    if (c==NULL || c==INI_INVALID_KEY) return notfound ;\n     if (c[0]=='y' || c[0]=='Y' || c[0]=='1' || c[0]=='t' || c[0]=='T') {\n         ret = 1 ;\n     } else if (c[0]=='n' || c[0]=='N' || c[0]=='0' || c[0]=='f' || c[0]=='F') {",
  "diff_line_info": {
    "deleted_lines": [
      "    if (c==INI_INVALID_KEY) return notfound ;"
    ],
    "added_lines": [
      "    if (c==NULL || c==INI_INVALID_KEY) return notfound ;"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/ndevilla/iniparser/pull/146",
  "description": {
    "pr_info": {
      "title": "Handle null return from iniparser_getstring",
      "number": 146
    },
    "comment": [
      "Fix handling of NULL returns from iniparser_getstring in iniparser_getboolean, iniparser_getlongint and iniparser_getdouble, avoiding a crash.\r\n\r\nFixes #144 \r\n(CVE-2023-33461)",
      "Thanks for providing the fix!"
    ]
  },
  "Bug Filter": "** Security Vulnerability Fix  \n**Confidence Score:** 0.95",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "\n\nThe patch addresses a null pointer dereference in functions that parse configuration data, preventing a potential crash. This fix mitigates a security vulnerability that could be exploited to cause a denial of service.\n\n**Final Classification:** Security Vulnerability Fix  \n**Confidence Score:** 0.95"
}