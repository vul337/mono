{
  "cve_id": "CVE-2019-10908",
  "cwe_ids": [
    "CWE-335"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "airsonic",
  "commit_msg": "Generate new passwords in a secure way\n\nPreviously, lost passwords were generated via\norg.apache.commons.lang.RandomStringUtils,\nwhich is using java.util.Random internally.\n\nThis PRNG is has a 48-bit seed, that can easily be bruteforced\nif an attacker is able to get the PRNG's output, for example\nbut resetting their own account multiple times,\nleading to trivial privileges escalation attacks.\n\nThis commit makes use of java.security.SecureRandom\ninstead.",
  "commit_hash": "61c842923a6d60d4aedd126445a8437b53b752c8",
  "git_url": "https://github.com/airsonic/airsonic/commit/61c842923a6d60d4aedd126445a8437b53b752c8",
  "file_path": "airsonic-main/src/main/java/org/airsonic/player/controller/RecoverController.java",
  "func_name": "recover",
  "func_before": "@RequestMapping(method = {RequestMethod.GET, RequestMethod.POST})\n    public ModelAndView recover(HttpServletRequest request, HttpServletResponse response) throws Exception {\n\n        Map<String, Object> map = new HashMap<String, Object>();\n        String usernameOrEmail = StringUtils.trimToNull(request.getParameter(\"usernameOrEmail\"));\n\n        if (usernameOrEmail != null) {\n\n            map.put(\"usernameOrEmail\", usernameOrEmail);\n            User user = getUserByUsernameOrEmail(usernameOrEmail);\n\n            boolean captchaOk;\n            if (settingsService.isCaptchaEnabled()) {\n                String recaptchaResponse = request.getParameter(\"g-recaptcha-response\");\n                ReCaptcha captcha = new ReCaptcha(settingsService.getRecaptchaSecretKey());\n                captchaOk = recaptchaResponse != null && captcha.isValid(recaptchaResponse);\n            } else {\n                captchaOk = true;\n            }\n            \n            if (!captchaOk) {\n                map.put(\"error\", \"recover.error.invalidcaptcha\");\n            } else if (user == null) {\n                map.put(\"error\", \"recover.error.usernotfound\");\n            } else if (user.getEmail() == null) {\n                map.put(\"error\", \"recover.error.noemail\");\n            } else {\n                String password = RandomStringUtils.randomAlphanumeric(8);\n                if (emailPassword(password, user.getUsername(), user.getEmail())) {\n                    map.put(\"sentTo\", user.getEmail());\n                    user.setLdapAuthenticated(false);\n                    user.setPassword(password);\n                    securityService.updateUser(user);\n                } else {\n                    map.put(\"error\", \"recover.error.sendfailed\");\n                }\n            }\n        }\n\n        if (settingsService.isCaptchaEnabled()) {\n            map.put(\"recaptchaSiteKey\", settingsService.getRecaptchaSiteKey());\n        }\n\n        return new ModelAndView(\"recover\", \"model\", map);\n    }",
  "abstract_func_before": "@RequestMapping(VAR_0 = {VAR_1.GET, VAR_1.POST})\n    public ModelAndView recover(HttpServletRequest VAR_2, HttpServletResponse VAR_3) throws Exception {\n\n        Map<String, Object> VAR_4 = new HashMap<String, Object>();\n        String VAR_5 = VAR_6.trimToNull(VAR_2.getParameter(\"usernameOrEmail\"));\n\n        if (VAR_5 != null) {\n\n            VAR_4.put(\"usernameOrEmail\", VAR_5);\n            User VAR_7 = getUserByUsernameOrEmail(VAR_5);\n\n            boolean VAR_8;\n            if (VAR_9.isCaptchaEnabled()) {\n                String VAR_10 = VAR_2.getParameter(\"g-recaptcha-response\");\n                ReCaptcha VAR_11 = new ReCaptcha(VAR_9.getRecaptchaSecretKey());\n                VAR_8 = VAR_10 != null && VAR_11.isValid(VAR_10);\n            } else {\n                VAR_8 = true;\n            }\n            \n            if (!VAR_8) {\n                VAR_4.put(\"error\", \"recover.error.invalidcaptcha\");\n            } else if (VAR_7 == null) {\n                VAR_4.put(\"error\", \"recover.error.usernotfound\");\n            } else if (VAR_7.getEmail() == null) {\n                VAR_4.put(\"error\", \"recover.error.noemail\");\n            } else {\n                String VAR_12 = VAR_13.randomAlphanumeric(8);\n                if (emailPassword(VAR_12, VAR_7.getUsername(), VAR_7.getEmail())) {\n                    VAR_4.put(\"sentTo\", VAR_7.getEmail());\n                    VAR_7.setLdapAuthenticated(false);\n                    VAR_7.setPassword(VAR_12);\n                    VAR_14.updateUser(VAR_7);\n                } else {\n                    VAR_4.put(\"error\", \"recover.error.sendfailed\");\n                }\n            }\n        }\n\n        if (VAR_9.isCaptchaEnabled()) {\n            VAR_4.put(\"recaptchaSiteKey\", VAR_9.getRecaptchaSiteKey());\n        }\n\n        return new ModelAndView(\"recover\", \"model\", VAR_4);\n    }",
  "func_graph_path_before": "airsonic/61c842923a6d60d4aedd126445a8437b53b752c8/RecoverController.java/vul/before/0.json",
  "func": "@RequestMapping(method = {RequestMethod.GET, RequestMethod.POST})\n    public ModelAndView recover(HttpServletRequest request, HttpServletResponse response) throws Exception {\n\n        Map<String, Object> map = new HashMap<String, Object>();\n        String usernameOrEmail = StringUtils.trimToNull(request.getParameter(\"usernameOrEmail\"));\n\n        if (usernameOrEmail != null) {\n\n            map.put(\"usernameOrEmail\", usernameOrEmail);\n            User user = getUserByUsernameOrEmail(usernameOrEmail);\n\n            boolean captchaOk;\n            if (settingsService.isCaptchaEnabled()) {\n                String recaptchaResponse = request.getParameter(\"g-recaptcha-response\");\n                ReCaptcha captcha = new ReCaptcha(settingsService.getRecaptchaSecretKey());\n                captchaOk = recaptchaResponse != null && captcha.isValid(recaptchaResponse);\n            } else {\n                captchaOk = true;\n            }\n            \n            if (!captchaOk) {\n                map.put(\"error\", \"recover.error.invalidcaptcha\");\n            } else if (user == null) {\n                map.put(\"error\", \"recover.error.usernotfound\");\n            } else if (user.getEmail() == null) {\n                map.put(\"error\", \"recover.error.noemail\");\n            } else {\n                StringBuilder sb = new StringBuilder(PASSWORD_LENGTH);\n                for(int i=0; i<PASSWORD_LENGTH; i++) {\n                  int index = random.nextInt(SYMBOLS.length());\n                  sb.append(SYMBOLS.charAt(index));\n                }\n                String password = sb.toString();\n\n                if (emailPassword(password, user.getUsername(), user.getEmail())) {\n                    map.put(\"sentTo\", user.getEmail());\n                    user.setLdapAuthenticated(false);\n                    user.setPassword(password);\n                    securityService.updateUser(user);\n                } else {\n                    map.put(\"error\", \"recover.error.sendfailed\");\n                }\n            }\n        }\n\n        if (settingsService.isCaptchaEnabled()) {\n            map.put(\"recaptchaSiteKey\", settingsService.getRecaptchaSiteKey());\n        }\n\n        return new ModelAndView(\"recover\", \"model\", map);\n    }",
  "abstract_func": "@RequestMapping(VAR_0 = {VAR_1.GET, VAR_1.POST})\n    public ModelAndView recover(HttpServletRequest VAR_2, HttpServletResponse VAR_3) throws Exception {\n\n        Map<String, Object> VAR_4 = new HashMap<String, Object>();\n        String VAR_5 = VAR_6.trimToNull(VAR_2.getParameter(\"usernameOrEmail\"));\n\n        if (VAR_5 != null) {\n\n            VAR_4.put(\"usernameOrEmail\", VAR_5);\n            User VAR_7 = getUserByUsernameOrEmail(VAR_5);\n\n            boolean VAR_8;\n            if (VAR_9.isCaptchaEnabled()) {\n                String VAR_10 = VAR_2.getParameter(\"g-recaptcha-response\");\n                ReCaptcha VAR_11 = new ReCaptcha(VAR_9.getRecaptchaSecretKey());\n                VAR_8 = VAR_10 != null && VAR_11.isValid(VAR_10);\n            } else {\n                VAR_8 = true;\n            }\n            \n            if (!VAR_8) {\n                VAR_4.put(\"error\", \"recover.error.invalidcaptcha\");\n            } else if (VAR_7 == null) {\n                VAR_4.put(\"error\", \"recover.error.usernotfound\");\n            } else if (VAR_7.getEmail() == null) {\n                VAR_4.put(\"error\", \"recover.error.noemail\");\n            } else {\n                StringBuilder VAR_12 = new StringBuilder(VAR_13);\n                for(int VAR_14=0; VAR_14<VAR_13; VAR_14++) {\n                  int VAR_15 = VAR_16.nextInt(VAR_17.length());\n                  VAR_12.append(VAR_17.charAt(VAR_15));\n                }\n                String VAR_18 = VAR_12.toString();\n\n                if (emailPassword(VAR_18, VAR_7.getUsername(), VAR_7.getEmail())) {\n                    VAR_4.put(\"sentTo\", VAR_7.getEmail());\n                    VAR_7.setLdapAuthenticated(false);\n                    VAR_7.setPassword(VAR_18);\n                    VAR_19.updateUser(VAR_7);\n                } else {\n                    VAR_4.put(\"error\", \"recover.error.sendfailed\");\n                }\n            }\n        }\n\n        if (VAR_9.isCaptchaEnabled()) {\n            VAR_4.put(\"recaptchaSiteKey\", VAR_9.getRecaptchaSiteKey());\n        }\n\n        return new ModelAndView(\"recover\", \"model\", VAR_4);\n    }",
  "func_graph_path": "airsonic/61c842923a6d60d4aedd126445a8437b53b752c8/RecoverController.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -25,7 +25,13 @@\n             } else if (user.getEmail() == null) {\n                 map.put(\"error\", \"recover.error.noemail\");\n             } else {\n-                String password = RandomStringUtils.randomAlphanumeric(8);\n+                StringBuilder sb = new StringBuilder(PASSWORD_LENGTH);\n+                for(int i=0; i<PASSWORD_LENGTH; i++) {\n+                  int index = random.nextInt(SYMBOLS.length());\n+                  sb.append(SYMBOLS.charAt(index));\n+                }\n+                String password = sb.toString();\n+\n                 if (emailPassword(password, user.getUsername(), user.getEmail())) {\n                     map.put(\"sentTo\", user.getEmail());\n                     user.setLdapAuthenticated(false);",
  "diff_line_info": {
    "deleted_lines": [
      "                String password = RandomStringUtils.randomAlphanumeric(8);"
    ],
    "added_lines": [
      "                StringBuilder sb = new StringBuilder(PASSWORD_LENGTH);",
      "                for(int i=0; i<PASSWORD_LENGTH; i++) {",
      "                  int index = random.nextInt(SYMBOLS.length());",
      "                  sb.append(SYMBOLS.charAt(index));",
      "                }",
      "                String password = sb.toString();",
      ""
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/airsonic/airsonic/pull/934",
  "description": {
    "pr_info": {
      "title": "Generate new passwords in a secure way",
      "number": 934
    },
    "comment": [
      "Previously, lost passwords were generated via\r\norg.apache.commons.lang.RandomStringUtils,\r\nwhich is using java.util.Random internally.\r\n\r\nThis PRNG is has a 48-bit seed, that can easily be bruteforced\r\nif an attacker is able to get the PRNG's output, for example\r\nbut resetting their own account multiple times,\r\nleading to trivial privileges escalation attacks.\r\n\r\nThis commit makes use of java.security.SecureRandom\r\ninstead.",
      "This PR fixes `CVE-2019-10908`."
    ]
  },
  "Bug Filter": "Security Vulnerability Fix\n\nConfidence Score: 1.0",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "\n\n**Final Output:**\n\nAnalysis: The patch addresses a security issue by replacing a insecure random number generator with a secure one, preventing potential brute-force attacks.\n\nFinal Classification: Security Vulnerability Fix\n\nConfidence Score: 1.0"
}