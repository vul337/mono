{
  "cve_id": "CVE-2016-9177",
  "cwe_ids": [
    "CWE-22"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:N/A:N",
  "cvss_is_v3": false,
  "repo_name": "perwendel/spark",
  "commit_msg": "Fix for #700 - Arbitrary File Read Vulnerability",
  "commit_hash": "26b57d0596ee73c14c558463943ef0857e53b91f",
  "git_url": "https://github.com/perwendel/spark/commit/26b57d0596ee73c14c558463943ef0857e53b91f",
  "file_path": "src/main/java/spark/staticfiles/StaticFilesConfiguration.java",
  "func_name": "configureExternal",
  "func_before": "public synchronized void configureExternal(String folder) {\n        Assert.notNull(folder, \"'folder' must not be null\");\n\n        if (!externalStaticResourcesSet) {\n            try {\n                ExternalResource resource = new ExternalResource(folder);\n                if (!resource.getFile().isDirectory()) {\n                    LOG.error(\"External Static resource location must be a folder\");\n                    return;\n                }\n\n                if (staticResourceHandlers == null) {\n                    staticResourceHandlers = new ArrayList<>();\n                }\n                staticResourceHandlers.add(new ExternalResourceHandler(folder, \"index.html\"));\n                LOG.info(\"External StaticResourceHandler configured with folder = \" + folder);\n            } catch (IOException e) {\n                LOG.error(\"Error when creating external StaticResourceHandler\", e);\n            }\n            externalStaticResourcesSet = true;\n        }\n\n    }",
  "abstract_func_before": "public synchronized void configureExternal(String VAR_0) {\n        VAR_1.notNull(VAR_0, \"'folder' must not be null\");\n\n        if (!VAR_2) {\n            try {\n                ExternalResource VAR_3 = new ExternalResource(VAR_0);\n                if (!VAR_3.getFile().isDirectory()) {\n                    VAR_4.error(\"External Static resource location must be a folder\");\n                    return;\n                }\n\n                if (VAR_5 == null) {\n                    VAR_5 = new ArrayList<>();\n                }\n                VAR_5.add(new ExternalResourceHandler(VAR_0, \"index.html\"));\n                VAR_4.info(\"External StaticResourceHandler configured with folder = \" + VAR_0);\n            } catch (IOException VAR_6) {\n                VAR_4.error(\"Error when creating external StaticResourceHandler\", VAR_6);\n            }\n            VAR_2 = true;\n        }\n\n    }",
  "func_graph_path_before": "perwendel/spark/26b57d0596ee73c14c558463943ef0857e53b91f/StaticFilesConfiguration.java/vul/before/1.json",
  "func": "public synchronized void configureExternal(String folder) {\n        Assert.notNull(folder, \"'folder' must not be null\");\n\n        if (!externalStaticResourcesSet) {\n            try {\n                ExternalResource resource = new ExternalResource(folder);\n                if (!resource.getFile().isDirectory()) {\n                    LOG.error(\"External Static resource location must be a folder\");\n                    return;\n                }\n\n                if (staticResourceHandlers == null) {\n                    staticResourceHandlers = new ArrayList<>();\n                }\n                staticResourceHandlers.add(new ExternalResourceHandler(folder, \"index.html\"));\n                LOG.info(\"External StaticResourceHandler configured with folder = \" + folder);\n            } catch (IOException e) {\n                LOG.error(\"Error when creating external StaticResourceHandler\", e);\n            }\n\n            StaticFilesFolder.externalConfiguredTo(folder);\n            externalStaticResourcesSet = true;\n        }\n\n    }",
  "abstract_func": "public synchronized void configureExternal(String VAR_0) {\n        VAR_1.notNull(VAR_0, \"'folder' must not be null\");\n\n        if (!VAR_2) {\n            try {\n                ExternalResource VAR_3 = new ExternalResource(VAR_0);\n                if (!VAR_3.getFile().isDirectory()) {\n                    VAR_4.error(\"External Static resource location must be a folder\");\n                    return;\n                }\n\n                if (VAR_5 == null) {\n                    VAR_5 = new ArrayList<>();\n                }\n                VAR_5.add(new ExternalResourceHandler(VAR_0, \"index.html\"));\n                VAR_4.info(\"External StaticResourceHandler configured with folder = \" + VAR_0);\n            } catch (IOException VAR_6) {\n                VAR_4.error(\"Error when creating external StaticResourceHandler\", VAR_6);\n            }\n\n            VAR_7.externalConfiguredTo(VAR_0);\n            VAR_2 = true;\n        }\n\n    }",
  "func_graph_path": "perwendel/spark/26b57d0596ee73c14c558463943ef0857e53b91f/StaticFilesConfiguration.java/vul/after/1.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -17,6 +17,8 @@\n             } catch (IOException e) {\n                 LOG.error(\"Error when creating external StaticResourceHandler\", e);\n             }\n+\n+            StaticFilesFolder.externalConfiguredTo(folder);\n             externalStaticResourcesSet = true;\n         }\n ",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "",
      "            StaticFilesFolder.externalConfiguredTo(folder);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/perwendel/spark/pull/701",
  "description": {
    "pr_info": {
      "title": "Fix for #700 - Arbitrary File Read Vulnerability",
      "number": 701
    },
    "comment": [
      "Fix for #700 \r\nThis is my take on the directory traversal problem.\r\nPlease review and try out.",
      "I've just verified it for Windows, didn't have time to test for linux etc.\nWhen travis CI built it didn't detect directory traversal for the test case for external resources. There's probably an issue with how path handling differs in unix-like OSs and windows.\n",
      "DISCLAIMER: Didn't really have time to look closely, so I could be talking out of my arse so to speak, but: wouldn't using `File.getCanonicalPath()` be safer than string manipulation? I'd certainly trust JDK library methods more than my own code, especially when it comes to security. Also, there are all kinds of clever ways (encodings, escapes and what not) of defeating checking strings for \"..\", \"/\", \"\\\" etc.\n",
      "@jakaarl Sorry, merged before I saw your comment. The guy making the post emailed and said it was a good solution. But I'll follow your advise and see if I can make it better. New PR will be created if you're right!\n"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix\n\nConfidence Score: 0.95",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "\n\nThe patch addresses a security vulnerability by correcting the configuration of external resources, preventing arbitrary file reads.\n\n**Final Output:**\n\nAnalysis: The commit message indicates a security fix for an arbitrary file read vulnerability. The code change sets the external configuration, which likely prevents unauthorized access, thus mitigating a security risk.\n\nFinal Classification: Security Vulnerability Fix\n\nConfidence Score: 0.95"
}