{
  "cve_id": "CVE-2022-4899",
  "cwe_ids": [
    "CWE-400"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
  "cvss_is_v3": true,
  "repo_name": "facebook/zstd",
  "commit_msg": "Fix buffer underflow for null dir1",
  "commit_hash": "e1873ad576cb478fff0e6e44ad99599cd5fd2846",
  "git_url": "https://github.com/facebook/zstd/commit/e1873ad576cb478fff0e6e44ad99599cd5fd2846",
  "file_path": "programs/util.c",
  "func_name": "mallocAndJoin2Dir",
  "func_before": "static char* mallocAndJoin2Dir(const char *dir1, const char *dir2)\n{\n    const size_t dir1Size = strlen(dir1);\n    const size_t dir2Size = strlen(dir2);\n    char *outDirBuffer, *buffer, trailingChar;\n\n    assert(dir1 != NULL && dir2 != NULL);\n    outDirBuffer = (char *) malloc(dir1Size + dir2Size + 2);\n    CONTROL(outDirBuffer != NULL);\n\n    memcpy(outDirBuffer, dir1, dir1Size);\n    outDirBuffer[dir1Size] = '\\0';\n\n    if (dir2[0] == '.')\n        return outDirBuffer;\n\n    buffer = outDirBuffer + dir1Size;\n    trailingChar = *(buffer - 1);\n    if (trailingChar != PATH_SEP) {\n        *buffer = PATH_SEP;\n        buffer++;\n    }\n    memcpy(buffer, dir2, dir2Size);\n    buffer[dir2Size] = '\\0';\n\n    return outDirBuffer;\n}",
  "abstract_func_before": "static char* mallocAndJoin2Dir(const char *VAR_0, const char *VAR_1)\n{\n    const size_t VAR_2 = strlen(VAR_0);\n    const size_t VAR_3 = strlen(VAR_1);\n    char *VAR_4, *VAR_5, VAR_6;\n\n    assert(VAR_0 != NULL && VAR_1 != NULL);\n    VAR_4 = (char *) malloc(VAR_2 + VAR_3 + 2);\n    CONTROL(VAR_4 != NULL);\n\n    memcpy(VAR_4, VAR_0, VAR_2);\n    VAR_4[VAR_2] = '\\0';\n\n    if (VAR_1[0] == '.')\n        return VAR_4;\n\n    VAR_5 = VAR_4 + VAR_2;\n    VAR_6 = *(VAR_5 - 1);\n    if (VAR_6 != VAR_7) {\n        *VAR_5 = VAR_7;\n        VAR_5++;\n    }\n    memcpy(VAR_5, VAR_1, VAR_3);\n    VAR_5[VAR_3] = '\\0';\n\n    return VAR_4;\n}",
  "func_graph_path_before": "facebook/zstd/e1873ad576cb478fff0e6e44ad99599cd5fd2846/util.c/vul/before/0.json",
  "func": "static char* mallocAndJoin2Dir(const char *dir1, const char *dir2)\n{\n    assert(dir1 != NULL && dir2 != NULL);\n    {   const size_t dir1Size = strlen(dir1);\n        const size_t dir2Size = strlen(dir2);\n        char *outDirBuffer, *buffer;\n\n        outDirBuffer = (char *) malloc(dir1Size + dir2Size + 2);\n        CONTROL(outDirBuffer != NULL);\n\n        memcpy(outDirBuffer, dir1, dir1Size);\n        outDirBuffer[dir1Size] = '\\0';\n\n        if (dir2[0] == '.')\n            return outDirBuffer;\n\n        buffer = outDirBuffer + dir1Size;\n        if (dir1Size > 0 && *(buffer - 1) != PATH_SEP) {\n            *buffer = PATH_SEP;\n            buffer++;\n        }\n        memcpy(buffer, dir2, dir2Size);\n        buffer[dir2Size] = '\\0';\n\n        return outDirBuffer;\n    }\n}",
  "abstract_func": "static char* mallocAndJoin2Dir(const char *VAR_0, const char *VAR_1)\n{\n    assert(VAR_0 != NULL && VAR_1 != NULL);\n    {   const size_t VAR_2 = strlen(VAR_0);\n        const size_t VAR_3 = strlen(VAR_1);\n        char *VAR_4, *VAR_5;\n\n        VAR_4 = (char *) malloc(VAR_2 + VAR_3 + 2);\n        CONTROL(VAR_4 != NULL);\n\n        memcpy(VAR_4, VAR_0, VAR_2);\n        VAR_4[VAR_2] = '\\0';\n\n        if (VAR_1[0] == '.')\n            return VAR_4;\n\n        VAR_5 = VAR_4 + VAR_2;\n        if (VAR_2 > 0 && *(VAR_5 - 1) != VAR_6) {\n            *VAR_5 = VAR_6;\n            VAR_5++;\n        }\n        memcpy(VAR_5, VAR_1, VAR_3);\n        VAR_5[VAR_3] = '\\0';\n\n        return VAR_4;\n    }\n}",
  "func_graph_path": "facebook/zstd/e1873ad576cb478fff0e6e44ad99599cd5fd2846/util.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,27 +1,27 @@\n static char* mallocAndJoin2Dir(const char *dir1, const char *dir2)\n {\n-    const size_t dir1Size = strlen(dir1);\n-    const size_t dir2Size = strlen(dir2);\n-    char *outDirBuffer, *buffer, trailingChar;\n+    assert(dir1 != NULL && dir2 != NULL);\n+    {   const size_t dir1Size = strlen(dir1);\n+        const size_t dir2Size = strlen(dir2);\n+        char *outDirBuffer, *buffer;\n \n-    assert(dir1 != NULL && dir2 != NULL);\n-    outDirBuffer = (char *) malloc(dir1Size + dir2Size + 2);\n-    CONTROL(outDirBuffer != NULL);\n+        outDirBuffer = (char *) malloc(dir1Size + dir2Size + 2);\n+        CONTROL(outDirBuffer != NULL);\n \n-    memcpy(outDirBuffer, dir1, dir1Size);\n-    outDirBuffer[dir1Size] = '\\0';\n+        memcpy(outDirBuffer, dir1, dir1Size);\n+        outDirBuffer[dir1Size] = '\\0';\n \n-    if (dir2[0] == '.')\n+        if (dir2[0] == '.')\n+            return outDirBuffer;\n+\n+        buffer = outDirBuffer + dir1Size;\n+        if (dir1Size > 0 && *(buffer - 1) != PATH_SEP) {\n+            *buffer = PATH_SEP;\n+            buffer++;\n+        }\n+        memcpy(buffer, dir2, dir2Size);\n+        buffer[dir2Size] = '\\0';\n+\n         return outDirBuffer;\n-\n-    buffer = outDirBuffer + dir1Size;\n-    trailingChar = *(buffer - 1);\n-    if (trailingChar != PATH_SEP) {\n-        *buffer = PATH_SEP;\n-        buffer++;\n     }\n-    memcpy(buffer, dir2, dir2Size);\n-    buffer[dir2Size] = '\\0';\n-\n-    return outDirBuffer;\n }",
  "diff_line_info": {
    "deleted_lines": [
      "    const size_t dir1Size = strlen(dir1);",
      "    const size_t dir2Size = strlen(dir2);",
      "    char *outDirBuffer, *buffer, trailingChar;",
      "    assert(dir1 != NULL && dir2 != NULL);",
      "    outDirBuffer = (char *) malloc(dir1Size + dir2Size + 2);",
      "    CONTROL(outDirBuffer != NULL);",
      "    memcpy(outDirBuffer, dir1, dir1Size);",
      "    outDirBuffer[dir1Size] = '\\0';",
      "    if (dir2[0] == '.')",
      "",
      "    buffer = outDirBuffer + dir1Size;",
      "    trailingChar = *(buffer - 1);",
      "    if (trailingChar != PATH_SEP) {",
      "        *buffer = PATH_SEP;",
      "        buffer++;",
      "    memcpy(buffer, dir2, dir2Size);",
      "    buffer[dir2Size] = '\\0';",
      "",
      "    return outDirBuffer;"
    ],
    "added_lines": [
      "    assert(dir1 != NULL && dir2 != NULL);",
      "    {   const size_t dir1Size = strlen(dir1);",
      "        const size_t dir2Size = strlen(dir2);",
      "        char *outDirBuffer, *buffer;",
      "        outDirBuffer = (char *) malloc(dir1Size + dir2Size + 2);",
      "        CONTROL(outDirBuffer != NULL);",
      "        memcpy(outDirBuffer, dir1, dir1Size);",
      "        outDirBuffer[dir1Size] = '\\0';",
      "        if (dir2[0] == '.')",
      "            return outDirBuffer;",
      "",
      "        buffer = outDirBuffer + dir1Size;",
      "        if (dir1Size > 0 && *(buffer - 1) != PATH_SEP) {",
      "            *buffer = PATH_SEP;",
      "            buffer++;",
      "        }",
      "        memcpy(buffer, dir2, dir2Size);",
      "        buffer[dir2Size] = '\\0';",
      ""
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/facebook/zstd/pull/3220",
  "description": {
    "pr_info": {
      "title": "Disallow empty string as argument for --output-dir-flat and --output-dir-mirror",
      "number": 3220
    },
    "comment": [
      "* Move safety checks before strlen calls (better error reporting in debug builds)\r\n* Fix buffer underflow when `dir1 == \"\"` (fixes https://github.com/facebook/zstd/issues/3200#event-7066815026)\r\n\r\nEdit: commit [e1873ad](https://github.com/facebook/zstd/pull/3220/commits/e1873ad576cb478fff0e6e44ad99599cd5fd2846) fixes the buffer underflow, but I realized there is a deeper issue here. The current behavior for `--output-dir-flat=\"\"` and `--output-dir-mirror=\"\"` maps `\"\" -> \"/\"`. This is bad. Therefore, in [f9f27de](https://github.com/facebook/zstd/pull/3220/commits/f9f27de91c89d826c6a39c3ef44fb1b02f9a43aa), I disallow empty string as an argument for those flags (and add a test verifying that behavior).",
      "Please add a test case to the cli-tests https://github.com/facebook/zstd/tree/dev/tests/cli-tests/basic",
      "LGTM once you have a test case",
      "> LGTM once you have a test case\r\n\r\nAdded a test and disallowed empty string as an argument for `--output-dir-flat` and `--output-dir-mirror`."
    ]
  },
  "Bug Filter": "Security Vulnerability Fix\n\nConfidence Score: 1.0",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "\n\nThe patch addresses a security vulnerability by preventing a null pointer dereference, which could cause a crash. The fix is correctly classified as a security vulnerability fix with high confidence.\n\n**Final Output:**\n\nAnalysis: The patch fixes a null pointer dereference when dir1 is null, preventing a crash. This is a security issue impacting availability.\n\nFinal Classification: Security Vulnerability Fix\n\nConfidence Score: 1.0"
}