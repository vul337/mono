{
  "cve_id": "CVE-2020-24621",
  "cwe_ids": [
    "CWE-22"
  ],
  "cvss_vector": "AV:N/AC:L/Au:S/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "openmrs/openmrs-module-uiframework",
  "commit_msg": "UIFR-215: Do not allow loading arbitrary files",
  "commit_hash": "0422fa52c7eba3d96cce2936cb92897dca4b680a",
  "git_url": "https://github.com/openmrs/openmrs-module-uiframework/commit/0422fa52c7eba3d96cce2936cb92897dca4b680a",
  "file_path": "api/src/main/java/org/openmrs/ui/framework/resource/ResourceFactory.java",
  "func_name": "getResourceAsString",
  "func_before": "public String getResourceAsString(String providerName, String resourcePath) throws IOException {\n        File file = getResource(providerName, resourcePath);\n        if (file == null) {\n            return null;\n        }\n        return OpenmrsUtil.getFileAsString(file);\n    }",
  "abstract_func_before": "public String getResourceAsString(String VAR_0, String VAR_1) throws IOException {\n        File VAR_2 = getResource(VAR_0, VAR_1);\n        if (VAR_2 == null) {\n            return null;\n        }\n        return VAR_3.getFileAsString(VAR_2);\n    }",
  "func_graph_path_before": "openmrs/openmrs-module-uiframework/0422fa52c7eba3d96cce2936cb92897dca4b680a/ResourceFactory.java/vul/before/5.json",
  "func": "public String getResourceAsString(String providerName, String resourcePath) throws IOException {\n\t\tFile file = getResource(providerName, resourcePath);\n\t\tif (file == null) {\n\t\t\treturn null;\n\t\t}\n\t\treturn OpenmrsUtil.getFileAsString(file);\n\t}",
  "abstract_func": "public String getResourceAsString(String VAR_0, String VAR_1) throws IOException {\n\t\tFile VAR_2 = getResource(VAR_0, VAR_1);\n\t\tif (VAR_2 == null) {\n\t\t\treturn null;\n\t\t}\n\t\treturn VAR_3.getFileAsString(VAR_2);\n\t}",
  "func_graph_path": "openmrs/openmrs-module-uiframework/0422fa52c7eba3d96cce2936cb92897dca4b680a/ResourceFactory.java/vul/after/5.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,7 +1,7 @@\n public String getResourceAsString(String providerName, String resourcePath) throws IOException {\n-        File file = getResource(providerName, resourcePath);\n-        if (file == null) {\n-            return null;\n-        }\n-        return OpenmrsUtil.getFileAsString(file);\n-    }\n+\t\tFile file = getResource(providerName, resourcePath);\n+\t\tif (file == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\treturn OpenmrsUtil.getFileAsString(file);\n+\t}",
  "diff_line_info": {
    "deleted_lines": [
      "        File file = getResource(providerName, resourcePath);",
      "        if (file == null) {",
      "            return null;",
      "        }",
      "        return OpenmrsUtil.getFileAsString(file);",
      "    }"
    ],
    "added_lines": [
      "\t\tFile file = getResource(providerName, resourcePath);",
      "\t\tif (file == null) {",
      "\t\t\treturn null;",
      "\t\t}",
      "\t\treturn OpenmrsUtil.getFileAsString(file);",
      "\t}"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/openmrs/openmrs-module-uiframework/pull/59",
  "description": {
    "pr_info": {
      "title": "UIFR-215: Do not allow loading arbitrary files",
      "number": 59
    },
    "comment": [
      "This prevents the load of files via absolute paths or path traversal. Ticket is [here](https://issues.openmrs.org/browse/UIFR-215)."
    ]
  },
  "Bug Filter": "Supporting & Non-Core Improvements",
  "Bug Filter Confidence": 0.6,
  "Bug Filter Response": "The changes are purely stylistic without any functional security adjustments. \n\nFinal Classification: Supporting & Non-Core Improvements; Confidence: 0.6\n\n**Step-by-Step Explanation:**\n1. **Commit Message and Vulnerability:** The message implies a security fix against arbitrary file loading, suggesting a potential path traversal issue.\n2. **Code Analysis:** The diff only reformats the code without adding any security checks, such as input validation or sanitization.\n3. **Mismatch:** The commit message's claims aren't reflected in the code changes, indicating it's not a proper security fix.\n4. **Classification:** The changes are non-functional, thus categorized as supporting improvements.\n5. **Confidence:** The lack of functional changes and mismatch in description lead to moderate confidence.\n\n**Final Classification:** Supporting & Non-Core Improvements; Confidence: 0.6"
}