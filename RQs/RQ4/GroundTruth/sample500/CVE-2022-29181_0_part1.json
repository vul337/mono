{
  "cve_id": "CVE-2022-29181",
  "cwe_ids": [
    "CWE-241"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "sparklemotion/nokogiri",
  "commit_msg": "fix: {HTML4,XML}::SAX::{Parser,ParserContext} check arg types\n\nPreviously, arguments of the wrong type might cause segfault on CRuby.",
  "commit_hash": "db05ba9a1bd4b90aa6c76742cf6102a7c7297267",
  "git_url": "https://github.com/sparklemotion/nokogiri/commit/db05ba9a1bd4b90aa6c76742cf6102a7c7297267",
  "file_path": "ext/nokogiri/xml_sax_parser_context.c",
  "func_name": "parse_io",
  "func_before": "static VALUE\nparse_io(VALUE klass, VALUE io, VALUE encoding)\n{\n  xmlParserCtxtPtr ctxt;\n  xmlCharEncoding enc = (xmlCharEncoding)NUM2INT(encoding);\n\n  ctxt = xmlCreateIOParserCtxt(NULL, NULL,\n                               (xmlInputReadCallback)noko_io_read,\n                               (xmlInputCloseCallback)noko_io_close,\n                               (void *)io, enc);\n  if (ctxt->sax) {\n    xmlFree(ctxt->sax);\n    ctxt->sax = NULL;\n  }\n\n  return Data_Wrap_Struct(klass, NULL, deallocate, ctxt);\n}",
  "abstract_func_before": "static VALUE\nparse_io(VALUE VAR_0, VALUE VAR_1, VALUE VAR_2)\n{\n  xmlParserCtxtPtr VAR_3;\n  xmlCharEncoding VAR_4 = (xmlCharEncoding)NUM2INT(VAR_2);\n\n  VAR_3 = xmlCreateIOParserCtxt(NULL, NULL,\n                               (xmlInputReadCallback)VAR_5,\n                               (xmlInputCloseCallback)VAR_6,\n                               (void *)VAR_1, VAR_4);\n  if (VAR_3->sax) {\n    xmlFree(VAR_3->sax);\n    VAR_3->sax = NULL;\n  }\n\n  return Data_Wrap_Struct(VAR_0, NULL, VAR_7, VAR_3);\n}",
  "func_graph_path_before": "sparklemotion/nokogiri/db05ba9a1bd4b90aa6c76742cf6102a7c7297267/xml_sax_parser_context.c/vul/before/0.json",
  "func": "static VALUE\nparse_io(VALUE klass, VALUE io, VALUE encoding)\n{\n  xmlParserCtxtPtr ctxt;\n  xmlCharEncoding enc = (xmlCharEncoding)NUM2INT(encoding);\n\n  if (!rb_respond_to(io, id_read)) {\n    rb_raise(rb_eTypeError, \"argument expected to respond to :read\");\n  }\n\n  ctxt = xmlCreateIOParserCtxt(NULL, NULL,\n                               (xmlInputReadCallback)noko_io_read,\n                               (xmlInputCloseCallback)noko_io_close,\n                               (void *)io, enc);\n  if (ctxt->sax) {\n    xmlFree(ctxt->sax);\n    ctxt->sax = NULL;\n  }\n\n  return Data_Wrap_Struct(klass, NULL, deallocate, ctxt);\n}",
  "abstract_func": "static VALUE\nparse_io(VALUE VAR_0, VALUE VAR_1, VALUE VAR_2)\n{\n  xmlParserCtxtPtr VAR_3;\n  xmlCharEncoding VAR_4 = (xmlCharEncoding)NUM2INT(VAR_2);\n\n  if (!rb_respond_to(VAR_1, VAR_5)) {\n    rb_raise(VAR_6, \"argument expected to respond to :read\");\n  }\n\n  VAR_3 = xmlCreateIOParserCtxt(NULL, NULL,\n                               (xmlInputReadCallback)VAR_7,\n                               (xmlInputCloseCallback)VAR_8,\n                               (void *)VAR_1, VAR_4);\n  if (VAR_3->sax) {\n    xmlFree(VAR_3->sax);\n    VAR_3->sax = NULL;\n  }\n\n  return Data_Wrap_Struct(VAR_0, NULL, VAR_9, VAR_3);\n}",
  "func_graph_path": "sparklemotion/nokogiri/db05ba9a1bd4b90aa6c76742cf6102a7c7297267/xml_sax_parser_context.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -3,6 +3,10 @@\n {\n   xmlParserCtxtPtr ctxt;\n   xmlCharEncoding enc = (xmlCharEncoding)NUM2INT(encoding);\n+\n+  if (!rb_respond_to(io, id_read)) {\n+    rb_raise(rb_eTypeError, \"argument expected to respond to :read\");\n+  }\n \n   ctxt = xmlCreateIOParserCtxt(NULL, NULL,\n                                (xmlInputReadCallback)noko_io_read,",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "",
      "  if (!rb_respond_to(io, id_read)) {",
      "    rb_raise(rb_eTypeError, \"argument expected to respond to :read\");",
      "  }"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/sparklemotion/nokogiri/pull/2529",
  "description": {
    "pr_info": {
      "title": "SAX::Parser constructors check types",
      "number": 2529
    },
    "comment": [
      "**What problem is this PR intended to solve?**\r\n\r\nHTML4::SAX::Parser, HTML4::SAX::ParserContext, XML::SAX::Parser, and XML::SAX::ParserContext now properly check the types of the arguments to their various constructor methods.\r\n\r\nPreviously, passing arguments of unexpected types might cause a segfault or other less-obvious exceptions.\r\n\r\n**Have you included adequate test coverage?**\r\n\r\nYes! Added test coverage for these cases.\r\n\r\n\r\n**Does this change affect the behavior of either the C or the Java implementations?**\r\n\r\nBoth the C and Java implementations have been updated to behave identically in this circumstance."
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Step-by-Step Explanation:**\n\n1. **Input Analysis**: The commit message indicates a fix for argument type checking in specific parser and context classes. The vulnerability description explains that improper argument types led to segfaults, a clear security risk.\n\n2. **Consistency Check**: The code change adds a type check using `rb_respond_to`, which defends against incorrect argument types, aligning perfectly with the commit and vulnerability details.\n\n3. **Purpose Evaluation**: The change directly modifies core logic by adding validation, preventing crashes, which is a security concern.\n\n4. **Security Assessment**: Fixes a segfault issue, a security vulnerability.\n\n5. **Classification**: It's a Security Vulnerability Fix.\n\n6. **Confidence Score**: High (0.9) due to clear alignment and direct fix.\n\n**Final Classification:** Security Vulnerability Fix; **Confidence:** 0.9"
}