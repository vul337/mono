{
  "cve_id": "CVE-2023-25155",
  "cwe_ids": [
    "CWE-190"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H",
  "cvss_is_v3": true,
  "repo_name": "redis",
  "commit_msg": "Integer Overflow in RAND commands can lead to assertion (CVE-2023-25155)\n\nIssue happens when passing a negative long value that greater than\nthe max positive value that the long can store.",
  "commit_hash": "2a2a582e7cd99ba3b531336b8bd41df2b566e619",
  "git_url": "https://github.com/redis/redis/commit/2a2a582e7cd99ba3b531336b8bd41df2b566e619",
  "file_path": "src/t_hash.c",
  "func_name": "hrandfieldCommand",
  "func_before": "void hrandfieldCommand(client *c) {\n    long l;\n    int withvalues = 0;\n    robj *hash;\n    listpackEntry ele;\n\n    if (c->argc >= 3) {\n        if (getLongFromObjectOrReply(c,c->argv[2],&l,NULL) != C_OK) return;\n        if (c->argc > 4 || (c->argc == 4 && strcasecmp(c->argv[3]->ptr,\"withvalues\"))) {\n            addReplyErrorObject(c,shared.syntaxerr);\n            return;\n        } else if (c->argc == 4) {\n            withvalues = 1;\n            if (l < LONG_MIN/2 || l > LONG_MAX/2) {\n                addReplyError(c,\"value is out of range\");\n                return;\n            }\n        }\n        hrandfieldWithCountCommand(c, l, withvalues);\n        return;\n    }\n\n    /* Handle variant without <count> argument. Reply with simple bulk string */\n    if ((hash = lookupKeyReadOrReply(c,c->argv[1],shared.null[c->resp]))== NULL ||\n        checkType(c,hash,OBJ_HASH)) {\n        return;\n    }\n\n    hashTypeRandomElement(hash,hashTypeLength(hash),&ele,NULL);\n    hashReplyFromListpackEntry(c, &ele);\n}",
  "abstract_func_before": "void hrandfieldCommand(client *VAR_0) {\n    long VAR_1;\n    int VAR_2 = 0;\n    robj *VAR_3;\n    listpackEntry VAR_4;\n\n    if (VAR_0->argc >= 3) {\n        if (getLongFromObjectOrReply(VAR_0,VAR_0->argv[2],&VAR_1,NULL) != VAR_5) return;\n        if (VAR_0->argc > 4 || (VAR_0->argc == 4 && strcasecmp(VAR_0->argv[3]->ptr,\"withvalues\"))) {\n            addReplyErrorObject(VAR_0,VAR_6.syntaxerr);\n            return;\n        } else if (VAR_0->argc == 4) {\n            VAR_2 = 1;\n            if (VAR_1 < VAR_7/2 || VAR_1 > VAR_8/2) {\n                addReplyError(VAR_0,\"value is out of range\");\n                return;\n            }\n        }\n        hrandfieldWithCountCommand(VAR_0, VAR_1, VAR_2);\n        return;\n    }\n\n    /* COMMENT_0 */\n    if ((VAR_3 = lookupKeyReadOrReply(VAR_0,VAR_0->argv[1],VAR_6.null[VAR_0->resp]))== NULL ||\n        checkType(VAR_0,VAR_3,VAR_9)) {\n        return;\n    }\n\n    hashTypeRandomElement(VAR_3,hashTypeLength(VAR_3),&VAR_4,NULL);\n    hashReplyFromListpackEntry(VAR_0, &VAR_4);\n}",
  "func_graph_path_before": "redis/2a2a582e7cd99ba3b531336b8bd41df2b566e619/t_hash.c/vul/before/0.json",
  "func": "void hrandfieldCommand(client *c) {\n    long l;\n    int withvalues = 0;\n    robj *hash;\n    listpackEntry ele;\n\n    if (c->argc >= 3) {\n        if (getRangeLongFromObjectOrReply(c,c->argv[2],-LONG_MAX,LONG_MAX,&l,NULL) != C_OK) return;\n        if (c->argc > 4 || (c->argc == 4 && strcasecmp(c->argv[3]->ptr,\"withvalues\"))) {\n            addReplyErrorObject(c,shared.syntaxerr);\n            return;\n        } else if (c->argc == 4) {\n            withvalues = 1;\n            if (l < -LONG_MAX/2 || l > LONG_MAX/2) {\n                addReplyError(c,\"value is out of range\");\n                return;\n            }\n        }\n        hrandfieldWithCountCommand(c, l, withvalues);\n        return;\n    }\n\n    /* Handle variant without <count> argument. Reply with simple bulk string */\n    if ((hash = lookupKeyReadOrReply(c,c->argv[1],shared.null[c->resp]))== NULL ||\n        checkType(c,hash,OBJ_HASH)) {\n        return;\n    }\n\n    hashTypeRandomElement(hash,hashTypeLength(hash),&ele,NULL);\n    hashReplyFromListpackEntry(c, &ele);\n}",
  "abstract_func": "void hrandfieldCommand(client *VAR_0) {\n    long VAR_1;\n    int VAR_2 = 0;\n    robj *VAR_3;\n    listpackEntry VAR_4;\n\n    if (VAR_0->argc >= 3) {\n        if (getRangeLongFromObjectOrReply(VAR_0,VAR_0->argv[2],-VAR_5,VAR_5,&VAR_1,NULL) != VAR_6) return;\n        if (VAR_0->argc > 4 || (VAR_0->argc == 4 && strcasecmp(VAR_0->argv[3]->ptr,\"withvalues\"))) {\n            addReplyErrorObject(VAR_0,VAR_7.syntaxerr);\n            return;\n        } else if (VAR_0->argc == 4) {\n            VAR_2 = 1;\n            if (VAR_1 < -VAR_5/2 || VAR_1 > VAR_5/2) {\n                addReplyError(VAR_0,\"value is out of range\");\n                return;\n            }\n        }\n        hrandfieldWithCountCommand(VAR_0, VAR_1, VAR_2);\n        return;\n    }\n\n    /* COMMENT_0 */\n    if ((VAR_3 = lookupKeyReadOrReply(VAR_0,VAR_0->argv[1],VAR_7.null[VAR_0->resp]))== NULL ||\n        checkType(VAR_0,VAR_3,VAR_8)) {\n        return;\n    }\n\n    hashTypeRandomElement(VAR_3,hashTypeLength(VAR_3),&VAR_4,NULL);\n    hashReplyFromListpackEntry(VAR_0, &VAR_4);\n}",
  "func_graph_path": "redis/2a2a582e7cd99ba3b531336b8bd41df2b566e619/t_hash.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -5,13 +5,13 @@\n     listpackEntry ele;\n \n     if (c->argc >= 3) {\n-        if (getLongFromObjectOrReply(c,c->argv[2],&l,NULL) != C_OK) return;\n+        if (getRangeLongFromObjectOrReply(c,c->argv[2],-LONG_MAX,LONG_MAX,&l,NULL) != C_OK) return;\n         if (c->argc > 4 || (c->argc == 4 && strcasecmp(c->argv[3]->ptr,\"withvalues\"))) {\n             addReplyErrorObject(c,shared.syntaxerr);\n             return;\n         } else if (c->argc == 4) {\n             withvalues = 1;\n-            if (l < LONG_MIN/2 || l > LONG_MAX/2) {\n+            if (l < -LONG_MAX/2 || l > LONG_MAX/2) {\n                 addReplyError(c,\"value is out of range\");\n                 return;\n             }",
  "diff_line_info": {
    "deleted_lines": [
      "        if (getLongFromObjectOrReply(c,c->argv[2],&l,NULL) != C_OK) return;",
      "            if (l < LONG_MIN/2 || l > LONG_MAX/2) {"
    ],
    "added_lines": [
      "        if (getRangeLongFromObjectOrReply(c,c->argv[2],-LONG_MAX,LONG_MAX,&l,NULL) != C_OK) return;",
      "            if (l < -LONG_MAX/2 || l > LONG_MAX/2) {"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/redis/redis/pull/11848",
  "description": {
    "pr_info": {
      "title": "Release 7.0.9",
      "number": 11848
    },
    "comment": [
      "Upgrade urgency: SECURITY, contains fixes to security issues.\r\n\r\nSecurity Fixes:\r\n* (CVE-2023-25155) Specially crafted SRANDMEMBER, ZRANDMEMBER, and HRANDFIELD\r\n  commands can trigger an integer overflow, resulting in a runtime assertion\r\n  and termination of the Redis server process.\r\n* (CVE-2022-36021) String matching commands (like SCAN or KEYS) with a specially\r\n  crafted pattern to trigger a denial-of-service attack on Redis, causing it to\r\n  hang and consume 100% CPU time.\r\n\r\nBug Fixes\r\n=========\r\n\r\n* Fix a crash when reaching the maximum invalidations limit of client-side tracking (#11814)\r\n* Fix a crash when SPUBLISH is used after passing the cluster-link-sendbuf-limit (#11752)\r\n* Fix possible memory corruption in FLUSHALL when a client watches more than one key (#11854)\r\n* Fix cluster inbound link keepalive time (#11785)\r\n* Flush propagation list in active-expire of writable replicas to fix an assertion (#11615)\r\n* Avoid propagating DEL of lazy expire from SCAN and RANDOMKEY as MULTI-EXEC (#11788)\r\n\r\nPerformance and resource utilization improvements\r\n=================================================\r\n\r\n* Avoid realloc to reduce size of strings when it is unneeded (#11766)\r\n* Improve CLUSTER SLOTS reply efficiency for non-continuous slots (#11745)\r\n",
      "freebsd cluster CI failed on `  08:53:20> Cluster is writable: FAILED: caught an error in the test No good startup node found.  127.0.0.1:30000: couldn't open socket: address already in use`.\r\nknown issue.",
      "CI failed on some jobs that are likely to be known CI issues. retrying...\r\n* macos redis test hang and got terminated by the runner\r\n* macos cluster test failed in 04-resharding.tcl\r\n* freebsd redis test failed in `min-slaves-to-write is ignored by slaves` with `NOREPLICAS Not enough good replicas to write.`",
      "another CI attempt:\r\n* freebsd failed on `[exception]: Executing test client: couldn't open socket: address already in use` (same as the first attempt in this PR).\r\n* macos CI decommissioned by the runner again. (a known issue)\r\n* macos cluster CI passed."
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 1.0  \nThe commit explicitly addresses an integer overflow security issue (CVE-2023-25155) with clear bounds checks in the code, confirming it as a security fix."
}