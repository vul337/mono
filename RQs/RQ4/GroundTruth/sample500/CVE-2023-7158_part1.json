{
  "cve_id": "CVE-2023-7158",
  "cwe_ids": [
    "CWE-787"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "micropython",
  "commit_msg": "py/objslice: Validate that the argument to indices() is an integer.\n\nOtherwise passing in a non-integer can lead to an invalid memory access.\n\nThanks to Junwha Hong and Wonil Jang @S2Lab, UNIST for finding the issue.\n\nFixes issue #13007.\n\nSigned-off-by: Damien George <damien@micropython.org>",
  "commit_hash": "f397a3ec318f3ad05aa287764ae7cef32202380f",
  "git_url": "https://github.com/micropython/micropython/commit/f397a3ec318f3ad05aa287764ae7cef32202380f",
  "file_path": "py/objslice.c",
  "func_name": "slice_indices",
  "func_before": "STATIC mp_obj_t slice_indices(mp_obj_t self_in, mp_obj_t length_obj) {\n    mp_int_t length = mp_obj_int_get_checked(length_obj);\n    mp_bound_slice_t bound_indices;\n    mp_obj_slice_indices(self_in, length, &bound_indices);\n\n    mp_obj_t results[3] = {\n        MP_OBJ_NEW_SMALL_INT(bound_indices.start),\n        MP_OBJ_NEW_SMALL_INT(bound_indices.stop),\n        MP_OBJ_NEW_SMALL_INT(bound_indices.step),\n    };\n    return mp_obj_new_tuple(3, results);\n}",
  "abstract_func_before": "STATIC VAR_0 slice_indices(mp_obj_t VAR_1, mp_obj_t VAR_2) {\n    mp_int_t VAR_3 = mp_obj_int_get_checked(VAR_2);\n    mp_bound_slice_t VAR_4;\n    mp_obj_slice_indices(VAR_1, VAR_3, &VAR_4);\n\n    mp_obj_t VAR_5[3] = {\n        MP_OBJ_NEW_SMALL_INT(VAR_4.start),\n        MP_OBJ_NEW_SMALL_INT(VAR_4.stop),\n        MP_OBJ_NEW_SMALL_INT(VAR_4.step),\n    };\n    return mp_obj_new_tuple(3, VAR_5);\n}",
  "func_graph_path_before": null,
  "func": "STATIC mp_obj_t slice_indices(mp_obj_t self_in, mp_obj_t length_obj) {\n    mp_int_t length = mp_obj_get_int(length_obj);\n    mp_bound_slice_t bound_indices;\n    mp_obj_slice_indices(self_in, length, &bound_indices);\n\n    mp_obj_t results[3] = {\n        MP_OBJ_NEW_SMALL_INT(bound_indices.start),\n        MP_OBJ_NEW_SMALL_INT(bound_indices.stop),\n        MP_OBJ_NEW_SMALL_INT(bound_indices.step),\n    };\n    return mp_obj_new_tuple(3, results);\n}",
  "abstract_func": "STATIC VAR_0 slice_indices(mp_obj_t VAR_1, mp_obj_t VAR_2) {\n    mp_int_t VAR_3 = mp_obj_get_int(VAR_2);\n    mp_bound_slice_t VAR_4;\n    mp_obj_slice_indices(VAR_1, VAR_3, &VAR_4);\n\n    mp_obj_t VAR_5[3] = {\n        MP_OBJ_NEW_SMALL_INT(VAR_4.start),\n        MP_OBJ_NEW_SMALL_INT(VAR_4.stop),\n        MP_OBJ_NEW_SMALL_INT(VAR_4.step),\n    };\n    return mp_obj_new_tuple(3, VAR_5);\n}",
  "func_graph_path": null,
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,5 +1,5 @@\n STATIC mp_obj_t slice_indices(mp_obj_t self_in, mp_obj_t length_obj) {\n-    mp_int_t length = mp_obj_int_get_checked(length_obj);\n+    mp_int_t length = mp_obj_get_int(length_obj);\n     mp_bound_slice_t bound_indices;\n     mp_obj_slice_indices(self_in, length, &bound_indices);\n ",
  "diff_line_info": {
    "deleted_lines": [
      "    mp_int_t length = mp_obj_int_get_checked(length_obj);"
    ],
    "added_lines": [
      "    mp_int_t length = mp_obj_get_int(length_obj);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/micropython/micropython/pull/13039",
  "description": {
    "pr_info": {
      "title": "py/objslice: Validate that the argument to indices() is an integer.",
      "number": 13039
    },
    "comment": [
      "Otherwise passing in a non-integer can lead to an invalid memory access.\r\n\r\nThanks to Junwha Hong and Wonil Jang @S2Lab, UNIST for finding the issue.\r\n\r\nFixes issue #13007.",
      "Code size report:\n\n```\n   bare-arm:    +0 +0.000% \nminimal x86:    +0 +0.000% \n   unix x64:    +0 +0.000% standard\n      stm32:    +0 +0.000% PYBV10\n     mimxrt:    +0 +0.000% TEENSY40\n        rp2:    +0 +0.000% RPI_PICO\n       samd:    +0 +0.000% ADAFRUIT_ITSYBITSY_M4_EXPRESS\n\n```\n",
      "## [Codecov](https://app.codecov.io/gh/micropython/micropython/pull/13039?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=micropython) Report\nAll modified and coverable lines are covered by tests :white_check_mark:\n> Comparison is base [(`fce8d9f`)](https://app.codecov.io/gh/micropython/micropython/commit/fce8d9fd55409ab1027beee5671bc653fb5beb97?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=micropython) 98.43% compared to head [(`f397a3e`)](https://app.codecov.io/gh/micropython/micropython/pull/13039?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=micropython) 98.43%.\n\n\n<details><summary>Additional details and impacted files</summary>\n\n\n```diff\n@@           Coverage Diff           @@\n##           master   #13039   +/-   ##\n=======================================\n  Coverage   98.43%   98.43%           \n=======================================\n  Files         158      158           \n  Lines       20978    20978           \n=======================================\n  Hits        20649    20649           \n  Misses        329      329           \n```\n\n\n\n</details>\n\n[:umbrella: View full report in Codecov by Sentry](https://app.codecov.io/gh/micropython/micropython/pull/13039?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=micropython).   \n:loudspeaker: Have feedback on the report? [Share it here](https://about.codecov.io/codecov-pr-comment-feedback/?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=micropython).\n"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.9"
}