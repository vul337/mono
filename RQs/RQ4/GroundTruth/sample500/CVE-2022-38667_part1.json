{
  "cve_id": "CVE-2022-38667",
  "cwe_ids": [
    "CWE-416"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
  "cvss_is_v3": true,
  "repo_name": "CrowCpp/Crow",
  "commit_msg": "Prevent HTTP pipelining which Crow doesn't support.",
  "commit_hash": "fba01dc76d6ea940ad7c8392e8f39f9647241d8e",
  "git_url": "https://github.com/CrowCpp/Crow/commit/fba01dc76d6ea940ad7c8392e8f39f9647241d8e",
  "file_path": "include/crow/app.h",
  "func_name": "stop",
  "func_before": "void stop()\n        {\n#ifdef CROW_ENABLE_SSL\n            if (ssl_used_)\n            {\n                if (ssl_server_) { ssl_server_->stop(); }\n            }\n            else\n#endif\n            {\n                std::vector<crow::websocket::connection*> websockets_to_close = websockets_;\n                for (auto websocket : websockets_to_close)\n                {\n                    CROW_LOG_INFO << \"Quitting Websocket: \" << websocket;\n                    websocket->close(\"Server Application Terminated\");\n                }\n                if (server_) { server_->stop(); }\n            }\n        }",
  "abstract_func_before": "void stop()\n        {\n#ifdef VAR_0\n            if (VAR_1)\n            {\n                if (VAR_2) { VAR_2->stop(); }\n            }\n            else\n#endif\n            {\n                std::vector<crow::websocket::connection*> VAR_3 = VAR_4;\n                for (auto VAR_5 : VAR_3)\n                {\n                    VAR_6 << \"Quitting Websocket: \" << VAR_5;\n                    VAR_5->close(\"Server Application Terminated\");\n                }\n                if (VAR_7) { VAR_7->stop(); }\n            }\n        }",
  "func_graph_path_before": "CrowCpp/Crow/fba01dc76d6ea940ad7c8392e8f39f9647241d8e/app.h/vul/before/0.json",
  "func": "void stop()\n        {\n#ifdef CROW_ENABLE_SSL\n            if (ssl_used_)\n            {\n                if (ssl_server_) { ssl_server_->stop(); }\n            }\n            else\n#endif\n            {\n                // TODO(EDev): Move these 6 lines to a method in http_server.\n                std::vector<crow::websocket::connection*> websockets_to_close = websockets_;\n                for (auto websocket : websockets_to_close)\n                {\n                    CROW_LOG_INFO << \"Quitting Websocket: \" << websocket;\n                    websocket->close(\"Server Application Terminated\");\n                }\n                if (server_) { server_->stop(); }\n            }\n        }",
  "abstract_func": "void stop()\n        {\n#ifdef VAR_0\n            if (VAR_1)\n            {\n                if (VAR_2) { VAR_2->stop(); }\n            }\n            else\n#endif\n            {\n                /* COMMENT_0 */\n                std::vector<crow::websocket::connection*> VAR_3 = VAR_4;\n                for (auto VAR_5 : VAR_3)\n                {\n                    VAR_6 << \"Quitting Websocket: \" << VAR_5;\n                    VAR_5->close(\"Server Application Terminated\");\n                }\n                if (VAR_7) { VAR_7->stop(); }\n            }\n        }",
  "func_graph_path": "CrowCpp/Crow/fba01dc76d6ea940ad7c8392e8f39f9647241d8e/app.h/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -8,6 +8,7 @@\n             else\n #endif\n             {\n+                // TODO(EDev): Move these 6 lines to a method in http_server.\n                 std::vector<crow::websocket::connection*> websockets_to_close = websockets_;\n                 for (auto websocket : websockets_to_close)\n                 {",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "                // TODO(EDev): Move these 6 lines to a method in http_server."
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/CrowCpp/Crow/pull/524",
  "description": {
    "pr_info": {
      "title": "Prevent HTTP pipelining",
      "number": 524
    },
    "comment": [
      "Fixes a potential use-after-free vulnerability where using HTTP pipelining could cause Crow to execute code related to a connection after deleting it.\r\n\r\nIt also fixes a small bug where websocket connections could be established with invalid HTTP requests (ones that don't have a `Host` header)\r\n\r\nThanks to hebi Gynvael Coldwind for discovering and reporting the vulnerability."
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 0.9\n\nThe patch addresses a security issue involving a use-after-free vulnerability and invalid HTTP requests, even though the code diff shows a refactor, which is part of the fix."
}