{
  "cve_id": "CVE-2016-9177",
  "cwe_ids": [
    "CWE-22"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:N/A:N",
  "cvss_is_v3": false,
  "repo_name": "perwendel/spark",
  "commit_msg": "Fix for #700 - Arbitrary File Read Vulnerability",
  "commit_hash": "26b57d0596ee73c14c558463943ef0857e53b91f",
  "git_url": "https://github.com/perwendel/spark/commit/26b57d0596ee73c14c558463943ef0857e53b91f",
  "file_path": "src/main/java/spark/staticfiles/StaticFilesConfiguration.java",
  "func_name": "consume",
  "func_before": "public boolean consume(HttpServletRequest httpRequest,\n                           HttpServletResponse httpResponse) throws IOException {\n\n        if (consumeWithFileResourceHandlers(httpRequest, httpResponse)) {\n            return true;\n        }\n\n        if (consumeWithJarResourceHandler(httpRequest, httpResponse)) {\n            return true;\n        }\n\n        return false;\n    }",
  "abstract_func_before": "public boolean consume(HttpServletRequest VAR_0,\n                           HttpServletResponse VAR_1) throws IOException {\n\n        if (consumeWithFileResourceHandlers(VAR_0, VAR_1)) {\n            return true;\n        }\n\n        if (consumeWithJarResourceHandler(VAR_0, VAR_1)) {\n            return true;\n        }\n\n        return false;\n    }",
  "func_graph_path_before": "perwendel/spark/26b57d0596ee73c14c558463943ef0857e53b91f/StaticFilesConfiguration.java/vul/before/4.json",
  "func": "public boolean consume(HttpServletRequest httpRequest,\n                           HttpServletResponse httpResponse) throws IOException {\n        try {\n            if (consumeWithFileResourceHandlers(httpRequest, httpResponse)) {\n                return true;\n            }\n\n            if (consumeWithJarResourceHandler(httpRequest, httpResponse)) {\n                return true;\n            }\n        } catch (DirectoryTraversal.DirectoryTraversalDetection directoryTraversalDetection) {\n            LOG.warn(\"directoryTraversalDetection for path: \" + httpRequest.getPathInfo());\n        }\n        return false;\n    }",
  "abstract_func": "public boolean consume(HttpServletRequest VAR_0,\n                           HttpServletResponse VAR_1) throws IOException {\n        try {\n            if (consumeWithFileResourceHandlers(VAR_0, VAR_1)) {\n                return true;\n            }\n\n            if (consumeWithJarResourceHandler(VAR_0, VAR_1)) {\n                return true;\n            }\n        } catch (DirectoryTraversal.DirectoryTraversalDetection VAR_2) {\n            VAR_3.warn(\"directoryTraversalDetection for path: \" + VAR_0.getPathInfo());\n        }\n        return false;\n    }",
  "func_graph_path": "perwendel/spark/26b57d0596ee73c14c558463943ef0857e53b91f/StaticFilesConfiguration.java/vul/after/4.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,13 +1,15 @@\n public boolean consume(HttpServletRequest httpRequest,\n                            HttpServletResponse httpResponse) throws IOException {\n+        try {\n+            if (consumeWithFileResourceHandlers(httpRequest, httpResponse)) {\n+                return true;\n+            }\n \n-        if (consumeWithFileResourceHandlers(httpRequest, httpResponse)) {\n-            return true;\n+            if (consumeWithJarResourceHandler(httpRequest, httpResponse)) {\n+                return true;\n+            }\n+        } catch (DirectoryTraversal.DirectoryTraversalDetection directoryTraversalDetection) {\n+            LOG.warn(\"directoryTraversalDetection for path: \" + httpRequest.getPathInfo());\n         }\n-\n-        if (consumeWithJarResourceHandler(httpRequest, httpResponse)) {\n-            return true;\n-        }\n-\n         return false;\n     }",
  "diff_line_info": {
    "deleted_lines": [
      "        if (consumeWithFileResourceHandlers(httpRequest, httpResponse)) {",
      "            return true;",
      "",
      "        if (consumeWithJarResourceHandler(httpRequest, httpResponse)) {",
      "            return true;",
      "        }",
      ""
    ],
    "added_lines": [
      "        try {",
      "            if (consumeWithFileResourceHandlers(httpRequest, httpResponse)) {",
      "                return true;",
      "            }",
      "            if (consumeWithJarResourceHandler(httpRequest, httpResponse)) {",
      "                return true;",
      "            }",
      "        } catch (DirectoryTraversal.DirectoryTraversalDetection directoryTraversalDetection) {",
      "            LOG.warn(\"directoryTraversalDetection for path: \" + httpRequest.getPathInfo());"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/perwendel/spark/pull/701",
  "description": {
    "pr_info": {
      "title": "Fix for #700 - Arbitrary File Read Vulnerability",
      "number": 701
    },
    "comment": [
      "Fix for #700 \r\nThis is my take on the directory traversal problem.\r\nPlease review and try out.",
      "I've just verified it for Windows, didn't have time to test for linux etc.\nWhen travis CI built it didn't detect directory traversal for the test case for external resources. There's probably an issue with how path handling differs in unix-like OSs and windows.\n",
      "DISCLAIMER: Didn't really have time to look closely, so I could be talking out of my arse so to speak, but: wouldn't using `File.getCanonicalPath()` be safer than string manipulation? I'd certainly trust JDK library methods more than my own code, especially when it comes to security. Also, there are all kinds of clever ways (encodings, escapes and what not) of defeating checking strings for \"..\", \"/\", \"\\\" etc.\n",
      "@jakaarl Sorry, merged before I saw your comment. The guy making the post emailed and said it was a good solution. But I'll follow your advise and see if I can make it better. New PR will be created if you're right!\n"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 1.0"
}