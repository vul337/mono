{
  "cve_id": "CVE-2021-45290",
  "cwe_ids": [
    "CWE-617"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "WebAssembly/binaryen",
  "commit_msg": "fix",
  "commit_hash": "859d8996d68b5d279712172669c216569398ae97",
  "git_url": "https://github.com/WebAssembly/binaryen/commit/859d8996d68b5d279712172669c216569398ae97",
  "file_path": "src/wasm/wasm-binary.cpp",
  "func_name": "WasmBinaryBuilder::visitRefAs",
  "func_before": "void WasmBinaryBuilder::visitRefAs(RefAs* curr, uint8_t code) {\n  BYN_TRACE(\"zz node: RefAs\\n\");\n  switch (code) {\n    case BinaryConsts::RefAsNonNull:\n      curr->op = RefAsNonNull;\n      break;\n    case BinaryConsts::RefAsFunc:\n      curr->op = RefAsFunc;\n      break;\n    case BinaryConsts::RefAsData:\n      curr->op = RefAsData;\n      break;\n    case BinaryConsts::RefAsI31:\n      curr->op = RefAsI31;\n      break;\n    default:\n      WASM_UNREACHABLE(\"invalid code for ref.as_*\");\n  }\n  curr->value = popNonVoidExpression();\n  curr->finalize();\n}",
  "abstract_func_before": "void WasmBinaryBuilder::visitRefAs(RefAs* VAR_0, uint8_t VAR_1) {\n  BYN_TRACE(\"zz node: RefAs\\n\");\n  switch (VAR_1) {\n    case BinaryConsts::RefAsNonNull:\n      VAR_0->op = VAR_2;\n      break;\n    case BinaryConsts::RefAsFunc:\n      VAR_0->op = VAR_3;\n      break;\n    case BinaryConsts::RefAsData:\n      VAR_0->op = VAR_4;\n      break;\n    case BinaryConsts::RefAsI31:\n      VAR_0->op = VAR_5;\n      break;\n    default:\n      WASM_UNREACHABLE(\"invalid code for ref.as_*\");\n  }\n  VAR_0->value = popNonVoidExpression();\n  VAR_0->finalize();\n}",
  "func_graph_path_before": "WebAssembly/binaryen/859d8996d68b5d279712172669c216569398ae97/wasm-binary.cpp/vul/before/0.json",
  "func": "void WasmBinaryBuilder::visitRefAs(RefAs* curr, uint8_t code) {\n  BYN_TRACE(\"zz node: RefAs\\n\");\n  switch (code) {\n    case BinaryConsts::RefAsNonNull:\n      curr->op = RefAsNonNull;\n      break;\n    case BinaryConsts::RefAsFunc:\n      curr->op = RefAsFunc;\n      break;\n    case BinaryConsts::RefAsData:\n      curr->op = RefAsData;\n      break;\n    case BinaryConsts::RefAsI31:\n      curr->op = RefAsI31;\n      break;\n    default:\n      WASM_UNREACHABLE(\"invalid code for ref.as_*\");\n  }\n  curr->value = popNonVoidExpression();\n  if (!curr->value->type.isRef() && curr->value->type != Type::unreachable) {\n    throwError(\"bad input type for ref.as: \" + curr->value->type.toString());\n  }\n  curr->finalize();\n}",
  "abstract_func": "void WasmBinaryBuilder::visitRefAs(RefAs* VAR_0, uint8_t VAR_1) {\n  BYN_TRACE(\"zz node: RefAs\\n\");\n  switch (VAR_1) {\n    case BinaryConsts::RefAsNonNull:\n      VAR_0->op = VAR_2;\n      break;\n    case BinaryConsts::RefAsFunc:\n      VAR_0->op = VAR_3;\n      break;\n    case BinaryConsts::RefAsData:\n      VAR_0->op = VAR_4;\n      break;\n    case BinaryConsts::RefAsI31:\n      VAR_0->op = VAR_5;\n      break;\n    default:\n      WASM_UNREACHABLE(\"invalid code for ref.as_*\");\n  }\n  VAR_0->value = popNonVoidExpression();\n  if (!VAR_0->value->type.isRef() && VAR_0->value->type != Type::unreachable) {\n    throwError(\"bad input type for ref.as: \" + VAR_0->value->type.toString());\n  }\n  VAR_0->finalize();\n}",
  "func_graph_path": "WebAssembly/binaryen/859d8996d68b5d279712172669c216569398ae97/wasm-binary.cpp/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -17,5 +17,8 @@\n       WASM_UNREACHABLE(\"invalid code for ref.as_*\");\n   }\n   curr->value = popNonVoidExpression();\n+  if (!curr->value->type.isRef() && curr->value->type != Type::unreachable) {\n+    throwError(\"bad input type for ref.as: \" + curr->value->type.toString());\n+  }\n   curr->finalize();\n }",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "  if (!curr->value->type.isRef() && curr->value->type != Type::unreachable) {",
      "    throwError(\"bad input type for ref.as: \" + curr->value->type.toString());",
      "  }"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/WebAssembly/binaryen/pull/4389",
  "description": {
    "pr_info": {
      "title": "Add binary format parse checking for ref.as input type",
      "number": 4389
    },
    "comment": [
      "If that type is not valid then we cannot even create and finalize the node,\r\nwhich means we'd hit an assertion inside finalize(), before we reach the\r\nvalidator.\r\n\r\nFixes #4383"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.95"
}