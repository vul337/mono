{
  "cve_id": "CVE-2022-4725",
  "cwe_ids": [
    "CWE-918"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
  "cvss_is_v3": true,
  "repo_name": "aws-amplify/aws-sdk-android",
  "commit_msg": "fix(core): added fix for xml parser (#3100)\n\n* added fix for xml parser vulnerability\r\n\r\n* added fix for xml parser vulnerability\r\n\r\nCo-authored-by: Banji Jolaoso <banjij@amazon.com>",
  "commit_hash": "c3e6d69422e1f0c80fe53f2d757b8df97619af2b",
  "git_url": "https://github.com/aws-amplify/aws-sdk-android/commit/c3e6d69422e1f0c80fe53f2d757b8df97619af2b",
  "file_path": "aws-android-sdk-core/src/main/java/com/amazonaws/regions/RegionMetadataParser.java",
  "func_name": "internalParse",
  "func_before": "@SuppressWarnings(\"checkstyle:emptyblock\")\n    private static List<Region> internalParse(\n            final InputStream input,\n            final boolean endpointVerification) throws IOException {\n\n        Document document;\n        try {\n\n            DocumentBuilderFactory factory =\n                    DocumentBuilderFactory.newInstance();\n\n            DocumentBuilder documentBuilder = factory.newDocumentBuilder();\n            document = documentBuilder.parse(input);\n\n        } catch (IOException exception) {\n            throw exception;\n        } catch (Exception exception) {\n            throw new IOException(\"Unable to parse region metadata file: \"\n                    + exception.getMessage(),\n                    exception);\n        } finally {\n            try {\n                input.close();\n            } catch (IOException exception) {\n            }\n        }\n\n        NodeList regionNodes = document.getElementsByTagName(REGION_TAG);\n        List<Region> regions = new ArrayList<Region>();\n        for (int i = 0; i < regionNodes.getLength(); i++) {\n            Node node = regionNodes.item(i);\n            if (node.getNodeType() == Node.ELEMENT_NODE) {\n                Element element = (Element) node;\n                regions.add(parseRegionElement(element, endpointVerification));\n            }\n        }\n\n        return regions;\n    }",
  "abstract_func_before": "@SuppressWarnings(\"checkstyle:emptyblock\")\n    private static List<Region> internalParse(\n            final InputStream VAR_0,\n            final boolean VAR_1) throws IOException {\n\n        Document VAR_2;\n        try {\n\n            DocumentBuilderFactory VAR_3 =\n                    VAR_4.newInstance();\n\n            DocumentBuilder VAR_5 = VAR_3.newDocumentBuilder();\n            VAR_2 = VAR_5.parse(VAR_0);\n\n        } catch (IOException VAR_6) {\n            throw VAR_6;\n        } catch (Exception VAR_6) {\n            throw new IOException(\"Unable to parse region metadata file: \"\n                    + VAR_6.getMessage(),\n                    VAR_6);\n        } finally {\n            try {\n                VAR_0.close();\n            } catch (IOException VAR_6) {\n            }\n        }\n\n        NodeList VAR_7 = VAR_2.getElementsByTagName(VAR_8);\n        List<Region> VAR_9 = new ArrayList<Region>();\n        for (int VAR_10 = 0; VAR_10 < VAR_7.getLength(); VAR_10++) {\n            Node VAR_11 = VAR_7.item(VAR_10);\n            if (VAR_11.getNodeType() == VAR_12.ELEMENT_NODE) {\n                Element VAR_13 = (Element) VAR_11;\n                VAR_9.add(parseRegionElement(VAR_13, VAR_1));\n            }\n        }\n\n        return VAR_9;\n    }",
  "func_graph_path_before": "aws-amplify/aws-sdk-android/c3e6d69422e1f0c80fe53f2d757b8df97619af2b/RegionMetadataParser.java/vul/before/0.json",
  "func": "@SuppressWarnings(\"checkstyle:emptyblock\")\n    private static List<Region> internalParse(\n            final InputStream input,\n            final boolean endpointVerification) throws IOException {\n\n        Document document;\n        try {\n\n            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n            factory.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n            factory.setXIncludeAware(false);\n            factory.setExpandEntityReferences(false);\n            DocumentBuilder documentBuilder = factory.newDocumentBuilder();\n            document = documentBuilder.parse(input);\n\n        } catch (IOException exception) {\n            throw exception;\n        } catch (Exception exception) {\n            throw new IOException(\"Unable to parse region metadata file: \"\n                    + exception.getMessage(),\n                    exception);\n        } finally {\n            try {\n                input.close();\n            } catch (IOException exception) {\n            }\n        }\n\n        NodeList regionNodes = document.getElementsByTagName(REGION_TAG);\n        List<Region> regions = new ArrayList<Region>();\n        for (int i = 0; i < regionNodes.getLength(); i++) {\n            Node node = regionNodes.item(i);\n            if (node.getNodeType() == Node.ELEMENT_NODE) {\n                Element element = (Element) node;\n                regions.add(parseRegionElement(element, endpointVerification));\n            }\n        }\n\n        return regions;\n    }",
  "abstract_func": "@SuppressWarnings(\"checkstyle:emptyblock\")\n    private static List<Region> internalParse(\n            final InputStream VAR_0,\n            final boolean VAR_1) throws IOException {\n\n        Document VAR_2;\n        try {\n\n            DocumentBuilderFactory VAR_3 = VAR_4.newInstance();\n            VAR_3.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n            VAR_3.setXIncludeAware(false);\n            VAR_3.setExpandEntityReferences(false);\n            DocumentBuilder VAR_5 = VAR_3.newDocumentBuilder();\n            VAR_2 = VAR_5.parse(VAR_0);\n\n        } catch (IOException VAR_6) {\n            throw VAR_6;\n        } catch (Exception VAR_6) {\n            throw new IOException(\"Unable to parse region metadata file: \"\n                    + VAR_6.getMessage(),\n                    VAR_6);\n        } finally {\n            try {\n                VAR_0.close();\n            } catch (IOException VAR_6) {\n            }\n        }\n\n        NodeList VAR_7 = VAR_2.getElementsByTagName(VAR_8);\n        List<Region> VAR_9 = new ArrayList<Region>();\n        for (int VAR_10 = 0; VAR_10 < VAR_7.getLength(); VAR_10++) {\n            Node VAR_11 = VAR_7.item(VAR_10);\n            if (VAR_11.getNodeType() == VAR_12.ELEMENT_NODE) {\n                Element VAR_13 = (Element) VAR_11;\n                VAR_9.add(parseRegionElement(VAR_13, VAR_1));\n            }\n        }\n\n        return VAR_9;\n    }",
  "func_graph_path": "aws-amplify/aws-sdk-android/c3e6d69422e1f0c80fe53f2d757b8df97619af2b/RegionMetadataParser.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -6,9 +6,10 @@\n         Document document;\n         try {\n \n-            DocumentBuilderFactory factory =\n-                    DocumentBuilderFactory.newInstance();\n-\n+            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n+            factory.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n+            factory.setXIncludeAware(false);\n+            factory.setExpandEntityReferences(false);\n             DocumentBuilder documentBuilder = factory.newDocumentBuilder();\n             document = documentBuilder.parse(input);\n ",
  "diff_line_info": {
    "deleted_lines": [
      "            DocumentBuilderFactory factory =",
      "                    DocumentBuilderFactory.newInstance();",
      ""
    ],
    "added_lines": [
      "            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();",
      "            factory.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);",
      "            factory.setXIncludeAware(false);",
      "            factory.setExpandEntityReferences(false);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/aws-amplify/aws-sdk-android/pull/3100",
  "description": {
    "pr_info": {
      "title": "fix(core): added fix for xml parser",
      "number": 3100
    },
    "comment": [
      "*Issue #, if available:*\r\n\r\n*Description of changes:*\r\nFixed xml parser\r\n\r\nBy submitting this pull request, I confirm that you can use, modify, copy, and redistribute this contribution, under the terms of your choice.\r\n"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.95"
}