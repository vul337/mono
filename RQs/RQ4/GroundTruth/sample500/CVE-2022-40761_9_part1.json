{
  "cve_id": "CVE-2022-40761",
  "cwe_ids": [
    "CWE-1284"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
  "cvss_is_v3": true,
  "repo_name": "Samsung/mTower",
  "commit_msg": "Fixed CVE-2022-40761\n\nSigned-off-by: Taras Drozdovskyi <t.drozdovsky@samsung.com>",
  "commit_hash": "c5f30c70e48786e1aef8c815f35e406a6c4fb3ae",
  "git_url": "https://github.com/Samsung/mTower/commit/c5f30c70e48786e1aef8c815f35e406a6c4fb3ae",
  "file_path": "tee/tee/tee_pobj.c",
  "func_name": "tee_pobj_get",
  "func_before": "TEE_Result tee_pobj_get(TEE_UUID *uuid, void *obj_id, uint32_t obj_id_len,\n\t\t\tuint32_t flags, bool temporary,\n\t\t\tconst struct tee_file_operations *fops,\n\t\t\tstruct tee_pobj **obj)\n{\n\tstruct tee_pobj *o;\n\tTEE_Result res;\n\n\t*obj = NULL;\n\n//\tmutex_lock(&pobjs_mutex);\n\t/* Check if file is open */\n\tTAILQ_FOREACH(o, &tee_pobjs, link) {\n\t\tif ((obj_id_len == o->obj_id_len) &&\n\t\t    (memcmp(obj_id, o->obj_id, obj_id_len) == 0) &&\n\t\t    (memcmp(uuid, &o->uuid, sizeof(TEE_UUID)) == 0) &&\n\t\t    (fops == o->fops)) {\n\t\t\t*obj = o;\n\t\t}\n\t}\n\n\tif (*obj) {\n\t\tif (temporary != (*obj)->temporary) {\n\t\t\tres = TEE_ERROR_ACCESS_CONFLICT;\n\t\t\tgoto out;\n\t\t}\n\t\tres = tee_pobj_check_access((*obj)->flags, flags);\n\t\tif (res == TEE_SUCCESS)\n\t\t\t(*obj)->refcnt++;\n\t\tgoto out;\n\t}\n\n\t/* new file */\n\to = calloc(1, sizeof(struct tee_pobj));\n\tif (!o) {\n\t\tres = TEE_ERROR_OUT_OF_MEMORY;\n\t\tgoto out;\n\t}\n\n\to->refcnt = 1;\n\tmemcpy(&o->uuid, uuid, sizeof(TEE_UUID));\n\to->flags = flags;\n\to->fops = fops;\n\to->temporary = temporary;\n\n\to->obj_id = malloc(obj_id_len);\n\tif (o->obj_id == NULL) {\n\t\tfree(o);\n\t\tres = TEE_ERROR_OUT_OF_MEMORY;\n\t\tgoto out;\n\t}\n\tmemcpy(o->obj_id, obj_id, obj_id_len);\n\to->obj_id_len = obj_id_len;\n\n\tTAILQ_INSERT_TAIL(&tee_pobjs, o, link);\n\t*obj = o;\n\n\tres = TEE_SUCCESS;\nout:\n\tif (res != TEE_SUCCESS)\n\t\t*obj = NULL;\n//\tmutex_unlock(&pobjs_mutex);\n\treturn res;\n}",
  "abstract_func_before": "TEE_Result tee_pobj_get(TEE_UUID *VAR_0, void *VAR_1, uint32_t VAR_2,\n\t\t\tuint32_t VAR_3, bool VAR_4,\n\t\t\tconst struct tee_file_operations *VAR_5,\n\t\t\tstruct tee_pobj **VAR_6)\n{\n\tstruct tee_pobj *VAR_7;\n\tTEE_Result VAR_8;\n\n\t*VAR_6 = NULL;\n\n/* COMMENT_0 */\n\t/* COMMENT_1 */\n\tTAILQ_FOREACH(VAR_7, &VAR_9, VAR_10) {\n\t\tif ((VAR_2 == VAR_7->obj_id_len) &&\n\t\t    (memcmp(VAR_1, VAR_7->obj_id, VAR_2) == 0) &&\n\t\t    (memcmp(VAR_0, &VAR_7->uuid, sizeof(TEE_UUID)) == 0) &&\n\t\t    (VAR_5 == VAR_7->fops)) {\n\t\t\t*VAR_6 = VAR_7;\n\t\t}\n\t}\n\n\tif (*VAR_6) {\n\t\tif (VAR_4 != (*VAR_6)->temporary) {\n\t\t\tVAR_8 = VAR_11;\n\t\t\tgoto out;\n\t\t}\n\t\tVAR_8 = tee_pobj_check_access((*VAR_6)->flags, VAR_3);\n\t\tif (VAR_8 == VAR_12)\n\t\t\t(*VAR_6)->refcnt++;\n\t\tgoto out;\n\t}\n\n\t/* COMMENT_2 */\n\tVAR_7 = calloc(1, sizeof(struct tee_pobj));\n\tif (!VAR_7) {\n\t\tVAR_8 = VAR_13;\n\t\tgoto out;\n\t}\n\n\tVAR_7->refcnt = 1;\n\tmemcpy(&VAR_7->uuid, VAR_0, sizeof(TEE_UUID));\n\tVAR_7->flags = VAR_3;\n\tVAR_7->fops = VAR_5;\n\tVAR_7->temporary = VAR_4;\n\n\tVAR_7->obj_id = malloc(VAR_2);\n\tif (VAR_7->obj_id == NULL) {\n\t\tfree(VAR_7);\n\t\tVAR_8 = VAR_13;\n\t\tgoto out;\n\t}\n\tmemcpy(VAR_7->obj_id, VAR_1, VAR_2);\n\tVAR_7->obj_id_len = VAR_2;\n\n\tTAILQ_INSERT_TAIL(&VAR_9, VAR_7, VAR_10);\n\t*VAR_6 = VAR_7;\n\n\tVAR_8 = VAR_12;\nout:\n\tif (VAR_8 != VAR_12)\n\t\t*VAR_6 = NULL;\n/* COMMENT_3 */\n\treturn VAR_8;\n}",
  "func_graph_path_before": "Samsung/mTower/c5f30c70e48786e1aef8c815f35e406a6c4fb3ae/tee_pobj.c/vul/before/0.json",
  "func": "TEE_Result tee_pobj_get(TEE_UUID *uuid, void *obj_id, uint32_t obj_id_len,\n\t\t\tuint32_t flags, bool temporary,\n\t\t\tconst struct tee_file_operations *fops,\n\t\t\tstruct tee_pobj **obj)\n{\n\tstruct tee_pobj *o;\n\tTEE_Result res;\n\n\t*obj = NULL;\n\n//\tmutex_lock(&pobjs_mutex);\n\t/* Check if file is open */\n\tTAILQ_FOREACH(o, &tee_pobjs, link) {\n\t\tif ((obj_id_len == o->obj_id_len) &&\n\t\t    (memcmp(obj_id, o->obj_id, obj_id_len) == 0) &&\n\t\t    (memcmp(uuid, &o->uuid, sizeof(TEE_UUID)) == 0) &&\n\t\t    (fops == o->fops)) {\n\t\t\t*obj = o;\n\t\t}\n\t}\n\n\tif (*obj) {\n\t\tif (temporary != (*obj)->temporary) {\n\t\t\tres = TEE_ERROR_ACCESS_CONFLICT;\n\t\t\tgoto out;\n\t\t}\n\t\tres = tee_pobj_check_access((*obj)->flags, flags);\n\t\tif (res == TEE_SUCCESS)\n\t\t\t(*obj)->refcnt++;\n\t\tgoto out;\n\t}\n\n\t/* new file */\n\to = TEE_Malloc(sizeof(struct tee_pobj), TEE_MALLOC_FILL_ZERO);\n\t// o = calloc(1, sizeof(struct tee_pobj));\n\tif (!o) {\n\t\tres = TEE_ERROR_OUT_OF_MEMORY;\n\t\tgoto out;\n\t}\n\n\to->refcnt = 1;\n\tmemcpy(&o->uuid, uuid, sizeof(TEE_UUID));\n\to->flags = flags;\n\to->fops = fops;\n\to->temporary = temporary;\n\n\to->obj_id = malloc(obj_id_len);\n\tif (o->obj_id == NULL) {\n\t\tfree(o);\n\t\tres = TEE_ERROR_OUT_OF_MEMORY;\n\t\tgoto out;\n\t}\n\tmemcpy(o->obj_id, obj_id, obj_id_len);\n\to->obj_id_len = obj_id_len;\n\n\tTAILQ_INSERT_TAIL(&tee_pobjs, o, link);\n\t*obj = o;\n\n\tres = TEE_SUCCESS;\nout:\n\tif (res != TEE_SUCCESS)\n\t\t*obj = NULL;\n//\tmutex_unlock(&pobjs_mutex);\n\treturn res;\n}",
  "abstract_func": "TEE_Result tee_pobj_get(TEE_UUID *VAR_0, void *VAR_1, uint32_t VAR_2,\n\t\t\tuint32_t VAR_3, bool VAR_4,\n\t\t\tconst struct tee_file_operations *VAR_5,\n\t\t\tstruct tee_pobj **VAR_6)\n{\n\tstruct tee_pobj *VAR_7;\n\tTEE_Result VAR_8;\n\n\t*VAR_6 = NULL;\n\n/* COMMENT_0 */\n\t/* COMMENT_1 */\n\tTAILQ_FOREACH(VAR_7, &VAR_9, VAR_10) {\n\t\tif ((VAR_2 == VAR_7->obj_id_len) &&\n\t\t    (memcmp(VAR_1, VAR_7->obj_id, VAR_2) == 0) &&\n\t\t    (memcmp(VAR_0, &VAR_7->uuid, sizeof(TEE_UUID)) == 0) &&\n\t\t    (VAR_5 == VAR_7->fops)) {\n\t\t\t*VAR_6 = VAR_7;\n\t\t}\n\t}\n\n\tif (*VAR_6) {\n\t\tif (VAR_4 != (*VAR_6)->temporary) {\n\t\t\tVAR_8 = VAR_11;\n\t\t\tgoto out;\n\t\t}\n\t\tVAR_8 = tee_pobj_check_access((*VAR_6)->flags, VAR_3);\n\t\tif (VAR_8 == VAR_12)\n\t\t\t(*VAR_6)->refcnt++;\n\t\tgoto out;\n\t}\n\n\t/* COMMENT_2 */\n\tVAR_7 = TEE_Malloc(sizeof(struct tee_pobj), VAR_13);\n\t/* COMMENT_3 */\n\tif (!VAR_7) {\n\t\tVAR_8 = VAR_14;\n\t\tgoto out;\n\t}\n\n\tVAR_7->refcnt = 1;\n\tmemcpy(&VAR_7->uuid, VAR_0, sizeof(TEE_UUID));\n\tVAR_7->flags = VAR_3;\n\tVAR_7->fops = VAR_5;\n\tVAR_7->temporary = VAR_4;\n\n\tVAR_7->obj_id = malloc(VAR_2);\n\tif (VAR_7->obj_id == NULL) {\n\t\tfree(VAR_7);\n\t\tVAR_8 = VAR_14;\n\t\tgoto out;\n\t}\n\tmemcpy(VAR_7->obj_id, VAR_1, VAR_2);\n\tVAR_7->obj_id_len = VAR_2;\n\n\tTAILQ_INSERT_TAIL(&VAR_9, VAR_7, VAR_10);\n\t*VAR_6 = VAR_7;\n\n\tVAR_8 = VAR_12;\nout:\n\tif (VAR_8 != VAR_12)\n\t\t*VAR_6 = NULL;\n/* COMMENT_4 */\n\treturn VAR_8;\n}",
  "func_graph_path": "Samsung/mTower/c5f30c70e48786e1aef8c815f35e406a6c4fb3ae/tee_pobj.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -31,7 +31,8 @@\n \t}\n \n \t/* new file */\n-\to = calloc(1, sizeof(struct tee_pobj));\n+\to = TEE_Malloc(sizeof(struct tee_pobj), TEE_MALLOC_FILL_ZERO);\n+\t// o = calloc(1, sizeof(struct tee_pobj));\n \tif (!o) {\n \t\tres = TEE_ERROR_OUT_OF_MEMORY;\n \t\tgoto out;",
  "diff_line_info": {
    "deleted_lines": [
      "\to = calloc(1, sizeof(struct tee_pobj));"
    ],
    "added_lines": [
      "\to = TEE_Malloc(sizeof(struct tee_pobj), TEE_MALLOC_FILL_ZERO);",
      "\t// o = calloc(1, sizeof(struct tee_pobj));"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/Samsung/mTower/pull/88",
  "description": {
    "pr_info": {
      "title": "Fixed CVE-2022-40761",
      "number": 88
    },
    "comment": [
      "Signed-off-by: Taras Drozdovskyi <t.drozdovsky@samsung.com>\r\n\r\n\r\nFixes #83\r\n\r\n## Type of change\r\n\r\n- [x] Bug fix (non-breaking change which fixes an issue)\r\n\r\n# Checklist:\r\n\r\n- [x] My code follows the style guidelines of this project\r\n- [x] I have performed a self-review of my own code\r\n- [x] I have commented my code, particularly in hard-to-understand areas\r\n- [ ] I have made corresponding changes to the documentation\r\n- [x] My changes generate no new warnings\r\n- [ ] I have added tests that prove my fix is effective or that my feature works\r\n- [x] New and existing unit tests pass locally with my changes\r\n- [ ] Any dependent changes have been merged and published in downstream modules"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 0.95"
}