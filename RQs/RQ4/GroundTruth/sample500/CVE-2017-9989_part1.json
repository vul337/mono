{
  "cve_id": "CVE-2017-9989",
  "cwe_ids": [
    "CWE-476"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "libming",
  "commit_msg": "Change type of size variable in readBytes\n\nsize should have type unsigned long instead of int in order\nto avoid overflows and lossy casts when passing U30 integers.\n\nThis commit fixes CVE-2017-9989 (fixes #86).",
  "commit_hash": "1a1d2704cb19f2d3299f042bb3a4783c960b0a9a",
  "git_url": "https://github.com/libming/libming/commit/1a1d2704cb19f2d3299f042bb3a4783c960b0a9a",
  "file_path": "util/read.c",
  "func_name": "readBytes",
  "func_before": "char *readBytes(FILE *f,int size)\n{\n\n  if (size < 1) {\n#if DEBUG\n    SWF_warn(\"readBytes: want to read %i < 1 bytes: Handling a 0\\n\", size);\n#endif\n    size = 0;\n  }\n\n  int i;\n  char *buf;\n\n  buf = (char *)malloc(sizeof(char)*size);\n\n  for(i=0;i<size;i++)\n  {\n    buf[i]=(char)readUInt8(f);\n  }\n\n  return buf;\n}",
  "abstract_func_before": "char *readBytes(FILE *VAR_0,int VAR_1)\n{\n\n  if (VAR_1 < 1) {\n#if VAR_2\n    SWF_warn(\"readBytes: want to read %i < 1 bytes: Handling a 0\\n\", VAR_1);\n#endif\n    VAR_1 = 0;\n  }\n\n  int VAR_3;\n  char *VAR_4;\n\n  VAR_4 = (char *)malloc(sizeof(char)*VAR_1);\n\n  for(VAR_3=0;VAR_3<VAR_1;VAR_3++)\n  {\n    VAR_4[VAR_3]=(char)readUInt8(VAR_0);\n  }\n\n  return VAR_4;\n}",
  "func_graph_path_before": "libming/1a1d2704cb19f2d3299f042bb3a4783c960b0a9a/read.c/vul/before/0.json",
  "func": "char *readBytes(FILE *f, unsigned long size)\n{\n\n  if (size < 1) {\n#if DEBUG\n    SWF_warn(\"readBytes: want to read %lu < 1 bytes: Handling a 0\\n\", size);\n#endif\n    size = 0;\n  }\n\n  unsigned long i;\n  char *buf;\n\n  buf = (char *)malloc(sizeof(char)*size);\n\n  for(i=0;i<size;i++)\n  {\n    buf[i]=(char)readUInt8(f);\n  }\n\n  return buf;\n}",
  "abstract_func": "char *readBytes(FILE *VAR_0, unsigned long VAR_1)\n{\n\n  if (VAR_1 < 1) {\n#if VAR_2\n    SWF_warn(\"readBytes: want to read %lu < 1 bytes: Handling a 0\\n\", VAR_1);\n#endif\n    VAR_1 = 0;\n  }\n\n  unsigned long VAR_3;\n  char *VAR_4;\n\n  VAR_4 = (char *)malloc(sizeof(char)*VAR_1);\n\n  for(VAR_3=0;VAR_3<VAR_1;VAR_3++)\n  {\n    VAR_4[VAR_3]=(char)readUInt8(VAR_0);\n  }\n\n  return VAR_4;\n}",
  "func_graph_path": "libming/1a1d2704cb19f2d3299f042bb3a4783c960b0a9a/read.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,14 +1,14 @@\n-char *readBytes(FILE *f,int size)\n+char *readBytes(FILE *f, unsigned long size)\n {\n \n   if (size < 1) {\n #if DEBUG\n-    SWF_warn(\"readBytes: want to read %i < 1 bytes: Handling a 0\\n\", size);\n+    SWF_warn(\"readBytes: want to read %lu < 1 bytes: Handling a 0\\n\", size);\n #endif\n     size = 0;\n   }\n \n-  int i;\n+  unsigned long i;\n   char *buf;\n \n   buf = (char *)malloc(sizeof(char)*size);",
  "diff_line_info": {
    "deleted_lines": [
      "char *readBytes(FILE *f,int size)",
      "    SWF_warn(\"readBytes: want to read %i < 1 bytes: Handling a 0\\n\", size);",
      "  int i;"
    ],
    "added_lines": [
      "char *readBytes(FILE *f, unsigned long size)",
      "    SWF_warn(\"readBytes: want to read %lu < 1 bytes: Handling a 0\\n\", size);",
      "  unsigned long i;"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/libming/libming/pull/92",
  "description": {
    "pr_info": {
      "title": "Fix various flaws in readBytes (overflow, possible null pointer dereference)",
      "number": 92
    },
    "comment": [
      "* Change type of `size` variable in readBytes:\r\n\r\n`size` should have type `unsigned long` instead of `int` in order to avoid overflows and lossy casts when passing `U30` integers.\r\n\r\n* Avoid NULL pointer dereference in readBytes:\r\n\r\nMake sure that `buf` isn't dereferenced if malloc failed. In this case, report error and abort.\r\n\r\nTwo commits because 847b989 isn't directly related to CVE-2017-9989.",
      "I still catch a memory allocation error at line 240 with asan. This is because of the large allocation request. I don't know how to avoid this."
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 1.0"
}