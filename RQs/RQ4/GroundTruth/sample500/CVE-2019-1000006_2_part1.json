{
  "cve_id": "CVE-2019-1000006",
  "cwe_ids": [
    "CWE-787"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "RIOT-OS/RIOT",
  "commit_msg": "sock_dns: fix out-of-bound errors\n\nFixes #10739",
  "commit_hash": "2840b3825eb6e0b7320fb111d06832ca9a9e3148",
  "git_url": "https://github.com/RIOT-OS/RIOT/commit/2840b3825eb6e0b7320fb111d06832ca9a9e3148",
  "file_path": "sys/net/application_layer/dns/dns.c",
  "func_name": "_parse_dns_reply",
  "func_before": "static int _parse_dns_reply(uint8_t *buf, size_t len, void* addr_out, int family)\n{\n    sock_dns_hdr_t *hdr = (sock_dns_hdr_t*) buf;\n    uint8_t *bufpos = buf + sizeof(*hdr);\n\n    /* skip all queries that are part of the reply */\n    for (unsigned n = 0; n < ntohs(hdr->qdcount); n++) {\n        bufpos += _skip_hostname(bufpos);\n        bufpos += 4;    /* skip type and class of query */\n    }\n\n    for (unsigned n = 0; n < ntohs(hdr->ancount); n++) {\n        bufpos += _skip_hostname(bufpos);\n        uint16_t _type = ntohs(_get_short(bufpos));\n        bufpos += 2;\n        uint16_t class = ntohs(_get_short(bufpos));\n        bufpos += 2;\n        bufpos += 4; /* skip ttl */\n\n        unsigned addrlen = ntohs(_get_short(bufpos));\n        bufpos += 2;\n        if ((bufpos + addrlen) > (buf + len)) {\n            return -EBADMSG;\n        }\n\n        /* skip unwanted answers */\n        if ((class != DNS_CLASS_IN) ||\n                ((_type == DNS_TYPE_A) && (family == AF_INET6)) ||\n                ((_type == DNS_TYPE_AAAA) && (family == AF_INET)) ||\n                ! ((_type == DNS_TYPE_A) || ((_type == DNS_TYPE_AAAA))\n                    )) {\n            bufpos += addrlen;\n            continue;\n        }\n\n        memcpy(addr_out, bufpos, addrlen);\n        return addrlen;\n    }\n\n    return -1;\n}",
  "abstract_func_before": "static int _parse_dns_reply(uint8_t *VAR_0, size_t VAR_1, void* VAR_2, int VAR_3)\n{\n    sock_dns_hdr_t *VAR_4 = (sock_dns_hdr_t*) VAR_0;\n    uint8_t *VAR_5 = VAR_0 + sizeof(*VAR_4);\n\n    /* COMMENT_0 */\n    for (unsigned VAR_6 = 0; VAR_6 < ntohs(VAR_4->qdcount); VAR_6++) {\n        VAR_5 += _skip_hostname(VAR_5);\n        VAR_5 += 4;    /* COMMENT_1 */\n    }\n\n    for (unsigned VAR_6 = 0; VAR_6 < ntohs(VAR_4->ancount); VAR_6++) {\n        VAR_5 += _skip_hostname(VAR_5);\n        uint16_t VAR_7 = ntohs(_get_short(VAR_5));\n        VAR_5 += 2;\n        uint16_t VAR_8 = ntohs(_get_short(VAR_5));\n        VAR_5 += 2;\n        VAR_5 += 4; /* COMMENT_2 */\n\n        unsigned VAR_9 = ntohs(_get_short(VAR_5));\n        VAR_5 += 2;\n        if ((VAR_5 + VAR_9) > (VAR_0 + VAR_1)) {\n            return -VAR_10;\n        }\n\n        /* COMMENT_3 */\n        if ((VAR_8 != VAR_11) ||\n                ((VAR_7 == VAR_12) && (VAR_3 == VAR_13)) ||\n                ((VAR_7 == VAR_14) && (VAR_3 == VAR_15)) ||\n                ! ((VAR_7 == VAR_12) || ((VAR_7 == VAR_14))\n                    )) {\n            VAR_5 += VAR_9;\n            continue;\n        }\n\n        memcpy(VAR_2, VAR_5, VAR_9);\n        return VAR_9;\n    }\n\n    return -1;\n}",
  "func_graph_path_before": "RIOT-OS/RIOT/2840b3825eb6e0b7320fb111d06832ca9a9e3148/dns.c/vul/before/1.json",
  "func": "static int _parse_dns_reply(uint8_t *buf, size_t len, void* addr_out, int family)\n{\n    const uint8_t *buflim = buf + len;\n    sock_dns_hdr_t *hdr = (sock_dns_hdr_t*) buf;\n    uint8_t *bufpos = buf + sizeof(*hdr);\n\n    /* skip all queries that are part of the reply */\n    for (unsigned n = 0; n < ntohs(hdr->qdcount); n++) {\n        ssize_t tmp = _skip_hostname(buf, len, bufpos);\n        if (tmp < 0) {\n            return tmp;\n        }\n        bufpos += tmp;\n        bufpos += 4;    /* skip type and class of query */\n    }\n\n    for (unsigned n = 0; n < ntohs(hdr->ancount); n++) {\n        ssize_t tmp = _skip_hostname(buf, len, bufpos);\n        if (tmp < 0) {\n            return tmp;\n        }\n        bufpos += tmp;\n        if ((bufpos + 2 + 2 + 4) >= buflim) {\n            return -EBADMSG;\n        }\n        uint16_t _type = ntohs(_get_short(bufpos));\n        bufpos += 2;\n        uint16_t class = ntohs(_get_short(bufpos));\n        bufpos += 2;\n        bufpos += 4; /* skip ttl */\n\n        unsigned addrlen = ntohs(_get_short(bufpos));\n        /* skip unwanted answers */\n        if ((class != DNS_CLASS_IN) ||\n                ((_type == DNS_TYPE_A) && (family == AF_INET6)) ||\n                ((_type == DNS_TYPE_AAAA) && (family == AF_INET)) ||\n                ! ((_type == DNS_TYPE_A) || ((_type == DNS_TYPE_AAAA))\n                    )) {\n            if (addrlen > len) {\n                /* buffer wraps around memory space */\n                return -EBADMSG;\n            }\n            bufpos += addrlen;\n            /* other out-of-bound is checked in `_skip_hostname()` at start of\n             * loop */\n            continue;\n        }\n        if (((addrlen != INADDRSZ) && (family == AF_INET)) ||\n            ((addrlen != IN6ADDRSZ) && (family == AF_INET6)) ||\n            ((addrlen != IN6ADDRSZ) && (addrlen != INADDRSZ) &&\n             (family == AF_UNSPEC))) {\n            return -EBADMSG;\n        }\n        bufpos += 2;\n        if ((bufpos + addrlen) >= buflim) {\n            return -EBADMSG;\n        }\n\n        memcpy(addr_out, bufpos, addrlen);\n        return addrlen;\n    }\n\n    return -1;\n}",
  "abstract_func": "static int _parse_dns_reply(uint8_t *VAR_0, size_t VAR_1, void* VAR_2, int VAR_3)\n{\n    const uint8_t *VAR_4 = VAR_0 + VAR_1;\n    sock_dns_hdr_t *VAR_5 = (sock_dns_hdr_t*) VAR_0;\n    uint8_t *VAR_6 = VAR_0 + sizeof(*VAR_5);\n\n    /* COMMENT_0 */\n    for (unsigned VAR_7 = 0; VAR_7 < ntohs(VAR_5->qdcount); VAR_7++) {\n        ssize_t VAR_8 = _skip_hostname(VAR_0, VAR_1, VAR_6);\n        if (VAR_8 < 0) {\n            return VAR_8;\n        }\n        VAR_6 += VAR_8;\n        VAR_6 += 4;    /* COMMENT_1 */\n    }\n\n    for (unsigned VAR_7 = 0; VAR_7 < ntohs(VAR_5->ancount); VAR_7++) {\n        ssize_t VAR_8 = _skip_hostname(VAR_0, VAR_1, VAR_6);\n        if (VAR_8 < 0) {\n            return VAR_8;\n        }\n        VAR_6 += VAR_8;\n        if ((VAR_6 + 2 + 2 + 4) >= VAR_4) {\n            return -VAR_9;\n        }\n        uint16_t VAR_10 = ntohs(_get_short(VAR_6));\n        VAR_6 += 2;\n        uint16_t VAR_11 = ntohs(_get_short(VAR_6));\n        VAR_6 += 2;\n        VAR_6 += 4; /* COMMENT_2 */\n\n        unsigned VAR_12 = ntohs(_get_short(VAR_6));\n        /* COMMENT_3 */\n        if ((VAR_11 != VAR_13) ||\n                ((VAR_10 == VAR_14) && (VAR_3 == VAR_15)) ||\n                ((VAR_10 == VAR_16) && (VAR_3 == VAR_17)) ||\n                ! ((VAR_10 == VAR_14) || ((VAR_10 == VAR_16))\n                    )) {\n            if (VAR_12 > VAR_1) {\n                /* COMMENT_4 */\n                return -VAR_9;\n            }\n            VAR_6 += VAR_12;\n            /* COMMENT_5 */\n                      \n            continue;\n        }\n        if (((VAR_12 != VAR_18) && (VAR_3 == VAR_17)) ||\n            ((VAR_12 != VAR_19) && (VAR_3 == VAR_15)) ||\n            ((VAR_12 != VAR_19) && (VAR_12 != VAR_18) &&\n             (VAR_3 == VAR_20))) {\n            return -VAR_9;\n        }\n        VAR_6 += 2;\n        if ((VAR_6 + VAR_12) >= VAR_4) {\n            return -VAR_9;\n        }\n\n        memcpy(VAR_2, VAR_6, VAR_12);\n        return VAR_12;\n    }\n\n    return -1;\n}",
  "func_graph_path": "RIOT-OS/RIOT/2840b3825eb6e0b7320fb111d06832ca9a9e3148/dns.c/vul/after/1.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,16 +1,28 @@\n static int _parse_dns_reply(uint8_t *buf, size_t len, void* addr_out, int family)\n {\n+    const uint8_t *buflim = buf + len;\n     sock_dns_hdr_t *hdr = (sock_dns_hdr_t*) buf;\n     uint8_t *bufpos = buf + sizeof(*hdr);\n \n     /* skip all queries that are part of the reply */\n     for (unsigned n = 0; n < ntohs(hdr->qdcount); n++) {\n-        bufpos += _skip_hostname(bufpos);\n+        ssize_t tmp = _skip_hostname(buf, len, bufpos);\n+        if (tmp < 0) {\n+            return tmp;\n+        }\n+        bufpos += tmp;\n         bufpos += 4;    /* skip type and class of query */\n     }\n \n     for (unsigned n = 0; n < ntohs(hdr->ancount); n++) {\n-        bufpos += _skip_hostname(bufpos);\n+        ssize_t tmp = _skip_hostname(buf, len, bufpos);\n+        if (tmp < 0) {\n+            return tmp;\n+        }\n+        bufpos += tmp;\n+        if ((bufpos + 2 + 2 + 4) >= buflim) {\n+            return -EBADMSG;\n+        }\n         uint16_t _type = ntohs(_get_short(bufpos));\n         bufpos += 2;\n         uint16_t class = ntohs(_get_short(bufpos));\n@@ -18,19 +30,30 @@\n         bufpos += 4; /* skip ttl */\n \n         unsigned addrlen = ntohs(_get_short(bufpos));\n-        bufpos += 2;\n-        if ((bufpos + addrlen) > (buf + len)) {\n-            return -EBADMSG;\n-        }\n-\n         /* skip unwanted answers */\n         if ((class != DNS_CLASS_IN) ||\n                 ((_type == DNS_TYPE_A) && (family == AF_INET6)) ||\n                 ((_type == DNS_TYPE_AAAA) && (family == AF_INET)) ||\n                 ! ((_type == DNS_TYPE_A) || ((_type == DNS_TYPE_AAAA))\n                     )) {\n+            if (addrlen > len) {\n+                /* buffer wraps around memory space */\n+                return -EBADMSG;\n+            }\n             bufpos += addrlen;\n+            /* other out-of-bound is checked in `_skip_hostname()` at start of\n+             * loop */\n             continue;\n+        }\n+        if (((addrlen != INADDRSZ) && (family == AF_INET)) ||\n+            ((addrlen != IN6ADDRSZ) && (family == AF_INET6)) ||\n+            ((addrlen != IN6ADDRSZ) && (addrlen != INADDRSZ) &&\n+             (family == AF_UNSPEC))) {\n+            return -EBADMSG;\n+        }\n+        bufpos += 2;\n+        if ((bufpos + addrlen) >= buflim) {\n+            return -EBADMSG;\n         }\n \n         memcpy(addr_out, bufpos, addrlen);",
  "diff_line_info": {
    "deleted_lines": [
      "        bufpos += _skip_hostname(bufpos);",
      "        bufpos += _skip_hostname(bufpos);",
      "        bufpos += 2;",
      "        if ((bufpos + addrlen) > (buf + len)) {",
      "            return -EBADMSG;",
      "        }",
      ""
    ],
    "added_lines": [
      "    const uint8_t *buflim = buf + len;",
      "        ssize_t tmp = _skip_hostname(buf, len, bufpos);",
      "        if (tmp < 0) {",
      "            return tmp;",
      "        }",
      "        bufpos += tmp;",
      "        ssize_t tmp = _skip_hostname(buf, len, bufpos);",
      "        if (tmp < 0) {",
      "            return tmp;",
      "        }",
      "        bufpos += tmp;",
      "        if ((bufpos + 2 + 2 + 4) >= buflim) {",
      "            return -EBADMSG;",
      "        }",
      "            if (addrlen > len) {",
      "                /* buffer wraps around memory space */",
      "                return -EBADMSG;",
      "            }",
      "            /* other out-of-bound is checked in `_skip_hostname()` at start of",
      "             * loop */",
      "        }",
      "        if (((addrlen != INADDRSZ) && (family == AF_INET)) ||",
      "            ((addrlen != IN6ADDRSZ) && (family == AF_INET6)) ||",
      "            ((addrlen != IN6ADDRSZ) && (addrlen != INADDRSZ) &&",
      "             (family == AF_UNSPEC))) {",
      "            return -EBADMSG;",
      "        }",
      "        bufpos += 2;",
      "        if ((bufpos + addrlen) >= buflim) {",
      "            return -EBADMSG;"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/RIOT-OS/RIOT/pull/10740",
  "description": {
    "pr_info": {
      "title": "sock_dns: fix out-of-bound errors",
      "number": 10740
    },
    "comment": [
      "\r\n<!--\r\nThe RIOT community cares a lot about code quality.\r\nTherefore, before describing what your contribution is about, we would like\r\nyou to make sure that your modifications are compliant with the RIOT\r\ncoding conventions, see https://github.com/RIOT-OS/RIOT/wiki/Coding-conventions.\r\n-->\r\n\r\n### Contribution description\r\nFixes #10739\r\n\r\n<!--\r\nPut here the description of your contribution:\r\n- describe which part(s) of RIOT is (are) involved\r\n- if it's a bug fix, describe the bug that it solves and how it is solved\r\n- you can also give more information to reviewers about how to test your changes\r\n-->\r\n\r\n\r\n### Testing procedure\r\nI compiled `tests/gnrc_sock_dns` with the following patch:\r\n\r\n```diff\r\ndiff --git a/tests/gnrc_sock_dns/Makefile b/tests/gnrc_sock_dns/Makefile\r\nindex 4ef2c75..0b3824e 100644\r\n--- a/tests/gnrc_sock_dns/Makefile\r\n+++ b/tests/gnrc_sock_dns/Makefile\r\n@@ -11,7 +11,11 @@ USEMODULE += sock_dns\r\n USEMODULE += gnrc_sock_udp\r\n USEMODULE += gnrc_ipv6_default\r\n USEMODULE += gnrc_ipv6_nib_dns\r\n-USEMODULE += gnrc_netdev_default\r\n+USEMODULE += ethos\r\n+\r\n+# ethos baudrate can be configured from make command\r\n+ETHOS_BAUDRATE ?= 115200\r\n+CFLAGS += -DETHOS_BAUDRATE=$(ETHOS_BAUDRATE) -DUSE_ETHOS_FOR_STDIO\r\n USEMODULE += auto_init_gnrc_netif\r\n \r\n USEMODULE += shell_commands\r\ndiff --git a/tests/gnrc_sock_dns/main.c b/tests/gnrc_sock_dns/main.c\r\nindex 52700fe..b8c2ad5 100644\r\n--- a/tests/gnrc_sock_dns/main.c\r\n+++ b/tests/gnrc_sock_dns/main.c\r\n@@ -40,7 +40,7 @@ int main(void)\r\n     uint8_t addr[16] = {0};\r\n \r\n     puts(\"waiting for router advertisement...\");\r\n-    xtimer_usleep(1U*1000000);\r\n+    xtimer_usleep(5U*1000000);\r\n \r\n     /* print network addresses */\r\n     puts(\"Configured network interfaces:\");\r\n```\r\n\r\nflashed a `samr21-xpro` (alternatively `pba-d-01-kw2x` as described in #10739 is also possible), and connected an ethos terminal to the node\r\n\r\n```\r\nsudo ./dist/tools/ethos/start_network.sh /dev/ttyACM0 tap0 affe:abe::/48\r\n```\r\n\r\nI reset the node to get its link-local address for later.\r\n\r\nThen I started a RADVD with the following config:\r\n\r\n```\r\ninterface tap0 {\r\n        AdvSendAdvert on;\r\n        MinRtrAdvInterval 3;\r\n        MaxRtrAdvInterval 10;\r\n        prefix affe:abe::/64 {\r\n                AdvOnLink off;\r\n                AdvAutonomous on;\r\n                AdvRouterAddr on;\r\n        };\r\n        RDNSS <a global address on your host> {\r\n            AdvRDNSSLifetime 60;\r\n        };\r\n};\r\n```\r\n\r\nand reconfigured the correct route to the host (the preconfigured route by `start_network.sh` does not work, since uhcpc is not available on the node):\r\n\r\n```sh\r\nsudo ip route del affe:abe::/64\r\nsudo ip route add affe:abe::/64 via \"<link-local address of node>\" dev tap0\r\n```\r\n\r\nThen I start the exploit script described in #10739 (or provided by https://github.com/beduino-project/exploit-riot-dns) and reset the node again to start the test. Without this PR the node will crash (note that the exploit described in #10739 does not work but only crashes the node since due to the usage of `ethos` the binary is different), withit it will just report `error resolving example.org`.\r\n\r\nI also tested expected operation as described in the application's README.\r\n\r\n<!--\r\nDetails steps to test your contribution:\r\n- which test/example to compile for which board and is there a 'test' command\r\n- how to know that it was not working/available in master\r\n- the expected success test output\r\n-->\r\n\r\n\r\n### Issues/PRs references\r\nFixes #10739.\r\n<!--\r\nExamples: Fixes #1234. See also #5678. Depends on PR #9876.\r\n\r\nPlease use keywords (e.g., fixes, resolve) with the links to the issues you\r\nresolved, this way they will be automatically closed when your pull request\r\nis merged. See https://help.github.com/articles/closing-issues-using-keywords/.\r\n-->\r\n",
      "Fixed some typos and unrelated changes that snuck in. Should be good for review now.",
      "How I sometimes wish C had exceptions.",
      "> How I sometimes wish C had exceptions.\r\n\r\nThose don't make your life any better and bloat the code (even Rust [does something else](https://doc.rust-lang.org/book/ch09-02-recoverable-errors-with-result.html))",
      "Addressed newest comments",
      "@kaspar030 backport to 2018.10?",
      "> @kaspar030 backport to 2018.10?\r\n\r\nYeah, I seem to remember that we intent to provide security fixes for the current release?",
      "I think this can be squashed?",
      "Squashed on top of original merge base.",
      "Fixed and squashed whitespace error reported by Murdock",
      "(here is the diff https://github.com/RIOT-OS/RIOT/compare/b1de000aef472e9508c0dd6b7a00ec9cd4124a34..1a61b8aadf18d437bb85660506aeb104313e79d0)",
      "@riot-ci is happy. @nmeum @pyropeter @kaspar030 @maribu are you?",
      "I just tried the test on native, it returns \"error resolving example.org\".\r\n\r\ndnsmasq seems to have gotten the request:\r\n\r\n```\r\n[kaspar@ng riot (minimize)]$ sudo dnsmasq -d -2 -z -i riot0 -q --no-resolv \\                                                                 \r\n>         --dhcp-range=::1,constructor:riot0,ra-only \\\r\n>         --listen-address 2001:db8::1 \\\r\n>         --host-record=example.org,10.0.0.1,2001:db8::1\r\ndnsmasq: started, version 2.80 cachesize 150\r\ndnsmasq: compile time options: IPv6 GNU-getopt DBus i18n IDN2 DHCP DHCPv6 no-Lua TFTP conntrack ipset auth DNSSEC loop-detect inotify dumpfile\r\ndnsmasq: warning: no upstream servers configured\r\ndnsmasq-dhcp: router advertisement on riot0\r\ndnsmasq-dhcp: router advertisement on 2001:db8::, constructed for riot0                                                                      \r\ndnsmasq-dhcp: RTR-ADVERT(riot0) 2001:db8::\r\ndnsmasq: read /etc/hosts - 0 addresses\r\ndnsmasq-dhcp: RTR-SOLICIT(riot0)\r\ndnsmasq-dhcp: RTR-ADVERT(riot0) 2001:db8::\r\ndnsmasq: config example.org is 2001:db8::1\r\ndnsmasq: config example.org is 10.0.0.1\r\ndnsmasq: config example.org is 2001:db8::1\r\ndnsmasq: config example.org is 10.0.0.1\r\n```\r\n",
      "dns.c line 124 returns ```-EMULTIHOP```",
      "> dns.c line 124 returns `-EMULTIHOP`\r\n\r\nsorry, ```-EBADMSG```",
      "Nope, it got moved to line 158. However, I found the bug (the return in l\n101 is wrong as it does not return the length of the hostname, but the\noffset of the end of the hostname).\n\n>\n",
      ">\n> I just tried the test on native, it returns \"error resolving example.org\".\n>\nPlease try again with 4c507e909d9b326801e2632f84c73ae89dfd5675\n",
      "> Please try again with [4c507e9](https://github.com/RIOT-OS/RIOT/commit/4c507e909d9b326801e2632f84c73ae89dfd5675)\r\n\r\nworks now. pls squash!",
      "Squashed. Diff of force push should show no difference ;) ",
      "Thanks everyone involved, and thanks @miri64 for dealing with the mess I created!\r\n\r\nLessons I learned:\r\n\r\n- sure it's fun to quickly hack together something like a DNS client. But just because it is working doesn't mean that it is safe. *always* double check when sharing it .\r\n- RIOT's review process needs a security tag. The buffer overflows in this code were so obvious...\r\n- even community members don't know about security@riot-os.org. Maybe we should add a big(er) note in the issue template?\r\n",
      "> Thanks everyone involved, and thanks @miri64 for dealing with the mess I created!\r\n\r\nWelp, I merged the mess IIRC, so I was as obligated as you ;-).",
      "> * sure it's fun to quickly hack together something like a DNS client. But just because it is working doesn't mean that it is safe. _always_ double check when sharing it .\r\n\r\nFailure tests, failure tests, failure tests. If I find some time tomorrow I will provide a PR for that (in a similar way as #10382 and #10392) before I tackle @maribu's suggestions in https://github.com/RIOT-OS/RIOT/pull/10740#pullrequestreview-190923775.",
      "Backport provided in #10757",
      "(forgot about that)"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.95\n\nThe patch addresses \"out-of-bound errors\" and includes buffer checks in the `_parse_dns_reply` function, indicating a security fix."
}