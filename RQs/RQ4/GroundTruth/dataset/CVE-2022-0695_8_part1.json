{
  "cve_id": "CVE-2022-0695",
  "cwe_ids": [
    "CWE-400"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "radareorg/radare2",
  "commit_msg": "Fix DoS in PE/QNX/DYLDCACHE/PSX parsers ##crash\n\n* Reported by lazymio\n* Reproducer: AAA4AAAAAB4=",
  "commit_hash": "634b886e84a5c568d243e744becc6b3223e089cf",
  "git_url": "https://github.com/radareorg/radare2/commit/634b886e84a5c568d243e744becc6b3223e089cf",
  "file_path": "libr/bin/p/bin_qnx.c",
  "func_name": "lmf_header_load",
  "func_before": "static int lmf_header_load(lmf_header *lmfh, RBuffer *buf, Sdb *db) {\n\tif (r_buf_size (buf) < sizeof (lmf_header)) {\n\t\treturn false;\n\t}\n\tif (r_buf_fread_at (buf, QNX_HEADER_ADDR, (ut8 *) lmfh, \"iiiiiiiicccciiiicc\", 1) < QNX_HDR_SIZE) {\n\t\treturn false;\n\t}\n\tr_strf_buffer (32);\n\tsdb_set (db, \"qnx.version\", r_strf (\"0x%xH\", lmfh->version), 0);\n\tsdb_set (db, \"qnx.cflags\", r_strf (\"0x%xH\", lmfh->cflags), 0);\n\tsdb_set (db, \"qnx.cpu\", r_strf (\"0x%xH\", lmfh->cpu), 0);\n\tsdb_set (db, \"qnx.fpu\", r_strf (\"0x%xH\", lmfh->fpu), 0);\n\tsdb_set (db, \"qnx.code_index\", r_strf (\"0x%x\", lmfh->code_index), 0);\n\tsdb_set (db, \"qnx.stack_index\", r_strf (\"0x%x\", lmfh->stack_index), 0);\n\tsdb_set (db, \"qnx.heap_index\", r_strf (\"0x%x\", lmfh->heap_index), 0);\n\tsdb_set (db, \"qnx.argv_index\", r_strf (\"0x%x\", lmfh->argv_index), 0);\n\tsdb_set (db, \"qnx.code_offset\", r_strf (\"0x%x\", lmfh->code_offset), 0);\n\tsdb_set (db, \"qnx.stack_nbytes\", r_strf (\"0x%x\", lmfh->stack_nbytes), 0);\n\tsdb_set (db, \"qnx.heap_nbytes\", r_strf (\"0x%x\", lmfh->heap_nbytes), 0);\n\tsdb_set (db, \"qnx.image_base\", r_strf (\"0x%x\", lmfh->image_base), 0);\n\treturn true;\n}",
  "abstract_func_before": "static int lmf_header_load(lmf_header *VAR_0, RBuffer *VAR_1, Sdb *VAR_2) {\n\tif (r_buf_size (VAR_1) < sizeof (lmf_header)) {\n\t\treturn false;\n\t}\n\tif (r_buf_fread_at (VAR_1, VAR_3, (ut8 *) VAR_0, \"iiiiiiiicccciiiicc\", 1) < VAR_4) {\n\t\treturn false;\n\t}\n\tr_strf_buffer (32);\n\tsdb_set (VAR_2, \"qnx.version\", r_strf (\"0x%xH\", VAR_0->version), 0);\n\tsdb_set (VAR_2, \"qnx.cflags\", r_strf (\"0x%xH\", VAR_0->cflags), 0);\n\tsdb_set (VAR_2, \"qnx.cpu\", r_strf (\"0x%xH\", VAR_0->cpu), 0);\n\tsdb_set (VAR_2, \"qnx.fpu\", r_strf (\"0x%xH\", VAR_0->fpu), 0);\n\tsdb_set (VAR_2, \"qnx.code_index\", r_strf (\"0x%x\", VAR_0->code_index), 0);\n\tsdb_set (VAR_2, \"qnx.stack_index\", r_strf (\"0x%x\", VAR_0->stack_index), 0);\n\tsdb_set (VAR_2, \"qnx.heap_index\", r_strf (\"0x%x\", VAR_0->heap_index), 0);\n\tsdb_set (VAR_2, \"qnx.argv_index\", r_strf (\"0x%x\", VAR_0->argv_index), 0);\n\tsdb_set (VAR_2, \"qnx.code_offset\", r_strf (\"0x%x\", VAR_0->code_offset), 0);\n\tsdb_set (VAR_2, \"qnx.stack_nbytes\", r_strf (\"0x%x\", VAR_0->stack_nbytes), 0);\n\tsdb_set (VAR_2, \"qnx.heap_nbytes\", r_strf (\"0x%x\", VAR_0->heap_nbytes), 0);\n\tsdb_set (VAR_2, \"qnx.image_base\", r_strf (\"0x%x\", VAR_0->image_base), 0);\n\treturn true;\n}",
  "func_graph_path_before": "radareorg/radare2/634b886e84a5c568d243e744becc6b3223e089cf/bin_qnx.c/vul/before/0.json",
  "func": "static int lmf_header_load(lmf_header *lmfh, RBuffer *buf, Sdb *db) {\n\tif (r_buf_size (buf) < sizeof (lmf_header)) {\n\t\treturn false;\n\t}\n\tif (r_buf_fread_at (buf, QNX_HEADER_ADDR, (ut8 *) lmfh, \"iiiiiiiicccciiiicc\", 1) != QNX_HDR_SIZE) {\n\t\treturn false;\n\t}\n\tr_strf_buffer (32);\n\tsdb_set (db, \"qnx.version\", r_strf (\"0x%xH\", lmfh->version), 0);\n\tsdb_set (db, \"qnx.cflags\", r_strf (\"0x%xH\", lmfh->cflags), 0);\n\tsdb_set (db, \"qnx.cpu\", r_strf (\"0x%xH\", lmfh->cpu), 0);\n\tsdb_set (db, \"qnx.fpu\", r_strf (\"0x%xH\", lmfh->fpu), 0);\n\tsdb_set (db, \"qnx.code_index\", r_strf (\"0x%x\", lmfh->code_index), 0);\n\tsdb_set (db, \"qnx.stack_index\", r_strf (\"0x%x\", lmfh->stack_index), 0);\n\tsdb_set (db, \"qnx.heap_index\", r_strf (\"0x%x\", lmfh->heap_index), 0);\n\tsdb_set (db, \"qnx.argv_index\", r_strf (\"0x%x\", lmfh->argv_index), 0);\n\tsdb_set (db, \"qnx.code_offset\", r_strf (\"0x%x\", lmfh->code_offset), 0);\n\tsdb_set (db, \"qnx.stack_nbytes\", r_strf (\"0x%x\", lmfh->stack_nbytes), 0);\n\tsdb_set (db, \"qnx.heap_nbytes\", r_strf (\"0x%x\", lmfh->heap_nbytes), 0);\n\tsdb_set (db, \"qnx.image_base\", r_strf (\"0x%x\", lmfh->image_base), 0);\n\treturn true;\n}",
  "abstract_func": "static int lmf_header_load(lmf_header *VAR_0, RBuffer *VAR_1, Sdb *VAR_2) {\n\tif (r_buf_size (VAR_1) < sizeof (lmf_header)) {\n\t\treturn false;\n\t}\n\tif (r_buf_fread_at (VAR_1, VAR_3, (ut8 *) VAR_0, \"iiiiiiiicccciiiicc\", 1) != VAR_4) {\n\t\treturn false;\n\t}\n\tr_strf_buffer (32);\n\tsdb_set (VAR_2, \"qnx.version\", r_strf (\"0x%xH\", VAR_0->version), 0);\n\tsdb_set (VAR_2, \"qnx.cflags\", r_strf (\"0x%xH\", VAR_0->cflags), 0);\n\tsdb_set (VAR_2, \"qnx.cpu\", r_strf (\"0x%xH\", VAR_0->cpu), 0);\n\tsdb_set (VAR_2, \"qnx.fpu\", r_strf (\"0x%xH\", VAR_0->fpu), 0);\n\tsdb_set (VAR_2, \"qnx.code_index\", r_strf (\"0x%x\", VAR_0->code_index), 0);\n\tsdb_set (VAR_2, \"qnx.stack_index\", r_strf (\"0x%x\", VAR_0->stack_index), 0);\n\tsdb_set (VAR_2, \"qnx.heap_index\", r_strf (\"0x%x\", VAR_0->heap_index), 0);\n\tsdb_set (VAR_2, \"qnx.argv_index\", r_strf (\"0x%x\", VAR_0->argv_index), 0);\n\tsdb_set (VAR_2, \"qnx.code_offset\", r_strf (\"0x%x\", VAR_0->code_offset), 0);\n\tsdb_set (VAR_2, \"qnx.stack_nbytes\", r_strf (\"0x%x\", VAR_0->stack_nbytes), 0);\n\tsdb_set (VAR_2, \"qnx.heap_nbytes\", r_strf (\"0x%x\", VAR_0->heap_nbytes), 0);\n\tsdb_set (VAR_2, \"qnx.image_base\", r_strf (\"0x%x\", VAR_0->image_base), 0);\n\treturn true;\n}",
  "func_graph_path": "radareorg/radare2/634b886e84a5c568d243e744becc6b3223e089cf/bin_qnx.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -2,7 +2,7 @@\n \tif (r_buf_size (buf) < sizeof (lmf_header)) {\n \t\treturn false;\n \t}\n-\tif (r_buf_fread_at (buf, QNX_HEADER_ADDR, (ut8 *) lmfh, \"iiiiiiiicccciiiicc\", 1) < QNX_HDR_SIZE) {\n+\tif (r_buf_fread_at (buf, QNX_HEADER_ADDR, (ut8 *) lmfh, \"iiiiiiiicccciiiicc\", 1) != QNX_HDR_SIZE) {\n \t\treturn false;\n \t}\n \tr_strf_buffer (32);",
  "diff_line_info": {
    "deleted_lines": [
      "\tif (r_buf_fread_at (buf, QNX_HEADER_ADDR, (ut8 *) lmfh, \"iiiiiiiicccciiiicc\", 1) < QNX_HDR_SIZE) {"
    ],
    "added_lines": [
      "\tif (r_buf_fread_at (buf, QNX_HEADER_ADDR, (ut8 *) lmfh, \"iiiiiiiicccciiiicc\", 1) != QNX_HDR_SIZE) {"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/radareorg/radare2/pull/19747",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/radareorg/radare2/pull/19747: 403 Client Error: Forbidden for url: https://api.github.com/repos/radareorg/radare2/pulls/19747",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.95"
}