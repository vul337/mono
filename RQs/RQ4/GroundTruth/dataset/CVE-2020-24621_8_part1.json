{
  "cve_id": "CVE-2020-24621",
  "cwe_ids": [
    "CWE-22"
  ],
  "cvss_vector": "AV:N/AC:L/Au:S/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "openmrs/openmrs-module-htmlformentry",
  "commit_msg": "HTML-730: Do not allow loading arbitrary files",
  "commit_hash": "458597984050461f1c88e4e3a403bf2b060f0844",
  "git_url": "https://github.com/openmrs/openmrs-module-htmlformentry/commit/458597984050461f1c88e4e3a403bf2b060f0844",
  "file_path": "api/src/main/java/org/openmrs/module/htmlformentry/HtmlFormValidator.java",
  "func_name": "validate",
  "func_before": "@Override\n\tpublic void validate(Object obj, Errors errors) {\n\t\tHtmlForm hf = (HtmlForm) obj;\n\t\t// can't use ValidationUtil for this because toString of a new non-null form is \"\"\n\t\tif (hf.getForm() == null)\n\t\t\terrors.rejectValue(\"form\", \"error.null\");\n\t\tValidationUtils.rejectIfEmptyOrWhitespace(errors, \"name\", \"error.null\");\n\t\tValidationUtils.rejectIfEmptyOrWhitespace(errors, \"xmlData\", \"error.null\");\n\t\t\n\t\tif (hf.getForm() != null) {\n\t\t\terrors.pushNestedPath(\"form\");\n\t\t\tnew FormValidator().validate(hf.getForm(), errors);\n\t\t\terrors.popNestedPath();\n\t\t}\n\t\tif (hf.getXmlData() != null) {\n\t\t\ttry {\n\t\t\t\t@SuppressWarnings(\"unused\")\n\t\t\t\tFormEntrySession session = new FormEntrySession(HtmlFormEntryUtil.getFakePerson(), hf.getXmlData(), null); // can't access an HttpSession here\n\t\t\t\tif (hf.getForm() != null) {\n\t\t\t\t\tif (hf.getForm().getEncounterType() != null && hasEncounterTypeTag(hf.getXmlData())) {\n\t\t\t\t\t\tthrow new FormEntryException(\n\t\t\t\t\t\t        \"encounterType tag is not allowed for a form that is already associated to encounter type\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tHtmlFormEntryGenerator htmlGenerator = new HtmlFormEntryGenerator();\n\t\t\t\tString xml = hf.getXmlData();\n\t\t\t\txml = htmlGenerator.substituteCharacterCodesWithAsciiCodes(xml);\n\t\t\t\txml = htmlGenerator.stripComments(xml);\n\t\t\t\txml = htmlGenerator.convertSpecialCharactersWithinLogicAndVelocityTests(xml);\n\t\t\t\txml = htmlGenerator.applyRoleRestrictions(xml);\n\t\t\t\txml = htmlGenerator.applyMacros(session, xml);\n\t\t\t\txml = htmlGenerator.applyRepeats(xml);\n\t\t\t\tDocument document = HtmlFormEntryUtil.stringToDocument(xml);\n\t\t\t\tvalidateTags(document, errors, null);\n\t\t\t}\n\t\t\tcatch (Exception ex) {\n\t\t\t\terrors.rejectValue(\"xmlData\", null, ex.getMessage());\n\t\t\t\tlog.warn(\"Error in HTML form\", ex);\n\t\t\t}\n\t\t}\n\t}",
  "abstract_func_before": "@Override\n\tpublic void validate(Object VAR_0, Errors VAR_1) {\n\t\tHtmlForm VAR_2 = (HtmlForm) VAR_0;\n\t\t/* COMMENT_0 */\n\t\tif (VAR_2.getForm() == null)\n\t\t\tVAR_1.rejectValue(\"form\", \"error.null\");\n\t\tVAR_3.rejectIfEmptyOrWhitespace(VAR_1, \"name\", \"error.null\");\n\t\tVAR_3.rejectIfEmptyOrWhitespace(VAR_1, \"xmlData\", \"error.null\");\n\t\t\n\t\tif (VAR_2.getForm() != null) {\n\t\t\tVAR_1.pushNestedPath(\"form\");\n\t\t\tnew FormValidator().validate(VAR_2.getForm(), VAR_1);\n\t\t\tVAR_1.popNestedPath();\n\t\t}\n\t\tif (VAR_2.getXmlData() != null) {\n\t\t\ttry {\n\t\t\t\t@SuppressWarnings(\"unused\")\n\t\t\t\tFormEntrySession VAR_4 = new FormEntrySession(VAR_5.getFakePerson(), VAR_2.getXmlData(), null); /* COMMENT_1 */\n\t\t\t\tif (VAR_2.getForm() != null) {\n\t\t\t\t\tif (VAR_2.getForm().getEncounterType() != null && hasEncounterTypeTag(VAR_2.getXmlData())) {\n\t\t\t\t\t\tthrow new FormEntryException(\n\t\t\t\t\t\t        \"encounterType tag is not allowed for a form that is already associated to encounter type\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tHtmlFormEntryGenerator VAR_6 = new HtmlFormEntryGenerator();\n\t\t\t\tString VAR_7 = VAR_2.getXmlData();\n\t\t\t\tVAR_7 = VAR_6.substituteCharacterCodesWithAsciiCodes(VAR_7);\n\t\t\t\tVAR_7 = VAR_6.stripComments(VAR_7);\n\t\t\t\tVAR_7 = VAR_6.convertSpecialCharactersWithinLogicAndVelocityTests(VAR_7);\n\t\t\t\tVAR_7 = VAR_6.applyRoleRestrictions(VAR_7);\n\t\t\t\tVAR_7 = VAR_6.applyMacros(VAR_4, VAR_7);\n\t\t\t\tVAR_7 = VAR_6.applyRepeats(VAR_7);\n\t\t\t\tDocument VAR_8 = VAR_5.stringToDocument(VAR_7);\n\t\t\t\tvalidateTags(VAR_8, VAR_1, null);\n\t\t\t}\n\t\t\tcatch (Exception VAR_9) {\n\t\t\t\tVAR_1.rejectValue(\"xmlData\", null, VAR_9.getMessage());\n\t\t\t\tVAR_10.warn(\"Error in HTML form\", VAR_9);\n\t\t\t}\n\t\t}\n\t}",
  "func_graph_path_before": "openmrs/openmrs-module-htmlformentry/458597984050461f1c88e4e3a403bf2b060f0844/HtmlFormValidator.java/vul/before/0.json",
  "func": "@Override\n\tpublic void validate(Object obj, Errors errors) {\n\t\tHtmlForm hf = (HtmlForm) obj;\n\t\t// can't use ValidationUtil for this because toString of a new non-null form is \"\"\n\t\tif (hf.getForm() == null)\n\t\t\terrors.rejectValue(\"form\", \"error.null\");\n\t\tValidationUtils.rejectIfEmptyOrWhitespace(errors, \"name\", \"error.null\");\n\t\tValidationUtils.rejectIfEmptyOrWhitespace(errors, \"xmlData\", \"error.null\");\n\t\t\n\t\tif (hf.getForm() != null) {\n\t\t\terrors.pushNestedPath(\"form\");\n\t\t\tnew FormValidator().validate(hf.getForm(), errors);\n\t\t\terrors.popNestedPath();\n\t\t}\n\t\t\n\t\tif (hf.getXmlData() != null) {\n\t\t\ttry {\n\t\t\t\tHtmlFormEntryUtil.stringToDocument(hf.getXmlData());\n\t\t\t\t\n\t\t\t\tFormEntrySession session = new FormEntrySession(HtmlFormEntryUtil.getFakePerson(), hf.getXmlData(), null); // can't access an HttpSession here\n\t\t\t\tif (hf.getForm() != null) {\n\t\t\t\t\tif (hf.getForm().getEncounterType() != null && hasEncounterTypeTag(hf.getXmlData())) {\n\t\t\t\t\t\tthrow new FormEntryException(\n\t\t\t\t\t\t        \"encounterType tag is not allowed for a form that is already associated to encounter type\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tHtmlFormEntryGenerator htmlGenerator = new HtmlFormEntryGenerator();\n\t\t\t\tString xml = hf.getXmlData();\n\t\t\t\txml = htmlGenerator.substituteCharacterCodesWithAsciiCodes(xml);\n\t\t\t\txml = htmlGenerator.stripComments(xml);\n\t\t\t\txml = htmlGenerator.convertSpecialCharactersWithinLogicAndVelocityTests(xml);\n\t\t\t\txml = htmlGenerator.applyRoleRestrictions(xml);\n\t\t\t\txml = htmlGenerator.applyMacros(session, xml);\n\t\t\t\txml = htmlGenerator.applyRepeats(xml);\n\t\t\t\tDocument document = HtmlFormEntryUtil.stringToDocument(xml);\n\t\t\t\tvalidateTags(document, errors, null);\n\t\t\t}\n\t\t\tcatch (Exception ex) {\n\t\t\t\terrors.rejectValue(\"xmlData\", null, ex.getMessage());\n\t\t\t\tlog.warn(\"Error in HTML form\", ex);\n\t\t\t}\n\t\t}\n\t}",
  "abstract_func": "@Override\n\tpublic void validate(Object VAR_0, Errors VAR_1) {\n\t\tHtmlForm VAR_2 = (HtmlForm) VAR_0;\n\t\t/* COMMENT_0 */\n\t\tif (VAR_2.getForm() == null)\n\t\t\tVAR_1.rejectValue(\"form\", \"error.null\");\n\t\tVAR_3.rejectIfEmptyOrWhitespace(VAR_1, \"name\", \"error.null\");\n\t\tVAR_3.rejectIfEmptyOrWhitespace(VAR_1, \"xmlData\", \"error.null\");\n\t\t\n\t\tif (VAR_2.getForm() != null) {\n\t\t\tVAR_1.pushNestedPath(\"form\");\n\t\t\tnew FormValidator().validate(VAR_2.getForm(), VAR_1);\n\t\t\tVAR_1.popNestedPath();\n\t\t}\n\t\t\n\t\tif (VAR_2.getXmlData() != null) {\n\t\t\ttry {\n\t\t\t\tVAR_4.stringToDocument(VAR_2.getXmlData());\n\t\t\t\t\n\t\t\t\tFormEntrySession VAR_5 = new FormEntrySession(VAR_4.getFakePerson(), VAR_2.getXmlData(), null); /* COMMENT_1 */\n\t\t\t\tif (VAR_2.getForm() != null) {\n\t\t\t\t\tif (VAR_2.getForm().getEncounterType() != null && hasEncounterTypeTag(VAR_2.getXmlData())) {\n\t\t\t\t\t\tthrow new FormEntryException(\n\t\t\t\t\t\t        \"encounterType tag is not allowed for a form that is already associated to encounter type\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tHtmlFormEntryGenerator VAR_6 = new HtmlFormEntryGenerator();\n\t\t\t\tString VAR_7 = VAR_2.getXmlData();\n\t\t\t\tVAR_7 = VAR_6.substituteCharacterCodesWithAsciiCodes(VAR_7);\n\t\t\t\tVAR_7 = VAR_6.stripComments(VAR_7);\n\t\t\t\tVAR_7 = VAR_6.convertSpecialCharactersWithinLogicAndVelocityTests(VAR_7);\n\t\t\t\tVAR_7 = VAR_6.applyRoleRestrictions(VAR_7);\n\t\t\t\tVAR_7 = VAR_6.applyMacros(VAR_5, VAR_7);\n\t\t\t\tVAR_7 = VAR_6.applyRepeats(VAR_7);\n\t\t\t\tDocument VAR_8 = VAR_4.stringToDocument(VAR_7);\n\t\t\t\tvalidateTags(VAR_8, VAR_1, null);\n\t\t\t}\n\t\t\tcatch (Exception VAR_9) {\n\t\t\t\tVAR_1.rejectValue(\"xmlData\", null, VAR_9.getMessage());\n\t\t\t\tVAR_10.warn(\"Error in HTML form\", VAR_9);\n\t\t\t}\n\t\t}\n\t}",
  "func_graph_path": "openmrs/openmrs-module-htmlformentry/458597984050461f1c88e4e3a403bf2b060f0844/HtmlFormValidator.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -12,9 +12,11 @@\n \t\t\tnew FormValidator().validate(hf.getForm(), errors);\n \t\t\terrors.popNestedPath();\n \t\t}\n+\t\t\n \t\tif (hf.getXmlData() != null) {\n \t\t\ttry {\n-\t\t\t\t@SuppressWarnings(\"unused\")\n+\t\t\t\tHtmlFormEntryUtil.stringToDocument(hf.getXmlData());\n+\t\t\t\t\n \t\t\t\tFormEntrySession session = new FormEntrySession(HtmlFormEntryUtil.getFakePerson(), hf.getXmlData(), null); // can't access an HttpSession here\n \t\t\t\tif (hf.getForm() != null) {\n \t\t\t\t\tif (hf.getForm().getEncounterType() != null && hasEncounterTypeTag(hf.getXmlData())) {",
  "diff_line_info": {
    "deleted_lines": [
      "\t\t\t\t@SuppressWarnings(\"unused\")"
    ],
    "added_lines": [
      "\t\t",
      "\t\t\t\tHtmlFormEntryUtil.stringToDocument(hf.getXmlData());",
      "\t\t\t\t"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/openmrs/openmrs-module-htmlformentry/pull/178",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/openmrs/openmrs-module-htmlformentry/pull/178: 403 Client Error: Forbidden for url: https://api.github.com/repos/openmrs/openmrs-module-htmlformentry/pulls/178",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.9"
}