{
  "cve_id": "CVE-2019-13226",
  "cwe_ids": [
    "CWE-362",
    "CWE-59"
  ],
  "cvss_vector": "AV:L/AC:M/Au:N/C:C/I:C/A:C",
  "cvss_is_v3": false,
  "repo_name": "linuxdeepin/deepin-clone",
  "commit_msg": "fix: Do not use the \"/tmp\" directory\n\nhttps://github.com/linuxdeepin/deepin-clone/issues/16\nhttps://bugzilla.opensuse.org/show_bug.cgi?id=1130388",
  "commit_hash": "e079f3e2712b4f8c28e3e63e71ba1a1f90fce1ab",
  "git_url": "https://github.com/linuxdeepin/deepin-clone/commit/e079f3e2712b4f8c28e3e63e71ba1a1f90fce1ab",
  "file_path": "app/src/corelib/helper.cpp",
  "func_name": "Helper::temporaryMountDevice",
  "func_before": "QString Helper::temporaryMountDevice(const QString &device, const QString &name, bool readonly)\n{\n    QString mount_point = mountPoint(device);\n\n    if (!mount_point.isEmpty())\n        return mount_point;\n\n    mount_point = \"%1/.%2/mount/%3\";\n    const QStringList &tmp_paths = QStandardPaths::standardLocations(QStandardPaths::TempLocation);\n\n    mount_point = mount_point.arg(tmp_paths.isEmpty() ? \"/tmp\" : tmp_paths.first()).arg(qApp->applicationName()).arg(name);\n\n    if (!QDir::current().mkpath(mount_point)) {\n        dCError(\"mkpath \\\"%s\\\" failed\", qPrintable(mount_point));\n\n        return QString();\n    }\n\n    if (!mountDevice(device, mount_point, readonly)) {\n        dCError(\"Mount the device \\\"%s\\\" to \\\"%s\\\" failed\", qPrintable(device), qPrintable(mount_point));\n\n        return QString();\n    }\n\n    return mount_point;\n}",
  "abstract_func_before": "QString Helper::temporaryMountDevice(const QString &VAR_0, const QString &VAR_1, bool VAR_2)\n{\n    QString VAR_3 = mountPoint(VAR_0);\n\n    if (!VAR_3.isEmpty())\n        return VAR_3;\n\n    VAR_3 = \"%1/.%2/mount/%3\";\n    const QStringList &VAR_4 = QStandardPaths::standardLocations(QStandardPaths::TempLocation);\n\n    VAR_3 = VAR_3.arg(VAR_4.isEmpty() ? \"/tmp\" : VAR_4.first()).arg(VAR_5->applicationName()).arg(VAR_1);\n\n    if (!QDir::current().mkpath(VAR_3)) {\n        dCError(\"mkpath \\\"%s\\\" failed\", qPrintable(VAR_3));\n\n        return QString();\n    }\n\n    if (!mountDevice(VAR_0, VAR_3, VAR_2)) {\n        dCError(\"Mount the device \\\"%s\\\" to \\\"%s\\\" failed\", qPrintable(VAR_0), qPrintable(VAR_3));\n\n        return QString();\n    }\n\n    return VAR_3;\n}",
  "func_graph_path_before": "linuxdeepin/deepin-clone/e079f3e2712b4f8c28e3e63e71ba1a1f90fce1ab/helper.cpp/vul/before/0.json",
  "func": "QString Helper::temporaryMountDevice(const QString &device, const QString &name, bool readonly)\n{\n    QString mount_point = mountPoint(device);\n\n    if (!mount_point.isEmpty())\n        return mount_point;\n\n    mount_point = \"%1/.%2/mount/%3\";\n    const QStringList &tmp_paths = QStandardPaths::standardLocations(QStandardPaths::RuntimeLocation);\n\n    mount_point = mount_point.arg(tmp_paths.isEmpty() ? \"/run/user/0\" : tmp_paths.first()).arg(qApp->applicationName()).arg(name);\n\n    if (!QDir::current().mkpath(mount_point)) {\n        dCError(\"mkpath \\\"%s\\\" failed\", qPrintable(mount_point));\n\n        return QString();\n    }\n\n    if (!mountDevice(device, mount_point, readonly)) {\n        dCError(\"Mount the device \\\"%s\\\" to \\\"%s\\\" failed\", qPrintable(device), qPrintable(mount_point));\n\n        return QString();\n    }\n\n    return mount_point;\n}",
  "abstract_func": "QString Helper::temporaryMountDevice(const QString &VAR_0, const QString &VAR_1, bool VAR_2)\n{\n    QString VAR_3 = mountPoint(VAR_0);\n\n    if (!VAR_3.isEmpty())\n        return VAR_3;\n\n    VAR_3 = \"%1/.%2/mount/%3\";\n    const QStringList &VAR_4 = QStandardPaths::standardLocations(QStandardPaths::RuntimeLocation);\n\n    VAR_3 = VAR_3.arg(VAR_4.isEmpty() ? \"/run/user/0\" : VAR_4.first()).arg(VAR_5->applicationName()).arg(VAR_1);\n\n    if (!QDir::current().mkpath(VAR_3)) {\n        dCError(\"mkpath \\\"%s\\\" failed\", qPrintable(VAR_3));\n\n        return QString();\n    }\n\n    if (!mountDevice(VAR_0, VAR_3, VAR_2)) {\n        dCError(\"Mount the device \\\"%s\\\" to \\\"%s\\\" failed\", qPrintable(VAR_0), qPrintable(VAR_3));\n\n        return QString();\n    }\n\n    return VAR_3;\n}",
  "func_graph_path": "linuxdeepin/deepin-clone/e079f3e2712b4f8c28e3e63e71ba1a1f90fce1ab/helper.cpp/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -6,9 +6,9 @@\n         return mount_point;\n \n     mount_point = \"%1/.%2/mount/%3\";\n-    const QStringList &tmp_paths = QStandardPaths::standardLocations(QStandardPaths::TempLocation);\n+    const QStringList &tmp_paths = QStandardPaths::standardLocations(QStandardPaths::RuntimeLocation);\n \n-    mount_point = mount_point.arg(tmp_paths.isEmpty() ? \"/tmp\" : tmp_paths.first()).arg(qApp->applicationName()).arg(name);\n+    mount_point = mount_point.arg(tmp_paths.isEmpty() ? \"/run/user/0\" : tmp_paths.first()).arg(qApp->applicationName()).arg(name);\n \n     if (!QDir::current().mkpath(mount_point)) {\n         dCError(\"mkpath \\\"%s\\\" failed\", qPrintable(mount_point));",
  "diff_line_info": {
    "deleted_lines": [
      "    const QStringList &tmp_paths = QStandardPaths::standardLocations(QStandardPaths::TempLocation);",
      "    mount_point = mount_point.arg(tmp_paths.isEmpty() ? \"/tmp\" : tmp_paths.first()).arg(qApp->applicationName()).arg(name);"
    ],
    "added_lines": [
      "    const QStringList &tmp_paths = QStandardPaths::standardLocations(QStandardPaths::RuntimeLocation);",
      "    mount_point = mount_point.arg(tmp_paths.isEmpty() ? \"/run/user/0\" : tmp_paths.first()).arg(qApp->applicationName()).arg(name);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/linuxdeepin/deepin-clone/pull/18",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/linuxdeepin/deepin-clone/pull/18: 403 Client Error: Forbidden for url: https://api.github.com/repos/linuxdeepin/deepin-clone/pulls/18",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 1.0"
}