{
  "cve_id": "CVE-2017-11462",
  "cwe_ids": [
    "CWE-415"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "krb5",
  "commit_msg": "Preserve GSS context on init/accept failure\n\nAfter gss_init_sec_context() or gss_accept_sec_context() has created a\ncontext, don't delete the mechglue context on failures from subsequent\ncalls, even if the mechanism deletes the mech-specific context (which\nis allowed by RFC 2744 but not preferred).  Check for union contexts\nwith no mechanism context in each GSS function which accepts a\ngss_ctx_id_t.\n\nCVE-2017-11462:\n\nRFC 2744 permits a GSS-API implementation to delete an existing\nsecurity context on a second or subsequent call to\ngss_init_sec_context() or gss_accept_sec_context() if the call results\nin an error.  This API behavior has been found to be dangerous,\nleading to the possibility of memory errors in some callers.  For\nsafety, GSS-API implementations should instead preserve existing\nsecurity contexts on error until the caller deletes them.\n\nAll versions of MIT krb5 prior to this change may delete acceptor\ncontexts on error.  Versions 1.13.4 through 1.13.7, 1.14.1 through\n1.14.5, and 1.15 through 1.15.1 may also delete initiator contexts on\nerror.\n\nticket: 8598 (new)\ntarget_version: 1.15-next\ntarget_version: 1.14-next\ntags: pullup",
  "commit_hash": "56f7b1bc95a2a3eeb420e069e7655fb181ade5cf",
  "git_url": "https://github.com/krb5/krb5/commit/56f7b1bc95a2a3eeb420e069e7655fb181ade5cf",
  "file_path": "src/lib/gssapi/mechglue/g_inq_context.c",
  "func_name": "gss_inquire_context",
  "func_before": "OM_uint32 KRB5_CALLCONV\ngss_inquire_context(\n\t    OM_uint32 *minor_status,\n\t    gss_ctx_id_t context_handle,\n\t    gss_name_t *src_name,\n\t    gss_name_t *targ_name,\n\t    OM_uint32 *lifetime_rec,\n\t    gss_OID *mech_type,\n\t    OM_uint32 *ctx_flags,\n\t    int *locally_initiated,\n\t    int *opened)\n{\n    gss_union_ctx_id_t\tctx;\n    gss_mechanism\tmech;\n    OM_uint32\t\tstatus, temp_minor;\n    gss_OID\t\tactual_mech;\n    gss_name_t localTargName = NULL, localSourceName = NULL;\n\n    status = val_inq_ctx_args(minor_status,\n\t\t\t      context_handle,\n\t\t\t      src_name, targ_name,\n\t\t\t      lifetime_rec,\n\t\t\t      mech_type, ctx_flags,\n\t\t\t      locally_initiated, opened);\n    if (status != GSS_S_COMPLETE)\n\treturn (status);\n\n    /*\n     * select the approprate underlying mechanism routine and\n     * call it.\n     */\n\n    ctx = (gss_union_ctx_id_t) context_handle;\n    mech = gssint_get_mechanism (ctx->mech_type);\n\n    if (!mech || !mech->gss_inquire_context || !mech->gss_display_name ||\n\t!mech->gss_release_name) {\n\treturn (GSS_S_UNAVAILABLE);\n    }\n\n    status = mech->gss_inquire_context(\n\t\t\tminor_status,\n\t\t\tctx->internal_ctx_id,\n\t\t\t(src_name ? &localSourceName : NULL),\n\t\t\t(targ_name ? &localTargName : NULL),\n\t\t\tlifetime_rec,\n\t\t\t&actual_mech,\n\t\t\tctx_flags,\n\t\t\tlocally_initiated,\n\t\t\topened);\n\n    if (status != GSS_S_COMPLETE) {\n\tmap_error(minor_status, mech);\n\treturn status;\n    }\n\n    /* need to convert names */\n\n    if (src_name) {\n\tif (localSourceName) {\n\t    status = gssint_convert_name_to_union_name(minor_status, mech,\n\t\t\t\t\t\t      localSourceName, src_name);\n\n\t    if (status != GSS_S_COMPLETE) {\n\t\tif (localTargName)\n\t\t    mech->gss_release_name(&temp_minor, &localTargName);\n\t\treturn (status);\n\t    }\n\t} else {\n\t    *src_name = GSS_C_NO_NAME;\n\t}\n    }\n\n    if (targ_name) {\n        if (localTargName) {\n\t    status = gssint_convert_name_to_union_name(minor_status, mech,\n\t\t\t\t\t\t      localTargName, targ_name);\n\n\t    if (status != GSS_S_COMPLETE) {\n\t\tif (src_name)\n\t\t    (void) gss_release_name(&temp_minor, src_name);\n\n\t\treturn (status);\n\t    }\n        }\n        else {\n            *targ_name = GSS_C_NO_NAME;\n        }\n    }\n\n    if (mech_type)\n\t*mech_type = gssint_get_public_oid(actual_mech);\n\n    return(GSS_S_COMPLETE);\n}",
  "abstract_func_before": "OM_uint32 VAR_0\ngss_inquire_context(\n\t    OM_uint32 *VAR_1,\n\t    gss_ctx_id_t VAR_2,\n\t    gss_name_t *VAR_3,\n\t    gss_name_t *VAR_4,\n\t    OM_uint32 *VAR_5,\n\t    gss_OID *VAR_6,\n\t    OM_uint32 *VAR_7,\n\t    int *VAR_8,\n\t    int *VAR_9)\n{\n    gss_union_ctx_id_t\tVAR_10;\n    gss_mechanism\tVAR_11;\n    OM_uint32\t\tVAR_12, VAR_13;\n    gss_OID\t\tVAR_14;\n    gss_name_t VAR_15 = NULL, VAR_16 = NULL;\n\n    VAR_12 = val_inq_ctx_args(VAR_1,\n\t\t\t      VAR_2,\n\t\t\t      VAR_3, VAR_4,\n\t\t\t      VAR_5,\n\t\t\t      VAR_6, VAR_7,\n\t\t\t      VAR_8, VAR_9);\n    if (VAR_12 != VAR_17)\n\treturn (VAR_12);\n\n    /* COMMENT_0 */\n                                                             \n               \n       \n\n    VAR_10 = (gss_union_ctx_id_t) VAR_2;\n    VAR_11 = gssint_get_mechanism (VAR_10->mech_type);\n\n    if (!VAR_11 || !VAR_11->gss_inquire_context || !VAR_11->gss_display_name ||\n\t!VAR_11->gss_release_name) {\n\treturn (VAR_18);\n    }\n\n    VAR_12 = VAR_11->gss_inquire_context(\n\t\t\tVAR_1,\n\t\t\tVAR_10->internal_ctx_id,\n\t\t\t(VAR_3 ? &VAR_16 : NULL),\n\t\t\t(VAR_4 ? &VAR_15 : NULL),\n\t\t\tVAR_5,\n\t\t\t&VAR_14,\n\t\t\tVAR_7,\n\t\t\tVAR_8,\n\t\t\tVAR_9);\n\n    if (VAR_12 != VAR_17) {\n\tmap_error(VAR_1, VAR_11);\n\treturn VAR_12;\n    }\n\n    /* COMMENT_4 */\n\n    if (VAR_3) {\n\tif (VAR_16) {\n\t    VAR_12 = gssint_convert_name_to_union_name(VAR_1, VAR_11,\n\t\t\t\t\t\t      VAR_16, VAR_3);\n\n\t    if (VAR_12 != VAR_17) {\n\t\tif (VAR_15)\n\t\t    VAR_11->gss_release_name(&VAR_13, &VAR_15);\n\t\treturn (VAR_12);\n\t    }\n\t} else {\n\t    *VAR_3 = VAR_19;\n\t}\n    }\n\n    if (VAR_4) {\n        if (VAR_15) {\n\t    VAR_12 = gssint_convert_name_to_union_name(VAR_1, VAR_11,\n\t\t\t\t\t\t      VAR_15, VAR_4);\n\n\t    if (VAR_12 != VAR_17) {\n\t\tif (VAR_3)\n\t\t    (void) gss_release_name(&VAR_13, VAR_3);\n\n\t\treturn (VAR_12);\n\t    }\n        }\n        else {\n            *VAR_4 = VAR_19;\n        }\n    }\n\n    if (VAR_6)\n\t*VAR_6 = gssint_get_public_oid(VAR_14);\n\n    return(VAR_17);\n}",
  "func_graph_path_before": null,
  "func": "OM_uint32 KRB5_CALLCONV\ngss_inquire_context(\n\t    OM_uint32 *minor_status,\n\t    gss_ctx_id_t context_handle,\n\t    gss_name_t *src_name,\n\t    gss_name_t *targ_name,\n\t    OM_uint32 *lifetime_rec,\n\t    gss_OID *mech_type,\n\t    OM_uint32 *ctx_flags,\n\t    int *locally_initiated,\n\t    int *opened)\n{\n    gss_union_ctx_id_t\tctx;\n    gss_mechanism\tmech;\n    OM_uint32\t\tstatus, temp_minor;\n    gss_OID\t\tactual_mech;\n    gss_name_t localTargName = NULL, localSourceName = NULL;\n\n    status = val_inq_ctx_args(minor_status,\n\t\t\t      context_handle,\n\t\t\t      src_name, targ_name,\n\t\t\t      lifetime_rec,\n\t\t\t      mech_type, ctx_flags,\n\t\t\t      locally_initiated, opened);\n    if (status != GSS_S_COMPLETE)\n\treturn (status);\n\n    /*\n     * select the approprate underlying mechanism routine and\n     * call it.\n     */\n\n    ctx = (gss_union_ctx_id_t) context_handle;\n    if (ctx->internal_ctx_id == GSS_C_NO_CONTEXT)\n\treturn (GSS_S_NO_CONTEXT);\n    mech = gssint_get_mechanism (ctx->mech_type);\n\n    if (!mech || !mech->gss_inquire_context || !mech->gss_display_name ||\n\t!mech->gss_release_name) {\n\treturn (GSS_S_UNAVAILABLE);\n    }\n\n    status = mech->gss_inquire_context(\n\t\t\tminor_status,\n\t\t\tctx->internal_ctx_id,\n\t\t\t(src_name ? &localSourceName : NULL),\n\t\t\t(targ_name ? &localTargName : NULL),\n\t\t\tlifetime_rec,\n\t\t\t&actual_mech,\n\t\t\tctx_flags,\n\t\t\tlocally_initiated,\n\t\t\topened);\n\n    if (status != GSS_S_COMPLETE) {\n\tmap_error(minor_status, mech);\n\treturn status;\n    }\n\n    /* need to convert names */\n\n    if (src_name) {\n\tif (localSourceName) {\n\t    status = gssint_convert_name_to_union_name(minor_status, mech,\n\t\t\t\t\t\t      localSourceName, src_name);\n\n\t    if (status != GSS_S_COMPLETE) {\n\t\tif (localTargName)\n\t\t    mech->gss_release_name(&temp_minor, &localTargName);\n\t\treturn (status);\n\t    }\n\t} else {\n\t    *src_name = GSS_C_NO_NAME;\n\t}\n    }\n\n    if (targ_name) {\n        if (localTargName) {\n\t    status = gssint_convert_name_to_union_name(minor_status, mech,\n\t\t\t\t\t\t      localTargName, targ_name);\n\n\t    if (status != GSS_S_COMPLETE) {\n\t\tif (src_name)\n\t\t    (void) gss_release_name(&temp_minor, src_name);\n\n\t\treturn (status);\n\t    }\n        }\n        else {\n            *targ_name = GSS_C_NO_NAME;\n        }\n    }\n\n    if (mech_type)\n\t*mech_type = gssint_get_public_oid(actual_mech);\n\n    return(GSS_S_COMPLETE);\n}",
  "abstract_func": "OM_uint32 VAR_0\ngss_inquire_context(\n\t    OM_uint32 *VAR_1,\n\t    gss_ctx_id_t VAR_2,\n\t    gss_name_t *VAR_3,\n\t    gss_name_t *VAR_4,\n\t    OM_uint32 *VAR_5,\n\t    gss_OID *VAR_6,\n\t    OM_uint32 *VAR_7,\n\t    int *VAR_8,\n\t    int *VAR_9)\n{\n    gss_union_ctx_id_t\tVAR_10;\n    gss_mechanism\tVAR_11;\n    OM_uint32\t\tVAR_12, VAR_13;\n    gss_OID\t\tVAR_14;\n    gss_name_t VAR_15 = NULL, VAR_16 = NULL;\n\n    VAR_12 = val_inq_ctx_args(VAR_1,\n\t\t\t      VAR_2,\n\t\t\t      VAR_3, VAR_4,\n\t\t\t      VAR_5,\n\t\t\t      VAR_6, VAR_7,\n\t\t\t      VAR_8, VAR_9);\n    if (VAR_12 != VAR_17)\n\treturn (VAR_12);\n\n    /* COMMENT_0 */\n                                                             \n               \n       \n\n    VAR_10 = (gss_union_ctx_id_t) VAR_2;\n    if (VAR_10->internal_ctx_id == VAR_18)\n\treturn (VAR_19);\n    VAR_11 = gssint_get_mechanism (VAR_10->mech_type);\n\n    if (!VAR_11 || !VAR_11->gss_inquire_context || !VAR_11->gss_display_name ||\n\t!VAR_11->gss_release_name) {\n\treturn (VAR_20);\n    }\n\n    VAR_12 = VAR_11->gss_inquire_context(\n\t\t\tVAR_1,\n\t\t\tVAR_10->internal_ctx_id,\n\t\t\t(VAR_3 ? &VAR_16 : NULL),\n\t\t\t(VAR_4 ? &VAR_15 : NULL),\n\t\t\tVAR_5,\n\t\t\t&VAR_14,\n\t\t\tVAR_7,\n\t\t\tVAR_8,\n\t\t\tVAR_9);\n\n    if (VAR_12 != VAR_17) {\n\tmap_error(VAR_1, VAR_11);\n\treturn VAR_12;\n    }\n\n    /* COMMENT_4 */\n\n    if (VAR_3) {\n\tif (VAR_16) {\n\t    VAR_12 = gssint_convert_name_to_union_name(VAR_1, VAR_11,\n\t\t\t\t\t\t      VAR_16, VAR_3);\n\n\t    if (VAR_12 != VAR_17) {\n\t\tif (VAR_15)\n\t\t    VAR_11->gss_release_name(&VAR_13, &VAR_15);\n\t\treturn (VAR_12);\n\t    }\n\t} else {\n\t    *VAR_3 = VAR_21;\n\t}\n    }\n\n    if (VAR_4) {\n        if (VAR_15) {\n\t    VAR_12 = gssint_convert_name_to_union_name(VAR_1, VAR_11,\n\t\t\t\t\t\t      VAR_15, VAR_4);\n\n\t    if (VAR_12 != VAR_17) {\n\t\tif (VAR_3)\n\t\t    (void) gss_release_name(&VAR_13, VAR_3);\n\n\t\treturn (VAR_12);\n\t    }\n        }\n        else {\n            *VAR_4 = VAR_21;\n        }\n    }\n\n    if (VAR_6)\n\t*VAR_6 = gssint_get_public_oid(VAR_14);\n\n    return(VAR_17);\n}",
  "func_graph_path": null,
  "diff_func": "--- func_before\n+++ func_after\n@@ -31,6 +31,8 @@\n      */\n \n     ctx = (gss_union_ctx_id_t) context_handle;\n+    if (ctx->internal_ctx_id == GSS_C_NO_CONTEXT)\n+\treturn (GSS_S_NO_CONTEXT);\n     mech = gssint_get_mechanism (ctx->mech_type);\n \n     if (!mech || !mech->gss_inquire_context || !mech->gss_display_name ||",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "    if (ctx->internal_ctx_id == GSS_C_NO_CONTEXT)",
      "\treturn (GSS_S_NO_CONTEXT);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/krb5/krb5/pull/677",
  "description": {
    "pr_info": {
      "title": "Preserve GSS context on init/accept failure",
      "number": 677
    },
    "comment": [
      "[@frozencemetery: please run interposer tests against this PR]\r\n\r\nAfter gss_init_sec_context() or gss_accept_sec_context() has created a\r\ncontext, don't delete the mechglue context on failures from subsequent\r\ncalls, even if the mechanism deletes the mech-specific context (which\r\nis allowed by RFC 2744 but not preferred).  Check for union contexts\r\nwith no mechanism context in each GSS function which accepts a\r\ngss_ctx_id_t.\r\n",
      "Interposer tests and gssproxy tests passing.  Will try to review in a bit."
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix;  \n**Confidence:** 1.0\n\nThe patch addresses a known CVE, improving context handling to prevent memory errors, which are security issues."
}