{
  "cve_id": "CVE-2018-1000873",
  "cwe_ids": [
    "CWE-20"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "FasterXML/jackson-modules-java8",
  "commit_msg": "Avoid latency problems converting decimal to time.\n\nFixes https://github.com/FasterXML/jackson-databind/issues/2141",
  "commit_hash": "ba27ce5909dfb49bcaf753ad3e04ecb980010b0b",
  "git_url": "https://github.com/FasterXML/jackson-modules-java8/commit/ba27ce5909dfb49bcaf753ad3e04ecb980010b0b",
  "file_path": "datetime/src/main/java/com/fasterxml/jackson/datatype/jsr310/deser/InstantDeserializer.java",
  "func_name": "_fromDecimal",
  "func_before": "protected T _fromDecimal(DeserializationContext context, BigDecimal value)\n    {\n        long seconds = value.longValue();\n        int nanoseconds = DecimalUtils.extractNanosecondDecimal(value, seconds);\n        return fromNanoseconds.apply(new FromDecimalArguments(\n                seconds, nanoseconds, getZone(context)));\n    }",
  "abstract_func_before": "protected T _fromDecimal(DeserializationContext VAR_0, BigDecimal VAR_1)\n    {\n        long VAR_2 = VAR_1.longValue();\n        int VAR_3 = VAR_4.extractNanosecondDecimal(VAR_1, VAR_2);\n        return VAR_5.apply(new FromDecimalArguments(\n                VAR_2, VAR_3, getZone(VAR_0)));\n    }",
  "func_graph_path_before": "FasterXML/jackson-modules-java8/ba27ce5909dfb49bcaf753ad3e04ecb980010b0b/InstantDeserializer.java/vul/before/0.json",
  "func": "protected T _fromDecimal(DeserializationContext context, BigDecimal value)\n    {\n        FromDecimalArguments args =\n            DecimalUtils.extractSecondsAndNanos(value, (s, ns) -> new FromDecimalArguments(s, ns, getZone(context)));\n        return fromNanoseconds.apply(args);\n    }",
  "abstract_func": "protected T _fromDecimal(DeserializationContext VAR_0, BigDecimal VAR_1)\n    {\n        FromDecimalArguments VAR_2 =\n            VAR_3.extractSecondsAndNanos(VAR_1, (VAR_4, VAR_5) -> new FromDecimalArguments(VAR_4, VAR_5, getZone(VAR_0)));\n        return VAR_6.apply(VAR_2);\n    }",
  "func_graph_path": "FasterXML/jackson-modules-java8/ba27ce5909dfb49bcaf753ad3e04ecb980010b0b/InstantDeserializer.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,7 +1,6 @@\n protected T _fromDecimal(DeserializationContext context, BigDecimal value)\n     {\n-        long seconds = value.longValue();\n-        int nanoseconds = DecimalUtils.extractNanosecondDecimal(value, seconds);\n-        return fromNanoseconds.apply(new FromDecimalArguments(\n-                seconds, nanoseconds, getZone(context)));\n+        FromDecimalArguments args =\n+            DecimalUtils.extractSecondsAndNanos(value, (s, ns) -> new FromDecimalArguments(s, ns, getZone(context)));\n+        return fromNanoseconds.apply(args);\n     }",
  "diff_line_info": {
    "deleted_lines": [
      "        long seconds = value.longValue();",
      "        int nanoseconds = DecimalUtils.extractNanosecondDecimal(value, seconds);",
      "        return fromNanoseconds.apply(new FromDecimalArguments(",
      "                seconds, nanoseconds, getZone(context)));"
    ],
    "added_lines": [
      "        FromDecimalArguments args =",
      "            DecimalUtils.extractSecondsAndNanos(value, (s, ns) -> new FromDecimalArguments(s, ns, getZone(context)));",
      "        return fromNanoseconds.apply(args);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/FasterXML/jackson-modules-java8/pull/87",
  "description": {
    "pr_info": {
      "title": "Prevent unbounded latency converting decimals to time",
      "number": 87
    },
    "comment": [
      "This change prevents latency explosions when working with high-magnitude `BigDecimal` values, while preserving the current behavior on the edge cases.\r\n\r\nIt's fixes the original bug reported in https://github.com/FasterXML/jackson-databind/issues/2141 but not the several related issues discussed therein. It builds atop my earlier PR https://github.com/FasterXML/jackson-modules-java8/pull/85\r\n\r\nOne challenge here is that the current two-step conversion process, using `BigDecimal.longValue()` and `DecimalUtils. extractNanosecondDecimal()` separately, made it hard to control the edge cases because information is lost during the former.  So I combined the two into a single helper method.\r\n\r\n(IMO these helpers shouldn't be public API, since they are bespoke semantics needed by this package, and unlikely to be usable by other contexts.  Frankly I'd prefer to make the new helper method package-protected, if that's okay with the maintainers.)",
      "Ok, yes, excellent thank you for the fix!\r\n\r\n+1 for hiding functionality (I often use `protected` as compromise to allow sub-classing but not advertise it). I also think that deprecation here makes sense, and then dropping method off in 3.0.\r\n\r\nI can make that change after merge.\r\n\r\nLet's see if I can continue discussion on remaining challenge after I merge this.\r\n\r\n\r\n"
    ]
  },
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "**Final Classification:** Defect Remediation & Feature Upgrades; **Confidence:** 0.95"
}