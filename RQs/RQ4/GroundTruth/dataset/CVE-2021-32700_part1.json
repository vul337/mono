{
  "cve_id": "CVE-2021-32700",
  "cwe_ids": [
    "CWE-306"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:P/I:P/A:N",
  "cvss_is_v3": false,
  "repo_name": "ballerina-platform/ballerina-lang",
  "commit_msg": "Fix central connection",
  "commit_hash": "4609ffee1744ecd16aac09303b1783bf0a525816",
  "git_url": "https://github.com/ballerina-platform/ballerina-lang/commit/4609ffee1744ecd16aac09303b1783bf0a525816",
  "file_path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/packaging/converters/URIDryConverter.java",
  "func_name": "finalize",
  "func_before": "public Stream<CompilerInput> finalize(URI remoteURI, PackageID moduleID) {\n        try {\n            // only continue if a fixed module version is not set. a module version may be set through Ballerina.toml or\n            // Ballerina.lock already.\n            Matcher matcher = semVerPatchPattern.matcher(moduleID.version.value);\n            if (\"\".equals(moduleID.version.value) || \"*\".equals(moduleID.version.value) || matcher.matches()) {\n                HttpURLConnection conn;\n                // set proxy if exists.\n                if (null == this.proxy) {\n                    conn = (HttpURLConnection) remoteURI.toURL().openConnection();\n                } else {\n                    conn = (HttpURLConnection) remoteURI.toURL().openConnection(this.proxy);\n                }\n                conn.setInstanceFollowRedirects(false);\n                conn.setRequestMethod(\"GET\");\n\n                // status code and meaning\n                //// 200 - module info found\n                //// 400 - bad request sent\n                //// 500 - backend is broken\n                int statusCode = conn.getResponseCode();\n                if (statusCode == 200) {\n                    try (BufferedReader reader = new BufferedReader(new InputStreamReader(conn.getInputStream(),\n                            Charset.defaultCharset()))) {\n                        StringBuilder result = new StringBuilder();\n                        String line;\n                        while ((line = reader.readLine()) != null) {\n                            result.append(line);\n                        }\n                        Object payload = JSONParser.parse(result.toString());\n                        if (payload instanceof MapValue) {\n                            MapValue moduleInfo = ((MapValue) payload).getMapValue(\"module\");\n                            String version = moduleInfo.getStringValue(\"version\");\n                            moduleID.version = new Name(version);\n                        }\n                    }\n                } else if (statusCode == 400 && !loggedError) {\n                    try (BufferedReader errorStream = new BufferedReader(\n                            new InputStreamReader(conn.getInputStream(), Charset.defaultCharset()))) {\n                        String errorContent = errorStream.lines().collect(Collectors.joining(\"\\n\"));\n                        this.errStream.println(\"error: could not connect to remote repository to find the latest \" +\n                                \"version of module: \" + moduleID.toString() + \". use '--offline' \" +\n                                \"flag to build in offline mode. reason: \" + errorContent);\n                        setErrorLoggedStatusAsTrue();\n                    }\n                } else if (statusCode == 500 && !loggedError) {\n                    this.errStream.println(\"error: could not connect to remote repository to find the latest \" +\n                            \"version of module: \" + moduleID.toString() + \". use '--offline' \" +\n                            \"flag to build in offline mode.\");\n                    setErrorLoggedStatusAsTrue();\n                }\n                conn.disconnect();\n                Authenticator.setDefault(null);\n            }\n        } catch (IOException e) {\n            // ignore error and don't set the version.\n        }\n\n        return Stream.empty();\n    }",
  "abstract_func_before": "public Stream<CompilerInput> finalize(URI VAR_0, PackageID VAR_1) {\n        try {\n            /* COMMENT_0 */\n            /* COMMENT_1 */\n            Matcher VAR_2 = VAR_3.matcher(VAR_1.version.value);\n            if (\"\".equals(VAR_1.version.value) || \"*\".equals(VAR_1.version.value) || VAR_2.matches()) {\n                HttpURLConnection VAR_4;\n                /* COMMENT_2 */\n                if (null == this.proxy) {\n                    VAR_4 = (HttpURLConnection) VAR_0.toURL().openConnection();\n                } else {\n                    VAR_4 = (HttpURLConnection) VAR_0.toURL().openConnection(this.proxy);\n                }\n                VAR_4.setInstanceFollowRedirects(false);\n                VAR_4.setRequestMethod(\"GET\");\n\n                /* COMMENT_3 */\n                /* COMMENT_4 */\n                /* COMMENT_5 */\n                /* COMMENT_6 */\n                int VAR_5 = VAR_4.getResponseCode();\n                if (VAR_5 == 200) {\n                    try (BufferedReader VAR_6 = new BufferedReader(new InputStreamReader(VAR_4.getInputStream(),\n                            VAR_7.defaultCharset()))) {\n                        StringBuilder VAR_8 = new StringBuilder();\n                        String VAR_9;\n                        while ((VAR_9 = VAR_6.readLine()) != null) {\n                            VAR_8.append(VAR_9);\n                        }\n                        Object VAR_10 = VAR_11.parse(VAR_8.toString());\n                        if (VAR_10 instanceof MapValue) {\n                            MapValue VAR_12 = ((MapValue) VAR_10).getMapValue(\"module\");\n                            String VAR_13 = VAR_12.getStringValue(\"version\");\n                            VAR_1.version = new Name(VAR_13);\n                        }\n                    }\n                } else if (VAR_5 == 400 && !VAR_14) {\n                    try (BufferedReader VAR_15 = new BufferedReader(\n                            new InputStreamReader(VAR_4.getInputStream(), VAR_7.defaultCharset()))) {\n                        String VAR_16 = VAR_15.lines().collect(VAR_17.joining(\"\\n\"));\n                        this.errStream.println(\"error: could not connect to remote repository to find the latest \" +\n                                \"version of module: \" + VAR_1.toString() + \". use '--offline' \" +\n                                \"flag to build in offline mode. reason: \" + VAR_16);\n                        setErrorLoggedStatusAsTrue();\n                    }\n                } else if (VAR_5 == 500 && !VAR_14) {\n                    this.errStream.println(\"error: could not connect to remote repository to find the latest \" +\n                            \"version of module: \" + VAR_1.toString() + \". use '--offline' \" +\n                            \"flag to build in offline mode.\");\n                    setErrorLoggedStatusAsTrue();\n                }\n                VAR_4.disconnect();\n                VAR_18.setDefault(null);\n            }\n        } catch (IOException VAR_19) {\n            /* COMMENT_7 */\n        }\n\n        return VAR_20.empty();\n    }",
  "func_graph_path_before": "ballerina-platform/ballerina-lang/4609ffee1744ecd16aac09303b1783bf0a525816/URIDryConverter.java/vul/before/0.json",
  "func": "public Stream<CompilerInput> finalize(URI remoteURI, PackageID moduleID) {\n        try {\n            // only continue if a fixed module version is not set. a module version may be set through Ballerina.toml or\n            // Ballerina.lock already.\n            Matcher matcher = semVerPatchPattern.matcher(moduleID.version.value);\n            if (\"\".equals(moduleID.version.value) || \"*\".equals(moduleID.version.value) || matcher.matches()) {\n                HttpsURLConnection conn;\n                // set proxy if exists.\n                if (null == this.proxy) {\n                    conn = (HttpsURLConnection) remoteURI.toURL().openConnection();\n                } else {\n                    conn = (HttpsURLConnection) remoteURI.toURL().openConnection(this.proxy);\n                }\n                conn.setInstanceFollowRedirects(false);\n                conn.setRequestMethod(\"GET\");\n\n                // status code and meaning\n                //// 200 - module info found\n                //// 400 - bad request sent\n                //// 500 - backend is broken\n                int statusCode = conn.getResponseCode();\n                if (statusCode == 200) {\n                    try (BufferedReader reader = new BufferedReader(new InputStreamReader(conn.getInputStream(),\n                            Charset.defaultCharset()))) {\n                        StringBuilder result = new StringBuilder();\n                        String line;\n                        while ((line = reader.readLine()) != null) {\n                            result.append(line);\n                        }\n                        Object payload = JSONParser.parse(result.toString());\n                        if (payload instanceof MapValue) {\n                            MapValue moduleInfo = ((MapValue) payload).getMapValue(\"module\");\n                            String version = moduleInfo.getStringValue(\"version\");\n                            moduleID.version = new Name(version);\n                        }\n                    }\n                } else if (statusCode == 400 && !loggedError) {\n                    try (BufferedReader errorStream = new BufferedReader(\n                            new InputStreamReader(conn.getInputStream(), Charset.defaultCharset()))) {\n                        String errorContent = errorStream.lines().collect(Collectors.joining(\"\\n\"));\n                        this.errStream.println(\"error: could not connect to remote repository to find the latest \" +\n                                \"version of module: \" + moduleID.toString() + \". use '--offline' \" +\n                                \"flag to build in offline mode. reason: \" + errorContent);\n                        setErrorLoggedStatusAsTrue();\n                    }\n                } else if (statusCode == 500 && !loggedError) {\n                    this.errStream.println(\"error: could not connect to remote repository to find the latest \" +\n                            \"version of module: \" + moduleID.toString() + \". use '--offline' \" +\n                            \"flag to build in offline mode.\");\n                    setErrorLoggedStatusAsTrue();\n                }\n                conn.disconnect();\n                Authenticator.setDefault(null);\n            }\n        } catch (IOException e) {\n            // ignore error and don't set the version.\n        }\n\n        return Stream.empty();\n    }",
  "abstract_func": "public Stream<CompilerInput> finalize(URI VAR_0, PackageID VAR_1) {\n        try {\n            /* COMMENT_0 */\n            /* COMMENT_1 */\n            Matcher VAR_2 = VAR_3.matcher(VAR_1.version.value);\n            if (\"\".equals(VAR_1.version.value) || \"*\".equals(VAR_1.version.value) || VAR_2.matches()) {\n                HttpsURLConnection VAR_4;\n                /* COMMENT_2 */\n                if (null == this.proxy) {\n                    VAR_4 = (HttpsURLConnection) VAR_0.toURL().openConnection();\n                } else {\n                    VAR_4 = (HttpsURLConnection) VAR_0.toURL().openConnection(this.proxy);\n                }\n                VAR_4.setInstanceFollowRedirects(false);\n                VAR_4.setRequestMethod(\"GET\");\n\n                /* COMMENT_3 */\n                /* COMMENT_4 */\n                /* COMMENT_5 */\n                /* COMMENT_6 */\n                int VAR_5 = VAR_4.getResponseCode();\n                if (VAR_5 == 200) {\n                    try (BufferedReader VAR_6 = new BufferedReader(new InputStreamReader(VAR_4.getInputStream(),\n                            VAR_7.defaultCharset()))) {\n                        StringBuilder VAR_8 = new StringBuilder();\n                        String VAR_9;\n                        while ((VAR_9 = VAR_6.readLine()) != null) {\n                            VAR_8.append(VAR_9);\n                        }\n                        Object VAR_10 = VAR_11.parse(VAR_8.toString());\n                        if (VAR_10 instanceof MapValue) {\n                            MapValue VAR_12 = ((MapValue) VAR_10).getMapValue(\"module\");\n                            String VAR_13 = VAR_12.getStringValue(\"version\");\n                            VAR_1.version = new Name(VAR_13);\n                        }\n                    }\n                } else if (VAR_5 == 400 && !VAR_14) {\n                    try (BufferedReader VAR_15 = new BufferedReader(\n                            new InputStreamReader(VAR_4.getInputStream(), VAR_7.defaultCharset()))) {\n                        String VAR_16 = VAR_15.lines().collect(VAR_17.joining(\"\\n\"));\n                        this.errStream.println(\"error: could not connect to remote repository to find the latest \" +\n                                \"version of module: \" + VAR_1.toString() + \". use '--offline' \" +\n                                \"flag to build in offline mode. reason: \" + VAR_16);\n                        setErrorLoggedStatusAsTrue();\n                    }\n                } else if (VAR_5 == 500 && !VAR_14) {\n                    this.errStream.println(\"error: could not connect to remote repository to find the latest \" +\n                            \"version of module: \" + VAR_1.toString() + \". use '--offline' \" +\n                            \"flag to build in offline mode.\");\n                    setErrorLoggedStatusAsTrue();\n                }\n                VAR_4.disconnect();\n                VAR_18.setDefault(null);\n            }\n        } catch (IOException VAR_19) {\n            /* COMMENT_7 */\n        }\n\n        return VAR_20.empty();\n    }",
  "func_graph_path": "ballerina-platform/ballerina-lang/4609ffee1744ecd16aac09303b1783bf0a525816/URIDryConverter.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -4,12 +4,12 @@\n             // Ballerina.lock already.\n             Matcher matcher = semVerPatchPattern.matcher(moduleID.version.value);\n             if (\"\".equals(moduleID.version.value) || \"*\".equals(moduleID.version.value) || matcher.matches()) {\n-                HttpURLConnection conn;\n+                HttpsURLConnection conn;\n                 // set proxy if exists.\n                 if (null == this.proxy) {\n-                    conn = (HttpURLConnection) remoteURI.toURL().openConnection();\n+                    conn = (HttpsURLConnection) remoteURI.toURL().openConnection();\n                 } else {\n-                    conn = (HttpURLConnection) remoteURI.toURL().openConnection(this.proxy);\n+                    conn = (HttpsURLConnection) remoteURI.toURL().openConnection(this.proxy);\n                 }\n                 conn.setInstanceFollowRedirects(false);\n                 conn.setRequestMethod(\"GET\");",
  "diff_line_info": {
    "deleted_lines": [
      "                HttpURLConnection conn;",
      "                    conn = (HttpURLConnection) remoteURI.toURL().openConnection();",
      "                    conn = (HttpURLConnection) remoteURI.toURL().openConnection(this.proxy);"
    ],
    "added_lines": [
      "                HttpsURLConnection conn;",
      "                    conn = (HttpsURLConnection) remoteURI.toURL().openConnection();",
      "                    conn = (HttpsURLConnection) remoteURI.toURL().openConnection(this.proxy);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/29246",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/ballerina-platform/ballerina-lang/pull/29246: 403 Client Error: Forbidden for url: https://api.github.com/repos/ballerina-platform/ballerina-lang/pulls/29246",
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.8,
  "Bug Filter Response": "**Final Classification:** Defect Remediation & Feature Upgrades  \n**Confidence:** 0.8"
}