{
  "cve_id": "CVE-2020-12887",
  "cwe_ids": [
    "CWE-401",
    "CWE-190"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "mjurczak/mbed-coap",
  "commit_msg": "Implemented measures to prevent memory leaks in sn_coap_parser_options_parse().\n\nAdded a helper uint16_t addition function with overflow detection. The function is used when calculating the extended length and option delta. The overlow detection is needed to avoid wrap-around of option number or length.\nAdditional checks in options using sn_coap_parser_options_parse_multiple_options() have been implemented to avoid overwriting of pointers pointing to previously allocated memory.",
  "commit_hash": "4647a68e364401e81dbd370728127d844f221d93",
  "git_url": "https://github.com/mjurczak/mbed-coap/commit/4647a68e364401e81dbd370728127d844f221d93",
  "file_path": "source/sn_coap_parser.c",
  "func_name": "parse_ext_option",
  "func_before": "static int8_t parse_ext_option(uint16_t *dst, uint8_t **packet_data_pptr, uint8_t *packet_data_start_ptr, uint16_t packet_len, uint16_t *message_left)\n{\n    uint16_t option_number = *dst;\n\n    if (option_number == 13) {\n        uint8_t option_ext;\n        int8_t read_result = sn_coap_parser_read_packet_u8(&option_ext,\n                                                            *packet_data_pptr,\n                                                            packet_data_start_ptr,\n                                                            packet_len);\n        if (read_result != 0) {\n            /* packet_data_pptr would overflow! */\n            tr_error(\"sn_coap_parser_options_parse - **packet_data_pptr overflow !\");\n            return -1;\n        }\n        else {\n                option_number += option_ext;\n                *message_left = sn_coap_parser_move_packet_ptr(packet_data_pptr,\n                                                               packet_data_start_ptr,\n                                                               packet_len,\n                                                               1);\n        }\n    } else if (option_number == 14) {\n            int8_t read_result = sn_coap_parser_read_packet_u16(&option_number,\n                                                                *packet_data_pptr,\n                                                                packet_data_start_ptr,\n                                                                packet_len);\n            if (read_result != 0) {\n                /* packet_data_pptr would overflow! */\n                tr_error(\"sn_coap_parser_options_parse - **packet_data_pptr overflow !\");\n                return -1;\n            }\n            else {\n            option_number += 269;\n            *message_left = sn_coap_parser_move_packet_ptr(packet_data_pptr,\n                                                           packet_data_start_ptr,\n                                                           packet_len,\n                                                           2);\n            }\n    }\n    /* Option number 15 reserved for payload marker. This is handled as a error! */\n    else if (option_number == 15) {\n        tr_error(\"sn_coap_parser_options_parse - invalid option number(15)!\");\n        return -1;\n    }\n\n    *dst = option_number;\n    return 0;\n}",
  "abstract_func_before": "static int8_t parse_ext_option(uint16_t *VAR_0, uint8_t **VAR_1, uint8_t *VAR_2, uint16_t VAR_3, uint16_t *VAR_4)\n{\n    uint16_t VAR_5 = *VAR_0;\n\n    if (VAR_5 == 13) {\n        uint8_t VAR_6;\n        int8_t VAR_7 = sn_coap_parser_read_packet_u8(&VAR_6,\n                                                            *VAR_1,\n                                                            VAR_2,\n                                                            VAR_3);\n        if (VAR_7 != 0) {\n            /* COMMENT_0 */\n            tr_error(\"sn_coap_parser_options_parse - **packet_data_pptr overflow !\");\n            return -1;\n        }\n        else {\n                VAR_5 += VAR_6;\n                *VAR_4 = sn_coap_parser_move_packet_ptr(VAR_1,\n                                                               VAR_2,\n                                                               VAR_3,\n                                                               1);\n        }\n    } else if (VAR_5 == 14) {\n            int8_t VAR_7 = sn_coap_parser_read_packet_u16(&VAR_5,\n                                                                *VAR_1,\n                                                                VAR_2,\n                                                                VAR_3);\n            if (VAR_7 != 0) {\n                /* COMMENT_0 */\n                tr_error(\"sn_coap_parser_options_parse - **packet_data_pptr overflow !\");\n                return -1;\n            }\n            else {\n            VAR_5 += 269;\n            *VAR_4 = sn_coap_parser_move_packet_ptr(VAR_1,\n                                                           VAR_2,\n                                                           VAR_3,\n                                                           2);\n            }\n    }\n    /* COMMENT_1 */\n    else if (VAR_5 == 15) {\n        tr_error(\"sn_coap_parser_options_parse - invalid option number(15)!\");\n        return -1;\n    }\n\n    *VAR_0 = VAR_5;\n    return 0;\n}",
  "func_graph_path_before": "mjurczak/mbed-coap/4647a68e364401e81dbd370728127d844f221d93/sn_coap_parser.c/vul/before/0.json",
  "func": "static int8_t parse_ext_option(uint16_t *dst, uint8_t **packet_data_pptr, uint8_t *packet_data_start_ptr, uint16_t packet_len, uint16_t *message_left)\n{\n    uint16_t option_number = *dst;\n\n    if (option_number == 13) {\n        uint8_t option_ext;\n        int8_t read_result = sn_coap_parser_read_packet_u8(&option_ext,\n                                                            *packet_data_pptr,\n                                                            packet_data_start_ptr,\n                                                            packet_len);\n        if (read_result != 0) {\n            /* packet_data_pptr would overflow! */\n            tr_error(\"sn_coap_parser_options_parse - **packet_data_pptr overflow !\");\n            return -1;\n        }\n        else {\n            if(sn_coap_parser_add_u16_limit(option_number, option_ext, &option_number) != 0)\n            {\n                return -1;\n            }\n\n            *message_left = sn_coap_parser_move_packet_ptr(packet_data_pptr,\n                                                            packet_data_start_ptr,\n                                                            packet_len,\n                                                            1);\n        }\n    } else if (option_number == 14) {\n            int8_t read_result = sn_coap_parser_read_packet_u16(&option_number,\n                                                                *packet_data_pptr,\n                                                                packet_data_start_ptr,\n                                                                packet_len);\n            if (read_result != 0) {\n                /* packet_data_pptr would overflow! */\n                tr_error(\"sn_coap_parser_options_parse - **packet_data_pptr overflow !\");\n                return -1;\n            }\n            else {\n                if(sn_coap_parser_add_u16_limit(option_number, 269, &option_number) != 0)\n                {\n                    return -1;\n                }\n\n                *message_left = sn_coap_parser_move_packet_ptr(packet_data_pptr,\n                                                            packet_data_start_ptr,\n                                                            packet_len,\n                                                            2);\n            }\n    }\n    /* Option number 15 reserved for payload marker. This is handled as a error! */\n    else if (option_number == 15) {\n        tr_error(\"sn_coap_parser_options_parse - invalid option number(15)!\");\n        return -1;\n    }\n\n    *dst = option_number;\n    return 0;\n}",
  "abstract_func": "static int8_t parse_ext_option(uint16_t *VAR_0, uint8_t **VAR_1, uint8_t *VAR_2, uint16_t VAR_3, uint16_t *VAR_4)\n{\n    uint16_t VAR_5 = *VAR_0;\n\n    if (VAR_5 == 13) {\n        uint8_t VAR_6;\n        int8_t VAR_7 = sn_coap_parser_read_packet_u8(&VAR_6,\n                                                            *VAR_1,\n                                                            VAR_2,\n                                                            VAR_3);\n        if (VAR_7 != 0) {\n            /* COMMENT_0 */\n            tr_error(\"sn_coap_parser_options_parse - **packet_data_pptr overflow !\");\n            return -1;\n        }\n        else {\n            if(sn_coap_parser_add_u16_limit(VAR_5, VAR_6, &VAR_5) != 0)\n            {\n                return -1;\n            }\n\n            *VAR_4 = sn_coap_parser_move_packet_ptr(VAR_1,\n                                                            VAR_2,\n                                                            VAR_3,\n                                                            1);\n        }\n    } else if (VAR_5 == 14) {\n            int8_t VAR_7 = sn_coap_parser_read_packet_u16(&VAR_5,\n                                                                *VAR_1,\n                                                                VAR_2,\n                                                                VAR_3);\n            if (VAR_7 != 0) {\n                /* COMMENT_0 */\n                tr_error(\"sn_coap_parser_options_parse - **packet_data_pptr overflow !\");\n                return -1;\n            }\n            else {\n                if(sn_coap_parser_add_u16_limit(VAR_5, 269, &VAR_5) != 0)\n                {\n                    return -1;\n                }\n\n                *VAR_4 = sn_coap_parser_move_packet_ptr(VAR_1,\n                                                            VAR_2,\n                                                            VAR_3,\n                                                            2);\n            }\n    }\n    /* COMMENT_1 */\n    else if (VAR_5 == 15) {\n        tr_error(\"sn_coap_parser_options_parse - invalid option number(15)!\");\n        return -1;\n    }\n\n    *VAR_0 = VAR_5;\n    return 0;\n}",
  "func_graph_path": "mjurczak/mbed-coap/4647a68e364401e81dbd370728127d844f221d93/sn_coap_parser.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -14,11 +14,15 @@\n             return -1;\n         }\n         else {\n-                option_number += option_ext;\n-                *message_left = sn_coap_parser_move_packet_ptr(packet_data_pptr,\n-                                                               packet_data_start_ptr,\n-                                                               packet_len,\n-                                                               1);\n+            if(sn_coap_parser_add_u16_limit(option_number, option_ext, &option_number) != 0)\n+            {\n+                return -1;\n+            }\n+\n+            *message_left = sn_coap_parser_move_packet_ptr(packet_data_pptr,\n+                                                            packet_data_start_ptr,\n+                                                            packet_len,\n+                                                            1);\n         }\n     } else if (option_number == 14) {\n             int8_t read_result = sn_coap_parser_read_packet_u16(&option_number,\n@@ -31,11 +35,15 @@\n                 return -1;\n             }\n             else {\n-            option_number += 269;\n-            *message_left = sn_coap_parser_move_packet_ptr(packet_data_pptr,\n-                                                           packet_data_start_ptr,\n-                                                           packet_len,\n-                                                           2);\n+                if(sn_coap_parser_add_u16_limit(option_number, 269, &option_number) != 0)\n+                {\n+                    return -1;\n+                }\n+\n+                *message_left = sn_coap_parser_move_packet_ptr(packet_data_pptr,\n+                                                            packet_data_start_ptr,\n+                                                            packet_len,\n+                                                            2);\n             }\n     }\n     /* Option number 15 reserved for payload marker. This is handled as a error! */",
  "diff_line_info": {
    "deleted_lines": [
      "                option_number += option_ext;",
      "                *message_left = sn_coap_parser_move_packet_ptr(packet_data_pptr,",
      "                                                               packet_data_start_ptr,",
      "                                                               packet_len,",
      "                                                               1);",
      "            option_number += 269;",
      "            *message_left = sn_coap_parser_move_packet_ptr(packet_data_pptr,",
      "                                                           packet_data_start_ptr,",
      "                                                           packet_len,",
      "                                                           2);"
    ],
    "added_lines": [
      "            if(sn_coap_parser_add_u16_limit(option_number, option_ext, &option_number) != 0)",
      "            {",
      "                return -1;",
      "            }",
      "",
      "            *message_left = sn_coap_parser_move_packet_ptr(packet_data_pptr,",
      "                                                            packet_data_start_ptr,",
      "                                                            packet_len,",
      "                                                            1);",
      "                if(sn_coap_parser_add_u16_limit(option_number, 269, &option_number) != 0)",
      "                {",
      "                    return -1;",
      "                }",
      "",
      "                *message_left = sn_coap_parser_move_packet_ptr(packet_data_pptr,",
      "                                                            packet_data_start_ptr,",
      "                                                            packet_len,",
      "                                                            2);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/mjurczak/mbed-coap/pull/4",
  "description": {
    "pr_info": {
      "title": "Implemented measures to prevent memory leaks ",
      "number": 4
    },
    "comment": [
      "Integer overflow (ARMmbed/mbed-os#12930) and memory leak errors fixed in coap packet parser.\r\n\r\nAdded a helper uint16_t addition function with overflow detection. The function is used when calculating the extended length and option delta. The overlow detection is needed to avoid wrap-around of option number or length.\r\nAdditional checks in options using sn_coap_parser_options_parse_multiple_options() have been implemented to avoid overwriting of pointers pointing to previously allocated memory.\r\n"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 1.0  \n\nAll aspects of the patch clearly indicate a fix for critical security issues, including integer overflow and memory leaks, with explicit references and code changes confirming this."
}