{
  "cve_id": "CVE-2022-22892",
  "cwe_ids": [
    "CWE-617"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "jerryscript-project/jerryscript",
  "commit_msg": "Fix arrow function this binding resolving if environment record is present\n\nThis patch fixes #4872 and fixes #4876.\n\nJerryScript-DCO-1.0-Signed-off-by: Robert Fancsik robert.fancsik@h-lab.eu",
  "commit_hash": "c6aab480c1e2d968871028aec53c85ac5566b34a",
  "git_url": "https://github.com/jerryscript-project/jerryscript/commit/c6aab480c1e2d968871028aec53c85ac5566b34a",
  "file_path": "jerry-core/ecma/operations/ecma-function-object.c",
  "func_name": "ecma_op_function_call_simple",
  "func_before": "static ecma_value_t\necma_op_function_call_simple (ecma_object_t *func_obj_p, /**< Function object */\n                              ecma_value_t this_binding, /**< 'this' argument's value */\n                              const ecma_value_t *arguments_list_p, /**< arguments list */\n                              uint32_t arguments_list_len) /**< length of arguments list */\n{\n  JERRY_ASSERT (ecma_get_object_type (func_obj_p) == ECMA_OBJECT_TYPE_FUNCTION);\n\n  vm_frame_ctx_shared_args_t shared_args;\n  shared_args.header.status_flags = VM_FRAME_CTX_SHARED_HAS_ARG_LIST;\n  shared_args.header.function_object_p = func_obj_p;\n  shared_args.arg_list_p = arguments_list_p;\n  shared_args.arg_list_len = arguments_list_len;\n\n  /* Entering Function Code (ECMA-262 v5, 10.4.3) */\n  ecma_extended_object_t *ext_func_p = (ecma_extended_object_t *) func_obj_p;\n\n  ecma_object_t *scope_p = ECMA_GET_NON_NULL_POINTER_FROM_POINTER_TAG (ecma_object_t, ext_func_p->u.function.scope_cp);\n\n  /* 8. */\n  const ecma_compiled_code_t *bytecode_data_p = ecma_op_function_get_compiled_code (ext_func_p);\n  uint16_t status_flags = bytecode_data_p->status_flags;\n\n  shared_args.header.bytecode_header_p = bytecode_data_p;\n\n#if JERRY_BUILTIN_REALMS\n  ecma_global_object_t *realm_p = ecma_op_function_get_realm (bytecode_data_p);\n#endif /* JERRY_BUILTIN_REALMS */\n\n  /* 5. */\n  if (!(status_flags & CBC_CODE_FLAGS_LEXICAL_ENV_NOT_NEEDED))\n  {\n    shared_args.header.status_flags |= VM_FRAME_CTX_SHARED_FREE_LOCAL_ENV;\n    scope_p = ecma_create_decl_lex_env (scope_p);\n  }\n\n  /* 1. */\n  switch (CBC_FUNCTION_GET_TYPE (status_flags))\n  {\n#if JERRY_ESNEXT\n    case CBC_FUNCTION_CONSTRUCTOR:\n    {\n      return ecma_op_function_call_constructor (&shared_args, scope_p, this_binding);\n    }\n    case CBC_FUNCTION_ARROW:\n    {\n      ecma_arrow_function_t *arrow_func_p = (ecma_arrow_function_t *) func_obj_p;\n\n      if (ecma_is_value_undefined (arrow_func_p->new_target))\n      {\n        JERRY_CONTEXT (current_new_target_p) = NULL;\n      }\n      else\n      {\n        JERRY_CONTEXT (current_new_target_p) = ecma_get_object_from_value (arrow_func_p->new_target);\n      }\n\n      this_binding = arrow_func_p->this_binding;\n      break;\n    }\n\n#endif /* JERRY_ESNEXT */\n    default:\n    {\n#if JERRY_ESNEXT\n      shared_args.header.status_flags |= VM_FRAME_CTX_SHARED_NON_ARROW_FUNC;\n#endif /* JERRY_ESNEXT */\n\n      if (status_flags & CBC_CODE_FLAGS_STRICT_MODE)\n      {\n        break;\n      }\n\n      if (ecma_is_value_undefined (this_binding) || ecma_is_value_null (this_binding))\n      {\n        /* 2. */\n#if JERRY_BUILTIN_REALMS\n        this_binding = realm_p->this_binding;\n#else /* !JERRY_BUILTIN_REALMS */\n        this_binding = ecma_make_object_value (ecma_builtin_get_global ());\n#endif /* JERRY_BUILTIN_REALMS */\n      }\n      else if (!ecma_is_value_object (this_binding))\n      {\n        /* 3., 4. */\n        this_binding = ecma_op_to_object (this_binding);\n        shared_args.header.status_flags |= VM_FRAME_CTX_SHARED_FREE_THIS;\n\n        JERRY_ASSERT (!ECMA_IS_VALUE_ERROR (this_binding));\n      }\n      break;\n    }\n  }\n\n#if JERRY_BUILTIN_REALMS\n  ecma_global_object_t *saved_global_object_p = JERRY_CONTEXT (global_object_p);\n  JERRY_CONTEXT (global_object_p) = realm_p;\n#endif /* JERRY_BUILTIN_REALMS */\n\n  ecma_value_t ret_value = vm_run (&shared_args.header, this_binding, scope_p);\n\n#if JERRY_BUILTIN_REALMS\n  JERRY_CONTEXT (global_object_p) = saved_global_object_p;\n#endif /* JERRY_BUILTIN_REALMS */\n\n  if (JERRY_UNLIKELY (shared_args.header.status_flags & VM_FRAME_CTX_SHARED_FREE_LOCAL_ENV))\n  {\n    ecma_deref_object (scope_p);\n  }\n\n  if (JERRY_UNLIKELY (shared_args.header.status_flags & VM_FRAME_CTX_SHARED_FREE_THIS))\n  {\n    ecma_free_value (this_binding);\n  }\n\n  return ret_value;\n}",
  "abstract_func_before": "static ecma_value_t\necma_op_function_call_simple (ecma_object_t *VAR_0, /* COMMENT_0 */\n                              ecma_value_t VAR_1, /* COMMENT_1 */\n                              const ecma_value_t *VAR_2, /* COMMENT_2 */\n                              uint32_t VAR_3) /* COMMENT_3 */\n{\n  JERRY_ASSERT (ecma_get_object_type (VAR_0) == VAR_4);\n\n  vm_frame_ctx_shared_args_t VAR_5;\n  VAR_5.header.status_flags = VAR_6;\n  VAR_5.header.function_object_p = VAR_0;\n  VAR_5.arg_list_p = VAR_2;\n  VAR_5.arg_list_len = VAR_3;\n\n  /* COMMENT_4 */\n  ecma_extended_object_t *VAR_7 = (ecma_extended_object_t *) VAR_0;\n\n  ecma_object_t *VAR_8 = ECMA_GET_NON_NULL_POINTER_FROM_POINTER_TAG (ecma_object_t, VAR_7->u.function.scope_cp);\n\n  /* COMMENT_5 */\n  const ecma_compiled_code_t *VAR_9 = ecma_op_function_get_compiled_code (VAR_7);\n  uint16_t VAR_10 = VAR_9->status_flags;\n\n  VAR_5.header.bytecode_header_p = VAR_9;\n\n#if VAR_11\n  ecma_global_object_t *VAR_12 = ecma_op_function_get_realm (VAR_9);\n#endif /* COMMENT_6 */\n\n  /* COMMENT_7 */\n  if (!(VAR_10 & VAR_13))\n  {\n    VAR_5.header.status_flags |= VAR_14;\n    VAR_8 = ecma_create_decl_lex_env (VAR_8);\n  }\n\n  /* COMMENT_8 */\n  switch (CBC_FUNCTION_GET_TYPE (VAR_10))\n  {\n#if VAR_15\n    case VAR_16:\n    {\n      return ecma_op_function_call_constructor (&VAR_5, VAR_8, VAR_1);\n    }\n    case VAR_17:\n    {\n      ecma_arrow_function_t *VAR_18 = (ecma_arrow_function_t *) VAR_0;\n\n      if (ecma_is_value_undefined (VAR_18->new_target))\n      {\n        JERRY_CONTEXT (VAR_19) = NULL;\n      }\n      else\n      {\n        JERRY_CONTEXT (VAR_19) = ecma_get_object_from_value (VAR_18->new_target);\n      }\n\n      VAR_1 = VAR_18->this_binding;\n      break;\n    }\n\n#endif /* COMMENT_9 */\n    default:\n    {\n#if VAR_15\n      VAR_5.header.status_flags |= VAR_20;\n#endif /* COMMENT_9 */\n\n      if (VAR_10 & VAR_21)\n      {\n        break;\n      }\n\n      if (ecma_is_value_undefined (VAR_1) || ecma_is_value_null (VAR_1))\n      {\n        /* COMMENT_10 */\n#if VAR_11\n        VAR_1 = VAR_12->this_binding;\n#else /* COMMENT_11 */\n        VAR_1 = ecma_make_object_value (ecma_builtin_get_global ());\n#endif /* COMMENT_6 */\n      }\n      else if (!ecma_is_value_object (VAR_1))\n      {\n        /* COMMENT_12 */\n        VAR_1 = ecma_op_to_object (VAR_1);\n        VAR_5.header.status_flags |= VAR_22;\n\n        JERRY_ASSERT (!ECMA_IS_VALUE_ERROR (VAR_1));\n      }\n      break;\n    }\n  }\n\n#if VAR_11\n  ecma_global_object_t *VAR_23 = JERRY_CONTEXT (VAR_24);\n  JERRY_CONTEXT (VAR_24) = VAR_12;\n#endif /* COMMENT_6 */\n\n  ecma_value_t VAR_25 = vm_run (&VAR_5.header, VAR_1, VAR_8);\n\n#if VAR_11\n  JERRY_CONTEXT (VAR_24) = VAR_23;\n#endif /* COMMENT_6 */\n\n  if (JERRY_UNLIKELY (VAR_5.header.status_flags & VAR_14))\n  {\n    ecma_deref_object (VAR_8);\n  }\n\n  if (JERRY_UNLIKELY (VAR_5.header.status_flags & VAR_22))\n  {\n    ecma_free_value (VAR_1);\n  }\n\n  return VAR_25;\n}",
  "func_graph_path_before": "jerryscript-project/jerryscript/c6aab480c1e2d968871028aec53c85ac5566b34a/ecma-function-object.c/vul/before/0.json",
  "func": "static ecma_value_t\necma_op_function_call_simple (ecma_object_t *func_obj_p, /**< Function object */\n                              ecma_value_t this_binding, /**< 'this' argument's value */\n                              const ecma_value_t *arguments_list_p, /**< arguments list */\n                              uint32_t arguments_list_len) /**< length of arguments list */\n{\n  JERRY_ASSERT (ecma_get_object_type (func_obj_p) == ECMA_OBJECT_TYPE_FUNCTION);\n\n  vm_frame_ctx_shared_args_t shared_args;\n  shared_args.header.status_flags = VM_FRAME_CTX_SHARED_HAS_ARG_LIST;\n  shared_args.header.function_object_p = func_obj_p;\n  shared_args.arg_list_p = arguments_list_p;\n  shared_args.arg_list_len = arguments_list_len;\n\n  /* Entering Function Code (ECMA-262 v5, 10.4.3) */\n  ecma_extended_object_t *ext_func_p = (ecma_extended_object_t *) func_obj_p;\n\n  ecma_object_t *scope_p = ECMA_GET_NON_NULL_POINTER_FROM_POINTER_TAG (ecma_object_t, ext_func_p->u.function.scope_cp);\n\n  /* 8. */\n  const ecma_compiled_code_t *bytecode_data_p = ecma_op_function_get_compiled_code (ext_func_p);\n  uint16_t status_flags = bytecode_data_p->status_flags;\n\n  shared_args.header.bytecode_header_p = bytecode_data_p;\n\n#if JERRY_BUILTIN_REALMS\n  ecma_global_object_t *realm_p = ecma_op_function_get_realm (bytecode_data_p);\n#endif /* JERRY_BUILTIN_REALMS */\n\n  /* 5. */\n  if (!(status_flags & CBC_CODE_FLAGS_LEXICAL_ENV_NOT_NEEDED))\n  {\n    shared_args.header.status_flags |= VM_FRAME_CTX_SHARED_FREE_LOCAL_ENV;\n    scope_p = ecma_create_decl_lex_env (scope_p);\n  }\n\n  /* 1. */\n  switch (CBC_FUNCTION_GET_TYPE (status_flags))\n  {\n#if JERRY_ESNEXT\n    case CBC_FUNCTION_CONSTRUCTOR:\n    {\n      return ecma_op_function_call_constructor (&shared_args, scope_p, this_binding);\n    }\n    case CBC_FUNCTION_ARROW:\n    {\n      ecma_arrow_function_t *arrow_func_p = (ecma_arrow_function_t *) func_obj_p;\n\n      if (ecma_is_value_undefined (arrow_func_p->new_target))\n      {\n        JERRY_CONTEXT (current_new_target_p) = NULL;\n      }\n      else\n      {\n        JERRY_CONTEXT (current_new_target_p) = ecma_get_object_from_value (arrow_func_p->new_target);\n      }\n\n      this_binding = arrow_func_p->this_binding;\n\n      if (JERRY_UNLIKELY (this_binding == ECMA_VALUE_UNINITIALIZED))\n      {\n        ecma_environment_record_t *env_record_p = ecma_op_get_environment_record (scope_p);\n        JERRY_ASSERT (env_record_p);\n        this_binding = env_record_p->this_binding;\n      }\n      break;\n    }\n\n#endif /* JERRY_ESNEXT */\n    default:\n    {\n#if JERRY_ESNEXT\n      shared_args.header.status_flags |= VM_FRAME_CTX_SHARED_NON_ARROW_FUNC;\n#endif /* JERRY_ESNEXT */\n\n      if (status_flags & CBC_CODE_FLAGS_STRICT_MODE)\n      {\n        break;\n      }\n\n      if (ecma_is_value_undefined (this_binding) || ecma_is_value_null (this_binding))\n      {\n        /* 2. */\n#if JERRY_BUILTIN_REALMS\n        this_binding = realm_p->this_binding;\n#else /* !JERRY_BUILTIN_REALMS */\n        this_binding = ecma_make_object_value (ecma_builtin_get_global ());\n#endif /* JERRY_BUILTIN_REALMS */\n      }\n      else if (!ecma_is_value_object (this_binding))\n      {\n        /* 3., 4. */\n        this_binding = ecma_op_to_object (this_binding);\n        shared_args.header.status_flags |= VM_FRAME_CTX_SHARED_FREE_THIS;\n\n        JERRY_ASSERT (!ECMA_IS_VALUE_ERROR (this_binding));\n      }\n      break;\n    }\n  }\n\n#if JERRY_BUILTIN_REALMS\n  ecma_global_object_t *saved_global_object_p = JERRY_CONTEXT (global_object_p);\n  JERRY_CONTEXT (global_object_p) = realm_p;\n#endif /* JERRY_BUILTIN_REALMS */\n\n  ecma_value_t ret_value = vm_run (&shared_args.header, this_binding, scope_p);\n\n#if JERRY_BUILTIN_REALMS\n  JERRY_CONTEXT (global_object_p) = saved_global_object_p;\n#endif /* JERRY_BUILTIN_REALMS */\n\n  if (JERRY_UNLIKELY (shared_args.header.status_flags & VM_FRAME_CTX_SHARED_FREE_LOCAL_ENV))\n  {\n    ecma_deref_object (scope_p);\n  }\n\n  if (JERRY_UNLIKELY (shared_args.header.status_flags & VM_FRAME_CTX_SHARED_FREE_THIS))\n  {\n    ecma_free_value (this_binding);\n  }\n\n  return ret_value;\n}",
  "abstract_func": "static ecma_value_t\necma_op_function_call_simple (ecma_object_t *VAR_0, /* COMMENT_0 */\n                              ecma_value_t VAR_1, /* COMMENT_1 */\n                              const ecma_value_t *VAR_2, /* COMMENT_2 */\n                              uint32_t VAR_3) /* COMMENT_3 */\n{\n  JERRY_ASSERT (ecma_get_object_type (VAR_0) == VAR_4);\n\n  vm_frame_ctx_shared_args_t VAR_5;\n  VAR_5.header.status_flags = VAR_6;\n  VAR_5.header.function_object_p = VAR_0;\n  VAR_5.arg_list_p = VAR_2;\n  VAR_5.arg_list_len = VAR_3;\n\n  /* COMMENT_4 */\n  ecma_extended_object_t *VAR_7 = (ecma_extended_object_t *) VAR_0;\n\n  ecma_object_t *VAR_8 = ECMA_GET_NON_NULL_POINTER_FROM_POINTER_TAG (ecma_object_t, VAR_7->u.function.scope_cp);\n\n  /* COMMENT_5 */\n  const ecma_compiled_code_t *VAR_9 = ecma_op_function_get_compiled_code (VAR_7);\n  uint16_t VAR_10 = VAR_9->status_flags;\n\n  VAR_5.header.bytecode_header_p = VAR_9;\n\n#if VAR_11\n  ecma_global_object_t *VAR_12 = ecma_op_function_get_realm (VAR_9);\n#endif /* COMMENT_6 */\n\n  /* COMMENT_7 */\n  if (!(VAR_10 & VAR_13))\n  {\n    VAR_5.header.status_flags |= VAR_14;\n    VAR_8 = ecma_create_decl_lex_env (VAR_8);\n  }\n\n  /* COMMENT_8 */\n  switch (CBC_FUNCTION_GET_TYPE (VAR_10))\n  {\n#if VAR_15\n    case VAR_16:\n    {\n      return ecma_op_function_call_constructor (&VAR_5, VAR_8, VAR_1);\n    }\n    case VAR_17:\n    {\n      ecma_arrow_function_t *VAR_18 = (ecma_arrow_function_t *) VAR_0;\n\n      if (ecma_is_value_undefined (VAR_18->new_target))\n      {\n        JERRY_CONTEXT (VAR_19) = NULL;\n      }\n      else\n      {\n        JERRY_CONTEXT (VAR_19) = ecma_get_object_from_value (VAR_18->new_target);\n      }\n\n      VAR_1 = VAR_18->this_binding;\n\n      if (JERRY_UNLIKELY (VAR_1 == VAR_20))\n      {\n        ecma_environment_record_t *VAR_21 = ecma_op_get_environment_record (VAR_8);\n        JERRY_ASSERT (VAR_21);\n        VAR_1 = VAR_21->this_binding;\n      }\n      break;\n    }\n\n#endif /* COMMENT_9 */\n    default:\n    {\n#if VAR_15\n      VAR_5.header.status_flags |= VAR_22;\n#endif /* COMMENT_9 */\n\n      if (VAR_10 & VAR_23)\n      {\n        break;\n      }\n\n      if (ecma_is_value_undefined (VAR_1) || ecma_is_value_null (VAR_1))\n      {\n        /* COMMENT_10 */\n#if VAR_11\n        VAR_1 = VAR_12->this_binding;\n#else /* COMMENT_11 */\n        VAR_1 = ecma_make_object_value (ecma_builtin_get_global ());\n#endif /* COMMENT_6 */\n      }\n      else if (!ecma_is_value_object (VAR_1))\n      {\n        /* COMMENT_12 */\n        VAR_1 = ecma_op_to_object (VAR_1);\n        VAR_5.header.status_flags |= VAR_24;\n\n        JERRY_ASSERT (!ECMA_IS_VALUE_ERROR (VAR_1));\n      }\n      break;\n    }\n  }\n\n#if VAR_11\n  ecma_global_object_t *VAR_25 = JERRY_CONTEXT (VAR_26);\n  JERRY_CONTEXT (VAR_26) = VAR_12;\n#endif /* COMMENT_6 */\n\n  ecma_value_t VAR_27 = vm_run (&VAR_5.header, VAR_1, VAR_8);\n\n#if VAR_11\n  JERRY_CONTEXT (VAR_26) = VAR_25;\n#endif /* COMMENT_6 */\n\n  if (JERRY_UNLIKELY (VAR_5.header.status_flags & VAR_14))\n  {\n    ecma_deref_object (VAR_8);\n  }\n\n  if (JERRY_UNLIKELY (VAR_5.header.status_flags & VAR_24))\n  {\n    ecma_free_value (VAR_1);\n  }\n\n  return VAR_27;\n}",
  "func_graph_path": "jerryscript-project/jerryscript/c6aab480c1e2d968871028aec53c85ac5566b34a/ecma-function-object.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -56,6 +56,13 @@\n       }\n \n       this_binding = arrow_func_p->this_binding;\n+\n+      if (JERRY_UNLIKELY (this_binding == ECMA_VALUE_UNINITIALIZED))\n+      {\n+        ecma_environment_record_t *env_record_p = ecma_op_get_environment_record (scope_p);\n+        JERRY_ASSERT (env_record_p);\n+        this_binding = env_record_p->this_binding;\n+      }\n       break;\n     }\n ",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "",
      "      if (JERRY_UNLIKELY (this_binding == ECMA_VALUE_UNINITIALIZED))",
      "      {",
      "        ecma_environment_record_t *env_record_p = ecma_op_get_environment_record (scope_p);",
      "        JERRY_ASSERT (env_record_p);",
      "        this_binding = env_record_p->this_binding;",
      "      }"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/jerryscript-project/jerryscript/pull/4878",
  "description": {
    "pr_info": {
      "title": "Fix arrow function this binding resolving if environment record is present",
      "number": 4878
    },
    "comment": [
      "This patch fixes #4872 and fixes #4876.\r\n\r\nJerryScript-DCO-1.0-Signed-off-by: Robert Fancsik robert.fancsik@h-lab.eu"
    ]
  },
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Step-by-Step Explanation:**\n\n1. **Input Analysis:** The commit message indicates a fix for arrow function 'this' binding, referencing issues without security implications.\n\n2. **Consistency Check:** The code changes are consistent with the commit message, addressing 'this' binding resolution.\n\n3. **Purpose Evaluation:** The fix is for a core JavaScript engine issue, not a security concern.\n\n4. **Security Vulnerability Assessment:** No security risks or CVE mentions, indicating it's a non-security fix.\n\n5. **Classification:** Falls under defect remediation as it corrects a bug in core logic.\n\n6. **Confidence Scoring:** High confidence (0.9) as the fix is clearly not security-related.\n\n**Final Classification:** Defect Remediation & Feature Upgrades; **Confidence:** 0.9"
}