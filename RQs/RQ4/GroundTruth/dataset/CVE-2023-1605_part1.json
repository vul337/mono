{
  "cve_id": "CVE-2023-1605",
  "cwe_ids": [
    "CWE-400"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
  "cvss_is_v3": true,
  "repo_name": "radareorg/radare2",
  "commit_msg": "fix segfault when bin->symbols is NULL #21503",
  "commit_hash": "508a6307045441defd1bef0999a1f7052097613f",
  "git_url": "https://github.com/radareorg/radare2/commit/508a6307045441defd1bef0999a1f7052097613f",
  "file_path": "libr/bin/p/bin_coff.c",
  "func_name": "patch_relocs",
  "func_before": "static RList *patch_relocs(RBin *b) {\n\tr_return_val_if_fail (b && b->iob.io && b->iob.io->desc, NULL);\n\tRBinObject *bo = r_bin_cur_object (b);\n\tRIO *io = b->iob.io;\n\tif (!bo || !bo->bin_obj) {\n\t\treturn NULL;\n\t}\n\tstruct r_bin_coff_obj *bin = (struct r_bin_coff_obj*)bo->bin_obj;\n\tif (bin->hdr.f_flags & COFF_FLAGS_TI_F_EXEC) {\n\t\treturn NULL;\n\t}\n\tif (!(io->cached & R_PERM_W)) {\n\t\teprintf (\n\t\t\t\"Warning: please run r2 with -e io.cache=true to patch \"\n\t\t\t\"relocations\\n\");\n\t\treturn NULL;\n\t}\n\n\tsize_t nimports = 0;\n\tint i;\n\tfor (i = 0; i < bin->hdr.f_nsyms; i++) {\n\t\tif (is_imported_symbol (&bin->symbols[i])) {\n\t\t\tnimports++;\n\t\t}\n\t\ti += bin->symbols[i].n_numaux;\n\t}\n\tut64 m_vaddr = UT64_MAX;\n\tif (nimports) {\n\t\tut64 offset = 0;\n\t\tRIOBank *bank = b->iob.bank_get (io, io->bank);\n\t\tRListIter *iter;\n\t\tRIOMapRef *mapref;\n\t\tr_list_foreach (bank->maprefs, iter, mapref) {\n\t\t\tRIOMap *map = b->iob.map_get (io, mapref->id);\n\t\t\tif (r_io_map_end (map) > offset) {\n\t\t\t\toffset = r_io_map_end (map);\n\t\t\t}\n\t\t}\n\t\tm_vaddr = R_ROUND (offset, 16);\n\t\tut64 size = nimports * BYTES_PER_IMP_RELOC;\n\t\tchar *muri = r_str_newf (\"malloc://%\" PFMT64u, size);\n\t\tRIODesc *desc = b->iob.open_at (io, muri, R_PERM_R, 0664, m_vaddr);\n\t\tfree (muri);\n\t\tif (!desc) {\n\t\t\treturn NULL;\n\t\t}\n\n\t\tRIOMap *map = b->iob.map_get_at (io, m_vaddr);\n\t\tif (!map) {\n\t\t\treturn NULL;\n\t\t}\n\t\tmap->name = strdup (\".imports.r2\");\n\t}\n\n\treturn _relocs_list (b, bin, true, m_vaddr);\n}",
  "abstract_func_before": "static RList *patch_relocs(RBin *VAR_0) {\n\tr_return_val_if_fail (VAR_0 && VAR_0->iob.io && VAR_0->iob.io->desc, NULL);\n\tRBinObject *VAR_1 = r_bin_cur_object (VAR_0);\n\tRIO *VAR_2 = VAR_0->iob.io;\n\tif (!VAR_1 || !VAR_1->bin_obj) {\n\t\treturn NULL;\n\t}\n\tstruct r_bin_coff_obj *VAR_3 = (struct r_bin_coff_obj*)VAR_1->bin_obj;\n\tif (VAR_3->hdr.f_flags & VAR_4) {\n\t\treturn NULL;\n\t}\n\tif (!(VAR_2->cached & VAR_5)) {\n\t\teprintf (\n\t\t\t\"Warning: please run r2 with -e io.cache=true to patch \"\n\t\t\t\"relocations\\n\");\n\t\treturn NULL;\n\t}\n\n\tsize_t VAR_6 = 0;\n\tint VAR_7;\n\tfor (VAR_7 = 0; VAR_7 < VAR_3->hdr.f_nsyms; VAR_7++) {\n\t\tif (is_imported_symbol (&VAR_3->symbols[VAR_7])) {\n\t\t\tVAR_6++;\n\t\t}\n\t\tVAR_7 += VAR_3->symbols[VAR_7].n_numaux;\n\t}\n\tut64 VAR_8 = VAR_9;\n\tif (VAR_6) {\n\t\tut64 VAR_10 = 0;\n\t\tRIOBank *VAR_11 = VAR_0->iob.bank_get (VAR_2, VAR_2->bank);\n\t\tRListIter *VAR_12;\n\t\tRIOMapRef *VAR_13;\n\t\tr_list_foreach (VAR_11->maprefs, VAR_12, VAR_13) {\n\t\t\tRIOMap *VAR_14 = VAR_0->iob.map_get (VAR_2, VAR_13->id);\n\t\t\tif (r_io_map_end (VAR_14) > VAR_10) {\n\t\t\t\tVAR_10 = r_io_map_end (VAR_14);\n\t\t\t}\n\t\t}\n\t\tVAR_8 = R_ROUND (VAR_10, 16);\n\t\tut64 VAR_15 = VAR_6 * VAR_16;\n\t\tchar *VAR_17 = r_str_newf (\"malloc://%\" VAR_18, VAR_15);\n\t\tRIODesc *VAR_19 = VAR_0->iob.open_at (VAR_2, VAR_17, VAR_20, 0664, VAR_8);\n\t\tfree (VAR_17);\n\t\tif (!VAR_19) {\n\t\t\treturn NULL;\n\t\t}\n\n\t\tRIOMap *VAR_14 = VAR_0->iob.map_get_at (VAR_2, VAR_8);\n\t\tif (!VAR_14) {\n\t\t\treturn NULL;\n\t\t}\n\t\tVAR_14->name = strdup (\".imports.r2\");\n\t}\n\n\treturn _relocs_list (VAR_0, VAR_3, true, VAR_8);\n}",
  "func_graph_path_before": "radareorg/radare2/508a6307045441defd1bef0999a1f7052097613f/bin_coff.c/vul/before/0.json",
  "func": "static RList *patch_relocs(RBin *b) {\n\tr_return_val_if_fail (b && b->iob.io && b->iob.io->desc, NULL);\n\tRBinObject *bo = r_bin_cur_object (b);\n\tRIO *io = b->iob.io;\n\tif (!bo || !bo->bin_obj) {\n\t\treturn NULL;\n\t}\n\tstruct r_bin_coff_obj *bin = (struct r_bin_coff_obj*)bo->bin_obj;\n\tif (bin->hdr.f_flags & COFF_FLAGS_TI_F_EXEC) {\n\t\treturn NULL;\n\t}\n\tif (!(io->cached & R_PERM_W)) {\n\t\teprintf (\n\t\t\t\"Warning: please run r2 with -e io.cache=true to patch \"\n\t\t\t\"relocations\\n\");\n\t\treturn NULL;\n\t}\n\n\tsize_t nimports = 0;\n\tint i;\n\tif (bin->symbols) {\n\t\tfor (i = 0; i < bin->hdr.f_nsyms; i++) {\n\t\t\tif (is_imported_symbol (&bin->symbols[i])) {\n\t\t\t\tnimports++;\n\t\t\t}\n\t\t\ti += bin->symbols[i].n_numaux;\n\t\t}\n\t}\n\tut64 m_vaddr = UT64_MAX;\n\tif (nimports) {\n\t\tut64 offset = 0;\n\t\tRIOBank *bank = b->iob.bank_get (io, io->bank);\n\t\tRListIter *iter;\n\t\tRIOMapRef *mapref;\n\t\tr_list_foreach (bank->maprefs, iter, mapref) {\n\t\t\tRIOMap *map = b->iob.map_get (io, mapref->id);\n\t\t\tif (r_io_map_end (map) > offset) {\n\t\t\t\toffset = r_io_map_end (map);\n\t\t\t}\n\t\t}\n\t\tm_vaddr = R_ROUND (offset, 16);\n\t\tut64 size = nimports * BYTES_PER_IMP_RELOC;\n\t\tchar *muri = r_str_newf (\"malloc://%\" PFMT64u, size);\n\t\tRIODesc *desc = b->iob.open_at (io, muri, R_PERM_R, 0664, m_vaddr);\n\t\tfree (muri);\n\t\tif (!desc) {\n\t\t\treturn NULL;\n\t\t}\n\n\t\tRIOMap *map = b->iob.map_get_at (io, m_vaddr);\n\t\tif (!map) {\n\t\t\treturn NULL;\n\t\t}\n\t\tmap->name = strdup (\".imports.r2\");\n\t}\n\n\treturn _relocs_list (b, bin, true, m_vaddr);\n}",
  "abstract_func": "static RList *patch_relocs(RBin *VAR_0) {\n\tr_return_val_if_fail (VAR_0 && VAR_0->iob.io && VAR_0->iob.io->desc, NULL);\n\tRBinObject *VAR_1 = r_bin_cur_object (VAR_0);\n\tRIO *VAR_2 = VAR_0->iob.io;\n\tif (!VAR_1 || !VAR_1->bin_obj) {\n\t\treturn NULL;\n\t}\n\tstruct r_bin_coff_obj *VAR_3 = (struct r_bin_coff_obj*)VAR_1->bin_obj;\n\tif (VAR_3->hdr.f_flags & VAR_4) {\n\t\treturn NULL;\n\t}\n\tif (!(VAR_2->cached & VAR_5)) {\n\t\teprintf (\n\t\t\t\"Warning: please run r2 with -e io.cache=true to patch \"\n\t\t\t\"relocations\\n\");\n\t\treturn NULL;\n\t}\n\n\tsize_t VAR_6 = 0;\n\tint VAR_7;\n\tif (VAR_3->symbols) {\n\t\tfor (VAR_7 = 0; VAR_7 < VAR_3->hdr.f_nsyms; VAR_7++) {\n\t\t\tif (is_imported_symbol (&VAR_3->symbols[VAR_7])) {\n\t\t\t\tVAR_6++;\n\t\t\t}\n\t\t\tVAR_7 += VAR_3->symbols[VAR_7].n_numaux;\n\t\t}\n\t}\n\tut64 VAR_8 = VAR_9;\n\tif (VAR_6) {\n\t\tut64 VAR_10 = 0;\n\t\tRIOBank *VAR_11 = VAR_0->iob.bank_get (VAR_2, VAR_2->bank);\n\t\tRListIter *VAR_12;\n\t\tRIOMapRef *VAR_13;\n\t\tr_list_foreach (VAR_11->maprefs, VAR_12, VAR_13) {\n\t\t\tRIOMap *VAR_14 = VAR_0->iob.map_get (VAR_2, VAR_13->id);\n\t\t\tif (r_io_map_end (VAR_14) > VAR_10) {\n\t\t\t\tVAR_10 = r_io_map_end (VAR_14);\n\t\t\t}\n\t\t}\n\t\tVAR_8 = R_ROUND (VAR_10, 16);\n\t\tut64 VAR_15 = VAR_6 * VAR_16;\n\t\tchar *VAR_17 = r_str_newf (\"malloc://%\" VAR_18, VAR_15);\n\t\tRIODesc *VAR_19 = VAR_0->iob.open_at (VAR_2, VAR_17, VAR_20, 0664, VAR_8);\n\t\tfree (VAR_17);\n\t\tif (!VAR_19) {\n\t\t\treturn NULL;\n\t\t}\n\n\t\tRIOMap *VAR_14 = VAR_0->iob.map_get_at (VAR_2, VAR_8);\n\t\tif (!VAR_14) {\n\t\t\treturn NULL;\n\t\t}\n\t\tVAR_14->name = strdup (\".imports.r2\");\n\t}\n\n\treturn _relocs_list (VAR_0, VAR_3, true, VAR_8);\n}",
  "func_graph_path": "radareorg/radare2/508a6307045441defd1bef0999a1f7052097613f/bin_coff.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -18,11 +18,13 @@\n \n \tsize_t nimports = 0;\n \tint i;\n-\tfor (i = 0; i < bin->hdr.f_nsyms; i++) {\n-\t\tif (is_imported_symbol (&bin->symbols[i])) {\n-\t\t\tnimports++;\n+\tif (bin->symbols) {\n+\t\tfor (i = 0; i < bin->hdr.f_nsyms; i++) {\n+\t\t\tif (is_imported_symbol (&bin->symbols[i])) {\n+\t\t\t\tnimports++;\n+\t\t\t}\n+\t\t\ti += bin->symbols[i].n_numaux;\n \t\t}\n-\t\ti += bin->symbols[i].n_numaux;\n \t}\n \tut64 m_vaddr = UT64_MAX;\n \tif (nimports) {",
  "diff_line_info": {
    "deleted_lines": [
      "\tfor (i = 0; i < bin->hdr.f_nsyms; i++) {",
      "\t\tif (is_imported_symbol (&bin->symbols[i])) {",
      "\t\t\tnimports++;",
      "\t\ti += bin->symbols[i].n_numaux;"
    ],
    "added_lines": [
      "\tif (bin->symbols) {",
      "\t\tfor (i = 0; i < bin->hdr.f_nsyms; i++) {",
      "\t\t\tif (is_imported_symbol (&bin->symbols[i])) {",
      "\t\t\t\tnimports++;",
      "\t\t\t}",
      "\t\t\ti += bin->symbols[i].n_numaux;"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/radareorg/radare2/pull/21504",
  "description": {
    "pr_info": {
      "title": "fix segfault when bin->symbols is NULL #21503 ##bin",
      "number": 21504
    },
    "comment": [
      "<!--\r\nRead https://github.com/radareorg/radare2/blob/master/DEVELOPERS.md\r\n* PR title must be capitalized, concise and use ##tags\r\n* If the PR is fixing a ticket use 'Fix #1234 - ..' in the commit message\r\n* Follow the coding style, add tests and documentation if necessary\r\n-->\r\n\r\n- [x] Mark this if you consider it ready to merge\r\n\r\n**Description**\r\nextra check added before for loop if bin->symbols is not NULL in patch_relocs()\r\n",
      "Looks good!"
    ]
  },
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Defect Remediation & Feature Upgrades; **Confidence:** 0.9"
}