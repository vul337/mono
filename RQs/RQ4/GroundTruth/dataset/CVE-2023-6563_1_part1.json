{
  "cve_id": "CVE-2023-6563",
  "cwe_ids": [
    "CWE-770"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:C/C:N/I:N/A:H",
  "cvss_is_v3": true,
  "repo_name": "keycloak",
  "commit_msg": "Fix performance issues with many offline sessions\n\nFixes: #13340",
  "commit_hash": "11eb952e1df7cbb95b1e2c101dfd4839a2375695",
  "git_url": "https://github.com/keycloak/keycloak/commit/11eb952e1df7cbb95b1e2c101dfd4839a2375695",
  "file_path": "model/jpa/src/main/java/org/keycloak/models/jpa/session/JpaUserSessionPersisterProvider.java",
  "func_name": "loadUserSessionsStream",
  "func_before": "@Override\n    public Stream<UserSessionModel> loadUserSessionsStream(RealmModel realm, ClientModel client, boolean offline, Integer firstResult, Integer maxResults) {\n\n        String offlineStr = offlineToString(offline);\n        TypedQuery<PersistentUserSessionEntity> query;\n        StorageId clientStorageId = new StorageId(client.getId());\n        if (clientStorageId.isLocal()) {\n            query = paginateQuery(\n                    em.createNamedQuery(\"findUserSessionsByClientId\", PersistentUserSessionEntity.class),\n                    firstResult, maxResults);\n            query.setParameter(\"clientId\", client.getId());\n        } else {\n            query = paginateQuery(\n                    em.createNamedQuery(\"findUserSessionsByExternalClientId\", PersistentUserSessionEntity.class),\n                    firstResult, maxResults);\n            query.setParameter(\"clientStorageProvider\", clientStorageId.getProviderId());\n            query.setParameter(\"externalClientId\", clientStorageId.getExternalId());\n        }\n\n        query.setParameter(\"offline\", offlineStr);\n        query.setParameter(\"realmId\", realm.getId());\n\n        return loadUserSessionsWithClientSessions(query, offlineStr);\n    }",
  "abstract_func_before": "@Override\n    public Stream<UserSessionModel> loadUserSessionsStream(RealmModel VAR_0, ClientModel VAR_1, boolean VAR_2, Integer VAR_3, Integer VAR_4) {\n\n        String VAR_5 = offlineToString(VAR_2);\n        TypedQuery<PersistentUserSessionEntity> VAR_6;\n        StorageId VAR_7 = new StorageId(VAR_1.getId());\n        if (VAR_7.isLocal()) {\n            VAR_6 = paginateQuery(\n                    VAR_8.createNamedQuery(\"findUserSessionsByClientId\", PersistentUserSessionEntity.class),\n                    VAR_3, VAR_4);\n            VAR_6.setParameter(\"clientId\", VAR_1.getId());\n        } else {\n            VAR_6 = paginateQuery(\n                    VAR_8.createNamedQuery(\"findUserSessionsByExternalClientId\", PersistentUserSessionEntity.class),\n                    VAR_3, VAR_4);\n            VAR_6.setParameter(\"clientStorageProvider\", VAR_7.getProviderId());\n            VAR_6.setParameter(\"externalClientId\", VAR_7.getExternalId());\n        }\n\n        VAR_6.setParameter(\"offline\", VAR_5);\n        VAR_6.setParameter(\"realmId\", VAR_0.getId());\n\n        return loadUserSessionsWithClientSessions(VAR_6, VAR_5);\n    }",
  "func_graph_path_before": "keycloak/11eb952e1df7cbb95b1e2c101dfd4839a2375695/JpaUserSessionPersisterProvider.java/vul/before/2.json",
  "func": "@Override\n    public Stream<UserSessionModel> loadUserSessionsStream(RealmModel realm, ClientModel client, boolean offline, Integer firstResult, Integer maxResults) {\n\n        String offlineStr = offlineToString(offline);\n        TypedQuery<PersistentUserSessionEntity> query;\n        StorageId clientStorageId = new StorageId(client.getId());\n        if (clientStorageId.isLocal()) {\n            query = paginateQuery(\n                    em.createNamedQuery(\"findUserSessionsByClientId\", PersistentUserSessionEntity.class),\n                    firstResult, maxResults);\n            query.setParameter(\"clientId\", client.getId());\n        } else {\n            query = paginateQuery(\n                    em.createNamedQuery(\"findUserSessionsByExternalClientId\", PersistentUserSessionEntity.class),\n                    firstResult, maxResults);\n            query.setParameter(\"clientStorageProvider\", clientStorageId.getProviderId());\n            query.setParameter(\"externalClientId\", clientStorageId.getExternalId());\n        }\n\n        query.setParameter(\"offline\", offlineStr);\n        query.setParameter(\"realmId\", realm.getId());\n\n        return loadUserSessionsWithClientSessions(query, offlineStr, true);\n    }",
  "abstract_func": "@Override\n    public Stream<UserSessionModel> loadUserSessionsStream(RealmModel VAR_0, ClientModel VAR_1, boolean VAR_2, Integer VAR_3, Integer VAR_4) {\n\n        String VAR_5 = offlineToString(VAR_2);\n        TypedQuery<PersistentUserSessionEntity> VAR_6;\n        StorageId VAR_7 = new StorageId(VAR_1.getId());\n        if (VAR_7.isLocal()) {\n            VAR_6 = paginateQuery(\n                    VAR_8.createNamedQuery(\"findUserSessionsByClientId\", PersistentUserSessionEntity.class),\n                    VAR_3, VAR_4);\n            VAR_6.setParameter(\"clientId\", VAR_1.getId());\n        } else {\n            VAR_6 = paginateQuery(\n                    VAR_8.createNamedQuery(\"findUserSessionsByExternalClientId\", PersistentUserSessionEntity.class),\n                    VAR_3, VAR_4);\n            VAR_6.setParameter(\"clientStorageProvider\", VAR_7.getProviderId());\n            VAR_6.setParameter(\"externalClientId\", VAR_7.getExternalId());\n        }\n\n        VAR_6.setParameter(\"offline\", VAR_5);\n        VAR_6.setParameter(\"realmId\", VAR_0.getId());\n\n        return loadUserSessionsWithClientSessions(VAR_6, VAR_5, true);\n    }",
  "func_graph_path": "keycloak/11eb952e1df7cbb95b1e2c101dfd4839a2375695/JpaUserSessionPersisterProvider.java/vul/after/2.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -20,5 +20,5 @@\n         query.setParameter(\"offline\", offlineStr);\n         query.setParameter(\"realmId\", realm.getId());\n \n-        return loadUserSessionsWithClientSessions(query, offlineStr);\n+        return loadUserSessionsWithClientSessions(query, offlineStr, true);\n     }",
  "diff_line_info": {
    "deleted_lines": [
      "        return loadUserSessionsWithClientSessions(query, offlineStr);"
    ],
    "added_lines": [
      "        return loadUserSessionsWithClientSessions(query, offlineStr, true);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/keycloak/keycloak/pull/15463",
  "description": {
    "pr_info": {
      "title": "Fix performance issues with many offline sessions",
      "number": 15463
    },
    "comment": [
      "Fixes: #13340\r\n\r\nPipeline run: https://master-jenkins.redhat.com/job/universal-test-pipeline-server/2385/\r\n<!---\r\nPlease read https://github.com/keycloak/keycloak/blob/main/CONTRIBUTING.md and follow these guidelines when contributing to Keycloak\r\n-->\r\n",
      "Thanks for the PR. I have been thinking about this a bit and here are my thoughts: \r\nShould we be worried about reintroducing IN-clause which was removed in last performance optimization [attempt](https://github.com/keycloak/keycloak/pull/8012)? If the `userSessionsIds` set used in IN-cause gets too big, performance will be probably bad. However, I think we should be OK because `userSessionIds` size should be reasonable. There are these use-cases: \r\n- load user session by user (not limited by first,max parameters as it is called with first=0, max=null, but limited by number of user session which user can has. Not sure if this can be a high number in real scenarios. Maybe yes, if someone creates many offline user sessions for a user by i.e `password` grant type)\r\n- load user sessions by client (this can be a high number but it is called only from services and endpoint is limiting max result size -- 100 by default)\r\n- load user sessions by interval - IN clause not used and method is called only from pre-loading\r\n\r\n@hmlnarik What are your thoughts on this?",
      "> @hmlnarik What are your thoughts on this?\r\n\r\nThank you for the reply. These are exactly the arguments why I am in favour of introducing the `IN` clauses for the cases when the session is known in advance while keeping the interval for preloading, and this PR should reflect it."
    ]
  },
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Defect Remediation & Feature Upgrades; **Confidence:** 0.9"
}