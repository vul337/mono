{
  "cve_id": "CVE-2021-25940",
  "cwe_ids": [
    "CWE-613"
  ],
  "cvss_vector": "AV:N/AC:M/Au:S/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "arangodb",
  "commit_msg": "Revive startup parameter `--server.session-timeout` (#14118)\n\nCo-authored-by: Tobias GÃ¶dderz <tobias@arangodb.com>",
  "commit_hash": "e9c6ee9dcca7b9b4fbcd02a0b323d205bee838d3",
  "git_url": "https://github.com/arangodb/arangodb/commit/e9c6ee9dcca7b9b4fbcd02a0b323d205bee838d3",
  "file_path": "arangod/GeneralServer/AuthenticationFeature.cpp",
  "func_name": "AuthenticationFeature::validateOptions",
  "func_before": "void AuthenticationFeature::validateOptions(std::shared_ptr<ProgramOptions> options) {\n  if (!_jwtSecretKeyfileProgramOption.empty() && !_jwtSecretFolderProgramOption.empty()) {\n    LOG_TOPIC(\"d3515\", FATAL, Logger::STARTUP)\n        << \"please specify either '--server.jwt-\"\n           \"secret-keyfile' or '--server.jwt-secret-folder' but not both.\";\n    FATAL_ERROR_EXIT();\n  }\n\n  if (!_jwtSecretKeyfileProgramOption.empty() || !_jwtSecretFolderProgramOption.empty()) {\n    Result res = loadJwtSecretsFromFile();\n    if (res.fail()) {\n      LOG_TOPIC(\"d3617\", FATAL, Logger::STARTUP) << res.errorMessage();\n      FATAL_ERROR_EXIT();\n    }\n  }\n  if (!_jwtSecretProgramOption.empty()) {\n    if (_jwtSecretProgramOption.length() > _maxSecretLength) {\n      LOG_TOPIC(\"9abfc\", FATAL, arangodb::Logger::STARTUP)\n          << \"Given JWT secret too long. Max length is \" << _maxSecretLength;\n      FATAL_ERROR_EXIT();\n    }\n  }\n\n  if (options->processingResult().touched(\"server.jwt-secret\")) {\n    LOG_TOPIC(\"1aaae\", WARN, arangodb::Logger::AUTHENTICATION)\n        << \"--server.jwt-secret is insecure. Use --server.jwt-secret-keyfile \"\n           \"instead.\";\n  }\n}",
  "abstract_func_before": "void AuthenticationFeature::validateOptions(std::shared_ptr<ProgramOptions> VAR_0) {\n  if (!VAR_1.empty() && !VAR_2.empty()) {\n    LOG_TOPIC(\"d3515\", VAR_3, Logger::STARTUP)\n        << \"please specify either '--server.jwt-\"\n           \"secret-keyfile' or '--server.jwt-secret-folder' but not both.\";\n    FATAL_ERROR_EXIT();\n  }\n\n  if (!VAR_1.empty() || !VAR_2.empty()) {\n    Result VAR_4 = loadJwtSecretsFromFile();\n    if (VAR_4.fail()) {\n      LOG_TOPIC(\"d3617\", VAR_3, Logger::STARTUP) << VAR_4.errorMessage();\n      FATAL_ERROR_EXIT();\n    }\n  }\n  if (!VAR_5.empty()) {\n    if (VAR_5.length() > VAR_6) {\n      LOG_TOPIC(\"9abfc\", VAR_3, arangodb::Logger::STARTUP)\n          << \"Given JWT secret too long. Max length is \" << VAR_6;\n      FATAL_ERROR_EXIT();\n    }\n  }\n\n  if (VAR_0->processingResult().touched(\"server.jwt-secret\")) {\n    LOG_TOPIC(\"1aaae\", VAR_7, arangodb::Logger::AUTHENTICATION)\n        << \"--server.jwt-secret is insecure. Use --server.jwt-secret-keyfile \"\n           \"instead.\";\n  }\n}",
  "func_graph_path_before": "arangodb/e9c6ee9dcca7b9b4fbcd02a0b323d205bee838d3/AuthenticationFeature.cpp/vul/before/1.json",
  "func": "void AuthenticationFeature::validateOptions(std::shared_ptr<ProgramOptions> options) {\n  if (!_jwtSecretKeyfileProgramOption.empty() && !_jwtSecretFolderProgramOption.empty()) {\n    LOG_TOPIC(\"d3515\", FATAL, Logger::STARTUP)\n        << \"please specify either '--server.jwt-\"\n           \"secret-keyfile' or '--server.jwt-secret-folder' but not both.\";\n    FATAL_ERROR_EXIT();\n  }\n\n  if (!_jwtSecretKeyfileProgramOption.empty() || !_jwtSecretFolderProgramOption.empty()) {\n    Result res = loadJwtSecretsFromFile();\n    if (res.fail()) {\n      LOG_TOPIC(\"d3617\", FATAL, Logger::STARTUP) << res.errorMessage();\n      FATAL_ERROR_EXIT();\n    }\n  }\n  if (!_jwtSecretProgramOption.empty()) {\n    if (_jwtSecretProgramOption.length() > _maxSecretLength) {\n      LOG_TOPIC(\"9abfc\", FATAL, arangodb::Logger::STARTUP)\n          << \"Given JWT secret too long. Max length is \" << _maxSecretLength;\n      FATAL_ERROR_EXIT();\n    }\n  }\n  \n  if (_sessionTimeout <= 1.0) {\n    LOG_TOPIC(\"85046\", FATAL, arangodb::Logger::AUTHENTICATION)\n        << \"--server.session-timeout has an invalid value: \" << _sessionTimeout;\n    FATAL_ERROR_EXIT();\n  }\n\n  if (options->processingResult().touched(\"server.jwt-secret\")) {\n    LOG_TOPIC(\"1aaae\", WARN, arangodb::Logger::AUTHENTICATION)\n        << \"--server.jwt-secret is insecure. Use --server.jwt-secret-keyfile \"\n           \"instead.\";\n  }\n}",
  "abstract_func": "void AuthenticationFeature::validateOptions(std::shared_ptr<ProgramOptions> VAR_0) {\n  if (!VAR_1.empty() && !VAR_2.empty()) {\n    LOG_TOPIC(\"d3515\", VAR_3, Logger::STARTUP)\n        << \"please specify either '--server.jwt-\"\n           \"secret-keyfile' or '--server.jwt-secret-folder' but not both.\";\n    FATAL_ERROR_EXIT();\n  }\n\n  if (!VAR_1.empty() || !VAR_2.empty()) {\n    Result VAR_4 = loadJwtSecretsFromFile();\n    if (VAR_4.fail()) {\n      LOG_TOPIC(\"d3617\", VAR_3, Logger::STARTUP) << VAR_4.errorMessage();\n      FATAL_ERROR_EXIT();\n    }\n  }\n  if (!VAR_5.empty()) {\n    if (VAR_5.length() > VAR_6) {\n      LOG_TOPIC(\"9abfc\", VAR_3, arangodb::Logger::STARTUP)\n          << \"Given JWT secret too long. Max length is \" << VAR_6;\n      FATAL_ERROR_EXIT();\n    }\n  }\n  \n  if (VAR_7 <= 1.0) {\n    LOG_TOPIC(\"85046\", VAR_3, arangodb::Logger::AUTHENTICATION)\n        << \"--server.session-timeout has an invalid value: \" << VAR_7;\n    FATAL_ERROR_EXIT();\n  }\n\n  if (VAR_0->processingResult().touched(\"server.jwt-secret\")) {\n    LOG_TOPIC(\"1aaae\", VAR_8, arangodb::Logger::AUTHENTICATION)\n        << \"--server.jwt-secret is insecure. Use --server.jwt-secret-keyfile \"\n           \"instead.\";\n  }\n}",
  "func_graph_path": "arangodb/e9c6ee9dcca7b9b4fbcd02a0b323d205bee838d3/AuthenticationFeature.cpp/vul/after/1.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -20,6 +20,12 @@\n       FATAL_ERROR_EXIT();\n     }\n   }\n+  \n+  if (_sessionTimeout <= 1.0) {\n+    LOG_TOPIC(\"85046\", FATAL, arangodb::Logger::AUTHENTICATION)\n+        << \"--server.session-timeout has an invalid value: \" << _sessionTimeout;\n+    FATAL_ERROR_EXIT();\n+  }\n \n   if (options->processingResult().touched(\"server.jwt-secret\")) {\n     LOG_TOPIC(\"1aaae\", WARN, arangodb::Logger::AUTHENTICATION)",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "  ",
      "  if (_sessionTimeout <= 1.0) {",
      "    LOG_TOPIC(\"85046\", FATAL, arangodb::Logger::AUTHENTICATION)",
      "        << \"--server.session-timeout has an invalid value: \" << _sessionTimeout;",
      "    FATAL_ERROR_EXIT();",
      "  }"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/arangodb/arangodb/pull/14118",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/arangodb/arangodb/pull/14118: 403 Client Error: Forbidden for url: https://api.github.com/repos/arangodb/arangodb/pulls/14118",
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.85,
  "Bug Filter Response": "**Final Classification:** Defect Remediation & Feature Upgrades; **Confidence:** 0.85\n\n**Step-by-Step Explanation:**\n\n1. **Purpose of Change:** The patch reintroduces a startup parameter `--server.session-timeout` to control session timeouts, enhancing feature functionality.\n2. **Non-Security Nature:** While it affects authentication security aspects, it doesn't fix a known security vulnerability but introduces a new feature with safeguards.\n3. **Confidence:** High because the purpose is clear and the changes align with introducing a new feature with safety checks."
}