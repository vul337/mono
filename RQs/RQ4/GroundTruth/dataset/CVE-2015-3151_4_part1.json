{
  "cve_id": "CVE-2015-3151",
  "cwe_ids": [
    "CWE-22"
  ],
  "cvss_vector": "AV:L/AC:L/Au:N/C:C/I:C/A:C",
  "cvss_is_v3": false,
  "repo_name": "abrt/libreport",
  "commit_msg": "dd: harden functions against directory traversal issues\n\nTest correctness of all accessed dump dir files in all dd* functions.\nBefore this commit, the callers were allowed to pass strings like\n\"../../etc/shadow\" in the filename argument of all dd* functions.\n\nRelated: #1214457\n\nSigned-off-by: Jakub Filak <jfilak@redhat.com>",
  "commit_hash": "239c4f7d1f47265526b39ad70106767d00805277",
  "git_url": "https://github.com/abrt/libreport/commit/239c4f7d1f47265526b39ad70106767d00805277",
  "file_path": "src/lib/dump_dir.c",
  "func_name": "dd_save_binary",
  "func_before": "void dd_save_binary(struct dump_dir* dd, const char* name, const char* data, unsigned size)\n{\n    if (!dd->locked)\n        error_msg_and_die(\"dump_dir is not opened\"); /* bug */\n\n    char *full_path = concat_path_file(dd->dd_dirname, name);\n    save_binary_file(full_path, data, size, dd->dd_uid, dd->dd_gid, dd->mode);\n    free(full_path);\n}",
  "abstract_func_before": "void dd_save_binary(struct dump_dir* VAR_0, const char* VAR_1, const char* VAR_2, unsigned VAR_3)\n{\n    if (!VAR_0->locked)\n        error_msg_and_die(\"dump_dir is not opened\"); /* COMMENT_0 */\n\n    char *VAR_4 = concat_path_file(VAR_0->dd_dirname, VAR_1);\n    save_binary_file(VAR_4, VAR_2, VAR_3, VAR_0->dd_uid, VAR_0->dd_gid, VAR_0->mode);\n    free(VAR_4);\n}",
  "func_graph_path_before": "abrt/libreport/239c4f7d1f47265526b39ad70106767d00805277/dump_dir.c/vul/before/4.json",
  "func": "void dd_save_binary(struct dump_dir* dd, const char* name, const char* data, unsigned size)\n{\n    if (!dd->locked)\n        error_msg_and_die(\"dump_dir is not opened\"); /* bug */\n\n    if (!str_is_correct_filename(name))\n        error_msg_and_die(\"Cannot save binary. '%s' is not a valid file name\", name);\n\n    char *full_path = concat_path_file(dd->dd_dirname, name);\n    save_binary_file(full_path, data, size, dd->dd_uid, dd->dd_gid, dd->mode);\n    free(full_path);\n}",
  "abstract_func": "void dd_save_binary(struct dump_dir* VAR_0, const char* VAR_1, const char* VAR_2, unsigned VAR_3)\n{\n    if (!VAR_0->locked)\n        error_msg_and_die(\"dump_dir is not opened\"); /* COMMENT_0 */\n\n    if (!str_is_correct_filename(VAR_1))\n        error_msg_and_die(\"Cannot save binary. '%s' is not a valid file name\", VAR_1);\n\n    char *VAR_4 = concat_path_file(VAR_0->dd_dirname, VAR_1);\n    save_binary_file(VAR_4, VAR_2, VAR_3, VAR_0->dd_uid, VAR_0->dd_gid, VAR_0->mode);\n    free(VAR_4);\n}",
  "func_graph_path": "abrt/libreport/239c4f7d1f47265526b39ad70106767d00805277/dump_dir.c/vul/after/4.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -3,6 +3,9 @@\n     if (!dd->locked)\n         error_msg_and_die(\"dump_dir is not opened\"); /* bug */\n \n+    if (!str_is_correct_filename(name))\n+        error_msg_and_die(\"Cannot save binary. '%s' is not a valid file name\", name);\n+\n     char *full_path = concat_path_file(dd->dd_dirname, name);\n     save_binary_file(full_path, data, size, dd->dd_uid, dd->dd_gid, dd->mode);\n     free(full_path);",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "    if (!str_is_correct_filename(name))",
      "        error_msg_and_die(\"Cannot save binary. '%s' is not a valid file name\", name);",
      ""
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/abrt/libreport/pull/343",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/abrt/libreport/pull/343: 403 Client Error: Forbidden for url: https://api.github.com/repos/abrt/libreport/pulls/343",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.9"
}