{
  "cve_id": "CVE-2022-36007",
  "cwe_ids": [
    "CWE-22"
  ],
  "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:N",
  "cvss_is_v3": true,
  "repo_name": "jlangch/venice",
  "commit_msg": "vuln-fix: Partial Path Traversal Vulnerability\n\nThis fixes a partial path traversal vulnerability.\n\nReplaces `dir.getCanonicalPath().startsWith(parent.getCanonicalPath())`, which is vulnerable to partial path traversal attacks, with the more secure `dir.getCanonicalFile().toPath().startsWith(parent.getCanonicalFile().toPath())`.\n\nTo demonstrate this vulnerability, consider `\"/usr/outnot\".startsWith(\"/usr/out\")`.\nThe check is bypassed although `/outnot` is not under the `/out` directory.\nIt's important to understand that the terminating slash may be removed when using various `String` representations of the `File` object.\nFor example, on Linux, `println(new File(\"/var\"))` will print `/var`, but `println(new File(\"/var\", \"/\")` will print `/var/`;\nhowever, `println(new File(\"/var\", \"/\").getCanonicalPath())` will print `/var`.\n\nWeakness: CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')\nSeverity: Medium\nCVSSS: 6.1\nDetection: CodeQL & OpenRewrite (https://public.moderne.io/recipes/org.openrewrite.java.security.PartialPathTraversalVulnerability)\n\nReported-by: Jonathan Leitschuh <Jonathan.Leitschuh@gmail.com>\nSigned-off-by: Jonathan Leitschuh <Jonathan.Leitschuh@gmail.com>\n\nBug-tracker: https://github.com/JLLeitschuh/security-research/issues/13\n\nCo-authored-by: Moderne <team@moderne.io>",
  "commit_hash": "c942c73136333bc493050910f171a48e6f575b23",
  "git_url": "https://github.com/jlangch/venice/commit/c942c73136333bc493050910f171a48e6f575b23",
  "file_path": "src/main/java/com/github/jlangch/venice/impl/util/io/LoadPaths.java",
  "func_name": "isFileWithinDirectory",
  "func_before": "private boolean isFileWithinDirectory(\n            final File dir,\n            final File file\n    ) throws IOException {\n        final File dir_ = dir.getAbsoluteFile();\n        if (dir_.isDirectory()) {\n            final File fl = new File(dir_, file.getPath());\n            if (fl.isFile()) {\n                if (fl.getCanonicalPath().startsWith(dir_.getCanonicalPath())) {\n                    // Prevent accessing files outside the load-path.\n                    // E.g.: ../../coffee\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }",
  "abstract_func_before": "private boolean isFileWithinDirectory(\n            final File VAR_0,\n            final File VAR_1\n    ) throws IOException {\n        final File VAR_2 = VAR_0.getAbsoluteFile();\n        if (VAR_2.isDirectory()) {\n            final File VAR_3 = new File(VAR_2, VAR_1.getPath());\n            if (VAR_3.isFile()) {\n                if (VAR_3.getCanonicalPath().startsWith(VAR_2.getCanonicalPath())) {\n                    /* COMMENT_0 */\n                    /* COMMENT_1 */\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }",
  "func_graph_path_before": "jlangch/venice/c942c73136333bc493050910f171a48e6f575b23/LoadPaths.java/vul/before/0.json",
  "func": "private boolean isFileWithinDirectory(\n            final File dir,\n            final File file\n    ) throws IOException {\n        final File dir_ = dir.getAbsoluteFile();\n        if (dir_.isDirectory()) {\n            final File fl = new File(dir_, file.getPath());\n            if (fl.isFile()) {\n                if (fl.getCanonicalFile().toPath().startsWith(dir_.getCanonicalFile().toPath())) {\n                    // Prevent accessing files outside the load-path.\n                    // E.g.: ../../coffee\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }",
  "abstract_func": "private boolean isFileWithinDirectory(\n            final File VAR_0,\n            final File VAR_1\n    ) throws IOException {\n        final File VAR_2 = VAR_0.getAbsoluteFile();\n        if (VAR_2.isDirectory()) {\n            final File VAR_3 = new File(VAR_2, VAR_1.getPath());\n            if (VAR_3.isFile()) {\n                if (VAR_3.getCanonicalFile().toPath().startsWith(VAR_2.getCanonicalFile().toPath())) {\n                    /* COMMENT_0 */\n                    /* COMMENT_1 */\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }",
  "func_graph_path": "jlangch/venice/c942c73136333bc493050910f171a48e6f575b23/LoadPaths.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -6,7 +6,7 @@\n         if (dir_.isDirectory()) {\n             final File fl = new File(dir_, file.getPath());\n             if (fl.isFile()) {\n-                if (fl.getCanonicalPath().startsWith(dir_.getCanonicalPath())) {\n+                if (fl.getCanonicalFile().toPath().startsWith(dir_.getCanonicalFile().toPath())) {\n                     // Prevent accessing files outside the load-path.\n                     // E.g.: ../../coffee\n                     return true;",
  "diff_line_info": {
    "deleted_lines": [
      "                if (fl.getCanonicalPath().startsWith(dir_.getCanonicalPath())) {"
    ],
    "added_lines": [
      "                if (fl.getCanonicalFile().toPath().startsWith(dir_.getCanonicalFile().toPath())) {"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/jlangch/venice/pull/4",
  "description": {
    "pr_info": {
      "title": "[SECURITY] Fix Partial Path Traversal Vulnerability",
      "number": 4
    },
    "comment": [
      "# Security Vulnerability Fix\n\nThis pull request fixes a partial-path traversal vulnerability due to an insufficient path traversal guard.\n\nEven if you deem, as the maintainer of this project, this is not necessarily fixing a security vulnerability, it is still a valid security hardening.\n\n## Preamble\n\n### Impact\n\nThis issue allows a malicious actor to potentially break out of the expected directory. The impact is limited to sibling directories. For example, `userControlled.getCanonicalPath().startsWith(\"/usr/out\")` will allow an attacker to access a directory with a name like `/usr/outnot`. \n\n### Why?\n\nTo demonstrate this vulnerability, consider `\"/usr/outnot\".startsWith(\"/usr/out\")`.\nThe check is bypassed although `/outnot` is not under the `/out` directory.\nIt's important to understand that the terminating slash may be removed when using various `String` representations of the `File` object.\nFor example, on Linux, `println(new File(\"/var\"))` will print `/var`, but `println(new File(\"/var\", \"/\")` will print `/var/`;\nhowever, `println(new File(\"/var\", \"/\").getCanonicalPath())` will print `/var`.\n\n### The Fix\n\nComparing paths with the `java.nio.files.Path#startsWith` will adequately protect againts this vulnerability.\n\nFor example: `file.getCanonicalFile().toPath().startsWith(BASE_DIRECTORY)` or `file.getCanonicalFile().toPath().startsWith(BASE_DIRECTORY_FILE.getCanonicalFile().toPath())`\n\n### Other Examples\n\n - [CVE-2022-31159](https://github.com/aws/aws-sdk-java/security/advisories/GHSA-c28r-hw5m-5gv3) - aws/aws-sdk-java\n - [CVE-2022-23457](https://securitylab.github.com/advisories/GHSL-2022-008_The_OWASP_Enterprise_Security_API/) - ESAPI/esapi-java-legacy\n\n# :arrow_right: Vulnerability Disclosure :arrow_left:\n\n:wave: Vulnerability disclosure is a super important part of the vulnerability handling process and should not be skipped! This may be completely new to you, and that's okay, I'm here to assist!\n\nFirst question, do we need to perform vulnerability disclosure? It depends!\n\n 1. Is the vulnerable code only in tests or example code? No disclosure required!\n 2. Is the vulnerable code in code shipped to your end users? Vulnerability disclosure is probably required!\n\n## Vulnerability Disclosure How-To\n\nYou have a few options options to perform vulnerability disclosure. However, I'd like to suggest the following 2 options:\n\n 1. Request a CVE number from GitHub by creating a repository-level [GitHub Security Advisory](https://docs.github.com/en/code-security/repository-security-advisories/creating-a-repository-security-advisory). This has the advantage that, if you provide sufficient information, GitHub will automatically generate Dependabot alerts for your downstream consumers, resolving this vulnerability more quickly.\n 2. Reach out to the team at Snyk to assist with CVE issuance. They can be reached at the [Snyk's Disclosure Email](mailto:report@snyk.io). Note: Please include `JLLeitschuh Disclosure` in the subject of your email so it is not missed.\n\n## Detecting this and Future Vulnerabilities\n\nYou can automatically detect future vulnerabilities like this by enabling the free (for open-source) [GitHub Action](https://github.com/github/codeql-action).\n\nI'm not an employee of GitHub, I'm simply an open-source security researcher.\n\n## Source\n\nThis contribution was automatically generated with an [OpenRewrite](https://github.com/openrewrite/rewrite) [refactoring recipe](https://docs.openrewrite.org/), which was lovingly hand crafted to bring this security fix to your repository.\n\nThe source code that generated this PR can be found here:\n[PartialPathTraversalVulnerability](https://github.com/openrewrite/rewrite-java-security/blob/main/src/main/java/org/openrewrite/java/security/PartialPathTraversalVulnerability.java)\n\n## Why didn't you disclose privately (ie. coordinated disclosure)?\n\nThis PR was automatically generated, in-bulk, and sent to this project as well as many others, all at the same time.\n\nThis is technically what is called a \"Full Disclosure\" in vulnerability disclosure, and I agree it's less than ideal. If GitHub offered a way to create private pull requests to submit pull requests, I'd leverage it, but that infrastructure, sadly, doesn't exist yet.\n\nThe problem is that as an open source software security researcher, I (exactly like open source maintainers), I only have so much time in a day. I'm able to find vulnerabilities impacting hundreds, or sometimes thousands of open source projects with tools like GitHub Code Search and CodeQL. The problem is that my knowledge of vulnerabilities doesn't scale very well.\n\nIndividualized vulnerability disclosure takes time and care. It's a long and tedious process, and I have a significant amount of experience with it (I have over 50 CVEs to my name). Even tracking down the reporting channel (email, Jira, ect..) can take time and isn't automatable. Unfortunately, when facing prblems of this scale, individual reporting doesn't work well either.\n\nAdditionally, if I just spam out emails or issues, I'll just overwhelm already over taxed maintainers, I don't want to do this either.\n\nBy creating a pull request, I am aiming to provide maintainers something highly actionable to actually fix the identified vulnerability; a pull request.\n\nThere's a larger discussion on this topic that can be found here:  https://github.com/JLLeitschuh/security-research/discussions/12\n\n## Opting-Out\n\nIf you'd like to opt-out of future automated security vulnerability fixes like this, please consider adding a file called\n`.github/GH-ROBOTS.txt` to your repository with the line:\n\n```\nUser-agent: JLLeitschuh/security-research\nDisallow: *\n```\n\nThis bot will respect the [ROBOTS.txt](https://moz.com/learn/seo/robotstxt) format for future contributions.\n\nAlternatively, if this project is no longer actively maintained, consider [archiving](https://help.github.com/en/github/creating-cloning-and-archiving-repositories/about-archiving-repositories) the repository.\n\n## CLA Requirements\n\n_This section is only relevant if your project requires contributors to sign a Contributor License Agreement (CLA) for external contributions._\n\nIt is unlikely that I'll be able to directly sign CLAs. However, all contributed commits are already automatically signed-off.\n\n> The meaning of a signoff depends on the project, but it typically certifies that committer has the rights to submit this work under the same license and agrees to a Developer Certificate of Origin \n> (see [https://developercertificate.org/](https://developercertificate.org/) for more information).\n>\n> \\- [Git Commit Signoff documentation](https://developercertificate.org/)\n\nIf signing your organization's CLA is a strict-requirement for merging this contribution, please feel free to close this PR.\n\n## Sponsorship & Support\n\nThis contribution is sponsored by HUMAN Security Inc. and the new Dan Kaminsky Fellowship, a fellowship created to celebrate Dan's memory and legacy by funding open-source work that makes the world a better (and more secure) place.\n\nThis PR was generated by [Moderne](https://www.moderne.io/), a free-for-open source SaaS offering that uses format-preserving AST transformations to fix bugs, standardize code style, apply best practices, migrate library versions, and fix common security vulnerabilities at scale.\n\n## Tracking\n\nAll PR's generated as part of this fix are tracked here: https://github.com/JLLeitschuh/security-research/issues/13",
      "Hi @jlangch do you need any assistance with vulnerability disclosure for this issue?",
      "Hi Jonathan,\r\n\r\nthanks a lot for the help and your effort. The fix with some additional improvements has been applied a couple of days ago. I've opened a security advisory on GitHub today.\r\n\r\nCheers\r\nJürg",
      "I do suggest you include a link to this PR in the advisory you've published\r\n\r\nhttps://github.com/jlangch/venice/security/advisories/GHSA-4mmh-5vw7-rgvj"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 0.95"
}