{
  "cve_id": "CVE-2018-19839",
  "cwe_ids": [
    "CWE-125"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "sass/libsass",
  "commit_msg": "Update utfcpp to v2.3.6\n\nFixes #2657\n\nIncorporates the following utfcpp patches:\n\n1. Sass addition of `retreat`.\n   https://github.com/nemtrif/utfcpp/pull/20\n\n2. Fix for `replace_invalid` throwing on incomplete sequence at the end\n   of the input.\n   https://github.com/nemtrif/utfcpp/pull/21",
  "commit_hash": "a2dff1b59ea8c8ec10680f9e8e5593e4b38554a1",
  "git_url": "https://github.com/sass/libsass/commit/a2dff1b59ea8c8ec10680f9e8e5593e4b38554a1",
  "file_path": "src/utf8/checked.h",
  "func_name": "utf8to16",
  "func_before": "u16bit_iterator utf8to16 (octet_iterator start, octet_iterator end, u16bit_iterator result)\n    {\n        while (start != end) {\n            uint32_t cp = utf8::next(start, end);\n            if (cp > 0xffff) { //make a surrogate pair\n                *result++ = static_cast<uint16_t>((cp >> 10)   + internal::LEAD_OFFSET);\n                *result++ = static_cast<uint16_t>((cp & 0x3ff) + internal::TRAIL_SURROGATE_MIN);\n            }\n            else\n                *result++ = static_cast<uint16_t>(cp);\n        }\n        return result;\n    }",
  "abstract_func_before": "u16bit_iterator utf8to16 (octet_iterator VAR_0, octet_iterator VAR_1, u16bit_iterator VAR_2)\n    {\n        while (VAR_0 != VAR_1) {\n            uint32_t VAR_3 = utf8::next(VAR_0, VAR_1);\n            if (VAR_3 > 0xffff) { /* COMMENT_0 */\n                *VAR_2++ = VAR_4<uint16_t>((VAR_3 >> 10)   + internal::LEAD_OFFSET);\n                *VAR_2++ = VAR_4<uint16_t>((VAR_3 & 0x3ff) + internal::TRAIL_SURROGATE_MIN);\n            }\n            else\n                *VAR_2++ = VAR_4<uint16_t>(VAR_3);\n        }\n        return VAR_2;\n    }",
  "func_graph_path_before": "sass/libsass/a2dff1b59ea8c8ec10680f9e8e5593e4b38554a1/checked.h/vul/before/3.json",
  "func": "u16bit_iterator utf8to16 (octet_iterator start, octet_iterator end, u16bit_iterator result)\n    {\n        while (start < end) {\n            uint32_t cp = utf8::next(start, end);\n            if (cp > 0xffff) { //make a surrogate pair\n                *result++ = static_cast<uint16_t>((cp >> 10)   + internal::LEAD_OFFSET);\n                *result++ = static_cast<uint16_t>((cp & 0x3ff) + internal::TRAIL_SURROGATE_MIN);\n            }\n            else\n                *result++ = static_cast<uint16_t>(cp);\n        }\n        return result;\n    }",
  "abstract_func": "u16bit_iterator utf8to16 (octet_iterator VAR_0, octet_iterator VAR_1, u16bit_iterator VAR_2)\n    {\n        while (VAR_0 < VAR_1) {\n            uint32_t VAR_3 = utf8::next(VAR_0, VAR_1);\n            if (VAR_3 > 0xffff) { /* COMMENT_0 */\n                *VAR_2++ = VAR_4<uint16_t>((VAR_3 >> 10)   + internal::LEAD_OFFSET);\n                *VAR_2++ = VAR_4<uint16_t>((VAR_3 & 0x3ff) + internal::TRAIL_SURROGATE_MIN);\n            }\n            else\n                *VAR_2++ = VAR_4<uint16_t>(VAR_3);\n        }\n        return VAR_2;\n    }",
  "func_graph_path": "sass/libsass/a2dff1b59ea8c8ec10680f9e8e5593e4b38554a1/checked.h/vul/after/3.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,6 +1,6 @@\n u16bit_iterator utf8to16 (octet_iterator start, octet_iterator end, u16bit_iterator result)\n     {\n-        while (start != end) {\n+        while (start < end) {\n             uint32_t cp = utf8::next(start, end);\n             if (cp > 0xffff) { //make a surrogate pair\n                 *result++ = static_cast<uint16_t>((cp >> 10)   + internal::LEAD_OFFSET);",
  "diff_line_info": {
    "deleted_lines": [
      "        while (start != end) {"
    ],
    "added_lines": [
      "        while (start < end) {"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/sass/libsass/pull/2767",
  "description": {
    "pr_info": {
      "title": "Update utfcpp to v2.3.6",
      "number": 2767
    },
    "comment": [
      "Updates to v2.3.6 with the following patches:\r\n\r\n1. Sass addition of `retreat`. https://github.com/nemtrif/utfcpp/pull/20\r\n\r\n2. Fix for `replace_invalid` throwing on incomplete sequence at the end of the input. https://github.com/nemtrif/utfcpp/pull/21\r\n\r\nFixes #2657. The buffer overflow had already been fixed in #2755. This PR also fixes the error message: previously it just said `Internal Error: Not enough space`, now it outputs the correct error with trace, such as:\r\n\r\n```\r\nError: Invalid UTF-8 sequence\r\n        on line 1:1 of ../../../tmp/libsass-2657/test_m001.txt\r\n>> ï¿½\r\n   ^\r\n```",
      "Thanks"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.8,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.8"
}