{
  "cve_id": "CVE-2014-9376",
  "cwe_ids": [
    "CWE-Other",
    "CWE-189"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "Ettercap/ettercap",
  "commit_msg": "Fix get_decode_len ignored strlen return value",
  "commit_hash": "afe7061948e85f0a0fd417d5e4c681bfaf212f42",
  "git_url": "https://github.com/Ettercap/ettercap/commit/afe7061948e85f0a0fd417d5e4c681bfaf212f42",
  "file_path": "src/ec_utils.c",
  "func_name": "get_decode_len",
  "func_before": "int get_decode_len(const char *b64_str) {\n   int len = strlen(b64_str);\n   int padding = 0;\n   if (b64_str[len-1] == '=' && b64_str[len-2] == '=')\n      padding = 2;\n   else if (b64_str[len-1] == '=')\n      padding = 1;\n   return (int)len*0.75 - padding;\n}",
  "abstract_func_before": "int get_decode_len(const char *VAR_0) {\n   int VAR_1 = strlen(VAR_0);\n   int VAR_2 = 0;\n   if (VAR_0[VAR_1-1] == '=' && VAR_0[VAR_1-2] == '=')\n      VAR_2 = 2;\n   else if (VAR_0[VAR_1-1] == '=')\n      VAR_2 = 1;\n   return (int)VAR_1*0.75 - VAR_2;\n}",
  "func_graph_path_before": "Ettercap/ettercap/afe7061948e85f0a0fd417d5e4c681bfaf212f42/ec_utils.c/vul/before/0.json",
  "func": "int get_decode_len(const char *b64_str) {\n   int len = strlen(b64_str);\n   int padding = 0;\n\n   if (len < 2)\n       return 0;\n\n   if (b64_str[len-1] == '=' && b64_str[len-2] == '=')\n      padding = 2;\n   else if (b64_str[len-1] == '=')\n      padding = 1;\n   return (int)len*0.75 - padding;\n}",
  "abstract_func": "int get_decode_len(const char *VAR_0) {\n   int VAR_1 = strlen(VAR_0);\n   int VAR_2 = 0;\n\n   if (VAR_1 < 2)\n       return 0;\n\n   if (VAR_0[VAR_1-1] == '=' && VAR_0[VAR_1-2] == '=')\n      VAR_2 = 2;\n   else if (VAR_0[VAR_1-1] == '=')\n      VAR_2 = 1;\n   return (int)VAR_1*0.75 - VAR_2;\n}",
  "func_graph_path": "Ettercap/ettercap/afe7061948e85f0a0fd417d5e4c681bfaf212f42/ec_utils.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,6 +1,10 @@\n int get_decode_len(const char *b64_str) {\n    int len = strlen(b64_str);\n    int padding = 0;\n+\n+   if (len < 2)\n+       return 0;\n+\n    if (b64_str[len-1] == '=' && b64_str[len-2] == '=')\n       padding = 2;\n    else if (b64_str[len-1] == '=')",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "",
      "   if (len < 2)",
      "       return 0;",
      ""
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/Ettercap/ettercap/pull/609",
  "description": {
    "pr_info": {
      "title": "Fix cvs signed pointer",
      "number": 609
    },
    "comment": [
      "the characters of pointer *p is used as an index to the array cvs_shifts. We control these characters as password and while it seems thats a valid action because cvs_shifts has size of 256, it isn't. The reason is that p is a signed pointer so when p[i](which is say 0xff) will be converted to unsigned size_t as 0xffffffff  and not as 255 \n",
      "get_decode_len may return negative value which leads to huge allocation and denial of service\n"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.9\n\nThe patch addresses a buffer overflow issue caused by incorrect indexing, which is a security vulnerability. The code changes and commit message align well with the fix."
}