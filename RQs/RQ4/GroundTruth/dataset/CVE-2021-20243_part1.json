{
  "cve_id": "CVE-2021-20243",
  "cwe_ids": [
    "CWE-369"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "ImageMagick",
  "commit_msg": "uses the PerceptibleReciprocal() to prevent the divide-by-zero from occurring",
  "commit_hash": "20d458c47610440db337666e78a5a9e43ec8b07d",
  "git_url": "https://github.com/ImageMagick/ImageMagick/commit/20d458c47610440db337666e78a5a9e43ec8b07d",
  "file_path": "MagickCore/resize.c",
  "func_name": "GetResizeFilterWeight",
  "func_before": "MagickPrivate double GetResizeFilterWeight(const ResizeFilter *resize_filter,\n  const double x)\n{\n  double\n    scale,\n    weight,\n    x_blur;\n\n  /*\n    Windowing function - scale the weighting filter by this amount.\n  */\n  assert(resize_filter != (ResizeFilter *) NULL);\n  assert(resize_filter->signature == MagickCoreSignature);\n  x_blur=fabs((double) x)/resize_filter->blur;  /* X offset with blur scaling */\n  if ((resize_filter->window_support < MagickEpsilon) ||\n      (resize_filter->window == Box))\n    scale=1.0;  /* Point or Box Filter -- avoid division by zero */\n  else\n    {\n      scale=resize_filter->scale;\n      scale=resize_filter->window(x_blur*scale,resize_filter);\n    }\n  weight=scale*resize_filter->filter(x_blur,resize_filter);\n  return(weight);\n}",
  "abstract_func_before": "MagickPrivate VAR_0 GetResizeFilterWeight(const ResizeFilter *VAR_1,\n  const double VAR_2)\n{\n  double\n    VAR_3,\n    VAR_4,\n    VAR_5;\n\n  /* COMMENT_0 */\n                                                                   \n    \n  assert(VAR_1 != (ResizeFilter *) NULL);\n  assert(VAR_1->signature == VAR_6);\n  VAR_5=fabs((double) VAR_2)/VAR_1->blur;  /* COMMENT_3 */\n  if ((VAR_1->window_support < VAR_7) ||\n      (VAR_1->window == VAR_8))\n    VAR_3=1.0;  /* COMMENT_4 */\n  else\n    {\n      VAR_3=VAR_1->scale;\n      VAR_3=VAR_1->window(VAR_5*VAR_3,VAR_1);\n    }\n  VAR_4=VAR_3*VAR_1->filter(VAR_5,VAR_1);\n  return(VAR_4);\n}",
  "func_graph_path_before": null,
  "func": "MagickPrivate double GetResizeFilterWeight(const ResizeFilter *resize_filter,\n  const double x)\n{\n  double\n    scale,\n    weight,\n    x_blur;\n\n  /*\n    Windowing function - scale the weighting filter by this amount.\n  */\n  assert(resize_filter != (ResizeFilter *) NULL);\n  assert(resize_filter->signature == MagickCoreSignature);\n  x_blur=fabs((double) x)*PerceptibleReciprocal(resize_filter->blur);  /* X offset with blur scaling */\n  if ((resize_filter->window_support < MagickEpsilon) ||\n      (resize_filter->window == Box))\n    scale=1.0;  /* Point or Box Filter -- avoid division by zero */\n  else\n    {\n      scale=resize_filter->scale;\n      scale=resize_filter->window(x_blur*scale,resize_filter);\n    }\n  weight=scale*resize_filter->filter(x_blur,resize_filter);\n  return(weight);\n}",
  "abstract_func": "MagickPrivate VAR_0 GetResizeFilterWeight(const ResizeFilter *VAR_1,\n  const double VAR_2)\n{\n  double\n    VAR_3,\n    VAR_4,\n    VAR_5;\n\n  /* COMMENT_0 */\n                                                                   \n    \n  assert(VAR_1 != (ResizeFilter *) NULL);\n  assert(VAR_1->signature == VAR_6);\n  VAR_5=fabs((double) VAR_2)*PerceptibleReciprocal(VAR_1->blur);  /* COMMENT_3 */\n  if ((VAR_1->window_support < VAR_7) ||\n      (VAR_1->window == VAR_8))\n    VAR_3=1.0;  /* COMMENT_4 */\n  else\n    {\n      VAR_3=VAR_1->scale;\n      VAR_3=VAR_1->window(VAR_5*VAR_3,VAR_1);\n    }\n  VAR_4=VAR_3*VAR_1->filter(VAR_5,VAR_1);\n  return(VAR_4);\n}",
  "func_graph_path": null,
  "diff_func": "--- func_before\n+++ func_after\n@@ -11,7 +11,7 @@\n   */\n   assert(resize_filter != (ResizeFilter *) NULL);\n   assert(resize_filter->signature == MagickCoreSignature);\n-  x_blur=fabs((double) x)/resize_filter->blur;  /* X offset with blur scaling */\n+  x_blur=fabs((double) x)*PerceptibleReciprocal(resize_filter->blur);  /* X offset with blur scaling */\n   if ((resize_filter->window_support < MagickEpsilon) ||\n       (resize_filter->window == Box))\n     scale=1.0;  /* Point or Box Filter -- avoid division by zero */",
  "diff_line_info": {
    "deleted_lines": [
      "  x_blur=fabs((double) x)/resize_filter->blur;  /* X offset with blur scaling */"
    ],
    "added_lines": [
      "  x_blur=fabs((double) x)*PerceptibleReciprocal(resize_filter->blur);  /* X offset with blur scaling */"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/ImageMagick/ImageMagick/pull/3193",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/ImageMagick/ImageMagick/pull/3193: 403 Client Error: Forbidden for url: https://api.github.com/repos/ImageMagick/ImageMagick/pulls/3193",
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.8,
  "Bug Filter Response": "**Final Classification:** Defect Remediation & Feature Upgrades  \n**Confidence:** 0.8"
}