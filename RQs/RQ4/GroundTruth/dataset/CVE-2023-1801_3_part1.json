{
  "cve_id": "CVE-2023-1801",
  "cwe_ids": [
    "CWE-787"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H",
  "cvss_is_v3": true,
  "repo_name": "the-tcpdump-group/tcpdump",
  "commit_msg": "Have a common routine for converting dates and times to strings.\n\nHave a routine that takes a buffer, a strftime format, and a struct tm *\nas arguments, and:\n\n* checks whether the struct tm * is null and, if so, returns a string\nindicating that the date and time couldn't be converted;\n\n* otherwise, passes it to strftime(), along with the buffer and the\nformat argument and, if strftime() returns 0, meaning the string didn't\nfit into the buffer and thus that the buffer's contents are undefined,\nreturns a string indicating that the date and time didn't fit into the\nbuffer;\n\n* otherwise, returns a pointer to the buffer.\n\nCall that routine instead of directly calling strftime() in printers;\nthat prevents printing a buffer with undefined data if the buffer isn't\nbig enough for the string.\n\nAlso, when generating file names using an strftime format, check the\nreturn value of strftime() to make sure the buffer didn't overflow.",
  "commit_hash": "7578e1c04ee280dda50c4c2813e7d55f539c6501",
  "git_url": "https://github.com/the-tcpdump-group/tcpdump/commit/7578e1c04ee280dda50c4c2813e7d55f539c6501",
  "file_path": "print-arista.c",
  "func_name": "arista_print_date_hms_time",
  "func_before": "static inline void\narista_print_date_hms_time(netdissect_options *ndo, uint32_t seconds,\n\t\tuint32_t nanoseconds)\n{\n\ttime_t ts;\n\tstruct tm *tm;\n\tchar buf[BUFSIZE];\n\n\tts = seconds + (nanoseconds / 1000000000);\n\tnanoseconds %= 1000000000;\n\tif (NULL == (tm = gmtime(&ts)))\n\t\tND_PRINT(\"gmtime() error\");\n\telse if (0 == strftime(buf, sizeof(buf), \"%Y-%m-%d %H:%M:%S\", tm))\n\t\tND_PRINT(\"strftime() error\");\n\telse\n\t\tND_PRINT(\"%s.%09u\", buf, nanoseconds);\n}",
  "abstract_func_before": "static inline void\narista_print_date_hms_time(netdissect_options *VAR_0, uint32_t VAR_1,\n\t\tuint32_t VAR_2)\n{\n\ttime_t VAR_3;\n\tstruct tm *tm;\n\tchar VAR_4[VAR_5];\n\n\tVAR_3 = VAR_1 + (VAR_2 / 1000000000);\n\tVAR_2 %= 1000000000;\n\tif (NULL == (tm = gmtime(&VAR_3)))\n\t\tND_PRINT(\"gmtime() error\");\n\telse if (0 == strftime(VAR_4, sizeof(VAR_4), \"%Y-%m-%d %H:%M:%S\", tm))\n\t\tND_PRINT(\"strftime() error\");\n\telse\n\t\tND_PRINT(\"%s.%09u\", VAR_4, VAR_2);\n}",
  "func_graph_path_before": "the-tcpdump-group/tcpdump/7578e1c04ee280dda50c4c2813e7d55f539c6501/print-arista.c/vul/before/0.json",
  "func": "static inline void\narista_print_date_hms_time(netdissect_options *ndo, uint32_t seconds,\n\t\tuint32_t nanoseconds)\n{\n\ttime_t ts;\n\tchar buf[sizeof(\"-yyyyyyyyyy-mm-dd hh:mm:ss\")];\n\n\tts = seconds + (nanoseconds / 1000000000);\n\tnanoseconds %= 1000000000;\n\tND_PRINT(\"%s.%09u\",\n\t    nd_format_time(buf, sizeof(buf), \"%Y-%m-%d %H:%M:%S\",\n\t       gmtime(&ts)), nanoseconds);\n}",
  "abstract_func": "static inline void\narista_print_date_hms_time(netdissect_options *VAR_0, uint32_t VAR_1,\n\t\tuint32_t VAR_2)\n{\n\ttime_t VAR_3;\n\tchar VAR_4[sizeof(\"-yyyyyyyyyy-mm-dd hh:mm:ss\")];\n\n\tVAR_3 = VAR_1 + (VAR_2 / 1000000000);\n\tVAR_2 %= 1000000000;\n\tND_PRINT(\"%s.%09u\",\n\t    nd_format_time(VAR_4, sizeof(VAR_4), \"%Y-%m-%d %H:%M:%S\",\n\t       gmtime(&VAR_3)), VAR_2);\n}",
  "func_graph_path": "the-tcpdump-group/tcpdump/7578e1c04ee280dda50c4c2813e7d55f539c6501/print-arista.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -3,15 +3,11 @@\n \t\tuint32_t nanoseconds)\n {\n \ttime_t ts;\n-\tstruct tm *tm;\n-\tchar buf[BUFSIZE];\n+\tchar buf[sizeof(\"-yyyyyyyyyy-mm-dd hh:mm:ss\")];\n \n \tts = seconds + (nanoseconds / 1000000000);\n \tnanoseconds %= 1000000000;\n-\tif (NULL == (tm = gmtime(&ts)))\n-\t\tND_PRINT(\"gmtime() error\");\n-\telse if (0 == strftime(buf, sizeof(buf), \"%Y-%m-%d %H:%M:%S\", tm))\n-\t\tND_PRINT(\"strftime() error\");\n-\telse\n-\t\tND_PRINT(\"%s.%09u\", buf, nanoseconds);\n+\tND_PRINT(\"%s.%09u\",\n+\t    nd_format_time(buf, sizeof(buf), \"%Y-%m-%d %H:%M:%S\",\n+\t       gmtime(&ts)), nanoseconds);\n }",
  "diff_line_info": {
    "deleted_lines": [
      "\tstruct tm *tm;",
      "\tchar buf[BUFSIZE];",
      "\tif (NULL == (tm = gmtime(&ts)))",
      "\t\tND_PRINT(\"gmtime() error\");",
      "\telse if (0 == strftime(buf, sizeof(buf), \"%Y-%m-%d %H:%M:%S\", tm))",
      "\t\tND_PRINT(\"strftime() error\");",
      "\telse",
      "\t\tND_PRINT(\"%s.%09u\", buf, nanoseconds);"
    ],
    "added_lines": [
      "\tchar buf[sizeof(\"-yyyyyyyyyy-mm-dd hh:mm:ss\")];",
      "\tND_PRINT(\"%s.%09u\",",
      "\t    nd_format_time(buf, sizeof(buf), \"%Y-%m-%d %H:%M:%S\",",
      "\t       gmtime(&ts)), nanoseconds);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/the-tcpdump-group/tcpdump/pull/1032",
  "description": {
    "pr_info": {
      "title": "Have a common routine for converting dates and times to strings.",
      "number": 1032
    },
    "comment": [
      "Have a routine that takes a buffer, a strftime format, and a struct tm * as arguments, and:\r\n\r\n* checks whether the struct tm * is null and, if so, returns a string indicating that the date and time couldn't be converted;\r\n\r\n* otherwise, passes it to strftime(), along with the buffer and the format argument and, if strftime() returns 0, meaning the string didn't fit into the buffer and thus that the buffer's contents are undefined, returns a string indicating that the date and time didn't fit into the buffer;\r\n\r\n* otherwise, returns a pointer to the buffer.\r\n\r\nCall this routine instead of directly calling strftime() in printers; that prevents printing a buffer with undefined data if the buffer isn't big enough for the string.\r\n\r\nAlso, when generating file names using an strftime format, check the return value of strftime() to make sure the buffer didn't overflow.",
      "(The failure on netbsd-mips64 was due to a compiler segfault, rebuilding now.)",
      "Also the commit message has two typos (\"::\" and \"inticating\").",
      "> Also the commit message has two typos (\"::\" and \"inticating\").\r\n\r\nFixed.",
      "Getting a pull request merged in this project can be remarkably difficult.",
      "> Getting a pull request merged in this project can be remarkably difficult.\r\n\r\n\"Difficult\" as in \"a lot of people point out problems with the code\", or \"difficult\" as in \"the mechanisms provided by Git and GitHub make it overly complicated\"? The former is arguably a feature; the latter is helped, on my side, with some scripts wherein, after I've set up my forked repository, I can do:\r\n\r\n- `git reviewbranch <branch name>` to create a branch for the changes;\r\n- `git doreview` after committing those changes or committing updates with `git commit --amend`;\r\n- `git reviewdone` when the change has been committed to the main repository.\r\n\r\nThey were originally developed when Wireshark moved to GitLab, but it turned out the basic commands they do work the same with GitHub.",
      "That was my attempt of a philosophical remark about software criticism. These changes certainly deserve another review round after a good sleep.",
      "Message on  CI netbsd-mips64 host:\r\n```\r\n/home/buildbot-worker/netbsd-mips64/tmpfs/tcpdump-netbsd-mips64/build/print-radius.c: In function ‘print_attr_string’:\r\n/home/buildbot-worker/netbsd-mips64/tmpfs/tcpdump-netbsd-mips64/build/print-radius.c:831:7: internal compiler error: Segmentation fault\r\n  831 |       nd_print_trunc(ndo);\r\n      |       ^~~~~~~~~~~~~~\r\nno stack trace because unwind library not available\r\nPlease submit a full bug report,\r\nwith preprocessed source if appropriate.\r\nSee <http://www.NetBSD.org/support/send-pr.html> for instructions.\r\n*** [CMakeFiles/netdissect.dir/print-radius.c.o] Error code 1\r\n```",
      "(Rebased on master.)",
      "GCC segfaults on that host from time to time, I have restarted that build. I do not have a better solution for this problem now.",
      "\"no stack trace because unwind library not available\"\r\nPerhaps the installation of this library could give some indication.",
      "If there is anything else that prevents these changes from going into the master branch, I cannot see it.",
      "(Rebased on master.)",
      "Fix patch line 211: space before tab in indent.",
      "It seems good.",
      "Thanks to everyone.",
      "Thank you!",
      "This should probably be backported to 4.99.",
      "> This should probably be backported to 4.99.\r\n\r\nAgreed."
    ]
  },
  "Bug Filter": "Testing & Validation Updates",
  "Bug Filter Confidence": 0.8,
  "Bug Filter Response": "**Final Classification:** Testing & Validation Updates  \n**Confidence:** 0.8  \n\n**Step-by-Step Explanation:**  \n1. **Input Analysis:**  \n   - The commit message discusses creating a routine for converting dates and times to strings, introducing checks for buffer overflow and undefined data.\n   - The code diff modifies a function to use a new routine (`nd_format_time`) that handles buffer checks and provides error handling instead of directly using `strftime`.\n\n2. **Consistency Check:**  \n   - The code changes match the commit message's intent: introducing a new function with proper buffer handling.\n\n3. **Purpose Evaluation:**  \n   - The changes are not related to fixing a security exploit but rather improving the robustness of date/time handling by preventing buffer overflows and undefined behavior.\n\n4. **Security Vulnerability Assessment:**  \n   - While the patch addresses buffer overflow scenarios, it doesn't fix an externally exploitable vulnerability but rather enhances application stability.\n\n5. **Non-Security Classification:**  \n   - **Testing & Validation Updates:** The patch improves error handling and validation for date/time conversions, preventing issues during runtime rather than fixing a bug or enhancing features.\n\n6. **Confidence Scoring:**  \n   - Score: 0.8 - Reasonable inference as the changes address potential issues in a non-security context, improving validation and error handling."
}