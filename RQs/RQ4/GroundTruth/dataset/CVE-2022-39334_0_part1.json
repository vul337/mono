{
  "cve_id": "CVE-2022-39334",
  "cwe_ids": [
    "CWE-295"
  ],
  "cvss_vector": "CVSS:3.1/AV:L/AC:H/PR:L/UI:N/S:U/C:N/I:H/A:N",
  "cvss_is_v3": true,
  "repo_name": "nextcloud/desktop",
  "commit_msg": "Command-line client. Do not trust SSL certificates by default, unlss '--trust' option is set.\n\nSigned-off-by: allexzander <blackslayer4@gmail.com>",
  "commit_hash": "49305319496965ecf18963a81bf8a5a69df0d97e",
  "git_url": "https://github.com/nextcloud/desktop/commit/49305319496965ecf18963a81bf8a5a69df0d97e",
  "file_path": "src/cmd/simplesslerrorhandler.cpp",
  "func_name": "SimpleSslErrorHandler::handleErrors",
  "func_before": "bool SimpleSslErrorHandler::handleErrors(QList<QSslError> errors, const QSslConfiguration &conf, QList<QSslCertificate> *certs, OCC::AccountPtr account)\n{\n    (void)account;\n    (void)conf;\n\n    if (!certs) {\n        qDebug() << \"Certs parameter required but is NULL!\";\n        return false;\n    }\n\n    for (const auto &error : qAsConst(errors)) {\n        certs->append(error.certificate());\n    }\n    return true;\n}",
  "abstract_func_before": "bool SimpleSslErrorHandler::handleErrors(QList<QSslError> VAR_0, const QSslConfiguration &VAR_1, QList<QSslCertificate> *VAR_2, OCC::AccountPtr VAR_3)\n{\n    (void)VAR_3;\n    (void)VAR_1;\n\n    if (!VAR_2) {\n        qDebug() << \"Certs parameter required but is NULL!\";\n        return false;\n    }\n\n    for (const auto &VAR_4 : qAsConst(VAR_0)) {\n        VAR_2->append(VAR_4.certificate());\n    }\n    return true;\n}",
  "func_graph_path_before": "nextcloud/desktop/49305319496965ecf18963a81bf8a5a69df0d97e/simplesslerrorhandler.cpp/vul/before/0.json",
  "func": "bool SimpleSslErrorHandler::handleErrors(QList<QSslError> errors, const QSslConfiguration &conf, QList<QSslCertificate> *certs, OCC::AccountPtr account)\n{\n    Q_UNUSED(conf);\n\n    if (!account || !certs) {\n        qDebug() << \"account and certs parameters are required!\";\n        return false;\n    }\n\n    if (account->trustCertificates()) {\n        for (const auto &error : qAsConst(errors)) {\n            certs->append(error.certificate());\n        }\n        return true;\n    }\n\n    for (const auto &error : qAsConst(errors)) {\n        if (!account->approvedCerts().contains(error.certificate())) {\n            certs->append(error.certificate());\n            return false;\n        }\n    }\n\n    return true;\n}",
  "abstract_func": "bool SimpleSslErrorHandler::handleErrors(QList<QSslError> VAR_0, const QSslConfiguration &VAR_1, QList<QSslCertificate> *VAR_2, OCC::AccountPtr VAR_3)\n{\n    Q_UNUSED(VAR_1);\n\n    if (!VAR_3 || !VAR_2) {\n        qDebug() << \"account and certs parameters are required!\";\n        return false;\n    }\n\n    if (VAR_3->trustCertificates()) {\n        for (const auto &VAR_4 : qAsConst(VAR_0)) {\n            VAR_2->append(VAR_4.certificate());\n        }\n        return true;\n    }\n\n    for (const auto &VAR_4 : qAsConst(VAR_0)) {\n        if (!VAR_3->approvedCerts().contains(VAR_4.certificate())) {\n            VAR_2->append(VAR_4.certificate());\n            return false;\n        }\n    }\n\n    return true;\n}",
  "func_graph_path": "nextcloud/desktop/49305319496965ecf18963a81bf8a5a69df0d97e/simplesslerrorhandler.cpp/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,15 +1,25 @@\n bool SimpleSslErrorHandler::handleErrors(QList<QSslError> errors, const QSslConfiguration &conf, QList<QSslCertificate> *certs, OCC::AccountPtr account)\n {\n-    (void)account;\n-    (void)conf;\n+    Q_UNUSED(conf);\n \n-    if (!certs) {\n-        qDebug() << \"Certs parameter required but is NULL!\";\n+    if (!account || !certs) {\n+        qDebug() << \"account and certs parameters are required!\";\n         return false;\n     }\n \n+    if (account->trustCertificates()) {\n+        for (const auto &error : qAsConst(errors)) {\n+            certs->append(error.certificate());\n+        }\n+        return true;\n+    }\n+\n     for (const auto &error : qAsConst(errors)) {\n-        certs->append(error.certificate());\n+        if (!account->approvedCerts().contains(error.certificate())) {\n+            certs->append(error.certificate());\n+            return false;\n+        }\n     }\n+\n     return true;\n }",
  "diff_line_info": {
    "deleted_lines": [
      "    (void)account;",
      "    (void)conf;",
      "    if (!certs) {",
      "        qDebug() << \"Certs parameter required but is NULL!\";",
      "        certs->append(error.certificate());"
    ],
    "added_lines": [
      "    Q_UNUSED(conf);",
      "    if (!account || !certs) {",
      "        qDebug() << \"account and certs parameters are required!\";",
      "    if (account->trustCertificates()) {",
      "        for (const auto &error : qAsConst(errors)) {",
      "            certs->append(error.certificate());",
      "        }",
      "        return true;",
      "    }",
      "",
      "        if (!account->approvedCerts().contains(error.certificate())) {",
      "            certs->append(error.certificate());",
      "            return false;",
      "        }",
      ""
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/nextcloud/desktop/pull/5022",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/nextcloud/desktop/pull/5022: 403 Client Error: Forbidden for url: https://api.github.com/repos/nextcloud/desktop/pulls/5022",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 0.95"
}