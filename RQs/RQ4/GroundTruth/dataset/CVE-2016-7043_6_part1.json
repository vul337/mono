{
  "cve_id": "CVE-2016-7043",
  "cwe_ids": [
    "CWE-260"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:N/A:N",
  "cvss_is_v3": false,
  "repo_name": "kiegroup/droolsjbpm-integration",
  "commit_msg": "[RHBMS-4312] Loading pasword from a keystore",
  "commit_hash": "e916032edd47aa46d15f3a11909b4804ee20a7e8",
  "git_url": "https://github.com/kiegroup/droolsjbpm-integration/commit/e916032edd47aa46d15f3a11909b4804ee20a7e8",
  "file_path": "kie-server-parent/kie-server-controller/kie-server-controller-websocket-client/src/main/java/org/kie/server/controller/websocket/client/WebSocketKieServerControllerClient.java",
  "func_name": "init",
  "func_before": "public void init(final String controllerUrl, final KieServerConfig config) {\n        this.config = config;\n        this.controllerUrl = controllerUrl;\n        try {\n            if (container == null) {\n                container = ContainerProvider.getWebSocketContainer();\n            }\n            session = container.connectToServer(this, new ClientEndpointConfig() {\n                \n                \n                @Override\n                public Map<String, Object> getUserProperties() {\n                    return Collections.emptyMap();\n                }\n                \n                @Override\n                public List<Class<? extends Encoder>> getEncoders() {\n                    return Collections.emptyList();\n                }\n                \n                @Override\n                public List<Class<? extends Decoder>> getDecoders() {\n                    return Collections.emptyList();\n                }\n                \n                @Override\n                public List<String> getPreferredSubprotocols() {\n                    return Collections.emptyList();\n                }\n                \n                @Override\n                public List<Extension> getExtensions() {\n                    return Collections.emptyList();\n                }\n                \n                @Override\n                public Configurator getConfigurator() {\n                   \n                    return new Configurator(){\n\n                        @Override\n                        public void beforeRequest(Map<String, List<String>> headers) {                            \n                            super.beforeRequest(headers);\n                            \n                            String userName = config.getConfigItemValue(KieServerConstants.CFG_KIE_CONTROLLER_USER, \"kieserver\");\n                            String password = KeyStoreHelperUtil.loadPassword(config);\n                            String token = config.getConfigItemValue(KieServerConstants.CFG_KIE_CONTROLLER_TOKEN);\n                            \n                            if (token != null && !token.isEmpty()) {\n                                headers.put(AUTHORIZATION, Arrays.asList(\"Bearer \" + token));\n                            } else {\n                                try {\n                                    headers.put(AUTHORIZATION, Arrays.asList(\"Basic \" + Base64.getEncoder().encodeToString((userName + ':' + password).getBytes(\"UTF-8\"))));\n                                } catch (UnsupportedEncodingException e) {\n                                    logger.warn(e.getMessage());\n                                }\n                            }\n                        }\n                        \n                    };\n                }\n            }, URI.create(controllerUrl));\n            \n            this.messageHandler = new KieServerMessageHandler(session);            \n            this.closed.set(false);\n\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }",
  "abstract_func_before": "public void init(final String VAR_0, final KieServerConfig VAR_1) {\n        this.config = VAR_1;\n        this.controllerUrl = VAR_0;\n        try {\n            if (VAR_2 == null) {\n                VAR_2 = VAR_3.getWebSocketContainer();\n            }\n            VAR_4 = VAR_2.connectToServer(this, new ClientEndpointConfig() {\n                \n                \n                @Override\n                public Map<String, Object> getUserProperties() {\n                    return VAR_5.emptyMap();\n                }\n                \n                @Override\n                public List<Class<? extends Encoder>> getEncoders() {\n                    return VAR_5.emptyList();\n                }\n                \n                @Override\n                public List<Class<? extends Decoder>> getDecoders() {\n                    return VAR_5.emptyList();\n                }\n                \n                @Override\n                public List<String> getPreferredSubprotocols() {\n                    return VAR_5.emptyList();\n                }\n                \n                @Override\n                public List<Extension> getExtensions() {\n                    return VAR_5.emptyList();\n                }\n                \n                @Override\n                public Configurator getConfigurator() {\n                   \n                    return new Configurator(){\n\n                        @Override\n                        public void beforeRequest(Map<String, List<String>> VAR_6) {                            \n                            super.beforeRequest(VAR_6);\n                            \n                            String VAR_7 = VAR_1.getConfigItemValue(VAR_8.CFG_KIE_CONTROLLER_USER, \"kieserver\");\n                            String VAR_9 = VAR_10.loadPassword(VAR_1);\n                            String VAR_11 = VAR_1.getConfigItemValue(VAR_8.CFG_KIE_CONTROLLER_TOKEN);\n                            \n                            if (VAR_11 != null && !VAR_11.isEmpty()) {\n                                VAR_6.put(VAR_12, VAR_13.asList(\"Bearer \" + VAR_11));\n                            } else {\n                                try {\n                                    VAR_6.put(VAR_12, VAR_13.asList(\"Basic \" + VAR_14.getEncoder().encodeToString((VAR_7 + ':' + VAR_9).getBytes(\"UTF-8\"))));\n                                } catch (UnsupportedEncodingException VAR_15) {\n                                    VAR_16.warn(VAR_15.getMessage());\n                                }\n                            }\n                        }\n                        \n                    };\n                }\n            }, VAR_17.create(VAR_0));\n            \n            this.messageHandler = new KieServerMessageHandler(VAR_4);            \n            this.closed.set(false);\n\n        } catch (Exception VAR_15) {\n            throw new RuntimeException(VAR_15);\n        }\n    }",
  "func_graph_path_before": "kiegroup/droolsjbpm-integration/e916032edd47aa46d15f3a11909b4804ee20a7e8/WebSocketKieServerControllerClient.java/vul/before/0.json",
  "func": "public void init(final String controllerUrl, final KieServerConfig config) {\n        this.config = config;\n        this.controllerUrl = controllerUrl;\n        try {\n            if (container == null) {\n                container = ContainerProvider.getWebSocketContainer();\n            }\n            session = container.connectToServer(this, new ClientEndpointConfig() {\n                \n                \n                @Override\n                public Map<String, Object> getUserProperties() {\n                    return Collections.emptyMap();\n                }\n                \n                @Override\n                public List<Class<? extends Encoder>> getEncoders() {\n                    return Collections.emptyList();\n                }\n                \n                @Override\n                public List<Class<? extends Decoder>> getDecoders() {\n                    return Collections.emptyList();\n                }\n                \n                @Override\n                public List<String> getPreferredSubprotocols() {\n                    return Collections.emptyList();\n                }\n                \n                @Override\n                public List<Extension> getExtensions() {\n                    return Collections.emptyList();\n                }\n                \n                @Override\n                public Configurator getConfigurator() {\n                   \n                    return new Configurator(){\n\n                        @Override\n                        public void beforeRequest(Map<String, List<String>> headers) {                            \n                            super.beforeRequest(headers);\n                            \n                            String userName = config.getConfigItemValue(KieServerConstants.CFG_KIE_CONTROLLER_USER, \"kieserver\");\n                            String password = KeyStoreHelperUtil.loadControllerPassword(config);\n                            String token = config.getConfigItemValue(KieServerConstants.CFG_KIE_CONTROLLER_TOKEN);\n                            \n                            if (token != null && !token.isEmpty()) {\n                                headers.put(AUTHORIZATION, Arrays.asList(\"Bearer \" + token));\n                            } else {\n                                try {\n                                    headers.put(AUTHORIZATION, Arrays.asList(\"Basic \" + Base64.getEncoder().encodeToString((userName + ':' + password).getBytes(\"UTF-8\"))));\n                                } catch (UnsupportedEncodingException e) {\n                                    logger.warn(e.getMessage());\n                                }\n                            }\n                        }\n                        \n                    };\n                }\n            }, URI.create(controllerUrl));\n            \n            this.messageHandler = new KieServerMessageHandler(session);            \n            this.closed.set(false);\n\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }",
  "abstract_func": "public void init(final String VAR_0, final KieServerConfig VAR_1) {\n        this.config = VAR_1;\n        this.controllerUrl = VAR_0;\n        try {\n            if (VAR_2 == null) {\n                VAR_2 = VAR_3.getWebSocketContainer();\n            }\n            VAR_4 = VAR_2.connectToServer(this, new ClientEndpointConfig() {\n                \n                \n                @Override\n                public Map<String, Object> getUserProperties() {\n                    return VAR_5.emptyMap();\n                }\n                \n                @Override\n                public List<Class<? extends Encoder>> getEncoders() {\n                    return VAR_5.emptyList();\n                }\n                \n                @Override\n                public List<Class<? extends Decoder>> getDecoders() {\n                    return VAR_5.emptyList();\n                }\n                \n                @Override\n                public List<String> getPreferredSubprotocols() {\n                    return VAR_5.emptyList();\n                }\n                \n                @Override\n                public List<Extension> getExtensions() {\n                    return VAR_5.emptyList();\n                }\n                \n                @Override\n                public Configurator getConfigurator() {\n                   \n                    return new Configurator(){\n\n                        @Override\n                        public void beforeRequest(Map<String, List<String>> VAR_6) {                            \n                            super.beforeRequest(VAR_6);\n                            \n                            String VAR_7 = VAR_1.getConfigItemValue(VAR_8.CFG_KIE_CONTROLLER_USER, \"kieserver\");\n                            String VAR_9 = VAR_10.loadControllerPassword(VAR_1);\n                            String VAR_11 = VAR_1.getConfigItemValue(VAR_8.CFG_KIE_CONTROLLER_TOKEN);\n                            \n                            if (VAR_11 != null && !VAR_11.isEmpty()) {\n                                VAR_6.put(VAR_12, VAR_13.asList(\"Bearer \" + VAR_11));\n                            } else {\n                                try {\n                                    VAR_6.put(VAR_12, VAR_13.asList(\"Basic \" + VAR_14.getEncoder().encodeToString((VAR_7 + ':' + VAR_9).getBytes(\"UTF-8\"))));\n                                } catch (UnsupportedEncodingException VAR_15) {\n                                    VAR_16.warn(VAR_15.getMessage());\n                                }\n                            }\n                        }\n                        \n                    };\n                }\n            }, VAR_17.create(VAR_0));\n            \n            this.messageHandler = new KieServerMessageHandler(VAR_4);            \n            this.closed.set(false);\n\n        } catch (Exception VAR_15) {\n            throw new RuntimeException(VAR_15);\n        }\n    }",
  "func_graph_path": "kiegroup/droolsjbpm-integration/e916032edd47aa46d15f3a11909b4804ee20a7e8/WebSocketKieServerControllerClient.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -43,7 +43,7 @@\n                             super.beforeRequest(headers);\n                             \n                             String userName = config.getConfigItemValue(KieServerConstants.CFG_KIE_CONTROLLER_USER, \"kieserver\");\n-                            String password = KeyStoreHelperUtil.loadPassword(config);\n+                            String password = KeyStoreHelperUtil.loadControllerPassword(config);\n                             String token = config.getConfigItemValue(KieServerConstants.CFG_KIE_CONTROLLER_TOKEN);\n                             \n                             if (token != null && !token.isEmpty()) {",
  "diff_line_info": {
    "deleted_lines": [
      "                            String password = KeyStoreHelperUtil.loadPassword(config);"
    ],
    "added_lines": [
      "                            String password = KeyStoreHelperUtil.loadControllerPassword(config);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/kiegroup/droolsjbpm-integration/pull/1273",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/kiegroup/droolsjbpm-integration/pull/1273: 403 Client Error: Forbidden for url: https://api.github.com/repos/kiegroup/droolsjbpm-integration/pulls/1273",
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.8,
  "Bug Filter Response": "**Final Classification:** Defect Remediation & Feature Upgrades  \n**Confidence:** 0.8"
}