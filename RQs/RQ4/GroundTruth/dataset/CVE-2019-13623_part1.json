{
  "cve_id": "CVE-2019-13623",
  "cwe_ids": [
    "CWE-22"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "NationalSecurityAgency/ghidra",
  "commit_msg": "GT-3001 (#789) code review - add missing file exclude.",
  "commit_hash": "c15364e0a4bd2bcd3bdf13a35afd6ac9607a5164",
  "git_url": "https://github.com/NationalSecurityAgency/ghidra/commit/c15364e0a4bd2bcd3bdf13a35afd6ac9607a5164",
  "file_path": "Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/archive/RestoreTask.java",
  "func_name": "run",
  "func_before": "@Override\n\tpublic void run(TaskMonitor monitor) throws CancelledException {\n\t\tFileSystemService fsService = FileSystemService.getInstance();\n\t\tString locInfo = \"\\\"\" + projectLocator.toString() + \"\\\" from \\\"\" +\n\t\t\tprojectArchiveFile.getAbsolutePath() + \"\\\"\";\n\n\t\tif (projectFile.exists() || projectDir.exists()) {\n\t\t\tMsg.showError(this, null, \"Restore Archive Error\",\n\t\t\t\t\"Project already exists at: \" + projectDir);\n\t\t\treturn;\n\t\t}\n\n\t\tFSRL archiveFSRL = fsService.getLocalFSRL(projectArchiveFile);\n\t\ttry (GFileSystem fs = fsService.openFileSystemContainer(archiveFSRL, monitor)) {\n\t\t\tverifyArchive(fs, monitor);\n\t\t\tstartExtract(fs, null, monitor);\n\t\t\tverifyRestoredProject();\n\t\t\topenRestoredProject();\n\t\t\tMsg.info(this, \"Restore Archive: \" + locInfo + \" succeeded.\");\n\t\t}\n\t\tcatch (CancelledException ce) {\n\t\t\tplugin.cleanupRestoredProject(projectLocator);\n\t\t\tMsg.info(this, \"Restore Archive: \" + locInfo + \" was cancelled by user.\");\n\t\t}\n\t\tcatch (Throwable e) {\n\t\t\tplugin.cleanupRestoredProject(projectLocator);\n\t\t\tString eMsg = (e.getMessage() != null) ? \":\\n\\n\" + e.getMessage() : \"\";\n\t\t\tMsg.showError(this, null, \"Restore Archive Failed\",\n\t\t\t\t\"An error occurred when restoring the project archive\\n \" + projectArchiveFile +\n\t\t\t\t\t\" to \\n \" + projectDir + eMsg,\n\t\t\t\te);\n\t\t\tMsg.info(this, \"Restore Archive: \" + locInfo + \" failed.\");\n\t\t}\n\t}",
  "abstract_func_before": "@Override\n\tpublic void run(TaskMonitor VAR_0) throws CancelledException {\n\t\tFileSystemService VAR_1 = VAR_2.getInstance();\n\t\tString VAR_3 = \"\\\"\" + VAR_4.toString() + \"\\\" from \\\"\" +\n\t\t\tVAR_5.getAbsolutePath() + \"\\\"\";\n\n\t\tif (VAR_6.exists() || VAR_7.exists()) {\n\t\t\tVAR_8.showError(this, null, \"Restore Archive Error\",\n\t\t\t\t\"Project already exists at: \" + VAR_7);\n\t\t\treturn;\n\t\t}\n\n\t\tFSRL VAR_9 = VAR_1.getLocalFSRL(VAR_5);\n\t\ttry (GFileSystem VAR_10 = VAR_1.openFileSystemContainer(VAR_9, VAR_0)) {\n\t\t\tverifyArchive(VAR_10, VAR_0);\n\t\t\tstartExtract(VAR_10, null, VAR_0);\n\t\t\tverifyRestoredProject();\n\t\t\topenRestoredProject();\n\t\t\tVAR_8.info(this, \"Restore Archive: \" + VAR_3 + \" succeeded.\");\n\t\t}\n\t\tcatch (CancelledException VAR_11) {\n\t\t\tVAR_12.cleanupRestoredProject(VAR_4);\n\t\t\tVAR_8.info(this, \"Restore Archive: \" + VAR_3 + \" was cancelled by user.\");\n\t\t}\n\t\tcatch (Throwable VAR_13) {\n\t\t\tVAR_12.cleanupRestoredProject(VAR_4);\n\t\t\tString VAR_14 = (VAR_13.getMessage() != null) ? \":\\n\\n\" + VAR_13.getMessage() : \"\";\n\t\t\tVAR_8.showError(this, null, \"Restore Archive Failed\",\n\t\t\t\t\"An error occurred when restoring the project archive\\n \" + VAR_5 +\n\t\t\t\t\t\" to \\n \" + VAR_7 + VAR_14,\n\t\t\t\tVAR_13);\n\t\t\tVAR_8.info(this, \"Restore Archive: \" + VAR_3 + \" failed.\");\n\t\t}\n\t}",
  "func_graph_path_before": "NationalSecurityAgency/ghidra/c15364e0a4bd2bcd3bdf13a35afd6ac9607a5164/RestoreTask.java/vul/before/0.json",
  "func": "@Override\n\tpublic void run(TaskMonitor monitor) throws CancelledException {\n\t\tFileSystemService fsService = FileSystemService.getInstance();\n\t\tString locInfo = \"\\\"\" + projectLocator.toString() + \"\\\" from \\\"\" +\n\t\t\tprojectArchiveFile.getAbsolutePath() + \"\\\"\";\n\n\t\tif (projectFile.exists() || projectDir.exists()) {\n\t\t\tMsg.showError(this, null, \"Restore Archive Error\",\n\t\t\t\t\"Project already exists at: \" + projectDir);\n\t\t\treturn;\n\t\t}\n\n\t\tFSRL archiveFSRL = fsService.getLocalFSRL(projectArchiveFile);\n\t\ttry (GFileSystem fs = fsService.openFileSystemContainer(archiveFSRL, monitor)) {\n\t\t\tverifyArchive(fs, monitor);\n\t\t\tstartExtract(fs, null, monitor);\n\t\t\tcreateProjectMarkerFile();\n\t\t\topenRestoredProject();\n\t\t\tMsg.info(this, \"Restore Archive: \" + locInfo + \" succeeded.\");\n\t\t}\n\t\tcatch (CancelledException ce) {\n\t\t\tplugin.cleanupRestoredProject(projectLocator);\n\t\t\tMsg.info(this, \"Restore Archive: \" + locInfo + \" was cancelled by user.\");\n\t\t}\n\t\tcatch (Throwable e) {\n\t\t\tplugin.cleanupRestoredProject(projectLocator);\n\t\t\tString eMsg = (e.getMessage() != null) ? \":\\n\\n\" + e.getMessage() : \"\";\n\t\t\tMsg.showError(this, null, \"Restore Archive Failed\",\n\t\t\t\t\"An error occurred when restoring the project archive\\n \" + projectArchiveFile +\n\t\t\t\t\t\" to \\n \" + projectDir + eMsg,\n\t\t\t\te);\n\t\t\tMsg.info(this, \"Restore Archive: \" + locInfo + \" failed.\");\n\t\t}\n\t}",
  "abstract_func": "@Override\n\tpublic void run(TaskMonitor VAR_0) throws CancelledException {\n\t\tFileSystemService VAR_1 = VAR_2.getInstance();\n\t\tString VAR_3 = \"\\\"\" + VAR_4.toString() + \"\\\" from \\\"\" +\n\t\t\tVAR_5.getAbsolutePath() + \"\\\"\";\n\n\t\tif (VAR_6.exists() || VAR_7.exists()) {\n\t\t\tVAR_8.showError(this, null, \"Restore Archive Error\",\n\t\t\t\t\"Project already exists at: \" + VAR_7);\n\t\t\treturn;\n\t\t}\n\n\t\tFSRL VAR_9 = VAR_1.getLocalFSRL(VAR_5);\n\t\ttry (GFileSystem VAR_10 = VAR_1.openFileSystemContainer(VAR_9, VAR_0)) {\n\t\t\tverifyArchive(VAR_10, VAR_0);\n\t\t\tstartExtract(VAR_10, null, VAR_0);\n\t\t\tcreateProjectMarkerFile();\n\t\t\topenRestoredProject();\n\t\t\tVAR_8.info(this, \"Restore Archive: \" + VAR_3 + \" succeeded.\");\n\t\t}\n\t\tcatch (CancelledException VAR_11) {\n\t\t\tVAR_12.cleanupRestoredProject(VAR_4);\n\t\t\tVAR_8.info(this, \"Restore Archive: \" + VAR_3 + \" was cancelled by user.\");\n\t\t}\n\t\tcatch (Throwable VAR_13) {\n\t\t\tVAR_12.cleanupRestoredProject(VAR_4);\n\t\t\tString VAR_14 = (VAR_13.getMessage() != null) ? \":\\n\\n\" + VAR_13.getMessage() : \"\";\n\t\t\tVAR_8.showError(this, null, \"Restore Archive Failed\",\n\t\t\t\t\"An error occurred when restoring the project archive\\n \" + VAR_5 +\n\t\t\t\t\t\" to \\n \" + VAR_7 + VAR_14,\n\t\t\t\tVAR_13);\n\t\t\tVAR_8.info(this, \"Restore Archive: \" + VAR_3 + \" failed.\");\n\t\t}\n\t}",
  "func_graph_path": "NationalSecurityAgency/ghidra/c15364e0a4bd2bcd3bdf13a35afd6ac9607a5164/RestoreTask.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -14,7 +14,7 @@\n \t\ttry (GFileSystem fs = fsService.openFileSystemContainer(archiveFSRL, monitor)) {\n \t\t\tverifyArchive(fs, monitor);\n \t\t\tstartExtract(fs, null, monitor);\n-\t\t\tverifyRestoredProject();\n+\t\t\tcreateProjectMarkerFile();\n \t\t\topenRestoredProject();\n \t\t\tMsg.info(this, \"Restore Archive: \" + locInfo + \" succeeded.\");\n \t\t}",
  "diff_line_info": {
    "deleted_lines": [
      "\t\t\tverifyRestoredProject();"
    ],
    "added_lines": [
      "\t\t\tcreateProjectMarkerFile();"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/NationalSecurityAgency/ghidra/pull/812",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/NationalSecurityAgency/ghidra/pull/812: 403 Client Error: Forbidden for url: https://api.github.com/repos/NationalSecurityAgency/ghidra/pulls/812",
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.8,
  "Bug Filter Response": "Final Classification: Defect Remediation & Feature Upgrades; Confidence: 0.8"
}