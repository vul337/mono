{
  "cve_id": "CVE-2017-0196",
  "cwe_ids": [
    "CWE-200"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:P/I:N/A:N",
  "cvss_is_v3": false,
  "repo_name": "chakra-core/ChakraCore",
  "commit_msg": "[CVE-2017-0196] Fixing an heap overread during slice.\n\nThe MissingItem check is happening on the array in a loop. It is possible that we get called into script and that mutates the array. So the Array's head is newly created with length.\nHowever the loop is still performing over the old length.\nFixed this by checking the length In IsMissingItem function.\nAdded a unittest.",
  "commit_hash": "065b7978c40ded35c356ced6cd922a40156c9c46",
  "git_url": "https://github.com/chakra-core/ChakraCore/commit/065b7978c40ded35c356ced6cd922a40156c9c46",
  "file_path": "lib/Runtime/Library/JavascriptArray.cpp",
  "func_name": "JavascriptArray::IsMissingItem",
  "func_before": "bool JavascriptArray::IsMissingItem(uint32 index)\n    {\n        bool isIntArray = false, isFloatArray = false;\n        this->GetArrayTypeAndConvert(&isIntArray, &isFloatArray);\n\n        if (isIntArray)\n        {\n            return IsMissingItemAt<int32>(index);\n        }\n        else if (isFloatArray)\n        {\n            return IsMissingItemAt<double>(index);\n        }\n        else\n        {\n            return IsMissingItemAt<Var>(index);\n        }\n    }",
  "abstract_func_before": "bool JavascriptArray::IsMissingItem(uint32 VAR_0)\n    {\n        bool VAR_1 = false, VAR_2 = false;\n        this->GetArrayTypeAndConvert(&VAR_1, &VAR_2);\n\n        if (VAR_1)\n        {\n            return VAR_3<int32>(VAR_0);\n        }\n        else if (VAR_2)\n        {\n            return VAR_3<double>(VAR_0);\n        }\n        else\n        {\n            return VAR_3<Var>(VAR_0);\n        }\n    }",
  "func_graph_path_before": "chakra-core/ChakraCore/065b7978c40ded35c356ced6cd922a40156c9c46/JavascriptArray.cpp/vul/before/0.json",
  "func": "bool JavascriptArray::IsMissingItem(uint32 index)\n    {\n        if (this->length <= index)\n        {\n            return false;\n        }\n\n        bool isIntArray = false, isFloatArray = false;\n        this->GetArrayTypeAndConvert(&isIntArray, &isFloatArray);\n\n        if (isIntArray)\n        {\n            return IsMissingItemAt<int32>(index);\n        }\n        else if (isFloatArray)\n        {\n            return IsMissingItemAt<double>(index);\n        }\n        else\n        {\n            return IsMissingItemAt<Var>(index);\n        }\n    }",
  "abstract_func": "bool JavascriptArray::IsMissingItem(uint32 VAR_0)\n    {\n        if (this->length <= VAR_0)\n        {\n            return false;\n        }\n\n        bool VAR_1 = false, VAR_2 = false;\n        this->GetArrayTypeAndConvert(&VAR_1, &VAR_2);\n\n        if (VAR_1)\n        {\n            return VAR_3<int32>(VAR_0);\n        }\n        else if (VAR_2)\n        {\n            return VAR_3<double>(VAR_0);\n        }\n        else\n        {\n            return VAR_3<Var>(VAR_0);\n        }\n    }",
  "func_graph_path": "chakra-core/ChakraCore/065b7978c40ded35c356ced6cd922a40156c9c46/JavascriptArray.cpp/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,5 +1,10 @@\n bool JavascriptArray::IsMissingItem(uint32 index)\n     {\n+        if (this->length <= index)\n+        {\n+            return false;\n+        }\n+\n         bool isIntArray = false, isFloatArray = false;\n         this->GetArrayTypeAndConvert(&isIntArray, &isFloatArray);\n ",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "        if (this->length <= index)",
      "        {",
      "            return false;",
      "        }",
      ""
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/chakra-core/ChakraCore/pull/2697",
  "description": {
    "pr_info": {
      "title": "17-03 ChakraCore servicing release",
      "number": 2697
    },
    "comment": [
      "Fixes the following CVEs impacting ChakraCore:\r\nCVE-2017-0067\r\nCVE-2017-0150\r\nCVE-2017-0138\r\nCVE-2017-0094\r\nCVE-2017-0132\r\nCVE-2017-0133\r\nCVE-2017-0134\r\nCVE-2017-0137\r\nCVE-2017-0071\r\nCVE-2017-0151\r\nCVE-2017-0141\r\nCVE-2017-0196\r\nCVE-2017-0136\r\nCVE-2017-0152\r\nCVE-2017-0010\r\nCVE-2017-0035\r\nCVE-2017-0015\r\nCVE-2017-0028",
      "@Cellule @Penguinwizzard @agarwal-sandeep @tcare @pleath @akroshg @aneeshdk @suwc @leirocks FYI",
      "My 2 commits look good.",
      "LGTM.",
      "LGTM",
      "LGTM",
      "LGTM",
      "LGTM"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 0.95\n\nThe patch addresses a heap overread vulnerability (CVE-2017-0196) by adding a boundary check in the function, clearly fixing a security issue. The commit message aligns with the code changes and the vulnerability description, making the classification clear and consistent. \n\n**Confidence:** 0.95 (Strongly confident due to explicit CVE, relevant code changes, and clear commit message.)"
}