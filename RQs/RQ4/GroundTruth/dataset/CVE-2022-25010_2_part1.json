{
  "cve_id": "CVE-2022-25010",
  "cwe_ids": [
    "CWE-732"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:P/A:N",
  "cvss_is_v3": false,
  "repo_name": "stepmania",
  "commit_msg": "Remove access to the root FS from lua\n\nOn linux / is mounted to /rootfs in RageFile, which allows access to the\n_whole_ filesystem from lua. This means themes and mod files can\nre-write user data and extract files via USB profiles.\n\n/rootfs was only added for internal use by the alsa, oss and memory card\ndrivers, so it can be easily replaced with direct fstream file access.",
  "commit_hash": "8490d181c2d301ccca0dc6ee52f25bbadb567a9a",
  "git_url": "https://github.com/stepmania/stepmania/commit/8490d181c2d301ccca0dc6ee52f25bbadb567a9a",
  "file_path": "src/arch/Sound/ALSA9Helpers.cpp",
  "func_name": "Alsa9Buf::GetSoundCardDebugInfo",
  "func_before": "void Alsa9Buf::GetSoundCardDebugInfo()\n{\n\tstatic bool done = false;\t\n\tif( done )\n\t\treturn;\n\tdone = true;\n\n\tif( DoesFileExist(\"/rootfs/proc/asound/version\") )\n\t{\n\t\tRString sVersion;\n\t\tGetFileContents( \"/rootfs/proc/asound/version\", sVersion, true );\n\t\tLOG->Info( \"ALSA: %s\", sVersion.c_str() );\n\t}\n\n\tInitializeErrorHandler();\n\n\tint card = -1;\n\twhile( dsnd_card_next( &card ) >= 0 && card >= 0 )\n\t{\n\t\tconst RString id = ssprintf( \"hw:%d\", card );\n\t\tsnd_ctl_t *handle;\n\t\tint err;\n\t\terr = dsnd_ctl_open( &handle, id, 0 );\n\t\tif ( err < 0 )\n\t\t{\n\t\t\tLOG->Info( \"Couldn't open card #%i (\\\"%s\\\") to probe: %s\", card, id.c_str(), dsnd_strerror(err) );\n\t\t\tcontinue;\n\t\t}\n\n\t\tsnd_ctl_card_info_t *info;\n\t\tdsnd_ctl_card_info_alloca(&info);\n\t\terr = dsnd_ctl_card_info( handle, info );\n\t\tif ( err < 0 )\n\t\t{\n\t\t\tLOG->Info( \"Couldn't get card info for card #%i (\\\"%s\\\"): %s\", card, id.c_str(), dsnd_strerror(err) );\n\t\t\tdsnd_ctl_close( handle );\n\t\t\tcontinue;\n\t\t}\n\n\t\tint dev = -1;\n\t\twhile ( dsnd_ctl_pcm_next_device( handle, &dev ) >= 0 && dev >= 0 )\n\t\t{\n\t\t\tsnd_pcm_info_t *pcminfo;\n\t\t\tdsnd_pcm_info_alloca(&pcminfo);\n\t\t\tdsnd_pcm_info_set_device(pcminfo, dev);\n\t\t\tdsnd_pcm_info_set_stream(pcminfo, SND_PCM_STREAM_PLAYBACK);\n\n\t\t\terr = dsnd_ctl_pcm_info(handle, pcminfo);\n\t\t\tif ( err < 0 )\n\t\t\t{\n\t\t\t\tif (err != -ENOENT)\n\t\t\t\t\tLOG->Info(\"dsnd_ctl_pcm_info(%i) (%s) failed: %s\", card, id.c_str(), dsnd_strerror(err));\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tLOG->Info( \"ALSA Driver: %i: %s [%s], device %i: %s [%s], %i/%i subdevices avail\",\n\t\t\t\t\tcard, dsnd_ctl_card_info_get_name(info), dsnd_ctl_card_info_get_id(info), dev,\n\t\t\t\t\tdsnd_pcm_info_get_id(pcminfo), dsnd_pcm_info_get_name(pcminfo),\n\t\t\t\t\tdsnd_pcm_info_get_subdevices_avail(pcminfo),\n\t\t\t\t\tdsnd_pcm_info_get_subdevices_count(pcminfo) );\n\n\t\t}\n\t\tdsnd_ctl_close(handle);\n\t}\n\n\tif( card == 0 )\n\t\tLOG->Info( \"No ALSA sound cards were found.\");\n\t\n\tif( !PREFSMAN->m_iSoundDevice.Get().empty() )\n\t\tLOG->Info( \"ALSA device overridden to \\\"%s\\\"\", PREFSMAN->m_iSoundDevice.Get().c_str() );\n}",
  "abstract_func_before": "void Alsa9Buf::GetSoundCardDebugInfo()\n{\n\tstatic bool VAR_0 = false;\t\n\tif( VAR_0 )\n\t\treturn;\n\tVAR_0 = true;\n\n\tif( DoesFileExist(\"/rootfs/proc/asound/version\") )\n\t{\n\t\tRString VAR_1;\n\t\tGetFileContents( \"/rootfs/proc/asound/version\", VAR_1, true );\n\t\tVAR_2->Info( \"ALSA: %s\", VAR_1.c_str() );\n\t}\n\n\tInitializeErrorHandler();\n\n\tint VAR_3 = -1;\n\twhile( dsnd_card_next( &VAR_3 ) >= 0 && VAR_3 >= 0 )\n\t{\n\t\tconst RString VAR_4 = ssprintf( \"hw:%d\", VAR_3 );\n\t\tsnd_ctl_t *VAR_5;\n\t\tint VAR_6;\n\t\tVAR_6 = dsnd_ctl_open( &VAR_5, VAR_4, 0 );\n\t\tif ( VAR_6 < 0 )\n\t\t{\n\t\t\tVAR_2->Info( \"Couldn't open card #%i (\\\"%s\\\") to probe: %s\", VAR_3, VAR_4.c_str(), dsnd_strerror(VAR_6) );\n\t\t\tcontinue;\n\t\t}\n\n\t\tsnd_ctl_card_info_t *VAR_7;\n\t\tdsnd_ctl_card_info_alloca(&VAR_7);\n\t\tVAR_6 = dsnd_ctl_card_info( VAR_5, VAR_7 );\n\t\tif ( VAR_6 < 0 )\n\t\t{\n\t\t\tVAR_2->Info( \"Couldn't get card info for card #%i (\\\"%s\\\"): %s\", VAR_3, VAR_4.c_str(), dsnd_strerror(VAR_6) );\n\t\t\tdsnd_ctl_close( VAR_5 );\n\t\t\tcontinue;\n\t\t}\n\n\t\tint VAR_8 = -1;\n\t\twhile ( dsnd_ctl_pcm_next_device( VAR_5, &VAR_8 ) >= 0 && VAR_8 >= 0 )\n\t\t{\n\t\t\tsnd_pcm_info_t *VAR_9;\n\t\t\tdsnd_pcm_info_alloca(&VAR_9);\n\t\t\tdsnd_pcm_info_set_device(VAR_9, VAR_8);\n\t\t\tdsnd_pcm_info_set_stream(VAR_9, VAR_10);\n\n\t\t\tVAR_6 = dsnd_ctl_pcm_info(VAR_5, VAR_9);\n\t\t\tif ( VAR_6 < 0 )\n\t\t\t{\n\t\t\t\tif (VAR_6 != -VAR_11)\n\t\t\t\t\tVAR_2->Info(\"dsnd_ctl_pcm_info(%i) (%s) failed: %s\", VAR_3, VAR_4.c_str(), dsnd_strerror(VAR_6));\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tVAR_2->Info( \"ALSA Driver: %i: %s [%s], device %i: %s [%s], %i/%i subdevices avail\",\n\t\t\t\t\tVAR_3, dsnd_ctl_card_info_get_name(VAR_7), dsnd_ctl_card_info_get_id(VAR_7), VAR_8,\n\t\t\t\t\tdsnd_pcm_info_get_id(VAR_9), dsnd_pcm_info_get_name(VAR_9),\n\t\t\t\t\tdsnd_pcm_info_get_subdevices_avail(VAR_9),\n\t\t\t\t\tdsnd_pcm_info_get_subdevices_count(VAR_9) );\n\n\t\t}\n\t\tdsnd_ctl_close(VAR_5);\n\t}\n\n\tif( VAR_3 == 0 )\n\t\tVAR_2->Info( \"No ALSA sound cards were found.\");\n\t\n\tif( !VAR_12->m_iSoundDevice.Get().empty() )\n\t\tVAR_2->Info( \"ALSA device overridden to \\\"%s\\\"\", VAR_12->m_iSoundDevice.Get().c_str() );\n}",
  "func_graph_path_before": "stepmania/8490d181c2d301ccca0dc6ee52f25bbadb567a9a/ALSA9Helpers.cpp/vul/before/0.json",
  "func": "void Alsa9Buf::GetSoundCardDebugInfo()\n{\n\tstatic bool done = false;\t\n\tif( done )\n\t\treturn;\n\tdone = true;\n\n\tstd::ifstream f(\"/proc/asound/version\");\n\tif (f.good())\n\t{\n\t\tstd::string version;\n\t\tstd::getline(f, version);\n\t\tLOG->Info( \"ALSA: %s\", version.c_str() );\n\t}\n\n\tInitializeErrorHandler();\n\n\tint card = -1;\n\twhile( dsnd_card_next( &card ) >= 0 && card >= 0 )\n\t{\n\t\tconst RString id = ssprintf( \"hw:%d\", card );\n\t\tsnd_ctl_t *handle;\n\t\tint err;\n\t\terr = dsnd_ctl_open( &handle, id, 0 );\n\t\tif ( err < 0 )\n\t\t{\n\t\t\tLOG->Info( \"Couldn't open card #%i (\\\"%s\\\") to probe: %s\", card, id.c_str(), dsnd_strerror(err) );\n\t\t\tcontinue;\n\t\t}\n\n\t\tsnd_ctl_card_info_t *info;\n\t\tdsnd_ctl_card_info_alloca(&info);\n\t\terr = dsnd_ctl_card_info( handle, info );\n\t\tif ( err < 0 )\n\t\t{\n\t\t\tLOG->Info( \"Couldn't get card info for card #%i (\\\"%s\\\"): %s\", card, id.c_str(), dsnd_strerror(err) );\n\t\t\tdsnd_ctl_close( handle );\n\t\t\tcontinue;\n\t\t}\n\n\t\tint dev = -1;\n\t\twhile ( dsnd_ctl_pcm_next_device( handle, &dev ) >= 0 && dev >= 0 )\n\t\t{\n\t\t\tsnd_pcm_info_t *pcminfo;\n\t\t\tdsnd_pcm_info_alloca(&pcminfo);\n\t\t\tdsnd_pcm_info_set_device(pcminfo, dev);\n\t\t\tdsnd_pcm_info_set_stream(pcminfo, SND_PCM_STREAM_PLAYBACK);\n\n\t\t\terr = dsnd_ctl_pcm_info(handle, pcminfo);\n\t\t\tif ( err < 0 )\n\t\t\t{\n\t\t\t\tif (err != -ENOENT)\n\t\t\t\t\tLOG->Info(\"dsnd_ctl_pcm_info(%i) (%s) failed: %s\", card, id.c_str(), dsnd_strerror(err));\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tLOG->Info( \"ALSA Driver: %i: %s [%s], device %i: %s [%s], %i/%i subdevices avail\",\n\t\t\t\t\tcard, dsnd_ctl_card_info_get_name(info), dsnd_ctl_card_info_get_id(info), dev,\n\t\t\t\t\tdsnd_pcm_info_get_id(pcminfo), dsnd_pcm_info_get_name(pcminfo),\n\t\t\t\t\tdsnd_pcm_info_get_subdevices_avail(pcminfo),\n\t\t\t\t\tdsnd_pcm_info_get_subdevices_count(pcminfo) );\n\n\t\t}\n\t\tdsnd_ctl_close(handle);\n\t}\n\n\tif( card == 0 )\n\t\tLOG->Info( \"No ALSA sound cards were found.\");\n\t\n\tif( !PREFSMAN->m_iSoundDevice.Get().empty() )\n\t\tLOG->Info( \"ALSA device overridden to \\\"%s\\\"\", PREFSMAN->m_iSoundDevice.Get().c_str() );\n}",
  "abstract_func": "void Alsa9Buf::GetSoundCardDebugInfo()\n{\n\tstatic bool VAR_0 = false;\t\n\tif( VAR_0 )\n\t\treturn;\n\tVAR_0 = true;\n\n\tstd::ifstream VAR_1(\"/proc/asound/version\");\n\tif (VAR_1.good())\n\t{\n\t\tstd::string VAR_2;\n\t\tstd::getline(VAR_1, VAR_2);\n\t\tVAR_3->Info( \"ALSA: %s\", VAR_2.c_str() );\n\t}\n\n\tInitializeErrorHandler();\n\n\tint VAR_4 = -1;\n\twhile( dsnd_card_next( &VAR_4 ) >= 0 && VAR_4 >= 0 )\n\t{\n\t\tconst RString VAR_5 = ssprintf( \"hw:%d\", VAR_4 );\n\t\tsnd_ctl_t *VAR_6;\n\t\tint VAR_7;\n\t\tVAR_7 = dsnd_ctl_open( &VAR_6, VAR_5, 0 );\n\t\tif ( VAR_7 < 0 )\n\t\t{\n\t\t\tVAR_3->Info( \"Couldn't open card #%i (\\\"%s\\\") to probe: %s\", VAR_4, VAR_5.c_str(), dsnd_strerror(VAR_7) );\n\t\t\tcontinue;\n\t\t}\n\n\t\tsnd_ctl_card_info_t *VAR_8;\n\t\tdsnd_ctl_card_info_alloca(&VAR_8);\n\t\tVAR_7 = dsnd_ctl_card_info( VAR_6, VAR_8 );\n\t\tif ( VAR_7 < 0 )\n\t\t{\n\t\t\tVAR_3->Info( \"Couldn't get card info for card #%i (\\\"%s\\\"): %s\", VAR_4, VAR_5.c_str(), dsnd_strerror(VAR_7) );\n\t\t\tdsnd_ctl_close( VAR_6 );\n\t\t\tcontinue;\n\t\t}\n\n\t\tint VAR_9 = -1;\n\t\twhile ( dsnd_ctl_pcm_next_device( VAR_6, &VAR_9 ) >= 0 && VAR_9 >= 0 )\n\t\t{\n\t\t\tsnd_pcm_info_t *VAR_10;\n\t\t\tdsnd_pcm_info_alloca(&VAR_10);\n\t\t\tdsnd_pcm_info_set_device(VAR_10, VAR_9);\n\t\t\tdsnd_pcm_info_set_stream(VAR_10, VAR_11);\n\n\t\t\tVAR_7 = dsnd_ctl_pcm_info(VAR_6, VAR_10);\n\t\t\tif ( VAR_7 < 0 )\n\t\t\t{\n\t\t\t\tif (VAR_7 != -VAR_12)\n\t\t\t\t\tVAR_3->Info(\"dsnd_ctl_pcm_info(%i) (%s) failed: %s\", VAR_4, VAR_5.c_str(), dsnd_strerror(VAR_7));\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tVAR_3->Info( \"ALSA Driver: %i: %s [%s], device %i: %s [%s], %i/%i subdevices avail\",\n\t\t\t\t\tVAR_4, dsnd_ctl_card_info_get_name(VAR_8), dsnd_ctl_card_info_get_id(VAR_8), VAR_9,\n\t\t\t\t\tdsnd_pcm_info_get_id(VAR_10), dsnd_pcm_info_get_name(VAR_10),\n\t\t\t\t\tdsnd_pcm_info_get_subdevices_avail(VAR_10),\n\t\t\t\t\tdsnd_pcm_info_get_subdevices_count(VAR_10) );\n\n\t\t}\n\t\tdsnd_ctl_close(VAR_6);\n\t}\n\n\tif( VAR_4 == 0 )\n\t\tVAR_3->Info( \"No ALSA sound cards were found.\");\n\t\n\tif( !VAR_13->m_iSoundDevice.Get().empty() )\n\t\tVAR_3->Info( \"ALSA device overridden to \\\"%s\\\"\", VAR_13->m_iSoundDevice.Get().c_str() );\n}",
  "func_graph_path": "stepmania/8490d181c2d301ccca0dc6ee52f25bbadb567a9a/ALSA9Helpers.cpp/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -5,11 +5,12 @@\n \t\treturn;\n \tdone = true;\n \n-\tif( DoesFileExist(\"/rootfs/proc/asound/version\") )\n+\tstd::ifstream f(\"/proc/asound/version\");\n+\tif (f.good())\n \t{\n-\t\tRString sVersion;\n-\t\tGetFileContents( \"/rootfs/proc/asound/version\", sVersion, true );\n-\t\tLOG->Info( \"ALSA: %s\", sVersion.c_str() );\n+\t\tstd::string version;\n+\t\tstd::getline(f, version);\n+\t\tLOG->Info( \"ALSA: %s\", version.c_str() );\n \t}\n \n \tInitializeErrorHandler();",
  "diff_line_info": {
    "deleted_lines": [
      "\tif( DoesFileExist(\"/rootfs/proc/asound/version\") )",
      "\t\tRString sVersion;",
      "\t\tGetFileContents( \"/rootfs/proc/asound/version\", sVersion, true );",
      "\t\tLOG->Info( \"ALSA: %s\", sVersion.c_str() );"
    ],
    "added_lines": [
      "\tstd::ifstream f(\"/proc/asound/version\");",
      "\tif (f.good())",
      "\t\tstd::string version;",
      "\t\tstd::getline(f, version);",
      "\t\tLOG->Info( \"ALSA: %s\", version.c_str() );"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/stepmania/stepmania/pull/2184",
  "description": {
    "pr_info": {
      "title": "Remove access to the root FS from lua",
      "number": 2184
    },
    "comment": [
      "On linux `/` is mounted to `/rootfs` in RageFile, which allows access to the _whole_ filesystem from lua. This means themes and mod files can re-write user data and extract files via USB profiles.\r\n    \r\n`/rootfs` was only added for internal use by the alsa, oss and memory card drivers, so it can be easily replaced with direct fstream file access.\r\n",
      "Good spot, this behaviour hasn't been needed in a very very long time. Will also port to OF, thanks for reporting!"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 0.95"
}