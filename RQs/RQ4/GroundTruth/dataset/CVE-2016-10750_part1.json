{
  "cve_id": "CVE-2016-10750",
  "cwe_ids": [
    "CWE-502"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "hazelcast",
  "commit_msg": "Add basic protection against untrusted deserialization.",
  "commit_hash": "c1c31359a1df953e79a9ca9b6c54b3cdbfef11e9",
  "git_url": "https://github.com/hazelcast/hazelcast/commit/c1c31359a1df953e79a9ca9b6c54b3cdbfef11e9",
  "file_path": "hazelcast/src/test/java/com/hazelcast/config/ConfigCompatibilityChecker.java",
  "func_name": "check",
  "func_before": "@Override\n        boolean check(SerializationConfig c1, SerializationConfig c2) {\n            return c1 == c2 || !(c1 == null || c2 == null)\n                    && nullSafeEqual(c1.getPortableVersion(), c2.getPortableVersion())\n                    && nullSafeEqual(c1.getDataSerializableFactoryClasses(), c2.getDataSerializableFactoryClasses())\n                    && nullSafeEqual(c1.getPortableFactoryClasses(), c2.getPortableFactoryClasses())\n                    && isCompatible(c1.getGlobalSerializerConfig(), c2.getGlobalSerializerConfig())\n                    && isCollectionCompatible(c1.getSerializerConfigs(), c2.getSerializerConfigs(), new SerializerConfigChecker())\n                    && nullSafeEqual(c1.isCheckClassDefErrors(), c2.isCheckClassDefErrors())\n                    && nullSafeEqual(c1.isUseNativeByteOrder(), c2.isUseNativeByteOrder())\n                    && nullSafeEqual(c1.getByteOrder(), c2.getByteOrder())\n                    && nullSafeEqual(c1.isEnableCompression(), c2.isEnableCompression())\n                    && nullSafeEqual(c1.isEnableSharedObject(), c2.isEnableSharedObject())\n                    && nullSafeEqual(c1.isAllowUnsafe(), c2.isAllowUnsafe());\n        }",
  "abstract_func_before": "@Override\n        boolean check(SerializationConfig VAR_0, SerializationConfig VAR_1) {\n            return VAR_0 == VAR_1 || !(VAR_0 == null || VAR_1 == null)\n                    && nullSafeEqual(VAR_0.getPortableVersion(), VAR_1.getPortableVersion())\n                    && nullSafeEqual(VAR_0.getDataSerializableFactoryClasses(), VAR_1.getDataSerializableFactoryClasses())\n                    && nullSafeEqual(VAR_0.getPortableFactoryClasses(), VAR_1.getPortableFactoryClasses())\n                    && isCompatible(VAR_0.getGlobalSerializerConfig(), VAR_1.getGlobalSerializerConfig())\n                    && isCollectionCompatible(VAR_0.getSerializerConfigs(), VAR_1.getSerializerConfigs(), new SerializerConfigChecker())\n                    && nullSafeEqual(VAR_0.isCheckClassDefErrors(), VAR_1.isCheckClassDefErrors())\n                    && nullSafeEqual(VAR_0.isUseNativeByteOrder(), VAR_1.isUseNativeByteOrder())\n                    && nullSafeEqual(VAR_0.getByteOrder(), VAR_1.getByteOrder())\n                    && nullSafeEqual(VAR_0.isEnableCompression(), VAR_1.isEnableCompression())\n                    && nullSafeEqual(VAR_0.isEnableSharedObject(), VAR_1.isEnableSharedObject())\n                    && nullSafeEqual(VAR_0.isAllowUnsafe(), VAR_1.isAllowUnsafe());\n        }",
  "func_graph_path_before": "hazelcast/c1c31359a1df953e79a9ca9b6c54b3cdbfef11e9/ConfigCompatibilityChecker.java/vul/before/0.json",
  "func": "@Override\n        boolean check(SerializationConfig c1, SerializationConfig c2) {\n            return c1 == c2 || !(c1 == null || c2 == null)\n                    && nullSafeEqual(c1.getPortableVersion(), c2.getPortableVersion())\n                    && nullSafeEqual(c1.getDataSerializableFactoryClasses(), c2.getDataSerializableFactoryClasses())\n                    && nullSafeEqual(c1.getPortableFactoryClasses(), c2.getPortableFactoryClasses())\n                    && isCompatible(c1.getGlobalSerializerConfig(), c2.getGlobalSerializerConfig())\n                    && isCollectionCompatible(c1.getSerializerConfigs(), c2.getSerializerConfigs(), new SerializerConfigChecker())\n                    && nullSafeEqual(c1.isCheckClassDefErrors(), c2.isCheckClassDefErrors())\n                    && nullSafeEqual(c1.isUseNativeByteOrder(), c2.isUseNativeByteOrder())\n                    && nullSafeEqual(c1.getByteOrder(), c2.getByteOrder())\n                    && nullSafeEqual(c1.isEnableCompression(), c2.isEnableCompression())\n                    && nullSafeEqual(c1.isEnableSharedObject(), c2.isEnableSharedObject())\n                    && nullSafeEqual(c1.isAllowUnsafe(), c2.isAllowUnsafe())\n                    && nullSafeEqual(c1.getJavaSerializationFilterConfig(), c2.getJavaSerializationFilterConfig());\n        }",
  "abstract_func": "@Override\n        boolean check(SerializationConfig VAR_0, SerializationConfig VAR_1) {\n            return VAR_0 == VAR_1 || !(VAR_0 == null || VAR_1 == null)\n                    && nullSafeEqual(VAR_0.getPortableVersion(), VAR_1.getPortableVersion())\n                    && nullSafeEqual(VAR_0.getDataSerializableFactoryClasses(), VAR_1.getDataSerializableFactoryClasses())\n                    && nullSafeEqual(VAR_0.getPortableFactoryClasses(), VAR_1.getPortableFactoryClasses())\n                    && isCompatible(VAR_0.getGlobalSerializerConfig(), VAR_1.getGlobalSerializerConfig())\n                    && isCollectionCompatible(VAR_0.getSerializerConfigs(), VAR_1.getSerializerConfigs(), new SerializerConfigChecker())\n                    && nullSafeEqual(VAR_0.isCheckClassDefErrors(), VAR_1.isCheckClassDefErrors())\n                    && nullSafeEqual(VAR_0.isUseNativeByteOrder(), VAR_1.isUseNativeByteOrder())\n                    && nullSafeEqual(VAR_0.getByteOrder(), VAR_1.getByteOrder())\n                    && nullSafeEqual(VAR_0.isEnableCompression(), VAR_1.isEnableCompression())\n                    && nullSafeEqual(VAR_0.isEnableSharedObject(), VAR_1.isEnableSharedObject())\n                    && nullSafeEqual(VAR_0.isAllowUnsafe(), VAR_1.isAllowUnsafe())\n                    && nullSafeEqual(VAR_0.getJavaSerializationFilterConfig(), VAR_1.getJavaSerializationFilterConfig());\n        }",
  "func_graph_path": "hazelcast/c1c31359a1df953e79a9ca9b6c54b3cdbfef11e9/ConfigCompatibilityChecker.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -11,5 +11,6 @@\n                     && nullSafeEqual(c1.getByteOrder(), c2.getByteOrder())\n                     && nullSafeEqual(c1.isEnableCompression(), c2.isEnableCompression())\n                     && nullSafeEqual(c1.isEnableSharedObject(), c2.isEnableSharedObject())\n-                    && nullSafeEqual(c1.isAllowUnsafe(), c2.isAllowUnsafe());\n+                    && nullSafeEqual(c1.isAllowUnsafe(), c2.isAllowUnsafe())\n+                    && nullSafeEqual(c1.getJavaSerializationFilterConfig(), c2.getJavaSerializationFilterConfig());\n         }",
  "diff_line_info": {
    "deleted_lines": [
      "                    && nullSafeEqual(c1.isAllowUnsafe(), c2.isAllowUnsafe());"
    ],
    "added_lines": [
      "                    && nullSafeEqual(c1.isAllowUnsafe(), c2.isAllowUnsafe())",
      "                    && nullSafeEqual(c1.getJavaSerializationFilterConfig(), c2.getJavaSerializationFilterConfig());"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/hazelcast/hazelcast/pull/12230",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/hazelcast/hazelcast/pull/12230: 403 Client Error: Forbidden for url: https://api.github.com/repos/hazelcast/hazelcast/pulls/12230",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "The commit introduces a security fix against untrusted deserialization by adding a new configuration-based protection mechanism. The code changes reflect the addition of a configuration check for this feature.\n\n**Final Classification:** Security Vulnerability Fix; **Confidence:** 1.0"
}