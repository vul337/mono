{
  "cve_id": "CVE-2021-37620",
  "cwe_ids": [
    "CWE-125"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "Exiv2/exiv2",
  "commit_msg": "Safer std::vector indexing.",
  "commit_hash": "76e313745e813f80e8910aceb2210af3ad8cf897",
  "git_url": "https://github.com/Exiv2/exiv2/commit/76e313745e813f80e8910aceb2210af3ad8cf897",
  "file_path": "src/convert.cpp",
  "func_name": "Converter::cnvXmpGPSVersion",
  "func_before": "void Converter::cnvXmpGPSVersion(const char* from, const char* to)\n    {\n        Exiv2::XmpData::iterator pos = xmpData_->findKey(XmpKey(from));\n        if (pos == xmpData_->end()) return;\n        if (!prepareExifTarget(to)) return;\n        std::string value = pos->toString();\n        if (!pos->value().ok()) {\n#ifndef SUPPRESS_WARNINGS\n            EXV_WARNING << \"Failed to convert \" << from << \" to \" << to << \"\\n\";\n#endif\n            return;\n        }\n\n        for (unsigned i = 0; i < value.length(); ++i) {\n            if (value[i] == '.') value[i] = ' ';\n        }\n        (*exifData_)[to] = value;\n        if (erase_) xmpData_->erase(pos);\n\n    }",
  "abstract_func_before": "void Converter::cnvXmpGPSVersion(const char* VAR_0, const char* VAR_1)\n    {\n        Exiv2::XmpData::iterator VAR_2 = VAR_3->findKey(XmpKey(VAR_0));\n        if (VAR_2 == VAR_3->end()) return;\n        if (!prepareExifTarget(VAR_1)) return;\n        std::string VAR_4 = VAR_2->toString();\n        if (!VAR_2->value().ok()) {\n#ifndef VAR_5\n            VAR_6 << \"Failed to convert \" << VAR_0 << \" to \" << VAR_1 << \"\\n\";\n#endif\n            return;\n        }\n\n        for (unsigned VAR_7 = 0; VAR_7 < VAR_4.length(); ++VAR_7) {\n            if (VAR_4[VAR_7] == '.') VAR_4[VAR_7] = ' ';\n        }\n        (*VAR_8)[VAR_1] = VAR_4;\n        if (VAR_9) VAR_3->erase(VAR_2);\n\n    }",
  "func_graph_path_before": "Exiv2/exiv2/76e313745e813f80e8910aceb2210af3ad8cf897/convert.cpp/vul/before/0.json",
  "func": "void Converter::cnvXmpGPSVersion(const char* from, const char* to)\n    {\n        Exiv2::XmpData::iterator pos = xmpData_->findKey(XmpKey(from));\n        if (pos == xmpData_->end()) return;\n        if (!prepareExifTarget(to)) return;\n        std::string value = pos->toString();\n        if (!pos->value().ok()) {\n#ifndef SUPPRESS_WARNINGS\n            EXV_WARNING << \"Failed to convert \" << from << \" to \" << to << \"\\n\";\n#endif\n            return;\n        }\n\n        for (size_t i = 0; i < value.length(); ++i) {\n            if (value[i] == '.') value[i] = ' ';\n        }\n        (*exifData_)[to] = value;\n        if (erase_) xmpData_->erase(pos);\n\n    }",
  "abstract_func": "void Converter::cnvXmpGPSVersion(const char* VAR_0, const char* VAR_1)\n    {\n        Exiv2::XmpData::iterator VAR_2 = VAR_3->findKey(XmpKey(VAR_0));\n        if (VAR_2 == VAR_3->end()) return;\n        if (!prepareExifTarget(VAR_1)) return;\n        std::string VAR_4 = VAR_2->toString();\n        if (!VAR_2->value().ok()) {\n#ifndef VAR_5\n            VAR_6 << \"Failed to convert \" << VAR_0 << \" to \" << VAR_1 << \"\\n\";\n#endif\n            return;\n        }\n\n        for (size_t VAR_7 = 0; VAR_7 < VAR_4.length(); ++VAR_7) {\n            if (VAR_4[VAR_7] == '.') VAR_4[VAR_7] = ' ';\n        }\n        (*VAR_8)[VAR_1] = VAR_4;\n        if (VAR_9) VAR_3->erase(VAR_2);\n\n    }",
  "func_graph_path": "Exiv2/exiv2/76e313745e813f80e8910aceb2210af3ad8cf897/convert.cpp/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -11,7 +11,7 @@\n             return;\n         }\n \n-        for (unsigned i = 0; i < value.length(); ++i) {\n+        for (size_t i = 0; i < value.length(); ++i) {\n             if (value[i] == '.') value[i] = ' ';\n         }\n         (*exifData_)[to] = value;",
  "diff_line_info": {
    "deleted_lines": [
      "        for (unsigned i = 0; i < value.length(); ++i) {"
    ],
    "added_lines": [
      "        for (size_t i = 0; i < value.length(); ++i) {"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/sridharb1/exiv2/pull/4",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/sridharb1/exiv2/pull/4: 403 Client Error: Forbidden for url: https://api.github.com/repos/sridharb1/exiv2/pulls/4",
  "Bug Filter": "Supporting & Non-Core Improvements",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Supporting & Non-Core Improvements  \n**Confidence:** 0.9"
}