{
  "cve_id": "CVE-2018-6359",
  "cwe_ids": [
    "CWE-416"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "libming",
  "commit_msg": "Use OpCode instead of directly accessing actions\n\nInstead of directly accessing the actions array without checks\nfor the value of n (which may lead to heap buffer overflow etc,\nsee #83 or #105), use the dedicated OpCode function.",
  "commit_hash": "9c53bf8e165c3a74e20f4c93b4ab6c05fe67f187",
  "git_url": "https://github.com/libming/libming/commit/9c53bf8e165c3a74e20f4c93b4ab6c05fe67f187",
  "file_path": "util/decompile.c",
  "func_name": "if",
  "func_before": "INDENT\n\t\t/* if on a level >0 we can check for any outer loop \n\t\t   To do: get the level on a better way than using gIndent */\n\t\tif (gIndent\t\n\t\t    && actions[maxn-1].SWF_ACTIONRECORD.ActionCode==SWFACTION_JUMP\n\t  \t    && actions[maxn-1].SWF_ACTIONJUMP.Offset+actions[maxn].SWF_ACTIONJUMP.BranchOffset==\n\t               sact->Actions[sact->numActions-1].SWF_ACTIONJUMP.Offset+sact->Actions[sact->numActions-1].SWF_ACTIONJUMP.BranchOffset)\n\t\t{      \n\t\t   /* this jump leads from a block to start of a loop on outer block:\n\t\t       it is an 'if' later followed by last action 'continue' */\n\t\t   SWF_warn(\"WARNING: this might be wrong (%s:%i)\\n\", __FILE__, __LINE__);\n\t\t   puts(\"if ( \");\n\t\t   puts(getName(pop()));\n\t\t   println(\" ) {\");\n\t\t   decompileActions(sact->numActions, sact->Actions,gIndent+1);\n\t\t}",
  "abstract_func_before": "INDENT\n\t\t/* COMMENT_0 */\n                                                               \n\t\tif (gIndent\t\n\t\t    && VAR_0[VAR_1-1].VAR_2.VAR_3==VAR_4\n\t  \t    && VAR_0[VAR_1-1].VAR_5.VAR_6+VAR_0[VAR_1].VAR_5.VAR_7==\n\t               VAR_8->VAR_9[VAR_8->numActions-1].VAR_5.VAR_6+VAR_8->VAR_9[VAR_8->numActions-1].VAR_5.VAR_7)\n\t\t{      \n\t\t   /* COMMENT_2 */\n                                                                  \n\t\t   SWF_warn(\"WARNING: this might be wrong (%s:%i)\\n\", VAR_10, VAR_11);\n\t\t   puts(\"if ( \");\n\t\t   puts(getName(pop()));\n\t\t   println(\" ) {\");\n\t\t   decompileActions(VAR_8->numActions, VAR_8->Actions,gIndent+1);\n\t\t}",
  "func_graph_path_before": null,
  "func": "INDENT\n\t\t/* if on a level >0 we can check for any outer loop \n\t\t   To do: get the level on a better way than using gIndent */\n\t\tif (gIndent\t\n\t\t    && OpCode(actions, maxn-1, maxn) == SWFACTION_JUMP\n\t  \t    && actions[maxn-1].SWF_ACTIONJUMP.Offset+actions[maxn].SWF_ACTIONJUMP.BranchOffset==\n\t               sact->Actions[sact->numActions-1].SWF_ACTIONJUMP.Offset+sact->Actions[sact->numActions-1].SWF_ACTIONJUMP.BranchOffset)\n\t\t{      \n\t\t   /* this jump leads from a block to start of a loop on outer block:\n\t\t       it is an 'if' later followed by last action 'continue' */\n\t\t   SWF_warn(\"WARNING: this might be wrong (%s:%i)\\n\", __FILE__, __LINE__);\n\t\t   puts(\"if ( \");\n\t\t   puts(getName(pop()));\n\t\t   println(\" ) {\");\n\t\t   decompileActions(sact->numActions, sact->Actions,gIndent+1);\n\t\t}",
  "abstract_func": "INDENT\n\t\t/* COMMENT_0 */\n                                                               \n\t\tif (gIndent\t\n\t\t    && OpCode(actions, maxn-1, maxn) == VAR_0\n\t  \t    && actions[maxn-1].VAR_1.VAR_2+actions[maxn].VAR_1.VAR_3==\n\t               VAR_4->VAR_5[VAR_4->numActions-1].VAR_1.VAR_2+VAR_4->VAR_5[VAR_4->numActions-1].VAR_1.VAR_3)\n\t\t{      \n\t\t   /* COMMENT_2 */\n                                                                  \n\t\t   SWF_warn(\"WARNING: this might be wrong (%s:%i)\\n\", VAR_6, VAR_7);\n\t\t   puts(\"if ( \");\n\t\t   puts(getName(pop()));\n\t\t   println(\" ) {\");\n\t\t   decompileActions(VAR_4->numActions, VAR_4->Actions,gIndent+1);\n\t\t}",
  "func_graph_path": null,
  "diff_func": "--- func_before\n+++ func_after\n@@ -2,7 +2,7 @@\n \t\t/* if on a level >0 we can check for any outer loop \n \t\t   To do: get the level on a better way than using gIndent */\n \t\tif (gIndent\t\n-\t\t    && actions[maxn-1].SWF_ACTIONRECORD.ActionCode==SWFACTION_JUMP\n+\t\t    && OpCode(actions, maxn-1, maxn) == SWFACTION_JUMP\n \t  \t    && actions[maxn-1].SWF_ACTIONJUMP.Offset+actions[maxn].SWF_ACTIONJUMP.BranchOffset==\n \t               sact->Actions[sact->numActions-1].SWF_ACTIONJUMP.Offset+sact->Actions[sact->numActions-1].SWF_ACTIONJUMP.BranchOffset)\n \t\t{      ",
  "diff_line_info": {
    "deleted_lines": [
      "\t\t    && actions[maxn-1].SWF_ACTIONRECORD.ActionCode==SWFACTION_JUMP"
    ],
    "added_lines": [
      "\t\t    && OpCode(actions, maxn-1, maxn) == SWFACTION_JUMP"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/libming/libming/pull/108",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/libming/libming/pull/108: 403 Client Error: Forbidden for url: https://api.github.com/repos/libming/libming/pulls/108",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 1.0"
}