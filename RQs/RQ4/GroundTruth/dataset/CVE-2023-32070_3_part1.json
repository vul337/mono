{
  "cve_id": "CVE-2023-32070",
  "cwe_ids": [
    "CWE-79"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
  "cvss_is_v3": true,
  "repo_name": "xwiki/xwiki-rendering",
  "commit_msg": "XRENDERING-663: Restrict allowed attributes in HTML rendering\n\n* Change HTML renderers to only print allowed attributes and elements.\n* Add prefix to forbidden attributes to preserve them in XWiki syntax.\n* Adapt tests to expect that invalid attributes get a prefix.",
  "commit_hash": "c40e2f5f9482ec6c3e71dbf1fff5ba8a5e44cdc1",
  "git_url": "https://github.com/xwiki/xwiki-rendering/commit/c40e2f5f9482ec6c3e71dbf1fff5ba8a5e44cdc1",
  "file_path": "xwiki-rendering-syntaxes/xwiki-rendering-syntax-html5/src/main/java/org/xwiki/rendering/internal/renderer/html5/HTML5ChainingRenderer.java",
  "func_name": "beginFormat",
  "func_before": "@Override\n    public void beginFormat(Format format, Map<String, String> parameters)\n    {\n        // Right now, the only difference with the super class is about the \"monospace\" format\n        if (format == Format.MONOSPACE) {\n            Map<String, String> attributes = new HashMap<>();\n            attributes.putAll(parameters);\n            String cssClass = \"monospace\";\n            // The element may already have a class\n            if (attributes.containsKey(PROP_CLASS)) {\n                cssClass = String.format(\"%s %s\", cssClass, attributes.get(PROP_CLASS));\n            }\n            attributes.put(PROP_CLASS, cssClass);\n            getXHTMLWikiPrinter().printXMLStartElement(ELEM_SPAN, attributes);\n        } else {\n            // Call the super class\n            super.beginFormat(format, parameters);\n        }\n\n    }",
  "abstract_func_before": "@Override\n    public void beginFormat(Format VAR_0, Map<String, String> VAR_1)\n    {\n        /* COMMENT_0 */\n        if (VAR_0 == VAR_2.MONOSPACE) {\n            Map<String, String> VAR_3 = new HashMap<>();\n            VAR_3.putAll(VAR_1);\n            String VAR_4 = \"monospace\";\n            /* COMMENT_1 */\n            if (VAR_3.containsKey(VAR_5)) {\n                VAR_4 = VAR_6.format(\"%s %s\", VAR_4, VAR_3.get(VAR_5));\n            }\n            VAR_3.put(VAR_5, VAR_4);\n            getXHTMLWikiPrinter().printXMLStartElement(VAR_7, VAR_3);\n        } else {\n            /* COMMENT_2 */\n            super.beginFormat(VAR_0, VAR_1);\n        }\n\n    }",
  "func_graph_path_before": "xwiki/xwiki-rendering/c40e2f5f9482ec6c3e71dbf1fff5ba8a5e44cdc1/HTML5ChainingRenderer.java/vul/before/0.json",
  "func": "@Override\n    public void beginFormat(Format format, Map<String, String> parameters)\n    {\n        // Right now, the only difference with the super class is about the \"monospace\" format\n        if (format == Format.MONOSPACE) {\n            Map<String, String> attributes = new LinkedHashMap<>(parameters);\n            String cssClass = \"monospace\";\n            // The element may already have a class\n            if (attributes.containsKey(PROP_CLASS)) {\n                cssClass = String.format(\"%s %s\", cssClass, attributes.get(PROP_CLASS));\n            }\n            attributes.put(PROP_CLASS, cssClass);\n            getXHTMLWikiPrinter().printXMLStartElement(ELEM_SPAN, attributes);\n        } else {\n            // Call the super class\n            super.beginFormat(format, parameters);\n        }\n\n    }",
  "abstract_func": "@Override\n    public void beginFormat(Format VAR_0, Map<String, String> VAR_1)\n    {\n        /* COMMENT_0 */\n        if (VAR_0 == VAR_2.MONOSPACE) {\n            Map<String, String> VAR_3 = new LinkedHashMap<>(VAR_1);\n            String VAR_4 = \"monospace\";\n            /* COMMENT_1 */\n            if (VAR_3.containsKey(VAR_5)) {\n                VAR_4 = VAR_6.format(\"%s %s\", VAR_4, VAR_3.get(VAR_5));\n            }\n            VAR_3.put(VAR_5, VAR_4);\n            getXHTMLWikiPrinter().printXMLStartElement(VAR_7, VAR_3);\n        } else {\n            /* COMMENT_2 */\n            super.beginFormat(VAR_0, VAR_1);\n        }\n\n    }",
  "func_graph_path": "xwiki/xwiki-rendering/c40e2f5f9482ec6c3e71dbf1fff5ba8a5e44cdc1/HTML5ChainingRenderer.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -3,8 +3,7 @@\n     {\n         // Right now, the only difference with the super class is about the \"monospace\" format\n         if (format == Format.MONOSPACE) {\n-            Map<String, String> attributes = new HashMap<>();\n-            attributes.putAll(parameters);\n+            Map<String, String> attributes = new LinkedHashMap<>(parameters);\n             String cssClass = \"monospace\";\n             // The element may already have a class\n             if (attributes.containsKey(PROP_CLASS)) {",
  "diff_line_info": {
    "deleted_lines": [
      "            Map<String, String> attributes = new HashMap<>();",
      "            attributes.putAll(parameters);"
    ],
    "added_lines": [
      "            Map<String, String> attributes = new LinkedHashMap<>(parameters);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/xwiki/xwiki-rendering/pull/212",
  "description": {
    "pr_info": {
      "title": "XRENDERING-663: Restrict allowed attributes in HTML rendering",
      "number": 212
    },
    "comment": [
      "* Change HTML renderers to only print allowed attributes\r\n* Adapt tests to not use invalid attributes\r\n\r\nThis depends on xwiki/xwiki-commons#170.\r\n\r\nJira issue: https://jira.xwiki.org/browse/XRENDERING-663",
      "I'm afraid that totally forbidding some HTML elements even in context where it's not a threat will cause quite a few retro compatibility problems.\r\n\r\nA pity renderers don't support input properties like filters to at least have a way to enable/disable the sanitizer depending on the context. I guess we could use the RenderingContext for that (temporarily disable the sanitizer or set a custom sanitizer in the RenderingContext for the renderer to use). Or make the DefaultHTMLElementSanitizer look at the ExecutionContext for a custom sanitizer hint (the good thing with that solution is that you can set it even in an extension which depends on a version of XWiki where the sanitizer classes don't exist yet since it's just a String key and a String value).",
      "I've added a feature to preserve disallowed attributes as attributes with prefix `data-xwiki-translated-attribute-` such that attributes like `latex-template` that are used by the [LaTeX Syntax](https://extensions.xwiki.org/xwiki/bin/view/Extension/LaTeX/Syntax%201.0/#HSpecificCustomTemplates) aren't removed when using the WYSIWYG editor and rebased this PR on top of #217 as otherwise the prefixed attributes aren't preserved."
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.85,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix;  \n**Confidence:** 0.85"
}