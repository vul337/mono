{
  "cve_id": "CVE-2021-32700",
  "cwe_ids": [
    "CWE-306"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:P/I:P/A:N",
  "cvss_is_v3": false,
  "repo_name": "ballerina-platform/ballerina-lang",
  "commit_msg": "Fix central connection",
  "commit_hash": "4609ffee1744ecd16aac09303b1783bf0a525816",
  "git_url": "https://github.com/ballerina-platform/ballerina-lang/commit/4609ffee1744ecd16aac09303b1783bf0a525816",
  "file_path": "cli/ballerina-cli-module/src/main/java/org/ballerinalang/cli/module/Push.java",
  "func_name": "handleResponse",
  "func_before": "private static void handleResponse(HttpURLConnection conn, String orgName, String moduleName, String version) {\n        try {\n            int statusCode = getStatusCode(conn);\n            // 200 - Module pushed successfully\n            // Other - Error occurred, json returned with the error message\n            if (statusCode == HttpURLConnection.HTTP_OK) {\n                outStream.println(orgName + \"/\" + moduleName + \":\" + version + \" pushed to central successfully\");\n            } else if (statusCode == HttpURLConnection.HTTP_UNAUTHORIZED) {\n                errStream.println(\"unauthorized access token for organization: \" + orgName);\n            } else if (statusCode == HttpURLConnection.HTTP_BAD_REQUEST) {\n                try (BufferedReader reader = new BufferedReader(\n                        new InputStreamReader(conn.getErrorStream(), Charset.defaultCharset()))) {\n                    StringBuilder result = new StringBuilder();\n                    String line;\n                    while ((line = reader.readLine()) != null) {\n                        result.append(line);\n                    }\n\n                    MapValue payload = (MapValue) JSONParser.parse(result.toString());\n                    String message = payload.getStringValue(\"message\");\n                    if (message.contains(\"module md file cannot be empty\")) {\n                        errStream.println(message);\n                    } else {\n                        throw ErrorUtil.createCommandException(message);\n                    }\n                } catch (IOException e) {\n                    throw ErrorUtil.createCommandException(\n                            \"failed to push the module '\" + orgName + \"/\" + moduleName + \":\" + version\n                                    + \"' to the remote repository '\" + conn.getURL() + \"'\");\n                }\n            } else {\n                throw ErrorUtil.createCommandException(\n                        \"failed to push the module '\" + orgName + \"/\" + moduleName + \":\" + version\n                                + \"' to the remote repository '\" + conn.getURL() + \"'\");\n            }\n        } finally {\n            conn.disconnect();\n        }\n    }",
  "abstract_func_before": "private static void handleResponse(HttpURLConnection VAR_0, String VAR_1, String VAR_2, String VAR_3) {\n        try {\n            int VAR_4 = getStatusCode(VAR_0);\n            /* COMMENT_0 */\n            /* COMMENT_1 */\n            if (VAR_4 == VAR_5.HTTP_OK) {\n                VAR_6.println(VAR_1 + \"/\" + VAR_2 + \":\" + VAR_3 + \" pushed to central successfully\");\n            } else if (VAR_4 == VAR_5.HTTP_UNAUTHORIZED) {\n                VAR_7.println(\"unauthorized access token for organization: \" + VAR_1);\n            } else if (VAR_4 == VAR_5.HTTP_BAD_REQUEST) {\n                try (BufferedReader VAR_8 = new BufferedReader(\n                        new InputStreamReader(VAR_0.getErrorStream(), VAR_9.defaultCharset()))) {\n                    StringBuilder VAR_10 = new StringBuilder();\n                    String VAR_11;\n                    while ((VAR_11 = VAR_8.readLine()) != null) {\n                        VAR_10.append(VAR_11);\n                    }\n\n                    MapValue VAR_12 = (MapValue) VAR_13.parse(VAR_10.toString());\n                    String VAR_14 = VAR_12.getStringValue(\"message\");\n                    if (VAR_14.contains(\"module md file cannot be empty\")) {\n                        VAR_7.println(VAR_14);\n                    } else {\n                        throw VAR_15.createCommandException(VAR_14);\n                    }\n                } catch (IOException VAR_16) {\n                    throw VAR_15.createCommandException(\n                            \"failed to push the module '\" + VAR_1 + \"/\" + VAR_2 + \":\" + VAR_3\n                                    + \"' to the remote repository '\" + VAR_0.getURL() + \"'\");\n                }\n            } else {\n                throw VAR_15.createCommandException(\n                        \"failed to push the module '\" + VAR_1 + \"/\" + VAR_2 + \":\" + VAR_3\n                                + \"' to the remote repository '\" + VAR_0.getURL() + \"'\");\n            }\n        } finally {\n            VAR_0.disconnect();\n        }\n    }",
  "func_graph_path_before": "ballerina-platform/ballerina-lang/4609ffee1744ecd16aac09303b1783bf0a525816/Push.java/vul/before/0.json",
  "func": "private static void handleResponse(HttpsURLConnection conn, String orgName, String moduleName, String version) {\n        try {\n            int statusCode = getStatusCode(conn);\n            // 200 - Module pushed successfully\n            // Other - Error occurred, json returned with the error message\n            if (statusCode == HttpsURLConnection.HTTP_OK) {\n                outStream.println(orgName + \"/\" + moduleName + \":\" + version + \" pushed to central successfully\");\n            } else if (statusCode == HttpsURLConnection.HTTP_UNAUTHORIZED) {\n                errStream.println(\"unauthorized access token for organization: \" + orgName);\n            } else if (statusCode == HttpsURLConnection.HTTP_BAD_REQUEST) {\n                try (BufferedReader reader = new BufferedReader(\n                        new InputStreamReader(conn.getErrorStream(), Charset.defaultCharset()))) {\n                    StringBuilder result = new StringBuilder();\n                    String line;\n                    while ((line = reader.readLine()) != null) {\n                        result.append(line);\n                    }\n\n                    MapValue payload = (MapValue) JSONParser.parse(result.toString());\n                    String message = payload.getStringValue(\"message\");\n                    if (message.contains(\"module md file cannot be empty\")) {\n                        errStream.println(message);\n                    } else {\n                        throw ErrorUtil.createCommandException(message);\n                    }\n                } catch (IOException e) {\n                    throw ErrorUtil.createCommandException(\n                            \"failed to push the module '\" + orgName + \"/\" + moduleName + \":\" + version\n                                    + \"' to the remote repository '\" + conn.getURL() + \"'\");\n                }\n            } else {\n                throw ErrorUtil.createCommandException(\n                        \"failed to push the module '\" + orgName + \"/\" + moduleName + \":\" + version\n                                + \"' to the remote repository '\" + conn.getURL() + \"'\");\n            }\n        } finally {\n            conn.disconnect();\n        }\n    }",
  "abstract_func": "private static void handleResponse(HttpsURLConnection VAR_0, String VAR_1, String VAR_2, String VAR_3) {\n        try {\n            int VAR_4 = getStatusCode(VAR_0);\n            /* COMMENT_0 */\n            /* COMMENT_1 */\n            if (VAR_4 == VAR_5.HTTP_OK) {\n                VAR_6.println(VAR_1 + \"/\" + VAR_2 + \":\" + VAR_3 + \" pushed to central successfully\");\n            } else if (VAR_4 == VAR_5.HTTP_UNAUTHORIZED) {\n                VAR_7.println(\"unauthorized access token for organization: \" + VAR_1);\n            } else if (VAR_4 == VAR_5.HTTP_BAD_REQUEST) {\n                try (BufferedReader VAR_8 = new BufferedReader(\n                        new InputStreamReader(VAR_0.getErrorStream(), VAR_9.defaultCharset()))) {\n                    StringBuilder VAR_10 = new StringBuilder();\n                    String VAR_11;\n                    while ((VAR_11 = VAR_8.readLine()) != null) {\n                        VAR_10.append(VAR_11);\n                    }\n\n                    MapValue VAR_12 = (MapValue) VAR_13.parse(VAR_10.toString());\n                    String VAR_14 = VAR_12.getStringValue(\"message\");\n                    if (VAR_14.contains(\"module md file cannot be empty\")) {\n                        VAR_7.println(VAR_14);\n                    } else {\n                        throw VAR_15.createCommandException(VAR_14);\n                    }\n                } catch (IOException VAR_16) {\n                    throw VAR_15.createCommandException(\n                            \"failed to push the module '\" + VAR_1 + \"/\" + VAR_2 + \":\" + VAR_3\n                                    + \"' to the remote repository '\" + VAR_0.getURL() + \"'\");\n                }\n            } else {\n                throw VAR_15.createCommandException(\n                        \"failed to push the module '\" + VAR_1 + \"/\" + VAR_2 + \":\" + VAR_3\n                                + \"' to the remote repository '\" + VAR_0.getURL() + \"'\");\n            }\n        } finally {\n            VAR_0.disconnect();\n        }\n    }",
  "func_graph_path": "ballerina-platform/ballerina-lang/4609ffee1744ecd16aac09303b1783bf0a525816/Push.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,13 +1,13 @@\n-private static void handleResponse(HttpURLConnection conn, String orgName, String moduleName, String version) {\n+private static void handleResponse(HttpsURLConnection conn, String orgName, String moduleName, String version) {\n         try {\n             int statusCode = getStatusCode(conn);\n             // 200 - Module pushed successfully\n             // Other - Error occurred, json returned with the error message\n-            if (statusCode == HttpURLConnection.HTTP_OK) {\n+            if (statusCode == HttpsURLConnection.HTTP_OK) {\n                 outStream.println(orgName + \"/\" + moduleName + \":\" + version + \" pushed to central successfully\");\n-            } else if (statusCode == HttpURLConnection.HTTP_UNAUTHORIZED) {\n+            } else if (statusCode == HttpsURLConnection.HTTP_UNAUTHORIZED) {\n                 errStream.println(\"unauthorized access token for organization: \" + orgName);\n-            } else if (statusCode == HttpURLConnection.HTTP_BAD_REQUEST) {\n+            } else if (statusCode == HttpsURLConnection.HTTP_BAD_REQUEST) {\n                 try (BufferedReader reader = new BufferedReader(\n                         new InputStreamReader(conn.getErrorStream(), Charset.defaultCharset()))) {\n                     StringBuilder result = new StringBuilder();",
  "diff_line_info": {
    "deleted_lines": [
      "private static void handleResponse(HttpURLConnection conn, String orgName, String moduleName, String version) {",
      "            if (statusCode == HttpURLConnection.HTTP_OK) {",
      "            } else if (statusCode == HttpURLConnection.HTTP_UNAUTHORIZED) {",
      "            } else if (statusCode == HttpURLConnection.HTTP_BAD_REQUEST) {"
    ],
    "added_lines": [
      "private static void handleResponse(HttpsURLConnection conn, String orgName, String moduleName, String version) {",
      "            if (statusCode == HttpsURLConnection.HTTP_OK) {",
      "            } else if (statusCode == HttpsURLConnection.HTTP_UNAUTHORIZED) {",
      "            } else if (statusCode == HttpsURLConnection.HTTP_BAD_REQUEST) {"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/29246",
  "description": {
    "pr_info": {
      "title": "Fix central connection",
      "number": 29246
    },
    "comment": [
      "## Purpose\r\n> $Title\r\n\r\nFixes #<Issue Number>\r\n\r\n## Approach\r\n> Describe how you are implementing the solutions along with the design details.\r\n\r\n## Samples\r\n> Provide high-level details about the samples related to this feature.\r\n\r\n## Remarks\r\n> List any other known issues, related PRs, TODO items, or any other notes related to the PR.\r\n\r\n## Check List \r\n- [ ] Read the [Contributing Guide](https://github.com/ballerina-platform/ballerina-lang/blob/master/CONTRIBUTING.md)\r\n- [ ] Updated Change Log\r\n- [ ] Checked Tooling Support (#<Issue Number>)\r\n- [ ] Added necessary tests\r\n  - [ ] Unit Tests\r\n  - [ ] Spec Conformance Tests\r\n  - [ ] Integration Tests\r\n  - [ ] Ballerina By Example Tests\r\n- [ ] Increased Test Coverage   \r\n- [ ] Added necessary documentation  \r\n  - [ ] API documentation \r\n  - [ ] Module documentation in Module.md files\r\n  - [ ] Ballerina By Examples\r\n",
      "# [Codecov](https://codecov.io/gh/ballerina-platform/ballerina-lang/pull/29246?src=pr&el=h1) Report\n> Merging [#29246](https://codecov.io/gh/ballerina-platform/ballerina-lang/pull/29246?src=pr&el=desc) (4609ffe) into [ballerina-1.2.x](https://codecov.io/gh/ballerina-platform/ballerina-lang/commit/9e6464b9f28a0f707fb1e8ded125be46c1849e41?el=desc) (9e6464b) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n[![Impacted file tree graph](https://codecov.io/gh/ballerina-platform/ballerina-lang/pull/29246/graphs/tree.svg?width=650&height=150&src=pr&token=IgZRPljg71)](https://codecov.io/gh/ballerina-platform/ballerina-lang/pull/29246?src=pr&el=tree)\n\n```diff\n@@               Coverage Diff                @@\n##           ballerina-1.2.x   #29246   +/-   ##\n================================================\n  Coverage            14.59%   14.59%           \n================================================\n  Files                   51       51           \n  Lines                 1411     1411           \n  Branches               219      219           \n================================================\n  Hits                   206      206           \n  Misses                1189     1189           \n  Partials                16       16           \n```\n\n\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/ballerina-platform/ballerina-lang/pull/29246?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/ballerina-platform/ballerina-lang/pull/29246?src=pr&el=footer). Last update [a3bac05...4609ffe](https://codecov.io/gh/ballerina-platform/ballerina-lang/pull/29246?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.85,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.85"
}