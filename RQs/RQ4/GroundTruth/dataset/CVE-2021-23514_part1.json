{
  "cve_id": "CVE-2021-23514",
  "cwe_ids": [
    "CWE-79",
    "CWE-22"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:N/A:N",
  "cvss_is_v3": false,
  "repo_name": "CrowCpp/Crow",
  "commit_msg": "Fix vulnrabilities in mustache and static",
  "commit_hash": "0a160214424d5ca708b8e2eaea061924d8fb0c38",
  "git_url": "https://github.com/CrowCpp/Crow/commit/0a160214424d5ca708b8e2eaea061924d8fb0c38",
  "file_path": "include/crow/mustache.h",
  "func_name": "escape",
  "func_before": "void escape(const std::string& in, std::string& out)\n            {\n                out.reserve(out.size() + in.size());\n                for (auto it = in.begin(); it != in.end(); ++it)\n                {\n                    switch (*it)\n                    {\n                        case '&': out += \"&amp;\"; break;\n                        case '<': out += \"&lt;\"; break;\n                        case '>': out += \"&gt;\"; break;\n                        case '\"': out += \"&quot;\"; break;\n                        case '\\'': out += \"&#39;\"; break;\n                        case '/': out += \"&#x2F;\"; break;\n                        default: out += *it; break;\n                    }\n                }\n            }",
  "abstract_func_before": "void escape(const std::string& VAR_0, std::string& VAR_1)\n            {\n                VAR_1.reserve(VAR_1.size() + VAR_0.size());\n                for (auto VAR_2 = VAR_0.begin(); VAR_2 != VAR_0.end(); ++VAR_2)\n                {\n                    switch (*VAR_2)\n                    {\n                        case '&': VAR_1 += \"&amp;\"; break;\n                        case '<': VAR_1 += \"&lt;\"; break;\n                        case '>': VAR_1 += \"&gt;\"; break;\n                        case '\"': VAR_1 += \"&quot;\"; break;\n                        case '\\'': VAR_1 += \"&#39;\"; break;\n                        case '/': VAR_1 += \"&#x2F;\"; break;\n                        default: VAR_1 += *VAR_2; break;\n                    }\n                }\n            }",
  "func_graph_path_before": "CrowCpp/Crow/0a160214424d5ca708b8e2eaea061924d8fb0c38/mustache.h/vul/before/0.json",
  "func": "void escape(const std::string& in, std::string& out)\n            {\n                out.reserve(out.size() + in.size());\n                for (auto it = in.begin(); it != in.end(); ++it)\n                {\n                    switch (*it)\n                    {\n                        case '&': out += \"&amp;\"; break;\n                        case '<': out += \"&lt;\"; break;\n                        case '>': out += \"&gt;\"; break;\n                        case '\"': out += \"&quot;\"; break;\n                        case '\\'': out += \"&#39;\"; break;\n                        case '/': out += \"&#x2F;\"; break;\n                        case '`': out += \"&#x60\"; break;\n                        case '=': out += \"&#x3D\"; break;\n                        default: out += *it; break;\n                    }\n                }\n            }",
  "abstract_func": "void escape(const std::string& VAR_0, std::string& VAR_1)\n            {\n                VAR_1.reserve(VAR_1.size() + VAR_0.size());\n                for (auto VAR_2 = VAR_0.begin(); VAR_2 != VAR_0.end(); ++VAR_2)\n                {\n                    switch (*VAR_2)\n                    {\n                        case '&': VAR_1 += \"&amp;\"; break;\n                        case '<': VAR_1 += \"&lt;\"; break;\n                        case '>': VAR_1 += \"&gt;\"; break;\n                        case '\"': VAR_1 += \"&quot;\"; break;\n                        case '\\'': VAR_1 += \"&#39;\"; break;\n                        case '/': VAR_1 += \"&#x2F;\"; break;\n                        case '`': VAR_1 += \"&#x60\"; break;\n                        case '=': VAR_1 += \"&#x3D\"; break;\n                        default: VAR_1 += *VAR_2; break;\n                    }\n                }\n            }",
  "func_graph_path": "CrowCpp/Crow/0a160214424d5ca708b8e2eaea061924d8fb0c38/mustache.h/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -11,6 +11,8 @@\n                         case '\"': out += \"&quot;\"; break;\n                         case '\\'': out += \"&#39;\"; break;\n                         case '/': out += \"&#x2F;\"; break;\n+                        case '`': out += \"&#x60\"; break;\n+                        case '=': out += \"&#x3D\"; break;\n                         default: out += *it; break;\n                     }\n                 }",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "                        case '`': out += \"&#x60\"; break;",
      "                        case '=': out += \"&#x3D\"; break;"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/CrowCpp/Crow/pull/317",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/CrowCpp/Crow/pull/317: 403 Client Error: Forbidden for url: https://api.github.com/repos/CrowCpp/Crow/pulls/317",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.98,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.98"
}