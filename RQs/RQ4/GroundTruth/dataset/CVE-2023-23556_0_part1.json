{
  "cve_id": "CVE-2023-23556",
  "cwe_ids": [
    "CWE-416",
    "CWE-787"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
  "cvss_is_v3": true,
  "repo_name": "facebook/hermes",
  "commit_msg": "Re-sync with internal repository (#908)\n\nFixes for CVE-2023-23556, and CVE-2023-24833.\r\n\r\nCo-authored-by: Facebook Community Bot <6422482+facebook-github-bot@users.noreply.github.com>",
  "commit_hash": "a6dcafe6ded8e61658b40f5699878cd19a481f80",
  "git_url": "https://github.com/facebook/hermes/commit/a6dcafe6ded8e61658b40f5699878cd19a481f80",
  "file_path": "lib/VM/JSLib/Array.cpp",
  "func_name": "swap",
  "func_before": "ExecutionStatus swap(uint32_t a, uint32_t b) override {\n    // Ensure that we don't leave here with any new handles.\n    GCScopeMarkerRAII gcMarker{gcScope_, gcMarker_};\n\n    aHandle_ = HermesValue::encodeDoubleValue(a);\n    bHandle_ = HermesValue::encodeDoubleValue(b);\n\n    ComputedPropertyDescriptor aDesc;\n    JSObject::getComputedPrimitiveDescriptor(\n        obj_, runtime_, aHandle_, aDescObjHandle_, aTmpNameStorage_, aDesc);\n\n    ComputedPropertyDescriptor bDesc;\n    JSObject::getComputedPrimitiveDescriptor(\n        obj_, runtime_, bHandle_, bDescObjHandle_, bTmpNameStorage_, bDesc);\n\n    if (aDescObjHandle_) {\n      if (LLVM_LIKELY(!aDesc.flags.proxyObject)) {\n        auto res = JSObject::getComputedPropertyValue_RJS(\n            obj_,\n            runtime_,\n            aDescObjHandle_,\n            aTmpNameStorage_,\n            aDesc,\n            aDescObjHandle_);\n        if (res == ExecutionStatus::EXCEPTION) {\n          return ExecutionStatus::EXCEPTION;\n        }\n        if (LLVM_LIKELY(!(*res)->isEmpty())) {\n          aValue_ = std::move(*res);\n        }\n      } else {\n        auto keyRes = toPropertyKey(runtime_, aHandle_);\n        if (keyRes == ExecutionStatus::EXCEPTION) {\n          return ExecutionStatus::EXCEPTION;\n        }\n        aHandle_ = keyRes->get();\n        CallResult<bool> hasPropRes = JSProxy::getOwnProperty(\n            aDescObjHandle_, runtime_, aHandle_, aDesc, nullptr);\n        if (hasPropRes == ExecutionStatus::EXCEPTION) {\n          return ExecutionStatus::EXCEPTION;\n        }\n        if (*hasPropRes) {\n          auto res =\n              JSProxy::getComputed(aDescObjHandle_, runtime_, aHandle_, obj_);\n          if (res == ExecutionStatus::EXCEPTION) {\n            return ExecutionStatus::EXCEPTION;\n          }\n          aValue_ = std::move(*res);\n        } else {\n          aDescObjHandle_ = nullptr;\n        }\n      }\n    }\n    if (bDescObjHandle_) {\n      if (LLVM_LIKELY(!bDesc.flags.proxyObject)) {\n        auto res = JSObject::getComputedPropertyValue_RJS(\n            obj_,\n            runtime_,\n            bDescObjHandle_,\n            bTmpNameStorage_,\n            bDesc,\n            bDescObjHandle_);\n        if (res == ExecutionStatus::EXCEPTION) {\n          return ExecutionStatus::EXCEPTION;\n        }\n        if (LLVM_LIKELY(!(*res)->isEmpty())) {\n          bValue_ = std::move(*res);\n        }\n      } else {\n        auto keyRes = toPropertyKey(runtime_, bHandle_);\n        if (keyRes == ExecutionStatus::EXCEPTION) {\n          return ExecutionStatus::EXCEPTION;\n        }\n        bHandle_ = keyRes->get();\n        CallResult<bool> hasPropRes = JSProxy::getOwnProperty(\n            bDescObjHandle_, runtime_, bHandle_, bDesc, nullptr);\n        if (hasPropRes == ExecutionStatus::EXCEPTION) {\n          return ExecutionStatus::EXCEPTION;\n        }\n        if (*hasPropRes) {\n          auto res =\n              JSProxy::getComputed(bDescObjHandle_, runtime_, bHandle_, obj_);\n          if (res == ExecutionStatus::EXCEPTION) {\n            return ExecutionStatus::EXCEPTION;\n          }\n          bValue_ = std::move(*res);\n        } else {\n          bDescObjHandle_ = nullptr;\n        }\n      }\n    }\n\n    if (bDescObjHandle_) {\n      if (LLVM_UNLIKELY(\n              JSObject::putComputed_RJS(\n                  obj_,\n                  runtime_,\n                  aHandle_,\n                  bValue_,\n                  PropOpFlags().plusThrowOnError()) ==\n              ExecutionStatus::EXCEPTION)) {\n        return ExecutionStatus::EXCEPTION;\n      }\n    } else {\n      if (LLVM_UNLIKELY(\n              JSObject::deleteComputed(\n                  obj_, runtime_, aHandle_, PropOpFlags().plusThrowOnError()) ==\n              ExecutionStatus::EXCEPTION)) {\n        return ExecutionStatus::EXCEPTION;\n      }\n    }\n\n    if (aDescObjHandle_) {\n      if (LLVM_UNLIKELY(\n              JSObject::putComputed_RJS(\n                  obj_,\n                  runtime_,\n                  bHandle_,\n                  aValue_,\n                  PropOpFlags().plusThrowOnError()) ==\n              ExecutionStatus::EXCEPTION)) {\n        return ExecutionStatus::EXCEPTION;\n      }\n    } else {\n      if (LLVM_UNLIKELY(\n              JSObject::deleteComputed(\n                  obj_, runtime_, bHandle_, PropOpFlags().plusThrowOnError()) ==\n              ExecutionStatus::EXCEPTION)) {\n        return ExecutionStatus::EXCEPTION;\n      }\n    }\n\n    return ExecutionStatus::RETURNED;\n  }",
  "abstract_func_before": "ExecutionStatus swap(uint32_t VAR_0, uint32_t VAR_1) override {\n    /* COMMENT_0 */\n    GCScopeMarkerRAII VAR_2{VAR_3, VAR_4};\n\n    VAR_5 = HermesValue::encodeDoubleValue(VAR_0);\n    VAR_6 = HermesValue::encodeDoubleValue(VAR_1);\n\n    ComputedPropertyDescriptor VAR_7;\n    JSObject::getComputedPrimitiveDescriptor(\n        VAR_8, VAR_9, VAR_5, VAR_10, VAR_11, VAR_7);\n\n    ComputedPropertyDescriptor VAR_12;\n    JSObject::getComputedPrimitiveDescriptor(\n        VAR_8, VAR_9, VAR_6, VAR_13, VAR_14, VAR_12);\n\n    if (VAR_10) {\n      if (LLVM_LIKELY(!VAR_7.flags.proxyObject)) {\n        auto VAR_15 = JSObject::getComputedPropertyValue_RJS(\n            VAR_8,\n            VAR_9,\n            VAR_10,\n            VAR_11,\n            VAR_7,\n            VAR_10);\n        if (VAR_15 == ExecutionStatus::EXCEPTION) {\n          return ExecutionStatus::EXCEPTION;\n        }\n        if (LLVM_LIKELY(!(*VAR_15)->isEmpty())) {\n          VAR_16 = std::move(*VAR_15);\n        }\n      } else {\n        auto VAR_17 = toPropertyKey(VAR_9, VAR_5);\n        if (VAR_17 == ExecutionStatus::EXCEPTION) {\n          return ExecutionStatus::EXCEPTION;\n        }\n        VAR_5 = VAR_17->get();\n        CallResult<bool> VAR_18 = JSProxy::getOwnProperty(\n            VAR_10, VAR_9, VAR_5, VAR_7, nullptr);\n        if (VAR_18 == ExecutionStatus::EXCEPTION) {\n          return ExecutionStatus::EXCEPTION;\n        }\n        if (*VAR_18) {\n          auto VAR_15 =\n              JSProxy::getComputed(VAR_10, VAR_9, VAR_5, VAR_8);\n          if (VAR_15 == ExecutionStatus::EXCEPTION) {\n            return ExecutionStatus::EXCEPTION;\n          }\n          VAR_16 = std::move(*VAR_15);\n        } else {\n          VAR_10 = nullptr;\n        }\n      }\n    }\n    if (VAR_13) {\n      if (LLVM_LIKELY(!VAR_12.flags.proxyObject)) {\n        auto VAR_15 = JSObject::getComputedPropertyValue_RJS(\n            VAR_8,\n            VAR_9,\n            VAR_13,\n            VAR_14,\n            VAR_12,\n            VAR_13);\n        if (VAR_15 == ExecutionStatus::EXCEPTION) {\n          return ExecutionStatus::EXCEPTION;\n        }\n        if (LLVM_LIKELY(!(*VAR_15)->isEmpty())) {\n          VAR_19 = std::move(*VAR_15);\n        }\n      } else {\n        auto VAR_17 = toPropertyKey(VAR_9, VAR_6);\n        if (VAR_17 == ExecutionStatus::EXCEPTION) {\n          return ExecutionStatus::EXCEPTION;\n        }\n        VAR_6 = VAR_17->get();\n        CallResult<bool> VAR_18 = JSProxy::getOwnProperty(\n            VAR_13, VAR_9, VAR_6, VAR_12, nullptr);\n        if (VAR_18 == ExecutionStatus::EXCEPTION) {\n          return ExecutionStatus::EXCEPTION;\n        }\n        if (*VAR_18) {\n          auto VAR_15 =\n              JSProxy::getComputed(VAR_13, VAR_9, VAR_6, VAR_8);\n          if (VAR_15 == ExecutionStatus::EXCEPTION) {\n            return ExecutionStatus::EXCEPTION;\n          }\n          VAR_19 = std::move(*VAR_15);\n        } else {\n          VAR_13 = nullptr;\n        }\n      }\n    }\n\n    if (VAR_13) {\n      if (LLVM_UNLIKELY(\n              JSObject::putComputed_RJS(\n                  VAR_8,\n                  VAR_9,\n                  VAR_5,\n                  VAR_19,\n                  PropOpFlags().plusThrowOnError()) ==\n              ExecutionStatus::EXCEPTION)) {\n        return ExecutionStatus::EXCEPTION;\n      }\n    } else {\n      if (LLVM_UNLIKELY(\n              JSObject::deleteComputed(\n                  VAR_8, VAR_9, VAR_5, PropOpFlags().plusThrowOnError()) ==\n              ExecutionStatus::EXCEPTION)) {\n        return ExecutionStatus::EXCEPTION;\n      }\n    }\n\n    if (VAR_10) {\n      if (LLVM_UNLIKELY(\n              JSObject::putComputed_RJS(\n                  VAR_8,\n                  VAR_9,\n                  VAR_6,\n                  VAR_16,\n                  PropOpFlags().plusThrowOnError()) ==\n              ExecutionStatus::EXCEPTION)) {\n        return ExecutionStatus::EXCEPTION;\n      }\n    } else {\n      if (LLVM_UNLIKELY(\n              JSObject::deleteComputed(\n                  VAR_8, VAR_9, VAR_6, PropOpFlags().plusThrowOnError()) ==\n              ExecutionStatus::EXCEPTION)) {\n        return ExecutionStatus::EXCEPTION;\n      }\n    }\n\n    return ExecutionStatus::RETURNED;\n  }",
  "func_graph_path_before": null,
  "func": "ExecutionStatus swap(uint32_t a, uint32_t b) override {\n    // Ensure that we don't leave here with any new handles.\n    GCScopeMarkerRAII gcMarker{gcScope_, gcMarker_};\n\n    aHandle_ = HermesValue::encodeDoubleValue(a);\n    bHandle_ = HermesValue::encodeDoubleValue(b);\n\n    ComputedPropertyDescriptor aDesc;\n    JSObject::getComputedPrimitiveDescriptor(\n        obj_, runtime_, aHandle_, aDescObjHandle_, aTmpNameStorage_, aDesc);\n\n    if (aDescObjHandle_) {\n      if (LLVM_LIKELY(!aDesc.flags.proxyObject)) {\n        auto res = JSObject::getComputedPropertyValue_RJS(\n            obj_,\n            runtime_,\n            aDescObjHandle_,\n            aTmpNameStorage_,\n            aDesc,\n            aDescObjHandle_);\n        if (res == ExecutionStatus::EXCEPTION) {\n          return ExecutionStatus::EXCEPTION;\n        }\n        if (LLVM_LIKELY(!(*res)->isEmpty())) {\n          aValue_ = std::move(*res);\n        }\n      } else {\n        auto keyRes = toPropertyKey(runtime_, aHandle_);\n        if (keyRes == ExecutionStatus::EXCEPTION) {\n          return ExecutionStatus::EXCEPTION;\n        }\n        aHandle_ = keyRes->get();\n        CallResult<bool> hasPropRes = JSProxy::getOwnProperty(\n            aDescObjHandle_, runtime_, aHandle_, aDesc, nullptr);\n        if (hasPropRes == ExecutionStatus::EXCEPTION) {\n          return ExecutionStatus::EXCEPTION;\n        }\n        if (*hasPropRes) {\n          auto res =\n              JSProxy::getComputed(aDescObjHandle_, runtime_, aHandle_, obj_);\n          if (res == ExecutionStatus::EXCEPTION) {\n            return ExecutionStatus::EXCEPTION;\n          }\n          aValue_ = std::move(*res);\n        } else {\n          aDescObjHandle_ = nullptr;\n        }\n      }\n    }\n\n    ComputedPropertyDescriptor bDesc;\n    JSObject::getComputedPrimitiveDescriptor(\n        obj_, runtime_, bHandle_, bDescObjHandle_, bTmpNameStorage_, bDesc);\n\n    if (bDescObjHandle_) {\n      if (LLVM_LIKELY(!bDesc.flags.proxyObject)) {\n        auto res = JSObject::getComputedPropertyValue_RJS(\n            obj_,\n            runtime_,\n            bDescObjHandle_,\n            bTmpNameStorage_,\n            bDesc,\n            bDescObjHandle_);\n        if (res == ExecutionStatus::EXCEPTION) {\n          return ExecutionStatus::EXCEPTION;\n        }\n        if (LLVM_LIKELY(!(*res)->isEmpty())) {\n          bValue_ = std::move(*res);\n        }\n      } else {\n        auto keyRes = toPropertyKey(runtime_, bHandle_);\n        if (keyRes == ExecutionStatus::EXCEPTION) {\n          return ExecutionStatus::EXCEPTION;\n        }\n        bHandle_ = keyRes->get();\n        CallResult<bool> hasPropRes = JSProxy::getOwnProperty(\n            bDescObjHandle_, runtime_, bHandle_, bDesc, nullptr);\n        if (hasPropRes == ExecutionStatus::EXCEPTION) {\n          return ExecutionStatus::EXCEPTION;\n        }\n        if (*hasPropRes) {\n          auto res =\n              JSProxy::getComputed(bDescObjHandle_, runtime_, bHandle_, obj_);\n          if (res == ExecutionStatus::EXCEPTION) {\n            return ExecutionStatus::EXCEPTION;\n          }\n          bValue_ = std::move(*res);\n        } else {\n          bDescObjHandle_ = nullptr;\n        }\n      }\n    }\n\n    if (bDescObjHandle_) {\n      if (LLVM_UNLIKELY(\n              JSObject::putComputed_RJS(\n                  obj_,\n                  runtime_,\n                  aHandle_,\n                  bValue_,\n                  PropOpFlags().plusThrowOnError()) ==\n              ExecutionStatus::EXCEPTION)) {\n        return ExecutionStatus::EXCEPTION;\n      }\n    } else {\n      if (LLVM_UNLIKELY(\n              JSObject::deleteComputed(\n                  obj_, runtime_, aHandle_, PropOpFlags().plusThrowOnError()) ==\n              ExecutionStatus::EXCEPTION)) {\n        return ExecutionStatus::EXCEPTION;\n      }\n    }\n\n    if (aDescObjHandle_) {\n      if (LLVM_UNLIKELY(\n              JSObject::putComputed_RJS(\n                  obj_,\n                  runtime_,\n                  bHandle_,\n                  aValue_,\n                  PropOpFlags().plusThrowOnError()) ==\n              ExecutionStatus::EXCEPTION)) {\n        return ExecutionStatus::EXCEPTION;\n      }\n    } else {\n      if (LLVM_UNLIKELY(\n              JSObject::deleteComputed(\n                  obj_, runtime_, bHandle_, PropOpFlags().plusThrowOnError()) ==\n              ExecutionStatus::EXCEPTION)) {\n        return ExecutionStatus::EXCEPTION;\n      }\n    }\n\n    return ExecutionStatus::RETURNED;\n  }",
  "abstract_func": "ExecutionStatus swap(uint32_t VAR_0, uint32_t VAR_1) override {\n    /* COMMENT_0 */\n    GCScopeMarkerRAII VAR_2{VAR_3, VAR_4};\n\n    VAR_5 = HermesValue::encodeDoubleValue(VAR_0);\n    VAR_6 = HermesValue::encodeDoubleValue(VAR_1);\n\n    ComputedPropertyDescriptor VAR_7;\n    JSObject::getComputedPrimitiveDescriptor(\n        VAR_8, VAR_9, VAR_5, VAR_10, VAR_11, VAR_7);\n\n    if (VAR_10) {\n      if (LLVM_LIKELY(!VAR_7.flags.proxyObject)) {\n        auto VAR_12 = JSObject::getComputedPropertyValue_RJS(\n            VAR_8,\n            VAR_9,\n            VAR_10,\n            VAR_11,\n            VAR_7,\n            VAR_10);\n        if (VAR_12 == ExecutionStatus::EXCEPTION) {\n          return ExecutionStatus::EXCEPTION;\n        }\n        if (LLVM_LIKELY(!(*VAR_12)->isEmpty())) {\n          VAR_13 = std::move(*VAR_12);\n        }\n      } else {\n        auto VAR_14 = toPropertyKey(VAR_9, VAR_5);\n        if (VAR_14 == ExecutionStatus::EXCEPTION) {\n          return ExecutionStatus::EXCEPTION;\n        }\n        VAR_5 = VAR_14->get();\n        CallResult<bool> VAR_15 = JSProxy::getOwnProperty(\n            VAR_10, VAR_9, VAR_5, VAR_7, nullptr);\n        if (VAR_15 == ExecutionStatus::EXCEPTION) {\n          return ExecutionStatus::EXCEPTION;\n        }\n        if (*VAR_15) {\n          auto VAR_12 =\n              JSProxy::getComputed(VAR_10, VAR_9, VAR_5, VAR_8);\n          if (VAR_12 == ExecutionStatus::EXCEPTION) {\n            return ExecutionStatus::EXCEPTION;\n          }\n          VAR_13 = std::move(*VAR_12);\n        } else {\n          VAR_10 = nullptr;\n        }\n      }\n    }\n\n    ComputedPropertyDescriptor VAR_16;\n    JSObject::getComputedPrimitiveDescriptor(\n        VAR_8, VAR_9, VAR_6, VAR_17, VAR_18, VAR_16);\n\n    if (VAR_17) {\n      if (LLVM_LIKELY(!VAR_16.flags.proxyObject)) {\n        auto VAR_12 = JSObject::getComputedPropertyValue_RJS(\n            VAR_8,\n            VAR_9,\n            VAR_17,\n            VAR_18,\n            VAR_16,\n            VAR_17);\n        if (VAR_12 == ExecutionStatus::EXCEPTION) {\n          return ExecutionStatus::EXCEPTION;\n        }\n        if (LLVM_LIKELY(!(*VAR_12)->isEmpty())) {\n          VAR_19 = std::move(*VAR_12);\n        }\n      } else {\n        auto VAR_14 = toPropertyKey(VAR_9, VAR_6);\n        if (VAR_14 == ExecutionStatus::EXCEPTION) {\n          return ExecutionStatus::EXCEPTION;\n        }\n        VAR_6 = VAR_14->get();\n        CallResult<bool> VAR_15 = JSProxy::getOwnProperty(\n            VAR_17, VAR_9, VAR_6, VAR_16, nullptr);\n        if (VAR_15 == ExecutionStatus::EXCEPTION) {\n          return ExecutionStatus::EXCEPTION;\n        }\n        if (*VAR_15) {\n          auto VAR_12 =\n              JSProxy::getComputed(VAR_17, VAR_9, VAR_6, VAR_8);\n          if (VAR_12 == ExecutionStatus::EXCEPTION) {\n            return ExecutionStatus::EXCEPTION;\n          }\n          VAR_19 = std::move(*VAR_12);\n        } else {\n          VAR_17 = nullptr;\n        }\n      }\n    }\n\n    if (VAR_17) {\n      if (LLVM_UNLIKELY(\n              JSObject::putComputed_RJS(\n                  VAR_8,\n                  VAR_9,\n                  VAR_5,\n                  VAR_19,\n                  PropOpFlags().plusThrowOnError()) ==\n              ExecutionStatus::EXCEPTION)) {\n        return ExecutionStatus::EXCEPTION;\n      }\n    } else {\n      if (LLVM_UNLIKELY(\n              JSObject::deleteComputed(\n                  VAR_8, VAR_9, VAR_5, PropOpFlags().plusThrowOnError()) ==\n              ExecutionStatus::EXCEPTION)) {\n        return ExecutionStatus::EXCEPTION;\n      }\n    }\n\n    if (VAR_10) {\n      if (LLVM_UNLIKELY(\n              JSObject::putComputed_RJS(\n                  VAR_8,\n                  VAR_9,\n                  VAR_6,\n                  VAR_13,\n                  PropOpFlags().plusThrowOnError()) ==\n              ExecutionStatus::EXCEPTION)) {\n        return ExecutionStatus::EXCEPTION;\n      }\n    } else {\n      if (LLVM_UNLIKELY(\n              JSObject::deleteComputed(\n                  VAR_8, VAR_9, VAR_6, PropOpFlags().plusThrowOnError()) ==\n              ExecutionStatus::EXCEPTION)) {\n        return ExecutionStatus::EXCEPTION;\n      }\n    }\n\n    return ExecutionStatus::RETURNED;\n  }",
  "func_graph_path": null,
  "diff_func": "--- func_before\n+++ func_after\n@@ -8,10 +8,6 @@\n     ComputedPropertyDescriptor aDesc;\n     JSObject::getComputedPrimitiveDescriptor(\n         obj_, runtime_, aHandle_, aDescObjHandle_, aTmpNameStorage_, aDesc);\n-\n-    ComputedPropertyDescriptor bDesc;\n-    JSObject::getComputedPrimitiveDescriptor(\n-        obj_, runtime_, bHandle_, bDescObjHandle_, bTmpNameStorage_, bDesc);\n \n     if (aDescObjHandle_) {\n       if (LLVM_LIKELY(!aDesc.flags.proxyObject)) {\n@@ -51,6 +47,11 @@\n         }\n       }\n     }\n+\n+    ComputedPropertyDescriptor bDesc;\n+    JSObject::getComputedPrimitiveDescriptor(\n+        obj_, runtime_, bHandle_, bDescObjHandle_, bTmpNameStorage_, bDesc);\n+\n     if (bDescObjHandle_) {\n       if (LLVM_LIKELY(!bDesc.flags.proxyObject)) {\n         auto res = JSObject::getComputedPropertyValue_RJS(",
  "diff_line_info": {
    "deleted_lines": [
      "",
      "    ComputedPropertyDescriptor bDesc;",
      "    JSObject::getComputedPrimitiveDescriptor(",
      "        obj_, runtime_, bHandle_, bDescObjHandle_, bTmpNameStorage_, bDesc);"
    ],
    "added_lines": [
      "",
      "    ComputedPropertyDescriptor bDesc;",
      "    JSObject::getComputedPrimitiveDescriptor(",
      "        obj_, runtime_, bHandle_, bDescObjHandle_, bTmpNameStorage_, bDesc);",
      ""
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/facebook/hermes/pull/908",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/facebook/hermes/pull/908: 403 Client Error: Forbidden for url: https://api.github.com/repos/facebook/hermes/pulls/908",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "The patch is classified as a security fix because it addresses specific CVEs, indicating security vulnerabilities. The code changes support this by modifying security-sensitive code areas. \n\n**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.9"
}