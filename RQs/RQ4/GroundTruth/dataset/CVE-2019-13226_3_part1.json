{
  "cve_id": "CVE-2019-13226",
  "cwe_ids": [
    "CWE-362",
    "CWE-59"
  ],
  "cvss_vector": "AV:L/AC:M/Au:N/C:C/I:C/A:C",
  "cvss_is_v3": false,
  "repo_name": "linuxdeepin/deepin-clone",
  "commit_msg": "fix: Do not use the \"/tmp\" directory\n\nhttps://github.com/linuxdeepin/deepin-clone/issues/16\nhttps://bugzilla.opensuse.org/show_bug.cgi?id=1130388",
  "commit_hash": "e079f3e2712b4f8c28e3e63e71ba1a1f90fce1ab",
  "git_url": "https://github.com/linuxdeepin/deepin-clone/commit/e079f3e2712b4f8c28e3e63e71ba1a1f90fce1ab",
  "file_path": "app/src/corelib/helper.cpp",
  "func_name": "Helper::getPartitionSizeInfo",
  "func_before": "bool Helper::getPartitionSizeInfo(const QString &partDevice, qint64 *used, qint64 *free, int *blockSize)\n{\n    QProcess process;\n    QStringList env_list = QProcess::systemEnvironment();\n\n    env_list.append(\"LANG=C\");\n    process.setEnvironment(env_list);\n\n    if (Helper::isMounted(partDevice)) {\n        process.start(QString(\"df -B1 -P %1\").arg(partDevice));\n        process.waitForFinished();\n\n        if (process.exitCode() != 0) {\n            dCError(\"Call df failed: %s\", qPrintable(process.readAllStandardError()));\n\n            return false;\n        }\n\n        QByteArray output = process.readAll();\n        const QByteArrayList &lines = output.trimmed().split('\\n');\n\n        if (lines.count() != 2)\n            return false;\n\n        output = lines.last().simplified();\n\n        const QByteArrayList &values = output.split(' ');\n\n        if (values.count() != 6)\n            return false;\n\n        bool ok = false;\n\n        if (used)\n            *used = values.at(2).toLongLong(&ok);\n\n        if (!ok)\n            return false;\n\n        if (free)\n            *free = values.at(3).toLongLong(&ok);\n\n        if (!ok)\n            return false;\n\n        return true;\n    } else {\n        process.start(QString(\"%1 -s %2 -c -q -C -L /tmp/partclone.log\").arg(getPartcloneExecuter(DDevicePartInfo(partDevice))).arg(partDevice));\n        process.setStandardOutputFile(\"/dev/null\");\n        process.setReadChannel(QProcess::StandardError);\n        process.waitForStarted();\n\n        qint64 used_block = -1;\n        qint64 free_block = -1;\n\n        while (process.waitForReadyRead(5000)) {\n            const QByteArray &data = process.readAll();\n\n            for (QByteArray line : data.split('\\n')) {\n                line = line.simplified();\n\n                if (QString::fromLatin1(line).contains(QRegularExpression(\"\\\\berror\\\\b\"))) {\n                    dCError(\"Call \\\"%s %s\\\" failed: \\\"%s\\\"\", qPrintable(process.program()), qPrintable(process.arguments().join(' ')), line.constData());\n                }\n\n                if (line.startsWith(\"Space in use:\")) {\n                    bool ok = false;\n                    const QByteArray &value = line.split(' ').value(6, \"-1\");\n\n                    used_block = value.toLongLong(&ok);\n\n                    if (!ok) {\n                        dCError(\"String to LongLong failed, String: %s\", value.constData());\n\n                        return false;\n                    }\n                } else if (line.startsWith(\"Free Space:\")) {\n                    bool ok = false;\n                    const QByteArray &value = line.split(' ').value(5, \"-1\");\n\n                    free_block = value.toLongLong(&ok);\n\n                    if (!ok) {\n                        dCError(\"String to LongLong failed, String: %s\", value.constData());\n\n                        return false;\n                    }\n                } else if (line.startsWith(\"Block size:\")) {\n                    bool ok = false;\n                    const QByteArray &value = line.split(' ').value(2, \"-1\");\n\n                    int block_size = value.toInt(&ok);\n\n                    if (!ok) {\n                        dCError(\"String to Int failed, String: %s\", value.constData());\n\n                        return false;\n                    }\n\n                    if (used_block < 0 || free_block < 0 || block_size < 0)\n                        return false;\n\n                    if (used)\n                        *used = used_block * block_size;\n\n                    if (free)\n                        *free = free_block * block_size;\n\n                    if (blockSize)\n                        *blockSize = block_size;\n\n                    process.terminate();\n                    process.waitForFinished();\n\n                    return true;\n                }\n            }\n        }\n    }\n\n    return false;\n}",
  "abstract_func_before": "bool Helper::getPartitionSizeInfo(const QString &VAR_0, qint64 *VAR_1, qint64 *VAR_2, int *VAR_3)\n{\n    QProcess VAR_4;\n    QStringList VAR_5 = QProcess::systemEnvironment();\n\n    VAR_5.append(\"LANG=C\");\n    VAR_4.setEnvironment(VAR_5);\n\n    if (Helper::isMounted(VAR_0)) {\n        VAR_4.start(QString(\"df -B1 -P %1\").arg(VAR_0));\n        VAR_4.waitForFinished();\n\n        if (VAR_4.exitCode() != 0) {\n            dCError(\"Call df failed: %s\", qPrintable(VAR_4.readAllStandardError()));\n\n            return false;\n        }\n\n        QByteArray VAR_6 = VAR_4.readAll();\n        const QByteArrayList &VAR_7 = VAR_6.trimmed().split('\\n');\n\n        if (VAR_7.count() != 2)\n            return false;\n\n        VAR_6 = VAR_7.last().simplified();\n\n        const QByteArrayList &VAR_8 = VAR_6.split(' ');\n\n        if (VAR_8.count() != 6)\n            return false;\n\n        bool VAR_9 = false;\n\n        if (VAR_1)\n            *VAR_1 = VAR_8.at(2).toLongLong(&VAR_9);\n\n        if (!VAR_9)\n            return false;\n\n        if (VAR_2)\n            *VAR_2 = VAR_8.at(3).toLongLong(&VAR_9);\n\n        if (!VAR_9)\n            return false;\n\n        return true;\n    } else {\n        VAR_4.start(QString(\"%1 -s %2 -c -q -C -L /tmp/partclone.log\").arg(getPartcloneExecuter(DDevicePartInfo(VAR_0))).arg(VAR_0));\n        VAR_4.setStandardOutputFile(\"/dev/null\");\n        VAR_4.setReadChannel(QProcess::StandardError);\n        VAR_4.waitForStarted();\n\n        qint64 VAR_10 = -1;\n        qint64 VAR_11 = -1;\n\n        while (VAR_4.waitForReadyRead(5000)) {\n            const QByteArray &VAR_12 = VAR_4.readAll();\n\n            for (QByteArray VAR_13 : VAR_12.split('\\n')) {\n                VAR_13 = VAR_13.simplified();\n\n                if (QString::fromLatin1(VAR_13).contains(QRegularExpression(\"\\\\berror\\\\b\"))) {\n                    dCError(\"Call \\\"%s %s\\\" failed: \\\"%s\\\"\", qPrintable(VAR_4.program()), qPrintable(VAR_4.arguments().join(' ')), VAR_13.constData());\n                }\n\n                if (VAR_13.startsWith(\"Space in use:\")) {\n                    bool VAR_9 = false;\n                    const QByteArray &VAR_14 = VAR_13.split(' ').value(6, \"-1\");\n\n                    VAR_10 = VAR_14.toLongLong(&VAR_9);\n\n                    if (!VAR_9) {\n                        dCError(\"String to LongLong failed, String: %s\", VAR_14.constData());\n\n                        return false;\n                    }\n                } else if (VAR_13.startsWith(\"Free Space:\")) {\n                    bool VAR_9 = false;\n                    const QByteArray &VAR_14 = VAR_13.split(' ').value(5, \"-1\");\n\n                    VAR_11 = VAR_14.toLongLong(&VAR_9);\n\n                    if (!VAR_9) {\n                        dCError(\"String to LongLong failed, String: %s\", VAR_14.constData());\n\n                        return false;\n                    }\n                } else if (VAR_13.startsWith(\"Block size:\")) {\n                    bool VAR_9 = false;\n                    const QByteArray &VAR_14 = VAR_13.split(' ').value(2, \"-1\");\n\n                    int VAR_15 = VAR_14.toInt(&VAR_9);\n\n                    if (!VAR_9) {\n                        dCError(\"String to Int failed, String: %s\", VAR_14.constData());\n\n                        return false;\n                    }\n\n                    if (VAR_10 < 0 || VAR_11 < 0 || VAR_15 < 0)\n                        return false;\n\n                    if (VAR_1)\n                        *VAR_1 = VAR_10 * VAR_15;\n\n                    if (VAR_2)\n                        *VAR_2 = VAR_11 * VAR_15;\n\n                    if (VAR_3)\n                        *VAR_3 = VAR_15;\n\n                    VAR_4.terminate();\n                    VAR_4.waitForFinished();\n\n                    return true;\n                }\n            }\n        }\n    }\n\n    return false;\n}",
  "func_graph_path_before": "linuxdeepin/deepin-clone/e079f3e2712b4f8c28e3e63e71ba1a1f90fce1ab/helper.cpp/vul/before/2.json",
  "func": "bool Helper::getPartitionSizeInfo(const QString &partDevice, qint64 *used, qint64 *free, int *blockSize)\n{\n    QProcess process;\n    QStringList env_list = QProcess::systemEnvironment();\n\n    env_list.append(\"LANG=C\");\n    process.setEnvironment(env_list);\n\n    if (Helper::isMounted(partDevice)) {\n        process.start(QString(\"df -B1 -P %1\").arg(partDevice));\n        process.waitForFinished();\n\n        if (process.exitCode() != 0) {\n            dCError(\"Call df failed: %s\", qPrintable(process.readAllStandardError()));\n\n            return false;\n        }\n\n        QByteArray output = process.readAll();\n        const QByteArrayList &lines = output.trimmed().split('\\n');\n\n        if (lines.count() != 2)\n            return false;\n\n        output = lines.last().simplified();\n\n        const QByteArrayList &values = output.split(' ');\n\n        if (values.count() != 6)\n            return false;\n\n        bool ok = false;\n\n        if (used)\n            *used = values.at(2).toLongLong(&ok);\n\n        if (!ok)\n            return false;\n\n        if (free)\n            *free = values.at(3).toLongLong(&ok);\n\n        if (!ok)\n            return false;\n\n        return true;\n    } else {\n        process.start(QString(\"%1 -s %2 -c -q -C -L /var/log/partclone.log\").arg(getPartcloneExecuter(DDevicePartInfo(partDevice))).arg(partDevice));\n        process.setStandardOutputFile(\"/dev/null\");\n        process.setReadChannel(QProcess::StandardError);\n        process.waitForStarted();\n\n        qint64 used_block = -1;\n        qint64 free_block = -1;\n\n        while (process.waitForReadyRead(5000)) {\n            const QByteArray &data = process.readAll();\n\n            for (QByteArray line : data.split('\\n')) {\n                line = line.simplified();\n\n                if (QString::fromLatin1(line).contains(QRegularExpression(\"\\\\berror\\\\b\"))) {\n                    dCError(\"Call \\\"%s %s\\\" failed: \\\"%s\\\"\", qPrintable(process.program()), qPrintable(process.arguments().join(' ')), line.constData());\n                }\n\n                if (line.startsWith(\"Space in use:\")) {\n                    bool ok = false;\n                    const QByteArray &value = line.split(' ').value(6, \"-1\");\n\n                    used_block = value.toLongLong(&ok);\n\n                    if (!ok) {\n                        dCError(\"String to LongLong failed, String: %s\", value.constData());\n\n                        return false;\n                    }\n                } else if (line.startsWith(\"Free Space:\")) {\n                    bool ok = false;\n                    const QByteArray &value = line.split(' ').value(5, \"-1\");\n\n                    free_block = value.toLongLong(&ok);\n\n                    if (!ok) {\n                        dCError(\"String to LongLong failed, String: %s\", value.constData());\n\n                        return false;\n                    }\n                } else if (line.startsWith(\"Block size:\")) {\n                    bool ok = false;\n                    const QByteArray &value = line.split(' ').value(2, \"-1\");\n\n                    int block_size = value.toInt(&ok);\n\n                    if (!ok) {\n                        dCError(\"String to Int failed, String: %s\", value.constData());\n\n                        return false;\n                    }\n\n                    if (used_block < 0 || free_block < 0 || block_size < 0)\n                        return false;\n\n                    if (used)\n                        *used = used_block * block_size;\n\n                    if (free)\n                        *free = free_block * block_size;\n\n                    if (blockSize)\n                        *blockSize = block_size;\n\n                    process.terminate();\n                    process.waitForFinished();\n\n                    return true;\n                }\n            }\n        }\n    }\n\n    return false;\n}",
  "abstract_func": "bool Helper::getPartitionSizeInfo(const QString &VAR_0, qint64 *VAR_1, qint64 *VAR_2, int *VAR_3)\n{\n    QProcess VAR_4;\n    QStringList VAR_5 = QProcess::systemEnvironment();\n\n    VAR_5.append(\"LANG=C\");\n    VAR_4.setEnvironment(VAR_5);\n\n    if (Helper::isMounted(VAR_0)) {\n        VAR_4.start(QString(\"df -B1 -P %1\").arg(VAR_0));\n        VAR_4.waitForFinished();\n\n        if (VAR_4.exitCode() != 0) {\n            dCError(\"Call df failed: %s\", qPrintable(VAR_4.readAllStandardError()));\n\n            return false;\n        }\n\n        QByteArray VAR_6 = VAR_4.readAll();\n        const QByteArrayList &VAR_7 = VAR_6.trimmed().split('\\n');\n\n        if (VAR_7.count() != 2)\n            return false;\n\n        VAR_6 = VAR_7.last().simplified();\n\n        const QByteArrayList &VAR_8 = VAR_6.split(' ');\n\n        if (VAR_8.count() != 6)\n            return false;\n\n        bool VAR_9 = false;\n\n        if (VAR_1)\n            *VAR_1 = VAR_8.at(2).toLongLong(&VAR_9);\n\n        if (!VAR_9)\n            return false;\n\n        if (VAR_2)\n            *VAR_2 = VAR_8.at(3).toLongLong(&VAR_9);\n\n        if (!VAR_9)\n            return false;\n\n        return true;\n    } else {\n        VAR_4.start(QString(\"%1 -s %2 -c -q -C -L /var/log/partclone.log\").arg(getPartcloneExecuter(DDevicePartInfo(VAR_0))).arg(VAR_0));\n        VAR_4.setStandardOutputFile(\"/dev/null\");\n        VAR_4.setReadChannel(QProcess::StandardError);\n        VAR_4.waitForStarted();\n\n        qint64 VAR_10 = -1;\n        qint64 VAR_11 = -1;\n\n        while (VAR_4.waitForReadyRead(5000)) {\n            const QByteArray &VAR_12 = VAR_4.readAll();\n\n            for (QByteArray VAR_13 : VAR_12.split('\\n')) {\n                VAR_13 = VAR_13.simplified();\n\n                if (QString::fromLatin1(VAR_13).contains(QRegularExpression(\"\\\\berror\\\\b\"))) {\n                    dCError(\"Call \\\"%s %s\\\" failed: \\\"%s\\\"\", qPrintable(VAR_4.program()), qPrintable(VAR_4.arguments().join(' ')), VAR_13.constData());\n                }\n\n                if (VAR_13.startsWith(\"Space in use:\")) {\n                    bool VAR_9 = false;\n                    const QByteArray &VAR_14 = VAR_13.split(' ').value(6, \"-1\");\n\n                    VAR_10 = VAR_14.toLongLong(&VAR_9);\n\n                    if (!VAR_9) {\n                        dCError(\"String to LongLong failed, String: %s\", VAR_14.constData());\n\n                        return false;\n                    }\n                } else if (VAR_13.startsWith(\"Free Space:\")) {\n                    bool VAR_9 = false;\n                    const QByteArray &VAR_14 = VAR_13.split(' ').value(5, \"-1\");\n\n                    VAR_11 = VAR_14.toLongLong(&VAR_9);\n\n                    if (!VAR_9) {\n                        dCError(\"String to LongLong failed, String: %s\", VAR_14.constData());\n\n                        return false;\n                    }\n                } else if (VAR_13.startsWith(\"Block size:\")) {\n                    bool VAR_9 = false;\n                    const QByteArray &VAR_14 = VAR_13.split(' ').value(2, \"-1\");\n\n                    int VAR_15 = VAR_14.toInt(&VAR_9);\n\n                    if (!VAR_9) {\n                        dCError(\"String to Int failed, String: %s\", VAR_14.constData());\n\n                        return false;\n                    }\n\n                    if (VAR_10 < 0 || VAR_11 < 0 || VAR_15 < 0)\n                        return false;\n\n                    if (VAR_1)\n                        *VAR_1 = VAR_10 * VAR_15;\n\n                    if (VAR_2)\n                        *VAR_2 = VAR_11 * VAR_15;\n\n                    if (VAR_3)\n                        *VAR_3 = VAR_15;\n\n                    VAR_4.terminate();\n                    VAR_4.waitForFinished();\n\n                    return true;\n                }\n            }\n        }\n    }\n\n    return false;\n}",
  "func_graph_path": "linuxdeepin/deepin-clone/e079f3e2712b4f8c28e3e63e71ba1a1f90fce1ab/helper.cpp/vul/after/2.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -45,7 +45,7 @@\n \n         return true;\n     } else {\n-        process.start(QString(\"%1 -s %2 -c -q -C -L /tmp/partclone.log\").arg(getPartcloneExecuter(DDevicePartInfo(partDevice))).arg(partDevice));\n+        process.start(QString(\"%1 -s %2 -c -q -C -L /var/log/partclone.log\").arg(getPartcloneExecuter(DDevicePartInfo(partDevice))).arg(partDevice));\n         process.setStandardOutputFile(\"/dev/null\");\n         process.setReadChannel(QProcess::StandardError);\n         process.waitForStarted();",
  "diff_line_info": {
    "deleted_lines": [
      "        process.start(QString(\"%1 -s %2 -c -q -C -L /tmp/partclone.log\").arg(getPartcloneExecuter(DDevicePartInfo(partDevice))).arg(partDevice));"
    ],
    "added_lines": [
      "        process.start(QString(\"%1 -s %2 -c -q -C -L /var/log/partclone.log\").arg(getPartcloneExecuter(DDevicePartInfo(partDevice))).arg(partDevice));"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/linuxdeepin/deepin-clone/pull/18",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/linuxdeepin/deepin-clone/pull/18: 403 Client Error: Forbidden for url: https://api.github.com/repos/linuxdeepin/deepin-clone/pulls/18",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 0.95"
}