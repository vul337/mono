{
  "cve_id": "CVE-2021-37620",
  "cwe_ids": [
    "CWE-125"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "Exiv2/exiv2",
  "commit_msg": "Safer std::vector indexing.",
  "commit_hash": "76e313745e813f80e8910aceb2210af3ad8cf897",
  "git_url": "https://github.com/Exiv2/exiv2/commit/76e313745e813f80e8910aceb2210af3ad8cf897",
  "file_path": "samples/addmoddel.cpp",
  "func_name": "main",
  "func_before": "int main(int argc, char* const argv[])\ntry {\n    Exiv2::XmpParser::initialize();\n    ::atexit(Exiv2::XmpParser::terminate);\n#ifdef EXV_ENABLE_BMFF\n    Exiv2::enableBMFF();\n#endif\n\n    if (argc != 2) {\n        std::cout << \"Usage: \" << argv[0] << \" file\\n\";\n        return 1;\n    }\n    std::string file(argv[1]);\n\n    // Container for exif metadata. This is an example of creating\n    // exif metadata from scratch. If you want to add, modify, delete\n    // metadata that exists in an image, start with ImageFactory::open\n    Exiv2::ExifData exifData;\n\n    // *************************************************************************\n    // Add to the Exif data\n\n    // This is the quickest way to add (simple) Exif data. If a metadatum for\n    // a given key already exists, its value is overwritten. Otherwise a new\n    // tag is added.\n    exifData[\"Exif.Image.Model\"] = \"Test 1\";                     // AsciiValue\n    exifData[\"Exif.Image.SamplesPerPixel\"] = uint16_t(162);      // UShortValue\n    exifData[\"Exif.Image.XResolution\"] = -2;            // LongValue\n    exifData[\"Exif.Image.YResolution\"] = Exiv2::Rational(-2, 3); // RationalValue\n    std::cout << \"Added a few tags the quick way.\\n\";\n\n    // Create a ASCII string value (note the use of create)\n    Exiv2::Value::AutoPtr v = Exiv2::Value::create(Exiv2::asciiString);\n    // Set the value to a string\n    v->read(\"1999:12:31 23:59:59\");\n    // Add the value together with its key to the Exif data container\n    Exiv2::ExifKey key(\"Exif.Photo.DateTimeOriginal\");\n    exifData.add(key, v.get());\n    std::cout << \"Added key \\\"\" << key << \"\\\", value \\\"\" << *v << \"\\\"\\n\";\n\n    // Now create a more interesting value (without using the create method)\n    Exiv2::URationalValue::AutoPtr rv(new Exiv2::URationalValue);\n    // Set two rational components from a string\n    rv->read(\"1/2 1/3\");\n    // Add more elements through the extended interface of rational value\n    rv->value_.push_back(std::make_pair(2,3));\n    rv->value_.push_back(std::make_pair(3,4));\n    // Add the key and value pair to the Exif data\n    key = Exiv2::ExifKey(\"Exif.Image.PrimaryChromaticities\");\n    exifData.add(key, rv.get());\n    std::cout << \"Added key \\\"\" << key << \"\\\", value \\\"\" << *rv << \"\\\"\\n\";\n\n    // *************************************************************************\n    // Modify Exif data\n\n    // Since we know that the metadatum exists (or we don't mind creating a new\n    // tag if it doesn't), we can simply do this:\n    Exiv2::Exifdatum& tag = exifData[\"Exif.Photo.DateTimeOriginal\"];\n    std::string date = tag.toString();\n    date.replace(0, 4, \"2000\");\n    tag.setValue(date);\n    std::cout << \"Modified key \\\"\" << tag.key()\n              << \"\\\", new value \\\"\" << tag.value() << \"\\\"\\n\";\n\n    // Alternatively, we can use findKey()\n    key = Exiv2::ExifKey(\"Exif.Image.PrimaryChromaticities\");\n    Exiv2::ExifData::iterator pos = exifData.findKey(key);\n    if (pos == exifData.end()) throw Exiv2::Error(Exiv2::kerErrorMessage, \"Key not found\");\n    // Get a pointer to a copy of the value\n    v = pos->getValue();\n    // Downcast the Value pointer to its actual type\n    Exiv2::URationalValue* prv = dynamic_cast<Exiv2::URationalValue*>(v.release());\n    if (prv == 0) throw Exiv2::Error(Exiv2::kerErrorMessage, \"Downcast failed\");\n    rv = Exiv2::URationalValue::AutoPtr(prv);\n    // Modify the value directly through the interface of URationalValue\n    rv->value_[2] = std::make_pair(88,77);\n    // Copy the modified value back to the metadatum\n    pos->setValue(rv.get());\n    std::cout << \"Modified key \\\"\" << key\n              << \"\\\", new value \\\"\" << pos->value() << \"\\\"\\n\";\n\n    // *************************************************************************\n    // Delete metadata from the Exif data container\n\n    // Delete the metadatum at iterator position pos\n    key = Exiv2::ExifKey(\"Exif.Image.PrimaryChromaticities\");\n    pos = exifData.findKey(key);\n    if (pos == exifData.end()) throw Exiv2::Error(Exiv2::kerErrorMessage, \"Key not found\");\n    exifData.erase(pos);\n    std::cout << \"Deleted key \\\"\" << key << \"\\\"\\n\";\n\n    // *************************************************************************\n    // Finally, write the remaining Exif data to the image file\n    Exiv2::Image::AutoPtr image = Exiv2::ImageFactory::open(file);\n    assert(image.get() != 0);\n\n    image->setExifData(exifData);\n    image->writeMetadata();\n\n    return 0;\n}\ncatch (Exiv2::AnyError& e) {\n    std::cout << \"Caught Exiv2 exception '\" << e << \"'\\n\";\n    return -1;\n}",
  "abstract_func_before": "int main(int VAR_0, char* const VAR_1[])\ntry {\n    Exiv2::XmpParser::initialize();\n    ::atexit(Exiv2::XmpParser::terminate);\n#ifdef VAR_2\n    Exiv2::enableBMFF();\n#endif\n\n    if (VAR_0 != 2) {\n        std::cout << \"Usage: \" << VAR_1[0] << \" file\\n\";\n        return 1;\n    }\n    std::string file(argv[1]);\n\n    /* COMMENT_0 */\n    /* COMMENT_1 */\n    /* COMMENT_2 */\n    Exiv2::ExifData VAR_3;\n\n    /* COMMENT_3 */\n    /* COMMENT_4 */\n\n    /* COMMENT_5 */\n    /* COMMENT_6 */\n    /* COMMENT_7 */\n    VAR_3[\"Exif.Image.Model\"] = \"Test 1\";                     /* COMMENT_8 */\n    VAR_3[\"Exif.Image.SamplesPerPixel\"] = uint16_t(162);      /* COMMENT_9 */\n    VAR_3[\"Exif.Image.XResolution\"] = -2;            /* COMMENT_10 */\n    VAR_3[\"Exif.Image.YResolution\"] = Exiv2::Rational(-2, 3); /* COMMENT_11 */\n    std::cout << \"Added a few tags the quick way.\\n\";\n\n    /* COMMENT_12 */\n    Exiv2::Value::AutoPtr VAR_4 = Exiv2::Value::create(Exiv2::asciiString);\n    /* COMMENT_13 */\n    VAR_4->read(\"1999:12:31 23:59:59\");\n    /* COMMENT_14 */\n    Exiv2::ExifKey VAR_5(\"Exif.Photo.DateTimeOriginal\");\n    VAR_3.add(VAR_5, VAR_4.get());\n    std::cout << \"Added key \\\"\" << VAR_5 << \"\\\", value \\\"\" << *VAR_4 << \"\\\"\\n\";\n\n    /* COMMENT_15 */\n    Exiv2::URationalValue::AutoPtr VAR_6(new Exiv2::URationalValue);\n    /* COMMENT_16 */\n    VAR_6->read(\"1/2 1/3\");\n    /* COMMENT_17 */\n    VAR_6->value_.push_back(std::make_pair(2,3));\n    VAR_6->value_.push_back(std::make_pair(3,4));\n    /* COMMENT_18 */\n    VAR_5 = Exiv2::ExifKey(\"Exif.Image.PrimaryChromaticities\");\n    VAR_3.add(VAR_5, VAR_6.get());\n    std::cout << \"Added key \\\"\" << VAR_5 << \"\\\", value \\\"\" << *VAR_6 << \"\\\"\\n\";\n\n    /* COMMENT_3 */\n    /* COMMENT_19 */\n\n    /* COMMENT_20 */\n    /* COMMENT_21 */\n    Exiv2::Exifdatum& VAR_7 = VAR_3[\"Exif.Photo.DateTimeOriginal\"];\n    std::string VAR_8 = VAR_7.toString();\n    VAR_8.replace(0, 4, \"2000\");\n    VAR_7.setValue(VAR_8);\n    std::cout << \"Modified key \\\"\" << VAR_7.key()\n              << \"\\\", new value \\\"\" << VAR_7.value() << \"\\\"\\n\";\n\n    /* COMMENT_22 */\n    VAR_5 = Exiv2::ExifKey(\"Exif.Image.PrimaryChromaticities\");\n    Exiv2::ExifData::iterator VAR_9 = VAR_3.findKey(VAR_5);\n    if (VAR_9 == VAR_3.end()) throw Exiv2::Error(Exiv2::kerErrorMessage, \"Key not found\");\n    /* COMMENT_23 */\n    VAR_4 = VAR_9->getValue();\n    /* COMMENT_24 */\n    Exiv2::URationalValue* VAR_10 = VAR_11<Exiv2::URationalValue*>(VAR_4.release());\n    if (VAR_10 == 0) throw Exiv2::Error(Exiv2::kerErrorMessage, \"Downcast failed\");\n    VAR_6 = Exiv2::URationalValue::AutoPtr(VAR_10);\n    /* COMMENT_25 */\n    VAR_6->value_[2] = std::make_pair(88,77);\n    /* COMMENT_26 */\n    VAR_9->setValue(VAR_6.get());\n    std::cout << \"Modified key \\\"\" << VAR_5\n              << \"\\\", new value \\\"\" << VAR_9->value() << \"\\\"\\n\";\n\n    /* COMMENT_3 */\n    /* COMMENT_27 */\n\n    /* COMMENT_28 */\n    VAR_5 = Exiv2::ExifKey(\"Exif.Image.PrimaryChromaticities\");\n    VAR_9 = VAR_3.findKey(VAR_5);\n    if (VAR_9 == VAR_3.end()) throw Exiv2::Error(Exiv2::kerErrorMessage, \"Key not found\");\n    VAR_3.erase(VAR_9);\n    std::cout << \"Deleted key \\\"\" << VAR_5 << \"\\\"\\n\";\n\n    /* COMMENT_3 */\n    /* COMMENT_29 */\n    Exiv2::Image::AutoPtr VAR_12 = Exiv2::ImageFactory::open(VAR_13);\n    assert(VAR_12.get() != 0);\n\n    VAR_12->setExifData(VAR_3);\n    VAR_12->writeMetadata();\n\n    return 0;\n}\ncatch (Exiv2::AnyError& VAR_14) {\n    std::cout << \"Caught Exiv2 exception '\" << VAR_14 << \"'\\n\";\n    return -1;\n}",
  "func_graph_path_before": "Exiv2/exiv2/76e313745e813f80e8910aceb2210af3ad8cf897/addmoddel.cpp/vul/before/0.json",
  "func": "int main(int argc, char* const argv[])\ntry {\n    Exiv2::XmpParser::initialize();\n    ::atexit(Exiv2::XmpParser::terminate);\n#ifdef EXV_ENABLE_BMFF\n    Exiv2::enableBMFF();\n#endif\n\n    if (argc != 2) {\n        std::cout << \"Usage: \" << argv[0] << \" file\\n\";\n        return 1;\n    }\n    std::string file(argv[1]);\n\n    // Container for exif metadata. This is an example of creating\n    // exif metadata from scratch. If you want to add, modify, delete\n    // metadata that exists in an image, start with ImageFactory::open\n    Exiv2::ExifData exifData;\n\n    // *************************************************************************\n    // Add to the Exif data\n\n    // This is the quickest way to add (simple) Exif data. If a metadatum for\n    // a given key already exists, its value is overwritten. Otherwise a new\n    // tag is added.\n    exifData[\"Exif.Image.Model\"] = \"Test 1\";                     // AsciiValue\n    exifData[\"Exif.Image.SamplesPerPixel\"] = uint16_t(162);      // UShortValue\n    exifData[\"Exif.Image.XResolution\"] = -2;            // LongValue\n    exifData[\"Exif.Image.YResolution\"] = Exiv2::Rational(-2, 3); // RationalValue\n    std::cout << \"Added a few tags the quick way.\\n\";\n\n    // Create a ASCII string value (note the use of create)\n    Exiv2::Value::AutoPtr v = Exiv2::Value::create(Exiv2::asciiString);\n    // Set the value to a string\n    v->read(\"1999:12:31 23:59:59\");\n    // Add the value together with its key to the Exif data container\n    Exiv2::ExifKey key(\"Exif.Photo.DateTimeOriginal\");\n    exifData.add(key, v.get());\n    std::cout << \"Added key \\\"\" << key << \"\\\", value \\\"\" << *v << \"\\\"\\n\";\n\n    // Now create a more interesting value (without using the create method)\n    Exiv2::URationalValue::AutoPtr rv(new Exiv2::URationalValue);\n    // Set two rational components from a string\n    rv->read(\"1/2 1/3\");\n    // Add more elements through the extended interface of rational value\n    rv->value_.push_back(std::make_pair(2,3));\n    rv->value_.push_back(std::make_pair(3,4));\n    // Add the key and value pair to the Exif data\n    key = Exiv2::ExifKey(\"Exif.Image.PrimaryChromaticities\");\n    exifData.add(key, rv.get());\n    std::cout << \"Added key \\\"\" << key << \"\\\", value \\\"\" << *rv << \"\\\"\\n\";\n\n    // *************************************************************************\n    // Modify Exif data\n\n    // Since we know that the metadatum exists (or we don't mind creating a new\n    // tag if it doesn't), we can simply do this:\n    Exiv2::Exifdatum& tag = exifData[\"Exif.Photo.DateTimeOriginal\"];\n    std::string date = tag.toString();\n    date.replace(0, 4, \"2000\");\n    tag.setValue(date);\n    std::cout << \"Modified key \\\"\" << tag.key()\n              << \"\\\", new value \\\"\" << tag.value() << \"\\\"\\n\";\n\n    // Alternatively, we can use findKey()\n    key = Exiv2::ExifKey(\"Exif.Image.PrimaryChromaticities\");\n    Exiv2::ExifData::iterator pos = exifData.findKey(key);\n    if (pos == exifData.end()) throw Exiv2::Error(Exiv2::kerErrorMessage, \"Key not found\");\n    // Get a pointer to a copy of the value\n    v = pos->getValue();\n    // Downcast the Value pointer to its actual type\n    Exiv2::URationalValue* prv = dynamic_cast<Exiv2::URationalValue*>(v.release());\n    if (prv == 0) throw Exiv2::Error(Exiv2::kerErrorMessage, \"Downcast failed\");\n    rv = Exiv2::URationalValue::AutoPtr(prv);\n    // Modify the value directly through the interface of URationalValue\n    rv->value_.at(2) = std::make_pair(88,77);\n    // Copy the modified value back to the metadatum\n    pos->setValue(rv.get());\n    std::cout << \"Modified key \\\"\" << key\n              << \"\\\", new value \\\"\" << pos->value() << \"\\\"\\n\";\n\n    // *************************************************************************\n    // Delete metadata from the Exif data container\n\n    // Delete the metadatum at iterator position pos\n    key = Exiv2::ExifKey(\"Exif.Image.PrimaryChromaticities\");\n    pos = exifData.findKey(key);\n    if (pos == exifData.end()) throw Exiv2::Error(Exiv2::kerErrorMessage, \"Key not found\");\n    exifData.erase(pos);\n    std::cout << \"Deleted key \\\"\" << key << \"\\\"\\n\";\n\n    // *************************************************************************\n    // Finally, write the remaining Exif data to the image file\n    Exiv2::Image::AutoPtr image = Exiv2::ImageFactory::open(file);\n    assert(image.get() != 0);\n\n    image->setExifData(exifData);\n    image->writeMetadata();\n\n    return 0;\n}\ncatch (Exiv2::AnyError& e) {\n    std::cout << \"Caught Exiv2 exception '\" << e << \"'\\n\";\n    return -1;\n}",
  "abstract_func": "int main(int VAR_0, char* const VAR_1[])\ntry {\n    Exiv2::XmpParser::initialize();\n    ::atexit(Exiv2::XmpParser::terminate);\n#ifdef VAR_2\n    Exiv2::enableBMFF();\n#endif\n\n    if (VAR_0 != 2) {\n        std::cout << \"Usage: \" << VAR_1[0] << \" file\\n\";\n        return 1;\n    }\n    std::string file(argv[1]);\n\n    /* COMMENT_0 */\n    /* COMMENT_1 */\n    /* COMMENT_2 */\n    Exiv2::ExifData VAR_3;\n\n    /* COMMENT_3 */\n    /* COMMENT_4 */\n\n    /* COMMENT_5 */\n    /* COMMENT_6 */\n    /* COMMENT_7 */\n    VAR_3[\"Exif.Image.Model\"] = \"Test 1\";                     /* COMMENT_8 */\n    VAR_3[\"Exif.Image.SamplesPerPixel\"] = uint16_t(162);      /* COMMENT_9 */\n    VAR_3[\"Exif.Image.XResolution\"] = -2;            /* COMMENT_10 */\n    VAR_3[\"Exif.Image.YResolution\"] = Exiv2::Rational(-2, 3); /* COMMENT_11 */\n    std::cout << \"Added a few tags the quick way.\\n\";\n\n    /* COMMENT_12 */\n    Exiv2::Value::AutoPtr VAR_4 = Exiv2::Value::create(Exiv2::asciiString);\n    /* COMMENT_13 */\n    VAR_4->read(\"1999:12:31 23:59:59\");\n    /* COMMENT_14 */\n    Exiv2::ExifKey VAR_5(\"Exif.Photo.DateTimeOriginal\");\n    VAR_3.add(VAR_5, VAR_4.get());\n    std::cout << \"Added key \\\"\" << VAR_5 << \"\\\", value \\\"\" << *VAR_4 << \"\\\"\\n\";\n\n    /* COMMENT_15 */\n    Exiv2::URationalValue::AutoPtr VAR_6(new Exiv2::URationalValue);\n    /* COMMENT_16 */\n    VAR_6->read(\"1/2 1/3\");\n    /* COMMENT_17 */\n    VAR_6->value_.push_back(std::make_pair(2,3));\n    VAR_6->value_.push_back(std::make_pair(3,4));\n    /* COMMENT_18 */\n    VAR_5 = Exiv2::ExifKey(\"Exif.Image.PrimaryChromaticities\");\n    VAR_3.add(VAR_5, VAR_6.get());\n    std::cout << \"Added key \\\"\" << VAR_5 << \"\\\", value \\\"\" << *VAR_6 << \"\\\"\\n\";\n\n    /* COMMENT_3 */\n    /* COMMENT_19 */\n\n    /* COMMENT_20 */\n    /* COMMENT_21 */\n    Exiv2::Exifdatum& VAR_7 = VAR_3[\"Exif.Photo.DateTimeOriginal\"];\n    std::string VAR_8 = VAR_7.toString();\n    VAR_8.replace(0, 4, \"2000\");\n    VAR_7.setValue(VAR_8);\n    std::cout << \"Modified key \\\"\" << VAR_7.key()\n              << \"\\\", new value \\\"\" << VAR_7.value() << \"\\\"\\n\";\n\n    /* COMMENT_22 */\n    VAR_5 = Exiv2::ExifKey(\"Exif.Image.PrimaryChromaticities\");\n    Exiv2::ExifData::iterator VAR_9 = VAR_3.findKey(VAR_5);\n    if (VAR_9 == VAR_3.end()) throw Exiv2::Error(Exiv2::kerErrorMessage, \"Key not found\");\n    /* COMMENT_23 */\n    VAR_4 = VAR_9->getValue();\n    /* COMMENT_24 */\n    Exiv2::URationalValue* VAR_10 = VAR_11<Exiv2::URationalValue*>(VAR_4.release());\n    if (VAR_10 == 0) throw Exiv2::Error(Exiv2::kerErrorMessage, \"Downcast failed\");\n    VAR_6 = Exiv2::URationalValue::AutoPtr(VAR_10);\n    /* COMMENT_25 */\n    VAR_6->value_.at(2) = std::make_pair(88,77);\n    /* COMMENT_26 */\n    VAR_9->setValue(VAR_6.get());\n    std::cout << \"Modified key \\\"\" << VAR_5\n              << \"\\\", new value \\\"\" << VAR_9->value() << \"\\\"\\n\";\n\n    /* COMMENT_3 */\n    /* COMMENT_27 */\n\n    /* COMMENT_28 */\n    VAR_5 = Exiv2::ExifKey(\"Exif.Image.PrimaryChromaticities\");\n    VAR_9 = VAR_3.findKey(VAR_5);\n    if (VAR_9 == VAR_3.end()) throw Exiv2::Error(Exiv2::kerErrorMessage, \"Key not found\");\n    VAR_3.erase(VAR_9);\n    std::cout << \"Deleted key \\\"\" << VAR_5 << \"\\\"\\n\";\n\n    /* COMMENT_3 */\n    /* COMMENT_29 */\n    Exiv2::Image::AutoPtr VAR_12 = Exiv2::ImageFactory::open(VAR_13);\n    assert(VAR_12.get() != 0);\n\n    VAR_12->setExifData(VAR_3);\n    VAR_12->writeMetadata();\n\n    return 0;\n}\ncatch (Exiv2::AnyError& VAR_14) {\n    std::cout << \"Caught Exiv2 exception '\" << VAR_14 << \"'\\n\";\n    return -1;\n}",
  "func_graph_path": "Exiv2/exiv2/76e313745e813f80e8910aceb2210af3ad8cf897/addmoddel.cpp/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -73,7 +73,7 @@\n     if (prv == 0) throw Exiv2::Error(Exiv2::kerErrorMessage, \"Downcast failed\");\n     rv = Exiv2::URationalValue::AutoPtr(prv);\n     // Modify the value directly through the interface of URationalValue\n-    rv->value_[2] = std::make_pair(88,77);\n+    rv->value_.at(2) = std::make_pair(88,77);\n     // Copy the modified value back to the metadatum\n     pos->setValue(rv.get());\n     std::cout << \"Modified key \\\"\" << key",
  "diff_line_info": {
    "deleted_lines": [
      "    rv->value_[2] = std::make_pair(88,77);"
    ],
    "added_lines": [
      "    rv->value_.at(2) = std::make_pair(88,77);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/sridharb1/exiv2/pull/4",
  "description": {
    "pr_info": {
      "title": "0.27 maintenance",
      "number": 4
    },
    "comment": []
  },
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Defect Remediation & Feature Upgrades; **Confidence:** 0.9"
}