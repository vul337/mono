{
  "cve_id": "CVE-2021-23463",
  "cwe_ids": [
    "CWE-611"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "h2database",
  "commit_msg": "fix for #3195 CQLXML XXE vulnerability",
  "commit_hash": "d83285fd2e48fb075780ee95badee6f5a15ea7f8",
  "git_url": "https://github.com/h2database/h2database/commit/d83285fd2e48fb075780ee95badee6f5a15ea7f8",
  "file_path": "h2/src/main/org/h2/jdbc/JdbcSQLXML.java",
  "func_name": "getSource",
  "func_before": "@SuppressWarnings(\"unchecked\")\n    @Override\n    public <T extends Source> T getSource(Class<T> sourceClass) throws SQLException {\n        try {\n            if (isDebugEnabled()) {\n                debugCode(\n                        \"getSource(\" + (sourceClass != null ? sourceClass.getSimpleName() + \".class\" : \"null\") + ')');\n            }\n            checkReadable();\n            if (sourceClass == null || sourceClass == DOMSource.class) {\n                DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n                return (T) new DOMSource(dbf.newDocumentBuilder().parse(new InputSource(value.getInputStream())));\n            } else if (sourceClass == SAXSource.class) {\n                return (T) new SAXSource(new InputSource(value.getInputStream()));\n            } else if (sourceClass == StAXSource.class) {\n                XMLInputFactory xif = XMLInputFactory.newInstance();\n                return (T) new StAXSource(xif.createXMLStreamReader(value.getInputStream()));\n            } else if (sourceClass == StreamSource.class) {\n                return (T) new StreamSource(value.getInputStream());\n            }\n            throw unsupported(sourceClass.getName());\n        } catch (Exception e) {\n            throw logAndConvert(e);\n        }\n    }",
  "abstract_func_before": "@SuppressWarnings(\"unchecked\")\n    @Override\n    public <T extends Source> T getSource(Class<T> VAR_0) throws SQLException {\n        try {\n            if (isDebugEnabled()) {\n                debugCode(\n                        \"getSource(\" + (VAR_0 != null ? VAR_0.getSimpleName() + \".class\" : \"null\") + ')');\n            }\n            checkReadable();\n            if (VAR_0 == null || VAR_0 == DOMSource.class) {\n                DocumentBuilderFactory VAR_1 = VAR_2.newInstance();\n                return (T) new DOMSource(VAR_1.newDocumentBuilder().parse(new InputSource(VAR_3.getInputStream())));\n            } else if (VAR_0 == SAXSource.class) {\n                return (T) new SAXSource(new InputSource(VAR_3.getInputStream()));\n            } else if (VAR_0 == StAXSource.class) {\n                XMLInputFactory VAR_4 = VAR_5.newInstance();\n                return (T) new StAXSource(VAR_4.createXMLStreamReader(VAR_3.getInputStream()));\n            } else if (VAR_0 == StreamSource.class) {\n                return (T) new StreamSource(VAR_3.getInputStream());\n            }\n            throw unsupported(VAR_0.getName());\n        } catch (Exception VAR_6) {\n            throw logAndConvert(VAR_6);\n        }\n    }",
  "func_graph_path_before": "h2database/d83285fd2e48fb075780ee95badee6f5a15ea7f8/JdbcSQLXML.java/vul/before/0.json",
  "func": "@SuppressWarnings(\"unchecked\")\n    @Override\n    public <T extends Source> T getSource(Class<T> sourceClass) throws SQLException {\n        try {\n            if (isDebugEnabled()) {\n                debugCode(\n                        \"getSource(\" + (sourceClass != null ? sourceClass.getSimpleName() + \".class\" : \"null\") + ')');\n            }\n            checkReadable();\n            // According to https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html\n            if (sourceClass == null || sourceClass == DOMSource.class) {\n                DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n                for (Map.Entry<String,Boolean> entry : secureFeatureMap.entrySet()) {\n                    try {\n                        dbf.setFeature(entry.getKey(), entry.getValue());\n                    } catch (Exception ignore) {/**/}\n                }\n                dbf.setXIncludeAware(false);\n                dbf.setExpandEntityReferences(false);\n                dbf.setAttribute(XMLConstants.ACCESS_EXTERNAL_SCHEMA, \"\");\n                DocumentBuilder db = dbf.newDocumentBuilder();\n                db.setEntityResolver(NOOP_ENTITY_RESOLVER);\n                return (T) new DOMSource(db.parse(new InputSource(value.getInputStream())));\n            } else if (sourceClass == SAXSource.class) {\n                XMLReader reader = XMLReaderFactory.createXMLReader();\n                for (Map.Entry<String,Boolean> entry : secureFeatureMap.entrySet()) {\n                    try {\n                        reader.setFeature(entry.getKey(), entry.getValue());\n                    } catch (Exception ignore) {/**/}\n                }\n                reader.setEntityResolver(NOOP_ENTITY_RESOLVER);\n                return (T) new SAXSource(reader, new InputSource(value.getInputStream()));\n            } else if (sourceClass == StAXSource.class) {\n                XMLInputFactory xif = XMLInputFactory.newInstance();\n                xif.setProperty(XMLInputFactory.SUPPORT_DTD, false);\n                xif.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, \"\");\n                xif.setProperty(\"javax.xml.stream.isSupportingExternalEntities\", false);\n                return (T) new StAXSource(xif.createXMLStreamReader(value.getInputStream()));\n            } else if (sourceClass == StreamSource.class) {\n                TransformerFactory tf = TransformerFactory.newInstance();\n                tf.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, \"\");\n                tf.setAttribute(XMLConstants.ACCESS_EXTERNAL_STYLESHEET, \"\");\n                tf.setURIResolver(NOOP_URI_RESOLVER);\n                tf.newTransformer().transform(new StreamSource(value.getInputStream()), new SAXResult(new DefaultHandler()));\n                return (T) new StreamSource(value.getInputStream());\n            }\n            throw unsupported(sourceClass.getName());\n        } catch (Exception e) {\n            throw logAndConvert(e);\n        }\n    }",
  "abstract_func": "@SuppressWarnings(\"unchecked\")\n    @Override\n    public <T extends Source> T getSource(Class<T> VAR_0) throws SQLException {\n        try {\n            if (isDebugEnabled()) {\n                debugCode(\n                        \"getSource(\" + (VAR_0 != null ? VAR_0.getSimpleName() + \".class\" : \"null\") + ')');\n            }\n            checkReadable();\n            /* COMMENT_0 */\n            if (VAR_0 == null || VAR_0 == DOMSource.class) {\n                DocumentBuilderFactory VAR_1 = VAR_2.newInstance();\n                for (Map.Entry<String,Boolean> VAR_3 : VAR_4.entrySet()) {\n                    try {\n                        VAR_1.setFeature(VAR_3.getKey(), VAR_3.getValue());\n                    } catch (Exception VAR_5) {/* COMMENT_1 */}\n                }\n                VAR_1.setXIncludeAware(false);\n                VAR_1.setExpandEntityReferences(false);\n                VAR_1.setAttribute(VAR_6.ACCESS_EXTERNAL_SCHEMA, \"\");\n                DocumentBuilder VAR_7 = VAR_1.newDocumentBuilder();\n                VAR_7.setEntityResolver(VAR_8);\n                return (T) new DOMSource(VAR_7.parse(new InputSource(VAR_9.getInputStream())));\n            } else if (VAR_0 == SAXSource.class) {\n                XMLReader VAR_10 = VAR_11.createXMLReader();\n                for (Map.Entry<String,Boolean> VAR_3 : VAR_4.entrySet()) {\n                    try {\n                        VAR_10.setFeature(VAR_3.getKey(), VAR_3.getValue());\n                    } catch (Exception VAR_5) {/* COMMENT_1 */}\n                }\n                VAR_10.setEntityResolver(VAR_8);\n                return (T) new SAXSource(VAR_10, new InputSource(VAR_9.getInputStream()));\n            } else if (VAR_0 == StAXSource.class) {\n                XMLInputFactory VAR_12 = VAR_13.newInstance();\n                VAR_12.setProperty(VAR_13.SUPPORT_DTD, false);\n                VAR_12.setProperty(VAR_6.ACCESS_EXTERNAL_DTD, \"\");\n                VAR_12.setProperty(\"javax.xml.stream.isSupportingExternalEntities\", false);\n                return (T) new StAXSource(VAR_12.createXMLStreamReader(VAR_9.getInputStream()));\n            } else if (VAR_0 == StreamSource.class) {\n                TransformerFactory VAR_14 = VAR_15.newInstance();\n                VAR_14.setAttribute(VAR_6.ACCESS_EXTERNAL_DTD, \"\");\n                VAR_14.setAttribute(VAR_6.ACCESS_EXTERNAL_STYLESHEET, \"\");\n                VAR_14.setURIResolver(VAR_16);\n                VAR_14.newTransformer().transform(new StreamSource(VAR_9.getInputStream()), new SAXResult(new DefaultHandler()));\n                return (T) new StreamSource(VAR_9.getInputStream());\n            }\n            throw unsupported(VAR_0.getName());\n        } catch (Exception VAR_17) {\n            throw logAndConvert(VAR_17);\n        }\n    }",
  "func_graph_path": "h2database/d83285fd2e48fb075780ee95badee6f5a15ea7f8/JdbcSQLXML.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -7,15 +7,41 @@\n                         \"getSource(\" + (sourceClass != null ? sourceClass.getSimpleName() + \".class\" : \"null\") + ')');\n             }\n             checkReadable();\n+            // According to https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html\n             if (sourceClass == null || sourceClass == DOMSource.class) {\n                 DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n-                return (T) new DOMSource(dbf.newDocumentBuilder().parse(new InputSource(value.getInputStream())));\n+                for (Map.Entry<String,Boolean> entry : secureFeatureMap.entrySet()) {\n+                    try {\n+                        dbf.setFeature(entry.getKey(), entry.getValue());\n+                    } catch (Exception ignore) {/**/}\n+                }\n+                dbf.setXIncludeAware(false);\n+                dbf.setExpandEntityReferences(false);\n+                dbf.setAttribute(XMLConstants.ACCESS_EXTERNAL_SCHEMA, \"\");\n+                DocumentBuilder db = dbf.newDocumentBuilder();\n+                db.setEntityResolver(NOOP_ENTITY_RESOLVER);\n+                return (T) new DOMSource(db.parse(new InputSource(value.getInputStream())));\n             } else if (sourceClass == SAXSource.class) {\n-                return (T) new SAXSource(new InputSource(value.getInputStream()));\n+                XMLReader reader = XMLReaderFactory.createXMLReader();\n+                for (Map.Entry<String,Boolean> entry : secureFeatureMap.entrySet()) {\n+                    try {\n+                        reader.setFeature(entry.getKey(), entry.getValue());\n+                    } catch (Exception ignore) {/**/}\n+                }\n+                reader.setEntityResolver(NOOP_ENTITY_RESOLVER);\n+                return (T) new SAXSource(reader, new InputSource(value.getInputStream()));\n             } else if (sourceClass == StAXSource.class) {\n                 XMLInputFactory xif = XMLInputFactory.newInstance();\n+                xif.setProperty(XMLInputFactory.SUPPORT_DTD, false);\n+                xif.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, \"\");\n+                xif.setProperty(\"javax.xml.stream.isSupportingExternalEntities\", false);\n                 return (T) new StAXSource(xif.createXMLStreamReader(value.getInputStream()));\n             } else if (sourceClass == StreamSource.class) {\n+                TransformerFactory tf = TransformerFactory.newInstance();\n+                tf.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, \"\");\n+                tf.setAttribute(XMLConstants.ACCESS_EXTERNAL_STYLESHEET, \"\");\n+                tf.setURIResolver(NOOP_URI_RESOLVER);\n+                tf.newTransformer().transform(new StreamSource(value.getInputStream()), new SAXResult(new DefaultHandler()));\n                 return (T) new StreamSource(value.getInputStream());\n             }\n             throw unsupported(sourceClass.getName());",
  "diff_line_info": {
    "deleted_lines": [
      "                return (T) new DOMSource(dbf.newDocumentBuilder().parse(new InputSource(value.getInputStream())));",
      "                return (T) new SAXSource(new InputSource(value.getInputStream()));"
    ],
    "added_lines": [
      "            // According to https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html",
      "                for (Map.Entry<String,Boolean> entry : secureFeatureMap.entrySet()) {",
      "                    try {",
      "                        dbf.setFeature(entry.getKey(), entry.getValue());",
      "                    } catch (Exception ignore) {/**/}",
      "                }",
      "                dbf.setXIncludeAware(false);",
      "                dbf.setExpandEntityReferences(false);",
      "                dbf.setAttribute(XMLConstants.ACCESS_EXTERNAL_SCHEMA, \"\");",
      "                DocumentBuilder db = dbf.newDocumentBuilder();",
      "                db.setEntityResolver(NOOP_ENTITY_RESOLVER);",
      "                return (T) new DOMSource(db.parse(new InputSource(value.getInputStream())));",
      "                XMLReader reader = XMLReaderFactory.createXMLReader();",
      "                for (Map.Entry<String,Boolean> entry : secureFeatureMap.entrySet()) {",
      "                    try {",
      "                        reader.setFeature(entry.getKey(), entry.getValue());",
      "                    } catch (Exception ignore) {/**/}",
      "                }",
      "                reader.setEntityResolver(NOOP_ENTITY_RESOLVER);",
      "                return (T) new SAXSource(reader, new InputSource(value.getInputStream()));",
      "                xif.setProperty(XMLInputFactory.SUPPORT_DTD, false);",
      "                xif.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, \"\");",
      "                xif.setProperty(\"javax.xml.stream.isSupportingExternalEntities\", false);",
      "                TransformerFactory tf = TransformerFactory.newInstance();",
      "                tf.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, \"\");",
      "                tf.setAttribute(XMLConstants.ACCESS_EXTERNAL_STYLESHEET, \"\");",
      "                tf.setURIResolver(NOOP_URI_RESOLVER);",
      "                tf.newTransformer().transform(new StreamSource(value.getInputStream()), new SAXResult(new DefaultHandler()));"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/h2database/h2database/pull/3199",
  "description": {
    "pr_info": {
      "title": "Fix for #3195 CQLXML XXE vulnerability",
      "number": 3199
    },
    "comment": [
      "Here is the fix #3195 , but I have no idea as to when it might be released. :disappointed: ",
      "Hey @andreitokar looks like over two years since a release :O \r\n\r\nAnything that could be done to get this published?",
      "Can this security vulnerability fix be patched to the previous release as well?",
      "Same need here, please",
      "In researching this vulnerability, I found that the JdbcResultSet.getSQLXML() method is unsupported in all versions of H2 prior to 1.4.198.  It appears that this only effects version 1.4.198 to 2.0.201, can we get the vulnerability updated so that it doesn't show that this effects older versions of H2?",
      "You probably need to ask the person who posted this vulnerability.",
      "The [CVE-2021-23463](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-23463) references this github page, I am not sure who reported or \"confirmed\" that it effected all previous versions of H2, but it is incorrect.  I don't have access to the CVE page to make adjustments and I don't know who would.\r\n\r\nMaven uses the CVE report to tag builds with vulnerabilities, and so all of the maven builds are miss-tags [on this page](https://mvnrepository.com/artifact/com.h2database/h2). ",
      "You'd have to contact MITRE, they are the only ones who can update those entries. The person who requested the CVE likely said \"all versions\" which is very common to see in researcher and vendor disclosures, even if all versions were not tested.",
      "Only 1.4.198, 1.4.199, and 1.4.200 are affected. (There is no version with build id 201.)\r\n\r\nThis vulnerability can only affect application when it calls one of these methods to read values from untrusted sources. If application doesn't call them (most applications don't call them), it is safe. If application calls them, but all XML values were generated by this application and they can't contain references to external pages, it is still safe.",
      "@andreitokar can this be backported to 1.4? Once we have a 1.4.201 release we can have Snyk and NIST adjust the CVE (did this before).",
      "See https://github.com/h2database/h2database/issues/3195#issuecomment-998525068 and related conversation"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 1.0"
}