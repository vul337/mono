{
  "cve_id": "CVE-2022-38668",
  "cwe_ids": [
    "CWE-908"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
  "cvss_is_v3": true,
  "repo_name": "CrowCpp/Crow",
  "commit_msg": "Fix stack data disclosure when returning static files smaller than\n16KiB. It could also cause to return partially incorrect file ending in\ncase of file not being rounded up to 16KiB.\n\nThanks to Gynvael Coldwind and hebi for discovering and preparing\nreport.",
  "commit_hash": "d17a88af696b9de62504adf2a4657d381733b9e2",
  "git_url": "https://github.com/CrowCpp/Crow/commit/d17a88af696b9de62504adf2a4657d381733b9e2",
  "file_path": "include/crow/http_connection.h",
  "func_name": "do_write_static",
  "func_before": "void do_write_static()\n        {\n            is_writing = true;\n            asio::write(adaptor_.socket(), buffers_);\n\n            if (res.file_info.statResult == 0)\n            {\n                std::ifstream is(res.file_info.path.c_str(), std::ios::in | std::ios::binary);\n                char buf[16384];\n                while (is.read(buf, sizeof(buf)).gcount() > 0)\n                {\n                    std::vector<asio::const_buffer> buffers;\n                    buffers.push_back(asio::buffer(buf));\n                    do_write_sync(buffers);\n                }\n            }\n            is_writing = false;\n            if (close_connection_)\n            {\n                adaptor_.shutdown_readwrite();\n                adaptor_.close();\n                CROW_LOG_DEBUG << this << \" from write (static)\";\n                check_destroy();\n            }\n\n            res.end();\n            res.clear();\n            buffers_.clear();\n        }",
  "abstract_func_before": "void do_write_static()\n        {\n            VAR_0 = true;\n            asio::write(VAR_1.socket(), VAR_2);\n\n            if (VAR_3.file_info.statResult == 0)\n            {\n                std::ifstream VAR_4(VAR_3.file_info.path.c_str(), std::ios::in | std::ios::binary);\n                char VAR_5[16384];\n                while (VAR_4.read(VAR_5, sizeof(VAR_5)).gcount() > 0)\n                {\n                    std::vector<asio::const_buffer> VAR_6;\n                    VAR_6.push_back(asio::buffer(VAR_5));\n                    do_write_sync(VAR_6);\n                }\n            }\n            VAR_0 = false;\n            if (VAR_7)\n            {\n                VAR_1.shutdown_readwrite();\n                VAR_1.close();\n                VAR_8 << this << \" from write (static)\";\n                check_destroy();\n            }\n\n            VAR_3.end();\n            VAR_3.clear();\n            VAR_2.clear();\n        }",
  "func_graph_path_before": "CrowCpp/Crow/d17a88af696b9de62504adf2a4657d381733b9e2/http_connection.h/vul/before/0.json",
  "func": "void do_write_static()\n        {\n            is_writing = true;\n            asio::write(adaptor_.socket(), buffers_);\n\n            if (res.file_info.statResult == 0)\n            {\n                std::ifstream is(res.file_info.path.c_str(), std::ios::in | std::ios::binary);\n                std::vector<asio::const_buffer> buffers{1};\n                char buf[16384];\n                is.read(buf, sizeof(buf));\n                while (is.gcount() > 0)\n                {\n                    buffers[0] = asio::buffer(buf, is.gcount());\n                    do_write_sync(buffers);\n                    is.read(buf, sizeof(buf));\n                }\n            }\n            is_writing = false;\n            if (close_connection_)\n            {\n                adaptor_.shutdown_readwrite();\n                adaptor_.close();\n                CROW_LOG_DEBUG << this << \" from write (static)\";\n                check_destroy();\n            }\n\n            res.end();\n            res.clear();\n            buffers_.clear();\n        }",
  "abstract_func": "void do_write_static()\n        {\n            VAR_0 = true;\n            asio::write(VAR_1.socket(), VAR_2);\n\n            if (VAR_3.file_info.statResult == 0)\n            {\n                std::ifstream VAR_4(VAR_3.file_info.path.c_str(), std::ios::in | std::ios::binary);\n                std::vector<asio::const_buffer> VAR_5{1};\n                char VAR_6[16384];\n                VAR_4.read(VAR_6, sizeof(VAR_6));\n                while (VAR_4.gcount() > 0)\n                {\n                    VAR_5[0] = asio::buffer(VAR_6, VAR_4.gcount());\n                    do_write_sync(VAR_5);\n                    VAR_4.read(VAR_6, sizeof(VAR_6));\n                }\n            }\n            VAR_0 = false;\n            if (VAR_7)\n            {\n                VAR_1.shutdown_readwrite();\n                VAR_1.close();\n                VAR_8 << this << \" from write (static)\";\n                check_destroy();\n            }\n\n            VAR_3.end();\n            VAR_3.clear();\n            VAR_2.clear();\n        }",
  "func_graph_path": "CrowCpp/Crow/d17a88af696b9de62504adf2a4657d381733b9e2/http_connection.h/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -6,12 +6,14 @@\n             if (res.file_info.statResult == 0)\n             {\n                 std::ifstream is(res.file_info.path.c_str(), std::ios::in | std::ios::binary);\n+                std::vector<asio::const_buffer> buffers{1};\n                 char buf[16384];\n-                while (is.read(buf, sizeof(buf)).gcount() > 0)\n+                is.read(buf, sizeof(buf));\n+                while (is.gcount() > 0)\n                 {\n-                    std::vector<asio::const_buffer> buffers;\n-                    buffers.push_back(asio::buffer(buf));\n+                    buffers[0] = asio::buffer(buf, is.gcount());\n                     do_write_sync(buffers);\n+                    is.read(buf, sizeof(buf));\n                 }\n             }\n             is_writing = false;",
  "diff_line_info": {
    "deleted_lines": [
      "                while (is.read(buf, sizeof(buf)).gcount() > 0)",
      "                    std::vector<asio::const_buffer> buffers;",
      "                    buffers.push_back(asio::buffer(buf));"
    ],
    "added_lines": [
      "                std::vector<asio::const_buffer> buffers{1};",
      "                is.read(buf, sizeof(buf));",
      "                while (is.gcount() > 0)",
      "                    buffers[0] = asio::buffer(buf, is.gcount());",
      "                    is.read(buf, sizeof(buf));"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/CrowCpp/Crow/pull/523",
  "description": {
    "pr_info": {
      "title": "Fix stack data disclosure when returning static files smaller than 16KiB",
      "number": 523
    },
    "comment": [
      "It could also cause to return partially incorrect file ending in\r\ncase of file not being rounded up to 16KiB.\r\n\r\nThanks to Gynvael Coldwind and hebi for discovering and preparing\r\nreport.",
      "Is there a reason that the `buffers` vector is inside the loop?",
      "It was already implemented like this. It looks like `asio::write` expects vector of buffers. Also it looks like `asio::buffer` doesn't own memory (https://think-async.com/Asio/asio-1.22.1/doc/asio/reference/buffer.html#asio.reference.buffer.buffer_invalidation), so we have to:\r\n\r\n- send it buffers vector immediately with only one buffer and then use existing array to load next part of a file (current solution)\r\n\r\n- copy memory from array (or maybe load data directly to `asio::buffer`) with use of (I guess) `asio::buffer_copy` (https://think-async.com/Asio/asio-1.22.1/doc/asio/reference/buffer_copy.html)",
      "I'll leave it till tomorrow and then merge. Thanks!",
      "The vector with size 1 could be constructed outside the loop. And then the asio::buffer would be assigned to the first element in the vector inside the loop. Imo. No copy needed and we would save construction/destruction of a vector in a loop (probably alloc/dealloc)",
      "Good point. I didn't want to change anything not connected directly with error, but maybe postponing it is a worse idea :P",
      "```diff\n--- include/crow/http_connection.h\t(before formatting)\n+++ include/crow/http_connection.h\t(after formatting)\n@@ -389,7 +389,7 @@\n             if (res.file_info.statResult == 0)\n             {\n                 std::ifstream is(res.file_info.path.c_str(), std::ios::in | std::ios::binary);\n-                std::vector<asio::const_buffer> buffers {1};\n+                std::vector<asio::const_buffer> buffers{1};\n                 char buf[16384];\n                 is.read(buf, sizeof(buf));\n                 while (is.gcount() > 0)\n```"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 0.95"
}