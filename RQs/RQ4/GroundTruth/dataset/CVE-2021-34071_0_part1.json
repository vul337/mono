{
  "cve_id": "CVE-2021-34071",
  "cwe_ids": [
    "CWE-787"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "justdan96/tsMuxer",
  "commit_msg": "[bug] heap buffer overflow when last byte of SEI = 0xFF (#425)\n\nFixes #423\r\nFixes #427\r\nFixes #430\r\nFixes #433",
  "commit_hash": "ea879f3b915baa4f9d145ce44229f7b3b1952c30",
  "git_url": "https://github.com/justdan96/tsMuxer/commit/ea879f3b915baa4f9d145ce44229f7b3b1952c30",
  "file_path": "tsMuxer/nalUnits.cpp",
  "func_name": "SEIUnit::isMVCSEI",
  "func_before": "int SEIUnit::isMVCSEI()\n{\n    pic_struct = -1;\n\n    uint8_t* nalEnd = m_nalBuffer + m_nalBufferLen;\n    try\n    {\n        int rez = NALUnit::deserialize(m_nalBuffer, nalEnd);\n        if (rez != 0)\n            return NOT_ENOUGH_BUFFER;\n        uint8_t* curBuff = m_nalBuffer + 1;\n        while (curBuff < nalEnd - 1)\n        {\n            int payloadType = 0;\n            for (; *curBuff == 0xFF && curBuff < nalEnd; curBuff++) payloadType += 0xFF;\n            if (curBuff >= nalEnd)\n                return NOT_ENOUGH_BUFFER;\n            payloadType += *curBuff++;\n            if (curBuff >= nalEnd)\n                return NOT_ENOUGH_BUFFER;\n\n            int payloadSize = 0;\n            for (; *curBuff == 0xFF && curBuff < nalEnd; curBuff++) payloadSize += 0xFF;\n            if (curBuff >= nalEnd)\n                return NOT_ENOUGH_BUFFER;\n            payloadSize += *curBuff++;\n            if (curBuff >= nalEnd)\n                return NOT_ENOUGH_BUFFER;\n            if (payloadType == 37)\n                return 1;  // mvc scalable nesting message\n            curBuff += payloadSize;\n        }\n    }\n    catch (BitStreamException)\n    {\n        ;\n    }\n    return 0;\n}",
  "abstract_func_before": "int SEIUnit::isMVCSEI()\n{\n    VAR_0 = -1;\n\n    uint8_t* VAR_1 = VAR_2 + VAR_3;\n    try\n    {\n        int VAR_4 = NALUnit::deserialize(VAR_2, VAR_1);\n        if (VAR_4 != 0)\n            return VAR_5;\n        uint8_t* VAR_6 = VAR_2 + 1;\n        while (VAR_6 < VAR_1 - 1)\n        {\n            int VAR_7 = 0;\n            for (; *VAR_6 == 0xFF && VAR_6 < VAR_1; VAR_6++) VAR_7 += 0xFF;\n            if (VAR_6 >= VAR_1)\n                return VAR_5;\n            VAR_7 += *VAR_6++;\n            if (VAR_6 >= VAR_1)\n                return VAR_5;\n\n            int VAR_8 = 0;\n            for (; *VAR_6 == 0xFF && VAR_6 < VAR_1; VAR_6++) VAR_8 += 0xFF;\n            if (VAR_6 >= VAR_1)\n                return VAR_5;\n            VAR_8 += *VAR_6++;\n            if (VAR_6 >= VAR_1)\n                return VAR_5;\n            if (VAR_7 == 37)\n                return 1;  /* COMMENT_0 */\n            VAR_6 += VAR_8;\n        }\n    }\n    catch (BitStreamException)\n    {\n        ;\n    }\n    return 0;\n}",
  "func_graph_path_before": "justdan96/tsMuxer/ea879f3b915baa4f9d145ce44229f7b3b1952c30/nalUnits.cpp/vul/before/1.json",
  "func": "int SEIUnit::isMVCSEI()\n{\n    pic_struct = -1;\n\n    uint8_t* nalEnd = m_nalBuffer + m_nalBufferLen;\n    try\n    {\n        int rez = NALUnit::deserialize(m_nalBuffer, nalEnd);\n        if (rez != 0)\n            return NOT_ENOUGH_BUFFER;\n        uint8_t* curBuff = m_nalBuffer + 1;\n        while (curBuff < nalEnd - 1)\n        {\n            int payloadType = 0;\n            for (; curBuff < nalEnd && *curBuff == 0xFF; curBuff++) payloadType += 0xFF;\n            if (curBuff >= nalEnd)\n                return NOT_ENOUGH_BUFFER;\n            payloadType += *curBuff++;\n            if (curBuff >= nalEnd)\n                return NOT_ENOUGH_BUFFER;\n\n            int payloadSize = 0;\n            for (; curBuff < nalEnd && *curBuff == 0xFF; curBuff++) payloadSize += 0xFF;\n            if (curBuff >= nalEnd)\n                return NOT_ENOUGH_BUFFER;\n            payloadSize += *curBuff++;\n            if (curBuff >= nalEnd)\n                return NOT_ENOUGH_BUFFER;\n            if (payloadType == 37)\n                return 1;  // mvc scalable nesting message\n            curBuff += payloadSize;\n        }\n    }\n    catch (BitStreamException)\n    {\n        ;\n    }\n    return 0;\n}",
  "abstract_func": "int SEIUnit::isMVCSEI()\n{\n    VAR_0 = -1;\n\n    uint8_t* VAR_1 = VAR_2 + VAR_3;\n    try\n    {\n        int VAR_4 = NALUnit::deserialize(VAR_2, VAR_1);\n        if (VAR_4 != 0)\n            return VAR_5;\n        uint8_t* VAR_6 = VAR_2 + 1;\n        while (VAR_6 < VAR_1 - 1)\n        {\n            int VAR_7 = 0;\n            for (; VAR_6 < VAR_1 && *VAR_6 == 0xFF; VAR_6++) VAR_7 += 0xFF;\n            if (VAR_6 >= VAR_1)\n                return VAR_5;\n            VAR_7 += *VAR_6++;\n            if (VAR_6 >= VAR_1)\n                return VAR_5;\n\n            int VAR_8 = 0;\n            for (; VAR_6 < VAR_1 && *VAR_6 == 0xFF; VAR_6++) VAR_8 += 0xFF;\n            if (VAR_6 >= VAR_1)\n                return VAR_5;\n            VAR_8 += *VAR_6++;\n            if (VAR_6 >= VAR_1)\n                return VAR_5;\n            if (VAR_7 == 37)\n                return 1;  /* COMMENT_0 */\n            VAR_6 += VAR_8;\n        }\n    }\n    catch (BitStreamException)\n    {\n        ;\n    }\n    return 0;\n}",
  "func_graph_path": "justdan96/tsMuxer/ea879f3b915baa4f9d145ce44229f7b3b1952c30/nalUnits.cpp/vul/after/1.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -12,7 +12,7 @@\n         while (curBuff < nalEnd - 1)\n         {\n             int payloadType = 0;\n-            for (; *curBuff == 0xFF && curBuff < nalEnd; curBuff++) payloadType += 0xFF;\n+            for (; curBuff < nalEnd && *curBuff == 0xFF; curBuff++) payloadType += 0xFF;\n             if (curBuff >= nalEnd)\n                 return NOT_ENOUGH_BUFFER;\n             payloadType += *curBuff++;\n@@ -20,7 +20,7 @@\n                 return NOT_ENOUGH_BUFFER;\n \n             int payloadSize = 0;\n-            for (; *curBuff == 0xFF && curBuff < nalEnd; curBuff++) payloadSize += 0xFF;\n+            for (; curBuff < nalEnd && *curBuff == 0xFF; curBuff++) payloadSize += 0xFF;\n             if (curBuff >= nalEnd)\n                 return NOT_ENOUGH_BUFFER;\n             payloadSize += *curBuff++;",
  "diff_line_info": {
    "deleted_lines": [
      "            for (; *curBuff == 0xFF && curBuff < nalEnd; curBuff++) payloadType += 0xFF;",
      "            for (; *curBuff == 0xFF && curBuff < nalEnd; curBuff++) payloadSize += 0xFF;"
    ],
    "added_lines": [
      "            for (; curBuff < nalEnd && *curBuff == 0xFF; curBuff++) payloadType += 0xFF;",
      "            for (; curBuff < nalEnd && *curBuff == 0xFF; curBuff++) payloadSize += 0xFF;"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/justdan96/tsMuxer/pull/425",
  "description": {
    "pr_info": {
      "title": "[bug] heap buffer overflow when last byte of SEI = 0xFF",
      "number": 425
    },
    "comment": [
      "In the for loop, checking that `curBuff < nalEnd` must occur before checking that `*curBuff == 0xFF`\r\n\r\nFixes issues #423, #427, #430 and #433."
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "The patch addresses a buffer overflow issue, which is a security vulnerability. The code changes ensure correct buffer access, preventing overflow.\n\n**Final Classification:** Security Vulnerability Fix;  \n**Confidence:** 1.0"
}