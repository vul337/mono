{
  "cve_id": "CVE-2023-4043",
  "cwe_ids": [
    "CWE-834"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
  "cvss_is_v3": true,
  "repo_name": "eclipse-ee4j/parsson",
  "commit_msg": "BigInteger scale limit counts absolute value now.\n\nSigned-off-by: Tomáš Kraus <tomas.kraus@oracle.com>",
  "commit_hash": "85fe45ca2da6d7b79ec03014c928075bca01e588",
  "git_url": "https://github.com/eclipse-ee4j/parsson/commit/85fe45ca2da6d7b79ec03014c928075bca01e588",
  "file_path": "impl/src/main/java/org/eclipse/parsson/JsonNumberImpl.java",
  "func_name": "bigIntegerValue",
  "func_before": "@Override\n    public BigInteger bigIntegerValue() {\n        BigDecimal bd = bigDecimalValue();\n        if (bd.scale() <= bigIntegerScaleLimit) {\n            return bd.toBigInteger();\n        }\n        throw new UnsupportedOperationException(\n                String.format(\n                        \"Scale value %d of this BigInteger exceeded maximal allowed value of %d\",\n                        bd.scale(), bigIntegerScaleLimit));\n    }",
  "abstract_func_before": "@Override\n    public BigInteger bigIntegerValue() {\n        BigDecimal VAR_0 = bigDecimalValue();\n        if (VAR_0.scale() <= VAR_1) {\n            return VAR_0.toBigInteger();\n        }\n        throw new UnsupportedOperationException(\n                VAR_2.format(\n                        \"Scale value %d of this BigInteger exceeded maximal allowed value of %d\",\n                        VAR_0.scale(), VAR_1));\n    }",
  "func_graph_path_before": "eclipse-ee4j/parsson/85fe45ca2da6d7b79ec03014c928075bca01e588/JsonNumberImpl.java/vul/before/1.json",
  "func": "@Override\n    public BigInteger bigIntegerValue() {\n        BigDecimal bd = bigDecimalValue();\n        if (Math.abs(bd.scale()) <= bigIntegerScaleLimit) {\n            return bd.toBigInteger();\n        }\n        throw new UnsupportedOperationException(\n                String.format(SCALE_LIMIT_EXCEPTION_MESSAGE, bd.scale(), bigIntegerScaleLimit));\n    }",
  "abstract_func": "@Override\n    public BigInteger bigIntegerValue() {\n        BigDecimal VAR_0 = bigDecimalValue();\n        if (VAR_1.abs(VAR_0.scale()) <= VAR_2) {\n            return VAR_0.toBigInteger();\n        }\n        throw new UnsupportedOperationException(\n                VAR_3.format(VAR_4, VAR_0.scale(), VAR_2));\n    }",
  "func_graph_path": "eclipse-ee4j/parsson/85fe45ca2da6d7b79ec03014c928075bca01e588/JsonNumberImpl.java/vul/after/1.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,11 +1,9 @@\n @Override\n     public BigInteger bigIntegerValue() {\n         BigDecimal bd = bigDecimalValue();\n-        if (bd.scale() <= bigIntegerScaleLimit) {\n+        if (Math.abs(bd.scale()) <= bigIntegerScaleLimit) {\n             return bd.toBigInteger();\n         }\n         throw new UnsupportedOperationException(\n-                String.format(\n-                        \"Scale value %d of this BigInteger exceeded maximal allowed value of %d\",\n-                        bd.scale(), bigIntegerScaleLimit));\n+                String.format(SCALE_LIMIT_EXCEPTION_MESSAGE, bd.scale(), bigIntegerScaleLimit));\n     }",
  "diff_line_info": {
    "deleted_lines": [
      "        if (bd.scale() <= bigIntegerScaleLimit) {",
      "                String.format(",
      "                        \"Scale value %d of this BigInteger exceeded maximal allowed value of %d\",",
      "                        bd.scale(), bigIntegerScaleLimit));"
    ],
    "added_lines": [
      "        if (Math.abs(bd.scale()) <= bigIntegerScaleLimit) {",
      "                String.format(SCALE_LIMIT_EXCEPTION_MESSAGE, bd.scale(), bigIntegerScaleLimit));"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/eclipse-ee4j/parsson/pull/100",
  "description": {
    "pr_info": {
      "title": "BigInteger scale limit counts absolute value now.",
      "number": 100
    },
    "comment": [
      "Changed contition to count `Math.abs(bd.scale())`\r\nAdded tests with negative scale values."
    ]
  },
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.8,
  "Bug Filter Response": "**Final Classification:** Defect Remediation & Feature Upgrades  \n**Confidence:** 0.8\n\nThe patch addresses a bug in handling negative scale values for BigInteger, which is a non-security defect fix. The confidence is high as the changes align with the commit message and description, but there's no explicit security context."
}