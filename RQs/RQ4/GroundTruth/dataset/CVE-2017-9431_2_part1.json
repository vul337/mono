{
  "cve_id": "CVE-2017-9431",
  "cwe_ids": [
    "CWE-787"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "grpc",
  "commit_msg": "Fix error overflow bug",
  "commit_hash": "c6ec1155d026c91b1badb07ef1605bb747cff064",
  "git_url": "https://github.com/grpc/grpc/commit/c6ec1155d026c91b1badb07ef1605bb747cff064",
  "file_path": "src/core/lib/iomgr/error.c",
  "func_name": "internal_set_int",
  "func_before": "static void internal_set_int(grpc_error **err, grpc_error_ints which,\n                             intptr_t value) {\n  // GPR_ASSERT((*err)->ints[which] == UINT8_MAX); // TODO, enforce this\n  uint8_t slot = (*err)->ints[which];\n  if (slot == UINT8_MAX) {\n    slot = get_placement(err, sizeof(value));\n  }\n  (*err)->ints[which] = slot;\n  (*err)->arena[slot] = value;\n}",
  "abstract_func_before": "static void internal_set_int(grpc_error **VAR_0, grpc_error_ints VAR_1,\n                             intptr_t VAR_2) {\n  /* COMMENT_0 */\n  uint8_t VAR_3 = (*VAR_0)->ints[VAR_1];\n  if (VAR_3 == VAR_4) {\n    VAR_3 = get_placement(VAR_0, sizeof(VAR_2));\n  }\n  (*VAR_0)->ints[VAR_1] = VAR_3;\n  (*VAR_0)->arena[VAR_3] = VAR_2;\n}",
  "func_graph_path_before": "grpc/c6ec1155d026c91b1badb07ef1605bb747cff064/error.c/vul/before/3.json",
  "func": "static void internal_set_int(grpc_error **err, grpc_error_ints which,\n                             intptr_t value) {\n  uint8_t slot = (*err)->ints[which];\n  if (slot == UINT8_MAX) {\n    slot = get_placement(err, sizeof(value));\n    if (slot == UINT8_MAX) {\n      gpr_log(GPR_ERROR, \"Error %p is full, dropping int {\\\"%s\\\":%\" PRIiPTR \"}\", *err,\n              error_int_name(which), value);\n      return;\n    }\n  }\n  (*err)->ints[which] = slot;\n  (*err)->arena[slot] = value;\n}",
  "abstract_func": "static void internal_set_int(grpc_error **VAR_0, grpc_error_ints VAR_1,\n                             intptr_t VAR_2) {\n  uint8_t VAR_3 = (*VAR_0)->ints[VAR_1];\n  if (VAR_3 == VAR_4) {\n    VAR_3 = get_placement(VAR_0, sizeof(VAR_2));\n    if (VAR_3 == VAR_4) {\n      gpr_log(VAR_5, \"Error %p is full, dropping int {\\\"%s\\\":%\" VAR_6 \"}\", *VAR_0,\n              error_int_name(VAR_1), VAR_2);\n      return;\n    }\n  }\n  (*VAR_0)->ints[VAR_1] = VAR_3;\n  (*VAR_0)->arena[VAR_3] = VAR_2;\n}",
  "func_graph_path": "grpc/c6ec1155d026c91b1badb07ef1605bb747cff064/error.c/vul/after/3.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,9 +1,13 @@\n static void internal_set_int(grpc_error **err, grpc_error_ints which,\n                              intptr_t value) {\n-  // GPR_ASSERT((*err)->ints[which] == UINT8_MAX); // TODO, enforce this\n   uint8_t slot = (*err)->ints[which];\n   if (slot == UINT8_MAX) {\n     slot = get_placement(err, sizeof(value));\n+    if (slot == UINT8_MAX) {\n+      gpr_log(GPR_ERROR, \"Error %p is full, dropping int {\\\"%s\\\":%\" PRIiPTR \"}\", *err,\n+              error_int_name(which), value);\n+      return;\n+    }\n   }\n   (*err)->ints[which] = slot;\n   (*err)->arena[slot] = value;",
  "diff_line_info": {
    "deleted_lines": [
      "  // GPR_ASSERT((*err)->ints[which] == UINT8_MAX); // TODO, enforce this"
    ],
    "added_lines": [
      "    if (slot == UINT8_MAX) {",
      "      gpr_log(GPR_ERROR, \"Error %p is full, dropping int {\\\"%s\\\":%\" PRIiPTR \"}\", *err,",
      "              error_int_name(which), value);",
      "      return;",
      "    }"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/grpc/grpc/pull/10492",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/grpc/grpc/pull/10492: 403 Client Error: Forbidden for url: https://api.github.com/repos/grpc/grpc/pulls/10492",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 0.9"
}