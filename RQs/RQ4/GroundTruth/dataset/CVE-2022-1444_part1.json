{
  "cve_id": "CVE-2022-1444",
  "cwe_ids": [
    "CWE-416"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "radareorg/radare2",
  "commit_msg": "Redo minor cleanup in new_rbtree",
  "commit_hash": "14189710859c27981adb4c2c2aed2863c1859ec5",
  "git_url": "https://github.com/radareorg/radare2/commit/14189710859c27981adb4c2c2aed2863c1859ec5",
  "file_path": "libr/util/new_rbtree.c",
  "func_name": "r_crbtree_insert",
  "func_before": "R_API bool r_crbtree_insert(RRBTree *tree, void *data, RRBComparator cmp, void *user) {\n\tr_return_val_if_fail (tree && data && cmp, false);\n\tbool inserted = false;\n\n\tif (tree->root == NULL) {\n\t\ttree->root = _node_new (data, NULL);\n\t\tif (tree->root == NULL) {\n\t\t\treturn false;\n\t\t}\n\t\tinserted = true;\n\t\tgoto out_exit;\n\t}\n\n\tRRBNode head; /* Fake tree root */\n\tmemset (&head, 0, sizeof (RRBNode));\n\tRRBNode *g = NULL, *parent = &head; /* Grandparent & parent */\n\tRRBNode *p = NULL, *q = tree->root; /* Iterator & parent */\n\tint dir = 0, last = 0; /* Directions */\n\n\t_set_link (parent, q, 1);\n\n\tfor (;;) {\n\t\tif (!q) {\n\t\t\t/* Insert a node at first null link(also set its parent link) */\n\t\t\tq = _node_new (data, p);\n\t\t\tif (!q) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tp->link[dir] = q;\n\t\t\tinserted = true;\n\t\t} else if (IS_RED (q->link[0]) && IS_RED (q->link[1])) {\n\t\t\t/* Simple red violation: color flip */\n\t\t\tq->red = 1;\n\t\t\tq->link[0]->red = 0;\n\t\t\tq->link[1]->red = 0;\n\t\t}\n\n\t\tif (IS_RED (q) && IS_RED (p)) {\n#if 0\n\t\t\t// coverity error, parent is never null\n\t\t\t/* Hard red violation: rotate */\n\t\t\tif (!parent) {\n\t\t\t\treturn false;\n\t\t\t}\n#endif\n\t\t\tint dir2 = parent->link[1] == g;\n\t\t\tif (q == p->link[last]) {\n\t\t\t\t_set_link (parent, _rot_once (g, !last), dir2);\n\t\t\t} else {\n\t\t\t\t_set_link (parent, _rot_twice (g, !last), dir2);\n\t\t\t}\n\t\t}\n\n\t\tif (inserted) {\n\t\t\tbreak;\n\t\t}\n\n\t\tlast = dir;\n\t\tdir = cmp (data, q->data, user) >= 0;\n\n\t\tif (g) {\n\t\t\tparent = g;\n\t\t}\n\n\t\tg = p;\n\t\tp = q;\n\t\tq = q->link[dir];\n\t}\n\n\t/* Update root(it may different due to root rotation) */\n\ttree->root = head.link[1];\n\nout_exit:\n\t/* Invariant: root is black */\n\ttree->root->red = 0;\n\ttree->root->parent = NULL;\n\tif (inserted) {\n\t\ttree->size++;\n\t}\n\n\treturn inserted;\n}",
  "abstract_func_before": "R_API bool r_crbtree_insert(RRBTree *VAR_0, void *VAR_1, RRBComparator VAR_2, void *VAR_3) {\n\tr_return_val_if_fail (VAR_0 && VAR_1 && VAR_2, false);\n\tbool VAR_4 = false;\n\n\tif (VAR_0->root == NULL) {\n\t\tVAR_0->root = _node_new (VAR_1, NULL);\n\t\tif (VAR_0->root == NULL) {\n\t\t\treturn false;\n\t\t}\n\t\tVAR_4 = true;\n\t\tgoto out_exit;\n\t}\n\n\tRRBNode VAR_5; /* COMMENT_0 */\n\tmemset (&VAR_5, 0, sizeof (RRBNode));\n\tRRBNode *VAR_6 = NULL, *VAR_7 = &VAR_5; /* COMMENT_1 */\n\tRRBNode *VAR_8 = NULL, *VAR_9 = VAR_0->root; /* COMMENT_2 */\n\tint VAR_10 = 0, VAR_11 = 0; /* COMMENT_3 */\n\n\t_set_link (VAR_7, VAR_9, 1);\n\n\tfor (;;) {\n\t\tif (!VAR_9) {\n\t\t\t/* COMMENT_4 */\n\t\t\tVAR_9 = _node_new (VAR_1, VAR_8);\n\t\t\tif (!VAR_9) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tVAR_8->link[VAR_10] = VAR_9;\n\t\t\tVAR_4 = true;\n\t\t} else if (IS_RED (VAR_9->link[0]) && IS_RED (VAR_9->link[1])) {\n\t\t\t/* COMMENT_5 */\n\t\t\tVAR_9->red = 1;\n\t\t\tVAR_9->link[0]->red = 0;\n\t\t\tVAR_9->link[1]->red = 0;\n\t\t}\n\n\t\tif (IS_RED (VAR_9) && IS_RED (VAR_8)) {\n#if 0\n\t\t\t/* COMMENT_6 */\n\t\t\t/* COMMENT_7 */\n\t\t\tif (!VAR_7) {\n\t\t\t\treturn false;\n\t\t\t}\n#endif\n\t\t\tint VAR_12 = VAR_7->link[1] == VAR_6;\n\t\t\tif (VAR_9 == VAR_8->link[VAR_11]) {\n\t\t\t\t_set_link (VAR_7, _rot_once (VAR_6, !VAR_11), VAR_12);\n\t\t\t} else {\n\t\t\t\t_set_link (VAR_7, _rot_twice (VAR_6, !VAR_11), VAR_12);\n\t\t\t}\n\t\t}\n\n\t\tif (VAR_4) {\n\t\t\tbreak;\n\t\t}\n\n\t\tVAR_11 = VAR_10;\n\t\tVAR_10 = VAR_2 (VAR_1, VAR_9->data, VAR_3) >= 0;\n\n\t\tif (VAR_6) {\n\t\t\tVAR_7 = VAR_6;\n\t\t}\n\n\t\tVAR_6 = VAR_8;\n\t\tVAR_8 = VAR_9;\n\t\tVAR_9 = VAR_9->link[VAR_10];\n\t}\n\n\t/* COMMENT_8 */\n\tVAR_0->root = VAR_5.link[1];\n\nout_exit:\n\t/* COMMENT_9 */\n\tVAR_0->root->red = 0;\n\tVAR_0->root->parent = NULL;\n\tif (VAR_4) {\n\t\tVAR_0->size++;\n\t}\n\n\treturn VAR_4;\n}",
  "func_graph_path_before": null,
  "func": "R_API bool r_crbtree_insert(RRBTree *tree, void *data, RRBComparator cmp, void *user) {\n\tr_return_val_if_fail (tree && data && cmp, false);\n\tbool inserted = false;\n\n\tif (!tree->root) {\n\t\ttree->root = _node_new (data, NULL);\n\t\tif (!tree->root) {\n\t\t\treturn false;\n\t\t}\n\t\tinserted = true;\n\t\tgoto out_exit;\n\t}\n\n\tRRBNode head; /* Fake tree root */\n\tmemset (&head, 0, sizeof (RRBNode));\n\tRRBNode *g = NULL, *parent = &head; /* Grandparent & parent */\n\tRRBNode *p = NULL, *q = tree->root; /* Iterator & parent */\n\tint dir = 0, last = 0; /* Directions */\n\n\t_set_link (parent, q, 1);\n\n\tfor (;;) {\n\t\tif (!q) {\n\t\t\t/* Insert a node at first null link(also set its parent link) */\n\t\t\tq = _node_new (data, p);\n\t\t\tif (!q) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tp->link[dir] = q;\n\t\t\tinserted = true;\n\t\t} else if (IS_RED (q->link[0]) && IS_RED (q->link[1])) {\n\t\t\t/* Simple red violation: color flip */\n\t\t\tq->red = 1;\n\t\t\tq->link[0]->red = 0;\n\t\t\tq->link[1]->red = 0;\n\t\t}\n\n\t\tif (IS_RED (q) && IS_RED (p)) {\n#if 0\n\t\t\t// coverity error, parent is never null\n\t\t\t/* Hard red violation: rotate */\n\t\t\tif (!parent) {\n\t\t\t\treturn false;\n\t\t\t}\n#endif\n\t\t\tint dir2 = parent->link[1] == g;\n\t\t\tif (q == p->link[last]) {\n\t\t\t\t_set_link (parent, _rot_once (g, !last), dir2);\n\t\t\t} else {\n\t\t\t\t_set_link (parent, _rot_twice (g, !last), dir2);\n\t\t\t}\n\t\t}\n\n\t\tif (inserted) {\n\t\t\tbreak;\n\t\t}\n\n\t\tlast = dir;\n\t\tdir = cmp (data, q->data, user) >= 0;\n\n\t\tif (g) {\n\t\t\tparent = g;\n\t\t}\n\n\t\tg = p;\n\t\tp = q;\n\t\tq = q->link[dir];\n\t}\n\n\t/* Update root(it may different due to root rotation) */\n\ttree->root = head.link[1];\n\nout_exit:\n\t/* Invariant: root is black */\n\ttree->root->red = 0;\n\ttree->root->parent = NULL;\n\tif (inserted) {\n\t\ttree->size++;\n\t}\n\n\treturn inserted;\n}",
  "abstract_func": "R_API bool r_crbtree_insert(RRBTree *VAR_0, void *VAR_1, RRBComparator VAR_2, void *VAR_3) {\n\tr_return_val_if_fail (VAR_0 && VAR_1 && VAR_2, false);\n\tbool VAR_4 = false;\n\n\tif (!VAR_0->root) {\n\t\tVAR_0->root = _node_new (VAR_1, NULL);\n\t\tif (!VAR_0->root) {\n\t\t\treturn false;\n\t\t}\n\t\tVAR_4 = true;\n\t\tgoto out_exit;\n\t}\n\n\tRRBNode VAR_5; /* COMMENT_0 */\n\tmemset (&VAR_5, 0, sizeof (RRBNode));\n\tRRBNode *VAR_6 = NULL, *VAR_7 = &VAR_5; /* COMMENT_1 */\n\tRRBNode *VAR_8 = NULL, *VAR_9 = VAR_0->root; /* COMMENT_2 */\n\tint VAR_10 = 0, VAR_11 = 0; /* COMMENT_3 */\n\n\t_set_link (VAR_7, VAR_9, 1);\n\n\tfor (;;) {\n\t\tif (!VAR_9) {\n\t\t\t/* COMMENT_4 */\n\t\t\tVAR_9 = _node_new (VAR_1, VAR_8);\n\t\t\tif (!VAR_9) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tVAR_8->link[VAR_10] = VAR_9;\n\t\t\tVAR_4 = true;\n\t\t} else if (IS_RED (VAR_9->link[0]) && IS_RED (VAR_9->link[1])) {\n\t\t\t/* COMMENT_5 */\n\t\t\tVAR_9->red = 1;\n\t\t\tVAR_9->link[0]->red = 0;\n\t\t\tVAR_9->link[1]->red = 0;\n\t\t}\n\n\t\tif (IS_RED (VAR_9) && IS_RED (VAR_8)) {\n#if 0\n\t\t\t/* COMMENT_6 */\n\t\t\t/* COMMENT_7 */\n\t\t\tif (!VAR_7) {\n\t\t\t\treturn false;\n\t\t\t}\n#endif\n\t\t\tint VAR_12 = VAR_7->link[1] == VAR_6;\n\t\t\tif (VAR_9 == VAR_8->link[VAR_11]) {\n\t\t\t\t_set_link (VAR_7, _rot_once (VAR_6, !VAR_11), VAR_12);\n\t\t\t} else {\n\t\t\t\t_set_link (VAR_7, _rot_twice (VAR_6, !VAR_11), VAR_12);\n\t\t\t}\n\t\t}\n\n\t\tif (VAR_4) {\n\t\t\tbreak;\n\t\t}\n\n\t\tVAR_11 = VAR_10;\n\t\tVAR_10 = VAR_2 (VAR_1, VAR_9->data, VAR_3) >= 0;\n\n\t\tif (VAR_6) {\n\t\t\tVAR_7 = VAR_6;\n\t\t}\n\n\t\tVAR_6 = VAR_8;\n\t\tVAR_8 = VAR_9;\n\t\tVAR_9 = VAR_9->link[VAR_10];\n\t}\n\n\t/* COMMENT_8 */\n\tVAR_0->root = VAR_5.link[1];\n\nout_exit:\n\t/* COMMENT_9 */\n\tVAR_0->root->red = 0;\n\tVAR_0->root->parent = NULL;\n\tif (VAR_4) {\n\t\tVAR_0->size++;\n\t}\n\n\treturn VAR_4;\n}",
  "func_graph_path": null,
  "diff_func": "--- func_before\n+++ func_after\n@@ -2,9 +2,9 @@\n \tr_return_val_if_fail (tree && data && cmp, false);\n \tbool inserted = false;\n \n-\tif (tree->root == NULL) {\n+\tif (!tree->root) {\n \t\ttree->root = _node_new (data, NULL);\n-\t\tif (tree->root == NULL) {\n+\t\tif (!tree->root) {\n \t\t\treturn false;\n \t\t}\n \t\tinserted = true;",
  "diff_line_info": {
    "deleted_lines": [
      "\tif (tree->root == NULL) {",
      "\t\tif (tree->root == NULL) {"
    ],
    "added_lines": [
      "\tif (!tree->root) {",
      "\t\tif (!tree->root) {"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/radareorg/radare2/pull/19991",
  "description": {
    "pr_info": {
      "title": "Fix some bugs",
      "number": 19991
    },
    "comment": [
      "<!--\r\nRead https://github.com/radareorg/radare2/blob/master/DEVELOPERS.md\r\n* PR title must be capitalized, concise and use ##tags\r\n* If the PR is fixing a ticket use 'Fix #1234 - ..' in the commit message\r\n* Follow the coding style, add tests and documentation if necessary\r\n-->\r\n\r\n- [x] Mark this if you consider it ready to merge\r\n- [ ] I've added tests (optional)\r\n- [ ] I wrote some lines in the [book](https://github.com/radareorg/radare2book) (optional)\r\n\r\n**Description**\r\n\r\n<!-- explain your changes if necessary -->\r\n"
    ]
  },
  "Bug Filter": "Supporting & Non-Core Improvements",
  "Bug Filter Confidence": 0.8,
  "Bug Filter Response": "**Final Classification:** Supporting & Non-Core Improvements  \n**Confidence:** 0.8"
}