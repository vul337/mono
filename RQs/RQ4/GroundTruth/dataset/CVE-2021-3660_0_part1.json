{
  "cve_id": "CVE-2021-3660",
  "cwe_ids": [
    "CWE-1021"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:N/I:P/A:N",
  "cvss_is_v3": false,
  "repo_name": "cockpit-project/cockpit",
  "commit_msg": "common: Restrict frame embedding to same origin\n\nDeclare `X-Frame-Options: sameorigin` [1] so that cockpit frames can\nonly be embedded into pages coming from the same origin. This is similar\nto setting CORP in commit 2b38b8de92f9a (which applies to `<script>`,\n`<img>`, etc.).\n\nThe main use case for embedding is to run cockpit-ws behind a reverse\nproxy, while also serving other pages. Cross-origin embedding is\ndiscouraged these days to prevent \"clickjacking\".\n\nCross-origin embedding already did not work in most cases: Frames would\nalways just show the login page.  However, this looks confusing and is\nunclean. With X-Frame-Options, the browser instead shows an explanatory\nerror page.\n\nMention the same origin requirement in the embedding documentation.\n\nFixes #16122\nhttps://bugzilla.redhat.com/show_bug.cgi?id=1980688\nCVE-2021-3660\n\n[1] https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
  "commit_hash": "8d9bc10d8128aae03dfde62fd00075fe492ead10",
  "git_url": "https://github.com/cockpit-project/cockpit/commit/8d9bc10d8128aae03dfde62fd00075fe492ead10",
  "file_path": "src/common/cockpitwebresponse.c",
  "func_name": "finish_headers",
  "func_before": "static GBytes *\nfinish_headers (CockpitWebResponse *self,\n                GString *string,\n                gssize length,\n                gint status,\n                guint seen)\n{\n  const gchar *content_type;\n\n  /* Automatically figure out content type */\n  if ((seen & HEADER_CONTENT_TYPE) == 0 &&\n      self->full_path != NULL && status >= 200 && status <= 299)\n    {\n      content_type = cockpit_web_response_content_type (self->full_path);\n      if (content_type)\n        g_string_append_printf (string, \"Content-Type: %s\\r\\n\", content_type);\n    }\n\n  if (status != 304)\n    {\n      if (length < 0 || seen & HEADER_CONTENT_ENCODING || self->filters)\n        {\n          self->chunked = TRUE;\n          g_string_append_printf (string, \"Transfer-Encoding: chunked\\r\\n\");\n        }\n      else\n        {\n          self->chunked = FALSE;\n          g_string_append_printf (string, \"Content-Length: %\" G_GSSIZE_FORMAT \"\\r\\n\", length);\n          self->out_queueable = length;\n        }\n    }\n\n  if ((seen & HEADER_CACHE_CONTROL) == 0 && status >= 200 && status <= 299)\n    {\n      if (self->cache_type == COCKPIT_WEB_RESPONSE_CACHE_FOREVER)\n        g_string_append (string, \"Cache-Control: max-age=31556926, public\\r\\n\");\n      else if (self->cache_type == COCKPIT_WEB_RESPONSE_NO_CACHE)\n        g_string_append (string, \"Cache-Control: no-cache, no-store\\r\\n\");\n      else if (self->cache_type == COCKPIT_WEB_RESPONSE_CACHE_PRIVATE)\n        g_string_append (string, \"Cache-Control: max-age=86400, private\\r\\n\");\n    }\n\n  if ((seen & HEADER_VARY) == 0 && status >= 200 && status <= 299 &&\n      self->cache_type == COCKPIT_WEB_RESPONSE_CACHE_PRIVATE)\n    {\n      g_string_append (string, \"Vary: Cookie\\r\\n\");\n    }\n\n  if (!self->keep_alive)\n    g_string_append (string, \"Connection: close\\r\\n\");\n\n  /* Some blanket security headers */\n  if ((seen & HEADER_DNS_PREFETCH_CONTROL) == 0)\n    g_string_append (string, \"X-DNS-Prefetch-Control: off\\r\\n\");\n  if ((seen & HEADER_REFERRER_POLICY) == 0)\n    g_string_append (string, \"Referrer-Policy: no-referrer\\r\\n\");\n  if ((seen & HEADER_CONTENT_TYPE_OPTIONS) == 0)\n    g_string_append (string, \"X-Content-Type-Options: nosniff\\r\\n\");\n  /* Be very strict here -- there is no reason that external web sites should\n   * be able to read any resource. This does *not* affect embedding with <iframe> */\n  if ((seen & HEADER_CROSS_ORIGIN_RESOURCE_POLICY) == 0)\n    g_string_append (string, \"Cross-Origin-Resource-Policy: same-origin\\r\\n\");\n\n  g_string_append (string, \"\\r\\n\");\n  return g_string_free_to_bytes (string);\n}",
  "abstract_func_before": "static GBytes *\nfinish_headers (CockpitWebResponse *VAR_0,\n                GString *VAR_1,\n                gssize VAR_2,\n                gint VAR_3,\n                guint VAR_4)\n{\n  const gchar *VAR_5;\n\n  /* COMMENT_0 */\n  if ((VAR_4 & VAR_6) == 0 &&\n      VAR_0->full_path != NULL && VAR_3 >= 200 && VAR_3 <= 299)\n    {\n      VAR_5 = cockpit_web_response_content_type (VAR_0->full_path);\n      if (VAR_5)\n        g_string_append_printf (VAR_1, \"Content-Type: %s\\r\\n\", VAR_5);\n    }\n\n  if (VAR_3 != 304)\n    {\n      if (VAR_2 < 0 || VAR_4 & VAR_7 || VAR_0->filters)\n        {\n          VAR_0->chunked = TRUE;\n          g_string_append_printf (VAR_1, \"Transfer-Encoding: chunked\\r\\n\");\n        }\n      else\n        {\n          VAR_0->chunked = FALSE;\n          g_string_append_printf (VAR_1, \"Content-Length: %\" VAR_8 \"\\r\\n\", VAR_2);\n          VAR_0->out_queueable = VAR_2;\n        }\n    }\n\n  if ((VAR_4 & VAR_9) == 0 && VAR_3 >= 200 && VAR_3 <= 299)\n    {\n      if (VAR_0->cache_type == VAR_10)\n        g_string_append (VAR_1, \"Cache-Control: max-age=31556926, public\\r\\n\");\n      else if (VAR_0->cache_type == VAR_11)\n        g_string_append (VAR_1, \"Cache-Control: no-cache, no-store\\r\\n\");\n      else if (VAR_0->cache_type == VAR_12)\n        g_string_append (VAR_1, \"Cache-Control: max-age=86400, private\\r\\n\");\n    }\n\n  if ((VAR_4 & VAR_13) == 0 && VAR_3 >= 200 && VAR_3 <= 299 &&\n      VAR_0->cache_type == VAR_12)\n    {\n      g_string_append (VAR_1, \"Vary: Cookie\\r\\n\");\n    }\n\n  if (!VAR_0->keep_alive)\n    g_string_append (VAR_1, \"Connection: close\\r\\n\");\n\n  /* COMMENT_1 */\n  if ((VAR_4 & VAR_14) == 0)\n    g_string_append (VAR_1, \"X-DNS-Prefetch-Control: off\\r\\n\");\n  if ((VAR_4 & VAR_15) == 0)\n    g_string_append (VAR_1, \"Referrer-Policy: no-referrer\\r\\n\");\n  if ((VAR_4 & VAR_16) == 0)\n    g_string_append (VAR_1, \"X-Content-Type-Options: nosniff\\r\\n\");\n  /* COMMENT_2 */\n                                                                                    \n  if ((VAR_4 & VAR_17) == 0)\n    g_string_append (VAR_1, \"Cross-Origin-Resource-Policy: same-origin\\r\\n\");\n\n  g_string_append (VAR_1, \"\\r\\n\");\n  return g_string_free_to_bytes (VAR_1);\n}",
  "func_graph_path_before": "cockpit-project/cockpit/8d9bc10d8128aae03dfde62fd00075fe492ead10/cockpitwebresponse.c/vul/before/1.json",
  "func": "static GBytes *\nfinish_headers (CockpitWebResponse *self,\n                GString *string,\n                gssize length,\n                gint status,\n                guint seen)\n{\n  const gchar *content_type;\n\n  /* Automatically figure out content type */\n  if ((seen & HEADER_CONTENT_TYPE) == 0 &&\n      self->full_path != NULL && status >= 200 && status <= 299)\n    {\n      content_type = cockpit_web_response_content_type (self->full_path);\n      if (content_type)\n        g_string_append_printf (string, \"Content-Type: %s\\r\\n\", content_type);\n    }\n\n  if (status != 304)\n    {\n      if (length < 0 || seen & HEADER_CONTENT_ENCODING || self->filters)\n        {\n          self->chunked = TRUE;\n          g_string_append_printf (string, \"Transfer-Encoding: chunked\\r\\n\");\n        }\n      else\n        {\n          self->chunked = FALSE;\n          g_string_append_printf (string, \"Content-Length: %\" G_GSSIZE_FORMAT \"\\r\\n\", length);\n          self->out_queueable = length;\n        }\n    }\n\n  if ((seen & HEADER_CACHE_CONTROL) == 0 && status >= 200 && status <= 299)\n    {\n      if (self->cache_type == COCKPIT_WEB_RESPONSE_CACHE_FOREVER)\n        g_string_append (string, \"Cache-Control: max-age=31556926, public\\r\\n\");\n      else if (self->cache_type == COCKPIT_WEB_RESPONSE_NO_CACHE)\n        g_string_append (string, \"Cache-Control: no-cache, no-store\\r\\n\");\n      else if (self->cache_type == COCKPIT_WEB_RESPONSE_CACHE_PRIVATE)\n        g_string_append (string, \"Cache-Control: max-age=86400, private\\r\\n\");\n    }\n\n  if ((seen & HEADER_VARY) == 0 && status >= 200 && status <= 299 &&\n      self->cache_type == COCKPIT_WEB_RESPONSE_CACHE_PRIVATE)\n    {\n      g_string_append (string, \"Vary: Cookie\\r\\n\");\n    }\n\n  if (!self->keep_alive)\n    g_string_append (string, \"Connection: close\\r\\n\");\n\n  /* Some blanket security headers */\n  if ((seen & HEADER_DNS_PREFETCH_CONTROL) == 0)\n    g_string_append (string, \"X-DNS-Prefetch-Control: off\\r\\n\");\n  if ((seen & HEADER_REFERRER_POLICY) == 0)\n    g_string_append (string, \"Referrer-Policy: no-referrer\\r\\n\");\n  if ((seen & HEADER_CONTENT_TYPE_OPTIONS) == 0)\n    g_string_append (string, \"X-Content-Type-Options: nosniff\\r\\n\");\n  /* Be very strict here -- there is no reason that external web sites should\n   * be able to read any resource. This does *not* affect embedding with <iframe> */\n  if ((seen & HEADER_CROSS_ORIGIN_RESOURCE_POLICY) == 0)\n    g_string_append (string, \"Cross-Origin-Resource-Policy: same-origin\\r\\n\");\n  /* This is the counterpart for iframe embedding, line of defence against clickjacking */\n  if ((seen & HEADER_X_FRAME_OPTIONS) == 0)\n    g_string_append (string, \"X-Frame-Options: sameorigin\\r\\n\");\n\n  g_string_append (string, \"\\r\\n\");\n  return g_string_free_to_bytes (string);\n}",
  "abstract_func": "static GBytes *\nfinish_headers (CockpitWebResponse *VAR_0,\n                GString *VAR_1,\n                gssize VAR_2,\n                gint VAR_3,\n                guint VAR_4)\n{\n  const gchar *VAR_5;\n\n  /* COMMENT_0 */\n  if ((VAR_4 & VAR_6) == 0 &&\n      VAR_0->full_path != NULL && VAR_3 >= 200 && VAR_3 <= 299)\n    {\n      VAR_5 = cockpit_web_response_content_type (VAR_0->full_path);\n      if (VAR_5)\n        g_string_append_printf (VAR_1, \"Content-Type: %s\\r\\n\", VAR_5);\n    }\n\n  if (VAR_3 != 304)\n    {\n      if (VAR_2 < 0 || VAR_4 & VAR_7 || VAR_0->filters)\n        {\n          VAR_0->chunked = TRUE;\n          g_string_append_printf (VAR_1, \"Transfer-Encoding: chunked\\r\\n\");\n        }\n      else\n        {\n          VAR_0->chunked = FALSE;\n          g_string_append_printf (VAR_1, \"Content-Length: %\" VAR_8 \"\\r\\n\", VAR_2);\n          VAR_0->out_queueable = VAR_2;\n        }\n    }\n\n  if ((VAR_4 & VAR_9) == 0 && VAR_3 >= 200 && VAR_3 <= 299)\n    {\n      if (VAR_0->cache_type == VAR_10)\n        g_string_append (VAR_1, \"Cache-Control: max-age=31556926, public\\r\\n\");\n      else if (VAR_0->cache_type == VAR_11)\n        g_string_append (VAR_1, \"Cache-Control: no-cache, no-store\\r\\n\");\n      else if (VAR_0->cache_type == VAR_12)\n        g_string_append (VAR_1, \"Cache-Control: max-age=86400, private\\r\\n\");\n    }\n\n  if ((VAR_4 & VAR_13) == 0 && VAR_3 >= 200 && VAR_3 <= 299 &&\n      VAR_0->cache_type == VAR_12)\n    {\n      g_string_append (VAR_1, \"Vary: Cookie\\r\\n\");\n    }\n\n  if (!VAR_0->keep_alive)\n    g_string_append (VAR_1, \"Connection: close\\r\\n\");\n\n  /* COMMENT_1 */\n  if ((VAR_4 & VAR_14) == 0)\n    g_string_append (VAR_1, \"X-DNS-Prefetch-Control: off\\r\\n\");\n  if ((VAR_4 & VAR_15) == 0)\n    g_string_append (VAR_1, \"Referrer-Policy: no-referrer\\r\\n\");\n  if ((VAR_4 & VAR_16) == 0)\n    g_string_append (VAR_1, \"X-Content-Type-Options: nosniff\\r\\n\");\n  /* COMMENT_2 */\n                                                                                    \n  if ((VAR_4 & VAR_17) == 0)\n    g_string_append (VAR_1, \"Cross-Origin-Resource-Policy: same-origin\\r\\n\");\n  /* COMMENT_4 */\n  if ((VAR_4 & VAR_18) == 0)\n    g_string_append (VAR_1, \"X-Frame-Options: sameorigin\\r\\n\");\n\n  g_string_append (VAR_1, \"\\r\\n\");\n  return g_string_free_to_bytes (VAR_1);\n}",
  "func_graph_path": "cockpit-project/cockpit/8d9bc10d8128aae03dfde62fd00075fe492ead10/cockpitwebresponse.c/vul/after/1.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -61,6 +61,9 @@\n    * be able to read any resource. This does *not* affect embedding with <iframe> */\n   if ((seen & HEADER_CROSS_ORIGIN_RESOURCE_POLICY) == 0)\n     g_string_append (string, \"Cross-Origin-Resource-Policy: same-origin\\r\\n\");\n+  /* This is the counterpart for iframe embedding, line of defence against clickjacking */\n+  if ((seen & HEADER_X_FRAME_OPTIONS) == 0)\n+    g_string_append (string, \"X-Frame-Options: sameorigin\\r\\n\");\n \n   g_string_append (string, \"\\r\\n\");\n   return g_string_free_to_bytes (string);",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "  /* This is the counterpart for iframe embedding, line of defence against clickjacking */",
      "  if ((seen & HEADER_X_FRAME_OPTIONS) == 0)",
      "    g_string_append (string, \"X-Frame-Options: sameorigin\\r\\n\");"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/cockpit-project/cockpit/pull/16342",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/cockpit-project/cockpit/pull/16342: 403 Client Error: Forbidden for url: https://api.github.com/repos/cockpit-project/cockpit/pulls/16342",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 1.0"
}