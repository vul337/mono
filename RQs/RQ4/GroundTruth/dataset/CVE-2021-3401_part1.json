{
  "cve_id": "CVE-2021-3401",
  "cwe_ids": [
    "CWE-88"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "bitcoin",
  "commit_msg": "Give QApplication dummy arguments\n\nQApplication takes the command line arguments and parses them itself\nfor some built in command line arguments that it has. We don't want\nany of those built in arguments, so instead give it dummy arguments.",
  "commit_hash": "a2714a5c69f0b0506689af04c3e785f71ee0915d",
  "git_url": "https://github.com/bitcoin/bitcoin/commit/a2714a5c69f0b0506689af04c3e785f71ee0915d",
  "file_path": "src/qt/bitcoin.cpp",
  "func_name": "GuiMain",
  "func_before": "int GuiMain(int argc, char* argv[])\n{\n#ifdef WIN32\n    util::WinCmdLineArgs winArgs;\n    std::tie(argc, argv) = winArgs.get();\n#endif\n    SetupEnvironment();\n    util::ThreadRename(\"main\");\n\n    std::unique_ptr<interfaces::Node> node = interfaces::MakeNode();\n\n    // Subscribe to global signals from core\n    std::unique_ptr<interfaces::Handler> handler_message_box = node->handleMessageBox(noui_ThreadSafeMessageBox);\n    std::unique_ptr<interfaces::Handler> handler_question = node->handleQuestion(noui_ThreadSafeQuestion);\n    std::unique_ptr<interfaces::Handler> handler_init_message = node->handleInitMessage(noui_InitMessage);\n\n    // Do not refer to data directory yet, this can be overridden by Intro::pickDataDirectory\n\n    /// 1. Basic Qt initialization (not dependent on parameters or configuration)\n    Q_INIT_RESOURCE(bitcoin);\n    Q_INIT_RESOURCE(bitcoin_locale);\n\n    // Generate high-dpi pixmaps\n    QApplication::setAttribute(Qt::AA_UseHighDpiPixmaps);\n#if QT_VERSION >= 0x050600\n    QCoreApplication::setAttribute(Qt::AA_EnableHighDpiScaling);\n#endif\n#ifdef Q_OS_MAC\n    QApplication::setAttribute(Qt::AA_DontShowIconsInMenus);\n#endif\n\n    BitcoinApplication app(*node, argc, argv);\n\n    // Register meta types used for QMetaObject::invokeMethod\n    qRegisterMetaType< bool* >();\n#ifdef ENABLE_WALLET\n    qRegisterMetaType<WalletModel*>();\n#endif\n    //   Need to pass name here as CAmount is a typedef (see http://qt-project.org/doc/qt-5/qmetatype.html#qRegisterMetaType)\n    //   IMPORTANT if it is no longer a typedef use the normal variant above\n    qRegisterMetaType< CAmount >(\"CAmount\");\n    qRegisterMetaType< std::function<void()> >(\"std::function<void()>\");\n    qRegisterMetaType<QMessageBox::Icon>(\"QMessageBox::Icon\");\n    /// 2. Parse command-line options. We do this after qt in order to show an error if there are problems parsing these\n    // Command-line options take precedence:\n    node->setupServerArgs();\n    SetupUIArgs();\n    std::string error;\n    if (!node->parseParameters(argc, argv, error)) {\n        node->initError(strprintf(\"Error parsing command line arguments: %s\\n\", error));\n        // Create a message box, because the gui has neither been created nor has subscribed to core signals\n        QMessageBox::critical(nullptr, PACKAGE_NAME,\n            // message can not be translated because translations have not been initialized\n            QString::fromStdString(\"Error parsing command line arguments: %1.\").arg(QString::fromStdString(error)));\n        return EXIT_FAILURE;\n    }\n\n    // Now that the QApplication is setup and we have parsed our parameters, we can set the platform style\n    app.setupPlatformStyle();\n\n    /// 3. Application identification\n    // must be set before OptionsModel is initialized or translations are loaded,\n    // as it is used to locate QSettings\n    QApplication::setOrganizationName(QAPP_ORG_NAME);\n    QApplication::setOrganizationDomain(QAPP_ORG_DOMAIN);\n    QApplication::setApplicationName(QAPP_APP_NAME_DEFAULT);\n\n    /// 4. Initialization of translations, so that intro dialog is in user's language\n    // Now that QSettings are accessible, initialize translations\n    QTranslator qtTranslatorBase, qtTranslator, translatorBase, translator;\n    initTranslations(qtTranslatorBase, qtTranslator, translatorBase, translator);\n\n    // Show help message immediately after parsing command-line options (for \"-lang\") and setting locale,\n    // but before showing splash screen.\n    if (HelpRequested(gArgs) || gArgs.IsArgSet(\"-version\")) {\n        HelpMessageDialog help(*node, nullptr, gArgs.IsArgSet(\"-version\"));\n        help.showOrPrint();\n        return EXIT_SUCCESS;\n    }\n\n    /// 5. Now that settings and translations are available, ask user for data directory\n    // User language is set up: pick a data directory\n    if (!Intro::pickDataDirectory(*node))\n        return EXIT_SUCCESS;\n\n    /// 6. Determine availability of data and blocks directory and parse bitcoin.conf\n    /// - Do not call GetDataDir(true) before this step finishes\n    if (!fs::is_directory(GetDataDir(false)))\n    {\n        node->initError(strprintf(\"Specified data directory \\\"%s\\\" does not exist.\\n\", gArgs.GetArg(\"-datadir\", \"\")));\n        QMessageBox::critical(nullptr, PACKAGE_NAME,\n            QObject::tr(\"Error: Specified data directory \\\"%1\\\" does not exist.\").arg(QString::fromStdString(gArgs.GetArg(\"-datadir\", \"\"))));\n        return EXIT_FAILURE;\n    }\n    if (!node->readConfigFiles(error)) {\n        node->initError(strprintf(\"Error reading configuration file: %s\\n\", error));\n        QMessageBox::critical(nullptr, PACKAGE_NAME,\n            QObject::tr(\"Error: Cannot parse configuration file: %1.\").arg(QString::fromStdString(error)));\n        return EXIT_FAILURE;\n    }\n\n    /// 7. Determine network (and switch to network specific options)\n    // - Do not call Params() before this step\n    // - Do this after parsing the configuration file, as the network can be switched there\n    // - QSettings() will use the new application name after this, resulting in network-specific settings\n    // - Needs to be done before createOptionsModel\n\n    // Check for -testnet or -regtest parameter (Params() calls are only valid after this clause)\n    try {\n        node->selectParams(gArgs.GetChainName());\n    } catch(std::exception &e) {\n        node->initError(strprintf(\"%s\\n\", e.what()));\n        QMessageBox::critical(nullptr, PACKAGE_NAME, QObject::tr(\"Error: %1\").arg(e.what()));\n        return EXIT_FAILURE;\n    }\n#ifdef ENABLE_WALLET\n    // Parse URIs on command line -- this can affect Params()\n    PaymentServer::ipcParseCommandLine(*node, argc, argv);\n#endif\n\n    QScopedPointer<const NetworkStyle> networkStyle(NetworkStyle::instantiate(QString::fromStdString(Params().NetworkIDString())));\n    assert(!networkStyle.isNull());\n    // Allow for separate UI settings for testnets\n    QApplication::setApplicationName(networkStyle->getAppName());\n    // Re-initialize translations after changing application name (language in network-specific settings can be different)\n    initTranslations(qtTranslatorBase, qtTranslator, translatorBase, translator);\n\n#ifdef ENABLE_WALLET\n    /// 8. URI IPC sending\n    // - Do this early as we don't want to bother initializing if we are just calling IPC\n    // - Do this *after* setting up the data directory, as the data directory hash is used in the name\n    // of the server.\n    // - Do this after creating app and setting up translations, so errors are\n    // translated properly.\n    if (PaymentServer::ipcSendCommandLine())\n        exit(EXIT_SUCCESS);\n\n    // Start up the payment server early, too, so impatient users that click on\n    // bitcoin: links repeatedly have their payment requests routed to this process:\n    if (WalletModel::isWalletEnabled()) {\n        app.createPaymentServer();\n    }\n#endif // ENABLE_WALLET\n\n    /// 9. Main GUI initialization\n    // Install global event filter that makes sure that long tooltips can be word-wrapped\n    app.installEventFilter(new GUIUtil::ToolTipToRichTextFilter(TOOLTIP_WRAP_THRESHOLD, &app));\n#if defined(Q_OS_WIN)\n    // Install global event filter for processing Windows session related Windows messages (WM_QUERYENDSESSION and WM_ENDSESSION)\n    qApp->installNativeEventFilter(new WinShutdownMonitor());\n#endif\n    // Install qDebug() message handler to route to debug.log\n    qInstallMessageHandler(DebugMessageHandler);\n    // Allow parameter interaction before we create the options model\n    app.parameterSetup();\n    // Load GUI settings from QSettings\n    app.createOptionsModel(gArgs.GetBoolArg(\"-resetguisettings\", false));\n\n    if (gArgs.GetBoolArg(\"-splash\", DEFAULT_SPLASHSCREEN) && !gArgs.GetBoolArg(\"-min\", false))\n        app.createSplashScreen(networkStyle.data());\n\n    int rv = EXIT_SUCCESS;\n    try\n    {\n        app.createWindow(networkStyle.data());\n        // Perform base initialization before spinning up initialization/shutdown thread\n        // This is acceptable because this function only contains steps that are quick to execute,\n        // so the GUI thread won't be held up.\n        if (app.baseInitialize()) {\n            app.requestInitialize();\n#if defined(Q_OS_WIN)\n            WinShutdownMonitor::registerShutdownBlockReason(QObject::tr(\"%1 didn't yet exit safely...\").arg(PACKAGE_NAME), (HWND)app.getMainWinId());\n#endif\n            app.exec();\n            app.requestShutdown();\n            app.exec();\n            rv = app.getReturnValue();\n        } else {\n            // A dialog with detailed error will have been shown by InitError()\n            rv = EXIT_FAILURE;\n        }\n    } catch (const std::exception& e) {\n        PrintExceptionContinue(&e, \"Runaway exception\");\n        app.handleRunawayException(QString::fromStdString(node->getWarnings(\"gui\")));\n    } catch (...) {\n        PrintExceptionContinue(nullptr, \"Runaway exception\");\n        app.handleRunawayException(QString::fromStdString(node->getWarnings(\"gui\")));\n    }\n    return rv;\n}",
  "abstract_func_before": "int GuiMain(int VAR_0, char* VAR_1[])\n{\n#ifdef VAR_2\n    util::WinCmdLineArgs VAR_3;\n    std::tie(VAR_0, VAR_1) = VAR_3.get();\n#endif\n    SetupEnvironment();\n    util::ThreadRename(\"main\");\n\n    std::unique_ptr<interfaces::Node> VAR_4 = interfaces::MakeNode();\n\n    /* COMMENT_0 */\n    std::unique_ptr<interfaces::Handler> VAR_5 = VAR_4->handleMessageBox(VAR_6);\n    std::unique_ptr<interfaces::Handler> VAR_7 = VAR_4->handleQuestion(VAR_8);\n    std::unique_ptr<interfaces::Handler> VAR_9 = VAR_4->handleInitMessage(VAR_10);\n\n    /* COMMENT_1 */\n\n    /* COMMENT_2 */\n    Q_INIT_RESOURCE(VAR_11);\n    Q_INIT_RESOURCE(VAR_12);\n\n    /* COMMENT_3 */\n    QApplication::setAttribute(Qt::AA_UseHighDpiPixmaps);\n#if VAR_13 >= 0x050600\n    QCoreApplication::setAttribute(Qt::AA_EnableHighDpiScaling);\n#endif\n#ifdef VAR_14\n    QApplication::setAttribute(Qt::AA_DontShowIconsInMenus);\n#endif\n\n    BitcoinApplication VAR_15(*VAR_4, VAR_0, VAR_1);\n\n    /* COMMENT_4 */\n    VAR_16< bool* >();\n#ifdef VAR_17\n    VAR_16<WalletModel*>();\n#endif\n    /* COMMENT_5 */\n    /* COMMENT_6 */\n    VAR_16< CAmount >(\"CAmount\");\n    VAR_16< std::function<void()> >(\"std::function<void()>\");\n    VAR_16<QMessageBox::Icon>(\"QMessageBox::Icon\");\n    /* COMMENT_7 */\n    /* COMMENT_8 */\n    VAR_4->setupServerArgs();\n    SetupUIArgs();\n    std::string VAR_18;\n    if (!VAR_4->parseParameters(VAR_0, VAR_1, VAR_18)) {\n        VAR_4->initError(strprintf(\"Error parsing command line arguments: %s\\n\", VAR_18));\n        /* COMMENT_9 */\n        QMessageBox::critical(nullptr, VAR_19,\n            /* COMMENT_10 */\n            QString::fromStdString(\"Error parsing command line arguments: %1.\").arg(QString::fromStdString(VAR_18)));\n        return VAR_20;\n    }\n\n    /* COMMENT_11 */\n    VAR_15.setupPlatformStyle();\n\n    /* COMMENT_12 */\n    /* COMMENT_13 */\n    /* COMMENT_14 */\n    QApplication::setOrganizationName(VAR_21);\n    QApplication::setOrganizationDomain(VAR_22);\n    QApplication::setApplicationName(VAR_23);\n\n    /* COMMENT_15 */\n    /* COMMENT_16 */\n    QTranslator VAR_24, VAR_25, VAR_26, VAR_27;\n    initTranslations(VAR_24, VAR_25, VAR_26, VAR_27);\n\n    /* COMMENT_17 */\n    /* COMMENT_18 */\n    if (HelpRequested(VAR_28) || VAR_28.IsArgSet(\"-version\")) {\n        HelpMessageDialog VAR_29(*VAR_4, nullptr, VAR_28.IsArgSet(\"-version\"));\n        VAR_29.showOrPrint();\n        return VAR_30;\n    }\n\n    /* COMMENT_19 */\n    /* COMMENT_20 */\n    if (!Intro::pickDataDirectory(*VAR_4))\n        return VAR_30;\n\n    /* COMMENT_21 */\n    /* COMMENT_22 */\n    if (!fs::is_directory(GetDataDir(false)))\n    {\n        VAR_4->initError(strprintf(\"Specified data directory \\\"%s\\\" does not exist.\\n\", VAR_28.GetArg(\"-datadir\", \"\")));\n        QMessageBox::critical(nullptr, VAR_19,\n            QObject::tr(\"Error: Specified data directory \\\"%1\\\" does not exist.\").arg(QString::fromStdString(VAR_28.GetArg(\"-datadir\", \"\"))));\n        return VAR_20;\n    }\n    if (!VAR_4->readConfigFiles(VAR_18)) {\n        VAR_4->initError(strprintf(\"Error reading configuration file: %s\\n\", VAR_18));\n        QMessageBox::critical(nullptr, VAR_19,\n            QObject::tr(\"Error: Cannot parse configuration file: %1.\").arg(QString::fromStdString(VAR_18)));\n        return VAR_20;\n    }\n\n    /* COMMENT_23 */\n    /* COMMENT_24 */\n    /* COMMENT_25 */\n    /* COMMENT_26 */\n    /* COMMENT_27 */\n\n    /* COMMENT_28 */\n    try {\n        VAR_4->selectParams(VAR_28.GetChainName());\n    } catch(std::exception &VAR_31) {\n        VAR_4->initError(strprintf(\"%s\\n\", VAR_31.what()));\n        QMessageBox::critical(nullptr, VAR_19, QObject::tr(\"Error: %1\").arg(VAR_31.what()));\n        return VAR_20;\n    }\n#ifdef VAR_17\n    /* COMMENT_29 */\n    PaymentServer::ipcParseCommandLine(*VAR_4, VAR_0, VAR_1);\n#endif\n\n    QScopedPointer<const NetworkStyle> VAR_32(NetworkStyle::instantiate(QString::fromStdString(Params().NetworkIDString())));\n    assert(!VAR_32.isNull());\n    /* COMMENT_30 */\n    QApplication::setApplicationName(VAR_32->getAppName());\n    /* COMMENT_31 */\n    initTranslations(VAR_24, VAR_25, VAR_26, VAR_27);\n\n#ifdef VAR_17\n    /* COMMENT_32 */\n    /* COMMENT_33 */\n    /* COMMENT_34 */\n    /* COMMENT_35 */\n    /* COMMENT_36 */\n    /* COMMENT_37 */\n    if (PaymentServer::ipcSendCommandLine())\n        exit(VAR_30);\n\n    /* COMMENT_38 */\n    /* COMMENT_39 */\n    if (WalletModel::isWalletEnabled()) {\n        VAR_15.createPaymentServer();\n    }\n#endif /* COMMENT_40 */\n\n    /* COMMENT_41 */\n    /* COMMENT_42 */\n    VAR_15.installEventFilter(new GUIUtil::ToolTipToRichTextFilter(VAR_33, &VAR_15));\n#if defined(VAR_34)\n    /* COMMENT_43 */\n    VAR_35->installNativeEventFilter(new WinShutdownMonitor());\n#endif\n    /* COMMENT_44 */\n    qInstallMessageHandler(VAR_36);\n    /* COMMENT_45 */\n    VAR_15.parameterSetup();\n    /* COMMENT_46 */\n    VAR_15.createOptionsModel(VAR_28.GetBoolArg(\"-resetguisettings\", false));\n\n    if (VAR_28.GetBoolArg(\"-splash\", VAR_37) && !VAR_28.GetBoolArg(\"-min\", false))\n        VAR_15.createSplashScreen(VAR_32.data());\n\n    int VAR_38 = VAR_30;\n    try\n    {\n        VAR_15.createWindow(VAR_32.data());\n        /* COMMENT_47 */\n        /* COMMENT_48 */\n        /* COMMENT_49 */\n        if (VAR_15.baseInitialize()) {\n            VAR_15.requestInitialize();\n#if defined(VAR_34)\n            WinShutdownMonitor::registerShutdownBlockReason(QObject::tr(\"%1 didn't yet exit safely...\").arg(VAR_19), (HWND)VAR_15.getMainWinId());\n#endif\n            VAR_15.exec();\n            VAR_15.requestShutdown();\n            VAR_15.exec();\n            VAR_38 = VAR_15.getReturnValue();\n        } else {\n            /* COMMENT_50 */\n            VAR_38 = VAR_20;\n        }\n    } catch (const std::exception& VAR_31) {\n        PrintExceptionContinue(&VAR_31, \"Runaway exception\");\n        VAR_15.handleRunawayException(QString::fromStdString(VAR_4->getWarnings(\"gui\")));\n    } catch (...) {\n        PrintExceptionContinue(nullptr, \"Runaway exception\");\n        VAR_15.handleRunawayException(QString::fromStdString(VAR_4->getWarnings(\"gui\")));\n    }\n    return VAR_38;\n}",
  "func_graph_path_before": null,
  "func": "int GuiMain(int argc, char* argv[])\n{\n#ifdef WIN32\n    util::WinCmdLineArgs winArgs;\n    std::tie(argc, argv) = winArgs.get();\n#endif\n    SetupEnvironment();\n    util::ThreadRename(\"main\");\n\n    std::unique_ptr<interfaces::Node> node = interfaces::MakeNode();\n\n    // Subscribe to global signals from core\n    std::unique_ptr<interfaces::Handler> handler_message_box = node->handleMessageBox(noui_ThreadSafeMessageBox);\n    std::unique_ptr<interfaces::Handler> handler_question = node->handleQuestion(noui_ThreadSafeQuestion);\n    std::unique_ptr<interfaces::Handler> handler_init_message = node->handleInitMessage(noui_InitMessage);\n\n    // Do not refer to data directory yet, this can be overridden by Intro::pickDataDirectory\n\n    /// 1. Basic Qt initialization (not dependent on parameters or configuration)\n    Q_INIT_RESOURCE(bitcoin);\n    Q_INIT_RESOURCE(bitcoin_locale);\n\n    // Generate high-dpi pixmaps\n    QApplication::setAttribute(Qt::AA_UseHighDpiPixmaps);\n#if QT_VERSION >= 0x050600\n    QCoreApplication::setAttribute(Qt::AA_EnableHighDpiScaling);\n#endif\n#ifdef Q_OS_MAC\n    QApplication::setAttribute(Qt::AA_DontShowIconsInMenus);\n#endif\n\n    BitcoinApplication app(*node);\n\n    // Register meta types used for QMetaObject::invokeMethod\n    qRegisterMetaType< bool* >();\n#ifdef ENABLE_WALLET\n    qRegisterMetaType<WalletModel*>();\n#endif\n    //   Need to pass name here as CAmount is a typedef (see http://qt-project.org/doc/qt-5/qmetatype.html#qRegisterMetaType)\n    //   IMPORTANT if it is no longer a typedef use the normal variant above\n    qRegisterMetaType< CAmount >(\"CAmount\");\n    qRegisterMetaType< std::function<void()> >(\"std::function<void()>\");\n    qRegisterMetaType<QMessageBox::Icon>(\"QMessageBox::Icon\");\n    /// 2. Parse command-line options. We do this after qt in order to show an error if there are problems parsing these\n    // Command-line options take precedence:\n    node->setupServerArgs();\n    SetupUIArgs();\n    std::string error;\n    if (!node->parseParameters(argc, argv, error)) {\n        node->initError(strprintf(\"Error parsing command line arguments: %s\\n\", error));\n        // Create a message box, because the gui has neither been created nor has subscribed to core signals\n        QMessageBox::critical(nullptr, PACKAGE_NAME,\n            // message can not be translated because translations have not been initialized\n            QString::fromStdString(\"Error parsing command line arguments: %1.\").arg(QString::fromStdString(error)));\n        return EXIT_FAILURE;\n    }\n\n    // Now that the QApplication is setup and we have parsed our parameters, we can set the platform style\n    app.setupPlatformStyle();\n\n    /// 3. Application identification\n    // must be set before OptionsModel is initialized or translations are loaded,\n    // as it is used to locate QSettings\n    QApplication::setOrganizationName(QAPP_ORG_NAME);\n    QApplication::setOrganizationDomain(QAPP_ORG_DOMAIN);\n    QApplication::setApplicationName(QAPP_APP_NAME_DEFAULT);\n\n    /// 4. Initialization of translations, so that intro dialog is in user's language\n    // Now that QSettings are accessible, initialize translations\n    QTranslator qtTranslatorBase, qtTranslator, translatorBase, translator;\n    initTranslations(qtTranslatorBase, qtTranslator, translatorBase, translator);\n\n    // Show help message immediately after parsing command-line options (for \"-lang\") and setting locale,\n    // but before showing splash screen.\n    if (HelpRequested(gArgs) || gArgs.IsArgSet(\"-version\")) {\n        HelpMessageDialog help(*node, nullptr, gArgs.IsArgSet(\"-version\"));\n        help.showOrPrint();\n        return EXIT_SUCCESS;\n    }\n\n    /// 5. Now that settings and translations are available, ask user for data directory\n    // User language is set up: pick a data directory\n    if (!Intro::pickDataDirectory(*node))\n        return EXIT_SUCCESS;\n\n    /// 6. Determine availability of data and blocks directory and parse bitcoin.conf\n    /// - Do not call GetDataDir(true) before this step finishes\n    if (!fs::is_directory(GetDataDir(false)))\n    {\n        node->initError(strprintf(\"Specified data directory \\\"%s\\\" does not exist.\\n\", gArgs.GetArg(\"-datadir\", \"\")));\n        QMessageBox::critical(nullptr, PACKAGE_NAME,\n            QObject::tr(\"Error: Specified data directory \\\"%1\\\" does not exist.\").arg(QString::fromStdString(gArgs.GetArg(\"-datadir\", \"\"))));\n        return EXIT_FAILURE;\n    }\n    if (!node->readConfigFiles(error)) {\n        node->initError(strprintf(\"Error reading configuration file: %s\\n\", error));\n        QMessageBox::critical(nullptr, PACKAGE_NAME,\n            QObject::tr(\"Error: Cannot parse configuration file: %1.\").arg(QString::fromStdString(error)));\n        return EXIT_FAILURE;\n    }\n\n    /// 7. Determine network (and switch to network specific options)\n    // - Do not call Params() before this step\n    // - Do this after parsing the configuration file, as the network can be switched there\n    // - QSettings() will use the new application name after this, resulting in network-specific settings\n    // - Needs to be done before createOptionsModel\n\n    // Check for -testnet or -regtest parameter (Params() calls are only valid after this clause)\n    try {\n        node->selectParams(gArgs.GetChainName());\n    } catch(std::exception &e) {\n        node->initError(strprintf(\"%s\\n\", e.what()));\n        QMessageBox::critical(nullptr, PACKAGE_NAME, QObject::tr(\"Error: %1\").arg(e.what()));\n        return EXIT_FAILURE;\n    }\n#ifdef ENABLE_WALLET\n    // Parse URIs on command line -- this can affect Params()\n    PaymentServer::ipcParseCommandLine(*node, argc, argv);\n#endif\n\n    QScopedPointer<const NetworkStyle> networkStyle(NetworkStyle::instantiate(QString::fromStdString(Params().NetworkIDString())));\n    assert(!networkStyle.isNull());\n    // Allow for separate UI settings for testnets\n    QApplication::setApplicationName(networkStyle->getAppName());\n    // Re-initialize translations after changing application name (language in network-specific settings can be different)\n    initTranslations(qtTranslatorBase, qtTranslator, translatorBase, translator);\n\n#ifdef ENABLE_WALLET\n    /// 8. URI IPC sending\n    // - Do this early as we don't want to bother initializing if we are just calling IPC\n    // - Do this *after* setting up the data directory, as the data directory hash is used in the name\n    // of the server.\n    // - Do this after creating app and setting up translations, so errors are\n    // translated properly.\n    if (PaymentServer::ipcSendCommandLine())\n        exit(EXIT_SUCCESS);\n\n    // Start up the payment server early, too, so impatient users that click on\n    // bitcoin: links repeatedly have their payment requests routed to this process:\n    if (WalletModel::isWalletEnabled()) {\n        app.createPaymentServer();\n    }\n#endif // ENABLE_WALLET\n\n    /// 9. Main GUI initialization\n    // Install global event filter that makes sure that long tooltips can be word-wrapped\n    app.installEventFilter(new GUIUtil::ToolTipToRichTextFilter(TOOLTIP_WRAP_THRESHOLD, &app));\n#if defined(Q_OS_WIN)\n    // Install global event filter for processing Windows session related Windows messages (WM_QUERYENDSESSION and WM_ENDSESSION)\n    qApp->installNativeEventFilter(new WinShutdownMonitor());\n#endif\n    // Install qDebug() message handler to route to debug.log\n    qInstallMessageHandler(DebugMessageHandler);\n    // Allow parameter interaction before we create the options model\n    app.parameterSetup();\n    // Load GUI settings from QSettings\n    app.createOptionsModel(gArgs.GetBoolArg(\"-resetguisettings\", false));\n\n    if (gArgs.GetBoolArg(\"-splash\", DEFAULT_SPLASHSCREEN) && !gArgs.GetBoolArg(\"-min\", false))\n        app.createSplashScreen(networkStyle.data());\n\n    int rv = EXIT_SUCCESS;\n    try\n    {\n        app.createWindow(networkStyle.data());\n        // Perform base initialization before spinning up initialization/shutdown thread\n        // This is acceptable because this function only contains steps that are quick to execute,\n        // so the GUI thread won't be held up.\n        if (app.baseInitialize()) {\n            app.requestInitialize();\n#if defined(Q_OS_WIN)\n            WinShutdownMonitor::registerShutdownBlockReason(QObject::tr(\"%1 didn't yet exit safely...\").arg(PACKAGE_NAME), (HWND)app.getMainWinId());\n#endif\n            app.exec();\n            app.requestShutdown();\n            app.exec();\n            rv = app.getReturnValue();\n        } else {\n            // A dialog with detailed error will have been shown by InitError()\n            rv = EXIT_FAILURE;\n        }\n    } catch (const std::exception& e) {\n        PrintExceptionContinue(&e, \"Runaway exception\");\n        app.handleRunawayException(QString::fromStdString(node->getWarnings(\"gui\")));\n    } catch (...) {\n        PrintExceptionContinue(nullptr, \"Runaway exception\");\n        app.handleRunawayException(QString::fromStdString(node->getWarnings(\"gui\")));\n    }\n    return rv;\n}",
  "abstract_func": "int GuiMain(int VAR_0, char* VAR_1[])\n{\n#ifdef VAR_2\n    util::WinCmdLineArgs VAR_3;\n    std::tie(VAR_0, VAR_1) = VAR_3.get();\n#endif\n    SetupEnvironment();\n    util::ThreadRename(\"main\");\n\n    std::unique_ptr<interfaces::Node> VAR_4 = interfaces::MakeNode();\n\n    /* COMMENT_0 */\n    std::unique_ptr<interfaces::Handler> VAR_5 = VAR_4->handleMessageBox(VAR_6);\n    std::unique_ptr<interfaces::Handler> VAR_7 = VAR_4->handleQuestion(VAR_8);\n    std::unique_ptr<interfaces::Handler> VAR_9 = VAR_4->handleInitMessage(VAR_10);\n\n    /* COMMENT_1 */\n\n    /* COMMENT_2 */\n    Q_INIT_RESOURCE(VAR_11);\n    Q_INIT_RESOURCE(VAR_12);\n\n    /* COMMENT_3 */\n    QApplication::setAttribute(Qt::AA_UseHighDpiPixmaps);\n#if VAR_13 >= 0x050600\n    QCoreApplication::setAttribute(Qt::AA_EnableHighDpiScaling);\n#endif\n#ifdef VAR_14\n    QApplication::setAttribute(Qt::AA_DontShowIconsInMenus);\n#endif\n\n    BitcoinApplication VAR_15(*VAR_4);\n\n    /* COMMENT_4 */\n    VAR_16< bool* >();\n#ifdef VAR_17\n    VAR_16<WalletModel*>();\n#endif\n    /* COMMENT_5 */\n    /* COMMENT_6 */\n    VAR_16< CAmount >(\"CAmount\");\n    VAR_16< std::function<void()> >(\"std::function<void()>\");\n    VAR_16<QMessageBox::Icon>(\"QMessageBox::Icon\");\n    /* COMMENT_7 */\n    /* COMMENT_8 */\n    VAR_4->setupServerArgs();\n    SetupUIArgs();\n    std::string VAR_18;\n    if (!VAR_4->parseParameters(VAR_0, VAR_1, VAR_18)) {\n        VAR_4->initError(strprintf(\"Error parsing command line arguments: %s\\n\", VAR_18));\n        /* COMMENT_9 */\n        QMessageBox::critical(nullptr, VAR_19,\n            /* COMMENT_10 */\n            QString::fromStdString(\"Error parsing command line arguments: %1.\").arg(QString::fromStdString(VAR_18)));\n        return VAR_20;\n    }\n\n    /* COMMENT_11 */\n    VAR_15.setupPlatformStyle();\n\n    /* COMMENT_12 */\n    /* COMMENT_13 */\n    /* COMMENT_14 */\n    QApplication::setOrganizationName(VAR_21);\n    QApplication::setOrganizationDomain(VAR_22);\n    QApplication::setApplicationName(VAR_23);\n\n    /* COMMENT_15 */\n    /* COMMENT_16 */\n    QTranslator VAR_24, VAR_25, VAR_26, VAR_27;\n    initTranslations(VAR_24, VAR_25, VAR_26, VAR_27);\n\n    /* COMMENT_17 */\n    /* COMMENT_18 */\n    if (HelpRequested(VAR_28) || VAR_28.IsArgSet(\"-version\")) {\n        HelpMessageDialog VAR_29(*VAR_4, nullptr, VAR_28.IsArgSet(\"-version\"));\n        VAR_29.showOrPrint();\n        return VAR_30;\n    }\n\n    /* COMMENT_19 */\n    /* COMMENT_20 */\n    if (!Intro::pickDataDirectory(*VAR_4))\n        return VAR_30;\n\n    /* COMMENT_21 */\n    /* COMMENT_22 */\n    if (!fs::is_directory(GetDataDir(false)))\n    {\n        VAR_4->initError(strprintf(\"Specified data directory \\\"%s\\\" does not exist.\\n\", VAR_28.GetArg(\"-datadir\", \"\")));\n        QMessageBox::critical(nullptr, VAR_19,\n            QObject::tr(\"Error: Specified data directory \\\"%1\\\" does not exist.\").arg(QString::fromStdString(VAR_28.GetArg(\"-datadir\", \"\"))));\n        return VAR_20;\n    }\n    if (!VAR_4->readConfigFiles(VAR_18)) {\n        VAR_4->initError(strprintf(\"Error reading configuration file: %s\\n\", VAR_18));\n        QMessageBox::critical(nullptr, VAR_19,\n            QObject::tr(\"Error: Cannot parse configuration file: %1.\").arg(QString::fromStdString(VAR_18)));\n        return VAR_20;\n    }\n\n    /* COMMENT_23 */\n    /* COMMENT_24 */\n    /* COMMENT_25 */\n    /* COMMENT_26 */\n    /* COMMENT_27 */\n\n    /* COMMENT_28 */\n    try {\n        VAR_4->selectParams(VAR_28.GetChainName());\n    } catch(std::exception &VAR_31) {\n        VAR_4->initError(strprintf(\"%s\\n\", VAR_31.what()));\n        QMessageBox::critical(nullptr, VAR_19, QObject::tr(\"Error: %1\").arg(VAR_31.what()));\n        return VAR_20;\n    }\n#ifdef VAR_17\n    /* COMMENT_29 */\n    PaymentServer::ipcParseCommandLine(*VAR_4, VAR_0, VAR_1);\n#endif\n\n    QScopedPointer<const NetworkStyle> VAR_32(NetworkStyle::instantiate(QString::fromStdString(Params().NetworkIDString())));\n    assert(!VAR_32.isNull());\n    /* COMMENT_30 */\n    QApplication::setApplicationName(VAR_32->getAppName());\n    /* COMMENT_31 */\n    initTranslations(VAR_24, VAR_25, VAR_26, VAR_27);\n\n#ifdef VAR_17\n    /* COMMENT_32 */\n    /* COMMENT_33 */\n    /* COMMENT_34 */\n    /* COMMENT_35 */\n    /* COMMENT_36 */\n    /* COMMENT_37 */\n    if (PaymentServer::ipcSendCommandLine())\n        exit(VAR_30);\n\n    /* COMMENT_38 */\n    /* COMMENT_39 */\n    if (WalletModel::isWalletEnabled()) {\n        VAR_15.createPaymentServer();\n    }\n#endif /* COMMENT_40 */\n\n    /* COMMENT_41 */\n    /* COMMENT_42 */\n    VAR_15.installEventFilter(new GUIUtil::ToolTipToRichTextFilter(VAR_33, &VAR_15));\n#if defined(VAR_34)\n    /* COMMENT_43 */\n    VAR_35->installNativeEventFilter(new WinShutdownMonitor());\n#endif\n    /* COMMENT_44 */\n    qInstallMessageHandler(VAR_36);\n    /* COMMENT_45 */\n    VAR_15.parameterSetup();\n    /* COMMENT_46 */\n    VAR_15.createOptionsModel(VAR_28.GetBoolArg(\"-resetguisettings\", false));\n\n    if (VAR_28.GetBoolArg(\"-splash\", VAR_37) && !VAR_28.GetBoolArg(\"-min\", false))\n        VAR_15.createSplashScreen(VAR_32.data());\n\n    int VAR_38 = VAR_30;\n    try\n    {\n        VAR_15.createWindow(VAR_32.data());\n        /* COMMENT_47 */\n        /* COMMENT_48 */\n        /* COMMENT_49 */\n        if (VAR_15.baseInitialize()) {\n            VAR_15.requestInitialize();\n#if defined(VAR_34)\n            WinShutdownMonitor::registerShutdownBlockReason(QObject::tr(\"%1 didn't yet exit safely...\").arg(VAR_19), (HWND)VAR_15.getMainWinId());\n#endif\n            VAR_15.exec();\n            VAR_15.requestShutdown();\n            VAR_15.exec();\n            VAR_38 = VAR_15.getReturnValue();\n        } else {\n            /* COMMENT_50 */\n            VAR_38 = VAR_20;\n        }\n    } catch (const std::exception& VAR_31) {\n        PrintExceptionContinue(&VAR_31, \"Runaway exception\");\n        VAR_15.handleRunawayException(QString::fromStdString(VAR_4->getWarnings(\"gui\")));\n    } catch (...) {\n        PrintExceptionContinue(nullptr, \"Runaway exception\");\n        VAR_15.handleRunawayException(QString::fromStdString(VAR_4->getWarnings(\"gui\")));\n    }\n    return VAR_38;\n}",
  "func_graph_path": null,
  "diff_func": "--- func_before\n+++ func_after\n@@ -29,7 +29,7 @@\n     QApplication::setAttribute(Qt::AA_DontShowIconsInMenus);\n #endif\n \n-    BitcoinApplication app(*node, argc, argv);\n+    BitcoinApplication app(*node);\n \n     // Register meta types used for QMetaObject::invokeMethod\n     qRegisterMetaType< bool* >();",
  "diff_line_info": {
    "deleted_lines": [
      "    BitcoinApplication app(*node, argc, argv);"
    ],
    "added_lines": [
      "    BitcoinApplication app(*node);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/bitcoin/bitcoin/pull/16578",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/bitcoin/bitcoin/pull/16578: 403 Client Error: Forbidden for url: https://api.github.com/repos/bitcoin/bitcoin/pulls/16578",
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Defect Remediation & Feature Upgrades; **Confidence:** 0.9"
}