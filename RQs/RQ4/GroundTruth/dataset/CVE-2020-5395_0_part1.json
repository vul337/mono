{
  "cve_id": "CVE-2020-5395",
  "cwe_ids": [
    "CWE-416"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "fontforge",
  "commit_msg": "Fix for #4084 Use-after-free (heap) in the SFD_GetFontMetaData() function\nFix for #4086 NULL pointer dereference in the SFDGetSpiros() function\nFix for #4088 NULL pointer dereference in the SFD_AssignLookups() function\nAdd empty sf->fontname string if it isn't set, fixing #4089 #4090 and many\n  other potential issues (many downstream calls to strlen() on the value).",
  "commit_hash": "8da6d56bf7af2d25f779e52edef61b2fd4557b3c",
  "git_url": "https://github.com/fontforge/fontforge/commit/8da6d56bf7af2d25f779e52edef61b2fd4557b3c",
  "file_path": "fontforge/sfd.c",
  "func_name": "SFDGetSpiros",
  "func_before": "static void SFDGetSpiros(FILE *sfd,SplineSet *cur) {\n    int ch;\n    spiro_cp cp;\n\n    ch = nlgetc(sfd);\t\t/* S */\n    ch = nlgetc(sfd);\t\t/* p */\n    ch = nlgetc(sfd);\t\t/* i */\n    ch = nlgetc(sfd);\t\t/* r */\n    ch = nlgetc(sfd);\t\t/* o */\n    while ( fscanf(sfd,\"%lg %lg %c\", &cp.x, &cp.y, &cp.ty )==3 ) {\n\tif ( cur!=NULL ) {\n\t    if ( cur->spiro_cnt>=cur->spiro_max )\n\t\tcur->spiros = realloc(cur->spiros,(cur->spiro_max+=10)*sizeof(spiro_cp));\n\t    cur->spiros[cur->spiro_cnt++] = cp;\n\t}\n    }\n    if ( cur!=NULL && (cur->spiros[cur->spiro_cnt-1].ty&0x7f)!=SPIRO_END ) {\n\tif ( cur->spiro_cnt>=cur->spiro_max )\n\t    cur->spiros = realloc(cur->spiros,(cur->spiro_max+=1)*sizeof(spiro_cp));\n\tmemset(&cur->spiros[cur->spiro_cnt],0,sizeof(spiro_cp));\n\tcur->spiros[cur->spiro_cnt++].ty = SPIRO_END;\n    }\n    ch = nlgetc(sfd);\n    if ( ch=='E' ) {\n\tch = nlgetc(sfd);\t\t/* n */\n\tch = nlgetc(sfd);\t\t/* d */\n\tch = nlgetc(sfd);\t\t/* S */\n\tch = nlgetc(sfd);\t\t/* p */\n\tch = nlgetc(sfd);\t\t/* i */\n\tch = nlgetc(sfd);\t\t/* r */\n\tch = nlgetc(sfd);\t\t/* o */\n    } else\n\tungetc(ch,sfd);\n}",
  "abstract_func_before": "static void SFDGetSpiros(FILE *VAR_0,SplineSet *VAR_1) {\n    int VAR_2;\n    spiro_cp VAR_3;\n\n    VAR_2 = nlgetc(VAR_0);\t\t/* COMMENT_0 */\n    VAR_2 = nlgetc(VAR_0);\t\t/* COMMENT_1 */\n    VAR_2 = nlgetc(VAR_0);\t\t/* COMMENT_2 */\n    VAR_2 = nlgetc(VAR_0);\t\t/* COMMENT_3 */\n    VAR_2 = nlgetc(VAR_0);\t\t/* COMMENT_4 */\n    while ( fscanf(VAR_0,\"%lg %lg %c\", &VAR_3.x, &VAR_3.y, &VAR_3.ty )==3 ) {\n\tif ( VAR_1!=NULL ) {\n\t    if ( VAR_1->spiro_cnt>=VAR_1->spiro_max )\n\t\tVAR_1->spiros = realloc(VAR_1->spiros,(VAR_1->spiro_max+=10)*sizeof(spiro_cp));\n\t    VAR_1->spiros[VAR_1->spiro_cnt++] = VAR_3;\n\t}\n    }\n    if ( VAR_1!=NULL && (VAR_1->spiros[VAR_1->spiro_cnt-1].ty&0x7f)!=VAR_4 ) {\n\tif ( VAR_1->spiro_cnt>=VAR_1->spiro_max )\n\t    VAR_1->spiros = realloc(VAR_1->spiros,(VAR_1->spiro_max+=1)*sizeof(spiro_cp));\n\tmemset(&VAR_1->spiros[VAR_1->spiro_cnt],0,sizeof(spiro_cp));\n\tVAR_1->spiros[VAR_1->spiro_cnt++].ty = VAR_4;\n    }\n    VAR_2 = nlgetc(VAR_0);\n    if ( VAR_2=='E' ) {\n\tVAR_2 = nlgetc(VAR_0);\t\t/* COMMENT_5 */\n\tVAR_2 = nlgetc(VAR_0);\t\t/* COMMENT_6 */\n\tVAR_2 = nlgetc(VAR_0);\t\t/* COMMENT_0 */\n\tVAR_2 = nlgetc(VAR_0);\t\t/* COMMENT_1 */\n\tVAR_2 = nlgetc(VAR_0);\t\t/* COMMENT_2 */\n\tVAR_2 = nlgetc(VAR_0);\t\t/* COMMENT_3 */\n\tVAR_2 = nlgetc(VAR_0);\t\t/* COMMENT_4 */\n    } else\n\tungetc(VAR_2,VAR_0);\n}",
  "func_graph_path_before": "fontforge/8da6d56bf7af2d25f779e52edef61b2fd4557b3c/sfd.c/vul/before/1.json",
  "func": "static void SFDGetSpiros(FILE *sfd,SplineSet *cur) {\n    int ch;\n    spiro_cp cp;\n\n    ch = nlgetc(sfd);\t\t/* S */\n    ch = nlgetc(sfd);\t\t/* p */\n    ch = nlgetc(sfd);\t\t/* i */\n    ch = nlgetc(sfd);\t\t/* r */\n    ch = nlgetc(sfd);\t\t/* o */\n    while ( fscanf(sfd,\"%lg %lg %c\", &cp.x, &cp.y, &cp.ty )==3 ) {\n\tif ( cur!=NULL ) {\n\t    if ( cur->spiro_cnt>=cur->spiro_max )\n\t\tcur->spiros = realloc(cur->spiros,\n\t\t                      (cur->spiro_max+=10)*sizeof(spiro_cp));\n\t    cur->spiros[cur->spiro_cnt++] = cp;\n\t}\n    }\n    if (    cur!=NULL && cur->spiro_cnt>0\n         && (cur->spiros[cur->spiro_cnt-1].ty&0x7f)!=SPIRO_END ) {\n\tif ( cur->spiro_cnt>=cur->spiro_max )\n\t    cur->spiros = realloc(cur->spiros,\n\t                          (cur->spiro_max+=1)*sizeof(spiro_cp));\n\tmemset(&cur->spiros[cur->spiro_cnt],0,sizeof(spiro_cp));\n\tcur->spiros[cur->spiro_cnt++].ty = SPIRO_END;\n    }\n    ch = nlgetc(sfd);\n    if ( ch=='E' ) {\n\tch = nlgetc(sfd);\t\t/* n */\n\tch = nlgetc(sfd);\t\t/* d */\n\tch = nlgetc(sfd);\t\t/* S */\n\tch = nlgetc(sfd);\t\t/* p */\n\tch = nlgetc(sfd);\t\t/* i */\n\tch = nlgetc(sfd);\t\t/* r */\n\tch = nlgetc(sfd);\t\t/* o */\n    } else\n\tungetc(ch,sfd);\n}",
  "abstract_func": "static void SFDGetSpiros(FILE *VAR_0,SplineSet *VAR_1) {\n    int VAR_2;\n    spiro_cp VAR_3;\n\n    VAR_2 = nlgetc(VAR_0);\t\t/* COMMENT_0 */\n    VAR_2 = nlgetc(VAR_0);\t\t/* COMMENT_1 */\n    VAR_2 = nlgetc(VAR_0);\t\t/* COMMENT_2 */\n    VAR_2 = nlgetc(VAR_0);\t\t/* COMMENT_3 */\n    VAR_2 = nlgetc(VAR_0);\t\t/* COMMENT_4 */\n    while ( fscanf(VAR_0,\"%lg %lg %c\", &VAR_3.x, &VAR_3.y, &VAR_3.ty )==3 ) {\n\tif ( VAR_1!=NULL ) {\n\t    if ( VAR_1->spiro_cnt>=VAR_1->spiro_max )\n\t\tVAR_1->spiros = realloc(VAR_1->spiros,\n\t\t                      (VAR_1->spiro_max+=10)*sizeof(spiro_cp));\n\t    VAR_1->spiros[VAR_1->spiro_cnt++] = VAR_3;\n\t}\n    }\n    if (    VAR_1!=NULL && VAR_1->spiro_cnt>0\n         && (VAR_1->spiros[VAR_1->spiro_cnt-1].ty&0x7f)!=VAR_4 ) {\n\tif ( VAR_1->spiro_cnt>=VAR_1->spiro_max )\n\t    VAR_1->spiros = realloc(VAR_1->spiros,\n\t                          (VAR_1->spiro_max+=1)*sizeof(spiro_cp));\n\tmemset(&VAR_1->spiros[VAR_1->spiro_cnt],0,sizeof(spiro_cp));\n\tVAR_1->spiros[VAR_1->spiro_cnt++].ty = VAR_4;\n    }\n    VAR_2 = nlgetc(VAR_0);\n    if ( VAR_2=='E' ) {\n\tVAR_2 = nlgetc(VAR_0);\t\t/* COMMENT_5 */\n\tVAR_2 = nlgetc(VAR_0);\t\t/* COMMENT_6 */\n\tVAR_2 = nlgetc(VAR_0);\t\t/* COMMENT_0 */\n\tVAR_2 = nlgetc(VAR_0);\t\t/* COMMENT_1 */\n\tVAR_2 = nlgetc(VAR_0);\t\t/* COMMENT_2 */\n\tVAR_2 = nlgetc(VAR_0);\t\t/* COMMENT_3 */\n\tVAR_2 = nlgetc(VAR_0);\t\t/* COMMENT_4 */\n    } else\n\tungetc(VAR_2,VAR_0);\n}",
  "func_graph_path": "fontforge/8da6d56bf7af2d25f779e52edef61b2fd4557b3c/sfd.c/vul/after/1.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -10,13 +10,16 @@\n     while ( fscanf(sfd,\"%lg %lg %c\", &cp.x, &cp.y, &cp.ty )==3 ) {\n \tif ( cur!=NULL ) {\n \t    if ( cur->spiro_cnt>=cur->spiro_max )\n-\t\tcur->spiros = realloc(cur->spiros,(cur->spiro_max+=10)*sizeof(spiro_cp));\n+\t\tcur->spiros = realloc(cur->spiros,\n+\t\t                      (cur->spiro_max+=10)*sizeof(spiro_cp));\n \t    cur->spiros[cur->spiro_cnt++] = cp;\n \t}\n     }\n-    if ( cur!=NULL && (cur->spiros[cur->spiro_cnt-1].ty&0x7f)!=SPIRO_END ) {\n+    if (    cur!=NULL && cur->spiro_cnt>0\n+         && (cur->spiros[cur->spiro_cnt-1].ty&0x7f)!=SPIRO_END ) {\n \tif ( cur->spiro_cnt>=cur->spiro_max )\n-\t    cur->spiros = realloc(cur->spiros,(cur->spiro_max+=1)*sizeof(spiro_cp));\n+\t    cur->spiros = realloc(cur->spiros,\n+\t                          (cur->spiro_max+=1)*sizeof(spiro_cp));\n \tmemset(&cur->spiros[cur->spiro_cnt],0,sizeof(spiro_cp));\n \tcur->spiros[cur->spiro_cnt++].ty = SPIRO_END;\n     }",
  "diff_line_info": {
    "deleted_lines": [
      "\t\tcur->spiros = realloc(cur->spiros,(cur->spiro_max+=10)*sizeof(spiro_cp));",
      "    if ( cur!=NULL && (cur->spiros[cur->spiro_cnt-1].ty&0x7f)!=SPIRO_END ) {",
      "\t    cur->spiros = realloc(cur->spiros,(cur->spiro_max+=1)*sizeof(spiro_cp));"
    ],
    "added_lines": [
      "\t\tcur->spiros = realloc(cur->spiros,",
      "\t\t                      (cur->spiro_max+=10)*sizeof(spiro_cp));",
      "    if (    cur!=NULL && cur->spiro_cnt>0",
      "         && (cur->spiros[cur->spiro_cnt-1].ty&0x7f)!=SPIRO_END ) {",
      "\t    cur->spiros = realloc(cur->spiros,",
      "\t                          (cur->spiro_max+=1)*sizeof(spiro_cp));"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/fontforge/fontforge/pull/4091",
  "description": {
    "pr_info": {
      "title": "Misc CVE fixes",
      "number": 4091
    },
    "comment": [
      "Fix for #4084 Use-after-free (heap) in the SFD_GetFontMetaData() function\r\nFix for #4086 NULL pointer dereference in the SFDGetSpiros() function\r\nFix for #4088 NULL pointer dereference in the SFD_AssignLookups() function\r\nAdd empty sf->fontname string if it isn't set, fixing #4089 #4090 and many\r\n  other potential issues (many downstream calls to strlen() on the value).\r\n\r\nCloses #4084 \r\nCloses #4086 \r\nCloses #4088 \r\nCloses #4089 \r\nCloses #4090 \r\n\r\nMeta-note: That I am continually annoyed at the number of open FontForge issues does not imply this is not a waste of time. ",
      "You guys played really hard-to-get on this one!\r\n",
      "@frank-trampe These sorta feel less like maintenance than gamification. ",
      "It's all the rage these days.\r\n"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 1.0"
}