{
  "cve_id": "CVE-2023-28630",
  "cwe_ids": [
    "CWE-532"
  ],
  "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:H/UI:N/S:U/C:H/I:N/A:N",
  "cvss_is_v3": true,
  "repo_name": "gocd",
  "commit_msg": "Improve error messages on failure to launch backup process\n\nztexec can include env vars in the error message which we don't want in this case.",
  "commit_hash": "6545481e7b36817dd6033bf614585a8db242070d",
  "git_url": "https://github.com/gocd/gocd/commit/6545481e7b36817dd6033bf614585a8db242070d",
  "file_path": "db-support/db-support-mysql/src/main/java/com/thoughtworks/go/server/database/mysql/MySQLBackupProcessor.java",
  "func_name": "createProcessExecutor",
  "func_before": "private ProcessExecutor createProcessExecutor(File targetDir, DbProperties dbProperties) {\n        ConnectionUrl connectionUrlInstance = ConnectionUrl.getConnectionUrlInstance(dbProperties.url(), dbProperties.connectionProperties());\n\n        LinkedHashMap<String, String> env = new LinkedHashMap<>();\n        if (isNotBlank(dbProperties.password())) {\n            env.put(\"MYSQL_PWD\", dbProperties.password());\n        }\n        // override with any user specified environment\n        env.putAll(dbProperties.extraBackupEnv());\n\n        ArrayList<String> argv = new ArrayList<>();\n        argv.add(\"mysqldump\");\n\n\n        String dbName = connectionUrlInstance.getDatabase();\n        HostInfo mainHost = connectionUrlInstance.getMainHost();\n\n        if (mainHost != null) {\n            argv.add(\"--host=\" + mainHost.getHost());\n            argv.add(\"--port=\" + mainHost.getPort());\n        }\n        if (isNotBlank(dbProperties.user())) {\n            argv.add(\"--user=\" + dbProperties.user());\n        }\n\n        // append any user specified args for mysqldump\n        if (isNotBlank(dbProperties.extraBackupCommandArgs())) {\n            Collections.addAll(argv, Commandline.translateCommandline(dbProperties.extraBackupCommandArgs()));\n        }\n\n        argv.add(\"--result-file=\" + new File(targetDir, \"db.\" + dbName).toString());\n        argv.add(connectionUrlInstance.getDatabase());\n\n        ProcessExecutor processExecutor = new ProcessExecutor();\n        processExecutor.redirectOutputAlsoTo(Slf4jStream.of(getClass()).asDebug());\n        processExecutor.redirectErrorAlsoTo(Slf4jStream.of(getClass()).asDebug());\n        processExecutor.environment(env);\n        processExecutor.command(argv);\n        return processExecutor;\n    }",
  "abstract_func_before": "private ProcessExecutor createProcessExecutor(File VAR_0, DbProperties VAR_1) {\n        ConnectionUrl VAR_2 = VAR_3.getConnectionUrlInstance(VAR_1.url(), VAR_1.connectionProperties());\n\n        LinkedHashMap<String, String> VAR_4 = new LinkedHashMap<>();\n        if (isNotBlank(VAR_1.password())) {\n            VAR_4.put(\"MYSQL_PWD\", VAR_1.password());\n        }\n        /* COMMENT_0 */\n        VAR_4.putAll(VAR_1.extraBackupEnv());\n\n        ArrayList<String> VAR_5 = new ArrayList<>();\n        VAR_5.add(\"mysqldump\");\n\n\n        String VAR_6 = VAR_2.getDatabase();\n        HostInfo VAR_7 = VAR_2.getMainHost();\n\n        if (VAR_7 != null) {\n            VAR_5.add(\"--host=\" + VAR_7.getHost());\n            VAR_5.add(\"--port=\" + VAR_7.getPort());\n        }\n        if (isNotBlank(VAR_1.user())) {\n            VAR_5.add(\"--user=\" + VAR_1.user());\n        }\n\n        /* COMMENT_1 */\n        if (isNotBlank(VAR_1.extraBackupCommandArgs())) {\n            VAR_8.addAll(VAR_5, VAR_9.translateCommandline(VAR_1.extraBackupCommandArgs()));\n        }\n\n        VAR_5.add(\"--result-file=\" + new File(VAR_0, \"db.\" + VAR_6).toString());\n        VAR_5.add(VAR_2.getDatabase());\n\n        ProcessExecutor VAR_10 = new ProcessExecutor();\n        VAR_10.redirectOutputAlsoTo(VAR_11.of(getClass()).asDebug());\n        VAR_10.redirectErrorAlsoTo(VAR_11.of(getClass()).asDebug());\n        VAR_10.environment(VAR_4);\n        VAR_10.command(VAR_5);\n        return VAR_10;\n    }",
  "func_graph_path_before": "gocd/6545481e7b36817dd6033bf614585a8db242070d/MySQLBackupProcessor.java/vul/before/1.json",
  "func": "private ProcessExecutor createProcessExecutor(File targetDir, DbProperties dbProperties) {\n        ConnectionUrl connectionUrlInstance = ConnectionUrl.getConnectionUrlInstance(dbProperties.url(), dbProperties.connectionProperties());\n\n        Map<String, String> env = new LinkedHashMap<>();\n        if (isNotBlank(dbProperties.password())) {\n            env.put(\"MYSQL_PWD\", dbProperties.password());\n        }\n        // override with any user specified environment\n        env.putAll(dbProperties.extraBackupEnv());\n\n        List<String> argv = new ArrayList<>();\n        argv.add(COMMAND);\n\n        String dbName = connectionUrlInstance.getDatabase();\n        HostInfo mainHost = connectionUrlInstance.getMainHost();\n\n        if (mainHost != null) {\n            argv.add(\"--host=\" + mainHost.getHost());\n            argv.add(\"--port=\" + mainHost.getPort());\n        }\n        if (isNotBlank(dbProperties.user())) {\n            argv.add(\"--user=\" + dbProperties.user());\n        }\n\n        // append any user specified args for mysqldump\n        if (isNotBlank(dbProperties.extraBackupCommandArgs())) {\n            Collections.addAll(argv, Commandline.translateCommandline(dbProperties.extraBackupCommandArgs()));\n        }\n\n        argv.add(\"--result-file=\" + new File(targetDir, \"db.\" + dbName));\n        argv.add(connectionUrlInstance.getDatabase());\n\n        ProcessExecutor processExecutor = new ProcessExecutor();\n        processExecutor.redirectOutputAlsoTo(Slf4jStream.of(getClass()).asDebug());\n        processExecutor.redirectErrorAlsoTo(Slf4jStream.of(getClass()).asDebug());\n        processExecutor.environment(env);\n        processExecutor.command(argv);\n        return processExecutor;\n    }",
  "abstract_func": "private ProcessExecutor createProcessExecutor(File VAR_0, DbProperties VAR_1) {\n        ConnectionUrl VAR_2 = VAR_3.getConnectionUrlInstance(VAR_1.url(), VAR_1.connectionProperties());\n\n        Map<String, String> VAR_4 = new LinkedHashMap<>();\n        if (isNotBlank(VAR_1.password())) {\n            VAR_4.put(\"MYSQL_PWD\", VAR_1.password());\n        }\n        /* COMMENT_0 */\n        VAR_4.putAll(VAR_1.extraBackupEnv());\n\n        List<String> VAR_5 = new ArrayList<>();\n        VAR_5.add(VAR_6);\n\n        String VAR_7 = VAR_2.getDatabase();\n        HostInfo VAR_8 = VAR_2.getMainHost();\n\n        if (VAR_8 != null) {\n            VAR_5.add(\"--host=\" + VAR_8.getHost());\n            VAR_5.add(\"--port=\" + VAR_8.getPort());\n        }\n        if (isNotBlank(VAR_1.user())) {\n            VAR_5.add(\"--user=\" + VAR_1.user());\n        }\n\n        /* COMMENT_1 */\n        if (isNotBlank(VAR_1.extraBackupCommandArgs())) {\n            VAR_9.addAll(VAR_5, VAR_10.translateCommandline(VAR_1.extraBackupCommandArgs()));\n        }\n\n        VAR_5.add(\"--result-file=\" + new File(VAR_0, \"db.\" + VAR_7));\n        VAR_5.add(VAR_2.getDatabase());\n\n        ProcessExecutor VAR_11 = new ProcessExecutor();\n        VAR_11.redirectOutputAlsoTo(VAR_12.of(getClass()).asDebug());\n        VAR_11.redirectErrorAlsoTo(VAR_12.of(getClass()).asDebug());\n        VAR_11.environment(VAR_4);\n        VAR_11.command(VAR_5);\n        return VAR_11;\n    }",
  "func_graph_path": "gocd/6545481e7b36817dd6033bf614585a8db242070d/MySQLBackupProcessor.java/vul/after/1.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,16 +1,15 @@\n private ProcessExecutor createProcessExecutor(File targetDir, DbProperties dbProperties) {\n         ConnectionUrl connectionUrlInstance = ConnectionUrl.getConnectionUrlInstance(dbProperties.url(), dbProperties.connectionProperties());\n \n-        LinkedHashMap<String, String> env = new LinkedHashMap<>();\n+        Map<String, String> env = new LinkedHashMap<>();\n         if (isNotBlank(dbProperties.password())) {\n             env.put(\"MYSQL_PWD\", dbProperties.password());\n         }\n         // override with any user specified environment\n         env.putAll(dbProperties.extraBackupEnv());\n \n-        ArrayList<String> argv = new ArrayList<>();\n-        argv.add(\"mysqldump\");\n-\n+        List<String> argv = new ArrayList<>();\n+        argv.add(COMMAND);\n \n         String dbName = connectionUrlInstance.getDatabase();\n         HostInfo mainHost = connectionUrlInstance.getMainHost();\n@@ -28,7 +27,7 @@\n             Collections.addAll(argv, Commandline.translateCommandline(dbProperties.extraBackupCommandArgs()));\n         }\n \n-        argv.add(\"--result-file=\" + new File(targetDir, \"db.\" + dbName).toString());\n+        argv.add(\"--result-file=\" + new File(targetDir, \"db.\" + dbName));\n         argv.add(connectionUrlInstance.getDatabase());\n \n         ProcessExecutor processExecutor = new ProcessExecutor();",
  "diff_line_info": {
    "deleted_lines": [
      "        LinkedHashMap<String, String> env = new LinkedHashMap<>();",
      "        ArrayList<String> argv = new ArrayList<>();",
      "        argv.add(\"mysqldump\");",
      "",
      "        argv.add(\"--result-file=\" + new File(targetDir, \"db.\" + dbName).toString());"
    ],
    "added_lines": [
      "        Map<String, String> env = new LinkedHashMap<>();",
      "        List<String> argv = new ArrayList<>();",
      "        argv.add(COMMAND);",
      "        argv.add(\"--result-file=\" + new File(targetDir, \"db.\" + dbName));"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/gocd/gocd/pull/11047",
  "description": {
    "pr_info": {
      "title": "Improve error messages on failure to launch DB backup process",
      "number": 11047
    },
    "comment": [
      "ztexec can include env vars in the error message of the thrown exception which we don't want."
    ]
  },
  "Bug Filter": "Supporting & Non-Core Improvements",
  "Bug Filter Confidence": 0.6,
  "Bug Filter Response": "**Final Classification:** Supporting & Non-Core Improvements  \n**Confidence:** 0.6"
}