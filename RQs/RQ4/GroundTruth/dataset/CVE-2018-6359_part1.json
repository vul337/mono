{
  "cve_id": "CVE-2018-6359",
  "cwe_ids": [
    "CWE-416"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "libming",
  "commit_msg": "Use OpCode instead of directly accessing actions\n\nInstead of directly accessing the actions array without checks\nfor the value of n (which may lead to heap buffer overflow etc,\nsee #83 or #105), use the dedicated OpCode function.",
  "commit_hash": "9c53bf8e165c3a74e20f4c93b4ab6c05fe67f187",
  "git_url": "https://github.com/libming/libming/commit/9c53bf8e165c3a74e20f4c93b4ab6c05fe67f187",
  "file_path": "util/decompile.c",
  "func_name": "decompileArithmeticOp",
  "func_before": "static int\ndecompileArithmeticOp(int n, SWF_ACTION *actions, int maxn)\n{\n\tstruct SWF_ACTIONPUSHPARAM *left, *right;\n\tint op_l = OpCode(actions, n, maxn);\n\tint op_r = OpCode(actions, n+1, maxn);\n\tright=pop();\n\tleft=pop();\n\tswitch(OpCode(actions, n, maxn))\n\t{\n\t/*\n\tcase SWFACTION_GETMEMBER:\n\t\tdecompilePUSHPARAM(peek(),0);\n\t\tbreak;\n\t*/\n\tcase SWFACTION_INSTANCEOF:\n\t\tif (precedence(op_l, op_r))\n\t\t\tpush(newVar3(getString(left),\" instanceof \",getString(right)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(left),\" instanceof \",getString(right),0,\")\"));\n\t\tbreak;\n\tcase SWFACTION_ADD:\n\tcase SWFACTION_ADD2:\n\t\tif (precedence(op_l, op_r))\n\t\t\tpush(newVar3(getString(left),\"+\",getString(right)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(left),\"+\",getString(right),0,\")\"));\n\t\tbreak;\n\tcase SWFACTION_SUBTRACT:\n\t\tif (precedence(op_l, op_r))\n\t\t\tpush(newVar3(getString(left),\"-\",getString(right)));\t      \n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(left),\"-\",getString(right),0,\")\"));\n\t\tbreak;\n\tcase SWFACTION_MULTIPLY:\n\t\tif (precedence(op_l, op_r))\n\t\t\tpush(newVar3(getString(left),\"*\",getString(right)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(left),\"*\",getString(right),0,\")\"));\n\t\tbreak;\n\tcase SWFACTION_DIVIDE:\n\t\tif (precedence(op_l, op_r))\n\t\t\tpush(newVar3(getString(left),\"/\",getString(right)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(left),\"/\",getString(right),0,\")\"));\n\t\tbreak;\n\tcase SWFACTION_MODULO:\n\t\tif (precedence(op_l, op_r))\n\t\t\tpush(newVar3(getString(left),\"%\",getString(right)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(left),\"%\",getString(right),0,\")\"));\n\t\tbreak;\n\tcase SWFACTION_SHIFTLEFT:\n\t\tif (precedence(op_l, op_r))\n\t\t\tpush(newVar3(getString(left),\"<<\",getString(right)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(left),\"<<\",getString(right),0,\")\"));\n\t\tbreak;\n\tcase SWFACTION_SHIFTRIGHT:\n\t\tif (precedence(op_l, op_r))\n\t\t\tpush(newVar3(getString(left),\">>\",getString(right)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(left),\">>\",getString(right),0,\")\"));\n\t\tbreak;\n\tcase SWFACTION_SHIFTRIGHT2:\n\t\tif (precedence(op_l, op_r))\n\t\t\tpush(newVar3(getString(left),\">>>\",getString(right)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(left),\">>>\",getString(right),0,\")\"));\n\t\tbreak;\n\tcase SWFACTION_LOGICALAND:\n\t\tif (precedence(op_l, op_r))\n\t\t\tpush(newVar3(getString(left),\"&&\",getString(right)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(left),\"&&\",getString(right),0,\")\"));\n\t\tbreak;\n\tcase SWFACTION_LOGICALOR:\n\t\tif (precedence(op_l, op_r))\n\t\t\tpush(newVar3(getString(left),\"||\",getString(right)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(left),\"||\",getString(right),0,\")\"));\n\t\tbreak;\n\tcase SWFACTION_BITWISEAND:\n\t\tif (precedence(op_l, op_r))\n\t\t\tpush(newVar3(getString(left),\"&\",getString(right)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(left),\"&\",getString(right),0,\")\"));\n\t\tbreak;\n\tcase SWFACTION_BITWISEOR:\n\t\tif (precedence(op_l, op_r))\n\t\t\tpush(newVar3(getString(left),\"|\",getString(right)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(left),\"|\",getString(right),0,\")\"));\n\t\tbreak;\n\tcase SWFACTION_BITWISEXOR:\n\t\tif (precedence(op_l, op_r))\n\t\t\tpush(newVar3(getString(left),\"^\",getString(right)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(left),\"^\",getString(right),0,\")\"));\n\t\tbreak;\n\tcase SWFACTION_EQUALS2:\t/* including negation */\n\tcase SWFACTION_EQUAL:\n\t\tif( OpCode(actions, n+1, maxn) == SWFACTION_LOGICALNOT &&\n\t\t    OpCode(actions, n+2, maxn) != SWFACTION_IF)\n\t\t{\n\t\t\top_r = OpCode(actions, n+1, maxn);\n\t\t\tif (precedence(op_l, op_r))\n\t\t\t\tpush(newVar3(getString(left),\"!=\",getString(right)));\n\t\t\telse\n\t\t\t\tpush(newVar_N(\"(\",getString(left),\"!=\",getString(right),0,\")\"));\n\t\t\treturn 1; /* due negation op */\n\t\t}\n\t\tif (precedence(op_l, op_r))\n\t\t\tpush(newVar3(getString(left),\"==\",getString(right)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(left),\"==\",getString(right),0,\")\"));\n\t\tbreak;\n\tcase SWFACTION_LESS2:\n\t\tif( OpCode(actions, n+1, maxn)  == SWFACTION_LOGICALNOT &&\n\t\t    OpCode(actions, n+2, maxn) != SWFACTION_IF ) \n\t\t{\n\t\t\top_r = OpCode(actions, n+2, maxn);\n\t\t\tif (precedence(op_l, op_r))\n\t\t\t\tpush(newVar3(getString(left),\">=\",getString(right)));\n\t\t\telse\n\t\t\t\tpush(newVar_N(\"(\",getString(left),\">=\",getString(right),0,\")\"));\n\t\t\treturn 1; /* due negation op */\n\t\t}\n\t\tif (precedence(op_l, op_r))\n\t\t\tpush(newVar3(getString(left),\"<\",getString(right)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(left),\"<\",getString(right),0,\")\"));\n\t\tbreak;\n\tcase SWFACTION_GREATER:\n\t\tif (precedence(op_l, op_r))\n\t\t\tpush(newVar3(getString(left),\">\",getString(right)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(left),\">\",getString(right),0,\")\"));\n\t\tbreak;\n\tcase SWFACTION_LESSTHAN:\n\t\tif (precedence(op_l, op_r))\n\t\t\tpush(newVar3(getString(left),\"<\",getString(right)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(left),\"<\",getString(right),0,\")\"));\n\t\tbreak;\n\tcase SWFACTION_STRINGEQ:\n\t\tif (precedence(op_l, op_r))\n\t\t\tpush(newVar3(getString(left),\"==\",getString(right)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(left),\"==\",getString(right),0,\")\"));\n\t\tbreak;\n\tcase SWFACTION_STRINGCOMPARE:\n\t\tputs(\"STRINGCOMPARE\");\n\t\tbreak;\n\tcase SWFACTION_STRICTEQUALS:\n#ifdef DECOMP_SWITCH\n\t\tif  (OpCode(actions, n, maxn) == SWFACTION_IF)\n\t\t{\n\t\t\tint code = actions[n+1].SWF_ACTIONIF.Actions[0].SWF_ACTIONRECORD.ActionCode;\n\t\t\tif(check_switch(code))\n\t\t\t{\n\t\t\t\tpush(right);\t// keep left and right side separated\n\t\t\t\tpush(left);\t// because it seems we have found a switch(){} and\n\t\t\t\tbreak;\t// let decompileIF() once more do all the dirty work\n\t\t\t}\n\t\t}\n#endif\n\t\tif( OpCode(actions, n+1, maxn) == SWFACTION_LOGICALNOT &&\n\t\t    OpCode(actions, n+2, maxn) != SWFACTION_IF ) \n\t\t{\n\t\t\top_r = OpCode(actions, n+2, maxn);\n\t\t\tif (precedence(op_l, op_r))\n\t\t\t\tpush(newVar3(getString(left),\"!==\",getString(right)));\n\t\t\telse\n\t\t\t\tpush(newVar_N(\"(\",getString(left),\"!==\",getString(right),0,\")\"));\n\t\t\treturn 1; /* due negation op */\n\t\t} else {\n\t\t\tif (precedence(op_l, op_r))\n\t\t\t\tpush(newVar3(getString(left),\"===\",getString(right)));\n\t\t\telse\n\t\t\t\tpush(newVar_N(\"(\",getString(left),\"===\",getString(right),0,\")\"));\n\t\t\tbreak;\n\t\t}\n\tdefault:\n\t\tprintf(\"Unhandled Arithmetic/Logic OP %x\\n\",\n\t\t\tactions[n].SWF_ACTIONRECORD.ActionCode);\n\t}\n\treturn 0;\n}",
  "abstract_func_before": "static int\ndecompileArithmeticOp(int VAR_0, SWF_ACTION *VAR_1, int VAR_2)\n{\n\tstruct SWF_ACTIONPUSHPARAM *VAR_3, *VAR_4;\n\tint VAR_5 = OpCode(VAR_1, VAR_0, VAR_2);\n\tint VAR_6 = OpCode(VAR_1, VAR_0+1, VAR_2);\n\tVAR_4=pop();\n\tVAR_3=pop();\n\tswitch(OpCode(VAR_1, VAR_0, VAR_2))\n\t{\n\t/* COMMENT_0 */\n                          \n                               \n        \n   \n\tcase VAR_7:\n\t\tif (precedence(VAR_5, VAR_6))\n\t\t\tpush(newVar3(getString(VAR_3),\" instanceof \",getString(VAR_4)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(VAR_3),\" instanceof \",getString(VAR_4),0,\")\"));\n\t\tbreak;\n\tcase VAR_8:\n\tcase VAR_9:\n\t\tif (precedence(VAR_5, VAR_6))\n\t\t\tpush(newVar3(getString(VAR_3),\"+\",getString(VAR_4)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(VAR_3),\"+\",getString(VAR_4),0,\")\"));\n\t\tbreak;\n\tcase VAR_10:\n\t\tif (precedence(VAR_5, VAR_6))\n\t\t\tpush(newVar3(getString(VAR_3),\"-\",getString(VAR_4)));\t      \n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(VAR_3),\"-\",getString(VAR_4),0,\")\"));\n\t\tbreak;\n\tcase VAR_11:\n\t\tif (precedence(VAR_5, VAR_6))\n\t\t\tpush(newVar3(getString(VAR_3),\"*\",getString(VAR_4)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(VAR_3),\"*\",getString(VAR_4),0,\")\"));\n\t\tbreak;\n\tcase VAR_12:\n\t\tif (precedence(VAR_5, VAR_6))\n\t\t\tpush(newVar3(getString(VAR_3),\"/\",getString(VAR_4)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(VAR_3),\"/\",getString(VAR_4),0,\")\"));\n\t\tbreak;\n\tcase VAR_13:\n\t\tif (precedence(VAR_5, VAR_6))\n\t\t\tpush(newVar3(getString(VAR_3),\"%\",getString(VAR_4)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(VAR_3),\"%\",getString(VAR_4),0,\")\"));\n\t\tbreak;\n\tcase VAR_14:\n\t\tif (precedence(VAR_5, VAR_6))\n\t\t\tpush(newVar3(getString(VAR_3),\"<<\",getString(VAR_4)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(VAR_3),\"<<\",getString(VAR_4),0,\")\"));\n\t\tbreak;\n\tcase VAR_15:\n\t\tif (precedence(VAR_5, VAR_6))\n\t\t\tpush(newVar3(getString(VAR_3),\">>\",getString(VAR_4)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(VAR_3),\">>\",getString(VAR_4),0,\")\"));\n\t\tbreak;\n\tcase VAR_16:\n\t\tif (precedence(VAR_5, VAR_6))\n\t\t\tpush(newVar3(getString(VAR_3),\">>>\",getString(VAR_4)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(VAR_3),\">>>\",getString(VAR_4),0,\")\"));\n\t\tbreak;\n\tcase VAR_17:\n\t\tif (precedence(VAR_5, VAR_6))\n\t\t\tpush(newVar3(getString(VAR_3),\"&&\",getString(VAR_4)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(VAR_3),\"&&\",getString(VAR_4),0,\")\"));\n\t\tbreak;\n\tcase VAR_18:\n\t\tif (precedence(VAR_5, VAR_6))\n\t\t\tpush(newVar3(getString(VAR_3),\"||\",getString(VAR_4)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(VAR_3),\"||\",getString(VAR_4),0,\")\"));\n\t\tbreak;\n\tcase VAR_19:\n\t\tif (precedence(VAR_5, VAR_6))\n\t\t\tpush(newVar3(getString(VAR_3),\"&\",getString(VAR_4)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(VAR_3),\"&\",getString(VAR_4),0,\")\"));\n\t\tbreak;\n\tcase VAR_20:\n\t\tif (precedence(VAR_5, VAR_6))\n\t\t\tpush(newVar3(getString(VAR_3),\"|\",getString(VAR_4)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(VAR_3),\"|\",getString(VAR_4),0,\")\"));\n\t\tbreak;\n\tcase VAR_21:\n\t\tif (precedence(VAR_5, VAR_6))\n\t\t\tpush(newVar3(getString(VAR_3),\"^\",getString(VAR_4)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(VAR_3),\"^\",getString(VAR_4),0,\")\"));\n\t\tbreak;\n\tcase VAR_22:\t/* COMMENT_5 */\n\tcase VAR_23:\n\t\tif( OpCode(VAR_1, VAR_0+1, VAR_2) == VAR_24 &&\n\t\t    OpCode(VAR_1, VAR_0+2, VAR_2) != VAR_25)\n\t\t{\n\t\t\tVAR_6 = OpCode(VAR_1, VAR_0+1, VAR_2);\n\t\t\tif (precedence(VAR_5, VAR_6))\n\t\t\t\tpush(newVar3(getString(VAR_3),\"!=\",getString(VAR_4)));\n\t\t\telse\n\t\t\t\tpush(newVar_N(\"(\",getString(VAR_3),\"!=\",getString(VAR_4),0,\")\"));\n\t\t\treturn 1; /* COMMENT_6 */\n\t\t}\n\t\tif (precedence(VAR_5, VAR_6))\n\t\t\tpush(newVar3(getString(VAR_3),\"==\",getString(VAR_4)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(VAR_3),\"==\",getString(VAR_4),0,\")\"));\n\t\tbreak;\n\tcase VAR_26:\n\t\tif( OpCode(VAR_1, VAR_0+1, VAR_2)  == VAR_24 &&\n\t\t    OpCode(VAR_1, VAR_0+2, VAR_2) != VAR_25 ) \n\t\t{\n\t\t\tVAR_6 = OpCode(VAR_1, VAR_0+2, VAR_2);\n\t\t\tif (precedence(VAR_5, VAR_6))\n\t\t\t\tpush(newVar3(getString(VAR_3),\">=\",getString(VAR_4)));\n\t\t\telse\n\t\t\t\tpush(newVar_N(\"(\",getString(VAR_3),\">=\",getString(VAR_4),0,\")\"));\n\t\t\treturn 1; /* COMMENT_6 */\n\t\t}\n\t\tif (precedence(VAR_5, VAR_6))\n\t\t\tpush(newVar3(getString(VAR_3),\"<\",getString(VAR_4)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(VAR_3),\"<\",getString(VAR_4),0,\")\"));\n\t\tbreak;\n\tcase VAR_27:\n\t\tif (precedence(VAR_5, VAR_6))\n\t\t\tpush(newVar3(getString(VAR_3),\">\",getString(VAR_4)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(VAR_3),\">\",getString(VAR_4),0,\")\"));\n\t\tbreak;\n\tcase VAR_28:\n\t\tif (precedence(VAR_5, VAR_6))\n\t\t\tpush(newVar3(getString(VAR_3),\"<\",getString(VAR_4)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(VAR_3),\"<\",getString(VAR_4),0,\")\"));\n\t\tbreak;\n\tcase VAR_29:\n\t\tif (precedence(VAR_5, VAR_6))\n\t\t\tpush(newVar3(getString(VAR_3),\"==\",getString(VAR_4)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(VAR_3),\"==\",getString(VAR_4),0,\")\"));\n\t\tbreak;\n\tcase VAR_30:\n\t\tputs(\"STRINGCOMPARE\");\n\t\tbreak;\n\tcase VAR_31:\n#ifdef VAR_32\n\t\tif  (OpCode(VAR_1, VAR_0, VAR_2) == VAR_25)\n\t\t{\n\t\t\tint VAR_33 = VAR_1[VAR_0+1].SWF_ACTIONIF.Actions[0].SWF_ACTIONRECORD.ActionCode;\n\t\t\tif(check_switch(VAR_33))\n\t\t\t{\n\t\t\t\tpush(VAR_4);\t/* COMMENT_7 */\n\t\t\t\tpush(VAR_3);\t/* COMMENT_8 */\n\t\t\t\tbreak;\t/* COMMENT_9 */\n\t\t\t}\n\t\t}\n#endif\n\t\tif( OpCode(VAR_1, VAR_0+1, VAR_2) == VAR_24 &&\n\t\t    OpCode(VAR_1, VAR_0+2, VAR_2) != VAR_25 ) \n\t\t{\n\t\t\tVAR_6 = OpCode(VAR_1, VAR_0+2, VAR_2);\n\t\t\tif (precedence(VAR_5, VAR_6))\n\t\t\t\tpush(newVar3(getString(VAR_3),\"!==\",getString(VAR_4)));\n\t\t\telse\n\t\t\t\tpush(newVar_N(\"(\",getString(VAR_3),\"!==\",getString(VAR_4),0,\")\"));\n\t\t\treturn 1; /* COMMENT_6 */\n\t\t} else {\n\t\t\tif (precedence(VAR_5, VAR_6))\n\t\t\t\tpush(newVar3(getString(VAR_3),\"===\",getString(VAR_4)));\n\t\t\telse\n\t\t\t\tpush(newVar_N(\"(\",getString(VAR_3),\"===\",getString(VAR_4),0,\")\"));\n\t\t\tbreak;\n\t\t}\n\tdefault:\n\t\tprintf(\"Unhandled Arithmetic/Logic OP %x\\n\",\n\t\t\tVAR_1[VAR_0].SWF_ACTIONRECORD.ActionCode);\n\t}\n\treturn 0;\n}",
  "func_graph_path_before": "libming/9c53bf8e165c3a74e20f4c93b4ab6c05fe67f187/decompile.c/vul/before/0.json",
  "func": "static int\ndecompileArithmeticOp(int n, SWF_ACTION *actions, int maxn)\n{\n\tstruct SWF_ACTIONPUSHPARAM *left, *right;\n\tint op_l = OpCode(actions, n, maxn);\n\tint op_r = OpCode(actions, n+1, maxn);\n\tright=pop();\n\tleft=pop();\n\tswitch(OpCode(actions, n, maxn))\n\t{\n\t/*\n\tcase SWFACTION_GETMEMBER:\n\t\tdecompilePUSHPARAM(peek(),0);\n\t\tbreak;\n\t*/\n\tcase SWFACTION_INSTANCEOF:\n\t\tif (precedence(op_l, op_r))\n\t\t\tpush(newVar3(getString(left),\" instanceof \",getString(right)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(left),\" instanceof \",getString(right),0,\")\"));\n\t\tbreak;\n\tcase SWFACTION_ADD:\n\tcase SWFACTION_ADD2:\n\t\tif (precedence(op_l, op_r))\n\t\t\tpush(newVar3(getString(left),\"+\",getString(right)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(left),\"+\",getString(right),0,\")\"));\n\t\tbreak;\n\tcase SWFACTION_SUBTRACT:\n\t\tif (precedence(op_l, op_r))\n\t\t\tpush(newVar3(getString(left),\"-\",getString(right)));\t      \n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(left),\"-\",getString(right),0,\")\"));\n\t\tbreak;\n\tcase SWFACTION_MULTIPLY:\n\t\tif (precedence(op_l, op_r))\n\t\t\tpush(newVar3(getString(left),\"*\",getString(right)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(left),\"*\",getString(right),0,\")\"));\n\t\tbreak;\n\tcase SWFACTION_DIVIDE:\n\t\tif (precedence(op_l, op_r))\n\t\t\tpush(newVar3(getString(left),\"/\",getString(right)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(left),\"/\",getString(right),0,\")\"));\n\t\tbreak;\n\tcase SWFACTION_MODULO:\n\t\tif (precedence(op_l, op_r))\n\t\t\tpush(newVar3(getString(left),\"%\",getString(right)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(left),\"%\",getString(right),0,\")\"));\n\t\tbreak;\n\tcase SWFACTION_SHIFTLEFT:\n\t\tif (precedence(op_l, op_r))\n\t\t\tpush(newVar3(getString(left),\"<<\",getString(right)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(left),\"<<\",getString(right),0,\")\"));\n\t\tbreak;\n\tcase SWFACTION_SHIFTRIGHT:\n\t\tif (precedence(op_l, op_r))\n\t\t\tpush(newVar3(getString(left),\">>\",getString(right)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(left),\">>\",getString(right),0,\")\"));\n\t\tbreak;\n\tcase SWFACTION_SHIFTRIGHT2:\n\t\tif (precedence(op_l, op_r))\n\t\t\tpush(newVar3(getString(left),\">>>\",getString(right)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(left),\">>>\",getString(right),0,\")\"));\n\t\tbreak;\n\tcase SWFACTION_LOGICALAND:\n\t\tif (precedence(op_l, op_r))\n\t\t\tpush(newVar3(getString(left),\"&&\",getString(right)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(left),\"&&\",getString(right),0,\")\"));\n\t\tbreak;\n\tcase SWFACTION_LOGICALOR:\n\t\tif (precedence(op_l, op_r))\n\t\t\tpush(newVar3(getString(left),\"||\",getString(right)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(left),\"||\",getString(right),0,\")\"));\n\t\tbreak;\n\tcase SWFACTION_BITWISEAND:\n\t\tif (precedence(op_l, op_r))\n\t\t\tpush(newVar3(getString(left),\"&\",getString(right)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(left),\"&\",getString(right),0,\")\"));\n\t\tbreak;\n\tcase SWFACTION_BITWISEOR:\n\t\tif (precedence(op_l, op_r))\n\t\t\tpush(newVar3(getString(left),\"|\",getString(right)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(left),\"|\",getString(right),0,\")\"));\n\t\tbreak;\n\tcase SWFACTION_BITWISEXOR:\n\t\tif (precedence(op_l, op_r))\n\t\t\tpush(newVar3(getString(left),\"^\",getString(right)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(left),\"^\",getString(right),0,\")\"));\n\t\tbreak;\n\tcase SWFACTION_EQUALS2:\t/* including negation */\n\tcase SWFACTION_EQUAL:\n\t\tif( OpCode(actions, n+1, maxn) == SWFACTION_LOGICALNOT &&\n\t\t    OpCode(actions, n+2, maxn) != SWFACTION_IF)\n\t\t{\n\t\t\top_r = OpCode(actions, n+1, maxn);\n\t\t\tif (precedence(op_l, op_r))\n\t\t\t\tpush(newVar3(getString(left),\"!=\",getString(right)));\n\t\t\telse\n\t\t\t\tpush(newVar_N(\"(\",getString(left),\"!=\",getString(right),0,\")\"));\n\t\t\treturn 1; /* due negation op */\n\t\t}\n\t\tif (precedence(op_l, op_r))\n\t\t\tpush(newVar3(getString(left),\"==\",getString(right)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(left),\"==\",getString(right),0,\")\"));\n\t\tbreak;\n\tcase SWFACTION_LESS2:\n\t\tif( OpCode(actions, n+1, maxn)  == SWFACTION_LOGICALNOT &&\n\t\t    OpCode(actions, n+2, maxn) != SWFACTION_IF ) \n\t\t{\n\t\t\top_r = OpCode(actions, n+2, maxn);\n\t\t\tif (precedence(op_l, op_r))\n\t\t\t\tpush(newVar3(getString(left),\">=\",getString(right)));\n\t\t\telse\n\t\t\t\tpush(newVar_N(\"(\",getString(left),\">=\",getString(right),0,\")\"));\n\t\t\treturn 1; /* due negation op */\n\t\t}\n\t\tif (precedence(op_l, op_r))\n\t\t\tpush(newVar3(getString(left),\"<\",getString(right)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(left),\"<\",getString(right),0,\")\"));\n\t\tbreak;\n\tcase SWFACTION_GREATER:\n\t\tif (precedence(op_l, op_r))\n\t\t\tpush(newVar3(getString(left),\">\",getString(right)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(left),\">\",getString(right),0,\")\"));\n\t\tbreak;\n\tcase SWFACTION_LESSTHAN:\n\t\tif (precedence(op_l, op_r))\n\t\t\tpush(newVar3(getString(left),\"<\",getString(right)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(left),\"<\",getString(right),0,\")\"));\n\t\tbreak;\n\tcase SWFACTION_STRINGEQ:\n\t\tif (precedence(op_l, op_r))\n\t\t\tpush(newVar3(getString(left),\"==\",getString(right)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(left),\"==\",getString(right),0,\")\"));\n\t\tbreak;\n\tcase SWFACTION_STRINGCOMPARE:\n\t\tputs(\"STRINGCOMPARE\");\n\t\tbreak;\n\tcase SWFACTION_STRICTEQUALS:\n#ifdef DECOMP_SWITCH\n\t\tif  (OpCode(actions, n, maxn) == SWFACTION_IF)\n\t\t{\n\t\t\tint code = actions[n+1].SWF_ACTIONIF.Actions[0].SWF_ACTIONRECORD.ActionCode;\n\t\t\tif(check_switch(code))\n\t\t\t{\n\t\t\t\tpush(right);\t// keep left and right side separated\n\t\t\t\tpush(left);\t// because it seems we have found a switch(){} and\n\t\t\t\tbreak;\t// let decompileIF() once more do all the dirty work\n\t\t\t}\n\t\t}\n#endif\n\t\tif( OpCode(actions, n+1, maxn) == SWFACTION_LOGICALNOT &&\n\t\t    OpCode(actions, n+2, maxn) != SWFACTION_IF ) \n\t\t{\n\t\t\top_r = OpCode(actions, n+2, maxn);\n\t\t\tif (precedence(op_l, op_r))\n\t\t\t\tpush(newVar3(getString(left),\"!==\",getString(right)));\n\t\t\telse\n\t\t\t\tpush(newVar_N(\"(\",getString(left),\"!==\",getString(right),0,\")\"));\n\t\t\treturn 1; /* due negation op */\n\t\t} else {\n\t\t\tif (precedence(op_l, op_r))\n\t\t\t\tpush(newVar3(getString(left),\"===\",getString(right)));\n\t\t\telse\n\t\t\t\tpush(newVar_N(\"(\",getString(left),\"===\",getString(right),0,\")\"));\n\t\t\tbreak;\n\t\t}\n\tdefault:\n\t\tprintf(\"Unhandled Arithmetic/Logic OP %x\\n\",\n\t\t\tOpCode(actions, n, maxn));\n\t}\n\treturn 0;\n}",
  "abstract_func": "static int\ndecompileArithmeticOp(int VAR_0, SWF_ACTION *VAR_1, int VAR_2)\n{\n\tstruct SWF_ACTIONPUSHPARAM *VAR_3, *VAR_4;\n\tint VAR_5 = OpCode(VAR_1, VAR_0, VAR_2);\n\tint VAR_6 = OpCode(VAR_1, VAR_0+1, VAR_2);\n\tVAR_4=pop();\n\tVAR_3=pop();\n\tswitch(OpCode(VAR_1, VAR_0, VAR_2))\n\t{\n\t/* COMMENT_0 */\n                          \n                               \n        \n   \n\tcase VAR_7:\n\t\tif (precedence(VAR_5, VAR_6))\n\t\t\tpush(newVar3(getString(VAR_3),\" instanceof \",getString(VAR_4)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(VAR_3),\" instanceof \",getString(VAR_4),0,\")\"));\n\t\tbreak;\n\tcase VAR_8:\n\tcase VAR_9:\n\t\tif (precedence(VAR_5, VAR_6))\n\t\t\tpush(newVar3(getString(VAR_3),\"+\",getString(VAR_4)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(VAR_3),\"+\",getString(VAR_4),0,\")\"));\n\t\tbreak;\n\tcase VAR_10:\n\t\tif (precedence(VAR_5, VAR_6))\n\t\t\tpush(newVar3(getString(VAR_3),\"-\",getString(VAR_4)));\t      \n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(VAR_3),\"-\",getString(VAR_4),0,\")\"));\n\t\tbreak;\n\tcase VAR_11:\n\t\tif (precedence(VAR_5, VAR_6))\n\t\t\tpush(newVar3(getString(VAR_3),\"*\",getString(VAR_4)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(VAR_3),\"*\",getString(VAR_4),0,\")\"));\n\t\tbreak;\n\tcase VAR_12:\n\t\tif (precedence(VAR_5, VAR_6))\n\t\t\tpush(newVar3(getString(VAR_3),\"/\",getString(VAR_4)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(VAR_3),\"/\",getString(VAR_4),0,\")\"));\n\t\tbreak;\n\tcase VAR_13:\n\t\tif (precedence(VAR_5, VAR_6))\n\t\t\tpush(newVar3(getString(VAR_3),\"%\",getString(VAR_4)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(VAR_3),\"%\",getString(VAR_4),0,\")\"));\n\t\tbreak;\n\tcase VAR_14:\n\t\tif (precedence(VAR_5, VAR_6))\n\t\t\tpush(newVar3(getString(VAR_3),\"<<\",getString(VAR_4)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(VAR_3),\"<<\",getString(VAR_4),0,\")\"));\n\t\tbreak;\n\tcase VAR_15:\n\t\tif (precedence(VAR_5, VAR_6))\n\t\t\tpush(newVar3(getString(VAR_3),\">>\",getString(VAR_4)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(VAR_3),\">>\",getString(VAR_4),0,\")\"));\n\t\tbreak;\n\tcase VAR_16:\n\t\tif (precedence(VAR_5, VAR_6))\n\t\t\tpush(newVar3(getString(VAR_3),\">>>\",getString(VAR_4)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(VAR_3),\">>>\",getString(VAR_4),0,\")\"));\n\t\tbreak;\n\tcase VAR_17:\n\t\tif (precedence(VAR_5, VAR_6))\n\t\t\tpush(newVar3(getString(VAR_3),\"&&\",getString(VAR_4)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(VAR_3),\"&&\",getString(VAR_4),0,\")\"));\n\t\tbreak;\n\tcase VAR_18:\n\t\tif (precedence(VAR_5, VAR_6))\n\t\t\tpush(newVar3(getString(VAR_3),\"||\",getString(VAR_4)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(VAR_3),\"||\",getString(VAR_4),0,\")\"));\n\t\tbreak;\n\tcase VAR_19:\n\t\tif (precedence(VAR_5, VAR_6))\n\t\t\tpush(newVar3(getString(VAR_3),\"&\",getString(VAR_4)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(VAR_3),\"&\",getString(VAR_4),0,\")\"));\n\t\tbreak;\n\tcase VAR_20:\n\t\tif (precedence(VAR_5, VAR_6))\n\t\t\tpush(newVar3(getString(VAR_3),\"|\",getString(VAR_4)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(VAR_3),\"|\",getString(VAR_4),0,\")\"));\n\t\tbreak;\n\tcase VAR_21:\n\t\tif (precedence(VAR_5, VAR_6))\n\t\t\tpush(newVar3(getString(VAR_3),\"^\",getString(VAR_4)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(VAR_3),\"^\",getString(VAR_4),0,\")\"));\n\t\tbreak;\n\tcase VAR_22:\t/* COMMENT_5 */\n\tcase VAR_23:\n\t\tif( OpCode(VAR_1, VAR_0+1, VAR_2) == VAR_24 &&\n\t\t    OpCode(VAR_1, VAR_0+2, VAR_2) != VAR_25)\n\t\t{\n\t\t\tVAR_6 = OpCode(VAR_1, VAR_0+1, VAR_2);\n\t\t\tif (precedence(VAR_5, VAR_6))\n\t\t\t\tpush(newVar3(getString(VAR_3),\"!=\",getString(VAR_4)));\n\t\t\telse\n\t\t\t\tpush(newVar_N(\"(\",getString(VAR_3),\"!=\",getString(VAR_4),0,\")\"));\n\t\t\treturn 1; /* COMMENT_6 */\n\t\t}\n\t\tif (precedence(VAR_5, VAR_6))\n\t\t\tpush(newVar3(getString(VAR_3),\"==\",getString(VAR_4)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(VAR_3),\"==\",getString(VAR_4),0,\")\"));\n\t\tbreak;\n\tcase VAR_26:\n\t\tif( OpCode(VAR_1, VAR_0+1, VAR_2)  == VAR_24 &&\n\t\t    OpCode(VAR_1, VAR_0+2, VAR_2) != VAR_25 ) \n\t\t{\n\t\t\tVAR_6 = OpCode(VAR_1, VAR_0+2, VAR_2);\n\t\t\tif (precedence(VAR_5, VAR_6))\n\t\t\t\tpush(newVar3(getString(VAR_3),\">=\",getString(VAR_4)));\n\t\t\telse\n\t\t\t\tpush(newVar_N(\"(\",getString(VAR_3),\">=\",getString(VAR_4),0,\")\"));\n\t\t\treturn 1; /* COMMENT_6 */\n\t\t}\n\t\tif (precedence(VAR_5, VAR_6))\n\t\t\tpush(newVar3(getString(VAR_3),\"<\",getString(VAR_4)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(VAR_3),\"<\",getString(VAR_4),0,\")\"));\n\t\tbreak;\n\tcase VAR_27:\n\t\tif (precedence(VAR_5, VAR_6))\n\t\t\tpush(newVar3(getString(VAR_3),\">\",getString(VAR_4)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(VAR_3),\">\",getString(VAR_4),0,\")\"));\n\t\tbreak;\n\tcase VAR_28:\n\t\tif (precedence(VAR_5, VAR_6))\n\t\t\tpush(newVar3(getString(VAR_3),\"<\",getString(VAR_4)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(VAR_3),\"<\",getString(VAR_4),0,\")\"));\n\t\tbreak;\n\tcase VAR_29:\n\t\tif (precedence(VAR_5, VAR_6))\n\t\t\tpush(newVar3(getString(VAR_3),\"==\",getString(VAR_4)));\n\t\telse\n\t\t\tpush(newVar_N(\"(\",getString(VAR_3),\"==\",getString(VAR_4),0,\")\"));\n\t\tbreak;\n\tcase VAR_30:\n\t\tputs(\"STRINGCOMPARE\");\n\t\tbreak;\n\tcase VAR_31:\n#ifdef VAR_32\n\t\tif  (OpCode(VAR_1, VAR_0, VAR_2) == VAR_25)\n\t\t{\n\t\t\tint VAR_33 = VAR_1[VAR_0+1].SWF_ACTIONIF.Actions[0].SWF_ACTIONRECORD.ActionCode;\n\t\t\tif(check_switch(VAR_33))\n\t\t\t{\n\t\t\t\tpush(VAR_4);\t/* COMMENT_7 */\n\t\t\t\tpush(VAR_3);\t/* COMMENT_8 */\n\t\t\t\tbreak;\t/* COMMENT_9 */\n\t\t\t}\n\t\t}\n#endif\n\t\tif( OpCode(VAR_1, VAR_0+1, VAR_2) == VAR_24 &&\n\t\t    OpCode(VAR_1, VAR_0+2, VAR_2) != VAR_25 ) \n\t\t{\n\t\t\tVAR_6 = OpCode(VAR_1, VAR_0+2, VAR_2);\n\t\t\tif (precedence(VAR_5, VAR_6))\n\t\t\t\tpush(newVar3(getString(VAR_3),\"!==\",getString(VAR_4)));\n\t\t\telse\n\t\t\t\tpush(newVar_N(\"(\",getString(VAR_3),\"!==\",getString(VAR_4),0,\")\"));\n\t\t\treturn 1; /* COMMENT_6 */\n\t\t} else {\n\t\t\tif (precedence(VAR_5, VAR_6))\n\t\t\t\tpush(newVar3(getString(VAR_3),\"===\",getString(VAR_4)));\n\t\t\telse\n\t\t\t\tpush(newVar_N(\"(\",getString(VAR_3),\"===\",getString(VAR_4),0,\")\"));\n\t\t\tbreak;\n\t\t}\n\tdefault:\n\t\tprintf(\"Unhandled Arithmetic/Logic OP %x\\n\",\n\t\t\tOpCode(VAR_1, VAR_0, VAR_2));\n\t}\n\treturn 0;\n}",
  "func_graph_path": "libming/9c53bf8e165c3a74e20f4c93b4ab6c05fe67f187/decompile.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -183,7 +183,7 @@\n \t\t}\n \tdefault:\n \t\tprintf(\"Unhandled Arithmetic/Logic OP %x\\n\",\n-\t\t\tactions[n].SWF_ACTIONRECORD.ActionCode);\n+\t\t\tOpCode(actions, n, maxn));\n \t}\n \treturn 0;\n }",
  "diff_line_info": {
    "deleted_lines": [
      "\t\t\tactions[n].SWF_ACTIONRECORD.ActionCode);"
    ],
    "added_lines": [
      "\t\t\tOpCode(actions, n, maxn));"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/libming/libming/pull/108",
  "description": {
    "pr_info": {
      "title": "Use OpCode instead of directly accessing actions",
      "number": 108
    },
    "comment": [
      "Instead of directly accessing the actions array without checks for the value of n (which may lead to heap buffer overflow etc, see #83 or #105), use the dedicated OpCode function.\r\n\r\nThis PR fixes #105 (CVE-2018-6359).",
      "Confirmed, and merged. Thanks.\n"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "The commit addresses a buffer overflow vulnerability by replacing direct array access with a safer method, as indicated by the CVE reference. The code change supports this, indicating a security fix.\n\n**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.95\n\n---\n\n**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.95"
}