{
  "cve_id": "CVE-2023-52263",
  "cwe_ids": [
    "CWE-601"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
  "cvss_is_v3": true,
  "repo_name": "brave/brave-core",
  "commit_msg": "Further restrict the schema for WebUI factory and redirect\n\nFixes https://github.com/brave/brave-browser/issues/32449\nContains follow up feedback for https://girave-browser/issthub.com/brave/bues/32425",
  "commit_hash": "9da202f7f4bc80b6975909b684bbc0764a31c4e9",
  "git_url": "https://github.com/brave/brave-core/commit/9da202f7f4bc80b6975909b684bbc0764a31c4e9",
  "file_path": "browser/brave_content_browser_client.cc",
  "func_name": "BraveContentBrowserClient::HandleURLOverrideRewrite",
  "func_before": "bool BraveContentBrowserClient::HandleURLOverrideRewrite(\n    GURL* url,\n    content::BrowserContext* browser_context) {\n  if (url->host() == chrome::kChromeUISyncHost) {\n    GURL::Replacements replacements;\n    replacements.SetSchemeStr(content::kChromeUIScheme);\n    replacements.SetHostStr(chrome::kChromeUISettingsHost);\n    replacements.SetPathStr(kBraveSyncPath);\n    *url = url->ReplaceComponents(replacements);\n    return true;\n  }\n\n#if !BUILDFLAG(IS_ANDROID)\n  if (url->host() == kAdblockHost) {\n    GURL::Replacements replacements;\n    replacements.SetSchemeStr(content::kChromeUIScheme);\n    replacements.SetHostStr(chrome::kChromeUISettingsHost);\n    replacements.SetPathStr(kContentFiltersPath);\n    *url = url->ReplaceComponents(replacements);\n    return false;\n  }\n#endif\n\n  // no special win10 welcome page\n  if (url->host() == chrome::kChromeUIWelcomeHost) {\n    *url = GURL(chrome::kChromeUIWelcomeURL);\n    return true;\n  }\n\n#if BUILDFLAG(ETHEREUM_REMOTE_CLIENT_ENABLED) && BUILDFLAG(ENABLE_EXTENSIONS)\n  auto* prefs = user_prefs::UserPrefs::Get(browser_context);\n  brave_wallet::mojom::DefaultWallet default_wallet =\n      brave_wallet::GetDefaultEthereumWallet(prefs);\n  if (!brave_wallet::IsNativeWalletEnabled() ||\n      default_wallet == brave_wallet::mojom::DefaultWallet::CryptoWallets) {\n    // If the Crypto Wallets extension is loaded, then it replaces the WebUI\n    auto* service =\n        EthereumRemoteClientServiceFactory::GetForContext(browser_context);\n    if (service->IsCryptoWalletsReady() &&\n        url->SchemeIs(content::kChromeUIScheme) &&\n        url->host() == ethereum_remote_client_host) {\n      auto* registry = extensions::ExtensionRegistry::Get(browser_context);\n      if (registry && registry->ready_extensions().GetByID(\n                          ethereum_remote_client_extension_id)) {\n        *url = GURL(ethereum_remote_client_base_url);\n        return true;\n      }\n    }\n  }\n#endif\n\n  return false;\n}",
  "abstract_func_before": "bool BraveContentBrowserClient::HandleURLOverrideRewrite(\n    GURL* VAR_0,\n    content::BrowserContext* VAR_1) {\n  if (VAR_0->host() == chrome::kChromeUISyncHost) {\n    GURL::Replacements VAR_2;\n    VAR_2.SetSchemeStr(content::kChromeUIScheme);\n    VAR_2.SetHostStr(chrome::kChromeUISettingsHost);\n    VAR_2.SetPathStr(VAR_3);\n    *VAR_0 = VAR_0->ReplaceComponents(VAR_2);\n    return true;\n  }\n\n#if !BUILDFLAG(VAR_4)\n  if (VAR_0->host() == VAR_5) {\n    GURL::Replacements VAR_2;\n    VAR_2.SetSchemeStr(content::kChromeUIScheme);\n    VAR_2.SetHostStr(chrome::kChromeUISettingsHost);\n    VAR_2.SetPathStr(VAR_6);\n    *VAR_0 = VAR_0->ReplaceComponents(VAR_2);\n    return false;\n  }\n#endif\n\n  /* COMMENT_0 */\n  if (VAR_0->host() == chrome::kChromeUIWelcomeHost) {\n    *VAR_0 = GURL(chrome::kChromeUIWelcomeURL);\n    return true;\n  }\n\n#if BUILDFLAG(VAR_7) && BUILDFLAG(VAR_8)\n  auto* VAR_9 = user_prefs::UserPrefs::Get(VAR_1);\n  brave_wallet::mojom::DefaultWallet VAR_10 =\n      brave_wallet::GetDefaultEthereumWallet(VAR_9);\n  if (!brave_wallet::IsNativeWalletEnabled() ||\n      VAR_10 == brave_wallet::mojom::DefaultWallet::CryptoWallets) {\n    /* COMMENT_1 */\n    auto* VAR_11 =\n        EthereumRemoteClientServiceFactory::GetForContext(VAR_1);\n    if (VAR_11->IsCryptoWalletsReady() &&\n        VAR_0->SchemeIs(content::kChromeUIScheme) &&\n        VAR_0->host() == VAR_12) {\n      auto* VAR_13 = extensions::ExtensionRegistry::Get(VAR_1);\n      if (VAR_13 && VAR_13->ready_extensions().GetByID(\n                          VAR_14)) {\n        *VAR_0 = GURL(VAR_15);\n        return true;\n      }\n    }\n  }\n#endif\n\n  return false;\n}",
  "func_graph_path_before": "brave/brave-core/9da202f7f4bc80b6975909b684bbc0764a31c4e9/brave_content_browser_client.cc/vul/before/0.json",
  "func": "bool BraveContentBrowserClient::HandleURLOverrideRewrite(\n    GURL* url,\n    content::BrowserContext* browser_context) {\n  // Some of these rewrites are for WebUI pages with URL that has moved.\n  // After rewrite happens, GetWebUIFactoryFunction() will work as expected.\n  // (see browser\\ui\\webui\\brave_web_ui_controller_factory.cc for more info)\n  //\n  // Scope of schema is intentionally narrower than content::HasWebUIScheme(url)\n  // which also allows both `chrome-untrusted` and `chrome-devtools`.\n  if (!url->SchemeIs(content::kBraveUIScheme) &&\n      !url->SchemeIs(content::kChromeUIScheme)) {\n    return false;\n  }\n\n  // brave://sync => brave://settings/braveSync\n  if (url->host() == chrome::kChromeUISyncHost) {\n    GURL::Replacements replacements;\n    replacements.SetSchemeStr(content::kChromeUIScheme);\n    replacements.SetHostStr(chrome::kChromeUISettingsHost);\n    replacements.SetPathStr(kBraveSyncPath);\n    *url = url->ReplaceComponents(replacements);\n    return true;\n  }\n\n#if !BUILDFLAG(IS_ANDROID)\n  // brave://adblock => brave://settings/shields/filters\n  if (url->host() == kAdblockHost) {\n    GURL::Replacements replacements;\n    replacements.SetSchemeStr(content::kChromeUIScheme);\n    replacements.SetHostStr(chrome::kChromeUISettingsHost);\n    replacements.SetPathStr(kContentFiltersPath);\n    *url = url->ReplaceComponents(replacements);\n    return false;\n  }\n#endif\n\n  // no special win10 welcome page\n  if (url->host() == chrome::kChromeUIWelcomeHost) {\n    *url = GURL(chrome::kChromeUIWelcomeURL);\n    return true;\n  }\n\n#if BUILDFLAG(ETHEREUM_REMOTE_CLIENT_ENABLED) && BUILDFLAG(ENABLE_EXTENSIONS)\n  auto* prefs = user_prefs::UserPrefs::Get(browser_context);\n  brave_wallet::mojom::DefaultWallet default_wallet =\n      brave_wallet::GetDefaultEthereumWallet(prefs);\n  if (!brave_wallet::IsNativeWalletEnabled() ||\n      default_wallet == brave_wallet::mojom::DefaultWallet::CryptoWallets) {\n    // If the Crypto Wallets extension is loaded, then it replaces the WebUI\n    auto* service =\n        EthereumRemoteClientServiceFactory::GetForContext(browser_context);\n    if (service->IsCryptoWalletsReady() &&\n        url->SchemeIs(content::kChromeUIScheme) &&\n        url->host() == ethereum_remote_client_host) {\n      auto* registry = extensions::ExtensionRegistry::Get(browser_context);\n      if (registry && registry->ready_extensions().GetByID(\n                          ethereum_remote_client_extension_id)) {\n        *url = GURL(ethereum_remote_client_base_url);\n        return true;\n      }\n    }\n  }\n#endif\n\n  return false;\n}",
  "abstract_func": "bool BraveContentBrowserClient::HandleURLOverrideRewrite(\n    GURL* VAR_0,\n    content::BrowserContext* VAR_1) {\n  /* COMMENT_0 */\n  /* COMMENT_1 */\n  /* COMMENT_2 */\n  /* COMMENT_3 */\n  /* COMMENT_4 */\n  /* COMMENT_5 */\n  if (!VAR_0->SchemeIs(content::kBraveUIScheme) &&\n      !VAR_0->SchemeIs(content::kChromeUIScheme)) {\n    return false;\n  }\n\n  /* COMMENT_6 */\n  if (VAR_0->host() == chrome::kChromeUISyncHost) {\n    GURL::Replacements VAR_2;\n    VAR_2.SetSchemeStr(content::kChromeUIScheme);\n    VAR_2.SetHostStr(chrome::kChromeUISettingsHost);\n    VAR_2.SetPathStr(VAR_3);\n    *VAR_0 = VAR_0->ReplaceComponents(VAR_2);\n    return true;\n  }\n\n#if !BUILDFLAG(VAR_4)\n  /* COMMENT_7 */\n  if (VAR_0->host() == VAR_5) {\n    GURL::Replacements VAR_2;\n    VAR_2.SetSchemeStr(content::kChromeUIScheme);\n    VAR_2.SetHostStr(chrome::kChromeUISettingsHost);\n    VAR_2.SetPathStr(VAR_6);\n    *VAR_0 = VAR_0->ReplaceComponents(VAR_2);\n    return false;\n  }\n#endif\n\n  /* COMMENT_8 */\n  if (VAR_0->host() == chrome::kChromeUIWelcomeHost) {\n    *VAR_0 = GURL(chrome::kChromeUIWelcomeURL);\n    return true;\n  }\n\n#if BUILDFLAG(VAR_7) && BUILDFLAG(VAR_8)\n  auto* VAR_9 = user_prefs::UserPrefs::Get(VAR_1);\n  brave_wallet::mojom::DefaultWallet VAR_10 =\n      brave_wallet::GetDefaultEthereumWallet(VAR_9);\n  if (!brave_wallet::IsNativeWalletEnabled() ||\n      VAR_10 == brave_wallet::mojom::DefaultWallet::CryptoWallets) {\n    /* COMMENT_9 */\n    auto* VAR_11 =\n        EthereumRemoteClientServiceFactory::GetForContext(VAR_1);\n    if (VAR_11->IsCryptoWalletsReady() &&\n        VAR_0->SchemeIs(content::kChromeUIScheme) &&\n        VAR_0->host() == VAR_12) {\n      auto* VAR_13 = extensions::ExtensionRegistry::Get(VAR_1);\n      if (VAR_13 && VAR_13->ready_extensions().GetByID(\n                          VAR_14)) {\n        *VAR_0 = GURL(VAR_15);\n        return true;\n      }\n    }\n  }\n#endif\n\n  return false;\n}",
  "func_graph_path": "brave/brave-core/9da202f7f4bc80b6975909b684bbc0764a31c4e9/brave_content_browser_client.cc/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,6 +1,18 @@\n bool BraveContentBrowserClient::HandleURLOverrideRewrite(\n     GURL* url,\n     content::BrowserContext* browser_context) {\n+  // Some of these rewrites are for WebUI pages with URL that has moved.\n+  // After rewrite happens, GetWebUIFactoryFunction() will work as expected.\n+  // (see browser\\ui\\webui\\brave_web_ui_controller_factory.cc for more info)\n+  //\n+  // Scope of schema is intentionally narrower than content::HasWebUIScheme(url)\n+  // which also allows both `chrome-untrusted` and `chrome-devtools`.\n+  if (!url->SchemeIs(content::kBraveUIScheme) &&\n+      !url->SchemeIs(content::kChromeUIScheme)) {\n+    return false;\n+  }\n+\n+  // brave://sync => brave://settings/braveSync\n   if (url->host() == chrome::kChromeUISyncHost) {\n     GURL::Replacements replacements;\n     replacements.SetSchemeStr(content::kChromeUIScheme);\n@@ -11,6 +23,7 @@\n   }\n \n #if !BUILDFLAG(IS_ANDROID)\n+  // brave://adblock => brave://settings/shields/filters\n   if (url->host() == kAdblockHost) {\n     GURL::Replacements replacements;\n     replacements.SetSchemeStr(content::kChromeUIScheme);",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "  // Some of these rewrites are for WebUI pages with URL that has moved.",
      "  // After rewrite happens, GetWebUIFactoryFunction() will work as expected.",
      "  // (see browser\\ui\\webui\\brave_web_ui_controller_factory.cc for more info)",
      "  //",
      "  // Scope of schema is intentionally narrower than content::HasWebUIScheme(url)",
      "  // which also allows both `chrome-untrusted` and `chrome-devtools`.",
      "  if (!url->SchemeIs(content::kBraveUIScheme) &&",
      "      !url->SchemeIs(content::kChromeUIScheme)) {",
      "    return false;",
      "  }",
      "",
      "  // brave://sync => brave://settings/braveSync",
      "  // brave://adblock => brave://settings/shields/filters"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/brave/brave-core/pull/19820",
  "description": {
    "pr_info": {
      "title": "Further restrict the schema for WebUI factory and redirect",
      "number": 19820
    },
    "comment": [
      "Fixes https://github.com/brave/brave-browser/issues/32449 \r\n\r\nContains follow up feedback for https://github.com/brave/brave-browser/issues/32425\r\n\r\n<!-- CI-related labels that can be applied to this PR:\r\n* CI/run-audit-deps (1) - check for known npm/cargo vulnerabilities (audit_deps)\r\n* CI/run-network-audit (1) - run network-audit\r\n* CI/run-upstream-tests - run Chromium unit and browser tests on Linux and Windows (otherwise only on Linux)\r\n* CI/skip - do not run CI builds (except noplatform)\r\n* CI/skip-linux-arm64, CI/skip-linux-x64, CI/skip-android, CI/skip-macos, CI/skip-ios, CI/skip-windows-arm64, CI/skip-windows-x64, CI/skip-windows-x86 - skip CI builds for specific platforms\r\n* CI/skip-upstream-tests - do not run Chromium unit, or browser tests (otherwise only on Linux)\r\n* CI/skip-all-linters - do not run presubmit and lint checks\r\n* CI/storybook-url (1) - deploy storybook and provide a unique URL for each build\r\n\r\n(1) applied automatically when some files are changed (see: https://github.com/brave/brave-core/blob/master/.github/labeler.yml)\r\n-->\r\n\r\n## Submitter Checklist:\r\n\r\n- [x] I confirm that no [security/privacy review is needed](https://github.com/brave/brave-browser/wiki/Security-reviews) and no other type of reviews are needed, or that I have [requested](https://github.com/brave/reviews/issues/new/choose) them\r\n- [x] There is a [ticket](https://github.com/brave/brave-browser/issues) for my issue\r\n- [x] Used Github [auto-closing keywords](https://docs.github.com/en/github/managing-your-work-on-github/linking-a-pull-request-to-an-issue) in the PR description above\r\n- [x] Wrote a good [PR/commit description](https://google.github.io/eng-practices/review/developer/cl-descriptions.html)\r\n- [ ] Squashed any review feedback or \"fixup\" commits before merge, so that history is a record of what happened in the repo, not your PR\r\n- [x] Added appropriate labels (`QA/Yes` or `QA/No`; `release-notes/include` or `release-notes/exclude`; `OS/...`) to the associated issue\r\n- [ ] Checked the PR locally:\r\n  * `npm run test -- brave_browser_tests`, `npm run test -- brave_unit_tests` [wiki](https://github.com/brave/brave-browser/wiki/Tests)\r\n  * `npm run lint`, `npm run presubmit` [wiki](https://github.com/brave/brave-browser/wiki/Presubmit-checks), `npm run gn_check`, `npm run tslint`\r\n- [ ] Ran `git rebase master` (if needed)\r\n\r\n## Reviewer Checklist:\r\n\r\n- [ ] A security review [is not needed](https://github.com/brave/brave-browser/wiki/Security-reviews), or a link to one is included in the PR description\r\n- [ ] New files have MPL-2.0 license header\r\n- [ ] Adequate test coverage exists to prevent regressions\r\n- [ ] Major classes, functions and non-trivial code blocks are well-commented\r\n- [ ] Changes in component dependencies are properly reflected in `gn`\r\n- [ ] Code follows the [style guide](https://chromium.googlesource.com/chromium/src/+/HEAD/styleguide/c++/c++.md)\r\n- [ ] Test plan is specified in PR before merging\r\n\r\n## After-merge Checklist:\r\n\r\n- [ ] The associated issue milestone is set to the smallest version that the\r\n  changes has landed on\r\n- [ ] All relevant documentation has been updated, for instance:\r\n  - [ ] https://github.com/brave/brave-browser/wiki/Deviations-from-Chromium-(features-we-disable-or-remove)\r\n  - [ ] https://github.com/brave/brave-browser/wiki/Proxy-redirected-URLs\r\n  - [ ] https://github.com/brave/brave-browser/wiki/Fingerprinting-Protections\r\n  - [ ] https://github.com/brave/brave-browser/wiki/Brave%E2%80%99s-Use-of-Referral-Codes\r\n  - [ ] https://github.com/brave/brave-browser/wiki/Custom-Headers\r\n  - [ ] https://github.com/brave/brave-browser/wiki/Web-Compatibility-Exceptions-in-Brave\r\n  - [ ] https://github.com/brave/brave-browser/wiki/QA-Guide\r\n  - [ ] https://github.com/brave/brave-browser/wiki/P3A\r\n\r\n## Test Plan:\r\n\r\n",
      "Verification **PASSED** on `Win 11 x64` using the following build(s):\r\n\r\n```\r\nBrave | 1.59.40 Chromium: 116.0.5845.96 (Official Build) nightly (64-bit)\r\n-- | --\r\nRevision | 282a4599cb1dedb4c3f8788bd21a3bf228b55d62\r\nOS | Windows 11 Version 22H2 (Build 22621.2134)\r\n```\r\n\r\nVerification notes can be found via https://github.com/brave/internal/issues/1064#issuecomment-1689280347."
    ]
  },
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Defect Remediation & Feature Upgrades  \n**Confidence:** 0.9\n\nStep-by-Step Explanation:\n\n1. **Input Analysis**: The commit message and code diff focus on modifying URL handling for WebUI, adding schema restrictions without explicit security mentions. The vulnerability description mirrors the commit message without indicating a security issue.\n\n2. **Consistency Check**: The code changes align with the commit message, focusing on URL restrictions and redirects.\n\n3. **Purpose Evaluation**: The changes adjust core logic for URL processing, addressing functionality rather than security.\n\n4. **Security Assessment**: No security terms or CVE/CWE references are present, so it's not classified as a security fix.\n\n5. **Classification**: The changes modify core business logic, fitting under Defect Remediation & Feature Upgrades.\n\n6. **Confidence**: High (0.9) as the intent is clear, lacking security indicators but making functional adjustments."
}