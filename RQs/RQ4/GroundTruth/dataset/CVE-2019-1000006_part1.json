{
  "cve_id": "CVE-2019-1000006",
  "cwe_ids": [
    "CWE-787"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "RIOT-OS/RIOT",
  "commit_msg": "sock_dns: remove out-of-place puts() call",
  "commit_hash": "894ad2932244f7f4fcc7bf9bedebcac591d8ccda",
  "git_url": "https://github.com/RIOT-OS/RIOT/commit/894ad2932244f7f4fcc7bf9bedebcac591d8ccda",
  "file_path": "sys/net/application_layer/dns/dns.c",
  "func_name": "sock_dns_query",
  "func_before": "int sock_dns_query(const char *domain_name, void *addr_out, int family)\n{\n    uint8_t buf[SOCK_DNS_QUERYBUF_LEN];\n    uint8_t reply_buf[512];\n\n    if (sock_dns_server.port == 0) {\n        return -ECONNREFUSED;\n    }\n\n    if (strlen(domain_name) > SOCK_DNS_MAX_NAME_LEN) {\n        return -ENOSPC;\n    }\n\n    sock_dns_hdr_t *hdr = (sock_dns_hdr_t*) buf;\n    memset(hdr, 0, sizeof(*hdr));\n    hdr->id = 0; /* random? */\n    hdr->flags = htons(0x0120);\n    hdr->qdcount = htons(1 + (family == AF_UNSPEC));\n\n    uint8_t *bufpos = buf + sizeof(*hdr);\n\n    unsigned _name_ptr;\n    if ((family == AF_INET6) || (family == AF_UNSPEC)) {\n        _name_ptr = (bufpos - buf);\n        bufpos += _enc_domain_name(bufpos, domain_name);\n        bufpos += _put_short(bufpos, htons(DNS_TYPE_AAAA));\n        bufpos += _put_short(bufpos, htons(DNS_CLASS_IN));\n    }\n\n    if ((family == AF_INET) || (family == AF_UNSPEC)) {\n        if (family == AF_UNSPEC) {\n            bufpos += _put_short(bufpos, htons((0xc000) | (_name_ptr)));\n        }\n        else {\n            bufpos += _enc_domain_name(bufpos, domain_name);\n        }\n        bufpos += _put_short(bufpos, htons(DNS_TYPE_A));\n        bufpos += _put_short(bufpos, htons(DNS_CLASS_IN));\n    }\n\n    sock_udp_t sock_dns;\n\n    ssize_t res = sock_udp_create(&sock_dns, NULL, &sock_dns_server, 0);\n    if (res) {\n            puts(\"a\");\n        goto out;\n    }\n\n    for (int i = 0; i < SOCK_DNS_RETRIES; i++) {\n        res = sock_udp_send(&sock_dns, buf, (bufpos-buf), NULL);\n        if (res <= 0) {\n            continue;\n        }\n        res = sock_udp_recv(&sock_dns, reply_buf, sizeof(reply_buf), 1000000LU, NULL);\n        if ((res > 0) && (res > (int)DNS_MIN_REPLY_LEN)) {\n            if ((res = _parse_dns_reply(reply_buf, res, addr_out, family)) > 0) {\n                goto out;\n            }\n        }\n    }\n\nout:\n    sock_udp_close(&sock_dns);\n    return res;\n}",
  "abstract_func_before": "int sock_dns_query(const char *VAR_0, void *VAR_1, int VAR_2)\n{\n    uint8_t VAR_3[VAR_4];\n    uint8_t VAR_5[512];\n\n    if (VAR_6.port == 0) {\n        return -VAR_7;\n    }\n\n    if (strlen(VAR_0) > VAR_8) {\n        return -VAR_9;\n    }\n\n    sock_dns_hdr_t *VAR_10 = (sock_dns_hdr_t*) VAR_3;\n    memset(VAR_10, 0, sizeof(*VAR_10));\n    VAR_10->id = 0; /* COMMENT_0 */\n    VAR_10->flags = htons(0x0120);\n    VAR_10->qdcount = htons(1 + (VAR_2 == VAR_11));\n\n    uint8_t *VAR_12 = VAR_3 + sizeof(*VAR_10);\n\n    unsigned VAR_13;\n    if ((VAR_2 == VAR_14) || (VAR_2 == VAR_11)) {\n        VAR_13 = (VAR_12 - VAR_3);\n        VAR_12 += _enc_domain_name(VAR_12, VAR_0);\n        VAR_12 += _put_short(VAR_12, htons(VAR_15));\n        VAR_12 += _put_short(VAR_12, htons(VAR_16));\n    }\n\n    if ((VAR_2 == VAR_17) || (VAR_2 == VAR_11)) {\n        if (VAR_2 == VAR_11) {\n            VAR_12 += _put_short(VAR_12, htons((0xc000) | (VAR_13)));\n        }\n        else {\n            VAR_12 += _enc_domain_name(VAR_12, VAR_0);\n        }\n        VAR_12 += _put_short(VAR_12, htons(VAR_18));\n        VAR_12 += _put_short(VAR_12, htons(VAR_16));\n    }\n\n    sock_udp_t VAR_19;\n\n    ssize_t VAR_20 = sock_udp_create(&VAR_19, NULL, &VAR_6, 0);\n    if (VAR_20) {\n            puts(\"a\");\n        goto out;\n    }\n\n    for (int VAR_21 = 0; VAR_21 < VAR_22; VAR_21++) {\n        VAR_20 = sock_udp_send(&VAR_19, VAR_3, (VAR_12-VAR_3), NULL);\n        if (VAR_20 <= 0) {\n            continue;\n        }\n        VAR_20 = sock_udp_recv(&VAR_19, VAR_5, sizeof(VAR_5), 1000000LU, NULL);\n        if ((VAR_20 > 0) && (VAR_20 > (int)VAR_23)) {\n            if ((VAR_20 = _parse_dns_reply(VAR_5, VAR_20, VAR_1, VAR_2)) > 0) {\n                goto out;\n            }\n        }\n    }\n\nout:\n    sock_udp_close(&VAR_19);\n    return VAR_20;\n}",
  "func_graph_path_before": "RIOT-OS/RIOT/894ad2932244f7f4fcc7bf9bedebcac591d8ccda/dns.c/vul/before/0.json",
  "func": "int sock_dns_query(const char *domain_name, void *addr_out, int family)\n{\n    uint8_t buf[SOCK_DNS_QUERYBUF_LEN];\n    uint8_t reply_buf[512];\n\n    if (sock_dns_server.port == 0) {\n        return -ECONNREFUSED;\n    }\n\n    if (strlen(domain_name) > SOCK_DNS_MAX_NAME_LEN) {\n        return -ENOSPC;\n    }\n\n    sock_dns_hdr_t *hdr = (sock_dns_hdr_t*) buf;\n    memset(hdr, 0, sizeof(*hdr));\n    hdr->id = 0; /* random? */\n    hdr->flags = htons(0x0120);\n    hdr->qdcount = htons(1 + (family == AF_UNSPEC));\n\n    uint8_t *bufpos = buf + sizeof(*hdr);\n\n    unsigned _name_ptr;\n    if ((family == AF_INET6) || (family == AF_UNSPEC)) {\n        _name_ptr = (bufpos - buf);\n        bufpos += _enc_domain_name(bufpos, domain_name);\n        bufpos += _put_short(bufpos, htons(DNS_TYPE_AAAA));\n        bufpos += _put_short(bufpos, htons(DNS_CLASS_IN));\n    }\n\n    if ((family == AF_INET) || (family == AF_UNSPEC)) {\n        if (family == AF_UNSPEC) {\n            bufpos += _put_short(bufpos, htons((0xc000) | (_name_ptr)));\n        }\n        else {\n            bufpos += _enc_domain_name(bufpos, domain_name);\n        }\n        bufpos += _put_short(bufpos, htons(DNS_TYPE_A));\n        bufpos += _put_short(bufpos, htons(DNS_CLASS_IN));\n    }\n\n    sock_udp_t sock_dns;\n\n    ssize_t res = sock_udp_create(&sock_dns, NULL, &sock_dns_server, 0);\n    if (res) {\n        goto out;\n    }\n\n    for (int i = 0; i < SOCK_DNS_RETRIES; i++) {\n        res = sock_udp_send(&sock_dns, buf, (bufpos-buf), NULL);\n        if (res <= 0) {\n            continue;\n        }\n        res = sock_udp_recv(&sock_dns, reply_buf, sizeof(reply_buf), 1000000LU, NULL);\n        if ((res > 0) && (res > (int)DNS_MIN_REPLY_LEN)) {\n            if ((res = _parse_dns_reply(reply_buf, res, addr_out, family)) > 0) {\n                goto out;\n            }\n        }\n    }\n\nout:\n    sock_udp_close(&sock_dns);\n    return res;\n}",
  "abstract_func": "int sock_dns_query(const char *VAR_0, void *VAR_1, int VAR_2)\n{\n    uint8_t VAR_3[VAR_4];\n    uint8_t VAR_5[512];\n\n    if (VAR_6.port == 0) {\n        return -VAR_7;\n    }\n\n    if (strlen(VAR_0) > VAR_8) {\n        return -VAR_9;\n    }\n\n    sock_dns_hdr_t *VAR_10 = (sock_dns_hdr_t*) VAR_3;\n    memset(VAR_10, 0, sizeof(*VAR_10));\n    VAR_10->id = 0; /* COMMENT_0 */\n    VAR_10->flags = htons(0x0120);\n    VAR_10->qdcount = htons(1 + (VAR_2 == VAR_11));\n\n    uint8_t *VAR_12 = VAR_3 + sizeof(*VAR_10);\n\n    unsigned VAR_13;\n    if ((VAR_2 == VAR_14) || (VAR_2 == VAR_11)) {\n        VAR_13 = (VAR_12 - VAR_3);\n        VAR_12 += _enc_domain_name(VAR_12, VAR_0);\n        VAR_12 += _put_short(VAR_12, htons(VAR_15));\n        VAR_12 += _put_short(VAR_12, htons(VAR_16));\n    }\n\n    if ((VAR_2 == VAR_17) || (VAR_2 == VAR_11)) {\n        if (VAR_2 == VAR_11) {\n            VAR_12 += _put_short(VAR_12, htons((0xc000) | (VAR_13)));\n        }\n        else {\n            VAR_12 += _enc_domain_name(VAR_12, VAR_0);\n        }\n        VAR_12 += _put_short(VAR_12, htons(VAR_18));\n        VAR_12 += _put_short(VAR_12, htons(VAR_16));\n    }\n\n    sock_udp_t VAR_19;\n\n    ssize_t VAR_20 = sock_udp_create(&VAR_19, NULL, &VAR_6, 0);\n    if (VAR_20) {\n        goto out;\n    }\n\n    for (int VAR_21 = 0; VAR_21 < VAR_22; VAR_21++) {\n        VAR_20 = sock_udp_send(&VAR_19, VAR_3, (VAR_12-VAR_3), NULL);\n        if (VAR_20 <= 0) {\n            continue;\n        }\n        VAR_20 = sock_udp_recv(&VAR_19, VAR_5, sizeof(VAR_5), 1000000LU, NULL);\n        if ((VAR_20 > 0) && (VAR_20 > (int)VAR_23)) {\n            if ((VAR_20 = _parse_dns_reply(VAR_5, VAR_20, VAR_1, VAR_2)) > 0) {\n                goto out;\n            }\n        }\n    }\n\nout:\n    sock_udp_close(&VAR_19);\n    return VAR_20;\n}",
  "func_graph_path": "RIOT-OS/RIOT/894ad2932244f7f4fcc7bf9bedebcac591d8ccda/dns.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -42,7 +42,6 @@\n \n     ssize_t res = sock_udp_create(&sock_dns, NULL, &sock_dns_server, 0);\n     if (res) {\n-            puts(\"a\");\n         goto out;\n     }\n ",
  "diff_line_info": {
    "deleted_lines": [
      "            puts(\"a\");"
    ],
    "added_lines": []
  },
  "is_vul": true,
  "pr_url": "https://github.com/RIOT-OS/RIOT/pull/10740",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/RIOT-OS/RIOT/pull/10740: 403 Client Error: Forbidden for url: https://api.github.com/repos/RIOT-OS/RIOT/pulls/10740",
  "Bug Filter": "Supporting & Non-Core Improvements",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Supporting & Non-Core Improvements  \n**Confidence:** 0.9  \n\nThe patch removes a debug statement and does not address a security vulnerability. The test procedure suggests a stability fix, but the code change itself doesn't fix a security issue. This falls under non-core improvements."
}