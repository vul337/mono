{
  "cve_id": "CVE-2019-18393",
  "cwe_ids": [
    "CWE-22"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:N/A:N",
  "cvss_is_v3": false,
  "repo_name": "igniterealtime/Openfire",
  "commit_msg": "OF-1886: Plugin Servlet shouldn't provide access to any file on the host",
  "commit_hash": "5af6e03c25b121d01e752927c401124a4da569f7",
  "git_url": "https://github.com/igniterealtime/Openfire/commit/5af6e03c25b121d01e752927c401124a4da569f7",
  "file_path": "xmppserver/src/main/java/org/jivesoftware/openfire/container/PluginServlet.java",
  "func_name": "handleOtherRequest",
  "func_before": "private void handleOtherRequest(String pathInfo, HttpServletResponse response) throws IOException {\n        String[] parts = pathInfo.split(\"/\");\n        // Image request must be in correct format.\n        if (parts.length < 3) {\n            response.setStatus(HttpServletResponse.SC_NOT_FOUND);\n            return;\n        }\n\n        String contextPath = \"\";\n        int index = pathInfo.indexOf(parts[1]);\n        if (index != -1) {\n            contextPath = pathInfo.substring(index + parts[1].length());\n        }\n\n        File pluginDirectory = new File(JiveGlobals.getHomeDirectory(), \"plugins\");\n        File file = new File(pluginDirectory, parts[1] + File.separator + \"web\" + contextPath);\n\n        // When using dev environment, the images dir may be under something other that web.\n        Plugin plugin = pluginManager.getPlugin(parts[1]);\n        PluginDevEnvironment environment = pluginManager.getDevEnvironment(plugin);\n\n        if (environment != null) {\n            file = new File(environment.getWebRoot(), contextPath);\n        }\n        if (!file.exists()) {\n            response.setStatus(HttpServletResponse.SC_NOT_FOUND);\n            return;\n        }\n\n        String contentType = getServletContext().getMimeType(pathInfo);\n        if (contentType == null) {\n            contentType = \"text/plain\";\n        }\n        response.setContentType(contentType);\n        // Write out the resource to the user.\n        try (InputStream in = new BufferedInputStream(new FileInputStream(file))) {\n            try (ServletOutputStream out = response.getOutputStream()) {\n\n                // Set the size of the file.\n                response.setContentLength((int) file.length());\n\n                // Use a 1K buffer.\n                byte[] buf = new byte[1024];\n                int len;\n                while ((len = in.read(buf)) != -1) {\n                    out.write(buf, 0, len);\n                }\n            }\n        }\n    }",
  "abstract_func_before": "private void handleOtherRequest(String VAR_0, HttpServletResponse VAR_1) throws IOException {\n        String[] VAR_2 = VAR_0.split(\"/\");\n        /* COMMENT_0 */\n        if (VAR_2.length < 3) {\n            VAR_1.setStatus(VAR_3.SC_NOT_FOUND);\n            return;\n        }\n\n        String VAR_4 = \"\";\n        int VAR_5 = VAR_0.indexOf(VAR_2[1]);\n        if (VAR_5 != -1) {\n            VAR_4 = VAR_0.substring(VAR_5 + VAR_2[1].length());\n        }\n\n        File VAR_6 = new File(VAR_7.getHomeDirectory(), \"plugins\");\n        File VAR_8 = new File(VAR_6, VAR_2[1] + VAR_9.separator + \"web\" + VAR_4);\n\n        /* COMMENT_1 */\n        Plugin VAR_10 = VAR_11.getPlugin(VAR_2[1]);\n        PluginDevEnvironment VAR_12 = VAR_11.getDevEnvironment(VAR_10);\n\n        if (VAR_12 != null) {\n            VAR_8 = new File(VAR_12.getWebRoot(), VAR_4);\n        }\n        if (!VAR_8.exists()) {\n            VAR_1.setStatus(VAR_3.SC_NOT_FOUND);\n            return;\n        }\n\n        String VAR_13 = getServletContext().getMimeType(VAR_0);\n        if (VAR_13 == null) {\n            VAR_13 = \"text/plain\";\n        }\n        VAR_1.setContentType(VAR_13);\n        /* COMMENT_2 */\n        try (InputStream VAR_14 = new BufferedInputStream(new FileInputStream(VAR_8))) {\n            try (ServletOutputStream VAR_15 = VAR_1.getOutputStream()) {\n\n                /* COMMENT_3 */\n                VAR_1.setContentLength((int) VAR_8.length());\n\n                /* COMMENT_4 */\n                byte[] VAR_16 = new byte[1024];\n                int VAR_17;\n                while ((VAR_17 = VAR_14.read(VAR_16)) != -1) {\n                    VAR_15.write(VAR_16, 0, VAR_17);\n                }\n            }\n        }\n    }",
  "func_graph_path_before": "igniterealtime/Openfire/5af6e03c25b121d01e752927c401124a4da569f7/PluginServlet.java/vul/before/0.json",
  "func": "private void handleOtherRequest(String pathInfo, HttpServletResponse response) throws IOException {\n        String[] parts = pathInfo.split(\"/\");\n        // Image request must be in correct format.\n        if (parts.length < 3) {\n            response.setStatus(HttpServletResponse.SC_NOT_FOUND);\n            return;\n        }\n\n        String contextPath = \"\";\n        int index = pathInfo.indexOf(parts[1]);\n        if (index != -1) {\n            contextPath = pathInfo.substring(index + parts[1].length());\n        }\n\n        File pluginDirectory = new File(JiveGlobals.getHomeDirectory(), \"plugins\");\n        File file = new File(pluginDirectory, parts[1] + File.separator + \"web\" + contextPath);\n\n        // When using dev environment, the images dir may be under something other that web.\n        Plugin plugin = pluginManager.getPlugin(parts[1]);\n        PluginDevEnvironment environment = pluginManager.getDevEnvironment(plugin);\n\n        if (environment != null) {\n            file = new File(environment.getWebRoot(), contextPath);\n        } else {\n            if ( !ALLOW_LOCAL_FILE_READING.getValue() ) {\n                // If _not_ in a DEV environment, ensure that the file that's being served is a\n                // file that is part of Openfire. This guards against accessing files from the\n                // operating system, or other files that shouldn't be accessible via the web (OF-1886).\n                final Path absoluteHome = new File( JiveGlobals.getHomeDirectory() ).toPath().normalize().toAbsolutePath();\n                final Path absoluteLookup = file.toPath().normalize().toAbsolutePath();\n                if ( !absoluteLookup.startsWith( absoluteHome ) )\n                {\n                    response.setStatus( HttpServletResponse.SC_FORBIDDEN );\n                    return;\n                }\n            }\n        }\n\n        if (!file.exists()) {\n            response.setStatus(HttpServletResponse.SC_NOT_FOUND);\n            return;\n        }\n\n        String contentType = getServletContext().getMimeType(pathInfo);\n        if (contentType == null) {\n            contentType = \"text/plain\";\n        }\n        response.setContentType(contentType);\n        // Write out the resource to the user.\n        try (InputStream in = new BufferedInputStream(new FileInputStream(file))) {\n            try (ServletOutputStream out = response.getOutputStream()) {\n\n                // Set the size of the file.\n                response.setContentLength((int) file.length());\n\n                // Use a 1K buffer.\n                byte[] buf = new byte[1024];\n                int len;\n                while ((len = in.read(buf)) != -1) {\n                    out.write(buf, 0, len);\n                }\n            }\n        }\n    }",
  "abstract_func": "private void handleOtherRequest(String VAR_0, HttpServletResponse VAR_1) throws IOException {\n        String[] VAR_2 = VAR_0.split(\"/\");\n        /* COMMENT_0 */\n        if (VAR_2.length < 3) {\n            VAR_1.setStatus(VAR_3.SC_NOT_FOUND);\n            return;\n        }\n\n        String VAR_4 = \"\";\n        int VAR_5 = VAR_0.indexOf(VAR_2[1]);\n        if (VAR_5 != -1) {\n            VAR_4 = VAR_0.substring(VAR_5 + VAR_2[1].length());\n        }\n\n        File VAR_6 = new File(VAR_7.getHomeDirectory(), \"plugins\");\n        File VAR_8 = new File(VAR_6, VAR_2[1] + VAR_9.separator + \"web\" + VAR_4);\n\n        /* COMMENT_1 */\n        Plugin VAR_10 = VAR_11.getPlugin(VAR_2[1]);\n        PluginDevEnvironment VAR_12 = VAR_11.getDevEnvironment(VAR_10);\n\n        if (VAR_12 != null) {\n            VAR_8 = new File(VAR_12.getWebRoot(), VAR_4);\n        } else {\n            if ( !VAR_13.getValue() ) {\n                /* COMMENT_2 */\n                /* COMMENT_3 */\n                /* COMMENT_4 */\n                final Path VAR_14 = new File( VAR_7.getHomeDirectory() ).toPath().normalize().toAbsolutePath();\n                final Path VAR_15 = VAR_8.toPath().normalize().toAbsolutePath();\n                if ( !VAR_15.startsWith( VAR_14 ) )\n                {\n                    VAR_1.setStatus( VAR_3.SC_FORBIDDEN );\n                    return;\n                }\n            }\n        }\n\n        if (!VAR_8.exists()) {\n            VAR_1.setStatus(VAR_3.SC_NOT_FOUND);\n            return;\n        }\n\n        String VAR_16 = getServletContext().getMimeType(VAR_0);\n        if (VAR_16 == null) {\n            VAR_16 = \"text/plain\";\n        }\n        VAR_1.setContentType(VAR_16);\n        /* COMMENT_5 */\n        try (InputStream VAR_17 = new BufferedInputStream(new FileInputStream(VAR_8))) {\n            try (ServletOutputStream VAR_18 = VAR_1.getOutputStream()) {\n\n                /* COMMENT_6 */\n                VAR_1.setContentLength((int) VAR_8.length());\n\n                /* COMMENT_7 */\n                byte[] VAR_19 = new byte[1024];\n                int VAR_20;\n                while ((VAR_20 = VAR_17.read(VAR_19)) != -1) {\n                    VAR_18.write(VAR_19, 0, VAR_20);\n                }\n            }\n        }\n    }",
  "func_graph_path": "igniterealtime/Openfire/5af6e03c25b121d01e752927c401124a4da569f7/PluginServlet.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -21,7 +21,21 @@\n \n         if (environment != null) {\n             file = new File(environment.getWebRoot(), contextPath);\n+        } else {\n+            if ( !ALLOW_LOCAL_FILE_READING.getValue() ) {\n+                // If _not_ in a DEV environment, ensure that the file that's being served is a\n+                // file that is part of Openfire. This guards against accessing files from the\n+                // operating system, or other files that shouldn't be accessible via the web (OF-1886).\n+                final Path absoluteHome = new File( JiveGlobals.getHomeDirectory() ).toPath().normalize().toAbsolutePath();\n+                final Path absoluteLookup = file.toPath().normalize().toAbsolutePath();\n+                if ( !absoluteLookup.startsWith( absoluteHome ) )\n+                {\n+                    response.setStatus( HttpServletResponse.SC_FORBIDDEN );\n+                    return;\n+                }\n+            }\n         }\n+\n         if (!file.exists()) {\n             response.setStatus(HttpServletResponse.SC_NOT_FOUND);\n             return;",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "        } else {",
      "            if ( !ALLOW_LOCAL_FILE_READING.getValue() ) {",
      "                // If _not_ in a DEV environment, ensure that the file that's being served is a",
      "                // file that is part of Openfire. This guards against accessing files from the",
      "                // operating system, or other files that shouldn't be accessible via the web (OF-1886).",
      "                final Path absoluteHome = new File( JiveGlobals.getHomeDirectory() ).toPath().normalize().toAbsolutePath();",
      "                final Path absoluteLookup = file.toPath().normalize().toAbsolutePath();",
      "                if ( !absoluteLookup.startsWith( absoluteHome ) )",
      "                {",
      "                    response.setStatus( HttpServletResponse.SC_FORBIDDEN );",
      "                    return;",
      "                }",
      "            }",
      ""
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/igniterealtime/Openfire/pull/1498",
  "description": {
    "pr_info": {
      "title": "OF-1886: Plugin Servlet shouldn't provide access to any file on the host",
      "number": 1498
    },
    "comment": [
      "This commit limits what files can be accessed through the plugin servlet to those that are under the Openfire home directory.\r\n\r\nA property has been provided to disable this new restriction."
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Step 1: Input Analysis**  \nThe commit message and vulnerability description clearly indicate a security concern: restricting file access through the plugin servlet. The code changes introduce checks to ensure files served are within the Openfire home directory, adding necessary security validations.\n\n**Step 2: Consistency Check**  \nThe commit message accurately reflects the code changes, which add security restrictions. The code modifications are well-aligned with the described vulnerability fix.\n\n**Step 3: Purpose Evaluation**  \nThe changes modify core logic to address a security issue, preventing unauthorized file access, which is critical for security.\n\n**Step 4: Security Vulnerability Assessment**  \nYes, the patch addresses an external exploit risk by limiting file access, which is a clear security fix.\n\n**Step 5: Non-Security Classification (Not Applicable)**  \nThe patch is a security fix.\n\n**Step 6: Confidence Scoring**  \nConfidence is high since the description, code changes, and context all clearly point to a security fix.\n\n**Final Classification:** Security Vulnerability Fix; **Confidence:** 1.0"
}