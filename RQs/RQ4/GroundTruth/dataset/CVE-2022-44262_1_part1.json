{
  "cve_id": "CVE-2022-44262",
  "cwe_ids": [
    "CWE-Other"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
  "cvss_is_v3": true,
  "repo_name": "ff4j",
  "commit_msg": "fix: Validate FlippingStrategy in various parsers (#624)",
  "commit_hash": "991df72725f78adbc413d9b0fbb676201f1882e0",
  "git_url": "https://github.com/ff4j/ff4j/commit/991df72725f78adbc413d9b0fbb676201f1882e0",
  "file_path": "ff4j-config-properties/src/main/java/org/ff4j/parser/properties/PropertiesParser.java",
  "func_name": "parseFeatures",
  "func_before": "private void parseFeatures(FF4jConfiguration ff4jConfig, Map<String, String> mapConf) {\n        int idx = 0;\n        String currentFeatureKey = FF4J_TAG + \".\" + FEATURES_TAG  + \".\" + idx;\n        while (mapConf.containsKey(currentFeatureKey +  \".\" + FEATURE_ATT_UID)) {\n            assertKeyNotEmpty(mapConf, currentFeatureKey +  \".\" + FEATURE_ATT_UID);\n            Feature f = new Feature(mapConf.get(currentFeatureKey +  \".\" + FEATURE_ATT_UID));\n            // Enabled\n            assertKeyNotEmpty(mapConf, currentFeatureKey +  \".\" + FEATURE_ATT_ENABLE);\n            f.setEnable(Boolean.valueOf(mapConf.get(currentFeatureKey +  \".\" + FEATURE_ATT_ENABLE)));\n            // Description\n            String description = mapConf.get(currentFeatureKey +  \".\" + FEATURE_ATT_DESC);\n            if (null != description && !\"\".equals(description)) {\n                f.setDescription(description);\n            }\n            // Group\n            String groupName = mapConf.get(currentFeatureKey +  \".\" + FEATURE_ATT_GROUP);\n            if (null != groupName && !\"\".equals(groupName)) {\n                f.setGroup(groupName);\n            }\n            // Permissions\n            String strPermissions = mapConf.get(currentFeatureKey +  \".\" + FEATURE_ATT_PERMISSIONS);\n            if (null != strPermissions && !\"\".equals(strPermissions)) {\n                f.setPermissions(\n                        Arrays.asList(strPermissions.split(\",\"))\n                              .stream()\n                              .map(String::trim)\n                              .collect(Collectors.toSet()));\n            }\n            // Custom Properties\n            f.setCustomProperties(parseProperties(currentFeatureKey + \".\" + FEATURE_ATT_PROPERTIES, mapConf));\n            // FlipStrategy\n            String flipStrategyClass = mapConf.get(currentFeatureKey +  \".\" + TOGGLE_STRATEGY_TAG + \".\" + TOGGLE_STRATEGY_ATTCLASS);\n            if (null != flipStrategyClass && !\"\".equals(flipStrategyClass)) {\n                FlippingStrategy flipStrategy = null;\n                try {\n                    flipStrategy = (FlippingStrategy) Class.forName(flipStrategyClass).newInstance();\n                } catch (Exception e) {\n                    throw new IllegalArgumentException(\"Cannot parse flipStrategy for feature '\" + f.getUid() + \n                            \"' -> check key [\" + currentFeatureKey +  \".\" + TOGGLE_STRATEGY_TAG + \".\" + TOGGLE_STRATEGY_ATTCLASS + \"]\", e);\n                }\n                int idxParam = 0;\n                String currentParamKey = currentFeatureKey +  \".\" + TOGGLE_STRATEGY_TAG + \".\" + TOGGLE_STRATEGY_PARAMTAG + \".\" + idxParam;\n                Map<String, String> params = new HashMap<>();\n                while (mapConf.containsKey(currentParamKey+  \".\" + TOGGLE_STRATEGY_PARAMNAME)) {\n                    assertKeyNotEmpty(mapConf, currentParamKey + \".\" + TOGGLE_STRATEGY_PARAMNAME);\n                    assertKeyNotEmpty(mapConf, currentParamKey + \".\" + TOGGLE_STRATEGY_PARAMVALUE);\n                    params.put(mapConf.get(currentParamKey + \".\" + TOGGLE_STRATEGY_PARAMNAME), \n                               mapConf.get(currentParamKey + \".\" + TOGGLE_STRATEGY_PARAMVALUE));\n                    currentParamKey = currentFeatureKey +  \".\" + TOGGLE_STRATEGY_TAG + \".\" + TOGGLE_STRATEGY_PARAMTAG + \".\" + ++idxParam;\n                }\n                flipStrategy.init(f.getUid(), params);\n                f.setFlippingStrategy(flipStrategy);\n                \n            }\n            ff4jConfig.getFeatures().put(f.getUid(), f);\n            \n            // ff4j.features.X\n            currentFeatureKey = FF4J_TAG + \".\" + FEATURES_TAG  + \".\" + ++idx;\n        }\n        \n    }",
  "abstract_func_before": "private void parseFeatures(FF4jConfiguration VAR_0, Map<String, String> VAR_1) {\n        int VAR_2 = 0;\n        String VAR_3 = VAR_4 + \".\" + VAR_5  + \".\" + VAR_2;\n        while (VAR_1.containsKey(VAR_3 +  \".\" + VAR_6)) {\n            assertKeyNotEmpty(VAR_1, VAR_3 +  \".\" + VAR_6);\n            Feature VAR_7 = new Feature(VAR_1.get(VAR_3 +  \".\" + VAR_6));\n            /* COMMENT_0 */\n            assertKeyNotEmpty(VAR_1, VAR_3 +  \".\" + VAR_8);\n            VAR_7.setEnable(VAR_9.valueOf(VAR_1.get(VAR_3 +  \".\" + VAR_8)));\n            /* COMMENT_1 */\n            String VAR_10 = VAR_1.get(VAR_3 +  \".\" + VAR_11);\n            if (null != VAR_10 && !\"\".equals(VAR_10)) {\n                VAR_7.setDescription(VAR_10);\n            }\n            /* COMMENT_2 */\n            String VAR_12 = VAR_1.get(VAR_3 +  \".\" + VAR_13);\n            if (null != VAR_12 && !\"\".equals(VAR_12)) {\n                VAR_7.setGroup(VAR_12);\n            }\n            /* COMMENT_3 */\n            String VAR_14 = VAR_1.get(VAR_3 +  \".\" + VAR_15);\n            if (null != VAR_14 && !\"\".equals(VAR_14)) {\n                VAR_7.setPermissions(\n                        VAR_16.asList(VAR_14.split(\",\"))\n                              .stream()\n                              .map(VAR_17::VAR_18)\n                              .collect(VAR_19.toSet()));\n            }\n            /* COMMENT_4 */\n            VAR_7.setCustomProperties(parseProperties(VAR_3 + \".\" + VAR_20, VAR_1));\n            /* COMMENT_5 */\n            String VAR_21 = VAR_1.get(VAR_3 +  \".\" + VAR_22 + \".\" + VAR_23);\n            if (null != VAR_21 && !\"\".equals(VAR_21)) {\n                FlippingStrategy VAR_24 = null;\n                try {\n                    VAR_24 = (FlippingStrategy) VAR_25.forName(VAR_21).newInstance();\n                } catch (Exception VAR_26) {\n                    throw new IllegalArgumentException(\"Cannot parse flipStrategy for feature '\" + VAR_7.getUid() + \n                            \"' -> check key [\" + VAR_3 +  \".\" + VAR_22 + \".\" + VAR_23 + \"]\", VAR_26);\n                }\n                int VAR_27 = 0;\n                String VAR_28 = VAR_3 +  \".\" + VAR_22 + \".\" + VAR_29 + \".\" + VAR_27;\n                Map<String, String> VAR_30 = new HashMap<>();\n                while (VAR_1.containsKey(VAR_28+  \".\" + VAR_31)) {\n                    assertKeyNotEmpty(VAR_1, VAR_28 + \".\" + VAR_31);\n                    assertKeyNotEmpty(VAR_1, VAR_28 + \".\" + VAR_32);\n                    VAR_30.put(VAR_1.get(VAR_28 + \".\" + VAR_31), \n                               VAR_1.get(VAR_28 + \".\" + VAR_32));\n                    VAR_28 = VAR_3 +  \".\" + VAR_22 + \".\" + VAR_29 + \".\" + ++VAR_27;\n                }\n                VAR_24.init(VAR_7.getUid(), VAR_30);\n                VAR_7.setFlippingStrategy(VAR_24);\n                \n            }\n            VAR_0.getFeatures().put(VAR_7.getUid(), VAR_7);\n            \n            /* COMMENT_6 */\n            VAR_3 = VAR_4 + \".\" + VAR_5  + \".\" + ++VAR_2;\n        }\n        \n    }",
  "func_graph_path_before": "ff4j/991df72725f78adbc413d9b0fbb676201f1882e0/PropertiesParser.java/vul/before/0.json",
  "func": "private void parseFeatures(FF4jConfiguration ff4jConfig, Map<String, String> mapConf) {\n        int idx = 0;\n        String currentFeatureKey = FF4J_TAG + \".\" + FEATURES_TAG  + \".\" + idx;\n        while (mapConf.containsKey(currentFeatureKey +  \".\" + FEATURE_ATT_UID)) {\n            assertKeyNotEmpty(mapConf, currentFeatureKey +  \".\" + FEATURE_ATT_UID);\n            Feature f = new Feature(mapConf.get(currentFeatureKey +  \".\" + FEATURE_ATT_UID));\n            // Enabled\n            assertKeyNotEmpty(mapConf, currentFeatureKey +  \".\" + FEATURE_ATT_ENABLE);\n            f.setEnable(Boolean.valueOf(mapConf.get(currentFeatureKey +  \".\" + FEATURE_ATT_ENABLE)));\n            // Description\n            String description = mapConf.get(currentFeatureKey +  \".\" + FEATURE_ATT_DESC);\n            if (null != description && !\"\".equals(description)) {\n                f.setDescription(description);\n            }\n            // Group\n            String groupName = mapConf.get(currentFeatureKey +  \".\" + FEATURE_ATT_GROUP);\n            if (null != groupName && !\"\".equals(groupName)) {\n                f.setGroup(groupName);\n            }\n            // Permissions\n            String strPermissions = mapConf.get(currentFeatureKey +  \".\" + FEATURE_ATT_PERMISSIONS);\n            if (null != strPermissions && !\"\".equals(strPermissions)) {\n                f.setPermissions(\n                        Arrays.asList(strPermissions.split(\",\"))\n                              .stream()\n                              .map(String::trim)\n                              .collect(Collectors.toSet()));\n            }\n            // Custom Properties\n            f.setCustomProperties(parseProperties(currentFeatureKey + \".\" + FEATURE_ATT_PROPERTIES, mapConf));\n            // FlipStrategy\n            String flipStrategyClass = mapConf.get(currentFeatureKey +  \".\" + TOGGLE_STRATEGY_TAG + \".\" + TOGGLE_STRATEGY_ATTCLASS);\n            if (null != flipStrategyClass && !\"\".equals(flipStrategyClass)) {\n                FlippingStrategy flipStrategy = null;\n                try {\n                    Class<?> typeClass = Class.forName(flipStrategyClass);\n                    if (!FlippingStrategy.class.isAssignableFrom(typeClass)) {\n                        throw new IllegalArgumentException(\"Cannot create flipstrategy <\" + flipStrategyClass + \"> invalid type\");\n                    }\n                    flipStrategy = (FlippingStrategy) typeClass.newInstance();\n                } catch (Exception e) {\n                    throw new IllegalArgumentException(\"Cannot parse flipStrategy for feature '\" + f.getUid() + \n                            \"' -> check key [\" + currentFeatureKey +  \".\" + TOGGLE_STRATEGY_TAG + \".\" + TOGGLE_STRATEGY_ATTCLASS + \"]\", e);\n                }\n                int idxParam = 0;\n                String currentParamKey = currentFeatureKey +  \".\" + TOGGLE_STRATEGY_TAG + \".\" + TOGGLE_STRATEGY_PARAMTAG + \".\" + idxParam;\n                Map<String, String> params = new HashMap<>();\n                while (mapConf.containsKey(currentParamKey+  \".\" + TOGGLE_STRATEGY_PARAMNAME)) {\n                    assertKeyNotEmpty(mapConf, currentParamKey + \".\" + TOGGLE_STRATEGY_PARAMNAME);\n                    assertKeyNotEmpty(mapConf, currentParamKey + \".\" + TOGGLE_STRATEGY_PARAMVALUE);\n                    params.put(mapConf.get(currentParamKey + \".\" + TOGGLE_STRATEGY_PARAMNAME), \n                               mapConf.get(currentParamKey + \".\" + TOGGLE_STRATEGY_PARAMVALUE));\n                    currentParamKey = currentFeatureKey +  \".\" + TOGGLE_STRATEGY_TAG + \".\" + TOGGLE_STRATEGY_PARAMTAG + \".\" + ++idxParam;\n                }\n                flipStrategy.init(f.getUid(), params);\n                f.setFlippingStrategy(flipStrategy);\n                \n            }\n            ff4jConfig.getFeatures().put(f.getUid(), f);\n            \n            // ff4j.features.X\n            currentFeatureKey = FF4J_TAG + \".\" + FEATURES_TAG  + \".\" + ++idx;\n        }\n        \n    }",
  "abstract_func": "private void parseFeatures(FF4jConfiguration VAR_0, Map<String, String> VAR_1) {\n        int VAR_2 = 0;\n        String VAR_3 = VAR_4 + \".\" + VAR_5  + \".\" + VAR_2;\n        while (VAR_1.containsKey(VAR_3 +  \".\" + VAR_6)) {\n            assertKeyNotEmpty(VAR_1, VAR_3 +  \".\" + VAR_6);\n            Feature VAR_7 = new Feature(VAR_1.get(VAR_3 +  \".\" + VAR_6));\n            /* COMMENT_0 */\n            assertKeyNotEmpty(VAR_1, VAR_3 +  \".\" + VAR_8);\n            VAR_7.setEnable(VAR_9.valueOf(VAR_1.get(VAR_3 +  \".\" + VAR_8)));\n            /* COMMENT_1 */\n            String VAR_10 = VAR_1.get(VAR_3 +  \".\" + VAR_11);\n            if (null != VAR_10 && !\"\".equals(VAR_10)) {\n                VAR_7.setDescription(VAR_10);\n            }\n            /* COMMENT_2 */\n            String VAR_12 = VAR_1.get(VAR_3 +  \".\" + VAR_13);\n            if (null != VAR_12 && !\"\".equals(VAR_12)) {\n                VAR_7.setGroup(VAR_12);\n            }\n            /* COMMENT_3 */\n            String VAR_14 = VAR_1.get(VAR_3 +  \".\" + VAR_15);\n            if (null != VAR_14 && !\"\".equals(VAR_14)) {\n                VAR_7.setPermissions(\n                        VAR_16.asList(VAR_14.split(\",\"))\n                              .stream()\n                              .map(VAR_17::VAR_18)\n                              .collect(VAR_19.toSet()));\n            }\n            /* COMMENT_4 */\n            VAR_7.setCustomProperties(parseProperties(VAR_3 + \".\" + VAR_20, VAR_1));\n            /* COMMENT_5 */\n            String VAR_21 = VAR_1.get(VAR_3 +  \".\" + VAR_22 + \".\" + VAR_23);\n            if (null != VAR_21 && !\"\".equals(VAR_21)) {\n                FlippingStrategy VAR_24 = null;\n                try {\n                    Class<?> VAR_25 = VAR_26.forName(VAR_21);\n                    if (!FlippingStrategy.class.isAssignableFrom(VAR_25)) {\n                        throw new IllegalArgumentException(\"Cannot create flipstrategy <\" + VAR_21 + \"> invalid type\");\n                    }\n                    VAR_24 = (FlippingStrategy) VAR_25.newInstance();\n                } catch (Exception VAR_27) {\n                    throw new IllegalArgumentException(\"Cannot parse flipStrategy for feature '\" + VAR_7.getUid() + \n                            \"' -> check key [\" + VAR_3 +  \".\" + VAR_22 + \".\" + VAR_23 + \"]\", VAR_27);\n                }\n                int VAR_28 = 0;\n                String VAR_29 = VAR_3 +  \".\" + VAR_22 + \".\" + VAR_30 + \".\" + VAR_28;\n                Map<String, String> VAR_31 = new HashMap<>();\n                while (VAR_1.containsKey(VAR_29+  \".\" + VAR_32)) {\n                    assertKeyNotEmpty(VAR_1, VAR_29 + \".\" + VAR_32);\n                    assertKeyNotEmpty(VAR_1, VAR_29 + \".\" + VAR_33);\n                    VAR_31.put(VAR_1.get(VAR_29 + \".\" + VAR_32), \n                               VAR_1.get(VAR_29 + \".\" + VAR_33));\n                    VAR_29 = VAR_3 +  \".\" + VAR_22 + \".\" + VAR_30 + \".\" + ++VAR_28;\n                }\n                VAR_24.init(VAR_7.getUid(), VAR_31);\n                VAR_7.setFlippingStrategy(VAR_24);\n                \n            }\n            VAR_0.getFeatures().put(VAR_7.getUid(), VAR_7);\n            \n            /* COMMENT_6 */\n            VAR_3 = VAR_4 + \".\" + VAR_5  + \".\" + ++VAR_2;\n        }\n        \n    }",
  "func_graph_path": "ff4j/991df72725f78adbc413d9b0fbb676201f1882e0/PropertiesParser.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -33,7 +33,11 @@\n             if (null != flipStrategyClass && !\"\".equals(flipStrategyClass)) {\n                 FlippingStrategy flipStrategy = null;\n                 try {\n-                    flipStrategy = (FlippingStrategy) Class.forName(flipStrategyClass).newInstance();\n+                    Class<?> typeClass = Class.forName(flipStrategyClass);\n+                    if (!FlippingStrategy.class.isAssignableFrom(typeClass)) {\n+                        throw new IllegalArgumentException(\"Cannot create flipstrategy <\" + flipStrategyClass + \"> invalid type\");\n+                    }\n+                    flipStrategy = (FlippingStrategy) typeClass.newInstance();\n                 } catch (Exception e) {\n                     throw new IllegalArgumentException(\"Cannot parse flipStrategy for feature '\" + f.getUid() + \n                             \"' -> check key [\" + currentFeatureKey +  \".\" + TOGGLE_STRATEGY_TAG + \".\" + TOGGLE_STRATEGY_ATTCLASS + \"]\", e);",
  "diff_line_info": {
    "deleted_lines": [
      "                    flipStrategy = (FlippingStrategy) Class.forName(flipStrategyClass).newInstance();"
    ],
    "added_lines": [
      "                    Class<?> typeClass = Class.forName(flipStrategyClass);",
      "                    if (!FlippingStrategy.class.isAssignableFrom(typeClass)) {",
      "                        throw new IllegalArgumentException(\"Cannot create flipstrategy <\" + flipStrategyClass + \"> invalid type\");",
      "                    }",
      "                    flipStrategy = (FlippingStrategy) typeClass.newInstance();"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/ff4j/ff4j/pull/625",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/ff4j/ff4j/pull/625: 403 Client Error: Forbidden for url: https://api.github.com/repos/ff4j/ff4j/pulls/625",
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Defect Remediation & Feature Upgrades  \n**Confidence:** 0.9"
}