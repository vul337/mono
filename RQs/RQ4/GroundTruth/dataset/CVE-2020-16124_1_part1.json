{
  "cve_id": "CVE-2020-16124",
  "cwe_ids": [
    "CWE-190"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "ros/ros_comm",
  "commit_msg": "Trap for overly large input to XmlRPCPP which could cause problems with int <-> size_t conversions.\n\n - In XmlRpcClient, XmlRpcServerConnection and XmlRpcSocket, recognize when incoming or outgoing data is too large, generate an error and discard the data when practical.\n - Use the safe strtol() rather than atoi() to decode an incoming content-length header, and generate an error if the length is invalid or too large.\n - In XmlRpcUtil, prevent attempts to parse overly large XML input.\n - Add tests where they can reasonably be inserted into existing test routines.\n\nAlthough this fix could be cleaner the update is written to make the update ABI compatible.\n\nThis fix addresses CVE-2020-16124 / Integer overflow in ros_comm.\n\nSigned-off-by: Sid Faber <sid.faber@canonical.com>",
  "commit_hash": "3dd308911d7294bc6cff12f626b8467fe1555423",
  "git_url": "https://github.com/ros/ros_comm/commit/3dd308911d7294bc6cff12f626b8467fe1555423",
  "file_path": "utilities/xmlrpcpp/src/XmlRpcUtil.cpp",
  "func_name": "XmlRpcUtil::findTag",
  "func_before": "bool \nXmlRpcUtil::findTag(const char* tag, std::string const& xml, int* offset)\n{\n  if (*offset >= int(xml.length())) return false;\n  size_t istart = xml.find(tag, *offset);\n  if (istart == std::string::npos)\n    return false;\n\n  *offset = int(istart + strlen(tag));\n  return true;\n}",
  "abstract_func_before": "bool \nXmlRpcUtil::findTag(const char* VAR_0, std::string const& VAR_1, int* VAR_2)\n{\n  if (*VAR_2 >= int(VAR_1.length())) return false;\n  size_t VAR_3 = VAR_1.find(VAR_0, *VAR_2);\n  if (VAR_3 == std::string::npos)\n    return false;\n\n  *VAR_2 = int(VAR_3 + strlen(VAR_0));\n  return true;\n}",
  "func_graph_path_before": "ros/ros_comm/3dd308911d7294bc6cff12f626b8467fe1555423/XmlRpcUtil.cpp/vul/before/2.json",
  "func": "bool \nXmlRpcUtil::findTag(const char* tag, std::string const& xml, int* offset)\n{\n  if (xml.length() > size_t(__INT_MAX__)) return false;\n  if (*offset >= int(xml.length())) return false;\n  size_t istart = xml.find(tag, *offset);\n  if (istart == std::string::npos)\n    return false;\n\n  *offset = int(istart + strlen(tag));\n  return true;\n}",
  "abstract_func": "bool \nXmlRpcUtil::findTag(const char* VAR_0, std::string const& VAR_1, int* VAR_2)\n{\n  if (VAR_1.length() > size_t(VAR_3)) return false;\n  if (*VAR_2 >= int(VAR_1.length())) return false;\n  size_t VAR_4 = VAR_1.find(VAR_0, *VAR_2);\n  if (VAR_4 == std::string::npos)\n    return false;\n\n  *VAR_2 = int(VAR_4 + strlen(VAR_0));\n  return true;\n}",
  "func_graph_path": "ros/ros_comm/3dd308911d7294bc6cff12f626b8467fe1555423/XmlRpcUtil.cpp/vul/after/2.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,6 +1,7 @@\n bool \n XmlRpcUtil::findTag(const char* tag, std::string const& xml, int* offset)\n {\n+  if (xml.length() > size_t(__INT_MAX__)) return false;\n   if (*offset >= int(xml.length())) return false;\n   size_t istart = xml.find(tag, *offset);\n   if (istart == std::string::npos)",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "  if (xml.length() > size_t(__INT_MAX__)) return false;"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/ros/ros_comm/pull/2065",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/ros/ros_comm/pull/2065: 403 Client Error: Forbidden for url: https://api.github.com/repos/ros/ros_comm/pulls/2065",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 1.0"
}