{
  "cve_id": "CVE-2022-38667",
  "cwe_ids": [
    "CWE-416"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
  "cvss_is_v3": true,
  "repo_name": "CrowCpp/Crow",
  "commit_msg": "Prevent HTTP pipelining which Crow doesn't support.",
  "commit_hash": "fba01dc76d6ea940ad7c8392e8f39f9647241d8e",
  "git_url": "https://github.com/CrowCpp/Crow/commit/fba01dc76d6ea940ad7c8392e8f39f9647241d8e",
  "file_path": "include/crow/parser.h",
  "func_name": "feed",
  "func_before": "bool feed(const char* buffer, int length)\n        {\n            const static http_parser_settings settings_{\n              on_message_begin,\n              on_method,\n              on_url,\n              on_header_field,\n              on_header_value,\n              on_headers_complete,\n              on_body,\n              on_message_complete,\n            };\n\n            int nparsed = http_parser_execute(this, &settings_, buffer, length);\n            if (http_errno != CHPE_OK)\n            {\n                return false;\n            }\n            return nparsed == length;\n        }",
  "abstract_func_before": "bool feed(const char* VAR_0, int VAR_1)\n        {\n            const static http_parser_settings VAR_2{\n              VAR_3,\n              VAR_4,\n              VAR_5,\n              VAR_6,\n              VAR_7,\n              VAR_8,\n              VAR_9,\n              VAR_10,\n            };\n\n            int VAR_11 = http_parser_execute(this, &VAR_2, VAR_0, VAR_1);\n            if (VAR_12 != VAR_13)\n            {\n                return false;\n            }\n            return VAR_11 == VAR_1;\n        }",
  "func_graph_path_before": "CrowCpp/Crow/fba01dc76d6ea940ad7c8392e8f39f9647241d8e/parser.h/vul/before/3.json",
  "func": "bool feed(const char* buffer, int length)\n        {\n            if (message_complete)\n                return true;\n\n            const static http_parser_settings settings_{\n              on_message_begin,\n              on_method,\n              on_url,\n              on_header_field,\n              on_header_value,\n              on_headers_complete,\n              on_body,\n              on_message_complete,\n            };\n\n            int nparsed = http_parser_execute(this, &settings_, buffer, length);\n            if (http_errno != CHPE_OK)\n            {\n                return false;\n            }\n            return nparsed == length;\n        }",
  "abstract_func": "bool feed(const char* VAR_0, int VAR_1)\n        {\n            if (VAR_2)\n                return true;\n\n            const static http_parser_settings VAR_3{\n              VAR_4,\n              VAR_5,\n              VAR_6,\n              VAR_7,\n              VAR_8,\n              VAR_9,\n              VAR_10,\n              VAR_11,\n            };\n\n            int VAR_12 = http_parser_execute(this, &VAR_3, VAR_0, VAR_1);\n            if (VAR_13 != VAR_14)\n            {\n                return false;\n            }\n            return VAR_12 == VAR_1;\n        }",
  "func_graph_path": "CrowCpp/Crow/fba01dc76d6ea940ad7c8392e8f39f9647241d8e/parser.h/vul/after/3.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,5 +1,8 @@\n bool feed(const char* buffer, int length)\n         {\n+            if (message_complete)\n+                return true;\n+\n             const static http_parser_settings settings_{\n               on_message_begin,\n               on_method,",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "            if (message_complete)",
      "                return true;",
      ""
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/CrowCpp/Crow/pull/524",
  "description": {
    "pr_info": {
      "title": "Prevent HTTP pipelining",
      "number": 524
    },
    "comment": [
      "Fixes a potential use-after-free vulnerability where using HTTP pipelining could cause Crow to execute code related to a connection after deleting it.\r\n\r\nIt also fixes a small bug where websocket connections could be established with invalid HTTP requests (ones that don't have a `Host` header)\r\n\r\nThanks to hebi Gynvael Coldwind for discovering and reporting the vulnerability."
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 0.95\n\n**Step-by-Step Explanation:**\n\n1. **Commit Message Analysis:** The message indicates a fix for HTTP pipelining, which Crow doesn't support, suggesting a functional issue that might have security implications.\n\n2. **Vulnerability Description:** Clearly states the patch addresses a use-after-free vulnerability and an issue with websockets and invalid HTTP requests. These are both security issues.\n\n3. **Code Diff Review:** The changes in the feed function add a check for message_complete, which likely prevents processing after deleting connections, aligning with the security fixes described.\n\n4. **Security Fix Confirmation:** All components (commit, description, code) consistently point to security-related fixes, specifically preventing use-after-free and improper connection handling.\n\n**Conclusion:** The patch is a security vulnerability fix with high confidence based on aligned evidence."
}