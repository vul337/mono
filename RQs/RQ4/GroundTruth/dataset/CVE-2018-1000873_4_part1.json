{
  "cve_id": "CVE-2018-1000873",
  "cwe_ids": [
    "CWE-20"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "FasterXML/jackson-modules-java8",
  "commit_msg": "Avoid latency problems converting decimal to time.\n\nFixes https://github.com/FasterXML/jackson-databind/issues/2141",
  "commit_hash": "ba27ce5909dfb49bcaf753ad3e04ecb980010b0b",
  "git_url": "https://github.com/FasterXML/jackson-modules-java8/commit/ba27ce5909dfb49bcaf753ad3e04ecb980010b0b",
  "file_path": "datetime/src/main/java/com/fasterxml/jackson/datatype/jsr310/DecimalUtils.java",
  "func_name": "toDecimal",
  "func_before": "public static String toDecimal(long seconds, int nanoseconds)\n    {\n        StringBuilder sb = new StringBuilder(20)\n            .append(seconds)\n            .append('.');\n        // 14-Mar-2016, tatu: Although we do not yet (with 2.7) trim trailing zeroes,\n        //   for general case, \n        if (nanoseconds == 0L) {\n            // !!! TODO: 14-Mar-2016, tatu: as per [datatype-jsr310], should trim\n            //     trailing zeroes\n            if (seconds == 0L) {\n                return \"0.0\";\n            }\n            \n//            sb.append('0');\n            sb.append(\"000000000\");\n        } else {\n            StringBuilder nanoSB = new StringBuilder(9);\n            nanoSB.append(nanoseconds);\n            // May need to both prepend leading nanos (if value less than 0.1)\n            final int nanosLen = nanoSB.length();\n            int prepZeroes = 9 - nanosLen;\n            while (prepZeroes > 0) {\n                --prepZeroes;\n                sb.append('0');\n            }\n\n            // !!! TODO: 14-Mar-2016, tatu: as per [datatype-jsr310], should trim\n            //     trailing zeroes\n            /*\n            // AND possibly trim trailing ones\n            int i = nanosLen;\n            while ((i > 1) && nanoSB.charAt(i-1) == '0') {\n                --i;\n            }\n            if (i < nanosLen) {\n                nanoSB.setLength(i);\n            }\n            */\n            sb.append(nanoSB);\n        }\n        return sb.toString();\n    }",
  "abstract_func_before": "public static String toDecimal(long VAR_0, int VAR_1)\n    {\n        StringBuilder VAR_2 = new StringBuilder(20)\n            .append(VAR_0)\n            .append('.');\n        /* COMMENT_0 */\n        /* COMMENT_1 */\n        if (VAR_1 == 0L) {\n            /* COMMENT_2 */\n            /* COMMENT_3 */\n            if (VAR_0 == 0L) {\n                return \"0.0\";\n            }\n            \n/* COMMENT_4 */\n            VAR_2.append(\"000000000\");\n        } else {\n            StringBuilder VAR_3 = new StringBuilder(9);\n            VAR_3.append(VAR_1);\n            /* COMMENT_5 */\n            final int VAR_4 = VAR_3.length();\n            int VAR_5 = 9 - VAR_4;\n            while (VAR_5 > 0) {\n                --VAR_5;\n                VAR_2.append('0');\n            }\n\n            /* COMMENT_2 */\n            /* COMMENT_3 */\n            /* COMMENT_6 */\n                                              \n                             \n                                                          \n                    \n             \n                               \n                                    \n             \n              \n            VAR_2.append(VAR_3);\n        }\n        return VAR_2.toString();\n    }",
  "func_graph_path_before": "FasterXML/jackson-modules-java8/ba27ce5909dfb49bcaf753ad3e04ecb980010b0b/DecimalUtils.java/vul/before/0.json",
  "func": "public static String toDecimal(long seconds, int nanoseconds)\n    {\n        StringBuilder sb = new StringBuilder(20)\n            .append(seconds)\n            .append('.');\n        // 14-Mar-2016, tatu: Although we do not yet (with 2.7) trim trailing zeroes,\n        //   for general case,\n        if (nanoseconds == 0L) {\n            // !!! TODO: 14-Mar-2016, tatu: as per [datatype-jsr310], should trim\n            //     trailing zeroes\n            if (seconds == 0L) {\n                return \"0.0\";\n            }\n\n//            sb.append('0');\n            sb.append(\"000000000\");\n        } else {\n            StringBuilder nanoSB = new StringBuilder(9);\n            nanoSB.append(nanoseconds);\n            // May need to both prepend leading nanos (if value less than 0.1)\n            final int nanosLen = nanoSB.length();\n            int prepZeroes = 9 - nanosLen;\n            while (prepZeroes > 0) {\n                --prepZeroes;\n                sb.append('0');\n            }\n\n            // !!! TODO: 14-Mar-2016, tatu: as per [datatype-jsr310], should trim\n            //     trailing zeroes\n            /*\n            // AND possibly trim trailing ones\n            int i = nanosLen;\n            while ((i > 1) && nanoSB.charAt(i-1) == '0') {\n                --i;\n            }\n            if (i < nanosLen) {\n                nanoSB.setLength(i);\n            }\n            */\n            sb.append(nanoSB);\n        }\n        return sb.toString();\n    }",
  "abstract_func": "public static String toDecimal(long VAR_0, int VAR_1)\n    {\n        StringBuilder VAR_2 = new StringBuilder(20)\n            .append(VAR_0)\n            .append('.');\n        /* COMMENT_0 */\n        /* COMMENT_1 */\n        if (VAR_1 == 0L) {\n            /* COMMENT_2 */\n            /* COMMENT_3 */\n            if (VAR_0 == 0L) {\n                return \"0.0\";\n            }\n\n/* COMMENT_4 */\n            VAR_2.append(\"000000000\");\n        } else {\n            StringBuilder VAR_3 = new StringBuilder(9);\n            VAR_3.append(VAR_1);\n            /* COMMENT_5 */\n            final int VAR_4 = VAR_3.length();\n            int VAR_5 = 9 - VAR_4;\n            while (VAR_5 > 0) {\n                --VAR_5;\n                VAR_2.append('0');\n            }\n\n            /* COMMENT_2 */\n            /* COMMENT_3 */\n            /* COMMENT_6 */\n                                              \n                             \n                                                          \n                    \n             \n                               \n                                    \n             \n              \n            VAR_2.append(VAR_3);\n        }\n        return VAR_2.toString();\n    }",
  "func_graph_path": "FasterXML/jackson-modules-java8/ba27ce5909dfb49bcaf753ad3e04ecb980010b0b/DecimalUtils.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -4,14 +4,14 @@\n             .append(seconds)\n             .append('.');\n         // 14-Mar-2016, tatu: Although we do not yet (with 2.7) trim trailing zeroes,\n-        //   for general case, \n+        //   for general case,\n         if (nanoseconds == 0L) {\n             // !!! TODO: 14-Mar-2016, tatu: as per [datatype-jsr310], should trim\n             //     trailing zeroes\n             if (seconds == 0L) {\n                 return \"0.0\";\n             }\n-            \n+\n //            sb.append('0');\n             sb.append(\"000000000\");\n         } else {",
  "diff_line_info": {
    "deleted_lines": [
      "        //   for general case, ",
      "            "
    ],
    "added_lines": [
      "        //   for general case,",
      ""
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/FasterXML/jackson-modules-java8/pull/87",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/FasterXML/jackson-modules-java8/pull/87: 403 Client Error: Forbidden for url: https://api.github.com/repos/FasterXML/jackson-modules-java8/pulls/87",
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.8,
  "Bug Filter Response": "**Final Classification:** Defect Remediation & Feature Upgrades  \n**Confidence:** 0.8"
}