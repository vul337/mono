{
  "cve_id": "CVE-2021-42780",
  "cwe_ids": [
    "CWE-252"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "OpenSC",
  "commit_msg": "tcos: Check bounds in insert_pin()\n\nThanks oss-fuzz\n\nhttps://bugs.chromium.org/p/oss-fuzz/issues/detail?id=28383",
  "commit_hash": "5df913b7",
  "git_url": "https://github.com/OpenSC/OpenSC/commit/5df913b7f57ad89b9832555d24c08d23a534311e",
  "file_path": "src/libopensc/pkcs15-tcos.c",
  "func_name": "insert_pin",
  "func_before": "static int insert_pin(\n\tsc_pkcs15_card_t *p15card,\n\tconst char       *path,\n\tunsigned char     id,\n\tunsigned char     auth_id,\n\tunsigned char     pin_reference,\n\tint               min_length,\n\tconst char       *label,\n\tint               pin_flags\n){\n\tsc_card_t *card=p15card->card;\n\tsc_context_t *ctx=p15card->card->ctx;\n\tsc_file_t *f = NULL;\n\tstruct sc_pkcs15_auth_info pin_info;\n\tstruct sc_pkcs15_object pin_obj;\n\tint r;\n\n\tmemset(&pin_info, 0, sizeof(pin_info));\n\tpin_info.auth_id.len      = 1;\n\tpin_info.auth_id.value[0] = id;\n\tpin_info.auth_type = SC_PKCS15_PIN_AUTH_TYPE_PIN;\n\tpin_info.attrs.pin.reference        = pin_reference;\n\tpin_info.attrs.pin.flags            = pin_flags;\n\tpin_info.attrs.pin.type             = SC_PKCS15_PIN_TYPE_ASCII_NUMERIC;\n\tpin_info.attrs.pin.min_length       = min_length;\n\tpin_info.attrs.pin.stored_length    = 16;\n\tpin_info.attrs.pin.max_length       = 16;\n\tpin_info.attrs.pin.pad_char         = '\\0';\n\tpin_info.logged_in = SC_PIN_STATE_UNKNOWN;\n\tsc_format_path(path, &pin_info.path);\n\n\tmemset(&pin_obj, 0, sizeof(pin_obj));\n\tstrlcpy(pin_obj.label, label, sizeof(pin_obj.label));\n\tpin_obj.flags            = SC_PKCS15_CO_FLAG_MODIFIABLE | SC_PKCS15_CO_FLAG_PRIVATE;\n\tpin_obj.auth_id.len      = auth_id ? 0 : 1;\n\tpin_obj.auth_id.value[0] = auth_id;\n\n\tif(card->type == SC_CARD_TYPE_TCOS_V3) {\n\t\tunsigned char buf[256];\n\t\tint i, rec_no=0;\n\t\tif (pin_info.path.len >= 2) {\n\t\t\tpin_info.path.len -= 2;\n\t\t}\n\t\tsc_append_file_id(&pin_info.path, 0x5049);\n\t\tif (sc_select_file(card, &pin_info.path, NULL) != SC_SUCCESS) {\n\t\t\tsc_log(ctx, \n\t\t\t\t\"Select(%s) failed\\n\",\n\t\t\t\tsc_print_path(&pin_info.path));\n\t\t\treturn 1;\n\t\t}\n\t\tsc_log(ctx, \n\t\t\t\"Searching for PIN-Ref %02X\\n\", pin_reference);\n\t\twhile ((r = sc_read_record(card, ++rec_no, buf, sizeof(buf), SC_RECORD_BY_REC_NR)) > 0) {\n\t\t\tint found = 0, fbz = -1;\n\t\t\tif (buf[0] != 0xA0)\n\t\t\t\tcontinue;\n\t\t\tfor (i = 2; i < buf[1] + 2; i += 2 + buf[i + 1]) {\n\t\t\t\tif (buf[i] == 0x83 && buf[i + 1] == 1 && buf[i + 2] == pin_reference) {\n\t\t\t\t\t++found;\n\t\t\t\t}\n\t\t\t\tif (buf[i] == 0x90) {\n\t\t\t\t\tfbz = buf[i + 1 + buf[i + 1]];\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) {\n\t\t\t\tpin_info.tries_left = fbz;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (r <= 0) {\n\t\t\tsc_log(ctx, \"No EF_PWDD-Record found\\n\");\n\t\t\treturn 1;\n\t\t}\n\t} else {\n\t\tif (sc_select_file(card, &pin_info.path, &f) != SC_SUCCESS\n\t\t\t   \t|| !f->prop_attr || f->prop_attr_len < 4){\n\t\t\tsc_log(ctx, \"Select(%s) failed\\n\", path);\n\t\t\tsc_file_free(f);\n\t\t\treturn 1;\n\t\t}\n\t\tpin_info.tries_left = f->prop_attr[3];\n\t\tsc_file_free(f);\n\t}\n\n\tr=sc_pkcs15emu_add_pin_obj(p15card, &pin_obj, &pin_info);\n\tif(r!=SC_SUCCESS){\n\t\tsc_log(ctx,  \"sc_pkcs15emu_add_pin_obj(%s) failed\\n\", path);\n\t\treturn 4;\n\t}\n\tsc_log(ctx,  \"%s: OK, FBZ=%d\\n\", path, pin_info.tries_left);\n\treturn 0;\n}",
  "abstract_func_before": "static int insert_pin(\n\tsc_pkcs15_card_t *VAR_0,\n\tconst char       *VAR_1,\n\tunsigned char     VAR_2,\n\tunsigned char     VAR_3,\n\tunsigned char     VAR_4,\n\tint               VAR_5,\n\tconst char       *VAR_6,\n\tint               VAR_7\n){\n\tsc_card_t *VAR_8=VAR_0->card;\n\tsc_context_t *VAR_9=VAR_0->card->ctx;\n\tsc_file_t *VAR_10 = NULL;\n\tstruct sc_pkcs15_auth_info VAR_11;\n\tstruct sc_pkcs15_object VAR_12;\n\tint VAR_13;\n\n\tmemset(&VAR_11, 0, sizeof(VAR_11));\n\tVAR_11.auth_id.len      = 1;\n\tVAR_11.auth_id.value[0] = VAR_2;\n\tVAR_11.auth_type = VAR_14;\n\tVAR_11.attrs.pin.reference        = VAR_4;\n\tVAR_11.attrs.pin.flags            = VAR_7;\n\tVAR_11.attrs.pin.type             = VAR_15;\n\tVAR_11.attrs.pin.min_length       = VAR_5;\n\tVAR_11.attrs.pin.stored_length    = 16;\n\tVAR_11.attrs.pin.max_length       = 16;\n\tVAR_11.attrs.pin.pad_char         = '\\0';\n\tVAR_11.logged_in = VAR_16;\n\tsc_format_path(VAR_1, &VAR_11.path);\n\n\tmemset(&VAR_12, 0, sizeof(VAR_12));\n\tstrlcpy(VAR_12.label, VAR_6, sizeof(VAR_12.label));\n\tVAR_12.flags            = VAR_17 | VAR_18;\n\tVAR_12.auth_id.len      = VAR_3 ? 0 : 1;\n\tVAR_12.auth_id.value[0] = VAR_3;\n\n\tif(VAR_8->type == VAR_19) {\n\t\tunsigned char VAR_20[256];\n\t\tint VAR_21, VAR_22=0;\n\t\tif (VAR_11.path.len >= 2) {\n\t\t\tVAR_11.path.len -= 2;\n\t\t}\n\t\tsc_append_file_id(&VAR_11.path, 0x5049);\n\t\tif (sc_select_file(VAR_8, &VAR_11.path, NULL) != VAR_23) {\n\t\t\tsc_log(VAR_9, \n\t\t\t\t\"Select(%s) failed\\n\",\n\t\t\t\tsc_print_path(&VAR_11.path));\n\t\t\treturn 1;\n\t\t}\n\t\tsc_log(VAR_9, \n\t\t\t\"Searching for PIN-Ref %02X\\n\", VAR_4);\n\t\twhile ((VAR_13 = sc_read_record(VAR_8, ++VAR_22, VAR_20, sizeof(VAR_20), VAR_24)) > 0) {\n\t\t\tint VAR_25 = 0, VAR_26 = -1;\n\t\t\tif (VAR_20[0] != 0xA0)\n\t\t\t\tcontinue;\n\t\t\tfor (VAR_21 = 2; VAR_21 < VAR_20[1] + 2; VAR_21 += 2 + VAR_20[VAR_21 + 1]) {\n\t\t\t\tif (VAR_20[VAR_21] == 0x83 && VAR_20[VAR_21 + 1] == 1 && VAR_20[VAR_21 + 2] == VAR_4) {\n\t\t\t\t\t++VAR_25;\n\t\t\t\t}\n\t\t\t\tif (VAR_20[VAR_21] == 0x90) {\n\t\t\t\t\tVAR_26 = VAR_20[VAR_21 + 1 + VAR_20[VAR_21 + 1]];\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (VAR_25) {\n\t\t\t\tVAR_11.tries_left = VAR_26;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (VAR_13 <= 0) {\n\t\t\tsc_log(VAR_9, \"No EF_PWDD-Record found\\n\");\n\t\t\treturn 1;\n\t\t}\n\t} else {\n\t\tif (sc_select_file(VAR_8, &VAR_11.path, &VAR_10) != VAR_23\n\t\t\t   \t|| !VAR_10->prop_attr || VAR_10->prop_attr_len < 4){\n\t\t\tsc_log(VAR_9, \"Select(%s) failed\\n\", VAR_1);\n\t\t\tsc_file_free(VAR_10);\n\t\t\treturn 1;\n\t\t}\n\t\tVAR_11.tries_left = VAR_10->prop_attr[3];\n\t\tsc_file_free(VAR_10);\n\t}\n\n\tVAR_13=sc_pkcs15emu_add_pin_obj(VAR_0, &VAR_12, &VAR_11);\n\tif(VAR_13!=VAR_23){\n\t\tsc_log(VAR_9,  \"sc_pkcs15emu_add_pin_obj(%s) failed\\n\", VAR_1);\n\t\treturn 4;\n\t}\n\tsc_log(VAR_9,  \"%s: OK, FBZ=%d\\n\", VAR_1, VAR_11.tries_left);\n\treturn 0;\n}",
  "func_graph_path_before": "OpenSC/5df913b7/pkcs15-tcos.c/vul/before/0.json",
  "func": "static int insert_pin(\n\tsc_pkcs15_card_t *p15card,\n\tconst char       *path,\n\tunsigned char     id,\n\tunsigned char     auth_id,\n\tunsigned char     pin_reference,\n\tint               min_length,\n\tconst char       *label,\n\tint               pin_flags\n){\n\tsc_card_t *card=p15card->card;\n\tsc_context_t *ctx=p15card->card->ctx;\n\tsc_file_t *f = NULL;\n\tstruct sc_pkcs15_auth_info pin_info;\n\tstruct sc_pkcs15_object pin_obj;\n\tint r;\n\n\tmemset(&pin_info, 0, sizeof(pin_info));\n\tpin_info.auth_id.len      = 1;\n\tpin_info.auth_id.value[0] = id;\n\tpin_info.auth_type = SC_PKCS15_PIN_AUTH_TYPE_PIN;\n\tpin_info.attrs.pin.reference        = pin_reference;\n\tpin_info.attrs.pin.flags            = pin_flags;\n\tpin_info.attrs.pin.type             = SC_PKCS15_PIN_TYPE_ASCII_NUMERIC;\n\tpin_info.attrs.pin.min_length       = min_length;\n\tpin_info.attrs.pin.stored_length    = 16;\n\tpin_info.attrs.pin.max_length       = 16;\n\tpin_info.attrs.pin.pad_char         = '\\0';\n\tpin_info.logged_in = SC_PIN_STATE_UNKNOWN;\n\tsc_format_path(path, &pin_info.path);\n\n\tmemset(&pin_obj, 0, sizeof(pin_obj));\n\tstrlcpy(pin_obj.label, label, sizeof(pin_obj.label));\n\tpin_obj.flags            = SC_PKCS15_CO_FLAG_MODIFIABLE | SC_PKCS15_CO_FLAG_PRIVATE;\n\tpin_obj.auth_id.len      = auth_id ? 0 : 1;\n\tpin_obj.auth_id.value[0] = auth_id;\n\n\tif(card->type == SC_CARD_TYPE_TCOS_V3) {\n\t\tunsigned char buf[256];\n\t\tint i, rec_no=0;\n\t\tif (pin_info.path.len >= 2) {\n\t\t\tpin_info.path.len -= 2;\n\t\t}\n\t\tsc_append_file_id(&pin_info.path, 0x5049);\n\t\tif (sc_select_file(card, &pin_info.path, NULL) != SC_SUCCESS) {\n\t\t\tsc_log(ctx, \n\t\t\t\t\"Select(%s) failed\\n\",\n\t\t\t\tsc_print_path(&pin_info.path));\n\t\t\treturn 1;\n\t\t}\n\t\tsc_log(ctx, \n\t\t\t\"Searching for PIN-Ref %02X\\n\", pin_reference);\n\t\twhile ((r = sc_read_record(card, ++rec_no, buf, sizeof(buf), SC_RECORD_BY_REC_NR)) > 0) {\n\t\t\tint found = 0, fbz = -1;\n\t\t\tif (r < 2 || buf[0] != 0xA0)\n\t\t\t\tcontinue;\n\t\t\tfor (i = 2; i < buf[1] + 2 && (i + 2) < r; i += 2 + buf[i + 1]) {\n\t\t\t\tif (buf[i] == 0x83 && buf[i + 1] == 1 && buf[i + 2] == pin_reference) {\n\t\t\t\t\t++found;\n\t\t\t\t}\n\t\t\t\tif (buf[i] == 0x90 && (i + 1 + buf[i + 1]) < r) {\n\t\t\t\t\tfbz = buf[i + 1 + buf[i + 1]];\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) {\n\t\t\t\tpin_info.tries_left = fbz;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (r <= 0) {\n\t\t\tsc_log(ctx, \"No EF_PWDD-Record found\\n\");\n\t\t\treturn 1;\n\t\t}\n\t} else {\n\t\tif (sc_select_file(card, &pin_info.path, &f) != SC_SUCCESS\n\t\t\t   \t|| !f->prop_attr || f->prop_attr_len < 4){\n\t\t\tsc_log(ctx, \"Select(%s) failed\\n\", path);\n\t\t\tsc_file_free(f);\n\t\t\treturn 1;\n\t\t}\n\t\tpin_info.tries_left = f->prop_attr[3];\n\t\tsc_file_free(f);\n\t}\n\n\tr=sc_pkcs15emu_add_pin_obj(p15card, &pin_obj, &pin_info);\n\tif(r!=SC_SUCCESS){\n\t\tsc_log(ctx,  \"sc_pkcs15emu_add_pin_obj(%s) failed\\n\", path);\n\t\treturn 4;\n\t}\n\tsc_log(ctx,  \"%s: OK, FBZ=%d\\n\", path, pin_info.tries_left);\n\treturn 0;\n}",
  "abstract_func": "static int insert_pin(\n\tsc_pkcs15_card_t *VAR_0,\n\tconst char       *VAR_1,\n\tunsigned char     VAR_2,\n\tunsigned char     VAR_3,\n\tunsigned char     VAR_4,\n\tint               VAR_5,\n\tconst char       *VAR_6,\n\tint               VAR_7\n){\n\tsc_card_t *VAR_8=VAR_0->card;\n\tsc_context_t *VAR_9=VAR_0->card->ctx;\n\tsc_file_t *VAR_10 = NULL;\n\tstruct sc_pkcs15_auth_info VAR_11;\n\tstruct sc_pkcs15_object VAR_12;\n\tint VAR_13;\n\n\tmemset(&VAR_11, 0, sizeof(VAR_11));\n\tVAR_11.auth_id.len      = 1;\n\tVAR_11.auth_id.value[0] = VAR_2;\n\tVAR_11.auth_type = VAR_14;\n\tVAR_11.attrs.pin.reference        = VAR_4;\n\tVAR_11.attrs.pin.flags            = VAR_7;\n\tVAR_11.attrs.pin.type             = VAR_15;\n\tVAR_11.attrs.pin.min_length       = VAR_5;\n\tVAR_11.attrs.pin.stored_length    = 16;\n\tVAR_11.attrs.pin.max_length       = 16;\n\tVAR_11.attrs.pin.pad_char         = '\\0';\n\tVAR_11.logged_in = VAR_16;\n\tsc_format_path(VAR_1, &VAR_11.path);\n\n\tmemset(&VAR_12, 0, sizeof(VAR_12));\n\tstrlcpy(VAR_12.label, VAR_6, sizeof(VAR_12.label));\n\tVAR_12.flags            = VAR_17 | VAR_18;\n\tVAR_12.auth_id.len      = VAR_3 ? 0 : 1;\n\tVAR_12.auth_id.value[0] = VAR_3;\n\n\tif(VAR_8->type == VAR_19) {\n\t\tunsigned char VAR_20[256];\n\t\tint VAR_21, VAR_22=0;\n\t\tif (VAR_11.path.len >= 2) {\n\t\t\tVAR_11.path.len -= 2;\n\t\t}\n\t\tsc_append_file_id(&VAR_11.path, 0x5049);\n\t\tif (sc_select_file(VAR_8, &VAR_11.path, NULL) != VAR_23) {\n\t\t\tsc_log(VAR_9, \n\t\t\t\t\"Select(%s) failed\\n\",\n\t\t\t\tsc_print_path(&VAR_11.path));\n\t\t\treturn 1;\n\t\t}\n\t\tsc_log(VAR_9, \n\t\t\t\"Searching for PIN-Ref %02X\\n\", VAR_4);\n\t\twhile ((VAR_13 = sc_read_record(VAR_8, ++VAR_22, VAR_20, sizeof(VAR_20), VAR_24)) > 0) {\n\t\t\tint VAR_25 = 0, VAR_26 = -1;\n\t\t\tif (VAR_13 < 2 || VAR_20[0] != 0xA0)\n\t\t\t\tcontinue;\n\t\t\tfor (VAR_21 = 2; VAR_21 < VAR_20[1] + 2 && (VAR_21 + 2) < VAR_13; VAR_21 += 2 + VAR_20[VAR_21 + 1]) {\n\t\t\t\tif (VAR_20[VAR_21] == 0x83 && VAR_20[VAR_21 + 1] == 1 && VAR_20[VAR_21 + 2] == VAR_4) {\n\t\t\t\t\t++VAR_25;\n\t\t\t\t}\n\t\t\t\tif (VAR_20[VAR_21] == 0x90 && (VAR_21 + 1 + VAR_20[VAR_21 + 1]) < VAR_13) {\n\t\t\t\t\tVAR_26 = VAR_20[VAR_21 + 1 + VAR_20[VAR_21 + 1]];\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (VAR_25) {\n\t\t\t\tVAR_11.tries_left = VAR_26;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (VAR_13 <= 0) {\n\t\t\tsc_log(VAR_9, \"No EF_PWDD-Record found\\n\");\n\t\t\treturn 1;\n\t\t}\n\t} else {\n\t\tif (sc_select_file(VAR_8, &VAR_11.path, &VAR_10) != VAR_23\n\t\t\t   \t|| !VAR_10->prop_attr || VAR_10->prop_attr_len < 4){\n\t\t\tsc_log(VAR_9, \"Select(%s) failed\\n\", VAR_1);\n\t\t\tsc_file_free(VAR_10);\n\t\t\treturn 1;\n\t\t}\n\t\tVAR_11.tries_left = VAR_10->prop_attr[3];\n\t\tsc_file_free(VAR_10);\n\t}\n\n\tVAR_13=sc_pkcs15emu_add_pin_obj(VAR_0, &VAR_12, &VAR_11);\n\tif(VAR_13!=VAR_23){\n\t\tsc_log(VAR_9,  \"sc_pkcs15emu_add_pin_obj(%s) failed\\n\", VAR_1);\n\t\treturn 4;\n\t}\n\tsc_log(VAR_9,  \"%s: OK, FBZ=%d\\n\", VAR_1, VAR_11.tries_left);\n\treturn 0;\n}",
  "func_graph_path": "OpenSC/5df913b7/pkcs15-tcos.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -52,13 +52,13 @@\n \t\t\t\"Searching for PIN-Ref %02X\\n\", pin_reference);\n \t\twhile ((r = sc_read_record(card, ++rec_no, buf, sizeof(buf), SC_RECORD_BY_REC_NR)) > 0) {\n \t\t\tint found = 0, fbz = -1;\n-\t\t\tif (buf[0] != 0xA0)\n+\t\t\tif (r < 2 || buf[0] != 0xA0)\n \t\t\t\tcontinue;\n-\t\t\tfor (i = 2; i < buf[1] + 2; i += 2 + buf[i + 1]) {\n+\t\t\tfor (i = 2; i < buf[1] + 2 && (i + 2) < r; i += 2 + buf[i + 1]) {\n \t\t\t\tif (buf[i] == 0x83 && buf[i + 1] == 1 && buf[i + 2] == pin_reference) {\n \t\t\t\t\t++found;\n \t\t\t\t}\n-\t\t\t\tif (buf[i] == 0x90) {\n+\t\t\t\tif (buf[i] == 0x90 && (i + 1 + buf[i + 1]) < r) {\n \t\t\t\t\tfbz = buf[i + 1 + buf[i + 1]];\n \t\t\t\t}\n \t\t\t}",
  "diff_line_info": {
    "deleted_lines": [
      "\t\t\tif (buf[0] != 0xA0)",
      "\t\t\tfor (i = 2; i < buf[1] + 2; i += 2 + buf[i + 1]) {",
      "\t\t\t\tif (buf[i] == 0x90) {"
    ],
    "added_lines": [
      "\t\t\tif (r < 2 || buf[0] != 0xA0)",
      "\t\t\tfor (i = 2; i < buf[1] + 2 && (i + 2) < r; i += 2 + buf[i + 1]) {",
      "\t\t\t\tif (buf[i] == 0x90 && (i + 1 + buf[i + 1]) < r) {"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/OpenSC/OpenSC/pull/2180",
  "description": {
    "pr_info": {
      "title": "Current fuzzing issues",
      "number": 2180
    },
    "comment": [
      "\r\n##### Checklist\r\n<!-- Remove items that do not apply. For completed items, change [ ] to [x]. -->\r\n- [ ] PKCS#11 module is tested\r\n- [ ] Windows minidriver is tested\r\n- [ ] macOS tokend is tested\r\n"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 0.9\n\n**Step-by-Step Explanation:**\n\n1. **Input Analysis:**\n   - The commit message mentions \"Check bounds in insert_pin()\" and references oss-fuzz, which is associated with security-related bug finding.\n   - The code changes in `insert_pin()` introduce bounds checks to prevent potential buffer overflows, indicating a security concern.\n\n2. **Consistency Check:**\n   - The commit message aligns with the code changes, which are adding boundary checks to mitigate buffer overflow risks, consistent with a security fix.\n\n3. **Purpose Evaluation:**\n   - The changes directly address buffer handling, which is crucial for preventing security vulnerabilities like buffer overflow attacks.\n\n4. **Security Vulnerability Assessment:**\n   - The patch fixes a bug that could allow unauthorized access due to buffer overflow, a known security risk, and is linked to oss-fuzz, suggesting it's a security fix.\n\n5. **Confidence Scoring:**\n   - The code modifications are clear and directly address a security concern, leading to a high confidence score.\n\n**Conclusion:**\nThe patch is a Security Vulnerability Fix with a confidence score of 0.9, as it clearly addresses a potential buffer overflow vulnerability and is related to security testing via oss-fuzz."
}