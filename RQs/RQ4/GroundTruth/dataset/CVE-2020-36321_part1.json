{
  "cve_id": "CVE-2020-36321",
  "cwe_ids": [
    "CWE-22"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:N/A:N",
  "cvss_is_v3": false,
  "repo_name": "vaadin/flow",
  "commit_msg": "Update the path pattern to block slash-dot-dot either",
  "commit_hash": "e0dcaf86b63dbcab3adbbe107d1c49d490ead8eb",
  "git_url": "https://github.com/vaadin/flow/commit/e0dcaf86b63dbcab3adbbe107d1c49d490ead8eb",
  "file_path": "flow-server/src/main/java/com/vaadin/flow/server/HandlerHelper.java",
  "func_name": "isPathUnsafe",
  "func_before": "public static boolean isPathUnsafe(String path) {\n        // Check that the path does not have '/../', '\\..\\', %5C..%5C, or\n        // %2F..%2F\n        try {\n            path = URLDecoder.decode(path, StandardCharsets.UTF_8.name());\n        } catch (UnsupportedEncodingException e) {\n            throw new RuntimeException(\"An error occurred during decoding URL.\",\n                    e);\n        }\n        return PARENT_DIRECTORY_REGEX.matcher(path).find();\n    }",
  "abstract_func_before": "public static boolean isPathUnsafe(String VAR_0) {\n        /* COMMENT_0 */\n        /* COMMENT_1 */\n        try {\n            VAR_0 = VAR_1.decode(VAR_0, VAR_2.UTF_8.name());\n        } catch (UnsupportedEncodingException VAR_3) {\n            throw new RuntimeException(\"An error occurred during decoding URL.\",\n                    VAR_3);\n        }\n        return VAR_4.matcher(VAR_0).find();\n    }",
  "func_graph_path_before": "vaadin/flow/e0dcaf86b63dbcab3adbbe107d1c49d490ead8eb/HandlerHelper.java/vul/before/0.json",
  "func": "public static boolean isPathUnsafe(String path) {\n        // Check that the path does not have '/../', '\\..\\', %5C..%5C,\n        // %2F..%2F, nor '/..', '\\..', %5C.., %2F..\n        try {\n            path = URLDecoder.decode(path, StandardCharsets.UTF_8.name());\n        } catch (UnsupportedEncodingException e) {\n            throw new RuntimeException(\"An error occurred during decoding URL.\",\n                    e);\n        }\n        return PARENT_DIRECTORY_REGEX.matcher(path).find();\n    }",
  "abstract_func": "public static boolean isPathUnsafe(String VAR_0) {\n        /* COMMENT_0 */\n        /* COMMENT_1 */\n        try {\n            VAR_0 = VAR_1.decode(VAR_0, VAR_2.UTF_8.name());\n        } catch (UnsupportedEncodingException VAR_3) {\n            throw new RuntimeException(\"An error occurred during decoding URL.\",\n                    VAR_3);\n        }\n        return VAR_4.matcher(VAR_0).find();\n    }",
  "func_graph_path": "vaadin/flow/e0dcaf86b63dbcab3adbbe107d1c49d490ead8eb/HandlerHelper.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,6 +1,6 @@\n public static boolean isPathUnsafe(String path) {\n-        // Check that the path does not have '/../', '\\..\\', %5C..%5C, or\n-        // %2F..%2F\n+        // Check that the path does not have '/../', '\\..\\', %5C..%5C,\n+        // %2F..%2F, nor '/..', '\\..', %5C.., %2F..\n         try {\n             path = URLDecoder.decode(path, StandardCharsets.UTF_8.name());\n         } catch (UnsupportedEncodingException e) {",
  "diff_line_info": {
    "deleted_lines": [
      "        // Check that the path does not have '/../', '\\..\\', %5C..%5C, or",
      "        // %2F..%2F"
    ],
    "added_lines": [
      "        // Check that the path does not have '/../', '\\..\\', %5C..%5C,",
      "        // %2F..%2F, nor '/..', '\\..', %5C.., %2F.."
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/vaadin/flow/pull/9392",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/vaadin/flow/pull/9392: 403 Client Error: Forbidden for url: https://api.github.com/repos/vaadin/flow/pulls/9392",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 1.0"
}