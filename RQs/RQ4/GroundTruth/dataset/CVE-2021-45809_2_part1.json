{
  "cve_id": "CVE-2021-45809",
  "cwe_ids": [
    "CWE-Other"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:C/I:C/A:C",
  "cvss_is_v3": false,
  "repo_name": "yuezk/GlobalProtect-openconnect",
  "commit_msg": "add configuration file for gpservice",
  "commit_hash": "767286b898f2d1d361c3834de1d4d0b5836ffecd",
  "git_url": "https://github.com/yuezk/GlobalProtect-openconnect/commit/767286b898f2d1d361c3834de1d4d0b5836ffecd",
  "file_path": "GPService/gpservice.cpp",
  "func_name": "GPService::connect",
  "func_before": "void GPService::connect(QString server, QString username, QString passwd, QString extraArgs)\n{\n    if (vpnStatus != GPService::VpnNotConnected) {\n        log(\"VPN status is: \" + QVariant::fromValue(vpnStatus).toString());\n        return;\n    }\n\n    QString bin = findBinary();\n    if (bin == nullptr) {\n        log(\"Could not find openconnect binary, make sure openconnect is installed, exiting.\");\n        emit error(\"The OpenConect CLI was not found, make sure it has been installed!\");\n        return;\n    }\n\n    if (!isValidVersion(bin)) {\n        return;\n    }\n\n    QStringList args;\n    args << QCoreApplication::arguments().mid(1)\n         << \"--protocol=gp\"\n         << splitCommand(extraArgs)\n         << \"-u\" << username\n         << \"--cookie-on-stdin\"\n         << server;\n\n    log(\"Start process with arugments: \" + args.join(\" \"));\n\n    openconnect->start(bin, args);\n    openconnect->write((passwd + \"\\n\").toUtf8());\n}",
  "abstract_func_before": "void GPService::connect(QString VAR_0, QString VAR_1, QString VAR_2, QString VAR_3)\n{\n    if (VAR_4 != GPService::VpnNotConnected) {\n        log(\"VPN status is: \" + QVariant::fromValue(VAR_4).toString());\n        return;\n    }\n\n    QString VAR_5 = findBinary();\n    if (VAR_5 == nullptr) {\n        log(\"Could not find openconnect binary, make sure openconnect is installed, exiting.\");\n        emit VAR_6(\"The OpenConect CLI was not found, make sure it has been installed!\");\n        return;\n    }\n\n    if (!isValidVersion(VAR_5)) {\n        return;\n    }\n\n    QStringList VAR_7;\n    VAR_7 << QCoreApplication::arguments().mid(1)\n         << \"--protocol=gp\"\n         << splitCommand(VAR_3)\n         << \"-u\" << VAR_1\n         << \"--cookie-on-stdin\"\n         << VAR_0;\n\n    log(\"Start process with arugments: \" + VAR_7.join(\" \"));\n\n    VAR_8->start(VAR_5, VAR_7);\n    VAR_8->write((VAR_2 + \"\\n\").toUtf8());\n}",
  "func_graph_path_before": "yuezk/GlobalProtect-openconnect/767286b898f2d1d361c3834de1d4d0b5836ffecd/gpservice.cpp/vul/before/1.json",
  "func": "void GPService::connect(QString server, QString username, QString passwd)\n{\n    if (vpnStatus != GPService::VpnNotConnected) {\n        log(\"VPN status is: \" + QVariant::fromValue(vpnStatus).toString());\n        return;\n    }\n\n    QString bin = findBinary();\n    if (bin == nullptr) {\n        log(\"Could not find openconnect binary, make sure openconnect is installed, exiting.\");\n        emit error(\"The OpenConect CLI was not found, make sure it has been installed!\");\n        return;\n    }\n\n    if (!isValidVersion(bin)) {\n        return;\n    }\n\n    const QString extraArgs = extraOpenconnectArgs(server);\n    log(QString(\"Got extra OpenConnect args for server: %1, %2\").arg(server, extraArgs.isEmpty() ? \"<empty>\" : extraArgs));\n\n    QStringList args;\n    args << QCoreApplication::arguments().mid(1)\n         << \"--protocol=gp\"\n         << splitCommand(extraArgs)\n         << \"-u\" << username\n         << \"--cookie-on-stdin\"\n         << server;\n\n    log(\"Start process with arugments: \" + args.join(\" \"));\n\n    openconnect->start(bin, args);\n    openconnect->write((passwd + \"\\n\").toUtf8());\n}",
  "abstract_func": "void GPService::connect(QString VAR_0, QString VAR_1, QString VAR_2)\n{\n    if (VAR_3 != GPService::VpnNotConnected) {\n        log(\"VPN status is: \" + QVariant::fromValue(VAR_3).toString());\n        return;\n    }\n\n    QString VAR_4 = findBinary();\n    if (VAR_4 == nullptr) {\n        log(\"Could not find openconnect binary, make sure openconnect is installed, exiting.\");\n        emit VAR_5(\"The OpenConect CLI was not found, make sure it has been installed!\");\n        return;\n    }\n\n    if (!isValidVersion(VAR_4)) {\n        return;\n    }\n\n    const QString VAR_6 = extraOpenconnectArgs(VAR_0);\n    log(QString(\"Got extra OpenConnect args for server: %1, %2\").arg(VAR_0, VAR_6.isEmpty() ? \"<empty>\" : VAR_6));\n\n    QStringList VAR_7;\n    VAR_7 << QCoreApplication::arguments().mid(1)\n         << \"--protocol=gp\"\n         << splitCommand(VAR_6)\n         << \"-u\" << VAR_1\n         << \"--cookie-on-stdin\"\n         << VAR_0;\n\n    log(\"Start process with arugments: \" + VAR_7.join(\" \"));\n\n    VAR_8->start(VAR_4, VAR_7);\n    VAR_8->write((VAR_2 + \"\\n\").toUtf8());\n}",
  "func_graph_path": "yuezk/GlobalProtect-openconnect/767286b898f2d1d361c3834de1d4d0b5836ffecd/gpservice.cpp/vul/after/1.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,4 +1,4 @@\n-void GPService::connect(QString server, QString username, QString passwd, QString extraArgs)\n+void GPService::connect(QString server, QString username, QString passwd)\n {\n     if (vpnStatus != GPService::VpnNotConnected) {\n         log(\"VPN status is: \" + QVariant::fromValue(vpnStatus).toString());\n@@ -16,6 +16,9 @@\n         return;\n     }\n \n+    const QString extraArgs = extraOpenconnectArgs(server);\n+    log(QString(\"Got extra OpenConnect args for server: %1, %2\").arg(server, extraArgs.isEmpty() ? \"<empty>\" : extraArgs));\n+\n     QStringList args;\n     args << QCoreApplication::arguments().mid(1)\n          << \"--protocol=gp\"",
  "diff_line_info": {
    "deleted_lines": [
      "void GPService::connect(QString server, QString username, QString passwd, QString extraArgs)"
    ],
    "added_lines": [
      "void GPService::connect(QString server, QString username, QString passwd)",
      "    const QString extraArgs = extraOpenconnectArgs(server);",
      "    log(QString(\"Got extra OpenConnect args for server: %1, %2\").arg(server, extraArgs.isEmpty() ? \"<empty>\" : extraArgs));",
      ""
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/yuezk/GlobalProtect-openconnect/pull/149",
  "description": {
    "pr_info": {
      "title": "Prepare release 1.4.3",
      "number": 149
    },
    "comment": [
      "1. Fixed security problem #113.\r\n1. Introduce a more elegant configuration. See https://github.com/yuezk/GlobalProtect-openconnect/wiki/Configuration\r\n1. Restart the `gpservice` after the package upgrade for Archlinux and Fedora.\r\n"
    ]
  },
  "Bug Filter": "Supporting & Non-Core Improvements",
  "Bug Filter Confidence": 0.6,
  "Bug Filter Response": "**Final Classification:** Supporting & Non-Core Improvements\n**Confidence:** 0.6\n\nThe commit message and code changes focus on adding a configuration file and modifying argument handling, indicating a non-security configuration update. While the vulnerability description mentions a security fix, the code changes don't directly address security issues. The primary intent is to enhance configuration management, leading to a classification of supporting improvements with moderate confidence due to some ambiguity."
}