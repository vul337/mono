{
  "cve_id": "CVE-2023-34620",
  "cwe_ids": [
    "CWE-787"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
  "cvss_is_v3": true,
  "repo_name": "hjson/hjson-java",
  "commit_msg": "general fix",
  "commit_hash": "00e3b1325cb6c2b80b347dbec9181fd17ce0a599",
  "git_url": "https://github.com/hjson/hjson-java/commit/00e3b1325cb6c2b80b347dbec9181fd17ce0a599",
  "file_path": "src/main/org/hjson/HjsonParser.java",
  "func_name": "readValue",
  "func_before": "private JsonValue readValue(int depth) throws IOException, ParseException {\n    if(current==123) {\n      ++depth;\n    }\n       /* The following has been refrenced for the resolution of the vulnerability:\n    https://github.com/FasterXML/jackson-databind/commit/fcfc4998ec23f0b1f7f8a9521c2b317b6c25892b\n    */\n    if(depth>MAX_DEPTH) {\n      throw error(\"The passed json has exhausted the depth supported of \"+MAX_DEPTH+\".\");\n    }\n    switch(current) {\n      case '\\'':\n      case '\"': return readString();\n      case '[': return readArray(depth);\n      case '{': return readObject(false, depth);\n      default: return readTfnns();\n    }\n\n  }",
  "abstract_func_before": "private JsonValue readValue(int VAR_0) throws IOException, ParseException {\n    if(VAR_1==123) {\n      ++VAR_0;\n    }\n       /* COMMENT_0 */\n                                                                                                 \n      \n    if(VAR_0>VAR_2) {\n      throw error(\"The passed json has exhausted the depth supported of \"+VAR_2+\".\");\n    }\n    switch(VAR_1) {\n      case '\\'':\n      case '\"': return readString();\n      case '[': return readArray(VAR_0);\n      case '{': return readObject(false, VAR_0);\n      default: return readTfnns();\n    }\n\n  }",
  "func_graph_path_before": "hjson/hjson-java/00e3b1325cb6c2b80b347dbec9181fd17ce0a599/HjsonParser.java/vul/before/0.json",
  "func": "private JsonValue readValue(int depth) throws IOException, ParseException {\n       /* The following has been refrenced for the resolution of the vulnerability:\n    https://github.com/FasterXML/jackson-databind/commit/fcfc4998ec23f0b1f7f8a9521c2b317b6c25892b\n    */\n    if(depth>MAX_DEPTH) {\n      throw error(\"The passed json has exhausted the depth supported of \"+MAX_DEPTH+\".\");\n    }\n    switch(current) {\n      case '\\'':\n      case '\"': return readString();\n      case '[': return readArray(depth + 1);\n      case '{': return readObject(false, depth + 1);\n      default: return readTfnns();\n    }\n\n  }",
  "abstract_func": "private JsonValue readValue(int VAR_0) throws IOException, ParseException {\n       /* COMMENT_0 */\n                                                                                                 \n      \n    if(VAR_0>VAR_1) {\n      throw error(\"The passed json has exhausted the depth supported of \"+VAR_1+\".\");\n    }\n    switch(VAR_2) {\n      case '\\'':\n      case '\"': return readString();\n      case '[': return readArray(VAR_0 + 1);\n      case '{': return readObject(false, VAR_0 + 1);\n      default: return readTfnns();\n    }\n\n  }",
  "func_graph_path": "hjson/hjson-java/00e3b1325cb6c2b80b347dbec9181fd17ce0a599/HjsonParser.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,7 +1,4 @@\n private JsonValue readValue(int depth) throws IOException, ParseException {\n-    if(current==123) {\n-      ++depth;\n-    }\n        /* The following has been refrenced for the resolution of the vulnerability:\n     https://github.com/FasterXML/jackson-databind/commit/fcfc4998ec23f0b1f7f8a9521c2b317b6c25892b\n     */\n@@ -11,8 +8,8 @@\n     switch(current) {\n       case '\\'':\n       case '\"': return readString();\n-      case '[': return readArray(depth);\n-      case '{': return readObject(false, depth);\n+      case '[': return readArray(depth + 1);\n+      case '{': return readObject(false, depth + 1);\n       default: return readTfnns();\n     }\n ",
  "diff_line_info": {
    "deleted_lines": [
      "    if(current==123) {",
      "      ++depth;",
      "    }",
      "      case '[': return readArray(depth);",
      "      case '{': return readObject(false, depth);"
    ],
    "added_lines": [
      "      case '[': return readArray(depth + 1);",
      "      case '{': return readObject(false, depth + 1);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/hjson/hjson-java/pull/26",
  "description": {
    "pr_info": {
      "title": "Fixing vulnerability CVE-2023-34620 in hjson library by adding the implementation of maximum depth while parsing input JSON.",
      "number": 26
    },
    "comment": [
      "Fixing vulnerability CVE-2023-34620 in hjson library by adding the implementation of maximum depth while parsing input JSON.",
      "Thanks for you contribution! This only fixed the problem for objects, not for arrays, so I added a commit with a general fix.",
      "Fixes #23\r\nFixes #24"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 1.0\n\nThe changes implement a maximum depth to prevent stack overflow attacks, which directly addresses a known security vulnerability (CVE-2023-34620). The code modifications are clear and consistent with the described fix, confirming it's a security patch."
}