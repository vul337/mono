{
  "cve_id": "CVE-2016-10156",
  "cwe_ids": [
    "CWE-264"
  ],
  "cvss_vector": "AV:L/AC:L/Au:N/C:C/I:C/A:C",
  "cvss_is_v3": false,
  "repo_name": "systemd",
  "commit_msg": "util-lib: use MODE_INVALID as invalid value for mode_t everywhere",
  "commit_hash": "ee735086f8670be1591fa9593e80dd60163a7a2f",
  "git_url": "https://github.com/systemd/systemd/commit/ee735086f8670be1591fa9593e80dd60163a7a2f",
  "file_path": "src/core/timer.c",
  "func_name": "timer_enter_running",
  "func_before": "static void timer_enter_running(Timer *t) {\n        _cleanup_bus_error_free_ sd_bus_error error = SD_BUS_ERROR_NULL;\n        int r;\n\n        assert(t);\n\n        /* Don't start job if we are supposed to go down */\n        if (unit_stop_pending(UNIT(t)))\n                return;\n\n        r = manager_add_job(UNIT(t)->manager, JOB_START, UNIT_TRIGGER(UNIT(t)),\n                            JOB_REPLACE, true, &error, NULL);\n        if (r < 0)\n                goto fail;\n\n        dual_timestamp_get(&t->last_trigger);\n\n        if (t->stamp_path)\n                touch_file(t->stamp_path, true, t->last_trigger.realtime, UID_INVALID, GID_INVALID, 0);\n\n        timer_set_state(t, TIMER_RUNNING);\n        return;\n\nfail:\n        log_unit_warning(UNIT(t), \"Failed to queue unit startup job: %s\", bus_error_message(&error, r));\n        timer_enter_dead(t, TIMER_FAILURE_RESOURCES);\n}",
  "abstract_func_before": "static void timer_enter_running(Timer *VAR_0) {\n        _cleanup_bus_error_free_ VAR_1 VAR_2 = VAR_3;\n        int VAR_4;\n\n        assert(VAR_0);\n\n        /* COMMENT_0 */\n        if (unit_stop_pending(UNIT(VAR_0)))\n                return;\n\n        VAR_4 = manager_add_job(UNIT(VAR_0)->manager, VAR_5, UNIT_TRIGGER(UNIT(VAR_0)),\n                            VAR_6, true, &VAR_2, NULL);\n        if (VAR_4 < 0)\n                goto fail;\n\n        dual_timestamp_get(&VAR_0->last_trigger);\n\n        if (VAR_0->stamp_path)\n                touch_file(VAR_0->stamp_path, true, VAR_0->last_trigger.realtime, VAR_7, VAR_8, 0);\n\n        timer_set_state(VAR_0, VAR_9);\n        return;\n\nfail:\n        log_unit_warning(UNIT(VAR_0), \"Failed to queue unit startup job: %s\", bus_error_message(&VAR_2, VAR_4));\n        timer_enter_dead(VAR_0, VAR_10);\n}",
  "func_graph_path_before": "systemd/ee735086f8670be1591fa9593e80dd60163a7a2f/timer.c/vul/before/0.json",
  "func": "static void timer_enter_running(Timer *t) {\n        _cleanup_bus_error_free_ sd_bus_error error = SD_BUS_ERROR_NULL;\n        int r;\n\n        assert(t);\n\n        /* Don't start job if we are supposed to go down */\n        if (unit_stop_pending(UNIT(t)))\n                return;\n\n        r = manager_add_job(UNIT(t)->manager, JOB_START, UNIT_TRIGGER(UNIT(t)),\n                            JOB_REPLACE, true, &error, NULL);\n        if (r < 0)\n                goto fail;\n\n        dual_timestamp_get(&t->last_trigger);\n\n        if (t->stamp_path)\n                touch_file(t->stamp_path, true, t->last_trigger.realtime, UID_INVALID, GID_INVALID, MODE_INVALID);\n\n        timer_set_state(t, TIMER_RUNNING);\n        return;\n\nfail:\n        log_unit_warning(UNIT(t), \"Failed to queue unit startup job: %s\", bus_error_message(&error, r));\n        timer_enter_dead(t, TIMER_FAILURE_RESOURCES);\n}",
  "abstract_func": "static void timer_enter_running(Timer *VAR_0) {\n        _cleanup_bus_error_free_ VAR_1 VAR_2 = VAR_3;\n        int VAR_4;\n\n        assert(VAR_0);\n\n        /* COMMENT_0 */\n        if (unit_stop_pending(UNIT(VAR_0)))\n                return;\n\n        VAR_4 = manager_add_job(UNIT(VAR_0)->manager, VAR_5, UNIT_TRIGGER(UNIT(VAR_0)),\n                            VAR_6, true, &VAR_2, NULL);\n        if (VAR_4 < 0)\n                goto fail;\n\n        dual_timestamp_get(&VAR_0->last_trigger);\n\n        if (VAR_0->stamp_path)\n                touch_file(VAR_0->stamp_path, true, VAR_0->last_trigger.realtime, VAR_7, VAR_8, VAR_9);\n\n        timer_set_state(VAR_0, VAR_10);\n        return;\n\nfail:\n        log_unit_warning(UNIT(VAR_0), \"Failed to queue unit startup job: %s\", bus_error_message(&VAR_2, VAR_4));\n        timer_enter_dead(VAR_0, VAR_11);\n}",
  "func_graph_path": "systemd/ee735086f8670be1591fa9593e80dd60163a7a2f/timer.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -16,7 +16,7 @@\n         dual_timestamp_get(&t->last_trigger);\n \n         if (t->stamp_path)\n-                touch_file(t->stamp_path, true, t->last_trigger.realtime, UID_INVALID, GID_INVALID, 0);\n+                touch_file(t->stamp_path, true, t->last_trigger.realtime, UID_INVALID, GID_INVALID, MODE_INVALID);\n \n         timer_set_state(t, TIMER_RUNNING);\n         return;",
  "diff_line_info": {
    "deleted_lines": [
      "                touch_file(t->stamp_path, true, t->last_trigger.realtime, UID_INVALID, GID_INVALID, 0);"
    ],
    "added_lines": [
      "                touch_file(t->stamp_path, true, t->last_trigger.realtime, UID_INVALID, GID_INVALID, MODE_INVALID);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/systemd/systemd/pull/1854",
  "description": {
    "pr_info": {
      "title": "Dependency engine improvements",
      "number": 1854
    },
    "comment": [
      "A variety of fixes. \n\nMost important is a fix for 3d793d2 which broke the boot for pretty much all cases. @filbranden please have a look at this one, as it extends extract_first_word().\n\n@philips for you I sat down and documented all automatic unit dependencies. Please have a look. It's one of the issues you had in your systemd.conf talk.\n",
      "EXTRACT_RETAIN_ESCAPE looks good to me.\n\nI was working on the support for backticks and I came up with something similar for variables and specifiers: https://github.com/filbranden/systemd/commit/6fda28ec6d47d928588c9f24d6028cd746895a68\n\nI like your \"retain\" name so I might use something similar over there too...\n"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 0.9  \n**Confidence Explanation:** The commit changes file permissions from 0 (unknown mode) to MODE_INVALID, which likely prevents incorrect permissions. This is a security fix as it mitigates permission issues."
}