{
  "cve_id": "CVE-2022-26128",
  "cwe_ids": [
    "CWE-119",
    "CWE-1284"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "FRRouting/frr",
  "commit_msg": "babeld: fix #10502 #10503 by repairing the checks on length\n\nThis patch repairs the checking conditions on length in four functions:\nbabel_packet_examin, parse_hello_subtlv, parse_ihu_subtlv, and parse_update_subtlv\n\nSigned-off-by: qingkaishi <qingkaishi@gmail.com>",
  "commit_hash": "c3793352a8d76d2eee1edc38a9a16c1c8a6573f4",
  "git_url": "https://github.com/FRRouting/frr/commit/c3793352a8d76d2eee1edc38a9a16c1c8a6573f4",
  "file_path": "babeld/message.c",
  "func_name": "parse_ihu_subtlv",
  "func_before": "static int\nparse_ihu_subtlv(const unsigned char *a, int alen,\n                 unsigned int *hello_send_us,\n                 unsigned int *hello_rtt_receive_time)\n{\n    int type, len, i = 0, ret = 0;\n\n    while(i < alen) {\n        type = a[0];\n        if(type == SUBTLV_PAD1) {\n            i++;\n            continue;\n        }\n\n        if(i + 1 > alen) {\n            flog_err(EC_BABEL_PACKET,\n\t\t      \"Received truncated sub-TLV on IHU message.\");\n            return -1;\n        }\n        len = a[i + 1];\n        if(i + len > alen) {\n            flog_err(EC_BABEL_PACKET,\n\t\t      \"Received truncated sub-TLV on IHU message.\");\n            return -1;\n        }\n\n        if(type == SUBTLV_PADN) {\n            /* Nothing to do. */\n        } else if(type == SUBTLV_TIMESTAMP) {\n            if(len >= 8) {\n                DO_NTOHL(*hello_send_us, a + i + 2);\n                DO_NTOHL(*hello_rtt_receive_time, a + i + 6);\n                ret = 1;\n            }\n            else {\n                flog_err(EC_BABEL_PACKET,\n\t\t\t  \"Received incorrect RTT sub-TLV on IHU message.\");\n            }\n        } else {\n            debugf(BABEL_DEBUG_COMMON,\n                   \"Received unknown IHU sub-TLV type %d.\", type);\n        }\n\n        i += len + 2;\n    }\n    return ret;\n}",
  "abstract_func_before": "static int\nparse_ihu_subtlv(const unsigned char *VAR_0, int VAR_1,\n                 unsigned int *VAR_2,\n                 unsigned int *VAR_3)\n{\n    int VAR_4, VAR_5, VAR_6 = 0, VAR_7 = 0;\n\n    while(VAR_6 < VAR_1) {\n        VAR_4 = VAR_0[0];\n        if(VAR_4 == VAR_8) {\n            VAR_6++;\n            continue;\n        }\n\n        if(VAR_6 + 1 > VAR_1) {\n            flog_err(VAR_9,\n\t\t      \"Received truncated sub-TLV on IHU message.\");\n            return -1;\n        }\n        VAR_5 = VAR_0[VAR_6 + 1];\n        if(VAR_6 + VAR_5 > VAR_1) {\n            flog_err(VAR_9,\n\t\t      \"Received truncated sub-TLV on IHU message.\");\n            return -1;\n        }\n\n        if(VAR_4 == VAR_10) {\n            /* COMMENT_0 */\n        } else if(VAR_4 == VAR_11) {\n            if(VAR_5 >= 8) {\n                DO_NTOHL(*VAR_2, VAR_0 + VAR_6 + 2);\n                DO_NTOHL(*VAR_3, VAR_0 + VAR_6 + 6);\n                VAR_7 = 1;\n            }\n            else {\n                flog_err(VAR_9,\n\t\t\t  \"Received incorrect RTT sub-TLV on IHU message.\");\n            }\n        } else {\n            debugf(VAR_12,\n                   \"Received unknown IHU sub-TLV type %d.\", VAR_4);\n        }\n\n        VAR_6 += VAR_5 + 2;\n    }\n    return VAR_7;\n}",
  "func_graph_path_before": "FRRouting/frr/c3793352a8d76d2eee1edc38a9a16c1c8a6573f4/message.c/vul/before/0.json",
  "func": "static int\nparse_ihu_subtlv(const unsigned char *a, int alen,\n                 unsigned int *hello_send_us,\n                 unsigned int *hello_rtt_receive_time)\n{\n    int type, len, i = 0, ret = 0;\n\n    while(i < alen) {\n        type = a[i];\n        if(type == SUBTLV_PAD1) {\n            i++;\n            continue;\n        }\n\n        if(i + 1 >= alen) {\n            flog_err(EC_BABEL_PACKET,\n\t\t      \"Received truncated sub-TLV on IHU message.\");\n            return -1;\n        }\n        len = a[i + 1];\n        if(i + len + 2 > alen) {\n            flog_err(EC_BABEL_PACKET,\n\t\t      \"Received truncated sub-TLV on IHU message.\");\n            return -1;\n        }\n\n        if(type == SUBTLV_PADN) {\n            /* Nothing to do. */\n        } else if(type == SUBTLV_TIMESTAMP) {\n            if(len >= 8) {\n                DO_NTOHL(*hello_send_us, a + i + 2);\n                DO_NTOHL(*hello_rtt_receive_time, a + i + 6);\n                ret = 1;\n            }\n            else {\n                flog_err(EC_BABEL_PACKET,\n\t\t\t  \"Received incorrect RTT sub-TLV on IHU message.\");\n            }\n        } else {\n            debugf(BABEL_DEBUG_COMMON,\n                   \"Received unknown IHU sub-TLV type %d.\", type);\n        }\n\n        i += len + 2;\n    }\n    return ret;\n}",
  "abstract_func": "static int\nparse_ihu_subtlv(const unsigned char *VAR_0, int VAR_1,\n                 unsigned int *VAR_2,\n                 unsigned int *VAR_3)\n{\n    int VAR_4, VAR_5, VAR_6 = 0, VAR_7 = 0;\n\n    while(VAR_6 < VAR_1) {\n        VAR_4 = VAR_0[VAR_6];\n        if(VAR_4 == VAR_8) {\n            VAR_6++;\n            continue;\n        }\n\n        if(VAR_6 + 1 >= VAR_1) {\n            flog_err(VAR_9,\n\t\t      \"Received truncated sub-TLV on IHU message.\");\n            return -1;\n        }\n        VAR_5 = VAR_0[VAR_6 + 1];\n        if(VAR_6 + VAR_5 + 2 > VAR_1) {\n            flog_err(VAR_9,\n\t\t      \"Received truncated sub-TLV on IHU message.\");\n            return -1;\n        }\n\n        if(VAR_4 == VAR_10) {\n            /* COMMENT_0 */\n        } else if(VAR_4 == VAR_11) {\n            if(VAR_5 >= 8) {\n                DO_NTOHL(*VAR_2, VAR_0 + VAR_6 + 2);\n                DO_NTOHL(*VAR_3, VAR_0 + VAR_6 + 6);\n                VAR_7 = 1;\n            }\n            else {\n                flog_err(VAR_9,\n\t\t\t  \"Received incorrect RTT sub-TLV on IHU message.\");\n            }\n        } else {\n            debugf(VAR_12,\n                   \"Received unknown IHU sub-TLV type %d.\", VAR_4);\n        }\n\n        VAR_6 += VAR_5 + 2;\n    }\n    return VAR_7;\n}",
  "func_graph_path": "FRRouting/frr/c3793352a8d76d2eee1edc38a9a16c1c8a6573f4/message.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -6,19 +6,19 @@\n     int type, len, i = 0, ret = 0;\n \n     while(i < alen) {\n-        type = a[0];\n+        type = a[i];\n         if(type == SUBTLV_PAD1) {\n             i++;\n             continue;\n         }\n \n-        if(i + 1 > alen) {\n+        if(i + 1 >= alen) {\n             flog_err(EC_BABEL_PACKET,\n \t\t      \"Received truncated sub-TLV on IHU message.\");\n             return -1;\n         }\n         len = a[i + 1];\n-        if(i + len > alen) {\n+        if(i + len + 2 > alen) {\n             flog_err(EC_BABEL_PACKET,\n \t\t      \"Received truncated sub-TLV on IHU message.\");\n             return -1;",
  "diff_line_info": {
    "deleted_lines": [
      "        type = a[0];",
      "        if(i + 1 > alen) {",
      "        if(i + len > alen) {"
    ],
    "added_lines": [
      "        type = a[i];",
      "        if(i + 1 >= alen) {",
      "        if(i + len + 2 > alen) {"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/FRRouting/frr/pull/10504",
  "description": {
    "pr_info": {
      "title": "babeld: fix the checks for truncated packets",
      "number": 10504
    },
    "comment": [
      "This patch repairs the checking conditions on length in four functions:\r\nbabel_packet_examin, parse_hello_subtlv, parse_ihu_subtlv, and parse_update_subtlv\r\nThis patch fixes #10502 and fixes #10503\r\n\r\nSigned-off-by: qingkaishi <qingkaishi@gmail.com>",
      "<details><summary>Continuous Integration Result: SUCCESSFUL</summary>\n\n#  Continuous Integration Result: SUCCESSFUL\n\nCongratulations, this patch passed basic tests\n\nTested-by: NetDEF / OpenSourceRouting.org CI System\n\nCI System Testrun URL: https://ci1.netdef.org/browse/FRR-PULLREQ2-3236/\n\nThis is a comment from an automated CI system.\nFor questions and feedback in regards to this CI system, please feel free to email\nMartin Winter - mwinter (at) opensourcerouting.org.\n\n\n</details>",
      "# Continuous Integration Result: SUCCESSFUL\n\nCongratulations, this patch passed basic tests\n\nTested-by: NetDEF / OpenSourceRouting.org CI System\n\nCI System Testrun URL: https://ci1.netdef.org/browse/FRR-PULLREQ2-3237/\n\nThis is a comment from an automated CI system.\nFor questions and feedback in regards to this CI system, please feel free to email\nMartin Winter - mwinter (at) opensourcerouting.org.\n\n\n",
      "@Mergifyio backport dev/8.2",
      "> backport dev/8.2\n\n#### ðŸŸ  Waiting for conditions to match\n\n<details>\n\n- [ ] `merged` [:pushpin: backport requirement]\n\n\n</details>\n\n\n<!--\nDO NOT EDIT\n-*- Mergify Payload -*-\n{\"command\": \"backport dev/8.2\", \"conclusion\": null}\n-*- Mergify Payload End -*-\n-->\n",
      "> backport dev/8.2\n\n#### âœ… Backports have been created\n\n<details>\n\n* [#10528 babeld: fix the checks for truncated packets (backport #10504)](https://github.com/FRRouting/frr/pull/10528) has been created for branch `dev/8.2`\n\n</details>\n\n\n<!--\nDO NOT EDIT\n-*- Mergify Payload -*-\n{\"command\": \"backport dev/8.2\", \"conclusion\": \"success\"}\n-*- Mergify Payload End -*-\n-->\n"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.9  \n\nThe patch addresses buffer overflow vulnerabilities by correcting length checks in parsing functions, which are crucial for preventing security exploits. The code modifications are consistent with typical buffer overflow fixes, indicating a security concern despite the absence of explicit security terminology."
}