{
  "cve_id": "CVE-2014-7272",
  "cwe_ids": [
    "CWE-264"
  ],
  "cvss_vector": "AV:L/AC:L/Au:N/C:C/I:C/A:C",
  "cvss_is_v3": false,
  "repo_name": "sddm",
  "commit_msg": "Move onAuthenticated XAUTHORITY generation to the helper\n\nThis avoids it being created as root and then chown'd.",
  "commit_hash": "e92c466f5c324b429ce1a8aa1b40d208574c778a",
  "git_url": "https://github.com/sddm/sddm/commit/e92c466f5c324b429ce1a8aa1b40d208574c778a",
  "file_path": "src/helper/UserSession.cpp",
  "func_name": "UserSession::setupChildProcess",
  "func_before": "void UserSession::setupChildProcess() {\n        struct passwd *pw = getpwnam(qobject_cast<HelperApp*>(parent())->user().toLocal8Bit());\n        if (setgid(pw->pw_gid) != 0)\n            bail(2);\n        if (initgroups(pw->pw_name, pw->pw_gid) != 0)\n            bail(2);\n        if (setuid(pw->pw_uid) != 0)\n            bail(2);\n        chdir(pw->pw_dir);\n    }",
  "abstract_func_before": "void UserSession::setupChildProcess() {\n        struct passwd *VAR_0 = getpwnam(VAR_1<HelperApp*>(parent())->user().toLocal8Bit());\n        if (setgid(VAR_0->pw_gid) != 0)\n            bail(2);\n        if (initgroups(VAR_0->pw_name, VAR_0->pw_gid) != 0)\n            bail(2);\n        if (setuid(VAR_0->pw_uid) != 0)\n            bail(2);\n        chdir(VAR_0->pw_dir);\n    }",
  "func_graph_path_before": "sddm/e92c466f5c324b429ce1a8aa1b40d208574c778a/UserSession.cpp/vul/before/0.json",
  "func": "void UserSession::setupChildProcess() {\n        struct passwd *pw = getpwnam(qobject_cast<HelperApp*>(parent())->user().toLocal8Bit());\n        if (setgid(pw->pw_gid) != 0)\n            bail(2);\n        if (initgroups(pw->pw_name, pw->pw_gid) != 0)\n            bail(2);\n        if (setuid(pw->pw_uid) != 0)\n            bail(2);\n        chdir(pw->pw_dir);\n        // redirect standard error to a file\n        setStandardErrorFile(QString(\"%1/.xsession-errors\").arg(pw->pw_dir));\n\n        QString cookie = qobject_cast<HelperApp*>(parent())->cookie();\n        if (!cookie.isEmpty()) {\n            QString file = processEnvironment().value(\"XAUTHORITY\");\n            QString display = processEnvironment().value(\"DISPLAY\");\n            qDebug() << \"Adding cookie to\" << file;\n\n            QFile file_handler(file);\n            file_handler.open(QIODevice::WriteOnly);\n            file_handler.close();\n\n            QString cmd = QString(\"%1 -f %2 -q\").arg(mainConfig.XDisplay.XauthPath.get()).arg(file);\n\n            // execute xauth\n            FILE *fp = popen(qPrintable(cmd), \"w\");\n\n            // check file\n            if (!fp)\n                return;\n            fprintf(fp, \"remove %s\\n\", qPrintable(display));\n            fprintf(fp, \"add %s . %s\\n\", qPrintable(display), qPrintable(cookie));\n            fprintf(fp, \"exit\\n\");\n\n            // close pipe\n            pclose(fp);\n        }\n    }",
  "abstract_func": "void UserSession::setupChildProcess() {\n        struct passwd *VAR_0 = getpwnam(VAR_1<HelperApp*>(parent())->user().toLocal8Bit());\n        if (setgid(VAR_0->pw_gid) != 0)\n            bail(2);\n        if (initgroups(VAR_0->pw_name, VAR_0->pw_gid) != 0)\n            bail(2);\n        if (setuid(VAR_0->pw_uid) != 0)\n            bail(2);\n        chdir(VAR_0->pw_dir);\n        /* COMMENT_0 */\n        setStandardErrorFile(QString(\"%1/.xsession-errors\").arg(VAR_0->pw_dir));\n\n        QString VAR_2 = VAR_1<HelperApp*>(parent())->cookie();\n        if (!VAR_2.isEmpty()) {\n            QString VAR_3 = processEnvironment().value(\"XAUTHORITY\");\n            QString VAR_4 = processEnvironment().value(\"DISPLAY\");\n            qDebug() << \"Adding cookie to\" << VAR_3;\n\n            QFile file_handler(file);\n            VAR_5.open(QIODevice::WriteOnly);\n            VAR_5.close();\n\n            QString VAR_6 = QString(\"%1 -f %2 -q\").arg(VAR_7.XDisplay.XauthPath.get()).arg(file);\n\n            /* COMMENT_1 */\n            FILE *VAR_8 = popen(qPrintable(VAR_6), \"w\");\n\n            /* COMMENT_2 */\n            if (!VAR_8)\n                return;\n            fprintf(VAR_8, \"remove %s\\n\", qPrintable(VAR_4));\n            fprintf(VAR_8, \"add %s . %s\\n\", qPrintable(VAR_4), qPrintable(VAR_2));\n            fprintf(VAR_8, \"exit\\n\");\n\n            /* COMMENT_3 */\n            pclose(VAR_8);\n        }\n    }",
  "func_graph_path": "sddm/e92c466f5c324b429ce1a8aa1b40d208574c778a/UserSession.cpp/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -7,4 +7,32 @@\n         if (setuid(pw->pw_uid) != 0)\n             bail(2);\n         chdir(pw->pw_dir);\n+        // redirect standard error to a file\n+        setStandardErrorFile(QString(\"%1/.xsession-errors\").arg(pw->pw_dir));\n+\n+        QString cookie = qobject_cast<HelperApp*>(parent())->cookie();\n+        if (!cookie.isEmpty()) {\n+            QString file = processEnvironment().value(\"XAUTHORITY\");\n+            QString display = processEnvironment().value(\"DISPLAY\");\n+            qDebug() << \"Adding cookie to\" << file;\n+\n+            QFile file_handler(file);\n+            file_handler.open(QIODevice::WriteOnly);\n+            file_handler.close();\n+\n+            QString cmd = QString(\"%1 -f %2 -q\").arg(mainConfig.XDisplay.XauthPath.get()).arg(file);\n+\n+            // execute xauth\n+            FILE *fp = popen(qPrintable(cmd), \"w\");\n+\n+            // check file\n+            if (!fp)\n+                return;\n+            fprintf(fp, \"remove %s\\n\", qPrintable(display));\n+            fprintf(fp, \"add %s . %s\\n\", qPrintable(display), qPrintable(cookie));\n+            fprintf(fp, \"exit\\n\");\n+\n+            // close pipe\n+            pclose(fp);\n+        }\n     }",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "        // redirect standard error to a file",
      "        setStandardErrorFile(QString(\"%1/.xsession-errors\").arg(pw->pw_dir));",
      "",
      "        QString cookie = qobject_cast<HelperApp*>(parent())->cookie();",
      "        if (!cookie.isEmpty()) {",
      "            QString file = processEnvironment().value(\"XAUTHORITY\");",
      "            QString display = processEnvironment().value(\"DISPLAY\");",
      "            qDebug() << \"Adding cookie to\" << file;",
      "",
      "            QFile file_handler(file);",
      "            file_handler.open(QIODevice::WriteOnly);",
      "            file_handler.close();",
      "",
      "            QString cmd = QString(\"%1 -f %2 -q\").arg(mainConfig.XDisplay.XauthPath.get()).arg(file);",
      "",
      "            // execute xauth",
      "            FILE *fp = popen(qPrintable(cmd), \"w\");",
      "",
      "            // check file",
      "            if (!fp)",
      "                return;",
      "            fprintf(fp, \"remove %s\\n\", qPrintable(display));",
      "            fprintf(fp, \"add %s . %s\\n\", qPrintable(display), qPrintable(cookie));",
      "            fprintf(fp, \"exit\\n\");",
      "",
      "            // close pipe",
      "            pclose(fp);",
      "        }"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/sddm/sddm/pull/280",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/sddm/sddm/pull/280: 403 Client Error: Forbidden for url: https://api.github.com/repos/sddm/sddm/pulls/280",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.9  \n\nThe patch addresses a security issue by avoiding the creation of the XAUTHORITY file as root, which mitigates a potential privilege escalation or permission-related vulnerability."
}