{
  "cve_id": "CVE-2019-18212",
  "cwe_ids": [
    "CWE-22"
  ],
  "cvss_vector": "AV:N/AC:L/Au:S/C:N/I:P/A:N",
  "cvss_is_v3": false,
  "repo_name": "eclipse/lemminx",
  "commit_msg": "Reject download of resource which are not in the cache folder (url which\nuses several ../../).\n\nSigned-off-by: azerr <azerr@redhat.com>",
  "commit_hash": "e37c399aa266be1b7a43061d4afc43dc230410d2",
  "git_url": "https://github.com/eclipse/lemminx/commit/e37c399aa266be1b7a43061d4afc43dc230410d2",
  "file_path": "org.eclipse.lsp4xml/src/main/java/org/eclipse/lsp4xml/uriresolver/CacheResourcesManager.java",
  "func_name": "downloadResource",
  "func_before": "private CompletableFuture<Path> downloadResource(final String resourceURI, Path resourceCachePath) {\n\t\treturn CompletableFuture.supplyAsync(() -> {\n\t\t\tLOGGER.info(\"Downloading \" + resourceURI + \" to \" + resourceCachePath + \"...\");\n\t\t\tlong start = System.currentTimeMillis();\n\t\t\tURLConnection conn = null;\n\t\t\ttry {\n\t\t\t\tString actualURI = resourceURI;\n\t\t\t\tURL url = new URL(actualURI);\n\t\t\t\tconn = url.openConnection();\n\t\t\t\t/* XXX: This should really be implemented using HttpClient or similar */\n\t\t\t\tint allowedRedirects = 5;\n\t\t\t\twhile (conn.getHeaderField(\"Location\") != null && allowedRedirects > 0) //$NON-NLS-1$\n\t\t\t\t{\n\t\t\t\t\tallowedRedirects--;\n\t\t\t\t\turl = new URL(actualURI = conn.getHeaderField(\"Location\")); //$NON-NLS-1$\n\t\t\t\t\tconn = url.openConnection();\n\t\t\t\t}\n\n\t\t\t\t// Download resource in a temporary file\n\t\t\t\tPath path = Files.createTempFile(resourceCachePath.getFileName().toString(), \".lsp4xml\");\n\t\t\t\ttry (ReadableByteChannel rbc = Channels.newChannel(conn.getInputStream());\n\t\t\t\t\t\tFileOutputStream fos = new FileOutputStream(path.toFile())) {\n\t\t\t\t\tfos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE);\n\t\t\t\t}\n\n\t\t\t\t// Move the temporary file in the lsp4xml cache folder.\n\t\t\t\tPath dir = resourceCachePath.getParent();\n\t\t\t\tif (!Files.exists(dir)) {\n\t\t\t\t\tFiles.createDirectories(dir);\n\t\t\t\t}\n\t\t\t\tFiles.move(path, resourceCachePath);\n\t\t\t\tlong elapsed = System.currentTimeMillis() - start;\n\t\t\t\tLOGGER.info(\"Downloaded \" + resourceURI + \" to \" + resourceCachePath + \" in \" + elapsed + \"ms\");\n\t\t\t} catch (Exception e) {\n\t\t\t\t// Do nothing\n\t\t\t\tunavailableURICache.put(resourceURI, true);\n\t\t\t\tThrowable rootCause = getRootCause(e);\n\t\t\t\tString error = \"[\" + rootCause.getClass().getTypeName() + \"] \" + rootCause.getMessage();\n\t\t\t\tLOGGER.log(Level.SEVERE,\n\t\t\t\t\t\t\"Error while downloading \" + resourceURI + \" to \" + resourceCachePath + \" : \" + error);\n\t\t\t\tthrow new CacheResourceDownloadedException(\"Error while downloading '\" + resourceURI + \"' to \" + resourceCachePath + \".\", e);\n\t\t\t} finally {\n\t\t\t\tsynchronized (resourcesLoading) {\n\t\t\t\t\tresourcesLoading.remove(resourceURI);\n\t\t\t\t}\n\t\t\t\tif (conn != null && conn instanceof HttpURLConnection) {\n\t\t\t\t\t((HttpURLConnection) conn).disconnect();\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn resourceCachePath;\n\t\t});\n\t}",
  "abstract_func_before": "private CompletableFuture<Path> downloadResource(final String VAR_0, Path VAR_1) {\n\t\treturn VAR_2.supplyAsync(() -> {\n\t\t\tVAR_3.info(\"Downloading \" + VAR_0 + \" to \" + VAR_1 + \"...\");\n\t\t\tlong VAR_4 = VAR_5.currentTimeMillis();\n\t\t\tURLConnection VAR_6 = null;\n\t\t\ttry {\n\t\t\t\tString VAR_7 = VAR_0;\n\t\t\t\tURL VAR_8 = new URL(VAR_7);\n\t\t\t\tVAR_6 = VAR_8.openConnection();\n\t\t\t\t/* COMMENT_0 */\n\t\t\t\tint VAR_9 = 5;\n\t\t\t\twhile (VAR_6.getHeaderField(\"Location\") != null && VAR_9 > 0) /* COMMENT_1 */\n\t\t\t\t{\n\t\t\t\t\tVAR_9--;\n\t\t\t\t\tVAR_8 = new URL(VAR_7 = VAR_6.getHeaderField(\"Location\")); /* COMMENT_1 */\n\t\t\t\t\tVAR_6 = VAR_8.openConnection();\n\t\t\t\t}\n\n\t\t\t\t/* COMMENT_2 */\n\t\t\t\tPath VAR_10 = VAR_11.createTempFile(VAR_1.getFileName().toString(), \".lsp4xml\");\n\t\t\t\ttry (ReadableByteChannel VAR_12 = VAR_13.newChannel(VAR_6.getInputStream());\n\t\t\t\t\t\tFileOutputStream VAR_14 = new FileOutputStream(VAR_10.toFile())) {\n\t\t\t\t\tVAR_14.getChannel().transferFrom(VAR_12, 0, VAR_15.MAX_VALUE);\n\t\t\t\t}\n\n\t\t\t\t/* COMMENT_3 */\n\t\t\t\tPath VAR_16 = VAR_1.getParent();\n\t\t\t\tif (!VAR_11.exists(VAR_16)) {\n\t\t\t\t\tVAR_11.createDirectories(VAR_16);\n\t\t\t\t}\n\t\t\t\tVAR_11.move(VAR_10, VAR_1);\n\t\t\t\tlong VAR_17 = VAR_5.currentTimeMillis() - VAR_4;\n\t\t\t\tVAR_3.info(\"Downloaded \" + VAR_0 + \" to \" + VAR_1 + \" in \" + VAR_17 + \"ms\");\n\t\t\t} catch (Exception VAR_18) {\n\t\t\t\t/* COMMENT_4 */\n\t\t\t\tVAR_19.put(VAR_0, true);\n\t\t\t\tThrowable VAR_20 = getRootCause(VAR_18);\n\t\t\t\tString VAR_21 = \"[\" + VAR_20.getClass().getTypeName() + \"] \" + VAR_20.getMessage();\n\t\t\t\tVAR_3.log(VAR_22.SEVERE,\n\t\t\t\t\t\t\"Error while downloading \" + VAR_0 + \" to \" + VAR_1 + \" : \" + VAR_21);\n\t\t\t\tthrow new CacheResourceDownloadedException(\"Error while downloading '\" + VAR_0 + \"' to \" + VAR_1 + \".\", VAR_18);\n\t\t\t} finally {\n\t\t\t\tsynchronized (VAR_23) {\n\t\t\t\t\tVAR_23.remove(VAR_0);\n\t\t\t\t}\n\t\t\t\tif (VAR_6 != null && VAR_6 instanceof HttpURLConnection) {\n\t\t\t\t\t((HttpURLConnection) VAR_6).disconnect();\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn VAR_1;\n\t\t});\n\t}",
  "func_graph_path_before": "eclipse/lemminx/e37c399aa266be1b7a43061d4afc43dc230410d2/CacheResourcesManager.java/vul/before/0.json",
  "func": "private CompletableFuture<Path> downloadResource(final String resourceURI, Path resourceCachePath) {\n\t\treturn CompletableFuture.supplyAsync(() -> {\n\t\t\tLOGGER.info(\"Downloading \" + resourceURI + \" to \" + resourceCachePath + \"...\");\n\t\t\tlong start = System.currentTimeMillis();\n\t\t\tURLConnection conn = null;\n\t\t\ttry {\n\t\t\t\tString actualURI = resourceURI;\n\t\t\t\tURL url = new URL(actualURI);\n\t\t\t\tconn = url.openConnection();\n\t\t\t\t/* XXX: This should really be implemented using HttpClient or similar */\n\t\t\t\tint allowedRedirects = 5;\n\t\t\t\twhile (conn.getHeaderField(\"Location\") != null && allowedRedirects > 0) //$NON-NLS-1$\n\t\t\t\t{\n\t\t\t\t\tallowedRedirects--;\n\t\t\t\t\turl = new URL(actualURI = conn.getHeaderField(\"Location\")); //$NON-NLS-1$\n\t\t\t\t\tconn = url.openConnection();\n\t\t\t\t}\n\n\t\t\t\t// Download resource in a temporary file\n\t\t\t\tPath path = Files.createTempFile(resourceCachePath.getFileName().toString(), \".lsp4xml\");\n\t\t\t\ttry (ReadableByteChannel rbc = Channels.newChannel(conn.getInputStream());\n\t\t\t\t\t\tFileOutputStream fos = new FileOutputStream(path.toFile())) {\n\t\t\t\t\tfos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE);\n\t\t\t\t}\n\n\t\t\t\t// Move the temporary file in the lsp4xml cache folder.\n\t\t\t\tPath dir = resourceCachePath.getParent();\n\t\t\t\tif (!Files.exists(dir)) {\n\t\t\t\t\tFiles.createDirectories(dir);\n\t\t\t\t}\n\t\t\t\tFiles.move(path, resourceCachePath);\n\t\t\t\tlong elapsed = System.currentTimeMillis() - start;\n\t\t\t\tLOGGER.info(\"Downloaded \" + resourceURI + \" to \" + resourceCachePath + \" in \" + elapsed + \"ms\");\n\t\t\t} catch (Exception e) {\n\t\t\t\t// Do nothing\n\t\t\t\tunavailableURICache.put(resourceURI, true);\n\t\t\t\tThrowable rootCause = getRootCause(e);\n\t\t\t\tString error = \"[\" + rootCause.getClass().getTypeName() + \"] \" + rootCause.getMessage();\n\t\t\t\tLOGGER.log(Level.SEVERE,\n\t\t\t\t\t\t\"Error while downloading \" + resourceURI + \" to \" + resourceCachePath + \" : \" + error);\n\t\t\t\tthrow new CacheResourceDownloadedException(\n\t\t\t\t\t\t\"Error while downloading '\" + resourceURI + \"' to \" + resourceCachePath + \".\", e);\n\t\t\t} finally {\n\t\t\t\tsynchronized (resourcesLoading) {\n\t\t\t\t\tresourcesLoading.remove(resourceURI);\n\t\t\t\t}\n\t\t\t\tif (conn != null && conn instanceof HttpURLConnection) {\n\t\t\t\t\t((HttpURLConnection) conn).disconnect();\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn resourceCachePath;\n\t\t});\n\t}",
  "abstract_func": "private CompletableFuture<Path> downloadResource(final String VAR_0, Path VAR_1) {\n\t\treturn VAR_2.supplyAsync(() -> {\n\t\t\tVAR_3.info(\"Downloading \" + VAR_0 + \" to \" + VAR_1 + \"...\");\n\t\t\tlong VAR_4 = VAR_5.currentTimeMillis();\n\t\t\tURLConnection VAR_6 = null;\n\t\t\ttry {\n\t\t\t\tString VAR_7 = VAR_0;\n\t\t\t\tURL VAR_8 = new URL(VAR_7);\n\t\t\t\tVAR_6 = VAR_8.openConnection();\n\t\t\t\t/* COMMENT_0 */\n\t\t\t\tint VAR_9 = 5;\n\t\t\t\twhile (VAR_6.getHeaderField(\"Location\") != null && VAR_9 > 0) /* COMMENT_1 */\n\t\t\t\t{\n\t\t\t\t\tVAR_9--;\n\t\t\t\t\tVAR_8 = new URL(VAR_7 = VAR_6.getHeaderField(\"Location\")); /* COMMENT_1 */\n\t\t\t\t\tVAR_6 = VAR_8.openConnection();\n\t\t\t\t}\n\n\t\t\t\t/* COMMENT_2 */\n\t\t\t\tPath VAR_10 = VAR_11.createTempFile(VAR_1.getFileName().toString(), \".lsp4xml\");\n\t\t\t\ttry (ReadableByteChannel VAR_12 = VAR_13.newChannel(VAR_6.getInputStream());\n\t\t\t\t\t\tFileOutputStream VAR_14 = new FileOutputStream(VAR_10.toFile())) {\n\t\t\t\t\tVAR_14.getChannel().transferFrom(VAR_12, 0, VAR_15.MAX_VALUE);\n\t\t\t\t}\n\n\t\t\t\t/* COMMENT_3 */\n\t\t\t\tPath VAR_16 = VAR_1.getParent();\n\t\t\t\tif (!VAR_11.exists(VAR_16)) {\n\t\t\t\t\tVAR_11.createDirectories(VAR_16);\n\t\t\t\t}\n\t\t\t\tVAR_11.move(VAR_10, VAR_1);\n\t\t\t\tlong VAR_17 = VAR_5.currentTimeMillis() - VAR_4;\n\t\t\t\tVAR_3.info(\"Downloaded \" + VAR_0 + \" to \" + VAR_1 + \" in \" + VAR_17 + \"ms\");\n\t\t\t} catch (Exception VAR_18) {\n\t\t\t\t/* COMMENT_4 */\n\t\t\t\tVAR_19.put(VAR_0, true);\n\t\t\t\tThrowable VAR_20 = getRootCause(VAR_18);\n\t\t\t\tString VAR_21 = \"[\" + VAR_20.getClass().getTypeName() + \"] \" + VAR_20.getMessage();\n\t\t\t\tVAR_3.log(VAR_22.SEVERE,\n\t\t\t\t\t\t\"Error while downloading \" + VAR_0 + \" to \" + VAR_1 + \" : \" + VAR_21);\n\t\t\t\tthrow new CacheResourceDownloadedException(\n\t\t\t\t\t\t\"Error while downloading '\" + VAR_0 + \"' to \" + VAR_1 + \".\", VAR_18);\n\t\t\t} finally {\n\t\t\t\tsynchronized (VAR_23) {\n\t\t\t\t\tVAR_23.remove(VAR_0);\n\t\t\t\t}\n\t\t\t\tif (VAR_6 != null && VAR_6 instanceof HttpURLConnection) {\n\t\t\t\t\t((HttpURLConnection) VAR_6).disconnect();\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn VAR_1;\n\t\t});\n\t}",
  "func_graph_path": "eclipse/lemminx/e37c399aa266be1b7a43061d4afc43dc230410d2/CacheResourcesManager.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -38,7 +38,8 @@\n \t\t\t\tString error = \"[\" + rootCause.getClass().getTypeName() + \"] \" + rootCause.getMessage();\n \t\t\t\tLOGGER.log(Level.SEVERE,\n \t\t\t\t\t\t\"Error while downloading \" + resourceURI + \" to \" + resourceCachePath + \" : \" + error);\n-\t\t\t\tthrow new CacheResourceDownloadedException(\"Error while downloading '\" + resourceURI + \"' to \" + resourceCachePath + \".\", e);\n+\t\t\t\tthrow new CacheResourceDownloadedException(\n+\t\t\t\t\t\t\"Error while downloading '\" + resourceURI + \"' to \" + resourceCachePath + \".\", e);\n \t\t\t} finally {\n \t\t\t\tsynchronized (resourcesLoading) {\n \t\t\t\t\tresourcesLoading.remove(resourceURI);",
  "diff_line_info": {
    "deleted_lines": [
      "\t\t\t\tthrow new CacheResourceDownloadedException(\"Error while downloading '\" + resourceURI + \"' to \" + resourceCachePath + \".\", e);"
    ],
    "added_lines": [
      "\t\t\t\tthrow new CacheResourceDownloadedException(",
      "\t\t\t\t\t\t\"Error while downloading '\" + resourceURI + \"' to \" + resourceCachePath + \".\", e);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/eclipse-lemminx/lemminx/pull/567",
  "description": {
    "pr_info": {
      "title": "Reject download of resource which are not in the cache folder",
      "number": 567
    },
    "comment": [
      "Reject download of resource which are not in the cache folder (url which uses several ../../).\r\n\r\nSigned-off-by: azerr <azerr@redhat.com>",
      "[CVE-2019-18212](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-18212) was opened  about this issue."
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix;  \n**Confidence:** 1.0"
}