{
  "cve_id": "CVE-2022-29181",
  "cwe_ids": [
    "CWE-241"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "sparklemotion/nokogiri",
  "commit_msg": "fix: {HTML4,XML}::SAX::{Parser,ParserContext} check arg types\n\nPreviously, arguments of the wrong type might cause segfault on CRuby.",
  "commit_hash": "db05ba9a1bd4b90aa6c76742cf6102a7c7297267",
  "git_url": "https://github.com/sparklemotion/nokogiri/commit/db05ba9a1bd4b90aa6c76742cf6102a7c7297267",
  "file_path": "ext/nokogiri/html4_sax_parser_context.c",
  "func_name": "parse_memory",
  "func_before": "static VALUE\nparse_memory(VALUE klass, VALUE data, VALUE encoding)\n{\n  htmlParserCtxtPtr ctxt;\n\n  if (NIL_P(data)) {\n    rb_raise(rb_eArgError, \"data cannot be nil\");\n  }\n  if (!(int)RSTRING_LEN(data)) {\n    rb_raise(rb_eRuntimeError, \"data cannot be empty\");\n  }\n\n  ctxt = htmlCreateMemoryParserCtxt(StringValuePtr(data),\n                                    (int)RSTRING_LEN(data));\n  if (ctxt->sax) {\n    xmlFree(ctxt->sax);\n    ctxt->sax = NULL;\n  }\n\n  if (RTEST(encoding)) {\n    xmlCharEncodingHandlerPtr enc = xmlFindCharEncodingHandler(StringValueCStr(encoding));\n    if (enc != NULL) {\n      xmlSwitchToEncoding(ctxt, enc);\n      if (ctxt->errNo == XML_ERR_UNSUPPORTED_ENCODING) {\n        rb_raise(rb_eRuntimeError, \"Unsupported encoding %s\",\n                 StringValueCStr(encoding));\n      }\n    }\n  }\n\n  return Data_Wrap_Struct(klass, NULL, deallocate, ctxt);\n}",
  "abstract_func_before": "static VALUE\nparse_memory(VALUE VAR_0, VALUE VAR_1, VALUE VAR_2)\n{\n  htmlParserCtxtPtr VAR_3;\n\n  if (NIL_P(VAR_1)) {\n    rb_raise(VAR_4, \"data cannot be nil\");\n  }\n  if (!(int)RSTRING_LEN(VAR_1)) {\n    rb_raise(VAR_5, \"data cannot be empty\");\n  }\n\n  VAR_3 = htmlCreateMemoryParserCtxt(StringValuePtr(VAR_1),\n                                    (int)RSTRING_LEN(VAR_1));\n  if (VAR_3->sax) {\n    xmlFree(VAR_3->sax);\n    VAR_3->sax = NULL;\n  }\n\n  if (RTEST(VAR_2)) {\n    xmlCharEncodingHandlerPtr VAR_6 = xmlFindCharEncodingHandler(StringValueCStr(VAR_2));\n    if (VAR_6 != NULL) {\n      xmlSwitchToEncoding(VAR_3, VAR_6);\n      if (VAR_3->errNo == VAR_7) {\n        rb_raise(VAR_5, \"Unsupported encoding %s\",\n                 StringValueCStr(VAR_2));\n      }\n    }\n  }\n\n  return Data_Wrap_Struct(VAR_0, NULL, VAR_8, VAR_3);\n}",
  "func_graph_path_before": "sparklemotion/nokogiri/db05ba9a1bd4b90aa6c76742cf6102a7c7297267/html4_sax_parser_context.c/vul/before/0.json",
  "func": "static VALUE\nparse_memory(VALUE klass, VALUE data, VALUE encoding)\n{\n  htmlParserCtxtPtr ctxt;\n\n  Check_Type(data, T_STRING);\n\n  if (!(int)RSTRING_LEN(data)) {\n    rb_raise(rb_eRuntimeError, \"data cannot be empty\");\n  }\n\n  ctxt = htmlCreateMemoryParserCtxt(StringValuePtr(data),\n                                    (int)RSTRING_LEN(data));\n  if (ctxt->sax) {\n    xmlFree(ctxt->sax);\n    ctxt->sax = NULL;\n  }\n\n  if (RTEST(encoding)) {\n    xmlCharEncodingHandlerPtr enc = xmlFindCharEncodingHandler(StringValueCStr(encoding));\n    if (enc != NULL) {\n      xmlSwitchToEncoding(ctxt, enc);\n      if (ctxt->errNo == XML_ERR_UNSUPPORTED_ENCODING) {\n        rb_raise(rb_eRuntimeError, \"Unsupported encoding %s\",\n                 StringValueCStr(encoding));\n      }\n    }\n  }\n\n  return Data_Wrap_Struct(klass, NULL, deallocate, ctxt);\n}",
  "abstract_func": "static VALUE\nparse_memory(VALUE VAR_0, VALUE VAR_1, VALUE VAR_2)\n{\n  htmlParserCtxtPtr VAR_3;\n\n  Check_Type(VAR_1, VAR_4);\n\n  if (!(int)RSTRING_LEN(VAR_1)) {\n    rb_raise(VAR_5, \"data cannot be empty\");\n  }\n\n  VAR_3 = htmlCreateMemoryParserCtxt(StringValuePtr(VAR_1),\n                                    (int)RSTRING_LEN(VAR_1));\n  if (VAR_3->sax) {\n    xmlFree(VAR_3->sax);\n    VAR_3->sax = NULL;\n  }\n\n  if (RTEST(VAR_2)) {\n    xmlCharEncodingHandlerPtr VAR_6 = xmlFindCharEncodingHandler(StringValueCStr(VAR_2));\n    if (VAR_6 != NULL) {\n      xmlSwitchToEncoding(VAR_3, VAR_6);\n      if (VAR_3->errNo == VAR_7) {\n        rb_raise(VAR_5, \"Unsupported encoding %s\",\n                 StringValueCStr(VAR_2));\n      }\n    }\n  }\n\n  return Data_Wrap_Struct(VAR_0, NULL, VAR_8, VAR_3);\n}",
  "func_graph_path": "sparklemotion/nokogiri/db05ba9a1bd4b90aa6c76742cf6102a7c7297267/html4_sax_parser_context.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -3,9 +3,8 @@\n {\n   htmlParserCtxtPtr ctxt;\n \n-  if (NIL_P(data)) {\n-    rb_raise(rb_eArgError, \"data cannot be nil\");\n-  }\n+  Check_Type(data, T_STRING);\n+\n   if (!(int)RSTRING_LEN(data)) {\n     rb_raise(rb_eRuntimeError, \"data cannot be empty\");\n   }",
  "diff_line_info": {
    "deleted_lines": [
      "  if (NIL_P(data)) {",
      "    rb_raise(rb_eArgError, \"data cannot be nil\");",
      "  }"
    ],
    "added_lines": [
      "  Check_Type(data, T_STRING);",
      ""
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/sparklemotion/nokogiri/pull/2529",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/sparklemotion/nokogiri/pull/2529: 403 Client Error: Forbidden for url: https://api.github.com/repos/sparklemotion/nokogiri/pulls/2529",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "The patch addresses a bug that causes segfaults due to incorrect argument types, implementing type checks to prevent such security issues. The changes are consistent with preventing exploits, hence classified as a security fix.\n\n**Final Classification:** Security Vulnerability Fix; **Confidence:** 0.9"
}