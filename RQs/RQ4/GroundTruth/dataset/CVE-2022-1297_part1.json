{
  "cve_id": "CVE-2022-1297",
  "cwe_ids": [
    "CWE-125"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "radareorg/radare2",
  "commit_msg": "Fix oobread and unaligned casts in the NE entrypoint logic ##crash\n\n* Reported by @hmsec via huntr.dev\n* Reproducer: nepocaligns\n* BountyID: ec538fa4-06c6-4050-a141-f60153ddeaac",
  "commit_hash": "0a557045476a2969c7079aec9eeb29d02f2809c6",
  "git_url": "https://github.com/radareorg/radare2/commit/0a557045476a2969c7079aec9eeb29d02f2809c6",
  "file_path": "libr/bin/format/ne/ne.c",
  "func_name": "r_bin_ne_get_entrypoints",
  "func_before": "RList *r_bin_ne_get_entrypoints(r_bin_ne_obj_t *bin) {\n\tif (!bin->entry_table) {\n\t\treturn NULL;\n\t}\n\tRList *entries = r_list_newf (free);\n\tif (!entries) {\n\t\treturn NULL;\n\t}\n\tRList *segments = r_bin_ne_get_segments (bin);\n\tif (!segments) {\n\t\tr_list_free (entries);\n\t\treturn NULL;\n\t}\n\tif (bin->ne_header->csEntryPoint) {\n\t\tRBinAddr *entry = R_NEW0 (RBinAddr);\n\t\tif (!entry) {\n\t\t\tr_list_free (entries);\n\t\t\treturn NULL;\n\t\t}\n\t\tentry->bits = 16;\n\t\tut32 entry_cs = bin->ne_header->csEntryPoint;\n\t\tRBinSection *s = r_list_get_n (segments, entry_cs - 1);\n\t\tentry->paddr = bin->ne_header->ipEntryPoint + (s? s->paddr: 0);\n\n\t\tr_list_append (entries, entry);\n\t}\n\tint off = 0;\n\tsize_t tableat = bin->header_offset + bin->ne_header->EntryTableOffset;\n\twhile (off < bin->ne_header->EntryTableLength) {\n\t\tif (tableat + off >= r_buf_size (bin->buf)) {\n\t\t\tbreak;\n\t\t}\n\t\tut8 bundle_length = *(ut8 *)(bin->entry_table + off);\n\t\tif (!bundle_length) {\n\t\t\tbreak;\n\t\t}\n\t\toff++;\n\t\tut8 bundle_type = *(ut8 *)(bin->entry_table + off);\n\t\toff++;\n\t\tint i;\n\t\tfor (i = 0; i < bundle_length; i++) {\n\t\t\tif (tableat + off + 4 >= r_buf_size (bin->buf)) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tRBinAddr *entry = R_NEW0 (RBinAddr);\n\t\t\tif (!entry) {\n\t\t\t\tr_list_free (entries);\n\t\t\t\treturn NULL;\n\t\t\t}\n\t\t\toff++;\n\t\t\tif (!bundle_type) { // Skip\n\t\t\t\toff--;\n\t\t\t\tfree (entry);\n\t\t\t\tbreak;\n\t\t\t} else if (bundle_type == 0xff) { // moveable\n\t\t\t\toff += 2;\n\t\t\t\tut8 segnum = *(bin->entry_table + off);\n\t\t\t\toff++;\n\t\t\t\tut16 segoff = *(ut16 *)(bin->entry_table + off);\n\t\t\t\tif (segnum > 0) {\n\t\t\t\t\tentry->paddr = (ut64)bin->segment_entries[segnum - 1].offset * bin->alignment + segoff;\n\t\t\t\t}\n\t\t\t} else { // Fixed\n\t\t\t\tif (bundle_type < bin->ne_header->SegCount) {\n\t\t\t\t\tentry->paddr = (ut64)bin->segment_entries[bundle_type - 1].offset\n\t\t\t\t\t\t* bin->alignment + *(ut16 *)(bin->entry_table + off);\n\t\t\t\t}\n\t\t\t}\n\t\t\toff += 2;\n\t\t\tr_list_append (entries, entry);\n\t\t}\n\t}\n\tr_list_free (segments);\n\tbin->entries = entries;\n\treturn entries;\n}",
  "abstract_func_before": "RList *r_bin_ne_get_entrypoints(r_bin_ne_obj_t *VAR_0) {\n\tif (!VAR_0->entry_table) {\n\t\treturn NULL;\n\t}\n\tRList *VAR_1 = r_list_newf (VAR_2);\n\tif (!VAR_1) {\n\t\treturn NULL;\n\t}\n\tRList *VAR_3 = r_bin_ne_get_segments (VAR_0);\n\tif (!VAR_3) {\n\t\tr_list_free (VAR_1);\n\t\treturn NULL;\n\t}\n\tif (VAR_0->ne_header->csEntryPoint) {\n\t\tRBinAddr *VAR_4 = R_NEW0 (RBinAddr);\n\t\tif (!VAR_4) {\n\t\t\tr_list_free (VAR_1);\n\t\t\treturn NULL;\n\t\t}\n\t\tVAR_4->bits = 16;\n\t\tut32 VAR_5 = VAR_0->ne_header->csEntryPoint;\n\t\tRBinSection *VAR_6 = r_list_get_n (VAR_3, VAR_5 - 1);\n\t\tVAR_4->paddr = VAR_0->ne_header->ipEntryPoint + (VAR_6? VAR_6->paddr: 0);\n\n\t\tr_list_append (VAR_1, VAR_4);\n\t}\n\tint VAR_7 = 0;\n\tsize_t VAR_8 = VAR_0->header_offset + VAR_0->ne_header->EntryTableOffset;\n\twhile (VAR_7 < VAR_0->ne_header->EntryTableLength) {\n\t\tif (VAR_8 + VAR_7 >= r_buf_size (VAR_0->buf)) {\n\t\t\tbreak;\n\t\t}\n\t\tut8 VAR_9 = *(ut8 *)(VAR_0->entry_table + VAR_7);\n\t\tif (!VAR_9) {\n\t\t\tbreak;\n\t\t}\n\t\tVAR_7++;\n\t\tut8 VAR_10 = *(ut8 *)(VAR_0->entry_table + VAR_7);\n\t\tVAR_7++;\n\t\tint VAR_11;\n\t\tfor (VAR_11 = 0; VAR_11 < VAR_9; VAR_11++) {\n\t\t\tif (VAR_8 + VAR_7 + 4 >= r_buf_size (VAR_0->buf)) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tRBinAddr *VAR_4 = R_NEW0 (RBinAddr);\n\t\t\tif (!VAR_4) {\n\t\t\t\tr_list_free (VAR_1);\n\t\t\t\treturn NULL;\n\t\t\t}\n\t\t\tVAR_7++;\n\t\t\tif (!VAR_10) { /* COMMENT_0 */\n\t\t\t\tVAR_7--;\n\t\t\t\tVAR_2 (VAR_4);\n\t\t\t\tbreak;\n\t\t\t} else if (VAR_10 == 0xff) { /* COMMENT_1 */\n\t\t\t\tVAR_7 += 2;\n\t\t\t\tut8 VAR_12 = *(VAR_0->entry_table + VAR_7);\n\t\t\t\tVAR_7++;\n\t\t\t\tut16 VAR_13 = *(ut16 *)(VAR_0->entry_table + VAR_7);\n\t\t\t\tif (VAR_12 > 0) {\n\t\t\t\t\tVAR_4->paddr = (ut64)VAR_0->segment_entries[VAR_12 - 1].offset * VAR_0->alignment + VAR_13;\n\t\t\t\t}\n\t\t\t} else { /* COMMENT_2 */\n\t\t\t\tif (VAR_10 < VAR_0->ne_header->SegCount) {\n\t\t\t\t\tVAR_4->paddr = (ut64)VAR_0->segment_entries[VAR_10 - 1].offset\n\t\t\t\t\t\t* VAR_0->alignment + *(ut16 *)(VAR_0->entry_table + VAR_7);\n\t\t\t\t}\n\t\t\t}\n\t\t\tVAR_7 += 2;\n\t\t\tr_list_append (VAR_1, VAR_4);\n\t\t}\n\t}\n\tr_list_free (VAR_3);\n\tVAR_0->entries = VAR_1;\n\treturn VAR_1;\n}",
  "func_graph_path_before": "radareorg/radare2/0a557045476a2969c7079aec9eeb29d02f2809c6/ne.c/vul/before/0.json",
  "func": "RList *r_bin_ne_get_entrypoints(r_bin_ne_obj_t *bin) {\n\tif (!bin->entry_table) {\n\t\treturn NULL;\n\t}\n\tRList *entries = r_list_newf (free);\n\tif (!entries) {\n\t\treturn NULL;\n\t}\n\tRList *segments = r_bin_ne_get_segments (bin);\n\tif (!segments) {\n\t\tr_list_free (entries);\n\t\treturn NULL;\n\t}\n\tif (bin->ne_header->csEntryPoint) {\n\t\tRBinAddr *entry = R_NEW0 (RBinAddr);\n\t\tif (!entry) {\n\t\t\tr_list_free (entries);\n\t\t\treturn NULL;\n\t\t}\n\t\tentry->bits = 16;\n\t\tut32 entry_cs = bin->ne_header->csEntryPoint;\n\t\tRBinSection *s = r_list_get_n (segments, entry_cs - 1);\n\t\tentry->paddr = bin->ne_header->ipEntryPoint + (s? s->paddr: 0);\n\n\t\tr_list_append (entries, entry);\n\t}\n\tint off = 0;\n\tsize_t tableat = bin->header_offset + bin->ne_header->EntryTableOffset;\n\twhile (off < bin->ne_header->EntryTableLength) {\n\t\tif (tableat + off >= r_buf_size (bin->buf)) {\n\t\t\tbreak;\n\t\t}\n\t\tut8 bundle_length = *(ut8 *)(bin->entry_table + off);\n\t\tif (!bundle_length) {\n\t\t\tbreak;\n\t\t}\n\t\toff++;\n\t\tut8 bundle_type = *(ut8 *)(bin->entry_table + off);\n\t\toff++;\n\t\tint i;\n\t\tfor (i = 0; i < bundle_length; i++) {\n\t\t\tif (tableat + off + 4 >= r_buf_size (bin->buf)) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tRBinAddr *entry = R_NEW0 (RBinAddr);\n\t\t\tif (!entry) {\n\t\t\t\tr_list_free (entries);\n\t\t\t\treturn NULL;\n\t\t\t}\n\t\t\toff++;\n\t\t\tif (!bundle_type) { // Skip\n\t\t\t\toff--;\n\t\t\t\tfree (entry);\n\t\t\t\tbreak;\n\t\t\t} else if (bundle_type == 0xff) { // moveable\n\t\t\t\toff += 2;\n\t\t\t\tut8 segnum = *(bin->entry_table + off);\n\t\t\t\toff++;\n\t\t\t\tif (off > bin->ne_header->EntryTableLength) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tut16 segoff = r_read_le16 (bin->entry_table + off);\n\t\t\t\tif (segnum > 0 && segnum < bin->ne_header->SegCount) {\n\t\t\t\t\tentry->paddr = (ut64)bin->segment_entries[segnum - 1].offset * bin->alignment + segoff;\n\t\t\t\t}\n\t\t\t} else { // Fixed\n\t\t\t\tif (off + 2 >= bin->ne_header->EntryTableLength) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tut16 delta = r_read_le16 (bin->entry_table + off);\n\t\t\t\tif (bundle_type < bin->ne_header->SegCount) {\n\t\t\t\t\tentry->paddr = (ut64)bin->segment_entries[bundle_type - 1].offset\n\t\t\t\t\t\t* bin->alignment + delta;\n\t\t\t\t}\n\t\t\t}\n\t\t\toff += 2;\n\t\t\tr_list_append (entries, entry);\n\t\t}\n\t}\n\tr_list_free (segments);\n\tbin->entries = entries;\n\treturn entries;\n}",
  "abstract_func": "RList *r_bin_ne_get_entrypoints(r_bin_ne_obj_t *VAR_0) {\n\tif (!VAR_0->entry_table) {\n\t\treturn NULL;\n\t}\n\tRList *VAR_1 = r_list_newf (VAR_2);\n\tif (!VAR_1) {\n\t\treturn NULL;\n\t}\n\tRList *VAR_3 = r_bin_ne_get_segments (VAR_0);\n\tif (!VAR_3) {\n\t\tr_list_free (VAR_1);\n\t\treturn NULL;\n\t}\n\tif (VAR_0->ne_header->csEntryPoint) {\n\t\tRBinAddr *VAR_4 = R_NEW0 (RBinAddr);\n\t\tif (!VAR_4) {\n\t\t\tr_list_free (VAR_1);\n\t\t\treturn NULL;\n\t\t}\n\t\tVAR_4->bits = 16;\n\t\tut32 VAR_5 = VAR_0->ne_header->csEntryPoint;\n\t\tRBinSection *VAR_6 = r_list_get_n (VAR_3, VAR_5 - 1);\n\t\tVAR_4->paddr = VAR_0->ne_header->ipEntryPoint + (VAR_6? VAR_6->paddr: 0);\n\n\t\tr_list_append (VAR_1, VAR_4);\n\t}\n\tint VAR_7 = 0;\n\tsize_t VAR_8 = VAR_0->header_offset + VAR_0->ne_header->EntryTableOffset;\n\twhile (VAR_7 < VAR_0->ne_header->EntryTableLength) {\n\t\tif (VAR_8 + VAR_7 >= r_buf_size (VAR_0->buf)) {\n\t\t\tbreak;\n\t\t}\n\t\tut8 VAR_9 = *(ut8 *)(VAR_0->entry_table + VAR_7);\n\t\tif (!VAR_9) {\n\t\t\tbreak;\n\t\t}\n\t\tVAR_7++;\n\t\tut8 VAR_10 = *(ut8 *)(VAR_0->entry_table + VAR_7);\n\t\tVAR_7++;\n\t\tint VAR_11;\n\t\tfor (VAR_11 = 0; VAR_11 < VAR_9; VAR_11++) {\n\t\t\tif (VAR_8 + VAR_7 + 4 >= r_buf_size (VAR_0->buf)) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tRBinAddr *VAR_4 = R_NEW0 (RBinAddr);\n\t\t\tif (!VAR_4) {\n\t\t\t\tr_list_free (VAR_1);\n\t\t\t\treturn NULL;\n\t\t\t}\n\t\t\tVAR_7++;\n\t\t\tif (!VAR_10) { /* COMMENT_0 */\n\t\t\t\tVAR_7--;\n\t\t\t\tVAR_2 (VAR_4);\n\t\t\t\tbreak;\n\t\t\t} else if (VAR_10 == 0xff) { /* COMMENT_1 */\n\t\t\t\tVAR_7 += 2;\n\t\t\t\tut8 VAR_12 = *(VAR_0->entry_table + VAR_7);\n\t\t\t\tVAR_7++;\n\t\t\t\tif (VAR_7 > VAR_0->ne_header->EntryTableLength) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tut16 VAR_13 = r_read_le16 (VAR_0->entry_table + VAR_7);\n\t\t\t\tif (VAR_12 > 0 && VAR_12 < VAR_0->ne_header->SegCount) {\n\t\t\t\t\tVAR_4->paddr = (ut64)VAR_0->segment_entries[VAR_12 - 1].offset * VAR_0->alignment + VAR_13;\n\t\t\t\t}\n\t\t\t} else { /* COMMENT_2 */\n\t\t\t\tif (VAR_7 + 2 >= VAR_0->ne_header->EntryTableLength) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tut16 VAR_14 = r_read_le16 (VAR_0->entry_table + VAR_7);\n\t\t\t\tif (VAR_10 < VAR_0->ne_header->SegCount) {\n\t\t\t\t\tVAR_4->paddr = (ut64)VAR_0->segment_entries[VAR_10 - 1].offset\n\t\t\t\t\t\t* VAR_0->alignment + VAR_14;\n\t\t\t\t}\n\t\t\t}\n\t\t\tVAR_7 += 2;\n\t\t\tr_list_append (VAR_1, VAR_4);\n\t\t}\n\t}\n\tr_list_free (VAR_3);\n\tVAR_0->entries = VAR_1;\n\treturn VAR_1;\n}",
  "func_graph_path": "radareorg/radare2/0a557045476a2969c7079aec9eeb29d02f2809c6/ne.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -56,14 +56,21 @@\n \t\t\t\toff += 2;\n \t\t\t\tut8 segnum = *(bin->entry_table + off);\n \t\t\t\toff++;\n-\t\t\t\tut16 segoff = *(ut16 *)(bin->entry_table + off);\n-\t\t\t\tif (segnum > 0) {\n+\t\t\t\tif (off > bin->ne_header->EntryTableLength) {\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n+\t\t\t\tut16 segoff = r_read_le16 (bin->entry_table + off);\n+\t\t\t\tif (segnum > 0 && segnum < bin->ne_header->SegCount) {\n \t\t\t\t\tentry->paddr = (ut64)bin->segment_entries[segnum - 1].offset * bin->alignment + segoff;\n \t\t\t\t}\n \t\t\t} else { // Fixed\n+\t\t\t\tif (off + 2 >= bin->ne_header->EntryTableLength) {\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n+\t\t\t\tut16 delta = r_read_le16 (bin->entry_table + off);\n \t\t\t\tif (bundle_type < bin->ne_header->SegCount) {\n \t\t\t\t\tentry->paddr = (ut64)bin->segment_entries[bundle_type - 1].offset\n-\t\t\t\t\t\t* bin->alignment + *(ut16 *)(bin->entry_table + off);\n+\t\t\t\t\t\t* bin->alignment + delta;\n \t\t\t\t}\n \t\t\t}\n \t\t\toff += 2;",
  "diff_line_info": {
    "deleted_lines": [
      "\t\t\t\tut16 segoff = *(ut16 *)(bin->entry_table + off);",
      "\t\t\t\tif (segnum > 0) {",
      "\t\t\t\t\t\t* bin->alignment + *(ut16 *)(bin->entry_table + off);"
    ],
    "added_lines": [
      "\t\t\t\tif (off > bin->ne_header->EntryTableLength) {",
      "\t\t\t\t\tbreak;",
      "\t\t\t\t}",
      "\t\t\t\tut16 segoff = r_read_le16 (bin->entry_table + off);",
      "\t\t\t\tif (segnum > 0 && segnum < bin->ne_header->SegCount) {",
      "\t\t\t\tif (off + 2 >= bin->ne_header->EntryTableLength) {",
      "\t\t\t\t\tbreak;",
      "\t\t\t\t}",
      "\t\t\t\tut16 delta = r_read_le16 (bin->entry_table + off);",
      "\t\t\t\t\t\t* bin->alignment + delta;"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/radareorg/radare2/pull/19944",
  "description": {
    "pr_info": {
      "title": "Fix oobread and unaligned casts in the NE entrypoint logic ##crash",
      "number": 19944
    },
    "comment": [
      "* Reported by @hmsec via huntr.dev\r\n* Reproducer: nepocaligns\r\n* BountyID: ec538fa4-06c6-4050-a141-f60153ddeaac\r\n\r\n<!--\r\nRead https://github.com/radareorg/radare2/blob/master/DEVELOPERS.md\r\n* PR title must be capitalized, concise and use ##tags\r\n* If the PR is fixing a ticket use 'Fix #1234 - ..' in the commit message\r\n* Follow the coding style, add tests and documentation if necessary\r\n-->\r\n\r\n- [ ] Mark this if you consider it ready to merge\r\n- [ ] I've added tests (optional)\r\n- [ ] I wrote some lines in the [book](https://github.com/radareorg/radare2book) (optional)\r\n\r\n**Description**\r\n\r\n<!-- explain your changes if necessary -->\r\n"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "The patch addresses buffer overflows and unaligned memory access, which are security issues. It includes boundary checks and safer functions to prevent crashes and potential exploits.\n\n**Final Classification:** Security Vulnerability Fix; **Confidence:** 0.95"
}