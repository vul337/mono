{
  "cve_id": "CVE-2018-1000652",
  "cwe_ids": [
    "CWE-611"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "JabRef/jabref",
  "commit_msg": "Fix importer vulnerability (#4240)\n\n* Fix importer vulnerability\r\nFixed issue #4229  where importer was vulnerable to XXE attacks by\r\ndisabling DTDs along with adding warning to logger if features are\r\nunavailable. fixes #4229\r\n\r\n* Fix minor code errors and logger optimization\r\nRemoved author line in class comment. Reworded CHANGLOG.md. Set\r\nDTD features to individual final static constants. Optimized\r\nlogger by parameterizing feature and error.\r\n\r\n* Rearrange import statments for project compatibility\r\n\r\n* Remove merge artefacts from changelog",
  "commit_hash": "89f855d76713b4cd25ac0830c719cd61c511851e",
  "git_url": "https://github.com/JabRef/jabref/commit/89f855d76713b4cd25ac0830c719cd61c511851e",
  "file_path": "src/main/java/org/jabref/logic/importer/fileformat/MsBibImporter.java",
  "func_name": "isRecognizedFormat",
  "func_before": "@Override\n    public boolean isRecognizedFormat(BufferedReader reader) throws IOException {\n        Objects.requireNonNull(reader);\n\n        /*\n            The correct behaviour is to return false if it is certain that the file is\n            not of the MsBib type, and true otherwise. Returning true is the safe choice\n            if not certain.\n         */\n        Document docin;\n        try {\n            DocumentBuilder dbuild = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n            dbuild.setErrorHandler(new ErrorHandler() {\n\n                @Override\n                public void warning(SAXParseException exception) throws SAXException {\n                    // ignore warnings\n                }\n\n                @Override\n                public void fatalError(SAXParseException exception) throws SAXException {\n                    throw exception;\n                }\n\n                @Override\n                public void error(SAXParseException exception) throws SAXException {\n                    throw exception;\n                }\n            });\n            docin = dbuild.parse(new InputSource(reader));\n        } catch (Exception e) {\n            return false;\n        }\n        return (docin == null) || docin.getDocumentElement().getTagName().contains(\"Sources\");\n    }",
  "abstract_func_before": "@Override\n    public boolean isRecognizedFormat(BufferedReader VAR_0) throws IOException {\n        VAR_1.requireNonNull(VAR_0);\n\n        /* COMMENT_0 */\n                                                                                      \n                                                                                        \n                           \n           \n        Document VAR_2;\n        try {\n            DocumentBuilder VAR_3 = VAR_4.newInstance().newDocumentBuilder();\n            VAR_3.setErrorHandler(new ErrorHandler() {\n\n                @Override\n                public void warning(SAXParseException VAR_5) throws SAXException {\n                    /* COMMENT_5 */\n                }\n\n                @Override\n                public void fatalError(SAXParseException VAR_5) throws SAXException {\n                    throw VAR_5;\n                }\n\n                @Override\n                public void error(SAXParseException VAR_5) throws SAXException {\n                    throw VAR_5;\n                }\n            });\n            VAR_2 = VAR_3.parse(new InputSource(VAR_0));\n        } catch (Exception VAR_6) {\n            return false;\n        }\n        return (VAR_2 == null) || VAR_2.getDocumentElement().getTagName().contains(\"Sources\");\n    }",
  "func_graph_path_before": "JabRef/jabref/89f855d76713b4cd25ac0830c719cd61c511851e/MsBibImporter.java/vul/before/0.json",
  "func": "@Override\n    public boolean isRecognizedFormat(BufferedReader reader) throws IOException {\n        Objects.requireNonNull(reader);\n\n        /*\n            The correct behavior is to return false if it is certain that the file is\n            not of the MsBib type, and true otherwise. Returning true is the safe choice\n            if not certain.\n         */\n        Document docin;\n        try {\n            DocumentBuilder dbuild = makeSafeDocBuilderFactory(DocumentBuilderFactory.newInstance()).newDocumentBuilder();\n            dbuild.setErrorHandler(new ErrorHandler() {\n\n                @Override\n                public void warning(SAXParseException exception) throws SAXException {\n                    // ignore warnings\n                }\n\n                @Override\n                public void fatalError(SAXParseException exception) throws SAXException {\n                    throw exception;\n                }\n\n                @Override\n                public void error(SAXParseException exception) throws SAXException {\n                    throw exception;\n                }\n            });\n\n            docin = dbuild.parse(new InputSource(reader));\n        } catch (Exception e) {\n            return false;\n        }\n        return (docin == null) || docin.getDocumentElement().getTagName().contains(\"Sources\");\n    }",
  "abstract_func": "@Override\n    public boolean isRecognizedFormat(BufferedReader VAR_0) throws IOException {\n        VAR_1.requireNonNull(VAR_0);\n\n        /* COMMENT_0 */\n                                                                                     \n                                                                                        \n                           \n           \n        Document VAR_2;\n        try {\n            DocumentBuilder VAR_3 = makeSafeDocBuilderFactory(VAR_4.newInstance()).newDocumentBuilder();\n            VAR_3.setErrorHandler(new ErrorHandler() {\n\n                @Override\n                public void warning(SAXParseException VAR_5) throws SAXException {\n                    /* COMMENT_5 */\n                }\n\n                @Override\n                public void fatalError(SAXParseException VAR_5) throws SAXException {\n                    throw VAR_5;\n                }\n\n                @Override\n                public void error(SAXParseException VAR_5) throws SAXException {\n                    throw VAR_5;\n                }\n            });\n\n            VAR_2 = VAR_3.parse(new InputSource(VAR_0));\n        } catch (Exception VAR_6) {\n            return false;\n        }\n        return (VAR_2 == null) || VAR_2.getDocumentElement().getTagName().contains(\"Sources\");\n    }",
  "func_graph_path": "JabRef/jabref/89f855d76713b4cd25ac0830c719cd61c511851e/MsBibImporter.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -3,13 +3,13 @@\n         Objects.requireNonNull(reader);\n \n         /*\n-            The correct behaviour is to return false if it is certain that the file is\n+            The correct behavior is to return false if it is certain that the file is\n             not of the MsBib type, and true otherwise. Returning true is the safe choice\n             if not certain.\n          */\n         Document docin;\n         try {\n-            DocumentBuilder dbuild = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n+            DocumentBuilder dbuild = makeSafeDocBuilderFactory(DocumentBuilderFactory.newInstance()).newDocumentBuilder();\n             dbuild.setErrorHandler(new ErrorHandler() {\n \n                 @Override\n@@ -27,6 +27,7 @@\n                     throw exception;\n                 }\n             });\n+\n             docin = dbuild.parse(new InputSource(reader));\n         } catch (Exception e) {\n             return false;",
  "diff_line_info": {
    "deleted_lines": [
      "            The correct behaviour is to return false if it is certain that the file is",
      "            DocumentBuilder dbuild = DocumentBuilderFactory.newInstance().newDocumentBuilder();"
    ],
    "added_lines": [
      "            The correct behavior is to return false if it is certain that the file is",
      "            DocumentBuilder dbuild = makeSafeDocBuilderFactory(DocumentBuilderFactory.newInstance()).newDocumentBuilder();",
      ""
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/JabRef/jabref/pull/4240",
  "description": {
    "pr_info": {
      "title": "Fix importer vulnerability",
      "number": 4240
    },
    "comment": [
      "<!-- \r\n\r\n-->\r\nFixed issue where importer was vulnerable to XXE attacks by\r\ndisabling DTDs. If feature is unavailable, warning is sent to logger and returns builderFactory at current state. Used [#4229](https://github.com/JabRef/jabref/issues/4229)\r\n\r\n----\r\n\r\n- [X] Change in CHANGELOG.md described\r\n- [ ] Tests created for changes\r\n- [X] Manually tested changed features in running JabRef\r\n- [ ] Screenshots added in PR description (for bigger UI changes)\r\n- [X] Ensured that [the git commit message is a good one](https://github.com/joelparkerhenderson/git_commit_message)\r\n- [X] Check documentation status (Issue created for outdated help page at [help.jabref.org](https://github.com/JabRef/help.jabref.org/issues)?)\r\n",
      "Thanks for your contribution\r\nI just resolved the conflict in the changelog, so that the build runs on Travis. Check the Continous Interation Travis output (just click on it, in case it fails) ",
      "Thanks for the feedback. Yes, I agree with all of the fixes. Sorry about the two commits back to back. The first one stated it did not go through on my end as I needed to update HEAD. Also, I am not sure why I am failing both tests. the CI test seems to be related to GUI errors while the Codacy fail is from the extra space before importing items from slf4j.",
      "The Travis CI log raises a check style issue, so just some code formatting and the wrong import order. Although it might seem annoying, but it serves the purpose to have consistent code style and to avoid unnecessary conflicts between files \r\n\r\n Both for intellij and Eclipse we provide the correct code format layout. In Eclipse hit ctrl + f to format and ctrl + o for the import order fix ",
      "No I agree. The project should be uniform in import and code style as it would look a mess without. Pushed the changes. "
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.95"
}