{
  "cve_id": "CVE-2022-25640",
  "cwe_ids": [
    "CWE-295"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:N/I:P/A:N",
  "cvss_is_v3": false,
  "repo_name": "wolfSSL/wolfssl",
  "commit_msg": "Improve the client certificate checking logic. Make sure calling `wolfSSL_CTX_mutual_auth` is also checked.",
  "commit_hash": "3cdb1c639da94a9dc8c75590d0ec475e7f27c226",
  "git_url": "https://github.com/wolfSSL/wolfssl/commit/3cdb1c639da94a9dc8c75590d0ec475e7f27c226",
  "file_path": "src/internal.c",
  "func_name": "DoCertFatalAlert",
  "func_before": "static void DoCertFatalAlert(WOLFSSL* ssl, int ret)\n{\n    int alertWhy;\n    if (ssl == NULL || ret == 0) {\n        return;\n    }\n    WOLFSSL_ERROR(ret);\n\n    /* Determine alert reason */\n    alertWhy = bad_certificate;\n    if (ret == ASN_AFTER_DATE_E || ret == ASN_BEFORE_DATE_E) {\n        alertWhy = certificate_expired;\n    } else if (ret == ASN_NO_SIGNER_E) {\n        alertWhy = unknown_ca;\n    }\n#if (defined(OPENSSL_ALL) || defined(WOLFSSL_APACHE_HTTPD))\n    else if (ret == CRL_CERT_REVOKED) {\n        alertWhy = certificate_revoked;\n    }\n#endif\n    else if (ret == NO_PEER_CERT) {\n#ifdef WOLFSSL_TLS13\n        if (ssl->options.tls1_3) {\n            alertWhy = certificate_required;\n        }\n        else\n#endif\n        {\n            alertWhy = handshake_failure;\n        }\n    }\n\n    /* send fatal alert and mark connection closed */\n    SendAlert(ssl, alert_fatal, alertWhy); /* try to send */\n    ssl->options.isClosed = 1;\n}",
  "abstract_func_before": "static void DoCertFatalAlert(WOLFSSL* VAR_0, int VAR_1)\n{\n    int VAR_2;\n    if (VAR_0 == NULL || VAR_1 == 0) {\n        return;\n    }\n    WOLFSSL_ERROR(VAR_1);\n\n    /* COMMENT_0 */\n    VAR_2 = VAR_3;\n    if (VAR_1 == VAR_4 || VAR_1 == VAR_5) {\n        VAR_2 = VAR_6;\n    } else if (VAR_1 == VAR_7) {\n        VAR_2 = VAR_8;\n    }\n#if (defined(VAR_9) || defined(VAR_10))\n    else if (ret == VAR_11) {\n        VAR_2 = VAR_12;\n    }\n#endif\n    else if (ret == VAR_13) {\n#ifdef VAR_14\n        if (VAR_0->options.tls1_3) {\n            VAR_2 = VAR_15;\n        }\n        else\n#endif\n        {\n            VAR_2 = VAR_16;\n        }\n    }\n\n    /* COMMENT_1 */\n    SendAlert(VAR_0, VAR_17, VAR_2); /* COMMENT_2 */\n    VAR_0->options.isClosed = 1;\n}",
  "func_graph_path_before": "wolfSSL/wolfssl/3cdb1c639da94a9dc8c75590d0ec475e7f27c226/internal.c/vul/before/0.json",
  "func": "void DoCertFatalAlert(WOLFSSL* ssl, int ret)\n{\n    int alertWhy;\n    if (ssl == NULL || ret == 0) {\n        return;\n    }\n    WOLFSSL_ERROR(ret);\n\n    /* Determine alert reason */\n    alertWhy = bad_certificate;\n    if (ret == ASN_AFTER_DATE_E || ret == ASN_BEFORE_DATE_E) {\n        alertWhy = certificate_expired;\n    } else if (ret == ASN_NO_SIGNER_E) {\n        alertWhy = unknown_ca;\n    }\n#if (defined(OPENSSL_ALL) || defined(WOLFSSL_APACHE_HTTPD))\n    else if (ret == CRL_CERT_REVOKED) {\n        alertWhy = certificate_revoked;\n    }\n#endif\n    else if (ret == NO_PEER_CERT) {\n#ifdef WOLFSSL_TLS13\n        if (ssl->options.tls1_3) {\n            alertWhy = certificate_required;\n        }\n        else\n#endif\n        {\n            alertWhy = handshake_failure;\n        }\n    }\n\n    /* send fatal alert and mark connection closed */\n    SendAlert(ssl, alert_fatal, alertWhy); /* try to send */\n    ssl->options.isClosed = 1;\n}",
  "abstract_func": "void DoCertFatalAlert(WOLFSSL* VAR_0, int VAR_1)\n{\n    int VAR_2;\n    if (VAR_0 == NULL || VAR_1 == 0) {\n        return;\n    }\n    WOLFSSL_ERROR(VAR_1);\n\n    /* COMMENT_0 */\n    VAR_2 = VAR_3;\n    if (VAR_1 == VAR_4 || VAR_1 == VAR_5) {\n        VAR_2 = VAR_6;\n    } else if (VAR_1 == VAR_7) {\n        VAR_2 = VAR_8;\n    }\n#if (defined(VAR_9) || defined(VAR_10))\n    else if (ret == VAR_11) {\n        VAR_2 = VAR_12;\n    }\n#endif\n    else if (ret == VAR_13) {\n#ifdef VAR_14\n        if (VAR_0->options.tls1_3) {\n            VAR_2 = VAR_15;\n        }\n        else\n#endif\n        {\n            VAR_2 = VAR_16;\n        }\n    }\n\n    /* COMMENT_1 */\n    SendAlert(VAR_0, VAR_17, VAR_2); /* COMMENT_2 */\n    VAR_0->options.isClosed = 1;\n}",
  "func_graph_path": "wolfSSL/wolfssl/3cdb1c639da94a9dc8c75590d0ec475e7f27c226/internal.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,4 +1,4 @@\n-static void DoCertFatalAlert(WOLFSSL* ssl, int ret)\n+void DoCertFatalAlert(WOLFSSL* ssl, int ret)\n {\n     int alertWhy;\n     if (ssl == NULL || ret == 0) {",
  "diff_line_info": {
    "deleted_lines": [
      "static void DoCertFatalAlert(WOLFSSL* ssl, int ret)"
    ],
    "added_lines": [
      "void DoCertFatalAlert(WOLFSSL* ssl, int ret)"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/wolfSSL/wolfssl/pull/4831",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/wolfSSL/wolfssl/pull/4831: 403 Client Error: Forbidden for url: https://api.github.com/repos/wolfSSL/wolfssl/pulls/4831",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.9  \n\nThe patch addresses improvements in client certificate checking and mutual authentication, indicating it's a security fix."
}