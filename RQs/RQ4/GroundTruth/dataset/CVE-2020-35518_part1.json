{
  "cve_id": "CVE-2020-35518",
  "cwe_ids": [
    "CWE-203"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:N/A:N",
  "cvss_is_v3": false,
  "repo_name": "389ds/389-ds-base",
  "commit_msg": "Issue 4480 - Unexpected info returned to ldap request (#4491)\n\nBug description:\r\n\tIf the bind entry does not exist, the bind result info\r\n        reports that 'No such entry'. It should not give any\r\n        information if the target entry exists or not\r\n\r\nFix description:\r\n\tDoes not return any additional information during a bind\r\n\r\nrelates: https://github.com/389ds/389-ds-base/issues/4480\r\n\r\nReviewed by: William Brown, Viktor Ashirov, Mark Reynolds (thank you all)\r\n\r\nPlatforms tested:  F31",
  "commit_hash": "cc0f69283abc082488824702dae485b8eae938bc",
  "git_url": "https://github.com/389ds/389-ds-base/commit/cc0f69283abc082488824702dae485b8eae938bc",
  "file_path": "ldap/servers/slapd/back-ldbm/ldbm_config.c",
  "func_name": "ldbm_config_search_entry_callback",
  "func_before": "int\nldbm_config_search_entry_callback(Slapi_PBlock *pb __attribute__((unused)),\n                                  Slapi_Entry *e,\n                                  Slapi_Entry *entryAfter __attribute__((unused)),\n                                  int *returncode,\n                                  char *returntext,\n                                  void *arg)\n{\n    char buf[BUFSIZ];\n    struct berval *vals[2];\n    struct berval val;\n    struct ldbminfo *li = (struct ldbminfo *)arg;\n    config_info *config;\n    int scope;\n\n    vals[0] = &val;\n    vals[1] = NULL;\n\n    returntext[0] = '\\0';\n\n    PR_Lock(li->li_config_mutex);\n\n    if (pb) {\n        slapi_pblock_get(pb, SLAPI_SEARCH_SCOPE, &scope);\n        if (scope == LDAP_SCOPE_BASE) {\n            char **attrs = NULL;\n            slapi_pblock_get(pb, SLAPI_SEARCH_ATTRS, &attrs);\n            if (attrs) {\n                for (size_t i = 0; attrs[i]; i++) {\n                    if (ldbm_config_moved_attr(attrs[i])) {\n                        slapi_pblock_set(pb, SLAPI_PB_RESULT_TEXT, \"at least one required attribute has been moved to the BDB scecific configuration entry\");\n                        break;\n                    }\n                }\n            }\n        \n        }\n    }\n\n    for (config = ldbm_config; config->config_name != NULL; config++) {\n        /* Go through the ldbm_config table and fill in the entry. */\n\n        if (!(config->config_flags & (CONFIG_FLAG_ALWAYS_SHOW | CONFIG_FLAG_PREVIOUSLY_SET))) {\n            /* This config option shouldn't be shown */\n            continue;\n        }\n\n        ldbm_config_get((void *)li, config, buf);\n\n        val.bv_val = buf;\n        val.bv_len = strlen(buf);\n        slapi_entry_attr_replace(e, config->config_name, vals);\n    }\n\n    PR_Unlock(li->li_config_mutex);\n\n    *returncode = LDAP_SUCCESS;\n    return SLAPI_DSE_CALLBACK_OK;\n}",
  "abstract_func_before": "int\nldbm_config_search_entry_callback(Slapi_PBlock *VAR_0 __attribute__((unused)),\n                                  Slapi_Entry *VAR_1,\n                                  Slapi_Entry *VAR_2 __attribute__((unused)),\n                                  int *VAR_3,\n                                  char *VAR_4,\n                                  void *VAR_5)\n{\n    char VAR_6[VAR_7];\n    struct berval *VAR_8[2];\n    struct berval VAR_9;\n    struct ldbminfo *VAR_10 = (struct ldbminfo *)VAR_5;\n    config_info *VAR_11;\n    int VAR_12;\n\n    VAR_8[0] = &VAR_9;\n    VAR_8[1] = NULL;\n\n    VAR_4[0] = '\\0';\n\n    PR_Lock(VAR_10->li_config_mutex);\n\n    if (VAR_0) {\n        slapi_pblock_get(VAR_0, VAR_13, &VAR_12);\n        if (VAR_12 == VAR_14) {\n            char **VAR_15 = NULL;\n            slapi_pblock_get(VAR_0, VAR_16, &VAR_15);\n            if (VAR_15) {\n                for (size_t VAR_17 = 0; VAR_15[VAR_17]; VAR_17++) {\n                    if (ldbm_config_moved_attr(VAR_15[VAR_17])) {\n                        slapi_pblock_set(VAR_0, VAR_18, \"at least one required attribute has been moved to the BDB scecific configuration entry\");\n                        break;\n                    }\n                }\n            }\n        \n        }\n    }\n\n    for (VAR_11 = VAR_19; VAR_11->config_name != NULL; VAR_11++) {\n        /* COMMENT_0 */\n\n        if (!(VAR_11->config_flags & (VAR_20 | VAR_21))) {\n            /* COMMENT_1 */\n            continue;\n        }\n\n        ldbm_config_get((void *)VAR_10, VAR_11, VAR_6);\n\n        VAR_9.bv_val = VAR_6;\n        VAR_9.bv_len = strlen(VAR_6);\n        slapi_entry_attr_replace(VAR_1, VAR_11->config_name, VAR_8);\n    }\n\n    PR_Unlock(VAR_10->li_config_mutex);\n\n    *VAR_3 = VAR_22;\n    return VAR_23;\n}",
  "func_graph_path_before": "389ds/389-ds-base/cc0f69283abc082488824702dae485b8eae938bc/ldbm_config.c/vul/before/0.json",
  "func": "int\nldbm_config_search_entry_callback(Slapi_PBlock *pb __attribute__((unused)),\n                                  Slapi_Entry *e,\n                                  Slapi_Entry *entryAfter __attribute__((unused)),\n                                  int *returncode,\n                                  char *returntext,\n                                  void *arg)\n{\n    char buf[BUFSIZ];\n    struct berval *vals[2];\n    struct berval val;\n    struct ldbminfo *li = (struct ldbminfo *)arg;\n    config_info *config;\n    int scope;\n\n    vals[0] = &val;\n    vals[1] = NULL;\n\n    returntext[0] = '\\0';\n\n    PR_Lock(li->li_config_mutex);\n\n    if (pb) {\n        slapi_pblock_get(pb, SLAPI_SEARCH_SCOPE, &scope);\n        if (scope == LDAP_SCOPE_BASE) {\n            char **attrs = NULL;\n            slapi_pblock_get(pb, SLAPI_SEARCH_ATTRS, &attrs);\n            if (attrs) {\n                for (size_t i = 0; attrs[i]; i++) {\n                    if (ldbm_config_moved_attr(attrs[i])) {\n                        slapi_pblock_set(pb, SLAPI_RESULT_TEXT, \"at least one required attribute has been moved to the BDB scecific configuration entry\");\n                        break;\n                    }\n                }\n            }\n        \n        }\n    }\n\n    for (config = ldbm_config; config->config_name != NULL; config++) {\n        /* Go through the ldbm_config table and fill in the entry. */\n\n        if (!(config->config_flags & (CONFIG_FLAG_ALWAYS_SHOW | CONFIG_FLAG_PREVIOUSLY_SET))) {\n            /* This config option shouldn't be shown */\n            continue;\n        }\n\n        ldbm_config_get((void *)li, config, buf);\n\n        val.bv_val = buf;\n        val.bv_len = strlen(buf);\n        slapi_entry_attr_replace(e, config->config_name, vals);\n    }\n\n    PR_Unlock(li->li_config_mutex);\n\n    *returncode = LDAP_SUCCESS;\n    return SLAPI_DSE_CALLBACK_OK;\n}",
  "abstract_func": "int\nldbm_config_search_entry_callback(Slapi_PBlock *VAR_0 __attribute__((unused)),\n                                  Slapi_Entry *VAR_1,\n                                  Slapi_Entry *VAR_2 __attribute__((unused)),\n                                  int *VAR_3,\n                                  char *VAR_4,\n                                  void *VAR_5)\n{\n    char VAR_6[VAR_7];\n    struct berval *VAR_8[2];\n    struct berval VAR_9;\n    struct ldbminfo *VAR_10 = (struct ldbminfo *)VAR_5;\n    config_info *VAR_11;\n    int VAR_12;\n\n    VAR_8[0] = &VAR_9;\n    VAR_8[1] = NULL;\n\n    VAR_4[0] = '\\0';\n\n    PR_Lock(VAR_10->li_config_mutex);\n\n    if (VAR_0) {\n        slapi_pblock_get(VAR_0, VAR_13, &VAR_12);\n        if (VAR_12 == VAR_14) {\n            char **VAR_15 = NULL;\n            slapi_pblock_get(VAR_0, VAR_16, &VAR_15);\n            if (VAR_15) {\n                for (size_t VAR_17 = 0; VAR_15[VAR_17]; VAR_17++) {\n                    if (ldbm_config_moved_attr(VAR_15[VAR_17])) {\n                        slapi_pblock_set(VAR_0, VAR_18, \"at least one required attribute has been moved to the BDB scecific configuration entry\");\n                        break;\n                    }\n                }\n            }\n        \n        }\n    }\n\n    for (VAR_11 = VAR_19; VAR_11->config_name != NULL; VAR_11++) {\n        /* COMMENT_0 */\n\n        if (!(VAR_11->config_flags & (VAR_20 | VAR_21))) {\n            /* COMMENT_1 */\n            continue;\n        }\n\n        ldbm_config_get((void *)VAR_10, VAR_11, VAR_6);\n\n        VAR_9.bv_val = VAR_6;\n        VAR_9.bv_len = strlen(VAR_6);\n        slapi_entry_attr_replace(VAR_1, VAR_11->config_name, VAR_8);\n    }\n\n    PR_Unlock(VAR_10->li_config_mutex);\n\n    *VAR_3 = VAR_22;\n    return VAR_23;\n}",
  "func_graph_path": "389ds/389-ds-base/cc0f69283abc082488824702dae485b8eae938bc/ldbm_config.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -28,7 +28,7 @@\n             if (attrs) {\n                 for (size_t i = 0; attrs[i]; i++) {\n                     if (ldbm_config_moved_attr(attrs[i])) {\n-                        slapi_pblock_set(pb, SLAPI_PB_RESULT_TEXT, \"at least one required attribute has been moved to the BDB scecific configuration entry\");\n+                        slapi_pblock_set(pb, SLAPI_RESULT_TEXT, \"at least one required attribute has been moved to the BDB scecific configuration entry\");\n                         break;\n                     }\n                 }",
  "diff_line_info": {
    "deleted_lines": [
      "                        slapi_pblock_set(pb, SLAPI_PB_RESULT_TEXT, \"at least one required attribute has been moved to the BDB scecific configuration entry\");"
    ],
    "added_lines": [
      "                        slapi_pblock_set(pb, SLAPI_RESULT_TEXT, \"at least one required attribute has been moved to the BDB scecific configuration entry\");"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/389ds/389-ds-base/pull/4491",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/389ds/389-ds-base/pull/4491: 403 Client Error: Forbidden for url: https://api.github.com/repos/389ds/389-ds-base/pulls/4491",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.9  \n\n**Step-by-Step Explanation:**\n\n1. **Issue Analysis:** The URL indicates an issue about LDAP returning information that should be hidden. The fix stops returning details on bind entry existence, which prevents potential information disclosure.\n\n2. **Code Change:** The modification changes the result text sent during a bind request, which is a direct security measure against info disclosure.\n\nWhile there’s no explicit CVE/CWE reference, the intent and code change strongly suggest a security fix, hence the high confidence."
}