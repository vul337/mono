{
  "cve_id": "CVE-2023-48704",
  "cwe_ids": [
    "CWE-787"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
  "cvss_is_v3": true,
  "repo_name": "ClickHouse",
  "commit_msg": "Fix buffer overflow in Gorilla codec",
  "commit_hash": "a6b659cf04f18cf28d508809ed53754bf6e5c0b2",
  "git_url": "https://github.com/ClickHouse/ClickHouse/commit/a6b659cf04f18cf28d508809ed53754bf6e5c0b2",
  "file_path": "src/Compression/CompressionCodecGorilla.cpp",
  "func_name": "CompressionCodecGorilla::doDecompressData",
  "func_before": "void CompressionCodecGorilla::doDecompressData(const char * source, UInt32 source_size, char * dest, UInt32 uncompressed_size) const\n{\n    if (source_size < 2)\n        throw Exception(ErrorCodes::CANNOT_DECOMPRESS, \"Cannot decompress Gorilla-encoded data. File has wrong header\");\n\n    UInt8 bytes_size = source[0];\n\n    if (bytes_size == 0)\n        throw Exception(ErrorCodes::CANNOT_DECOMPRESS, \"Cannot decompress Gorilla-encoded data. File has wrong header\");\n\n    UInt8 bytes_to_skip = uncompressed_size % bytes_size;\n\n    if (static_cast<UInt32>(2 + bytes_to_skip) > source_size)\n        throw Exception(ErrorCodes::CANNOT_DECOMPRESS, \"Cannot decompress Gorilla-encoded data. File has wrong header\");\n\n    memcpy(dest, &source[2], bytes_to_skip);\n    UInt32 source_size_no_header = source_size - bytes_to_skip - 2;\n    switch (bytes_size) // NOLINT(bugprone-switch-missing-default-case)\n    {\n    case 1:\n        decompressDataForType<UInt8>(&source[2 + bytes_to_skip], source_size_no_header, &dest[bytes_to_skip]);\n        break;\n    case 2:\n        decompressDataForType<UInt16>(&source[2 + bytes_to_skip], source_size_no_header, &dest[bytes_to_skip]);\n        break;\n    case 4:\n        decompressDataForType<UInt32>(&source[2 + bytes_to_skip], source_size_no_header, &dest[bytes_to_skip]);\n        break;\n    case 8:\n        decompressDataForType<UInt64>(&source[2 + bytes_to_skip], source_size_no_header, &dest[bytes_to_skip]);\n        break;\n    }\n}",
  "abstract_func_before": "void CompressionCodecGorilla::doDecompressData(const char * VAR_0, UInt32 VAR_1, char * VAR_2, UInt32 VAR_3) const\n{\n    if (VAR_1 < 2)\n        throw Exception(ErrorCodes::CANNOT_DECOMPRESS, \"Cannot decompress Gorilla-encoded data. File has wrong header\");\n\n    UInt8 VAR_4 = VAR_0[0];\n\n    if (VAR_4 == 0)\n        throw Exception(ErrorCodes::CANNOT_DECOMPRESS, \"Cannot decompress Gorilla-encoded data. File has wrong header\");\n\n    UInt8 VAR_5 = VAR_3 % VAR_4;\n\n    if (VAR_6<UInt32>(2 + VAR_5) > VAR_1)\n        throw Exception(ErrorCodes::CANNOT_DECOMPRESS, \"Cannot decompress Gorilla-encoded data. File has wrong header\");\n\n    memcpy(VAR_2, &VAR_0[2], VAR_5);\n    UInt32 VAR_7 = VAR_1 - VAR_5 - 2;\n    switch (VAR_4) /* COMMENT_0 */\n    {\n    case 1:\n        VAR_8<UInt8>(&VAR_0[2 + VAR_5], VAR_7, &VAR_2[VAR_5]);\n        break;\n    case 2:\n        VAR_8<UInt16>(&VAR_0[2 + VAR_5], VAR_7, &VAR_2[VAR_5]);\n        break;\n    case 4:\n        VAR_8<UInt32>(&VAR_0[2 + VAR_5], VAR_7, &VAR_2[VAR_5]);\n        break;\n    case 8:\n        VAR_8<UInt64>(&VAR_0[2 + VAR_5], VAR_7, &VAR_2[VAR_5]);\n        break;\n    }\n}",
  "func_graph_path_before": "ClickHouse/a6b659cf04f18cf28d508809ed53754bf6e5c0b2/CompressionCodecGorilla.cpp/vul/before/1.json",
  "func": "void CompressionCodecGorilla::doDecompressData(const char * source, UInt32 source_size, char * dest, UInt32 uncompressed_size) const\n{\n    if (source_size < 2)\n        throw Exception(ErrorCodes::CANNOT_DECOMPRESS, \"Cannot decompress Gorilla-encoded data. File has wrong header\");\n\n    UInt8 bytes_size = source[0];\n\n    if (bytes_size == 0)\n        throw Exception(ErrorCodes::CANNOT_DECOMPRESS, \"Cannot decompress Gorilla-encoded data. File has wrong header\");\n\n    UInt8 bytes_to_skip = uncompressed_size % bytes_size;\n\n    if (static_cast<UInt32>(2 + bytes_to_skip) > source_size)\n        throw Exception(ErrorCodes::CANNOT_DECOMPRESS, \"Cannot decompress Gorilla-encoded data. File has wrong header\");\n\n    if (bytes_to_skip >= uncompressed_size)\n        throw Exception(ErrorCodes::CANNOT_DECOMPRESS, \"Cannot decompress Gorilla-encoded data. File has wrong header\");\n\n    memcpy(dest, &source[2], bytes_to_skip);\n    UInt32 source_size_no_header = source_size - bytes_to_skip - 2;\n    UInt32 uncompressed_size_left = uncompressed_size - bytes_to_skip;\n    switch (bytes_size) // NOLINT(bugprone-switch-missing-default-case)\n    {\n    case 1:\n        decompressDataForType<UInt8>(&source[2 + bytes_to_skip], source_size_no_header, &dest[bytes_to_skip], uncompressed_size_left);\n        break;\n    case 2:\n        decompressDataForType<UInt16>(&source[2 + bytes_to_skip], source_size_no_header, &dest[bytes_to_skip], uncompressed_size_left);\n        break;\n    case 4:\n        decompressDataForType<UInt32>(&source[2 + bytes_to_skip], source_size_no_header, &dest[bytes_to_skip], uncompressed_size_left);\n        break;\n    case 8:\n        decompressDataForType<UInt64>(&source[2 + bytes_to_skip], source_size_no_header, &dest[bytes_to_skip], uncompressed_size_left);\n        break;\n    default:\n        throw Exception(ErrorCodes::CANNOT_DECOMPRESS, \"Cannot decompress Gorilla-encoded data. File has wrong header\");\n    }\n}",
  "abstract_func": "void CompressionCodecGorilla::doDecompressData(const char * VAR_0, UInt32 VAR_1, char * VAR_2, UInt32 VAR_3) const\n{\n    if (VAR_1 < 2)\n        throw Exception(ErrorCodes::CANNOT_DECOMPRESS, \"Cannot decompress Gorilla-encoded data. File has wrong header\");\n\n    UInt8 VAR_4 = VAR_0[0];\n\n    if (VAR_4 == 0)\n        throw Exception(ErrorCodes::CANNOT_DECOMPRESS, \"Cannot decompress Gorilla-encoded data. File has wrong header\");\n\n    UInt8 VAR_5 = VAR_3 % VAR_4;\n\n    if (VAR_6<UInt32>(2 + VAR_5) > VAR_1)\n        throw Exception(ErrorCodes::CANNOT_DECOMPRESS, \"Cannot decompress Gorilla-encoded data. File has wrong header\");\n\n    if (VAR_5 >= VAR_3)\n        throw Exception(ErrorCodes::CANNOT_DECOMPRESS, \"Cannot decompress Gorilla-encoded data. File has wrong header\");\n\n    memcpy(VAR_2, &VAR_0[2], VAR_5);\n    UInt32 VAR_7 = VAR_1 - VAR_5 - 2;\n    UInt32 VAR_8 = VAR_3 - VAR_5;\n    switch (VAR_4) /* COMMENT_0 */\n    {\n    case 1:\n        VAR_9<UInt8>(&VAR_0[2 + VAR_5], VAR_7, &VAR_2[VAR_5], VAR_8);\n        break;\n    case 2:\n        VAR_9<UInt16>(&VAR_0[2 + VAR_5], VAR_7, &VAR_2[VAR_5], VAR_8);\n        break;\n    case 4:\n        VAR_9<UInt32>(&VAR_0[2 + VAR_5], VAR_7, &VAR_2[VAR_5], VAR_8);\n        break;\n    case 8:\n        VAR_9<UInt64>(&VAR_0[2 + VAR_5], VAR_7, &VAR_2[VAR_5], VAR_8);\n        break;\n    default:\n        throw Exception(ErrorCodes::CANNOT_DECOMPRESS, \"Cannot decompress Gorilla-encoded data. File has wrong header\");\n    }\n}",
  "func_graph_path": "ClickHouse/a6b659cf04f18cf28d508809ed53754bf6e5c0b2/CompressionCodecGorilla.cpp/vul/after/1.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -13,21 +13,27 @@\n     if (static_cast<UInt32>(2 + bytes_to_skip) > source_size)\n         throw Exception(ErrorCodes::CANNOT_DECOMPRESS, \"Cannot decompress Gorilla-encoded data. File has wrong header\");\n \n+    if (bytes_to_skip >= uncompressed_size)\n+        throw Exception(ErrorCodes::CANNOT_DECOMPRESS, \"Cannot decompress Gorilla-encoded data. File has wrong header\");\n+\n     memcpy(dest, &source[2], bytes_to_skip);\n     UInt32 source_size_no_header = source_size - bytes_to_skip - 2;\n+    UInt32 uncompressed_size_left = uncompressed_size - bytes_to_skip;\n     switch (bytes_size) // NOLINT(bugprone-switch-missing-default-case)\n     {\n     case 1:\n-        decompressDataForType<UInt8>(&source[2 + bytes_to_skip], source_size_no_header, &dest[bytes_to_skip]);\n+        decompressDataForType<UInt8>(&source[2 + bytes_to_skip], source_size_no_header, &dest[bytes_to_skip], uncompressed_size_left);\n         break;\n     case 2:\n-        decompressDataForType<UInt16>(&source[2 + bytes_to_skip], source_size_no_header, &dest[bytes_to_skip]);\n+        decompressDataForType<UInt16>(&source[2 + bytes_to_skip], source_size_no_header, &dest[bytes_to_skip], uncompressed_size_left);\n         break;\n     case 4:\n-        decompressDataForType<UInt32>(&source[2 + bytes_to_skip], source_size_no_header, &dest[bytes_to_skip]);\n+        decompressDataForType<UInt32>(&source[2 + bytes_to_skip], source_size_no_header, &dest[bytes_to_skip], uncompressed_size_left);\n         break;\n     case 8:\n-        decompressDataForType<UInt64>(&source[2 + bytes_to_skip], source_size_no_header, &dest[bytes_to_skip]);\n+        decompressDataForType<UInt64>(&source[2 + bytes_to_skip], source_size_no_header, &dest[bytes_to_skip], uncompressed_size_left);\n         break;\n+    default:\n+        throw Exception(ErrorCodes::CANNOT_DECOMPRESS, \"Cannot decompress Gorilla-encoded data. File has wrong header\");\n     }\n }",
  "diff_line_info": {
    "deleted_lines": [
      "        decompressDataForType<UInt8>(&source[2 + bytes_to_skip], source_size_no_header, &dest[bytes_to_skip]);",
      "        decompressDataForType<UInt16>(&source[2 + bytes_to_skip], source_size_no_header, &dest[bytes_to_skip]);",
      "        decompressDataForType<UInt32>(&source[2 + bytes_to_skip], source_size_no_header, &dest[bytes_to_skip]);",
      "        decompressDataForType<UInt64>(&source[2 + bytes_to_skip], source_size_no_header, &dest[bytes_to_skip]);"
    ],
    "added_lines": [
      "    if (bytes_to_skip >= uncompressed_size)",
      "        throw Exception(ErrorCodes::CANNOT_DECOMPRESS, \"Cannot decompress Gorilla-encoded data. File has wrong header\");",
      "",
      "    UInt32 uncompressed_size_left = uncompressed_size - bytes_to_skip;",
      "        decompressDataForType<UInt8>(&source[2 + bytes_to_skip], source_size_no_header, &dest[bytes_to_skip], uncompressed_size_left);",
      "        decompressDataForType<UInt16>(&source[2 + bytes_to_skip], source_size_no_header, &dest[bytes_to_skip], uncompressed_size_left);",
      "        decompressDataForType<UInt32>(&source[2 + bytes_to_skip], source_size_no_header, &dest[bytes_to_skip], uncompressed_size_left);",
      "        decompressDataForType<UInt64>(&source[2 + bytes_to_skip], source_size_no_header, &dest[bytes_to_skip], uncompressed_size_left);",
      "    default:",
      "        throw Exception(ErrorCodes::CANNOT_DECOMPRESS, \"Cannot decompress Gorilla-encoded data. File has wrong header\");"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/ClickHouse/ClickHouse/pull/57107",
  "description": {
    "pr_info": {
      "title": "Fix buffer overflow in Gorilla codec",
      "number": 57107
    },
    "comment": [
      "### Changelog category (leave one):\r\n- Bug Fix (user-visible misbehavior in an official stable release)\r\n\r\n\r\n### Changelog entry (a user-readable short description of the changes that goes to CHANGELOG.md):\r\nFix crash due to buffer overflow while decompressing malformed data using `Gorilla` codec. This issue was found with [ClickHouse Bug Bounty Program](https://github.com/ClickHouse/ClickHouse/issues/38986) by https://twitter.com/malacupa\r\n",
      "<!-- automatic status comment for PR #57107 from evillique/ClickHouse:gix-gorilla-overflow-issue -->\n*This is an automated comment for commit 761b55ccf4e2a4cd449381fa5742face4c256001 with description of existing statuses. It's updated for the latest CI running*\n\n[❌ Click here](https://s3.amazonaws.com/clickhouse-test-reports/57107/761b55ccf4e2a4cd449381fa5742face4c256001/ci_running.html) to open a full report in a separate page\n\n<details><summary>Successful checks</summary>\n<table>\n<thead><tr><th>Check name</th><th>Description</th><th>Status</th></tr></thead>\n<tbody>\n<tr><td>AST fuzzer</td><td>Runs randomly generated queries to catch program errors. The build type is optionally given in parenthesis. If it fails, ask a maintainer for help</td><td><a href=\"https://s3.amazonaws.com/clickhouse-test-reports/57107/761b55ccf4e2a4cd449381fa5742face4c256001/fuzzer_astfuzzerasan/report.html\">✅ success</a></td></tr>\n<tr><td>Bugfix validate check</td><td>Checks that either a new test (functional or integration) or there some changed tests that fail with the binary built on master branch</td><td><a href=\"https://s3.amazonaws.com/clickhouse-test-reports/57107/761b55ccf4e2a4cd449381fa5742face4c256001/bugfix_validate_check.html\">✅ success</a></td></tr>\n<tr><td>CI running</td><td>A meta-check that indicates the running CI. Normally, it's in <b>success</b> or <b>pending</b> state. The failed status indicates some problems with the PR</td><td><a href=\"https://s3.amazonaws.com/clickhouse-test-reports/57107/761b55ccf4e2a4cd449381fa5742face4c256001/ci_running.html\">✅ success</a></td></tr>\n<tr><td>ClickHouse build check</td><td>Builds ClickHouse in various configurations for use in further steps. You have to fix the builds that fail. Build logs often has enough information to fix the error, but you might have to reproduce the failure locally. The <b>cmake</b> options can be found in the build log, grepping for <b>cmake</b>. Use these options and follow the <a href=\"https://clickhouse.com/docs/en/development/build\">general build process</a></td><td><a href=\"https://s3.amazonaws.com/clickhouse-test-reports/57107/761b55ccf4e2a4cd449381fa5742face4c256001/clickhouse_build_check/report.html\">✅ success</a></td></tr>\n<tr><td>Compatibility check</td><td>Checks that <b>clickhouse</b> binary runs on distributions with old libc versions. If it fails, ask a maintainer for help</td><td><a href=\"https://s3.amazonaws.com/clickhouse-test-reports/57107/761b55ccf4e2a4cd449381fa5742face4c256001/compatibility_check__aarch64_.html\">✅ success</a></td></tr>\n<tr><td>Docker image for servers</td><td>The check to build and optionally push the mentioned image to docker hub</td><td><a href=\"https://s3.amazonaws.com/clickhouse-test-reports/57107/761b55ccf4e2a4cd449381fa5742face4c256001/docker_image_clickhouse_clickhouse-keeper_building_check.html\">✅ success</a></td></tr>\n<tr><td>Fast test</td><td>Normally this is the first check that is ran for a PR. It builds ClickHouse and runs most of <a href=\"https://clickhouse.com/docs/en/development/tests#functional-tests\">stateless functional tests</a>, omitting some. If it fails, further checks are not started until it is fixed. Look at the report to see which tests fail, then reproduce the failure locally as described <a href=\"https://clickhouse.com/docs/en/development/tests#functional-test-locally\">here</a></td><td><a href=\"https://s3.amazonaws.com/clickhouse-test-reports/57107/761b55ccf4e2a4cd449381fa5742face4c256001/fast_test.html\">✅ success</a></td></tr>\n<tr><td>Flaky tests</td><td>Checks if new added or modified tests are flaky by running them repeatedly, in parallel, with more randomization. Functional tests are run 100 times with address sanitizer, and additional randomization of thread scheduling. Integrational tests are run up to 10 times. If at least once a new test has failed, or was too long, this check will be red. We don't allow flaky tests, read <a href=\"https://clickhouse.com/blog/decorating-a-christmas-tree-with-the-help-of-flaky-tests/\">the doc</a></td><td><a href=\"https://s3.amazonaws.com/clickhouse-test-reports/57107/761b55ccf4e2a4cd449381fa5742face4c256001/integration_tests_flaky_check__asan_.html\">✅ success</a></td></tr>\n<tr><td>Install packages</td><td>Checks that the built packages are installable in a clear environment</td><td><a href=\"https://s3.amazonaws.com/clickhouse-test-reports/57107/761b55ccf4e2a4cd449381fa5742face4c256001/install_packages__amd64_.html\">✅ success</a></td></tr>\n<tr><td>Performance Comparison</td><td>Measure changes in query performance. The performance test report is described in detail <a href=\"https://github.com/ClickHouse/ClickHouse/tree/master/docker/test/performance-comparison#how-to-read-the-report\">here</a>. In square brackets are the optional part/total tests</td><td><a href=\"https://github.com/ClickHouse/ClickHouse/actions/runs/6960241423\">✅ success</a></td></tr>\n<tr><td>Push to Dockerhub</td><td>The check for building and pushing the CI related docker images to docker hub</td><td><a href=\"https://s3.amazonaws.com/clickhouse-test-reports/57107/761b55ccf4e2a4cd449381fa5742face4c256001/push_multi-arch_images_to_dockerhub.html\">✅ success</a></td></tr>\n<tr><td>SQLTest</td><td>There's no description for the check yet, please add it to tests/ci/ci_config.py:CHECK_DESCRIPTIONS</td><td><a href=\"https://s3.amazonaws.com/clickhouse-test-reports/57107/761b55ccf4e2a4cd449381fa5742face4c256001/sqltest_sqltest/report.html\">✅ success</a></td></tr>\n<tr><td>SQLancer</td><td>Fuzzing tests that detect logical bugs with <a href=\"https://github.com/sqlancer/sqlancer\">SQLancer</a> tool</td><td><a href=\"https://s3.amazonaws.com/clickhouse-test-reports/57107/761b55ccf4e2a4cd449381fa5742face4c256001/sqlancer__debug_.html\">✅ success</a></td></tr>\n<tr><td>Sqllogic</td><td>Run clickhouse on the <a href=\"https://www.sqlite.org/sqllogictest\">sqllogic</a> test set against sqlite and checks that all statements are passed</td><td><a href=\"https://s3.amazonaws.com/clickhouse-test-reports/57107/761b55ccf4e2a4cd449381fa5742face4c256001/sqllogic_test__release_.html\">✅ success</a></td></tr>\n<tr><td>Stateful tests</td><td>Runs stateful functional tests for ClickHouse binaries built in various configurations -- release, debug, with sanitizers, etc</td><td><a href=\"https://s3.amazonaws.com/clickhouse-test-reports/57107/761b55ccf4e2a4cd449381fa5742face4c256001/stateful_tests__aarch64_.html\">✅ success</a></td></tr>\n<tr><td>Stress test</td><td>Runs stateless functional tests concurrently from several clients to detect concurrency-related errors</td><td><a href=\"https://s3.amazonaws.com/clickhouse-test-reports/57107/761b55ccf4e2a4cd449381fa5742face4c256001/stress_test__asan_.html\">✅ success</a></td></tr>\n<tr><td>Style Check</td><td>Runs a set of checks to keep the code style clean. If some of tests failed, see the related log from the report</td><td><a href=\"https://s3.amazonaws.com/clickhouse-test-reports/57107/761b55ccf4e2a4cd449381fa5742face4c256001/style_check.html\">✅ success</a></td></tr>\n<tr><td>Unit tests</td><td>Runs the unit tests for different release types</td><td><a href=\"https://s3.amazonaws.com/clickhouse-test-reports/57107/761b55ccf4e2a4cd449381fa5742face4c256001/unit_tests__asan_.html\">✅ success</a></td></tr>\n<tr><td>Upgrade check</td><td>Runs stress tests on server version from last release and then tries to upgrade it to the version from the PR. It checks if the new server can successfully startup without any errors, crashes or sanitizer asserts</td><td><a href=\"https://s3.amazonaws.com/clickhouse-test-reports/57107/761b55ccf4e2a4cd449381fa5742face4c256001/upgrade_check__asan_.html\">✅ success</a></td></tr>\n<tbody>\n</table>\n</details>\n<table>\n<thead><tr><th>Check name</th><th>Description</th><th>Status</th></tr></thead>\n<tbody>\n<tr><td>Integration tests</td><td>The integration tests report. In parenthesis the package type is given, and in square brackets are the optional part/total tests</td><td><a href=\"https://s3.amazonaws.com/clickhouse-test-reports/57107/761b55ccf4e2a4cd449381fa5742face4c256001/integration_tests__asan__[1_4].html\">❌ failure</a></td></tr>\n<tr><td>Mergeable Check</td><td>Checks if all other necessary checks are successful</td><td><a href=\"https://github.com/ClickHouse/ClickHouse/actions/runs/6960241423\">❌ failure</a></td></tr>\n<tr><td>Stateless tests</td><td>Runs stateless functional tests for ClickHouse binaries built in various configurations -- release, debug, with sanitizers, etc</td><td><a href=\"https://s3.amazonaws.com/clickhouse-test-reports/57107/761b55ccf4e2a4cd449381fa5742face4c256001/stateless_tests__release_.html\">❌ failure</a></td></tr>\n<tbody>\n</table>\n"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 1.0"
}