{
  "cve_id": "CVE-2019-15788",
  "cwe_ids": [
    "CWE-190"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "NVIDIA-Genomics-Research/GenomeWorks",
  "commit_msg": "[cudapoa] fix integer overflow",
  "commit_hash": "3217f01b0525596c214a66d4154ce20c437c530f",
  "git_url": "https://github.com/NVIDIA-Genomics-Research/GenomeWorks/commit/3217f01b0525596c214a66d4154ce20c437c530f",
  "file_path": "cudapoa/src/allocate_block.cpp",
  "func_name": "BatchBlock::BatchBlock",
  "func_before": "BatchBlock::BatchBlock(int32_t device_id, size_t avail_mem, int32_t max_sequences_per_poa, int8_t output_mask, bool banded_alignment)\n    : max_sequences_per_poa_(throw_on_negative(max_sequences_per_poa, \"Maximum sequences per POA has to be non-negative\"))\n    , banded_alignment_(banded_alignment)\n    , device_id_(throw_on_negative(device_id, \"Device ID has to be non-negative\"))\n    , output_mask_(output_mask)\n{\n    matrix_sequence_dimension_ = banded_alignment_ ? CUDAPOA_BANDED_MAX_MATRIX_SEQUENCE_DIMENSION : CUDAPOA_MAX_MATRIX_SEQUENCE_DIMENSION;\n    max_graph_dimension_       = banded_alignment_ ? CUDAPOA_MAX_MATRIX_GRAPH_DIMENSION_BANDED : CUDAPOA_MAX_MATRIX_GRAPH_DIMENSION;\n    max_nodes_per_window_      = banded_alignment_ ? CUDAPOA_MAX_NODES_PER_WINDOW_BANDED : CUDAPOA_MAX_NODES_PER_WINDOW;\n\n    // calculate static and dynamic sizes of buffers needed per POA entry.\n    size_t host_size_fixed, device_size_fixed;\n    size_t host_size_per_poa, device_size_per_poa;\n    std::tie(host_size_fixed, device_size_fixed, host_size_per_poa, device_size_per_poa) = calculate_space_per_poa();\n\n    // Using 2x as a buffer.\n    size_t minimum_device_mem = 2 * (device_size_fixed + device_size_per_poa);\n    if (avail_mem < minimum_device_mem)\n    {\n        std::string msg = std::string(\"Require at least \")\n                              .append(std::to_string(minimum_device_mem))\n                              .append(\" bytes of device memory per CUDAPOA batch to process correctly.\");\n        throw std::runtime_error(msg);\n    }\n\n    // Calculate max POAs possible based on heirustics and available memory.\n    // TODO: Remove this fixed partitioing and making the filling up of buffer\n    // fully dynamic.\n    const float fraction_for_metadata = 0.4f;\n    max_poas_                         = (avail_mem * fraction_for_metadata) / device_size_per_poa;\n\n    // Update final sizes for block based on calculated maximum POAs.\n    output_size_ = max_poas_ * CUDAPOA_MAX_CONSENSUS_SIZE;\n    input_size_  = max_poas_ * max_sequences_per_poa_ * CUDAPOA_MAX_SEQUENCE_SIZE;\n    total_h_     = max_poas_ * host_size_per_poa + host_size_fixed;\n    total_d_     = avail_mem;\n\n    // Allocate.\n    CGA_CU_CHECK_ERR(cudaSetDevice(device_id_));\n    CGA_CU_CHECK_ERR(cudaHostAlloc((void**)&block_data_h_, total_h_, cudaHostAllocDefault));\n    CGA_CU_CHECK_ERR(cudaMalloc((void**)&block_data_d_, total_d_));\n}",
  "abstract_func_before": "BatchBlock::BatchBlock(int32_t VAR_0, size_t VAR_1, int32_t VAR_2, int8_t VAR_3, bool VAR_4)\n    : max_sequences_per_poa_(throw_on_negative(VAR_2, \"Maximum sequences per POA has to be non-negative\"))\n    , banded_alignment_(VAR_4)\n    , device_id_(throw_on_negative(VAR_0, \"Device ID has to be non-negative\"))\n    , output_mask_(VAR_3)\n{\n    VAR_5 = VAR_6 ? VAR_7 : VAR_8;\n    VAR_9       = VAR_6 ? VAR_10 : VAR_11;\n    VAR_12      = VAR_6 ? VAR_13 : VAR_14;\n\n    /* COMMENT_0 */\n    size_t VAR_15, VAR_16;\n    size_t VAR_17, VAR_18;\n    std::tie(VAR_15, VAR_16, VAR_17, VAR_18) = calculate_space_per_poa();\n\n    /* COMMENT_1 */\n    size_t VAR_19 = 2 * (VAR_16 + VAR_18);\n    if (VAR_1 < VAR_19)\n    {\n        std::string VAR_20 = std::string(\"Require at least \")\n                              .append(std::to_string(VAR_19))\n                              .append(\" bytes of device memory per CUDAPOA batch to process correctly.\");\n        throw std::runtime_error(VAR_20);\n    }\n\n    /* COMMENT_2 */\n    /* COMMENT_3 */\n    /* COMMENT_4 */\n    const float VAR_21 = 0.4f;\n    VAR_22                         = (VAR_1 * VAR_21) / VAR_18;\n\n    /* COMMENT_5 */\n    VAR_23 = VAR_22 * VAR_24;\n    VAR_25  = VAR_22 * VAR_26 * VAR_27;\n    VAR_28     = VAR_22 * VAR_17 + VAR_15;\n    VAR_29     = VAR_1;\n\n    /* COMMENT_6 */\n    CGA_CU_CHECK_ERR(cudaSetDevice(VAR_30));\n    CGA_CU_CHECK_ERR(cudaHostAlloc((void**)&VAR_31, VAR_28, VAR_32));\n    CGA_CU_CHECK_ERR(cudaMalloc((void**)&VAR_33, VAR_29));\n}",
  "func_graph_path_before": "NVIDIA-Genomics-Research/GenomeWorks/3217f01b0525596c214a66d4154ce20c437c530f/allocate_block.cpp/vul/before/0.json",
  "func": "BatchBlock::BatchBlock(int32_t device_id, size_t avail_mem, int32_t max_sequences_per_poa, int8_t output_mask, bool banded_alignment)\n    : max_sequences_per_poa_(throw_on_negative(max_sequences_per_poa, \"Maximum sequences per POA has to be non-negative\"))\n    , banded_alignment_(banded_alignment)\n    , device_id_(throw_on_negative(device_id, \"Device ID has to be non-negative\"))\n    , output_mask_(output_mask)\n{\n    matrix_sequence_dimension_ = banded_alignment_ ? CUDAPOA_BANDED_MAX_MATRIX_SEQUENCE_DIMENSION : CUDAPOA_MAX_MATRIX_SEQUENCE_DIMENSION;\n    max_graph_dimension_       = banded_alignment_ ? CUDAPOA_MAX_MATRIX_GRAPH_DIMENSION_BANDED : CUDAPOA_MAX_MATRIX_GRAPH_DIMENSION;\n    max_nodes_per_window_      = banded_alignment_ ? CUDAPOA_MAX_NODES_PER_WINDOW_BANDED : CUDAPOA_MAX_NODES_PER_WINDOW;\n\n    // calculate static and dynamic sizes of buffers needed per POA entry.\n    size_t host_size_fixed, device_size_fixed;\n    size_t host_size_per_poa, device_size_per_poa;\n    std::tie(host_size_fixed, device_size_fixed, host_size_per_poa, device_size_per_poa) = calculate_space_per_poa();\n\n    // Using 2x as a buffer.\n    size_t minimum_device_mem = 2 * (device_size_fixed + device_size_per_poa);\n    if (avail_mem < minimum_device_mem)\n    {\n        std::string msg = std::string(\"Require at least \")\n                              .append(std::to_string(minimum_device_mem))\n                              .append(\" bytes of device memory per CUDAPOA batch to process correctly.\");\n        throw std::runtime_error(msg);\n    }\n\n    // Calculate max POAs possible based on heirustics and available memory.\n    // TODO: Remove this fixed partitioing and making the filling up of buffer\n    // fully dynamic.\n    const float fraction_for_metadata = 0.4f;\n    max_poas_                         = (avail_mem * fraction_for_metadata) / device_size_per_poa;\n\n    // Update final sizes for block based on calculated maximum POAs.\n    output_size_ = max_poas_ * static_cast<size_t>(CUDAPOA_MAX_CONSENSUS_SIZE);\n    input_size_  = max_poas_ * max_sequences_per_poa_ * static_cast<size_t>(CUDAPOA_MAX_SEQUENCE_SIZE);\n    total_h_     = max_poas_ * host_size_per_poa + host_size_fixed;\n    total_d_     = avail_mem;\n\n    // Allocate.\n    CGA_CU_CHECK_ERR(cudaSetDevice(device_id_));\n    CGA_CU_CHECK_ERR(cudaHostAlloc((void**)&block_data_h_, total_h_, cudaHostAllocDefault));\n    CGA_CU_CHECK_ERR(cudaMalloc((void**)&block_data_d_, total_d_));\n}",
  "abstract_func": "BatchBlock::BatchBlock(int32_t VAR_0, size_t VAR_1, int32_t VAR_2, int8_t VAR_3, bool VAR_4)\n    : max_sequences_per_poa_(throw_on_negative(VAR_2, \"Maximum sequences per POA has to be non-negative\"))\n    , banded_alignment_(VAR_4)\n    , device_id_(throw_on_negative(VAR_0, \"Device ID has to be non-negative\"))\n    , output_mask_(VAR_3)\n{\n    VAR_5 = VAR_6 ? VAR_7 : VAR_8;\n    VAR_9       = VAR_6 ? VAR_10 : VAR_11;\n    VAR_12      = VAR_6 ? VAR_13 : VAR_14;\n\n    /* COMMENT_0 */\n    size_t VAR_15, VAR_16;\n    size_t VAR_17, VAR_18;\n    std::tie(VAR_15, VAR_16, VAR_17, VAR_18) = calculate_space_per_poa();\n\n    /* COMMENT_1 */\n    size_t VAR_19 = 2 * (VAR_16 + VAR_18);\n    if (VAR_1 < VAR_19)\n    {\n        std::string VAR_20 = std::string(\"Require at least \")\n                              .append(std::to_string(VAR_19))\n                              .append(\" bytes of device memory per CUDAPOA batch to process correctly.\");\n        throw std::runtime_error(VAR_20);\n    }\n\n    /* COMMENT_2 */\n    /* COMMENT_3 */\n    /* COMMENT_4 */\n    const float VAR_21 = 0.4f;\n    VAR_22                         = (VAR_1 * VAR_21) / VAR_18;\n\n    /* COMMENT_5 */\n    VAR_23 = VAR_22 * VAR_24<size_t>(VAR_25);\n    VAR_26  = VAR_22 * VAR_27 * VAR_24<size_t>(VAR_28);\n    VAR_29     = VAR_22 * VAR_17 + VAR_15;\n    VAR_30     = VAR_1;\n\n    /* COMMENT_6 */\n    CGA_CU_CHECK_ERR(cudaSetDevice(VAR_31));\n    CGA_CU_CHECK_ERR(cudaHostAlloc((void**)&VAR_32, VAR_29, VAR_33));\n    CGA_CU_CHECK_ERR(cudaMalloc((void**)&VAR_34, VAR_30));\n}",
  "func_graph_path": "NVIDIA-Genomics-Research/GenomeWorks/3217f01b0525596c214a66d4154ce20c437c530f/allocate_block.cpp/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -30,8 +30,8 @@\n     max_poas_                         = (avail_mem * fraction_for_metadata) / device_size_per_poa;\n \n     // Update final sizes for block based on calculated maximum POAs.\n-    output_size_ = max_poas_ * CUDAPOA_MAX_CONSENSUS_SIZE;\n-    input_size_  = max_poas_ * max_sequences_per_poa_ * CUDAPOA_MAX_SEQUENCE_SIZE;\n+    output_size_ = max_poas_ * static_cast<size_t>(CUDAPOA_MAX_CONSENSUS_SIZE);\n+    input_size_  = max_poas_ * max_sequences_per_poa_ * static_cast<size_t>(CUDAPOA_MAX_SEQUENCE_SIZE);\n     total_h_     = max_poas_ * host_size_per_poa + host_size_fixed;\n     total_d_     = avail_mem;\n ",
  "diff_line_info": {
    "deleted_lines": [
      "    output_size_ = max_poas_ * CUDAPOA_MAX_CONSENSUS_SIZE;",
      "    input_size_  = max_poas_ * max_sequences_per_poa_ * CUDAPOA_MAX_SEQUENCE_SIZE;"
    ],
    "added_lines": [
      "    output_size_ = max_poas_ * static_cast<size_t>(CUDAPOA_MAX_CONSENSUS_SIZE);",
      "    input_size_  = max_poas_ * max_sequences_per_poa_ * static_cast<size_t>(CUDAPOA_MAX_SEQUENCE_SIZE);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/NVIDIA-Genomics-Research/GenomeWorks/pull/70",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/NVIDIA-Genomics-Research/GenomeWorks/pull/70: 403 Client Error: Forbidden for url: https://api.github.com/repos/NVIDIA-Genomics-Research/GenomeWorks/pulls/70",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 1.0"
}