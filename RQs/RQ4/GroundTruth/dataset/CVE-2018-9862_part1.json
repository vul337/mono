{
  "cve_id": "CVE-2018-9862",
  "cwe_ids": [
    "CWE-838"
  ],
  "cvss_vector": "AV:L/AC:L/Au:N/C:C/I:C/A:C",
  "cvss_is_v3": false,
  "repo_name": "hyperhq/hyperstart",
  "commit_msg": "Security: fix a issue (similar to  runc CVE-2016-3697)\n\nSigned-off-by: y00316549 <yangshukui@huawei.com>",
  "commit_hash": "ad6e43325da7d5f8048f23451bef26fdf4c0f93d",
  "git_url": "https://github.com/hyperhq/hyperstart/commit/ad6e43325da7d5f8048f23451bef26fdf4c0f93d",
  "file_path": "src/util.c",
  "func_name": "hyper_getpwnam",
  "func_before": "struct passwd *hyper_getpwnam(const char *name)\n{\n\tuid_t uid = (uid_t)id_or_max(name);\n\tFILE *file = fopen(\"/etc/passwd\", \"r\");\n\tif (!file) {\n\t\tperror(\"faile to open /etc/passwd\");\n\t\treturn NULL;\n\t}\n\tfor (;;) {\n\t\tstruct passwd *pwd = fgetpwent(file);\n\t\tif (!pwd)\n\t\t\tbreak;\n\t\tif (!strcmp(pwd->pw_name, name) || pwd->pw_uid == uid) {\n\t\t\tfclose(file);\n\t\t\treturn pwd;\n\t\t}\n\t}\n\tfclose(file);\n\treturn NULL;\n}",
  "abstract_func_before": "struct passwd *hyper_getpwnam(const char *VAR_0)\n{\n\tuid_t VAR_1 = (uid_t)id_or_max(VAR_0);\n\tFILE *VAR_2 = fopen(\"/etc/passwd\", \"r\");\n\tif (!VAR_2) {\n\t\tperror(\"faile to open /etc/passwd\");\n\t\treturn NULL;\n\t}\n\tfor (;;) {\n\t\tstruct passwd *VAR_3 = fgetpwent(VAR_2);\n\t\tif (!VAR_3)\n\t\t\tbreak;\n\t\tif (!strcmp(VAR_3->pw_name, VAR_0) || VAR_3->pw_uid == VAR_1) {\n\t\t\tfclose(VAR_2);\n\t\t\treturn VAR_3;\n\t\t}\n\t}\n\tfclose(VAR_2);\n\treturn NULL;\n}",
  "func_graph_path_before": "hyperhq/hyperstart/ad6e43325da7d5f8048f23451bef26fdf4c0f93d/util.c/vul/before/0.json",
  "func": "struct passwd *hyper_getpwnam(const char *name)\n{\n\tuid_t uid;\n\tFILE *file;\n\tstruct passwd *pwd;\n\n\tuid = (uid_t)id_or_max(name);\n\tfile = fopen(\"/etc/passwd\", \"r\");\n\tif (!file) {\n\t\tperror(\"faile to open /etc/passwd\");\n\t\treturn NULL;\n\t}\n\tfor (;;) {\n\t\tpwd = fgetpwent(file);\n\t\tif (!pwd)\n\t\t\tbreak;\n\t\tif (pwd->pw_uid == uid ||\n\t\t  (!strcmp(pwd->pw_name, name) && (uid_t)INVALID_UGID == uid)) {\n\t\t\tfclose(file);\n\t\t\treturn pwd;\n\t\t}\n\t}\n\tfclose(file);\n\treturn NULL;\n}",
  "abstract_func": "struct passwd *hyper_getpwnam(const char *VAR_0)\n{\n\tuid_t VAR_1;\n\tFILE *VAR_2;\n\tstruct passwd *VAR_3;\n\n\tVAR_1 = (uid_t)id_or_max(VAR_0);\n\tVAR_2 = fopen(\"/etc/passwd\", \"r\");\n\tif (!VAR_2) {\n\t\tperror(\"faile to open /etc/passwd\");\n\t\treturn NULL;\n\t}\n\tfor (;;) {\n\t\tVAR_3 = fgetpwent(VAR_2);\n\t\tif (!VAR_3)\n\t\t\tbreak;\n\t\tif (VAR_3->pw_uid == VAR_1 ||\n\t\t  (!strcmp(VAR_3->pw_name, VAR_0) && (uid_t)VAR_4 == VAR_1)) {\n\t\t\tfclose(VAR_2);\n\t\t\treturn VAR_3;\n\t\t}\n\t}\n\tfclose(VAR_2);\n\treturn NULL;\n}",
  "func_graph_path": "hyperhq/hyperstart/ad6e43325da7d5f8048f23451bef26fdf4c0f93d/util.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,16 +1,21 @@\n struct passwd *hyper_getpwnam(const char *name)\n {\n-\tuid_t uid = (uid_t)id_or_max(name);\n-\tFILE *file = fopen(\"/etc/passwd\", \"r\");\n+\tuid_t uid;\n+\tFILE *file;\n+\tstruct passwd *pwd;\n+\n+\tuid = (uid_t)id_or_max(name);\n+\tfile = fopen(\"/etc/passwd\", \"r\");\n \tif (!file) {\n \t\tperror(\"faile to open /etc/passwd\");\n \t\treturn NULL;\n \t}\n \tfor (;;) {\n-\t\tstruct passwd *pwd = fgetpwent(file);\n+\t\tpwd = fgetpwent(file);\n \t\tif (!pwd)\n \t\t\tbreak;\n-\t\tif (!strcmp(pwd->pw_name, name) || pwd->pw_uid == uid) {\n+\t\tif (pwd->pw_uid == uid ||\n+\t\t  (!strcmp(pwd->pw_name, name) && (uid_t)INVALID_UGID == uid)) {\n \t\t\tfclose(file);\n \t\t\treturn pwd;\n \t\t}",
  "diff_line_info": {
    "deleted_lines": [
      "\tuid_t uid = (uid_t)id_or_max(name);",
      "\tFILE *file = fopen(\"/etc/passwd\", \"r\");",
      "\t\tstruct passwd *pwd = fgetpwent(file);",
      "\t\tif (!strcmp(pwd->pw_name, name) || pwd->pw_uid == uid) {"
    ],
    "added_lines": [
      "\tuid_t uid;",
      "\tFILE *file;",
      "\tstruct passwd *pwd;",
      "",
      "\tuid = (uid_t)id_or_max(name);",
      "\tfile = fopen(\"/etc/passwd\", \"r\");",
      "\t\tpwd = fgetpwent(file);",
      "\t\tif (pwd->pw_uid == uid ||",
      "\t\t  (!strcmp(pwd->pw_name, name) && (uid_t)INVALID_UGID == uid)) {"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/hyperhq/hyperstart/pull/348",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/hyperhq/hyperstart/pull/348: 403 Client Error: Forbidden for url: https://api.github.com/repos/hyperhq/hyperstart/pulls/348",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 0.9"
}