{
  "cve_id": "CVE-2018-25021",
  "cwe_ids": [
    "CWE-404"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "TokTok/c-toxcore",
  "commit_msg": "Fix memleak in tcp server by wiping priority queues on deletion",
  "commit_hash": "5beb00c93d3adb5c23149535624d27c67bc146ea",
  "git_url": "https://github.com/TokTok/c-toxcore/commit/5beb00c93d3adb5c23149535624d27c67bc146ea",
  "file_path": "toxcore/TCP_server.c",
  "func_name": "del_accepted",
  "func_before": "static int del_accepted(TCP_Server *tcp_server, int index)\n{\n    if ((uint32_t)index >= tcp_server->size_accepted_connections) {\n        return -1;\n    }\n\n    if (tcp_server->accepted_connection_array[index].status == TCP_STATUS_NO_STATUS) {\n        return -1;\n    }\n\n    if (!bs_list_remove(&tcp_server->accepted_key_list, tcp_server->accepted_connection_array[index].public_key, index)) {\n        return -1;\n    }\n\n    crypto_memzero(&tcp_server->accepted_connection_array[index], sizeof(TCP_Secure_Connection));\n    --tcp_server->num_accepted_connections;\n\n    if (tcp_server->num_accepted_connections == 0) {\n        realloc_connection(tcp_server, 0);\n    }\n\n    return 0;\n}",
  "abstract_func_before": "static int del_accepted(TCP_Server *VAR_0, int VAR_1)\n{\n    if ((uint32_t)VAR_1 >= VAR_0->size_accepted_connections) {\n        return -1;\n    }\n\n    if (VAR_0->accepted_connection_array[VAR_1].status == VAR_2) {\n        return -1;\n    }\n\n    if (!bs_list_remove(&VAR_0->accepted_key_list, VAR_0->accepted_connection_array[VAR_1].public_key, VAR_1)) {\n        return -1;\n    }\n\n    crypto_memzero(&VAR_0->accepted_connection_array[VAR_1], sizeof(VAR_3));\n    --VAR_0->num_accepted_connections;\n\n    if (VAR_0->num_accepted_connections == 0) {\n        realloc_connection(VAR_0, 0);\n    }\n\n    return 0;\n}",
  "func_graph_path_before": "TokTok/c-toxcore/5beb00c93d3adb5c23149535624d27c67bc146ea/TCP_server.c/vul/before/3.json",
  "func": "static int del_accepted(TCP_Server *tcp_server, int index)\n{\n    if ((uint32_t)index >= tcp_server->size_accepted_connections) {\n        return -1;\n    }\n\n    if (tcp_server->accepted_connection_array[index].status == TCP_STATUS_NO_STATUS) {\n        return -1;\n    }\n\n    if (!bs_list_remove(&tcp_server->accepted_key_list, tcp_server->accepted_connection_array[index].public_key, index)) {\n        return -1;\n    }\n\n    wipe_secure_connection(&tcp_server->accepted_connection_array[index]);\n    --tcp_server->num_accepted_connections;\n\n    if (tcp_server->num_accepted_connections == 0) {\n        free_accepted_connection_array(tcp_server);\n    }\n\n    return 0;\n}",
  "abstract_func": "static int del_accepted(TCP_Server *VAR_0, int VAR_1)\n{\n    if ((uint32_t)VAR_1 >= VAR_0->size_accepted_connections) {\n        return -1;\n    }\n\n    if (VAR_0->accepted_connection_array[VAR_1].status == VAR_2) {\n        return -1;\n    }\n\n    if (!bs_list_remove(&VAR_0->accepted_key_list, VAR_0->accepted_connection_array[VAR_1].public_key, VAR_1)) {\n        return -1;\n    }\n\n    wipe_secure_connection(&VAR_0->accepted_connection_array[VAR_1]);\n    --VAR_0->num_accepted_connections;\n\n    if (VAR_0->num_accepted_connections == 0) {\n        free_accepted_connection_array(VAR_0);\n    }\n\n    return 0;\n}",
  "func_graph_path": "TokTok/c-toxcore/5beb00c93d3adb5c23149535624d27c67bc146ea/TCP_server.c/vul/after/3.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -12,11 +12,11 @@\n         return -1;\n     }\n \n-    crypto_memzero(&tcp_server->accepted_connection_array[index], sizeof(TCP_Secure_Connection));\n+    wipe_secure_connection(&tcp_server->accepted_connection_array[index]);\n     --tcp_server->num_accepted_connections;\n \n     if (tcp_server->num_accepted_connections == 0) {\n-        realloc_connection(tcp_server, 0);\n+        free_accepted_connection_array(tcp_server);\n     }\n \n     return 0;",
  "diff_line_info": {
    "deleted_lines": [
      "    crypto_memzero(&tcp_server->accepted_connection_array[index], sizeof(TCP_Secure_Connection));",
      "        realloc_connection(tcp_server, 0);"
    ],
    "added_lines": [
      "    wipe_secure_connection(&tcp_server->accepted_connection_array[index]);",
      "        free_accepted_connection_array(tcp_server);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/TokTok/c-toxcore/pull/1216",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/TokTok/c-toxcore/pull/1216: 403 Client Error: Forbidden for url: https://api.github.com/repos/TokTok/c-toxcore/pulls/1216",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 0.95"
}