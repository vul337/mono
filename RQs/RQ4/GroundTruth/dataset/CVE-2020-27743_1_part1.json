{
  "cve_id": "CVE-2020-27743",
  "cwe_ids": [
    "CWE-330"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "kravietz/pam_tacplus",
  "commit_msg": "pam_tacplus.c: Fallback to using PID as task ID\n\nIf there is a failure obtaining a random task ID for the session\naccounting request then fallback to using the PID, as this is unique\nfor the lifetime of the PAM application and therefore session.",
  "commit_hash": "bceaab0cd51a09b88f40f19da799ac7390264bf8",
  "git_url": "https://github.com/kravietz/pam_tacplus/commit/bceaab0cd51a09b88f40f19da799ac7390264bf8",
  "file_path": "pam_tacplus.c",
  "func_name": "_pam_send_account",
  "func_before": "int _pam_send_account(int tac_fd, int type, const char *user, char *tty,\n\t\tchar *r_addr, char *cmd) {\n\n\tchar buf[64];\n\tstruct tac_attrib *attr;\n\tint retval;\n\ttime_t t;\n\tstruct tm tm;\n\n\tattr = (struct tac_attrib *) xcalloc(1, sizeof(struct tac_attrib));\n\n\tt = time(NULL);\n\tgmtime_r(&t, &tm);\n\tstrftime(buf, sizeof(buf), \"%s\", &tm);\n\n\tif (type == TAC_PLUS_ACCT_FLAG_START) {\n\t\ttac_add_attrib(&attr, \"start_time\", buf);\n\t} else if (type == TAC_PLUS_ACCT_FLAG_STOP) {\n\t\ttac_add_attrib(&attr, \"stop_time\", buf);\n\t}\n\tsprintf(buf, \"%hu\", task_id);\n\ttac_add_attrib(&attr, \"task_id\", buf);\n\ttac_add_attrib(&attr, \"service\", tac_service);\n\tif (tac_protocol[0] != '\\0')\n\t\ttac_add_attrib(&attr, \"protocol\", tac_protocol);\n\tif (cmd != NULL) {\n\t\ttac_add_attrib(&attr, \"cmd\", cmd);\n\t}\n\n\tretval = tac_acct_send(tac_fd, type, user, tty, r_addr, attr);\n\n\t/* this is no longer needed */\n\ttac_free_attrib(&attr);\n\n\tif (retval < 0) {\n\t\t_pam_log(LOG_WARNING, \"%s: send %s accounting failed (task %hu)\",\n\t\t\t\t__FUNCTION__, tac_acct_flag2str(type), task_id);\n\t\tclose(tac_fd);\n\t\treturn -1;\n\t}\n\n\tstruct areply re;\n\tif (tac_acct_read(tac_fd, &re) != TAC_PLUS_ACCT_STATUS_SUCCESS) {\n\t\t_pam_log(LOG_WARNING, \"%s: accounting %s failed (task %hu)\",\n\t\t\t\t__FUNCTION__, tac_acct_flag2str(type), task_id);\n\n\t\tif (re.msg != NULL)\n\t\t\tfree(re.msg);\n\n\t\tclose(tac_fd);\n\t\treturn -1;\n\t}\n\n\tif (re.msg != NULL)\n\t\tfree(re.msg);\n\n\tclose(tac_fd);\n\treturn 0;\n}",
  "abstract_func_before": "int _pam_send_account(int VAR_0, int VAR_1, const char *VAR_2, char *VAR_3,\n\t\tchar *VAR_4, char *VAR_5) {\n\n\tchar VAR_6[64];\n\tstruct tac_attrib *VAR_7;\n\tint VAR_8;\n\ttime_t VAR_9;\n\tstruct tm tm;\n\n\tVAR_7 = (struct tac_attrib *) xcalloc(1, sizeof(struct tac_attrib));\n\n\tVAR_9 = time(NULL);\n\tgmtime_r(&VAR_9, &tm);\n\tstrftime(VAR_6, sizeof(VAR_6), \"%s\", &tm);\n\n\tif (VAR_1 == VAR_10) {\n\t\ttac_add_attrib(&VAR_7, \"start_time\", VAR_6);\n\t} else if (VAR_1 == VAR_11) {\n\t\ttac_add_attrib(&VAR_7, \"stop_time\", VAR_6);\n\t}\n\tsprintf(VAR_6, \"%hu\", VAR_12);\n\ttac_add_attrib(&VAR_7, \"task_id\", VAR_6);\n\ttac_add_attrib(&VAR_7, \"service\", VAR_13);\n\tif (VAR_14[0] != '\\0')\n\t\ttac_add_attrib(&VAR_7, \"protocol\", VAR_14);\n\tif (VAR_5 != NULL) {\n\t\ttac_add_attrib(&VAR_7, \"cmd\", VAR_5);\n\t}\n\n\tVAR_8 = tac_acct_send(VAR_0, VAR_1, VAR_2, VAR_3, VAR_4, VAR_7);\n\n\t/* COMMENT_0 */\n\ttac_free_attrib(&VAR_7);\n\n\tif (VAR_8 < 0) {\n\t\t_pam_log(VAR_15, \"%s: send %s accounting failed (task %hu)\",\n\t\t\t\tVAR_16, tac_acct_flag2str(VAR_1), VAR_12);\n\t\tclose(VAR_0);\n\t\treturn -1;\n\t}\n\n\tstruct areply VAR_17;\n\tif (tac_acct_read(VAR_0, &VAR_17) != VAR_18) {\n\t\t_pam_log(VAR_15, \"%s: accounting %s failed (task %hu)\",\n\t\t\t\tVAR_16, tac_acct_flag2str(VAR_1), VAR_12);\n\n\t\tif (VAR_17.msg != NULL)\n\t\t\tfree(VAR_17.msg);\n\n\t\tclose(VAR_0);\n\t\treturn -1;\n\t}\n\n\tif (VAR_17.msg != NULL)\n\t\tfree(VAR_17.msg);\n\n\tclose(VAR_0);\n\treturn 0;\n}",
  "func_graph_path_before": "kravietz/pam_tacplus/bceaab0cd51a09b88f40f19da799ac7390264bf8/pam_tacplus.c/vul/before/1.json",
  "func": "int _pam_send_account(int tac_fd, int type, const char *user, char *tty,\n\t\tchar *r_addr, char *cmd) {\n\n\tchar buf[64];\n\tstruct tac_attrib *attr;\n\tint retval;\n\ttime_t t;\n\tstruct tm tm;\n\n\tattr = (struct tac_attrib *) xcalloc(1, sizeof(struct tac_attrib));\n\n\tt = time(NULL);\n\tgmtime_r(&t, &tm);\n\tstrftime(buf, sizeof(buf), \"%s\", &tm);\n\n\tif (type == TAC_PLUS_ACCT_FLAG_START) {\n\t\ttac_add_attrib(&attr, \"start_time\", buf);\n\t} else if (type == TAC_PLUS_ACCT_FLAG_STOP) {\n\t\ttac_add_attrib(&attr, \"stop_time\", buf);\n\t}\n\n\tif (task_id == 0)\n\t\tsnprintf(buf, sizeof(buf), \"%d\", getpid());\n\telse\n\t\tsnprintf(buf, sizeof(buf), \"%hu\", task_id);\n\ttac_add_attrib(&attr, \"task_id\", buf);\n\n\ttac_add_attrib(&attr, \"service\", tac_service);\n\tif (tac_protocol[0] != '\\0')\n\t\ttac_add_attrib(&attr, \"protocol\", tac_protocol);\n\tif (cmd != NULL) {\n\t\ttac_add_attrib(&attr, \"cmd\", cmd);\n\t}\n\n\tretval = tac_acct_send(tac_fd, type, user, tty, r_addr, attr);\n\n\t/* this is no longer needed */\n\ttac_free_attrib(&attr);\n\n\tif (retval < 0) {\n\t\t_pam_log(LOG_WARNING, \"%s: send %s accounting failed (task %hu)\",\n\t\t\t\t__FUNCTION__, tac_acct_flag2str(type), task_id);\n\t\tclose(tac_fd);\n\t\treturn -1;\n\t}\n\n\tstruct areply re;\n\tif (tac_acct_read(tac_fd, &re) != TAC_PLUS_ACCT_STATUS_SUCCESS) {\n\t\t_pam_log(LOG_WARNING, \"%s: accounting %s failed (task %hu)\",\n\t\t\t\t__FUNCTION__, tac_acct_flag2str(type), task_id);\n\n\t\tif (re.msg != NULL)\n\t\t\tfree(re.msg);\n\n\t\tclose(tac_fd);\n\t\treturn -1;\n\t}\n\n\tif (re.msg != NULL)\n\t\tfree(re.msg);\n\n\tclose(tac_fd);\n\treturn 0;\n}",
  "abstract_func": "int _pam_send_account(int VAR_0, int VAR_1, const char *VAR_2, char *VAR_3,\n\t\tchar *VAR_4, char *VAR_5) {\n\n\tchar VAR_6[64];\n\tstruct tac_attrib *VAR_7;\n\tint VAR_8;\n\ttime_t VAR_9;\n\tstruct tm tm;\n\n\tVAR_7 = (struct tac_attrib *) xcalloc(1, sizeof(struct tac_attrib));\n\n\tVAR_9 = time(NULL);\n\tgmtime_r(&VAR_9, &tm);\n\tstrftime(VAR_6, sizeof(VAR_6), \"%s\", &tm);\n\n\tif (VAR_1 == VAR_10) {\n\t\ttac_add_attrib(&VAR_7, \"start_time\", VAR_6);\n\t} else if (VAR_1 == VAR_11) {\n\t\ttac_add_attrib(&VAR_7, \"stop_time\", VAR_6);\n\t}\n\n\tif (VAR_12 == 0)\n\t\tsnprintf(VAR_6, sizeof(VAR_6), \"%d\", getpid());\n\telse\n\t\tsnprintf(VAR_6, sizeof(VAR_6), \"%hu\", VAR_12);\n\ttac_add_attrib(&VAR_7, \"task_id\", VAR_6);\n\n\ttac_add_attrib(&VAR_7, \"service\", VAR_13);\n\tif (VAR_14[0] != '\\0')\n\t\ttac_add_attrib(&VAR_7, \"protocol\", VAR_14);\n\tif (VAR_5 != NULL) {\n\t\ttac_add_attrib(&VAR_7, \"cmd\", VAR_5);\n\t}\n\n\tVAR_8 = tac_acct_send(VAR_0, VAR_1, VAR_2, VAR_3, VAR_4, VAR_7);\n\n\t/* COMMENT_0 */\n\ttac_free_attrib(&VAR_7);\n\n\tif (VAR_8 < 0) {\n\t\t_pam_log(VAR_15, \"%s: send %s accounting failed (task %hu)\",\n\t\t\t\tVAR_16, tac_acct_flag2str(VAR_1), VAR_12);\n\t\tclose(VAR_0);\n\t\treturn -1;\n\t}\n\n\tstruct areply VAR_17;\n\tif (tac_acct_read(VAR_0, &VAR_17) != VAR_18) {\n\t\t_pam_log(VAR_15, \"%s: accounting %s failed (task %hu)\",\n\t\t\t\tVAR_16, tac_acct_flag2str(VAR_1), VAR_12);\n\n\t\tif (VAR_17.msg != NULL)\n\t\t\tfree(VAR_17.msg);\n\n\t\tclose(VAR_0);\n\t\treturn -1;\n\t}\n\n\tif (VAR_17.msg != NULL)\n\t\tfree(VAR_17.msg);\n\n\tclose(VAR_0);\n\treturn 0;\n}",
  "func_graph_path": "kravietz/pam_tacplus/bceaab0cd51a09b88f40f19da799ac7390264bf8/pam_tacplus.c/vul/after/1.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -18,8 +18,13 @@\n \t} else if (type == TAC_PLUS_ACCT_FLAG_STOP) {\n \t\ttac_add_attrib(&attr, \"stop_time\", buf);\n \t}\n-\tsprintf(buf, \"%hu\", task_id);\n+\n+\tif (task_id == 0)\n+\t\tsnprintf(buf, sizeof(buf), \"%d\", getpid());\n+\telse\n+\t\tsnprintf(buf, sizeof(buf), \"%hu\", task_id);\n \ttac_add_attrib(&attr, \"task_id\", buf);\n+\n \ttac_add_attrib(&attr, \"service\", tac_service);\n \tif (tac_protocol[0] != '\\0')\n \t\ttac_add_attrib(&attr, \"protocol\", tac_protocol);",
  "diff_line_info": {
    "deleted_lines": [
      "\tsprintf(buf, \"%hu\", task_id);"
    ],
    "added_lines": [
      "",
      "\tif (task_id == 0)",
      "\t\tsnprintf(buf, sizeof(buf), \"%d\", getpid());",
      "\telse",
      "\t\tsnprintf(buf, sizeof(buf), \"%hu\", task_id);",
      ""
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/kravietz/pam_tacplus/pull/163",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/kravietz/pam_tacplus/pull/163: 403 Client Error: Forbidden for url: https://api.github.com/repos/kravietz/pam_tacplus/pulls/163",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 1.0"
}