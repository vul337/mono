{
  "cve_id": "CVE-2020-16124",
  "cwe_ids": [
    "CWE-190"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "ros/ros_comm",
  "commit_msg": "Trap for overly large input to XmlRPCPP which could cause problems with int <-> size_t conversions.\n\n - In XmlRpcClient, XmlRpcServerConnection and XmlRpcSocket, recognize when incoming or outgoing data is too large, generate an error and discard the data when practical.\n - Use the safe strtol() rather than atoi() to decode an incoming content-length header, and generate an error if the length is invalid or too large.\n - In XmlRpcUtil, prevent attempts to parse overly large XML input.\n - Add tests where they can reasonably be inserted into existing test routines.\n\nAlthough this fix could be cleaner the update is written to make the update ABI compatible.\n\nThis fix addresses CVE-2020-16124 / Integer overflow in ros_comm.\n\nSigned-off-by: Sid Faber <sid.faber@canonical.com>",
  "commit_hash": "3dd308911d7294bc6cff12f626b8467fe1555423",
  "git_url": "https://github.com/ros/ros_comm/commit/3dd308911d7294bc6cff12f626b8467fe1555423",
  "file_path": "utilities/xmlrpcpp/src/XmlRpcUtil.cpp",
  "func_name": "XmlRpcUtil::parseTag",
  "func_before": "std::string \nXmlRpcUtil::parseTag(const char* tag, std::string const& xml, int* offset)\n{\n  if (*offset >= int(xml.length())) return std::string();\n  size_t istart = xml.find(tag, *offset);\n  if (istart == std::string::npos) return std::string();\n  istart += strlen(tag);\n  std::string etag = \"</\";\n  etag += tag + 1;\n  size_t iend = xml.find(etag, istart);\n  if (iend == std::string::npos) return std::string();\n\n  *offset = int(iend + etag.length());\n  return xml.substr(istart, iend-istart);\n}",
  "abstract_func_before": "std::string \nXmlRpcUtil::parseTag(const char* VAR_0, std::string const& VAR_1, int* VAR_2)\n{\n  if (*VAR_2 >= int(VAR_1.length())) return std::string();\n  size_t VAR_3 = VAR_1.find(VAR_0, *VAR_2);\n  if (VAR_3 == std::string::npos) return std::string();\n  VAR_3 += strlen(VAR_0);\n  std::string VAR_4 = \"</\";\n  VAR_4 += VAR_0 + 1;\n  size_t VAR_5 = VAR_1.find(VAR_4, VAR_3);\n  if (VAR_5 == std::string::npos) return std::string();\n\n  *VAR_2 = int(VAR_5 + VAR_4.length());\n  return VAR_1.substr(VAR_3, VAR_5-VAR_3);\n}",
  "func_graph_path_before": "ros/ros_comm/3dd308911d7294bc6cff12f626b8467fe1555423/XmlRpcUtil.cpp/vul/before/0.json",
  "func": "std::string \nXmlRpcUtil::parseTag(const char* tag, std::string const& xml, int* offset)\n{\n  // avoid attempting to parse overly long xml input\n  if (xml.length() > size_t(__INT_MAX__)) return std::string();\n  if (*offset >= int(xml.length())) return std::string();\n  size_t istart = xml.find(tag, *offset);\n  if (istart == std::string::npos) return std::string();\n  istart += strlen(tag);\n  std::string etag = \"</\";\n  etag += tag + 1;\n  size_t iend = xml.find(etag, istart);\n  if (iend == std::string::npos) return std::string();\n\n  *offset = int(iend + etag.length());\n  return xml.substr(istart, iend-istart);\n}",
  "abstract_func": "std::string \nXmlRpcUtil::parseTag(const char* VAR_0, std::string const& VAR_1, int* VAR_2)\n{\n  /* COMMENT_0 */\n  if (VAR_1.length() > size_t(VAR_3)) return std::string();\n  if (*VAR_2 >= int(VAR_1.length())) return std::string();\n  size_t VAR_4 = VAR_1.find(VAR_0, *VAR_2);\n  if (VAR_4 == std::string::npos) return std::string();\n  VAR_4 += strlen(VAR_0);\n  std::string VAR_5 = \"</\";\n  VAR_5 += VAR_0 + 1;\n  size_t VAR_6 = VAR_1.find(VAR_5, VAR_4);\n  if (VAR_6 == std::string::npos) return std::string();\n\n  *VAR_2 = int(VAR_6 + VAR_5.length());\n  return VAR_1.substr(VAR_4, VAR_6-VAR_4);\n}",
  "func_graph_path": "ros/ros_comm/3dd308911d7294bc6cff12f626b8467fe1555423/XmlRpcUtil.cpp/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,6 +1,8 @@\n std::string \n XmlRpcUtil::parseTag(const char* tag, std::string const& xml, int* offset)\n {\n+  // avoid attempting to parse overly long xml input\n+  if (xml.length() > size_t(__INT_MAX__)) return std::string();\n   if (*offset >= int(xml.length())) return std::string();\n   size_t istart = xml.find(tag, *offset);\n   if (istart == std::string::npos) return std::string();",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "  // avoid attempting to parse overly long xml input",
      "  if (xml.length() > size_t(__INT_MAX__)) return std::string();"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/ros/ros_comm/pull/2065",
  "description": {
    "pr_info": {
      "title": "Trap for overly large input to XmlRPCPP",
      "number": 2065
    },
    "comment": [
      "Oversize input to XmlRPCPP could cause problems with int <-> size_t conversions.\r\n\r\n - Recognize when incoming or outgoing data is too large, generate an error and discard the data when practical.\r\n - Use the safe strtol() rather than atoi() to decode an incoming content-length header and generate an error if the length is invalid or too large.\r\n - Prevent attempts to parse overly large XML input.\r\n - Add tests where they can reasonably be inserted into existing test routines.\r\n\r\nAlthough this fix could be cleaner the update is written to make the update ABI compatible.\r\n\r\nThis fix addresses CVE-2020-16124 / Integer overflow in ros_comm.\r\n\r\nSigned-off-by: Sid Faber <sid.faber@canonical.com>",
      "> Atm CI is failing for two tests though.\r\n\r\n@dirk-thomas, thanks for the review. The overrun tests I added are causing memory allocation failures--they work on my local machine but I assume the CI tests don't expect to be handling 2Gb input values. Any suggestions on how best to handle, is it advisable to remove the overrun tests?",
      "> Any suggestions on how best to handle, is it advisable to remove the overrun tests?\r\n\r\nCan the code be written in a way that it fails gracefully if that much memory isn't available? Maybe marking the test as skipped.",
      "Debian Buster only has Googletest 1.8.1 which doesn't have `GTEST_SKIP`.\r\n\r\nThe `readResponse_oversize` test still fails in CI.",
      "I removed GTEST_SKIP, printed an error message but otherwise let the test succeed. Also I removed one test that was causing problems. The test_client routines for readResponse still run when objects are finalized; since the test object could be in an unpredictable state I couldn't find a good way to ignore the results.",
      "> I removed GTEST_SKIP, printed an error message but otherwise let the test succeed.\r\n\r\nThat sounds like a good fall backback behavior. Can you make this conditional based on if `GTEST_SKIP` is available? If it is use it to give better feedback, otherwise fall back to the error message / succeed.",
      "@dirk-thomas, I added the conditional statement in one of the tests but had to rip another one out--the Ubuntu tests started running long and got killed causing the whole module to fail. I think this is as good as I can get it unless you have any ideas on how to safely & consistently write tests for huge input strings.",
      "Sounds good to me. Thanks for the patch and for iterating on it."
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 1.0"
}