{
  "cve_id": "CVE-2022-23476",
  "cwe_ids": [
    "CWE-252",
    "CWE-476"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
  "cvss_is_v3": true,
  "repo_name": "sparklemotion/nokogiri",
  "commit_msg": "fix(cruby): XML::Reader#attribute_hash returns nil on error\n\nNote that on JRuby, the namespaces are still returned because the\nparse error would raised on the subsequent node expansion.\n\nThis restores the behavior from v1.13.7",
  "commit_hash": "9fe0761c47c0d4270d1a5220cfd25de080350d50",
  "git_url": "https://github.com/sparklemotion/nokogiri/commit/9fe0761c47c0d4270d1a5220cfd25de080350d50",
  "file_path": "ext/nokogiri/xml_reader.c",
  "func_name": "rb_xml_reader_attribute_hash",
  "func_before": "static VALUE\nrb_xml_reader_attribute_hash(VALUE rb_reader)\n{\n  VALUE rb_attributes = rb_hash_new();\n  xmlTextReaderPtr c_reader;\n  xmlNodePtr c_node;\n  xmlAttrPtr c_property;\n\n  Data_Get_Struct(rb_reader, xmlTextReader, c_reader);\n\n  if (!has_attributes(c_reader)) {\n    return rb_attributes;\n  }\n\n  c_node = xmlTextReaderExpand(c_reader);\n  c_property = c_node->properties;\n  while (c_property != NULL) {\n    VALUE rb_name = NOKOGIRI_STR_NEW2(c_property->name);\n    VALUE rb_value = Qnil;\n    xmlChar *c_value = xmlNodeGetContent((xmlNode *)c_property);\n\n    if (c_value) {\n      rb_value = NOKOGIRI_STR_NEW2(c_value);\n      xmlFree(c_value);\n    }\n\n    rb_hash_aset(rb_attributes, rb_name, rb_value);\n\n    c_property = c_property->next;\n  }\n\n  return rb_attributes;\n}",
  "abstract_func_before": "static VALUE\nrb_xml_reader_attribute_hash(VALUE VAR_0)\n{\n  VALUE VAR_1 = rb_hash_new();\n  xmlTextReaderPtr VAR_2;\n  xmlNodePtr VAR_3;\n  xmlAttrPtr VAR_4;\n\n  Data_Get_Struct(VAR_0, VAR_5, VAR_2);\n\n  if (!has_attributes(VAR_2)) {\n    return VAR_1;\n  }\n\n  VAR_3 = xmlTextReaderExpand(VAR_2);\n  VAR_4 = VAR_3->properties;\n  while (VAR_4 != NULL) {\n    VALUE VAR_6 = NOKOGIRI_STR_NEW2(VAR_4->name);\n    VALUE VAR_7 = VAR_8;\n    xmlChar *VAR_9 = xmlNodeGetContent((xmlNode *)VAR_4);\n\n    if (VAR_9) {\n      VAR_7 = NOKOGIRI_STR_NEW2(VAR_9);\n      xmlFree(VAR_9);\n    }\n\n    rb_hash_aset(VAR_1, VAR_6, VAR_7);\n\n    VAR_4 = VAR_4->next;\n  }\n\n  return VAR_1;\n}",
  "func_graph_path_before": "sparklemotion/nokogiri/9fe0761c47c0d4270d1a5220cfd25de080350d50/xml_reader.c/vul/before/0.json",
  "func": "static VALUE\nrb_xml_reader_attribute_hash(VALUE rb_reader)\n{\n  VALUE rb_attributes = rb_hash_new();\n  xmlTextReaderPtr c_reader;\n  xmlNodePtr c_node;\n  xmlAttrPtr c_property;\n\n  Data_Get_Struct(rb_reader, xmlTextReader, c_reader);\n\n  if (!has_attributes(c_reader)) {\n    return rb_attributes;\n  }\n\n  c_node = xmlTextReaderExpand(c_reader);\n  if (c_node == NULL) {\n    return Qnil;\n  }\n\n  c_property = c_node->properties;\n  while (c_property != NULL) {\n    VALUE rb_name = NOKOGIRI_STR_NEW2(c_property->name);\n    VALUE rb_value = Qnil;\n    xmlChar *c_value = xmlNodeGetContent((xmlNode *)c_property);\n\n    if (c_value) {\n      rb_value = NOKOGIRI_STR_NEW2(c_value);\n      xmlFree(c_value);\n    }\n\n    rb_hash_aset(rb_attributes, rb_name, rb_value);\n\n    c_property = c_property->next;\n  }\n\n  return rb_attributes;\n}",
  "abstract_func": "static VALUE\nrb_xml_reader_attribute_hash(VALUE VAR_0)\n{\n  VALUE VAR_1 = rb_hash_new();\n  xmlTextReaderPtr VAR_2;\n  xmlNodePtr VAR_3;\n  xmlAttrPtr VAR_4;\n\n  Data_Get_Struct(VAR_0, VAR_5, VAR_2);\n\n  if (!has_attributes(VAR_2)) {\n    return VAR_1;\n  }\n\n  VAR_3 = xmlTextReaderExpand(VAR_2);\n  if (VAR_3 == NULL) {\n    return VAR_6;\n  }\n\n  VAR_4 = VAR_3->properties;\n  while (VAR_4 != NULL) {\n    VALUE VAR_7 = NOKOGIRI_STR_NEW2(VAR_4->name);\n    VALUE VAR_8 = VAR_6;\n    xmlChar *VAR_9 = xmlNodeGetContent((xmlNode *)VAR_4);\n\n    if (VAR_9) {\n      VAR_8 = NOKOGIRI_STR_NEW2(VAR_9);\n      xmlFree(VAR_9);\n    }\n\n    rb_hash_aset(VAR_1, VAR_7, VAR_8);\n\n    VAR_4 = VAR_4->next;\n  }\n\n  return VAR_1;\n}",
  "func_graph_path": "sparklemotion/nokogiri/9fe0761c47c0d4270d1a5220cfd25de080350d50/xml_reader.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -13,6 +13,10 @@\n   }\n \n   c_node = xmlTextReaderExpand(c_reader);\n+  if (c_node == NULL) {\n+    return Qnil;\n+  }\n+\n   c_property = c_node->properties;\n   while (c_property != NULL) {\n     VALUE rb_name = NOKOGIRI_STR_NEW2(c_property->name);",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "  if (c_node == NULL) {",
      "    return Qnil;",
      "  }",
      ""
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/sparklemotion/nokogiri/pull/2715",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/sparklemotion/nokogiri/pull/2715: 403 Client Error: Forbidden for url: https://api.github.com/repos/sparklemotion/nokogiri/pulls/2715",
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "The patch restores consistent behavior in error handling by returning `nil` when a parse error occurs, ensuring applications relying on `attribute_hash` receive consistent results. It doesn't address a security flaw but fixes a functional issue. \n\n**Final Classification:** Defect Remediation & Feature Upgrades; **Confidence:** 0.9"
}