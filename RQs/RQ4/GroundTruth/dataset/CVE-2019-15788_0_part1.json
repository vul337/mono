{
  "cve_id": "CVE-2019-15788",
  "cwe_ids": [
    "CWE-190"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "NVIDIA-Genomics-Research/GenomeWorks",
  "commit_msg": "[cudapoa] replace size_t with int64_t",
  "commit_hash": "8524f2c0c690ff594a9ebc6d729351b07a1fc5f0",
  "git_url": "https://github.com/NVIDIA-Genomics-Research/GenomeWorks/commit/8524f2c0c690ff594a9ebc6d729351b07a1fc5f0",
  "file_path": "cudapoa/src/allocate_block.cpp",
  "func_name": "BatchBlock::get_alignment_details",
  "func_before": "void BatchBlock::get_alignment_details(AlignmentDetails** alignment_details_d_p)\n{\n    AlignmentDetails* alignment_details_d{};\n\n    // on host\n    alignment_details_d = reinterpret_cast<AlignmentDetails*>(&block_data_h_[offset_h_]);\n    offset_h_ += sizeof(AlignmentDetails);\n\n    // on device;\n    alignment_details_d->alignment_graph = reinterpret_cast<int16_t*>(&block_data_d_[offset_d_]);\n    offset_d_ += cudautils::align<size_t, 8>(sizeof(int16_t) * max_graph_dimension_ * max_poas_);\n    alignment_details_d->alignment_read = reinterpret_cast<int16_t*>(&block_data_d_[offset_d_]);\n    offset_d_ += cudautils::align<size_t, 8>(sizeof(int16_t) * max_graph_dimension_ * max_poas_);\n\n    // rest of the available memory is assigned to scores buffer\n    alignment_details_d->scorebuf_alloc_size = total_d_ - offset_d_;\n    alignment_details_d->scores              = reinterpret_cast<int16_t*>(&block_data_d_[offset_d_]);\n    *alignment_details_d_p                   = alignment_details_d;\n}",
  "abstract_func_before": "void BatchBlock::get_alignment_details(AlignmentDetails** VAR_0)\n{\n    AlignmentDetails* VAR_1{};\n\n    /* COMMENT_0 */\n    VAR_1 = VAR_2<AlignmentDetails*>(&VAR_3[VAR_4]);\n    VAR_4 += sizeof(AlignmentDetails);\n\n    /* COMMENT_1 */\n    VAR_1->alignment_graph = VAR_2<int16_t*>(&VAR_5[VAR_6]);\n    VAR_6 += cudautils::VAR_7<size_t, 8>(sizeof(int16_t) * VAR_8 * VAR_9);\n    VAR_1->alignment_read = VAR_2<int16_t*>(&VAR_5[VAR_6]);\n    VAR_6 += cudautils::VAR_7<size_t, 8>(sizeof(int16_t) * VAR_8 * VAR_9);\n\n    /* COMMENT_2 */\n    VAR_1->scorebuf_alloc_size = VAR_10 - VAR_6;\n    VAR_1->scores              = VAR_2<int16_t*>(&VAR_5[VAR_6]);\n    *VAR_0                   = VAR_1;\n}",
  "func_graph_path_before": "NVIDIA-Genomics-Research/GenomeWorks/8524f2c0c690ff594a9ebc6d729351b07a1fc5f0/allocate_block.cpp/vul/before/0.json",
  "func": "void BatchBlock::get_alignment_details(AlignmentDetails** alignment_details_d_p)\n{\n    AlignmentDetails* alignment_details_d{};\n\n    // on host\n    alignment_details_d = reinterpret_cast<AlignmentDetails*>(&block_data_h_[offset_h_]);\n    offset_h_ += sizeof(AlignmentDetails);\n\n    // on device;\n    alignment_details_d->alignment_graph = reinterpret_cast<int16_t*>(&block_data_d_[offset_d_]);\n    offset_d_ += cudautils::align<int64_t, 8>(sizeof(int16_t) * max_graph_dimension_ * max_poas_);\n    alignment_details_d->alignment_read = reinterpret_cast<int16_t*>(&block_data_d_[offset_d_]);\n    offset_d_ += cudautils::align<int64_t, 8>(sizeof(int16_t) * max_graph_dimension_ * max_poas_);\n\n    // rest of the available memory is assigned to scores buffer\n    alignment_details_d->scorebuf_alloc_size = total_d_ - offset_d_;\n    alignment_details_d->scores              = reinterpret_cast<int16_t*>(&block_data_d_[offset_d_]);\n    *alignment_details_d_p                   = alignment_details_d;\n}",
  "abstract_func": "void BatchBlock::get_alignment_details(AlignmentDetails** VAR_0)\n{\n    AlignmentDetails* VAR_1{};\n\n    /* COMMENT_0 */\n    VAR_1 = VAR_2<AlignmentDetails*>(&VAR_3[VAR_4]);\n    VAR_4 += sizeof(AlignmentDetails);\n\n    /* COMMENT_1 */\n    VAR_1->alignment_graph = VAR_2<int16_t*>(&VAR_5[VAR_6]);\n    VAR_6 += cudautils::VAR_7<int64_t, 8>(sizeof(int16_t) * VAR_8 * VAR_9);\n    VAR_1->alignment_read = VAR_2<int16_t*>(&VAR_5[VAR_6]);\n    VAR_6 += cudautils::VAR_7<int64_t, 8>(sizeof(int16_t) * VAR_8 * VAR_9);\n\n    /* COMMENT_2 */\n    VAR_1->scorebuf_alloc_size = VAR_10 - VAR_6;\n    VAR_1->scores              = VAR_2<int16_t*>(&VAR_5[VAR_6]);\n    *VAR_0                   = VAR_1;\n}",
  "func_graph_path": "NVIDIA-Genomics-Research/GenomeWorks/8524f2c0c690ff594a9ebc6d729351b07a1fc5f0/allocate_block.cpp/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -8,9 +8,9 @@\n \n     // on device;\n     alignment_details_d->alignment_graph = reinterpret_cast<int16_t*>(&block_data_d_[offset_d_]);\n-    offset_d_ += cudautils::align<size_t, 8>(sizeof(int16_t) * max_graph_dimension_ * max_poas_);\n+    offset_d_ += cudautils::align<int64_t, 8>(sizeof(int16_t) * max_graph_dimension_ * max_poas_);\n     alignment_details_d->alignment_read = reinterpret_cast<int16_t*>(&block_data_d_[offset_d_]);\n-    offset_d_ += cudautils::align<size_t, 8>(sizeof(int16_t) * max_graph_dimension_ * max_poas_);\n+    offset_d_ += cudautils::align<int64_t, 8>(sizeof(int16_t) * max_graph_dimension_ * max_poas_);\n \n     // rest of the available memory is assigned to scores buffer\n     alignment_details_d->scorebuf_alloc_size = total_d_ - offset_d_;",
  "diff_line_info": {
    "deleted_lines": [
      "    offset_d_ += cudautils::align<size_t, 8>(sizeof(int16_t) * max_graph_dimension_ * max_poas_);",
      "    offset_d_ += cudautils::align<size_t, 8>(sizeof(int16_t) * max_graph_dimension_ * max_poas_);"
    ],
    "added_lines": [
      "    offset_d_ += cudautils::align<int64_t, 8>(sizeof(int16_t) * max_graph_dimension_ * max_poas_);",
      "    offset_d_ += cudautils::align<int64_t, 8>(sizeof(int16_t) * max_graph_dimension_ * max_poas_);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/NVIDIA-Genomics-Research/GenomeWorks/pull/70",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/NVIDIA-Genomics-Research/GenomeWorks/pull/70: 403 Client Error: Forbidden for url: https://api.github.com/repos/NVIDIA-Genomics-Research/GenomeWorks/pulls/70",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.95  \n\nThe patch addresses an integer overflow issue in memory management, which is a security concern, by changing the type to prevent overflow. The changes are consistent with the vulnerability description."
}