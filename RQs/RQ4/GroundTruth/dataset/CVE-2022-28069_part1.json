{
  "cve_id": "CVE-2022-28069",
  "cwe_ids": [
    "CWE-787"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
  "cvss_is_v3": true,
  "repo_name": "radareorg/radare2",
  "commit_msg": "Fix oobread in VAX disassembler (tests_64920) ##crash\n\nReported by giantbranch of NSFOCUS TIANJI Lab",
  "commit_hash": "49b0cebfdf0db9704e36f8a5533f1df6d3e2ed3a",
  "git_url": "https://github.com/radareorg/radare2/commit/49b0cebfdf0db9704e36f8a5533f1df6d3e2ed3a",
  "file_path": "libr/anal/p/anal_vax.c",
  "func_name": "vax_op",
  "func_before": "static int vax_op(RAnal *anal, RAnalOp *op, ut64 addr, const ut8 *buf, int len, RAnalOpMask mask) {\n\top->size = 1;\n\tif (len < 1) {\n\t\treturn -1;\n\t}\n\top->addr = addr;\n\top->type = R_ANAL_OP_TYPE_UNK;\n\tswitch (buf[0]) {\n\tcase 0x04:\n\t\top->type = R_ANAL_OP_TYPE_RET;\n\t\tbreak;\n\tcase 0x2e:\n\t\top->type = R_ANAL_OP_TYPE_MOV;\n\t\top->size = 8;\n\t\tbreak;\n\tcase 0x78:\n\t\top->type = R_ANAL_OP_TYPE_SHL;\n\t\top->size = 8;\n\t\tbreak;\n\tcase 0xc0:\n\tcase 0xc1:\n\tcase 0xd8:\n\t\top->type = R_ANAL_OP_TYPE_ADD;\n\t\top->size = 8;\n\t\tbreak;\n\tcase 0xd7:\n\t\top->type = R_ANAL_OP_TYPE_SUB; // dec\n\t\top->size = 2;\n\t\tbreak;\n\tcase 0x00:\n\tcase 0x01:\n\t\t// op->type = R_ANAL_OP_TYPE_TRAP; // HALT\n\t\top->size = 1;\n\t\top->type = R_ANAL_OP_TYPE_NOP;\n\t\tbreak;\n\tcase 0xac:\n\t\top->type = R_ANAL_OP_TYPE_XOR;\n\t\top->size = 4;\n\t\tbreak;\n\tcase 0x5a:\n\t\top->size = 2;\n\t\tbreak;\n\tcase 0x11:\n\tcase 0x12:\n\tcase 0x13:\n\tcase 0x14:\n\tcase 0x15:\n\tcase 0x16:\n\tcase 0x17:\n\tcase 0x18:\n\tcase 0x19:\n\tcase 0x1e:\n\t\top->size = 2;\n\t\top->type = R_ANAL_OP_TYPE_CJMP;\n\t\top->jump = op->addr + op->size + ((char)buf[1]);\n\t\top->fail = op->addr + op->size;\n\t\tbreak;\n\tcase 0xd0: // mcoml\n\t\top->size = 7;\n\t\top->type = R_ANAL_OP_TYPE_MOV;\n\t\tbreak;\n\tcase 0xd4: // \n\t\top->size = 3;\n\t\top->type = R_ANAL_OP_TYPE_NOP;\n\t\tbreak;\n\tcase 0xc2: // subl2 r0, r7\n\t\top->size = 3;\n\t\top->type = R_ANAL_OP_TYPE_SUB;\n\t\tbreak;\n\tcase 0xca: // bicl\n\t\top->size = 3;\n\t\top->type = R_ANAL_OP_TYPE_SUB;\n\t\tbreak;\n\tcase 0x31:\n\tcase 0xe9:\n\t\top->size = 3;\n\t\top->type = R_ANAL_OP_TYPE_CJMP;\n\t\tif (len > 2) {\n\t\t\top->jump = op->addr + op->size + ((buf[1] << 8) + buf[2]);\n\t\t\top->fail = op->addr + op->size;\n\t\t}\n\t\tbreak;\n\tcase 0xc6:\n\tcase 0xc7:\n\t\top->size = 8;\n\t\top->type = R_ANAL_OP_TYPE_DIV;\n\t\tbreak;\n\tcase 0x94: // movb\n\tcase 0x7d: // movb\n\t\top->size = 3;\n\t\top->type = R_ANAL_OP_TYPE_MOV;\n\t\tbreak;\n\tcase 0x90:\n\tcase 0x9e:\n\tcase 0xde:\n\t\top->size = 7;\n\t\top->type = R_ANAL_OP_TYPE_MOV;\n\t\tbreak;\n\tcase 0xdd:\n\tcase 0x9f:\n\tcase 0xdf:\n\t\top->size = 6;\n\t\top->type = R_ANAL_OP_TYPE_PUSH;\n\t\tbreak;\n\tcase 0xd1:\n\tcase 0xd5:\n\tcase 0x91:\n\tcase 0x51:\n\tcase 0x73:\n\t\top->type = R_ANAL_OP_TYPE_CMP;\n\t\top->size = 3;\n\t\tbreak;\n\tcase 0x95: // tstb\n\t\top->type = R_ANAL_OP_TYPE_CMP;\n\t\top->size = 6;\n\t\tbreak;\n\tcase 0xd6:\n\tcase 0x61:\n\t\top->size = 2;\n\t\top->type = R_ANAL_OP_TYPE_ADD;\n\t\tbreak;\n\tcase 0x40:\n\t\top->size = 5;\n\t\top->type = R_ANAL_OP_TYPE_ADD;\n\t\tbreak;\n\tcase 0x9a:\n\t\top->size = 4;\n\t\top->type = R_ANAL_OP_TYPE_MOV;\n\t\tbreak;\n\tcase 0x83:\n\t\top->type = R_ANAL_OP_TYPE_SUB;\n\t\top->size = 5;\n\t\tbreak;\n\tcase 0x62:\n\t\top->type = R_ANAL_OP_TYPE_SUB;\n\t\tbreak;\n\tcase 0xfb: // calls\n\t\top->type = R_ANAL_OP_TYPE_CALL;\n\t\top->size = 7;\n\t\t{\n\t\t\tint oa = 3;\n\t\t\tut32 delta = buf[oa];\n\t\t\tdelta |= (ut32)(buf[oa + 1]) << 8;\n\t\t\tdelta |= (ut32)(buf[oa + 2]) << 16;\n\t\t\tdelta |= (ut32)(buf[oa + 3]) << 24;\n\t\t\tdelta += op->size;\n\t\t\top->jump = op->addr + delta;\n\t\t}\n\t\top->fail = op->addr + op->size;\n\t\tbreak;\n\tcase 0xff:\n\t\top->size = 2;\n\t\tbreak;\n\t}\n\treturn op->size;\n}",
  "abstract_func_before": "static int vax_op(RAnal *VAR_0, RAnalOp *VAR_1, ut64 VAR_2, const ut8 *VAR_3, int VAR_4, RAnalOpMask VAR_5) {\n\tVAR_1->size = 1;\n\tif (VAR_4 < 1) {\n\t\treturn -1;\n\t}\n\tVAR_1->addr = VAR_2;\n\tVAR_1->type = VAR_6;\n\tswitch (VAR_3[0]) {\n\tcase 0x04:\n\t\tVAR_1->type = VAR_7;\n\t\tbreak;\n\tcase 0x2e:\n\t\tVAR_1->type = VAR_8;\n\t\tVAR_1->size = 8;\n\t\tbreak;\n\tcase 0x78:\n\t\tVAR_1->type = VAR_9;\n\t\tVAR_1->size = 8;\n\t\tbreak;\n\tcase 0xc0:\n\tcase 0xc1:\n\tcase 0xd8:\n\t\tVAR_1->type = VAR_10;\n\t\tVAR_1->size = 8;\n\t\tbreak;\n\tcase 0xd7:\n\t\tVAR_1->type = VAR_11; /* COMMENT_0 */\n\t\tVAR_1->size = 2;\n\t\tbreak;\n\tcase 0x00:\n\tcase 0x01:\n\t\t/* COMMENT_1 */\n\t\tVAR_1->size = 1;\n\t\tVAR_1->type = VAR_12;\n\t\tbreak;\n\tcase 0xac:\n\t\tVAR_1->type = VAR_13;\n\t\tVAR_1->size = 4;\n\t\tbreak;\n\tcase 0x5a:\n\t\tVAR_1->size = 2;\n\t\tbreak;\n\tcase 0x11:\n\tcase 0x12:\n\tcase 0x13:\n\tcase 0x14:\n\tcase 0x15:\n\tcase 0x16:\n\tcase 0x17:\n\tcase 0x18:\n\tcase 0x19:\n\tcase 0x1e:\n\t\tVAR_1->size = 2;\n\t\tVAR_1->type = VAR_14;\n\t\tVAR_1->jump = VAR_1->addr + VAR_1->size + ((char)VAR_3[1]);\n\t\tVAR_1->fail = VAR_1->addr + VAR_1->size;\n\t\tbreak;\n\tcase 0xd0: /* COMMENT_2 */\n\t\tVAR_1->size = 7;\n\t\tVAR_1->type = VAR_8;\n\t\tbreak;\n\tcase 0xd4: /* COMMENT_3 */\n\t\tVAR_1->size = 3;\n\t\tVAR_1->type = VAR_12;\n\t\tbreak;\n\tcase 0xc2: /* COMMENT_4 */\n\t\tVAR_1->size = 3;\n\t\tVAR_1->type = VAR_11;\n\t\tbreak;\n\tcase 0xca: /* COMMENT_5 */\n\t\tVAR_1->size = 3;\n\t\tVAR_1->type = VAR_11;\n\t\tbreak;\n\tcase 0x31:\n\tcase 0xe9:\n\t\tVAR_1->size = 3;\n\t\tVAR_1->type = VAR_14;\n\t\tif (VAR_4 > 2) {\n\t\t\tVAR_1->jump = VAR_1->addr + VAR_1->size + ((VAR_3[1] << 8) + VAR_3[2]);\n\t\t\tVAR_1->fail = VAR_1->addr + VAR_1->size;\n\t\t}\n\t\tbreak;\n\tcase 0xc6:\n\tcase 0xc7:\n\t\tVAR_1->size = 8;\n\t\tVAR_1->type = VAR_15;\n\t\tbreak;\n\tcase 0x94: /* COMMENT_6 */\n\tcase 0x7d: /* COMMENT_6 */\n\t\tVAR_1->size = 3;\n\t\tVAR_1->type = VAR_8;\n\t\tbreak;\n\tcase 0x90:\n\tcase 0x9e:\n\tcase 0xde:\n\t\tVAR_1->size = 7;\n\t\tVAR_1->type = VAR_8;\n\t\tbreak;\n\tcase 0xdd:\n\tcase 0x9f:\n\tcase 0xdf:\n\t\tVAR_1->size = 6;\n\t\tVAR_1->type = VAR_16;\n\t\tbreak;\n\tcase 0xd1:\n\tcase 0xd5:\n\tcase 0x91:\n\tcase 0x51:\n\tcase 0x73:\n\t\tVAR_1->type = VAR_17;\n\t\tVAR_1->size = 3;\n\t\tbreak;\n\tcase 0x95: /* COMMENT_7 */\n\t\tVAR_1->type = VAR_17;\n\t\tVAR_1->size = 6;\n\t\tbreak;\n\tcase 0xd6:\n\tcase 0x61:\n\t\tVAR_1->size = 2;\n\t\tVAR_1->type = VAR_10;\n\t\tbreak;\n\tcase 0x40:\n\t\tVAR_1->size = 5;\n\t\tVAR_1->type = VAR_10;\n\t\tbreak;\n\tcase 0x9a:\n\t\tVAR_1->size = 4;\n\t\tVAR_1->type = VAR_8;\n\t\tbreak;\n\tcase 0x83:\n\t\tVAR_1->type = VAR_11;\n\t\tVAR_1->size = 5;\n\t\tbreak;\n\tcase 0x62:\n\t\tVAR_1->type = VAR_11;\n\t\tbreak;\n\tcase 0xfb: /* COMMENT_8 */\n\t\tVAR_1->type = VAR_18;\n\t\tVAR_1->size = 7;\n\t\t{\n\t\t\tint VAR_19 = 3;\n\t\t\tut32 VAR_20 = VAR_3[VAR_19];\n\t\t\tVAR_20 |= (ut32)(VAR_3[VAR_19 + 1]) << 8;\n\t\t\tVAR_20 |= (ut32)(VAR_3[VAR_19 + 2]) << 16;\n\t\t\tVAR_20 |= (ut32)(VAR_3[VAR_19 + 3]) << 24;\n\t\t\tVAR_20 += VAR_1->size;\n\t\t\tVAR_1->jump = VAR_1->addr + VAR_20;\n\t\t}\n\t\tVAR_1->fail = VAR_1->addr + VAR_1->size;\n\t\tbreak;\n\tcase 0xff:\n\t\tVAR_1->size = 2;\n\t\tbreak;\n\t}\n\treturn VAR_1->size;\n}",
  "func_graph_path_before": "radareorg/radare2/49b0cebfdf0db9704e36f8a5533f1df6d3e2ed3a/anal_vax.c/vul/before/0.json",
  "func": "static int vax_op(RAnal *anal, RAnalOp *op, ut64 addr, const ut8 *buf, int len, RAnalOpMask mask) {\n\top->size = 1;\n\tif (len < 1) {\n\t\treturn -1;\n\t}\n\top->addr = addr;\n\top->type = R_ANAL_OP_TYPE_UNK;\n\tswitch (buf[0]) {\n\tcase 0x04:\n\t\top->type = R_ANAL_OP_TYPE_RET;\n\t\tbreak;\n\tcase 0x2e:\n\t\top->type = R_ANAL_OP_TYPE_MOV;\n\t\top->size = 8;\n\t\tbreak;\n\tcase 0x78:\n\t\top->type = R_ANAL_OP_TYPE_SHL;\n\t\top->size = 8;\n\t\tbreak;\n\tcase 0xc0:\n\tcase 0xc1:\n\tcase 0xd8:\n\t\top->type = R_ANAL_OP_TYPE_ADD;\n\t\top->size = 8;\n\t\tbreak;\n\tcase 0xd7:\n\t\top->type = R_ANAL_OP_TYPE_SUB; // dec\n\t\top->size = 2;\n\t\tbreak;\n\tcase 0x00:\n\tcase 0x01:\n\t\t// op->type = R_ANAL_OP_TYPE_TRAP; // HALT\n\t\top->size = 1;\n\t\top->type = R_ANAL_OP_TYPE_NOP;\n\t\tbreak;\n\tcase 0xac:\n\t\top->type = R_ANAL_OP_TYPE_XOR;\n\t\top->size = 4;\n\t\tbreak;\n\tcase 0x5a:\n\t\top->size = 2;\n\t\tbreak;\n\tcase 0x11:\n\tcase 0x12:\n\tcase 0x13:\n\tcase 0x14:\n\tcase 0x15:\n\tcase 0x16:\n\tcase 0x17:\n\tcase 0x18:\n\tcase 0x19:\n\tcase 0x1e:\n\t\top->size = 2;\n\t\top->type = R_ANAL_OP_TYPE_CJMP;\n\t\top->jump = op->addr + op->size + ((char)buf[1]);\n\t\top->fail = op->addr + op->size;\n\t\tbreak;\n\tcase 0xd0: // mcoml\n\t\top->size = 7;\n\t\top->type = R_ANAL_OP_TYPE_MOV;\n\t\tbreak;\n\tcase 0xd4: // \n\t\top->size = 3;\n\t\top->type = R_ANAL_OP_TYPE_NOP;\n\t\tbreak;\n\tcase 0xc2: // subl2 r0, r7\n\t\top->size = 3;\n\t\top->type = R_ANAL_OP_TYPE_SUB;\n\t\tbreak;\n\tcase 0xca: // bicl\n\t\top->size = 3;\n\t\top->type = R_ANAL_OP_TYPE_SUB;\n\t\tbreak;\n\tcase 0x31:\n\tcase 0xe9:\n\t\top->size = 3;\n\t\top->type = R_ANAL_OP_TYPE_CJMP;\n\t\tif (len > 2) {\n\t\t\top->jump = op->addr + op->size + ((buf[1] << 8) + buf[2]);\n\t\t\top->fail = op->addr + op->size;\n\t\t}\n\t\tbreak;\n\tcase 0xc6:\n\tcase 0xc7:\n\t\top->size = 8;\n\t\top->type = R_ANAL_OP_TYPE_DIV;\n\t\tbreak;\n\tcase 0x94: // movb\n\tcase 0x7d: // movb\n\t\top->size = 3;\n\t\top->type = R_ANAL_OP_TYPE_MOV;\n\t\tbreak;\n\tcase 0x90:\n\tcase 0x9e:\n\tcase 0xde:\n\t\top->size = 7;\n\t\top->type = R_ANAL_OP_TYPE_MOV;\n\t\tbreak;\n\tcase 0xdd:\n\tcase 0x9f:\n\tcase 0xdf:\n\t\top->size = 6;\n\t\top->type = R_ANAL_OP_TYPE_PUSH;\n\t\tbreak;\n\tcase 0xd1:\n\tcase 0xd5:\n\tcase 0x91:\n\tcase 0x51:\n\tcase 0x73:\n\t\top->type = R_ANAL_OP_TYPE_CMP;\n\t\top->size = 3;\n\t\tbreak;\n\tcase 0x95: // tstb\n\t\top->type = R_ANAL_OP_TYPE_CMP;\n\t\top->size = 6;\n\t\tbreak;\n\tcase 0xd6:\n\tcase 0x61:\n\t\top->size = 2;\n\t\top->type = R_ANAL_OP_TYPE_ADD;\n\t\tbreak;\n\tcase 0x40:\n\t\top->size = 5;\n\t\top->type = R_ANAL_OP_TYPE_ADD;\n\t\tbreak;\n\tcase 0x9a:\n\t\top->size = 4;\n\t\top->type = R_ANAL_OP_TYPE_MOV;\n\t\tbreak;\n\tcase 0x83:\n\t\top->type = R_ANAL_OP_TYPE_SUB;\n\t\top->size = 5;\n\t\tbreak;\n\tcase 0x62:\n\t\top->type = R_ANAL_OP_TYPE_SUB;\n\t\tbreak;\n\tcase 0xfb: // calls\n\t\top->type = R_ANAL_OP_TYPE_CALL;\n\t\top->size = 7;\n\t\tif (len > 6) {\n\t\t\tint oa = 3;\n\t\t\tut32 delta = buf[oa];\n\t\t\tdelta |= (ut32)(buf[oa + 1]) << 8;\n\t\t\tdelta |= (ut32)(buf[oa + 2]) << 16;\n\t\t\tdelta |= (ut32)(buf[oa + 3]) << 24;\n\t\t\tdelta += op->size;\n\t\t\top->jump = op->addr + delta;\n\t\t}\n\t\top->fail = op->addr + op->size;\n\t\tbreak;\n\tcase 0xff:\n\t\top->size = 2;\n\t\tbreak;\n\t}\n\treturn op->size;\n}",
  "abstract_func": "static int vax_op(RAnal *VAR_0, RAnalOp *VAR_1, ut64 VAR_2, const ut8 *VAR_3, int VAR_4, RAnalOpMask VAR_5) {\n\tVAR_1->size = 1;\n\tif (VAR_4 < 1) {\n\t\treturn -1;\n\t}\n\tVAR_1->addr = VAR_2;\n\tVAR_1->type = VAR_6;\n\tswitch (VAR_3[0]) {\n\tcase 0x04:\n\t\tVAR_1->type = VAR_7;\n\t\tbreak;\n\tcase 0x2e:\n\t\tVAR_1->type = VAR_8;\n\t\tVAR_1->size = 8;\n\t\tbreak;\n\tcase 0x78:\n\t\tVAR_1->type = VAR_9;\n\t\tVAR_1->size = 8;\n\t\tbreak;\n\tcase 0xc0:\n\tcase 0xc1:\n\tcase 0xd8:\n\t\tVAR_1->type = VAR_10;\n\t\tVAR_1->size = 8;\n\t\tbreak;\n\tcase 0xd7:\n\t\tVAR_1->type = VAR_11; /* COMMENT_0 */\n\t\tVAR_1->size = 2;\n\t\tbreak;\n\tcase 0x00:\n\tcase 0x01:\n\t\t/* COMMENT_1 */\n\t\tVAR_1->size = 1;\n\t\tVAR_1->type = VAR_12;\n\t\tbreak;\n\tcase 0xac:\n\t\tVAR_1->type = VAR_13;\n\t\tVAR_1->size = 4;\n\t\tbreak;\n\tcase 0x5a:\n\t\tVAR_1->size = 2;\n\t\tbreak;\n\tcase 0x11:\n\tcase 0x12:\n\tcase 0x13:\n\tcase 0x14:\n\tcase 0x15:\n\tcase 0x16:\n\tcase 0x17:\n\tcase 0x18:\n\tcase 0x19:\n\tcase 0x1e:\n\t\tVAR_1->size = 2;\n\t\tVAR_1->type = VAR_14;\n\t\tVAR_1->jump = VAR_1->addr + VAR_1->size + ((char)VAR_3[1]);\n\t\tVAR_1->fail = VAR_1->addr + VAR_1->size;\n\t\tbreak;\n\tcase 0xd0: /* COMMENT_2 */\n\t\tVAR_1->size = 7;\n\t\tVAR_1->type = VAR_8;\n\t\tbreak;\n\tcase 0xd4: /* COMMENT_3 */\n\t\tVAR_1->size = 3;\n\t\tVAR_1->type = VAR_12;\n\t\tbreak;\n\tcase 0xc2: /* COMMENT_4 */\n\t\tVAR_1->size = 3;\n\t\tVAR_1->type = VAR_11;\n\t\tbreak;\n\tcase 0xca: /* COMMENT_5 */\n\t\tVAR_1->size = 3;\n\t\tVAR_1->type = VAR_11;\n\t\tbreak;\n\tcase 0x31:\n\tcase 0xe9:\n\t\tVAR_1->size = 3;\n\t\tVAR_1->type = VAR_14;\n\t\tif (VAR_4 > 2) {\n\t\t\tVAR_1->jump = VAR_1->addr + VAR_1->size + ((VAR_3[1] << 8) + VAR_3[2]);\n\t\t\tVAR_1->fail = VAR_1->addr + VAR_1->size;\n\t\t}\n\t\tbreak;\n\tcase 0xc6:\n\tcase 0xc7:\n\t\tVAR_1->size = 8;\n\t\tVAR_1->type = VAR_15;\n\t\tbreak;\n\tcase 0x94: /* COMMENT_6 */\n\tcase 0x7d: /* COMMENT_6 */\n\t\tVAR_1->size = 3;\n\t\tVAR_1->type = VAR_8;\n\t\tbreak;\n\tcase 0x90:\n\tcase 0x9e:\n\tcase 0xde:\n\t\tVAR_1->size = 7;\n\t\tVAR_1->type = VAR_8;\n\t\tbreak;\n\tcase 0xdd:\n\tcase 0x9f:\n\tcase 0xdf:\n\t\tVAR_1->size = 6;\n\t\tVAR_1->type = VAR_16;\n\t\tbreak;\n\tcase 0xd1:\n\tcase 0xd5:\n\tcase 0x91:\n\tcase 0x51:\n\tcase 0x73:\n\t\tVAR_1->type = VAR_17;\n\t\tVAR_1->size = 3;\n\t\tbreak;\n\tcase 0x95: /* COMMENT_7 */\n\t\tVAR_1->type = VAR_17;\n\t\tVAR_1->size = 6;\n\t\tbreak;\n\tcase 0xd6:\n\tcase 0x61:\n\t\tVAR_1->size = 2;\n\t\tVAR_1->type = VAR_10;\n\t\tbreak;\n\tcase 0x40:\n\t\tVAR_1->size = 5;\n\t\tVAR_1->type = VAR_10;\n\t\tbreak;\n\tcase 0x9a:\n\t\tVAR_1->size = 4;\n\t\tVAR_1->type = VAR_8;\n\t\tbreak;\n\tcase 0x83:\n\t\tVAR_1->type = VAR_11;\n\t\tVAR_1->size = 5;\n\t\tbreak;\n\tcase 0x62:\n\t\tVAR_1->type = VAR_11;\n\t\tbreak;\n\tcase 0xfb: /* COMMENT_8 */\n\t\tVAR_1->type = VAR_18;\n\t\tVAR_1->size = 7;\n\t\tif (VAR_4 > 6) {\n\t\t\tint VAR_19 = 3;\n\t\t\tut32 VAR_20 = VAR_3[VAR_19];\n\t\t\tVAR_20 |= (ut32)(VAR_3[VAR_19 + 1]) << 8;\n\t\t\tVAR_20 |= (ut32)(VAR_3[VAR_19 + 2]) << 16;\n\t\t\tVAR_20 |= (ut32)(VAR_3[VAR_19 + 3]) << 24;\n\t\t\tVAR_20 += VAR_1->size;\n\t\t\tVAR_1->jump = VAR_1->addr + VAR_20;\n\t\t}\n\t\tVAR_1->fail = VAR_1->addr + VAR_1->size;\n\t\tbreak;\n\tcase 0xff:\n\t\tVAR_1->size = 2;\n\t\tbreak;\n\t}\n\treturn VAR_1->size;\n}",
  "func_graph_path": "radareorg/radare2/49b0cebfdf0db9704e36f8a5533f1df6d3e2ed3a/anal_vax.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -137,7 +137,7 @@\n \tcase 0xfb: // calls\n \t\top->type = R_ANAL_OP_TYPE_CALL;\n \t\top->size = 7;\n-\t\t{\n+\t\tif (len > 6) {\n \t\t\tint oa = 3;\n \t\t\tut32 delta = buf[oa];\n \t\t\tdelta |= (ut32)(buf[oa + 1]) << 8;",
  "diff_line_info": {
    "deleted_lines": [
      "\t\t{"
    ],
    "added_lines": [
      "\t\tif (len > 6) {"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/radareorg/radare2/pull/19342",
  "description": {
    "pr_info": {
      "title": "Soft crashfixes",
      "number": 19342
    },
    "comment": [
      "<!-- Please read the contributing guidelines:\r\n* https://github.com/radareorg/radare2/blob/master/DEVELOPERS.md\r\nIn short:\r\n* PR title must be capitalized, concise and use ##tags\r\n* Follow the coding style, add tests and documentation if necessary\r\n-->\r\n\r\n**Checklist**\r\n\r\n- [ ] Closing issues: #issue\r\n- [ ] Mark this if you consider it ready to merge\r\n- [ ] I've added tests (optional)\r\n- [ ] I wrote some lines in the [radare2book](https://github.com/radareorg/radare2book)\r\n\r\n**Description**\r\n\r\n<!-- Explain the **details** to understand the purpose of this contribution, with enough information to help us understand better the changes. -->\r\n"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 0.95"
}