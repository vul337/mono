{
  "cve_id": "CVE-2020-10577",
  "cwe_ids": [
    "CWE-362"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:P/I:P/A:N",
  "cvss_is_v3": false,
  "repo_name": "meetecho/janus-gateway",
  "commit_msg": "Fix rare race condition when claiming sessions",
  "commit_hash": "bc319056603295953f4a70999bc4553785c6e5ef",
  "git_url": "https://github.com/meetecho/janus-gateway/commit/bc319056603295953f4a70999bc4553785c6e5ef",
  "file_path": "janus.c",
  "func_name": "janus_transport_gone",
  "func_before": "void janus_transport_gone(janus_transport *plugin, janus_transport_session *transport) {\n\t/* Get rid of sessions this transport was handling */\n\tJANUS_LOG(LOG_VERB, \"A %s transport instance has gone away (%p)\\n\", plugin->get_package(), transport);\n\tjanus_mutex_lock(&sessions_mutex);\n\tif(sessions && g_hash_table_size(sessions) > 0) {\n\t\tGHashTableIter iter;\n\t\tgpointer value;\n\t\tg_hash_table_iter_init(&iter, sessions);\n\t\twhile(g_hash_table_iter_next(&iter, NULL, &value)) {\n\t\t\tjanus_session *session = (janus_session *) value;\n\t\t\tif(!session || g_atomic_int_get(&session->destroyed) || g_atomic_int_get(&session->timeout) || session->last_activity == 0)\n\t\t\t\tcontinue;\n\t\t\tif(session->source && session->source->instance == transport) {\n\t\t\t\tJANUS_LOG(LOG_VERB, \"  -- Session %\"SCNu64\" will be over if not reclaimed\\n\", session->session_id);\n\t\t\t\tJANUS_LOG(LOG_VERB, \"  -- Marking Session %\"SCNu64\" as over\\n\", session->session_id);\n\t\t\t\tif(reclaim_session_timeout < 1) { /* Reclaim session timeouts are disabled */\n\t\t\t\t\t/* Mark the session as destroyed */\n\t\t\t\t\tjanus_session_destroy(session);\n\t\t\t\t\tg_hash_table_iter_remove(&iter);\n\t\t\t\t} else {\n\t\t\t\t\t/* Set flag for transport_gone. The Janus sessions watchdog will clean this up if not reclaimed*/\n\t\t\t\t\tg_atomic_int_set(&session->transport_gone, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tjanus_mutex_unlock(&sessions_mutex);\n}",
  "abstract_func_before": "void janus_transport_gone(janus_transport *VAR_0, janus_transport_session *VAR_1) {\n\t/* COMMENT_0 */\n\tJANUS_LOG(VAR_2, \"A %s transport instance has gone away (%p)\\n\", VAR_0->get_package(), VAR_1);\n\tjanus_mutex_lock(&VAR_3);\n\tif(VAR_4 && g_hash_table_size(VAR_4) > 0) {\n\t\tGHashTableIter VAR_5;\n\t\tgpointer VAR_6;\n\t\tg_hash_table_iter_init(&VAR_5, VAR_4);\n\t\twhile(g_hash_table_iter_next(&VAR_5, NULL, &VAR_6)) {\n\t\t\tjanus_session *VAR_7 = (janus_session *) VAR_6;\n\t\t\tif(!VAR_7 || g_atomic_int_get(&VAR_7->destroyed) || g_atomic_int_get(&VAR_7->timeout) || VAR_7->last_activity == 0)\n\t\t\t\tcontinue;\n\t\t\tif(VAR_7->source && VAR_7->source->instance == VAR_1) {\n\t\t\t\tJANUS_LOG(VAR_2, \"  -- Session %\"VAR_8\" will be over if not reclaimed\\n\", VAR_7->session_id);\n\t\t\t\tJANUS_LOG(VAR_2, \"  -- Marking Session %\"VAR_8\" as over\\n\", VAR_7->session_id);\n\t\t\t\tif(VAR_9 < 1) { /* COMMENT_1 */\n\t\t\t\t\t/* COMMENT_2 */\n\t\t\t\t\tjanus_session_destroy(VAR_7);\n\t\t\t\t\tg_hash_table_iter_remove(&VAR_5);\n\t\t\t\t} else {\n\t\t\t\t\t/* COMMENT_3 */\n\t\t\t\t\tg_atomic_int_set(&VAR_7->transport_gone, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tjanus_mutex_unlock(&VAR_3);\n}",
  "func_graph_path_before": "meetecho/janus-gateway/bc319056603295953f4a70999bc4553785c6e5ef/janus.c/vul/before/2.json",
  "func": "void janus_transport_gone(janus_transport *plugin, janus_transport_session *transport) {\n\t/* Get rid of sessions this transport was handling */\n\tJANUS_LOG(LOG_VERB, \"A %s transport instance has gone away (%p)\\n\", plugin->get_package(), transport);\n\tjanus_mutex_lock(&sessions_mutex);\n\tif(sessions && g_hash_table_size(sessions) > 0) {\n\t\tGHashTableIter iter;\n\t\tgpointer value;\n\t\tg_hash_table_iter_init(&iter, sessions);\n\t\twhile(g_hash_table_iter_next(&iter, NULL, &value)) {\n\t\t\tjanus_session *session = (janus_session *) value;\n\t\t\tif(!session || g_atomic_int_get(&session->destroyed) || g_atomic_int_get(&session->timeout) || session->last_activity == 0)\n\t\t\t\tcontinue;\n\t\t\tif(session->source && session->source->instance == transport) {\n\t\t\t\tJANUS_LOG(LOG_VERB, \"  -- Session %\"SCNu64\" will be over if not reclaimed\\n\", session->session_id);\n\t\t\t\tJANUS_LOG(LOG_VERB, \"  -- Marking Session %\"SCNu64\" as over\\n\", session->session_id);\n\t\t\t\tif(reclaim_session_timeout < 1) { /* Reclaim session timeouts are disabled */\n\t\t\t\t\t/* Mark the session as destroyed */\n\t\t\t\t\tjanus_session_destroy(session);\n\t\t\t\t\tg_hash_table_iter_remove(&iter);\n\t\t\t\t} else {\n\t\t\t\t\t/* Set flag for transport_gone. The Janus sessions watchdog will clean this up if not reclaimed */\n\t\t\t\t\tg_atomic_int_set(&session->transport_gone, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tjanus_mutex_unlock(&sessions_mutex);\n}",
  "abstract_func": "void janus_transport_gone(janus_transport *VAR_0, janus_transport_session *VAR_1) {\n\t/* COMMENT_0 */\n\tJANUS_LOG(VAR_2, \"A %s transport instance has gone away (%p)\\n\", VAR_0->get_package(), VAR_1);\n\tjanus_mutex_lock(&VAR_3);\n\tif(VAR_4 && g_hash_table_size(VAR_4) > 0) {\n\t\tGHashTableIter VAR_5;\n\t\tgpointer VAR_6;\n\t\tg_hash_table_iter_init(&VAR_5, VAR_4);\n\t\twhile(g_hash_table_iter_next(&VAR_5, NULL, &VAR_6)) {\n\t\t\tjanus_session *VAR_7 = (janus_session *) VAR_6;\n\t\t\tif(!VAR_7 || g_atomic_int_get(&VAR_7->destroyed) || g_atomic_int_get(&VAR_7->timeout) || VAR_7->last_activity == 0)\n\t\t\t\tcontinue;\n\t\t\tif(VAR_7->source && VAR_7->source->instance == VAR_1) {\n\t\t\t\tJANUS_LOG(VAR_2, \"  -- Session %\"VAR_8\" will be over if not reclaimed\\n\", VAR_7->session_id);\n\t\t\t\tJANUS_LOG(VAR_2, \"  -- Marking Session %\"VAR_8\" as over\\n\", VAR_7->session_id);\n\t\t\t\tif(VAR_9 < 1) { /* COMMENT_1 */\n\t\t\t\t\t/* COMMENT_2 */\n\t\t\t\t\tjanus_session_destroy(VAR_7);\n\t\t\t\t\tg_hash_table_iter_remove(&VAR_5);\n\t\t\t\t} else {\n\t\t\t\t\t/* COMMENT_3 */\n\t\t\t\t\tg_atomic_int_set(&VAR_7->transport_gone, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tjanus_mutex_unlock(&VAR_3);\n}",
  "func_graph_path": "meetecho/janus-gateway/bc319056603295953f4a70999bc4553785c6e5ef/janus.c/vul/after/2.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -18,7 +18,7 @@\n \t\t\t\t\tjanus_session_destroy(session);\n \t\t\t\t\tg_hash_table_iter_remove(&iter);\n \t\t\t\t} else {\n-\t\t\t\t\t/* Set flag for transport_gone. The Janus sessions watchdog will clean this up if not reclaimed*/\n+\t\t\t\t\t/* Set flag for transport_gone. The Janus sessions watchdog will clean this up if not reclaimed */\n \t\t\t\t\tg_atomic_int_set(&session->transport_gone, 1);\n \t\t\t\t}\n \t\t\t}",
  "diff_line_info": {
    "deleted_lines": [
      "\t\t\t\t\t/* Set flag for transport_gone. The Janus sessions watchdog will clean this up if not reclaimed*/"
    ],
    "added_lines": [
      "\t\t\t\t\t/* Set flag for transport_gone. The Janus sessions watchdog will clean this up if not reclaimed */"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/meetecho/janus-gateway/pull/1990",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/meetecho/janus-gateway/pull/1990: 403 Client Error: Forbidden for url: https://api.github.com/repos/meetecho/janus-gateway/pulls/1990",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 1.0"
}