{
  "cve_id": "CVE-2021-42073",
  "cwe_ids": [
    "CWE-384"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:P/I:P/A:N",
  "cvss_is_v3": false,
  "repo_name": "debauchee/barrier",
  "commit_msg": "Implement client identity verification\n\nThis commit fixes two security vulnerabilities: CVE-2021-42072 and\nCVE-2021-42073.\n\nThe issues have been reported by Matthias Gerstner <mgerstner@suse.de>.",
  "commit_hash": "229abab99f39f11624e5651f819e7f1f8eddedcc",
  "git_url": "https://github.com/debauchee/barrier/commit/229abab99f39f11624e5651f819e7f1f8eddedcc",
  "file_path": "src/lib/barrier/ServerApp.cpp",
  "func_name": "ServerApp::openClientListener",
  "func_before": "ClientListener*\nServerApp::openClientListener(const NetworkAddress& address)\n{\n    auto security_level = ConnectionSecurityLevel::PLAINTEXT;\n    if (args().m_enableCrypto) {\n        security_level = ConnectionSecurityLevel::ENCRYPTED;\n    }\n\n    ClientListener* listen = new ClientListener(\n        address,\n        new TCPSocketFactory(m_events, getSocketMultiplexer()),\n        m_events, security_level);\n\n    m_events->adoptHandler(\n        m_events->forClientListener().connected(), listen,\n        new TMethodEventJob<ServerApp>(\n            this, &ServerApp::handleClientConnected, listen));\n\n    return listen;\n}",
  "abstract_func_before": "ClientListener*\nServerApp::openClientListener(const NetworkAddress& VAR_0)\n{\n    auto VAR_1 = ConnectionSecurityLevel::PLAINTEXT;\n    if (args().m_enableCrypto) {\n        VAR_1 = ConnectionSecurityLevel::ENCRYPTED;\n    }\n\n    ClientListener* VAR_2 = new ClientListener(\n        VAR_0,\n        new TCPSocketFactory(VAR_3, getSocketMultiplexer()),\n        VAR_3, VAR_1);\n\n    VAR_3->adoptHandler(\n        VAR_3->forClientListener().connected(), VAR_2,\n        new TMethodEventJob<ServerApp>(\n            this, &ServerApp::handleClientConnected, VAR_2));\n\n    return VAR_2;\n}",
  "func_graph_path_before": "debauchee/barrier/229abab99f39f11624e5651f819e7f1f8eddedcc/ServerApp.cpp/vul/before/1.json",
  "func": "ClientListener*\nServerApp::openClientListener(const NetworkAddress& address)\n{\n    auto security_level = ConnectionSecurityLevel::PLAINTEXT;\n    if (args().m_enableCrypto) {\n        security_level = ConnectionSecurityLevel::ENCRYPTED;\n        if (args().check_client_certificates) {\n            security_level = ConnectionSecurityLevel::ENCRYPTED_AUTHENTICATED;\n        }\n    }\n\n    ClientListener* listen = new ClientListener(\n        address,\n        new TCPSocketFactory(m_events, getSocketMultiplexer()),\n        m_events, security_level);\n\n    m_events->adoptHandler(\n        m_events->forClientListener().connected(), listen,\n        new TMethodEventJob<ServerApp>(\n            this, &ServerApp::handleClientConnected, listen));\n\n    return listen;\n}",
  "abstract_func": "ClientListener*\nServerApp::openClientListener(const NetworkAddress& VAR_0)\n{\n    auto VAR_1 = ConnectionSecurityLevel::PLAINTEXT;\n    if (args().m_enableCrypto) {\n        VAR_1 = ConnectionSecurityLevel::ENCRYPTED;\n        if (args().check_client_certificates) {\n            VAR_1 = ConnectionSecurityLevel::ENCRYPTED_AUTHENTICATED;\n        }\n    }\n\n    ClientListener* VAR_2 = new ClientListener(\n        VAR_0,\n        new TCPSocketFactory(VAR_3, getSocketMultiplexer()),\n        VAR_3, VAR_1);\n\n    VAR_3->adoptHandler(\n        VAR_3->forClientListener().connected(), VAR_2,\n        new TMethodEventJob<ServerApp>(\n            this, &ServerApp::handleClientConnected, VAR_2));\n\n    return VAR_2;\n}",
  "func_graph_path": "debauchee/barrier/229abab99f39f11624e5651f819e7f1f8eddedcc/ServerApp.cpp/vul/after/1.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -4,6 +4,9 @@\n     auto security_level = ConnectionSecurityLevel::PLAINTEXT;\n     if (args().m_enableCrypto) {\n         security_level = ConnectionSecurityLevel::ENCRYPTED;\n+        if (args().check_client_certificates) {\n+            security_level = ConnectionSecurityLevel::ENCRYPTED_AUTHENTICATED;\n+        }\n     }\n \n     ClientListener* listen = new ClientListener(",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "        if (args().check_client_certificates) {",
      "            security_level = ConnectionSecurityLevel::ENCRYPTED_AUTHENTICATED;",
      "        }"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/debauchee/barrier/pull/1346",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/debauchee/barrier/pull/1346: 403 Client Error: Forbidden for url: https://api.github.com/repos/debauchee/barrier/pulls/1346",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 1.0  \n\nThe commit explicitly addresses two CVEs, integrates security checks, and the code diff enhances security measures, confirming it's a security fix. The alignment between description and code is perfect, justifying high confidence. \n\n**Final Output:**  \n**Final Classification:** Security Vulnerability Fix; **Confidence:** 1.0"
}