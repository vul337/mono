{
  "cve_id": "CVE-2021-39176",
  "cwe_ids": [
    "CWE-401"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "sonicdoe/detect-character-encoding",
  "commit_msg": "Fix memory leak by properly closing `charsetDetector`",
  "commit_hash": "d44356927b92e3b13e178071bf6d7c671766f588",
  "git_url": "https://github.com/sonicdoe/detect-character-encoding/commit/d44356927b92e3b13e178071bf6d7c671766f588",
  "file_path": "icuWrapper.cpp",
  "func_name": "NAN_METHOD",
  "func_before": "NAN_METHOD(DetectCharacterEncoding) {\n\tNan::HandleScope scope;\n\n\tv8::Local<v8::Object> inputBuffer = info[0]->ToObject();\n\n\tUCharsetDetector *charsetDetector;\n\tconst UCharsetMatch *charsetMatch;\n\tUErrorCode errorCode = U_ZERO_ERROR;\n\n\tcharsetDetector = ucsdet_open(&errorCode);\n\n\tif(U_FAILURE(errorCode)) {\n\t\tNan::ThrowError(\"Failed to open ICU charset detector.\");\n\t\treturn;\n\t}\n\n\tucsdet_setText(\n\t\tcharsetDetector,\n\t\tnode::Buffer::Data(inputBuffer),\n\t\tnode::Buffer::Length(inputBuffer),\n\t\t&errorCode\n\t);\n\n\tif(U_FAILURE(errorCode)) {\n\t\tNan::ThrowError(\"Failed to set ICU charset detector’s text.\");\n\t\treturn;\n\t}\n\n\tcharsetMatch = ucsdet_detect(charsetDetector, &errorCode);\n\n\tif(U_FAILURE(errorCode)) {\n\t\tNan::ThrowError(\"Failed to detect charset.\");\n\t\treturn;\n\t}\n\n\tconst char *charsetName = ucsdet_getName(charsetMatch, &errorCode);\n\n\tif(U_FAILURE(errorCode)) {\n\t\tNan::ThrowError(\"Failed to get name from charset match.\");\n\t\treturn;\n\t}\n\n\tint32_t confidence = ucsdet_getConfidence(charsetMatch, &errorCode);\n\n\tif(U_FAILURE(errorCode)) {\n\t\tNan::ThrowError(\"Failed to get confidence from charset match.\");\n\t\treturn;\n\t}\n\n\tv8::Local<v8::Object> obj = Nan::New<v8::Object>();\n\tobj->Set(Nan::New<v8::String>(\"encoding\").ToLocalChecked(), Nan::New<v8::String>(charsetName).ToLocalChecked());\n\tobj->Set(Nan::New<v8::String>(\"confidence\").ToLocalChecked(), Nan::New<v8::Number>(confidence));\n\n\tinfo.GetReturnValue().Set(obj);\n}",
  "abstract_func_before": "NAN_METHOD(DetectCharacterEncoding) {\n\tNan::HandleScope VAR_0;\n\n\tv8::Local<v8::Object> VAR_1 = VAR_2[0]->ToObject();\n\n\tUCharsetDetector *VAR_3;\n\tconst UCharsetMatch *VAR_4;\n\tUErrorCode VAR_5 = VAR_6;\n\n\tVAR_3 = ucsdet_open(&VAR_5);\n\n\tif(U_FAILURE(VAR_5)) {\n\t\tNan::ThrowError(\"Failed to open ICU charset detector.\");\n\t\treturn;\n\t}\n\n\tucsdet_setText(\n\t\tVAR_3,\n\t\tnode::Buffer::Data(VAR_1),\n\t\tnode::Buffer::Length(VAR_1),\n\t\t&VAR_5\n\t);\n\n\tif(U_FAILURE(VAR_5)) {\n\t\tNan::ThrowError(\"Failed to set ICU charset detector’s text.\");\n\t\treturn;\n\t}\n\n\tVAR_4 = ucsdet_detect(VAR_3, &VAR_5);\n\n\tif(U_FAILURE(VAR_5)) {\n\t\tNan::ThrowError(\"Failed to detect charset.\");\n\t\treturn;\n\t}\n\n\tconst char *VAR_7 = ucsdet_getName(VAR_4, &VAR_5);\n\n\tif(U_FAILURE(VAR_5)) {\n\t\tNan::ThrowError(\"Failed to get name from charset match.\");\n\t\treturn;\n\t}\n\n\tint32_t VAR_8 = ucsdet_getConfidence(VAR_4, &VAR_5);\n\n\tif(U_FAILURE(VAR_5)) {\n\t\tNan::ThrowError(\"Failed to get confidence from charset match.\");\n\t\treturn;\n\t}\n\n\tv8::Local<v8::Object> VAR_9 = Nan::VAR_10<v8::Object>();\n\tVAR_9->Set(Nan::VAR_10<v8::String>(\"encoding\").ToLocalChecked(), Nan::VAR_10<v8::String>(VAR_7).ToLocalChecked());\n\tVAR_9->Set(Nan::VAR_10<v8::String>(\"confidence\").ToLocalChecked(), Nan::VAR_10<v8::Number>(VAR_8));\n\n\tVAR_2.GetReturnValue().Set(VAR_9);\n}",
  "func_graph_path_before": null,
  "func": "NAN_METHOD(DetectCharacterEncoding) {\n\tNan::HandleScope scope;\n\n\tv8::Local<v8::Object> inputBuffer = info[0]->ToObject();\n\n\tUCharsetDetector *charsetDetector;\n\tconst UCharsetMatch *charsetMatch;\n\tUErrorCode errorCode = U_ZERO_ERROR;\n\n\tcharsetDetector = ucsdet_open(&errorCode);\n\n\tif(U_FAILURE(errorCode)) {\n\t\tNan::ThrowError(\"Failed to open ICU charset detector.\");\n\t\treturn;\n\t}\n\n\tucsdet_setText(\n\t\tcharsetDetector,\n\t\tnode::Buffer::Data(inputBuffer),\n\t\tnode::Buffer::Length(inputBuffer),\n\t\t&errorCode\n\t);\n\n\tif(U_FAILURE(errorCode)) {\n\t\tNan::ThrowError(\"Failed to set ICU charset detector’s text.\");\n\t\tucsdet_close(charsetDetector);\n\t\treturn;\n\t}\n\n\tcharsetMatch = ucsdet_detect(charsetDetector, &errorCode);\n\n\tif(U_FAILURE(errorCode)) {\n\t\tNan::ThrowError(\"Failed to detect charset.\");\n\t\tucsdet_close(charsetDetector);\n\t\treturn;\n\t}\n\n\tconst char *charsetName = ucsdet_getName(charsetMatch, &errorCode);\n\n\tif(U_FAILURE(errorCode)) {\n\t\tNan::ThrowError(\"Failed to get name from charset match.\");\n\t\tucsdet_close(charsetDetector);\n\t\treturn;\n\t}\n\n\tint32_t confidence = ucsdet_getConfidence(charsetMatch, &errorCode);\n\n\tif(U_FAILURE(errorCode)) {\n\t\tNan::ThrowError(\"Failed to get confidence from charset match.\");\n\t\tucsdet_close(charsetDetector);\n\t\treturn;\n\t}\n\n\tv8::Local<v8::Object> obj = Nan::New<v8::Object>();\n\tobj->Set(Nan::New<v8::String>(\"encoding\").ToLocalChecked(), Nan::New<v8::String>(charsetName).ToLocalChecked());\n\tobj->Set(Nan::New<v8::String>(\"confidence\").ToLocalChecked(), Nan::New<v8::Number>(confidence));\n\n\tinfo.GetReturnValue().Set(obj);\n\tucsdet_close(charsetDetector);\n}",
  "abstract_func": "NAN_METHOD(DetectCharacterEncoding) {\n\tNan::HandleScope VAR_0;\n\n\tv8::Local<v8::Object> VAR_1 = VAR_2[0]->ToObject();\n\n\tUCharsetDetector *VAR_3;\n\tconst UCharsetMatch *VAR_4;\n\tUErrorCode VAR_5 = VAR_6;\n\n\tVAR_3 = ucsdet_open(&VAR_5);\n\n\tif(U_FAILURE(VAR_5)) {\n\t\tNan::ThrowError(\"Failed to open ICU charset detector.\");\n\t\treturn;\n\t}\n\n\tucsdet_setText(\n\t\tVAR_3,\n\t\tnode::Buffer::Data(VAR_1),\n\t\tnode::Buffer::Length(VAR_1),\n\t\t&VAR_5\n\t);\n\n\tif(U_FAILURE(VAR_5)) {\n\t\tNan::ThrowError(\"Failed to set ICU charset detector’s text.\");\n\t\tucsdet_close(VAR_3);\n\t\treturn;\n\t}\n\n\tVAR_4 = ucsdet_detect(VAR_3, &VAR_5);\n\n\tif(U_FAILURE(VAR_5)) {\n\t\tNan::ThrowError(\"Failed to detect charset.\");\n\t\tucsdet_close(VAR_3);\n\t\treturn;\n\t}\n\n\tconst char *VAR_7 = ucsdet_getName(VAR_4, &VAR_5);\n\n\tif(U_FAILURE(VAR_5)) {\n\t\tNan::ThrowError(\"Failed to get name from charset match.\");\n\t\tucsdet_close(VAR_3);\n\t\treturn;\n\t}\n\n\tint32_t VAR_8 = ucsdet_getConfidence(VAR_4, &VAR_5);\n\n\tif(U_FAILURE(VAR_5)) {\n\t\tNan::ThrowError(\"Failed to get confidence from charset match.\");\n\t\tucsdet_close(VAR_3);\n\t\treturn;\n\t}\n\n\tv8::Local<v8::Object> VAR_9 = Nan::VAR_10<v8::Object>();\n\tVAR_9->Set(Nan::VAR_10<v8::String>(\"encoding\").ToLocalChecked(), Nan::VAR_10<v8::String>(VAR_7).ToLocalChecked());\n\tVAR_9->Set(Nan::VAR_10<v8::String>(\"confidence\").ToLocalChecked(), Nan::VAR_10<v8::Number>(VAR_8));\n\n\tVAR_2.GetReturnValue().Set(VAR_9);\n\tucsdet_close(VAR_3);\n}",
  "func_graph_path": null,
  "diff_func": "--- func_before\n+++ func_after\n@@ -23,6 +23,7 @@\n \n \tif(U_FAILURE(errorCode)) {\n \t\tNan::ThrowError(\"Failed to set ICU charset detector’s text.\");\n+\t\tucsdet_close(charsetDetector);\n \t\treturn;\n \t}\n \n@@ -30,6 +31,7 @@\n \n \tif(U_FAILURE(errorCode)) {\n \t\tNan::ThrowError(\"Failed to detect charset.\");\n+\t\tucsdet_close(charsetDetector);\n \t\treturn;\n \t}\n \n@@ -37,6 +39,7 @@\n \n \tif(U_FAILURE(errorCode)) {\n \t\tNan::ThrowError(\"Failed to get name from charset match.\");\n+\t\tucsdet_close(charsetDetector);\n \t\treturn;\n \t}\n \n@@ -44,6 +47,7 @@\n \n \tif(U_FAILURE(errorCode)) {\n \t\tNan::ThrowError(\"Failed to get confidence from charset match.\");\n+\t\tucsdet_close(charsetDetector);\n \t\treturn;\n \t}\n \n@@ -52,4 +56,5 @@\n \tobj->Set(Nan::New<v8::String>(\"confidence\").ToLocalChecked(), Nan::New<v8::Number>(confidence));\n \n \tinfo.GetReturnValue().Set(obj);\n+\tucsdet_close(charsetDetector);\n }",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "\t\tucsdet_close(charsetDetector);",
      "\t\tucsdet_close(charsetDetector);",
      "\t\tucsdet_close(charsetDetector);",
      "\t\tucsdet_close(charsetDetector);",
      "\tucsdet_close(charsetDetector);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/sonicdoe/detect-character-encoding/pull/6",
  "description": {
    "pr_info": {
      "title": "Fix memory leak by properly closing charsetDetector",
      "number": 6
    },
    "comment": [
      "Hi,\r\n\r\nwe detected a memory issue with the latest version of detect-character-encoding and found that the documentation of ucsdet_close specifically mentions:\r\n\r\n(see: http://icu-project.org/apiref/icu4c/ucsdet_8h.html#a84dab4d2c56fedb624a01db170ba698c)\r\n\r\nClose a charset detector. All storage and any other resources owned by this charset detector will be released. Failure to close a charset detector when finished with it can result in memory leaks in the application.\r\n\r\nI tried my hand at fixing the issue. From what I could see, the code change fixed the leak.\r\n\r\nBecause Nan:ThrowError does not seem to break the execution order of the code in this file, and ucsdet_open returns a null pointer in case of failure, it ought to be enough to close the charsetDetector at the end if it is not a nullptr and therefore was created successfully.\r\n\r\nRegards,\r\n\r\nMichael\r\n",
      "> Because Nan:ThrowError does not seem to break the execution order of the code in this file\r\n\r\nThank you for mentioning this. This is a bug on its own, I have fixed it in https://github.com/sonicdoe/detect-character-encoding/commit/2e3aa333a573960edf2d782bca3b25a01e49678b.\r\n\r\nBy the way, because the base branch of this repository is `develop` (instead of `master`), I have rebased your branch onto `develop`. Consequently, your fork’s `master` branch may look a bit messy now.\r\n\r\nYou can take a look at the changes in https://github.com/sonicdoe/detect-character-encoding/commit/d44356927b92e3b13e178071bf6d7c671766f588. If it looks good to you, I’ll release it as v0.3.1.",
      "Yes, looks good to me :+1: \r\n",
      "Released as [v0.3.1](https://github.com/sonicdoe/detect-character-encoding/releases/tag/v0.3.1).",
      "Thanks for the package update."
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "The commit addresses a memory leak by ensuring the `charsetDetector` is properly closed, preventing resource exhaustion. This is a security fix.\n\n**Final Classification:** Security Vulnerability Fix; **Confidence:** 1.0"
}