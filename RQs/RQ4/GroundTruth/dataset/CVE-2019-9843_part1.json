{
  "cve_id": "CVE-2019-9843",
  "cwe_ids": [
    "CWE-611"
  ],
  "cvss_vector": "AV:N/AC:H/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "diffplug/spotless",
  "commit_msg": "Implementation draft and testing.",
  "commit_hash": "b23ee9ef5ba4b65e7bd0e341c76ed197c06ee83d",
  "git_url": "https://github.com/diffplug/spotless/commit/b23ee9ef5ba4b65e7bd0e341c76ed197c06ee83d",
  "file_path": "_ext/eclipse-wtp/src/main/java/com/diffplug/spotless/extra/eclipse/wtp/EclipseXmlFormatterStepImpl.java",
  "func_name": "setupFramework",
  "func_before": "private static void setupFramework() throws BundleException {\n\t\tif (SpotlessEclipseFramework.setup(\n\t\t\t\tplugins -> {\n\t\t\t\t\tplugins.applyDefault();\n\t\t\t\t\t//The WST XML formatter\n\t\t\t\t\tplugins.add(new XMLCorePlugin());\n\t\t\t\t\t//XSDs/DTDs must be resolved by URI\n\t\t\t\t\tplugins.add(new URIResolverPlugin());\n\t\t\t\t\t//Support formatting based on DTD restrictions\n\t\t\t\t\tplugins.add(new DTDCorePlugin());\n\t\t\t\t\t//Support formatting based on XSD restrictions\n\t\t\t\t\tplugins.add(new XSDCorePlugin());\n\t\t\t\t})) {\n\t\t\tPREFERENCE_FACTORY = new XmlFormattingPreferencesFactory();\n\t\t\t//Register required EMF factories\n\t\t\tXSDSchemaBuildingTools.getXSDFactory();\n\t\t}\n\t}",
  "abstract_func_before": "private static void setupFramework() throws BundleException {\n\t\tif (VAR_0.setup(\n\t\t\t\tVAR_1 -> {\n\t\t\t\t\tVAR_1.applyDefault();\n\t\t\t\t\t/* COMMENT_0 */\n\t\t\t\t\tVAR_1.add(new XMLCorePlugin());\n\t\t\t\t\t/* COMMENT_1 */\n\t\t\t\t\tVAR_1.add(new URIResolverPlugin());\n\t\t\t\t\t/* COMMENT_2 */\n\t\t\t\t\tVAR_1.add(new DTDCorePlugin());\n\t\t\t\t\t/* COMMENT_3 */\n\t\t\t\t\tVAR_1.add(new XSDCorePlugin());\n\t\t\t\t})) {\n\t\t\tVAR_2 = new XmlFormattingPreferencesFactory();\n\t\t\t/* COMMENT_4 */\n\t\t\tVAR_3.getXSDFactory();\n\t\t}\n\t}",
  "func_graph_path_before": "diffplug/spotless/b23ee9ef5ba4b65e7bd0e341c76ed197c06ee83d/EclipseXmlFormatterStepImpl.java/vul/before/0.json",
  "func": "private static void setupFramework(boolean resolveExternalURI) throws BundleException {\n\t\tif (SpotlessEclipseFramework.setup(\n\t\t\t\tplugins -> {\n\t\t\t\t\tplugins.applyDefault();\n\t\t\t\t\t//The WST XML formatter\n\t\t\t\t\tplugins.add(new XMLCorePlugin());\n\t\t\t\t\t//XSDs/DTDs must be resolved by URI\n\t\t\t\t\tplugins.add(new URIResolverPlugin());\n\t\t\t\t\t//Support formatting based on DTD restrictions\n\t\t\t\t\tplugins.add(new DTDCorePlugin());\n\t\t\t\t\t//Support formatting based on XSD restrictions\n\t\t\t\t\tplugins.add(new XSDCorePlugin());\n\t\t\t\t\tif(!resolveExternalURI) {\n\t\t\t\t\t\tplugins.add(new PreventExternalURIResolverExtension());\n\t\t\t\t\t}\n\t\t\t\t})) {\n\t\t\tPREFERENCE_FACTORY = new XmlFormattingPreferencesFactory();\n\t\t\t//Register required EMF factories\n\t\t\tXSDSchemaBuildingTools.getXSDFactory();\n\t\t}\n\t}",
  "abstract_func": "private static void setupFramework(boolean VAR_0) throws BundleException {\n\t\tif (VAR_1.setup(\n\t\t\t\tVAR_2 -> {\n\t\t\t\t\tVAR_2.applyDefault();\n\t\t\t\t\t/* COMMENT_0 */\n\t\t\t\t\tVAR_2.add(new XMLCorePlugin());\n\t\t\t\t\t/* COMMENT_1 */\n\t\t\t\t\tVAR_2.add(new URIResolverPlugin());\n\t\t\t\t\t/* COMMENT_2 */\n\t\t\t\t\tVAR_2.add(new DTDCorePlugin());\n\t\t\t\t\t/* COMMENT_3 */\n\t\t\t\t\tVAR_2.add(new XSDCorePlugin());\n\t\t\t\t\tif(!VAR_0) {\n\t\t\t\t\t\tVAR_2.add(new PreventExternalURIResolverExtension());\n\t\t\t\t\t}\n\t\t\t\t})) {\n\t\t\tVAR_3 = new XmlFormattingPreferencesFactory();\n\t\t\t/* COMMENT_4 */\n\t\t\tVAR_4.getXSDFactory();\n\t\t}\n\t}",
  "func_graph_path": "diffplug/spotless/b23ee9ef5ba4b65e7bd0e341c76ed197c06ee83d/EclipseXmlFormatterStepImpl.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,4 +1,4 @@\n-private static void setupFramework() throws BundleException {\n+private static void setupFramework(boolean resolveExternalURI) throws BundleException {\n \t\tif (SpotlessEclipseFramework.setup(\n \t\t\t\tplugins -> {\n \t\t\t\t\tplugins.applyDefault();\n@@ -10,6 +10,9 @@\n \t\t\t\t\tplugins.add(new DTDCorePlugin());\n \t\t\t\t\t//Support formatting based on XSD restrictions\n \t\t\t\t\tplugins.add(new XSDCorePlugin());\n+\t\t\t\t\tif(!resolveExternalURI) {\n+\t\t\t\t\t\tplugins.add(new PreventExternalURIResolverExtension());\n+\t\t\t\t\t}\n \t\t\t\t})) {\n \t\t\tPREFERENCE_FACTORY = new XmlFormattingPreferencesFactory();\n \t\t\t//Register required EMF factories",
  "diff_line_info": {
    "deleted_lines": [
      "private static void setupFramework() throws BundleException {"
    ],
    "added_lines": [
      "private static void setupFramework(boolean resolveExternalURI) throws BundleException {",
      "\t\t\t\t\tif(!resolveExternalURI) {",
      "\t\t\t\t\t\tplugins.add(new PreventExternalURIResolverExtension());",
      "\t\t\t\t\t}"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/diffplug/spotless/pull/369",
  "description": {
    "pr_info": {
      "title": "WTP - Ignore external URIs by default",
      "number": 369
    },
    "comment": [
      "Eclipse WTP XML formatter resolves automatically external URIs. URIs that cannot be accessed are ignored. If the referenced external DTD/XSD contains formatting instructions, the formatter results differs depending whether the URI is reachable or not.\r\nThis is not appropriate behaviour for Spotless, since it is e.g. used for continuous integration testing.  \r\nNormally all external URIs shall be included in a XML catalog during build.\r\nBut many users may not be aware that the XML formatter uses the DTDs and XSDs specified in an XML in the first place.\r\nTo prevent an spotlessCheck error due failure accessing an external DTD/XSD, the Spotless default behaviour has been changed, to ignore external URIs per default.\r\n",
      "@nedtwigg Let me know when you released the new version and I shall integrate it. Or feel ree to do the integration yourself.\r\n@JLLeitschuh If you are still interested to do some investigation on  #358, this PR might give you some ideas where to look.",
      "This looks great!  Release is on the way..",
      "ext-eclipse-wtp 3.9.8 is now available on mavencentral",
      "Released in 3.20.0 / 1.20.0",
      "@fvgh Should I open an upstream issue with the Eclipse organization about this?",
      "@JLLeitschuh As stated in this PR description, I don't see that the Eclipse behaviour is a problem for an IDE, but I admit that it is unexpected for Spotless users and a problem for a build tool.\r\nThe Eclipse resolveExternalEntities configuration is only applied on the Apache Xerces validator (for the security reasons you pointed out) and we discussed in #358. On the other hand, the configuration item is in the Eclipse XML preferences below the \"Validation\" node. So I do not see a need on Eclipse side to change anything until someone finds a vulnerability in the formatter. ",
      "> As stated in this PR description, I don't see that the Eclipse behaviour is a problem for an IDE\r\n\r\nActually, it is. Maliciously compromising was one of the major discoveries of the Checkpoint team in their ParseDroid Vulnerability.\r\n\r\n> This led us to find multiple vulnerable implementations of the XML parser within other projects. Moreover, we identified that the most popular IDEs that are used for building Android applications are affected – including Intellij, Eclipse, and Android Studio.\r\n>\r\n> By simply loading the malicious “AndroidManifest.xml” file as part of any Android project, the IDEs starts spitting out any file configured by the attacker.\r\n>\r\n> To demonstrate this vulnerability, we have uploaded a malicious project library to GitHub and cloned it to an Android Studio project.\r\n> \\- https://research.checkpoint.com/parsedroid-targeting-android-development-research-community/",
      "Sorry @JLLeitschuh , as I stressed in #358:\r\n> I have no evidence and don't think that the Eclipse XMLSourceParser is vulnerable to the XXE scenario where a local file URI is used as external entity as described within this issue.\r\n\r\nIts the question what you consider a security problem. If you consider the increase of an attack vector a security problem, yes allowing to process data obtained via HTTP is a problem.\r\n\r\nLet's just agree to disagree :wink: ...\r\n\r\nBut don't get me wrong: I appreciate very much that you highlighted the topic that the user is probably not aware that DTD/XSDs are automatically downloaded. I am afraid I was already too used to this behaviour and catalogue usage...",
      "@fvgh Thanks for your professional discourse about this and for fixing the issue. I'll take care of reaching out to the Eclipse security team and see what they have to say.\r\n\r\nAgain, thank you so much for your hard work on this!"
    ]
  },
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "**Final Classification:** Defect Remediation & Feature Upgrades; **Confidence:** 0.95"
}