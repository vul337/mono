{
  "cve_id": "CVE-2023-44487",
  "cwe_ids": [
    "CWE-400"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
  "cvss_is_v3": true,
  "repo_name": "envoyproxy/envoy",
  "commit_msg": "Limit the number of HTTP requests processed from a connection in I/O cycle\n\nSigned-off-by: Yan Avlasov <yavlasov@google.com>\n\nSigned-off-by: Ryan Northey <ryan@synca.io>",
  "commit_hash": "cf687ac66b60f14a71e2a7e552943f138922a71d",
  "git_url": "https://github.com/envoyproxy/envoy/commit/cf687ac66b60f14a71e2a7e552943f138922a71d",
  "file_path": "source/common/http/conn_manager_impl.cc",
  "func_name": "ConnectionManagerImpl::ActiveStream::decodeData",
  "func_before": "void ConnectionManagerImpl::ActiveStream::decodeData(Buffer::Instance& data, bool end_stream) {\n  ScopeTrackerScopeState scope(this,\n                               connection_manager_.read_callbacks_->connection().dispatcher());\n  maybeEndDecode(end_stream);\n  filter_manager_.streamInfo().addBytesReceived(data.length());\n\n  filter_manager_.decodeData(data, end_stream);\n}",
  "abstract_func_before": "void ConnectionManagerImpl::ActiveStream::decodeData(Buffer::Instance& VAR_0, bool VAR_1) {\n  ScopeTrackerScopeState VAR_2(this,\n                               VAR_3.read_callbacks_->connection().dispatcher());\n  maybeEndDecode(VAR_1);\n  VAR_4.streamInfo().addBytesReceived(VAR_0.length());\n\n  VAR_4.decodeData(VAR_0, VAR_1);\n}",
  "func_graph_path_before": "envoyproxy/envoy/cf687ac66b60f14a71e2a7e552943f138922a71d/conn_manager_impl.cc/vul/before/2.json",
  "func": "void ConnectionManagerImpl::ActiveStream::decodeData(Buffer::Instance& data, bool end_stream) {\n  ScopeTrackerScopeState scope(this,\n                               connection_manager_.read_callbacks_->connection().dispatcher());\n  maybeEndDecode(end_stream);\n  filter_manager_.streamInfo().addBytesReceived(data.length());\n  if (!state_.deferred_to_next_io_iteration_) {\n    filter_manager_.decodeData(data, end_stream);\n  } else {\n    if (!deferred_data_) {\n      deferred_data_ = std::make_unique<Buffer::OwnedImpl>();\n    }\n    deferred_data_->move(data);\n    state_.deferred_end_stream_ = end_stream;\n  }\n}",
  "abstract_func": "void ConnectionManagerImpl::ActiveStream::decodeData(Buffer::Instance& VAR_0, bool VAR_1) {\n  ScopeTrackerScopeState VAR_2(this,\n                               VAR_3.read_callbacks_->connection().dispatcher());\n  maybeEndDecode(VAR_1);\n  VAR_4.streamInfo().addBytesReceived(VAR_0.length());\n  if (!VAR_5.deferred_to_next_io_iteration_) {\n    VAR_4.decodeData(VAR_0, VAR_1);\n  } else {\n    if (!VAR_6) {\n      VAR_6 = std::VAR_7<Buffer::OwnedImpl>();\n    }\n    VAR_6->move(VAR_0);\n    VAR_5.deferred_end_stream_ = VAR_1;\n  }\n}",
  "func_graph_path": "envoyproxy/envoy/cf687ac66b60f14a71e2a7e552943f138922a71d/conn_manager_impl.cc/vul/after/2.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -3,6 +3,13 @@\n                                connection_manager_.read_callbacks_->connection().dispatcher());\n   maybeEndDecode(end_stream);\n   filter_manager_.streamInfo().addBytesReceived(data.length());\n-\n-  filter_manager_.decodeData(data, end_stream);\n+  if (!state_.deferred_to_next_io_iteration_) {\n+    filter_manager_.decodeData(data, end_stream);\n+  } else {\n+    if (!deferred_data_) {\n+      deferred_data_ = std::make_unique<Buffer::OwnedImpl>();\n+    }\n+    deferred_data_->move(data);\n+    state_.deferred_end_stream_ = end_stream;\n+  }\n }",
  "diff_line_info": {
    "deleted_lines": [
      "",
      "  filter_manager_.decodeData(data, end_stream);"
    ],
    "added_lines": [
      "  if (!state_.deferred_to_next_io_iteration_) {",
      "    filter_manager_.decodeData(data, end_stream);",
      "  } else {",
      "    if (!deferred_data_) {",
      "      deferred_data_ = std::make_unique<Buffer::OwnedImpl>();",
      "    }",
      "    deferred_data_->move(data);",
      "    state_.deferred_end_stream_ = end_stream;",
      "  }"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/envoyproxy/envoy/pull/30055",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/envoyproxy/envoy/pull/30055: 403 Client Error: Forbidden for url: https://api.github.com/repos/envoyproxy/envoy/pulls/30055",
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.85,
  "Bug Filter Response": "The patch introduces a mechanism to defer processing of HTTP requests, which could help prevent resource exhaustion. However, it isn't classified as a security fix due to the absence of explicit security references or known vulnerability identifiers.\n\n**Final Classification:** Defect Remediation & Feature Upgrades  \n**Confidence:** 0.85\n\nThis classification is based on the code changes focusing on managing request processing flow to prevent overloading, which is a functional improvement rather than a security fix."
}