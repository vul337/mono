{
  "cve_id": "CVE-2022-0695",
  "cwe_ids": [
    "CWE-400"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "radareorg/radare2",
  "commit_msg": "Fix DoS in PE/QNX/DYLDCACHE/PSX parsers ##crash\n\n* Reported by lazymio\n* Reproducer: AAA4AAAAAB4=",
  "commit_hash": "634b886e84a5c568d243e744becc6b3223e089cf",
  "git_url": "https://github.com/radareorg/radare2/commit/634b886e84a5c568d243e744becc6b3223e089cf",
  "file_path": "libr/bin/p/bin_qnx.c",
  "func_name": "load_buffer",
  "func_before": "static bool load_buffer(RBinFile *bf, void **bin_obj, RBuffer *buf, ut64 loadaddr, Sdb *sdb) {\n\tQnxObj *qo = R_NEW0 (QnxObj);\n\tif (!qo) {\n\t\treturn false;\n\t}\n\tlmf_record lrec;\n\tlmf_resource lres;\n\tlmf_data ldata;\n\tut64 offset = QNX_RECORD_SIZE;\n\tRList *sections = NULL;\n\tRList *fixups = NULL;\n\n\tif (!qo) {\n\t\tgoto beach;\n\t}\n\tif (!(sections = r_list_newf ((RListFree)r_bin_section_free)) || !(fixups = r_list_new ())) {\n\t\tgoto beach;\n\t}\n\tqo->kv = sdb_new0 ();\n\tif (!qo->kv) {\n\t\tgoto beach;\n\t}\n\t// Read the first record\n\tif (r_buf_fread_at (bf->buf, 0, (ut8 *)&lrec, \"ccss\", 1) < QNX_RECORD_SIZE) {\n\t\tgoto beach;\n\t}\n\t// Load the header\n\tlmf_header_load (&qo->lmfh, bf->buf, qo->kv);\n\toffset += lrec.data_nbytes;\n\n\tfor (;;) {\n\t\tif (r_buf_fread_at (bf->buf, offset, (ut8 *)&lrec, \"ccss\", 1) < QNX_RECORD_SIZE) {\n\t\t\tgoto beach;\n\t\t}\n\t\toffset += sizeof (lmf_record);\n\n\t\tif (lrec.rec_type == LMF_IMAGE_END_REC) {\n\t\t\tbreak;\n\t\t} else if (lrec.rec_type == LMF_RESOURCE_REC) {\n\t\t\tRBinSection *ptr = R_NEW0 (RBinSection);\n\t\t\tif (!ptr) {\n\t\t\t\tgoto beach;\n\t\t\t}\n\t\t\tif (r_buf_fread_at (bf->buf, offset, (ut8 *)&lres, \"ssss\", 1) < sizeof (lmf_resource)) {\n\t\t\t\tgoto beach;\n\t\t\t}\n\t\t\tptr->name = strdup (\"LMF_RESOURCE\");\n\t\t\tptr->paddr = offset;\n\t\t\tptr->vsize = lrec.data_nbytes - sizeof (lmf_resource);\n\t\t\tptr->size = ptr->vsize;\n\t\t\tptr->add = true;\n\t\t \tr_list_append (sections, ptr);\n\t\t} else if (lrec.rec_type == LMF_LOAD_REC) {\n\t\t\tRBinSection *ptr = R_NEW0 (RBinSection);\n\t\t\tif (r_buf_fread_at (bf->buf, offset, (ut8 *)&ldata, \"si\", 1) < sizeof (lmf_data)) {\n\t\t\t\tgoto beach;\n\t\t\t}\n\t\t\tif (!ptr) {\n\t\t\t\tgoto beach;\n\t\t\t}\n\t\t\tptr->name = strdup (\"LMF_LOAD\");\n\t\t\tptr->paddr = offset;\n\t\t\tptr->vaddr = ldata.offset;\n\t\t\tptr->vsize = lrec.data_nbytes - sizeof (lmf_data);\n\t\t\tptr->size = ptr->vsize;\n\t\t\tptr->add = true;\n\t\t \tr_list_append (sections, ptr);\n\t\t} else if (lrec.rec_type == LMF_FIXUP_REC) {\n\t\t\tRBinReloc *ptr = R_NEW0 (RBinReloc);\n\t\t\tif (!ptr || r_buf_fread_at (bf->buf, offset, (ut8 *)&ldata, \"si\", 1) < sizeof (lmf_data)) {\n\t\t\t\tgoto beach;\n\t\t\t}\n\t\t\tptr->vaddr = ptr->paddr = ldata.offset;\n\t\t\tptr->type = 'f'; // \"LMF_FIXUP\";\n\t\t\tr_list_append (fixups, ptr);\n\t\t} else if (lrec.rec_type == LMF_8087_FIXUP_REC) {\n\t\t\tRBinReloc *ptr = R_NEW0 (RBinReloc);\n\t\t\tif (!ptr || r_buf_fread_at (bf->buf, offset, (ut8 *)&ldata, \"si\", 1) < sizeof (lmf_data)) {\n\t\t\t\tgoto beach;\n\t\t\t}\n\t\t\tptr->vaddr = ptr->paddr = ldata.offset;\n\t\t\tptr->type = 'F'; // \"LMF_8087_FIXUP\";\n\t\t\tr_list_append (fixups, ptr);\n\t\t} else if (lrec.rec_type == LMF_RW_END_REC) {\n\t\t\tr_buf_fread_at (bf->buf, offset, (ut8 *)&qo->rwend, \"si\", 1);\n\t\t}\n\t\toffset += lrec.data_nbytes;\n\t}\n\tsdb_ns_set (sdb, \"info\", qo->kv);\n\tqo->sections = sections;\n\tqo->fixups = fixups;\n\t*bin_obj = qo;\n\treturn true;\nbeach:\n\tfree (qo);\n\tr_list_free (fixups);\n\tr_list_free (sections);\n\treturn false;\n}",
  "abstract_func_before": "static bool load_buffer(RBinFile *VAR_0, void **VAR_1, RBuffer *VAR_2, ut64 VAR_3, Sdb *VAR_4) {\n\tQnxObj *VAR_5 = R_NEW0 (QnxObj);\n\tif (!VAR_5) {\n\t\treturn false;\n\t}\n\tlmf_record VAR_6;\n\tlmf_resource VAR_7;\n\tlmf_data VAR_8;\n\tut64 VAR_9 = VAR_10;\n\tRList *VAR_11 = NULL;\n\tRList *VAR_12 = NULL;\n\n\tif (!VAR_5) {\n\t\tgoto beach;\n\t}\n\tif (!(VAR_11 = r_list_newf ((RListFree)VAR_13)) || !(VAR_12 = r_list_new ())) {\n\t\tgoto beach;\n\t}\n\tVAR_5->kv = sdb_new0 ();\n\tif (!VAR_5->kv) {\n\t\tgoto beach;\n\t}\n\t/* COMMENT_0 */\n\tif (r_buf_fread_at (VAR_0->buf, 0, (ut8 *)&VAR_6, \"ccss\", 1) < VAR_10) {\n\t\tgoto beach;\n\t}\n\t/* COMMENT_1 */\n\tlmf_header_load (&VAR_5->lmfh, VAR_0->buf, VAR_5->kv);\n\tVAR_9 += VAR_6.data_nbytes;\n\n\tfor (;;) {\n\t\tif (r_buf_fread_at (VAR_0->buf, VAR_9, (ut8 *)&VAR_6, \"ccss\", 1) < VAR_10) {\n\t\t\tgoto beach;\n\t\t}\n\t\tVAR_9 += sizeof (lmf_record);\n\n\t\tif (VAR_6.rec_type == VAR_14) {\n\t\t\tbreak;\n\t\t} else if (VAR_6.rec_type == VAR_15) {\n\t\t\tRBinSection *VAR_16 = R_NEW0 (RBinSection);\n\t\t\tif (!VAR_16) {\n\t\t\t\tgoto beach;\n\t\t\t}\n\t\t\tif (r_buf_fread_at (VAR_0->buf, VAR_9, (ut8 *)&VAR_7, \"ssss\", 1) < sizeof (lmf_resource)) {\n\t\t\t\tgoto beach;\n\t\t\t}\n\t\t\tVAR_16->name = strdup (\"LMF_RESOURCE\");\n\t\t\tVAR_16->paddr = VAR_9;\n\t\t\tVAR_16->vsize = VAR_6.data_nbytes - sizeof (lmf_resource);\n\t\t\tVAR_16->size = VAR_16->vsize;\n\t\t\tVAR_16->add = true;\n\t\t \tr_list_append (VAR_11, VAR_16);\n\t\t} else if (VAR_6.rec_type == VAR_17) {\n\t\t\tRBinSection *VAR_16 = R_NEW0 (RBinSection);\n\t\t\tif (r_buf_fread_at (VAR_0->buf, VAR_9, (ut8 *)&VAR_8, \"si\", 1) < sizeof (lmf_data)) {\n\t\t\t\tgoto beach;\n\t\t\t}\n\t\t\tif (!VAR_16) {\n\t\t\t\tgoto beach;\n\t\t\t}\n\t\t\tVAR_16->name = strdup (\"LMF_LOAD\");\n\t\t\tVAR_16->paddr = VAR_9;\n\t\t\tVAR_16->vaddr = VAR_8.offset;\n\t\t\tVAR_16->vsize = VAR_6.data_nbytes - sizeof (lmf_data);\n\t\t\tVAR_16->size = VAR_16->vsize;\n\t\t\tVAR_16->add = true;\n\t\t \tr_list_append (VAR_11, VAR_16);\n\t\t} else if (VAR_6.rec_type == VAR_18) {\n\t\t\tRBinReloc *VAR_16 = R_NEW0 (RBinReloc);\n\t\t\tif (!VAR_16 || r_buf_fread_at (VAR_0->buf, VAR_9, (ut8 *)&VAR_8, \"si\", 1) < sizeof (lmf_data)) {\n\t\t\t\tgoto beach;\n\t\t\t}\n\t\t\tVAR_16->vaddr = VAR_16->paddr = VAR_8.offset;\n\t\t\tVAR_16->type = 'f'; /* COMMENT_2 */\n\t\t\tr_list_append (VAR_12, VAR_16);\n\t\t} else if (VAR_6.rec_type == VAR_19) {\n\t\t\tRBinReloc *VAR_16 = R_NEW0 (RBinReloc);\n\t\t\tif (!VAR_16 || r_buf_fread_at (VAR_0->buf, VAR_9, (ut8 *)&VAR_8, \"si\", 1) < sizeof (lmf_data)) {\n\t\t\t\tgoto beach;\n\t\t\t}\n\t\t\tVAR_16->vaddr = VAR_16->paddr = VAR_8.offset;\n\t\t\tVAR_16->type = 'F'; /* COMMENT_3 */\n\t\t\tr_list_append (VAR_12, VAR_16);\n\t\t} else if (VAR_6.rec_type == VAR_20) {\n\t\t\tr_buf_fread_at (VAR_0->buf, VAR_9, (ut8 *)&VAR_5->rwend, \"si\", 1);\n\t\t}\n\t\tVAR_9 += VAR_6.data_nbytes;\n\t}\n\tsdb_ns_set (VAR_4, \"info\", VAR_5->kv);\n\tVAR_5->sections = VAR_11;\n\tVAR_5->fixups = VAR_12;\n\t*VAR_1 = VAR_5;\n\treturn true;\nbeach:\n\tfree (VAR_5);\n\tr_list_free (VAR_12);\n\tr_list_free (VAR_11);\n\treturn false;\n}",
  "func_graph_path_before": "radareorg/radare2/634b886e84a5c568d243e744becc6b3223e089cf/bin_qnx.c/vul/before/1.json",
  "func": "static bool load_buffer(RBinFile *bf, void **bin_obj, RBuffer *buf, ut64 loadaddr, Sdb *sdb) {\n\tQnxObj *qo = R_NEW0 (QnxObj);\n\tif (!qo) {\n\t\treturn false;\n\t}\n\tlmf_record lrec;\n\tlmf_resource lres;\n\tlmf_data ldata;\n\tut64 offset = QNX_RECORD_SIZE;\n\tRList *sections = NULL;\n\tRList *fixups = NULL;\n\n\tif (!qo) {\n\t\tgoto beach;\n\t}\n\tif (!(sections = r_list_newf ((RListFree)r_bin_section_free)) || !(fixups = r_list_new ())) {\n\t\tgoto beach;\n\t}\n\tqo->kv = sdb_new0 ();\n\tif (!qo->kv) {\n\t\tgoto beach;\n\t}\n\t// Read the first record\n\tif (r_buf_fread_at (bf->buf, 0, (ut8 *)&lrec, \"ccss\", 1) != QNX_RECORD_SIZE) {\n\t\tgoto beach;\n\t}\n\t// Load the header\n\tlmf_header_load (&qo->lmfh, bf->buf, qo->kv);\n\toffset += lrec.data_nbytes;\n\n\tfor (;;) {\n\t\tif (r_buf_fread_at (bf->buf, offset, (ut8 *)&lrec, \"ccss\", 1) != QNX_RECORD_SIZE) {\n\t\t\tgoto beach;\n\t\t}\n\t\toffset += sizeof (lmf_record);\n\n\t\tif (lrec.rec_type == LMF_IMAGE_END_REC) {\n\t\t\tbreak;\n\t\t} else if (lrec.rec_type == LMF_RESOURCE_REC) {\n\t\t\tRBinSection *ptr = R_NEW0 (RBinSection);\n\t\t\tif (!ptr) {\n\t\t\t\tgoto beach;\n\t\t\t}\n\t\t\tif (r_buf_fread_at (bf->buf, offset, (ut8 *)&lres, \"ssss\", 1) != sizeof (lmf_resource)) {\n\t\t\t\tgoto beach;\n\t\t\t}\n\t\t\tptr->name = strdup (\"LMF_RESOURCE\");\n\t\t\tptr->paddr = offset;\n\t\t\tptr->vsize = lrec.data_nbytes - sizeof (lmf_resource);\n\t\t\tptr->size = ptr->vsize;\n\t\t\tptr->add = true;\n\t\t \tr_list_append (sections, ptr);\n\t\t} else if (lrec.rec_type == LMF_LOAD_REC) {\n\t\t\tRBinSection *ptr = R_NEW0 (RBinSection);\n\t\t\tif (r_buf_fread_at (bf->buf, offset, (ut8 *)&ldata, \"si\", 1) != sizeof (lmf_data)) {\n\t\t\t\tgoto beach;\n\t\t\t}\n\t\t\tif (!ptr) {\n\t\t\t\tgoto beach;\n\t\t\t}\n\t\t\tptr->name = strdup (\"LMF_LOAD\");\n\t\t\tptr->paddr = offset;\n\t\t\tptr->vaddr = ldata.offset;\n\t\t\tptr->vsize = lrec.data_nbytes - sizeof (lmf_data);\n\t\t\tptr->size = ptr->vsize;\n\t\t\tptr->add = true;\n\t\t \tr_list_append (sections, ptr);\n\t\t} else if (lrec.rec_type == LMF_FIXUP_REC) {\n\t\t\tRBinReloc *ptr = R_NEW0 (RBinReloc);\n\t\t\tif (!ptr || r_buf_fread_at (bf->buf, offset, (ut8 *)&ldata, \"si\", 1) != sizeof (lmf_data)) {\n\t\t\t\tgoto beach;\n\t\t\t}\n\t\t\tptr->vaddr = ptr->paddr = ldata.offset;\n\t\t\tptr->type = 'f'; // \"LMF_FIXUP\";\n\t\t\tr_list_append (fixups, ptr);\n\t\t} else if (lrec.rec_type == LMF_8087_FIXUP_REC) {\n\t\t\tRBinReloc *ptr = R_NEW0 (RBinReloc);\n\t\t\tif (!ptr || r_buf_fread_at (bf->buf, offset, (ut8 *)&ldata, \"si\", 1) != sizeof (lmf_data)) {\n\t\t\t\tgoto beach;\n\t\t\t}\n\t\t\tptr->vaddr = ptr->paddr = ldata.offset;\n\t\t\tptr->type = 'F'; // \"LMF_8087_FIXUP\";\n\t\t\tr_list_append (fixups, ptr);\n\t\t} else if (lrec.rec_type == LMF_RW_END_REC) {\n\t\t\tr_buf_fread_at (bf->buf, offset, (ut8 *)&qo->rwend, \"si\", 1);\n\t\t}\n\t\toffset += lrec.data_nbytes;\n\t}\n\tsdb_ns_set (sdb, \"info\", qo->kv);\n\tqo->sections = sections;\n\tqo->fixups = fixups;\n\t*bin_obj = qo;\n\treturn true;\nbeach:\n\tfree (qo);\n\tr_list_free (fixups);\n\tr_list_free (sections);\n\treturn false;\n}",
  "abstract_func": "static bool load_buffer(RBinFile *VAR_0, void **VAR_1, RBuffer *VAR_2, ut64 VAR_3, Sdb *VAR_4) {\n\tQnxObj *VAR_5 = R_NEW0 (QnxObj);\n\tif (!VAR_5) {\n\t\treturn false;\n\t}\n\tlmf_record VAR_6;\n\tlmf_resource VAR_7;\n\tlmf_data VAR_8;\n\tut64 VAR_9 = VAR_10;\n\tRList *VAR_11 = NULL;\n\tRList *VAR_12 = NULL;\n\n\tif (!VAR_5) {\n\t\tgoto beach;\n\t}\n\tif (!(VAR_11 = r_list_newf ((RListFree)VAR_13)) || !(VAR_12 = r_list_new ())) {\n\t\tgoto beach;\n\t}\n\tVAR_5->kv = sdb_new0 ();\n\tif (!VAR_5->kv) {\n\t\tgoto beach;\n\t}\n\t/* COMMENT_0 */\n\tif (r_buf_fread_at (VAR_0->buf, 0, (ut8 *)&VAR_6, \"ccss\", 1) != VAR_10) {\n\t\tgoto beach;\n\t}\n\t/* COMMENT_1 */\n\tlmf_header_load (&VAR_5->lmfh, VAR_0->buf, VAR_5->kv);\n\tVAR_9 += VAR_6.data_nbytes;\n\n\tfor (;;) {\n\t\tif (r_buf_fread_at (VAR_0->buf, VAR_9, (ut8 *)&VAR_6, \"ccss\", 1) != VAR_10) {\n\t\t\tgoto beach;\n\t\t}\n\t\tVAR_9 += sizeof (lmf_record);\n\n\t\tif (VAR_6.rec_type == VAR_14) {\n\t\t\tbreak;\n\t\t} else if (VAR_6.rec_type == VAR_15) {\n\t\t\tRBinSection *VAR_16 = R_NEW0 (RBinSection);\n\t\t\tif (!VAR_16) {\n\t\t\t\tgoto beach;\n\t\t\t}\n\t\t\tif (r_buf_fread_at (VAR_0->buf, VAR_9, (ut8 *)&VAR_7, \"ssss\", 1) != sizeof (lmf_resource)) {\n\t\t\t\tgoto beach;\n\t\t\t}\n\t\t\tVAR_16->name = strdup (\"LMF_RESOURCE\");\n\t\t\tVAR_16->paddr = VAR_9;\n\t\t\tVAR_16->vsize = VAR_6.data_nbytes - sizeof (lmf_resource);\n\t\t\tVAR_16->size = VAR_16->vsize;\n\t\t\tVAR_16->add = true;\n\t\t \tr_list_append (VAR_11, VAR_16);\n\t\t} else if (VAR_6.rec_type == VAR_17) {\n\t\t\tRBinSection *VAR_16 = R_NEW0 (RBinSection);\n\t\t\tif (r_buf_fread_at (VAR_0->buf, VAR_9, (ut8 *)&VAR_8, \"si\", 1) != sizeof (lmf_data)) {\n\t\t\t\tgoto beach;\n\t\t\t}\n\t\t\tif (!VAR_16) {\n\t\t\t\tgoto beach;\n\t\t\t}\n\t\t\tVAR_16->name = strdup (\"LMF_LOAD\");\n\t\t\tVAR_16->paddr = VAR_9;\n\t\t\tVAR_16->vaddr = VAR_8.offset;\n\t\t\tVAR_16->vsize = VAR_6.data_nbytes - sizeof (lmf_data);\n\t\t\tVAR_16->size = VAR_16->vsize;\n\t\t\tVAR_16->add = true;\n\t\t \tr_list_append (VAR_11, VAR_16);\n\t\t} else if (VAR_6.rec_type == VAR_18) {\n\t\t\tRBinReloc *VAR_16 = R_NEW0 (RBinReloc);\n\t\t\tif (!VAR_16 || r_buf_fread_at (VAR_0->buf, VAR_9, (ut8 *)&VAR_8, \"si\", 1) != sizeof (lmf_data)) {\n\t\t\t\tgoto beach;\n\t\t\t}\n\t\t\tVAR_16->vaddr = VAR_16->paddr = VAR_8.offset;\n\t\t\tVAR_16->type = 'f'; /* COMMENT_2 */\n\t\t\tr_list_append (VAR_12, VAR_16);\n\t\t} else if (VAR_6.rec_type == VAR_19) {\n\t\t\tRBinReloc *VAR_16 = R_NEW0 (RBinReloc);\n\t\t\tif (!VAR_16 || r_buf_fread_at (VAR_0->buf, VAR_9, (ut8 *)&VAR_8, \"si\", 1) != sizeof (lmf_data)) {\n\t\t\t\tgoto beach;\n\t\t\t}\n\t\t\tVAR_16->vaddr = VAR_16->paddr = VAR_8.offset;\n\t\t\tVAR_16->type = 'F'; /* COMMENT_3 */\n\t\t\tr_list_append (VAR_12, VAR_16);\n\t\t} else if (VAR_6.rec_type == VAR_20) {\n\t\t\tr_buf_fread_at (VAR_0->buf, VAR_9, (ut8 *)&VAR_5->rwend, \"si\", 1);\n\t\t}\n\t\tVAR_9 += VAR_6.data_nbytes;\n\t}\n\tsdb_ns_set (VAR_4, \"info\", VAR_5->kv);\n\tVAR_5->sections = VAR_11;\n\tVAR_5->fixups = VAR_12;\n\t*VAR_1 = VAR_5;\n\treturn true;\nbeach:\n\tfree (VAR_5);\n\tr_list_free (VAR_12);\n\tr_list_free (VAR_11);\n\treturn false;\n}",
  "func_graph_path": "radareorg/radare2/634b886e84a5c568d243e744becc6b3223e089cf/bin_qnx.c/vul/after/1.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -21,7 +21,7 @@\n \t\tgoto beach;\n \t}\n \t// Read the first record\n-\tif (r_buf_fread_at (bf->buf, 0, (ut8 *)&lrec, \"ccss\", 1) < QNX_RECORD_SIZE) {\n+\tif (r_buf_fread_at (bf->buf, 0, (ut8 *)&lrec, \"ccss\", 1) != QNX_RECORD_SIZE) {\n \t\tgoto beach;\n \t}\n \t// Load the header\n@@ -29,7 +29,7 @@\n \toffset += lrec.data_nbytes;\n \n \tfor (;;) {\n-\t\tif (r_buf_fread_at (bf->buf, offset, (ut8 *)&lrec, \"ccss\", 1) < QNX_RECORD_SIZE) {\n+\t\tif (r_buf_fread_at (bf->buf, offset, (ut8 *)&lrec, \"ccss\", 1) != QNX_RECORD_SIZE) {\n \t\t\tgoto beach;\n \t\t}\n \t\toffset += sizeof (lmf_record);\n@@ -41,7 +41,7 @@\n \t\t\tif (!ptr) {\n \t\t\t\tgoto beach;\n \t\t\t}\n-\t\t\tif (r_buf_fread_at (bf->buf, offset, (ut8 *)&lres, \"ssss\", 1) < sizeof (lmf_resource)) {\n+\t\t\tif (r_buf_fread_at (bf->buf, offset, (ut8 *)&lres, \"ssss\", 1) != sizeof (lmf_resource)) {\n \t\t\t\tgoto beach;\n \t\t\t}\n \t\t\tptr->name = strdup (\"LMF_RESOURCE\");\n@@ -52,7 +52,7 @@\n \t\t \tr_list_append (sections, ptr);\n \t\t} else if (lrec.rec_type == LMF_LOAD_REC) {\n \t\t\tRBinSection *ptr = R_NEW0 (RBinSection);\n-\t\t\tif (r_buf_fread_at (bf->buf, offset, (ut8 *)&ldata, \"si\", 1) < sizeof (lmf_data)) {\n+\t\t\tif (r_buf_fread_at (bf->buf, offset, (ut8 *)&ldata, \"si\", 1) != sizeof (lmf_data)) {\n \t\t\t\tgoto beach;\n \t\t\t}\n \t\t\tif (!ptr) {\n@@ -67,7 +67,7 @@\n \t\t \tr_list_append (sections, ptr);\n \t\t} else if (lrec.rec_type == LMF_FIXUP_REC) {\n \t\t\tRBinReloc *ptr = R_NEW0 (RBinReloc);\n-\t\t\tif (!ptr || r_buf_fread_at (bf->buf, offset, (ut8 *)&ldata, \"si\", 1) < sizeof (lmf_data)) {\n+\t\t\tif (!ptr || r_buf_fread_at (bf->buf, offset, (ut8 *)&ldata, \"si\", 1) != sizeof (lmf_data)) {\n \t\t\t\tgoto beach;\n \t\t\t}\n \t\t\tptr->vaddr = ptr->paddr = ldata.offset;\n@@ -75,7 +75,7 @@\n \t\t\tr_list_append (fixups, ptr);\n \t\t} else if (lrec.rec_type == LMF_8087_FIXUP_REC) {\n \t\t\tRBinReloc *ptr = R_NEW0 (RBinReloc);\n-\t\t\tif (!ptr || r_buf_fread_at (bf->buf, offset, (ut8 *)&ldata, \"si\", 1) < sizeof (lmf_data)) {\n+\t\t\tif (!ptr || r_buf_fread_at (bf->buf, offset, (ut8 *)&ldata, \"si\", 1) != sizeof (lmf_data)) {\n \t\t\t\tgoto beach;\n \t\t\t}\n \t\t\tptr->vaddr = ptr->paddr = ldata.offset;",
  "diff_line_info": {
    "deleted_lines": [
      "\tif (r_buf_fread_at (bf->buf, 0, (ut8 *)&lrec, \"ccss\", 1) < QNX_RECORD_SIZE) {",
      "\t\tif (r_buf_fread_at (bf->buf, offset, (ut8 *)&lrec, \"ccss\", 1) < QNX_RECORD_SIZE) {",
      "\t\t\tif (r_buf_fread_at (bf->buf, offset, (ut8 *)&lres, \"ssss\", 1) < sizeof (lmf_resource)) {",
      "\t\t\tif (r_buf_fread_at (bf->buf, offset, (ut8 *)&ldata, \"si\", 1) < sizeof (lmf_data)) {",
      "\t\t\tif (!ptr || r_buf_fread_at (bf->buf, offset, (ut8 *)&ldata, \"si\", 1) < sizeof (lmf_data)) {",
      "\t\t\tif (!ptr || r_buf_fread_at (bf->buf, offset, (ut8 *)&ldata, \"si\", 1) < sizeof (lmf_data)) {"
    ],
    "added_lines": [
      "\tif (r_buf_fread_at (bf->buf, 0, (ut8 *)&lrec, \"ccss\", 1) != QNX_RECORD_SIZE) {",
      "\t\tif (r_buf_fread_at (bf->buf, offset, (ut8 *)&lrec, \"ccss\", 1) != QNX_RECORD_SIZE) {",
      "\t\t\tif (r_buf_fread_at (bf->buf, offset, (ut8 *)&lres, \"ssss\", 1) != sizeof (lmf_resource)) {",
      "\t\t\tif (r_buf_fread_at (bf->buf, offset, (ut8 *)&ldata, \"si\", 1) != sizeof (lmf_data)) {",
      "\t\t\tif (!ptr || r_buf_fread_at (bf->buf, offset, (ut8 *)&ldata, \"si\", 1) != sizeof (lmf_data)) {",
      "\t\t\tif (!ptr || r_buf_fread_at (bf->buf, offset, (ut8 *)&ldata, \"si\", 1) != sizeof (lmf_data)) {"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/radareorg/radare2/pull/19747",
  "description": {
    "pr_info": {
      "title": "Fix DoS in PE/QNX/DYLDCACHE/PSX parsers ##crash",
      "number": 19747
    },
    "comment": [
      "* Reported by lazymio\r\n* Reproducer: AAA4AAAAAB4=\r\n\r\n<!--\r\nRead https://github.com/radareorg/radare2/blob/master/DEVELOPERS.md\r\n* PR title must be capitalized, concise and use ##tags\r\n* If the PR is fixing a ticket use 'Fix #1234 - ..' in the commit message\r\n* Follow the coding style, add tests and documentation if necessary\r\n-->\r\n\r\n- [ ] Mark this if you consider it ready to merge\r\n- [ ] I've added tests (optional)\r\n- [ ] I wrote some lines in the [book](https://github.com/radareorg/radare2book) (optional)\r\n\r\n**Description**\r\n\r\n<!-- explain your changes if necessary -->\r\n"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.98,
  "Bug Filter Response": "The patch addresses a DoS vulnerability by ensuring correct read sizes, preventing crashes.\n\n**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.98"
}