{
  "cve_id": "CVE-2022-21700",
  "cwe_ids": [
    "CWE-400"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "micronaut-projects/micronaut-core",
  "commit_msg": "Use ConversionContext constants where possible instead of class (#2356)\n\nChanges\r\n-------\r\n * Added ArgumentConversionContext constants in ConversionContext\r\n * Replaced Argument.of and use of argument classes with\r\nConversionContext constants where possible\r\n * Added getFirst method in ConvertibleMultiValues that accepts\r\nArgumentConversionContent parameter\r\n\r\nPartially addresses issue #2355",
  "commit_hash": "b8ec32c311689667c69ae7d9f9c3b3a8abc96fe3",
  "git_url": "https://github.com/micronaut-projects/micronaut-core/commit/b8ec32c311689667c69ae7d9f9c3b3a8abc96fe3",
  "file_path": "runtime/src/main/java/io/micronaut/scheduling/io/watch/FileWatchCondition.java",
  "func_name": "matches",
  "func_before": "@Override\n    public boolean matches(ConditionContext context) {\n        BeanContext beanContext = context.getBeanContext();\n        if (beanContext instanceof ApplicationContext) {\n            List<String> paths = ((ApplicationContext) beanContext)\n                    .getEnvironment()\n                    .getProperty(FileWatchConfiguration.PATHS, Argument.listOf(String.class))\n                    .orElse(null);\n\n            if (CollectionUtils.isNotEmpty(paths)) {\n\n\n                boolean matchedPaths = paths.stream().anyMatch(p -> new File(p).exists());\n                if (!matchedPaths) {\n                    context.fail(\"File watch disabled because no paths matching the watch pattern exist (Paths: \" + paths + \")\");\n                }\n                return matchedPaths;\n            }\n        }\n\n        context.fail(\"File watch disabled because no watch paths specified\");\n        return false;\n    }",
  "abstract_func_before": "@Override\n    public boolean matches(ConditionContext VAR_0) {\n        BeanContext VAR_1 = VAR_0.getBeanContext();\n        if (VAR_1 instanceof ApplicationContext) {\n            List<String> VAR_2 = ((ApplicationContext) VAR_1)\n                    .getEnvironment()\n                    .getProperty(VAR_3.PATHS, VAR_4.listOf(String.class))\n                    .orElse(null);\n\n            if (VAR_5.isNotEmpty(VAR_2)) {\n\n\n                boolean VAR_6 = VAR_2.stream().anyMatch(VAR_7 -> new File(VAR_7).exists());\n                if (!VAR_6) {\n                    VAR_0.fail(\"File watch disabled because no paths matching the watch pattern exist (Paths: \" + VAR_2 + \")\");\n                }\n                return VAR_6;\n            }\n        }\n\n        VAR_0.fail(\"File watch disabled because no watch paths specified\");\n        return false;\n    }",
  "func_graph_path_before": "micronaut-projects/micronaut-core/b8ec32c311689667c69ae7d9f9c3b3a8abc96fe3/FileWatchCondition.java/vul/before/0.json",
  "func": "@Override\n    public boolean matches(ConditionContext context) {\n        BeanContext beanContext = context.getBeanContext();\n        if (beanContext instanceof ApplicationContext) {\n            List<String> paths = ((ApplicationContext) beanContext)\n                    .getEnvironment()\n                    .getProperty(FileWatchConfiguration.PATHS, ConversionContext.LIST_OF_STRING)\n                    .orElse(null);\n\n            if (CollectionUtils.isNotEmpty(paths)) {\n\n\n                boolean matchedPaths = paths.stream().anyMatch(p -> new File(p).exists());\n                if (!matchedPaths) {\n                    context.fail(\"File watch disabled because no paths matching the watch pattern exist (Paths: \" + paths + \")\");\n                }\n                return matchedPaths;\n            }\n        }\n\n        context.fail(\"File watch disabled because no watch paths specified\");\n        return false;\n    }",
  "abstract_func": "@Override\n    public boolean matches(ConditionContext VAR_0) {\n        BeanContext VAR_1 = VAR_0.getBeanContext();\n        if (VAR_1 instanceof ApplicationContext) {\n            List<String> VAR_2 = ((ApplicationContext) VAR_1)\n                    .getEnvironment()\n                    .getProperty(VAR_3.PATHS, VAR_4.LIST_OF_STRING)\n                    .orElse(null);\n\n            if (VAR_5.isNotEmpty(VAR_2)) {\n\n\n                boolean VAR_6 = VAR_2.stream().anyMatch(VAR_7 -> new File(VAR_7).exists());\n                if (!VAR_6) {\n                    VAR_0.fail(\"File watch disabled because no paths matching the watch pattern exist (Paths: \" + VAR_2 + \")\");\n                }\n                return VAR_6;\n            }\n        }\n\n        VAR_0.fail(\"File watch disabled because no watch paths specified\");\n        return false;\n    }",
  "func_graph_path": "micronaut-projects/micronaut-core/b8ec32c311689667c69ae7d9f9c3b3a8abc96fe3/FileWatchCondition.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -4,7 +4,7 @@\n         if (beanContext instanceof ApplicationContext) {\n             List<String> paths = ((ApplicationContext) beanContext)\n                     .getEnvironment()\n-                    .getProperty(FileWatchConfiguration.PATHS, Argument.listOf(String.class))\n+                    .getProperty(FileWatchConfiguration.PATHS, ConversionContext.LIST_OF_STRING)\n                     .orElse(null);\n \n             if (CollectionUtils.isNotEmpty(paths)) {",
  "diff_line_info": {
    "deleted_lines": [
      "                    .getProperty(FileWatchConfiguration.PATHS, Argument.listOf(String.class))"
    ],
    "added_lines": [
      "                    .getProperty(FileWatchConfiguration.PATHS, ConversionContext.LIST_OF_STRING)"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/micronaut-projects/micronaut-core/pull/2356",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/micronaut-projects/micronaut-core/pull/2356: 403 Client Error: Forbidden for url: https://api.github.com/repos/micronaut-projects/micronaut-core/pulls/2356",
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Defect Remediation & Feature Upgrades; **Confidence:** 0.9"
}