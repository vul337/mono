{
  "cve_id": "CVE-2018-14345",
  "cwe_ids": [
    "CWE-287",
    "CWE-613"
  ],
  "cvss_vector": "AV:N/AC:M/Au:S/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "sddm",
  "commit_msg": "Fix authentication when reusing an existing session\n\n- Check the success value before unlocking the session\n- Don't attempt to use the nonexistant \"sddm-check\" PAM service",
  "commit_hash": "147cec383892d143b5e02daa70f1e7def50f5d98",
  "git_url": "https://github.com/sddm/sddm/commit/147cec383892d143b5e02daa70f1e7def50f5d98",
  "file_path": "src/daemon/Display.cpp",
  "func_name": "Display::startAuth",
  "func_before": "void Display::startAuth(const QString &user, const QString &password, const Session &session) {\n        m_passPhrase = password;\n\n        // sanity check\n        if (!session.isValid()) {\n            qCritical() << \"Invalid session\" << session.fileName();\n            return;\n        }\n        if (session.xdgSessionType().isEmpty()) {\n            qCritical() << \"Failed to find XDG session type for session\" << session.fileName();\n            return;\n        }\n        if (session.exec().isEmpty()) {\n            qCritical() << \"Failed to find command for session\" << session.fileName();\n            return;\n        }\n\n        QString existingSessionId;\n\n        if (Logind::isAvailable() && mainConfig.Users.ReuseSession.get()) {\n            OrgFreedesktopLogin1ManagerInterface manager(Logind::serviceName(), Logind::managerPath(), QDBusConnection::systemBus());\n            auto reply = manager.ListSessions();\n            reply.waitForFinished();\n\n            foreach(const SessionInfo &s, reply.value()) {\n                if (s.userName == user) {\n                    OrgFreedesktopLogin1SessionInterface session(Logind::serviceName(), s.sessionPath.path(), QDBusConnection::systemBus());\n                    if (session.service() == QLatin1String(\"sddm\")) {\n                        existingSessionId =  s.sessionId;\n                        break;\n                    }\n                }\n            }\n        }\n\n        // cache last session\n        m_lastSession = session;\n\n        // save session desktop file name, we'll use it to set the\n        // last session later, in slotAuthenticationFinished()\n        m_sessionName = session.fileName();\n\n        // some information\n        qDebug() << \"Session\" << m_sessionName << \"selected, command:\" << session.exec();\n\n        // create new VT for Wayland sessions otherwise use greeter vt\n        int vt = terminalId();\n        if (session.xdgSessionType() == QLatin1String(\"wayland\"))\n            vt = VirtualTerminal::setUpNewVt();\n        m_lastSession.setVt(vt);\n\n        QProcessEnvironment env;\n        env.insert(QStringLiteral(\"PATH\"), mainConfig.Users.DefaultPath.get());\n        if (session.xdgSessionType() == QLatin1String(\"x11\"))\n            env.insert(QStringLiteral(\"DISPLAY\"), name());\n        env.insert(QStringLiteral(\"XDG_SEAT_PATH\"), daemonApp->displayManager()->seatPath(seat()->name()));\n        env.insert(QStringLiteral(\"XDG_SESSION_PATH\"), daemonApp->displayManager()->sessionPath(QStringLiteral(\"Session%1\").arg(daemonApp->newSessionId())));\n        env.insert(QStringLiteral(\"DESKTOP_SESSION\"), session.desktopSession());\n        env.insert(QStringLiteral(\"XDG_CURRENT_DESKTOP\"), session.desktopNames());\n        env.insert(QStringLiteral(\"XDG_SESSION_CLASS\"), QStringLiteral(\"user\"));\n        env.insert(QStringLiteral(\"XDG_SESSION_TYPE\"), session.xdgSessionType());\n        env.insert(QStringLiteral(\"XDG_SEAT\"), seat()->name());\n\n        env.insert(QStringLiteral(\"XDG_SESSION_DESKTOP\"), session.desktopNames());\n        if (seat()->name() == QLatin1String(\"seat0\")) {\n            env.insert(QStringLiteral(\"XDG_VTNR\"), QString::number(vt));\n        }\n\n        m_auth->insertEnvironment(env);\n\n        m_auth->setUser(user);\n        if (existingSessionId.isNull()) {\n            m_auth->setSession(session.exec());\n        } else {\n            //we only want to unlock the session if we can lock in, so we want to go via PAM auth, but not start a new session\n            //by not setting the session and the helper will emit authentication and then quit\n            connect(m_auth, &Auth::authentication, this, [=](){\n                qDebug() << \"activating existing seat\";\n                OrgFreedesktopLogin1ManagerInterface manager(Logind::serviceName(), Logind::managerPath(), QDBusConnection::systemBus());\n                manager.UnlockSession(existingSessionId);\n                manager.ActivateSession(existingSessionId);\n            });\n        }\n        m_auth->start();\n    }",
  "abstract_func_before": "void Display::startAuth(const QString &VAR_0, const QString &VAR_1, const Session &VAR_2) {\n        VAR_3 = VAR_1;\n\n        /* COMMENT_0 */\n        if (!VAR_2.isValid()) {\n            qCritical() << \"Invalid session\" << VAR_2.fileName();\n            return;\n        }\n        if (VAR_2.xdgSessionType().isEmpty()) {\n            qCritical() << \"Failed to find XDG session type for session\" << VAR_2.fileName();\n            return;\n        }\n        if (VAR_2.exec().isEmpty()) {\n            qCritical() << \"Failed to find command for session\" << VAR_2.fileName();\n            return;\n        }\n\n        QString VAR_4;\n\n        if (Logind::isAvailable() && VAR_5.Users.ReuseSession.get()) {\n            OrgFreedesktopLogin1ManagerInterface manager(Logind::serviceName(), Logind::managerPath(), QDBusConnection::systemBus());\n            auto VAR_6 = VAR_7.ListSessions();\n            VAR_6.waitForFinished();\n\n            foreach(const SessionInfo &VAR_8, reply.value()) {\n                if (VAR_8.userName == VAR_0) {\n                    OrgFreedesktopLogin1SessionInterface VAR_2(Logind::serviceName(), VAR_8.sessionPath.path(), QDBusConnection::systemBus());\n                    if (VAR_2.service() == QLatin1String(\"sddm\")) {\n                        VAR_4 =  VAR_8.sessionId;\n                        break;\n                    }\n                }\n            }\n        }\n\n        /* COMMENT_1 */\n        VAR_9 = VAR_2;\n\n        /* COMMENT_2 */\n        /* COMMENT_3 */\n        VAR_10 = VAR_2.fileName();\n\n        /* COMMENT_4 */\n        qDebug() << \"Session\" << VAR_10 << \"selected, command:\" << VAR_2.exec();\n\n        /* COMMENT_5 */\n        int VAR_11 = terminalId();\n        if (VAR_2.xdgSessionType() == QLatin1String(\"wayland\"))\n            VAR_11 = VirtualTerminal::setUpNewVt();\n        VAR_9.setVt(VAR_11);\n\n        QProcessEnvironment VAR_12;\n        VAR_12.insert(QStringLiteral(\"PATH\"), VAR_5.Users.DefaultPath.get());\n        if (VAR_2.xdgSessionType() == QLatin1String(\"x11\"))\n            VAR_12.insert(QStringLiteral(\"DISPLAY\"), name());\n        VAR_12.insert(QStringLiteral(\"XDG_SEAT_PATH\"), VAR_13->displayManager()->seatPath(seat()->name()));\n        VAR_12.insert(QStringLiteral(\"XDG_SESSION_PATH\"), VAR_13->displayManager()->sessionPath(QStringLiteral(\"Session%1\").arg(VAR_13->newSessionId())));\n        VAR_12.insert(QStringLiteral(\"DESKTOP_SESSION\"), VAR_2.desktopSession());\n        VAR_12.insert(QStringLiteral(\"XDG_CURRENT_DESKTOP\"), VAR_2.desktopNames());\n        VAR_12.insert(QStringLiteral(\"XDG_SESSION_CLASS\"), QStringLiteral(\"user\"));\n        VAR_12.insert(QStringLiteral(\"XDG_SESSION_TYPE\"), VAR_2.xdgSessionType());\n        VAR_12.insert(QStringLiteral(\"XDG_SEAT\"), seat()->name());\n\n        VAR_12.insert(QStringLiteral(\"XDG_SESSION_DESKTOP\"), VAR_2.desktopNames());\n        if (seat()->name() == QLatin1String(\"seat0\")) {\n            VAR_12.insert(QStringLiteral(\"XDG_VTNR\"), QString::number(VAR_11));\n        }\n\n        VAR_14->insertEnvironment(VAR_12);\n\n        VAR_14->setUser(VAR_0);\n        if (VAR_4.isNull()) {\n            VAR_14->setSession(VAR_2.exec());\n        } else {\n            /* COMMENT_6 */\n            /* COMMENT_7 */\n            connect(VAR_14, &Auth::authentication, this, [=](){\n                qDebug() << \"activating existing seat\";\n                OrgFreedesktopLogin1ManagerInterface manager(Logind::serviceName(), Logind::managerPath(), QDBusConnection::systemBus());\n                VAR_7.UnlockSession(VAR_4);\n                VAR_7.ActivateSession(VAR_4);\n            });\n        }\n        VAR_14->start();\n    }",
  "func_graph_path_before": "sddm/147cec383892d143b5e02daa70f1e7def50f5d98/Display.cpp/vul/before/0.json",
  "func": "void Display::startAuth(const QString &user, const QString &password, const Session &session) {\n        m_passPhrase = password;\n\n        // sanity check\n        if (!session.isValid()) {\n            qCritical() << \"Invalid session\" << session.fileName();\n            return;\n        }\n        if (session.xdgSessionType().isEmpty()) {\n            qCritical() << \"Failed to find XDG session type for session\" << session.fileName();\n            return;\n        }\n        if (session.exec().isEmpty()) {\n            qCritical() << \"Failed to find command for session\" << session.fileName();\n            return;\n        }\n\n        QString existingSessionId;\n\n        if (Logind::isAvailable() && mainConfig.Users.ReuseSession.get()) {\n            OrgFreedesktopLogin1ManagerInterface manager(Logind::serviceName(), Logind::managerPath(), QDBusConnection::systemBus());\n            auto reply = manager.ListSessions();\n            reply.waitForFinished();\n\n            foreach(const SessionInfo &s, reply.value()) {\n                if (s.userName == user) {\n                    OrgFreedesktopLogin1SessionInterface session(Logind::serviceName(), s.sessionPath.path(), QDBusConnection::systemBus());\n                    if (session.service() == QLatin1String(\"sddm\")) {\n                        existingSessionId =  s.sessionId;\n                        break;\n                    }\n                }\n            }\n        }\n\n        // cache last session\n        m_lastSession = session;\n\n        // save session desktop file name, we'll use it to set the\n        // last session later, in slotAuthenticationFinished()\n        m_sessionName = session.fileName();\n\n        // some information\n        qDebug() << \"Session\" << m_sessionName << \"selected, command:\" << session.exec();\n\n        // create new VT for Wayland sessions otherwise use greeter vt\n        int vt = terminalId();\n        if (session.xdgSessionType() == QLatin1String(\"wayland\"))\n            vt = VirtualTerminal::setUpNewVt();\n        m_lastSession.setVt(vt);\n\n        QProcessEnvironment env;\n        env.insert(QStringLiteral(\"PATH\"), mainConfig.Users.DefaultPath.get());\n        if (session.xdgSessionType() == QLatin1String(\"x11\"))\n            env.insert(QStringLiteral(\"DISPLAY\"), name());\n        env.insert(QStringLiteral(\"XDG_SEAT_PATH\"), daemonApp->displayManager()->seatPath(seat()->name()));\n        env.insert(QStringLiteral(\"XDG_SESSION_PATH\"), daemonApp->displayManager()->sessionPath(QStringLiteral(\"Session%1\").arg(daemonApp->newSessionId())));\n        env.insert(QStringLiteral(\"DESKTOP_SESSION\"), session.desktopSession());\n        env.insert(QStringLiteral(\"XDG_CURRENT_DESKTOP\"), session.desktopNames());\n        env.insert(QStringLiteral(\"XDG_SESSION_CLASS\"), QStringLiteral(\"user\"));\n        env.insert(QStringLiteral(\"XDG_SESSION_TYPE\"), session.xdgSessionType());\n        env.insert(QStringLiteral(\"XDG_SEAT\"), seat()->name());\n\n        env.insert(QStringLiteral(\"XDG_SESSION_DESKTOP\"), session.desktopNames());\n        if (seat()->name() == QLatin1String(\"seat0\")) {\n            env.insert(QStringLiteral(\"XDG_VTNR\"), QString::number(vt));\n        }\n\n        m_auth->insertEnvironment(env);\n\n        m_auth->setUser(user);\n        if (existingSessionId.isNull()) {\n            m_auth->setSession(session.exec());\n        } else {\n            //we only want to unlock the session if we can lock in, so we want to go via PAM auth, but not start a new session\n            //by not setting the session and the helper will emit authentication and then quit\n            connect(m_auth, &Auth::authentication, this, [=](const QString &, bool success){\n                if(!success)\n                    return;\n                qDebug() << \"activating existing seat\";\n                OrgFreedesktopLogin1ManagerInterface manager(Logind::serviceName(), Logind::managerPath(), QDBusConnection::systemBus());\n                manager.UnlockSession(existingSessionId);\n                manager.ActivateSession(existingSessionId);\n            });\n        }\n        m_auth->start();\n    }",
  "abstract_func": "void Display::startAuth(const QString &VAR_0, const QString &VAR_1, const Session &VAR_2) {\n        VAR_3 = VAR_1;\n\n        /* COMMENT_0 */\n        if (!VAR_2.isValid()) {\n            qCritical() << \"Invalid session\" << VAR_2.fileName();\n            return;\n        }\n        if (VAR_2.xdgSessionType().isEmpty()) {\n            qCritical() << \"Failed to find XDG session type for session\" << VAR_2.fileName();\n            return;\n        }\n        if (VAR_2.exec().isEmpty()) {\n            qCritical() << \"Failed to find command for session\" << VAR_2.fileName();\n            return;\n        }\n\n        QString VAR_4;\n\n        if (Logind::isAvailable() && VAR_5.Users.ReuseSession.get()) {\n            OrgFreedesktopLogin1ManagerInterface manager(Logind::serviceName(), Logind::managerPath(), QDBusConnection::systemBus());\n            auto VAR_6 = VAR_7.ListSessions();\n            VAR_6.waitForFinished();\n\n            foreach(const SessionInfo &VAR_8, reply.value()) {\n                if (VAR_8.userName == VAR_0) {\n                    OrgFreedesktopLogin1SessionInterface VAR_2(Logind::serviceName(), VAR_8.sessionPath.path(), QDBusConnection::systemBus());\n                    if (VAR_2.service() == QLatin1String(\"sddm\")) {\n                        VAR_4 =  VAR_8.sessionId;\n                        break;\n                    }\n                }\n            }\n        }\n\n        /* COMMENT_1 */\n        VAR_9 = VAR_2;\n\n        /* COMMENT_2 */\n        /* COMMENT_3 */\n        VAR_10 = VAR_2.fileName();\n\n        /* COMMENT_4 */\n        qDebug() << \"Session\" << VAR_10 << \"selected, command:\" << VAR_2.exec();\n\n        /* COMMENT_5 */\n        int VAR_11 = terminalId();\n        if (VAR_2.xdgSessionType() == QLatin1String(\"wayland\"))\n            VAR_11 = VirtualTerminal::setUpNewVt();\n        VAR_9.setVt(VAR_11);\n\n        QProcessEnvironment VAR_12;\n        VAR_12.insert(QStringLiteral(\"PATH\"), VAR_5.Users.DefaultPath.get());\n        if (VAR_2.xdgSessionType() == QLatin1String(\"x11\"))\n            VAR_12.insert(QStringLiteral(\"DISPLAY\"), name());\n        VAR_12.insert(QStringLiteral(\"XDG_SEAT_PATH\"), VAR_13->displayManager()->seatPath(seat()->name()));\n        VAR_12.insert(QStringLiteral(\"XDG_SESSION_PATH\"), VAR_13->displayManager()->sessionPath(QStringLiteral(\"Session%1\").arg(VAR_13->newSessionId())));\n        VAR_12.insert(QStringLiteral(\"DESKTOP_SESSION\"), VAR_2.desktopSession());\n        VAR_12.insert(QStringLiteral(\"XDG_CURRENT_DESKTOP\"), VAR_2.desktopNames());\n        VAR_12.insert(QStringLiteral(\"XDG_SESSION_CLASS\"), QStringLiteral(\"user\"));\n        VAR_12.insert(QStringLiteral(\"XDG_SESSION_TYPE\"), VAR_2.xdgSessionType());\n        VAR_12.insert(QStringLiteral(\"XDG_SEAT\"), seat()->name());\n\n        VAR_12.insert(QStringLiteral(\"XDG_SESSION_DESKTOP\"), VAR_2.desktopNames());\n        if (seat()->name() == QLatin1String(\"seat0\")) {\n            VAR_12.insert(QStringLiteral(\"XDG_VTNR\"), QString::number(VAR_11));\n        }\n\n        VAR_14->insertEnvironment(VAR_12);\n\n        VAR_14->setUser(VAR_0);\n        if (VAR_4.isNull()) {\n            VAR_14->setSession(VAR_2.exec());\n        } else {\n            /* COMMENT_6 */\n            /* COMMENT_7 */\n            connect(VAR_14, &Auth::authentication, this, [=](const QString &, bool VAR_15){\n                if(!VAR_15)\n                    return;\n                qDebug() << \"activating existing seat\";\n                OrgFreedesktopLogin1ManagerInterface manager(Logind::serviceName(), Logind::managerPath(), QDBusConnection::systemBus());\n                VAR_7.UnlockSession(VAR_4);\n                VAR_7.ActivateSession(VAR_4);\n            });\n        }\n        VAR_14->start();\n    }",
  "func_graph_path": "sddm/147cec383892d143b5e02daa70f1e7def50f5d98/Display.cpp/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -74,7 +74,9 @@\n         } else {\n             //we only want to unlock the session if we can lock in, so we want to go via PAM auth, but not start a new session\n             //by not setting the session and the helper will emit authentication and then quit\n-            connect(m_auth, &Auth::authentication, this, [=](){\n+            connect(m_auth, &Auth::authentication, this, [=](const QString &, bool success){\n+                if(!success)\n+                    return;\n                 qDebug() << \"activating existing seat\";\n                 OrgFreedesktopLogin1ManagerInterface manager(Logind::serviceName(), Logind::managerPath(), QDBusConnection::systemBus());\n                 manager.UnlockSession(existingSessionId);",
  "diff_line_info": {
    "deleted_lines": [
      "            connect(m_auth, &Auth::authentication, this, [=](){"
    ],
    "added_lines": [
      "            connect(m_auth, &Auth::authentication, this, [=](const QString &, bool success){",
      "                if(!success)",
      "                    return;"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/sddm/sddm/pull/1050",
  "description": {
    "pr_info": {
      "title": "Fix authentication when reusing an existing session",
      "number": 1050
    },
    "comment": [
      "- Check the success value before unlocking the session\r\n- Don't attempt to use the nonexistant \"sddm-check\" PAM service"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 0.9"
}