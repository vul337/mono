{
  "cve_id": "CVE-2022-40497",
  "cwe_ids": [
    "CWE-Other"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
  "cvss_is_v3": true,
  "repo_name": "wazuh",
  "commit_msg": "Fix path traversal flaw in custom Active response commands",
  "commit_hash": "a57d3293964e5489bef188f7d424b45c762595fb",
  "git_url": "https://github.com/wazuh/wazuh/commit/a57d3293964e5489bef188f7d424b45c762595fb",
  "file_path": "src/os_execd/exec.c",
  "func_name": "GetCommandbyName",
  "func_before": "char *GetCommandbyName(const char *name, int *timeout)\n{\n    int i = 0;\n\n    // Filter custom commands\n\n    if (name[0] == '!') {\n        static char command[OS_FLSIZE];\n\n        if (snprintf(command, sizeof(command), \"%s/%s\", AR_BINDIR, name + 1) >= (int)sizeof(command)) {\n            mwarn(\"Cannot execute command '%32s...': path too long.\", name + 1);\n            return NULL;\n        }\n\n        *timeout = 0;\n        return command;\n    }\n\n    for (; i < exec_size; i++) {\n        if (strcmp(name, exec_names[i]) == 0) {\n            *timeout = exec_timeout[i];\n            return (exec_cmd[i]);\n        }\n    }\n\n    return (NULL);\n}",
  "abstract_func_before": "char *GetCommandbyName(const char *VAR_0, int *VAR_1)\n{\n    int VAR_2 = 0;\n\n    /* COMMENT_0 */\n\n    if (VAR_0[0] == '!') {\n        static char VAR_3[VAR_4];\n\n        if (snprintf(VAR_3, sizeof(VAR_3), \"%s/%s\", VAR_5, VAR_0 + 1) >= (int)sizeof(VAR_3)) {\n            mwarn(\"Cannot execute command '%32s...': path too long.\", VAR_0 + 1);\n            return NULL;\n        }\n\n        *VAR_1 = 0;\n        return VAR_3;\n    }\n\n    for (; VAR_2 < VAR_6; VAR_2++) {\n        if (strcmp(VAR_0, VAR_7[VAR_2]) == 0) {\n            *VAR_1 = VAR_8[VAR_2];\n            return (VAR_9[VAR_2]);\n        }\n    }\n\n    return (NULL);\n}",
  "func_graph_path_before": "wazuh/a57d3293964e5489bef188f7d424b45c762595fb/exec.c/vul/before/0.json",
  "func": "char *GetCommandbyName(const char *name, int *timeout)\n{\n    int i = 0;\n\n    // Filter custom commands\n\n    if (name[0] == '!') {\n        if (w_ref_parent_folder(name + 1)) {\n            mwarn(\"Active response command '%s' vulnerable to directory traversal attack. Ignoring.\", name + 1);\n            return NULL;\n        }\n\n        static char command[OS_FLSIZE];\n\n        if (snprintf(command, sizeof(command), \"%s/%s\", AR_BINDIR, name + 1) >= (int)sizeof(command)) {\n            mwarn(\"Cannot execute command '%32s...': path too long.\", name + 1);\n            return NULL;\n        }\n\n        *timeout = 0;\n        return command;\n    }\n\n    for (; i < exec_size; i++) {\n        if (strcmp(name, exec_names[i]) == 0) {\n            *timeout = exec_timeout[i];\n            return (exec_cmd[i]);\n        }\n    }\n\n    return (NULL);\n}",
  "abstract_func": "char *GetCommandbyName(const char *VAR_0, int *VAR_1)\n{\n    int VAR_2 = 0;\n\n    /* COMMENT_0 */\n\n    if (VAR_0[0] == '!') {\n        if (w_ref_parent_folder(VAR_0 + 1)) {\n            mwarn(\"Active response command '%s' vulnerable to directory traversal attack. Ignoring.\", VAR_0 + 1);\n            return NULL;\n        }\n\n        static char VAR_3[VAR_4];\n\n        if (snprintf(VAR_3, sizeof(VAR_3), \"%s/%s\", VAR_5, VAR_0 + 1) >= (int)sizeof(VAR_3)) {\n            mwarn(\"Cannot execute command '%32s...': path too long.\", VAR_0 + 1);\n            return NULL;\n        }\n\n        *VAR_1 = 0;\n        return VAR_3;\n    }\n\n    for (; VAR_2 < VAR_6; VAR_2++) {\n        if (strcmp(VAR_0, VAR_7[VAR_2]) == 0) {\n            *VAR_1 = VAR_8[VAR_2];\n            return (VAR_9[VAR_2]);\n        }\n    }\n\n    return (NULL);\n}",
  "func_graph_path": "wazuh/a57d3293964e5489bef188f7d424b45c762595fb/exec.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -5,6 +5,11 @@\n     // Filter custom commands\n \n     if (name[0] == '!') {\n+        if (w_ref_parent_folder(name + 1)) {\n+            mwarn(\"Active response command '%s' vulnerable to directory traversal attack. Ignoring.\", name + 1);\n+            return NULL;\n+        }\n+\n         static char command[OS_FLSIZE];\n \n         if (snprintf(command, sizeof(command), \"%s/%s\", AR_BINDIR, name + 1) >= (int)sizeof(command)) {",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "        if (w_ref_parent_folder(name + 1)) {",
      "            mwarn(\"Active response command '%s' vulnerable to directory traversal attack. Ignoring.\", name + 1);",
      "            return NULL;",
      "        }",
      ""
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/wazuh/wazuh/pull/14801",
  "description": {
    "pr_info": {
      "title": "Fix arbitrary code execution flaw in Active Response",
      "number": 14801
    },
    "comment": [
      "|Affected versions|Module|Component|Cause|Credits|\r\n|---|---|---|---|---|\r\n|3.6.1 - 3.13.5, 4.0.0 - 4.2.7, 4.3.0 - 4.3.7|Active Response|Agent & manager|#1217| All credits to Roshan Guragain|\r\n\r\n\r\nThanks to **Roshan Guragain** for reporting the flaw and helping us improve the product!\r\n\r\n## Flaw\r\n\r\nReferences to a parent folder are possible in a custom AR API request:\r\n|Method|Endpoint|Data|\r\n|---|---|---|\r\n|PUT|/active-response|`{\"command\":\"!../../../../../../bin/ls\"}`|\r\n\r\n## Impact\r\n\r\nA manager administrator with RBAC permissions `active-response:command` might execute a program outside the Active Response binary folder (_/var/ossec/active-response/bin_).\r\n\r\n- In versions below 4.2.0, the target command would receive the extra arguments (`extra_args`) as a command-line parameter list.\r\n- In 4.2.0 and higher, the target command receives all data (including the extra arguments) in a JSON string via standard input.\r\n\r\n### Agents from 3.6.1 to 4.1.5\r\n\r\nRunning a custom Active Response with these parameters:\r\n\r\n|Command|Custom|Arguments|\r\n|---|---|---|\r\n|`../../../../root/test.sh`|`true`|`[arg1, arg2, arg3]`|\r\n\r\nThis will cause the agent to run `/root/test.sh` with the following arguments:\r\n```shell\r\n/var/ossec/active-response/bin/../../../../root/test.sh add arg1 arg2 arg3\r\n```\r\n\r\n### Agents from 4.2.0 to 4.3.7\r\n\r\nRunning a custom Active Response with these parameters:\r\n\r\n|Command|Arguments|\r\n|---|---|\r\n|`!../../../../root/test.sh`|`[arg1, arg2, arg3]`|\r\n\r\nThis will cause the agent to run `/root/test.sh` with no extra arguments, but the agent will send the following string via _stdin_:\r\n```shell\r\n{\"version\":1,\"origin\":{\"name\":null,\"module\":\"wazuh-execd\"},\"command\":\"add\",\"parameters\":{\"extra_args\":[\"arg1\",\"arg2\",\"arg3\"],\"alert\":{},\"program\":\"active-response/bin/../../../../root/test.sh\"}}\r\n```\r\n\r\n## Proposed fix\r\n\r\nWe're implementing protection at two levels:\r\n\r\n1. Prevent the agent (wazuh-execd) from running a custom AR outside _active-response/bin_.\r\n2. Filter custom Active Response commands by the API and reject those whose member `command` contains any reference to a parent folder (`../`).\r\n\r\n## Tests\r\n\r\n- [x] Send a custom AR command to Execd containing a reference to the parent folder:\r\n```sh\r\necho -n '{\"version\": 1, \"origin\": {\"name\": null, \"module\": \"framework\"}, \"command\": \"!../../../../../../bin/ls\", \"parameters\": {\"extra_args\": [], \"alert\": {}}}' | nc -w0 -Uu /var/ossec/queue/alerts/execq\r\n```\r\n```\r\n2022/09/05 14:48:51 wazuh-execd[6848] exec.c:163 at GetCommandbyName(): WARNING: Active response command '../../../../../../bin/ls' vulnerable to directory traversal attack. Ignoring.\r\n2022/09/05 14:48:51 wazuh-execd[6848] execd.c:465 at ExecdStart(): ERROR: (1311): Invalid command name '!../../../../../../bin/ls' provided.\r\n```\r\n- [x] Unit tests to check that `GetCommandbyName` rejects custom commands with path traversal.\r\n- [x] The API rejects custom ARs with commands referring to the parent folder:\r\n```sh\r\ncurl -H \"Content-Type: application/json\" -X PUT https://localhost:55000/active-response?agents_list=001 --data '{\"command\":\"!../../../../../../bin/ls\"}'\r\n```\r\n```\r\n{\"title\": \"Bad Request\", \"detail\": \"'!../../../../../../bin/l' is not a 'active_response_command' - 'command'\"}\r\n```",
      "## QA review\r\n\r\n- **Type**: Manual testing.\r\n- **Status**: Approved but proposed improvements  ðŸŸ¡ \r\n- **Testing issue**: https://github.com/wazuh/wazuh-qa/issues/3257\r\n- **Comments**: Everything seems to be working properly. The following issue https://github.com/wazuh/wazuh/issues/14831 has been opened for:\r\n  - Improve consistency between AR socket response and API when entering a custom command. Some commands are accepted in the socket but not through the API.\r\n  - Delete duplicate WARNING message.\r\n\r\n"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 1.0"
}