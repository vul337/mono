{
  "cve_id": "CVE-2020-24716",
  "cwe_ids": [
    "CWE-863",
    "CWE-276"
  ],
  "cvss_vector": "AV:L/AC:L/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "openzfs/zfs",
  "commit_msg": "FreeBSD: Fix UNIX permissions checking\n\nReviewed-by: Ryan Moeller <ryan@iXsystems.com>\r\nReviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>\r\nSigned-off-by: Matt Macy <mmacy@FreeBSD.org>\r\nCloses #10727",
  "commit_hash": "716b53d0a14c72bda16c0872565dd1909757e73f",
  "git_url": "https://github.com/openzfs/zfs/commit/716b53d0a14c72bda16c0872565dd1909757e73f",
  "file_path": "module/zfs/zfs_fuid.c",
  "func_name": "zfs_fuid_create",
  "func_before": "uint64_t\nzfs_fuid_create(zfsvfs_t *zfsvfs, uint64_t id, cred_t *cr,\n    zfs_fuid_type_t type, zfs_fuid_info_t **fuidpp)\n{\n#ifdef HAVE_KSID\n\tconst char *domain;\n\tchar *kdomain;\n\tuint32_t fuid_idx = FUID_INDEX(id);\n\tuint32_t rid;\n\tidmap_stat status;\n\tuint64_t idx = 0;\n\tzfs_fuid_t *zfuid = NULL;\n\tzfs_fuid_info_t *fuidp = NULL;\n\n\t/*\n\t * If POSIX ID, or entry is already a FUID then\n\t * just return the id\n\t *\n\t * We may also be handed an already FUID'ized id via\n\t * chmod.\n\t */\n\n\tif (!zfsvfs->z_use_fuids || !IS_EPHEMERAL(id) || fuid_idx != 0)\n\t\treturn (id);\n\n\tif (zfsvfs->z_replay) {\n\t\tfuidp = zfsvfs->z_fuid_replay;\n\n\t\t/*\n\t\t * If we are passed an ephemeral id, but no\n\t\t * fuid_info was logged then return NOBODY.\n\t\t * This is most likely a result of idmap service\n\t\t * not being available.\n\t\t */\n\t\tif (fuidp == NULL)\n\t\t\treturn (UID_NOBODY);\n\n\t\tVERIFY3U(type, >=, ZFS_OWNER);\n\t\tVERIFY3U(type, <=, ZFS_ACE_GROUP);\n\n\t\tswitch (type) {\n\t\tcase ZFS_ACE_USER:\n\t\tcase ZFS_ACE_GROUP:\n\t\t\tzfuid = list_head(&fuidp->z_fuids);\n\t\t\trid = FUID_RID(zfuid->z_logfuid);\n\t\t\tidx = FUID_INDEX(zfuid->z_logfuid);\n\t\t\tbreak;\n\t\tcase ZFS_OWNER:\n\t\t\trid = FUID_RID(fuidp->z_fuid_owner);\n\t\t\tidx = FUID_INDEX(fuidp->z_fuid_owner);\n\t\t\tbreak;\n\t\tcase ZFS_GROUP:\n\t\t\trid = FUID_RID(fuidp->z_fuid_group);\n\t\t\tidx = FUID_INDEX(fuidp->z_fuid_group);\n\t\t\tbreak;\n\t\t};\n\t\tdomain = fuidp->z_domain_table[idx - 1];\n\t} else {\n\t\tif (type == ZFS_OWNER || type == ZFS_ACE_USER)\n\t\t\tstatus = kidmap_getsidbyuid(crgetzone(cr), id,\n\t\t\t    &domain, &rid);\n\t\telse\n\t\t\tstatus = kidmap_getsidbygid(crgetzone(cr), id,\n\t\t\t    &domain, &rid);\n\n\t\tif (status != 0) {\n\t\t\t/*\n\t\t\t * When returning nobody we will need to\n\t\t\t * make a dummy fuid table entry for logging\n\t\t\t * purposes.\n\t\t\t */\n\t\t\trid = UID_NOBODY;\n\t\t\tdomain = nulldomain;\n\t\t}\n\t}\n\n\tidx = zfs_fuid_find_by_domain(zfsvfs, domain, &kdomain, B_TRUE);\n\n\tif (!zfsvfs->z_replay)\n\t\tzfs_fuid_node_add(fuidpp, kdomain,\n\t\t    rid, idx, id, type);\n\telse if (zfuid != NULL) {\n\t\tlist_remove(&fuidp->z_fuids, zfuid);\n\t\tkmem_free(zfuid, sizeof (zfs_fuid_t));\n\t}\n\treturn (FUID_ENCODE(idx, rid));\n#else\n\t/*\n\t * The Linux port only supports POSIX IDs, use the passed id.\n\t */\n\treturn (id);\n#endif\n}",
  "abstract_func_before": "uint64_t\nzfs_fuid_create(zfsvfs_t *VAR_0, uint64_t VAR_1, cred_t *VAR_2,\n    zfs_fuid_type_t VAR_3, zfs_fuid_info_t **VAR_4)\n{\n#ifdef VAR_5\n\tconst char *VAR_6;\n\tchar *VAR_7;\n\tuint32_t VAR_8 = FUID_INDEX(VAR_1);\n\tuint32_t VAR_9;\n\tidmap_stat VAR_10;\n\tuint64_t VAR_11 = 0;\n\tzfs_fuid_t *VAR_12 = NULL;\n\tzfs_fuid_info_t *VAR_13 = NULL;\n\n\t/* COMMENT_0 */\n                                                \n                      \n   \n                                                     \n          \n    \n\n\tif (!VAR_0->z_use_fuids || !IS_EPHEMERAL(VAR_1) || VAR_8 != 0)\n\t\treturn (VAR_1);\n\n\tif (VAR_0->z_replay) {\n\t\tVAR_13 = VAR_0->z_fuid_replay;\n\n\t\t/* COMMENT_7 */\n                                             \n                                             \n                                                  \n                         \n     \n\t\tif (VAR_13 == NULL)\n\t\t\treturn (VAR_14);\n\n\t\tVERIFY3U(VAR_3, >=, VAR_15);\n\t\tVERIFY3U(VAR_3, <=, VAR_16);\n\n\t\tswitch (VAR_3) {\n\t\tcase VAR_17:\n\t\tcase VAR_16:\n\t\t\tVAR_12 = list_head(&VAR_13->z_fuids);\n\t\t\tVAR_9 = FUID_RID(VAR_12->z_logfuid);\n\t\t\tVAR_11 = FUID_INDEX(VAR_12->z_logfuid);\n\t\t\tbreak;\n\t\tcase VAR_15:\n\t\t\tVAR_9 = FUID_RID(VAR_13->z_fuid_owner);\n\t\t\tVAR_11 = FUID_INDEX(VAR_13->z_fuid_owner);\n\t\t\tbreak;\n\t\tcase VAR_18:\n\t\t\tVAR_9 = FUID_RID(VAR_13->z_fuid_group);\n\t\t\tVAR_11 = FUID_INDEX(VAR_13->z_fuid_group);\n\t\t\tbreak;\n\t\t};\n\t\tVAR_6 = VAR_13->z_domain_table[VAR_11 - 1];\n\t} else {\n\t\tif (VAR_3 == VAR_15 || VAR_3 == VAR_17)\n\t\t\tVAR_10 = kidmap_getsidbyuid(crgetzone(VAR_2), VAR_1,\n\t\t\t    &VAR_6, &VAR_9);\n\t\telse\n\t\t\tVAR_10 = kidmap_getsidbygid(crgetzone(VAR_2), VAR_1,\n\t\t\t    &VAR_6, &VAR_9);\n\n\t\tif (VAR_10 != 0) {\n\t\t\t/* COMMENT_13 */\n                                           \n                                               \n               \n      \n\t\t\tVAR_9 = VAR_14;\n\t\t\tVAR_6 = VAR_19;\n\t\t}\n\t}\n\n\tVAR_11 = zfs_fuid_find_by_domain(VAR_0, VAR_6, &VAR_7, VAR_20);\n\n\tif (!VAR_0->z_replay)\n\t\tzfs_fuid_node_add(VAR_4, VAR_7,\n\t\t    VAR_9, VAR_11, VAR_1, VAR_3);\n\telse if (VAR_12 != NULL) {\n\t\tlist_remove(&VAR_13->z_fuids, VAR_12);\n\t\tkmem_free(VAR_12, sizeof (zfs_fuid_t));\n\t}\n\treturn (FUID_ENCODE(VAR_11, VAR_9));\n#else\n\t/* COMMENT_18 */\n                                                              \n    \n\treturn (VAR_1);\n#endif\n}",
  "func_graph_path_before": "openzfs/zfs/716b53d0a14c72bda16c0872565dd1909757e73f/zfs_fuid.c/vul/before/1.json",
  "func": "uint64_t\nzfs_fuid_create(zfsvfs_t *zfsvfs, uint64_t id, cred_t *cr,\n    zfs_fuid_type_t type, zfs_fuid_info_t **fuidpp)\n{\n#ifdef HAVE_KSID\n\tconst char *domain;\n\tchar *kdomain;\n\tuint32_t fuid_idx = FUID_INDEX(id);\n\tuint32_t rid = 0;\n\tidmap_stat status;\n\tuint64_t idx = UID_NOBODY;\n\tzfs_fuid_t *zfuid = NULL;\n\tzfs_fuid_info_t *fuidp = NULL;\n\n\t/*\n\t * If POSIX ID, or entry is already a FUID then\n\t * just return the id\n\t *\n\t * We may also be handed an already FUID'ized id via\n\t * chmod.\n\t */\n\n\tif (!zfsvfs->z_use_fuids || !IS_EPHEMERAL(id) || fuid_idx != 0)\n\t\treturn (id);\n\n\tif (zfsvfs->z_replay) {\n\t\tfuidp = zfsvfs->z_fuid_replay;\n\n\t\t/*\n\t\t * If we are passed an ephemeral id, but no\n\t\t * fuid_info was logged then return NOBODY.\n\t\t * This is most likely a result of idmap service\n\t\t * not being available.\n\t\t */\n\t\tif (fuidp == NULL)\n\t\t\treturn (UID_NOBODY);\n\n\t\tVERIFY3U(type, >=, ZFS_OWNER);\n\t\tVERIFY3U(type, <=, ZFS_ACE_GROUP);\n\n\t\tswitch (type) {\n\t\tcase ZFS_ACE_USER:\n\t\tcase ZFS_ACE_GROUP:\n\t\t\tzfuid = list_head(&fuidp->z_fuids);\n\t\t\trid = FUID_RID(zfuid->z_logfuid);\n\t\t\tidx = FUID_INDEX(zfuid->z_logfuid);\n\t\t\tbreak;\n\t\tcase ZFS_OWNER:\n\t\t\trid = FUID_RID(fuidp->z_fuid_owner);\n\t\t\tidx = FUID_INDEX(fuidp->z_fuid_owner);\n\t\t\tbreak;\n\t\tcase ZFS_GROUP:\n\t\t\trid = FUID_RID(fuidp->z_fuid_group);\n\t\t\tidx = FUID_INDEX(fuidp->z_fuid_group);\n\t\t\tbreak;\n\t\t};\n\t\tdomain = fuidp->z_domain_table[idx - 1];\n\t} else {\n\t\tif (type == ZFS_OWNER || type == ZFS_ACE_USER)\n\t\t\tstatus = kidmap_getsidbyuid(crgetzone(cr), id,\n\t\t\t    &domain, &rid);\n\t\telse\n\t\t\tstatus = kidmap_getsidbygid(crgetzone(cr), id,\n\t\t\t    &domain, &rid);\n\n\t\tif (status != 0) {\n\t\t\t/*\n\t\t\t * When returning nobody we will need to\n\t\t\t * make a dummy fuid table entry for logging\n\t\t\t * purposes.\n\t\t\t */\n\t\t\trid = UID_NOBODY;\n\t\t\tdomain = nulldomain;\n\t\t}\n\t}\n\n\tidx = zfs_fuid_find_by_domain(zfsvfs, domain, &kdomain, B_TRUE);\n\n\tif (!zfsvfs->z_replay)\n\t\tzfs_fuid_node_add(fuidpp, kdomain,\n\t\t    rid, idx, id, type);\n\telse if (zfuid != NULL) {\n\t\tlist_remove(&fuidp->z_fuids, zfuid);\n\t\tkmem_free(zfuid, sizeof (zfs_fuid_t));\n\t}\n\treturn (FUID_ENCODE(idx, rid));\n#else\n\t/*\n\t * The Linux port only supports POSIX IDs, use the passed id.\n\t */\n\treturn (id);\n#endif\n}",
  "abstract_func": "uint64_t\nzfs_fuid_create(zfsvfs_t *VAR_0, uint64_t VAR_1, cred_t *VAR_2,\n    zfs_fuid_type_t VAR_3, zfs_fuid_info_t **VAR_4)\n{\n#ifdef VAR_5\n\tconst char *VAR_6;\n\tchar *VAR_7;\n\tuint32_t VAR_8 = FUID_INDEX(VAR_1);\n\tuint32_t VAR_9 = 0;\n\tidmap_stat VAR_10;\n\tuint64_t VAR_11 = VAR_12;\n\tzfs_fuid_t *VAR_13 = NULL;\n\tzfs_fuid_info_t *VAR_14 = NULL;\n\n\t/* COMMENT_0 */\n                                                \n                      \n   \n                                                     \n          \n    \n\n\tif (!VAR_0->z_use_fuids || !IS_EPHEMERAL(VAR_1) || VAR_8 != 0)\n\t\treturn (VAR_1);\n\n\tif (VAR_0->z_replay) {\n\t\tVAR_14 = VAR_0->z_fuid_replay;\n\n\t\t/* COMMENT_7 */\n                                             \n                                             \n                                                  \n                         \n     \n\t\tif (VAR_14 == NULL)\n\t\t\treturn (VAR_12);\n\n\t\tVERIFY3U(VAR_3, >=, VAR_15);\n\t\tVERIFY3U(VAR_3, <=, VAR_16);\n\n\t\tswitch (VAR_3) {\n\t\tcase VAR_17:\n\t\tcase VAR_16:\n\t\t\tVAR_13 = list_head(&VAR_14->z_fuids);\n\t\t\tVAR_9 = FUID_RID(VAR_13->z_logfuid);\n\t\t\tVAR_11 = FUID_INDEX(VAR_13->z_logfuid);\n\t\t\tbreak;\n\t\tcase VAR_15:\n\t\t\tVAR_9 = FUID_RID(VAR_14->z_fuid_owner);\n\t\t\tVAR_11 = FUID_INDEX(VAR_14->z_fuid_owner);\n\t\t\tbreak;\n\t\tcase VAR_18:\n\t\t\tVAR_9 = FUID_RID(VAR_14->z_fuid_group);\n\t\t\tVAR_11 = FUID_INDEX(VAR_14->z_fuid_group);\n\t\t\tbreak;\n\t\t};\n\t\tVAR_6 = VAR_14->z_domain_table[VAR_11 - 1];\n\t} else {\n\t\tif (VAR_3 == VAR_15 || VAR_3 == VAR_17)\n\t\t\tVAR_10 = kidmap_getsidbyuid(crgetzone(VAR_2), VAR_1,\n\t\t\t    &VAR_6, &VAR_9);\n\t\telse\n\t\t\tVAR_10 = kidmap_getsidbygid(crgetzone(VAR_2), VAR_1,\n\t\t\t    &VAR_6, &VAR_9);\n\n\t\tif (VAR_10 != 0) {\n\t\t\t/* COMMENT_13 */\n                                           \n                                               \n               \n      \n\t\t\tVAR_9 = VAR_12;\n\t\t\tVAR_6 = VAR_19;\n\t\t}\n\t}\n\n\tVAR_11 = zfs_fuid_find_by_domain(VAR_0, VAR_6, &VAR_7, VAR_20);\n\n\tif (!VAR_0->z_replay)\n\t\tzfs_fuid_node_add(VAR_4, VAR_7,\n\t\t    VAR_9, VAR_11, VAR_1, VAR_3);\n\telse if (VAR_13 != NULL) {\n\t\tlist_remove(&VAR_14->z_fuids, VAR_13);\n\t\tkmem_free(VAR_13, sizeof (zfs_fuid_t));\n\t}\n\treturn (FUID_ENCODE(VAR_11, VAR_9));\n#else\n\t/* COMMENT_18 */\n                                                              \n    \n\treturn (VAR_1);\n#endif\n}",
  "func_graph_path": "openzfs/zfs/716b53d0a14c72bda16c0872565dd1909757e73f/zfs_fuid.c/vul/after/1.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -6,9 +6,9 @@\n \tconst char *domain;\n \tchar *kdomain;\n \tuint32_t fuid_idx = FUID_INDEX(id);\n-\tuint32_t rid;\n+\tuint32_t rid = 0;\n \tidmap_stat status;\n-\tuint64_t idx = 0;\n+\tuint64_t idx = UID_NOBODY;\n \tzfs_fuid_t *zfuid = NULL;\n \tzfs_fuid_info_t *fuidp = NULL;\n ",
  "diff_line_info": {
    "deleted_lines": [
      "\tuint32_t rid;",
      "\tuint64_t idx = 0;"
    ],
    "added_lines": [
      "\tuint32_t rid = 0;",
      "\tuint64_t idx = UID_NOBODY;"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/openzfs/zfs/pull/10727",
  "description": {
    "pr_info": {
      "title": "FreeBSD: Fix UNIX permissions checking",
      "number": 10727
    },
    "comment": [
      "Signed-off-by: Matt Macy <mmacy@FreeBSD.org>\r\n\r\n<!--- Please fill out the following template, which will help other contributors review your Pull Request. -->\r\n\r\n<!--- Provide a general summary of your changes in the Title above -->\r\n\r\n<!---\r\nDocumentation on ZFS Buildbot options can be found at\r\nhttps://openzfs.github.io/openzfs-docs/Developer%20Resources/Buildbot%20Options.html\r\n-->\r\n\r\n### Motivation and Context\r\n<!--- Why is this change required? What problem does it solve? -->\r\n<!--- If it fixes an open issue, please link to the issue here. -->\r\n\r\n### Description\r\n<!--- Describe your changes in detail -->\r\n\r\n### How Has This Been Tested?\r\n<!--- Please describe in detail how you tested your changes. -->\r\n<!--- Include details of your testing environment, and the tests you ran to -->\r\n<!--- see how your change affects other areas of the code, etc. -->\r\n<!--- If your change is a performance enhancement, please provide benchmarks here. -->\r\n<!--- Please think about using the draft PR feature if appropriate -->\r\n\r\n### Types of changes\r\n<!--- What types of changes does your code introduce? Put an `x` in all the boxes that apply: -->\r\n- [ ] Bug fix (non-breaking change which fixes an issue)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [ ] Performance enhancement (non-breaking change which improves efficiency)\r\n- [ ] Code cleanup (non-breaking change which makes code smaller or more readable)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n- [ ] Documentation (a change to man pages or other documentation)\r\n\r\n### Checklist:\r\n<!--- Go over all the following points, and put an `x` in all the boxes that apply. -->\r\n<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->\r\n- [ ] My code follows the ZFS on Linux [code style requirements](https://github.com/zfsonlinux/zfs/blob/master/.github/CONTRIBUTING.md#coding-conventions).\r\n- [ ] I have updated the documentation accordingly.\r\n- [ ] I have read the [**contributing** document](https://github.com/zfsonlinux/zfs/blob/master/.github/CONTRIBUTING.md).\r\n- [ ] I have added [tests](https://github.com/zfsonlinux/zfs/tree/master/tests) to cover my changes.\r\n- [ ] I have run the ZFS Test Suite with this change applied.\r\n- [ ] All commit messages are properly formatted and contain [`Signed-off-by`](https://github.com/zfsonlinux/zfs/blob/master/.github/CONTRIBUTING.md#signed-off-by).\r\n",
      "# [Codecov](https://codecov.io/gh/openzfs/zfs/pull/10727?src=pr&el=h1) Report\n> Merging [#10727](https://codecov.io/gh/openzfs/zfs/pull/10727?src=pr&el=desc) into [master](https://codecov.io/gh/openzfs/zfs/commit/fc34dfba8e8238683e90e3fa83d16be3343886f6&el=desc) will **decrease** coverage by `0.08%`.\n> The diff coverage is `80.00%`.\n\n[![Impacted file tree graph](https://codecov.io/gh/openzfs/zfs/pull/10727/graphs/tree.svg?width=650&height=150&src=pr&token=NGfxvvG2io)](https://codecov.io/gh/openzfs/zfs/pull/10727?src=pr&el=tree)\n\n```diff\n@@            Coverage Diff             @@\n##           master   #10727      +/-   ##\n==========================================\n- Coverage   79.72%   79.63%   -0.09%     \n==========================================\n  Files         394      394              \n  Lines      124665   124666       +1     \n==========================================\n- Hits        99390    99279     -111     \n- Misses      25275    25387     +112     \n```\n\n| Flag | Coverage Δ | |\n|---|---|---|\n| #kernel | `80.34% <100.00%> (-0.05%)` | :arrow_down: |\n| #user | `65.10% <0.00%> (-0.70%)` | :arrow_down: |\n\nFlags with carried forward coverage won't be shown. [Click here](https://docs.codecov.io/docs/carryforward-flags#carryforward-flags-in-the-pull-request-comment) to find out more.\n\n| [Impacted Files](https://codecov.io/gh/openzfs/zfs/pull/10727?src=pr&el=tree) | Coverage Δ | |\n|---|---|---|\n| [module/zfs/arc.c](https://codecov.io/gh/openzfs/zfs/pull/10727/diff?src=pr&el=tree#diff-bW9kdWxlL3pmcy9hcmMuYw==) | `89.52% <66.66%> (+<0.01%)` | :arrow_up: |\n| [module/zfs/zfs\\_fuid.c](https://codecov.io/gh/openzfs/zfs/pull/10727/diff?src=pr&el=tree#diff-bW9kdWxlL3pmcy96ZnNfZnVpZC5j) | `14.85% <100.00%> (ø)` | |\n| [module/os/linux/spl/spl-zlib.c](https://codecov.io/gh/openzfs/zfs/pull/10727/diff?src=pr&el=tree#diff-bW9kdWxlL29zL2xpbnV4L3NwbC9zcGwtemxpYi5j) | `55.35% <0.00%> (-28.58%)` | :arrow_down: |\n| [cmd/zvol\\_id/zvol\\_id\\_main.c](https://codecov.io/gh/openzfs/zfs/pull/10727/diff?src=pr&el=tree#diff-Y21kL3p2b2xfaWQvenZvbF9pZF9tYWluLmM=) | `76.31% <0.00%> (-5.27%)` | :arrow_down: |\n| [module/zfs/vdev\\_removal.c](https://codecov.io/gh/openzfs/zfs/pull/10727/diff?src=pr&el=tree#diff-bW9kdWxlL3pmcy92ZGV2X3JlbW92YWwuYw==) | `94.40% <0.00%> (-3.20%)` | :arrow_down: |\n| [module/zfs/vdev\\_rebuild.c](https://codecov.io/gh/openzfs/zfs/pull/10727/diff?src=pr&el=tree#diff-bW9kdWxlL3pmcy92ZGV2X3JlYnVpbGQuYw==) | `93.69% <0.00%> (-2.83%)` | :arrow_down: |\n| [module/icp/api/kcf\\_mac.c](https://codecov.io/gh/openzfs/zfs/pull/10727/diff?src=pr&el=tree#diff-bW9kdWxlL2ljcC9hcGkva2NmX21hYy5j) | `37.14% <0.00%> (-1.72%)` | :arrow_down: |\n| [module/zfs/vdev\\_indirect\\_mapping.c](https://codecov.io/gh/openzfs/zfs/pull/10727/diff?src=pr&el=tree#diff-bW9kdWxlL3pmcy92ZGV2X2luZGlyZWN0X21hcHBpbmcuYw==) | `97.10% <0.00%> (-1.45%)` | :arrow_down: |\n| [module/zfs/zap\\_micro.c](https://codecov.io/gh/openzfs/zfs/pull/10727/diff?src=pr&el=tree#diff-bW9kdWxlL3pmcy96YXBfbWljcm8uYw==) | `85.35% <0.00%> (-1.26%)` | :arrow_down: |\n| [module/zfs/spa\\_log\\_spacemap.c](https://codecov.io/gh/openzfs/zfs/pull/10727/diff?src=pr&el=tree#diff-bW9kdWxlL3pmcy9zcGFfbG9nX3NwYWNlbWFwLmM=) | `91.97% <0.00%> (-1.15%)` | :arrow_down: |\n| ... and [46 more](https://codecov.io/gh/openzfs/zfs/pull/10727/diff?src=pr&el=tree-more) | |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/openzfs/zfs/pull/10727?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/openzfs/zfs/pull/10727?src=pr&el=footer). Last update [9352d8c...c2a93c3](https://codecov.io/gh/openzfs/zfs/pull/10727?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.9"
}