{
  "cve_id": "CVE-2018-7868",
  "cwe_ids": [
    "CWE-119",
    "CWE-476",
    "CWE-125"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "libming",
  "commit_msg": "Fix heap-buffer-overflows when accessing pool\n\nConstants are usually retrieved from the constant pool without verifying\nthat the pool actually contains them, which may lead to various heap\nbuffer overflow issues.\n\nIn this patch we add a counter keeping track of how many elements the pool\ncontains, and checks making sure that whenever the pool is accessed, the\nconstant in present in the pool (constant position < pool counter).\n\nAlso, do not return \"\" when a pointer is excepted (it should be legal to free\nthis return value).\n\nThis patch fixes #112 (CVE-2018-7875), fixes #120 (CVE-2018-7871),\nfixes #117 (CVE-2018-7870), fixes #114 (CVE-2018-7872), fixes #122,\nfixes #113 (CVE-2018-7868), fixes #123.",
  "commit_hash": "3a000c7b6fe978dd9925266bb6847709e06dbaa3",
  "git_url": "https://github.com/libming/libming/commit/3a000c7b6fe978dd9925266bb6847709e06dbaa3",
  "file_path": "util/decompile.c",
  "func_name": "decompile5Action",
  "func_before": "char *\ndecompile5Action(int n, SWF_ACTION *actions,int indent)\n{\n\tint j;\n\tif( !n  )\n\t\treturn NULL;\n\n\tpool = NULL;\n\n\tdcinit();\n\n\tfor(j=0;j<256;j++) regs[j]=0;\n\tregs[1] = newVar(\"R1\");\n\tregs[2] = newVar(\"R2\");\n\tregs[3] = newVar(\"R3\");\n\tregs[4] = newVar(\"R4\");\n\n\tdecompileActions(n, actions, indent);\n#ifdef DEBUGSTACK\n\tif( Stack != NULL && *dcstr) \n\t{ \n\t\tint i=0;\n\t\tprintln(\"/* -----------------------------------------------------------------\");\n\t\tprintln(\"NOTE: some stuff left on the stack at the end of a block of actions:\");\n\t\twhile (Stack)\n\t\t{\n\t\t\ti++;\n\t\t\tprintf(\"%d.:\\t%s\",i, getString(pop()));\n\t\t\tprintln(\"\");\n\t\t}\n\t\tprintln(\"*/\");\n\t}\n#else\n\tif( Stack != NULL ) \n\t\tfprintf(stderr,\n\t\t\"Stuff left on the stack at the end of a block of actions!?!?!?\\n\");\n\twhile (Stack)\n\t{\n\t\tpop();\n\t}\n#endif\n\treturn dcgetstr();\n}",
  "abstract_func_before": "char *\ndecompile5Action(int VAR_0, SWF_ACTION *VAR_1,int VAR_2)\n{\n\tint VAR_3;\n\tif( !VAR_0  )\n\t\treturn NULL;\n\n\tVAR_4 = NULL;\n\n\tdcinit();\n\n\tfor(VAR_3=0;VAR_3<256;VAR_3++) VAR_5[VAR_3]=0;\n\tVAR_5[1] = newVar(\"R1\");\n\tVAR_5[2] = newVar(\"R2\");\n\tVAR_5[3] = newVar(\"R3\");\n\tVAR_5[4] = newVar(\"R4\");\n\n\tdecompileActions(VAR_0, VAR_1, VAR_2);\n#ifdef VAR_6\n\tif( VAR_7 != NULL && *VAR_8) \n\t{ \n\t\tint VAR_9=0;\n\t\tprintln(\"/* -----------------------------------------------------------------\");\n\t\tprintln(\"NOTE: some stuff left on the stack at the end of a block of actions:\");\n\t\twhile (VAR_7)\n\t\t{\n\t\t\tVAR_9++;\n\t\t\tprintf(\"%d.:\\t%s\",VAR_9, getString(pop()));\n\t\t\tprintln(\"\");\n\t\t}\n\t\tprintln(\"*/\");\n\t}\n#else\n\tif( VAR_7 != NULL ) \n\t\tfprintf(VAR_10,\n\t\t\"Stuff left on the stack at the end of a block of actions!?!?!?\\n\");\n\twhile (VAR_7)\n\t{\n\t\tpop();\n\t}\n#endif\n\treturn dcgetstr();\n}",
  "func_graph_path_before": "libming/3a000c7b6fe978dd9925266bb6847709e06dbaa3/decompile.c/vul/before/4.json",
  "func": "char *\ndecompile5Action(int n, SWF_ACTION *actions,int indent)\n{\n\tint j;\n\tif( !n  )\n\t\treturn NULL;\n\n\tpool = NULL;\n\tpoolcounter = 0;\n\n\tdcinit();\n\n\tfor(j=0;j<256;j++) regs[j]=0;\n\tregs[1] = newVar(\"R1\");\n\tregs[2] = newVar(\"R2\");\n\tregs[3] = newVar(\"R3\");\n\tregs[4] = newVar(\"R4\");\n\n\tdecompileActions(n, actions, indent);\n#ifdef DEBUGSTACK\n\tif( Stack != NULL && *dcstr) \n\t{ \n\t\tint i=0;\n\t\tprintln(\"/* -----------------------------------------------------------------\");\n\t\tprintln(\"NOTE: some stuff left on the stack at the end of a block of actions:\");\n\t\twhile (Stack)\n\t\t{\n\t\t\ti++;\n\t\t\tprintf(\"%d.:\\t%s\",i, getString(pop()));\n\t\t\tprintln(\"\");\n\t\t}\n\t\tprintln(\"*/\");\n\t}\n#else\n\tif( Stack != NULL ) \n\t\tfprintf(stderr,\n\t\t\"Stuff left on the stack at the end of a block of actions!?!?!?\\n\");\n\twhile (Stack)\n\t{\n\t\tpop();\n\t}\n#endif\n\treturn dcgetstr();\n}",
  "abstract_func": "char *\ndecompile5Action(int VAR_0, SWF_ACTION *VAR_1,int VAR_2)\n{\n\tint VAR_3;\n\tif( !VAR_0  )\n\t\treturn NULL;\n\n\tVAR_4 = NULL;\n\tVAR_5 = 0;\n\n\tdcinit();\n\n\tfor(VAR_3=0;VAR_3<256;VAR_3++) VAR_6[VAR_3]=0;\n\tVAR_6[1] = newVar(\"R1\");\n\tVAR_6[2] = newVar(\"R2\");\n\tVAR_6[3] = newVar(\"R3\");\n\tVAR_6[4] = newVar(\"R4\");\n\n\tdecompileActions(VAR_0, VAR_1, VAR_2);\n#ifdef VAR_7\n\tif( VAR_8 != NULL && *VAR_9) \n\t{ \n\t\tint VAR_10=0;\n\t\tprintln(\"/* -----------------------------------------------------------------\");\n\t\tprintln(\"NOTE: some stuff left on the stack at the end of a block of actions:\");\n\t\twhile (VAR_8)\n\t\t{\n\t\t\tVAR_10++;\n\t\t\tprintf(\"%d.:\\t%s\",VAR_10, getString(pop()));\n\t\t\tprintln(\"\");\n\t\t}\n\t\tprintln(\"*/\");\n\t}\n#else\n\tif( VAR_8 != NULL ) \n\t\tfprintf(VAR_11,\n\t\t\"Stuff left on the stack at the end of a block of actions!?!?!?\\n\");\n\twhile (VAR_8)\n\t{\n\t\tpop();\n\t}\n#endif\n\treturn dcgetstr();\n}",
  "func_graph_path": "libming/3a000c7b6fe978dd9925266bb6847709e06dbaa3/decompile.c/vul/after/4.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -6,6 +6,7 @@\n \t\treturn NULL;\n \n \tpool = NULL;\n+\tpoolcounter = 0;\n \n \tdcinit();\n ",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "\tpoolcounter = 0;"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/libming/libming/pull/125",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/libming/libming/pull/125: 403 Client Error: Forbidden for url: https://api.github.com/repos/libming/libming/pulls/125",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 1.0  \n\nThe patch clearly resolves heap buffer overflow issues, referencing multiple CVEs and making changes to prevent such vulnerabilities. All elements are consistent and confirm it's a security fix."
}