{
  "cve_id": "CVE-2020-14033",
  "cwe_ids": [
    "CWE-120"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "meetecho/janus-gateway",
  "commit_msg": "Fix sscanf-related security issues",
  "commit_hash": "fb85040405495748dbc7c4850b97da9b67b7b47b",
  "git_url": "https://github.com/meetecho/janus-gateway/commit/fb85040405495748dbc7c4850b97da9b67b7b47b",
  "file_path": "plugins/janus_sip.c",
  "func_name": "janus_sip_sdp_manipulate",
  "func_before": "char *janus_sip_sdp_manipulate(janus_sip_session *session, janus_sdp *sdp, gboolean answer) {\n\tif(!session || !session->stack || !sdp)\n\t\treturn NULL;\n\tGHashTable *codecs = NULL;\n\tGList *pts_to_remove = NULL;\n\t/* Start replacing stuff */\n\tJANUS_LOG(LOG_VERB, \"Setting protocol to %s\\n\", session->media.require_srtp ? \"RTP/SAVP\" : \"RTP/AVP\");\n\tif(sdp->c_addr) {\n\t\tg_free(sdp->c_addr);\n\t\tsdp->c_addr = g_strdup(sdp_ip ? sdp_ip : (local_media_ip ? local_media_ip : local_ip));\n\t}\n\tGList *temp = sdp->m_lines;\n\twhile(temp) {\n\t\tjanus_sdp_mline *m = (janus_sdp_mline *)temp->data;\n\t\tg_free(m->proto);\n\t\tm->proto = g_strdup(session->media.require_srtp ? \"RTP/SAVP\" : \"RTP/AVP\");\n\t\tif(m->type == JANUS_SDP_AUDIO) {\n\t\t\tm->port = session->media.local_audio_rtp_port;\n\t\t\tif(session->media.has_srtp_local_audio) {\n\t\t\t\tif(!session->media.audio_srtp_local_profile || !session->media.audio_srtp_local_crypto) {\n\t\t\t\t\tjanus_sip_srtp_set_local(session, FALSE, &session->media.audio_srtp_local_profile, &session->media.audio_srtp_local_crypto);\n\t\t\t\t}\n\t\t\t\tjanus_sdp_attribute *a = janus_sdp_attribute_create(\"crypto\", \"1 %s inline:%s\", session->media.audio_srtp_local_profile, session->media.audio_srtp_local_crypto);\n\t\t\t\tm->attributes = g_list_append(m->attributes, a);\n\t\t\t}\n\t\t} else if(m->type == JANUS_SDP_VIDEO) {\n\t\t\tm->port = session->media.local_video_rtp_port;\n\t\t\tif(session->media.has_srtp_local_video) {\n\t\t\t\tif(!session->media.video_srtp_local_profile || !session->media.video_srtp_local_crypto) {\n\t\t\t\t\tjanus_sip_srtp_set_local(session, TRUE, &session->media.video_srtp_local_profile, &session->media.video_srtp_local_crypto);\n\t\t\t\t}\n\t\t\t\tjanus_sdp_attribute *a = janus_sdp_attribute_create(\"crypto\", \"1 %s inline:%s\", session->media.video_srtp_local_profile, session->media.video_srtp_local_crypto);\n\t\t\t\tm->attributes = g_list_append(m->attributes, a);\n\t\t\t}\n\t\t}\n\t\tg_free(m->c_addr);\n\t\tm->c_addr = g_strdup(sdp_ip ? sdp_ip : (local_media_ip ? local_media_ip : local_ip));\n\t\tif(answer && (m->type == JANUS_SDP_AUDIO || m->type == JANUS_SDP_VIDEO)) {\n\t\t\t/* Check which codec was negotiated eventually */\n\t\t\tint pt = -1;\n\t\t\tif(m->ptypes)\n\t\t\t\tpt = GPOINTER_TO_INT(m->ptypes->data);\n\t\t\tif(pt > -1) {\n\t\t\t\tif(m->type == JANUS_SDP_AUDIO) {\n\t\t\t\t\tsession->media.audio_pt = pt;\n\t\t\t\t} else {\n\t\t\t\t\tsession->media.video_pt = pt;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t/* If this is an answer, get rid of multiple versions of the same\n\t\t * codec as well (e.g., video profiles), as that confuses the hell\n\t\t * out of SOATAG_RTP_SELECT(SOA_RTP_SELECT_COMMON) in nua_respond() */\n\t\tif(answer) {\n\t\t\tif(codecs == NULL)\n\t\t\t\tcodecs = g_hash_table_new_full(g_str_hash, g_str_equal, (GDestroyNotify)g_free, NULL);\n\t\t\t/* Check all rtpmap attributes */\n\t\t\tint pt = -1;\n\t\t\tchar codec[50];\n\t\t\tGList *ma = m->attributes;\n\t\t\twhile(ma) {\n\t\t\t\tjanus_sdp_attribute *a = (janus_sdp_attribute *)ma->data;\n\t\t\t\tif(a->name != NULL && a->value != NULL && !strcasecmp(a->name, \"rtpmap\")) {\n\t\t\t\t\tif(sscanf(a->value, \"%3d %s\", &pt, codec) == 2) {\n\t\t\t\t\t\tif(g_hash_table_lookup(codecs, codec) != NULL) {\n\t\t\t\t\t\t\t/* We already have a version of this codec, remove the payload type */\n\t\t\t\t\t\t\tpts_to_remove = g_list_append(pts_to_remove, GINT_TO_POINTER(pt));\n\t\t\t\t\t\t\tJANUS_LOG(LOG_HUGE, \"Removing %d (%s)\\n\", pt, codec);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t/* Keep track of this codec */\n\t\t\t\t\t\t\tg_hash_table_insert(codecs, g_strdup(codec), GINT_TO_POINTER(pt));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tma = ma->next;\n\t\t\t}\n\t\t}\n\t\ttemp = temp->next;\n\t}\n\t/* If we need to remove some payload types from the SDP, do it now */\n\tif(pts_to_remove != NULL) {\n\t\tGList *temp = pts_to_remove;\n\t\twhile(temp) {\n\t\t\tint pt = GPOINTER_TO_INT(temp->data);\n\t\t\tjanus_sdp_remove_payload_type(sdp, pt);\n\t\t\ttemp = temp->next;\n\t\t}\n\t\tg_list_free(pts_to_remove);\n\t}\n\t/* Generate a SDP string out of our changes */\n\treturn janus_sdp_write(sdp);\n}",
  "abstract_func_before": "char *janus_sip_sdp_manipulate(janus_sip_session *VAR_0, janus_sdp *VAR_1, gboolean VAR_2) {\n\tif(!VAR_0 || !VAR_0->stack || !VAR_1)\n\t\treturn NULL;\n\tGHashTable *VAR_3 = NULL;\n\tGList *VAR_4 = NULL;\n\t/* COMMENT_0 */\n\tJANUS_LOG(VAR_5, \"Setting protocol to %s\\n\", VAR_0->media.require_srtp ? \"RTP/SAVP\" : \"RTP/AVP\");\n\tif(VAR_1->c_addr) {\n\t\tg_free(VAR_1->c_addr);\n\t\tVAR_1->c_addr = g_strdup(VAR_6 ? VAR_6 : (VAR_7 ? VAR_7 : VAR_8));\n\t}\n\tGList *VAR_9 = VAR_1->m_lines;\n\twhile(VAR_9) {\n\t\tjanus_sdp_mline *VAR_10 = (janus_sdp_mline *)VAR_9->data;\n\t\tg_free(VAR_10->proto);\n\t\tVAR_10->proto = g_strdup(VAR_0->media.require_srtp ? \"RTP/SAVP\" : \"RTP/AVP\");\n\t\tif(VAR_10->type == VAR_11) {\n\t\t\tVAR_10->port = VAR_0->media.local_audio_rtp_port;\n\t\t\tif(VAR_0->media.has_srtp_local_audio) {\n\t\t\t\tif(!VAR_0->media.audio_srtp_local_profile || !VAR_0->media.audio_srtp_local_crypto) {\n\t\t\t\t\tjanus_sip_srtp_set_local(VAR_0, FALSE, &VAR_0->media.audio_srtp_local_profile, &VAR_0->media.audio_srtp_local_crypto);\n\t\t\t\t}\n\t\t\t\tjanus_sdp_attribute *VAR_12 = janus_sdp_attribute_create(\"crypto\", \"1 %s inline:%s\", VAR_0->media.audio_srtp_local_profile, VAR_0->media.audio_srtp_local_crypto);\n\t\t\t\tVAR_10->attributes = g_list_append(VAR_10->attributes, VAR_12);\n\t\t\t}\n\t\t} else if(VAR_10->type == VAR_13) {\n\t\t\tVAR_10->port = VAR_0->media.local_video_rtp_port;\n\t\t\tif(VAR_0->media.has_srtp_local_video) {\n\t\t\t\tif(!VAR_0->media.video_srtp_local_profile || !VAR_0->media.video_srtp_local_crypto) {\n\t\t\t\t\tjanus_sip_srtp_set_local(VAR_0, TRUE, &VAR_0->media.video_srtp_local_profile, &VAR_0->media.video_srtp_local_crypto);\n\t\t\t\t}\n\t\t\t\tjanus_sdp_attribute *VAR_12 = janus_sdp_attribute_create(\"crypto\", \"1 %s inline:%s\", VAR_0->media.video_srtp_local_profile, VAR_0->media.video_srtp_local_crypto);\n\t\t\t\tVAR_10->attributes = g_list_append(VAR_10->attributes, VAR_12);\n\t\t\t}\n\t\t}\n\t\tg_free(VAR_10->c_addr);\n\t\tVAR_10->c_addr = g_strdup(VAR_6 ? VAR_6 : (VAR_7 ? VAR_7 : VAR_8));\n\t\tif(VAR_2 && (VAR_10->type == VAR_11 || VAR_10->type == VAR_13)) {\n\t\t\t/* COMMENT_1 */\n\t\t\tint VAR_14 = -1;\n\t\t\tif(VAR_10->ptypes)\n\t\t\t\tVAR_14 = GPOINTER_TO_INT(VAR_10->ptypes->data);\n\t\t\tif(VAR_14 > -1) {\n\t\t\t\tif(VAR_10->type == VAR_11) {\n\t\t\t\t\tVAR_0->media.audio_pt = VAR_14;\n\t\t\t\t} else {\n\t\t\t\t\tVAR_0->media.video_pt = VAR_14;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t/* COMMENT_2 */\n                                                                    \n                                                                        \n\t\tif(VAR_2) {\n\t\t\tif(VAR_3 == NULL)\n\t\t\t\tVAR_3 = g_hash_table_new_full(VAR_15, VAR_16, (GDestroyNotify)VAR_17, NULL);\n\t\t\t/* COMMENT_5 */\n\t\t\tint VAR_14 = -1;\n\t\t\tchar VAR_18[50];\n\t\t\tGList *VAR_19 = VAR_10->attributes;\n\t\t\twhile(VAR_19) {\n\t\t\t\tjanus_sdp_attribute *VAR_12 = (janus_sdp_attribute *)VAR_19->data;\n\t\t\t\tif(VAR_12->name != NULL && VAR_12->value != NULL && !strcasecmp(VAR_12->name, \"rtpmap\")) {\n\t\t\t\t\tif(sscanf(VAR_12->value, \"%3d %s\", &VAR_14, VAR_18) == 2) {\n\t\t\t\t\t\tif(g_hash_table_lookup(VAR_3, VAR_18) != NULL) {\n\t\t\t\t\t\t\t/* COMMENT_6 */\n\t\t\t\t\t\t\tVAR_4 = g_list_append(VAR_4, GINT_TO_POINTER(VAR_14));\n\t\t\t\t\t\t\tJANUS_LOG(VAR_20, \"Removing %d (%s)\\n\", VAR_14, VAR_18);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t/* COMMENT_7 */\n\t\t\t\t\t\t\tg_hash_table_insert(VAR_3, g_strdup(VAR_18), GINT_TO_POINTER(VAR_14));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tVAR_19 = VAR_19->next;\n\t\t\t}\n\t\t}\n\t\tVAR_9 = VAR_9->next;\n\t}\n\t/* COMMENT_8 */\n\tif(VAR_4 != NULL) {\n\t\tGList *VAR_9 = VAR_4;\n\t\twhile(VAR_9) {\n\t\t\tint VAR_14 = GPOINTER_TO_INT(VAR_9->data);\n\t\t\tjanus_sdp_remove_payload_type(VAR_1, VAR_14);\n\t\t\tVAR_9 = VAR_9->next;\n\t\t}\n\t\tg_list_free(VAR_4);\n\t}\n\t/* COMMENT_9 */\n\treturn janus_sdp_write(VAR_1);\n}",
  "func_graph_path_before": "meetecho/janus-gateway/fb85040405495748dbc7c4850b97da9b67b7b47b/janus_sip.c/vul/before/0.json",
  "func": "char *janus_sip_sdp_manipulate(janus_sip_session *session, janus_sdp *sdp, gboolean answer) {\n\tif(!session || !session->stack || !sdp)\n\t\treturn NULL;\n\tGHashTable *codecs = NULL;\n\tGList *pts_to_remove = NULL;\n\t/* Start replacing stuff */\n\tJANUS_LOG(LOG_VERB, \"Setting protocol to %s\\n\", session->media.require_srtp ? \"RTP/SAVP\" : \"RTP/AVP\");\n\tif(sdp->c_addr) {\n\t\tg_free(sdp->c_addr);\n\t\tsdp->c_addr = g_strdup(sdp_ip ? sdp_ip : (local_media_ip ? local_media_ip : local_ip));\n\t}\n\tGList *temp = sdp->m_lines;\n\twhile(temp) {\n\t\tjanus_sdp_mline *m = (janus_sdp_mline *)temp->data;\n\t\tg_free(m->proto);\n\t\tm->proto = g_strdup(session->media.require_srtp ? \"RTP/SAVP\" : \"RTP/AVP\");\n\t\tif(m->type == JANUS_SDP_AUDIO) {\n\t\t\tm->port = session->media.local_audio_rtp_port;\n\t\t\tif(session->media.has_srtp_local_audio) {\n\t\t\t\tif(!session->media.audio_srtp_local_profile || !session->media.audio_srtp_local_crypto) {\n\t\t\t\t\tjanus_sip_srtp_set_local(session, FALSE, &session->media.audio_srtp_local_profile, &session->media.audio_srtp_local_crypto);\n\t\t\t\t}\n\t\t\t\tjanus_sdp_attribute *a = janus_sdp_attribute_create(\"crypto\", \"1 %s inline:%s\", session->media.audio_srtp_local_profile, session->media.audio_srtp_local_crypto);\n\t\t\t\tm->attributes = g_list_append(m->attributes, a);\n\t\t\t}\n\t\t} else if(m->type == JANUS_SDP_VIDEO) {\n\t\t\tm->port = session->media.local_video_rtp_port;\n\t\t\tif(session->media.has_srtp_local_video) {\n\t\t\t\tif(!session->media.video_srtp_local_profile || !session->media.video_srtp_local_crypto) {\n\t\t\t\t\tjanus_sip_srtp_set_local(session, TRUE, &session->media.video_srtp_local_profile, &session->media.video_srtp_local_crypto);\n\t\t\t\t}\n\t\t\t\tjanus_sdp_attribute *a = janus_sdp_attribute_create(\"crypto\", \"1 %s inline:%s\", session->media.video_srtp_local_profile, session->media.video_srtp_local_crypto);\n\t\t\t\tm->attributes = g_list_append(m->attributes, a);\n\t\t\t}\n\t\t}\n\t\tg_free(m->c_addr);\n\t\tm->c_addr = g_strdup(sdp_ip ? sdp_ip : (local_media_ip ? local_media_ip : local_ip));\n\t\tif(answer && (m->type == JANUS_SDP_AUDIO || m->type == JANUS_SDP_VIDEO)) {\n\t\t\t/* Check which codec was negotiated eventually */\n\t\t\tint pt = -1;\n\t\t\tif(m->ptypes)\n\t\t\t\tpt = GPOINTER_TO_INT(m->ptypes->data);\n\t\t\tif(pt > -1) {\n\t\t\t\tif(m->type == JANUS_SDP_AUDIO) {\n\t\t\t\t\tsession->media.audio_pt = pt;\n\t\t\t\t} else {\n\t\t\t\t\tsession->media.video_pt = pt;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t/* If this is an answer, get rid of multiple versions of the same\n\t\t * codec as well (e.g., video profiles), as that confuses the hell\n\t\t * out of SOATAG_RTP_SELECT(SOA_RTP_SELECT_COMMON) in nua_respond() */\n\t\tif(answer) {\n\t\t\tif(codecs == NULL)\n\t\t\t\tcodecs = g_hash_table_new_full(g_str_hash, g_str_equal, (GDestroyNotify)g_free, NULL);\n\t\t\t/* Check all rtpmap attributes */\n\t\t\tint pt = -1;\n\t\t\tchar codec[50];\n\t\t\tGList *ma = m->attributes;\n\t\t\twhile(ma) {\n\t\t\t\tjanus_sdp_attribute *a = (janus_sdp_attribute *)ma->data;\n\t\t\t\tif(a->name != NULL && a->value != NULL && !strcasecmp(a->name, \"rtpmap\")) {\n\t\t\t\t\tif(sscanf(a->value, \"%3d %49s\", &pt, codec) == 2) {\n\t\t\t\t\t\tif(g_hash_table_lookup(codecs, codec) != NULL) {\n\t\t\t\t\t\t\t/* We already have a version of this codec, remove the payload type */\n\t\t\t\t\t\t\tpts_to_remove = g_list_append(pts_to_remove, GINT_TO_POINTER(pt));\n\t\t\t\t\t\t\tJANUS_LOG(LOG_HUGE, \"Removing %d (%s)\\n\", pt, codec);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t/* Keep track of this codec */\n\t\t\t\t\t\t\tg_hash_table_insert(codecs, g_strdup(codec), GINT_TO_POINTER(pt));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tma = ma->next;\n\t\t\t}\n\t\t}\n\t\ttemp = temp->next;\n\t}\n\t/* If we need to remove some payload types from the SDP, do it now */\n\tif(pts_to_remove != NULL) {\n\t\tGList *temp = pts_to_remove;\n\t\twhile(temp) {\n\t\t\tint pt = GPOINTER_TO_INT(temp->data);\n\t\t\tjanus_sdp_remove_payload_type(sdp, pt);\n\t\t\ttemp = temp->next;\n\t\t}\n\t\tg_list_free(pts_to_remove);\n\t}\n\t/* Generate a SDP string out of our changes */\n\treturn janus_sdp_write(sdp);\n}",
  "abstract_func": "char *janus_sip_sdp_manipulate(janus_sip_session *VAR_0, janus_sdp *VAR_1, gboolean VAR_2) {\n\tif(!VAR_0 || !VAR_0->stack || !VAR_1)\n\t\treturn NULL;\n\tGHashTable *VAR_3 = NULL;\n\tGList *VAR_4 = NULL;\n\t/* COMMENT_0 */\n\tJANUS_LOG(VAR_5, \"Setting protocol to %s\\n\", VAR_0->media.require_srtp ? \"RTP/SAVP\" : \"RTP/AVP\");\n\tif(VAR_1->c_addr) {\n\t\tg_free(VAR_1->c_addr);\n\t\tVAR_1->c_addr = g_strdup(VAR_6 ? VAR_6 : (VAR_7 ? VAR_7 : VAR_8));\n\t}\n\tGList *VAR_9 = VAR_1->m_lines;\n\twhile(VAR_9) {\n\t\tjanus_sdp_mline *VAR_10 = (janus_sdp_mline *)VAR_9->data;\n\t\tg_free(VAR_10->proto);\n\t\tVAR_10->proto = g_strdup(VAR_0->media.require_srtp ? \"RTP/SAVP\" : \"RTP/AVP\");\n\t\tif(VAR_10->type == VAR_11) {\n\t\t\tVAR_10->port = VAR_0->media.local_audio_rtp_port;\n\t\t\tif(VAR_0->media.has_srtp_local_audio) {\n\t\t\t\tif(!VAR_0->media.audio_srtp_local_profile || !VAR_0->media.audio_srtp_local_crypto) {\n\t\t\t\t\tjanus_sip_srtp_set_local(VAR_0, FALSE, &VAR_0->media.audio_srtp_local_profile, &VAR_0->media.audio_srtp_local_crypto);\n\t\t\t\t}\n\t\t\t\tjanus_sdp_attribute *VAR_12 = janus_sdp_attribute_create(\"crypto\", \"1 %s inline:%s\", VAR_0->media.audio_srtp_local_profile, VAR_0->media.audio_srtp_local_crypto);\n\t\t\t\tVAR_10->attributes = g_list_append(VAR_10->attributes, VAR_12);\n\t\t\t}\n\t\t} else if(VAR_10->type == VAR_13) {\n\t\t\tVAR_10->port = VAR_0->media.local_video_rtp_port;\n\t\t\tif(VAR_0->media.has_srtp_local_video) {\n\t\t\t\tif(!VAR_0->media.video_srtp_local_profile || !VAR_0->media.video_srtp_local_crypto) {\n\t\t\t\t\tjanus_sip_srtp_set_local(VAR_0, TRUE, &VAR_0->media.video_srtp_local_profile, &VAR_0->media.video_srtp_local_crypto);\n\t\t\t\t}\n\t\t\t\tjanus_sdp_attribute *VAR_12 = janus_sdp_attribute_create(\"crypto\", \"1 %s inline:%s\", VAR_0->media.video_srtp_local_profile, VAR_0->media.video_srtp_local_crypto);\n\t\t\t\tVAR_10->attributes = g_list_append(VAR_10->attributes, VAR_12);\n\t\t\t}\n\t\t}\n\t\tg_free(VAR_10->c_addr);\n\t\tVAR_10->c_addr = g_strdup(VAR_6 ? VAR_6 : (VAR_7 ? VAR_7 : VAR_8));\n\t\tif(VAR_2 && (VAR_10->type == VAR_11 || VAR_10->type == VAR_13)) {\n\t\t\t/* COMMENT_1 */\n\t\t\tint VAR_14 = -1;\n\t\t\tif(VAR_10->ptypes)\n\t\t\t\tVAR_14 = GPOINTER_TO_INT(VAR_10->ptypes->data);\n\t\t\tif(VAR_14 > -1) {\n\t\t\t\tif(VAR_10->type == VAR_11) {\n\t\t\t\t\tVAR_0->media.audio_pt = VAR_14;\n\t\t\t\t} else {\n\t\t\t\t\tVAR_0->media.video_pt = VAR_14;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t/* COMMENT_2 */\n                                                                    \n                                                                        \n\t\tif(VAR_2) {\n\t\t\tif(VAR_3 == NULL)\n\t\t\t\tVAR_3 = g_hash_table_new_full(VAR_15, VAR_16, (GDestroyNotify)VAR_17, NULL);\n\t\t\t/* COMMENT_5 */\n\t\t\tint VAR_14 = -1;\n\t\t\tchar VAR_18[50];\n\t\t\tGList *VAR_19 = VAR_10->attributes;\n\t\t\twhile(VAR_19) {\n\t\t\t\tjanus_sdp_attribute *VAR_12 = (janus_sdp_attribute *)VAR_19->data;\n\t\t\t\tif(VAR_12->name != NULL && VAR_12->value != NULL && !strcasecmp(VAR_12->name, \"rtpmap\")) {\n\t\t\t\t\tif(sscanf(VAR_12->value, \"%3d %49s\", &VAR_14, VAR_18) == 2) {\n\t\t\t\t\t\tif(g_hash_table_lookup(VAR_3, VAR_18) != NULL) {\n\t\t\t\t\t\t\t/* COMMENT_6 */\n\t\t\t\t\t\t\tVAR_4 = g_list_append(VAR_4, GINT_TO_POINTER(VAR_14));\n\t\t\t\t\t\t\tJANUS_LOG(VAR_20, \"Removing %d (%s)\\n\", VAR_14, VAR_18);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t/* COMMENT_7 */\n\t\t\t\t\t\t\tg_hash_table_insert(VAR_3, g_strdup(VAR_18), GINT_TO_POINTER(VAR_14));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tVAR_19 = VAR_19->next;\n\t\t\t}\n\t\t}\n\t\tVAR_9 = VAR_9->next;\n\t}\n\t/* COMMENT_8 */\n\tif(VAR_4 != NULL) {\n\t\tGList *VAR_9 = VAR_4;\n\t\twhile(VAR_9) {\n\t\t\tint VAR_14 = GPOINTER_TO_INT(VAR_9->data);\n\t\t\tjanus_sdp_remove_payload_type(VAR_1, VAR_14);\n\t\t\tVAR_9 = VAR_9->next;\n\t\t}\n\t\tg_list_free(VAR_4);\n\t}\n\t/* COMMENT_9 */\n\treturn janus_sdp_write(VAR_1);\n}",
  "func_graph_path": "meetecho/janus-gateway/fb85040405495748dbc7c4850b97da9b67b7b47b/janus_sip.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -61,7 +61,7 @@\n \t\t\twhile(ma) {\n \t\t\t\tjanus_sdp_attribute *a = (janus_sdp_attribute *)ma->data;\n \t\t\t\tif(a->name != NULL && a->value != NULL && !strcasecmp(a->name, \"rtpmap\")) {\n-\t\t\t\t\tif(sscanf(a->value, \"%3d %s\", &pt, codec) == 2) {\n+\t\t\t\t\tif(sscanf(a->value, \"%3d %49s\", &pt, codec) == 2) {\n \t\t\t\t\t\tif(g_hash_table_lookup(codecs, codec) != NULL) {\n \t\t\t\t\t\t\t/* We already have a version of this codec, remove the payload type */\n \t\t\t\t\t\t\tpts_to_remove = g_list_append(pts_to_remove, GINT_TO_POINTER(pt));",
  "diff_line_info": {
    "deleted_lines": [
      "\t\t\t\t\tif(sscanf(a->value, \"%3d %s\", &pt, codec) == 2) {"
    ],
    "added_lines": [
      "\t\t\t\t\tif(sscanf(a->value, \"%3d %49s\", &pt, codec) == 2) {"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/meetecho/janus-gateway/pull/2229",
  "description": {
    "pr_info": {
      "title": "Fix sscanf-related security issues",
      "number": 2229
    },
    "comment": [
      "We've been notified about a couple of security issues related to a broken usage of sscanf (reserved IDs: CVE-2020-14033, CVE-2020-14034, discovered by Marat Gayanov at Digital Security dsec.ru). Using that information, we extended the fix to a couple of other locations where the issue was present but not reported.\r\n\r\nMerging right away, considering these are important fixes and I can't replicate them anymore."
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 1.0\n\n**Step-by-Step Explanation:**\n\n1. **Input Analysis:** The commit message explicitly states \"Fix sscanf-related security issues,\" and the vulnerability description refers to specific CVE identifiers (CVE-2020-14033, CVE-2020-14034). The code diff modifies the sscanf format string to add a size limit, indicating a security fix for buffer overflow.\n\n2. **Consistency Check:** The commit message aligns perfectly with the code changes, confirming that the patch addresses the reported security issues.\n\n3. **Purpose Evaluation:** The code change directly modifies core logic related to input parsing, which is a critical security function.\n\n4. **Security Vulnerability Assessment:** The patch fixes a known security vulnerability (buffer overflow) by limiting input size, which is a common security fix pattern.\n\n5. **Confidence Scoring:** High confidence (1.0) as all elements clearly indicate a security fix without any ambiguity.\n\n**Final Answer:**\n**Final Classification:** Security Vulnerability Fix;  \n**Confidence:** 1.0"
}