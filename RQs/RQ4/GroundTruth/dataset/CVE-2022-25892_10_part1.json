{
  "cve_id": "CVE-2022-25892",
  "cwe_ids": [
    "CWE-Other"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
  "cvss_is_v3": true,
  "repo_name": "galkahana/HummusJS",
  "commit_msg": "corrections",
  "commit_hash": "a9bf2520ab5abb69f9328906e406fbebfb36159a",
  "git_url": "https://github.com/galkahana/HummusJS/commit/a9bf2520ab5abb69f9328906e406fbebfb36159a",
  "file_path": "src/ObjectByteWriterWithPosition.cpp",
  "func_name": "ObjectByteWriterWithPosition::Write",
  "func_before": "IOBasicTypes::LongBufferSizeType ObjectByteWriterWithPosition::Write(const IOBasicTypes::Byte* inBuffer,IOBasicTypes::LongBufferSizeType inBufferSize)\n{\n\tCREATE_ISOLATE_CONTEXT;\n\tCREATE_ESCAPABLE_SCOPE;\n\n    Local<Object> anArray = NEW_ARRAY((int)inBufferSize);\n    for(int i=0;i<(int)inBufferSize;++i)\n        anArray->Set(GET_CURRENT_CONTEXT, NEW_NUMBER(i),NEW_NUMBER(inBuffer[i]));\n    \n\tLocal<Value> value = OBJECT_FROM_PERSISTENT(mObject)->Get(GET_CURRENT_CONTEXT, NEW_STRING(\"write\")).ToLocalChecked();\n    if(value->IsUndefined() || !value->IsFunction())\n    {\n\t\tTHROW_EXCEPTION(\"write is not a function, it should be you know...\");\n        return 0;\n    }\n    Local<Function> func = Local<Function>::Cast(value);\n    \n    Local<Value> args[1];\n    args[0] = anArray;\n    \n\tLocal<Value> result = func->Call(GET_CURRENT_CONTEXT,  OBJECT_FROM_PERSISTENT(mObject), 1, args).ToLocalChecked();\n    if(result.IsEmpty())\n    {\n\t\tTHROW_EXCEPTION(\"wrong return value. it's empty. return the number of written characters\");\n\t\treturn 0;\n    }\n    else if(result->IsNumber())\n    {\n        return TO_UINT32(result)->Value();\n    }\n    else\n    {\n\t\tTHROW_EXCEPTION(\"wrong return value. write should return the number of written characters\");\n\t\treturn 0;\n    }\n}",
  "abstract_func_before": "IOBasicTypes::LongBufferSizeType ObjectByteWriterWithPosition::Write(const IOBasicTypes::Byte* VAR_0,IOBasicTypes::LongBufferSizeType VAR_1)\n{\n\tVAR_2;\n\tVAR_3;\n\n    Local<Object> VAR_4 = NEW_ARRAY((int)VAR_1);\n    for(int VAR_5=0;VAR_5<(int)VAR_1;++VAR_5)\n        VAR_4->Set(VAR_6, NEW_NUMBER(VAR_5),NEW_NUMBER(VAR_0[VAR_5]));\n    \n\tLocal<Value> VAR_7 = OBJECT_FROM_PERSISTENT(VAR_8)->Get(VAR_6, NEW_STRING(\"write\")).ToLocalChecked();\n    if(VAR_7->IsUndefined() || !VAR_7->IsFunction())\n    {\n\t\tTHROW_EXCEPTION(\"write is not a function, it should be you know...\");\n        return 0;\n    }\n    Local<Function> VAR_9 = Local<Function>::Cast(VAR_7);\n    \n    Local<Value> VAR_10[1];\n    VAR_10[0] = VAR_4;\n    \n\tLocal<Value> VAR_11 = VAR_9->Call(VAR_6,  OBJECT_FROM_PERSISTENT(VAR_8), 1, VAR_10).ToLocalChecked();\n    if(VAR_11.IsEmpty())\n    {\n\t\tTHROW_EXCEPTION(\"wrong return value. it's empty. return the number of written characters\");\n\t\treturn 0;\n    }\n    else if(VAR_11->IsNumber())\n    {\n        return TO_UINT32(VAR_11)->Value();\n    }\n    else\n    {\n\t\tTHROW_EXCEPTION(\"wrong return value. write should return the number of written characters\");\n\t\treturn 0;\n    }\n}",
  "func_graph_path_before": "galkahana/HummusJS/a9bf2520ab5abb69f9328906e406fbebfb36159a/ObjectByteWriterWithPosition.cpp/vul/before/0.json",
  "func": "IOBasicTypes::LongBufferSizeType ObjectByteWriterWithPosition::Write(const IOBasicTypes::Byte* inBuffer,IOBasicTypes::LongBufferSizeType inBufferSize)\n{\n\tCREATE_ISOLATE_CONTEXT;\n\tCREATE_ESCAPABLE_SCOPE;\n\n    Local<Object> anArray = NEW_ARRAY((int)inBufferSize);\n    for(int i=0;i<(int)inBufferSize;++i)\n        anArray->Set(GET_CURRENT_CONTEXT, NEW_NUMBER(i),NEW_NUMBER(inBuffer[i]));\n    \n\tLocal<Value> value = OBJECT_FROM_PERSISTENT(mObject)->Get(GET_CURRENT_CONTEXT, NEW_STRING(\"write\")).ToLocalChecked();\n    if(value->IsUndefined() || !value->IsFunction())\n    {\n\t\tTHROW_EXCEPTION(\"write is not a function, it should be you know...\");\n        return 0;\n    }\n    Local<Function> func = Local<Function>::Cast(value);\n    \n    Local<Value> args[1];\n    args[0] = anArray;\n    MaybeLocal<Value> maybe;\n    TryCatch try_catch(Isolate::GetCurrent());\n\n    maybe = func->Call(GET_CURRENT_CONTEXT,  OBJECT_FROM_PERSISTENT(mObject), 1, args);\n    Local <Value> result;\n\n    if (!maybe.ToLocal(&result)) {\n       try_catch.ReThrow();\n       return 0;\n    }\n    if(result.IsEmpty())\n    {\n        THROW_EXCEPTION(\"wrong return value. it's empty. return the number of written characters\");\n        return 0;\n    }\n    else if(result->IsNumber())\n    {\n        return TO_UINT32(result)->Value();\n    }\n    else\n    {\n        THROW_EXCEPTION(\"wrong return value. write should return the number of written characters\");\n        return 0;\n    }\n}",
  "abstract_func": "IOBasicTypes::LongBufferSizeType ObjectByteWriterWithPosition::Write(const IOBasicTypes::Byte* VAR_0,IOBasicTypes::LongBufferSizeType VAR_1)\n{\n\tVAR_2;\n\tVAR_3;\n\n    Local<Object> VAR_4 = NEW_ARRAY((int)VAR_1);\n    for(int VAR_5=0;VAR_5<(int)VAR_1;++VAR_5)\n        VAR_4->Set(VAR_6, NEW_NUMBER(VAR_5),NEW_NUMBER(VAR_0[VAR_5]));\n    \n\tLocal<Value> VAR_7 = OBJECT_FROM_PERSISTENT(VAR_8)->Get(VAR_6, NEW_STRING(\"write\")).ToLocalChecked();\n    if(VAR_7->IsUndefined() || !VAR_7->IsFunction())\n    {\n\t\tTHROW_EXCEPTION(\"write is not a function, it should be you know...\");\n        return 0;\n    }\n    Local<Function> VAR_9 = Local<Function>::Cast(VAR_7);\n    \n    Local<Value> VAR_10[1];\n    VAR_10[0] = VAR_4;\n    MaybeLocal<Value> VAR_11;\n    TryCatch try_catch(Isolate::GetCurrent());\n\n    VAR_11 = VAR_9->Call(VAR_6,  OBJECT_FROM_PERSISTENT(VAR_8), 1, VAR_10);\n    Local <Value> VAR_12;\n\n    if (!VAR_11.ToLocal(&VAR_12)) {\n       VAR_13.ReThrow();\n       return 0;\n    }\n    if(VAR_12.IsEmpty())\n    {\n        THROW_EXCEPTION(\"wrong return value. it's empty. return the number of written characters\");\n        return 0;\n    }\n    else if(VAR_12->IsNumber())\n    {\n        return TO_UINT32(VAR_12)->Value();\n    }\n    else\n    {\n        THROW_EXCEPTION(\"wrong return value. write should return the number of written characters\");\n        return 0;\n    }\n}",
  "func_graph_path": "galkahana/HummusJS/a9bf2520ab5abb69f9328906e406fbebfb36159a/ObjectByteWriterWithPosition.cpp/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -17,12 +17,20 @@\n     \n     Local<Value> args[1];\n     args[0] = anArray;\n-    \n-\tLocal<Value> result = func->Call(GET_CURRENT_CONTEXT,  OBJECT_FROM_PERSISTENT(mObject), 1, args).ToLocalChecked();\n+    MaybeLocal<Value> maybe;\n+    TryCatch try_catch(Isolate::GetCurrent());\n+\n+    maybe = func->Call(GET_CURRENT_CONTEXT,  OBJECT_FROM_PERSISTENT(mObject), 1, args);\n+    Local <Value> result;\n+\n+    if (!maybe.ToLocal(&result)) {\n+       try_catch.ReThrow();\n+       return 0;\n+    }\n     if(result.IsEmpty())\n     {\n-\t\tTHROW_EXCEPTION(\"wrong return value. it's empty. return the number of written characters\");\n-\t\treturn 0;\n+        THROW_EXCEPTION(\"wrong return value. it's empty. return the number of written characters\");\n+        return 0;\n     }\n     else if(result->IsNumber())\n     {\n@@ -30,7 +38,7 @@\n     }\n     else\n     {\n-\t\tTHROW_EXCEPTION(\"wrong return value. write should return the number of written characters\");\n-\t\treturn 0;\n+        THROW_EXCEPTION(\"wrong return value. write should return the number of written characters\");\n+        return 0;\n     }\n }",
  "diff_line_info": {
    "deleted_lines": [
      "    ",
      "\tLocal<Value> result = func->Call(GET_CURRENT_CONTEXT,  OBJECT_FROM_PERSISTENT(mObject), 1, args).ToLocalChecked();",
      "\t\tTHROW_EXCEPTION(\"wrong return value. it's empty. return the number of written characters\");",
      "\t\treturn 0;",
      "\t\tTHROW_EXCEPTION(\"wrong return value. write should return the number of written characters\");",
      "\t\treturn 0;"
    ],
    "added_lines": [
      "    MaybeLocal<Value> maybe;",
      "    TryCatch try_catch(Isolate::GetCurrent());",
      "",
      "    maybe = func->Call(GET_CURRENT_CONTEXT,  OBJECT_FROM_PERSISTENT(mObject), 1, args);",
      "    Local <Value> result;",
      "",
      "    if (!maybe.ToLocal(&result)) {",
      "       try_catch.ReThrow();",
      "       return 0;",
      "    }",
      "        THROW_EXCEPTION(\"wrong return value. it's empty. return the number of written characters\");",
      "        return 0;",
      "        THROW_EXCEPTION(\"wrong return value. write should return the number of written characters\");",
      "        return 0;"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/galkahana/HummusJS/pull/464",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/galkahana/HummusJS/pull/464: 403 Client Error: Forbidden for url: https://api.github.com/repos/galkahana/HummusJS/pulls/464",
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.6,
  "Bug Filter Response": "**Final Classification:** Defect Remediation & Feature Upgrades; **Confidence:** 0.6"
}