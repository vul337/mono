{
  "cve_id": "CVE-2023-32070",
  "cwe_ids": [
    "CWE-79"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
  "cvss_is_v3": true,
  "repo_name": "xwiki/xwiki-rendering",
  "commit_msg": "XRENDERING-663: Restrict allowed attributes in HTML rendering\n\n* Change HTML renderers to only print allowed attributes and elements.\n* Add prefix to forbidden attributes to preserve them in XWiki syntax.\n* Adapt tests to expect that invalid attributes get a prefix.",
  "commit_hash": "c40e2f5f9482ec6c3e71dbf1fff5ba8a5e44cdc1",
  "git_url": "https://github.com/xwiki/xwiki-rendering/commit/c40e2f5f9482ec6c3e71dbf1fff5ba8a5e44cdc1",
  "file_path": "xwiki-rendering-xml/src/main/java/org/xwiki/rendering/renderer/printer/XHTMLWikiPrinter.java",
  "func_name": "printXMLElement",
  "func_before": "@Override\n    public void printXMLElement(String name, Map<String, String> attributes)\n    {\n        handleSpaceWhenStartElement();\n        super.printXMLElement(name, attributes);\n    }",
  "abstract_func_before": "@Override\n    public void printXMLElement(String VAR_0, Map<String, String> VAR_1)\n    {\n        handleSpaceWhenStartElement();\n        super.printXMLElement(VAR_0, VAR_1);\n    }",
  "func_graph_path_before": "xwiki/xwiki-rendering/c40e2f5f9482ec6c3e71dbf1fff5ba8a5e44cdc1/XHTMLWikiPrinter.java/vul/before/7.json",
  "func": "@Override\n    public void printXMLElement(String name, Map<String, String> attributes)\n    {\n        if (this.htmlElementSanitizer == null || this.htmlElementSanitizer.isElementAllowed(name)) {\n            handleSpaceWhenStartElement();\n            super.printXMLElement(name, cleanAttributes(name, attributes));\n        }\n    }",
  "abstract_func": "@Override\n    public void printXMLElement(String VAR_0, Map<String, String> VAR_1)\n    {\n        if (this.htmlElementSanitizer == null || this.htmlElementSanitizer.isElementAllowed(VAR_0)) {\n            handleSpaceWhenStartElement();\n            super.printXMLElement(VAR_0, cleanAttributes(VAR_0, VAR_1));\n        }\n    }",
  "func_graph_path": "xwiki/xwiki-rendering/c40e2f5f9482ec6c3e71dbf1fff5ba8a5e44cdc1/XHTMLWikiPrinter.java/vul/after/7.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,6 +1,8 @@\n @Override\n     public void printXMLElement(String name, Map<String, String> attributes)\n     {\n-        handleSpaceWhenStartElement();\n-        super.printXMLElement(name, attributes);\n+        if (this.htmlElementSanitizer == null || this.htmlElementSanitizer.isElementAllowed(name)) {\n+            handleSpaceWhenStartElement();\n+            super.printXMLElement(name, cleanAttributes(name, attributes));\n+        }\n     }",
  "diff_line_info": {
    "deleted_lines": [
      "        handleSpaceWhenStartElement();",
      "        super.printXMLElement(name, attributes);"
    ],
    "added_lines": [
      "        if (this.htmlElementSanitizer == null || this.htmlElementSanitizer.isElementAllowed(name)) {",
      "            handleSpaceWhenStartElement();",
      "            super.printXMLElement(name, cleanAttributes(name, attributes));",
      "        }"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/xwiki/xwiki-rendering/pull/212",
  "description": {
    "pr_info": {
      "title": "XRENDERING-663: Restrict allowed attributes in HTML rendering",
      "number": 212
    },
    "comment": [
      "* Change HTML renderers to only print allowed attributes\r\n* Adapt tests to not use invalid attributes\r\n\r\nThis depends on xwiki/xwiki-commons#170.\r\n\r\nJira issue: https://jira.xwiki.org/browse/XRENDERING-663",
      "I'm afraid that totally forbidding some HTML elements even in context where it's not a threat will cause quite a few retro compatibility problems.\r\n\r\nA pity renderers don't support input properties like filters to at least have a way to enable/disable the sanitizer depending on the context. I guess we could use the RenderingContext for that (temporarily disable the sanitizer or set a custom sanitizer in the RenderingContext for the renderer to use). Or make the DefaultHTMLElementSanitizer look at the ExecutionContext for a custom sanitizer hint (the good thing with that solution is that you can set it even in an extension which depends on a version of XWiki where the sanitizer classes don't exist yet since it's just a String key and a String value).",
      "I've added a feature to preserve disallowed attributes as attributes with prefix `data-xwiki-translated-attribute-` such that attributes like `latex-template` that are used by the [LaTeX Syntax](https://extensions.xwiki.org/xwiki/bin/view/Extension/LaTeX/Syntax%201.0/#HSpecificCustomTemplates) aren't removed when using the WYSIWYG editor and rebased this PR on top of #217 as otherwise the prefixed attributes aren't preserved."
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.8,
  "Bug Filter Response": "Based on the analysis, this patch is designed to restrict allowed attributes in HTML rendering, which is a clear security measure to prevent attacks like XSS. The code changes introduce sanitization and cleaning of attributes, indicating a fix for a security vulnerability.\n\n**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.8"
}