{
  "cve_id": "CVE-2022-36044",
  "cwe_ids": [
    "CWE-787"
  ],
  "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H",
  "cvss_is_v3": true,
  "repo_name": "rizinorg/rizin",
  "commit_msg": "Fix oob read on _luac_build_info and luac memleaks",
  "commit_hash": "05bbd147caccc60162d6fba9baaaf24befa281cd",
  "git_url": "https://github.com/rizinorg/rizin/commit/05bbd147caccc60162d6fba9baaaf24befa281cd",
  "file_path": "librz/bin/p/bin_luac.c",
  "func_name": "strings",
  "func_before": "static RzList *strings(RzBinFile *bf) {\n\tif (!bf) {\n\t\treturn NULL;\n\t}\n\tLuacBinInfo *bin_info_obj = GET_INTERNAL_BIN_INFO_OBJ(bf);\n\tif (!bin_info_obj) {\n\t\treturn NULL;\n\t}\n\n\treturn bin_info_obj->string_list;\n}",
  "abstract_func_before": "static RzList *strings(RzBinFile *VAR_0) {\n\tif (!VAR_0) {\n\t\treturn NULL;\n\t}\n\tLuacBinInfo *VAR_1 = GET_INTERNAL_BIN_INFO_OBJ(VAR_0);\n\tif (!VAR_1) {\n\t\treturn NULL;\n\t}\n\n\treturn VAR_1->string_list;\n}",
  "func_graph_path_before": "rizinorg/rizin/05bbd147caccc60162d6fba9baaaf24befa281cd/bin_luac.c/vul/before/1.json",
  "func": "static RzList *strings(RzBinFile *bf) {\n\tif (!bf) {\n\t\treturn NULL;\n\t}\n\tLuacBinInfo *bin_info_obj = GET_INTERNAL_BIN_INFO_OBJ(bf);\n\tif (!bin_info_obj) {\n\t\treturn NULL;\n\t}\n\n\treturn rz_list_clone(bin_info_obj->string_list);\n}",
  "abstract_func": "static RzList *strings(RzBinFile *VAR_0) {\n\tif (!VAR_0) {\n\t\treturn NULL;\n\t}\n\tLuacBinInfo *VAR_1 = GET_INTERNAL_BIN_INFO_OBJ(VAR_0);\n\tif (!VAR_1) {\n\t\treturn NULL;\n\t}\n\n\treturn rz_list_clone(VAR_1->string_list);\n}",
  "func_graph_path": "rizinorg/rizin/05bbd147caccc60162d6fba9baaaf24befa281cd/bin_luac.c/vul/after/1.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -7,5 +7,5 @@\n \t\treturn NULL;\n \t}\n \n-\treturn bin_info_obj->string_list;\n+\treturn rz_list_clone(bin_info_obj->string_list);\n }",
  "diff_line_info": {
    "deleted_lines": [
      "\treturn bin_info_obj->string_list;"
    ],
    "added_lines": [
      "\treturn rz_list_clone(bin_info_obj->string_list);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/rizinorg/rizin/pull/2930",
  "description": {
    "pr_info": {
      "title": "Fix vulnerabilities on several components",
      "number": 2930
    },
    "comment": [
      "# DO NOT SQUASH\r\n\r\n**Your checklist for this pull request**\r\n- [ ] I've read the [guidelines for contributing](https://github.com/rizinorg/rizin/blob/master/DEVELOPERS.md) to this repository\r\n- [ ] I made sure to follow the project's [coding style](https://github.com/rizinorg/rizin/blob/master/DEVELOPERS.md#code-style)\r\n- [ ] I've documented or updated the documentation of every function and struct this PR changes. If not so I've explained why.\r\n- [ ] I've added tests that prove my fix is effective or that my feature works (if possible)\r\n- [ ] I've updated the [rizin book](https://github.com/rizinorg/book) with the relevant information (if needed)\r\n\r\n**Detailed description**\r\n\r\n<!-- Explain the **details** for making this change. Is a new feature implemented? What existing problem does the pull request solve? How does the pull request solve these issues? Please provide enough information so that others can review your pull request. -->\r\n\r\n...\r\n\r\n**Test plan**\r\n\r\n<!-- What steps should the reviewer take to test your pull request? Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots/videos. This is your time to re-check that everything works and that you covered all the edge cases -->\r\n\r\n...\r\n\r\n**Closing issues**\r\n\r\n<!-- put \"closes #XXXX\" in your comment to auto-close the issue that your PR fixes (if any). -->\r\n\r\n...\r\n",
      "To be cherry-picked for 0.4.1"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "The commit message explicitly references fixing out-of-bounds reads and memory leaks, both of which are security concerns. The code change returns a cloned list to prevent these issues, confirming the security intent.\n\n**Final Classification:** Security Vulnerability Fix; **Confidence:** 0.9"
}