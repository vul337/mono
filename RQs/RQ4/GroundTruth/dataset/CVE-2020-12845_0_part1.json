{
  "cve_id": "CVE-2020-12845",
  "cwe_ids": [
    "CWE-476"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "cherokee/webserver",
  "commit_msg": "Guard empty input in get_authorization to resolve CVE-2020-12845",
  "commit_hash": "5855ac91381d39bbbf11e1c301a738606dc9b1e0",
  "git_url": "https://github.com/cherokee/webserver/commit/5855ac91381d39bbbf11e1c301a738606dc9b1e0",
  "file_path": "cherokee/connection.c",
  "func_name": "get_authorization",
  "func_before": "static ret_t\nget_authorization (cherokee_connection_t *conn,\n                   cherokee_http_auth_t   type,\n                   cherokee_validator_t  *validator,\n                   char                  *ptr,\n                   int                    ptr_len)\n{\n\tret_t    ret;\n\tchar    *end, *end2;\n\tcuint_t  pre_len = 0;\n\n\t/* It checks that the authentication send by the client is compliant\n\t * with the configuration of the server.  It does not check if the\n\t * kind of validator is suitable in this case.\n\t */\n\tif (equal_str (ptr, \"Basic \")) {\n\n\t\t/* Check the authentication type\n\t\t */\n\t\tif (!(type & http_auth_basic))\n\t\t\treturn ret_error;\n\n\t\tconn->req_auth_type = http_auth_basic;\n\t\tpre_len = 6;\n\n\t} else if (equal_str (ptr, \"Digest \")) {\n\n\t\t/* Check the authentication type\n\t\t */\n\t\tif (!(type & http_auth_digest))\n\t\t\treturn ret_error;\n\n\t\tconn->req_auth_type = http_auth_digest;\n\t\tpre_len = 7;\n\t}\n\n\t/* Skip end of line\n\t */\n\tend  = strchr (ptr, CHR_CR);\n\tend2 = strchr (ptr, CHR_LF);\n\n\tend = cherokee_min_str (end, end2);\n\tif (end == NULL)\n\t\treturn ret_error;\n\n\tptr_len -= (ptr + ptr_len) - end;\n\n\t/* Skip \"Basic \" or \"Digest \"\n\t */\n\tptr += pre_len;\n\tptr_len -= pre_len;\n\n\t/* Parse the request\n\t */\n\tswitch (conn->req_auth_type) {\n\tcase http_auth_basic:\n\t\tret = cherokee_validator_parse_basic (validator, ptr, ptr_len);\n\t\tif (ret != ret_ok) return ret;\n\t\tbreak;\n\n\tcase http_auth_digest:\n\t\tret = cherokee_validator_parse_digest (validator, ptr, ptr_len);\n\t\tif (ret != ret_ok) return ret;\n\n\t\t/* Check nonce value\n\t\t */\n\t\tif (cherokee_buffer_is_empty(&validator->nonce))\n\t\t\treturn ret_error;\n\n\t\tbreak;\n\n\tdefault:\n\t\tLOG_ERROR_S (CHEROKEE_ERROR_CONNECTION_AUTH);\n\t\treturn ret_error;\n\t}\n\n\treturn ret_ok;\n}",
  "abstract_func_before": "static ret_t\nget_authorization (cherokee_connection_t *VAR_0,\n                   cherokee_http_auth_t   VAR_1,\n                   cherokee_validator_t  *VAR_2,\n                   char                  *VAR_3,\n                   int                    VAR_4)\n{\n\tret_t    VAR_5;\n\tchar    *VAR_6, *VAR_7;\n\tcuint_t  VAR_8 = 0;\n\n\t/* COMMENT_0 */\n                                                                   \n                                               \n    \n\tif (equal_str (VAR_3, \"Basic \")) {\n\n\t\t/* COMMENT_4 */\n     \n\t\tif (!(VAR_1 & VAR_9))\n\t\t\treturn VAR_10;\n\n\t\tVAR_0->req_auth_type = VAR_9;\n\t\tVAR_8 = 6;\n\n\t} else if (equal_str (VAR_3, \"Digest \")) {\n\n\t\t/* COMMENT_6 */\n     \n\t\tif (!(VAR_1 & VAR_11))\n\t\t\treturn VAR_10;\n\n\t\tVAR_0->req_auth_type = VAR_11;\n\t\tVAR_8 = 7;\n\t}\n\n\t/* COMMENT_8 */\n    \n\tVAR_6  = strchr (VAR_3, VAR_12);\n\tVAR_7 = strchr (VAR_3, VAR_13);\n\n\tVAR_6 = cherokee_min_str (VAR_6, VAR_7);\n\tif (VAR_6 == NULL)\n\t\treturn VAR_10;\n\n\tVAR_4 -= (VAR_3 + VAR_4) - VAR_6;\n\n\t/* COMMENT_10 */\n    \n\tVAR_3 += VAR_8;\n\tVAR_4 -= VAR_8;\n\n\t/* COMMENT_12 */\n    \n\tswitch (VAR_0->req_auth_type) {\n\tcase VAR_9:\n\t\tVAR_5 = cherokee_validator_parse_basic (VAR_2, VAR_3, VAR_4);\n\t\tif (VAR_5 != VAR_14) return VAR_5;\n\t\tbreak;\n\n\tcase VAR_11:\n\t\tVAR_5 = cherokee_validator_parse_digest (VAR_2, VAR_3, VAR_4);\n\t\tif (VAR_5 != VAR_14) return VAR_5;\n\n\t\t/* COMMENT_14 */\n     \n\t\tif (cherokee_buffer_is_empty(&VAR_2->nonce))\n\t\t\treturn VAR_10;\n\n\t\tbreak;\n\n\tdefault:\n\t\tLOG_ERROR_S (VAR_15);\n\t\treturn VAR_10;\n\t}\n\n\treturn VAR_14;\n}",
  "func_graph_path_before": "cherokee/webserver/5855ac91381d39bbbf11e1c301a738606dc9b1e0/connection.c/vul/before/0.json",
  "func": "static ret_t\nget_authorization (cherokee_connection_t *conn,\n                   cherokee_http_auth_t   type,\n                   cherokee_validator_t  *validator,\n                   char                  *ptr,\n                   int                    ptr_len)\n{\n\tret_t    ret;\n\tchar    *end, *end2;\n\tcuint_t  pre_len = 0;\n\n\t/* It checks that the authentication send by the client is compliant\n\t * with the configuration of the server.  It does not check if the\n\t * kind of validator is suitable in this case.\n\t */\n\tif (equal_str (ptr, \"Basic \")) {\n\n\t\t/* Check the authentication type\n\t\t */\n\t\tif (!(type & http_auth_basic))\n\t\t\treturn ret_error;\n\n\t\tconn->req_auth_type = http_auth_basic;\n\t\tpre_len = 6;\n\n\t} else if (equal_str (ptr, \"Digest \")) {\n\n\t\t/* Check the authentication type\n\t\t */\n\t\tif (!(type & http_auth_digest))\n\t\t\treturn ret_error;\n\n\t\tconn->req_auth_type = http_auth_digest;\n\t\tpre_len = 7;\n\t}\n\n\t/* Skip end of line\n\t */\n\tend  = strchr (ptr, CHR_CR);\n\tend2 = strchr (ptr, CHR_LF);\n\n\tend = cherokee_min_str (end, end2);\n\tif (end == NULL)\n\t\treturn ret_error;\n\n\tptr_len -= (ptr + ptr_len) - end;\n\n\t/* Skip \"Basic \" or \"Digest \"\n\t */\n\tptr += pre_len;\n\tptr_len -= pre_len;\n\n\t/* Guard authentication string\n\t */\n\tif (ptr_len == 0)\n\t\treturn ret_error;\n\n\t/* Parse the request\n\t */\n\tswitch (conn->req_auth_type) {\n\tcase http_auth_basic:\n\t\tret = cherokee_validator_parse_basic (validator, ptr, ptr_len);\n\t\tif (ret != ret_ok) return ret;\n\t\tbreak;\n\n\tcase http_auth_digest:\n\t\tret = cherokee_validator_parse_digest (validator, ptr, ptr_len);\n\t\tif (ret != ret_ok) return ret;\n\n\t\t/* Check nonce value\n\t\t */\n\t\tif (cherokee_buffer_is_empty(&validator->nonce))\n\t\t\treturn ret_error;\n\n\t\tbreak;\n\n\tdefault:\n\t\tLOG_ERROR_S (CHEROKEE_ERROR_CONNECTION_AUTH);\n\t\treturn ret_error;\n\t}\n\n\treturn ret_ok;\n}",
  "abstract_func": "static ret_t\nget_authorization (cherokee_connection_t *VAR_0,\n                   cherokee_http_auth_t   VAR_1,\n                   cherokee_validator_t  *VAR_2,\n                   char                  *VAR_3,\n                   int                    VAR_4)\n{\n\tret_t    VAR_5;\n\tchar    *VAR_6, *VAR_7;\n\tcuint_t  VAR_8 = 0;\n\n\t/* COMMENT_0 */\n                                                                   \n                                               \n    \n\tif (equal_str (VAR_3, \"Basic \")) {\n\n\t\t/* COMMENT_4 */\n     \n\t\tif (!(VAR_1 & VAR_9))\n\t\t\treturn VAR_10;\n\n\t\tVAR_0->req_auth_type = VAR_9;\n\t\tVAR_8 = 6;\n\n\t} else if (equal_str (VAR_3, \"Digest \")) {\n\n\t\t/* COMMENT_6 */\n     \n\t\tif (!(VAR_1 & VAR_11))\n\t\t\treturn VAR_10;\n\n\t\tVAR_0->req_auth_type = VAR_11;\n\t\tVAR_8 = 7;\n\t}\n\n\t/* COMMENT_8 */\n    \n\tVAR_6  = strchr (VAR_3, VAR_12);\n\tVAR_7 = strchr (VAR_3, VAR_13);\n\n\tVAR_6 = cherokee_min_str (VAR_6, VAR_7);\n\tif (VAR_6 == NULL)\n\t\treturn VAR_10;\n\n\tVAR_4 -= (VAR_3 + VAR_4) - VAR_6;\n\n\t/* COMMENT_10 */\n    \n\tVAR_3 += VAR_8;\n\tVAR_4 -= VAR_8;\n\n\t/* COMMENT_12 */\n    \n\tif (VAR_4 == 0)\n\t\treturn VAR_10;\n\n\t/* COMMENT_14 */\n    \n\tswitch (VAR_0->req_auth_type) {\n\tcase VAR_9:\n\t\tVAR_5 = cherokee_validator_parse_basic (VAR_2, VAR_3, VAR_4);\n\t\tif (VAR_5 != VAR_14) return VAR_5;\n\t\tbreak;\n\n\tcase VAR_11:\n\t\tVAR_5 = cherokee_validator_parse_digest (VAR_2, VAR_3, VAR_4);\n\t\tif (VAR_5 != VAR_14) return VAR_5;\n\n\t\t/* COMMENT_16 */\n     \n\t\tif (cherokee_buffer_is_empty(&VAR_2->nonce))\n\t\t\treturn VAR_10;\n\n\t\tbreak;\n\n\tdefault:\n\t\tLOG_ERROR_S (VAR_15);\n\t\treturn VAR_10;\n\t}\n\n\treturn VAR_14;\n}",
  "func_graph_path": "cherokee/webserver/5855ac91381d39bbbf11e1c301a738606dc9b1e0/connection.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -50,6 +50,11 @@\n \tptr += pre_len;\n \tptr_len -= pre_len;\n \n+\t/* Guard authentication string\n+\t */\n+\tif (ptr_len == 0)\n+\t\treturn ret_error;\n+\n \t/* Parse the request\n \t */\n \tswitch (conn->req_auth_type) {",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "\t/* Guard authentication string",
      "\t */",
      "\tif (ptr_len == 0)",
      "\t\treturn ret_error;",
      ""
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/cherokee/webserver/pull/1243",
  "description": {
    "pr_info": {
      "title": "Fix CVE-2020-12845",
      "number": 1243
    },
    "comment": [
      "Fix #1242\r\n\r\nThis resolves the bug originally reported by @pjlantz from F-Secure and includes QA tests to verify. Considering QA 098 failing (hard) in master, this QA test must be resolved first."
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.95"
}