{
  "cve_id": "CVE-2021-23514",
  "cwe_ids": [
    "CWE-79",
    "CWE-22"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:N/A:N",
  "cvss_is_v3": false,
  "repo_name": "CrowCpp/Crow",
  "commit_msg": "Fixed another vulnerability in mustache file loading\nand made the file sanitizer a copy-less function",
  "commit_hash": "e688cbd18ea85a4a61b32be4e8d6b37c66943c4a",
  "git_url": "https://github.com/CrowCpp/Crow/commit/e688cbd18ea85a4a61b32be4e8d6b37c66943c4a",
  "file_path": "include/crow/http_response.h",
  "func_name": "set_static_file_info",
  "func_before": "void set_static_file_info(std::string path)\n        {\n            path = utility::sanitize_filename(path); //TODO create a no_copy function instead\n            file_info.path = path;\n            file_info.statResult = stat(file_info.path.c_str(), &file_info.statbuf);\n#ifdef CROW_ENABLE_COMPRESSION\n            compressed = false;\n#endif\n            if (file_info.statResult == 0)\n            {\n                std::size_t last_dot = path.find_last_of(\".\");\n                std::string extension = path.substr(last_dot + 1);\n                std::string mimeType = \"\";\n                code = 200;\n                this->add_header(\"Content-length\", std::to_string(file_info.statbuf.st_size));\n\n                if (extension != \"\")\n                {\n                    mimeType = mime_types.at(extension);\n                    if (mimeType != \"\")\n                        this->add_header(\"Content-Type\", mimeType);\n                    else\n                        this->add_header(\"content-Type\", \"text/plain\");\n                }\n            }\n            else\n            {\n                code = 404;\n                this->end();\n            }\n        }",
  "abstract_func_before": "void set_static_file_info(std::string VAR_0)\n        {\n            VAR_0 = utility::sanitize_filename(VAR_0); /* COMMENT_0 */\n            VAR_1.path = VAR_0;\n            VAR_1.statResult = stat(VAR_1.path.c_str(), &VAR_1.statbuf);\n#ifdef VAR_2\n            VAR_3 = false;\n#endif\n            if (VAR_1.statResult == 0)\n            {\n                std::size_t VAR_4 = VAR_0.find_last_of(\".\");\n                std::string VAR_5 = VAR_0.substr(VAR_4 + 1);\n                std::string VAR_6 = \"\";\n                VAR_7 = 200;\n                this->add_header(\"Content-length\", std::to_string(VAR_1.statbuf.st_size));\n\n                if (VAR_5 != \"\")\n                {\n                    VAR_6 = VAR_8.at(VAR_5);\n                    if (VAR_6 != \"\")\n                        this->add_header(\"Content-Type\", VAR_6);\n                    else\n                        this->add_header(\"content-Type\", \"text/plain\");\n                }\n            }\n            else\n            {\n                VAR_7 = 404;\n                this->end();\n            }\n        }",
  "func_graph_path_before": "CrowCpp/Crow/e688cbd18ea85a4a61b32be4e8d6b37c66943c4a/http_response.h/vul/before/0.json",
  "func": "void set_static_file_info(std::string path)\n        {\n            utility::sanitize_filename(path);\n            file_info.path = path;\n            file_info.statResult = stat(file_info.path.c_str(), &file_info.statbuf);\n#ifdef CROW_ENABLE_COMPRESSION\n            compressed = false;\n#endif\n            if (file_info.statResult == 0)\n            {\n                std::size_t last_dot = path.find_last_of(\".\");\n                std::string extension = path.substr(last_dot + 1);\n                std::string mimeType = \"\";\n                code = 200;\n                this->add_header(\"Content-length\", std::to_string(file_info.statbuf.st_size));\n\n                if (extension != \"\")\n                {\n                    mimeType = mime_types.at(extension);\n                    if (mimeType != \"\")\n                        this->add_header(\"Content-Type\", mimeType);\n                    else\n                        this->add_header(\"content-Type\", \"text/plain\");\n                }\n            }\n            else\n            {\n                code = 404;\n                this->end();\n            }\n        }",
  "abstract_func": "void set_static_file_info(std::string VAR_0)\n        {\n            utility::sanitize_filename(VAR_0);\n            VAR_1.path = VAR_0;\n            VAR_1.statResult = stat(VAR_1.path.c_str(), &VAR_1.statbuf);\n#ifdef VAR_2\n            VAR_3 = false;\n#endif\n            if (VAR_1.statResult == 0)\n            {\n                std::size_t VAR_4 = VAR_0.find_last_of(\".\");\n                std::string VAR_5 = VAR_0.substr(VAR_4 + 1);\n                std::string VAR_6 = \"\";\n                VAR_7 = 200;\n                this->add_header(\"Content-length\", std::to_string(VAR_1.statbuf.st_size));\n\n                if (VAR_5 != \"\")\n                {\n                    VAR_6 = VAR_8.at(VAR_5);\n                    if (VAR_6 != \"\")\n                        this->add_header(\"Content-Type\", VAR_6);\n                    else\n                        this->add_header(\"content-Type\", \"text/plain\");\n                }\n            }\n            else\n            {\n                VAR_7 = 404;\n                this->end();\n            }\n        }",
  "func_graph_path": "CrowCpp/Crow/e688cbd18ea85a4a61b32be4e8d6b37c66943c4a/http_response.h/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,6 +1,6 @@\n void set_static_file_info(std::string path)\n         {\n-            path = utility::sanitize_filename(path); //TODO create a no_copy function instead\n+            utility::sanitize_filename(path);\n             file_info.path = path;\n             file_info.statResult = stat(file_info.path.c_str(), &file_info.statbuf);\n #ifdef CROW_ENABLE_COMPRESSION",
  "diff_line_info": {
    "deleted_lines": [
      "            path = utility::sanitize_filename(path); //TODO create a no_copy function instead"
    ],
    "added_lines": [
      "            utility::sanitize_filename(path);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/CrowCpp/Crow/pull/317",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/CrowCpp/Crow/pull/317: 403 Client Error: Forbidden for url: https://api.github.com/repos/CrowCpp/Crow/pulls/317",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 1.0"
}