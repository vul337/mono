{
  "cve_id": "CVE-2023-33962",
  "cwe_ids": [
    "CWE-79"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
  "cvss_is_v3": true,
  "repo_name": "jstachio",
  "commit_msg": "Fix #157 add more aggressive html5 escaping",
  "commit_hash": "7b2f78377d1284df14c580be762a25af5f8dcd66",
  "git_url": "https://github.com/jstachio/jstachio/commit/7b2f78377d1284df14c580be762a25af5f8dcd66",
  "file_path": "api/jstachio/src/main/java/io/jstach/jstachio/escapers/HtmlEscaper.java",
  "func_name": "append",
  "func_before": "@Override\n\tpublic <A extends Output<E>, E extends Exception> void append(A a, CharSequence csq, int start, int end) throws E {\n\t\tcsq = csq == null ? \"null\" : csq;\n\t\tfor (int i = start; i < end; i++) {\n\t\t\tchar c = csq.charAt(i);\n\t\t\tswitch (c) {\n\t\t\t\tcase '&' -> {\n\t\t\t\t\ta.append(csq, start, i);\n\t\t\t\t\tstart = i + 1;\n\t\t\t\t\ta.append(AMP);\n\n\t\t\t\t}\n\t\t\t\tcase '<' -> {\n\t\t\t\t\ta.append(csq, start, i);\n\t\t\t\t\tstart = i + 1;\n\t\t\t\t\ta.append(LT);\n\n\t\t\t\t}\n\t\t\t\tcase '>' -> {\n\t\t\t\t\ta.append(csq, start, i);\n\t\t\t\t\tstart = i + 1;\n\t\t\t\t\ta.append(GT);\n\t\t\t\t}\n\t\t\t\tcase '\"' -> {\n\t\t\t\t\ta.append(csq, start, i);\n\t\t\t\t\tstart = i + 1;\n\t\t\t\t\ta.append(QUOT);\n\t\t\t\t}\n\n\t\t\t}\n\t\t}\n\t\ta.append(csq, start, end);\n\n\t}",
  "abstract_func_before": "@Override\n\tpublic <A extends Output<E>, E extends Exception> void append(A VAR_0, CharSequence VAR_1, int VAR_2, int VAR_3) throws E {\n\t\tVAR_1 = VAR_1 == null ? \"null\" : VAR_1;\n\t\tfor (int VAR_4 = VAR_2; VAR_4 < VAR_3; VAR_4++) {\n\t\t\tchar VAR_5 = VAR_1.charAt(VAR_4);\n\t\t\tswitch (VAR_5) {\n\t\t\t\tcase '&' -> {\n\t\t\t\t\tVAR_0.append(VAR_1, VAR_2, VAR_4);\n\t\t\t\t\tVAR_2 = VAR_4 + 1;\n\t\t\t\t\tVAR_0.append(VAR_6);\n\n\t\t\t\t}\n\t\t\t\tcase '<' -> {\n\t\t\t\t\tVAR_0.append(VAR_1, VAR_2, VAR_4);\n\t\t\t\t\tVAR_2 = VAR_4 + 1;\n\t\t\t\t\tVAR_0.append(VAR_7);\n\n\t\t\t\t}\n\t\t\t\tcase '>' -> {\n\t\t\t\t\tVAR_0.append(VAR_1, VAR_2, VAR_4);\n\t\t\t\t\tVAR_2 = VAR_4 + 1;\n\t\t\t\t\tVAR_0.append(VAR_8);\n\t\t\t\t}\n\t\t\t\tcase '\"' -> {\n\t\t\t\t\tVAR_0.append(VAR_1, VAR_2, VAR_4);\n\t\t\t\t\tVAR_2 = VAR_4 + 1;\n\t\t\t\t\tVAR_0.append(VAR_9);\n\t\t\t\t}\n\n\t\t\t}\n\t\t}\n\t\tVAR_0.append(VAR_1, VAR_2, VAR_3);\n\n\t}",
  "func_graph_path_before": "jstachio/7b2f78377d1284df14c580be762a25af5f8dcd66/HtmlEscaper.java/vul/before/1.json",
  "func": "@Override\n\tpublic <A extends Output<E>, E extends Exception> void append(A a, CharSequence csq, int start, int end) throws E {\n\t\tcsq = csq == null ? \"null\" : csq;\n\t\tfor (int i = start; i < end; i++) {\n\t\t\tchar c = csq.charAt(i);\n\t\t\tswitch (c) {\n\t\t\t\tcase '\"' -> { // 34\n\t\t\t\t\ta.append(csq, start, i);\n\t\t\t\t\tstart = i + 1;\n\t\t\t\t\ta.append(QUOT);\n\t\t\t\t}\n\t\t\t\tcase '&' -> { // 38\n\t\t\t\t\ta.append(csq, start, i);\n\t\t\t\t\tstart = i + 1;\n\t\t\t\t\ta.append(AMP);\n\n\t\t\t\t}\n\t\t\t\tcase '\\'' -> { // 39\n\t\t\t\t\ta.append(csq, start, i);\n\t\t\t\t\tstart = i + 1;\n\t\t\t\t\ta.append(APOS);\n\t\t\t\t}\n\t\t\t\tcase '<' -> { // 60\n\t\t\t\t\ta.append(csq, start, i);\n\t\t\t\t\tstart = i + 1;\n\t\t\t\t\ta.append(LT);\n\t\t\t\t}\n\t\t\t\tcase '=' -> { // 61\n\t\t\t\t\ta.append(csq, start, i);\n\t\t\t\t\tstart = i + 1;\n\t\t\t\t\ta.append(EQUAL);\n\t\t\t\t}\n\t\t\t\tcase '>' -> { // 62\n\t\t\t\t\ta.append(csq, start, i);\n\t\t\t\t\tstart = i + 1;\n\t\t\t\t\ta.append(GT);\n\t\t\t\t}\n\t\t\t\tcase '`' -> { // 96\n\t\t\t\t\ta.append(csq, start, i);\n\t\t\t\t\tstart = i + 1;\n\t\t\t\t\ta.append(BACK_TICK);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ta.append(csq, start, end);\n\n\t}",
  "abstract_func": "@Override\n\tpublic <A extends Output<E>, E extends Exception> void append(A VAR_0, CharSequence VAR_1, int VAR_2, int VAR_3) throws E {\n\t\tVAR_1 = VAR_1 == null ? \"null\" : VAR_1;\n\t\tfor (int VAR_4 = VAR_2; VAR_4 < VAR_3; VAR_4++) {\n\t\t\tchar VAR_5 = VAR_1.charAt(VAR_4);\n\t\t\tswitch (VAR_5) {\n\t\t\t\tcase '\"' -> { /* COMMENT_0 */\n\t\t\t\t\tVAR_0.append(VAR_1, VAR_2, VAR_4);\n\t\t\t\t\tVAR_2 = VAR_4 + 1;\n\t\t\t\t\tVAR_0.append(VAR_6);\n\t\t\t\t}\n\t\t\t\tcase '&' -> { /* COMMENT_1 */\n\t\t\t\t\tVAR_0.append(VAR_1, VAR_2, VAR_4);\n\t\t\t\t\tVAR_2 = VAR_4 + 1;\n\t\t\t\t\tVAR_0.append(VAR_7);\n\n\t\t\t\t}\n\t\t\t\tcase '\\'' -> { /* COMMENT_2 */\n\t\t\t\t\tVAR_0.append(VAR_1, VAR_2, VAR_4);\n\t\t\t\t\tVAR_2 = VAR_4 + 1;\n\t\t\t\t\tVAR_0.append(VAR_8);\n\t\t\t\t}\n\t\t\t\tcase '<' -> { /* COMMENT_3 */\n\t\t\t\t\tVAR_0.append(VAR_1, VAR_2, VAR_4);\n\t\t\t\t\tVAR_2 = VAR_4 + 1;\n\t\t\t\t\tVAR_0.append(VAR_9);\n\t\t\t\t}\n\t\t\t\tcase '=' -> { /* COMMENT_4 */\n\t\t\t\t\tVAR_0.append(VAR_1, VAR_2, VAR_4);\n\t\t\t\t\tVAR_2 = VAR_4 + 1;\n\t\t\t\t\tVAR_0.append(VAR_10);\n\t\t\t\t}\n\t\t\t\tcase '>' -> { /* COMMENT_5 */\n\t\t\t\t\tVAR_0.append(VAR_1, VAR_2, VAR_4);\n\t\t\t\t\tVAR_2 = VAR_4 + 1;\n\t\t\t\t\tVAR_0.append(VAR_11);\n\t\t\t\t}\n\t\t\t\tcase '`' -> { /* COMMENT_6 */\n\t\t\t\t\tVAR_0.append(VAR_1, VAR_2, VAR_4);\n\t\t\t\t\tVAR_2 = VAR_4 + 1;\n\t\t\t\t\tVAR_0.append(VAR_12);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tVAR_0.append(VAR_1, VAR_2, VAR_3);\n\n\t}",
  "func_graph_path": "jstachio/7b2f78377d1284df14c580be762a25af5f8dcd66/HtmlEscaper.java/vul/after/1.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -4,29 +4,42 @@\n \t\tfor (int i = start; i < end; i++) {\n \t\t\tchar c = csq.charAt(i);\n \t\t\tswitch (c) {\n-\t\t\t\tcase '&' -> {\n+\t\t\t\tcase '\"' -> { // 34\n+\t\t\t\t\ta.append(csq, start, i);\n+\t\t\t\t\tstart = i + 1;\n+\t\t\t\t\ta.append(QUOT);\n+\t\t\t\t}\n+\t\t\t\tcase '&' -> { // 38\n \t\t\t\t\ta.append(csq, start, i);\n \t\t\t\t\tstart = i + 1;\n \t\t\t\t\ta.append(AMP);\n \n \t\t\t\t}\n-\t\t\t\tcase '<' -> {\n+\t\t\t\tcase '\\'' -> { // 39\n+\t\t\t\t\ta.append(csq, start, i);\n+\t\t\t\t\tstart = i + 1;\n+\t\t\t\t\ta.append(APOS);\n+\t\t\t\t}\n+\t\t\t\tcase '<' -> { // 60\n \t\t\t\t\ta.append(csq, start, i);\n \t\t\t\t\tstart = i + 1;\n \t\t\t\t\ta.append(LT);\n-\n \t\t\t\t}\n-\t\t\t\tcase '>' -> {\n+\t\t\t\tcase '=' -> { // 61\n+\t\t\t\t\ta.append(csq, start, i);\n+\t\t\t\t\tstart = i + 1;\n+\t\t\t\t\ta.append(EQUAL);\n+\t\t\t\t}\n+\t\t\t\tcase '>' -> { // 62\n \t\t\t\t\ta.append(csq, start, i);\n \t\t\t\t\tstart = i + 1;\n \t\t\t\t\ta.append(GT);\n \t\t\t\t}\n-\t\t\t\tcase '\"' -> {\n+\t\t\t\tcase '`' -> { // 96\n \t\t\t\t\ta.append(csq, start, i);\n \t\t\t\t\tstart = i + 1;\n-\t\t\t\t\ta.append(QUOT);\n+\t\t\t\t\ta.append(BACK_TICK);\n \t\t\t\t}\n-\n \t\t\t}\n \t\t}\n \t\ta.append(csq, start, end);",
  "diff_line_info": {
    "deleted_lines": [
      "\t\t\t\tcase '&' -> {",
      "\t\t\t\tcase '<' -> {",
      "",
      "\t\t\t\tcase '>' -> {",
      "\t\t\t\tcase '\"' -> {",
      "\t\t\t\t\ta.append(QUOT);",
      ""
    ],
    "added_lines": [
      "\t\t\t\tcase '\"' -> { // 34",
      "\t\t\t\t\ta.append(csq, start, i);",
      "\t\t\t\t\tstart = i + 1;",
      "\t\t\t\t\ta.append(QUOT);",
      "\t\t\t\t}",
      "\t\t\t\tcase '&' -> { // 38",
      "\t\t\t\tcase '\\'' -> { // 39",
      "\t\t\t\t\ta.append(csq, start, i);",
      "\t\t\t\t\tstart = i + 1;",
      "\t\t\t\t\ta.append(APOS);",
      "\t\t\t\t}",
      "\t\t\t\tcase '<' -> { // 60",
      "\t\t\t\tcase '=' -> { // 61",
      "\t\t\t\t\ta.append(csq, start, i);",
      "\t\t\t\t\tstart = i + 1;",
      "\t\t\t\t\ta.append(EQUAL);",
      "\t\t\t\t}",
      "\t\t\t\tcase '>' -> { // 62",
      "\t\t\t\tcase '`' -> { // 96",
      "\t\t\t\t\ta.append(BACK_TICK);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/jstachio/jstachio/pull/158",
  "description": {
    "pr_info": {
      "title": "Fix #157 add more aggressive html5 escaping",
      "number": 158
    },
    "comment": [
      "The original Mustache spec and various implementations only escaped\r\n\r\n* `\"`\r\n* `&`\r\n* `<`\r\n* `>`\r\n\r\nJStachio kept with that minimum HTML version agnostic escaping expecting users to use different escaping on attributes through a lambda. \r\n\r\nUnfortunately that is unrealistic and dangerous and I should have added the additional following characters in:\r\n\r\n* `\\``\r\n* `'`\r\n* `=`\r\n\r\nI don't think the above problem deserves a CVE as it was documented that it only did the original 4 and while these additional characters prevent some level of script injection of attributes there are probably other exploits that can be done on HTML attributes (particularly the on attributes) with script tags.\r\n\r\nAttribute escaping (and examination of scripts in those attributes) will at some point be provided as a feature through a lambda to prevent those kinds of exploits but for now it is best to only use trusted or sanitized content for HTML attributes."
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.9\n\n**Step-by-Step Explanation:**\n\n1. **Input Analysis:**  \n   - The commit message refers to \"add more aggressive html5 escaping,\" which suggests addressing escaping issues.\n   - The vulnerability description explains inadequate escaping in HTML attributes, particularly for characters like `\\`, `, =, leading to potential XSS.\n\n2. **Consistency Check:**  \n   - The code adds escaping for `\\`, `, =, aligning with the commit message and description.\n\n3. **Purpose Evaluation:**  \n   - Modifies core logic to enhance escaping, directly addressing a security risk.\n\n4. **Security Assessment:**  \n   - Prevents XSS in HTML attributes, a security fix despite no CVE mentioned.\n\n**Confidence Score:** High due to clear intent to fix a security issue.\n\nFinal Classification: Security Vulnerability Fix; Confidence: 0.9"
}