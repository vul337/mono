{
  "cve_id": "CVE-2021-37620",
  "cwe_ids": [
    "CWE-125"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "Exiv2/exiv2",
  "commit_msg": "Safer std::vector indexing.",
  "commit_hash": "76e313745e813f80e8910aceb2210af3ad8cf897",
  "git_url": "https://github.com/Exiv2/exiv2/commit/76e313745e813f80e8910aceb2210af3ad8cf897",
  "file_path": "src/basicio.cpp",
  "func_name": "HttpIo::HttpImpl::writeRemote",
  "func_before": "void HttpIo::HttpImpl::writeRemote(const byte* data, size_t size, long from, long to)\n    {\n        std::string scriptPath(getEnv(envHTTPPOST));\n        if (scriptPath == \"\") {\n            throw Error(kerErrorMessage, \"Please set the path of the server script to handle http post data to EXIV2_HTTP_POST environmental variable.\");\n        }\n\n        // standadize the path without \"/\" at the beginning.\n        std::size_t protocolIndex = scriptPath.find(\"://\");\n        if (protocolIndex == std::string::npos && scriptPath[0] != '/') {\n            scriptPath = \"/\" + scriptPath;\n        }\n\n        Exiv2::Dictionary response;\n        Exiv2::Dictionary request;\n        std::string errors;\n\n        Uri scriptUri = Exiv2::Uri::Parse(scriptPath);\n        request[\"server\"] = scriptUri.Host == \"\" ? hostInfo_.Host : scriptUri.Host;\n        if (scriptUri.Port != \"\") request[\"port\"] = scriptUri.Port;\n        request[\"page\"] = scriptUri.Path;\n        request[\"verb\"] = \"POST\";\n\n        // encode base64\n        size_t encodeLength = ((size + 2) / 3) * 4 + 1;\n        char* encodeData = new char[encodeLength];\n        base64encode(data, size, encodeData, encodeLength);\n        // url encode\n        const std::string urlencodeData = urlencode(encodeData);\n        delete[] encodeData;\n\n        std::stringstream ss;\n        ss << \"path=\"   << hostInfo_.Path << \"&\"\n           << \"from=\"   << from           << \"&\"\n           << \"to=\"     << to             << \"&\"\n           << \"data=\"   << urlencodeData;\n        std::string postData = ss.str();\n\n        // create the header\n        ss.str(\"\");\n        ss << \"Content-Length: \" << postData.length()  << \"\\n\"\n           << \"Content-Type: application/x-www-form-urlencoded\\n\"\n           << \"\\n\" << postData << \"\\r\\n\";\n        request[\"header\"] = ss.str();\n\n        int serverCode = http(request, response, errors);\n        if (serverCode < 0 || serverCode >= 400 || errors.compare(\"\") != 0) {\n            throw Error(kerFileOpenFailed, \"http\",Exiv2::Internal::stringFormat(\"%d\",serverCode), hostInfo_.Path);\n        }\n    }",
  "abstract_func_before": "void HttpIo::HttpImpl::writeRemote(const byte* VAR_0, size_t VAR_1, long VAR_2, long VAR_3)\n    {\n        std::string scriptPath(getEnv(envHTTPPOST));\n        if (VAR_4 == \"\") {\n            throw Error(VAR_5, \"Please set the path of the server script to handle http post data to EXIV2_HTTP_POST environmental variable.\");\n        }\n\n        /* COMMENT_0 */\n        std::size_t VAR_6 = VAR_4.find(\"://\");\n        if (VAR_6 == std::string::npos && VAR_4[0] != '/') {\n            VAR_4 = \"/\" + VAR_4;\n        }\n\n        Exiv2::Dictionary VAR_7;\n        Exiv2::Dictionary VAR_8;\n        std::string VAR_9;\n\n        Uri VAR_10 = Exiv2::Uri::Parse(VAR_4);\n        VAR_8[\"server\"] = VAR_10.Host == \"\" ? VAR_11.Host : VAR_10.Host;\n        if (VAR_10.Port != \"\") VAR_8[\"port\"] = VAR_10.Port;\n        VAR_8[\"page\"] = VAR_10.Path;\n        VAR_8[\"verb\"] = \"POST\";\n\n        /* COMMENT_1 */\n        size_t VAR_12 = ((VAR_1 + 2) / 3) * 4 + 1;\n        char* VAR_13 = new char[VAR_12];\n        base64encode(VAR_0, VAR_1, VAR_13, VAR_12);\n        /* COMMENT_2 */\n        const std::string VAR_14 = urlencode(VAR_13);\n        delete[] VAR_13;\n\n        std::stringstream VAR_15;\n        VAR_15 << \"path=\"   << VAR_11.Path << \"&\"\n           << \"from=\"   << VAR_2           << \"&\"\n           << \"to=\"     << VAR_3             << \"&\"\n           << \"data=\"   << VAR_14;\n        std::string VAR_16 = VAR_15.str();\n\n        /* COMMENT_3 */\n        VAR_15.str(\"\");\n        VAR_15 << \"Content-Length: \" << VAR_16.length()  << \"\\n\"\n           << \"Content-Type: application/x-www-form-urlencoded\\n\"\n           << \"\\n\" << VAR_16 << \"\\r\\n\";\n        VAR_8[\"header\"] = VAR_15.str();\n\n        int VAR_17 = http(VAR_8, VAR_7, VAR_9);\n        if (VAR_17 < 0 || VAR_17 >= 400 || VAR_9.compare(\"\") != 0) {\n            throw Error(VAR_18, \"http\",Exiv2::Internal::stringFormat(\"%d\",VAR_17), VAR_11.Path);\n        }\n    }",
  "func_graph_path_before": "Exiv2/exiv2/76e313745e813f80e8910aceb2210af3ad8cf897/basicio.cpp/vul/before/0.json",
  "func": "void HttpIo::HttpImpl::writeRemote(const byte* data, size_t size, long from, long to)\n    {\n        std::string scriptPath(getEnv(envHTTPPOST));\n        if (scriptPath.empty()) {\n            throw Error(kerErrorMessage, \"Please set the path of the server script to handle http post data to EXIV2_HTTP_POST environmental variable.\");\n        }\n\n        // standadize the path without \"/\" at the beginning.\n        std::size_t protocolIndex = scriptPath.find(\"://\");\n        if (protocolIndex == std::string::npos && scriptPath[0] != '/') {\n            scriptPath = \"/\" + scriptPath;\n        }\n\n        Exiv2::Dictionary response;\n        Exiv2::Dictionary request;\n        std::string errors;\n\n        Uri scriptUri = Exiv2::Uri::Parse(scriptPath);\n        request[\"server\"] = scriptUri.Host == \"\" ? hostInfo_.Host : scriptUri.Host;\n        if (scriptUri.Port != \"\") request[\"port\"] = scriptUri.Port;\n        request[\"page\"] = scriptUri.Path;\n        request[\"verb\"] = \"POST\";\n\n        // encode base64\n        size_t encodeLength = ((size + 2) / 3) * 4 + 1;\n        char* encodeData = new char[encodeLength];\n        base64encode(data, size, encodeData, encodeLength);\n        // url encode\n        const std::string urlencodeData = urlencode(encodeData);\n        delete[] encodeData;\n\n        std::stringstream ss;\n        ss << \"path=\"   << hostInfo_.Path << \"&\"\n           << \"from=\"   << from           << \"&\"\n           << \"to=\"     << to             << \"&\"\n           << \"data=\"   << urlencodeData;\n        std::string postData = ss.str();\n\n        // create the header\n        ss.str(\"\");\n        ss << \"Content-Length: \" << postData.length()  << \"\\n\"\n           << \"Content-Type: application/x-www-form-urlencoded\\n\"\n           << \"\\n\" << postData << \"\\r\\n\";\n        request[\"header\"] = ss.str();\n\n        int serverCode = http(request, response, errors);\n        if (serverCode < 0 || serverCode >= 400 || errors.compare(\"\") != 0) {\n            throw Error(kerFileOpenFailed, \"http\",Exiv2::Internal::stringFormat(\"%d\",serverCode), hostInfo_.Path);\n        }\n    }",
  "abstract_func": "void HttpIo::HttpImpl::writeRemote(const byte* VAR_0, size_t VAR_1, long VAR_2, long VAR_3)\n    {\n        std::string scriptPath(getEnv(envHTTPPOST));\n        if (VAR_4.empty()) {\n            throw Error(VAR_5, \"Please set the path of the server script to handle http post data to EXIV2_HTTP_POST environmental variable.\");\n        }\n\n        /* COMMENT_0 */\n        std::size_t VAR_6 = VAR_4.find(\"://\");\n        if (VAR_6 == std::string::npos && VAR_4[0] != '/') {\n            VAR_4 = \"/\" + VAR_4;\n        }\n\n        Exiv2::Dictionary VAR_7;\n        Exiv2::Dictionary VAR_8;\n        std::string VAR_9;\n\n        Uri VAR_10 = Exiv2::Uri::Parse(VAR_4);\n        VAR_8[\"server\"] = VAR_10.Host == \"\" ? VAR_11.Host : VAR_10.Host;\n        if (VAR_10.Port != \"\") VAR_8[\"port\"] = VAR_10.Port;\n        VAR_8[\"page\"] = VAR_10.Path;\n        VAR_8[\"verb\"] = \"POST\";\n\n        /* COMMENT_1 */\n        size_t VAR_12 = ((VAR_1 + 2) / 3) * 4 + 1;\n        char* VAR_13 = new char[VAR_12];\n        base64encode(VAR_0, VAR_1, VAR_13, VAR_12);\n        /* COMMENT_2 */\n        const std::string VAR_14 = urlencode(VAR_13);\n        delete[] VAR_13;\n\n        std::stringstream VAR_15;\n        VAR_15 << \"path=\"   << VAR_11.Path << \"&\"\n           << \"from=\"   << VAR_2           << \"&\"\n           << \"to=\"     << VAR_3             << \"&\"\n           << \"data=\"   << VAR_14;\n        std::string VAR_16 = VAR_15.str();\n\n        /* COMMENT_3 */\n        VAR_15.str(\"\");\n        VAR_15 << \"Content-Length: \" << VAR_16.length()  << \"\\n\"\n           << \"Content-Type: application/x-www-form-urlencoded\\n\"\n           << \"\\n\" << VAR_16 << \"\\r\\n\";\n        VAR_8[\"header\"] = VAR_15.str();\n\n        int VAR_17 = http(VAR_8, VAR_7, VAR_9);\n        if (VAR_17 < 0 || VAR_17 >= 400 || VAR_9.compare(\"\") != 0) {\n            throw Error(VAR_18, \"http\",Exiv2::Internal::stringFormat(\"%d\",VAR_17), VAR_11.Path);\n        }\n    }",
  "func_graph_path": "Exiv2/exiv2/76e313745e813f80e8910aceb2210af3ad8cf897/basicio.cpp/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,7 +1,7 @@\n void HttpIo::HttpImpl::writeRemote(const byte* data, size_t size, long from, long to)\n     {\n         std::string scriptPath(getEnv(envHTTPPOST));\n-        if (scriptPath == \"\") {\n+        if (scriptPath.empty()) {\n             throw Error(kerErrorMessage, \"Please set the path of the server script to handle http post data to EXIV2_HTTP_POST environmental variable.\");\n         }\n ",
  "diff_line_info": {
    "deleted_lines": [
      "        if (scriptPath == \"\") {"
    ],
    "added_lines": [
      "        if (scriptPath.empty()) {"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/sridharb1/exiv2/pull/4",
  "description": {
    "pr_info": {
      "title": "0.27 maintenance",
      "number": 4
    },
    "comment": []
  },
  "Bug Filter": "Supporting & Non-Core Improvements",
  "Bug Filter Confidence": 0.7,
  "Bug Filter Response": "**Final Classification:** Supporting & Non-Core Improvements; **Confidence:** 0.7"
}