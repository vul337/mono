{
  "cve_id": "CVE-2018-15861",
  "cwe_ids": [
    "CWE-476"
  ],
  "cvss_vector": "AV:L/AC:L/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "xkbcommon/libxkbcommon",
  "commit_msg": "xkbcomp: Don't falsely promise from ExprResolveLhs\n\nEvery user of ExprReturnLhs goes on to unconditionally dereference the\nfield return, which can be NULL if xkb_intern_atom fails. Return false\nif this is the case, so we fail safely.\n\ntestcase: splice geometry data into interp\n\nSigned-off-by: Daniel Stone <daniels@collabora.com>",
  "commit_hash": "38e1766bc6e20108948aec8a0b222a4bad0254e9",
  "git_url": "https://github.com/xkbcommon/libxkbcommon/commit/38e1766bc6e20108948aec8a0b222a4bad0254e9",
  "file_path": "src/xkbcomp/expr.c",
  "func_name": "ExprResolveLhs",
  "func_before": "bool\nExprResolveLhs(struct xkb_context *ctx, const ExprDef *expr,\n               const char **elem_rtrn, const char **field_rtrn,\n               ExprDef **index_rtrn)\n{\n    switch (expr->expr.op) {\n    case EXPR_IDENT:\n        *elem_rtrn = NULL;\n        *field_rtrn = xkb_atom_text(ctx, expr->ident.ident);\n        *index_rtrn = NULL;\n        return true;\n    case EXPR_FIELD_REF:\n        *elem_rtrn = xkb_atom_text(ctx, expr->field_ref.element);\n        *field_rtrn = xkb_atom_text(ctx, expr->field_ref.field);\n        *index_rtrn = NULL;\n        return true;\n    case EXPR_ARRAY_REF:\n        *elem_rtrn = xkb_atom_text(ctx, expr->array_ref.element);\n        *field_rtrn = xkb_atom_text(ctx, expr->array_ref.field);\n        *index_rtrn = expr->array_ref.entry;\n        return true;\n    default:\n        break;\n    }\n    log_wsgo(ctx, \"Unexpected operator %d in ResolveLhs\\n\", expr->expr.op);\n    return false;\n}",
  "abstract_func_before": "bool\nExprResolveLhs(struct xkb_context *VAR_0, const ExprDef *VAR_1,\n               const char **VAR_2, const char **VAR_3,\n               ExprDef **VAR_4)\n{\n    switch (VAR_1->expr.op) {\n    case VAR_5:\n        *VAR_2 = NULL;\n        *VAR_3 = xkb_atom_text(VAR_0, VAR_1->ident.ident);\n        *VAR_4 = NULL;\n        return true;\n    case VAR_6:\n        *VAR_2 = xkb_atom_text(VAR_0, VAR_1->field_ref.element);\n        *VAR_3 = xkb_atom_text(VAR_0, VAR_1->field_ref.field);\n        *VAR_4 = NULL;\n        return true;\n    case VAR_7:\n        *VAR_2 = xkb_atom_text(VAR_0, VAR_1->array_ref.element);\n        *VAR_3 = xkb_atom_text(VAR_0, VAR_1->array_ref.field);\n        *VAR_4 = VAR_1->array_ref.entry;\n        return true;\n    default:\n        break;\n    }\n    log_wsgo(VAR_0, \"Unexpected operator %d in ResolveLhs\\n\", VAR_1->expr.op);\n    return false;\n}",
  "func_graph_path_before": "xkbcommon/libxkbcommon/38e1766bc6e20108948aec8a0b222a4bad0254e9/expr.c/vul/before/0.json",
  "func": "bool\nExprResolveLhs(struct xkb_context *ctx, const ExprDef *expr,\n               const char **elem_rtrn, const char **field_rtrn,\n               ExprDef **index_rtrn)\n{\n    switch (expr->expr.op) {\n    case EXPR_IDENT:\n        *elem_rtrn = NULL;\n        *field_rtrn = xkb_atom_text(ctx, expr->ident.ident);\n        *index_rtrn = NULL;\n        return (*field_rtrn != NULL);\n    case EXPR_FIELD_REF:\n        *elem_rtrn = xkb_atom_text(ctx, expr->field_ref.element);\n        *field_rtrn = xkb_atom_text(ctx, expr->field_ref.field);\n        *index_rtrn = NULL;\n        return true;\n    case EXPR_ARRAY_REF:\n        *elem_rtrn = xkb_atom_text(ctx, expr->array_ref.element);\n        *field_rtrn = xkb_atom_text(ctx, expr->array_ref.field);\n        *index_rtrn = expr->array_ref.entry;\n        return true;\n    default:\n        break;\n    }\n    log_wsgo(ctx, \"Unexpected operator %d in ResolveLhs\\n\", expr->expr.op);\n    return false;\n}",
  "abstract_func": "bool\nExprResolveLhs(struct xkb_context *VAR_0, const ExprDef *VAR_1,\n               const char **VAR_2, const char **VAR_3,\n               ExprDef **VAR_4)\n{\n    switch (VAR_1->expr.op) {\n    case VAR_5:\n        *VAR_2 = NULL;\n        *VAR_3 = xkb_atom_text(VAR_0, VAR_1->ident.ident);\n        *VAR_4 = NULL;\n        return (*VAR_3 != NULL);\n    case VAR_6:\n        *VAR_2 = xkb_atom_text(VAR_0, VAR_1->field_ref.element);\n        *VAR_3 = xkb_atom_text(VAR_0, VAR_1->field_ref.field);\n        *VAR_4 = NULL;\n        return true;\n    case VAR_7:\n        *VAR_2 = xkb_atom_text(VAR_0, VAR_1->array_ref.element);\n        *VAR_3 = xkb_atom_text(VAR_0, VAR_1->array_ref.field);\n        *VAR_4 = VAR_1->array_ref.entry;\n        return true;\n    default:\n        break;\n    }\n    log_wsgo(VAR_0, \"Unexpected operator %d in ResolveLhs\\n\", VAR_1->expr.op);\n    return false;\n}",
  "func_graph_path": "xkbcommon/libxkbcommon/38e1766bc6e20108948aec8a0b222a4bad0254e9/expr.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -8,7 +8,7 @@\n         *elem_rtrn = NULL;\n         *field_rtrn = xkb_atom_text(ctx, expr->ident.ident);\n         *index_rtrn = NULL;\n-        return true;\n+        return (*field_rtrn != NULL);\n     case EXPR_FIELD_REF:\n         *elem_rtrn = xkb_atom_text(ctx, expr->field_ref.element);\n         *field_rtrn = xkb_atom_text(ctx, expr->field_ref.field);",
  "diff_line_info": {
    "deleted_lines": [
      "        return true;"
    ],
    "added_lines": [
      "        return (*field_rtrn != NULL);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/xkbcommon/libxkbcommon/pull/67",
  "description": {
    "pr_info": {
      "title": "Fix more fuzz-testing fallout",
      "number": 67
    },
    "comment": [
      "Most of this was found quite a while ago but got lost.",
      "Thanks! They all look good to me. I'll make another release with these soon."
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 0.9"
}