{
  "cve_id": "CVE-2021-31828",
  "cwe_ids": [
    "CWE-918"
  ],
  "cvss_vector": "AV:N/AC:L/Au:S/C:P/I:P/A:N",
  "cvss_is_v3": false,
  "repo_name": "opendistro-for-elasticsearch/alerting",
  "commit_msg": "Support deny list for destinations",
  "commit_hash": "49cc584dd6bd38ca26129eeaca5cd04e40a27f25",
  "git_url": "https://github.com/opendistro-for-elasticsearch/alerting/commit/49cc584dd6bd38ca26129eeaca5cd04e40a27f25",
  "file_path": "notification/src/main/java/com/amazon/opendistroforelasticsearch/alerting/destination/client/DestinationHttpClient.java",
  "func_name": "getHttpResponse",
  "func_before": "private CloseableHttpResponse getHttpResponse(BaseMessage message) throws Exception {\n        URI uri = null;\n        HttpRequestBase httpRequest;\n        if (message instanceof CustomWebhookMessage) {\n            CustomWebhookMessage customWebhookMessage = (CustomWebhookMessage) message;\n            uri = buildUri(customWebhookMessage.getUrl(), customWebhookMessage.getScheme(), customWebhookMessage.getHost(),\n                    customWebhookMessage.getPort(), customWebhookMessage.getPath(), customWebhookMessage.getQueryParams());\n            httpRequest = constructHttpRequest(((CustomWebhookMessage) message).getMethod());\n            // set headers\n            Map<String, String> headerParams = customWebhookMessage.getHeaderParams();\n            if(headerParams == null || headerParams.isEmpty()) {\n                // set default header\n                httpRequest.setHeader(\"Content-Type\", \"application/json\");\n            } else {\n                for (Map.Entry<String, String> e : customWebhookMessage.getHeaderParams().entrySet())\n                    httpRequest.setHeader(e.getKey(), e.getValue());\n            }\n        } else {\n             httpRequest = new HttpPost();\n             uri = buildUri(message.getUrl().trim(), null, null, -1, null, null);\n        }\n\n        httpRequest.setURI(uri);\n        if (httpRequest instanceof HttpEntityEnclosingRequestBase){\n            StringEntity entity = new StringEntity(extractBody(message), StandardCharsets.UTF_8);\n            ((HttpEntityEnclosingRequestBase) httpRequest).setEntity(entity);\n        }\n\n        return HTTP_CLIENT.execute(httpRequest);\n    }",
  "abstract_func_before": "private CloseableHttpResponse getHttpResponse(BaseMessage VAR_0) throws Exception {\n        URI VAR_1 = null;\n        HttpRequestBase VAR_2;\n        if (VAR_0 instanceof CustomWebhookMessage) {\n            CustomWebhookMessage VAR_3 = (CustomWebhookMessage) VAR_0;\n            VAR_1 = buildUri(VAR_3.getUrl(), VAR_3.getScheme(), VAR_3.getHost(),\n                    VAR_3.getPort(), VAR_3.getPath(), VAR_3.getQueryParams());\n            VAR_2 = constructHttpRequest(((CustomWebhookMessage) VAR_0).getMethod());\n            /* COMMENT_0 */\n            Map<String, String> VAR_4 = VAR_3.getHeaderParams();\n            if(VAR_4 == null || VAR_4.isEmpty()) {\n                /* COMMENT_1 */\n                VAR_2.setHeader(\"Content-Type\", \"application/json\");\n            } else {\n                for (Map.Entry<String, String> VAR_5 : VAR_3.getHeaderParams().entrySet())\n                    VAR_2.setHeader(VAR_5.getKey(), VAR_5.getValue());\n            }\n        } else {\n             VAR_2 = new HttpPost();\n             VAR_1 = buildUri(VAR_0.getUrl().trim(), null, null, -1, null, null);\n        }\n\n        VAR_2.setURI(VAR_1);\n        if (VAR_2 instanceof HttpEntityEnclosingRequestBase){\n            StringEntity VAR_6 = new StringEntity(extractBody(VAR_0), VAR_7.UTF_8);\n            ((HttpEntityEnclosingRequestBase) VAR_2).setEntity(VAR_6);\n        }\n\n        return VAR_8.execute(VAR_2);\n    }",
  "func_graph_path_before": "opendistro-for-elasticsearch/alerting/49cc584dd6bd38ca26129eeaca5cd04e40a27f25/DestinationHttpClient.java/vul/before/0.json",
  "func": "private CloseableHttpResponse getHttpResponse(BaseMessage message) throws Exception {\n        URI uri = null;\n        HttpRequestBase httpRequest;\n        if (message instanceof CustomWebhookMessage) {\n            CustomWebhookMessage customWebhookMessage = (CustomWebhookMessage) message;\n            uri = customWebhookMessage.getUri();\n            httpRequest = constructHttpRequest(((CustomWebhookMessage) message).getMethod());\n            // set headers\n            Map<String, String> headerParams = customWebhookMessage.getHeaderParams();\n            if(headerParams == null || headerParams.isEmpty()) {\n                // set default header\n                httpRequest.setHeader(\"Content-Type\", \"application/json\");\n            } else {\n                for (Map.Entry<String, String> e : customWebhookMessage.getHeaderParams().entrySet())\n                    httpRequest.setHeader(e.getKey(), e.getValue());\n            }\n        } else {\n             httpRequest = new HttpPost();\n             uri = message.getUri();\n        }\n\n        httpRequest.setURI(uri);\n        if (httpRequest instanceof HttpEntityEnclosingRequestBase){\n            StringEntity entity = new StringEntity(extractBody(message), StandardCharsets.UTF_8);\n            ((HttpEntityEnclosingRequestBase) httpRequest).setEntity(entity);\n        }\n\n        return HTTP_CLIENT.execute(httpRequest);\n    }",
  "abstract_func": "private CloseableHttpResponse getHttpResponse(BaseMessage VAR_0) throws Exception {\n        URI VAR_1 = null;\n        HttpRequestBase VAR_2;\n        if (VAR_0 instanceof CustomWebhookMessage) {\n            CustomWebhookMessage VAR_3 = (CustomWebhookMessage) VAR_0;\n            VAR_1 = VAR_3.getUri();\n            VAR_2 = constructHttpRequest(((CustomWebhookMessage) VAR_0).getMethod());\n            /* COMMENT_0 */\n            Map<String, String> VAR_4 = VAR_3.getHeaderParams();\n            if(VAR_4 == null || VAR_4.isEmpty()) {\n                /* COMMENT_1 */\n                VAR_2.setHeader(\"Content-Type\", \"application/json\");\n            } else {\n                for (Map.Entry<String, String> VAR_5 : VAR_3.getHeaderParams().entrySet())\n                    VAR_2.setHeader(VAR_5.getKey(), VAR_5.getValue());\n            }\n        } else {\n             VAR_2 = new HttpPost();\n             VAR_1 = VAR_0.getUri();\n        }\n\n        VAR_2.setURI(VAR_1);\n        if (VAR_2 instanceof HttpEntityEnclosingRequestBase){\n            StringEntity VAR_6 = new StringEntity(extractBody(VAR_0), VAR_7.UTF_8);\n            ((HttpEntityEnclosingRequestBase) VAR_2).setEntity(VAR_6);\n        }\n\n        return VAR_8.execute(VAR_2);\n    }",
  "func_graph_path": "opendistro-for-elasticsearch/alerting/49cc584dd6bd38ca26129eeaca5cd04e40a27f25/DestinationHttpClient.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -3,8 +3,7 @@\n         HttpRequestBase httpRequest;\n         if (message instanceof CustomWebhookMessage) {\n             CustomWebhookMessage customWebhookMessage = (CustomWebhookMessage) message;\n-            uri = buildUri(customWebhookMessage.getUrl(), customWebhookMessage.getScheme(), customWebhookMessage.getHost(),\n-                    customWebhookMessage.getPort(), customWebhookMessage.getPath(), customWebhookMessage.getQueryParams());\n+            uri = customWebhookMessage.getUri();\n             httpRequest = constructHttpRequest(((CustomWebhookMessage) message).getMethod());\n             // set headers\n             Map<String, String> headerParams = customWebhookMessage.getHeaderParams();\n@@ -17,7 +16,7 @@\n             }\n         } else {\n              httpRequest = new HttpPost();\n-             uri = buildUri(message.getUrl().trim(), null, null, -1, null, null);\n+             uri = message.getUri();\n         }\n \n         httpRequest.setURI(uri);",
  "diff_line_info": {
    "deleted_lines": [
      "            uri = buildUri(customWebhookMessage.getUrl(), customWebhookMessage.getScheme(), customWebhookMessage.getHost(),",
      "                    customWebhookMessage.getPort(), customWebhookMessage.getPath(), customWebhookMessage.getQueryParams());",
      "             uri = buildUri(message.getUrl().trim(), null, null, -1, null, null);"
    ],
    "added_lines": [
      "            uri = customWebhookMessage.getUri();",
      "             uri = message.getUri();"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/opendistro-for-elasticsearch/alerting/pull/353",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/opendistro-for-elasticsearch/alerting/pull/353: 403 Client Error: Forbidden for url: https://api.github.com/repos/opendistro-for-elasticsearch/alerting/pulls/353",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.8,
  "Bug Filter Response": "The commit adds a deny list for destination IPs, which is a security feature. The code changes modify URI handling, likely in support of enforcing this deny list. While the enforce isn't in the diff, the context clearly indicates a security purpose.\n\n**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.8  \n\nThe confidence is high because the commit and description explicitly mention security measures, even if the direct enforcement isn't shown in the diff."
}