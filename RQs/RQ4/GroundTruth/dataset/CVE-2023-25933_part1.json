{
  "cve_id": "CVE-2023-25933",
  "cwe_ids": [
    "CWE-416",
    "CWE-843"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
  "cvss_is_v3": true,
  "repo_name": "facebook/hermes",
  "commit_msg": "Re-sync with internal repository (#960)\n\nCo-authored-by: Facebook Community Bot <6422482+facebook-github-bot@users.noreply.github.com>",
  "commit_hash": "e6ed9c1a4b02dc219de1648f44cd808a56171b81",
  "git_url": "https://github.com/facebook/hermes/commit/e6ed9c1a4b02dc219de1648f44cd808a56171b81",
  "file_path": "lib/Optimizer/Scalar/TypeInference.cpp",
  "func_name": "inferBinaryArith",
  "func_before": "static bool inferBinaryArith(\n    BinaryOperatorInst *BOI,\n    Type numberType = Type::createNumber()) {\n  Type LeftTy = BOI->getLeftHandSide()->getType();\n  Type RightTy = BOI->getRightHandSide()->getType();\n\n  // Number - Number => Number\n  if (LeftTy.isNumberType() && RightTy.isNumberType()) {\n    BOI->setType(numberType);\n    return true;\n  }\n\n  // BigInt - BigInt => BigInt\n  if (LeftTy.isBigIntType() && RightTy.isBigIntType()) {\n    BOI->setType(Type::createBigInt());\n    return true;\n  }\n\n  Type mayBeBigInt = LeftTy.canBeBigInt() && RightTy.canBeBigInt()\n      ? Type::createBigInt()\n      : Type::createNoType();\n\n  // ?? - ?? => Number|?BigInt. BigInt is only possible if both operands can be\n  // BigInt due to the no automatic BigInt conversion.\n  BOI->setType(Type::unionTy(numberType, mayBeBigInt));\n  return true;\n}",
  "abstract_func_before": "static bool inferBinaryArith(\n    BinaryOperatorInst *VAR_0,\n    Type VAR_1 = Type::createNumber()) {\n  Type VAR_2 = VAR_0->getLeftHandSide()->getType();\n  Type VAR_3 = VAR_0->getRightHandSide()->getType();\n\n  /* COMMENT_0 */\n  if (VAR_2.isNumberType() && VAR_3.isNumberType()) {\n    VAR_0->setType(VAR_1);\n    return true;\n  }\n\n  /* COMMENT_1 */\n  if (VAR_2.isBigIntType() && VAR_3.isBigIntType()) {\n    VAR_0->setType(Type::createBigInt());\n    return true;\n  }\n\n  Type VAR_4 = VAR_2.canBeBigInt() && VAR_3.canBeBigInt()\n      ? Type::createBigInt()\n      : Type::createNoType();\n\n  /* COMMENT_2 */\n  /* COMMENT_3 */\n  VAR_0->setType(Type::unionTy(VAR_1, VAR_4));\n  return true;\n}",
  "func_graph_path_before": "facebook/hermes/e6ed9c1a4b02dc219de1648f44cd808a56171b81/TypeInference.cpp/vul/before/0.json",
  "func": "static bool inferBinaryArith(\n    BinaryOperatorInst *BOI,\n    Type numberType = Type::createNumber()) {\n  Type LeftTy = BOI->getLeftHandSide()->getType();\n  Type RightTy = BOI->getRightHandSide()->getType();\n\n  // Number - Number => Number\n  if (LeftTy.isNumberType() && RightTy.isNumberType()) {\n    BOI->setType(numberType);\n    return true;\n  }\n\n  // BigInt - BigInt => BigInt\n  if (LeftTy.isBigIntType() && RightTy.isBigIntType()) {\n    BOI->setType(Type::createBigInt());\n    return true;\n  }\n\n  Type mayBeBigInt = (isBigIntOrObject(LeftTy) && isBigIntOrObject(RightTy))\n      ? Type::createBigInt()\n      : Type::createNoType();\n\n  // ?? - ?? => Number|?BigInt. BigInt is only possible if both operands are\n  // BigInt|Object due to the no automatic BigInt conversion.\n  BOI->setType(Type::unionTy(numberType, mayBeBigInt));\n  return true;\n}",
  "abstract_func": "static bool inferBinaryArith(\n    BinaryOperatorInst *VAR_0,\n    Type VAR_1 = Type::createNumber()) {\n  Type VAR_2 = VAR_0->getLeftHandSide()->getType();\n  Type VAR_3 = VAR_0->getRightHandSide()->getType();\n\n  /* COMMENT_0 */\n  if (VAR_2.isNumberType() && VAR_3.isNumberType()) {\n    VAR_0->setType(VAR_1);\n    return true;\n  }\n\n  /* COMMENT_1 */\n  if (VAR_2.isBigIntType() && VAR_3.isBigIntType()) {\n    VAR_0->setType(Type::createBigInt());\n    return true;\n  }\n\n  Type VAR_4 = (isBigIntOrObject(VAR_2) && isBigIntOrObject(VAR_3))\n      ? Type::createBigInt()\n      : Type::createNoType();\n\n  /* COMMENT_2 */\n  /* COMMENT_3 */\n  VAR_0->setType(Type::unionTy(VAR_1, VAR_4));\n  return true;\n}",
  "func_graph_path": "facebook/hermes/e6ed9c1a4b02dc219de1648f44cd808a56171b81/TypeInference.cpp/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -16,12 +16,12 @@\n     return true;\n   }\n \n-  Type mayBeBigInt = LeftTy.canBeBigInt() && RightTy.canBeBigInt()\n+  Type mayBeBigInt = (isBigIntOrObject(LeftTy) && isBigIntOrObject(RightTy))\n       ? Type::createBigInt()\n       : Type::createNoType();\n \n-  // ?? - ?? => Number|?BigInt. BigInt is only possible if both operands can be\n-  // BigInt due to the no automatic BigInt conversion.\n+  // ?? - ?? => Number|?BigInt. BigInt is only possible if both operands are\n+  // BigInt|Object due to the no automatic BigInt conversion.\n   BOI->setType(Type::unionTy(numberType, mayBeBigInt));\n   return true;\n }",
  "diff_line_info": {
    "deleted_lines": [
      "  Type mayBeBigInt = LeftTy.canBeBigInt() && RightTy.canBeBigInt()",
      "  // ?? - ?? => Number|?BigInt. BigInt is only possible if both operands can be",
      "  // BigInt due to the no automatic BigInt conversion."
    ],
    "added_lines": [
      "  Type mayBeBigInt = (isBigIntOrObject(LeftTy) && isBigIntOrObject(RightTy))",
      "  // ?? - ?? => Number|?BigInt. BigInt is only possible if both operands are",
      "  // BigInt|Object due to the no automatic BigInt conversion."
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/facebook/hermes/pull/960",
  "description": {
    "pr_info": {
      "title": "Re-sync with internal repository",
      "number": 960
    },
    "comment": [
      "The internal and external repositories are out of sync. This attempts to brings them back in sync by patching the GitHub repository. Please carefully review this patch. You must disable ShipIt for your project in order to merge this pull request. DO NOT IMPORT this pull request. Instead, merge it directly on GitHub using the MERGE BUTTON. Re-enable ShipIt after merging."
    ]
  },
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Defect Remediation & Feature Upgrades; **Confidence:** 0.9\n\nThe patch modifies core logic related to BigInt type inference, indicating a fix for a bug or feature upgrade rather than a security issue. The commit message mentions syncing, which is somewhat inconsistent, but the code changes clarify it's a functional fix."
}