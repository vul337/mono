{
  "cve_id": "CVE-2023-1801",
  "cwe_ids": [
    "CWE-787"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H",
  "cvss_is_v3": true,
  "repo_name": "the-tcpdump-group/tcpdump",
  "commit_msg": "Have a common routine for converting dates and times to strings.\n\nHave a routine that takes a buffer, a strftime format, and a struct tm *\nas arguments, and:\n\n* checks whether the struct tm * is null and, if so, returns a string\nindicating that the date and time couldn't be converted;\n\n* otherwise, passes it to strftime(), along with the buffer and the\nformat argument and, if strftime() returns 0, meaning the string didn't\nfit into the buffer and thus that the buffer's contents are undefined,\nreturns a string indicating that the date and time didn't fit into the\nbuffer;\n\n* otherwise, returns a pointer to the buffer.\n\nCall that routine instead of directly calling strftime() in printers;\nthat prevents printing a buffer with undefined data if the buffer isn't\nbig enough for the string.\n\nAlso, when generating file names using an strftime format, check the\nreturn value of strftime() to make sure the buffer didn't overflow.",
  "commit_hash": "7578e1c04ee280dda50c4c2813e7d55f539c6501",
  "git_url": "https://github.com/the-tcpdump-group/tcpdump/commit/7578e1c04ee280dda50c4c2813e7d55f539c6501",
  "file_path": "print-zep.c",
  "func_name": "zep_print_ts",
  "func_before": "static void zep_print_ts(netdissect_options *ndo, const u_char *p)\n{\n\tint32_t i;\n\tuint32_t uf;\n\tuint32_t f;\n\tfloat ff;\n\n\ti = GET_BE_U_4(p);\n\tuf = GET_BE_U_4(p + 4);\n\tff = (float) uf;\n\tif (ff < 0.0)           /* some compilers are buggy */\n\t\tff += FMAXINT;\n\tff = (float) (ff / FMAXINT); /* shift radix point by 32 bits */\n\tf = (uint32_t) (ff * 1000000000.0);  /* treat fraction as parts per\n\t\t\t\t\t\tbillion */\n\tND_PRINT(\"%u.%09d\", i, f);\n\n\t/*\n\t * print the time in human-readable format.\n\t */\n\tif (i) {\n\t\ttime_t seconds = i - JAN_1970;\n\t\tstruct tm *tm;\n\t\tchar time_buf[128];\n\n\t\ttm = localtime(&seconds);\n\t\tstrftime(time_buf, sizeof (time_buf), \"%Y/%m/%d %H:%M:%S\", tm);\n\t\tND_PRINT(\" (%s)\", time_buf);\n\t}\n}",
  "abstract_func_before": "static void zep_print_ts(netdissect_options *VAR_0, const u_char *VAR_1)\n{\n\tint32_t VAR_2;\n\tuint32_t VAR_3;\n\tuint32_t VAR_4;\n\tfloat VAR_5;\n\n\tVAR_2 = GET_BE_U_4(VAR_1);\n\tVAR_3 = GET_BE_U_4(VAR_1 + 4);\n\tVAR_5 = (float) VAR_3;\n\tif (VAR_5 < 0.0)           /* COMMENT_0 */\n\t\tVAR_5 += VAR_6;\n\tVAR_5 = (float) (VAR_5 / VAR_6); /* COMMENT_1 */\n\tVAR_4 = (uint32_t) (VAR_5 * 1000000000.0);  /* COMMENT_2 */\n                \n\tND_PRINT(\"%u.%09d\", VAR_2, VAR_4);\n\n\t/* COMMENT_4 */\n                                            \n    \n\tif (VAR_2) {\n\t\ttime_t VAR_7 = VAR_2 - VAR_8;\n\t\tstruct tm *tm;\n\t\tchar VAR_9[128];\n\n\t\ttm = localtime(&VAR_7);\n\t\tstrftime(VAR_9, sizeof (VAR_9), \"%Y/%m/%d %H:%M:%S\", tm);\n\t\tND_PRINT(\" (%s)\", VAR_9);\n\t}\n}",
  "func_graph_path_before": "the-tcpdump-group/tcpdump/7578e1c04ee280dda50c4c2813e7d55f539c6501/print-zep.c/vul/before/0.json",
  "func": "static void zep_print_ts(netdissect_options *ndo, const u_char *p)\n{\n\tint32_t i;\n\tuint32_t uf;\n\tuint32_t f;\n\tfloat ff;\n\n\ti = GET_BE_U_4(p);\n\tuf = GET_BE_U_4(p + 4);\n\tff = (float) uf;\n\tif (ff < 0.0)           /* some compilers are buggy */\n\t\tff += FMAXINT;\n\tff = (float) (ff / FMAXINT); /* shift radix point by 32 bits */\n\tf = (uint32_t) (ff * 1000000000.0);  /* treat fraction as parts per\n\t\t\t\t\t\tbillion */\n\tND_PRINT(\"%u.%09d\", i, f);\n\n\t/*\n\t * print the time in human-readable format.\n\t */\n\tif (i) {\n\t\ttime_t seconds = i - JAN_1970;\n\t\tchar time_buf[128];\n\n\t\tND_PRINT(\" (%s)\",\n\t\t    nd_format_time(time_buf, sizeof (time_buf), \"%Y/%m/%d %H:%M:%S\",\n\t\t      localtime(&seconds)));\n\t}\n}",
  "abstract_func": "static void zep_print_ts(netdissect_options *VAR_0, const u_char *VAR_1)\n{\n\tint32_t VAR_2;\n\tuint32_t VAR_3;\n\tuint32_t VAR_4;\n\tfloat VAR_5;\n\n\tVAR_2 = GET_BE_U_4(VAR_1);\n\tVAR_3 = GET_BE_U_4(VAR_1 + 4);\n\tVAR_5 = (float) VAR_3;\n\tif (VAR_5 < 0.0)           /* COMMENT_0 */\n\t\tVAR_5 += VAR_6;\n\tVAR_5 = (float) (VAR_5 / VAR_6); /* COMMENT_1 */\n\tVAR_4 = (uint32_t) (VAR_5 * 1000000000.0);  /* COMMENT_2 */\n                \n\tND_PRINT(\"%u.%09d\", VAR_2, VAR_4);\n\n\t/* COMMENT_4 */\n                                            \n    \n\tif (VAR_2) {\n\t\ttime_t VAR_7 = VAR_2 - VAR_8;\n\t\tchar VAR_9[128];\n\n\t\tND_PRINT(\" (%s)\",\n\t\t    nd_format_time(VAR_9, sizeof (VAR_9), \"%Y/%m/%d %H:%M:%S\",\n\t\t      localtime(&VAR_7)));\n\t}\n}",
  "func_graph_path": "the-tcpdump-group/tcpdump/7578e1c04ee280dda50c4c2813e7d55f539c6501/print-zep.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -20,11 +20,10 @@\n \t */\n \tif (i) {\n \t\ttime_t seconds = i - JAN_1970;\n-\t\tstruct tm *tm;\n \t\tchar time_buf[128];\n \n-\t\ttm = localtime(&seconds);\n-\t\tstrftime(time_buf, sizeof (time_buf), \"%Y/%m/%d %H:%M:%S\", tm);\n-\t\tND_PRINT(\" (%s)\", time_buf);\n+\t\tND_PRINT(\" (%s)\",\n+\t\t    nd_format_time(time_buf, sizeof (time_buf), \"%Y/%m/%d %H:%M:%S\",\n+\t\t      localtime(&seconds)));\n \t}\n }",
  "diff_line_info": {
    "deleted_lines": [
      "\t\tstruct tm *tm;",
      "\t\ttm = localtime(&seconds);",
      "\t\tstrftime(time_buf, sizeof (time_buf), \"%Y/%m/%d %H:%M:%S\", tm);",
      "\t\tND_PRINT(\" (%s)\", time_buf);"
    ],
    "added_lines": [
      "\t\tND_PRINT(\" (%s)\",",
      "\t\t    nd_format_time(time_buf, sizeof (time_buf), \"%Y/%m/%d %H:%M:%S\",",
      "\t\t      localtime(&seconds)));"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/the-tcpdump-group/tcpdump/pull/1032",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/the-tcpdump-group/tcpdump/pull/1032: 403 Client Error: Forbidden for url: https://api.github.com/repos/the-tcpdump-group/tcpdump/pulls/1032",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 0.9"
}