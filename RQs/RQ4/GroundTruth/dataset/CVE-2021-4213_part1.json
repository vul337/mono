{
  "cve_id": "CVE-2021-4213",
  "cwe_ids": [
    "CWE-401"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
  "cvss_is_v3": true,
  "repo_name": "dogtagpki/jss",
  "commit_msg": "Fix memory leak on each TLS connection\n\nEach TLS connection is leaking a bunch of data that isn't in the heap\nand so after 25k requests Tomcat uses about 2.5GB resident memory.\n\nThere are large number of relationships that point at each other and we\nneed to break the cycle so JSSEngineReferenceImpl's finalizer can run\nand clear all the native resources these point at.\n\nThe lowest impact place to break the cycle was at SSLAlertEvent.engine.\nThis relationship doesn't seem to be used anywhere.  Once the cycle is\nbroken, JSSEngineReferenceImpl can be garbage collected and the\nfinalizer can run.\n\nSigned-off-by: Chris Kelley <ckelley@redhat.com>",
  "commit_hash": "5922560a78d0dee61af8a33cc9cfbf4cfa291448",
  "git_url": "https://github.com/dogtagpki/jss/commit/5922560a78d0dee61af8a33cc9cfbf4cfa291448",
  "file_path": "src/main/java/org/mozilla/jss/ssl/javax/JSSEngineReferenceImpl.java",
  "func_name": "cleanupSSLFD",
  "func_before": "private void cleanupSSLFD() {\n        if (!closed_fd && ssl_fd != null) {\n            try {\n                SSL.RemoveCallbacks(ssl_fd);\n                PR.Close(ssl_fd);\n                ssl_fd.close();\n            } catch (Exception e) {\n                debug(\"Got exception trying to cleanup SSLFD: \" + e.getMessage());\n            } finally {\n                closed_fd = true;\n            }\n        }\n\n        if (read_buf != null) {\n            Buffer.Free(read_buf);\n            read_buf = null;\n        }\n\n        if (write_buf != null) {\n            Buffer.Free(write_buf);\n            write_buf = null;\n        }\n    }",
  "abstract_func_before": "private void cleanupSSLFD() {\n        if (!VAR_0 && VAR_1 != null) {\n            try {\n                VAR_2.RemoveCallbacks(VAR_1);\n                VAR_3.Close(VAR_1);\n                VAR_1.close();\n            } catch (Exception VAR_4) {\n                debug(\"Got exception trying to cleanup SSLFD: \" + VAR_4.getMessage());\n            } finally {\n                VAR_0 = true;\n            }\n        }\n\n        if (VAR_5 != null) {\n            VAR_6.Free(VAR_5);\n            VAR_5 = null;\n        }\n\n        if (VAR_7 != null) {\n            VAR_6.Free(VAR_7);\n            VAR_7 = null;\n        }\n    }",
  "func_graph_path_before": "dogtagpki/jss/5922560a78d0dee61af8a33cc9cfbf4cfa291448/JSSEngineReferenceImpl.java/vul/before/0.json",
  "func": "private void cleanupSSLFD() {\n        if (!closed_fd && ssl_fd != null) {\n            try {\n                SSL.RemoveCallbacks(ssl_fd);\n                ssl_fd.close();\n                ssl_fd = null;\n            } catch (Exception e) {\n                logger.error(\"Got exception trying to cleanup SSLFD\", e);\n            } finally {\n                closed_fd = true;\n            }\n        }\n\n        if (read_buf != null) {\n            Buffer.Free(read_buf);\n            read_buf = null;\n        }\n\n        if (write_buf != null) {\n            Buffer.Free(write_buf);\n            write_buf = null;\n        }\n    }",
  "abstract_func": "private void cleanupSSLFD() {\n        if (!VAR_0 && VAR_1 != null) {\n            try {\n                VAR_2.RemoveCallbacks(VAR_1);\n                VAR_1.close();\n                VAR_1 = null;\n            } catch (Exception VAR_3) {\n                VAR_4.error(\"Got exception trying to cleanup SSLFD\", VAR_3);\n            } finally {\n                VAR_0 = true;\n            }\n        }\n\n        if (VAR_5 != null) {\n            VAR_6.Free(VAR_5);\n            VAR_5 = null;\n        }\n\n        if (VAR_7 != null) {\n            VAR_6.Free(VAR_7);\n            VAR_7 = null;\n        }\n    }",
  "func_graph_path": "dogtagpki/jss/5922560a78d0dee61af8a33cc9cfbf4cfa291448/JSSEngineReferenceImpl.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -2,10 +2,10 @@\n         if (!closed_fd && ssl_fd != null) {\n             try {\n                 SSL.RemoveCallbacks(ssl_fd);\n-                PR.Close(ssl_fd);\n                 ssl_fd.close();\n+                ssl_fd = null;\n             } catch (Exception e) {\n-                debug(\"Got exception trying to cleanup SSLFD: \" + e.getMessage());\n+                logger.error(\"Got exception trying to cleanup SSLFD\", e);\n             } finally {\n                 closed_fd = true;\n             }",
  "diff_line_info": {
    "deleted_lines": [
      "                PR.Close(ssl_fd);",
      "                debug(\"Got exception trying to cleanup SSLFD: \" + e.getMessage());"
    ],
    "added_lines": [
      "                ssl_fd = null;",
      "                logger.error(\"Got exception trying to cleanup SSLFD\", e);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/dogtagpki/jss/pull/844",
  "description": {
    "pr_info": {
      "title": "Fix memory leak on each TLS connection",
      "number": 844
    },
    "comment": [
      "Each TLS connection is leaking a bunch of data that isn't in the heap\r\nand so after 25k requests Tomcat uses about 2.5GB resident memory.\r\n\r\nThere are large number of relationships that point at each other and we\r\nneed to break the cycle so JSSEngineReferenceImpl's finalizer can run\r\nand clear all the native resources these point at.\r\n\r\nThe lowest impact place to break the cycle was at SSLAlertEvent.engine.\r\nThis relationship doesn't seem to be used anywhere.  Once the cycle is\r\nbroken, JSSEngineReferenceImpl can be garbage collected and the\r\nfinalizer can run.\r\n\r\nSigned-off-by: Chris Kelley <ckelley@redhat.com>",
      "I have verified this fix against F35.",
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; ![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=dogtagpki_jss&pullRequest=844&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=dogtagpki_jss&pullRequest=844&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=dogtagpki_jss&pullRequest=844&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=dogtagpki_jss&pullRequest=844&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=dogtagpki_jss&pullRequest=844&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=dogtagpki_jss&pullRequest=844&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=dogtagpki_jss&pullRequest=844&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=dogtagpki_jss&pullRequest=844&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=dogtagpki_jss&pullRequest=844&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=dogtagpki_jss&pullRequest=844&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=dogtagpki_jss&pullRequest=844&resolved=false&types=CODE_SMELL) [2 Code Smells](https://sonarcloud.io/project/issues?id=dogtagpki_jss&pullRequest=844&resolved=false&types=CODE_SMELL)\n\n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/0-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=dogtagpki_jss&pullRequest=844&metric=new_coverage&view=list) [0.0% Coverage](https://sonarcloud.io/component_measures?id=dogtagpki_jss&pullRequest=844&metric=new_coverage&view=list)  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=dogtagpki_jss&pullRequest=844&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=dogtagpki_jss&pullRequest=844&metric=new_duplicated_lines_density&view=list)\n\n"
    ]
  },
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "**Final Classification:** Defect Remediation & Feature Upgrades  \n**Confidence:** 0.95"
}