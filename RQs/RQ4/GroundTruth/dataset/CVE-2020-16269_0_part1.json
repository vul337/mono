{
  "cve_id": "CVE-2020-16269",
  "cwe_ids": [
    "CWE-Other"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "radareorg/radare2",
  "commit_msg": "Fix malformed DWARF crash due invalid .debug_str reference resulting in NULL str",
  "commit_hash": "0523c79d6e63858c990821a990edcb82cf8af284",
  "git_url": "https://github.com/radareorg/radare2/commit/0523c79d6e63858c990821a990edcb82cf8af284",
  "file_path": "libr/anal/type_dwarf.c",
  "func_name": "get_die_name",
  "func_before": "static char *get_die_name(const RBinDwarfDie *die) {\n\tchar *name = NULL;\n\tst32 name_attr_idx = find_attr_idx (die, DW_AT_name);\n\n\tif (name_attr_idx != -1) {\n\t\tname = strdup (die->attr_values[name_attr_idx].string.content);\n\t} else {\n\t\tname = create_type_name_from_offset (die->offset);\n\t}\n\treturn name;\n}",
  "abstract_func_before": "static char *get_die_name(const RBinDwarfDie *VAR_0) {\n\tchar *VAR_1 = NULL;\n\tst32 VAR_2 = find_attr_idx (VAR_0, VAR_3);\n\n\tif (VAR_2 != -1) {\n\t\tVAR_1 = strdup (VAR_0->attr_values[VAR_2].string.content);\n\t} else {\n\t\tVAR_1 = create_type_name_from_offset (VAR_0->offset);\n\t}\n\treturn VAR_1;\n}",
  "func_graph_path_before": "radareorg/radare2/0523c79d6e63858c990821a990edcb82cf8af284/type_dwarf.c/vul/before/0.json",
  "func": "static char *get_die_name(const RBinDwarfDie *die) {\n\tchar *name = NULL;\n\tst32 name_attr_idx = find_attr_idx (die, DW_AT_name);\n\n\tif (name_attr_idx != -1 && die->attr_values[name_attr_idx].string.content) {\n\t\tname = strdup (die->attr_values[name_attr_idx].string.content);\n\t} else {\n\t\tname = create_type_name_from_offset (die->offset);\n\t}\n\treturn name;\n}",
  "abstract_func": "static char *get_die_name(const RBinDwarfDie *VAR_0) {\n\tchar *VAR_1 = NULL;\n\tst32 VAR_2 = find_attr_idx (VAR_0, VAR_3);\n\n\tif (VAR_2 != -1 && VAR_0->attr_values[VAR_2].string.content) {\n\t\tVAR_1 = strdup (VAR_0->attr_values[VAR_2].string.content);\n\t} else {\n\t\tVAR_1 = create_type_name_from_offset (VAR_0->offset);\n\t}\n\treturn VAR_1;\n}",
  "func_graph_path": "radareorg/radare2/0523c79d6e63858c990821a990edcb82cf8af284/type_dwarf.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -2,7 +2,7 @@\n \tchar *name = NULL;\n \tst32 name_attr_idx = find_attr_idx (die, DW_AT_name);\n \n-\tif (name_attr_idx != -1) {\n+\tif (name_attr_idx != -1 && die->attr_values[name_attr_idx].string.content) {\n \t\tname = strdup (die->attr_values[name_attr_idx].string.content);\n \t} else {\n \t\tname = create_type_name_from_offset (die->offset);",
  "diff_line_info": {
    "deleted_lines": [
      "\tif (name_attr_idx != -1) {"
    ],
    "added_lines": [
      "\tif (name_attr_idx != -1 && die->attr_values[name_attr_idx].string.content) {"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/radareorg/radare2/pull/17399",
  "description": {
    "pr_info": {
      "title": "Fix malformed DWARF crash due invalid .debug_str reference ##bin",
      "number": 17399
    },
    "comment": [
      " <!-- Filling this template is mandatory -->\r\n\r\n**Your checklist for this pull request**\r\n- [x] I've read the [guidelines for contributing](https://github.com/radareorg/radare2/blob/master/DEVELOPERS.md) to this repository\r\n- [x] I made sure to follow the project's [coding style](https://github.com/radareorg/radare2/blob/master/DEVELOPERS.md#code-style)\r\n- [ ] I've added tests that prove my fix is effective or that my feature works (if possible)\r\n- [ ] I've updated the documentation and the [radare2 book](https://github.com/radareorg/radare2book) with the relevant information (if needed)\r\n\r\n**Detailed description**\r\n\r\nFix for #17383 \r\n\r\nIn case the string pointer into debug_str isn't valid, the string can be NULL which wasn't accounted for in the future type parsing, I've added the handling for this situation.",
      "Btw, you might want to create a macros or a small inline function for this pattern:\r\n```c\r\n\t\tif (!value->string.content) {\r\n\t\t\t\tname = create_type_name_from_offset (die->offset);\r\n\t\t\t} else {\r\n\t\t\t\tname = strdup (value->string.content);\r\n\t\t\t}\r\n\t\t\tif (!name) {\r\n\t\t\t\tgoto cleanup;\r\n\t\t\t}\r\n```"
    ]
  },
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.8,
  "Bug Filter Response": "**Final Classification:** Defect Remediation & Feature Upgrades  \n**Confidence:** 0.8  \n\nThe patch addresses a bug causing a crash due to invalid pointer handling, not a security vulnerability."
}