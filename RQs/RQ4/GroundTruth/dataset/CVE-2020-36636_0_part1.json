{
  "cve_id": "CVE-2020-36636",
  "cwe_ids": [
    "CWE-79"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
  "cvss_is_v3": true,
  "repo_name": "openmrs/openmrs-module-adminui",
  "commit_msg": "RA-1865: Fix possible xss in account setup (#57)",
  "commit_hash": "702fbfdac7c4418f23bb5f6452482b4a88020061",
  "git_url": "https://github.com/openmrs/openmrs-module-adminui/commit/702fbfdac7c4418f23bb5f6452482b4a88020061",
  "file_path": "omod/src/main/java/org/openmrs/module/adminui/page/controller/systemadmin/accounts/AccountPageController.java",
  "func_name": "post",
  "func_before": "public String post(PageModel model, @MethodParam(\"getAccount\") @BindParams Account account, @BindParams User user,\n\t                   @BindParams OtherAccountData otherAccountData, @SpringBean(\"userService\") UserService userService,\n\t                   @SpringBean(\"messageSourceService\") MessageSourceService messageSourceService,\n\t                   @SpringBean(\"adminAccountService\") AccountService accountService,\n\t                   @SpringBean(\"adminService\") AdministrationService administrationService,\n\t                   @SpringBean(\"adminUiAccountValidator\") AdminUiAccountValidator accountValidator,\n\t                   @SpringBean(\"providerManagementService\") ProviderManagementService providerManagementService,\n\t\t\t\t\t   @SpringBean(\"appFrameworkService\") AppFrameworkService appFrameworkService,\n\t                   HttpServletRequest request, UiUtils uu) throws IOException {\n\t\t\n\t\tErrors errors = new BeanPropertyBindingResult(account, \"account\");\n\n        List<Extension> customUserPropertyEditFragments =\n\t\t\t\tappFrameworkService.getExtensionsForCurrentUser(\"userAccount.userPropertyEditFragment\");\n        Map<String, String[]> parameterMap = request.getParameterMap();\n        for(Extension ext : customUserPropertyEditFragments) {\n            if (StringUtils.equals(ext.getExtensionParams().get(\"type\").toString(), \"userProperty\")) {\n                String userPropertyName = ext.getExtensionParams().get(\"userPropertyName\").toString();\n                String[] parameterValues = parameterMap.get(userPropertyName);\n                if (parameterValues != null && parameterValues.length > 0) {\n                    String parameterValue;\n                    if (userPropertyName == \"locationUuid\") {\n                    \tparameterValue = String.join(\",\", parameterValues);\n                    } else {\n                        if (parameterValues.length > 1) {\n                            log.warn(\"Multiple userProperty for a single user type not supported, ignoring extra values\");\n                        }\n                        parameterValue = parameterValues[0];\n                    }\n                    if (userPropertyName != null && parameterValue != null) {\n                        user.setUserProperty(userPropertyName, parameterValue);\n                    }\n                }\n            }\n        }\n\n        List<Extension> customPersonAttributeEditFragments =\n\t\t\t\tappFrameworkService.getExtensionsForCurrentUser(\"userAccount.personAttributeEditFragment\");\n        for(Extension ext : customPersonAttributeEditFragments) {\n            if (StringUtils.equals(ext.getExtensionParams().get(\"type\").toString(), \"personAttribute\")) {\n                String formFiledName = ext.getExtensionParams().get(\"formFieldName\").toString();\n                String personAttributeTypeUuid = ext.getExtensionParams().get(\"uuid\").toString();\n                String[] parameterValues = parameterMap.get(formFiledName);\n                if (parameterValues != null && parameterValues.length > 0) {\n                    if (parameterValues.length > 1) {\n                        log.warn(\"Multiple values for a single person attribute type not supported, ignoring extra values\");\n                    }\n                    String parameterValue = parameterValues[0];\n                    if (parameterValue != null) {\n                        PersonAttributeType personAttributeByUuid = Context.getPersonService()\n                                .getPersonAttributeTypeByUuid(personAttributeTypeUuid);\n                        if (personAttributeByUuid != null) {\n                            PersonAttribute attribute = new PersonAttribute(personAttributeByUuid, parameterValue);\n                            account.getPerson().addAttribute(attribute);\n                        }\n                    }\n                }\n            }\n        }\n\n\t\tif (otherAccountData.getAddUserAccount()) {\n\t\t\t//The StringToRoleConverter emrapi for some reason is taking precedence over the\n\t\t\t//one in uiframework module and it doesn't get role by uuid, so we have to do this\n\t\t\tuser.addRole(userService.getRoleByUuid(request.getParameter(\"privilegeLevel\")));\n\t\t\tString[] uuids = request.getParameterValues(\"capabilities\");\n\t\t\tif (uuids != null) {\n\t\t\t\tfor (String uuid : uuids) {\n\t\t\t\t\tuser.addRole(userService.getRoleByUuid(uuid));\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tString forcePassword = otherAccountData.getForceChangePassword() ? \"true\" : \"false\";\n\t\t\tuser.setUserProperty(OpenmrsConstants.USER_PROPERTY_CHANGE_PASSWORD, forcePassword);\n\t\t\taccount.addUserAccount(user);\n\t\t}\n\t\tif (otherAccountData.getAddProviderAccount()) {\n\t\t\tProvider provider = new Provider();\n\t\t\tprovider.setIdentifier(request.getParameter(\"identifier\"));\n\t\t\tprovider.setProviderRole(providerManagementService.getProviderRoleByUuid(request.getParameter(\"providerRole\")));\n\t\t\taccount.addProviderAccount(provider);\n\t\t}\n\t\t\n\t\taccountValidator.validate(account, errors);\n\t\t\n\t\tif (!errors.hasErrors()) {\n\t\t\ttry {\n\t\t\t\taccount.setPassword(user, otherAccountData.getPassword());\n\t\t\t\taccountService.saveAccount(account);\n\t\t\t\tInfoErrorMessageUtil.flashInfoMessage(request.getSession(), \"adminui.account.saved\");\n\t\t\t\treturn \"redirect:/adminui/systemadmin/accounts/manageAccounts.page\";\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\terrors.reject(\"adminui.account.error.save.fail\");\n\t\t\t\t//If the person, provider or user account had been flushed we need to unset the ids because\n\t\t\t\t//they actually don't exist in the DB otherwise the logic in the GSP will see the ids and\n\t\t\t\t//think we are editing and things will break\n\t\t\t\taccount.getPerson().setId(null);\n\t\t\t\tif (otherAccountData.getAddProviderAccount()) {\n\t\t\t\t\taccount.getProviderAccounts().get(0).setProviderId(null);\n\t\t\t\t}\n\t\t\t\tif (otherAccountData.getAddUserAccount()) {\n\t\t\t\t\taccount.getUserAccounts().get(0).setUserId(null);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tsetModelAttributes(model, account, otherAccountData, accountService, administrationService,\n\t\t    providerManagementService, uu, appFrameworkService);\n\t\t\n\t\tsendErrorMessage(errors, model, messageSourceService, request);\n\t\t\n\t\tif (account.getPerson().getPersonId() == null) {\n\t\t\tsetJsonFormData(model, account, otherAccountData);\n\t\t}\n\t\t\n\t\treturn \"systemadmin/accounts/account\";\n\t\t\n\t}",
  "abstract_func_before": "public String post(PageModel VAR_0, @MethodParam(\"getAccount\") @BindParams Account VAR_1, @BindParams User VAR_2,\n\t                   @BindParams OtherAccountData VAR_3, @SpringBean(\"userService\") UserService VAR_4,\n\t                   @SpringBean(\"messageSourceService\") MessageSourceService VAR_5,\n\t                   @SpringBean(\"adminAccountService\") AccountService VAR_6,\n\t                   @SpringBean(\"adminService\") AdministrationService VAR_7,\n\t                   @SpringBean(\"adminUiAccountValidator\") AdminUiAccountValidator VAR_8,\n\t                   @SpringBean(\"providerManagementService\") ProviderManagementService VAR_9,\n\t\t\t\t\t   @SpringBean(\"appFrameworkService\") AppFrameworkService VAR_10,\n\t                   HttpServletRequest VAR_11, UiUtils VAR_12) throws IOException {\n\t\t\n\t\tErrors VAR_13 = new BeanPropertyBindingResult(VAR_1, \"account\");\n\n        List<Extension> VAR_14 =\n\t\t\t\tVAR_10.getExtensionsForCurrentUser(\"userAccount.userPropertyEditFragment\");\n        Map<String, String[]> VAR_15 = VAR_11.getParameterMap();\n        for(Extension VAR_16 : VAR_14) {\n            if (VAR_17.equals(VAR_16.getExtensionParams().get(\"type\").toString(), \"userProperty\")) {\n                String VAR_18 = VAR_16.getExtensionParams().get(\"userPropertyName\").toString();\n                String[] VAR_19 = VAR_15.get(VAR_18);\n                if (VAR_19 != null && VAR_19.length > 0) {\n                    String VAR_20;\n                    if (VAR_18 == \"locationUuid\") {\n                    \tVAR_20 = VAR_21.join(\",\", VAR_19);\n                    } else {\n                        if (VAR_19.length > 1) {\n                            VAR_22.warn(\"Multiple userProperty for a single user type not supported, ignoring extra values\");\n                        }\n                        VAR_20 = VAR_19[0];\n                    }\n                    if (VAR_18 != null && VAR_20 != null) {\n                        VAR_2.setUserProperty(VAR_18, VAR_20);\n                    }\n                }\n            }\n        }\n\n        List<Extension> VAR_23 =\n\t\t\t\tVAR_10.getExtensionsForCurrentUser(\"userAccount.personAttributeEditFragment\");\n        for(Extension VAR_16 : VAR_23) {\n            if (VAR_17.equals(VAR_16.getExtensionParams().get(\"type\").toString(), \"personAttribute\")) {\n                String VAR_24 = VAR_16.getExtensionParams().get(\"formFieldName\").toString();\n                String VAR_25 = VAR_16.getExtensionParams().get(\"uuid\").toString();\n                String[] VAR_19 = VAR_15.get(VAR_24);\n                if (VAR_19 != null && VAR_19.length > 0) {\n                    if (VAR_19.length > 1) {\n                        VAR_22.warn(\"Multiple values for a single person attribute type not supported, ignoring extra values\");\n                    }\n                    String VAR_20 = VAR_19[0];\n                    if (VAR_20 != null) {\n                        PersonAttributeType VAR_26 = VAR_27.getPersonService()\n                                .getPersonAttributeTypeByUuid(VAR_25);\n                        if (VAR_26 != null) {\n                            PersonAttribute VAR_28 = new PersonAttribute(VAR_26, VAR_20);\n                            VAR_1.getPerson().addAttribute(VAR_28);\n                        }\n                    }\n                }\n            }\n        }\n\n\t\tif (VAR_3.getAddUserAccount()) {\n\t\t\t/* COMMENT_0 */\n\t\t\t/* COMMENT_1 */\n\t\t\tVAR_2.addRole(VAR_4.getRoleByUuid(VAR_11.getParameter(\"privilegeLevel\")));\n\t\t\tString[] VAR_29 = VAR_11.getParameterValues(\"capabilities\");\n\t\t\tif (VAR_29 != null) {\n\t\t\t\tfor (String VAR_30 : VAR_29) {\n\t\t\t\t\tVAR_2.addRole(VAR_4.getRoleByUuid(VAR_30));\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tString VAR_31 = VAR_3.getForceChangePassword() ? \"true\" : \"false\";\n\t\t\tVAR_2.setUserProperty(VAR_32.USER_PROPERTY_CHANGE_PASSWORD, VAR_31);\n\t\t\tVAR_1.addUserAccount(VAR_2);\n\t\t}\n\t\tif (VAR_3.getAddProviderAccount()) {\n\t\t\tProvider VAR_33 = new Provider();\n\t\t\tVAR_33.setIdentifier(VAR_11.getParameter(\"identifier\"));\n\t\t\tVAR_33.setProviderRole(VAR_9.getProviderRoleByUuid(VAR_11.getParameter(\"providerRole\")));\n\t\t\tVAR_1.addProviderAccount(VAR_33);\n\t\t}\n\t\t\n\t\tVAR_8.validate(VAR_1, VAR_13);\n\t\t\n\t\tif (!VAR_13.hasErrors()) {\n\t\t\ttry {\n\t\t\t\tVAR_1.setPassword(VAR_2, VAR_3.getPassword());\n\t\t\t\tVAR_6.saveAccount(VAR_1);\n\t\t\t\tVAR_34.flashInfoMessage(VAR_11.getSession(), \"adminui.account.saved\");\n\t\t\t\treturn \"redirect:/adminui/systemadmin/accounts/manageAccounts.page\";\n\t\t\t}\n\t\t\tcatch (Exception VAR_35) {\n\t\t\t\tVAR_13.reject(\"adminui.account.error.save.fail\");\n\t\t\t\t/* COMMENT_2 */\n\t\t\t\t/* COMMENT_3 */\n\t\t\t\t/* COMMENT_4 */\n\t\t\t\tVAR_1.getPerson().setId(null);\n\t\t\t\tif (VAR_3.getAddProviderAccount()) {\n\t\t\t\t\tVAR_1.getProviderAccounts().get(0).setProviderId(null);\n\t\t\t\t}\n\t\t\t\tif (VAR_3.getAddUserAccount()) {\n\t\t\t\t\tVAR_1.getUserAccounts().get(0).setUserId(null);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tsetModelAttributes(VAR_0, VAR_1, VAR_3, VAR_6, VAR_7,\n\t\t    VAR_9, VAR_12, VAR_10);\n\t\t\n\t\tsendErrorMessage(VAR_13, VAR_0, VAR_5, VAR_11);\n\t\t\n\t\tif (VAR_1.getPerson().getPersonId() == null) {\n\t\t\tsetJsonFormData(VAR_0, VAR_1, VAR_3);\n\t\t}\n\t\t\n\t\treturn \"systemadmin/accounts/account\";\n\t\t\n\t}",
  "func_graph_path_before": "openmrs/openmrs-module-adminui/702fbfdac7c4418f23bb5f6452482b4a88020061/AccountPageController.java/vul/before/1.json",
  "func": "public String post(PageModel model, @MethodParam(\"getAccount\") @BindParams Account account, @BindParams User user,\n\t                   @BindParams OtherAccountData otherAccountData, @SpringBean(\"userService\") UserService userService,\n\t                   @SpringBean(\"messageSourceService\") MessageSourceService messageSourceService,\n\t                   @SpringBean(\"adminAccountService\") AccountService accountService,\n\t                   @SpringBean(\"adminService\") AdministrationService administrationService,\n\t                   @SpringBean(\"adminUiAccountValidator\") AdminUiAccountValidator accountValidator,\n\t                   @SpringBean(\"providerManagementService\") ProviderManagementService providerManagementService,\n\t\t\t\t\t   @SpringBean(\"appFrameworkService\") AppFrameworkService appFrameworkService,\n\t                   HttpServletRequest request, UiUtils uu) throws IOException {\n\t\t\n\t\tErrors errors = new BeanPropertyBindingResult(account, \"account\");\n\n        List<Extension> customUserPropertyEditFragments =\n\t\t\t\tappFrameworkService.getExtensionsForCurrentUser(\"userAccount.userPropertyEditFragment\");\n        Map<String, String[]> parameterMap = request.getParameterMap();\n        for(Extension ext : customUserPropertyEditFragments) {\n            if (StringUtils.equals(ext.getExtensionParams().get(\"type\").toString(), \"userProperty\")) {\n                String userPropertyName = ext.getExtensionParams().get(\"userPropertyName\").toString();\n                String[] parameterValues = parameterMap.get(userPropertyName);\n                if (parameterValues != null && parameterValues.length > 0) {\n                    String parameterValue;\n                    if (userPropertyName == \"locationUuid\") {\n                    \tparameterValue = String.join(\",\", parameterValues);\n                    } else {\n                        if (parameterValues.length > 1) {\n                            log.warn(\"Multiple userProperty for a single user type not supported, ignoring extra values\");\n                        }\n                        parameterValue = parameterValues[0];\n                    }\n                    if (userPropertyName != null && parameterValue != null) {\n                        user.setUserProperty(userPropertyName, parameterValue);\n                    }\n                }\n            }\n        }\n\n        List<Extension> customPersonAttributeEditFragments =\n\t\t\t\tappFrameworkService.getExtensionsForCurrentUser(\"userAccount.personAttributeEditFragment\");\n        for(Extension ext : customPersonAttributeEditFragments) {\n            if (StringUtils.equals(ext.getExtensionParams().get(\"type\").toString(), \"personAttribute\")) {\n                String formFiledName = ext.getExtensionParams().get(\"formFieldName\").toString();\n                String personAttributeTypeUuid = ext.getExtensionParams().get(\"uuid\").toString();\n                String[] parameterValues = parameterMap.get(formFiledName);\n                if (parameterValues != null && parameterValues.length > 0) {\n                    if (parameterValues.length > 1) {\n                        log.warn(\"Multiple values for a single person attribute type not supported, ignoring extra values\");\n                    }\n                    String parameterValue = parameterValues[0];\n                    if (parameterValue != null) {\n                        PersonAttributeType personAttributeByUuid = Context.getPersonService()\n                                .getPersonAttributeTypeByUuid(personAttributeTypeUuid);\n                        if (personAttributeByUuid != null) {\n                            PersonAttribute attribute = new PersonAttribute(personAttributeByUuid, parameterValue);\n                            account.getPerson().addAttribute(attribute);\n                        }\n                    }\n                }\n            }\n        }\n\n\t\tif (otherAccountData.getAddUserAccount()) {\n\t\t\t//The StringToRoleConverter emrapi for some reason is taking precedence over the\n\t\t\t//one in uiframework module and it doesn't get role by uuid, so we have to do this\n\t\t\tuser.addRole(userService.getRoleByUuid(request.getParameter(\"privilegeLevel\")));\n\t\t\tString[] uuids = request.getParameterValues(\"capabilities\");\n\t\t\tif (uuids != null) {\n\t\t\t\tfor (String uuid : uuids) {\n\t\t\t\t\tuser.addRole(userService.getRoleByUuid(uuid));\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tString forcePassword = otherAccountData.getForceChangePassword() ? \"true\" : \"false\";\n\t\t\tuser.setUserProperty(OpenmrsConstants.USER_PROPERTY_CHANGE_PASSWORD, forcePassword);\n\t\t\taccount.addUserAccount(user);\n\t\t}\n\t\tif (otherAccountData.getAddProviderAccount()) {\n\t\t\tProvider provider = new Provider();\n\t\t\tprovider.setIdentifier(request.getParameter(\"identifier\"));\n\t\t\tprovider.setProviderRole(providerManagementService.getProviderRoleByUuid(request.getParameter(\"providerRole\")));\n\t\t\taccount.addProviderAccount(provider);\n\t\t}\n\t\t\n\t\taccountValidator.validate(account, errors);\n\t\t\n\t\tif (!errors.hasErrors()) {\n\t\t\ttry {\n\t\t\t\taccount.setPassword(user, otherAccountData.getPassword());\n\t\t\t\taccountService.saveAccount(account);\n\t\t\t\tInfoErrorMessageUtil.flashInfoMessage(request.getSession(), \"adminui.account.saved\");\n\t\t\t\treturn \"redirect:/adminui/systemadmin/accounts/manageAccounts.page\";\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\terrors.reject(\"adminui.account.error.save.fail\");\n\t\t\t\t//If the person, provider or user account had been flushed we need to unset the ids because\n\t\t\t\t//they actually don't exist in the DB otherwise the logic in the GSP will see the ids and\n\t\t\t\t//think we are editing and things will break\n\t\t\t\taccount.getPerson().setId(null);\n\t\t\t\tif (otherAccountData.getAddProviderAccount()) {\n\t\t\t\t\taccount.getProviderAccounts().get(0).setProviderId(null);\n\t\t\t\t}\n\t\t\t\tif (otherAccountData.getAddUserAccount()) {\n\t\t\t\t\taccount.getUserAccounts().get(0).setUserId(null);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tsetModelAttributes(model, account, otherAccountData, accountService, administrationService,\n\t\t    providerManagementService, uu, appFrameworkService);\n\t\t\n\t\tsendErrorMessage(errors, model, messageSourceService, request);\n\t\t\n\t\tif (account.getPerson().getPersonId() == null) {\n\t\t\tsetJsonFormData(model, account, otherAccountData, uu);\n\t\t}\n\t\t\n\t\treturn \"systemadmin/accounts/account\";\n\t\t\n\t}",
  "abstract_func": "public String post(PageModel VAR_0, @MethodParam(\"getAccount\") @BindParams Account VAR_1, @BindParams User VAR_2,\n\t                   @BindParams OtherAccountData VAR_3, @SpringBean(\"userService\") UserService VAR_4,\n\t                   @SpringBean(\"messageSourceService\") MessageSourceService VAR_5,\n\t                   @SpringBean(\"adminAccountService\") AccountService VAR_6,\n\t                   @SpringBean(\"adminService\") AdministrationService VAR_7,\n\t                   @SpringBean(\"adminUiAccountValidator\") AdminUiAccountValidator VAR_8,\n\t                   @SpringBean(\"providerManagementService\") ProviderManagementService VAR_9,\n\t\t\t\t\t   @SpringBean(\"appFrameworkService\") AppFrameworkService VAR_10,\n\t                   HttpServletRequest VAR_11, UiUtils VAR_12) throws IOException {\n\t\t\n\t\tErrors VAR_13 = new BeanPropertyBindingResult(VAR_1, \"account\");\n\n        List<Extension> VAR_14 =\n\t\t\t\tVAR_10.getExtensionsForCurrentUser(\"userAccount.userPropertyEditFragment\");\n        Map<String, String[]> VAR_15 = VAR_11.getParameterMap();\n        for(Extension VAR_16 : VAR_14) {\n            if (VAR_17.equals(VAR_16.getExtensionParams().get(\"type\").toString(), \"userProperty\")) {\n                String VAR_18 = VAR_16.getExtensionParams().get(\"userPropertyName\").toString();\n                String[] VAR_19 = VAR_15.get(VAR_18);\n                if (VAR_19 != null && VAR_19.length > 0) {\n                    String VAR_20;\n                    if (VAR_18 == \"locationUuid\") {\n                    \tVAR_20 = VAR_21.join(\",\", VAR_19);\n                    } else {\n                        if (VAR_19.length > 1) {\n                            VAR_22.warn(\"Multiple userProperty for a single user type not supported, ignoring extra values\");\n                        }\n                        VAR_20 = VAR_19[0];\n                    }\n                    if (VAR_18 != null && VAR_20 != null) {\n                        VAR_2.setUserProperty(VAR_18, VAR_20);\n                    }\n                }\n            }\n        }\n\n        List<Extension> VAR_23 =\n\t\t\t\tVAR_10.getExtensionsForCurrentUser(\"userAccount.personAttributeEditFragment\");\n        for(Extension VAR_16 : VAR_23) {\n            if (VAR_17.equals(VAR_16.getExtensionParams().get(\"type\").toString(), \"personAttribute\")) {\n                String VAR_24 = VAR_16.getExtensionParams().get(\"formFieldName\").toString();\n                String VAR_25 = VAR_16.getExtensionParams().get(\"uuid\").toString();\n                String[] VAR_19 = VAR_15.get(VAR_24);\n                if (VAR_19 != null && VAR_19.length > 0) {\n                    if (VAR_19.length > 1) {\n                        VAR_22.warn(\"Multiple values for a single person attribute type not supported, ignoring extra values\");\n                    }\n                    String VAR_20 = VAR_19[0];\n                    if (VAR_20 != null) {\n                        PersonAttributeType VAR_26 = VAR_27.getPersonService()\n                                .getPersonAttributeTypeByUuid(VAR_25);\n                        if (VAR_26 != null) {\n                            PersonAttribute VAR_28 = new PersonAttribute(VAR_26, VAR_20);\n                            VAR_1.getPerson().addAttribute(VAR_28);\n                        }\n                    }\n                }\n            }\n        }\n\n\t\tif (VAR_3.getAddUserAccount()) {\n\t\t\t/* COMMENT_0 */\n\t\t\t/* COMMENT_1 */\n\t\t\tVAR_2.addRole(VAR_4.getRoleByUuid(VAR_11.getParameter(\"privilegeLevel\")));\n\t\t\tString[] VAR_29 = VAR_11.getParameterValues(\"capabilities\");\n\t\t\tif (VAR_29 != null) {\n\t\t\t\tfor (String VAR_30 : VAR_29) {\n\t\t\t\t\tVAR_2.addRole(VAR_4.getRoleByUuid(VAR_30));\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tString VAR_31 = VAR_3.getForceChangePassword() ? \"true\" : \"false\";\n\t\t\tVAR_2.setUserProperty(VAR_32.USER_PROPERTY_CHANGE_PASSWORD, VAR_31);\n\t\t\tVAR_1.addUserAccount(VAR_2);\n\t\t}\n\t\tif (VAR_3.getAddProviderAccount()) {\n\t\t\tProvider VAR_33 = new Provider();\n\t\t\tVAR_33.setIdentifier(VAR_11.getParameter(\"identifier\"));\n\t\t\tVAR_33.setProviderRole(VAR_9.getProviderRoleByUuid(VAR_11.getParameter(\"providerRole\")));\n\t\t\tVAR_1.addProviderAccount(VAR_33);\n\t\t}\n\t\t\n\t\tVAR_8.validate(VAR_1, VAR_13);\n\t\t\n\t\tif (!VAR_13.hasErrors()) {\n\t\t\ttry {\n\t\t\t\tVAR_1.setPassword(VAR_2, VAR_3.getPassword());\n\t\t\t\tVAR_6.saveAccount(VAR_1);\n\t\t\t\tVAR_34.flashInfoMessage(VAR_11.getSession(), \"adminui.account.saved\");\n\t\t\t\treturn \"redirect:/adminui/systemadmin/accounts/manageAccounts.page\";\n\t\t\t}\n\t\t\tcatch (Exception VAR_35) {\n\t\t\t\tVAR_13.reject(\"adminui.account.error.save.fail\");\n\t\t\t\t/* COMMENT_2 */\n\t\t\t\t/* COMMENT_3 */\n\t\t\t\t/* COMMENT_4 */\n\t\t\t\tVAR_1.getPerson().setId(null);\n\t\t\t\tif (VAR_3.getAddProviderAccount()) {\n\t\t\t\t\tVAR_1.getProviderAccounts().get(0).setProviderId(null);\n\t\t\t\t}\n\t\t\t\tif (VAR_3.getAddUserAccount()) {\n\t\t\t\t\tVAR_1.getUserAccounts().get(0).setUserId(null);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tsetModelAttributes(VAR_0, VAR_1, VAR_3, VAR_6, VAR_7,\n\t\t    VAR_9, VAR_12, VAR_10);\n\t\t\n\t\tsendErrorMessage(VAR_13, VAR_0, VAR_5, VAR_11);\n\t\t\n\t\tif (VAR_1.getPerson().getPersonId() == null) {\n\t\t\tsetJsonFormData(VAR_0, VAR_1, VAR_3, VAR_12);\n\t\t}\n\t\t\n\t\treturn \"systemadmin/accounts/account\";\n\t\t\n\t}",
  "func_graph_path": "openmrs/openmrs-module-adminui/702fbfdac7c4418f23bb5f6452482b4a88020061/AccountPageController.java/vul/after/1.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -110,7 +110,7 @@\n \t\tsendErrorMessage(errors, model, messageSourceService, request);\n \t\t\n \t\tif (account.getPerson().getPersonId() == null) {\n-\t\t\tsetJsonFormData(model, account, otherAccountData);\n+\t\t\tsetJsonFormData(model, account, otherAccountData, uu);\n \t\t}\n \t\t\n \t\treturn \"systemadmin/accounts/account\";",
  "diff_line_info": {
    "deleted_lines": [
      "\t\t\tsetJsonFormData(model, account, otherAccountData);"
    ],
    "added_lines": [
      "\t\t\tsetJsonFormData(model, account, otherAccountData, uu);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/openmrs/openmrs-module-adminui/pull/57",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/openmrs/openmrs-module-adminui/pull/57: 403 Client Error: Forbidden for url: https://api.github.com/repos/openmrs/openmrs-module-adminui/pulls/57",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 0.95"
}