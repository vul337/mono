{
  "cve_id": "CVE-2020-11105",
  "cwe_ids": [
    "CWE-763"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "USCiLab/cereal",
  "commit_msg": "Store a copy of each serialized shared_ptr within the archive to prevent the shared_ptr to be freed to early.\n\nThe archives use the memory address pointed by the shared_ptr as a\nunique id which must not be reused during lifetime of the archive.\nTherefore, the archives stores a copy of it.\nThis problem was also reported as CVE-2020-11105.",
  "commit_hash": "3e8b9cab82dc4a596dc3bcfe7437946395ad782b",
  "git_url": "https://github.com/USCiLab/cereal/commit/3e8b9cab82dc4a596dc3bcfe7437946395ad782b",
  "file_path": "include/cereal/types/memory.hpp",
  "func_name": "CEREAL_SAVE_FUNCTION_NAME",
  "func_before": "inline\n  void CEREAL_SAVE_FUNCTION_NAME( Archive & ar, memory_detail::PtrWrapper<std::shared_ptr<T> const &> const & wrapper )\n  {\n    auto & ptr = wrapper.ptr;\n\n    uint32_t id = ar.registerSharedPointer( ptr.get() );\n    ar( CEREAL_NVP_(\"id\", id) );\n\n    if( id & detail::msb_32bit )\n    {\n      ar( CEREAL_NVP_(\"data\", *ptr) );\n    }\n  }",
  "abstract_func_before": "inline\n  void CEREAL_SAVE_FUNCTION_NAME( Archive & VAR_0, memory_detail::PtrWrapper<std::shared_ptr<T> const &> const & VAR_1 )\n  {\n    auto & VAR_2 = VAR_1.ptr;\n\n    uint32_t VAR_3 = VAR_0.registerSharedPointer( VAR_2.get() );\n    VAR_0( CEREAL_NVP_(\"id\", VAR_3) );\n\n    if( VAR_3 & detail::msb_32bit )\n    {\n      VAR_0( CEREAL_NVP_(\"data\", *VAR_2) );\n    }\n  }",
  "func_graph_path_before": "USCiLab/cereal/3e8b9cab82dc4a596dc3bcfe7437946395ad782b/memory.hpp/vul/before/0.json",
  "func": "inline\n  void CEREAL_SAVE_FUNCTION_NAME( Archive & ar, memory_detail::PtrWrapper<std::shared_ptr<T> const &> const & wrapper )\n  {\n    auto & ptr = wrapper.ptr;\n\n    uint32_t id = ar.registerSharedPointer( ptr );\n    ar( CEREAL_NVP_(\"id\", id) );\n\n    if( id & detail::msb_32bit )\n    {\n      ar( CEREAL_NVP_(\"data\", *ptr) );\n    }\n  }",
  "abstract_func": "inline\n  void CEREAL_SAVE_FUNCTION_NAME( Archive & VAR_0, memory_detail::PtrWrapper<std::shared_ptr<T> const &> const & VAR_1 )\n  {\n    auto & VAR_2 = VAR_1.ptr;\n\n    uint32_t VAR_3 = VAR_0.registerSharedPointer( VAR_2 );\n    VAR_0( CEREAL_NVP_(\"id\", VAR_3) );\n\n    if( VAR_3 & detail::msb_32bit )\n    {\n      VAR_0( CEREAL_NVP_(\"data\", *VAR_2) );\n    }\n  }",
  "func_graph_path": "USCiLab/cereal/3e8b9cab82dc4a596dc3bcfe7437946395ad782b/memory.hpp/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -3,7 +3,7 @@\n   {\n     auto & ptr = wrapper.ptr;\n \n-    uint32_t id = ar.registerSharedPointer( ptr.get() );\n+    uint32_t id = ar.registerSharedPointer( ptr );\n     ar( CEREAL_NVP_(\"id\", id) );\n \n     if( id & detail::msb_32bit )",
  "diff_line_info": {
    "deleted_lines": [
      "    uint32_t id = ar.registerSharedPointer( ptr.get() );"
    ],
    "added_lines": [
      "    uint32_t id = ar.registerSharedPointer( ptr );"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/USCiLab/cereal/pull/667",
  "description": {
    "pr_info": {
      "title": "CVE-2020-11105: Store a copy of each serialized shared_ptr within the archive to prevent the shared_ptr to be freed to early.",
      "number": 667
    },
    "comment": [
      "The archives use the memory address pointed by the shared_ptr as a\r\nunique id which must not be reused during lifetime of the archive.\r\nTherefore, the archives stores a copy of it.\r\nThis problem was also reported as CVE-2020-11105 and #636. This should fix #636.\r\n\r\nMy line of though was the following:\r\nCorrect usage of std::shared_ptr in Cereal requires that the shared_ptr is still valid at the point when all serialization occurs, usually at the end of the lifetime of the archive. It was suggested to document this constraint to the user, but since we are already dealing with smart pointers, I though, hey, let's implement this constraint by storing our own copy of the std::shared_ptr.",
      "Looks good, I'm trying to figure out why the Travis CI did not run - will merge after that is sorted.",
      "Looks like all checks have passed -- can we get this merged?"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.9\n\nThe patch addresses a known security vulnerability (CVE-2020-11105). It fixes an issue where shared_ptr instances were being freed too early, which could lead to security risks. The code changes are consistent with the commit message and vulnerability description."
}