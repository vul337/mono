{
  "cve_id": "CVE-2022-35977",
  "cwe_ids": [
    "CWE-190"
  ],
  "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H",
  "cvss_is_v3": true,
  "repo_name": "redis",
  "commit_msg": "Avoid integer overflows in SETRANGE and SORT (CVE-2022-35977) (#11720)\n\nAuthenticated users issuing specially crafted SETRANGE and SORT(_RO)\r\ncommands can trigger an integer overflow, resulting with Redis attempting\r\nto allocate impossible amounts of memory and abort with an OOM panic.",
  "commit_hash": "1ec82e6e97e1db06a72ca505f9fbf6b981f31ef7",
  "git_url": "https://github.com/redis/redis/commit/1ec82e6e97e1db06a72ca505f9fbf6b981f31ef7",
  "file_path": "src/t_string.c",
  "func_name": "checkStringLength",
  "func_before": "static int checkStringLength(client *c, long long size) {\n    if (!mustObeyClient(c) && size > server.proto_max_bulk_len) {\n        addReplyError(c,\"string exceeds maximum allowed size (proto-max-bulk-len)\");\n        return C_ERR;\n    }\n    return C_OK;\n}",
  "abstract_func_before": "static int checkStringLength(client *VAR_0, long long VAR_1) {\n    if (!mustObeyClient(VAR_0) && VAR_1 > VAR_2.proto_max_bulk_len) {\n        addReplyError(VAR_0,\"string exceeds maximum allowed size (proto-max-bulk-len)\");\n        return VAR_3;\n    }\n    return VAR_4;\n}",
  "func_graph_path_before": "redis/1ec82e6e97e1db06a72ca505f9fbf6b981f31ef7/t_string.c/vul/before/2.json",
  "func": "static int checkStringLength(client *c, long long size, long long append) {\n    if (mustObeyClient(c))\n        return C_OK;\n    /* 'uint64_t' cast is there just to prevent undefined behavior on overflow */\n    long long total = (uint64_t)size + append;\n    /* Test configured max-bulk-len represending a limit of the biggest string object,\n     * and also test for overflow. */\n    if (total > server.proto_max_bulk_len || total < size || total < append) {\n        addReplyError(c,\"string exceeds maximum allowed size (proto-max-bulk-len)\");\n        return C_ERR;\n    }\n    return C_OK;\n}",
  "abstract_func": "static int checkStringLength(client *VAR_0, long long VAR_1, long long VAR_2) {\n    if (mustObeyClient(VAR_0))\n        return VAR_3;\n    /* COMMENT_0 */\n    long long VAR_4 = (uint64_t)VAR_1 + VAR_2;\n    /* COMMENT_1 */\n                                     \n    if (VAR_4 > VAR_5.proto_max_bulk_len || VAR_4 < VAR_1 || VAR_4 < VAR_2) {\n        addReplyError(VAR_0,\"string exceeds maximum allowed size (proto-max-bulk-len)\");\n        return VAR_6;\n    }\n    return VAR_3;\n}",
  "func_graph_path": "redis/1ec82e6e97e1db06a72ca505f9fbf6b981f31ef7/t_string.c/vul/after/2.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,5 +1,11 @@\n-static int checkStringLength(client *c, long long size) {\n-    if (!mustObeyClient(c) && size > server.proto_max_bulk_len) {\n+static int checkStringLength(client *c, long long size, long long append) {\n+    if (mustObeyClient(c))\n+        return C_OK;\n+    /* 'uint64_t' cast is there just to prevent undefined behavior on overflow */\n+    long long total = (uint64_t)size + append;\n+    /* Test configured max-bulk-len represending a limit of the biggest string object,\n+     * and also test for overflow. */\n+    if (total > server.proto_max_bulk_len || total < size || total < append) {\n         addReplyError(c,\"string exceeds maximum allowed size (proto-max-bulk-len)\");\n         return C_ERR;\n     }",
  "diff_line_info": {
    "deleted_lines": [
      "static int checkStringLength(client *c, long long size) {",
      "    if (!mustObeyClient(c) && size > server.proto_max_bulk_len) {"
    ],
    "added_lines": [
      "static int checkStringLength(client *c, long long size, long long append) {",
      "    if (mustObeyClient(c))",
      "        return C_OK;",
      "    /* 'uint64_t' cast is there just to prevent undefined behavior on overflow */",
      "    long long total = (uint64_t)size + append;",
      "    /* Test configured max-bulk-len represending a limit of the biggest string object,",
      "     * and also test for overflow. */",
      "    if (total > server.proto_max_bulk_len || total < size || total < append) {"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/redis/redis/pull/11720",
  "description": {
    "pr_info": {
      "title": "Avoid integer overflows in SETRANGE and SORT (CVE-2022-35977)",
      "number": 11720
    },
    "comment": [
      "Authenticated users issuing specially crafted SETRANGE and SORT(_RO) commands can trigger an integer overflow, resulting with Redis attempting to allocate impossible amounts of memory and abort with an OOM panic."
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 1.0  \n\nThe commit message clearly references a CVE identifier (CVE-2022-35977), indicating a security vulnerability. The code changes address integer overflow issues by adding overflow checks and preventing undefined behavior, which directly mitigate the described security risk. All components align consistently with a security fix."
}