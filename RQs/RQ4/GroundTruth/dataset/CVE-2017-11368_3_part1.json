{
  "cve_id": "CVE-2017-11368",
  "cwe_ids": [
    "CWE-617"
  ],
  "cvss_vector": "AV:N/AC:L/Au:S/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "krb5",
  "commit_msg": "Prevent KDC unset status assertion failures\n\nAssign status values if S4U2Self padata fails to decode, if an\nS4U2Proxy request uses invalid KDC options, or if an S4U2Proxy request\nuses an evidence ticket which does not match the canonicalized request\nserver principal name.  Reported by Samuel Cabrero.\n\nIf a status value is not assigned during KDC processing, default to\n\"UNKNOWN_REASON\" rather than failing an assertion.  This change will\nprevent future denial of service bugs due to similar mistakes, and\nwill allow us to omit assigning status values for unlikely errors such\nas small memory allocation failures.\n\nCVE-2017-11368:\n\nIn MIT krb5 1.7 and later, an authenticated attacker can cause an\nassertion failure in krb5kdc by sending an invalid S4U2Self or\nS4U2Proxy request.\n\n  CVSSv3 Vector: AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H/E:H/RL:O/RC:C\n\nticket: 8599 (new)\ntarget_version: 1.15-next\ntarget_version: 1.14-next\ntags: pullup",
  "commit_hash": "ffb35baac6981f9e8914f8f3bffd37f284b85970",
  "git_url": "https://github.com/krb5/krb5/commit/ffb35baac6981f9e8914f8f3bffd37f284b85970",
  "file_path": "src/kdc/kdc_util.c",
  "func_name": "kdc_process_for_user",
  "func_before": "static krb5_error_code\nkdc_process_for_user(kdc_realm_t *kdc_active_realm,\n                     krb5_pa_data *pa_data,\n                     krb5_keyblock *tgs_session,\n                     krb5_pa_s4u_x509_user **s4u_x509_user,\n                     const char **status)\n{\n    krb5_error_code             code;\n    krb5_pa_for_user            *for_user;\n    krb5_data                   req_data;\n\n    req_data.length = pa_data->length;\n    req_data.data = (char *)pa_data->contents;\n\n    code = decode_krb5_pa_for_user(&req_data, &for_user);\n    if (code)\n        return code;\n\n    code = verify_for_user_checksum(kdc_context, tgs_session, for_user);\n    if (code) {\n        *status = \"INVALID_S4U2SELF_CHECKSUM\";\n        krb5_free_pa_for_user(kdc_context, for_user);\n        return code;\n    }\n\n    *s4u_x509_user = calloc(1, sizeof(krb5_pa_s4u_x509_user));\n    if (*s4u_x509_user == NULL) {\n        krb5_free_pa_for_user(kdc_context, for_user);\n        return ENOMEM;\n    }\n\n    (*s4u_x509_user)->user_id.user = for_user->user;\n    for_user->user = NULL;\n    krb5_free_pa_for_user(kdc_context, for_user);\n\n    return 0;\n}",
  "abstract_func_before": "static krb5_error_code\nkdc_process_for_user(kdc_realm_t *VAR_0,\n                     krb5_pa_data *VAR_1,\n                     krb5_keyblock *VAR_2,\n                     krb5_pa_s4u_x509_user **VAR_3,\n                     const char **VAR_4)\n{\n    krb5_error_code             VAR_5;\n    krb5_pa_for_user            *VAR_6;\n    krb5_data                   VAR_7;\n\n    VAR_7.length = VAR_1->length;\n    VAR_7.data = (char *)VAR_1->contents;\n\n    VAR_5 = decode_krb5_pa_for_user(&VAR_7, &VAR_6);\n    if (VAR_5)\n        return VAR_5;\n\n    VAR_5 = verify_for_user_checksum(VAR_8, VAR_2, VAR_6);\n    if (VAR_5) {\n        *VAR_4 = \"INVALID_S4U2SELF_CHECKSUM\";\n        krb5_free_pa_for_user(VAR_8, VAR_6);\n        return VAR_5;\n    }\n\n    *VAR_3 = calloc(1, sizeof(krb5_pa_s4u_x509_user));\n    if (*VAR_3 == NULL) {\n        krb5_free_pa_for_user(VAR_8, VAR_6);\n        return VAR_9;\n    }\n\n    (*VAR_3)->user_id.user = VAR_6->user;\n    VAR_6->user = NULL;\n    krb5_free_pa_for_user(VAR_8, VAR_6);\n\n    return 0;\n}",
  "func_graph_path_before": "krb5/ffb35baac6981f9e8914f8f3bffd37f284b85970/kdc_util.c/vul/before/2.json",
  "func": "static krb5_error_code\nkdc_process_for_user(kdc_realm_t *kdc_active_realm,\n                     krb5_pa_data *pa_data,\n                     krb5_keyblock *tgs_session,\n                     krb5_pa_s4u_x509_user **s4u_x509_user,\n                     const char **status)\n{\n    krb5_error_code             code;\n    krb5_pa_for_user            *for_user;\n    krb5_data                   req_data;\n\n    req_data.length = pa_data->length;\n    req_data.data = (char *)pa_data->contents;\n\n    code = decode_krb5_pa_for_user(&req_data, &for_user);\n    if (code) {\n        *status = \"DECODE_PA_FOR_USER\";\n        return code;\n    }\n\n    code = verify_for_user_checksum(kdc_context, tgs_session, for_user);\n    if (code) {\n        *status = \"INVALID_S4U2SELF_CHECKSUM\";\n        krb5_free_pa_for_user(kdc_context, for_user);\n        return code;\n    }\n\n    *s4u_x509_user = calloc(1, sizeof(krb5_pa_s4u_x509_user));\n    if (*s4u_x509_user == NULL) {\n        krb5_free_pa_for_user(kdc_context, for_user);\n        return ENOMEM;\n    }\n\n    (*s4u_x509_user)->user_id.user = for_user->user;\n    for_user->user = NULL;\n    krb5_free_pa_for_user(kdc_context, for_user);\n\n    return 0;\n}",
  "abstract_func": "static krb5_error_code\nkdc_process_for_user(kdc_realm_t *VAR_0,\n                     krb5_pa_data *VAR_1,\n                     krb5_keyblock *VAR_2,\n                     krb5_pa_s4u_x509_user **VAR_3,\n                     const char **VAR_4)\n{\n    krb5_error_code             VAR_5;\n    krb5_pa_for_user            *VAR_6;\n    krb5_data                   VAR_7;\n\n    VAR_7.length = VAR_1->length;\n    VAR_7.data = (char *)VAR_1->contents;\n\n    VAR_5 = decode_krb5_pa_for_user(&VAR_7, &VAR_6);\n    if (VAR_5) {\n        *VAR_4 = \"DECODE_PA_FOR_USER\";\n        return VAR_5;\n    }\n\n    VAR_5 = verify_for_user_checksum(VAR_8, VAR_2, VAR_6);\n    if (VAR_5) {\n        *VAR_4 = \"INVALID_S4U2SELF_CHECKSUM\";\n        krb5_free_pa_for_user(VAR_8, VAR_6);\n        return VAR_5;\n    }\n\n    *VAR_3 = calloc(1, sizeof(krb5_pa_s4u_x509_user));\n    if (*VAR_3 == NULL) {\n        krb5_free_pa_for_user(VAR_8, VAR_6);\n        return VAR_9;\n    }\n\n    (*VAR_3)->user_id.user = VAR_6->user;\n    VAR_6->user = NULL;\n    krb5_free_pa_for_user(VAR_8, VAR_6);\n\n    return 0;\n}",
  "func_graph_path": "krb5/ffb35baac6981f9e8914f8f3bffd37f284b85970/kdc_util.c/vul/after/2.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -13,8 +13,10 @@\n     req_data.data = (char *)pa_data->contents;\n \n     code = decode_krb5_pa_for_user(&req_data, &for_user);\n-    if (code)\n+    if (code) {\n+        *status = \"DECODE_PA_FOR_USER\";\n         return code;\n+    }\n \n     code = verify_for_user_checksum(kdc_context, tgs_session, for_user);\n     if (code) {",
  "diff_line_info": {
    "deleted_lines": [
      "    if (code)"
    ],
    "added_lines": [
      "    if (code) {",
      "        *status = \"DECODE_PA_FOR_USER\";",
      "    }"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/krb5/krb5/pull/678",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/krb5/krb5/pull/678: 403 Client Error: Forbidden for url: https://api.github.com/repos/krb5/krb5/pulls/678",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 1.0"
}