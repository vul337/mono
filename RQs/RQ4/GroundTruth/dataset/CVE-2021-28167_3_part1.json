{
  "cve_id": "CVE-2021-28167",
  "cwe_ids": [
    "CWE-909"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:P/A:N",
  "cvss_is_v3": false,
  "repo_name": "eclipse-openj9/openj9",
  "commit_msg": "Correctly load/initialize classes when using ConstantPool\n\n- do not load classes in the \"ifLoaded\" calls\n- never intitialize classes in the natives\n- do not update the constant pool when querying from the natives\n\nFixes: #12016\n\n[ci skip]\n\nSigned-off-by: Graham Chapman <graham_chapman@ca.ibm.com>",
  "commit_hash": "840f3af31a5b8d2d395d9367c826ed756e380fb9",
  "git_url": "https://github.com/eclipse-openj9/openj9/commit/840f3af31a5b8d2d395d9367c826ed756e380fb9",
  "file_path": "runtime/jcl/common/sun_reflect_ConstantPool.c",
  "func_name": "getClassAt",
  "func_before": "static jclass\ngetClassAt(JNIEnv *env, jobject constantPoolOop, jint cpIndex, UDATA resolveFlags)\n{\n\tjclass returnValue = NULL;\n\tJ9VMThread *vmThread = (J9VMThread *) env;\n\tJ9InternalVMFunctions *vmFunctions = vmThread->javaVM->internalVMFunctions;\n\tSunReflectCPResult result = NULL_POINTER_EXCEPTION;\n\n\tif (NULL != constantPoolOop) {\n\t\tJ9Class *clazz = NULL;\n\t\tvmFunctions->internalEnterVMFromJNI(vmThread);\n\t\tresult = getJ9ClassAt(vmThread, constantPoolOop, cpIndex, resolveFlags, &clazz);\n\t\tif (NULL != clazz) {\n\t\t\treturnValue = vmFunctions->j9jni_createLocalRef(env, J9VM_J9CLASS_TO_HEAPCLASS(clazz));\n\t\t}\n\t\tvmFunctions->internalExitVMToJNI(vmThread);\n\t}\n\n\tcheckResult(env, result);\n\n\treturn returnValue;\n}",
  "abstract_func_before": "static jclass\ngetClassAt(JNIEnv *VAR_0, jobject VAR_1, jint VAR_2, UDATA VAR_3)\n{\n\tjclass VAR_4 = NULL;\n\tJ9VMThread *VAR_5 = (J9VMThread *) VAR_0;\n\tJ9InternalVMFunctions *VAR_6 = VAR_5->javaVM->internalVMFunctions;\n\tSunReflectCPResult VAR_7 = VAR_8;\n\n\tif (NULL != VAR_1) {\n\t\tJ9Class *VAR_9 = NULL;\n\t\tVAR_6->internalEnterVMFromJNI(VAR_5);\n\t\tVAR_7 = getJ9ClassAt(VAR_5, VAR_1, VAR_2, VAR_3, &VAR_9);\n\t\tif (NULL != VAR_9) {\n\t\t\tVAR_4 = VAR_6->j9jni_createLocalRef(VAR_0, J9VM_J9CLASS_TO_HEAPCLASS(VAR_9));\n\t\t}\n\t\tVAR_6->internalExitVMToJNI(VAR_5);\n\t}\n\n\tcheckResult(VAR_0, VAR_7);\n\n\treturn VAR_4;\n}",
  "func_graph_path_before": "eclipse-openj9/openj9/840f3af31a5b8d2d395d9367c826ed756e380fb9/sun_reflect_ConstantPool.c/vul/before/4.json",
  "func": "static jclass\ngetClassAt(JNIEnv *env, jobject constantPoolOop, jint cpIndex, UDATA resolveFlags)\n{\n\tjclass returnValue = NULL;\n\tJ9VMThread *vmThread = (J9VMThread *) env;\n\tJ9InternalVMFunctions *vmFunctions = vmThread->javaVM->internalVMFunctions;\n\tSunReflectCPResult result = NULL_POINTER_EXCEPTION;\n\n\tif (NULL != constantPoolOop) {\n\t\tJ9Class *clazz = NULL;\n\t\tvmFunctions->internalEnterVMFromJNI(vmThread);\n\t\tresolveFlags |= (J9_RESOLVE_FLAG_NO_THROW_ON_FAIL | J9_RESOLVE_FLAG_NO_CLASS_INIT | J9_RESOLVE_FLAG_NO_CP_UPDATE);\n\t\tresult = getJ9ClassAt(vmThread, constantPoolOop, cpIndex, resolveFlags, &clazz);\n\t\tif (NULL != clazz) {\n\t\t\treturnValue = vmFunctions->j9jni_createLocalRef(env, J9VM_J9CLASS_TO_HEAPCLASS(clazz));\n\t\t}\n\t\tvmFunctions->internalExitVMToJNI(vmThread);\n\t}\n\n\tcheckResult(env, result);\n\n\treturn returnValue;\n}",
  "abstract_func": "static jclass\ngetClassAt(JNIEnv *VAR_0, jobject VAR_1, jint VAR_2, UDATA VAR_3)\n{\n\tjclass VAR_4 = NULL;\n\tJ9VMThread *VAR_5 = (J9VMThread *) VAR_0;\n\tJ9InternalVMFunctions *VAR_6 = VAR_5->javaVM->internalVMFunctions;\n\tSunReflectCPResult VAR_7 = VAR_8;\n\n\tif (NULL != VAR_1) {\n\t\tJ9Class *VAR_9 = NULL;\n\t\tVAR_6->internalEnterVMFromJNI(VAR_5);\n\t\tVAR_3 |= (VAR_10 | VAR_11 | VAR_12);\n\t\tVAR_7 = getJ9ClassAt(VAR_5, VAR_1, VAR_2, VAR_3, &VAR_9);\n\t\tif (NULL != VAR_9) {\n\t\t\tVAR_4 = VAR_6->j9jni_createLocalRef(VAR_0, J9VM_J9CLASS_TO_HEAPCLASS(VAR_9));\n\t\t}\n\t\tVAR_6->internalExitVMToJNI(VAR_5);\n\t}\n\n\tcheckResult(VAR_0, VAR_7);\n\n\treturn VAR_4;\n}",
  "func_graph_path": "eclipse-openj9/openj9/840f3af31a5b8d2d395d9367c826ed756e380fb9/sun_reflect_ConstantPool.c/vul/after/4.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -9,6 +9,7 @@\n \tif (NULL != constantPoolOop) {\n \t\tJ9Class *clazz = NULL;\n \t\tvmFunctions->internalEnterVMFromJNI(vmThread);\n+\t\tresolveFlags |= (J9_RESOLVE_FLAG_NO_THROW_ON_FAIL | J9_RESOLVE_FLAG_NO_CLASS_INIT | J9_RESOLVE_FLAG_NO_CP_UPDATE);\n \t\tresult = getJ9ClassAt(vmThread, constantPoolOop, cpIndex, resolveFlags, &clazz);\n \t\tif (NULL != clazz) {\n \t\t\treturnValue = vmFunctions->j9jni_createLocalRef(env, J9VM_J9CLASS_TO_HEAPCLASS(clazz));",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "\t\tresolveFlags |= (J9_RESOLVE_FLAG_NO_THROW_ON_FAIL | J9_RESOLVE_FLAG_NO_CLASS_INIT | J9_RESOLVE_FLAG_NO_CP_UPDATE);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/eclipse-openj9/openj9/pull/12148",
  "description": {
    "pr_info": {
      "title": "Correctly load/initialize classes when using ConstantPool",
      "number": 12148
    },
    "comment": [
      "- do not load classes in the \"ifLoaded\" calls\r\n- never intitialize classes in the natives\r\n- do not update the constant pool when querying from the natives\r\n\r\nFixes: #12016\r\n\r\n[ci skip]\r\n\r\nSigned-off-by: Graham Chapman <graham_chapman@ca.ibm.com>",
      "jenkins test sanity,extended zlinux jdk11",
      "jenkins compile win jdk8",
      "@gacholio can you please open another PR for the 0.26 stream",
      "https://github.com/eclipse/openj9/pull/12164"
    ]
  },
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Defect Remediation & Feature Upgrades  \n**Confidence:** 0.9"
}