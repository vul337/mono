{
  "cve_id": "CVE-2023-42799",
  "cwe_ids": [
    "CWE-120"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H",
  "cvss_is_v3": true,
  "repo_name": "moonlight-stream/moonlight-common-c",
  "commit_msg": "Fix buffer overflow in parseUrlAddrFromRtspUrlString (CVE-2023-42799)",
  "commit_hash": "02b7742f4d19631024bd766bd2bb76715780004e",
  "git_url": "https://github.com/moonlight-stream/moonlight-common-c/commit/02b7742f4d19631024bd766bd2bb76715780004e",
  "file_path": "src/RtspConnection.c",
  "func_name": "performRtspHandshake",
  "func_before": "int performRtspHandshake(PSERVER_INFORMATION serverInfo) {\n    int ret;\n\n    LC_ASSERT(RtspPortNumber != 0);\n\n    // Initialize global state\n    useEnet = (AppVersionQuad[0] >= 5) && (AppVersionQuad[0] <= 7) && (AppVersionQuad[2] < 404);\n    currentSeqNumber = 1;\n    hasSessionId = false;\n    controlStreamId = APP_VERSION_AT_LEAST(7, 1, 431) ? \"streamid=control/13/0\" : \"streamid=control/1/0\";\n    AudioEncryptionEnabled = false;\n\n    // HACK: In order to get GFE to respect our request for a lower audio bitrate, we must\n    // fake our target address so it doesn't match any of the PC's local interfaces. It seems\n    // that the only way to get it to give you \"low quality\" stereo audio nowadays is if it\n    // thinks you are remote (target address != any local address).\n    //\n    // We will enable high quality audio if the following are all true:\n    // 1. Video bitrate is higher than 15 Mbps (to ensure most bandwidth is reserved for video)\n    // 2. The audio decoder has not declared that it is slow\n    // 3. The stream is either local or not surround sound (to prevent MTU issues over the Internet)\n    LC_ASSERT(StreamConfig.streamingRemotely != STREAM_CFG_AUTO);\n    if (OriginalVideoBitrate >= HIGH_AUDIO_BITRATE_THRESHOLD &&\n            (AudioCallbacks.capabilities & CAPABILITY_SLOW_OPUS_DECODER) == 0 &&\n            (StreamConfig.streamingRemotely != STREAM_CFG_REMOTE || CHANNEL_COUNT_FROM_AUDIO_CONFIGURATION(StreamConfig.audioConfiguration) <= 2)) {\n        // If we have an RTSP URL string and it was successfully parsed, use that string\n        if (serverInfo->rtspSessionUrl != NULL && parseUrlAddrFromRtspUrlString(serverInfo->rtspSessionUrl, urlAddr)) {\n            strcpy(rtspTargetUrl, serverInfo->rtspSessionUrl);\n        }\n        else {\n            // If an RTSP URL string was not provided or failed to parse, we will construct one now as best we can.\n            //\n            // NB: If the remote address is not a LAN address, the host will likely not enable high quality\n            // audio since it only does that for local streaming normally. We can avoid this limitation,\n            // but only if the caller gave us the RTSP session URL that it received from the host during launch.\n            addrToUrlSafeString(&RemoteAddr, urlAddr, sizeof(urlAddr));\n            sprintf(rtspTargetUrl, \"rtsp%s://%s:%u\", useEnet ? \"ru\" : \"\", urlAddr, RtspPortNumber);\n        }\n    }\n    else {\n        PltSafeStrcpy(urlAddr, sizeof(urlAddr), \"0.0.0.0\");\n        sprintf(rtspTargetUrl, \"rtsp%s://%s:%u\", useEnet ? \"ru\" : \"\", urlAddr, RtspPortNumber);\n    }\n\n    switch (AppVersionQuad[0]) {\n        case 3:\n            rtspClientVersion = 10;\n            break;\n        case 4:\n            rtspClientVersion = 11;\n            break;\n        case 5:\n            rtspClientVersion = 12;\n            break;\n        case 6:\n            // Gen 6 has never been seen in the wild\n            rtspClientVersion = 13;\n            break;\n        case 7:\n        default:\n            rtspClientVersion = 14;\n            break;\n    }\n    \n    // Setup ENet if required by this GFE version\n    if (useEnet) {\n        ENetAddress address;\n        ENetEvent event;\n        \n        enet_address_set_address(&address, (struct sockaddr *)&RemoteAddr, RemoteAddrLen);\n        enet_address_set_port(&address, RtspPortNumber);\n        \n        // Create a client that can use 1 outgoing connection and 1 channel\n        client = enet_host_create(RemoteAddr.ss_family, NULL, 1, 1, 0, 0);\n        if (client == NULL) {\n            return -1;\n        }\n    \n        // Connect to the host\n        peer = enet_host_connect(client, &address, 1, 0);\n        if (peer == NULL) {\n            enet_host_destroy(client);\n            client = NULL;\n            return -1;\n        }\n    \n        // Wait for the connect to complete\n        if (serviceEnetHost(client, &event, RTSP_CONNECT_TIMEOUT_SEC * 1000) <= 0 ||\n            event.type != ENET_EVENT_TYPE_CONNECT) {\n            Limelog(\"RTSP: Failed to connect to UDP port %u\\n\", RtspPortNumber);\n            enet_peer_reset(peer);\n            peer = NULL;\n            enet_host_destroy(client);\n            client = NULL;\n            return -1;\n        }\n\n        // Ensure the connect verify ACK is sent immediately\n        enet_host_flush(client);\n    }\n\n    {\n        RTSP_MESSAGE response;\n        int error = -1;\n\n        if (!requestOptions(&response, &error)) {\n            Limelog(\"RTSP OPTIONS request failed: %d\\n\", error);\n            ret = error;\n            goto Exit;\n        }\n\n        if (response.message.response.statusCode != 200) {\n            Limelog(\"RTSP OPTIONS request failed: %d\\n\",\n                response.message.response.statusCode);\n            ret = response.message.response.statusCode;\n            goto Exit;\n        }\n\n        freeMessage(&response);\n    }\n\n    {\n        RTSP_MESSAGE response;\n        int error = -1;\n\n        if (!requestDescribe(&response, &error)) {\n            Limelog(\"RTSP DESCRIBE request failed: %d\\n\", error);\n            ret = error;\n            goto Exit;\n        }\n\n        if (response.message.response.statusCode != 200) {\n            Limelog(\"RTSP DESCRIBE request failed: %d\\n\",\n                response.message.response.statusCode);\n            ret = response.message.response.statusCode;\n            goto Exit;\n        }\n        \n        if ((StreamConfig.supportedVideoFormats & VIDEO_FORMAT_MASK_AV1) && strstr(response.payload, \"AV1/90000\")) {\n            if ((serverInfo->serverCodecModeSupport & SCM_AV1_MAIN10) && (StreamConfig.supportedVideoFormats & VIDEO_FORMAT_AV1_MAIN10)) {\n                NegotiatedVideoFormat = VIDEO_FORMAT_AV1_MAIN10;\n            }\n            else {\n                NegotiatedVideoFormat = VIDEO_FORMAT_AV1_MAIN8;\n\n                // Apply bitrate adjustment for SDR AV1 if the client requested one\n                if (StreamConfig.av1BitratePercentageMultiplier != 0) {\n                    StreamConfig.bitrate *= StreamConfig.av1BitratePercentageMultiplier;\n                    StreamConfig.bitrate /= 100;\n                }\n            }\n        }\n        else if ((StreamConfig.supportedVideoFormats & VIDEO_FORMAT_MASK_H265) && strstr(response.payload, \"sprop-parameter-sets=AAAAAU\")) {\n            // The RTSP DESCRIBE reply will contain a collection of SDP media attributes that\n            // describe the various supported video stream formats and include the SPS, PPS,\n            // and VPS (if applicable). We will use this information to determine whether the\n            // server can support HEVC. For some reason, they still set the MIME type of the HEVC\n            // format to H264, so we can't just look for the HEVC MIME type. What we'll do instead is\n            // look for the base 64 encoded VPS NALU prefix that is unique to the HEVC bitstream.\n            if ((serverInfo->serverCodecModeSupport & SCM_HEVC_MAIN10) && (StreamConfig.supportedVideoFormats & VIDEO_FORMAT_H265_MAIN10)) {\n                NegotiatedVideoFormat = VIDEO_FORMAT_H265_MAIN10;\n            }\n            else {\n                NegotiatedVideoFormat = VIDEO_FORMAT_H265;\n\n                // Apply bitrate adjustment for SDR HEVC if the client requested one\n                if (StreamConfig.hevcBitratePercentageMultiplier != 0) {\n                    StreamConfig.bitrate *= StreamConfig.hevcBitratePercentageMultiplier;\n                    StreamConfig.bitrate /= 100;\n                }\n            }\n        }\n        else {\n            NegotiatedVideoFormat = VIDEO_FORMAT_H264;\n\n            // Dimensions over 4096 are only supported with HEVC on NVENC\n            if (StreamConfig.width > 4096 || StreamConfig.height > 4096) {\n                Limelog(\"WARNING: Host PC doesn't support HEVC. Streaming at resolutions above 4K using H.264 will likely fail!\\n\");\n            }\n        }\n\n        // Look for the SDP attribute that indicates we're dealing with a server that supports RFI\n        ReferenceFrameInvalidationSupported = strstr(response.payload, \"x-nv-video[0].refPicInvalidation\") != NULL;\n        if (!ReferenceFrameInvalidationSupported) {\n            Limelog(\"Reference frame invalidation is not supported by this host\\n\");\n        }\n\n        // Look for the Sunshine feature flags in the SDP attributes\n        if (!parseSdpAttributeToUInt(response.payload, \"x-ss-general.featureFlags\", &SunshineFeatureFlags)) {\n            SunshineFeatureFlags = 0;\n        }\n\n        // Parse the Opus surround parameters out of the RTSP DESCRIBE response.\n        ret = parseOpusConfigurations(&response);\n        if (ret != 0) {\n            goto Exit;\n        }\n\n        freeMessage(&response);\n    }\n\n    {\n        RTSP_MESSAGE response;\n        char* sessionId;\n        char* pingPayload;\n        int error = -1;\n        char* strtokCtx = NULL;\n\n        if (!setupStream(&response,\n                         AppVersionQuad[0] >= 5 ? \"streamid=audio/0/0\" : \"streamid=audio\",\n                         &error)) {\n            Limelog(\"RTSP SETUP streamid=audio request failed: %d\\n\", error);\n            ret = error;\n            goto Exit;\n        }\n\n        if (response.message.response.statusCode != 200) {\n            Limelog(\"RTSP SETUP streamid=audio request failed: %d\\n\",\n                response.message.response.statusCode);\n            ret = response.message.response.statusCode;\n            goto Exit;\n        }\n\n        // Parse the audio port out of the RTSP SETUP response\n        LC_ASSERT(AudioPortNumber == 0);\n        if (!parseServerPortFromTransport(&response, &AudioPortNumber)) {\n            // Use the well known port if parsing fails\n            AudioPortNumber = 48000;\n\n            Limelog(\"Audio port: %u (RTSP parsing failed)\\n\", AudioPortNumber);\n        }\n        else {\n            Limelog(\"Audio port: %u\\n\", AudioPortNumber);\n        }\n\n        // Parse the Sunshine ping payload protocol extension if present\n        memset(&AudioPingPayload, 0, sizeof(AudioPingPayload));\n        pingPayload = getOptionContent(response.options, \"X-SS-Ping-Payload\");\n        if (pingPayload != NULL && strlen(pingPayload) == sizeof(AudioPingPayload.payload)) {\n            memcpy(AudioPingPayload.payload, pingPayload, sizeof(AudioPingPayload.payload));\n        }\n\n        // Let the audio stream know the port number is now finalized.\n        // NB: This is needed because audio stream init happens before RTSP,\n        // which is not the case for the video stream.\n        notifyAudioPortNegotiationComplete();\n\n        sessionId = getOptionContent(response.options, \"Session\");\n\n        if (sessionId == NULL) {\n            Limelog(\"RTSP SETUP streamid=audio is missing session attribute\\n\");\n            ret = -1;\n            goto Exit;\n        }\n\n        // Given there is a non-null session id, get the\n        // first token of the session until \";\", which \n        // resolves any 454 session not found errors on\n        // standard RTSP server implementations.\n        // (i.e - sessionId = \"DEADBEEFCAFE;timeout = 90\") \n        sessionIdString = strdup(strtok_r(sessionId, \";\", &strtokCtx));\n        if (sessionIdString == NULL) {\n            Limelog(\"Failed to duplicate session ID string\\n\");\n            ret = -1;\n            goto Exit;\n        }\n\n        hasSessionId = true;\n\n        freeMessage(&response);\n    }\n\n    {\n        RTSP_MESSAGE response;\n        int error = -1;\n        char* pingPayload;\n\n        if (!setupStream(&response,\n                         AppVersionQuad[0] >= 5 ? \"streamid=video/0/0\" : \"streamid=video\",\n                         &error)) {\n            Limelog(\"RTSP SETUP streamid=video request failed: %d\\n\", error);\n            ret = error;\n            goto Exit;\n        }\n\n        if (response.message.response.statusCode != 200) {\n            Limelog(\"RTSP SETUP streamid=video request failed: %d\\n\",\n                response.message.response.statusCode);\n            ret = response.message.response.statusCode;\n            goto Exit;\n        }\n\n        // Parse the Sunshine ping payload protocol extension if present\n        memset(&VideoPingPayload, 0, sizeof(VideoPingPayload));\n        pingPayload = getOptionContent(response.options, \"X-SS-Ping-Payload\");\n        if (pingPayload != NULL && strlen(pingPayload) == sizeof(VideoPingPayload.payload)) {\n            memcpy(VideoPingPayload.payload, pingPayload, sizeof(VideoPingPayload.payload));\n        }\n\n        // Parse the video port out of the RTSP SETUP response\n        LC_ASSERT(VideoPortNumber == 0);\n        if (!parseServerPortFromTransport(&response, &VideoPortNumber)) {\n            // Use the well known port if parsing fails\n            VideoPortNumber = 47998;\n\n            Limelog(\"Video port: %u (RTSP parsing failed)\\n\", VideoPortNumber);\n        }\n        else {\n            Limelog(\"Video port: %u\\n\", VideoPortNumber);\n        }\n\n        freeMessage(&response);\n    }\n    \n    if (AppVersionQuad[0] >= 5) {\n        RTSP_MESSAGE response;\n        int error = -1;\n\n        if (!setupStream(&response,\n                         controlStreamId,\n                         &error)) {\n            Limelog(\"RTSP SETUP streamid=control request failed: %d\\n\", error);\n            ret = error;\n            goto Exit;\n        }\n\n        if (response.message.response.statusCode != 200) {\n            Limelog(\"RTSP SETUP streamid=control request failed: %d\\n\",\n                response.message.response.statusCode);\n            ret = response.message.response.statusCode;\n            goto Exit;\n        }\n\n        // Parse the control port out of the RTSP SETUP response\n        LC_ASSERT(ControlPortNumber == 0);\n        if (!parseServerPortFromTransport(&response, &ControlPortNumber)) {\n            // Use the well known port if parsing fails\n            ControlPortNumber = 47999;\n\n            Limelog(\"Control port: %u (RTSP parsing failed)\\n\", ControlPortNumber);\n        }\n        else {\n            Limelog(\"Control port: %u\\n\", ControlPortNumber);\n        }\n\n        freeMessage(&response);\n    }\n\n    {\n        RTSP_MESSAGE response;\n        int error = -1;\n\n        if (!sendVideoAnnounce(&response, &error)) {\n            Limelog(\"RTSP ANNOUNCE request failed: %d\\n\", error);\n            ret = error;\n            goto Exit;\n        }\n\n        if (response.message.response.statusCode != 200) {\n            Limelog(\"RTSP ANNOUNCE request failed: %d\\n\",\n                response.message.response.statusCode);\n            ret = response.message.response.statusCode;\n            goto Exit;\n        }\n\n        freeMessage(&response);\n    }\n\n    // GFE 3.22 uses a single PLAY message\n    if (APP_VERSION_AT_LEAST(7, 1, 431)) {\n        RTSP_MESSAGE response;\n        int error = -1;\n\n        if (!playStream(&response, \"/\", &error)) {\n            Limelog(\"RTSP PLAY request failed: %d\\n\", error);\n            ret = error;\n            goto Exit;\n        }\n\n        if (response.message.response.statusCode != 200) {\n            Limelog(\"RTSP PLAY failed: %d\\n\",\n                response.message.response.statusCode);\n            ret = response.message.response.statusCode;\n            goto Exit;\n        }\n\n        freeMessage(&response);\n    }\n    else {\n        {\n            RTSP_MESSAGE response;\n            int error = -1;\n\n            if (!playStream(&response, \"streamid=video\", &error)) {\n                Limelog(\"RTSP PLAY streamid=video request failed: %d\\n\", error);\n                ret = error;\n                goto Exit;\n            }\n\n            if (response.message.response.statusCode != 200) {\n                Limelog(\"RTSP PLAY streamid=video failed: %d\\n\",\n                    response.message.response.statusCode);\n                ret = response.message.response.statusCode;\n                goto Exit;\n            }\n\n            freeMessage(&response);\n        }\n\n        {\n            RTSP_MESSAGE response;\n            int error = -1;\n\n            if (!playStream(&response, \"streamid=audio\", &error)) {\n                Limelog(\"RTSP PLAY streamid=audio request failed: %d\\n\", error);\n                ret = error;\n                goto Exit;\n            }\n\n            if (response.message.response.statusCode != 200) {\n                Limelog(\"RTSP PLAY streamid=audio failed: %d\\n\",\n                    response.message.response.statusCode);\n                ret = response.message.response.statusCode;\n                goto Exit;\n            }\n\n            freeMessage(&response);\n        }\n    }\n\n    \n    ret = 0;\n    \nExit:\n    // Cleanup the ENet stuff\n    if (useEnet) {\n        if (peer != NULL) {\n            enet_peer_disconnect_now(peer, 0);\n            peer = NULL;\n        }\n        \n        if (client != NULL) {\n            enet_host_destroy(client);\n            client = NULL;\n        }\n    }\n\n    if (sessionIdString != NULL) {\n        free(sessionIdString);\n        sessionIdString = NULL;\n    }\n\n    return ret;\n}",
  "abstract_func_before": "int performRtspHandshake(PSERVER_INFORMATION VAR_0) {\n    int VAR_1;\n\n    LC_ASSERT(VAR_2 != 0);\n\n    /* COMMENT_0 */\n    VAR_3 = (VAR_4[0] >= 5) && (VAR_4[0] <= 7) && (VAR_4[2] < 404);\n    VAR_5 = 1;\n    VAR_6 = false;\n    VAR_7 = APP_VERSION_AT_LEAST(7, 1, 431) ? \"streamid=control/13/0\" : \"streamid=control/1/0\";\n    VAR_8 = false;\n\n    /* COMMENT_1 */\n    /* COMMENT_2 */\n    /* COMMENT_3 */\n    /* COMMENT_4 */\n    /* COMMENT_5 */\n    /* COMMENT_6 */\n    /* COMMENT_7 */\n    /* COMMENT_8 */\n    /* COMMENT_9 */\n    LC_ASSERT(VAR_9.streamingRemotely != VAR_10);\n    if (VAR_11 >= VAR_12 &&\n            (VAR_13.capabilities & VAR_14) == 0 &&\n            (VAR_9.streamingRemotely != VAR_15 || CHANNEL_COUNT_FROM_AUDIO_CONFIGURATION(VAR_9.audioConfiguration) <= 2)) {\n        /* COMMENT_10 */\n        if (VAR_0->rtspSessionUrl != NULL && parseUrlAddrFromRtspUrlString(VAR_0->rtspSessionUrl, VAR_16)) {\n            strcpy(VAR_17, VAR_0->rtspSessionUrl);\n        }\n        else {\n            /* COMMENT_11 */\n            /* COMMENT_5 */\n            /* COMMENT_12 */\n            /* COMMENT_13 */\n            /* COMMENT_14 */\n            addrToUrlSafeString(&VAR_18, VAR_16, sizeof(VAR_16));\n            sprintf(VAR_17, \"rtsp%s://%s:%u\", VAR_3 ? \"ru\" : \"\", VAR_16, VAR_2);\n        }\n    }\n    else {\n        PltSafeStrcpy(VAR_16, sizeof(VAR_16), \"0.0.0.0\");\n        sprintf(VAR_17, \"rtsp%s://%s:%u\", VAR_3 ? \"ru\" : \"\", VAR_16, VAR_2);\n    }\n\n    switch (VAR_4[0]) {\n        case 3:\n            VAR_19 = 10;\n            break;\n        case 4:\n            VAR_19 = 11;\n            break;\n        case 5:\n            VAR_19 = 12;\n            break;\n        case 6:\n            /* COMMENT_15 */\n            VAR_19 = 13;\n            break;\n        case 7:\n        default:\n            VAR_19 = 14;\n            break;\n    }\n    \n    /* COMMENT_16 */\n    if (VAR_3) {\n        ENetAddress VAR_20;\n        ENetEvent VAR_21;\n        \n        enet_address_set_address(&VAR_20, (struct sockaddr *)&VAR_18, VAR_22);\n        enet_address_set_port(&VAR_20, VAR_2);\n        \n        /* COMMENT_17 */\n        VAR_23 = enet_host_create(VAR_18.ss_family, NULL, 1, 1, 0, 0);\n        if (VAR_23 == NULL) {\n            return -1;\n        }\n    \n        /* COMMENT_18 */\n        VAR_24 = enet_host_connect(VAR_23, &VAR_20, 1, 0);\n        if (VAR_24 == NULL) {\n            enet_host_destroy(VAR_23);\n            VAR_23 = NULL;\n            return -1;\n        }\n    \n        /* COMMENT_19 */\n        if (serviceEnetHost(VAR_23, &VAR_21, VAR_25 * 1000) <= 0 ||\n            VAR_21.type != VAR_26) {\n            Limelog(\"RTSP: Failed to connect to UDP port %u\\n\", VAR_2);\n            enet_peer_reset(VAR_24);\n            VAR_24 = NULL;\n            enet_host_destroy(VAR_23);\n            VAR_23 = NULL;\n            return -1;\n        }\n\n        /* COMMENT_20 */\n        enet_host_flush(VAR_23);\n    }\n\n    {\n        RTSP_MESSAGE VAR_27;\n        int VAR_28 = -1;\n\n        if (!requestOptions(&VAR_27, &VAR_28)) {\n            Limelog(\"RTSP OPTIONS request failed: %d\\n\", VAR_28);\n            VAR_1 = VAR_28;\n            goto Exit;\n        }\n\n        if (VAR_27.message.response.statusCode != 200) {\n            Limelog(\"RTSP OPTIONS request failed: %d\\n\",\n                VAR_27.message.response.statusCode);\n            VAR_1 = VAR_27.message.response.statusCode;\n            goto Exit;\n        }\n\n        freeMessage(&VAR_27);\n    }\n\n    {\n        RTSP_MESSAGE VAR_27;\n        int VAR_28 = -1;\n\n        if (!requestDescribe(&VAR_27, &VAR_28)) {\n            Limelog(\"RTSP DESCRIBE request failed: %d\\n\", VAR_28);\n            VAR_1 = VAR_28;\n            goto Exit;\n        }\n\n        if (VAR_27.message.response.statusCode != 200) {\n            Limelog(\"RTSP DESCRIBE request failed: %d\\n\",\n                VAR_27.message.response.statusCode);\n            VAR_1 = VAR_27.message.response.statusCode;\n            goto Exit;\n        }\n        \n        if ((VAR_9.supportedVideoFormats & VAR_29) && strstr(VAR_27.payload, \"AV1/90000\")) {\n            if ((VAR_0->serverCodecModeSupport & VAR_30) && (VAR_9.supportedVideoFormats & VAR_31)) {\n                VAR_32 = VAR_31;\n            }\n            else {\n                VAR_32 = VAR_33;\n\n                /* COMMENT_21 */\n                if (VAR_9.av1BitratePercentageMultiplier != 0) {\n                    VAR_9.bitrate *= VAR_9.av1BitratePercentageMultiplier;\n                    VAR_9.bitrate /= 100;\n                }\n            }\n        }\n        else if ((VAR_9.supportedVideoFormats & VAR_34) && strstr(VAR_27.payload, \"sprop-parameter-sets=AAAAAU\")) {\n            /* COMMENT_22 */\n            /* COMMENT_23 */\n            /* COMMENT_24 */\n            /* COMMENT_25 */\n            /* COMMENT_26 */\n            /* COMMENT_27 */\n            if ((VAR_0->serverCodecModeSupport & VAR_35) && (VAR_9.supportedVideoFormats & VAR_36)) {\n                VAR_32 = VAR_36;\n            }\n            else {\n                VAR_32 = VAR_37;\n\n                /* COMMENT_28 */\n                if (VAR_9.hevcBitratePercentageMultiplier != 0) {\n                    VAR_9.bitrate *= VAR_9.hevcBitratePercentageMultiplier;\n                    VAR_9.bitrate /= 100;\n                }\n            }\n        }\n        else {\n            VAR_32 = VAR_38;\n\n            /* COMMENT_29 */\n            if (VAR_9.width > 4096 || VAR_9.height > 4096) {\n                Limelog(\"WARNING: Host PC doesn't support HEVC. Streaming at resolutions above 4K using H.264 will likely fail!\\n\");\n            }\n        }\n\n        /* COMMENT_30 */\n        VAR_39 = strstr(VAR_27.payload, \"x-nv-video[0].refPicInvalidation\") != NULL;\n        if (!VAR_39) {\n            Limelog(\"Reference frame invalidation is not supported by this host\\n\");\n        }\n\n        /* COMMENT_31 */\n        if (!parseSdpAttributeToUInt(VAR_27.payload, \"x-ss-general.featureFlags\", &VAR_40)) {\n            VAR_40 = 0;\n        }\n\n        /* COMMENT_32 */\n        VAR_1 = parseOpusConfigurations(&VAR_27);\n        if (VAR_1 != 0) {\n            goto Exit;\n        }\n\n        freeMessage(&VAR_27);\n    }\n\n    {\n        RTSP_MESSAGE VAR_27;\n        char* VAR_41;\n        char* VAR_42;\n        int VAR_28 = -1;\n        char* VAR_43 = NULL;\n\n        if (!setupStream(&VAR_27,\n                         VAR_4[0] >= 5 ? \"streamid=audio/0/0\" : \"streamid=audio\",\n                         &VAR_28)) {\n            Limelog(\"RTSP SETUP streamid=audio request failed: %d\\n\", VAR_28);\n            VAR_1 = VAR_28;\n            goto Exit;\n        }\n\n        if (VAR_27.message.response.statusCode != 200) {\n            Limelog(\"RTSP SETUP streamid=audio request failed: %d\\n\",\n                VAR_27.message.response.statusCode);\n            VAR_1 = VAR_27.message.response.statusCode;\n            goto Exit;\n        }\n\n        /* COMMENT_33 */\n        LC_ASSERT(VAR_44 == 0);\n        if (!parseServerPortFromTransport(&VAR_27, &VAR_44)) {\n            /* COMMENT_34 */\n            VAR_44 = 48000;\n\n            Limelog(\"Audio port: %u (RTSP parsing failed)\\n\", VAR_44);\n        }\n        else {\n            Limelog(\"Audio port: %u\\n\", VAR_44);\n        }\n\n        /* COMMENT_35 */\n        memset(&VAR_45, 0, sizeof(VAR_45));\n        VAR_42 = getOptionContent(VAR_27.options, \"X-SS-Ping-Payload\");\n        if (VAR_42 != NULL && strlen(VAR_42) == sizeof(VAR_45.payload)) {\n            memcpy(VAR_45.payload, VAR_42, sizeof(VAR_45.payload));\n        }\n\n        /* COMMENT_36 */\n        /* COMMENT_37 */\n        /* COMMENT_38 */\n        notifyAudioPortNegotiationComplete();\n\n        VAR_41 = getOptionContent(VAR_27.options, \"Session\");\n\n        if (VAR_41 == NULL) {\n            Limelog(\"RTSP SETUP streamid=audio is missing session attribute\\n\");\n            VAR_1 = -1;\n            goto Exit;\n        }\n\n        /* COMMENT_39 */\n        /* COMMENT_40 */\n        /* COMMENT_41 */\n        /* COMMENT_42 */\n        /* COMMENT_43 */\n        VAR_46 = strdup(strtok_r(VAR_41, \";\", &VAR_43));\n        if (VAR_46 == NULL) {\n            Limelog(\"Failed to duplicate session ID string\\n\");\n            VAR_1 = -1;\n            goto Exit;\n        }\n\n        VAR_6 = true;\n\n        freeMessage(&VAR_27);\n    }\n\n    {\n        RTSP_MESSAGE VAR_27;\n        int VAR_28 = -1;\n        char* VAR_42;\n\n        if (!setupStream(&VAR_27,\n                         VAR_4[0] >= 5 ? \"streamid=video/0/0\" : \"streamid=video\",\n                         &VAR_28)) {\n            Limelog(\"RTSP SETUP streamid=video request failed: %d\\n\", VAR_28);\n            VAR_1 = VAR_28;\n            goto Exit;\n        }\n\n        if (VAR_27.message.response.statusCode != 200) {\n            Limelog(\"RTSP SETUP streamid=video request failed: %d\\n\",\n                VAR_27.message.response.statusCode);\n            VAR_1 = VAR_27.message.response.statusCode;\n            goto Exit;\n        }\n\n        /* COMMENT_35 */\n        memset(&VAR_47, 0, sizeof(VAR_47));\n        VAR_42 = getOptionContent(VAR_27.options, \"X-SS-Ping-Payload\");\n        if (VAR_42 != NULL && strlen(VAR_42) == sizeof(VAR_47.payload)) {\n            memcpy(VAR_47.payload, VAR_42, sizeof(VAR_47.payload));\n        }\n\n        /* COMMENT_44 */\n        LC_ASSERT(VAR_48 == 0);\n        if (!parseServerPortFromTransport(&VAR_27, &VAR_48)) {\n            /* COMMENT_34 */\n            VAR_48 = 47998;\n\n            Limelog(\"Video port: %u (RTSP parsing failed)\\n\", VAR_48);\n        }\n        else {\n            Limelog(\"Video port: %u\\n\", VAR_48);\n        }\n\n        freeMessage(&VAR_27);\n    }\n    \n    if (VAR_4[0] >= 5) {\n        RTSP_MESSAGE VAR_27;\n        int VAR_28 = -1;\n\n        if (!setupStream(&VAR_27,\n                         VAR_7,\n                         &VAR_28)) {\n            Limelog(\"RTSP SETUP streamid=control request failed: %d\\n\", VAR_28);\n            VAR_1 = VAR_28;\n            goto Exit;\n        }\n\n        if (VAR_27.message.response.statusCode != 200) {\n            Limelog(\"RTSP SETUP streamid=control request failed: %d\\n\",\n                VAR_27.message.response.statusCode);\n            VAR_1 = VAR_27.message.response.statusCode;\n            goto Exit;\n        }\n\n        /* COMMENT_45 */\n        LC_ASSERT(VAR_49 == 0);\n        if (!parseServerPortFromTransport(&VAR_27, &VAR_49)) {\n            /* COMMENT_34 */\n            VAR_49 = 47999;\n\n            Limelog(\"Control port: %u (RTSP parsing failed)\\n\", VAR_49);\n        }\n        else {\n            Limelog(\"Control port: %u\\n\", VAR_49);\n        }\n\n        freeMessage(&VAR_27);\n    }\n\n    {\n        RTSP_MESSAGE VAR_27;\n        int VAR_28 = -1;\n\n        if (!sendVideoAnnounce(&VAR_27, &VAR_28)) {\n            Limelog(\"RTSP ANNOUNCE request failed: %d\\n\", VAR_28);\n            VAR_1 = VAR_28;\n            goto Exit;\n        }\n\n        if (VAR_27.message.response.statusCode != 200) {\n            Limelog(\"RTSP ANNOUNCE request failed: %d\\n\",\n                VAR_27.message.response.statusCode);\n            VAR_1 = VAR_27.message.response.statusCode;\n            goto Exit;\n        }\n\n        freeMessage(&VAR_27);\n    }\n\n    /* COMMENT_46 */\n    if (APP_VERSION_AT_LEAST(7, 1, 431)) {\n        RTSP_MESSAGE VAR_27;\n        int VAR_28 = -1;\n\n        if (!playStream(&VAR_27, \"/\", &VAR_28)) {\n            Limelog(\"RTSP PLAY request failed: %d\\n\", VAR_28);\n            VAR_1 = VAR_28;\n            goto Exit;\n        }\n\n        if (VAR_27.message.response.statusCode != 200) {\n            Limelog(\"RTSP PLAY failed: %d\\n\",\n                VAR_27.message.response.statusCode);\n            VAR_1 = VAR_27.message.response.statusCode;\n            goto Exit;\n        }\n\n        freeMessage(&VAR_27);\n    }\n    else {\n        {\n            RTSP_MESSAGE VAR_27;\n            int VAR_28 = -1;\n\n            if (!playStream(&VAR_27, \"streamid=video\", &VAR_28)) {\n                Limelog(\"RTSP PLAY streamid=video request failed: %d\\n\", VAR_28);\n                VAR_1 = VAR_28;\n                goto Exit;\n            }\n\n            if (VAR_27.message.response.statusCode != 200) {\n                Limelog(\"RTSP PLAY streamid=video failed: %d\\n\",\n                    VAR_27.message.response.statusCode);\n                VAR_1 = VAR_27.message.response.statusCode;\n                goto Exit;\n            }\n\n            freeMessage(&VAR_27);\n        }\n\n        {\n            RTSP_MESSAGE VAR_27;\n            int VAR_28 = -1;\n\n            if (!playStream(&VAR_27, \"streamid=audio\", &VAR_28)) {\n                Limelog(\"RTSP PLAY streamid=audio request failed: %d\\n\", VAR_28);\n                VAR_1 = VAR_28;\n                goto Exit;\n            }\n\n            if (VAR_27.message.response.statusCode != 200) {\n                Limelog(\"RTSP PLAY streamid=audio failed: %d\\n\",\n                    VAR_27.message.response.statusCode);\n                VAR_1 = VAR_27.message.response.statusCode;\n                goto Exit;\n            }\n\n            freeMessage(&VAR_27);\n        }\n    }\n\n    \n    VAR_1 = 0;\n    \nExit:\n    /* COMMENT_47 */\n    if (VAR_3) {\n        if (VAR_24 != NULL) {\n            enet_peer_disconnect_now(VAR_24, 0);\n            VAR_24 = NULL;\n        }\n        \n        if (VAR_23 != NULL) {\n            enet_host_destroy(VAR_23);\n            VAR_23 = NULL;\n        }\n    }\n\n    if (VAR_46 != NULL) {\n        free(VAR_46);\n        VAR_46 = NULL;\n    }\n\n    return VAR_1;\n}",
  "func_graph_path_before": "moonlight-stream/moonlight-common-c/02b7742f4d19631024bd766bd2bb76715780004e/RtspConnection.c/vul/before/0.json",
  "func": "int performRtspHandshake(PSERVER_INFORMATION serverInfo) {\n    int ret;\n\n    LC_ASSERT(RtspPortNumber != 0);\n\n    // Initialize global state\n    useEnet = (AppVersionQuad[0] >= 5) && (AppVersionQuad[0] <= 7) && (AppVersionQuad[2] < 404);\n    currentSeqNumber = 1;\n    hasSessionId = false;\n    controlStreamId = APP_VERSION_AT_LEAST(7, 1, 431) ? \"streamid=control/13/0\" : \"streamid=control/1/0\";\n    AudioEncryptionEnabled = false;\n\n    // HACK: In order to get GFE to respect our request for a lower audio bitrate, we must\n    // fake our target address so it doesn't match any of the PC's local interfaces. It seems\n    // that the only way to get it to give you \"low quality\" stereo audio nowadays is if it\n    // thinks you are remote (target address != any local address).\n    //\n    // We will enable high quality audio if the following are all true:\n    // 1. Video bitrate is higher than 15 Mbps (to ensure most bandwidth is reserved for video)\n    // 2. The audio decoder has not declared that it is slow\n    // 3. The stream is either local or not surround sound (to prevent MTU issues over the Internet)\n    LC_ASSERT(StreamConfig.streamingRemotely != STREAM_CFG_AUTO);\n    if (OriginalVideoBitrate >= HIGH_AUDIO_BITRATE_THRESHOLD &&\n            (AudioCallbacks.capabilities & CAPABILITY_SLOW_OPUS_DECODER) == 0 &&\n            (StreamConfig.streamingRemotely != STREAM_CFG_REMOTE || CHANNEL_COUNT_FROM_AUDIO_CONFIGURATION(StreamConfig.audioConfiguration) <= 2)) {\n        // If we have an RTSP URL string and it was successfully parsed, use that string\n        if (serverInfo->rtspSessionUrl != NULL && parseUrlAddrFromRtspUrlString(serverInfo->rtspSessionUrl, urlAddr, sizeof(urlAddr))) {\n            strcpy(rtspTargetUrl, serverInfo->rtspSessionUrl);\n        }\n        else {\n            // If an RTSP URL string was not provided or failed to parse, we will construct one now as best we can.\n            //\n            // NB: If the remote address is not a LAN address, the host will likely not enable high quality\n            // audio since it only does that for local streaming normally. We can avoid this limitation,\n            // but only if the caller gave us the RTSP session URL that it received from the host during launch.\n            addrToUrlSafeString(&RemoteAddr, urlAddr, sizeof(urlAddr));\n\t\t\tsnprintf(rtspTargetUrl, sizeof(rtspTargetUrl), \"rtsp%s://%s:%u\", useEnet ? \"ru\" : \"\", urlAddr, RtspPortNumber);\n        }\n    }\n    else {\n        PltSafeStrcpy(urlAddr, sizeof(urlAddr), \"0.0.0.0\");\n\t\tsnprintf(rtspTargetUrl, sizeof(rtspTargetUrl), \"rtsp%s://%s:%u\", useEnet ? \"ru\" : \"\", urlAddr, RtspPortNumber);\n    }\n\n    switch (AppVersionQuad[0]) {\n        case 3:\n            rtspClientVersion = 10;\n            break;\n        case 4:\n            rtspClientVersion = 11;\n            break;\n        case 5:\n            rtspClientVersion = 12;\n            break;\n        case 6:\n            // Gen 6 has never been seen in the wild\n            rtspClientVersion = 13;\n            break;\n        case 7:\n        default:\n            rtspClientVersion = 14;\n            break;\n    }\n    \n    // Setup ENet if required by this GFE version\n    if (useEnet) {\n        ENetAddress address;\n        ENetEvent event;\n        \n        enet_address_set_address(&address, (struct sockaddr *)&RemoteAddr, RemoteAddrLen);\n        enet_address_set_port(&address, RtspPortNumber);\n        \n        // Create a client that can use 1 outgoing connection and 1 channel\n        client = enet_host_create(RemoteAddr.ss_family, NULL, 1, 1, 0, 0);\n        if (client == NULL) {\n            return -1;\n        }\n    \n        // Connect to the host\n        peer = enet_host_connect(client, &address, 1, 0);\n        if (peer == NULL) {\n            enet_host_destroy(client);\n            client = NULL;\n            return -1;\n        }\n    \n        // Wait for the connect to complete\n        if (serviceEnetHost(client, &event, RTSP_CONNECT_TIMEOUT_SEC * 1000) <= 0 ||\n            event.type != ENET_EVENT_TYPE_CONNECT) {\n            Limelog(\"RTSP: Failed to connect to UDP port %u\\n\", RtspPortNumber);\n            enet_peer_reset(peer);\n            peer = NULL;\n            enet_host_destroy(client);\n            client = NULL;\n            return -1;\n        }\n\n        // Ensure the connect verify ACK is sent immediately\n        enet_host_flush(client);\n    }\n\n    {\n        RTSP_MESSAGE response;\n        int error = -1;\n\n        if (!requestOptions(&response, &error)) {\n            Limelog(\"RTSP OPTIONS request failed: %d\\n\", error);\n            ret = error;\n            goto Exit;\n        }\n\n        if (response.message.response.statusCode != 200) {\n            Limelog(\"RTSP OPTIONS request failed: %d\\n\",\n                response.message.response.statusCode);\n            ret = response.message.response.statusCode;\n            goto Exit;\n        }\n\n        freeMessage(&response);\n    }\n\n    {\n        RTSP_MESSAGE response;\n        int error = -1;\n\n        if (!requestDescribe(&response, &error)) {\n            Limelog(\"RTSP DESCRIBE request failed: %d\\n\", error);\n            ret = error;\n            goto Exit;\n        }\n\n        if (response.message.response.statusCode != 200) {\n            Limelog(\"RTSP DESCRIBE request failed: %d\\n\",\n                response.message.response.statusCode);\n            ret = response.message.response.statusCode;\n            goto Exit;\n        }\n        \n        if ((StreamConfig.supportedVideoFormats & VIDEO_FORMAT_MASK_AV1) && strstr(response.payload, \"AV1/90000\")) {\n            if ((serverInfo->serverCodecModeSupport & SCM_AV1_MAIN10) && (StreamConfig.supportedVideoFormats & VIDEO_FORMAT_AV1_MAIN10)) {\n                NegotiatedVideoFormat = VIDEO_FORMAT_AV1_MAIN10;\n            }\n            else {\n                NegotiatedVideoFormat = VIDEO_FORMAT_AV1_MAIN8;\n\n                // Apply bitrate adjustment for SDR AV1 if the client requested one\n                if (StreamConfig.av1BitratePercentageMultiplier != 0) {\n                    StreamConfig.bitrate *= StreamConfig.av1BitratePercentageMultiplier;\n                    StreamConfig.bitrate /= 100;\n                }\n            }\n        }\n        else if ((StreamConfig.supportedVideoFormats & VIDEO_FORMAT_MASK_H265) && strstr(response.payload, \"sprop-parameter-sets=AAAAAU\")) {\n            // The RTSP DESCRIBE reply will contain a collection of SDP media attributes that\n            // describe the various supported video stream formats and include the SPS, PPS,\n            // and VPS (if applicable). We will use this information to determine whether the\n            // server can support HEVC. For some reason, they still set the MIME type of the HEVC\n            // format to H264, so we can't just look for the HEVC MIME type. What we'll do instead is\n            // look for the base 64 encoded VPS NALU prefix that is unique to the HEVC bitstream.\n            if ((serverInfo->serverCodecModeSupport & SCM_HEVC_MAIN10) && (StreamConfig.supportedVideoFormats & VIDEO_FORMAT_H265_MAIN10)) {\n                NegotiatedVideoFormat = VIDEO_FORMAT_H265_MAIN10;\n            }\n            else {\n                NegotiatedVideoFormat = VIDEO_FORMAT_H265;\n\n                // Apply bitrate adjustment for SDR HEVC if the client requested one\n                if (StreamConfig.hevcBitratePercentageMultiplier != 0) {\n                    StreamConfig.bitrate *= StreamConfig.hevcBitratePercentageMultiplier;\n                    StreamConfig.bitrate /= 100;\n                }\n            }\n        }\n        else {\n            NegotiatedVideoFormat = VIDEO_FORMAT_H264;\n\n            // Dimensions over 4096 are only supported with HEVC on NVENC\n            if (StreamConfig.width > 4096 || StreamConfig.height > 4096) {\n                Limelog(\"WARNING: Host PC doesn't support HEVC. Streaming at resolutions above 4K using H.264 will likely fail!\\n\");\n            }\n        }\n\n        // Look for the SDP attribute that indicates we're dealing with a server that supports RFI\n        ReferenceFrameInvalidationSupported = strstr(response.payload, \"x-nv-video[0].refPicInvalidation\") != NULL;\n        if (!ReferenceFrameInvalidationSupported) {\n            Limelog(\"Reference frame invalidation is not supported by this host\\n\");\n        }\n\n        // Look for the Sunshine feature flags in the SDP attributes\n        if (!parseSdpAttributeToUInt(response.payload, \"x-ss-general.featureFlags\", &SunshineFeatureFlags)) {\n            SunshineFeatureFlags = 0;\n        }\n\n        // Parse the Opus surround parameters out of the RTSP DESCRIBE response.\n        ret = parseOpusConfigurations(&response);\n        if (ret != 0) {\n            goto Exit;\n        }\n\n        freeMessage(&response);\n    }\n\n    {\n        RTSP_MESSAGE response;\n        char* sessionId;\n        char* pingPayload;\n        int error = -1;\n        char* strtokCtx = NULL;\n\n        if (!setupStream(&response,\n                         AppVersionQuad[0] >= 5 ? \"streamid=audio/0/0\" : \"streamid=audio\",\n                         &error)) {\n            Limelog(\"RTSP SETUP streamid=audio request failed: %d\\n\", error);\n            ret = error;\n            goto Exit;\n        }\n\n        if (response.message.response.statusCode != 200) {\n            Limelog(\"RTSP SETUP streamid=audio request failed: %d\\n\",\n                response.message.response.statusCode);\n            ret = response.message.response.statusCode;\n            goto Exit;\n        }\n\n        // Parse the audio port out of the RTSP SETUP response\n        LC_ASSERT(AudioPortNumber == 0);\n        if (!parseServerPortFromTransport(&response, &AudioPortNumber)) {\n            // Use the well known port if parsing fails\n            AudioPortNumber = 48000;\n\n            Limelog(\"Audio port: %u (RTSP parsing failed)\\n\", AudioPortNumber);\n        }\n        else {\n            Limelog(\"Audio port: %u\\n\", AudioPortNumber);\n        }\n\n        // Parse the Sunshine ping payload protocol extension if present\n        memset(&AudioPingPayload, 0, sizeof(AudioPingPayload));\n        pingPayload = getOptionContent(response.options, \"X-SS-Ping-Payload\");\n        if (pingPayload != NULL && strlen(pingPayload) == sizeof(AudioPingPayload.payload)) {\n            memcpy(AudioPingPayload.payload, pingPayload, sizeof(AudioPingPayload.payload));\n        }\n\n        // Let the audio stream know the port number is now finalized.\n        // NB: This is needed because audio stream init happens before RTSP,\n        // which is not the case for the video stream.\n        notifyAudioPortNegotiationComplete();\n\n        sessionId = getOptionContent(response.options, \"Session\");\n\n        if (sessionId == NULL) {\n            Limelog(\"RTSP SETUP streamid=audio is missing session attribute\\n\");\n            ret = -1;\n            goto Exit;\n        }\n\n        // Given there is a non-null session id, get the\n        // first token of the session until \";\", which \n        // resolves any 454 session not found errors on\n        // standard RTSP server implementations.\n        // (i.e - sessionId = \"DEADBEEFCAFE;timeout = 90\") \n        sessionIdString = strdup(strtok_r(sessionId, \";\", &strtokCtx));\n        if (sessionIdString == NULL) {\n            Limelog(\"Failed to duplicate session ID string\\n\");\n            ret = -1;\n            goto Exit;\n        }\n\n        hasSessionId = true;\n\n        freeMessage(&response);\n    }\n\n    {\n        RTSP_MESSAGE response;\n        int error = -1;\n        char* pingPayload;\n\n        if (!setupStream(&response,\n                         AppVersionQuad[0] >= 5 ? \"streamid=video/0/0\" : \"streamid=video\",\n                         &error)) {\n            Limelog(\"RTSP SETUP streamid=video request failed: %d\\n\", error);\n            ret = error;\n            goto Exit;\n        }\n\n        if (response.message.response.statusCode != 200) {\n            Limelog(\"RTSP SETUP streamid=video request failed: %d\\n\",\n                response.message.response.statusCode);\n            ret = response.message.response.statusCode;\n            goto Exit;\n        }\n\n        // Parse the Sunshine ping payload protocol extension if present\n        memset(&VideoPingPayload, 0, sizeof(VideoPingPayload));\n        pingPayload = getOptionContent(response.options, \"X-SS-Ping-Payload\");\n        if (pingPayload != NULL && strlen(pingPayload) == sizeof(VideoPingPayload.payload)) {\n            memcpy(VideoPingPayload.payload, pingPayload, sizeof(VideoPingPayload.payload));\n        }\n\n        // Parse the video port out of the RTSP SETUP response\n        LC_ASSERT(VideoPortNumber == 0);\n        if (!parseServerPortFromTransport(&response, &VideoPortNumber)) {\n            // Use the well known port if parsing fails\n            VideoPortNumber = 47998;\n\n            Limelog(\"Video port: %u (RTSP parsing failed)\\n\", VideoPortNumber);\n        }\n        else {\n            Limelog(\"Video port: %u\\n\", VideoPortNumber);\n        }\n\n        freeMessage(&response);\n    }\n    \n    if (AppVersionQuad[0] >= 5) {\n        RTSP_MESSAGE response;\n        int error = -1;\n\n        if (!setupStream(&response,\n                         controlStreamId,\n                         &error)) {\n            Limelog(\"RTSP SETUP streamid=control request failed: %d\\n\", error);\n            ret = error;\n            goto Exit;\n        }\n\n        if (response.message.response.statusCode != 200) {\n            Limelog(\"RTSP SETUP streamid=control request failed: %d\\n\",\n                response.message.response.statusCode);\n            ret = response.message.response.statusCode;\n            goto Exit;\n        }\n\n        // Parse the control port out of the RTSP SETUP response\n        LC_ASSERT(ControlPortNumber == 0);\n        if (!parseServerPortFromTransport(&response, &ControlPortNumber)) {\n            // Use the well known port if parsing fails\n            ControlPortNumber = 47999;\n\n            Limelog(\"Control port: %u (RTSP parsing failed)\\n\", ControlPortNumber);\n        }\n        else {\n            Limelog(\"Control port: %u\\n\", ControlPortNumber);\n        }\n\n        freeMessage(&response);\n    }\n\n    {\n        RTSP_MESSAGE response;\n        int error = -1;\n\n        if (!sendVideoAnnounce(&response, &error)) {\n            Limelog(\"RTSP ANNOUNCE request failed: %d\\n\", error);\n            ret = error;\n            goto Exit;\n        }\n\n        if (response.message.response.statusCode != 200) {\n            Limelog(\"RTSP ANNOUNCE request failed: %d\\n\",\n                response.message.response.statusCode);\n            ret = response.message.response.statusCode;\n            goto Exit;\n        }\n\n        freeMessage(&response);\n    }\n\n    // GFE 3.22 uses a single PLAY message\n    if (APP_VERSION_AT_LEAST(7, 1, 431)) {\n        RTSP_MESSAGE response;\n        int error = -1;\n\n        if (!playStream(&response, \"/\", &error)) {\n            Limelog(\"RTSP PLAY request failed: %d\\n\", error);\n            ret = error;\n            goto Exit;\n        }\n\n        if (response.message.response.statusCode != 200) {\n            Limelog(\"RTSP PLAY failed: %d\\n\",\n                response.message.response.statusCode);\n            ret = response.message.response.statusCode;\n            goto Exit;\n        }\n\n        freeMessage(&response);\n    }\n    else {\n        {\n            RTSP_MESSAGE response;\n            int error = -1;\n\n            if (!playStream(&response, \"streamid=video\", &error)) {\n                Limelog(\"RTSP PLAY streamid=video request failed: %d\\n\", error);\n                ret = error;\n                goto Exit;\n            }\n\n            if (response.message.response.statusCode != 200) {\n                Limelog(\"RTSP PLAY streamid=video failed: %d\\n\",\n                    response.message.response.statusCode);\n                ret = response.message.response.statusCode;\n                goto Exit;\n            }\n\n            freeMessage(&response);\n        }\n\n        {\n            RTSP_MESSAGE response;\n            int error = -1;\n\n            if (!playStream(&response, \"streamid=audio\", &error)) {\n                Limelog(\"RTSP PLAY streamid=audio request failed: %d\\n\", error);\n                ret = error;\n                goto Exit;\n            }\n\n            if (response.message.response.statusCode != 200) {\n                Limelog(\"RTSP PLAY streamid=audio failed: %d\\n\",\n                    response.message.response.statusCode);\n                ret = response.message.response.statusCode;\n                goto Exit;\n            }\n\n            freeMessage(&response);\n        }\n    }\n\n    \n    ret = 0;\n    \nExit:\n    // Cleanup the ENet stuff\n    if (useEnet) {\n        if (peer != NULL) {\n            enet_peer_disconnect_now(peer, 0);\n            peer = NULL;\n        }\n        \n        if (client != NULL) {\n            enet_host_destroy(client);\n            client = NULL;\n        }\n    }\n\n    if (sessionIdString != NULL) {\n        free(sessionIdString);\n        sessionIdString = NULL;\n    }\n\n    return ret;\n}",
  "abstract_func": "int performRtspHandshake(PSERVER_INFORMATION VAR_0) {\n    int VAR_1;\n\n    LC_ASSERT(VAR_2 != 0);\n\n    /* COMMENT_0 */\n    VAR_3 = (VAR_4[0] >= 5) && (VAR_4[0] <= 7) && (VAR_4[2] < 404);\n    VAR_5 = 1;\n    VAR_6 = false;\n    VAR_7 = APP_VERSION_AT_LEAST(7, 1, 431) ? \"streamid=control/13/0\" : \"streamid=control/1/0\";\n    VAR_8 = false;\n\n    /* COMMENT_1 */\n    /* COMMENT_2 */\n    /* COMMENT_3 */\n    /* COMMENT_4 */\n    /* COMMENT_5 */\n    /* COMMENT_6 */\n    /* COMMENT_7 */\n    /* COMMENT_8 */\n    /* COMMENT_9 */\n    LC_ASSERT(VAR_9.streamingRemotely != VAR_10);\n    if (VAR_11 >= VAR_12 &&\n            (VAR_13.capabilities & VAR_14) == 0 &&\n            (VAR_9.streamingRemotely != VAR_15 || CHANNEL_COUNT_FROM_AUDIO_CONFIGURATION(VAR_9.audioConfiguration) <= 2)) {\n        /* COMMENT_10 */\n        if (VAR_0->rtspSessionUrl != NULL && parseUrlAddrFromRtspUrlString(VAR_0->rtspSessionUrl, VAR_16, sizeof(VAR_16))) {\n            strcpy(VAR_17, VAR_0->rtspSessionUrl);\n        }\n        else {\n            /* COMMENT_11 */\n            /* COMMENT_5 */\n            /* COMMENT_12 */\n            /* COMMENT_13 */\n            /* COMMENT_14 */\n            addrToUrlSafeString(&VAR_18, VAR_16, sizeof(VAR_16));\n\t\t\tsnprintf(VAR_17, sizeof(VAR_17), \"rtsp%s://%s:%u\", VAR_3 ? \"ru\" : \"\", VAR_16, VAR_2);\n        }\n    }\n    else {\n        PltSafeStrcpy(VAR_16, sizeof(VAR_16), \"0.0.0.0\");\n\t\tsnprintf(VAR_17, sizeof(VAR_17), \"rtsp%s://%s:%u\", VAR_3 ? \"ru\" : \"\", VAR_16, VAR_2);\n    }\n\n    switch (VAR_4[0]) {\n        case 3:\n            VAR_19 = 10;\n            break;\n        case 4:\n            VAR_19 = 11;\n            break;\n        case 5:\n            VAR_19 = 12;\n            break;\n        case 6:\n            /* COMMENT_15 */\n            VAR_19 = 13;\n            break;\n        case 7:\n        default:\n            VAR_19 = 14;\n            break;\n    }\n    \n    /* COMMENT_16 */\n    if (VAR_3) {\n        ENetAddress VAR_20;\n        ENetEvent VAR_21;\n        \n        enet_address_set_address(&VAR_20, (struct sockaddr *)&VAR_18, VAR_22);\n        enet_address_set_port(&VAR_20, VAR_2);\n        \n        /* COMMENT_17 */\n        VAR_23 = enet_host_create(VAR_18.ss_family, NULL, 1, 1, 0, 0);\n        if (VAR_23 == NULL) {\n            return -1;\n        }\n    \n        /* COMMENT_18 */\n        VAR_24 = enet_host_connect(VAR_23, &VAR_20, 1, 0);\n        if (VAR_24 == NULL) {\n            enet_host_destroy(VAR_23);\n            VAR_23 = NULL;\n            return -1;\n        }\n    \n        /* COMMENT_19 */\n        if (serviceEnetHost(VAR_23, &VAR_21, VAR_25 * 1000) <= 0 ||\n            VAR_21.type != VAR_26) {\n            Limelog(\"RTSP: Failed to connect to UDP port %u\\n\", VAR_2);\n            enet_peer_reset(VAR_24);\n            VAR_24 = NULL;\n            enet_host_destroy(VAR_23);\n            VAR_23 = NULL;\n            return -1;\n        }\n\n        /* COMMENT_20 */\n        enet_host_flush(VAR_23);\n    }\n\n    {\n        RTSP_MESSAGE VAR_27;\n        int VAR_28 = -1;\n\n        if (!requestOptions(&VAR_27, &VAR_28)) {\n            Limelog(\"RTSP OPTIONS request failed: %d\\n\", VAR_28);\n            VAR_1 = VAR_28;\n            goto Exit;\n        }\n\n        if (VAR_27.message.response.statusCode != 200) {\n            Limelog(\"RTSP OPTIONS request failed: %d\\n\",\n                VAR_27.message.response.statusCode);\n            VAR_1 = VAR_27.message.response.statusCode;\n            goto Exit;\n        }\n\n        freeMessage(&VAR_27);\n    }\n\n    {\n        RTSP_MESSAGE VAR_27;\n        int VAR_28 = -1;\n\n        if (!requestDescribe(&VAR_27, &VAR_28)) {\n            Limelog(\"RTSP DESCRIBE request failed: %d\\n\", VAR_28);\n            VAR_1 = VAR_28;\n            goto Exit;\n        }\n\n        if (VAR_27.message.response.statusCode != 200) {\n            Limelog(\"RTSP DESCRIBE request failed: %d\\n\",\n                VAR_27.message.response.statusCode);\n            VAR_1 = VAR_27.message.response.statusCode;\n            goto Exit;\n        }\n        \n        if ((VAR_9.supportedVideoFormats & VAR_29) && strstr(VAR_27.payload, \"AV1/90000\")) {\n            if ((VAR_0->serverCodecModeSupport & VAR_30) && (VAR_9.supportedVideoFormats & VAR_31)) {\n                VAR_32 = VAR_31;\n            }\n            else {\n                VAR_32 = VAR_33;\n\n                /* COMMENT_21 */\n                if (VAR_9.av1BitratePercentageMultiplier != 0) {\n                    VAR_9.bitrate *= VAR_9.av1BitratePercentageMultiplier;\n                    VAR_9.bitrate /= 100;\n                }\n            }\n        }\n        else if ((VAR_9.supportedVideoFormats & VAR_34) && strstr(VAR_27.payload, \"sprop-parameter-sets=AAAAAU\")) {\n            /* COMMENT_22 */\n            /* COMMENT_23 */\n            /* COMMENT_24 */\n            /* COMMENT_25 */\n            /* COMMENT_26 */\n            /* COMMENT_27 */\n            if ((VAR_0->serverCodecModeSupport & VAR_35) && (VAR_9.supportedVideoFormats & VAR_36)) {\n                VAR_32 = VAR_36;\n            }\n            else {\n                VAR_32 = VAR_37;\n\n                /* COMMENT_28 */\n                if (VAR_9.hevcBitratePercentageMultiplier != 0) {\n                    VAR_9.bitrate *= VAR_9.hevcBitratePercentageMultiplier;\n                    VAR_9.bitrate /= 100;\n                }\n            }\n        }\n        else {\n            VAR_32 = VAR_38;\n\n            /* COMMENT_29 */\n            if (VAR_9.width > 4096 || VAR_9.height > 4096) {\n                Limelog(\"WARNING: Host PC doesn't support HEVC. Streaming at resolutions above 4K using H.264 will likely fail!\\n\");\n            }\n        }\n\n        /* COMMENT_30 */\n        VAR_39 = strstr(VAR_27.payload, \"x-nv-video[0].refPicInvalidation\") != NULL;\n        if (!VAR_39) {\n            Limelog(\"Reference frame invalidation is not supported by this host\\n\");\n        }\n\n        /* COMMENT_31 */\n        if (!parseSdpAttributeToUInt(VAR_27.payload, \"x-ss-general.featureFlags\", &VAR_40)) {\n            VAR_40 = 0;\n        }\n\n        /* COMMENT_32 */\n        VAR_1 = parseOpusConfigurations(&VAR_27);\n        if (VAR_1 != 0) {\n            goto Exit;\n        }\n\n        freeMessage(&VAR_27);\n    }\n\n    {\n        RTSP_MESSAGE VAR_27;\n        char* VAR_41;\n        char* VAR_42;\n        int VAR_28 = -1;\n        char* VAR_43 = NULL;\n\n        if (!setupStream(&VAR_27,\n                         VAR_4[0] >= 5 ? \"streamid=audio/0/0\" : \"streamid=audio\",\n                         &VAR_28)) {\n            Limelog(\"RTSP SETUP streamid=audio request failed: %d\\n\", VAR_28);\n            VAR_1 = VAR_28;\n            goto Exit;\n        }\n\n        if (VAR_27.message.response.statusCode != 200) {\n            Limelog(\"RTSP SETUP streamid=audio request failed: %d\\n\",\n                VAR_27.message.response.statusCode);\n            VAR_1 = VAR_27.message.response.statusCode;\n            goto Exit;\n        }\n\n        /* COMMENT_33 */\n        LC_ASSERT(VAR_44 == 0);\n        if (!parseServerPortFromTransport(&VAR_27, &VAR_44)) {\n            /* COMMENT_34 */\n            VAR_44 = 48000;\n\n            Limelog(\"Audio port: %u (RTSP parsing failed)\\n\", VAR_44);\n        }\n        else {\n            Limelog(\"Audio port: %u\\n\", VAR_44);\n        }\n\n        /* COMMENT_35 */\n        memset(&VAR_45, 0, sizeof(VAR_45));\n        VAR_42 = getOptionContent(VAR_27.options, \"X-SS-Ping-Payload\");\n        if (VAR_42 != NULL && strlen(VAR_42) == sizeof(VAR_45.payload)) {\n            memcpy(VAR_45.payload, VAR_42, sizeof(VAR_45.payload));\n        }\n\n        /* COMMENT_36 */\n        /* COMMENT_37 */\n        /* COMMENT_38 */\n        notifyAudioPortNegotiationComplete();\n\n        VAR_41 = getOptionContent(VAR_27.options, \"Session\");\n\n        if (VAR_41 == NULL) {\n            Limelog(\"RTSP SETUP streamid=audio is missing session attribute\\n\");\n            VAR_1 = -1;\n            goto Exit;\n        }\n\n        /* COMMENT_39 */\n        /* COMMENT_40 */\n        /* COMMENT_41 */\n        /* COMMENT_42 */\n        /* COMMENT_43 */\n        VAR_46 = strdup(strtok_r(VAR_41, \";\", &VAR_43));\n        if (VAR_46 == NULL) {\n            Limelog(\"Failed to duplicate session ID string\\n\");\n            VAR_1 = -1;\n            goto Exit;\n        }\n\n        VAR_6 = true;\n\n        freeMessage(&VAR_27);\n    }\n\n    {\n        RTSP_MESSAGE VAR_27;\n        int VAR_28 = -1;\n        char* VAR_42;\n\n        if (!setupStream(&VAR_27,\n                         VAR_4[0] >= 5 ? \"streamid=video/0/0\" : \"streamid=video\",\n                         &VAR_28)) {\n            Limelog(\"RTSP SETUP streamid=video request failed: %d\\n\", VAR_28);\n            VAR_1 = VAR_28;\n            goto Exit;\n        }\n\n        if (VAR_27.message.response.statusCode != 200) {\n            Limelog(\"RTSP SETUP streamid=video request failed: %d\\n\",\n                VAR_27.message.response.statusCode);\n            VAR_1 = VAR_27.message.response.statusCode;\n            goto Exit;\n        }\n\n        /* COMMENT_35 */\n        memset(&VAR_47, 0, sizeof(VAR_47));\n        VAR_42 = getOptionContent(VAR_27.options, \"X-SS-Ping-Payload\");\n        if (VAR_42 != NULL && strlen(VAR_42) == sizeof(VAR_47.payload)) {\n            memcpy(VAR_47.payload, VAR_42, sizeof(VAR_47.payload));\n        }\n\n        /* COMMENT_44 */\n        LC_ASSERT(VAR_48 == 0);\n        if (!parseServerPortFromTransport(&VAR_27, &VAR_48)) {\n            /* COMMENT_34 */\n            VAR_48 = 47998;\n\n            Limelog(\"Video port: %u (RTSP parsing failed)\\n\", VAR_48);\n        }\n        else {\n            Limelog(\"Video port: %u\\n\", VAR_48);\n        }\n\n        freeMessage(&VAR_27);\n    }\n    \n    if (VAR_4[0] >= 5) {\n        RTSP_MESSAGE VAR_27;\n        int VAR_28 = -1;\n\n        if (!setupStream(&VAR_27,\n                         VAR_7,\n                         &VAR_28)) {\n            Limelog(\"RTSP SETUP streamid=control request failed: %d\\n\", VAR_28);\n            VAR_1 = VAR_28;\n            goto Exit;\n        }\n\n        if (VAR_27.message.response.statusCode != 200) {\n            Limelog(\"RTSP SETUP streamid=control request failed: %d\\n\",\n                VAR_27.message.response.statusCode);\n            VAR_1 = VAR_27.message.response.statusCode;\n            goto Exit;\n        }\n\n        /* COMMENT_45 */\n        LC_ASSERT(VAR_49 == 0);\n        if (!parseServerPortFromTransport(&VAR_27, &VAR_49)) {\n            /* COMMENT_34 */\n            VAR_49 = 47999;\n\n            Limelog(\"Control port: %u (RTSP parsing failed)\\n\", VAR_49);\n        }\n        else {\n            Limelog(\"Control port: %u\\n\", VAR_49);\n        }\n\n        freeMessage(&VAR_27);\n    }\n\n    {\n        RTSP_MESSAGE VAR_27;\n        int VAR_28 = -1;\n\n        if (!sendVideoAnnounce(&VAR_27, &VAR_28)) {\n            Limelog(\"RTSP ANNOUNCE request failed: %d\\n\", VAR_28);\n            VAR_1 = VAR_28;\n            goto Exit;\n        }\n\n        if (VAR_27.message.response.statusCode != 200) {\n            Limelog(\"RTSP ANNOUNCE request failed: %d\\n\",\n                VAR_27.message.response.statusCode);\n            VAR_1 = VAR_27.message.response.statusCode;\n            goto Exit;\n        }\n\n        freeMessage(&VAR_27);\n    }\n\n    /* COMMENT_46 */\n    if (APP_VERSION_AT_LEAST(7, 1, 431)) {\n        RTSP_MESSAGE VAR_27;\n        int VAR_28 = -1;\n\n        if (!playStream(&VAR_27, \"/\", &VAR_28)) {\n            Limelog(\"RTSP PLAY request failed: %d\\n\", VAR_28);\n            VAR_1 = VAR_28;\n            goto Exit;\n        }\n\n        if (VAR_27.message.response.statusCode != 200) {\n            Limelog(\"RTSP PLAY failed: %d\\n\",\n                VAR_27.message.response.statusCode);\n            VAR_1 = VAR_27.message.response.statusCode;\n            goto Exit;\n        }\n\n        freeMessage(&VAR_27);\n    }\n    else {\n        {\n            RTSP_MESSAGE VAR_27;\n            int VAR_28 = -1;\n\n            if (!playStream(&VAR_27, \"streamid=video\", &VAR_28)) {\n                Limelog(\"RTSP PLAY streamid=video request failed: %d\\n\", VAR_28);\n                VAR_1 = VAR_28;\n                goto Exit;\n            }\n\n            if (VAR_27.message.response.statusCode != 200) {\n                Limelog(\"RTSP PLAY streamid=video failed: %d\\n\",\n                    VAR_27.message.response.statusCode);\n                VAR_1 = VAR_27.message.response.statusCode;\n                goto Exit;\n            }\n\n            freeMessage(&VAR_27);\n        }\n\n        {\n            RTSP_MESSAGE VAR_27;\n            int VAR_28 = -1;\n\n            if (!playStream(&VAR_27, \"streamid=audio\", &VAR_28)) {\n                Limelog(\"RTSP PLAY streamid=audio request failed: %d\\n\", VAR_28);\n                VAR_1 = VAR_28;\n                goto Exit;\n            }\n\n            if (VAR_27.message.response.statusCode != 200) {\n                Limelog(\"RTSP PLAY streamid=audio failed: %d\\n\",\n                    VAR_27.message.response.statusCode);\n                VAR_1 = VAR_27.message.response.statusCode;\n                goto Exit;\n            }\n\n            freeMessage(&VAR_27);\n        }\n    }\n\n    \n    VAR_1 = 0;\n    \nExit:\n    /* COMMENT_47 */\n    if (VAR_3) {\n        if (VAR_24 != NULL) {\n            enet_peer_disconnect_now(VAR_24, 0);\n            VAR_24 = NULL;\n        }\n        \n        if (VAR_23 != NULL) {\n            enet_host_destroy(VAR_23);\n            VAR_23 = NULL;\n        }\n    }\n\n    if (VAR_46 != NULL) {\n        free(VAR_46);\n        VAR_46 = NULL;\n    }\n\n    return VAR_1;\n}",
  "func_graph_path": "moonlight-stream/moonlight-common-c/02b7742f4d19631024bd766bd2bb76715780004e/RtspConnection.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -24,7 +24,7 @@\n             (AudioCallbacks.capabilities & CAPABILITY_SLOW_OPUS_DECODER) == 0 &&\n             (StreamConfig.streamingRemotely != STREAM_CFG_REMOTE || CHANNEL_COUNT_FROM_AUDIO_CONFIGURATION(StreamConfig.audioConfiguration) <= 2)) {\n         // If we have an RTSP URL string and it was successfully parsed, use that string\n-        if (serverInfo->rtspSessionUrl != NULL && parseUrlAddrFromRtspUrlString(serverInfo->rtspSessionUrl, urlAddr)) {\n+        if (serverInfo->rtspSessionUrl != NULL && parseUrlAddrFromRtspUrlString(serverInfo->rtspSessionUrl, urlAddr, sizeof(urlAddr))) {\n             strcpy(rtspTargetUrl, serverInfo->rtspSessionUrl);\n         }\n         else {\n@@ -34,12 +34,12 @@\n             // audio since it only does that for local streaming normally. We can avoid this limitation,\n             // but only if the caller gave us the RTSP session URL that it received from the host during launch.\n             addrToUrlSafeString(&RemoteAddr, urlAddr, sizeof(urlAddr));\n-            sprintf(rtspTargetUrl, \"rtsp%s://%s:%u\", useEnet ? \"ru\" : \"\", urlAddr, RtspPortNumber);\n+\t\t\tsnprintf(rtspTargetUrl, sizeof(rtspTargetUrl), \"rtsp%s://%s:%u\", useEnet ? \"ru\" : \"\", urlAddr, RtspPortNumber);\n         }\n     }\n     else {\n         PltSafeStrcpy(urlAddr, sizeof(urlAddr), \"0.0.0.0\");\n-        sprintf(rtspTargetUrl, \"rtsp%s://%s:%u\", useEnet ? \"ru\" : \"\", urlAddr, RtspPortNumber);\n+\t\tsnprintf(rtspTargetUrl, sizeof(rtspTargetUrl), \"rtsp%s://%s:%u\", useEnet ? \"ru\" : \"\", urlAddr, RtspPortNumber);\n     }\n \n     switch (AppVersionQuad[0]) {",
  "diff_line_info": {
    "deleted_lines": [
      "        if (serverInfo->rtspSessionUrl != NULL && parseUrlAddrFromRtspUrlString(serverInfo->rtspSessionUrl, urlAddr)) {",
      "            sprintf(rtspTargetUrl, \"rtsp%s://%s:%u\", useEnet ? \"ru\" : \"\", urlAddr, RtspPortNumber);",
      "        sprintf(rtspTargetUrl, \"rtsp%s://%s:%u\", useEnet ? \"ru\" : \"\", urlAddr, RtspPortNumber);"
    ],
    "added_lines": [
      "        if (serverInfo->rtspSessionUrl != NULL && parseUrlAddrFromRtspUrlString(serverInfo->rtspSessionUrl, urlAddr, sizeof(urlAddr))) {",
      "\t\t\tsnprintf(rtspTargetUrl, sizeof(rtspTargetUrl), \"rtsp%s://%s:%u\", useEnet ? \"ru\" : \"\", urlAddr, RtspPortNumber);",
      "\t\tsnprintf(rtspTargetUrl, sizeof(rtspTargetUrl), \"rtsp%s://%s:%u\", useEnet ? \"ru\" : \"\", urlAddr, RtspPortNumber);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/moonlight-stream/moonlight-common-c/pull/83",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/moonlight-stream/moonlight-common-c/pull/83: 403 Client Error: Forbidden for url: https://api.github.com/repos/moonlight-stream/moonlight-common-c/pulls/83",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.95"
}