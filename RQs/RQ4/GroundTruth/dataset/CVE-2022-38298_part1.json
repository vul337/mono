{
  "cve_id": "CVE-2022-38298",
  "cwe_ids": [
    "CWE-918"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
  "cvss_is_v3": true,
  "repo_name": "appsmithorg/appsmith",
  "commit_msg": "Adding a check for invalid hosts on redirects as well",
  "commit_hash": "c59351ef94f9780c2a1ffc991e29b9272ab9fe64",
  "git_url": "https://github.com/appsmithorg/appsmith/commit/c59351ef94f9780c2a1ffc991e29b9272ab9fe64",
  "file_path": "app/server/appsmith-plugins/restApiPlugin/src/main/java/com/external/plugins/RestApiPlugin.java",
  "func_name": "httpCall",
  "func_before": "private Mono<ClientResponse> httpCall(WebClient webClient, HttpMethod httpMethod, URI uri, Object requestBody,\n                                              int iteration, String contentType) {\n            if (iteration == MAX_REDIRECTS) {\n                return Mono.error(new AppsmithPluginException(\n                        AppsmithPluginError.PLUGIN_ERROR,\n                        \"Exceeded the HTTP redirect limits of \" + MAX_REDIRECTS\n                ));\n            }\n\n            assert requestBody instanceof BodyInserter<?, ?>;\n            BodyInserter<?, ?> finalRequestBody = (BodyInserter<?, ?>) requestBody;\n\n            return webClient\n                    .method(httpMethod)\n                    .uri(uri)\n                    .body((BodyInserter<?, ? super ClientHttpRequest>) finalRequestBody)\n                    .exchange()\n                    .doOnError(e -> Mono.error(new AppsmithPluginException(AppsmithPluginError.PLUGIN_ERROR, e)))\n                    .flatMap(response -> {\n                        if (response.statusCode().is3xxRedirection()) {\n                            String redirectUrl = response.headers().header(\"Location\").get(0);\n                            /**\n                             * TODO\n                             * In case the redirected URL is not absolute (complete), create the new URL using the relative path\n                             * This particular scenario is seen in the URL : https://rickandmortyapi.com/api/character\n                             * It redirects to partial URI : /api/character/\n                             * In this scenario we should convert the partial URI to complete URI\n                             */\n                            URI redirectUri = null;\n                            try {\n                                redirectUri = new URI(redirectUrl);\n                            } catch (URISyntaxException e) {\n                                return Mono.error(new AppsmithPluginException(AppsmithPluginError.PLUGIN_ERROR, e));\n                            }\n                            return httpCall(webClient, httpMethod, redirectUri, finalRequestBody, iteration + 1,\n                                    contentType);\n                        }\n                        return Mono.just(response);\n                    });\n        }",
  "abstract_func_before": "private Mono<ClientResponse> httpCall(WebClient VAR_0, HttpMethod VAR_1, URI VAR_2, Object VAR_3,\n                                              int VAR_4, String VAR_5) {\n            if (VAR_4 == VAR_6) {\n                return VAR_7.error(new AppsmithPluginException(\n                        VAR_8.PLUGIN_ERROR,\n                        \"Exceeded the HTTP redirect limits of \" + VAR_6\n                ));\n            }\n\n            assert VAR_3 instanceof BodyInserter<?, ?>;\n            BodyInserter<?, ?> VAR_9 = (BodyInserter<?, ?>) VAR_3;\n\n            return VAR_0\n                    .method(VAR_1)\n                    .uri(VAR_2)\n                    .body((BodyInserter<?, ? super ClientHttpRequest>) VAR_9)\n                    .exchange()\n                    .doOnError(VAR_10 -> VAR_7.error(new AppsmithPluginException(VAR_8.PLUGIN_ERROR, VAR_10)))\n                    .flatMap(VAR_11 -> {\n                        if (VAR_11.statusCode().is3xxRedirection()) {\n                            String VAR_12 = VAR_11.headers().header(\"Location\").get(0);\n                            /* COMMENT_0 */\n                                   \n                                                                                                                                \n                                                                                                                      \n                                                                            \n                                                                                                 \n                               \n                            URI VAR_13 = null;\n                            try {\n                                VAR_13 = new URI(VAR_12);\n                            } catch (URISyntaxException VAR_10) {\n                                return VAR_7.error(new AppsmithPluginException(VAR_8.PLUGIN_ERROR, VAR_10));\n                            }\n                            return httpCall(VAR_0, VAR_1, VAR_13, VAR_9, VAR_4 + 1,\n                                    VAR_5);\n                        }\n                        return VAR_7.just(VAR_11);\n                    });\n        }",
  "func_graph_path_before": "appsmithorg/appsmith/c59351ef94f9780c2a1ffc991e29b9272ab9fe64/RestApiPlugin.java/vul/before/0.json",
  "func": "private Mono<ClientResponse> httpCall(WebClient webClient, HttpMethod httpMethod, URI uri, Object requestBody,\n                                              int iteration, String contentType) {\n            if (iteration == MAX_REDIRECTS) {\n                return Mono.error(new AppsmithPluginException(\n                        AppsmithPluginError.PLUGIN_ERROR,\n                        \"Exceeded the HTTP redirect limits of \" + MAX_REDIRECTS\n                ));\n            }\n\n            assert requestBody instanceof BodyInserter<?, ?>;\n            BodyInserter<?, ?> finalRequestBody = (BodyInserter<?, ?>) requestBody;\n\n            return webClient\n                    .method(httpMethod)\n                    .uri(uri)\n                    .body((BodyInserter<?, ? super ClientHttpRequest>) finalRequestBody)\n                    .exchange()\n                    .doOnError(e -> Mono.error(new AppsmithPluginException(AppsmithPluginError.PLUGIN_ERROR, e)))\n                    .flatMap(response -> {\n                        if (response.statusCode().is3xxRedirection()) {\n                            String redirectUrl = response.headers().header(\"Location\").get(0);\n                            /**\n                             * TODO\n                             * In case the redirected URL is not absolute (complete), create the new URL using the relative path\n                             * This particular scenario is seen in the URL : https://rickandmortyapi.com/api/character\n                             * It redirects to partial URI : /api/character/\n                             * In this scenario we should convert the partial URI to complete URI\n                             */\n                            URI redirectUri = null;\n                            try {\n                                redirectUri = new URI(redirectUrl);\n                                if (DISALLOWED_HOSTS.contains(redirectUri.getHost())\n                                        || DISALLOWED_HOSTS.contains(InetAddress.getByName(redirectUri.getHost()).getHostAddress())) {\n                                    return Mono.error(new AppsmithPluginException(AppsmithPluginError.PLUGIN_EXECUTE_ARGUMENT_ERROR, \"Host not allowed.\"));\n                                }\n                            } catch (URISyntaxException | UnknownHostException e) {\n                                return Mono.error(new AppsmithPluginException(AppsmithPluginError.PLUGIN_ERROR, e));\n                            }\n                            return httpCall(webClient, httpMethod, redirectUri, finalRequestBody, iteration + 1,\n                                    contentType);\n                        }\n                        return Mono.just(response);\n                    });\n        }",
  "abstract_func": "private Mono<ClientResponse> httpCall(WebClient VAR_0, HttpMethod VAR_1, URI VAR_2, Object VAR_3,\n                                              int VAR_4, String VAR_5) {\n            if (VAR_4 == VAR_6) {\n                return VAR_7.error(new AppsmithPluginException(\n                        VAR_8.PLUGIN_ERROR,\n                        \"Exceeded the HTTP redirect limits of \" + VAR_6\n                ));\n            }\n\n            assert VAR_3 instanceof BodyInserter<?, ?>;\n            BodyInserter<?, ?> VAR_9 = (BodyInserter<?, ?>) VAR_3;\n\n            return VAR_0\n                    .method(VAR_1)\n                    .uri(VAR_2)\n                    .body((BodyInserter<?, ? super ClientHttpRequest>) VAR_9)\n                    .exchange()\n                    .doOnError(VAR_10 -> VAR_7.error(new AppsmithPluginException(VAR_8.PLUGIN_ERROR, VAR_10)))\n                    .flatMap(VAR_11 -> {\n                        if (VAR_11.statusCode().is3xxRedirection()) {\n                            String VAR_12 = VAR_11.headers().header(\"Location\").get(0);\n                            /* COMMENT_0 */\n                                   \n                                                                                                                                \n                                                                                                                      \n                                                                            \n                                                                                                 \n                               \n                            URI VAR_13 = null;\n                            try {\n                                VAR_13 = new URI(VAR_12);\n                                if (VAR_14.contains(VAR_13.getHost())\n                                        || VAR_14.contains(VAR_15.getByName(VAR_13.getHost()).getHostAddress())) {\n                                    return VAR_7.error(new AppsmithPluginException(VAR_8.PLUGIN_EXECUTE_ARGUMENT_ERROR, \"Host not allowed.\"));\n                                }\n                            } catch (URISyntaxException | UnknownHostException VAR_10) {\n                                return VAR_7.error(new AppsmithPluginException(VAR_8.PLUGIN_ERROR, VAR_10));\n                            }\n                            return httpCall(VAR_0, VAR_1, VAR_13, VAR_9, VAR_4 + 1,\n                                    VAR_5);\n                        }\n                        return VAR_7.just(VAR_11);\n                    });\n        }",
  "func_graph_path": "appsmithorg/appsmith/c59351ef94f9780c2a1ffc991e29b9272ab9fe64/RestApiPlugin.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -29,7 +29,11 @@\n                             URI redirectUri = null;\n                             try {\n                                 redirectUri = new URI(redirectUrl);\n-                            } catch (URISyntaxException e) {\n+                                if (DISALLOWED_HOSTS.contains(redirectUri.getHost())\n+                                        || DISALLOWED_HOSTS.contains(InetAddress.getByName(redirectUri.getHost()).getHostAddress())) {\n+                                    return Mono.error(new AppsmithPluginException(AppsmithPluginError.PLUGIN_EXECUTE_ARGUMENT_ERROR, \"Host not allowed.\"));\n+                                }\n+                            } catch (URISyntaxException | UnknownHostException e) {\n                                 return Mono.error(new AppsmithPluginException(AppsmithPluginError.PLUGIN_ERROR, e));\n                             }\n                             return httpCall(webClient, httpMethod, redirectUri, finalRequestBody, iteration + 1,",
  "diff_line_info": {
    "deleted_lines": [
      "                            } catch (URISyntaxException e) {"
    ],
    "added_lines": [
      "                                if (DISALLOWED_HOSTS.contains(redirectUri.getHost())",
      "                                        || DISALLOWED_HOSTS.contains(InetAddress.getByName(redirectUri.getHost()).getHostAddress())) {",
      "                                    return Mono.error(new AppsmithPluginException(AppsmithPluginError.PLUGIN_EXECUTE_ARGUMENT_ERROR, \"Host not allowed.\"));",
      "                                }",
      "                            } catch (URISyntaxException | UnknownHostException e) {"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/appsmithorg/appsmith/pull/15782",
  "description": {
    "pr_info": {
      "title": "fix: Adding a check for invalid hosts on redirects as well",
      "number": 15782
    },
    "comment": [
      "## Description\r\n\r\nFixes issue for checking for invalid hosts even when there are redirects in the Rest API plugin.\r\n\r\n## Type of change\r\n\r\n- Bug fix (non-breaking change which fixes an issue)\r\n\r\n## How Has This Been Tested?\r\n\r\n- Junit test\r\n\r\n## Checklist:\r\n\r\n- [ ] My code follows the style guidelines of this project\r\n- [ ] I have performed a self-review of my own code\r\n- [ ] I have commented my code, particularly in hard-to-understand areas\r\n- [ ] I have made corresponding changes to the documentation\r\n- [ ] My changes generate no new warnings\r\n- [ ] I have added tests that prove my fix is effective or that my feature works\r\n- [ ] New and existing unit tests pass locally with my changes\r\n",
      "**The latest updates on your projects**. Learn more about [Vercel for Git ↗︎](https://vercel.link/github-learn-more)\n\n\n<details><summary>1 Ignored Deployment</summary>\n\n| Name | Status | Preview | Updated |\n| :--- | :----- | :------ | :------ |\n| **appsmith** | ⬜️ Ignored ([Inspect](https://vercel.com/get-appsmith/appsmith/5dPrX1voRwFoE279ZmoGTWC82Tpm)) |  | Aug 6, 2022 at 6:42AM (UTC) |\n</details>\n\n"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix;  \n**Confidence:** 0.95"
}