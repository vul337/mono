{
  "cve_id": "CVE-2022-36044",
  "cwe_ids": [
    "CWE-787"
  ],
  "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H",
  "cvss_is_v3": true,
  "repo_name": "rizinorg/rizin",
  "commit_msg": "fix oob read on luac",
  "commit_hash": "07b43bc8aa1ffebd9b68d60624c9610cf7e460c7",
  "git_url": "https://github.com/rizinorg/rizin/commit/07b43bc8aa1ffebd9b68d60624c9610cf7e460c7",
  "file_path": "librz/bin/bobj.c",
  "func_name": "classes_from_symbols",
  "func_before": "static RzList *classes_from_symbols(RzBinFile *bf) {\n\tRzBinSymbol *sym;\n\tRzListIter *iter;\n\trz_list_foreach (bf->o->symbols, iter, sym) {\n\t\tif (sym->name[0] != '_') {\n\t\t\tcontinue;\n\t\t}\n\t\tconst char *cn = sym->classname;\n\t\tif (cn) {\n\t\t\tRzBinClass *c = rz_bin_file_add_class(bf, sym->classname, NULL, 0);\n\t\t\tif (!c) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// swift specific\n\t\t\tchar *dn = sym->dname;\n\t\t\tchar *fn = swiftField(dn, cn);\n\t\t\tif (fn) {\n\t\t\t\tRzBinField *f = rz_bin_field_new(sym->paddr, sym->vaddr, sym->size, fn, NULL, NULL, false);\n\t\t\t\trz_list_append(c->fields, f);\n\t\t\t\tfree(fn);\n\t\t\t} else {\n\t\t\t\tchar *mn = strstr(dn, \"..\");\n\t\t\t\tif (!mn) {\n\t\t\t\t\tmn = strstr(dn, cn);\n\t\t\t\t\tif (mn && mn[strlen(cn)] == '.') {\n\t\t\t\t\t\trz_list_append(c->methods, sym);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn bf->o->classes;\n}",
  "abstract_func_before": "static RzList *classes_from_symbols(RzBinFile *VAR_0) {\n\tRzBinSymbol *VAR_1;\n\tRzListIter *VAR_2;\n\trz_list_foreach (VAR_0->o->symbols, VAR_2, VAR_1) {\n\t\tif (VAR_1->name[0] != '_') {\n\t\t\tcontinue;\n\t\t}\n\t\tconst char *VAR_3 = VAR_1->classname;\n\t\tif (VAR_3) {\n\t\t\tRzBinClass *VAR_4 = rz_bin_file_add_class(VAR_0, VAR_1->classname, NULL, 0);\n\t\t\tif (!VAR_4) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t/* COMMENT_0 */\n\t\t\tchar *VAR_5 = VAR_1->dname;\n\t\t\tchar *VAR_6 = swiftField(VAR_5, VAR_3);\n\t\t\tif (VAR_6) {\n\t\t\t\tRzBinField *VAR_7 = rz_bin_field_new(VAR_1->paddr, VAR_1->vaddr, VAR_1->size, VAR_6, NULL, NULL, false);\n\t\t\t\trz_list_append(VAR_4->fields, VAR_7);\n\t\t\t\tfree(VAR_6);\n\t\t\t} else {\n\t\t\t\tchar *VAR_8 = strstr(VAR_5, \"..\");\n\t\t\t\tif (!VAR_8) {\n\t\t\t\t\tVAR_8 = strstr(VAR_5, VAR_3);\n\t\t\t\t\tif (VAR_8 && VAR_8[strlen(VAR_3)] == '.') {\n\t\t\t\t\t\trz_list_append(VAR_4->methods, VAR_1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn VAR_0->o->classes;\n}",
  "func_graph_path_before": "rizinorg/rizin/07b43bc8aa1ffebd9b68d60624c9610cf7e460c7/bobj.c/vul/before/0.json",
  "func": "static RzList *classes_from_symbols(RzBinFile *bf) {\n\tRzBinSymbol *sym;\n\tRzListIter *iter;\n\trz_list_foreach (bf->o->symbols, iter, sym) {\n\t\tif (!sym->name || sym->name[0] != '_') {\n\t\t\tcontinue;\n\t\t}\n\t\tconst char *cn = sym->classname;\n\t\tif (cn) {\n\t\t\tRzBinClass *c = rz_bin_file_add_class(bf, sym->classname, NULL, 0);\n\t\t\tif (!c) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// swift specific\n\t\t\tchar *dn = sym->dname;\n\t\t\tchar *fn = swiftField(dn, cn);\n\t\t\tif (fn) {\n\t\t\t\tRzBinField *f = rz_bin_field_new(sym->paddr, sym->vaddr, sym->size, fn, NULL, NULL, false);\n\t\t\t\trz_list_append(c->fields, f);\n\t\t\t\tfree(fn);\n\t\t\t} else {\n\t\t\t\tchar *mn = strstr(dn, \"..\");\n\t\t\t\tif (!mn) {\n\t\t\t\t\tmn = strstr(dn, cn);\n\t\t\t\t\tif (mn && mn[strlen(cn)] == '.') {\n\t\t\t\t\t\trz_list_append(c->methods, sym);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn bf->o->classes;\n}",
  "abstract_func": "static RzList *classes_from_symbols(RzBinFile *VAR_0) {\n\tRzBinSymbol *VAR_1;\n\tRzListIter *VAR_2;\n\trz_list_foreach (VAR_0->o->symbols, VAR_2, VAR_1) {\n\t\tif (!VAR_1->name || VAR_1->name[0] != '_') {\n\t\t\tcontinue;\n\t\t}\n\t\tconst char *VAR_3 = VAR_1->classname;\n\t\tif (VAR_3) {\n\t\t\tRzBinClass *VAR_4 = rz_bin_file_add_class(VAR_0, VAR_1->classname, NULL, 0);\n\t\t\tif (!VAR_4) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t/* COMMENT_0 */\n\t\t\tchar *VAR_5 = VAR_1->dname;\n\t\t\tchar *VAR_6 = swiftField(VAR_5, VAR_3);\n\t\t\tif (VAR_6) {\n\t\t\t\tRzBinField *VAR_7 = rz_bin_field_new(VAR_1->paddr, VAR_1->vaddr, VAR_1->size, VAR_6, NULL, NULL, false);\n\t\t\t\trz_list_append(VAR_4->fields, VAR_7);\n\t\t\t\tfree(VAR_6);\n\t\t\t} else {\n\t\t\t\tchar *VAR_8 = strstr(VAR_5, \"..\");\n\t\t\t\tif (!VAR_8) {\n\t\t\t\t\tVAR_8 = strstr(VAR_5, VAR_3);\n\t\t\t\t\tif (VAR_8 && VAR_8[strlen(VAR_3)] == '.') {\n\t\t\t\t\t\trz_list_append(VAR_4->methods, VAR_1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn VAR_0->o->classes;\n}",
  "func_graph_path": "rizinorg/rizin/07b43bc8aa1ffebd9b68d60624c9610cf7e460c7/bobj.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -2,7 +2,7 @@\n \tRzBinSymbol *sym;\n \tRzListIter *iter;\n \trz_list_foreach (bf->o->symbols, iter, sym) {\n-\t\tif (sym->name[0] != '_') {\n+\t\tif (!sym->name || sym->name[0] != '_') {\n \t\t\tcontinue;\n \t\t}\n \t\tconst char *cn = sym->classname;",
  "diff_line_info": {
    "deleted_lines": [
      "\t\tif (sym->name[0] != '_') {"
    ],
    "added_lines": [
      "\t\tif (!sym->name || sym->name[0] != '_') {"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/rizinorg/rizin/pull/2940",
  "description": {
    "pr_info": {
      "title": "Fix 2935 and 2936",
      "number": 2940
    },
    "comment": [
      "# DO NOT SQUASH\r\n\r\n**Your checklist for this pull request**\r\n- [ ] I've read the [guidelines for contributing](https://github.com/rizinorg/rizin/blob/master/DEVELOPERS.md) to this repository\r\n- [ ] I made sure to follow the project's [coding style](https://github.com/rizinorg/rizin/blob/master/DEVELOPERS.md#code-style)\r\n- [ ] I've documented or updated the documentation of every function and struct this PR changes. If not so I've explained why.\r\n- [ ] I've added tests that prove my fix is effective or that my feature works (if possible)\r\n- [ ] I've updated the [rizin book](https://github.com/rizinorg/book) with the relevant information (if needed)\r\n\r\n**Detailed description**\r\n\r\nFix #2935 \r\nFix #2936",
      "@kobrineli i cannot reproduce the heap overflow after i have fixed the integer overflow, but please confirm it if you can.",
      "@wargio Can't reproduce issue #2935, but still can reproduce out of bounds on `memmove` from #2936 on the same input that I sent to you by email.",
      "> @wargio Can't reproduce issue #2935, but still can reproduce out of bounds on `memmove` from #2936 on the same input that I sent to you by email.\r\n\r\nI cannot\r\n![image](https://user-images.githubusercontent.com/561184/185769291-0e080668-7476-4579-9a23-e99d9392a66e.png)\r\n",
      "I have refactored bin_sym plugin since it was a bit messy and added some checks. try again with these changes.",
      "Your fix will be beneficial also for https://github.com/rizinorg/rizin/issues/297",
      "@wargio Checked, now it works fine"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.8,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.8  \n  The fix addresses an out-of-bounds read vulnerability, a clear security concern, and the code change appropriately mitigates this issue. While lacking a specific CVE reference, the commit message and code modify critical memory access, confirming it as a security fix.\n\n**Step-by-Step Explanation:**\n\n1. **Commit Message Analysis:** The commit message explicitly mentions 'fix oob read on luac,' indicating a security issue related to an out-of-bounds (OOB) memory read.\n\n2. **Code Diff Review:** The change introduces a null check before accessing `sym->name[0]`, preventing a potential OOB read and null pointer dereference.\n\n3. **Vulnerability Context:** The issue is flagged as critical with tickets #2935 and #2936, aligning with security concerns.\n\n4. **Security Fix Confirmation:** The code addresses a memory access issue, which is a common security vulnerability, thus qualifying as a security fix.\n\n5. **Confidence Level:** 0.8. The fix is clear, although no explicit CVE is cited; the context and code indicate a security concern.\n\n**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.8"
}