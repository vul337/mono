{
  "cve_id": "CVE-2017-18021",
  "cwe_ids": [
    "CWE-338"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:N/A:N",
  "cvss_is_v3": false,
  "repo_name": "IJHack/QtPass",
  "commit_msg": "Qt 5.9 fallback (unix) from #338",
  "commit_hash": "2c72ed4f9809fc781aa97af43767ee0b7c8ca3b0",
  "git_url": "https://github.com/IJHack/QtPass/commit/2c72ed4f9809fc781aa97af43767ee0b7c8ca3b0",
  "file_path": "src/pass.cpp",
  "func_name": "Pass::boundedRandom",
  "func_before": "quint32 Pass::boundedRandom(quint32 bound) {\n  if (bound < 2)\n    return 0;\n\n  quint32 randval;\n  const quint32 max_mod_bound = (1 + ~bound) % bound;\n\n  do\n    randval = QRandomGenerator::system()->generate();\n  while (randval < max_mod_bound);\n\n  return randval % bound;\n}",
  "abstract_func_before": "quint32 Pass::boundedRandom(quint32 VAR_0) {\n  if (VAR_0 < 2)\n    return 0;\n\n  quint32 VAR_1;\n  const quint32 VAR_2 = (1 + ~VAR_0) % VAR_0;\n\n  do\n    VAR_1 = QRandomGenerator::system()->generate();\n  while (VAR_1 < VAR_2);\n\n  return VAR_1 % VAR_0;\n}",
  "func_graph_path_before": "IJHack/QtPass/2c72ed4f9809fc781aa97af43767ee0b7c8ca3b0/pass.cpp/vul/before/0.json",
  "func": "quint32 Pass::boundedRandom(quint32 bound) {\n  if (bound < 2) {\n    return 0;\n  }\n\n  quint32 randval;\n  const quint32 max_mod_bound = (1 + ~bound) % bound;\n\n#if QT_VERSION < QT_VERSION_CHECK(5, 10, 0)\n  if (fd == -1) {\n    assert((fd = open(\"/dev/urandom\", O_RDONLY)) >= 0);\n  }\n#endif\n\n  do {\n#if QT_VERSION < QT_VERSION_CHECK(5, 10, 0)\n    assert(read(fd, &randval, sizeof(randval)) == sizeof(randval));\n#else\n    randval = QRandomGenerator::system()->generate();\n#endif\n  } while (randval < max_mod_bound);\n\n  return randval % bound;\n}",
  "abstract_func": "quint32 Pass::boundedRandom(quint32 VAR_0) {\n  if (VAR_0 < 2) {\n    return 0;\n  }\n\n  quint32 VAR_1;\n  const quint32 VAR_2 = (1 + ~VAR_0) % VAR_0;\n\n#if VAR_3 < QT_VERSION_CHECK(5, 10, 0)\n  if (VAR_4 == -1) {\n    assert((VAR_4 = open(\"/dev/urandom\", VAR_5)) >= 0);\n  }\n#endif\n\n  do {\n#if VAR_3 < QT_VERSION_CHECK(5, 10, 0)\n    assert(read(VAR_4, &VAR_1, sizeof(VAR_1)) == sizeof(VAR_1));\n#else\n    VAR_1 = QRandomGenerator::system()->generate();\n#endif\n  } while (VAR_1 < VAR_2);\n\n  return VAR_1 % VAR_0;\n}",
  "func_graph_path": "IJHack/QtPass/2c72ed4f9809fc781aa97af43767ee0b7c8ca3b0/pass.cpp/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,13 +1,24 @@\n quint32 Pass::boundedRandom(quint32 bound) {\n-  if (bound < 2)\n+  if (bound < 2) {\n     return 0;\n+  }\n \n   quint32 randval;\n   const quint32 max_mod_bound = (1 + ~bound) % bound;\n \n-  do\n+#if QT_VERSION < QT_VERSION_CHECK(5, 10, 0)\n+  if (fd == -1) {\n+    assert((fd = open(\"/dev/urandom\", O_RDONLY)) >= 0);\n+  }\n+#endif\n+\n+  do {\n+#if QT_VERSION < QT_VERSION_CHECK(5, 10, 0)\n+    assert(read(fd, &randval, sizeof(randval)) == sizeof(randval));\n+#else\n     randval = QRandomGenerator::system()->generate();\n-  while (randval < max_mod_bound);\n+#endif\n+  } while (randval < max_mod_bound);\n \n   return randval % bound;\n }",
  "diff_line_info": {
    "deleted_lines": [
      "  if (bound < 2)",
      "  do",
      "  while (randval < max_mod_bound);"
    ],
    "added_lines": [
      "  if (bound < 2) {",
      "  }",
      "#if QT_VERSION < QT_VERSION_CHECK(5, 10, 0)",
      "  if (fd == -1) {",
      "    assert((fd = open(\"/dev/urandom\", O_RDONLY)) >= 0);",
      "  }",
      "#endif",
      "",
      "  do {",
      "#if QT_VERSION < QT_VERSION_CHECK(5, 10, 0)",
      "    assert(read(fd, &randval, sizeof(randval)) == sizeof(randval));",
      "#else",
      "#endif",
      "  } while (randval < max_mod_bound);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/IJHack/QtPass/pull/342",
  "description": {
    "pr_info": {
      "title": "Insecure password generation",
      "number": 342
    },
    "comment": [
      "Merge @zx2c4 proposed fix for #338\r\n\r\nNote, only works on Windows with Qt 5.10 +",
      "\n[![Coverage Status](https://coveralls.io/builds/14865635/badge)](https://coveralls.io/builds/14865635)\n\nCoverage decreased (-0.004%) to 1.776% when pulling **2bb71d4e6681f9791fe8d69d62ff980b32032d0b on insecure_password_generation** into **f3e89ac2bb1dbd9821a4034d9d8219feb5826148 on master**.\n"
    ]
  },
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Defect Remediation & Feature Upgrades; **Confidence:** 0.90  \n*The patch addresses a bug related to Qt version compatibility and Unix system handling, improving feature correctness rather than fixing a security vulnerability.*"
}