{
  "cve_id": "CVE-2019-1010294",
  "cwe_ids": [
    "CWE-189"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:N/A:N",
  "cvss_is_v3": false,
  "repo_name": "OP-TEE/optee_os",
  "commit_msg": "core: clear the entire TA area\n\nPreviously we cleared (memset to zero) the size corresponding to code\nand data segments, however the allocation for the TA is made on the\ngranularity of the memory pool, meaning that we did not clear all memory\nand because of that we could potentially leak code and data of a\nprevious loaded TA.\n\nFixes: OP-TEE-2018-0006: \"Potential disclosure of previously loaded TA\ncode and data\"\n\nSigned-off-by: Joakim Bech <joakim.bech@linaro.org>\nTested-by: Joakim Bech <joakim.bech@linaro.org> (QEMU v7, v8)\nSuggested-by: Jens Wiklander <jens.wiklander@linaro.org>\nReviewed-by: Jens Wiklander <jens.wiklander@linaro.org>\nReported-by: Riscure <inforequest@riscure.com>\nReported-by: Alyssa Milburn <a.a.milburn@vu.nl>\nAcked-by: Etienne Carriere <etienne.carriere@linaro.org>",
  "commit_hash": "7e768f8a473409215fe3fff8f6e31f8a3a0103c6",
  "git_url": "https://github.com/OP-TEE/optee_os/commit/7e768f8a473409215fe3fff8f6e31f8a3a0103c6",
  "file_path": "core/arch/arm/kernel/user_ta.c",
  "func_name": "alloc_ta_mem",
  "func_before": "static struct mobj *alloc_ta_mem(size_t size)\n{\n#ifdef CFG_PAGED_USER_TA\n\treturn mobj_paged_alloc(size);\n#else\n\tstruct mobj *mobj = mobj_mm_alloc(mobj_sec_ddr, size, &tee_mm_sec_ddr);\n\n\tif (mobj)\n\t\tmemset(mobj_get_va(mobj, 0), 0, size);\n\treturn mobj;\n#endif\n}",
  "abstract_func_before": "static struct mobj *alloc_ta_mem(size_t VAR_0)\n{\n#ifdef VAR_1\n\treturn mobj_paged_alloc(VAR_0);\n#else\n\tstruct mobj *mobj = mobj_mm_alloc(VAR_2, VAR_0, &VAR_3);\n\n\tif (mobj)\n\t\tmemset(mobj_get_va(mobj, 0), 0, VAR_0);\n\treturn mobj;\n#endif\n}",
  "func_graph_path_before": "OP-TEE/optee_os/7e768f8a473409215fe3fff8f6e31f8a3a0103c6/user_ta.c/vul/before/0.json",
  "func": "static struct mobj *alloc_ta_mem(size_t size)\n{\n#ifdef CFG_PAGED_USER_TA\n\treturn mobj_paged_alloc(size);\n#else\n\tstruct mobj *mobj = mobj_mm_alloc(mobj_sec_ddr, size, &tee_mm_sec_ddr);\n\n\tif (mobj) {\n\t\tsize_t granularity = BIT(tee_mm_sec_ddr.shift);\n\n\t\t/* Round up to allocation granularity size */\n\t\tmemset(mobj_get_va(mobj, 0), 0, ROUNDUP(size, granularity));\n\t}\n\treturn mobj;\n#endif\n}",
  "abstract_func": "static struct mobj *alloc_ta_mem(size_t VAR_0)\n{\n#ifdef VAR_1\n\treturn mobj_paged_alloc(VAR_0);\n#else\n\tstruct mobj *mobj = mobj_mm_alloc(VAR_2, VAR_0, &VAR_3);\n\n\tif (mobj) {\n\t\tsize_t VAR_4 = BIT(VAR_3.shift);\n\n\t\t/* COMMENT_0 */\n\t\tmemset(mobj_get_va(mobj, 0), 0, ROUNDUP(VAR_0, VAR_4));\n\t}\n\treturn mobj;\n#endif\n}",
  "func_graph_path": "OP-TEE/optee_os/7e768f8a473409215fe3fff8f6e31f8a3a0103c6/user_ta.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -5,8 +5,12 @@\n #else\n \tstruct mobj *mobj = mobj_mm_alloc(mobj_sec_ddr, size, &tee_mm_sec_ddr);\n \n-\tif (mobj)\n-\t\tmemset(mobj_get_va(mobj, 0), 0, size);\n+\tif (mobj) {\n+\t\tsize_t granularity = BIT(tee_mm_sec_ddr.shift);\n+\n+\t\t/* Round up to allocation granularity size */\n+\t\tmemset(mobj_get_va(mobj, 0), 0, ROUNDUP(size, granularity));\n+\t}\n \treturn mobj;\n #endif\n }",
  "diff_line_info": {
    "deleted_lines": [
      "\tif (mobj)",
      "\t\tmemset(mobj_get_va(mobj, 0), 0, size);"
    ],
    "added_lines": [
      "\tif (mobj) {",
      "\t\tsize_t granularity = BIT(tee_mm_sec_ddr.shift);",
      "",
      "\t\t/* Round up to allocation granularity size */",
      "\t\tmemset(mobj_get_va(mobj, 0), 0, ROUNDUP(size, granularity));",
      "\t}"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/OP-TEE/optee_os/pull/2745",
  "description": {
    "pr_info": {
      "title": "Fixes for security potential issues reported by Riscure",
      "number": 2745
    },
    "comment": [
      "This patch series address a list of potential security issues and (lack of) hardening as identified by [Riscure](https://www.riscure.com/). More details about the issues themselves will be submitted to https://www.op-tee.org/security-advisories in the coming weeks. \r\n\r\nNote that patches here are already \"pre-reviewed\" (internally at Linaro) and the reason for that is that all patches have already been circulated to trustworthy stakeholders according to our disclosure plan (see the draft [here](https://optee.readthedocs.io/general/disclousure.html)). Having that said, we encourage OP-TEE maintainers and other users to chime in and do a final review here on GitHub.\r\n\r\nI've just rebased it on top of master and all tests in xtest passes. ",
      "I've seen the Shippable error, I'll have a look at it.",
      "> I've seen the Shippable error, I'll have a look at it.\r\n\r\nI've changed the macro to only consider SMALL_PAGE_SIZE, since that is what we check against. Will push a fix soon.",
      "Pushed fixes for all (fixable) comments so far. I've saved the ones that has to be done at rebase/force push time.",
      "LGTM, you may add my:\r\n\r\n`Acked-by: Jerome Forissier <jerome.forissier@linaro.org>`\r\n\r\n...to all the commits that deal with CFG_ flags.",
      "`Acked-by: Etienne Carriere <etienne.carriere@linaro.org>` for the whole with some minor comments.",
      "> `Acked-by: Etienne Carriere <etienne.carriere@linaro.org>` for the whole with some minor comments.\r\n\r\n@etienne-lms , I'm confused. I cannot see any comments from you. Is GitHub playing me a trick here?",
      "Pushed a few more fixes.\r\n\r\nWaiting for:\r\n- Etienne's follow up answers on my replies to his findings.\r\n\r\nTo-do at rebase/force/squash:\r\n- Add Acked-by tags.\r\n- Fix wrong author vs Signed-Off-By.\r\n",
      "- Fixed SoB / Author inconsistency.\r\n- Fixed all outstanding review comments.\r\n- Fixed spelling error found by checkpatch / Shippable.\r\n- Added A-B and T-B tags.\r\n\r\nSo, if IBART and friends are happy .... then ...\r\nSquashed, rebased and tag(s) applied (should be) ready for merge! Thanks!",
      "Sorry, I still have comments on the last 6 commits.\r\n\r\n- \"plat-all: Enable CFG_CORE_STACK_PROTECTOR_STRONG=y by default\" removes `CFG_WITH_STACK_CANARIES ?= y` from `rpi3`. It also enables`CFG_TA_STACK_PROTECTOR_STRONG ?= y` which is introduced in a later commit. Overall I think this commit had better be folded into the parent commit \"core: introduce CFG_CORE_STACK_PROTECTOR_STRONG flag\" (which will also avoid a Travis warning about missing commit description).\r\n- \"ta-dev-kit: enable _FORTIFY_SOURCE=2 on optimized builds\": you say \"shall only be enabled...\", so why isn't it part of commit \"ta-dev-kit: Introduce CFG_TA_FORTIFY_SOURCE\"?\r\n\r\nAlso I think the Travis warnings (missing commit descriptions) should be fixed. When introducing a new flag, we should explain what it does, why we add it, and what is its default value. Things I expect to understand when reading the description are: what is a stack protector? What happens when the \"protection\" detects that something is wrong? Does the TA panic? Does the TEE core panic? Same for the \"fortify\" option.\r\n\r\nIn the end I'd like to have 4 commits:\r\n```\r\n    ta: introduce CFG_TA_STACK_PROTECTOR_STRONG\r\n    ta: introduce CFG_TA_FORTIFY_SOURCE\r\n    core: introduce CFG_CORE_STACK_PROTECTOR_STRONG\r\n    core: introduce CFG_CORE_FORTIFY_SOURCE\r\n```\r\n",
      "@jforissier , makes sense. I'll do another clean-up / clarification round, stay tuned.",
      "Easier said that done trying to trigger the protectors, since I get data abort when trying to put together examples that should trigger the stack-protector for example. I'd expect some output like \"`*** stack smashing detected ***` at least before the data-abort.",
      "@jbech-linaro hard to find documentation, but it looks like the compiler will just call `__stack_chk_fail()`, which we happen to define here: https://github.com/OP-TEE/optee_os/blob/3.3.0/lib/libutils/isoc/stack_check.c\r\nAt least, that's what I can see in the disassembly (`tee.dmp` or `objdump -ldx ta.elf`).\r\n\r\nSo, if I understand correctly, the TA or the TEE core thread would just hang when stack smashing is detected (instead of proceeding with corrupt data).",
      "I think I can trigger it successfully now, since without using the flags I get data-aborts, with the flags enabled I get stuck. I've tried to figure out where I am by checking GDB, but so far I haven't been able to make sense out of the address. I'll try to see whether it ends up in `stack_check.c` or not.",
      "@jbech-linaro sounds good. Perhaps `__stack_chk_fail()` should `EMSG()` and call `panic()` (`ifdef __KERNEL__`) or `abort()`/`utee_panic()` (user mode TA). Or is there any reason we could not do that in this context?",
      "I've tried setting a breakpoint at `__stack_chk_fail`, but it doesn't seem to hang there. But I can see my data (`foo(AAAA...)`) in the `r2` when breaking, so I suspect it is stuck somewhere in strcpy, and/or \"panic\" while(1) as a consequence of this.\r\n```bash\r\nfoo(\"AAAAAAA.....\");\r\n\r\nvoid foo(char *bar) {\r\nchar buffer[16];\r\nstrcpy(buffer, bar)\r\n}\r\n```\r\n\r\n```\r\nr2 = 0x00414141\r\n...\r\n```\r\nI think I will skip the CFG_-patches and submit them as a separate PR if/when I have some time to spare. They weren't really part of the Riscure report, I just added it, since I thought it'd be useful to catch things.",
      "> I think I will skip the CFG_-patches [...]\r\n\r\nSure. They are definitely useful IMO, but certainly not required for 3.4.0. Thanks!",
      "Two things ....\r\n1. I've removed the CFG patches from this PR and pushed that.\r\n2. I've rebuilt QEMU with SMP=1 and now!!! Lo and behold! I'm stuck in .... drum roll ... `__stack_chk_fail() { while (1) }`.\r\n\r\nSo it seems to work as expected.\r\n\r\nAnyhow, as before, if IBART and friends are happy:\r\nSquashed, rebased and tag(s) applied (should be) ready for merge! Thanks!"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 1.0"
}