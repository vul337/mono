{
  "cve_id": "CVE-2020-7105",
  "cwe_ids": [
    "CWE-476"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "redis/hiredis",
  "commit_msg": "Safe allocation wrappers (#754)\n\nCreate allocation wrappers with a configurable OOM handler (defaults to abort()).\r\n\r\nSee #752, #747",
  "commit_hash": "669ac9d0c843f9ccf07d4969ff6bff75fafee01f",
  "git_url": "https://github.com/redis/hiredis/commit/669ac9d0c843f9ccf07d4969ff6bff75fafee01f",
  "file_path": "async.c",
  "func_name": "redisAsyncSetTimeout",
  "func_before": "void redisAsyncSetTimeout(redisAsyncContext *ac, struct timeval tv) {\n    if (!ac->c.timeout) {\n        ac->c.timeout = calloc(1, sizeof(tv));\n    }\n\n    if (tv.tv_sec == ac->c.timeout->tv_sec &&\n        tv.tv_usec == ac->c.timeout->tv_usec) {\n        return;\n    }\n\n    *ac->c.timeout = tv;\n}",
  "abstract_func_before": "void redisAsyncSetTimeout(redisAsyncContext *VAR_0, struct timeval VAR_1) {\n    if (!VAR_0->c.timeout) {\n        VAR_0->c.timeout = calloc(1, sizeof(VAR_1));\n    }\n\n    if (VAR_1.tv_sec == VAR_0->c.timeout->tv_sec &&\n        VAR_1.tv_usec == VAR_0->c.timeout->tv_usec) {\n        return;\n    }\n\n    *VAR_0->c.timeout = VAR_1;\n}",
  "func_graph_path_before": "redis/hiredis/669ac9d0c843f9ccf07d4969ff6bff75fafee01f/async.c/vul/before/0.json",
  "func": "void redisAsyncSetTimeout(redisAsyncContext *ac, struct timeval tv) {\n    if (!ac->c.timeout) {\n        ac->c.timeout = hi_calloc(1, sizeof(tv));\n    }\n\n    if (tv.tv_sec == ac->c.timeout->tv_sec &&\n        tv.tv_usec == ac->c.timeout->tv_usec) {\n        return;\n    }\n\n    *ac->c.timeout = tv;\n}",
  "abstract_func": "void redisAsyncSetTimeout(redisAsyncContext *VAR_0, struct timeval VAR_1) {\n    if (!VAR_0->c.timeout) {\n        VAR_0->c.timeout = hi_calloc(1, sizeof(VAR_1));\n    }\n\n    if (VAR_1.tv_sec == VAR_0->c.timeout->tv_sec &&\n        VAR_1.tv_usec == VAR_0->c.timeout->tv_usec) {\n        return;\n    }\n\n    *VAR_0->c.timeout = VAR_1;\n}",
  "func_graph_path": "redis/hiredis/669ac9d0c843f9ccf07d4969ff6bff75fafee01f/async.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,6 +1,6 @@\n void redisAsyncSetTimeout(redisAsyncContext *ac, struct timeval tv) {\n     if (!ac->c.timeout) {\n-        ac->c.timeout = calloc(1, sizeof(tv));\n+        ac->c.timeout = hi_calloc(1, sizeof(tv));\n     }\n \n     if (tv.tv_sec == ac->c.timeout->tv_sec &&",
  "diff_line_info": {
    "deleted_lines": [
      "        ac->c.timeout = calloc(1, sizeof(tv));"
    ],
    "added_lines": [
      "        ac->c.timeout = hi_calloc(1, sizeof(tv));"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/redis/hiredis/pull/754",
  "description": {
    "pr_info": {
      "title": "Safe allocation wrappers",
      "number": 754
    },
    "comment": [
      "Adds allocation wrappers that invokes a defined OOM handler.\r\n\r\nMy goal was the smallest surface area of changes possible.  Once we merge this it might be prudent to replace every `malloc`/`free` call with our wrappers.",
      "Just quoting the [last parts of the conversation in a merged PR](https://github.com/redis/hiredis/pull/752#issuecomment-577429138) from @michael-grunder \r\n\r\n>  @lamby I totally understand not wanting such a huge change just for a patch.\r\n\r\nThanks... and I think the changes in this PR would work for me. :+1: ",
      "Would be great to get some more eyes on this. :)",
      "> are we using asprintf and friends anywhere?\r\n\r\nNo, but `sds` has something similar (e.g. [sdscatfmt](https://github.com/redis/hiredis/blob/0501c623c91344e54cb2775a91509650960789b1/sds.c#L582)) although it appears that we're testing for NULL after every allocation/reallocation. \r\n\r\n",
      "Merged, thanks everyone!"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 0.9\n\nThe patch introduces safe allocation wrappers with an OOM handler, which is a security measure to prevent memory-related vulnerabilities. The changes are consistent with the commit message and vulnerability description, indicating a clear security enhancement.\n\n**Step-by-Step Explanation:**\n\n1. **Input Analysis**: The commit and vulnerability description focus on replacing memory allocation functions to enhance safety.\n2. **Consistency Check**: The code changes match the described intent of using safer allocators.\n3. **Purpose Evaluation**: The changes aim to improve memory management safety, a key security concern.\n4. **Security Assessment**: Replacing standard allocators with custom wrappers is a known security practice for handling memory issues.\n5. **Confidence**: High confidence due to clear alignment between message and code, despite no explicit CVE reference.\n\n**Final Output:**  \n**Final Classification:** Security Vulnerability Fix; **Confidence:** 0.9"
}