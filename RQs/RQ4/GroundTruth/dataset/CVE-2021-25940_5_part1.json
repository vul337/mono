{
  "cve_id": "CVE-2021-25940",
  "cwe_ids": [
    "CWE-613"
  ],
  "cvss_vector": "AV:N/AC:M/Au:S/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "arangodb",
  "commit_msg": "Revive startup parameter `--server.session-timeout` (#14118)\n\nCo-authored-by: Tobias GÃ¶dderz <tobias@arangodb.com>",
  "commit_hash": "e9c6ee9dcca7b9b4fbcd02a0b323d205bee838d3",
  "git_url": "https://github.com/arangodb/arangodb/commit/e9c6ee9dcca7b9b4fbcd02a0b323d205bee838d3",
  "file_path": "arangod/RestServer/ServerFeature.cpp",
  "func_name": "ServerFeature::collectOptions",
  "func_before": "void ServerFeature::collectOptions(std::shared_ptr<ProgramOptions> options) {\n  options->addOption(\"--console\", \"start a JavaScript emergency console\",\n                     new BooleanParameter(&_console));\n\n  options->addSection(\"server\", \"server features\");\n\n  options->addOption(\"--server.rest-server\", \"start a rest-server\",\n                     new BooleanParameter(&_restServer),\n                     arangodb::options::makeDefaultFlags(arangodb::options::Flags::Hidden));\n  \n  options->addOption(\"--server.validate-utf8-strings\", \"perform UTF-8 string validation for incoming JSON and VelocyPack data\",\n                     new BooleanParameter(&_validateUtf8Strings),\n                     arangodb::options::makeDefaultFlags(arangodb::options::Flags::Hidden)).setIntroducedIn(30700);\n\n  options->addOption(\"--javascript.script\", \"run scripts and exit\",\n                     new VectorParameter<StringParameter>(&_scripts));\n\n#if _WIN32\n  options->addOption(\"--console.code-page\",\n                     \"Windows code page to use; defaults to UTF8\",\n                     new UInt16Parameter(&_codePage),\n                     arangodb::options::makeDefaultFlags(arangodb::options::Flags::Hidden));\n#endif\n\n  // add several obsoleted options here\n  options->addSection(\"vst\", \"VelocyStream protocol\", \"\", true, true);\n  options->addObsoleteOption(\"--vst.maxsize\", \"maximal size (in bytes) \"\n                             \"for a VelocyPack chunk\", true);\n  \n  options->addObsoleteOption(\n      \"--server.session-timeout\",\n      \"timeout of web interface server sessions (in seconds)\", true);\n\n  // add obsolete MMFiles WAL options (obsoleted in 3.7)\n  options->addSection(\"wal\", \"WAL of the MMFiles engine\", \"\", true, true);\n  options->addObsoleteOption(\"--wal.allow-oversize-entries\",\n                             \"allow entries that are bigger than '--wal.logfile-size'\", false);\n  options->addObsoleteOption(\"--wal.use-mlock\",\n                             \"mlock WAL logfiles in memory (may require elevated privileges or limits)\", false);\n  options->addObsoleteOption(\"--wal.directory\", \"logfile directory\", true);\n  options->addObsoleteOption(\"--wal.historic-logfiles\", \"maximum number of historic logfiles to keep after collection\", true);\n  options->addObsoleteOption(\"--wal.ignore-logfile-errors\", \n                             \"ignore logfile errors. this will read recoverable data from corrupted logfiles but ignore any unrecoverable data\", false);\n  options->addObsoleteOption(\"--wal.ignore-recovery-errors\", \"continue recovery even if re-applying operations fails\", false);\n  options->addObsoleteOption(\"--wal.flush-timeout\", \"flush timeout (in milliseconds)\", true);\n  options->addObsoleteOption(\"--wal.logfile-size\", \"size of each logfile (in bytes)\", true);\n  options->addObsoleteOption(\"--wal.open-logfiles\", \"maximum number of parallel open logfiles\", true);\n  options->addObsoleteOption(\"--wal.reserve-logfiles\", \"maximum number of reserve logfiles to maintain\", true);\n  options->addObsoleteOption(\"--wal.slots\", \"number of logfile slots to use\", true);\n  options->addObsoleteOption(\"--wal.sync-interval\", \"interval for automatic, non-requested disk syncs (in milliseconds)\", true);\n  options->addObsoleteOption(\"--wal.throttle-when-pending\", \n                             \"throttle writes when at least this many operations are waiting for collection (set to 0 to deactivate write-throttling)\", true);\n  options->addObsoleteOption(\"--wal.throttle-wait\", \"maximum wait time per operation when write-throttled (in milliseconds)\", true);\n}",
  "abstract_func_before": "void ServerFeature::collectOptions(std::shared_ptr<ProgramOptions> VAR_0) {\n  VAR_0->addOption(\"--console\", \"start a JavaScript emergency console\",\n                     new BooleanParameter(&VAR_1));\n\n  VAR_0->addSection(\"server\", \"server features\");\n\n  VAR_0->addOption(\"--server.rest-server\", \"start a rest-server\",\n                     new BooleanParameter(&VAR_2),\n                     arangodb::options::makeDefaultFlags(arangodb::options::Flags::Hidden));\n  \n  VAR_0->addOption(\"--server.validate-utf8-strings\", \"perform UTF-8 string validation for incoming JSON and VelocyPack data\",\n                     new BooleanParameter(&VAR_3),\n                     arangodb::options::makeDefaultFlags(arangodb::options::Flags::Hidden)).setIntroducedIn(30700);\n\n  VAR_0->addOption(\"--javascript.script\", \"run scripts and exit\",\n                     new VectorParameter<StringParameter>(&VAR_4));\n\n#if VAR_5\n  VAR_0->addOption(\"--console.code-page\",\n                     \"Windows code page to use; defaults to UTF8\",\n                     new UInt16Parameter(&VAR_6),\n                     arangodb::options::makeDefaultFlags(arangodb::options::Flags::Hidden));\n#endif\n\n  /* COMMENT_0 */\n  VAR_0->addSection(\"vst\", \"VelocyStream protocol\", \"\", true, true);\n  VAR_0->addObsoleteOption(\"--vst.maxsize\", \"maximal size (in bytes) \"\n                             \"for a VelocyPack chunk\", true);\n  \n  VAR_0->addObsoleteOption(\n      \"--server.session-timeout\",\n      \"timeout of web interface server sessions (in seconds)\", true);\n\n  /* COMMENT_1 */\n  VAR_0->addSection(\"wal\", \"WAL of the MMFiles engine\", \"\", true, true);\n  VAR_0->addObsoleteOption(\"--wal.allow-oversize-entries\",\n                             \"allow entries that are bigger than '--wal.logfile-size'\", false);\n  VAR_0->addObsoleteOption(\"--wal.use-mlock\",\n                             \"mlock WAL logfiles in memory (may require elevated privileges or limits)\", false);\n  VAR_0->addObsoleteOption(\"--wal.directory\", \"logfile directory\", true);\n  VAR_0->addObsoleteOption(\"--wal.historic-logfiles\", \"maximum number of historic logfiles to keep after collection\", true);\n  VAR_0->addObsoleteOption(\"--wal.ignore-logfile-errors\", \n                             \"ignore logfile errors. this will read recoverable data from corrupted logfiles but ignore any unrecoverable data\", false);\n  VAR_0->addObsoleteOption(\"--wal.ignore-recovery-errors\", \"continue recovery even if re-applying operations fails\", false);\n  VAR_0->addObsoleteOption(\"--wal.flush-timeout\", \"flush timeout (in milliseconds)\", true);\n  VAR_0->addObsoleteOption(\"--wal.logfile-size\", \"size of each logfile (in bytes)\", true);\n  VAR_0->addObsoleteOption(\"--wal.open-logfiles\", \"maximum number of parallel open logfiles\", true);\n  VAR_0->addObsoleteOption(\"--wal.reserve-logfiles\", \"maximum number of reserve logfiles to maintain\", true);\n  VAR_0->addObsoleteOption(\"--wal.slots\", \"number of logfile slots to use\", true);\n  VAR_0->addObsoleteOption(\"--wal.sync-interval\", \"interval for automatic, non-requested disk syncs (in milliseconds)\", true);\n  VAR_0->addObsoleteOption(\"--wal.throttle-when-pending\", \n                             \"throttle writes when at least this many operations are waiting for collection (set to 0 to deactivate write-throttling)\", true);\n  VAR_0->addObsoleteOption(\"--wal.throttle-wait\", \"maximum wait time per operation when write-throttled (in milliseconds)\", true);\n}",
  "func_graph_path_before": "arangodb/e9c6ee9dcca7b9b4fbcd02a0b323d205bee838d3/ServerFeature.cpp/vul/before/0.json",
  "func": "void ServerFeature::collectOptions(std::shared_ptr<ProgramOptions> options) {\n  options->addOption(\"--console\", \"start a JavaScript emergency console\",\n                     new BooleanParameter(&_console));\n\n  options->addSection(\"server\", \"server features\");\n\n  options->addOption(\"--server.rest-server\", \"start a rest-server\",\n                     new BooleanParameter(&_restServer),\n                     arangodb::options::makeDefaultFlags(arangodb::options::Flags::Hidden));\n  \n  options->addOption(\"--server.validate-utf8-strings\", \"perform UTF-8 string validation for incoming JSON and VelocyPack data\",\n                     new BooleanParameter(&_validateUtf8Strings),\n                     arangodb::options::makeDefaultFlags(arangodb::options::Flags::Hidden)).setIntroducedIn(30700);\n\n  options->addOption(\"--javascript.script\", \"run scripts and exit\",\n                     new VectorParameter<StringParameter>(&_scripts));\n\n#if _WIN32\n  options->addOption(\"--console.code-page\",\n                     \"Windows code page to use; defaults to UTF8\",\n                     new UInt16Parameter(&_codePage),\n                     arangodb::options::makeDefaultFlags(arangodb::options::Flags::Hidden));\n#endif\n\n  // add several obsoleted options here\n  options->addSection(\"vst\", \"VelocyStream protocol\", \"\", true, true);\n  options->addObsoleteOption(\"--vst.maxsize\", \"maximal size (in bytes) \"\n                             \"for a VelocyPack chunk\", true);\n  \n  // add obsolete MMFiles WAL options (obsoleted in 3.7)\n  options->addSection(\"wal\", \"WAL of the MMFiles engine\", \"\", true, true);\n  options->addObsoleteOption(\"--wal.allow-oversize-entries\",\n                             \"allow entries that are bigger than '--wal.logfile-size'\", false);\n  options->addObsoleteOption(\"--wal.use-mlock\",\n                             \"mlock WAL logfiles in memory (may require elevated privileges or limits)\", false);\n  options->addObsoleteOption(\"--wal.directory\", \"logfile directory\", true);\n  options->addObsoleteOption(\"--wal.historic-logfiles\", \"maximum number of historic logfiles to keep after collection\", true);\n  options->addObsoleteOption(\"--wal.ignore-logfile-errors\", \n                             \"ignore logfile errors. this will read recoverable data from corrupted logfiles but ignore any unrecoverable data\", false);\n  options->addObsoleteOption(\"--wal.ignore-recovery-errors\", \"continue recovery even if re-applying operations fails\", false);\n  options->addObsoleteOption(\"--wal.flush-timeout\", \"flush timeout (in milliseconds)\", true);\n  options->addObsoleteOption(\"--wal.logfile-size\", \"size of each logfile (in bytes)\", true);\n  options->addObsoleteOption(\"--wal.open-logfiles\", \"maximum number of parallel open logfiles\", true);\n  options->addObsoleteOption(\"--wal.reserve-logfiles\", \"maximum number of reserve logfiles to maintain\", true);\n  options->addObsoleteOption(\"--wal.slots\", \"number of logfile slots to use\", true);\n  options->addObsoleteOption(\"--wal.sync-interval\", \"interval for automatic, non-requested disk syncs (in milliseconds)\", true);\n  options->addObsoleteOption(\"--wal.throttle-when-pending\", \n                             \"throttle writes when at least this many operations are waiting for collection (set to 0 to deactivate write-throttling)\", true);\n  options->addObsoleteOption(\"--wal.throttle-wait\", \"maximum wait time per operation when write-throttled (in milliseconds)\", true);\n}",
  "abstract_func": "void ServerFeature::collectOptions(std::shared_ptr<ProgramOptions> VAR_0) {\n  VAR_0->addOption(\"--console\", \"start a JavaScript emergency console\",\n                     new BooleanParameter(&VAR_1));\n\n  VAR_0->addSection(\"server\", \"server features\");\n\n  VAR_0->addOption(\"--server.rest-server\", \"start a rest-server\",\n                     new BooleanParameter(&VAR_2),\n                     arangodb::options::makeDefaultFlags(arangodb::options::Flags::Hidden));\n  \n  VAR_0->addOption(\"--server.validate-utf8-strings\", \"perform UTF-8 string validation for incoming JSON and VelocyPack data\",\n                     new BooleanParameter(&VAR_3),\n                     arangodb::options::makeDefaultFlags(arangodb::options::Flags::Hidden)).setIntroducedIn(30700);\n\n  VAR_0->addOption(\"--javascript.script\", \"run scripts and exit\",\n                     new VectorParameter<StringParameter>(&VAR_4));\n\n#if VAR_5\n  VAR_0->addOption(\"--console.code-page\",\n                     \"Windows code page to use; defaults to UTF8\",\n                     new UInt16Parameter(&VAR_6),\n                     arangodb::options::makeDefaultFlags(arangodb::options::Flags::Hidden));\n#endif\n\n  /* COMMENT_0 */\n  VAR_0->addSection(\"vst\", \"VelocyStream protocol\", \"\", true, true);\n  VAR_0->addObsoleteOption(\"--vst.maxsize\", \"maximal size (in bytes) \"\n                             \"for a VelocyPack chunk\", true);\n  \n  /* COMMENT_1 */\n  VAR_0->addSection(\"wal\", \"WAL of the MMFiles engine\", \"\", true, true);\n  VAR_0->addObsoleteOption(\"--wal.allow-oversize-entries\",\n                             \"allow entries that are bigger than '--wal.logfile-size'\", false);\n  VAR_0->addObsoleteOption(\"--wal.use-mlock\",\n                             \"mlock WAL logfiles in memory (may require elevated privileges or limits)\", false);\n  VAR_0->addObsoleteOption(\"--wal.directory\", \"logfile directory\", true);\n  VAR_0->addObsoleteOption(\"--wal.historic-logfiles\", \"maximum number of historic logfiles to keep after collection\", true);\n  VAR_0->addObsoleteOption(\"--wal.ignore-logfile-errors\", \n                             \"ignore logfile errors. this will read recoverable data from corrupted logfiles but ignore any unrecoverable data\", false);\n  VAR_0->addObsoleteOption(\"--wal.ignore-recovery-errors\", \"continue recovery even if re-applying operations fails\", false);\n  VAR_0->addObsoleteOption(\"--wal.flush-timeout\", \"flush timeout (in milliseconds)\", true);\n  VAR_0->addObsoleteOption(\"--wal.logfile-size\", \"size of each logfile (in bytes)\", true);\n  VAR_0->addObsoleteOption(\"--wal.open-logfiles\", \"maximum number of parallel open logfiles\", true);\n  VAR_0->addObsoleteOption(\"--wal.reserve-logfiles\", \"maximum number of reserve logfiles to maintain\", true);\n  VAR_0->addObsoleteOption(\"--wal.slots\", \"number of logfile slots to use\", true);\n  VAR_0->addObsoleteOption(\"--wal.sync-interval\", \"interval for automatic, non-requested disk syncs (in milliseconds)\", true);\n  VAR_0->addObsoleteOption(\"--wal.throttle-when-pending\", \n                             \"throttle writes when at least this many operations are waiting for collection (set to 0 to deactivate write-throttling)\", true);\n  VAR_0->addObsoleteOption(\"--wal.throttle-wait\", \"maximum wait time per operation when write-throttled (in milliseconds)\", true);\n}",
  "func_graph_path": "arangodb/e9c6ee9dcca7b9b4fbcd02a0b323d205bee838d3/ServerFeature.cpp/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -27,10 +27,6 @@\n   options->addObsoleteOption(\"--vst.maxsize\", \"maximal size (in bytes) \"\n                              \"for a VelocyPack chunk\", true);\n   \n-  options->addObsoleteOption(\n-      \"--server.session-timeout\",\n-      \"timeout of web interface server sessions (in seconds)\", true);\n-\n   // add obsolete MMFiles WAL options (obsoleted in 3.7)\n   options->addSection(\"wal\", \"WAL of the MMFiles engine\", \"\", true, true);\n   options->addObsoleteOption(\"--wal.allow-oversize-entries\",",
  "diff_line_info": {
    "deleted_lines": [
      "  options->addObsoleteOption(",
      "      \"--server.session-timeout\",",
      "      \"timeout of web interface server sessions (in seconds)\", true);",
      ""
    ],
    "added_lines": []
  },
  "is_vul": true,
  "pr_url": "https://github.com/arangodb/arangodb/pull/14118",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/arangodb/arangodb/pull/14118: 403 Client Error: Forbidden for url: https://api.github.com/repos/arangodb/arangodb/pulls/14118",
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Defect Remediation & Feature Upgrades  \n**Confidence:** 0.9\n\nThe patch addresses restoring a feature (the `--server.session-timeout` parameter) without indicating a security issue. The confidence is high as the purpose is clear and aligned with non-security feature enhancement."
}