{
  "cve_id": "CVE-2014-9748",
  "cwe_ids": [
    "CWE-362"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "libuv",
  "commit_msg": "win: fix unsavory rwlock fallback implementation\n\nBefore this patch an uv_mutex_t (backed by a critical section) could be\nreleased by a tread different from the thread that acquired it, which is\nnot allowed. This is fixed by using a semaphore instead.\n\nNote that the affected code paths were used on Windows XP and Windows\nServer 2003 only.\n\nFixes: https://github.com/libuv/libuv/issues/515\nPR-URL: https://github.com/libuv/libuv/pull/516\nReviewed-By: Ben Noordhuis <info@bnoordhuis.nl>\nReviewed-By: Saúl Ibarra Corretgé <saghul@gmail.com>",
  "commit_hash": "3eb6764acd2d708f6873c177a77f9bef3b266fa9",
  "git_url": "https://github.com/libuv/libuv/commit/3eb6764acd2d708f6873c177a77f9bef3b266fa9",
  "file_path": "src/win/thread.c",
  "func_name": "uv__rwlock_fallback_tryrdlock",
  "func_before": "static int uv__rwlock_fallback_tryrdlock(uv_rwlock_t* rwlock) {\n  int err;\n\n  err = uv_mutex_trylock(&rwlock->fallback_.read_mutex_);\n  if (err)\n    goto out;\n\n  err = 0;\n  if (rwlock->fallback_.num_readers_ == 0)\n    err = uv_mutex_trylock(&rwlock->fallback_.write_mutex_);\n\n  if (err == 0)\n    rwlock->fallback_.num_readers_++;\n\n  uv_mutex_unlock(&rwlock->fallback_.read_mutex_);\n\nout:\n  return err;\n}",
  "abstract_func_before": "static int uv__rwlock_fallback_tryrdlock(uv_rwlock_t* VAR_0) {\n  int VAR_1;\n\n  VAR_1 = uv_mutex_trylock(&VAR_0->fallback_.read_mutex_);\n  if (VAR_1)\n    goto out;\n\n  VAR_1 = 0;\n  if (VAR_0->fallback_.num_readers_ == 0)\n    VAR_1 = uv_mutex_trylock(&VAR_0->fallback_.write_mutex_);\n\n  if (VAR_1 == 0)\n    VAR_0->fallback_.num_readers_++;\n\n  uv_mutex_unlock(&VAR_0->fallback_.read_mutex_);\n\nout:\n  return VAR_1;\n}",
  "func_graph_path_before": "libuv/3eb6764acd2d708f6873c177a77f9bef3b266fa9/thread.c/vul/before/3.json",
  "func": "static int uv__rwlock_fallback_tryrdlock(uv_rwlock_t* rwlock) {\n  int err;\n\n  if (!TryEnterCriticalSection(&rwlock->fallback_.read_lock_.cs))\n    return UV_EAGAIN;\n\n  err = 0;\n  if (rwlock->fallback_.num_readers_ == 0) {\n    DWORD r = WaitForSingleObject(rwlock->fallback_.write_lock_.sem, 0);\n    if (r == WAIT_OBJECT_0)\n      rwlock->fallback_.num_readers_++;\n    else if (r == WAIT_TIMEOUT)\n      err = UV_EAGAIN;\n    else if (r == WAIT_FAILED)\n      err = uv_translate_sys_error(GetLastError());\n    else\n      err = UV_EIO;\n  }\n\n  LeaveCriticalSection(&rwlock->fallback_.read_lock_.cs);\n  return err;\n}",
  "abstract_func": "static int uv__rwlock_fallback_tryrdlock(uv_rwlock_t* VAR_0) {\n  int VAR_1;\n\n  if (!TryEnterCriticalSection(&VAR_0->fallback_.read_lock_.cs))\n    return VAR_2;\n\n  VAR_1 = 0;\n  if (VAR_0->fallback_.num_readers_ == 0) {\n    DWORD VAR_3 = WaitForSingleObject(VAR_0->fallback_.write_lock_.sem, 0);\n    if (VAR_3 == VAR_4)\n      VAR_0->fallback_.num_readers_++;\n    else if (VAR_3 == VAR_5)\n      VAR_1 = VAR_2;\n    else if (VAR_3 == VAR_6)\n      VAR_1 = uv_translate_sys_error(GetLastError());\n    else\n      VAR_1 = VAR_7;\n  }\n\n  LeaveCriticalSection(&VAR_0->fallback_.read_lock_.cs);\n  return VAR_1;\n}",
  "func_graph_path": "libuv/3eb6764acd2d708f6873c177a77f9bef3b266fa9/thread.c/vul/after/3.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,19 +1,22 @@\n static int uv__rwlock_fallback_tryrdlock(uv_rwlock_t* rwlock) {\n   int err;\n \n-  err = uv_mutex_trylock(&rwlock->fallback_.read_mutex_);\n-  if (err)\n-    goto out;\n+  if (!TryEnterCriticalSection(&rwlock->fallback_.read_lock_.cs))\n+    return UV_EAGAIN;\n \n   err = 0;\n-  if (rwlock->fallback_.num_readers_ == 0)\n-    err = uv_mutex_trylock(&rwlock->fallback_.write_mutex_);\n+  if (rwlock->fallback_.num_readers_ == 0) {\n+    DWORD r = WaitForSingleObject(rwlock->fallback_.write_lock_.sem, 0);\n+    if (r == WAIT_OBJECT_0)\n+      rwlock->fallback_.num_readers_++;\n+    else if (r == WAIT_TIMEOUT)\n+      err = UV_EAGAIN;\n+    else if (r == WAIT_FAILED)\n+      err = uv_translate_sys_error(GetLastError());\n+    else\n+      err = UV_EIO;\n+  }\n \n-  if (err == 0)\n-    rwlock->fallback_.num_readers_++;\n-\n-  uv_mutex_unlock(&rwlock->fallback_.read_mutex_);\n-\n-out:\n+  LeaveCriticalSection(&rwlock->fallback_.read_lock_.cs);\n   return err;\n }",
  "diff_line_info": {
    "deleted_lines": [
      "  err = uv_mutex_trylock(&rwlock->fallback_.read_mutex_);",
      "  if (err)",
      "    goto out;",
      "  if (rwlock->fallback_.num_readers_ == 0)",
      "    err = uv_mutex_trylock(&rwlock->fallback_.write_mutex_);",
      "  if (err == 0)",
      "    rwlock->fallback_.num_readers_++;",
      "",
      "  uv_mutex_unlock(&rwlock->fallback_.read_mutex_);",
      "",
      "out:"
    ],
    "added_lines": [
      "  if (!TryEnterCriticalSection(&rwlock->fallback_.read_lock_.cs))",
      "    return UV_EAGAIN;",
      "  if (rwlock->fallback_.num_readers_ == 0) {",
      "    DWORD r = WaitForSingleObject(rwlock->fallback_.write_lock_.sem, 0);",
      "    if (r == WAIT_OBJECT_0)",
      "      rwlock->fallback_.num_readers_++;",
      "    else if (r == WAIT_TIMEOUT)",
      "      err = UV_EAGAIN;",
      "    else if (r == WAIT_FAILED)",
      "      err = uv_translate_sys_error(GetLastError());",
      "    else",
      "      err = UV_EIO;",
      "  }",
      "  LeaveCriticalSection(&rwlock->fallback_.read_lock_.cs);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/libuv/libuv/pull/516",
  "description": {
    "pr_info": {
      "title": "win: fix unsavory rwlock fallback implementation",
      "number": 516
    },
    "comment": [
      "Before this patch an uv_mutex_t (backed by a critical section) could be\nreleased by a tread different from the thread that acquired it, which is\nnot allowed. This is fixed by using a semaphore instead.\n\nBUG: https://github.com/libuv/libuv/issues/515\nREF: https://github.com/nodejs/node/pull/2723\n\nR=@bnoordhuis\nR=@saghul\n",
      "LGTM, sans the c++ style comments, and a couple of small questions.\n",
      "Fixed the comment style and the typos.\n\n@saghul, let me know what you want to do with the WaitForSingleObject() failure modes. I think it's fine as it is, all those \"failure\" scenarios are purely hypothetical anyway. My thinking was that I would return a mapped error from every function that actually returns a value, and abort (by means of `uv_fatal_error`) in functions that return void.\n\ncc @bnoordhuis \n",
      "LGTM. Let's leave it as is then.\n"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 1.0"
}