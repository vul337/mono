{
  "cve_id": "CVE-2021-27433",
  "cwe_ids": [
    "CWE-190"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "ARMmbed/mbed-os",
  "commit_msg": "Add integer overflow check to the malloc wrappers\n\nAdd a check that the combined size of the buffer to allocate and\nalloc_info_t does not exceed the maximum integer value representable\nby size_t.",
  "commit_hash": "151ebfcfc9f2383ee11ce3c771c3bf92900d6b43",
  "git_url": "https://github.com/ARMmbed/mbed-os/commit/151ebfcfc9f2383ee11ce3c771c3bf92900d6b43",
  "file_path": "platform/source/mbed_alloc_wrappers.cpp",
  "func_name": "malloc_wrapper",
  "func_before": "void *malloc_wrapper(struct _reent *r, size_t size, void *caller)\n{\n    void *ptr = NULL;\n#ifdef MBED_MEM_TRACING_ENABLED\n    mbed_mem_trace_lock();\n#endif\n#ifdef MBED_HEAP_STATS_ENABLED\n    malloc_stats_mutex->lock();\n    alloc_info_t *alloc_info = (alloc_info_t *)__real__malloc_r(r, size + sizeof(alloc_info_t));\n    if (alloc_info != NULL) {\n        alloc_info->size = size;\n        alloc_info->signature = MBED_HEAP_STATS_SIGNATURE;\n        ptr = (void *)(alloc_info + 1);\n        heap_stats.current_size += size;\n        heap_stats.total_size += size;\n        heap_stats.alloc_cnt += 1;\n        if (heap_stats.current_size > heap_stats.max_size) {\n            heap_stats.max_size = heap_stats.current_size;\n        }\n        heap_stats.overhead_size += MALLOC_HEAP_TOTAL_SIZE(MALLOC_HEADER_PTR(alloc_info)) - size;\n    } else {\n        heap_stats.alloc_fail_cnt += 1;\n    }\n    malloc_stats_mutex->unlock();\n#else // #ifdef MBED_HEAP_STATS_ENABLED\n    ptr = __real__malloc_r(r, size);\n#endif // #ifdef MBED_HEAP_STATS_ENABLED\n#ifdef MBED_MEM_TRACING_ENABLED\n    mbed_mem_trace_malloc(ptr, size, caller);\n    mbed_mem_trace_unlock();\n#endif // #ifdef MBED_MEM_TRACING_ENABLED\n    return ptr;\n}",
  "abstract_func_before": "void *malloc_wrapper(struct _reent *VAR_0, size_t VAR_1, void *VAR_2)\n{\n    void *VAR_3 = NULL;\n#ifdef VAR_4\n    mbed_mem_trace_lock();\n#endif\n#ifdef VAR_5\n    VAR_6->lock();\n    alloc_info_t *VAR_7 = (alloc_info_t *)__real__malloc_r(VAR_0, VAR_1 + sizeof(alloc_info_t));\n    if (VAR_7 != NULL) {\n        VAR_7->size = VAR_1;\n        VAR_7->signature = VAR_8;\n        VAR_3 = (void *)(VAR_7 + 1);\n        VAR_9.current_size += VAR_1;\n        VAR_9.total_size += VAR_1;\n        VAR_9.alloc_cnt += 1;\n        if (VAR_9.current_size > VAR_9.max_size) {\n            VAR_9.max_size = VAR_9.current_size;\n        }\n        VAR_9.overhead_size += MALLOC_HEAP_TOTAL_SIZE(MALLOC_HEADER_PTR(VAR_7)) - VAR_1;\n    } else {\n        VAR_9.alloc_fail_cnt += 1;\n    }\n    VAR_6->unlock();\n#else /* COMMENT_0 */\n    VAR_3 = __real__malloc_r(VAR_0, VAR_1);\n#endif /* COMMENT_0 */\n#ifdef VAR_4\n    mbed_mem_trace_malloc(VAR_3, VAR_1, VAR_2);\n    mbed_mem_trace_unlock();\n#endif /* COMMENT_1 */\n    return VAR_3;\n}",
  "func_graph_path_before": "ARMmbed/mbed-os/151ebfcfc9f2383ee11ce3c771c3bf92900d6b43/mbed_alloc_wrappers.cpp/vul/before/0.json",
  "func": "void *malloc_wrapper(struct _reent *r, size_t size, void *caller)\n{\n    void *ptr = NULL;\n#ifdef MBED_MEM_TRACING_ENABLED\n    mbed_mem_trace_lock();\n#endif\n#ifdef MBED_HEAP_STATS_ENABLED\n    malloc_stats_mutex->lock();\n    alloc_info_t *alloc_info = NULL;\n    if (size <= SIZE_MAX - sizeof(alloc_info_t)) {\n        alloc_info = (alloc_info_t *)__real__malloc_r(r, size + sizeof(alloc_info_t));\n    }\n    if (alloc_info != NULL) {\n        alloc_info->size = size;\n        alloc_info->signature = MBED_HEAP_STATS_SIGNATURE;\n        ptr = (void *)(alloc_info + 1);\n        heap_stats.current_size += size;\n        heap_stats.total_size += size;\n        heap_stats.alloc_cnt += 1;\n        if (heap_stats.current_size > heap_stats.max_size) {\n            heap_stats.max_size = heap_stats.current_size;\n        }\n        heap_stats.overhead_size += MALLOC_HEAP_TOTAL_SIZE(MALLOC_HEADER_PTR(alloc_info)) - size;\n    } else {\n        heap_stats.alloc_fail_cnt += 1;\n    }\n    malloc_stats_mutex->unlock();\n#else // #ifdef MBED_HEAP_STATS_ENABLED\n    ptr = __real__malloc_r(r, size);\n#endif // #ifdef MBED_HEAP_STATS_ENABLED\n#ifdef MBED_MEM_TRACING_ENABLED\n    mbed_mem_trace_malloc(ptr, size, caller);\n    mbed_mem_trace_unlock();\n#endif // #ifdef MBED_MEM_TRACING_ENABLED\n    return ptr;\n}",
  "abstract_func": "void *malloc_wrapper(struct _reent *VAR_0, size_t VAR_1, void *VAR_2)\n{\n    void *VAR_3 = NULL;\n#ifdef VAR_4\n    mbed_mem_trace_lock();\n#endif\n#ifdef VAR_5\n    VAR_6->lock();\n    alloc_info_t *VAR_7 = NULL;\n    if (VAR_1 <= VAR_8 - sizeof(alloc_info_t)) {\n        VAR_7 = (alloc_info_t *)__real__malloc_r(VAR_0, VAR_1 + sizeof(alloc_info_t));\n    }\n    if (VAR_7 != NULL) {\n        VAR_7->size = VAR_1;\n        VAR_7->signature = VAR_9;\n        VAR_3 = (void *)(VAR_7 + 1);\n        VAR_10.current_size += VAR_1;\n        VAR_10.total_size += VAR_1;\n        VAR_10.alloc_cnt += 1;\n        if (VAR_10.current_size > VAR_10.max_size) {\n            VAR_10.max_size = VAR_10.current_size;\n        }\n        VAR_10.overhead_size += MALLOC_HEAP_TOTAL_SIZE(MALLOC_HEADER_PTR(VAR_7)) - VAR_1;\n    } else {\n        VAR_10.alloc_fail_cnt += 1;\n    }\n    VAR_6->unlock();\n#else /* COMMENT_0 */\n    VAR_3 = __real__malloc_r(VAR_0, VAR_1);\n#endif /* COMMENT_0 */\n#ifdef VAR_4\n    mbed_mem_trace_malloc(VAR_3, VAR_1, VAR_2);\n    mbed_mem_trace_unlock();\n#endif /* COMMENT_1 */\n    return VAR_3;\n}",
  "func_graph_path": "ARMmbed/mbed-os/151ebfcfc9f2383ee11ce3c771c3bf92900d6b43/mbed_alloc_wrappers.cpp/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -6,7 +6,10 @@\n #endif\n #ifdef MBED_HEAP_STATS_ENABLED\n     malloc_stats_mutex->lock();\n-    alloc_info_t *alloc_info = (alloc_info_t *)__real__malloc_r(r, size + sizeof(alloc_info_t));\n+    alloc_info_t *alloc_info = NULL;\n+    if (size <= SIZE_MAX - sizeof(alloc_info_t)) {\n+        alloc_info = (alloc_info_t *)__real__malloc_r(r, size + sizeof(alloc_info_t));\n+    }\n     if (alloc_info != NULL) {\n         alloc_info->size = size;\n         alloc_info->signature = MBED_HEAP_STATS_SIGNATURE;",
  "diff_line_info": {
    "deleted_lines": [
      "    alloc_info_t *alloc_info = (alloc_info_t *)__real__malloc_r(r, size + sizeof(alloc_info_t));"
    ],
    "added_lines": [
      "    alloc_info_t *alloc_info = NULL;",
      "    if (size <= SIZE_MAX - sizeof(alloc_info_t)) {",
      "        alloc_info = (alloc_info_t *)__real__malloc_r(r, size + sizeof(alloc_info_t));",
      "    }"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/ARMmbed/mbed-os/pull/14408",
  "description": {
    "pr_info": {
      "title": "Add integer overflow check to the malloc wrappers",
      "number": 14408
    },
    "comment": [
      "<!--\r\nFor more information on the requirements for pull requests, please see [the contributing guidelines](https://os.mbed.com/docs/mbed-os/latest/contributing/workflow.html).\r\n\r\nNOTE: Do not remove any of the template headings (even for optional sections) as this\r\ntemplate is automatically parsed. \r\n-->\r\n\r\n### Summary of changes <!-- Required -->\r\n\r\nBackport of #14407\r\n\r\nAdd a check that the combined size of the buffer to allocate and `alloc_info_t` does not exceed the maximum integer value representable by `size_t`.\r\n\r\n<!-- \r\n    Please provide the following information: \r\n\r\n    Description of the the change (what is this fixing / adding / removing?).\r\n\r\n    Why the change is needed (if this is fixing a reported issue please summarize what\r\n    the issue is and add the reference. E.g. Fixes #17119).\r\n\r\n    NOTE: This section is automatically written to release notes for Feature and \r\n    Major releases and should contain enough details for a user.\r\n    \r\n-->\r\n\r\n#### Impact of changes <!-- Optional -->\r\n<!-- \r\n    If there are any implications for users taking this change then they must be \r\n    provided here. For Major PR types this field is MANDATORY.\r\n\r\n    NOTE: This section is automatically written to release notes for Feature and \r\n    Major releases and should contain enough details for a user.\r\n-->\r\n\r\n#### Migration actions required <!-- Optional -->\r\n<!-- \r\n    This should only be applicable in Major PR types for which this field is MANDATORY.\r\n\r\n    NOTE: This section is automatically written to release notes for Feature and \r\n    Major releases and should contain enough details for a user.\r\n-->\r\n\r\n### Documentation <!-- Required -->\r\n\r\nNone.\r\n\r\n<!-- \r\n    Please provide details of any document updates required, including links to any\r\n    related PRs against the docs repository.\r\n    If no document updates are required please specify 'None', this at least tells us\r\n    that this has been considered.\r\n-->\r\n\r\n----------------------------------------------------------------------------------------------------------------\r\n### Pull request type <!-- Required -->\r\n\r\n<!--\r\n    Please add only one X to one of the following types. Do not fill multiple types (split the pull request otherwise).\r\n    Please note this is not a GitHub task list, indenting the boxes or changing the format to add a '.' or '*' in front of them would change the meaning incorrectly. \r\n-->\r\n    [x] Patch update (Bug fix / Target update / Docs update / Test update / Refactor)\r\n    [] Feature update (New feature / Functionality change / New API)\r\n    [] Major update (Breaking change E.g. Return code change / API behaviour change)\r\n\r\n----------------------------------------------------------------------------------------------------------------\r\n### Test results <!-- Required -->\r\n\r\n<!--\r\n    Provide all the information required, listing all the testing performed. For new targets please attach full test results for all supported compilers.\r\n-->\r\n    [] No Tests required for this change (E.g docs only update)\r\n    [x] Covered by existing mbed-os tests (Greentea or Unittest)\r\n    [x] Tests / results supplied as part of this PR\r\n    \r\nManual check: `malloc(SIZE_MAX)` now fails as expected.\r\n    \r\n----------------------------------------------------------------------------------------------------------------\r\n### Reviewers <!-- Optional -->\r\n\r\n<!--\r\n    Request additional reviewers with @username or @team\r\n-->\r\n\r\n@evedon @donatieng \r\n\r\n----------------------------------------------------------------------------------------------------------------\r\n",
      "@LDong-Arm, thank you for your changes.\n@evedon @donatieng @ARMmbed/mbed-os-maintainers please review.",
      "We should schedule 5.15 jobs after we close the next 6.x release",
      "# [Test run: FAILED](https://jenkins-mbedos.oss.arm.com/job/mbed-os-ci-lts-pr/job/PR-14408/1/) \nSummary: 1 of 10 test jobs failed \nBuild number : 1 \n[Build artifacts](http://mbed-os-ci-public.s3-website-eu-west-1.amazonaws.com/?prefix=jenkins-ci/ARMmbed/mbed-os/mbed-os-ci-lts-pr/PR-14408/artifacts/14408/) \n \nFailed test jobs:\n - jenkins-ci/mbed-os-ci_greentea-test-lts\n",
      "The failures don't look related to this PR, but I can check on my local K64F and DISCO_L475VG_IOT01A (I don't have a NUCLEO_F429ZI).",
      "CI restarted",
      "# [Test run: FAILED](https://jenkins-mbedos.oss.arm.com/job/mbed-os-ci-lts-pr/job/PR-14408/2/) \nSummary: 1 of 10 test jobs failed \nBuild number : 2 \n[Build artifacts](http://mbed-os-ci-public.s3-website-eu-west-1.amazonaws.com/?prefix=jenkins-ci/ARMmbed/mbed-os/mbed-os-ci-lts-pr/PR-14408/artifacts/14408/) \n \nFailed test jobs:\n - jenkins-ci/mbed-os-ci_greentea-test-lts\n",
      "I locally checked on a K64F - the TLS socket test failures have nothing to do with this PR.\r\nIt also fails on mbed-os-5.15.6 - did it pass during the previous release? Does this test also exist in the mbed-os-6.x.x release workflow?\r\nIf it did pass last time, the failures could be related to the server this test suite talks to?",
      "CI restarted",
      "> I locally checked on a K64F - the TLS socket test failures have nothing to do with this PR.\r\n> It also fails on mbed-os-5.15.6 - did it pass during the previous release? Does this test also exist in the mbed-os-6.x.x release workflow?\r\n> If it did pass last time, the failures could be related to the server this test suite talks to?\r\n\r\nI meant, it's _not_ a CI issue because I can reproduce it locally.",
      "I run couple of 5.15 jobs in the last days, they were green. I restarted here one more time.",
      "# [Test run: FAILED](https://jenkins-mbedos.oss.arm.com/job/mbed-os-ci-lts-pr/job/PR-14408/3/) \nSummary: 1 of 10 test jobs failed \nBuild number : 3 \n[Build artifacts](http://mbed-os-ci-public.s3-website-eu-west-1.amazonaws.com/?prefix=jenkins-ci/ARMmbed/mbed-os/mbed-os-ci-lts-pr/PR-14408/artifacts/14408/) \n \nFailed test jobs:\n - jenkins-ci/mbed-os-ci_greentea-test-lts\n",
      "Looks like greentea-test-lts is random - #14147 first failed then passed",
      "# [Test run: FAILED](https://jenkins-mbedos.oss.arm.com/job/mbed-os-ci-lts-pr/job/PR-14408/4/) \nSummary: 2 of 10 test jobs failed \nBuild number : 4 \n[Build artifacts](http://mbed-os-ci-public.s3-website-eu-west-1.amazonaws.com/?prefix=jenkins-ci/ARMmbed/mbed-os/mbed-os-ci-lts-pr/PR-14408/artifacts/14408/) \n \nFailed test jobs:\n - jenkins-ci/mbed-os-ci_example-test-lts\n - jenkins-ci/mbed-os-ci_greentea-test-lts\n",
      "I reported this to the  test team (tls socket failures in the recent PRs)",
      "# [Test run: SUCCESS](https://jenkins-mbedos.oss.arm.com/job/mbed-os-ci-lts-pr/job/PR-14408/5/) \nSummary: 10 of 10 test jobs passed \nBuild number : 5 \n[Build artifacts](http://mbed-os-ci-public.s3-website-eu-west-1.amazonaws.com/?prefix=jenkins-ci/ARMmbed/mbed-os/mbed-os-ci-lts-pr/PR-14408/artifacts/14408/) \n ",
      "Finally passed!"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 1.0"
}