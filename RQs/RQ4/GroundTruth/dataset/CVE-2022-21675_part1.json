{
  "cve_id": "CVE-2022-21675",
  "cwe_ids": [
    "CWE-22"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "Konloch/bytecode-viewer",
  "commit_msg": "Improve Zip Slip detection",
  "commit_hash": "1ec02658fe6858162f5e6a24f97928de6696c5cb",
  "git_url": "https://github.com/Konloch/bytecode-viewer/commit/1ec02658fe6858162f5e6a24f97928de6696c5cb",
  "file_path": "src/main/java/the/bytecode/club/bytecodeviewer/util/ZipUtils.java",
  "func_name": "unzipFilesToPath",
  "func_before": "public static void unzipFilesToPath(String jarPath, String destinationDir) throws IOException {\n        File file = new File(jarPath);\n        try (JarFile jar = new JarFile(file)) {\n\n            // fist get all directories,\n            // then make those directory on the destination Path\n            /*for (Enumeration<JarEntry> enums = jar.entries(); enums.hasMoreElements(); ) {\n                JarEntry entry = (JarEntry) enums.nextElement();\n\n                String fileName = destinationDir + File.separator + entry.getName();\n                File f = new File(fileName);\n\n                if (fileName.endsWith(\"/\")) {\n                    f.mkdirs();\n                }\n\n            }*/\n\n            //now create all files\n            for (Enumeration<JarEntry> enums = jar.entries(); enums.hasMoreElements(); ) {\n                JarEntry entry = enums.nextElement();\n\n                String fileName = destinationDir + File.separator + entry.getName();\n                File f = new File(fileName);\n\n                if (!f.getCanonicalPath().startsWith(destinationDir)) {\n                    System.out.println(\"Zip Slip exploit detected. Skipping entry \" + entry.getName());\n                    continue;\n                }\n\n                File parent = f.getParentFile();\n                if (!parent.exists()) {\n                    parent.mkdirs();\n                }\n\n                if (!fileName.endsWith(\"/\")) {\n                    try (InputStream is = jar.getInputStream(entry);\n                         FileOutputStream fos = new FileOutputStream(f)) {\n                        // write contents of 'is' to 'fos'\n                        while (is.available() > 0) {\n                            fos.write(is.read());\n                        }\n                    }\n                }\n            }\n        }\n    }",
  "abstract_func_before": "public static void unzipFilesToPath(String VAR_0, String VAR_1) throws IOException {\n        File VAR_2 = new File(VAR_0);\n        try (JarFile VAR_3 = new JarFile(VAR_2)) {\n\n            /* COMMENT_0 */\n            /* COMMENT_1 */\n            /* COMMENT_2 */\n                                                                \n\n                                                                                    \n                                            \n\n                                             \n                               \n                 \n\n               \n\n            /* COMMENT_11 */\n            for (Enumeration<JarEntry> VAR_4 = VAR_3.entries(); VAR_4.hasMoreElements(); ) {\n                JarEntry VAR_5 = VAR_4.nextElement();\n\n                String VAR_6 = VAR_1 + VAR_7.separator + VAR_5.getName();\n                File VAR_8 = new File(VAR_6);\n\n                if (!VAR_8.getCanonicalPath().startsWith(VAR_1)) {\n                    VAR_9.out.println(\"Zip Slip exploit detected. Skipping entry \" + VAR_5.getName());\n                    continue;\n                }\n\n                File VAR_10 = VAR_8.getParentFile();\n                if (!VAR_10.exists()) {\n                    VAR_10.mkdirs();\n                }\n\n                if (!VAR_6.endsWith(\"/\")) {\n                    try (InputStream VAR_11 = VAR_3.getInputStream(VAR_5);\n                         FileOutputStream VAR_12 = new FileOutputStream(VAR_8)) {\n                        /* COMMENT_12 */\n                        while (VAR_11.available() > 0) {\n                            VAR_12.write(VAR_11.read());\n                        }\n                    }\n                }\n            }\n        }\n    }",
  "func_graph_path_before": "Konloch/bytecode-viewer/1ec02658fe6858162f5e6a24f97928de6696c5cb/ZipUtils.java/vul/before/0.json",
  "func": "public static void unzipFilesToPath(String jarPath, String destinationDir) throws IOException {\n        String canonicalDestDir = new File(destinationDir).getCanonicalPath();\n        if (!canonicalDestDir.endsWith(File.separator)) {\n            canonicalDestDir += File.separator;\n        }\n\n        File file = new File(jarPath);\n        try (JarFile jar = new JarFile(file)) {\n\n            // fist get all directories,\n            // then make those directory on the destination Path\n            /*for (Enumeration<JarEntry> enums = jar.entries(); enums.hasMoreElements(); ) {\n                JarEntry entry = (JarEntry) enums.nextElement();\n\n                String fileName = destinationDir + File.separator + entry.getName();\n                File f = new File(fileName);\n\n                if (fileName.endsWith(\"/\")) {\n                    f.mkdirs();\n                }\n\n            }*/\n\n            //now create all files\n            for (Enumeration<JarEntry> enums = jar.entries(); enums.hasMoreElements(); ) {\n                JarEntry entry = enums.nextElement();\n\n                String fileName = destinationDir + File.separator + entry.getName();\n                File f = new File(fileName);\n\n                if (!f.getCanonicalPath().startsWith(canonicalDestDir)) {\n                    System.out.println(\"Zip Slip exploit detected. Skipping entry \" + entry.getName());\n                    continue;\n                }\n\n                File parent = f.getParentFile();\n                if (!parent.exists()) {\n                    parent.mkdirs();\n                }\n\n                if (!fileName.endsWith(\"/\")) {\n                    try (InputStream is = jar.getInputStream(entry);\n                         FileOutputStream fos = new FileOutputStream(f)) {\n                        // write contents of 'is' to 'fos'\n                        while (is.available() > 0) {\n                            fos.write(is.read());\n                        }\n                    }\n                }\n            }\n        }\n    }",
  "abstract_func": "public static void unzipFilesToPath(String VAR_0, String VAR_1) throws IOException {\n        String VAR_2 = new File(VAR_1).getCanonicalPath();\n        if (!VAR_2.endsWith(VAR_3.separator)) {\n            VAR_2 += VAR_3.separator;\n        }\n\n        File VAR_4 = new File(VAR_0);\n        try (JarFile VAR_5 = new JarFile(VAR_4)) {\n\n            /* COMMENT_0 */\n            /* COMMENT_1 */\n            /* COMMENT_2 */\n                                                                \n\n                                                                                    \n                                            \n\n                                             \n                               \n                 \n\n               \n\n            /* COMMENT_11 */\n            for (Enumeration<JarEntry> VAR_6 = VAR_5.entries(); VAR_6.hasMoreElements(); ) {\n                JarEntry VAR_7 = VAR_6.nextElement();\n\n                String VAR_8 = VAR_1 + VAR_3.separator + VAR_7.getName();\n                File VAR_9 = new File(VAR_8);\n\n                if (!VAR_9.getCanonicalPath().startsWith(VAR_2)) {\n                    VAR_10.out.println(\"Zip Slip exploit detected. Skipping entry \" + VAR_7.getName());\n                    continue;\n                }\n\n                File VAR_11 = VAR_9.getParentFile();\n                if (!VAR_11.exists()) {\n                    VAR_11.mkdirs();\n                }\n\n                if (!VAR_8.endsWith(\"/\")) {\n                    try (InputStream VAR_12 = VAR_5.getInputStream(VAR_7);\n                         FileOutputStream VAR_13 = new FileOutputStream(VAR_9)) {\n                        /* COMMENT_12 */\n                        while (VAR_12.available() > 0) {\n                            VAR_13.write(VAR_12.read());\n                        }\n                    }\n                }\n            }\n        }\n    }",
  "func_graph_path": "Konloch/bytecode-viewer/1ec02658fe6858162f5e6a24f97928de6696c5cb/ZipUtils.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,4 +1,9 @@\n public static void unzipFilesToPath(String jarPath, String destinationDir) throws IOException {\n+        String canonicalDestDir = new File(destinationDir).getCanonicalPath();\n+        if (!canonicalDestDir.endsWith(File.separator)) {\n+            canonicalDestDir += File.separator;\n+        }\n+\n         File file = new File(jarPath);\n         try (JarFile jar = new JarFile(file)) {\n \n@@ -23,7 +28,7 @@\n                 String fileName = destinationDir + File.separator + entry.getName();\n                 File f = new File(fileName);\n \n-                if (!f.getCanonicalPath().startsWith(destinationDir)) {\n+                if (!f.getCanonicalPath().startsWith(canonicalDestDir)) {\n                     System.out.println(\"Zip Slip exploit detected. Skipping entry \" + entry.getName());\n                     continue;\n                 }",
  "diff_line_info": {
    "deleted_lines": [
      "                if (!f.getCanonicalPath().startsWith(destinationDir)) {"
    ],
    "added_lines": [
      "        String canonicalDestDir = new File(destinationDir).getCanonicalPath();",
      "        if (!canonicalDestDir.endsWith(File.separator)) {",
      "            canonicalDestDir += File.separator;",
      "        }",
      "",
      "                if (!f.getCanonicalPath().startsWith(canonicalDestDir)) {"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/Konloch/bytecode-viewer/pull/379",
  "description": {
    "pr_info": {
      "title": "Fixes and Updates",
      "number": 379
    },
    "comment": [
      " - Update Procyon to snapshot version to support JDK 9+\r\n - Optimize POM\r\n - Fix plugin templates\r\n - Update RSTA to support more file extensions and new Java stuff\r\n - Mitigate Zip Slip exploit (Fixes #378)"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 1.0"
}