{
  "cve_id": "CVE-2018-7868",
  "cwe_ids": [
    "CWE-119",
    "CWE-476",
    "CWE-125"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "libming",
  "commit_msg": "Fix heap-buffer-overflows when accessing pool\n\nConstants are usually retrieved from the constant pool without verifying\nthat the pool actually contains them, which may lead to various heap\nbuffer overflow issues.\n\nIn this patch we add a counter keeping track of how many elements the pool\ncontains, and checks making sure that whenever the pool is accessed, the\nconstant in present in the pool (constant position < pool counter).\n\nAlso, do not return \"\" when a pointer is excepted (it should be legal to free\nthis return value).\n\nThis patch fixes #112 (CVE-2018-7875), fixes #120 (CVE-2018-7871),\nfixes #117 (CVE-2018-7870), fixes #114 (CVE-2018-7872), fixes #122,\nfixes #113 (CVE-2018-7868), fixes #123.",
  "commit_hash": "3a000c7b6fe978dd9925266bb6847709e06dbaa3",
  "git_url": "https://github.com/libming/libming/commit/3a000c7b6fe978dd9925266bb6847709e06dbaa3",
  "file_path": "util/decompile.c",
  "func_name": "getName",
  "func_before": "static char *\ngetName(struct SWF_ACTIONPUSHPARAM *act)\n{\n\tchar *t;\n\n\tswitch( act->Type ) \t\n\t{\n\tcase PUSH_STRING: /* STRING */\n\t\tt=malloc(strlen(act->p.String)+3); \n\t\t/*\n\t\tstrcpy(t,\"\\\"\");\n\t\tstrcat(t,act->p.String);\n\t\tstrcat(t,\"\\\"\");\n\t\t*/\n\t\tstrcpy(t,act->p.String);\n\t\tif(strlen(t)) /* Not a zero length string */\n\t\t\treturn t;\n\t\telse\n\t\t\treturn \"this\";\n#if 0\n\t  case 4: /* REGISTER */\n                t=malloc(4); /* Rdd */\n  \t\tsprintf(t,\"R%d\", act->p.RegisterNumber );\n  \t\treturn t;\n#endif\n\tcase PUSH_CONSTANT: /* CONSTANT8 */\n\t\tt=malloc(strlenext(pool[act->p.Constant8])+1);\n\t\tstrcpyext(t,pool[act->p.Constant8]);\n\t\tif(strlen(t)) /* Not a zero length string */\n\t\t\treturn t;\n\t\telse\n\t\t{\n\t\t\tt=realloc(t,6);\n\t\t\treturn strcpy(t,\"this\");\n\t\t}\n\tcase PUSH_CONSTANT16: /* CONSTANT16 */\n\t\tt=malloc(strlenext(pool[act->p.Constant16])+1);\n\t\tstrcpyext(t,pool[act->p.Constant16]);\n\t\tif(strlen(t)) /* Not a zero length string */\n\t\t\treturn t;\n\t\telse\n\t\t{\n\t\t\tt=realloc(t,6);\n\t\t\treturn strcpy(t,\"this\");\n\t\t}\n\tdefault: \n\t\treturn getString(act);\n\t}\n}",
  "abstract_func_before": "static char *\ngetName(struct SWF_ACTIONPUSHPARAM *VAR_0)\n{\n\tchar *VAR_1;\n\n\tswitch( VAR_0->Type ) \t\n\t{\n\tcase VAR_2: /* COMMENT_0 */\n\t\tVAR_1=malloc(strlen(VAR_0->p.String)+3); \n\t\t/* COMMENT_1 */\n                 \n                          \n                 \n    \n\t\tstrcpy(VAR_1,VAR_0->p.String);\n\t\tif(strlen(VAR_1)) /* COMMENT_6 */\n\t\t\treturn VAR_1;\n\t\telse\n\t\t\treturn \"this\";\n#if 0\n\t  case 4: /* COMMENT_7 */\n                VAR_1=malloc(4); /* COMMENT_8 */\n  \t\tsprintf(VAR_1,\"R%d\", VAR_0->p.RegisterNumber );\n  \t\treturn VAR_1;\n#endif\n\tcase VAR_3: /* COMMENT_9 */\n\t\tVAR_1=malloc(strlenext(VAR_4[VAR_0->p.Constant8])+1);\n\t\tstrcpyext(VAR_1,VAR_4[VAR_0->p.Constant8]);\n\t\tif(strlen(VAR_1)) /* COMMENT_6 */\n\t\t\treturn VAR_1;\n\t\telse\n\t\t{\n\t\t\tVAR_1=realloc(VAR_1,6);\n\t\t\treturn strcpy(VAR_1,\"this\");\n\t\t}\n\tcase VAR_5: /* COMMENT_10 */\n\t\tVAR_1=malloc(strlenext(VAR_4[VAR_0->p.Constant16])+1);\n\t\tstrcpyext(VAR_1,VAR_4[VAR_0->p.Constant16]);\n\t\tif(strlen(VAR_1)) /* COMMENT_6 */\n\t\t\treturn VAR_1;\n\t\telse\n\t\t{\n\t\t\tVAR_1=realloc(VAR_1,6);\n\t\t\treturn strcpy(VAR_1,\"this\");\n\t\t}\n\tdefault: \n\t\treturn getString(VAR_0);\n\t}\n}",
  "func_graph_path_before": "libming/3a000c7b6fe978dd9925266bb6847709e06dbaa3/decompile.c/vul/before/0.json",
  "func": "static char *\ngetName(struct SWF_ACTIONPUSHPARAM *act)\n{\n\tchar *t;\n\n\tswitch( act->Type ) \t\n\t{\n\tcase PUSH_STRING: /* STRING */\n\t\tt=malloc(strlen(act->p.String)+3); \n\t\t/*\n\t\tstrcpy(t,\"\\\"\");\n\t\tstrcat(t,act->p.String);\n\t\tstrcat(t,\"\\\"\");\n\t\t*/\n\t\tstrcpy(t,act->p.String);\n\t\tif(strlen(t)) /* Not a zero length string */\n\t\t\treturn t;\n\t\telse\n\t\t\treturn \"this\";\n#if 0\n\t  case 4: /* REGISTER */\n                t=malloc(4); /* Rdd */\n  \t\tsprintf(t,\"R%d\", act->p.RegisterNumber );\n  \t\treturn t;\n#endif\n\tcase PUSH_CONSTANT: /* CONSTANT8 */\n\t\tif (act->p.Constant8 > poolcounter)\n\t\t{\n\t\t        SWF_warn(\"WARNING: retrieving constants not present in the pool.\\n\");\n\t\t        break;\n\t\t}\n\t\tt=malloc(strlenext(pool[act->p.Constant8])+1);\n\t\tstrcpyext(t,pool[act->p.Constant8]);\n\t\tif(strlen(t)) /* Not a zero length string */\n\t\t\treturn t;\n\t\telse\n\t\t{\n\t\t\tt=realloc(t,6);\n\t\t\treturn strcpy(t,\"this\");\n\t\t}\n\tcase PUSH_CONSTANT16: /* CONSTANT16 */\n\t\tif (act->p.Constant16 > poolcounter)\n\t\t{\n\t\t        SWF_warn(\"WARNING: retrieving constants not present in the pool.\\n\");\n\t\t        break;\n\t\t}\n\t\tt=malloc(strlenext(pool[act->p.Constant16])+1);\n\t\tstrcpyext(t,pool[act->p.Constant16]);\n\t\tif(strlen(t)) /* Not a zero length string */\n\t\t\treturn t;\n\t\telse\n\t\t{\n\t\t\tt=realloc(t,6);\n\t\t\treturn strcpy(t,\"this\");\n\t\t}\n\tdefault: \n\t\treturn getString(act);\n\t}\n\n\tt = malloc(sizeof(char));\n\tstrcpyext(t,\"\");\n\n\treturn t;\n}",
  "abstract_func": "static char *\ngetName(struct SWF_ACTIONPUSHPARAM *VAR_0)\n{\n\tchar *VAR_1;\n\n\tswitch( VAR_0->Type ) \t\n\t{\n\tcase VAR_2: /* COMMENT_0 */\n\t\tVAR_1=malloc(strlen(VAR_0->p.String)+3); \n\t\t/* COMMENT_1 */\n                 \n                          \n                 \n    \n\t\tstrcpy(VAR_1,VAR_0->p.String);\n\t\tif(strlen(VAR_1)) /* COMMENT_6 */\n\t\t\treturn VAR_1;\n\t\telse\n\t\t\treturn \"this\";\n#if 0\n\t  case 4: /* COMMENT_7 */\n                VAR_1=malloc(4); /* COMMENT_8 */\n  \t\tsprintf(VAR_1,\"R%d\", VAR_0->p.RegisterNumber );\n  \t\treturn VAR_1;\n#endif\n\tcase VAR_3: /* COMMENT_9 */\n\t\tif (VAR_0->p.Constant8 > VAR_4)\n\t\t{\n\t\t        SWF_warn(\"WARNING: retrieving constants not present in the pool.\\n\");\n\t\t        break;\n\t\t}\n\t\tVAR_1=malloc(strlenext(VAR_5[VAR_0->p.Constant8])+1);\n\t\tstrcpyext(VAR_1,VAR_5[VAR_0->p.Constant8]);\n\t\tif(strlen(VAR_1)) /* COMMENT_6 */\n\t\t\treturn VAR_1;\n\t\telse\n\t\t{\n\t\t\tVAR_1=realloc(VAR_1,6);\n\t\t\treturn strcpy(VAR_1,\"this\");\n\t\t}\n\tcase VAR_6: /* COMMENT_10 */\n\t\tif (VAR_0->p.Constant16 > VAR_4)\n\t\t{\n\t\t        SWF_warn(\"WARNING: retrieving constants not present in the pool.\\n\");\n\t\t        break;\n\t\t}\n\t\tVAR_1=malloc(strlenext(VAR_5[VAR_0->p.Constant16])+1);\n\t\tstrcpyext(VAR_1,VAR_5[VAR_0->p.Constant16]);\n\t\tif(strlen(VAR_1)) /* COMMENT_6 */\n\t\t\treturn VAR_1;\n\t\telse\n\t\t{\n\t\t\tVAR_1=realloc(VAR_1,6);\n\t\t\treturn strcpy(VAR_1,\"this\");\n\t\t}\n\tdefault: \n\t\treturn getString(VAR_0);\n\t}\n\n\tVAR_1 = malloc(sizeof(char));\n\tstrcpyext(VAR_1,\"\");\n\n\treturn VAR_1;\n}",
  "func_graph_path": "libming/3a000c7b6fe978dd9925266bb6847709e06dbaa3/decompile.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -24,6 +24,11 @@\n   \t\treturn t;\n #endif\n \tcase PUSH_CONSTANT: /* CONSTANT8 */\n+\t\tif (act->p.Constant8 > poolcounter)\n+\t\t{\n+\t\t        SWF_warn(\"WARNING: retrieving constants not present in the pool.\\n\");\n+\t\t        break;\n+\t\t}\n \t\tt=malloc(strlenext(pool[act->p.Constant8])+1);\n \t\tstrcpyext(t,pool[act->p.Constant8]);\n \t\tif(strlen(t)) /* Not a zero length string */\n@@ -34,6 +39,11 @@\n \t\t\treturn strcpy(t,\"this\");\n \t\t}\n \tcase PUSH_CONSTANT16: /* CONSTANT16 */\n+\t\tif (act->p.Constant16 > poolcounter)\n+\t\t{\n+\t\t        SWF_warn(\"WARNING: retrieving constants not present in the pool.\\n\");\n+\t\t        break;\n+\t\t}\n \t\tt=malloc(strlenext(pool[act->p.Constant16])+1);\n \t\tstrcpyext(t,pool[act->p.Constant16]);\n \t\tif(strlen(t)) /* Not a zero length string */\n@@ -46,4 +56,9 @@\n \tdefault: \n \t\treturn getString(act);\n \t}\n+\n+\tt = malloc(sizeof(char));\n+\tstrcpyext(t,\"\");\n+\n+\treturn t;\n }",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "\t\tif (act->p.Constant8 > poolcounter)",
      "\t\t{",
      "\t\t        SWF_warn(\"WARNING: retrieving constants not present in the pool.\\n\");",
      "\t\t        break;",
      "\t\t}",
      "\t\tif (act->p.Constant16 > poolcounter)",
      "\t\t{",
      "\t\t        SWF_warn(\"WARNING: retrieving constants not present in the pool.\\n\");",
      "\t\t        break;",
      "\t\t}",
      "",
      "\tt = malloc(sizeof(char));",
      "\tstrcpyext(t,\"\");",
      "",
      "\treturn t;"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/libming/libming/pull/125",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/libming/libming/pull/125: 403 Client Error: Forbidden for url: https://api.github.com/repos/libming/libming/pulls/125",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 1.0  \n\nThe patch addresses heap buffer overflow vulnerabilities, indicated by multiple CVEs, and modifies code to prevent memory access issues. All elements confirm it's a security fix with absolute clarity."
}