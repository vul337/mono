{
  "cve_id": "CVE-2020-14033",
  "cwe_ids": [
    "CWE-120"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "meetecho/janus-gateway",
  "commit_msg": "Fix sscanf-related security issues",
  "commit_hash": "fb85040405495748dbc7c4850b97da9b67b7b47b",
  "git_url": "https://github.com/meetecho/janus-gateway/commit/fb85040405495748dbc7c4850b97da9b67b7b47b",
  "file_path": "plugins/janus_streaming.c",
  "func_name": "janus_streaming_rtsp_parse_sdp",
  "func_before": "static int janus_streaming_rtsp_parse_sdp(const char *buffer, const char *name, const char *media, char *base, int *pt,\n\t\tchar *transport, char *host, char *rtpmap, char *fmtp, char *control, const janus_network_address *iface, multiple_fds *fds) {\n\t/* Start by checking if there's any Content-Base header we should be aware of */\n\tconst char *cb = strstr(buffer, \"Content-Base:\");\n\tif(cb == NULL)\n\t\tcb = strstr(buffer, \"content-base:\");\n\tif(cb != NULL) {\n\t\tcb = strstr(cb, \"rtsp://\");\n\t\tconst char *crlf = (cb ? strstr(cb, \"\\r\\n\") : NULL);\n\t\tif(crlf != NULL && base != NULL) {\n\t\t\tgulong size = (crlf-cb)+1;\n\t\t\tif(size > 256)\n\t\t\t\tsize = 256;\n\t\t\tg_snprintf(base, size, \"%s\", cb);\n\t\t\tif(base[size-2] == '/')\n\t\t\t\tbase[size-2] = '\\0';\n\t\t}\n\t}\n\t/* Parse the SDP now */\n\tchar pattern[256];\n\tg_snprintf(pattern, sizeof(pattern), \"m=%s\", media);\n\tchar *m = strstr(buffer, pattern);\n\tif(m == NULL) {\n\t\tJANUS_LOG(LOG_VERB, \"[%s] no media %s...\\n\", name, media);\n\t\treturn -1;\n\t}\n\tsscanf(m, \"m=%*s %*d %*s %d\", pt);\n\tchar *s = strstr(m, \"a=control:\");\n\tif(s == NULL) {\n\t\tJANUS_LOG(LOG_ERR, \"[%s] no control for %s...\\n\", name, media);\n\t\treturn -1;\n\t}\n\tsscanf(s, \"a=control:%2047s\", control);\n\tchar *r = strstr(m, \"a=rtpmap:\");\n\tif(r != NULL) {\n\t\tif (sscanf(r, \"a=rtpmap:%*d%*[ ]%2047[^\\r\\n]s\", rtpmap) != 1) {\n\t\t\tJANUS_LOG(LOG_ERR, \"[%s] cannot parse %s rtpmap...\\n\", name, media);\n\t\t\treturn -1;\n\t\t}\n\t}\n\tchar *f = strstr(m, \"a=fmtp:\");\n\tif(f != NULL) {\n\t\tif (sscanf(f, \"a=fmtp:%*d%*[ ]%2047[^\\r\\n]s\", fmtp) != 1) {\n\t\t\tJANUS_LOG(LOG_ERR, \"[%s] cannot parse %s fmtp...\\n\", name, media);\n\t\t\treturn -1;\n\t\t}\n\t}\n\tchar *c = strstr(m, \"c=IN IP4\");\n\tif(c == NULL) {\n\t\t/* No m-line c= attribute? try in the whole SDP */\n\t\tc = strstr(buffer, \"c=IN IP4\");\n\t}\n\tchar ip[256];\n\tin_addr_t mcast = INADDR_ANY;\n\tif(c != NULL) {\n\t\tif(sscanf(c, \"c=IN IP4 %[^/]\", ip) != 0) {\n\t\t\tmemcpy(host, ip, sizeof(ip));\n\t\t\tc = strstr(host, \"\\r\\n\");\n\t\t\tif(c)\n\t\t\t\t*c = '\\0';\n\t\t\tmcast = inet_addr(ip);\n\t\t}\n\t}\n\t/* Bind two adjacent ports for RTP and RTCP */\n\tint ports[2];\n\tif(janus_streaming_allocate_port_pair(name, media, mcast, iface, fds, ports)) {\n\t\tJANUS_LOG(LOG_ERR, \"[%s] Bind failed for %s...\\n\", name, media);\n\t\treturn -1;\n\t}\n\n\tif(IN_MULTICAST(ntohl(mcast))) {\n\t\tg_snprintf(transport, 1024, \"RTP/AVP/UDP;multicast;client_port=%d-%d\", ports[0], ports[1]);\n\t} else {\n\t\tg_snprintf(transport, 1024, \"RTP/AVP/UDP;unicast;client_port=%d-%d\", ports[0], ports[1]);\n\t}\n\n\treturn 0;\n}",
  "abstract_func_before": "static int janus_streaming_rtsp_parse_sdp(const char *VAR_0, const char *VAR_1, const char *VAR_2, char *VAR_3, int *VAR_4,\n\t\tchar *VAR_5, char *VAR_6, char *VAR_7, char *VAR_8, char *VAR_9, const janus_network_address *VAR_10, multiple_fds *VAR_11) {\n\t/* COMMENT_0 */\n\tconst char *VAR_12 = strstr(VAR_0, \"Content-Base:\");\n\tif(VAR_12 == NULL)\n\t\tVAR_12 = strstr(VAR_0, \"content-base:\");\n\tif(VAR_12 != NULL) {\n\t\tVAR_12 = strstr(VAR_12, \"rtsp://\");\n\t\tconst char *VAR_13 = (VAR_12 ? strstr(VAR_12, \"\\r\\n\") : NULL);\n\t\tif(VAR_13 != NULL && VAR_3 != NULL) {\n\t\t\tgulong VAR_14 = (VAR_13-VAR_12)+1;\n\t\t\tif(VAR_14 > 256)\n\t\t\t\tVAR_14 = 256;\n\t\t\tg_snprintf(VAR_3, VAR_14, \"%s\", VAR_12);\n\t\t\tif(VAR_3[VAR_14-2] == '/')\n\t\t\t\tVAR_3[VAR_14-2] = '\\0';\n\t\t}\n\t}\n\t/* COMMENT_1 */\n\tchar VAR_15[256];\n\tg_snprintf(VAR_15, sizeof(VAR_15), \"m=%s\", VAR_2);\n\tchar *VAR_16 = strstr(VAR_0, VAR_15);\n\tif(VAR_16 == NULL) {\n\t\tJANUS_LOG(VAR_17, \"[%s] no media %s...\\n\", VAR_1, VAR_2);\n\t\treturn -1;\n\t}\n\tsscanf(VAR_16, \"m=%*s %*d %*s %d\", VAR_4);\n\tchar *VAR_18 = strstr(VAR_16, \"a=control:\");\n\tif(VAR_18 == NULL) {\n\t\tJANUS_LOG(VAR_19, \"[%s] no control for %s...\\n\", VAR_1, VAR_2);\n\t\treturn -1;\n\t}\n\tsscanf(VAR_18, \"a=control:%2047s\", VAR_9);\n\tchar *VAR_20 = strstr(VAR_16, \"a=rtpmap:\");\n\tif(VAR_20 != NULL) {\n\t\tif (sscanf(VAR_20, \"a=rtpmap:%*d%*[ ]%2047[^\\r\\n]s\", VAR_7) != 1) {\n\t\t\tJANUS_LOG(VAR_19, \"[%s] cannot parse %s rtpmap...\\n\", VAR_1, VAR_2);\n\t\t\treturn -1;\n\t\t}\n\t}\n\tchar *VAR_21 = strstr(VAR_16, \"a=fmtp:\");\n\tif(VAR_21 != NULL) {\n\t\tif (sscanf(VAR_21, \"a=fmtp:%*d%*[ ]%2047[^\\r\\n]s\", VAR_8) != 1) {\n\t\t\tJANUS_LOG(VAR_19, \"[%s] cannot parse %s fmtp...\\n\", VAR_1, VAR_2);\n\t\t\treturn -1;\n\t\t}\n\t}\n\tchar *VAR_22 = strstr(VAR_16, \"c=IN IP4\");\n\tif(VAR_22 == NULL) {\n\t\t/* COMMENT_2 */\n\t\tVAR_22 = strstr(VAR_0, \"c=IN IP4\");\n\t}\n\tchar VAR_23[256];\n\tin_addr_t VAR_24 = VAR_25;\n\tif(VAR_22 != NULL) {\n\t\tif(sscanf(VAR_22, \"c=IN IP4 %[^/]\", VAR_23) != 0) {\n\t\t\tmemcpy(VAR_6, VAR_23, sizeof(VAR_23));\n\t\t\tVAR_22 = strstr(VAR_6, \"\\r\\n\");\n\t\t\tif(VAR_22)\n\t\t\t\t*VAR_22 = '\\0';\n\t\t\tVAR_24 = inet_addr(VAR_23);\n\t\t}\n\t}\n\t/* COMMENT_3 */\n\tint VAR_26[2];\n\tif(janus_streaming_allocate_port_pair(VAR_1, VAR_2, VAR_24, VAR_10, VAR_11, VAR_26)) {\n\t\tJANUS_LOG(VAR_19, \"[%s] Bind failed for %s...\\n\", VAR_1, VAR_2);\n\t\treturn -1;\n\t}\n\n\tif(IN_MULTICAST(ntohl(VAR_24))) {\n\t\tg_snprintf(VAR_5, 1024, \"RTP/AVP/UDP;multicast;client_port=%d-%d\", VAR_26[0], VAR_26[1]);\n\t} else {\n\t\tg_snprintf(VAR_5, 1024, \"RTP/AVP/UDP;unicast;client_port=%d-%d\", VAR_26[0], VAR_26[1]);\n\t}\n\n\treturn 0;\n}",
  "func_graph_path_before": "meetecho/janus-gateway/fb85040405495748dbc7c4850b97da9b67b7b47b/janus_streaming.c/vul/before/0.json",
  "func": "static int janus_streaming_rtsp_parse_sdp(const char *buffer, const char *name, const char *media, char *base, int *pt,\n\t\tchar *transport, char *host, char *rtpmap, char *fmtp, char *control, const janus_network_address *iface, multiple_fds *fds) {\n\t/* Start by checking if there's any Content-Base header we should be aware of */\n\tconst char *cb = strstr(buffer, \"Content-Base:\");\n\tif(cb == NULL)\n\t\tcb = strstr(buffer, \"content-base:\");\n\tif(cb != NULL) {\n\t\tcb = strstr(cb, \"rtsp://\");\n\t\tconst char *crlf = (cb ? strstr(cb, \"\\r\\n\") : NULL);\n\t\tif(crlf != NULL && base != NULL) {\n\t\t\tgulong size = (crlf-cb)+1;\n\t\t\tif(size > 256)\n\t\t\t\tsize = 256;\n\t\t\tg_snprintf(base, size, \"%s\", cb);\n\t\t\tif(base[size-2] == '/')\n\t\t\t\tbase[size-2] = '\\0';\n\t\t}\n\t}\n\t/* Parse the SDP now */\n\tchar pattern[256];\n\tg_snprintf(pattern, sizeof(pattern), \"m=%s\", media);\n\tchar *m = strstr(buffer, pattern);\n\tif(m == NULL) {\n\t\tJANUS_LOG(LOG_VERB, \"[%s] no media %s...\\n\", name, media);\n\t\treturn -1;\n\t}\n\tsscanf(m, \"m=%*s %*d %*s %d\", pt);\n\tchar *s = strstr(m, \"a=control:\");\n\tif(s == NULL) {\n\t\tJANUS_LOG(LOG_ERR, \"[%s] no control for %s...\\n\", name, media);\n\t\treturn -1;\n\t}\n\tsscanf(s, \"a=control:%2047s\", control);\n\tchar *r = strstr(m, \"a=rtpmap:\");\n\tif(r != NULL) {\n\t\tif (sscanf(r, \"a=rtpmap:%*d%*[ ]%2047[^\\r\\n]s\", rtpmap) != 1) {\n\t\t\tJANUS_LOG(LOG_ERR, \"[%s] cannot parse %s rtpmap...\\n\", name, media);\n\t\t\treturn -1;\n\t\t}\n\t}\n\tchar *f = strstr(m, \"a=fmtp:\");\n\tif(f != NULL) {\n\t\tif (sscanf(f, \"a=fmtp:%*d%*[ ]%2047[^\\r\\n]s\", fmtp) != 1) {\n\t\t\tJANUS_LOG(LOG_ERR, \"[%s] cannot parse %s fmtp...\\n\", name, media);\n\t\t\treturn -1;\n\t\t}\n\t}\n\tchar *c = strstr(m, \"c=IN IP4\");\n\tif(c == NULL) {\n\t\t/* No m-line c= attribute? try in the whole SDP */\n\t\tc = strstr(buffer, \"c=IN IP4\");\n\t}\n\tchar ip[256];\n\tin_addr_t mcast = INADDR_ANY;\n\tif(c != NULL) {\n\t\tif(sscanf(c, \"c=IN IP4 %255[^/]\", ip) != 0) {\n\t\t\tmemcpy(host, ip, sizeof(ip));\n\t\t\tc = strstr(host, \"\\r\\n\");\n\t\t\tif(c)\n\t\t\t\t*c = '\\0';\n\t\t\tmcast = inet_addr(ip);\n\t\t}\n\t}\n\t/* Bind two adjacent ports for RTP and RTCP */\n\tint ports[2];\n\tif(janus_streaming_allocate_port_pair(name, media, mcast, iface, fds, ports)) {\n\t\tJANUS_LOG(LOG_ERR, \"[%s] Bind failed for %s...\\n\", name, media);\n\t\treturn -1;\n\t}\n\n\tif(IN_MULTICAST(ntohl(mcast))) {\n\t\tg_snprintf(transport, 1024, \"RTP/AVP/UDP;multicast;client_port=%d-%d\", ports[0], ports[1]);\n\t} else {\n\t\tg_snprintf(transport, 1024, \"RTP/AVP/UDP;unicast;client_port=%d-%d\", ports[0], ports[1]);\n\t}\n\n\treturn 0;\n}",
  "abstract_func": "static int janus_streaming_rtsp_parse_sdp(const char *VAR_0, const char *VAR_1, const char *VAR_2, char *VAR_3, int *VAR_4,\n\t\tchar *VAR_5, char *VAR_6, char *VAR_7, char *VAR_8, char *VAR_9, const janus_network_address *VAR_10, multiple_fds *VAR_11) {\n\t/* COMMENT_0 */\n\tconst char *VAR_12 = strstr(VAR_0, \"Content-Base:\");\n\tif(VAR_12 == NULL)\n\t\tVAR_12 = strstr(VAR_0, \"content-base:\");\n\tif(VAR_12 != NULL) {\n\t\tVAR_12 = strstr(VAR_12, \"rtsp://\");\n\t\tconst char *VAR_13 = (VAR_12 ? strstr(VAR_12, \"\\r\\n\") : NULL);\n\t\tif(VAR_13 != NULL && VAR_3 != NULL) {\n\t\t\tgulong VAR_14 = (VAR_13-VAR_12)+1;\n\t\t\tif(VAR_14 > 256)\n\t\t\t\tVAR_14 = 256;\n\t\t\tg_snprintf(VAR_3, VAR_14, \"%s\", VAR_12);\n\t\t\tif(VAR_3[VAR_14-2] == '/')\n\t\t\t\tVAR_3[VAR_14-2] = '\\0';\n\t\t}\n\t}\n\t/* COMMENT_1 */\n\tchar VAR_15[256];\n\tg_snprintf(VAR_15, sizeof(VAR_15), \"m=%s\", VAR_2);\n\tchar *VAR_16 = strstr(VAR_0, VAR_15);\n\tif(VAR_16 == NULL) {\n\t\tJANUS_LOG(VAR_17, \"[%s] no media %s...\\n\", VAR_1, VAR_2);\n\t\treturn -1;\n\t}\n\tsscanf(VAR_16, \"m=%*s %*d %*s %d\", VAR_4);\n\tchar *VAR_18 = strstr(VAR_16, \"a=control:\");\n\tif(VAR_18 == NULL) {\n\t\tJANUS_LOG(VAR_19, \"[%s] no control for %s...\\n\", VAR_1, VAR_2);\n\t\treturn -1;\n\t}\n\tsscanf(VAR_18, \"a=control:%2047s\", VAR_9);\n\tchar *VAR_20 = strstr(VAR_16, \"a=rtpmap:\");\n\tif(VAR_20 != NULL) {\n\t\tif (sscanf(VAR_20, \"a=rtpmap:%*d%*[ ]%2047[^\\r\\n]s\", VAR_7) != 1) {\n\t\t\tJANUS_LOG(VAR_19, \"[%s] cannot parse %s rtpmap...\\n\", VAR_1, VAR_2);\n\t\t\treturn -1;\n\t\t}\n\t}\n\tchar *VAR_21 = strstr(VAR_16, \"a=fmtp:\");\n\tif(VAR_21 != NULL) {\n\t\tif (sscanf(VAR_21, \"a=fmtp:%*d%*[ ]%2047[^\\r\\n]s\", VAR_8) != 1) {\n\t\t\tJANUS_LOG(VAR_19, \"[%s] cannot parse %s fmtp...\\n\", VAR_1, VAR_2);\n\t\t\treturn -1;\n\t\t}\n\t}\n\tchar *VAR_22 = strstr(VAR_16, \"c=IN IP4\");\n\tif(VAR_22 == NULL) {\n\t\t/* COMMENT_2 */\n\t\tVAR_22 = strstr(VAR_0, \"c=IN IP4\");\n\t}\n\tchar VAR_23[256];\n\tin_addr_t VAR_24 = VAR_25;\n\tif(VAR_22 != NULL) {\n\t\tif(sscanf(VAR_22, \"c=IN IP4 %255[^/]\", VAR_23) != 0) {\n\t\t\tmemcpy(VAR_6, VAR_23, sizeof(VAR_23));\n\t\t\tVAR_22 = strstr(VAR_6, \"\\r\\n\");\n\t\t\tif(VAR_22)\n\t\t\t\t*VAR_22 = '\\0';\n\t\t\tVAR_24 = inet_addr(VAR_23);\n\t\t}\n\t}\n\t/* COMMENT_3 */\n\tint VAR_26[2];\n\tif(janus_streaming_allocate_port_pair(VAR_1, VAR_2, VAR_24, VAR_10, VAR_11, VAR_26)) {\n\t\tJANUS_LOG(VAR_19, \"[%s] Bind failed for %s...\\n\", VAR_1, VAR_2);\n\t\treturn -1;\n\t}\n\n\tif(IN_MULTICAST(ntohl(VAR_24))) {\n\t\tg_snprintf(VAR_5, 1024, \"RTP/AVP/UDP;multicast;client_port=%d-%d\", VAR_26[0], VAR_26[1]);\n\t} else {\n\t\tg_snprintf(VAR_5, 1024, \"RTP/AVP/UDP;unicast;client_port=%d-%d\", VAR_26[0], VAR_26[1]);\n\t}\n\n\treturn 0;\n}",
  "func_graph_path": "meetecho/janus-gateway/fb85040405495748dbc7c4850b97da9b67b7b47b/janus_streaming.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -53,7 +53,7 @@\n \tchar ip[256];\n \tin_addr_t mcast = INADDR_ANY;\n \tif(c != NULL) {\n-\t\tif(sscanf(c, \"c=IN IP4 %[^/]\", ip) != 0) {\n+\t\tif(sscanf(c, \"c=IN IP4 %255[^/]\", ip) != 0) {\n \t\t\tmemcpy(host, ip, sizeof(ip));\n \t\t\tc = strstr(host, \"\\r\\n\");\n \t\t\tif(c)",
  "diff_line_info": {
    "deleted_lines": [
      "\t\tif(sscanf(c, \"c=IN IP4 %[^/]\", ip) != 0) {"
    ],
    "added_lines": [
      "\t\tif(sscanf(c, \"c=IN IP4 %255[^/]\", ip) != 0) {"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/meetecho/janus-gateway/pull/2229",
  "description": {
    "pr_info": {
      "title": "Fix sscanf-related security issues",
      "number": 2229
    },
    "comment": [
      "We've been notified about a couple of security issues related to a broken usage of sscanf (reserved IDs: CVE-2020-14033, CVE-2020-14034, discovered by Marat Gayanov at Digital Security dsec.ru). Using that information, we extended the fix to a couple of other locations where the issue was present but not reported.\r\n\r\nMerging right away, considering these are important fixes and I can't replicate them anymore."
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 1.0"
}