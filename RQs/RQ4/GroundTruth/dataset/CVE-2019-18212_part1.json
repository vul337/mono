{
  "cve_id": "CVE-2019-18212",
  "cwe_ids": [
    "CWE-22"
  ],
  "cvss_vector": "AV:N/AC:L/Au:S/C:N/I:P/A:N",
  "cvss_is_v3": false,
  "repo_name": "eclipse/lemminx",
  "commit_msg": "Reject download of resource which are not in the cache folder (url which\nuses several ../../).\n\nSigned-off-by: azerr <azerr@redhat.com>",
  "commit_hash": "e37c399aa266be1b7a43061d4afc43dc230410d2",
  "git_url": "https://github.com/eclipse/lemminx/commit/e37c399aa266be1b7a43061d4afc43dc230410d2",
  "file_path": "org.eclipse.lsp4xml/src/main/java/org/eclipse/lsp4xml/services/XMLLanguageService.java",
  "func_name": "publishDiagnostics",
  "func_before": "public CompletableFuture<Path> publishDiagnostics(DOMDocument xmlDocument,\n\t\t\tConsumer<PublishDiagnosticsParams> publishDiagnostics, Consumer<TextDocument> triggerValidation,\n\t\t\tXMLValidationSettings validationSettings, CancelChecker monitor) {\n\t\tString uri = xmlDocument.getDocumentURI();\n\t\tTextDocument document = xmlDocument.getTextDocument();\n\t\ttry {\n\t\t\tList<Diagnostic> diagnostics = this.doDiagnostics(xmlDocument, monitor, validationSettings);\n\t\t\tmonitor.checkCanceled();\n\t\t\tpublishDiagnostics.accept(new PublishDiagnosticsParams(uri, diagnostics));\n\t\t\treturn null;\n\t\t} catch (CacheResourceDownloadingException e) {\n\t\t\t// An XML Schema or DTD is being downloaded by the cache manager, but it takes\n\t\t\t// too long.\n\t\t\t// In this case:\n\t\t\t// - 1) we add an information message to the document element to explain that\n\t\t\t// validation\n\t\t\t// cannot be performed because the XML Schema/DTD is downloading.\n\t\t\tpublishOneDiagnosticInRoot(xmlDocument, e.getMessage(), DiagnosticSeverity.Information, publishDiagnostics);\n\t\t\t// - 2) we restart the validation only once the XML Schema/DTD is downloaded.\n\t\t\te.getFuture() //\n\t\t\t\t\t.exceptionally(downloadException -> {\n\t\t\t\t\t\t// Error while downloading the XML Schema/DTD\n\t\t\t\t\t\tpublishOneDiagnosticInRoot(xmlDocument, downloadException.getCause().getMessage(),\n\t\t\t\t\t\t\t\tDiagnosticSeverity.Error, publishDiagnostics);\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}) //\n\t\t\t\t\t.thenAccept((path) -> {\n\t\t\t\t\t\tif (path != null) {\n\t\t\t\t\t\t\ttriggerValidation.accept(document);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\treturn e.getFuture();\n\t\t}\n\t}",
  "abstract_func_before": "public CompletableFuture<Path> publishDiagnostics(DOMDocument VAR_0,\n\t\t\tConsumer<PublishDiagnosticsParams> VAR_1, Consumer<TextDocument> VAR_2,\n\t\t\tXMLValidationSettings VAR_3, CancelChecker VAR_4) {\n\t\tString VAR_5 = VAR_0.getDocumentURI();\n\t\tTextDocument VAR_6 = VAR_0.getTextDocument();\n\t\ttry {\n\t\t\tList<Diagnostic> VAR_7 = this.doDiagnostics(VAR_0, VAR_4, VAR_3);\n\t\t\tVAR_4.checkCanceled();\n\t\t\tVAR_1.accept(new PublishDiagnosticsParams(VAR_5, VAR_7));\n\t\t\treturn null;\n\t\t} catch (CacheResourceDownloadingException VAR_8) {\n\t\t\t/* COMMENT_0 */\n\t\t\t/* COMMENT_1 */\n\t\t\t/* COMMENT_2 */\n\t\t\t/* COMMENT_3 */\n\t\t\t/* COMMENT_4 */\n\t\t\t/* COMMENT_5 */\n\t\t\tpublishOneDiagnosticInRoot(VAR_0, VAR_8.getMessage(), VAR_9.Information, VAR_1);\n\t\t\t/* COMMENT_6 */\n\t\t\tVAR_8.getFuture() /* COMMENT_7 */\n\t\t\t\t\t.exceptionally(VAR_10 -> {\n\t\t\t\t\t\t/* COMMENT_8 */\n\t\t\t\t\t\tpublishOneDiagnosticInRoot(VAR_0, VAR_10.getCause().getMessage(),\n\t\t\t\t\t\t\t\tVAR_9.Error, VAR_1);\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}) /* COMMENT_7 */\n\t\t\t\t\t.thenAccept((VAR_11) -> {\n\t\t\t\t\t\tif (VAR_11 != null) {\n\t\t\t\t\t\t\tVAR_2.accept(VAR_6);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\treturn VAR_8.getFuture();\n\t\t}\n\t}",
  "func_graph_path_before": "eclipse/lemminx/e37c399aa266be1b7a43061d4afc43dc230410d2/XMLLanguageService.java/vul/before/0.json",
  "func": "public CompletableFuture<Path> publishDiagnostics(DOMDocument xmlDocument,\n\t\t\tConsumer<PublishDiagnosticsParams> publishDiagnostics, Consumer<TextDocument> triggerValidation,\n\t\t\tXMLValidationSettings validationSettings, CancelChecker monitor) {\n\t\tString uri = xmlDocument.getDocumentURI();\n\t\tTextDocument document = xmlDocument.getTextDocument();\n\t\ttry {\n\t\t\tList<Diagnostic> diagnostics = this.doDiagnostics(xmlDocument, monitor, validationSettings);\n\t\t\tmonitor.checkCanceled();\n\t\t\tpublishDiagnostics.accept(new PublishDiagnosticsParams(uri, diagnostics));\n\t\t\treturn null;\n\t\t} catch (CacheResourceDownloadingException e) {\n\t\t\tCompletableFuture<Path> future = e.getFuture();\n\t\t\tif (future == null) {\n\t\t\t\t// This case comes from when URL uses ../../ and resources is not included in\n\t\t\t\t// the cache path\n\t\t\t\t// To prevent from \"Path Traversal leading to Remote Command Execution (RCE)\"\n\t\t\t\tpublishOneDiagnosticInRoot(xmlDocument, e.getMessage(), DiagnosticSeverity.Error, publishDiagnostics);\n\t\t\t} else {\n\t\t\t\t// An XML Schema or DTD is being downloaded by the cache manager, but it takes\n\t\t\t\t// too long.\n\t\t\t\t// In this case:\n\t\t\t\t// - 1) we add an information message to the document element to explain that\n\t\t\t\t// validation\n\t\t\t\t// cannot be performed because the XML Schema/DTD is downloading.\n\t\t\t\tpublishOneDiagnosticInRoot(xmlDocument, e.getMessage(), DiagnosticSeverity.Information,\n\t\t\t\t\t\tpublishDiagnostics);\n\t\t\t\t// - 2) we restart the validation only once the XML Schema/DTD is downloaded.\n\t\t\t\tfuture //\n\t\t\t\t\t\t.exceptionally(downloadException -> {\n\t\t\t\t\t\t\t// Error while downloading the XML Schema/DTD\n\t\t\t\t\t\t\tpublishOneDiagnosticInRoot(xmlDocument, downloadException.getCause().getMessage(),\n\t\t\t\t\t\t\t\t\tDiagnosticSeverity.Error, publishDiagnostics);\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t}) //\n\t\t\t\t\t\t.thenAccept((path) -> {\n\t\t\t\t\t\t\tif (path != null) {\n\t\t\t\t\t\t\t\ttriggerValidation.accept(document);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t}\n\t\t\treturn future;\n\t\t}\n\t}",
  "abstract_func": "public CompletableFuture<Path> publishDiagnostics(DOMDocument VAR_0,\n\t\t\tConsumer<PublishDiagnosticsParams> VAR_1, Consumer<TextDocument> VAR_2,\n\t\t\tXMLValidationSettings VAR_3, CancelChecker VAR_4) {\n\t\tString VAR_5 = VAR_0.getDocumentURI();\n\t\tTextDocument VAR_6 = VAR_0.getTextDocument();\n\t\ttry {\n\t\t\tList<Diagnostic> VAR_7 = this.doDiagnostics(VAR_0, VAR_4, VAR_3);\n\t\t\tVAR_4.checkCanceled();\n\t\t\tVAR_1.accept(new PublishDiagnosticsParams(VAR_5, VAR_7));\n\t\t\treturn null;\n\t\t} catch (CacheResourceDownloadingException VAR_8) {\n\t\t\tCompletableFuture<Path> VAR_9 = VAR_8.getFuture();\n\t\t\tif (VAR_9 == null) {\n\t\t\t\t/* COMMENT_0 */\n\t\t\t\t/* COMMENT_1 */\n\t\t\t\t/* COMMENT_2 */\n\t\t\t\tpublishOneDiagnosticInRoot(VAR_0, VAR_8.getMessage(), VAR_10.Error, VAR_1);\n\t\t\t} else {\n\t\t\t\t/* COMMENT_3 */\n\t\t\t\t/* COMMENT_4 */\n\t\t\t\t/* COMMENT_5 */\n\t\t\t\t/* COMMENT_6 */\n\t\t\t\t/* COMMENT_7 */\n\t\t\t\t/* COMMENT_8 */\n\t\t\t\tpublishOneDiagnosticInRoot(VAR_0, VAR_8.getMessage(), VAR_10.Information,\n\t\t\t\t\t\tVAR_1);\n\t\t\t\t/* COMMENT_9 */\n\t\t\t\tVAR_9 /* COMMENT_10 */\n\t\t\t\t\t\t.exceptionally(VAR_11 -> {\n\t\t\t\t\t\t\t/* COMMENT_11 */\n\t\t\t\t\t\t\tpublishOneDiagnosticInRoot(VAR_0, VAR_11.getCause().getMessage(),\n\t\t\t\t\t\t\t\t\tVAR_10.Error, VAR_1);\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t}) /* COMMENT_10 */\n\t\t\t\t\t\t.thenAccept((VAR_12) -> {\n\t\t\t\t\t\t\tif (VAR_12 != null) {\n\t\t\t\t\t\t\t\tVAR_2.accept(VAR_6);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t}\n\t\t\treturn VAR_9;\n\t\t}\n\t}",
  "func_graph_path": "eclipse/lemminx/e37c399aa266be1b7a43061d4afc43dc230410d2/XMLLanguageService.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -9,26 +9,35 @@\n \t\t\tpublishDiagnostics.accept(new PublishDiagnosticsParams(uri, diagnostics));\n \t\t\treturn null;\n \t\t} catch (CacheResourceDownloadingException e) {\n-\t\t\t// An XML Schema or DTD is being downloaded by the cache manager, but it takes\n-\t\t\t// too long.\n-\t\t\t// In this case:\n-\t\t\t// - 1) we add an information message to the document element to explain that\n-\t\t\t// validation\n-\t\t\t// cannot be performed because the XML Schema/DTD is downloading.\n-\t\t\tpublishOneDiagnosticInRoot(xmlDocument, e.getMessage(), DiagnosticSeverity.Information, publishDiagnostics);\n-\t\t\t// - 2) we restart the validation only once the XML Schema/DTD is downloaded.\n-\t\t\te.getFuture() //\n-\t\t\t\t\t.exceptionally(downloadException -> {\n-\t\t\t\t\t\t// Error while downloading the XML Schema/DTD\n-\t\t\t\t\t\tpublishOneDiagnosticInRoot(xmlDocument, downloadException.getCause().getMessage(),\n-\t\t\t\t\t\t\t\tDiagnosticSeverity.Error, publishDiagnostics);\n-\t\t\t\t\t\treturn null;\n-\t\t\t\t\t}) //\n-\t\t\t\t\t.thenAccept((path) -> {\n-\t\t\t\t\t\tif (path != null) {\n-\t\t\t\t\t\t\ttriggerValidation.accept(document);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t});\n-\t\t\treturn e.getFuture();\n+\t\t\tCompletableFuture<Path> future = e.getFuture();\n+\t\t\tif (future == null) {\n+\t\t\t\t// This case comes from when URL uses ../../ and resources is not included in\n+\t\t\t\t// the cache path\n+\t\t\t\t// To prevent from \"Path Traversal leading to Remote Command Execution (RCE)\"\n+\t\t\t\tpublishOneDiagnosticInRoot(xmlDocument, e.getMessage(), DiagnosticSeverity.Error, publishDiagnostics);\n+\t\t\t} else {\n+\t\t\t\t// An XML Schema or DTD is being downloaded by the cache manager, but it takes\n+\t\t\t\t// too long.\n+\t\t\t\t// In this case:\n+\t\t\t\t// - 1) we add an information message to the document element to explain that\n+\t\t\t\t// validation\n+\t\t\t\t// cannot be performed because the XML Schema/DTD is downloading.\n+\t\t\t\tpublishOneDiagnosticInRoot(xmlDocument, e.getMessage(), DiagnosticSeverity.Information,\n+\t\t\t\t\t\tpublishDiagnostics);\n+\t\t\t\t// - 2) we restart the validation only once the XML Schema/DTD is downloaded.\n+\t\t\t\tfuture //\n+\t\t\t\t\t\t.exceptionally(downloadException -> {\n+\t\t\t\t\t\t\t// Error while downloading the XML Schema/DTD\n+\t\t\t\t\t\t\tpublishOneDiagnosticInRoot(xmlDocument, downloadException.getCause().getMessage(),\n+\t\t\t\t\t\t\t\t\tDiagnosticSeverity.Error, publishDiagnostics);\n+\t\t\t\t\t\t\treturn null;\n+\t\t\t\t\t\t}) //\n+\t\t\t\t\t\t.thenAccept((path) -> {\n+\t\t\t\t\t\t\tif (path != null) {\n+\t\t\t\t\t\t\t\ttriggerValidation.accept(document);\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t});\n+\t\t\t}\n+\t\t\treturn future;\n \t\t}\n \t}",
  "diff_line_info": {
    "deleted_lines": [
      "\t\t\t// An XML Schema or DTD is being downloaded by the cache manager, but it takes",
      "\t\t\t// too long.",
      "\t\t\t// In this case:",
      "\t\t\t// - 1) we add an information message to the document element to explain that",
      "\t\t\t// validation",
      "\t\t\t// cannot be performed because the XML Schema/DTD is downloading.",
      "\t\t\tpublishOneDiagnosticInRoot(xmlDocument, e.getMessage(), DiagnosticSeverity.Information, publishDiagnostics);",
      "\t\t\t// - 2) we restart the validation only once the XML Schema/DTD is downloaded.",
      "\t\t\te.getFuture() //",
      "\t\t\t\t\t.exceptionally(downloadException -> {",
      "\t\t\t\t\t\t// Error while downloading the XML Schema/DTD",
      "\t\t\t\t\t\tpublishOneDiagnosticInRoot(xmlDocument, downloadException.getCause().getMessage(),",
      "\t\t\t\t\t\t\t\tDiagnosticSeverity.Error, publishDiagnostics);",
      "\t\t\t\t\t\treturn null;",
      "\t\t\t\t\t}) //",
      "\t\t\t\t\t.thenAccept((path) -> {",
      "\t\t\t\t\t\tif (path != null) {",
      "\t\t\t\t\t\t\ttriggerValidation.accept(document);",
      "\t\t\t\t\t\t}",
      "\t\t\t\t\t});",
      "\t\t\treturn e.getFuture();"
    ],
    "added_lines": [
      "\t\t\tCompletableFuture<Path> future = e.getFuture();",
      "\t\t\tif (future == null) {",
      "\t\t\t\t// This case comes from when URL uses ../../ and resources is not included in",
      "\t\t\t\t// the cache path",
      "\t\t\t\t// To prevent from \"Path Traversal leading to Remote Command Execution (RCE)\"",
      "\t\t\t\tpublishOneDiagnosticInRoot(xmlDocument, e.getMessage(), DiagnosticSeverity.Error, publishDiagnostics);",
      "\t\t\t} else {",
      "\t\t\t\t// An XML Schema or DTD is being downloaded by the cache manager, but it takes",
      "\t\t\t\t// too long.",
      "\t\t\t\t// In this case:",
      "\t\t\t\t// - 1) we add an information message to the document element to explain that",
      "\t\t\t\t// validation",
      "\t\t\t\t// cannot be performed because the XML Schema/DTD is downloading.",
      "\t\t\t\tpublishOneDiagnosticInRoot(xmlDocument, e.getMessage(), DiagnosticSeverity.Information,",
      "\t\t\t\t\t\tpublishDiagnostics);",
      "\t\t\t\t// - 2) we restart the validation only once the XML Schema/DTD is downloaded.",
      "\t\t\t\tfuture //",
      "\t\t\t\t\t\t.exceptionally(downloadException -> {",
      "\t\t\t\t\t\t\t// Error while downloading the XML Schema/DTD",
      "\t\t\t\t\t\t\tpublishOneDiagnosticInRoot(xmlDocument, downloadException.getCause().getMessage(),",
      "\t\t\t\t\t\t\t\t\tDiagnosticSeverity.Error, publishDiagnostics);",
      "\t\t\t\t\t\t\treturn null;",
      "\t\t\t\t\t\t}) //",
      "\t\t\t\t\t\t.thenAccept((path) -> {",
      "\t\t\t\t\t\t\tif (path != null) {",
      "\t\t\t\t\t\t\t\ttriggerValidation.accept(document);",
      "\t\t\t\t\t\t\t}",
      "\t\t\t\t\t\t});",
      "\t\t\t}",
      "\t\t\treturn future;"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/eclipse-lemminx/lemminx/pull/567",
  "description": {
    "pr_info": {
      "title": "Reject download of resource which are not in the cache folder",
      "number": 567
    },
    "comment": [
      "Reject download of resource which are not in the cache folder (url which uses several ../../).\r\n\r\nSigned-off-by: azerr <azerr@redhat.com>",
      "[CVE-2019-18212](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-18212) was opened  about this issue."
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "The commit message and code changes both address a security vulnerability by preventing path traversal attacks, making it a clear security fix.\n\n**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 1.0"
}