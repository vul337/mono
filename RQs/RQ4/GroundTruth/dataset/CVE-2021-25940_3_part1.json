{
  "cve_id": "CVE-2021-25940",
  "cwe_ids": [
    "CWE-613"
  ],
  "cvss_vector": "AV:N/AC:M/Au:S/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "arangodb",
  "commit_msg": "Revive startup parameter `--server.session-timeout` (#14118)\n\nCo-authored-by: Tobias GÃ¶dderz <tobias@arangodb.com>",
  "commit_hash": "e9c6ee9dcca7b9b4fbcd02a0b323d205bee838d3",
  "git_url": "https://github.com/arangodb/arangodb/commit/e9c6ee9dcca7b9b4fbcd02a0b323d205bee838d3",
  "file_path": "arangod/RestHandler/RestAuthHandler.cpp",
  "func_name": "RestAuthHandler::generateJwt",
  "func_before": "std::string RestAuthHandler::generateJwt(std::string const& username,\n                                         std::string const& password) {\n  AuthenticationFeature* af = AuthenticationFeature::instance();\n  TRI_ASSERT(af != nullptr);\n  return fuerte::jwt::generateUserToken(af->tokenCache().jwtSecret(), username, _validFor);\n}",
  "abstract_func_before": "std::string RestAuthHandler::generateJwt(std::string const& VAR_0,\n                                         std::string const& VAR_1) {\n  AuthenticationFeature* VAR_2 = AuthenticationFeature::instance();\n  TRI_ASSERT(VAR_2 != nullptr);\n  return fuerte::jwt::generateUserToken(VAR_2->tokenCache().jwtSecret(), VAR_0, VAR_3);\n}",
  "func_graph_path_before": "arangodb/e9c6ee9dcca7b9b4fbcd02a0b323d205bee838d3/RestAuthHandler.cpp/vul/before/1.json",
  "func": "std::string RestAuthHandler::generateJwt(std::string const& username) const {\n  AuthenticationFeature* af = AuthenticationFeature::instance();\n  TRI_ASSERT(af != nullptr);\n  return fuerte::jwt::generateUserToken(\n      af->tokenCache().jwtSecret(), \n      username, \n      std::chrono::seconds(uint64_t(af->sessionTimeout())));\n}",
  "abstract_func": "std::string RestAuthHandler::generateJwt(std::string const& VAR_0) const {\n  AuthenticationFeature* VAR_1 = AuthenticationFeature::instance();\n  TRI_ASSERT(VAR_1 != nullptr);\n  return fuerte::jwt::generateUserToken(\n      VAR_1->tokenCache().jwtSecret(), \n      VAR_0, \n      std::chrono::seconds(uint64_t(VAR_1->sessionTimeout())));\n}",
  "func_graph_path": "arangodb/e9c6ee9dcca7b9b4fbcd02a0b323d205bee838d3/RestAuthHandler.cpp/vul/after/1.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,6 +1,8 @@\n-std::string RestAuthHandler::generateJwt(std::string const& username,\n-                                         std::string const& password) {\n+std::string RestAuthHandler::generateJwt(std::string const& username) const {\n   AuthenticationFeature* af = AuthenticationFeature::instance();\n   TRI_ASSERT(af != nullptr);\n-  return fuerte::jwt::generateUserToken(af->tokenCache().jwtSecret(), username, _validFor);\n+  return fuerte::jwt::generateUserToken(\n+      af->tokenCache().jwtSecret(), \n+      username, \n+      std::chrono::seconds(uint64_t(af->sessionTimeout())));\n }",
  "diff_line_info": {
    "deleted_lines": [
      "std::string RestAuthHandler::generateJwt(std::string const& username,",
      "                                         std::string const& password) {",
      "  return fuerte::jwt::generateUserToken(af->tokenCache().jwtSecret(), username, _validFor);"
    ],
    "added_lines": [
      "std::string RestAuthHandler::generateJwt(std::string const& username) const {",
      "  return fuerte::jwt::generateUserToken(",
      "      af->tokenCache().jwtSecret(), ",
      "      username, ",
      "      std::chrono::seconds(uint64_t(af->sessionTimeout())));"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/arangodb/arangodb/pull/14118",
  "description": {
    "pr_info": {
      "title": "Revive startup parameter `--server.session-timeout`",
      "number": 14118
    },
    "comment": [
      "### Scope & Purpose\r\n\r\nIn order to address APM-79: https://arangodb.atlassian.net/browse/APM-79\r\nDocs PR: https://github.com/arangodb/docs/pull/720\r\n\r\nRevive startup parameter `--server.session-timeout` to control the timeout for web interface sessions and other sessions that are based on JWTs created by the `/_open/auth` API.\r\nThe default timeout value is 30 days, which is identical to the currently hard-coded timeout used.\r\n\r\nQuestions: shall we introduce this with a lower timeout value? Or at least adjust the timeout in devel?\r\n\r\n- [x] :hankey: Bugfix (requires CHANGELOG entry)\r\n- [x] :pizza: New feature (requires CHANGELOG entry, feature documentation and release notes)\r\n- [ ] :fire: Performance improvement\r\n- [ ] :hammer: Refactoring/simplification\r\n- [x] :book: CHANGELOG entry made\r\n\r\n#### Backports:\r\n\r\n- [x] Backports required for: *3.8*, *3.7*\r\n\r\n#### Related Information\r\n\r\n- [x] Docs PR: https://github.com/arangodb/docs/pull/720\r\n- [x] GitHub issue / Jira ticket number: https://arangodb.atlassian.net/browse/APM-79\r\n\r\n### Testing & Verification\r\n\r\n- [x] This change is a trivial rework / code cleanup without any test coverage.\r\n- [x] The behavior in this PR was *manually tested*\r\n"
    ]
  },
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "**Final Classification:** Defect Remediation & Feature Upgrades  \n**Confidence:** 0.95\n\nThe patch revives a feature allowing configuration of session timeouts, which is a non-security feature enhancement."
}