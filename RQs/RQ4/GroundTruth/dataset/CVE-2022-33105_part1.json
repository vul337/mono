{
  "cve_id": "CVE-2022-33105",
  "cwe_ids": [
    "CWE-401"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "redis",
  "commit_msg": "Fix memory leak in streamGetEdgeID (#10753)\n\nsi is initialized by streamIteratorStart(), we should call\r\nstreamIteratorStop() on it when done.\r\n\r\nregression introduced in #9127 (redis 7.0)",
  "commit_hash": "4a7a4e42db8ff757cdf3f4a824f66426036034ef",
  "git_url": "https://github.com/redis/redis/commit/4a7a4e42db8ff757cdf3f4a824f66426036034ef",
  "file_path": "src/t_stream.c",
  "func_name": "streamGetEdgeID",
  "func_before": "void streamGetEdgeID(stream *s, int first, int skip_tombstones, streamID *edge_id)\n{\n    streamIterator si;\n    int64_t numfields;\n    streamIteratorStart(&si,s,NULL,NULL,!first);\n    si.skip_tombstones = skip_tombstones;\n    int found = streamIteratorGetID(&si,edge_id,&numfields);\n    if (!found) {\n        streamID min_id = {0, 0}, max_id = {UINT64_MAX, UINT64_MAX};\n        *edge_id = first ? max_id : min_id;\n    }\n\n}",
  "abstract_func_before": "void streamGetEdgeID(stream *VAR_0, int VAR_1, int VAR_2, streamID *VAR_3)\n{\n    streamIterator VAR_4;\n    int64_t VAR_5;\n    streamIteratorStart(&VAR_4,VAR_0,NULL,NULL,!VAR_1);\n    VAR_4.skip_tombstones = VAR_2;\n    int VAR_6 = streamIteratorGetID(&VAR_4,VAR_3,&VAR_5);\n    if (!VAR_6) {\n        streamID VAR_7 = {0, 0}, VAR_8 = {VAR_9, VAR_9};\n        *VAR_3 = VAR_1 ? VAR_8 : VAR_7;\n    }\n\n}",
  "func_graph_path_before": "redis/4a7a4e42db8ff757cdf3f4a824f66426036034ef/t_stream.c/vul/before/0.json",
  "func": "void streamGetEdgeID(stream *s, int first, int skip_tombstones, streamID *edge_id)\n{\n    streamIterator si;\n    int64_t numfields;\n    streamIteratorStart(&si,s,NULL,NULL,!first);\n    si.skip_tombstones = skip_tombstones;\n    int found = streamIteratorGetID(&si,edge_id,&numfields);\n    if (!found) {\n        streamID min_id = {0, 0}, max_id = {UINT64_MAX, UINT64_MAX};\n        *edge_id = first ? max_id : min_id;\n    }\n    streamIteratorStop(&si);\n}",
  "abstract_func": "void streamGetEdgeID(stream *VAR_0, int VAR_1, int VAR_2, streamID *VAR_3)\n{\n    streamIterator VAR_4;\n    int64_t VAR_5;\n    streamIteratorStart(&VAR_4,VAR_0,NULL,NULL,!VAR_1);\n    VAR_4.skip_tombstones = VAR_2;\n    int VAR_6 = streamIteratorGetID(&VAR_4,VAR_3,&VAR_5);\n    if (!VAR_6) {\n        streamID VAR_7 = {0, 0}, VAR_8 = {VAR_9, VAR_9};\n        *VAR_3 = VAR_1 ? VAR_8 : VAR_7;\n    }\n    streamIteratorStop(&VAR_4);\n}",
  "func_graph_path": "redis/4a7a4e42db8ff757cdf3f4a824f66426036034ef/t_stream.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -9,5 +9,5 @@\n         streamID min_id = {0, 0}, max_id = {UINT64_MAX, UINT64_MAX};\n         *edge_id = first ? max_id : min_id;\n     }\n-\n+    streamIteratorStop(&si);\n }",
  "diff_line_info": {
    "deleted_lines": [
      ""
    ],
    "added_lines": [
      "    streamIteratorStop(&si);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/redis/redis/pull/10753",
  "description": {
    "pr_info": {
      "title": "Fix memory leak in streamGetEdgeID",
      "number": 10753
    },
    "comment": [
      "si is initialized by streamIteratorStart(), we should call streamIteratorStop() on it when done. #10752 ",
      "@Yuuoniy thank you.\r\np.s. the reason why this doesn't usually leak is that rax iterator has static buffers for short keys and shallow stacks.\r\nfor streams, the keys are always short, so the key would never leak any memory.\r\nbut the stack may leak on large streams.\r\n\r\nthis looks like a regression in redis 7.0 (#9127) that could in cause leaks in trimming (XADD, XTRIM), and also XDEL and AOFRW.\r\n\r\n@itamarhaber @guybe7 correct me if i'm wrong.",
      "@oranagra I see, thanks for your explanation. I found this one when went through the PR #10353 , and thought it will result in memory leak as well. ",
      "Apparently there's a CVE for this issue: https://github.com/advisories/GHSA-35rf-7vhx-9phr"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.9"
}