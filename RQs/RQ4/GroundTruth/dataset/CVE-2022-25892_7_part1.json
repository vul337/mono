{
  "cve_id": "CVE-2022-25892",
  "cwe_ids": [
    "CWE-Other"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
  "cvss_is_v3": true,
  "repo_name": "galkahana/HummusJS",
  "commit_msg": "corrections",
  "commit_hash": "a9bf2520ab5abb69f9328906e406fbebfb36159a",
  "git_url": "https://github.com/galkahana/HummusJS/commit/a9bf2520ab5abb69f9328906e406fbebfb36159a",
  "file_path": "src/deps/PDFWriter/DecryptionHelper.cpp",
  "func_name": "DecryptionHelper::OnObjectEnd",
  "func_before": "void DecryptionHelper::OnObjectEnd(PDFObject* inObject) {\n\tif (inObject == NULL)\n\t\treturn;\n\t\n\t// for streams, retain the encryption key with them, so i can later decrypt them when needed\n\tif ((inObject->GetType() == PDFObject::ePDFObjectStream) && IsDecrypting()) {\n\t\tXCryptionCommon* streamCryptFilter = GetCryptForStream((PDFStreamInput*)inObject);\n\t\tif (streamCryptFilter) {\n\t\t\tByteList* savedKey = new ByteList(streamCryptFilter->GetCurrentObjectKey());\n\t\t\tinObject->SetMetadata(scEcnryptionKeyMetadataKey, savedKey);\n\t\t}\n\t}\n\n\tStringToXCryptionCommonMap::iterator it = mXcrypts.begin();\n\tfor (; it != mXcrypts.end(); ++it) {\n\t\tit->second->OnObjectEnd();\n\t}\n}",
  "abstract_func_before": "void DecryptionHelper::OnObjectEnd(PDFObject* VAR_0) {\n\tif (VAR_0 == NULL)\n\t\treturn;\n\t\n\t/* COMMENT_0 */\n\tif ((VAR_0->GetType() == PDFObject::ePDFObjectStream) && IsDecrypting()) {\n\t\tXCryptionCommon* VAR_1 = GetCryptForStream((PDFStreamInput*)VAR_0);\n\t\tif (VAR_1) {\n\t\t\tByteList* VAR_2 = new ByteList(VAR_1->GetCurrentObjectKey());\n\t\t\tVAR_0->SetMetadata(VAR_3, VAR_2);\n\t\t}\n\t}\n\n\tStringToXCryptionCommonMap::iterator VAR_4 = VAR_5.begin();\n\tfor (; VAR_4 != VAR_5.end(); ++VAR_4) {\n\t\tVAR_4->second->OnObjectEnd();\n\t}\n}",
  "func_graph_path_before": "galkahana/HummusJS/a9bf2520ab5abb69f9328906e406fbebfb36159a/DecryptionHelper.cpp/vul/before/1.json",
  "func": "void DecryptionHelper::OnObjectEnd(PDFObject* inObject) {\n\tif (inObject == NULL)\n\t\treturn;\n\t\n\t// for streams, retain the encryption key with them, so i can later decrypt them when needed\n\tif ((inObject->GetType() == PDFObject::ePDFObjectStream) && IsDecrypting()) {\n\t\tXCryptionCommon* streamCryptFilter = GetCryptForStream((PDFStreamInput*)inObject);\n\t\tif (streamCryptFilter) {\n\t\t\tByteList* savedKey = new ByteList(streamCryptFilter->GetCurrentObjectKey());\n\t\t\tinObject->SetMetadata(scEcnryptionKeyMetadataKey,new Deletable<ByteList>(savedKey));\n\t\t}\n\t}\n\n\tStringToXCryptionCommonMap::iterator it = mXcrypts.begin();\n\tfor (; it != mXcrypts.end(); ++it) {\n\t\tit->second->OnObjectEnd();\n\t}\n}",
  "abstract_func": "void DecryptionHelper::OnObjectEnd(PDFObject* VAR_0) {\n\tif (VAR_0 == NULL)\n\t\treturn;\n\t\n\t/* COMMENT_0 */\n\tif ((VAR_0->GetType() == PDFObject::ePDFObjectStream) && IsDecrypting()) {\n\t\tXCryptionCommon* VAR_1 = GetCryptForStream((PDFStreamInput*)VAR_0);\n\t\tif (VAR_1) {\n\t\t\tByteList* VAR_2 = new ByteList(VAR_1->GetCurrentObjectKey());\n\t\t\tVAR_0->SetMetadata(VAR_3,new Deletable<ByteList>(VAR_2));\n\t\t}\n\t}\n\n\tStringToXCryptionCommonMap::iterator VAR_4 = VAR_5.begin();\n\tfor (; VAR_4 != VAR_5.end(); ++VAR_4) {\n\t\tVAR_4->second->OnObjectEnd();\n\t}\n}",
  "func_graph_path": "galkahana/HummusJS/a9bf2520ab5abb69f9328906e406fbebfb36159a/DecryptionHelper.cpp/vul/after/1.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -7,7 +7,7 @@\n \t\tXCryptionCommon* streamCryptFilter = GetCryptForStream((PDFStreamInput*)inObject);\n \t\tif (streamCryptFilter) {\n \t\t\tByteList* savedKey = new ByteList(streamCryptFilter->GetCurrentObjectKey());\n-\t\t\tinObject->SetMetadata(scEcnryptionKeyMetadataKey, savedKey);\n+\t\t\tinObject->SetMetadata(scEcnryptionKeyMetadataKey,new Deletable<ByteList>(savedKey));\n \t\t}\n \t}\n ",
  "diff_line_info": {
    "deleted_lines": [
      "\t\t\tinObject->SetMetadata(scEcnryptionKeyMetadataKey, savedKey);"
    ],
    "added_lines": [
      "\t\t\tinObject->SetMetadata(scEcnryptionKeyMetadataKey,new Deletable<ByteList>(savedKey));"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/galkahana/HummusJS/pull/464",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/galkahana/HummusJS/pull/464: 403 Client Error: Forbidden for url: https://api.github.com/repos/galkahana/HummusJS/pulls/464",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.85,
  "Bug Filter Response": "Final Classification: Security Vulnerability Fix; Confidence: 0.85"
}