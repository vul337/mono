{
  "cve_id": "CVE-2017-11577",
  "cwe_ids": [
    "CWE-125"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "fontforge",
  "commit_msg": "Fix out of bounds read in getsid\n\nCloses #3088",
  "commit_hash": "3245d354865def9d712bdffe61fa211ad6aa4081",
  "git_url": "https://github.com/fontforge/fontforge/commit/3245d354865def9d712bdffe61fa211ad6aa4081",
  "file_path": "fontforge/parsettf.c",
  "func_name": "TTF_PSDupsDefault",
  "func_before": "void TTF_PSDupsDefault(SplineFont *sf) {\n    struct ttflangname *english;\n    char versionbuf[40];\n\n    /* Ok, if we've just loaded a ttf file then we've got a bunch of langnames*/\n    /*  we copied some of them (copyright, family, fullname, etc) into equiv */\n    /*  postscript entries in the sf. If we then use FontInfo and change the */\n    /*  obvious postscript entries we are left with the old ttf entries. If */\n    /*  we generate a ttf file and then load it the old values pop up. */\n    /* Solution: Anything we can generate by default should be set to NULL */\n    for ( english=sf->names; english!=NULL && english->lang!=0x409; english=english->next );\n    if ( english==NULL )\nreturn;\n    if ( english->names[ttf_family]!=NULL &&\n\t    strcmp(english->names[ttf_family],sf->familyname)==0 ) {\n\tfree(english->names[ttf_family]);\n\tenglish->names[ttf_family]=NULL;\n    }\n    if ( english->names[ttf_copyright]!=NULL &&\n\t    strcmp(english->names[ttf_copyright],sf->copyright)==0 ) {\n\tfree(english->names[ttf_copyright]);\n\tenglish->names[ttf_copyright]=NULL;\n    }\n    if ( english->names[ttf_fullname]!=NULL &&\n\t    strcmp(english->names[ttf_fullname],sf->fullname)==0 ) {\n\tfree(english->names[ttf_fullname]);\n\tenglish->names[ttf_fullname]=NULL;\n    }\n    if ( sf->subfontcnt!=0 || sf->version!=NULL ) {\n\tif ( sf->subfontcnt!=0 )\n\t    sprintf( versionbuf, \"Version %f\", sf->cidversion );\n\telse\n\t    sprintf(versionbuf,\"Version %.20s \", sf->version);\n\tif ( english->names[ttf_version]!=NULL &&\n\t\tstrcmp(english->names[ttf_version],versionbuf)==0 ) {\n\t    free(english->names[ttf_version]);\n\t    english->names[ttf_version]=NULL;\n\t}\n    }\n    if ( english->names[ttf_subfamily]!=NULL &&\n\t    strcmp(english->names[ttf_subfamily],SFGetModifiers(sf))==0 ) {\n\tfree(english->names[ttf_subfamily]);\n\tenglish->names[ttf_subfamily]=NULL;\n    }\n\n    /* User should not be allowed any access to this one, not ever */\n    free(english->names[ttf_postscriptname]);\n    english->names[ttf_postscriptname]=NULL;\n}",
  "abstract_func_before": "void TTF_PSDupsDefault(SplineFont *VAR_0) {\n    struct ttflangname *VAR_1;\n    char VAR_2[40];\n\n    /* COMMENT_0 */\n    /* COMMENT_1 */\n    /* COMMENT_2 */\n    /* COMMENT_3 */\n    /* COMMENT_4 */\n    /* COMMENT_5 */\n    for ( VAR_1=VAR_0->names; VAR_1!=NULL && VAR_1->lang!=0x409; VAR_1=VAR_1->next );\n    if ( VAR_1==NULL )\nreturn;\n    if ( VAR_1->names[VAR_3]!=NULL &&\n\t    strcmp(VAR_1->names[VAR_3],VAR_0->familyname)==0 ) {\n\tfree(VAR_1->names[VAR_3]);\n\tVAR_1->names[VAR_3]=NULL;\n    }\n    if ( VAR_1->names[VAR_4]!=NULL &&\n\t    strcmp(VAR_1->names[VAR_4],VAR_0->copyright)==0 ) {\n\tfree(VAR_1->names[VAR_4]);\n\tVAR_1->names[VAR_4]=NULL;\n    }\n    if ( VAR_1->names[VAR_5]!=NULL &&\n\t    strcmp(VAR_1->names[VAR_5],VAR_0->fullname)==0 ) {\n\tfree(VAR_1->names[VAR_5]);\n\tVAR_1->names[VAR_5]=NULL;\n    }\n    if ( VAR_0->subfontcnt!=0 || VAR_0->version!=NULL ) {\n\tif ( VAR_0->subfontcnt!=0 )\n\t    sprintf( VAR_2, \"Version %f\", VAR_0->cidversion );\n\telse\n\t    sprintf(VAR_2,\"Version %.20s \", VAR_0->version);\n\tif ( VAR_1->names[VAR_6]!=NULL &&\n\t\tstrcmp(VAR_1->names[VAR_6],VAR_2)==0 ) {\n\t    free(VAR_1->names[VAR_6]);\n\t    VAR_1->names[VAR_6]=NULL;\n\t}\n    }\n    if ( VAR_1->names[VAR_7]!=NULL &&\n\t    strcmp(VAR_1->names[VAR_7],SFGetModifiers(VAR_0))==0 ) {\n\tfree(VAR_1->names[VAR_7]);\n\tVAR_1->names[VAR_7]=NULL;\n    }\n\n    /* COMMENT_6 */\n    free(VAR_1->names[VAR_8]);\n    VAR_1->names[VAR_8]=NULL;\n}",
  "func_graph_path_before": "fontforge/3245d354865def9d712bdffe61fa211ad6aa4081/parsettf.c/vul/before/1.json",
  "func": "void TTF_PSDupsDefault(SplineFont *sf) {\n    struct ttflangname *english;\n    char versionbuf[40];\n\n    /* Ok, if we've just loaded a ttf file then we've got a bunch of langnames*/\n    /*  we copied some of them (copyright, family, fullname, etc) into equiv */\n    /*  postscript entries in the sf. If we then use FontInfo and change the */\n    /*  obvious postscript entries we are left with the old ttf entries. If */\n    /*  we generate a ttf file and then load it the old values pop up. */\n    /* Solution: Anything we can generate by default should be set to NULL */\n    for ( english=sf->names; english!=NULL && english->lang!=0x409; english=english->next );\n    if ( english==NULL )\nreturn;\n    if ( english->names[ttf_family]!=NULL && sf->familyname!=NULL &&\n\t    strcmp(english->names[ttf_family],sf->familyname)==0 ) {\n\tfree(english->names[ttf_family]);\n\tenglish->names[ttf_family]=NULL;\n    }\n    if ( english->names[ttf_copyright]!=NULL && sf->copyright!=NULL &&\n\t    strcmp(english->names[ttf_copyright],sf->copyright)==0 ) {\n\tfree(english->names[ttf_copyright]);\n\tenglish->names[ttf_copyright]=NULL;\n    }\n    if ( english->names[ttf_fullname]!=NULL && sf->fullname!=NULL &&\n\t    strcmp(english->names[ttf_fullname],sf->fullname)==0 ) {\n\tfree(english->names[ttf_fullname]);\n\tenglish->names[ttf_fullname]=NULL;\n    }\n    if ( sf->subfontcnt!=0 || sf->version!=NULL ) {\n\tif ( sf->subfontcnt!=0 )\n\t    sprintf( versionbuf, \"Version %f\", sf->cidversion );\n\telse\n\t    sprintf(versionbuf,\"Version %.20s \", sf->version);\n\tif ( english->names[ttf_version]!=NULL &&\n\t\tstrcmp(english->names[ttf_version],versionbuf)==0 ) {\n\t    free(english->names[ttf_version]);\n\t    english->names[ttf_version]=NULL;\n\t}\n    }\n    if ( english->names[ttf_subfamily]!=NULL &&\n\t    strcmp(english->names[ttf_subfamily],SFGetModifiers(sf))==0 ) {\n\tfree(english->names[ttf_subfamily]);\n\tenglish->names[ttf_subfamily]=NULL;\n    }\n\n    /* User should not be allowed any access to this one, not ever */\n    free(english->names[ttf_postscriptname]);\n    english->names[ttf_postscriptname]=NULL;\n}",
  "abstract_func": "void TTF_PSDupsDefault(SplineFont *VAR_0) {\n    struct ttflangname *VAR_1;\n    char VAR_2[40];\n\n    /* COMMENT_0 */\n    /* COMMENT_1 */\n    /* COMMENT_2 */\n    /* COMMENT_3 */\n    /* COMMENT_4 */\n    /* COMMENT_5 */\n    for ( VAR_1=VAR_0->names; VAR_1!=NULL && VAR_1->lang!=0x409; VAR_1=VAR_1->next );\n    if ( VAR_1==NULL )\nreturn;\n    if ( VAR_1->names[VAR_3]!=NULL && VAR_0->familyname!=NULL &&\n\t    strcmp(VAR_1->names[VAR_3],VAR_0->familyname)==0 ) {\n\tfree(VAR_1->names[VAR_3]);\n\tVAR_1->names[VAR_3]=NULL;\n    }\n    if ( VAR_1->names[VAR_4]!=NULL && VAR_0->copyright!=NULL &&\n\t    strcmp(VAR_1->names[VAR_4],VAR_0->copyright)==0 ) {\n\tfree(VAR_1->names[VAR_4]);\n\tVAR_1->names[VAR_4]=NULL;\n    }\n    if ( VAR_1->names[VAR_5]!=NULL && VAR_0->fullname!=NULL &&\n\t    strcmp(VAR_1->names[VAR_5],VAR_0->fullname)==0 ) {\n\tfree(VAR_1->names[VAR_5]);\n\tVAR_1->names[VAR_5]=NULL;\n    }\n    if ( VAR_0->subfontcnt!=0 || VAR_0->version!=NULL ) {\n\tif ( VAR_0->subfontcnt!=0 )\n\t    sprintf( VAR_2, \"Version %f\", VAR_0->cidversion );\n\telse\n\t    sprintf(VAR_2,\"Version %.20s \", VAR_0->version);\n\tif ( VAR_1->names[VAR_6]!=NULL &&\n\t\tstrcmp(VAR_1->names[VAR_6],VAR_2)==0 ) {\n\t    free(VAR_1->names[VAR_6]);\n\t    VAR_1->names[VAR_6]=NULL;\n\t}\n    }\n    if ( VAR_1->names[VAR_7]!=NULL &&\n\t    strcmp(VAR_1->names[VAR_7],SFGetModifiers(VAR_0))==0 ) {\n\tfree(VAR_1->names[VAR_7]);\n\tVAR_1->names[VAR_7]=NULL;\n    }\n\n    /* COMMENT_6 */\n    free(VAR_1->names[VAR_8]);\n    VAR_1->names[VAR_8]=NULL;\n}",
  "func_graph_path": "fontforge/3245d354865def9d712bdffe61fa211ad6aa4081/parsettf.c/vul/after/1.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -11,17 +11,17 @@\n     for ( english=sf->names; english!=NULL && english->lang!=0x409; english=english->next );\n     if ( english==NULL )\n return;\n-    if ( english->names[ttf_family]!=NULL &&\n+    if ( english->names[ttf_family]!=NULL && sf->familyname!=NULL &&\n \t    strcmp(english->names[ttf_family],sf->familyname)==0 ) {\n \tfree(english->names[ttf_family]);\n \tenglish->names[ttf_family]=NULL;\n     }\n-    if ( english->names[ttf_copyright]!=NULL &&\n+    if ( english->names[ttf_copyright]!=NULL && sf->copyright!=NULL &&\n \t    strcmp(english->names[ttf_copyright],sf->copyright)==0 ) {\n \tfree(english->names[ttf_copyright]);\n \tenglish->names[ttf_copyright]=NULL;\n     }\n-    if ( english->names[ttf_fullname]!=NULL &&\n+    if ( english->names[ttf_fullname]!=NULL && sf->fullname!=NULL &&\n \t    strcmp(english->names[ttf_fullname],sf->fullname)==0 ) {\n \tfree(english->names[ttf_fullname]);\n \tenglish->names[ttf_fullname]=NULL;",
  "diff_line_info": {
    "deleted_lines": [
      "    if ( english->names[ttf_family]!=NULL &&",
      "    if ( english->names[ttf_copyright]!=NULL &&",
      "    if ( english->names[ttf_fullname]!=NULL &&"
    ],
    "added_lines": [
      "    if ( english->names[ttf_family]!=NULL && sf->familyname!=NULL &&",
      "    if ( english->names[ttf_copyright]!=NULL && sf->copyright!=NULL &&",
      "    if ( english->names[ttf_fullname]!=NULL && sf->fullname!=NULL &&"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/fontforge/fontforge/pull/3124",
  "description": {
    "pr_info": {
      "title": "Fix a few cves",
      "number": 3124
    },
    "comment": [
      "So the long and the short of it is that FontForge was not designed with security in mind. I would not be surprised at all if a simple permutation on the test cases resulted in another buffer overflow/out of bounds read/etc. There's just too many cases to cover.\r\n\r\nAnyway, this fixes most of the *specific* test cases as listed in #3123. I've avoided #3097 and #3098 which involves changing the codegen around the unicode library. For any other issue in that list where there isn't a specific commit, it's probably been fixed as a side effect of one of the other commits.",
      "Just in time. I'm cutting a release tomorrow. I'll review as soon as I get a chance.\r\n",
      "I made one inline comment/query. It otherwise looks fine.\r\n",
      "All good.\r\n"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 0.95"
}