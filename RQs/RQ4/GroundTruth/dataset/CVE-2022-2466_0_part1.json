{
  "cve_id": "CVE-2022-2466",
  "cwe_ids": [
    "CWE-444"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
  "cvss_is_v3": true,
  "repo_name": "quarkusio/quarkus",
  "commit_msg": "GraphQL to terminate the request even if it was active\n\nSigned-off-by: Phillip Kruger <phillip.kruger@gmail.com>",
  "commit_hash": "08e5c3106ce4bfb18b24a38514eeba6464668b07",
  "git_url": "https://github.com/quarkusio/quarkus/commit/08e5c3106ce4bfb18b24a38514eeba6464668b07",
  "file_path": "extensions/smallrye-graphql/runtime/src/main/java/io/quarkus/smallrye/graphql/runtime/SmallRyeGraphQLAbstractHandler.java",
  "func_name": "handle",
  "func_before": "@Override\n    public void handle(final RoutingContext ctx) {\n\n        if (currentManagedContext.isActive()) {\n            handleWithIdentity(ctx);\n        } else {\n\n            currentManagedContext.activate();\n            ctx.response()\n                    .endHandler(currentManagedContextTerminationHandler)\n                    .exceptionHandler(currentManagedContextTerminationHandler)\n                    .closeHandler(currentManagedContextTerminationHandler);\n\n            try {\n                handleWithIdentity(ctx);\n            } catch (Throwable t) {\n                currentManagedContext.terminate();\n                throw t;\n            }\n        }\n    }",
  "abstract_func_before": "@Override\n    public void handle(final RoutingContext VAR_0) {\n\n        if (VAR_1.isActive()) {\n            handleWithIdentity(VAR_0);\n        } else {\n\n            VAR_1.activate();\n            VAR_0.response()\n                    .endHandler(VAR_2)\n                    .exceptionHandler(VAR_2)\n                    .closeHandler(VAR_2);\n\n            try {\n                handleWithIdentity(VAR_0);\n            } catch (Throwable VAR_3) {\n                VAR_1.terminate();\n                throw VAR_3;\n            }\n        }\n    }",
  "func_graph_path_before": "quarkusio/quarkus/08e5c3106ce4bfb18b24a38514eeba6464668b07/SmallRyeGraphQLAbstractHandler.java/vul/before/0.json",
  "func": "@Override\n    public void handle(final RoutingContext ctx) {\n\n        ctx.response()\n                .endHandler(currentManagedContextTerminationHandler)\n                .exceptionHandler(currentManagedContextTerminationHandler)\n                .closeHandler(currentManagedContextTerminationHandler);\n        if (!currentManagedContext.isActive()) {\n            currentManagedContext.activate();\n        }\n        try {\n            handleWithIdentity(ctx);\n        } catch (Throwable t) {\n            currentManagedContext.terminate();\n            throw t;\n        }\n    }",
  "abstract_func": "@Override\n    public void handle(final RoutingContext VAR_0) {\n\n        VAR_0.response()\n                .endHandler(VAR_1)\n                .exceptionHandler(VAR_1)\n                .closeHandler(VAR_1);\n        if (!VAR_2.isActive()) {\n            VAR_2.activate();\n        }\n        try {\n            handleWithIdentity(VAR_0);\n        } catch (Throwable VAR_3) {\n            VAR_2.terminate();\n            throw VAR_3;\n        }\n    }",
  "func_graph_path": "quarkusio/quarkus/08e5c3106ce4bfb18b24a38514eeba6464668b07/SmallRyeGraphQLAbstractHandler.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,21 +1,17 @@\n @Override\n     public void handle(final RoutingContext ctx) {\n \n-        if (currentManagedContext.isActive()) {\n+        ctx.response()\n+                .endHandler(currentManagedContextTerminationHandler)\n+                .exceptionHandler(currentManagedContextTerminationHandler)\n+                .closeHandler(currentManagedContextTerminationHandler);\n+        if (!currentManagedContext.isActive()) {\n+            currentManagedContext.activate();\n+        }\n+        try {\n             handleWithIdentity(ctx);\n-        } else {\n-\n-            currentManagedContext.activate();\n-            ctx.response()\n-                    .endHandler(currentManagedContextTerminationHandler)\n-                    .exceptionHandler(currentManagedContextTerminationHandler)\n-                    .closeHandler(currentManagedContextTerminationHandler);\n-\n-            try {\n-                handleWithIdentity(ctx);\n-            } catch (Throwable t) {\n-                currentManagedContext.terminate();\n-                throw t;\n-            }\n+        } catch (Throwable t) {\n+            currentManagedContext.terminate();\n+            throw t;\n         }\n     }",
  "diff_line_info": {
    "deleted_lines": [
      "        if (currentManagedContext.isActive()) {",
      "        } else {",
      "",
      "            currentManagedContext.activate();",
      "            ctx.response()",
      "                    .endHandler(currentManagedContextTerminationHandler)",
      "                    .exceptionHandler(currentManagedContextTerminationHandler)",
      "                    .closeHandler(currentManagedContextTerminationHandler);",
      "",
      "            try {",
      "                handleWithIdentity(ctx);",
      "            } catch (Throwable t) {",
      "                currentManagedContext.terminate();",
      "                throw t;",
      "            }"
    ],
    "added_lines": [
      "        ctx.response()",
      "                .endHandler(currentManagedContextTerminationHandler)",
      "                .exceptionHandler(currentManagedContextTerminationHandler)",
      "                .closeHandler(currentManagedContextTerminationHandler);",
      "        if (!currentManagedContext.isActive()) {",
      "            currentManagedContext.activate();",
      "        }",
      "        try {",
      "        } catch (Throwable t) {",
      "            currentManagedContext.terminate();",
      "            throw t;"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/quarkusio/quarkus/pull/26934",
  "description": {
    "pr_info": {
      "title": "GraphQL to terminate the request even if it was active",
      "number": 26934
    },
    "comment": [
      "Fix #26748\r\n(Again)\r\n\r\nThanks @cescoffier for the help :)\r\n\r\n\r\nSigned-off-by: Phillip Kruger <phillip.kruger@gmail.com>",
      "Hmmm, too bad we missed it when reviewing. I'm wondering what I should do:\r\n\r\n1. release a 2.10.4.Final? yes/no\r\n2. skip 2.11.0.Final and release a 2.11.1.Final tomorrow with the fix? yes/no\r\n\r\nIf we do 2/, we could skip 1/ but we might want to release a 2.10.4.Final with just this fix to have a safe upgrade target for users of 2.10?\r\n\r\nOther option is to just wait for 2.11.1.Final in a week or so but I don't think it's acceptable.\r\n\r\n/cc @geoand ",
      "> If we do 2/, we could skip 1/ but we might want to release a 2.10.4.Final with just this fix to have a safe upgrade target for users of 2.10?\r\n\r\nI prefer this solution.",
      "@geoand so release both 2.10.4.Final and 2.11.1.Final?",
      "Yeah, I think given the severity of this, it's the best thing to do.",
      "Agreed even if I'm not terribly excited about it :).",
      "## Failing Jobs - Building 08e5c3106ce4bfb18b24a38514eeba6464668b07\n\n\n\n| Status | Name | Step | Failures | Logs | Raw logs |\n| :-:  | --  | --  | :-:  | :-:  | :-:  |\n| :heavy_check_mark: | Gradle Tests - JDK 11 |  |  |  | \n| ✖ | Gradle Tests - JDK 11 Windows | `Build` | [Failures](#user-content-test-failures-job-7520964656) | [Logs](https://github.com/quarkusio/quarkus/runs/7520964656?check_suite_focus=true) | [Raw logs](https://github.com/quarkusio/quarkus/commit/08e5c3106ce4bfb18b24a38514eeba6464668b07/checks/7520964656/logs)\n\nFull information is available in the [Build summary check run](https://github.com/quarkusio/quarkus/runs/7522320061).\n\n\n## Failures\n\n### :gear: Gradle Tests - JDK 11 Windows <a href=\"#user-content-test-failures-job-7520964656\" id=\"test-failures-job-7520964656\">#</a>\n\n```diff\n- Failing: integration-tests/gradle \n\n```\n\n#### :package: integration-tests/gradle\n\n<p>✖ <code>io.quarkus.gradle.devmode.CompositeBuildWithDependenciesDevModeTest.main</code> line <code>24</code> - <a href=\"https://github.com/quarkusio/quarkus/runs/7522320061#user-content-test-failure-io.quarkus.gradle.devmode.compositebuildwithdependenciesdevmodetest-1\">More details</a> - <a href=\"https://github.com/quarkusio/quarkus/blob/08e5c3106ce4bfb18b24a38514eeba6464668b07/integration-tests/gradle/src/test/java/io/quarkus/gradle/devmode/CompositeBuildWithDependenciesDevModeTest.java#L24\">Source on GitHub</a></p>\n\n<details>\n\n```\norg.awaitility.core.ConditionTimeoutException: Condition with lambda expression in io.quarkus.test.devmode.util.DevModeTestUtils that uses java.util.function.Supplier, java.util.function.Supplierjava.util.concurrent.atomic.AtomicReference, java.util.concurrent.atomic.AtomicReferencejava.lang.String, java.lang.Stringboolean was not fulfilled within 1 minutes.\n\tat org.awaitility.core.ConditionAwaiter.await(ConditionAwaiter.java:167)\n\tat org.awaitility.core.CallableCondition.await(CallableCondition.java:78)\n```\n\n</details>\n\n\n<!-- Quarkus-GitHub-Bot/msg-id:workflow-run-status-active -->",
      "Milestone is already set for some of the items:\n\n* Issue #26748\n\nWe haven't automatically updated the milestones for these items.\n\n> This message is automatically generated by a bot."
    ]
  },
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.8,
  "Bug Filter Response": "**Final Classification:** Defect Remediation & Feature Upgrades  \n**Confidence:** 0.8\n\n**Explanation:**  \nThe patch modifies the handling of GraphQL requests to ensure proper termination, addressing a non-security bug related to resource management. The code changes restructure the logic to activate the context conditionally and set up termination handlers, suggesting a fix for a specific issue without explicit security implications. The confidence is high due to functional improvements, though slight ambiguity exists without an explicit security reference."
}