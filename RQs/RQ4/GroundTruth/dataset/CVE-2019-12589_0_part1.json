{
  "cve_id": "CVE-2019-12589",
  "cwe_ids": [
    "CWE-732"
  ],
  "cvss_vector": "AV:L/AC:L/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "netblue30/firejail",
  "commit_msg": "mount runtime seccomp files read-only (#2602)\n\navoid creating locations in the file system that are both writable and\r\nexecutable (in this case for processes with euid of the user).\r\n\r\nfor the same reason also remove user owned libfiles\r\nwhen it is not needed any more",
  "commit_hash": "eecf35c2f8249489a1d3e512bb07f0d427183134",
  "git_url": "https://github.com/netblue30/firejail/commit/eecf35c2f8249489a1d3e512bb07f0d427183134",
  "file_path": "src/firejail/preproc.c",
  "func_name": "preproc_mount_mnt_dir",
  "func_before": "void preproc_mount_mnt_dir(void) {\n\t// mount tmpfs on top of /run/firejail/mnt\n\tif (!tmpfs_mounted) {\n\t\tif (arg_debug)\n\t\t\tprintf(\"Mounting tmpfs on %s directory\\n\", RUN_MNT_DIR);\n\t\tif (mount(\"tmpfs\", RUN_MNT_DIR, \"tmpfs\", MS_NOSUID | MS_STRICTATIME,  \"mode=755,gid=0\") < 0)\n\t\t\terrExit(\"mounting /run/firejail/mnt\");\n\t\ttmpfs_mounted = 1;\n\t\tfs_logger2(\"tmpfs\", RUN_MNT_DIR);\n\n#ifdef HAVE_SECCOMP\n\t\tif (arg_seccomp_block_secondary)\n\t\t\tcopy_file(PATH_SECCOMP_BLOCK_SECONDARY, RUN_SECCOMP_BLOCK_SECONDARY, getuid(), getgid(), 0644); // root needed\n\t\telse {\n\t\t\t//copy default seccomp files\n\t\t\tcopy_file(PATH_SECCOMP_32, RUN_SECCOMP_32, getuid(), getgid(), 0644); // root needed\n\t\t}\n\t\tif (arg_allow_debuggers)\n\t\t\tcopy_file(PATH_SECCOMP_DEFAULT_DEBUG, RUN_SECCOMP_CFG, getuid(), getgid(), 0644); // root needed\n\t\telse\n\t\t\tcopy_file(PATH_SECCOMP_DEFAULT, RUN_SECCOMP_CFG, getuid(), getgid(), 0644); // root needed\n\n\t\tif (arg_memory_deny_write_execute)\n\t\t\tcopy_file(PATH_SECCOMP_MDWX, RUN_SECCOMP_MDWX, getuid(), getgid(), 0644); // root needed\n\t\t// as root, create empty RUN_SECCOMP_PROTOCOL and RUN_SECCOMP_POSTEXEC files\n\t\tcreate_empty_file_as_root(RUN_SECCOMP_PROTOCOL, 0644);\n\t\tif (set_perms(RUN_SECCOMP_PROTOCOL, getuid(), getgid(), 0644))\n\t\t\terrExit(\"set_perms\");\n\t\tcreate_empty_file_as_root(RUN_SECCOMP_POSTEXEC, 0644);\n\t\tif (set_perms(RUN_SECCOMP_POSTEXEC, getuid(), getgid(), 0644))\n\t\t\terrExit(\"set_perms\");\n#endif\n\t}\n}",
  "abstract_func_before": "void preproc_mount_mnt_dir(void) {\n\t/* COMMENT_0 */\n\tif (!VAR_0) {\n\t\tif (VAR_1)\n\t\t\tprintf(\"Mounting tmpfs on %s directory\\n\", VAR_2);\n\t\tif (mount(\"tmpfs\", VAR_2, \"tmpfs\", VAR_3 | VAR_4,  \"mode=755,gid=0\") < 0)\n\t\t\terrExit(\"mounting /run/firejail/mnt\");\n\t\tVAR_0 = 1;\n\t\tfs_logger2(\"tmpfs\", VAR_2);\n\n#ifdef VAR_5\n\t\tif (VAR_6)\n\t\t\tcopy_file(VAR_7, VAR_8, getuid(), getgid(), 0644); /* COMMENT_1 */\n\t\telse {\n\t\t\t/* COMMENT_2 */\n\t\t\tcopy_file(VAR_9, VAR_10, getuid(), getgid(), 0644); /* COMMENT_1 */\n\t\t}\n\t\tif (VAR_11)\n\t\t\tcopy_file(VAR_12, VAR_13, getuid(), getgid(), 0644); /* COMMENT_1 */\n\t\telse\n\t\t\tcopy_file(VAR_14, VAR_13, getuid(), getgid(), 0644); /* COMMENT_1 */\n\n\t\tif (VAR_15)\n\t\t\tcopy_file(VAR_16, VAR_17, getuid(), getgid(), 0644); /* COMMENT_1 */\n\t\t/* COMMENT_3 */\n\t\tcreate_empty_file_as_root(VAR_18, 0644);\n\t\tif (set_perms(VAR_18, getuid(), getgid(), 0644))\n\t\t\terrExit(\"set_perms\");\n\t\tcreate_empty_file_as_root(VAR_19, 0644);\n\t\tif (set_perms(VAR_19, getuid(), getgid(), 0644))\n\t\t\terrExit(\"set_perms\");\n#endif\n\t}\n}",
  "func_graph_path_before": "netblue30/firejail/eecf35c2f8249489a1d3e512bb07f0d427183134/preproc.c/vul/before/0.json",
  "func": "void preproc_mount_mnt_dir(void) {\n\t// mount tmpfs on top of /run/firejail/mnt\n\tif (!tmpfs_mounted) {\n\t\tif (arg_debug)\n\t\t\tprintf(\"Mounting tmpfs on %s directory\\n\", RUN_MNT_DIR);\n\t\tif (mount(\"tmpfs\", RUN_MNT_DIR, \"tmpfs\", MS_NOSUID | MS_STRICTATIME,  \"mode=755,gid=0\") < 0)\n\t\t\terrExit(\"mounting /run/firejail/mnt\");\n\t\ttmpfs_mounted = 1;\n\t\tfs_logger2(\"tmpfs\", RUN_MNT_DIR);\n\n#ifdef HAVE_SECCOMP\n\t\tcreate_empty_dir_as_root(RUN_SECCOMP_DIR, 0755);\n\n\t\tif (arg_seccomp_block_secondary)\n\t\t\tcopy_file(PATH_SECCOMP_BLOCK_SECONDARY, RUN_SECCOMP_BLOCK_SECONDARY, getuid(), getgid(), 0644); // root needed\n\t\telse {\n\t\t\t//copy default seccomp files\n\t\t\tcopy_file(PATH_SECCOMP_32, RUN_SECCOMP_32, getuid(), getgid(), 0644); // root needed\n\t\t}\n\t\tif (arg_allow_debuggers)\n\t\t\tcopy_file(PATH_SECCOMP_DEFAULT_DEBUG, RUN_SECCOMP_CFG, getuid(), getgid(), 0644); // root needed\n\t\telse\n\t\t\tcopy_file(PATH_SECCOMP_DEFAULT, RUN_SECCOMP_CFG, getuid(), getgid(), 0644); // root needed\n\n\t\tif (arg_memory_deny_write_execute)\n\t\t\tcopy_file(PATH_SECCOMP_MDWX, RUN_SECCOMP_MDWX, getuid(), getgid(), 0644); // root needed\n\t\t// as root, create empty RUN_SECCOMP_PROTOCOL and RUN_SECCOMP_POSTEXEC files\n\t\tcreate_empty_file_as_root(RUN_SECCOMP_PROTOCOL, 0644);\n\t\tif (set_perms(RUN_SECCOMP_PROTOCOL, getuid(), getgid(), 0644))\n\t\t\terrExit(\"set_perms\");\n\t\tcreate_empty_file_as_root(RUN_SECCOMP_POSTEXEC, 0644);\n\t\tif (set_perms(RUN_SECCOMP_POSTEXEC, getuid(), getgid(), 0644))\n\t\t\terrExit(\"set_perms\");\n#endif\n\t}\n}",
  "abstract_func": "void preproc_mount_mnt_dir(void) {\n\t/* COMMENT_0 */\n\tif (!VAR_0) {\n\t\tif (VAR_1)\n\t\t\tprintf(\"Mounting tmpfs on %s directory\\n\", VAR_2);\n\t\tif (mount(\"tmpfs\", VAR_2, \"tmpfs\", VAR_3 | VAR_4,  \"mode=755,gid=0\") < 0)\n\t\t\terrExit(\"mounting /run/firejail/mnt\");\n\t\tVAR_0 = 1;\n\t\tfs_logger2(\"tmpfs\", VAR_2);\n\n#ifdef VAR_5\n\t\tcreate_empty_dir_as_root(VAR_6, 0755);\n\n\t\tif (VAR_7)\n\t\t\tcopy_file(VAR_8, VAR_9, getuid(), getgid(), 0644); /* COMMENT_1 */\n\t\telse {\n\t\t\t/* COMMENT_2 */\n\t\t\tcopy_file(VAR_10, VAR_11, getuid(), getgid(), 0644); /* COMMENT_1 */\n\t\t}\n\t\tif (VAR_12)\n\t\t\tcopy_file(VAR_13, VAR_14, getuid(), getgid(), 0644); /* COMMENT_1 */\n\t\telse\n\t\t\tcopy_file(VAR_15, VAR_14, getuid(), getgid(), 0644); /* COMMENT_1 */\n\n\t\tif (VAR_16)\n\t\t\tcopy_file(VAR_17, VAR_18, getuid(), getgid(), 0644); /* COMMENT_1 */\n\t\t/* COMMENT_3 */\n\t\tcreate_empty_file_as_root(VAR_19, 0644);\n\t\tif (set_perms(VAR_19, getuid(), getgid(), 0644))\n\t\t\terrExit(\"set_perms\");\n\t\tcreate_empty_file_as_root(VAR_20, 0644);\n\t\tif (set_perms(VAR_20, getuid(), getgid(), 0644))\n\t\t\terrExit(\"set_perms\");\n#endif\n\t}\n}",
  "func_graph_path": "netblue30/firejail/eecf35c2f8249489a1d3e512bb07f0d427183134/preproc.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -9,6 +9,8 @@\n \t\tfs_logger2(\"tmpfs\", RUN_MNT_DIR);\n \n #ifdef HAVE_SECCOMP\n+\t\tcreate_empty_dir_as_root(RUN_SECCOMP_DIR, 0755);\n+\n \t\tif (arg_seccomp_block_secondary)\n \t\t\tcopy_file(PATH_SECCOMP_BLOCK_SECONDARY, RUN_SECCOMP_BLOCK_SECONDARY, getuid(), getgid(), 0644); // root needed\n \t\telse {",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "\t\tcreate_empty_dir_as_root(RUN_SECCOMP_DIR, 0755);",
      ""
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/netblue30/firejail/pull/2602",
  "description": {
    "pr_info": {
      "title": "mount runtime seccomp files read-only",
      "number": 2602
    },
    "comment": [
      "In order to reduce exposure to locations that are both writable and executable (only processes with euid of the user):\r\n* group user owned /run/firejail/mnt/seccomp.* files in a directory and\r\n* mount this directory read-only\r\n* remove user owned /run/firejail/mnt/libfiles once it is not needed any more\r\n\r\n/run/firejail/mnt/pulse and /run/firejail/mnt/sec.Xauthority are noexec already, and the appimage mounts are read-only, so I think this PR should cover the last remaining paths. To make this possible it was necessary to drop capabilities a little bit later during sandbox setup.",
      "@smithosu - looks fine, bring it in! It has a conflict in src/firejail/sandbox.c. Thanks!"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 1.0"
}