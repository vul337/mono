{
  "cve_id": "CVE-2022-0265",
  "cwe_ids": [
    "CWE-611"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "hazelcast",
  "commit_msg": "Add helper method to XmlUtil to enable XXE protection in the SAXParserFactory and XMLInputFactory (#20407)",
  "commit_hash": "4d6b666cd0291abd618c3b95cdbb51aa4208e748",
  "git_url": "https://github.com/hazelcast/hazelcast/commit/4d6b666cd0291abd618c3b95cdbb51aa4208e748",
  "file_path": "hazelcast/src/main/java/com/hazelcast/internal/util/XmlUtil.java",
  "func_name": "setAttribute",
  "func_before": "static void setAttribute(TransformerFactory transformerFactory, String attributeName) {\n        try {\n            transformerFactory.setAttribute(attributeName, \"\");\n        } catch (IllegalArgumentException iae) {\n            if (Boolean.getBoolean(SYSTEM_PROPERTY_IGNORE_XXE_PROTECTION_FAILURES)) {\n                LOGGER.warning(\"Enabling XXE protection failed. The attribute \" + attributeName\n                        + \" is not supported by the TransformerFactory. The \" + SYSTEM_PROPERTY_IGNORE_XXE_PROTECTION_FAILURES\n                        + \" system property is used so the XML processing continues in the UNSECURE mode\"\n                        + \" with XXE protection disabled!!!\");\n            } else {\n                LOGGER.severe(\"Enabling XXE protection failed. The attribute \" + attributeName\n                        + \" is not supported by the TransformerFactory. This usually mean an outdated XML processor\"\n                        + \" is present on the classpath (e.g. Xerces, Xalan). If you are not able to resolve the issue by\"\n                        + \" fixing the classpath, the \" + SYSTEM_PROPERTY_IGNORE_XXE_PROTECTION_FAILURES\n                        + \" system property can be used to disable XML External Entity protections.\"\n                        + \" We don't recommend disabling the XXE as such the XML processor configuration is unsecure!!!\", iae);\n                throw iae;\n            }\n        }\n    }",
  "abstract_func_before": "static void setAttribute(TransformerFactory VAR_0, String VAR_1) {\n        try {\n            VAR_0.setAttribute(VAR_1, \"\");\n        } catch (IllegalArgumentException VAR_2) {\n            if (VAR_3.getBoolean(VAR_4)) {\n                VAR_5.warning(\"Enabling XXE protection failed. The attribute \" + VAR_1\n                        + \" is not supported by the TransformerFactory. The \" + VAR_4\n                        + \" system property is used so the XML processing continues in the UNSECURE mode\"\n                        + \" with XXE protection disabled!!!\");\n            } else {\n                VAR_5.severe(\"Enabling XXE protection failed. The attribute \" + VAR_1\n                        + \" is not supported by the TransformerFactory. This usually mean an outdated XML processor\"\n                        + \" is present on the classpath (e.g. Xerces, Xalan). If you are not able to resolve the issue by\"\n                        + \" fixing the classpath, the \" + VAR_4\n                        + \" system property can be used to disable XML External Entity protections.\"\n                        + \" We don't recommend disabling the XXE as such the XML processor configuration is unsecure!!!\", VAR_2);\n                throw VAR_2;\n            }\n        }\n    }",
  "func_graph_path_before": "hazelcast/4d6b666cd0291abd618c3b95cdbb51aa4208e748/XmlUtil.java/vul/before/0.json",
  "func": "static void setAttribute(TransformerFactory transformerFactory, String attributeName) {\n        try {\n            transformerFactory.setAttribute(attributeName, \"\");\n        } catch (IllegalArgumentException iae) {\n            printWarningAndRethrowEventually(iae, TransformerFactory.class, \"attribute \" + attributeName);\n        }\n    }",
  "abstract_func": "static void setAttribute(TransformerFactory VAR_0, String VAR_1) {\n        try {\n            VAR_0.setAttribute(VAR_1, \"\");\n        } catch (IllegalArgumentException VAR_2) {\n            printWarningAndRethrowEventually(VAR_2, TransformerFactory.class, \"attribute \" + VAR_1);\n        }\n    }",
  "func_graph_path": "hazelcast/4d6b666cd0291abd618c3b95cdbb51aa4208e748/XmlUtil.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -2,19 +2,6 @@\n         try {\n             transformerFactory.setAttribute(attributeName, \"\");\n         } catch (IllegalArgumentException iae) {\n-            if (Boolean.getBoolean(SYSTEM_PROPERTY_IGNORE_XXE_PROTECTION_FAILURES)) {\n-                LOGGER.warning(\"Enabling XXE protection failed. The attribute \" + attributeName\n-                        + \" is not supported by the TransformerFactory. The \" + SYSTEM_PROPERTY_IGNORE_XXE_PROTECTION_FAILURES\n-                        + \" system property is used so the XML processing continues in the UNSECURE mode\"\n-                        + \" with XXE protection disabled!!!\");\n-            } else {\n-                LOGGER.severe(\"Enabling XXE protection failed. The attribute \" + attributeName\n-                        + \" is not supported by the TransformerFactory. This usually mean an outdated XML processor\"\n-                        + \" is present on the classpath (e.g. Xerces, Xalan). If you are not able to resolve the issue by\"\n-                        + \" fixing the classpath, the \" + SYSTEM_PROPERTY_IGNORE_XXE_PROTECTION_FAILURES\n-                        + \" system property can be used to disable XML External Entity protections.\"\n-                        + \" We don't recommend disabling the XXE as such the XML processor configuration is unsecure!!!\", iae);\n-                throw iae;\n-            }\n+            printWarningAndRethrowEventually(iae, TransformerFactory.class, \"attribute \" + attributeName);\n         }\n     }",
  "diff_line_info": {
    "deleted_lines": [
      "            if (Boolean.getBoolean(SYSTEM_PROPERTY_IGNORE_XXE_PROTECTION_FAILURES)) {",
      "                LOGGER.warning(\"Enabling XXE protection failed. The attribute \" + attributeName",
      "                        + \" is not supported by the TransformerFactory. The \" + SYSTEM_PROPERTY_IGNORE_XXE_PROTECTION_FAILURES",
      "                        + \" system property is used so the XML processing continues in the UNSECURE mode\"",
      "                        + \" with XXE protection disabled!!!\");",
      "            } else {",
      "                LOGGER.severe(\"Enabling XXE protection failed. The attribute \" + attributeName",
      "                        + \" is not supported by the TransformerFactory. This usually mean an outdated XML processor\"",
      "                        + \" is present on the classpath (e.g. Xerces, Xalan). If you are not able to resolve the issue by\"",
      "                        + \" fixing the classpath, the \" + SYSTEM_PROPERTY_IGNORE_XXE_PROTECTION_FAILURES",
      "                        + \" system property can be used to disable XML External Entity protections.\"",
      "                        + \" We don't recommend disabling the XXE as such the XML processor configuration is unsecure!!!\", iae);",
      "                throw iae;",
      "            }"
    ],
    "added_lines": [
      "            printWarningAndRethrowEventually(iae, TransformerFactory.class, \"attribute \" + attributeName);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/hazelcast/hazelcast/pull/20407",
  "description": {
    "pr_info": {
      "title": "Add helper method to XmlUtil to enable XXE protection in the SAXParserFactory",
      "number": 20407
    },
    "comment": [
      "This PR fixes an issue reported through the huntr.dev platform (by @JamieSlome and  @ready-research) .",
      "Just attaching for reference:\r\n\r\nhttps://huntr.dev/bounties/d63972a2-b910-480a-a86b-d1f75d24d563/\r\n\r\nThanks for the (cc).",
      "Thanks for the reviews, Ondra & Franta.",
      "Does this issue affect older releases (3.x & 4.x)?",
      "Will there be an updated 4.x release?",
      "> Does this issue affect older releases (3.x & 4.x)?\r\n\r\nThe affected code isn't present in the 3.x and it doesn't have a known call path (out of tests) in hazelcast or hazelcast-enterprise versions 4.y and 5.0. Still, @joschi prepared backports of the fix to 4.y.z and 5.0.z branches so the fix will be present there too.\r\n\r\n> Will there be an updated 4.x release?\r\n\r\nNext versions should include the patch.",
      "> > Does this issue affect older releases (3.x & 4.x)?\r\n> \r\n> The affected code isn't present in the 3.x and it doesn't have a known call path (out of tests) in hazelcast or hazelcast-enterprise versions 4.y and 5.0. Still, @joschi prepared backports of the fix to 4.y.z and 5.0.z branches so the fix will be present there too.\r\n> \r\nIf this doesn't affect anything older than 4.y, then can you contact NIST and have the CPE for [CVE-2022-0265](https://nvd.nist.gov/vuln/detail/CVE-2022-0265) adjusted to denote this fact?\r\n",
      "The CPE was updated to `cpe:2.3:a:hazelcast:hazelcast:5.1:beta1:*:*:*:*:*:*`, but the OWASP checker now reports `5.1` as vulnerable one. See jeremylong/DependencyCheck#4208"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "The patch addresses a security vulnerability by enhancing XXE protection, as indicated by the commit message, platform report, and code changes.\n\n**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 1.0"
}