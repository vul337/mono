{
  "cve_id": "CVE-2016-10151",
  "cwe_ids": [
    "CWE-264"
  ],
  "cvss_vector": "AV:L/AC:M/Au:N/C:C/I:C/A:C",
  "cvss_is_v3": false,
  "repo_name": "achernya/hesiod",
  "commit_msg": "Use secure_getenv() when it's available\n\nFactor out logic that attempts to only consult the environment when it's\nsafe to do so into its own function, and use secure_getenv() instead of\ngetenv() if it's available.  Original report from\nhttps://bugzilla.redhat.com/show_bug.cgi?id=1332508",
  "commit_hash": "39b21dac9bc6473365de04d94be0da94941c7c73",
  "git_url": "https://github.com/achernya/hesiod/commit/39b21dac9bc6473365de04d94be0da94941c7c73",
  "file_path": "src/lib/hesiod.c",
  "func_name": "hesiod_init",
  "func_before": "int hesiod_init(void **context)\n{\n  struct hesiod_p *ctx;\n  const char *p, *configname;\n\n  ctx = malloc(sizeof(struct hesiod_p));\n  if (ctx)\n    {\n      *context = ctx;\n      configname = ((getuid() == geteuid()) && (getgid() == getegid())) ? getenv(\"HESIOD_CONFIG\") : NULL;\n      if (!configname)\n\tconfigname = SYSCONFDIR \"/hesiod.conf\";\n      if (read_config_file(ctx, configname) >= 0)\n\t{\n\t  /* The default rhs can be overridden by an environment variable. */\n\t  p = ((getuid() == geteuid()) && (getgid() == getegid())) ? getenv(\"HES_DOMAIN\") : NULL;\n\t  if (p)\n\t    {\n\t      if (ctx->rhs)\n\t\tfree(ctx->rhs);\n\t      ctx->rhs = malloc(strlen(p) + 2);\n\t      if (ctx->rhs)\n\t\t{\n\t\t  *ctx->rhs = '.';\n\t\t  strcpy(ctx->rhs + 1, (*p == '.') ? p + 1 : p);\n\t\t  return 0;\n\t\t}\n\t      else\n\t\terrno = ENOMEM;\n\t    }\n\t  else\n\t    return 0;\n\t}\n    }\n  else\n    errno = ENOMEM;\n\n  if (ctx->lhs)\n    free(ctx->lhs);\n  if (ctx->rhs)\n    free(ctx->rhs);\n  if (ctx)\n    free(ctx);\n  return -1;\n}",
  "abstract_func_before": "int hesiod_init(void **VAR_0)\n{\n  struct hesiod_p *VAR_1;\n  const char *VAR_2, *VAR_3;\n\n  VAR_1 = malloc(sizeof(struct hesiod_p));\n  if (VAR_1)\n    {\n      *VAR_0 = VAR_1;\n      VAR_3 = ((getuid() == geteuid()) && (getgid() == getegid())) ? getenv(\"HESIOD_CONFIG\") : NULL;\n      if (!VAR_3)\n\tVAR_3 = VAR_4 \"/hesiod.conf\";\n      if (read_config_file(VAR_1, VAR_3) >= 0)\n\t{\n\t  /* COMMENT_0 */\n\t  VAR_2 = ((getuid() == geteuid()) && (getgid() == getegid())) ? getenv(\"HES_DOMAIN\") : NULL;\n\t  if (VAR_2)\n\t    {\n\t      if (VAR_1->rhs)\n\t\tfree(VAR_1->rhs);\n\t      VAR_1->rhs = malloc(strlen(VAR_2) + 2);\n\t      if (VAR_1->rhs)\n\t\t{\n\t\t  *VAR_1->rhs = '.';\n\t\t  strcpy(VAR_1->rhs + 1, (*VAR_2 == '.') ? VAR_2 + 1 : VAR_2);\n\t\t  return 0;\n\t\t}\n\t      else\n\t\tVAR_5 = VAR_6;\n\t    }\n\t  else\n\t    return 0;\n\t}\n    }\n  else\n    VAR_5 = VAR_6;\n\n  if (VAR_1->lhs)\n    free(VAR_1->lhs);\n  if (VAR_1->rhs)\n    free(VAR_1->rhs);\n  if (VAR_1)\n    free(VAR_1);\n  return -1;\n}",
  "func_graph_path_before": "achernya/hesiod/39b21dac9bc6473365de04d94be0da94941c7c73/hesiod.c/vul/before/0.json",
  "func": "int hesiod_init(void **context)\n{\n  struct hesiod_p *ctx;\n  const char *p, *configname;\n\n  ctx = malloc(sizeof(struct hesiod_p));\n  if (ctx)\n    {\n      *context = ctx;\n      configname = hesiod_getenv(\"HESIOD_CONFIG\");\n      if (!configname)\n\tconfigname = SYSCONFDIR \"/hesiod.conf\";\n      if (read_config_file(ctx, configname) >= 0)\n\t{\n\t  /* The default rhs can be overridden by an environment variable. */\n\t  p = hesiod_getenv(\"HES_DOMAIN\");\n\t  if (p)\n\t    {\n\t      if (ctx->rhs)\n\t\tfree(ctx->rhs);\n\t      ctx->rhs = malloc(strlen(p) + 2);\n\t      if (ctx->rhs)\n\t\t{\n\t\t  *ctx->rhs = '.';\n\t\t  strcpy(ctx->rhs + 1, (*p == '.') ? p + 1 : p);\n\t\t  return 0;\n\t\t}\n\t      else\n\t\terrno = ENOMEM;\n\t    }\n\t  else\n\t    return 0;\n\t}\n    }\n  else\n    errno = ENOMEM;\n\n  if (ctx->lhs)\n    free(ctx->lhs);\n  if (ctx->rhs)\n    free(ctx->rhs);\n  if (ctx)\n    free(ctx);\n  return -1;\n}",
  "abstract_func": "int hesiod_init(void **VAR_0)\n{\n  struct hesiod_p *VAR_1;\n  const char *VAR_2, *VAR_3;\n\n  VAR_1 = malloc(sizeof(struct hesiod_p));\n  if (VAR_1)\n    {\n      *VAR_0 = VAR_1;\n      VAR_3 = hesiod_getenv(\"HESIOD_CONFIG\");\n      if (!VAR_3)\n\tVAR_3 = VAR_4 \"/hesiod.conf\";\n      if (read_config_file(VAR_1, VAR_3) >= 0)\n\t{\n\t  /* COMMENT_0 */\n\t  VAR_2 = hesiod_getenv(\"HES_DOMAIN\");\n\t  if (VAR_2)\n\t    {\n\t      if (VAR_1->rhs)\n\t\tfree(VAR_1->rhs);\n\t      VAR_1->rhs = malloc(strlen(VAR_2) + 2);\n\t      if (VAR_1->rhs)\n\t\t{\n\t\t  *VAR_1->rhs = '.';\n\t\t  strcpy(VAR_1->rhs + 1, (*VAR_2 == '.') ? VAR_2 + 1 : VAR_2);\n\t\t  return 0;\n\t\t}\n\t      else\n\t\tVAR_5 = VAR_6;\n\t    }\n\t  else\n\t    return 0;\n\t}\n    }\n  else\n    VAR_5 = VAR_6;\n\n  if (VAR_1->lhs)\n    free(VAR_1->lhs);\n  if (VAR_1->rhs)\n    free(VAR_1->rhs);\n  if (VAR_1)\n    free(VAR_1);\n  return -1;\n}",
  "func_graph_path": "achernya/hesiod/39b21dac9bc6473365de04d94be0da94941c7c73/hesiod.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -7,13 +7,13 @@\n   if (ctx)\n     {\n       *context = ctx;\n-      configname = ((getuid() == geteuid()) && (getgid() == getegid())) ? getenv(\"HESIOD_CONFIG\") : NULL;\n+      configname = hesiod_getenv(\"HESIOD_CONFIG\");\n       if (!configname)\n \tconfigname = SYSCONFDIR \"/hesiod.conf\";\n       if (read_config_file(ctx, configname) >= 0)\n \t{\n \t  /* The default rhs can be overridden by an environment variable. */\n-\t  p = ((getuid() == geteuid()) && (getgid() == getegid())) ? getenv(\"HES_DOMAIN\") : NULL;\n+\t  p = hesiod_getenv(\"HES_DOMAIN\");\n \t  if (p)\n \t    {\n \t      if (ctx->rhs)",
  "diff_line_info": {
    "deleted_lines": [
      "      configname = ((getuid() == geteuid()) && (getgid() == getegid())) ? getenv(\"HESIOD_CONFIG\") : NULL;",
      "\t  p = ((getuid() == geteuid()) && (getgid() == getegid())) ? getenv(\"HES_DOMAIN\") : NULL;"
    ],
    "added_lines": [
      "      configname = hesiod_getenv(\"HESIOD_CONFIG\");",
      "\t  p = hesiod_getenv(\"HES_DOMAIN\");"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/achernya/hesiod/pull/9",
  "description": {
    "pr_info": {
      "title": "Use secure_getenv() when it's available",
      "number": 9
    },
    "comment": [
      "Factor out logic that attempts to only consult the environment when it's safe to do so into its own function, and use secure_getenv() instead of getenv() if it's available.  Original report from\nhttps://bugzilla.redhat.com/show_bug.cgi?id=1332508\n",
      "Tests pass, merged.\n",
      "This has been assigned [CVE-2016-10151](http://www.openwall.com/lists/oss-security/2017/01/21/1)"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.95\n\nThe patch replaces `getenv()` with `hesiod_getenv()`, which uses `secure_getenv()` for safer environment variable access. This addresses potential security risks associated with environment variable manipulation, aligning with the intent to fix a known vulnerability."
}