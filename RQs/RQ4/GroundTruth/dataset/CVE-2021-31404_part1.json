{
  "cve_id": "CVE-2021-31404",
  "cwe_ids": [
    "CWE-203"
  ],
  "cvss_vector": "AV:L/AC:M/Au:N/C:P/I:N/A:N",
  "cvss_is_v3": false,
  "repo_name": "vaadin/flow",
  "commit_msg": "Use time-constant comparison for CSRF tokens\n\nThis hardens the framework against a theoretical timing attack based on\ncomparing how quickly a request with an invalid CSRF token is rejected.",
  "commit_hash": "621ef1b322737d963bee624b2d2e38cd739903d9",
  "git_url": "https://github.com/vaadin/flow/commit/621ef1b322737d963bee624b2d2e38cd739903d9",
  "file_path": "flow-server/src/main/java/com/vaadin/flow/server/VaadinService.java",
  "func_name": "isCsrfTokenValid",
  "func_before": "public static boolean isCsrfTokenValid(UI ui, String requestToken) {\n\n        if (ui.getSession().getService().getDeploymentConfiguration()\n                .isXsrfProtectionEnabled()) {\n            String uiToken = ui.getCsrfToken();\n\n            if (uiToken == null || !uiToken.equals(requestToken)) {\n                return false;\n            }\n        }\n        return true;\n    }",
  "abstract_func_before": "public static boolean isCsrfTokenValid(UI VAR_0, String VAR_1) {\n\n        if (VAR_0.getSession().getService().getDeploymentConfiguration()\n                .isXsrfProtectionEnabled()) {\n            String VAR_2 = VAR_0.getCsrfToken();\n\n            if (VAR_2 == null || !VAR_2.equals(VAR_1)) {\n                return false;\n            }\n        }\n        return true;\n    }",
  "func_graph_path_before": "vaadin/flow/621ef1b322737d963bee624b2d2e38cd739903d9/VaadinService.java/vul/before/0.json",
  "func": "public static boolean isCsrfTokenValid(UI ui, String requestToken) {\n\n        if (ui.getSession().getService().getDeploymentConfiguration()\n                .isXsrfProtectionEnabled()) {\n            String uiToken = ui.getCsrfToken();\n\n            if (uiToken == null || !MessageDigest.isEqual(\n                    uiToken.getBytes(StandardCharsets.UTF_8),\n                    requestToken.getBytes(StandardCharsets.UTF_8))) {\n                return false;\n            }\n        }\n        return true;\n    }",
  "abstract_func": "public static boolean isCsrfTokenValid(UI VAR_0, String VAR_1) {\n\n        if (VAR_0.getSession().getService().getDeploymentConfiguration()\n                .isXsrfProtectionEnabled()) {\n            String VAR_2 = VAR_0.getCsrfToken();\n\n            if (VAR_2 == null || !VAR_3.isEqual(\n                    VAR_2.getBytes(VAR_4.UTF_8),\n                    VAR_1.getBytes(VAR_4.UTF_8))) {\n                return false;\n            }\n        }\n        return true;\n    }",
  "func_graph_path": "vaadin/flow/621ef1b322737d963bee624b2d2e38cd739903d9/VaadinService.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -4,7 +4,9 @@\n                 .isXsrfProtectionEnabled()) {\n             String uiToken = ui.getCsrfToken();\n \n-            if (uiToken == null || !uiToken.equals(requestToken)) {\n+            if (uiToken == null || !MessageDigest.isEqual(\n+                    uiToken.getBytes(StandardCharsets.UTF_8),\n+                    requestToken.getBytes(StandardCharsets.UTF_8))) {\n                 return false;\n             }\n         }",
  "diff_line_info": {
    "deleted_lines": [
      "            if (uiToken == null || !uiToken.equals(requestToken)) {"
    ],
    "added_lines": [
      "            if (uiToken == null || !MessageDigest.isEqual(",
      "                    uiToken.getBytes(StandardCharsets.UTF_8),",
      "                    requestToken.getBytes(StandardCharsets.UTF_8))) {"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/vaadin/flow/pull/9875",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/vaadin/flow/pull/9875: 403 Client Error: Forbidden for url: https://api.github.com/repos/vaadin/flow/pulls/9875",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "The commit aims to mitigate a timing attack by using a time-constant comparison for CSRF tokens, which is a clear security improvement. The code change replaces a non-secure comparison method with a secure one.\n\n**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 1.0"
}