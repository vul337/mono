{
  "cve_id": "CVE-2019-15784",
  "cwe_ids": [
    "CWE-129"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "Haivision/srt",
  "commit_msg": "[core] CSndUList initial size is reduced to 512 elements",
  "commit_hash": "64875fa98ff6afd2f21a9727970fb4333efe95de",
  "git_url": "https://github.com/Haivision/srt/commit/64875fa98ff6afd2f21a9727970fb4333efe95de",
  "file_path": "srtcore/queue.cpp",
  "func_name": "CSndUList::realloc_",
  "func_before": "void CSndUList::realloc_()\n{\n   CSNode** temp = NULL;\n\n   try\n   {\n       temp = new CSNode * [m_iArrayLength * 2];\n   }\n   catch (...)\n   {\n       return;\n   }\n\n   memcpy(temp, m_pHeap, sizeof(CSNode*) * m_iArrayLength);\n   m_iArrayLength *= 2;\n   delete[] m_pHeap;\n   m_pHeap = temp;\n}",
  "abstract_func_before": "void CSndUList::realloc_()\n{\n   CSNode** VAR_0 = NULL;\n\n   try\n   {\n       VAR_0 = new CSNode * [VAR_1 * 2];\n   }\n   catch (...)\n   {\n       return;\n   }\n\n   memcpy(VAR_0, VAR_2, sizeof(CSNode*) * VAR_1);\n   VAR_1 *= 2;\n   delete[] VAR_2;\n   VAR_2 = VAR_0;\n}",
  "func_graph_path_before": null,
  "func": "void CSndUList::realloc_()\n{\n   CSNode** temp = NULL;\n\n   try\n   {\n       temp = new CSNode *[2 * m_iArrayLength];\n   }\n   catch (...)\n   {\n       throw CUDTException(MJ_SYSTEMRES, MN_MEMORY, 0);\n   }\n\n   memcpy(temp, m_pHeap, sizeof(CSNode*) * m_iArrayLength);\n   m_iArrayLength *= 2;\n   delete[] m_pHeap;\n   m_pHeap = temp;\n}",
  "abstract_func": "void CSndUList::realloc_()\n{\n   CSNode** VAR_0 = NULL;\n\n   try\n   {\n       VAR_0 = new CSNode *[2 * VAR_1];\n   }\n   catch (...)\n   {\n       throw CUDTException(VAR_2, VAR_3, 0);\n   }\n\n   memcpy(VAR_0, VAR_4, sizeof(CSNode*) * VAR_1);\n   VAR_1 *= 2;\n   delete[] VAR_4;\n   VAR_4 = VAR_0;\n}",
  "func_graph_path": null,
  "diff_func": "--- func_before\n+++ func_after\n@@ -4,11 +4,11 @@\n \n    try\n    {\n-       temp = new CSNode * [m_iArrayLength * 2];\n+       temp = new CSNode *[2 * m_iArrayLength];\n    }\n    catch (...)\n    {\n-       return;\n+       throw CUDTException(MJ_SYSTEMRES, MN_MEMORY, 0);\n    }\n \n    memcpy(temp, m_pHeap, sizeof(CSNode*) * m_iArrayLength);",
  "diff_line_info": {
    "deleted_lines": [
      "       temp = new CSNode * [m_iArrayLength * 2];",
      "       return;"
    ],
    "added_lines": [
      "       temp = new CSNode *[2 * m_iArrayLength];",
      "       throw CUDTException(MJ_SYSTEMRES, MN_MEMORY, 0);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/Haivision/srt/pull/811",
  "description": {
    "pr_info": {
      "title": "Potential CSndUList array overflow",
      "number": 811
    },
    "comment": [
      "This is a rework of #724 (closes #724).\r\nThe default size of `CSndUList` was 4096 elements. The list is a heap of SRT sockets, that are to be processed in the sender's thread.\r\nIt is very unlikely to have mare than 4096 SRT connections, that is why checking if there is a place to insert a new socket is not required most of the time. However, if there is no place, then there will be an overflow and out-of-border operations.\r\nThis PR fixes this.\r\n\r\n- [x] `CSndUList::update(...)` increases list size if required.\r\n- [x] Reduced default size of the `CSndUList` from 4096 to 512.\r\n- [x] `CSndUList::remove_(...)` now uses `std::swap`\r\n- [x] `CSndUList::insert_norealloc_(...)` now uses `std::swap`",
      "This vulnerability is tracked in [CVE-2019-15784](https://nvd.nist.gov/vuln/detail/CVE-2019-15784)\r\n@ethouris: Do you plan to make a new release soon? Thanks"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.9"
}