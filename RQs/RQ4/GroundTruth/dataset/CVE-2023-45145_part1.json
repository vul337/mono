{
  "cve_id": "CVE-2023-45145",
  "cwe_ids": [
    "CWE-668"
  ],
  "cvss_vector": "CVSS:3.1/AV:L/AC:H/PR:L/UI:N/S:U/C:L/I:L/A:N",
  "cvss_is_v3": true,
  "repo_name": "redis",
  "commit_msg": "Fix issue of listen before chmod on Unix sockets (CVE-2023-45145) (#12671)\n\nBefore this commit, Unix socket setup performed chmod(2) on the socket\r\nfile after calling listen(2). Depending on what umask is used, this\r\ncould leave the file with the wrong permissions for a short period of\r\ntime. As a result, another process could exploit this race condition and\r\nestablish a connection that would otherwise not be possible.\r\n\r\nWe now make sure the socket permissions are set up prior to calling\r\nlisten(2).\r\n\r\n(cherry picked from commit 1119ecae6fd8796fa337df2212f09173ab6c7b0a)\r\n\r\nCo-authored-by: Yossi Gottlieb <yossigo@gmail.com>",
  "commit_hash": "03345ddc7faf7af079485f2cbe5d17a1611cbce1",
  "git_url": "https://github.com/redis/redis/commit/03345ddc7faf7af079485f2cbe5d17a1611cbce1",
  "file_path": "src/anet.c",
  "func_name": "anetListen",
  "func_before": "static int anetListen(char *err, int s, struct sockaddr *sa, socklen_t len, int backlog) {\n    if (bind(s,sa,len) == -1) {\n        anetSetError(err, \"bind: %s\", strerror(errno));\n        close(s);\n        return ANET_ERR;\n    }\n\n    if (listen(s, backlog) == -1) {\n        anetSetError(err, \"listen: %s\", strerror(errno));\n        close(s);\n        return ANET_ERR;\n    }\n    return ANET_OK;\n}",
  "abstract_func_before": "static int anetListen(char *VAR_0, int VAR_1, struct sockaddr *VAR_2, socklen_t VAR_3, int VAR_4) {\n    if (bind(VAR_1,VAR_2,VAR_3) == -1) {\n        anetSetError(VAR_0, \"bind: %s\", strerror(VAR_5));\n        close(VAR_1);\n        return VAR_6;\n    }\n\n    if (listen(VAR_1, VAR_4) == -1) {\n        anetSetError(VAR_0, \"listen: %s\", strerror(VAR_5));\n        close(VAR_1);\n        return VAR_6;\n    }\n    return VAR_7;\n}",
  "func_graph_path_before": "redis/03345ddc7faf7af079485f2cbe5d17a1611cbce1/anet.c/vul/before/0.json",
  "func": "static int anetListen(char *err, int s, struct sockaddr *sa, socklen_t len, int backlog, mode_t perm) {\n    if (bind(s,sa,len) == -1) {\n        anetSetError(err, \"bind: %s\", strerror(errno));\n        close(s);\n        return ANET_ERR;\n    }\n\n    if (sa->sa_family == AF_LOCAL && perm)\n        chmod(((struct sockaddr_un *) sa)->sun_path, perm);\n\n    if (listen(s, backlog) == -1) {\n        anetSetError(err, \"listen: %s\", strerror(errno));\n        close(s);\n        return ANET_ERR;\n    }\n    return ANET_OK;\n}",
  "abstract_func": "static int anetListen(char *VAR_0, int VAR_1, struct sockaddr *VAR_2, socklen_t VAR_3, int VAR_4, mode_t VAR_5) {\n    if (bind(VAR_1,VAR_2,VAR_3) == -1) {\n        anetSetError(VAR_0, \"bind: %s\", strerror(VAR_6));\n        close(VAR_1);\n        return VAR_7;\n    }\n\n    if (VAR_2->sa_family == VAR_8 && VAR_5)\n        chmod(((struct sockaddr_un *) VAR_2)->sun_path, VAR_5);\n\n    if (listen(VAR_1, VAR_4) == -1) {\n        anetSetError(VAR_0, \"listen: %s\", strerror(VAR_6));\n        close(VAR_1);\n        return VAR_7;\n    }\n    return VAR_9;\n}",
  "func_graph_path": "redis/03345ddc7faf7af079485f2cbe5d17a1611cbce1/anet.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,9 +1,12 @@\n-static int anetListen(char *err, int s, struct sockaddr *sa, socklen_t len, int backlog) {\n+static int anetListen(char *err, int s, struct sockaddr *sa, socklen_t len, int backlog, mode_t perm) {\n     if (bind(s,sa,len) == -1) {\n         anetSetError(err, \"bind: %s\", strerror(errno));\n         close(s);\n         return ANET_ERR;\n     }\n+\n+    if (sa->sa_family == AF_LOCAL && perm)\n+        chmod(((struct sockaddr_un *) sa)->sun_path, perm);\n \n     if (listen(s, backlog) == -1) {\n         anetSetError(err, \"listen: %s\", strerror(errno));",
  "diff_line_info": {
    "deleted_lines": [
      "static int anetListen(char *err, int s, struct sockaddr *sa, socklen_t len, int backlog) {"
    ],
    "added_lines": [
      "static int anetListen(char *err, int s, struct sockaddr *sa, socklen_t len, int backlog, mode_t perm) {",
      "",
      "    if (sa->sa_family == AF_LOCAL && perm)",
      "        chmod(((struct sockaddr_un *) sa)->sun_path, perm);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/redis/redis/pull/12671",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/redis/redis/pull/12671: 403 Client Error: Forbidden for url: https://api.github.com/repos/redis/redis/pulls/12671",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 1.0\n\n**Step-by-Step Explanation:**\n\n1. **Commit Message:** Mentions a CVE and describes fixing a race condition in Unix socket permissions, indicating a security issue.\n2. **Vulnerability Description:** Confirms the exploit via a race condition, aligning with a security concern.\n3. **Code Diff:** Shows changes to set socket permissions before listening, directly addressing the security flaw.\n4. **Consistency:** All elements (commit message, description, code) align with a security fix.\n5. **Confidence Score:** 1.0, as the evidence is clear and direct."
}