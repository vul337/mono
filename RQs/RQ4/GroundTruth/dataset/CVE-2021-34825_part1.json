{
  "cve_id": "CVE-2021-34825",
  "cwe_ids": [
    "CWE-319"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:P/I:N/A:N",
  "cvss_is_v3": false,
  "repo_name": "quassel",
  "commit_msg": "core: Require TLS cert to be loaded if --require-ssl is used\nIf the user specifies --require-ssl, but the core cannot load a\nSSL/TLS certificate for any reason, the core will throw an\nexception and quit. This fixes a minor security vulnerability\nwhere previously, the core would simply fall back to plaintext\nmode and not offer encrypted connections at all.",
  "commit_hash": "104d01d2c619f6926bcaccea860da90b19449ad5",
  "git_url": "https://github.com/quassel/quassel/commit/104d01d2c619f6926bcaccea860da90b19449ad5",
  "file_path": "src/core/sslserver.cpp",
  "func_name": "SslServer::SslServer",
  "func_before": "SslServer::SslServer(QObject* parent)\n    : QTcpServer(parent)\n{\n    // Keep track if the SSL warning has been mentioned at least once before\n    static bool sslWarningShown = false;\n\n    if (Quassel::isOptionSet(\"ssl-cert\")) {\n        _sslCertPath = Quassel::optionValue(\"ssl-cert\");\n    }\n    else {\n        _sslCertPath = Quassel::configDirPath() + \"quasselCert.pem\";\n    }\n\n    if (Quassel::isOptionSet(\"ssl-key\")) {\n        _sslKeyPath = Quassel::optionValue(\"ssl-key\");\n    }\n    else {\n        _sslKeyPath = _sslCertPath;\n    }\n\n    // Initialize the certificates for first-time usage\n    if (!loadCerts()) {\n        if (!sslWarningShown) {\n            qWarning() << \"SslServer: Unable to set certificate file\\n\"\n                       << \"          Quassel Core will still work, but cannot provide SSL for client connections.\\n\"\n                       << \"          Please see https://quassel-irc.org/faq/cert to learn how to enable SSL support.\";\n            sslWarningShown = true;\n        }\n    }\n}",
  "abstract_func_before": "SslServer::SslServer(QObject* VAR_0)\n    : QTcpServer(VAR_0)\n{\n    /* COMMENT_0 */\n    static bool VAR_1 = false;\n\n    if (Quassel::isOptionSet(\"ssl-cert\")) {\n        VAR_2 = Quassel::optionValue(\"ssl-cert\");\n    }\n    else {\n        VAR_2 = Quassel::configDirPath() + \"quasselCert.pem\";\n    }\n\n    if (Quassel::isOptionSet(\"ssl-key\")) {\n        VAR_3 = Quassel::optionValue(\"ssl-key\");\n    }\n    else {\n        VAR_3 = VAR_2;\n    }\n\n    /* COMMENT_1 */\n    if (!loadCerts()) {\n        if (!VAR_1) {\n            qWarning() << \"SslServer: Unable to set certificate file\\n\"\n                       << \"          Quassel Core will still work, but cannot provide SSL for client connections.\\n\"\n                       << \"          Please see https://quassel-irc.org/faq/cert to learn how to enable SSL support.\";\n            VAR_1 = true;\n        }\n    }\n}",
  "func_graph_path_before": "quassel/104d01d2c619f6926bcaccea860da90b19449ad5/sslserver.cpp/vul/before/0.json",
  "func": "SslServer::SslServer(QObject* parent)\n    : QTcpServer(parent)\n{\n    // Keep track if the SSL warning has been mentioned at least once before\n    static bool sslWarningShown = false;\n\n    if (Quassel::isOptionSet(\"ssl-cert\")) {\n        _sslCertPath = Quassel::optionValue(\"ssl-cert\");\n    }\n    else {\n        _sslCertPath = Quassel::configDirPath() + \"quasselCert.pem\";\n    }\n\n    if (Quassel::isOptionSet(\"ssl-key\")) {\n        _sslKeyPath = Quassel::optionValue(\"ssl-key\");\n    }\n    else {\n        _sslKeyPath = _sslCertPath;\n    }\n\n    // Initialize the certificates for first-time usage\n    if (!loadCerts()) {\n        // If the core is unable to load a certificate, and \"--require-ssl\" is specified,\n        // do not proceed, throw an exception and quit. This prevents the core from falling\n        // back to a plaintext-only core when they should be expecting SSL/TLS only.\n        if (Quassel::isOptionSet(\"require-ssl\")) {\n            throw ExitException{EXIT_FAILURE, tr(\"--require-ssl is set, but no SSL certificate is available. Exiting.\")};\n        }\n        if (!sslWarningShown) {\n            qWarning() << \"SslServer: Unable to set certificate file\\n\"\n                       << \"          Quassel Core will still work, but cannot provide SSL for client connections.\\n\"\n                       << \"          Please see https://quassel-irc.org/faq/cert to learn how to enable SSL support.\";\n            sslWarningShown = true;\n        }\n    }\n}",
  "abstract_func": "SslServer::SslServer(QObject* VAR_0)\n    : QTcpServer(VAR_0)\n{\n    /* COMMENT_0 */\n    static bool VAR_1 = false;\n\n    if (Quassel::isOptionSet(\"ssl-cert\")) {\n        VAR_2 = Quassel::optionValue(\"ssl-cert\");\n    }\n    else {\n        VAR_2 = Quassel::configDirPath() + \"quasselCert.pem\";\n    }\n\n    if (Quassel::isOptionSet(\"ssl-key\")) {\n        VAR_3 = Quassel::optionValue(\"ssl-key\");\n    }\n    else {\n        VAR_3 = VAR_2;\n    }\n\n    /* COMMENT_1 */\n    if (!loadCerts()) {\n        /* COMMENT_2 */\n        /* COMMENT_3 */\n        /* COMMENT_4 */\n        if (Quassel::isOptionSet(\"require-ssl\")) {\n            throw ExitException{VAR_4, tr(\"--require-ssl is set, but no SSL certificate is available. Exiting.\")};\n        }\n        if (!VAR_1) {\n            qWarning() << \"SslServer: Unable to set certificate file\\n\"\n                       << \"          Quassel Core will still work, but cannot provide SSL for client connections.\\n\"\n                       << \"          Please see https://quassel-irc.org/faq/cert to learn how to enable SSL support.\";\n            VAR_1 = true;\n        }\n    }\n}",
  "func_graph_path": "quassel/104d01d2c619f6926bcaccea860da90b19449ad5/sslserver.cpp/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -20,6 +20,12 @@\n \n     // Initialize the certificates for first-time usage\n     if (!loadCerts()) {\n+        // If the core is unable to load a certificate, and \"--require-ssl\" is specified,\n+        // do not proceed, throw an exception and quit. This prevents the core from falling\n+        // back to a plaintext-only core when they should be expecting SSL/TLS only.\n+        if (Quassel::isOptionSet(\"require-ssl\")) {\n+            throw ExitException{EXIT_FAILURE, tr(\"--require-ssl is set, but no SSL certificate is available. Exiting.\")};\n+        }\n         if (!sslWarningShown) {\n             qWarning() << \"SslServer: Unable to set certificate file\\n\"\n                        << \"          Quassel Core will still work, but cannot provide SSL for client connections.\\n\"",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "        // If the core is unable to load a certificate, and \"--require-ssl\" is specified,",
      "        // do not proceed, throw an exception and quit. This prevents the core from falling",
      "        // back to a plaintext-only core when they should be expecting SSL/TLS only.",
      "        if (Quassel::isOptionSet(\"require-ssl\")) {",
      "            throw ExitException{EXIT_FAILURE, tr(\"--require-ssl is set, but no SSL certificate is available. Exiting.\")};",
      "        }"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/quassel/quassel/pull/581",
  "description": {
    "pr_info": {
      "title": "core: Error out when --require-ssl is specified, but no cert can be loaded",
      "number": 581
    },
    "comment": [
      "As mentioned in [#1728](https://bugs.quassel-irc.org/issues/1728), cores launched with the `--require-ssl` flag, but no SSL/TLS certificate available (because the file does not exist, permissions are set incorrectly, the file does not contain a certificate, etc) will effectively be put into a plaintext-only mode, with little more than a small warning on the console to the user. Clients connecting to the core will be given the standard \"Unencrypted Connection\" warning.\r\n\r\nThis patch fixes that issue, requiring that cores launched with `--require-ssl` will successfully load a certificate before starting. If the certificate fails to load for any reason during startup, an exception is thrown and the core quits.\r\n\r\nThanks to @relrod for the help on this one.",
      "This security issue has been assigned `CVE-2021-34825` by MITRE.",
      "@phuzion has verified that, when reloading certs, the old cert continues being used if the new certs can not be found :)",
      "As @justjanne mentioned, I did some verification that reloading certs can't put a core into the plaintext-only mode.\r\n\r\nTo test this, I did the following:\r\n\r\n* Set up and launched a core, with a properly configured `quasselCert.pem` file in the configdir.\r\n* Connected to the core to ensure that it works properly\r\n* Disconnected from the core\r\n* Removed the `quasselCert.pem` file from the configdir\r\n* Sent `SIGHUP` (with `pkill -1 quasselcore`) to the core to trigger a configuration reload\r\n* Reconnected to the core\r\n\r\nAfter reconnecting, I was still presented with the previously configured SSL certificate."
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 1.0"
}