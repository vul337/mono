{
  "cve_id": "CVE-2018-7262",
  "cwe_ids": [
    "CWE-476"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "ceph",
  "commit_msg": "rgw:  make init env methods return an error\n\nSince web frontends may signal an error when requests are malformed or so, let\nus double check this and raise errors early. The current user of this is\ncivetweb frontend; which can potentially return null from `parse_http_headers`\nwhen a HTTP header without a \":\" is supplied at which point headers.value is\nnull which can lead to undefined behaviour later in RGW.\n\nFixes: http://tracker.ceph.com/issues/23039\nSigned-off-by: Abhishek Lekshmanan <abhishek@suse.com>",
  "commit_hash": "7872a831783e17dcc4d0aa70cffc256afb664f7a",
  "git_url": "https://github.com/ceph/ceph/commit/7872a831783e17dcc4d0aa70cffc256afb664f7a",
  "file_path": "src/rgw/rgw_loadgen.cc",
  "func_name": "RGWLoadGenIO::init_env",
  "func_before": "void RGWLoadGenIO::init_env(CephContext *cct)\n{\n  env.init(cct);\n\n  left_to_read = req->content_length;\n\n  char buf[32];\n  snprintf(buf, sizeof(buf), \"%lld\", (long long)req->content_length);\n  env.set(\"CONTENT_LENGTH\", buf);\n\n  env.set(\"CONTENT_TYPE\", req->content_type.c_str());\n  env.set(\"HTTP_DATE\", req->date_str.c_str());\n\n  for (map<string, string>::iterator iter = req->headers.begin(); iter != req->headers.end(); ++iter) {\n    env.set(iter->first.c_str(), iter->second.c_str());\n  }\n\n  env.set(\"REQUEST_METHOD\", req->request_method.c_str());\n  env.set(\"REQUEST_URI\", req->uri.c_str());\n  env.set(\"QUERY_STRING\", req->query_string.c_str());\n  env.set(\"SCRIPT_URI\", req->uri.c_str());\n\n  char port_buf[16];\n  snprintf(port_buf, sizeof(port_buf), \"%d\", req->port);\n  env.set(\"SERVER_PORT\", port_buf);\n}",
  "abstract_func_before": "void RGWLoadGenIO::init_env(CephContext *VAR_0)\n{\n  VAR_1.init(VAR_0);\n\n  VAR_2 = VAR_3->content_length;\n\n  char VAR_4[32];\n  snprintf(VAR_4, sizeof(VAR_4), \"%lld\", (long long)VAR_3->content_length);\n  VAR_1.set(\"CONTENT_LENGTH\", VAR_4);\n\n  VAR_1.set(\"CONTENT_TYPE\", VAR_3->content_type.c_str());\n  VAR_1.set(\"HTTP_DATE\", VAR_3->date_str.c_str());\n\n  for (map<string, string>::iterator VAR_5 = VAR_3->headers.begin(); VAR_5 != VAR_3->headers.end(); ++VAR_5) {\n    VAR_1.set(VAR_5->first.c_str(), VAR_5->second.c_str());\n  }\n\n  VAR_1.set(\"REQUEST_METHOD\", VAR_3->request_method.c_str());\n  VAR_1.set(\"REQUEST_URI\", VAR_3->uri.c_str());\n  VAR_1.set(\"QUERY_STRING\", VAR_3->query_string.c_str());\n  VAR_1.set(\"SCRIPT_URI\", VAR_3->uri.c_str());\n\n  char VAR_6[16];\n  snprintf(VAR_6, sizeof(VAR_6), \"%d\", VAR_3->port);\n  VAR_1.set(\"SERVER_PORT\", VAR_6);\n}",
  "func_graph_path_before": "ceph/7872a831783e17dcc4d0aa70cffc256afb664f7a/rgw_loadgen.cc/vul/before/0.json",
  "func": "int RGWLoadGenIO::init_env(CephContext *cct)\n{\n  env.init(cct);\n\n  left_to_read = req->content_length;\n\n  char buf[32];\n  snprintf(buf, sizeof(buf), \"%lld\", (long long)req->content_length);\n  env.set(\"CONTENT_LENGTH\", buf);\n\n  env.set(\"CONTENT_TYPE\", req->content_type.c_str());\n  env.set(\"HTTP_DATE\", req->date_str.c_str());\n\n  for (map<string, string>::iterator iter = req->headers.begin(); iter != req->headers.end(); ++iter) {\n    env.set(iter->first.c_str(), iter->second.c_str());\n  }\n\n  env.set(\"REQUEST_METHOD\", req->request_method.c_str());\n  env.set(\"REQUEST_URI\", req->uri.c_str());\n  env.set(\"QUERY_STRING\", req->query_string.c_str());\n  env.set(\"SCRIPT_URI\", req->uri.c_str());\n\n  char port_buf[16];\n  snprintf(port_buf, sizeof(port_buf), \"%d\", req->port);\n  env.set(\"SERVER_PORT\", port_buf);\n  return 0;\n}",
  "abstract_func": "int RGWLoadGenIO::init_env(CephContext *VAR_0)\n{\n  VAR_1.init(VAR_0);\n\n  VAR_2 = VAR_3->content_length;\n\n  char VAR_4[32];\n  snprintf(VAR_4, sizeof(VAR_4), \"%lld\", (long long)VAR_3->content_length);\n  VAR_1.set(\"CONTENT_LENGTH\", VAR_4);\n\n  VAR_1.set(\"CONTENT_TYPE\", VAR_3->content_type.c_str());\n  VAR_1.set(\"HTTP_DATE\", VAR_3->date_str.c_str());\n\n  for (map<string, string>::iterator VAR_5 = VAR_3->headers.begin(); VAR_5 != VAR_3->headers.end(); ++VAR_5) {\n    VAR_1.set(VAR_5->first.c_str(), VAR_5->second.c_str());\n  }\n\n  VAR_1.set(\"REQUEST_METHOD\", VAR_3->request_method.c_str());\n  VAR_1.set(\"REQUEST_URI\", VAR_3->uri.c_str());\n  VAR_1.set(\"QUERY_STRING\", VAR_3->query_string.c_str());\n  VAR_1.set(\"SCRIPT_URI\", VAR_3->uri.c_str());\n\n  char VAR_6[16];\n  snprintf(VAR_6, sizeof(VAR_6), \"%d\", VAR_3->port);\n  VAR_1.set(\"SERVER_PORT\", VAR_6);\n  return 0;\n}",
  "func_graph_path": "ceph/7872a831783e17dcc4d0aa70cffc256afb664f7a/rgw_loadgen.cc/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,4 +1,4 @@\n-void RGWLoadGenIO::init_env(CephContext *cct)\n+int RGWLoadGenIO::init_env(CephContext *cct)\n {\n   env.init(cct);\n \n@@ -23,4 +23,5 @@\n   char port_buf[16];\n   snprintf(port_buf, sizeof(port_buf), \"%d\", req->port);\n   env.set(\"SERVER_PORT\", port_buf);\n+  return 0;\n }",
  "diff_line_info": {
    "deleted_lines": [
      "void RGWLoadGenIO::init_env(CephContext *cct)"
    ],
    "added_lines": [
      "int RGWLoadGenIO::init_env(CephContext *cct)",
      "  return 0;"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/ceph/ceph/pull/20488",
  "description": {
    "pr_info": {
      "title": "rgw:  make init env methods return an error",
      "number": 20488
    },
    "comment": [
      "Since web frontends may signal an error when requests are malformed or so, let\r\nus double check this and raise errors early. The current user of this is\r\ncivetweb frontend; which can potentially return null from `parse_http_headers`\r\nwhen a HTTP header without a \":\" is supplied at which point headers.value is\r\nnull which can lead to undefined behaviour later in RGW.\r\n\r\nFixes: http://tracker.ceph.com/issues/23039\r\nSigned-off-by: Abhishek Lekshmanan <abhishek@suse.com>",
      "changelog: \r\n- drop init_error variable in rgw_civetweb\r\n- raise -EINVAL if mg_request info isn't populated in rgw_civetweb.cc\r\n   this is a changed behaviour  from earlier where we return and fail at a much later stage in rgw process \r\n",
      "@yehudasa @cbodley do these changes look okay?",
      "was unable to reproduce the failures in manual testing :+1: "
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 0.9\n\nThe commit addresses a potential security issue where malformed HTTP headers could lead to undefined behavior, preventing possible exploitation. Although no CVE is cited, the changes are aimed at mitigating a security risk."
}