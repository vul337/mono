{
    "cve_id": "CVE-2020-7105",
    "cwe_ids": [
        "CWE-476"
    ],
    "cvss_vector": "AV:N/AC:L/Au:N/C:N/I:N/A:P",
    "cvss_is_v3": false,
    "repo_name": "redis/hiredis",
    "commit_msg": "Rename allocation wrappers and add license info\n\nSee #752, #747",
    "commit_hash": "70e73a31ad5edb6c457658c0a0b6752b06cc6a25",
    "git_url": "https://github.com/redis/hiredis/commit/70e73a31ad5edb6c457658c0a0b6752b06cc6a25",
    "file_path": "ssl.c",
    "func_name": "initOpensslLocks",
    "func_before": "static void initOpensslLocks(void) {\n    unsigned ii, nlocks;\n    if (CRYPTO_get_locking_callback() != NULL) {\n        /* Someone already set the callback before us. Don't destroy it! */\n        return;\n    }\n    nlocks = CRYPTO_num_locks();\n    ossl_locks = hiredis_safe_malloc(sizeof(*ossl_locks) * nlocks);\n    for (ii = 0; ii < nlocks; ii++) {\n        sslLockInit(ossl_locks + ii);\n    }\n    CRYPTO_set_locking_callback(opensslDoLock);\n}",
    "abstract_func_before": "static void initOpensslLocks(void) {\n    unsigned VAR_0, VAR_1;\n    if (CRYPTO_get_locking_callback() != NULL) {\n        /* COMMENT_0 */\n        return;\n    }\n    VAR_1 = CRYPTO_num_locks();\n    VAR_2 = hiredis_safe_malloc(sizeof(*VAR_2) * VAR_1);\n    for (VAR_0 = 0; VAR_0 < VAR_1; VAR_0++) {\n        sslLockInit(VAR_2 + VAR_0);\n    }\n    CRYPTO_set_locking_callback(VAR_3);\n}",
    "func_graph_path_before": "redis/hiredis/70e73a31ad5edb6c457658c0a0b6752b06cc6a25/ssl.c/vul/before/0.json",
    "func": "static void initOpensslLocks(void) {\n    unsigned ii, nlocks;\n    if (CRYPTO_get_locking_callback() != NULL) {\n        /* Someone already set the callback before us. Don't destroy it! */\n        return;\n    }\n    nlocks = CRYPTO_num_locks();\n    ossl_locks = hi_malloc(sizeof(*ossl_locks) * nlocks);\n    for (ii = 0; ii < nlocks; ii++) {\n        sslLockInit(ossl_locks + ii);\n    }\n    CRYPTO_set_locking_callback(opensslDoLock);\n}",
    "abstract_func": "static void initOpensslLocks(void) {\n    unsigned VAR_0, VAR_1;\n    if (CRYPTO_get_locking_callback() != NULL) {\n        /* COMMENT_0 */\n        return;\n    }\n    VAR_1 = CRYPTO_num_locks();\n    VAR_2 = hi_malloc(sizeof(*VAR_2) * VAR_1);\n    for (VAR_0 = 0; VAR_0 < VAR_1; VAR_0++) {\n        sslLockInit(VAR_2 + VAR_0);\n    }\n    CRYPTO_set_locking_callback(VAR_3);\n}",
    "func_graph_path": "redis/hiredis/70e73a31ad5edb6c457658c0a0b6752b06cc6a25/ssl.c/vul/after/0.json",
    "diff_func": "--- func_before\n+++ func_after\n@@ -5,7 +5,7 @@\n         return;\n     }\n     nlocks = CRYPTO_num_locks();\n-    ossl_locks = hiredis_safe_malloc(sizeof(*ossl_locks) * nlocks);\n+    ossl_locks = hi_malloc(sizeof(*ossl_locks) * nlocks);\n     for (ii = 0; ii < nlocks; ii++) {\n         sslLockInit(ossl_locks + ii);\n     }",
    "diff_line_info": {
        "deleted_lines": [
            "    ossl_locks = hiredis_safe_malloc(sizeof(*ossl_locks) * nlocks);"
        ],
        "added_lines": [
            "    ossl_locks = hi_malloc(sizeof(*ossl_locks) * nlocks);"
        ]
    },
    "is_vul": true,
    "pr_url": "https://github.com/redis/hiredis/pull/754",
    "description": "Adds allocation wrappers that invokes a defined OOM handler.\r\n\r\nMy goal was the smallest surface area of changes possible.  Once we merge this it might be prudent to replace every `malloc`/`free` call with our wrappers.",
    "Bug Filter": "Defect Remediation & Feature Upgrades",
    "Bug Filter Confidence": 0.6,
    "Bug Filter Response": "**Final Classification:** Defect Remediation & Feature Upgrades  \n**Confidence:** 0.6"
}