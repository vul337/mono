{
  "cve_id": "CVE-2017-11734",
  "cwe_ids": [
    "CWE-125"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "libming",
  "commit_msg": "Fix heap buffer overflow in decompileCALLFUNCTION\n\nMake sure that n > 0 before checking for the previous action in the\nactions array, otherwise an overflow may occur.\n\nThis commit fixes CVE-2017-11734 (fixes #83).",
  "commit_hash": "1f5976337d2cf02d5f709cb1d0dac479976e5f94",
  "git_url": "https://github.com/libming/libming/commit/1f5976337d2cf02d5f709cb1d0dac479976e5f94",
  "file_path": "util/decompile.c",
  "func_name": "decompileCALLFUNCTION",
  "func_before": "static int\ndecompileCALLFUNCTION(int n, SWF_ACTION *actions, int maxn)\n{\n\tstruct SWF_ACTIONPUSHPARAM *meth, *nparam;\n\n\tSanityCheck(SWF_CALLMETHOD,\n\t\tactions[n-1].SWF_ACTIONRECORD.ActionCode == SWFACTION_PUSH,\n\t\t\"CALLMETHOD not preceeded by PUSH\")\n\n\tmeth=pop();\n\tnparam=pop();\n\tif (nparam->p.Integer>25)\n\t{\n\t\tINDENT\n\t\tprintln(\"// Problem getting function arguments (%d ignored) below:\",\n\t\t\tnparam->p.Integer);\n\t\tnparam->p.Integer=0;\n\t}\n\tpush(newVar_N(\"\",\"\",getName(meth),\"(\", nparam->p.Integer,\")\"));\n\tif (OpCode(actions, n+1, maxn) == SWFACTION_POP)\n\t{\n\t\t/* call function and throw away any result */\n\t\tINDENT\n\t\tputs(getName(pop()));\n\t\tprintln(\";\" );\n\t\treturn 1;\n\t}\n\treturn 0;\n}",
  "abstract_func_before": "static int\ndecompileCALLFUNCTION(int VAR_0, SWF_ACTION *VAR_1, int VAR_2)\n{\n\tstruct SWF_ACTIONPUSHPARAM *VAR_3, *VAR_4;\n\n\tSanityCheck(VAR_5,\n\t\tVAR_1[VAR_0-1].SWF_ACTIONRECORD.ActionCode == VAR_6,\n\t\t\"CALLMETHOD not preceeded by PUSH\")\n\n\tVAR_3=pop();\n\tVAR_4=pop();\n\tif (VAR_4->p.Integer>25)\n\t{\n\t\tINDENT\n\t\tVAR_7(\"// Problem getting function arguments (%d ignored) below:\",\n\t\t\tVAR_4->p.Integer);\n\t\tVAR_4->p.Integer=0;\n\t}\n\tpush(newVar_N(\"\",\"\",getName(VAR_3),\"(\", VAR_4->p.Integer,\")\"));\n\tif (OpCode(VAR_1, VAR_0+1, VAR_2) == VAR_8)\n\t{\n\t\t/* COMMENT_0 */\n\t\tINDENT\n\t\tputs(getName(pop()));\n\t\tVAR_7(\";\" );\n\t\treturn 1;\n\t}\n\treturn 0;\n}",
  "func_graph_path_before": "libming/1f5976337d2cf02d5f709cb1d0dac479976e5f94/decompile.c/vul/before/0.json",
  "func": "static int\ndecompileCALLFUNCTION(int n, SWF_ACTION *actions, int maxn)\n{\n\tstruct SWF_ACTIONPUSHPARAM *meth, *nparam;\n\n\tSanityCheck(SWF_CALLMETHOD,\n\t\tn > 0 && actions[n-1].SWF_ACTIONRECORD.ActionCode == SWFACTION_PUSH,\n\t\t\"CALLMETHOD not preceeded by PUSH\")\n\n\tmeth=pop();\n\tnparam=pop();\n\tif (nparam->p.Integer>25)\n\t{\n\t\tINDENT\n\t\tprintln(\"// Problem getting function arguments (%d ignored) below:\",\n\t\t\tnparam->p.Integer);\n\t\tnparam->p.Integer=0;\n\t}\n\tpush(newVar_N(\"\",\"\",getName(meth),\"(\", nparam->p.Integer,\")\"));\n\tif (OpCode(actions, n+1, maxn) == SWFACTION_POP)\n\t{\n\t\t/* call function and throw away any result */\n\t\tINDENT\n\t\tputs(getName(pop()));\n\t\tprintln(\";\" );\n\t\treturn 1;\n\t}\n\treturn 0;\n}",
  "abstract_func": "static int\ndecompileCALLFUNCTION(int VAR_0, SWF_ACTION *VAR_1, int VAR_2)\n{\n\tstruct SWF_ACTIONPUSHPARAM *VAR_3, *VAR_4;\n\n\tSanityCheck(VAR_5,\n\t\tVAR_0 > 0 && VAR_1[VAR_0-1].SWF_ACTIONRECORD.ActionCode == VAR_6,\n\t\t\"CALLMETHOD not preceeded by PUSH\")\n\n\tVAR_3=pop();\n\tVAR_4=pop();\n\tif (VAR_4->p.Integer>25)\n\t{\n\t\tINDENT\n\t\tVAR_7(\"// Problem getting function arguments (%d ignored) below:\",\n\t\t\tVAR_4->p.Integer);\n\t\tVAR_4->p.Integer=0;\n\t}\n\tpush(newVar_N(\"\",\"\",getName(VAR_3),\"(\", VAR_4->p.Integer,\")\"));\n\tif (OpCode(VAR_1, VAR_0+1, VAR_2) == VAR_8)\n\t{\n\t\t/* COMMENT_0 */\n\t\tINDENT\n\t\tputs(getName(pop()));\n\t\tVAR_7(\";\" );\n\t\treturn 1;\n\t}\n\treturn 0;\n}",
  "func_graph_path": "libming/1f5976337d2cf02d5f709cb1d0dac479976e5f94/decompile.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -4,7 +4,7 @@\n \tstruct SWF_ACTIONPUSHPARAM *meth, *nparam;\n \n \tSanityCheck(SWF_CALLMETHOD,\n-\t\tactions[n-1].SWF_ACTIONRECORD.ActionCode == SWFACTION_PUSH,\n+\t\tn > 0 && actions[n-1].SWF_ACTIONRECORD.ActionCode == SWFACTION_PUSH,\n \t\t\"CALLMETHOD not preceeded by PUSH\")\n \n \tmeth=pop();",
  "diff_line_info": {
    "deleted_lines": [
      "\t\tactions[n-1].SWF_ACTIONRECORD.ActionCode == SWFACTION_PUSH,"
    ],
    "added_lines": [
      "\t\tn > 0 && actions[n-1].SWF_ACTIONRECORD.ActionCode == SWFACTION_PUSH,"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/libming/libming/pull/90",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/libming/libming/pull/90: 403 Client Error: Forbidden for url: https://api.github.com/repos/libming/libming/pulls/90",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 1.0"
}