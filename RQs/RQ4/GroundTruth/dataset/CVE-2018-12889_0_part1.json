{
  "cve_id": "CVE-2018-12889",
  "cwe_ids": [
    "CWE-787"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "cn-uofbasel/ccn-lite",
  "commit_msg": "Fix possible heap bufferoverrun when reading ndn- or ccnx-files",
  "commit_hash": "cd1bd188eaf58b1972cf80ce3a5d3f1c81f14bf1",
  "git_url": "https://github.com/cn-uofbasel/ccn-lite/commit/cd1bd188eaf58b1972cf80ce3a5d3f1c81f14bf1",
  "file_path": "src/ccnl-pkt/src/ccnl-pkt-ndntlv.c",
  "func_name": "ccnl_ndntlv_varlenint",
  "func_before": "int\nccnl_ndntlv_varlenint(unsigned char **buf, int *len, int *val)\n{\n\n    if (**buf < 253 && *len >= 1) {\n        *val = **buf;\n        *buf += 1;\n        *len -= 1;\n    } else if (**buf == 253 && *len >= 3) { // 2 bytes\n        /* ORing bytes does not provoke alignment issues */\n        *val = ((*buf)[1] << 8) | ((*buf)[2] << 0);\n        *buf += 3;\n        *len -= 3;\n    } else if (**buf == 254 && *len >= 5) { // 4 bytes\n        /* ORing bytes does not provoke alignment issues */\n        *val = ((*buf)[1] << 24) | ((*buf)[2] << 16) |\n               ((*buf)[3] <<  8) | ((*buf)[4] <<  0);\n        *buf += 5;\n        *len -= 5;\n    } else {\n        // not implemented yet (or too short)\n        return -1;\n    }\n    return 0;\n}",
  "abstract_func_before": "int\nccnl_ndntlv_varlenint(unsigned char **VAR_0, int *VAR_1, int *VAR_2)\n{\n\n    if (**VAR_0 < 253 && *VAR_1 >= 1) {\n        *VAR_2 = **VAR_0;\n        *VAR_0 += 1;\n        *VAR_1 -= 1;\n    } else if (**VAR_0 == 253 && *VAR_1 >= 3) { /* COMMENT_0 */\n        /* COMMENT_1 */\n        *VAR_2 = ((*VAR_0)[1] << 8) | ((*VAR_0)[2] << 0);\n        *VAR_0 += 3;\n        *VAR_1 -= 3;\n    } else if (**VAR_0 == 254 && *VAR_1 >= 5) { /* COMMENT_2 */\n        /* COMMENT_1 */\n        *VAR_2 = ((*VAR_0)[1] << 24) | ((*VAR_0)[2] << 16) |\n               ((*VAR_0)[3] <<  8) | ((*VAR_0)[4] <<  0);\n        *VAR_0 += 5;\n        *VAR_1 -= 5;\n    } else {\n        /* COMMENT_3 */\n        return -1;\n    }\n    return 0;\n}",
  "func_graph_path_before": "cn-uofbasel/ccn-lite/cd1bd188eaf58b1972cf80ce3a5d3f1c81f14bf1/ccnl-pkt-ndntlv.c/vul/before/0.json",
  "func": "int\nccnl_ndntlv_varlenint(unsigned char **buf, int *len, int *val)\n{\n    if (**buf < 253 && *len >= 1) {\n        *val = **buf;\n        *buf += 1;\n        *len -= 1;\n    } else if (**buf == 253 && *len >= 3) { // 2 bytes\n        /* ORing bytes does not provoke alignment issues */\n        *val = ((*buf)[1] << 8) | ((*buf)[2] << 0);\n        *buf += 3;\n        *len -= 3;\n    } else if (**buf == 254 && *len >= 5) { // 4 bytes\n        /* ORing bytes does not provoke alignment issues */\n        *val = ((*buf)[1] << 24) | ((*buf)[2] << 16) |\n               ((*buf)[3] <<  8) | ((*buf)[4] <<  0);\n        *buf += 5;\n        *len -= 5;\n    } else {\n        // not implemented yet (or too short)\n        return -1;\n    }\n    return 0;\n}",
  "abstract_func": "int\nccnl_ndntlv_varlenint(unsigned char **VAR_0, int *VAR_1, int *VAR_2)\n{\n    if (**VAR_0 < 253 && *VAR_1 >= 1) {\n        *VAR_2 = **VAR_0;\n        *VAR_0 += 1;\n        *VAR_1 -= 1;\n    } else if (**VAR_0 == 253 && *VAR_1 >= 3) { /* COMMENT_0 */\n        /* COMMENT_1 */\n        *VAR_2 = ((*VAR_0)[1] << 8) | ((*VAR_0)[2] << 0);\n        *VAR_0 += 3;\n        *VAR_1 -= 3;\n    } else if (**VAR_0 == 254 && *VAR_1 >= 5) { /* COMMENT_2 */\n        /* COMMENT_1 */\n        *VAR_2 = ((*VAR_0)[1] << 24) | ((*VAR_0)[2] << 16) |\n               ((*VAR_0)[3] <<  8) | ((*VAR_0)[4] <<  0);\n        *VAR_0 += 5;\n        *VAR_1 -= 5;\n    } else {\n        /* COMMENT_3 */\n        return -1;\n    }\n    return 0;\n}",
  "func_graph_path": "cn-uofbasel/ccn-lite/cd1bd188eaf58b1972cf80ce3a5d3f1c81f14bf1/ccnl-pkt-ndntlv.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,7 +1,6 @@\n int\n ccnl_ndntlv_varlenint(unsigned char **buf, int *len, int *val)\n {\n-\n     if (**buf < 253 && *len >= 1) {\n         *val = **buf;\n         *buf += 1;",
  "diff_line_info": {
    "deleted_lines": [
      ""
    ],
    "added_lines": []
  },
  "is_vul": true,
  "pr_url": "https://github.com/cn-uofbasel/ccn-lite/pull/280",
  "description": {
    "pr_info": {
      "title": "Fix possible heap bufferoverrun when reading ndn- or ccnx-files",
      "number": 280
    },
    "comment": [
      "This Patch prevents a heap bufferoverrun when reading ndn- or ccnx-files and thus it fixes Issue #279 "
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 1.0"
}