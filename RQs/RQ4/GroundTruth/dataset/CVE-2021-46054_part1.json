{
  "cve_id": "CVE-2021-46054",
  "cwe_ids": [
    "CWE-617"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "WebAssembly/binaryen",
  "commit_msg": "Turn an assertion on not colliding with an internal name into an error (#4422)\n\nWithout this, the result in a build without assertions might be quite\r\nconfusing. See #4410\r\n\r\nAlso make the internal names more obviously internal names.",
  "commit_hash": "6f599272c66f65472f5e4c8d759d5bca77e47da6",
  "git_url": "https://github.com/WebAssembly/binaryen/commit/6f599272c66f65472f5e4c8d759d5bca77e47da6",
  "file_path": "src/wasm/wasm-binary.cpp",
  "func_name": "WasmBinaryBuilder::visitRethrow",
  "func_before": "void WasmBinaryBuilder::visitRethrow(Rethrow* curr) {\n  BYN_TRACE(\"zz node: Rethrow\\n\");\n  curr->target = getExceptionTargetName(getU32LEB());\n  // This special target is valid only for delegates\n  assert(curr->target != DELEGATE_CALLER_TARGET);\n  curr->finalize();\n}",
  "abstract_func_before": "void WasmBinaryBuilder::visitRethrow(Rethrow* VAR_0) {\n  BYN_TRACE(\"zz node: Rethrow\\n\");\n  VAR_0->target = getExceptionTargetName(getU32LEB());\n  /* COMMENT_0 */\n  assert(VAR_0->target != VAR_1);\n  VAR_0->finalize();\n}",
  "func_graph_path_before": "WebAssembly/binaryen/6f599272c66f65472f5e4c8d759d5bca77e47da6/wasm-binary.cpp/vul/before/0.json",
  "func": "void WasmBinaryBuilder::visitRethrow(Rethrow* curr) {\n  BYN_TRACE(\"zz node: Rethrow\\n\");\n  curr->target = getExceptionTargetName(getU32LEB());\n  // This special target is valid only for delegates\n  if (curr->target == DELEGATE_CALLER_TARGET) {\n    throwError(std::string(\"rethrow target cannot use internal name \") +\n               DELEGATE_CALLER_TARGET.str);\n  }\n  curr->finalize();\n}",
  "abstract_func": "void WasmBinaryBuilder::visitRethrow(Rethrow* VAR_0) {\n  BYN_TRACE(\"zz node: Rethrow\\n\");\n  VAR_0->target = getExceptionTargetName(getU32LEB());\n  /* COMMENT_0 */\n  if (VAR_0->target == VAR_1) {\n    throwError(std::string(\"rethrow target cannot use internal name \") +\n               VAR_1.str);\n  }\n  VAR_0->finalize();\n}",
  "func_graph_path": "WebAssembly/binaryen/6f599272c66f65472f5e4c8d759d5bca77e47da6/wasm-binary.cpp/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -2,6 +2,9 @@\n   BYN_TRACE(\"zz node: Rethrow\\n\");\n   curr->target = getExceptionTargetName(getU32LEB());\n   // This special target is valid only for delegates\n-  assert(curr->target != DELEGATE_CALLER_TARGET);\n+  if (curr->target == DELEGATE_CALLER_TARGET) {\n+    throwError(std::string(\"rethrow target cannot use internal name \") +\n+               DELEGATE_CALLER_TARGET.str);\n+  }\n   curr->finalize();\n }",
  "diff_line_info": {
    "deleted_lines": [
      "  assert(curr->target != DELEGATE_CALLER_TARGET);"
    ],
    "added_lines": [
      "  if (curr->target == DELEGATE_CALLER_TARGET) {",
      "    throwError(std::string(\"rethrow target cannot use internal name \") +",
      "               DELEGATE_CALLER_TARGET.str);",
      "  }"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/WebAssembly/binaryen/pull/4422",
  "description": {
    "pr_info": {
      "title": "Turn an assertion on not colliding with an internal name into an error",
      "number": 4422
    },
    "comment": [
      "Without this, the result in a build without assertions might be quite\r\nconfusing. See #4410\r\n\r\nAlso make the internal names more obviously internal names.\r\n",
      "It looks tests have not been updated"
    ]
  },
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Defect Remediation & Feature Upgrades; **Confidence:** 0.9"
}