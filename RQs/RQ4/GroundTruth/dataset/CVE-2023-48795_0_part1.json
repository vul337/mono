{
  "cve_id": "CVE-2023-48795",
  "cwe_ids": [
    "CWE-354"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:H/A:N",
  "cvss_is_v3": true,
  "repo_name": "hierynomus/sshj",
  "commit_msg": "Implement OpenSSH strict key exchange extension",
  "commit_hash": "94fcc960e0fb198ddec0f7efc53f95ac627fe083",
  "git_url": "https://github.com/hierynomus/sshj/commit/94fcc960e0fb198ddec0f7efc53f95ac627fe083",
  "file_path": "src/main/java/net/schmizz/sshj/transport/TransportImpl.java",
  "func_name": "write",
  "func_before": "@Override\n    public long write(SSHPacket payload)\n            throws TransportException {\n        writeLock.lock();\n        try {\n\n            if (kexer.isKexOngoing()) {\n                // Only transport layer packets (1 to 49) allowed except SERVICE_REQUEST\n                final Message m = Message.fromByte(payload.array()[payload.rpos()]);\n                if (!m.in(1, 49) || m == Message.SERVICE_REQUEST) {\n                    assert m != Message.KEXINIT;\n                    kexer.waitForDone();\n                }\n            } else if (encoder.getSequenceNumber() == 0) // We get here every 2**32th packet\n                kexer.startKex(true);\n\n            final long seq = encoder.encode(payload);\n            try {\n                connInfo.out.write(payload.array(), payload.rpos(), payload.available());\n                connInfo.out.flush();\n            } catch (IOException ioe) {\n                throw new TransportException(ioe);\n            }\n\n            return seq;\n\n        } finally {\n            writeLock.unlock();\n        }\n    }",
  "abstract_func_before": "@Override\n    public long write(SSHPacket VAR_0)\n            throws TransportException {\n        VAR_1.lock();\n        try {\n\n            if (VAR_2.isKexOngoing()) {\n                /* COMMENT_0 */\n                final Message VAR_3 = VAR_4.fromByte(VAR_0.array()[VAR_0.rpos()]);\n                if (!VAR_3.in(1, 49) || VAR_3 == VAR_4.SERVICE_REQUEST) {\n                    assert VAR_3 != VAR_4.KEXINIT;\n                    VAR_2.waitForDone();\n                }\n            } else if (VAR_5.getSequenceNumber() == 0) /* COMMENT_1 */\n                VAR_2.startKex(true);\n\n            final long VAR_6 = VAR_5.encode(VAR_0);\n            try {\n                VAR_7.out.write(VAR_0.array(), VAR_0.rpos(), VAR_0.available());\n                VAR_7.out.flush();\n            } catch (IOException VAR_8) {\n                throw new TransportException(VAR_8);\n            }\n\n            return VAR_6;\n\n        } finally {\n            VAR_1.unlock();\n        }\n    }",
  "func_graph_path_before": "hierynomus/sshj/94fcc960e0fb198ddec0f7efc53f95ac627fe083/TransportImpl.java/vul/before/0.json",
  "func": "@Override\n    public long write(SSHPacket payload)\n            throws TransportException {\n        writeLock.lock();\n        try {\n\n            if (kexer.isKexOngoing()) {\n                // Only transport layer packets (1 to 49) allowed except SERVICE_REQUEST\n                final Message m = Message.fromByte(payload.array()[payload.rpos()]);\n                if (!m.in(1, 49) || m == Message.SERVICE_REQUEST) {\n                    assert m != Message.KEXINIT;\n                    kexer.waitForDone();\n                }\n            } else if (encoder.isSequenceNumberAtMax()) // We get here every 2**32th packet\n                kexer.startKex(true);\n\n            final long seq = encoder.encode(payload);\n            try {\n                connInfo.out.write(payload.array(), payload.rpos(), payload.available());\n                connInfo.out.flush();\n            } catch (IOException ioe) {\n                throw new TransportException(ioe);\n            }\n\n            return seq;\n\n        } finally {\n            writeLock.unlock();\n        }\n    }",
  "abstract_func": "@Override\n    public long write(SSHPacket VAR_0)\n            throws TransportException {\n        VAR_1.lock();\n        try {\n\n            if (VAR_2.isKexOngoing()) {\n                /* COMMENT_0 */\n                final Message VAR_3 = VAR_4.fromByte(VAR_0.array()[VAR_0.rpos()]);\n                if (!VAR_3.in(1, 49) || VAR_3 == VAR_4.SERVICE_REQUEST) {\n                    assert VAR_3 != VAR_4.KEXINIT;\n                    VAR_2.waitForDone();\n                }\n            } else if (VAR_5.isSequenceNumberAtMax()) /* COMMENT_1 */\n                VAR_2.startKex(true);\n\n            final long VAR_6 = VAR_5.encode(VAR_0);\n            try {\n                VAR_7.out.write(VAR_0.array(), VAR_0.rpos(), VAR_0.available());\n                VAR_7.out.flush();\n            } catch (IOException VAR_8) {\n                throw new TransportException(VAR_8);\n            }\n\n            return VAR_6;\n\n        } finally {\n            VAR_1.unlock();\n        }\n    }",
  "func_graph_path": "hierynomus/sshj/94fcc960e0fb198ddec0f7efc53f95ac627fe083/TransportImpl.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -11,7 +11,7 @@\n                     assert m != Message.KEXINIT;\n                     kexer.waitForDone();\n                 }\n-            } else if (encoder.getSequenceNumber() == 0) // We get here every 2**32th packet\n+            } else if (encoder.isSequenceNumberAtMax()) // We get here every 2**32th packet\n                 kexer.startKex(true);\n \n             final long seq = encoder.encode(payload);",
  "diff_line_info": {
    "deleted_lines": [
      "            } else if (encoder.getSequenceNumber() == 0) // We get here every 2**32th packet"
    ],
    "added_lines": [
      "            } else if (encoder.isSequenceNumberAtMax()) // We get here every 2**32th packet"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/hierynomus/sshj/pull/917",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/hierynomus/sshj/pull/917: 403 Client Error: Forbidden for url: https://api.github.com/repos/hierynomus/sshj/pulls/917",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 0.95"
}