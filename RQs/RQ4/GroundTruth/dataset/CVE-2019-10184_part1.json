{
  "cve_id": "CVE-2019-10184",
  "cwe_ids": [
    "CWE-862"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:N/A:N",
  "cvss_is_v3": false,
  "repo_name": "undertow-io/undertow",
  "commit_msg": "[UNDERTOW-1578] 401 Unauthorized should be returned when requesting a protected directory without trailing slash",
  "commit_hash": "d2715e3afa13f50deaa19643676816ce391551e9",
  "git_url": "https://github.com/undertow-io/undertow/commit/d2715e3afa13f50deaa19643676816ce391551e9",
  "file_path": "servlet/src/main/java/io/undertow/servlet/core/DeploymentManagerImpl.java",
  "func_name": "deploy",
  "func_before": "@Override\n    public void deploy() {\n        final DeploymentInfo deploymentInfo = originalDeployment.clone();\n\n        if (deploymentInfo.getServletStackTraces() == ServletStackTraces.ALL) {\n            UndertowServletLogger.REQUEST_LOGGER.servletStackTracesAll(deploymentInfo.getDeploymentName());\n        }\n\n        deploymentInfo.validate();\n        final DeploymentImpl deployment = new DeploymentImpl(this, deploymentInfo, servletContainer);\n        this.deployment = deployment;\n\n        final ServletContextImpl servletContext = new ServletContextImpl(servletContainer, deployment);\n        deployment.setServletContext(servletContext);\n        handleExtensions(deploymentInfo, servletContext);\n\n        final List<ThreadSetupHandler> setup = new ArrayList<>();\n        setup.add(ServletRequestContextThreadSetupAction.INSTANCE);\n        setup.add(new ContextClassLoaderSetupAction(deploymentInfo.getClassLoader()));\n        setup.addAll(deploymentInfo.getThreadSetupActions());\n        deployment.setThreadSetupActions(setup);\n\n        deployment.getServletPaths().setWelcomePages(deploymentInfo.getWelcomePages());\n\n        if (deploymentInfo.getDefaultEncoding() != null) {\n            deployment.setDefaultCharset(Charset.forName(deploymentInfo.getDefaultEncoding()));\n        }\n        if(deploymentInfo.getDefaultRequestEncoding() != null) {\n            deployment.setDefaultRequestCharset(Charset.forName(deploymentInfo.getDefaultRequestEncoding()));\n        } else if (deploymentInfo.getDefaultEncoding() != null) {\n            deployment.setDefaultRequestCharset(Charset.forName(deploymentInfo.getDefaultEncoding()));\n        }\n        if(deploymentInfo.getDefaultResponseEncoding() != null) {\n            deployment.setDefaultResponseCharset(Charset.forName(deploymentInfo.getDefaultResponseEncoding()));\n        } else if (deploymentInfo.getDefaultEncoding() != null) {\n            deployment.setDefaultResponseCharset(Charset.forName(deploymentInfo.getDefaultEncoding()));\n        }\n\n        handleDeploymentSessionConfig(deploymentInfo, servletContext);\n\n        deployment.setSessionManager(deploymentInfo.getSessionManagerFactory().createSessionManager(deployment));\n        deployment.getSessionManager().setDefaultSessionTimeout(deploymentInfo.getDefaultSessionTimeout());\n\n\n        try {\n            deployment.createThreadSetupAction(new ThreadSetupHandler.Action<Void, Object>() {\n                @Override\n                public Void call(HttpServerExchange exchange, Object ignore) throws Exception {\n                    final ApplicationListeners listeners = createListeners();\n                    listeners.start();\n\n                    deployment.setApplicationListeners(listeners);\n\n                    //now create the servlets and filters that we know about. We can still get more later\n                    createServletsAndFilters(deployment, deploymentInfo);\n\n                    //first initialize the temp dir\n                    initializeTempDir(servletContext, deploymentInfo);\n\n                    //then run the SCI's\n                    for (final ServletContainerInitializerInfo sci : deploymentInfo.getServletContainerInitializers()) {\n                        final InstanceHandle<? extends ServletContainerInitializer> instance = sci.getInstanceFactory().createInstance();\n                        try {\n                            instance.getInstance().onStartup(sci.getHandlesTypes(), servletContext);\n                        } finally {\n                            instance.release();\n                        }\n                    }\n\n                    deployment.getSessionManager().registerSessionListener(new SessionListenerBridge(deployment, listeners, servletContext));\n                    for(SessionListener listener : deploymentInfo.getSessionListeners()) {\n                        deployment.getSessionManager().registerSessionListener(listener);\n                    }\n\n                    initializeErrorPages(deployment, deploymentInfo);\n                    initializeMimeMappings(deployment, deploymentInfo);\n                    listeners.contextInitialized();\n                    //run\n\n                    HttpHandler wrappedHandlers = ServletDispatchingHandler.INSTANCE;\n                    wrappedHandlers = wrapHandlers(wrappedHandlers, deploymentInfo.getInnerHandlerChainWrappers());\n                    if(!deploymentInfo.isSecurityDisabled()) {\n                        HttpHandler securityHandler = setupSecurityHandlers(wrappedHandlers);\n                        wrappedHandlers = new PredicateHandler(DispatcherTypePredicate.REQUEST, securityHandler, wrappedHandlers);\n                    }\n                    HttpHandler outerHandlers = wrapHandlers(wrappedHandlers, deploymentInfo.getOuterHandlerChainWrappers());\n                    wrappedHandlers = new PredicateHandler(DispatcherTypePredicate.REQUEST, outerHandlers, wrappedHandlers);\n                    wrappedHandlers = handleDevelopmentModePersistentSessions(wrappedHandlers, deploymentInfo, deployment.getSessionManager(), servletContext);\n\n                    MetricsCollector metrics = deploymentInfo.getMetricsCollector();\n                    if(metrics != null) {\n                        wrappedHandlers = new MetricsChainHandler(wrappedHandlers, metrics, deployment);\n                    }\n                    if( deploymentInfo.getCrawlerSessionManagerConfig() != null ) {\n                        wrappedHandlers = new CrawlerSessionManagerHandler(deploymentInfo.getCrawlerSessionManagerConfig(), wrappedHandlers);\n                    }\n\n                    final ServletInitialHandler servletInitialHandler = SecurityActions.createServletInitialHandler(deployment.getServletPaths(), wrappedHandlers, deployment, servletContext);\n\n                    HttpHandler initialHandler = wrapHandlers(servletInitialHandler, deployment.getDeploymentInfo().getInitialHandlerChainWrappers());\n                    initialHandler = new HttpContinueReadHandler(initialHandler);\n                    if(deploymentInfo.getUrlEncoding() != null) {\n                        initialHandler = Handlers.urlDecodingHandler(deploymentInfo.getUrlEncoding(), initialHandler);\n                    }\n                    deployment.setInitialHandler(initialHandler);\n                    deployment.setServletHandler(servletInitialHandler);\n                    deployment.getServletPaths().invalidate(); //make sure we have a fresh set of servlet paths\n                    servletContext.initDone();\n                    return null;\n                }\n            }).call(null, null);\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n        //any problems with the paths won't get detected until the data is initialize\n        //so we force initialization here\n        deployment.getServletPaths().initData();\n        for(ServletContextListener listener : deploymentInfo.getDeploymentCompleteListeners()) {\n            listener.contextInitialized(new ServletContextEvent(servletContext));\n        }\n        state = State.DEPLOYED;\n    }",
  "abstract_func_before": "@Override\n    public void deploy() {\n        final DeploymentInfo VAR_0 = VAR_1.clone();\n\n        if (VAR_0.getServletStackTraces() == VAR_2.ALL) {\n            VAR_3.REQUEST_LOGGER.servletStackTracesAll(VAR_0.getDeploymentName());\n        }\n\n        VAR_0.validate();\n        final DeploymentImpl VAR_4 = new DeploymentImpl(this, VAR_0, VAR_5);\n        this.deployment = VAR_4;\n\n        final ServletContextImpl VAR_6 = new ServletContextImpl(VAR_5, VAR_4);\n        VAR_4.setServletContext(VAR_6);\n        handleExtensions(VAR_0, VAR_6);\n\n        final List<ThreadSetupHandler> VAR_7 = new ArrayList<>();\n        VAR_7.add(VAR_8.INSTANCE);\n        VAR_7.add(new ContextClassLoaderSetupAction(VAR_0.getClassLoader()));\n        VAR_7.addAll(VAR_0.getThreadSetupActions());\n        VAR_4.setThreadSetupActions(VAR_7);\n\n        VAR_4.getServletPaths().setWelcomePages(VAR_0.getWelcomePages());\n\n        if (VAR_0.getDefaultEncoding() != null) {\n            VAR_4.setDefaultCharset(VAR_9.forName(VAR_0.getDefaultEncoding()));\n        }\n        if(VAR_0.getDefaultRequestEncoding() != null) {\n            VAR_4.setDefaultRequestCharset(VAR_9.forName(VAR_0.getDefaultRequestEncoding()));\n        } else if (VAR_0.getDefaultEncoding() != null) {\n            VAR_4.setDefaultRequestCharset(VAR_9.forName(VAR_0.getDefaultEncoding()));\n        }\n        if(VAR_0.getDefaultResponseEncoding() != null) {\n            VAR_4.setDefaultResponseCharset(VAR_9.forName(VAR_0.getDefaultResponseEncoding()));\n        } else if (VAR_0.getDefaultEncoding() != null) {\n            VAR_4.setDefaultResponseCharset(VAR_9.forName(VAR_0.getDefaultEncoding()));\n        }\n\n        handleDeploymentSessionConfig(VAR_0, VAR_6);\n\n        VAR_4.setSessionManager(VAR_0.getSessionManagerFactory().createSessionManager(VAR_4));\n        VAR_4.getSessionManager().setDefaultSessionTimeout(VAR_0.getDefaultSessionTimeout());\n\n\n        try {\n            VAR_4.createThreadSetupAction(new ThreadSetupHandler.Action<Void, Object>() {\n                @Override\n                public Void call(HttpServerExchange VAR_10, Object VAR_11) throws Exception {\n                    final ApplicationListeners VAR_12 = createListeners();\n                    VAR_12.start();\n\n                    VAR_4.setApplicationListeners(VAR_12);\n\n                    /* COMMENT_0 */\n                    createServletsAndFilters(VAR_4, VAR_0);\n\n                    /* COMMENT_1 */\n                    initializeTempDir(VAR_6, VAR_0);\n\n                    /* COMMENT_2 */\n                    for (final ServletContainerInitializerInfo VAR_13 : VAR_0.getServletContainerInitializers()) {\n                        final InstanceHandle<? extends ServletContainerInitializer> VAR_14 = VAR_13.getInstanceFactory().createInstance();\n                        try {\n                            VAR_14.getInstance().onStartup(VAR_13.getHandlesTypes(), VAR_6);\n                        } finally {\n                            VAR_14.release();\n                        }\n                    }\n\n                    VAR_4.getSessionManager().registerSessionListener(new SessionListenerBridge(VAR_4, VAR_12, VAR_6));\n                    for(SessionListener VAR_15 : VAR_0.getSessionListeners()) {\n                        VAR_4.getSessionManager().registerSessionListener(VAR_15);\n                    }\n\n                    initializeErrorPages(VAR_4, VAR_0);\n                    initializeMimeMappings(VAR_4, VAR_0);\n                    VAR_12.contextInitialized();\n                    /* COMMENT_3 */\n\n                    HttpHandler VAR_16 = VAR_17.INSTANCE;\n                    VAR_16 = wrapHandlers(VAR_16, VAR_0.getInnerHandlerChainWrappers());\n                    if(!VAR_0.isSecurityDisabled()) {\n                        HttpHandler VAR_18 = setupSecurityHandlers(VAR_16);\n                        VAR_16 = new PredicateHandler(VAR_19.REQUEST, VAR_18, VAR_16);\n                    }\n                    HttpHandler VAR_20 = wrapHandlers(VAR_16, VAR_0.getOuterHandlerChainWrappers());\n                    VAR_16 = new PredicateHandler(VAR_19.REQUEST, VAR_20, VAR_16);\n                    VAR_16 = handleDevelopmentModePersistentSessions(VAR_16, VAR_0, VAR_4.getSessionManager(), VAR_6);\n\n                    MetricsCollector VAR_21 = VAR_0.getMetricsCollector();\n                    if(VAR_21 != null) {\n                        VAR_16 = new MetricsChainHandler(VAR_16, VAR_21, VAR_4);\n                    }\n                    if( VAR_0.getCrawlerSessionManagerConfig() != null ) {\n                        VAR_16 = new CrawlerSessionManagerHandler(VAR_0.getCrawlerSessionManagerConfig(), VAR_16);\n                    }\n\n                    final ServletInitialHandler VAR_22 = VAR_23.createServletInitialHandler(VAR_4.getServletPaths(), VAR_16, VAR_4, VAR_6);\n\n                    HttpHandler VAR_24 = wrapHandlers(VAR_22, VAR_4.getDeploymentInfo().getInitialHandlerChainWrappers());\n                    VAR_24 = new HttpContinueReadHandler(VAR_24);\n                    if(VAR_0.getUrlEncoding() != null) {\n                        VAR_24 = VAR_25.urlDecodingHandler(VAR_0.getUrlEncoding(), VAR_24);\n                    }\n                    VAR_4.setInitialHandler(VAR_24);\n                    VAR_4.setServletHandler(VAR_22);\n                    VAR_4.getServletPaths().invalidate(); /* COMMENT_4 */\n                    VAR_6.initDone();\n                    return null;\n                }\n            }).call(null, null);\n        } catch (Exception VAR_26) {\n            throw new RuntimeException(VAR_26);\n        }\n        /* COMMENT_5 */\n        /* COMMENT_6 */\n        VAR_4.getServletPaths().initData();\n        for(ServletContextListener VAR_15 : VAR_0.getDeploymentCompleteListeners()) {\n            VAR_15.contextInitialized(new ServletContextEvent(VAR_6));\n        }\n        VAR_27 = VAR_28.DEPLOYED;\n    }",
  "func_graph_path_before": "undertow-io/undertow/d2715e3afa13f50deaa19643676816ce391551e9/DeploymentManagerImpl.java/vul/before/0.json",
  "func": "@Override\n    public void deploy() {\n        final DeploymentInfo deploymentInfo = originalDeployment.clone();\n\n        if (deploymentInfo.getServletStackTraces() == ServletStackTraces.ALL) {\n            UndertowServletLogger.REQUEST_LOGGER.servletStackTracesAll(deploymentInfo.getDeploymentName());\n        }\n\n        deploymentInfo.validate();\n        final DeploymentImpl deployment = new DeploymentImpl(this, deploymentInfo, servletContainer);\n        this.deployment = deployment;\n\n        final ServletContextImpl servletContext = new ServletContextImpl(servletContainer, deployment);\n        deployment.setServletContext(servletContext);\n        handleExtensions(deploymentInfo, servletContext);\n\n        final List<ThreadSetupHandler> setup = new ArrayList<>();\n        setup.add(ServletRequestContextThreadSetupAction.INSTANCE);\n        setup.add(new ContextClassLoaderSetupAction(deploymentInfo.getClassLoader()));\n        setup.addAll(deploymentInfo.getThreadSetupActions());\n        deployment.setThreadSetupActions(setup);\n\n        deployment.getServletPaths().setWelcomePages(deploymentInfo.getWelcomePages());\n\n        if (deploymentInfo.getDefaultEncoding() != null) {\n            deployment.setDefaultCharset(Charset.forName(deploymentInfo.getDefaultEncoding()));\n        }\n        if(deploymentInfo.getDefaultRequestEncoding() != null) {\n            deployment.setDefaultRequestCharset(Charset.forName(deploymentInfo.getDefaultRequestEncoding()));\n        } else if (deploymentInfo.getDefaultEncoding() != null) {\n            deployment.setDefaultRequestCharset(Charset.forName(deploymentInfo.getDefaultEncoding()));\n        }\n        if(deploymentInfo.getDefaultResponseEncoding() != null) {\n            deployment.setDefaultResponseCharset(Charset.forName(deploymentInfo.getDefaultResponseEncoding()));\n        } else if (deploymentInfo.getDefaultEncoding() != null) {\n            deployment.setDefaultResponseCharset(Charset.forName(deploymentInfo.getDefaultEncoding()));\n        }\n\n        handleDeploymentSessionConfig(deploymentInfo, servletContext);\n\n        deployment.setSessionManager(deploymentInfo.getSessionManagerFactory().createSessionManager(deployment));\n        deployment.getSessionManager().setDefaultSessionTimeout(deploymentInfo.getDefaultSessionTimeout());\n\n\n        try {\n            deployment.createThreadSetupAction(new ThreadSetupHandler.Action<Void, Object>() {\n                @Override\n                public Void call(HttpServerExchange exchange, Object ignore) throws Exception {\n                    final ApplicationListeners listeners = createListeners();\n                    listeners.start();\n\n                    deployment.setApplicationListeners(listeners);\n\n                    //now create the servlets and filters that we know about. We can still get more later\n                    createServletsAndFilters(deployment, deploymentInfo);\n\n                    //first initialize the temp dir\n                    initializeTempDir(servletContext, deploymentInfo);\n\n                    //then run the SCI's\n                    for (final ServletContainerInitializerInfo sci : deploymentInfo.getServletContainerInitializers()) {\n                        final InstanceHandle<? extends ServletContainerInitializer> instance = sci.getInstanceFactory().createInstance();\n                        try {\n                            instance.getInstance().onStartup(sci.getHandlesTypes(), servletContext);\n                        } finally {\n                            instance.release();\n                        }\n                    }\n\n                    deployment.getSessionManager().registerSessionListener(new SessionListenerBridge(deployment, listeners, servletContext));\n                    for(SessionListener listener : deploymentInfo.getSessionListeners()) {\n                        deployment.getSessionManager().registerSessionListener(listener);\n                    }\n\n                    initializeErrorPages(deployment, deploymentInfo);\n                    initializeMimeMappings(deployment, deploymentInfo);\n                    listeners.contextInitialized();\n                    //run\n\n                    HttpHandler wrappedHandlers = ServletDispatchingHandler.INSTANCE;\n                    wrappedHandlers = wrapHandlers(wrappedHandlers, deploymentInfo.getInnerHandlerChainWrappers());\n                    wrappedHandlers = new RedirectDirHandler(wrappedHandlers, deployment.getServletPaths());\n                    if(!deploymentInfo.isSecurityDisabled()) {\n                        HttpHandler securityHandler = setupSecurityHandlers(wrappedHandlers);\n                        wrappedHandlers = new PredicateHandler(DispatcherTypePredicate.REQUEST, securityHandler, wrappedHandlers);\n                    }\n                    HttpHandler outerHandlers = wrapHandlers(wrappedHandlers, deploymentInfo.getOuterHandlerChainWrappers());\n                    wrappedHandlers = new PredicateHandler(DispatcherTypePredicate.REQUEST, outerHandlers, wrappedHandlers);\n                    wrappedHandlers = handleDevelopmentModePersistentSessions(wrappedHandlers, deploymentInfo, deployment.getSessionManager(), servletContext);\n\n                    MetricsCollector metrics = deploymentInfo.getMetricsCollector();\n                    if(metrics != null) {\n                        wrappedHandlers = new MetricsChainHandler(wrappedHandlers, metrics, deployment);\n                    }\n                    if( deploymentInfo.getCrawlerSessionManagerConfig() != null ) {\n                        wrappedHandlers = new CrawlerSessionManagerHandler(deploymentInfo.getCrawlerSessionManagerConfig(), wrappedHandlers);\n                    }\n\n                    final ServletInitialHandler servletInitialHandler = SecurityActions.createServletInitialHandler(deployment.getServletPaths(), wrappedHandlers, deployment, servletContext);\n\n                    HttpHandler initialHandler = wrapHandlers(servletInitialHandler, deployment.getDeploymentInfo().getInitialHandlerChainWrappers());\n                    initialHandler = new HttpContinueReadHandler(initialHandler);\n                    if(deploymentInfo.getUrlEncoding() != null) {\n                        initialHandler = Handlers.urlDecodingHandler(deploymentInfo.getUrlEncoding(), initialHandler);\n                    }\n                    deployment.setInitialHandler(initialHandler);\n                    deployment.setServletHandler(servletInitialHandler);\n                    deployment.getServletPaths().invalidate(); //make sure we have a fresh set of servlet paths\n                    servletContext.initDone();\n                    return null;\n                }\n            }).call(null, null);\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n        //any problems with the paths won't get detected until the data is initialize\n        //so we force initialization here\n        deployment.getServletPaths().initData();\n        for(ServletContextListener listener : deploymentInfo.getDeploymentCompleteListeners()) {\n            listener.contextInitialized(new ServletContextEvent(servletContext));\n        }\n        state = State.DEPLOYED;\n    }",
  "abstract_func": "@Override\n    public void deploy() {\n        final DeploymentInfo VAR_0 = VAR_1.clone();\n\n        if (VAR_0.getServletStackTraces() == VAR_2.ALL) {\n            VAR_3.REQUEST_LOGGER.servletStackTracesAll(VAR_0.getDeploymentName());\n        }\n\n        VAR_0.validate();\n        final DeploymentImpl VAR_4 = new DeploymentImpl(this, VAR_0, VAR_5);\n        this.deployment = VAR_4;\n\n        final ServletContextImpl VAR_6 = new ServletContextImpl(VAR_5, VAR_4);\n        VAR_4.setServletContext(VAR_6);\n        handleExtensions(VAR_0, VAR_6);\n\n        final List<ThreadSetupHandler> VAR_7 = new ArrayList<>();\n        VAR_7.add(VAR_8.INSTANCE);\n        VAR_7.add(new ContextClassLoaderSetupAction(VAR_0.getClassLoader()));\n        VAR_7.addAll(VAR_0.getThreadSetupActions());\n        VAR_4.setThreadSetupActions(VAR_7);\n\n        VAR_4.getServletPaths().setWelcomePages(VAR_0.getWelcomePages());\n\n        if (VAR_0.getDefaultEncoding() != null) {\n            VAR_4.setDefaultCharset(VAR_9.forName(VAR_0.getDefaultEncoding()));\n        }\n        if(VAR_0.getDefaultRequestEncoding() != null) {\n            VAR_4.setDefaultRequestCharset(VAR_9.forName(VAR_0.getDefaultRequestEncoding()));\n        } else if (VAR_0.getDefaultEncoding() != null) {\n            VAR_4.setDefaultRequestCharset(VAR_9.forName(VAR_0.getDefaultEncoding()));\n        }\n        if(VAR_0.getDefaultResponseEncoding() != null) {\n            VAR_4.setDefaultResponseCharset(VAR_9.forName(VAR_0.getDefaultResponseEncoding()));\n        } else if (VAR_0.getDefaultEncoding() != null) {\n            VAR_4.setDefaultResponseCharset(VAR_9.forName(VAR_0.getDefaultEncoding()));\n        }\n\n        handleDeploymentSessionConfig(VAR_0, VAR_6);\n\n        VAR_4.setSessionManager(VAR_0.getSessionManagerFactory().createSessionManager(VAR_4));\n        VAR_4.getSessionManager().setDefaultSessionTimeout(VAR_0.getDefaultSessionTimeout());\n\n\n        try {\n            VAR_4.createThreadSetupAction(new ThreadSetupHandler.Action<Void, Object>() {\n                @Override\n                public Void call(HttpServerExchange VAR_10, Object VAR_11) throws Exception {\n                    final ApplicationListeners VAR_12 = createListeners();\n                    VAR_12.start();\n\n                    VAR_4.setApplicationListeners(VAR_12);\n\n                    /* COMMENT_0 */\n                    createServletsAndFilters(VAR_4, VAR_0);\n\n                    /* COMMENT_1 */\n                    initializeTempDir(VAR_6, VAR_0);\n\n                    /* COMMENT_2 */\n                    for (final ServletContainerInitializerInfo VAR_13 : VAR_0.getServletContainerInitializers()) {\n                        final InstanceHandle<? extends ServletContainerInitializer> VAR_14 = VAR_13.getInstanceFactory().createInstance();\n                        try {\n                            VAR_14.getInstance().onStartup(VAR_13.getHandlesTypes(), VAR_6);\n                        } finally {\n                            VAR_14.release();\n                        }\n                    }\n\n                    VAR_4.getSessionManager().registerSessionListener(new SessionListenerBridge(VAR_4, VAR_12, VAR_6));\n                    for(SessionListener VAR_15 : VAR_0.getSessionListeners()) {\n                        VAR_4.getSessionManager().registerSessionListener(VAR_15);\n                    }\n\n                    initializeErrorPages(VAR_4, VAR_0);\n                    initializeMimeMappings(VAR_4, VAR_0);\n                    VAR_12.contextInitialized();\n                    /* COMMENT_3 */\n\n                    HttpHandler VAR_16 = VAR_17.INSTANCE;\n                    VAR_16 = wrapHandlers(VAR_16, VAR_0.getInnerHandlerChainWrappers());\n                    VAR_16 = new RedirectDirHandler(VAR_16, VAR_4.getServletPaths());\n                    if(!VAR_0.isSecurityDisabled()) {\n                        HttpHandler VAR_18 = setupSecurityHandlers(VAR_16);\n                        VAR_16 = new PredicateHandler(VAR_19.REQUEST, VAR_18, VAR_16);\n                    }\n                    HttpHandler VAR_20 = wrapHandlers(VAR_16, VAR_0.getOuterHandlerChainWrappers());\n                    VAR_16 = new PredicateHandler(VAR_19.REQUEST, VAR_20, VAR_16);\n                    VAR_16 = handleDevelopmentModePersistentSessions(VAR_16, VAR_0, VAR_4.getSessionManager(), VAR_6);\n\n                    MetricsCollector VAR_21 = VAR_0.getMetricsCollector();\n                    if(VAR_21 != null) {\n                        VAR_16 = new MetricsChainHandler(VAR_16, VAR_21, VAR_4);\n                    }\n                    if( VAR_0.getCrawlerSessionManagerConfig() != null ) {\n                        VAR_16 = new CrawlerSessionManagerHandler(VAR_0.getCrawlerSessionManagerConfig(), VAR_16);\n                    }\n\n                    final ServletInitialHandler VAR_22 = VAR_23.createServletInitialHandler(VAR_4.getServletPaths(), VAR_16, VAR_4, VAR_6);\n\n                    HttpHandler VAR_24 = wrapHandlers(VAR_22, VAR_4.getDeploymentInfo().getInitialHandlerChainWrappers());\n                    VAR_24 = new HttpContinueReadHandler(VAR_24);\n                    if(VAR_0.getUrlEncoding() != null) {\n                        VAR_24 = VAR_25.urlDecodingHandler(VAR_0.getUrlEncoding(), VAR_24);\n                    }\n                    VAR_4.setInitialHandler(VAR_24);\n                    VAR_4.setServletHandler(VAR_22);\n                    VAR_4.getServletPaths().invalidate(); /* COMMENT_4 */\n                    VAR_6.initDone();\n                    return null;\n                }\n            }).call(null, null);\n        } catch (Exception VAR_26) {\n            throw new RuntimeException(VAR_26);\n        }\n        /* COMMENT_5 */\n        /* COMMENT_6 */\n        VAR_4.getServletPaths().initData();\n        for(ServletContextListener VAR_15 : VAR_0.getDeploymentCompleteListeners()) {\n            VAR_15.contextInitialized(new ServletContextEvent(VAR_6));\n        }\n        VAR_27 = VAR_28.DEPLOYED;\n    }",
  "func_graph_path": "undertow-io/undertow/d2715e3afa13f50deaa19643676816ce391551e9/DeploymentManagerImpl.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -79,6 +79,7 @@\n \n                     HttpHandler wrappedHandlers = ServletDispatchingHandler.INSTANCE;\n                     wrappedHandlers = wrapHandlers(wrappedHandlers, deploymentInfo.getInnerHandlerChainWrappers());\n+                    wrappedHandlers = new RedirectDirHandler(wrappedHandlers, deployment.getServletPaths());\n                     if(!deploymentInfo.isSecurityDisabled()) {\n                         HttpHandler securityHandler = setupSecurityHandlers(wrappedHandlers);\n                         wrappedHandlers = new PredicateHandler(DispatcherTypePredicate.REQUEST, securityHandler, wrappedHandlers);",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "                    wrappedHandlers = new RedirectDirHandler(wrappedHandlers, deployment.getServletPaths());"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/undertow-io/undertow/pull/794",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/undertow-io/undertow/pull/794: 403 Client Error: Forbidden for url: https://api.github.com/repos/undertow-io/undertow/pulls/794",
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.8,
  "Bug Filter Response": "**Final Classification:** Defect Remediation & Feature Upgrades  \n**Confidence:** 0.8"
}