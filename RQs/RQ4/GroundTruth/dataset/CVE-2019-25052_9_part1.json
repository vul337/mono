{
  "cve_id": "CVE-2019-25052",
  "cwe_ids": [
    "CWE-327"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "OP-TEE/optee_os",
  "commit_msg": "cryp: prevent direct calls to update and final functions\n\nWith inconsistent or malformed data it has been possible to call\n\"update\" and \"final\" crypto functions directly. Using a fuzzer tool [1]\nwe have seen that this results in asserts, i.e., a crash that\npotentially could leak sensitive information.\n\nBy setting the state (initialized) in the crypto context (i.e., the\ntee_cryp_state) at the end of all syscall_*_init functions and then add\na check of the state at the beginning of all update and final functions,\n  we prevent direct entrance to the \"update\" and \"final\" functions.\n\n[1] https://github.com/MartijnB/optee_fuzzer\n\nFixes: OP-TEE-2019-0021\n\nSigned-off-by: Joakim Bech <joakim.bech@linaro.org>\nReported-by: Martijn Bogaard <bogaard@riscure.com>\nAcked-by: Jerome Forissier <jerome.forissier@linaro.org>\nReviewed-by: Jens Wiklander <jens.wiklander@linaro.org>",
  "commit_hash": "34a08bec755670ea0490cb53bbc68058cafc69b6",
  "git_url": "https://github.com/OP-TEE/optee_os/commit/34a08bec755670ea0490cb53bbc68058cafc69b6",
  "file_path": "core/tee/tee_svc_cryp.c",
  "func_name": "syscall_authenc_enc_final",
  "func_before": "TEE_Result syscall_authenc_enc_final(unsigned long state,\n\t\t\tconst void *src_data, size_t src_len, void *dst_data,\n\t\t\tuint64_t *dst_len, void *tag, uint64_t *tag_len)\n{\n\tTEE_Result res;\n\tstruct tee_cryp_state *cs;\n\tstruct tee_ta_session *sess;\n\tsize_t dlen = 0;\n\tsize_t tlen = 0;\n\n\tres = tee_ta_get_current_session(&sess);\n\tif (res != TEE_SUCCESS)\n\t\treturn res;\n\n\tres = tee_svc_cryp_get_state(sess, tee_svc_uref_to_vaddr(state), &cs);\n\tif (res != TEE_SUCCESS)\n\t\treturn res;\n\n\tif (cs->mode != TEE_MODE_ENCRYPT)\n\t\treturn TEE_ERROR_BAD_PARAMETERS;\n\n\tif (TEE_ALG_GET_CLASS(cs->algo) != TEE_OPERATION_AE)\n\t\treturn TEE_ERROR_BAD_STATE;\n\n\tres = tee_mmu_check_access_rights(to_user_ta_ctx(sess->ctx),\n\t\t\t\t\t  TEE_MEMORY_ACCESS_READ |\n\t\t\t\t\t  TEE_MEMORY_ACCESS_ANY_OWNER,\n\t\t\t\t\t  (uaddr_t)src_data, src_len);\n\tif (res != TEE_SUCCESS)\n\t\treturn res;\n\n\tif (!dst_len) {\n\t\tdlen = 0;\n\t} else {\n\t\tres = get_user_u64_as_size_t(&dlen, dst_len);\n\t\tif (res != TEE_SUCCESS)\n\t\t\treturn res;\n\n\t\tres = tee_mmu_check_access_rights(to_user_ta_ctx(sess->ctx),\n\t\t\t\t\t\t  TEE_MEMORY_ACCESS_READ |\n\t\t\t\t\t\t  TEE_MEMORY_ACCESS_WRITE |\n\t\t\t\t\t\t  TEE_MEMORY_ACCESS_ANY_OWNER,\n\t\t\t\t\t\t  (uaddr_t)dst_data, dlen);\n\t\tif (res != TEE_SUCCESS)\n\t\t\treturn res;\n\t}\n\n\tif (dlen < src_len) {\n\t\tres = TEE_ERROR_SHORT_BUFFER;\n\t\tgoto out;\n\t}\n\n\tres = get_user_u64_as_size_t(&tlen, tag_len);\n\tif (res != TEE_SUCCESS)\n\t\treturn res;\n\n\tres = tee_mmu_check_access_rights(to_user_ta_ctx(sess->ctx),\n\t\t\t\t\t  TEE_MEMORY_ACCESS_READ |\n\t\t\t\t\t  TEE_MEMORY_ACCESS_WRITE |\n\t\t\t\t\t  TEE_MEMORY_ACCESS_ANY_OWNER,\n\t\t\t\t\t  (uaddr_t)tag, tlen);\n\tif (res != TEE_SUCCESS)\n\t\treturn res;\n\n\tres = crypto_authenc_enc_final(cs->ctx, cs->algo, src_data,\n\t\t\t\t       src_len, dst_data, &dlen, tag, &tlen);\n\nout:\n\tif (res == TEE_SUCCESS || res == TEE_ERROR_SHORT_BUFFER) {\n\t\tTEE_Result res2;\n\n\t\tif (dst_len != NULL) {\n\t\t\tres2 = put_user_u64(dst_len, dlen);\n\t\t\tif (res2 != TEE_SUCCESS)\n\t\t\t\treturn res2;\n\t\t}\n\n\t\tres2 = put_user_u64(tag_len, tlen);\n\t\tif (res2 != TEE_SUCCESS)\n\t\t\treturn res2;\n\t}\n\n\treturn res;\n}",
  "abstract_func_before": "TEE_Result syscall_authenc_enc_final(unsigned long VAR_0,\n\t\t\tconst void *VAR_1, size_t VAR_2, void *VAR_3,\n\t\t\tuint64_t *VAR_4, void *VAR_5, uint64_t *VAR_6)\n{\n\tTEE_Result VAR_7;\n\tstruct tee_cryp_state *VAR_8;\n\tstruct tee_ta_session *VAR_9;\n\tsize_t VAR_10 = 0;\n\tsize_t VAR_11 = 0;\n\n\tVAR_7 = tee_ta_get_current_session(&VAR_9);\n\tif (VAR_7 != VAR_12)\n\t\treturn VAR_7;\n\n\tVAR_7 = tee_svc_cryp_get_state(VAR_9, tee_svc_uref_to_vaddr(VAR_0), &VAR_8);\n\tif (VAR_7 != VAR_12)\n\t\treturn VAR_7;\n\n\tif (VAR_8->mode != VAR_13)\n\t\treturn VAR_14;\n\n\tif (TEE_ALG_GET_CLASS(VAR_8->algo) != VAR_15)\n\t\treturn VAR_16;\n\n\tVAR_7 = tee_mmu_check_access_rights(to_user_ta_ctx(VAR_9->ctx),\n\t\t\t\t\t  VAR_17 |\n\t\t\t\t\t  VAR_18,\n\t\t\t\t\t  (uaddr_t)VAR_1, VAR_2);\n\tif (VAR_7 != VAR_12)\n\t\treturn VAR_7;\n\n\tif (!VAR_4) {\n\t\tVAR_10 = 0;\n\t} else {\n\t\tVAR_7 = get_user_u64_as_size_t(&VAR_10, VAR_4);\n\t\tif (VAR_7 != VAR_12)\n\t\t\treturn VAR_7;\n\n\t\tVAR_7 = tee_mmu_check_access_rights(to_user_ta_ctx(VAR_9->ctx),\n\t\t\t\t\t\t  VAR_17 |\n\t\t\t\t\t\t  VAR_19 |\n\t\t\t\t\t\t  VAR_18,\n\t\t\t\t\t\t  (uaddr_t)VAR_3, VAR_10);\n\t\tif (VAR_7 != VAR_12)\n\t\t\treturn VAR_7;\n\t}\n\n\tif (VAR_10 < VAR_2) {\n\t\tVAR_7 = VAR_20;\n\t\tgoto out;\n\t}\n\n\tVAR_7 = get_user_u64_as_size_t(&VAR_11, VAR_6);\n\tif (VAR_7 != VAR_12)\n\t\treturn VAR_7;\n\n\tVAR_7 = tee_mmu_check_access_rights(to_user_ta_ctx(VAR_9->ctx),\n\t\t\t\t\t  VAR_17 |\n\t\t\t\t\t  VAR_19 |\n\t\t\t\t\t  VAR_18,\n\t\t\t\t\t  (uaddr_t)VAR_5, VAR_11);\n\tif (VAR_7 != VAR_12)\n\t\treturn VAR_7;\n\n\tVAR_7 = crypto_authenc_enc_final(VAR_8->ctx, VAR_8->algo, VAR_1,\n\t\t\t\t       VAR_2, VAR_3, &VAR_10, VAR_5, &VAR_11);\n\nout:\n\tif (VAR_7 == VAR_12 || VAR_7 == VAR_20) {\n\t\tTEE_Result VAR_21;\n\n\t\tif (VAR_4 != NULL) {\n\t\t\tVAR_21 = put_user_u64(VAR_4, VAR_10);\n\t\t\tif (VAR_21 != VAR_12)\n\t\t\t\treturn VAR_21;\n\t\t}\n\n\t\tVAR_21 = put_user_u64(VAR_6, VAR_11);\n\t\tif (VAR_21 != VAR_12)\n\t\t\treturn VAR_21;\n\t}\n\n\treturn VAR_7;\n}",
  "func_graph_path_before": "OP-TEE/optee_os/34a08bec755670ea0490cb53bbc68058cafc69b6/tee_svc_cryp.c/vul/before/10.json",
  "func": "TEE_Result syscall_authenc_enc_final(unsigned long state,\n\t\t\tconst void *src_data, size_t src_len, void *dst_data,\n\t\t\tuint64_t *dst_len, void *tag, uint64_t *tag_len)\n{\n\tTEE_Result res;\n\tstruct tee_cryp_state *cs;\n\tstruct tee_ta_session *sess;\n\tsize_t dlen = 0;\n\tsize_t tlen = 0;\n\n\tres = tee_ta_get_current_session(&sess);\n\tif (res != TEE_SUCCESS)\n\t\treturn res;\n\n\tres = tee_svc_cryp_get_state(sess, tee_svc_uref_to_vaddr(state), &cs);\n\tif (res != TEE_SUCCESS)\n\t\treturn res;\n\n\tif (cs->state != CRYP_STATE_INITIALIZED)\n\t\treturn TEE_ERROR_BAD_STATE;\n\n\tif (cs->mode != TEE_MODE_ENCRYPT)\n\t\treturn TEE_ERROR_BAD_PARAMETERS;\n\n\tif (TEE_ALG_GET_CLASS(cs->algo) != TEE_OPERATION_AE)\n\t\treturn TEE_ERROR_BAD_STATE;\n\n\tres = tee_mmu_check_access_rights(to_user_ta_ctx(sess->ctx),\n\t\t\t\t\t  TEE_MEMORY_ACCESS_READ |\n\t\t\t\t\t  TEE_MEMORY_ACCESS_ANY_OWNER,\n\t\t\t\t\t  (uaddr_t)src_data, src_len);\n\tif (res != TEE_SUCCESS)\n\t\treturn res;\n\n\tif (!dst_len) {\n\t\tdlen = 0;\n\t} else {\n\t\tres = get_user_u64_as_size_t(&dlen, dst_len);\n\t\tif (res != TEE_SUCCESS)\n\t\t\treturn res;\n\n\t\tres = tee_mmu_check_access_rights(to_user_ta_ctx(sess->ctx),\n\t\t\t\t\t\t  TEE_MEMORY_ACCESS_READ |\n\t\t\t\t\t\t  TEE_MEMORY_ACCESS_WRITE |\n\t\t\t\t\t\t  TEE_MEMORY_ACCESS_ANY_OWNER,\n\t\t\t\t\t\t  (uaddr_t)dst_data, dlen);\n\t\tif (res != TEE_SUCCESS)\n\t\t\treturn res;\n\t}\n\n\tif (dlen < src_len) {\n\t\tres = TEE_ERROR_SHORT_BUFFER;\n\t\tgoto out;\n\t}\n\n\tres = get_user_u64_as_size_t(&tlen, tag_len);\n\tif (res != TEE_SUCCESS)\n\t\treturn res;\n\n\tres = tee_mmu_check_access_rights(to_user_ta_ctx(sess->ctx),\n\t\t\t\t\t  TEE_MEMORY_ACCESS_READ |\n\t\t\t\t\t  TEE_MEMORY_ACCESS_WRITE |\n\t\t\t\t\t  TEE_MEMORY_ACCESS_ANY_OWNER,\n\t\t\t\t\t  (uaddr_t)tag, tlen);\n\tif (res != TEE_SUCCESS)\n\t\treturn res;\n\n\tres = crypto_authenc_enc_final(cs->ctx, cs->algo, src_data,\n\t\t\t\t       src_len, dst_data, &dlen, tag, &tlen);\n\nout:\n\tif (res == TEE_SUCCESS || res == TEE_ERROR_SHORT_BUFFER) {\n\t\tTEE_Result res2;\n\n\t\tif (dst_len != NULL) {\n\t\t\tres2 = put_user_u64(dst_len, dlen);\n\t\t\tif (res2 != TEE_SUCCESS)\n\t\t\t\treturn res2;\n\t\t}\n\n\t\tres2 = put_user_u64(tag_len, tlen);\n\t\tif (res2 != TEE_SUCCESS)\n\t\t\treturn res2;\n\t}\n\n\treturn res;\n}",
  "abstract_func": "TEE_Result syscall_authenc_enc_final(unsigned long VAR_0,\n\t\t\tconst void *VAR_1, size_t VAR_2, void *VAR_3,\n\t\t\tuint64_t *VAR_4, void *VAR_5, uint64_t *VAR_6)\n{\n\tTEE_Result VAR_7;\n\tstruct tee_cryp_state *VAR_8;\n\tstruct tee_ta_session *VAR_9;\n\tsize_t VAR_10 = 0;\n\tsize_t VAR_11 = 0;\n\n\tVAR_7 = tee_ta_get_current_session(&VAR_9);\n\tif (VAR_7 != VAR_12)\n\t\treturn VAR_7;\n\n\tVAR_7 = tee_svc_cryp_get_state(VAR_9, tee_svc_uref_to_vaddr(VAR_0), &VAR_8);\n\tif (VAR_7 != VAR_12)\n\t\treturn VAR_7;\n\n\tif (VAR_8->state != VAR_13)\n\t\treturn VAR_14;\n\n\tif (VAR_8->mode != VAR_15)\n\t\treturn VAR_16;\n\n\tif (TEE_ALG_GET_CLASS(VAR_8->algo) != VAR_17)\n\t\treturn VAR_14;\n\n\tVAR_7 = tee_mmu_check_access_rights(to_user_ta_ctx(VAR_9->ctx),\n\t\t\t\t\t  VAR_18 |\n\t\t\t\t\t  VAR_19,\n\t\t\t\t\t  (uaddr_t)VAR_1, VAR_2);\n\tif (VAR_7 != VAR_12)\n\t\treturn VAR_7;\n\n\tif (!VAR_4) {\n\t\tVAR_10 = 0;\n\t} else {\n\t\tVAR_7 = get_user_u64_as_size_t(&VAR_10, VAR_4);\n\t\tif (VAR_7 != VAR_12)\n\t\t\treturn VAR_7;\n\n\t\tVAR_7 = tee_mmu_check_access_rights(to_user_ta_ctx(VAR_9->ctx),\n\t\t\t\t\t\t  VAR_18 |\n\t\t\t\t\t\t  VAR_20 |\n\t\t\t\t\t\t  VAR_19,\n\t\t\t\t\t\t  (uaddr_t)VAR_3, VAR_10);\n\t\tif (VAR_7 != VAR_12)\n\t\t\treturn VAR_7;\n\t}\n\n\tif (VAR_10 < VAR_2) {\n\t\tVAR_7 = VAR_21;\n\t\tgoto out;\n\t}\n\n\tVAR_7 = get_user_u64_as_size_t(&VAR_11, VAR_6);\n\tif (VAR_7 != VAR_12)\n\t\treturn VAR_7;\n\n\tVAR_7 = tee_mmu_check_access_rights(to_user_ta_ctx(VAR_9->ctx),\n\t\t\t\t\t  VAR_18 |\n\t\t\t\t\t  VAR_20 |\n\t\t\t\t\t  VAR_19,\n\t\t\t\t\t  (uaddr_t)VAR_5, VAR_11);\n\tif (VAR_7 != VAR_12)\n\t\treturn VAR_7;\n\n\tVAR_7 = crypto_authenc_enc_final(VAR_8->ctx, VAR_8->algo, VAR_1,\n\t\t\t\t       VAR_2, VAR_3, &VAR_10, VAR_5, &VAR_11);\n\nout:\n\tif (VAR_7 == VAR_12 || VAR_7 == VAR_21) {\n\t\tTEE_Result VAR_22;\n\n\t\tif (VAR_4 != NULL) {\n\t\t\tVAR_22 = put_user_u64(VAR_4, VAR_10);\n\t\t\tif (VAR_22 != VAR_12)\n\t\t\t\treturn VAR_22;\n\t\t}\n\n\t\tVAR_22 = put_user_u64(VAR_6, VAR_11);\n\t\tif (VAR_22 != VAR_12)\n\t\t\treturn VAR_22;\n\t}\n\n\treturn VAR_7;\n}",
  "func_graph_path": "OP-TEE/optee_os/34a08bec755670ea0490cb53bbc68058cafc69b6/tee_svc_cryp.c/vul/after/10.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -15,6 +15,9 @@\n \tres = tee_svc_cryp_get_state(sess, tee_svc_uref_to_vaddr(state), &cs);\n \tif (res != TEE_SUCCESS)\n \t\treturn res;\n+\n+\tif (cs->state != CRYP_STATE_INITIALIZED)\n+\t\treturn TEE_ERROR_BAD_STATE;\n \n \tif (cs->mode != TEE_MODE_ENCRYPT)\n \t\treturn TEE_ERROR_BAD_PARAMETERS;",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "",
      "\tif (cs->state != CRYP_STATE_INITIALIZED)",
      "\t\treturn TEE_ERROR_BAD_STATE;"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/OP-TEE/optee_os/pull/3316",
  "description": {
    "pr_info": {
      "title": "Riscure fuzzer vuln",
      "number": 3316
    },
    "comment": [
      "Fixes for potential security issues found by Riscure's fuzzer tool.\r\n\r\nI've tested this in QEMU v7, no regressions seen.\r\n```bash\r\n24105 subtests of which 0 failed\r\n96 test cases of which 0 failed\r\n0 test cases were skipped\r\nTEE test application done!\r\n```",
      "Squashed, rebased and tag(s) applied (should be) ready for merge! Thanks!"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 1.0"
}