{
  "cve_id": "CVE-2020-10577",
  "cwe_ids": [
    "CWE-362"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:P/I:P/A:N",
  "cvss_is_v3": false,
  "repo_name": "meetecho/janus-gateway",
  "commit_msg": "Fix rare race condition when claiming sessions",
  "commit_hash": "bc319056603295953f4a70999bc4553785c6e5ef",
  "git_url": "https://github.com/meetecho/janus-gateway/commit/bc319056603295953f4a70999bc4553785c6e5ef",
  "file_path": "janus.c",
  "func_name": "janus_session_notify_event",
  "func_before": "void janus_session_notify_event(janus_session *session, json_t *event) {\n\tif(session != NULL && !g_atomic_int_get(&session->destroyed) && session->source != NULL && session->source->transport != NULL) {\n\t\t/* Send this to the transport client */\n\t\tJANUS_LOG(LOG_HUGE, \"Sending event to %s (%p)\\n\", session->source->transport->get_package(), session->source->instance);\n\t\tsession->source->transport->send_message(session->source->instance, NULL, FALSE, event);\n\t} else {\n\t\t/* No transport, free the event */\n\t\tjson_decref(event);\n\t}\n}",
  "abstract_func_before": "void janus_session_notify_event(janus_session *VAR_0, json_t *VAR_1) {\n\tif(VAR_0 != NULL && !g_atomic_int_get(&VAR_0->destroyed) && VAR_0->source != NULL && VAR_0->source->transport != NULL) {\n\t\t/* COMMENT_0 */\n\t\tJANUS_LOG(VAR_2, \"Sending event to %s (%p)\\n\", VAR_0->source->transport->get_package(), VAR_0->source->instance);\n\t\tVAR_0->source->transport->send_message(VAR_0->source->instance, NULL, FALSE, VAR_1);\n\t} else {\n\t\t/* COMMENT_1 */\n\t\tjson_decref(VAR_1);\n\t}\n}",
  "func_graph_path_before": "meetecho/janus-gateway/bc319056603295953f4a70999bc4553785c6e5ef/janus.c/vul/before/1.json",
  "func": "void janus_session_notify_event(janus_session *session, json_t *event) {\n\tif(session != NULL && !g_atomic_int_get(&session->destroyed)) {\n\t\tjanus_mutex_lock(&session->mutex);\n\t\tif(session->source != NULL && session->source->transport != NULL) {\n\t\t\t/* Send this to the transport client */\n\t\t\tJANUS_LOG(LOG_HUGE, \"Sending event to %s (%p)\\n\", session->source->transport->get_package(), session->source->instance);\n\t\t\tsession->source->transport->send_message(session->source->instance, NULL, FALSE, event);\n\t\t} else {\n\t\t\t/* No transport, free the event */\n\t\t\tjson_decref(event);\n\t\t}\n\t\tjanus_mutex_unlock(&session->mutex);\n\t} else {\n\t\t/* No session, free the event */\n\t\tjson_decref(event);\n\t}\n}",
  "abstract_func": "void janus_session_notify_event(janus_session *VAR_0, json_t *VAR_1) {\n\tif(VAR_0 != NULL && !g_atomic_int_get(&VAR_0->destroyed)) {\n\t\tjanus_mutex_lock(&VAR_0->mutex);\n\t\tif(VAR_0->source != NULL && VAR_0->source->transport != NULL) {\n\t\t\t/* COMMENT_0 */\n\t\t\tJANUS_LOG(VAR_2, \"Sending event to %s (%p)\\n\", VAR_0->source->transport->get_package(), VAR_0->source->instance);\n\t\t\tVAR_0->source->transport->send_message(VAR_0->source->instance, NULL, FALSE, VAR_1);\n\t\t} else {\n\t\t\t/* COMMENT_1 */\n\t\t\tjson_decref(VAR_1);\n\t\t}\n\t\tjanus_mutex_unlock(&VAR_0->mutex);\n\t} else {\n\t\t/* COMMENT_2 */\n\t\tjson_decref(VAR_1);\n\t}\n}",
  "func_graph_path": "meetecho/janus-gateway/bc319056603295953f4a70999bc4553785c6e5ef/janus.c/vul/after/1.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,10 +1,17 @@\n void janus_session_notify_event(janus_session *session, json_t *event) {\n-\tif(session != NULL && !g_atomic_int_get(&session->destroyed) && session->source != NULL && session->source->transport != NULL) {\n-\t\t/* Send this to the transport client */\n-\t\tJANUS_LOG(LOG_HUGE, \"Sending event to %s (%p)\\n\", session->source->transport->get_package(), session->source->instance);\n-\t\tsession->source->transport->send_message(session->source->instance, NULL, FALSE, event);\n+\tif(session != NULL && !g_atomic_int_get(&session->destroyed)) {\n+\t\tjanus_mutex_lock(&session->mutex);\n+\t\tif(session->source != NULL && session->source->transport != NULL) {\n+\t\t\t/* Send this to the transport client */\n+\t\t\tJANUS_LOG(LOG_HUGE, \"Sending event to %s (%p)\\n\", session->source->transport->get_package(), session->source->instance);\n+\t\t\tsession->source->transport->send_message(session->source->instance, NULL, FALSE, event);\n+\t\t} else {\n+\t\t\t/* No transport, free the event */\n+\t\t\tjson_decref(event);\n+\t\t}\n+\t\tjanus_mutex_unlock(&session->mutex);\n \t} else {\n-\t\t/* No transport, free the event */\n+\t\t/* No session, free the event */\n \t\tjson_decref(event);\n \t}\n }",
  "diff_line_info": {
    "deleted_lines": [
      "\tif(session != NULL && !g_atomic_int_get(&session->destroyed) && session->source != NULL && session->source->transport != NULL) {",
      "\t\t/* Send this to the transport client */",
      "\t\tJANUS_LOG(LOG_HUGE, \"Sending event to %s (%p)\\n\", session->source->transport->get_package(), session->source->instance);",
      "\t\tsession->source->transport->send_message(session->source->instance, NULL, FALSE, event);",
      "\t\t/* No transport, free the event */"
    ],
    "added_lines": [
      "\tif(session != NULL && !g_atomic_int_get(&session->destroyed)) {",
      "\t\tjanus_mutex_lock(&session->mutex);",
      "\t\tif(session->source != NULL && session->source->transport != NULL) {",
      "\t\t\t/* Send this to the transport client */",
      "\t\t\tJANUS_LOG(LOG_HUGE, \"Sending event to %s (%p)\\n\", session->source->transport->get_package(), session->source->instance);",
      "\t\t\tsession->source->transport->send_message(session->source->instance, NULL, FALSE, event);",
      "\t\t} else {",
      "\t\t\t/* No transport, free the event */",
      "\t\t\tjson_decref(event);",
      "\t\t}",
      "\t\tjanus_mutex_unlock(&session->mutex);",
      "\t\t/* No session, free the event */"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/meetecho/janus-gateway/pull/1990",
  "description": {
    "pr_info": {
      "title": "Fix rare race condition when claiming sessions",
      "number": 1990
    },
    "comment": [
      "Ref: CVE-2020-10577\r\n\r\nWe've been notified about a rare race condition that can occur when claiming sessions, specifically when a \"claim\" request for a session happens at the same time as an event pushed by a plugin to a handle belonging to the session itself. The root cause is that the `source` property of `session` (which contains the info to relate a session to a transport instance) is used by different threads concurrently, and only some parts of the code are locking it properly: specifically, the code for \"claim\" does, while the code that notifies the event doesn't.\r\n\r\nLooking at the code, I found other instances where `source` was accessed without a lock, so this patch makes sure they're all fixed. The only place where this doesn't happen is `janus_check_sessions`, as when `source` is accessed there a session has already timed out, meaning no conflicts are likely to take place. The patch also makes \"claim\" do nothing if you're trying to claim a session you already own (meaning \"claim\" comes from the same transport instance that is managing the session already): before we were replacing it with itself, which made little sense and made the issue easier to replicate.\r\n\r\nI don't expect this to cause issues, as I've followed the core/transports interaction for the calls that are invoked from within the lock, and I didn't find any way transports can go back to the core and try to lock the same mutex. As such, I'm planning to merge soon, but feedback that might prove me wrong is more than welcome.",
      "> The implementation of `send_message` is up to the transport, so it might be blocking for a long time, this is not known ahead of time.\r\n\r\nFair point: we should be safe with the existing transports, though. All transports just add to a queue, right now, with the exception of MQTT which uses `MQTTAsync_sendMessage` that is asynchronous anyway. We'll probably want to add something to the documentation that says `send_message` should not be blocking, for people interested in contributing a new transport.",
      "Merging."
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 1.0"
}