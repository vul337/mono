{
  "cve_id": "CVE-2019-6991",
  "cwe_ids": [
    "CWE-787"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "ZoneMinder/zoneminder",
  "commit_msg": "Safer_username and safer_login should be based on the username and login\n(lengths * 2)+1. Control input lengths at user input",
  "commit_hash": "5b39eaa43fd1e78a5b71f13aa5cedff73344b673",
  "git_url": "https://github.com/ZoneMinder/zoneminder/commit/5b39eaa43fd1e78a5b71f13aa5cedff73344b673",
  "file_path": "src/zm_user.cpp",
  "func_name": "zmLoadUser",
  "func_before": "User *zmLoadUser( const char *username, const char *password ) {\n  char sql[ZM_SQL_MED_BUFSIZ] = \"\";\n  char safer_username[65]; // current db username size is 32\n\n  // According to docs, size of safer_whatever must be 2*length+1 due to unicode conversions + null terminator.\n  mysql_real_escape_string(&dbconn, safer_username, username, strlen( username ) );\n\n  if ( password ) {\n    char safer_password[129]; // current db password size is 64\n    mysql_real_escape_string(&dbconn, safer_password, password, strlen( password ) );\n    snprintf(sql, sizeof(sql),\n        \"SELECT Id, Username, Password, Enabled, Stream+0, Events+0, Control+0, Monitors+0, System+0, MonitorIds\"\n        \" FROM Users WHERE Username = '%s' AND Password = password('%s') AND Enabled = 1\",\n        safer_username, safer_password );\n  } else {\n    snprintf(sql, sizeof(sql),\n        \"SELECT Id, Username, Password, Enabled, Stream+0, Events+0, Control+0, Monitors+0, System+0, MonitorIds\"\n        \" FROM Users where Username = '%s' and Enabled = 1\", safer_username );\n  }\n\n  if ( mysql_query(&dbconn, sql) ) {\n    Error(\"Can't run query: %s\", mysql_error(&dbconn));\n    exit(mysql_errno(&dbconn));\n  }\n\n  MYSQL_RES *result = mysql_store_result(&dbconn);\n  if ( !result ) {\n    Error(\"Can't use query result: %s\", mysql_error(&dbconn));\n    exit(mysql_errno(&dbconn));\n  }\n  int n_users = mysql_num_rows(result);\n\n  if ( n_users != 1 ) {\n    mysql_free_result(result);\n    Warning(\"Unable to authenticate user %s\", username);\n    return NULL;\n  }\n\n  MYSQL_ROW dbrow = mysql_fetch_row(result);\n\n  User *user = new User(dbrow);\n  Info(\"Authenticated user '%s'\", user->getUsername());\n\n  mysql_free_result(result);\n\n  return user;\n}",
  "abstract_func_before": "User *zmLoadUser( const char *VAR_0, const char *VAR_1 ) {\n  char VAR_2[VAR_3] = \"\";\n  char VAR_4[65]; /* COMMENT_0 */\n\n  /* COMMENT_1 */\n  mysql_real_escape_string(&VAR_5, VAR_4, VAR_0, strlen( VAR_0 ) );\n\n  if ( VAR_1 ) {\n    char VAR_6[129]; /* COMMENT_2 */\n    mysql_real_escape_string(&VAR_5, VAR_6, VAR_1, strlen( VAR_1 ) );\n    snprintf(VAR_2, sizeof(VAR_2),\n        \"SELECT Id, Username, Password, Enabled, Stream+0, Events+0, Control+0, Monitors+0, System+0, MonitorIds\"\n        \" FROM Users WHERE Username = '%s' AND Password = password('%s') AND Enabled = 1\",\n        VAR_4, VAR_6 );\n  } else {\n    snprintf(VAR_2, sizeof(VAR_2),\n        \"SELECT Id, Username, Password, Enabled, Stream+0, Events+0, Control+0, Monitors+0, System+0, MonitorIds\"\n        \" FROM Users where Username = '%s' and Enabled = 1\", VAR_4 );\n  }\n\n  if ( mysql_query(&VAR_5, VAR_2) ) {\n    Error(\"Can't run query: %s\", mysql_error(&VAR_5));\n    exit(mysql_errno(&VAR_5));\n  }\n\n  MYSQL_RES *VAR_7 = mysql_store_result(&VAR_5);\n  if ( !VAR_7 ) {\n    Error(\"Can't use query result: %s\", mysql_error(&VAR_5));\n    exit(mysql_errno(&VAR_5));\n  }\n  int VAR_8 = mysql_num_rows(VAR_7);\n\n  if ( VAR_8 != 1 ) {\n    mysql_free_result(VAR_7);\n    Warning(\"Unable to authenticate user %s\", VAR_0);\n    return NULL;\n  }\n\n  MYSQL_ROW VAR_9 = mysql_fetch_row(VAR_7);\n\n  User *VAR_10 = new User(VAR_9);\n  Info(\"Authenticated user '%s'\", VAR_10->getUsername());\n\n  mysql_free_result(VAR_7);\n\n  return VAR_10;\n}",
  "func_graph_path_before": "ZoneMinder/zoneminder/5b39eaa43fd1e78a5b71f13aa5cedff73344b673/zm_user.cpp/vul/before/0.json",
  "func": "User *zmLoadUser( const char *username, const char *password ) {\n  char sql[ZM_SQL_MED_BUFSIZ] = \"\";\n  char *safer_username = new char[(strlen(username) * 2) + 1];\n\n  // According to docs, size of safer_whatever must be 2*length+1 due to unicode conversions + null terminator.\n  mysql_real_escape_string(&dbconn, safer_username, username, strlen( username ) );\n\n  if ( password ) {\n    char *safer_password = new char[(strlen(password) * 2) +1];\n    mysql_real_escape_string(&dbconn, safer_password, password, strlen( password ) );\n    snprintf(sql, sizeof(sql),\n        \"SELECT Id, Username, Password, Enabled, Stream+0, Events+0, Control+0, Monitors+0, System+0, MonitorIds\"\n        \" FROM Users WHERE Username = '%s' AND Password = password('%s') AND Enabled = 1\",\n        safer_username, safer_password );\n  } else {\n    snprintf(sql, sizeof(sql),\n        \"SELECT Id, Username, Password, Enabled, Stream+0, Events+0, Control+0, Monitors+0, System+0, MonitorIds\"\n        \" FROM Users where Username = '%s' and Enabled = 1\", safer_username );\n  }\n\n  if ( mysql_query(&dbconn, sql) ) {\n    Error(\"Can't run query: %s\", mysql_error(&dbconn));\n    exit(mysql_errno(&dbconn));\n  }\n\n  MYSQL_RES *result = mysql_store_result(&dbconn);\n  if ( !result ) {\n    Error(\"Can't use query result: %s\", mysql_error(&dbconn));\n    exit(mysql_errno(&dbconn));\n  }\n  int n_users = mysql_num_rows(result);\n\n  if ( n_users != 1 ) {\n    mysql_free_result(result);\n    Warning(\"Unable to authenticate user %s\", username);\n    return NULL;\n  }\n\n  MYSQL_ROW dbrow = mysql_fetch_row(result);\n\n  User *user = new User(dbrow);\n  Info(\"Authenticated user '%s'\", user->getUsername());\n\n  mysql_free_result(result);\n\n  return user;\n}",
  "abstract_func": "User *zmLoadUser( const char *VAR_0, const char *VAR_1 ) {\n  char VAR_2[VAR_3] = \"\";\n  char *VAR_4 = new char[(strlen(VAR_0) * 2) + 1];\n\n  /* COMMENT_0 */\n  mysql_real_escape_string(&VAR_5, VAR_4, VAR_0, strlen( VAR_0 ) );\n\n  if ( VAR_1 ) {\n    char *VAR_6 = new char[(strlen(VAR_1) * 2) +1];\n    mysql_real_escape_string(&VAR_5, VAR_6, VAR_1, strlen( VAR_1 ) );\n    snprintf(VAR_2, sizeof(VAR_2),\n        \"SELECT Id, Username, Password, Enabled, Stream+0, Events+0, Control+0, Monitors+0, System+0, MonitorIds\"\n        \" FROM Users WHERE Username = '%s' AND Password = password('%s') AND Enabled = 1\",\n        VAR_4, VAR_6 );\n  } else {\n    snprintf(VAR_2, sizeof(VAR_2),\n        \"SELECT Id, Username, Password, Enabled, Stream+0, Events+0, Control+0, Monitors+0, System+0, MonitorIds\"\n        \" FROM Users where Username = '%s' and Enabled = 1\", VAR_4 );\n  }\n\n  if ( mysql_query(&VAR_5, VAR_2) ) {\n    Error(\"Can't run query: %s\", mysql_error(&VAR_5));\n    exit(mysql_errno(&VAR_5));\n  }\n\n  MYSQL_RES *VAR_7 = mysql_store_result(&VAR_5);\n  if ( !VAR_7 ) {\n    Error(\"Can't use query result: %s\", mysql_error(&VAR_5));\n    exit(mysql_errno(&VAR_5));\n  }\n  int VAR_8 = mysql_num_rows(VAR_7);\n\n  if ( VAR_8 != 1 ) {\n    mysql_free_result(VAR_7);\n    Warning(\"Unable to authenticate user %s\", VAR_0);\n    return NULL;\n  }\n\n  MYSQL_ROW VAR_9 = mysql_fetch_row(VAR_7);\n\n  User *VAR_10 = new User(VAR_9);\n  Info(\"Authenticated user '%s'\", VAR_10->getUsername());\n\n  mysql_free_result(VAR_7);\n\n  return VAR_10;\n}",
  "func_graph_path": "ZoneMinder/zoneminder/5b39eaa43fd1e78a5b71f13aa5cedff73344b673/zm_user.cpp/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,12 +1,12 @@\n User *zmLoadUser( const char *username, const char *password ) {\n   char sql[ZM_SQL_MED_BUFSIZ] = \"\";\n-  char safer_username[65]; // current db username size is 32\n+  char *safer_username = new char[(strlen(username) * 2) + 1];\n \n   // According to docs, size of safer_whatever must be 2*length+1 due to unicode conversions + null terminator.\n   mysql_real_escape_string(&dbconn, safer_username, username, strlen( username ) );\n \n   if ( password ) {\n-    char safer_password[129]; // current db password size is 64\n+    char *safer_password = new char[(strlen(password) * 2) +1];\n     mysql_real_escape_string(&dbconn, safer_password, password, strlen( password ) );\n     snprintf(sql, sizeof(sql),\n         \"SELECT Id, Username, Password, Enabled, Stream+0, Events+0, Control+0, Monitors+0, System+0, MonitorIds\"",
  "diff_line_info": {
    "deleted_lines": [
      "  char safer_username[65]; // current db username size is 32",
      "    char safer_password[129]; // current db password size is 64"
    ],
    "added_lines": [
      "  char *safer_username = new char[(strlen(username) * 2) + 1];",
      "    char *safer_password = new char[(strlen(password) * 2) +1];"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/ZoneMinder/zoneminder/pull/2482",
  "description": {
    "pr_info": {
      "title": "Fixes 2478 Remove overrun possibility",
      "number": 2482
    },
    "comment": [
      "Safer_username and safer_login should be based on the username and login (lengths * 2)+1. Control input lengths at user input",
      "Fixed #2478 ?",
      "Does this introduce a memory leak? Do you care?\r\n\r\nThanks",
      "It did, we fixed it in a subsequent commit."
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.95"
}