{
  "cve_id": "CVE-2021-36144",
  "cwe_ids": [
    "CWE-416"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "projectacrn/acrn-hypervisor",
  "commit_msg": "dm: Reset virtio device before release\n\nWith virtio polling mode enabled, a timer is running in the virtio\nbackend service. And the timer will also be triggered if its frondend\ndriver didn't do the device reset in shutdown. A freed virtio device\nwill be accessed in the polling timer handler.\n\nDo the virtio reset() callback specifically to clear the polling timer\nbefore the free.\n\nTracked-On: #6147\nSigned-off-by: Shuo A Liu <shuo.a.liu@intel.com>\nSigned-off-by: Yonghua Huang <yonghua.huang@intel.com>",
  "commit_hash": "dd88504804e186029f845a166dc5c31695e2cca2",
  "git_url": "https://github.com/projectacrn/acrn-hypervisor/commit/dd88504804e186029f845a166dc5c31695e2cca2",
  "file_path": "devicemodel/hw/pci/virtio/virtio_ipu.c",
  "func_name": "virtio_ipu_deinit",
  "func_before": "static void\nvirtio_ipu_deinit(struct vmctx *ctx, struct pci_vdev *dev, char *opts)\n{\n\n\tstruct virtio_ipu *ipu;\n\n\tipu = (struct virtio_ipu *)dev->arg;\n\tif (!ipu) {\n\t\tIPRINTF(LDBG, \"is NULL!\\n\");\n\t\treturn;\n\t}\n\n\tif (ipu->vbs_k.ipu_kstatus == VIRTIO_DEV_STARTED) {\n\t\tIPRINTF(LDBG, \"deinitializing\\n\");\n\t\tvirtio_ipu_k_stop(ipu);\n\t\tvirtio_ipu_k_reset(ipu);\n\t\tipu->vbs_k.ipu_kstatus = VIRTIO_DEV_INITIAL;\n\t\tif (ipu->vbs_k.ipu_fd >= 0)\n\t\t\tclose(ipu->vbs_k.ipu_fd);\n\t\tipu->vbs_k.ipu_fd = -1;\n\t}\n\tpthread_mutex_destroy(&ipu->mtx);\n\tfree(ipu);\n}",
  "abstract_func_before": "static void\nvirtio_ipu_deinit(struct vmctx *VAR_0, struct pci_vdev *VAR_1, char *VAR_2)\n{\n\n\tstruct virtio_ipu *VAR_3;\n\n\tVAR_3 = (struct virtio_ipu *)VAR_1->arg;\n\tif (!VAR_3) {\n\t\tIPRINTF(VAR_4, \"is NULL!\\n\");\n\t\treturn;\n\t}\n\n\tif (VAR_3->vbs_k.ipu_kstatus == VAR_5) {\n\t\tIPRINTF(VAR_4, \"deinitializing\\n\");\n\t\tvirtio_ipu_k_stop(VAR_3);\n\t\tvirtio_ipu_k_reset(VAR_3);\n\t\tVAR_3->vbs_k.ipu_kstatus = VAR_6;\n\t\tif (VAR_3->vbs_k.ipu_fd >= 0)\n\t\t\tclose(VAR_3->vbs_k.ipu_fd);\n\t\tVAR_3->vbs_k.ipu_fd = -1;\n\t}\n\tpthread_mutex_destroy(&VAR_3->mtx);\n\tfree(VAR_3);\n}",
  "func_graph_path_before": "projectacrn/acrn-hypervisor/dd88504804e186029f845a166dc5c31695e2cca2/virtio_ipu.c/vul/before/0.json",
  "func": "static void\nvirtio_ipu_deinit(struct vmctx *ctx, struct pci_vdev *dev, char *opts)\n{\n\n\tstruct virtio_ipu *ipu;\n\n\tipu = (struct virtio_ipu *)dev->arg;\n\tif (!ipu) {\n\t\tIPRINTF(LDBG, \"is NULL!\\n\");\n\t\treturn;\n\t}\n\n\tif (ipu->vbs_k.ipu_kstatus == VIRTIO_DEV_STARTED) {\n\t\tIPRINTF(LDBG, \"deinitializing\\n\");\n\t\tvirtio_ipu_k_stop(ipu);\n\t\tvirtio_ipu_k_reset(ipu);\n\t\tipu->vbs_k.ipu_kstatus = VIRTIO_DEV_INITIAL;\n\t\tif (ipu->vbs_k.ipu_fd >= 0)\n\t\t\tclose(ipu->vbs_k.ipu_fd);\n\t\tipu->vbs_k.ipu_fd = -1;\n\t}\n\tvirtio_ipu_reset(ipu);\n\tpthread_mutex_destroy(&ipu->mtx);\n\tfree(ipu);\n}",
  "abstract_func": "static void\nvirtio_ipu_deinit(struct vmctx *VAR_0, struct pci_vdev *VAR_1, char *VAR_2)\n{\n\n\tstruct virtio_ipu *VAR_3;\n\n\tVAR_3 = (struct virtio_ipu *)VAR_1->arg;\n\tif (!VAR_3) {\n\t\tIPRINTF(VAR_4, \"is NULL!\\n\");\n\t\treturn;\n\t}\n\n\tif (VAR_3->vbs_k.ipu_kstatus == VAR_5) {\n\t\tIPRINTF(VAR_4, \"deinitializing\\n\");\n\t\tvirtio_ipu_k_stop(VAR_3);\n\t\tvirtio_ipu_k_reset(VAR_3);\n\t\tVAR_3->vbs_k.ipu_kstatus = VAR_6;\n\t\tif (VAR_3->vbs_k.ipu_fd >= 0)\n\t\t\tclose(VAR_3->vbs_k.ipu_fd);\n\t\tVAR_3->vbs_k.ipu_fd = -1;\n\t}\n\tvirtio_ipu_reset(VAR_3);\n\tpthread_mutex_destroy(&VAR_3->mtx);\n\tfree(VAR_3);\n}",
  "func_graph_path": "projectacrn/acrn-hypervisor/dd88504804e186029f845a166dc5c31695e2cca2/virtio_ipu.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -19,6 +19,7 @@\n \t\t\tclose(ipu->vbs_k.ipu_fd);\n \t\tipu->vbs_k.ipu_fd = -1;\n \t}\n+\tvirtio_ipu_reset(ipu);\n \tpthread_mutex_destroy(&ipu->mtx);\n \tfree(ipu);\n }",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "\tvirtio_ipu_reset(ipu);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/projectacrn/acrn-hypervisor/pull/6268",
  "description": {
    "pr_info": {
      "title": "dm: Reset virtio device before release",
      "number": 6268
    },
    "comment": [
      "With virtio polling mode enabled, a timer is running in the virtio\r\nbackend service. And the timer will also be triggered if its frondend\r\ndriver didn't do the device reset in shutdown. A freed virtio device\r\nwill be accessed in the polling timer handler.\r\n\r\nDo the virtio reset() callback specifically to clear the polling timer\r\nbefore the free.\r\n\r\nTracked-On: #6147\r\nSigned-off-by: Shuo A Liu <shuo.a.liu@intel.com>\r\nSigned-off-by: Yonghua Huang <yonghua.huang@intel.com>",
      "@shuox  @ywan170  this PR to back backport from release_2.5 branch, please review.",
      "No new violations to the coding guideline detected.<br>No New Name Conflict<br>No New Function Declaration/Definition Mismatch"
    ]
  },
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.8,
  "Bug Filter Response": "**Final Classification:** Defect Remediation & Feature Upgrades  \n**Confidence:** 0.8"
}