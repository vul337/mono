{
  "cve_id": "CVE-2021-34825",
  "cwe_ids": [
    "CWE-319"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:P/I:N/A:N",
  "cvss_is_v3": false,
  "repo_name": "quassel",
  "commit_msg": "Add link to certificate FAQ in --require-ssl error\r\n\r\nInclude a link to the FAQ page explaining how to set up SSL support on the quassel-irc.org website.\n\nCo-authored-by: Shane Synan <digitalcircuit36939@gmail.com>",
  "commit_hash": "1fc1282f0859daa4fa2cd42a7b4d3ab785765563",
  "git_url": "https://github.com/quassel/quassel/commit/1fc1282f0859daa4fa2cd42a7b4d3ab785765563",
  "file_path": "src/core/sslserver.cpp",
  "func_name": "SslServer::SslServer",
  "func_before": "SslServer::SslServer(QObject* parent)\n    : QTcpServer(parent)\n{\n    // Keep track if the SSL warning has been mentioned at least once before\n    static bool sslWarningShown = false;\n\n    if (Quassel::isOptionSet(\"ssl-cert\")) {\n        _sslCertPath = Quassel::optionValue(\"ssl-cert\");\n    }\n    else {\n        _sslCertPath = Quassel::configDirPath() + \"quasselCert.pem\";\n    }\n\n    if (Quassel::isOptionSet(\"ssl-key\")) {\n        _sslKeyPath = Quassel::optionValue(\"ssl-key\");\n    }\n    else {\n        _sslKeyPath = _sslCertPath;\n    }\n\n    // Initialize the certificates for first-time usage\n    if (!loadCerts()) {\n        // If the core is unable to load a certificate, and \"--require-ssl\" is specified,\n        // do not proceed, throw an exception and quit. This prevents the core from falling\n        // back to a plaintext-only core when they should be expecting SSL/TLS only.\n        if (Quassel::isOptionSet(\"require-ssl\")) {\n            throw ExitException{EXIT_FAILURE, tr(\"--require-ssl is set, but no SSL certificate is available. Exiting.\")};\n        }\n        if (!sslWarningShown) {\n            qWarning() << \"SslServer: Unable to set certificate file\\n\"\n                       << \"          Quassel Core will still work, but cannot provide SSL for client connections.\\n\"\n                       << \"          Please see https://quassel-irc.org/faq/cert to learn how to enable SSL support.\";\n            sslWarningShown = true;\n        }\n    }\n}",
  "abstract_func_before": "SslServer::SslServer(QObject* VAR_0)\n    : QTcpServer(VAR_0)\n{\n    /* COMMENT_0 */\n    static bool VAR_1 = false;\n\n    if (Quassel::isOptionSet(\"ssl-cert\")) {\n        VAR_2 = Quassel::optionValue(\"ssl-cert\");\n    }\n    else {\n        VAR_2 = Quassel::configDirPath() + \"quasselCert.pem\";\n    }\n\n    if (Quassel::isOptionSet(\"ssl-key\")) {\n        VAR_3 = Quassel::optionValue(\"ssl-key\");\n    }\n    else {\n        VAR_3 = VAR_2;\n    }\n\n    /* COMMENT_1 */\n    if (!loadCerts()) {\n        /* COMMENT_2 */\n        /* COMMENT_3 */\n        /* COMMENT_4 */\n        if (Quassel::isOptionSet(\"require-ssl\")) {\n            throw ExitException{VAR_4, tr(\"--require-ssl is set, but no SSL certificate is available. Exiting.\")};\n        }\n        if (!VAR_1) {\n            qWarning() << \"SslServer: Unable to set certificate file\\n\"\n                       << \"          Quassel Core will still work, but cannot provide SSL for client connections.\\n\"\n                       << \"          Please see https://quassel-irc.org/faq/cert to learn how to enable SSL support.\";\n            VAR_1 = true;\n        }\n    }\n}",
  "func_graph_path_before": "quassel/1fc1282f0859daa4fa2cd42a7b4d3ab785765563/sslserver.cpp/vul/before/0.json",
  "func": "SslServer::SslServer(QObject* parent)\n    : QTcpServer(parent)\n{\n    // Keep track if the SSL warning has been mentioned at least once before\n    static bool sslWarningShown = false;\n\n    if (Quassel::isOptionSet(\"ssl-cert\")) {\n        _sslCertPath = Quassel::optionValue(\"ssl-cert\");\n    }\n    else {\n        _sslCertPath = Quassel::configDirPath() + \"quasselCert.pem\";\n    }\n\n    if (Quassel::isOptionSet(\"ssl-key\")) {\n        _sslKeyPath = Quassel::optionValue(\"ssl-key\");\n    }\n    else {\n        _sslKeyPath = _sslCertPath;\n    }\n\n    // Initialize the certificates for first-time usage\n    if (!loadCerts()) {\n        // If the core is unable to load a certificate, and \"--require-ssl\" is specified,\n        // do not proceed, throw an exception and quit. This prevents the core from falling\n        // back to a plaintext-only core when they should be expecting SSL/TLS only.\n        if (Quassel::isOptionSet(\"require-ssl\")) {\n            throw ExitException{EXIT_FAILURE, tr(\"--require-ssl is set, but no SSL certificate is available. Exiting.\\n\"\n                                                 \"Please see https://quassel-irc.org/faq/cert to learn how to enable SSL support.\")};\n        }\n        if (!sslWarningShown) {\n            qWarning() << \"SslServer: Unable to set certificate file\\n\"\n                       << \"          Quassel Core will still work, but cannot provide SSL for client connections.\\n\"\n                       << \"          Please see https://quassel-irc.org/faq/cert to learn how to enable SSL support.\";\n            sslWarningShown = true;\n        }\n    }\n}",
  "abstract_func": "SslServer::SslServer(QObject* VAR_0)\n    : QTcpServer(VAR_0)\n{\n    /* COMMENT_0 */\n    static bool VAR_1 = false;\n\n    if (Quassel::isOptionSet(\"ssl-cert\")) {\n        VAR_2 = Quassel::optionValue(\"ssl-cert\");\n    }\n    else {\n        VAR_2 = Quassel::configDirPath() + \"quasselCert.pem\";\n    }\n\n    if (Quassel::isOptionSet(\"ssl-key\")) {\n        VAR_3 = Quassel::optionValue(\"ssl-key\");\n    }\n    else {\n        VAR_3 = VAR_2;\n    }\n\n    /* COMMENT_1 */\n    if (!loadCerts()) {\n        /* COMMENT_2 */\n        /* COMMENT_3 */\n        /* COMMENT_4 */\n        if (Quassel::isOptionSet(\"require-ssl\")) {\n            throw ExitException{VAR_4, tr(\"--require-ssl is set, but no SSL certificate is available. Exiting.\\n\"\n                                                 \"Please see https://quassel-irc.org/faq/cert to learn how to enable SSL support.\")};\n        }\n        if (!VAR_1) {\n            qWarning() << \"SslServer: Unable to set certificate file\\n\"\n                       << \"          Quassel Core will still work, but cannot provide SSL for client connections.\\n\"\n                       << \"          Please see https://quassel-irc.org/faq/cert to learn how to enable SSL support.\";\n            VAR_1 = true;\n        }\n    }\n}",
  "func_graph_path": "quassel/1fc1282f0859daa4fa2cd42a7b4d3ab785765563/sslserver.cpp/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -24,7 +24,8 @@\n         // do not proceed, throw an exception and quit. This prevents the core from falling\n         // back to a plaintext-only core when they should be expecting SSL/TLS only.\n         if (Quassel::isOptionSet(\"require-ssl\")) {\n-            throw ExitException{EXIT_FAILURE, tr(\"--require-ssl is set, but no SSL certificate is available. Exiting.\")};\n+            throw ExitException{EXIT_FAILURE, tr(\"--require-ssl is set, but no SSL certificate is available. Exiting.\\n\"\n+                                                 \"Please see https://quassel-irc.org/faq/cert to learn how to enable SSL support.\")};\n         }\n         if (!sslWarningShown) {\n             qWarning() << \"SslServer: Unable to set certificate file\\n\"",
  "diff_line_info": {
    "deleted_lines": [
      "            throw ExitException{EXIT_FAILURE, tr(\"--require-ssl is set, but no SSL certificate is available. Exiting.\")};"
    ],
    "added_lines": [
      "            throw ExitException{EXIT_FAILURE, tr(\"--require-ssl is set, but no SSL certificate is available. Exiting.\\n\"",
      "                                                 \"Please see https://quassel-irc.org/faq/cert to learn how to enable SSL support.\")};"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/quassel/quassel/pull/581",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/quassel/quassel/pull/581: 403 Client Error: Forbidden for url: https://api.github.com/repos/quassel/quassel/pulls/581",
  "Bug Filter": "Supporting & Non-Core Improvements",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Supporting & Non-Core Improvements; **Confidence:** 0.9"
}