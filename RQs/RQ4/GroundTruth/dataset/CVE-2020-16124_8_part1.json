{
  "cve_id": "CVE-2020-16124",
  "cwe_ids": [
    "CWE-190"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "ros/ros_comm",
  "commit_msg": "Trap for overly large input to XmlRPCPP which could cause problems with int <-> size_t conversions.\n\n - In XmlRpcClient, XmlRpcServerConnection and XmlRpcSocket, recognize when incoming or outgoing data is too large, generate an error and discard the data when practical.\n - Use the safe strtol() rather than atoi() to decode an incoming content-length header, and generate an error if the length is invalid or too large.\n - In XmlRpcUtil, prevent attempts to parse overly large XML input.\n - Add tests where they can reasonably be inserted into existing test routines.\n\nAlthough this fix could be cleaner the update is written to make the update ABI compatible.\n\nThis fix addresses CVE-2020-16124 / Integer overflow in ros_comm.\n\nSigned-off-by: Sid Faber <sid.faber@canonical.com>",
  "commit_hash": "3dd308911d7294bc6cff12f626b8467fe1555423",
  "git_url": "https://github.com/ros/ros_comm/commit/3dd308911d7294bc6cff12f626b8467fe1555423",
  "file_path": "utilities/xmlrpcpp/src/XmlRpcServerConnection.cpp",
  "func_name": "XmlRpcServerConnection::generateResponse",
  "func_before": "void\nXmlRpcServerConnection::generateResponse(std::string const& resultXml)\n{\n  const char RESPONSE_1[] = \n    \"<?xml version=\\\"1.0\\\"?>\\r\\n\"\n    \"<methodResponse><params><param>\\r\\n\\t\";\n  const char RESPONSE_2[] =\n    \"\\r\\n</param></params></methodResponse>\\r\\n\";\n\n  std::string body = RESPONSE_1 + resultXml + RESPONSE_2;\n  std::string header = generateHeader(body);\n\n  _response = header + body;\n  XmlRpcUtil::log(5, \"XmlRpcServerConnection::generateResponse:\\n%s\\n\", _response.c_str()); \n}",
  "abstract_func_before": "void\nXmlRpcServerConnection::generateResponse(std::string const& VAR_0)\n{\n  const char VAR_1[] = \n    \"<?xml version=\\\"1.0\\\"?>\\r\\n\"\n    \"<methodResponse><params><param>\\r\\n\\t\";\n  const char VAR_2[] =\n    \"\\r\\n</param></params></methodResponse>\\r\\n\";\n\n  std::string VAR_3 = VAR_1 + VAR_0 + VAR_2;\n  std::string VAR_4 = generateHeader(VAR_3);\n\n  VAR_5 = VAR_4 + VAR_3;\n  XmlRpcUtil::log(5, \"XmlRpcServerConnection::generateResponse:\\n%s\\n\", VAR_5.c_str()); \n}",
  "func_graph_path_before": "ros/ros_comm/3dd308911d7294bc6cff12f626b8467fe1555423/XmlRpcServerConnection.cpp/vul/before/0.json",
  "func": "void\nXmlRpcServerConnection::generateResponse(std::string const& resultXml)\n{\n  const char RESPONSE_1[] = \n    \"<?xml version=\\\"1.0\\\"?>\\r\\n\"\n    \"<methodResponse><params><param>\\r\\n\\t\";\n  const char RESPONSE_2[] =\n    \"\\r\\n</param></params></methodResponse>\\r\\n\";\n\n  std::string body = RESPONSE_1 + resultXml + RESPONSE_2;\n  std::string header = generateHeader(body);\n\n  // Avoid an overly large response\n  if ((header.length() + body.length()) > size_t(__INT_MAX__)) {\n    XmlRpcUtil::error(\"XmlRpcServerConnection::generateResponse: response length (%u) exceeds the maximum allowed size (%u).\",\n                      _response.length(), __INT_MAX__);\n    _response = \"\";\n  }\n  else {\n    _response = header + body;\n    XmlRpcUtil::log(5, \"XmlRpcServerConnection::generateResponse:\\n%s\\n\", _response.c_str());\n  }\n}",
  "abstract_func": "void\nXmlRpcServerConnection::generateResponse(std::string const& VAR_0)\n{\n  const char VAR_1[] = \n    \"<?xml version=\\\"1.0\\\"?>\\r\\n\"\n    \"<methodResponse><params><param>\\r\\n\\t\";\n  const char VAR_2[] =\n    \"\\r\\n</param></params></methodResponse>\\r\\n\";\n\n  std::string VAR_3 = VAR_1 + VAR_0 + VAR_2;\n  std::string VAR_4 = generateHeader(VAR_3);\n\n  /* COMMENT_0 */\n  if ((VAR_4.length() + VAR_3.length()) > size_t(VAR_5)) {\n    XmlRpcUtil::error(\"XmlRpcServerConnection::generateResponse: response length (%u) exceeds the maximum allowed size (%u).\",\n                      VAR_6.length(), VAR_5);\n    VAR_6 = \"\";\n  }\n  else {\n    VAR_6 = VAR_4 + VAR_3;\n    XmlRpcUtil::log(5, \"XmlRpcServerConnection::generateResponse:\\n%s\\n\", VAR_6.c_str());\n  }\n}",
  "func_graph_path": "ros/ros_comm/3dd308911d7294bc6cff12f626b8467fe1555423/XmlRpcServerConnection.cpp/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -10,6 +10,14 @@\n   std::string body = RESPONSE_1 + resultXml + RESPONSE_2;\n   std::string header = generateHeader(body);\n \n-  _response = header + body;\n-  XmlRpcUtil::log(5, \"XmlRpcServerConnection::generateResponse:\\n%s\\n\", _response.c_str()); \n+  // Avoid an overly large response\n+  if ((header.length() + body.length()) > size_t(__INT_MAX__)) {\n+    XmlRpcUtil::error(\"XmlRpcServerConnection::generateResponse: response length (%u) exceeds the maximum allowed size (%u).\",\n+                      _response.length(), __INT_MAX__);\n+    _response = \"\";\n+  }\n+  else {\n+    _response = header + body;\n+    XmlRpcUtil::log(5, \"XmlRpcServerConnection::generateResponse:\\n%s\\n\", _response.c_str());\n+  }\n }",
  "diff_line_info": {
    "deleted_lines": [
      "  _response = header + body;",
      "  XmlRpcUtil::log(5, \"XmlRpcServerConnection::generateResponse:\\n%s\\n\", _response.c_str()); "
    ],
    "added_lines": [
      "  // Avoid an overly large response",
      "  if ((header.length() + body.length()) > size_t(__INT_MAX__)) {",
      "    XmlRpcUtil::error(\"XmlRpcServerConnection::generateResponse: response length (%u) exceeds the maximum allowed size (%u).\",",
      "                      _response.length(), __INT_MAX__);",
      "    _response = \"\";",
      "  }",
      "  else {",
      "    _response = header + body;",
      "    XmlRpcUtil::log(5, \"XmlRpcServerConnection::generateResponse:\\n%s\\n\", _response.c_str());",
      "  }"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/ros/ros_comm/pull/2065",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/ros/ros_comm/pull/2065: 403 Client Error: Forbidden for url: https://api.github.com/repos/ros/ros_comm/pulls/2065",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 1.0"
}