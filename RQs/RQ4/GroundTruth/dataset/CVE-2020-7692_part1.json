{
  "cve_id": "CVE-2020-7692",
  "cwe_ids": [
    "CWE-863"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:P/A:N",
  "cvss_is_v3": false,
  "repo_name": "googleapis/google-oauth-java-client",
  "commit_msg": "feat: add PKCE support to AuthorizationCodeFlow (#470)\n\n* Initial test code for a PKCE enabled Authorization Code Flow\r\n\r\n* WIP: work on README.md\r\n\r\n* Script to initialize keycloak by adding client via REST API.\r\n\r\n* Improve keycloak init script and some code cleanup. Still WIP.\r\n\r\n* WIP: work on README.md\r\n\r\n* Working PKCE AuthorizationCodeFlow. Some cleanup of test classes.\r\n\r\n* Add scopes back to the AuthorizationCodeRequestUrl creation.\r\n\r\n* Simplify code by moving PKCE entirely into the AuthorizationCodeFlow class. Add documentation.\r\n\r\n* Remove wildcard imports as that seems to be the way to do things here.\r\n\r\n* Add @since annotation in JavaDoc to the PKCE parameters of the autorization url class.\r\n\r\n* Add PKCE unit test, documentation and minor cleanup of dependencies for code sample.\r\n\r\n* Add PKCE unit test, documentation and minor cleanup of dependencies for code sample.\r\n\r\n* Annotate PKCE with Beta annotation.\r\n\r\n* Responding to code review comments\r\n\r\n* Responding to more PR comments\r\n\r\n* Improve Keycloak PKCE sample documentation\r\n\r\n* Add license header with copyright to new files. Improve documentation.",
  "commit_hash": "13433cd7dd06267fc261f0b1d4764f8e3432c824",
  "git_url": "https://github.com/googleapis/google-oauth-java-client/commit/13433cd7dd06267fc261f0b1d4764f8e3432c824",
  "file_path": "google-oauth-client/src/main/java/com/google/api/client/auth/oauth2/AuthorizationCodeFlow.java",
  "func_name": "newAuthorizationUrl",
  "func_before": "public AuthorizationCodeRequestUrl newAuthorizationUrl() {\n    return new AuthorizationCodeRequestUrl(authorizationServerEncodedUrl, clientId).setScopes(\n        scopes);\n  }",
  "abstract_func_before": "public AuthorizationCodeRequestUrl newAuthorizationUrl() {\n    return new AuthorizationCodeRequestUrl(VAR_0, VAR_1).setScopes(\n        VAR_2);\n  }",
  "func_graph_path_before": "googleapis/google-oauth-java-client/13433cd7dd06267fc261f0b1d4764f8e3432c824/AuthorizationCodeFlow.java/vul/before/0.json",
  "func": "public AuthorizationCodeRequestUrl newAuthorizationUrl() {\n    AuthorizationCodeRequestUrl url = new  AuthorizationCodeRequestUrl(authorizationServerEncodedUrl, clientId);\n    url.setScopes(scopes);\n    if (pkce != null) {\n      url.setCodeChallenge(pkce.getChallenge());\n      url.setCodeChallengeMethod(pkce.getChallengeMethod());\n    }\n    return url;\n  }",
  "abstract_func": "public AuthorizationCodeRequestUrl newAuthorizationUrl() {\n    AuthorizationCodeRequestUrl VAR_0 = new  AuthorizationCodeRequestUrl(VAR_1, VAR_2);\n    VAR_0.setScopes(VAR_3);\n    if (VAR_4 != null) {\n      VAR_0.setCodeChallenge(VAR_4.getChallenge());\n      VAR_0.setCodeChallengeMethod(VAR_4.getChallengeMethod());\n    }\n    return VAR_0;\n  }",
  "func_graph_path": "googleapis/google-oauth-java-client/13433cd7dd06267fc261f0b1d4764f8e3432c824/AuthorizationCodeFlow.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,4 +1,9 @@\n public AuthorizationCodeRequestUrl newAuthorizationUrl() {\n-    return new AuthorizationCodeRequestUrl(authorizationServerEncodedUrl, clientId).setScopes(\n-        scopes);\n+    AuthorizationCodeRequestUrl url = new  AuthorizationCodeRequestUrl(authorizationServerEncodedUrl, clientId);\n+    url.setScopes(scopes);\n+    if (pkce != null) {\n+      url.setCodeChallenge(pkce.getChallenge());\n+      url.setCodeChallengeMethod(pkce.getChallengeMethod());\n+    }\n+    return url;\n   }",
  "diff_line_info": {
    "deleted_lines": [
      "    return new AuthorizationCodeRequestUrl(authorizationServerEncodedUrl, clientId).setScopes(",
      "        scopes);"
    ],
    "added_lines": [
      "    AuthorizationCodeRequestUrl url = new  AuthorizationCodeRequestUrl(authorizationServerEncodedUrl, clientId);",
      "    url.setScopes(scopes);",
      "    if (pkce != null) {",
      "      url.setCodeChallenge(pkce.getChallenge());",
      "      url.setCodeChallengeMethod(pkce.getChallengeMethod());",
      "    }",
      "    return url;"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/googleapis/google-oauth-java-client/pull/470",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/googleapis/google-oauth-java-client/pull/470: 403 Client Error: Forbidden for url: https://api.github.com/repos/googleapis/google-oauth-java-client/pulls/470",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 1.0"
}