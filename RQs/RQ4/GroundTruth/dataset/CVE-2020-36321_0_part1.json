{
  "cve_id": "CVE-2020-36321",
  "cwe_ids": [
    "CWE-22"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:N/A:N",
  "cvss_is_v3": false,
  "repo_name": "vaadin/flow",
  "commit_msg": "Add unit tests and change status code",
  "commit_hash": "6ae6460ca4f3a9b50bd46fbf49c807fe67718307",
  "git_url": "https://github.com/vaadin/flow/commit/6ae6460ca4f3a9b50bd46fbf49c807fe67718307",
  "file_path": "flow-server/src/main/java/com/vaadin/flow/server/DevModeHandler.java",
  "func_name": "serveDevModeRequest",
  "func_before": "public boolean serveDevModeRequest(HttpServletRequest request,\n            HttpServletResponse response) throws IOException {\n        // Do not serve requests if dev server starting or failed to start.\n        if (isDevServerFailedToStart.get() || !devServerStartFuture.isDone()) {\n            return false;\n        }\n        // Since we have 'publicPath=/VAADIN/' in webpack config,\n        // a valid request for webpack-dev-server should start with '/VAADIN/'\n        String requestFilename = request.getPathInfo();\n\n        if (HandlerHelper.isPathUnsafe(requestFilename)) {\n            getLogger().info(HandlerHelper.UNSAFE_PATH_ERROR_MESSAGE_PATTERN,\n                    requestFilename);\n            response.setStatus(HttpServletResponse.SC_NOT_MODIFIED);\n            return true;\n        }\n\n        HttpURLConnection connection = prepareConnection(requestFilename,\n                request.getMethod());\n\n        // Copies all the headers from the original request\n        Enumeration<String> headerNames = request.getHeaderNames();\n        while (headerNames.hasMoreElements()) {\n            String header = headerNames.nextElement();\n            connection.setRequestProperty(header,\n                    // Exclude keep-alive\n                    \"Connect\".equals(header) ? \"close\"\n                            : request.getHeader(header));\n        }\n\n        // Send the request\n        getLogger().debug(\"Requesting resource to webpack {}\",\n                connection.getURL());\n        int responseCode = connection.getResponseCode();\n        if (responseCode == HTTP_NOT_FOUND) {\n            getLogger().debug(\"Resource not served by webpack {}\",\n                    requestFilename);\n            // webpack cannot access the resource, return false so as flow can\n            // handle it\n            return false;\n        }\n        getLogger().debug(\"Served resource by webpack: {} {}\", responseCode,\n                requestFilename);\n\n        // Copies response headers\n        connection.getHeaderFields().forEach((header, values) -> {\n            if (header != null) {\n                response.addHeader(header, values.get(0));\n            }\n        });\n\n        if (responseCode == HTTP_OK) {\n            // Copies response payload\n            writeStream(response.getOutputStream(),\n                    connection.getInputStream());\n        } else if (responseCode < 400) {\n            response.setStatus(responseCode);\n        } else {\n            // Copies response code\n            response.sendError(responseCode);\n        }\n\n        // Close request to avoid issues in CI and Chrome\n        response.getOutputStream().close();\n\n        return true;\n    }",
  "abstract_func_before": "public boolean serveDevModeRequest(HttpServletRequest VAR_0,\n            HttpServletResponse VAR_1) throws IOException {\n        /* COMMENT_0 */\n        if (VAR_2.get() || !VAR_3.isDone()) {\n            return false;\n        }\n        /* COMMENT_1 */\n        /* COMMENT_2 */\n        String VAR_4 = VAR_0.getPathInfo();\n\n        if (VAR_5.isPathUnsafe(VAR_4)) {\n            getLogger().info(VAR_5.UNSAFE_PATH_ERROR_MESSAGE_PATTERN,\n                    VAR_4);\n            VAR_1.setStatus(VAR_6.SC_NOT_MODIFIED);\n            return true;\n        }\n\n        HttpURLConnection VAR_7 = prepareConnection(VAR_4,\n                VAR_0.getMethod());\n\n        /* COMMENT_3 */\n        Enumeration<String> VAR_8 = VAR_0.getHeaderNames();\n        while (VAR_8.hasMoreElements()) {\n            String VAR_9 = VAR_8.nextElement();\n            VAR_7.setRequestProperty(VAR_9,\n                    /* COMMENT_4 */\n                    \"Connect\".equals(VAR_9) ? \"close\"\n                            : VAR_0.getHeader(VAR_9));\n        }\n\n        /* COMMENT_5 */\n        getLogger().debug(\"Requesting resource to webpack {}\",\n                VAR_7.getURL());\n        int VAR_10 = VAR_7.getResponseCode();\n        if (VAR_10 == VAR_11) {\n            getLogger().debug(\"Resource not served by webpack {}\",\n                    VAR_4);\n            /* COMMENT_6 */\n            /* COMMENT_7 */\n            return false;\n        }\n        getLogger().debug(\"Served resource by webpack: {} {}\", VAR_10,\n                VAR_4);\n\n        /* COMMENT_8 */\n        VAR_7.getHeaderFields().forEach((VAR_9, VAR_12) -> {\n            if (VAR_9 != null) {\n                VAR_1.addHeader(VAR_9, VAR_12.get(0));\n            }\n        });\n\n        if (VAR_10 == VAR_13) {\n            /* COMMENT_9 */\n            writeStream(VAR_1.getOutputStream(),\n                    VAR_7.getInputStream());\n        } else if (VAR_10 < 400) {\n            VAR_1.setStatus(VAR_10);\n        } else {\n            /* COMMENT_10 */\n            VAR_1.sendError(VAR_10);\n        }\n\n        /* COMMENT_11 */\n        VAR_1.getOutputStream().close();\n\n        return true;\n    }",
  "func_graph_path_before": "vaadin/flow/6ae6460ca4f3a9b50bd46fbf49c807fe67718307/DevModeHandler.java/vul/before/0.json",
  "func": "public boolean serveDevModeRequest(HttpServletRequest request,\n            HttpServletResponse response) throws IOException {\n        // Do not serve requests if dev server starting or failed to start.\n        if (isDevServerFailedToStart.get() || !devServerStartFuture.isDone()) {\n            return false;\n        }\n        // Since we have 'publicPath=/VAADIN/' in webpack config,\n        // a valid request for webpack-dev-server should start with '/VAADIN/'\n        String requestFilename = request.getPathInfo();\n\n        if (HandlerHelper.isPathUnsafe(requestFilename)) {\n            getLogger().info(HandlerHelper.UNSAFE_PATH_ERROR_MESSAGE_PATTERN,\n                    requestFilename);\n            response.setStatus(HttpServletResponse.SC_FORBIDDEN);\n            return true;\n        }\n\n        HttpURLConnection connection = prepareConnection(requestFilename,\n                request.getMethod());\n\n        // Copies all the headers from the original request\n        Enumeration<String> headerNames = request.getHeaderNames();\n        while (headerNames.hasMoreElements()) {\n            String header = headerNames.nextElement();\n            connection.setRequestProperty(header,\n                    // Exclude keep-alive\n                    \"Connect\".equals(header) ? \"close\"\n                            : request.getHeader(header));\n        }\n\n        // Send the request\n        getLogger().debug(\"Requesting resource to webpack {}\",\n                connection.getURL());\n        int responseCode = connection.getResponseCode();\n        if (responseCode == HTTP_NOT_FOUND) {\n            getLogger().debug(\"Resource not served by webpack {}\",\n                    requestFilename);\n            // webpack cannot access the resource, return false so as flow can\n            // handle it\n            return false;\n        }\n        getLogger().debug(\"Served resource by webpack: {} {}\", responseCode,\n                requestFilename);\n\n        // Copies response headers\n        connection.getHeaderFields().forEach((header, values) -> {\n            if (header != null) {\n                response.addHeader(header, values.get(0));\n            }\n        });\n\n        if (responseCode == HTTP_OK) {\n            // Copies response payload\n            writeStream(response.getOutputStream(),\n                    connection.getInputStream());\n        } else if (responseCode < 400) {\n            response.setStatus(responseCode);\n        } else {\n            // Copies response code\n            response.sendError(responseCode);\n        }\n\n        // Close request to avoid issues in CI and Chrome\n        response.getOutputStream().close();\n\n        return true;\n    }",
  "abstract_func": "public boolean serveDevModeRequest(HttpServletRequest VAR_0,\n            HttpServletResponse VAR_1) throws IOException {\n        /* COMMENT_0 */\n        if (VAR_2.get() || !VAR_3.isDone()) {\n            return false;\n        }\n        /* COMMENT_1 */\n        /* COMMENT_2 */\n        String VAR_4 = VAR_0.getPathInfo();\n\n        if (VAR_5.isPathUnsafe(VAR_4)) {\n            getLogger().info(VAR_5.UNSAFE_PATH_ERROR_MESSAGE_PATTERN,\n                    VAR_4);\n            VAR_1.setStatus(VAR_6.SC_FORBIDDEN);\n            return true;\n        }\n\n        HttpURLConnection VAR_7 = prepareConnection(VAR_4,\n                VAR_0.getMethod());\n\n        /* COMMENT_3 */\n        Enumeration<String> VAR_8 = VAR_0.getHeaderNames();\n        while (VAR_8.hasMoreElements()) {\n            String VAR_9 = VAR_8.nextElement();\n            VAR_7.setRequestProperty(VAR_9,\n                    /* COMMENT_4 */\n                    \"Connect\".equals(VAR_9) ? \"close\"\n                            : VAR_0.getHeader(VAR_9));\n        }\n\n        /* COMMENT_5 */\n        getLogger().debug(\"Requesting resource to webpack {}\",\n                VAR_7.getURL());\n        int VAR_10 = VAR_7.getResponseCode();\n        if (VAR_10 == VAR_11) {\n            getLogger().debug(\"Resource not served by webpack {}\",\n                    VAR_4);\n            /* COMMENT_6 */\n            /* COMMENT_7 */\n            return false;\n        }\n        getLogger().debug(\"Served resource by webpack: {} {}\", VAR_10,\n                VAR_4);\n\n        /* COMMENT_8 */\n        VAR_7.getHeaderFields().forEach((VAR_9, VAR_12) -> {\n            if (VAR_9 != null) {\n                VAR_1.addHeader(VAR_9, VAR_12.get(0));\n            }\n        });\n\n        if (VAR_10 == VAR_13) {\n            /* COMMENT_9 */\n            writeStream(VAR_1.getOutputStream(),\n                    VAR_7.getInputStream());\n        } else if (VAR_10 < 400) {\n            VAR_1.setStatus(VAR_10);\n        } else {\n            /* COMMENT_10 */\n            VAR_1.sendError(VAR_10);\n        }\n\n        /* COMMENT_11 */\n        VAR_1.getOutputStream().close();\n\n        return true;\n    }",
  "func_graph_path": "vaadin/flow/6ae6460ca4f3a9b50bd46fbf49c807fe67718307/DevModeHandler.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -11,7 +11,7 @@\n         if (HandlerHelper.isPathUnsafe(requestFilename)) {\n             getLogger().info(HandlerHelper.UNSAFE_PATH_ERROR_MESSAGE_PATTERN,\n                     requestFilename);\n-            response.setStatus(HttpServletResponse.SC_NOT_MODIFIED);\n+            response.setStatus(HttpServletResponse.SC_FORBIDDEN);\n             return true;\n         }\n ",
  "diff_line_info": {
    "deleted_lines": [
      "            response.setStatus(HttpServletResponse.SC_NOT_MODIFIED);"
    ],
    "added_lines": [
      "            response.setStatus(HttpServletResponse.SC_FORBIDDEN);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/vaadin/flow/pull/9392",
  "description": {
    "pr_info": {
      "title": "fix: check if Url path is encoded twice in Dev Mode",
      "number": 9392
    },
    "comment": [
      "Checks double encoding in Dev Mode requests paths, and if the given path contains unsafe double encoding, it then doesn't serve the request.",
      "Please add a reference to the ticket in the commit message: I can't see which ticket the PR fixes.",
      "SonarQube analysis reported 3 issues\n* ![MAJOR][MAJOR] 3 major\n\nWatch the comments in this conversation to review them.\n\n#### 2 extra issues\n\nNote: The following issues were found on lines that were not modified in the pull request. Because these issues can't be reported as line comments, they are summarized here:\n\n1. ![MAJOR][MAJOR] [DevModeHandler.java#L533](https://github.com/vaadin/flow/blob/11b6e6fca7cec706cb6f33e648b8d9c89670baef/flow-server/src/main/java/com/vaadin/flow/server/DevModeHandler.java#L533): Remove this unused private \"checkPort\" method. [![rule](https://sonarsource.github.io/sonar-github/rule.png)](https://sonar.projects.vaadin.com/coding_rules#rule_key=squid%3AUnusedPrivateMethod)\n1. ![MAJOR][MAJOR] [DevModeHandlerTest.java#L541](https://github.com/vaadin/flow/blob/11b6e6fca7cec706cb6f33e648b8d9c89670baef/flow-server/src/test/java/com/vaadin/flow/server/DevModeHandlerTest.java#L541): Remove this use of \"Thread.sleep()\". [![rule](https://sonarsource.github.io/sonar-github/rule.png)](https://sonar.projects.vaadin.com/coding_rules#rule_key=squid%3AS2925)\n\n[MAJOR]: https://sonarsource.github.io/sonar-github/severity-major.png 'Severity: MAJOR'"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 0.95"
}