{
  "cve_id": "CVE-2022-25010",
  "cwe_ids": [
    "CWE-732"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:P/A:N",
  "cvss_is_v3": false,
  "repo_name": "stepmania",
  "commit_msg": "Remove access to the root FS from lua\n\nOn linux / is mounted to /rootfs in RageFile, which allows access to the\n_whole_ filesystem from lua. This means themes and mod files can\nre-write user data and extract files via USB profiles.\n\n/rootfs was only added for internal use by the alsa, oss and memory card\ndrivers, so it can be easily replaced with direct fstream file access.",
  "commit_hash": "8490d181c2d301ccca0dc6ee52f25bbadb567a9a",
  "git_url": "https://github.com/stepmania/stepmania/commit/8490d181c2d301ccca0dc6ee52f25bbadb567a9a",
  "file_path": "src/arch/Sound/ALSA9Dynamic.cpp",
  "func_name": "LoadALSA",
  "func_before": "RString LoadALSA()\n{\n\t/* If /proc/asound/ doesn't exist, chances are we're on an OSS system.  We shouldn't\n\t * touch ALSA at all, since many OSS systems have old, broken versions of ALSA lying\n\t * around; we're likely to crash if we go near it.  Do this first, before loading\n\t * the ALSA library, since making any ALSA calls may load ALSA core modules.\n\t *\n\t * It's vaguely possible that a module autoloader would load the entire ALSA module set\n\t * on use, and this would prevent that from happening.  I don't know if anyone actually\n\t * does that, though: they're often configured to load snd (the core module) if ALSA\n\t * devices are accessed, but hardware drivers are typically loaded on boot. */\n\tif( !IsADirectory(\"/rootfs/proc/asound/\") )\n\t\treturn \"/proc/asound/ does not exist\";\n\n\tASSERT( Handle == nullptr );\n\n\tHandle = dlopen( lib, RTLD_NOW );\n\tif( Handle == nullptr )\n\t\treturn ssprintf(\"dlopen(%s): %s\", lib.c_str(), dlerror());\n\n\tRString error;\n\t/* Eww.  The \"new\" HW and SW API functions are really prefixed by __,\n\t * eg. __snd_pcm_hw_params_set_rate_near. */\n#define FUNC(ret, name, proto) \\\n\td##name = (name##_f) dlsym(Handle, \"__\" #name); \\\n\tif( !d##name ) { \\\n\t\td##name = (name##_f) dlsym(Handle, #name); \\\n\t\tif( !d##name ) { \\\n\t\t\terror=\"Couldn't load symbol \" #name; \\\n\t\t\tgoto error; \\\n\t\t} \\\n\t}\n#include \"ALSA9Functions.h\"\n#undef FUNC\n\n\treturn \"\";\nerror:\n\tUnloadALSA();\n\treturn error;\n}",
  "abstract_func_before": "RString LoadALSA()\n{\n\t/* COMMENT_0 */\n                                                                                     \n                                                                                  \n                                                                             \n   \n                                                                                        \n                                                                                        \n                                                                                     \n                                                                               \n\tif( !IsADirectory(\"/rootfs/proc/asound/\") )\n\t\treturn \"/proc/asound/ does not exist\";\n\n\tASSERT( VAR_0 == nullptr );\n\n\tVAR_0 = dlopen( VAR_1, VAR_2 );\n\tif( VAR_0 == nullptr )\n\t\treturn ssprintf(\"dlopen(%s): %s\", VAR_1.c_str(), dlerror());\n\n\tRString VAR_3;\n\t/* COMMENT_9 */\n                                             \n#define FUNC(VAR_4, VAR_5, VAR_6) \\\n\td##name = (name##_f) dlsym(Handle, \"__\" #name); \\\n\tif( !d##name ) { \\\n\t\td##name = (name##_f) dlsym(Handle, #name); \\\n\t\tif( !d##name ) { \\\n\t\t\terror=\"Couldn't load symbol \" #name; \\\n\t\t\tgoto error; \\\n\t\t} \\\n\t}\n#include \"ALSA9Functions.h\"\n#undef FUNC\n\n\treturn \"\";\nerror:\n\tUnloadALSA();\n\treturn VAR_3;\n}",
  "func_graph_path_before": "stepmania/8490d181c2d301ccca0dc6ee52f25bbadb567a9a/ALSA9Dynamic.cpp/vul/before/0.json",
  "func": "RString LoadALSA()\n{\n\t/* If /proc/asound/ doesn't exist, chances are we're on an OSS system.  We shouldn't\n\t * touch ALSA at all, since many OSS systems have old, broken versions of ALSA lying\n\t * around; we're likely to crash if we go near it.  Do this first, before loading\n\t * the ALSA library, since making any ALSA calls may load ALSA core modules.\n\t *\n\t * It's vaguely possible that a module autoloader would load the entire ALSA module set\n\t * on use, and this would prevent that from happening.  I don't know if anyone actually\n\t * does that, though: they're often configured to load snd (the core module) if ALSA\n\t * devices are accessed, but hardware drivers are typically loaded on boot. */\n\tstruct stat st;\n\tif (stat(\"/proc/asound/\", &st) == -1 || !(st.st_mode & S_IFDIR))\n\t\treturn \"/proc/asound/ does not exist\";\n\n\tASSERT( Handle == nullptr );\n\n\tHandle = dlopen( lib, RTLD_NOW );\n\tif( Handle == nullptr )\n\t\treturn ssprintf(\"dlopen(%s): %s\", lib.c_str(), dlerror());\n\n\tRString error;\n\t/* Eww.  The \"new\" HW and SW API functions are really prefixed by __,\n\t * eg. __snd_pcm_hw_params_set_rate_near. */\n#define FUNC(ret, name, proto) \\\n\td##name = (name##_f) dlsym(Handle, \"__\" #name); \\\n\tif( !d##name ) { \\\n\t\td##name = (name##_f) dlsym(Handle, #name); \\\n\t\tif( !d##name ) { \\\n\t\t\terror=\"Couldn't load symbol \" #name; \\\n\t\t\tgoto error; \\\n\t\t} \\\n\t}\n#include \"ALSA9Functions.h\"\n#undef FUNC\n\n\treturn \"\";\nerror:\n\tUnloadALSA();\n\treturn error;\n}",
  "abstract_func": "RString LoadALSA()\n{\n\t/* COMMENT_0 */\n                                                                                     \n                                                                                  \n                                                                             \n   \n                                                                                        \n                                                                                        \n                                                                                     \n                                                                               \n\tstruct stat VAR_0;\n\tif (stat(\"/proc/asound/\", &VAR_0) == -1 || !(VAR_0.st_mode & VAR_1))\n\t\treturn \"/proc/asound/ does not exist\";\n\n\tASSERT( VAR_2 == nullptr );\n\n\tVAR_2 = dlopen( VAR_3, VAR_4 );\n\tif( VAR_2 == nullptr )\n\t\treturn ssprintf(\"dlopen(%s): %s\", VAR_3.c_str(), dlerror());\n\n\tRString VAR_5;\n\t/* COMMENT_9 */\n                                             \n#define FUNC(VAR_6, VAR_7, VAR_8) \\\n\td##name = (name##_f) dlsym(Handle, \"__\" #name); \\\n\tif( !d##name ) { \\\n\t\td##name = (name##_f) dlsym(Handle, #name); \\\n\t\tif( !d##name ) { \\\n\t\t\terror=\"Couldn't load symbol \" #name; \\\n\t\t\tgoto error; \\\n\t\t} \\\n\t}\n#include \"ALSA9Functions.h\"\n#undef FUNC\n\n\treturn \"\";\nerror:\n\tUnloadALSA();\n\treturn VAR_5;\n}",
  "func_graph_path": "stepmania/8490d181c2d301ccca0dc6ee52f25bbadb567a9a/ALSA9Dynamic.cpp/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -9,7 +9,8 @@\n \t * on use, and this would prevent that from happening.  I don't know if anyone actually\n \t * does that, though: they're often configured to load snd (the core module) if ALSA\n \t * devices are accessed, but hardware drivers are typically loaded on boot. */\n-\tif( !IsADirectory(\"/rootfs/proc/asound/\") )\n+\tstruct stat st;\n+\tif (stat(\"/proc/asound/\", &st) == -1 || !(st.st_mode & S_IFDIR))\n \t\treturn \"/proc/asound/ does not exist\";\n \n \tASSERT( Handle == nullptr );",
  "diff_line_info": {
    "deleted_lines": [
      "\tif( !IsADirectory(\"/rootfs/proc/asound/\") )"
    ],
    "added_lines": [
      "\tstruct stat st;",
      "\tif (stat(\"/proc/asound/\", &st) == -1 || !(st.st_mode & S_IFDIR))"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/stepmania/stepmania/pull/2184",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/stepmania/stepmania/pull/2184: 403 Client Error: Forbidden for url: https://api.github.com/repos/stepmania/stepmania/pulls/2184",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.95"
}