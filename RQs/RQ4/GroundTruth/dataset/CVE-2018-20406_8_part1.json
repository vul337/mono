{
  "cve_id": "CVE-2018-20406",
  "cwe_ids": [
    "CWE-190"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "python/cpython",
  "commit_msg": "closes bpo-34656: Avoid relying on signed overflow in _pickle memos. (GH-9261)",
  "commit_hash": "a4ae828ee416a66d8c7bf5ee71d653c2cc6a26dd",
  "git_url": "https://github.com/python/cpython/commit/a4ae828ee416a66d8c7bf5ee71d653c2cc6a26dd",
  "file_path": "Modules/_pickle.c",
  "func_name": "_PyMemoTable_Lookup",
  "func_before": "static PyMemoEntry *\n_PyMemoTable_Lookup(PyMemoTable *self, PyObject *key)\n{\n    size_t i;\n    size_t perturb;\n    size_t mask = (size_t)self->mt_mask;\n    PyMemoEntry *table = self->mt_table;\n    PyMemoEntry *entry;\n    Py_hash_t hash = (Py_hash_t)key >> 3;\n\n    i = hash & mask;\n    entry = &table[i];\n    if (entry->me_key == NULL || entry->me_key == key)\n        return entry;\n\n    for (perturb = hash; ; perturb >>= PERTURB_SHIFT) {\n        i = (i << 2) + i + perturb + 1;\n        entry = &table[i & mask];\n        if (entry->me_key == NULL || entry->me_key == key)\n            return entry;\n    }\n    Py_UNREACHABLE();\n}",
  "abstract_func_before": "static PyMemoEntry *\n_PyMemoTable_Lookup(PyMemoTable *VAR_0, PyObject *VAR_1)\n{\n    size_t VAR_2;\n    size_t VAR_3;\n    size_t VAR_4 = (size_t)VAR_0->mt_mask;\n    PyMemoEntry *VAR_5 = VAR_0->mt_table;\n    PyMemoEntry *VAR_6;\n    Py_hash_t VAR_7 = (Py_hash_t)VAR_1 >> 3;\n\n    VAR_2 = VAR_7 & VAR_4;\n    VAR_6 = &VAR_5[VAR_2];\n    if (VAR_6->me_key == NULL || VAR_6->me_key == VAR_1)\n        return VAR_6;\n\n    for (VAR_3 = VAR_7; ; VAR_3 >>= VAR_8) {\n        VAR_2 = (VAR_2 << 2) + VAR_2 + VAR_3 + 1;\n        VAR_6 = &VAR_5[VAR_2 & VAR_4];\n        if (VAR_6->me_key == NULL || VAR_6->me_key == VAR_1)\n            return VAR_6;\n    }\n    Py_UNREACHABLE();\n}",
  "func_graph_path_before": "python/cpython/a4ae828ee416a66d8c7bf5ee71d653c2cc6a26dd/_pickle.c/vul/before/9.json",
  "func": "static PyMemoEntry *\n_PyMemoTable_Lookup(PyMemoTable *self, PyObject *key)\n{\n    size_t i;\n    size_t perturb;\n    size_t mask = self->mt_mask;\n    PyMemoEntry *table = self->mt_table;\n    PyMemoEntry *entry;\n    Py_hash_t hash = (Py_hash_t)key >> 3;\n\n    i = hash & mask;\n    entry = &table[i];\n    if (entry->me_key == NULL || entry->me_key == key)\n        return entry;\n\n    for (perturb = hash; ; perturb >>= PERTURB_SHIFT) {\n        i = (i << 2) + i + perturb + 1;\n        entry = &table[i & mask];\n        if (entry->me_key == NULL || entry->me_key == key)\n            return entry;\n    }\n    Py_UNREACHABLE();\n}",
  "abstract_func": "static PyMemoEntry *\n_PyMemoTable_Lookup(PyMemoTable *VAR_0, PyObject *VAR_1)\n{\n    size_t VAR_2;\n    size_t VAR_3;\n    size_t VAR_4 = VAR_0->mt_mask;\n    PyMemoEntry *VAR_5 = VAR_0->mt_table;\n    PyMemoEntry *VAR_6;\n    Py_hash_t VAR_7 = (Py_hash_t)VAR_1 >> 3;\n\n    VAR_2 = VAR_7 & VAR_4;\n    VAR_6 = &VAR_5[VAR_2];\n    if (VAR_6->me_key == NULL || VAR_6->me_key == VAR_1)\n        return VAR_6;\n\n    for (VAR_3 = VAR_7; ; VAR_3 >>= VAR_8) {\n        VAR_2 = (VAR_2 << 2) + VAR_2 + VAR_3 + 1;\n        VAR_6 = &VAR_5[VAR_2 & VAR_4];\n        if (VAR_6->me_key == NULL || VAR_6->me_key == VAR_1)\n            return VAR_6;\n    }\n    Py_UNREACHABLE();\n}",
  "func_graph_path": "python/cpython/a4ae828ee416a66d8c7bf5ee71d653c2cc6a26dd/_pickle.c/vul/after/9.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -3,7 +3,7 @@\n {\n     size_t i;\n     size_t perturb;\n-    size_t mask = (size_t)self->mt_mask;\n+    size_t mask = self->mt_mask;\n     PyMemoEntry *table = self->mt_table;\n     PyMemoEntry *entry;\n     Py_hash_t hash = (Py_hash_t)key >> 3;",
  "diff_line_info": {
    "deleted_lines": [
      "    size_t mask = (size_t)self->mt_mask;"
    ],
    "added_lines": [
      "    size_t mask = self->mt_mask;"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/python/cpython/pull/9261",
  "description": {
    "pr_info": {
      "title": "bpo-34656: Avoid relying on signed overflow in _pickle memos.",
      "number": 9261
    },
    "comment": [
      "<!--\r\nThanks for your contribution!\r\nPlease read this comment in its entirety. It's quite important.\r\n\r\n# Pull Request title\r\n\r\nIt should be in the following format:\r\n\r\n```\r\nbpo-NNNN: Summary of the changes made\r\n```\r\n\r\nWhere: bpo-NNNN refers to the issue number in the https://bugs.python.org.\r\n\r\nMost PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue.\r\n\r\n# Backport Pull Request title\r\n\r\nIf this is a backport PR (PR made against branches other than `master`),\r\nplease ensure that the PR title is in the following format:\r\n\r\n```\r\n[X.Y] <title from the original PR> (GH-NNNN)\r\n```\r\n\r\nWhere: [X.Y] is the branch name, e.g. [3.6].\r\n\r\nGH-NNNN refers to the PR number from `master`.\r\n\r\n-->\r\n\n\n<!-- issue-number: [bpo-1621](https://www.bugs.python.org/issue1621) -->\nhttps://bugs.python.org/issue1621\n<!-- /issue-number -->\n",
      "Thanks @benjaminp for the PR üåÆüéâ.. I'm working now to backport this PR to: 3.6, 3.7.\nüêçüçí‚õèü§ñ ",
      "[GH-9465](https://github.com/python/cpython/pull/9465) is a backport of this pull request to the [3.7 branch](https://github.com/python/cpython/tree/3.7).",
      "[GH-9466](https://github.com/python/cpython/pull/9466) is a backport of this pull request to the [3.6 branch](https://github.com/python/cpython/tree/3.6)."
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 0.9\n\n**Step-by-Step Explanation:**\n\n1. **Input Analysis:** The commit message addresses a signed overflow issue in _pickle memos. The code diff removes an explicit size_t cast, suggesting a fix for integer overflow handling.\n\n2. **Consistency Check:** The commit message's focus on avoiding signed overflow aligns with the code change, indicating that the fix targets a potential security issue.\n\n3. **Purpose Evaluation:** The change directly affects core logic by correcting how variables are handled, preventing overflow that could lead to security issues.\n\n4. **Security Assessment:** Signed overflows can lead to buffer overflows or undefined behavior, which are security risks. The fix corrects this, making it a security fix.\n\n5. **Confidence Scoring:** High confidence because the issue is clearly related to a vulnerability, though no CVE is referenced. The fix is direct and addresses the root cause.\n\n**Final Answer:** **Security Vulnerability Fix** with confidence **0.9**."
}