{
  "cve_id": "CVE-2023-50254",
  "cwe_ids": [
    "CWE-22"
  ],
  "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H",
  "cvss_is_v3": true,
  "repo_name": "linuxdeepin/deepin-reader",
  "commit_msg": "fix: deal with docx document format\n\ndeal with docx document format\n\nBug: https://pms.uniontech.com/bug-view-232871.html\nLog: deal with docx document format",
  "commit_hash": "c192fd20a2fe4003e0581c3164489a89e06420c6",
  "git_url": "https://github.com/linuxdeepin/deepin-reader/commit/c192fd20a2fe4003e0581c3164489a89e06420c6",
  "file_path": "reader/document/Model.cpp",
  "func_name": "deepin_reader::DocumentFactory::getDocument",
  "func_before": "deepin_reader::Document *deepin_reader::DocumentFactory::getDocument(const int &fileType,\n                                                                     const QString &filePath,\n                                                                     const QString &convertedFileDir,\n                                                                     const QString &password,\n                                                                     QProcess **pprocess,\n                                                                     deepin_reader::Document::Error &error)\n{\n    deepin_reader::Document *document = nullptr;\n\n    qDebug() << \"需要转换的文档: \" << filePath;\n    if (Dr::PDF == fileType) {\n        qDebug() << \"当前文档类型为: PDF\";\n        document = deepin_reader::PDFDocument::loadDocument(filePath, password, error);\n    } else if (Dr::DJVU == fileType) {\n        qDebug() << \"当前文档类型为: DJVU\";\n        document = deepin_reader::DjVuDocument::loadDocument(filePath, error);\n    } else if (Dr::DOCX == fileType) {\n        qDebug() << \"当前文档类型为: DOCX\";\n        if (nullptr == pprocess) {\n            error = deepin_reader::Document::ConvertFailed;\n            return nullptr;\n        }\n        QString targetDoc = convertedFileDir + \"/temp.docx\";\n        QString tmpHtmlFilePath = convertedFileDir + \"/word/temp.html\";\n        QString realFilePath = convertedFileDir + \"/temp.pdf\";\n\n        QFile file(filePath);\n        if (!file.copy(targetDoc)) {\n            qInfo() << QString(\"copy %1 failed.\").arg(filePath);\n            error = deepin_reader::Document::ConvertFailed;\n            return nullptr;\n        }\n\n        //解压的目的是为了让资源文件可以被转换的时候使用到，防止转换后丢失图片等媒体信息\n        QProcess decompressor;\n        *pprocess = &decompressor;\n        decompressor.setWorkingDirectory(convertedFileDir);\n        qDebug() << \"正在解压文档...\" << targetDoc;\n        QString unzipCommand = \"unzip \" + targetDoc;\n        qDebug() << \"执行命令: \" << unzipCommand;\n        decompressor.start(unzipCommand);\n        if (!decompressor.waitForStarted()) {\n            qInfo() << \"start unzip failed\";\n            error = deepin_reader::Document::ConvertFailed;\n            *pprocess = nullptr;\n            return nullptr;\n        }\n        if (!decompressor.waitForFinished()) {\n            qInfo() << \"unzip failed\";\n            error = deepin_reader::Document::ConvertFailed;\n            *pprocess = nullptr;\n            return nullptr;\n        }\n        if (!QDir(convertedFileDir + \"/word\").exists()) {\n            qInfo() << \"unzip failed! \" << (convertedFileDir + \"/word\") << \"is not exists!\";\n            error = deepin_reader::Document::ConvertFailed;\n            if (!(QProcess::CrashExit == decompressor.exitStatus() && 9 == decompressor.exitCode())) {\n                *pprocess = nullptr;\n            }\n            return nullptr;\n        }\n        qDebug() << \"文档解压完成\";\n\n        // docx -> html\n        QProcess converter;\n        *pprocess = &converter;\n        converter.setWorkingDirectory(convertedFileDir + \"/word\");\n        qDebug() << \"正在将docx文档转换成html...\" << tmpHtmlFilePath;\n        QString pandocCommand = \"pandoc \" +  targetDoc + \" -o \" + tmpHtmlFilePath;\n        qDebug() << \"执行命令: \" << pandocCommand;\n        converter.start(pandocCommand);\n        if (!converter.waitForStarted()) {\n            qInfo() << \"start pandoc failed\";\n            error = deepin_reader::Document::ConvertFailed;\n            *pprocess = nullptr;\n            return nullptr;\n        }\n        if (!converter.waitForFinished()) {\n            qInfo() << \"pandoc failed\";\n            error = deepin_reader::Document::ConvertFailed;\n            *pprocess = nullptr;\n            return nullptr;\n        }\n        QFile tmpHtmlFile(tmpHtmlFilePath);\n        if (!tmpHtmlFile.exists()) {\n            qInfo() <<  \"pandoc failed! \" << tmpHtmlFilePath << \" doesn't exist\";\n            error = deepin_reader::Document::ConvertFailed;\n            // 转换过程中关闭应用，docsheet被释放，对应的*pprocess已不存在\n            if (!(QProcess::CrashExit == converter.exitStatus() && 9 == converter.exitCode())) {\n                *pprocess = nullptr;\n            }\n            return nullptr;\n        }\n        qDebug() << \"docx转html完成\";\n\n        // html -> pdf\n        QProcess converter2;\n        *pprocess = &converter2;\n        converter2.setWorkingDirectory(convertedFileDir + \"/word\");\n        qDebug() << \"正在将html转换成pdf...\" << realFilePath;\n        QString htmltopdfCommand = \"/usr/lib/deepin-reader/htmltopdf \" +  tmpHtmlFilePath + \" \" + realFilePath;\n        qDebug() << \"执行命令: \" << htmltopdfCommand;\n        converter2.start(htmltopdfCommand);\n        if (!converter2.waitForStarted()) {\n            qInfo() << \"start htmltopdf failed\";\n            error = deepin_reader::Document::ConvertFailed;\n            *pprocess = nullptr;\n            return nullptr;\n        }\n        if (!converter2.waitForFinished()) {\n            qInfo() << \"htmltopdf failed\";\n            error = deepin_reader::Document::ConvertFailed;\n            *pprocess = nullptr;\n            return nullptr;\n        }\n\n        QFile realFile(realFilePath);\n        if (!realFile.exists()) {\n            qInfo() <<  \"htmltopdf failed! \" << realFilePath << \" doesn't exist\";\n            error = deepin_reader::Document::ConvertFailed;\n            if (!(QProcess::CrashExit == converter.exitStatus() && 9 == converter.exitCode())) {\n                *pprocess = nullptr;\n            }\n            return nullptr;\n        }\n        qDebug() << \"html转pdf完成\";\n\n        *pprocess = nullptr;\n        document = deepin_reader::PDFDocument::loadDocument(realFilePath, password, error);\n    }\n\n    return document;\n}",
  "abstract_func_before": "deepin_reader::Document *deepin_reader::DocumentFactory::getDocument(const int &VAR_0,\n                                                                     const QString &VAR_1,\n                                                                     const QString &VAR_2,\n                                                                     const QString &VAR_3,\n                                                                     QProcess **VAR_4,\n                                                                     deepin_reader::Document::Error &VAR_5)\n{\n    deepin_reader::Document *VAR_6 = nullptr;\n\n    qDebug() << \"需要转换的文档: \" << filePath;\n$$$$$$$$    if (Dr::PDF == VAR_0) {\n        qDebug() << \"当前文档类型为: PDF\";\n        VAR_6 = deepin_reader::PDFDocument::loadDocument(VAR_1, VAR_3, VAR_5);\n    } else if (Dr::DJVU == VAR_0) {\n        qDebug() << \"当前文档类型为: DJVU\";\n        VAR_6 = deepin_reader::DjVuDocument::loadDocument(VAR_1, VAR_5);\n    } else if (Dr::DOCX == VAR_0) {\n        qDebug() << \"当前文档类型为: DOCX\";\n        if (nullptr == VAR_4) {\n            VAR_5 = deepin_reader::Document::ConvertFailed;\n            return nullptr;\n        }\n        QString VAR_7 = VAR_2 + \"/temp.docx\";\n        QString VAR_8 = VAR_2 + \"/word/temp.html\";\n        QString VAR_9 = VAR_2 + \"/temp.pdf\";\n\n        QFile file(filePath);\n        if (!VAR_10.copy(VAR_7)) {\n            qInfo() << QString(\"copy %1 failed.\").arg(filePath);\n            VAR_5 = deepin_reader::Document::ConvertFailed;\n            return nullptr;\n        }\n\n        /* COMMENT_0 */\n        QProcess VAR_11;\n        *VAR_4 = &VAR_11;\n        VAR_11.setWorkingDirectory(VAR_2);\n        qDebug() << \"正在解压文档...\" << targetDoc;\n$$$$$$$$        QString VAR_12 = \"unzip \" + VAR_7;\n        qDebug() << \"执行命令: \" << unzipCom$$$$mand;\n$$$$        VAR_11.start(VAR_12);\n        if (!VAR_11.waitForStarted()) {\n            qInfo() << \"start unzip failed\";\n            VAR_5 = deepin_reader::Document::ConvertFailed;\n            *VAR_4 = nullptr;\n            return nullptr;\n        }\n        if (!VAR_11.waitForFinished()) {\n            qInfo() << \"unzip failed\";\n            VAR_5 = deepin_reader::Document::ConvertFailed;\n            *VAR_4 = nullptr;\n            return nullptr;\n        }\n        if (!QDir(VAR_2 + \"/word\").exists()) {\n            qInfo() << \"unzip failed! \" << (VAR_2 + \"/word\") << \"is not exists!\";\n            VAR_5 = deepin_reader::Document::ConvertFailed;\n            if (!(QProcess::CrashExit == VAR_11.exitStatus() && 9 == VAR_11.exitCode())) {\n                *VAR_4 = nullptr;\n            }\n            return nullptr;\n        }\n        qDebug() << \"文档解压完成\";\n\n        /* COMMENT_1 */\n        QProcess VAR_13;\n        *VAR_4 = &VAR_13;\n        VAR_13.setWorkingDirectory(VAR_2 + \"/word\");\n        qDebug() << \"正在将docx文档转换成html...\" << tmpHtmlFilePath;$$$$\n$$$$        QString VAR_14 = \"pandoc \" +  VAR_7 + \" -o \" + VAR_8;\n        qDebug() << \"执行命令: \" << pandocCo$$$$mmand;\n$$$$        VAR_13.start(VAR_14);\n        if (!VAR_13.waitForStarted()) {\n            qInfo() << \"start pandoc failed\";\n            VAR_5 = deepin_reader::Document::ConvertFailed;\n            *VAR_4 = nullptr;\n            return nullptr;\n        }\n        if (!VAR_13.waitForFinished()) {\n            qInfo() << \"pandoc failed\";\n            VAR_5 = deepin_reader::Document::ConvertFailed;\n            *VAR_4 = nullptr;\n            return nullptr;\n        }\n        QFile tmpHtmlFile(tmpHtmlFilePath);\n        if (!VAR_15.exists()) {\n            qInfo() <<  \"pandoc failed! \" << tmpHtmlFilePath << \" doesn't exist\";\n            VAR_5 = deepin_reader::Document::ConvertFailed;\n            /* COMMENT_2 */\n            if (!(QProcess::CrashExit == VAR_13.exitStatus() && 9 == VAR_13.exitCode())) {\n                *VAR_4 = nullptr;\n            }\n            return nullptr;\n        }\n        qDebug() << \"docx转html完成\";\n\n        /* COMMENT_3 */\n        QProcess VAR_16;\n        *VAR_4 = &VAR_16;\n        VAR_16.setWorkingDirectory(VAR_2 + \"/word\");\n        qDebug() << \"正在将html转换成pdf...\" << realFilePath$$$$;\n$$$$        QString VAR_17 = \"/usr/lib/deepin-reader/htmltopdf \" +  tmpHtmlFilePath + \" \" + VAR_9;\n        qDebug() << \"执行命令: \" << htmltopd$$$$fCommand;\n$$$$        VAR_16.start(VAR_17);\n        if (!VAR_16.waitForStarted()) {\n            qInfo() << \"start htmltopdf failed\";\n            VAR_5 = deepin_reader::Document::ConvertFailed;\n            *VAR_4 = nullptr;\n            return nullptr;\n        }\n        if (!VAR_16.waitForFinished()) {\n            qInfo() << \"htmltopdf failed\";\n            VAR_5 = deepin_reader::Document::ConvertFailed;\n            *VAR_4 = nullptr;\n            return nullptr;\n        }\n\n        QFile realFile(realFilePath);\n        if (!VAR_18.exists()) {\n            qInfo() <<  \"htmltopdf failed! \" << realFilePath << \" doesn't exist\";\n            VAR_5 = deepin_reader::Document::ConvertFailed;\n            if (!(QProcess::CrashExit == VAR_13.exitStatus() && 9 == VAR_13.exitCode())) {\n                *VAR_4 = nullptr;\n            }\n            return nullptr;\n        }\n        qDebug() << \"html转pdf完成\";\n\n        *VAR_4 = nullptr;\n        VAR_6 = deepin_reader::PDFDocument::loadDocument(realFilePath, VAR_3, VAR_5);\n    }\n\n    return VAR_6;\n}",
  "func_graph_path_before": "linuxdeepin/deepin-reader/c192fd20a2fe4003e0581c3164489a89e06420c6/Model.cpp/vul/before/0.json",
  "func": "deepin_reader::Document *deepin_reader::DocumentFactory::getDocument(const int &fileType,\n                                                                     const QString &filePath,\n                                                                     const QString &convertedFileDir,\n                                                                     const QString &password,\n                                                                     QProcess **pprocess,\n                                                                     deepin_reader::Document::Error &error)\n{\n    deepin_reader::Document *document = nullptr;\n\n    qDebug() << \"需要转换的文档: \" << filePath;\n    if (Dr::PDF == fileType) {\n        qDebug() << \"当前文档类型为: PDF\";\n        document = deepin_reader::PDFDocument::loadDocument(filePath, password, error);\n    } else if (Dr::DJVU == fileType) {\n        qDebug() << \"当前文档类型为: DJVU\";\n        document = deepin_reader::DjVuDocument::loadDocument(filePath, error);\n    } else if (Dr::DOCX == fileType) {\n        qDebug() << \"当前文档类型为: DOCX\";\n        if (nullptr == pprocess) {\n            error = deepin_reader::Document::ConvertFailed;\n            return nullptr;\n        }\n        QString targetDoc = convertedFileDir + \"/temp.docx\";\n        QString tmpHtmlFilePath = convertedFileDir + \"/word/temp.html\";\n        QString realFilePath = convertedFileDir + \"/temp.pdf\";\n\n        QFile file(filePath);\n        if (!file.copy(targetDoc)) {\n            qInfo() << QString(\"copy %1 failed.\").arg(filePath);\n            error = deepin_reader::Document::ConvertFailed;\n            return nullptr;\n        }\n\n        //解压的目的是为了让资源文件可以被转换的时候使用到，防止转换后丢失图片等媒体信息\n        QProcess decompressor;\n        *pprocess = &decompressor;\n        decompressor.setWorkingDirectory(convertedFileDir);\n        qDebug() << \"正在解压文档...\" << targetDoc;\n        QString unzipCommand = \"unzip \" + targetDoc;\n        qDebug() << \"执行命令: \" << unzipCommand;\n        decompressor.start(unzipCommand);\n        if (!decompressor.waitForStarted()) {\n            qInfo() << \"start unzip failed\";\n            error = deepin_reader::Document::ConvertFailed;\n            *pprocess = nullptr;\n            return nullptr;\n        }\n        if (!decompressor.waitForFinished()) {\n            qInfo() << \"unzip failed\";\n            error = deepin_reader::Document::ConvertFailed;\n            *pprocess = nullptr;\n            return nullptr;\n        }\n        if (!QDir(convertedFileDir + \"/word\").exists()) {\n            qInfo() << \"unzip failed! \" << (convertedFileDir + \"/word\") << \"is not exists!\";\n            error = deepin_reader::Document::ConvertFailed;\n            if (!(QProcess::CrashExit == decompressor.exitStatus() && 9 == decompressor.exitCode())) {\n                *pprocess = nullptr;\n            }\n            return nullptr;\n        }\n        qDebug() << \"文档解压完成\";\n        QTemporaryFile tmpFile(convertedFileDir + \"/word/\" + QCoreApplication::applicationName() + \"_XXXXXX.html\");\n        if( tmpFile.open()) { //fix 232871\n             tmpHtmlFilePath = tmpFile.fileName(); // returns the unique file name\n         }\n        // docx -> html\n        QProcess converter;\n        *pprocess = &converter;\n        converter.setWorkingDirectory(convertedFileDir + \"/word\");\n        qDebug() << \"正在将docx文档转换成html...\" << tmpHtmlFilePath;\n        QString pandocCommand = \"pandoc \" +  targetDoc + \" -o \" + tmpHtmlFilePath;\n        qDebug() << \"执行命令: \" << pandocCommand;\n        converter.start(pandocCommand);\n        if (!converter.waitForStarted()) {\n            qInfo() << \"start pandoc failed\";\n            error = deepin_reader::Document::ConvertFailed;\n            *pprocess = nullptr;\n            return nullptr;\n        }\n        if (!converter.waitForFinished()) {\n            qInfo() << \"pandoc failed\";\n            error = deepin_reader::Document::ConvertFailed;\n            *pprocess = nullptr;\n            return nullptr;\n        }\n        QFile tmpHtmlFile(tmpHtmlFilePath);\n        if (!tmpHtmlFile.exists()) {\n            qInfo() <<  \"pandoc failed! \" << tmpHtmlFilePath << \" doesn't exist\";\n            error = deepin_reader::Document::ConvertFailed;\n            // 转换过程中关闭应用，docsheet被释放，对应的*pprocess已不存在\n            if (!(QProcess::CrashExit == converter.exitStatus() && 9 == converter.exitCode())) {\n                *pprocess = nullptr;\n            }\n            return nullptr;\n        }\n        qDebug() << \"docx转html完成\";\n\n        // html -> pdf\n        QProcess converter2;\n        *pprocess = &converter2;\n        converter2.setWorkingDirectory(convertedFileDir + \"/word\");\n        qDebug() << \"正在将html转换成pdf...\" << realFilePath;\n        QString htmltopdfCommand = \"/usr/lib/deepin-reader/htmltopdf \" +  tmpHtmlFilePath + \" \" + realFilePath;\n        qDebug() << \"执行命令: \" << htmltopdfCommand;\n        converter2.start(htmltopdfCommand);\n        if (!converter2.waitForStarted()) {\n            qInfo() << \"start htmltopdf failed\";\n            error = deepin_reader::Document::ConvertFailed;\n            *pprocess = nullptr;\n            return nullptr;\n        }\n        if (!converter2.waitForFinished()) {\n            qInfo() << \"htmltopdf failed\";\n            error = deepin_reader::Document::ConvertFailed;\n            *pprocess = nullptr;\n            return nullptr;\n        }\n\n        QFile realFile(realFilePath);\n        if (!realFile.exists()) {\n            qInfo() <<  \"htmltopdf failed! \" << realFilePath << \" doesn't exist\";\n            error = deepin_reader::Document::ConvertFailed;\n            if (!(QProcess::CrashExit == converter.exitStatus() && 9 == converter.exitCode())) {\n                *pprocess = nullptr;\n            }\n            return nullptr;\n        }\n        qDebug() << \"html转pdf完成\";\n\n        *pprocess = nullptr;\n        document = deepin_reader::PDFDocument::loadDocument(realFilePath, password, error);\n    }\n\n    return document;\n}",
  "abstract_func": "deepin_reader::Document *deepin_reader::DocumentFactory::getDocument(const int &VAR_0,\n                                                                     const QString &VAR_1,\n                                                                     const QString &VAR_2,\n                                                                     const QString &VAR_3,\n                                                                     QProcess **VAR_4,\n                                                                     deepin_reader::Document::Error &VAR_5)\n{\n    deepin_reader::Document *VAR_6 = nullptr;\n\n    qDebug() << \"需要转换的文档: \" << filePath;\n$$$$$$$$    if (Dr::PDF == VAR_0) {\n        qDebug() << \"当前文档类型为: PDF\";\n        VAR_6 = deepin_reader::PDFDocument::loadDocument(VAR_1, VAR_3, VAR_5);\n    } else if (Dr::DJVU == VAR_0) {\n        qDebug() << \"当前文档类型为: DJVU\";\n        VAR_6 = deepin_reader::DjVuDocument::loadDocument(VAR_1, VAR_5);\n    } else if (Dr::DOCX == VAR_0) {\n        qDebug() << \"当前文档类型为: DOCX\";\n        if (nullptr == VAR_4) {\n            VAR_5 = deepin_reader::Document::ConvertFailed;\n            return nullptr;\n        }\n        QString VAR_7 = VAR_2 + \"/temp.docx\";\n        QString VAR_8 = VAR_2 + \"/word/temp.html\";\n        QString VAR_9 = VAR_2 + \"/temp.pdf\";\n\n        QFile file(filePath);\n        if (!VAR_10.copy(VAR_7)) {\n            qInfo() << QString(\"copy %1 failed.\").arg(filePath);\n            VAR_5 = deepin_reader::Document::ConvertFailed;\n            return nullptr;\n        }\n\n        /* COMMENT_0 */\n        QProcess VAR_11;\n        *VAR_4 = &VAR_11;\n        VAR_11.setWorkingDirectory(VAR_2);\n        qDebug() << \"正在解压文档...\" << targetDoc;\n$$$$$$$$        QString VAR_12 = \"unzip \" + VAR_7;\n        qDebug() << \"执行命令: \" << unzipCom$$$$mand;\n$$$$        VAR_11.start(VAR_12);\n        if (!VAR_11.waitForStarted()) {\n            qInfo() << \"start unzip failed\";\n            VAR_5 = deepin_reader::Document::ConvertFailed;\n            *VAR_4 = nullptr;\n            return nullptr;\n        }\n        if (!VAR_11.waitForFinished()) {\n            qInfo() << \"unzip failed\";\n            VAR_5 = deepin_reader::Document::ConvertFailed;\n            *VAR_4 = nullptr;\n            return nullptr;\n        }\n        if (!QDir(VAR_2 + \"/word\").exists()) {\n            qInfo() << \"unzip failed! \" << (VAR_2 + \"/word\") << \"is not exists!\";\n            VAR_5 = deepin_reader::Document::ConvertFailed;\n            if (!(QProcess::CrashExit == VAR_11.exitStatus() && 9 == VAR_11.exitCode())) {\n                *VAR_4 = nullptr;\n            }\n            return nullptr;\n        }\n        qDebug() << \"文档解压完成\";\n        QTemporaryFile VAR_13(VAR_2 + \"/word/\" + QCoreApplication::applicationName() + \"_XXXXXX.html\");\n        if( VAR_13.open()) { /* COMMENT_1 */\n             VAR_8 = VAR_13.fileName(); /* COMMENT_2 */\n         }\n        /* COMMENT_3 */\n        QProcess VAR_14;\n        *VAR_4 = &VAR_14;\n        VAR_14.setWorkingDirectory(VAR_2 + \"/word\");\n        qDebug() << \"正在将docx文档转换成html...\" << tmpHtmlFilePath;$$$$\n$$$$        QString VAR_15 = \"pandoc \" +  VAR_7 + \" -o \" + VAR_8;\n        qDebug() << \"执行命令: \" << pandocCo$$$$mmand;\n$$$$        VAR_14.start(VAR_15);\n        if (!VAR_14.waitForStarted()) {\n            qInfo() << \"start pandoc failed\";\n            VAR_5 = deepin_reader::Document::ConvertFailed;\n            *VAR_4 = nullptr;\n            return nullptr;\n        }\n        if (!VAR_14.waitForFinished()) {\n            qInfo() << \"pandoc failed\";\n            VAR_5 = deepin_reader::Document::ConvertFailed;\n            *VAR_4 = nullptr;\n            return nullptr;\n        }\n        QFile tmpHtmlFile(tmpHtmlFilePath);\n        if (!VAR_16.exists()) {\n            qInfo() <<  \"pandoc failed! \" << tmpHtmlFilePath << \" doesn't exist\";\n            VAR_5 = deepin_reader::Document::ConvertFailed;\n            /* COMMENT_4 */\n            if (!(QProcess::CrashExit == VAR_14.exitStatus() && 9 == VAR_14.exitCode())) {\n                *VAR_4 = nullptr;\n            }\n            return nullptr;\n        }\n        qDebug() << \"docx转html完成\";\n\n        /* COMMENT_5 */\n        QProcess VAR_17;\n        *VAR_4 = &VAR_17;\n        VAR_17.setWorkingDirectory(VAR_2 + \"/word\");\n        qDebug() << \"正在将html转换成pdf...\" << realFilePath$$$$;\n$$$$        QString VAR_18 = \"/usr/lib/deepin-reader/htmltopdf \" +  tmpHtmlFilePath + \" \" + VAR_9;\n        qDebug() << \"执行命令: \" << htmltopd$$$$fCommand;\n$$$$        VAR_17.start(VAR_18);\n        if (!VAR_17.waitForStarted()) {\n            qInfo() << \"start htmltopdf failed\";\n            VAR_5 = deepin_reader::Document::ConvertFailed;\n            *VAR_4 = nullptr;\n            return nullptr;\n        }\n        if (!VAR_17.waitForFinished()) {\n            qInfo() << \"htmltopdf failed\";\n            VAR_5 = deepin_reader::Document::ConvertFailed;\n            *VAR_4 = nullptr;\n            return nullptr;\n        }\n\n        QFile realFile(realFilePath);\n        if (!VAR_19.exists()) {\n            qInfo() <<  \"htmltopdf failed! \" << realFilePath << \" doesn't exist\";\n            VAR_5 = deepin_reader::Document::ConvertFailed;\n            if (!(QProcess::CrashExit == VAR_14.exitStatus() && 9 == VAR_14.exitCode())) {\n                *VAR_4 = nullptr;\n            }\n            return nullptr;\n        }\n        qDebug() << \"html转pdf完成\";\n\n        *VAR_4 = nullptr;\n        VAR_6 = deepin_reader::PDFDocument::loadDocument(realFilePath, VAR_3, VAR_5);\n    }\n\n    return VAR_6;\n}",
  "func_graph_path": "linuxdeepin/deepin-reader/c192fd20a2fe4003e0581c3164489a89e06420c6/Model.cpp/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -60,7 +60,10 @@\n             return nullptr;\n         }\n         qDebug() << \"文档解压完成\";\n-\n+        QTemporaryFile tmpFile(convertedFileDir + \"/word/\" + QCoreApplication::applicationName() + \"_XXXXXX.html\");\n+        if( tmpFile.open()) { //fix 232871\n+             tmpHtmlFilePath = tmpFile.fileName(); // returns the unique file name\n+         }\n         // docx -> html\n         QProcess converter;\n         *pprocess = &converter;",
  "diff_line_info": {
    "deleted_lines": [
      ""
    ],
    "added_lines": [
      "        QTemporaryFile tmpFile(convertedFileDir + \"/word/\" + QCoreApplication::applicationName() + \"_XXXXXX.html\");",
      "        if( tmpFile.open()) { //fix 232871",
      "             tmpHtmlFilePath = tmpFile.fileName(); // returns the unique file name",
      "         }"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/linuxdeepin/deepin-reader/pull/89",
  "description": {
    "pr_info": {
      "title": "fix: deal with docx document format",
      "number": 89
    },
    "comment": [
      "deal with docx document format\r\n\r\nBug: https://pms.uniontech.com/bug-view-232871.html\r\nLog: deal with docx document format",
      "[是否满足兼容性要求] Y\r\n[是否满足commit提交规范] Y\r\n[是否满足编码规范] Y\r\n[Review结论] Pass\r\n[Fail原因] N/A",
      "/merge"
    ]
  },
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "**Final Classification:** Defect Remediation & Feature Upgrades; **Confidence:** 0.95"
}