{
  "cve_id": "CVE-2020-12762",
  "cwe_ids": [
    "CWE-190",
    "CWE-787"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "rsyslog/libfastjson",
  "commit_msg": "Fix CVE-2020-12762\n\nreference: https://github.com/json-c/json-c/pull/592/files\n\nI reproduce this CVE using the code from https://github.com/json-c/json-c/pull/592\n\nAnd it fix it and no more segmentation fault",
  "commit_hash": "f51fcd59a8bbeb60eaf8ae0e398556be2fa3317a",
  "git_url": "https://github.com/rsyslog/libfastjson/commit/f51fcd59a8bbeb60eaf8ae0e398556be2fa3317a",
  "file_path": "printbuf.c",
  "func_name": "printbuf_memappend",
  "func_before": "int printbuf_memappend(struct printbuf *p, const char *buf, int size)\n{\n\tif (p->size <= p->bpos + size + 1) {\n\t\tif (printbuf_extend(p, p->bpos + size + 1) < 0)\n\t\t\treturn -1;\n\t}\n\tif(size > 1)\n\t\tmemcpy(p->buf + p->bpos, buf, size);\n\telse\n\t\tp->buf[p->bpos]= *buf;\n\tp->bpos += size;\n\tp->buf[p->bpos]= '\\0';\n\treturn size;\n}",
  "abstract_func_before": "int printbuf_memappend(struct printbuf *VAR_0, const char *VAR_1, int VAR_2)\n{\n\tif (VAR_0->size <= VAR_0->bpos + VAR_2 + 1) {\n\t\tif (printbuf_extend(VAR_0, VAR_0->bpos + VAR_2 + 1) < 0)\n\t\t\treturn -1;\n\t}\n\tif(VAR_2 > 1)\n\t\tmemcpy(VAR_0->buf + VAR_0->bpos, VAR_1, VAR_2);\n\telse\n\t\tVAR_0->buf[VAR_0->bpos]= *VAR_1;\n\tVAR_0->bpos += VAR_2;\n\tVAR_0->buf[VAR_0->bpos]= '\\0';\n\treturn VAR_2;\n}",
  "func_graph_path_before": "rsyslog/libfastjson/f51fcd59a8bbeb60eaf8ae0e398556be2fa3317a/printbuf.c/vul/before/1.json",
  "func": "int printbuf_memappend(struct printbuf *p, const char *buf, int size)\n{\n\t/* Prevent signed integer overflows with large buffers. */\n\tif (size > INT_MAX - p->bpos - 1)\n\t\treturn -1;\n\tif (p->size <= p->bpos + size + 1) {\n\t\tif (printbuf_extend(p, p->bpos + size + 1) < 0)\n\t\t\treturn -1;\n\t}\n\tif(size > 1)\n\t\tmemcpy(p->buf + p->bpos, buf, size);\n\telse\n\t\tp->buf[p->bpos]= *buf;\n\tp->bpos += size;\n\tp->buf[p->bpos]= '\\0';\n\treturn size;\n}",
  "abstract_func": "int printbuf_memappend(struct printbuf *VAR_0, const char *VAR_1, int VAR_2)\n{\n\t/* COMMENT_0 */\n\tif (VAR_2 > VAR_3 - VAR_0->bpos - 1)\n\t\treturn -1;\n\tif (VAR_0->size <= VAR_0->bpos + VAR_2 + 1) {\n\t\tif (printbuf_extend(VAR_0, VAR_0->bpos + VAR_2 + 1) < 0)\n\t\t\treturn -1;\n\t}\n\tif(VAR_2 > 1)\n\t\tmemcpy(VAR_0->buf + VAR_0->bpos, VAR_1, VAR_2);\n\telse\n\t\tVAR_0->buf[VAR_0->bpos]= *VAR_1;\n\tVAR_0->bpos += VAR_2;\n\tVAR_0->buf[VAR_0->bpos]= '\\0';\n\treturn VAR_2;\n}",
  "func_graph_path": "rsyslog/libfastjson/f51fcd59a8bbeb60eaf8ae0e398556be2fa3317a/printbuf.c/vul/after/1.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,5 +1,8 @@\n int printbuf_memappend(struct printbuf *p, const char *buf, int size)\n {\n+\t/* Prevent signed integer overflows with large buffers. */\n+\tif (size > INT_MAX - p->bpos - 1)\n+\t\treturn -1;\n \tif (p->size <= p->bpos + size + 1) {\n \t\tif (printbuf_extend(p, p->bpos + size + 1) < 0)\n \t\t\treturn -1;",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "\t/* Prevent signed integer overflows with large buffers. */",
      "\tif (size > INT_MAX - p->bpos - 1)",
      "\t\treturn -1;"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/rsyslog/libfastjson/pull/166",
  "description": {
    "pr_info": {
      "title": "Fix CVE-2020-12762",
      "number": 166
    },
    "comment": [
      "#161 \r\n\r\nreference: https://github.com/json-c/json-c/pull/592/files\r\n\r\nI reproduce this CVE using the code from https://github.com/json-c/json-c/pull/592\r\n\r\nAnd it fix it and no more segmentation fault \r\n\r\n",
      "Here is how I reproduce the CVE and how I solve it.\r\n\r\nFirst we build libfastjson and install in the build directory.\r\n```sh\r\nmkdir build && cd build\r\n../configure --prefix=$(pwd)\r\nmake\r\nmake install\r\n```\r\n\r\nAnd then, we use this test_CVE-2020-12762.c to test the CVE.\r\n```c\r\n#include \"json_util.h\"\r\n#include <unistd.h>\r\nint main() {\r\n    fjson_object_from_fd(STDIN_FILENO);\r\n    return 0;\r\n}\r\n```\r\n\r\nThis is how to prepare and compile the file.\r\n```sh\r\ndd if=/dev/zero of=poc.json bs=1 count=1 seek=2147483647\r\ngcc ./test_CVE-2020-12762.c -o test -Llib -lfastjson -I include/libfastjson\r\nexport LD_LIBRARY_PATH=$(pwd)/lib\r\n(dd if=poc.json bs=4096; sleep 1; dd if=test.json bs=10) 2>/dev/null | ./test\r\n```\r\n\r\nAnd then the test file get a segmentation fault.\r\n![image](https://user-images.githubusercontent.com/45086632/225033488-b5b3fd54-9f66-451b-bfdf-ddaa6acf4623.png)\r\n\r\nAfter apply the patch I get from [json-c patch](https://github.com/json-c/json-c/pull/592/files)\r\n\r\nwe rebuild and test like this:\r\n```sh\r\nmake\r\nmake install\r\n\r\n(dd if=poc.json bs=4096; sleep 1; dd if=test.json bs=10) 2>/dev/null | ./test\r\necho $?\r\n```\r\n\r\nAnd there is no more segmentaion fault, the CVE is solved.\r\n![image](https://user-images.githubusercontent.com/45086632/225034005-a53c72ba-3ed8-4c82-aee7-33a41593254f.png)\r\n"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 1.0"
}