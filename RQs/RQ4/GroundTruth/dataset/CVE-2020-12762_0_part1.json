{
  "cve_id": "CVE-2020-12762",
  "cwe_ids": [
    "CWE-190",
    "CWE-787"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "rsyslog/libfastjson",
  "commit_msg": "Fix CVE-2020-12762\n\nreference: https://github.com/json-c/json-c/pull/592/files\n\nI reproduce this CVE using the code from https://github.com/json-c/json-c/pull/592\n\nAnd it fix it and no more segmentation fault",
  "commit_hash": "f51fcd59a8bbeb60eaf8ae0e398556be2fa3317a",
  "git_url": "https://github.com/rsyslog/libfastjson/commit/f51fcd59a8bbeb60eaf8ae0e398556be2fa3317a",
  "file_path": "printbuf.c",
  "func_name": "printbuf_extend",
  "func_before": "static int printbuf_extend(struct printbuf *p, int min_size)\n{\n\tchar *t;\n\tint new_size;\n\n\tif (p->size >= min_size)\n\t\treturn 0;\n\n\tnew_size = p->size * 2;\n\tif (new_size < min_size + 8)\n\t\tnew_size =  min_size + 8;\n#ifdef PRINTBUF_DEBUG\n\tMC_DEBUG(\"printbuf_memappend: realloc \"\n\t  \"bpos=%d min_size=%d old_size=%d new_size=%d\\n\",\n\t  p->bpos, min_size, p->size, new_size);\n#endif /* PRINTBUF_DEBUG */\n\tif(!(t = (char*)realloc(p->buf, new_size)))\n\t\treturn -1;\n\tp->size = new_size;\n\tp->buf = t;\n\treturn 0;\n}",
  "abstract_func_before": "static int printbuf_extend(struct printbuf *VAR_0, int VAR_1)\n{\n\tchar *VAR_2;\n\tint VAR_3;\n\n\tif (VAR_0->size >= VAR_1)\n\t\treturn 0;\n\n\tVAR_3 = VAR_0->size * 2;\n\tif (VAR_3 < VAR_1 + 8)\n\t\tVAR_3 =  VAR_1 + 8;\n#ifdef VAR_4\n\tMC_DEBUG(\"printbuf_memappend: realloc \"\n\t  \"bpos=%d min_size=%d old_size=%d new_size=%d\\n\",\n\t  VAR_0->bpos, VAR_1, VAR_0->size, VAR_3);\n#endif /* COMMENT_0 */\n\tif(!(VAR_2 = (char*)realloc(VAR_0->buf, VAR_3)))\n\t\treturn -1;\n\tVAR_0->size = VAR_3;\n\tVAR_0->buf = VAR_2;\n\treturn 0;\n}",
  "func_graph_path_before": "rsyslog/libfastjson/f51fcd59a8bbeb60eaf8ae0e398556be2fa3317a/printbuf.c/vul/before/0.json",
  "func": "static int printbuf_extend(struct printbuf *p, int min_size)\n{\n\tchar *t;\n\tint new_size;\n\n\tif (p->size >= min_size)\n\t\treturn 0;\n\n\t/* Prevent signed integer overflows with large buffers. */\n\tif (min_size > INT_MAX - 8)\n\t\treturn -1;\n\tif (p->size > INT_MAX / 2)\n\t\tnew_size = min_size + 8;\n\telse {\n\t\tnew_size = p->size * 2;\n\t\tif (new_size < min_size + 8)\n\t\t\tnew_size = min_size + 8;\n\t}\n#ifdef PRINTBUF_DEBUG\n\tMC_DEBUG(\"printbuf_memappend: realloc \"\n\t  \"bpos=%d min_size=%d old_size=%d new_size=%d\\n\",\n\t  p->bpos, min_size, p->size, new_size);\n#endif /* PRINTBUF_DEBUG */\n\tif(!(t = (char*)realloc(p->buf, new_size)))\n\t\treturn -1;\n\tp->size = new_size;\n\tp->buf = t;\n\treturn 0;\n}",
  "abstract_func": "static int printbuf_extend(struct printbuf *VAR_0, int VAR_1)\n{\n\tchar *VAR_2;\n\tint VAR_3;\n\n\tif (VAR_0->size >= VAR_1)\n\t\treturn 0;\n\n\t/* COMMENT_0 */\n\tif (VAR_1 > VAR_4 - 8)\n\t\treturn -1;\n\tif (VAR_0->size > VAR_4 / 2)\n\t\tVAR_3 = VAR_1 + 8;\n\telse {\n\t\tVAR_3 = VAR_0->size * 2;\n\t\tif (VAR_3 < VAR_1 + 8)\n\t\t\tVAR_3 = VAR_1 + 8;\n\t}\n#ifdef VAR_5\n\tMC_DEBUG(\"printbuf_memappend: realloc \"\n\t  \"bpos=%d min_size=%d old_size=%d new_size=%d\\n\",\n\t  VAR_0->bpos, VAR_1, VAR_0->size, VAR_3);\n#endif /* COMMENT_1 */\n\tif(!(VAR_2 = (char*)realloc(VAR_0->buf, VAR_3)))\n\t\treturn -1;\n\tVAR_0->size = VAR_3;\n\tVAR_0->buf = VAR_2;\n\treturn 0;\n}",
  "func_graph_path": "rsyslog/libfastjson/f51fcd59a8bbeb60eaf8ae0e398556be2fa3317a/printbuf.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -6,9 +6,16 @@\n \tif (p->size >= min_size)\n \t\treturn 0;\n \n-\tnew_size = p->size * 2;\n-\tif (new_size < min_size + 8)\n-\t\tnew_size =  min_size + 8;\n+\t/* Prevent signed integer overflows with large buffers. */\n+\tif (min_size > INT_MAX - 8)\n+\t\treturn -1;\n+\tif (p->size > INT_MAX / 2)\n+\t\tnew_size = min_size + 8;\n+\telse {\n+\t\tnew_size = p->size * 2;\n+\t\tif (new_size < min_size + 8)\n+\t\t\tnew_size = min_size + 8;\n+\t}\n #ifdef PRINTBUF_DEBUG\n \tMC_DEBUG(\"printbuf_memappend: realloc \"\n \t  \"bpos=%d min_size=%d old_size=%d new_size=%d\\n\",",
  "diff_line_info": {
    "deleted_lines": [
      "\tnew_size = p->size * 2;",
      "\tif (new_size < min_size + 8)",
      "\t\tnew_size =  min_size + 8;"
    ],
    "added_lines": [
      "\t/* Prevent signed integer overflows with large buffers. */",
      "\tif (min_size > INT_MAX - 8)",
      "\t\treturn -1;",
      "\tif (p->size > INT_MAX / 2)",
      "\t\tnew_size = min_size + 8;",
      "\telse {",
      "\t\tnew_size = p->size * 2;",
      "\t\tif (new_size < min_size + 8)",
      "\t\t\tnew_size = min_size + 8;",
      "\t}"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/rsyslog/libfastjson/pull/166",
  "description": {
    "pr_info": {
      "title": "Fix CVE-2020-12762",
      "number": 166
    },
    "comment": [
      "#161 \r\n\r\nreference: https://github.com/json-c/json-c/pull/592/files\r\n\r\nI reproduce this CVE using the code from https://github.com/json-c/json-c/pull/592\r\n\r\nAnd it fix it and no more segmentation fault \r\n\r\n",
      "Here is how I reproduce the CVE and how I solve it.\r\n\r\nFirst we build libfastjson and install in the build directory.\r\n```sh\r\nmkdir build && cd build\r\n../configure --prefix=$(pwd)\r\nmake\r\nmake install\r\n```\r\n\r\nAnd then, we use this test_CVE-2020-12762.c to test the CVE.\r\n```c\r\n#include \"json_util.h\"\r\n#include <unistd.h>\r\nint main() {\r\n    fjson_object_from_fd(STDIN_FILENO);\r\n    return 0;\r\n}\r\n```\r\n\r\nThis is how to prepare and compile the file.\r\n```sh\r\ndd if=/dev/zero of=poc.json bs=1 count=1 seek=2147483647\r\ngcc ./test_CVE-2020-12762.c -o test -Llib -lfastjson -I include/libfastjson\r\nexport LD_LIBRARY_PATH=$(pwd)/lib\r\n(dd if=poc.json bs=4096; sleep 1; dd if=test.json bs=10) 2>/dev/null | ./test\r\n```\r\n\r\nAnd then the test file get a segmentation fault.\r\n![image](https://user-images.githubusercontent.com/45086632/225033488-b5b3fd54-9f66-451b-bfdf-ddaa6acf4623.png)\r\n\r\nAfter apply the patch I get from [json-c patch](https://github.com/json-c/json-c/pull/592/files)\r\n\r\nwe rebuild and test like this:\r\n```sh\r\nmake\r\nmake install\r\n\r\n(dd if=poc.json bs=4096; sleep 1; dd if=test.json bs=10) 2>/dev/null | ./test\r\necho $?\r\n```\r\n\r\nAnd there is no more segmentaion fault, the CVE is solved.\r\n![image](https://user-images.githubusercontent.com/45086632/225034005-a53c72ba-3ed8-4c82-aee7-33a41593254f.png)\r\n"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Step-by-Step Explanation:**\n\n1. **Identified CVE Reference:** The commit message and vulnerability description both reference CVE-2020-12762, indicating a security issue.\n2. **Code Changes:** The diff introduces checks to prevent integer overflow in buffer resizing, a common security vulnerability leading to crashes or exploit opportunities.\n3. **Outcome Mentioned:** The commit mentions resolving a segmentation fault, a symptom of overflow issues.\n\n**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 1.0"
}