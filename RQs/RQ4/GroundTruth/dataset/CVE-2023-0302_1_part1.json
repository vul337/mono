{
  "cve_id": "CVE-2023-0302",
  "cwe_ids": [
    "CWE-74"
  ],
  "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H",
  "cvss_is_v3": true,
  "repo_name": "radareorg/radare2",
  "commit_msg": "Fix ANSI Escape Sequence Injection vulns via DWARF ##vuln\n\n* Reported by @solid-snail via huntrdev\r\n* BountyID: 583133af-7ae6-4a21-beef-a4b0182cf82e\r\n* Reproducer: dwarf_test_func_patched",
  "commit_hash": "961f0e723903011d4f54c2396e44efa91fcc74ce",
  "git_url": "https://github.com/radareorg/radare2/commit/961f0e723903011d4f54c2396e44efa91fcc74ce",
  "file_path": "libr/bin/dwarf.c",
  "func_name": "parse_die",
  "func_before": "static const ut8 *parse_die(const ut8 *buf, const ut8 *buf_end, RBinDwarfAbbrevDecl *abbrev, RBinDwarfCompUnitHdr *hdr, RBinDwarfDie *die, const ut8 *debug_str, size_t debug_str_len, Sdb *sdb) {\n\tsize_t i;\n\tif (!buf || !buf_end || buf > buf_end) {\n\t\treturn NULL;\n\t}\n\tfor (i = 0; i < die->count; i++) {\n\t\tmemset (&die->attr_values[i], 0, sizeof (RBinDwarfDie));\n\t}\n\tfor (i = 0; i < abbrev->count && i < die->capacity; i++) {\n\t\tmemset (&die->attr_values[i], 0, sizeof (die->attr_values[i]));\n\t\t// debug_str_len = r_str_nlen (debug_str, buf_end - buf);\n\t\tconst ut8 *nbuf = parse_attr_value (buf, buf_end - buf,\n\t\t\t&abbrev->defs[i],\n\t\t\t&die->attr_values[i],\n\t\t\thdr, debug_str, debug_str_len);\n\t\tif (nbuf) {\n\t\t\tbuf = nbuf;\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\n\t\tRBinDwarfAttrValue *attribute = &die->attr_values[i];\n\n\t\tbool is_string = (attribute->attr_form == DW_FORM_strp || attribute->attr_form == DW_FORM_string);\n\t\tbool is_valid_string_form = is_string && attribute->string.content;\n\t\t// TODO  does this have a purpose anymore?\n\t\t// Or atleast it needs to rework becase there will be\n\t\t// more comp units -> more comp dirs and only the last one will be kept\n\t\tif (attribute->attr_name == DW_AT_comp_dir && is_valid_string_form) {\n\t\t\tconst char *name = attribute->string.content;\n\t\t\tsdb_set (sdb, \"DW_AT_comp_dir\", name, 0);\n\t\t}\n\t\tdie->count++;\n\t}\n\treturn buf;\n}",
  "abstract_func_before": "static const ut8 *parse_die(const ut8 *VAR_0, const ut8 *VAR_1, RBinDwarfAbbrevDecl *VAR_2, RBinDwarfCompUnitHdr *VAR_3, RBinDwarfDie *VAR_4, const ut8 *VAR_5, size_t VAR_6, Sdb *VAR_7) {\n\tsize_t VAR_8;\n\tif (!VAR_0 || !VAR_1 || VAR_0 > VAR_1) {\n\t\treturn NULL;\n\t}\n\tfor (VAR_8 = 0; VAR_8 < VAR_4->count; VAR_8++) {\n\t\tmemset (&VAR_4->attr_values[VAR_8], 0, sizeof (RBinDwarfDie));\n\t}\n\tfor (VAR_8 = 0; VAR_8 < VAR_2->count && VAR_8 < VAR_4->capacity; VAR_8++) {\n\t\tmemset (&VAR_4->attr_values[VAR_8], 0, sizeof (VAR_4->attr_values[VAR_8]));\n\t\t/* COMMENT_0 */\n\t\tconst ut8 *VAR_9 = parse_attr_value (VAR_0, VAR_1 - VAR_0,\n\t\t\t&VAR_2->defs[VAR_8],\n\t\t\t&VAR_4->attr_values[VAR_8],\n\t\t\tVAR_3, VAR_5, VAR_6);\n\t\tif (VAR_9) {\n\t\t\tVAR_0 = VAR_9;\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\n\t\tRBinDwarfAttrValue *VAR_10 = &VAR_4->attr_values[VAR_8];\n\n\t\tbool VAR_11 = (VAR_10->attr_form == VAR_12 || VAR_10->attr_form == VAR_13);\n\t\tbool VAR_14 = VAR_11 && VAR_10->string.content;\n\t\t/* COMMENT_1 */\n\t\t/* COMMENT_2 */\n\t\t/* COMMENT_3 */\n\t\tif (VAR_10->attr_name == VAR_15 && VAR_14) {\n\t\t\tconst char *VAR_16 = VAR_10->string.content;\n\t\t\tsdb_set (VAR_7, \"DW_AT_comp_dir\", VAR_16, 0);\n\t\t}\n\t\tVAR_4->count++;\n\t}\n\treturn VAR_0;\n}",
  "func_graph_path_before": "radareorg/radare2/961f0e723903011d4f54c2396e44efa91fcc74ce/dwarf.c/vul/before/0.json",
  "func": "static const ut8 *parse_die(const ut8 *buf, const ut8 *buf_end, RBinDwarfAbbrevDecl *abbrev, RBinDwarfCompUnitHdr *hdr, RBinDwarfDie *die, const ut8 *debug_str, size_t debug_str_len, Sdb *sdb) {\n\tsize_t i;\n\tif (!buf || !buf_end || buf > buf_end) {\n\t\treturn NULL;\n\t}\n\tfor (i = 0; i < die->count; i++) {\n\t\tmemset (&die->attr_values[i], 0, sizeof (RBinDwarfDie));\n\t}\n\tfor (i = 0; i < abbrev->count && i < die->capacity; i++) {\n\t\tmemset (&die->attr_values[i], 0, sizeof (die->attr_values[i]));\n\t\t// debug_str_len = r_str_nlen (debug_str, buf_end - buf);\n\t\tconst ut8 *nbuf = parse_attr_value (buf, buf_end - buf,\n\t\t\t&abbrev->defs[i],\n\t\t\t&die->attr_values[i],\n\t\t\thdr, debug_str, debug_str_len);\n\t\tif (nbuf) {\n\t\t\tbuf = nbuf;\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\n\t\tRBinDwarfAttrValue *attribute = &die->attr_values[i];\n\n\t\tbool is_string = (attribute->attr_form == DW_FORM_strp || attribute->attr_form == DW_FORM_string);\n\t\tbool is_valid_string_form = is_string && attribute->string.content;\n\t\t// TODO  does this have a purpose anymore?\n\t\t// Or atleast it needs to rework becase there will be\n\t\t// more comp units -> more comp dirs and only the last one will be kept\n\t\tif (attribute->attr_name == DW_AT_comp_dir && is_valid_string_form) {\n\t\t\tchar *name = strdup (attribute->string.content);\n\t\t\tr_str_ansi_strip (name);\n\t\t\tr_str_replace_ch (name, '\\n', 0, true);\n\t\t\tr_str_replace_ch (name, '\\t', 0, true);\n\t\t\tsdb_set_owned (sdb, \"DW_AT_comp_dir\", name, 0);\n\t\t}\n\t\tdie->count++;\n\t}\n\treturn buf;\n}",
  "abstract_func": "static const ut8 *parse_die(const ut8 *VAR_0, const ut8 *VAR_1, RBinDwarfAbbrevDecl *VAR_2, RBinDwarfCompUnitHdr *VAR_3, RBinDwarfDie *VAR_4, const ut8 *VAR_5, size_t VAR_6, Sdb *VAR_7) {\n\tsize_t VAR_8;\n\tif (!VAR_0 || !VAR_1 || VAR_0 > VAR_1) {\n\t\treturn NULL;\n\t}\n\tfor (VAR_8 = 0; VAR_8 < VAR_4->count; VAR_8++) {\n\t\tmemset (&VAR_4->attr_values[VAR_8], 0, sizeof (RBinDwarfDie));\n\t}\n\tfor (VAR_8 = 0; VAR_8 < VAR_2->count && VAR_8 < VAR_4->capacity; VAR_8++) {\n\t\tmemset (&VAR_4->attr_values[VAR_8], 0, sizeof (VAR_4->attr_values[VAR_8]));\n\t\t/* COMMENT_0 */\n\t\tconst ut8 *VAR_9 = parse_attr_value (VAR_0, VAR_1 - VAR_0,\n\t\t\t&VAR_2->defs[VAR_8],\n\t\t\t&VAR_4->attr_values[VAR_8],\n\t\t\tVAR_3, VAR_5, VAR_6);\n\t\tif (VAR_9) {\n\t\t\tVAR_0 = VAR_9;\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\n\t\tRBinDwarfAttrValue *VAR_10 = &VAR_4->attr_values[VAR_8];\n\n\t\tbool VAR_11 = (VAR_10->attr_form == VAR_12 || VAR_10->attr_form == VAR_13);\n\t\tbool VAR_14 = VAR_11 && VAR_10->string.content;\n\t\t/* COMMENT_1 */\n\t\t/* COMMENT_2 */\n\t\t/* COMMENT_3 */\n\t\tif (VAR_10->attr_name == VAR_15 && VAR_14) {\n\t\t\tchar *VAR_16 = strdup (VAR_10->string.content);\n\t\t\tr_str_ansi_strip (VAR_16);\n\t\t\tr_str_replace_ch (VAR_16, '\\n', 0, true);\n\t\t\tr_str_replace_ch (VAR_16, '\\t', 0, true);\n\t\t\tsdb_set_owned (VAR_7, \"DW_AT_comp_dir\", VAR_16, 0);\n\t\t}\n\t\tVAR_4->count++;\n\t}\n\treturn VAR_0;\n}",
  "func_graph_path": "radareorg/radare2/961f0e723903011d4f54c2396e44efa91fcc74ce/dwarf.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -27,8 +27,11 @@\n \t\t// Or atleast it needs to rework becase there will be\n \t\t// more comp units -> more comp dirs and only the last one will be kept\n \t\tif (attribute->attr_name == DW_AT_comp_dir && is_valid_string_form) {\n-\t\t\tconst char *name = attribute->string.content;\n-\t\t\tsdb_set (sdb, \"DW_AT_comp_dir\", name, 0);\n+\t\t\tchar *name = strdup (attribute->string.content);\n+\t\t\tr_str_ansi_strip (name);\n+\t\t\tr_str_replace_ch (name, '\\n', 0, true);\n+\t\t\tr_str_replace_ch (name, '\\t', 0, true);\n+\t\t\tsdb_set_owned (sdb, \"DW_AT_comp_dir\", name, 0);\n \t\t}\n \t\tdie->count++;\n \t}",
  "diff_line_info": {
    "deleted_lines": [
      "\t\t\tconst char *name = attribute->string.content;",
      "\t\t\tsdb_set (sdb, \"DW_AT_comp_dir\", name, 0);"
    ],
    "added_lines": [
      "\t\t\tchar *name = strdup (attribute->string.content);",
      "\t\t\tr_str_ansi_strip (name);",
      "\t\t\tr_str_replace_ch (name, '\\n', 0, true);",
      "\t\t\tr_str_replace_ch (name, '\\t', 0, true);",
      "\t\t\tsdb_set_owned (sdb, \"DW_AT_comp_dir\", name, 0);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/radareorg/radare2/pull/21231",
  "description": {
    "pr_info": {
      "title": "Colorz",
      "number": 21231
    },
    "comment": [
      "<!--\r\nRead https://github.com/radareorg/radare2/blob/master/DEVELOPERS.md\r\n* PR title must be capitalized, concise and use ##tags\r\n* If the PR is fixing a ticket use 'Fix #1234 - ..' in the commit message\r\n* Follow the coding style, add tests and documentation if necessary\r\n-->\r\n\r\n- [ ] Mark this if you consider it ready to merge\r\n- [ ] I've added tests (optional)\r\n- [ ] I wrote some lines in the [book](https://github.com/radareorg/radare2book) (optional)\r\n\r\n**Description**\r\n\r\n<!-- explain your changes if necessary -->\r\n"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.9  \n\nThe patch addresses an ANSI Escape Sequence Injection vulnerability, as indicated by the commit message and the code changes which sanitize user input."
}