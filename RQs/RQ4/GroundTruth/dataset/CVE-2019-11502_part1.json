{
  "cve_id": "CVE-2019-11502",
  "cwe_ids": [
    "CWE-59"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:N/A:N",
  "cvss_is_v3": false,
  "repo_name": "snapcore/snapd",
  "commit_msg": "cmd/snap-confine: chown private /tmp parent to root.root\n\nWhen snap-confine creates a private /tmp directory for a given snap it\nfirst creates a temporary directory in /tmp/ named after the snap, along\nwith a random name. Inside that directory it creates a /tmp directory\nwith permissions appropriate for a future /tmp, namely 1777.\n\nUp until recently the that directory was owned by the user who first\ninvoked snap-confine. Since the directory is reused by all the users on\nthe system this logic makes no sense.\n\nThis patch changes the related logic so that the private /tmp directory\nis owned by root, just like the real one.\n\nSigned-off-by: Zygmunt Krynicki <zygmunt.krynicki@canonical.com>",
  "commit_hash": "bdbfeebef03245176ae0dc323392bb0522a339b1",
  "git_url": "https://github.com/snapcore/snapd/commit/bdbfeebef03245176ae0dc323392bb0522a339b1",
  "file_path": "cmd/snap-confine/mount-support.c",
  "func_name": "setup_private_mount",
  "func_before": "static void setup_private_mount(const char *snap_name)\n{\n\tuid_t uid = getuid();\n\tgid_t gid = getgid();\n\tchar tmpdir[MAX_BUF] = { 0 };\n\n\t// Create a 0700 base directory, this is the base dir that is\n\t// protected from other users.\n\t//\n\t// Under that basedir, we put a 1777 /tmp dir that is then bind\n\t// mounted for the applications to use\n\tsc_must_snprintf(tmpdir, sizeof(tmpdir), \"/tmp/snap.%s_XXXXXX\", snap_name);\n\tif (mkdtemp(tmpdir) == NULL) {\n\t\tdie(\"cannot create temporary directory essential for private /tmp\");\n\t}\n\t// now we create a 1777 /tmp inside our private dir\n\tmode_t old_mask = umask(0);\n\tchar *d = sc_strdup(tmpdir);\n\tsc_must_snprintf(tmpdir, sizeof(tmpdir), \"%s/tmp\", d);\n\tfree(d);\n\n\tif (mkdir(tmpdir, 01777) != 0) {\n\t\tdie(\"cannot create temporary directory for private /tmp\");\n\t}\n\tumask(old_mask);\n\n\t// chdir to '/' since the mount won't apply to the current directory\n\tchar *pwd = get_current_dir_name();\n\tif (pwd == NULL)\n\t\tdie(\"cannot get current working directory\");\n\tif (chdir(\"/\") != 0)\n\t\tdie(\"cannot change directory to '/'\");\n\n\t// MS_BIND is there from linux 2.4\n\tsc_do_mount(tmpdir, \"/tmp\", NULL, MS_BIND, NULL);\n\t// MS_PRIVATE needs linux > 2.6.11\n\tsc_do_mount(\"none\", \"/tmp\", NULL, MS_PRIVATE, NULL);\n\t// do the chown after the bind mount to avoid potential shenanigans\n\tif (chown(\"/tmp/\", uid, gid) < 0) {\n\t\tdie(\"cannot change ownership of /tmp\");\n\t}\n\t// chdir to original directory\n\tif (chdir(pwd) != 0)\n\t\tdie(\"cannot change current working directory to the original directory\");\n\tfree(pwd);\n}",
  "abstract_func_before": "static void setup_private_mount(const char *VAR_0)\n{\n\tuid_t VAR_1 = getuid();\n\tgid_t VAR_2 = getgid();\n\tchar VAR_3[VAR_4] = { 0 };\n\n\t/* COMMENT_0 */\n\t/* COMMENT_1 */\n\t/* COMMENT_2 */\n\t/* COMMENT_3 */\n\t/* COMMENT_4 */\n\tsc_must_snprintf(VAR_3, sizeof(VAR_3), \"/tmp/snap.%s_XXXXXX\", VAR_0);\n\tif (mkdtemp(VAR_3) == NULL) {\n\t\tdie(\"cannot create temporary directory essential for private /tmp\");\n\t}\n\t/* COMMENT_5 */\n\tmode_t VAR_5 = umask(0);\n\tchar *VAR_6 = sc_strdup(VAR_3);\n\tsc_must_snprintf(VAR_3, sizeof(VAR_3), \"%s/tmp\", VAR_6);\n\tfree(VAR_6);\n\n\tif (mkdir(VAR_3, 01777) != 0) {\n\t\tdie(\"cannot create temporary directory for private /tmp\");\n\t}\n\tumask(VAR_5);\n\n\t/* COMMENT_6 */\n\tchar *VAR_7 = get_current_dir_name();\n\tif (VAR_7 == NULL)\n\t\tdie(\"cannot get current working directory\");\n\tif (chdir(\"/\") != 0)\n\t\tdie(\"cannot change directory to '/'\");\n\n\t/* COMMENT_7 */\n\tsc_do_mount(VAR_3, \"/tmp\", NULL, VAR_8, NULL);\n\t/* COMMENT_8 */\n\tsc_do_mount(\"none\", \"/tmp\", NULL, VAR_9, NULL);\n\t/* COMMENT_9 */\n\tif (chown(\"/tmp/\", VAR_1, VAR_2) < 0) {\n\t\tdie(\"cannot change ownership of /tmp\");\n\t}\n\t/* COMMENT_10 */\n\tif (chdir(VAR_7) != 0)\n\t\tdie(\"cannot change current working directory to the original directory\");\n\tfree(VAR_7);\n}",
  "func_graph_path_before": "snapcore/snapd/bdbfeebef03245176ae0dc323392bb0522a339b1/mount-support.c/vul/before/0.json",
  "func": "static void setup_private_mount(const char *snap_name)\n{\n\tchar tmpdir[MAX_BUF] = { 0 };\n\n\t// Create a 0700 base directory, this is the base dir that is\n\t// protected from other users.\n\t//\n\t// Under that basedir, we put a 1777 /tmp dir that is then bind\n\t// mounted for the applications to use\n\tsc_must_snprintf(tmpdir, sizeof(tmpdir), \"/tmp/snap.%s_XXXXXX\", snap_name);\n\tif (mkdtemp(tmpdir) == NULL) {\n\t\tdie(\"cannot create temporary directory essential for private /tmp\");\n\t}\n\t// now we create a 1777 /tmp inside our private dir\n\tmode_t old_mask = umask(0);\n\tchar *d = sc_strdup(tmpdir);\n\tsc_must_snprintf(tmpdir, sizeof(tmpdir), \"%s/tmp\", d);\n\tfree(d);\n\n\tif (mkdir(tmpdir, 01777) != 0) {\n\t\tdie(\"cannot create temporary directory for private /tmp\");\n\t}\n\tumask(old_mask);\n\n\t// chdir to '/' since the mount won't apply to the current directory\n\tchar *pwd = get_current_dir_name();\n\tif (pwd == NULL)\n\t\tdie(\"cannot get current working directory\");\n\tif (chdir(\"/\") != 0)\n\t\tdie(\"cannot change directory to '/'\");\n\n\t// MS_BIND is there from linux 2.4\n\tsc_do_mount(tmpdir, \"/tmp\", NULL, MS_BIND, NULL);\n\t// MS_PRIVATE needs linux > 2.6.11\n\tsc_do_mount(\"none\", \"/tmp\", NULL, MS_PRIVATE, NULL);\n\t// do the chown after the bind mount to avoid potential shenanigans\n\tif (chown(\"/tmp/\", 0, 0) < 0) {\n\t\tdie(\"cannot change ownership of /tmp\");\n\t}\n\t// chdir to original directory\n\tif (chdir(pwd) != 0)\n\t\tdie(\"cannot change current working directory to the original directory\");\n\tfree(pwd);\n}",
  "abstract_func": "static void setup_private_mount(const char *VAR_0)\n{\n\tchar VAR_1[VAR_2] = { 0 };\n\n\t/* COMMENT_0 */\n\t/* COMMENT_1 */\n\t/* COMMENT_2 */\n\t/* COMMENT_3 */\n\t/* COMMENT_4 */\n\tsc_must_snprintf(VAR_1, sizeof(VAR_1), \"/tmp/snap.%s_XXXXXX\", VAR_0);\n\tif (mkdtemp(VAR_1) == NULL) {\n\t\tdie(\"cannot create temporary directory essential for private /tmp\");\n\t}\n\t/* COMMENT_5 */\n\tmode_t VAR_3 = umask(0);\n\tchar *VAR_4 = sc_strdup(VAR_1);\n\tsc_must_snprintf(VAR_1, sizeof(VAR_1), \"%s/tmp\", VAR_4);\n\tfree(VAR_4);\n\n\tif (mkdir(VAR_1, 01777) != 0) {\n\t\tdie(\"cannot create temporary directory for private /tmp\");\n\t}\n\tumask(VAR_3);\n\n\t/* COMMENT_6 */\n\tchar *VAR_5 = get_current_dir_name();\n\tif (VAR_5 == NULL)\n\t\tdie(\"cannot get current working directory\");\n\tif (chdir(\"/\") != 0)\n\t\tdie(\"cannot change directory to '/'\");\n\n\t/* COMMENT_7 */\n\tsc_do_mount(VAR_1, \"/tmp\", NULL, VAR_6, NULL);\n\t/* COMMENT_8 */\n\tsc_do_mount(\"none\", \"/tmp\", NULL, VAR_7, NULL);\n\t/* COMMENT_9 */\n\tif (chown(\"/tmp/\", 0, 0) < 0) {\n\t\tdie(\"cannot change ownership of /tmp\");\n\t}\n\t/* COMMENT_10 */\n\tif (chdir(VAR_5) != 0)\n\t\tdie(\"cannot change current working directory to the original directory\");\n\tfree(VAR_5);\n}",
  "func_graph_path": "snapcore/snapd/bdbfeebef03245176ae0dc323392bb0522a339b1/mount-support.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,7 +1,5 @@\n static void setup_private_mount(const char *snap_name)\n {\n-\tuid_t uid = getuid();\n-\tgid_t gid = getgid();\n \tchar tmpdir[MAX_BUF] = { 0 };\n \n \t// Create a 0700 base directory, this is the base dir that is\n@@ -36,7 +34,7 @@\n \t// MS_PRIVATE needs linux > 2.6.11\n \tsc_do_mount(\"none\", \"/tmp\", NULL, MS_PRIVATE, NULL);\n \t// do the chown after the bind mount to avoid potential shenanigans\n-\tif (chown(\"/tmp/\", uid, gid) < 0) {\n+\tif (chown(\"/tmp/\", 0, 0) < 0) {\n \t\tdie(\"cannot change ownership of /tmp\");\n \t}\n \t// chdir to original directory",
  "diff_line_info": {
    "deleted_lines": [
      "\tuid_t uid = getuid();",
      "\tgid_t gid = getgid();",
      "\tif (chown(\"/tmp/\", uid, gid) < 0) {"
    ],
    "added_lines": [
      "\tif (chown(\"/tmp/\", 0, 0) < 0) {"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/canonical/snapd/pull/6561",
  "description": {
    "pr_info": {
      "title": "cmd/snap-confine: chown private /tmp to root.root",
      "number": 6561
    },
    "comment": [
      "When snap-confine creates a private /tmp directory for a given snap it\r\nfirst creates a temporary directory in /tmp/ named after the snap, along\r\nwith a random name. Inside that directory it creates a /tmp directory\r\nwith permissions appropriate for a future /tmp, namely 1777.\r\n\r\nUp until recently the that directory was owned by the user who first\r\ninvoked snap-confine. Since the directory is reused by all the users on\r\nthe system this logic makes no sense.\r\n\r\nThis patch changes the related logic so that the private /tmp directory\r\nis owned by root, just like the real one.\r\n\r\nSigned-off-by: Zygmunt Krynicki <zygmunt.krynicki@canonical.com>\r\n",
      "NOTE: This is stacked on top of https://github.com/snapcore/snapd/pull/6560"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.95"
}