{
  "cve_id": "CVE-2022-4772",
  "cwe_ids": [
    "CWE-22"
  ],
  "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
  "cvss_is_v3": true,
  "repo_name": "dgarijo/Widoco",
  "commit_msg": "vuln-fix: Zip Slip Vulnerability\n\nThis fixes a Zip-Slip vulnerability.\n\nThis change does one of two things. This change either\n\n1. Inserts a guard to protect against Zip Slip.\nOR\n2. Replaces `dir.getCanonicalPath().startsWith(parent.getCanonicalPath())`, which is vulnerable to partial path traversal attacks, with the more secure `dir.getCanonicalFile().toPath().startsWith(parent.getCanonicalFile().toPath())`.\n\nFor number 2, consider `\"/usr/outnot\".startsWith(\"/usr/out\")`.\nThe check is bypassed although `/outnot` is not under the `/out` directory.\nIt's important to understand that the terminating slash may be removed when using various `String` representations of the `File` object.\nFor example, on Linux, `println(new File(\"/var\"))` will print `/var`, but `println(new File(\"/var\", \"/\")` will print `/var/`;\nhowever, `println(new File(\"/var\", \"/\").getCanonicalPath())` will print `/var`.\n\nWeakness: CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')\nSeverity: High\nCVSSS: 7.4\nDetection: CodeQL (https://codeql.github.com/codeql-query-help/java/java-zipslip/) & OpenRewrite (https://public.moderne.io/recipes/org.openrewrite.java.security.ZipSlip)\n\nReported-by: Jonathan Leitschuh <Jonathan.Leitschuh@gmail.com>\nSigned-off-by: Jonathan Leitschuh <Jonathan.Leitschuh@gmail.com>\n\nBug-tracker: https://github.com/JLLeitschuh/security-research/issues/16\n\nCo-authored-by: Moderne <team@moderne.io>",
  "commit_hash": "f2279b76827f32190adfa9bd5229b7d5a147fa92",
  "git_url": "https://github.com/dgarijo/Widoco/commit/f2279b76827f32190adfa9bd5229b7d5a147fa92",
  "file_path": "src/main/java/widoco/WidocoUtils.java",
  "func_name": "unZipIt",
  "func_before": "public static void unZipIt(String resourceName, String outputFolder) {\n\n\t\tbyte[] buffer = new byte[1024];\n\n\t\ttry {\n\t\t\tZipInputStream zis = new ZipInputStream(CreateResources.class.getResourceAsStream(resourceName));\n\t\t\tZipEntry ze = zis.getNextEntry();\n\n\t\t\twhile (ze != null) {\n\t\t\t\tString fileName = ze.getName();\n\t\t\t\tFile newFile = new File(outputFolder + File.separator + fileName);\n\t\t\t\t// System.out.println(\"file unzip : \"+ newFile.getAbsoluteFile());\n\t\t\t\tif (ze.isDirectory()) {\n\t\t\t\t\tString temp = newFile.getAbsolutePath();\n\t\t\t\t\tnew File(temp).mkdirs();\n\t\t\t\t} else {\n\t\t\t\t\tString directory = newFile.getParent();\n\t\t\t\t\tif (directory != null) {\n\t\t\t\t\t\tFile d = new File(directory);\n\t\t\t\t\t\tif (!d.exists()) {\n\t\t\t\t\t\t\td.mkdirs();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tFileOutputStream fos = new FileOutputStream(newFile);\n\t\t\t\t\tint len;\n\t\t\t\t\twhile ((len = zis.read(buffer)) > 0) {\n\t\t\t\t\t\tfos.write(buffer, 0, len);\n\t\t\t\t\t}\n\t\t\t\t\tfos.close();\n\t\t\t\t}\n\t\t\t\tze = zis.getNextEntry();\n\t\t\t}\n\n\t\t\tzis.closeEntry();\n\t\t\tzis.close();\n\n\t\t} catch (IOException ex) {\n\t\t\tlogger.error(\"Error while extracting the reosurces: \" + ex.getMessage());\n\t\t}\n\n\t}",
  "abstract_func_before": "public static void unZipIt(String VAR_0, String VAR_1) {\n\n\t\tbyte[] VAR_2 = new byte[1024];\n\n\t\ttry {\n\t\t\tZipInputStream VAR_3 = new ZipInputStream(CreateResources.class.getResourceAsStream(VAR_0));\n\t\t\tZipEntry VAR_4 = VAR_3.getNextEntry();\n\n\t\t\twhile (VAR_4 != null) {\n\t\t\t\tString VAR_5 = VAR_4.getName();\n\t\t\t\tFile VAR_6 = new File(VAR_1 + VAR_7.separator + VAR_5);\n\t\t\t\t/* COMMENT_0 */\n\t\t\t\tif (VAR_4.isDirectory()) {\n\t\t\t\t\tString VAR_8 = VAR_6.getAbsolutePath();\n\t\t\t\t\tnew File(VAR_8).mkdirs();\n\t\t\t\t} else {\n\t\t\t\t\tString VAR_9 = VAR_6.getParent();\n\t\t\t\t\tif (VAR_9 != null) {\n\t\t\t\t\t\tFile VAR_10 = new File(VAR_9);\n\t\t\t\t\t\tif (!VAR_10.exists()) {\n\t\t\t\t\t\t\tVAR_10.mkdirs();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tFileOutputStream VAR_11 = new FileOutputStream(VAR_6);\n\t\t\t\t\tint VAR_12;\n\t\t\t\t\twhile ((VAR_12 = VAR_3.read(VAR_2)) > 0) {\n\t\t\t\t\t\tVAR_11.write(VAR_2, 0, VAR_12);\n\t\t\t\t\t}\n\t\t\t\t\tVAR_11.close();\n\t\t\t\t}\n\t\t\t\tVAR_4 = VAR_3.getNextEntry();\n\t\t\t}\n\n\t\t\tVAR_3.closeEntry();\n\t\t\tVAR_3.close();\n\n\t\t} catch (IOException VAR_13) {\n\t\t\tVAR_14.error(\"Error while extracting the reosurces: \" + VAR_13.getMessage());\n\t\t}\n\n\t}",
  "func_graph_path_before": "dgarijo/Widoco/f2279b76827f32190adfa9bd5229b7d5a147fa92/WidocoUtils.java/vul/before/0.json",
  "func": "public static void unZipIt(String resourceName, String outputFolder) {\n\n\t\tbyte[] buffer = new byte[1024];\n\n\t\ttry {\n\t\t\tZipInputStream zis = new ZipInputStream(CreateResources.class.getResourceAsStream(resourceName));\n\t\t\tZipEntry ze = zis.getNextEntry();\n\n\t\t\twhile (ze != null) {\n\t\t\t\tString fileName = ze.getName();\n\t\t\t\tFile newFile = new File(outputFolder, fileName);\n\t\t\t\tif (!newFile.toPath().normalize().startsWith(outputFolder)) {\n\t\t\t\t\tthrow new RuntimeException(\"Bad zip entry\");\n\t\t\t\t}\n\t\t\t\t// System.out.println(\"file unzip : \"+ newFile.getAbsoluteFile());\n\t\t\t\tif (ze.isDirectory()) {\n\t\t\t\t\tString temp = newFile.getAbsolutePath();\n\t\t\t\t\tnew File(temp).mkdirs();\n\t\t\t\t} else {\n\t\t\t\t\tString directory = newFile.getParent();\n\t\t\t\t\tif (directory != null) {\n\t\t\t\t\t\tFile d = new File(directory);\n\t\t\t\t\t\tif (!d.exists()) {\n\t\t\t\t\t\t\td.mkdirs();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tFileOutputStream fos = new FileOutputStream(newFile);\n\t\t\t\t\tint len;\n\t\t\t\t\twhile ((len = zis.read(buffer)) > 0) {\n\t\t\t\t\t\tfos.write(buffer, 0, len);\n\t\t\t\t\t}\n\t\t\t\t\tfos.close();\n\t\t\t\t}\n\t\t\t\tze = zis.getNextEntry();\n\t\t\t}\n\n\t\t\tzis.closeEntry();\n\t\t\tzis.close();\n\n\t\t} catch (IOException ex) {\n\t\t\tlogger.error(\"Error while extracting the reosurces: \" + ex.getMessage());\n\t\t}\n\n\t}",
  "abstract_func": "public static void unZipIt(String VAR_0, String VAR_1) {\n\n\t\tbyte[] VAR_2 = new byte[1024];\n\n\t\ttry {\n\t\t\tZipInputStream VAR_3 = new ZipInputStream(CreateResources.class.getResourceAsStream(VAR_0));\n\t\t\tZipEntry VAR_4 = VAR_3.getNextEntry();\n\n\t\t\twhile (VAR_4 != null) {\n\t\t\t\tString VAR_5 = VAR_4.getName();\n\t\t\t\tFile VAR_6 = new File(VAR_1, VAR_5);\n\t\t\t\tif (!VAR_6.toPath().normalize().startsWith(VAR_1)) {\n\t\t\t\t\tthrow new RuntimeException(\"Bad zip entry\");\n\t\t\t\t}\n\t\t\t\t/* COMMENT_0 */\n\t\t\t\tif (VAR_4.isDirectory()) {\n\t\t\t\t\tString VAR_7 = VAR_6.getAbsolutePath();\n\t\t\t\t\tnew File(VAR_7).mkdirs();\n\t\t\t\t} else {\n\t\t\t\t\tString VAR_8 = VAR_6.getParent();\n\t\t\t\t\tif (VAR_8 != null) {\n\t\t\t\t\t\tFile VAR_9 = new File(VAR_8);\n\t\t\t\t\t\tif (!VAR_9.exists()) {\n\t\t\t\t\t\t\tVAR_9.mkdirs();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tFileOutputStream VAR_10 = new FileOutputStream(VAR_6);\n\t\t\t\t\tint VAR_11;\n\t\t\t\t\twhile ((VAR_11 = VAR_3.read(VAR_2)) > 0) {\n\t\t\t\t\t\tVAR_10.write(VAR_2, 0, VAR_11);\n\t\t\t\t\t}\n\t\t\t\t\tVAR_10.close();\n\t\t\t\t}\n\t\t\t\tVAR_4 = VAR_3.getNextEntry();\n\t\t\t}\n\n\t\t\tVAR_3.closeEntry();\n\t\t\tVAR_3.close();\n\n\t\t} catch (IOException VAR_12) {\n\t\t\tVAR_13.error(\"Error while extracting the reosurces: \" + VAR_12.getMessage());\n\t\t}\n\n\t}",
  "func_graph_path": "dgarijo/Widoco/f2279b76827f32190adfa9bd5229b7d5a147fa92/WidocoUtils.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -8,7 +8,10 @@\n \n \t\t\twhile (ze != null) {\n \t\t\t\tString fileName = ze.getName();\n-\t\t\t\tFile newFile = new File(outputFolder + File.separator + fileName);\n+\t\t\t\tFile newFile = new File(outputFolder, fileName);\n+\t\t\t\tif (!newFile.toPath().normalize().startsWith(outputFolder)) {\n+\t\t\t\t\tthrow new RuntimeException(\"Bad zip entry\");\n+\t\t\t\t}\n \t\t\t\t// System.out.println(\"file unzip : \"+ newFile.getAbsoluteFile());\n \t\t\t\tif (ze.isDirectory()) {\n \t\t\t\t\tString temp = newFile.getAbsolutePath();",
  "diff_line_info": {
    "deleted_lines": [
      "\t\t\t\tFile newFile = new File(outputFolder + File.separator + fileName);"
    ],
    "added_lines": [
      "\t\t\t\tFile newFile = new File(outputFolder, fileName);",
      "\t\t\t\tif (!newFile.toPath().normalize().startsWith(outputFolder)) {",
      "\t\t\t\t\tthrow new RuntimeException(\"Bad zip entry\");",
      "\t\t\t\t}"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/dgarijo/Widoco/pull/551",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/dgarijo/Widoco/pull/551: 403 Client Error: Forbidden for url: https://api.github.com/repos/dgarijo/Widoco/pulls/551",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 1.0"
}