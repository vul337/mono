{
  "cve_id": "CVE-2020-7226",
  "cwe_ids": [
    "CWE-770"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "vt-middleware/cryptacular",
  "commit_msg": "Define new ciphertext header format.\n\nNew format does not allocate any memory until HMAC check passes, which\nguards against untrusted input. All encryption components have been\nupdated to use the new header, while preserving backward compatibility\nto decrypt messages encrypted with the old format. The decoding process\nfor the old header has been hardened to impose reasonable limits on header\nfields: nonce sizes up to 255 bytes, key names up to 500 bytes.\n\nFixes #52.",
  "commit_hash": "8c6c7528f1e24c6b71f3e36db0cb8a697256ce25",
  "git_url": "https://github.com/vt-middleware/cryptacular/commit/8c6c7528f1e24c6b71f3e36db0cb8a697256ce25",
  "file_path": "src/main/java/org/cryptacular/CiphertextHeader.java",
  "func_name": "decode",
  "func_before": "public static CiphertextHeader decode(final byte[] data) throws EncodingException\n  {\n    final ByteBuffer bb = ByteBuffer.wrap(data);\n    bb.order(ByteOrder.BIG_ENDIAN);\n\n    final int length = bb.getInt();\n    if (length < 0) {\n      throw new EncodingException(\"Invalid ciphertext header length: \" + length);\n    }\n\n    final byte[] nonce;\n    int nonceLen = 0;\n    try {\n      nonceLen = bb.getInt();\n      nonce = new byte[nonceLen];\n      bb.get(nonce);\n    } catch (IndexOutOfBoundsException | BufferUnderflowException e) {\n      throw new EncodingException(\"Invalid nonce length: \" + nonceLen);\n    }\n\n    String keyName = null;\n    if (length > nonce.length + 8) {\n      final byte[] b;\n      int keyLen = 0;\n      try {\n        keyLen = bb.getInt();\n        b = new byte[keyLen];\n        bb.get(b);\n        keyName = new String(b);\n      } catch (IndexOutOfBoundsException | BufferUnderflowException e) {\n        throw new EncodingException(\"Invalid key length: \" + keyLen);\n      }\n    }\n\n    return new CiphertextHeader(nonce, keyName);\n  }",
  "abstract_func_before": "public static CiphertextHeader decode(final byte[] VAR_0) throws EncodingException\n  {\n    final ByteBuffer VAR_1 = VAR_2.wrap(VAR_0);\n    VAR_1.order(VAR_3.BIG_ENDIAN);\n\n    final int VAR_4 = VAR_1.getInt();\n    if (VAR_4 < 0) {\n      throw new EncodingException(\"Invalid ciphertext header length: \" + VAR_4);\n    }\n\n    final byte[] VAR_5;\n    int VAR_6 = 0;\n    try {\n      VAR_6 = VAR_1.getInt();\n      VAR_5 = new byte[VAR_6];\n      VAR_1.get(VAR_5);\n    } catch (IndexOutOfBoundsException | BufferUnderflowException VAR_7) {\n      throw new EncodingException(\"Invalid nonce length: \" + VAR_6);\n    }\n\n    String VAR_8 = null;\n    if (VAR_4 > VAR_5.length + 8) {\n      final byte[] VAR_9;\n      int VAR_10 = 0;\n      try {\n        VAR_10 = VAR_1.getInt();\n        VAR_9 = new byte[VAR_10];\n        VAR_1.get(VAR_9);\n        VAR_8 = new String(VAR_9);\n      } catch (IndexOutOfBoundsException | BufferUnderflowException VAR_7) {\n        throw new EncodingException(\"Invalid key length: \" + VAR_10);\n      }\n    }\n\n    return new CiphertextHeader(VAR_5, VAR_8);\n  }",
  "func_graph_path_before": "vt-middleware/cryptacular/8c6c7528f1e24c6b71f3e36db0cb8a697256ce25/CiphertextHeader.java/vul/before/1.json",
  "func": "public static CiphertextHeader decode(final byte[] data) throws EncodingException\n  {\n    final ByteBuffer bb = ByteBuffer.wrap(data);\n    bb.order(ByteOrder.BIG_ENDIAN);\n\n    final int length = bb.getInt();\n    if (length < 0) {\n      throw new EncodingException(\"Bad ciphertext header\");\n    }\n\n    final byte[] nonce;\n    int nonceLen = 0;\n    try {\n      nonceLen = bb.getInt();\n      if (nonceLen > MAX_NONCE_LEN) {\n        throw new EncodingException(\"Bad ciphertext header: maximum nonce length exceeded\");\n      }\n      nonce = new byte[nonceLen];\n      bb.get(nonce);\n    } catch (IndexOutOfBoundsException | BufferUnderflowException e) {\n      throw new EncodingException(\"Bad ciphertext header\");\n    }\n\n    String keyName = null;\n    if (length > nonce.length + 8) {\n      final byte[] b;\n      int keyLen = 0;\n      try {\n        keyLen = bb.getInt();\n        if (keyLen > MAX_KEYNAME_LEN) {\n          throw new EncodingException(\"Bad ciphertext header: maximum key length exceeded\");\n        }\n        b = new byte[keyLen];\n        bb.get(b);\n        keyName = new String(b);\n      } catch (IndexOutOfBoundsException | BufferUnderflowException e) {\n        throw new EncodingException(\"Bad ciphertext header\");\n      }\n    }\n\n    return new CiphertextHeader(nonce, keyName);\n  }",
  "abstract_func": "public static CiphertextHeader decode(final byte[] VAR_0) throws EncodingException\n  {\n    final ByteBuffer VAR_1 = VAR_2.wrap(VAR_0);\n    VAR_1.order(VAR_3.BIG_ENDIAN);\n\n    final int VAR_4 = VAR_1.getInt();\n    if (VAR_4 < 0) {\n      throw new EncodingException(\"Bad ciphertext header\");\n    }\n\n    final byte[] VAR_5;\n    int VAR_6 = 0;\n    try {\n      VAR_6 = VAR_1.getInt();\n      if (VAR_6 > VAR_7) {\n        throw new EncodingException(\"Bad ciphertext header: maximum nonce length exceeded\");\n      }\n      VAR_5 = new byte[VAR_6];\n      VAR_1.get(VAR_5);\n    } catch (IndexOutOfBoundsException | BufferUnderflowException VAR_8) {\n      throw new EncodingException(\"Bad ciphertext header\");\n    }\n\n    String VAR_9 = null;\n    if (VAR_4 > VAR_5.length + 8) {\n      final byte[] VAR_10;\n      int VAR_11 = 0;\n      try {\n        VAR_11 = VAR_1.getInt();\n        if (VAR_11 > VAR_12) {\n          throw new EncodingException(\"Bad ciphertext header: maximum key length exceeded\");\n        }\n        VAR_10 = new byte[VAR_11];\n        VAR_1.get(VAR_10);\n        VAR_9 = new String(VAR_10);\n      } catch (IndexOutOfBoundsException | BufferUnderflowException VAR_8) {\n        throw new EncodingException(\"Bad ciphertext header\");\n      }\n    }\n\n    return new CiphertextHeader(VAR_5, VAR_9);\n  }",
  "func_graph_path": "vt-middleware/cryptacular/8c6c7528f1e24c6b71f3e36db0cb8a697256ce25/CiphertextHeader.java/vul/after/1.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -5,17 +5,20 @@\n \n     final int length = bb.getInt();\n     if (length < 0) {\n-      throw new EncodingException(\"Invalid ciphertext header length: \" + length);\n+      throw new EncodingException(\"Bad ciphertext header\");\n     }\n \n     final byte[] nonce;\n     int nonceLen = 0;\n     try {\n       nonceLen = bb.getInt();\n+      if (nonceLen > MAX_NONCE_LEN) {\n+        throw new EncodingException(\"Bad ciphertext header: maximum nonce length exceeded\");\n+      }\n       nonce = new byte[nonceLen];\n       bb.get(nonce);\n     } catch (IndexOutOfBoundsException | BufferUnderflowException e) {\n-      throw new EncodingException(\"Invalid nonce length: \" + nonceLen);\n+      throw new EncodingException(\"Bad ciphertext header\");\n     }\n \n     String keyName = null;\n@@ -24,11 +27,14 @@\n       int keyLen = 0;\n       try {\n         keyLen = bb.getInt();\n+        if (keyLen > MAX_KEYNAME_LEN) {\n+          throw new EncodingException(\"Bad ciphertext header: maximum key length exceeded\");\n+        }\n         b = new byte[keyLen];\n         bb.get(b);\n         keyName = new String(b);\n       } catch (IndexOutOfBoundsException | BufferUnderflowException e) {\n-        throw new EncodingException(\"Invalid key length: \" + keyLen);\n+        throw new EncodingException(\"Bad ciphertext header\");\n       }\n     }\n ",
  "diff_line_info": {
    "deleted_lines": [
      "      throw new EncodingException(\"Invalid ciphertext header length: \" + length);",
      "      throw new EncodingException(\"Invalid nonce length: \" + nonceLen);",
      "        throw new EncodingException(\"Invalid key length: \" + keyLen);"
    ],
    "added_lines": [
      "      throw new EncodingException(\"Bad ciphertext header\");",
      "      if (nonceLen > MAX_NONCE_LEN) {",
      "        throw new EncodingException(\"Bad ciphertext header: maximum nonce length exceeded\");",
      "      }",
      "      throw new EncodingException(\"Bad ciphertext header\");",
      "        if (keyLen > MAX_KEYNAME_LEN) {",
      "          throw new EncodingException(\"Bad ciphertext header: maximum key length exceeded\");",
      "        }",
      "        throw new EncodingException(\"Bad ciphertext header\");"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/vt-middleware/cryptacular/pull/53",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/vt-middleware/cryptacular/pull/53: 403 Client Error: Forbidden for url: https://api.github.com/repos/vt-middleware/cryptacular/pulls/53",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.95"
}