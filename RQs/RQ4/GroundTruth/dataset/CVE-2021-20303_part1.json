{
  "cve_id": "CVE-2021-20303",
  "cwe_ids": [
    "CWE-190"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:N/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "AcademySoftwareFoundation/openexr",
  "commit_msg": "Use Int64 in dataWindowForTile to prevent integer overflow\n\nSigned-off-by: Peter Hillman <peterh@wetafx.co.nz>",
  "commit_hash": "901059f541acf3013efbbb819035f4a01de8d43e",
  "git_url": "https://github.com/AcademySoftwareFoundation/openexr/commit/901059f541acf3013efbbb819035f4a01de8d43e",
  "file_path": "OpenEXR/IlmImf/ImfTiledMisc.cpp",
  "func_name": "dataWindowForTile",
  "func_before": "Box2i\ndataWindowForTile (const TileDescription &tileDesc,\n\t\t   int minX, int maxX,\n\t\t   int minY, int maxY,\n\t\t   int dx, int dy,\n\t\t   int lx, int ly)\n{\n    V2i tileMin = V2i (minX + dx * tileDesc.xSize,\n\t\t       minY + dy * tileDesc.ySize);\n\n    V2i tileMax = tileMin + V2i (tileDesc.xSize - 1, tileDesc.ySize - 1);\n\n    V2i levelMax = dataWindowForLevel\n\t\t       (tileDesc, minX, maxX, minY, maxY, lx, ly).max;\n\n    tileMax = V2i (std::min (tileMax[0], levelMax[0]),\n\t\t   std::min (tileMax[1], levelMax[1]));\n\n    return Box2i (tileMin, tileMax);\n}",
  "abstract_func_before": "Box2i\ndataWindowForTile (const TileDescription &VAR_0,\n\t\t   int VAR_1, int VAR_2,\n\t\t   int VAR_3, int VAR_4,\n\t\t   int VAR_5, int VAR_6,\n\t\t   int VAR_7, int VAR_8)\n{\n    V2i VAR_9 = V2i (VAR_1 + VAR_5 * VAR_0.xSize,\n\t\t       VAR_3 + VAR_6 * VAR_0.ySize);\n\n    V2i VAR_10 = VAR_9 + V2i (VAR_0.xSize - 1, VAR_0.ySize - 1);\n\n    V2i VAR_11 = dataWindowForLevel\n\t\t       (VAR_0, VAR_1, VAR_2, VAR_3, VAR_4, VAR_7, VAR_8).max;\n\n    VAR_10 = V2i (std::min (VAR_10[0], VAR_11[0]),\n\t\t   std::min (VAR_10[1], VAR_11[1]));\n\n    return Box2i (VAR_9, VAR_10);\n}",
  "func_graph_path_before": "AcademySoftwareFoundation/openexr/901059f541acf3013efbbb819035f4a01de8d43e/ImfTiledMisc.cpp/vul/before/0.json",
  "func": "Box2i\ndataWindowForTile (const TileDescription &tileDesc,\n\t\t   int minX, int maxX,\n\t\t   int minY, int maxY,\n\t\t   int dx, int dy,\n\t\t   int lx, int ly)\n{\n    V2i tileMin = V2i (minX + dx * tileDesc.xSize,\n\t\t       minY + dy * tileDesc.ySize);\n\n    Int64 tileMaxX = Int64(tileMin[0]) + tileDesc.xSize - 1;\n    Int64 tileMaxY = Int64(tileMin[1]) + tileDesc.ySize - 1;\n\n    V2i levelMax = dataWindowForLevel\n\t\t       (tileDesc, minX, maxX, minY, maxY, lx, ly).max;\n\n    V2i tileMax = V2i (std::min (tileMaxX, Int64(levelMax[0])),\n\t\t   std::min (tileMaxY, Int64(levelMax[1])));\n\n    return Box2i (tileMin, tileMax);\n}",
  "abstract_func": "Box2i\ndataWindowForTile (const TileDescription &VAR_0,\n\t\t   int VAR_1, int VAR_2,\n\t\t   int VAR_3, int VAR_4,\n\t\t   int VAR_5, int VAR_6,\n\t\t   int VAR_7, int VAR_8)\n{\n    V2i VAR_9 = V2i (VAR_1 + VAR_5 * VAR_0.xSize,\n\t\t       VAR_3 + VAR_6 * VAR_0.ySize);\n\n    Int64 VAR_10 = Int64(VAR_9[0]) + VAR_0.xSize - 1;\n    Int64 VAR_11 = Int64(VAR_9[1]) + VAR_0.ySize - 1;\n\n    V2i VAR_12 = dataWindowForLevel\n\t\t       (VAR_0, VAR_1, VAR_2, VAR_3, VAR_4, VAR_7, VAR_8).max;\n\n    V2i VAR_13 = V2i (std::min (VAR_10, Int64(VAR_12[0])),\n\t\t   std::min (VAR_11, Int64(VAR_12[1])));\n\n    return Box2i (VAR_9, VAR_13);\n}",
  "func_graph_path": "AcademySoftwareFoundation/openexr/901059f541acf3013efbbb819035f4a01de8d43e/ImfTiledMisc.cpp/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -8,13 +8,14 @@\n     V2i tileMin = V2i (minX + dx * tileDesc.xSize,\n \t\t       minY + dy * tileDesc.ySize);\n \n-    V2i tileMax = tileMin + V2i (tileDesc.xSize - 1, tileDesc.ySize - 1);\n+    Int64 tileMaxX = Int64(tileMin[0]) + tileDesc.xSize - 1;\n+    Int64 tileMaxY = Int64(tileMin[1]) + tileDesc.ySize - 1;\n \n     V2i levelMax = dataWindowForLevel\n \t\t       (tileDesc, minX, maxX, minY, maxY, lx, ly).max;\n \n-    tileMax = V2i (std::min (tileMax[0], levelMax[0]),\n-\t\t   std::min (tileMax[1], levelMax[1]));\n+    V2i tileMax = V2i (std::min (tileMaxX, Int64(levelMax[0])),\n+\t\t   std::min (tileMaxY, Int64(levelMax[1])));\n \n     return Box2i (tileMin, tileMax);\n }",
  "diff_line_info": {
    "deleted_lines": [
      "    V2i tileMax = tileMin + V2i (tileDesc.xSize - 1, tileDesc.ySize - 1);",
      "    tileMax = V2i (std::min (tileMax[0], levelMax[0]),",
      "\t\t   std::min (tileMax[1], levelMax[1]));"
    ],
    "added_lines": [
      "    Int64 tileMaxX = Int64(tileMin[0]) + tileDesc.xSize - 1;",
      "    Int64 tileMaxY = Int64(tileMin[1]) + tileDesc.ySize - 1;",
      "    V2i tileMax = V2i (std::min (tileMaxX, Int64(levelMax[0])),",
      "\t\t   std::min (tileMaxY, Int64(levelMax[1])));"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/AcademySoftwareFoundation/openexr/pull/831",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/AcademySoftwareFoundation/openexr/pull/831: 403 Client Error: Forbidden for url: https://api.github.com/repos/AcademySoftwareFoundation/openexr/pulls/831",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "The patch addresses an integer overflow issue that could lead to insufficient memory allocation, a security risk. The changes use Int64 to prevent overflow, clearly a security fix.\n\n**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.95"
}