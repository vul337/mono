{
  "cve_id": "CVE-2017-11575",
  "cwe_ids": [
    "CWE-125"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "fontforge",
  "commit_msg": "Fix out of bounds read condition and buffer overflow condition\n\n* parsettf.c: Reading past the end of the fontnames array\n* psread.c: Reading more data than is available in type1\n* tottf.c: Use snprintf instead of sprintf\n\nCloses #3096",
  "commit_hash": "4de0c58a01e5e30610c200e9aea98bc7db12c7ac",
  "git_url": "https://github.com/fontforge/fontforge/commit/4de0c58a01e5e30610c200e9aea98bc7db12c7ac",
  "file_path": "fontforge/tottf.c",
  "func_name": "DefaultTTFEnglishNames",
  "func_before": "void DefaultTTFEnglishNames(struct ttflangname *dummy, SplineFont *sf) {\n    time_t now;\n    struct tm *tm;\n    char buffer[200];\n\n    if ( dummy->names[ttf_copyright]==NULL || *dummy->names[ttf_copyright]=='\\0' )\n\tdummy->names[ttf_copyright] = utf8_verify_copy(sf->copyright);\n    if ( dummy->names[ttf_family]==NULL || *dummy->names[ttf_family]=='\\0' )\n\tdummy->names[ttf_family] = utf8_verify_copy(sf->familyname);\n    if ( dummy->names[ttf_subfamily]==NULL || *dummy->names[ttf_subfamily]=='\\0' )\n\tdummy->names[ttf_subfamily] = utf8_verify_copy(SFGetModifiers(sf));\n    if ( dummy->names[ttf_uniqueid]==NULL || *dummy->names[ttf_uniqueid]=='\\0' ) {\n\ttime(&now);\n\ttm = localtime(&now);\n\tsprintf( buffer, \"%s : %s : %d-%d-%d\",\n\t\tBDFFoundry?BDFFoundry:TTFFoundry?TTFFoundry:\"FontForge 2.0\",\n\t\tsf->fullname!=NULL?sf->fullname:sf->fontname,\n\t\ttm->tm_mday, tm->tm_mon+1, tm->tm_year+1900 );\n\tdummy->names[ttf_uniqueid] = copy(buffer);\n    }\n    if ( dummy->names[ttf_fullname]==NULL || *dummy->names[ttf_fullname]=='\\0' )\n\tdummy->names[ttf_fullname] = utf8_verify_copy(sf->fullname);\n    if ( dummy->names[ttf_version]==NULL || *dummy->names[ttf_version]=='\\0' ) {\n\tif ( sf->subfontcnt!=0 )\n\t    sprintf( buffer, \"Version %f \", (double)sf->cidversion );\n\telse if ( sf->version!=NULL )\n\t    sprintf(buffer,\"Version %.20s \", sf->version);\n\telse\n\t    strcpy(buffer,\"Version 1.0\" );\n\tdummy->names[ttf_version] = copy(buffer);\n    }\n    if ( dummy->names[ttf_postscriptname]==NULL || *dummy->names[ttf_postscriptname]=='\\0' )\n\tdummy->names[ttf_postscriptname] = utf8_verify_copy(sf->fontname);\n}",
  "abstract_func_before": "void DefaultTTFEnglishNames(struct ttflangname *VAR_0, SplineFont *VAR_1) {\n    time_t VAR_2;\n    struct tm *tm;\n    char VAR_3[200];\n\n    if ( VAR_0->names[VAR_4]==NULL || *VAR_0->names[VAR_4]=='\\0' )\n\tVAR_0->names[VAR_4] = utf8_verify_copy(VAR_1->copyright);\n    if ( VAR_0->names[VAR_5]==NULL || *VAR_0->names[VAR_5]=='\\0' )\n\tVAR_0->names[VAR_5] = utf8_verify_copy(VAR_1->familyname);\n    if ( VAR_0->names[VAR_6]==NULL || *VAR_0->names[VAR_6]=='\\0' )\n\tVAR_0->names[VAR_6] = utf8_verify_copy(SFGetModifiers(VAR_1));\n    if ( VAR_0->names[VAR_7]==NULL || *VAR_0->names[VAR_7]=='\\0' ) {\n\ttime(&VAR_2);\n\ttm = localtime(&VAR_2);\n\tsprintf( VAR_3, \"%s : %s : %d-%d-%d\",\n\t\tVAR_8?VAR_8:VAR_9?VAR_9:\"FontForge 2.0\",\n\t\tVAR_1->fullname!=NULL?VAR_1->fullname:VAR_1->fontname,\n\t\ttm->tm_mday, tm->tm_mon+1, tm->tm_year+1900 );\n\tVAR_0->names[VAR_7] = copy(VAR_3);\n    }\n    if ( VAR_0->names[VAR_10]==NULL || *VAR_0->names[VAR_10]=='\\0' )\n\tVAR_0->names[VAR_10] = utf8_verify_copy(VAR_1->fullname);\n    if ( VAR_0->names[VAR_11]==NULL || *VAR_0->names[VAR_11]=='\\0' ) {\n\tif ( VAR_1->subfontcnt!=0 )\n\t    sprintf( VAR_3, \"Version %f \", (double)VAR_1->cidversion );\n\telse if ( VAR_1->version!=NULL )\n\t    sprintf(VAR_3,\"Version %.20s \", VAR_1->version);\n\telse\n\t    strcpy(VAR_3,\"Version 1.0\" );\n\tVAR_0->names[VAR_11] = copy(VAR_3);\n    }\n    if ( VAR_0->names[VAR_12]==NULL || *VAR_0->names[VAR_12]=='\\0' )\n\tVAR_0->names[VAR_12] = utf8_verify_copy(VAR_1->fontname);\n}",
  "func_graph_path_before": "fontforge/4de0c58a01e5e30610c200e9aea98bc7db12c7ac/tottf.c/vul/before/0.json",
  "func": "void DefaultTTFEnglishNames(struct ttflangname *dummy, SplineFont *sf) {\n    time_t now;\n    struct tm *tm;\n    char buffer[200];\n\n    if ( dummy->names[ttf_copyright]==NULL || *dummy->names[ttf_copyright]=='\\0' )\n\tdummy->names[ttf_copyright] = utf8_verify_copy(sf->copyright);\n    if ( dummy->names[ttf_family]==NULL || *dummy->names[ttf_family]=='\\0' )\n\tdummy->names[ttf_family] = utf8_verify_copy(sf->familyname);\n    if ( dummy->names[ttf_subfamily]==NULL || *dummy->names[ttf_subfamily]=='\\0' )\n\tdummy->names[ttf_subfamily] = utf8_verify_copy(SFGetModifiers(sf));\n    if ( dummy->names[ttf_uniqueid]==NULL || *dummy->names[ttf_uniqueid]=='\\0' ) {\n\ttime(&now);\n\ttm = localtime(&now);\n\tsnprintf( buffer, sizeof(buffer), \"%s : %s : %d-%d-%d\",\n\t\tBDFFoundry?BDFFoundry:TTFFoundry?TTFFoundry:\"FontForge 2.0\",\n\t\tsf->fullname!=NULL?sf->fullname:sf->fontname,\n\t\ttm->tm_mday, tm->tm_mon+1, tm->tm_year+1900 );\n\tdummy->names[ttf_uniqueid] = copy(buffer);\n    }\n    if ( dummy->names[ttf_fullname]==NULL || *dummy->names[ttf_fullname]=='\\0' )\n\tdummy->names[ttf_fullname] = utf8_verify_copy(sf->fullname);\n    if ( dummy->names[ttf_version]==NULL || *dummy->names[ttf_version]=='\\0' ) {\n\tif ( sf->subfontcnt!=0 )\n\t    sprintf( buffer, \"Version %f \", (double)sf->cidversion );\n\telse if ( sf->version!=NULL )\n\t    sprintf(buffer,\"Version %.20s \", sf->version);\n\telse\n\t    strcpy(buffer,\"Version 1.0\" );\n\tdummy->names[ttf_version] = copy(buffer);\n    }\n    if ( dummy->names[ttf_postscriptname]==NULL || *dummy->names[ttf_postscriptname]=='\\0' )\n\tdummy->names[ttf_postscriptname] = utf8_verify_copy(sf->fontname);\n}",
  "abstract_func": "void DefaultTTFEnglishNames(struct ttflangname *VAR_0, SplineFont *VAR_1) {\n    time_t VAR_2;\n    struct tm *tm;\n    char VAR_3[200];\n\n    if ( VAR_0->names[VAR_4]==NULL || *VAR_0->names[VAR_4]=='\\0' )\n\tVAR_0->names[VAR_4] = utf8_verify_copy(VAR_1->copyright);\n    if ( VAR_0->names[VAR_5]==NULL || *VAR_0->names[VAR_5]=='\\0' )\n\tVAR_0->names[VAR_5] = utf8_verify_copy(VAR_1->familyname);\n    if ( VAR_0->names[VAR_6]==NULL || *VAR_0->names[VAR_6]=='\\0' )\n\tVAR_0->names[VAR_6] = utf8_verify_copy(SFGetModifiers(VAR_1));\n    if ( VAR_0->names[VAR_7]==NULL || *VAR_0->names[VAR_7]=='\\0' ) {\n\ttime(&VAR_2);\n\ttm = localtime(&VAR_2);\n\tsnprintf( VAR_3, sizeof(VAR_3), \"%s : %s : %d-%d-%d\",\n\t\tVAR_8?VAR_8:VAR_9?VAR_9:\"FontForge 2.0\",\n\t\tVAR_1->fullname!=NULL?VAR_1->fullname:VAR_1->fontname,\n\t\ttm->tm_mday, tm->tm_mon+1, tm->tm_year+1900 );\n\tVAR_0->names[VAR_7] = copy(VAR_3);\n    }\n    if ( VAR_0->names[VAR_10]==NULL || *VAR_0->names[VAR_10]=='\\0' )\n\tVAR_0->names[VAR_10] = utf8_verify_copy(VAR_1->fullname);\n    if ( VAR_0->names[VAR_11]==NULL || *VAR_0->names[VAR_11]=='\\0' ) {\n\tif ( VAR_1->subfontcnt!=0 )\n\t    sprintf( VAR_3, \"Version %f \", (double)VAR_1->cidversion );\n\telse if ( VAR_1->version!=NULL )\n\t    sprintf(VAR_3,\"Version %.20s \", VAR_1->version);\n\telse\n\t    strcpy(VAR_3,\"Version 1.0\" );\n\tVAR_0->names[VAR_11] = copy(VAR_3);\n    }\n    if ( VAR_0->names[VAR_12]==NULL || *VAR_0->names[VAR_12]=='\\0' )\n\tVAR_0->names[VAR_12] = utf8_verify_copy(VAR_1->fontname);\n}",
  "func_graph_path": "fontforge/4de0c58a01e5e30610c200e9aea98bc7db12c7ac/tottf.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -12,7 +12,7 @@\n     if ( dummy->names[ttf_uniqueid]==NULL || *dummy->names[ttf_uniqueid]=='\\0' ) {\n \ttime(&now);\n \ttm = localtime(&now);\n-\tsprintf( buffer, \"%s : %s : %d-%d-%d\",\n+\tsnprintf( buffer, sizeof(buffer), \"%s : %s : %d-%d-%d\",\n \t\tBDFFoundry?BDFFoundry:TTFFoundry?TTFFoundry:\"FontForge 2.0\",\n \t\tsf->fullname!=NULL?sf->fullname:sf->fontname,\n \t\ttm->tm_mday, tm->tm_mon+1, tm->tm_year+1900 );",
  "diff_line_info": {
    "deleted_lines": [
      "\tsprintf( buffer, \"%s : %s : %d-%d-%d\","
    ],
    "added_lines": [
      "\tsnprintf( buffer, sizeof(buffer), \"%s : %s : %d-%d-%d\","
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/fontforge/fontforge/pull/3124",
  "description": {
    "pr_info": {
      "title": "Fix a few cves",
      "number": 3124
    },
    "comment": [
      "So the long and the short of it is that FontForge was not designed with security in mind. I would not be surprised at all if a simple permutation on the test cases resulted in another buffer overflow/out of bounds read/etc. There's just too many cases to cover.\r\n\r\nAnyway, this fixes most of the *specific* test cases as listed in #3123. I've avoided #3097 and #3098 which involves changing the codegen around the unicode library. For any other issue in that list where there isn't a specific commit, it's probably been fixed as a side effect of one of the other commits.",
      "Just in time. I'm cutting a release tomorrow. I'll review as soon as I get a chance.\r\n",
      "I made one inline comment/query. It otherwise looks fine.\r\n",
      "All good.\r\n"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 1.0  \nThe patch addresses buffer overflow and out-of-bounds read issues by replacing `sprintf` with `snprintf`, which prevents overflow. The commit message aligns perfectly with the code change and the vulnerability description.\n\n---\n\n**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 1.0"
}