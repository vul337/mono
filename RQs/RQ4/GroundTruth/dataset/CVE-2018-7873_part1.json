{
  "cve_id": "CVE-2018-7873",
  "cwe_ids": [
    "CWE-787"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "libming",
  "commit_msg": "decompile: fix buffer-overflow in getString\n\ngetString prints a 32 bit integer to a 10 char buffer, but the number\nitself has 10 digits so there's an overflow.\n\nSimilar to #116, same fix.\n\nFixes #111, CVE-2018-7873.",
  "commit_hash": "efc75c28e89fe864cf0412d5a5f0b4a451e14509",
  "git_url": "https://github.com/libming/libming/commit/efc75c28e89fe864cf0412d5a5f0b4a451e14509",
  "file_path": "util/decompile.c",
  "func_name": "getString",
  "func_before": "static char *\ngetString(struct SWF_ACTIONPUSHPARAM *act)\n{\n\tchar *t;\n#ifdef DEBUG\n\tprintf(\"*getString* type=%d\\n\",act->Type);\n#endif\n\tswitch( act->Type ) \n\t{\n\tcase PUSH_STRING: \n\t\tif (!act->p.String) /* Not a NULL string */\n\t\t{\n\t\t        SWF_warn(\"WARNING: Call to getString with NULL string.\\n\");\n\t\t        break;\n\t\t}\n\t\tt=malloc(strlen(act->p.String)+3); /* 2 \"'\"s and a NULL */\n\t\tstrcpy(t,\"'\");\n\t\tstrcat(t,act->p.String);\n\t\tstrcat(t,\"'\");\n\t\treturn t;\n\tcase PUSH_NULL: /* NULL */\n\t\treturn \"null\";\n\tcase PUSH_UNDEF: /* Undefined */\n\t\treturn \"undefined\";\n\tcase PUSH_REGISTER: /* REGISTER */\n\t\tif( regs[act->p.RegisterNumber] &&\n\t\t    regs[act->p.RegisterNumber]->Type != 4 &&\n\t\t    regs[act->p.RegisterNumber]->Type != 7 )\n\t\t{\n\t\t\treturn getName(regs[act->p.RegisterNumber]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tt=malloc(5); /* Rddd */\n\t\t\tsprintf(t,\"R%d\", act->p.RegisterNumber );\n\t\t\treturn t;\n\t\t}\n\tcase PUSH_BOOLEAN: /* BOOLEAN */\n\t\tif( act->p.Boolean )\n\t\t\treturn \"true\";\n\t\telse\n\t\t\treturn \"false\";\n\tcase PUSH_DOUBLE: /* DOUBLE */\n\t{\n\t\tchar length_finder[1];\n\t\tint needed_length = snprintf(length_finder, 1, \"%g\", act->p.Double) + 1;\n\t\tif (needed_length <= 0)\n\t\t{\n\t\t        SWF_warn(\"WARNING: could not evaluate size of buffer (memory issue ?).\\n\");\n\t\t        break;\n\t\t}\n\n\t\tt = malloc(needed_length);\n\t\tsprintf(t, \"%g\", act->p.Double );\n\t\treturn t;\n\t}\n\tcase PUSH_INT: /* INTEGER */\n\t\tt=malloc(10); /* 32-bit decimal */\n\t\tsprintf(t,\"%ld\", act->p.Integer );\n\t\treturn t;\n\tcase PUSH_CONSTANT: /* CONSTANT8 */\n\t\tif (act->p.Constant8 > poolcounter)\n\t\t{\n\t\t        SWF_warn(\"WARNING: retrieving constants not present in the pool.\\n\");\n\t\t        break;\n\t\t}\n\t\tt=malloc(strlenext(pool[act->p.Constant8])+3); /* 2 \"'\"s and a NULL */\n\t\tstrcpy(t,\"'\");\n\t\tstrcatext(t,pool[act->p.Constant8]);\n\t\tstrcat(t,\"'\");\n\t\treturn t;\n\tcase PUSH_CONSTANT16: /* CONSTANT16 */\n\t\tif (act->p.Constant16 > poolcounter)\n\t\t{\n\t\t        SWF_warn(\"WARNING: retrieving constants not present in the pool.\\n\");\n\t\t        break;\n\t\t}\n\t\tt=malloc(strlenext(pool[act->p.Constant16])+3); /* 2 '\\\"'s and a NULL */\n\t\tstrcpy(t,\"'\");\n\t\tstrcatext(t,pool[act->p.Constant16]);\n\t\tstrcat(t,\"'\");\n\t\treturn t;\n\n\tcase 12:\n\tcase 11: /* INCREMENTED or DECREMENTED VARIABLE */\n\tcase PUSH_VARIABLE: /* VARIABLE */\n\t\treturn act->p.String;\n\tdefault: \n\t\tfprintf (stderr,\"  Can't get string for type: %d\\n\", act->Type);\n\t\tbreak;\n\t}\n\n\tt = malloc(sizeof(char));\n\tstrcpyext(t,\"\");\n\n\treturn t;\n}",
  "abstract_func_before": "static char *\ngetString(struct SWF_ACTIONPUSHPARAM *VAR_0)\n{\n\tchar *VAR_1;\n#ifdef VAR_2\n\tprintf(\"*getString* type=%d\\n\",VAR_0->Type);\n#endif\n\tswitch( VAR_0->Type ) \n\t{\n\tcase VAR_3: \n\t\tif (!VAR_0->p.String) /* COMMENT_0 */\n\t\t{\n\t\t        SWF_warn(\"WARNING: Call to getString with NULL string.\\n\");\n\t\t        break;\n\t\t}\n\t\tVAR_1=malloc(strlen(VAR_0->p.String)+3); /* COMMENT_1 */\n\t\tstrcpy(VAR_1,\"'\");\n\t\tstrcat(VAR_1,VAR_0->p.String);\n\t\tstrcat(VAR_1,\"'\");\n\t\treturn VAR_1;\n\tcase VAR_4: /* COMMENT_2 */\n\t\treturn \"null\";\n\tcase VAR_5: /* COMMENT_3 */\n\t\treturn \"undefined\";\n\tcase VAR_6: /* COMMENT_4 */\n\t\tif( VAR_7[VAR_0->p.RegisterNumber] &&\n\t\t    VAR_7[VAR_0->p.RegisterNumber]->Type != 4 &&\n\t\t    VAR_7[VAR_0->p.RegisterNumber]->Type != 7 )\n\t\t{\n\t\t\treturn getName(VAR_7[VAR_0->p.RegisterNumber]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tVAR_1=malloc(5); /* COMMENT_5 */\n\t\t\tsprintf(VAR_1,\"R%d\", VAR_0->p.RegisterNumber );\n\t\t\treturn VAR_1;\n\t\t}\n\tcase VAR_8: /* COMMENT_6 */\n\t\tif( VAR_0->p.Boolean )\n\t\t\treturn \"true\";\n\t\telse\n\t\t\treturn \"false\";\n\tcase VAR_9: /* COMMENT_7 */\n\t{\n\t\tchar VAR_10[1];\n\t\tint VAR_11 = snprintf(VAR_10, 1, \"%g\", VAR_0->p.Double) + 1;\n\t\tif (VAR_11 <= 0)\n\t\t{\n\t\t        SWF_warn(\"WARNING: could not evaluate size of buffer (memory issue ?).\\n\");\n\t\t        break;\n\t\t}\n\n\t\tVAR_1 = malloc(VAR_11);\n\t\tsprintf(VAR_1, \"%g\", VAR_0->p.Double );\n\t\treturn VAR_1;\n\t}\n\tcase VAR_12: /* COMMENT_8 */\n\t\tVAR_1=malloc(10); /* COMMENT_9 */\n\t\tsprintf(VAR_1,\"%ld\", VAR_0->p.Integer );\n\t\treturn VAR_1;\n\tcase VAR_13: /* COMMENT_10 */\n\t\tif (VAR_0->p.Constant8 > VAR_14)\n\t\t{\n\t\t        SWF_warn(\"WARNING: retrieving constants not present in the pool.\\n\");\n\t\t        break;\n\t\t}\n\t\tVAR_1=malloc(strlenext(VAR_15[VAR_0->p.Constant8])+3); /* COMMENT_1 */\n\t\tstrcpy(VAR_1,\"'\");\n\t\tstrcatext(VAR_1,VAR_15[VAR_0->p.Constant8]);\n\t\tstrcat(VAR_1,\"'\");\n\t\treturn VAR_1;\n\tcase VAR_16: /* COMMENT_11 */\n\t\tif (VAR_0->p.Constant16 > VAR_14)\n\t\t{\n\t\t        SWF_warn(\"WARNING: retrieving constants not present in the pool.\\n\");\n\t\t        break;\n\t\t}\n\t\tVAR_1=malloc(strlenext(VAR_15[VAR_0->p.Constant16])+3); /* COMMENT_12 */\n\t\tstrcpy(VAR_1,\"'\");\n\t\tstrcatext(VAR_1,VAR_15[VAR_0->p.Constant16]);\n\t\tstrcat(VAR_1,\"'\");\n\t\treturn VAR_1;\n\n\tcase 12:\n\tcase 11: /* COMMENT_13 */\n\tcase VAR_17: /* COMMENT_14 */\n\t\treturn VAR_0->p.String;\n\tdefault: \n\t\tfprintf (VAR_18,\"  Can't get string for type: %d\\n\", VAR_0->Type);\n\t\tbreak;\n\t}\n\n\tVAR_1 = malloc(sizeof(char));\n\tstrcpyext(VAR_1,\"\");\n\n\treturn VAR_1;\n}",
  "func_graph_path_before": "libming/efc75c28e89fe864cf0412d5a5f0b4a451e14509/decompile.c/vul/before/0.json",
  "func": "static char *\ngetString(struct SWF_ACTIONPUSHPARAM *act)\n{\n\tchar *t;\n#ifdef DEBUG\n\tprintf(\"*getString* type=%d\\n\",act->Type);\n#endif\n\tswitch( act->Type ) \n\t{\n\tcase PUSH_STRING: \n\t\tif (!act->p.String) /* Not a NULL string */\n\t\t{\n\t\t        SWF_warn(\"WARNING: Call to getString with NULL string.\\n\");\n\t\t        break;\n\t\t}\n\t\tt=malloc(strlen(act->p.String)+3); /* 2 \"'\"s and a NULL */\n\t\tstrcpy(t,\"'\");\n\t\tstrcat(t,act->p.String);\n\t\tstrcat(t,\"'\");\n\t\treturn t;\n\tcase PUSH_NULL: /* NULL */\n\t\treturn \"null\";\n\tcase PUSH_UNDEF: /* Undefined */\n\t\treturn \"undefined\";\n\tcase PUSH_REGISTER: /* REGISTER */\n\t\tif( regs[act->p.RegisterNumber] &&\n\t\t    regs[act->p.RegisterNumber]->Type != 4 &&\n\t\t    regs[act->p.RegisterNumber]->Type != 7 )\n\t\t{\n\t\t\treturn getName(regs[act->p.RegisterNumber]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tt=malloc(5); /* Rddd */\n\t\t\tsprintf(t,\"R%d\", act->p.RegisterNumber );\n\t\t\treturn t;\n\t\t}\n\tcase PUSH_BOOLEAN: /* BOOLEAN */\n\t\tif( act->p.Boolean )\n\t\t\treturn \"true\";\n\t\telse\n\t\t\treturn \"false\";\n\tcase PUSH_DOUBLE: /* DOUBLE */\n\t{\n\t\tchar length_finder[1];\n\t\tint needed_length = snprintf(length_finder, 1, \"%g\", act->p.Double) + 1;\n\t\tif (needed_length <= 0)\n\t\t{\n\t\t        SWF_warn(\"WARNING: could not evaluate size of buffer (memory issue ?).\\n\");\n\t\t        break;\n\t\t}\n\n\t\tt = malloc(needed_length);\n\t\tsprintf(t, \"%g\", act->p.Double );\n\t\treturn t;\n\t}\n\tcase PUSH_INT: /* INTEGER */\n\t{\n\t\tchar length_finder[1];\n\t\tint needed_length = snprintf(length_finder, 1, \"%ld\", act->p.Integer) + 1;\n\t\tif (needed_length <= 0)\n\t\t{\n\t\t        SWF_warn(\"WARNING: could not evaluate size of buffer (memory issue ?).\\n\");\n\t\t        break;\n\t\t}\n\n\t\tt = malloc(needed_length);\n\t\tsprintf(t, \"%ld\", act->p.Integer );\n\t\treturn t;\n\t}\n\tcase PUSH_CONSTANT: /* CONSTANT8 */\n\t\tif (act->p.Constant8 > poolcounter)\n\t\t{\n\t\t        SWF_warn(\"WARNING: retrieving constants not present in the pool.\\n\");\n\t\t        break;\n\t\t}\n\t\tt=malloc(strlenext(pool[act->p.Constant8])+3); /* 2 \"'\"s and a NULL */\n\t\tstrcpy(t,\"'\");\n\t\tstrcatext(t,pool[act->p.Constant8]);\n\t\tstrcat(t,\"'\");\n\t\treturn t;\n\tcase PUSH_CONSTANT16: /* CONSTANT16 */\n\t\tif (act->p.Constant16 > poolcounter)\n\t\t{\n\t\t        SWF_warn(\"WARNING: retrieving constants not present in the pool.\\n\");\n\t\t        break;\n\t\t}\n\t\tt=malloc(strlenext(pool[act->p.Constant16])+3); /* 2 '\\\"'s and a NULL */\n\t\tstrcpy(t,\"'\");\n\t\tstrcatext(t,pool[act->p.Constant16]);\n\t\tstrcat(t,\"'\");\n\t\treturn t;\n\n\tcase 12:\n\tcase 11: /* INCREMENTED or DECREMENTED VARIABLE */\n\tcase PUSH_VARIABLE: /* VARIABLE */\n\t\treturn act->p.String;\n\tdefault: \n\t\tfprintf (stderr,\"  Can't get string for type: %d\\n\", act->Type);\n\t\tbreak;\n\t}\n\n\tt = malloc(sizeof(char));\n\tstrcpyext(t,\"\");\n\n\treturn t;\n}",
  "abstract_func": "static char *\ngetString(struct SWF_ACTIONPUSHPARAM *VAR_0)\n{\n\tchar *VAR_1;\n#ifdef VAR_2\n\tprintf(\"*getString* type=%d\\n\",VAR_0->Type);\n#endif\n\tswitch( VAR_0->Type ) \n\t{\n\tcase VAR_3: \n\t\tif (!VAR_0->p.String) /* COMMENT_0 */\n\t\t{\n\t\t        SWF_warn(\"WARNING: Call to getString with NULL string.\\n\");\n\t\t        break;\n\t\t}\n\t\tVAR_1=malloc(strlen(VAR_0->p.String)+3); /* COMMENT_1 */\n\t\tstrcpy(VAR_1,\"'\");\n\t\tstrcat(VAR_1,VAR_0->p.String);\n\t\tstrcat(VAR_1,\"'\");\n\t\treturn VAR_1;\n\tcase VAR_4: /* COMMENT_2 */\n\t\treturn \"null\";\n\tcase VAR_5: /* COMMENT_3 */\n\t\treturn \"undefined\";\n\tcase VAR_6: /* COMMENT_4 */\n\t\tif( VAR_7[VAR_0->p.RegisterNumber] &&\n\t\t    VAR_7[VAR_0->p.RegisterNumber]->Type != 4 &&\n\t\t    VAR_7[VAR_0->p.RegisterNumber]->Type != 7 )\n\t\t{\n\t\t\treturn getName(VAR_7[VAR_0->p.RegisterNumber]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tVAR_1=malloc(5); /* COMMENT_5 */\n\t\t\tsprintf(VAR_1,\"R%d\", VAR_0->p.RegisterNumber );\n\t\t\treturn VAR_1;\n\t\t}\n\tcase VAR_8: /* COMMENT_6 */\n\t\tif( VAR_0->p.Boolean )\n\t\t\treturn \"true\";\n\t\telse\n\t\t\treturn \"false\";\n\tcase VAR_9: /* COMMENT_7 */\n\t{\n\t\tchar VAR_10[1];\n\t\tint VAR_11 = snprintf(VAR_10, 1, \"%g\", VAR_0->p.Double) + 1;\n\t\tif (VAR_11 <= 0)\n\t\t{\n\t\t        SWF_warn(\"WARNING: could not evaluate size of buffer (memory issue ?).\\n\");\n\t\t        break;\n\t\t}\n\n\t\tVAR_1 = malloc(VAR_11);\n\t\tsprintf(VAR_1, \"%g\", VAR_0->p.Double );\n\t\treturn VAR_1;\n\t}\n\tcase VAR_12: /* COMMENT_8 */\n\t{\n\t\tchar VAR_10[1];\n\t\tint VAR_11 = snprintf(VAR_10, 1, \"%ld\", VAR_0->p.Integer) + 1;\n\t\tif (VAR_11 <= 0)\n\t\t{\n\t\t        SWF_warn(\"WARNING: could not evaluate size of buffer (memory issue ?).\\n\");\n\t\t        break;\n\t\t}\n\n\t\tVAR_1 = malloc(VAR_11);\n\t\tsprintf(VAR_1, \"%ld\", VAR_0->p.Integer );\n\t\treturn VAR_1;\n\t}\n\tcase VAR_13: /* COMMENT_9 */\n\t\tif (VAR_0->p.Constant8 > VAR_14)\n\t\t{\n\t\t        SWF_warn(\"WARNING: retrieving constants not present in the pool.\\n\");\n\t\t        break;\n\t\t}\n\t\tVAR_1=malloc(strlenext(VAR_15[VAR_0->p.Constant8])+3); /* COMMENT_1 */\n\t\tstrcpy(VAR_1,\"'\");\n\t\tstrcatext(VAR_1,VAR_15[VAR_0->p.Constant8]);\n\t\tstrcat(VAR_1,\"'\");\n\t\treturn VAR_1;\n\tcase VAR_16: /* COMMENT_10 */\n\t\tif (VAR_0->p.Constant16 > VAR_14)\n\t\t{\n\t\t        SWF_warn(\"WARNING: retrieving constants not present in the pool.\\n\");\n\t\t        break;\n\t\t}\n\t\tVAR_1=malloc(strlenext(VAR_15[VAR_0->p.Constant16])+3); /* COMMENT_11 */\n\t\tstrcpy(VAR_1,\"'\");\n\t\tstrcatext(VAR_1,VAR_15[VAR_0->p.Constant16]);\n\t\tstrcat(VAR_1,\"'\");\n\t\treturn VAR_1;\n\n\tcase 12:\n\tcase 11: /* COMMENT_12 */\n\tcase VAR_17: /* COMMENT_13 */\n\t\treturn VAR_0->p.String;\n\tdefault: \n\t\tfprintf (VAR_18,\"  Can't get string for type: %d\\n\", VAR_0->Type);\n\t\tbreak;\n\t}\n\n\tVAR_1 = malloc(sizeof(char));\n\tstrcpyext(VAR_1,\"\");\n\n\treturn VAR_1;\n}",
  "func_graph_path": "libming/efc75c28e89fe864cf0412d5a5f0b4a451e14509/decompile.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -55,9 +55,19 @@\n \t\treturn t;\n \t}\n \tcase PUSH_INT: /* INTEGER */\n-\t\tt=malloc(10); /* 32-bit decimal */\n-\t\tsprintf(t,\"%ld\", act->p.Integer );\n+\t{\n+\t\tchar length_finder[1];\n+\t\tint needed_length = snprintf(length_finder, 1, \"%ld\", act->p.Integer) + 1;\n+\t\tif (needed_length <= 0)\n+\t\t{\n+\t\t        SWF_warn(\"WARNING: could not evaluate size of buffer (memory issue ?).\\n\");\n+\t\t        break;\n+\t\t}\n+\n+\t\tt = malloc(needed_length);\n+\t\tsprintf(t, \"%ld\", act->p.Integer );\n \t\treturn t;\n+\t}\n \tcase PUSH_CONSTANT: /* CONSTANT8 */\n \t\tif (act->p.Constant8 > poolcounter)\n \t\t{",
  "diff_line_info": {
    "deleted_lines": [
      "\t\tt=malloc(10); /* 32-bit decimal */",
      "\t\tsprintf(t,\"%ld\", act->p.Integer );"
    ],
    "added_lines": [
      "\t{",
      "\t\tchar length_finder[1];",
      "\t\tint needed_length = snprintf(length_finder, 1, \"%ld\", act->p.Integer) + 1;",
      "\t\tif (needed_length <= 0)",
      "\t\t{",
      "\t\t        SWF_warn(\"WARNING: could not evaluate size of buffer (memory issue ?).\\n\");",
      "\t\t        break;",
      "\t\t}",
      "",
      "\t\tt = malloc(needed_length);",
      "\t\tsprintf(t, \"%ld\", act->p.Integer );",
      "\t}"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/libming/libming/pull/145",
  "description": {
    "pr_info": {
      "title": "decompile: fix various security issues",
      "number": 145
    },
    "comment": [
      "Hi,\r\n\r\nThis PR addresses the following security issues:\r\n- `CVE-2018-9132`, issue #133\r\n- `CVE-2018-9009`, issue #131\r\n- `CVE-2018-7876`, issue #109\r\n- `CVE-2018-7873`, issue #111\r\n- `CVE-2018-7866`, issue #118\r\n\r\nAs always, I'll be happy to provide additional information !\r\n\r\nThanks !",
      "(By the way, thanks for adding me to the group, but even if I have the permissions to merge now I still consider it essential to get an external review before getting any line of code into the master)",
      "Just noticed some NEWS entries are missing. Will be fixed soon.",
      "Do you want to include an entry for merged PR #138 since you're at it ?",
      "Thanks for the great work guys!\r\n\r\nwell.. i have some doubts, with the death of the flash, this library still be useful?\r\n\r\nin other words, AS3 is supported?",
      "@hlef how about fixing those NEWS entries so we merge this ?\r\n@Guardian820 Ming does not support AS3"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "The commit addresses a buffer overflow by dynamically allocating the correct buffer size, referencing a CVE. All elements confirm it's a security fix.\n\n**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 1.0"
}