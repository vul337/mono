{
  "cve_id": "CVE-2022-44262",
  "cwe_ids": [
    "CWE-Other"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
  "cvss_is_v3": true,
  "repo_name": "ff4j",
  "commit_msg": "fix: CVE-2022-44262 (#624)",
  "commit_hash": "481ca723a57f87eca931196ec9a772967ab70b3b",
  "git_url": "https://github.com/ff4j/ff4j/commit/481ca723a57f87eca931196ec9a772967ab70b3b",
  "file_path": "ff4j-core/src/main/java/org/ff4j/property/util/PropertyFactory.java",
  "func_name": "createProperty",
  "func_before": "public static Property<?> createProperty(String pName, String pType, String pValue, String desc, Set < String > fixedValues) {\n        Util.assertNotNull(pName);\n        Util.assertNotNull(pType);\n        Property<?> ap = null;\n        try {\n            Constructor<?> constr = Class.forName(pType).getConstructor(String.class, String.class);\n            ap = (Property<?>) constr.newInstance(pName, pValue);\n            ap.setDescription(desc);\n            // Is there any fixed Value ?\n            if (fixedValues != null && !fixedValues.isEmpty()) {\n                for (String v : fixedValues) {\n                    ap.add2FixedValueFromString(v.trim());\n                }\n                // Should be filled before test\n                if (!ap.getFixedValues().contains(ap.getValue())) {\n                    throw new IllegalArgumentException(\"Cannot create property <\" + ap.getName() + \"> invalid value <\"\n                                + ap.getValue() + \"> expected one of \" + ap.getFixedValues());\n                }\n            }\n            return ap;\n        } catch (Exception e) {\n            throw new IllegalArgumentException(\"Cannot instantiate '\" + pType + \"' check default constructor : \" + e.getMessage(), e);\n        }\n    }",
  "abstract_func_before": "public static Property<?> createProperty(String VAR_0, String VAR_1, String VAR_2, String VAR_3, Set < String > VAR_4) {\n        VAR_5.assertNotNull(VAR_0);\n        VAR_5.assertNotNull(VAR_1);\n        Property<?> VAR_6 = null;\n        try {\n            Constructor<?> VAR_7 = VAR_8.forName(VAR_1).getConstructor(String.class, String.class);\n            VAR_6 = (Property<?>) VAR_7.newInstance(VAR_0, VAR_2);\n            VAR_6.setDescription(VAR_3);\n            /* COMMENT_0 */\n            if (VAR_4 != null && !VAR_4.isEmpty()) {\n                for (String VAR_9 : VAR_4) {\n                    VAR_6.add2FixedValueFromString(VAR_9.trim());\n                }\n                /* COMMENT_1 */\n                if (!VAR_6.getFixedValues().contains(VAR_6.getValue())) {\n                    throw new IllegalArgumentException(\"Cannot create property <\" + VAR_6.getName() + \"> invalid value <\"\n                                + VAR_6.getValue() + \"> expected one of \" + VAR_6.getFixedValues());\n                }\n            }\n            return VAR_6;\n        } catch (Exception VAR_10) {\n            throw new IllegalArgumentException(\"Cannot instantiate '\" + VAR_1 + \"' check default constructor : \" + VAR_10.getMessage(), VAR_10);\n        }\n    }",
  "func_graph_path_before": "ff4j/481ca723a57f87eca931196ec9a772967ab70b3b/PropertyFactory.java/vul/before/0.json",
  "func": "public static Property<?> createProperty(String pName, String pType, String pValue, String desc, Set < String > fixedValues) {\n        Util.assertNotNull(pName);\n        Util.assertNotNull(pType);\n        Property<?> ap = null;\n        try {\n            Class<?> typeClass = Class.forName(pType);\n            if (!Property.class.isAssignableFrom(typeClass)) {\n                throw new IllegalArgumentException(\"Cannot create property <\" + pName + \"> invalid type <\" + pType + \">\");\n            }\n            Constructor<?> constr = typeClass.getConstructor(String.class, String.class);\n            ap = (Property<?>) constr.newInstance(pName, pValue);\n            ap.setDescription(desc);\n            // Is there any fixed Value ?\n            if (fixedValues != null && !fixedValues.isEmpty()) {\n                for (String v : fixedValues) {\n                    ap.add2FixedValueFromString(v.trim());\n                }\n                // Should be filled before test\n                if (!ap.getFixedValues().contains(ap.getValue())) {\n                    throw new IllegalArgumentException(\"Cannot create property <\" + ap.getName() + \"> invalid value <\"\n                                + ap.getValue() + \"> expected one of \" + ap.getFixedValues());\n                }\n            }\n            return ap;\n        } catch (Exception e) {\n            throw new IllegalArgumentException(\"Cannot instantiate '\" + pType + \"' check default constructor : \" + e.getMessage(), e);\n        }\n    }",
  "abstract_func": "public static Property<?> createProperty(String VAR_0, String VAR_1, String VAR_2, String VAR_3, Set < String > VAR_4) {\n        VAR_5.assertNotNull(VAR_0);\n        VAR_5.assertNotNull(VAR_1);\n        Property<?> VAR_6 = null;\n        try {\n            Class<?> VAR_7 = VAR_8.forName(VAR_1);\n            if (!Property.class.isAssignableFrom(VAR_7)) {\n                throw new IllegalArgumentException(\"Cannot create property <\" + VAR_0 + \"> invalid type <\" + VAR_1 + \">\");\n            }\n            Constructor<?> VAR_9 = VAR_7.getConstructor(String.class, String.class);\n            VAR_6 = (Property<?>) VAR_9.newInstance(VAR_0, VAR_2);\n            VAR_6.setDescription(VAR_3);\n            /* COMMENT_0 */\n            if (VAR_4 != null && !VAR_4.isEmpty()) {\n                for (String VAR_10 : VAR_4) {\n                    VAR_6.add2FixedValueFromString(VAR_10.trim());\n                }\n                /* COMMENT_1 */\n                if (!VAR_6.getFixedValues().contains(VAR_6.getValue())) {\n                    throw new IllegalArgumentException(\"Cannot create property <\" + VAR_6.getName() + \"> invalid value <\"\n                                + VAR_6.getValue() + \"> expected one of \" + VAR_6.getFixedValues());\n                }\n            }\n            return VAR_6;\n        } catch (Exception VAR_11) {\n            throw new IllegalArgumentException(\"Cannot instantiate '\" + VAR_1 + \"' check default constructor : \" + VAR_11.getMessage(), VAR_11);\n        }\n    }",
  "func_graph_path": "ff4j/481ca723a57f87eca931196ec9a772967ab70b3b/PropertyFactory.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -3,7 +3,11 @@\n         Util.assertNotNull(pType);\n         Property<?> ap = null;\n         try {\n-            Constructor<?> constr = Class.forName(pType).getConstructor(String.class, String.class);\n+            Class<?> typeClass = Class.forName(pType);\n+            if (!Property.class.isAssignableFrom(typeClass)) {\n+                throw new IllegalArgumentException(\"Cannot create property <\" + pName + \"> invalid type <\" + pType + \">\");\n+            }\n+            Constructor<?> constr = typeClass.getConstructor(String.class, String.class);\n             ap = (Property<?>) constr.newInstance(pName, pValue);\n             ap.setDescription(desc);\n             // Is there any fixed Value ?",
  "diff_line_info": {
    "deleted_lines": [
      "            Constructor<?> constr = Class.forName(pType).getConstructor(String.class, String.class);"
    ],
    "added_lines": [
      "            Class<?> typeClass = Class.forName(pType);",
      "            if (!Property.class.isAssignableFrom(typeClass)) {",
      "                throw new IllegalArgumentException(\"Cannot create property <\" + pName + \"> invalid type <\" + pType + \">\");",
      "            }",
      "            Constructor<?> constr = typeClass.getConstructor(String.class, String.class);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/ff4j/ff4j/pull/625",
  "description": {
    "pr_info": {
      "title": "fix: CVE-2022-44262 (#624)",
      "number": 625
    },
    "comment": [
      "Fixes #624 \r\n\r\nThis asserts that the Property being constructed extends `org.ff4j.property.Property`\r\n\r\n```\r\nConstructor<?> constr = Class.forName(optionalType).getConstructor(String.class, String.class);\r\nap = (Property<?>) constr.newInstance(name, strValue);\r\n```\r\n\r\nThis seems to be what is happening in the above code:\r\n\r\n1.`Class.forName(optionalType)` retrieves the target class\r\n2. `.getConstructor(String.class, String.class)` finds a constructor on the target class that accepts two String parameters\r\n3. `constr.newInstance(name, strValue)` constructs the instance (where the side effect happens)\r\n4. `(Property<?>)` type casts the new instance of the class. This throws an IllegalArgumentException, but the instance has been created already.",
      "the RCE is present in different points of the FF4j project.\r\nAll inputs must be validated with the proper \"isAssignableFrom\" method before executing \"newInstance\" of Class.forName(\"someinputstring\")\r\nThis applies to both property and strategy parsing/creating.\r\n\r\nExamples: \r\nff4j-core:\r\norg.ff4j.utils.MappingUtil line 183\r\norg.ff4j.conf.XmlParser line 387\r\n\r\nff4j-config-yaml:\r\norg.ff4j.parser.yaml.YamlParser line 175\r\n\r\n"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 1.0"
}