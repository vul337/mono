{
  "cve_id": "CVE-2023-50471",
  "cwe_ids": [
    "CWE-476"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
  "cvss_is_v3": true,
  "repo_name": "DaveGamble/cJSON",
  "commit_msg": "add NULL checkings (#809)\n\n* add NULL checks in cJSON_SetValuestring\r\n\r\nFixes #803(CVE-2023-50472)\r\n\r\n* add NULL check in cJSON_InsertItemInArray\r\n\r\nFixes #802(CVE-2023-50471)\r\n\r\n* add tests for NULL checks\r\n\r\nadd tests for NULL checks in cJSON_InsertItemInArray and cJSON_SetValuestring",
  "commit_hash": "60ff122ef5862d04b39b150541459e7f5e35add8",
  "git_url": "https://github.com/DaveGamble/cJSON/commit/60ff122ef5862d04b39b150541459e7f5e35add8",
  "file_path": "cJSON.c",
  "func_name": "cJSON_InsertItemInArray",
  "func_before": "CJSON_PUBLIC(cJSON_bool) cJSON_InsertItemInArray(cJSON *array, int which, cJSON *newitem)\n{\n    cJSON *after_inserted = NULL;\n\n    if (which < 0)\n    {\n        return false;\n    }\n\n    after_inserted = get_array_item(array, (size_t)which);\n    if (after_inserted == NULL)\n    {\n        return add_item_to_array(array, newitem);\n    }\n\n    newitem->next = after_inserted;\n    newitem->prev = after_inserted->prev;\n    after_inserted->prev = newitem;\n    if (after_inserted == array->child)\n    {\n        array->child = newitem;\n    }\n    else\n    {\n        newitem->prev->next = newitem;\n    }\n    return true;\n}",
  "abstract_func_before": "VAR_0(cJSON_bool) cJSON_InsertItemInArray(cJSON *VAR_1, int VAR_2, cJSON *VAR_3)\n{\n    cJSON *VAR_4 = NULL;\n\n    if (VAR_2 < 0)\n    {\n        return false;\n    }\n\n    VAR_4 = get_array_item(VAR_1, (size_t)VAR_2);\n    if (VAR_4 == NULL)\n    {\n        return add_item_to_array(VAR_1, VAR_3);\n    }\n\n    VAR_3->next = VAR_4;\n    VAR_3->prev = VAR_4->prev;\n    VAR_4->prev = VAR_3;\n    if (VAR_4 == VAR_1->child)\n    {\n        VAR_1->child = VAR_3;\n    }\n    else\n    {\n        VAR_3->prev->next = VAR_3;\n    }\n    return true;\n}",
  "func_graph_path_before": null,
  "func": "CJSON_PUBLIC(cJSON_bool) cJSON_InsertItemInArray(cJSON *array, int which, cJSON *newitem)\n{\n    cJSON *after_inserted = NULL;\n\n    if (which < 0 || newitem == NULL)\n    {\n        return false;\n    }\n\n    after_inserted = get_array_item(array, (size_t)which);\n    if (after_inserted == NULL)\n    {\n        return add_item_to_array(array, newitem);\n    }\n\n    if (after_inserted != array->child && newitem->prev == NULL) {\n        /* return false if after_inserted is a corrupted array item */\n        return false;\n    }\n\n    newitem->next = after_inserted;\n    newitem->prev = after_inserted->prev;\n    after_inserted->prev = newitem;\n    if (after_inserted == array->child)\n    {\n        array->child = newitem;\n    }\n    else\n    {\n        newitem->prev->next = newitem;\n    }\n    return true;\n}",
  "abstract_func": "VAR_0(cJSON_bool) cJSON_InsertItemInArray(cJSON *VAR_1, int VAR_2, cJSON *VAR_3)\n{\n    cJSON *VAR_4 = NULL;\n\n    if (VAR_2 < 0 || VAR_3 == NULL)\n    {\n        return false;\n    }\n\n    VAR_4 = get_array_item(VAR_1, (size_t)VAR_2);\n    if (VAR_4 == NULL)\n    {\n        return add_item_to_array(VAR_1, VAR_3);\n    }\n\n    if (VAR_4 != VAR_1->child && VAR_3->prev == NULL) {\n        /* COMMENT_0 */\n        return false;\n    }\n\n    VAR_3->next = VAR_4;\n    VAR_3->prev = VAR_4->prev;\n    VAR_4->prev = VAR_3;\n    if (VAR_4 == VAR_1->child)\n    {\n        VAR_1->child = VAR_3;\n    }\n    else\n    {\n        VAR_3->prev->next = VAR_3;\n    }\n    return true;\n}",
  "func_graph_path": null,
  "diff_func": "--- func_before\n+++ func_after\n@@ -2,7 +2,7 @@\n {\n     cJSON *after_inserted = NULL;\n \n-    if (which < 0)\n+    if (which < 0 || newitem == NULL)\n     {\n         return false;\n     }\n@@ -11,6 +11,11 @@\n     if (after_inserted == NULL)\n     {\n         return add_item_to_array(array, newitem);\n+    }\n+\n+    if (after_inserted != array->child && newitem->prev == NULL) {\n+        /* return false if after_inserted is a corrupted array item */\n+        return false;\n     }\n \n     newitem->next = after_inserted;",
  "diff_line_info": {
    "deleted_lines": [
      "    if (which < 0)"
    ],
    "added_lines": [
      "    if (which < 0 || newitem == NULL)",
      "    }",
      "",
      "    if (after_inserted != array->child && newitem->prev == NULL) {",
      "        /* return false if after_inserted is a corrupted array item */",
      "        return false;"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/DaveGamble/cJSON/pull/809",
  "description": {
    "pr_info": {
      "title": "add NULL checkings",
      "number": 809
    },
    "comment": [
      "Add NULL checkings in cJSON_InsertItemInArray and cJSON_SetValuestring\r\nFixing #802(CVE-2023-50471) and #803(CVE-2023-50472)",
      "LGTM"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "The changes are specifically aimed at addressing known security vulnerabilities (CVE-2023-50471 and CVE-2023-50472) through the addition of NULL checks in specific functions. The commit message, vulnerability description, and code changes are consistent and clearly indicate a security fix.\n\n**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.9"
}