{
  "cve_id": "CVE-2023-36812",
  "cwe_ids": [
    "CWE-74"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
  "cvss_is_v3": true,
  "repo_name": "OpenTSDB/opentsdb",
  "commit_msg": "Improved fix for #2261.\nRegular expressions wouldn't catch the newlines or possibly other\ncontrol characters. Now we'll use the TAG validation code to make\nsure the inputs are only plain ASCII printables first.\nFixes CVE-2018-12972, CVE-2020-35476",
  "commit_hash": "07c4641471c6f5c2ab5aab615969e97211eb50d9",
  "git_url": "https://github.com/OpenTSDB/opentsdb/commit/07c4641471c6f5c2ab5aab615969e97211eb50d9",
  "file_path": "src/tsd/GraphHandler.java",
  "func_name": "setPlotParams",
  "func_before": "static void setPlotParams(final HttpQuery query, final Plot plot) {\n    final HashMap<String, String> params = new HashMap<String, String>();\n    final Map<String, List<String>> querystring = query.getQueryString();\n    String value;\n    if ((value = popParam(querystring, \"yrange\")) != null) {\n      if (!RANGE_VALIDATOR.matcher(value).find()) {\n        throw new BadRequestException(\"'yrange' was invalid. \"\n            + \"Must be in the format [min:max].\");\n      }\n      params.put(\"yrange\", value);\n    }\n    if ((value = popParam(querystring, \"y2range\")) != null) {\n      if (!RANGE_VALIDATOR.matcher(value).find()) {\n        throw new BadRequestException(\"'y2range' was invalid. \"\n            + \"Must be in the format [min:max].\");\n      }\n      params.put(\"y2range\", value);\n    }\n    if ((value = popParam(querystring, \"ylabel\")) != null) {\n      if (!LABEL_VALIDATOR.matcher(value).find()) {\n        throw new BadRequestException(\"'ylabel' was invalid. Must \"\n            + \"satisfy the pattern \" + LABEL_VALIDATOR.toString());\n      }\n      params.put(\"ylabel\", stringify(value));\n    }\n    if ((value = popParam(querystring, \"y2label\")) != null) {\n      if (!LABEL_VALIDATOR.matcher(value).find()) {\n        throw new BadRequestException(\"'y2label' was invalid. Must \"\n            + \"satisfy the pattern \" + LABEL_VALIDATOR.toString());\n      }\n      params.put(\"y2label\", stringify(value));\n    }\n    if ((value = popParam(querystring, \"yformat\")) != null) {\n      if (!FORMAT_VALIDATOR.matcher(value).find()) {\n        throw new BadRequestException(\"'yformat' was invalid. Must \"\n            + \"satisfy the pattern \" + FORMAT_VALIDATOR.toString());\n      }\n      params.put(\"format y\", stringify(value));\n    }\n    if ((value = popParam(querystring, \"y2format\")) != null) {\n      if (!FORMAT_VALIDATOR.matcher(value).find()) {\n        throw new BadRequestException(\"'y2format' was invalid. Must \"\n            + \"satisfy the pattern \" + FORMAT_VALIDATOR.toString());\n      }\n      params.put(\"format y2\", stringify(value));\n    }\n    if ((value = popParam(querystring, \"xformat\")) != null) {\n      if (!FORMAT_VALIDATOR.matcher(value).find()) {\n        throw new BadRequestException(\"'xformat' was invalid. Must \"\n            + \"satisfy the pattern \" + FORMAT_VALIDATOR.toString());\n      }\n      params.put(\"format x\", stringify(value));\n    }\n    if ((value = popParam(querystring, \"ylog\")) != null) {\n      params.put(\"logscale y\", \"\");\n    }\n    if ((value = popParam(querystring, \"y2log\")) != null) {\n      params.put(\"logscale y2\", \"\");\n    }\n    if ((value = popParam(querystring, \"key\")) != null) {\n      if (!KEY_VALIDATOR.matcher(value).find()) {\n        throw new BadRequestException(\"'key' was invalid. Must \"\n            + \"satisfy the pattern \" + KEY_VALIDATOR.toString());\n      }\n      params.put(\"key\", value);\n    }\n    if ((value = popParam(querystring, \"title\")) != null) {\n      if (!LABEL_VALIDATOR.matcher(value).find()) {\n        throw new BadRequestException(\"'title' was invalid. Must \"\n            + \"satisfy the pattern \" + LABEL_VALIDATOR.toString());\n      }\n      params.put(\"title\", stringify(value));\n    }\n    if ((value = popParam(querystring, \"bgcolor\")) != null) {\n      if (!COLOR_VALIDATOR.matcher(value).find()) {\n        throw new BadRequestException(\"'bgcolor' was invalid. Must \"\n            + \"be a hex value e.g. 'xFFFFFF'\");\n      }\n      params.put(\"bgcolor\", value);\n    }\n    if ((value = popParam(querystring, \"fgcolor\")) != null) {\n      if (!COLOR_VALIDATOR.matcher(value).find()) {\n        throw new BadRequestException(\"'fgcolor' was invalid. Must \"\n            + \"be a hex value e.g. 'xFFFFFF'\");\n      }\n      params.put(\"fgcolor\", value);\n    }\n    if ((value = popParam(querystring, \"smooth\")) != null) {\n      if (!SMOOTH_VALIDATOR.matcher(value).find()) {\n        throw new BadRequestException(\"'smooth' was invalid. Must \"\n            + \"satisfy the pattern \" + SMOOTH_VALIDATOR.toString());\n      }\n      params.put(\"smooth\", value);\n    }\n    if ((value = popParam(querystring, \"style\")) != null) {\n      if (!STYLE_VALIDATOR.matcher(value).find()) {\n        throw new BadRequestException(\"'style' was invalid. Must \"\n            + \"satisfy the pattern \" + STYLE_VALIDATOR.toString());\n      }\n      params.put(\"style\", value);\n    }\n    // This must remain after the previous `if' in order to properly override\n    // any previous `key' parameter if a `nokey' parameter is given.\n    if ((value = popParam(querystring, \"nokey\")) != null) {\n      params.put(\"key\", null);\n    }\n    plot.setParams(params);\n  }",
  "abstract_func_before": "static void setPlotParams(final HttpQuery VAR_0, final Plot VAR_1) {\n    final HashMap<String, String> VAR_2 = new HashMap<String, String>();\n    final Map<String, List<String>> VAR_3 = VAR_0.getQueryString();\n    String VAR_4;\n    if ((VAR_4 = popParam(VAR_3, \"yrange\")) != null) {\n      if (!VAR_5.matcher(VAR_4).find()) {\n        throw new BadRequestException(\"'yrange' was invalid. \"\n            + \"Must be in the format [min:max].\");\n      }\n      VAR_2.put(\"yrange\", VAR_4);\n    }\n    if ((VAR_4 = popParam(VAR_3, \"y2range\")) != null) {\n      if (!VAR_5.matcher(VAR_4).find()) {\n        throw new BadRequestException(\"'y2range' was invalid. \"\n            + \"Must be in the format [min:max].\");\n      }\n      VAR_2.put(\"y2range\", VAR_4);\n    }\n    if ((VAR_4 = popParam(VAR_3, \"ylabel\")) != null) {\n      if (!VAR_6.matcher(VAR_4).find()) {\n        throw new BadRequestException(\"'ylabel' was invalid. Must \"\n            + \"satisfy the pattern \" + VAR_6.toString());\n      }\n      VAR_2.put(\"ylabel\", stringify(VAR_4));\n    }\n    if ((VAR_4 = popParam(VAR_3, \"y2label\")) != null) {\n      if (!VAR_6.matcher(VAR_4).find()) {\n        throw new BadRequestException(\"'y2label' was invalid. Must \"\n            + \"satisfy the pattern \" + VAR_6.toString());\n      }\n      VAR_2.put(\"y2label\", stringify(VAR_4));\n    }\n    if ((VAR_4 = popParam(VAR_3, \"yformat\")) != null) {\n      if (!VAR_7.matcher(VAR_4).find()) {\n        throw new BadRequestException(\"'yformat' was invalid. Must \"\n            + \"satisfy the pattern \" + VAR_7.toString());\n      }\n      VAR_2.put(\"format y\", stringify(VAR_4));\n    }\n    if ((VAR_4 = popParam(VAR_3, \"y2format\")) != null) {\n      if (!VAR_7.matcher(VAR_4).find()) {\n        throw new BadRequestException(\"'y2format' was invalid. Must \"\n            + \"satisfy the pattern \" + VAR_7.toString());\n      }\n      VAR_2.put(\"format y2\", stringify(VAR_4));\n    }\n    if ((VAR_4 = popParam(VAR_3, \"xformat\")) != null) {\n      if (!VAR_7.matcher(VAR_4).find()) {\n        throw new BadRequestException(\"'xformat' was invalid. Must \"\n            + \"satisfy the pattern \" + VAR_7.toString());\n      }\n      VAR_2.put(\"format x\", stringify(VAR_4));\n    }\n    if ((VAR_4 = popParam(VAR_3, \"ylog\")) != null) {\n      VAR_2.put(\"logscale y\", \"\");\n    }\n    if ((VAR_4 = popParam(VAR_3, \"y2log\")) != null) {\n      VAR_2.put(\"logscale y2\", \"\");\n    }\n    if ((VAR_4 = popParam(VAR_3, \"key\")) != null) {\n      if (!VAR_8.matcher(VAR_4).find()) {\n        throw new BadRequestException(\"'key' was invalid. Must \"\n            + \"satisfy the pattern \" + VAR_8.toString());\n      }\n      VAR_2.put(\"key\", VAR_4);\n    }\n    if ((VAR_4 = popParam(VAR_3, \"title\")) != null) {\n      if (!VAR_6.matcher(VAR_4).find()) {\n        throw new BadRequestException(\"'title' was invalid. Must \"\n            + \"satisfy the pattern \" + VAR_6.toString());\n      }\n      VAR_2.put(\"title\", stringify(VAR_4));\n    }\n    if ((VAR_4 = popParam(VAR_3, \"bgcolor\")) != null) {\n      if (!VAR_9.matcher(VAR_4).find()) {\n        throw new BadRequestException(\"'bgcolor' was invalid. Must \"\n            + \"be a hex value e.g. 'xFFFFFF'\");\n      }\n      VAR_2.put(\"bgcolor\", VAR_4);\n    }\n    if ((VAR_4 = popParam(VAR_3, \"fgcolor\")) != null) {\n      if (!VAR_9.matcher(VAR_4).find()) {\n        throw new BadRequestException(\"'fgcolor' was invalid. Must \"\n            + \"be a hex value e.g. 'xFFFFFF'\");\n      }\n      VAR_2.put(\"fgcolor\", VAR_4);\n    }\n    if ((VAR_4 = popParam(VAR_3, \"smooth\")) != null) {\n      if (!VAR_10.matcher(VAR_4).find()) {\n        throw new BadRequestException(\"'smooth' was invalid. Must \"\n            + \"satisfy the pattern \" + VAR_10.toString());\n      }\n      VAR_2.put(\"smooth\", VAR_4);\n    }\n    if ((VAR_4 = popParam(VAR_3, \"style\")) != null) {\n      if (!VAR_11.matcher(VAR_4).find()) {\n        throw new BadRequestException(\"'style' was invalid. Must \"\n            + \"satisfy the pattern \" + VAR_11.toString());\n      }\n      VAR_2.put(\"style\", VAR_4);\n    }\n    /* COMMENT_0 */\n    /* COMMENT_1 */\n    if ((VAR_4 = popParam(VAR_3, \"nokey\")) != null) {\n      VAR_2.put(\"key\", null);\n    }\n    VAR_1.setParams(VAR_2);\n  }",
  "func_graph_path_before": "OpenTSDB/opentsdb/07c4641471c6f5c2ab5aab615969e97211eb50d9/GraphHandler.java/vul/before/0.json",
  "func": "static void setPlotParams(final HttpQuery query, final Plot plot) {\n    final HashMap<String, String> params = new HashMap<String, String>();\n    final Map<String, List<String>> querystring = query.getQueryString();\n    String value;\n    if ((value = popParam(querystring, \"yrange\")) != null) {\n      validateString(\"yrange\", value, \"[:]\");\n      if (!RANGE_VALIDATOR.matcher(value).find()) {\n        throw new BadRequestException(\"'yrange' was invalid. \"\n            + \"Must be in the format [min:max].\");\n      }\n      params.put(\"yrange\", value);\n    }\n    if ((value = popParam(querystring, \"y2range\")) != null) {\n      validateString(\"y2range\", value, \"[:]\");\n      if (!RANGE_VALIDATOR.matcher(value).find()) {\n        throw new BadRequestException(\"'y2range' was invalid. \"\n            + \"Must be in the format [min:max].\");\n      }\n      params.put(\"y2range\", value);\n    }\n    if ((value = popParam(querystring, \"ylabel\")) != null) {\n      validateString(\"ylabel\", value, \" \");\n      if (!LABEL_VALIDATOR.matcher(value).find()) {\n        throw new BadRequestException(\"'ylabel' was invalid. Must \"\n            + \"satisfy the pattern \" + LABEL_VALIDATOR.toString());\n      }\n      params.put(\"ylabel\", stringify(value));\n    }\n    if ((value = popParam(querystring, \"y2label\")) != null) {\n      validateString(\"y2label\", value, \" \");\n      if (!LABEL_VALIDATOR.matcher(value).find()) {\n        throw new BadRequestException(\"'y2label' was invalid. Must \"\n            + \"satisfy the pattern \" + LABEL_VALIDATOR.toString());\n      }\n      params.put(\"y2label\", stringify(value));\n    }\n    if ((value = popParam(querystring, \"yformat\")) != null) {\n      validateString(\"yformat\", value, \"% \");\n      if (!FORMAT_VALIDATOR.matcher(value).find()) {\n        throw new BadRequestException(\"'yformat' was invalid. Must \"\n            + \"satisfy the pattern \" + FORMAT_VALIDATOR.toString());\n      }\n      params.put(\"format y\", stringify(value));\n    }\n    if ((value = popParam(querystring, \"y2format\")) != null) {\n      validateString(\"y2format\", value, \"% \");\n      if (!FORMAT_VALIDATOR.matcher(value).find()) {\n        throw new BadRequestException(\"'y2format' was invalid. Must \"\n            + \"satisfy the pattern \" + FORMAT_VALIDATOR.toString());\n      }\n      params.put(\"format y2\", stringify(value));\n    }\n    if ((value = popParam(querystring, \"xformat\")) != null) {\n      validateString(\"xformat\", value, \"% \");\n      if (!FORMAT_VALIDATOR.matcher(value).find()) {\n        throw new BadRequestException(\"'xformat' was invalid. Must \"\n            + \"satisfy the pattern \" + FORMAT_VALIDATOR.toString());\n      }\n      params.put(\"format x\", stringify(value));\n    }\n    if ((value = popParam(querystring, \"ylog\")) != null) {\n      params.put(\"logscale y\", \"\");\n    }\n    if ((value = popParam(querystring, \"y2log\")) != null) {\n      params.put(\"logscale y2\", \"\");\n    }\n    if ((value = popParam(querystring, \"key\")) != null) {\n      validateString(\"key\", value);\n      if (!KEY_VALIDATOR.matcher(value).find()) {\n        throw new BadRequestException(\"'key' was invalid. Must \"\n            + \"satisfy the pattern \" + KEY_VALIDATOR.toString());\n      }\n      params.put(\"key\", value);\n    }\n    if ((value = popParam(querystring, \"title\")) != null) {\n      validateString(\"title\", value, \" \");\n      if (!LABEL_VALIDATOR.matcher(value).find()) {\n        throw new BadRequestException(\"'title' was invalid. Must \"\n            + \"satisfy the pattern \" + LABEL_VALIDATOR.toString());\n      }\n      params.put(\"title\", stringify(value));\n    }\n    if ((value = popParam(querystring, \"bgcolor\")) != null) {\n      validateString(\"bgcolor\", value);\n      if (!COLOR_VALIDATOR.matcher(value).find()) {\n        throw new BadRequestException(\"'bgcolor' was invalid. Must \"\n            + \"be a hex value e.g. 'xFFFFFF'\");\n      }\n      params.put(\"bgcolor\", value);\n    }\n    if ((value = popParam(querystring, \"fgcolor\")) != null) {\n      validateString(\"fgcolor\", value);\n      if (!COLOR_VALIDATOR.matcher(value).find()) {\n        throw new BadRequestException(\"'fgcolor' was invalid. Must \"\n            + \"be a hex value e.g. 'xFFFFFF'\");\n      }\n      params.put(\"fgcolor\", value);\n    }\n    if ((value = popParam(querystring, \"smooth\")) != null) {\n      validateString(\"smooth\", value);\n      if (!SMOOTH_VALIDATOR.matcher(value).find()) {\n        throw new BadRequestException(\"'smooth' was invalid. Must \"\n            + \"satisfy the pattern \" + SMOOTH_VALIDATOR.toString());\n      }\n      params.put(\"smooth\", value);\n    }\n    if ((value = popParam(querystring, \"style\")) != null) {\n      validateString(\"style\", value);\n      if (!STYLE_VALIDATOR.matcher(value).find()) {\n        throw new BadRequestException(\"'style' was invalid. Must \"\n            + \"satisfy the pattern \" + STYLE_VALIDATOR.toString());\n      }\n      params.put(\"style\", value);\n    }\n    // This must remain after the previous `if' in order to properly override\n    // any previous `key' parameter if a `nokey' parameter is given.\n    if ((value = popParam(querystring, \"nokey\")) != null) {\n      params.put(\"key\", null);\n    }\n    plot.setParams(params);\n  }",
  "abstract_func": "static void setPlotParams(final HttpQuery VAR_0, final Plot VAR_1) {\n    final HashMap<String, String> VAR_2 = new HashMap<String, String>();\n    final Map<String, List<String>> VAR_3 = VAR_0.getQueryString();\n    String VAR_4;\n    if ((VAR_4 = popParam(VAR_3, \"yrange\")) != null) {\n      validateString(\"yrange\", VAR_4, \"[:]\");\n      if (!VAR_5.matcher(VAR_4).find()) {\n        throw new BadRequestException(\"'yrange' was invalid. \"\n            + \"Must be in the format [min:max].\");\n      }\n      VAR_2.put(\"yrange\", VAR_4);\n    }\n    if ((VAR_4 = popParam(VAR_3, \"y2range\")) != null) {\n      validateString(\"y2range\", VAR_4, \"[:]\");\n      if (!VAR_5.matcher(VAR_4).find()) {\n        throw new BadRequestException(\"'y2range' was invalid. \"\n            + \"Must be in the format [min:max].\");\n      }\n      VAR_2.put(\"y2range\", VAR_4);\n    }\n    if ((VAR_4 = popParam(VAR_3, \"ylabel\")) != null) {\n      validateString(\"ylabel\", VAR_4, \" \");\n      if (!VAR_6.matcher(VAR_4).find()) {\n        throw new BadRequestException(\"'ylabel' was invalid. Must \"\n            + \"satisfy the pattern \" + VAR_6.toString());\n      }\n      VAR_2.put(\"ylabel\", stringify(VAR_4));\n    }\n    if ((VAR_4 = popParam(VAR_3, \"y2label\")) != null) {\n      validateString(\"y2label\", VAR_4, \" \");\n      if (!VAR_6.matcher(VAR_4).find()) {\n        throw new BadRequestException(\"'y2label' was invalid. Must \"\n            + \"satisfy the pattern \" + VAR_6.toString());\n      }\n      VAR_2.put(\"y2label\", stringify(VAR_4));\n    }\n    if ((VAR_4 = popParam(VAR_3, \"yformat\")) != null) {\n      validateString(\"yformat\", VAR_4, \"% \");\n      if (!VAR_7.matcher(VAR_4).find()) {\n        throw new BadRequestException(\"'yformat' was invalid. Must \"\n            + \"satisfy the pattern \" + VAR_7.toString());\n      }\n      VAR_2.put(\"format y\", stringify(VAR_4));\n    }\n    if ((VAR_4 = popParam(VAR_3, \"y2format\")) != null) {\n      validateString(\"y2format\", VAR_4, \"% \");\n      if (!VAR_7.matcher(VAR_4).find()) {\n        throw new BadRequestException(\"'y2format' was invalid. Must \"\n            + \"satisfy the pattern \" + VAR_7.toString());\n      }\n      VAR_2.put(\"format y2\", stringify(VAR_4));\n    }\n    if ((VAR_4 = popParam(VAR_3, \"xformat\")) != null) {\n      validateString(\"xformat\", VAR_4, \"% \");\n      if (!VAR_7.matcher(VAR_4).find()) {\n        throw new BadRequestException(\"'xformat' was invalid. Must \"\n            + \"satisfy the pattern \" + VAR_7.toString());\n      }\n      VAR_2.put(\"format x\", stringify(VAR_4));\n    }\n    if ((VAR_4 = popParam(VAR_3, \"ylog\")) != null) {\n      VAR_2.put(\"logscale y\", \"\");\n    }\n    if ((VAR_4 = popParam(VAR_3, \"y2log\")) != null) {\n      VAR_2.put(\"logscale y2\", \"\");\n    }\n    if ((VAR_4 = popParam(VAR_3, \"key\")) != null) {\n      validateString(\"key\", VAR_4);\n      if (!VAR_8.matcher(VAR_4).find()) {\n        throw new BadRequestException(\"'key' was invalid. Must \"\n            + \"satisfy the pattern \" + VAR_8.toString());\n      }\n      VAR_2.put(\"key\", VAR_4);\n    }\n    if ((VAR_4 = popParam(VAR_3, \"title\")) != null) {\n      validateString(\"title\", VAR_4, \" \");\n      if (!VAR_6.matcher(VAR_4).find()) {\n        throw new BadRequestException(\"'title' was invalid. Must \"\n            + \"satisfy the pattern \" + VAR_6.toString());\n      }\n      VAR_2.put(\"title\", stringify(VAR_4));\n    }\n    if ((VAR_4 = popParam(VAR_3, \"bgcolor\")) != null) {\n      validateString(\"bgcolor\", VAR_4);\n      if (!VAR_9.matcher(VAR_4).find()) {\n        throw new BadRequestException(\"'bgcolor' was invalid. Must \"\n            + \"be a hex value e.g. 'xFFFFFF'\");\n      }\n      VAR_2.put(\"bgcolor\", VAR_4);\n    }\n    if ((VAR_4 = popParam(VAR_3, \"fgcolor\")) != null) {\n      validateString(\"fgcolor\", VAR_4);\n      if (!VAR_9.matcher(VAR_4).find()) {\n        throw new BadRequestException(\"'fgcolor' was invalid. Must \"\n            + \"be a hex value e.g. 'xFFFFFF'\");\n      }\n      VAR_2.put(\"fgcolor\", VAR_4);\n    }\n    if ((VAR_4 = popParam(VAR_3, \"smooth\")) != null) {\n      validateString(\"smooth\", VAR_4);\n      if (!VAR_10.matcher(VAR_4).find()) {\n        throw new BadRequestException(\"'smooth' was invalid. Must \"\n            + \"satisfy the pattern \" + VAR_10.toString());\n      }\n      VAR_2.put(\"smooth\", VAR_4);\n    }\n    if ((VAR_4 = popParam(VAR_3, \"style\")) != null) {\n      validateString(\"style\", VAR_4);\n      if (!VAR_11.matcher(VAR_4).find()) {\n        throw new BadRequestException(\"'style' was invalid. Must \"\n            + \"satisfy the pattern \" + VAR_11.toString());\n      }\n      VAR_2.put(\"style\", VAR_4);\n    }\n    /* COMMENT_0 */\n    /* COMMENT_1 */\n    if ((VAR_4 = popParam(VAR_3, \"nokey\")) != null) {\n      VAR_2.put(\"key\", null);\n    }\n    VAR_1.setParams(VAR_2);\n  }",
  "func_graph_path": "OpenTSDB/opentsdb/07c4641471c6f5c2ab5aab615969e97211eb50d9/GraphHandler.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -3,6 +3,7 @@\n     final Map<String, List<String>> querystring = query.getQueryString();\n     String value;\n     if ((value = popParam(querystring, \"yrange\")) != null) {\n+      validateString(\"yrange\", value, \"[:]\");\n       if (!RANGE_VALIDATOR.matcher(value).find()) {\n         throw new BadRequestException(\"'yrange' was invalid. \"\n             + \"Must be in the format [min:max].\");\n@@ -10,6 +11,7 @@\n       params.put(\"yrange\", value);\n     }\n     if ((value = popParam(querystring, \"y2range\")) != null) {\n+      validateString(\"y2range\", value, \"[:]\");\n       if (!RANGE_VALIDATOR.matcher(value).find()) {\n         throw new BadRequestException(\"'y2range' was invalid. \"\n             + \"Must be in the format [min:max].\");\n@@ -17,6 +19,7 @@\n       params.put(\"y2range\", value);\n     }\n     if ((value = popParam(querystring, \"ylabel\")) != null) {\n+      validateString(\"ylabel\", value, \" \");\n       if (!LABEL_VALIDATOR.matcher(value).find()) {\n         throw new BadRequestException(\"'ylabel' was invalid. Must \"\n             + \"satisfy the pattern \" + LABEL_VALIDATOR.toString());\n@@ -24,6 +27,7 @@\n       params.put(\"ylabel\", stringify(value));\n     }\n     if ((value = popParam(querystring, \"y2label\")) != null) {\n+      validateString(\"y2label\", value, \" \");\n       if (!LABEL_VALIDATOR.matcher(value).find()) {\n         throw new BadRequestException(\"'y2label' was invalid. Must \"\n             + \"satisfy the pattern \" + LABEL_VALIDATOR.toString());\n@@ -31,6 +35,7 @@\n       params.put(\"y2label\", stringify(value));\n     }\n     if ((value = popParam(querystring, \"yformat\")) != null) {\n+      validateString(\"yformat\", value, \"% \");\n       if (!FORMAT_VALIDATOR.matcher(value).find()) {\n         throw new BadRequestException(\"'yformat' was invalid. Must \"\n             + \"satisfy the pattern \" + FORMAT_VALIDATOR.toString());\n@@ -38,6 +43,7 @@\n       params.put(\"format y\", stringify(value));\n     }\n     if ((value = popParam(querystring, \"y2format\")) != null) {\n+      validateString(\"y2format\", value, \"% \");\n       if (!FORMAT_VALIDATOR.matcher(value).find()) {\n         throw new BadRequestException(\"'y2format' was invalid. Must \"\n             + \"satisfy the pattern \" + FORMAT_VALIDATOR.toString());\n@@ -45,6 +51,7 @@\n       params.put(\"format y2\", stringify(value));\n     }\n     if ((value = popParam(querystring, \"xformat\")) != null) {\n+      validateString(\"xformat\", value, \"% \");\n       if (!FORMAT_VALIDATOR.matcher(value).find()) {\n         throw new BadRequestException(\"'xformat' was invalid. Must \"\n             + \"satisfy the pattern \" + FORMAT_VALIDATOR.toString());\n@@ -58,6 +65,7 @@\n       params.put(\"logscale y2\", \"\");\n     }\n     if ((value = popParam(querystring, \"key\")) != null) {\n+      validateString(\"key\", value);\n       if (!KEY_VALIDATOR.matcher(value).find()) {\n         throw new BadRequestException(\"'key' was invalid. Must \"\n             + \"satisfy the pattern \" + KEY_VALIDATOR.toString());\n@@ -65,6 +73,7 @@\n       params.put(\"key\", value);\n     }\n     if ((value = popParam(querystring, \"title\")) != null) {\n+      validateString(\"title\", value, \" \");\n       if (!LABEL_VALIDATOR.matcher(value).find()) {\n         throw new BadRequestException(\"'title' was invalid. Must \"\n             + \"satisfy the pattern \" + LABEL_VALIDATOR.toString());\n@@ -72,6 +81,7 @@\n       params.put(\"title\", stringify(value));\n     }\n     if ((value = popParam(querystring, \"bgcolor\")) != null) {\n+      validateString(\"bgcolor\", value);\n       if (!COLOR_VALIDATOR.matcher(value).find()) {\n         throw new BadRequestException(\"'bgcolor' was invalid. Must \"\n             + \"be a hex value e.g. 'xFFFFFF'\");\n@@ -79,6 +89,7 @@\n       params.put(\"bgcolor\", value);\n     }\n     if ((value = popParam(querystring, \"fgcolor\")) != null) {\n+      validateString(\"fgcolor\", value);\n       if (!COLOR_VALIDATOR.matcher(value).find()) {\n         throw new BadRequestException(\"'fgcolor' was invalid. Must \"\n             + \"be a hex value e.g. 'xFFFFFF'\");\n@@ -86,6 +97,7 @@\n       params.put(\"fgcolor\", value);\n     }\n     if ((value = popParam(querystring, \"smooth\")) != null) {\n+      validateString(\"smooth\", value);\n       if (!SMOOTH_VALIDATOR.matcher(value).find()) {\n         throw new BadRequestException(\"'smooth' was invalid. Must \"\n             + \"satisfy the pattern \" + SMOOTH_VALIDATOR.toString());\n@@ -93,6 +105,7 @@\n       params.put(\"smooth\", value);\n     }\n     if ((value = popParam(querystring, \"style\")) != null) {\n+      validateString(\"style\", value);\n       if (!STYLE_VALIDATOR.matcher(value).find()) {\n         throw new BadRequestException(\"'style' was invalid. Must \"\n             + \"satisfy the pattern \" + STYLE_VALIDATOR.toString());",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "      validateString(\"yrange\", value, \"[:]\");",
      "      validateString(\"y2range\", value, \"[:]\");",
      "      validateString(\"ylabel\", value, \" \");",
      "      validateString(\"y2label\", value, \" \");",
      "      validateString(\"yformat\", value, \"% \");",
      "      validateString(\"y2format\", value, \"% \");",
      "      validateString(\"xformat\", value, \"% \");",
      "      validateString(\"key\", value);",
      "      validateString(\"title\", value, \" \");",
      "      validateString(\"bgcolor\", value);",
      "      validateString(\"fgcolor\", value);",
      "      validateString(\"smooth\", value);",
      "      validateString(\"style\", value);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/OpenTSDB/opentsdb/pull/2275",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/OpenTSDB/opentsdb/pull/2275: 403 Client Error: Forbidden for url: https://api.github.com/repos/OpenTSDB/opentsdb/pulls/2275",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 1.0"
}