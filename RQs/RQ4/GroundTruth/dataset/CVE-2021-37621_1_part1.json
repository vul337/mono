{
  "cve_id": "CVE-2021-37621",
  "cwe_ids": [
    "CWE-835"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "Exiv2/exiv2",
  "commit_msg": "Defensive programming in Image::printIFDStructure",
  "commit_hash": "d9fd4c4272df172ae89c0a9c41341adc75ebba86",
  "git_url": "https://github.com/Exiv2/exiv2/commit/d9fd4c4272df172ae89c0a9c41341adc75ebba86",
  "file_path": "src/image.cpp",
  "func_name": "Image::printTiffStructure",
  "func_before": "void Image::printTiffStructure(BasicIo& io, std::ostream& out, Exiv2::PrintStructureOption option,int depth,size_t offset /*=0*/)\n    {\n        if ( option == kpsBasic || option == kpsXMP || option == kpsRecursive || option == kpsIccProfile ) {\n            // buffer\n            const size_t dirSize = 32;\n            DataBuf  dir(dirSize);\n\n            // read header (we already know for certain that we have a Tiff file)\n            io.read(dir.pData_,  8);\n            char c = (char) dir.pData_[0] ;\n            bool bSwap   = ( c == 'M' && isLittleEndianPlatform() )\n                        || ( c == 'I' && isBigEndianPlatform()    )\n                        ;\n            uint32_t start = byteSwap4(dir,4,bSwap);\n            printIFDStructure(io,out,option,start+(uint32_t)offset,bSwap,c,depth);\n        }\n    }",
  "abstract_func_before": "void Image::printTiffStructure(BasicIo& VAR_0, std::ostream& VAR_1, Exiv2::PrintStructureOption VAR_2,int VAR_3,size_t VAR_4 /* COMMENT_0 */)\n    {\n        if ( VAR_2 == VAR_5 || VAR_2 == VAR_6 || VAR_2 == VAR_7 || VAR_2 == VAR_8 ) {\n            /* COMMENT_1 */\n            const size_t VAR_9 = 32;\n            DataBuf  dir(dirSize);\n\n            /* COMMENT_2 */\n            VAR_0.read(VAR_10.pData_,  8);\n            char VAR_11 = (char) VAR_10.pData_[0] ;\n            bool VAR_12   = ( VAR_11 == 'M' && isLittleEndianPlatform() )\n                        || ( VAR_11 == 'I' && isBigEndianPlatform()    )\n                        ;\n            uint32_t VAR_13 = byteSwap4(VAR_10,4,VAR_12);\n            printIFDStructure(VAR_0,VAR_1,VAR_2,VAR_13+(uint32_t)VAR_4,VAR_12,VAR_11,VAR_3);\n        }\n    }",
  "func_graph_path_before": "Exiv2/exiv2/d9fd4c4272df172ae89c0a9c41341adc75ebba86/image.cpp/vul/before/1.json",
  "func": "void Image::printTiffStructure(BasicIo& io, std::ostream& out, Exiv2::PrintStructureOption option,int depth,size_t offset /*=0*/)\n    {\n        if ( option == kpsBasic || option == kpsXMP || option == kpsRecursive || option == kpsIccProfile ) {\n            // buffer\n            const size_t dirSize = 32;\n            DataBuf  dir(dirSize);\n\n            // read header (we already know for certain that we have a Tiff file)\n            readOrThrow(io, dir.pData_,  8, kerCorruptedMetadata);\n            char c = (char) dir.pData_[0] ;\n            bool bSwap   = ( c == 'M' && isLittleEndianPlatform() )\n                        || ( c == 'I' && isBigEndianPlatform()    )\n                        ;\n            uint32_t start = byteSwap4(dir,4,bSwap);\n            printIFDStructure(io,out,option,start+(uint32_t)offset,bSwap,c,depth);\n        }\n    }",
  "abstract_func": "void Image::printTiffStructure(BasicIo& VAR_0, std::ostream& VAR_1, Exiv2::PrintStructureOption VAR_2,int VAR_3,size_t VAR_4 /* COMMENT_0 */)\n    {\n        if ( VAR_2 == VAR_5 || VAR_2 == VAR_6 || VAR_2 == VAR_7 || VAR_2 == VAR_8 ) {\n            /* COMMENT_1 */\n            const size_t VAR_9 = 32;\n            DataBuf  dir(dirSize);\n\n            /* COMMENT_2 */\n            readOrThrow(VAR_0, VAR_10.pData_,  8, VAR_11);\n            char VAR_12 = (char) VAR_10.pData_[0] ;\n            bool VAR_13   = ( VAR_12 == 'M' && isLittleEndianPlatform() )\n                        || ( VAR_12 == 'I' && isBigEndianPlatform()    )\n                        ;\n            uint32_t VAR_14 = byteSwap4(VAR_10,4,VAR_13);\n            printIFDStructure(VAR_0,VAR_1,VAR_2,VAR_14+(uint32_t)VAR_4,VAR_13,VAR_12,VAR_3);\n        }\n    }",
  "func_graph_path": "Exiv2/exiv2/d9fd4c4272df172ae89c0a9c41341adc75ebba86/image.cpp/vul/after/1.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -6,7 +6,7 @@\n             DataBuf  dir(dirSize);\n \n             // read header (we already know for certain that we have a Tiff file)\n-            io.read(dir.pData_,  8);\n+            readOrThrow(io, dir.pData_,  8, kerCorruptedMetadata);\n             char c = (char) dir.pData_[0] ;\n             bool bSwap   = ( c == 'M' && isLittleEndianPlatform() )\n                         || ( c == 'I' && isBigEndianPlatform()    )",
  "diff_line_info": {
    "deleted_lines": [
      "            io.read(dir.pData_,  8);"
    ],
    "added_lines": [
      "            readOrThrow(io, dir.pData_,  8, kerCorruptedMetadata);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/sridharb1/exiv2/pull/4",
  "description": {
    "pr_info": {
      "title": "0.27 maintenance",
      "number": 4
    },
    "comment": []
  },
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.65,
  "Bug Filter Response": "**Final Classification:** Defect Remediation & Feature Upgrades  \n**Confidence:** 0.65\n\nThe patch improves error handling in data reading, which enhances robustness but isn't explicitly tied to a security vulnerability. The code change guards against potential data issues, which could have security benefits, but without a specific security reference, it's categorized under core functionality improvement. The confidence is moderate due to the possible security implications but lack of explicit info."
}