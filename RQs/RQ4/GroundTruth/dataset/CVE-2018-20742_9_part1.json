{
  "cve_id": "CVE-2018-20742",
  "cwe_ids": [
    "CWE-787"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:N/I:P/A:N",
  "cvss_is_v3": false,
  "repo_name": "mc2-project/opaque-sql",
  "commit_msg": "Check that ecall [user_check] pointers and ocall_malloc result pointer are outside enclave (#67)\n\nThis should reduce the enclave's attack surface by preventing an attacker from invoking ecalls on or triggering unexpected writes to arbitrary enclave memory, which could potentially leak information about that memory or lead to incorrect results.\r\n\r\nFixes #36. Fixes #66.",
  "commit_hash": "5ddda15d89f5ac82f4416208c5319ace4aecdc36",
  "git_url": "https://github.com/mc2-project/opaque-sql/commit/5ddda15d89f5ac82f4416208c5319ace4aecdc36",
  "file_path": "src/enclave/Enclave/Enclave.cpp",
  "func_name": "ecall_encrypt",
  "func_before": "void ecall_encrypt(uint8_t *plaintext, uint32_t plaintext_length,\n                   uint8_t *ciphertext, uint32_t cipher_length) {\n  try {\n    // IV (12 bytes) + ciphertext + mac (16 bytes)\n    assert(cipher_length >= plaintext_length + SGX_AESGCM_IV_SIZE + SGX_AESGCM_MAC_SIZE);\n    (void)cipher_length;\n    (void)plaintext_length;\n    encrypt(plaintext, plaintext_length, ciphertext);\n  } catch (const std::runtime_error &e) {\n    ocall_throw(e.what());\n  }\n}",
  "abstract_func_before": "void ecall_encrypt(uint8_t *VAR_0, uint32_t VAR_1,\n                   uint8_t *VAR_2, uint32_t VAR_3) {\n  try {\n    /* COMMENT_0 */\n    assert(VAR_3 >= VAR_1 + VAR_4 + VAR_5);\n    (void)VAR_3;\n    (void)VAR_1;\n    encrypt(VAR_0, VAR_1, VAR_2);\n  } catch (const std::runtime_error &VAR_6) {\n    ocall_throw(VAR_6.what());\n  }\n}",
  "func_graph_path_before": "mc2-project/opaque-sql/5ddda15d89f5ac82f4416208c5319ace4aecdc36/Enclave.cpp/vul/before/10.json",
  "func": "void ecall_encrypt(uint8_t *plaintext, uint32_t plaintext_length,\n                   uint8_t *ciphertext, uint32_t cipher_length) {\n  // Guard against encrypting or overwriting enclave memory\n  assert(sgx_is_outside_enclave(plaintext, plaintext_length) == 1);\n  assert(sgx_is_outside_enclave(ciphertext, cipher_length) == 1);\n  sgx_lfence();\n\n  try {\n    // IV (12 bytes) + ciphertext + mac (16 bytes)\n    assert(cipher_length >= plaintext_length + SGX_AESGCM_IV_SIZE + SGX_AESGCM_MAC_SIZE);\n    (void)cipher_length;\n    (void)plaintext_length;\n    encrypt(plaintext, plaintext_length, ciphertext);\n  } catch (const std::runtime_error &e) {\n    ocall_throw(e.what());\n  }\n}",
  "abstract_func": "void ecall_encrypt(uint8_t *VAR_0, uint32_t VAR_1,\n                   uint8_t *VAR_2, uint32_t VAR_3) {\n  /* COMMENT_0 */\n  assert(sgx_is_outside_enclave(VAR_0, VAR_1) == 1);\n  assert(sgx_is_outside_enclave(VAR_2, VAR_3) == 1);\n  sgx_lfence();\n\n  try {\n    /* COMMENT_1 */\n    assert(VAR_3 >= VAR_1 + VAR_4 + VAR_5);\n    (void)VAR_3;\n    (void)VAR_1;\n    encrypt(VAR_0, VAR_1, VAR_2);\n  } catch (const std::runtime_error &VAR_6) {\n    ocall_throw(VAR_6.what());\n  }\n}",
  "func_graph_path": "mc2-project/opaque-sql/5ddda15d89f5ac82f4416208c5319ace4aecdc36/Enclave.cpp/vul/after/10.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,5 +1,10 @@\n void ecall_encrypt(uint8_t *plaintext, uint32_t plaintext_length,\n                    uint8_t *ciphertext, uint32_t cipher_length) {\n+  // Guard against encrypting or overwriting enclave memory\n+  assert(sgx_is_outside_enclave(plaintext, plaintext_length) == 1);\n+  assert(sgx_is_outside_enclave(ciphertext, cipher_length) == 1);\n+  sgx_lfence();\n+\n   try {\n     // IV (12 bytes) + ciphertext + mac (16 bytes)\n     assert(cipher_length >= plaintext_length + SGX_AESGCM_IV_SIZE + SGX_AESGCM_MAC_SIZE);",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "  // Guard against encrypting or overwriting enclave memory",
      "  assert(sgx_is_outside_enclave(plaintext, plaintext_length) == 1);",
      "  assert(sgx_is_outside_enclave(ciphertext, cipher_length) == 1);",
      "  sgx_lfence();",
      ""
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/mc2-project/opaque-sql/pull/67",
  "description": {
    "pr_info": {
      "title": "Check that ecall [user_check] pointers and ocall_malloc result pointer are outside enclave",
      "number": 67
    },
    "comment": [
      "This should reduce the enclave's attack surface by preventing an attacker from invoking ecalls on or triggering unexpected writes to arbitrary enclave memory, which could potentially leak information about that memory or lead to incorrect results.\r\n\r\nFixes #36. Fixes #66."
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.95"
}