{
  "cve_id": "CVE-2023-36812",
  "cwe_ids": [
    "CWE-74"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
  "cvss_is_v3": true,
  "repo_name": "OpenTSDB/opentsdb",
  "commit_msg": "Improved fix for #2261.\nRegular expressions wouldn't catch the newlines or possibly other\ncontrol characters. Now we'll use the TAG validation code to make\nsure the inputs are only plain ASCII printables first.\nFixes CVE-2018-12972, CVE-2020-35476",
  "commit_hash": "07c4641471c6f5c2ab5aab615969e97211eb50d9",
  "git_url": "https://github.com/OpenTSDB/opentsdb/commit/07c4641471c6f5c2ab5aab615969e97211eb50d9",
  "file_path": "src/tsd/GraphHandler.java",
  "func_name": "setPlotDimensions",
  "func_before": "static void setPlotDimensions(final HttpQuery query, final Plot plot) {\n    String wxh = query.getQueryStringParam(\"wxh\");\n    if (wxh != null && !wxh.isEmpty()) {\n      wxh = URLDecoder.decode(wxh.trim());\n      if (!WXH_VALIDATOR.matcher(wxh).find()) {\n        throw new IllegalArgumentException(\"'wxh' was invalid. \"\n            + \"Must satisfy the pattern \" + WXH_VALIDATOR.toString());\n      }\n      final int wxhlength = wxh.length();\n      if (wxhlength < 7) {  // 100x100 minimum.\n        throw new BadRequestException(\"Parameter wxh too short: \" + wxh);\n      }\n      final int x = wxh.indexOf('x', 3);  // Start at 2 as min size is 100x100\n      if (x < 0) {\n        throw new BadRequestException(\"Invalid wxh parameter: \" + wxh);\n      }\n      try {\n        final short width = Short.parseShort(wxh.substring(0, x));\n        final short height = Short.parseShort(wxh.substring(x + 1, wxhlength));\n        try {\n          plot.setDimensions(width, height);\n        } catch (IllegalArgumentException e) {\n          throw new BadRequestException(\"Invalid wxh parameter: \" + wxh + \", \"\n                                        + e.getMessage());\n        }\n      } catch (NumberFormatException e) {\n        throw new BadRequestException(\"Can't parse wxh '\" + wxh + \"': \"\n                                      + e.getMessage());\n      }\n    }\n  }",
  "abstract_func_before": "static void setPlotDimensions(final HttpQuery VAR_0, final Plot VAR_1) {\n    String VAR_2 = VAR_0.getQueryStringParam(\"wxh\");\n    if (VAR_2 != null && !VAR_2.isEmpty()) {\n      VAR_2 = VAR_3.decode(VAR_2.trim());\n      if (!VAR_4.matcher(VAR_2).find()) {\n        throw new IllegalArgumentException(\"'wxh' was invalid. \"\n            + \"Must satisfy the pattern \" + VAR_4.toString());\n      }\n      final int VAR_5 = VAR_2.length();\n      if (VAR_5 < 7) {  /* COMMENT_0 */\n        throw new BadRequestException(\"Parameter wxh too short: \" + VAR_2);\n      }\n      final int VAR_6 = VAR_2.indexOf('x', 3);  /* COMMENT_1 */\n      if (VAR_6 < 0) {\n        throw new BadRequestException(\"Invalid wxh parameter: \" + VAR_2);\n      }\n      try {\n        final short VAR_7 = VAR_8.parseShort(VAR_2.substring(0, VAR_6));\n        final short VAR_9 = VAR_8.parseShort(VAR_2.substring(VAR_6 + 1, VAR_5));\n        try {\n          VAR_1.setDimensions(VAR_7, VAR_9);\n        } catch (IllegalArgumentException VAR_10) {\n          throw new BadRequestException(\"Invalid wxh parameter: \" + VAR_2 + \", \"\n                                        + VAR_10.getMessage());\n        }\n      } catch (NumberFormatException VAR_10) {\n        throw new BadRequestException(\"Can't parse wxh '\" + VAR_2 + \"': \"\n                                      + VAR_10.getMessage());\n      }\n    }\n  }",
  "func_graph_path_before": "OpenTSDB/opentsdb/07c4641471c6f5c2ab5aab615969e97211eb50d9/GraphHandler.java/vul/before/1.json",
  "func": "static void setPlotDimensions(final HttpQuery query, final Plot plot) {\n    String wxh = query.getQueryStringParam(\"wxh\");\n    if (wxh != null && !wxh.isEmpty()) {\n      wxh = URLDecoder.decode(wxh.trim());\n      validateString(\"wxh\", wxh);\n      if (!WXH_VALIDATOR.matcher(wxh).find()) {\n        throw new IllegalArgumentException(\"'wxh' was invalid. \"\n            + \"Must satisfy the pattern \" + WXH_VALIDATOR.toString());\n      }\n      final int wxhlength = wxh.length();\n      if (wxhlength < 7) {  // 100x100 minimum.\n        throw new BadRequestException(\"Parameter wxh too short: \" + wxh);\n      }\n      final int x = wxh.indexOf('x', 3);  // Start at 2 as min size is 100x100\n      if (x < 0) {\n        throw new BadRequestException(\"Invalid wxh parameter: \" + wxh);\n      }\n      try {\n        final short width = Short.parseShort(wxh.substring(0, x));\n        final short height = Short.parseShort(wxh.substring(x + 1, wxhlength));\n        try {\n          plot.setDimensions(width, height);\n        } catch (IllegalArgumentException e) {\n          throw new BadRequestException(\"Invalid wxh parameter: \" + wxh + \", \"\n                                        + e.getMessage());\n        }\n      } catch (NumberFormatException e) {\n        throw new BadRequestException(\"Can't parse wxh '\" + wxh + \"': \"\n                                      + e.getMessage());\n      }\n    }\n  }",
  "abstract_func": "static void setPlotDimensions(final HttpQuery VAR_0, final Plot VAR_1) {\n    String VAR_2 = VAR_0.getQueryStringParam(\"wxh\");\n    if (VAR_2 != null && !VAR_2.isEmpty()) {\n      VAR_2 = VAR_3.decode(VAR_2.trim());\n      validateString(\"wxh\", VAR_2);\n      if (!VAR_4.matcher(VAR_2).find()) {\n        throw new IllegalArgumentException(\"'wxh' was invalid. \"\n            + \"Must satisfy the pattern \" + VAR_4.toString());\n      }\n      final int VAR_5 = VAR_2.length();\n      if (VAR_5 < 7) {  /* COMMENT_0 */\n        throw new BadRequestException(\"Parameter wxh too short: \" + VAR_2);\n      }\n      final int VAR_6 = VAR_2.indexOf('x', 3);  /* COMMENT_1 */\n      if (VAR_6 < 0) {\n        throw new BadRequestException(\"Invalid wxh parameter: \" + VAR_2);\n      }\n      try {\n        final short VAR_7 = VAR_8.parseShort(VAR_2.substring(0, VAR_6));\n        final short VAR_9 = VAR_8.parseShort(VAR_2.substring(VAR_6 + 1, VAR_5));\n        try {\n          VAR_1.setDimensions(VAR_7, VAR_9);\n        } catch (IllegalArgumentException VAR_10) {\n          throw new BadRequestException(\"Invalid wxh parameter: \" + VAR_2 + \", \"\n                                        + VAR_10.getMessage());\n        }\n      } catch (NumberFormatException VAR_10) {\n        throw new BadRequestException(\"Can't parse wxh '\" + VAR_2 + \"': \"\n                                      + VAR_10.getMessage());\n      }\n    }\n  }",
  "func_graph_path": "OpenTSDB/opentsdb/07c4641471c6f5c2ab5aab615969e97211eb50d9/GraphHandler.java/vul/after/1.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -2,6 +2,7 @@\n     String wxh = query.getQueryStringParam(\"wxh\");\n     if (wxh != null && !wxh.isEmpty()) {\n       wxh = URLDecoder.decode(wxh.trim());\n+      validateString(\"wxh\", wxh);\n       if (!WXH_VALIDATOR.matcher(wxh).find()) {\n         throw new IllegalArgumentException(\"'wxh' was invalid. \"\n             + \"Must satisfy the pattern \" + WXH_VALIDATOR.toString());",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "      validateString(\"wxh\", wxh);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/OpenTSDB/opentsdb/pull/2275",
  "description": {
    "pr_info": {
      "title": "Improved fix for #2261.",
      "number": 2275
    },
    "comment": [
      "Regular expressions wouldn't catch the newlines or possibly other control characters. Now we'll use the TAG validation code to make sure the inputs are only plain ASCII printables first. Fixes CVE-2018-12972, CVE-2020-35476",
      "@manolama - this seems to fix the [RCE we reported](https://github.com/OpenTSDB/opentsdb/issues/2261) before Synopsis on Dec 12, 2022. Seems like they have also issued a CVE for the vulnerability we found. Could you please open a Github security advisory? Thanks."
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 0.95\n\n**Step-by-Step Explanation:**\n\n1. The commit message and vulnerability description both reference fixingCVE-2018-12972 and CVE-2020-35476, indicating known security issues.\n2. The code change introduces input validation using the validateString method, which ensures inputs are plain ASCII printables, addressing a security weakness related to control characters.\n3. The modifications are consistent with the described issue, providing a clear security fix.\n\nThe confidence is high due to explicit CVE references and direct security-related code changes."
}