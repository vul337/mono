{
  "cve_id": "CVE-2023-36328",
  "cwe_ids": [
    "CWE-190"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
  "cvss_is_v3": true,
  "repo_name": "libtom/libtommath",
  "commit_msg": "Fix possible integer overflow",
  "commit_hash": "beba892bc0d4e4ded4d667ab1d2a94f4d75109a9",
  "git_url": "https://github.com/libtom/libtommath/commit/beba892bc0d4e4ded4d667ab1d2a94f4d75109a9",
  "file_path": "bn_s_mp_mul_digs.c",
  "func_name": "s_mp_mul_digs",
  "func_before": "mp_err s_mp_mul_digs(const mp_int *a, const mp_int *b, mp_int *c, int digs)\n{\n   mp_int  t;\n   mp_err  err;\n   int     pa, pb, ix, iy;\n   mp_digit u;\n   mp_word r;\n   mp_digit tmpx, *tmpt, *tmpy;\n\n   /* can we use the fast multiplier? */\n   if ((digs < MP_WARRAY) &&\n       (MP_MIN(a->used, b->used) < MP_MAXFAST)) {\n      return s_mp_mul_digs_fast(a, b, c, digs);\n   }\n\n   if ((err = mp_init_size(&t, digs)) != MP_OKAY) {\n      return err;\n   }\n   t.used = digs;\n\n   /* compute the digits of the product directly */\n   pa = a->used;\n   for (ix = 0; ix < pa; ix++) {\n      /* set the carry to zero */\n      u = 0;\n\n      /* limit ourselves to making digs digits of output */\n      pb = MP_MIN(b->used, digs - ix);\n\n      /* setup some aliases */\n      /* copy of the digit from a used within the nested loop */\n      tmpx = a->dp[ix];\n\n      /* an alias for the destination shifted ix places */\n      tmpt = t.dp + ix;\n\n      /* an alias for the digits of b */\n      tmpy = b->dp;\n\n      /* compute the columns of the output and propagate the carry */\n      for (iy = 0; iy < pb; iy++) {\n         /* compute the column as a mp_word */\n         r       = (mp_word)*tmpt +\n                   ((mp_word)tmpx * (mp_word)*tmpy++) +\n                   (mp_word)u;\n\n         /* the new column is the lower part of the result */\n         *tmpt++ = (mp_digit)(r & (mp_word)MP_MASK);\n\n         /* get the carry word from the result */\n         u       = (mp_digit)(r >> (mp_word)MP_DIGIT_BIT);\n      }\n      /* set carry if it is placed below digs */\n      if ((ix + iy) < digs) {\n         *tmpt = u;\n      }\n   }\n\n   mp_clamp(&t);\n   mp_exch(&t, c);\n\n   mp_clear(&t);\n   return MP_OKAY;\n}",
  "abstract_func_before": "mp_err s_mp_mul_digs(const mp_int *VAR_0, const mp_int *VAR_1, mp_int *VAR_2, int VAR_3)\n{\n   mp_int  VAR_4;\n   mp_err  VAR_5;\n   int     VAR_6, VAR_7, VAR_8, VAR_9;\n   mp_digit VAR_10;\n   mp_word VAR_11;\n   mp_digit VAR_12, *VAR_13, *VAR_14;\n\n   /* COMMENT_0 */\n   if ((VAR_3 < VAR_15) &&\n       (MP_MIN(VAR_0->used, VAR_1->used) < VAR_16)) {\n      return s_mp_mul_digs_fast(VAR_0, VAR_1, VAR_2, VAR_3);\n   }\n\n   if ((VAR_5 = mp_init_size(&VAR_4, VAR_3)) != VAR_17) {\n      return VAR_5;\n   }\n   VAR_4.used = VAR_3;\n\n   /* COMMENT_1 */\n   VAR_6 = VAR_0->used;\n   for (VAR_8 = 0; VAR_8 < VAR_6; VAR_8++) {\n      /* COMMENT_2 */\n      VAR_10 = 0;\n\n      /* COMMENT_3 */\n      VAR_7 = MP_MIN(VAR_1->used, VAR_3 - VAR_8);\n\n      /* COMMENT_4 */\n      /* COMMENT_5 */\n      VAR_12 = VAR_0->dp[VAR_8];\n\n      /* COMMENT_6 */\n      VAR_13 = VAR_4.dp + VAR_8;\n\n      /* COMMENT_7 */\n      VAR_14 = VAR_1->dp;\n\n      /* COMMENT_8 */\n      for (VAR_9 = 0; VAR_9 < VAR_7; VAR_9++) {\n         /* COMMENT_9 */\n         VAR_11       = (mp_word)*VAR_13 +\n                   ((mp_word)VAR_12 * (mp_word)*VAR_14++) +\n                   (mp_word)VAR_10;\n\n         /* COMMENT_10 */\n         *VAR_13++ = (mp_digit)(VAR_11 & (mp_word)VAR_18);\n\n         /* COMMENT_11 */\n         VAR_10       = (mp_digit)(VAR_11 >> (mp_word)VAR_19);\n      }\n      /* COMMENT_12 */\n      if ((VAR_8 + VAR_9) < VAR_3) {\n         *VAR_13 = VAR_10;\n      }\n   }\n\n   mp_clamp(&VAR_4);\n   mp_exch(&VAR_4, VAR_2);\n\n   mp_clear(&VAR_4);\n   return VAR_17;\n}",
  "func_graph_path_before": "libtom/libtommath/beba892bc0d4e4ded4d667ab1d2a94f4d75109a9/bn_s_mp_mul_digs.c/vul/before/0.json",
  "func": "mp_err s_mp_mul_digs(const mp_int *a, const mp_int *b, mp_int *c, int digs)\n{\n   mp_int  t;\n   mp_err  err;\n   int     pa, pb, ix, iy;\n   mp_digit u;\n   mp_word r;\n   mp_digit tmpx, *tmpt, *tmpy;\n\n   if (digs < 0) {\n      return MP_VAL;\n   }\n\n   /* can we use the fast multiplier? */\n   if ((digs < MP_WARRAY) &&\n       (MP_MIN(a->used, b->used) < MP_MAXFAST)) {\n      return s_mp_mul_digs_fast(a, b, c, digs);\n   }\n\n   if ((err = mp_init_size(&t, digs)) != MP_OKAY) {\n      return err;\n   }\n   t.used = digs;\n\n   /* compute the digits of the product directly */\n   pa = a->used;\n   for (ix = 0; ix < pa; ix++) {\n      /* set the carry to zero */\n      u = 0;\n\n      /* limit ourselves to making digs digits of output */\n      pb = MP_MIN(b->used, digs - ix);\n\n      /* setup some aliases */\n      /* copy of the digit from a used within the nested loop */\n      tmpx = a->dp[ix];\n\n      /* an alias for the destination shifted ix places */\n      tmpt = t.dp + ix;\n\n      /* an alias for the digits of b */\n      tmpy = b->dp;\n\n      /* compute the columns of the output and propagate the carry */\n      for (iy = 0; iy < pb; iy++) {\n         /* compute the column as a mp_word */\n         r       = (mp_word)*tmpt +\n                   ((mp_word)tmpx * (mp_word)*tmpy++) +\n                   (mp_word)u;\n\n         /* the new column is the lower part of the result */\n         *tmpt++ = (mp_digit)(r & (mp_word)MP_MASK);\n\n         /* get the carry word from the result */\n         u       = (mp_digit)(r >> (mp_word)MP_DIGIT_BIT);\n      }\n      /* set carry if it is placed below digs */\n      if ((ix + iy) < digs) {\n         *tmpt = u;\n      }\n   }\n\n   mp_clamp(&t);\n   mp_exch(&t, c);\n\n   mp_clear(&t);\n   return MP_OKAY;\n}",
  "abstract_func": "mp_err s_mp_mul_digs(const mp_int *VAR_0, const mp_int *VAR_1, mp_int *VAR_2, int VAR_3)\n{\n   mp_int  VAR_4;\n   mp_err  VAR_5;\n   int     VAR_6, VAR_7, VAR_8, VAR_9;\n   mp_digit VAR_10;\n   mp_word VAR_11;\n   mp_digit VAR_12, *VAR_13, *VAR_14;\n\n   if (VAR_3 < 0) {\n      return VAR_15;\n   }\n\n   /* COMMENT_0 */\n   if ((VAR_3 < VAR_16) &&\n       (MP_MIN(VAR_0->used, VAR_1->used) < VAR_17)) {\n      return s_mp_mul_digs_fast(VAR_0, VAR_1, VAR_2, VAR_3);\n   }\n\n   if ((VAR_5 = mp_init_size(&VAR_4, VAR_3)) != VAR_18) {\n      return VAR_5;\n   }\n   VAR_4.used = VAR_3;\n\n   /* COMMENT_1 */\n   VAR_6 = VAR_0->used;\n   for (VAR_8 = 0; VAR_8 < VAR_6; VAR_8++) {\n      /* COMMENT_2 */\n      VAR_10 = 0;\n\n      /* COMMENT_3 */\n      VAR_7 = MP_MIN(VAR_1->used, VAR_3 - VAR_8);\n\n      /* COMMENT_4 */\n      /* COMMENT_5 */\n      VAR_12 = VAR_0->dp[VAR_8];\n\n      /* COMMENT_6 */\n      VAR_13 = VAR_4.dp + VAR_8;\n\n      /* COMMENT_7 */\n      VAR_14 = VAR_1->dp;\n\n      /* COMMENT_8 */\n      for (VAR_9 = 0; VAR_9 < VAR_7; VAR_9++) {\n         /* COMMENT_9 */\n         VAR_11       = (mp_word)*VAR_13 +\n                   ((mp_word)VAR_12 * (mp_word)*VAR_14++) +\n                   (mp_word)VAR_10;\n\n         /* COMMENT_10 */\n         *VAR_13++ = (mp_digit)(VAR_11 & (mp_word)VAR_19);\n\n         /* COMMENT_11 */\n         VAR_10       = (mp_digit)(VAR_11 >> (mp_word)VAR_20);\n      }\n      /* COMMENT_12 */\n      if ((VAR_8 + VAR_9) < VAR_3) {\n         *VAR_13 = VAR_10;\n      }\n   }\n\n   mp_clamp(&VAR_4);\n   mp_exch(&VAR_4, VAR_2);\n\n   mp_clear(&VAR_4);\n   return VAR_18;\n}",
  "func_graph_path": "libtom/libtommath/beba892bc0d4e4ded4d667ab1d2a94f4d75109a9/bn_s_mp_mul_digs.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -6,6 +6,10 @@\n    mp_digit u;\n    mp_word r;\n    mp_digit tmpx, *tmpt, *tmpy;\n+\n+   if (digs < 0) {\n+      return MP_VAL;\n+   }\n \n    /* can we use the fast multiplier? */\n    if ((digs < MP_WARRAY) &&",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "",
      "   if (digs < 0) {",
      "      return MP_VAL;",
      "   }"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/libtom/libtommath/pull/546",
  "description": {
    "pr_info": {
      "title": "Fix possible integer overflow",
      "number": 546
    },
    "comment": [
      "It was possible to give `mp_grow` a negative size argument.\r\nSeveral other functions got an extra check for negative input, too.",
      "@sjaeckel please ask the reporter of that bug if they want to remain anonymous. I would like to put their name in, otherwise.",
      "@gal1ium thanks for reporting this. Do you wanna have a look at the changes?",
      "> @gal1ium thanks for reporting this. Do you wanna have a look at the changes?\r\n\r\nI think they're good! Thanks!",
      "> I double checked and it looks good.\r\n\r\nNone forgotten? Good.\r\n\r\n> I also cherry-picked this to develop locally and will open a PR soon.\r\n\r\nAh, thanks, wasn't able to get to it till now.\r\n",
      "@dod38fr @scaronni @gahr @DimStar77 @dfandrich @antonio-rojas @millak\r\n\r\ncould you please include this patch in your distro?",
      "@sjaeckel I can do that - are you planning a patch release, anyway?",
      "Does this fix a security vulnerability? Glacing at the diff, it looks like it fixes some things that a buggy program might hit but affect parameters that would not generally be under the control of an attacker.",
      "> @dod38fr @scaronni @gahr @DimStar77 @dfandrich @antonio-rojas @Millak\r\n> \r\n> could you please include this patch in your distro?\r\n\r\nIt's too late for Debian 12 which is to be released next week. \r\n\r\nI'll patch libtommath in Debian/unstable once Debian 12 is out. If this bug turns out to be a security issue, I'll make sure to include in a future Debian 12 point release (e.g. 12.1).",
      "I patched the FreeBSD port: https://cgit.freebsd.org/ports/commit/?id=02c46239ac8dce1c3573803e6c95ae152aa61ee9\r\n\r\nstill eager to know if there's a release coming",
      "I don't think there will be a patch release, but a new release will come which includes this patch.",
      "CVE-2023-36328 was assigned to this.\r\n\r\nI had no involvement in the assignment, posting here for reference only.",
      "Seems like someone really thinks that this needs a bugfix release ...\r\n\r\nhttps://github.com/libtom/libtommath/releases/tag/v1.2.1",
      "I see an error in the description https://nvd.nist.gov/vuln/detail/CVE-2023-36328#range-9994440 of the versions affected by the vulnerability. Version 1.2.1 is included, although it contains changes from this commit:\r\nhttps://github.com/libtom/libtommath/pull/546/commits/beba892bc0d4e4ded4d667ab1d2a94f4d75109a9\r\nCan you correct and remove version 1.2.1 from the nist.gov description?",
      "I contacted them, let's see what happens and when :-) ",
      "Version is fixed, list will be updated within the next 24hours"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 0.95"
}