{
  "cve_id": "CVE-2022-28068",
  "cwe_ids": [
    "CWE-787"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
  "cvss_is_v3": true,
  "repo_name": "radareorg/radare2",
  "commit_msg": "Fix oobread crash in DWARF parser (tests_64924) ##crash\n\nReported by giantbranch of NSFOCUS TIANJI Lab",
  "commit_hash": "637f4bd1af6752e28e0a9998e954e2e9ce6fa992",
  "git_url": "https://github.com/radareorg/radare2/commit/637f4bd1af6752e28e0a9998e954e2e9ce6fa992",
  "file_path": "libr/bin/dwarf.c",
  "func_name": "parse_die",
  "func_before": "static const ut8 *parse_die(const ut8 *buf, const ut8 *buf_end, RBinDwarfAbbrevDecl *abbrev,\n\t\tRBinDwarfCompUnitHdr *hdr, RBinDwarfDie *die, const ut8 *debug_str, size_t debug_str_len, Sdb *sdb) {\n\tsize_t i;\n\tfor (i = 0; i < abbrev->count - 1; i++) {\n\t\tmemset (&die->attr_values[i], 0, sizeof (die->attr_values[i]));\n\n\t\tbuf = parse_attr_value (buf, buf_end - buf, &abbrev->defs[i],\n\t\t\t&die->attr_values[i], hdr, debug_str, debug_str_len);\n\n\t\tRBinDwarfAttrValue *attribute = &die->attr_values[i];\n\n\t\tbool is_valid_string_form = (attribute->attr_form == DW_FORM_strp ||\n\t\t\tattribute->attr_form == DW_FORM_string) &&\n\t\t\tattribute->string.content;\n\t\t// TODO  does this have a purpose anymore?\n\t\t// Or atleast it needs to rework becase there will be\n\t\t// more comp units -> more comp dirs and only the last one will be kept\n\t\tif (attribute->attr_name == DW_AT_comp_dir && is_valid_string_form) {\n\t\t\tconst char *name = attribute->string.content;\n\t\t\tsdb_set (sdb, \"DW_AT_comp_dir\", name, 0);\n\t\t}\n\t\tdie->count++;\n\t}\n\n\treturn buf;\n}",
  "abstract_func_before": "static const ut8 *parse_die(const ut8 *VAR_0, const ut8 *VAR_1, RBinDwarfAbbrevDecl *VAR_2,\n\t\tRBinDwarfCompUnitHdr *VAR_3, RBinDwarfDie *VAR_4, const ut8 *VAR_5, size_t VAR_6, Sdb *VAR_7) {\n\tsize_t VAR_8;\n\tfor (VAR_8 = 0; VAR_8 < VAR_2->count - 1; VAR_8++) {\n\t\tmemset (&VAR_4->attr_values[VAR_8], 0, sizeof (VAR_4->attr_values[VAR_8]));\n\n\t\tVAR_0 = parse_attr_value (VAR_0, VAR_1 - VAR_0, &VAR_2->defs[VAR_8],\n\t\t\t&VAR_4->attr_values[VAR_8], VAR_3, VAR_5, VAR_6);\n\n\t\tRBinDwarfAttrValue *VAR_9 = &VAR_4->attr_values[VAR_8];\n\n\t\tbool VAR_10 = (VAR_9->attr_form == VAR_11 ||\n\t\t\tVAR_9->attr_form == VAR_12) &&\n\t\t\tVAR_9->string.content;\n\t\t/* COMMENT_0 */\n\t\t/* COMMENT_1 */\n\t\t/* COMMENT_2 */\n\t\tif (VAR_9->attr_name == VAR_13 && VAR_10) {\n\t\t\tconst char *VAR_14 = VAR_9->string.content;\n\t\t\tsdb_set (VAR_7, \"DW_AT_comp_dir\", VAR_14, 0);\n\t\t}\n\t\tVAR_4->count++;\n\t}\n\n\treturn VAR_0;\n}",
  "func_graph_path_before": "radareorg/radare2/637f4bd1af6752e28e0a9998e954e2e9ce6fa992/dwarf.c/vul/before/2.json",
  "func": "static const ut8 *parse_die(const ut8 *buf, const ut8 *buf_end, RBinDwarfAbbrevDecl *abbrev, RBinDwarfCompUnitHdr *hdr, RBinDwarfDie *die, const ut8 *debug_str, size_t debug_str_len, Sdb *sdb) {\n\tsize_t i;\n\tfor (i = 0; i < abbrev->count - 1; i++) {\n\t\tmemset (&die->attr_values[i], 0, sizeof (die->attr_values[i]));\n\n\t\tbuf = parse_attr_value (buf, buf_end - buf, &abbrev->defs[i],\n\t\t\t&die->attr_values[i], hdr, debug_str, debug_str_len);\n\n\t\tRBinDwarfAttrValue *attribute = &die->attr_values[i];\n\n\t\tbool is_string = (attribute->attr_form == DW_FORM_strp || attribute->attr_form == DW_FORM_string);\n\t\tbool is_valid_string_form = is_string && attribute->string.content;\n\t\t// TODO  does this have a purpose anymore?\n\t\t// Or atleast it needs to rework becase there will be\n\t\t// more comp units -> more comp dirs and only the last one will be kept\n\t\tif (attribute->attr_name == DW_AT_comp_dir && is_valid_string_form) {\n\t\t\tconst char *name = attribute->string.content;\n\t\t\tsdb_set (sdb, \"DW_AT_comp_dir\", name, 0);\n\t\t}\n\t\tdie->count++;\n\t}\n\treturn buf;\n}",
  "abstract_func": "static const ut8 *parse_die(const ut8 *VAR_0, const ut8 *VAR_1, RBinDwarfAbbrevDecl *VAR_2, RBinDwarfCompUnitHdr *VAR_3, RBinDwarfDie *VAR_4, const ut8 *VAR_5, size_t VAR_6, Sdb *VAR_7) {\n\tsize_t VAR_8;\n\tfor (VAR_8 = 0; VAR_8 < VAR_2->count - 1; VAR_8++) {\n\t\tmemset (&VAR_4->attr_values[VAR_8], 0, sizeof (VAR_4->attr_values[VAR_8]));\n\n\t\tVAR_0 = parse_attr_value (VAR_0, VAR_1 - VAR_0, &VAR_2->defs[VAR_8],\n\t\t\t&VAR_4->attr_values[VAR_8], VAR_3, VAR_5, VAR_6);\n\n\t\tRBinDwarfAttrValue *VAR_9 = &VAR_4->attr_values[VAR_8];\n\n\t\tbool VAR_10 = (VAR_9->attr_form == VAR_11 || VAR_9->attr_form == VAR_12);\n\t\tbool VAR_13 = VAR_10 && VAR_9->string.content;\n\t\t/* COMMENT_0 */\n\t\t/* COMMENT_1 */\n\t\t/* COMMENT_2 */\n\t\tif (VAR_9->attr_name == VAR_14 && VAR_13) {\n\t\t\tconst char *VAR_15 = VAR_9->string.content;\n\t\t\tsdb_set (VAR_7, \"DW_AT_comp_dir\", VAR_15, 0);\n\t\t}\n\t\tVAR_4->count++;\n\t}\n\treturn VAR_0;\n}",
  "func_graph_path": "radareorg/radare2/637f4bd1af6752e28e0a9998e954e2e9ce6fa992/dwarf.c/vul/after/2.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,5 +1,4 @@\n-static const ut8 *parse_die(const ut8 *buf, const ut8 *buf_end, RBinDwarfAbbrevDecl *abbrev,\n-\t\tRBinDwarfCompUnitHdr *hdr, RBinDwarfDie *die, const ut8 *debug_str, size_t debug_str_len, Sdb *sdb) {\n+static const ut8 *parse_die(const ut8 *buf, const ut8 *buf_end, RBinDwarfAbbrevDecl *abbrev, RBinDwarfCompUnitHdr *hdr, RBinDwarfDie *die, const ut8 *debug_str, size_t debug_str_len, Sdb *sdb) {\n \tsize_t i;\n \tfor (i = 0; i < abbrev->count - 1; i++) {\n \t\tmemset (&die->attr_values[i], 0, sizeof (die->attr_values[i]));\n@@ -9,9 +8,8 @@\n \n \t\tRBinDwarfAttrValue *attribute = &die->attr_values[i];\n \n-\t\tbool is_valid_string_form = (attribute->attr_form == DW_FORM_strp ||\n-\t\t\tattribute->attr_form == DW_FORM_string) &&\n-\t\t\tattribute->string.content;\n+\t\tbool is_string = (attribute->attr_form == DW_FORM_strp || attribute->attr_form == DW_FORM_string);\n+\t\tbool is_valid_string_form = is_string && attribute->string.content;\n \t\t// TODO  does this have a purpose anymore?\n \t\t// Or atleast it needs to rework becase there will be\n \t\t// more comp units -> more comp dirs and only the last one will be kept\n@@ -21,6 +19,5 @@\n \t\t}\n \t\tdie->count++;\n \t}\n-\n \treturn buf;\n }",
  "diff_line_info": {
    "deleted_lines": [
      "static const ut8 *parse_die(const ut8 *buf, const ut8 *buf_end, RBinDwarfAbbrevDecl *abbrev,",
      "\t\tRBinDwarfCompUnitHdr *hdr, RBinDwarfDie *die, const ut8 *debug_str, size_t debug_str_len, Sdb *sdb) {",
      "\t\tbool is_valid_string_form = (attribute->attr_form == DW_FORM_strp ||",
      "\t\t\tattribute->attr_form == DW_FORM_string) &&",
      "\t\t\tattribute->string.content;",
      ""
    ],
    "added_lines": [
      "static const ut8 *parse_die(const ut8 *buf, const ut8 *buf_end, RBinDwarfAbbrevDecl *abbrev, RBinDwarfCompUnitHdr *hdr, RBinDwarfDie *die, const ut8 *debug_str, size_t debug_str_len, Sdb *sdb) {",
      "\t\tbool is_string = (attribute->attr_form == DW_FORM_strp || attribute->attr_form == DW_FORM_string);",
      "\t\tbool is_valid_string_form = is_string && attribute->string.content;"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/radareorg/radare2/pull/19349",
  "description": {
    "pr_info": {
      "title": "Fix oobread crash in DWARF parser (tests_64924) ##crash",
      "number": 19349
    },
    "comment": [
      "Reported by giantbranch of NSFOCUS TIANJI Lab\r\n\r\n<!-- Please read the contributing guidelines:\r\n* https://github.com/radareorg/radare2/blob/master/DEVELOPERS.md\r\nIn short:\r\n* PR title must be capitalized, concise and use ##tags\r\n* Follow the coding style, add tests and documentation if necessary\r\n-->\r\n\r\n**Checklist**\r\n\r\n- [ ] Closing issues: #issue\r\n- [x] Mark this if you consider it ready to merge\r\n- [ ] I've added tests (optional)\r\n- [ ] I wrote some lines in the [radare2book](https://github.com/radareorg/radare2book)\r\n\r\n**Description**\r\n\r\n<!-- Explain the **details** to understand the purpose of this contribution, with enough information to help us understand better the changes. -->\r\n"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "The commit fixes a crash caused by an out-of-bounds read in the DWARF parser, indicating a security vulnerability. The changes ensure proper handling of string attributes to prevent invalid memory access.\n\n**Final Classification:** Security Vulnerability Fix; **Confidence:** 0.95"
}