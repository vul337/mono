{
  "cve_id": "CVE-2019-25027",
  "cwe_ids": [
    "CWE-79"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:N/I:P/A:N",
  "cvss_is_v3": false,
  "repo_name": "vaadin/flow",
  "commit_msg": "Sanitize input used in error template\n\nAs error template is html, and the input used in it is taken from the path, which can be anything, the input needs to be sanitized before added to the template to avoid possible XSS injection.",
  "commit_hash": "cde1389507aac2dc8aa6ae39296765c1ca457b69",
  "git_url": "https://github.com/vaadin/flow/commit/cde1389507aac2dc8aa6ae39296765c1ca457b69",
  "file_path": "flow-server/src/main/java/com/vaadin/flow/router/RouteNotFoundError.java",
  "func_name": "setErrorParameter",
  "func_before": "@Override\n    public int setErrorParameter(BeforeEnterEvent event,\n            ErrorParameter<NotFoundException> parameter) {\n        String path = event.getLocation().getPath();\n        String additionalInfo = \"\";\n        if (parameter.hasCustomMessage()) {\n            additionalInfo = \"Reason: \" + parameter.getCustomMessage();\n        }\n\n        boolean productionMode = event.getUI().getSession().getConfiguration()\n                .isProductionMode();\n\n        String template = getErrorHtml(productionMode);\n        template = template.replace(\"{{path}}\", path);\n        template = template.replace(\"{{additionalInfo}}\", additionalInfo);\n        if (template.contains(\"{{routes}}\")) {\n            template = template.replace(\"{{routes}}\", getRoutes(event));\n        }\n\n        getElement().appendChild(new Html(template).getElement());\n        return HttpServletResponse.SC_NOT_FOUND;\n    }",
  "abstract_func_before": "@Override\n    public int setErrorParameter(BeforeEnterEvent VAR_0,\n            ErrorParameter<NotFoundException> VAR_1) {\n        String VAR_2 = VAR_0.getLocation().getPath();\n        String VAR_3 = \"\";\n        if (VAR_1.hasCustomMessage()) {\n            VAR_3 = \"Reason: \" + VAR_1.getCustomMessage();\n        }\n\n        boolean VAR_4 = VAR_0.getUI().getSession().getConfiguration()\n                .isProductionMode();\n\n        String VAR_5 = getErrorHtml(VAR_4);\n        VAR_5 = VAR_5.replace(\"{{path}}\", VAR_2);\n        VAR_5 = VAR_5.replace(\"{{additionalInfo}}\", VAR_3);\n        if (VAR_5.contains(\"{{routes}}\")) {\n            VAR_5 = VAR_5.replace(\"{{routes}}\", getRoutes(VAR_0));\n        }\n\n        getElement().appendChild(new Html(VAR_5).getElement());\n        return VAR_6.SC_NOT_FOUND;\n    }",
  "func_graph_path_before": "vaadin/flow/cde1389507aac2dc8aa6ae39296765c1ca457b69/RouteNotFoundError.java/vul/before/0.json",
  "func": "@Override\n    public int setErrorParameter(BeforeEnterEvent event,\n            ErrorParameter<NotFoundException> parameter) {\n        String path = event.getLocation().getPath();\n        String additionalInfo = \"\";\n        if (parameter.hasCustomMessage()) {\n            additionalInfo = \"Reason: \" + parameter.getCustomMessage();\n        }\n        path = Jsoup.clean(path, Whitelist.none());\n        additionalInfo = Jsoup.clean(additionalInfo, Whitelist.none());\n\n        boolean productionMode = event.getUI().getSession().getConfiguration()\n                .isProductionMode();\n\n        String template = getErrorHtml(productionMode);\n        template = template.replace(\"{{path}}\", path);\n        template = template.replace(\"{{additionalInfo}}\", additionalInfo);\n        if (template.contains(\"{{routes}}\")) {\n            template = template.replace(\"{{routes}}\", getRoutes(event));\n        }\n\n        getElement().appendChild(new Html(template).getElement());\n        return HttpServletResponse.SC_NOT_FOUND;\n    }",
  "abstract_func": "@Override\n    public int setErrorParameter(BeforeEnterEvent VAR_0,\n            ErrorParameter<NotFoundException> VAR_1) {\n        String VAR_2 = VAR_0.getLocation().getPath();\n        String VAR_3 = \"\";\n        if (VAR_1.hasCustomMessage()) {\n            VAR_3 = \"Reason: \" + VAR_1.getCustomMessage();\n        }\n        VAR_2 = VAR_4.clean(VAR_2, VAR_5.none());\n        VAR_3 = VAR_4.clean(VAR_3, VAR_5.none());\n\n        boolean VAR_6 = VAR_0.getUI().getSession().getConfiguration()\n                .isProductionMode();\n\n        String VAR_7 = getErrorHtml(VAR_6);\n        VAR_7 = VAR_7.replace(\"{{path}}\", VAR_2);\n        VAR_7 = VAR_7.replace(\"{{additionalInfo}}\", VAR_3);\n        if (VAR_7.contains(\"{{routes}}\")) {\n            VAR_7 = VAR_7.replace(\"{{routes}}\", getRoutes(VAR_0));\n        }\n\n        getElement().appendChild(new Html(VAR_7).getElement());\n        return VAR_8.SC_NOT_FOUND;\n    }",
  "func_graph_path": "vaadin/flow/cde1389507aac2dc8aa6ae39296765c1ca457b69/RouteNotFoundError.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -6,6 +6,8 @@\n         if (parameter.hasCustomMessage()) {\n             additionalInfo = \"Reason: \" + parameter.getCustomMessage();\n         }\n+        path = Jsoup.clean(path, Whitelist.none());\n+        additionalInfo = Jsoup.clean(additionalInfo, Whitelist.none());\n \n         boolean productionMode = event.getUI().getSession().getConfiguration()\n                 .isProductionMode();",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "        path = Jsoup.clean(path, Whitelist.none());",
      "        additionalInfo = Jsoup.clean(additionalInfo, Whitelist.none());"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/vaadin/flow/pull/5498",
  "description": {
    "pr_info": {
      "title": "Sanitize input used in error template",
      "number": 5498
    },
    "comment": [
      "As error template is html, and the input used in it is taken from the path, which can be anything, the input needs to be sanitized before added to the template to avoid possible XSS injection.\n\n<!-- Reviewable:start -->\n---\nThis change isâ€‚[<img src=\"https://reviewable.io/review_button.svg\" height=\"34\" align=\"absmiddle\" alt=\"Reviewable\"/>](https://reviewable.io/reviews/vaadin/flow/5498)\n<!-- Reviewable:end -->\n",
      "[![CLA assistant check](https://cla-assistant.io/pull/badge/signed)](https://cla-assistant.io/vaadin/flow?pullRequest=5498) <br/>All committers have signed the CLA.",
      "[![CLA assistant check](https://cla-assistant.io/pull/badge/not_signed)](https://cla-assistant.io/vaadin/flow?pullRequest=5498) <br/>Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our [Contributor License Agreement](https://cla-assistant.io/vaadin/flow?pullRequest=5498) before we can accept your contribution.<br/><sub>You have signed the CLA already but the status is still pending? Let us [recheck](https://cla-assistant.io/check/vaadin/flow?pullRequest=5498) it.</sub>"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix;  \n**Confidence:** 1.0"
}