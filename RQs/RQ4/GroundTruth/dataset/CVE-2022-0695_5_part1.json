{
  "cve_id": "CVE-2022-0695",
  "cwe_ids": [
    "CWE-400"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "radareorg/radare2",
  "commit_msg": "Fix DoS in PE/QNX/DYLDCACHE/PSX parsers ##crash\n\n* Reported by lazymio\n* Reproducer: AAA4AAAAAB4=",
  "commit_hash": "634b886e84a5c568d243e744becc6b3223e089cf",
  "git_url": "https://github.com/radareorg/radare2/commit/634b886e84a5c568d243e744becc6b3223e089cf",
  "file_path": "libr/util/buf.c",
  "func_name": "buf_format",
  "func_before": "static st64 buf_format(RBuffer *dst, RBuffer *src, const char *fmt, int n) {\n\tst64 res = 0;\n\tint i;\n\tfor (i = 0; i < n; i++) {\n\t\tint j;\n\t\tint m = 1;\n\t\tint tsize = 2;\n\t\tbool bigendian = true;\n\n\t\tfor (j = 0; fmt[j]; j++) {\n\t\t\tswitch (fmt[j]) {\n\t\t\tcase '0':\n\t\t\tcase '1':\n\t\t\tcase '2':\n\t\t\tcase '3':\n\t\t\tcase '4':\n\t\t\tcase '5':\n\t\t\tcase '6':\n\t\t\tcase '7':\n\t\t\tcase '8':\n\t\t\tcase '9':\n\t\t\t\tif (m == 1) {\n\t\t\t\t\tm = r_num_get (NULL, &fmt[j]);\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\tcase 's': tsize = 2; bigendian = false; break;\n\t\t\tcase 'S': tsize = 2; bigendian = true; break;\n\t\t\tcase 'i': tsize = 4; bigendian = false; break;\n\t\t\tcase 'I': tsize = 4; bigendian = true; break;\n\t\t\tcase 'l': tsize = 8; bigendian = false; break;\n\t\t\tcase 'L': tsize = 8; bigendian = true; break;\n\t\t\tcase 'c': tsize = 1; bigendian = false; break;\n\t\t\tdefault: return -1;\n\t\t\t}\n\n\t\t\tint k;\n\t\t\tfor (k = 0; k < m; k++) {\n\t\t\t\tut8 tmp[sizeof (ut64)];\n\t\t\t\tut8 d1;\n\t\t\t\tut16 d2;\n\t\t\t\tut32 d3;\n\t\t\t\tut64 d4;\n\t\t\t\tst64 r = r_buf_read (src, tmp, tsize);\n\t\t\t\tif (r < tsize) {\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\n\t\t\t\tswitch (tsize) {\n\t\t\t\tcase 1:\n\t\t\t\t\td1 = r_read_ble8 (tmp);\n\t\t\t\t\tr = r_buf_write (dst, (ut8 *)&d1, 1);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\td2 = r_read_ble16 (tmp, bigendian);\n\t\t\t\t\tr = r_buf_write (dst, (ut8 *)&d2, 2);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 4:\n\t\t\t\t\td3 = r_read_ble32 (tmp, bigendian);\n\t\t\t\t\tr = r_buf_write (dst, (ut8 *)&d3, 4);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 8:\n\t\t\t\t\td4 = r_read_ble64 (tmp, bigendian);\n\t\t\t\t\tr = r_buf_write (dst, (ut8 *)&d4, 8);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (r < 0) {\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\tres += r;\n\t\t\t}\n\t\t\tm = 1;\n\t\t}\n\t}\n\treturn res;\n}",
  "abstract_func_before": "static st64 buf_format(RBuffer *VAR_0, RBuffer *VAR_1, const char *VAR_2, int VAR_3) {\n\tst64 VAR_4 = 0;\n\tint VAR_5;\n\tfor (VAR_5 = 0; VAR_5 < VAR_3; VAR_5++) {\n\t\tint VAR_6;\n\t\tint VAR_7 = 1;\n\t\tint VAR_8 = 2;\n\t\tbool VAR_9 = true;\n\n\t\tfor (VAR_6 = 0; VAR_2[VAR_6]; VAR_6++) {\n\t\t\tswitch (VAR_2[VAR_6]) {\n\t\t\tcase '0':\n\t\t\tcase '1':\n\t\t\tcase '2':\n\t\t\tcase '3':\n\t\t\tcase '4':\n\t\t\tcase '5':\n\t\t\tcase '6':\n\t\t\tcase '7':\n\t\t\tcase '8':\n\t\t\tcase '9':\n\t\t\t\tif (VAR_7 == 1) {\n\t\t\t\t\tVAR_7 = r_num_get (NULL, &VAR_2[VAR_6]);\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\tcase 's': VAR_8 = 2; VAR_9 = false; break;\n\t\t\tcase 'S': VAR_8 = 2; VAR_9 = true; break;\n\t\t\tcase 'i': VAR_8 = 4; VAR_9 = false; break;\n\t\t\tcase 'I': VAR_8 = 4; VAR_9 = true; break;\n\t\t\tcase 'l': VAR_8 = 8; VAR_9 = false; break;\n\t\t\tcase 'L': VAR_8 = 8; VAR_9 = true; break;\n\t\t\tcase 'c': VAR_8 = 1; VAR_9 = false; break;\n\t\t\tdefault: return -1;\n\t\t\t}\n\n\t\t\tint VAR_10;\n\t\t\tfor (VAR_10 = 0; VAR_10 < VAR_7; VAR_10++) {\n\t\t\t\tut8 VAR_11[sizeof (VAR_12)];\n\t\t\t\tut8 VAR_13;\n\t\t\t\tut16 VAR_14;\n\t\t\t\tut32 VAR_15;\n\t\t\t\tut64 VAR_16;\n\t\t\t\tst64 VAR_17 = r_buf_read (VAR_1, VAR_11, VAR_8);\n\t\t\t\tif (VAR_17 < VAR_8) {\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\n\t\t\t\tswitch (VAR_8) {\n\t\t\t\tcase 1:\n\t\t\t\t\tVAR_13 = r_read_ble8 (VAR_11);\n\t\t\t\t\tVAR_17 = r_buf_write (VAR_0, (ut8 *)&VAR_13, 1);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\tVAR_14 = r_read_ble16 (VAR_11, VAR_9);\n\t\t\t\t\tVAR_17 = r_buf_write (VAR_0, (ut8 *)&VAR_14, 2);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 4:\n\t\t\t\t\tVAR_15 = r_read_ble32 (VAR_11, VAR_9);\n\t\t\t\t\tVAR_17 = r_buf_write (VAR_0, (ut8 *)&VAR_15, 4);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 8:\n\t\t\t\t\tVAR_16 = r_read_ble64 (VAR_11, VAR_9);\n\t\t\t\t\tVAR_17 = r_buf_write (VAR_0, (ut8 *)&VAR_16, 8);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (VAR_17 < 0) {\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\tVAR_4 += VAR_17;\n\t\t\t}\n\t\t\tVAR_7 = 1;\n\t\t}\n\t}\n\treturn VAR_4;\n}",
  "func_graph_path_before": "radareorg/radare2/634b886e84a5c568d243e744becc6b3223e089cf/buf.c/vul/before/2.json",
  "func": "static st64 buf_format(RBuffer *dst, RBuffer *src, const char *fmt, int n) {\n\tst64 res = 0;\n\tint i;\n\tfor (i = 0; i < n; i++) {\n\t\tint j;\n\t\tint m = 1;\n\t\tint tsize = 2;\n\t\tbool bigendian = true;\n\n\t\tfor (j = 0; fmt[j]; j++) {\n\t\t\tswitch (fmt[j]) {\n\t\t\tcase '0':\n\t\t\tcase '1':\n\t\t\tcase '2':\n\t\t\tcase '3':\n\t\t\tcase '4':\n\t\t\tcase '5':\n\t\t\tcase '6':\n\t\t\tcase '7':\n\t\t\tcase '8':\n\t\t\tcase '9':\n\t\t\t\tif (m == 1) {\n\t\t\t\t\tm = r_num_get (NULL, &fmt[j]);\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\tcase 's': tsize = 2; bigendian = false; break;\n\t\t\tcase 'S': tsize = 2; bigendian = true; break;\n\t\t\tcase 'i': tsize = 4; bigendian = false; break;\n\t\t\tcase 'I': tsize = 4; bigendian = true; break;\n\t\t\tcase 'l': tsize = 8; bigendian = false; break;\n\t\t\tcase 'L': tsize = 8; bigendian = true; break;\n\t\t\tcase 'c': tsize = 1; bigendian = false; break;\n\t\t\tdefault: return -1;\n\t\t\t}\n\n\t\t\tint k;\n\t\t\tfor (k = 0; k < m; k++) {\n\t\t\t\tut8 tmp[sizeof (ut64)];\n\t\t\t\tut8 d1;\n\t\t\t\tut16 d2;\n\t\t\t\tut32 d3;\n\t\t\t\tut64 d4;\n\t\t\t\tst64 r = r_buf_read (src, tmp, tsize);\n\t\t\t\tif (r != tsize) {\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\tswitch (tsize) {\n\t\t\t\tcase 1:\n\t\t\t\t\td1 = r_read_ble8 (tmp);\n\t\t\t\t\tr = r_buf_write (dst, (ut8 *)&d1, 1);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\td2 = r_read_ble16 (tmp, bigendian);\n\t\t\t\t\tr = r_buf_write (dst, (ut8 *)&d2, 2);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 4:\n\t\t\t\t\td3 = r_read_ble32 (tmp, bigendian);\n\t\t\t\t\tr = r_buf_write (dst, (ut8 *)&d3, 4);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 8:\n\t\t\t\t\td4 = r_read_ble64 (tmp, bigendian);\n\t\t\t\t\tr = r_buf_write (dst, (ut8 *)&d4, 8);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (r < 0) {\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\tres += r;\n\t\t\t}\n\t\t\tm = 1;\n\t\t}\n\t}\n\treturn res;\n}",
  "abstract_func": "static st64 buf_format(RBuffer *VAR_0, RBuffer *VAR_1, const char *VAR_2, int VAR_3) {\n\tst64 VAR_4 = 0;\n\tint VAR_5;\n\tfor (VAR_5 = 0; VAR_5 < VAR_3; VAR_5++) {\n\t\tint VAR_6;\n\t\tint VAR_7 = 1;\n\t\tint VAR_8 = 2;\n\t\tbool VAR_9 = true;\n\n\t\tfor (VAR_6 = 0; VAR_2[VAR_6]; VAR_6++) {\n\t\t\tswitch (VAR_2[VAR_6]) {\n\t\t\tcase '0':\n\t\t\tcase '1':\n\t\t\tcase '2':\n\t\t\tcase '3':\n\t\t\tcase '4':\n\t\t\tcase '5':\n\t\t\tcase '6':\n\t\t\tcase '7':\n\t\t\tcase '8':\n\t\t\tcase '9':\n\t\t\t\tif (VAR_7 == 1) {\n\t\t\t\t\tVAR_7 = r_num_get (NULL, &VAR_2[VAR_6]);\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\tcase 's': VAR_8 = 2; VAR_9 = false; break;\n\t\t\tcase 'S': VAR_8 = 2; VAR_9 = true; break;\n\t\t\tcase 'i': VAR_8 = 4; VAR_9 = false; break;\n\t\t\tcase 'I': VAR_8 = 4; VAR_9 = true; break;\n\t\t\tcase 'l': VAR_8 = 8; VAR_9 = false; break;\n\t\t\tcase 'L': VAR_8 = 8; VAR_9 = true; break;\n\t\t\tcase 'c': VAR_8 = 1; VAR_9 = false; break;\n\t\t\tdefault: return -1;\n\t\t\t}\n\n\t\t\tint VAR_10;\n\t\t\tfor (VAR_10 = 0; VAR_10 < VAR_7; VAR_10++) {\n\t\t\t\tut8 VAR_11[sizeof (VAR_12)];\n\t\t\t\tut8 VAR_13;\n\t\t\t\tut16 VAR_14;\n\t\t\t\tut32 VAR_15;\n\t\t\t\tut64 VAR_16;\n\t\t\t\tst64 VAR_17 = r_buf_read (VAR_1, VAR_11, VAR_8);\n\t\t\t\tif (VAR_17 != VAR_8) {\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\tswitch (VAR_8) {\n\t\t\t\tcase 1:\n\t\t\t\t\tVAR_13 = r_read_ble8 (VAR_11);\n\t\t\t\t\tVAR_17 = r_buf_write (VAR_0, (ut8 *)&VAR_13, 1);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\tVAR_14 = r_read_ble16 (VAR_11, VAR_9);\n\t\t\t\t\tVAR_17 = r_buf_write (VAR_0, (ut8 *)&VAR_14, 2);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 4:\n\t\t\t\t\tVAR_15 = r_read_ble32 (VAR_11, VAR_9);\n\t\t\t\t\tVAR_17 = r_buf_write (VAR_0, (ut8 *)&VAR_15, 4);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 8:\n\t\t\t\t\tVAR_16 = r_read_ble64 (VAR_11, VAR_9);\n\t\t\t\t\tVAR_17 = r_buf_write (VAR_0, (ut8 *)&VAR_16, 8);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (VAR_17 < 0) {\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\tVAR_4 += VAR_17;\n\t\t\t}\n\t\t\tVAR_7 = 1;\n\t\t}\n\t}\n\treturn VAR_4;\n}",
  "func_graph_path": "radareorg/radare2/634b886e84a5c568d243e744becc6b3223e089cf/buf.c/vul/after/2.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -41,10 +41,9 @@\n \t\t\t\tut32 d3;\n \t\t\t\tut64 d4;\n \t\t\t\tst64 r = r_buf_read (src, tmp, tsize);\n-\t\t\t\tif (r < tsize) {\n+\t\t\t\tif (r != tsize) {\n \t\t\t\t\treturn -1;\n \t\t\t\t}\n-\n \t\t\t\tswitch (tsize) {\n \t\t\t\tcase 1:\n \t\t\t\t\td1 = r_read_ble8 (tmp);",
  "diff_line_info": {
    "deleted_lines": [
      "\t\t\t\tif (r < tsize) {",
      ""
    ],
    "added_lines": [
      "\t\t\t\tif (r != tsize) {"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/radareorg/radare2/pull/19747",
  "description": {
    "pr_info": {
      "title": "Fix DoS in PE/QNX/DYLDCACHE/PSX parsers ##crash",
      "number": 19747
    },
    "comment": [
      "* Reported by lazymio\r\n* Reproducer: AAA4AAAAAB4=\r\n\r\n<!--\r\nRead https://github.com/radareorg/radare2/blob/master/DEVELOPERS.md\r\n* PR title must be capitalized, concise and use ##tags\r\n* If the PR is fixing a ticket use 'Fix #1234 - ..' in the commit message\r\n* Follow the coding style, add tests and documentation if necessary\r\n-->\r\n\r\n- [ ] Mark this if you consider it ready to merge\r\n- [ ] I've added tests (optional)\r\n- [ ] I wrote some lines in the [book](https://github.com/radareorg/radare2book) (optional)\r\n\r\n**Description**\r\n\r\n<!-- explain your changes if necessary -->\r\n"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "**Step 1: Input Analysis**\n\nThe commit message references fixing a DoS (Denial of Service) vulnerability in several parsers. The code diff shows a change in buffer reading logic, specifically adjusting the condition that checks the read operation's result.\n\n**Step 2: Consistency Check**\n\nThe commit message and the code changes are consistent. Both address handling of read operations, which is directly related to the reported DoS issue.\n\n**Step 3: Purpose Evaluation**\n\nThe change modifies core logic by adjusting how buffer reads are validated, preventing potential crashes due to incomplete reads—a clear security concern.\n\n**Step 4: Security Vulnerability Assessment**\n\nThe patch addresses an externally exploitable weakness (DoS) by ensuring proper handling of incomplete reads. It relates to the secure operation of the parsers.\n\n**Step 5: Non-Security Classification (Not Applicable)**\n\nThe patch is a security fix, so further classification isn't needed.\n\n**Step 6: Confidence Scoring**\n\nAll elements consistently point to a security fix with DoS mitigation, earning a high confidence score.\n\n**Final Classification:** Security Vulnerability Fix; Confidence: 0.95"
}