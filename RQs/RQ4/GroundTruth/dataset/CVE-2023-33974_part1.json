{
  "cve_id": "CVE-2023-33974",
  "cwe_ids": [
    "CWE-362"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H",
  "cvss_is_v3": true,
  "repo_name": "RIOT-OS/RIOT",
  "commit_msg": "gnrc_sixlowpan_frag_sfr: fix ARQ scheduler race-condition",
  "commit_hash": "31c6191f6196f1a05c9765cffeadba868e3b0723",
  "git_url": "https://github.com/RIOT-OS/RIOT/commit/31c6191f6196f1a05c9765cffeadba868e3b0723",
  "file_path": "sys/net/gnrc/network_layer/sixlowpan/frag/sfr/gnrc_sixlowpan_frag_sfr.c",
  "func_name": "_handle_ack",
  "func_before": "static void _handle_ack(gnrc_netif_hdr_t *netif_hdr, gnrc_pktsnip_t *pkt,\n                        unsigned page)\n{\n    gnrc_sixlowpan_frag_vrb_t *vrbe;\n    sixlowpan_sfr_ack_t *hdr = pkt->data;\n    uint32_t recv_time = xtimer_now_usec();\n\n    (void)page;\n    DEBUG(\"6lo sfr: received ACK for datagram (%s, %02x): %02X%02X%02X%02X\\n\",\n          gnrc_netif_addr_to_str(gnrc_netif_hdr_get_src_addr(netif_hdr),\n                                 netif_hdr->src_l2addr_len,\n                                 addr_str), hdr->base.tag,\n          hdr->bitmap[0], hdr->bitmap[1], hdr->bitmap[2], hdr->bitmap[3]);\n    if ((vrbe = gnrc_sixlowpan_frag_vrb_reverse(\n            gnrc_netif_hdr_get_netif(netif_hdr),\n            gnrc_netif_hdr_get_src_addr(netif_hdr),\n            netif_hdr->src_l2addr_len, hdr->base.tag)) != NULL) {\n        /* we found a VRB entry by reverse lookup, forward ACK further down. */\n        sixlowpan_sfr_t mock_base = { .disp_ecn = hdr->base.disp_ecn,\n                                      .tag = vrbe->super.tag };\n        DEBUG(\"6lo sfr: forward ACK to (%s, %02x)\\n\",\n              gnrc_netif_addr_to_str(vrbe->super.src, vrbe->super.src_len,\n                                     addr_str), vrbe->super.tag);\n        _send_ack(vrbe->in_netif, vrbe->super.src, vrbe->super.src_len,\n                  &mock_base, hdr->bitmap);\n        if (IS_USED(MODULE_GNRC_SIXLOWPAN_FRAG_SFR_STATS)) {\n            _stats.acks.forwarded++;\n        }\n        if ((unaligned_get_u32(hdr->bitmap) == _full_bitmap.u32) ||\n            (unaligned_get_u32(hdr->bitmap) == _null_bitmap.u32)) {\n            if (CONFIG_GNRC_SIXLOWPAN_FRAG_RBUF_DEL_TIMER > 0) {\n                /* garbage-collect entry after CONFIG_GNRC_SIXLOWPAN_FRAG_RBUF_DEL_TIMER\n                 * microseconds */\n                vrbe->super.arrival = recv_time -\n                                      (CONFIG_GNRC_SIXLOWPAN_FRAG_VRB_TIMEOUT_US -\n                                       CONFIG_GNRC_SIXLOWPAN_FRAG_RBUF_DEL_TIMER);\n            }\n            else {\n                gnrc_sixlowpan_frag_vrb_rm(vrbe);\n            }\n        }\n        else {\n            vrbe->super.arrival = recv_time;\n        }\n    }\n    else {\n        gnrc_sixlowpan_frag_fb_t *fbuf;\n\n        if ((fbuf = gnrc_sixlowpan_frag_fb_get_by_tag(hdr->base.tag)) != NULL) {\n            /* ACK for pending ACK timeout received. removing ACK timeout */\n            DEBUG(\"6lo sfr: cancelling ARQ timeout\\n\");\n            evtimer_del((evtimer_t *)(&_arq_timer),\n                        &fbuf->sfr.arq_timeout_event.event);\n            fbuf->sfr.arq_timeout_event.msg.content.ptr = NULL;\n            if ((unaligned_get_u32(hdr->bitmap) == _null_bitmap.u32)) {\n                /* ACK indicates the reassembling endpoint canceled reassembly\n                 */\n                DEBUG(\"6lo sfr: fragmentation canceled\\n\");\n                /* Retry to send whole datagram if configured, otherwise\n                 * cancel fragmentation */\n                _retry_datagram(fbuf);\n            }\n            else {\n                /* Check and resent failed fragments within the current window\n                 */\n               _check_failed_frags(hdr, fbuf, recv_time / US_PER_MS);\n            }\n        }\n        else {\n            DEBUG(\"6lo sfr: no VRB or fragmentation buffer found\\n\");\n        }\n    }\n    gnrc_pktbuf_release(pkt);\n}",
  "abstract_func_before": "static void _handle_ack(gnrc_netif_hdr_t *VAR_0, gnrc_pktsnip_t *VAR_1,\n                        unsigned VAR_2)\n{\n    gnrc_sixlowpan_frag_vrb_t *VAR_3;\n    sixlowpan_sfr_ack_t *VAR_4 = VAR_1->data;\n    uint32_t VAR_5 = xtimer_now_usec();\n\n    (void)VAR_2;\n    DEBUG(\"6lo sfr: received ACK for datagram (%s, %02x): %02X%02X%02X%02X\\n\",\n          gnrc_netif_addr_to_str(gnrc_netif_hdr_get_src_addr(VAR_0),\n                                 VAR_0->src_l2addr_len,\n                                 VAR_6), VAR_4->base.tag,\n          VAR_4->bitmap[0], VAR_4->bitmap[1], VAR_4->bitmap[2], VAR_4->bitmap[3]);\n    if ((VAR_3 = gnrc_sixlowpan_frag_vrb_reverse(\n            gnrc_netif_hdr_get_netif(VAR_0),\n            gnrc_netif_hdr_get_src_addr(VAR_0),\n            VAR_0->src_l2addr_len, VAR_4->base.tag)) != NULL) {\n        /* COMMENT_0 */\n        sixlowpan_sfr_t VAR_7 = { .disp_ecn = VAR_4->base.disp_ecn,\n                                      .tag = VAR_3->super.tag };\n        DEBUG(\"6lo sfr: forward ACK to (%s, %02x)\\n\",\n              gnrc_netif_addr_to_str(VAR_3->super.src, VAR_3->super.src_len,\n                                     VAR_6), VAR_3->super.tag);\n        _send_ack(VAR_3->in_netif, VAR_3->super.src, VAR_3->super.src_len,\n                  &VAR_7, VAR_4->bitmap);\n        if (IS_USED(VAR_8)) {\n            VAR_9.acks.forwarded++;\n        }\n        if ((unaligned_get_u32(VAR_4->bitmap) == VAR_10.u32) ||\n            (unaligned_get_u32(VAR_4->bitmap) == VAR_11.u32)) {\n            if (VAR_12 > 0) {\n                /* COMMENT_1 */\n                                  \n                VAR_3->super.arrival = VAR_5 -\n                                      (VAR_13 -\n                                       VAR_12);\n            }\n            else {\n                gnrc_sixlowpan_frag_vrb_rm(VAR_3);\n            }\n        }\n        else {\n            VAR_3->super.arrival = VAR_5;\n        }\n    }\n    else {\n        gnrc_sixlowpan_frag_fb_t *VAR_14;\n\n        if ((VAR_14 = gnrc_sixlowpan_frag_fb_get_by_tag(VAR_4->base.tag)) != NULL) {\n            /* COMMENT_3 */\n            DEBUG(\"6lo sfr: cancelling ARQ timeout\\n\");\n            evtimer_del((evtimer_t *)(&VAR_15),\n                        &VAR_14->sfr.arq_timeout_event.event);\n            VAR_14->sfr.arq_timeout_event.msg.content.ptr = NULL;\n            if ((unaligned_get_u32(VAR_4->bitmap) == VAR_11.u32)) {\n                /* COMMENT_4 */\n                   \n                DEBUG(\"6lo sfr: fragmentation canceled\\n\");\n                /* COMMENT_6 */\n                                          \n                _retry_datagram(VAR_14);\n            }\n            else {\n                /* COMMENT_8 */\n                   \n               _check_failed_frags(VAR_4, VAR_14, VAR_5 / VAR_16);\n            }\n        }\n        else {\n            DEBUG(\"6lo sfr: no VRB or fragmentation buffer found\\n\");\n        }\n    }\n    gnrc_pktbuf_release(VAR_1);\n}",
  "func_graph_path_before": "RIOT-OS/RIOT/31c6191f6196f1a05c9765cffeadba868e3b0723/gnrc_sixlowpan_frag_sfr.c/vul/before/0.json",
  "func": "static void _handle_ack(gnrc_netif_hdr_t *netif_hdr, gnrc_pktsnip_t *pkt,\n                        unsigned page)\n{\n    gnrc_sixlowpan_frag_vrb_t *vrbe;\n    sixlowpan_sfr_ack_t *hdr = pkt->data;\n    uint32_t recv_time = xtimer_now_usec();\n\n    (void)page;\n    DEBUG(\"6lo sfr: received ACK for datagram (%s, %02x): %02X%02X%02X%02X\\n\",\n          gnrc_netif_addr_to_str(gnrc_netif_hdr_get_src_addr(netif_hdr),\n                                 netif_hdr->src_l2addr_len,\n                                 addr_str), hdr->base.tag,\n          hdr->bitmap[0], hdr->bitmap[1], hdr->bitmap[2], hdr->bitmap[3]);\n    if ((vrbe = gnrc_sixlowpan_frag_vrb_reverse(\n            gnrc_netif_hdr_get_netif(netif_hdr),\n            gnrc_netif_hdr_get_src_addr(netif_hdr),\n            netif_hdr->src_l2addr_len, hdr->base.tag)) != NULL) {\n        /* we found a VRB entry by reverse lookup, forward ACK further down. */\n        sixlowpan_sfr_t mock_base = { .disp_ecn = hdr->base.disp_ecn,\n                                      .tag = vrbe->super.tag };\n        DEBUG(\"6lo sfr: forward ACK to (%s, %02x)\\n\",\n              gnrc_netif_addr_to_str(vrbe->super.src, vrbe->super.src_len,\n                                     addr_str), vrbe->super.tag);\n        _send_ack(vrbe->in_netif, vrbe->super.src, vrbe->super.src_len,\n                  &mock_base, hdr->bitmap);\n        if (IS_USED(MODULE_GNRC_SIXLOWPAN_FRAG_SFR_STATS)) {\n            _stats.acks.forwarded++;\n        }\n        if ((unaligned_get_u32(hdr->bitmap) == _full_bitmap.u32) ||\n            (unaligned_get_u32(hdr->bitmap) == _null_bitmap.u32)) {\n            if (CONFIG_GNRC_SIXLOWPAN_FRAG_RBUF_DEL_TIMER > 0) {\n                /* garbage-collect entry after CONFIG_GNRC_SIXLOWPAN_FRAG_RBUF_DEL_TIMER\n                 * microseconds */\n                vrbe->super.arrival = recv_time -\n                                      (CONFIG_GNRC_SIXLOWPAN_FRAG_VRB_TIMEOUT_US -\n                                       CONFIG_GNRC_SIXLOWPAN_FRAG_RBUF_DEL_TIMER);\n            }\n            else {\n                gnrc_sixlowpan_frag_vrb_rm(vrbe);\n            }\n        }\n        else {\n            vrbe->super.arrival = recv_time;\n        }\n    }\n    else {\n        gnrc_sixlowpan_frag_fb_t *fbuf;\n\n        if ((fbuf = gnrc_sixlowpan_frag_fb_get_by_tag(hdr->base.tag)) != NULL) {\n            /* ACK for pending ACK timeout received. removing ACK timeout */\n            DEBUG(\"6lo sfr: cancelling ARQ timeout\\n\");\n            evtimer_del((evtimer_t *)(&_arq_timer),\n                        &fbuf->sfr.arq_timeout_event.event);\n            if ((unaligned_get_u32(hdr->bitmap) == _null_bitmap.u32)) {\n                /* ACK indicates the reassembling endpoint canceled reassembly\n                 */\n                DEBUG(\"6lo sfr: fragmentation canceled\\n\");\n                /* Retry to send whole datagram if configured, otherwise\n                 * cancel fragmentation */\n                _retry_datagram(fbuf);\n            }\n            else {\n                /* Check and resent failed fragments within the current window\n                 */\n               _check_failed_frags(hdr, fbuf, recv_time / US_PER_MS);\n            }\n        }\n        else {\n            DEBUG(\"6lo sfr: no VRB or fragmentation buffer found\\n\");\n        }\n    }\n    gnrc_pktbuf_release(pkt);\n}",
  "abstract_func": "static void _handle_ack(gnrc_netif_hdr_t *VAR_0, gnrc_pktsnip_t *VAR_1,\n                        unsigned VAR_2)\n{\n    gnrc_sixlowpan_frag_vrb_t *VAR_3;\n    sixlowpan_sfr_ack_t *VAR_4 = VAR_1->data;\n    uint32_t VAR_5 = xtimer_now_usec();\n\n    (void)VAR_2;\n    DEBUG(\"6lo sfr: received ACK for datagram (%s, %02x): %02X%02X%02X%02X\\n\",\n          gnrc_netif_addr_to_str(gnrc_netif_hdr_get_src_addr(VAR_0),\n                                 VAR_0->src_l2addr_len,\n                                 VAR_6), VAR_4->base.tag,\n          VAR_4->bitmap[0], VAR_4->bitmap[1], VAR_4->bitmap[2], VAR_4->bitmap[3]);\n    if ((VAR_3 = gnrc_sixlowpan_frag_vrb_reverse(\n            gnrc_netif_hdr_get_netif(VAR_0),\n            gnrc_netif_hdr_get_src_addr(VAR_0),\n            VAR_0->src_l2addr_len, VAR_4->base.tag)) != NULL) {\n        /* COMMENT_0 */\n        sixlowpan_sfr_t VAR_7 = { .disp_ecn = VAR_4->base.disp_ecn,\n                                      .tag = VAR_3->super.tag };\n        DEBUG(\"6lo sfr: forward ACK to (%s, %02x)\\n\",\n              gnrc_netif_addr_to_str(VAR_3->super.src, VAR_3->super.src_len,\n                                     VAR_6), VAR_3->super.tag);\n        _send_ack(VAR_3->in_netif, VAR_3->super.src, VAR_3->super.src_len,\n                  &VAR_7, VAR_4->bitmap);\n        if (IS_USED(VAR_8)) {\n            VAR_9.acks.forwarded++;\n        }\n        if ((unaligned_get_u32(VAR_4->bitmap) == VAR_10.u32) ||\n            (unaligned_get_u32(VAR_4->bitmap) == VAR_11.u32)) {\n            if (VAR_12 > 0) {\n                /* COMMENT_1 */\n                                  \n                VAR_3->super.arrival = VAR_5 -\n                                      (VAR_13 -\n                                       VAR_12);\n            }\n            else {\n                gnrc_sixlowpan_frag_vrb_rm(VAR_3);\n            }\n        }\n        else {\n            VAR_3->super.arrival = VAR_5;\n        }\n    }\n    else {\n        gnrc_sixlowpan_frag_fb_t *VAR_14;\n\n        if ((VAR_14 = gnrc_sixlowpan_frag_fb_get_by_tag(VAR_4->base.tag)) != NULL) {\n            /* COMMENT_3 */\n            DEBUG(\"6lo sfr: cancelling ARQ timeout\\n\");\n            evtimer_del((evtimer_t *)(&VAR_15),\n                        &VAR_14->sfr.arq_timeout_event.event);\n            if ((unaligned_get_u32(VAR_4->bitmap) == VAR_11.u32)) {\n                /* COMMENT_4 */\n                   \n                DEBUG(\"6lo sfr: fragmentation canceled\\n\");\n                /* COMMENT_6 */\n                                          \n                _retry_datagram(VAR_14);\n            }\n            else {\n                /* COMMENT_8 */\n                   \n               _check_failed_frags(VAR_4, VAR_14, VAR_5 / VAR_16);\n            }\n        }\n        else {\n            DEBUG(\"6lo sfr: no VRB or fragmentation buffer found\\n\");\n        }\n    }\n    gnrc_pktbuf_release(VAR_1);\n}",
  "func_graph_path": "RIOT-OS/RIOT/31c6191f6196f1a05c9765cffeadba868e3b0723/gnrc_sixlowpan_frag_sfr.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -51,7 +51,6 @@\n             DEBUG(\"6lo sfr: cancelling ARQ timeout\\n\");\n             evtimer_del((evtimer_t *)(&_arq_timer),\n                         &fbuf->sfr.arq_timeout_event.event);\n-            fbuf->sfr.arq_timeout_event.msg.content.ptr = NULL;\n             if ((unaligned_get_u32(hdr->bitmap) == _null_bitmap.u32)) {\n                 /* ACK indicates the reassembling endpoint canceled reassembly\n                  */",
  "diff_line_info": {
    "deleted_lines": [
      "            fbuf->sfr.arq_timeout_event.msg.content.ptr = NULL;"
    ],
    "added_lines": []
  },
  "is_vul": true,
  "pr_url": "https://github.com/RIOT-OS/RIOT/pull/19679",
  "description": {
    "pr_info": {
      "title": "gnrc_sixlowpan_frag_sfr: fix ARQ scheduler race-condition",
      "number": 19679
    },
    "comment": [
      "<!--\r\nThe RIOT community cares a lot about code quality.\r\nTherefore, before describing what your contribution is about, we would like\r\nyou to make sure that your modifications are compliant with the RIOT\r\ncoding conventions, see https://github.com/RIOT-OS/RIOT/blob/master/CODING_CONVENTIONS.md.\r\n-->\r\n\r\n### Contribution description\r\nSee https://github.com/RIOT-OS/RIOT/security/advisories/GHSA-8m3w-mphf-wxm8\r\n<!--\r\nPut here the description of your contribution:\r\n- describe which part(s) of RIOT is (are) involved\r\n- if it's a bug fix, describe the bug that it solves and how it is solved\r\n- you can also give more information to reviewers about how to test your changes\r\n-->\r\n\r\n\r\n### Testing procedure\r\n\r\n<!--\r\nDetails steps to test your contribution:\r\n- which test/example to compile for which board and is there a 'test' command\r\n- how to know that it was not working/available in master\r\n- the expected success test output\r\n-->\r\n\r\n\r\n### Issues/PRs references\r\n\r\n<!--\r\nExamples: Fixes #1234. See also #5678. Depends on PR #9876.\r\n\r\nPlease use keywords (e.g., fixes, resolve) with the links to the issues you\r\nresolved, this way they will be automatically closed when your pull request\r\nis merged. See https://help.github.com/articles/closing-issues-using-keywords/.\r\n-->\r\n",
      "### Murdock results\n\n:heavy_check_mark: [PASSED](https://ci.riot-os.org/details/4713913fc6d1414691da03713dbc1baa)\n\n31c6191f6196f1a05c9765cffeadba868e3b0723 gnrc_sixlowpan_frag_sfr: fix ARQ scheduler race-condition\n\n|  Success  |  Failures  |  Total  |  Runtime  |\n| :-------: | :--------: | :-----: | :-------: |\n| 6933 | 0 | 6933 | 16m:54s |\n\n\n#### Artifacts\n- [Documentation preview](https://ci.riot-os.org/results/4713913fc6d1414691da03713dbc1baa/doc-preview/)\n",
      "> ### Murdock results\r\n> \r\n> :x: [FAILED](https://ci.riot-os.org/details/8bc8678a27694e7c887b6764198f0a9b)\r\n> \r\n> 7c28616910892d2af21d7ef8c28ff9a60b4ea941 gnrc_sixlowpan_frag_sfr: fix ARQ scheduler race-condition\r\n> \r\n> |  Success  |  Failures  |  Total  |  Runtime  |\r\n> | :-------: | :--------: | :-----: | :-------: |\r\n> | 4235 | 0 | 6933 | 06m:11s |\r\n> \r\n> \r\n> #### Artifacts\r\n> \r\n\r\nSomeone forgot to mention the failures? (/cc @aabadie)",
      "bors merge",
      "This PR was included in a batch that was canceled, it will be automatically retried",
      "  Build succeeded!\n\n  The publicly hosted instance of bors-ng is deprecated and will go away soon.\n\n  If you want to self-host your own instance, [instructions are here][instructions].\n  For more help, visit [the forum].\n\n  If you want to switch to GitHub's built-in merge queue, visit [their help page][gh].\n\n  [instructions]: https://github.com/bors-ng/bors-ng#how-to-set-up-your-own-real-instance\n  [the forum]: https://forum.bors.tech\n  [gh]: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue\n\n\n\n  * [Murdock](https://ci.riot-os.org/details/fb540a7fea3d482dbf15b594aaf08a39)\n  * [static-tests](https://github.com/RIOT-OS/RIOT/actions/runs/5124347194/jobs/9216073113)\n  * [tools-build-success](https://github.com/RIOT-OS/RIOT/actions/runs/5124347197/jobs/9216103309)"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.9"
}