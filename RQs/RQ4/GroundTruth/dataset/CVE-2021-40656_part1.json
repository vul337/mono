{
  "cve_id": "CVE-2021-40656",
  "cwe_ids": [
    "CWE-787"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "libsixel",
  "commit_msg": "[error_diffuse] don't diffuse into the void",
  "commit_hash": "dc96cdc27fb53e8595af67aaf68001033c808e42",
  "git_url": "https://github.com/libsixel/libsixel/commit/dc96cdc27fb53e8595af67aaf68001033c808e42",
  "file_path": "src/quant.c",
  "func_name": "error_diffuse",
  "func_before": "static void\nerror_diffuse(unsigned char /* in */    *data,      /* base address of pixel buffer */\n              int           /* in */    pos,        /* address of the destination pixel */\n              int           /* in */    depth,      /* color depth in bytes */\n              int           /* in */    error,      /* error energy */\n              int           /* in */    numerator,  /* numerator of diffusion coefficient */\n              int           /* in */    denominator /* denominator of diffusion coefficient */)\n{\n    int c;\n\n    data += pos * depth;\n\n    c = *data + error * numerator / denominator;\n    if (c < 0) {\n        c = 0;\n    }\n    if (c >= 1 << 8) {\n        c = (1 << 8) - 1;\n    }\n    *data = (unsigned char)c;\n}",
  "abstract_func_before": "static void\nerror_diffuse(unsigned char /* COMMENT_0 */    *VAR_0,      /* COMMENT_1 */\n              int           /* COMMENT_0 */    VAR_1,        /* COMMENT_2 */\n              int           /* COMMENT_0 */    VAR_2,      /* COMMENT_3 */\n              int           /* COMMENT_0 */    VAR_3,      /* COMMENT_4 */\n              int           /* COMMENT_0 */    VAR_4,  /* COMMENT_5 */\n              int           /* COMMENT_0 */    VAR_5 /* COMMENT_6 */)\n{\n    int VAR_6;\n\n    VAR_0 += VAR_1 * VAR_2;\n\n    VAR_6 = *VAR_0 + VAR_3 * VAR_4 / VAR_5;\n    if (VAR_6 < 0) {\n        VAR_6 = 0;\n    }\n    if (VAR_6 >= 1 << 8) {\n        VAR_6 = (1 << 8) - 1;\n    }\n    *VAR_0 = (unsigned char)VAR_6;\n}",
  "func_graph_path_before": "libsixel/dc96cdc27fb53e8595af67aaf68001033c808e42/quant.c/vul/before/0.json",
  "func": "static void\nerror_diffuse(unsigned char /* in */    *data,       /* base address of pixel buffer */\n              int           /* in */    pos,         /* address of the destination pixel */\n              int           /* in */    depth,       /* color depth in bytes */\n              int           /* in */    error,       /* error energy */\n              int           /* in */    numerator,   /* numerator of diffusion coefficient */\n              int           /* in */    denominator ,/* denominator of diffusion coefficient */\n              int           /* in */    area         /* area, in pixels */)\n{\n    int c;\n\n    if (pos < 0 || pos >= area) {\n        return;\n    }\n\n    data += pos * depth;\n\n    c = *data + error * numerator / denominator;\n    if (c < 0) {\n        c = 0;\n    }\n    if (c >= 1 << 8) {\n        c = (1 << 8) - 1;\n    }\n    *data = (unsigned char)c;\n}",
  "abstract_func": "static void\nerror_diffuse(unsigned char /* COMMENT_0 */    *VAR_0,       /* COMMENT_1 */\n              int           /* COMMENT_0 */    VAR_1,         /* COMMENT_2 */\n              int           /* COMMENT_0 */    VAR_2,       /* COMMENT_3 */\n              int           /* COMMENT_0 */    VAR_3,       /* COMMENT_4 */\n              int           /* COMMENT_0 */    VAR_4,   /* COMMENT_5 */\n              int           /* COMMENT_0 */    VAR_5 ,/* COMMENT_6 */\n              int           /* COMMENT_0 */    VAR_6         /* COMMENT_7 */)\n{\n    int VAR_7;\n\n    if (VAR_1 < 0 || VAR_1 >= VAR_6) {\n        return;\n    }\n\n    VAR_0 += VAR_1 * VAR_2;\n\n    VAR_7 = *VAR_0 + VAR_3 * VAR_4 / VAR_5;\n    if (VAR_7 < 0) {\n        VAR_7 = 0;\n    }\n    if (VAR_7 >= 1 << 8) {\n        VAR_7 = (1 << 8) - 1;\n    }\n    *VAR_0 = (unsigned char)VAR_7;\n}",
  "func_graph_path": "libsixel/dc96cdc27fb53e8595af67aaf68001033c808e42/quant.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,12 +1,17 @@\n static void\n-error_diffuse(unsigned char /* in */    *data,      /* base address of pixel buffer */\n-              int           /* in */    pos,        /* address of the destination pixel */\n-              int           /* in */    depth,      /* color depth in bytes */\n-              int           /* in */    error,      /* error energy */\n-              int           /* in */    numerator,  /* numerator of diffusion coefficient */\n-              int           /* in */    denominator /* denominator of diffusion coefficient */)\n+error_diffuse(unsigned char /* in */    *data,       /* base address of pixel buffer */\n+              int           /* in */    pos,         /* address of the destination pixel */\n+              int           /* in */    depth,       /* color depth in bytes */\n+              int           /* in */    error,       /* error energy */\n+              int           /* in */    numerator,   /* numerator of diffusion coefficient */\n+              int           /* in */    denominator ,/* denominator of diffusion coefficient */\n+              int           /* in */    area         /* area, in pixels */)\n {\n     int c;\n+\n+    if (pos < 0 || pos >= area) {\n+        return;\n+    }\n \n     data += pos * depth;\n ",
  "diff_line_info": {
    "deleted_lines": [
      "error_diffuse(unsigned char /* in */    *data,      /* base address of pixel buffer */",
      "              int           /* in */    pos,        /* address of the destination pixel */",
      "              int           /* in */    depth,      /* color depth in bytes */",
      "              int           /* in */    error,      /* error energy */",
      "              int           /* in */    numerator,  /* numerator of diffusion coefficient */",
      "              int           /* in */    denominator /* denominator of diffusion coefficient */)"
    ],
    "added_lines": [
      "error_diffuse(unsigned char /* in */    *data,       /* base address of pixel buffer */",
      "              int           /* in */    pos,         /* address of the destination pixel */",
      "              int           /* in */    depth,       /* color depth in bytes */",
      "              int           /* in */    error,       /* error energy */",
      "              int           /* in */    numerator,   /* numerator of diffusion coefficient */",
      "              int           /* in */    denominator ,/* denominator of diffusion coefficient */",
      "              int           /* in */    area         /* area, in pixels */)",
      "",
      "    if (pos < 0 || pos >= area) {",
      "        return;",
      "    }"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/libsixel/libsixel/pull/26",
  "description": {
    "pr_info": {
      "title": "[error_diffuse] don't diffuse into the void",
      "number": 26
    },
    "comment": [
      "Fixes the invalid accesses noted by @a4865g in #25. Simple and inelegant, but robust fix. Closes #25."
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "The patch adds boundary checks in the error_diffuse function to prevent buffer overflow, which is a security issue. The fix directly addresses an invalid memory access vulnerability, as indicated by the commit message and vulnerability description.\n\n**Final Classification:** Security Vulnerability Fix; **Confidence:** 1.0"
}