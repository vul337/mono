{
  "cve_id": "CVE-2021-29441",
  "cwe_ids": [
    "CWE-290"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "alibaba/nacos",
  "commit_msg": "Fix #4701",
  "commit_hash": "91d16023d91ea21a5e58722c751485a0b9bbeeb3",
  "git_url": "https://github.com/alibaba/nacos/commit/91d16023d91ea21a5e58722c751485a0b9bbeeb3",
  "file_path": "core/src/main/java/com/alibaba/nacos/core/auth/AuthFilter.java",
  "func_name": "doFilter",
  "func_before": "@Override\n    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)\n            throws IOException, ServletException {\n        \n        if (!authConfigs.isAuthEnabled()) {\n            chain.doFilter(request, response);\n            return;\n        }\n        \n        HttpServletRequest req = (HttpServletRequest) request;\n        HttpServletResponse resp = (HttpServletResponse) response;\n        \n        if (authConfigs.isEnableUserAgentAuthWhite()) {\n            String userAgent = WebUtils.getUserAgent(req);\n            if (StringUtils.startsWith(userAgent, Constants.NACOS_SERVER_HEADER)) {\n                chain.doFilter(request, response);\n                return;\n            }\n        } else if (StringUtils.isNotBlank(authConfigs.getServerIdentityKey()) && StringUtils\n                .isNotBlank(authConfigs.getServerIdentityValue())) {\n            String serverIdentity = req.getHeader(authConfigs.getServerIdentityKey());\n            if (authConfigs.getServerIdentityValue().equals(serverIdentity)) {\n                chain.doFilter(request, response);\n                return;\n            }\n            Loggers.AUTH.warn(\"Invalid server identity value for {} from {}\", authConfigs.getServerIdentityKey(),\n                    req.getRemoteHost());\n        } else {\n            resp.sendError(HttpServletResponse.SC_FORBIDDEN,\n                    \"Invalid server identity key or value, Please make sure set `nacos.core.auth.server.identity.key`\"\n                            + \" and `nacos.core.auth.server.identity.value`, or open `nacos.core.auth.enable.userAgentAuthWhite`\");\n            return;\n        }\n        \n        try {\n            \n            Method method = methodsCache.getMethod(req);\n            \n            if (method == null) {\n                chain.doFilter(request, response);\n                return;\n            }\n            \n            if (method.isAnnotationPresent(Secured.class) && authConfigs.isAuthEnabled()) {\n                \n                if (Loggers.AUTH.isDebugEnabled()) {\n                    Loggers.AUTH.debug(\"auth start, request: {} {}\", req.getMethod(), req.getRequestURI());\n                }\n                \n                Secured secured = method.getAnnotation(Secured.class);\n                String action = secured.action().toString();\n                String resource = secured.resource();\n                \n                if (StringUtils.isBlank(resource)) {\n                    ResourceParser parser = getResourceParser(secured.parser());\n                    resource = parser.parseName(req);\n                }\n                \n                if (StringUtils.isBlank(resource)) {\n                    // deny if we don't find any resource:\n                    throw new AccessException(\"resource name invalid!\");\n                }\n                \n                authManager.auth(new Permission(resource, action), authManager.login(req));\n                \n            }\n            chain.doFilter(request, response);\n        } catch (AccessException e) {\n            if (Loggers.AUTH.isDebugEnabled()) {\n                Loggers.AUTH.debug(\"access denied, request: {} {}, reason: {}\", req.getMethod(), req.getRequestURI(),\n                        e.getErrMsg());\n            }\n            resp.sendError(HttpServletResponse.SC_FORBIDDEN, e.getErrMsg());\n            return;\n        } catch (IllegalArgumentException e) {\n            resp.sendError(HttpServletResponse.SC_BAD_REQUEST, ExceptionUtil.getAllExceptionMsg(e));\n            return;\n        } catch (Exception e) {\n            resp.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, \"Server failed,\" + e.getMessage());\n            return;\n        }\n    }",
  "abstract_func_before": "@Override\n    public void doFilter(ServletRequest VAR_0, ServletResponse VAR_1, FilterChain VAR_2)\n            throws IOException, ServletException {\n        \n        if (!VAR_3.isAuthEnabled()) {\n            VAR_2.doFilter(VAR_0, VAR_1);\n            return;\n        }\n        \n        HttpServletRequest VAR_4 = (HttpServletRequest) VAR_0;\n        HttpServletResponse VAR_5 = (HttpServletResponse) VAR_1;\n        \n        if (VAR_3.isEnableUserAgentAuthWhite()) {\n            String VAR_6 = VAR_7.getUserAgent(VAR_4);\n            if (VAR_8.startsWith(VAR_6, VAR_9.NACOS_SERVER_HEADER)) {\n                VAR_2.doFilter(VAR_0, VAR_1);\n                return;\n            }\n        } else if (VAR_8.isNotBlank(VAR_3.getServerIdentityKey()) && VAR_8\n                .isNotBlank(VAR_3.getServerIdentityValue())) {\n            String VAR_10 = VAR_4.getHeader(VAR_3.getServerIdentityKey());\n            if (VAR_3.getServerIdentityValue().equals(VAR_10)) {\n                VAR_2.doFilter(VAR_0, VAR_1);\n                return;\n            }\n            VAR_11.AUTH.warn(\"Invalid server identity value for {} from {}\", VAR_3.getServerIdentityKey(),\n                    VAR_4.getRemoteHost());\n        } else {\n            VAR_5.sendError(VAR_12.SC_FORBIDDEN,\n                    \"Invalid server identity key or value, Please make sure set `nacos.core.auth.server.identity.key`\"\n                            + \" and `nacos.core.auth.server.identity.value`, or open `nacos.core.auth.enable.userAgentAuthWhite`\");\n            return;\n        }\n        \n        try {\n            \n            Method VAR_13 = VAR_14.getMethod(VAR_4);\n            \n            if (VAR_13 == null) {\n                VAR_2.doFilter(VAR_0, VAR_1);\n                return;\n            }\n            \n            if (VAR_13.isAnnotationPresent(Secured.class) && VAR_3.isAuthEnabled()) {\n                \n                if (VAR_11.AUTH.isDebugEnabled()) {\n                    VAR_11.AUTH.debug(\"auth start, request: {} {}\", VAR_4.getMethod(), VAR_4.getRequestURI());\n                }\n                \n                Secured VAR_15 = VAR_13.getAnnotation(Secured.class);\n                String VAR_16 = VAR_15.action().toString();\n                String VAR_17 = VAR_15.resource();\n                \n                if (VAR_8.isBlank(VAR_17)) {\n                    ResourceParser VAR_18 = getResourceParser(VAR_15.parser());\n                    VAR_17 = VAR_18.parseName(VAR_4);\n                }\n                \n                if (VAR_8.isBlank(VAR_17)) {\n                    /* COMMENT_0 */\n                    throw new AccessException(\"resource name invalid!\");\n                }\n                \n                VAR_19.auth(new Permission(VAR_17, VAR_16), VAR_19.login(VAR_4));\n                \n            }\n            VAR_2.doFilter(VAR_0, VAR_1);\n        } catch (AccessException VAR_20) {\n            if (VAR_11.AUTH.isDebugEnabled()) {\n                VAR_11.AUTH.debug(\"access denied, request: {} {}, reason: {}\", VAR_4.getMethod(), VAR_4.getRequestURI(),\n                        VAR_20.getErrMsg());\n            }\n            VAR_5.sendError(VAR_12.SC_FORBIDDEN, VAR_20.getErrMsg());\n            return;\n        } catch (IllegalArgumentException VAR_20) {\n            VAR_5.sendError(VAR_12.SC_BAD_REQUEST, VAR_21.getAllExceptionMsg(VAR_20));\n            return;\n        } catch (Exception VAR_20) {\n            VAR_5.sendError(VAR_12.SC_INTERNAL_SERVER_ERROR, \"Server failed,\" + VAR_20.getMessage());\n            return;\n        }\n    }",
  "func_graph_path_before": "alibaba/nacos/91d16023d91ea21a5e58722c751485a0b9bbeeb3/AuthFilter.java/vul/before/0.json",
  "func": "@Override\n    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)\n            throws IOException, ServletException {\n        \n        if (!authConfigs.isAuthEnabled()) {\n            chain.doFilter(request, response);\n            return;\n        }\n        \n        HttpServletRequest req = (HttpServletRequest) request;\n        HttpServletResponse resp = (HttpServletResponse) response;\n        \n        if (authConfigs.isEnableUserAgentAuthWhite()) {\n            String userAgent = WebUtils.getUserAgent(req);\n            if (StringUtils.startsWith(userAgent, Constants.NACOS_SERVER_HEADER)) {\n                chain.doFilter(request, response);\n                return;\n            }\n        } else if (StringUtils.isNotBlank(authConfigs.getServerIdentityKey()) && StringUtils\n                .isNotBlank(authConfigs.getServerIdentityValue())) {\n            String serverIdentity = req.getHeader(authConfigs.getServerIdentityKey());\n            if (authConfigs.getServerIdentityValue().equals(serverIdentity)) {\n                chain.doFilter(request, response);\n                return;\n            }\n            Loggers.AUTH.warn(\"Invalid server identity value for {} from {}\", authConfigs.getServerIdentityKey(),\n                    req.getRemoteHost());\n        } else {\n            resp.sendError(HttpServletResponse.SC_FORBIDDEN,\n                    \"Invalid server identity key or value, Please make sure set `nacos.core.auth.server.identity.key`\"\n                            + \" and `nacos.core.auth.server.identity.value`, or open `nacos.core.auth.enable.userAgentAuthWhite`\");\n            return;\n        }\n        \n        try {\n            \n            Method method = methodsCache.getMethod(req);\n            \n            if (method == null) {\n                // For #4701, Only support register API.\n                resp.sendError(HttpServletResponse.SC_NOT_FOUND,\n                        \"Not found mehtod for path \" + req.getMethod() + \" \" + req.getRequestURI());\n                return;\n            }\n            \n            if (method.isAnnotationPresent(Secured.class) && authConfigs.isAuthEnabled()) {\n                \n                if (Loggers.AUTH.isDebugEnabled()) {\n                    Loggers.AUTH.debug(\"auth start, request: {} {}\", req.getMethod(), req.getRequestURI());\n                }\n                \n                Secured secured = method.getAnnotation(Secured.class);\n                String action = secured.action().toString();\n                String resource = secured.resource();\n                \n                if (StringUtils.isBlank(resource)) {\n                    ResourceParser parser = getResourceParser(secured.parser());\n                    resource = parser.parseName(req);\n                }\n                \n                if (StringUtils.isBlank(resource)) {\n                    // deny if we don't find any resource:\n                    throw new AccessException(\"resource name invalid!\");\n                }\n                \n                authManager.auth(new Permission(resource, action), authManager.login(req));\n                \n            }\n            chain.doFilter(request, response);\n        } catch (AccessException e) {\n            if (Loggers.AUTH.isDebugEnabled()) {\n                Loggers.AUTH.debug(\"access denied, request: {} {}, reason: {}\", req.getMethod(), req.getRequestURI(),\n                        e.getErrMsg());\n            }\n            resp.sendError(HttpServletResponse.SC_FORBIDDEN, e.getErrMsg());\n            return;\n        } catch (IllegalArgumentException e) {\n            resp.sendError(HttpServletResponse.SC_BAD_REQUEST, ExceptionUtil.getAllExceptionMsg(e));\n            return;\n        } catch (Exception e) {\n            resp.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, \"Server failed,\" + e.getMessage());\n            return;\n        }\n    }",
  "abstract_func": "@Override\n    public void doFilter(ServletRequest VAR_0, ServletResponse VAR_1, FilterChain VAR_2)\n            throws IOException, ServletException {\n        \n        if (!VAR_3.isAuthEnabled()) {\n            VAR_2.doFilter(VAR_0, VAR_1);\n            return;\n        }\n        \n        HttpServletRequest VAR_4 = (HttpServletRequest) VAR_0;\n        HttpServletResponse VAR_5 = (HttpServletResponse) VAR_1;\n        \n        if (VAR_3.isEnableUserAgentAuthWhite()) {\n            String VAR_6 = VAR_7.getUserAgent(VAR_4);\n            if (VAR_8.startsWith(VAR_6, VAR_9.NACOS_SERVER_HEADER)) {\n                VAR_2.doFilter(VAR_0, VAR_1);\n                return;\n            }\n        } else if (VAR_8.isNotBlank(VAR_3.getServerIdentityKey()) && VAR_8\n                .isNotBlank(VAR_3.getServerIdentityValue())) {\n            String VAR_10 = VAR_4.getHeader(VAR_3.getServerIdentityKey());\n            if (VAR_3.getServerIdentityValue().equals(VAR_10)) {\n                VAR_2.doFilter(VAR_0, VAR_1);\n                return;\n            }\n            VAR_11.AUTH.warn(\"Invalid server identity value for {} from {}\", VAR_3.getServerIdentityKey(),\n                    VAR_4.getRemoteHost());\n        } else {\n            VAR_5.sendError(VAR_12.SC_FORBIDDEN,\n                    \"Invalid server identity key or value, Please make sure set `nacos.core.auth.server.identity.key`\"\n                            + \" and `nacos.core.auth.server.identity.value`, or open `nacos.core.auth.enable.userAgentAuthWhite`\");\n            return;\n        }\n        \n        try {\n            \n            Method VAR_13 = VAR_14.getMethod(VAR_4);\n            \n            if (VAR_13 == null) {\n                /* COMMENT_0 */\n                VAR_5.sendError(VAR_12.SC_NOT_FOUND,\n                        \"Not found mehtod for path \" + VAR_4.getMethod() + \" \" + VAR_4.getRequestURI());\n                return;\n            }\n            \n            if (VAR_13.isAnnotationPresent(Secured.class) && VAR_3.isAuthEnabled()) {\n                \n                if (VAR_11.AUTH.isDebugEnabled()) {\n                    VAR_11.AUTH.debug(\"auth start, request: {} {}\", VAR_4.getMethod(), VAR_4.getRequestURI());\n                }\n                \n                Secured VAR_15 = VAR_13.getAnnotation(Secured.class);\n                String VAR_16 = VAR_15.action().toString();\n                String VAR_17 = VAR_15.resource();\n                \n                if (VAR_8.isBlank(VAR_17)) {\n                    ResourceParser VAR_18 = getResourceParser(VAR_15.parser());\n                    VAR_17 = VAR_18.parseName(VAR_4);\n                }\n                \n                if (VAR_8.isBlank(VAR_17)) {\n                    /* COMMENT_1 */\n                    throw new AccessException(\"resource name invalid!\");\n                }\n                \n                VAR_19.auth(new Permission(VAR_17, VAR_16), VAR_19.login(VAR_4));\n                \n            }\n            VAR_2.doFilter(VAR_0, VAR_1);\n        } catch (AccessException VAR_20) {\n            if (VAR_11.AUTH.isDebugEnabled()) {\n                VAR_11.AUTH.debug(\"access denied, request: {} {}, reason: {}\", VAR_4.getMethod(), VAR_4.getRequestURI(),\n                        VAR_20.getErrMsg());\n            }\n            VAR_5.sendError(VAR_12.SC_FORBIDDEN, VAR_20.getErrMsg());\n            return;\n        } catch (IllegalArgumentException VAR_20) {\n            VAR_5.sendError(VAR_12.SC_BAD_REQUEST, VAR_21.getAllExceptionMsg(VAR_20));\n            return;\n        } catch (Exception VAR_20) {\n            VAR_5.sendError(VAR_12.SC_INTERNAL_SERVER_ERROR, \"Server failed,\" + VAR_20.getMessage());\n            return;\n        }\n    }",
  "func_graph_path": "alibaba/nacos/91d16023d91ea21a5e58722c751485a0b9bbeeb3/AuthFilter.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -37,7 +37,9 @@\n             Method method = methodsCache.getMethod(req);\n             \n             if (method == null) {\n-                chain.doFilter(request, response);\n+                // For #4701, Only support register API.\n+                resp.sendError(HttpServletResponse.SC_NOT_FOUND,\n+                        \"Not found mehtod for path \" + req.getMethod() + \" \" + req.getRequestURI());\n                 return;\n             }\n             ",
  "diff_line_info": {
    "deleted_lines": [
      "                chain.doFilter(request, response);"
    ],
    "added_lines": [
      "                // For #4701, Only support register API.",
      "                resp.sendError(HttpServletResponse.SC_NOT_FOUND,",
      "                        \"Not found mehtod for path \" + req.getMethod() + \" \" + req.getRequestURI());"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/alibaba/nacos/pull/4703",
  "description": {
    "pr_info": {
      "title": "[ISSUE #4701] Fix bypass authentication(identity) problem.",
      "number": 4703
    },
    "comment": [
      "Please do not create a Pull Request without creating an issue first.\r\n\r\n## What is the purpose of the change\r\n\r\nFix #4701 \r\n\r\n- Add support for uri end with '/'\r\n- Directly reject if can't find api path in nacos implementations.\r\n\r\n## Brief changelog\r\n\r\nXX\r\n\r\n## Verifying this change\r\n\r\nXXXX\r\n\r\nFollow this checklist to help us incorporate your contribution quickly and easily:\r\n\r\n* [ ] Make sure there is a Github issue filed for the change (usually before you start working on it). Trivial changes like typos do not require a Github issue. Your pull request should address just this issue, without pulling in other changes - one PR resolves one issue.\r\n* [ ] Format the pull request title like `[ISSUE #123] Fix UnknownException when host config not exist`. Each commit in the pull request should have a meaningful subject line and body.\r\n* [ ] Write a pull request description that is detailed enough to understand what the pull request does, how, and why.\r\n* [ ] Write necessary unit-test to verify your logic correction, more mock a little better when cross module dependency exist. If the new feature or significant change is committed, please remember to add integration-test in [test module](https://github.com/alibaba/nacos/tree/master/test).\r\n* [ ] Run `mvn -B clean package apache-rat:check findbugs:findbugs -Dmaven.test.skip=true` to make sure basic checks pass. Run `mvn clean install -DskipITs` to make sure unit-test pass. Run `mvn clean test-compile failsafe:integration-test`  to make sure integration-test pass.\r\n\r\n"
    ]
  },
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "**Final Classification:** Defect Remediation & Feature Upgrades; **Confidence:** 0.95  \nThe patch addresses a specific issue by correctly handling URIs and returning appropriate HTTP responses, which is a non-security bug fix."
}