{
  "cve_id": "CVE-2023-44487",
  "cwe_ids": [
    "CWE-400"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
  "cvss_is_v3": true,
  "repo_name": "facebook/proxygen",
  "commit_msg": "Re-sync with internal repository\n\nThe internal and external repositories are out of sync. This Pull Request attempts to brings them back in sync by patching the GitHub repository. Please carefully review this patch. You must disable ShipIt for your project in order to merge this pull request. DO NOT IMPORT this pull request. Instead, merge it directly on GitHub using the MERGE BUTTON. Re-enable ShipIt after merging.",
  "commit_hash": "0a00c43d64c58a85e6250120f2377302675b0fe3",
  "git_url": "https://github.com/facebook/proxygen/commit/0a00c43d64c58a85e6250120f2377302675b0fe3",
  "file_path": "proxygen/lib/http/session/HTTPSession.cpp",
  "func_name": "HTTPSession::setupCodec",
  "func_before": "void HTTPSession::setupCodec() {\n  if (!codec_->supportsParallelRequests()) {\n    // until we support upstream pipelining\n    maxConcurrentIncomingStreams_ = 1;\n    maxConcurrentOutgoingStreamsRemote_ = isDownstream() ? 0 : 1;\n  }\n\n  // If a secondary authentication manager is configured for this session, set\n  // the SETTINGS_HTTP_CERT_AUTH to indicate support for HTTP-layer certificate\n  // authentication.\n  uint32_t certAuthSettingVal = 0;\n  if (secondAuthManager_) {\n    certAuthSettingVal = getCertAuthSettingVal();\n  }\n  HTTPSettings* settings = codec_->getEgressSettings();\n  if (settings) {\n    settings->setSetting(SettingsId::MAX_CONCURRENT_STREAMS,\n                         maxConcurrentIncomingStreams_);\n    if (certAuthSettingVal != 0) {\n      settings->setSetting(SettingsId::SETTINGS_HTTP_CERT_AUTH,\n                           certAuthSettingVal);\n    }\n  }\n  codec_->generateConnectionPreface(writeBuf_);\n\n  if (codec_->supportsSessionFlowControl() && !connFlowControl_) {\n    connFlowControl_ = new FlowControlFilter(*this, writeBuf_, codec_.call());\n    codec_.addFilters(std::unique_ptr<FlowControlFilter>(connFlowControl_));\n    // if we really support switching from spdy <-> h2, we need to update\n    // existing flow control filter\n  }\n  if (codec_->supportsParallelRequests() && !controlMessageRateLimitFilter_ &&\n      sock_) {\n    controlMessageRateLimitFilter_ = new ControlMessageRateLimitFilter(\n        &getEventBase()->timer(), sessionStats_);\n    codec_.addFilters(std::unique_ptr<ControlMessageRateLimitFilter>(\n        controlMessageRateLimitFilter_));\n  }\n\n  codec_.setCallback(this);\n}",
  "abstract_func_before": "void HTTPSession::setupCodec() {\n  if (!VAR_0->supportsParallelRequests()) {\n    /* COMMENT_0 */\n    VAR_1 = 1;\n    VAR_2 = isDownstream() ? 0 : 1;\n  }\n\n  /* COMMENT_1 */\n  /* COMMENT_2 */\n  /* COMMENT_3 */\n  uint32_t VAR_3 = 0;\n  if (VAR_4) {\n    VAR_3 = getCertAuthSettingVal();\n  }\n  HTTPSettings* VAR_5 = VAR_0->getEgressSettings();\n  if (VAR_5) {\n    VAR_5->setSetting(SettingsId::MAX_CONCURRENT_STREAMS,\n                         VAR_1);\n    if (VAR_3 != 0) {\n      VAR_5->setSetting(SettingsId::SETTINGS_HTTP_CERT_AUTH,\n                           VAR_3);\n    }\n  }\n  VAR_0->generateConnectionPreface(VAR_6);\n\n  if (VAR_0->supportsSessionFlowControl() && !VAR_7) {\n    VAR_7 = new FlowControlFilter(*this, VAR_6, VAR_0.call());\n    VAR_0.addFilters(std::VAR_8<FlowControlFilter>(VAR_7));\n    /* COMMENT_4 */\n    /* COMMENT_5 */\n  }\n  if (VAR_0->supportsParallelRequests() && !VAR_9 &&\n      VAR_10) {\n    VAR_9 = new ControlMessageRateLimitFilter(\n        &getEventBase()->timer(), VAR_11);\n    VAR_0.addFilters(std::VAR_8<ControlMessageRateLimitFilter>(\n        VAR_9));\n  }\n\n  VAR_0.setCallback(this);\n}",
  "func_graph_path_before": "facebook/proxygen/0a00c43d64c58a85e6250120f2377302675b0fe3/HTTPSession.cpp/vul/before/0.json",
  "func": "void HTTPSession::setupCodec() {\n  if (!codec_->supportsParallelRequests()) {\n    // until we support upstream pipelining\n    maxConcurrentIncomingStreams_ = 1;\n    maxConcurrentOutgoingStreamsRemote_ = isDownstream() ? 0 : 1;\n  }\n\n  // If a secondary authentication manager is configured for this session, set\n  // the SETTINGS_HTTP_CERT_AUTH to indicate support for HTTP-layer certificate\n  // authentication.\n  uint32_t certAuthSettingVal = 0;\n  if (secondAuthManager_) {\n    certAuthSettingVal = getCertAuthSettingVal();\n  }\n  HTTPSettings* settings = codec_->getEgressSettings();\n  if (settings) {\n    settings->setSetting(SettingsId::MAX_CONCURRENT_STREAMS,\n                         maxConcurrentIncomingStreams_);\n    if (certAuthSettingVal != 0) {\n      settings->setSetting(SettingsId::SETTINGS_HTTP_CERT_AUTH,\n                           certAuthSettingVal);\n    }\n  }\n  codec_->generateConnectionPreface(writeBuf_);\n\n  if (codec_->supportsSessionFlowControl() && !connFlowControl_) {\n    connFlowControl_ = new FlowControlFilter(*this, writeBuf_, codec_.call());\n    codec_.addFilters(std::unique_ptr<FlowControlFilter>(connFlowControl_));\n    // if we really support switching from spdy <-> h2, we need to update\n    // existing flow control filter\n  }\n  if (codec_->supportsParallelRequests() && !controlMessageRateLimitFilter_ &&\n      sock_ &&\n      codec_->getTransportDirection() == TransportDirection::DOWNSTREAM) {\n    controlMessageRateLimitFilter_ = new ControlMessageRateLimitFilter(\n        &getEventBase()->timer(), sessionStats_);\n    codec_.addFilters(std::unique_ptr<ControlMessageRateLimitFilter>(\n        controlMessageRateLimitFilter_));\n  }\n\n  codec_.setCallback(this);\n}",
  "abstract_func": "void HTTPSession::setupCodec() {\n  if (!VAR_0->supportsParallelRequests()) {\n    /* COMMENT_0 */\n    VAR_1 = 1;\n    VAR_2 = isDownstream() ? 0 : 1;\n  }\n\n  /* COMMENT_1 */\n  /* COMMENT_2 */\n  /* COMMENT_3 */\n  uint32_t VAR_3 = 0;\n  if (VAR_4) {\n    VAR_3 = getCertAuthSettingVal();\n  }\n  HTTPSettings* VAR_5 = VAR_0->getEgressSettings();\n  if (VAR_5) {\n    VAR_5->setSetting(SettingsId::MAX_CONCURRENT_STREAMS,\n                         VAR_1);\n    if (VAR_3 != 0) {\n      VAR_5->setSetting(SettingsId::SETTINGS_HTTP_CERT_AUTH,\n                           VAR_3);\n    }\n  }\n  VAR_0->generateConnectionPreface(VAR_6);\n\n  if (VAR_0->supportsSessionFlowControl() && !VAR_7) {\n    VAR_7 = new FlowControlFilter(*this, VAR_6, VAR_0.call());\n    VAR_0.addFilters(std::VAR_8<FlowControlFilter>(VAR_7));\n    /* COMMENT_4 */\n    /* COMMENT_5 */\n  }\n  if (VAR_0->supportsParallelRequests() && !VAR_9 &&\n      VAR_10 &&\n      VAR_0->getTransportDirection() == TransportDirection::DOWNSTREAM) {\n    VAR_9 = new ControlMessageRateLimitFilter(\n        &getEventBase()->timer(), VAR_11);\n    VAR_0.addFilters(std::VAR_8<ControlMessageRateLimitFilter>(\n        VAR_9));\n  }\n\n  VAR_0.setCallback(this);\n}",
  "func_graph_path": "facebook/proxygen/0a00c43d64c58a85e6250120f2377302675b0fe3/HTTPSession.cpp/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -30,7 +30,8 @@\n     // existing flow control filter\n   }\n   if (codec_->supportsParallelRequests() && !controlMessageRateLimitFilter_ &&\n-      sock_) {\n+      sock_ &&\n+      codec_->getTransportDirection() == TransportDirection::DOWNSTREAM) {\n     controlMessageRateLimitFilter_ = new ControlMessageRateLimitFilter(\n         &getEventBase()->timer(), sessionStats_);\n     codec_.addFilters(std::unique_ptr<ControlMessageRateLimitFilter>(",
  "diff_line_info": {
    "deleted_lines": [
      "      sock_) {"
    ],
    "added_lines": [
      "      sock_ &&",
      "      codec_->getTransportDirection() == TransportDirection::DOWNSTREAM) {"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/facebook/proxygen/pull/466",
  "description": {
    "pr_info": {
      "title": "Re-sync with internal repository following CVE-2023-44487",
      "number": 466
    },
    "comment": [
      "The internal and external repositories are out of sync. This Pull Request attempts to brings them back in sync by patching the GitHub repository. Please carefully review this patch. You must disable ShipIt for your project in order to merge this pull request. DO NOT IMPORT this pull request. Instead, merge it directly on GitHub using the MERGE BUTTON. Re-enable ShipIt after merging.",
      "This resolves CVE-2023-44487."
    ]
  },
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Defect Remediation & Feature Upgrades  \n**Confidence:** 0.9"
}