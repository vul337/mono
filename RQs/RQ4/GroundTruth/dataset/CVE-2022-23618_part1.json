{
  "cve_id": "CVE-2022-23618",
  "cwe_ids": [
    "CWE-601"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:P/I:P/A:N",
  "cvss_is_v3": false,
  "repo_name": "xwiki/xwiki-platform",
  "commit_msg": "XWIKI-10309: Check URL domains based on a whitelist (#1592)\n\nIntroduce a new property for listing the trusted domains and API to\r\ncheck an URL against that list and the aliases used in subwikis.\r\n\r\n  * Add new property url.trustedDomains in xwiki.properties\r\n  * Add new API in URLConfiguration to retrieve this configuration value\r\n  * Create a new URLSecurityManager responsible to check if an URL can\r\n    be trusted based on this property and on the subwikis configurations\r\n  * Introduce a new listener to invalidate the cache of\r\n    URLSecurityManager whenever a XWikiServerClass xobject is\r\nadded/updated/deleted\r\n  * Move URL API implementations to URL default module\r\n  * Add a new property url.enableTrustedDomains as a global switch off the\r\n    checks on domains to avoid breaking behaviours on existing instances\r\n  * Add a constant property in URLSecurityManager to be set in\r\n    ExecutionContext to allow temporary switch off the check for\r\nextensions\r\n  * Use both those switches in DefaultURLSecurityManager to prevent\r\n    performing the check when needed",
  "commit_hash": "5251c02080466bf9fb55288f04a37671108f8096",
  "git_url": "https://github.com/xwiki/xwiki-platform/commit/5251c02080466bf9fb55288f04a37671108f8096",
  "file_path": "xwiki-platform-core/xwiki-platform-oldcore/src/main/java/com/xpn/xwiki/user/impl/xwiki/MyFormAuthenticator.java",
  "func_name": "processLogin",
  "func_before": "@Override\n    public boolean processLogin(String username, String password, String rememberme, SecurityRequestWrapper request,\n        HttpServletResponse response, XWikiContext context) throws Exception\n    {\n        Principal principal = authenticate(username, password, context);\n        AuthenticationFailureManager authenticationFailureManager =\n            Utils.getComponent(AuthenticationFailureManager.class);\n        if (principal != null && authenticationFailureManager.validateForm(username, request)) {\n            // login successful\n            if (LOGGER.isInfoEnabled()) {\n                LOGGER.info(\"User \" + principal.getName() + \" has been logged-in\");\n            }\n\n            authenticationFailureManager.resetAuthenticationFailureCounter(username);\n\n            // invalidate old session if the user was already authenticated, and they logged in as a different user\n            if (request.getUserPrincipal() != null && !username.equals(request.getRemoteUser())) {\n                request.getSession().invalidate();\n            }\n\n            // manage persistent login info, if persistent login management is enabled\n            if (this.persistentLoginManager != null) {\n                // did the user request that their login be persistent?\n                if (rememberme != null) {\n                    // remember login\n                    this.persistentLoginManager.rememberLogin(request, response, username, password);\n                } else {\n                    // forget login\n                    this.persistentLoginManager.forgetLogin(request, response);\n                }\n            }\n\n            // make sure the Principal contains wiki name information\n            if (!StringUtils.contains(principal.getName(), ':')) {\n                principal = new SimplePrincipal(context.getWikiId() + \":\" + principal.getName());\n            }\n\n            request.setUserPrincipal(principal);\n\n            this.getUserAuthenticatedEventNotifier().notify(principal.getName());\n\n            Boolean bAjax = (Boolean) context.get(\"ajax\");\n            if ((bAjax == null) || (!bAjax.booleanValue())) {\n                String continueToURL = getContinueToURL(request);\n                // This is the url that the user was initially accessing before being prompted for login.\n                response.sendRedirect(response.encodeRedirectURL(continueToURL));\n            }\n        } else {\n            // login failed\n            // set response status and forward to error page\n            if (LOGGER.isInfoEnabled()) {\n                LOGGER.info(\"User \" + username + \" login has failed\");\n            }\n\n            authenticationFailureManager.recordAuthenticationFailure(username, request);\n\n            String returnCode = context.getWiki().Param(\"xwiki.authentication.unauthorized_code\");\n            int rCode = HttpServletResponse.SC_UNAUTHORIZED;\n            if ((returnCode != null) && (!returnCode.equals(\"\"))) {\n                try {\n                    rCode = Integer.parseInt(returnCode);\n                } catch (Exception e) {\n                    rCode = HttpServletResponse.SC_UNAUTHORIZED;\n                }\n            }\n            response.setStatus(rCode); // TODO: Does this work? (200 in case of error)\n        }\n\n        return true;\n    }",
  "abstract_func_before": "@Override\n    public boolean processLogin(String VAR_0, String VAR_1, String VAR_2, SecurityRequestWrapper VAR_3,\n        HttpServletResponse VAR_4, XWikiContext VAR_5) throws Exception\n    {\n        Principal VAR_6 = authenticate(VAR_0, VAR_1, VAR_5);\n        AuthenticationFailureManager VAR_7 =\n            VAR_8.getComponent(AuthenticationFailureManager.class);\n        if (VAR_6 != null && VAR_7.validateForm(VAR_0, VAR_3)) {\n            /* COMMENT_0 */\n            if (VAR_9.isInfoEnabled()) {\n                VAR_9.info(\"User \" + VAR_6.getName() + \" has been logged-in\");\n            }\n\n            VAR_7.resetAuthenticationFailureCounter(VAR_0);\n\n            /* COMMENT_1 */\n            if (VAR_3.getUserPrincipal() != null && !VAR_0.equals(VAR_3.getRemoteUser())) {\n                VAR_3.getSession().invalidate();\n            }\n\n            /* COMMENT_2 */\n            if (this.persistentLoginManager != null) {\n                /* COMMENT_3 */\n                if (VAR_2 != null) {\n                    /* COMMENT_4 */\n                    this.persistentLoginManager.rememberLogin(VAR_3, VAR_4, VAR_0, VAR_1);\n                } else {\n                    /* COMMENT_5 */\n                    this.persistentLoginManager.forgetLogin(VAR_3, VAR_4);\n                }\n            }\n\n            /* COMMENT_6 */\n            if (!VAR_10.contains(VAR_6.getName(), ':')) {\n                VAR_6 = new SimplePrincipal(VAR_5.getWikiId() + \":\" + VAR_6.getName());\n            }\n\n            VAR_3.setUserPrincipal(VAR_6);\n\n            this.getUserAuthenticatedEventNotifier().notify(VAR_6.getName());\n\n            Boolean VAR_11 = (Boolean) VAR_5.get(\"ajax\");\n            if ((VAR_11 == null) || (!VAR_11.booleanValue())) {\n                String VAR_12 = getContinueToURL(VAR_3);\n                /* COMMENT_7 */\n                VAR_4.sendRedirect(VAR_4.encodeRedirectURL(VAR_12));\n            }\n        } else {\n            /* COMMENT_8 */\n            /* COMMENT_9 */\n            if (VAR_9.isInfoEnabled()) {\n                VAR_9.info(\"User \" + VAR_0 + \" login has failed\");\n            }\n\n            VAR_7.recordAuthenticationFailure(VAR_0, VAR_3);\n\n            String VAR_13 = VAR_5.getWiki().Param(\"xwiki.authentication.unauthorized_code\");\n            int VAR_14 = VAR_15.SC_UNAUTHORIZED;\n            if ((VAR_13 != null) && (!VAR_13.equals(\"\"))) {\n                try {\n                    VAR_14 = VAR_16.parseInt(VAR_13);\n                } catch (Exception VAR_17) {\n                    VAR_14 = VAR_15.SC_UNAUTHORIZED;\n                }\n            }\n            VAR_4.setStatus(VAR_14); /* COMMENT_10 */\n        }\n\n        return true;\n    }",
  "func_graph_path_before": "xwiki/xwiki-platform/5251c02080466bf9fb55288f04a37671108f8096/MyFormAuthenticator.java/vul/before/0.json",
  "func": "@Override\n    public boolean processLogin(String username, String password, String rememberme, SecurityRequestWrapper request,\n        HttpServletResponse response, XWikiContext context) throws Exception\n    {\n        Principal principal = authenticate(username, password, context);\n        AuthenticationFailureManager authenticationFailureManager =\n            Utils.getComponent(AuthenticationFailureManager.class);\n        if (principal != null && authenticationFailureManager.validateForm(username, request)) {\n            // login successful\n            if (LOGGER.isInfoEnabled()) {\n                LOGGER.info(\"User \" + principal.getName() + \" has been logged-in\");\n            }\n\n            authenticationFailureManager.resetAuthenticationFailureCounter(username);\n\n            // invalidate old session if the user was already authenticated, and they logged in as a different user\n            if (request.getUserPrincipal() != null && !username.equals(request.getRemoteUser())) {\n                request.getSession().invalidate();\n            }\n\n            // manage persistent login info, if persistent login management is enabled\n            if (this.persistentLoginManager != null) {\n                // did the user request that their login be persistent?\n                if (rememberme != null) {\n                    // remember login\n                    this.persistentLoginManager.rememberLogin(request, response, username, password);\n                } else {\n                    // forget login\n                    this.persistentLoginManager.forgetLogin(request, response);\n                }\n            }\n\n            // make sure the Principal contains wiki name information\n            if (!StringUtils.contains(principal.getName(), ':')) {\n                principal = new SimplePrincipal(context.getWikiId() + \":\" + principal.getName());\n            }\n\n            request.setUserPrincipal(principal);\n\n            this.getUserAuthenticatedEventNotifier().notify(principal.getName());\n\n            Boolean bAjax = (Boolean) context.get(\"ajax\");\n            if ((bAjax == null) || (!bAjax.booleanValue())) {\n                // This is the url that the user was initially accessing before being prompted for login.\n                String continueToURL = getContinueToURL(request);\n                response.sendRedirect(response.encodeRedirectURL(continueToURL));\n            }\n        } else {\n            // login failed\n            // set response status and forward to error page\n            if (LOGGER.isInfoEnabled()) {\n                LOGGER.info(\"User \" + username + \" login has failed\");\n            }\n\n            authenticationFailureManager.recordAuthenticationFailure(username, request);\n\n            String returnCode = context.getWiki().Param(\"xwiki.authentication.unauthorized_code\");\n            int rCode = HttpServletResponse.SC_UNAUTHORIZED;\n            if ((returnCode != null) && (!returnCode.equals(\"\"))) {\n                try {\n                    rCode = Integer.parseInt(returnCode);\n                } catch (Exception e) {\n                    rCode = HttpServletResponse.SC_UNAUTHORIZED;\n                }\n            }\n            response.setStatus(rCode); // TODO: Does this work? (200 in case of error)\n        }\n\n        return true;\n    }",
  "abstract_func": "@Override\n    public boolean processLogin(String VAR_0, String VAR_1, String VAR_2, SecurityRequestWrapper VAR_3,\n        HttpServletResponse VAR_4, XWikiContext VAR_5) throws Exception\n    {\n        Principal VAR_6 = authenticate(VAR_0, VAR_1, VAR_5);\n        AuthenticationFailureManager VAR_7 =\n            VAR_8.getComponent(AuthenticationFailureManager.class);\n        if (VAR_6 != null && VAR_7.validateForm(VAR_0, VAR_3)) {\n            /* COMMENT_0 */\n            if (VAR_9.isInfoEnabled()) {\n                VAR_9.info(\"User \" + VAR_6.getName() + \" has been logged-in\");\n            }\n\n            VAR_7.resetAuthenticationFailureCounter(VAR_0);\n\n            /* COMMENT_1 */\n            if (VAR_3.getUserPrincipal() != null && !VAR_0.equals(VAR_3.getRemoteUser())) {\n                VAR_3.getSession().invalidate();\n            }\n\n            /* COMMENT_2 */\n            if (this.persistentLoginManager != null) {\n                /* COMMENT_3 */\n                if (VAR_2 != null) {\n                    /* COMMENT_4 */\n                    this.persistentLoginManager.rememberLogin(VAR_3, VAR_4, VAR_0, VAR_1);\n                } else {\n                    /* COMMENT_5 */\n                    this.persistentLoginManager.forgetLogin(VAR_3, VAR_4);\n                }\n            }\n\n            /* COMMENT_6 */\n            if (!VAR_10.contains(VAR_6.getName(), ':')) {\n                VAR_6 = new SimplePrincipal(VAR_5.getWikiId() + \":\" + VAR_6.getName());\n            }\n\n            VAR_3.setUserPrincipal(VAR_6);\n\n            this.getUserAuthenticatedEventNotifier().notify(VAR_6.getName());\n\n            Boolean VAR_11 = (Boolean) VAR_5.get(\"ajax\");\n            if ((VAR_11 == null) || (!VAR_11.booleanValue())) {\n                /* COMMENT_7 */\n                String VAR_12 = getContinueToURL(VAR_3);\n                VAR_4.sendRedirect(VAR_4.encodeRedirectURL(VAR_12));\n            }\n        } else {\n            /* COMMENT_8 */\n            /* COMMENT_9 */\n            if (VAR_9.isInfoEnabled()) {\n                VAR_9.info(\"User \" + VAR_0 + \" login has failed\");\n            }\n\n            VAR_7.recordAuthenticationFailure(VAR_0, VAR_3);\n\n            String VAR_13 = VAR_5.getWiki().Param(\"xwiki.authentication.unauthorized_code\");\n            int VAR_14 = VAR_15.SC_UNAUTHORIZED;\n            if ((VAR_13 != null) && (!VAR_13.equals(\"\"))) {\n                try {\n                    VAR_14 = VAR_16.parseInt(VAR_13);\n                } catch (Exception VAR_17) {\n                    VAR_14 = VAR_15.SC_UNAUTHORIZED;\n                }\n            }\n            VAR_4.setStatus(VAR_14); /* COMMENT_10 */\n        }\n\n        return true;\n    }",
  "func_graph_path": "xwiki/xwiki-platform/5251c02080466bf9fb55288f04a37671108f8096/MyFormAuthenticator.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -41,8 +41,8 @@\n \n             Boolean bAjax = (Boolean) context.get(\"ajax\");\n             if ((bAjax == null) || (!bAjax.booleanValue())) {\n+                // This is the url that the user was initially accessing before being prompted for login.\n                 String continueToURL = getContinueToURL(request);\n-                // This is the url that the user was initially accessing before being prompted for login.\n                 response.sendRedirect(response.encodeRedirectURL(continueToURL));\n             }\n         } else {",
  "diff_line_info": {
    "deleted_lines": [
      "                // This is the url that the user was initially accessing before being prompted for login."
    ],
    "added_lines": [
      "                // This is the url that the user was initially accessing before being prompted for login."
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/xwiki/xwiki-platform/pull/1592",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/xwiki/xwiki-platform/pull/1592: 403 Client Error: Forbidden for url: https://api.github.com/repos/xwiki/xwiki-platform/pulls/1592",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.7,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix;  \n**Confidence:** 0.7"
}