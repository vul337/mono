{
  "cve_id": "CVE-2017-6952",
  "cwe_ids": [
    "CWE-190"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "capstone-engine/capstone",
  "commit_msg": "provide a validity check to prevent against Integer overflow conditions (#870)\n\n* provide a validity check to prevent against Integer overflow conditions\r\n\r\n* fix some style issues.",
  "commit_hash": "6fe86eef621b9849f51a5e1e5d73258a93440403",
  "git_url": "https://github.com/capstone-engine/capstone/commit/6fe86eef621b9849f51a5e1e5d73258a93440403",
  "file_path": "windows/winkernel_mm.c",
  "func_name": "cs_winkernel_malloc",
  "func_before": "void * CAPSTONE_API cs_winkernel_malloc(size_t size)\n{\n\t// Disallow zero length allocation because they waste pool header space and,\n\t// in many cases, indicate a potential validation issue in the calling code.\n\tNT_ASSERT(size);\n\n\t// FP; a use of NonPagedPool is required for Windows 7 support\n#pragma prefast(suppress : 30030)\t\t// Allocating executable POOL_TYPE memory\n\tCS_WINKERNEL_MEMBLOCK *block = (CS_WINKERNEL_MEMBLOCK *)ExAllocatePoolWithTag(\n\t\t\tNonPagedPool, size + sizeof(CS_WINKERNEL_MEMBLOCK), CS_WINKERNEL_POOL_TAG);\n\tif (!block) {\n\t\treturn NULL;\n\t}\n\tblock->size = size;\n\n\treturn block->data;\n}",
  "abstract_func_before": "void * VAR_0 cs_winkernel_malloc(size_t VAR_1)\n{\n\t/* COMMENT_0 */\n\t/* COMMENT_1 */\n\tNT_ASSERT(VAR_1);\n\n\t/* COMMENT_2 */\n#pragma prefast(suppress : 30030)\t\t// Allocating executable POOL_TYPE memory\n\tCS_WINKERNEL_MEMBLOCK *VAR_2 = (CS_WINKERNEL_MEMBLOCK *)ExAllocatePoolWithTag(\n\t\t\tVAR_3, VAR_1 + sizeof(CS_WINKERNEL_MEMBLOCK), VAR_4);\n\tif (!VAR_2) {\n\t\treturn NULL;\n\t}\n\tVAR_2->size = VAR_1;\n\n\treturn VAR_2->data;\n}",
  "func_graph_path_before": null,
  "func": "void * CAPSTONE_API cs_winkernel_malloc(size_t size)\n{\n\t// Disallow zero length allocation because they waste pool header space and,\n\t// in many cases, indicate a potential validation issue in the calling code.\n\tNT_ASSERT(size);\n\n\t// FP; a use of NonPagedPool is required for Windows 7 support\n#pragma prefast(suppress : 30030)\t\t// Allocating executable POOL_TYPE memory\n\tsize_t number_of_bytes = 0;\n\tCS_WINKERNEL_MEMBLOCK *block = NULL;\n\t// A specially crafted size value can trigger the overflow.\n\t// If the sum in a value that overflows or underflows the capacity of the type,\n\t// the function returns NULL.\n\tif (!NT_SUCCESS(RtlSizeTAdd(size, sizeof(CS_WINKERNEL_MEMBLOCK), &number_of_bytes))) {\n\t\treturn NULL;\n\t}\n\tblock = (CS_WINKERNEL_MEMBLOCK *)ExAllocatePoolWithTag(\n\t\t\tNonPagedPool, number_of_bytes, CS_WINKERNEL_POOL_TAG);\n\tif (!block) {\n\t\treturn NULL;\n\t}\n\tblock->size = size;\n\n\treturn block->data;\n}",
  "abstract_func": "void * VAR_0 cs_winkernel_malloc(size_t VAR_1)\n{\n\t/* COMMENT_0 */\n\t/* COMMENT_1 */\n\tNT_ASSERT(VAR_1);\n\n\t/* COMMENT_2 */\n#pragma prefast(suppress : 30030)\t\t// Allocating executable POOL_TYPE memory\n\tsize_t VAR_2 = 0;\n\tCS_WINKERNEL_MEMBLOCK *VAR_3 = NULL;\n\t/* COMMENT_3 */\n\t/* COMMENT_4 */\n\t/* COMMENT_5 */\n\tif (!NT_SUCCESS(RtlSizeTAdd(VAR_1, sizeof(CS_WINKERNEL_MEMBLOCK), &VAR_2))) {\n\t\treturn NULL;\n\t}\n\tVAR_3 = (CS_WINKERNEL_MEMBLOCK *)ExAllocatePoolWithTag(\n\t\t\tVAR_4, VAR_2, VAR_5);\n\tif (!VAR_3) {\n\t\treturn NULL;\n\t}\n\tVAR_3->size = VAR_1;\n\n\treturn VAR_3->data;\n}",
  "func_graph_path": null,
  "diff_func": "--- func_before\n+++ func_after\n@@ -6,8 +6,16 @@\n \n \t// FP; a use of NonPagedPool is required for Windows 7 support\n #pragma prefast(suppress : 30030)\t\t// Allocating executable POOL_TYPE memory\n-\tCS_WINKERNEL_MEMBLOCK *block = (CS_WINKERNEL_MEMBLOCK *)ExAllocatePoolWithTag(\n-\t\t\tNonPagedPool, size + sizeof(CS_WINKERNEL_MEMBLOCK), CS_WINKERNEL_POOL_TAG);\n+\tsize_t number_of_bytes = 0;\n+\tCS_WINKERNEL_MEMBLOCK *block = NULL;\n+\t// A specially crafted size value can trigger the overflow.\n+\t// If the sum in a value that overflows or underflows the capacity of the type,\n+\t// the function returns NULL.\n+\tif (!NT_SUCCESS(RtlSizeTAdd(size, sizeof(CS_WINKERNEL_MEMBLOCK), &number_of_bytes))) {\n+\t\treturn NULL;\n+\t}\n+\tblock = (CS_WINKERNEL_MEMBLOCK *)ExAllocatePoolWithTag(\n+\t\t\tNonPagedPool, number_of_bytes, CS_WINKERNEL_POOL_TAG);\n \tif (!block) {\n \t\treturn NULL;\n \t}",
  "diff_line_info": {
    "deleted_lines": [
      "\tCS_WINKERNEL_MEMBLOCK *block = (CS_WINKERNEL_MEMBLOCK *)ExAllocatePoolWithTag(",
      "\t\t\tNonPagedPool, size + sizeof(CS_WINKERNEL_MEMBLOCK), CS_WINKERNEL_POOL_TAG);"
    ],
    "added_lines": [
      "\tsize_t number_of_bytes = 0;",
      "\tCS_WINKERNEL_MEMBLOCK *block = NULL;",
      "\t// A specially crafted size value can trigger the overflow.",
      "\t// If the sum in a value that overflows or underflows the capacity of the type,",
      "\t// the function returns NULL.",
      "\tif (!NT_SUCCESS(RtlSizeTAdd(size, sizeof(CS_WINKERNEL_MEMBLOCK), &number_of_bytes))) {",
      "\t\treturn NULL;",
      "\t}",
      "\tblock = (CS_WINKERNEL_MEMBLOCK *)ExAllocatePoolWithTag(",
      "\t\t\tNonPagedPool, number_of_bytes, CS_WINKERNEL_POOL_TAG);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/NeatNerdPrime/capstone/pull/17",
  "description": {
    "pr_info": {
      "title": "[pull] master from capstone-engine:master",
      "number": 17
    },
    "comment": [
      "See [Commits](/NeatNerdPrime/capstone/pull/17/commits) and [Changes](/NeatNerdPrime/capstone/pull/17/files) for more details.\n\n-----\nCreated by [<img src=\"https://prod.download/pull-18h-svg\" valign=\"bottom\"/> **pull[bot]**](https://github.com/wei/pull)\n\n_Can you help keep this open source service alive? **[ðŸ’– Please sponsor : )](https://prod.download/pull-pr-sponsor)**_"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 1.0  \n\nThe patch addresses an integer overflow vulnerability by adding a validity check, clearly identified as a security fix in the commit message and confirmed by the code changes. The confidence is high as all elements align perfectly."
}