{
  "cve_id": "CVE-2019-25048",
  "cwe_ids": [
    "CWE-125"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:P/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "libressl/portable",
  "commit_msg": "Make pthread_mutex static initialisation work on Windows.\n\nThis takes the dynamic initialisation code added to CRYPTO_lock() in e5081719\nand applies it to the Window's pthread_mutex implementation. This allows for\nPTHREAD_MUTEX_INITIALIZER to be used on Windows.\n\nbcook has agreed to place this code in the public domain (as per the rest of\nthe code in pthread.h).",
  "commit_hash": "17c88164016df821df2dff4b2b1291291ec4f28a",
  "git_url": "https://github.com/libressl/portable/commit/17c88164016df821df2dff4b2b1291291ec4f28a",
  "file_path": "include/compat/pthread.h",
  "func_name": "pthread_mutex_lock",
  "func_before": "static inline int\npthread_mutex_lock(pthread_mutex_t *mutex)\n{\n\tEnterCriticalSection(mutex);\n\treturn 0;\n}",
  "abstract_func_before": "static inline int\npthread_mutex_lock(pthread_mutex_t *VAR_0)\n{\n\tEnterCriticalSection(VAR_0);\n\treturn 0;\n}",
  "func_graph_path_before": "libressl/portable/17c88164016df821df2dff4b2b1291291ec4f28a/pthread.h/vul/before/0.json",
  "func": "static inline int\npthread_mutex_lock(pthread_mutex_t *mutex)\n{\n\tif (mutex->lock == NULL) {\n\t\tLPCRITICAL_SECTION lcs;\n\n\t\tif ((lcs = malloc(sizeof(CRITICAL_SECTION))) == NULL)\n\t\t\texit(ENOMEM);\n\t\tInitializeCriticalSection(lcs);\n\t\tif (InterlockedCompareExchangePointer((PVOID*)&mutex->lock, (PVOID)lcs, NULL) != NULL) {\n\t\t\tDeleteCriticalSection(lcs);\n\t\t\tfree(lcs);\n\t\t}\n\t}\n\tEnterCriticalSection(mutex->lock);\n\treturn 0;\n}",
  "abstract_func": "static inline int\npthread_mutex_lock(pthread_mutex_t *VAR_0)\n{\n\tif (VAR_0->lock == NULL) {\n\t\tLPCRITICAL_SECTION VAR_1;\n\n\t\tif ((VAR_1 = malloc(sizeof(VAR_2))) == NULL)\n\t\t\texit(VAR_3);\n\t\tInitializeCriticalSection(VAR_1);\n\t\tif (InterlockedCompareExchangePointer((PVOID*)&VAR_0->lock, (PVOID)VAR_1, NULL) != NULL) {\n\t\t\tDeleteCriticalSection(VAR_1);\n\t\t\tfree(VAR_1);\n\t\t}\n\t}\n\tEnterCriticalSection(VAR_0->lock);\n\treturn 0;\n}",
  "func_graph_path": "libressl/portable/17c88164016df821df2dff4b2b1291291ec4f28a/pthread.h/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,6 +1,17 @@\n static inline int\n pthread_mutex_lock(pthread_mutex_t *mutex)\n {\n-\tEnterCriticalSection(mutex);\n+\tif (mutex->lock == NULL) {\n+\t\tLPCRITICAL_SECTION lcs;\n+\n+\t\tif ((lcs = malloc(sizeof(CRITICAL_SECTION))) == NULL)\n+\t\t\texit(ENOMEM);\n+\t\tInitializeCriticalSection(lcs);\n+\t\tif (InterlockedCompareExchangePointer((PVOID*)&mutex->lock, (PVOID)lcs, NULL) != NULL) {\n+\t\t\tDeleteCriticalSection(lcs);\n+\t\t\tfree(lcs);\n+\t\t}\n+\t}\n+\tEnterCriticalSection(mutex->lock);\n \treturn 0;\n }",
  "diff_line_info": {
    "deleted_lines": [
      "\tEnterCriticalSection(mutex);"
    ],
    "added_lines": [
      "\tif (mutex->lock == NULL) {",
      "\t\tLPCRITICAL_SECTION lcs;",
      "",
      "\t\tif ((lcs = malloc(sizeof(CRITICAL_SECTION))) == NULL)",
      "\t\t\texit(ENOMEM);",
      "\t\tInitializeCriticalSection(lcs);",
      "\t\tif (InterlockedCompareExchangePointer((PVOID*)&mutex->lock, (PVOID)lcs, NULL) != NULL) {",
      "\t\t\tDeleteCriticalSection(lcs);",
      "\t\t\tfree(lcs);",
      "\t\t}",
      "\t}",
      "\tEnterCriticalSection(mutex->lock);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/libressl/portable/pull/623",
  "description": {
    "pr_info": {
      "title": "Make pthread_mutex static initialisation work on Windows.",
      "number": 623
    },
    "comment": [
      "This takes the dynamic initialisation code added to CRYPTO_lock() in e5081719\r\nand applies it to the Window's pthread_mutex implementation. This allows for\r\nPTHREAD_MUTEX_INITIALIZER to be used on Windows.\r\n\r\nbcook has agreed to place this code in the public domain (as per the rest of\r\nthe code in pthread.h)."
    ]
  },
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "The commit addresses how pthread_mutex is initialized on Windows by adding dynamic initialization for the mutex structure. The changes ensure that the lock is properly set up to prevent potential issues during usage, which is a functional bug fix rather than a security vulnerability. \n\n**Final Classification:** Defect Remediation & Feature Upgrades  \n**Confidence:** 0.9"
}