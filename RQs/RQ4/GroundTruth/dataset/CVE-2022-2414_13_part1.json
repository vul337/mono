{
  "cve_id": "CVE-2022-2414",
  "cwe_ids": [
    "CWE-611"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
  "cvss_is_v3": true,
  "repo_name": "dogtagpki/pki",
  "commit_msg": "Disable access to external entities when parsing XML\n\nThis reduces the vulnerability of XML parsers to XXE (XML external\nentity) injection.\n\nThe best way to prevent XXE is to stop using XML altogether, which we do\nplan to do. Until that happens I consider it worthwhile to tighten the\nsecurity here though.",
  "commit_hash": "16deffdf7548e305507982e246eb9fd1eac414fd",
  "git_url": "https://github.com/dogtagpki/pki/commit/16deffdf7548e305507982e246eb9fd1eac414fd",
  "file_path": "base/server/src/main/java/com/netscape/cms/servlet/csadmin/SecurityDomainProcessor.java",
  "func_name": "main",
  "func_before": "public static void main(String args[]) throws Exception {\n\n        DomainInfo before = new DomainInfo();\n        before.setName(\"EXAMPLE\");\n\n        SecurityDomainHost host = new SecurityDomainHost();\n        host.setId(\"CA localhost 8443\");\n        host.setHostname(\"localhost\");\n        host.setPort(\"8080\");\n        host.setSecurePort(\"8443\");\n        host.setDomainManager(\"TRUE\");\n\n        before.addHost(\"CA\", host);\n\n        System.out.println(\"Before:\");\n        System.out.println(before);\n\n        XMLObject xmlObject = convertDomainInfoToXMLObject(before);\n        Document document = xmlObject.getDocument();\n\n        Transformer transformer = TransformerFactory.newInstance().newTransformer();\n        transformer.setOutputProperty(OutputKeys.INDENT, \"yes\");\n        transformer.setOutputProperty(\"{http://xml.apache.org/xslt}indent-amount\", \"4\");\n\n        StringWriter sw = new StringWriter();\n        transformer.transform(new DOMSource(document), new StreamResult(sw));\n\n        System.out.println(\"Domain XML:\");\n        System.out.println(sw);\n\n        DomainInfo after = convertXMLObjectToDomainInfo(xmlObject);\n\n        System.out.println(\"After:\");\n        System.out.println(after);\n    }",
  "abstract_func_before": "public static void main(String VAR_0[]) throws Exception {\n\n        DomainInfo VAR_1 = new DomainInfo();\n        VAR_1.setName(\"EXAMPLE\");\n\n        SecurityDomainHost VAR_2 = new SecurityDomainHost();\n        VAR_2.setId(\"CA localhost 8443\");\n        VAR_2.setHostname(\"localhost\");\n        VAR_2.setPort(\"8080\");\n        VAR_2.setSecurePort(\"8443\");\n        VAR_2.setDomainManager(\"TRUE\");\n\n        VAR_1.addHost(\"CA\", VAR_2);\n\n        VAR_3.out.println(\"Before:\");\n        VAR_3.out.println(VAR_1);\n\n        XMLObject VAR_4 = convertDomainInfoToXMLObject(VAR_1);\n        Document VAR_5 = VAR_4.getDocument();\n\n        Transformer VAR_6 = VAR_7.newInstance().newTransformer();\n        VAR_6.setOutputProperty(VAR_8.INDENT, \"yes\");\n        VAR_6.setOutputProperty(\"{http://xml.apache.org/xslt}indent-amount\", \"4\");\n\n        StringWriter VAR_9 = new StringWriter();\n        VAR_6.transform(new DOMSource(VAR_5), new StreamResult(VAR_9));\n\n        VAR_3.out.println(\"Domain XML:\");\n        VAR_3.out.println(VAR_9);\n\n        DomainInfo VAR_10 = convertXMLObjectToDomainInfo(VAR_4);\n\n        VAR_3.out.println(\"After:\");\n        VAR_3.out.println(VAR_10);\n    }",
  "func_graph_path_before": "dogtagpki/pki/16deffdf7548e305507982e246eb9fd1eac414fd/SecurityDomainProcessor.java/vul/before/0.json",
  "func": "public static void main(String args[]) throws Exception {\n\n        DomainInfo before = new DomainInfo();\n        before.setName(\"EXAMPLE\");\n\n        SecurityDomainHost host = new SecurityDomainHost();\n        host.setId(\"CA localhost 8443\");\n        host.setHostname(\"localhost\");\n        host.setPort(\"8080\");\n        host.setSecurePort(\"8443\");\n        host.setDomainManager(\"TRUE\");\n\n        before.addHost(\"CA\", host);\n\n        System.out.println(\"Before:\");\n        System.out.println(before);\n\n        XMLObject xmlObject = convertDomainInfoToXMLObject(before);\n        Document document = xmlObject.getDocument();\n\n        TransformerFactory transformerFactory = TransformerFactory.newInstance();\n        transformerFactory.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, \"\");\n        transformerFactory.setAttribute(XMLConstants.ACCESS_EXTERNAL_STYLESHEET, \"\");\n        Transformer transformer = transformerFactory.newTransformer();\n        transformer.setOutputProperty(OutputKeys.INDENT, \"yes\");\n        transformer.setOutputProperty(\"{http://xml.apache.org/xslt}indent-amount\", \"4\");\n\n        StringWriter sw = new StringWriter();\n        transformer.transform(new DOMSource(document), new StreamResult(sw));\n\n        System.out.println(\"Domain XML:\");\n        System.out.println(sw);\n\n        DomainInfo after = convertXMLObjectToDomainInfo(xmlObject);\n\n        System.out.println(\"After:\");\n        System.out.println(after);\n    }",
  "abstract_func": "public static void main(String VAR_0[]) throws Exception {\n\n        DomainInfo VAR_1 = new DomainInfo();\n        VAR_1.setName(\"EXAMPLE\");\n\n        SecurityDomainHost VAR_2 = new SecurityDomainHost();\n        VAR_2.setId(\"CA localhost 8443\");\n        VAR_2.setHostname(\"localhost\");\n        VAR_2.setPort(\"8080\");\n        VAR_2.setSecurePort(\"8443\");\n        VAR_2.setDomainManager(\"TRUE\");\n\n        VAR_1.addHost(\"CA\", VAR_2);\n\n        VAR_3.out.println(\"Before:\");\n        VAR_3.out.println(VAR_1);\n\n        XMLObject VAR_4 = convertDomainInfoToXMLObject(VAR_1);\n        Document VAR_5 = VAR_4.getDocument();\n\n        TransformerFactory VAR_6 = VAR_7.newInstance();\n        VAR_6.setAttribute(VAR_8.ACCESS_EXTERNAL_DTD, \"\");\n        VAR_6.setAttribute(VAR_8.ACCESS_EXTERNAL_STYLESHEET, \"\");\n        Transformer VAR_9 = VAR_6.newTransformer();\n        VAR_9.setOutputProperty(VAR_10.INDENT, \"yes\");\n        VAR_9.setOutputProperty(\"{http://xml.apache.org/xslt}indent-amount\", \"4\");\n\n        StringWriter VAR_11 = new StringWriter();\n        VAR_9.transform(new DOMSource(VAR_5), new StreamResult(VAR_11));\n\n        VAR_3.out.println(\"Domain XML:\");\n        VAR_3.out.println(VAR_11);\n\n        DomainInfo VAR_12 = convertXMLObjectToDomainInfo(VAR_4);\n\n        VAR_3.out.println(\"After:\");\n        VAR_3.out.println(VAR_12);\n    }",
  "func_graph_path": "dogtagpki/pki/16deffdf7548e305507982e246eb9fd1eac414fd/SecurityDomainProcessor.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -18,7 +18,10 @@\n         XMLObject xmlObject = convertDomainInfoToXMLObject(before);\n         Document document = xmlObject.getDocument();\n \n-        Transformer transformer = TransformerFactory.newInstance().newTransformer();\n+        TransformerFactory transformerFactory = TransformerFactory.newInstance();\n+        transformerFactory.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, \"\");\n+        transformerFactory.setAttribute(XMLConstants.ACCESS_EXTERNAL_STYLESHEET, \"\");\n+        Transformer transformer = transformerFactory.newTransformer();\n         transformer.setOutputProperty(OutputKeys.INDENT, \"yes\");\n         transformer.setOutputProperty(\"{http://xml.apache.org/xslt}indent-amount\", \"4\");\n ",
  "diff_line_info": {
    "deleted_lines": [
      "        Transformer transformer = TransformerFactory.newInstance().newTransformer();"
    ],
    "added_lines": [
      "        TransformerFactory transformerFactory = TransformerFactory.newInstance();",
      "        transformerFactory.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, \"\");",
      "        transformerFactory.setAttribute(XMLConstants.ACCESS_EXTERNAL_STYLESHEET, \"\");",
      "        Transformer transformer = transformerFactory.newTransformer();"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/dogtagpki/pki/pull/4021",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/dogtagpki/pki/pull/4021: 403 Client Error: Forbidden for url: https://api.github.com/repos/dogtagpki/pki/pulls/4021",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 1.0"
}