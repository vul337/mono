{
  "cve_id": "CVE-2022-25010",
  "cwe_ids": [
    "CWE-732"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:P/A:N",
  "cvss_is_v3": false,
  "repo_name": "stepmania",
  "commit_msg": "Remove access to the root FS from lua\n\nOn linux / is mounted to /rootfs in RageFile, which allows access to the\n_whole_ filesystem from lua. This means themes and mod files can\nre-write user data and extract files via USB profiles.\n\n/rootfs was only added for internal use by the alsa, oss and memory card\ndrivers, so it can be easily replaced with direct fstream file access.",
  "commit_hash": "8490d181c2d301ccca0dc6ee52f25bbadb567a9a",
  "git_url": "https://github.com/stepmania/stepmania/commit/8490d181c2d301ccca0dc6ee52f25bbadb567a9a",
  "file_path": "src/arch/ArchHooks/ArchHooks_Unix.cpp",
  "func_name": "ArchHooks::MountInitialFilesystems",
  "func_before": "void ArchHooks::MountInitialFilesystems( const RString &sDirOfExecutable )\n{\n#if defined(UNIX)\n\t/* Mount the root filesystem, so we can read files in /proc, /etc, and so on.\n\t * This is /rootfs, not /root, to avoid confusion with root's home directory. */\n\tFILEMAN->Mount( \"dir\", \"/\", \"/rootfs\" );\n\n\t/* Mount /proc, so Alsa9Buf::GetSoundCardDebugInfo() and others can access it.\n\t * (Deprecated; use rootfs.) */\n\tFILEMAN->Mount( \"dir\", \"/proc\", \"/proc\" );\n#endif\n\n\tRString Root;\n\tstruct stat st;\n\tif( !stat(sDirOfExecutable + \"/Packages\", &st) && st.st_mode&S_IFDIR )\n\t\tRoot = sDirOfExecutable;\n\telse if( !stat(sDirOfExecutable + \"/Songs\", &st) && st.st_mode&S_IFDIR )\n\t\tRoot = sDirOfExecutable;\n\telse if( !stat(RageFileManagerUtil::sInitialWorkingDirectory + \"/Songs\", &st) && st.st_mode&S_IFDIR )\n\t\tRoot = RageFileManagerUtil::sInitialWorkingDirectory;\n\telse\n\t\tRageException::Throw( \"%s\", COULDNT_FIND_SONGS.GetValue().c_str() );\n\n\tFILEMAN->Mount( \"dir\", Root, \"/\" );\n}",
  "abstract_func_before": "void ArchHooks::MountInitialFilesystems( const RString &VAR_0 )\n{\n#if defined(VAR_1)\n\t/* COMMENT_0 */\n                                                                                 \n\tVAR_2->Mount( \"dir\", \"/\", \"/rootfs\" );\n\n\t/* COMMENT_2 */\n                                \n\tVAR_2->Mount( \"dir\", \"/proc\", \"/proc\" );\n#endif\n\n\tRString VAR_3;\n\tstruct stat VAR_4;\n\tif( !stat(VAR_0 + \"/Packages\", &VAR_4) && VAR_4.st_mode&VAR_5 )\n\t\tVAR_3 = VAR_0;\n\telse if( !stat(VAR_0 + \"/Songs\", &VAR_4) && VAR_4.st_mode&VAR_5 )\n\t\tVAR_3 = VAR_0;\n\telse if( !stat(RageFileManagerUtil::sInitialWorkingDirectory + \"/Songs\", &VAR_4) && VAR_4.st_mode&VAR_5 )\n\t\tVAR_3 = RageFileManagerUtil::sInitialWorkingDirectory;\n\telse\n\t\tRageException::Throw( \"%s\", VAR_6.GetValue().c_str() );\n\n\tVAR_2->Mount( \"dir\", VAR_3, \"/\" );\n}",
  "func_graph_path_before": "stepmania/8490d181c2d301ccca0dc6ee52f25bbadb567a9a/ArchHooks_Unix.cpp/vul/before/0.json",
  "func": "void ArchHooks::MountInitialFilesystems( const RString &sDirOfExecutable )\n{\n\tRString Root;\n\tstruct stat st;\n\tif( !stat(sDirOfExecutable + \"/Packages\", &st) && st.st_mode&S_IFDIR )\n\t\tRoot = sDirOfExecutable;\n\telse if( !stat(sDirOfExecutable + \"/Songs\", &st) && st.st_mode&S_IFDIR )\n\t\tRoot = sDirOfExecutable;\n\telse if( !stat(RageFileManagerUtil::sInitialWorkingDirectory + \"/Songs\", &st) && st.st_mode&S_IFDIR )\n\t\tRoot = RageFileManagerUtil::sInitialWorkingDirectory;\n\telse\n\t\tRageException::Throw( \"%s\", COULDNT_FIND_SONGS.GetValue().c_str() );\n\n\tFILEMAN->Mount( \"dir\", Root, \"/\" );\n}",
  "abstract_func": "void ArchHooks::MountInitialFilesystems( const RString &VAR_0 )\n{\n\tRString VAR_1;\n\tstruct stat VAR_2;\n\tif( !stat(VAR_0 + \"/Packages\", &VAR_2) && VAR_2.st_mode&VAR_3 )\n\t\tVAR_1 = VAR_0;\n\telse if( !stat(VAR_0 + \"/Songs\", &VAR_2) && VAR_2.st_mode&VAR_3 )\n\t\tVAR_1 = VAR_0;\n\telse if( !stat(RageFileManagerUtil::sInitialWorkingDirectory + \"/Songs\", &VAR_2) && VAR_2.st_mode&VAR_3 )\n\t\tVAR_1 = RageFileManagerUtil::sInitialWorkingDirectory;\n\telse\n\t\tRageException::Throw( \"%s\", VAR_4.GetValue().c_str() );\n\n\tVAR_5->Mount( \"dir\", VAR_1, \"/\" );\n}",
  "func_graph_path": "stepmania/8490d181c2d301ccca0dc6ee52f25bbadb567a9a/ArchHooks_Unix.cpp/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,15 +1,5 @@\n void ArchHooks::MountInitialFilesystems( const RString &sDirOfExecutable )\n {\n-#if defined(UNIX)\n-\t/* Mount the root filesystem, so we can read files in /proc, /etc, and so on.\n-\t * This is /rootfs, not /root, to avoid confusion with root's home directory. */\n-\tFILEMAN->Mount( \"dir\", \"/\", \"/rootfs\" );\n-\n-\t/* Mount /proc, so Alsa9Buf::GetSoundCardDebugInfo() and others can access it.\n-\t * (Deprecated; use rootfs.) */\n-\tFILEMAN->Mount( \"dir\", \"/proc\", \"/proc\" );\n-#endif\n-\n \tRString Root;\n \tstruct stat st;\n \tif( !stat(sDirOfExecutable + \"/Packages\", &st) && st.st_mode&S_IFDIR )",
  "diff_line_info": {
    "deleted_lines": [
      "#if defined(UNIX)",
      "\t/* Mount the root filesystem, so we can read files in /proc, /etc, and so on.",
      "\t * This is /rootfs, not /root, to avoid confusion with root's home directory. */",
      "\tFILEMAN->Mount( \"dir\", \"/\", \"/rootfs\" );",
      "",
      "\t/* Mount /proc, so Alsa9Buf::GetSoundCardDebugInfo() and others can access it.",
      "\t * (Deprecated; use rootfs.) */",
      "\tFILEMAN->Mount( \"dir\", \"/proc\", \"/proc\" );",
      "#endif",
      ""
    ],
    "added_lines": []
  },
  "is_vul": true,
  "pr_url": "https://github.com/stepmania/stepmania/pull/2184",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/stepmania/stepmania/pull/2184: 403 Client Error: Forbidden for url: https://api.github.com/repos/stepmania/stepmania/pulls/2184",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 1.0"
}