{
  "cve_id": "CVE-2023-26266",
  "cwe_ids": [
    "CWE-Other"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
  "cvss_is_v3": true,
  "repo_name": "AFLplusplus",
  "commit_msg": "cmplog exec with target_path",
  "commit_hash": "f2be73186e2e16c3992f92b65ae9ba598d6fff2f",
  "git_url": "https://github.com/AFLplusplus/AFLplusplus/commit/f2be73186e2e16c3992f92b65ae9ba598d6fff2f",
  "file_path": "src/afl-fuzz-cmplog.c",
  "func_name": "cmplog_exec_child",
  "func_before": "void cmplog_exec_child(afl_forkserver_t *fsrv, char **argv) {\n\n  setenv(\"___AFL_EINS_ZWEI_POLIZEI___\", \"1\", 1);\n\n  if (fsrv->qemu_mode) { setenv(\"AFL_DISABLE_LLVM_INSTRUMENTATION\", \"1\", 0); }\n\n  if (!fsrv->qemu_mode && !fsrv->frida_mode && argv[0] != fsrv->cmplog_binary) {\n\n    argv[0] = fsrv->cmplog_binary;\n\n  }\n\n  execv(argv[0], argv);\n\n}",
  "abstract_func_before": "void cmplog_exec_child(afl_forkserver_t *VAR_0, char **VAR_1) {\n\n  setenv(\"___AFL_EINS_ZWEI_POLIZEI___\", \"1\", 1);\n\n  if (VAR_0->qemu_mode) { setenv(\"AFL_DISABLE_LLVM_INSTRUMENTATION\", \"1\", 0); }\n\n  if (!VAR_0->qemu_mode && !VAR_0->frida_mode && VAR_1[0] != VAR_0->cmplog_binary) {\n\n    VAR_1[0] = VAR_0->cmplog_binary;\n\n  }\n\n  execv(VAR_1[0], VAR_1);\n\n}",
  "func_graph_path_before": "AFLplusplus/f2be73186e2e16c3992f92b65ae9ba598d6fff2f/afl-fuzz-cmplog.c/vul/before/0.json",
  "func": "void cmplog_exec_child(afl_forkserver_t *fsrv, char **argv) {\n\n  setenv(\"___AFL_EINS_ZWEI_POLIZEI___\", \"1\", 1);\n\n  if (fsrv->qemu_mode) { setenv(\"AFL_DISABLE_LLVM_INSTRUMENTATION\", \"1\", 0); }\n\n  if (!fsrv->qemu_mode && !fsrv->frida_mode && argv[0] != fsrv->cmplog_binary) {\n\n    argv[0] = fsrv->cmplog_binary;\n\n  }\n\n  execv(fsrv->target_path, argv);\n\n}",
  "abstract_func": "void cmplog_exec_child(afl_forkserver_t *VAR_0, char **VAR_1) {\n\n  setenv(\"___AFL_EINS_ZWEI_POLIZEI___\", \"1\", 1);\n\n  if (VAR_0->qemu_mode) { setenv(\"AFL_DISABLE_LLVM_INSTRUMENTATION\", \"1\", 0); }\n\n  if (!VAR_0->qemu_mode && !VAR_0->frida_mode && VAR_1[0] != VAR_0->cmplog_binary) {\n\n    VAR_1[0] = VAR_0->cmplog_binary;\n\n  }\n\n  execv(VAR_0->target_path, VAR_1);\n\n}",
  "func_graph_path": "AFLplusplus/f2be73186e2e16c3992f92b65ae9ba598d6fff2f/afl-fuzz-cmplog.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -10,6 +10,6 @@\n \n   }\n \n-  execv(argv[0], argv);\n+  execv(fsrv->target_path, argv);\n \n }",
  "diff_line_info": {
    "deleted_lines": [
      "  execv(argv[0], argv);"
    ],
    "added_lines": [
      "  execv(fsrv->target_path, argv);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/AFLplusplus/AFLplusplus/pull/1643",
  "description": {
    "pr_info": {
      "title": "Cmplog should search for unprefixed target in PATH, not PWD",
      "number": 1643
    },
    "comment": [
      "This fixes a bug in cmplog, where, if afl-fuzz is called with an unprefixed-path target (eg `-- targetapp` instead of `-- /path/to/targetapp`), while afl-fuzz itself will correctly look for `target` in `PATH`, cmplog instead looks for it in `PWD`.\r\n\r\nIf the target does not happen to be in PWD, then it will fail with the confusing error message: \r\n```\r\n[-] PROGRAM ABORT : Unable to execute target application ('targetapp')\r\n         Location : afl_fsrv_start(), src/afl-forkserver.c:1077\r\n```\r\n\r\nThis bug is present in standard instrumented mode and Frida mode, but not QEMU mode.\r\n\r\nInasmuch as it violates the general principle and expectation that unprefixed executables should be executed by PATH rather than PWD, this bug being fixed also constitutes a security vulnerability, which could theoretically be exploited by placing a malicious executable of the same name into the user's working directory.",
      "thanks for the PR, letting the CI check this ... :)"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 1.0\n\nThe patch addresses a security issue where the tool could execute an unintended binary. The confidence is high as all elements clearly point to a security fix."
}