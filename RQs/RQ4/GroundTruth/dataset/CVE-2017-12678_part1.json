{
  "cve_id": "CVE-2017-12678",
  "cwe_ids": [
    "CWE-434"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "taglib",
  "commit_msg": "Don't assume TDRC is an instance of TextIdentificationFrame (#831)\n\nIf TDRC is encrypted, FrameFactory::createFrame() returns UnknownFrame\r\nwhich causes problems in rebuildAggregateFrames() when it is assumed\r\nthat TDRC is a TextIdentificationFrame",
  "commit_hash": "cb9f07d9dcd791b63e622da43f7b232adaec0a9a",
  "git_url": "https://github.com/taglib/taglib/commit/cb9f07d9dcd791b63e622da43f7b232adaec0a9a",
  "file_path": "taglib/mpeg/id3v2/id3v2framefactory.cpp",
  "func_name": "FrameFactory::rebuildAggregateFrames",
  "func_before": "void FrameFactory::rebuildAggregateFrames(ID3v2::Tag *tag) const\n{\n  if(tag->header()->majorVersion() < 4 &&\n     tag->frameList(\"TDRC\").size() == 1 &&\n     tag->frameList(\"TDAT\").size() == 1)\n  {\n    TextIdentificationFrame *tdrc =\n      static_cast<TextIdentificationFrame *>(tag->frameList(\"TDRC\").front());\n    UnknownFrame *tdat = static_cast<UnknownFrame *>(tag->frameList(\"TDAT\").front());\n\n    if(tdrc->fieldList().size() == 1 &&\n       tdrc->fieldList().front().size() == 4 &&\n       tdat->data().size() >= 5)\n    {\n      String date(tdat->data().mid(1), String::Type(tdat->data()[0]));\n      if(date.length() == 4) {\n        tdrc->setText(tdrc->toString() + '-' + date.substr(2, 2) + '-' + date.substr(0, 2));\n        if(tag->frameList(\"TIME\").size() == 1) {\n          UnknownFrame *timeframe = static_cast<UnknownFrame *>(tag->frameList(\"TIME\").front());\n          if(timeframe->data().size() >= 5) {\n            String time(timeframe->data().mid(1), String::Type(timeframe->data()[0]));\n            if(time.length() == 4) {\n              tdrc->setText(tdrc->toString() + 'T' + time.substr(0, 2) + ':' + time.substr(2, 2));\n            }\n          }\n        }\n      }\n    }\n  }\n}",
  "abstract_func_before": "void FrameFactory::rebuildAggregateFrames(ID3v2::Tag *VAR_0) const\n{\n  if(VAR_0->header()->majorVersion() < 4 &&\n     VAR_0->frameList(\"TDRC\").size() == 1 &&\n     VAR_0->frameList(\"TDAT\").size() == 1)\n  {\n    TextIdentificationFrame *VAR_1 =\n      VAR_2<TextIdentificationFrame *>(VAR_0->frameList(\"TDRC\").front());\n    UnknownFrame *VAR_3 = VAR_2<UnknownFrame *>(VAR_0->frameList(\"TDAT\").front());\n\n    if(VAR_1->fieldList().size() == 1 &&\n       VAR_1->fieldList().front().size() == 4 &&\n       VAR_3->data().size() >= 5)\n    {\n      String VAR_4(VAR_3->data().mid(1), String::Type(VAR_3->data()[0]));\n      if(VAR_4.length() == 4) {\n        VAR_1->setText(VAR_1->toString() + '-' + VAR_4.substr(2, 2) + '-' + VAR_4.substr(0, 2));\n        if(VAR_0->frameList(\"TIME\").size() == 1) {\n          UnknownFrame *VAR_5 = VAR_2<UnknownFrame *>(VAR_0->frameList(\"TIME\").front());\n          if(VAR_5->data().size() >= 5) {\n            String VAR_6(VAR_5->data().mid(1), String::Type(VAR_5->data()[0]));\n            if(VAR_6.length() == 4) {\n              VAR_1->setText(VAR_1->toString() + 'T' + VAR_6.substr(0, 2) + ':' + VAR_6.substr(2, 2));\n            }\n          }\n        }\n      }\n    }\n  }\n}",
  "func_graph_path_before": "taglib/cb9f07d9dcd791b63e622da43f7b232adaec0a9a/id3v2framefactory.cpp/vul/before/0.json",
  "func": "void FrameFactory::rebuildAggregateFrames(ID3v2::Tag *tag) const\n{\n  if(tag->header()->majorVersion() < 4 &&\n     tag->frameList(\"TDRC\").size() == 1 &&\n     tag->frameList(\"TDAT\").size() == 1)\n  {\n    TextIdentificationFrame *tdrc =\n      dynamic_cast<TextIdentificationFrame *>(tag->frameList(\"TDRC\").front());\n    UnknownFrame *tdat = static_cast<UnknownFrame *>(tag->frameList(\"TDAT\").front());\n\n    if(tdrc &&\n       tdrc->fieldList().size() == 1 &&\n       tdrc->fieldList().front().size() == 4 &&\n       tdat->data().size() >= 5)\n    {\n      String date(tdat->data().mid(1), String::Type(tdat->data()[0]));\n      if(date.length() == 4) {\n        tdrc->setText(tdrc->toString() + '-' + date.substr(2, 2) + '-' + date.substr(0, 2));\n        if(tag->frameList(\"TIME\").size() == 1) {\n          UnknownFrame *timeframe = static_cast<UnknownFrame *>(tag->frameList(\"TIME\").front());\n          if(timeframe->data().size() >= 5) {\n            String time(timeframe->data().mid(1), String::Type(timeframe->data()[0]));\n            if(time.length() == 4) {\n              tdrc->setText(tdrc->toString() + 'T' + time.substr(0, 2) + ':' + time.substr(2, 2));\n            }\n          }\n        }\n      }\n    }\n  }\n}",
  "abstract_func": "void FrameFactory::rebuildAggregateFrames(ID3v2::Tag *VAR_0) const\n{\n  if(VAR_0->header()->majorVersion() < 4 &&\n     VAR_0->frameList(\"TDRC\").size() == 1 &&\n     VAR_0->frameList(\"TDAT\").size() == 1)\n  {\n    TextIdentificationFrame *VAR_1 =\n      VAR_2<TextIdentificationFrame *>(VAR_0->frameList(\"TDRC\").front());\n    UnknownFrame *VAR_3 = VAR_4<UnknownFrame *>(VAR_0->frameList(\"TDAT\").front());\n\n    if(VAR_1 &&\n       VAR_1->fieldList().size() == 1 &&\n       VAR_1->fieldList().front().size() == 4 &&\n       VAR_3->data().size() >= 5)\n    {\n      String VAR_5(VAR_3->data().mid(1), String::Type(VAR_3->data()[0]));\n      if(VAR_5.length() == 4) {\n        VAR_1->setText(VAR_1->toString() + '-' + VAR_5.substr(2, 2) + '-' + VAR_5.substr(0, 2));\n        if(VAR_0->frameList(\"TIME\").size() == 1) {\n          UnknownFrame *VAR_6 = VAR_4<UnknownFrame *>(VAR_0->frameList(\"TIME\").front());\n          if(VAR_6->data().size() >= 5) {\n            String VAR_7(VAR_6->data().mid(1), String::Type(VAR_6->data()[0]));\n            if(VAR_7.length() == 4) {\n              VAR_1->setText(VAR_1->toString() + 'T' + VAR_7.substr(0, 2) + ':' + VAR_7.substr(2, 2));\n            }\n          }\n        }\n      }\n    }\n  }\n}",
  "func_graph_path": "taglib/cb9f07d9dcd791b63e622da43f7b232adaec0a9a/id3v2framefactory.cpp/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -5,10 +5,11 @@\n      tag->frameList(\"TDAT\").size() == 1)\n   {\n     TextIdentificationFrame *tdrc =\n-      static_cast<TextIdentificationFrame *>(tag->frameList(\"TDRC\").front());\n+      dynamic_cast<TextIdentificationFrame *>(tag->frameList(\"TDRC\").front());\n     UnknownFrame *tdat = static_cast<UnknownFrame *>(tag->frameList(\"TDAT\").front());\n \n-    if(tdrc->fieldList().size() == 1 &&\n+    if(tdrc &&\n+       tdrc->fieldList().size() == 1 &&\n        tdrc->fieldList().front().size() == 4 &&\n        tdat->data().size() >= 5)\n     {",
  "diff_line_info": {
    "deleted_lines": [
      "      static_cast<TextIdentificationFrame *>(tag->frameList(\"TDRC\").front());",
      "    if(tdrc->fieldList().size() == 1 &&"
    ],
    "added_lines": [
      "      dynamic_cast<TextIdentificationFrame *>(tag->frameList(\"TDRC\").front());",
      "    if(tdrc &&",
      "       tdrc->fieldList().size() == 1 &&"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/taglib/taglib/pull/831",
  "description": {
    "pr_info": {
      "title": "Don't assume TDRC is an instance of TextIdentificationFrame",
      "number": 831
    },
    "comment": [
      "If TDRC is encrypted, FrameFactory::createFrame() returns UnknownFrame\r\nwhich causes problems in rebuildAggregateFrames() when it is assumed\r\nthat TDRC is a TextIdentificationFrame\r\n\r\nFixes #829 ",
      "Is this sufficient to fix #829 or should all uses of `static_cast` be replaced in the event a frame is encrypted?"
    ]
  },
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Defect Remediation & Feature Upgrades  \n**Confidence:** 0.9"
}