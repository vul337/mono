{
  "cve_id": "CVE-2021-37620",
  "cwe_ids": [
    "CWE-125"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "Exiv2/exiv2",
  "commit_msg": "Safer std::vector indexing.",
  "commit_hash": "76e313745e813f80e8910aceb2210af3ad8cf897",
  "git_url": "https://github.com/Exiv2/exiv2/commit/76e313745e813f80e8910aceb2210af3ad8cf897",
  "file_path": "src/actions.cpp",
  "func_name": "Adjust::adjustDateTime",
  "func_before": "int Adjust::adjustDateTime(Exiv2::ExifData& exifData,\n                               const std::string& key,\n                               const std::string& path) const\n    {\n        Exiv2::ExifKey ek(key);\n        Exiv2::ExifData::iterator md = exifData.findKey(ek);\n        if (md == exifData.end()) {\n            // Key not found. That's ok, we do nothing.\n            return 0;\n        }\n        std::string timeStr = md->toString();\n        if (timeStr == \"\" || timeStr[0] == ' ') {\n            std::cerr << path << \": \" << _(\"Timestamp of metadatum with key\") << \" `\"\n                      << ek << \"' \" << _(\"not set\\n\");\n            return 1;\n        }\n        if (Params::instance().verbose_) {\n            bool comma = false;\n            std::cout << _(\"Adjusting\") << \" `\" << ek << \"' \" << _(\"by\");\n            if (yearAdjustment_ != 0) {\n                std::cout << (yearAdjustment_ < 0 ? \" \" : \" +\") << yearAdjustment_ << \" \";\n                if (yearAdjustment_ < -1 || yearAdjustment_ > 1) {\n                    std::cout << _(\"years\");\n                }\n                else {\n                    std::cout << _(\"year\");\n                }\n                comma = true;\n            }\n            if (monthAdjustment_ != 0) {\n                if (comma) std::cout << \",\";\n                std::cout << (monthAdjustment_ < 0 ? \" \" : \" +\") << monthAdjustment_ << \" \";\n                if (monthAdjustment_ < -1 || monthAdjustment_ > 1) {\n                    std::cout << _(\"months\");\n                }\n                else {\n                    std::cout << _(\"month\");\n                }\n                comma = true;\n            }\n            if (dayAdjustment_ != 0) {\n                if (comma) std::cout << \",\";\n                std::cout << (dayAdjustment_ < 0 ? \" \" : \" +\") << dayAdjustment_ << \" \";\n                if (dayAdjustment_ < -1 || dayAdjustment_ > 1) {\n                    std::cout << _(\"days\");\n                }\n                else {\n                    std::cout << _(\"day\");\n                }\n                comma = true;\n            }\n            if (adjustment_ != 0) {\n                if (comma) std::cout << \",\";\n                std::cout << \" \" << adjustment_ << _(\"s\");\n            }\n        }\n        struct tm tm;\n        if (str2Tm(timeStr, &tm) != 0) {\n            if (Params::instance().verbose_) std::cout << std::endl;\n            std::cerr << path << \": \" << _(\"Failed to parse timestamp\") << \" `\"\n                      << timeStr << \"'\\n\";\n            return 1;\n        }\n        const long monOverflow = (tm.tm_mon + monthAdjustment_) / 12;\n        tm.tm_mon = (tm.tm_mon + monthAdjustment_) % 12;\n        tm.tm_year += yearAdjustment_ + monOverflow;\n        // Let's not create files with non-4-digit years, we can't read them.\n        if (tm.tm_year > 9999 - 1900 || tm.tm_year < 1000 - 1900) {\n            if (Params::instance().verbose_) std::cout << std::endl;\n            std::cerr << path << \": \" << _(\"Can't adjust timestamp by\") << \" \"\n                      << yearAdjustment_ + monOverflow\n                      << \" \" << _(\"years\") << \"\\n\";\n            return 1;\n        }\n        time_t time = mktime(&tm);\n        time += adjustment_ + dayAdjustment_ * 86400;\n        timeStr = time2Str(time);\n        if (Params::instance().verbose_) {\n            std::cout << \" \" << _(\"to\") << \" \" << timeStr << std::endl;\n        }\n        md->setValue(timeStr);\n        return 0;\n    }",
  "abstract_func_before": "int Adjust::adjustDateTime(Exiv2::ExifData& VAR_0,\n                               const std::string& VAR_1,\n                               const std::string& VAR_2) const\n    {\n        Exiv2::ExifKey ek(key);\n        Exiv2::ExifData::iterator VAR_3 = VAR_0.findKey(VAR_4);\n        if (VAR_3 == VAR_0.end()) {\n            /* COMMENT_0 */\n            return 0;\n        }\n        std::string VAR_5 = VAR_3->toString();\n        if (VAR_5 == \"\" || VAR_5[0] == ' ') {\n            std::cerr << VAR_2 << \": \" << _(\"Timestamp of metadatum with key\") << \" `\"\n                      << VAR_4 << \"' \" << _(\"not set\\n\");\n            return 1;\n        }\n        if (Params::instance().verbose_) {\n            bool VAR_6 = false;\n            std::cout << _(\"Adjusting\") << \" `\" << VAR_4 << \"' \" << _(\"by\");\n            if (VAR_7 != 0) {\n                std::cout << (VAR_7 < 0 ? \" \" : \" +\") << VAR_7 << \" \";\n                if (VAR_7 < -1 || VAR_7 > 1) {\n                    std::cout << _(\"years\");\n                }\n                else {\n                    std::cout << _(\"year\");\n                }\n                VAR_6 = true;\n            }\n            if (VAR_8 != 0) {\n                if (VAR_6) std::cout << \",\";\n                std::cout << (VAR_8 < 0 ? \" \" : \" +\") << VAR_8 << \" \";\n                if (VAR_8 < -1 || VAR_8 > 1) {\n                    std::cout << _(\"months\");\n                }\n                else {\n                    std::cout << _(\"month\");\n                }\n                VAR_6 = true;\n            }\n            if (VAR_9 != 0) {\n                if (VAR_6) std::cout << \",\";\n                std::cout << (VAR_9 < 0 ? \" \" : \" +\") << VAR_9 << \" \";\n                if (VAR_9 < -1 || VAR_9 > 1) {\n                    std::cout << _(\"days\");\n                }\n                else {\n                    std::cout << _(\"day\");\n                }\n                VAR_6 = true;\n            }\n            if (VAR_10 != 0) {\n                if (VAR_6) std::cout << \",\";\n                std::cout << \" \" << VAR_10 << _(\"s\");\n            }\n        }\n        struct tm tm;\n        if (str2Tm(VAR_5, &tm) != 0) {\n            if (Params::instance().verbose_) std::cout << std::endl;\n            std::cerr << VAR_2 << \": \" << _(\"Failed to parse timestamp\") << \" `\"\n                      << VAR_5 << \"'\\n\";\n            return 1;\n        }\n        const long VAR_11 = (tm.tm_mon + VAR_8) / 12;\n        tm.tm_mon = (tm.tm_mon + VAR_8) % 12;\n        tm.tm_year += VAR_7 + VAR_11;\n        /* COMMENT_1 */\n        if (tm.tm_year > 9999 - 1900 || tm.tm_year < 1000 - 1900) {\n            if (Params::instance().verbose_) std::cout << std::endl;\n            std::cerr << VAR_2 << \": \" << _(\"Can't adjust timestamp by\") << \" \"\n                      << VAR_7 + VAR_11\n                      << \" \" << _(\"years\") << \"\\n\";\n            return 1;\n        }\n        time_t VAR_12 = mktime(&tm);\n        VAR_12 += VAR_10 + VAR_9 * 86400;\n        VAR_5 = time2Str(VAR_12);\n        if (Params::instance().verbose_) {\n            std::cout << \" \" << _(\"to\") << \" \" << VAR_5 << std::endl;\n        }\n        VAR_3->setValue(VAR_5);\n        return 0;\n    }",
  "func_graph_path_before": "Exiv2/exiv2/76e313745e813f80e8910aceb2210af3ad8cf897/actions.cpp/vul/before/2.json",
  "func": "int Adjust::adjustDateTime(Exiv2::ExifData& exifData,\n                               const std::string& key,\n                               const std::string& path) const\n    {\n        Exiv2::ExifKey ek(key);\n        Exiv2::ExifData::iterator md = exifData.findKey(ek);\n        if (md == exifData.end()) {\n            // Key not found. That's ok, we do nothing.\n            return 0;\n        }\n        std::string timeStr = md->toString();\n        if (timeStr.empty() || timeStr[0] == ' ') {\n            std::cerr << path << \": \" << _(\"Timestamp of metadatum with key\") << \" `\"\n                      << ek << \"' \" << _(\"not set\\n\");\n            return 1;\n        }\n        if (Params::instance().verbose_) {\n            bool comma = false;\n            std::cout << _(\"Adjusting\") << \" `\" << ek << \"' \" << _(\"by\");\n            if (yearAdjustment_ != 0) {\n                std::cout << (yearAdjustment_ < 0 ? \" \" : \" +\") << yearAdjustment_ << \" \";\n                if (yearAdjustment_ < -1 || yearAdjustment_ > 1) {\n                    std::cout << _(\"years\");\n                }\n                else {\n                    std::cout << _(\"year\");\n                }\n                comma = true;\n            }\n            if (monthAdjustment_ != 0) {\n                if (comma) std::cout << \",\";\n                std::cout << (monthAdjustment_ < 0 ? \" \" : \" +\") << monthAdjustment_ << \" \";\n                if (monthAdjustment_ < -1 || monthAdjustment_ > 1) {\n                    std::cout << _(\"months\");\n                }\n                else {\n                    std::cout << _(\"month\");\n                }\n                comma = true;\n            }\n            if (dayAdjustment_ != 0) {\n                if (comma) std::cout << \",\";\n                std::cout << (dayAdjustment_ < 0 ? \" \" : \" +\") << dayAdjustment_ << \" \";\n                if (dayAdjustment_ < -1 || dayAdjustment_ > 1) {\n                    std::cout << _(\"days\");\n                }\n                else {\n                    std::cout << _(\"day\");\n                }\n                comma = true;\n            }\n            if (adjustment_ != 0) {\n                if (comma) std::cout << \",\";\n                std::cout << \" \" << adjustment_ << _(\"s\");\n            }\n        }\n        struct tm tm;\n        if (str2Tm(timeStr, &tm) != 0) {\n            if (Params::instance().verbose_) std::cout << std::endl;\n            std::cerr << path << \": \" << _(\"Failed to parse timestamp\") << \" `\"\n                      << timeStr << \"'\\n\";\n            return 1;\n        }\n        const long monOverflow = (tm.tm_mon + monthAdjustment_) / 12;\n        tm.tm_mon = (tm.tm_mon + monthAdjustment_) % 12;\n        tm.tm_year += yearAdjustment_ + monOverflow;\n        // Let's not create files with non-4-digit years, we can't read them.\n        if (tm.tm_year > 9999 - 1900 || tm.tm_year < 1000 - 1900) {\n            if (Params::instance().verbose_) std::cout << std::endl;\n            std::cerr << path << \": \" << _(\"Can't adjust timestamp by\") << \" \"\n                      << yearAdjustment_ + monOverflow\n                      << \" \" << _(\"years\") << \"\\n\";\n            return 1;\n        }\n        time_t time = mktime(&tm);\n        time += adjustment_ + dayAdjustment_ * 86400;\n        timeStr = time2Str(time);\n        if (Params::instance().verbose_) {\n            std::cout << \" \" << _(\"to\") << \" \" << timeStr << std::endl;\n        }\n        md->setValue(timeStr);\n        return 0;\n    }",
  "abstract_func": "int Adjust::adjustDateTime(Exiv2::ExifData& VAR_0,\n                               const std::string& VAR_1,\n                               const std::string& VAR_2) const\n    {\n        Exiv2::ExifKey ek(key);\n        Exiv2::ExifData::iterator VAR_3 = VAR_0.findKey(VAR_4);\n        if (VAR_3 == VAR_0.end()) {\n            /* COMMENT_0 */\n            return 0;\n        }\n        std::string VAR_5 = VAR_3->toString();\n        if (VAR_5.empty() || VAR_5[0] == ' ') {\n            std::cerr << VAR_2 << \": \" << _(\"Timestamp of metadatum with key\") << \" `\"\n                      << VAR_4 << \"' \" << _(\"not set\\n\");\n            return 1;\n        }\n        if (Params::instance().verbose_) {\n            bool VAR_6 = false;\n            std::cout << _(\"Adjusting\") << \" `\" << VAR_4 << \"' \" << _(\"by\");\n            if (VAR_7 != 0) {\n                std::cout << (VAR_7 < 0 ? \" \" : \" +\") << VAR_7 << \" \";\n                if (VAR_7 < -1 || VAR_7 > 1) {\n                    std::cout << _(\"years\");\n                }\n                else {\n                    std::cout << _(\"year\");\n                }\n                VAR_6 = true;\n            }\n            if (VAR_8 != 0) {\n                if (VAR_6) std::cout << \",\";\n                std::cout << (VAR_8 < 0 ? \" \" : \" +\") << VAR_8 << \" \";\n                if (VAR_8 < -1 || VAR_8 > 1) {\n                    std::cout << _(\"months\");\n                }\n                else {\n                    std::cout << _(\"month\");\n                }\n                VAR_6 = true;\n            }\n            if (VAR_9 != 0) {\n                if (VAR_6) std::cout << \",\";\n                std::cout << (VAR_9 < 0 ? \" \" : \" +\") << VAR_9 << \" \";\n                if (VAR_9 < -1 || VAR_9 > 1) {\n                    std::cout << _(\"days\");\n                }\n                else {\n                    std::cout << _(\"day\");\n                }\n                VAR_6 = true;\n            }\n            if (VAR_10 != 0) {\n                if (VAR_6) std::cout << \",\";\n                std::cout << \" \" << VAR_10 << _(\"s\");\n            }\n        }\n        struct tm tm;\n        if (str2Tm(VAR_5, &tm) != 0) {\n            if (Params::instance().verbose_) std::cout << std::endl;\n            std::cerr << VAR_2 << \": \" << _(\"Failed to parse timestamp\") << \" `\"\n                      << VAR_5 << \"'\\n\";\n            return 1;\n        }\n        const long VAR_11 = (tm.tm_mon + VAR_8) / 12;\n        tm.tm_mon = (tm.tm_mon + VAR_8) % 12;\n        tm.tm_year += VAR_7 + VAR_11;\n        /* COMMENT_1 */\n        if (tm.tm_year > 9999 - 1900 || tm.tm_year < 1000 - 1900) {\n            if (Params::instance().verbose_) std::cout << std::endl;\n            std::cerr << VAR_2 << \": \" << _(\"Can't adjust timestamp by\") << \" \"\n                      << VAR_7 + VAR_11\n                      << \" \" << _(\"years\") << \"\\n\";\n            return 1;\n        }\n        time_t VAR_12 = mktime(&tm);\n        VAR_12 += VAR_10 + VAR_9 * 86400;\n        VAR_5 = time2Str(VAR_12);\n        if (Params::instance().verbose_) {\n            std::cout << \" \" << _(\"to\") << \" \" << VAR_5 << std::endl;\n        }\n        VAR_3->setValue(VAR_5);\n        return 0;\n    }",
  "func_graph_path": "Exiv2/exiv2/76e313745e813f80e8910aceb2210af3ad8cf897/actions.cpp/vul/after/2.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -9,7 +9,7 @@\n             return 0;\n         }\n         std::string timeStr = md->toString();\n-        if (timeStr == \"\" || timeStr[0] == ' ') {\n+        if (timeStr.empty() || timeStr[0] == ' ') {\n             std::cerr << path << \": \" << _(\"Timestamp of metadatum with key\") << \" `\"\n                       << ek << \"' \" << _(\"not set\\n\");\n             return 1;",
  "diff_line_info": {
    "deleted_lines": [
      "        if (timeStr == \"\" || timeStr[0] == ' ') {"
    ],
    "added_lines": [
      "        if (timeStr.empty() || timeStr[0] == ' ') {"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/sridharb1/exiv2/pull/4",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/sridharb1/exiv2/pull/4: 403 Client Error: Forbidden for url: https://api.github.com/repos/sridharb1/exiv2/pulls/4",
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.8,
  "Bug Filter Response": "**Final Classification:** Defect Remediation & Feature Upgrades; **Confidence:** 0.8"
}