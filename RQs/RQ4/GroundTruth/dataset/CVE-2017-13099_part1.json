{
  "cve_id": "CVE-2017-13099",
  "cwe_ids": [
    "CWE-203"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:P/I:N/A:N",
  "cvss_is_v3": false,
  "repo_name": "wolfSSL/wolfssl",
  "commit_msg": "Fix for handling of static RSA PKCS formatting failures so they are indistinguishable from from correctly formatted RSA blocks (per RFC5246 section 7.4.7.1). Adjusted the static RSA preMasterSecret RNG creation for consistency in client case. Removed obsolete `PMS_VERSION_ERROR`.",
  "commit_hash": "fd455d5a5e9fef24c208e7ac7d3a4bc58834cbf1",
  "git_url": "https://github.com/wolfSSL/wolfssl/commit/fd455d5a5e9fef24c208e7ac7d3a4bc58834cbf1",
  "file_path": "src/internal.c",
  "func_name": "wolfSSL_ERR_reason_error_string",
  "func_before": "const char* wolfSSL_ERR_reason_error_string(unsigned long e)\n{\n#ifdef NO_ERROR_STRINGS\n\n    (void)e;\n    return \"no support for error strings built in\";\n\n#else\n\n    int error = (int)e;\n\n    /* pass to wolfCrypt */\n    if (error < MAX_CODE_E && error > MIN_CODE_E) {\n        return wc_GetErrorString(error);\n    }\n\n    switch (error) {\n\n    case UNSUPPORTED_SUITE :\n        return \"unsupported cipher suite\";\n\n    case INPUT_CASE_ERROR :\n        return \"input state error\";\n\n    case PREFIX_ERROR :\n        return \"bad index to key rounds\";\n\n    case MEMORY_ERROR :\n        return \"out of memory\";\n\n    case VERIFY_FINISHED_ERROR :\n        return \"verify problem on finished\";\n\n    case VERIFY_MAC_ERROR :\n        return \"verify mac problem\";\n\n    case PARSE_ERROR :\n        return \"parse error on header\";\n\n    case SIDE_ERROR :\n        return \"wrong client/server type\";\n\n    case NO_PEER_CERT :\n        return \"peer didn't send cert\";\n\n    case UNKNOWN_HANDSHAKE_TYPE :\n        return \"weird handshake type\";\n\n    case SOCKET_ERROR_E :\n        return \"error state on socket\";\n\n    case SOCKET_NODATA :\n        return \"expected data, not there\";\n\n    case INCOMPLETE_DATA :\n        return \"don't have enough data to complete task\";\n\n    case UNKNOWN_RECORD_TYPE :\n        return \"unknown type in record hdr\";\n\n    case DECRYPT_ERROR :\n        return \"error during decryption\";\n\n    case FATAL_ERROR :\n        return \"revcd alert fatal error\";\n\n    case ENCRYPT_ERROR :\n        return \"error during encryption\";\n\n    case FREAD_ERROR :\n        return \"fread problem\";\n\n    case NO_PEER_KEY :\n        return \"need peer's key\";\n\n    case NO_PRIVATE_KEY :\n        return \"need the private key\";\n\n    case NO_DH_PARAMS :\n        return \"server missing DH params\";\n\n    case RSA_PRIVATE_ERROR :\n        return \"error during rsa priv op\";\n\n    case MATCH_SUITE_ERROR :\n        return \"can't match cipher suite\";\n\n    case COMPRESSION_ERROR :\n        return \"compression mismatch error\";\n\n    case BUILD_MSG_ERROR :\n        return \"build message failure\";\n\n    case BAD_HELLO :\n        return \"client hello malformed\";\n\n    case DOMAIN_NAME_MISMATCH :\n        return \"peer subject name mismatch\";\n\n    case WANT_READ :\n    case WOLFSSL_ERROR_WANT_READ :\n        return \"non-blocking socket wants data to be read\";\n\n    case NOT_READY_ERROR :\n        return \"handshake layer not ready yet, complete first\";\n\n    case PMS_VERSION_ERROR :\n        return \"premaster secret version mismatch error\";\n\n    case VERSION_ERROR :\n        return \"record layer version error\";\n\n    case WANT_WRITE :\n    case WOLFSSL_ERROR_WANT_WRITE :\n        return \"non-blocking socket write buffer full\";\n\n    case BUFFER_ERROR :\n        return \"malformed buffer input error\";\n\n    case VERIFY_CERT_ERROR :\n        return \"verify problem on certificate\";\n\n    case VERIFY_SIGN_ERROR :\n        return \"verify problem based on signature\";\n\n    case CLIENT_ID_ERROR :\n        return \"psk client identity error\";\n\n    case SERVER_HINT_ERROR:\n        return \"psk server hint error\";\n\n    case PSK_KEY_ERROR:\n        return \"psk key callback error\";\n\n    case NTRU_KEY_ERROR:\n        return \"NTRU key error\";\n\n    case NTRU_DRBG_ERROR:\n        return \"NTRU drbg error\";\n\n    case NTRU_ENCRYPT_ERROR:\n        return \"NTRU encrypt error\";\n\n    case NTRU_DECRYPT_ERROR:\n        return \"NTRU decrypt error\";\n\n    case ZLIB_INIT_ERROR:\n        return \"zlib init error\";\n\n    case ZLIB_COMPRESS_ERROR:\n        return \"zlib compress error\";\n\n    case ZLIB_DECOMPRESS_ERROR:\n        return \"zlib decompress error\";\n\n    case GETTIME_ERROR:\n        return \"gettimeofday() error\";\n\n    case GETITIMER_ERROR:\n        return \"getitimer() error\";\n\n    case SIGACT_ERROR:\n        return \"sigaction() error\";\n\n    case SETITIMER_ERROR:\n        return \"setitimer() error\";\n\n    case LENGTH_ERROR:\n        return \"record layer length error\";\n\n    case PEER_KEY_ERROR:\n        return \"cant decode peer key\";\n\n    case ZERO_RETURN:\n    case WOLFSSL_ERROR_ZERO_RETURN:\n        return \"peer sent close notify alert\";\n\n    case ECC_CURVETYPE_ERROR:\n        return \"Bad ECC Curve Type or unsupported\";\n\n    case ECC_CURVE_ERROR:\n        return \"Bad ECC Curve or unsupported\";\n\n    case ECC_PEERKEY_ERROR:\n        return \"Bad ECC Peer Key\";\n\n    case ECC_MAKEKEY_ERROR:\n        return \"ECC Make Key failure\";\n\n    case ECC_EXPORT_ERROR:\n        return \"ECC Export Key failure\";\n\n    case ECC_SHARED_ERROR:\n        return \"ECC DHE shared failure\";\n\n    case NOT_CA_ERROR:\n        return \"Not a CA by basic constraint error\";\n\n    case HTTP_TIMEOUT:\n        return \"HTTP timeout for OCSP or CRL req\";\n\n    case BAD_CERT_MANAGER_ERROR:\n        return \"Bad Cert Manager error\";\n\n    case OCSP_CERT_REVOKED:\n        return \"OCSP Cert revoked\";\n\n    case CRL_CERT_REVOKED:\n        return \"CRL Cert revoked\";\n\n    case CRL_MISSING:\n        return \"CRL missing, not loaded\";\n\n    case MONITOR_SETUP_E:\n        return \"CRL monitor setup error\";\n\n    case THREAD_CREATE_E:\n        return \"Thread creation problem\";\n\n    case OCSP_NEED_URL:\n        return \"OCSP need URL\";\n\n    case OCSP_CERT_UNKNOWN:\n        return \"OCSP Cert unknown\";\n\n    case OCSP_LOOKUP_FAIL:\n        return \"OCSP Responder lookup fail\";\n\n    case MAX_CHAIN_ERROR:\n        return \"Maximum Chain Depth Exceeded\";\n\n    case COOKIE_ERROR:\n        return \"DTLS Cookie Error\";\n\n    case SEQUENCE_ERROR:\n        return \"DTLS Sequence Error\";\n\n    case SUITES_ERROR:\n        return \"Suites Pointer Error\";\n\n    case SSL_NO_PEM_HEADER:\n        return \"No PEM Header Error\";\n\n    case OUT_OF_ORDER_E:\n        return \"Out of order message, fatal\";\n\n    case BAD_KEA_TYPE_E:\n        return \"Bad KEA type found\";\n\n    case SANITY_CIPHER_E:\n        return \"Sanity check on ciphertext failed\";\n\n    case RECV_OVERFLOW_E:\n        return \"Receive callback returned more than requested\";\n\n    case GEN_COOKIE_E:\n        return \"Generate Cookie Error\";\n\n    case NO_PEER_VERIFY:\n        return \"Need peer certificate verify Error\";\n\n    case FWRITE_ERROR:\n        return \"fwrite Error\";\n\n    case CACHE_MATCH_ERROR:\n        return \"Cache restore header match Error\";\n\n    case UNKNOWN_SNI_HOST_NAME_E:\n        return \"Unrecognized host name Error\";\n\n    case UNKNOWN_MAX_FRAG_LEN_E:\n        return \"Unrecognized max frag len Error\";\n\n    case KEYUSE_SIGNATURE_E:\n        return \"Key Use digitalSignature not set Error\";\n\n    case KEYUSE_ENCIPHER_E:\n        return \"Key Use keyEncipherment not set Error\";\n\n    case EXTKEYUSE_AUTH_E:\n        return \"Ext Key Use server/client auth not set Error\";\n\n    case SEND_OOB_READ_E:\n        return \"Send Callback Out of Bounds Read Error\";\n\n    case SECURE_RENEGOTIATION_E:\n        return \"Invalid Renegotiation Error\";\n\n    case SESSION_TICKET_LEN_E:\n        return \"Session Ticket Too Long Error\";\n\n    case SESSION_TICKET_EXPECT_E:\n        return \"Session Ticket Error\";\n\n    case SCR_DIFFERENT_CERT_E:\n        return \"Peer sent different cert during SCR\";\n\n    case SESSION_SECRET_CB_E:\n        return \"Session Secret Callback Error\";\n\n    case NO_CHANGE_CIPHER_E:\n        return \"Finished received from peer before Change Cipher Error\";\n\n    case SANITY_MSG_E:\n        return \"Sanity Check on message order Error\";\n\n    case DUPLICATE_MSG_E:\n        return \"Duplicate HandShake message Error\";\n\n    case SNI_UNSUPPORTED:\n        return \"Protocol version does not support SNI Error\";\n\n    case SOCKET_PEER_CLOSED_E:\n        return \"Peer closed underlying transport Error\";\n\n    case BAD_TICKET_KEY_CB_SZ:\n        return \"Bad user session ticket key callback Size Error\";\n\n    case BAD_TICKET_MSG_SZ:\n        return \"Bad session ticket message Size Error\";\n\n    case BAD_TICKET_ENCRYPT:\n        return \"Bad user ticket callback encrypt Error\";\n\n    case DH_KEY_SIZE_E:\n        return \"DH key too small Error\";\n\n    case SNI_ABSENT_ERROR:\n        return \"No Server Name Indication extension Error\";\n\n    case RSA_SIGN_FAULT:\n        return \"RSA Signature Fault Error\";\n\n    case HANDSHAKE_SIZE_ERROR:\n        return \"Handshake message too large Error\";\n\n    case UNKNOWN_ALPN_PROTOCOL_NAME_E:\n        return \"Unrecognized protocol name Error\";\n\n    case BAD_CERTIFICATE_STATUS_ERROR:\n        return \"Bad Certificate Status Message Error\";\n\n    case OCSP_INVALID_STATUS:\n        return \"Invalid OCSP Status Error\";\n\n    case RSA_KEY_SIZE_E:\n        return \"RSA key too small\";\n\n    case ECC_KEY_SIZE_E:\n        return \"ECC key too small\";\n\n    case DTLS_EXPORT_VER_E:\n        return \"Version needs updated after code change or version mismatch\";\n\n    case INPUT_SIZE_E:\n        return \"Input size too large Error\";\n\n    case CTX_INIT_MUTEX_E:\n        return \"Initialize ctx mutex error\";\n\n    case EXT_MASTER_SECRET_NEEDED_E:\n        return \"Extended Master Secret must be enabled to resume EMS session\";\n\n    case DTLS_POOL_SZ_E:\n        return \"Maximum DTLS pool size exceeded\";\n\n    case DECODE_E:\n        return \"Decode handshake message error\";\n\n    case WRITE_DUP_READ_E:\n        return \"Write dup write side can't read error\";\n\n    case WRITE_DUP_WRITE_E:\n        return \"Write dup read side can't write error\";\n\n    case INVALID_CERT_CTX_E:\n        return \"Certificate context does not match request or not empty\";\n\n    case BAD_KEY_SHARE_DATA:\n        return \"The Key Share data contains group that was in Client Hello\";\n\n    case MISSING_HANDSHAKE_DATA:\n        return \"The handshake message is missing required data\";\n\n    case BAD_BINDER:\n        return \"Binder value does not match value server calculated\";\n\n    case EXT_NOT_ALLOWED:\n        return \"Extension type not allowed in handshake message type\";\n\n    case INVALID_PARAMETER:\n        return \"The security parameter is invalid\";\n\n    case UNSUPPORTED_EXTENSION:\n        return \"TLS Extension not requested by the client\";\n\n    case KEY_SHARE_ERROR:\n        return \"Key share extension did not contain a valid named group\";\n\n    case POST_HAND_AUTH_ERROR:\n        return \"Client will not do post handshake authentication\";\n\n    case HRR_COOKIE_ERROR:\n        return \"Cookie does not match one sent in HelloRetryRequest\";\n\n    case MCAST_HIGHWATER_CB_E:\n        return \"Multicast highwater callback returned error\";\n\n    case ALERT_COUNT_E:\n        return \"Alert Count exceeded error\";\n\n    case EXT_MISSING:\n        return \"Required TLS extension missing\";\n\n    default :\n        return \"unknown error number\";\n    }\n\n#endif /* NO_ERROR_STRINGS */\n}",
  "abstract_func_before": "const char* wolfSSL_ERR_reason_error_string(unsigned long VAR_0)\n{\n#ifdef VAR_1\n\n    (void)VAR_0;\n    return \"no support for error strings built in\";\n\n#else\n\n    int VAR_2 = (int)VAR_0;\n\n    /* COMMENT_0 */\n    if (VAR_2 < VAR_3 && VAR_2 > VAR_4) {\n        return wc_GetErrorString(VAR_2);\n    }\n\n    switch (VAR_2) {\n\n    case VAR_5 :\n        return \"unsupported cipher suite\";\n\n    case VAR_6 :\n        return \"input state error\";\n\n    case VAR_7 :\n        return \"bad index to key rounds\";\n\n    case VAR_8 :\n        return \"out of memory\";\n\n    case VAR_9 :\n        return \"verify problem on finished\";\n\n    case VAR_10 :\n        return \"verify mac problem\";\n\n    case VAR_11 :\n        return \"parse error on header\";\n\n    case VAR_12 :\n        return \"wrong client/server type\";\n\n    case VAR_13 :\n        return \"peer didn't send cert\";\n\n    case VAR_14 :\n        return \"weird handshake type\";\n\n    case VAR_15 :\n        return \"error state on socket\";\n\n    case VAR_16 :\n        return \"expected data, not there\";\n\n    case VAR_17 :\n        return \"don't have enough data to complete task\";\n\n    case VAR_18 :\n        return \"unknown type in record hdr\";\n\n    case VAR_19 :\n        return \"error during decryption\";\n\n    case VAR_20 :\n        return \"revcd alert fatal error\";\n\n    case VAR_21 :\n        return \"error during encryption\";\n\n    case VAR_22 :\n        return \"fread problem\";\n\n    case VAR_23 :\n        return \"need peer's key\";\n\n    case VAR_24 :\n        return \"need the private key\";\n\n    case VAR_25 :\n        return \"server missing DH params\";\n\n    case VAR_26 :\n        return \"error during rsa priv op\";\n\n    case VAR_27 :\n        return \"can't match cipher suite\";\n\n    case VAR_28 :\n        return \"compression mismatch error\";\n\n    case VAR_29 :\n        return \"build message failure\";\n\n    case VAR_30 :\n        return \"client hello malformed\";\n\n    case VAR_31 :\n        return \"peer subject name mismatch\";\n\n    case VAR_32 :\n    case VAR_33 :\n        return \"non-blocking socket wants data to be read\";\n\n    case VAR_34 :\n        return \"handshake layer not ready yet, complete first\";\n\n    case VAR_35 :\n        return \"premaster secret version mismatch error\";\n\n    case VAR_36 :\n        return \"record layer version error\";\n\n    case VAR_37 :\n    case VAR_38 :\n        return \"non-blocking socket write buffer full\";\n\n    case VAR_39 :\n        return \"malformed buffer input error\";\n\n    case VAR_40 :\n        return \"verify problem on certificate\";\n\n    case VAR_41 :\n        return \"verify problem based on signature\";\n\n    case VAR_42 :\n        return \"psk client identity error\";\n\n    case VAR_43:\n        return \"psk server hint error\";\n\n    case VAR_44:\n        return \"psk key callback error\";\n\n    case VAR_45:\n        return \"NTRU key error\";\n\n    case VAR_46:\n        return \"NTRU drbg error\";\n\n    case VAR_47:\n        return \"NTRU encrypt error\";\n\n    case VAR_48:\n        return \"NTRU decrypt error\";\n\n    case VAR_49:\n        return \"zlib init error\";\n\n    case VAR_50:\n        return \"zlib compress error\";\n\n    case VAR_51:\n        return \"zlib decompress error\";\n\n    case VAR_52:\n        return \"gettimeofday() error\";\n\n    case VAR_53:\n        return \"getitimer() error\";\n\n    case VAR_54:\n        return \"sigaction() error\";\n\n    case VAR_55:\n        return \"setitimer() error\";\n\n    case VAR_56:\n        return \"record layer length error\";\n\n    case VAR_57:\n        return \"cant decode peer key\";\n\n    case VAR_58:\n    case VAR_59:\n        return \"peer sent close notify alert\";\n\n    case VAR_60:\n        return \"Bad ECC Curve Type or unsupported\";\n\n    case VAR_61:\n        return \"Bad ECC Curve or unsupported\";\n\n    case VAR_62:\n        return \"Bad ECC Peer Key\";\n\n    case VAR_63:\n        return \"ECC Make Key failure\";\n\n    case VAR_64:\n        return \"ECC Export Key failure\";\n\n    case VAR_65:\n        return \"ECC DHE shared failure\";\n\n    case VAR_66:\n        return \"Not a CA by basic constraint error\";\n\n    case VAR_67:\n        return \"HTTP timeout for OCSP or CRL req\";\n\n    case VAR_68:\n        return \"Bad Cert Manager error\";\n\n    case VAR_69:\n        return \"OCSP Cert revoked\";\n\n    case VAR_70:\n        return \"CRL Cert revoked\";\n\n    case VAR_71:\n        return \"CRL missing, not loaded\";\n\n    case VAR_72:\n        return \"CRL monitor setup error\";\n\n    case VAR_73:\n        return \"Thread creation problem\";\n\n    case VAR_74:\n        return \"OCSP need URL\";\n\n    case VAR_75:\n        return \"OCSP Cert unknown\";\n\n    case VAR_76:\n        return \"OCSP Responder lookup fail\";\n\n    case VAR_77:\n        return \"Maximum Chain Depth Exceeded\";\n\n    case VAR_78:\n        return \"DTLS Cookie Error\";\n\n    case VAR_79:\n        return \"DTLS Sequence Error\";\n\n    case VAR_80:\n        return \"Suites Pointer Error\";\n\n    case VAR_81:\n        return \"No PEM Header Error\";\n\n    case VAR_82:\n        return \"Out of order message, fatal\";\n\n    case VAR_83:\n        return \"Bad KEA type found\";\n\n    case VAR_84:\n        return \"Sanity check on ciphertext failed\";\n\n    case VAR_85:\n        return \"Receive callback returned more than requested\";\n\n    case VAR_86:\n        return \"Generate Cookie Error\";\n\n    case VAR_87:\n        return \"Need peer certificate verify Error\";\n\n    case VAR_88:\n        return \"fwrite Error\";\n\n    case VAR_89:\n        return \"Cache restore header match Error\";\n\n    case VAR_90:\n        return \"Unrecognized host name Error\";\n\n    case VAR_91:\n        return \"Unrecognized max frag len Error\";\n\n    case VAR_92:\n        return \"Key Use digitalSignature not set Error\";\n\n    case VAR_93:\n        return \"Key Use keyEncipherment not set Error\";\n\n    case VAR_94:\n        return \"Ext Key Use server/client auth not set Error\";\n\n    case VAR_95:\n        return \"Send Callback Out of Bounds Read Error\";\n\n    case VAR_96:\n        return \"Invalid Renegotiation Error\";\n\n    case VAR_97:\n        return \"Session Ticket Too Long Error\";\n\n    case VAR_98:\n        return \"Session Ticket Error\";\n\n    case VAR_99:\n        return \"Peer sent different cert during SCR\";\n\n    case VAR_100:\n        return \"Session Secret Callback Error\";\n\n    case VAR_101:\n        return \"Finished received from peer before Change Cipher Error\";\n\n    case VAR_102:\n        return \"Sanity Check on message order Error\";\n\n    case VAR_103:\n        return \"Duplicate HandShake message Error\";\n\n    case VAR_104:\n        return \"Protocol version does not support SNI Error\";\n\n    case VAR_105:\n        return \"Peer closed underlying transport Error\";\n\n    case VAR_106:\n        return \"Bad user session ticket key callback Size Error\";\n\n    case VAR_107:\n        return \"Bad session ticket message Size Error\";\n\n    case VAR_108:\n        return \"Bad user ticket callback encrypt Error\";\n\n    case VAR_109:\n        return \"DH key too small Error\";\n\n    case VAR_110:\n        return \"No Server Name Indication extension Error\";\n\n    case VAR_111:\n        return \"RSA Signature Fault Error\";\n\n    case VAR_112:\n        return \"Handshake message too large Error\";\n\n    case VAR_113:\n        return \"Unrecognized protocol name Error\";\n\n    case VAR_114:\n        return \"Bad Certificate Status Message Error\";\n\n    case VAR_115:\n        return \"Invalid OCSP Status Error\";\n\n    case VAR_116:\n        return \"RSA key too small\";\n\n    case VAR_117:\n        return \"ECC key too small\";\n\n    case VAR_118:\n        return \"Version needs updated after code change or version mismatch\";\n\n    case VAR_119:\n        return \"Input size too large Error\";\n\n    case VAR_120:\n        return \"Initialize ctx mutex error\";\n\n    case VAR_121:\n        return \"Extended Master Secret must be enabled to resume EMS session\";\n\n    case VAR_122:\n        return \"Maximum DTLS pool size exceeded\";\n\n    case VAR_123:\n        return \"Decode handshake message error\";\n\n    case VAR_124:\n        return \"Write dup write side can't read error\";\n\n    case VAR_125:\n        return \"Write dup read side can't write error\";\n\n    case VAR_126:\n        return \"Certificate context does not match request or not empty\";\n\n    case VAR_127:\n        return \"The Key Share data contains group that was in Client Hello\";\n\n    case VAR_128:\n        return \"The handshake message is missing required data\";\n\n    case VAR_129:\n        return \"Binder value does not match value server calculated\";\n\n    case VAR_130:\n        return \"Extension type not allowed in handshake message type\";\n\n    case VAR_131:\n        return \"The security parameter is invalid\";\n\n    case VAR_132:\n        return \"TLS Extension not requested by the client\";\n\n    case VAR_133:\n        return \"Key share extension did not contain a valid named group\";\n\n    case VAR_134:\n        return \"Client will not do post handshake authentication\";\n\n    case VAR_135:\n        return \"Cookie does not match one sent in HelloRetryRequest\";\n\n    case VAR_136:\n        return \"Multicast highwater callback returned error\";\n\n    case VAR_137:\n        return \"Alert Count exceeded error\";\n\n    case VAR_138:\n        return \"Required TLS extension missing\";\n\n    default :\n        return \"unknown error number\";\n    }\n\n#endif /* COMMENT_1 */\n}",
  "func_graph_path_before": "wolfSSL/wolfssl/fd455d5a5e9fef24c208e7ac7d3a4bc58834cbf1/internal.c/vul/before/0.json",
  "func": "const char* wolfSSL_ERR_reason_error_string(unsigned long e)\n{\n#ifdef NO_ERROR_STRINGS\n\n    (void)e;\n    return \"no support for error strings built in\";\n\n#else\n\n    int error = (int)e;\n\n    /* pass to wolfCrypt */\n    if (error < MAX_CODE_E && error > MIN_CODE_E) {\n        return wc_GetErrorString(error);\n    }\n\n    switch (error) {\n\n    case UNSUPPORTED_SUITE :\n        return \"unsupported cipher suite\";\n\n    case INPUT_CASE_ERROR :\n        return \"input state error\";\n\n    case PREFIX_ERROR :\n        return \"bad index to key rounds\";\n\n    case MEMORY_ERROR :\n        return \"out of memory\";\n\n    case VERIFY_FINISHED_ERROR :\n        return \"verify problem on finished\";\n\n    case VERIFY_MAC_ERROR :\n        return \"verify mac problem\";\n\n    case PARSE_ERROR :\n        return \"parse error on header\";\n\n    case SIDE_ERROR :\n        return \"wrong client/server type\";\n\n    case NO_PEER_CERT :\n        return \"peer didn't send cert\";\n\n    case UNKNOWN_HANDSHAKE_TYPE :\n        return \"weird handshake type\";\n\n    case SOCKET_ERROR_E :\n        return \"error state on socket\";\n\n    case SOCKET_NODATA :\n        return \"expected data, not there\";\n\n    case INCOMPLETE_DATA :\n        return \"don't have enough data to complete task\";\n\n    case UNKNOWN_RECORD_TYPE :\n        return \"unknown type in record hdr\";\n\n    case DECRYPT_ERROR :\n        return \"error during decryption\";\n\n    case FATAL_ERROR :\n        return \"revcd alert fatal error\";\n\n    case ENCRYPT_ERROR :\n        return \"error during encryption\";\n\n    case FREAD_ERROR :\n        return \"fread problem\";\n\n    case NO_PEER_KEY :\n        return \"need peer's key\";\n\n    case NO_PRIVATE_KEY :\n        return \"need the private key\";\n\n    case NO_DH_PARAMS :\n        return \"server missing DH params\";\n\n    case RSA_PRIVATE_ERROR :\n        return \"error during rsa priv op\";\n\n    case MATCH_SUITE_ERROR :\n        return \"can't match cipher suite\";\n\n    case COMPRESSION_ERROR :\n        return \"compression mismatch error\";\n\n    case BUILD_MSG_ERROR :\n        return \"build message failure\";\n\n    case BAD_HELLO :\n        return \"client hello malformed\";\n\n    case DOMAIN_NAME_MISMATCH :\n        return \"peer subject name mismatch\";\n\n    case WANT_READ :\n    case WOLFSSL_ERROR_WANT_READ :\n        return \"non-blocking socket wants data to be read\";\n\n    case NOT_READY_ERROR :\n        return \"handshake layer not ready yet, complete first\";\n\n    case VERSION_ERROR :\n        return \"record layer version error\";\n\n    case WANT_WRITE :\n    case WOLFSSL_ERROR_WANT_WRITE :\n        return \"non-blocking socket write buffer full\";\n\n    case BUFFER_ERROR :\n        return \"malformed buffer input error\";\n\n    case VERIFY_CERT_ERROR :\n        return \"verify problem on certificate\";\n\n    case VERIFY_SIGN_ERROR :\n        return \"verify problem based on signature\";\n\n    case CLIENT_ID_ERROR :\n        return \"psk client identity error\";\n\n    case SERVER_HINT_ERROR:\n        return \"psk server hint error\";\n\n    case PSK_KEY_ERROR:\n        return \"psk key callback error\";\n\n    case NTRU_KEY_ERROR:\n        return \"NTRU key error\";\n\n    case NTRU_DRBG_ERROR:\n        return \"NTRU drbg error\";\n\n    case NTRU_ENCRYPT_ERROR:\n        return \"NTRU encrypt error\";\n\n    case NTRU_DECRYPT_ERROR:\n        return \"NTRU decrypt error\";\n\n    case ZLIB_INIT_ERROR:\n        return \"zlib init error\";\n\n    case ZLIB_COMPRESS_ERROR:\n        return \"zlib compress error\";\n\n    case ZLIB_DECOMPRESS_ERROR:\n        return \"zlib decompress error\";\n\n    case GETTIME_ERROR:\n        return \"gettimeofday() error\";\n\n    case GETITIMER_ERROR:\n        return \"getitimer() error\";\n\n    case SIGACT_ERROR:\n        return \"sigaction() error\";\n\n    case SETITIMER_ERROR:\n        return \"setitimer() error\";\n\n    case LENGTH_ERROR:\n        return \"record layer length error\";\n\n    case PEER_KEY_ERROR:\n        return \"cant decode peer key\";\n\n    case ZERO_RETURN:\n    case WOLFSSL_ERROR_ZERO_RETURN:\n        return \"peer sent close notify alert\";\n\n    case ECC_CURVETYPE_ERROR:\n        return \"Bad ECC Curve Type or unsupported\";\n\n    case ECC_CURVE_ERROR:\n        return \"Bad ECC Curve or unsupported\";\n\n    case ECC_PEERKEY_ERROR:\n        return \"Bad ECC Peer Key\";\n\n    case ECC_MAKEKEY_ERROR:\n        return \"ECC Make Key failure\";\n\n    case ECC_EXPORT_ERROR:\n        return \"ECC Export Key failure\";\n\n    case ECC_SHARED_ERROR:\n        return \"ECC DHE shared failure\";\n\n    case NOT_CA_ERROR:\n        return \"Not a CA by basic constraint error\";\n\n    case HTTP_TIMEOUT:\n        return \"HTTP timeout for OCSP or CRL req\";\n\n    case BAD_CERT_MANAGER_ERROR:\n        return \"Bad Cert Manager error\";\n\n    case OCSP_CERT_REVOKED:\n        return \"OCSP Cert revoked\";\n\n    case CRL_CERT_REVOKED:\n        return \"CRL Cert revoked\";\n\n    case CRL_MISSING:\n        return \"CRL missing, not loaded\";\n\n    case MONITOR_SETUP_E:\n        return \"CRL monitor setup error\";\n\n    case THREAD_CREATE_E:\n        return \"Thread creation problem\";\n\n    case OCSP_NEED_URL:\n        return \"OCSP need URL\";\n\n    case OCSP_CERT_UNKNOWN:\n        return \"OCSP Cert unknown\";\n\n    case OCSP_LOOKUP_FAIL:\n        return \"OCSP Responder lookup fail\";\n\n    case MAX_CHAIN_ERROR:\n        return \"Maximum Chain Depth Exceeded\";\n\n    case COOKIE_ERROR:\n        return \"DTLS Cookie Error\";\n\n    case SEQUENCE_ERROR:\n        return \"DTLS Sequence Error\";\n\n    case SUITES_ERROR:\n        return \"Suites Pointer Error\";\n\n    case SSL_NO_PEM_HEADER:\n        return \"No PEM Header Error\";\n\n    case OUT_OF_ORDER_E:\n        return \"Out of order message, fatal\";\n\n    case BAD_KEA_TYPE_E:\n        return \"Bad KEA type found\";\n\n    case SANITY_CIPHER_E:\n        return \"Sanity check on ciphertext failed\";\n\n    case RECV_OVERFLOW_E:\n        return \"Receive callback returned more than requested\";\n\n    case GEN_COOKIE_E:\n        return \"Generate Cookie Error\";\n\n    case NO_PEER_VERIFY:\n        return \"Need peer certificate verify Error\";\n\n    case FWRITE_ERROR:\n        return \"fwrite Error\";\n\n    case CACHE_MATCH_ERROR:\n        return \"Cache restore header match Error\";\n\n    case UNKNOWN_SNI_HOST_NAME_E:\n        return \"Unrecognized host name Error\";\n\n    case UNKNOWN_MAX_FRAG_LEN_E:\n        return \"Unrecognized max frag len Error\";\n\n    case KEYUSE_SIGNATURE_E:\n        return \"Key Use digitalSignature not set Error\";\n\n    case KEYUSE_ENCIPHER_E:\n        return \"Key Use keyEncipherment not set Error\";\n\n    case EXTKEYUSE_AUTH_E:\n        return \"Ext Key Use server/client auth not set Error\";\n\n    case SEND_OOB_READ_E:\n        return \"Send Callback Out of Bounds Read Error\";\n\n    case SECURE_RENEGOTIATION_E:\n        return \"Invalid Renegotiation Error\";\n\n    case SESSION_TICKET_LEN_E:\n        return \"Session Ticket Too Long Error\";\n\n    case SESSION_TICKET_EXPECT_E:\n        return \"Session Ticket Error\";\n\n    case SCR_DIFFERENT_CERT_E:\n        return \"Peer sent different cert during SCR\";\n\n    case SESSION_SECRET_CB_E:\n        return \"Session Secret Callback Error\";\n\n    case NO_CHANGE_CIPHER_E:\n        return \"Finished received from peer before Change Cipher Error\";\n\n    case SANITY_MSG_E:\n        return \"Sanity Check on message order Error\";\n\n    case DUPLICATE_MSG_E:\n        return \"Duplicate HandShake message Error\";\n\n    case SNI_UNSUPPORTED:\n        return \"Protocol version does not support SNI Error\";\n\n    case SOCKET_PEER_CLOSED_E:\n        return \"Peer closed underlying transport Error\";\n\n    case BAD_TICKET_KEY_CB_SZ:\n        return \"Bad user session ticket key callback Size Error\";\n\n    case BAD_TICKET_MSG_SZ:\n        return \"Bad session ticket message Size Error\";\n\n    case BAD_TICKET_ENCRYPT:\n        return \"Bad user ticket callback encrypt Error\";\n\n    case DH_KEY_SIZE_E:\n        return \"DH key too small Error\";\n\n    case SNI_ABSENT_ERROR:\n        return \"No Server Name Indication extension Error\";\n\n    case RSA_SIGN_FAULT:\n        return \"RSA Signature Fault Error\";\n\n    case HANDSHAKE_SIZE_ERROR:\n        return \"Handshake message too large Error\";\n\n    case UNKNOWN_ALPN_PROTOCOL_NAME_E:\n        return \"Unrecognized protocol name Error\";\n\n    case BAD_CERTIFICATE_STATUS_ERROR:\n        return \"Bad Certificate Status Message Error\";\n\n    case OCSP_INVALID_STATUS:\n        return \"Invalid OCSP Status Error\";\n\n    case RSA_KEY_SIZE_E:\n        return \"RSA key too small\";\n\n    case ECC_KEY_SIZE_E:\n        return \"ECC key too small\";\n\n    case DTLS_EXPORT_VER_E:\n        return \"Version needs updated after code change or version mismatch\";\n\n    case INPUT_SIZE_E:\n        return \"Input size too large Error\";\n\n    case CTX_INIT_MUTEX_E:\n        return \"Initialize ctx mutex error\";\n\n    case EXT_MASTER_SECRET_NEEDED_E:\n        return \"Extended Master Secret must be enabled to resume EMS session\";\n\n    case DTLS_POOL_SZ_E:\n        return \"Maximum DTLS pool size exceeded\";\n\n    case DECODE_E:\n        return \"Decode handshake message error\";\n\n    case WRITE_DUP_READ_E:\n        return \"Write dup write side can't read error\";\n\n    case WRITE_DUP_WRITE_E:\n        return \"Write dup read side can't write error\";\n\n    case INVALID_CERT_CTX_E:\n        return \"Certificate context does not match request or not empty\";\n\n    case BAD_KEY_SHARE_DATA:\n        return \"The Key Share data contains group that was in Client Hello\";\n\n    case MISSING_HANDSHAKE_DATA:\n        return \"The handshake message is missing required data\";\n\n    case BAD_BINDER:\n        return \"Binder value does not match value server calculated\";\n\n    case EXT_NOT_ALLOWED:\n        return \"Extension type not allowed in handshake message type\";\n\n    case INVALID_PARAMETER:\n        return \"The security parameter is invalid\";\n\n    case UNSUPPORTED_EXTENSION:\n        return \"TLS Extension not requested by the client\";\n\n    case KEY_SHARE_ERROR:\n        return \"Key share extension did not contain a valid named group\";\n\n    case POST_HAND_AUTH_ERROR:\n        return \"Client will not do post handshake authentication\";\n\n    case HRR_COOKIE_ERROR:\n        return \"Cookie does not match one sent in HelloRetryRequest\";\n\n    case MCAST_HIGHWATER_CB_E:\n        return \"Multicast highwater callback returned error\";\n\n    case ALERT_COUNT_E:\n        return \"Alert Count exceeded error\";\n\n    case EXT_MISSING:\n        return \"Required TLS extension missing\";\n\n    default :\n        return \"unknown error number\";\n    }\n\n#endif /* NO_ERROR_STRINGS */\n}",
  "abstract_func": "const char* wolfSSL_ERR_reason_error_string(unsigned long VAR_0)\n{\n#ifdef VAR_1\n\n    (void)VAR_0;\n    return \"no support for error strings built in\";\n\n#else\n\n    int VAR_2 = (int)VAR_0;\n\n    /* COMMENT_0 */\n    if (VAR_2 < VAR_3 && VAR_2 > VAR_4) {\n        return wc_GetErrorString(VAR_2);\n    }\n\n    switch (VAR_2) {\n\n    case VAR_5 :\n        return \"unsupported cipher suite\";\n\n    case VAR_6 :\n        return \"input state error\";\n\n    case VAR_7 :\n        return \"bad index to key rounds\";\n\n    case VAR_8 :\n        return \"out of memory\";\n\n    case VAR_9 :\n        return \"verify problem on finished\";\n\n    case VAR_10 :\n        return \"verify mac problem\";\n\n    case VAR_11 :\n        return \"parse error on header\";\n\n    case VAR_12 :\n        return \"wrong client/server type\";\n\n    case VAR_13 :\n        return \"peer didn't send cert\";\n\n    case VAR_14 :\n        return \"weird handshake type\";\n\n    case VAR_15 :\n        return \"error state on socket\";\n\n    case VAR_16 :\n        return \"expected data, not there\";\n\n    case VAR_17 :\n        return \"don't have enough data to complete task\";\n\n    case VAR_18 :\n        return \"unknown type in record hdr\";\n\n    case VAR_19 :\n        return \"error during decryption\";\n\n    case VAR_20 :\n        return \"revcd alert fatal error\";\n\n    case VAR_21 :\n        return \"error during encryption\";\n\n    case VAR_22 :\n        return \"fread problem\";\n\n    case VAR_23 :\n        return \"need peer's key\";\n\n    case VAR_24 :\n        return \"need the private key\";\n\n    case VAR_25 :\n        return \"server missing DH params\";\n\n    case VAR_26 :\n        return \"error during rsa priv op\";\n\n    case VAR_27 :\n        return \"can't match cipher suite\";\n\n    case VAR_28 :\n        return \"compression mismatch error\";\n\n    case VAR_29 :\n        return \"build message failure\";\n\n    case VAR_30 :\n        return \"client hello malformed\";\n\n    case VAR_31 :\n        return \"peer subject name mismatch\";\n\n    case VAR_32 :\n    case VAR_33 :\n        return \"non-blocking socket wants data to be read\";\n\n    case VAR_34 :\n        return \"handshake layer not ready yet, complete first\";\n\n    case VAR_35 :\n        return \"record layer version error\";\n\n    case VAR_36 :\n    case VAR_37 :\n        return \"non-blocking socket write buffer full\";\n\n    case VAR_38 :\n        return \"malformed buffer input error\";\n\n    case VAR_39 :\n        return \"verify problem on certificate\";\n\n    case VAR_40 :\n        return \"verify problem based on signature\";\n\n    case VAR_41 :\n        return \"psk client identity error\";\n\n    case VAR_42:\n        return \"psk server hint error\";\n\n    case VAR_43:\n        return \"psk key callback error\";\n\n    case VAR_44:\n        return \"NTRU key error\";\n\n    case VAR_45:\n        return \"NTRU drbg error\";\n\n    case VAR_46:\n        return \"NTRU encrypt error\";\n\n    case VAR_47:\n        return \"NTRU decrypt error\";\n\n    case VAR_48:\n        return \"zlib init error\";\n\n    case VAR_49:\n        return \"zlib compress error\";\n\n    case VAR_50:\n        return \"zlib decompress error\";\n\n    case VAR_51:\n        return \"gettimeofday() error\";\n\n    case VAR_52:\n        return \"getitimer() error\";\n\n    case VAR_53:\n        return \"sigaction() error\";\n\n    case VAR_54:\n        return \"setitimer() error\";\n\n    case VAR_55:\n        return \"record layer length error\";\n\n    case VAR_56:\n        return \"cant decode peer key\";\n\n    case VAR_57:\n    case VAR_58:\n        return \"peer sent close notify alert\";\n\n    case VAR_59:\n        return \"Bad ECC Curve Type or unsupported\";\n\n    case VAR_60:\n        return \"Bad ECC Curve or unsupported\";\n\n    case VAR_61:\n        return \"Bad ECC Peer Key\";\n\n    case VAR_62:\n        return \"ECC Make Key failure\";\n\n    case VAR_63:\n        return \"ECC Export Key failure\";\n\n    case VAR_64:\n        return \"ECC DHE shared failure\";\n\n    case VAR_65:\n        return \"Not a CA by basic constraint error\";\n\n    case VAR_66:\n        return \"HTTP timeout for OCSP or CRL req\";\n\n    case VAR_67:\n        return \"Bad Cert Manager error\";\n\n    case VAR_68:\n        return \"OCSP Cert revoked\";\n\n    case VAR_69:\n        return \"CRL Cert revoked\";\n\n    case VAR_70:\n        return \"CRL missing, not loaded\";\n\n    case VAR_71:\n        return \"CRL monitor setup error\";\n\n    case VAR_72:\n        return \"Thread creation problem\";\n\n    case VAR_73:\n        return \"OCSP need URL\";\n\n    case VAR_74:\n        return \"OCSP Cert unknown\";\n\n    case VAR_75:\n        return \"OCSP Responder lookup fail\";\n\n    case VAR_76:\n        return \"Maximum Chain Depth Exceeded\";\n\n    case VAR_77:\n        return \"DTLS Cookie Error\";\n\n    case VAR_78:\n        return \"DTLS Sequence Error\";\n\n    case VAR_79:\n        return \"Suites Pointer Error\";\n\n    case VAR_80:\n        return \"No PEM Header Error\";\n\n    case VAR_81:\n        return \"Out of order message, fatal\";\n\n    case VAR_82:\n        return \"Bad KEA type found\";\n\n    case VAR_83:\n        return \"Sanity check on ciphertext failed\";\n\n    case VAR_84:\n        return \"Receive callback returned more than requested\";\n\n    case VAR_85:\n        return \"Generate Cookie Error\";\n\n    case VAR_86:\n        return \"Need peer certificate verify Error\";\n\n    case VAR_87:\n        return \"fwrite Error\";\n\n    case VAR_88:\n        return \"Cache restore header match Error\";\n\n    case VAR_89:\n        return \"Unrecognized host name Error\";\n\n    case VAR_90:\n        return \"Unrecognized max frag len Error\";\n\n    case VAR_91:\n        return \"Key Use digitalSignature not set Error\";\n\n    case VAR_92:\n        return \"Key Use keyEncipherment not set Error\";\n\n    case VAR_93:\n        return \"Ext Key Use server/client auth not set Error\";\n\n    case VAR_94:\n        return \"Send Callback Out of Bounds Read Error\";\n\n    case VAR_95:\n        return \"Invalid Renegotiation Error\";\n\n    case VAR_96:\n        return \"Session Ticket Too Long Error\";\n\n    case VAR_97:\n        return \"Session Ticket Error\";\n\n    case VAR_98:\n        return \"Peer sent different cert during SCR\";\n\n    case VAR_99:\n        return \"Session Secret Callback Error\";\n\n    case VAR_100:\n        return \"Finished received from peer before Change Cipher Error\";\n\n    case VAR_101:\n        return \"Sanity Check on message order Error\";\n\n    case VAR_102:\n        return \"Duplicate HandShake message Error\";\n\n    case VAR_103:\n        return \"Protocol version does not support SNI Error\";\n\n    case VAR_104:\n        return \"Peer closed underlying transport Error\";\n\n    case VAR_105:\n        return \"Bad user session ticket key callback Size Error\";\n\n    case VAR_106:\n        return \"Bad session ticket message Size Error\";\n\n    case VAR_107:\n        return \"Bad user ticket callback encrypt Error\";\n\n    case VAR_108:\n        return \"DH key too small Error\";\n\n    case VAR_109:\n        return \"No Server Name Indication extension Error\";\n\n    case VAR_110:\n        return \"RSA Signature Fault Error\";\n\n    case VAR_111:\n        return \"Handshake message too large Error\";\n\n    case VAR_112:\n        return \"Unrecognized protocol name Error\";\n\n    case VAR_113:\n        return \"Bad Certificate Status Message Error\";\n\n    case VAR_114:\n        return \"Invalid OCSP Status Error\";\n\n    case VAR_115:\n        return \"RSA key too small\";\n\n    case VAR_116:\n        return \"ECC key too small\";\n\n    case VAR_117:\n        return \"Version needs updated after code change or version mismatch\";\n\n    case VAR_118:\n        return \"Input size too large Error\";\n\n    case VAR_119:\n        return \"Initialize ctx mutex error\";\n\n    case VAR_120:\n        return \"Extended Master Secret must be enabled to resume EMS session\";\n\n    case VAR_121:\n        return \"Maximum DTLS pool size exceeded\";\n\n    case VAR_122:\n        return \"Decode handshake message error\";\n\n    case VAR_123:\n        return \"Write dup write side can't read error\";\n\n    case VAR_124:\n        return \"Write dup read side can't write error\";\n\n    case VAR_125:\n        return \"Certificate context does not match request or not empty\";\n\n    case VAR_126:\n        return \"The Key Share data contains group that was in Client Hello\";\n\n    case VAR_127:\n        return \"The handshake message is missing required data\";\n\n    case VAR_128:\n        return \"Binder value does not match value server calculated\";\n\n    case VAR_129:\n        return \"Extension type not allowed in handshake message type\";\n\n    case VAR_130:\n        return \"The security parameter is invalid\";\n\n    case VAR_131:\n        return \"TLS Extension not requested by the client\";\n\n    case VAR_132:\n        return \"Key share extension did not contain a valid named group\";\n\n    case VAR_133:\n        return \"Client will not do post handshake authentication\";\n\n    case VAR_134:\n        return \"Cookie does not match one sent in HelloRetryRequest\";\n\n    case VAR_135:\n        return \"Multicast highwater callback returned error\";\n\n    case VAR_136:\n        return \"Alert Count exceeded error\";\n\n    case VAR_137:\n        return \"Required TLS extension missing\";\n\n    default :\n        return \"unknown error number\";\n    }\n\n#endif /* COMMENT_1 */\n}",
  "func_graph_path": "wolfSSL/wolfssl/fd455d5a5e9fef24c208e7ac7d3a4bc58834cbf1/internal.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -104,9 +104,6 @@\n     case NOT_READY_ERROR :\n         return \"handshake layer not ready yet, complete first\";\n \n-    case PMS_VERSION_ERROR :\n-        return \"premaster secret version mismatch error\";\n-\n     case VERSION_ERROR :\n         return \"record layer version error\";\n ",
  "diff_line_info": {
    "deleted_lines": [
      "    case PMS_VERSION_ERROR :",
      "        return \"premaster secret version mismatch error\";",
      ""
    ],
    "added_lines": []
  },
  "is_vul": true,
  "pr_url": "https://github.com/wolfSSL/wolfssl/pull/1229",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/wolfSSL/wolfssl/pull/1229: 403 Client Error: Forbidden for url: https://api.github.com/repos/wolfSSL/wolfssl/pulls/1229",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 0.95"
}