{
  "cve_id": "CVE-2019-15903",
  "cwe_ids": [
    "CWE-776",
    "CWE-125"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "libexpat",
  "commit_msg": "xmlparse.c: Deny internal entities closing the doctype",
  "commit_hash": "c20b758c332d9a13afbbb276d30db1d183a85d43",
  "git_url": "https://github.com/libexpat/libexpat/commit/c20b758c332d9a13afbbb276d30db1d183a85d43",
  "file_path": "expat/lib/xmlparse.c",
  "func_name": "prologProcessor",
  "func_before": "static enum XML_Error PTRCALL\nprologProcessor(XML_Parser parser, const char *s, const char *end,\n                const char **nextPtr) {\n  const char *next = s;\n  int tok = XmlPrologTok(parser->m_encoding, s, end, &next);\n  return doProlog(parser, parser->m_encoding, s, end, tok, next, nextPtr,\n                  (XML_Bool)! parser->m_parsingStatus.finalBuffer);\n}",
  "abstract_func_before": "static enum XML_Error VAR_0\nprologProcessor(XML_Parser VAR_1, const char *VAR_2, const char *VAR_3,\n                const char **VAR_4) {\n  const char *VAR_5 = VAR_2;\n  int VAR_6 = XmlPrologTok(VAR_1->m_encoding, VAR_2, VAR_3, &VAR_5);\n  return doProlog(VAR_1, VAR_1->m_encoding, VAR_2, VAR_3, VAR_6, VAR_5, VAR_4,\n                  (XML_Bool)! VAR_1->m_parsingStatus.finalBuffer);\n}",
  "func_graph_path_before": null,
  "func": "static enum XML_Error PTRCALL\nprologProcessor(XML_Parser parser, const char *s, const char *end,\n                const char **nextPtr) {\n  const char *next = s;\n  int tok = XmlPrologTok(parser->m_encoding, s, end, &next);\n  return doProlog(parser, parser->m_encoding, s, end, tok, next, nextPtr,\n                  (XML_Bool)! parser->m_parsingStatus.finalBuffer, XML_TRUE);\n}",
  "abstract_func": "static enum XML_Error VAR_0\nprologProcessor(XML_Parser VAR_1, const char *VAR_2, const char *VAR_3,\n                const char **VAR_4) {\n  const char *VAR_5 = VAR_2;\n  int VAR_6 = XmlPrologTok(VAR_1->m_encoding, VAR_2, VAR_3, &VAR_5);\n  return doProlog(VAR_1, VAR_1->m_encoding, VAR_2, VAR_3, VAR_6, VAR_5, VAR_4,\n                  (XML_Bool)! VAR_1->m_parsingStatus.finalBuffer, VAR_7);\n}",
  "func_graph_path": null,
  "diff_func": "--- func_before\n+++ func_after\n@@ -4,5 +4,5 @@\n   const char *next = s;\n   int tok = XmlPrologTok(parser->m_encoding, s, end, &next);\n   return doProlog(parser, parser->m_encoding, s, end, tok, next, nextPtr,\n-                  (XML_Bool)! parser->m_parsingStatus.finalBuffer);\n+                  (XML_Bool)! parser->m_parsingStatus.finalBuffer, XML_TRUE);\n }",
  "diff_line_info": {
    "deleted_lines": [
      "                  (XML_Bool)! parser->m_parsingStatus.finalBuffer);"
    ],
    "added_lines": [
      "                  (XML_Bool)! parser->m_parsingStatus.finalBuffer, XML_TRUE);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/libexpat/libexpat/pull/318",
  "description": {
    "pr_info": {
      "title": "[CVE-2019-15903] Deny internal entities closing the doctype (for #317)",
      "number": 318
    },
    "comment": [
      "Related to #317, work in progress.\r\n\r\nReview wanted!\r\n\r\nCC @yuweol @RMJ10 @DerDakon",
      "Unless someone hits the brakes, I'm aiming to merge at Tuesday 2019-09-03 evening, then requesting a CVE, waiting for the CVE request reply, then making a new release.",
      "That looks eminently sensible to me.  Is there anything else we should be disallowing from internal entities that we currently allow?  I don't think so, but I haven't looked very hard.",
      "Rhodri, thanks for the review!"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "The patch modifies XML entity handling, likely to prevent security issues like XXE. The code change adds a parameter to enforce restrictions on entities. This aligns with security vulnerability fixes.\n\n**Final Classification:** Security Vulnerability Fix; **Confidence:** 0.9\n\n**Confidence Explanation:** The change targets XML entity processing, a common area for security vulnerabilities. The term \"deny\" suggests blocking a potential exploit. Without explicit CVEs, the confidence is slightly below maximum."
}