{
  "cve_id": "CVE-2021-37620",
  "cwe_ids": [
    "CWE-125"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "Exiv2/exiv2",
  "commit_msg": "Safer std::vector indexing.",
  "commit_hash": "76e313745e813f80e8910aceb2210af3ad8cf897",
  "git_url": "https://github.com/Exiv2/exiv2/commit/76e313745e813f80e8910aceb2210af3ad8cf897",
  "file_path": "src/utils.cpp",
  "func_name": "basename",
  "func_before": "std::string basename(const std::string& path, bool delsuffix)\n    {\n        if (path == \"\") return \".\";\n        // Strip trailing slashes or backslashes\n        std::string p = path;\n        while (   p.length() > 1\n               && (p[p.length()-1] == '\\\\' || p[p.length()-1] == '/')) {\n            p = p.substr(0, p.length()-1);\n        }\n        if (p.length() == 2 && p[1] == ':') return \"\"; // For Windows paths\n        std::string::size_type idx = p.find_last_of(\"\\\\/\");\n        if (idx == 1 && p[0] == '\\\\' && p[1] == '\\\\') return \"\"; // For Windows paths\n        if (idx != std::string::npos) p = p.substr(idx+1);\n        if (delsuffix) p = p.substr(0, p.length() - suffix(p).length());\n        return p;\n    }",
  "abstract_func_before": "std::string basename(const std::string& VAR_0, bool VAR_1)\n    {\n        if (VAR_0 == \"\") return \".\";\n        /* COMMENT_0 */\n        std::string VAR_2 = VAR_0;\n        while (   VAR_2.length() > 1\n               && (VAR_2[VAR_2.length()-1] == '\\\\' || VAR_2[VAR_2.length()-1] == '/')) {\n            VAR_2 = VAR_2.substr(0, VAR_2.length()-1);\n        }\n        if (VAR_2.length() == 2 && VAR_2[1] == ':') return \"\"; /* COMMENT_1 */\n        std::string::size_type VAR_3 = VAR_2.find_last_of(\"\\\\/\");\n        if (VAR_3 == 1 && VAR_2[0] == '\\\\' && VAR_2[1] == '\\\\') return \"\"; /* COMMENT_1 */\n        if (VAR_3 != std::string::npos) VAR_2 = VAR_2.substr(VAR_3+1);\n        if (VAR_1) VAR_2 = VAR_2.substr(0, VAR_2.length() - suffix(VAR_2).length());\n        return VAR_2;\n    }",
  "func_graph_path_before": "Exiv2/exiv2/76e313745e813f80e8910aceb2210af3ad8cf897/utils.cpp/vul/before/1.json",
  "func": "std::string basename(const std::string& path, bool delsuffix)\n    {\n        if (path == \"\") return \".\";\n        // Strip trailing slashes or backslashes\n        std::string p = path;\n        while (   p.length() > 1\n               && (p[p.length()-1] == '\\\\' || p[p.length()-1] == '/')) {\n            p = p.substr(0, p.length()-1);\n        }\n        if (p.length() == 2 && p[1] == ':') return \"\"; // For Windows paths\n        std::string::size_type idx = p.find_last_of(\"\\\\/\");\n        if (idx == 1 && p.at(0) == '\\\\' && p.at(1) == '\\\\') return \"\"; // For Windows paths\n        if (idx != std::string::npos) p = p.substr(idx+1);\n        if (delsuffix) p = p.substr(0, p.length() - suffix(p).length());\n        return p;\n    }",
  "abstract_func": "std::string basename(const std::string& VAR_0, bool VAR_1)\n    {\n        if (VAR_0 == \"\") return \".\";\n        /* COMMENT_0 */\n        std::string VAR_2 = VAR_0;\n        while (   VAR_2.length() > 1\n               && (VAR_2[VAR_2.length()-1] == '\\\\' || VAR_2[VAR_2.length()-1] == '/')) {\n            VAR_2 = VAR_2.substr(0, VAR_2.length()-1);\n        }\n        if (VAR_2.length() == 2 && VAR_2[1] == ':') return \"\"; /* COMMENT_1 */\n        std::string::size_type VAR_3 = VAR_2.find_last_of(\"\\\\/\");\n        if (VAR_3 == 1 && VAR_2.at(0) == '\\\\' && VAR_2.at(1) == '\\\\') return \"\"; /* COMMENT_1 */\n        if (VAR_3 != std::string::npos) VAR_2 = VAR_2.substr(VAR_3+1);\n        if (VAR_1) VAR_2 = VAR_2.substr(0, VAR_2.length() - suffix(VAR_2).length());\n        return VAR_2;\n    }",
  "func_graph_path": "Exiv2/exiv2/76e313745e813f80e8910aceb2210af3ad8cf897/utils.cpp/vul/after/1.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -9,7 +9,7 @@\n         }\n         if (p.length() == 2 && p[1] == ':') return \"\"; // For Windows paths\n         std::string::size_type idx = p.find_last_of(\"\\\\/\");\n-        if (idx == 1 && p[0] == '\\\\' && p[1] == '\\\\') return \"\"; // For Windows paths\n+        if (idx == 1 && p.at(0) == '\\\\' && p.at(1) == '\\\\') return \"\"; // For Windows paths\n         if (idx != std::string::npos) p = p.substr(idx+1);\n         if (delsuffix) p = p.substr(0, p.length() - suffix(p).length());\n         return p;",
  "diff_line_info": {
    "deleted_lines": [
      "        if (idx == 1 && p[0] == '\\\\' && p[1] == '\\\\') return \"\"; // For Windows paths"
    ],
    "added_lines": [
      "        if (idx == 1 && p.at(0) == '\\\\' && p.at(1) == '\\\\') return \"\"; // For Windows paths"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/sridharb1/exiv2/pull/4",
  "description": {
    "pr_info": {
      "title": "0.27 maintenance",
      "number": 4
    },
    "comment": []
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "The patch modifies string indexing to prevent potential buffer overflows, which is a security improvement. The commit message refers to safer indexing, and the code change uses bounds-checked access, indicating a security fix. While the vulnerability description isn't explicit about security, the code change is clearly aimed at preventing a security-related issue.\n\n**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.9"
}