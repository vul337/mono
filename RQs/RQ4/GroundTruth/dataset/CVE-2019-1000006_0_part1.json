{
  "cve_id": "CVE-2019-1000006",
  "cwe_ids": [
    "CWE-787"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "RIOT-OS/RIOT",
  "commit_msg": "sock_dns: remove some magic numbers",
  "commit_hash": "8ad5e44cbaea616885bfc5cb032d911089383fe5",
  "git_url": "https://github.com/RIOT-OS/RIOT/commit/8ad5e44cbaea616885bfc5cb032d911089383fe5",
  "file_path": "sys/net/application_layer/dns/dns.c",
  "func_name": "_parse_dns_reply",
  "func_before": "static int _parse_dns_reply(uint8_t *buf, size_t len, void* addr_out, int family)\n{\n    const uint8_t *buflim = buf + len;\n    sock_dns_hdr_t *hdr = (sock_dns_hdr_t*) buf;\n    uint8_t *bufpos = buf + sizeof(*hdr);\n\n    /* skip all queries that are part of the reply */\n    for (unsigned n = 0; n < ntohs(hdr->qdcount); n++) {\n        ssize_t tmp = _skip_hostname(buf, len, bufpos);\n        if (tmp < 0) {\n            return tmp;\n        }\n        bufpos += tmp;\n        bufpos += 4;    /* skip type and class of query */\n    }\n\n    for (unsigned n = 0; n < ntohs(hdr->ancount); n++) {\n        ssize_t tmp = _skip_hostname(buf, len, bufpos);\n        if (tmp < 0) {\n            return tmp;\n        }\n        bufpos += tmp;\n        if ((bufpos + 2 + 2 + 4) >= buflim) {\n            return -EBADMSG;\n        }\n        uint16_t _type = ntohs(_get_short(bufpos));\n        bufpos += 2;\n        uint16_t class = ntohs(_get_short(bufpos));\n        bufpos += 2;\n        bufpos += 4; /* skip ttl */\n\n        unsigned addrlen = ntohs(_get_short(bufpos));\n        /* skip unwanted answers */\n        if ((class != DNS_CLASS_IN) ||\n                ((_type == DNS_TYPE_A) && (family == AF_INET6)) ||\n                ((_type == DNS_TYPE_AAAA) && (family == AF_INET)) ||\n                ! ((_type == DNS_TYPE_A) || ((_type == DNS_TYPE_AAAA))\n                    )) {\n            if (addrlen > len) {\n                /* buffer wraps around memory space */\n                return -EBADMSG;\n            }\n            bufpos += addrlen;\n            /* other out-of-bound is checked in `_skip_hostname()` at start of\n             * loop */\n            continue;\n        }\n        if (((addrlen != INADDRSZ) && (family == AF_INET)) ||\n            ((addrlen != IN6ADDRSZ) && (family == AF_INET6)) ||\n            ((addrlen != IN6ADDRSZ) && (addrlen != INADDRSZ) &&\n             (family == AF_UNSPEC))) {\n            return -EBADMSG;\n        }\n        bufpos += 2;\n        if ((bufpos + addrlen) >= buflim) {\n            return -EBADMSG;\n        }\n\n        memcpy(addr_out, bufpos, addrlen);\n        return addrlen;\n    }\n\n    return -1;\n}",
  "abstract_func_before": "static int _parse_dns_reply(uint8_t *VAR_0, size_t VAR_1, void* VAR_2, int VAR_3)\n{\n    const uint8_t *VAR_4 = VAR_0 + VAR_1;\n    sock_dns_hdr_t *VAR_5 = (sock_dns_hdr_t*) VAR_0;\n    uint8_t *VAR_6 = VAR_0 + sizeof(*VAR_5);\n\n    /* COMMENT_0 */\n    for (unsigned VAR_7 = 0; VAR_7 < ntohs(VAR_5->qdcount); VAR_7++) {\n        ssize_t VAR_8 = _skip_hostname(VAR_0, VAR_1, VAR_6);\n        if (VAR_8 < 0) {\n            return VAR_8;\n        }\n        VAR_6 += VAR_8;\n        VAR_6 += 4;    /* COMMENT_1 */\n    }\n\n    for (unsigned VAR_7 = 0; VAR_7 < ntohs(VAR_5->ancount); VAR_7++) {\n        ssize_t VAR_8 = _skip_hostname(VAR_0, VAR_1, VAR_6);\n        if (VAR_8 < 0) {\n            return VAR_8;\n        }\n        VAR_6 += VAR_8;\n        if ((VAR_6 + 2 + 2 + 4) >= VAR_4) {\n            return -VAR_9;\n        }\n        uint16_t VAR_10 = ntohs(_get_short(VAR_6));\n        VAR_6 += 2;\n        uint16_t VAR_11 = ntohs(_get_short(VAR_6));\n        VAR_6 += 2;\n        VAR_6 += 4; /* COMMENT_2 */\n\n        unsigned VAR_12 = ntohs(_get_short(VAR_6));\n        /* COMMENT_3 */\n        if ((VAR_11 != VAR_13) ||\n                ((VAR_10 == VAR_14) && (VAR_3 == VAR_15)) ||\n                ((VAR_10 == VAR_16) && (VAR_3 == VAR_17)) ||\n                ! ((VAR_10 == VAR_14) || ((VAR_10 == VAR_16))\n                    )) {\n            if (VAR_12 > VAR_1) {\n                /* COMMENT_4 */\n                return -VAR_9;\n            }\n            VAR_6 += VAR_12;\n            /* COMMENT_5 */\n                      \n            continue;\n        }\n        if (((VAR_12 != VAR_18) && (VAR_3 == VAR_17)) ||\n            ((VAR_12 != VAR_19) && (VAR_3 == VAR_15)) ||\n            ((VAR_12 != VAR_19) && (VAR_12 != VAR_18) &&\n             (VAR_3 == VAR_20))) {\n            return -VAR_9;\n        }\n        VAR_6 += 2;\n        if ((VAR_6 + VAR_12) >= VAR_4) {\n            return -VAR_9;\n        }\n\n        memcpy(VAR_2, VAR_6, VAR_12);\n        return VAR_12;\n    }\n\n    return -1;\n}",
  "func_graph_path_before": "RIOT-OS/RIOT/8ad5e44cbaea616885bfc5cb032d911089383fe5/dns.c/vul/before/0.json",
  "func": "static int _parse_dns_reply(uint8_t *buf, size_t len, void* addr_out, int family)\n{\n    const uint8_t *buflim = buf + len;\n    sock_dns_hdr_t *hdr = (sock_dns_hdr_t*) buf;\n    uint8_t *bufpos = buf + sizeof(*hdr);\n\n    /* skip all queries that are part of the reply */\n    for (unsigned n = 0; n < ntohs(hdr->qdcount); n++) {\n        ssize_t tmp = _skip_hostname(buf, len, bufpos);\n        if (tmp < 0) {\n            return tmp;\n        }\n        bufpos += tmp;\n        /* skip type and class of query */\n        bufpos += (RR_TYPE_LENGTH + RR_CLASS_LENGTH);\n    }\n\n    for (unsigned n = 0; n < ntohs(hdr->ancount); n++) {\n        ssize_t tmp = _skip_hostname(buf, len, bufpos);\n        if (tmp < 0) {\n            return tmp;\n        }\n        bufpos += tmp;\n        if ((bufpos + RR_TYPE_LENGTH + RR_CLASS_LENGTH + RR_TTL_LENGTH) >= buflim) {\n            return -EBADMSG;\n        }\n        uint16_t _type = ntohs(_get_short(bufpos));\n        bufpos += RR_TYPE_LENGTH;\n        uint16_t class = ntohs(_get_short(bufpos));\n        bufpos += RR_CLASS_LENGTH;\n        bufpos += RR_TTL_LENGTH; /* skip ttl */\n\n        unsigned addrlen = ntohs(_get_short(bufpos));\n        /* skip unwanted answers */\n        if ((class != DNS_CLASS_IN) ||\n                ((_type == DNS_TYPE_A) && (family == AF_INET6)) ||\n                ((_type == DNS_TYPE_AAAA) && (family == AF_INET)) ||\n                ! ((_type == DNS_TYPE_A) || ((_type == DNS_TYPE_AAAA))\n                    )) {\n            if (addrlen > len) {\n                /* buffer wraps around memory space */\n                return -EBADMSG;\n            }\n            bufpos += addrlen;\n            /* other out-of-bound is checked in `_skip_hostname()` at start of\n             * loop */\n            continue;\n        }\n        if (((addrlen != INADDRSZ) && (family == AF_INET)) ||\n            ((addrlen != IN6ADDRSZ) && (family == AF_INET6)) ||\n            ((addrlen != IN6ADDRSZ) && (addrlen != INADDRSZ) &&\n             (family == AF_UNSPEC))) {\n            return -EBADMSG;\n        }\n        bufpos += RR_RDLENGTH_LENGTH;\n        if ((bufpos + addrlen) >= buflim) {\n            return -EBADMSG;\n        }\n\n        memcpy(addr_out, bufpos, addrlen);\n        return addrlen;\n    }\n\n    return -1;\n}",
  "abstract_func": "static int _parse_dns_reply(uint8_t *VAR_0, size_t VAR_1, void* VAR_2, int VAR_3)\n{\n    const uint8_t *VAR_4 = VAR_0 + VAR_1;\n    sock_dns_hdr_t *VAR_5 = (sock_dns_hdr_t*) VAR_0;\n    uint8_t *VAR_6 = VAR_0 + sizeof(*VAR_5);\n\n    /* COMMENT_0 */\n    for (unsigned VAR_7 = 0; VAR_7 < ntohs(VAR_5->qdcount); VAR_7++) {\n        ssize_t VAR_8 = _skip_hostname(VAR_0, VAR_1, VAR_6);\n        if (VAR_8 < 0) {\n            return VAR_8;\n        }\n        VAR_6 += VAR_8;\n        /* COMMENT_1 */\n        VAR_6 += (VAR_9 + VAR_10);\n    }\n\n    for (unsigned VAR_7 = 0; VAR_7 < ntohs(VAR_5->ancount); VAR_7++) {\n        ssize_t VAR_8 = _skip_hostname(VAR_0, VAR_1, VAR_6);\n        if (VAR_8 < 0) {\n            return VAR_8;\n        }\n        VAR_6 += VAR_8;\n        if ((VAR_6 + VAR_9 + VAR_10 + VAR_11) >= VAR_4) {\n            return -VAR_12;\n        }\n        uint16_t VAR_13 = ntohs(_get_short(VAR_6));\n        VAR_6 += VAR_9;\n        uint16_t VAR_14 = ntohs(_get_short(VAR_6));\n        VAR_6 += VAR_10;\n        VAR_6 += VAR_11; /* COMMENT_2 */\n\n        unsigned VAR_15 = ntohs(_get_short(VAR_6));\n        /* COMMENT_3 */\n        if ((VAR_14 != VAR_16) ||\n                ((VAR_13 == VAR_17) && (VAR_3 == VAR_18)) ||\n                ((VAR_13 == VAR_19) && (VAR_3 == VAR_20)) ||\n                ! ((VAR_13 == VAR_17) || ((VAR_13 == VAR_19))\n                    )) {\n            if (VAR_15 > VAR_1) {\n                /* COMMENT_4 */\n                return -VAR_12;\n            }\n            VAR_6 += VAR_15;\n            /* COMMENT_5 */\n                      \n            continue;\n        }\n        if (((VAR_15 != VAR_21) && (VAR_3 == VAR_20)) ||\n            ((VAR_15 != VAR_22) && (VAR_3 == VAR_18)) ||\n            ((VAR_15 != VAR_22) && (VAR_15 != VAR_21) &&\n             (VAR_3 == VAR_23))) {\n            return -VAR_12;\n        }\n        VAR_6 += VAR_24;\n        if ((VAR_6 + VAR_15) >= VAR_4) {\n            return -VAR_12;\n        }\n\n        memcpy(VAR_2, VAR_6, VAR_15);\n        return VAR_15;\n    }\n\n    return -1;\n}",
  "func_graph_path": "RIOT-OS/RIOT/8ad5e44cbaea616885bfc5cb032d911089383fe5/dns.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -11,7 +11,8 @@\n             return tmp;\n         }\n         bufpos += tmp;\n-        bufpos += 4;    /* skip type and class of query */\n+        /* skip type and class of query */\n+        bufpos += (RR_TYPE_LENGTH + RR_CLASS_LENGTH);\n     }\n \n     for (unsigned n = 0; n < ntohs(hdr->ancount); n++) {\n@@ -20,14 +21,14 @@\n             return tmp;\n         }\n         bufpos += tmp;\n-        if ((bufpos + 2 + 2 + 4) >= buflim) {\n+        if ((bufpos + RR_TYPE_LENGTH + RR_CLASS_LENGTH + RR_TTL_LENGTH) >= buflim) {\n             return -EBADMSG;\n         }\n         uint16_t _type = ntohs(_get_short(bufpos));\n-        bufpos += 2;\n+        bufpos += RR_TYPE_LENGTH;\n         uint16_t class = ntohs(_get_short(bufpos));\n-        bufpos += 2;\n-        bufpos += 4; /* skip ttl */\n+        bufpos += RR_CLASS_LENGTH;\n+        bufpos += RR_TTL_LENGTH; /* skip ttl */\n \n         unsigned addrlen = ntohs(_get_short(bufpos));\n         /* skip unwanted answers */\n@@ -51,7 +52,7 @@\n              (family == AF_UNSPEC))) {\n             return -EBADMSG;\n         }\n-        bufpos += 2;\n+        bufpos += RR_RDLENGTH_LENGTH;\n         if ((bufpos + addrlen) >= buflim) {\n             return -EBADMSG;\n         }",
  "diff_line_info": {
    "deleted_lines": [
      "        bufpos += 4;    /* skip type and class of query */",
      "        if ((bufpos + 2 + 2 + 4) >= buflim) {",
      "        bufpos += 2;",
      "        bufpos += 2;",
      "        bufpos += 4; /* skip ttl */",
      "        bufpos += 2;"
    ],
    "added_lines": [
      "        /* skip type and class of query */",
      "        bufpos += (RR_TYPE_LENGTH + RR_CLASS_LENGTH);",
      "        if ((bufpos + RR_TYPE_LENGTH + RR_CLASS_LENGTH + RR_TTL_LENGTH) >= buflim) {",
      "        bufpos += RR_TYPE_LENGTH;",
      "        bufpos += RR_CLASS_LENGTH;",
      "        bufpos += RR_TTL_LENGTH; /* skip ttl */",
      "        bufpos += RR_RDLENGTH_LENGTH;"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/RIOT-OS/RIOT/pull/10740",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/RIOT-OS/RIOT/pull/10740: 403 Client Error: Forbidden for url: https://api.github.com/repos/RIOT-OS/RIOT/pulls/10740",
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Defect Remediation & Feature Upgrades  \n**Confidence:** 0.9  \n\nThe patch addresses a crash issue in DNS parsing by replacing magic numbers with defined constants, improving code readability and maintainability, without directly fixing a security vulnerability. The changes are consistent with the commit message's focus on code quality."
}