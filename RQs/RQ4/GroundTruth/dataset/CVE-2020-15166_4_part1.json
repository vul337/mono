{
  "cve_id": "CVE-2020-15166",
  "cwe_ids": [
    "CWE-400"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "zeromq/libzmq",
  "commit_msg": "problem: zeromq connects peer before handshake is completed\n\nSolution: delay connecting the peer pipe until the handshake is completed",
  "commit_hash": "e7f0090b161ce6344f6bd35009816a925c070b09",
  "git_url": "https://github.com/zeromq/libzmq/commit/e7f0090b161ce6344f6bd35009816a925c070b09",
  "file_path": "src/stream_engine_base.cpp",
  "func_name": "zmq::stream_engine_base_t::stream_engine_base_t",
  "func_before": "zmq::stream_engine_base_t::stream_engine_base_t (\n  fd_t fd_,\n  const options_t &options_,\n  const endpoint_uri_pair_t &endpoint_uri_pair_) :\n    _options (options_),\n    _inpos (NULL),\n    _insize (0),\n    _decoder (NULL),\n    _outpos (NULL),\n    _outsize (0),\n    _encoder (NULL),\n    _mechanism (NULL),\n    _next_msg (NULL),\n    _process_msg (NULL),\n    _metadata (NULL),\n    _input_stopped (false),\n    _output_stopped (false),\n    _endpoint_uri_pair (endpoint_uri_pair_),\n    _has_handshake_timer (false),\n    _has_ttl_timer (false),\n    _has_timeout_timer (false),\n    _has_heartbeat_timer (false),\n    _peer_address (get_peer_address (fd_)),\n    _s (fd_),\n    _handle (static_cast<handle_t> (NULL)),\n    _plugged (false),\n    _handshaking (true),\n    _io_error (false),\n    _session (NULL),\n    _socket (NULL)\n{\n    const int rc = _tx_msg.init ();\n    errno_assert (rc == 0);\n\n    //  Put the socket into non-blocking mode.\n    unblock_socket (_s);\n}",
  "abstract_func_before": "zmq::stream_engine_base_t::stream_engine_base_t (\n  fd_t VAR_0,\n  const options_t &VAR_1,\n  const endpoint_uri_pair_t &VAR_2) :\n    _options (VAR_1),\n    _inpos (NULL),\n    _insize (0),\n    _decoder (NULL),\n    _outpos (NULL),\n    _outsize (0),\n    _encoder (NULL),\n    _mechanism (NULL),\n    _next_msg (NULL),\n    _process_msg (NULL),\n    _metadata (NULL),\n    _input_stopped (false),\n    _output_stopped (false),\n    _endpoint_uri_pair (VAR_2),\n    _has_handshake_timer (false),\n    _has_ttl_timer (false),\n    _has_timeout_timer (false),\n    _has_heartbeat_timer (false),\n    _peer_address (get_peer_address (VAR_0)),\n    _s (VAR_0),\n    _handle (VAR_3<handle_t> (NULL)),\n    _plugged (false),\n    _handshaking (true),\n    _io_error (false),\n    _session (NULL),\n    _socket (NULL)\n{\n    const int VAR_4 = VAR_5.init ();\n    errno_assert (VAR_4 == 0);\n\n    /* COMMENT_0 */\n    unblock_socket (VAR_6);\n}",
  "func_graph_path_before": "zeromq/libzmq/e7f0090b161ce6344f6bd35009816a925c070b09/stream_engine_base.cpp/vul/before/1.json",
  "func": "zmq::stream_engine_base_t::stream_engine_base_t (\n  fd_t fd_,\n  const options_t &options_,\n  const endpoint_uri_pair_t &endpoint_uri_pair_,\n  bool has_handshake_stage_) :\n    _options (options_),\n    _inpos (NULL),\n    _insize (0),\n    _decoder (NULL),\n    _outpos (NULL),\n    _outsize (0),\n    _encoder (NULL),\n    _mechanism (NULL),\n    _next_msg (NULL),\n    _process_msg (NULL),\n    _metadata (NULL),\n    _input_stopped (false),\n    _output_stopped (false),\n    _endpoint_uri_pair (endpoint_uri_pair_),\n    _has_handshake_timer (false),\n    _has_ttl_timer (false),\n    _has_timeout_timer (false),\n    _has_heartbeat_timer (false),\n    _peer_address (get_peer_address (fd_)),\n    _s (fd_),\n    _handle (static_cast<handle_t> (NULL)),\n    _plugged (false),\n    _handshaking (true),\n    _io_error (false),\n    _session (NULL),\n    _socket (NULL),\n    _has_handshake_stage (has_handshake_stage_)\n{\n    const int rc = _tx_msg.init ();\n    errno_assert (rc == 0);\n\n    //  Put the socket into non-blocking mode.\n    unblock_socket (_s);\n}",
  "abstract_func": "zmq::stream_engine_base_t::stream_engine_base_t (\n  fd_t VAR_0,\n  const options_t &VAR_1,\n  const endpoint_uri_pair_t &VAR_2,\n  bool VAR_3) :\n    _options (VAR_1),\n    _inpos (NULL),\n    _insize (0),\n    _decoder (NULL),\n    _outpos (NULL),\n    _outsize (0),\n    _encoder (NULL),\n    _mechanism (NULL),\n    _next_msg (NULL),\n    _process_msg (NULL),\n    _metadata (NULL),\n    _input_stopped (false),\n    _output_stopped (false),\n    _endpoint_uri_pair (VAR_2),\n    _has_handshake_timer (false),\n    _has_ttl_timer (false),\n    _has_timeout_timer (false),\n    _has_heartbeat_timer (false),\n    _peer_address (get_peer_address (VAR_0)),\n    _s (VAR_0),\n    _handle (VAR_4<handle_t> (NULL)),\n    _plugged (false),\n    _handshaking (true),\n    _io_error (false),\n    _session (NULL),\n    _socket (NULL),\n    _has_handshake_stage (VAR_3)\n{\n    const int VAR_5 = VAR_6.init ();\n    errno_assert (VAR_5 == 0);\n\n    /* COMMENT_0 */\n    unblock_socket (VAR_7);\n}",
  "func_graph_path": "zeromq/libzmq/e7f0090b161ce6344f6bd35009816a925c070b09/stream_engine_base.cpp/vul/after/1.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,7 +1,8 @@\n zmq::stream_engine_base_t::stream_engine_base_t (\n   fd_t fd_,\n   const options_t &options_,\n-  const endpoint_uri_pair_t &endpoint_uri_pair_) :\n+  const endpoint_uri_pair_t &endpoint_uri_pair_,\n+  bool has_handshake_stage_) :\n     _options (options_),\n     _inpos (NULL),\n     _insize (0),\n@@ -27,7 +28,8 @@\n     _handshaking (true),\n     _io_error (false),\n     _session (NULL),\n-    _socket (NULL)\n+    _socket (NULL),\n+    _has_handshake_stage (has_handshake_stage_)\n {\n     const int rc = _tx_msg.init ();\n     errno_assert (rc == 0);",
  "diff_line_info": {
    "deleted_lines": [
      "  const endpoint_uri_pair_t &endpoint_uri_pair_) :",
      "    _socket (NULL)"
    ],
    "added_lines": [
      "  const endpoint_uri_pair_t &endpoint_uri_pair_,",
      "  bool has_handshake_stage_) :",
      "    _socket (NULL),",
      "    _has_handshake_stage (has_handshake_stage_)"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/zeromq/libzmq/pull/3913",
  "description": {
    "pr_info": {
      "title": "problem: zeromq connects peer before handshake is complete",
      "number": 3913
    },
    "comment": [
      "Solution: delay connecting the peer pipe until the handshake is complete",
      "@bluca PR is ready ",
      "Thanks!"
    ]
  },
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.85,
  "Bug Filter Response": "**Final Classification:** Defect Remediation & Feature Upgrades  \n**Confidence:** 0.85\n\nStep-by-step explanation:\n\n1. **Problem Identification:** The commit addresses a zeromq issue where the peer connects before the handshake is complete, indicating a bug fix.\n2. **Code Changes:** The constructor is modified to include a handshake stage condition.\n3. **No Security Indicators:** No mention of security terms or CVEs.\n4. **Classification:** Falls under Defect Remediation as it fixes a core functionality bug.\n5. **Confidence:** High (0.85) due to clear issue and code alignment without security context."
}