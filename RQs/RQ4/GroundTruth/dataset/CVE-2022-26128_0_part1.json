{
  "cve_id": "CVE-2022-26128",
  "cwe_ids": [
    "CWE-119",
    "CWE-1284"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "FRRouting/frr",
  "commit_msg": "babeld: fix #10502 #10503 by repairing the checks on length\n\nThis patch repairs the checking conditions on length in four functions:\nbabel_packet_examin, parse_hello_subtlv, parse_ihu_subtlv, and parse_update_subtlv\n\nSigned-off-by: qingkaishi <qingkaishi@gmail.com>",
  "commit_hash": "c3793352a8d76d2eee1edc38a9a16c1c8a6573f4",
  "git_url": "https://github.com/FRRouting/frr/commit/c3793352a8d76d2eee1edc38a9a16c1c8a6573f4",
  "file_path": "babeld/message.c",
  "func_name": "parse_update_subtlv",
  "func_before": "static void\nparse_update_subtlv(const unsigned char *a, int alen,\n                    unsigned char *channels)\n{\n    int type, len, i = 0;\n\n    while(i < alen) {\n        type = a[i];\n        if(type == SUBTLV_PAD1) {\n            i++;\n            continue;\n        }\n\n        if(i + 1 > alen) {\n            flog_err(EC_BABEL_PACKET, \"Received truncated attributes.\");\n            return;\n        }\n        len = a[i + 1];\n        if(i + len > alen) {\n            flog_err(EC_BABEL_PACKET, \"Received truncated attributes.\");\n            return;\n        }\n\n        if(type == SUBTLV_PADN) {\n            /* Nothing. */\n        } else if(type == SUBTLV_DIVERSITY) {\n            if(len > DIVERSITY_HOPS) {\n                flog_err(EC_BABEL_PACKET,\n\t\t\t  \"Received overlong channel information (%d > %d).n\",\n                          len, DIVERSITY_HOPS);\n                len = DIVERSITY_HOPS;\n            }\n            if(memchr(a + i + 2, 0, len) != NULL) {\n                /* 0 is reserved. */\n                flog_err(EC_BABEL_PACKET, \"Channel information contains 0!\");\n                return;\n            }\n            memset(channels, 0, DIVERSITY_HOPS);\n            memcpy(channels, a + i + 2, len);\n        } else {\n            debugf(BABEL_DEBUG_COMMON,\n                   \"Received unknown route attribute %d.\", type);\n        }\n\n        i += len + 2;\n    }\n}",
  "abstract_func_before": "static void\nparse_update_subtlv(const unsigned char *VAR_0, int VAR_1,\n                    unsigned char *VAR_2)\n{\n    int VAR_3, VAR_4, VAR_5 = 0;\n\n    while(VAR_5 < VAR_1) {\n        VAR_3 = VAR_0[VAR_5];\n        if(VAR_3 == VAR_6) {\n            VAR_5++;\n            continue;\n        }\n\n        if(VAR_5 + 1 > VAR_1) {\n            flog_err(VAR_7, \"Received truncated attributes.\");\n            return;\n        }\n        VAR_4 = VAR_0[VAR_5 + 1];\n        if(VAR_5 + VAR_4 > VAR_1) {\n            flog_err(VAR_7, \"Received truncated attributes.\");\n            return;\n        }\n\n        if(VAR_3 == VAR_8) {\n            /* COMMENT_0 */\n        } else if(VAR_3 == VAR_9) {\n            if(VAR_4 > VAR_10) {\n                flog_err(VAR_7,\n\t\t\t  \"Received overlong channel information (%d > %d).n\",\n                          VAR_4, VAR_10);\n                VAR_4 = VAR_10;\n            }\n            if(memchr(VAR_0 + VAR_5 + 2, 0, VAR_4) != NULL) {\n                /* COMMENT_1 */\n                flog_err(VAR_7, \"Channel information contains 0!\");\n                return;\n            }\n            memset(VAR_2, 0, VAR_10);\n            memcpy(VAR_2, VAR_0 + VAR_5 + 2, VAR_4);\n        } else {\n            debugf(VAR_11,\n                   \"Received unknown route attribute %d.\", VAR_3);\n        }\n\n        VAR_5 += VAR_4 + 2;\n    }\n}",
  "func_graph_path_before": "FRRouting/frr/c3793352a8d76d2eee1edc38a9a16c1c8a6573f4/message.c/vul/before/1.json",
  "func": "static void\nparse_update_subtlv(const unsigned char *a, int alen,\n                    unsigned char *channels)\n{\n    int type, len, i = 0;\n\n    while(i < alen) {\n        type = a[i];\n        if(type == SUBTLV_PAD1) {\n            i++;\n            continue;\n        }\n\n        if(i + 1 >= alen) {\n            flog_err(EC_BABEL_PACKET, \"Received truncated attributes.\");\n            return;\n        }\n        len = a[i + 1];\n        if(i + len + 2 > alen) {\n            flog_err(EC_BABEL_PACKET, \"Received truncated attributes.\");\n            return;\n        }\n\n        if(type == SUBTLV_PADN) {\n            /* Nothing. */\n        } else if(type == SUBTLV_DIVERSITY) {\n            if(len > DIVERSITY_HOPS) {\n                flog_err(EC_BABEL_PACKET,\n\t\t\t  \"Received overlong channel information (%d > %d).n\",\n                          len, DIVERSITY_HOPS);\n                len = DIVERSITY_HOPS;\n            }\n            if(memchr(a + i + 2, 0, len) != NULL) {\n                /* 0 is reserved. */\n                flog_err(EC_BABEL_PACKET, \"Channel information contains 0!\");\n                return;\n            }\n            memset(channels, 0, DIVERSITY_HOPS);\n            memcpy(channels, a + i + 2, len);\n        } else {\n            debugf(BABEL_DEBUG_COMMON,\n                   \"Received unknown route attribute %d.\", type);\n        }\n\n        i += len + 2;\n    }\n}",
  "abstract_func": "static void\nparse_update_subtlv(const unsigned char *VAR_0, int VAR_1,\n                    unsigned char *VAR_2)\n{\n    int VAR_3, VAR_4, VAR_5 = 0;\n\n    while(VAR_5 < VAR_1) {\n        VAR_3 = VAR_0[VAR_5];\n        if(VAR_3 == VAR_6) {\n            VAR_5++;\n            continue;\n        }\n\n        if(VAR_5 + 1 >= VAR_1) {\n            flog_err(VAR_7, \"Received truncated attributes.\");\n            return;\n        }\n        VAR_4 = VAR_0[VAR_5 + 1];\n        if(VAR_5 + VAR_4 + 2 > VAR_1) {\n            flog_err(VAR_7, \"Received truncated attributes.\");\n            return;\n        }\n\n        if(VAR_3 == VAR_8) {\n            /* COMMENT_0 */\n        } else if(VAR_3 == VAR_9) {\n            if(VAR_4 > VAR_10) {\n                flog_err(VAR_7,\n\t\t\t  \"Received overlong channel information (%d > %d).n\",\n                          VAR_4, VAR_10);\n                VAR_4 = VAR_10;\n            }\n            if(memchr(VAR_0 + VAR_5 + 2, 0, VAR_4) != NULL) {\n                /* COMMENT_1 */\n                flog_err(VAR_7, \"Channel information contains 0!\");\n                return;\n            }\n            memset(VAR_2, 0, VAR_10);\n            memcpy(VAR_2, VAR_0 + VAR_5 + 2, VAR_4);\n        } else {\n            debugf(VAR_11,\n                   \"Received unknown route attribute %d.\", VAR_3);\n        }\n\n        VAR_5 += VAR_4 + 2;\n    }\n}",
  "func_graph_path": "FRRouting/frr/c3793352a8d76d2eee1edc38a9a16c1c8a6573f4/message.c/vul/after/1.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -11,12 +11,12 @@\n             continue;\n         }\n \n-        if(i + 1 > alen) {\n+        if(i + 1 >= alen) {\n             flog_err(EC_BABEL_PACKET, \"Received truncated attributes.\");\n             return;\n         }\n         len = a[i + 1];\n-        if(i + len > alen) {\n+        if(i + len + 2 > alen) {\n             flog_err(EC_BABEL_PACKET, \"Received truncated attributes.\");\n             return;\n         }",
  "diff_line_info": {
    "deleted_lines": [
      "        if(i + 1 > alen) {",
      "        if(i + len > alen) {"
    ],
    "added_lines": [
      "        if(i + 1 >= alen) {",
      "        if(i + len + 2 > alen) {"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/FRRouting/frr/pull/10504",
  "description": {
    "pr_info": {
      "title": "babeld: fix the checks for truncated packets",
      "number": 10504
    },
    "comment": [
      "This patch repairs the checking conditions on length in four functions:\r\nbabel_packet_examin, parse_hello_subtlv, parse_ihu_subtlv, and parse_update_subtlv\r\nThis patch fixes #10502 and fixes #10503\r\n\r\nSigned-off-by: qingkaishi <qingkaishi@gmail.com>",
      "<details><summary>Continuous Integration Result: SUCCESSFUL</summary>\n\n#  Continuous Integration Result: SUCCESSFUL\n\nCongratulations, this patch passed basic tests\n\nTested-by: NetDEF / OpenSourceRouting.org CI System\n\nCI System Testrun URL: https://ci1.netdef.org/browse/FRR-PULLREQ2-3236/\n\nThis is a comment from an automated CI system.\nFor questions and feedback in regards to this CI system, please feel free to email\nMartin Winter - mwinter (at) opensourcerouting.org.\n\n\n</details>",
      "# Continuous Integration Result: SUCCESSFUL\n\nCongratulations, this patch passed basic tests\n\nTested-by: NetDEF / OpenSourceRouting.org CI System\n\nCI System Testrun URL: https://ci1.netdef.org/browse/FRR-PULLREQ2-3237/\n\nThis is a comment from an automated CI system.\nFor questions and feedback in regards to this CI system, please feel free to email\nMartin Winter - mwinter (at) opensourcerouting.org.\n\n\n",
      "@Mergifyio backport dev/8.2",
      "> backport dev/8.2\n\n#### ðŸŸ  Waiting for conditions to match\n\n<details>\n\n- [ ] `merged` [:pushpin: backport requirement]\n\n\n</details>\n\n\n<!--\nDO NOT EDIT\n-*- Mergify Payload -*-\n{\"command\": \"backport dev/8.2\", \"conclusion\": null}\n-*- Mergify Payload End -*-\n-->\n",
      "> backport dev/8.2\n\n#### âœ… Backports have been created\n\n<details>\n\n* [#10528 babeld: fix the checks for truncated packets (backport #10504)](https://github.com/FRRouting/frr/pull/10528) has been created for branch `dev/8.2`\n\n</details>\n\n\n<!--\nDO NOT EDIT\n-*- Mergify Payload -*-\n{\"command\": \"backport dev/8.2\", \"conclusion\": \"success\"}\n-*- Mergify Payload End -*-\n-->\n"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Step-by-Step Explanation:**\n\n1. **Step 1: Input Analysis**  \n   - Commit message indicates fixing issues with length checks in specific functions.\n   - Vulnerability description aligns, mentioning the same functions and issues.\n   - Code changes adjust conditions to prevent buffer overflows.\n\n2. **Step 2: Consistency Check**  \n   - The changes in code are consistent with the commit message, ensuring correct boundary checks.\n\n3. **Step 3: Purpose Evaluation**  \n   - Modifies core logic to fix bugs that could lead to security issues.\n\n4. **Step 4: Security Vulnerability Assessment**  \n   - Involves fixing buffer overflow conditions, which are security weaknesses.\n   - These issues can be exploited, hence a security fix.\n\n5. **Step 5: Non-Security Classification**  \n   - Not applicable since it's a security fix.\n\n6. **Step 6: Confidence Scoring**  \n   - Clear evidence of security-related fixes with direct code changes. High confidence.\n\n**Final Classification:** Security Vulnerability Fix; **Confidence:** 1.0"
}