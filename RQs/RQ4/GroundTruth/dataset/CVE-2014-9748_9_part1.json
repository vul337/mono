{
  "cve_id": "CVE-2014-9748",
  "cwe_ids": [
    "CWE-362"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "libuv",
  "commit_msg": "win: fix unsavory rwlock fallback implementation\n\nBefore this patch an uv_mutex_t (backed by a critical section) could be\nreleased by a tread different from the thread that acquired it, which is\nnot allowed. This is fixed by using a semaphore instead.\n\nNote that the affected code paths were used on Windows XP and Windows\nServer 2003 only.\n\nFixes: https://github.com/libuv/libuv/issues/515\nPR-URL: https://github.com/libuv/libuv/pull/516\nReviewed-By: Ben Noordhuis <info@bnoordhuis.nl>\nReviewed-By: Saúl Ibarra Corretgé <saghul@gmail.com>",
  "commit_hash": "3eb6764acd2d708f6873c177a77f9bef3b266fa9",
  "git_url": "https://github.com/libuv/libuv/commit/3eb6764acd2d708f6873c177a77f9bef3b266fa9",
  "file_path": "src/win/thread.c",
  "func_name": "uv__rwlock_fallback_trywrlock",
  "func_before": "static int uv__rwlock_fallback_trywrlock(uv_rwlock_t* rwlock) {\n  return uv_mutex_trylock(&rwlock->fallback_.write_mutex_);\n}",
  "abstract_func_before": "static int uv__rwlock_fallback_trywrlock(uv_rwlock_t* VAR_0) {\n  return uv_mutex_trylock(&VAR_0->fallback_.write_mutex_);\n}",
  "func_graph_path_before": "libuv/3eb6764acd2d708f6873c177a77f9bef3b266fa9/thread.c/vul/before/1.json",
  "func": "static int uv__rwlock_fallback_trywrlock(uv_rwlock_t* rwlock) {\n  DWORD r = WaitForSingleObject(rwlock->fallback_.write_lock_.sem, 0);\n  if (r == WAIT_OBJECT_0)\n    return 0;\n  else if (r == WAIT_TIMEOUT)\n    return UV_EAGAIN;\n  else if (r == WAIT_FAILED)\n    return uv_translate_sys_error(GetLastError());\n  else\n    return UV_EIO;\n}",
  "abstract_func": "static int uv__rwlock_fallback_trywrlock(uv_rwlock_t* VAR_0) {\n  DWORD VAR_1 = WaitForSingleObject(VAR_0->fallback_.write_lock_.sem, 0);\n  if (VAR_1 == VAR_2)\n    return 0;\n  else if (VAR_1 == VAR_3)\n    return VAR_4;\n  else if (VAR_1 == VAR_5)\n    return uv_translate_sys_error(GetLastError());\n  else\n    return VAR_6;\n}",
  "func_graph_path": "libuv/3eb6764acd2d708f6873c177a77f9bef3b266fa9/thread.c/vul/after/1.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,3 +1,11 @@\n static int uv__rwlock_fallback_trywrlock(uv_rwlock_t* rwlock) {\n-  return uv_mutex_trylock(&rwlock->fallback_.write_mutex_);\n+  DWORD r = WaitForSingleObject(rwlock->fallback_.write_lock_.sem, 0);\n+  if (r == WAIT_OBJECT_0)\n+    return 0;\n+  else if (r == WAIT_TIMEOUT)\n+    return UV_EAGAIN;\n+  else if (r == WAIT_FAILED)\n+    return uv_translate_sys_error(GetLastError());\n+  else\n+    return UV_EIO;\n }",
  "diff_line_info": {
    "deleted_lines": [
      "  return uv_mutex_trylock(&rwlock->fallback_.write_mutex_);"
    ],
    "added_lines": [
      "  DWORD r = WaitForSingleObject(rwlock->fallback_.write_lock_.sem, 0);",
      "  if (r == WAIT_OBJECT_0)",
      "    return 0;",
      "  else if (r == WAIT_TIMEOUT)",
      "    return UV_EAGAIN;",
      "  else if (r == WAIT_FAILED)",
      "    return uv_translate_sys_error(GetLastError());",
      "  else",
      "    return UV_EIO;"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/libuv/libuv/pull/516",
  "description": {
    "pr_info": {
      "title": "win: fix unsavory rwlock fallback implementation",
      "number": 516
    },
    "comment": [
      "Before this patch an uv_mutex_t (backed by a critical section) could be\nreleased by a tread different from the thread that acquired it, which is\nnot allowed. This is fixed by using a semaphore instead.\n\nBUG: https://github.com/libuv/libuv/issues/515\nREF: https://github.com/nodejs/node/pull/2723\n\nR=@bnoordhuis\nR=@saghul\n",
      "LGTM, sans the c++ style comments, and a couple of small questions.\n",
      "Fixed the comment style and the typos.\n\n@saghul, let me know what you want to do with the WaitForSingleObject() failure modes. I think it's fine as it is, all those \"failure\" scenarios are purely hypothetical anyway. My thinking was that I would return a mapped error from every function that actually returns a value, and abort (by means of `uv_fatal_error`) in functions that return void.\n\ncc @bnoordhuis \n",
      "LGTM. Let's leave it as is then.\n"
    ]
  },
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Defect Remediation & Feature Upgrades;  \n**Confidence:** 0.9  \n\nThe patch addresses a concurrency issue where a mutex could be released by a different thread, which is a bugfix improving core functionality without security implications. \n\n---\n\n**Final Classification:** Defect Remediation & Feature Upgrades;  \n**Confidence:** 0.9"
}