{
  "cve_id": "CVE-2020-36640",
  "cwe_ids": [
    "CWE-611"
  ],
  "cvss_vector": "AV:A/AC:M/Au:S/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "bonitasoft/bonita-connector-webservice",
  "commit_msg": "fix(vulnerabilities): fix XXE attacks vulnerabilities and other code smell (#17)\n\n* Access to external entities and network access should always be\r\ndisable to avoid XXS attacks vulnerabilities.\r\n* Log error properly\r\n* refactor logger name to be compliant with java naming conventions",
  "commit_hash": "a12ad691c05af19e9061d7949b6b828ce48815d5",
  "git_url": "https://github.com/bonitasoft/bonita-connector-webservice/commit/a12ad691c05af19e9061d7949b6b828ce48815d5",
  "file_path": "src/main/java/org/bonitasoft/connectors/ws/SecureWSConnector.java",
  "func_name": "configureProxy",
  "func_before": "private void configureProxy() {\n        saveProxyConfiguration = saveProxyConfiguration();\n        final String host = (String) getInputParameter(PROXY_HOST);\n        if (host == null || host.isEmpty()) {\n            return;\n        }\n        LOGGER.info(PROXY_HOST + \" \" + host);\n        final String protocol = (String) getInputParameter(PROXY_PROTOCOL);\n        LOGGER.info(PROXY_PROTOCOL + \" \" + protocol);\n        final String port = (String) getInputParameter(PROXY_PORT);\n        LOGGER.info(PROXY_PORT + \" \" + port);\n\n        if (SOCKS.equals(protocol)) {\n            System.setProperty(\"socksProxyHost\", host);\n            LOGGER.info(\"Setting environment variable: socksProxyHost=\" + host);\n            System.setProperty(\"socksProxyPort\", port);\n            LOGGER.info(\"Setting environment variable: socksProxyPort=\" + port);\n        } else {\n            final String hostKey = String.format(\"%s.proxyHost\", protocol.toLowerCase());\n            System.setProperty(hostKey, host);\n            LOGGER.info(\"Setting environment variable: \" + hostKey + \"=\" + host);\n            final String portKey = String.format(\"%s.proxyPort\", protocol.toLowerCase());\n            System.setProperty(portKey, port);\n            LOGGER.info(\"Setting environment variable: \" + portKey + \"=\" + port);\n        }\n\n        final String user = (String) getInputParameter(PROXY_USER);\n        LOGGER.info(PROXY_USER + \" \" + user);\n        final String password = (String) getInputParameter(PROXY_PASSWORD);\n        LOGGER.info(PROXY_PASSWORD + \" ********\");\n        if (user != null && !user.isEmpty()) {\n            Authenticator.setDefault(new Authenticator() {\n\n                @Override\n                protected PasswordAuthentication getPasswordAuthentication() {\n                    return new PasswordAuthentication(user,\n                            password != null ? password.toCharArray() : \"\".toCharArray());\n                }\n\n            });\n        }\n\n    }",
  "abstract_func_before": "private void configureProxy() {\n        VAR_0 = saveProxyConfiguration();\n        final String VAR_1 = (String) getInputParameter(VAR_2);\n        if (VAR_1 == null || VAR_1.isEmpty()) {\n            return;\n        }\n        VAR_3.info(VAR_2 + \" \" + VAR_1);\n        final String VAR_4 = (String) getInputParameter(VAR_5);\n        VAR_3.info(VAR_5 + \" \" + VAR_4);\n        final String VAR_6 = (String) getInputParameter(VAR_7);\n        VAR_3.info(VAR_7 + \" \" + VAR_6);\n\n        if (VAR_8.equals(VAR_4)) {\n            VAR_9.setProperty(\"socksProxyHost\", VAR_1);\n            VAR_3.info(\"Setting environment variable: socksProxyHost=\" + VAR_1);\n            VAR_9.setProperty(\"socksProxyPort\", VAR_6);\n            VAR_3.info(\"Setting environment variable: socksProxyPort=\" + VAR_6);\n        } else {\n            final String VAR_10 = VAR_11.format(\"%s.proxyHost\", VAR_4.toLowerCase());\n            VAR_9.setProperty(VAR_10, VAR_1);\n            VAR_3.info(\"Setting environment variable: \" + VAR_10 + \"=\" + VAR_1);\n            final String VAR_12 = VAR_11.format(\"%s.proxyPort\", VAR_4.toLowerCase());\n            VAR_9.setProperty(VAR_12, VAR_6);\n            VAR_3.info(\"Setting environment variable: \" + VAR_12 + \"=\" + VAR_6);\n        }\n\n        final String VAR_13 = (String) getInputParameter(VAR_14);\n        VAR_3.info(VAR_14 + \" \" + VAR_13);\n        final String VAR_15 = (String) getInputParameter(VAR_16);\n        VAR_3.info(VAR_16 + \" ********\");\n        if (VAR_13 != null && !VAR_13.isEmpty()) {\n            VAR_17.setDefault(new Authenticator() {\n\n                @Override\n                protected PasswordAuthentication getPasswordAuthentication() {\n                    return new PasswordAuthentication(VAR_13,\n                            VAR_15 != null ? VAR_15.toCharArray() : \"\".toCharArray());\n                }\n\n            });\n        }\n\n    }",
  "func_graph_path_before": "bonitasoft/bonita-connector-webservice/a12ad691c05af19e9061d7949b6b828ce48815d5/SecureWSConnector.java/vul/before/4.json",
  "func": "private void configureProxy() {\n        saveProxyConfiguration = saveProxyConfiguration();\n        final String host = (String) getInputParameter(PROXY_HOST);\n        if (host == null || host.isEmpty()) {\n            return;\n        }\n        logger.info(PROXY_HOST + \" \" + host);\n        final String protocol = (String) getInputParameter(PROXY_PROTOCOL);\n        logger.info(PROXY_PROTOCOL + \" \" + protocol);\n        final String port = (String) getInputParameter(PROXY_PORT);\n        logger.info(PROXY_PORT + \" \" + port);\n\n        if (SOCKS.equals(protocol)) {\n            System.setProperty(\"socksProxyHost\", host);\n            logger.info(\"Setting environment variable: socksProxyHost=\" + host);\n            System.setProperty(\"socksProxyPort\", port);\n            logger.info(\"Setting environment variable: socksProxyPort=\" + port);\n        } else {\n            final String hostKey = String.format(\"%s.proxyHost\", protocol.toLowerCase());\n            System.setProperty(hostKey, host);\n            logger.info(\"Setting environment variable: \" + hostKey + \"=\" + host);\n            final String portKey = String.format(\"%s.proxyPort\", protocol.toLowerCase());\n            System.setProperty(portKey, port);\n            logger.info(\"Setting environment variable: \" + portKey + \"=\" + port);\n        }\n\n        final String user = (String) getInputParameter(PROXY_USER);\n        logger.info(PROXY_USER + \" \" + user);\n        final String password = (String) getInputParameter(PROXY_PASSWORD);\n        logger.info(PROXY_PASSWORD + \" ********\");\n        if (user != null && !user.isEmpty()) {\n            Authenticator.setDefault(new Authenticator() {\n\n                @Override\n                protected PasswordAuthentication getPasswordAuthentication() {\n                    return new PasswordAuthentication(user,\n                            password != null ? password.toCharArray() : \"\".toCharArray());\n                }\n\n            });\n        }\n\n    }",
  "abstract_func": "private void configureProxy() {\n        VAR_0 = saveProxyConfiguration();\n        final String VAR_1 = (String) getInputParameter(VAR_2);\n        if (VAR_1 == null || VAR_1.isEmpty()) {\n            return;\n        }\n        VAR_3.info(VAR_2 + \" \" + VAR_1);\n        final String VAR_4 = (String) getInputParameter(VAR_5);\n        VAR_3.info(VAR_5 + \" \" + VAR_4);\n        final String VAR_6 = (String) getInputParameter(VAR_7);\n        VAR_3.info(VAR_7 + \" \" + VAR_6);\n\n        if (VAR_8.equals(VAR_4)) {\n            VAR_9.setProperty(\"socksProxyHost\", VAR_1);\n            VAR_3.info(\"Setting environment variable: socksProxyHost=\" + VAR_1);\n            VAR_9.setProperty(\"socksProxyPort\", VAR_6);\n            VAR_3.info(\"Setting environment variable: socksProxyPort=\" + VAR_6);\n        } else {\n            final String VAR_10 = VAR_11.format(\"%s.proxyHost\", VAR_4.toLowerCase());\n            VAR_9.setProperty(VAR_10, VAR_1);\n            VAR_3.info(\"Setting environment variable: \" + VAR_10 + \"=\" + VAR_1);\n            final String VAR_12 = VAR_11.format(\"%s.proxyPort\", VAR_4.toLowerCase());\n            VAR_9.setProperty(VAR_12, VAR_6);\n            VAR_3.info(\"Setting environment variable: \" + VAR_12 + \"=\" + VAR_6);\n        }\n\n        final String VAR_13 = (String) getInputParameter(VAR_14);\n        VAR_3.info(VAR_14 + \" \" + VAR_13);\n        final String VAR_15 = (String) getInputParameter(VAR_16);\n        VAR_3.info(VAR_16 + \" ********\");\n        if (VAR_13 != null && !VAR_13.isEmpty()) {\n            VAR_17.setDefault(new Authenticator() {\n\n                @Override\n                protected PasswordAuthentication getPasswordAuthentication() {\n                    return new PasswordAuthentication(VAR_13,\n                            VAR_15 != null ? VAR_15.toCharArray() : \"\".toCharArray());\n                }\n\n            });\n        }\n\n    }",
  "func_graph_path": "bonitasoft/bonita-connector-webservice/a12ad691c05af19e9061d7949b6b828ce48815d5/SecureWSConnector.java/vul/after/4.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -4,30 +4,30 @@\n         if (host == null || host.isEmpty()) {\n             return;\n         }\n-        LOGGER.info(PROXY_HOST + \" \" + host);\n+        logger.info(PROXY_HOST + \" \" + host);\n         final String protocol = (String) getInputParameter(PROXY_PROTOCOL);\n-        LOGGER.info(PROXY_PROTOCOL + \" \" + protocol);\n+        logger.info(PROXY_PROTOCOL + \" \" + protocol);\n         final String port = (String) getInputParameter(PROXY_PORT);\n-        LOGGER.info(PROXY_PORT + \" \" + port);\n+        logger.info(PROXY_PORT + \" \" + port);\n \n         if (SOCKS.equals(protocol)) {\n             System.setProperty(\"socksProxyHost\", host);\n-            LOGGER.info(\"Setting environment variable: socksProxyHost=\" + host);\n+            logger.info(\"Setting environment variable: socksProxyHost=\" + host);\n             System.setProperty(\"socksProxyPort\", port);\n-            LOGGER.info(\"Setting environment variable: socksProxyPort=\" + port);\n+            logger.info(\"Setting environment variable: socksProxyPort=\" + port);\n         } else {\n             final String hostKey = String.format(\"%s.proxyHost\", protocol.toLowerCase());\n             System.setProperty(hostKey, host);\n-            LOGGER.info(\"Setting environment variable: \" + hostKey + \"=\" + host);\n+            logger.info(\"Setting environment variable: \" + hostKey + \"=\" + host);\n             final String portKey = String.format(\"%s.proxyPort\", protocol.toLowerCase());\n             System.setProperty(portKey, port);\n-            LOGGER.info(\"Setting environment variable: \" + portKey + \"=\" + port);\n+            logger.info(\"Setting environment variable: \" + portKey + \"=\" + port);\n         }\n \n         final String user = (String) getInputParameter(PROXY_USER);\n-        LOGGER.info(PROXY_USER + \" \" + user);\n+        logger.info(PROXY_USER + \" \" + user);\n         final String password = (String) getInputParameter(PROXY_PASSWORD);\n-        LOGGER.info(PROXY_PASSWORD + \" ********\");\n+        logger.info(PROXY_PASSWORD + \" ********\");\n         if (user != null && !user.isEmpty()) {\n             Authenticator.setDefault(new Authenticator() {\n ",
  "diff_line_info": {
    "deleted_lines": [
      "        LOGGER.info(PROXY_HOST + \" \" + host);",
      "        LOGGER.info(PROXY_PROTOCOL + \" \" + protocol);",
      "        LOGGER.info(PROXY_PORT + \" \" + port);",
      "            LOGGER.info(\"Setting environment variable: socksProxyHost=\" + host);",
      "            LOGGER.info(\"Setting environment variable: socksProxyPort=\" + port);",
      "            LOGGER.info(\"Setting environment variable: \" + hostKey + \"=\" + host);",
      "            LOGGER.info(\"Setting environment variable: \" + portKey + \"=\" + port);",
      "        LOGGER.info(PROXY_USER + \" \" + user);",
      "        LOGGER.info(PROXY_PASSWORD + \" ********\");"
    ],
    "added_lines": [
      "        logger.info(PROXY_HOST + \" \" + host);",
      "        logger.info(PROXY_PROTOCOL + \" \" + protocol);",
      "        logger.info(PROXY_PORT + \" \" + port);",
      "            logger.info(\"Setting environment variable: socksProxyHost=\" + host);",
      "            logger.info(\"Setting environment variable: socksProxyPort=\" + port);",
      "            logger.info(\"Setting environment variable: \" + hostKey + \"=\" + host);",
      "            logger.info(\"Setting environment variable: \" + portKey + \"=\" + port);",
      "        logger.info(PROXY_USER + \" \" + user);",
      "        logger.info(PROXY_PASSWORD + \" ********\");"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/bonitasoft/bonita-connector-webservice/pull/17",
  "description": {
    "pr_info": {
      "title": "fix(vulnerabilities): fix XXE attacks vulnerabilities and other code smell",
      "number": 17
    },
    "comment": [
      "* Access to external entities and network access should always be\r\ndisable to avoid XXS attacks vulnerabilities.",
      "SonarCloud Quality Gate failed.\n\n[<img src='https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug.png' alt='Bug' width='16' height='16' />](https://sonarcloud.io/project/issues?id=bonitasoft_bonita-connector-webservice&pullRequest=17&resolved=false&types=BUG) [<img src='https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A.png' alt='A' width='16' height='16' />](https://sonarcloud.io/project/issues?id=bonitasoft_bonita-connector-webservice&pullRequest=17&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=bonitasoft_bonita-connector-webservice&pullRequest=17&resolved=false&types=BUG)  \n[<img src='https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability.png' alt='Vulnerability' width='16' height='16' />](https://sonarcloud.io/project/issues?id=bonitasoft_bonita-connector-webservice&pullRequest=17&resolved=false&types=VULNERABILITY) [<img src='https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A.png' alt='A' width='16' height='16' />](https://sonarcloud.io/project/issues?id=bonitasoft_bonita-connector-webservice&pullRequest=17&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=bonitasoft_bonita-connector-webservice&pullRequest=17&resolved=false&types=VULNERABILITY) (and [<img src='https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot.png' alt='Security Hotspot' width='16' height='16' />](https://sonarcloud.io/project/issues?id=bonitasoft_bonita-connector-webservice&pullRequest=17&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/issues?id=bonitasoft_bonita-connector-webservice&pullRequest=17&resolved=false&types=SECURITY_HOTSPOT) to review)  \n[<img src='https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell.png' alt='Code Smell' width='16' height='16' />](https://sonarcloud.io/project/issues?id=bonitasoft_bonita-connector-webservice&pullRequest=17&resolved=false&types=CODE_SMELL) [<img src='https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A.png' alt='A' width='16' height='16' />](https://sonarcloud.io/project/issues?id=bonitasoft_bonita-connector-webservice&pullRequest=17&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=bonitasoft_bonita-connector-webservice&pullRequest=17&resolved=false&types=CODE_SMELL)\n\n[<img src='https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/60.png' alt='68.8%' width='16' height='16' />](https://sonarcloud.io/component_measures?id=bonitasoft_bonita-connector-webservice&pullRequest=17&metric=new_coverage&view=list) [68.8% Coverage](https://sonarcloud.io/component_measures?id=bonitasoft_bonita-connector-webservice&pullRequest=17&metric=new_coverage&view=list)  \n[<img src='https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3.png' alt='0.0%' width='16' height='16' />](https://sonarcloud.io/component_measures?id=bonitasoft_bonita-connector-webservice&pullRequest=17&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=bonitasoft_bonita-connector-webservice&pullRequest=17&metric=new_duplicated_lines_density&view=list)\n\n<img src='https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/message_warning.png' alt='warning' width='16' height='16' /> The version of Java (1.8.0_265) you have used to run this analysis is deprecated and we will stop accepting it from October 2020. Please update to at least Java 11.\nRead more [here](https://sonarcloud.io/documentation/upcoming/)\n\n\n"
    ]
  },
  "Bug Filter": "Supporting & Non-Core Improvements",
  "Bug Filter Confidence": 0.6,
  "Bug Filter Response": "**Final Classification:** Supporting & Non-Core Improvements  \n**Confidence:** 0.6  \n\nThe patch involves code refactoring and logging improvements, which are non-core updates. The commit message mentions addressing XXE vulnerabilities, but the changes don't directly fix that issue."
}