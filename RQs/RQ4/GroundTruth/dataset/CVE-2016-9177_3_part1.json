{
  "cve_id": "CVE-2016-9177",
  "cwe_ids": [
    "CWE-22"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:N/A:N",
  "cvss_is_v3": false,
  "repo_name": "perwendel/spark",
  "commit_msg": "Fix for #700 - Arbitrary File Read Vulnerability",
  "commit_hash": "26b57d0596ee73c14c558463943ef0857e53b91f",
  "git_url": "https://github.com/perwendel/spark/commit/26b57d0596ee73c14c558463943ef0857e53b91f",
  "file_path": "src/main/java/spark/staticfiles/StaticFilesConfiguration.java",
  "func_name": "consumeWithFileResourceHandlers",
  "func_before": "private boolean consumeWithFileResourceHandlers(HttpServletRequest httpRequest,\n                                                    HttpServletResponse httpResponse) throws IOException {\n        if (staticResourceHandlers != null) {\n\n            for (AbstractResourceHandler staticResourceHandler : staticResourceHandlers) {\n\n                AbstractFileResolvingResource resource = staticResourceHandler.getResource(httpRequest);\n\n                if (resource != null && resource.isReadable()) {\n                    httpResponse.setHeader(MimeType.CONTENT_TYPE, MimeType.fromResource(resource));\n                    customHeaders.forEach(httpResponse::setHeader); //add all user-defined headers to response\n                    OutputStream wrappedOutputStream = GzipUtils.checkAndWrap(httpRequest, httpResponse, false);\n                    \n                    IOUtils.copy(resource.getInputStream(), wrappedOutputStream);\n                    wrappedOutputStream.flush();\n                    wrappedOutputStream.close();\n                    return true;\n                }\n            }\n\n        }\n        return false;\n    }",
  "abstract_func_before": "private boolean consumeWithFileResourceHandlers(HttpServletRequest VAR_0,\n                                                    HttpServletResponse VAR_1) throws IOException {\n        if (VAR_2 != null) {\n\n            for (AbstractResourceHandler VAR_3 : VAR_2) {\n\n                AbstractFileResolvingResource VAR_4 = VAR_3.getResource(VAR_0);\n\n                if (VAR_4 != null && VAR_4.isReadable()) {\n                    VAR_1.setHeader(VAR_5.CONTENT_TYPE, VAR_5.fromResource(VAR_4));\n                    VAR_6.forEach(VAR_1::VAR_7); /* COMMENT_0 */\n                    OutputStream VAR_8 = VAR_9.checkAndWrap(VAR_0, VAR_1, false);\n                    \n                    VAR_10.copy(VAR_4.getInputStream(), VAR_8);\n                    VAR_8.flush();\n                    VAR_8.close();\n                    return true;\n                }\n            }\n\n        }\n        return false;\n    }",
  "func_graph_path_before": "perwendel/spark/26b57d0596ee73c14c558463943ef0857e53b91f/StaticFilesConfiguration.java/vul/before/3.json",
  "func": "private boolean consumeWithFileResourceHandlers(HttpServletRequest httpRequest,\n                                                    HttpServletResponse httpResponse) throws IOException {\n        if (staticResourceHandlers != null) {\n\n            for (AbstractResourceHandler staticResourceHandler : staticResourceHandlers) {\n\n                AbstractFileResolvingResource resource = staticResourceHandler.getResource(httpRequest);\n\n                if (resource != null && resource.isReadable()) {\n                    httpResponse.setHeader(MimeType.CONTENT_TYPE, MimeType.fromResource(resource));\n                    customHeaders.forEach(httpResponse::setHeader); //add all user-defined headers to response\n                    OutputStream wrappedOutputStream = GzipUtils.checkAndWrap(httpRequest, httpResponse, false);\n\n                    IOUtils.copy(resource.getInputStream(), wrappedOutputStream);\n                    wrappedOutputStream.flush();\n                    wrappedOutputStream.close();\n                    return true;\n                }\n            }\n\n        }\n        return false;\n    }",
  "abstract_func": "private boolean consumeWithFileResourceHandlers(HttpServletRequest VAR_0,\n                                                    HttpServletResponse VAR_1) throws IOException {\n        if (VAR_2 != null) {\n\n            for (AbstractResourceHandler VAR_3 : VAR_2) {\n\n                AbstractFileResolvingResource VAR_4 = VAR_3.getResource(VAR_0);\n\n                if (VAR_4 != null && VAR_4.isReadable()) {\n                    VAR_1.setHeader(VAR_5.CONTENT_TYPE, VAR_5.fromResource(VAR_4));\n                    VAR_6.forEach(VAR_1::VAR_7); /* COMMENT_0 */\n                    OutputStream VAR_8 = VAR_9.checkAndWrap(VAR_0, VAR_1, false);\n\n                    VAR_10.copy(VAR_4.getInputStream(), VAR_8);\n                    VAR_8.flush();\n                    VAR_8.close();\n                    return true;\n                }\n            }\n\n        }\n        return false;\n    }",
  "func_graph_path": "perwendel/spark/26b57d0596ee73c14c558463943ef0857e53b91f/StaticFilesConfiguration.java/vul/after/3.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -10,7 +10,7 @@\n                     httpResponse.setHeader(MimeType.CONTENT_TYPE, MimeType.fromResource(resource));\n                     customHeaders.forEach(httpResponse::setHeader); //add all user-defined headers to response\n                     OutputStream wrappedOutputStream = GzipUtils.checkAndWrap(httpRequest, httpResponse, false);\n-                    \n+\n                     IOUtils.copy(resource.getInputStream(), wrappedOutputStream);\n                     wrappedOutputStream.flush();\n                     wrappedOutputStream.close();",
  "diff_line_info": {
    "deleted_lines": [
      "                    "
    ],
    "added_lines": [
      ""
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/perwendel/spark/pull/701",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/perwendel/spark/pull/701: 403 Client Error: Forbidden for url: https://api.github.com/repos/perwendel/spark/pulls/701",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 1.0"
}