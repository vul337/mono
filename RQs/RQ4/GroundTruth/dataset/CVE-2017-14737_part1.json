{
  "cve_id": "CVE-2017-14737",
  "cwe_ids": [
    "CWE-Other"
  ],
  "cvss_vector": "AV:L/AC:L/Au:N/C:P/I:N/A:N",
  "cvss_is_v3": false,
  "repo_name": "randombit/botan",
  "commit_msg": "Use a side channel silent table look up in the Montgomery exponentiation",
  "commit_hash": "a3c4ec54ba8f611e7ef41867a4ed0fd669ef8057",
  "git_url": "https://github.com/randombit/botan/commit/a3c4ec54ba8f611e7ef41867a4ed0fd669ef8057",
  "file_path": "src/lib/math/mp/mp_monty.cpp",
  "func_name": "bigint_monty_sqr",
  "func_before": "void bigint_monty_sqr(BigInt& z, const BigInt& x, const word p[],\n                      size_t p_size, word p_dash, word ws[])\n   {\n   bigint_sqr(z.mutable_data(), z.size(), &ws[0],\n              x.data(), x.size(), x.sig_words());\n\n   bigint_monty_redc(z.mutable_data(),\n                     &p[0], p_size, p_dash,\n                     &ws[0]);\n   }",
  "abstract_func_before": "void bigint_monty_sqr(BigInt& VAR_0, const BigInt& VAR_1, const word VAR_2[],\n                      size_t VAR_3, word VAR_4, word VAR_5[])\n   {\n   bigint_sqr(VAR_0.mutable_data(), VAR_0.size(), &VAR_5[0],\n              VAR_1.data(), VAR_1.size(), VAR_1.sig_words());\n\n   bigint_monty_redc(VAR_0.mutable_data(),\n                     &VAR_2[0], VAR_3, VAR_4,\n                     &VAR_5[0]);\n   }",
  "func_graph_path_before": "randombit/botan/a3c4ec54ba8f611e7ef41867a4ed0fd669ef8057/mp_monty.cpp/vul/before/0.json",
  "func": "void bigint_monty_sqr(BigInt& z, const BigInt& x, const word p[],\n                      size_t p_size, word p_dash, word ws[])\n   {\n   bigint_sqr(z.mutable_data(), z.size(), &ws[0],\n              x.data(), x.size(), x.sig_words());\n\n   bigint_monty_redc(z.mutable_data(),\n                     p, p_size, p_dash,\n                     ws);\n   }",
  "abstract_func": "void bigint_monty_sqr(BigInt& VAR_0, const BigInt& VAR_1, const word VAR_2[],\n                      size_t VAR_3, word VAR_4, word VAR_5[])\n   {\n   bigint_sqr(VAR_0.mutable_data(), VAR_0.size(), &VAR_5[0],\n              VAR_1.data(), VAR_1.size(), VAR_1.sig_words());\n\n   bigint_monty_redc(VAR_0.mutable_data(),\n                     VAR_2, VAR_3, VAR_4,\n                     VAR_5);\n   }",
  "func_graph_path": "randombit/botan/a3c4ec54ba8f611e7ef41867a4ed0fd669ef8057/mp_monty.cpp/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -5,6 +5,6 @@\n               x.data(), x.size(), x.sig_words());\n \n    bigint_monty_redc(z.mutable_data(),\n-                     &p[0], p_size, p_dash,\n-                     &ws[0]);\n+                     p, p_size, p_dash,\n+                     ws);\n    }",
  "diff_line_info": {
    "deleted_lines": [
      "                     &p[0], p_size, p_dash,",
      "                     &ws[0]);"
    ],
    "added_lines": [
      "                     p, p_size, p_dash,",
      "                     ws);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/randombit/botan/pull/1224",
  "description": {
    "pr_info": {
      "title": "Use a side channel silent table look up in the Montgomery exponentiation",
      "number": 1224
    },
    "comment": [
      "Addressing #1222 - or at least I believe so.\r\n\r\n~~Important todo: I haven't checked what kind of code GCC or Clang generates for `const_time_lookup`.~~ Added valgrind annotations and everything looks good, at least on x86-64 with recent GCC/Clang.\r\n\r\n@jurajsomorovsky @neverhub @securitykernel @neusdan would love some additional eyes on this.",
      "# [Codecov](https://codecov.io/gh/randombit/botan/pull/1224?src=pr&el=h1) Report\n> Merging [#1224](https://codecov.io/gh/randombit/botan/pull/1224?src=pr&el=desc) into [master](https://codecov.io/gh/randombit/botan/commit/549c4dcc4116f3947e47f613781c0441ae499c1a?src=pr&el=desc) will **increase** coverage by `0.02%`.\n> The diff coverage is `100%`.\n\n[![Impacted file tree graph](https://codecov.io/gh/randombit/botan/pull/1224/graphs/tree.svg?width=650&height=150&token=VR6iYmSPH8&src=pr)](https://codecov.io/gh/randombit/botan/pull/1224?src=pr&el=tree)\n\n```diff\n@@            Coverage Diff             @@\n##           master    #1224      +/-   ##\n==========================================\n+ Coverage    92.2%   92.22%   +0.02%     \n==========================================\n  Files         749      749              \n  Lines       44914    44932      +18     \n  Branches     5185     5187       +2     \n==========================================\n+ Hits        41413    41440      +27     \n+ Misses       3467     3458       -9     \n  Partials       34       34\n```\n\n\n| [Impacted Files](https://codecov.io/gh/randombit/botan/pull/1224?src=pr&el=tree) | Coverage Δ | |\n|---|---|---|\n| [src/lib/math/bigint/bigint.h](https://codecov.io/gh/randombit/botan/pull/1224?src=pr&el=tree#diff-c3JjL2xpYi9tYXRoL2JpZ2ludC9iaWdpbnQuaA==) | `96.36% <ø> (ø)` | :arrow_up: |\n| [src/lib/math/numbertheory/powm\\_mnt.cpp](https://codecov.io/gh/randombit/botan/pull/1224?src=pr&el=tree#diff-c3JjL2xpYi9tYXRoL251bWJlcnRoZW9yeS9wb3dtX21udC5jcHA=) | `98.14% <100%> (+0.18%)` | :arrow_up: |\n| [src/lib/math/mp/mp\\_karat.cpp](https://codecov.io/gh/randombit/botan/pull/1224?src=pr&el=tree#diff-c3JjL2xpYi9tYXRoL21wL21wX2thcmF0LmNwcA==) | `98.66% <100%> (-0.01%)` | :arrow_down: |\n| [src/lib/math/mp/mp\\_monty.cpp](https://codecov.io/gh/randombit/botan/pull/1224?src=pr&el=tree#diff-c3JjL2xpYi9tYXRoL21wL21wX21vbnR5LmNwcA==) | `100% <100%> (ø)` | :arrow_up: |\n| [src/lib/math/bigint/bigint.cpp](https://codecov.io/gh/randombit/botan/pull/1224?src=pr&el=tree#diff-c3JjL2xpYi9tYXRoL2JpZ2ludC9iaWdpbnQuY3Bw) | `97.84% <100%> (+0.24%)` | :arrow_up: |\n| [src/lib/pk\\_pad/emsa\\_raw/emsa\\_raw.cpp](https://codecov.io/gh/randombit/botan/pull/1224?src=pr&el=tree#diff-c3JjL2xpYi9wa19wYWQvZW1zYV9yYXcvZW1zYV9yYXcuY3Bw) | `71.87% <0%> (-3.13%)` | :arrow_down: |\n| [src/lib/pubkey/mce/mceliece\\_key.cpp](https://codecov.io/gh/randombit/botan/pull/1224?src=pr&el=tree#diff-c3JjL2xpYi9wdWJrZXkvbWNlL21jZWxpZWNlX2tleS5jcHA=) | `83.64% <0%> (-1.26%)` | :arrow_down: |\n| [src/lib/tls/tls\\_handshake\\_state.cpp](https://codecov.io/gh/randombit/botan/pull/1224?src=pr&el=tree#diff-c3JjL2xpYi90bHMvdGxzX2hhbmRzaGFrZV9zdGF0ZS5jcHA=) | `83.33% <0%> (-0.46%)` | :arrow_down: |\n| [src/lib/tls/tls\\_channel.cpp](https://codecov.io/gh/randombit/botan/pull/1224?src=pr&el=tree#diff-c3JjL2xpYi90bHMvdGxzX2NoYW5uZWwuY3Bw) | `79.1% <0%> (-0.35%)` | :arrow_down: |\n| [src/tests/unit\\_tls.cpp](https://codecov.io/gh/randombit/botan/pull/1224?src=pr&el=tree#diff-c3JjL3Rlc3RzL3VuaXRfdGxzLmNwcA==) | `91.33% <0%> (-0.22%)` | :arrow_down: |\n| ... and [6 more](https://codecov.io/gh/randombit/botan/pull/1224?src=pr&el=tree-more) | |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/randombit/botan/pull/1224?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/randombit/botan/pull/1224?src=pr&el=footer). Last update [549c4dc...2718c02](https://codecov.io/gh/randombit/botan/pull/1224?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n",
      "Sorry, I don't have time to look into it this time.",
      "Oh, sorry for the slow response. I am not sure I would be helpful here (it is quite out of my competence) and currently have not that much time ..."
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.9\n\nThe patch addresses a side-channel vulnerability in the Montgomery exponentiation, which is a security concern. The code changes modify data access to prevent timing differences, aligning with a security fix. The context, including mentions of Valgrind annotations and asking for security-focused reviews, supports this classification with high confidence."
}