{
  "cve_id": "CVE-2018-20000",
  "cwe_ids": [
    "CWE-611"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:N/A:N",
  "cvss_is_v3": false,
  "repo_name": "Bedework/bw-webdav",
  "commit_msg": "format: follow the repo code style, and welcome mvnvm props to manage maven versions",
  "commit_hash": "0ce2007b3515a23b5f287ef521300bcb1f748edc",
  "git_url": "https://github.com/Bedework/bw-webdav/commit/0ce2007b3515a23b5f287ef521300bcb1f748edc",
  "file_path": "src/test/java/org/bedework/webdav/servlet/common/TestSecureXmlTypes.java",
  "func_name": "setup",
  "func_before": "@Before\n    public void setup() throws WebdavException, IOException {\n        when(request.getContentType()).thenReturn(\"application/xml\");\n        requestPars = new PostRequestPars(request, webdavNsIntf, UUID.randomUUID().toString());\n\n        when(methodBase.getNsIntf()).thenReturn(webdavNsIntf);\n\n        when(request.getContentLength()).thenReturn(1);\n        when(request.getReader()).thenReturn(getResource(\"/malicious-request.xml\"));\n    }",
  "abstract_func_before": "@Before\n    public void setup() throws WebdavException, IOException {\n        when(VAR_0.getContentType()).thenReturn(\"application/xml\");\n        VAR_1 = new PostRequestPars(VAR_0, VAR_2, VAR_3.randomUUID().toString());\n\n        when(VAR_4.getNsIntf()).thenReturn(VAR_2);\n\n        when(VAR_0.getContentLength()).thenReturn(1);\n        when(VAR_0.getReader()).thenReturn(getResource(\"/malicious-request.xml\"));\n    }",
  "func_graph_path_before": "Bedework/bw-webdav/0ce2007b3515a23b5f287ef521300bcb1f748edc/TestSecureXmlTypes.java/vul/before/1.json",
  "func": "@Before\n  public void setup() throws WebdavException, IOException {\n    when(request.getContentType()).thenReturn(\"application/xml\");\n    requestPars = new PostRequestPars(request, webdavNsIntf, UUID.randomUUID().toString());\n\n    when(methodBase.getNsIntf()).thenReturn(webdavNsIntf);\n\n    when(request.getContentLength()).thenReturn(1);\n    when(request.getReader()).thenReturn(getResource(\"/malicious-request.xml\"));\n  }",
  "abstract_func": "@Before\n  public void setup() throws WebdavException, IOException {\n    when(VAR_0.getContentType()).thenReturn(\"application/xml\");\n    VAR_1 = new PostRequestPars(VAR_0, VAR_2, VAR_3.randomUUID().toString());\n\n    when(VAR_4.getNsIntf()).thenReturn(VAR_2);\n\n    when(VAR_0.getContentLength()).thenReturn(1);\n    when(VAR_0.getReader()).thenReturn(getResource(\"/malicious-request.xml\"));\n  }",
  "func_graph_path": "Bedework/bw-webdav/0ce2007b3515a23b5f287ef521300bcb1f748edc/TestSecureXmlTypes.java/vul/after/1.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,10 +1,10 @@\n @Before\n-    public void setup() throws WebdavException, IOException {\n-        when(request.getContentType()).thenReturn(\"application/xml\");\n-        requestPars = new PostRequestPars(request, webdavNsIntf, UUID.randomUUID().toString());\n+  public void setup() throws WebdavException, IOException {\n+    when(request.getContentType()).thenReturn(\"application/xml\");\n+    requestPars = new PostRequestPars(request, webdavNsIntf, UUID.randomUUID().toString());\n \n-        when(methodBase.getNsIntf()).thenReturn(webdavNsIntf);\n+    when(methodBase.getNsIntf()).thenReturn(webdavNsIntf);\n \n-        when(request.getContentLength()).thenReturn(1);\n-        when(request.getReader()).thenReturn(getResource(\"/malicious-request.xml\"));\n-    }\n+    when(request.getContentLength()).thenReturn(1);\n+    when(request.getReader()).thenReturn(getResource(\"/malicious-request.xml\"));\n+  }",
  "diff_line_info": {
    "deleted_lines": [
      "    public void setup() throws WebdavException, IOException {",
      "        when(request.getContentType()).thenReturn(\"application/xml\");",
      "        requestPars = new PostRequestPars(request, webdavNsIntf, UUID.randomUUID().toString());",
      "        when(methodBase.getNsIntf()).thenReturn(webdavNsIntf);",
      "        when(request.getContentLength()).thenReturn(1);",
      "        when(request.getReader()).thenReturn(getResource(\"/malicious-request.xml\"));",
      "    }"
    ],
    "added_lines": [
      "  public void setup() throws WebdavException, IOException {",
      "    when(request.getContentType()).thenReturn(\"application/xml\");",
      "    requestPars = new PostRequestPars(request, webdavNsIntf, UUID.randomUUID().toString());",
      "    when(methodBase.getNsIntf()).thenReturn(webdavNsIntf);",
      "    when(request.getContentLength()).thenReturn(1);",
      "    when(request.getReader()).thenReturn(getResource(\"/malicious-request.xml\"));",
      "  }"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/Bedework/bw-webdav/pull/1",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/Bedework/bw-webdav/pull/1: 403 Client Error: Forbidden for url: https://api.github.com/repos/Bedework/bw-webdav/pulls/1",
  "Bug Filter": "Testing & Validation Updates",
  "Bug Filter Confidence": 0.8,
  "Bug Filter Response": "**Final Classification:** Testing & Validation Updates  \n**Confidence:** 0.8  \n\nThe code changes are in the setup method, which is part of testing, not fixing a vulnerability. The commit message focuses on code style and Maven, not security."
}