{
  "cve_id": "CVE-2021-37616",
  "cwe_ids": [
    "CWE-476"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "Exiv2/exiv2",
  "commit_msg": "Check that findKey didn't return end().",
  "commit_hash": "3ac426b2c04004422c290425259082281e090116",
  "git_url": "https://github.com/Exiv2/exiv2/commit/3ac426b2c04004422c290425259082281e090116",
  "file_path": "src/convert.cpp",
  "func_name": "Converter::cnvXmpFlash",
  "func_before": "void Converter::cnvXmpFlash(const char* from, const char* to)\n    {\n        Exiv2::XmpData::iterator pos = xmpData_->findKey(XmpKey(std::string(from) + \"/exif:Fired\"));\n        if (pos == xmpData_->end()) return;\n        if (!prepareExifTarget(to)) return;\n        unsigned short value = 0;\n\n        if (pos != xmpData_->end() && pos->count() > 0) {\n            int fired = pos->toLong();\n            if (pos->value().ok())\n                value |= fired & 1;\n#ifndef SUPPRESS_WARNINGS\n            else\n                EXV_WARNING << \"Failed to convert \" << std::string(from) + \"/exif:Fired\" << \" to \" << to << \"\\n\";\n#endif\n        }\n        pos = xmpData_->findKey(XmpKey(std::string(from) + \"/exif:Return\"));\n        if (pos != xmpData_->end() && pos->count() > 0) {\n            int ret = pos->toLong();\n            if (pos->value().ok())\n                value |= (ret & 3) << 1;\n#ifndef SUPPRESS_WARNINGS\n            else\n                EXV_WARNING << \"Failed to convert \" << std::string(from) + \"/exif:Return\" << \" to \" << to << \"\\n\";\n#endif\n        }\n        pos = xmpData_->findKey(XmpKey(std::string(from) + \"/exif:Mode\"));\n        if (pos != xmpData_->end() && pos->count() > 0) {\n            int mode = pos->toLong();\n            if (pos->value().ok())\n                value |= (mode & 3) << 3;\n#ifndef SUPPRESS_WARNINGS\n            else\n                EXV_WARNING << \"Failed to convert \" << std::string(from) + \"/exif:Mode\" << \" to \" << to << \"\\n\";\n#endif\n        }\n        pos = xmpData_->findKey(XmpKey(std::string(from) + \"/exif:Function\"));\n        if (pos != xmpData_->end() && pos->count() > 0) {\n            int function = pos->toLong();\n            if (pos->value().ok())\n                value |= (function & 1) << 5;\n#ifndef SUPPRESS_WARNINGS\n            else\n                EXV_WARNING << \"Failed to convert \" << std::string(from) + \"/exif:Function\" << \" to \" << to << \"\\n\";\n#endif\n        }\n        pos = xmpData_->findKey(XmpKey(std::string(from) + \"/exif:RedEyeMode\"));\n        if (pos != xmpData_->end() && pos->count() > 0) {\n            int red = pos->toLong();\n            if (pos->value().ok())\n                value |= (red & 1) << 6;\n#ifndef SUPPRESS_WARNINGS\n            else\n                EXV_WARNING << \"Failed to convert \" << std::string(from) + \"/exif:RedEyeMode\" << \" to \" << to << \"\\n\";\n#endif\n        }\n\n        (*exifData_)[to] = value;\n        if (erase_) xmpData_->erase(pos);\n    }",
  "abstract_func_before": "void Converter::cnvXmpFlash(const char* VAR_0, const char* VAR_1)\n    {\n        Exiv2::XmpData::iterator VAR_2 = VAR_3->findKey(XmpKey(std::string(VAR_0) + \"/exif:Fired\"));\n        if (VAR_2 == VAR_3->end()) return;\n        if (!prepareExifTarget(VAR_1)) return;\n        unsigned short VAR_4 = 0;\n\n        if (VAR_2 != VAR_3->end() && VAR_2->count() > 0) {\n            int VAR_5 = VAR_2->toLong();\n            if (VAR_2->value().ok())\n                VAR_4 |= VAR_5 & 1;\n#ifndef VAR_6\n            else\n                VAR_7 << \"Failed to convert \" << std::string(VAR_0) + \"/exif:Fired\" << \" to \" << VAR_1 << \"\\n\";\n#endif\n        }\n        VAR_2 = VAR_3->findKey(XmpKey(std::string(VAR_0) + \"/exif:Return\"));\n        if (VAR_2 != VAR_3->end() && VAR_2->count() > 0) {\n            int VAR_8 = VAR_2->toLong();\n            if (VAR_2->value().ok())\n                VAR_4 |= (VAR_8 & 3) << 1;\n#ifndef VAR_6\n            else\n                VAR_7 << \"Failed to convert \" << std::string(VAR_0) + \"/exif:Return\" << \" to \" << VAR_1 << \"\\n\";\n#endif\n        }\n        VAR_2 = VAR_3->findKey(XmpKey(std::string(VAR_0) + \"/exif:Mode\"));\n        if (VAR_2 != VAR_3->end() && VAR_2->count() > 0) {\n            int VAR_9 = VAR_2->toLong();\n            if (VAR_2->value().ok())\n                VAR_4 |= (VAR_9 & 3) << 3;\n#ifndef VAR_6\n            else\n                VAR_7 << \"Failed to convert \" << std::string(VAR_0) + \"/exif:Mode\" << \" to \" << VAR_1 << \"\\n\";\n#endif\n        }\n        VAR_2 = VAR_3->findKey(XmpKey(std::string(VAR_0) + \"/exif:Function\"));\n        if (VAR_2 != VAR_3->end() && VAR_2->count() > 0) {\n            int VAR_10 = VAR_2->toLong();\n            if (VAR_2->value().ok())\n                VAR_4 |= (VAR_10 & 1) << 5;\n#ifndef VAR_6\n            else\n                VAR_7 << \"Failed to convert \" << std::string(VAR_0) + \"/exif:Function\" << \" to \" << VAR_1 << \"\\n\";\n#endif\n        }\n        VAR_2 = VAR_3->findKey(XmpKey(std::string(VAR_0) + \"/exif:RedEyeMode\"));\n        if (VAR_2 != VAR_3->end() && VAR_2->count() > 0) {\n            int VAR_11 = VAR_2->toLong();\n            if (VAR_2->value().ok())\n                VAR_4 |= (VAR_11 & 1) << 6;\n#ifndef VAR_6\n            else\n                VAR_7 << \"Failed to convert \" << std::string(VAR_0) + \"/exif:RedEyeMode\" << \" to \" << VAR_1 << \"\\n\";\n#endif\n        }\n\n        (*VAR_12)[VAR_1] = VAR_4;\n        if (VAR_13) VAR_3->erase(VAR_2);\n    }",
  "func_graph_path_before": "Exiv2/exiv2/3ac426b2c04004422c290425259082281e090116/convert.cpp/vul/before/1.json",
  "func": "void Converter::cnvXmpFlash(const char* from, const char* to)\n    {\n        Exiv2::XmpData::iterator pos = xmpData_->findKey(XmpKey(std::string(from) + \"/exif:Fired\"));\n        if (pos == xmpData_->end()) return;\n        if (!prepareExifTarget(to)) return;\n        unsigned short value = 0;\n\n        if (pos != xmpData_->end() && pos->count() > 0) {\n            int fired = pos->toLong();\n            if (pos->value().ok())\n                value |= fired & 1;\n#ifndef SUPPRESS_WARNINGS\n            else\n                EXV_WARNING << \"Failed to convert \" << std::string(from) + \"/exif:Fired\" << \" to \" << to << \"\\n\";\n#endif\n        }\n        pos = xmpData_->findKey(XmpKey(std::string(from) + \"/exif:Return\"));\n        if (pos != xmpData_->end() && pos->count() > 0) {\n            int ret = pos->toLong();\n            if (pos->value().ok())\n                value |= (ret & 3) << 1;\n#ifndef SUPPRESS_WARNINGS\n            else\n                EXV_WARNING << \"Failed to convert \" << std::string(from) + \"/exif:Return\" << \" to \" << to << \"\\n\";\n#endif\n        }\n        pos = xmpData_->findKey(XmpKey(std::string(from) + \"/exif:Mode\"));\n        if (pos != xmpData_->end() && pos->count() > 0) {\n            int mode = pos->toLong();\n            if (pos->value().ok())\n                value |= (mode & 3) << 3;\n#ifndef SUPPRESS_WARNINGS\n            else\n                EXV_WARNING << \"Failed to convert \" << std::string(from) + \"/exif:Mode\" << \" to \" << to << \"\\n\";\n#endif\n        }\n        pos = xmpData_->findKey(XmpKey(std::string(from) + \"/exif:Function\"));\n        if (pos != xmpData_->end() && pos->count() > 0) {\n            int function = pos->toLong();\n            if (pos->value().ok())\n                value |= (function & 1) << 5;\n#ifndef SUPPRESS_WARNINGS\n            else\n                EXV_WARNING << \"Failed to convert \" << std::string(from) + \"/exif:Function\" << \" to \" << to << \"\\n\";\n#endif\n        }\n        pos = xmpData_->findKey(XmpKey(std::string(from) + \"/exif:RedEyeMode\"));\n        if (pos != xmpData_->end()) {\n            if (pos->count() > 0) {\n                int red = pos->toLong();\n                if (pos->value().ok())\n                    value |= (red & 1) << 6;\n#ifndef SUPPRESS_WARNINGS\n                else\n                    EXV_WARNING << \"Failed to convert \" << std::string(from) + \"/exif:RedEyeMode\" << \" to \" << to << \"\\n\";\n#endif\n            }\n            if (erase_) xmpData_->erase(pos);\n        }\n\n        (*exifData_)[to] = value;\n    }",
  "abstract_func": "void Converter::cnvXmpFlash(const char* VAR_0, const char* VAR_1)\n    {\n        Exiv2::XmpData::iterator VAR_2 = VAR_3->findKey(XmpKey(std::string(VAR_0) + \"/exif:Fired\"));\n        if (VAR_2 == VAR_3->end()) return;\n        if (!prepareExifTarget(VAR_1)) return;\n        unsigned short VAR_4 = 0;\n\n        if (VAR_2 != VAR_3->end() && VAR_2->count() > 0) {\n            int VAR_5 = VAR_2->toLong();\n            if (VAR_2->value().ok())\n                VAR_4 |= VAR_5 & 1;\n#ifndef VAR_6\n            else\n                VAR_7 << \"Failed to convert \" << std::string(VAR_0) + \"/exif:Fired\" << \" to \" << VAR_1 << \"\\n\";\n#endif\n        }\n        VAR_2 = VAR_3->findKey(XmpKey(std::string(VAR_0) + \"/exif:Return\"));\n        if (VAR_2 != VAR_3->end() && VAR_2->count() > 0) {\n            int VAR_8 = VAR_2->toLong();\n            if (VAR_2->value().ok())\n                VAR_4 |= (VAR_8 & 3) << 1;\n#ifndef VAR_6\n            else\n                VAR_7 << \"Failed to convert \" << std::string(VAR_0) + \"/exif:Return\" << \" to \" << VAR_1 << \"\\n\";\n#endif\n        }\n        VAR_2 = VAR_3->findKey(XmpKey(std::string(VAR_0) + \"/exif:Mode\"));\n        if (VAR_2 != VAR_3->end() && VAR_2->count() > 0) {\n            int VAR_9 = VAR_2->toLong();\n            if (VAR_2->value().ok())\n                VAR_4 |= (VAR_9 & 3) << 3;\n#ifndef VAR_6\n            else\n                VAR_7 << \"Failed to convert \" << std::string(VAR_0) + \"/exif:Mode\" << \" to \" << VAR_1 << \"\\n\";\n#endif\n        }\n        VAR_2 = VAR_3->findKey(XmpKey(std::string(VAR_0) + \"/exif:Function\"));\n        if (VAR_2 != VAR_3->end() && VAR_2->count() > 0) {\n            int VAR_10 = VAR_2->toLong();\n            if (VAR_2->value().ok())\n                VAR_4 |= (VAR_10 & 1) << 5;\n#ifndef VAR_6\n            else\n                VAR_7 << \"Failed to convert \" << std::string(VAR_0) + \"/exif:Function\" << \" to \" << VAR_1 << \"\\n\";\n#endif\n        }\n        VAR_2 = VAR_3->findKey(XmpKey(std::string(VAR_0) + \"/exif:RedEyeMode\"));\n        if (VAR_2 != VAR_3->end()) {\n            if (VAR_2->count() > 0) {\n                int VAR_11 = VAR_2->toLong();\n                if (VAR_2->value().ok())\n                    VAR_4 |= (VAR_11 & 1) << 6;\n#ifndef VAR_6\n                else\n                    VAR_7 << \"Failed to convert \" << std::string(VAR_0) + \"/exif:RedEyeMode\" << \" to \" << VAR_1 << \"\\n\";\n#endif\n            }\n            if (VAR_12) VAR_3->erase(VAR_2);\n        }\n\n        (*VAR_13)[VAR_1] = VAR_4;\n    }",
  "func_graph_path": "Exiv2/exiv2/3ac426b2c04004422c290425259082281e090116/convert.cpp/vul/after/1.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -45,16 +45,18 @@\n #endif\n         }\n         pos = xmpData_->findKey(XmpKey(std::string(from) + \"/exif:RedEyeMode\"));\n-        if (pos != xmpData_->end() && pos->count() > 0) {\n-            int red = pos->toLong();\n-            if (pos->value().ok())\n-                value |= (red & 1) << 6;\n+        if (pos != xmpData_->end()) {\n+            if (pos->count() > 0) {\n+                int red = pos->toLong();\n+                if (pos->value().ok())\n+                    value |= (red & 1) << 6;\n #ifndef SUPPRESS_WARNINGS\n-            else\n-                EXV_WARNING << \"Failed to convert \" << std::string(from) + \"/exif:RedEyeMode\" << \" to \" << to << \"\\n\";\n+                else\n+                    EXV_WARNING << \"Failed to convert \" << std::string(from) + \"/exif:RedEyeMode\" << \" to \" << to << \"\\n\";\n #endif\n+            }\n+            if (erase_) xmpData_->erase(pos);\n         }\n \n         (*exifData_)[to] = value;\n-        if (erase_) xmpData_->erase(pos);\n     }",
  "diff_line_info": {
    "deleted_lines": [
      "        if (pos != xmpData_->end() && pos->count() > 0) {",
      "            int red = pos->toLong();",
      "            if (pos->value().ok())",
      "                value |= (red & 1) << 6;",
      "            else",
      "                EXV_WARNING << \"Failed to convert \" << std::string(from) + \"/exif:RedEyeMode\" << \" to \" << to << \"\\n\";",
      "        if (erase_) xmpData_->erase(pos);"
    ],
    "added_lines": [
      "        if (pos != xmpData_->end()) {",
      "            if (pos->count() > 0) {",
      "                int red = pos->toLong();",
      "                if (pos->value().ok())",
      "                    value |= (red & 1) << 6;",
      "                else",
      "                    EXV_WARNING << \"Failed to convert \" << std::string(from) + \"/exif:RedEyeMode\" << \" to \" << to << \"\\n\";",
      "            }",
      "            if (erase_) xmpData_->erase(pos);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/sridharb1/exiv2/pull/4",
  "description": {
    "pr_info": {
      "title": "0.27 maintenance",
      "number": 4
    },
    "comment": []
  },
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Defect Remediation & Feature Upgrades\n**Confidence:** 0.9\n\nThe patch fixes a non-security issue related to incorrect file placement in a cross-setup environment. The code changes ensure proper file handling and correct location placement, without any security implications. The commit message and changes align with fixing a functional bug, supporting the classification as a defect remediation."
}