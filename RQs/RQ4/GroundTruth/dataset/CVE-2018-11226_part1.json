{
  "cve_id": "CVE-2018-11226",
  "cwe_ids": [
    "CWE-119"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "libming",
  "commit_msg": "decompile: introduce new method Offset\n\nThe getString method in decompile.c is vulnerable to a buffer\noverflow which can be triggered using a crafted SWF file.\n\nThis vulnerability is the consequence of unchecked accesses to the\nactions array when getting the offset of SWF_ACTIONRECORD objects.\n\nThis pattern is present a bit everywhere in the source code, leading\nto a large number of potential flaws similar to this one. In this\ncommit we introduce a new Offset method similar to the OpCode method\nwhich handles bound checking when retrieving the offset of\nSWF_ACTIONRECORD objects.\n\nThis commit also modifies getString to use this newly introduced\nmethod and address the previously explained bug.\n\nUsage of the newly introduced Offset method will be generalized in a\nfuture commit.\n\nPlease, note that this commit won't be sufficient to fix #144\n(CVE-2018-11226) since another issue is triggered by the same sample.",
  "commit_hash": "6e5a28dc0419e5c6681292db40cbd996fadf9213",
  "git_url": "https://github.com/libming/libming/commit/6e5a28dc0419e5c6681292db40cbd996fadf9213",
  "file_path": "util/decompile.c",
  "func_name": "decompile_SWITCH",
  "func_before": "static int\ndecompile_SWITCH(int n, SWF_ACTION *actions, int maxn, int off1end)\n{\n\tint i,j;\n\tint start;\t\t// base action index for case value and code\n\tint ccsize=0;\t\t// size of code for case value\n\tint cvsize=0;\t\t// size of case value\n\tint maxoff=0;\t\t// action offset AFTER switch\n\tint n_maxoff=0;\t\t// array index of maxoff\n\tint pend=0;\t\t// control pending output\n\tint xsize=0;\t\t// ret val\n\tint jmpsize=0;\t\t// debug helper\n\tint lastoff=0;\t\t// debug helper\n\tint n_firstactions=maxn;// array index of 1st case actions code\n\tint lastcasestart=0;\t// offs where last \"case x:\" begins\n\tchar *defa=\"[last]\";\t// debug helper for early \"default:\" \n\tchar *tmp=NULL;\t\t// helper for pending output\n\tstruct strbufinfo origbuf;\t// pending output buffer\n\tstruct _stack *StackSave;\n\tstruct SWF_ACTIONPUSHPARAM *swcopy,*sw=pop();\n\tstruct SWF_ACTIONPUSHPARAM *compare=pop();\n\tint offSave;\n\tfor (i=0; i<n_firstactions; i++) // seek last op in 1st if\n\t{\n\t\tif (actions[i+1].SWF_ACTIONRECORD.Offset==off1end)\n\t\t{\n\t\t\t// println(\"found #off end first= %d\",i+1);\n\t\t\tif (OpCode(actions, i, maxn) == SWFACTION_JUMP)\n\t\t\t{\n\t\t\t\tmaxoff=actions[i].SWF_ACTIONJUMP.BranchOffset+actions[i].SWF_ACTIONJUMP.Offset+5;\n\t\t\t\tj=1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// SanityCheck(decompile_SWITCH,0,\"no jump found where expected\");\n\t\t\t}\n\t\t\tbreak;\n\t\t} \n\t}\n\t\n\tif (!maxoff)\n\t{\n\t\tfor (i=maxn-1;i>=0;i--)\t\t\t// seek from end of block last op of switch{}\n\t\t{\n\t\t\tif (OpCode(actions, i, maxn) == SWFACTION_JUMP && !actions[i].SWF_ACTIONJUMP.BranchOffset)\n\t\t\t{\n\t\t\t\tmaxoff=actions[i].SWF_ACTIONRECORD.Offset+5;\n\t\t\t\tj=2;\n\t\t\t\tbreak;\n\t\t\t} \n\t\t}\n\t}\n\n\tfor (i=0;i<maxn;i++)\t\n\t{\n\t\tif (actions[i].SWF_ACTIONRECORD.Offset>=maxoff)\n\t\t{\n\t\t\tn_maxoff=i;\t\t// part of block is switch\n\t\t\tbreak;\n\t\t}\n\t}\n\t\t\n\tif (!n_maxoff) \n\t\tn_maxoff=maxn;\t\t\t// whole block is switch\n\n\tINDENT\n\tprintln(\"switch( %s ) {\t\t\t// end switch at %d (index %d) / found via meth %d)\",\n\t        getString(sw), maxoff,n_maxoff,j);\n\t\t\n\tpush(sw);\n\tpush(compare);\n\n\ti=1;\n\tdo \t\t\t\t\t// here we go into main loop\n\t{\n\t\tif((OpCode(actions, i, maxn) == SWFACTION_IF\n\t\t   && OpCode(actions, i-1, maxn) == SWFACTION_STRICTEQUALS )\n\t\t   ||(OpCode(actions, i, maxn) == SWFACTION_JUMP\n\t\t   && OpCode(actions, i-1, maxn) == SWFACTION_IF) )\n\t\t{\n\t\t\tstart=i;\n\t\t\twhile (start<maxn \n\t\t\t       && actions[start].SWF_ACTIONRECORD.Offset < actions[i].SWF_ACTIONRECORD.Offset+5+actions[i].SWF_ACTIONJUMP.BranchOffset\n)\t\t\t{\n\t\t\t\tstart++;\t\t// count actions until start of \"case x:\"\n\t\t\t}\n\t\t\tif (n_firstactions==maxn) // if not done store earliest \"case x: \"actions\n\t\t\t{\n\t\t\t\tn_firstactions=start;\t// same as array index\n\t\t\t}\n\n\t\t\tfor (ccsize=0; ccsize+start<n_maxoff; ccsize++)\t// count actions belonging to \"case x:\"\n\t\t\t{\n#ifdef DEBUGSWITCH\n\t\t\t\tprintln(\"in ccsize: ccsize=%d  off=%d %s\",\n\t\t\t\t        ccsize,actions[ccsize+start].SWF_ACTIONRECORD.Offset,\n\t\t\t\t        actionName(OpCode(actions, ccsize+start, maxn)));\n#endif\n\t\t\t\tif (OpCode(actions, ccsize+start, maxn) == SWFACTION_JUMP)\n\t\t\t\t{\n\t\t\t\t\tif (maxoff == actions[ccsize+start].SWF_ACTIONJUMP.Offset+5 + actions[ccsize+start].SWF_ACTIONJUMP.BranchOffset)\n\t\t\t\t\t{\n\t\t\t\t\t\tjmpsize= actions[ccsize+start].SWF_ACTIONJUMP.BranchOffset;\n\t\t\t\t\t\tlastoff= actions[ccsize+start].SWF_ACTIONJUMP.Offset;\n\t\t\t\t\t\tccsize++; // the jmp itself\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n#if USE_LIB\n\t\t\tif (tmp && (start!=pend)) // output pending buffer if neccessary\n\t\t\t{\n\t\t\t\tputs(tmp);\n\t\t\t}\n\t\t\t\n\t\t\tif (tmp)\n\t\t\t{\n\t\t\t\tfree(tmp);\n\t\t\t\ttmp=NULL;\n\t\t\t}\n\t\t\tpend=start;\n#endif\n\t\t\tif (OpCode(actions, i, maxn) == SWFACTION_JUMP)\n\t\t\t{\n\t\t\t\tif (ccsize<=1)\n\t\t\t\t\tbreak;\t// ready\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tINDENT\n\t\t\t\t\tif (actions[start].SWF_ACTIONRECORD.Offset>lastcasestart)\n\t\t\t\t\t\txsize+=ccsize;        \n\t\t\t\t\telse\n\t\t\t\t\t\tdefa=\"[early]\";\n\t\t\t\t\t\tprintln(\"default:\t\t\t// at %d %s start=%d ccsize=%d\",\n\t\t\t\t\t\t        actions[start].SWF_ACTIONRECORD.Offset,defa, start, ccsize);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tINDENT\n\t\t\t\txsize=ccsize;\n\t\t\t\tlastcasestart=actions[start].SWF_ACTIONRECORD.Offset;\n\t\t\t\tprintln(\"case %s:\t\t\t// at %d  start=%d ccsize=%d jmp=%d+%d+5\",\n\t\t\t        getString(pop()), lastcasestart, start, ccsize, lastoff,jmpsize);\n\t\t\t\tswcopy=pop();\n\t\t\t\t//   SanityCheck(decompile_SWITCH,!strcmp(getName(swcopy),getName(sw)),\"sw0 != sw\");\n\t\t\t}\n\n#if USE_LIB\n\t\t\torigbuf=setTempString(); // switch to temp buffer\n#endif\n\t\t\tStackSave=Stack;\n\t\t\toffSave=offseoloop;\n\t\t\toffseoloop=maxoff;\n\t\t\tdecompileActions( ccsize, &actions[start],gIndent+1);\n\t\t\toffseoloop=offSave;\n\t\t\tStack=StackSave;\n#if USE_LIB\n\t\t\ttmp=switchToOrigString(origbuf);\n#endif\n\n\t\t\tif (OpCode(actions, i, maxn) == SWFACTION_JUMP)\t\t// after \"default:\"\n\t\t\t{\n\t\t\t\tbreak;     \t\t\t\t\t\t\t// ready\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (OpCode(actions, i+1, maxn) != SWFACTION_JUMP) \t// not before \"default:\" or end\n\t\t\t\t{\n\t\t\t\t\ti++; // the 'if' itself\n\t\t\t\t\tcvsize=0;\n\t\t\t\t\twhile (i+cvsize < n_firstactions \n\t\t\t\t\t       && OpCode(actions, i+cvsize, maxn) != SWFACTION_STRICTEQUALS)\n\t\t\t\t\t{\n#ifdef DEBUGSWITCH\n\t\t\t\t\t\tprintln(\"in  cvsize=%d  %d %s\",\n\t\t\t\t\t\t        cvsize, actions[i+cvsize].SWF_ACTIONRECORD.Offset,\n\t\t\t\t\t\t        actionName(OpCode(actions, i+cvsize, maxn)));\n#endif\n\t\t\t\t\t\t\tcvsize++;\t// count \"case X:\" code size\n\t\t\t\t\t}\n\t\t\t\t\tdecompileActions( cvsize, &actions[i],gIndent+1); // at least one push on stack expected\n\t\t\t\t\ti+=cvsize;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} while (++i < n_firstactions);\n\n#if USE_LIB\n\tif (tmp)\n\t{\n\t\tputs(tmp);\t\t// print last pending output\n\t\tfree(tmp);\n\t}\n#endif\t\n\tINDENT\n\tprintln(\"}",
  "abstract_func_before": "static int\ndecompile_SWITCH(int VAR_0, SWF_ACTION *VAR_1, int VAR_2, int VAR_3)\n{\n\tint VAR_4,VAR_5;\n\tint VAR_6;\t\t/* COMMENT_0 */\n\tint VAR_7=0;\t\t/* COMMENT_1 */\n\tint VAR_8=0;\t\t/* COMMENT_2 */\n\tint VAR_9=0;\t\t/* COMMENT_3 */\n\tint VAR_10=0;\t\t/* COMMENT_4 */\n\tint VAR_11=0;\t\t/* COMMENT_5 */\n\tint VAR_12=0;\t\t/* COMMENT_6 */\n\tint VAR_13=0;\t\t/* COMMENT_7 */\n\tint VAR_14=0;\t\t/* COMMENT_7 */\n\tint VAR_15=VAR_2;/* COMMENT_8 */\n\tint VAR_16=0;\t/* COMMENT_9 */\n\tchar *VAR_17=\"[last]\";\t/* COMMENT_10 */\n\tchar *VAR_18=NULL;\t\t/* COMMENT_11 */\n\tstruct strbufinfo VAR_19;\t/* COMMENT_12 */\n\tstruct _stack *VAR_20;\n\tstruct SWF_ACTIONPUSHPARAM *VAR_21,*VAR_22=pop();\n\tstruct SWF_ACTIONPUSHPARAM *VAR_23=pop();\n\tint VAR_24;\n\tfor (VAR_4=0; VAR_4<VAR_15; VAR_4++) /* COMMENT_13 */\n\t{\n\t\tif (VAR_1[VAR_4+1].SWF_ACTIONRECORD.Offset==VAR_3)\n\t\t{\n\t\t\t/* COMMENT_14 */\n\t\t\tif (OpCode(VAR_1, VAR_4, VAR_2) == VAR_25)\n\t\t\t{\n\t\t\t\tVAR_9=VAR_1[VAR_4].SWF_ACTIONJUMP.BranchOffset+VAR_1[VAR_4].SWF_ACTIONJUMP.Offset+5;\n\t\t\t\tVAR_5=1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t/* COMMENT_15 */\n\t\t\t}\n\t\t\tbreak;\n\t\t} \n\t}\n\t\n\tif (!VAR_9)\n\t{\n\t\tfor (VAR_4=VAR_2-1;VAR_4>=0;VAR_4--)\t\t\t/* COMMENT_16 */\n\t\t{\n\t\t\tif (OpCode(VAR_1, VAR_4, VAR_2) == VAR_25 && !VAR_1[VAR_4].SWF_ACTIONJUMP.BranchOffset)\n\t\t\t{\n\t\t\t\tVAR_9=VAR_1[VAR_4].SWF_ACTIONRECORD.Offset+5;\n\t\t\t\tVAR_5=2;\n\t\t\t\tbreak;\n\t\t\t} \n\t\t}\n\t}\n\n\tfor (VAR_4=0;VAR_4<VAR_2;VAR_4++)\t\n\t{\n\t\tif (VAR_1[VAR_4].SWF_ACTIONRECORD.Offset>=VAR_9)\n\t\t{\n\t\t\tVAR_10=VAR_4;\t\t/* COMMENT_17 */\n\t\t\tbreak;\n\t\t}\n\t}\n\t\t\n\tif (!VAR_10) \n\t\tVAR_10=VAR_2;\t\t\t/* COMMENT_18 */\n\n\tINDENT\n\tVAR_26(\"switch( %s ) {\t\t\t// end switch at %d (index %d) / found via meth %d)\",\n\t        getString(VAR_22), VAR_9,VAR_10,VAR_5);\n\t\t\n\tpush(VAR_22);\n\tpush(VAR_23);\n\n\tVAR_4=1;\n\tdo \t\t\t\t\t/* COMMENT_19 */\n\t{\n\t\tif((OpCode(VAR_1, VAR_4, VAR_2) == VAR_27\n\t\t   && OpCode(VAR_1, VAR_4-1, VAR_2) == VAR_28 )\n\t\t   ||(OpCode(VAR_1, VAR_4, VAR_2) == VAR_25\n\t\t   && OpCode(VAR_1, VAR_4-1, VAR_2) == VAR_27) )\n\t\t{\n\t\t\tVAR_6=VAR_4;\n\t\t\twhile (VAR_6<VAR_2 \n\t\t\t       && VAR_1[VAR_6].SWF_ACTIONRECORD.Offset < VAR_1[VAR_4].SWF_ACTIONRECORD.Offset+5+VAR_1[VAR_4].SWF_ACTIONJUMP.BranchOffset\n)\t\t\t{\n\t\t\t\tVAR_6++;\t\t/* COMMENT_20 */\n\t\t\t}\n\t\t\tif (VAR_15==VAR_2) /* COMMENT_21 */\n\t\t\t{\n\t\t\t\tVAR_15=VAR_6;\t/* COMMENT_22 */\n\t\t\t}\n\n\t\t\tfor (VAR_7=0; VAR_7+VAR_6<VAR_10; VAR_7++)\t/* COMMENT_23 */\n\t\t\t{\n#ifdef VAR_29\n\t\t\t\tVAR_26(\"in ccsize: ccsize=%d  off=%d %s\",\n\t\t\t\t        VAR_7,VAR_1[VAR_7+VAR_6].SWF_ACTIONRECORD.Offset,\n\t\t\t\t        actionName(OpCode(VAR_1, VAR_7+VAR_6, VAR_2)));\n#endif\n\t\t\t\tif (OpCode(VAR_1, VAR_7+VAR_6, VAR_2) == VAR_25)\n\t\t\t\t{\n\t\t\t\t\tif (VAR_9 == VAR_1[VAR_7+VAR_6].SWF_ACTIONJUMP.Offset+5 + VAR_1[VAR_7+VAR_6].SWF_ACTIONJUMP.BranchOffset)\n\t\t\t\t\t{\n\t\t\t\t\t\tVAR_13= VAR_1[VAR_7+VAR_6].SWF_ACTIONJUMP.BranchOffset;\n\t\t\t\t\t\tVAR_14= VAR_1[VAR_7+VAR_6].SWF_ACTIONJUMP.Offset;\n\t\t\t\t\t\tVAR_7++; /* COMMENT_24 */\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n#if VAR_30\n\t\t\tif (VAR_18 && (VAR_6!=VAR_11)) /* COMMENT_25 */\n\t\t\t{\n\t\t\t\tputs(VAR_18);\n\t\t\t}\n\t\t\t\n\t\t\tif (VAR_18)\n\t\t\t{\n\t\t\t\tfree(VAR_18);\n\t\t\t\tVAR_18=NULL;\n\t\t\t}\n\t\t\tVAR_11=VAR_6;\n#endif\n\t\t\tif (OpCode(VAR_1, VAR_4, VAR_2) == VAR_25)\n\t\t\t{\n\t\t\t\tif (VAR_7<=1)\n\t\t\t\t\tbreak;\t/* COMMENT_26 */\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tINDENT\n\t\t\t\t\tif (actions[VAR_6].VAR_31.VAR_32>VAR_16)\n\t\t\t\t\t\tVAR_12+=VAR_7;        \n\t\t\t\t\telse\n\t\t\t\t\t\tVAR_17=\"[early]\";\n\t\t\t\t\t\tVAR_26(\"default:\t\t\t// at %d %s start=%d ccsize=%d\",\n\t\t\t\t\t\t        actions[VAR_6].SWF_ACTIONRECORD.Offset,VAR_17, VAR_6, VAR_7);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tINDENT\n\t\t\t\tVAR_12=VAR_7;\n\t\t\t\tVAR_16=actions[VAR_6].SWF_ACTIONRECORD.Offset;\n\t\t\t\tVAR_26(\"case %s:\t\t\t// at %d  start=%d ccsize=%d jmp=%d+%d+5\",\n\t\t\t        getString(pop()), VAR_16, VAR_6, VAR_7, VAR_14,VAR_13);\n\t\t\t\tVAR_21=pop();\n\t\t\t\t/* COMMENT_27 */\n\t\t\t}\n\n#if VAR_30\n\t\t\tVAR_19=setTempString(); /* COMMENT_28 */\n#endif\n\t\t\tVAR_20=VAR_33;\n\t\t\tVAR_24=VAR_34;\n\t\t\tVAR_34=VAR_9;\n\t\t\tdecompileActions( VAR_7, &actions[VAR_6],VAR_35+1);\n\t\t\tVAR_34=VAR_24;\n\t\t\tVAR_33=VAR_20;\n#if VAR_30\n\t\t\tVAR_18=switchToOrigString(VAR_19);\n#endif\n\n\t\t\tif (OpCode(actions, VAR_4, VAR_2) == VAR_25)\t\t/* COMMENT_29 */\n\t\t\t{\n\t\t\t\tbreak;     \t\t\t\t\t\t\t/* COMMENT_26 */\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (OpCode(actions, VAR_4+1, VAR_2) != VAR_25) \t/* COMMENT_30 */\n\t\t\t\t{\n\t\t\t\t\tVAR_4++; /* COMMENT_31 */\n\t\t\t\t\tVAR_8=0;\n\t\t\t\t\twhile (VAR_4+VAR_8 < VAR_15 \n\t\t\t\t\t       && OpCode(actions, VAR_4+VAR_8, VAR_2) != VAR_28)\n\t\t\t\t\t{\n#ifdef VAR_29\n\t\t\t\t\t\tVAR_26(\"in  cvsize=%d  %d %s\",\n\t\t\t\t\t\t        VAR_8, actions[VAR_4+VAR_8].SWF_ACTIONRECORD.Offset,\n\t\t\t\t\t\t        actionName(OpCode(actions, VAR_4+VAR_8, VAR_2)));\n#endif\n\t\t\t\t\t\t\tVAR_8++;\t/* COMMENT_32 */\n\t\t\t\t\t}\n\t\t\t\t\tdecompileActions( VAR_8, &actions[VAR_4],VAR_35+1); /* COMMENT_33 */\n\t\t\t\t\tVAR_4+=VAR_8;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} while (++VAR_4 < VAR_15);\n\n#if VAR_30\n\tif (VAR_18)\n\t{\n\t\tputs(VAR_18);\t\t/* COMMENT_34 */\n\t\tfree(VAR_18);\n\t}\n#endif\t\n\tINDENT\n\tVAR_26(\"}",
  "func_graph_path_before": "libming/6e5a28dc0419e5c6681292db40cbd996fadf9213/decompile.c/vul/before/0.json",
  "func": "static int\ndecompile_SWITCH(int n, SWF_ACTION *actions, int maxn, int off1end)\n{\n\tint i,j;\n\tint start;\t\t// base action index for case value and code\n\tint ccsize=0;\t\t// size of code for case value\n\tint cvsize=0;\t\t// size of case value\n\tint maxoff=0;\t\t// action offset AFTER switch\n\tint n_maxoff=0;\t\t// array index of maxoff\n\tint pend=0;\t\t// control pending output\n\tint xsize=0;\t\t// ret val\n\tint jmpsize=0;\t\t// debug helper\n\tint lastoff=0;\t\t// debug helper\n\tint n_firstactions=maxn;// array index of 1st case actions code\n\tint lastcasestart=0;\t// offs where last \"case x:\" begins\n\tchar *defa=\"[last]\";\t// debug helper for early \"default:\" \n\tchar *tmp=NULL;\t\t// helper for pending output\n\tstruct strbufinfo origbuf;\t// pending output buffer\n\tstruct _stack *StackSave;\n\tstruct SWF_ACTIONPUSHPARAM *swcopy,*sw=pop();\n\tstruct SWF_ACTIONPUSHPARAM *compare=pop();\n\tint offSave;\n\tfor (i=0; i<n_firstactions; i++) // seek last op in 1st if\n\t{\n\t\tif (Offset(actions, i+1, maxn) == off1end)\n\t\t{\n\t\t\t// println(\"found #off end first= %d\",i+1);\n\t\t\tif (OpCode(actions, i, maxn) == SWFACTION_JUMP)\n\t\t\t{\n\t\t\t\tmaxoff=actions[i].SWF_ACTIONJUMP.BranchOffset+actions[i].SWF_ACTIONJUMP.Offset+5;\n\t\t\t\tj=1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// SanityCheck(decompile_SWITCH,0,\"no jump found where expected\");\n\t\t\t}\n\t\t\tbreak;\n\t\t} \n\t}\n\t\n\tif (!maxoff)\n\t{\n\t\tfor (i=maxn-1;i>=0;i--)\t\t\t// seek from end of block last op of switch{}\n\t\t{\n\t\t\tif (OpCode(actions, i, maxn) == SWFACTION_JUMP && !actions[i].SWF_ACTIONJUMP.BranchOffset)\n\t\t\t{\n\t\t\t\tmaxoff=actions[i].SWF_ACTIONRECORD.Offset+5;\n\t\t\t\tj=2;\n\t\t\t\tbreak;\n\t\t\t} \n\t\t}\n\t}\n\n\tfor (i=0;i<maxn;i++)\t\n\t{\n\t\tif (actions[i].SWF_ACTIONRECORD.Offset>=maxoff)\n\t\t{\n\t\t\tn_maxoff=i;\t\t// part of block is switch\n\t\t\tbreak;\n\t\t}\n\t}\n\t\t\n\tif (!n_maxoff) \n\t\tn_maxoff=maxn;\t\t\t// whole block is switch\n\n\tINDENT\n\tprintln(\"switch( %s ) {\t\t\t// end switch at %d (index %d) / found via meth %d)\",\n\t        getString(sw), maxoff,n_maxoff,j);\n\t\t\n\tpush(sw);\n\tpush(compare);\n\n\ti=1;\n\tdo \t\t\t\t\t// here we go into main loop\n\t{\n\t\tif((OpCode(actions, i, maxn) == SWFACTION_IF\n\t\t   && OpCode(actions, i-1, maxn) == SWFACTION_STRICTEQUALS )\n\t\t   ||(OpCode(actions, i, maxn) == SWFACTION_JUMP\n\t\t   && OpCode(actions, i-1, maxn) == SWFACTION_IF) )\n\t\t{\n\t\t\tstart=i;\n\t\t\twhile (start<maxn \n\t\t\t       && actions[start].SWF_ACTIONRECORD.Offset < actions[i].SWF_ACTIONRECORD.Offset+5+actions[i].SWF_ACTIONJUMP.BranchOffset\n)\t\t\t{\n\t\t\t\tstart++;\t\t// count actions until start of \"case x:\"\n\t\t\t}\n\t\t\tif (n_firstactions==maxn) // if not done store earliest \"case x: \"actions\n\t\t\t{\n\t\t\t\tn_firstactions=start;\t// same as array index\n\t\t\t}\n\n\t\t\tfor (ccsize=0; ccsize+start<n_maxoff; ccsize++)\t// count actions belonging to \"case x:\"\n\t\t\t{\n#ifdef DEBUGSWITCH\n\t\t\t\tprintln(\"in ccsize: ccsize=%d  off=%d %s\",\n\t\t\t\t        ccsize,actions[ccsize+start].SWF_ACTIONRECORD.Offset,\n\t\t\t\t        actionName(OpCode(actions, ccsize+start, maxn)));\n#endif\n\t\t\t\tif (OpCode(actions, ccsize+start, maxn) == SWFACTION_JUMP)\n\t\t\t\t{\n\t\t\t\t\tif (maxoff == actions[ccsize+start].SWF_ACTIONJUMP.Offset+5 + actions[ccsize+start].SWF_ACTIONJUMP.BranchOffset)\n\t\t\t\t\t{\n\t\t\t\t\t\tjmpsize= actions[ccsize+start].SWF_ACTIONJUMP.BranchOffset;\n\t\t\t\t\t\tlastoff= actions[ccsize+start].SWF_ACTIONJUMP.Offset;\n\t\t\t\t\t\tccsize++; // the jmp itself\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n#if USE_LIB\n\t\t\tif (tmp && (start!=pend)) // output pending buffer if neccessary\n\t\t\t{\n\t\t\t\tputs(tmp);\n\t\t\t}\n\t\t\t\n\t\t\tif (tmp)\n\t\t\t{\n\t\t\t\tfree(tmp);\n\t\t\t\ttmp=NULL;\n\t\t\t}\n\t\t\tpend=start;\n#endif\n\t\t\tif (OpCode(actions, i, maxn) == SWFACTION_JUMP)\n\t\t\t{\n\t\t\t\tif (ccsize<=1)\n\t\t\t\t\tbreak;\t// ready\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tINDENT\n\t\t\t\t\tif (actions[start].SWF_ACTIONRECORD.Offset>lastcasestart)\n\t\t\t\t\t\txsize+=ccsize;        \n\t\t\t\t\telse\n\t\t\t\t\t\tdefa=\"[early]\";\n\t\t\t\t\t\tprintln(\"default:\t\t\t// at %d %s start=%d ccsize=%d\",\n\t\t\t\t\t\t        actions[start].SWF_ACTIONRECORD.Offset,defa, start, ccsize);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tINDENT\n\t\t\t\txsize=ccsize;\n\t\t\t\tlastcasestart=actions[start].SWF_ACTIONRECORD.Offset;\n\t\t\t\tprintln(\"case %s:\t\t\t// at %d  start=%d ccsize=%d jmp=%d+%d+5\",\n\t\t\t        getString(pop()), lastcasestart, start, ccsize, lastoff,jmpsize);\n\t\t\t\tswcopy=pop();\n\t\t\t\t//   SanityCheck(decompile_SWITCH,!strcmp(getName(swcopy),getName(sw)),\"sw0 != sw\");\n\t\t\t}\n\n#if USE_LIB\n\t\t\torigbuf=setTempString(); // switch to temp buffer\n#endif\n\t\t\tStackSave=Stack;\n\t\t\toffSave=offseoloop;\n\t\t\toffseoloop=maxoff;\n\t\t\tdecompileActions( ccsize, &actions[start],gIndent+1);\n\t\t\toffseoloop=offSave;\n\t\t\tStack=StackSave;\n#if USE_LIB\n\t\t\ttmp=switchToOrigString(origbuf);\n#endif\n\n\t\t\tif (OpCode(actions, i, maxn) == SWFACTION_JUMP)\t\t// after \"default:\"\n\t\t\t{\n\t\t\t\tbreak;     \t\t\t\t\t\t\t// ready\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (OpCode(actions, i+1, maxn) != SWFACTION_JUMP) \t// not before \"default:\" or end\n\t\t\t\t{\n\t\t\t\t\ti++; // the 'if' itself\n\t\t\t\t\tcvsize=0;\n\t\t\t\t\twhile (i+cvsize < n_firstactions \n\t\t\t\t\t       && OpCode(actions, i+cvsize, maxn) != SWFACTION_STRICTEQUALS)\n\t\t\t\t\t{\n#ifdef DEBUGSWITCH\n\t\t\t\t\t\tprintln(\"in  cvsize=%d  %d %s\",\n\t\t\t\t\t\t        cvsize, actions[i+cvsize].SWF_ACTIONRECORD.Offset,\n\t\t\t\t\t\t        actionName(OpCode(actions, i+cvsize, maxn)));\n#endif\n\t\t\t\t\t\t\tcvsize++;\t// count \"case X:\" code size\n\t\t\t\t\t}\n\t\t\t\t\tdecompileActions( cvsize, &actions[i],gIndent+1); // at least one push on stack expected\n\t\t\t\t\ti+=cvsize;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} while (++i < n_firstactions);\n\n#if USE_LIB\n\tif (tmp)\n\t{\n\t\tputs(tmp);\t\t// print last pending output\n\t\tfree(tmp);\n\t}\n#endif\t\n\tINDENT\n\tprintln(\"}",
  "abstract_func": "static int\ndecompile_SWITCH(int VAR_0, SWF_ACTION *VAR_1, int VAR_2, int VAR_3)\n{\n\tint VAR_4,VAR_5;\n\tint VAR_6;\t\t/* COMMENT_0 */\n\tint VAR_7=0;\t\t/* COMMENT_1 */\n\tint VAR_8=0;\t\t/* COMMENT_2 */\n\tint VAR_9=0;\t\t/* COMMENT_3 */\n\tint VAR_10=0;\t\t/* COMMENT_4 */\n\tint VAR_11=0;\t\t/* COMMENT_5 */\n\tint VAR_12=0;\t\t/* COMMENT_6 */\n\tint VAR_13=0;\t\t/* COMMENT_7 */\n\tint VAR_14=0;\t\t/* COMMENT_7 */\n\tint VAR_15=VAR_2;/* COMMENT_8 */\n\tint VAR_16=0;\t/* COMMENT_9 */\n\tchar *VAR_17=\"[last]\";\t/* COMMENT_10 */\n\tchar *VAR_18=NULL;\t\t/* COMMENT_11 */\n\tstruct strbufinfo VAR_19;\t/* COMMENT_12 */\n\tstruct _stack *VAR_20;\n\tstruct SWF_ACTIONPUSHPARAM *VAR_21,*VAR_22=pop();\n\tstruct SWF_ACTIONPUSHPARAM *VAR_23=pop();\n\tint VAR_24;\n\tfor (VAR_4=0; VAR_4<VAR_15; VAR_4++) /* COMMENT_13 */\n\t{\n\t\tif (Offset(VAR_1, VAR_4+1, VAR_2) == VAR_3)\n\t\t{\n\t\t\t/* COMMENT_14 */\n\t\t\tif (OpCode(VAR_1, VAR_4, VAR_2) == VAR_25)\n\t\t\t{\n\t\t\t\tVAR_9=VAR_1[VAR_4].SWF_ACTIONJUMP.BranchOffset+VAR_1[VAR_4].SWF_ACTIONJUMP.Offset+5;\n\t\t\t\tVAR_5=1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t/* COMMENT_15 */\n\t\t\t}\n\t\t\tbreak;\n\t\t} \n\t}\n\t\n\tif (!VAR_9)\n\t{\n\t\tfor (VAR_4=VAR_2-1;VAR_4>=0;VAR_4--)\t\t\t/* COMMENT_16 */\n\t\t{\n\t\t\tif (OpCode(VAR_1, VAR_4, VAR_2) == VAR_25 && !VAR_1[VAR_4].SWF_ACTIONJUMP.BranchOffset)\n\t\t\t{\n\t\t\t\tVAR_9=VAR_1[VAR_4].SWF_ACTIONRECORD.Offset+5;\n\t\t\t\tVAR_5=2;\n\t\t\t\tbreak;\n\t\t\t} \n\t\t}\n\t}\n\n\tfor (VAR_4=0;VAR_4<VAR_2;VAR_4++)\t\n\t{\n\t\tif (VAR_1[VAR_4].SWF_ACTIONRECORD.Offset>=VAR_9)\n\t\t{\n\t\t\tVAR_10=VAR_4;\t\t/* COMMENT_17 */\n\t\t\tbreak;\n\t\t}\n\t}\n\t\t\n\tif (!VAR_10) \n\t\tVAR_10=VAR_2;\t\t\t/* COMMENT_18 */\n\n\tINDENT\n\tVAR_26(\"switch( %s ) {\t\t\t// end switch at %d (index %d) / found via meth %d)\",\n\t        getString(VAR_22), VAR_9,VAR_10,VAR_5);\n\t\t\n\tpush(VAR_22);\n\tpush(VAR_23);\n\n\tVAR_4=1;\n\tdo \t\t\t\t\t/* COMMENT_19 */\n\t{\n\t\tif((OpCode(VAR_1, VAR_4, VAR_2) == VAR_27\n\t\t   && OpCode(VAR_1, VAR_4-1, VAR_2) == VAR_28 )\n\t\t   ||(OpCode(VAR_1, VAR_4, VAR_2) == VAR_25\n\t\t   && OpCode(VAR_1, VAR_4-1, VAR_2) == VAR_27) )\n\t\t{\n\t\t\tVAR_6=VAR_4;\n\t\t\twhile (VAR_6<VAR_2 \n\t\t\t       && VAR_1[VAR_6].SWF_ACTIONRECORD.Offset < VAR_1[VAR_4].SWF_ACTIONRECORD.Offset+5+VAR_1[VAR_4].SWF_ACTIONJUMP.BranchOffset\n)\t\t\t{\n\t\t\t\tVAR_6++;\t\t/* COMMENT_20 */\n\t\t\t}\n\t\t\tif (VAR_15==VAR_2) /* COMMENT_21 */\n\t\t\t{\n\t\t\t\tVAR_15=VAR_6;\t/* COMMENT_22 */\n\t\t\t}\n\n\t\t\tfor (VAR_7=0; VAR_7+VAR_6<VAR_10; VAR_7++)\t/* COMMENT_23 */\n\t\t\t{\n#ifdef VAR_29\n\t\t\t\tVAR_26(\"in ccsize: ccsize=%d  off=%d %s\",\n\t\t\t\t        VAR_7,VAR_1[VAR_7+VAR_6].SWF_ACTIONRECORD.Offset,\n\t\t\t\t        actionName(OpCode(VAR_1, VAR_7+VAR_6, VAR_2)));\n#endif\n\t\t\t\tif (OpCode(VAR_1, VAR_7+VAR_6, VAR_2) == VAR_25)\n\t\t\t\t{\n\t\t\t\t\tif (VAR_9 == VAR_1[VAR_7+VAR_6].SWF_ACTIONJUMP.Offset+5 + VAR_1[VAR_7+VAR_6].SWF_ACTIONJUMP.BranchOffset)\n\t\t\t\t\t{\n\t\t\t\t\t\tVAR_13= VAR_1[VAR_7+VAR_6].SWF_ACTIONJUMP.BranchOffset;\n\t\t\t\t\t\tVAR_14= VAR_1[VAR_7+VAR_6].SWF_ACTIONJUMP.Offset;\n\t\t\t\t\t\tVAR_7++; /* COMMENT_24 */\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n#if VAR_30\n\t\t\tif (VAR_18 && (VAR_6!=VAR_11)) /* COMMENT_25 */\n\t\t\t{\n\t\t\t\tputs(VAR_18);\n\t\t\t}\n\t\t\t\n\t\t\tif (VAR_18)\n\t\t\t{\n\t\t\t\tfree(VAR_18);\n\t\t\t\tVAR_18=NULL;\n\t\t\t}\n\t\t\tVAR_11=VAR_6;\n#endif\n\t\t\tif (OpCode(VAR_1, VAR_4, VAR_2) == VAR_25)\n\t\t\t{\n\t\t\t\tif (VAR_7<=1)\n\t\t\t\t\tbreak;\t/* COMMENT_26 */\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tINDENT\n\t\t\t\t\tif (actions[VAR_6].VAR_31.VAR_32>VAR_16)\n\t\t\t\t\t\tVAR_12+=VAR_7;        \n\t\t\t\t\telse\n\t\t\t\t\t\tVAR_17=\"[early]\";\n\t\t\t\t\t\tVAR_26(\"default:\t\t\t// at %d %s start=%d ccsize=%d\",\n\t\t\t\t\t\t        actions[VAR_6].SWF_ACTIONRECORD.Offset,VAR_17, VAR_6, VAR_7);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tINDENT\n\t\t\t\tVAR_12=VAR_7;\n\t\t\t\tVAR_16=actions[VAR_6].SWF_ACTIONRECORD.Offset;\n\t\t\t\tVAR_26(\"case %s:\t\t\t// at %d  start=%d ccsize=%d jmp=%d+%d+5\",\n\t\t\t        getString(pop()), VAR_16, VAR_6, VAR_7, VAR_14,VAR_13);\n\t\t\t\tVAR_21=pop();\n\t\t\t\t/* COMMENT_27 */\n\t\t\t}\n\n#if VAR_30\n\t\t\tVAR_19=setTempString(); /* COMMENT_28 */\n#endif\n\t\t\tVAR_20=VAR_33;\n\t\t\tVAR_24=VAR_34;\n\t\t\tVAR_34=VAR_9;\n\t\t\tdecompileActions( VAR_7, &actions[VAR_6],VAR_35+1);\n\t\t\tVAR_34=VAR_24;\n\t\t\tVAR_33=VAR_20;\n#if VAR_30\n\t\t\tVAR_18=switchToOrigString(VAR_19);\n#endif\n\n\t\t\tif (OpCode(actions, VAR_4, VAR_2) == VAR_25)\t\t/* COMMENT_29 */\n\t\t\t{\n\t\t\t\tbreak;     \t\t\t\t\t\t\t/* COMMENT_26 */\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (OpCode(actions, VAR_4+1, VAR_2) != VAR_25) \t/* COMMENT_30 */\n\t\t\t\t{\n\t\t\t\t\tVAR_4++; /* COMMENT_31 */\n\t\t\t\t\tVAR_8=0;\n\t\t\t\t\twhile (VAR_4+VAR_8 < VAR_15 \n\t\t\t\t\t       && OpCode(actions, VAR_4+VAR_8, VAR_2) != VAR_28)\n\t\t\t\t\t{\n#ifdef VAR_29\n\t\t\t\t\t\tVAR_26(\"in  cvsize=%d  %d %s\",\n\t\t\t\t\t\t        VAR_8, actions[VAR_4+VAR_8].SWF_ACTIONRECORD.Offset,\n\t\t\t\t\t\t        actionName(OpCode(actions, VAR_4+VAR_8, VAR_2)));\n#endif\n\t\t\t\t\t\t\tVAR_8++;\t/* COMMENT_32 */\n\t\t\t\t\t}\n\t\t\t\t\tdecompileActions( VAR_8, &actions[VAR_4],VAR_35+1); /* COMMENT_33 */\n\t\t\t\t\tVAR_4+=VAR_8;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} while (++VAR_4 < VAR_15);\n\n#if VAR_30\n\tif (VAR_18)\n\t{\n\t\tputs(VAR_18);\t\t/* COMMENT_34 */\n\t\tfree(VAR_18);\n\t}\n#endif\t\n\tINDENT\n\tVAR_26(\"}",
  "func_graph_path": "libming/6e5a28dc0419e5c6681292db40cbd996fadf9213/decompile.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -22,7 +22,7 @@\n \tint offSave;\n \tfor (i=0; i<n_firstactions; i++) // seek last op in 1st if\n \t{\n-\t\tif (actions[i+1].SWF_ACTIONRECORD.Offset==off1end)\n+\t\tif (Offset(actions, i+1, maxn) == off1end)\n \t\t{\n \t\t\t// println(\"found #off end first= %d\",i+1);\n \t\t\tif (OpCode(actions, i, maxn) == SWFACTION_JUMP)",
  "diff_line_info": {
    "deleted_lines": [
      "\t\tif (actions[i+1].SWF_ACTIONRECORD.Offset==off1end)"
    ],
    "added_lines": [
      "\t\tif (Offset(actions, i+1, maxn) == off1end)"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/libming/libming/pull/145",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/libming/libming/pull/145: 403 Client Error: Forbidden for url: https://api.github.com/repos/libming/libming/pulls/145",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 1.0"
}