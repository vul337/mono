{
  "cve_id": "CVE-2021-21429",
  "cwe_ids": [
    "CWE-552"
  ],
  "cvss_vector": "AV:L/AC:L/Au:N/C:P/I:N/A:N",
  "cvss_is_v3": false,
  "repo_name": "OpenAPITools/openapi-generator",
  "commit_msg": "error check when creating a folder",
  "commit_hash": "6445ea6511a6ddab64c86ae263937dc90650c98c",
  "git_url": "https://github.com/OpenAPITools/openapi-generator/commit/6445ea6511a6ddab64c86ae263937dc90650c98c",
  "file_path": "modules/openapi-generator-maven-plugin/src/main/java/org/openapitools/codegen/plugin/CodeGenMojo.java",
  "func_name": "execute",
  "func_before": "@Override\n    public void execute() throws MojoExecutionException {\n        File inputSpecFile = new File(inputSpec);\n        addCompileSourceRootIfConfigured();\n\n        try {\n            if (Boolean.TRUE.equals(skip)) {\n                getLog().info(\"Code generation is skipped.\");\n                return;\n            }\n\n            if (buildContext != null && inputSpec != null ) {\n                if (buildContext.isIncremental() &&\n                        inputSpecFile.exists() &&\n                        !buildContext.hasDelta(inputSpecFile)) {\n                    getLog().info(\n                            \"Code generation is skipped in delta-build because source-json was not modified.\");\n                    return;\n                }\n            }\n\n            if (Boolean.TRUE.equals(skipIfSpecIsUnchanged) && inputSpecFile.exists()) {\n                File storedInputSpecHashFile = getHashFile(inputSpecFile);\n                if (storedInputSpecHashFile.exists()) {\n                    String inputSpecHash = null;\n                    try {\n                        inputSpecHash = calculateInputSpecHash(inputSpecFile);\n                    } catch (IOException ex) {\n                        ex.printStackTrace();\n                    }\n                    @SuppressWarnings(\"UnstableApiUsage\")\n                    String storedInputSpecHash = Files.asCharSource(storedInputSpecHashFile, StandardCharsets.UTF_8).read();\n                    if (storedInputSpecHash.equals(inputSpecHash)) {\n                        getLog().info(\n                                \"Code generation is skipped because input was unchanged\");\n                        return;\n                    }\n                }\n            }\n\n            // attempt to read from config file\n            CodegenConfigurator configurator = CodegenConfigurator.fromFile(configurationFile);\n\n            // if a config file wasn't specified or we were unable to read it\n            if (configurator == null) {\n                configurator = new CodegenConfigurator();\n            }\n\n            configurator.setVerbose(verbose);\n\n            if (skipOverwrite != null) {\n                configurator.setSkipOverwrite(skipOverwrite);\n            }\n\n            if (removeOperationIdPrefix != null) {\n                configurator.setRemoveOperationIdPrefix(removeOperationIdPrefix);\n            }\n\n            if (skipOperationExample != null) {\n                configurator.setSkipOperationExample(skipOperationExample);\n            }\n\n            if (isNotEmpty(inputSpec)) {\n                configurator.setInputSpec(inputSpec);\n            }\n\n            if (isNotEmpty(gitHost)) {\n                configurator.setGitHost(gitHost);\n            }\n\n            if (isNotEmpty(gitUserId)) {\n                configurator.setGitUserId(gitUserId);\n            }\n\n            if (isNotEmpty(gitRepoId)) {\n                configurator.setGitRepoId(gitRepoId);\n            }\n\n            if (isNotEmpty(ignoreFileOverride)) {\n                configurator.setIgnoreFileOverride(ignoreFileOverride);\n            }\n\n            if (isNotEmpty(httpUserAgent)) {\n                configurator.setHttpUserAgent(httpUserAgent);\n            }\n\n            if (skipValidateSpec != null) {\n                configurator.setValidateSpec(!skipValidateSpec);\n            }\n\n            if (strictSpec != null) {\n                configurator.setStrictSpecBehavior(strictSpec);\n            }\n\n            if (logToStderr != null) {\n                configurator.setLogToStderr(logToStderr);\n            }\n\n            if (enablePostProcessFile != null) {\n                configurator.setEnablePostProcessFile(enablePostProcessFile);\n            }\n\n            if (generateAliasAsModel  != null) {\n                configurator.setGenerateAliasAsModel(generateAliasAsModel);\n            }\n\n            if (isNotEmpty(generatorName)) {\n                configurator.setGeneratorName(generatorName);\n            } else {\n                LOGGER.error(\"A generator name (generatorName) is required.\");\n                throw new MojoExecutionException(\"The generator requires 'generatorName'. Refer to documentation for a list of options.\");\n            }\n\n            configurator.setOutputDir(output.getAbsolutePath());\n\n            if (isNotEmpty(auth)) {\n                configurator.setAuth(auth);\n            }\n\n            if (isNotEmpty(apiPackage)) {\n                configurator.setApiPackage(apiPackage);\n            }\n\n            if (isNotEmpty(modelPackage)) {\n                configurator.setModelPackage(modelPackage);\n            }\n\n            if (isNotEmpty(invokerPackage)) {\n                configurator.setInvokerPackage(invokerPackage);\n            }\n\n            if (isNotEmpty(packageName)) {\n                configurator.setPackageName(packageName);\n            }\n\n            if (isNotEmpty(groupId)) {\n                configurator.setGroupId(groupId);\n            }\n\n            if (isNotEmpty(artifactId)) {\n                configurator.setArtifactId(artifactId);\n            }\n\n            if (isNotEmpty(artifactVersion)) {\n                configurator.setArtifactVersion(artifactVersion);\n            }\n\n            if (isNotEmpty(library)) {\n                configurator.setLibrary(library);\n            }\n\n            if (isNotEmpty(modelNamePrefix)) {\n                configurator.setModelNamePrefix(modelNamePrefix);\n            }\n\n            if (isNotEmpty(modelNameSuffix)) {\n                configurator.setModelNameSuffix(modelNameSuffix);\n            }\n\n            if (null != templateDirectory) {\n                configurator.setTemplateDir(templateDirectory.getAbsolutePath());\n            }\n\n            if (StringUtils.isNotEmpty(templateResourcePath)) {\n                if (null != templateDirectory) {\n                    LOGGER.warn(\"Both templateDirectory and templateResourcePath were configured. templateResourcePath overwrites templateDirectory.\");\n                }\n                configurator.setTemplateDir(templateResourcePath);\n            }\n\n            if (null != engine) {\n                configurator.setTemplatingEngineName(engine);\n            }\n\n            // Set generation options\n            if (null != generateApis && generateApis) {\n                GlobalSettings.setProperty(CodegenConstants.APIS, apisToGenerate);\n            } else {\n                GlobalSettings.clearProperty(CodegenConstants.APIS);\n            }\n\n            if (null != generateModels && generateModels) {\n                GlobalSettings.setProperty(CodegenConstants.MODELS, modelsToGenerate);\n            } else {\n                GlobalSettings.clearProperty(CodegenConstants.MODELS);\n            }\n\n            if (null != generateSupportingFiles && generateSupportingFiles) {\n                GlobalSettings.setProperty(CodegenConstants.SUPPORTING_FILES, supportingFilesToGenerate);\n            } else {\n                GlobalSettings.clearProperty(CodegenConstants.SUPPORTING_FILES);\n            }\n\n            GlobalSettings.setProperty(CodegenConstants.MODEL_TESTS, generateModelTests.toString());\n            GlobalSettings.setProperty(CodegenConstants.MODEL_DOCS, generateModelDocumentation.toString());\n            GlobalSettings.setProperty(CodegenConstants.API_TESTS, generateApiTests.toString());\n            GlobalSettings.setProperty(CodegenConstants.API_DOCS, generateApiDocumentation.toString());\n            GlobalSettings.setProperty(CodegenConstants.WITH_XML, withXml.toString());\n\n            if (configOptions != null) {\n                // Retained for backwards-compataibility with configOptions -> instantiation-types\n                if (instantiationTypes == null && configOptions.containsKey(\"instantiation-types\")) {\n                    applyInstantiationTypesKvp(configOptions.get(\"instantiation-types\").toString(),\n                            configurator);\n                }\n\n                // Retained for backwards-compatibility with configOptions -> import-mappings\n                if (importMappings == null && configOptions.containsKey(\"import-mappings\")) {\n                    applyImportMappingsKvp(configOptions.get(\"import-mappings\").toString(),\n                            configurator);\n                }\n\n                // Retained for backwards-compataibility with configOptions -> type-mappings\n                if (typeMappings == null && configOptions.containsKey(\"type-mappings\")) {\n                    applyTypeMappingsKvp(configOptions.get(\"type-mappings\").toString(), configurator);\n                }\n\n                // Retained for backwards-compataibility with configOptions -> language-specific-primitives\n                if (languageSpecificPrimitives == null && configOptions.containsKey(\"language-specific-primitives\")) {\n                    applyLanguageSpecificPrimitivesCsv(configOptions\n                            .get(\"language-specific-primitives\").toString(), configurator);\n                }\n\n                // Retained for backwards-compataibility with configOptions -> additional-properties\n                if (additionalProperties == null && configOptions.containsKey(\"additional-properties\")) {\n                    applyAdditionalPropertiesKvp(configOptions.get(\"additional-properties\").toString(),\n                            configurator);\n                }\n\n                if (serverVariableOverrides == null && configOptions.containsKey(\"server-variables\")) {\n                    applyServerVariablesKvp(configOptions.get(\"server-variables\").toString(), configurator);\n                }\n\n                // Retained for backwards-compataibility with configOptions -> reserved-words-mappings\n                if (reservedWordsMappings == null && configOptions.containsKey(\"reserved-words-mappings\")) {\n                    applyReservedWordsMappingsKvp(configOptions.get(\"reserved-words-mappings\")\n                            .toString(), configurator);\n                }\n            }\n\n            // Apply Instantiation Types\n            if (instantiationTypes != null && (configOptions == null || !configOptions.containsKey(\"instantiation-types\"))) {\n                applyInstantiationTypesKvpList(instantiationTypes, configurator);\n            }\n\n            // Apply Import Mappings\n            if (importMappings != null && (configOptions == null || !configOptions.containsKey(\"import-mappings\"))) {\n                applyImportMappingsKvpList(importMappings, configurator);\n            }\n\n            // Apply Type Mappings\n            if (typeMappings != null && (configOptions == null || !configOptions.containsKey(\"type-mappings\"))) {\n                applyTypeMappingsKvpList(typeMappings, configurator);\n            }\n\n            // Apply Language Specific Primitives\n            if (languageSpecificPrimitives != null\n                    && (configOptions == null || !configOptions.containsKey(\"language-specific-primitives\"))) {\n                applyLanguageSpecificPrimitivesCsvList(languageSpecificPrimitives, configurator);\n            }\n\n            // Apply Additional Properties\n            if (additionalProperties != null && (configOptions == null || !configOptions.containsKey(\"additional-properties\"))) {\n                applyAdditionalPropertiesKvpList(additionalProperties, configurator);\n            }\n\n            if (serverVariableOverrides != null && (configOptions == null || !configOptions.containsKey(\"server-variables\"))) {\n                applyServerVariablesKvpList(serverVariableOverrides, configurator);\n            }\n\n            // Apply Reserved Words Mappings\n            if (reservedWordsMappings != null && (configOptions == null || !configOptions.containsKey(\"reserved-words-mappings\"))) {\n                applyReservedWordsMappingsKvpList(reservedWordsMappings, configurator);\n            }\n\n            if (globalProperties == null) {\n                globalProperties = new HashMap<>();\n            }\n\n            if (environmentVariables != null && environmentVariables.size() > 0) {\n                globalProperties.putAll(environmentVariables);\n                getLog().warn(\"environmentVariables is deprecated and will be removed in version 5.1. Use globalProperties instead.\");\n            }\n\n            for (String key : globalProperties.keySet()) {\n                String value = globalProperties.get(key);\n                if (value != null) {\n                    configurator.addGlobalProperty(key, value);\n                }\n            }\n\n            final ClientOptInput input = configurator.toClientOptInput();\n            final CodegenConfig config = input.getConfig();\n\n            if (configOptions != null) {\n                for (CliOption langCliOption : config.cliOptions()) {\n                    if (configOptions.containsKey(langCliOption.getOpt())) {\n                        input.getConfig().additionalProperties()\n                                .put(langCliOption.getOpt(), configOptions.get(langCliOption.getOpt()));\n                    }\n                }\n            }\n\n            if (configHelp) {\n                for (CliOption langCliOption : config.cliOptions()) {\n                    System.out.println(\"\\t\" + langCliOption.getOpt());\n                    System.out.println(\"\\t    \"\n                            + langCliOption.getOptionHelp().replaceAll(\"\\n\", \"\\n\\t    \"));\n                    System.out.println();\n                }\n                return;\n            }\n            adjustAdditionalProperties(config);\n            new DefaultGenerator().opts(input).generate();\n\n            if (buildContext != null) {\n                buildContext.refresh(new File(getCompileSourceRoot()));\n            }\n\n            // Store a checksum of the input spec\n            File storedInputSpecHashFile = getHashFile(inputSpecFile);\n            String inputSpecHash = calculateInputSpecHash(inputSpecFile);\n\n            if (storedInputSpecHashFile.getParent() != null && !new File(storedInputSpecHashFile.getParent()).exists()) {\n                File parent = new File(storedInputSpecHashFile.getParent());\n                parent.mkdirs();\n            }\n            Files.asCharSink(storedInputSpecHashFile, StandardCharsets.UTF_8).write(inputSpecHash);\n\n        } catch (Exception e) {\n            // Maven logs exceptions thrown by plugins only if invoked with -e\n            // I find it annoying to jump through hoops to get basic diagnostic information,\n            // so let's log it in any case:\n            if (buildContext != null) {\n                buildContext.addMessage(inputSpecFile, 0, 0, \"unexpected error in Open-API generation\", BuildContext.SEVERITY_WARNING, e);\n            }\n            getLog().error(e);\n            throw new MojoExecutionException(\n                    \"Code generation failed. See above for the full exception.\");\n        }\n    }",
  "abstract_func_before": "@Override\n    public void execute() throws MojoExecutionException {\n        File VAR_0 = new File(VAR_1);\n        addCompileSourceRootIfConfigured();\n\n        try {\n            if (VAR_2.TRUE.equals(VAR_3)) {\n                getLog().info(\"Code generation is skipped.\");\n                return;\n            }\n\n            if (VAR_4 != null && VAR_1 != null ) {\n                if (VAR_4.isIncremental() &&\n                        VAR_0.exists() &&\n                        !VAR_4.hasDelta(VAR_0)) {\n                    getLog().info(\n                            \"Code generation is skipped in delta-build because source-json was not modified.\");\n                    return;\n                }\n            }\n\n            if (VAR_2.TRUE.equals(VAR_5) && VAR_0.exists()) {\n                File VAR_6 = getHashFile(VAR_0);\n                if (VAR_6.exists()) {\n                    String VAR_7 = null;\n                    try {\n                        VAR_7 = calculateInputSpecHash(VAR_0);\n                    } catch (IOException VAR_8) {\n                        VAR_8.printStackTrace();\n                    }\n                    @SuppressWarnings(\"UnstableApiUsage\")\n                    String VAR_9 = VAR_10.asCharSource(VAR_6, VAR_11.UTF_8).read();\n                    if (VAR_9.equals(VAR_7)) {\n                        getLog().info(\n                                \"Code generation is skipped because input was unchanged\");\n                        return;\n                    }\n                }\n            }\n\n            /* COMMENT_0 */\n            CodegenConfigurator VAR_12 = VAR_13.fromFile(VAR_14);\n\n            /* COMMENT_1 */\n            if (VAR_12 == null) {\n                VAR_12 = new CodegenConfigurator();\n            }\n\n            VAR_12.setVerbose(VAR_15);\n\n            if (VAR_16 != null) {\n                VAR_12.setSkipOverwrite(VAR_16);\n            }\n\n            if (VAR_17 != null) {\n                VAR_12.setRemoveOperationIdPrefix(VAR_17);\n            }\n\n            if (VAR_18 != null) {\n                VAR_12.setSkipOperationExample(VAR_18);\n            }\n\n            if (isNotEmpty(VAR_1)) {\n                VAR_12.setInputSpec(VAR_1);\n            }\n\n            if (isNotEmpty(VAR_19)) {\n                VAR_12.setGitHost(VAR_19);\n            }\n\n            if (isNotEmpty(VAR_20)) {\n                VAR_12.setGitUserId(VAR_20);\n            }\n\n            if (isNotEmpty(VAR_21)) {\n                VAR_12.setGitRepoId(VAR_21);\n            }\n\n            if (isNotEmpty(VAR_22)) {\n                VAR_12.setIgnoreFileOverride(VAR_22);\n            }\n\n            if (isNotEmpty(VAR_23)) {\n                VAR_12.setHttpUserAgent(VAR_23);\n            }\n\n            if (VAR_24 != null) {\n                VAR_12.setValidateSpec(!VAR_24);\n            }\n\n            if (VAR_25 != null) {\n                VAR_12.setStrictSpecBehavior(VAR_25);\n            }\n\n            if (VAR_26 != null) {\n                VAR_12.setLogToStderr(VAR_26);\n            }\n\n            if (VAR_27 != null) {\n                VAR_12.setEnablePostProcessFile(VAR_27);\n            }\n\n            if (VAR_28  != null) {\n                VAR_12.setGenerateAliasAsModel(VAR_28);\n            }\n\n            if (isNotEmpty(VAR_29)) {\n                VAR_12.setGeneratorName(VAR_29);\n            } else {\n                VAR_30.error(\"A generator name (generatorName) is required.\");\n                throw new MojoExecutionException(\"The generator requires 'generatorName'. Refer to documentation for a list of options.\");\n            }\n\n            VAR_12.setOutputDir(VAR_31.getAbsolutePath());\n\n            if (isNotEmpty(VAR_32)) {\n                VAR_12.setAuth(VAR_32);\n            }\n\n            if (isNotEmpty(VAR_33)) {\n                VAR_12.setApiPackage(VAR_33);\n            }\n\n            if (isNotEmpty(VAR_34)) {\n                VAR_12.setModelPackage(VAR_34);\n            }\n\n            if (isNotEmpty(VAR_35)) {\n                VAR_12.setInvokerPackage(VAR_35);\n            }\n\n            if (isNotEmpty(VAR_36)) {\n                VAR_12.setPackageName(VAR_36);\n            }\n\n            if (isNotEmpty(VAR_37)) {\n                VAR_12.setGroupId(VAR_37);\n            }\n\n            if (isNotEmpty(VAR_38)) {\n                VAR_12.setArtifactId(VAR_38);\n            }\n\n            if (isNotEmpty(VAR_39)) {\n                VAR_12.setArtifactVersion(VAR_39);\n            }\n\n            if (isNotEmpty(VAR_40)) {\n                VAR_12.setLibrary(VAR_40);\n            }\n\n            if (isNotEmpty(VAR_41)) {\n                VAR_12.setModelNamePrefix(VAR_41);\n            }\n\n            if (isNotEmpty(VAR_42)) {\n                VAR_12.setModelNameSuffix(VAR_42);\n            }\n\n            if (null != VAR_43) {\n                VAR_12.setTemplateDir(VAR_43.getAbsolutePath());\n            }\n\n            if (VAR_44.isNotEmpty(VAR_45)) {\n                if (null != VAR_43) {\n                    VAR_30.warn(\"Both templateDirectory and templateResourcePath were configured. templateResourcePath overwrites templateDirectory.\");\n                }\n                VAR_12.setTemplateDir(VAR_45);\n            }\n\n            if (null != VAR_46) {\n                VAR_12.setTemplatingEngineName(VAR_46);\n            }\n\n            /* COMMENT_2 */\n            if (null != VAR_47 && VAR_47) {\n                VAR_48.setProperty(VAR_49.APIS, VAR_50);\n            } else {\n                VAR_48.clearProperty(VAR_49.APIS);\n            }\n\n            if (null != VAR_51 && VAR_51) {\n                VAR_48.setProperty(VAR_49.MODELS, VAR_52);\n            } else {\n                VAR_48.clearProperty(VAR_49.MODELS);\n            }\n\n            if (null != VAR_53 && VAR_53) {\n                VAR_48.setProperty(VAR_49.SUPPORTING_FILES, VAR_54);\n            } else {\n                VAR_48.clearProperty(VAR_49.SUPPORTING_FILES);\n            }\n\n            VAR_48.setProperty(VAR_49.MODEL_TESTS, VAR_55.toString());\n            VAR_48.setProperty(VAR_49.MODEL_DOCS, VAR_56.toString());\n            VAR_48.setProperty(VAR_49.API_TESTS, VAR_57.toString());\n            VAR_48.setProperty(VAR_49.API_DOCS, VAR_58.toString());\n            VAR_48.setProperty(VAR_49.WITH_XML, VAR_59.toString());\n\n            if (VAR_60 != null) {\n                /* COMMENT_3 */\n                if (VAR_61 == null && VAR_60.containsKey(\"instantiation-types\")) {\n                    applyInstantiationTypesKvp(VAR_60.get(\"instantiation-types\").toString(),\n                            VAR_12);\n                }\n\n                /* COMMENT_4 */\n                if (VAR_62 == null && VAR_60.containsKey(\"import-mappings\")) {\n                    applyImportMappingsKvp(VAR_60.get(\"import-mappings\").toString(),\n                            VAR_12);\n                }\n\n                /* COMMENT_5 */\n                if (VAR_63 == null && VAR_60.containsKey(\"type-mappings\")) {\n                    applyTypeMappingsKvp(VAR_60.get(\"type-mappings\").toString(), VAR_12);\n                }\n\n                /* COMMENT_6 */\n                if (VAR_64 == null && VAR_60.containsKey(\"language-specific-primitives\")) {\n                    applyLanguageSpecificPrimitivesCsv(VAR_60\n                            .get(\"language-specific-primitives\").toString(), VAR_12);\n                }\n\n                /* COMMENT_7 */\n                if (VAR_65 == null && VAR_60.containsKey(\"additional-properties\")) {\n                    applyAdditionalPropertiesKvp(VAR_60.get(\"additional-properties\").toString(),\n                            VAR_12);\n                }\n\n                if (VAR_66 == null && VAR_60.containsKey(\"server-variables\")) {\n                    applyServerVariablesKvp(VAR_60.get(\"server-variables\").toString(), VAR_12);\n                }\n\n                /* COMMENT_8 */\n                if (VAR_67 == null && VAR_60.containsKey(\"reserved-words-mappings\")) {\n                    applyReservedWordsMappingsKvp(VAR_60.get(\"reserved-words-mappings\")\n                            .toString(), VAR_12);\n                }\n            }\n\n            /* COMMENT_9 */\n            if (VAR_61 != null && (VAR_60 == null || !VAR_60.containsKey(\"instantiation-types\"))) {\n                applyInstantiationTypesKvpList(VAR_61, VAR_12);\n            }\n\n            /* COMMENT_10 */\n            if (VAR_62 != null && (VAR_60 == null || !VAR_60.containsKey(\"import-mappings\"))) {\n                applyImportMappingsKvpList(VAR_62, VAR_12);\n            }\n\n            /* COMMENT_11 */\n            if (VAR_63 != null && (VAR_60 == null || !VAR_60.containsKey(\"type-mappings\"))) {\n                applyTypeMappingsKvpList(VAR_63, VAR_12);\n            }\n\n            /* COMMENT_12 */\n            if (VAR_64 != null\n                    && (VAR_60 == null || !VAR_60.containsKey(\"language-specific-primitives\"))) {\n                applyLanguageSpecificPrimitivesCsvList(VAR_64, VAR_12);\n            }\n\n            /* COMMENT_13 */\n            if (VAR_65 != null && (VAR_60 == null || !VAR_60.containsKey(\"additional-properties\"))) {\n                applyAdditionalPropertiesKvpList(VAR_65, VAR_12);\n            }\n\n            if (VAR_66 != null && (VAR_60 == null || !VAR_60.containsKey(\"server-variables\"))) {\n                applyServerVariablesKvpList(VAR_66, VAR_12);\n            }\n\n            /* COMMENT_14 */\n            if (VAR_67 != null && (VAR_60 == null || !VAR_60.containsKey(\"reserved-words-mappings\"))) {\n                applyReservedWordsMappingsKvpList(VAR_67, VAR_12);\n            }\n\n            if (VAR_68 == null) {\n                VAR_68 = new HashMap<>();\n            }\n\n            if (VAR_69 != null && VAR_69.size() > 0) {\n                VAR_68.putAll(VAR_69);\n                getLog().warn(\"environmentVariables is deprecated and will be removed in version 5.1. Use globalProperties instead.\");\n            }\n\n            for (String VAR_70 : VAR_68.keySet()) {\n                String VAR_71 = VAR_68.get(VAR_70);\n                if (VAR_71 != null) {\n                    VAR_12.addGlobalProperty(VAR_70, VAR_71);\n                }\n            }\n\n            final ClientOptInput VAR_72 = VAR_12.toClientOptInput();\n            final CodegenConfig VAR_73 = VAR_72.getConfig();\n\n            if (VAR_60 != null) {\n                for (CliOption VAR_74 : VAR_73.cliOptions()) {\n                    if (VAR_60.containsKey(VAR_74.getOpt())) {\n                        VAR_72.getConfig().additionalProperties()\n                                .put(VAR_74.getOpt(), VAR_60.get(VAR_74.getOpt()));\n                    }\n                }\n            }\n\n            if (VAR_75) {\n                for (CliOption VAR_74 : VAR_73.cliOptions()) {\n                    VAR_76.out.println(\"\\t\" + VAR_74.getOpt());\n                    VAR_76.out.println(\"\\t    \"\n                            + VAR_74.getOptionHelp().replaceAll(\"\\n\", \"\\n\\t    \"));\n                    VAR_76.out.println();\n                }\n                return;\n            }\n            adjustAdditionalProperties(VAR_73);\n            new DefaultGenerator().opts(VAR_72).generate();\n\n            if (VAR_4 != null) {\n                VAR_4.refresh(new File(getCompileSourceRoot()));\n            }\n\n            /* COMMENT_15 */\n            File VAR_6 = getHashFile(VAR_0);\n            String VAR_7 = calculateInputSpecHash(VAR_0);\n\n            if (VAR_6.getParent() != null && !new File(VAR_6.getParent()).exists()) {\n                File VAR_77 = new File(VAR_6.getParent());\n                VAR_77.mkdirs();\n            }\n            VAR_10.asCharSink(VAR_6, VAR_11.UTF_8).write(VAR_7);\n\n        } catch (Exception VAR_78) {\n            /* COMMENT_16 */\n            /* COMMENT_17 */\n            /* COMMENT_18 */\n            if (VAR_4 != null) {\n                VAR_4.addMessage(VAR_0, 0, 0, \"unexpected error in Open-API generation\", VAR_79.SEVERITY_WARNING, VAR_78);\n            }\n            getLog().error(VAR_78);\n            throw new MojoExecutionException(\n                    \"Code generation failed. See above for the full exception.\");\n        }\n    }",
  "func_graph_path_before": "OpenAPITools/openapi-generator/6445ea6511a6ddab64c86ae263937dc90650c98c/CodeGenMojo.java/vul/before/0.json",
  "func": "@Override\n    public void execute() throws MojoExecutionException {\n        File inputSpecFile = new File(inputSpec);\n        addCompileSourceRootIfConfigured();\n\n        try {\n            if (Boolean.TRUE.equals(skip)) {\n                getLog().info(\"Code generation is skipped.\");\n                return;\n            }\n\n            if (buildContext != null && inputSpec != null ) {\n                if (buildContext.isIncremental() &&\n                        inputSpecFile.exists() &&\n                        !buildContext.hasDelta(inputSpecFile)) {\n                    getLog().info(\n                            \"Code generation is skipped in delta-build because source-json was not modified.\");\n                    return;\n                }\n            }\n\n            if (Boolean.TRUE.equals(skipIfSpecIsUnchanged) && inputSpecFile.exists()) {\n                File storedInputSpecHashFile = getHashFile(inputSpecFile);\n                if (storedInputSpecHashFile.exists()) {\n                    String inputSpecHash = null;\n                    try {\n                        inputSpecHash = calculateInputSpecHash(inputSpecFile);\n                    } catch (IOException ex) {\n                        ex.printStackTrace();\n                    }\n                    @SuppressWarnings(\"UnstableApiUsage\")\n                    String storedInputSpecHash = Files.asCharSource(storedInputSpecHashFile, StandardCharsets.UTF_8).read();\n                    if (storedInputSpecHash.equals(inputSpecHash)) {\n                        getLog().info(\n                                \"Code generation is skipped because input was unchanged\");\n                        return;\n                    }\n                }\n            }\n\n            // attempt to read from config file\n            CodegenConfigurator configurator = CodegenConfigurator.fromFile(configurationFile);\n\n            // if a config file wasn't specified or we were unable to read it\n            if (configurator == null) {\n                configurator = new CodegenConfigurator();\n            }\n\n            configurator.setVerbose(verbose);\n\n            if (skipOverwrite != null) {\n                configurator.setSkipOverwrite(skipOverwrite);\n            }\n\n            if (removeOperationIdPrefix != null) {\n                configurator.setRemoveOperationIdPrefix(removeOperationIdPrefix);\n            }\n\n            if (skipOperationExample != null) {\n                configurator.setSkipOperationExample(skipOperationExample);\n            }\n\n            if (isNotEmpty(inputSpec)) {\n                configurator.setInputSpec(inputSpec);\n            }\n\n            if (isNotEmpty(gitHost)) {\n                configurator.setGitHost(gitHost);\n            }\n\n            if (isNotEmpty(gitUserId)) {\n                configurator.setGitUserId(gitUserId);\n            }\n\n            if (isNotEmpty(gitRepoId)) {\n                configurator.setGitRepoId(gitRepoId);\n            }\n\n            if (isNotEmpty(ignoreFileOverride)) {\n                configurator.setIgnoreFileOverride(ignoreFileOverride);\n            }\n\n            if (isNotEmpty(httpUserAgent)) {\n                configurator.setHttpUserAgent(httpUserAgent);\n            }\n\n            if (skipValidateSpec != null) {\n                configurator.setValidateSpec(!skipValidateSpec);\n            }\n\n            if (strictSpec != null) {\n                configurator.setStrictSpecBehavior(strictSpec);\n            }\n\n            if (logToStderr != null) {\n                configurator.setLogToStderr(logToStderr);\n            }\n\n            if (enablePostProcessFile != null) {\n                configurator.setEnablePostProcessFile(enablePostProcessFile);\n            }\n\n            if (generateAliasAsModel  != null) {\n                configurator.setGenerateAliasAsModel(generateAliasAsModel);\n            }\n\n            if (isNotEmpty(generatorName)) {\n                configurator.setGeneratorName(generatorName);\n            } else {\n                LOGGER.error(\"A generator name (generatorName) is required.\");\n                throw new MojoExecutionException(\"The generator requires 'generatorName'. Refer to documentation for a list of options.\");\n            }\n\n            configurator.setOutputDir(output.getAbsolutePath());\n\n            if (isNotEmpty(auth)) {\n                configurator.setAuth(auth);\n            }\n\n            if (isNotEmpty(apiPackage)) {\n                configurator.setApiPackage(apiPackage);\n            }\n\n            if (isNotEmpty(modelPackage)) {\n                configurator.setModelPackage(modelPackage);\n            }\n\n            if (isNotEmpty(invokerPackage)) {\n                configurator.setInvokerPackage(invokerPackage);\n            }\n\n            if (isNotEmpty(packageName)) {\n                configurator.setPackageName(packageName);\n            }\n\n            if (isNotEmpty(groupId)) {\n                configurator.setGroupId(groupId);\n            }\n\n            if (isNotEmpty(artifactId)) {\n                configurator.setArtifactId(artifactId);\n            }\n\n            if (isNotEmpty(artifactVersion)) {\n                configurator.setArtifactVersion(artifactVersion);\n            }\n\n            if (isNotEmpty(library)) {\n                configurator.setLibrary(library);\n            }\n\n            if (isNotEmpty(modelNamePrefix)) {\n                configurator.setModelNamePrefix(modelNamePrefix);\n            }\n\n            if (isNotEmpty(modelNameSuffix)) {\n                configurator.setModelNameSuffix(modelNameSuffix);\n            }\n\n            if (null != templateDirectory) {\n                configurator.setTemplateDir(templateDirectory.getAbsolutePath());\n            }\n\n            if (StringUtils.isNotEmpty(templateResourcePath)) {\n                if (null != templateDirectory) {\n                    LOGGER.warn(\"Both templateDirectory and templateResourcePath were configured. templateResourcePath overwrites templateDirectory.\");\n                }\n                configurator.setTemplateDir(templateResourcePath);\n            }\n\n            if (null != engine) {\n                configurator.setTemplatingEngineName(engine);\n            }\n\n            // Set generation options\n            if (null != generateApis && generateApis) {\n                GlobalSettings.setProperty(CodegenConstants.APIS, apisToGenerate);\n            } else {\n                GlobalSettings.clearProperty(CodegenConstants.APIS);\n            }\n\n            if (null != generateModels && generateModels) {\n                GlobalSettings.setProperty(CodegenConstants.MODELS, modelsToGenerate);\n            } else {\n                GlobalSettings.clearProperty(CodegenConstants.MODELS);\n            }\n\n            if (null != generateSupportingFiles && generateSupportingFiles) {\n                GlobalSettings.setProperty(CodegenConstants.SUPPORTING_FILES, supportingFilesToGenerate);\n            } else {\n                GlobalSettings.clearProperty(CodegenConstants.SUPPORTING_FILES);\n            }\n\n            GlobalSettings.setProperty(CodegenConstants.MODEL_TESTS, generateModelTests.toString());\n            GlobalSettings.setProperty(CodegenConstants.MODEL_DOCS, generateModelDocumentation.toString());\n            GlobalSettings.setProperty(CodegenConstants.API_TESTS, generateApiTests.toString());\n            GlobalSettings.setProperty(CodegenConstants.API_DOCS, generateApiDocumentation.toString());\n            GlobalSettings.setProperty(CodegenConstants.WITH_XML, withXml.toString());\n\n            if (configOptions != null) {\n                // Retained for backwards-compataibility with configOptions -> instantiation-types\n                if (instantiationTypes == null && configOptions.containsKey(\"instantiation-types\")) {\n                    applyInstantiationTypesKvp(configOptions.get(\"instantiation-types\").toString(),\n                            configurator);\n                }\n\n                // Retained for backwards-compatibility with configOptions -> import-mappings\n                if (importMappings == null && configOptions.containsKey(\"import-mappings\")) {\n                    applyImportMappingsKvp(configOptions.get(\"import-mappings\").toString(),\n                            configurator);\n                }\n\n                // Retained for backwards-compataibility with configOptions -> type-mappings\n                if (typeMappings == null && configOptions.containsKey(\"type-mappings\")) {\n                    applyTypeMappingsKvp(configOptions.get(\"type-mappings\").toString(), configurator);\n                }\n\n                // Retained for backwards-compataibility with configOptions -> language-specific-primitives\n                if (languageSpecificPrimitives == null && configOptions.containsKey(\"language-specific-primitives\")) {\n                    applyLanguageSpecificPrimitivesCsv(configOptions\n                            .get(\"language-specific-primitives\").toString(), configurator);\n                }\n\n                // Retained for backwards-compataibility with configOptions -> additional-properties\n                if (additionalProperties == null && configOptions.containsKey(\"additional-properties\")) {\n                    applyAdditionalPropertiesKvp(configOptions.get(\"additional-properties\").toString(),\n                            configurator);\n                }\n\n                if (serverVariableOverrides == null && configOptions.containsKey(\"server-variables\")) {\n                    applyServerVariablesKvp(configOptions.get(\"server-variables\").toString(), configurator);\n                }\n\n                // Retained for backwards-compataibility with configOptions -> reserved-words-mappings\n                if (reservedWordsMappings == null && configOptions.containsKey(\"reserved-words-mappings\")) {\n                    applyReservedWordsMappingsKvp(configOptions.get(\"reserved-words-mappings\")\n                            .toString(), configurator);\n                }\n            }\n\n            // Apply Instantiation Types\n            if (instantiationTypes != null && (configOptions == null || !configOptions.containsKey(\"instantiation-types\"))) {\n                applyInstantiationTypesKvpList(instantiationTypes, configurator);\n            }\n\n            // Apply Import Mappings\n            if (importMappings != null && (configOptions == null || !configOptions.containsKey(\"import-mappings\"))) {\n                applyImportMappingsKvpList(importMappings, configurator);\n            }\n\n            // Apply Type Mappings\n            if (typeMappings != null && (configOptions == null || !configOptions.containsKey(\"type-mappings\"))) {\n                applyTypeMappingsKvpList(typeMappings, configurator);\n            }\n\n            // Apply Language Specific Primitives\n            if (languageSpecificPrimitives != null\n                    && (configOptions == null || !configOptions.containsKey(\"language-specific-primitives\"))) {\n                applyLanguageSpecificPrimitivesCsvList(languageSpecificPrimitives, configurator);\n            }\n\n            // Apply Additional Properties\n            if (additionalProperties != null && (configOptions == null || !configOptions.containsKey(\"additional-properties\"))) {\n                applyAdditionalPropertiesKvpList(additionalProperties, configurator);\n            }\n\n            if (serverVariableOverrides != null && (configOptions == null || !configOptions.containsKey(\"server-variables\"))) {\n                applyServerVariablesKvpList(serverVariableOverrides, configurator);\n            }\n\n            // Apply Reserved Words Mappings\n            if (reservedWordsMappings != null && (configOptions == null || !configOptions.containsKey(\"reserved-words-mappings\"))) {\n                applyReservedWordsMappingsKvpList(reservedWordsMappings, configurator);\n            }\n\n            if (globalProperties == null) {\n                globalProperties = new HashMap<>();\n            }\n\n            if (environmentVariables != null && environmentVariables.size() > 0) {\n                globalProperties.putAll(environmentVariables);\n                getLog().warn(\"environmentVariables is deprecated and will be removed in version 5.1. Use globalProperties instead.\");\n            }\n\n            for (String key : globalProperties.keySet()) {\n                String value = globalProperties.get(key);\n                if (value != null) {\n                    configurator.addGlobalProperty(key, value);\n                }\n            }\n\n            final ClientOptInput input = configurator.toClientOptInput();\n            final CodegenConfig config = input.getConfig();\n\n            if (configOptions != null) {\n                for (CliOption langCliOption : config.cliOptions()) {\n                    if (configOptions.containsKey(langCliOption.getOpt())) {\n                        input.getConfig().additionalProperties()\n                                .put(langCliOption.getOpt(), configOptions.get(langCliOption.getOpt()));\n                    }\n                }\n            }\n\n            if (configHelp) {\n                for (CliOption langCliOption : config.cliOptions()) {\n                    System.out.println(\"\\t\" + langCliOption.getOpt());\n                    System.out.println(\"\\t    \"\n                            + langCliOption.getOptionHelp().replaceAll(\"\\n\", \"\\n\\t    \"));\n                    System.out.println();\n                }\n                return;\n            }\n            adjustAdditionalProperties(config);\n            new DefaultGenerator().opts(input).generate();\n\n            if (buildContext != null) {\n                buildContext.refresh(new File(getCompileSourceRoot()));\n            }\n\n            // Store a checksum of the input spec\n            File storedInputSpecHashFile = getHashFile(inputSpecFile);\n            String inputSpecHash = calculateInputSpecHash(inputSpecFile);\n\n            if (storedInputSpecHashFile.getParent() != null && !new File(storedInputSpecHashFile.getParent()).exists()) {\n                File parent = new File(storedInputSpecHashFile.getParent());\n                if (!parent.mkdirs()) {\n                    throw new RuntimeException(\"Failed to create the folder \" + parent.getAbsolutePath() +\n                                               \" to store the checksum of the input spec.\");\n                }\n            }\n            Files.asCharSink(storedInputSpecHashFile, StandardCharsets.UTF_8).write(inputSpecHash);\n\n        } catch (Exception e) {\n            // Maven logs exceptions thrown by plugins only if invoked with -e\n            // I find it annoying to jump through hoops to get basic diagnostic information,\n            // so let's log it in any case:\n            if (buildContext != null) {\n                buildContext.addMessage(inputSpecFile, 0, 0, \"unexpected error in Open-API generation\", BuildContext.SEVERITY_WARNING, e);\n            }\n            getLog().error(e);\n            throw new MojoExecutionException(\n                    \"Code generation failed. See above for the full exception.\");\n        }\n    }",
  "abstract_func": "@Override\n    public void execute() throws MojoExecutionException {\n        File VAR_0 = new File(VAR_1);\n        addCompileSourceRootIfConfigured();\n\n        try {\n            if (VAR_2.TRUE.equals(VAR_3)) {\n                getLog().info(\"Code generation is skipped.\");\n                return;\n            }\n\n            if (VAR_4 != null && VAR_1 != null ) {\n                if (VAR_4.isIncremental() &&\n                        VAR_0.exists() &&\n                        !VAR_4.hasDelta(VAR_0)) {\n                    getLog().info(\n                            \"Code generation is skipped in delta-build because source-json was not modified.\");\n                    return;\n                }\n            }\n\n            if (VAR_2.TRUE.equals(VAR_5) && VAR_0.exists()) {\n                File VAR_6 = getHashFile(VAR_0);\n                if (VAR_6.exists()) {\n                    String VAR_7 = null;\n                    try {\n                        VAR_7 = calculateInputSpecHash(VAR_0);\n                    } catch (IOException VAR_8) {\n                        VAR_8.printStackTrace();\n                    }\n                    @SuppressWarnings(\"UnstableApiUsage\")\n                    String VAR_9 = VAR_10.asCharSource(VAR_6, VAR_11.UTF_8).read();\n                    if (VAR_9.equals(VAR_7)) {\n                        getLog().info(\n                                \"Code generation is skipped because input was unchanged\");\n                        return;\n                    }\n                }\n            }\n\n            /* COMMENT_0 */\n            CodegenConfigurator VAR_12 = VAR_13.fromFile(VAR_14);\n\n            /* COMMENT_1 */\n            if (VAR_12 == null) {\n                VAR_12 = new CodegenConfigurator();\n            }\n\n            VAR_12.setVerbose(VAR_15);\n\n            if (VAR_16 != null) {\n                VAR_12.setSkipOverwrite(VAR_16);\n            }\n\n            if (VAR_17 != null) {\n                VAR_12.setRemoveOperationIdPrefix(VAR_17);\n            }\n\n            if (VAR_18 != null) {\n                VAR_12.setSkipOperationExample(VAR_18);\n            }\n\n            if (isNotEmpty(VAR_1)) {\n                VAR_12.setInputSpec(VAR_1);\n            }\n\n            if (isNotEmpty(VAR_19)) {\n                VAR_12.setGitHost(VAR_19);\n            }\n\n            if (isNotEmpty(VAR_20)) {\n                VAR_12.setGitUserId(VAR_20);\n            }\n\n            if (isNotEmpty(VAR_21)) {\n                VAR_12.setGitRepoId(VAR_21);\n            }\n\n            if (isNotEmpty(VAR_22)) {\n                VAR_12.setIgnoreFileOverride(VAR_22);\n            }\n\n            if (isNotEmpty(VAR_23)) {\n                VAR_12.setHttpUserAgent(VAR_23);\n            }\n\n            if (VAR_24 != null) {\n                VAR_12.setValidateSpec(!VAR_24);\n            }\n\n            if (VAR_25 != null) {\n                VAR_12.setStrictSpecBehavior(VAR_25);\n            }\n\n            if (VAR_26 != null) {\n                VAR_12.setLogToStderr(VAR_26);\n            }\n\n            if (VAR_27 != null) {\n                VAR_12.setEnablePostProcessFile(VAR_27);\n            }\n\n            if (VAR_28  != null) {\n                VAR_12.setGenerateAliasAsModel(VAR_28);\n            }\n\n            if (isNotEmpty(VAR_29)) {\n                VAR_12.setGeneratorName(VAR_29);\n            } else {\n                VAR_30.error(\"A generator name (generatorName) is required.\");\n                throw new MojoExecutionException(\"The generator requires 'generatorName'. Refer to documentation for a list of options.\");\n            }\n\n            VAR_12.setOutputDir(VAR_31.getAbsolutePath());\n\n            if (isNotEmpty(VAR_32)) {\n                VAR_12.setAuth(VAR_32);\n            }\n\n            if (isNotEmpty(VAR_33)) {\n                VAR_12.setApiPackage(VAR_33);\n            }\n\n            if (isNotEmpty(VAR_34)) {\n                VAR_12.setModelPackage(VAR_34);\n            }\n\n            if (isNotEmpty(VAR_35)) {\n                VAR_12.setInvokerPackage(VAR_35);\n            }\n\n            if (isNotEmpty(VAR_36)) {\n                VAR_12.setPackageName(VAR_36);\n            }\n\n            if (isNotEmpty(VAR_37)) {\n                VAR_12.setGroupId(VAR_37);\n            }\n\n            if (isNotEmpty(VAR_38)) {\n                VAR_12.setArtifactId(VAR_38);\n            }\n\n            if (isNotEmpty(VAR_39)) {\n                VAR_12.setArtifactVersion(VAR_39);\n            }\n\n            if (isNotEmpty(VAR_40)) {\n                VAR_12.setLibrary(VAR_40);\n            }\n\n            if (isNotEmpty(VAR_41)) {\n                VAR_12.setModelNamePrefix(VAR_41);\n            }\n\n            if (isNotEmpty(VAR_42)) {\n                VAR_12.setModelNameSuffix(VAR_42);\n            }\n\n            if (null != VAR_43) {\n                VAR_12.setTemplateDir(VAR_43.getAbsolutePath());\n            }\n\n            if (VAR_44.isNotEmpty(VAR_45)) {\n                if (null != VAR_43) {\n                    VAR_30.warn(\"Both templateDirectory and templateResourcePath were configured. templateResourcePath overwrites templateDirectory.\");\n                }\n                VAR_12.setTemplateDir(VAR_45);\n            }\n\n            if (null != VAR_46) {\n                VAR_12.setTemplatingEngineName(VAR_46);\n            }\n\n            /* COMMENT_2 */\n            if (null != VAR_47 && VAR_47) {\n                VAR_48.setProperty(VAR_49.APIS, VAR_50);\n            } else {\n                VAR_48.clearProperty(VAR_49.APIS);\n            }\n\n            if (null != VAR_51 && VAR_51) {\n                VAR_48.setProperty(VAR_49.MODELS, VAR_52);\n            } else {\n                VAR_48.clearProperty(VAR_49.MODELS);\n            }\n\n            if (null != VAR_53 && VAR_53) {\n                VAR_48.setProperty(VAR_49.SUPPORTING_FILES, VAR_54);\n            } else {\n                VAR_48.clearProperty(VAR_49.SUPPORTING_FILES);\n            }\n\n            VAR_48.setProperty(VAR_49.MODEL_TESTS, VAR_55.toString());\n            VAR_48.setProperty(VAR_49.MODEL_DOCS, VAR_56.toString());\n            VAR_48.setProperty(VAR_49.API_TESTS, VAR_57.toString());\n            VAR_48.setProperty(VAR_49.API_DOCS, VAR_58.toString());\n            VAR_48.setProperty(VAR_49.WITH_XML, VAR_59.toString());\n\n            if (VAR_60 != null) {\n                /* COMMENT_3 */\n                if (VAR_61 == null && VAR_60.containsKey(\"instantiation-types\")) {\n                    applyInstantiationTypesKvp(VAR_60.get(\"instantiation-types\").toString(),\n                            VAR_12);\n                }\n\n                /* COMMENT_4 */\n                if (VAR_62 == null && VAR_60.containsKey(\"import-mappings\")) {\n                    applyImportMappingsKvp(VAR_60.get(\"import-mappings\").toString(),\n                            VAR_12);\n                }\n\n                /* COMMENT_5 */\n                if (VAR_63 == null && VAR_60.containsKey(\"type-mappings\")) {\n                    applyTypeMappingsKvp(VAR_60.get(\"type-mappings\").toString(), VAR_12);\n                }\n\n                /* COMMENT_6 */\n                if (VAR_64 == null && VAR_60.containsKey(\"language-specific-primitives\")) {\n                    applyLanguageSpecificPrimitivesCsv(VAR_60\n                            .get(\"language-specific-primitives\").toString(), VAR_12);\n                }\n\n                /* COMMENT_7 */\n                if (VAR_65 == null && VAR_60.containsKey(\"additional-properties\")) {\n                    applyAdditionalPropertiesKvp(VAR_60.get(\"additional-properties\").toString(),\n                            VAR_12);\n                }\n\n                if (VAR_66 == null && VAR_60.containsKey(\"server-variables\")) {\n                    applyServerVariablesKvp(VAR_60.get(\"server-variables\").toString(), VAR_12);\n                }\n\n                /* COMMENT_8 */\n                if (VAR_67 == null && VAR_60.containsKey(\"reserved-words-mappings\")) {\n                    applyReservedWordsMappingsKvp(VAR_60.get(\"reserved-words-mappings\")\n                            .toString(), VAR_12);\n                }\n            }\n\n            /* COMMENT_9 */\n            if (VAR_61 != null && (VAR_60 == null || !VAR_60.containsKey(\"instantiation-types\"))) {\n                applyInstantiationTypesKvpList(VAR_61, VAR_12);\n            }\n\n            /* COMMENT_10 */\n            if (VAR_62 != null && (VAR_60 == null || !VAR_60.containsKey(\"import-mappings\"))) {\n                applyImportMappingsKvpList(VAR_62, VAR_12);\n            }\n\n            /* COMMENT_11 */\n            if (VAR_63 != null && (VAR_60 == null || !VAR_60.containsKey(\"type-mappings\"))) {\n                applyTypeMappingsKvpList(VAR_63, VAR_12);\n            }\n\n            /* COMMENT_12 */\n            if (VAR_64 != null\n                    && (VAR_60 == null || !VAR_60.containsKey(\"language-specific-primitives\"))) {\n                applyLanguageSpecificPrimitivesCsvList(VAR_64, VAR_12);\n            }\n\n            /* COMMENT_13 */\n            if (VAR_65 != null && (VAR_60 == null || !VAR_60.containsKey(\"additional-properties\"))) {\n                applyAdditionalPropertiesKvpList(VAR_65, VAR_12);\n            }\n\n            if (VAR_66 != null && (VAR_60 == null || !VAR_60.containsKey(\"server-variables\"))) {\n                applyServerVariablesKvpList(VAR_66, VAR_12);\n            }\n\n            /* COMMENT_14 */\n            if (VAR_67 != null && (VAR_60 == null || !VAR_60.containsKey(\"reserved-words-mappings\"))) {\n                applyReservedWordsMappingsKvpList(VAR_67, VAR_12);\n            }\n\n            if (VAR_68 == null) {\n                VAR_68 = new HashMap<>();\n            }\n\n            if (VAR_69 != null && VAR_69.size() > 0) {\n                VAR_68.putAll(VAR_69);\n                getLog().warn(\"environmentVariables is deprecated and will be removed in version 5.1. Use globalProperties instead.\");\n            }\n\n            for (String VAR_70 : VAR_68.keySet()) {\n                String VAR_71 = VAR_68.get(VAR_70);\n                if (VAR_71 != null) {\n                    VAR_12.addGlobalProperty(VAR_70, VAR_71);\n                }\n            }\n\n            final ClientOptInput VAR_72 = VAR_12.toClientOptInput();\n            final CodegenConfig VAR_73 = VAR_72.getConfig();\n\n            if (VAR_60 != null) {\n                for (CliOption VAR_74 : VAR_73.cliOptions()) {\n                    if (VAR_60.containsKey(VAR_74.getOpt())) {\n                        VAR_72.getConfig().additionalProperties()\n                                .put(VAR_74.getOpt(), VAR_60.get(VAR_74.getOpt()));\n                    }\n                }\n            }\n\n            if (VAR_75) {\n                for (CliOption VAR_74 : VAR_73.cliOptions()) {\n                    VAR_76.out.println(\"\\t\" + VAR_74.getOpt());\n                    VAR_76.out.println(\"\\t    \"\n                            + VAR_74.getOptionHelp().replaceAll(\"\\n\", \"\\n\\t    \"));\n                    VAR_76.out.println();\n                }\n                return;\n            }\n            adjustAdditionalProperties(VAR_73);\n            new DefaultGenerator().opts(VAR_72).generate();\n\n            if (VAR_4 != null) {\n                VAR_4.refresh(new File(getCompileSourceRoot()));\n            }\n\n            /* COMMENT_15 */\n            File VAR_6 = getHashFile(VAR_0);\n            String VAR_7 = calculateInputSpecHash(VAR_0);\n\n            if (VAR_6.getParent() != null && !new File(VAR_6.getParent()).exists()) {\n                File VAR_77 = new File(VAR_6.getParent());\n                if (!VAR_77.mkdirs()) {\n                    throw new RuntimeException(\"Failed to create the folder \" + VAR_77.getAbsolutePath() +\n                                               \" to store the checksum of the input spec.\");\n                }\n            }\n            VAR_10.asCharSink(VAR_6, VAR_11.UTF_8).write(VAR_7);\n\n        } catch (Exception VAR_78) {\n            /* COMMENT_16 */\n            /* COMMENT_17 */\n            /* COMMENT_18 */\n            if (VAR_4 != null) {\n                VAR_4.addMessage(VAR_0, 0, 0, \"unexpected error in Open-API generation\", VAR_79.SEVERITY_WARNING, VAR_78);\n            }\n            getLog().error(VAR_78);\n            throw new MojoExecutionException(\n                    \"Code generation failed. See above for the full exception.\");\n        }\n    }",
  "func_graph_path": "OpenAPITools/openapi-generator/6445ea6511a6ddab64c86ae263937dc90650c98c/CodeGenMojo.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -323,7 +323,10 @@\n \n             if (storedInputSpecHashFile.getParent() != null && !new File(storedInputSpecHashFile.getParent()).exists()) {\n                 File parent = new File(storedInputSpecHashFile.getParent());\n-                parent.mkdirs();\n+                if (!parent.mkdirs()) {\n+                    throw new RuntimeException(\"Failed to create the folder \" + parent.getAbsolutePath() +\n+                                               \" to store the checksum of the input spec.\");\n+                }\n             }\n             Files.asCharSink(storedInputSpecHashFile, StandardCharsets.UTF_8).write(inputSpecHash);\n ",
  "diff_line_info": {
    "deleted_lines": [
      "                parent.mkdirs();"
    ],
    "added_lines": [
      "                if (!parent.mkdirs()) {",
      "                    throw new RuntimeException(\"Failed to create the folder \" + parent.getAbsolutePath() +",
      "                                               \" to store the checksum of the input spec.\");",
      "                }"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/OpenAPITools/openapi-generator/pull/8795",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/OpenAPITools/openapi-generator/pull/8795: 403 Client Error: Forbidden for url: https://api.github.com/repos/OpenAPITools/openapi-generator/pulls/8795",
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.8,
  "Bug Filter Response": "**Final Classification:** Defect Remediation & Feature Upgrades  \n**Confidence:** 0.8"
}