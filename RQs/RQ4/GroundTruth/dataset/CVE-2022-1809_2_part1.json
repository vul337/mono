{
  "cve_id": "CVE-2022-1809",
  "cwe_ids": [
    "CWE-824"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "radareorg/radare2",
  "commit_msg": "Fix crash in vtable analysis on UB ##crash\n\n* Reported by @greatergoodest via huntrdev\n* BountyID 0730a95e-c485-4ff2-9a5d-bb3abfda0b17\n* Reproducer: minified_crash",
  "commit_hash": "919e3ac1a13f753c73e7a8e8d8bb4a143218732d",
  "git_url": "https://github.com/radareorg/radare2/commit/919e3ac1a13f753c73e7a8e8d8bb4a143218732d",
  "file_path": "libr/anal/vtable.c",
  "func_name": "r_anal_vtable_begin",
  "func_before": "R_API bool r_anal_vtable_begin(RAnal *anal, RVTableContext *context) {\n\tcontext->anal = anal;\n\tcontext->abi = anal->cxxabi;\n\tcontext->word_size = (ut8) (anal->config->bits / 8);\n\tconst bool is_arm = anal->cur->arch && r_str_startswith (anal->cur->arch, \"arm\");\n\tif (is_arm && context->word_size < 4) {\n\t\tcontext->word_size = 4;\n\t}\n\tconst bool be = anal->config->big_endian;\n\tswitch (context->word_size) {\n\tcase 1:\n\t\tcontext->read_addr = be? vtable_read_addr_be8 : vtable_read_addr_le8;\n\t\tbreak;\n\tcase 2:\n\t\tcontext->read_addr = be? vtable_read_addr_be16 : vtable_read_addr_le16;\n\t\tbreak;\n\tcase 4:\n\t\tcontext->read_addr = be? vtable_read_addr_be32 : vtable_read_addr_le32;\n\t\tbreak;\n\tcase 8:\n\t\tcontext->read_addr = be? vtable_read_addr_be64 : vtable_read_addr_le64;\n\t\tbreak;\n\tdefault:\n\t\treturn false;\n\t}\n\treturn true;\n}",
  "abstract_func_before": "R_API bool r_anal_vtable_begin(RAnal *VAR_0, RVTableContext *VAR_1) {\n\tVAR_1->anal = VAR_0;\n\tVAR_1->abi = VAR_0->cxxabi;\n\tVAR_1->word_size = (VAR_2) (VAR_0->config->bits / 8);\n\tconst bool VAR_3 = VAR_0->cur->arch && r_str_startswith (VAR_0->cur->arch, \"arm\");\n\tif (VAR_3 && VAR_1->word_size < 4) {\n\t\tVAR_1->word_size = 4;\n\t}\n\tconst bool VAR_4 = VAR_0->config->big_endian;\n\tswitch (VAR_1->word_size) {\n\tcase 1:\n\t\tVAR_1->read_addr = VAR_4? VAR_5 : VAR_6;\n\t\tbreak;\n\tcase 2:\n\t\tVAR_1->read_addr = VAR_4? VAR_7 : VAR_8;\n\t\tbreak;\n\tcase 4:\n\t\tVAR_1->read_addr = VAR_4? VAR_9 : VAR_10;\n\t\tbreak;\n\tcase 8:\n\t\tVAR_1->read_addr = VAR_4? VAR_11 : VAR_12;\n\t\tbreak;\n\tdefault:\n\t\treturn false;\n\t}\n\treturn true;\n}",
  "func_graph_path_before": null,
  "func": "R_API bool r_anal_vtable_begin(RAnal *anal, RVTableContext *context) {\n\tcontext->anal = anal;\n\tcontext->abi = anal->cxxabi;\n\tcontext->word_size = (ut8) (anal->config->bits / 8);\n\tconst bool is_arm = anal->cur->arch && r_str_startswith (anal->cur->arch, \"arm\");\n\tif (is_arm && context->word_size < 4) {\n\t\tcontext->word_size = 4;\n\t}\n\tconst bool be = anal->config->big_endian;\n\tswitch (context->word_size) {\n\tcase 1:\n\t\tcontext->read_addr = be? vtable_read_addr_be8 : vtable_read_addr_le8;\n\t\tbreak;\n\tcase 2:\n\t\tcontext->read_addr = be? vtable_read_addr_be16 : vtable_read_addr_le16;\n\t\tbreak;\n\tcase 4:\n\t\tcontext->read_addr = be? vtable_read_addr_be32 : vtable_read_addr_le32;\n\t\tbreak;\n\tcase 8:\n\t\tcontext->read_addr = be? vtable_read_addr_be64 : vtable_read_addr_le64;\n\t\tbreak;\n\tdefault:\n\t\t// cant be null. assume 32bit \"->read_addr = NULL;\n\t\tcontext->read_addr = be? vtable_read_addr_be32 : vtable_read_addr_le32;\n\t\treturn false;\n\t}\n\treturn true;\n}",
  "abstract_func": "R_API bool r_anal_vtable_begin(RAnal *VAR_0, RVTableContext *VAR_1) {\n\tVAR_1->anal = VAR_0;\n\tVAR_1->abi = VAR_0->cxxabi;\n\tVAR_1->word_size = (VAR_2) (VAR_0->config->bits / 8);\n\tconst bool VAR_3 = VAR_0->cur->arch && r_str_startswith (VAR_0->cur->arch, \"arm\");\n\tif (VAR_3 && VAR_1->word_size < 4) {\n\t\tVAR_1->word_size = 4;\n\t}\n\tconst bool VAR_4 = VAR_0->config->big_endian;\n\tswitch (VAR_1->word_size) {\n\tcase 1:\n\t\tVAR_1->read_addr = VAR_4? VAR_5 : VAR_6;\n\t\tbreak;\n\tcase 2:\n\t\tVAR_1->read_addr = VAR_4? VAR_7 : VAR_8;\n\t\tbreak;\n\tcase 4:\n\t\tVAR_1->read_addr = VAR_4? VAR_9 : VAR_10;\n\t\tbreak;\n\tcase 8:\n\t\tVAR_1->read_addr = VAR_4? VAR_11 : VAR_12;\n\t\tbreak;\n\tdefault:\n\t\t/* COMMENT_0 */\n\t\tVAR_1->read_addr = VAR_4? VAR_9 : VAR_10;\n\t\treturn false;\n\t}\n\treturn true;\n}",
  "func_graph_path": null,
  "diff_func": "--- func_before\n+++ func_after\n@@ -21,6 +21,8 @@\n \t\tcontext->read_addr = be? vtable_read_addr_be64 : vtable_read_addr_le64;\n \t\tbreak;\n \tdefault:\n+\t\t// cant be null. assume 32bit \"->read_addr = NULL;\n+\t\tcontext->read_addr = be? vtable_read_addr_be32 : vtable_read_addr_le32;\n \t\treturn false;\n \t}\n \treturn true;",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "\t\t// cant be null. assume 32bit \"->read_addr = NULL;",
      "\t\tcontext->read_addr = be? vtable_read_addr_be32 : vtable_read_addr_le32;"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/radareorg/radare2/pull/20146",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/radareorg/radare2/pull/20146: 403 Client Error: Forbidden for url: https://api.github.com/repos/radareorg/radare2/pulls/20146",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.7,
  "Bug Filter Response": "The patch addresses a crash in vtable analysis, likely reported through a security bug bounty, but the commit message doesn't explicitly state it's a security fix. The code fixes a default case to prevent a crash, suggesting it's a defect remediation. However, the mention of a bounty raises the probability of it being a security issue, leading to moderate confidence.\n\n**Final Classification:** Security Vulnerability Fix;  \n**Confidence:** 0.7"
}