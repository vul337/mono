{
  "cve_id": "CVE-2023-43798",
  "cwe_ids": [
    "CWE-918"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:N",
  "cvss_is_v3": true,
  "repo_name": "bigbluebutton",
  "commit_msg": "Fix: Getting final Url (from redirect) on presentation upload",
  "commit_hash": "02ba4c6ff8e78a0f4384ad1b7c7367c5a90376e8",
  "git_url": "https://github.com/bigbluebutton/bigbluebutton/commit/02ba4c6ff8e78a0f4384ad1b7c7367c5a90376e8",
  "file_path": "bbb-common-web/src/main/java/org/bigbluebutton/presentation/PresentationUrlDownloadService.java",
  "func_name": "followRedirect",
  "func_before": "private String followRedirect(String meetingId, String redirectUrl,\n            int redirectCount, String origUrl) {\n\n        if (redirectCount > MAX_REDIRECTS) {\n            log.error(\"Max redirect reached for meeting=[{}] with url=[{}]\",\n                    meetingId, origUrl);\n            return null;\n        }\n\n        if(!isValidRedirectUrl(redirectUrl)) return null;\n\n        URL presUrl;\n        try {\n            presUrl = new URL(redirectUrl);\n        } catch (MalformedURLException e) {\n            log.error(\"Malformed url=[{}] for meeting=[{}]\", redirectUrl, meetingId, e);\n            return null;\n        }\n\n        HttpURLConnection conn;\n        try {\n            conn = (HttpURLConnection) presUrl.openConnection();\n            conn.setReadTimeout(60000);\n            conn.addRequestProperty(\"Accept-Language\", \"en-US,en;q=0.8\");\n            conn.addRequestProperty(\"User-Agent\", \"Mozilla\");\n\n            // normally, 3xx is redirect\n            int status = conn.getResponseCode();\n            if (status != HttpURLConnection.HTTP_OK) {\n                if (status == HttpURLConnection.HTTP_MOVED_TEMP\n                        || status == HttpURLConnection.HTTP_MOVED_PERM\n                        || status == HttpURLConnection.HTTP_SEE_OTHER) {\n                    String newUrl = conn.getHeaderField(\"Location\");\n                    return followRedirect(meetingId, newUrl, redirectCount + 1,\n                            origUrl);\n                } else {\n                    log.error(\n                            \"Invalid HTTP response=[{}] for url=[{}] with meeting[{}]\",\n                            status, redirectUrl, meetingId);\n                    return null;\n                }\n            } else {\n                return redirectUrl;\n            }\n        } catch (IOException e) {\n            log.error(\"IOException for url=[{}] with meeting[{}]\", redirectUrl, meetingId, e);\n            return null;\n        }\n    }",
  "abstract_func_before": "private String followRedirect(String VAR_0, String VAR_1,\n            int VAR_2, String VAR_3) {\n\n        if (VAR_2 > VAR_4) {\n            VAR_5.error(\"Max redirect reached for meeting=[{}] with url=[{}]\",\n                    VAR_0, VAR_3);\n            return null;\n        }\n\n        if(!isValidRedirectUrl(VAR_1)) return null;\n\n        URL VAR_6;\n        try {\n            VAR_6 = new URL(VAR_1);\n        } catch (MalformedURLException VAR_7) {\n            VAR_5.error(\"Malformed url=[{}] for meeting=[{}]\", VAR_1, VAR_0, VAR_7);\n            return null;\n        }\n\n        HttpURLConnection VAR_8;\n        try {\n            VAR_8 = (HttpURLConnection) VAR_6.openConnection();\n            VAR_8.setReadTimeout(60000);\n            VAR_8.addRequestProperty(\"Accept-Language\", \"en-US,en;q=0.8\");\n            VAR_8.addRequestProperty(\"User-Agent\", \"Mozilla\");\n\n            /* COMMENT_0 */\n            int VAR_9 = VAR_8.getResponseCode();\n            if (VAR_9 != VAR_10.HTTP_OK) {\n                if (VAR_9 == VAR_10.HTTP_MOVED_TEMP\n                        || VAR_9 == VAR_10.HTTP_MOVED_PERM\n                        || VAR_9 == VAR_10.HTTP_SEE_OTHER) {\n                    String VAR_11 = VAR_8.getHeaderField(\"Location\");\n                    return followRedirect(VAR_0, VAR_11, VAR_2 + 1,\n                            VAR_3);\n                } else {\n                    VAR_5.error(\n                            \"Invalid HTTP response=[{}] for url=[{}] with meeting[{}]\",\n                            VAR_9, VAR_1, VAR_0);\n                    return null;\n                }\n            } else {\n                return VAR_1;\n            }\n        } catch (IOException VAR_7) {\n            VAR_5.error(\"IOException for url=[{}] with meeting[{}]\", VAR_1, VAR_0, VAR_7);\n            return null;\n        }\n    }",
  "func_graph_path_before": "bigbluebutton/02ba4c6ff8e78a0f4384ad1b7c7367c5a90376e8/PresentationUrlDownloadService.java/vul/before/1.json",
  "func": "private String followRedirect(String meetingId, String redirectUrl,\n            int redirectCount, String origUrl) {\n\n        if (redirectCount > MAX_REDIRECTS) {\n            log.error(\"Max redirect reached for meeting=[{}] with url=[{}]\",\n                    meetingId, origUrl);\n            return null;\n        }\n\n        if(!isValidRedirectUrl(redirectUrl)) return null;\n\n        URL presUrl;\n        try {\n            presUrl = new URL(redirectUrl);\n        } catch (MalformedURLException e) {\n            log.error(\"Malformed url=[{}] for meeting=[{}]\", redirectUrl, meetingId, e);\n            return null;\n        }\n\n        HttpURLConnection conn;\n        try {\n            conn = (HttpURLConnection) presUrl.openConnection();\n            conn.setReadTimeout(60000);\n            conn.addRequestProperty(\"Accept-Language\", \"en-US,en;q=0.8\");\n            conn.addRequestProperty(\"User-Agent\", \"Mozilla\");\n            conn.setInstanceFollowRedirects(false);\n\n            // normally, 3xx is redirect\n            int status = conn.getResponseCode();\n            if (status != HttpURLConnection.HTTP_OK) {\n                if (status == HttpURLConnection.HTTP_MOVED_TEMP\n                        || status == HttpURLConnection.HTTP_MOVED_PERM\n                        || status == HttpURLConnection.HTTP_SEE_OTHER) {\n                    String newUrl = conn.getHeaderField(\"Location\");\n                    return followRedirect(meetingId, newUrl, redirectCount + 1,\n                            origUrl);\n                } else {\n                    log.error(\n                            \"Invalid HTTP response=[{}] for url=[{}] with meeting[{}]\",\n                            status, redirectUrl, meetingId);\n                    return null;\n                }\n            } else {\n                return redirectUrl;\n            }\n        } catch (IOException e) {\n            log.error(\"IOException for url=[{}] with meeting[{}]\", redirectUrl, meetingId, e);\n            return null;\n        }\n    }",
  "abstract_func": "private String followRedirect(String VAR_0, String VAR_1,\n            int VAR_2, String VAR_3) {\n\n        if (VAR_2 > VAR_4) {\n            VAR_5.error(\"Max redirect reached for meeting=[{}] with url=[{}]\",\n                    VAR_0, VAR_3);\n            return null;\n        }\n\n        if(!isValidRedirectUrl(VAR_1)) return null;\n\n        URL VAR_6;\n        try {\n            VAR_6 = new URL(VAR_1);\n        } catch (MalformedURLException VAR_7) {\n            VAR_5.error(\"Malformed url=[{}] for meeting=[{}]\", VAR_1, VAR_0, VAR_7);\n            return null;\n        }\n\n        HttpURLConnection VAR_8;\n        try {\n            VAR_8 = (HttpURLConnection) VAR_6.openConnection();\n            VAR_8.setReadTimeout(60000);\n            VAR_8.addRequestProperty(\"Accept-Language\", \"en-US,en;q=0.8\");\n            VAR_8.addRequestProperty(\"User-Agent\", \"Mozilla\");\n            VAR_8.setInstanceFollowRedirects(false);\n\n            /* COMMENT_0 */\n            int VAR_9 = VAR_8.getResponseCode();\n            if (VAR_9 != VAR_10.HTTP_OK) {\n                if (VAR_9 == VAR_10.HTTP_MOVED_TEMP\n                        || VAR_9 == VAR_10.HTTP_MOVED_PERM\n                        || VAR_9 == VAR_10.HTTP_SEE_OTHER) {\n                    String VAR_11 = VAR_8.getHeaderField(\"Location\");\n                    return followRedirect(VAR_0, VAR_11, VAR_2 + 1,\n                            VAR_3);\n                } else {\n                    VAR_5.error(\n                            \"Invalid HTTP response=[{}] for url=[{}] with meeting[{}]\",\n                            VAR_9, VAR_1, VAR_0);\n                    return null;\n                }\n            } else {\n                return VAR_1;\n            }\n        } catch (IOException VAR_7) {\n            VAR_5.error(\"IOException for url=[{}] with meeting[{}]\", VAR_1, VAR_0, VAR_7);\n            return null;\n        }\n    }",
  "func_graph_path": "bigbluebutton/02ba4c6ff8e78a0f4384ad1b7c7367c5a90376e8/PresentationUrlDownloadService.java/vul/after/1.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -23,6 +23,7 @@\n             conn.setReadTimeout(60000);\n             conn.addRequestProperty(\"Accept-Language\", \"en-US,en;q=0.8\");\n             conn.addRequestProperty(\"User-Agent\", \"Mozilla\");\n+            conn.setInstanceFollowRedirects(false);\n \n             // normally, 3xx is redirect\n             int status = conn.getResponseCode();",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "            conn.setInstanceFollowRedirects(false);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/bigbluebutton/bigbluebutton/pull/18494",
  "description": {
    "pr_info": {
      "title": "fix(sec): Getting wrong final URL (from redirect) on presentation upload",
      "number": 18494
    },
    "comment": [
      "The function `followRedirect` was supposed to obtain the final URL when the first URL is a redirect link.\r\nTurned out that it is always returning the first URL instead of follow the redirect and return the final URL.\r\n\r\nThis PR fix it.\r\n\r\n![image](https://github.com/bigbluebutton/bigbluebutton/assets/5660191/73fd8d90-4438-453f-a8d4-6a0807be35cc)\r\n",
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=bigbluebutton_bigbluebutton&pullRequest=18494)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=bigbluebutton_bigbluebutton&pullRequest=18494&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=bigbluebutton_bigbluebutton&pullRequest=18494&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=bigbluebutton_bigbluebutton&pullRequest=18494&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=bigbluebutton_bigbluebutton&pullRequest=18494&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=bigbluebutton_bigbluebutton&pullRequest=18494&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=bigbluebutton_bigbluebutton&pullRequest=18494&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=bigbluebutton_bigbluebutton&pullRequest=18494&resolved=false&types=SECURITY_HOTSPOT) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/security_hotspots?id=bigbluebutton_bigbluebutton&pullRequest=18494&resolved=false&types=SECURITY_HOTSPOT) [0 Security Hotspots](https://sonarcloud.io/project/security_hotspots?id=bigbluebutton_bigbluebutton&pullRequest=18494&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=bigbluebutton_bigbluebutton&pullRequest=18494&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=bigbluebutton_bigbluebutton&pullRequest=18494&resolved=false&types=CODE_SMELL) [0 Code Smells](https://sonarcloud.io/project/issues?id=bigbluebutton_bigbluebutton&pullRequest=18494&resolved=false&types=CODE_SMELL)\n\n[![No Coverage information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/NoCoverageInfo-16px.png 'No Coverage information')](https://sonarcloud.io/component_measures?id=bigbluebutton_bigbluebutton&pullRequest=18494) No Coverage information  \n[![No Duplication information](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/NoDuplicationInfo-16px.png 'No Duplication information')](https://sonarcloud.io/component_measures?id=bigbluebutton_bigbluebutton&pullRequest=18494&metric=duplicated_lines_density&view=list) No Duplication information\n\n"
    ]
  },
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.92,
  "Bug Filter Response": "The patch addresses a bug in handling redirects to correctly obtain the final URL, which is a functional defect. There's no indication of a security issue.\n\n**Final Classification:** Defect Remediation & Feature Upgrades; **Confidence:** 0.92"
}