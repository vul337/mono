{
  "cve_id": "CVE-2023-1981",
  "cwe_ids": [
    "CWE-400"
  ],
  "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H",
  "cvss_is_v3": true,
  "repo_name": "avahi",
  "commit_msg": "Emit error if requested service is not found\n\nIt currently just crashes instead of replying with error. Check return\nvalue and emit error instead of passing NULL pointer to reply.\n\nFixes #375",
  "commit_hash": "a2696da2f2c50ac43b6c4903f72290d5c3fa9f6f",
  "git_url": "https://github.com/avahi/avahi/commit/a2696da2f2c50ac43b6c4903f72290d5c3fa9f6f",
  "file_path": "avahi-daemon/dbus-protocol.c",
  "func_name": "dbus_get_alternative_service_name",
  "func_before": "static DBusHandlerResult dbus_get_alternative_service_name(DBusConnection *c, DBusMessage *m, DBusError *error) {\n    char *n, *t;\n\n    if (!(dbus_message_get_args(m, error, DBUS_TYPE_STRING, &n, DBUS_TYPE_INVALID)) || !n) {\n        return dbus_parsing_error(\"Error parsing Server::GetAlternativeServiceName message\", error);\n    }\n\n    t = avahi_alternative_service_name(n);\n    avahi_dbus_respond_string(c, m, t);\n    avahi_free(t);\n\n    return DBUS_HANDLER_RESULT_HANDLED;\n}",
  "abstract_func_before": "static DBusHandlerResult dbus_get_alternative_service_name(DBusConnection *VAR_0, DBusMessage *VAR_1, DBusError *VAR_2) {\n    char *VAR_3, *VAR_4;\n\n    if (!(dbus_message_get_args(VAR_1, VAR_2, VAR_5, &VAR_3, VAR_6)) || !VAR_3) {\n        return dbus_parsing_error(\"Error parsing Server::GetAlternativeServiceName message\", VAR_2);\n    }\n\n    VAR_4 = avahi_alternative_service_name(VAR_3);\n    avahi_dbus_respond_string(VAR_0, VAR_1, VAR_4);\n    avahi_free(VAR_4);\n\n    return VAR_7;\n}",
  "func_graph_path_before": "avahi/a2696da2f2c50ac43b6c4903f72290d5c3fa9f6f/dbus-protocol.c/vul/before/0.json",
  "func": "static DBusHandlerResult dbus_get_alternative_service_name(DBusConnection *c, DBusMessage *m, DBusError *error) {\n    char *n, *t;\n\n    if (!(dbus_message_get_args(m, error, DBUS_TYPE_STRING, &n, DBUS_TYPE_INVALID)) || !n) {\n        return dbus_parsing_error(\"Error parsing Server::GetAlternativeServiceName message\", error);\n    }\n\n    t = avahi_alternative_service_name(n);\n    if (t) {\n        avahi_dbus_respond_string(c, m, t);\n        avahi_free(t);\n\n        return DBUS_HANDLER_RESULT_HANDLED;\n    } else {\n        return avahi_dbus_respond_error(c, m, AVAHI_ERR_NOT_FOUND, \"Service not found\");\n    }\n}",
  "abstract_func": "static DBusHandlerResult dbus_get_alternative_service_name(DBusConnection *VAR_0, DBusMessage *VAR_1, DBusError *VAR_2) {\n    char *VAR_3, *VAR_4;\n\n    if (!(dbus_message_get_args(VAR_1, VAR_2, VAR_5, &VAR_3, VAR_6)) || !VAR_3) {\n        return dbus_parsing_error(\"Error parsing Server::GetAlternativeServiceName message\", VAR_2);\n    }\n\n    VAR_4 = avahi_alternative_service_name(VAR_3);\n    if (VAR_4) {\n        avahi_dbus_respond_string(VAR_0, VAR_1, VAR_4);\n        avahi_free(VAR_4);\n\n        return VAR_7;\n    } else {\n        return avahi_dbus_respond_error(VAR_0, VAR_1, VAR_8, \"Service not found\");\n    }\n}",
  "func_graph_path": "avahi/a2696da2f2c50ac43b6c4903f72290d5c3fa9f6f/dbus-protocol.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -6,8 +6,12 @@\n     }\n \n     t = avahi_alternative_service_name(n);\n-    avahi_dbus_respond_string(c, m, t);\n-    avahi_free(t);\n+    if (t) {\n+        avahi_dbus_respond_string(c, m, t);\n+        avahi_free(t);\n \n-    return DBUS_HANDLER_RESULT_HANDLED;\n+        return DBUS_HANDLER_RESULT_HANDLED;\n+    } else {\n+        return avahi_dbus_respond_error(c, m, AVAHI_ERR_NOT_FOUND, \"Service not found\");\n+    }\n }",
  "diff_line_info": {
    "deleted_lines": [
      "    avahi_dbus_respond_string(c, m, t);",
      "    avahi_free(t);",
      "    return DBUS_HANDLER_RESULT_HANDLED;"
    ],
    "added_lines": [
      "    if (t) {",
      "        avahi_dbus_respond_string(c, m, t);",
      "        avahi_free(t);",
      "        return DBUS_HANDLER_RESULT_HANDLED;",
      "    } else {",
      "        return avahi_dbus_respond_error(c, m, AVAHI_ERR_NOT_FOUND, \"Service not found\");",
      "    }"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/avahi/avahi/pull/407",
  "description": {
    "pr_info": {
      "title": "Emit error if Dbus requested service is not found",
      "number": 407
    },
    "comment": [
      "It currently just crashes instead of replying with error. Check return value and emit error instead of passing NULL pointer to reply.\r\n\r\nFixes #375",
      "Looks like `avahi` no longer crashes. Thanks! `valgrind` reports a bunch of memory leaks though\r\n<details>\r\n  <summary>definitely lost: 336 bytes in 4 blocks</summary>\r\n\r\n```sh\r\n==66838== 80 bytes in 1 blocks are definitely lost in loss record 11 of 28\r\n==66838==    at 0x484586F: malloc (vg_replace_malloc.c:381)\r\n==66838==    by 0x4863754: xmalloc (malloc.c:68)\r\n==66838==    by 0x4863754: avahi_malloc (malloc.c:107)\r\n==66838==    by 0x4863A24: avahi_strdup_vprintf (malloc.c:206)\r\n==66838==    by 0x4863B70: avahi_strdup_printf (malloc.c:242)\r\n==66838==    by 0x407780: drop_root (main.c:1395)\r\n==66838==    by 0x407780: main (main.c:1651)\r\n==66838==\r\n==66838== 80 bytes in 1 blocks are definitely lost in loss record 12 of 28\r\n==66838==    at 0x484586F: malloc (vg_replace_malloc.c:381)\r\n==66838==    by 0x4863754: xmalloc (malloc.c:68)\r\n==66838==    by 0x4863754: avahi_malloc (malloc.c:107)\r\n==66838==    by 0x4863A24: avahi_strdup_vprintf (malloc.c:206)\r\n==66838==    by 0x4863B70: avahi_strdup_printf (malloc.c:242)\r\n==66838==    by 0x40779C: drop_root (main.c:1396)\r\n==66838==    by 0x40779C: main (main.c:1651)\r\n==66838==\r\n==66838== 80 bytes in 1 blocks are definitely lost in loss record 13 of 28\r\n==66838==    at 0x484586F: malloc (vg_replace_malloc.c:381)\r\n==66838==    by 0x4863754: xmalloc (malloc.c:68)\r\n==66838==    by 0x4863754: avahi_malloc (malloc.c:107)\r\n==66838==    by 0x4863A24: avahi_strdup_vprintf (malloc.c:206)\r\n==66838==    by 0x4863B70: avahi_strdup_printf (malloc.c:242)\r\n==66838==    by 0x4077B9: drop_root (main.c:1397)\r\n==66838==    by 0x4077B9: main (main.c:1651)\r\n==66838==\r\n==66838== 551 (96 direct, 455 indirect) bytes in 1 blocks are definitely lost in loss record 26 of 28\r\n==66838==    at 0x484586F: malloc (vg_replace_malloc.c:381)\r\n==66838==    by 0x4863754: xmalloc (malloc.c:68)\r\n==66838==    by 0x4863754: avahi_malloc (malloc.c:107)\r\n==66838==    by 0x40D876: avahi_init_proc_title (setproctitle.c:68)\r\n==66838==    by 0x4074F1: main (main.c:1564)\r\n```\r\n</details>\r\n\r\nbut it seems they have nothing to do with this PR.\r\n\r\nOn a somewhat related note I thought `avahi` was abandoned (and my guess would be that among other things PRs like https://github.com/systemd/systemd/pull/22532 were opened to integrate more mdns stuff into systemd-resolved to avoid bringing abandoned and unmaintained components to new products/devices). I wonder if anything has changed? Looking at https://github.com/lathiat/avahi/issues/388 it appears it isn't exactly abandoned anymore but it it isn't clear (to me at least) where it's going either.",
      "The problem is there are volunteers willing to maintain the code, because current maintainer spends very little time on this project. But some fixes are sometime pushed. I think we have people willing to collaborate. The only question is if other people can be given permission to commit into repository and mark issues here. Or we should fork the project and maintain common repository elsewhere. I guess it depends on the decision of @lathiat. I haven't seen any public statement, positive or negative.",
      "Got it. Thanks!\r\n\r\nI think it would be great if it was possible to resurrect avahi somehow. It would take a lot of time to even cover the `mdns` part of `systemd-resolved` with basic tests (not to mention tests that can start catching (and preventing) issues like https://github.com/systemd/systemd/issues/23873 and https://github.com/systemd/systemd/issues/23894) so in my opinion generally that time would be better spent on improving `avahi` (which already works and is compatible with all the stuff actually used in the wild).",
      "In the meantime I'm on the way to make some fuzzing tools compatible with `avahi`: https://github.com/ossf/fuzz-introspector/pull/620. DBus is fun but adjacent networks are more interesting.",
      "@pemensik I have found another local DOS like that (and also figured out where https://github.com/lathiat/avahi/issues/391 most likely came from). I wonder if I should report them publicly or do you think it would make sense to set up something like https://docs.github.com/en/code-security/security-advisories/guidance-on-reporting-and-writing/privately-reporting-a-security-vulnerability?",
      "FWIW looking at https://github.com/lathiat/avahi/issues/338 and https://github.com/lathiat/avahi/pull/330 it seems that in general historically local DOSes are reported publicly (and that's why I reported https://github.com/lathiat/avahi/issues/375 publicly as well).",
      "Anyway just let me know how I should report those issues. I think https://docs.github.com/en/code-security/security-advisories/guidance-on-reporting-and-writing/privately-reporting-a-security-vulnerability should do. More generally I think it would make sense to also add https://docs.github.com/en/code-security/getting-started/adding-a-security-policy-to-your-repository to the repository as well.",
      "@pemensik I invited you to my private fork of avahi. I think it should be possible to discuss those issues there in the meantime."
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 0.9\n\n**Step-by-Step Explanation:**\n\n1. **Input Analysis:**\n   - The commit message indicates a fix for an issue where the system crashes instead of responding with an error when a service isn't found. It mentions checking a return value and emitting an error, suggesting handling of a potential crash.\n   - The code diff modifies a function to handle cases where `t` is NULL, preventing a crash by adding error checking.\n\n2. **Consistency Check:**\n   - The commit message aligns with the code changes, which introduce checks for a NULL pointer, thus preventing a crash.\n\n3. **Purpose Evaluation:**\n   - The change addresses a crash scenario, likely due to an error in handling a NULL pointer, which is a security concern.\n\n4. **Security Vulnerability Assessment:**\n   - Preventing a crash by handling errors correctly mitigates potential security risks like DoS or code execution. Although not explicitly stated, it fits security fix patterns.\n\n5. **Confidence Scoring:**\n   - The code changes clearly mitigate a potential crash, with high confidence that this is a security fix.\n\n**Final Output:**  \n**Final Classification:** Security Vulnerability Fix; **Confidence:** 0.9"
}