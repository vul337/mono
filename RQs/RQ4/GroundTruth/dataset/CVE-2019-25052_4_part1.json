{
  "cve_id": "CVE-2019-25052",
  "cwe_ids": [
    "CWE-327"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "OP-TEE/optee_os",
  "commit_msg": "cryp: prevent direct calls to update and final functions\n\nWith inconsistent or malformed data it has been possible to call\n\"update\" and \"final\" crypto functions directly. Using a fuzzer tool [1]\nwe have seen that this results in asserts, i.e., a crash that\npotentially could leak sensitive information.\n\nBy setting the state (initialized) in the crypto context (i.e., the\ntee_cryp_state) at the end of all syscall_*_init functions and then add\na check of the state at the beginning of all update and final functions,\n  we prevent direct entrance to the \"update\" and \"final\" functions.\n\n[1] https://github.com/MartijnB/optee_fuzzer\n\nFixes: OP-TEE-2019-0021\n\nSigned-off-by: Joakim Bech <joakim.bech@linaro.org>\nReported-by: Martijn Bogaard <bogaard@riscure.com>\nAcked-by: Jerome Forissier <jerome.forissier@linaro.org>\nReviewed-by: Jens Wiklander <jens.wiklander@linaro.org>",
  "commit_hash": "34a08bec755670ea0490cb53bbc68058cafc69b6",
  "git_url": "https://github.com/OP-TEE/optee_os/commit/34a08bec755670ea0490cb53bbc68058cafc69b6",
  "file_path": "core/tee/tee_svc_cryp.c",
  "func_name": "syscall_hash_update",
  "func_before": "TEE_Result syscall_hash_update(unsigned long state, const void *chunk,\n\t\t\tsize_t chunk_size)\n{\n\tTEE_Result res;\n\tstruct tee_cryp_state *cs;\n\tstruct tee_ta_session *sess;\n\n\t/* No data, but size provided isn't valid parameters. */\n\tif (!chunk && chunk_size)\n\t\treturn TEE_ERROR_BAD_PARAMETERS;\n\n\t/* Zero length hash is valid, but nothing we need to do. */\n\tif (!chunk_size)\n\t\treturn TEE_SUCCESS;\n\n\tres = tee_ta_get_current_session(&sess);\n\tif (res != TEE_SUCCESS)\n\t\treturn res;\n\n\tres = tee_mmu_check_access_rights(to_user_ta_ctx(sess->ctx),\n\t\t\t\t\t  TEE_MEMORY_ACCESS_READ |\n\t\t\t\t\t  TEE_MEMORY_ACCESS_ANY_OWNER,\n\t\t\t\t\t  (uaddr_t)chunk, chunk_size);\n\tif (res != TEE_SUCCESS)\n\t\treturn res;\n\n\tres = tee_svc_cryp_get_state(sess, tee_svc_uref_to_vaddr(state), &cs);\n\tif (res != TEE_SUCCESS)\n\t\treturn res;\n\n\tswitch (TEE_ALG_GET_CLASS(cs->algo)) {\n\tcase TEE_OPERATION_DIGEST:\n\t\tres = crypto_hash_update(cs->ctx, cs->algo, chunk, chunk_size);\n\t\tif (res != TEE_SUCCESS)\n\t\t\treturn res;\n\t\tbreak;\n\tcase TEE_OPERATION_MAC:\n\t\tres = crypto_mac_update(cs->ctx, cs->algo, chunk, chunk_size);\n\t\tif (res != TEE_SUCCESS)\n\t\t\treturn res;\n\t\tbreak;\n\tdefault:\n\t\treturn TEE_ERROR_BAD_PARAMETERS;\n\t}\n\n\treturn TEE_SUCCESS;\n}",
  "abstract_func_before": "TEE_Result syscall_hash_update(unsigned long VAR_0, const void *VAR_1,\n\t\t\tsize_t VAR_2)\n{\n\tTEE_Result VAR_3;\n\tstruct tee_cryp_state *VAR_4;\n\tstruct tee_ta_session *VAR_5;\n\n\t/* COMMENT_0 */\n\tif (!VAR_1 && VAR_2)\n\t\treturn VAR_6;\n\n\t/* COMMENT_1 */\n\tif (!VAR_2)\n\t\treturn VAR_7;\n\n\tVAR_3 = tee_ta_get_current_session(&VAR_5);\n\tif (VAR_3 != VAR_7)\n\t\treturn VAR_3;\n\n\tVAR_3 = tee_mmu_check_access_rights(to_user_ta_ctx(VAR_5->ctx),\n\t\t\t\t\t  VAR_8 |\n\t\t\t\t\t  VAR_9,\n\t\t\t\t\t  (uaddr_t)VAR_1, VAR_2);\n\tif (VAR_3 != VAR_7)\n\t\treturn VAR_3;\n\n\tVAR_3 = tee_svc_cryp_get_state(VAR_5, tee_svc_uref_to_vaddr(VAR_0), &VAR_4);\n\tif (VAR_3 != VAR_7)\n\t\treturn VAR_3;\n\n\tswitch (TEE_ALG_GET_CLASS(VAR_4->algo)) {\n\tcase VAR_10:\n\t\tVAR_3 = crypto_hash_update(VAR_4->ctx, VAR_4->algo, VAR_1, VAR_2);\n\t\tif (VAR_3 != VAR_7)\n\t\t\treturn VAR_3;\n\t\tbreak;\n\tcase VAR_11:\n\t\tVAR_3 = crypto_mac_update(VAR_4->ctx, VAR_4->algo, VAR_1, VAR_2);\n\t\tif (VAR_3 != VAR_7)\n\t\t\treturn VAR_3;\n\t\tbreak;\n\tdefault:\n\t\treturn VAR_6;\n\t}\n\n\treturn VAR_7;\n}",
  "func_graph_path_before": "OP-TEE/optee_os/34a08bec755670ea0490cb53bbc68058cafc69b6/tee_svc_cryp.c/vul/before/5.json",
  "func": "TEE_Result syscall_hash_update(unsigned long state, const void *chunk,\n\t\t\tsize_t chunk_size)\n{\n\tTEE_Result res;\n\tstruct tee_cryp_state *cs;\n\tstruct tee_ta_session *sess;\n\n\t/* No data, but size provided isn't valid parameters. */\n\tif (!chunk && chunk_size)\n\t\treturn TEE_ERROR_BAD_PARAMETERS;\n\n\t/* Zero length hash is valid, but nothing we need to do. */\n\tif (!chunk_size)\n\t\treturn TEE_SUCCESS;\n\n\tres = tee_ta_get_current_session(&sess);\n\tif (res != TEE_SUCCESS)\n\t\treturn res;\n\n\tres = tee_mmu_check_access_rights(to_user_ta_ctx(sess->ctx),\n\t\t\t\t\t  TEE_MEMORY_ACCESS_READ |\n\t\t\t\t\t  TEE_MEMORY_ACCESS_ANY_OWNER,\n\t\t\t\t\t  (uaddr_t)chunk, chunk_size);\n\tif (res != TEE_SUCCESS)\n\t\treturn res;\n\n\tres = tee_svc_cryp_get_state(sess, tee_svc_uref_to_vaddr(state), &cs);\n\tif (res != TEE_SUCCESS)\n\t\treturn res;\n\n\tif (cs->state != CRYP_STATE_INITIALIZED)\n\t\treturn TEE_ERROR_BAD_STATE;\n\n\tswitch (TEE_ALG_GET_CLASS(cs->algo)) {\n\tcase TEE_OPERATION_DIGEST:\n\t\tres = crypto_hash_update(cs->ctx, cs->algo, chunk, chunk_size);\n\t\tif (res != TEE_SUCCESS)\n\t\t\treturn res;\n\t\tbreak;\n\tcase TEE_OPERATION_MAC:\n\t\tres = crypto_mac_update(cs->ctx, cs->algo, chunk, chunk_size);\n\t\tif (res != TEE_SUCCESS)\n\t\t\treturn res;\n\t\tbreak;\n\tdefault:\n\t\treturn TEE_ERROR_BAD_PARAMETERS;\n\t}\n\n\treturn TEE_SUCCESS;\n}",
  "abstract_func": "TEE_Result syscall_hash_update(unsigned long VAR_0, const void *VAR_1,\n\t\t\tsize_t VAR_2)\n{\n\tTEE_Result VAR_3;\n\tstruct tee_cryp_state *VAR_4;\n\tstruct tee_ta_session *VAR_5;\n\n\t/* COMMENT_0 */\n\tif (!VAR_1 && VAR_2)\n\t\treturn VAR_6;\n\n\t/* COMMENT_1 */\n\tif (!VAR_2)\n\t\treturn VAR_7;\n\n\tVAR_3 = tee_ta_get_current_session(&VAR_5);\n\tif (VAR_3 != VAR_7)\n\t\treturn VAR_3;\n\n\tVAR_3 = tee_mmu_check_access_rights(to_user_ta_ctx(VAR_5->ctx),\n\t\t\t\t\t  VAR_8 |\n\t\t\t\t\t  VAR_9,\n\t\t\t\t\t  (uaddr_t)VAR_1, VAR_2);\n\tif (VAR_3 != VAR_7)\n\t\treturn VAR_3;\n\n\tVAR_3 = tee_svc_cryp_get_state(VAR_5, tee_svc_uref_to_vaddr(VAR_0), &VAR_4);\n\tif (VAR_3 != VAR_7)\n\t\treturn VAR_3;\n\n\tif (VAR_4->state != VAR_10)\n\t\treturn VAR_11;\n\n\tswitch (TEE_ALG_GET_CLASS(VAR_4->algo)) {\n\tcase VAR_12:\n\t\tVAR_3 = crypto_hash_update(VAR_4->ctx, VAR_4->algo, VAR_1, VAR_2);\n\t\tif (VAR_3 != VAR_7)\n\t\t\treturn VAR_3;\n\t\tbreak;\n\tcase VAR_13:\n\t\tVAR_3 = crypto_mac_update(VAR_4->ctx, VAR_4->algo, VAR_1, VAR_2);\n\t\tif (VAR_3 != VAR_7)\n\t\t\treturn VAR_3;\n\t\tbreak;\n\tdefault:\n\t\treturn VAR_6;\n\t}\n\n\treturn VAR_7;\n}",
  "func_graph_path": "OP-TEE/optee_os/34a08bec755670ea0490cb53bbc68058cafc69b6/tee_svc_cryp.c/vul/after/5.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -28,6 +28,9 @@\n \tif (res != TEE_SUCCESS)\n \t\treturn res;\n \n+\tif (cs->state != CRYP_STATE_INITIALIZED)\n+\t\treturn TEE_ERROR_BAD_STATE;\n+\n \tswitch (TEE_ALG_GET_CLASS(cs->algo)) {\n \tcase TEE_OPERATION_DIGEST:\n \t\tres = crypto_hash_update(cs->ctx, cs->algo, chunk, chunk_size);",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "\tif (cs->state != CRYP_STATE_INITIALIZED)",
      "\t\treturn TEE_ERROR_BAD_STATE;",
      ""
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/OP-TEE/optee_os/pull/3316",
  "description": {
    "pr_info": {
      "title": "Riscure fuzzer vuln",
      "number": 3316
    },
    "comment": [
      "Fixes for potential security issues found by Riscure's fuzzer tool.\r\n\r\nI've tested this in QEMU v7, no regressions seen.\r\n```bash\r\n24105 subtests of which 0 failed\r\n96 test cases of which 0 failed\r\n0 test cases were skipped\r\nTEE test application done!\r\n```",
      "Squashed, rebased and tag(s) applied (should be) ready for merge! Thanks!"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 1.0"
}