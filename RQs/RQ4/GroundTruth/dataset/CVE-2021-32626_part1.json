{
  "cve_id": "CVE-2021-32626",
  "cwe_ids": [
    "CWE-787",
    "CWE-122"
  ],
  "cvss_vector": "AV:N/AC:L/Au:S/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "redis",
  "commit_msg": "Fix invalid memory write on lua stack overflow {CVE-2021-32626}\n\nWhen LUA call our C code, by default, the LUA stack has room for 20\nelements. In most cases, this is more than enough but sometimes it's not\nand the caller must verify the LUA stack size before he pushes elements.\n\nOn 3 places in the code, there was no verification of the LUA stack size.\nOn specific inputs this missing verification could have lead to invalid\nmemory write:\n1. On 'luaReplyToRedisReply', one might return a nested reply that will\n   explode the LUA stack.\n2. On 'redisProtocolToLuaType', the Redis reply might be deep enough\n   to explode the LUA stack (notice that currently there is no such\n   command in Redis that returns such a nested reply, but modules might\n   do it)\n3. On 'ldbRedis', one might give a command with enough arguments to\n   explode the LUA stack (all the arguments will be pushed to the LUA\n   stack)\n\nThis commit is solving all those 3 issues by calling 'lua_checkstack' and\nverify that there is enough room in the LUA stack to push elements. In\ncase 'lua_checkstack' returns an error (there is not enough room in the\nLUA stack and it's not possible to increase the stack), we will do the\nfollowing:\n1. On 'luaReplyToRedisReply', we will return an error to the user.\n2. On 'redisProtocolToLuaType' we will exit with panic (we assume this\n   scenario is rare because it can only happen with a module).\n3. On 'ldbRedis', we return an error.",
  "commit_hash": "666ed7facf4524bf6d19b11b20faa2cf93fdf591",
  "git_url": "https://github.com/redis/redis/commit/666ed7facf4524bf6d19b11b20faa2cf93fdf591",
  "file_path": "src/scripting.c",
  "func_name": "ldbRedis",
  "func_before": "void ldbRedis(lua_State *lua, sds *argv, int argc) {\n    int j, saved_rc = server.lua_replicate_commands;\n\n    lua_getglobal(lua,\"redis\");\n    lua_pushstring(lua,\"call\");\n    lua_gettable(lua,-2);       /* Stack: redis, redis.call */\n    for (j = 1; j < argc; j++)\n        lua_pushlstring(lua,argv[j],sdslen(argv[j]));\n    ldb.step = 1;               /* Force redis.call() to log. */\n    server.lua_replicate_commands = 1;\n    lua_pcall(lua,argc-1,1,0);  /* Stack: redis, result */\n    ldb.step = 0;               /* Disable logging. */\n    server.lua_replicate_commands = saved_rc;\n    lua_pop(lua,2);             /* Discard the result and clean the stack. */\n}",
  "abstract_func_before": "void ldbRedis(lua_State *VAR_0, sds *VAR_1, int VAR_2) {\n    int VAR_3, VAR_4 = VAR_5.lua_replicate_commands;\n\n    lua_getglobal(VAR_0,\"redis\");\n    lua_pushstring(VAR_0,\"call\");\n    lua_gettable(VAR_0,-2);       /* COMMENT_0 */\n    for (VAR_3 = 1; VAR_3 < VAR_2; VAR_3++)\n        lua_pushlstring(VAR_0,VAR_1[VAR_3],sdslen(VAR_1[VAR_3]));\n    VAR_6.step = 1;               /* COMMENT_1 */\n    VAR_5.lua_replicate_commands = 1;\n    lua_pcall(VAR_0,VAR_2-1,1,0);  /* COMMENT_2 */\n    VAR_6.step = 0;               /* COMMENT_3 */\n    VAR_5.lua_replicate_commands = VAR_4;\n    lua_pop(VAR_0,2);             /* COMMENT_4 */\n}",
  "func_graph_path_before": "redis/666ed7facf4524bf6d19b11b20faa2cf93fdf591/scripting.c/vul/before/0.json",
  "func": "void ldbRedis(lua_State *lua, sds *argv, int argc) {\n    int j, saved_rc = server.lua_replicate_commands;\n\n    if (!lua_checkstack(lua, argc + 1)) {\n        /* Increase the Lua stack if needed to make sure there is enough room\n         * to push 'argc + 1' elements to the stack. On failure, return error.\n         * Notice that we need, in worst case, 'argc + 1' elements because we push all the arguments\n         * given by the user (without the first argument) and we also push the 'redis' global table and\n         * 'redis.call' function so:\n         * (1 (redis table)) + (1 (redis.call function)) + (argc - 1 (all arguments without the first)) = argc + 1*/\n        ldbLogRedisReply(\"max lua stack reached\");\n        return;\n    }\n\n    lua_getglobal(lua,\"redis\");\n    lua_pushstring(lua,\"call\");\n    lua_gettable(lua,-2);       /* Stack: redis, redis.call */\n    for (j = 1; j < argc; j++)\n        lua_pushlstring(lua,argv[j],sdslen(argv[j]));\n    ldb.step = 1;               /* Force redis.call() to log. */\n    server.lua_replicate_commands = 1;\n    lua_pcall(lua,argc-1,1,0);  /* Stack: redis, result */\n    ldb.step = 0;               /* Disable logging. */\n    server.lua_replicate_commands = saved_rc;\n    lua_pop(lua,2);             /* Discard the result and clean the stack. */\n}",
  "abstract_func": "void ldbRedis(lua_State *VAR_0, sds *VAR_1, int VAR_2) {\n    int VAR_3, VAR_4 = VAR_5.lua_replicate_commands;\n\n    if (!lua_checkstack(VAR_0, VAR_2 + 1)) {\n        /* COMMENT_0 */\n                                                                              \n                                                                                                    \n                                                                                                       \n                                    \n                                                                                                                    \n        ldbLogRedisReply(\"max lua stack reached\");\n        return;\n    }\n\n    lua_getglobal(VAR_0,\"redis\");\n    lua_pushstring(VAR_0,\"call\");\n    lua_gettable(VAR_0,-2);       /* COMMENT_6 */\n    for (VAR_3 = 1; VAR_3 < VAR_2; VAR_3++)\n        lua_pushlstring(VAR_0,VAR_1[VAR_3],sdslen(VAR_1[VAR_3]));\n    VAR_6.step = 1;               /* COMMENT_7 */\n    VAR_5.lua_replicate_commands = 1;\n    lua_pcall(VAR_0,VAR_2-1,1,0);  /* COMMENT_8 */\n    VAR_6.step = 0;               /* COMMENT_9 */\n    VAR_5.lua_replicate_commands = VAR_4;\n    lua_pop(VAR_0,2);             /* COMMENT_10 */\n}",
  "func_graph_path": "redis/666ed7facf4524bf6d19b11b20faa2cf93fdf591/scripting.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,5 +1,16 @@\n void ldbRedis(lua_State *lua, sds *argv, int argc) {\n     int j, saved_rc = server.lua_replicate_commands;\n+\n+    if (!lua_checkstack(lua, argc + 1)) {\n+        /* Increase the Lua stack if needed to make sure there is enough room\n+         * to push 'argc + 1' elements to the stack. On failure, return error.\n+         * Notice that we need, in worst case, 'argc + 1' elements because we push all the arguments\n+         * given by the user (without the first argument) and we also push the 'redis' global table and\n+         * 'redis.call' function so:\n+         * (1 (redis table)) + (1 (redis.call function)) + (argc - 1 (all arguments without the first)) = argc + 1*/\n+        ldbLogRedisReply(\"max lua stack reached\");\n+        return;\n+    }\n \n     lua_getglobal(lua,\"redis\");\n     lua_pushstring(lua,\"call\");",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "",
      "    if (!lua_checkstack(lua, argc + 1)) {",
      "        /* Increase the Lua stack if needed to make sure there is enough room",
      "         * to push 'argc + 1' elements to the stack. On failure, return error.",
      "         * Notice that we need, in worst case, 'argc + 1' elements because we push all the arguments",
      "         * given by the user (without the first argument) and we also push the 'redis' global table and",
      "         * 'redis.call' function so:",
      "         * (1 (redis table)) + (1 (redis.call function)) + (argc - 1 (all arguments without the first)) = argc + 1*/",
      "        ldbLogRedisReply(\"max lua stack reached\");",
      "        return;",
      "    }"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/redis/redis/pull/9584",
  "description": {
    "pr_info": {
      "title": "Release 6.0.16",
      "number": 9584
    },
    "comment": [
      "Upgrade urgency: SECURITY, contains fixes to security issues.\r\n\r\nSecurity Fixes:\r\n* (CVE-2021-41099) Integer to heap buffer overflow handling certain string\r\n  commands and network payloads, when proto-max-bulk-len is manually configured\r\n  to a non-default, very large value [reported by yiyuaner].\r\n* (CVE-2021-32762) Integer to heap buffer overflow issue in redis-cli and\r\n  redis-sentinel parsing large multi-bulk replies on some older and less common\r\n  platforms [reported by Microsoft Vulnerability Research].\r\n* (CVE-2021-32687) Integer to heap buffer overflow with intsets, when\r\n  set-max-intset-entries is manually configured to a non-default, very large\r\n  value [reported by Pawel Wieczorkiewicz, AWS].\r\n* (CVE-2021-32675) Denial Of Service when processing RESP request payloads with\r\n  a large number of elements on many connections.\r\n* (CVE-2021-32672) Random heap reading issue with Lua Debugger [reported by\r\n  Meir Shpilraien].\r\n* (CVE-2021-32628) Integer to heap buffer overflow handling ziplist-encoded\r\n  data types, when configuring a large, non-default value for\r\n  hash-max-ziplist-entries, hash-max-ziplist-value, zset-max-ziplist-entries\r\n  or zset-max-ziplist-value [reported by sundb].\r\n* (CVE-2021-32627) Integer to heap buffer overflow issue with streams, when\r\n  configuring a non-default, large value for proto-max-bulk-len and\r\n  client-query-buffer-limit [reported by sundb].\r\n* (CVE-2021-32626) Specially crafted Lua scripts may result with Heap buffer\r\n  overflow [reported by Meir Shpilraien].\r\n\r\nOther bug fixes:\r\n* Fix appendfsync to always guarantee fsync before reply, on MacOS and FreeBSD (kqueue) (#9416)\r\n* Fix the wrong mis-detection of sync_file_range system call, affecting performance (#9371)\r\n* Fix replication issues when repl-diskless-load is used (#9280)\r\n",
      "CI failures on MacOS (due to tests being timing sensitive): \r\n```\r\n*** [err]: No write if min-slaves-max-lag is > of the slave lag in tests/integration/replication-2.tcl\r\nExpected 'NOREPLICAS*' to equal or match 'OK'\r\n*** [err]: With min-slaves-to-write: master not writable with lagged slave in tests/integration/replication-4.tcl\r\nExpected 'NOREPLICAS*' to equal or match 'OK'\r\nCleanup: may take some time... OK\r\n```\r\nsolved by #8461 and #8583\r\n\r\nalso, the `build-ubuntu-old` CI got hung (probably no longer supported)",
      "Hi,\r\n [hi_sdsMakeRoomFor](https://github.com/redis/redis/blob/4930d19e70c391750479951022e207e19111eb55/deps/hiredis/sds.c#L196)  in deps/hiredis/sds.c wouldn't c487a9c03f89498976b3b6574df2cac763af16cc commit be applicable for hiredis code as well?\r\n",
      "Pinging @michael-grunder, do you think this fix is relevant for hiredis?"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 1.0"
}