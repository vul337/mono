{
  "cve_id": "CVE-2020-27794",
  "cwe_ids": [
    "CWE-415"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:H",
  "cvss_is_v3": true,
  "repo_name": "radareorg/radare2",
  "commit_msg": "Fix #16303 - c->table_query double free (#16318)",
  "commit_hash": "cb8b683758edddae2d2f62e8e63a738c39f92683",
  "git_url": "https://github.com/radareorg/radare2/commit/cb8b683758edddae2d2f62e8e63a738c39f92683",
  "file_path": "libr/core/core.c",
  "func_name": "r_core_fini",
  "func_before": "R_API void r_core_fini(RCore *c) {\n\tif (!c) {\n\t\treturn;\n\t}\n\tr_core_task_break_all (&c->tasks);\n\tr_core_task_join (&c->tasks, NULL, -1);\n\tr_core_wait (c);\n\t/* TODO: it leaks as shit */\n\t//update_sdb (c);\n\t// avoid double free\n\tr_list_free (c->ropchain);\n\tr_event_free (c->ev);\n\tfree (c->cmdlog);\n\tfree (c->lastsearch);\n\tR_FREE (c->cons->pager);\n\tfree (c->cmdqueue);\n\tfree (c->lastcmd);\n\tfree (c->stkcmd);\n\tr_list_free (c->visual.tabs);\n\tfree (c->block);\n\tr_core_autocomplete_free (c->autocomplete);\n\n\tr_list_free (c->gadgets);\n\tr_list_free (c->undos);\n\tr_num_free (c->num);\n\t// TODO: sync or not? sdb_sync (c->sdb);\n\t// TODO: sync all dbs?\n\t//r_core_file_free (c->file);\n\t//c->file = NULL;\n\tfree (c->table_query);\n\tr_list_free (c->files);\n\tr_list_free (c->watchers);\n\tr_list_free (c->scriptstack);\n\tr_core_task_scheduler_fini (&c->tasks);\n\tc->rcmd = r_cmd_free (c->rcmd);\n\tr_list_free (c->cmd_descriptors);\n\tc->anal = r_anal_free (c->anal);\n\tr_asm_free (c->assembler);\n\tc->assembler = NULL;\n\tc->print = r_print_free (c->print);\n\tc->bin = (r_bin_free (c->bin), NULL);\n\tc->lang = (r_lang_free (c->lang), NULL);\n\tc->dbg = (r_debug_free (c->dbg), NULL);\n\tr_io_free (c->io);\n\tr_config_free (c->config);\n\t/* after r_config_free, the value of I.teefile is trashed */\n\t/* rconfig doesnt knows how to deinitialize vars, so we\n\tshould probably need to add a r_config_free_payload callback */\n\tr_cons_free ();\n\tr_cons_singleton ()->teefile = NULL; // HACK\n\tr_search_free (c->search);\n\tr_flag_free (c->flags);\n\tr_fs_free (c->fs);\n\tr_egg_free (c->egg);\n\tr_lib_free (c->lib);\n\tr_buf_free (c->yank_buf);\n\tr_agraph_free (c->graph);\n\tfree (c->asmqjmps);\n\tsdb_free (c->sdb);\n\tr_core_log_free (c->log);\n\tr_parse_free (c->parser);\n\tfree (c->times);\n}",
  "abstract_func_before": "R_API void r_core_fini(RCore *VAR_0) {\n\tif (!VAR_0) {\n\t\treturn;\n\t}\n\tr_core_task_break_all (&VAR_0->tasks);\n\tr_core_task_join (&VAR_0->tasks, NULL, -1);\n\tr_core_wait (VAR_0);\n\t/* COMMENT_0 */\n\t/* COMMENT_1 */\n\t/* COMMENT_2 */\n\tr_list_free (VAR_0->ropchain);\n\tr_event_free (VAR_0->ev);\n\tfree (VAR_0->cmdlog);\n\tfree (VAR_0->lastsearch);\n\tR_FREE (VAR_0->cons->pager);\n\tfree (VAR_0->cmdqueue);\n\tfree (VAR_0->lastcmd);\n\tfree (VAR_0->stkcmd);\n\tr_list_free (VAR_0->visual.tabs);\n\tfree (VAR_0->block);\n\tr_core_autocomplete_free (VAR_0->autocomplete);\n\n\tr_list_free (VAR_0->gadgets);\n\tr_list_free (VAR_0->undos);\n\tr_num_free (VAR_0->num);\n\t/* COMMENT_3 */\n\t/* COMMENT_4 */\n\t/* COMMENT_5 */\n\t/* COMMENT_6 */\n\tfree (VAR_0->table_query);\n\tr_list_free (VAR_0->files);\n\tr_list_free (VAR_0->watchers);\n\tr_list_free (VAR_0->scriptstack);\n\tr_core_task_scheduler_fini (&VAR_0->tasks);\n\tVAR_0->rcmd = r_cmd_free (VAR_0->rcmd);\n\tr_list_free (VAR_0->cmd_descriptors);\n\tVAR_0->anal = r_anal_free (VAR_0->anal);\n\tr_asm_free (VAR_0->assembler);\n\tVAR_0->assembler = NULL;\n\tVAR_0->print = r_print_free (VAR_0->print);\n\tVAR_0->bin = (r_bin_free (VAR_0->bin), NULL);\n\tVAR_0->lang = (r_lang_free (VAR_0->lang), NULL);\n\tVAR_0->dbg = (r_debug_free (VAR_0->dbg), NULL);\n\tr_io_free (VAR_0->io);\n\tr_config_free (VAR_0->config);\n\t/* COMMENT_7 */\n\t/* COMMENT_8 */\n                                                                \n\tr_cons_free ();\n\tr_cons_singleton ()->teefile = NULL; /* COMMENT_10 */\n\tr_search_free (VAR_0->search);\n\tr_flag_free (VAR_0->flags);\n\tr_fs_free (VAR_0->fs);\n\tr_egg_free (VAR_0->egg);\n\tr_lib_free (VAR_0->lib);\n\tr_buf_free (VAR_0->yank_buf);\n\tr_agraph_free (VAR_0->graph);\n\tfree (VAR_0->asmqjmps);\n\tsdb_free (VAR_0->sdb);\n\tr_core_log_free (VAR_0->log);\n\tr_parse_free (VAR_0->parser);\n\tfree (VAR_0->times);\n}",
  "func_graph_path_before": null,
  "func": "R_API void r_core_fini(RCore *c) {\n\tif (!c) {\n\t\treturn;\n\t}\n\tr_core_task_break_all (&c->tasks);\n\tr_core_task_join (&c->tasks, NULL, -1);\n\tr_core_wait (c);\n\t/* TODO: it leaks as shit */\n\t//update_sdb (c);\n\t// avoid double free\n\tr_list_free (c->ropchain);\n\tr_event_free (c->ev);\n\tfree (c->cmdlog);\n\tfree (c->lastsearch);\n\tR_FREE (c->cons->pager);\n\tfree (c->cmdqueue);\n\tfree (c->lastcmd);\n\tfree (c->stkcmd);\n\tr_list_free (c->visual.tabs);\n\tfree (c->block);\n\tr_core_autocomplete_free (c->autocomplete);\n\n\tr_list_free (c->gadgets);\n\tr_list_free (c->undos);\n\tr_num_free (c->num);\n\t// TODO: sync or not? sdb_sync (c->sdb);\n\t// TODO: sync all dbs?\n\t//r_core_file_free (c->file);\n\t//c->file = NULL;\n\tR_FREE (c->table_query);\n\tr_list_free (c->files);\n\tr_list_free (c->watchers);\n\tr_list_free (c->scriptstack);\n\tr_core_task_scheduler_fini (&c->tasks);\n\tc->rcmd = r_cmd_free (c->rcmd);\n\tr_list_free (c->cmd_descriptors);\n\tc->anal = r_anal_free (c->anal);\n\tr_asm_free (c->assembler);\n\tc->assembler = NULL;\n\tc->print = r_print_free (c->print);\n\tc->bin = (r_bin_free (c->bin), NULL);\n\tc->lang = (r_lang_free (c->lang), NULL);\n\tc->dbg = (r_debug_free (c->dbg), NULL);\n\tr_io_free (c->io);\n\tr_config_free (c->config);\n\t/* after r_config_free, the value of I.teefile is trashed */\n\t/* rconfig doesnt knows how to deinitialize vars, so we\n\tshould probably need to add a r_config_free_payload callback */\n\tr_cons_free ();\n\tr_cons_singleton ()->teefile = NULL; // HACK\n\tr_search_free (c->search);\n\tr_flag_free (c->flags);\n\tr_fs_free (c->fs);\n\tr_egg_free (c->egg);\n\tr_lib_free (c->lib);\n\tr_buf_free (c->yank_buf);\n\tr_agraph_free (c->graph);\n\tfree (c->asmqjmps);\n\tsdb_free (c->sdb);\n\tr_core_log_free (c->log);\n\tr_parse_free (c->parser);\n\tfree (c->times);\n}",
  "abstract_func": "R_API void r_core_fini(RCore *VAR_0) {\n\tif (!VAR_0) {\n\t\treturn;\n\t}\n\tr_core_task_break_all (&VAR_0->tasks);\n\tr_core_task_join (&VAR_0->tasks, NULL, -1);\n\tr_core_wait (VAR_0);\n\t/* COMMENT_0 */\n\t/* COMMENT_1 */\n\t/* COMMENT_2 */\n\tr_list_free (VAR_0->ropchain);\n\tr_event_free (VAR_0->ev);\n\tfree (VAR_0->cmdlog);\n\tfree (VAR_0->lastsearch);\n\tR_FREE (VAR_0->cons->pager);\n\tfree (VAR_0->cmdqueue);\n\tfree (VAR_0->lastcmd);\n\tfree (VAR_0->stkcmd);\n\tr_list_free (VAR_0->visual.tabs);\n\tfree (VAR_0->block);\n\tr_core_autocomplete_free (VAR_0->autocomplete);\n\n\tr_list_free (VAR_0->gadgets);\n\tr_list_free (VAR_0->undos);\n\tr_num_free (VAR_0->num);\n\t/* COMMENT_3 */\n\t/* COMMENT_4 */\n\t/* COMMENT_5 */\n\t/* COMMENT_6 */\n\tR_FREE (VAR_0->table_query);\n\tr_list_free (VAR_0->files);\n\tr_list_free (VAR_0->watchers);\n\tr_list_free (VAR_0->scriptstack);\n\tr_core_task_scheduler_fini (&VAR_0->tasks);\n\tVAR_0->rcmd = r_cmd_free (VAR_0->rcmd);\n\tr_list_free (VAR_0->cmd_descriptors);\n\tVAR_0->anal = r_anal_free (VAR_0->anal);\n\tr_asm_free (VAR_0->assembler);\n\tVAR_0->assembler = NULL;\n\tVAR_0->print = r_print_free (VAR_0->print);\n\tVAR_0->bin = (r_bin_free (VAR_0->bin), NULL);\n\tVAR_0->lang = (r_lang_free (VAR_0->lang), NULL);\n\tVAR_0->dbg = (r_debug_free (VAR_0->dbg), NULL);\n\tr_io_free (VAR_0->io);\n\tr_config_free (VAR_0->config);\n\t/* COMMENT_7 */\n\t/* COMMENT_8 */\n                                                                \n\tr_cons_free ();\n\tr_cons_singleton ()->teefile = NULL; /* COMMENT_10 */\n\tr_search_free (VAR_0->search);\n\tr_flag_free (VAR_0->flags);\n\tr_fs_free (VAR_0->fs);\n\tr_egg_free (VAR_0->egg);\n\tr_lib_free (VAR_0->lib);\n\tr_buf_free (VAR_0->yank_buf);\n\tr_agraph_free (VAR_0->graph);\n\tfree (VAR_0->asmqjmps);\n\tsdb_free (VAR_0->sdb);\n\tr_core_log_free (VAR_0->log);\n\tr_parse_free (VAR_0->parser);\n\tfree (VAR_0->times);\n}",
  "func_graph_path": null,
  "diff_func": "--- func_before\n+++ func_after\n@@ -27,7 +27,7 @@\n \t// TODO: sync all dbs?\n \t//r_core_file_free (c->file);\n \t//c->file = NULL;\n-\tfree (c->table_query);\n+\tR_FREE (c->table_query);\n \tr_list_free (c->files);\n \tr_list_free (c->watchers);\n \tr_list_free (c->scriptstack);",
  "diff_line_info": {
    "deleted_lines": [
      "\tfree (c->table_query);"
    ],
    "added_lines": [
      "\tR_FREE (c->table_query);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/radareorg/radare2/pull/16318",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/radareorg/radare2/pull/16318: 403 Client Error: Forbidden for url: https://api.github.com/repos/radareorg/radare2/pulls/16318",
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Defect Remediation & Feature Upgrades;  \n**Confidence:** 0.9\n\nThe patch addresses a double free issue, which is a bug in the core logic, not explicitly stated as a security vulnerability. The code change uses a safer macro to prevent the issue."
}