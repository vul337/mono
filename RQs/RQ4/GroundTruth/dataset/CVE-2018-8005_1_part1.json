{
  "cve_id": "CVE-2018-8005",
  "cwe_ids": [
    "CWE-400"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "apache/trafficserver",
  "commit_msg": "Adds a new configuration proxy.config.http.allow_multi_range\n\nThis is needed to prevent potential abuse with well formed multi-\nrange requests.",
  "commit_hash": "6d248026b04d69e5c5049709c17ea671328ea4ea",
  "git_url": "https://github.com/apache/trafficserver/commit/6d248026b04d69e5c5049709c17ea671328ea4ea",
  "file_path": "proxy/http/HttpConfig.cc",
  "func_name": "HttpConfig::reconfigure",
  "func_before": "void\nHttpConfig::reconfigure()\n{\n#define INT_TO_BOOL(i) ((i) ? 1 : 0);\n\n  HttpConfigParams *params;\n\n  params = new HttpConfigParams;\n\n  params->inbound_ip4 = m_master.inbound_ip4;\n  params->inbound_ip6 = m_master.inbound_ip6;\n\n  params->outbound_ip4 = m_master.outbound_ip4;\n  params->outbound_ip6 = m_master.outbound_ip6;\n\n  params->proxy_hostname                           = ats_strdup(m_master.proxy_hostname);\n  params->proxy_hostname_len                       = (params->proxy_hostname) ? strlen(params->proxy_hostname) : 0;\n  params->no_dns_forward_to_parent                 = INT_TO_BOOL(m_master.no_dns_forward_to_parent);\n  params->oride.uncacheable_requests_bypass_parent = INT_TO_BOOL(m_master.oride.uncacheable_requests_bypass_parent);\n  params->no_origin_server_dns                     = INT_TO_BOOL(m_master.no_origin_server_dns);\n  params->use_client_target_addr                   = m_master.use_client_target_addr;\n  params->use_client_source_port                   = INT_TO_BOOL(m_master.use_client_source_port);\n  params->oride.maintain_pristine_host_hdr         = INT_TO_BOOL(m_master.oride.maintain_pristine_host_hdr);\n\n  params->disable_ssl_parenting        = INT_TO_BOOL(m_master.disable_ssl_parenting);\n  params->oride.forward_connect_method = INT_TO_BOOL(m_master.oride.forward_connect_method);\n\n  params->server_max_connections             = m_master.server_max_connections;\n  params->max_websocket_connections          = m_master.max_websocket_connections;\n  params->oride.server_tcp_init_cwnd         = m_master.oride.server_tcp_init_cwnd;\n  params->oride.origin_max_connections       = m_master.oride.origin_max_connections;\n  params->oride.origin_max_connections_queue = m_master.oride.origin_max_connections_queue;\n  // if origin_max_connections_queue is set without max_connections, it is meaningless, so we'll warn\n  if (params->oride.origin_max_connections_queue > 0 &&\n      !(params->oride.origin_max_connections || params->origin_min_keep_alive_connections)) {\n    Warning(\"origin_max_connections_queue is set, but neither origin_max_connections nor origin_min_keep_alive_connections are \"\n            \"set, please correct your records.config\");\n  }\n  params->origin_min_keep_alive_connections     = m_master.origin_min_keep_alive_connections;\n  params->oride.attach_server_session_to_client = m_master.oride.attach_server_session_to_client;\n\n  if (params->oride.origin_max_connections && params->oride.origin_max_connections < params->origin_min_keep_alive_connections) {\n    Warning(\"origin_max_connections < origin_min_keep_alive_connections, setting min=max , please correct your records.config\");\n    params->origin_min_keep_alive_connections = params->oride.origin_max_connections;\n  }\n\n  params->oride.insert_request_via_string   = m_master.oride.insert_request_via_string;\n  params->oride.insert_response_via_string  = m_master.oride.insert_response_via_string;\n  params->proxy_request_via_string          = ats_strdup(m_master.proxy_request_via_string);\n  params->proxy_request_via_string_len      = (params->proxy_request_via_string) ? strlen(params->proxy_request_via_string) : 0;\n  params->proxy_response_via_string         = ats_strdup(m_master.proxy_response_via_string);\n  params->proxy_response_via_string_len     = (params->proxy_response_via_string) ? strlen(params->proxy_response_via_string) : 0;\n  params->oride.proxy_response_hsts_max_age = m_master.oride.proxy_response_hsts_max_age;\n  params->oride.proxy_response_hsts_include_subdomains = m_master.oride.proxy_response_hsts_include_subdomains;\n\n  params->oride.keep_alive_enabled_in       = INT_TO_BOOL(m_master.oride.keep_alive_enabled_in);\n  params->oride.keep_alive_enabled_out      = INT_TO_BOOL(m_master.oride.keep_alive_enabled_out);\n  params->oride.chunking_enabled            = INT_TO_BOOL(m_master.oride.chunking_enabled);\n  params->oride.auth_server_session_private = INT_TO_BOOL(m_master.oride.auth_server_session_private);\n\n  params->oride.http_chunking_size = m_master.oride.http_chunking_size;\n\n  params->oride.post_check_content_length_enabled = INT_TO_BOOL(m_master.oride.post_check_content_length_enabled);\n\n  params->oride.flow_control_enabled = INT_TO_BOOL(m_master.oride.flow_control_enabled);\n  params->oride.flow_high_water_mark = m_master.oride.flow_high_water_mark;\n  params->oride.flow_low_water_mark  = m_master.oride.flow_low_water_mark;\n  // If not set (zero) then make values the same.\n  if (params->oride.flow_low_water_mark <= 0) {\n    params->oride.flow_low_water_mark = params->oride.flow_high_water_mark;\n  }\n  if (params->oride.flow_high_water_mark <= 0) {\n    params->oride.flow_high_water_mark = params->oride.flow_low_water_mark;\n  }\n  if (params->oride.flow_high_water_mark < params->oride.flow_low_water_mark) {\n    Warning(\"Flow control low water mark is greater than high water mark, flow control disabled\");\n    params->oride.flow_control_enabled = 0;\n    // zero means \"hardwired default\" when actually used.\n    params->oride.flow_high_water_mark = params->oride.flow_low_water_mark = 0;\n  }\n\n  params->oride.server_session_sharing_match = m_master.oride.server_session_sharing_match;\n  params->server_session_sharing_pool        = m_master.server_session_sharing_pool;\n  params->oride.keep_alive_post_out          = m_master.oride.keep_alive_post_out;\n\n  params->oride.keep_alive_no_activity_timeout_in   = m_master.oride.keep_alive_no_activity_timeout_in;\n  params->oride.keep_alive_no_activity_timeout_out  = m_master.oride.keep_alive_no_activity_timeout_out;\n  params->oride.transaction_no_activity_timeout_in  = m_master.oride.transaction_no_activity_timeout_in;\n  params->oride.transaction_no_activity_timeout_out = m_master.oride.transaction_no_activity_timeout_out;\n  params->oride.transaction_active_timeout_in       = m_master.oride.transaction_active_timeout_in;\n  params->oride.transaction_active_timeout_out      = m_master.oride.transaction_active_timeout_out;\n  params->oride.websocket_active_timeout            = m_master.oride.websocket_active_timeout;\n  params->oride.websocket_inactive_timeout          = m_master.oride.websocket_inactive_timeout;\n  params->accept_no_activity_timeout                = m_master.accept_no_activity_timeout;\n  params->oride.background_fill_active_timeout      = m_master.oride.background_fill_active_timeout;\n  params->oride.background_fill_threshold           = m_master.oride.background_fill_threshold;\n\n  params->oride.connect_attempts_max_retries             = m_master.oride.connect_attempts_max_retries;\n  params->oride.connect_attempts_max_retries_dead_server = m_master.oride.connect_attempts_max_retries_dead_server;\n  if (m_master.oride.connect_attempts_rr_retries > params->oride.connect_attempts_max_retries) {\n    Warning(\"connect_attempts_rr_retries (%\" PRIu64 \") is greater than \"\n            \"connect_attempts_max_retries (%\" PRIu64 \"), this means requests \"\n            \"will never redispatch to another server\",\n            m_master.oride.connect_attempts_rr_retries, params->oride.connect_attempts_max_retries);\n  }\n  params->oride.connect_attempts_rr_retries   = m_master.oride.connect_attempts_rr_retries;\n  params->oride.connect_attempts_timeout      = m_master.oride.connect_attempts_timeout;\n  params->oride.post_connect_attempts_timeout = m_master.oride.post_connect_attempts_timeout;\n  params->oride.parent_connect_attempts       = m_master.oride.parent_connect_attempts;\n  params->oride.parent_retry_time             = m_master.oride.parent_retry_time;\n  params->oride.parent_fail_threshold         = m_master.oride.parent_fail_threshold;\n  params->oride.per_parent_connect_attempts   = m_master.oride.per_parent_connect_attempts;\n  params->oride.parent_connect_timeout        = m_master.oride.parent_connect_timeout;\n  params->oride.parent_failures_update_hostdb = m_master.oride.parent_failures_update_hostdb;\n\n  params->oride.sock_recv_buffer_size_out = m_master.oride.sock_recv_buffer_size_out;\n  params->oride.sock_send_buffer_size_out = m_master.oride.sock_send_buffer_size_out;\n  params->oride.sock_packet_mark_out      = m_master.oride.sock_packet_mark_out;\n  params->oride.sock_packet_tos_out       = m_master.oride.sock_packet_tos_out;\n  params->oride.sock_option_flag_out      = m_master.oride.sock_option_flag_out;\n\n  // Clear the TCP Fast Open option if it is not supported on this host.\n  if ((params->oride.sock_option_flag_out & NetVCOptions::SOCK_OPT_TCP_FAST_OPEN) && !SocketManager::fastopen_supported()) {\n    Status(\"disabling unsupported TCP Fast Open flag on proxy.config.net.sock_option_flag_out\");\n    params->oride.sock_option_flag_out &= ~NetVCOptions::SOCK_OPT_TCP_FAST_OPEN;\n  }\n\n  params->oride.fwd_proxy_auth_to_parent = INT_TO_BOOL(m_master.oride.fwd_proxy_auth_to_parent);\n\n  params->oride.anonymize_remove_from       = INT_TO_BOOL(m_master.oride.anonymize_remove_from);\n  params->oride.anonymize_remove_referer    = INT_TO_BOOL(m_master.oride.anonymize_remove_referer);\n  params->oride.anonymize_remove_user_agent = INT_TO_BOOL(m_master.oride.anonymize_remove_user_agent);\n  params->oride.anonymize_remove_cookie     = INT_TO_BOOL(m_master.oride.anonymize_remove_cookie);\n  params->oride.anonymize_remove_client_ip  = INT_TO_BOOL(m_master.oride.anonymize_remove_client_ip);\n  params->oride.anonymize_insert_client_ip  = INT_TO_BOOL(m_master.oride.anonymize_insert_client_ip);\n  params->anonymize_other_header_list       = ats_strdup(m_master.anonymize_other_header_list);\n\n  params->oride.global_user_agent_header = ats_strdup(m_master.oride.global_user_agent_header);\n  params->oride.global_user_agent_header_size =\n    params->oride.global_user_agent_header ? strlen(params->oride.global_user_agent_header) : 0;\n\n  params->oride.proxy_response_server_string = ats_strdup(m_master.oride.proxy_response_server_string);\n  params->oride.proxy_response_server_string_len =\n    params->oride.proxy_response_server_string ? strlen(params->oride.proxy_response_server_string) : 0;\n  params->oride.proxy_response_server_enabled = m_master.oride.proxy_response_server_enabled;\n\n  params->oride.insert_squid_x_forwarded_for = INT_TO_BOOL(m_master.oride.insert_squid_x_forwarded_for);\n  params->oride.insert_forwarded             = m_master.oride.insert_forwarded;\n  params->oride.insert_age_in_response       = INT_TO_BOOL(m_master.oride.insert_age_in_response);\n  params->enable_http_stats                  = INT_TO_BOOL(m_master.enable_http_stats);\n  params->oride.normalize_ae                 = m_master.oride.normalize_ae;\n\n  params->oride.cache_heuristic_min_lifetime = m_master.oride.cache_heuristic_min_lifetime;\n  params->oride.cache_heuristic_max_lifetime = m_master.oride.cache_heuristic_max_lifetime;\n  params->oride.cache_heuristic_lm_factor    = std::min(std::max(m_master.oride.cache_heuristic_lm_factor, 0.0f), 1.0f);\n\n  params->oride.cache_guaranteed_min_lifetime = m_master.oride.cache_guaranteed_min_lifetime;\n  params->oride.cache_guaranteed_max_lifetime = m_master.oride.cache_guaranteed_max_lifetime;\n\n  params->oride.cache_max_stale_age = m_master.oride.cache_max_stale_age;\n\n  params->oride.cache_vary_default_text   = ats_strdup(m_master.oride.cache_vary_default_text);\n  params->oride.cache_vary_default_images = ats_strdup(m_master.oride.cache_vary_default_images);\n  params->oride.cache_vary_default_other  = ats_strdup(m_master.oride.cache_vary_default_other);\n\n  params->oride.srv_enabled = m_master.oride.srv_enabled;\n\n  // open read failure retries\n  params->oride.max_cache_open_read_retries = m_master.oride.max_cache_open_read_retries;\n  params->oride.cache_open_read_retry_time  = m_master.oride.cache_open_read_retry_time;\n  params->oride.cache_generation_number     = m_master.oride.cache_generation_number;\n\n  // open write failure retries\n  params->oride.max_cache_open_write_retries = m_master.oride.max_cache_open_write_retries;\n\n  params->oride.cache_http                        = INT_TO_BOOL(m_master.oride.cache_http);\n  params->oride.cache_ignore_client_no_cache      = INT_TO_BOOL(m_master.oride.cache_ignore_client_no_cache);\n  params->oride.cache_ignore_client_cc_max_age    = INT_TO_BOOL(m_master.oride.cache_ignore_client_cc_max_age);\n  params->oride.cache_ims_on_client_no_cache      = INT_TO_BOOL(m_master.oride.cache_ims_on_client_no_cache);\n  params->oride.cache_ignore_server_no_cache      = INT_TO_BOOL(m_master.oride.cache_ignore_server_no_cache);\n  params->oride.cache_responses_to_cookies        = m_master.oride.cache_responses_to_cookies;\n  params->oride.cache_ignore_auth                 = INT_TO_BOOL(m_master.oride.cache_ignore_auth);\n  params->oride.cache_urls_that_look_dynamic      = INT_TO_BOOL(m_master.oride.cache_urls_that_look_dynamic);\n  params->oride.cache_enable_default_vary_headers = INT_TO_BOOL(m_master.oride.cache_enable_default_vary_headers);\n  params->cache_post_method                       = INT_TO_BOOL(m_master.cache_post_method);\n\n  params->oride.ignore_accept_mismatch          = m_master.oride.ignore_accept_mismatch;\n  params->oride.ignore_accept_language_mismatch = m_master.oride.ignore_accept_language_mismatch;\n  params->oride.ignore_accept_encoding_mismatch = m_master.oride.ignore_accept_encoding_mismatch;\n  params->oride.ignore_accept_charset_mismatch  = m_master.oride.ignore_accept_charset_mismatch;\n\n  params->send_100_continue_response = INT_TO_BOOL(m_master.send_100_continue_response);\n  params->disallow_post_100_continue = INT_TO_BOOL(m_master.disallow_post_100_continue);\n  params->parser_allow_non_http      = INT_TO_BOOL(m_master.parser_allow_non_http);\n  params->keepalive_internal_vc      = INT_TO_BOOL(m_master.keepalive_internal_vc);\n\n  params->oride.cache_open_write_fail_action = m_master.oride.cache_open_write_fail_action;\n\n  params->oride.cache_when_to_revalidate = m_master.oride.cache_when_to_revalidate;\n  params->max_post_size                  = m_master.max_post_size;\n\n  params->oride.cache_required_headers = m_master.oride.cache_required_headers;\n  params->oride.cache_range_lookup     = INT_TO_BOOL(m_master.oride.cache_range_lookup);\n  params->oride.cache_range_write      = INT_TO_BOOL(m_master.oride.cache_range_write);\n\n  params->connect_ports_string = ats_strdup(m_master.connect_ports_string);\n  params->connect_ports        = parse_ports_list(params->connect_ports_string);\n\n  params->oride.request_hdr_max_size  = m_master.oride.request_hdr_max_size;\n  params->oride.response_hdr_max_size = m_master.oride.response_hdr_max_size;\n\n  params->push_method_enabled = INT_TO_BOOL(m_master.push_method_enabled);\n\n  params->reverse_proxy_enabled            = INT_TO_BOOL(m_master.reverse_proxy_enabled);\n  params->url_remap_required               = INT_TO_BOOL(m_master.url_remap_required);\n  params->errors_log_error_pages           = INT_TO_BOOL(m_master.errors_log_error_pages);\n  params->oride.slow_log_threshold         = m_master.oride.slow_log_threshold;\n  params->record_cop_page                  = INT_TO_BOOL(m_master.record_cop_page);\n  params->oride.ssl_client_verify_server   = m_master.oride.ssl_client_verify_server;\n  params->oride.send_http11_requests       = m_master.oride.send_http11_requests;\n  params->oride.doc_in_cache_skip_dns      = INT_TO_BOOL(m_master.oride.doc_in_cache_skip_dns);\n  params->oride.default_buffer_size_index  = m_master.oride.default_buffer_size_index;\n  params->oride.default_buffer_water_mark  = m_master.oride.default_buffer_water_mark;\n  params->enable_http_info                 = INT_TO_BOOL(m_master.enable_http_info);\n  params->oride.body_factory_template_base = ats_strdup(m_master.oride.body_factory_template_base);\n  params->oride.body_factory_template_base_len =\n    params->oride.body_factory_template_base ? strlen(params->oride.body_factory_template_base) : 0;\n  params->body_factory_response_max_size = m_master.body_factory_response_max_size;\n  params->reverse_proxy_no_host_redirect = ats_strdup(m_master.reverse_proxy_no_host_redirect);\n  params->reverse_proxy_no_host_redirect_len =\n    params->reverse_proxy_no_host_redirect ? strlen(params->reverse_proxy_no_host_redirect) : 0;\n\n  params->referer_filter_enabled  = INT_TO_BOOL(m_master.referer_filter_enabled);\n  params->referer_format_redirect = INT_TO_BOOL(m_master.referer_format_redirect);\n\n  params->strict_uri_parsing = INT_TO_BOOL(m_master.strict_uri_parsing);\n\n  params->oride.down_server_timeout    = m_master.oride.down_server_timeout;\n  params->oride.client_abort_threshold = m_master.oride.client_abort_threshold;\n\n  params->oride.negative_caching_enabled       = INT_TO_BOOL(m_master.oride.negative_caching_enabled);\n  params->oride.negative_caching_lifetime      = m_master.oride.negative_caching_lifetime;\n  params->oride.negative_revalidating_enabled  = INT_TO_BOOL(m_master.oride.negative_revalidating_enabled);\n  params->oride.negative_revalidating_lifetime = m_master.oride.negative_revalidating_lifetime;\n\n  params->oride.redirect_use_orig_cache_key = INT_TO_BOOL(m_master.oride.redirect_use_orig_cache_key);\n  params->redirection_host_no_port          = INT_TO_BOOL(m_master.redirection_host_no_port);\n  params->oride.number_of_redirections      = m_master.oride.number_of_redirections;\n  params->post_copy_size                    = m_master.post_copy_size;\n  params->oride.client_cert_filename        = ats_strdup(m_master.oride.client_cert_filename);\n  params->oride.client_cert_filepath        = ats_strdup(m_master.oride.client_cert_filepath);\n\n  // Local Manager\n  params->synthetic_port = m_master.synthetic_port;\n\n  m_id = configProcessor.set(m_id, params);\n\n#undef INT_TO_BOOL\n}",
  "abstract_func_before": "void\nHttpConfig::reconfigure()\n{\n#define INT_TO_BOOL(VAR_0) ((i) ? 1 : 0);\n\n  HttpConfigParams *VAR_1;\n\n  VAR_1 = new HttpConfigParams;\n\n  VAR_1->inbound_ip4 = VAR_2.inbound_ip4;\n  VAR_1->inbound_ip6 = VAR_2.inbound_ip6;\n\n  VAR_1->outbound_ip4 = VAR_2.outbound_ip4;\n  VAR_1->outbound_ip6 = VAR_2.outbound_ip6;\n\n  VAR_1->proxy_hostname                           = ats_strdup(VAR_2.proxy_hostname);\n  VAR_1->proxy_hostname_len                       = (VAR_1->proxy_hostname) ? strlen(VAR_1->proxy_hostname) : 0;\n  VAR_1->no_dns_forward_to_parent                 = INT_TO_BOOL(VAR_2.no_dns_forward_to_parent);\n  VAR_1->oride.uncacheable_requests_bypass_parent = INT_TO_BOOL(VAR_2.oride.uncacheable_requests_bypass_parent);\n  VAR_1->no_origin_server_dns                     = INT_TO_BOOL(VAR_2.no_origin_server_dns);\n  VAR_1->use_client_target_addr                   = VAR_2.use_client_target_addr;\n  VAR_1->use_client_source_port                   = INT_TO_BOOL(VAR_2.use_client_source_port);\n  VAR_1->oride.maintain_pristine_host_hdr         = INT_TO_BOOL(VAR_2.oride.maintain_pristine_host_hdr);\n\n  VAR_1->disable_ssl_parenting        = INT_TO_BOOL(VAR_2.disable_ssl_parenting);\n  VAR_1->oride.forward_connect_method = INT_TO_BOOL(VAR_2.oride.forward_connect_method);\n\n  VAR_1->server_max_connections             = VAR_2.server_max_connections;\n  VAR_1->max_websocket_connections          = VAR_2.max_websocket_connections;\n  VAR_1->oride.server_tcp_init_cwnd         = VAR_2.oride.server_tcp_init_cwnd;\n  VAR_1->oride.origin_max_connections       = VAR_2.oride.origin_max_connections;\n  VAR_1->oride.origin_max_connections_queue = VAR_2.oride.origin_max_connections_queue;\n  /* COMMENT_0 */\n  if (VAR_1->oride.origin_max_connections_queue > 0 &&\n      !(VAR_1->oride.origin_max_connections || VAR_1->origin_min_keep_alive_connections)) {\n    Warning(\"origin_max_connections_queue is set, but neither origin_max_connections nor origin_min_keep_alive_connections are \"\n            \"set, please correct your records.config\");\n  }\n  VAR_1->origin_min_keep_alive_connections     = VAR_2.origin_min_keep_alive_connections;\n  VAR_1->oride.attach_server_session_to_client = VAR_2.oride.attach_server_session_to_client;\n\n  if (VAR_1->oride.origin_max_connections && VAR_1->oride.origin_max_connections < VAR_1->origin_min_keep_alive_connections) {\n    Warning(\"origin_max_connections < origin_min_keep_alive_connections, setting min=max , please correct your records.config\");\n    VAR_1->origin_min_keep_alive_connections = VAR_1->oride.origin_max_connections;\n  }\n\n  VAR_1->oride.insert_request_via_string   = VAR_2.oride.insert_request_via_string;\n  VAR_1->oride.insert_response_via_string  = VAR_2.oride.insert_response_via_string;\n  VAR_1->proxy_request_via_string          = ats_strdup(VAR_2.proxy_request_via_string);\n  VAR_1->proxy_request_via_string_len      = (VAR_1->proxy_request_via_string) ? strlen(VAR_1->proxy_request_via_string) : 0;\n  VAR_1->proxy_response_via_string         = ats_strdup(VAR_2.proxy_response_via_string);\n  VAR_1->proxy_response_via_string_len     = (VAR_1->proxy_response_via_string) ? strlen(VAR_1->proxy_response_via_string) : 0;\n  VAR_1->oride.proxy_response_hsts_max_age = VAR_2.oride.proxy_response_hsts_max_age;\n  VAR_1->oride.proxy_response_hsts_include_subdomains = VAR_2.oride.proxy_response_hsts_include_subdomains;\n\n  VAR_1->oride.keep_alive_enabled_in       = INT_TO_BOOL(VAR_2.oride.keep_alive_enabled_in);\n  VAR_1->oride.keep_alive_enabled_out      = INT_TO_BOOL(VAR_2.oride.keep_alive_enabled_out);\n  VAR_1->oride.chunking_enabled            = INT_TO_BOOL(VAR_2.oride.chunking_enabled);\n  VAR_1->oride.auth_server_session_private = INT_TO_BOOL(VAR_2.oride.auth_server_session_private);\n\n  VAR_1->oride.http_chunking_size = VAR_2.oride.http_chunking_size;\n\n  VAR_1->oride.post_check_content_length_enabled = INT_TO_BOOL(VAR_2.oride.post_check_content_length_enabled);\n\n  VAR_1->oride.flow_control_enabled = INT_TO_BOOL(VAR_2.oride.flow_control_enabled);\n  VAR_1->oride.flow_high_water_mark = VAR_2.oride.flow_high_water_mark;\n  VAR_1->oride.flow_low_water_mark  = VAR_2.oride.flow_low_water_mark;\n  /* COMMENT_1 */\n  if (VAR_1->oride.flow_low_water_mark <= 0) {\n    VAR_1->oride.flow_low_water_mark = VAR_1->oride.flow_high_water_mark;\n  }\n  if (VAR_1->oride.flow_high_water_mark <= 0) {\n    VAR_1->oride.flow_high_water_mark = VAR_1->oride.flow_low_water_mark;\n  }\n  if (VAR_1->oride.flow_high_water_mark < VAR_1->oride.flow_low_water_mark) {\n    Warning(\"Flow control low water mark is greater than high water mark, flow control disabled\");\n    VAR_1->oride.flow_control_enabled = 0;\n    /* COMMENT_2 */\n    VAR_1->oride.flow_high_water_mark = VAR_1->oride.flow_low_water_mark = 0;\n  }\n\n  VAR_1->oride.server_session_sharing_match = VAR_2.oride.server_session_sharing_match;\n  VAR_1->server_session_sharing_pool        = VAR_2.server_session_sharing_pool;\n  VAR_1->oride.keep_alive_post_out          = VAR_2.oride.keep_alive_post_out;\n\n  VAR_1->oride.keep_alive_no_activity_timeout_in   = VAR_2.oride.keep_alive_no_activity_timeout_in;\n  VAR_1->oride.keep_alive_no_activity_timeout_out  = VAR_2.oride.keep_alive_no_activity_timeout_out;\n  VAR_1->oride.transaction_no_activity_timeout_in  = VAR_2.oride.transaction_no_activity_timeout_in;\n  VAR_1->oride.transaction_no_activity_timeout_out = VAR_2.oride.transaction_no_activity_timeout_out;\n  VAR_1->oride.transaction_active_timeout_in       = VAR_2.oride.transaction_active_timeout_in;\n  VAR_1->oride.transaction_active_timeout_out      = VAR_2.oride.transaction_active_timeout_out;\n  VAR_1->oride.websocket_active_timeout            = VAR_2.oride.websocket_active_timeout;\n  VAR_1->oride.websocket_inactive_timeout          = VAR_2.oride.websocket_inactive_timeout;\n  VAR_1->accept_no_activity_timeout                = VAR_2.accept_no_activity_timeout;\n  VAR_1->oride.background_fill_active_timeout      = VAR_2.oride.background_fill_active_timeout;\n  VAR_1->oride.background_fill_threshold           = VAR_2.oride.background_fill_threshold;\n\n  VAR_1->oride.connect_attempts_max_retries             = VAR_2.oride.connect_attempts_max_retries;\n  VAR_1->oride.connect_attempts_max_retries_dead_server = VAR_2.oride.connect_attempts_max_retries_dead_server;\n  if (VAR_2.oride.connect_attempts_rr_retries > VAR_1->oride.connect_attempts_max_retries) {\n    Warning(\"connect_attempts_rr_retries (%\" VAR_3 \") is greater than \"\n            \"connect_attempts_max_retries (%\" VAR_3 \"), this means requests \"\n            \"will never redispatch to another server\",\n            VAR_2.oride.connect_attempts_rr_retries, VAR_1->oride.connect_attempts_max_retries);\n  }\n  VAR_1->oride.connect_attempts_rr_retries   = VAR_2.oride.connect_attempts_rr_retries;\n  VAR_1->oride.connect_attempts_timeout      = VAR_2.oride.connect_attempts_timeout;\n  VAR_1->oride.post_connect_attempts_timeout = VAR_2.oride.post_connect_attempts_timeout;\n  VAR_1->oride.parent_connect_attempts       = VAR_2.oride.parent_connect_attempts;\n  VAR_1->oride.parent_retry_time             = VAR_2.oride.parent_retry_time;\n  VAR_1->oride.parent_fail_threshold         = VAR_2.oride.parent_fail_threshold;\n  VAR_1->oride.per_parent_connect_attempts   = VAR_2.oride.per_parent_connect_attempts;\n  VAR_1->oride.parent_connect_timeout        = VAR_2.oride.parent_connect_timeout;\n  VAR_1->oride.parent_failures_update_hostdb = VAR_2.oride.parent_failures_update_hostdb;\n\n  VAR_1->oride.sock_recv_buffer_size_out = VAR_2.oride.sock_recv_buffer_size_out;\n  VAR_1->oride.sock_send_buffer_size_out = VAR_2.oride.sock_send_buffer_size_out;\n  VAR_1->oride.sock_packet_mark_out      = VAR_2.oride.sock_packet_mark_out;\n  VAR_1->oride.sock_packet_tos_out       = VAR_2.oride.sock_packet_tos_out;\n  VAR_1->oride.sock_option_flag_out      = VAR_2.oride.sock_option_flag_out;\n\n  /* COMMENT_3 */\n  if ((VAR_1->oride.sock_option_flag_out & NetVCOptions::SOCK_OPT_TCP_FAST_OPEN) && !SocketManager::fastopen_supported()) {\n    Status(\"disabling unsupported TCP Fast Open flag on proxy.config.net.sock_option_flag_out\");\n    VAR_1->oride.sock_option_flag_out &= ~NetVCOptions::SOCK_OPT_TCP_FAST_OPEN;\n  }\n\n  VAR_1->oride.fwd_proxy_auth_to_parent = INT_TO_BOOL(VAR_2.oride.fwd_proxy_auth_to_parent);\n\n  VAR_1->oride.anonymize_remove_from       = INT_TO_BOOL(VAR_2.oride.anonymize_remove_from);\n  VAR_1->oride.anonymize_remove_referer    = INT_TO_BOOL(VAR_2.oride.anonymize_remove_referer);\n  VAR_1->oride.anonymize_remove_user_agent = INT_TO_BOOL(VAR_2.oride.anonymize_remove_user_agent);\n  VAR_1->oride.anonymize_remove_cookie     = INT_TO_BOOL(VAR_2.oride.anonymize_remove_cookie);\n  VAR_1->oride.anonymize_remove_client_ip  = INT_TO_BOOL(VAR_2.oride.anonymize_remove_client_ip);\n  VAR_1->oride.anonymize_insert_client_ip  = INT_TO_BOOL(VAR_2.oride.anonymize_insert_client_ip);\n  VAR_1->anonymize_other_header_list       = ats_strdup(VAR_2.anonymize_other_header_list);\n\n  VAR_1->oride.global_user_agent_header = ats_strdup(VAR_2.oride.global_user_agent_header);\n  VAR_1->oride.global_user_agent_header_size =\n    VAR_1->oride.global_user_agent_header ? strlen(VAR_1->oride.global_user_agent_header) : 0;\n\n  VAR_1->oride.proxy_response_server_string = ats_strdup(VAR_2.oride.proxy_response_server_string);\n  VAR_1->oride.proxy_response_server_string_len =\n    VAR_1->oride.proxy_response_server_string ? strlen(VAR_1->oride.proxy_response_server_string) : 0;\n  VAR_1->oride.proxy_response_server_enabled = VAR_2.oride.proxy_response_server_enabled;\n\n  VAR_1->oride.insert_squid_x_forwarded_for = INT_TO_BOOL(VAR_2.oride.insert_squid_x_forwarded_for);\n  VAR_1->oride.insert_forwarded             = VAR_2.oride.insert_forwarded;\n  VAR_1->oride.insert_age_in_response       = INT_TO_BOOL(VAR_2.oride.insert_age_in_response);\n  VAR_1->enable_http_stats                  = INT_TO_BOOL(VAR_2.enable_http_stats);\n  VAR_1->oride.normalize_ae                 = VAR_2.oride.normalize_ae;\n\n  VAR_1->oride.cache_heuristic_min_lifetime = VAR_2.oride.cache_heuristic_min_lifetime;\n  VAR_1->oride.cache_heuristic_max_lifetime = VAR_2.oride.cache_heuristic_max_lifetime;\n  VAR_1->oride.cache_heuristic_lm_factor    = std::min(std::max(VAR_2.oride.cache_heuristic_lm_factor, 0.0f), 1.0f);\n\n  VAR_1->oride.cache_guaranteed_min_lifetime = VAR_2.oride.cache_guaranteed_min_lifetime;\n  VAR_1->oride.cache_guaranteed_max_lifetime = VAR_2.oride.cache_guaranteed_max_lifetime;\n\n  VAR_1->oride.cache_max_stale_age = VAR_2.oride.cache_max_stale_age;\n\n  VAR_1->oride.cache_vary_default_text   = ats_strdup(VAR_2.oride.cache_vary_default_text);\n  VAR_1->oride.cache_vary_default_images = ats_strdup(VAR_2.oride.cache_vary_default_images);\n  VAR_1->oride.cache_vary_default_other  = ats_strdup(VAR_2.oride.cache_vary_default_other);\n\n  VAR_1->oride.srv_enabled = VAR_2.oride.srv_enabled;\n\n  /* COMMENT_4 */\n  VAR_1->oride.max_cache_open_read_retries = VAR_2.oride.max_cache_open_read_retries;\n  VAR_1->oride.cache_open_read_retry_time  = VAR_2.oride.cache_open_read_retry_time;\n  VAR_1->oride.cache_generation_number     = VAR_2.oride.cache_generation_number;\n\n  /* COMMENT_5 */\n  VAR_1->oride.max_cache_open_write_retries = VAR_2.oride.max_cache_open_write_retries;\n\n  VAR_1->oride.cache_http                        = INT_TO_BOOL(VAR_2.oride.cache_http);\n  VAR_1->oride.cache_ignore_client_no_cache      = INT_TO_BOOL(VAR_2.oride.cache_ignore_client_no_cache);\n  VAR_1->oride.cache_ignore_client_cc_max_age    = INT_TO_BOOL(VAR_2.oride.cache_ignore_client_cc_max_age);\n  VAR_1->oride.cache_ims_on_client_no_cache      = INT_TO_BOOL(VAR_2.oride.cache_ims_on_client_no_cache);\n  VAR_1->oride.cache_ignore_server_no_cache      = INT_TO_BOOL(VAR_2.oride.cache_ignore_server_no_cache);\n  VAR_1->oride.cache_responses_to_cookies        = VAR_2.oride.cache_responses_to_cookies;\n  VAR_1->oride.cache_ignore_auth                 = INT_TO_BOOL(VAR_2.oride.cache_ignore_auth);\n  VAR_1->oride.cache_urls_that_look_dynamic      = INT_TO_BOOL(VAR_2.oride.cache_urls_that_look_dynamic);\n  VAR_1->oride.cache_enable_default_vary_headers = INT_TO_BOOL(VAR_2.oride.cache_enable_default_vary_headers);\n  VAR_1->cache_post_method                       = INT_TO_BOOL(VAR_2.cache_post_method);\n\n  VAR_1->oride.ignore_accept_mismatch          = VAR_2.oride.ignore_accept_mismatch;\n  VAR_1->oride.ignore_accept_language_mismatch = VAR_2.oride.ignore_accept_language_mismatch;\n  VAR_1->oride.ignore_accept_encoding_mismatch = VAR_2.oride.ignore_accept_encoding_mismatch;\n  VAR_1->oride.ignore_accept_charset_mismatch  = VAR_2.oride.ignore_accept_charset_mismatch;\n\n  VAR_1->send_100_continue_response = INT_TO_BOOL(VAR_2.send_100_continue_response);\n  VAR_1->disallow_post_100_continue = INT_TO_BOOL(VAR_2.disallow_post_100_continue);\n  VAR_1->parser_allow_non_http      = INT_TO_BOOL(VAR_2.parser_allow_non_http);\n  VAR_1->keepalive_internal_vc      = INT_TO_BOOL(VAR_2.keepalive_internal_vc);\n\n  VAR_1->oride.cache_open_write_fail_action = VAR_2.oride.cache_open_write_fail_action;\n\n  VAR_1->oride.cache_when_to_revalidate = VAR_2.oride.cache_when_to_revalidate;\n  VAR_1->max_post_size                  = VAR_2.max_post_size;\n\n  VAR_1->oride.cache_required_headers = VAR_2.oride.cache_required_headers;\n  VAR_1->oride.cache_range_lookup     = INT_TO_BOOL(VAR_2.oride.cache_range_lookup);\n  VAR_1->oride.cache_range_write      = INT_TO_BOOL(VAR_2.oride.cache_range_write);\n\n  VAR_1->connect_ports_string = ats_strdup(VAR_2.connect_ports_string);\n  VAR_1->connect_ports        = parse_ports_list(VAR_1->connect_ports_string);\n\n  VAR_1->oride.request_hdr_max_size  = VAR_2.oride.request_hdr_max_size;\n  VAR_1->oride.response_hdr_max_size = VAR_2.oride.response_hdr_max_size;\n\n  VAR_1->push_method_enabled = INT_TO_BOOL(VAR_2.push_method_enabled);\n\n  VAR_1->reverse_proxy_enabled            = INT_TO_BOOL(VAR_2.reverse_proxy_enabled);\n  VAR_1->url_remap_required               = INT_TO_BOOL(VAR_2.url_remap_required);\n  VAR_1->errors_log_error_pages           = INT_TO_BOOL(VAR_2.errors_log_error_pages);\n  VAR_1->oride.slow_log_threshold         = VAR_2.oride.slow_log_threshold;\n  VAR_1->record_cop_page                  = INT_TO_BOOL(VAR_2.record_cop_page);\n  VAR_1->oride.ssl_client_verify_server   = VAR_2.oride.ssl_client_verify_server;\n  VAR_1->oride.send_http11_requests       = VAR_2.oride.send_http11_requests;\n  VAR_1->oride.doc_in_cache_skip_dns      = INT_TO_BOOL(VAR_2.oride.doc_in_cache_skip_dns);\n  VAR_1->oride.default_buffer_size_index  = VAR_2.oride.default_buffer_size_index;\n  VAR_1->oride.default_buffer_water_mark  = VAR_2.oride.default_buffer_water_mark;\n  VAR_1->enable_http_info                 = INT_TO_BOOL(VAR_2.enable_http_info);\n  VAR_1->oride.body_factory_template_base = ats_strdup(VAR_2.oride.body_factory_template_base);\n  VAR_1->oride.body_factory_template_base_len =\n    VAR_1->oride.body_factory_template_base ? strlen(VAR_1->oride.body_factory_template_base) : 0;\n  VAR_1->body_factory_response_max_size = VAR_2.body_factory_response_max_size;\n  VAR_1->reverse_proxy_no_host_redirect = ats_strdup(VAR_2.reverse_proxy_no_host_redirect);\n  VAR_1->reverse_proxy_no_host_redirect_len =\n    VAR_1->reverse_proxy_no_host_redirect ? strlen(VAR_1->reverse_proxy_no_host_redirect) : 0;\n\n  VAR_1->referer_filter_enabled  = INT_TO_BOOL(VAR_2.referer_filter_enabled);\n  VAR_1->referer_format_redirect = INT_TO_BOOL(VAR_2.referer_format_redirect);\n\n  VAR_1->strict_uri_parsing = INT_TO_BOOL(VAR_2.strict_uri_parsing);\n\n  VAR_1->oride.down_server_timeout    = VAR_2.oride.down_server_timeout;\n  VAR_1->oride.client_abort_threshold = VAR_2.oride.client_abort_threshold;\n\n  VAR_1->oride.negative_caching_enabled       = INT_TO_BOOL(VAR_2.oride.negative_caching_enabled);\n  VAR_1->oride.negative_caching_lifetime      = VAR_2.oride.negative_caching_lifetime;\n  VAR_1->oride.negative_revalidating_enabled  = INT_TO_BOOL(VAR_2.oride.negative_revalidating_enabled);\n  VAR_1->oride.negative_revalidating_lifetime = VAR_2.oride.negative_revalidating_lifetime;\n\n  VAR_1->oride.redirect_use_orig_cache_key = INT_TO_BOOL(VAR_2.oride.redirect_use_orig_cache_key);\n  VAR_1->redirection_host_no_port          = INT_TO_BOOL(VAR_2.redirection_host_no_port);\n  VAR_1->oride.number_of_redirections      = VAR_2.oride.number_of_redirections;\n  VAR_1->post_copy_size                    = VAR_2.post_copy_size;\n  VAR_1->oride.client_cert_filename        = ats_strdup(VAR_2.oride.client_cert_filename);\n  VAR_1->oride.client_cert_filepath        = ats_strdup(VAR_2.oride.client_cert_filepath);\n\n  /* COMMENT_6 */\n  VAR_1->synthetic_port = VAR_2.synthetic_port;\n\n  VAR_4 = VAR_5.set(VAR_4, VAR_1);\n\n#undef INT_TO_BOOL\n}",
  "func_graph_path_before": "apache/trafficserver/6d248026b04d69e5c5049709c17ea671328ea4ea/HttpConfig.cc/vul/before/0.json",
  "func": "void\nHttpConfig::reconfigure()\n{\n#define INT_TO_BOOL(i) ((i) ? 1 : 0);\n\n  HttpConfigParams *params;\n\n  params = new HttpConfigParams;\n\n  params->inbound_ip4 = m_master.inbound_ip4;\n  params->inbound_ip6 = m_master.inbound_ip6;\n\n  params->outbound_ip4 = m_master.outbound_ip4;\n  params->outbound_ip6 = m_master.outbound_ip6;\n\n  params->proxy_hostname                           = ats_strdup(m_master.proxy_hostname);\n  params->proxy_hostname_len                       = (params->proxy_hostname) ? strlen(params->proxy_hostname) : 0;\n  params->no_dns_forward_to_parent                 = INT_TO_BOOL(m_master.no_dns_forward_to_parent);\n  params->oride.uncacheable_requests_bypass_parent = INT_TO_BOOL(m_master.oride.uncacheable_requests_bypass_parent);\n  params->no_origin_server_dns                     = INT_TO_BOOL(m_master.no_origin_server_dns);\n  params->use_client_target_addr                   = m_master.use_client_target_addr;\n  params->use_client_source_port                   = INT_TO_BOOL(m_master.use_client_source_port);\n  params->oride.maintain_pristine_host_hdr         = INT_TO_BOOL(m_master.oride.maintain_pristine_host_hdr);\n\n  params->disable_ssl_parenting        = INT_TO_BOOL(m_master.disable_ssl_parenting);\n  params->oride.forward_connect_method = INT_TO_BOOL(m_master.oride.forward_connect_method);\n\n  params->server_max_connections             = m_master.server_max_connections;\n  params->max_websocket_connections          = m_master.max_websocket_connections;\n  params->oride.server_tcp_init_cwnd         = m_master.oride.server_tcp_init_cwnd;\n  params->oride.origin_max_connections       = m_master.oride.origin_max_connections;\n  params->oride.origin_max_connections_queue = m_master.oride.origin_max_connections_queue;\n  // if origin_max_connections_queue is set without max_connections, it is meaningless, so we'll warn\n  if (params->oride.origin_max_connections_queue > 0 &&\n      !(params->oride.origin_max_connections || params->origin_min_keep_alive_connections)) {\n    Warning(\"origin_max_connections_queue is set, but neither origin_max_connections nor origin_min_keep_alive_connections are \"\n            \"set, please correct your records.config\");\n  }\n  params->origin_min_keep_alive_connections     = m_master.origin_min_keep_alive_connections;\n  params->oride.attach_server_session_to_client = m_master.oride.attach_server_session_to_client;\n\n  if (params->oride.origin_max_connections && params->oride.origin_max_connections < params->origin_min_keep_alive_connections) {\n    Warning(\"origin_max_connections < origin_min_keep_alive_connections, setting min=max , please correct your records.config\");\n    params->origin_min_keep_alive_connections = params->oride.origin_max_connections;\n  }\n\n  params->oride.insert_request_via_string   = m_master.oride.insert_request_via_string;\n  params->oride.insert_response_via_string  = m_master.oride.insert_response_via_string;\n  params->proxy_request_via_string          = ats_strdup(m_master.proxy_request_via_string);\n  params->proxy_request_via_string_len      = (params->proxy_request_via_string) ? strlen(params->proxy_request_via_string) : 0;\n  params->proxy_response_via_string         = ats_strdup(m_master.proxy_response_via_string);\n  params->proxy_response_via_string_len     = (params->proxy_response_via_string) ? strlen(params->proxy_response_via_string) : 0;\n  params->oride.proxy_response_hsts_max_age = m_master.oride.proxy_response_hsts_max_age;\n  params->oride.proxy_response_hsts_include_subdomains = m_master.oride.proxy_response_hsts_include_subdomains;\n\n  params->oride.keep_alive_enabled_in       = INT_TO_BOOL(m_master.oride.keep_alive_enabled_in);\n  params->oride.keep_alive_enabled_out      = INT_TO_BOOL(m_master.oride.keep_alive_enabled_out);\n  params->oride.chunking_enabled            = INT_TO_BOOL(m_master.oride.chunking_enabled);\n  params->oride.auth_server_session_private = INT_TO_BOOL(m_master.oride.auth_server_session_private);\n\n  params->oride.http_chunking_size = m_master.oride.http_chunking_size;\n\n  params->oride.post_check_content_length_enabled = INT_TO_BOOL(m_master.oride.post_check_content_length_enabled);\n\n  params->oride.flow_control_enabled = INT_TO_BOOL(m_master.oride.flow_control_enabled);\n  params->oride.flow_high_water_mark = m_master.oride.flow_high_water_mark;\n  params->oride.flow_low_water_mark  = m_master.oride.flow_low_water_mark;\n  // If not set (zero) then make values the same.\n  if (params->oride.flow_low_water_mark <= 0) {\n    params->oride.flow_low_water_mark = params->oride.flow_high_water_mark;\n  }\n  if (params->oride.flow_high_water_mark <= 0) {\n    params->oride.flow_high_water_mark = params->oride.flow_low_water_mark;\n  }\n  if (params->oride.flow_high_water_mark < params->oride.flow_low_water_mark) {\n    Warning(\"Flow control low water mark is greater than high water mark, flow control disabled\");\n    params->oride.flow_control_enabled = 0;\n    // zero means \"hardwired default\" when actually used.\n    params->oride.flow_high_water_mark = params->oride.flow_low_water_mark = 0;\n  }\n\n  params->oride.server_session_sharing_match = m_master.oride.server_session_sharing_match;\n  params->server_session_sharing_pool        = m_master.server_session_sharing_pool;\n  params->oride.keep_alive_post_out          = m_master.oride.keep_alive_post_out;\n\n  params->oride.keep_alive_no_activity_timeout_in   = m_master.oride.keep_alive_no_activity_timeout_in;\n  params->oride.keep_alive_no_activity_timeout_out  = m_master.oride.keep_alive_no_activity_timeout_out;\n  params->oride.transaction_no_activity_timeout_in  = m_master.oride.transaction_no_activity_timeout_in;\n  params->oride.transaction_no_activity_timeout_out = m_master.oride.transaction_no_activity_timeout_out;\n  params->oride.transaction_active_timeout_in       = m_master.oride.transaction_active_timeout_in;\n  params->oride.transaction_active_timeout_out      = m_master.oride.transaction_active_timeout_out;\n  params->oride.websocket_active_timeout            = m_master.oride.websocket_active_timeout;\n  params->oride.websocket_inactive_timeout          = m_master.oride.websocket_inactive_timeout;\n  params->accept_no_activity_timeout                = m_master.accept_no_activity_timeout;\n  params->oride.background_fill_active_timeout      = m_master.oride.background_fill_active_timeout;\n  params->oride.background_fill_threshold           = m_master.oride.background_fill_threshold;\n\n  params->oride.connect_attempts_max_retries             = m_master.oride.connect_attempts_max_retries;\n  params->oride.connect_attempts_max_retries_dead_server = m_master.oride.connect_attempts_max_retries_dead_server;\n  if (m_master.oride.connect_attempts_rr_retries > params->oride.connect_attempts_max_retries) {\n    Warning(\"connect_attempts_rr_retries (%\" PRIu64 \") is greater than \"\n            \"connect_attempts_max_retries (%\" PRIu64 \"), this means requests \"\n            \"will never redispatch to another server\",\n            m_master.oride.connect_attempts_rr_retries, params->oride.connect_attempts_max_retries);\n  }\n  params->oride.connect_attempts_rr_retries   = m_master.oride.connect_attempts_rr_retries;\n  params->oride.connect_attempts_timeout      = m_master.oride.connect_attempts_timeout;\n  params->oride.post_connect_attempts_timeout = m_master.oride.post_connect_attempts_timeout;\n  params->oride.parent_connect_attempts       = m_master.oride.parent_connect_attempts;\n  params->oride.parent_retry_time             = m_master.oride.parent_retry_time;\n  params->oride.parent_fail_threshold         = m_master.oride.parent_fail_threshold;\n  params->oride.per_parent_connect_attempts   = m_master.oride.per_parent_connect_attempts;\n  params->oride.parent_connect_timeout        = m_master.oride.parent_connect_timeout;\n  params->oride.parent_failures_update_hostdb = m_master.oride.parent_failures_update_hostdb;\n\n  params->oride.sock_recv_buffer_size_out = m_master.oride.sock_recv_buffer_size_out;\n  params->oride.sock_send_buffer_size_out = m_master.oride.sock_send_buffer_size_out;\n  params->oride.sock_packet_mark_out      = m_master.oride.sock_packet_mark_out;\n  params->oride.sock_packet_tos_out       = m_master.oride.sock_packet_tos_out;\n  params->oride.sock_option_flag_out      = m_master.oride.sock_option_flag_out;\n\n  // Clear the TCP Fast Open option if it is not supported on this host.\n  if ((params->oride.sock_option_flag_out & NetVCOptions::SOCK_OPT_TCP_FAST_OPEN) && !SocketManager::fastopen_supported()) {\n    Status(\"disabling unsupported TCP Fast Open flag on proxy.config.net.sock_option_flag_out\");\n    params->oride.sock_option_flag_out &= ~NetVCOptions::SOCK_OPT_TCP_FAST_OPEN;\n  }\n\n  params->oride.fwd_proxy_auth_to_parent = INT_TO_BOOL(m_master.oride.fwd_proxy_auth_to_parent);\n\n  params->oride.anonymize_remove_from       = INT_TO_BOOL(m_master.oride.anonymize_remove_from);\n  params->oride.anonymize_remove_referer    = INT_TO_BOOL(m_master.oride.anonymize_remove_referer);\n  params->oride.anonymize_remove_user_agent = INT_TO_BOOL(m_master.oride.anonymize_remove_user_agent);\n  params->oride.anonymize_remove_cookie     = INT_TO_BOOL(m_master.oride.anonymize_remove_cookie);\n  params->oride.anonymize_remove_client_ip  = INT_TO_BOOL(m_master.oride.anonymize_remove_client_ip);\n  params->oride.anonymize_insert_client_ip  = INT_TO_BOOL(m_master.oride.anonymize_insert_client_ip);\n  params->anonymize_other_header_list       = ats_strdup(m_master.anonymize_other_header_list);\n\n  params->oride.global_user_agent_header = ats_strdup(m_master.oride.global_user_agent_header);\n  params->oride.global_user_agent_header_size =\n    params->oride.global_user_agent_header ? strlen(params->oride.global_user_agent_header) : 0;\n\n  params->oride.proxy_response_server_string = ats_strdup(m_master.oride.proxy_response_server_string);\n  params->oride.proxy_response_server_string_len =\n    params->oride.proxy_response_server_string ? strlen(params->oride.proxy_response_server_string) : 0;\n  params->oride.proxy_response_server_enabled = m_master.oride.proxy_response_server_enabled;\n\n  params->oride.insert_squid_x_forwarded_for = INT_TO_BOOL(m_master.oride.insert_squid_x_forwarded_for);\n  params->oride.insert_forwarded             = m_master.oride.insert_forwarded;\n  params->oride.insert_age_in_response       = INT_TO_BOOL(m_master.oride.insert_age_in_response);\n  params->enable_http_stats                  = INT_TO_BOOL(m_master.enable_http_stats);\n  params->oride.normalize_ae                 = m_master.oride.normalize_ae;\n\n  params->oride.cache_heuristic_min_lifetime = m_master.oride.cache_heuristic_min_lifetime;\n  params->oride.cache_heuristic_max_lifetime = m_master.oride.cache_heuristic_max_lifetime;\n  params->oride.cache_heuristic_lm_factor    = std::min(std::max(m_master.oride.cache_heuristic_lm_factor, 0.0f), 1.0f);\n\n  params->oride.cache_guaranteed_min_lifetime = m_master.oride.cache_guaranteed_min_lifetime;\n  params->oride.cache_guaranteed_max_lifetime = m_master.oride.cache_guaranteed_max_lifetime;\n\n  params->oride.cache_max_stale_age = m_master.oride.cache_max_stale_age;\n\n  params->oride.cache_vary_default_text   = ats_strdup(m_master.oride.cache_vary_default_text);\n  params->oride.cache_vary_default_images = ats_strdup(m_master.oride.cache_vary_default_images);\n  params->oride.cache_vary_default_other  = ats_strdup(m_master.oride.cache_vary_default_other);\n\n  params->oride.srv_enabled = m_master.oride.srv_enabled;\n\n  // open read failure retries\n  params->oride.max_cache_open_read_retries = m_master.oride.max_cache_open_read_retries;\n  params->oride.cache_open_read_retry_time  = m_master.oride.cache_open_read_retry_time;\n  params->oride.cache_generation_number     = m_master.oride.cache_generation_number;\n\n  // open write failure retries\n  params->oride.max_cache_open_write_retries = m_master.oride.max_cache_open_write_retries;\n\n  params->oride.cache_http                        = INT_TO_BOOL(m_master.oride.cache_http);\n  params->oride.cache_ignore_client_no_cache      = INT_TO_BOOL(m_master.oride.cache_ignore_client_no_cache);\n  params->oride.cache_ignore_client_cc_max_age    = INT_TO_BOOL(m_master.oride.cache_ignore_client_cc_max_age);\n  params->oride.cache_ims_on_client_no_cache      = INT_TO_BOOL(m_master.oride.cache_ims_on_client_no_cache);\n  params->oride.cache_ignore_server_no_cache      = INT_TO_BOOL(m_master.oride.cache_ignore_server_no_cache);\n  params->oride.cache_responses_to_cookies        = m_master.oride.cache_responses_to_cookies;\n  params->oride.cache_ignore_auth                 = INT_TO_BOOL(m_master.oride.cache_ignore_auth);\n  params->oride.cache_urls_that_look_dynamic      = INT_TO_BOOL(m_master.oride.cache_urls_that_look_dynamic);\n  params->oride.cache_enable_default_vary_headers = INT_TO_BOOL(m_master.oride.cache_enable_default_vary_headers);\n  params->cache_post_method                       = INT_TO_BOOL(m_master.cache_post_method);\n\n  params->oride.ignore_accept_mismatch          = m_master.oride.ignore_accept_mismatch;\n  params->oride.ignore_accept_language_mismatch = m_master.oride.ignore_accept_language_mismatch;\n  params->oride.ignore_accept_encoding_mismatch = m_master.oride.ignore_accept_encoding_mismatch;\n  params->oride.ignore_accept_charset_mismatch  = m_master.oride.ignore_accept_charset_mismatch;\n\n  params->send_100_continue_response = INT_TO_BOOL(m_master.send_100_continue_response);\n  params->disallow_post_100_continue = INT_TO_BOOL(m_master.disallow_post_100_continue);\n  params->parser_allow_non_http      = INT_TO_BOOL(m_master.parser_allow_non_http);\n  params->keepalive_internal_vc      = INT_TO_BOOL(m_master.keepalive_internal_vc);\n\n  params->oride.cache_open_write_fail_action = m_master.oride.cache_open_write_fail_action;\n\n  params->oride.cache_when_to_revalidate = m_master.oride.cache_when_to_revalidate;\n  params->max_post_size                  = m_master.max_post_size;\n\n  params->oride.cache_required_headers = m_master.oride.cache_required_headers;\n  params->oride.cache_range_lookup     = INT_TO_BOOL(m_master.oride.cache_range_lookup);\n  params->oride.cache_range_write      = INT_TO_BOOL(m_master.oride.cache_range_write);\n  params->oride.allow_multi_range      = m_master.oride.allow_multi_range;\n\n  params->connect_ports_string = ats_strdup(m_master.connect_ports_string);\n  params->connect_ports        = parse_ports_list(params->connect_ports_string);\n\n  params->oride.request_hdr_max_size  = m_master.oride.request_hdr_max_size;\n  params->oride.response_hdr_max_size = m_master.oride.response_hdr_max_size;\n\n  params->push_method_enabled = INT_TO_BOOL(m_master.push_method_enabled);\n\n  params->reverse_proxy_enabled            = INT_TO_BOOL(m_master.reverse_proxy_enabled);\n  params->url_remap_required               = INT_TO_BOOL(m_master.url_remap_required);\n  params->errors_log_error_pages           = INT_TO_BOOL(m_master.errors_log_error_pages);\n  params->oride.slow_log_threshold         = m_master.oride.slow_log_threshold;\n  params->record_cop_page                  = INT_TO_BOOL(m_master.record_cop_page);\n  params->oride.ssl_client_verify_server   = m_master.oride.ssl_client_verify_server;\n  params->oride.send_http11_requests       = m_master.oride.send_http11_requests;\n  params->oride.doc_in_cache_skip_dns      = INT_TO_BOOL(m_master.oride.doc_in_cache_skip_dns);\n  params->oride.default_buffer_size_index  = m_master.oride.default_buffer_size_index;\n  params->oride.default_buffer_water_mark  = m_master.oride.default_buffer_water_mark;\n  params->enable_http_info                 = INT_TO_BOOL(m_master.enable_http_info);\n  params->oride.body_factory_template_base = ats_strdup(m_master.oride.body_factory_template_base);\n  params->oride.body_factory_template_base_len =\n    params->oride.body_factory_template_base ? strlen(params->oride.body_factory_template_base) : 0;\n  params->body_factory_response_max_size = m_master.body_factory_response_max_size;\n  params->reverse_proxy_no_host_redirect = ats_strdup(m_master.reverse_proxy_no_host_redirect);\n  params->reverse_proxy_no_host_redirect_len =\n    params->reverse_proxy_no_host_redirect ? strlen(params->reverse_proxy_no_host_redirect) : 0;\n\n  params->referer_filter_enabled  = INT_TO_BOOL(m_master.referer_filter_enabled);\n  params->referer_format_redirect = INT_TO_BOOL(m_master.referer_format_redirect);\n\n  params->strict_uri_parsing = INT_TO_BOOL(m_master.strict_uri_parsing);\n\n  params->oride.down_server_timeout    = m_master.oride.down_server_timeout;\n  params->oride.client_abort_threshold = m_master.oride.client_abort_threshold;\n\n  params->oride.negative_caching_enabled       = INT_TO_BOOL(m_master.oride.negative_caching_enabled);\n  params->oride.negative_caching_lifetime      = m_master.oride.negative_caching_lifetime;\n  params->oride.negative_revalidating_enabled  = INT_TO_BOOL(m_master.oride.negative_revalidating_enabled);\n  params->oride.negative_revalidating_lifetime = m_master.oride.negative_revalidating_lifetime;\n\n  params->oride.redirect_use_orig_cache_key = INT_TO_BOOL(m_master.oride.redirect_use_orig_cache_key);\n  params->redirection_host_no_port          = INT_TO_BOOL(m_master.redirection_host_no_port);\n  params->oride.number_of_redirections      = m_master.oride.number_of_redirections;\n  params->post_copy_size                    = m_master.post_copy_size;\n  params->oride.client_cert_filename        = ats_strdup(m_master.oride.client_cert_filename);\n  params->oride.client_cert_filepath        = ats_strdup(m_master.oride.client_cert_filepath);\n\n  // Local Manager\n  params->synthetic_port = m_master.synthetic_port;\n\n  m_id = configProcessor.set(m_id, params);\n\n#undef INT_TO_BOOL\n}",
  "abstract_func": "void\nHttpConfig::reconfigure()\n{\n#define INT_TO_BOOL(VAR_0) ((i) ? 1 : 0);\n\n  HttpConfigParams *VAR_1;\n\n  VAR_1 = new HttpConfigParams;\n\n  VAR_1->inbound_ip4 = VAR_2.inbound_ip4;\n  VAR_1->inbound_ip6 = VAR_2.inbound_ip6;\n\n  VAR_1->outbound_ip4 = VAR_2.outbound_ip4;\n  VAR_1->outbound_ip6 = VAR_2.outbound_ip6;\n\n  VAR_1->proxy_hostname                           = ats_strdup(VAR_2.proxy_hostname);\n  VAR_1->proxy_hostname_len                       = (VAR_1->proxy_hostname) ? strlen(VAR_1->proxy_hostname) : 0;\n  VAR_1->no_dns_forward_to_parent                 = INT_TO_BOOL(VAR_2.no_dns_forward_to_parent);\n  VAR_1->oride.uncacheable_requests_bypass_parent = INT_TO_BOOL(VAR_2.oride.uncacheable_requests_bypass_parent);\n  VAR_1->no_origin_server_dns                     = INT_TO_BOOL(VAR_2.no_origin_server_dns);\n  VAR_1->use_client_target_addr                   = VAR_2.use_client_target_addr;\n  VAR_1->use_client_source_port                   = INT_TO_BOOL(VAR_2.use_client_source_port);\n  VAR_1->oride.maintain_pristine_host_hdr         = INT_TO_BOOL(VAR_2.oride.maintain_pristine_host_hdr);\n\n  VAR_1->disable_ssl_parenting        = INT_TO_BOOL(VAR_2.disable_ssl_parenting);\n  VAR_1->oride.forward_connect_method = INT_TO_BOOL(VAR_2.oride.forward_connect_method);\n\n  VAR_1->server_max_connections             = VAR_2.server_max_connections;\n  VAR_1->max_websocket_connections          = VAR_2.max_websocket_connections;\n  VAR_1->oride.server_tcp_init_cwnd         = VAR_2.oride.server_tcp_init_cwnd;\n  VAR_1->oride.origin_max_connections       = VAR_2.oride.origin_max_connections;\n  VAR_1->oride.origin_max_connections_queue = VAR_2.oride.origin_max_connections_queue;\n  /* COMMENT_0 */\n  if (VAR_1->oride.origin_max_connections_queue > 0 &&\n      !(VAR_1->oride.origin_max_connections || VAR_1->origin_min_keep_alive_connections)) {\n    Warning(\"origin_max_connections_queue is set, but neither origin_max_connections nor origin_min_keep_alive_connections are \"\n            \"set, please correct your records.config\");\n  }\n  VAR_1->origin_min_keep_alive_connections     = VAR_2.origin_min_keep_alive_connections;\n  VAR_1->oride.attach_server_session_to_client = VAR_2.oride.attach_server_session_to_client;\n\n  if (VAR_1->oride.origin_max_connections && VAR_1->oride.origin_max_connections < VAR_1->origin_min_keep_alive_connections) {\n    Warning(\"origin_max_connections < origin_min_keep_alive_connections, setting min=max , please correct your records.config\");\n    VAR_1->origin_min_keep_alive_connections = VAR_1->oride.origin_max_connections;\n  }\n\n  VAR_1->oride.insert_request_via_string   = VAR_2.oride.insert_request_via_string;\n  VAR_1->oride.insert_response_via_string  = VAR_2.oride.insert_response_via_string;\n  VAR_1->proxy_request_via_string          = ats_strdup(VAR_2.proxy_request_via_string);\n  VAR_1->proxy_request_via_string_len      = (VAR_1->proxy_request_via_string) ? strlen(VAR_1->proxy_request_via_string) : 0;\n  VAR_1->proxy_response_via_string         = ats_strdup(VAR_2.proxy_response_via_string);\n  VAR_1->proxy_response_via_string_len     = (VAR_1->proxy_response_via_string) ? strlen(VAR_1->proxy_response_via_string) : 0;\n  VAR_1->oride.proxy_response_hsts_max_age = VAR_2.oride.proxy_response_hsts_max_age;\n  VAR_1->oride.proxy_response_hsts_include_subdomains = VAR_2.oride.proxy_response_hsts_include_subdomains;\n\n  VAR_1->oride.keep_alive_enabled_in       = INT_TO_BOOL(VAR_2.oride.keep_alive_enabled_in);\n  VAR_1->oride.keep_alive_enabled_out      = INT_TO_BOOL(VAR_2.oride.keep_alive_enabled_out);\n  VAR_1->oride.chunking_enabled            = INT_TO_BOOL(VAR_2.oride.chunking_enabled);\n  VAR_1->oride.auth_server_session_private = INT_TO_BOOL(VAR_2.oride.auth_server_session_private);\n\n  VAR_1->oride.http_chunking_size = VAR_2.oride.http_chunking_size;\n\n  VAR_1->oride.post_check_content_length_enabled = INT_TO_BOOL(VAR_2.oride.post_check_content_length_enabled);\n\n  VAR_1->oride.flow_control_enabled = INT_TO_BOOL(VAR_2.oride.flow_control_enabled);\n  VAR_1->oride.flow_high_water_mark = VAR_2.oride.flow_high_water_mark;\n  VAR_1->oride.flow_low_water_mark  = VAR_2.oride.flow_low_water_mark;\n  /* COMMENT_1 */\n  if (VAR_1->oride.flow_low_water_mark <= 0) {\n    VAR_1->oride.flow_low_water_mark = VAR_1->oride.flow_high_water_mark;\n  }\n  if (VAR_1->oride.flow_high_water_mark <= 0) {\n    VAR_1->oride.flow_high_water_mark = VAR_1->oride.flow_low_water_mark;\n  }\n  if (VAR_1->oride.flow_high_water_mark < VAR_1->oride.flow_low_water_mark) {\n    Warning(\"Flow control low water mark is greater than high water mark, flow control disabled\");\n    VAR_1->oride.flow_control_enabled = 0;\n    /* COMMENT_2 */\n    VAR_1->oride.flow_high_water_mark = VAR_1->oride.flow_low_water_mark = 0;\n  }\n\n  VAR_1->oride.server_session_sharing_match = VAR_2.oride.server_session_sharing_match;\n  VAR_1->server_session_sharing_pool        = VAR_2.server_session_sharing_pool;\n  VAR_1->oride.keep_alive_post_out          = VAR_2.oride.keep_alive_post_out;\n\n  VAR_1->oride.keep_alive_no_activity_timeout_in   = VAR_2.oride.keep_alive_no_activity_timeout_in;\n  VAR_1->oride.keep_alive_no_activity_timeout_out  = VAR_2.oride.keep_alive_no_activity_timeout_out;\n  VAR_1->oride.transaction_no_activity_timeout_in  = VAR_2.oride.transaction_no_activity_timeout_in;\n  VAR_1->oride.transaction_no_activity_timeout_out = VAR_2.oride.transaction_no_activity_timeout_out;\n  VAR_1->oride.transaction_active_timeout_in       = VAR_2.oride.transaction_active_timeout_in;\n  VAR_1->oride.transaction_active_timeout_out      = VAR_2.oride.transaction_active_timeout_out;\n  VAR_1->oride.websocket_active_timeout            = VAR_2.oride.websocket_active_timeout;\n  VAR_1->oride.websocket_inactive_timeout          = VAR_2.oride.websocket_inactive_timeout;\n  VAR_1->accept_no_activity_timeout                = VAR_2.accept_no_activity_timeout;\n  VAR_1->oride.background_fill_active_timeout      = VAR_2.oride.background_fill_active_timeout;\n  VAR_1->oride.background_fill_threshold           = VAR_2.oride.background_fill_threshold;\n\n  VAR_1->oride.connect_attempts_max_retries             = VAR_2.oride.connect_attempts_max_retries;\n  VAR_1->oride.connect_attempts_max_retries_dead_server = VAR_2.oride.connect_attempts_max_retries_dead_server;\n  if (VAR_2.oride.connect_attempts_rr_retries > VAR_1->oride.connect_attempts_max_retries) {\n    Warning(\"connect_attempts_rr_retries (%\" VAR_3 \") is greater than \"\n            \"connect_attempts_max_retries (%\" VAR_3 \"), this means requests \"\n            \"will never redispatch to another server\",\n            VAR_2.oride.connect_attempts_rr_retries, VAR_1->oride.connect_attempts_max_retries);\n  }\n  VAR_1->oride.connect_attempts_rr_retries   = VAR_2.oride.connect_attempts_rr_retries;\n  VAR_1->oride.connect_attempts_timeout      = VAR_2.oride.connect_attempts_timeout;\n  VAR_1->oride.post_connect_attempts_timeout = VAR_2.oride.post_connect_attempts_timeout;\n  VAR_1->oride.parent_connect_attempts       = VAR_2.oride.parent_connect_attempts;\n  VAR_1->oride.parent_retry_time             = VAR_2.oride.parent_retry_time;\n  VAR_1->oride.parent_fail_threshold         = VAR_2.oride.parent_fail_threshold;\n  VAR_1->oride.per_parent_connect_attempts   = VAR_2.oride.per_parent_connect_attempts;\n  VAR_1->oride.parent_connect_timeout        = VAR_2.oride.parent_connect_timeout;\n  VAR_1->oride.parent_failures_update_hostdb = VAR_2.oride.parent_failures_update_hostdb;\n\n  VAR_1->oride.sock_recv_buffer_size_out = VAR_2.oride.sock_recv_buffer_size_out;\n  VAR_1->oride.sock_send_buffer_size_out = VAR_2.oride.sock_send_buffer_size_out;\n  VAR_1->oride.sock_packet_mark_out      = VAR_2.oride.sock_packet_mark_out;\n  VAR_1->oride.sock_packet_tos_out       = VAR_2.oride.sock_packet_tos_out;\n  VAR_1->oride.sock_option_flag_out      = VAR_2.oride.sock_option_flag_out;\n\n  /* COMMENT_3 */\n  if ((VAR_1->oride.sock_option_flag_out & NetVCOptions::SOCK_OPT_TCP_FAST_OPEN) && !SocketManager::fastopen_supported()) {\n    Status(\"disabling unsupported TCP Fast Open flag on proxy.config.net.sock_option_flag_out\");\n    VAR_1->oride.sock_option_flag_out &= ~NetVCOptions::SOCK_OPT_TCP_FAST_OPEN;\n  }\n\n  VAR_1->oride.fwd_proxy_auth_to_parent = INT_TO_BOOL(VAR_2.oride.fwd_proxy_auth_to_parent);\n\n  VAR_1->oride.anonymize_remove_from       = INT_TO_BOOL(VAR_2.oride.anonymize_remove_from);\n  VAR_1->oride.anonymize_remove_referer    = INT_TO_BOOL(VAR_2.oride.anonymize_remove_referer);\n  VAR_1->oride.anonymize_remove_user_agent = INT_TO_BOOL(VAR_2.oride.anonymize_remove_user_agent);\n  VAR_1->oride.anonymize_remove_cookie     = INT_TO_BOOL(VAR_2.oride.anonymize_remove_cookie);\n  VAR_1->oride.anonymize_remove_client_ip  = INT_TO_BOOL(VAR_2.oride.anonymize_remove_client_ip);\n  VAR_1->oride.anonymize_insert_client_ip  = INT_TO_BOOL(VAR_2.oride.anonymize_insert_client_ip);\n  VAR_1->anonymize_other_header_list       = ats_strdup(VAR_2.anonymize_other_header_list);\n\n  VAR_1->oride.global_user_agent_header = ats_strdup(VAR_2.oride.global_user_agent_header);\n  VAR_1->oride.global_user_agent_header_size =\n    VAR_1->oride.global_user_agent_header ? strlen(VAR_1->oride.global_user_agent_header) : 0;\n\n  VAR_1->oride.proxy_response_server_string = ats_strdup(VAR_2.oride.proxy_response_server_string);\n  VAR_1->oride.proxy_response_server_string_len =\n    VAR_1->oride.proxy_response_server_string ? strlen(VAR_1->oride.proxy_response_server_string) : 0;\n  VAR_1->oride.proxy_response_server_enabled = VAR_2.oride.proxy_response_server_enabled;\n\n  VAR_1->oride.insert_squid_x_forwarded_for = INT_TO_BOOL(VAR_2.oride.insert_squid_x_forwarded_for);\n  VAR_1->oride.insert_forwarded             = VAR_2.oride.insert_forwarded;\n  VAR_1->oride.insert_age_in_response       = INT_TO_BOOL(VAR_2.oride.insert_age_in_response);\n  VAR_1->enable_http_stats                  = INT_TO_BOOL(VAR_2.enable_http_stats);\n  VAR_1->oride.normalize_ae                 = VAR_2.oride.normalize_ae;\n\n  VAR_1->oride.cache_heuristic_min_lifetime = VAR_2.oride.cache_heuristic_min_lifetime;\n  VAR_1->oride.cache_heuristic_max_lifetime = VAR_2.oride.cache_heuristic_max_lifetime;\n  VAR_1->oride.cache_heuristic_lm_factor    = std::min(std::max(VAR_2.oride.cache_heuristic_lm_factor, 0.0f), 1.0f);\n\n  VAR_1->oride.cache_guaranteed_min_lifetime = VAR_2.oride.cache_guaranteed_min_lifetime;\n  VAR_1->oride.cache_guaranteed_max_lifetime = VAR_2.oride.cache_guaranteed_max_lifetime;\n\n  VAR_1->oride.cache_max_stale_age = VAR_2.oride.cache_max_stale_age;\n\n  VAR_1->oride.cache_vary_default_text   = ats_strdup(VAR_2.oride.cache_vary_default_text);\n  VAR_1->oride.cache_vary_default_images = ats_strdup(VAR_2.oride.cache_vary_default_images);\n  VAR_1->oride.cache_vary_default_other  = ats_strdup(VAR_2.oride.cache_vary_default_other);\n\n  VAR_1->oride.srv_enabled = VAR_2.oride.srv_enabled;\n\n  /* COMMENT_4 */\n  VAR_1->oride.max_cache_open_read_retries = VAR_2.oride.max_cache_open_read_retries;\n  VAR_1->oride.cache_open_read_retry_time  = VAR_2.oride.cache_open_read_retry_time;\n  VAR_1->oride.cache_generation_number     = VAR_2.oride.cache_generation_number;\n\n  /* COMMENT_5 */\n  VAR_1->oride.max_cache_open_write_retries = VAR_2.oride.max_cache_open_write_retries;\n\n  VAR_1->oride.cache_http                        = INT_TO_BOOL(VAR_2.oride.cache_http);\n  VAR_1->oride.cache_ignore_client_no_cache      = INT_TO_BOOL(VAR_2.oride.cache_ignore_client_no_cache);\n  VAR_1->oride.cache_ignore_client_cc_max_age    = INT_TO_BOOL(VAR_2.oride.cache_ignore_client_cc_max_age);\n  VAR_1->oride.cache_ims_on_client_no_cache      = INT_TO_BOOL(VAR_2.oride.cache_ims_on_client_no_cache);\n  VAR_1->oride.cache_ignore_server_no_cache      = INT_TO_BOOL(VAR_2.oride.cache_ignore_server_no_cache);\n  VAR_1->oride.cache_responses_to_cookies        = VAR_2.oride.cache_responses_to_cookies;\n  VAR_1->oride.cache_ignore_auth                 = INT_TO_BOOL(VAR_2.oride.cache_ignore_auth);\n  VAR_1->oride.cache_urls_that_look_dynamic      = INT_TO_BOOL(VAR_2.oride.cache_urls_that_look_dynamic);\n  VAR_1->oride.cache_enable_default_vary_headers = INT_TO_BOOL(VAR_2.oride.cache_enable_default_vary_headers);\n  VAR_1->cache_post_method                       = INT_TO_BOOL(VAR_2.cache_post_method);\n\n  VAR_1->oride.ignore_accept_mismatch          = VAR_2.oride.ignore_accept_mismatch;\n  VAR_1->oride.ignore_accept_language_mismatch = VAR_2.oride.ignore_accept_language_mismatch;\n  VAR_1->oride.ignore_accept_encoding_mismatch = VAR_2.oride.ignore_accept_encoding_mismatch;\n  VAR_1->oride.ignore_accept_charset_mismatch  = VAR_2.oride.ignore_accept_charset_mismatch;\n\n  VAR_1->send_100_continue_response = INT_TO_BOOL(VAR_2.send_100_continue_response);\n  VAR_1->disallow_post_100_continue = INT_TO_BOOL(VAR_2.disallow_post_100_continue);\n  VAR_1->parser_allow_non_http      = INT_TO_BOOL(VAR_2.parser_allow_non_http);\n  VAR_1->keepalive_internal_vc      = INT_TO_BOOL(VAR_2.keepalive_internal_vc);\n\n  VAR_1->oride.cache_open_write_fail_action = VAR_2.oride.cache_open_write_fail_action;\n\n  VAR_1->oride.cache_when_to_revalidate = VAR_2.oride.cache_when_to_revalidate;\n  VAR_1->max_post_size                  = VAR_2.max_post_size;\n\n  VAR_1->oride.cache_required_headers = VAR_2.oride.cache_required_headers;\n  VAR_1->oride.cache_range_lookup     = INT_TO_BOOL(VAR_2.oride.cache_range_lookup);\n  VAR_1->oride.cache_range_write      = INT_TO_BOOL(VAR_2.oride.cache_range_write);\n  VAR_1->oride.allow_multi_range      = VAR_2.oride.allow_multi_range;\n\n  VAR_1->connect_ports_string = ats_strdup(VAR_2.connect_ports_string);\n  VAR_1->connect_ports        = parse_ports_list(VAR_1->connect_ports_string);\n\n  VAR_1->oride.request_hdr_max_size  = VAR_2.oride.request_hdr_max_size;\n  VAR_1->oride.response_hdr_max_size = VAR_2.oride.response_hdr_max_size;\n\n  VAR_1->push_method_enabled = INT_TO_BOOL(VAR_2.push_method_enabled);\n\n  VAR_1->reverse_proxy_enabled            = INT_TO_BOOL(VAR_2.reverse_proxy_enabled);\n  VAR_1->url_remap_required               = INT_TO_BOOL(VAR_2.url_remap_required);\n  VAR_1->errors_log_error_pages           = INT_TO_BOOL(VAR_2.errors_log_error_pages);\n  VAR_1->oride.slow_log_threshold         = VAR_2.oride.slow_log_threshold;\n  VAR_1->record_cop_page                  = INT_TO_BOOL(VAR_2.record_cop_page);\n  VAR_1->oride.ssl_client_verify_server   = VAR_2.oride.ssl_client_verify_server;\n  VAR_1->oride.send_http11_requests       = VAR_2.oride.send_http11_requests;\n  VAR_1->oride.doc_in_cache_skip_dns      = INT_TO_BOOL(VAR_2.oride.doc_in_cache_skip_dns);\n  VAR_1->oride.default_buffer_size_index  = VAR_2.oride.default_buffer_size_index;\n  VAR_1->oride.default_buffer_water_mark  = VAR_2.oride.default_buffer_water_mark;\n  VAR_1->enable_http_info                 = INT_TO_BOOL(VAR_2.enable_http_info);\n  VAR_1->oride.body_factory_template_base = ats_strdup(VAR_2.oride.body_factory_template_base);\n  VAR_1->oride.body_factory_template_base_len =\n    VAR_1->oride.body_factory_template_base ? strlen(VAR_1->oride.body_factory_template_base) : 0;\n  VAR_1->body_factory_response_max_size = VAR_2.body_factory_response_max_size;\n  VAR_1->reverse_proxy_no_host_redirect = ats_strdup(VAR_2.reverse_proxy_no_host_redirect);\n  VAR_1->reverse_proxy_no_host_redirect_len =\n    VAR_1->reverse_proxy_no_host_redirect ? strlen(VAR_1->reverse_proxy_no_host_redirect) : 0;\n\n  VAR_1->referer_filter_enabled  = INT_TO_BOOL(VAR_2.referer_filter_enabled);\n  VAR_1->referer_format_redirect = INT_TO_BOOL(VAR_2.referer_format_redirect);\n\n  VAR_1->strict_uri_parsing = INT_TO_BOOL(VAR_2.strict_uri_parsing);\n\n  VAR_1->oride.down_server_timeout    = VAR_2.oride.down_server_timeout;\n  VAR_1->oride.client_abort_threshold = VAR_2.oride.client_abort_threshold;\n\n  VAR_1->oride.negative_caching_enabled       = INT_TO_BOOL(VAR_2.oride.negative_caching_enabled);\n  VAR_1->oride.negative_caching_lifetime      = VAR_2.oride.negative_caching_lifetime;\n  VAR_1->oride.negative_revalidating_enabled  = INT_TO_BOOL(VAR_2.oride.negative_revalidating_enabled);\n  VAR_1->oride.negative_revalidating_lifetime = VAR_2.oride.negative_revalidating_lifetime;\n\n  VAR_1->oride.redirect_use_orig_cache_key = INT_TO_BOOL(VAR_2.oride.redirect_use_orig_cache_key);\n  VAR_1->redirection_host_no_port          = INT_TO_BOOL(VAR_2.redirection_host_no_port);\n  VAR_1->oride.number_of_redirections      = VAR_2.oride.number_of_redirections;\n  VAR_1->post_copy_size                    = VAR_2.post_copy_size;\n  VAR_1->oride.client_cert_filename        = ats_strdup(VAR_2.oride.client_cert_filename);\n  VAR_1->oride.client_cert_filepath        = ats_strdup(VAR_2.oride.client_cert_filepath);\n\n  /* COMMENT_6 */\n  VAR_1->synthetic_port = VAR_2.synthetic_port;\n\n  VAR_4 = VAR_5.set(VAR_4, VAR_1);\n\n#undef INT_TO_BOOL\n}",
  "func_graph_path": "apache/trafficserver/6d248026b04d69e5c5049709c17ea671328ea4ea/HttpConfig.cc/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -202,6 +202,7 @@\n   params->oride.cache_required_headers = m_master.oride.cache_required_headers;\n   params->oride.cache_range_lookup     = INT_TO_BOOL(m_master.oride.cache_range_lookup);\n   params->oride.cache_range_write      = INT_TO_BOOL(m_master.oride.cache_range_write);\n+  params->oride.allow_multi_range      = m_master.oride.allow_multi_range;\n \n   params->connect_ports_string = ats_strdup(m_master.connect_ports_string);\n   params->connect_ports        = parse_ports_list(params->connect_ports_string);",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "  params->oride.allow_multi_range      = m_master.oride.allow_multi_range;"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/apache/trafficserver/pull/3106",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/apache/trafficserver/pull/3106: 403 Client Error: Forbidden for url: https://api.github.com/repos/apache/trafficserver/pulls/3106",
  "Bug Filter": "Supporting & Non-Core Improvements",
  "Bug Filter Confidence": 0.7,
  "Bug Filter Response": "Final Classification: Supporting & Non-Core Improvements; Confidence: 0.7\n\nThe patch modifies a configuration setting to address potential abuse, likely to improve the application's security posture but doesn't fix an explicit security vulnerability. The classification is uncertain due to the lack of CVE or CWE references, hence a moderate confidence score."
}