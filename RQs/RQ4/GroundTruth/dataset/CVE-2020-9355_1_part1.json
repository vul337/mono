{
  "cve_id": "CVE-2020-9355",
  "cwe_ids": [
    "CWE-Other"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "danfruehauf/NetworkManager-ssh",
  "commit_msg": "Remove extra options\n\nAfter analyzing some privilege escalation possibilites, it was decided\nit is best to remove extra options",
  "commit_hash": "5d88cd89795352b5df54cc0ebb6a0076b8c89ee4",
  "git_url": "https://github.com/danfruehauf/NetworkManager-ssh/commit/5d88cd89795352b5df54cc0ebb6a0076b8c89ee4",
  "file_path": "src/nm-ssh-service.c",
  "func_name": "nm_ssh_start_ssh_binary",
  "func_before": "static gboolean\nnm_ssh_start_ssh_binary (NMSshPlugin *plugin,\n\tNMSettingVpn *s_vpn,\n\tconst char *default_username,\n\tGError **error)\n{\n\t/* This giant function is basically taking care of passing all the\n\t * correct parameters to ssh (and sshpass) */\n\tNMSshPluginPrivate *priv = NM_SSH_PLUGIN_GET_PRIVATE (plugin);\n\tconst char *ssh_binary, *sshpass_binary, *tmp;\n\tconst char *remote, *port, *mtu, *ssh_agent_socket, *auth_type;\n\tchar *known_hosts_file;\n\tchar *tmp_arg;\n\tchar *ifconfig_cmd_4, *ifconfig_cmd_6;\n\tchar *envp[16];\n\tlong int tmp_int;\n\tGPtrArray *args;\n\tGSource *ssh_watch;\n\tGPid pid;\n\tgint ssh_stdin_fd, ssh_stderr_fd;\n\tint sshpass_pipe[2];\n\tconst gchar *password = NULL;\n\n\t/* Find ssh */\n\tssh_binary = nm_find_ssh ();\n\tif (!ssh_binary) {\n\t\tg_set_error (error,\n\t\t             NM_VPN_PLUGIN_ERROR,\n\t\t             NM_VPN_PLUGIN_ERROR_BAD_ARGUMENTS,\n\t\t             \"%s\",\n\t\t             _(\"Could not find the ssh binary.\"));\n\t\treturn FALSE;\n\t}\n\n\t/* Allocate io_data structure */\n\tpriv->io_data = g_malloc0 (sizeof (NMSshPluginIOData));\n\n\targs = g_ptr_array_new ();\n\n\t/* Get auth_type from s_vpn */\n\tauth_type = nm_setting_vpn_get_data_item (s_vpn, NM_SSH_KEY_AUTH_TYPE);\n\n\t/* Handle different behaviour for different auth types */\n\tenvp[0] = NULL;\n\tif (!strncmp (auth_type, NM_SSH_AUTH_TYPE_PASSWORD, strlen(NM_SSH_AUTH_TYPE_PASSWORD))) {\n\t\t/* If the user wishes to supply a password */\n\n\t\t/* Find sshpass, we'll use it to wrap ssh and provide a password from\n\t \t* the command line */\n\t\tsshpass_binary = nm_find_sshpass ();\n\t\tif (!sshpass_binary) {\n\t\t\tg_set_error (error,\n\t\t                 NM_VPN_PLUGIN_ERROR,\n\t\t                 NM_VPN_PLUGIN_ERROR_BAD_ARGUMENTS,\n\t\t                 \"%s\",\n\t\t                 _(\"Could not find the sshpass binary.\"));\n\t\t\treturn FALSE;\n\t\t}\n\n\t\t/* Use sshpass binary */\n\t\tadd_ssh_arg (args, sshpass_binary);\n\n\t\t/* Get password */\n\t\tpassword = nm_setting_vpn_get_secret (s_vpn, NM_SSH_KEY_PASSWORD);\n\t\tif (password && strlen(password)) {\n\t\t\tif (pipe(sshpass_pipe))\n\t\t\t{\n\t\t\t\tg_set_error (\n\t\t\t\t\terror,\n\t\t\t\t\tNM_VPN_PLUGIN_ERROR,\n\t\t\t\t\tNM_VPN_PLUGIN_ERROR_BAD_ARGUMENTS,\n\t\t\t\t\t\"%s\",\n\t\t\t\t\t_(\"Failed creating pipe.\"));\n\t\t\t\tfree_ssh_args (args);\n\t\t\t\treturn FALSE;\n\t\t\t}\n\t\t\ttmp = (gpointer) g_strdup_printf (\"-d%d\", sshpass_pipe[0]);\n\t\t\tadd_ssh_arg (args, tmp);\n\t\t\tg_free((gpointer) tmp);\n\t\t} else {\n\t\t\t/* No password specified? Exit! */\n\t\t\tg_set_error (\n\t\t\t\terror,\n\t\t\t\tNM_VPN_PLUGIN_ERROR,\n\t\t\t\tNM_VPN_PLUGIN_ERROR_BAD_ARGUMENTS,\n\t\t\t\t\"%s\",\n\t\t\t\t_(\"No password specified.\"));\n\t\t\tfree_ssh_args (args);\n\t\t\treturn FALSE;\n\t\t}\n\n\t\t/* And add the ssh_binary */\n\t\tadd_ssh_arg (args, ssh_binary);\n\n\t\t/* Prompt just once for password, it's enough */\n\t\tadd_ssh_arg (args, \"-o\"); add_ssh_arg (args, \"NumberOfPasswordPrompts=1\");\n\t\tadd_ssh_arg (args, \"-o\"); add_ssh_arg (args, \"PreferredAuthentications=password\");\n\n\t} else {\n\t\t/* Add the ssh binary, as we're not going to use sshpass */\n\t\tadd_ssh_arg (args, ssh_binary);\n\n\t\t/* No password prompts, only key authentication if user specifies\n\t\t * key of ssh agent auth */\n\t\tadd_ssh_arg (args, \"-o\"); add_ssh_arg (args, \"NumberOfPasswordPrompts=0\");\n\t\tadd_ssh_arg (args, \"-o\"); add_ssh_arg (args, \"PreferredAuthentications=publickey\");\n\n\t\t/* Passing a id_dsa/id_rsa key as an argument to ssh */\n\t\tif (!strncmp (auth_type, NM_SSH_AUTH_TYPE_KEY, strlen(NM_SSH_AUTH_TYPE_KEY))) {\n\t\t\ttmp = nm_setting_vpn_get_data_item (s_vpn, NM_SSH_KEY_KEY_FILE);\n\t\t\tif (tmp && strlen (tmp)) {\n\t\t\t\t/* Specify key file */\n\t\t\t\tadd_ssh_arg (args, \"-i\");\n\t\t\t\tadd_ssh_arg (args, tmp);\n\t\t\t} else {\n\t\t\t\t/* No key specified? Exit! */\n\t\t\t\tg_set_error (error,\n\t\t                     NM_VPN_PLUGIN_ERROR,\n\t\t                     NM_VPN_PLUGIN_ERROR_BAD_ARGUMENTS,\n\t\t                     \"%s\",\n\t\t                     _(\"Key authentication selected, but no key file specified.\"));\n\t\t\t\tfree_ssh_args (args);\n\t\t\t\treturn FALSE;\n\t\t\t}\n\t\t} else if (!strncmp (auth_type, NM_SSH_AUTH_TYPE_SSH_AGENT, strlen(NM_SSH_AUTH_TYPE_SSH_AGENT))) {\n\t\t\t/* Last but not least, the original nm-ssh default behaviour which\n\t\t \t* which is the sanest of all - SSH_AGENT socket */\n\t\t\t/* FIXME add all the ssh agent logic here */\n\t\t\t/* Set SSH_AUTH_SOCK from ssh-agent\n\t \t\t* Passes as a secret key from the user's context\n\t \t\t* using auth-dialog */\n\t\t\tssh_agent_socket = nm_setting_vpn_get_secret (s_vpn, NM_SSH_KEY_SSH_AUTH_SOCK);\n\t\t\tif (ssh_agent_socket && strlen(ssh_agent_socket)) {\n\t\t\t\tenvp[0] = (gpointer) g_strdup_printf (\"%s=%s\", SSH_AUTH_SOCK, ssh_agent_socket);\n\t\t\t} else {\n\t\t\t\t/* No SSH_AUTH_SOCK passed from user context */\n\t\t\t\tg_set_error (error,\n\t\t                     NM_VPN_PLUGIN_ERROR,\n\t\t                     NM_VPN_PLUGIN_ERROR_BAD_ARGUMENTS,\n\t\t                     \"%s\",\n\t\t                     _(\"Missing required SSH_AUTH_SOCK.\"));\n\t\t\t\tfree_ssh_args (args);\n\t\t\t\treturn FALSE;\n\t\t\t}\n\t\t\tenvp[1] = NULL;\n\n\t\t\tif (debug)\n\t\t\t\tg_message (\"Using ssh-agent socket: '%s'\", envp[0]);\n\n\t\t} else {\n\t\t\tg_set_error (\n\t\t\t\terror,\n\t\t\t\tNM_VPN_PLUGIN_ERROR,\n\t\t\t\tNM_VPN_PLUGIN_ERROR_BAD_ARGUMENTS,\n\t\t\t\t_(\"Unknown authentication type: %s.\"), auth_type);\n\t\t\tfree_ssh_args (args);\n\t\t\treturn FALSE;\n\t\t}\n\t}\n\n\t/* Set verbose mode, we'll parse the arguments */\n\tadd_ssh_arg (args, \"-v\");\n\n\t/* FIXME if not using SSH_AUTH_SOCK we can't know where is known_hosts */\n\t/* We have SSH_AUTH_SOCK, we'll assume it's owned by the user\n\t * that we should use its .ssh/known_hosts file\n\t * So we'll probe the user owning SSH_AUTH_SOCK and then use\n\t * -o UserKnownHostsFile=$HOME/.ssh/known_hosts */\n\tknown_hosts_file = get_known_hosts_file(default_username, ssh_agent_socket);\n\tif (!(known_hosts_file && strlen (known_hosts_file))) {\n\t\tg_warning(\"Using root's .ssh/known_hosts\");\n\t} else {\n\t\tif (debug)\n\t\t\tg_message(\"Using known_hosts at: '%s'\", known_hosts_file);\n\t\tadd_ssh_arg (args, \"-o\");\n\t\tadd_ssh_arg (args, g_strdup_printf(\"UserKnownHostsFile=%s\", known_hosts_file) );\n\t\tg_free(known_hosts_file);\n\t}\n\n\t/* Extra SSH options */\n\ttmp = nm_setting_vpn_get_data_item (s_vpn, NM_SSH_KEY_EXTRA_OPTS);\n\tif (tmp && strlen (tmp)) {\n\t\tadd_ssh_extra_opts (args, tmp);\n\t} else {\n\t\t/* Add default extra options */\n\t\tadd_ssh_extra_opts (args, NM_SSH_DEFAULT_EXTRA_OPTS);\n\t}\n\n\t/* Device, either tun or tap */\n\tadd_ssh_arg (args, \"-o\");\n\ttmp = nm_setting_vpn_get_data_item (s_vpn, NM_SSH_KEY_TAP_DEV);\n\tif (tmp && IS_YES(tmp)) {\n\t\tadd_ssh_arg (args, \"Tunnel=ethernet\");\n\t\tg_strlcpy ((gchar *) &priv->io_data->dev_type, \"tap\", 4);\n\t} else {\n\t\tadd_ssh_arg (args, \"Tunnel=point-to-point\");\n\t\tg_strlcpy ((gchar *) &priv->io_data->dev_type, \"tun\", 4);\n\t}\n\n\t/* Get a local tun/tap */\n\tpriv->io_data->local_dev_number = nm_ssh_get_free_device(priv->io_data->dev_type);\n\tif (priv->io_data->local_dev_number == -1)\n\t{\n\t\tg_warning(\"Could not assign a free tun/tap device.\");\n\t\tnm_vpn_service_plugin_failure (NM_VPN_SERVICE_PLUGIN (plugin), NM_VPN_PLUGIN_FAILURE_CONNECT_FAILED);\n\t\treturn FALSE;\n\t}\n\n\t/* Remote */\n\tremote = nm_setting_vpn_get_data_item (s_vpn, NM_SSH_KEY_REMOTE);\n\tif (!(remote && strlen (remote))) {\n\t\tg_set_error (error,\n\t\t             NM_VPN_PLUGIN_ERROR,\n\t\t             NM_VPN_PLUGIN_ERROR_BAD_ARGUMENTS,\n\t\t             _(\"Please set remote address.\"));\n\t\tfree_ssh_args (args);\n\t\treturn FALSE;\n\t} else {\n\t\tpriv->io_data->remote_gw = g_strdup(remote);\n\t}\n\n\t/* Port */\n\tport = nm_setting_vpn_get_data_item (s_vpn, NM_SSH_KEY_PORT);\n\tadd_ssh_arg (args, \"-o\");\n\tif (port && strlen (port)) {\n\t\t/* Range validation is done in dialog... */\n\t\tif (!get_ssh_arg_int (port, &tmp_int)) {\n\t\t\tg_set_error (error,\n\t\t\t             NM_VPN_PLUGIN_ERROR,\n\t\t\t             NM_VPN_PLUGIN_ERROR_BAD_ARGUMENTS,\n\t\t\t             _(\"Invalid port number '%s'.\"),\n\t\t\t             port);\n\t\t\tfree_ssh_args (args);\n\t\t\treturn FALSE;\n\t\t}\n\t\tadd_ssh_arg (args, (gpointer) g_strdup_printf (\"Port=%d\", (guint32) tmp_int));\n\t} else {\n\t\t/* Default to SSH port 22 */\n\t\tadd_ssh_arg (args, (gpointer) g_strdup_printf(\"Port=%d\", (guint32) NM_SSH_DEFAULT_PORT));\n\t}\n\n\t/* TUN MTU size */\n\tmtu = nm_setting_vpn_get_data_item (s_vpn, NM_SSH_KEY_TUNNEL_MTU);\n\tif (mtu && strlen (mtu)) {\n\t\t/* Range validation is done in dialog... */\n\t\tif (!get_ssh_arg_int (mtu, &tmp_int)) {\n\t\t\tg_set_error (error,\n\t\t\t             NM_VPN_PLUGIN_ERROR,\n\t\t\t             NM_VPN_PLUGIN_ERROR_BAD_ARGUMENTS,\n\t\t\t             _(\"Invalid TUN MTU size '%s'.\"),\n\t\t\t             mtu);\n\t\t\tfree_ssh_args (args);\n\t\t\treturn FALSE;\n\t\t}\n\t\tpriv->io_data->mtu = tmp_int;\n\t} else {\n\t\t/* Default MTU of 1500 */\n\t\tpriv->io_data->mtu = NM_SSH_DEFAULT_MTU;\n\t}\n\n\t/* Remote device */\n\ttmp = nm_setting_vpn_get_data_item (s_vpn, NM_SSH_KEY_REMOTE_DEV);\n\tif (tmp && strlen (tmp)) {\n\t\t/* Range validation is done in dialog... */\n\t\tif (!get_ssh_arg_int (tmp, &tmp_int)) {\n\t\t\tg_set_error (error,\n\t\t\t             NM_VPN_PLUGIN_ERROR,\n\t\t\t             NM_VPN_PLUGIN_ERROR_BAD_ARGUMENTS,\n\t\t\t             _(\"Invalid TUN/TAP device number '%s'.\"),\n\t\t\t             tmp);\n\t\t\tfree_ssh_args (args);\n\t\t\treturn FALSE;\n\t\t}\n\t\tpriv->io_data->remote_dev_number = tmp_int;\n\t} else {\n\t\t/* Use tun100/tap100 by default */\n\t\tpriv->io_data->remote_dev_number = NM_SSH_DEFAULT_REMOTE_DEV;\n\t}\n\n\t/* Remote IP */\n\ttmp = nm_setting_vpn_get_data_item (s_vpn, NM_SSH_KEY_REMOTE_IP);\n\tif (!tmp) {\n\t\t/* Insufficient data (FIXME: this should really be detected when validating the properties */\n\t\tg_set_error (error,\n\t\t             NM_VPN_PLUGIN_ERROR,\n\t\t             NM_VPN_PLUGIN_ERROR_BAD_ARGUMENTS,\n\t\t             \"%s\",\n\t\t             _(\"Missing required remote IP address.\"));\n\t\tfree_ssh_args (args);\n\t\treturn FALSE;\n\t}\n\tpriv->io_data->remote_addr = g_strdup(tmp);\n\n\t/* Local IP */\n\ttmp = nm_setting_vpn_get_data_item (s_vpn, NM_SSH_KEY_LOCAL_IP);\n\tif (!tmp) {\n\t\t/* Insufficient data (FIXME: this should really be detected when validating the properties */\n\t\tg_set_error (error,\n\t\t             NM_VPN_PLUGIN_ERROR,\n\t\t             NM_VPN_PLUGIN_ERROR_BAD_ARGUMENTS,\n\t\t             \"%s\",\n\t\t             _(\"Missing required local IP address.\"));\n\t\tfree_ssh_args (args);\n\t\treturn FALSE;\n\t}\n\tpriv->io_data->local_addr = g_strdup(tmp);\n\n\t/* Netmask */\n\ttmp = nm_setting_vpn_get_data_item (s_vpn, NM_SSH_KEY_NETMASK);\n\tif (!tmp) {\n\t\tpriv->io_data->netmask = g_strdup(tmp);\n\n\t\t/* Insufficient data (FIXME: this should really be detected when validating the properties */\n\t\tg_set_error (error,\n\t\t             NM_VPN_PLUGIN_ERROR,\n\t\t             NM_VPN_PLUGIN_ERROR_BAD_ARGUMENTS,\n\t\t             \"%s\",\n\t\t             _(\"Missing required netmask.\"));\n\t\tfree_ssh_args (args);\n\t\treturn FALSE;\n\t}\n\tpriv->io_data->netmask = g_strdup(tmp);\n\n\t/* IPv6 enabled? */\n\ttmp = nm_setting_vpn_get_data_item (s_vpn, NM_SSH_KEY_IP_6);\n\tif (tmp && IS_YES(tmp)) {\n\t\t/* IPv6 is enabled */\n\t\tpriv->io_data->ipv6 = TRUE;\n\t\t\n\t\t/* Remote IP IPv6 */\n\t\ttmp = nm_setting_vpn_get_data_item (s_vpn, NM_SSH_KEY_REMOTE_IP_6);\n\t\tif (!tmp) {\n\t\t\t/* Insufficient data (FIXME: this should really be detected when validating the properties */\n\t\t\tg_set_error (error,\n\t\t\t             NM_VPN_PLUGIN_ERROR,\n\t\t\t             NM_VPN_PLUGIN_ERROR_BAD_ARGUMENTS,\n\t\t\t             \"%s\",\n\t\t\t             _(\"Missing required IPv6 remote IP address.\"));\n\t\t\tfree_ssh_args (args);\n\t\t\treturn FALSE;\n\t\t}\n\t\tpriv->io_data->remote_addr_6 = g_strdup(tmp);\n\t\n\t\t/* Local IP IPv6 */\n\t\ttmp = nm_setting_vpn_get_data_item (s_vpn, NM_SSH_KEY_LOCAL_IP_6);\n\t\tif (!tmp) {\n\t\t\t/* Insufficient data (FIXME: this should really be detected when validating the properties */\n\t\t\tg_set_error (error,\n\t\t\t             NM_VPN_PLUGIN_ERROR,\n\t\t\t             NM_VPN_PLUGIN_ERROR_BAD_ARGUMENTS,\n\t\t\t             \"%s\",\n\t\t\t             _(\"Missing required IPv6 local IP address.\"));\n\t\t\tfree_ssh_args (args);\n\t\t\treturn FALSE;\n\t\t}\n\t\tpriv->io_data->local_addr_6 = g_strdup(tmp);\n\t\n\t\t/* Prefix IPv6 */\n\t\ttmp = nm_setting_vpn_get_data_item (s_vpn, NM_SSH_KEY_NETMASK_6);\n\t\tif (!tmp) {\n\t\t\t/* Insufficient data (FIXME: this should really be detected when validating the properties */\n\t\t\tg_set_error (error,\n\t\t\t             NM_VPN_PLUGIN_ERROR,\n\t\t\t             NM_VPN_PLUGIN_ERROR_BAD_ARGUMENTS,\n\t\t\t             \"%s\",\n\t\t\t             _(\"Missing required IPv6 netmask.\"));\n\t\t\tfree_ssh_args (args);\n\t\t\treturn FALSE;\n\t\t}\n\t\tpriv->io_data->netmask_6 = g_strdup(tmp);\n\t} else {\n\t\t/* Set the values so they are not NULL */\n\t\tpriv->io_data->ipv6 = FALSE;\n\t\tpriv->io_data->remote_addr_6 = g_strdup(\"\");\n\t\tpriv->io_data->local_addr_6 = g_strdup(\"\");\n\t\tpriv->io_data->netmask_6 = g_strdup(\"\");\n\t}\n\n\n\t/* The -w option, provide a remote and local tun/tap device */\n\ttmp_arg = (gpointer) g_strdup_printf (\n\t\t\t\"TunnelDevice=%d:%d\", priv->io_data->local_dev_number, priv->io_data->remote_dev_number);\n\tadd_ssh_arg (args, \"-o\"); add_ssh_arg (args, tmp_arg);\n\tg_free(tmp_arg);\n\n\t/* Remote username, should usually be root */\n\ttmp = nm_setting_vpn_get_data_item (s_vpn, NM_SSH_KEY_REMOTE_USERNAME);\n\tif (tmp && strlen (tmp)) {\n\t\tpriv->io_data->username = g_strdup (tmp);\n\t} else {\n\t\t/* Add default username - root */\n\t\tpriv->io_data->username = g_strdup (NM_SSH_DEFAULT_REMOTE_USERNAME);\n\t}\n\ttmp_arg = g_strdup_printf (\"User=%s\", priv->io_data->username);\n\tadd_ssh_arg (args, \"-o\");\n\tadd_ssh_arg (args, tmp_arg);\n\tg_free(tmp_arg);\n\n\t/* Connect to remote */\n\ttmp_arg = g_strdup_printf (\"HostName=%s\", priv->io_data->remote_gw);\n\tadd_ssh_arg (args, \"-o\");\n\tadd_ssh_arg (args, tmp_arg);\n\tg_free(tmp_arg);\n\n\t/* This is supposedly the hostname parameter, but we can pass anything\n\t * as we passed '-o Hostname=' before that */\n\tadd_ssh_arg (args, \"NetworkManager-ssh\");\n\n\t/* Command line to run on remote machine */\n\tifconfig_cmd_4 = (gpointer) g_strdup_printf (\n\t\t\"%s %s%d inet %s netmask %s pointopoint %s mtu %d\",\n\t\tIFCONFIG,\n\t\tpriv->io_data->dev_type,\n\t\tpriv->io_data->remote_dev_number,\n\t\tpriv->io_data->remote_addr,\n\t\tpriv->io_data->netmask,\n\t\tpriv->io_data->local_addr,\n\t\tpriv->io_data->mtu);\n\n\t/* IPv6 ifconfig command to run on remote machine */\n\tif (priv->io_data->ipv6) {\n\t\tifconfig_cmd_6 = (gpointer) g_strdup_printf (\n\t\t\t\"%s %s%d add %s/%s\",\n\t\t\tIFCONFIG,\n\t\t\tpriv->io_data->dev_type,\n\t\t\tpriv->io_data->remote_dev_number,\n\t\t\tpriv->io_data->remote_addr_6,\n\t\t\tpriv->io_data->netmask_6);\n\t} else {\n\t\tifconfig_cmd_6 = g_strdup(\"\");\n\t}\n\t/* Concatenate ifconfig_cmd_4 and ifconfig_cmd_6 to one command */\n\ttmp_arg = g_strconcat(ifconfig_cmd_4, \"; \", ifconfig_cmd_6, NULL);\n\tadd_ssh_arg (args, tmp_arg);\n\tg_free(ifconfig_cmd_4);\n\tg_free(ifconfig_cmd_6);\n\tg_free(tmp_arg);\n\n\t/* Wrap it up */\n\tg_ptr_array_add (args, NULL);\n\n\t/* Spawn with pipes */\n\tif (!g_spawn_async_with_pipes (NULL, (char **) args->pdata, envp,\n\t\t\t\t\t\tG_SPAWN_DO_NOT_REAP_CHILD | G_SPAWN_LEAVE_DESCRIPTORS_OPEN, NULL, NULL, &pid,\n\t\t\t\t\t\t&ssh_stdin_fd, NULL, &ssh_stderr_fd,\n\t\t\t\t\t\terror)) {\n\t\tfree_ssh_args (args);\n\t\treturn FALSE;\n\t}\n\tfree_ssh_args (args);\n\n\t/* Write password to fd, so sshpass can pick it up */\n\tif (!strncmp (auth_type, NM_SSH_AUTH_TYPE_PASSWORD, strlen(NM_SSH_AUTH_TYPE_PASSWORD))) {\n\t\ttmp_arg = g_strdup_printf (\"%s\\n\", password);\n\t\tif (write(sshpass_pipe[1], tmp_arg, strlen(tmp_arg)) != strlen(tmp_arg)) {\n\t\t\tg_set_error (error,\n\t\t\t             NM_VPN_PLUGIN_ERROR,\n\t\t\t             NM_VPN_PLUGIN_ERROR_BAD_ARGUMENTS,\n\t\t\t             \"%s\",\n\t\t\t             _(\"Could not pass password to sshpass.\"));\n\t\t\tfree_ssh_args (args);\n\t\t\tg_free(tmp_arg);\n\t\t\treturn FALSE;\n\t\t}\n\n\t\tg_free(tmp_arg);\n\t\tclose(sshpass_pipe[0]);\n\t\tclose(sshpass_pipe[1]);\n\t}\n\n\tg_message (\"ssh started with pid %d\", pid);\n\n\t/* Add a watch for the SSH stdin and stderr */\n\tpriv->io_data->ssh_stdin_channel = g_io_channel_unix_new (ssh_stdin_fd);\n\tpriv->io_data->ssh_stderr_channel = g_io_channel_unix_new (ssh_stderr_fd);\n\n\t/* Set io watches on stderr */\n\t/* stderr */\n\tpriv->io_data->socket_channel_stderr_eventid = g_io_add_watch (\n\t\tpriv->io_data->ssh_stderr_channel,\n\t\tG_IO_IN,\n\t\tnm_ssh_stderr_cb,\n\t\tplugin);\n\n\t/* Set encoding to NULL */\n\tg_io_channel_set_encoding (priv->io_data->ssh_stderr_channel, NULL, NULL);\n\n\t/* Add a watch for the process */\n\tpriv->pid = pid;\n\tssh_watch = g_child_watch_source_new (pid);\n\tg_source_set_callback (ssh_watch, (GSourceFunc) ssh_watch_cb, plugin, NULL);\n\tg_source_attach (ssh_watch, NULL);\n\tg_source_unref (ssh_watch);\n\n\treturn TRUE;\n}",
  "abstract_func_before": "static gboolean\nnm_ssh_start_ssh_binary (NMSshPlugin *VAR_0,\n\tNMSettingVpn *VAR_1,\n\tconst char *VAR_2,\n\tGError **VAR_3)\n{\n\t/* COMMENT_0 */\n                                              \n\tNMSshPluginPrivate *VAR_4 = NM_SSH_PLUGIN_GET_PRIVATE (VAR_0);\n\tconst char *VAR_5, *VAR_6, *VAR_7;\n\tconst char *VAR_8, *VAR_9, *VAR_10, *VAR_11, *VAR_12;\n\tchar *VAR_13;\n\tchar *VAR_14;\n\tchar *VAR_15, *VAR_16;\n\tchar *VAR_17[16];\n\tlong int VAR_18;\n\tGPtrArray *VAR_19;\n\tGSource *VAR_20;\n\tGPid VAR_21;\n\tgint VAR_22, VAR_23;\n\tint VAR_24[2];\n\tconst gchar *VAR_25 = NULL;\n\n\t/* COMMENT_2 */\n\tVAR_5 = nm_find_ssh ();\n\tif (!VAR_5) {\n\t\tg_set_error (VAR_3,\n\t\t             VAR_26,\n\t\t             VAR_27,\n\t\t             \"%s\",\n\t\t             _(\"Could not find the ssh binary.\"));\n\t\treturn FALSE;\n\t}\n\n\t/* COMMENT_3 */\n\tVAR_4->io_data = g_malloc0 (sizeof (VAR_28));\n\n\tVAR_19 = g_ptr_array_new ();\n\n\t/* COMMENT_4 */\n\tVAR_12 = nm_setting_vpn_get_data_item (VAR_1, VAR_29);\n\n\t/* COMMENT_5 */\n\tVAR_17[0] = NULL;\n\tif (!strncmp (VAR_12, VAR_30, strlen(VAR_30))) {\n\t\t/* COMMENT_6 */\n\n\t\t/* COMMENT_7 */\n                        \n\t\tVAR_6 = nm_find_sshpass ();\n\t\tif (!VAR_6) {\n\t\t\tg_set_error (VAR_3,\n\t\t                 VAR_26,\n\t\t                 VAR_27,\n\t\t                 \"%s\",\n\t\t                 _(\"Could not find the sshpass binary.\"));\n\t\t\treturn FALSE;\n\t\t}\n\n\t\t/* COMMENT_9 */\n\t\tadd_ssh_arg (VAR_19, VAR_6);\n\n\t\t/* COMMENT_10 */\n\t\tVAR_25 = nm_setting_vpn_get_secret (VAR_1, VAR_31);\n\t\tif (VAR_25 && strlen(VAR_25)) {\n\t\t\tif (pipe(VAR_24))\n\t\t\t{\n\t\t\t\tg_set_error (\n\t\t\t\t\tVAR_3,\n\t\t\t\t\tVAR_26,\n\t\t\t\t\tVAR_27,\n\t\t\t\t\t\"%s\",\n\t\t\t\t\t_(\"Failed creating pipe.\"));\n\t\t\t\tfree_ssh_args (VAR_19);\n\t\t\t\treturn FALSE;\n\t\t\t}\n\t\t\tVAR_7 = (gpointer) g_strdup_printf (\"-d%d\", VAR_24[0]);\n\t\t\tadd_ssh_arg (VAR_19, VAR_7);\n\t\t\tg_free((gpointer) VAR_7);\n\t\t} else {\n\t\t\t/* COMMENT_11 */\n\t\t\tg_set_error (\n\t\t\t\tVAR_3,\n\t\t\t\tVAR_26,\n\t\t\t\tVAR_27,\n\t\t\t\t\"%s\",\n\t\t\t\t_(\"No password specified.\"));\n\t\t\tfree_ssh_args (VAR_19);\n\t\t\treturn FALSE;\n\t\t}\n\n\t\t/* COMMENT_12 */\n\t\tadd_ssh_arg (VAR_19, VAR_5);\n\n\t\t/* COMMENT_13 */\n\t\tadd_ssh_arg (VAR_19, \"-o\"); add_ssh_arg (VAR_19, \"NumberOfPasswordPrompts=1\");\n\t\tadd_ssh_arg (VAR_19, \"-o\"); add_ssh_arg (VAR_19, \"PreferredAuthentications=password\");\n\n\t} else {\n\t\t/* COMMENT_14 */\n\t\tadd_ssh_arg (VAR_19, VAR_5);\n\n\t\t/* COMMENT_15 */\n                             \n\t\tadd_ssh_arg (VAR_19, \"-o\"); add_ssh_arg (VAR_19, \"NumberOfPasswordPrompts=0\");\n\t\tadd_ssh_arg (VAR_19, \"-o\"); add_ssh_arg (VAR_19, \"PreferredAuthentications=publickey\");\n\n\t\t/* COMMENT_17 */\n\t\tif (!strncmp (VAR_12, VAR_32, strlen(VAR_32))) {\n\t\t\tVAR_7 = nm_setting_vpn_get_data_item (VAR_1, VAR_33);\n\t\t\tif (VAR_7 && strlen (VAR_7)) {\n\t\t\t\t/* COMMENT_18 */\n\t\t\t\tadd_ssh_arg (VAR_19, \"-i\");\n\t\t\t\tadd_ssh_arg (VAR_19, VAR_7);\n\t\t\t} else {\n\t\t\t\t/* COMMENT_19 */\n\t\t\t\tg_set_error (VAR_3,\n\t\t                     VAR_26,\n\t\t                     VAR_27,\n\t\t                     \"%s\",\n\t\t                     _(\"Key authentication selected, but no key file specified.\"));\n\t\t\t\tfree_ssh_args (VAR_19);\n\t\t\t\treturn FALSE;\n\t\t\t}\n\t\t} else if (!strncmp (VAR_12, VAR_34, strlen(VAR_34))) {\n\t\t\t/* COMMENT_20 */\n                                                      \n\t\t\t/* COMMENT_22 */\n\t\t\t/* COMMENT_23 */\n                                                    \n                          \n\t\t\tVAR_11 = nm_setting_vpn_get_secret (VAR_1, VAR_35);\n\t\t\tif (VAR_11 && strlen(VAR_11)) {\n\t\t\t\tVAR_17[0] = (gpointer) g_strdup_printf (\"%s=%s\", VAR_36, VAR_11);\n\t\t\t} else {\n\t\t\t\t/* COMMENT_26 */\n\t\t\t\tg_set_error (VAR_3,\n\t\t                     VAR_26,\n\t\t                     VAR_27,\n\t\t                     \"%s\",\n\t\t                     _(\"Missing required SSH_AUTH_SOCK.\"));\n\t\t\t\tfree_ssh_args (VAR_19);\n\t\t\t\treturn FALSE;\n\t\t\t}\n\t\t\tVAR_17[1] = NULL;\n\n\t\t\tif (VAR_37)\n\t\t\t\tg_message (\"Using ssh-agent socket: '%s'\", VAR_17[0]);\n\n\t\t} else {\n\t\t\tg_set_error (\n\t\t\t\tVAR_3,\n\t\t\t\tVAR_26,\n\t\t\t\tVAR_27,\n\t\t\t\t_(\"Unknown authentication type: %s.\"), VAR_12);\n\t\t\tfree_ssh_args (VAR_19);\n\t\t\treturn FALSE;\n\t\t}\n\t}\n\n\t/* COMMENT_27 */\n\tadd_ssh_arg (VAR_19, \"-v\");\n\n\t/* COMMENT_28 */\n\t/* COMMENT_29 */\n                                                \n                                                             \n                                                   \n\tVAR_13 = get_known_hosts_file(VAR_2, VAR_11);\n\tif (!(VAR_13 && strlen (VAR_13))) {\n\t\tg_warning(\"Using root's .ssh/known_hosts\");\n\t} else {\n\t\tif (VAR_37)\n\t\t\tg_message(\"Using known_hosts at: '%s'\", VAR_13);\n\t\tadd_ssh_arg (VAR_19, \"-o\");\n\t\tadd_ssh_arg (VAR_19, g_strdup_printf(\"UserKnownHostsFile=%s\", VAR_13) );\n\t\tg_free(VAR_13);\n\t}\n\n\t/* COMMENT_33 */\n\tVAR_7 = nm_setting_vpn_get_data_item (VAR_1, VAR_38);\n\tif (VAR_7 && strlen (VAR_7)) {\n\t\tadd_ssh_extra_opts (VAR_19, VAR_7);\n\t} else {\n\t\t/* COMMENT_34 */\n\t\tadd_ssh_extra_opts (VAR_19, VAR_39);\n\t}\n\n\t/* COMMENT_35 */\n\tadd_ssh_arg (VAR_19, \"-o\");\n\tVAR_7 = nm_setting_vpn_get_data_item (VAR_1, VAR_40);\n\tif (VAR_7 && IS_YES(VAR_7)) {\n\t\tadd_ssh_arg (VAR_19, \"Tunnel=ethernet\");\n\t\tg_strlcpy ((gchar *) &VAR_4->io_data->dev_type, \"tap\", 4);\n\t} else {\n\t\tadd_ssh_arg (VAR_19, \"Tunnel=point-to-point\");\n\t\tg_strlcpy ((gchar *) &VAR_4->io_data->dev_type, \"tun\", 4);\n\t}\n\n\t/* COMMENT_36 */\n\tVAR_4->io_data->local_dev_number = nm_ssh_get_free_device(VAR_4->io_data->dev_type);\n\tif (VAR_4->io_data->local_dev_number == -1)\n\t{\n\t\tg_warning(\"Could not assign a free tun/tap device.\");\n\t\tnm_vpn_service_plugin_failure (NM_VPN_SERVICE_PLUGIN (VAR_0), VAR_41);\n\t\treturn FALSE;\n\t}\n\n\t/* COMMENT_37 */\n\tVAR_8 = nm_setting_vpn_get_data_item (VAR_1, VAR_42);\n\tif (!(VAR_8 && strlen (VAR_8))) {\n\t\tg_set_error (VAR_3,\n\t\t             VAR_26,\n\t\t             VAR_27,\n\t\t             _(\"Please set remote address.\"));\n\t\tfree_ssh_args (VAR_19);\n\t\treturn FALSE;\n\t} else {\n\t\tVAR_4->io_data->remote_gw = g_strdup(VAR_8);\n\t}\n\n\t/* COMMENT_38 */\n\tVAR_9 = nm_setting_vpn_get_data_item (VAR_1, VAR_43);\n\tadd_ssh_arg (VAR_19, \"-o\");\n\tif (VAR_9 && strlen (VAR_9)) {\n\t\t/* COMMENT_39 */\n\t\tif (!get_ssh_arg_int (VAR_9, &VAR_18)) {\n\t\t\tg_set_error (VAR_3,\n\t\t\t             VAR_26,\n\t\t\t             VAR_27,\n\t\t\t             _(\"Invalid port number '%s'.\"),\n\t\t\t             VAR_9);\n\t\t\tfree_ssh_args (VAR_19);\n\t\t\treturn FALSE;\n\t\t}\n\t\tadd_ssh_arg (VAR_19, (gpointer) g_strdup_printf (\"Port=%d\", (guint32) VAR_18));\n\t} else {\n\t\t/* COMMENT_40 */\n\t\tadd_ssh_arg (VAR_19, (gpointer) g_strdup_printf(\"Port=%d\", (guint32) VAR_44));\n\t}\n\n\t/* COMMENT_41 */\n\tVAR_10 = nm_setting_vpn_get_data_item (VAR_1, VAR_45);\n\tif (VAR_10 && strlen (VAR_10)) {\n\t\t/* COMMENT_39 */\n\t\tif (!get_ssh_arg_int (VAR_10, &VAR_18)) {\n\t\t\tg_set_error (VAR_3,\n\t\t\t             VAR_26,\n\t\t\t             VAR_27,\n\t\t\t             _(\"Invalid TUN MTU size '%s'.\"),\n\t\t\t             VAR_10);\n\t\t\tfree_ssh_args (VAR_19);\n\t\t\treturn FALSE;\n\t\t}\n\t\tVAR_4->io_data->mtu = VAR_18;\n\t} else {\n\t\t/* COMMENT_42 */\n\t\tVAR_4->io_data->mtu = VAR_46;\n\t}\n\n\t/* COMMENT_43 */\n\tVAR_7 = nm_setting_vpn_get_data_item (VAR_1, VAR_47);\n\tif (VAR_7 && strlen (VAR_7)) {\n\t\t/* COMMENT_39 */\n\t\tif (!get_ssh_arg_int (VAR_7, &VAR_18)) {\n\t\t\tg_set_error (VAR_3,\n\t\t\t             VAR_26,\n\t\t\t             VAR_27,\n\t\t\t             _(\"Invalid TUN/TAP device number '%s'.\"),\n\t\t\t             VAR_7);\n\t\t\tfree_ssh_args (VAR_19);\n\t\t\treturn FALSE;\n\t\t}\n\t\tVAR_4->io_data->remote_dev_number = VAR_18;\n\t} else {\n\t\t/* COMMENT_44 */\n\t\tVAR_4->io_data->remote_dev_number = VAR_48;\n\t}\n\n\t/* COMMENT_45 */\n\tVAR_7 = nm_setting_vpn_get_data_item (VAR_1, VAR_49);\n\tif (!VAR_7) {\n\t\t/* COMMENT_46 */\n\t\tg_set_error (VAR_3,\n\t\t             VAR_26,\n\t\t             VAR_27,\n\t\t             \"%s\",\n\t\t             _(\"Missing required remote IP address.\"));\n\t\tfree_ssh_args (VAR_19);\n\t\treturn FALSE;\n\t}\n\tVAR_4->io_data->remote_addr = g_strdup(VAR_7);\n\n\t/* COMMENT_47 */\n\tVAR_7 = nm_setting_vpn_get_data_item (VAR_1, VAR_50);\n\tif (!VAR_7) {\n\t\t/* COMMENT_46 */\n\t\tg_set_error (VAR_3,\n\t\t             VAR_26,\n\t\t             VAR_27,\n\t\t             \"%s\",\n\t\t             _(\"Missing required local IP address.\"));\n\t\tfree_ssh_args (VAR_19);\n\t\treturn FALSE;\n\t}\n\tVAR_4->io_data->local_addr = g_strdup(VAR_7);\n\n\t/* COMMENT_48 */\n\tVAR_7 = nm_setting_vpn_get_data_item (VAR_1, VAR_51);\n\tif (!VAR_7) {\n\t\tVAR_4->io_data->netmask = g_strdup(VAR_7);\n\n\t\t/* COMMENT_46 */\n\t\tg_set_error (VAR_3,\n\t\t             VAR_26,\n\t\t             VAR_27,\n\t\t             \"%s\",\n\t\t             _(\"Missing required netmask.\"));\n\t\tfree_ssh_args (VAR_19);\n\t\treturn FALSE;\n\t}\n\tVAR_4->io_data->netmask = g_strdup(VAR_7);\n\n\t/* COMMENT_49 */\n\tVAR_7 = nm_setting_vpn_get_data_item (VAR_1, VAR_52);\n\tif (VAR_7 && IS_YES(VAR_7)) {\n\t\t/* COMMENT_50 */\n\t\tVAR_4->io_data->ipv6 = TRUE;\n\t\t\n\t\t/* COMMENT_51 */\n\t\tVAR_7 = nm_setting_vpn_get_data_item (VAR_1, VAR_53);\n\t\tif (!VAR_7) {\n\t\t\t/* COMMENT_46 */\n\t\t\tg_set_error (VAR_3,\n\t\t\t             VAR_26,\n\t\t\t             VAR_27,\n\t\t\t             \"%s\",\n\t\t\t             _(\"Missing required IPv6 remote IP address.\"));\n\t\t\tfree_ssh_args (VAR_19);\n\t\t\treturn FALSE;\n\t\t}\n\t\tVAR_4->io_data->remote_addr_6 = g_strdup(VAR_7);\n\t\n\t\t/* COMMENT_52 */\n\t\tVAR_7 = nm_setting_vpn_get_data_item (VAR_1, VAR_54);\n\t\tif (!VAR_7) {\n\t\t\t/* COMMENT_46 */\n\t\t\tg_set_error (VAR_3,\n\t\t\t             VAR_26,\n\t\t\t             VAR_27,\n\t\t\t             \"%s\",\n\t\t\t             _(\"Missing required IPv6 local IP address.\"));\n\t\t\tfree_ssh_args (VAR_19);\n\t\t\treturn FALSE;\n\t\t}\n\t\tVAR_4->io_data->local_addr_6 = g_strdup(VAR_7);\n\t\n\t\t/* COMMENT_53 */\n\t\tVAR_7 = nm_setting_vpn_get_data_item (VAR_1, VAR_55);\n\t\tif (!VAR_7) {\n\t\t\t/* COMMENT_46 */\n\t\t\tg_set_error (VAR_3,\n\t\t\t             VAR_26,\n\t\t\t             VAR_27,\n\t\t\t             \"%s\",\n\t\t\t             _(\"Missing required IPv6 netmask.\"));\n\t\t\tfree_ssh_args (VAR_19);\n\t\t\treturn FALSE;\n\t\t}\n\t\tVAR_4->io_data->netmask_6 = g_strdup(VAR_7);\n\t} else {\n\t\t/* COMMENT_54 */\n\t\tVAR_4->io_data->ipv6 = FALSE;\n\t\tVAR_4->io_data->remote_addr_6 = g_strdup(\"\");\n\t\tVAR_4->io_data->local_addr_6 = g_strdup(\"\");\n\t\tVAR_4->io_data->netmask_6 = g_strdup(\"\");\n\t}\n\n\n\t/* COMMENT_55 */\n\tVAR_14 = (gpointer) g_strdup_printf (\n\t\t\t\"TunnelDevice=%d:%d\", VAR_4->io_data->local_dev_number, VAR_4->io_data->remote_dev_number);\n\tadd_ssh_arg (VAR_19, \"-o\"); add_ssh_arg (VAR_19, VAR_14);\n\tg_free(VAR_14);\n\n\t/* COMMENT_56 */\n\tVAR_7 = nm_setting_vpn_get_data_item (VAR_1, VAR_56);\n\tif (VAR_7 && strlen (VAR_7)) {\n\t\tVAR_4->io_data->username = g_strdup (VAR_7);\n\t} else {\n\t\t/* COMMENT_57 */\n\t\tVAR_4->io_data->username = g_strdup (VAR_57);\n\t}\n\tVAR_14 = g_strdup_printf (\"User=%s\", VAR_4->io_data->username);\n\tadd_ssh_arg (VAR_19, \"-o\");\n\tadd_ssh_arg (VAR_19, VAR_14);\n\tg_free(VAR_14);\n\n\t/* COMMENT_58 */\n\tVAR_14 = g_strdup_printf (\"HostName=%s\", VAR_4->io_data->remote_gw);\n\tadd_ssh_arg (VAR_19, \"-o\");\n\tadd_ssh_arg (VAR_19, VAR_14);\n\tg_free(VAR_14);\n\n\t/* COMMENT_59 */\n                                              \n\tadd_ssh_arg (VAR_19, \"NetworkManager-ssh\");\n\n\t/* COMMENT_61 */\n\tVAR_15 = (gpointer) g_strdup_printf (\n\t\t\"%s %s%d inet %s netmask %s pointopoint %s mtu %d\",\n\t\tVAR_58,\n\t\tVAR_4->io_data->dev_type,\n\t\tVAR_4->io_data->remote_dev_number,\n\t\tVAR_4->io_data->remote_addr,\n\t\tVAR_4->io_data->netmask,\n\t\tVAR_4->io_data->local_addr,\n\t\tVAR_4->io_data->mtu);\n\n\t/* COMMENT_62 */\n\tif (VAR_4->io_data->ipv6) {\n\t\tVAR_16 = (gpointer) g_strdup_printf (\n\t\t\t\"%s %s%d add %s/%s\",\n\t\t\tVAR_58,\n\t\t\tVAR_4->io_data->dev_type,\n\t\t\tVAR_4->io_data->remote_dev_number,\n\t\t\tVAR_4->io_data->remote_addr_6,\n\t\t\tVAR_4->io_data->netmask_6);\n\t} else {\n\t\tVAR_16 = g_strdup(\"\");\n\t}\n\t/* COMMENT_63 */\n\tVAR_14 = g_strconcat(VAR_15, \"; \", VAR_16, NULL);\n\tadd_ssh_arg (VAR_19, VAR_14);\n\tg_free(VAR_15);\n\tg_free(VAR_16);\n\tg_free(VAR_14);\n\n\t/* COMMENT_64 */\n\tg_ptr_array_add (VAR_19, NULL);\n\n\t/* COMMENT_65 */\n\tif (!g_spawn_async_with_pipes (NULL, (char **) VAR_19->pdata, VAR_17,\n\t\t\t\t\t\tVAR_59 | VAR_60, NULL, NULL, &VAR_21,\n\t\t\t\t\t\t&VAR_22, NULL, &VAR_23,\n\t\t\t\t\t\tVAR_3)) {\n\t\tfree_ssh_args (VAR_19);\n\t\treturn FALSE;\n\t}\n\tfree_ssh_args (VAR_19);\n\n\t/* COMMENT_66 */\n\tif (!strncmp (VAR_12, VAR_30, strlen(VAR_30))) {\n\t\tVAR_14 = g_strdup_printf (\"%s\\n\", VAR_25);\n\t\tif (write(VAR_24[1], VAR_14, strlen(VAR_14)) != strlen(VAR_14)) {\n\t\t\tg_set_error (VAR_3,\n\t\t\t             VAR_26,\n\t\t\t             VAR_27,\n\t\t\t             \"%s\",\n\t\t\t             _(\"Could not pass password to sshpass.\"));\n\t\t\tfree_ssh_args (VAR_19);\n\t\t\tg_free(VAR_14);\n\t\t\treturn FALSE;\n\t\t}\n\n\t\tg_free(VAR_14);\n\t\tclose(VAR_24[0]);\n\t\tclose(VAR_24[1]);\n\t}\n\n\tg_message (\"ssh started with pid %d\", VAR_21);\n\n\t/* COMMENT_67 */\n\tVAR_4->io_data->ssh_stdin_channel = g_io_channel_unix_new (VAR_22);\n\tVAR_4->io_data->ssh_stderr_channel = g_io_channel_unix_new (VAR_23);\n\n\t/* COMMENT_68 */\n\t/* COMMENT_69 */\n\tVAR_4->io_data->socket_channel_stderr_eventid = g_io_add_watch (\n\t\tVAR_4->io_data->ssh_stderr_channel,\n\t\tVAR_61,\n\t\tVAR_62,\n\t\tVAR_0);\n\n\t/* COMMENT_70 */\n\tg_io_channel_set_encoding (VAR_4->io_data->ssh_stderr_channel, NULL, NULL);\n\n\t/* COMMENT_71 */\n\tVAR_4->pid = VAR_21;\n\tVAR_20 = g_child_watch_source_new (VAR_21);\n\tg_source_set_callback (VAR_20, (GSourceFunc) VAR_63, VAR_0, NULL);\n\tg_source_attach (VAR_20, NULL);\n\tg_source_unref (VAR_20);\n\n\treturn TRUE;\n}",
  "func_graph_path_before": "danfruehauf/NetworkManager-ssh/5d88cd89795352b5df54cc0ebb6a0076b8c89ee4/nm-ssh-service.c/vul/before/0.json",
  "func": "static gboolean\nnm_ssh_start_ssh_binary (NMSshPlugin *plugin,\n\tNMSettingVpn *s_vpn,\n\tconst char *default_username,\n\tGError **error)\n{\n\t/* This giant function is basically taking care of passing all the\n\t * correct parameters to ssh (and sshpass) */\n\tNMSshPluginPrivate *priv = NM_SSH_PLUGIN_GET_PRIVATE (plugin);\n\tconst char *ssh_binary, *sshpass_binary, *tmp;\n\tconst char *remote, *port, *mtu, *ssh_agent_socket, *auth_type;\n\tchar *known_hosts_file;\n\tchar *tmp_arg;\n\tchar *ifconfig_cmd_4, *ifconfig_cmd_6;\n\tchar *envp[16];\n\tlong int tmp_int;\n\tGPtrArray *args;\n\tGSource *ssh_watch;\n\tGPid pid;\n\tgint ssh_stdin_fd, ssh_stderr_fd;\n\tint sshpass_pipe[2];\n\tconst gchar *password = NULL;\n\n\t/* Find ssh */\n\tssh_binary = nm_find_ssh ();\n\tif (!ssh_binary) {\n\t\tg_set_error (error,\n\t\t             NM_VPN_PLUGIN_ERROR,\n\t\t             NM_VPN_PLUGIN_ERROR_BAD_ARGUMENTS,\n\t\t             \"%s\",\n\t\t             _(\"Could not find the ssh binary.\"));\n\t\treturn FALSE;\n\t}\n\n\t/* Allocate io_data structure */\n\tpriv->io_data = g_malloc0 (sizeof (NMSshPluginIOData));\n\n\targs = g_ptr_array_new ();\n\n\t/* Get auth_type from s_vpn */\n\tauth_type = nm_setting_vpn_get_data_item (s_vpn, NM_SSH_KEY_AUTH_TYPE);\n\n\t/* Handle different behaviour for different auth types */\n\tenvp[0] = NULL;\n\tif (!strncmp (auth_type, NM_SSH_AUTH_TYPE_PASSWORD, strlen(NM_SSH_AUTH_TYPE_PASSWORD))) {\n\t\t/* If the user wishes to supply a password */\n\n\t\t/* Find sshpass, we'll use it to wrap ssh and provide a password from\n\t \t* the command line */\n\t\tsshpass_binary = nm_find_sshpass ();\n\t\tif (!sshpass_binary) {\n\t\t\tg_set_error (error,\n\t\t                 NM_VPN_PLUGIN_ERROR,\n\t\t                 NM_VPN_PLUGIN_ERROR_BAD_ARGUMENTS,\n\t\t                 \"%s\",\n\t\t                 _(\"Could not find the sshpass binary.\"));\n\t\t\treturn FALSE;\n\t\t}\n\n\t\t/* Use sshpass binary */\n\t\tadd_ssh_arg (args, sshpass_binary);\n\n\t\t/* Get password */\n\t\tpassword = nm_setting_vpn_get_secret (s_vpn, NM_SSH_KEY_PASSWORD);\n\t\tif (password && strlen(password)) {\n\t\t\tif (pipe(sshpass_pipe))\n\t\t\t{\n\t\t\t\tg_set_error (\n\t\t\t\t\terror,\n\t\t\t\t\tNM_VPN_PLUGIN_ERROR,\n\t\t\t\t\tNM_VPN_PLUGIN_ERROR_BAD_ARGUMENTS,\n\t\t\t\t\t\"%s\",\n\t\t\t\t\t_(\"Failed creating pipe.\"));\n\t\t\t\tfree_ssh_args (args);\n\t\t\t\treturn FALSE;\n\t\t\t}\n\t\t\ttmp = (gpointer) g_strdup_printf (\"-d%d\", sshpass_pipe[0]);\n\t\t\tadd_ssh_arg (args, tmp);\n\t\t\tg_free((gpointer) tmp);\n\t\t} else {\n\t\t\t/* No password specified? Exit! */\n\t\t\tg_set_error (\n\t\t\t\terror,\n\t\t\t\tNM_VPN_PLUGIN_ERROR,\n\t\t\t\tNM_VPN_PLUGIN_ERROR_BAD_ARGUMENTS,\n\t\t\t\t\"%s\",\n\t\t\t\t_(\"No password specified.\"));\n\t\t\tfree_ssh_args (args);\n\t\t\treturn FALSE;\n\t\t}\n\n\t\t/* And add the ssh_binary */\n\t\tadd_ssh_arg (args, ssh_binary);\n\n\t\t/* Prompt just once for password, it's enough */\n\t\tadd_ssh_arg (args, \"-o\"); add_ssh_arg (args, \"NumberOfPasswordPrompts=1\");\n\t\tadd_ssh_arg (args, \"-o\"); add_ssh_arg (args, \"PreferredAuthentications=password\");\n\n\t} else {\n\t\t/* Add the ssh binary, as we're not going to use sshpass */\n\t\tadd_ssh_arg (args, ssh_binary);\n\n\t\t/* No password prompts, only key authentication if user specifies\n\t\t * key of ssh agent auth */\n\t\tadd_ssh_arg (args, \"-o\"); add_ssh_arg (args, \"NumberOfPasswordPrompts=0\");\n\t\tadd_ssh_arg (args, \"-o\"); add_ssh_arg (args, \"PreferredAuthentications=publickey\");\n\n\t\t/* Passing a id_dsa/id_rsa key as an argument to ssh */\n\t\tif (!strncmp (auth_type, NM_SSH_AUTH_TYPE_KEY, strlen(NM_SSH_AUTH_TYPE_KEY))) {\n\t\t\ttmp = nm_setting_vpn_get_data_item (s_vpn, NM_SSH_KEY_KEY_FILE);\n\t\t\tif (tmp && strlen (tmp)) {\n\t\t\t\t/* Specify key file */\n\t\t\t\tadd_ssh_arg (args, \"-i\");\n\t\t\t\tadd_ssh_arg (args, tmp);\n\t\t\t} else {\n\t\t\t\t/* No key specified? Exit! */\n\t\t\t\tg_set_error (error,\n\t\t                     NM_VPN_PLUGIN_ERROR,\n\t\t                     NM_VPN_PLUGIN_ERROR_BAD_ARGUMENTS,\n\t\t                     \"%s\",\n\t\t                     _(\"Key authentication selected, but no key file specified.\"));\n\t\t\t\tfree_ssh_args (args);\n\t\t\t\treturn FALSE;\n\t\t\t}\n\t\t} else if (!strncmp (auth_type, NM_SSH_AUTH_TYPE_SSH_AGENT, strlen(NM_SSH_AUTH_TYPE_SSH_AGENT))) {\n\t\t\t/* Last but not least, the original nm-ssh default behaviour which\n\t\t \t* which is the sanest of all - SSH_AGENT socket */\n\t\t\t/* FIXME add all the ssh agent logic here */\n\t\t\t/* Set SSH_AUTH_SOCK from ssh-agent\n\t \t\t* Passes as a secret key from the user's context\n\t \t\t* using auth-dialog */\n\t\t\tssh_agent_socket = nm_setting_vpn_get_secret (s_vpn, NM_SSH_KEY_SSH_AUTH_SOCK);\n\t\t\tif (ssh_agent_socket && strlen(ssh_agent_socket)) {\n\t\t\t\tenvp[0] = (gpointer) g_strdup_printf (\"%s=%s\", SSH_AUTH_SOCK, ssh_agent_socket);\n\t\t\t} else {\n\t\t\t\t/* No SSH_AUTH_SOCK passed from user context */\n\t\t\t\tg_set_error (error,\n\t\t                     NM_VPN_PLUGIN_ERROR,\n\t\t                     NM_VPN_PLUGIN_ERROR_BAD_ARGUMENTS,\n\t\t                     \"%s\",\n\t\t                     _(\"Missing required SSH_AUTH_SOCK.\"));\n\t\t\t\tfree_ssh_args (args);\n\t\t\t\treturn FALSE;\n\t\t\t}\n\t\t\tenvp[1] = NULL;\n\n\t\t\tif (debug)\n\t\t\t\tg_message (\"Using ssh-agent socket: '%s'\", envp[0]);\n\n\t\t} else {\n\t\t\tg_set_error (\n\t\t\t\terror,\n\t\t\t\tNM_VPN_PLUGIN_ERROR,\n\t\t\t\tNM_VPN_PLUGIN_ERROR_BAD_ARGUMENTS,\n\t\t\t\t_(\"Unknown authentication type: %s.\"), auth_type);\n\t\t\tfree_ssh_args (args);\n\t\t\treturn FALSE;\n\t\t}\n\t}\n\n\t/* Set verbose mode, we'll parse the arguments */\n\tadd_ssh_arg (args, \"-v\");\n\n\t/* FIXME if not using SSH_AUTH_SOCK we can't know where is known_hosts */\n\t/* We have SSH_AUTH_SOCK, we'll assume it's owned by the user\n\t * that we should use its .ssh/known_hosts file\n\t * So we'll probe the user owning SSH_AUTH_SOCK and then use\n\t * -o UserKnownHostsFile=$HOME/.ssh/known_hosts */\n\tknown_hosts_file = get_known_hosts_file(default_username, ssh_agent_socket);\n\tif (!(known_hosts_file && strlen (known_hosts_file))) {\n\t\tg_warning(\"Using root's .ssh/known_hosts\");\n\t} else {\n\t\tif (debug)\n\t\t\tg_message(\"Using known_hosts at: '%s'\", known_hosts_file);\n\t\tadd_ssh_arg (args, \"-o\");\n\t\tadd_ssh_arg (args, g_strdup_printf(\"UserKnownHostsFile=%s\", known_hosts_file) );\n\t\tg_free(known_hosts_file);\n\t}\n\n\tadd_ssh_arg (args, \"-o\");\n\tadd_ssh_arg (args, \"ServerAliveInterval=10\");\n\tadd_ssh_arg (args, \"-o\");\n\tadd_ssh_arg (args, \"TCPKeepAlive=yes\");\n\n\t/* Device, either tun or tap */\n\tadd_ssh_arg (args, \"-o\");\n\ttmp = nm_setting_vpn_get_data_item (s_vpn, NM_SSH_KEY_TAP_DEV);\n\tif (tmp && IS_YES(tmp)) {\n\t\tadd_ssh_arg (args, \"Tunnel=ethernet\");\n\t\tg_strlcpy ((gchar *) &priv->io_data->dev_type, \"tap\", 4);\n\t} else {\n\t\tadd_ssh_arg (args, \"Tunnel=point-to-point\");\n\t\tg_strlcpy ((gchar *) &priv->io_data->dev_type, \"tun\", 4);\n\t}\n\n\t/* Get a local tun/tap */\n\tpriv->io_data->local_dev_number = nm_ssh_get_free_device(priv->io_data->dev_type);\n\tif (priv->io_data->local_dev_number == -1)\n\t{\n\t\tg_warning(\"Could not assign a free tun/tap device.\");\n\t\tnm_vpn_service_plugin_failure (NM_VPN_SERVICE_PLUGIN (plugin), NM_VPN_PLUGIN_FAILURE_CONNECT_FAILED);\n\t\treturn FALSE;\n\t}\n\n\t/* Remote */\n\tremote = nm_setting_vpn_get_data_item (s_vpn, NM_SSH_KEY_REMOTE);\n\tif (!(remote && strlen (remote))) {\n\t\tg_set_error (error,\n\t\t             NM_VPN_PLUGIN_ERROR,\n\t\t             NM_VPN_PLUGIN_ERROR_BAD_ARGUMENTS,\n\t\t             _(\"Please set remote address.\"));\n\t\tfree_ssh_args (args);\n\t\treturn FALSE;\n\t} else {\n\t\tpriv->io_data->remote_gw = g_strdup(remote);\n\t}\n\n\t/* Port */\n\tport = nm_setting_vpn_get_data_item (s_vpn, NM_SSH_KEY_PORT);\n\tadd_ssh_arg (args, \"-o\");\n\tif (port && strlen (port)) {\n\t\t/* Range validation is done in dialog... */\n\t\tif (!get_ssh_arg_int (port, &tmp_int)) {\n\t\t\tg_set_error (error,\n\t\t\t             NM_VPN_PLUGIN_ERROR,\n\t\t\t             NM_VPN_PLUGIN_ERROR_BAD_ARGUMENTS,\n\t\t\t             _(\"Invalid port number '%s'.\"),\n\t\t\t             port);\n\t\t\tfree_ssh_args (args);\n\t\t\treturn FALSE;\n\t\t}\n\t\tadd_ssh_arg (args, (gpointer) g_strdup_printf (\"Port=%d\", (guint32) tmp_int));\n\t} else {\n\t\t/* Default to SSH port 22 */\n\t\tadd_ssh_arg (args, (gpointer) g_strdup_printf(\"Port=%d\", (guint32) NM_SSH_DEFAULT_PORT));\n\t}\n\n\t/* TUN MTU size */\n\tmtu = nm_setting_vpn_get_data_item (s_vpn, NM_SSH_KEY_TUNNEL_MTU);\n\tif (mtu && strlen (mtu)) {\n\t\t/* Range validation is done in dialog... */\n\t\tif (!get_ssh_arg_int (mtu, &tmp_int)) {\n\t\t\tg_set_error (error,\n\t\t\t             NM_VPN_PLUGIN_ERROR,\n\t\t\t             NM_VPN_PLUGIN_ERROR_BAD_ARGUMENTS,\n\t\t\t             _(\"Invalid TUN MTU size '%s'.\"),\n\t\t\t             mtu);\n\t\t\tfree_ssh_args (args);\n\t\t\treturn FALSE;\n\t\t}\n\t\tpriv->io_data->mtu = tmp_int;\n\t} else {\n\t\t/* Default MTU of 1500 */\n\t\tpriv->io_data->mtu = NM_SSH_DEFAULT_MTU;\n\t}\n\n\t/* Remote device */\n\ttmp = nm_setting_vpn_get_data_item (s_vpn, NM_SSH_KEY_REMOTE_DEV);\n\tif (tmp && strlen (tmp)) {\n\t\t/* Range validation is done in dialog... */\n\t\tif (!get_ssh_arg_int (tmp, &tmp_int)) {\n\t\t\tg_set_error (error,\n\t\t\t             NM_VPN_PLUGIN_ERROR,\n\t\t\t             NM_VPN_PLUGIN_ERROR_BAD_ARGUMENTS,\n\t\t\t             _(\"Invalid TUN/TAP device number '%s'.\"),\n\t\t\t             tmp);\n\t\t\tfree_ssh_args (args);\n\t\t\treturn FALSE;\n\t\t}\n\t\tpriv->io_data->remote_dev_number = tmp_int;\n\t} else {\n\t\t/* Use tun100/tap100 by default */\n\t\tpriv->io_data->remote_dev_number = NM_SSH_DEFAULT_REMOTE_DEV;\n\t}\n\n\t/* Remote IP */\n\ttmp = nm_setting_vpn_get_data_item (s_vpn, NM_SSH_KEY_REMOTE_IP);\n\tif (!tmp) {\n\t\t/* Insufficient data (FIXME: this should really be detected when validating the properties */\n\t\tg_set_error (error,\n\t\t             NM_VPN_PLUGIN_ERROR,\n\t\t             NM_VPN_PLUGIN_ERROR_BAD_ARGUMENTS,\n\t\t             \"%s\",\n\t\t             _(\"Missing required remote IP address.\"));\n\t\tfree_ssh_args (args);\n\t\treturn FALSE;\n\t}\n\tpriv->io_data->remote_addr = g_strdup(tmp);\n\n\t/* Local IP */\n\ttmp = nm_setting_vpn_get_data_item (s_vpn, NM_SSH_KEY_LOCAL_IP);\n\tif (!tmp) {\n\t\t/* Insufficient data (FIXME: this should really be detected when validating the properties */\n\t\tg_set_error (error,\n\t\t             NM_VPN_PLUGIN_ERROR,\n\t\t             NM_VPN_PLUGIN_ERROR_BAD_ARGUMENTS,\n\t\t             \"%s\",\n\t\t             _(\"Missing required local IP address.\"));\n\t\tfree_ssh_args (args);\n\t\treturn FALSE;\n\t}\n\tpriv->io_data->local_addr = g_strdup(tmp);\n\n\t/* Netmask */\n\ttmp = nm_setting_vpn_get_data_item (s_vpn, NM_SSH_KEY_NETMASK);\n\tif (!tmp) {\n\t\tpriv->io_data->netmask = g_strdup(tmp);\n\n\t\t/* Insufficient data (FIXME: this should really be detected when validating the properties */\n\t\tg_set_error (error,\n\t\t             NM_VPN_PLUGIN_ERROR,\n\t\t             NM_VPN_PLUGIN_ERROR_BAD_ARGUMENTS,\n\t\t             \"%s\",\n\t\t             _(\"Missing required netmask.\"));\n\t\tfree_ssh_args (args);\n\t\treturn FALSE;\n\t}\n\tpriv->io_data->netmask = g_strdup(tmp);\n\n\t/* IPv6 enabled? */\n\ttmp = nm_setting_vpn_get_data_item (s_vpn, NM_SSH_KEY_IP_6);\n\tif (tmp && IS_YES(tmp)) {\n\t\t/* IPv6 is enabled */\n\t\tpriv->io_data->ipv6 = TRUE;\n\t\t\n\t\t/* Remote IP IPv6 */\n\t\ttmp = nm_setting_vpn_get_data_item (s_vpn, NM_SSH_KEY_REMOTE_IP_6);\n\t\tif (!tmp) {\n\t\t\t/* Insufficient data (FIXME: this should really be detected when validating the properties */\n\t\t\tg_set_error (error,\n\t\t\t             NM_VPN_PLUGIN_ERROR,\n\t\t\t             NM_VPN_PLUGIN_ERROR_BAD_ARGUMENTS,\n\t\t\t             \"%s\",\n\t\t\t             _(\"Missing required IPv6 remote IP address.\"));\n\t\t\tfree_ssh_args (args);\n\t\t\treturn FALSE;\n\t\t}\n\t\tpriv->io_data->remote_addr_6 = g_strdup(tmp);\n\t\n\t\t/* Local IP IPv6 */\n\t\ttmp = nm_setting_vpn_get_data_item (s_vpn, NM_SSH_KEY_LOCAL_IP_6);\n\t\tif (!tmp) {\n\t\t\t/* Insufficient data (FIXME: this should really be detected when validating the properties */\n\t\t\tg_set_error (error,\n\t\t\t             NM_VPN_PLUGIN_ERROR,\n\t\t\t             NM_VPN_PLUGIN_ERROR_BAD_ARGUMENTS,\n\t\t\t             \"%s\",\n\t\t\t             _(\"Missing required IPv6 local IP address.\"));\n\t\t\tfree_ssh_args (args);\n\t\t\treturn FALSE;\n\t\t}\n\t\tpriv->io_data->local_addr_6 = g_strdup(tmp);\n\t\n\t\t/* Prefix IPv6 */\n\t\ttmp = nm_setting_vpn_get_data_item (s_vpn, NM_SSH_KEY_NETMASK_6);\n\t\tif (!tmp) {\n\t\t\t/* Insufficient data (FIXME: this should really be detected when validating the properties */\n\t\t\tg_set_error (error,\n\t\t\t             NM_VPN_PLUGIN_ERROR,\n\t\t\t             NM_VPN_PLUGIN_ERROR_BAD_ARGUMENTS,\n\t\t\t             \"%s\",\n\t\t\t             _(\"Missing required IPv6 netmask.\"));\n\t\t\tfree_ssh_args (args);\n\t\t\treturn FALSE;\n\t\t}\n\t\tpriv->io_data->netmask_6 = g_strdup(tmp);\n\t} else {\n\t\t/* Set the values so they are not NULL */\n\t\tpriv->io_data->ipv6 = FALSE;\n\t\tpriv->io_data->remote_addr_6 = g_strdup(\"\");\n\t\tpriv->io_data->local_addr_6 = g_strdup(\"\");\n\t\tpriv->io_data->netmask_6 = g_strdup(\"\");\n\t}\n\n\n\t/* The -w option, provide a remote and local tun/tap device */\n\ttmp_arg = (gpointer) g_strdup_printf (\n\t\t\t\"TunnelDevice=%d:%d\", priv->io_data->local_dev_number, priv->io_data->remote_dev_number);\n\tadd_ssh_arg (args, \"-o\"); add_ssh_arg (args, tmp_arg);\n\tg_free(tmp_arg);\n\n\t/* Remote username, should usually be root */\n\ttmp = nm_setting_vpn_get_data_item (s_vpn, NM_SSH_KEY_REMOTE_USERNAME);\n\tif (tmp && strlen (tmp)) {\n\t\tpriv->io_data->username = g_strdup (tmp);\n\t} else {\n\t\t/* Add default username - root */\n\t\tpriv->io_data->username = g_strdup (NM_SSH_DEFAULT_REMOTE_USERNAME);\n\t}\n\ttmp_arg = g_strdup_printf (\"User=%s\", priv->io_data->username);\n\tadd_ssh_arg (args, \"-o\");\n\tadd_ssh_arg (args, tmp_arg);\n\tg_free(tmp_arg);\n\n\t/* Connect to remote */\n\ttmp_arg = g_strdup_printf (\"HostName=%s\", priv->io_data->remote_gw);\n\tadd_ssh_arg (args, \"-o\");\n\tadd_ssh_arg (args, tmp_arg);\n\tg_free(tmp_arg);\n\n\t/* This is supposedly the hostname parameter, but we can pass anything\n\t * as we passed '-o Hostname=' before that */\n\tadd_ssh_arg (args, \"NetworkManager-ssh\");\n\n\t/* Command line to run on remote machine */\n\tifconfig_cmd_4 = (gpointer) g_strdup_printf (\n\t\t\"%s %s%d inet %s netmask %s pointopoint %s mtu %d\",\n\t\tIFCONFIG,\n\t\tpriv->io_data->dev_type,\n\t\tpriv->io_data->remote_dev_number,\n\t\tpriv->io_data->remote_addr,\n\t\tpriv->io_data->netmask,\n\t\tpriv->io_data->local_addr,\n\t\tpriv->io_data->mtu);\n\n\t/* IPv6 ifconfig command to run on remote machine */\n\tif (priv->io_data->ipv6) {\n\t\tifconfig_cmd_6 = (gpointer) g_strdup_printf (\n\t\t\t\"%s %s%d add %s/%s\",\n\t\t\tIFCONFIG,\n\t\t\tpriv->io_data->dev_type,\n\t\t\tpriv->io_data->remote_dev_number,\n\t\t\tpriv->io_data->remote_addr_6,\n\t\t\tpriv->io_data->netmask_6);\n\t} else {\n\t\tifconfig_cmd_6 = g_strdup(\"\");\n\t}\n\t/* Concatenate ifconfig_cmd_4 and ifconfig_cmd_6 to one command */\n\ttmp_arg = g_strconcat(ifconfig_cmd_4, \"; \", ifconfig_cmd_6, NULL);\n\tadd_ssh_arg (args, tmp_arg);\n\tg_free(ifconfig_cmd_4);\n\tg_free(ifconfig_cmd_6);\n\tg_free(tmp_arg);\n\n\t/* Wrap it up */\n\tg_ptr_array_add (args, NULL);\n\n\t/* Spawn with pipes */\n\tif (!g_spawn_async_with_pipes (NULL, (char **) args->pdata, envp,\n\t\t\t\t\t\tG_SPAWN_DO_NOT_REAP_CHILD | G_SPAWN_LEAVE_DESCRIPTORS_OPEN, NULL, NULL, &pid,\n\t\t\t\t\t\t&ssh_stdin_fd, NULL, &ssh_stderr_fd,\n\t\t\t\t\t\terror)) {\n\t\tfree_ssh_args (args);\n\t\treturn FALSE;\n\t}\n\tfree_ssh_args (args);\n\n\t/* Write password to fd, so sshpass can pick it up */\n\tif (!strncmp (auth_type, NM_SSH_AUTH_TYPE_PASSWORD, strlen(NM_SSH_AUTH_TYPE_PASSWORD))) {\n\t\ttmp_arg = g_strdup_printf (\"%s\\n\", password);\n\t\tif (write(sshpass_pipe[1], tmp_arg, strlen(tmp_arg)) != strlen(tmp_arg)) {\n\t\t\tg_set_error (error,\n\t\t\t             NM_VPN_PLUGIN_ERROR,\n\t\t\t             NM_VPN_PLUGIN_ERROR_BAD_ARGUMENTS,\n\t\t\t             \"%s\",\n\t\t\t             _(\"Could not pass password to sshpass.\"));\n\t\t\tfree_ssh_args (args);\n\t\t\tg_free(tmp_arg);\n\t\t\treturn FALSE;\n\t\t}\n\n\t\tg_free(tmp_arg);\n\t\tclose(sshpass_pipe[0]);\n\t\tclose(sshpass_pipe[1]);\n\t}\n\n\tg_message (\"ssh started with pid %d\", pid);\n\n\t/* Add a watch for the SSH stdin and stderr */\n\tpriv->io_data->ssh_stdin_channel = g_io_channel_unix_new (ssh_stdin_fd);\n\tpriv->io_data->ssh_stderr_channel = g_io_channel_unix_new (ssh_stderr_fd);\n\n\t/* Set io watches on stderr */\n\t/* stderr */\n\tpriv->io_data->socket_channel_stderr_eventid = g_io_add_watch (\n\t\tpriv->io_data->ssh_stderr_channel,\n\t\tG_IO_IN,\n\t\tnm_ssh_stderr_cb,\n\t\tplugin);\n\n\t/* Set encoding to NULL */\n\tg_io_channel_set_encoding (priv->io_data->ssh_stderr_channel, NULL, NULL);\n\n\t/* Add a watch for the process */\n\tpriv->pid = pid;\n\tssh_watch = g_child_watch_source_new (pid);\n\tg_source_set_callback (ssh_watch, (GSourceFunc) ssh_watch_cb, plugin, NULL);\n\tg_source_attach (ssh_watch, NULL);\n\tg_source_unref (ssh_watch);\n\n\treturn TRUE;\n}",
  "abstract_func": "static gboolean\nnm_ssh_start_ssh_binary (NMSshPlugin *VAR_0,\n\tNMSettingVpn *VAR_1,\n\tconst char *VAR_2,\n\tGError **VAR_3)\n{\n\t/* COMMENT_0 */\n                                              \n\tNMSshPluginPrivate *VAR_4 = NM_SSH_PLUGIN_GET_PRIVATE (VAR_0);\n\tconst char *VAR_5, *VAR_6, *VAR_7;\n\tconst char *VAR_8, *VAR_9, *VAR_10, *VAR_11, *VAR_12;\n\tchar *VAR_13;\n\tchar *VAR_14;\n\tchar *VAR_15, *VAR_16;\n\tchar *VAR_17[16];\n\tlong int VAR_18;\n\tGPtrArray *VAR_19;\n\tGSource *VAR_20;\n\tGPid VAR_21;\n\tgint VAR_22, VAR_23;\n\tint VAR_24[2];\n\tconst gchar *VAR_25 = NULL;\n\n\t/* COMMENT_2 */\n\tVAR_5 = nm_find_ssh ();\n\tif (!VAR_5) {\n\t\tg_set_error (VAR_3,\n\t\t             VAR_26,\n\t\t             VAR_27,\n\t\t             \"%s\",\n\t\t             _(\"Could not find the ssh binary.\"));\n\t\treturn FALSE;\n\t}\n\n\t/* COMMENT_3 */\n\tVAR_4->io_data = g_malloc0 (sizeof (VAR_28));\n\n\tVAR_19 = g_ptr_array_new ();\n\n\t/* COMMENT_4 */\n\tVAR_12 = nm_setting_vpn_get_data_item (VAR_1, VAR_29);\n\n\t/* COMMENT_5 */\n\tVAR_17[0] = NULL;\n\tif (!strncmp (VAR_12, VAR_30, strlen(VAR_30))) {\n\t\t/* COMMENT_6 */\n\n\t\t/* COMMENT_7 */\n                        \n\t\tVAR_6 = nm_find_sshpass ();\n\t\tif (!VAR_6) {\n\t\t\tg_set_error (VAR_3,\n\t\t                 VAR_26,\n\t\t                 VAR_27,\n\t\t                 \"%s\",\n\t\t                 _(\"Could not find the sshpass binary.\"));\n\t\t\treturn FALSE;\n\t\t}\n\n\t\t/* COMMENT_9 */\n\t\tadd_ssh_arg (VAR_19, VAR_6);\n\n\t\t/* COMMENT_10 */\n\t\tVAR_25 = nm_setting_vpn_get_secret (VAR_1, VAR_31);\n\t\tif (VAR_25 && strlen(VAR_25)) {\n\t\t\tif (pipe(VAR_24))\n\t\t\t{\n\t\t\t\tg_set_error (\n\t\t\t\t\tVAR_3,\n\t\t\t\t\tVAR_26,\n\t\t\t\t\tVAR_27,\n\t\t\t\t\t\"%s\",\n\t\t\t\t\t_(\"Failed creating pipe.\"));\n\t\t\t\tfree_ssh_args (VAR_19);\n\t\t\t\treturn FALSE;\n\t\t\t}\n\t\t\tVAR_7 = (gpointer) g_strdup_printf (\"-d%d\", VAR_24[0]);\n\t\t\tadd_ssh_arg (VAR_19, VAR_7);\n\t\t\tg_free((gpointer) VAR_7);\n\t\t} else {\n\t\t\t/* COMMENT_11 */\n\t\t\tg_set_error (\n\t\t\t\tVAR_3,\n\t\t\t\tVAR_26,\n\t\t\t\tVAR_27,\n\t\t\t\t\"%s\",\n\t\t\t\t_(\"No password specified.\"));\n\t\t\tfree_ssh_args (VAR_19);\n\t\t\treturn FALSE;\n\t\t}\n\n\t\t/* COMMENT_12 */\n\t\tadd_ssh_arg (VAR_19, VAR_5);\n\n\t\t/* COMMENT_13 */\n\t\tadd_ssh_arg (VAR_19, \"-o\"); add_ssh_arg (VAR_19, \"NumberOfPasswordPrompts=1\");\n\t\tadd_ssh_arg (VAR_19, \"-o\"); add_ssh_arg (VAR_19, \"PreferredAuthentications=password\");\n\n\t} else {\n\t\t/* COMMENT_14 */\n\t\tadd_ssh_arg (VAR_19, VAR_5);\n\n\t\t/* COMMENT_15 */\n                             \n\t\tadd_ssh_arg (VAR_19, \"-o\"); add_ssh_arg (VAR_19, \"NumberOfPasswordPrompts=0\");\n\t\tadd_ssh_arg (VAR_19, \"-o\"); add_ssh_arg (VAR_19, \"PreferredAuthentications=publickey\");\n\n\t\t/* COMMENT_17 */\n\t\tif (!strncmp (VAR_12, VAR_32, strlen(VAR_32))) {\n\t\t\tVAR_7 = nm_setting_vpn_get_data_item (VAR_1, VAR_33);\n\t\t\tif (VAR_7 && strlen (VAR_7)) {\n\t\t\t\t/* COMMENT_18 */\n\t\t\t\tadd_ssh_arg (VAR_19, \"-i\");\n\t\t\t\tadd_ssh_arg (VAR_19, VAR_7);\n\t\t\t} else {\n\t\t\t\t/* COMMENT_19 */\n\t\t\t\tg_set_error (VAR_3,\n\t\t                     VAR_26,\n\t\t                     VAR_27,\n\t\t                     \"%s\",\n\t\t                     _(\"Key authentication selected, but no key file specified.\"));\n\t\t\t\tfree_ssh_args (VAR_19);\n\t\t\t\treturn FALSE;\n\t\t\t}\n\t\t} else if (!strncmp (VAR_12, VAR_34, strlen(VAR_34))) {\n\t\t\t/* COMMENT_20 */\n                                                      \n\t\t\t/* COMMENT_22 */\n\t\t\t/* COMMENT_23 */\n                                                    \n                          \n\t\t\tVAR_11 = nm_setting_vpn_get_secret (VAR_1, VAR_35);\n\t\t\tif (VAR_11 && strlen(VAR_11)) {\n\t\t\t\tVAR_17[0] = (gpointer) g_strdup_printf (\"%s=%s\", VAR_36, VAR_11);\n\t\t\t} else {\n\t\t\t\t/* COMMENT_26 */\n\t\t\t\tg_set_error (VAR_3,\n\t\t                     VAR_26,\n\t\t                     VAR_27,\n\t\t                     \"%s\",\n\t\t                     _(\"Missing required SSH_AUTH_SOCK.\"));\n\t\t\t\tfree_ssh_args (VAR_19);\n\t\t\t\treturn FALSE;\n\t\t\t}\n\t\t\tVAR_17[1] = NULL;\n\n\t\t\tif (VAR_37)\n\t\t\t\tg_message (\"Using ssh-agent socket: '%s'\", VAR_17[0]);\n\n\t\t} else {\n\t\t\tg_set_error (\n\t\t\t\tVAR_3,\n\t\t\t\tVAR_26,\n\t\t\t\tVAR_27,\n\t\t\t\t_(\"Unknown authentication type: %s.\"), VAR_12);\n\t\t\tfree_ssh_args (VAR_19);\n\t\t\treturn FALSE;\n\t\t}\n\t}\n\n\t/* COMMENT_27 */\n\tadd_ssh_arg (VAR_19, \"-v\");\n\n\t/* COMMENT_28 */\n\t/* COMMENT_29 */\n                                                \n                                                             \n                                                   \n\tVAR_13 = get_known_hosts_file(VAR_2, VAR_11);\n\tif (!(VAR_13 && strlen (VAR_13))) {\n\t\tg_warning(\"Using root's .ssh/known_hosts\");\n\t} else {\n\t\tif (VAR_37)\n\t\t\tg_message(\"Using known_hosts at: '%s'\", VAR_13);\n\t\tadd_ssh_arg (VAR_19, \"-o\");\n\t\tadd_ssh_arg (VAR_19, g_strdup_printf(\"UserKnownHostsFile=%s\", VAR_13) );\n\t\tg_free(VAR_13);\n\t}\n\n\tadd_ssh_arg (VAR_19, \"-o\");\n\tadd_ssh_arg (VAR_19, \"ServerAliveInterval=10\");\n\tadd_ssh_arg (VAR_19, \"-o\");\n\tadd_ssh_arg (VAR_19, \"TCPKeepAlive=yes\");\n\n\t/* COMMENT_33 */\n\tadd_ssh_arg (VAR_19, \"-o\");\n\tVAR_7 = nm_setting_vpn_get_data_item (VAR_1, VAR_38);\n\tif (VAR_7 && IS_YES(VAR_7)) {\n\t\tadd_ssh_arg (VAR_19, \"Tunnel=ethernet\");\n\t\tg_strlcpy ((gchar *) &VAR_4->io_data->dev_type, \"tap\", 4);\n\t} else {\n\t\tadd_ssh_arg (VAR_19, \"Tunnel=point-to-point\");\n\t\tg_strlcpy ((gchar *) &VAR_4->io_data->dev_type, \"tun\", 4);\n\t}\n\n\t/* COMMENT_34 */\n\tVAR_4->io_data->local_dev_number = nm_ssh_get_free_device(VAR_4->io_data->dev_type);\n\tif (VAR_4->io_data->local_dev_number == -1)\n\t{\n\t\tg_warning(\"Could not assign a free tun/tap device.\");\n\t\tnm_vpn_service_plugin_failure (NM_VPN_SERVICE_PLUGIN (VAR_0), VAR_39);\n\t\treturn FALSE;\n\t}\n\n\t/* COMMENT_35 */\n\tVAR_8 = nm_setting_vpn_get_data_item (VAR_1, VAR_40);\n\tif (!(VAR_8 && strlen (VAR_8))) {\n\t\tg_set_error (VAR_3,\n\t\t             VAR_26,\n\t\t             VAR_27,\n\t\t             _(\"Please set remote address.\"));\n\t\tfree_ssh_args (VAR_19);\n\t\treturn FALSE;\n\t} else {\n\t\tVAR_4->io_data->remote_gw = g_strdup(VAR_8);\n\t}\n\n\t/* COMMENT_36 */\n\tVAR_9 = nm_setting_vpn_get_data_item (VAR_1, VAR_41);\n\tadd_ssh_arg (VAR_19, \"-o\");\n\tif (VAR_9 && strlen (VAR_9)) {\n\t\t/* COMMENT_37 */\n\t\tif (!get_ssh_arg_int (VAR_9, &VAR_18)) {\n\t\t\tg_set_error (VAR_3,\n\t\t\t             VAR_26,\n\t\t\t             VAR_27,\n\t\t\t             _(\"Invalid port number '%s'.\"),\n\t\t\t             VAR_9);\n\t\t\tfree_ssh_args (VAR_19);\n\t\t\treturn FALSE;\n\t\t}\n\t\tadd_ssh_arg (VAR_19, (gpointer) g_strdup_printf (\"Port=%d\", (guint32) VAR_18));\n\t} else {\n\t\t/* COMMENT_38 */\n\t\tadd_ssh_arg (VAR_19, (gpointer) g_strdup_printf(\"Port=%d\", (guint32) VAR_42));\n\t}\n\n\t/* COMMENT_39 */\n\tVAR_10 = nm_setting_vpn_get_data_item (VAR_1, VAR_43);\n\tif (VAR_10 && strlen (VAR_10)) {\n\t\t/* COMMENT_37 */\n\t\tif (!get_ssh_arg_int (VAR_10, &VAR_18)) {\n\t\t\tg_set_error (VAR_3,\n\t\t\t             VAR_26,\n\t\t\t             VAR_27,\n\t\t\t             _(\"Invalid TUN MTU size '%s'.\"),\n\t\t\t             VAR_10);\n\t\t\tfree_ssh_args (VAR_19);\n\t\t\treturn FALSE;\n\t\t}\n\t\tVAR_4->io_data->mtu = VAR_18;\n\t} else {\n\t\t/* COMMENT_40 */\n\t\tVAR_4->io_data->mtu = VAR_44;\n\t}\n\n\t/* COMMENT_41 */\n\tVAR_7 = nm_setting_vpn_get_data_item (VAR_1, VAR_45);\n\tif (VAR_7 && strlen (VAR_7)) {\n\t\t/* COMMENT_37 */\n\t\tif (!get_ssh_arg_int (VAR_7, &VAR_18)) {\n\t\t\tg_set_error (VAR_3,\n\t\t\t             VAR_26,\n\t\t\t             VAR_27,\n\t\t\t             _(\"Invalid TUN/TAP device number '%s'.\"),\n\t\t\t             VAR_7);\n\t\t\tfree_ssh_args (VAR_19);\n\t\t\treturn FALSE;\n\t\t}\n\t\tVAR_4->io_data->remote_dev_number = VAR_18;\n\t} else {\n\t\t/* COMMENT_42 */\n\t\tVAR_4->io_data->remote_dev_number = VAR_46;\n\t}\n\n\t/* COMMENT_43 */\n\tVAR_7 = nm_setting_vpn_get_data_item (VAR_1, VAR_47);\n\tif (!VAR_7) {\n\t\t/* COMMENT_44 */\n\t\tg_set_error (VAR_3,\n\t\t             VAR_26,\n\t\t             VAR_27,\n\t\t             \"%s\",\n\t\t             _(\"Missing required remote IP address.\"));\n\t\tfree_ssh_args (VAR_19);\n\t\treturn FALSE;\n\t}\n\tVAR_4->io_data->remote_addr = g_strdup(VAR_7);\n\n\t/* COMMENT_45 */\n\tVAR_7 = nm_setting_vpn_get_data_item (VAR_1, VAR_48);\n\tif (!VAR_7) {\n\t\t/* COMMENT_44 */\n\t\tg_set_error (VAR_3,\n\t\t             VAR_26,\n\t\t             VAR_27,\n\t\t             \"%s\",\n\t\t             _(\"Missing required local IP address.\"));\n\t\tfree_ssh_args (VAR_19);\n\t\treturn FALSE;\n\t}\n\tVAR_4->io_data->local_addr = g_strdup(VAR_7);\n\n\t/* COMMENT_46 */\n\tVAR_7 = nm_setting_vpn_get_data_item (VAR_1, VAR_49);\n\tif (!VAR_7) {\n\t\tVAR_4->io_data->netmask = g_strdup(VAR_7);\n\n\t\t/* COMMENT_44 */\n\t\tg_set_error (VAR_3,\n\t\t             VAR_26,\n\t\t             VAR_27,\n\t\t             \"%s\",\n\t\t             _(\"Missing required netmask.\"));\n\t\tfree_ssh_args (VAR_19);\n\t\treturn FALSE;\n\t}\n\tVAR_4->io_data->netmask = g_strdup(VAR_7);\n\n\t/* COMMENT_47 */\n\tVAR_7 = nm_setting_vpn_get_data_item (VAR_1, VAR_50);\n\tif (VAR_7 && IS_YES(VAR_7)) {\n\t\t/* COMMENT_48 */\n\t\tVAR_4->io_data->ipv6 = TRUE;\n\t\t\n\t\t/* COMMENT_49 */\n\t\tVAR_7 = nm_setting_vpn_get_data_item (VAR_1, VAR_51);\n\t\tif (!VAR_7) {\n\t\t\t/* COMMENT_44 */\n\t\t\tg_set_error (VAR_3,\n\t\t\t             VAR_26,\n\t\t\t             VAR_27,\n\t\t\t             \"%s\",\n\t\t\t             _(\"Missing required IPv6 remote IP address.\"));\n\t\t\tfree_ssh_args (VAR_19);\n\t\t\treturn FALSE;\n\t\t}\n\t\tVAR_4->io_data->remote_addr_6 = g_strdup(VAR_7);\n\t\n\t\t/* COMMENT_50 */\n\t\tVAR_7 = nm_setting_vpn_get_data_item (VAR_1, VAR_52);\n\t\tif (!VAR_7) {\n\t\t\t/* COMMENT_44 */\n\t\t\tg_set_error (VAR_3,\n\t\t\t             VAR_26,\n\t\t\t             VAR_27,\n\t\t\t             \"%s\",\n\t\t\t             _(\"Missing required IPv6 local IP address.\"));\n\t\t\tfree_ssh_args (VAR_19);\n\t\t\treturn FALSE;\n\t\t}\n\t\tVAR_4->io_data->local_addr_6 = g_strdup(VAR_7);\n\t\n\t\t/* COMMENT_51 */\n\t\tVAR_7 = nm_setting_vpn_get_data_item (VAR_1, VAR_53);\n\t\tif (!VAR_7) {\n\t\t\t/* COMMENT_44 */\n\t\t\tg_set_error (VAR_3,\n\t\t\t             VAR_26,\n\t\t\t             VAR_27,\n\t\t\t             \"%s\",\n\t\t\t             _(\"Missing required IPv6 netmask.\"));\n\t\t\tfree_ssh_args (VAR_19);\n\t\t\treturn FALSE;\n\t\t}\n\t\tVAR_4->io_data->netmask_6 = g_strdup(VAR_7);\n\t} else {\n\t\t/* COMMENT_52 */\n\t\tVAR_4->io_data->ipv6 = FALSE;\n\t\tVAR_4->io_data->remote_addr_6 = g_strdup(\"\");\n\t\tVAR_4->io_data->local_addr_6 = g_strdup(\"\");\n\t\tVAR_4->io_data->netmask_6 = g_strdup(\"\");\n\t}\n\n\n\t/* COMMENT_53 */\n\tVAR_14 = (gpointer) g_strdup_printf (\n\t\t\t\"TunnelDevice=%d:%d\", VAR_4->io_data->local_dev_number, VAR_4->io_data->remote_dev_number);\n\tadd_ssh_arg (VAR_19, \"-o\"); add_ssh_arg (VAR_19, VAR_14);\n\tg_free(VAR_14);\n\n\t/* COMMENT_54 */\n\tVAR_7 = nm_setting_vpn_get_data_item (VAR_1, VAR_54);\n\tif (VAR_7 && strlen (VAR_7)) {\n\t\tVAR_4->io_data->username = g_strdup (VAR_7);\n\t} else {\n\t\t/* COMMENT_55 */\n\t\tVAR_4->io_data->username = g_strdup (VAR_55);\n\t}\n\tVAR_14 = g_strdup_printf (\"User=%s\", VAR_4->io_data->username);\n\tadd_ssh_arg (VAR_19, \"-o\");\n\tadd_ssh_arg (VAR_19, VAR_14);\n\tg_free(VAR_14);\n\n\t/* COMMENT_56 */\n\tVAR_14 = g_strdup_printf (\"HostName=%s\", VAR_4->io_data->remote_gw);\n\tadd_ssh_arg (VAR_19, \"-o\");\n\tadd_ssh_arg (VAR_19, VAR_14);\n\tg_free(VAR_14);\n\n\t/* COMMENT_57 */\n                                              \n\tadd_ssh_arg (VAR_19, \"NetworkManager-ssh\");\n\n\t/* COMMENT_59 */\n\tVAR_15 = (gpointer) g_strdup_printf (\n\t\t\"%s %s%d inet %s netmask %s pointopoint %s mtu %d\",\n\t\tVAR_56,\n\t\tVAR_4->io_data->dev_type,\n\t\tVAR_4->io_data->remote_dev_number,\n\t\tVAR_4->io_data->remote_addr,\n\t\tVAR_4->io_data->netmask,\n\t\tVAR_4->io_data->local_addr,\n\t\tVAR_4->io_data->mtu);\n\n\t/* COMMENT_60 */\n\tif (VAR_4->io_data->ipv6) {\n\t\tVAR_16 = (gpointer) g_strdup_printf (\n\t\t\t\"%s %s%d add %s/%s\",\n\t\t\tVAR_56,\n\t\t\tVAR_4->io_data->dev_type,\n\t\t\tVAR_4->io_data->remote_dev_number,\n\t\t\tVAR_4->io_data->remote_addr_6,\n\t\t\tVAR_4->io_data->netmask_6);\n\t} else {\n\t\tVAR_16 = g_strdup(\"\");\n\t}\n\t/* COMMENT_61 */\n\tVAR_14 = g_strconcat(VAR_15, \"; \", VAR_16, NULL);\n\tadd_ssh_arg (VAR_19, VAR_14);\n\tg_free(VAR_15);\n\tg_free(VAR_16);\n\tg_free(VAR_14);\n\n\t/* COMMENT_62 */\n\tg_ptr_array_add (VAR_19, NULL);\n\n\t/* COMMENT_63 */\n\tif (!g_spawn_async_with_pipes (NULL, (char **) VAR_19->pdata, VAR_17,\n\t\t\t\t\t\tVAR_57 | VAR_58, NULL, NULL, &VAR_21,\n\t\t\t\t\t\t&VAR_22, NULL, &VAR_23,\n\t\t\t\t\t\tVAR_3)) {\n\t\tfree_ssh_args (VAR_19);\n\t\treturn FALSE;\n\t}\n\tfree_ssh_args (VAR_19);\n\n\t/* COMMENT_64 */\n\tif (!strncmp (VAR_12, VAR_30, strlen(VAR_30))) {\n\t\tVAR_14 = g_strdup_printf (\"%s\\n\", VAR_25);\n\t\tif (write(VAR_24[1], VAR_14, strlen(VAR_14)) != strlen(VAR_14)) {\n\t\t\tg_set_error (VAR_3,\n\t\t\t             VAR_26,\n\t\t\t             VAR_27,\n\t\t\t             \"%s\",\n\t\t\t             _(\"Could not pass password to sshpass.\"));\n\t\t\tfree_ssh_args (VAR_19);\n\t\t\tg_free(VAR_14);\n\t\t\treturn FALSE;\n\t\t}\n\n\t\tg_free(VAR_14);\n\t\tclose(VAR_24[0]);\n\t\tclose(VAR_24[1]);\n\t}\n\n\tg_message (\"ssh started with pid %d\", VAR_21);\n\n\t/* COMMENT_65 */\n\tVAR_4->io_data->ssh_stdin_channel = g_io_channel_unix_new (VAR_22);\n\tVAR_4->io_data->ssh_stderr_channel = g_io_channel_unix_new (VAR_23);\n\n\t/* COMMENT_66 */\n\t/* COMMENT_67 */\n\tVAR_4->io_data->socket_channel_stderr_eventid = g_io_add_watch (\n\t\tVAR_4->io_data->ssh_stderr_channel,\n\t\tVAR_59,\n\t\tVAR_60,\n\t\tVAR_0);\n\n\t/* COMMENT_68 */\n\tg_io_channel_set_encoding (VAR_4->io_data->ssh_stderr_channel, NULL, NULL);\n\n\t/* COMMENT_69 */\n\tVAR_4->pid = VAR_21;\n\tVAR_20 = g_child_watch_source_new (VAR_21);\n\tg_source_set_callback (VAR_20, (GSourceFunc) VAR_61, VAR_0, NULL);\n\tg_source_attach (VAR_20, NULL);\n\tg_source_unref (VAR_20);\n\n\treturn TRUE;\n}",
  "func_graph_path": "danfruehauf/NetworkManager-ssh/5d88cd89795352b5df54cc0ebb6a0076b8c89ee4/nm-ssh-service.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -177,14 +177,10 @@\n \t\tg_free(known_hosts_file);\n \t}\n \n-\t/* Extra SSH options */\n-\ttmp = nm_setting_vpn_get_data_item (s_vpn, NM_SSH_KEY_EXTRA_OPTS);\n-\tif (tmp && strlen (tmp)) {\n-\t\tadd_ssh_extra_opts (args, tmp);\n-\t} else {\n-\t\t/* Add default extra options */\n-\t\tadd_ssh_extra_opts (args, NM_SSH_DEFAULT_EXTRA_OPTS);\n-\t}\n+\tadd_ssh_arg (args, \"-o\");\n+\tadd_ssh_arg (args, \"ServerAliveInterval=10\");\n+\tadd_ssh_arg (args, \"-o\");\n+\tadd_ssh_arg (args, \"TCPKeepAlive=yes\");\n \n \t/* Device, either tun or tap */\n \tadd_ssh_arg (args, \"-o\");",
  "diff_line_info": {
    "deleted_lines": [
      "\t/* Extra SSH options */",
      "\ttmp = nm_setting_vpn_get_data_item (s_vpn, NM_SSH_KEY_EXTRA_OPTS);",
      "\tif (tmp && strlen (tmp)) {",
      "\t\tadd_ssh_extra_opts (args, tmp);",
      "\t} else {",
      "\t\t/* Add default extra options */",
      "\t\tadd_ssh_extra_opts (args, NM_SSH_DEFAULT_EXTRA_OPTS);",
      "\t}"
    ],
    "added_lines": [
      "\tadd_ssh_arg (args, \"-o\");",
      "\tadd_ssh_arg (args, \"ServerAliveInterval=10\");",
      "\tadd_ssh_arg (args, \"-o\");",
      "\tadd_ssh_arg (args, \"TCPKeepAlive=yes\");"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/danfruehauf/NetworkManager-ssh/pull/98",
  "description": {
    "pr_info": {
      "title": "Remove extra options",
      "number": 98
    },
    "comment": [
      "After analyzing some privilege escalation possibilites, it was decided\r\nit is best to remove extra options",
      "I understand some people are going to be very unhappy with it. However I hope to add `-L` and `-R` options.\r\n\r\nSee also:\r\nhttps://bugzilla.redhat.com/show_bug.cgi?id=1803499",
      "@lhw This should be urgently deployed. I'll tag it as 1.2.11",
      "@danfruehauf can you please request a CVE as needed for the privilege escalation flaw via https://cveform.mitre.org/ ?",
      "@carnil I've requested a CVE ID and will post it here once I've heard back from them.",
      "@kobus-v-schoor was there any news on the CVE assignment?",
      "@danfruehauf https://bugzilla.redhat.com/show_bug.cgi?id=1803499 is not publicly accessible, possible to open that up? This might be blocking the CVE assignment from MITRE if they have not enough context.",
      "CVE-2020-9355 was assigned for this issue.",
      "Darn. I can't -D anymore. Is there some way to add this? :(",
      "The PR removed the extra options, but left in the README section and the image, giving the false impression this is still supported.\r\n\r\nOn the same topic, I'd really like to have `-L` back, would you be open to merge a very restricted input field that just allows the user to append valid `-L` blocks?"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "The patch removes the ability to set arbitrary extra SSH options, which were identified as a potential privilege escalation vector. By controlling the extra options to specific, predefined ones, it mitigates a security risk. \n\n**Final Classification:** Security Vulnerability Fix; **Confidence:** 0.9"
}