{
  "cve_id": "CVE-2023-48795",
  "cwe_ids": [
    "CWE-354"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:H/A:N",
  "cvss_is_v3": true,
  "repo_name": "hierynomus/sshj",
  "commit_msg": "Implement OpenSSH strict key exchange extension",
  "commit_hash": "94fcc960e0fb198ddec0f7efc53f95ac627fe083",
  "git_url": "https://github.com/hierynomus/sshj/commit/94fcc960e0fb198ddec0f7efc53f95ac627fe083",
  "file_path": "src/main/java/net/schmizz/sshj/transport/TransportImpl.java",
  "func_name": "handle",
  "func_before": "@Override\n    public void handle(Message msg, SSHPacket buf)\n            throws SSHException {\n        this.msg = msg;\n\n        log.trace(\"Received packet {}\", msg);\n\n        if (msg.geq(50)) { // not a transport layer packet\n            service.handle(msg, buf);\n        } else if (msg.in(20, 21) || msg.in(30, 49)) { // kex packet\n            kexer.handle(msg, buf);\n        } else {\n            switch (msg) {\n                case DISCONNECT:\n                    gotDisconnect(buf);\n                    break;\n                case IGNORE:\n                    log.debug(\"Received SSH_MSG_IGNORE\");\n                    break;\n                case UNIMPLEMENTED:\n                    gotUnimplemented(buf);\n                    break;\n                case DEBUG:\n                    gotDebug(buf);\n                    break;\n                case SERVICE_ACCEPT:\n                    gotServiceAccept();\n                    break;\n                case EXT_INFO:\n                    log.debug(\"Received SSH_MSG_EXT_INFO\");\n                    break;\n                case USERAUTH_BANNER:\n                    log.debug(\"Received USERAUTH_BANNER\");\n                    break;\n                default:\n                    sendUnimplemented();\n                    break;\n            }\n        }\n    }",
  "abstract_func_before": "@Override\n    public void handle(Message VAR_0, SSHPacket VAR_1)\n            throws SSHException {\n        this.msg = VAR_0;\n\n        VAR_2.trace(\"Received packet {}\", VAR_0);\n\n        if (VAR_0.geq(50)) { /* COMMENT_0 */\n            VAR_3.handle(VAR_0, VAR_1);\n        } else if (VAR_0.in(20, 21) || VAR_0.in(30, 49)) { /* COMMENT_1 */\n            VAR_4.handle(VAR_0, VAR_1);\n        } else {\n            switch (VAR_0) {\n                case VAR_5:\n                    gotDisconnect(VAR_1);\n                    break;\n                case VAR_6:\n                    VAR_2.debug(\"Received SSH_MSG_IGNORE\");\n                    break;\n                case VAR_7:\n                    gotUnimplemented(VAR_1);\n                    break;\n                case VAR_8:\n                    gotDebug(VAR_1);\n                    break;\n                case VAR_9:\n                    gotServiceAccept();\n                    break;\n                case VAR_10:\n                    VAR_2.debug(\"Received SSH_MSG_EXT_INFO\");\n                    break;\n                case VAR_11:\n                    VAR_2.debug(\"Received USERAUTH_BANNER\");\n                    break;\n                default:\n                    sendUnimplemented();\n                    break;\n            }\n        }\n    }",
  "func_graph_path_before": "hierynomus/sshj/94fcc960e0fb198ddec0f7efc53f95ac627fe083/TransportImpl.java/vul/before/1.json",
  "func": "@Override\n    public void handle(Message msg, SSHPacket buf)\n            throws SSHException {\n        this.msg = msg;\n\n        log.trace(\"Received packet {}\", msg);\n\n        if (kexer.isInitialKex()) {\n            if (decoder.isSequenceNumberAtMax()) {\n                throw new TransportException(DisconnectReason.KEY_EXCHANGE_FAILED,\n                    \"Sequence number of decoder is about to wrap during initial key exchange\");\n            }\n            if (kexer.isStrictKex() && !isKexerPacket(msg) && msg != Message.DISCONNECT) {\n                throw new TransportException(DisconnectReason.KEY_EXCHANGE_FAILED,\n                    \"Unexpected packet type during initial strict key exchange\");\n            }\n        }\n\n        if (msg.geq(50)) { // not a transport layer packet\n            service.handle(msg, buf);\n        } else if (isKexerPacket(msg)) {\n            kexer.handle(msg, buf);\n        } else {\n            switch (msg) {\n                case DISCONNECT:\n                    gotDisconnect(buf);\n                    break;\n                case IGNORE:\n                    log.debug(\"Received SSH_MSG_IGNORE\");\n                    break;\n                case UNIMPLEMENTED:\n                    gotUnimplemented(buf);\n                    break;\n                case DEBUG:\n                    gotDebug(buf);\n                    break;\n                case SERVICE_ACCEPT:\n                    gotServiceAccept();\n                    break;\n                case EXT_INFO:\n                    log.debug(\"Received SSH_MSG_EXT_INFO\");\n                    break;\n                case USERAUTH_BANNER:\n                    log.debug(\"Received USERAUTH_BANNER\");\n                    break;\n                default:\n                    sendUnimplemented();\n                    break;\n            }\n        }\n    }",
  "abstract_func": "@Override\n    public void handle(Message VAR_0, SSHPacket VAR_1)\n            throws SSHException {\n        this.msg = VAR_0;\n\n        VAR_2.trace(\"Received packet {}\", VAR_0);\n\n        if (VAR_3.isInitialKex()) {\n            if (VAR_4.isSequenceNumberAtMax()) {\n                throw new TransportException(VAR_5.KEY_EXCHANGE_FAILED,\n                    \"Sequence number of decoder is about to wrap during initial key exchange\");\n            }\n            if (VAR_3.isStrictKex() && !isKexerPacket(VAR_0) && VAR_0 != VAR_6.DISCONNECT) {\n                throw new TransportException(VAR_5.KEY_EXCHANGE_FAILED,\n                    \"Unexpected packet type during initial strict key exchange\");\n            }\n        }\n\n        if (VAR_0.geq(50)) { /* COMMENT_0 */\n            VAR_7.handle(VAR_0, VAR_1);\n        } else if (isKexerPacket(VAR_0)) {\n            VAR_3.handle(VAR_0, VAR_1);\n        } else {\n            switch (VAR_0) {\n                case VAR_8:\n                    gotDisconnect(VAR_1);\n                    break;\n                case VAR_9:\n                    VAR_2.debug(\"Received SSH_MSG_IGNORE\");\n                    break;\n                case VAR_10:\n                    gotUnimplemented(VAR_1);\n                    break;\n                case VAR_11:\n                    gotDebug(VAR_1);\n                    break;\n                case VAR_12:\n                    gotServiceAccept();\n                    break;\n                case VAR_13:\n                    VAR_2.debug(\"Received SSH_MSG_EXT_INFO\");\n                    break;\n                case VAR_14:\n                    VAR_2.debug(\"Received USERAUTH_BANNER\");\n                    break;\n                default:\n                    sendUnimplemented();\n                    break;\n            }\n        }\n    }",
  "func_graph_path": "hierynomus/sshj/94fcc960e0fb198ddec0f7efc53f95ac627fe083/TransportImpl.java/vul/after/1.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -5,9 +5,20 @@\n \n         log.trace(\"Received packet {}\", msg);\n \n+        if (kexer.isInitialKex()) {\n+            if (decoder.isSequenceNumberAtMax()) {\n+                throw new TransportException(DisconnectReason.KEY_EXCHANGE_FAILED,\n+                    \"Sequence number of decoder is about to wrap during initial key exchange\");\n+            }\n+            if (kexer.isStrictKex() && !isKexerPacket(msg) && msg != Message.DISCONNECT) {\n+                throw new TransportException(DisconnectReason.KEY_EXCHANGE_FAILED,\n+                    \"Unexpected packet type during initial strict key exchange\");\n+            }\n+        }\n+\n         if (msg.geq(50)) { // not a transport layer packet\n             service.handle(msg, buf);\n-        } else if (msg.in(20, 21) || msg.in(30, 49)) { // kex packet\n+        } else if (isKexerPacket(msg)) {\n             kexer.handle(msg, buf);\n         } else {\n             switch (msg) {",
  "diff_line_info": {
    "deleted_lines": [
      "        } else if (msg.in(20, 21) || msg.in(30, 49)) { // kex packet"
    ],
    "added_lines": [
      "        if (kexer.isInitialKex()) {",
      "            if (decoder.isSequenceNumberAtMax()) {",
      "                throw new TransportException(DisconnectReason.KEY_EXCHANGE_FAILED,",
      "                    \"Sequence number of decoder is about to wrap during initial key exchange\");",
      "            }",
      "            if (kexer.isStrictKex() && !isKexerPacket(msg) && msg != Message.DISCONNECT) {",
      "                throw new TransportException(DisconnectReason.KEY_EXCHANGE_FAILED,",
      "                    \"Unexpected packet type during initial strict key exchange\");",
      "            }",
      "        }",
      "",
      "        } else if (isKexerPacket(msg)) {"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/hierynomus/sshj/pull/917",
  "description": {
    "pr_info": {
      "title": "Implement OpenSSH strict key exchange extension",
      "number": 917
    },
    "comment": [
      "Resolves #916 \r\n\r\nThe PR implements the algorithm described in section 1.9 of https://github.com/openssh/openssh-portable/blob/master/PROTOCOL and also follows the changes implemented in the commit https://github.com/openssh/openssh-portable/commit/1edb00c58f8a6875fad6a497aa2bacf37f9e6cd5.\r\n\r\nAll tests are successful. The integration tests work both against the current container and a custom built container with OpenSSH 9.6p1. When run against the latter, the log also show that the resets of sequence numbers are happening, and working correctly as otherwise ChaCha20-Poly1305 should break.\r\n\r\nThe jsch fork of mwiede also implemented config switches to disable or enforce the strict key exchange extension. But I'm not sure whether it makes sense to maintain such flags long term when OpenSSH itself doesn't have them: https://github.com/mwiede/jsch/pull/461\r\n\r\nThe Terrapin Scanner referenced in #916 is happy, but I think it only checks whether the additional pseudo-key exchange `kex-strict-c-v00@openssh.com` is being advertised by the client:\r\n\r\n```\r\n================================================================================\r\n==================================== Report ====================================\r\n================================================================================\r\n\r\nRemote Banner: SSH-2.0-SSHJ_0.18.0\r\n\r\nChaCha20-Poly1305 support:   true\r\nCBC-EtM support:             true\r\n\r\nStrict key exchange support: true\r\n\r\n==> The scanned peer supports Terrapin mitigations and can establish\r\n    connections that are NOT VULNERABLE to Terrapin. Glad to see this.\r\n    For strict key exchange to take effect, both peers must support it.\r\n\r\nNote: This tool is provided as is, with no warranty whatsoever. It determines\r\n      the vulnerability of a peer by checking the supported algorithms and\r\n      support for strict key exchange. It may falsely claim a peer to be\r\n      vulnerable if the vendor supports countermeasures other than strict key\r\n      exchange.\r\n\r\nFor more details visit our website available at https://terrapin-attack.com\r\n```\r\n\r\n",
      "Thanks for the PR. It would be great to have some unit and/or integration tests attached!",
      "Yes, I still need to find a good approach for them. 😄 \r\n\r\nThe integration tests cover most of the changes automatically, but the interesting bits only if the openssh version is new enough. I'll have a look whether there is a way to test things specifically, e.g. by assertions on the logs. Unit tests that are not too brittle might be harder.",
      "## [Codecov](https://app.codecov.io/gh/hierynomus/sshj/pull/917?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=Jeroen+van+Erp) Report\nAttention: `17 lines` in your changes are missing coverage. Please review.\n> Comparison is base [(`50c753d`)](https://app.codecov.io/gh/hierynomus/sshj/commit/50c753dc5801612bec33ff6fa205c3d8a17d854a?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=Jeroen+van+Erp) 68.85% compared to head [(`94fcc96`)](https://app.codecov.io/gh/hierynomus/sshj/pull/917?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=Jeroen+van+Erp) 68.77%.\n\n| [Files](https://app.codecov.io/gh/hierynomus/sshj/pull/917?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=Jeroen+van+Erp) | Patch % | Lines |\n|---|---|---|\n| [.../java/net/schmizz/sshj/transport/KeyExchanger.java](https://app.codecov.io/gh/hierynomus/sshj/pull/917?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=Jeroen+van+Erp#diff-c3JjL21haW4vamF2YS9uZXQvc2NobWl6ei9zc2hqL3RyYW5zcG9ydC9LZXlFeGNoYW5nZXIuamF2YQ==) | 47.05% | [6 Missing and 3 partials :warning: ](https://app.codecov.io/gh/hierynomus/sshj/pull/917?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=Jeroen+van+Erp) |\n| [...java/net/schmizz/sshj/transport/TransportImpl.java](https://app.codecov.io/gh/hierynomus/sshj/pull/917?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=Jeroen+van+Erp#diff-c3JjL21haW4vamF2YS9uZXQvc2NobWl6ei9zc2hqL3RyYW5zcG9ydC9UcmFuc3BvcnRJbXBsLmphdmE=) | 37.50% | [2 Missing and 3 partials :warning: ](https://app.codecov.io/gh/hierynomus/sshj/pull/917?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=Jeroen+van+Erp) |\n| [...ain/java/net/schmizz/sshj/transport/Converter.java](https://app.codecov.io/gh/hierynomus/sshj/pull/917?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=Jeroen+van+Erp#diff-c3JjL21haW4vamF2YS9uZXQvc2NobWl6ei9zc2hqL3RyYW5zcG9ydC9Db252ZXJ0ZXIuamF2YQ==) | 0.00% | [2 Missing and 1 partial :warning: ](https://app.codecov.io/gh/hierynomus/sshj/pull/917?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=Jeroen+van+Erp) |\n\n<details><summary>Additional details and impacted files</summary>\n\n\n```diff\n@@             Coverage Diff              @@\n##             master     #917      +/-   ##\n============================================\n- Coverage     68.85%   68.77%   -0.09%     \n- Complexity     1430     1438       +8     \n============================================\n  Files           208      208              \n  Lines          7574     7602      +28     \n  Branches        651      658       +7     \n============================================\n+ Hits           5215     5228      +13     \n- Misses         2012     2019       +7     \n- Partials        347      355       +8     \n```\n\n\n\n</details>\n\n[:umbrella: View full report in Codecov by Sentry](https://app.codecov.io/gh/hierynomus/sshj/pull/917?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=Jeroen+van+Erp).   \n:loudspeaker: Have feedback on the report? [Share it here](https://about.codecov.io/codecov-pr-comment-feedback/?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=Jeroen+van+Erp).\n",
      "I updated the alpine base image for the integration tests to 3.19.0 so that they now use OpenSSH 9.6. I also added an integration test that makes specific assertions on the logs.",
      "Great work! I'm going to merge it."
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 0.9\n\nThe patch addresses a security issue (Terrapin attack) by implementing strict key exchange controls, supported by the code changes and scanner report."
}