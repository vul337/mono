{
  "cve_id": "CVE-2019-15784",
  "cwe_ids": [
    "CWE-129"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "Haivision/srt",
  "commit_msg": "[core] Fixed sender list to reallocate on insert\nif required",
  "commit_hash": "47e589072c44350b0305c05066c224d1cbda992d",
  "git_url": "https://github.com/Haivision/srt/commit/47e589072c44350b0305c05066c224d1cbda992d",
  "file_path": "srtcore/queue.cpp",
  "func_name": "CSndUList::update",
  "func_before": "void CSndUList::update(const CUDT* u, EReschedule reschedule)\n{\n   CGuard listguard(m_ListLock);\n\n   CSNode* n = u->m_pSNode;\n\n   if (n->m_iHeapLoc >= 0)\n   {\n      if (!reschedule) // EReschedule to bool conversion, predicted.\n         return;\n\n      if (n->m_iHeapLoc == 0)\n      {\n         n->m_llTimeStamp_tk = 1;\n         m_pTimer->interrupt();\n         return;\n      }\n\n      remove_(u);\n   }\n\n   insert_(1, u);\n}",
  "abstract_func_before": "void CSndUList::update(const CUDT* VAR_0, EReschedule VAR_1)\n{\n   CGuard listguard(m_ListLock);\n\n   CSNode* VAR_2 = VAR_0->m_pSNode;\n\n   if (VAR_2->m_iHeapLoc >= 0)\n   {\n      if (!VAR_1) /* COMMENT_0 */\n         return;\n\n      if (VAR_2->m_iHeapLoc == 0)\n      {\n         VAR_2->m_llTimeStamp_tk = 1;\n         VAR_3->interrupt();\n         return;\n      }\n\n      remove_(VAR_0);\n   }\n\n   insert_(1, VAR_0);\n}",
  "func_graph_path_before": "Haivision/srt/47e589072c44350b0305c05066c224d1cbda992d/queue.cpp/vul/before/1.json",
  "func": "void CSndUList::update(const CUDT* u, EReschedule reschedule)\n{\n   CGuard listguard(m_ListLock);\n\n   CSNode* n = u->m_pSNode;\n\n   if (n->m_iHeapLoc >= 0)\n   {\n      if (!reschedule) // EReschedule to bool conversion, predicted.\n         return;\n\n      if (n->m_iHeapLoc == 0)\n      {\n         n->m_llTimeStamp_tk = 1;\n         m_pTimer->interrupt();\n         return;\n      }\n\n      remove_(u);\n      insert_norealloc(1, u);\n      return;\n   }\n\n   insert_(1, u);\n}",
  "abstract_func": "void CSndUList::update(const CUDT* VAR_0, EReschedule VAR_1)\n{\n   CGuard listguard(m_ListLock);\n\n   CSNode* VAR_2 = VAR_0->m_pSNode;\n\n   if (VAR_2->m_iHeapLoc >= 0)\n   {\n      if (!VAR_1) /* COMMENT_0 */\n         return;\n\n      if (VAR_2->m_iHeapLoc == 0)\n      {\n         VAR_2->m_llTimeStamp_tk = 1;\n         VAR_3->interrupt();\n         return;\n      }\n\n      remove_(VAR_0);\n      insert_norealloc(1, VAR_0);\n      return;\n   }\n\n   insert_(1, VAR_0);\n}",
  "func_graph_path": "Haivision/srt/47e589072c44350b0305c05066c224d1cbda992d/queue.cpp/vul/after/1.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -17,6 +17,8 @@\n       }\n \n       remove_(u);\n+      insert_norealloc(1, u);\n+      return;\n    }\n \n    insert_(1, u);",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "      insert_norealloc(1, u);",
      "      return;"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/Haivision/srt/pull/811",
  "description": {
    "pr_info": {
      "title": "Potential CSndUList array overflow",
      "number": 811
    },
    "comment": [
      "This is a rework of #724 (closes #724).\r\nThe default size of `CSndUList` was 4096 elements. The list is a heap of SRT sockets, that are to be processed in the sender's thread.\r\nIt is very unlikely to have mare than 4096 SRT connections, that is why checking if there is a place to insert a new socket is not required most of the time. However, if there is no place, then there will be an overflow and out-of-border operations.\r\nThis PR fixes this.\r\n\r\n- [x] `CSndUList::update(...)` increases list size if required.\r\n- [x] Reduced default size of the `CSndUList` from 4096 to 512.\r\n- [x] `CSndUList::remove_(...)` now uses `std::swap`\r\n- [x] `CSndUList::insert_norealloc_(...)` now uses `std::swap`",
      "This vulnerability is tracked in [CVE-2019-15784](https://nvd.nist.gov/vuln/detail/CVE-2019-15784)\r\n@ethouris: Do you plan to make a new release soon? Thanks"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Step1: Input Analysis**  \nThe commit message mentions fixing the sender list to reallocate on insert, which indicates a bug fix. The vulnerability description talks about preventing an overflow in `CSndUList`, which is a buffer overflow issue. The code diff shows modifications to `CSndUList::update` to handle insertions better.\n\n**Step2: Consistency Check**  \nThe commit message aligns with the code changes, which are about updating and inserting elements into the sender list without causing overflow.\n\n**Step3: Purpose Evaluation**  \nThe changes address a core logic bug, specifically a possible buffer overflow, which is a security issue.\n\n**Step4: Security Vulnerability Assessment**  \nThe patch fixes a buffer overflow vulnerability, which is a security risk as it can lead to out-of-border operations and potential exploitation.\n\n**Step5: Non-Security Classification**  \nSince it's a security fix, this step isn't applicable.\n\n**Step6: Confidence Scoring**  \nThe information is clear, and the changes directly address a known security vulnerability.\n\n**Final Output:**  \n**Final Classification:** Security Vulnerability Fix; **Confidence:** 1.0"
}