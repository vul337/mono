{
  "cve_id": "CVE-2020-7105",
  "cwe_ids": [
    "CWE-476"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "redis/hiredis",
  "commit_msg": "Safe allocation wrappers (#754)\n\nCreate allocation wrappers with a configurable OOM handler (defaults to abort()).\r\n\r\nSee #752, #747",
  "commit_hash": "669ac9d0c843f9ccf07d4969ff6bff75fafee01f",
  "git_url": "https://github.com/redis/hiredis/commit/669ac9d0c843f9ccf07d4969ff6bff75fafee01f",
  "file_path": "adapters/ae.h",
  "func_name": "redisAeAttach",
  "func_before": "static int redisAeAttach(aeEventLoop *loop, redisAsyncContext *ac) {\n    redisContext *c = &(ac->c);\n    redisAeEvents *e;\n\n    /* Nothing should be attached when something is already attached */\n    if (ac->ev.data != NULL)\n        return REDIS_ERR;\n\n    /* Create container for context and r/w events */\n    e = (redisAeEvents*)malloc(sizeof(*e));\n    e->context = ac;\n    e->loop = loop;\n    e->fd = c->fd;\n    e->reading = e->writing = 0;\n\n    /* Register functions to start/stop listening for events */\n    ac->ev.addRead = redisAeAddRead;\n    ac->ev.delRead = redisAeDelRead;\n    ac->ev.addWrite = redisAeAddWrite;\n    ac->ev.delWrite = redisAeDelWrite;\n    ac->ev.cleanup = redisAeCleanup;\n    ac->ev.data = e;\n\n    return REDIS_OK;\n}",
  "abstract_func_before": "static int redisAeAttach(aeEventLoop *VAR_0, redisAsyncContext *VAR_1) {\n    redisContext *VAR_2 = &(VAR_1->c);\n    redisAeEvents *VAR_3;\n\n    /* COMMENT_0 */\n    if (VAR_1->ev.data != NULL)\n        return VAR_4;\n\n    /* COMMENT_1 */\n    VAR_3 = (redisAeEvents*)malloc(sizeof(*VAR_3));\n    VAR_3->context = VAR_1;\n    VAR_3->loop = VAR_0;\n    VAR_3->fd = VAR_2->fd;\n    VAR_3->reading = VAR_3->writing = 0;\n\n    /* COMMENT_2 */\n    VAR_1->ev.addRead = VAR_5;\n    VAR_1->ev.delRead = VAR_6;\n    VAR_1->ev.addWrite = VAR_7;\n    VAR_1->ev.delWrite = VAR_8;\n    VAR_1->ev.cleanup = VAR_9;\n    VAR_1->ev.data = VAR_3;\n\n    return VAR_10;\n}",
  "func_graph_path_before": "redis/hiredis/669ac9d0c843f9ccf07d4969ff6bff75fafee01f/ae.h/vul/before/0.json",
  "func": "static int redisAeAttach(aeEventLoop *loop, redisAsyncContext *ac) {\n    redisContext *c = &(ac->c);\n    redisAeEvents *e;\n\n    /* Nothing should be attached when something is already attached */\n    if (ac->ev.data != NULL)\n        return REDIS_ERR;\n\n    /* Create container for context and r/w events */\n    e = (redisAeEvents*)hi_malloc(sizeof(*e));\n    e->context = ac;\n    e->loop = loop;\n    e->fd = c->fd;\n    e->reading = e->writing = 0;\n\n    /* Register functions to start/stop listening for events */\n    ac->ev.addRead = redisAeAddRead;\n    ac->ev.delRead = redisAeDelRead;\n    ac->ev.addWrite = redisAeAddWrite;\n    ac->ev.delWrite = redisAeDelWrite;\n    ac->ev.cleanup = redisAeCleanup;\n    ac->ev.data = e;\n\n    return REDIS_OK;\n}",
  "abstract_func": "static int redisAeAttach(aeEventLoop *VAR_0, redisAsyncContext *VAR_1) {\n    redisContext *VAR_2 = &(VAR_1->c);\n    redisAeEvents *VAR_3;\n\n    /* COMMENT_0 */\n    if (VAR_1->ev.data != NULL)\n        return VAR_4;\n\n    /* COMMENT_1 */\n    VAR_3 = (redisAeEvents*)hi_malloc(sizeof(*VAR_3));\n    VAR_3->context = VAR_1;\n    VAR_3->loop = VAR_0;\n    VAR_3->fd = VAR_2->fd;\n    VAR_3->reading = VAR_3->writing = 0;\n\n    /* COMMENT_2 */\n    VAR_1->ev.addRead = VAR_5;\n    VAR_1->ev.delRead = VAR_6;\n    VAR_1->ev.addWrite = VAR_7;\n    VAR_1->ev.delWrite = VAR_8;\n    VAR_1->ev.cleanup = VAR_9;\n    VAR_1->ev.data = VAR_3;\n\n    return VAR_10;\n}",
  "func_graph_path": "redis/hiredis/669ac9d0c843f9ccf07d4969ff6bff75fafee01f/ae.h/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -7,7 +7,7 @@\n         return REDIS_ERR;\n \n     /* Create container for context and r/w events */\n-    e = (redisAeEvents*)malloc(sizeof(*e));\n+    e = (redisAeEvents*)hi_malloc(sizeof(*e));\n     e->context = ac;\n     e->loop = loop;\n     e->fd = c->fd;",
  "diff_line_info": {
    "deleted_lines": [
      "    e = (redisAeEvents*)malloc(sizeof(*e));"
    ],
    "added_lines": [
      "    e = (redisAeEvents*)hi_malloc(sizeof(*e));"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/redis/hiredis/pull/754",
  "description": {
    "pr_info": {
      "title": "Safe allocation wrappers",
      "number": 754
    },
    "comment": [
      "Adds allocation wrappers that invokes a defined OOM handler.\r\n\r\nMy goal was the smallest surface area of changes possible.  Once we merge this it might be prudent to replace every `malloc`/`free` call with our wrappers.",
      "Just quoting the [last parts of the conversation in a merged PR](https://github.com/redis/hiredis/pull/752#issuecomment-577429138) from @michael-grunder \r\n\r\n>  @lamby I totally understand not wanting such a huge change just for a patch.\r\n\r\nThanks... and I think the changes in this PR would work for me. :+1: ",
      "Would be great to get some more eyes on this. :)",
      "> are we using asprintf and friends anywhere?\r\n\r\nNo, but `sds` has something similar (e.g. [sdscatfmt](https://github.com/redis/hiredis/blob/0501c623c91344e54cb2775a91509650960789b1/sds.c#L582)) although it appears that we're testing for NULL after every allocation/reallocation. \r\n\r\n",
      "Merged, thanks everyone!"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 0.9"
}