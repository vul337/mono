{
  "cve_id": "CVE-2023-23556",
  "cwe_ids": [
    "CWE-416",
    "CWE-787"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
  "cvss_is_v3": true,
  "repo_name": "facebook/hermes",
  "commit_msg": "Re-sync with internal repository (#908)\n\nFixes for CVE-2023-23556, and CVE-2023-24833.\r\n\r\nCo-authored-by: Facebook Community Bot <6422482+facebook-github-bot@users.noreply.github.com>",
  "commit_hash": "a6dcafe6ded8e61658b40f5699878cd19a481f80",
  "git_url": "https://github.com/facebook/hermes/commit/a6dcafe6ded8e61658b40f5699878cd19a481f80",
  "file_path": "lib/Support/BigIntSupport.cpp",
  "func_name": "toDouble",
  "func_before": "double toDouble(ImmutableBigIntRef src) {\n  if (src.numDigits == 0) {\n    return 0.0;\n  }\n\n  const uint32_t numBits = src.numDigits * BigIntDigitSizeInBits;\n  llvh::APInt tmp(numBits, llvh::makeArrayRef(src.digits, src.numDigits));\n  constexpr bool kSigned = true;\n  return tmp.roundToDouble(kSigned);\n}",
  "abstract_func_before": "double toDouble(ImmutableBigIntRef VAR_0) {\n  if (VAR_0.numDigits == 0) {\n    return 0.0;\n  }\n\n  const uint32_t VAR_1 = VAR_0.numDigits * VAR_2;\n  llvh::APInt VAR_3(VAR_1, llvh::makeArrayRef(VAR_0.digits, VAR_0.numDigits));\n  constexpr bool VAR_4 = true;\n  return VAR_3.roundToDouble(VAR_4);\n}",
  "func_graph_path_before": "facebook/hermes/a6dcafe6ded8e61658b40f5699878cd19a481f80/BigIntSupport.cpp/vul/before/0.json",
  "func": "double toDouble(ImmutableBigIntRef src) {\n  if (src.numDigits == 0) {\n    return 0.0;\n  }\n\n  const uint32_t numBits = src.numDigits * BigIntDigitSizeInBits;\n  llvh::APInt tmp(numBits, llvh::makeArrayRef(src.digits, src.numDigits));\n  constexpr bool kSigned = true;\n  double val = tmp.roundToDouble(kSigned);\n  // TODO(T142034196): APInt::roundToDouble doesn't implement proper conversion\n  // when the number has more than 2 digits; we need to implement this\n  // conversion.\n  return std::isnan(val) ? std::numeric_limits<double>::quiet_NaN() : val;\n}",
  "abstract_func": "double toDouble(ImmutableBigIntRef VAR_0) {\n  if (VAR_0.numDigits == 0) {\n    return 0.0;\n  }\n\n  const uint32_t VAR_1 = VAR_0.numDigits * VAR_2;\n  llvh::APInt VAR_3(VAR_1, llvh::makeArrayRef(VAR_0.digits, VAR_0.numDigits));\n  constexpr bool VAR_4 = true;\n  double VAR_5 = VAR_3.roundToDouble(VAR_4);\n  /* COMMENT_0 */\n  /* COMMENT_1 */\n  /* COMMENT_2 */\n  return std::isnan(VAR_5) ? std::numeric_limits<double>::quiet_NaN() : VAR_5;\n}",
  "func_graph_path": "facebook/hermes/a6dcafe6ded8e61658b40f5699878cd19a481f80/BigIntSupport.cpp/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -6,5 +6,9 @@\n   const uint32_t numBits = src.numDigits * BigIntDigitSizeInBits;\n   llvh::APInt tmp(numBits, llvh::makeArrayRef(src.digits, src.numDigits));\n   constexpr bool kSigned = true;\n-  return tmp.roundToDouble(kSigned);\n+  double val = tmp.roundToDouble(kSigned);\n+  // TODO(T142034196): APInt::roundToDouble doesn't implement proper conversion\n+  // when the number has more than 2 digits; we need to implement this\n+  // conversion.\n+  return std::isnan(val) ? std::numeric_limits<double>::quiet_NaN() : val;\n }",
  "diff_line_info": {
    "deleted_lines": [
      "  return tmp.roundToDouble(kSigned);"
    ],
    "added_lines": [
      "  double val = tmp.roundToDouble(kSigned);",
      "  // TODO(T142034196): APInt::roundToDouble doesn't implement proper conversion",
      "  // when the number has more than 2 digits; we need to implement this",
      "  // conversion.",
      "  return std::isnan(val) ? std::numeric_limits<double>::quiet_NaN() : val;"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/facebook/hermes/pull/908",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/facebook/hermes/pull/908: 403 Client Error: Forbidden for url: https://api.github.com/repos/facebook/hermes/pulls/908",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 0.9"
}