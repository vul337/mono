{
  "cve_id": "CVE-2018-20406",
  "cwe_ids": [
    "CWE-190"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "python/cpython",
  "commit_msg": "closes bpo-34656: Avoid relying on signed overflow in _pickle memos. (GH-9261)",
  "commit_hash": "a4ae828ee416a66d8c7bf5ee71d653c2cc6a26dd",
  "git_url": "https://github.com/python/cpython/commit/a4ae828ee416a66d8c7bf5ee71d653c2cc6a26dd",
  "file_path": "Modules/_pickle.c",
  "func_name": "_PyMemoTable_ResizeTable",
  "func_before": "static int\n_PyMemoTable_ResizeTable(PyMemoTable *self, Py_ssize_t min_size)\n{\n    PyMemoEntry *oldtable = NULL;\n    PyMemoEntry *oldentry, *newentry;\n    Py_ssize_t new_size = MT_MINSIZE;\n    Py_ssize_t to_process;\n\n    assert(min_size > 0);\n\n    /* Find the smallest valid table size >= min_size. */\n    while (new_size < min_size && new_size > 0)\n        new_size <<= 1;\n    if (new_size <= 0) {\n        PyErr_NoMemory();\n        return -1;\n    }\n    /* new_size needs to be a power of two. */\n    assert((new_size & (new_size - 1)) == 0);\n\n    /* Allocate new table. */\n    oldtable = self->mt_table;\n    self->mt_table = PyMem_NEW(PyMemoEntry, new_size);\n    if (self->mt_table == NULL) {\n        self->mt_table = oldtable;\n        PyErr_NoMemory();\n        return -1;\n    }\n    self->mt_allocated = new_size;\n    self->mt_mask = new_size - 1;\n    memset(self->mt_table, 0, sizeof(PyMemoEntry) * new_size);\n\n    /* Copy entries from the old table. */\n    to_process = self->mt_used;\n    for (oldentry = oldtable; to_process > 0; oldentry++) {\n        if (oldentry->me_key != NULL) {\n            to_process--;\n            /* newentry is a pointer to a chunk of the new\n               mt_table, so we're setting the key:value pair\n               in-place. */\n            newentry = _PyMemoTable_Lookup(self, oldentry->me_key);\n            newentry->me_key = oldentry->me_key;\n            newentry->me_value = oldentry->me_value;\n        }\n    }\n\n    /* Deallocate the old table. */\n    PyMem_FREE(oldtable);\n    return 0;\n}",
  "abstract_func_before": "static int\n_PyMemoTable_ResizeTable(PyMemoTable *VAR_0, Py_ssize_t VAR_1)\n{\n    PyMemoEntry *VAR_2 = NULL;\n    PyMemoEntry *VAR_3, *VAR_4;\n    Py_ssize_t VAR_5 = VAR_6;\n    Py_ssize_t VAR_7;\n\n    assert(VAR_1 > 0);\n\n    /* COMMENT_0 */\n    while (VAR_5 < VAR_1 && VAR_5 > 0)\n        VAR_5 <<= 1;\n    if (VAR_5 <= 0) {\n        PyErr_NoMemory();\n        return -1;\n    }\n    /* COMMENT_1 */\n    assert((VAR_5 & (VAR_5 - 1)) == 0);\n\n    /* COMMENT_2 */\n    VAR_2 = VAR_0->mt_table;\n    VAR_0->mt_table = PyMem_NEW(PyMemoEntry, VAR_5);\n    if (VAR_0->mt_table == NULL) {\n        VAR_0->mt_table = VAR_2;\n        PyErr_NoMemory();\n        return -1;\n    }\n    VAR_0->mt_allocated = VAR_5;\n    VAR_0->mt_mask = VAR_5 - 1;\n    memset(VAR_0->mt_table, 0, sizeof(PyMemoEntry) * VAR_5);\n\n    /* COMMENT_3 */\n    VAR_7 = VAR_0->mt_used;\n    for (VAR_3 = VAR_2; VAR_7 > 0; VAR_3++) {\n        if (VAR_3->me_key != NULL) {\n            VAR_7--;\n            /* COMMENT_4 */\n                                                            \n                           \n            VAR_4 = _PyMemoTable_Lookup(VAR_0, VAR_3->me_key);\n            VAR_4->me_key = VAR_3->me_key;\n            VAR_4->me_value = VAR_3->me_value;\n        }\n    }\n\n    /* COMMENT_7 */\n    PyMem_FREE(VAR_2);\n    return 0;\n}",
  "func_graph_path_before": "python/cpython/a4ae828ee416a66d8c7bf5ee71d653c2cc6a26dd/_pickle.c/vul/before/7.json",
  "func": "static int\n_PyMemoTable_ResizeTable(PyMemoTable *self, size_t min_size)\n{\n    PyMemoEntry *oldtable = NULL;\n    PyMemoEntry *oldentry, *newentry;\n    size_t new_size = MT_MINSIZE;\n    size_t to_process;\n\n    assert(min_size > 0);\n\n    if (min_size > PY_SSIZE_T_MAX) {\n        PyErr_NoMemory();\n        return -1;\n    }\n\n    /* Find the smallest valid table size >= min_size. */\n    while (new_size < min_size) {\n        new_size <<= 1;\n    }\n    /* new_size needs to be a power of two. */\n    assert((new_size & (new_size - 1)) == 0);\n\n    /* Allocate new table. */\n    oldtable = self->mt_table;\n    self->mt_table = PyMem_NEW(PyMemoEntry, new_size);\n    if (self->mt_table == NULL) {\n        self->mt_table = oldtable;\n        PyErr_NoMemory();\n        return -1;\n    }\n    self->mt_allocated = new_size;\n    self->mt_mask = new_size - 1;\n    memset(self->mt_table, 0, sizeof(PyMemoEntry) * new_size);\n\n    /* Copy entries from the old table. */\n    to_process = self->mt_used;\n    for (oldentry = oldtable; to_process > 0; oldentry++) {\n        if (oldentry->me_key != NULL) {\n            to_process--;\n            /* newentry is a pointer to a chunk of the new\n               mt_table, so we're setting the key:value pair\n               in-place. */\n            newentry = _PyMemoTable_Lookup(self, oldentry->me_key);\n            newentry->me_key = oldentry->me_key;\n            newentry->me_value = oldentry->me_value;\n        }\n    }\n\n    /* Deallocate the old table. */\n    PyMem_FREE(oldtable);\n    return 0;\n}",
  "abstract_func": "static int\n_PyMemoTable_ResizeTable(PyMemoTable *VAR_0, size_t VAR_1)\n{\n    PyMemoEntry *VAR_2 = NULL;\n    PyMemoEntry *VAR_3, *VAR_4;\n    size_t VAR_5 = VAR_6;\n    size_t VAR_7;\n\n    assert(VAR_1 > 0);\n\n    if (VAR_1 > VAR_8) {\n        PyErr_NoMemory();\n        return -1;\n    }\n\n    /* COMMENT_0 */\n    while (VAR_5 < VAR_1) {\n        VAR_5 <<= 1;\n    }\n    /* COMMENT_1 */\n    assert((VAR_5 & (VAR_5 - 1)) == 0);\n\n    /* COMMENT_2 */\n    VAR_2 = VAR_0->mt_table;\n    VAR_0->mt_table = PyMem_NEW(PyMemoEntry, VAR_5);\n    if (VAR_0->mt_table == NULL) {\n        VAR_0->mt_table = VAR_2;\n        PyErr_NoMemory();\n        return -1;\n    }\n    VAR_0->mt_allocated = VAR_5;\n    VAR_0->mt_mask = VAR_5 - 1;\n    memset(VAR_0->mt_table, 0, sizeof(PyMemoEntry) * VAR_5);\n\n    /* COMMENT_3 */\n    VAR_7 = VAR_0->mt_used;\n    for (VAR_3 = VAR_2; VAR_7 > 0; VAR_3++) {\n        if (VAR_3->me_key != NULL) {\n            VAR_7--;\n            /* COMMENT_4 */\n                                                            \n                           \n            VAR_4 = _PyMemoTable_Lookup(VAR_0, VAR_3->me_key);\n            VAR_4->me_key = VAR_3->me_key;\n            VAR_4->me_value = VAR_3->me_value;\n        }\n    }\n\n    /* COMMENT_7 */\n    PyMem_FREE(VAR_2);\n    return 0;\n}",
  "func_graph_path": "python/cpython/a4ae828ee416a66d8c7bf5ee71d653c2cc6a26dd/_pickle.c/vul/after/7.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,19 +1,21 @@\n static int\n-_PyMemoTable_ResizeTable(PyMemoTable *self, Py_ssize_t min_size)\n+_PyMemoTable_ResizeTable(PyMemoTable *self, size_t min_size)\n {\n     PyMemoEntry *oldtable = NULL;\n     PyMemoEntry *oldentry, *newentry;\n-    Py_ssize_t new_size = MT_MINSIZE;\n-    Py_ssize_t to_process;\n+    size_t new_size = MT_MINSIZE;\n+    size_t to_process;\n \n     assert(min_size > 0);\n \n-    /* Find the smallest valid table size >= min_size. */\n-    while (new_size < min_size && new_size > 0)\n-        new_size <<= 1;\n-    if (new_size <= 0) {\n+    if (min_size > PY_SSIZE_T_MAX) {\n         PyErr_NoMemory();\n         return -1;\n+    }\n+\n+    /* Find the smallest valid table size >= min_size. */\n+    while (new_size < min_size) {\n+        new_size <<= 1;\n     }\n     /* new_size needs to be a power of two. */\n     assert((new_size & (new_size - 1)) == 0);",
  "diff_line_info": {
    "deleted_lines": [
      "_PyMemoTable_ResizeTable(PyMemoTable *self, Py_ssize_t min_size)",
      "    Py_ssize_t new_size = MT_MINSIZE;",
      "    Py_ssize_t to_process;",
      "    /* Find the smallest valid table size >= min_size. */",
      "    while (new_size < min_size && new_size > 0)",
      "        new_size <<= 1;",
      "    if (new_size <= 0) {"
    ],
    "added_lines": [
      "_PyMemoTable_ResizeTable(PyMemoTable *self, size_t min_size)",
      "    size_t new_size = MT_MINSIZE;",
      "    size_t to_process;",
      "    if (min_size > PY_SSIZE_T_MAX) {",
      "    }",
      "",
      "    /* Find the smallest valid table size >= min_size. */",
      "    while (new_size < min_size) {",
      "        new_size <<= 1;"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/python/cpython/pull/9261",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/python/cpython/pull/9261: 403 Client Error: Forbidden for url: https://api.github.com/repos/python/cpython/pulls/9261",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.95"
}