{
  "cve_id": "CVE-2021-21429",
  "cwe_ids": [
    "CWE-552"
  ],
  "cvss_vector": "AV:L/AC:L/Au:N/C:P/I:N/A:N",
  "cvss_is_v3": false,
  "repo_name": "OpenAPITools/openapi-generator",
  "commit_msg": "use Files.createTempFile in maven plugin to avoid security issues",
  "commit_hash": "34002dc1d4b1f9e1c741cab32f9249b361ead6df",
  "git_url": "https://github.com/OpenAPITools/openapi-generator/commit/34002dc1d4b1f9e1c741cab32f9249b361ead6df",
  "file_path": "modules/openapi-generator-maven-plugin/src/main/java/org/openapitools/codegen/plugin/CodeGenMojo.java",
  "func_name": "calculateInputSpecHash",
  "func_before": "private String calculateInputSpecHash(File inputSpecFile) throws IOException {\n\n        URL inputSpecRemoteUrl = inputSpecRemoteUrl();\n\n        File inputSpecTempFile = inputSpecFile;\n\n        if (inputSpecRemoteUrl != null) {\n            inputSpecTempFile = File.createTempFile(\"openapi-spec\", \".tmp\");\n\n            URLConnection conn = inputSpecRemoteUrl.openConnection();\n            if (isNotEmpty(auth)) {\n                List<AuthorizationValue> authList = AuthParser.parse(auth);\n                for (AuthorizationValue a : authList) {\n                    conn.setRequestProperty(a.getKeyName(), a.getValue());\n                }\n            }\n            try (ReadableByteChannel readableByteChannel = Channels.newChannel(conn.getInputStream())) {\n                FileChannel fileChannel;\n                try (FileOutputStream fileOutputStream = new FileOutputStream(inputSpecTempFile)) {\n                    fileChannel = fileOutputStream.getChannel();\n                    fileChannel.transferFrom(readableByteChannel, 0, Long.MAX_VALUE);\n                }\n            }\n        }\n\n        ByteSource inputSpecByteSource =\n                inputSpecTempFile.exists()\n                        ? Files.asByteSource(inputSpecTempFile)\n                        : CharSource.wrap(ClasspathHelper.loadFileFromClasspath(inputSpecTempFile.toString().replaceAll(\"\\\\\\\\\",\"/\")))\n                        .asByteSource(StandardCharsets.UTF_8);\n\n        return inputSpecByteSource.hash(Hashing.sha256()).toString();\n    }",
  "abstract_func_before": "private String calculateInputSpecHash(File VAR_0) throws IOException {\n\n        URL VAR_1 = inputSpecRemoteUrl();\n\n        File VAR_2 = VAR_0;\n\n        if (VAR_1 != null) {\n            VAR_2 = VAR_3.createTempFile(\"openapi-spec\", \".tmp\");\n\n            URLConnection VAR_4 = VAR_1.openConnection();\n            if (isNotEmpty(VAR_5)) {\n                List<AuthorizationValue> VAR_6 = VAR_7.parse(VAR_5);\n                for (AuthorizationValue VAR_8 : VAR_6) {\n                    VAR_4.setRequestProperty(VAR_8.getKeyName(), VAR_8.getValue());\n                }\n            }\n            try (ReadableByteChannel VAR_9 = VAR_10.newChannel(VAR_4.getInputStream())) {\n                FileChannel VAR_11;\n                try (FileOutputStream VAR_12 = new FileOutputStream(VAR_2)) {\n                    VAR_11 = VAR_12.getChannel();\n                    VAR_11.transferFrom(VAR_9, 0, VAR_13.MAX_VALUE);\n                }\n            }\n        }\n\n        ByteSource VAR_14 =\n                VAR_2.exists()\n                        ? VAR_15.asByteSource(VAR_2)\n                        : VAR_16.wrap(VAR_17.loadFileFromClasspath(VAR_2.toString().replaceAll(\"\\\\\\\\\",\"/\")))\n                        .asByteSource(VAR_18.UTF_8);\n\n        return VAR_14.hash(VAR_19.sha256()).toString();\n    }",
  "func_graph_path_before": "OpenAPITools/openapi-generator/34002dc1d4b1f9e1c741cab32f9249b361ead6df/CodeGenMojo.java/vul/before/0.json",
  "func": "private String calculateInputSpecHash(File inputSpecFile) throws IOException {\n\n        URL inputSpecRemoteUrl = inputSpecRemoteUrl();\n\n        File inputSpecTempFile = inputSpecFile;\n\n        if (inputSpecRemoteUrl != null) {\n            inputSpecTempFile = java.nio.file.Files.createTempFile(\"openapi-spec\", \".tmp\").toFile();\n\n            URLConnection conn = inputSpecRemoteUrl.openConnection();\n            if (isNotEmpty(auth)) {\n                List<AuthorizationValue> authList = AuthParser.parse(auth);\n                for (AuthorizationValue a : authList) {\n                    conn.setRequestProperty(a.getKeyName(), a.getValue());\n                }\n            }\n            try (ReadableByteChannel readableByteChannel = Channels.newChannel(conn.getInputStream())) {\n                FileChannel fileChannel;\n                try (FileOutputStream fileOutputStream = new FileOutputStream(inputSpecTempFile)) {\n                    fileChannel = fileOutputStream.getChannel();\n                    fileChannel.transferFrom(readableByteChannel, 0, Long.MAX_VALUE);\n                }\n            }\n        }\n\n        ByteSource inputSpecByteSource =\n                inputSpecTempFile.exists()\n                        ? Files.asByteSource(inputSpecTempFile)\n                        : CharSource.wrap(ClasspathHelper.loadFileFromClasspath(inputSpecTempFile.toString().replaceAll(\"\\\\\\\\\",\"/\")))\n                        .asByteSource(StandardCharsets.UTF_8);\n\n        return inputSpecByteSource.hash(Hashing.sha256()).toString();\n    }",
  "abstract_func": "private String calculateInputSpecHash(File VAR_0) throws IOException {\n\n        URL VAR_1 = inputSpecRemoteUrl();\n\n        File VAR_2 = VAR_0;\n\n        if (VAR_1 != null) {\n            VAR_2 = VAR_3.nio.file.Files.createTempFile(\"openapi-spec\", \".tmp\").toFile();\n\n            URLConnection VAR_4 = VAR_1.openConnection();\n            if (isNotEmpty(VAR_5)) {\n                List<AuthorizationValue> VAR_6 = VAR_7.parse(VAR_5);\n                for (AuthorizationValue VAR_8 : VAR_6) {\n                    VAR_4.setRequestProperty(VAR_8.getKeyName(), VAR_8.getValue());\n                }\n            }\n            try (ReadableByteChannel VAR_9 = VAR_10.newChannel(VAR_4.getInputStream())) {\n                FileChannel VAR_11;\n                try (FileOutputStream VAR_12 = new FileOutputStream(VAR_2)) {\n                    VAR_11 = VAR_12.getChannel();\n                    VAR_11.transferFrom(VAR_9, 0, VAR_13.MAX_VALUE);\n                }\n            }\n        }\n\n        ByteSource VAR_14 =\n                VAR_2.exists()\n                        ? VAR_15.asByteSource(VAR_2)\n                        : VAR_16.wrap(VAR_17.loadFileFromClasspath(VAR_2.toString().replaceAll(\"\\\\\\\\\",\"/\")))\n                        .asByteSource(VAR_18.UTF_8);\n\n        return VAR_14.hash(VAR_19.sha256()).toString();\n    }",
  "func_graph_path": "OpenAPITools/openapi-generator/34002dc1d4b1f9e1c741cab32f9249b361ead6df/CodeGenMojo.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -5,7 +5,7 @@\n         File inputSpecTempFile = inputSpecFile;\n \n         if (inputSpecRemoteUrl != null) {\n-            inputSpecTempFile = File.createTempFile(\"openapi-spec\", \".tmp\");\n+            inputSpecTempFile = java.nio.file.Files.createTempFile(\"openapi-spec\", \".tmp\").toFile();\n \n             URLConnection conn = inputSpecRemoteUrl.openConnection();\n             if (isNotEmpty(auth)) {",
  "diff_line_info": {
    "deleted_lines": [
      "            inputSpecTempFile = File.createTempFile(\"openapi-spec\", \".tmp\");"
    ],
    "added_lines": [
      "            inputSpecTempFile = java.nio.file.Files.createTempFile(\"openapi-spec\", \".tmp\").toFile();"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/OpenAPITools/openapi-generator/pull/8795",
  "description": {
    "pr_info": {
      "title": "[maven plugin] fix security issues",
      "number": 8795
    },
    "comment": [
      "- Use Files.createTempFile instead\r\n\r\n\r\ncc @OpenAPITools/generator-core-team \r\n\r\n<!-- Please check the completed items below -->\r\n### PR checklist\r\n \r\n- [x] Read the [contribution guidelines](https://github.com/openapitools/openapi-generator/blob/master/CONTRIBUTING.md).\r\n- [x] Pull Request title clearly describes the work in the pull request and Pull Request description provides details about how to validate the work. Missing information here may result in delayed response from the community.\r\n- [x] Run the following to [build the project](https://github.com/OpenAPITools/openapi-generator#14---build-projects) and update samples:\r\n  ```\r\n  ./mvnw clean package \r\n  ./bin/generate-samples.sh\r\n  ./bin/utils/export_docs_generators.sh\r\n  ``` \r\n  Commit all changed files. \r\n  This is important, as CI jobs will verify _all_ generator outputs of your HEAD commit as it would merge with master. \r\n  These must match the expectations made by your contribution. \r\n  You may regenerate an individual generator by passing the relevant config(s) as an argument to the script, for example `./bin/generate-samples.sh bin/configs/java*`. \r\n  For Windows users, please run the script in [Git BASH](https://gitforwindows.org/).\r\n- [x] File the PR against the [correct branch](https://github.com/OpenAPITools/openapi-generator/wiki/Git-Branches): `master`, `5.1.x`, `6.0.x`\r\n- [x] If your PR is targeting a particular programming language, @mention the [technical committee](https://github.com/openapitools/openapi-generator/#62---openapi-generator-technical-committee) members, so they are more likely to review the pull request.\r\n"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 0.95\n\n**Step-by-Step Explanation:**\n1. **Input Analysis:** Commit message mentions avoiding security issues, indicating a potential fix.\n2. **Consistency Check:** Code changes replace an insecure method with a more secure alternative.\n3. **Purpose Evaluation:** Addressing temporary file creation security concerns.\n4. **Security Vulnerability Assessment:** Targets a known security vulnerability in file handling.\n\n**Final Output:** Security Vulnerability Fix; Confidence: 0.95"
}