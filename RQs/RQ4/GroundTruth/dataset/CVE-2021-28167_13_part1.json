{
  "cve_id": "CVE-2021-28167",
  "cwe_ids": [
    "CWE-909"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:P/A:N",
  "cvss_is_v3": false,
  "repo_name": "eclipse-openj9/openj9",
  "commit_msg": "Correctly load/initialize classes when using ConstantPool\n\n- do not load classes in the \"ifLoaded\" calls\n- never intitialize classes in the natives\n- do not update the constant pool when querying from the natives\n\nFixes: #12016\n\n[ci skip]\n\nSigned-off-by: Graham Chapman <graham_chapman@ca.ibm.com>",
  "commit_hash": "840f3af31a5b8d2d395d9367c826ed756e380fb9",
  "git_url": "https://github.com/eclipse-openj9/openj9/commit/840f3af31a5b8d2d395d9367c826ed756e380fb9",
  "file_path": "runtime/vm/resolvesupport.cpp",
  "func_name": "resolveStaticMethodRef",
  "func_before": "J9Method *   \nresolveStaticMethodRef(J9VMThread *vmStruct, J9ConstantPool *ramCP, UDATA cpIndex, UDATA resolveFlags)\n{\n\t/* Bit of magic here, the resulting method must be in vmStruct->floatTemp1 in the CLINIT case\n\t * as resolveHelper expects to find it there.\n\t */\n\tJ9RAMStaticMethodRef *ramStaticMethodRef = (J9RAMStaticMethodRef *)&vmStruct->floatTemp1;\n\tJ9Method *method;\n\n\tmethod = resolveStaticMethodRefInto(vmStruct, ramCP, cpIndex, resolveFlags, ramStaticMethodRef);\n\t\n\tif (method != NULL) {\n\t\t/* Check for <clinit> case. */\n\t\tif (((resolveFlags & J9_RESOLVE_FLAG_CHECK_CLINIT) == J9_RESOLVE_FLAG_CHECK_CLINIT)\n\t\t\t&& (J9_CLASS_FROM_METHOD(method)->initializeStatus == (UDATA)vmStruct)\n\t\t) {\n\t\t\treturn (J9Method *) -1;\n\t\t} else {\n\t\t\t((J9RAMStaticMethodRef *)&ramCP[cpIndex])->method = ramStaticMethodRef->method;\n\t\t}\n\t}\n\n\treturn method;\n}",
  "abstract_func_before": "J9Method *   \nresolveStaticMethodRef(J9VMThread *VAR_0, J9ConstantPool *VAR_1, UDATA VAR_2, UDATA VAR_3)\n{\n\t/* COMMENT_0 */\n                                              \n    \n\tJ9RAMStaticMethodRef *VAR_4 = (J9RAMStaticMethodRef *)&VAR_0->floatTemp1;\n\tJ9Method *VAR_5;\n\n\tVAR_5 = resolveStaticMethodRefInto(VAR_0, VAR_1, VAR_2, VAR_3, VAR_4);\n\t\n\tif (VAR_5 != NULL) {\n\t\t/* COMMENT_3 */\n\t\tif (((VAR_3 & VAR_6) == VAR_6)\n\t\t\t&& (J9_CLASS_FROM_METHOD(VAR_5)->initializeStatus == (UDATA)VAR_0)\n\t\t) {\n\t\t\treturn (J9Method *) -1;\n\t\t} else {\n\t\t\t((J9RAMStaticMethodRef *)&VAR_1[VAR_2])->method = VAR_4->method;\n\t\t}\n\t}\n\n\treturn VAR_5;\n}",
  "func_graph_path_before": "eclipse-openj9/openj9/840f3af31a5b8d2d395d9367c826ed756e380fb9/resolvesupport.cpp/vul/before/5.json",
  "func": "J9Method *   \nresolveStaticMethodRef(J9VMThread *vmStruct, J9ConstantPool *ramCP, UDATA cpIndex, UDATA resolveFlags)\n{\n\t/* Bit of magic here, the resulting method must be in vmStruct->floatTemp1 in the CLINIT case\n\t * as resolveHelper expects to find it there.\n\t */\n\tJ9RAMStaticMethodRef *ramStaticMethodRef = (J9RAMStaticMethodRef *)&vmStruct->floatTemp1;\n\tJ9Method *method;\n\n\tmethod = resolveStaticMethodRefInto(vmStruct, ramCP, cpIndex, resolveFlags, ramStaticMethodRef);\n\t\n\tif (method != NULL) {\n\t\t/* Check for <clinit> case. */\n\t\tif (((resolveFlags & J9_RESOLVE_FLAG_CHECK_CLINIT) == J9_RESOLVE_FLAG_CHECK_CLINIT)\n\t\t\t&& (J9_CLASS_FROM_METHOD(method)->initializeStatus == (UDATA)vmStruct)\n\t\t) {\n\t\t\treturn (J9Method *) -1;\n\t\t} else if (J9_ARE_NO_BITS_SET(resolveFlags, J9_RESOLVE_FLAG_NO_CP_UPDATE)) {\n\t\t\t((J9RAMStaticMethodRef *)&ramCP[cpIndex])->method = ramStaticMethodRef->method;\n\t\t}\n\t}\n\n\treturn method;\n}",
  "abstract_func": "J9Method *   \nresolveStaticMethodRef(J9VMThread *VAR_0, J9ConstantPool *VAR_1, UDATA VAR_2, UDATA VAR_3)\n{\n\t/* COMMENT_0 */\n                                              \n    \n\tJ9RAMStaticMethodRef *VAR_4 = (J9RAMStaticMethodRef *)&VAR_0->floatTemp1;\n\tJ9Method *VAR_5;\n\n\tVAR_5 = resolveStaticMethodRefInto(VAR_0, VAR_1, VAR_2, VAR_3, VAR_4);\n\t\n\tif (VAR_5 != NULL) {\n\t\t/* COMMENT_3 */\n\t\tif (((VAR_3 & VAR_6) == VAR_6)\n\t\t\t&& (J9_CLASS_FROM_METHOD(VAR_5)->initializeStatus == (UDATA)VAR_0)\n\t\t) {\n\t\t\treturn (J9Method *) -1;\n\t\t} else if (J9_ARE_NO_BITS_SET(VAR_3, VAR_7)) {\n\t\t\t((J9RAMStaticMethodRef *)&VAR_1[VAR_2])->method = VAR_4->method;\n\t\t}\n\t}\n\n\treturn VAR_5;\n}",
  "func_graph_path": "eclipse-openj9/openj9/840f3af31a5b8d2d395d9367c826ed756e380fb9/resolvesupport.cpp/vul/after/5.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -15,7 +15,7 @@\n \t\t\t&& (J9_CLASS_FROM_METHOD(method)->initializeStatus == (UDATA)vmStruct)\n \t\t) {\n \t\t\treturn (J9Method *) -1;\n-\t\t} else {\n+\t\t} else if (J9_ARE_NO_BITS_SET(resolveFlags, J9_RESOLVE_FLAG_NO_CP_UPDATE)) {\n \t\t\t((J9RAMStaticMethodRef *)&ramCP[cpIndex])->method = ramStaticMethodRef->method;\n \t\t}\n \t}",
  "diff_line_info": {
    "deleted_lines": [
      "\t\t} else {"
    ],
    "added_lines": [
      "\t\t} else if (J9_ARE_NO_BITS_SET(resolveFlags, J9_RESOLVE_FLAG_NO_CP_UPDATE)) {"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/eclipse-openj9/openj9/pull/12148",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/eclipse-openj9/openj9/pull/12148: 403 Client Error: Forbidden for url: https://api.github.com/repos/eclipse-openj9/openj9/pulls/12148",
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.85,
  "Bug Filter Response": "**Final Classification:** Defect Remediation & Feature Upgrades; **Confidence:** 0.85"
}