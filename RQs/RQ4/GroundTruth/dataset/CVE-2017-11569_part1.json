{
  "cve_id": "CVE-2017-11569",
  "cwe_ids": [
    "CWE-125"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "fontforge",
  "commit_msg": "parsettf.c: Fix out of bounds read condition on buffer\n\nCloses #3093",
  "commit_hash": "7bfec47910293bf149b8debe44c6f3f788506092",
  "git_url": "https://github.com/fontforge/fontforge/commit/7bfec47910293bf149b8debe44c6f3f788506092",
  "file_path": "fontforge/parsettf.c",
  "func_name": "readttfcopyrights",
  "func_before": "static void readttfcopyrights(FILE *ttf,struct ttfinfo *info) {\n    int i, cnt, tableoff;\n    int platform, specific, language, name, str_len, stroff;\n\n    if ( info->feat_start!=0 )\n\treadmacfeaturemap(ttf,info);\n    if ( info->copyright_start!=0 ) {\n\tfseek(ttf,info->copyright_start,SEEK_SET);\n\t/* format selector = */ getushort(ttf);\n\tcnt = getushort(ttf);\n\ttableoff = info->copyright_start+getushort(ttf);\n\tfor ( i=0; i<cnt; ++i ) {\n\t    platform = getushort(ttf);\n\t    specific = getushort(ttf);\n\t    language = getushort(ttf);\n\t    name = getushort(ttf);\n\t    str_len = getushort(ttf);\n\t    stroff = getushort(ttf);\n    \n\t    TTFAddLangStr(ttf,info,name,str_len,tableoff+stroff,\n\t\t    platform,specific,language);\n\t}\n    }\n\n    if ( info->copyright==NULL )\n\tinfo->copyright = FindLangEntry(info,ttf_copyright);\n    if ( info->familyname==NULL )\n\tinfo->familyname = FindLangEntry(info,ttf_family);\n    if ( info->fullname==NULL )\n\tinfo->fullname = FindLangEntry(info,ttf_fullname);\n    if ( info->version==NULL )\n\tinfo->version = FindLangEntry(info,ttf_version);\n    if ( info->fontname==NULL )\n\tinfo->fontname = FindLangEntry(info,ttf_postscriptname);\n\n    if ( info->fontname != NULL && *info->fontname=='\\0' ) {\n\tfree(info->fontname);\n\tinfo->fontname = NULL;\n    }\n    if ( info->familyname != NULL && *info->familyname=='\\0' ) {\n\tfree(info->familyname);\n\tinfo->familyname = NULL;\n    }\n    if ( info->fullname != NULL && *info->fullname=='\\0' ) {\n\tfree(info->fullname);\n\tinfo->fullname = NULL;\n    }\n\n    /* OpenType spec says the version string should begin with \"Version \" and */\n    /*  end with a space and have a number in between */\n    if ( info->version==NULL ) info->version = copy(\"1.0\");\n    else if ( strnmatch(info->version,\"Version \",8)==0 ) {\n\tchar *temp = copy(info->version+8);\n\tif ( temp[strlen(temp)-1]==' ' )\n\t    temp[strlen(temp)-1] = '\\0';\n\tfree(info->version);\n\tinfo->version = temp;\n    }\n    if ( info->fontname==NULL ) {\n\tif ( info->fullname!=NULL )\n\t    info->fontname = stripspaces(copy(info->fullname));\n\tif ( info->fontname==NULL && info->familyname!=NULL )\n\t    info->fontname = stripspaces(copy(info->familyname));\n\tif ( info->fontname!=NULL )\n\t    ValidatePostScriptFontName(info,info->fontname);\n    }\n\n    if ( info->features ) {\n\tMacFeat *mf;\n\tstruct macsetting *ms;\n\tfor ( mf=info->features; mf!=NULL; mf = mf->next ) {\n\t    mf->featname = reversemacnames(mf->featname);\n\t    for ( ms=mf->settings; ms!=NULL; ms=ms->next )\n\t\tms->setname = reversemacnames(ms->setname);\n\t}\n    }\n}",
  "abstract_func_before": "static void readttfcopyrights(FILE *VAR_0,struct ttfinfo *VAR_1) {\n    int VAR_2, VAR_3, VAR_4;\n    int VAR_5, VAR_6, VAR_7, VAR_8, VAR_9, VAR_10;\n\n    if ( VAR_1->feat_start!=0 )\n\treadmacfeaturemap(VAR_0,VAR_1);\n    if ( VAR_1->copyright_start!=0 ) {\n\tfseek(VAR_0,VAR_1->copyright_start,VAR_11);\n\t/* COMMENT_0 */ getushort(VAR_0);\n\tVAR_3 = getushort(VAR_0);\n\tVAR_4 = VAR_1->copyright_start+getushort(VAR_0);\n\tfor ( VAR_2=0; VAR_2<VAR_3; ++VAR_2 ) {\n\t    VAR_5 = getushort(VAR_0);\n\t    VAR_6 = getushort(VAR_0);\n\t    VAR_7 = getushort(VAR_0);\n\t    VAR_8 = getushort(VAR_0);\n\t    VAR_9 = getushort(VAR_0);\n\t    VAR_10 = getushort(VAR_0);\n    \n\t    TTFAddLangStr(VAR_0,VAR_1,VAR_8,VAR_9,VAR_4+VAR_10,\n\t\t    VAR_5,VAR_6,VAR_7);\n\t}\n    }\n\n    if ( VAR_1->copyright==NULL )\n\tVAR_1->copyright = FindLangEntry(VAR_1,VAR_12);\n    if ( VAR_1->familyname==NULL )\n\tVAR_1->familyname = FindLangEntry(VAR_1,VAR_13);\n    if ( VAR_1->fullname==NULL )\n\tVAR_1->fullname = FindLangEntry(VAR_1,VAR_14);\n    if ( VAR_1->version==NULL )\n\tVAR_1->version = FindLangEntry(VAR_1,VAR_15);\n    if ( VAR_1->fontname==NULL )\n\tVAR_1->fontname = FindLangEntry(VAR_1,VAR_16);\n\n    if ( VAR_1->fontname != NULL && *VAR_1->fontname=='\\0' ) {\n\tfree(VAR_1->fontname);\n\tVAR_1->fontname = NULL;\n    }\n    if ( VAR_1->familyname != NULL && *VAR_1->familyname=='\\0' ) {\n\tfree(VAR_1->familyname);\n\tVAR_1->familyname = NULL;\n    }\n    if ( VAR_1->fullname != NULL && *VAR_1->fullname=='\\0' ) {\n\tfree(VAR_1->fullname);\n\tVAR_1->fullname = NULL;\n    }\n\n    /* COMMENT_1 */\n    /* COMMENT_2 */\n    if ( VAR_1->version==NULL ) VAR_1->version = copy(\"1.0\");\n    else if ( strnmatch(VAR_1->version,\"Version \",8)==0 ) {\n\tchar *VAR_17 = copy(VAR_1->version+8);\n\tif ( VAR_17[strlen(VAR_17)-1]==' ' )\n\t    VAR_17[strlen(VAR_17)-1] = '\\0';\n\tfree(VAR_1->version);\n\tVAR_1->version = VAR_17;\n    }\n    if ( VAR_1->fontname==NULL ) {\n\tif ( VAR_1->fullname!=NULL )\n\t    VAR_1->fontname = stripspaces(copy(VAR_1->fullname));\n\tif ( VAR_1->fontname==NULL && VAR_1->familyname!=NULL )\n\t    VAR_1->fontname = stripspaces(copy(VAR_1->familyname));\n\tif ( VAR_1->fontname!=NULL )\n\t    ValidatePostScriptFontName(VAR_1,VAR_1->fontname);\n    }\n\n    if ( VAR_1->features ) {\n\tMacFeat *VAR_18;\n\tstruct macsetting *VAR_19;\n\tfor ( VAR_18=VAR_1->features; VAR_18!=NULL; VAR_18 = VAR_18->next ) {\n\t    VAR_18->featname = reversemacnames(VAR_18->featname);\n\t    for ( VAR_19=VAR_18->settings; VAR_19!=NULL; VAR_19=VAR_19->next )\n\t\tVAR_19->setname = reversemacnames(VAR_19->setname);\n\t}\n    }\n}",
  "func_graph_path_before": "fontforge/7bfec47910293bf149b8debe44c6f3f788506092/parsettf.c/vul/before/0.json",
  "func": "static void readttfcopyrights(FILE *ttf,struct ttfinfo *info) {\n    int i, cnt, tableoff;\n    int platform, specific, language, name, str_len, stroff;\n\n    if ( info->feat_start!=0 )\n\treadmacfeaturemap(ttf,info);\n    if ( info->copyright_start!=0 ) {\n\tfseek(ttf,info->copyright_start,SEEK_SET);\n\t/* format selector = */ getushort(ttf);\n\tcnt = getushort(ttf);\n\ttableoff = info->copyright_start+getushort(ttf);\n\tfor ( i=0; i<cnt; ++i ) {\n\t    platform = getushort(ttf);\n\t    specific = getushort(ttf);\n\t    language = getushort(ttf);\n\t    name = getushort(ttf);\n\t    str_len = getushort(ttf);\n\t    stroff = getushort(ttf);\n    \n\t    TTFAddLangStr(ttf,info,name,str_len,tableoff+stroff,\n\t\t    platform,specific,language);\n\t}\n    }\n\n    if ( info->copyright==NULL )\n\tinfo->copyright = FindLangEntry(info,ttf_copyright);\n    if ( info->familyname==NULL )\n\tinfo->familyname = FindLangEntry(info,ttf_family);\n    if ( info->fullname==NULL )\n\tinfo->fullname = FindLangEntry(info,ttf_fullname);\n    if ( info->version==NULL )\n\tinfo->version = FindLangEntry(info,ttf_version);\n    if ( info->fontname==NULL )\n\tinfo->fontname = FindLangEntry(info,ttf_postscriptname);\n\n    if ( info->fontname != NULL && *info->fontname=='\\0' ) {\n\tfree(info->fontname);\n\tinfo->fontname = NULL;\n    }\n    if ( info->familyname != NULL && *info->familyname=='\\0' ) {\n\tfree(info->familyname);\n\tinfo->familyname = NULL;\n    }\n    if ( info->fullname != NULL && *info->fullname=='\\0' ) {\n\tfree(info->fullname);\n\tinfo->fullname = NULL;\n    }\n\n    /* OpenType spec says the version string should begin with \"Version \" and */\n    /*  end with a space and have a number in between */\n    if ( info->version==NULL ) info->version = copy(\"1.0\");\n    else if ( strnmatch(info->version,\"Version \",8)==0 ) {\n\tchar *temp = copy(info->version+8);\n\tif ( temp[0] != '\\0' && temp[strlen(temp)-1]==' ' )\n\t    temp[strlen(temp)-1] = '\\0';\n\tfree(info->version);\n\tinfo->version = temp;\n    }\n    if ( info->fontname==NULL ) {\n\tif ( info->fullname!=NULL )\n\t    info->fontname = stripspaces(copy(info->fullname));\n\tif ( info->fontname==NULL && info->familyname!=NULL )\n\t    info->fontname = stripspaces(copy(info->familyname));\n\tif ( info->fontname!=NULL )\n\t    ValidatePostScriptFontName(info,info->fontname);\n    }\n\n    if ( info->features ) {\n\tMacFeat *mf;\n\tstruct macsetting *ms;\n\tfor ( mf=info->features; mf!=NULL; mf = mf->next ) {\n\t    mf->featname = reversemacnames(mf->featname);\n\t    for ( ms=mf->settings; ms!=NULL; ms=ms->next )\n\t\tms->setname = reversemacnames(ms->setname);\n\t}\n    }\n}",
  "abstract_func": "static void readttfcopyrights(FILE *VAR_0,struct ttfinfo *VAR_1) {\n    int VAR_2, VAR_3, VAR_4;\n    int VAR_5, VAR_6, VAR_7, VAR_8, VAR_9, VAR_10;\n\n    if ( VAR_1->feat_start!=0 )\n\treadmacfeaturemap(VAR_0,VAR_1);\n    if ( VAR_1->copyright_start!=0 ) {\n\tfseek(VAR_0,VAR_1->copyright_start,VAR_11);\n\t/* COMMENT_0 */ getushort(VAR_0);\n\tVAR_3 = getushort(VAR_0);\n\tVAR_4 = VAR_1->copyright_start+getushort(VAR_0);\n\tfor ( VAR_2=0; VAR_2<VAR_3; ++VAR_2 ) {\n\t    VAR_5 = getushort(VAR_0);\n\t    VAR_6 = getushort(VAR_0);\n\t    VAR_7 = getushort(VAR_0);\n\t    VAR_8 = getushort(VAR_0);\n\t    VAR_9 = getushort(VAR_0);\n\t    VAR_10 = getushort(VAR_0);\n    \n\t    TTFAddLangStr(VAR_0,VAR_1,VAR_8,VAR_9,VAR_4+VAR_10,\n\t\t    VAR_5,VAR_6,VAR_7);\n\t}\n    }\n\n    if ( VAR_1->copyright==NULL )\n\tVAR_1->copyright = FindLangEntry(VAR_1,VAR_12);\n    if ( VAR_1->familyname==NULL )\n\tVAR_1->familyname = FindLangEntry(VAR_1,VAR_13);\n    if ( VAR_1->fullname==NULL )\n\tVAR_1->fullname = FindLangEntry(VAR_1,VAR_14);\n    if ( VAR_1->version==NULL )\n\tVAR_1->version = FindLangEntry(VAR_1,VAR_15);\n    if ( VAR_1->fontname==NULL )\n\tVAR_1->fontname = FindLangEntry(VAR_1,VAR_16);\n\n    if ( VAR_1->fontname != NULL && *VAR_1->fontname=='\\0' ) {\n\tfree(VAR_1->fontname);\n\tVAR_1->fontname = NULL;\n    }\n    if ( VAR_1->familyname != NULL && *VAR_1->familyname=='\\0' ) {\n\tfree(VAR_1->familyname);\n\tVAR_1->familyname = NULL;\n    }\n    if ( VAR_1->fullname != NULL && *VAR_1->fullname=='\\0' ) {\n\tfree(VAR_1->fullname);\n\tVAR_1->fullname = NULL;\n    }\n\n    /* COMMENT_1 */\n    /* COMMENT_2 */\n    if ( VAR_1->version==NULL ) VAR_1->version = copy(\"1.0\");\n    else if ( strnmatch(VAR_1->version,\"Version \",8)==0 ) {\n\tchar *VAR_17 = copy(VAR_1->version+8);\n\tif ( VAR_17[0] != '\\0' && VAR_17[strlen(VAR_17)-1]==' ' )\n\t    VAR_17[strlen(VAR_17)-1] = '\\0';\n\tfree(VAR_1->version);\n\tVAR_1->version = VAR_17;\n    }\n    if ( VAR_1->fontname==NULL ) {\n\tif ( VAR_1->fullname!=NULL )\n\t    VAR_1->fontname = stripspaces(copy(VAR_1->fullname));\n\tif ( VAR_1->fontname==NULL && VAR_1->familyname!=NULL )\n\t    VAR_1->fontname = stripspaces(copy(VAR_1->familyname));\n\tif ( VAR_1->fontname!=NULL )\n\t    ValidatePostScriptFontName(VAR_1,VAR_1->fontname);\n    }\n\n    if ( VAR_1->features ) {\n\tMacFeat *VAR_18;\n\tstruct macsetting *VAR_19;\n\tfor ( VAR_18=VAR_1->features; VAR_18!=NULL; VAR_18 = VAR_18->next ) {\n\t    VAR_18->featname = reversemacnames(VAR_18->featname);\n\t    for ( VAR_19=VAR_18->settings; VAR_19!=NULL; VAR_19=VAR_19->next )\n\t\tVAR_19->setname = reversemacnames(VAR_19->setname);\n\t}\n    }\n}",
  "func_graph_path": "fontforge/7bfec47910293bf149b8debe44c6f3f788506092/parsettf.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -51,7 +51,7 @@\n     if ( info->version==NULL ) info->version = copy(\"1.0\");\n     else if ( strnmatch(info->version,\"Version \",8)==0 ) {\n \tchar *temp = copy(info->version+8);\n-\tif ( temp[strlen(temp)-1]==' ' )\n+\tif ( temp[0] != '\\0' && temp[strlen(temp)-1]==' ' )\n \t    temp[strlen(temp)-1] = '\\0';\n \tfree(info->version);\n \tinfo->version = temp;",
  "diff_line_info": {
    "deleted_lines": [
      "\tif ( temp[strlen(temp)-1]==' ' )"
    ],
    "added_lines": [
      "\tif ( temp[0] != '\\0' && temp[strlen(temp)-1]==' ' )"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/fontforge/fontforge/pull/3124",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/fontforge/fontforge/pull/3124: 403 Client Error: Forbidden for url: https://api.github.com/repos/fontforge/fontforge/pulls/3124",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 1.0\n\n**Step-by-Step Explanation:**\n\n1. **Commit Message Analysis:** The message directly refers to fixing an \"out of bounds read condition,\" a known security issue.\n2. **Vulnerability Description Context:** The issue is part of a broader security concern in FontForge, specifically addressing buffer overflow cases.\n3. **Code Change Details:** The patch adds a null check before accessing the end of a string, preventing potential buffer overflows.\n4. **Alignment Check:** The code change matches the commit message's intent to fix the security vulnerability.\n5. **Security Assessment:** The fix addresses an out-of-bounds read, a classic security flaw, thus classified as a security fix with high confidence.\n\nAll elements conclusively indicate a security vulnerability fix with no ambiguities."
}