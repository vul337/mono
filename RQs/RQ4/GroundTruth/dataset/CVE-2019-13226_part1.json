{
  "cve_id": "CVE-2019-13226",
  "cwe_ids": [
    "CWE-362",
    "CWE-59"
  ],
  "cvss_vector": "AV:L/AC:M/Au:N/C:C/I:C/A:C",
  "cvss_is_v3": false,
  "repo_name": "linuxdeepin/deepin-clone",
  "commit_msg": "fix: Do not use the \"/tmp\" directory\n\nhttps://github.com/linuxdeepin/deepin-clone/issues/16\nhttps://bugzilla.opensuse.org/show_bug.cgi?id=1130388",
  "commit_hash": "e079f3e2712b4f8c28e3e63e71ba1a1f90fce1ab",
  "git_url": "https://github.com/linuxdeepin/deepin-clone/commit/e079f3e2712b4f8c28e3e63e71ba1a1f90fce1ab",
  "file_path": "app/src/main.cpp",
  "func_name": "main",
  "func_before": "int main(int argc, char *argv[])\n{\n    QCoreApplication *a;\n\n    if (isTUIMode(argc, argv)) {\n        Global::isTUIMode = true;\n\n        a = new QCoreApplication(argc, argv);\n    }\n#ifdef ENABLE_GUI\n    else {\n        ConsoleAppender *consoleAppender = new ConsoleAppender;\n        consoleAppender->setFormat(logFormat);\n\n        RollingFileAppender *rollingFileAppender = new RollingFileAppender(\"/tmp/.deepin-clone.log\");\n        rollingFileAppender->setFormat(logFormat);\n        rollingFileAppender->setLogFilesLimit(5);\n        rollingFileAppender->setDatePattern(RollingFileAppender::DailyRollover);\n\n        logger->registerAppender(consoleAppender);\n        logger->registerAppender(rollingFileAppender);\n\n        if (qEnvironmentVariableIsSet(\"PKEXEC_UID\")) {\n            const quint32 pkexec_uid = qgetenv(\"PKEXEC_UID\").toUInt();\n            const QDir user_home(getpwuid(pkexec_uid)->pw_dir);\n\n            QFile pam_file(user_home.absoluteFilePath(\".pam_environment\"));\n\n            if (pam_file.open(QIODevice::ReadOnly)) {\n                while (!pam_file.atEnd()) {\n                    const QByteArray &line = pam_file.readLine().simplified();\n\n                    if (line.startsWith(\"QT_SCALE_FACTOR\")) {\n                        const QByteArrayList &list = line.split('=');\n\n                        if (list.count() == 2) {\n                            qputenv(\"QT_SCALE_FACTOR\", list.last());\n                            break;\n                        }\n                    }\n                }\n\n                pam_file.close();\n            }\n        }\n\n        DApplication::loadDXcbPlugin();\n        DApplication *app = new DApplication(argc, argv);\n\n        app->setAttribute(Qt::AA_UseHighDpiPixmaps);\n\n        if (!qApp->setSingleInstance(\"_deepin_clone_\")) {\n            qCritical() << \"As well as the process is running\";\n\n            return -1;\n        }\n\n        if (!app->loadTranslator()) {\n            dError(\"Load translator failed\");\n        }\n\n        app->setApplicationDisplayName(QObject::tr(\"Deepin Clone\"));\n        app->setApplicationDescription(QObject::tr(\"Deepin Clone is a backup and restore tool in deepin. \"\n                                                   \"It supports disk or partition clone, backup and restore, and other functions.\"));\n        app->setApplicationAcknowledgementPage(\"https://www.deepin.org/acknowledgments/deepin-clone/\");\n        app->setTheme(\"light\");\n        a = app;\n    }\n#endif\n\n    a->setApplicationName(\"deepin-clone\");\n#ifdef ENABLE_GUI\n    a->setApplicationVersion(DApplication::buildVersion(\"1.0.0.1\"));\n#else\n    a->setApplicationVersion(\"1.0.0.1\");\n#endif\n    a->setOrganizationName(\"deepin\");\n\n    CommandLineParser parser;\n\n    QFile arguments_file(\"/lib/live/mount/medium/.tmp/deepin-clone.arguments\");\n    QStringList arguments;\n\n    bool load_arg_from_file = arguments_file.exists() && !Global::isTUIMode && !a->arguments().contains(\"--tui\");\n\n    if (load_arg_from_file) {\n        arguments.append(a->arguments().first());\n\n        if (!arguments_file.open(QIODevice::ReadOnly)) {\n            qCritical() << \"Open \\\"/lib/live/mount/medium/.tmp/deepin-clone.arguments\\\" failed, error:\" << arguments_file.errorString();\n        } else {\n            while (!arguments_file.atEnd()) {\n                const QString &arg = QString::fromUtf8(arguments_file.readLine().trimmed());\n\n                if (!arg.isEmpty())\n                    arguments.append(arg);\n            }\n\n            arguments_file.close();\n            arguments_file.remove();\n        }\n\n        qDebug() << arguments;\n    } else {\n        arguments = a->arguments();\n    }\n\n    parser.process(arguments);\n\n    ConsoleAppender *consoleAppender = new ConsoleAppender;\n    consoleAppender->setFormat(logFormat);\n\n    RollingFileAppender *rollingFileAppender = new RollingFileAppender(parser.logFile());\n    rollingFileAppender->setFormat(logFormat);\n    rollingFileAppender->setLogFilesLimit(5);\n    rollingFileAppender->setDatePattern(RollingFileAppender::DailyRollover);\n\n    logger->registerCategoryAppender(\"deepin.ghost\", consoleAppender);\n    logger->registerCategoryAppender(\"deepin.ghost\", rollingFileAppender);\n\n    parser.parse();\n\n    if (load_arg_from_file) {\n        dCDebug(\"Load arguments from \\\"%s\\\"\", qPrintable(arguments_file.fileName()));\n    }\n\n    dCInfo(\"Application command line: %s\", qPrintable(arguments.join(' ')));\n\n    if (Global::debugLevel == 0) {\n        QLoggingCategory::setFilterRules(\"deepin.ghost.debug=false\");\n    }\n\n    if (Global::isTUIMode) {\n        if (!parser.target().isEmpty()) {\n            CloneJob *job = new CloneJob;\n\n            QObject::connect(job, &QThread::finished, a, &QCoreApplication::quit);\n\n            job->start(parser.source(), parser.target());\n        }\n    }\n#ifdef ENABLE_GUI\n    else {\n        if (!parser.isSetOverride())\n            Global::isOverride = true;\n\n        if (!parser.isSetDebug())\n            Global::debugLevel = 2;\n\n        MainWindow *window = new MainWindow;\n\n        window->setFixedSize(860, 660);\n        window->setStyleSheet(DThemeManager::instance()->getQssForWidget(\"main\", window));\n        window->setWindowIcon(QIcon::fromTheme(\"deepin-clone\"));\n        window->setWindowFlags(Qt::WindowCloseButtonHint | Qt::WindowMinimizeButtonHint | Qt::WindowSystemMenuHint);\n        window->titlebar()->setIcon(window->windowIcon());\n        window->titlebar()->setTitle(QString());\n#if DTK_VERSION > DTK_VERSION_CHECK(2, 0, 6, 0)\n        window->titlebar()->setBackgroundTransparent(true);\n#endif\n        window->show();\n\n        qApp->setProductIcon(window->windowIcon());\n\n        if (!parser.source().isEmpty()) {\n            window->startWithFile(parser.source(), parser.target());\n        }\n\n        QObject::connect(a, &QCoreApplication::aboutToQuit, window, &MainWindow::deleteLater);\n        QDesktopServices::setUrlHandler(\"https\", window, \"openUrl\");\n    }\n#endif\n\n    int exitCode = Global::isTUIMode ? a->exec() : qApp->exec();\n    QString log_backup_file = parser.logBackupFile();\n\n    if (log_backup_file.startsWith(\"serial://\")) {\n        log_backup_file = Helper::parseSerialUrl(log_backup_file);\n    }\n\n    if (log_backup_file.isEmpty()) {\n        return exitCode;\n    }\n\n    if (!QFile::copy(parser.logFile(), log_backup_file)) {\n        dCWarning(\"failed to copy log file to \\\"%s\\\"\", qPrintable(log_backup_file));\n    }\n\n    return exitCode;\n}",
  "abstract_func_before": "int main(int VAR_0, char *VAR_1[])\n{\n    QCoreApplication *VAR_2;\n\n    if (isTUIMode(VAR_0, VAR_1)) {\n        Global::isTUIMode = true;\n\n        VAR_2 = new QCoreApplication(VAR_0, VAR_1);\n    }\n#ifdef VAR_3\n    else {\n        VAR_4 *VAR_5 = new ConsoleAppender;\n        VAR_5->setFormat(VAR_6);\n\n        RollingFileAppender *VAR_7 = new RollingFileAppender(\"/tmp/.deepin-clone.log\");\n        VAR_7->setFormat(VAR_6);\n        VAR_7->setLogFilesLimit(5);\n        VAR_7->setDatePattern(RollingFileAppender::DailyRollover);\n\n        VAR_8->registerAppender(VAR_5);\n        VAR_8->registerAppender(VAR_7);\n\n        if (qEnvironmentVariableIsSet(\"PKEXEC_UID\")) {\n            const quint32 VAR_9 = qgetenv(\"PKEXEC_UID\").toUInt();\n            const QDir user_home(getpwuid(pkexec_uid)->pw_dir);\n\n            QFile VAR_10(VAR_11.absoluteFilePath(\".pam_environment\"));\n\n            if (VAR_10.open(QIODevice::ReadOnly)) {\n                while (!VAR_10.atEnd()) {\n                    const QByteArray &VAR_12 = VAR_10.readLine().simplified();\n\n                    if (VAR_12.startsWith(\"QT_SCALE_FACTOR\")) {\n                        const QByteArrayList &VAR_13 = VAR_12.split('=');\n\n                        if (VAR_13.count() == 2) {\n                            qputenv(\"QT_SCALE_FACTOR\", VAR_13.last());\n                            break;\n                        }\n                    }\n                }\n\n                VAR_10.close();\n            }\n        }\n\n        DApplication::loadDXcbPlugin();\n        DApplication *VAR_14 = new DApplication(VAR_0, VAR_1);\n\n        VAR_14->setAttribute(Qt::AA_UseHighDpiPixmaps);\n\n        if (!VAR_15->setSingleInstance(\"_deepin_clone_\")) {\n            qCritical() << \"As well as the process is running\";\n\n            return -1;\n        }\n\n        if (!VAR_14->loadTranslator()) {\n            dError(\"Load translator failed\");\n        }\n\n        VAR_14->setApplicationDisplayName(QObject::tr(\"Deepin Clone\"));\n        VAR_14->setApplicationDescription(QObject::tr(\"Deepin Clone is a backup and restore tool in deepin. \"\n                                                   \"It supports disk or partition clone, backup and restore, and other functions.\"));\n        VAR_14->setApplicationAcknowledgementPage(\"https://www.deepin.org/acknowledgments/deepin-clone/\");\n        VAR_14->setTheme(\"light\");\n        VAR_2 = VAR_14;\n    }\n#endif\n\n    VAR_2->setApplicationName(\"deepin-clone\");\n#ifdef VAR_3\n    VAR_2->setApplicationVersion(DApplication::buildVersion(\"1.0.0.1\"));\n#else\n    VAR_2->setApplicationVersion(\"1.0.0.1\");\n#endif\n    VAR_2->setOrganizationName(\"deepin\");\n\n    CommandLineParser VAR_16;\n\n    QFile VAR_17(\"/lib/live/mount/medium/.tmp/deepin-clone.arguments\");\n    QStringList VAR_18;\n\n    bool VAR_19 = VAR_17.exists() && !Global::isTUIMode && !VAR_2->arguments().contains(\"--tui\");\n\n    if (VAR_19) {\n        VAR_18.append(VAR_2->arguments().first());\n\n        if (!VAR_17.open(QIODevice::ReadOnly)) {\n            qCritical() << \"Open \\\"/lib/live/mount/medium/.tmp/deepin-clone.arguments\\\" failed, error:\" << VAR_17.errorString();\n        } else {\n            while (!VAR_17.atEnd()) {\n                const QString &VAR_20 = QString::fromUtf8(VAR_17.readLine().trimmed());\n\n                if (!VAR_20.isEmpty())\n                    VAR_18.append(VAR_20);\n            }\n\n            VAR_17.close();\n            VAR_17.remove();\n        }\n\n        qDebug() << VAR_18;\n    } else {\n        VAR_18 = VAR_2->arguments();\n    }\n\n    VAR_16.process(VAR_18);\n\n    ConsoleAppender *VAR_5 = new ConsoleAppender;\n    VAR_5->setFormat(VAR_6);\n\n    RollingFileAppender *VAR_7 = new RollingFileAppender(VAR_16.logFile());\n    VAR_7->setFormat(VAR_6);\n    VAR_7->setLogFilesLimit(5);\n    VAR_7->setDatePattern(RollingFileAppender::DailyRollover);\n\n    VAR_8->registerCategoryAppender(\"deepin.ghost\", VAR_5);\n    VAR_8->registerCategoryAppender(\"deepin.ghost\", VAR_7);\n\n    VAR_16.parse();\n\n    if (VAR_19) {\n        dCDebug(\"Load arguments from \\\"%s\\\"\", qPrintable(VAR_17.fileName()));\n    }\n\n    dCInfo(\"Application command line: %s\", qPrintable(VAR_18.join(' ')));\n\n    if (Global::debugLevel == 0) {\n        QLoggingCategory::setFilterRules(\"deepin.ghost.debug=false\");\n    }\n\n    if (Global::isTUIMode) {\n        if (!VAR_16.target().isEmpty()) {\n            CloneJob *VAR_21 = new CloneJob;\n\n            QObject::connect(VAR_21, &QThread::finished, VAR_2, &QCoreApplication::quit);\n\n            VAR_21->start(VAR_16.source(), VAR_16.target());\n        }\n    }\n#ifdef VAR_3\n    else {\n        if (!VAR_16.isSetOverride())\n            Global::isOverride = true;\n\n        if (!VAR_16.isSetDebug())\n            Global::debugLevel = 2;\n\n        MainWindow *VAR_22 = new MainWindow;\n\n        VAR_22->setFixedSize(860, 660);\n        VAR_22->setStyleSheet(DThemeManager::instance()->getQssForWidget(\"main\", VAR_22));\n        VAR_22->setWindowIcon(QIcon::fromTheme(\"deepin-clone\"));\n        VAR_22->setWindowFlags(Qt::WindowCloseButtonHint | Qt::WindowMinimizeButtonHint | Qt::WindowSystemMenuHint);\n        VAR_22->titlebar()->setIcon(VAR_22->windowIcon());\n        VAR_22->titlebar()->setTitle(QString());\n#if VAR_23 > DTK_VERSION_CHECK(2, 0, 6, 0)\n        VAR_22->titlebar()->setBackgroundTransparent(true);\n#endif\n        VAR_22->show();\n\n        VAR_15->setProductIcon(VAR_22->windowIcon());\n\n        if (!VAR_16.source().isEmpty()) {\n            VAR_22->startWithFile(VAR_16.source(), VAR_16.target());\n        }\n\n        QObject::connect(VAR_2, &QCoreApplication::aboutToQuit, VAR_22, &MainWindow::deleteLater);\n        QDesktopServices::setUrlHandler(\"https\", VAR_22, \"openUrl\");\n    }\n#endif\n\n    int VAR_24 = Global::isTUIMode ? VAR_2->exec() : VAR_15->exec();\n    QString VAR_25 = VAR_16.logBackupFile();\n\n    if (VAR_25.startsWith(\"serial://\")) {\n        VAR_25 = Helper::parseSerialUrl(VAR_25);\n    }\n\n    if (VAR_25.isEmpty()) {\n        return VAR_24;\n    }\n\n    if (!QFile::copy(VAR_16.logFile(), VAR_25)) {\n        dCWarning(\"failed to copy log file to \\\"%s\\\"\", qPrintable(VAR_25));\n    }\n\n    return VAR_24;\n}",
  "func_graph_path_before": "linuxdeepin/deepin-clone/e079f3e2712b4f8c28e3e63e71ba1a1f90fce1ab/main.cpp/vul/before/0.json",
  "func": "int main(int argc, char *argv[])\n{\n    QCoreApplication *a;\n\n    if (isTUIMode(argc, argv)) {\n        Global::isTUIMode = true;\n\n        a = new QCoreApplication(argc, argv);\n    }\n#ifdef ENABLE_GUI\n    else {\n        ConsoleAppender *consoleAppender = new ConsoleAppender;\n        consoleAppender->setFormat(logFormat);\n\n        const QString log_file(\"/var/log/deepin-clone.log\");\n\n        RollingFileAppender *rollingFileAppender = new RollingFileAppender(log_file);\n        rollingFileAppender->setFormat(logFormat);\n        rollingFileAppender->setLogFilesLimit(5);\n        rollingFileAppender->setDatePattern(RollingFileAppender::DailyRollover);\n\n        logger->registerAppender(rollingFileAppender);\n        logger->registerAppender(consoleAppender);\n\n        if (qEnvironmentVariableIsSet(\"PKEXEC_UID\")) {\n            const quint32 pkexec_uid = qgetenv(\"PKEXEC_UID\").toUInt();\n\n            DApplication::customQtThemeConfigPathByUserHome(getpwuid(pkexec_uid)->pw_dir);\n        }\n\n        DApplication::loadDXcbPlugin();\n        DApplication *app = new DApplication(argc, argv);\n\n        app->setAttribute(Qt::AA_UseHighDpiPixmaps);\n\n        if (!qApp->setSingleInstance(\"_deepin_clone_\")) {\n            qCritical() << \"As well as the process is running\";\n\n            return -1;\n        }\n\n        if (!app->loadTranslator()) {\n            dError(\"Load translator failed\");\n        }\n\n        app->setApplicationDisplayName(QObject::tr(\"Deepin Clone\"));\n        app->setApplicationDescription(QObject::tr(\"Deepin Clone is a backup and restore tool in deepin. \"\n                                                   \"It supports disk or partition clone, backup and restore, and other functions.\"));\n        app->setApplicationAcknowledgementPage(\"https://www.deepin.org/acknowledgments/deepin-clone/\");\n        app->setTheme(\"light\");\n        a = app;\n    }\n#endif\n\n    a->setApplicationName(\"deepin-clone\");\n#ifdef ENABLE_GUI\n    a->setApplicationVersion(DApplication::buildVersion(\"1.0.0.1\"));\n#else\n    a->setApplicationVersion(\"1.0.0.1\");\n#endif\n    a->setOrganizationName(\"deepin\");\n\n    CommandLineParser parser;\n\n    QFile arguments_file(\"/lib/live/mount/medium/.tmp/deepin-clone.arguments\");\n    QStringList arguments;\n\n    bool load_arg_from_file = arguments_file.exists() && !Global::isTUIMode && !a->arguments().contains(\"--tui\");\n\n    if (load_arg_from_file) {\n        arguments.append(a->arguments().first());\n\n        if (!arguments_file.open(QIODevice::ReadOnly)) {\n            qCritical() << \"Open \\\"/lib/live/mount/medium/.tmp/deepin-clone.arguments\\\" failed, error:\" << arguments_file.errorString();\n        } else {\n            while (!arguments_file.atEnd()) {\n                const QString &arg = QString::fromUtf8(arguments_file.readLine().trimmed());\n\n                if (!arg.isEmpty())\n                    arguments.append(arg);\n            }\n\n            arguments_file.close();\n            arguments_file.remove();\n        }\n\n        qDebug() << arguments;\n    } else {\n        arguments = a->arguments();\n    }\n\n    parser.process(arguments);\n\n    ConsoleAppender *consoleAppender = new ConsoleAppender;\n    consoleAppender->setFormat(logFormat);\n\n    RollingFileAppender *rollingFileAppender = new RollingFileAppender(parser.logFile());\n    rollingFileAppender->setFormat(logFormat);\n    rollingFileAppender->setLogFilesLimit(5);\n    rollingFileAppender->setDatePattern(RollingFileAppender::DailyRollover);\n\n    logger->registerCategoryAppender(\"deepin.ghost\", consoleAppender);\n    logger->registerCategoryAppender(\"deepin.ghost\", rollingFileAppender);\n\n    parser.parse();\n\n    if (load_arg_from_file) {\n        dCDebug(\"Load arguments from \\\"%s\\\"\", qPrintable(arguments_file.fileName()));\n    }\n\n    dCInfo(\"Application command line: %s\", qPrintable(arguments.join(' ')));\n\n    if (Global::debugLevel == 0) {\n        QLoggingCategory::setFilterRules(\"deepin.ghost.debug=false\");\n    }\n\n    if (Global::isTUIMode) {\n        if (!parser.target().isEmpty()) {\n            CloneJob *job = new CloneJob;\n\n            QObject::connect(job, &QThread::finished, a, &QCoreApplication::quit);\n\n            job->start(parser.source(), parser.target());\n        }\n    }\n#ifdef ENABLE_GUI\n    else {\n        if (!parser.isSetOverride())\n            Global::isOverride = true;\n\n        if (!parser.isSetDebug())\n            Global::debugLevel = 2;\n\n        MainWindow *window = new MainWindow;\n\n        window->setFixedSize(860, 660);\n        window->setStyleSheet(DThemeManager::instance()->getQssForWidget(\"main\", window));\n        window->setWindowIcon(QIcon::fromTheme(\"deepin-clone\"));\n        window->setWindowFlags(Qt::WindowCloseButtonHint | Qt::WindowMinimizeButtonHint | Qt::WindowSystemMenuHint);\n        window->titlebar()->setIcon(window->windowIcon());\n        window->titlebar()->setTitle(QString());\n#if DTK_VERSION > DTK_VERSION_CHECK(2, 0, 6, 0)\n        window->titlebar()->setBackgroundTransparent(true);\n#endif\n        window->show();\n\n        qApp->setProductIcon(window->windowIcon());\n\n        if (!parser.source().isEmpty()) {\n            window->startWithFile(parser.source(), parser.target());\n        }\n\n        QObject::connect(a, &QCoreApplication::aboutToQuit, window, &MainWindow::deleteLater);\n        QDesktopServices::setUrlHandler(\"https\", window, \"openUrl\");\n    }\n#endif\n\n    int exitCode = Global::isTUIMode ? a->exec() : qApp->exec();\n    QString log_backup_file = parser.logBackupFile();\n\n    if (log_backup_file.startsWith(\"serial://\")) {\n        log_backup_file = Helper::parseSerialUrl(log_backup_file);\n    }\n\n    if (log_backup_file.isEmpty()) {\n        return exitCode;\n    }\n\n    if (!QFile::copy(parser.logFile(), log_backup_file)) {\n        dCWarning(\"failed to copy log file to \\\"%s\\\"\", qPrintable(log_backup_file));\n    }\n\n    return exitCode;\n}",
  "abstract_func": "int main(int VAR_0, char *VAR_1[])\n{\n    QCoreApplication *VAR_2;\n\n    if (isTUIMode(VAR_0, VAR_1)) {\n        Global::isTUIMode = true;\n\n        VAR_2 = new QCoreApplication(VAR_0, VAR_1);\n    }\n#ifdef VAR_3\n    else {\n        VAR_4 *VAR_5 = new ConsoleAppender;\n        VAR_5->setFormat(VAR_6);\n\n        const QString VAR_7(\"/var/log/deepin-clone.log\");\n\n        RollingFileAppender *VAR_8 = new RollingFileAppender(VAR_7);\n        VAR_8->setFormat(VAR_6);\n        VAR_8->setLogFilesLimit(5);\n        VAR_8->setDatePattern(RollingFileAppender::DailyRollover);\n\n        VAR_9->registerAppender(VAR_8);\n        VAR_9->registerAppender(VAR_5);\n\n        if (qEnvironmentVariableIsSet(\"PKEXEC_UID\")) {\n            const quint32 VAR_10 = qgetenv(\"PKEXEC_UID\").toUInt();\n\n            DApplication::customQtThemeConfigPathByUserHome(getpwuid(VAR_10)->pw_dir);\n        }\n\n        DApplication::loadDXcbPlugin();\n        DApplication *VAR_11 = new DApplication(VAR_0, VAR_1);\n\n        VAR_11->setAttribute(Qt::AA_UseHighDpiPixmaps);\n\n        if (!VAR_12->setSingleInstance(\"_deepin_clone_\")) {\n            qCritical() << \"As well as the process is running\";\n\n            return -1;\n        }\n\n        if (!VAR_11->loadTranslator()) {\n            dError(\"Load translator failed\");\n        }\n\n        VAR_11->setApplicationDisplayName(QObject::tr(\"Deepin Clone\"));\n        VAR_11->setApplicationDescription(QObject::tr(\"Deepin Clone is a backup and restore tool in deepin. \"\n                                                   \"It supports disk or partition clone, backup and restore, and other functions.\"));\n        VAR_11->setApplicationAcknowledgementPage(\"https://www.deepin.org/acknowledgments/deepin-clone/\");\n        VAR_11->setTheme(\"light\");\n        VAR_2 = VAR_11;\n    }\n#endif\n\n    VAR_2->setApplicationName(\"deepin-clone\");\n#ifdef VAR_3\n    VAR_2->setApplicationVersion(DApplication::buildVersion(\"1.0.0.1\"));\n#else\n    VAR_2->setApplicationVersion(\"1.0.0.1\");\n#endif\n    VAR_2->setOrganizationName(\"deepin\");\n\n    CommandLineParser VAR_13;\n\n    QFile VAR_14(\"/lib/live/mount/medium/.tmp/deepin-clone.arguments\");\n    QStringList VAR_15;\n\n    bool VAR_16 = VAR_14.exists() && !Global::isTUIMode && !VAR_2->arguments().contains(\"--tui\");\n\n    if (VAR_16) {\n        VAR_15.append(VAR_2->arguments().first());\n\n        if (!VAR_14.open(QIODevice::ReadOnly)) {\n            qCritical() << \"Open \\\"/lib/live/mount/medium/.tmp/deepin-clone.arguments\\\" failed, error:\" << VAR_14.errorString();\n        } else {\n            while (!VAR_14.atEnd()) {\n                const QString &VAR_17 = QString::fromUtf8(VAR_14.readLine().trimmed());\n\n                if (!VAR_17.isEmpty())\n                    VAR_15.append(VAR_17);\n            }\n\n            VAR_14.close();\n            VAR_14.remove();\n        }\n\n        qDebug() << VAR_15;\n    } else {\n        VAR_15 = VAR_2->arguments();\n    }\n\n    VAR_13.process(VAR_15);\n\n    ConsoleAppender *VAR_5 = new ConsoleAppender;\n    VAR_5->setFormat(VAR_6);\n\n    RollingFileAppender *VAR_8 = new RollingFileAppender(VAR_13.logFile());\n    VAR_8->setFormat(VAR_6);\n    VAR_8->setLogFilesLimit(5);\n    VAR_8->setDatePattern(RollingFileAppender::DailyRollover);\n\n    VAR_9->registerCategoryAppender(\"deepin.ghost\", VAR_5);\n    VAR_9->registerCategoryAppender(\"deepin.ghost\", VAR_8);\n\n    VAR_13.parse();\n\n    if (VAR_16) {\n        dCDebug(\"Load arguments from \\\"%s\\\"\", qPrintable(VAR_14.fileName()));\n    }\n\n    dCInfo(\"Application command line: %s\", qPrintable(VAR_15.join(' ')));\n\n    if (Global::debugLevel == 0) {\n        QLoggingCategory::setFilterRules(\"deepin.ghost.debug=false\");\n    }\n\n    if (Global::isTUIMode) {\n        if (!VAR_13.target().isEmpty()) {\n            CloneJob *VAR_18 = new CloneJob;\n\n            QObject::connect(VAR_18, &QThread::finished, VAR_2, &QCoreApplication::quit);\n\n            VAR_18->start(VAR_13.source(), VAR_13.target());\n        }\n    }\n#ifdef VAR_3\n    else {\n        if (!VAR_13.isSetOverride())\n            Global::isOverride = true;\n\n        if (!VAR_13.isSetDebug())\n            Global::debugLevel = 2;\n\n        MainWindow *VAR_19 = new MainWindow;\n\n        VAR_19->setFixedSize(860, 660);\n        VAR_19->setStyleSheet(DThemeManager::instance()->getQssForWidget(\"main\", VAR_19));\n        VAR_19->setWindowIcon(QIcon::fromTheme(\"deepin-clone\"));\n        VAR_19->setWindowFlags(Qt::WindowCloseButtonHint | Qt::WindowMinimizeButtonHint | Qt::WindowSystemMenuHint);\n        VAR_19->titlebar()->setIcon(VAR_19->windowIcon());\n        VAR_19->titlebar()->setTitle(QString());\n#if VAR_20 > DTK_VERSION_CHECK(2, 0, 6, 0)\n        VAR_19->titlebar()->setBackgroundTransparent(true);\n#endif\n        VAR_19->show();\n\n        VAR_12->setProductIcon(VAR_19->windowIcon());\n\n        if (!VAR_13.source().isEmpty()) {\n            VAR_19->startWithFile(VAR_13.source(), VAR_13.target());\n        }\n\n        QObject::connect(VAR_2, &QCoreApplication::aboutToQuit, VAR_19, &MainWindow::deleteLater);\n        QDesktopServices::setUrlHandler(\"https\", VAR_19, \"openUrl\");\n    }\n#endif\n\n    int VAR_21 = Global::isTUIMode ? VAR_2->exec() : VAR_12->exec();\n    QString VAR_22 = VAR_13.logBackupFile();\n\n    if (VAR_22.startsWith(\"serial://\")) {\n        VAR_22 = Helper::parseSerialUrl(VAR_22);\n    }\n\n    if (VAR_22.isEmpty()) {\n        return VAR_21;\n    }\n\n    if (!QFile::copy(VAR_13.logFile(), VAR_22)) {\n        dCWarning(\"failed to copy log file to \\\"%s\\\"\", qPrintable(VAR_22));\n    }\n\n    return VAR_21;\n}",
  "func_graph_path": "linuxdeepin/deepin-clone/e079f3e2712b4f8c28e3e63e71ba1a1f90fce1ab/main.cpp/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -12,36 +12,20 @@\n         ConsoleAppender *consoleAppender = new ConsoleAppender;\n         consoleAppender->setFormat(logFormat);\n \n-        RollingFileAppender *rollingFileAppender = new RollingFileAppender(\"/tmp/.deepin-clone.log\");\n+        const QString log_file(\"/var/log/deepin-clone.log\");\n+\n+        RollingFileAppender *rollingFileAppender = new RollingFileAppender(log_file);\n         rollingFileAppender->setFormat(logFormat);\n         rollingFileAppender->setLogFilesLimit(5);\n         rollingFileAppender->setDatePattern(RollingFileAppender::DailyRollover);\n \n+        logger->registerAppender(rollingFileAppender);\n         logger->registerAppender(consoleAppender);\n-        logger->registerAppender(rollingFileAppender);\n \n         if (qEnvironmentVariableIsSet(\"PKEXEC_UID\")) {\n             const quint32 pkexec_uid = qgetenv(\"PKEXEC_UID\").toUInt();\n-            const QDir user_home(getpwuid(pkexec_uid)->pw_dir);\n \n-            QFile pam_file(user_home.absoluteFilePath(\".pam_environment\"));\n-\n-            if (pam_file.open(QIODevice::ReadOnly)) {\n-                while (!pam_file.atEnd()) {\n-                    const QByteArray &line = pam_file.readLine().simplified();\n-\n-                    if (line.startsWith(\"QT_SCALE_FACTOR\")) {\n-                        const QByteArrayList &list = line.split('=');\n-\n-                        if (list.count() == 2) {\n-                            qputenv(\"QT_SCALE_FACTOR\", list.last());\n-                            break;\n-                        }\n-                    }\n-                }\n-\n-                pam_file.close();\n-            }\n+            DApplication::customQtThemeConfigPathByUserHome(getpwuid(pkexec_uid)->pw_dir);\n         }\n \n         DApplication::loadDXcbPlugin();",
  "diff_line_info": {
    "deleted_lines": [
      "        RollingFileAppender *rollingFileAppender = new RollingFileAppender(\"/tmp/.deepin-clone.log\");",
      "        logger->registerAppender(rollingFileAppender);",
      "            const QDir user_home(getpwuid(pkexec_uid)->pw_dir);",
      "            QFile pam_file(user_home.absoluteFilePath(\".pam_environment\"));",
      "",
      "            if (pam_file.open(QIODevice::ReadOnly)) {",
      "                while (!pam_file.atEnd()) {",
      "                    const QByteArray &line = pam_file.readLine().simplified();",
      "",
      "                    if (line.startsWith(\"QT_SCALE_FACTOR\")) {",
      "                        const QByteArrayList &list = line.split('=');",
      "",
      "                        if (list.count() == 2) {",
      "                            qputenv(\"QT_SCALE_FACTOR\", list.last());",
      "                            break;",
      "                        }",
      "                    }",
      "                }",
      "",
      "                pam_file.close();",
      "            }"
    ],
    "added_lines": [
      "        const QString log_file(\"/var/log/deepin-clone.log\");",
      "",
      "        RollingFileAppender *rollingFileAppender = new RollingFileAppender(log_file);",
      "        logger->registerAppender(rollingFileAppender);",
      "            DApplication::customQtThemeConfigPathByUserHome(getpwuid(pkexec_uid)->pw_dir);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/linuxdeepin/deepin-clone/pull/18",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/linuxdeepin/deepin-clone/pull/18: 403 Client Error: Forbidden for url: https://api.github.com/repos/linuxdeepin/deepin-clone/pulls/18",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.9  \n\nExplanation: The patch addresses a security concern by changing the log file location to a more secure directory and modifying command handling, which enhances security. The changes are consistent with the commit message, indicating a security fix with high confidence.\n\n**Final Output:**  \n**Final Classification:** Security Vulnerability Fix; **Confidence:** 0.9"
}