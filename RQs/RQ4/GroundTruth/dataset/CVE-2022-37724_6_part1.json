{
  "cve_id": "CVE-2022-37724",
  "cwe_ids": [
    "CWE-79"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
  "cvss_is_v3": true,
  "repo_name": "wocommunity/wonder",
  "commit_msg": "Added WOAdaptor fix for all adaptor versions and incremented the version indicator. Changes are in accordance with my published article at https://xmit.xyz/security/webobjects-url-tomfoolery/",
  "commit_hash": "9e75cb6cadd4df2d225209f2ff9f82bfd7fbe432",
  "git_url": "https://github.com/wocommunity/wonder/commit/9e75cb6cadd4df2d225209f2ff9f82bfd7fbe432",
  "file_path": "Utilities/Adaptors/Apache2.4/mod_WebObjects.c",
  "func_name": "WebObjects_translate",
  "func_before": "int WebObjects_translate(request_rec *r) {\n    WebObjects_config *wc;\n    WOURLComponents url;\n    WOURLError urlerr;\n\n    // get the module configuration (this is the structure created by WebObjects_create_config())\n    wc = ap_get_module_config(r->server->module_config, &WebObjects_module);\n\n    WOLog(WO_DBG, \"<WebObjects Apache Module> new translate: %s\", r->uri);\n    if (strncmp(wc->WebObjects_alias, r->uri, strlen(wc->WebObjects_alias)) == 0 || (r->handler != NULL && strcasecmp(r->handler, WEBOBJECTS) == 0)) {\n#ifndef _MSC_VER // SWK changed url = WOURLComponents_Initializer; to memset(&url,0,sizeof(WOURLComponents));\n        url = WOURLComponents_Initializer;\n#else\n        memset(&url,0,sizeof(WOURLComponents));\n#endif\n        urlerr = WOParseApplicationName(&url, r->uri);\n        if (urlerr != WOURLOK && !((urlerr == WOURLInvalidApplicationName) && ac_authorizeAppListing(&url))) {\n            WOLog(WO_DBG, \"<WebObjects Apache Module> translate - DECLINED: %s\", r->uri);\n            return DECLINED;\n        }\n        if (!adaptorEnabled)\n        {\n            WOLog(WO_ERR, \"WebObjects_translate(): declining request due to initialization failure\");\n            return DECLINED;\n        }\n\n\n        /*\n         *  we'll take it - mark our handler...\n         */\n        r->handler = (char *)apr_pstrdup(r->pool, WEBOBJECTS);\n        r->filename = (char *)apr_pstrdup(r->pool, r->uri);\n\n        return OK;\n    }\n\n    WOLog(WO_DBG, \"<WebObjects Apache Module> translate - DECLINED: %s\", r->uri);\n\n    return DECLINED;\n}",
  "abstract_func_before": "int WebObjects_translate(request_rec *VAR_0) {\n    WebObjects_config *VAR_1;\n    WOURLComponents VAR_2;\n    WOURLError VAR_3;\n\n    /* COMMENT_0 */\n    VAR_1 = ap_get_module_config(VAR_0->server->module_config, &VAR_4);\n\n    WOLog(VAR_5, \"<WebObjects Apache Module> new translate: %s\", VAR_0->uri);\n    if (strncmp(VAR_1->WebObjects_alias, VAR_0->uri, strlen(VAR_1->WebObjects_alias)) == 0 || (VAR_0->handler != NULL && strcasecmp(VAR_0->handler, VAR_6) == 0)) {\n#ifndef VAR_7 /* COMMENT_1 */\n        VAR_2 = VAR_8;\n#else\n        memset(&VAR_2,0,sizeof(WOURLComponents));\n#endif\n        VAR_3 = WOParseApplicationName(&VAR_2, VAR_0->uri);\n        if (VAR_3 != VAR_9 && !((VAR_3 == VAR_10) && ac_authorizeAppListing(&VAR_2))) {\n            WOLog(VAR_5, \"<WebObjects Apache Module> translate - DECLINED: %s\", VAR_0->uri);\n            return VAR_11;\n        }\n        if (!VAR_12)\n        {\n            WOLog(VAR_13, \"WebObjects_translate(): declining request due to initialization failure\");\n            return VAR_11;\n        }\n\n\n        /* COMMENT_2 */\n                                               \n           \n        VAR_0->handler = (char *)apr_pstrdup(VAR_0->pool, VAR_6);\n        VAR_0->filename = (char *)apr_pstrdup(VAR_0->pool, VAR_0->uri);\n\n        return VAR_14;\n    }\n\n    WOLog(VAR_5, \"<WebObjects Apache Module> translate - DECLINED: %s\", VAR_0->uri);\n\n    return VAR_11;\n}",
  "func_graph_path_before": "wocommunity/wonder/9e75cb6cadd4df2d225209f2ff9f82bfd7fbe432/mod_WebObjects.c/vul/before/0.json",
  "func": "int WebObjects_translate(request_rec *r) {\n    WebObjects_config *wc;\n    WOURLComponents url;\n    WOURLError urlerr;\n    WOURLError charcheck;\n\n    // get the module configuration (this is the structure created by WebObjects_create_config())\n    wc = ap_get_module_config(r->server->module_config, &WebObjects_module);\n\n    WOLog(WO_DBG, \"<WebObjects Apache Module> new translate: %s\", r->uri);\n    if (strncmp(wc->WebObjects_alias, r->uri, strlen(wc->WebObjects_alias)) == 0 || (r->handler != NULL && strcasecmp(r->handler, WEBOBJECTS) == 0)) {\n#ifndef _MSC_VER // SWK changed url = WOURLComponents_Initializer; to memset(&url,0,sizeof(WOURLComponents));\n        url = WOURLComponents_Initializer;\n#else\n        memset(&url,0,sizeof(WOURLComponents));\n#endif\n\n        // Make sure the URL does not contain forbidden characters (0x0D or 0x0A).\n        charcheck = WOValidateInitialURL( r->uri );\n        if ( charcheck != WOURLOK ) {\n            WOLog(WO_DBG, \"WebObjects_translate(): declining request due to forbidden URL characters\");\n            return DECLINED;\n        }\n\n        urlerr = WOParseApplicationName(&url, r->uri);\n        if (urlerr != WOURLOK && !((urlerr == WOURLInvalidApplicationName) && ac_authorizeAppListing(&url))) {\n            WOLog(WO_DBG, \"<WebObjects Apache Module> translate - DECLINED: %s\", r->uri);\n            return DECLINED;\n        }\n        if (!adaptorEnabled)\n        {\n            WOLog(WO_ERR, \"WebObjects_translate(): declining request due to initialization failure\");\n            return DECLINED;\n        }\n\n\n        /*\n         *  we'll take it - mark our handler...\n         */\n        r->handler = (char *)apr_pstrdup(r->pool, WEBOBJECTS);\n        r->filename = (char *)apr_pstrdup(r->pool, r->uri);\n\n        return OK;\n    }\n\n    WOLog(WO_DBG, \"<WebObjects Apache Module> translate - DECLINED: %s\", r->uri);\n\n    return DECLINED;\n}",
  "abstract_func": "int WebObjects_translate(request_rec *VAR_0) {\n    WebObjects_config *VAR_1;\n    WOURLComponents VAR_2;\n    WOURLError VAR_3;\n    WOURLError VAR_4;\n\n    /* COMMENT_0 */\n    VAR_1 = ap_get_module_config(VAR_0->server->module_config, &VAR_5);\n\n    WOLog(VAR_6, \"<WebObjects Apache Module> new translate: %s\", VAR_0->uri);\n    if (strncmp(VAR_1->WebObjects_alias, VAR_0->uri, strlen(VAR_1->WebObjects_alias)) == 0 || (VAR_0->handler != NULL && strcasecmp(VAR_0->handler, VAR_7) == 0)) {\n#ifndef VAR_8 /* COMMENT_1 */\n        VAR_2 = VAR_9;\n#else\n        memset(&VAR_2,0,sizeof(WOURLComponents));\n#endif\n\n        /* COMMENT_2 */\n        VAR_4 = WOValidateInitialURL( VAR_0->uri );\n        if ( VAR_4 != VAR_10 ) {\n            WOLog(VAR_6, \"WebObjects_translate(): declining request due to forbidden URL characters\");\n            return VAR_11;\n        }\n\n        VAR_3 = WOParseApplicationName(&VAR_2, VAR_0->uri);\n        if (VAR_3 != VAR_10 && !((VAR_3 == VAR_12) && ac_authorizeAppListing(&VAR_2))) {\n            WOLog(VAR_6, \"<WebObjects Apache Module> translate - DECLINED: %s\", VAR_0->uri);\n            return VAR_11;\n        }\n        if (!VAR_13)\n        {\n            WOLog(VAR_14, \"WebObjects_translate(): declining request due to initialization failure\");\n            return VAR_11;\n        }\n\n\n        /* COMMENT_3 */\n                                               \n           \n        VAR_0->handler = (char *)apr_pstrdup(VAR_0->pool, VAR_7);\n        VAR_0->filename = (char *)apr_pstrdup(VAR_0->pool, VAR_0->uri);\n\n        return VAR_15;\n    }\n\n    WOLog(VAR_6, \"<WebObjects Apache Module> translate - DECLINED: %s\", VAR_0->uri);\n\n    return VAR_11;\n}",
  "func_graph_path": "wocommunity/wonder/9e75cb6cadd4df2d225209f2ff9f82bfd7fbe432/mod_WebObjects.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -2,6 +2,7 @@\n     WebObjects_config *wc;\n     WOURLComponents url;\n     WOURLError urlerr;\n+    WOURLError charcheck;\n \n     // get the module configuration (this is the structure created by WebObjects_create_config())\n     wc = ap_get_module_config(r->server->module_config, &WebObjects_module);\n@@ -13,6 +14,14 @@\n #else\n         memset(&url,0,sizeof(WOURLComponents));\n #endif\n+\n+        // Make sure the URL does not contain forbidden characters (0x0D or 0x0A).\n+        charcheck = WOValidateInitialURL( r->uri );\n+        if ( charcheck != WOURLOK ) {\n+            WOLog(WO_DBG, \"WebObjects_translate(): declining request due to forbidden URL characters\");\n+            return DECLINED;\n+        }\n+\n         urlerr = WOParseApplicationName(&url, r->uri);\n         if (urlerr != WOURLOK && !((urlerr == WOURLInvalidApplicationName) && ac_authorizeAppListing(&url))) {\n             WOLog(WO_DBG, \"<WebObjects Apache Module> translate - DECLINED: %s\", r->uri);",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "    WOURLError charcheck;",
      "",
      "        // Make sure the URL does not contain forbidden characters (0x0D or 0x0A).",
      "        charcheck = WOValidateInitialURL( r->uri );",
      "        if ( charcheck != WOURLOK ) {",
      "            WOLog(WO_DBG, \"WebObjects_translate(): declining request due to forbidden URL characters\");",
      "            return DECLINED;",
      "        }",
      ""
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/wocommunity/wonder/pull/992",
  "description": {
    "pr_info": {
      "title": "WO Adaptor URL Sanitization Fixes",
      "number": 992
    },
    "comment": [
      "Added fix-ups to the `Utilities/Adaptors` subfolders specifically to address a vulnerability in parsing, whereby an adversary can directly inject their own headers and content into the web requests going to the application (WO) servers behind the adaptor.\r\n\r\nThe new code returns a `404` on any encounter of a `0x0D` (carriage-return) or a `0x0A` (line-feed) character in the adaptor `translate` functions, and the defined forbidden character set is written in such a way as to be expandable later as necessary. This behavior of returning a `404` error mimics Apache's mitigation of the use of `%2f` in request URLs.\r\n\r\n**IMPORTANTLY**: This URL cleanliness will not affect content within query strings usually, since those characters are not typically expanded by webserver software before reaching the adaptor interface.\r\n\r\nTested and operating in an active production scenario, filtering arbitrary HTTP header injection or URL-based reflection but maintaining normal operation as expected. The most recent commit addresses enabling the protection by default but provides the option to regress to the previous behavior in situations and deployments where it may be considered safe or necessary.\r\n\r\nFor more information about the problem being fixed, I will post a separate link to my blog for interested users.",
      "As stated, [here is the link to my article](https://xmit.xyz/security/webobjects-url-tomfoolery/) about the WebObjects adaptor vulnerability present in Project WONDER. If the link is inappropriate, please feel free to remove it or request such.\r\n\r\nThank you.",
      "Hi Zachary, somehow we failed to give this the proper attention when you first posted it. Reviewing your detailed article now.",
      "Reviewed the patch, and I approve merging it. I want to wait for people in other timezones to have a chance to chime in, though. Until then, we confirmed this to be mitigated by the following global apache config:\r\n\r\n```\r\nRewriteEngine On\r\nRewriteOptions InheritDown\r\nRewriteRule ^.*\\x0d\\x0a - [F,L,NC]\r\n```"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 1.0\n\nStep-by-step explanation:\n\n1. **Input Analysis:** The commit message refers to an article on security and mentions a WOAdaptor fix, indicating a security context. The vulnerability description details a specific exploit involving HTTP header injection, confirming a security issue. The code diff introduces checks for forbidden characters (0x0D, 0x0A), which are common in injection attacks.\n\n2. **Consistency Check:** All components—commit message, vulnerability description, and code diff—align in addressing the same security concern. No inconsistencies found.\n\n3. **Purpose Evaluation:** The code changes modify core logic by adding validation checks to prevent injection attacks, directly addressing a security flaw.\n\n4. **Security Vulnerability Assessment:** The patch fixes an exploit by filtering invalid URLs, preventing injection attacks. This is an externally exploitable weakness, classified as a security fix.\n\n5. **Confidence Scoring:** High confidence (1.0) as all information clearly points to a security fix with no ambiguities."
}