{
  "cve_id": "CVE-2022-34612",
  "cwe_ids": [
    "CWE-190"
  ],
  "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H",
  "cvss_is_v3": true,
  "repo_name": "rizinorg/rizin",
  "commit_msg": "Fix the crash caused by get_long_object()",
  "commit_hash": "652d01e0c6e5d7ce17224ce3ceb10be42a48a84c",
  "git_url": "https://github.com/rizinorg/rizin/commit/652d01e0c6e5d7ce17224ce3ceb10be42a48a84c",
  "file_path": "librz/bin/format/pyc/marshal.c",
  "func_name": "get_long_object",
  "func_before": "static pyc_object *get_long_object(RzBuffer *buffer) {\n\tpyc_object *ret = NULL;\n\tbool error = false;\n\tbool neg = false;\n\tut32 tmp = 0;\n\tsize_t size;\n\tsize_t i, j = 0, left = 0;\n\tut32 n;\n\tchar *hexstr;\n\tchar digist2hex[] = \"0123456789abcdef\";\n\n\tst32 ndigits = get_st32(buffer, &error);\n\tif (error) {\n\t\treturn NULL;\n\t}\n\tret = RZ_NEW0(pyc_object);\n\tif (!ret) {\n\t\treturn NULL;\n\t}\n\tret->type = TYPE_LONG;\n\tif (ndigits < 0) {\n\t\tndigits = -ndigits;\n\t\tneg = true;\n\t}\n\tif (ndigits == 0) {\n\t\tret->data = strdup(\"0x0\");\n\t} else {\n\t\tsize = ndigits * 15;\n\t\tsize = (size - 1) / 4 + 1;\n\t\tsize += 4 + (neg ? 1 : 0);\n\t\thexstr = malloc(size);\n\t\tif (!hexstr) {\n\t\t\tfree(ret);\n\t\t\treturn NULL;\n\t\t}\n\t\tmemset(hexstr, 0x20, size);\n\t\tj = size - 1;\n\t\thexstr[j] = 0;\n\t\tfor (i = 0; i < ndigits; i++) {\n\t\t\tn = get_ut16(buffer, &error);\n\t\t\ttmp |= n << left;\n\t\t\tleft += 15;\n\n\t\t\twhile (left >= 4) {\n\t\t\t\thexstr[--j] = digist2hex[tmp & 0xf];\n\t\t\t\ttmp >>= 4;\n\t\t\t\tleft -= 4;\n\t\t\t}\n\t\t}\n\n\t\tif (tmp) {\n\t\t\thexstr[--j] = digist2hex[tmp & 0xf];\n\t\t}\n\n\t\thexstr[--j] = 'x';\n\t\thexstr[--j] = '0';\n\t\tif (neg) {\n\t\t\thexstr[--j] = '-';\n\t\t}\n\n\t\trz_str_trim(hexstr);\n\t\tret->data = hexstr;\n\t}\n\treturn ret;\n}",
  "abstract_func_before": "static pyc_object *get_long_object(RzBuffer *VAR_0) {\n\tpyc_object *VAR_1 = NULL;\n\tbool VAR_2 = false;\n\tbool VAR_3 = false;\n\tut32 VAR_4 = 0;\n\tsize_t VAR_5;\n\tsize_t VAR_6, VAR_7 = 0, VAR_8 = 0;\n\tut32 VAR_9;\n\tchar *VAR_10;\n\tchar VAR_11[] = \"0123456789abcdef\";\n\n\tst32 VAR_12 = get_st32(VAR_0, &VAR_2);\n\tif (VAR_2) {\n\t\treturn NULL;\n\t}\n\tVAR_1 = RZ_NEW0(pyc_object);\n\tif (!VAR_1) {\n\t\treturn NULL;\n\t}\n\tVAR_1->type = VAR_13;\n\tif (VAR_12 < 0) {\n\t\tVAR_12 = -VAR_12;\n\t\tVAR_3 = true;\n\t}\n\tif (VAR_12 == 0) {\n\t\tVAR_1->data = strdup(\"0x0\");\n\t} else {\n\t\tVAR_5 = VAR_12 * 15;\n\t\tVAR_5 = (VAR_5 - 1) / 4 + 1;\n\t\tVAR_5 += 4 + (VAR_3 ? 1 : 0);\n\t\tVAR_10 = malloc(VAR_5);\n\t\tif (!VAR_10) {\n\t\t\tfree(VAR_1);\n\t\t\treturn NULL;\n\t\t}\n\t\tmemset(VAR_10, 0x20, VAR_5);\n\t\tVAR_7 = VAR_5 - 1;\n\t\tVAR_10[VAR_7] = 0;\n\t\tfor (VAR_6 = 0; VAR_6 < VAR_12; VAR_6++) {\n\t\t\tVAR_9 = get_ut16(VAR_0, &VAR_2);\n\t\t\tVAR_4 |= VAR_9 << VAR_8;\n\t\t\tVAR_8 += 15;\n\n\t\t\twhile (VAR_8 >= 4) {\n\t\t\t\tVAR_10[--VAR_7] = VAR_11[VAR_4 & 0xf];\n\t\t\t\tVAR_4 >>= 4;\n\t\t\t\tVAR_8 -= 4;\n\t\t\t}\n\t\t}\n\n\t\tif (VAR_4) {\n\t\t\tVAR_10[--VAR_7] = VAR_11[VAR_4 & 0xf];\n\t\t}\n\n\t\tVAR_10[--VAR_7] = 'x';\n\t\tVAR_10[--VAR_7] = '0';\n\t\tif (VAR_3) {\n\t\t\tVAR_10[--VAR_7] = '-';\n\t\t}\n\n\t\trz_str_trim(VAR_10);\n\t\tVAR_1->data = VAR_10;\n\t}\n\treturn VAR_1;\n}",
  "func_graph_path_before": "rizinorg/rizin/652d01e0c6e5d7ce17224ce3ceb10be42a48a84c/marshal.c/vul/before/0.json",
  "func": "static pyc_object *get_long_object(RzBuffer *buffer) {\n\tpyc_object *ret = NULL;\n\tbool error = false;\n\tbool neg = false;\n\tut32 tmp = 0;\n\tsize_t size;\n\tsize_t i, j = 0, left = 0;\n\tut32 n;\n\tchar *hexstr;\n\tchar digist2hex[] = \"0123456789abcdef\";\n\n\tst32 ndigits = get_st32(buffer, &error);\n\tif (error) {\n\t\treturn NULL;\n\t}\n\tret = RZ_NEW0(pyc_object);\n\tif (!ret) {\n\t\treturn NULL;\n\t}\n\tret->type = TYPE_LONG;\n\tif (ndigits < 0) {\n\t\tndigits = -ndigits;\n\t\tneg = true;\n\t}\n\tif (ndigits == 0) {\n\t\tret->data = strdup(\"0x0\");\n\t} else {\n\t\t// the explicit cast is safe since ndigits is positive\n\t\tsize = (size_t)ndigits * 15;\n\t\tsize = (size - 1) / 4 + 1;\n\t\tsize += 4 + (neg ? 1 : 0);\n\t\thexstr = malloc(size);\n\t\tif (!hexstr) {\n\t\t\tfree(ret);\n\t\t\treturn NULL;\n\t\t}\n\t\tmemset(hexstr, 0x20, size);\n\t\tj = size - 1;\n\t\thexstr[j] = 0;\n\t\tfor (i = 0; i < ndigits; i++) {\n\t\t\tn = get_ut16(buffer, &error);\n\t\t\ttmp |= n << left;\n\t\t\tleft += 15;\n\n\t\t\twhile (left >= 4) {\n\t\t\t\thexstr[--j] = digist2hex[tmp & 0xf];\n\t\t\t\ttmp >>= 4;\n\t\t\t\tleft -= 4;\n\t\t\t}\n\t\t}\n\n\t\tif (tmp) {\n\t\t\thexstr[--j] = digist2hex[tmp & 0xf];\n\t\t}\n\n\t\thexstr[--j] = 'x';\n\t\thexstr[--j] = '0';\n\t\tif (neg) {\n\t\t\thexstr[--j] = '-';\n\t\t}\n\n\t\trz_str_trim(hexstr);\n\t\tret->data = hexstr;\n\t}\n\treturn ret;\n}",
  "abstract_func": "static pyc_object *get_long_object(RzBuffer *VAR_0) {\n\tpyc_object *VAR_1 = NULL;\n\tbool VAR_2 = false;\n\tbool VAR_3 = false;\n\tut32 VAR_4 = 0;\n\tsize_t VAR_5;\n\tsize_t VAR_6, VAR_7 = 0, VAR_8 = 0;\n\tut32 VAR_9;\n\tchar *VAR_10;\n\tchar VAR_11[] = \"0123456789abcdef\";\n\n\tst32 VAR_12 = get_st32(VAR_0, &VAR_2);\n\tif (VAR_2) {\n\t\treturn NULL;\n\t}\n\tVAR_1 = RZ_NEW0(pyc_object);\n\tif (!VAR_1) {\n\t\treturn NULL;\n\t}\n\tVAR_1->type = VAR_13;\n\tif (VAR_12 < 0) {\n\t\tVAR_12 = -VAR_12;\n\t\tVAR_3 = true;\n\t}\n\tif (VAR_12 == 0) {\n\t\tVAR_1->data = strdup(\"0x0\");\n\t} else {\n\t\t/* COMMENT_0 */\n\t\tVAR_5 = (size_t)VAR_12 * 15;\n\t\tVAR_5 = (VAR_5 - 1) / 4 + 1;\n\t\tVAR_5 += 4 + (VAR_3 ? 1 : 0);\n\t\tVAR_10 = malloc(VAR_5);\n\t\tif (!VAR_10) {\n\t\t\tfree(VAR_1);\n\t\t\treturn NULL;\n\t\t}\n\t\tmemset(VAR_10, 0x20, VAR_5);\n\t\tVAR_7 = VAR_5 - 1;\n\t\tVAR_10[VAR_7] = 0;\n\t\tfor (VAR_6 = 0; VAR_6 < VAR_12; VAR_6++) {\n\t\t\tVAR_9 = get_ut16(VAR_0, &VAR_2);\n\t\t\tVAR_4 |= VAR_9 << VAR_8;\n\t\t\tVAR_8 += 15;\n\n\t\t\twhile (VAR_8 >= 4) {\n\t\t\t\tVAR_10[--VAR_7] = VAR_11[VAR_4 & 0xf];\n\t\t\t\tVAR_4 >>= 4;\n\t\t\t\tVAR_8 -= 4;\n\t\t\t}\n\t\t}\n\n\t\tif (VAR_4) {\n\t\t\tVAR_10[--VAR_7] = VAR_11[VAR_4 & 0xf];\n\t\t}\n\n\t\tVAR_10[--VAR_7] = 'x';\n\t\tVAR_10[--VAR_7] = '0';\n\t\tif (VAR_3) {\n\t\t\tVAR_10[--VAR_7] = '-';\n\t\t}\n\n\t\trz_str_trim(VAR_10);\n\t\tVAR_1->data = VAR_10;\n\t}\n\treturn VAR_1;\n}",
  "func_graph_path": "rizinorg/rizin/652d01e0c6e5d7ce17224ce3ceb10be42a48a84c/marshal.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -25,7 +25,8 @@\n \tif (ndigits == 0) {\n \t\tret->data = strdup(\"0x0\");\n \t} else {\n-\t\tsize = ndigits * 15;\n+\t\t// the explicit cast is safe since ndigits is positive\n+\t\tsize = (size_t)ndigits * 15;\n \t\tsize = (size - 1) / 4 + 1;\n \t\tsize += 4 + (neg ? 1 : 0);\n \t\thexstr = malloc(size);",
  "diff_line_info": {
    "deleted_lines": [
      "\t\tsize = ndigits * 15;"
    ],
    "added_lines": [
      "\t\t// the explicit cast is safe since ndigits is positive",
      "\t\tsize = (size_t)ndigits * 15;"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/rizinorg/rizin/pull/2739",
  "description": {
    "pr_info": {
      "title": "Fix the crash caused by get_long_object()",
      "number": 2739
    },
    "comment": [
      " <!-- Filling this template is mandatory -->\r\n\r\n**Your checklist for this pull request**\r\n- [x] I've read the [guidelines for contributing](https://github.com/rizinorg/rizin/blob/master/DEVELOPERS.md) to this repository\r\n- [x] I made sure to follow the project's [coding style](https://github.com/rizinorg/rizin/blob/master/DEVELOPERS.md#code-style)\r\n- [ ] I've documented or updated the documentation of every function and struct this PR changes. If not so I've explained why.\r\n- [ ] I've added tests that prove my fix is effective or that my feature works (if possible)\r\n- [ ] I've updated the [rizin book](https://github.com/rizinorg/book) with the relevant information (if needed)\r\n\r\n**Detailed description**\r\n\r\n<!-- Explain the **details** for making this change. Is a new feature implemented? What existing problem does the pull request solve? How does the pull request solve these issues? Please provide enough information so that others can review your pull request. -->\r\n\r\n...\r\n\r\n**Test plan**\r\n\r\n<!-- What steps should the reviewer take to test your pull request? Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots/videos. This is your time to re-check that everything works and that you covered all the edge cases -->\r\n\r\n...\r\n\r\n**Closing issues**\r\n\r\ncloses https://github.com/rizinorg/rizin/issues/2738\r\n\r\n<!-- put \"closes #XXXX\" in your comment to auto-close the issue that your PR fixes (if any). -->\r\n\r\n...\r\n"
    ]
  },
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.7,
  "Bug Filter Response": "**Final Classification:** Defect Remediation & Feature Upgrades; **Confidence:** 0.7"
}