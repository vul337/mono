{
  "cve_id": "CVE-2021-29441",
  "cwe_ids": [
    "CWE-290"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "alibaba/nacos",
  "commit_msg": "Fix #4701",
  "commit_hash": "91d16023d91ea21a5e58722c751485a0b9bbeeb3",
  "git_url": "https://github.com/alibaba/nacos/commit/91d16023d91ea21a5e58722c751485a0b9bbeeb3",
  "file_path": "core/src/main/java/com/alibaba/nacos/core/code/ControllerMethodsCache.java",
  "func_name": "getMethod",
  "func_before": "public Method getMethod(HttpServletRequest request) {\n        String path = getPath(request);\n        if (path == null) {\n            return null;\n        }\n        String httpMethod = request.getMethod();\n        String urlKey = httpMethod + REQUEST_PATH_SEPARATOR + path.replaceFirst(EnvUtil.getContextPath(), \"\");\n        List<RequestMappingInfo> requestMappingInfos = urlLookup.get(urlKey);\n        if (CollectionUtils.isEmpty(requestMappingInfos)) {\n            return null;\n        }\n        List<RequestMappingInfo> matchedInfo = findMatchedInfo(requestMappingInfos, request);\n        if (CollectionUtils.isEmpty(matchedInfo)) {\n            return null;\n        }\n        RequestMappingInfo bestMatch = matchedInfo.get(0);\n        if (matchedInfo.size() > 1) {\n            RequestMappingInfoComparator comparator = new RequestMappingInfoComparator();\n            matchedInfo.sort(comparator);\n            bestMatch = matchedInfo.get(0);\n            RequestMappingInfo secondBestMatch = matchedInfo.get(1);\n            if (comparator.compare(bestMatch, secondBestMatch) == 0) {\n                throw new IllegalStateException(\n                        \"Ambiguous methods mapped for '\" + request.getRequestURI() + \"': {\" + bestMatch + \", \"\n                                + secondBestMatch + \"}\");\n            }\n        }\n        return methods.get(bestMatch);\n    }",
  "abstract_func_before": "public Method getMethod(HttpServletRequest VAR_0) {\n        String VAR_1 = getPath(VAR_0);\n        if (VAR_1 == null) {\n            return null;\n        }\n        String VAR_2 = VAR_0.getMethod();\n        String VAR_3 = VAR_2 + VAR_4 + VAR_1.replaceFirst(VAR_5.getContextPath(), \"\");\n        List<RequestMappingInfo> VAR_6 = VAR_7.get(VAR_3);\n        if (VAR_8.isEmpty(VAR_6)) {\n            return null;\n        }\n        List<RequestMappingInfo> VAR_9 = findMatchedInfo(VAR_6, VAR_0);\n        if (VAR_8.isEmpty(VAR_9)) {\n            return null;\n        }\n        RequestMappingInfo VAR_10 = VAR_9.get(0);\n        if (VAR_9.size() > 1) {\n            RequestMappingInfoComparator VAR_11 = new RequestMappingInfoComparator();\n            VAR_9.sort(VAR_11);\n            VAR_10 = VAR_9.get(0);\n            RequestMappingInfo VAR_12 = VAR_9.get(1);\n            if (VAR_11.compare(VAR_10, VAR_12) == 0) {\n                throw new IllegalStateException(\n                        \"Ambiguous methods mapped for '\" + VAR_0.getRequestURI() + \"': {\" + VAR_10 + \", \"\n                                + VAR_12 + \"}\");\n            }\n        }\n        return VAR_13.get(VAR_10);\n    }",
  "func_graph_path_before": "alibaba/nacos/91d16023d91ea21a5e58722c751485a0b9bbeeb3/ControllerMethodsCache.java/vul/before/2.json",
  "func": "public Method getMethod(HttpServletRequest request) {\n        String path = getPath(request);\n        String httpMethod = request.getMethod();\n        String urlKey = httpMethod + REQUEST_PATH_SEPARATOR + path.replaceFirst(EnvUtil.getContextPath(), \"\");\n        List<RequestMappingInfo> requestMappingInfos = urlLookup.get(urlKey);\n        if (CollectionUtils.isEmpty(requestMappingInfos)) {\n            return null;\n        }\n        List<RequestMappingInfo> matchedInfo = findMatchedInfo(requestMappingInfos, request);\n        if (CollectionUtils.isEmpty(matchedInfo)) {\n            return null;\n        }\n        RequestMappingInfo bestMatch = matchedInfo.get(0);\n        if (matchedInfo.size() > 1) {\n            RequestMappingInfoComparator comparator = new RequestMappingInfoComparator();\n            matchedInfo.sort(comparator);\n            bestMatch = matchedInfo.get(0);\n            RequestMappingInfo secondBestMatch = matchedInfo.get(1);\n            if (comparator.compare(bestMatch, secondBestMatch) == 0) {\n                throw new IllegalStateException(\n                        \"Ambiguous methods mapped for '\" + request.getRequestURI() + \"': {\" + bestMatch + \", \"\n                                + secondBestMatch + \"}\");\n            }\n        }\n        return methods.get(bestMatch);\n    }",
  "abstract_func": "public Method getMethod(HttpServletRequest VAR_0) {\n        String VAR_1 = getPath(VAR_0);\n        String VAR_2 = VAR_0.getMethod();\n        String VAR_3 = VAR_2 + VAR_4 + VAR_1.replaceFirst(VAR_5.getContextPath(), \"\");\n        List<RequestMappingInfo> VAR_6 = VAR_7.get(VAR_3);\n        if (VAR_8.isEmpty(VAR_6)) {\n            return null;\n        }\n        List<RequestMappingInfo> VAR_9 = findMatchedInfo(VAR_6, VAR_0);\n        if (VAR_8.isEmpty(VAR_9)) {\n            return null;\n        }\n        RequestMappingInfo VAR_10 = VAR_9.get(0);\n        if (VAR_9.size() > 1) {\n            RequestMappingInfoComparator VAR_11 = new RequestMappingInfoComparator();\n            VAR_9.sort(VAR_11);\n            VAR_10 = VAR_9.get(0);\n            RequestMappingInfo VAR_12 = VAR_9.get(1);\n            if (VAR_11.compare(VAR_10, VAR_12) == 0) {\n                throw new IllegalStateException(\n                        \"Ambiguous methods mapped for '\" + VAR_0.getRequestURI() + \"': {\" + VAR_10 + \", \"\n                                + VAR_12 + \"}\");\n            }\n        }\n        return VAR_13.get(VAR_10);\n    }",
  "func_graph_path": "alibaba/nacos/91d16023d91ea21a5e58722c751485a0b9bbeeb3/ControllerMethodsCache.java/vul/after/2.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,8 +1,5 @@\n public Method getMethod(HttpServletRequest request) {\n         String path = getPath(request);\n-        if (path == null) {\n-            return null;\n-        }\n         String httpMethod = request.getMethod();\n         String urlKey = httpMethod + REQUEST_PATH_SEPARATOR + path.replaceFirst(EnvUtil.getContextPath(), \"\");\n         List<RequestMappingInfo> requestMappingInfos = urlLookup.get(urlKey);",
  "diff_line_info": {
    "deleted_lines": [
      "        if (path == null) {",
      "            return null;",
      "        }"
    ],
    "added_lines": []
  },
  "is_vul": true,
  "pr_url": "https://github.com/alibaba/nacos/pull/4703",
  "description": {
    "pr_info": {
      "title": "[ISSUE #4701] Fix bypass authentication(identity) problem.",
      "number": 4703
    },
    "comment": [
      "Please do not create a Pull Request without creating an issue first.\r\n\r\n## What is the purpose of the change\r\n\r\nFix #4701 \r\n\r\n- Add support for uri end with '/'\r\n- Directly reject if can't find api path in nacos implementations.\r\n\r\n## Brief changelog\r\n\r\nXX\r\n\r\n## Verifying this change\r\n\r\nXXXX\r\n\r\nFollow this checklist to help us incorporate your contribution quickly and easily:\r\n\r\n* [ ] Make sure there is a Github issue filed for the change (usually before you start working on it). Trivial changes like typos do not require a Github issue. Your pull request should address just this issue, without pulling in other changes - one PR resolves one issue.\r\n* [ ] Format the pull request title like `[ISSUE #123] Fix UnknownException when host config not exist`. Each commit in the pull request should have a meaningful subject line and body.\r\n* [ ] Write a pull request description that is detailed enough to understand what the pull request does, how, and why.\r\n* [ ] Write necessary unit-test to verify your logic correction, more mock a little better when cross module dependency exist. If the new feature or significant change is committed, please remember to add integration-test in [test module](https://github.com/alibaba/nacos/tree/master/test).\r\n* [ ] Run `mvn -B clean package apache-rat:check findbugs:findbugs -Dmaven.test.skip=true` to make sure basic checks pass. Run `mvn clean install -DskipITs` to make sure unit-test pass. Run `mvn clean test-compile failsafe:integration-test`  to make sure integration-test pass.\r\n\r\n"
    ]
  },
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "**Final Classification:** Defect Remediation & Feature Upgrades; **Confidence:** 0.95"
}