{
  "cve_id": "CVE-2020-12845",
  "cwe_ids": [
    "CWE-476"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "cherokee/webserver",
  "commit_msg": "Don't process empty input for cherokee_buffer_decode_base64",
  "commit_hash": "7d8d903399c168708ace4bc2cdd8a551777fa1b3",
  "git_url": "https://github.com/cherokee/webserver/commit/7d8d903399c168708ace4bc2cdd8a551777fa1b3",
  "file_path": "cherokee/buffer.c",
  "func_name": "cherokee_buffer_decode_base64",
  "func_before": "ret_t\ncherokee_buffer_decode_base64 (cherokee_buffer_t *buf)\n{\n\tcuint_t  i;\n\tchar     space[128];\n\tint      space_idx = 0;\n\tint      phase     = 0;\n\tint      d, prev_d = 0;\n\tint      buf_pos   = 0;\n\n\t/* Base-64 decoding: This represents binary data as printable\n\t * ASCII characters. Three 8-bit binary bytes are turned into\n\t * four 6-bit values, like so:\n\t *\n\t *   [11111111]  [22222222]  [33333333]\n\t *   [111111] [112222] [222233] [333333]\n\t *\n\t * Then the 6-bit values are represented using the characters\n\t * \"A-Za-z0-9+/\".\n\t */\n\n\tstatic const signed char\n\t\tb64_decode_tab[256] = {\n\t\t\t-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,  /* 00-0F */\n\t\t\t-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,  /* 10-1F */\n\t\t\t-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,63,  /* 20-2F */\n\t\t\t52,53,54,55,56,57,58,59,60,61,-1,-1,-1,-1,-1,-1,  /* 30-3F */\n\t\t\t-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,  /* 40-4F */\n\t\t\t15,16,17,18,19,20,21,22,23,24,25,-1,-1,-1,-1,-1,  /* 50-5F */\n\t\t\t-1,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,  /* 60-6F */\n\t\t\t41,42,43,44,45,46,47,48,49,50,51,-1,-1,-1,-1,-1,  /* 70-7F */\n\t\t\t-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,  /* 80-8F */\n\t\t\t-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,  /* 90-9F */\n\t\t\t-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,  /* A0-AF */\n\t\t\t-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,  /* B0-BF */\n\t\t\t-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,  /* C0-CF */\n\t\t\t-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,  /* D0-DF */\n\t\t\t-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,  /* E0-EF */\n\t\t\t-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1   /* F0-FF */\n\t\t};\n\n\tfor (i=0; i < buf->len; i++) {\n\t\td = b64_decode_tab[(int) buf->buf[i]];\n\t\tif (d != -1) {\n\t\t\tswitch (phase) {\n\t\t\tcase 0:\n\t\t\t\t++phase;\n\t\t\t\tbreak;\n\t\t\tcase 1:\n\t\t\t\tspace[space_idx++] = (( prev_d << 2 ) | ( ( d & 0x30 ) >> 4 ));\n\t\t\t\t++phase;\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tspace[space_idx++] = (( ( prev_d & 0xf ) << 4 ) | ( ( d & 0x3c ) >> 2 ));\n\t\t\t\t++phase;\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tspace[space_idx++] = (( ( prev_d & 0x03 ) << 6 ) | d );\n\t\t\t\tphase = 0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tprev_d = d;\n\t\t}\n\n\t\tif (space_idx == 127) {\n\t\t\tmemcpy (buf->buf + buf_pos, space, 127);\n\t\t\tbuf_pos += 127;\n\t\t\tspace_idx = 0;\n\t\t}\n\t}\n\n\tspace[space_idx]='\\0';\n\n\tmemcpy (buf->buf + buf_pos, space, space_idx+1);\n\tbuf->len = buf_pos + space_idx;\n\n\treturn ret_ok;\n}",
  "abstract_func_before": "ret_t\ncherokee_buffer_decode_base64 (cherokee_buffer_t *VAR_0)\n{\n\tcuint_t  VAR_1;\n\tchar     VAR_2[128];\n\tint      VAR_3 = 0;\n\tint      VAR_4     = 0;\n\tint      VAR_5, VAR_6 = 0;\n\tint      VAR_7   = 0;\n\n\t/* COMMENT_0 */\n                                                              \n                               \n   \n                                        \n                                         \n   \n                                                              \n                  \n    \n\n\tstatic const signed char\n\t\tVAR_8[256] = {\n\t\t\t-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,  /* COMMENT_9 */\n\t\t\t-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,  /* COMMENT_10 */\n\t\t\t-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,63,  /* COMMENT_11 */\n\t\t\t52,53,54,55,56,57,58,59,60,61,-1,-1,-1,-1,-1,-1,  /* COMMENT_12 */\n\t\t\t-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,  /* COMMENT_13 */\n\t\t\t15,16,17,18,19,20,21,22,23,24,25,-1,-1,-1,-1,-1,  /* COMMENT_14 */\n\t\t\t-1,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,  /* COMMENT_15 */\n\t\t\t41,42,43,44,45,46,47,48,49,50,51,-1,-1,-1,-1,-1,  /* COMMENT_16 */\n\t\t\t-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,  /* COMMENT_17 */\n\t\t\t-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,  /* COMMENT_18 */\n\t\t\t-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,  /* COMMENT_19 */\n\t\t\t-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,  /* COMMENT_20 */\n\t\t\t-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,  /* COMMENT_21 */\n\t\t\t-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,  /* COMMENT_22 */\n\t\t\t-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,  /* COMMENT_23 */\n\t\t\t-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1   /* COMMENT_24 */\n\t\t};\n\n\tfor (VAR_1=0; VAR_1 < VAR_0->len; VAR_1++) {\n\t\tVAR_5 = VAR_8[(int) VAR_0->buf[VAR_1]];\n\t\tif (VAR_5 != -1) {\n\t\t\tswitch (VAR_4) {\n\t\t\tcase 0:\n\t\t\t\t++VAR_4;\n\t\t\t\tbreak;\n\t\t\tcase 1:\n\t\t\t\tVAR_2[VAR_3++] = (( VAR_6 << 2 ) | ( ( VAR_5 & 0x30 ) >> 4 ));\n\t\t\t\t++VAR_4;\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tVAR_2[VAR_3++] = (( ( VAR_6 & 0xf ) << 4 ) | ( ( VAR_5 & 0x3c ) >> 2 ));\n\t\t\t\t++VAR_4;\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tVAR_2[VAR_3++] = (( ( VAR_6 & 0x03 ) << 6 ) | VAR_5 );\n\t\t\t\tVAR_4 = 0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tVAR_6 = VAR_5;\n\t\t}\n\n\t\tif (VAR_3 == 127) {\n\t\t\tmemcpy (VAR_0->buf + VAR_7, VAR_2, 127);\n\t\t\tVAR_7 += 127;\n\t\t\tVAR_3 = 0;\n\t\t}\n\t}\n\n\tVAR_2[VAR_3]='\\0';\n\n\tmemcpy (VAR_0->buf + VAR_7, VAR_2, VAR_3+1);\n\tVAR_0->len = VAR_7 + VAR_3;\n\n\treturn VAR_9;\n}",
  "func_graph_path_before": "cherokee/webserver/7d8d903399c168708ace4bc2cdd8a551777fa1b3/buffer.c/vul/before/0.json",
  "func": "ret_t\ncherokee_buffer_decode_base64 (cherokee_buffer_t *buf)\n{\n\tcuint_t  i;\n\tchar     space[128];\n\tint      space_idx = 0;\n\tint      phase     = 0;\n\tint      d, prev_d = 0;\n\tint      buf_pos   = 0;\n\n\t/* Base-64 decoding: This represents binary data as printable\n\t * ASCII characters. Three 8-bit binary bytes are turned into\n\t * four 6-bit values, like so:\n\t *\n\t *   [11111111]  [22222222]  [33333333]\n\t *   [111111] [112222] [222233] [333333]\n\t *\n\t * Then the 6-bit values are represented using the characters\n\t * \"A-Za-z0-9+/\".\n\t */\n\n\tstatic const signed char\n\t\tb64_decode_tab[256] = {\n\t\t\t-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,  /* 00-0F */\n\t\t\t-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,  /* 10-1F */\n\t\t\t-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,63,  /* 20-2F */\n\t\t\t52,53,54,55,56,57,58,59,60,61,-1,-1,-1,-1,-1,-1,  /* 30-3F */\n\t\t\t-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,  /* 40-4F */\n\t\t\t15,16,17,18,19,20,21,22,23,24,25,-1,-1,-1,-1,-1,  /* 50-5F */\n\t\t\t-1,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,  /* 60-6F */\n\t\t\t41,42,43,44,45,46,47,48,49,50,51,-1,-1,-1,-1,-1,  /* 70-7F */\n\t\t\t-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,  /* 80-8F */\n\t\t\t-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,  /* 90-9F */\n\t\t\t-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,  /* A0-AF */\n\t\t\t-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,  /* B0-BF */\n\t\t\t-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,  /* C0-CF */\n\t\t\t-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,  /* D0-DF */\n\t\t\t-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,  /* E0-EF */\n\t\t\t-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1   /* F0-FF */\n\t\t};\n\n\tif (unlikely(buf == NULL || buf->len == 0))\n\t\treturn ret_ok;\n\n\tfor (i=0; i < buf->len; i++) {\n\t\td = b64_decode_tab[(int) buf->buf[i]];\n\t\tif (d != -1) {\n\t\t\tswitch (phase) {\n\t\t\tcase 0:\n\t\t\t\t++phase;\n\t\t\t\tbreak;\n\t\t\tcase 1:\n\t\t\t\tspace[space_idx++] = (( prev_d << 2 ) | ( ( d & 0x30 ) >> 4 ));\n\t\t\t\t++phase;\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tspace[space_idx++] = (( ( prev_d & 0xf ) << 4 ) | ( ( d & 0x3c ) >> 2 ));\n\t\t\t\t++phase;\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tspace[space_idx++] = (( ( prev_d & 0x03 ) << 6 ) | d );\n\t\t\t\tphase = 0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tprev_d = d;\n\t\t}\n\n\t\tif (space_idx == 127) {\n\t\t\tmemcpy (buf->buf + buf_pos, space, 127);\n\t\t\tbuf_pos += 127;\n\t\t\tspace_idx = 0;\n\t\t}\n\t}\n\n\tspace[space_idx]='\\0';\n\n\tmemcpy (buf->buf + buf_pos, space, space_idx+1);\n\tbuf->len = buf_pos + space_idx;\n\n\treturn ret_ok;\n}",
  "abstract_func": "ret_t\ncherokee_buffer_decode_base64 (cherokee_buffer_t *VAR_0)\n{\n\tcuint_t  VAR_1;\n\tchar     VAR_2[128];\n\tint      VAR_3 = 0;\n\tint      VAR_4     = 0;\n\tint      VAR_5, VAR_6 = 0;\n\tint      VAR_7   = 0;\n\n\t/* COMMENT_0 */\n                                                              \n                               \n   \n                                        \n                                         \n   \n                                                              \n                  \n    \n\n\tstatic const signed char\n\t\tVAR_8[256] = {\n\t\t\t-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,  /* COMMENT_9 */\n\t\t\t-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,  /* COMMENT_10 */\n\t\t\t-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,63,  /* COMMENT_11 */\n\t\t\t52,53,54,55,56,57,58,59,60,61,-1,-1,-1,-1,-1,-1,  /* COMMENT_12 */\n\t\t\t-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,  /* COMMENT_13 */\n\t\t\t15,16,17,18,19,20,21,22,23,24,25,-1,-1,-1,-1,-1,  /* COMMENT_14 */\n\t\t\t-1,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,  /* COMMENT_15 */\n\t\t\t41,42,43,44,45,46,47,48,49,50,51,-1,-1,-1,-1,-1,  /* COMMENT_16 */\n\t\t\t-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,  /* COMMENT_17 */\n\t\t\t-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,  /* COMMENT_18 */\n\t\t\t-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,  /* COMMENT_19 */\n\t\t\t-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,  /* COMMENT_20 */\n\t\t\t-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,  /* COMMENT_21 */\n\t\t\t-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,  /* COMMENT_22 */\n\t\t\t-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,  /* COMMENT_23 */\n\t\t\t-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1   /* COMMENT_24 */\n\t\t};\n\n\tif (unlikely(VAR_0 == NULL || VAR_0->len == 0))\n\t\treturn VAR_9;\n\n\tfor (VAR_1=0; VAR_1 < VAR_0->len; VAR_1++) {\n\t\tVAR_5 = VAR_8[(int) VAR_0->buf[VAR_1]];\n\t\tif (VAR_5 != -1) {\n\t\t\tswitch (VAR_4) {\n\t\t\tcase 0:\n\t\t\t\t++VAR_4;\n\t\t\t\tbreak;\n\t\t\tcase 1:\n\t\t\t\tVAR_2[VAR_3++] = (( VAR_6 << 2 ) | ( ( VAR_5 & 0x30 ) >> 4 ));\n\t\t\t\t++VAR_4;\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tVAR_2[VAR_3++] = (( ( VAR_6 & 0xf ) << 4 ) | ( ( VAR_5 & 0x3c ) >> 2 ));\n\t\t\t\t++VAR_4;\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tVAR_2[VAR_3++] = (( ( VAR_6 & 0x03 ) << 6 ) | VAR_5 );\n\t\t\t\tVAR_4 = 0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tVAR_6 = VAR_5;\n\t\t}\n\n\t\tif (VAR_3 == 127) {\n\t\t\tmemcpy (VAR_0->buf + VAR_7, VAR_2, 127);\n\t\t\tVAR_7 += 127;\n\t\t\tVAR_3 = 0;\n\t\t}\n\t}\n\n\tVAR_2[VAR_3]='\\0';\n\n\tmemcpy (VAR_0->buf + VAR_7, VAR_2, VAR_3+1);\n\tVAR_0->len = VAR_7 + VAR_3;\n\n\treturn VAR_9;\n}",
  "func_graph_path": "cherokee/webserver/7d8d903399c168708ace4bc2cdd8a551777fa1b3/buffer.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -39,6 +39,9 @@\n \t\t\t-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1   /* F0-FF */\n \t\t};\n \n+\tif (unlikely(buf == NULL || buf->len == 0))\n+\t\treturn ret_ok;\n+\n \tfor (i=0; i < buf->len; i++) {\n \t\td = b64_decode_tab[(int) buf->buf[i]];\n \t\tif (d != -1) {",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "\tif (unlikely(buf == NULL || buf->len == 0))",
      "\t\treturn ret_ok;",
      ""
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/cherokee/webserver/pull/1243",
  "description": {
    "pr_info": {
      "title": "Fix CVE-2020-12845",
      "number": 1243
    },
    "comment": [
      "Fix #1242\r\n\r\nThis resolves the bug originally reported by @pjlantz from F-Secure and includes QA tests to verify. Considering QA 098 failing (hard) in master, this QA test must be resolved first."
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.8,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.8"
}