{
  "cve_id": "CVE-2022-40757",
  "cwe_ids": [
    "CWE-119"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
  "cvss_is_v3": true,
  "repo_name": "Samsung/mTower",
  "commit_msg": "Fixed CVE-2022-40760\n\nSigned-off-by: Taras Drozdovskyi <t.drozdovsky@samsung.com>",
  "commit_hash": "ab9d06d51ff8c3eab9ba9ea85e422179dbd12b15",
  "git_url": "https://github.com/Samsung/mTower/commit/ab9d06d51ff8c3eab9ba9ea85e422179dbd12b15",
  "file_path": "tee/lib/libutee/tee_api_operations.c",
  "func_name": "TEE_CipherUpdate",
  "func_before": "TEE_Result TEE_CipherUpdate(TEE_OperationHandle operation, const void *srcData,\n\t\t\t    uint32_t srcLen, void *destData, uint32_t *destLen)\n{\n\tTEE_Result res;\n\tsize_t req_dlen;\n\tuint64_t dl;\n\n\tif (operation == TEE_HANDLE_NULL ||\n\t    (srcData == NULL && srcLen != 0) ||\n\t    destLen == NULL ||\n\t    (destData == NULL && *destLen != 0)) {\n\t\tres = TEE_ERROR_BAD_PARAMETERS;\n\t\tgoto out;\n\t}\n\n\tif (operation->info.operationClass != TEE_OPERATION_CIPHER) {\n\t\tres = TEE_ERROR_BAD_PARAMETERS;\n\t\tgoto out;\n\t}\n\n\tif ((operation->info.handleState & TEE_HANDLE_FLAG_INITIALIZED) == 0) {\n\t\tres = TEE_ERROR_BAD_PARAMETERS;\n\t\tgoto out;\n\t}\n\n\tif (operation->operationState != TEE_OPERATION_STATE_ACTIVE) {\n\t\tres = TEE_ERROR_BAD_PARAMETERS;\n\t\tgoto out;\n\t}\n\n\tif (!srcData && !srcLen) {\n\t\t*destLen = 0;\n\t\tres = TEE_SUCCESS;\n\t\tgoto out;\n\t}\n\n\t/* Calculate required dlen */\n\tif (operation->block_size > 1) {\n\t\treq_dlen = ((operation->buffer_offs + srcLen) /\n\t\t\t    operation->block_size) * operation->block_size;\n\t} else {\n\t\treq_dlen = srcLen;\n\t}\n\tif (operation->buffer_two_blocks) {\n\t\tif (req_dlen > operation->block_size * 2)\n\t\t\treq_dlen -= operation->block_size * 2;\n\t\telse\n\t\t\treq_dlen = 0;\n\t}\n\t/*\n\t * Check that required destLen is big enough before starting to feed\n\t * data to the algorithm. Errors during feeding of data are fatal as we\n\t * can't restore sync with this API.\n\t */\n\tif (*destLen < req_dlen) {\n\t\t*destLen = req_dlen;\n\t\tres = TEE_ERROR_SHORT_BUFFER;\n\t\tgoto out;\n\t}\n\n\tdl = *destLen;\n\tif (operation->block_size > 1) {\n\t\tres = tee_buffer_update(operation, utee_cipher_update, srcData,\n\t\t\t\t\tsrcLen, destData, &dl);\n\t} else {\n\t\tif (srcLen > 0) {\n\t\t\tres = utee_cipher_update(operation->state, srcData,\n\t\t\t\t\t\t srcLen, destData, &dl);\n\t\t} else {\n\t\t\tres = TEE_SUCCESS;\n\t\t\tdl = 0;\n\t\t}\n\t}\n\t*destLen = dl;\n\nout:\n\tif (res != TEE_SUCCESS &&\n\t    res != TEE_ERROR_SHORT_BUFFER)\n\t\tTEE_Panic(res);\n\n\treturn res;\n}",
  "abstract_func_before": "TEE_Result TEE_CipherUpdate(TEE_OperationHandle VAR_0, const void *VAR_1,\n\t\t\t    uint32_t VAR_2, void *VAR_3, uint32_t *VAR_4)\n{\n\tTEE_Result VAR_5;\n\tsize_t VAR_6;\n\tuint64_t VAR_7;\n\n\tif (VAR_0 == VAR_8 ||\n\t    (VAR_1 == NULL && VAR_2 != 0) ||\n\t    VAR_4 == NULL ||\n\t    (VAR_3 == NULL && *VAR_4 != 0)) {\n\t\tVAR_5 = VAR_9;\n\t\tgoto out;\n\t}\n\n\tif (VAR_0->info.operationClass != VAR_10) {\n\t\tVAR_5 = VAR_9;\n\t\tgoto out;\n\t}\n\n\tif ((VAR_0->info.handleState & VAR_11) == 0) {\n\t\tVAR_5 = VAR_9;\n\t\tgoto out;\n\t}\n\n\tif (VAR_0->operationState != VAR_12) {\n\t\tVAR_5 = VAR_9;\n\t\tgoto out;\n\t}\n\n\tif (!VAR_1 && !VAR_2) {\n\t\t*VAR_4 = 0;\n\t\tVAR_5 = VAR_13;\n\t\tgoto out;\n\t}\n\n\t/* COMMENT_0 */\n\tif (VAR_0->block_size > 1) {\n\t\tVAR_6 = ((VAR_0->buffer_offs + VAR_2) /\n\t\t\t    VAR_0->block_size) * VAR_0->block_size;\n\t} else {\n\t\tVAR_6 = VAR_2;\n\t}\n\tif (VAR_0->buffer_two_blocks) {\n\t\tif (VAR_6 > VAR_0->block_size * 2)\n\t\t\tVAR_6 -= VAR_0->block_size * 2;\n\t\telse\n\t\t\tVAR_6 = 0;\n\t}\n\t/* COMMENT_1 */\n                                                                     \n                                                                        \n                                     \n    \n\tif (*VAR_4 < VAR_6) {\n\t\t*VAR_4 = VAR_6;\n\t\tVAR_5 = VAR_14;\n\t\tgoto out;\n\t}\n\n\tVAR_7 = *VAR_4;\n\tif (VAR_0->block_size > 1) {\n\t\tVAR_5 = tee_buffer_update(VAR_0, VAR_15, VAR_1,\n\t\t\t\t\tVAR_2, VAR_3, &VAR_7);\n\t} else {\n\t\tif (VAR_2 > 0) {\n\t\t\tVAR_5 = VAR_15(VAR_0->state, VAR_1,\n\t\t\t\t\t\t VAR_2, VAR_3, &VAR_7);\n\t\t} else {\n\t\t\tVAR_5 = VAR_13;\n\t\t\tVAR_7 = 0;\n\t\t}\n\t}\n\t*VAR_4 = VAR_7;\n\nout:\n\tif (VAR_5 != VAR_13 &&\n\t    VAR_5 != VAR_14)\n\t\tTEE_Panic(VAR_5);\n\n\treturn VAR_5;\n}",
  "func_graph_path_before": "Samsung/mTower/ab9d06d51ff8c3eab9ba9ea85e422179dbd12b15/tee_api_operations.c/vul/before/0.json",
  "func": "TEE_Result TEE_CipherUpdate(TEE_OperationHandle operation, const void *srcData,\n\t\t\t    uint32_t srcLen, void *destData, uint32_t *destLen)\n{\n\tTEE_Result res;\n\tsize_t req_dlen;\n\tuint64_t dl;\n\n\tif (operation == TEE_HANDLE_NULL ||\n\t    (srcData == NULL && srcLen != 0) ||\n\t    destLen == NULL ||\n\t    (destData == NULL && *destLen != 0) ||\n\t    (srcLen > CONFIG_MAX_CRYPTO_CHUNK_SIZE || *destLen > CONFIG_MAX_CRYPTO_CHUNK_SIZE)) {\n\t\tres = TEE_ERROR_BAD_PARAMETERS;\n\t\tgoto out;\n\t}\n\n\tif (operation->info.operationClass != TEE_OPERATION_CIPHER) {\n\t\tres = TEE_ERROR_BAD_PARAMETERS;\n\t\tgoto out;\n\t}\n\n\tif ((operation->info.handleState & TEE_HANDLE_FLAG_INITIALIZED) == 0) {\n\t\tres = TEE_ERROR_BAD_PARAMETERS;\n\t\tgoto out;\n\t}\n\n\tif (operation->operationState != TEE_OPERATION_STATE_ACTIVE) {\n\t\tres = TEE_ERROR_BAD_PARAMETERS;\n\t\tgoto out;\n\t}\n\n\tif (!srcData && !srcLen) {\n\t\t*destLen = 0;\n\t\tres = TEE_SUCCESS;\n\t\tgoto out;\n\t}\n\n\t/* Calculate required dlen */\n\tif (operation->block_size > 1) {\n\t\treq_dlen = ((operation->buffer_offs + srcLen) /\n\t\t\t    operation->block_size) * operation->block_size;\n\t} else {\n\t\treq_dlen = srcLen;\n\t}\n\tif (operation->buffer_two_blocks) {\n\t\tif (req_dlen > operation->block_size * 2)\n\t\t\treq_dlen -= operation->block_size * 2;\n\t\telse\n\t\t\treq_dlen = 0;\n\t}\n\t/*\n\t * Check that required destLen is big enough before starting to feed\n\t * data to the algorithm. Errors during feeding of data are fatal as we\n\t * can't restore sync with this API.\n\t */\n\tif (*destLen < req_dlen) {\n\t\t*destLen = req_dlen;\n\t\tres = TEE_ERROR_SHORT_BUFFER;\n\t\tgoto out;\n\t}\n\n\tdl = *destLen;\n\tif (operation->block_size > 1) {\n\t\tres = tee_buffer_update(operation, utee_cipher_update, srcData,\n\t\t\t\t\tsrcLen, destData, &dl);\n\t} else {\n\t\tif (srcLen > 0) {\n\t\t\tres = utee_cipher_update(operation->state, srcData,\n\t\t\t\t\t\t srcLen, destData, &dl);\n\t\t} else {\n\t\t\tres = TEE_SUCCESS;\n\t\t\tdl = 0;\n\t\t}\n\t}\n\t*destLen = dl;\n\nout:\n\tif (res != TEE_SUCCESS &&\n\t    res != TEE_ERROR_SHORT_BUFFER)\n\t\tTEE_Panic(res);\n\n\treturn res;\n}",
  "abstract_func": "TEE_Result TEE_CipherUpdate(TEE_OperationHandle VAR_0, const void *VAR_1,\n\t\t\t    uint32_t VAR_2, void *VAR_3, uint32_t *VAR_4)\n{\n\tTEE_Result VAR_5;\n\tsize_t VAR_6;\n\tuint64_t VAR_7;\n\n\tif (VAR_0 == VAR_8 ||\n\t    (VAR_1 == NULL && VAR_2 != 0) ||\n\t    VAR_4 == NULL ||\n\t    (VAR_3 == NULL && *VAR_4 != 0) ||\n\t    (VAR_2 > VAR_9 || *VAR_4 > VAR_9)) {\n\t\tVAR_5 = VAR_10;\n\t\tgoto out;\n\t}\n\n\tif (VAR_0->info.operationClass != VAR_11) {\n\t\tVAR_5 = VAR_10;\n\t\tgoto out;\n\t}\n\n\tif ((VAR_0->info.handleState & VAR_12) == 0) {\n\t\tVAR_5 = VAR_10;\n\t\tgoto out;\n\t}\n\n\tif (VAR_0->operationState != VAR_13) {\n\t\tVAR_5 = VAR_10;\n\t\tgoto out;\n\t}\n\n\tif (!VAR_1 && !VAR_2) {\n\t\t*VAR_4 = 0;\n\t\tVAR_5 = VAR_14;\n\t\tgoto out;\n\t}\n\n\t/* COMMENT_0 */\n\tif (VAR_0->block_size > 1) {\n\t\tVAR_6 = ((VAR_0->buffer_offs + VAR_2) /\n\t\t\t    VAR_0->block_size) * VAR_0->block_size;\n\t} else {\n\t\tVAR_6 = VAR_2;\n\t}\n\tif (VAR_0->buffer_two_blocks) {\n\t\tif (VAR_6 > VAR_0->block_size * 2)\n\t\t\tVAR_6 -= VAR_0->block_size * 2;\n\t\telse\n\t\t\tVAR_6 = 0;\n\t}\n\t/* COMMENT_1 */\n                                                                     \n                                                                        \n                                     \n    \n\tif (*VAR_4 < VAR_6) {\n\t\t*VAR_4 = VAR_6;\n\t\tVAR_5 = VAR_15;\n\t\tgoto out;\n\t}\n\n\tVAR_7 = *VAR_4;\n\tif (VAR_0->block_size > 1) {\n\t\tVAR_5 = tee_buffer_update(VAR_0, VAR_16, VAR_1,\n\t\t\t\t\tVAR_2, VAR_3, &VAR_7);\n\t} else {\n\t\tif (VAR_2 > 0) {\n\t\t\tVAR_5 = VAR_16(VAR_0->state, VAR_1,\n\t\t\t\t\t\t VAR_2, VAR_3, &VAR_7);\n\t\t} else {\n\t\t\tVAR_5 = VAR_14;\n\t\t\tVAR_7 = 0;\n\t\t}\n\t}\n\t*VAR_4 = VAR_7;\n\nout:\n\tif (VAR_5 != VAR_14 &&\n\t    VAR_5 != VAR_15)\n\t\tTEE_Panic(VAR_5);\n\n\treturn VAR_5;\n}",
  "func_graph_path": "Samsung/mTower/ab9d06d51ff8c3eab9ba9ea85e422179dbd12b15/tee_api_operations.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -8,7 +8,8 @@\n \tif (operation == TEE_HANDLE_NULL ||\n \t    (srcData == NULL && srcLen != 0) ||\n \t    destLen == NULL ||\n-\t    (destData == NULL && *destLen != 0)) {\n+\t    (destData == NULL && *destLen != 0) ||\n+\t    (srcLen > CONFIG_MAX_CRYPTO_CHUNK_SIZE || *destLen > CONFIG_MAX_CRYPTO_CHUNK_SIZE)) {\n \t\tres = TEE_ERROR_BAD_PARAMETERS;\n \t\tgoto out;\n \t}",
  "diff_line_info": {
    "deleted_lines": [
      "\t    (destData == NULL && *destLen != 0)) {"
    ],
    "added_lines": [
      "\t    (destData == NULL && *destLen != 0) ||",
      "\t    (srcLen > CONFIG_MAX_CRYPTO_CHUNK_SIZE || *destLen > CONFIG_MAX_CRYPTO_CHUNK_SIZE)) {"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/Samsung/mTower/pull/90",
  "description": {
    "pr_info": {
      "title": "Fixed CVE-2022-40760",
      "number": 90
    },
    "comment": [
      "Signed-off-by: Taras Drozdovskyi <t.drozdovsky@samsung.com>\r\n\r\nFixes #81\r\n\r\n## Type of change\r\n\r\n- [x] Bug fix (non-breaking change which fixes an issue)\r\n\r\n# Checklist:\r\n\r\n- [x] My code follows the style guidelines of this project\r\n- [x] I have performed a self-review of my own code\r\n- [x] I have commented my code, particularly in hard-to-understand areas\r\n- [x] I have made corresponding changes to the documentation\r\n- [x] My changes generate no new warnings\r\n- [ ] I have added tests that prove my fix is effective or that my feature works\r\n- [x] New and existing unit tests pass locally with my changes\r\n- [ ] Any dependent changes have been merged and published in downstream modules"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 0.95"
}