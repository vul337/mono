{
  "cve_id": "CVE-2021-45809",
  "cwe_ids": [
    "CWE-Other"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:C/I:C/A:C",
  "cvss_is_v3": false,
  "repo_name": "yuezk/GlobalProtect-openconnect",
  "commit_msg": "add configuration file for gpservice",
  "commit_hash": "767286b898f2d1d361c3834de1d4d0b5836ffecd",
  "git_url": "https://github.com/yuezk/GlobalProtect-openconnect/commit/767286b898f2d1d361c3834de1d4d0b5836ffecd",
  "file_path": "GPClient/vpn_json.cpp",
  "func_name": "VpnJson::connect",
  "func_before": "void VpnJson::connect(const QString &preferredServer, const QList<QString> &servers, const QString &username, const QString &passwd, const QString &extraArgs) {\n    QJsonArray sl;\n    for (const QString &srv : servers) {\n      sl.push_back(QJsonValue(srv));\n    }\n    QJsonObject j;\n    j[\"server\"] = preferredServer;\n    j[\"availableServers\"] = sl;\n    j[\"cookie\"] = passwd;\n    QTextStream(stdout) << QJsonDocument(j).toJson(QJsonDocument::Compact) << \"\\n\";\n    emit connected();\n}",
  "abstract_func_before": "void VpnJson::connect(const QString &VAR_0, const QList<QString> &VAR_1, const QString &VAR_2, const QString &VAR_3, const QString &VAR_4) {\n    QJsonArray VAR_5;\n    for (const QString &VAR_6 : VAR_1) {\n      VAR_5.push_back(QJsonValue(VAR_6));\n    }\n    QJsonObject VAR_7;\n    VAR_7[\"server\"] = VAR_0;\n    VAR_7[\"availableServers\"] = VAR_5;\n    VAR_7[\"cookie\"] = VAR_3;\n    QTextStream(VAR_8) << QJsonDocument(VAR_7).toJson(QJsonDocument::Compact) << \"\\n\";\n    emit connected();\n}",
  "func_graph_path_before": "yuezk/GlobalProtect-openconnect/767286b898f2d1d361c3834de1d4d0b5836ffecd/vpn_json.cpp/vul/before/0.json",
  "func": "void VpnJson::connect(const QString &preferredServer, const QList<QString> &servers, const QString &username, const QString &passwd) {\n    QJsonArray sl;\n    for (const QString &srv : servers) {\n      sl.push_back(QJsonValue(srv));\n    }\n    QJsonObject j;\n    j[\"server\"] = preferredServer;\n    j[\"availableServers\"] = sl;\n    j[\"cookie\"] = passwd;\n    QTextStream(stdout) << QJsonDocument(j).toJson(QJsonDocument::Compact) << \"\\n\";\n    emit connected();\n}",
  "abstract_func": "void VpnJson::connect(const QString &VAR_0, const QList<QString> &VAR_1, const QString &VAR_2, const QString &VAR_3) {\n    QJsonArray VAR_4;\n    for (const QString &VAR_5 : VAR_1) {\n      VAR_4.push_back(QJsonValue(VAR_5));\n    }\n    QJsonObject VAR_6;\n    VAR_6[\"server\"] = VAR_0;\n    VAR_6[\"availableServers\"] = VAR_4;\n    VAR_6[\"cookie\"] = VAR_3;\n    QTextStream(VAR_7) << QJsonDocument(VAR_6).toJson(QJsonDocument::Compact) << \"\\n\";\n    emit connected();\n}",
  "func_graph_path": "yuezk/GlobalProtect-openconnect/767286b898f2d1d361c3834de1d4d0b5836ffecd/vpn_json.cpp/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,4 +1,4 @@\n-void VpnJson::connect(const QString &preferredServer, const QList<QString> &servers, const QString &username, const QString &passwd, const QString &extraArgs) {\n+void VpnJson::connect(const QString &preferredServer, const QList<QString> &servers, const QString &username, const QString &passwd) {\n     QJsonArray sl;\n     for (const QString &srv : servers) {\n       sl.push_back(QJsonValue(srv));",
  "diff_line_info": {
    "deleted_lines": [
      "void VpnJson::connect(const QString &preferredServer, const QList<QString> &servers, const QString &username, const QString &passwd, const QString &extraArgs) {"
    ],
    "added_lines": [
      "void VpnJson::connect(const QString &preferredServer, const QList<QString> &servers, const QString &username, const QString &passwd) {"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/yuezk/GlobalProtect-openconnect/pull/149",
  "description": {
    "pr_info": {
      "title": "Prepare release 1.4.3",
      "number": 149
    },
    "comment": [
      "1. Fixed security problem #113.\r\n1. Introduce a more elegant configuration. See https://github.com/yuezk/GlobalProtect-openconnect/wiki/Configuration\r\n1. Restart the `gpservice` after the package upgrade for Archlinux and Fedora.\r\n"
    ]
  },
  "Bug Filter": "Supporting & Non-Core Improvements",
  "Bug Filter Confidence": 0.6,
  "Bug Filter Response": "**Final Classification:** Supporting & Non-Core Improvements  \n**Confidence:** 0.6"
}