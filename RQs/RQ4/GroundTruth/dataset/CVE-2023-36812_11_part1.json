{
  "cve_id": "CVE-2023-36812",
  "cwe_ids": [
    "CWE-74"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
  "cvss_is_v3": true,
  "repo_name": "OpenTSDB/opentsdb",
  "commit_msg": "Fix for #2269 and #2267 XSS vulnerability.\nEscaping the user supplied input when outputing the HTML for the old BadRequest\nHTML handlers should help. Thanks to the reporters.\nFixes CVE-2018-13003.",
  "commit_hash": "fa88d3e4b5369f9fb73da384fab0b23e246309ba",
  "git_url": "https://github.com/OpenTSDB/opentsdb/commit/fa88d3e4b5369f9fb73da384fab0b23e246309ba",
  "file_path": "src/tsd/HttpQuery.java",
  "func_name": "internalError",
  "func_before": "@Override\n  public void internalError(final Exception cause) {\n    logError(\"Internal Server Error on \" + request().getUri(), cause);\n\n    if (this.api_version > 0) {\n      // always default to the latest version of the error formatter since we\n      // need to return something\n      switch (this.api_version) {\n        case 1:\n        default:\n          sendReply(HttpResponseStatus.INTERNAL_SERVER_ERROR,\n              serializer.formatErrorV1(cause));\n      }\n      return;\n    }\n\n    ThrowableProxy tp = new ThrowableProxy(cause);\n    tp.calculatePackagingData();\n    final String pretty_exc = ThrowableProxyUtil.asString(tp);\n    tp = null;\n    if (hasQueryStringParam(\"json\")) {\n      // 32 = 10 + some extra space as exceptions always have \\t's to escape.\n      final StringBuilder buf = new StringBuilder(32 + pretty_exc.length());\n      buf.append(\"{\\\"err\\\":\\\"\");\n      HttpQuery.escapeJson(pretty_exc, buf);\n      buf.append(\"\\\"}\");\n      sendReply(HttpResponseStatus.INTERNAL_SERVER_ERROR, buf);\n    } else {\n      sendReply(HttpResponseStatus.INTERNAL_SERVER_ERROR,\n                makePage(\"Internal Server Error\", \"Houston, we have a problem\",\n                         \"<blockquote>\"\n                         + \"<h1>Internal Server Error</h1>\"\n                         + \"Oops, sorry but your request failed due to a\"\n                         + \" server error.<br/><br/>\"\n                         + \"Please try again in 30 seconds.<pre>\"\n                         + pretty_exc\n                         + \"</pre></blockquote>\"));\n    }\n  }",
  "abstract_func_before": "@Override\n  public void internalError(final Exception VAR_0) {\n    logError(\"Internal Server Error on \" + request().getUri(), VAR_0);\n\n    if (this.api_version > 0) {\n      /* COMMENT_0 */\n      /* COMMENT_1 */\n      switch (this.api_version) {\n        case 1:\n        default:\n          sendReply(VAR_1.INTERNAL_SERVER_ERROR,\n              VAR_2.formatErrorV1(VAR_0));\n      }\n      return;\n    }\n\n    ThrowableProxy VAR_3 = new ThrowableProxy(VAR_0);\n    VAR_3.calculatePackagingData();\n    final String VAR_4 = VAR_5.asString(VAR_3);\n    VAR_3 = null;\n    if (hasQueryStringParam(\"json\")) {\n      /* COMMENT_2 */\n      final StringBuilder VAR_6 = new StringBuilder(32 + VAR_4.length());\n      VAR_6.append(\"{\\\"err\\\":\\\"\");\n      VAR_7.escapeJson(VAR_4, VAR_6);\n      VAR_6.append(\"\\\"}\");\n      sendReply(VAR_1.INTERNAL_SERVER_ERROR, VAR_6);\n    } else {\n      sendReply(VAR_1.INTERNAL_SERVER_ERROR,\n                makePage(\"Internal Server Error\", \"Houston, we have a problem\",\n                         \"<blockquote>\"\n                         + \"<h1>Internal Server Error</h1>\"\n                         + \"Oops, sorry but your request failed due to a\"\n                         + \" server error.<br/><br/>\"\n                         + \"Please try again in 30 seconds.<pre>\"\n                         + VAR_4\n                         + \"</pre></blockquote>\"));\n    }\n  }",
  "func_graph_path_before": "OpenTSDB/opentsdb/fa88d3e4b5369f9fb73da384fab0b23e246309ba/HttpQuery.java/vul/before/1.json",
  "func": "@Override\n  public void internalError(final Exception cause) {\n    logError(\"Internal Server Error on \" + request().getUri(), cause);\n\n    if (this.api_version > 0) {\n      // always default to the latest version of the error formatter since we\n      // need to return something\n      switch (this.api_version) {\n        case 1:\n        default:\n          sendReply(HttpResponseStatus.INTERNAL_SERVER_ERROR,\n              serializer.formatErrorV1(cause));\n      }\n      return;\n    }\n\n    ThrowableProxy tp = new ThrowableProxy(cause);\n    tp.calculatePackagingData();\n    final String pretty_exc = ThrowableProxyUtil.asString(tp);\n    tp = null;\n    if (hasQueryStringParam(\"json\")) {\n      // 32 = 10 + some extra space as exceptions always have \\t's to escape.\n      final StringBuilder buf = new StringBuilder(32 + pretty_exc.length());\n      buf.append(\"{\\\"err\\\":\\\"\");\n      HttpQuery.escapeJson(pretty_exc, buf);\n      buf.append(\"\\\"}\");\n      sendReply(HttpResponseStatus.INTERNAL_SERVER_ERROR, buf);\n    } else {\n      String response = \"\";\n      if (pretty_exc != null) {\n        response = HtmlEscapers.htmlEscaper().escape(pretty_exc);\n      }\n      sendReply(HttpResponseStatus.INTERNAL_SERVER_ERROR,\n                makePage(\"Internal Server Error\", \"Houston, we have a problem\",\n                         \"<blockquote>\"\n                         + \"<h1>Internal Server Error</h1>\"\n                         + \"Oops, sorry but your request failed due to a\"\n                         + \" server error.<br/><br/>\"\n                         + \"Please try again in 30 seconds.<pre>\"\n                         + response\n                         + \"</pre></blockquote>\"));\n    }\n  }",
  "abstract_func": "@Override\n  public void internalError(final Exception VAR_0) {\n    logError(\"Internal Server Error on \" + request().getUri(), VAR_0);\n\n    if (this.api_version > 0) {\n      /* COMMENT_0 */\n      /* COMMENT_1 */\n      switch (this.api_version) {\n        case 1:\n        default:\n          sendReply(VAR_1.INTERNAL_SERVER_ERROR,\n              VAR_2.formatErrorV1(VAR_0));\n      }\n      return;\n    }\n\n    ThrowableProxy VAR_3 = new ThrowableProxy(VAR_0);\n    VAR_3.calculatePackagingData();\n    final String VAR_4 = VAR_5.asString(VAR_3);\n    VAR_3 = null;\n    if (hasQueryStringParam(\"json\")) {\n      /* COMMENT_2 */\n      final StringBuilder VAR_6 = new StringBuilder(32 + VAR_4.length());\n      VAR_6.append(\"{\\\"err\\\":\\\"\");\n      VAR_7.escapeJson(VAR_4, VAR_6);\n      VAR_6.append(\"\\\"}\");\n      sendReply(VAR_1.INTERNAL_SERVER_ERROR, VAR_6);\n    } else {\n      String VAR_8 = \"\";\n      if (VAR_4 != null) {\n        VAR_8 = VAR_9.htmlEscaper().escape(VAR_4);\n      }\n      sendReply(VAR_1.INTERNAL_SERVER_ERROR,\n                makePage(\"Internal Server Error\", \"Houston, we have a problem\",\n                         \"<blockquote>\"\n                         + \"<h1>Internal Server Error</h1>\"\n                         + \"Oops, sorry but your request failed due to a\"\n                         + \" server error.<br/><br/>\"\n                         + \"Please try again in 30 seconds.<pre>\"\n                         + VAR_8\n                         + \"</pre></blockquote>\"));\n    }\n  }",
  "func_graph_path": "OpenTSDB/opentsdb/fa88d3e4b5369f9fb73da384fab0b23e246309ba/HttpQuery.java/vul/after/1.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -26,6 +26,10 @@\n       buf.append(\"\\\"}\");\n       sendReply(HttpResponseStatus.INTERNAL_SERVER_ERROR, buf);\n     } else {\n+      String response = \"\";\n+      if (pretty_exc != null) {\n+        response = HtmlEscapers.htmlEscaper().escape(pretty_exc);\n+      }\n       sendReply(HttpResponseStatus.INTERNAL_SERVER_ERROR,\n                 makePage(\"Internal Server Error\", \"Houston, we have a problem\",\n                          \"<blockquote>\"\n@@ -33,7 +37,7 @@\n                          + \"Oops, sorry but your request failed due to a\"\n                          + \" server error.<br/><br/>\"\n                          + \"Please try again in 30 seconds.<pre>\"\n-                         + pretty_exc\n+                         + response\n                          + \"</pre></blockquote>\"));\n     }\n   }",
  "diff_line_info": {
    "deleted_lines": [
      "                         + pretty_exc"
    ],
    "added_lines": [
      "      String response = \"\";",
      "      if (pretty_exc != null) {",
      "        response = HtmlEscapers.htmlEscaper().escape(pretty_exc);",
      "      }",
      "                         + response"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/OpenTSDB/opentsdb/pull/2274",
  "description": {
    "pr_info": {
      "title": "Fix for #2269 and #2267 XSS vulnerability.",
      "number": 2274
    },
    "comment": [
      "Escaping the user supplied input when outputing the HTML for the old BadRequest HTML handlers should help. Thanks to the reporters. Fixes CVE-2018-13003."
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.95"
}