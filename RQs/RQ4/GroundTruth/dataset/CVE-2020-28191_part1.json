{
  "cve_id": "CVE-2020-28191",
  "cwe_ids": [
    "CWE-352"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H",
  "cvss_is_v3": true,
  "repo_name": "togglz",
  "commit_msg": "Added CSRF protection to the togglz console via a CSRF token passed between the server and the clinet. This remediates the vulnerabilty CVE-2020-28191 by blocking CSRF attacks as the attcker will not be able to guess the CSRF token value. (#495)\n\nThis has been implemented with either the session timeout of the application the togglz console is embedded in. Or if no user session is available it defaults to a 10 minute timeout for the CSRF token.\r\nThis CSRF token does not interfere with either OWASP's CSRFGuard or Spring-Security's CSRF protection if they are used within the application.\r\n\r\nCo-authored-by: Joseph Beeton <joseph.p.beeton1@aexp.com>",
  "commit_hash": "ed66e3f584de954297ebaf98ea4a235286784707",
  "git_url": "https://github.com/togglz/togglz/commit/ed66e3f584de954297ebaf98ea4a235286784707",
  "file_path": "console/src/main/java/org/togglz/console/handlers/edit/EditPageHandler.java",
  "func_name": "renderEditPage",
  "func_before": "private void renderEditPage(RequestEvent event, FeatureModel featureModel) throws IOException {\n        List<CSRFToken> tokens = new ArrayList<>();\n        for (CSRFTokenProvider provider : Services.get(CSRFTokenProvider.class)) {\n            CSRFToken token = provider.getToken(event.getRequest());\n            if (token != null) {\n                tokens.add(token);\n            }\n        }\n\n        Map<String, Object> model = new HashMap<>();\n        model.put(\"model\", featureModel);\n        model.put(\"tokens\", tokens);\n\n        String template = getResourceAsString(\"edit.html\");\n        String content = new Engine().transform(template, model);\n        writeResponse(event, content);\n    }",
  "abstract_func_before": "private void renderEditPage(RequestEvent VAR_0, FeatureModel VAR_1) throws IOException {\n        List<CSRFToken> VAR_2 = new ArrayList<>();\n        for (CSRFTokenProvider VAR_3 : VAR_4.get(CSRFTokenProvider.class)) {\n            CSRFToken VAR_5 = VAR_3.getToken(VAR_0.getRequest());\n            if (VAR_5 != null) {\n                VAR_2.add(VAR_5);\n            }\n        }\n\n        Map<String, Object> VAR_6 = new HashMap<>();\n        VAR_6.put(\"model\", VAR_1);\n        VAR_6.put(\"tokens\", VAR_2);\n\n        String VAR_7 = getResourceAsString(\"edit.html\");\n        String VAR_8 = new Engine().transform(VAR_7, VAR_6);\n        writeResponse(VAR_0, VAR_8);\n    }",
  "func_graph_path_before": "togglz/ed66e3f584de954297ebaf98ea4a235286784707/EditPageHandler.java/vul/before/0.json",
  "func": "private void renderEditPage(RequestEvent event, FeatureModel featureModel) throws IOException {\n        List<CSRFToken> tokens = new ArrayList<>();\n        for (CSRFTokenProvider provider : Services.get(CSRFTokenProvider.class)) {\n            CSRFToken token = provider.getToken(event.getRequest());\n            if (token != null) {\n                tokens.add(token);\n            }\n        }\n        Map<String, Object> model = new HashMap<>();\n        model.put(\"model\", featureModel);\n        model.put(\"tokens\", tokens);\n\n        String template = getResourceAsString(\"edit.html\");\n        String content = new Engine().transform(template, model);\n        writeResponse(event, content);\n    }",
  "abstract_func": "private void renderEditPage(RequestEvent VAR_0, FeatureModel VAR_1) throws IOException {\n        List<CSRFToken> VAR_2 = new ArrayList<>();\n        for (CSRFTokenProvider VAR_3 : VAR_4.get(CSRFTokenProvider.class)) {\n            CSRFToken VAR_5 = VAR_3.getToken(VAR_0.getRequest());\n            if (VAR_5 != null) {\n                VAR_2.add(VAR_5);\n            }\n        }\n        Map<String, Object> VAR_6 = new HashMap<>();\n        VAR_6.put(\"model\", VAR_1);\n        VAR_6.put(\"tokens\", VAR_2);\n\n        String VAR_7 = getResourceAsString(\"edit.html\");\n        String VAR_8 = new Engine().transform(VAR_7, VAR_6);\n        writeResponse(VAR_0, VAR_8);\n    }",
  "func_graph_path": "togglz/ed66e3f584de954297ebaf98ea4a235286784707/EditPageHandler.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -6,7 +6,6 @@\n                 tokens.add(token);\n             }\n         }\n-\n         Map<String, Object> model = new HashMap<>();\n         model.put(\"model\", featureModel);\n         model.put(\"tokens\", tokens);",
  "diff_line_info": {
    "deleted_lines": [
      ""
    ],
    "added_lines": []
  },
  "is_vul": true,
  "pr_url": "https://github.com/togglz/togglz/pull/495",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/togglz/togglz/pull/495: 403 Client Error: Forbidden for url: https://api.github.com/repos/togglz/togglz/pulls/495",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 1.0"
}