{
  "cve_id": "CVE-2020-13991",
  "cwe_ids": [
    "CWE-Other"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "jerryscript-project/jerryscript",
  "commit_msg": "Correct release of spread arguments\n\nDuring the `opfunc_spread_arguments` argument release process\nthe stack pointer was incremented early resulting in a state where\none of the arguments was not freed causing a memory leak.\n\nJerryScript-DCO-1.0-Signed-off-by: Peter Gal pgal.usz@partner.samsung.com",
  "commit_hash": "7d64ec68d7827ea634e2bdc89fdac0b5662cfe4b",
  "git_url": "https://github.com/jerryscript-project/jerryscript/commit/7d64ec68d7827ea634e2bdc89fdac0b5662cfe4b",
  "file_path": "jerry-core/vm/opcodes.c",
  "func_name": "opfunc_spread_arguments",
  "func_before": "JERRY_ATTR_NOINLINE ecma_collection_t *\nopfunc_spread_arguments (ecma_value_t *stack_top_p, /**< pointer to the current stack top */\n                         uint8_t arguments_list_len) /**< number of arguments */\n{\n  ecma_collection_t *buff_p = ecma_new_collection ();\n\n  for (uint32_t i = 0; i < arguments_list_len; i++)\n  {\n    ecma_value_t arg = *stack_top_p++;\n\n    if (arg != ECMA_VALUE_SPREAD_ELEMENT)\n    {\n      ecma_collection_push_back (buff_p, arg);\n      continue;\n    }\n\n    ecma_value_t ret_value = ECMA_VALUE_ERROR;\n    ecma_value_t spread_value = *stack_top_p++;\n    i++;\n\n    ecma_value_t iterator = ecma_op_get_iterator (spread_value, ECMA_VALUE_EMPTY);\n\n    if (!ECMA_IS_VALUE_ERROR (iterator))\n    {\n      while (true)\n      {\n        ecma_value_t next_value = ecma_op_iterator_step (iterator);\n\n        if (ECMA_IS_VALUE_ERROR (next_value))\n        {\n          break;\n        }\n\n        if (ecma_is_value_false (next_value))\n        {\n          ret_value = ECMA_VALUE_EMPTY;\n          break;\n        }\n\n        ecma_value_t value = ecma_op_iterator_value (next_value);\n\n        ecma_free_value (next_value);\n\n        if (ECMA_IS_VALUE_ERROR (value))\n        {\n          break;\n        }\n\n        ecma_collection_push_back (buff_p, value);\n      }\n    }\n\n    ecma_free_value (iterator);\n    ecma_free_value (spread_value);\n\n    if (ECMA_IS_VALUE_ERROR (ret_value))\n    {\n      for (uint32_t k = i + 1; k < arguments_list_len; k++)\n      {\n        ecma_free_value (*(++stack_top_p));\n      }\n\n      ecma_collection_free (buff_p);\n      buff_p = NULL;\n      break;\n    }\n  }\n\n  return buff_p;\n}",
  "abstract_func_before": "JERRY_ATTR_NOINLINE VAR_0 *\nopfunc_spread_arguments (ecma_value_t *VAR_1, /* COMMENT_0 */\n                         uint8_t VAR_2) /* COMMENT_1 */\n{\n  ecma_collection_t *VAR_3 = ecma_new_collection ();\n\n  for (uint32_t VAR_4 = 0; VAR_4 < VAR_2; VAR_4++)\n  {\n    ecma_value_t VAR_5 = *VAR_1++;\n\n    if (VAR_5 != VAR_6)\n    {\n      ecma_collection_push_back (VAR_3, VAR_5);\n      continue;\n    }\n\n    ecma_value_t VAR_7 = VAR_8;\n    ecma_value_t VAR_9 = *VAR_1++;\n    VAR_4++;\n\n    ecma_value_t VAR_10 = ecma_op_get_iterator (VAR_9, VAR_11);\n\n    if (!ECMA_IS_VALUE_ERROR (VAR_10))\n    {\n      while (true)\n      {\n        ecma_value_t VAR_12 = ecma_op_iterator_step (VAR_10);\n\n        if (ECMA_IS_VALUE_ERROR (VAR_12))\n        {\n          break;\n        }\n\n        if (ecma_is_value_false (VAR_12))\n        {\n          VAR_7 = VAR_11;\n          break;\n        }\n\n        ecma_value_t VAR_13 = ecma_op_iterator_value (VAR_12);\n\n        ecma_free_value (VAR_12);\n\n        if (ECMA_IS_VALUE_ERROR (VAR_13))\n        {\n          break;\n        }\n\n        ecma_collection_push_back (VAR_3, VAR_13);\n      }\n    }\n\n    ecma_free_value (VAR_10);\n    ecma_free_value (VAR_9);\n\n    if (ECMA_IS_VALUE_ERROR (VAR_7))\n    {\n      for (uint32_t VAR_14 = VAR_4 + 1; VAR_14 < VAR_2; VAR_14++)\n      {\n        ecma_free_value (*(++VAR_1));\n      }\n\n      ecma_collection_free (VAR_3);\n      VAR_3 = NULL;\n      break;\n    }\n  }\n\n  return VAR_3;\n}",
  "func_graph_path_before": null,
  "func": "JERRY_ATTR_NOINLINE ecma_collection_t *\nopfunc_spread_arguments (ecma_value_t *stack_top_p, /**< pointer to the current stack top */\n                         uint8_t arguments_list_len) /**< number of arguments */\n{\n  ecma_collection_t *buff_p = ecma_new_collection ();\n\n  for (uint32_t i = 0; i < arguments_list_len; i++)\n  {\n    ecma_value_t arg = *stack_top_p++;\n\n    if (arg != ECMA_VALUE_SPREAD_ELEMENT)\n    {\n      ecma_collection_push_back (buff_p, arg);\n      continue;\n    }\n\n    ecma_value_t ret_value = ECMA_VALUE_ERROR;\n    ecma_value_t spread_value = *stack_top_p++;\n    i++;\n\n    ecma_value_t iterator = ecma_op_get_iterator (spread_value, ECMA_VALUE_EMPTY);\n\n    if (!ECMA_IS_VALUE_ERROR (iterator))\n    {\n      while (true)\n      {\n        ecma_value_t next_value = ecma_op_iterator_step (iterator);\n\n        if (ECMA_IS_VALUE_ERROR (next_value))\n        {\n          break;\n        }\n\n        if (ecma_is_value_false (next_value))\n        {\n          ret_value = ECMA_VALUE_EMPTY;\n          break;\n        }\n\n        ecma_value_t value = ecma_op_iterator_value (next_value);\n\n        ecma_free_value (next_value);\n\n        if (ECMA_IS_VALUE_ERROR (value))\n        {\n          break;\n        }\n\n        ecma_collection_push_back (buff_p, value);\n      }\n    }\n\n    ecma_free_value (iterator);\n    ecma_free_value (spread_value);\n\n    if (ECMA_IS_VALUE_ERROR (ret_value))\n    {\n      for (uint32_t k = i + 1; k < arguments_list_len; k++)\n      {\n        ecma_free_value (*stack_top_p++);\n      }\n\n      ecma_collection_free (buff_p);\n      buff_p = NULL;\n      break;\n    }\n  }\n\n  return buff_p;\n}",
  "abstract_func": "JERRY_ATTR_NOINLINE VAR_0 *\nopfunc_spread_arguments (ecma_value_t *VAR_1, /* COMMENT_0 */\n                         uint8_t VAR_2) /* COMMENT_1 */\n{\n  ecma_collection_t *VAR_3 = ecma_new_collection ();\n\n  for (uint32_t VAR_4 = 0; VAR_4 < VAR_2; VAR_4++)\n  {\n    ecma_value_t VAR_5 = *VAR_1++;\n\n    if (VAR_5 != VAR_6)\n    {\n      ecma_collection_push_back (VAR_3, VAR_5);\n      continue;\n    }\n\n    ecma_value_t VAR_7 = VAR_8;\n    ecma_value_t VAR_9 = *VAR_1++;\n    VAR_4++;\n\n    ecma_value_t VAR_10 = ecma_op_get_iterator (VAR_9, VAR_11);\n\n    if (!ECMA_IS_VALUE_ERROR (VAR_10))\n    {\n      while (true)\n      {\n        ecma_value_t VAR_12 = ecma_op_iterator_step (VAR_10);\n\n        if (ECMA_IS_VALUE_ERROR (VAR_12))\n        {\n          break;\n        }\n\n        if (ecma_is_value_false (VAR_12))\n        {\n          VAR_7 = VAR_11;\n          break;\n        }\n\n        ecma_value_t VAR_13 = ecma_op_iterator_value (VAR_12);\n\n        ecma_free_value (VAR_12);\n\n        if (ECMA_IS_VALUE_ERROR (VAR_13))\n        {\n          break;\n        }\n\n        ecma_collection_push_back (VAR_3, VAR_13);\n      }\n    }\n\n    ecma_free_value (VAR_10);\n    ecma_free_value (VAR_9);\n\n    if (ECMA_IS_VALUE_ERROR (VAR_7))\n    {\n      for (uint32_t VAR_14 = VAR_4 + 1; VAR_14 < VAR_2; VAR_14++)\n      {\n        ecma_free_value (*VAR_1++);\n      }\n\n      ecma_collection_free (VAR_3);\n      VAR_3 = NULL;\n      break;\n    }\n  }\n\n  return VAR_3;\n}",
  "func_graph_path": null,
  "diff_func": "--- func_before\n+++ func_after\n@@ -57,7 +57,7 @@\n     {\n       for (uint32_t k = i + 1; k < arguments_list_len; k++)\n       {\n-        ecma_free_value (*(++stack_top_p));\n+        ecma_free_value (*stack_top_p++);\n       }\n \n       ecma_collection_free (buff_p);",
  "diff_line_info": {
    "deleted_lines": [
      "        ecma_free_value (*(++stack_top_p));"
    ],
    "added_lines": [
      "        ecma_free_value (*stack_top_p++);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/jerryscript-project/jerryscript/pull/3867",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/jerryscript-project/jerryscript/pull/3867: 403 Client Error: Forbidden for url: https://api.github.com/repos/jerryscript-project/jerryscript/pulls/3867",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 1.0"
}