{
  "cve_id": "CVE-2022-45868",
  "cwe_ids": [
    "CWE-312"
  ],
  "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
  "cvss_is_v3": true,
  "repo_name": "h2database",
  "commit_msg": "Disallow plain webAdminPassword values to force usage of hashes",
  "commit_hash": "23ee3d0b973923c135fa01356c8eaed40b895393",
  "git_url": "https://github.com/h2database/h2database/commit/23ee3d0b973923c135fa01356c8eaed40b895393",
  "file_path": "h2/src/test/org/h2/test/server/TestWeb.java",
  "func_name": "testTools",
  "func_before": "private void testTools() throws Exception {\n        if (config.memory || config.cipher != null) {\n            return;\n        }\n        deleteDb(getTestName());\n        Connection conn = getConnection(getTestName());\n        conn.createStatement().execute(\n                \"create table test(id int) as select 1\");\n        conn.close();\n        Server server = new Server();\n        server.setOut(new PrintStream(new ByteArrayOutputStream()));\n        server.runTool(\"-web\", \"-webPort\", \"8182\",\n                \"-properties\", \"null\", \"-tcp\", \"-tcpPort\", \"9101\", \"-webAdminPassword\", \"123\");\n        try {\n            String url = \"http://localhost:8182\";\n            WebClient client;\n            String result;\n            client = new WebClient();\n            result = client.get(url);\n            client.readSessionId(result);\n            result = client.get(url, \"adminLogin.do?password=123\");\n            result = client.get(url, \"tools.jsp\");\n            FileUtils.delete(getBaseDir() + \"/backup.zip\");\n            result = client.get(url, \"tools.do?tool=Backup&args=-dir,\" +\n                    getBaseDir() + \",-db,\" + getTestName() + \",-file,\" +\n                    getBaseDir() + \"/backup.zip\");\n            deleteDb(getTestName());\n            assertTrue(FileUtils.exists(getBaseDir() + \"/backup.zip\"));\n            result = client.get(url,\n                    \"tools.do?tool=DeleteDbFiles&args=-dir,\" +\n                    getBaseDir() + \",-db,\" + getTestName());\n            String fn = getBaseDir() + \"/\" + getTestName() + Constants.SUFFIX_MV_FILE;\n            assertFalse(FileUtils.exists(fn));\n            result = client.get(url, \"tools.do?tool=Restore&args=-dir,\" +\n                    getBaseDir() + \",-db,\" + getTestName() +\",-file,\" + getBaseDir() +\n                    \"/backup.zip\");\n            assertTrue(FileUtils.exists(fn));\n            FileUtils.delete(getBaseDir() + \"/web.h2.sql\");\n            FileUtils.delete(getBaseDir() + \"/backup.zip\");\n            result = client.get(url, \"tools.do?tool=Recover&args=-dir,\" +\n                    getBaseDir() + \",-db,\" + getTestName());\n            assertTrue(FileUtils.exists(getBaseDir() + \"/\" + getTestName() + \".h2.sql\"));\n            FileUtils.delete(getBaseDir() + \"/web.h2.sql\");\n            result = client.get(url, \"tools.do?tool=RunScript&args=-script,\" +\n                    getBaseDir() + \"/\" + getTestName() + \".h2.sql,-url,\" +\n                    getURL(getTestName(), true) +\n                    \",-user,\" + getUser() + \",-password,\" + getPassword());\n            FileUtils.delete(getBaseDir() + \"/\" + getTestName() + \".h2.sql\");\n            assertTrue(FileUtils.exists(fn));\n            deleteDb(getTestName());\n        } finally {\n            server.shutdown();\n        }\n    }",
  "abstract_func_before": "private void testTools() throws Exception {\n        if (VAR_0.memory || VAR_0.cipher != null) {\n            return;\n        }\n        deleteDb(getTestName());\n        Connection VAR_1 = getConnection(getTestName());\n        VAR_1.createStatement().execute(\n                \"create table test(id int) as select 1\");\n        VAR_1.close();\n        Server VAR_2 = new Server();\n        VAR_2.setOut(new PrintStream(new ByteArrayOutputStream()));\n        VAR_2.runTool(\"-web\", \"-webPort\", \"8182\",\n                \"-properties\", \"null\", \"-tcp\", \"-tcpPort\", \"9101\", \"-webAdminPassword\", \"123\");\n        try {\n            String VAR_3 = \"http://localhost:8182\";\n            WebClient VAR_4;\n            String VAR_5;\n            VAR_4 = new WebClient();\n            VAR_5 = VAR_4.get(VAR_3);\n            VAR_4.readSessionId(VAR_5);\n            VAR_5 = VAR_4.get(VAR_3, \"adminLogin.do?password=123\");\n            VAR_5 = VAR_4.get(VAR_3, \"tools.jsp\");\n            VAR_6.delete(getBaseDir() + \"/backup.zip\");\n            VAR_5 = VAR_4.get(VAR_3, \"tools.do?tool=Backup&args=-dir,\" +\n                    getBaseDir() + \",-db,\" + getTestName() + \",-file,\" +\n                    getBaseDir() + \"/backup.zip\");\n            deleteDb(getTestName());\n            assertTrue(VAR_6.exists(getBaseDir() + \"/backup.zip\"));\n            VAR_5 = VAR_4.get(VAR_3,\n                    \"tools.do?tool=DeleteDbFiles&args=-dir,\" +\n                    getBaseDir() + \",-db,\" + getTestName());\n            String VAR_7 = getBaseDir() + \"/\" + getTestName() + VAR_8.SUFFIX_MV_FILE;\n            assertFalse(VAR_6.exists(VAR_7));\n            VAR_5 = VAR_4.get(VAR_3, \"tools.do?tool=Restore&args=-dir,\" +\n                    getBaseDir() + \",-db,\" + getTestName() +\",-file,\" + getBaseDir() +\n                    \"/backup.zip\");\n            assertTrue(VAR_6.exists(VAR_7));\n            VAR_6.delete(getBaseDir() + \"/web.h2.sql\");\n            VAR_6.delete(getBaseDir() + \"/backup.zip\");\n            VAR_5 = VAR_4.get(VAR_3, \"tools.do?tool=Recover&args=-dir,\" +\n                    getBaseDir() + \",-db,\" + getTestName());\n            assertTrue(VAR_6.exists(getBaseDir() + \"/\" + getTestName() + \".h2.sql\"));\n            VAR_6.delete(getBaseDir() + \"/web.h2.sql\");\n            VAR_5 = VAR_4.get(VAR_3, \"tools.do?tool=RunScript&args=-script,\" +\n                    getBaseDir() + \"/\" + getTestName() + \".h2.sql,-url,\" +\n                    getURL(getTestName(), true) +\n                    \",-user,\" + getUser() + \",-password,\" + getPassword());\n            VAR_6.delete(getBaseDir() + \"/\" + getTestName() + \".h2.sql\");\n            assertTrue(VAR_6.exists(VAR_7));\n            deleteDb(getTestName());\n        } finally {\n            VAR_2.shutdown();\n        }\n    }",
  "func_graph_path_before": "h2database/23ee3d0b973923c135fa01356c8eaed40b895393/TestWeb.java/vul/before/0.json",
  "func": "private void testTools() throws Exception {\n        if (config.memory || config.cipher != null) {\n            return;\n        }\n        deleteDb(getTestName());\n        Connection conn = getConnection(getTestName());\n        conn.createStatement().execute(\n                \"create table test(id int) as select 1\");\n        conn.close();\n        String hash = WebServer.encodeAdminPassword(\"1234567890AB\");\n        try {\n            Server.main(\"-web\", \"-webPort\", \"8182\",\n                    \"-properties\", \"null\", \"-tcp\", \"-tcpPort\", \"9101\", \"-webAdminPassword\", hash);\n            fail(\"Expected exception\");\n        } catch (JdbcSQLFeatureNotSupportedException e) {\n            // Expected\n        }\n        Server server = new Server();\n        server.setOut(new PrintStream(new ByteArrayOutputStream()));\n        try {\n            server.runTool(\"-web\", \"-webPort\", \"8182\",\n                    \"-properties\", \"null\", \"-tcp\", \"-tcpPort\", \"9101\", \"-webAdminPassword\", \"123\");\n            fail(\"Expected exception\");\n        } catch (JdbcSQLNonTransientException e) {\n            // Expected\n        }\n        server.runTool(\"-web\", \"-webPort\", \"8182\",\n                \"-properties\", \"null\", \"-tcp\", \"-tcpPort\", \"9101\", \"-webAdminPassword\", hash);\n        try {\n            String url = \"http://localhost:8182\";\n            WebClient client;\n            String result;\n            client = new WebClient();\n            result = client.get(url);\n            client.readSessionId(result);\n            result = client.get(url, \"adminLogin.do?password=1234567890AB\");\n            result = client.get(url, \"tools.jsp\");\n            FileUtils.delete(getBaseDir() + \"/backup.zip\");\n            result = client.get(url, \"tools.do?tool=Backup&args=-dir,\" +\n                    getBaseDir() + \",-db,\" + getTestName() + \",-file,\" +\n                    getBaseDir() + \"/backup.zip\");\n            deleteDb(getTestName());\n            assertTrue(FileUtils.exists(getBaseDir() + \"/backup.zip\"));\n            result = client.get(url,\n                    \"tools.do?tool=DeleteDbFiles&args=-dir,\" +\n                    getBaseDir() + \",-db,\" + getTestName());\n            String fn = getBaseDir() + \"/\" + getTestName() + Constants.SUFFIX_MV_FILE;\n            assertFalse(FileUtils.exists(fn));\n            result = client.get(url, \"tools.do?tool=Restore&args=-dir,\" +\n                    getBaseDir() + \",-db,\" + getTestName() +\",-file,\" + getBaseDir() +\n                    \"/backup.zip\");\n            assertTrue(FileUtils.exists(fn));\n            FileUtils.delete(getBaseDir() + \"/web.h2.sql\");\n            FileUtils.delete(getBaseDir() + \"/backup.zip\");\n            result = client.get(url, \"tools.do?tool=Recover&args=-dir,\" +\n                    getBaseDir() + \",-db,\" + getTestName());\n            assertTrue(FileUtils.exists(getBaseDir() + \"/\" + getTestName() + \".h2.sql\"));\n            FileUtils.delete(getBaseDir() + \"/web.h2.sql\");\n            result = client.get(url, \"tools.do?tool=RunScript&args=-script,\" +\n                    getBaseDir() + \"/\" + getTestName() + \".h2.sql,-url,\" +\n                    getURL(getTestName(), true) +\n                    \",-user,\" + getUser() + \",-password,\" + getPassword());\n            FileUtils.delete(getBaseDir() + \"/\" + getTestName() + \".h2.sql\");\n            assertTrue(FileUtils.exists(fn));\n            deleteDb(getTestName());\n        } finally {\n            server.shutdown();\n        }\n    }",
  "abstract_func": "private void testTools() throws Exception {\n        if (VAR_0.memory || VAR_0.cipher != null) {\n            return;\n        }\n        deleteDb(getTestName());\n        Connection VAR_1 = getConnection(getTestName());\n        VAR_1.createStatement().execute(\n                \"create table test(id int) as select 1\");\n        VAR_1.close();\n        String VAR_2 = VAR_3.encodeAdminPassword(\"1234567890AB\");\n        try {\n            VAR_4.main(\"-web\", \"-webPort\", \"8182\",\n                    \"-properties\", \"null\", \"-tcp\", \"-tcpPort\", \"9101\", \"-webAdminPassword\", VAR_2);\n            fail(\"Expected exception\");\n        } catch (JdbcSQLFeatureNotSupportedException VAR_5) {\n            /* COMMENT_0 */\n        }\n        Server VAR_6 = new Server();\n        VAR_6.setOut(new PrintStream(new ByteArrayOutputStream()));\n        try {\n            VAR_6.runTool(\"-web\", \"-webPort\", \"8182\",\n                    \"-properties\", \"null\", \"-tcp\", \"-tcpPort\", \"9101\", \"-webAdminPassword\", \"123\");\n            fail(\"Expected exception\");\n        } catch (JdbcSQLNonTransientException VAR_5) {\n            /* COMMENT_0 */\n        }\n        VAR_6.runTool(\"-web\", \"-webPort\", \"8182\",\n                \"-properties\", \"null\", \"-tcp\", \"-tcpPort\", \"9101\", \"-webAdminPassword\", VAR_2);\n        try {\n            String VAR_7 = \"http://localhost:8182\";\n            WebClient VAR_8;\n            String VAR_9;\n            VAR_8 = new WebClient();\n            VAR_9 = VAR_8.get(VAR_7);\n            VAR_8.readSessionId(VAR_9);\n            VAR_9 = VAR_8.get(VAR_7, \"adminLogin.do?password=1234567890AB\");\n            VAR_9 = VAR_8.get(VAR_7, \"tools.jsp\");\n            VAR_10.delete(getBaseDir() + \"/backup.zip\");\n            VAR_9 = VAR_8.get(VAR_7, \"tools.do?tool=Backup&args=-dir,\" +\n                    getBaseDir() + \",-db,\" + getTestName() + \",-file,\" +\n                    getBaseDir() + \"/backup.zip\");\n            deleteDb(getTestName());\n            assertTrue(VAR_10.exists(getBaseDir() + \"/backup.zip\"));\n            VAR_9 = VAR_8.get(VAR_7,\n                    \"tools.do?tool=DeleteDbFiles&args=-dir,\" +\n                    getBaseDir() + \",-db,\" + getTestName());\n            String VAR_11 = getBaseDir() + \"/\" + getTestName() + VAR_12.SUFFIX_MV_FILE;\n            assertFalse(VAR_10.exists(VAR_11));\n            VAR_9 = VAR_8.get(VAR_7, \"tools.do?tool=Restore&args=-dir,\" +\n                    getBaseDir() + \",-db,\" + getTestName() +\",-file,\" + getBaseDir() +\n                    \"/backup.zip\");\n            assertTrue(VAR_10.exists(VAR_11));\n            VAR_10.delete(getBaseDir() + \"/web.h2.sql\");\n            VAR_10.delete(getBaseDir() + \"/backup.zip\");\n            VAR_9 = VAR_8.get(VAR_7, \"tools.do?tool=Recover&args=-dir,\" +\n                    getBaseDir() + \",-db,\" + getTestName());\n            assertTrue(VAR_10.exists(getBaseDir() + \"/\" + getTestName() + \".h2.sql\"));\n            VAR_10.delete(getBaseDir() + \"/web.h2.sql\");\n            VAR_9 = VAR_8.get(VAR_7, \"tools.do?tool=RunScript&args=-script,\" +\n                    getBaseDir() + \"/\" + getTestName() + \".h2.sql,-url,\" +\n                    getURL(getTestName(), true) +\n                    \",-user,\" + getUser() + \",-password,\" + getPassword());\n            VAR_10.delete(getBaseDir() + \"/\" + getTestName() + \".h2.sql\");\n            assertTrue(VAR_10.exists(VAR_11));\n            deleteDb(getTestName());\n        } finally {\n            VAR_6.shutdown();\n        }\n    }",
  "func_graph_path": "h2database/23ee3d0b973923c135fa01356c8eaed40b895393/TestWeb.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -7,10 +7,25 @@\n         conn.createStatement().execute(\n                 \"create table test(id int) as select 1\");\n         conn.close();\n+        String hash = WebServer.encodeAdminPassword(\"1234567890AB\");\n+        try {\n+            Server.main(\"-web\", \"-webPort\", \"8182\",\n+                    \"-properties\", \"null\", \"-tcp\", \"-tcpPort\", \"9101\", \"-webAdminPassword\", hash);\n+            fail(\"Expected exception\");\n+        } catch (JdbcSQLFeatureNotSupportedException e) {\n+            // Expected\n+        }\n         Server server = new Server();\n         server.setOut(new PrintStream(new ByteArrayOutputStream()));\n+        try {\n+            server.runTool(\"-web\", \"-webPort\", \"8182\",\n+                    \"-properties\", \"null\", \"-tcp\", \"-tcpPort\", \"9101\", \"-webAdminPassword\", \"123\");\n+            fail(\"Expected exception\");\n+        } catch (JdbcSQLNonTransientException e) {\n+            // Expected\n+        }\n         server.runTool(\"-web\", \"-webPort\", \"8182\",\n-                \"-properties\", \"null\", \"-tcp\", \"-tcpPort\", \"9101\", \"-webAdminPassword\", \"123\");\n+                \"-properties\", \"null\", \"-tcp\", \"-tcpPort\", \"9101\", \"-webAdminPassword\", hash);\n         try {\n             String url = \"http://localhost:8182\";\n             WebClient client;\n@@ -18,7 +33,7 @@\n             client = new WebClient();\n             result = client.get(url);\n             client.readSessionId(result);\n-            result = client.get(url, \"adminLogin.do?password=123\");\n+            result = client.get(url, \"adminLogin.do?password=1234567890AB\");\n             result = client.get(url, \"tools.jsp\");\n             FileUtils.delete(getBaseDir() + \"/backup.zip\");\n             result = client.get(url, \"tools.do?tool=Backup&args=-dir,\" +",
  "diff_line_info": {
    "deleted_lines": [
      "                \"-properties\", \"null\", \"-tcp\", \"-tcpPort\", \"9101\", \"-webAdminPassword\", \"123\");",
      "            result = client.get(url, \"adminLogin.do?password=123\");"
    ],
    "added_lines": [
      "        String hash = WebServer.encodeAdminPassword(\"1234567890AB\");",
      "        try {",
      "            Server.main(\"-web\", \"-webPort\", \"8182\",",
      "                    \"-properties\", \"null\", \"-tcp\", \"-tcpPort\", \"9101\", \"-webAdminPassword\", hash);",
      "            fail(\"Expected exception\");",
      "        } catch (JdbcSQLFeatureNotSupportedException e) {",
      "            // Expected",
      "        }",
      "        try {",
      "            server.runTool(\"-web\", \"-webPort\", \"8182\",",
      "                    \"-properties\", \"null\", \"-tcp\", \"-tcpPort\", \"9101\", \"-webAdminPassword\", \"123\");",
      "            fail(\"Expected exception\");",
      "        } catch (JdbcSQLNonTransientException e) {",
      "            // Expected",
      "        }",
      "                \"-properties\", \"null\", \"-tcp\", \"-tcpPort\", \"9101\", \"-webAdminPassword\", hash);",
      "            result = client.get(url, \"adminLogin.do?password=1234567890AB\");"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/h2database/h2database/pull/3833",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/h2database/h2database/pull/3833: 403 Client Error: Forbidden for url: https://api.github.com/repos/h2database/h2database/pulls/3833",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.95\n\n**Step-by-Step Explanation:**\n\n1. **Input Analysis:** The commit message indicates a change to enforce hashed passwords, preventing plain text usage. The vulnerability description confirms this is a security issue. The code diff shows tests enforcing password hashing and rejecting plain text.\n\n2. **Consistency Check:** The commit message and code changes are consistent; the patch enforces hashed passwords and tests for this behavior.\n\n3. **Purpose Evaluation:** The change addresses a security issue by preventing insecure plain text storage of passwords.\n\n4. **Security Vulnerability Assessment:** The patch fixes an exploitable weakness by enforcing hashed passwords, aligning with known security practices.\n\n5. **Confidence Scoring:** High confidence due to clear alignment between the commit, vulnerability, and code changes."
}