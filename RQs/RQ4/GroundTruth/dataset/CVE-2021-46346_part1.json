{
  "cve_id": "CVE-2021-46346",
  "cwe_ids": [
    "CWE-617"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "jerryscript-project/jerryscript",
  "commit_msg": "Date.prototype.setYear should invalidate cached tza\n\nThis patch fixes #4939 and fixes #4940.\n\nJerryScript-DCO-1.0-Signed-off-by: Robert Fancsik robert.fancsik@h-lab.eu",
  "commit_hash": "3a9bd349c55799db2cbf74e36b68f21617ade4f2",
  "git_url": "https://github.com/jerryscript-project/jerryscript/commit/3a9bd349c55799db2cbf74e36b68f21617ade4f2",
  "file_path": "jerry-core/ecma/builtin-objects/ecma-builtin-date-prototype.c",
  "func_name": "ecma_builtin_date_prototype_dispatch_set",
  "func_before": "static ecma_value_t\necma_builtin_date_prototype_dispatch_set (uint16_t builtin_routine_id, /**< built-in wide routine\n                                                                        *   identifier */\n                                          ecma_object_t *object_p, /**< date object */\n                                          const ecma_value_t arguments_list[], /**< list of arguments\n                                                                                *   passed to routine */\n                                          uint32_t arguments_number) /**< length of arguments' list */\n{\n  ecma_number_t converted_number[4];\n  uint32_t conversions = 0;\n\n  /* If the first argument is not specified, it is always converted to NaN. */\n  converted_number[0] = ecma_number_make_nan ();\n\n  switch (builtin_routine_id)\n  {\n#if JERRY_BUILTIN_ANNEXB\n    case ECMA_DATE_PROTOTYPE_SET_YEAR:\n#endif /* JERRY_BUILTIN_ANNEXB */\n    case ECMA_DATE_PROTOTYPE_SET_DATE:\n    case ECMA_DATE_PROTOTYPE_SET_UTC_DATE:\n    case ECMA_DATE_PROTOTYPE_SET_UTC_MILLISECONDS:\n    case ECMA_DATE_PROTOTYPE_SET_MILLISECONDS:\n    {\n      conversions = 1;\n      break;\n    }\n    case ECMA_DATE_PROTOTYPE_SET_MONTH:\n    case ECMA_DATE_PROTOTYPE_SET_UTC_MONTH:\n    case ECMA_DATE_PROTOTYPE_SET_UTC_SECONDS:\n    case ECMA_DATE_PROTOTYPE_SET_SECONDS:\n    {\n      conversions = 2;\n      break;\n    }\n    case ECMA_DATE_PROTOTYPE_SET_FULL_YEAR:\n    case ECMA_DATE_PROTOTYPE_SET_UTC_FULL_YEAR:\n    case ECMA_DATE_PROTOTYPE_SET_MINUTES:\n    case ECMA_DATE_PROTOTYPE_SET_UTC_MINUTES:\n    {\n      conversions = 3;\n      break;\n    }\n    default:\n    {\n      JERRY_ASSERT (builtin_routine_id == ECMA_DATE_PROTOTYPE_SET_HOURS\n                    || builtin_routine_id == ECMA_DATE_PROTOTYPE_SET_UTC_HOURS);\n\n      conversions = 4;\n      break;\n    }\n  }\n\n  if (conversions > arguments_number)\n  {\n    conversions = arguments_number;\n  }\n\n  for (uint32_t i = 0; i < conversions; i++)\n  {\n    ecma_value_t value = ecma_op_to_number (arguments_list[i], &converted_number[i]);\n\n    if (ECMA_IS_VALUE_ERROR (value))\n    {\n      return value;\n    }\n  }\n\n#if JERRY_ESNEXT\n  ecma_date_object_t *date_object_p = (ecma_date_object_t *) object_p;\n  ecma_number_t *date_value_p = &date_object_p->date_value;\n#else /* !JERRY_ESNEXT */\n  ecma_extended_object_t *ext_object_p = (ecma_extended_object_t *) object_p;\n  ecma_number_t *date_value_p = ECMA_GET_INTERNAL_VALUE_POINTER (ecma_number_t, ext_object_p->u.cls.u3.date);\n#endif /* JERRY_ESNEXT */\n\n  ecma_number_t date_value = *date_value_p;\n\n  if (!BUILTIN_DATE_FUNCTION_IS_UTC (builtin_routine_id))\n  {\n    ecma_number_t local_tza;\n\n#if JERRY_ESNEXT\n    if (date_object_p->header.u.cls.u1.date_flags & ECMA_DATE_TZA_SET)\n    {\n      local_tza = date_object_p->header.u.cls.u3.tza;\n      JERRY_ASSERT (local_tza == ecma_date_local_time_zone_adjustment (date_value));\n    }\n    else\n#endif /* JERRY_ESNEXT */\n    {\n      local_tza = ecma_date_local_time_zone_adjustment (date_value);\n    }\n\n    date_value += local_tza;\n  }\n\n  ecma_number_t day_part;\n  ecma_number_t time_part;\n\n  if (builtin_routine_id <= ECMA_DATE_PROTOTYPE_SET_UTC_DATE)\n  {\n    if (ecma_number_is_nan (date_value))\n    {\n      if (!ECMA_DATE_PROTOTYPE_IS_SET_YEAR_ROUTINE (builtin_routine_id))\n      {\n        return ecma_make_number_value (date_value);\n      }\n\n      date_value = ECMA_NUMBER_ZERO;\n    }\n\n    time_part = ecma_date_time_in_day_from_time (date_value);\n\n    ecma_number_t year = ecma_date_year_from_time (date_value);\n    ecma_number_t month = ecma_date_month_from_time (date_value);\n    ecma_number_t day = ecma_date_date_from_time (date_value);\n\n    switch (builtin_routine_id)\n    {\n      case ECMA_DATE_PROTOTYPE_SET_FULL_YEAR:\n      case ECMA_DATE_PROTOTYPE_SET_UTC_FULL_YEAR:\n      {\n        year = converted_number[0];\n        if (conversions >= 2)\n        {\n          month = converted_number[1];\n        }\n        if (conversions >= 3)\n        {\n          day = converted_number[2];\n        }\n        break;\n      }\n#if JERRY_BUILTIN_ANNEXB\n      case ECMA_DATE_PROTOTYPE_SET_YEAR:\n      {\n        if (ecma_number_is_nan (converted_number[0]))\n        {\n          *date_value_p = converted_number[0];\n          return ecma_make_number_value (converted_number[0]);\n        }\n\n        year = ecma_number_trunc (converted_number[0]);\n        if (year >= 0 && year <= 99)\n        {\n          year += 1900;\n        }\n        break;\n      }\n#endif /* JERRY_BUILTIN_ANNEXB */\n      case ECMA_DATE_PROTOTYPE_SET_MONTH:\n      case ECMA_DATE_PROTOTYPE_SET_UTC_MONTH:\n      {\n        month = converted_number[0];\n        if (conversions >= 2)\n        {\n          day = converted_number[1];\n        }\n        break;\n      }\n      default:\n      {\n        JERRY_ASSERT (builtin_routine_id == ECMA_DATE_PROTOTYPE_SET_DATE\n                      || builtin_routine_id == ECMA_DATE_PROTOTYPE_SET_UTC_DATE);\n\n        day = converted_number[0];\n        break;\n      }\n    }\n\n    day_part = ecma_date_make_day (year, month, day);\n\n#if JERRY_BUILTIN_ANNEXB\n    if (builtin_routine_id == ECMA_DATE_PROTOTYPE_SET_YEAR)\n    {\n      if (ecma_number_is_nan (converted_number[0]))\n      {\n        day_part = 0;\n        time_part = converted_number[0];\n      }\n    }\n#endif /* JERRY_BUILTIN_ANNEXB */\n  }\n  else\n  {\n    if (ecma_number_is_nan (date_value))\n    {\n      return ecma_make_number_value (date_value);\n    }\n\n    day_part = ecma_date_day_from_time (date_value) * (ecma_number_t) ECMA_DATE_MS_PER_DAY;\n\n    ecma_number_t hour = ecma_date_hour_from_time (date_value);\n    ecma_number_t min = ecma_date_min_from_time (date_value);\n    ecma_number_t sec = ecma_date_sec_from_time (date_value);\n    ecma_number_t ms = ecma_date_ms_from_time (date_value);\n\n    switch (builtin_routine_id)\n    {\n      case ECMA_DATE_PROTOTYPE_SET_HOURS:\n      case ECMA_DATE_PROTOTYPE_SET_UTC_HOURS:\n      {\n        hour = converted_number[0];\n        if (conversions >= 2)\n        {\n          min = converted_number[1];\n        }\n        if (conversions >= 3)\n        {\n          sec = converted_number[2];\n        }\n        if (conversions >= 4)\n        {\n          ms = converted_number[3];\n        }\n        break;\n      }\n      case ECMA_DATE_PROTOTYPE_SET_MINUTES:\n      case ECMA_DATE_PROTOTYPE_SET_UTC_MINUTES:\n      {\n        min = converted_number[0];\n        if (conversions >= 2)\n        {\n          sec = converted_number[1];\n        }\n        if (conversions >= 3)\n        {\n          ms = converted_number[2];\n        }\n        break;\n      }\n      case ECMA_DATE_PROTOTYPE_SET_UTC_SECONDS:\n      case ECMA_DATE_PROTOTYPE_SET_SECONDS:\n      {\n        sec = converted_number[0];\n        if (conversions >= 2)\n        {\n          ms = converted_number[1];\n        }\n        break;\n      }\n      default:\n      {\n        JERRY_ASSERT (builtin_routine_id == ECMA_DATE_PROTOTYPE_SET_UTC_MILLISECONDS\n                      || builtin_routine_id == ECMA_DATE_PROTOTYPE_SET_MILLISECONDS);\n\n        ms = converted_number[0];\n        break;\n      }\n    }\n\n    time_part = ecma_date_make_time (hour, min, sec, ms);\n  }\n\n  bool is_utc = BUILTIN_DATE_FUNCTION_IS_UTC (builtin_routine_id);\n\n  ecma_number_t full_date = ecma_date_make_date (day_part, time_part);\n\n  if (!is_utc)\n  {\n    full_date = ecma_date_utc (full_date);\n  }\n\n  full_date = ecma_date_time_clip (full_date);\n\n  *date_value_p = full_date;\n\n#if JERRY_ESNEXT\n  date_object_p->header.u.cls.u1.date_flags &= (uint8_t) ~ECMA_DATE_TZA_SET;\n#endif /* JERRY_ESNEXT */\n\n  return ecma_make_number_value (full_date);\n}",
  "abstract_func_before": "static ecma_value_t\necma_builtin_date_prototype_dispatch_set (uint16_t VAR_0, /* COMMENT_0 */\n                                                                                         \n                                          ecma_object_t *VAR_1, /* COMMENT_2 */\n                                          const ecma_value_t VAR_2[], /* COMMENT_3 */\n                                                                                                        \n                                          uint32_t VAR_3) /* COMMENT_5 */\n{\n  ecma_number_t VAR_4[4];\n  uint32_t VAR_5 = 0;\n\n  /* COMMENT_6 */\n  VAR_4[0] = ecma_number_make_nan ();\n\n  switch (VAR_0)\n  {\n#if VAR_6\n    case VAR_7:\n#endif /* COMMENT_7 */\n    case VAR_8:\n    case VAR_9:\n    case VAR_10:\n    case VAR_11:\n    {\n      VAR_5 = 1;\n      break;\n    }\n    case VAR_12:\n    case VAR_13:\n    case VAR_14:\n    case VAR_15:\n    {\n      VAR_5 = 2;\n      break;\n    }\n    case VAR_16:\n    case VAR_17:\n    case VAR_18:\n    case VAR_19:\n    {\n      VAR_5 = 3;\n      break;\n    }\n    default:\n    {\n      JERRY_ASSERT (VAR_0 == VAR_20\n                    || VAR_0 == VAR_21);\n\n      VAR_5 = 4;\n      break;\n    }\n  }\n\n  if (VAR_5 > VAR_3)\n  {\n    VAR_5 = VAR_3;\n  }\n\n  for (uint32_t VAR_22 = 0; VAR_22 < VAR_5; VAR_22++)\n  {\n    ecma_value_t VAR_23 = ecma_op_to_number (VAR_2[VAR_22], &VAR_4[VAR_22]);\n\n    if (ECMA_IS_VALUE_ERROR (VAR_23))\n    {\n      return VAR_23;\n    }\n  }\n\n#if VAR_24\n  ecma_date_object_t *VAR_25 = (ecma_date_object_t *) VAR_1;\n  ecma_number_t *VAR_26 = &VAR_25->date_value;\n#else /* COMMENT_8 */\n  ecma_extended_object_t *VAR_27 = (ecma_extended_object_t *) VAR_1;\n  ecma_number_t *VAR_26 = ECMA_GET_INTERNAL_VALUE_POINTER (ecma_number_t, VAR_27->u.cls.u3.date);\n#endif /* COMMENT_9 */\n\n  ecma_number_t VAR_28 = *VAR_26;\n\n  if (!BUILTIN_DATE_FUNCTION_IS_UTC (VAR_0))\n  {\n    ecma_number_t VAR_29;\n\n#if VAR_24\n    if (VAR_25->header.u.cls.u1.date_flags & VAR_30)\n    {\n      VAR_29 = VAR_25->header.u.cls.u3.tza;\n      JERRY_ASSERT (VAR_29 == ecma_date_local_time_zone_adjustment (VAR_28));\n    }\n    else\n#endif /* COMMENT_9 */\n    {\n      VAR_29 = ecma_date_local_time_zone_adjustment (VAR_28);\n    }\n\n    VAR_28 += VAR_29;\n  }\n\n  ecma_number_t VAR_31;\n  ecma_number_t VAR_32;\n\n  if (VAR_0 <= VAR_9)\n  {\n    if (ecma_number_is_nan (VAR_28))\n    {\n      if (!ECMA_DATE_PROTOTYPE_IS_SET_YEAR_ROUTINE (VAR_0))\n      {\n        return ecma_make_number_value (VAR_28);\n      }\n\n      VAR_28 = VAR_33;\n    }\n\n    VAR_32 = ecma_date_time_in_day_from_time (VAR_28);\n\n    ecma_number_t VAR_34 = ecma_date_year_from_time (VAR_28);\n    ecma_number_t VAR_35 = ecma_date_month_from_time (VAR_28);\n    ecma_number_t VAR_36 = ecma_date_date_from_time (VAR_28);\n\n    switch (VAR_0)\n    {\n      case VAR_16:\n      case VAR_17:\n      {\n        VAR_34 = VAR_4[0];\n        if (VAR_5 >= 2)\n        {\n          VAR_35 = VAR_4[1];\n        }\n        if (VAR_5 >= 3)\n        {\n          VAR_36 = VAR_4[2];\n        }\n        break;\n      }\n#if VAR_6\n      case VAR_7:\n      {\n        if (ecma_number_is_nan (VAR_4[0]))\n        {\n          *VAR_26 = VAR_4[0];\n          return ecma_make_number_value (VAR_4[0]);\n        }\n\n        VAR_34 = ecma_number_trunc (VAR_4[0]);\n        if (VAR_34 >= 0 && VAR_34 <= 99)\n        {\n          VAR_34 += 1900;\n        }\n        break;\n      }\n#endif /* COMMENT_7 */\n      case VAR_12:\n      case VAR_13:\n      {\n        VAR_35 = VAR_4[0];\n        if (VAR_5 >= 2)\n        {\n          VAR_36 = VAR_4[1];\n        }\n        break;\n      }\n      default:\n      {\n        JERRY_ASSERT (VAR_0 == VAR_8\n                      || VAR_0 == VAR_9);\n\n        VAR_36 = VAR_4[0];\n        break;\n      }\n    }\n\n    VAR_31 = ecma_date_make_day (VAR_34, VAR_35, VAR_36);\n\n#if VAR_6\n    if (VAR_0 == VAR_7)\n    {\n      if (ecma_number_is_nan (VAR_4[0]))\n      {\n        VAR_31 = 0;\n        VAR_32 = VAR_4[0];\n      }\n    }\n#endif /* COMMENT_7 */\n  }\n  else\n  {\n    if (ecma_number_is_nan (VAR_28))\n    {\n      return ecma_make_number_value (VAR_28);\n    }\n\n    VAR_31 = ecma_date_day_from_time (VAR_28) * (ecma_number_t) VAR_37;\n\n    ecma_number_t VAR_38 = ecma_date_hour_from_time (VAR_28);\n    ecma_number_t VAR_39 = ecma_date_min_from_time (VAR_28);\n    ecma_number_t VAR_40 = ecma_date_sec_from_time (VAR_28);\n    ecma_number_t VAR_41 = ecma_date_ms_from_time (VAR_28);\n\n    switch (VAR_0)\n    {\n      case VAR_20:\n      case VAR_21:\n      {\n        VAR_38 = VAR_4[0];\n        if (VAR_5 >= 2)\n        {\n          VAR_39 = VAR_4[1];\n        }\n        if (VAR_5 >= 3)\n        {\n          VAR_40 = VAR_4[2];\n        }\n        if (VAR_5 >= 4)\n        {\n          VAR_41 = VAR_4[3];\n        }\n        break;\n      }\n      case VAR_18:\n      case VAR_19:\n      {\n        VAR_39 = VAR_4[0];\n        if (VAR_5 >= 2)\n        {\n          VAR_40 = VAR_4[1];\n        }\n        if (VAR_5 >= 3)\n        {\n          VAR_41 = VAR_4[2];\n        }\n        break;\n      }\n      case VAR_14:\n      case VAR_15:\n      {\n        VAR_40 = VAR_4[0];\n        if (VAR_5 >= 2)\n        {\n          VAR_41 = VAR_4[1];\n        }\n        break;\n      }\n      default:\n      {\n        JERRY_ASSERT (VAR_0 == VAR_10\n                      || VAR_0 == VAR_11);\n\n        VAR_41 = VAR_4[0];\n        break;\n      }\n    }\n\n    VAR_32 = ecma_date_make_time (VAR_38, VAR_39, VAR_40, VAR_41);\n  }\n\n  bool VAR_42 = BUILTIN_DATE_FUNCTION_IS_UTC (VAR_0);\n\n  ecma_number_t VAR_43 = ecma_date_make_date (VAR_31, VAR_32);\n\n  if (!VAR_42)\n  {\n    VAR_43 = ecma_date_utc (VAR_43);\n  }\n\n  VAR_43 = ecma_date_time_clip (VAR_43);\n\n  *VAR_26 = VAR_43;\n\n#if VAR_24\n  VAR_25->header.u.cls.u1.date_flags &= (uint8_t) ~VAR_30;\n#endif /* COMMENT_9 */\n\n  return ecma_make_number_value (VAR_43);\n}",
  "func_graph_path_before": "jerryscript-project/jerryscript/3a9bd349c55799db2cbf74e36b68f21617ade4f2/ecma-builtin-date-prototype.c/vul/before/0.json",
  "func": "static ecma_value_t\necma_builtin_date_prototype_dispatch_set (uint16_t builtin_routine_id, /**< built-in wide routine\n                                                                        *   identifier */\n                                          ecma_object_t *object_p, /**< date object */\n                                          const ecma_value_t arguments_list[], /**< list of arguments\n                                                                                *   passed to routine */\n                                          uint32_t arguments_number) /**< length of arguments' list */\n{\n  ecma_number_t converted_number[4];\n  uint32_t conversions = 0;\n\n  /* If the first argument is not specified, it is always converted to NaN. */\n  converted_number[0] = ecma_number_make_nan ();\n\n  switch (builtin_routine_id)\n  {\n#if JERRY_BUILTIN_ANNEXB\n    case ECMA_DATE_PROTOTYPE_SET_YEAR:\n#endif /* JERRY_BUILTIN_ANNEXB */\n    case ECMA_DATE_PROTOTYPE_SET_DATE:\n    case ECMA_DATE_PROTOTYPE_SET_UTC_DATE:\n    case ECMA_DATE_PROTOTYPE_SET_UTC_MILLISECONDS:\n    case ECMA_DATE_PROTOTYPE_SET_MILLISECONDS:\n    {\n      conversions = 1;\n      break;\n    }\n    case ECMA_DATE_PROTOTYPE_SET_MONTH:\n    case ECMA_DATE_PROTOTYPE_SET_UTC_MONTH:\n    case ECMA_DATE_PROTOTYPE_SET_UTC_SECONDS:\n    case ECMA_DATE_PROTOTYPE_SET_SECONDS:\n    {\n      conversions = 2;\n      break;\n    }\n    case ECMA_DATE_PROTOTYPE_SET_FULL_YEAR:\n    case ECMA_DATE_PROTOTYPE_SET_UTC_FULL_YEAR:\n    case ECMA_DATE_PROTOTYPE_SET_MINUTES:\n    case ECMA_DATE_PROTOTYPE_SET_UTC_MINUTES:\n    {\n      conversions = 3;\n      break;\n    }\n    default:\n    {\n      JERRY_ASSERT (builtin_routine_id == ECMA_DATE_PROTOTYPE_SET_HOURS\n                    || builtin_routine_id == ECMA_DATE_PROTOTYPE_SET_UTC_HOURS);\n\n      conversions = 4;\n      break;\n    }\n  }\n\n  if (conversions > arguments_number)\n  {\n    conversions = arguments_number;\n  }\n\n  for (uint32_t i = 0; i < conversions; i++)\n  {\n    ecma_value_t value = ecma_op_to_number (arguments_list[i], &converted_number[i]);\n\n    if (ECMA_IS_VALUE_ERROR (value))\n    {\n      return value;\n    }\n  }\n\n#if JERRY_ESNEXT\n  ecma_date_object_t *date_object_p = (ecma_date_object_t *) object_p;\n  ecma_number_t *date_value_p = &date_object_p->date_value;\n#else /* !JERRY_ESNEXT */\n  ecma_extended_object_t *ext_object_p = (ecma_extended_object_t *) object_p;\n  ecma_number_t *date_value_p = ECMA_GET_INTERNAL_VALUE_POINTER (ecma_number_t, ext_object_p->u.cls.u3.date);\n#endif /* JERRY_ESNEXT */\n\n  ecma_number_t date_value = *date_value_p;\n\n  if (!BUILTIN_DATE_FUNCTION_IS_UTC (builtin_routine_id))\n  {\n    ecma_number_t local_tza;\n\n#if JERRY_ESNEXT\n    if (date_object_p->header.u.cls.u1.date_flags & ECMA_DATE_TZA_SET)\n    {\n      local_tza = date_object_p->header.u.cls.u3.tza;\n      JERRY_ASSERT (local_tza == ecma_date_local_time_zone_adjustment (date_value));\n    }\n    else\n#endif /* JERRY_ESNEXT */\n    {\n      local_tza = ecma_date_local_time_zone_adjustment (date_value);\n    }\n\n    date_value += local_tza;\n  }\n\n  ecma_number_t day_part;\n  ecma_number_t time_part;\n\n  if (builtin_routine_id <= ECMA_DATE_PROTOTYPE_SET_UTC_DATE)\n  {\n    if (ecma_number_is_nan (date_value))\n    {\n      if (!ECMA_DATE_PROTOTYPE_IS_SET_YEAR_ROUTINE (builtin_routine_id))\n      {\n        return ecma_make_number_value (date_value);\n      }\n\n      date_value = ECMA_NUMBER_ZERO;\n    }\n\n    time_part = ecma_date_time_in_day_from_time (date_value);\n\n    ecma_number_t year = ecma_date_year_from_time (date_value);\n    ecma_number_t month = ecma_date_month_from_time (date_value);\n    ecma_number_t day = ecma_date_date_from_time (date_value);\n\n    switch (builtin_routine_id)\n    {\n      case ECMA_DATE_PROTOTYPE_SET_FULL_YEAR:\n      case ECMA_DATE_PROTOTYPE_SET_UTC_FULL_YEAR:\n      {\n        year = converted_number[0];\n        if (conversions >= 2)\n        {\n          month = converted_number[1];\n        }\n        if (conversions >= 3)\n        {\n          day = converted_number[2];\n        }\n        break;\n      }\n#if JERRY_BUILTIN_ANNEXB\n      case ECMA_DATE_PROTOTYPE_SET_YEAR:\n      {\n        if (ecma_number_is_nan (converted_number[0]))\n        {\n          *date_value_p = converted_number[0];\n#if JERRY_ESNEXT\n          date_object_p->header.u.cls.u1.date_flags &= (uint8_t) ~ECMA_DATE_TZA_SET;\n#endif /* JERRY_ESNEXT */\n          return ecma_make_number_value (converted_number[0]);\n        }\n\n        year = ecma_number_trunc (converted_number[0]);\n        if (year >= 0 && year <= 99)\n        {\n          year += 1900;\n        }\n        break;\n      }\n#endif /* JERRY_BUILTIN_ANNEXB */\n      case ECMA_DATE_PROTOTYPE_SET_MONTH:\n      case ECMA_DATE_PROTOTYPE_SET_UTC_MONTH:\n      {\n        month = converted_number[0];\n        if (conversions >= 2)\n        {\n          day = converted_number[1];\n        }\n        break;\n      }\n      default:\n      {\n        JERRY_ASSERT (builtin_routine_id == ECMA_DATE_PROTOTYPE_SET_DATE\n                      || builtin_routine_id == ECMA_DATE_PROTOTYPE_SET_UTC_DATE);\n\n        day = converted_number[0];\n        break;\n      }\n    }\n\n    day_part = ecma_date_make_day (year, month, day);\n\n#if JERRY_BUILTIN_ANNEXB\n    if (builtin_routine_id == ECMA_DATE_PROTOTYPE_SET_YEAR)\n    {\n      if (ecma_number_is_nan (converted_number[0]))\n      {\n        day_part = 0;\n        time_part = converted_number[0];\n      }\n    }\n#endif /* JERRY_BUILTIN_ANNEXB */\n  }\n  else\n  {\n    if (ecma_number_is_nan (date_value))\n    {\n      return ecma_make_number_value (date_value);\n    }\n\n    day_part = ecma_date_day_from_time (date_value) * (ecma_number_t) ECMA_DATE_MS_PER_DAY;\n\n    ecma_number_t hour = ecma_date_hour_from_time (date_value);\n    ecma_number_t min = ecma_date_min_from_time (date_value);\n    ecma_number_t sec = ecma_date_sec_from_time (date_value);\n    ecma_number_t ms = ecma_date_ms_from_time (date_value);\n\n    switch (builtin_routine_id)\n    {\n      case ECMA_DATE_PROTOTYPE_SET_HOURS:\n      case ECMA_DATE_PROTOTYPE_SET_UTC_HOURS:\n      {\n        hour = converted_number[0];\n        if (conversions >= 2)\n        {\n          min = converted_number[1];\n        }\n        if (conversions >= 3)\n        {\n          sec = converted_number[2];\n        }\n        if (conversions >= 4)\n        {\n          ms = converted_number[3];\n        }\n        break;\n      }\n      case ECMA_DATE_PROTOTYPE_SET_MINUTES:\n      case ECMA_DATE_PROTOTYPE_SET_UTC_MINUTES:\n      {\n        min = converted_number[0];\n        if (conversions >= 2)\n        {\n          sec = converted_number[1];\n        }\n        if (conversions >= 3)\n        {\n          ms = converted_number[2];\n        }\n        break;\n      }\n      case ECMA_DATE_PROTOTYPE_SET_UTC_SECONDS:\n      case ECMA_DATE_PROTOTYPE_SET_SECONDS:\n      {\n        sec = converted_number[0];\n        if (conversions >= 2)\n        {\n          ms = converted_number[1];\n        }\n        break;\n      }\n      default:\n      {\n        JERRY_ASSERT (builtin_routine_id == ECMA_DATE_PROTOTYPE_SET_UTC_MILLISECONDS\n                      || builtin_routine_id == ECMA_DATE_PROTOTYPE_SET_MILLISECONDS);\n\n        ms = converted_number[0];\n        break;\n      }\n    }\n\n    time_part = ecma_date_make_time (hour, min, sec, ms);\n  }\n\n  bool is_utc = BUILTIN_DATE_FUNCTION_IS_UTC (builtin_routine_id);\n\n  ecma_number_t full_date = ecma_date_make_date (day_part, time_part);\n\n  if (!is_utc)\n  {\n    full_date = ecma_date_utc (full_date);\n  }\n\n  full_date = ecma_date_time_clip (full_date);\n\n  *date_value_p = full_date;\n\n#if JERRY_ESNEXT\n  date_object_p->header.u.cls.u1.date_flags &= (uint8_t) ~ECMA_DATE_TZA_SET;\n#endif /* JERRY_ESNEXT */\n\n  return ecma_make_number_value (full_date);\n}",
  "abstract_func": "static ecma_value_t\necma_builtin_date_prototype_dispatch_set (uint16_t VAR_0, /* COMMENT_0 */\n                                                                                         \n                                          ecma_object_t *VAR_1, /* COMMENT_2 */\n                                          const ecma_value_t VAR_2[], /* COMMENT_3 */\n                                                                                                        \n                                          uint32_t VAR_3) /* COMMENT_5 */\n{\n  ecma_number_t VAR_4[4];\n  uint32_t VAR_5 = 0;\n\n  /* COMMENT_6 */\n  VAR_4[0] = ecma_number_make_nan ();\n\n  switch (VAR_0)\n  {\n#if VAR_6\n    case VAR_7:\n#endif /* COMMENT_7 */\n    case VAR_8:\n    case VAR_9:\n    case VAR_10:\n    case VAR_11:\n    {\n      VAR_5 = 1;\n      break;\n    }\n    case VAR_12:\n    case VAR_13:\n    case VAR_14:\n    case VAR_15:\n    {\n      VAR_5 = 2;\n      break;\n    }\n    case VAR_16:\n    case VAR_17:\n    case VAR_18:\n    case VAR_19:\n    {\n      VAR_5 = 3;\n      break;\n    }\n    default:\n    {\n      JERRY_ASSERT (VAR_0 == VAR_20\n                    || VAR_0 == VAR_21);\n\n      VAR_5 = 4;\n      break;\n    }\n  }\n\n  if (VAR_5 > VAR_3)\n  {\n    VAR_5 = VAR_3;\n  }\n\n  for (uint32_t VAR_22 = 0; VAR_22 < VAR_5; VAR_22++)\n  {\n    ecma_value_t VAR_23 = ecma_op_to_number (VAR_2[VAR_22], &VAR_4[VAR_22]);\n\n    if (ECMA_IS_VALUE_ERROR (VAR_23))\n    {\n      return VAR_23;\n    }\n  }\n\n#if VAR_24\n  ecma_date_object_t *VAR_25 = (ecma_date_object_t *) VAR_1;\n  ecma_number_t *VAR_26 = &VAR_25->date_value;\n#else /* COMMENT_8 */\n  ecma_extended_object_t *VAR_27 = (ecma_extended_object_t *) VAR_1;\n  ecma_number_t *VAR_26 = ECMA_GET_INTERNAL_VALUE_POINTER (ecma_number_t, VAR_27->u.cls.u3.date);\n#endif /* COMMENT_9 */\n\n  ecma_number_t VAR_28 = *VAR_26;\n\n  if (!BUILTIN_DATE_FUNCTION_IS_UTC (VAR_0))\n  {\n    ecma_number_t VAR_29;\n\n#if VAR_24\n    if (VAR_25->header.u.cls.u1.date_flags & VAR_30)\n    {\n      VAR_29 = VAR_25->header.u.cls.u3.tza;\n      JERRY_ASSERT (VAR_29 == ecma_date_local_time_zone_adjustment (VAR_28));\n    }\n    else\n#endif /* COMMENT_9 */\n    {\n      VAR_29 = ecma_date_local_time_zone_adjustment (VAR_28);\n    }\n\n    VAR_28 += VAR_29;\n  }\n\n  ecma_number_t VAR_31;\n  ecma_number_t VAR_32;\n\n  if (VAR_0 <= VAR_9)\n  {\n    if (ecma_number_is_nan (VAR_28))\n    {\n      if (!ECMA_DATE_PROTOTYPE_IS_SET_YEAR_ROUTINE (VAR_0))\n      {\n        return ecma_make_number_value (VAR_28);\n      }\n\n      VAR_28 = VAR_33;\n    }\n\n    VAR_32 = ecma_date_time_in_day_from_time (VAR_28);\n\n    ecma_number_t VAR_34 = ecma_date_year_from_time (VAR_28);\n    ecma_number_t VAR_35 = ecma_date_month_from_time (VAR_28);\n    ecma_number_t VAR_36 = ecma_date_date_from_time (VAR_28);\n\n    switch (VAR_0)\n    {\n      case VAR_16:\n      case VAR_17:\n      {\n        VAR_34 = VAR_4[0];\n        if (VAR_5 >= 2)\n        {\n          VAR_35 = VAR_4[1];\n        }\n        if (VAR_5 >= 3)\n        {\n          VAR_36 = VAR_4[2];\n        }\n        break;\n      }\n#if VAR_6\n      case VAR_7:\n      {\n        if (ecma_number_is_nan (VAR_4[0]))\n        {\n          *VAR_26 = VAR_4[0];\n#if VAR_24\n          VAR_25->header.u.cls.u1.date_flags &= (uint8_t) ~VAR_30;\n#endif /* COMMENT_9 */\n          return ecma_make_number_value (VAR_4[0]);\n        }\n\n        VAR_34 = ecma_number_trunc (VAR_4[0]);\n        if (VAR_34 >= 0 && VAR_34 <= 99)\n        {\n          VAR_34 += 1900;\n        }\n        break;\n      }\n#endif /* COMMENT_7 */\n      case VAR_12:\n      case VAR_13:\n      {\n        VAR_35 = VAR_4[0];\n        if (VAR_5 >= 2)\n        {\n          VAR_36 = VAR_4[1];\n        }\n        break;\n      }\n      default:\n      {\n        JERRY_ASSERT (VAR_0 == VAR_8\n                      || VAR_0 == VAR_9);\n\n        VAR_36 = VAR_4[0];\n        break;\n      }\n    }\n\n    VAR_31 = ecma_date_make_day (VAR_34, VAR_35, VAR_36);\n\n#if VAR_6\n    if (VAR_0 == VAR_7)\n    {\n      if (ecma_number_is_nan (VAR_4[0]))\n      {\n        VAR_31 = 0;\n        VAR_32 = VAR_4[0];\n      }\n    }\n#endif /* COMMENT_7 */\n  }\n  else\n  {\n    if (ecma_number_is_nan (VAR_28))\n    {\n      return ecma_make_number_value (VAR_28);\n    }\n\n    VAR_31 = ecma_date_day_from_time (VAR_28) * (ecma_number_t) VAR_37;\n\n    ecma_number_t VAR_38 = ecma_date_hour_from_time (VAR_28);\n    ecma_number_t VAR_39 = ecma_date_min_from_time (VAR_28);\n    ecma_number_t VAR_40 = ecma_date_sec_from_time (VAR_28);\n    ecma_number_t VAR_41 = ecma_date_ms_from_time (VAR_28);\n\n    switch (VAR_0)\n    {\n      case VAR_20:\n      case VAR_21:\n      {\n        VAR_38 = VAR_4[0];\n        if (VAR_5 >= 2)\n        {\n          VAR_39 = VAR_4[1];\n        }\n        if (VAR_5 >= 3)\n        {\n          VAR_40 = VAR_4[2];\n        }\n        if (VAR_5 >= 4)\n        {\n          VAR_41 = VAR_4[3];\n        }\n        break;\n      }\n      case VAR_18:\n      case VAR_19:\n      {\n        VAR_39 = VAR_4[0];\n        if (VAR_5 >= 2)\n        {\n          VAR_40 = VAR_4[1];\n        }\n        if (VAR_5 >= 3)\n        {\n          VAR_41 = VAR_4[2];\n        }\n        break;\n      }\n      case VAR_14:\n      case VAR_15:\n      {\n        VAR_40 = VAR_4[0];\n        if (VAR_5 >= 2)\n        {\n          VAR_41 = VAR_4[1];\n        }\n        break;\n      }\n      default:\n      {\n        JERRY_ASSERT (VAR_0 == VAR_10\n                      || VAR_0 == VAR_11);\n\n        VAR_41 = VAR_4[0];\n        break;\n      }\n    }\n\n    VAR_32 = ecma_date_make_time (VAR_38, VAR_39, VAR_40, VAR_41);\n  }\n\n  bool VAR_42 = BUILTIN_DATE_FUNCTION_IS_UTC (VAR_0);\n\n  ecma_number_t VAR_43 = ecma_date_make_date (VAR_31, VAR_32);\n\n  if (!VAR_42)\n  {\n    VAR_43 = ecma_date_utc (VAR_43);\n  }\n\n  VAR_43 = ecma_date_time_clip (VAR_43);\n\n  *VAR_26 = VAR_43;\n\n#if VAR_24\n  VAR_25->header.u.cls.u1.date_flags &= (uint8_t) ~VAR_30;\n#endif /* COMMENT_9 */\n\n  return ecma_make_number_value (VAR_43);\n}",
  "func_graph_path": "jerryscript-project/jerryscript/3a9bd349c55799db2cbf74e36b68f21617ade4f2/ecma-builtin-date-prototype.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -138,6 +138,9 @@\n         if (ecma_number_is_nan (converted_number[0]))\n         {\n           *date_value_p = converted_number[0];\n+#if JERRY_ESNEXT\n+          date_object_p->header.u.cls.u1.date_flags &= (uint8_t) ~ECMA_DATE_TZA_SET;\n+#endif /* JERRY_ESNEXT */\n           return ecma_make_number_value (converted_number[0]);\n         }\n ",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "#if JERRY_ESNEXT",
      "          date_object_p->header.u.cls.u1.date_flags &= (uint8_t) ~ECMA_DATE_TZA_SET;",
      "#endif /* JERRY_ESNEXT */"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/jerryscript-project/jerryscript/pull/4955",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/jerryscript-project/jerryscript/pull/4955: 403 Client Error: Forbidden for url: https://api.github.com/repos/jerryscript-project/jerryscript/pulls/4955",
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "The patch addresses issues related to date handling, specifically ensuring that the timezone adjustment cache is invalidated when the year is set. This is a defect fix related to core functionality, not a security vulnerability.\n\n**Final Classification:** Defect Remediation & Feature Upgrades  \n**Confidence:** 0.9"
}