{
  "cve_id": "CVE-2023-46853",
  "cwe_ids": [
    "CWE-193"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
  "cvss_is_v3": true,
  "repo_name": "memcached",
  "commit_msg": "proxy: fix off-by-one if \\r is missing\n\nA bunch of the parser assumed we only had \\r\\n, but I didn't actually\nhave that strictness set. Some commands worked and some broke in subtle\nways when just \"\\n\" was being submitted.\n\nI'm not 100% confident in this change yet so I'm opening a PR to stage\nit while I run some more thorough tests.",
  "commit_hash": "6987918e9a3094ec4fc8976f01f769f624d790fa",
  "git_url": "https://github.com/memcached/memcached/commit/6987918e9a3094ec4fc8976f01f769f624d790fa",
  "file_path": "proxy_request.c",
  "func_name": "_process_request_next_key",
  "func_before": "size_t _process_request_next_key(mcp_parser_t *pr) {\n    const char *cur = pr->request + pr->parsed;\n    int remain = pr->reqlen - pr->parsed - 2;\n\n    // chew off any leading whitespace.\n    while (remain) {\n        if (*cur == ' ') {\n            remain--;\n            cur++;\n            pr->parsed++;\n        } else {\n            break;\n        }\n    }\n\n    const char *s = memchr(cur, ' ', remain);\n    if (s != NULL) {\n        pr->klen = s - cur;\n        pr->parsed += s - cur;\n    } else {\n        pr->klen = remain;\n        pr->parsed += remain;\n    }\n\n    return cur - pr->request;\n}",
  "abstract_func_before": "size_t _process_request_next_key(mcp_parser_t *VAR_0) {\n    const char *VAR_1 = VAR_0->request + VAR_0->parsed;\n    int VAR_2 = VAR_0->reqlen - VAR_0->parsed - 2;\n\n    /* COMMENT_0 */\n    while (VAR_2) {\n        if (*VAR_1 == ' ') {\n            VAR_2--;\n            VAR_1++;\n            VAR_0->parsed++;\n        } else {\n            break;\n        }\n    }\n\n    const char *VAR_3 = memchr(VAR_1, ' ', VAR_2);\n    if (VAR_3 != NULL) {\n        VAR_0->klen = VAR_3 - VAR_1;\n        VAR_0->parsed += VAR_3 - VAR_1;\n    } else {\n        VAR_0->klen = VAR_2;\n        VAR_0->parsed += VAR_2;\n    }\n\n    return VAR_1 - VAR_0->request;\n}",
  "func_graph_path_before": "memcached/6987918e9a3094ec4fc8976f01f769f624d790fa/proxy_request.c/vul/before/2.json",
  "func": "size_t _process_request_next_key(mcp_parser_t *pr) {\n    const char *cur = pr->request + pr->parsed;\n    int remain = pr->endlen - pr->parsed;\n\n    // chew off any leading whitespace.\n    while (remain) {\n        if (*cur == ' ') {\n            remain--;\n            cur++;\n            pr->parsed++;\n        } else {\n            break;\n        }\n    }\n\n    const char *s = memchr(cur, ' ', remain);\n    if (s != NULL) {\n        pr->klen = s - cur;\n        pr->parsed += s - cur;\n    } else {\n        pr->klen = remain;\n        pr->parsed += remain;\n    }\n\n    return cur - pr->request;\n}",
  "abstract_func": "size_t _process_request_next_key(mcp_parser_t *VAR_0) {\n    const char *VAR_1 = VAR_0->request + VAR_0->parsed;\n    int VAR_2 = VAR_0->endlen - VAR_0->parsed;\n\n    /* COMMENT_0 */\n    while (VAR_2) {\n        if (*VAR_1 == ' ') {\n            VAR_2--;\n            VAR_1++;\n            VAR_0->parsed++;\n        } else {\n            break;\n        }\n    }\n\n    const char *VAR_3 = memchr(VAR_1, ' ', VAR_2);\n    if (VAR_3 != NULL) {\n        VAR_0->klen = VAR_3 - VAR_1;\n        VAR_0->parsed += VAR_3 - VAR_1;\n    } else {\n        VAR_0->klen = VAR_2;\n        VAR_0->parsed += VAR_2;\n    }\n\n    return VAR_1 - VAR_0->request;\n}",
  "func_graph_path": "memcached/6987918e9a3094ec4fc8976f01f769f624d790fa/proxy_request.c/vul/after/2.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,6 +1,6 @@\n size_t _process_request_next_key(mcp_parser_t *pr) {\n     const char *cur = pr->request + pr->parsed;\n-    int remain = pr->reqlen - pr->parsed - 2;\n+    int remain = pr->endlen - pr->parsed;\n \n     // chew off any leading whitespace.\n     while (remain) {",
  "diff_line_info": {
    "deleted_lines": [
      "    int remain = pr->reqlen - pr->parsed - 2;"
    ],
    "added_lines": [
      "    int remain = pr->endlen - pr->parsed;"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/memcached/memcached/pull/1063",
  "description": {
    "pr_info": {
      "title": "proxy: fix off-by-one if \\r is missing",
      "number": 1063
    },
    "comment": [
      "A bunch of the parser assumed we only had \\r\\n, but I didn't actually have that strictness set. Some commands worked and some broke in subtle ways when just \"\\n\" was being submitted.\r\n\r\nI'm not 100% confident in this change yet so I'm opening a PR to stage it while I run some more thorough tests.",
      "running the stability suite on it now too.",
      "okay I'm good with this now. it's passed half the stability suite while I stepped through the code in a debugger.. so it's run through the multiget tests several times now."
    ]
  },
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.6,
  "Bug Filter Response": "**Final Classification:** Defect Remediation & Feature Upgrades  \n**Confidence:** 0.6\n\nThe patch addresses a bug in the parser's handling of line endings, specifically when '\\r' is missing. While the change fixes an off-by-one issue, there's no explicit indication of a security vulnerability, so it's categorized under defect remediation. The confidence is moderate due to ambiguity about security implications."
}