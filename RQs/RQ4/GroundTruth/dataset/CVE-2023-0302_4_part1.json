{
  "cve_id": "CVE-2023-0302",
  "cwe_ids": [
    "CWE-74"
  ],
  "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H",
  "cvss_is_v3": true,
  "repo_name": "radareorg/radare2",
  "commit_msg": "Fix ANSI Escape Sequence Injection vulns via DWARF ##vuln\n\n* Reported by @solid-snail via huntrdev\r\n* BountyID: 583133af-7ae6-4a21-beef-a4b0182cf82e\r\n* Reproducer: dwarf_test_func_patched",
  "commit_hash": "961f0e723903011d4f54c2396e44efa91fcc74ce",
  "git_url": "https://github.com/radareorg/radare2/commit/961f0e723903011d4f54c2396e44efa91fcc74ce",
  "file_path": "libr/bin/dwarf.c",
  "func_name": "parse_line_header_source",
  "func_before": "static const ut8 *parse_line_header_source(RBinFile *bf, const ut8 *buf, const ut8 *buf_end,\n\tRBinDwarfLineHeader *hdr, Sdb *sdb, int mode, PrintfCallback print) {\n\tint i = 0;\n\tsize_t count;\n\tconst ut8 *tmp_buf = NULL;\n\n\tif (mode == R_MODE_PRINT) {\n\t\tprint (\" The Directory Table:\\n\");\n\t}\n\twhile (buf + 1 < buf_end) {\n\t\tsize_t maxlen = R_MIN ((size_t) (buf_end - buf) - 1, 0xfff);\n\t\tsize_t len = r_str_nlen ((const char *)buf, maxlen);\n\t\tchar *str = r_str_ndup ((const char *)buf, len);\n\t\tif (len < 1 || len >= 0xfff || !str) {\n\t\t\tbuf += 1;\n\t\t\tfree (str);\n\t\t\tbreak;\n\t\t}\n\t\tif (mode == R_MODE_PRINT) {\n\t\t\tprint (\"  %d     %s\\n\", i + 1, str);\n\t\t}\n\t\tadd_sdb_include_dir (sdb, str, i);\n\t\tfree (str);\n\t\ti++;\n\t\tbuf += len + 1;\n\t}\n\n\ttmp_buf = buf;\n\tcount = 0;\n\tif (mode == R_MODE_PRINT) {\n\t\tprint (\"\\n\");\n\t\tprint (\" The File Name Table:\\n\");\n\t\tprint (\"  Entry Dir     Time      Size       Name\\n\");\n\t}\n\tint entry_index = 1; // used for printing information\n\n\tfor (i = 0; i < 2; i++) {\n\t\twhile (buf + 1 < buf_end) {\n\t\t\tconst char *filename = (const char *)buf;\n\t\t\tsize_t maxlen = R_MIN ((size_t) (buf_end - buf - 1), 0xfff);\n\t\t\tut64 id_idx, mod_time, file_len;\n\t\t\tsize_t len = r_str_nlen (filename, maxlen);\n\n\t\t\tif (!len) {\n\t\t\t\tbuf++;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tbuf += len + 1;\n\t\t\tif (buf >= buf_end) {\n\t\t\t\tbuf = NULL;\n\t\t\t\tgoto beach;\n\t\t\t}\n\t\t\tbuf = r_uleb128 (buf, buf_end - buf, &id_idx, NULL);\n\t\t\tif (buf >= buf_end) {\n\t\t\t\tbuf = NULL;\n\t\t\t\tgoto beach;\n\t\t\t}\n\t\t\tbuf = r_uleb128 (buf, buf_end - buf, &mod_time, NULL);\n\t\t\tif (buf >= buf_end) {\n\t\t\t\tbuf = NULL;\n\t\t\t\tgoto beach;\n\t\t\t}\n\t\t\tbuf = r_uleb128 (buf, buf_end - buf, &file_len, NULL);\n\t\t\tif (buf >= buf_end) {\n\t\t\t\tbuf = NULL;\n\t\t\t\tgoto beach;\n\t\t\t}\n\n\t\t\tif (i) {\n\t\t\t\tchar *include_dir = NULL, *comp_dir = NULL, *pinclude_dir = NULL;\n\t\t\t\tif (id_idx > 0) {\n\t\t\t\t\tinclude_dir = pinclude_dir = sdb_array_get (sdb, \"includedirs\", id_idx - 1, 0);\n\t\t\t\t\tif (include_dir && include_dir[0] != '/') {\n\t\t\t\t\t\tcomp_dir = sdb_get (bf->sdb_addrinfo, \"DW_AT_comp_dir\", 0);\n\t\t\t\t\t\tif (comp_dir) {\n\t\t\t\t\t\t\tinclude_dir = r_str_newf (\"%s/%s/\", comp_dir, include_dir);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tinclude_dir = pinclude_dir = sdb_get (bf->sdb_addrinfo, \"DW_AT_comp_dir\", 0);\n\t\t\t\t\tif (!include_dir) {\n\t\t\t\t\t\tinclude_dir = \"./\";\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (hdr->file_names) {\n\t\t\t\t\thdr->file_names[count].name = r_str_newf(\"%s/%s\", r_str_get (include_dir), filename);\n\t\t\t\t\thdr->file_names[count].id_idx = id_idx;\n\t\t\t\t\thdr->file_names[count].mod_time = mod_time;\n\t\t\t\t\thdr->file_names[count].file_len = file_len;\n\t\t\t\t}\n\t\t\t\tif (comp_dir) {\n\t\t\t\t\tR_FREE (include_dir);\n\t\t\t\t\tR_FREE (comp_dir);\n\t\t\t\t}\n\t\t\t\tR_FREE (pinclude_dir);\n\t\t\t}\n\t\t\tcount++;\n\t\t\tif (mode == R_MODE_PRINT && i) {\n\t\t\t\tprint (\"  %d     %\" PFMT64d \"       %\" PFMT64d \"         %\" PFMT64d \"          %s\\n\", entry_index++, id_idx, mod_time, file_len, filename);\n\t\t\t}\n\t\t}\n\t\tif (i == 0) {\n\t\t\tif (count > 0) {\n\t\t\t\thdr->file_names = calloc (sizeof (file_entry), count);\n\t\t\t} else {\n\t\t\t\thdr->file_names = NULL;\n\t\t\t}\n\t\t\thdr->file_names_count = count;\n\t\t\tbuf = tmp_buf;\n\t\t\tcount = 0;\n\t\t}\n\t}\n\tif (mode == R_MODE_PRINT) {\n\t\tprint (\"\\n\");\n\t}\n\nbeach:\n\tsdb_free (sdb);\n\n\treturn buf;\n}",
  "abstract_func_before": "static const ut8 *parse_line_header_source(RBinFile *VAR_0, const ut8 *VAR_1, const ut8 *VAR_2,\n\tRBinDwarfLineHeader *VAR_3, Sdb *VAR_4, int VAR_5, PrintfCallback VAR_6) {\n\tint VAR_7 = 0;\n\tsize_t VAR_8;\n\tconst ut8 *VAR_9 = NULL;\n\n\tif (VAR_5 == VAR_10) {\n\t\tVAR_6 (\" The Directory Table:\\n\");\n\t}\n\twhile (VAR_1 + 1 < VAR_2) {\n\t\tsize_t VAR_11 = R_MIN ((size_t) (VAR_2 - VAR_1) - 1, 0xfff);\n\t\tsize_t VAR_12 = r_str_nlen ((const char *)VAR_1, VAR_11);\n\t\tchar *VAR_13 = r_str_ndup ((const char *)VAR_1, VAR_12);\n\t\tif (VAR_12 < 1 || VAR_12 >= 0xfff || !VAR_13) {\n\t\t\tVAR_1 += 1;\n\t\t\tfree (VAR_13);\n\t\t\tbreak;\n\t\t}\n\t\tif (VAR_5 == VAR_10) {\n\t\t\tVAR_6 (\"  %d     %s\\n\", VAR_7 + 1, VAR_13);\n\t\t}\n\t\tadd_sdb_include_dir (VAR_4, VAR_13, VAR_7);\n\t\tfree (VAR_13);\n\t\tVAR_7++;\n\t\tVAR_1 += VAR_12 + 1;\n\t}\n\n\tVAR_9 = VAR_1;\n\tVAR_8 = 0;\n\tif (VAR_5 == VAR_10) {\n\t\tVAR_6 (\"\\n\");\n\t\tVAR_6 (\" The File Name Table:\\n\");\n\t\tVAR_6 (\"  Entry Dir     Time      Size       Name\\n\");\n\t}\n\tint VAR_14 = 1; /* COMMENT_0 */\n\n\tfor (VAR_7 = 0; VAR_7 < 2; VAR_7++) {\n\t\twhile (VAR_1 + 1 < VAR_2) {\n\t\t\tconst char *VAR_15 = (const char *)VAR_1;\n\t\t\tsize_t VAR_11 = R_MIN ((size_t) (VAR_2 - VAR_1 - 1), 0xfff);\n\t\t\tut64 VAR_16, VAR_17, VAR_18;\n\t\t\tsize_t VAR_12 = r_str_nlen (VAR_15, VAR_11);\n\n\t\t\tif (!VAR_12) {\n\t\t\t\tVAR_1++;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tVAR_1 += VAR_12 + 1;\n\t\t\tif (VAR_1 >= VAR_2) {\n\t\t\t\tVAR_1 = NULL;\n\t\t\t\tgoto beach;\n\t\t\t}\n\t\t\tVAR_1 = r_uleb128 (VAR_1, VAR_2 - VAR_1, &VAR_16, NULL);\n\t\t\tif (VAR_1 >= VAR_2) {\n\t\t\t\tVAR_1 = NULL;\n\t\t\t\tgoto beach;\n\t\t\t}\n\t\t\tVAR_1 = r_uleb128 (VAR_1, VAR_2 - VAR_1, &VAR_17, NULL);\n\t\t\tif (VAR_1 >= VAR_2) {\n\t\t\t\tVAR_1 = NULL;\n\t\t\t\tgoto beach;\n\t\t\t}\n\t\t\tVAR_1 = r_uleb128 (VAR_1, VAR_2 - VAR_1, &VAR_18, NULL);\n\t\t\tif (VAR_1 >= VAR_2) {\n\t\t\t\tVAR_1 = NULL;\n\t\t\t\tgoto beach;\n\t\t\t}\n\n\t\t\tif (VAR_7) {\n\t\t\t\tchar *VAR_19 = NULL, *VAR_20 = NULL, *VAR_21 = NULL;\n\t\t\t\tif (VAR_16 > 0) {\n\t\t\t\t\tVAR_19 = VAR_21 = sdb_array_get (VAR_4, \"includedirs\", VAR_16 - 1, 0);\n\t\t\t\t\tif (VAR_19 && VAR_19[0] != '/') {\n\t\t\t\t\t\tVAR_20 = sdb_get (VAR_0->sdb_addrinfo, \"DW_AT_comp_dir\", 0);\n\t\t\t\t\t\tif (VAR_20) {\n\t\t\t\t\t\t\tVAR_19 = r_str_newf (\"%s/%s/\", VAR_20, VAR_19);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tVAR_19 = VAR_21 = sdb_get (VAR_0->sdb_addrinfo, \"DW_AT_comp_dir\", 0);\n\t\t\t\t\tif (!VAR_19) {\n\t\t\t\t\t\tVAR_19 = \"./\";\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (VAR_3->file_names) {\n\t\t\t\t\tVAR_3->file_names[VAR_8].name = r_str_newf(\"%s/%s\", r_str_get (VAR_19), VAR_15);\n\t\t\t\t\tVAR_3->file_names[VAR_8].id_idx = VAR_16;\n\t\t\t\t\tVAR_3->file_names[VAR_8].mod_time = VAR_17;\n\t\t\t\t\tVAR_3->file_names[VAR_8].file_len = VAR_18;\n\t\t\t\t}\n\t\t\t\tif (VAR_20) {\n\t\t\t\t\tR_FREE (VAR_19);\n\t\t\t\t\tR_FREE (VAR_20);\n\t\t\t\t}\n\t\t\t\tR_FREE (VAR_21);\n\t\t\t}\n\t\t\tVAR_8++;\n\t\t\tif (VAR_5 == VAR_10 && VAR_7) {\n\t\t\t\tVAR_6 (\"  %d     %\" VAR_22 \"       %\" VAR_22 \"         %\" VAR_22 \"          %s\\n\", VAR_14++, VAR_16, VAR_17, VAR_18, VAR_15);\n\t\t\t}\n\t\t}\n\t\tif (VAR_7 == 0) {\n\t\t\tif (VAR_8 > 0) {\n\t\t\t\tVAR_3->file_names = calloc (sizeof (VAR_23), VAR_8);\n\t\t\t} else {\n\t\t\t\tVAR_3->file_names = NULL;\n\t\t\t}\n\t\t\tVAR_3->file_names_count = VAR_8;\n\t\t\tVAR_1 = VAR_9;\n\t\t\tVAR_8 = 0;\n\t\t}\n\t}\n\tif (VAR_5 == VAR_10) {\n\t\tVAR_6 (\"\\n\");\n\t}\n\nbeach:\n\tsdb_free (VAR_4);\n\n\treturn VAR_1;\n}",
  "func_graph_path_before": "radareorg/radare2/961f0e723903011d4f54c2396e44efa91fcc74ce/dwarf.c/vul/before/3.json",
  "func": "static const ut8 *parse_line_header_source(RBinFile *bf, const ut8 *buf, const ut8 *buf_end,\n\tRBinDwarfLineHeader *hdr, Sdb *sdb, int mode, PrintfCallback print) {\n\tint i = 0;\n\tsize_t count;\n\tconst ut8 *tmp_buf = NULL;\n\tchar *fn = NULL;\n\n\tif (mode == R_MODE_PRINT) {\n\t\tprint (\" The Directory Table:\\n\");\n\t}\n\twhile (buf + 1 < buf_end) {\n\t\tsize_t maxlen = R_MIN ((size_t) (buf_end - buf) - 1, 0xfff);\n\t\tsize_t len = r_str_nlen ((const char *)buf, maxlen);\n\t\tchar *str = r_str_ndup ((const char *)buf, len);\n\t\tif (len < 1 || len >= 0xfff || !str) {\n\t\t\tbuf += 1;\n\t\t\tfree (str);\n\t\t\tbreak;\n\t\t}\n\t\tif (mode == R_MODE_PRINT) {\n\t\t\tprint (\"  %d     %s\\n\", i + 1, str);\n\t\t}\n\t\tadd_sdb_include_dir (sdb, str, i);\n\t\tfree (str);\n\t\ti++;\n\t\tbuf += len + 1;\n\t}\n\n\ttmp_buf = buf;\n\tcount = 0;\n\tif (mode == R_MODE_PRINT) {\n\t\tprint (\"\\n\");\n\t\tprint (\" The File Name Table:\\n\");\n\t\tprint (\"  Entry Dir     Time      Size       Name\\n\");\n\t}\n\tint entry_index = 1; // used for printing information\n\n\tfor (i = 0; i < 2; i++) {\n\t\twhile (buf + 1 < buf_end) {\n\t\t\tsize_t maxlen = R_MIN ((size_t) (buf_end - buf - 1), 0xfff);\n\t\t\tut64 id_idx, mod_time, file_len;\n\t\t\tfree (fn);\n\t\t\tfn = r_str_ndup ((const char *)buf, maxlen);\n\t\t\tr_str_ansi_strip (fn);\n\t\t\tsize_t len = strlen (fn);\n\n\t\t\tif (!len) {\n\t\t\t\tbuf++;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tbuf += len + 1;\n\t\t\tif (buf >= buf_end) {\n\t\t\t\tbuf = NULL;\n\t\t\t\tgoto beach;\n\t\t\t}\n\t\t\tbuf = r_uleb128 (buf, buf_end - buf, &id_idx, NULL);\n\t\t\tif (buf >= buf_end) {\n\t\t\t\tbuf = NULL;\n\t\t\t\tgoto beach;\n\t\t\t}\n\t\t\tbuf = r_uleb128 (buf, buf_end - buf, &mod_time, NULL);\n\t\t\tif (buf >= buf_end) {\n\t\t\t\tbuf = NULL;\n\t\t\t\tgoto beach;\n\t\t\t}\n\t\t\tbuf = r_uleb128 (buf, buf_end - buf, &file_len, NULL);\n\t\t\tif (buf >= buf_end) {\n\t\t\t\tbuf = NULL;\n\t\t\t\tgoto beach;\n\t\t\t}\n\n\t\t\tif (i) {\n\t\t\t\tchar *include_dir = NULL, *comp_dir = NULL, *pinclude_dir = NULL;\n\t\t\t\tif (id_idx > 0) {\n\t\t\t\t\tinclude_dir = pinclude_dir = sdb_array_get (sdb, \"includedirs\", id_idx - 1, 0);\n\t\t\t\t\tif (include_dir && include_dir[0] != '/') {\n\t\t\t\t\t\tcomp_dir = sdb_get (bf->sdb_addrinfo, \"DW_AT_comp_dir\", 0);\n\t\t\t\t\t\tif (comp_dir) {\n\t\t\t\t\t\t\tinclude_dir = r_str_newf (\"%s/%s/\", comp_dir, include_dir);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tinclude_dir = pinclude_dir = sdb_get (bf->sdb_addrinfo, \"DW_AT_comp_dir\", 0);\n\t\t\t\t\tif (!include_dir) {\n\t\t\t\t\t\tinclude_dir = \"./\";\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (hdr->file_names) {\n\t\t\t\t\thdr->file_names[count].name = r_str_newf(\"%s/%s\", r_str_get (include_dir), fn);\n\t\t\t\t\thdr->file_names[count].id_idx = id_idx;\n\t\t\t\t\thdr->file_names[count].mod_time = mod_time;\n\t\t\t\t\thdr->file_names[count].file_len = file_len;\n\t\t\t\t}\n\t\t\t\tif (comp_dir) {\n\t\t\t\t\tR_FREE (include_dir);\n\t\t\t\t\tR_FREE (comp_dir);\n\t\t\t\t}\n\t\t\t\tR_FREE (pinclude_dir);\n\t\t\t}\n\t\t\tcount++;\n\t\t\tif (mode == R_MODE_PRINT && i) {\n\t\t\t\tprint (\"  %d     %\" PFMT64d \"       %\" PFMT64d \"         %\" PFMT64d \"          %s\\n\",\n\t\t\t\t\t\tentry_index++, id_idx, mod_time, file_len, fn);\n\t\t\t}\n\t\t}\n\t\tif (i == 0) {\n\t\t\tif (count > 0) {\n\t\t\t\thdr->file_names = calloc (sizeof (file_entry), count);\n\t\t\t} else {\n\t\t\t\thdr->file_names = NULL;\n\t\t\t}\n\t\t\thdr->file_names_count = count;\n\t\t\tbuf = tmp_buf;\n\t\t\tcount = 0;\n\t\t}\n\t}\n\tif (mode == R_MODE_PRINT) {\n\t\tprint (\"\\n\");\n\t}\n\nbeach:\n\tfree (fn);\n\tsdb_free (sdb);\n\n\treturn buf;\n}",
  "abstract_func": "static const ut8 *parse_line_header_source(RBinFile *VAR_0, const ut8 *VAR_1, const ut8 *VAR_2,\n\tRBinDwarfLineHeader *VAR_3, Sdb *VAR_4, int VAR_5, PrintfCallback VAR_6) {\n\tint VAR_7 = 0;\n\tsize_t VAR_8;\n\tconst ut8 *VAR_9 = NULL;\n\tchar *VAR_10 = NULL;\n\n\tif (VAR_5 == VAR_11) {\n\t\tVAR_6 (\" The Directory Table:\\n\");\n\t}\n\twhile (VAR_1 + 1 < VAR_2) {\n\t\tsize_t VAR_12 = R_MIN ((size_t) (VAR_2 - VAR_1) - 1, 0xfff);\n\t\tsize_t VAR_13 = r_str_nlen ((const char *)VAR_1, VAR_12);\n\t\tchar *VAR_14 = r_str_ndup ((const char *)VAR_1, VAR_13);\n\t\tif (VAR_13 < 1 || VAR_13 >= 0xfff || !VAR_14) {\n\t\t\tVAR_1 += 1;\n\t\t\tfree (VAR_14);\n\t\t\tbreak;\n\t\t}\n\t\tif (VAR_5 == VAR_11) {\n\t\t\tVAR_6 (\"  %d     %s\\n\", VAR_7 + 1, VAR_14);\n\t\t}\n\t\tadd_sdb_include_dir (VAR_4, VAR_14, VAR_7);\n\t\tfree (VAR_14);\n\t\tVAR_7++;\n\t\tVAR_1 += VAR_13 + 1;\n\t}\n\n\tVAR_9 = VAR_1;\n\tVAR_8 = 0;\n\tif (VAR_5 == VAR_11) {\n\t\tVAR_6 (\"\\n\");\n\t\tVAR_6 (\" The File Name Table:\\n\");\n\t\tVAR_6 (\"  Entry Dir     Time      Size       Name\\n\");\n\t}\n\tint VAR_15 = 1; /* COMMENT_0 */\n\n\tfor (VAR_7 = 0; VAR_7 < 2; VAR_7++) {\n\t\twhile (VAR_1 + 1 < VAR_2) {\n\t\t\tsize_t VAR_12 = R_MIN ((size_t) (VAR_2 - VAR_1 - 1), 0xfff);\n\t\t\tut64 VAR_16, VAR_17, VAR_18;\n\t\t\tfree (VAR_10);\n\t\t\tVAR_10 = r_str_ndup ((const char *)VAR_1, VAR_12);\n\t\t\tr_str_ansi_strip (VAR_10);\n\t\t\tsize_t VAR_13 = strlen (VAR_10);\n\n\t\t\tif (!VAR_13) {\n\t\t\t\tVAR_1++;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tVAR_1 += VAR_13 + 1;\n\t\t\tif (VAR_1 >= VAR_2) {\n\t\t\t\tVAR_1 = NULL;\n\t\t\t\tgoto beach;\n\t\t\t}\n\t\t\tVAR_1 = r_uleb128 (VAR_1, VAR_2 - VAR_1, &VAR_16, NULL);\n\t\t\tif (VAR_1 >= VAR_2) {\n\t\t\t\tVAR_1 = NULL;\n\t\t\t\tgoto beach;\n\t\t\t}\n\t\t\tVAR_1 = r_uleb128 (VAR_1, VAR_2 - VAR_1, &VAR_17, NULL);\n\t\t\tif (VAR_1 >= VAR_2) {\n\t\t\t\tVAR_1 = NULL;\n\t\t\t\tgoto beach;\n\t\t\t}\n\t\t\tVAR_1 = r_uleb128 (VAR_1, VAR_2 - VAR_1, &VAR_18, NULL);\n\t\t\tif (VAR_1 >= VAR_2) {\n\t\t\t\tVAR_1 = NULL;\n\t\t\t\tgoto beach;\n\t\t\t}\n\n\t\t\tif (VAR_7) {\n\t\t\t\tchar *VAR_19 = NULL, *VAR_20 = NULL, *VAR_21 = NULL;\n\t\t\t\tif (VAR_16 > 0) {\n\t\t\t\t\tVAR_19 = VAR_21 = sdb_array_get (VAR_4, \"includedirs\", VAR_16 - 1, 0);\n\t\t\t\t\tif (VAR_19 && VAR_19[0] != '/') {\n\t\t\t\t\t\tVAR_20 = sdb_get (VAR_0->sdb_addrinfo, \"DW_AT_comp_dir\", 0);\n\t\t\t\t\t\tif (VAR_20) {\n\t\t\t\t\t\t\tVAR_19 = r_str_newf (\"%s/%s/\", VAR_20, VAR_19);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tVAR_19 = VAR_21 = sdb_get (VAR_0->sdb_addrinfo, \"DW_AT_comp_dir\", 0);\n\t\t\t\t\tif (!VAR_19) {\n\t\t\t\t\t\tVAR_19 = \"./\";\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (VAR_3->file_names) {\n\t\t\t\t\tVAR_3->file_names[VAR_8].name = r_str_newf(\"%s/%s\", r_str_get (VAR_19), VAR_10);\n\t\t\t\t\tVAR_3->file_names[VAR_8].id_idx = VAR_16;\n\t\t\t\t\tVAR_3->file_names[VAR_8].mod_time = VAR_17;\n\t\t\t\t\tVAR_3->file_names[VAR_8].file_len = VAR_18;\n\t\t\t\t}\n\t\t\t\tif (VAR_20) {\n\t\t\t\t\tR_FREE (VAR_19);\n\t\t\t\t\tR_FREE (VAR_20);\n\t\t\t\t}\n\t\t\t\tR_FREE (VAR_21);\n\t\t\t}\n\t\t\tVAR_8++;\n\t\t\tif (VAR_5 == VAR_11 && VAR_7) {\n\t\t\t\tVAR_6 (\"  %d     %\" VAR_22 \"       %\" VAR_22 \"         %\" VAR_22 \"          %s\\n\",\n\t\t\t\t\t\tVAR_15++, VAR_16, VAR_17, VAR_18, VAR_10);\n\t\t\t}\n\t\t}\n\t\tif (VAR_7 == 0) {\n\t\t\tif (VAR_8 > 0) {\n\t\t\t\tVAR_3->file_names = calloc (sizeof (VAR_23), VAR_8);\n\t\t\t} else {\n\t\t\t\tVAR_3->file_names = NULL;\n\t\t\t}\n\t\t\tVAR_3->file_names_count = VAR_8;\n\t\t\tVAR_1 = VAR_9;\n\t\t\tVAR_8 = 0;\n\t\t}\n\t}\n\tif (VAR_5 == VAR_11) {\n\t\tVAR_6 (\"\\n\");\n\t}\n\nbeach:\n\tfree (VAR_10);\n\tsdb_free (VAR_4);\n\n\treturn VAR_1;\n}",
  "func_graph_path": "radareorg/radare2/961f0e723903011d4f54c2396e44efa91fcc74ce/dwarf.c/vul/after/3.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -3,6 +3,7 @@\n \tint i = 0;\n \tsize_t count;\n \tconst ut8 *tmp_buf = NULL;\n+\tchar *fn = NULL;\n \n \tif (mode == R_MODE_PRINT) {\n \t\tprint (\" The Directory Table:\\n\");\n@@ -36,10 +37,12 @@\n \n \tfor (i = 0; i < 2; i++) {\n \t\twhile (buf + 1 < buf_end) {\n-\t\t\tconst char *filename = (const char *)buf;\n \t\t\tsize_t maxlen = R_MIN ((size_t) (buf_end - buf - 1), 0xfff);\n \t\t\tut64 id_idx, mod_time, file_len;\n-\t\t\tsize_t len = r_str_nlen (filename, maxlen);\n+\t\t\tfree (fn);\n+\t\t\tfn = r_str_ndup ((const char *)buf, maxlen);\n+\t\t\tr_str_ansi_strip (fn);\n+\t\t\tsize_t len = strlen (fn);\n \n \t\t\tif (!len) {\n \t\t\t\tbuf++;\n@@ -84,7 +87,7 @@\n \t\t\t\t}\n \n \t\t\t\tif (hdr->file_names) {\n-\t\t\t\t\thdr->file_names[count].name = r_str_newf(\"%s/%s\", r_str_get (include_dir), filename);\n+\t\t\t\t\thdr->file_names[count].name = r_str_newf(\"%s/%s\", r_str_get (include_dir), fn);\n \t\t\t\t\thdr->file_names[count].id_idx = id_idx;\n \t\t\t\t\thdr->file_names[count].mod_time = mod_time;\n \t\t\t\t\thdr->file_names[count].file_len = file_len;\n@@ -97,7 +100,8 @@\n \t\t\t}\n \t\t\tcount++;\n \t\t\tif (mode == R_MODE_PRINT && i) {\n-\t\t\t\tprint (\"  %d     %\" PFMT64d \"       %\" PFMT64d \"         %\" PFMT64d \"          %s\\n\", entry_index++, id_idx, mod_time, file_len, filename);\n+\t\t\t\tprint (\"  %d     %\" PFMT64d \"       %\" PFMT64d \"         %\" PFMT64d \"          %s\\n\",\n+\t\t\t\t\t\tentry_index++, id_idx, mod_time, file_len, fn);\n \t\t\t}\n \t\t}\n \t\tif (i == 0) {\n@@ -116,6 +120,7 @@\n \t}\n \n beach:\n+\tfree (fn);\n \tsdb_free (sdb);\n \n \treturn buf;",
  "diff_line_info": {
    "deleted_lines": [
      "\t\t\tconst char *filename = (const char *)buf;",
      "\t\t\tsize_t len = r_str_nlen (filename, maxlen);",
      "\t\t\t\t\thdr->file_names[count].name = r_str_newf(\"%s/%s\", r_str_get (include_dir), filename);",
      "\t\t\t\tprint (\"  %d     %\" PFMT64d \"       %\" PFMT64d \"         %\" PFMT64d \"          %s\\n\", entry_index++, id_idx, mod_time, file_len, filename);"
    ],
    "added_lines": [
      "\tchar *fn = NULL;",
      "\t\t\tfree (fn);",
      "\t\t\tfn = r_str_ndup ((const char *)buf, maxlen);",
      "\t\t\tr_str_ansi_strip (fn);",
      "\t\t\tsize_t len = strlen (fn);",
      "\t\t\t\t\thdr->file_names[count].name = r_str_newf(\"%s/%s\", r_str_get (include_dir), fn);",
      "\t\t\t\tprint (\"  %d     %\" PFMT64d \"       %\" PFMT64d \"         %\" PFMT64d \"          %s\\n\",",
      "\t\t\t\t\t\tentry_index++, id_idx, mod_time, file_len, fn);",
      "\tfree (fn);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/radareorg/radare2/pull/21231",
  "description": {
    "pr_info": {
      "title": "Colorz",
      "number": 21231
    },
    "comment": [
      "<!--\r\nRead https://github.com/radareorg/radare2/blob/master/DEVELOPERS.md\r\n* PR title must be capitalized, concise and use ##tags\r\n* If the PR is fixing a ticket use 'Fix #1234 - ..' in the commit message\r\n* Follow the coding style, add tests and documentation if necessary\r\n-->\r\n\r\n- [ ] Mark this if you consider it ready to merge\r\n- [ ] I've added tests (optional)\r\n- [ ] I wrote some lines in the [book](https://github.com/radareorg/radare2book) (optional)\r\n\r\n**Description**\r\n\r\n<!-- explain your changes if necessary -->\r\n"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.95"
}