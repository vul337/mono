{
  "cve_id": "CVE-2021-33185",
  "cwe_ids": [
    "CWE-120"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:N/A:N",
  "cvss_is_v3": false,
  "repo_name": "SerenityOS/serenity",
  "commit_msg": "AK: Don't call memcpy with null argument in ByteBuffer::copy()\n\nThis was happening in TestBase64.test_decode, while copying an empty\nstring.",
  "commit_hash": "8e6cb0a579df34bbdcfbbc8e0f4d8244d4747409",
  "git_url": "https://github.com/SerenityOS/serenity/commit/8e6cb0a579df34bbdcfbbc8e0f4d8244d4747409",
  "file_path": "AK/ByteBuffer.h",
  "func_name": "copy",
  "func_before": "[[nodiscard]] static ByteBuffer copy(void const* data, size_t size)\n    {\n        auto buffer = create_uninitialized(size);\n        __builtin_memcpy(buffer.data(), data, size);\n        return buffer;\n    }",
  "abstract_func_before": "[[VAR_0]] static ByteBuffer copy(void const* VAR_1, size_t VAR_2)\n    {\n        auto buffer = create_uninitialized(size);\n        __builtin_memcpy(buffer.data(), VAR_1, size);\n        return buffer;\n    }",
  "func_graph_path_before": null,
  "func": "[[nodiscard]] static ByteBuffer copy(void const* data, size_t size)\n    {\n        auto buffer = create_uninitialized(size);\n        if (size != 0)\n            __builtin_memcpy(buffer.data(), data, size);\n        return buffer;\n    }",
  "abstract_func": "[[VAR_0]] static ByteBuffer copy(void const* VAR_1, size_t VAR_2)\n    {\n        auto buffer = create_uninitialized(size);\n        if (size != 0)\n            __builtin_memcpy(buffer.data(), VAR_1, size);\n        return buffer;\n    }",
  "func_graph_path": null,
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,6 +1,7 @@\n [[nodiscard]] static ByteBuffer copy(void const* data, size_t size)\n     {\n         auto buffer = create_uninitialized(size);\n-        __builtin_memcpy(buffer.data(), data, size);\n+        if (size != 0)\n+            __builtin_memcpy(buffer.data(), data, size);\n         return buffer;\n     }",
  "diff_line_info": {
    "deleted_lines": [
      "        __builtin_memcpy(buffer.data(), data, size);"
    ],
    "added_lines": [
      "        if (size != 0)",
      "            __builtin_memcpy(buffer.data(), data, size);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/SerenityOS/serenity/pull/7157",
  "description": {
    "pr_info": {
      "title": "Tests/CI: Resolve ASAN/UBSAN errors and run with Sanitizers in CI",
      "number": 7157
    },
    "comment": [
      "Fixes the last remaining UBSAN and ASAN reported errors in the current suite of Lagom tests.\r\n\r\n- Copying a zero size byte buffer would pass nullptr to __builtin_memcpy\r\n- Zero Length VLAs were possible in ArgsParser::parse\r\n- BitmapView::count_in_range would read one-past-the-end of byte-aligned sized bitmaps. Fixes #7073 \r\n\r\nAnd finally, enable USBAN and ASAN in CI runs so that properly sanitized Tests/UUTs become other people's problems too :^)",
      "Note that building with ASAN and UBSAN significantly increases the Lagom build times.. not sure what can be done about that. It seems very valuable to run with sanitizers in CI.",
      "> Note that building with ASAN and UBSAN significantly increases the Lagom build times.. not sure what can be done about that. It seems very valuable to run with sanitizers in CI.\r\n\r\nlooks like building lagom with sanitizers is still faster than building serenity for on-target tests, so that doesnt really matter :)",
      "> I believe this commit breaks BitMapView::count_in_range() when doing multiples of 8, showing a count that is missing the last byte. I was looking at this bug earlier and had added some more tests, for example:\r\n> \r\n> ```\r\n> Bitmap bitmap(16, true);\r\n> EXPECT_EQ(bitmap.count_in_range(0,16,true),16u);\r\n> ```\r\n> \r\n> Fails with\r\n> `EXPECT_EQ(bitmap.count_in_range(0,16,true), 16u) failed with lhs=8 and rhs=16`\r\n> \r\n> ```\r\n> Bitmap bitmap(16, true);\r\n> EXPECT_EQ(bitmap.count_in_range(8,8,true),8u);\r\n> ```\r\n> \r\n> Fails with\r\n> `EXPECT_EQ(bitmap.count_in_range(8,8,true), 8u) failed with lhs=0 and rhs=8`\r\n\r\nSo it does. Dang. Thanks. Back to the drawing board.",
      "@metmo I tried to request a re-review through the gitlab UI but it doesn't seem to be showing up ü§∑‚Äç‚ôÇÔ∏è  So sorry if it spammed you. Anyway, I think this new strategy should be correct, and I added more test cases similar to the ones you posted."
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "The patch addresses a security issue by preventing a null pointer from being passed to memcpy, which could cause memory corruption. Confident in classification.\n\n**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.9"
}