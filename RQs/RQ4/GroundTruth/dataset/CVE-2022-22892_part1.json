{
  "cve_id": "CVE-2022-22892",
  "cwe_ids": [
    "CWE-617"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "jerryscript-project/jerryscript",
  "commit_msg": "Fix arrow function this binding resolving if environment record is present\n\nThis patch fixes #4872 and fixes #4876.\n\nJerryScript-DCO-1.0-Signed-off-by: Robert Fancsik robert.fancsik@h-lab.eu",
  "commit_hash": "c6aab480c1e2d968871028aec53c85ac5566b34a",
  "git_url": "https://github.com/jerryscript-project/jerryscript/commit/c6aab480c1e2d968871028aec53c85ac5566b34a",
  "file_path": "jerry-core/vm/opcodes.c",
  "func_name": "opfunc_form_super_reference",
  "func_before": "ecma_value_t\nopfunc_form_super_reference (ecma_value_t **vm_stack_top_p, /**< current vm stack top */\n                             vm_frame_ctx_t *frame_ctx_p, /**< frame context */\n                             ecma_value_t prop_name, /**< property name to resolve */\n                             uint8_t opcode) /**< current cbc opcode */\n{\n  if (CBC_FUNCTION_GET_TYPE (frame_ctx_p->shared_p->bytecode_header_p->status_flags) == CBC_FUNCTION_CONSTRUCTOR)\n  {\n    ecma_environment_record_t *environment_record_p = ecma_op_get_environment_record (frame_ctx_p->lex_env_p);\n\n    if (!ecma_op_this_binding_is_initialized (environment_record_p))\n    {\n      return ecma_raise_reference_error (ECMA_ERR_CALL_SUPER_CONSTRUCTOR_DERIVED_CLASS_BEFORE_THIS);\n    }\n  }\n\n  ecma_value_t parent = ecma_op_resolve_super_base (frame_ctx_p->lex_env_p);\n\n  if (ECMA_IS_VALUE_ERROR (parent))\n  {\n    return ecma_raise_type_error (ECMA_ERR_INVOKE_NULLABLE_SUPER_METHOD);\n  }\n\n  if (!ecma_op_require_object_coercible (parent))\n  {\n    return ECMA_VALUE_ERROR;\n  }\n\n  ecma_value_t *stack_top_p = *vm_stack_top_p;\n\n  if (opcode >= CBC_EXT_SUPER_PROP_ASSIGNMENT_REFERENCE)\n  {\n    JERRY_ASSERT (opcode == CBC_EXT_SUPER_PROP_ASSIGNMENT_REFERENCE\n                  || opcode == CBC_EXT_SUPER_PROP_LITERAL_ASSIGNMENT_REFERENCE);\n    *stack_top_p++ = parent;\n    *stack_top_p++ = ecma_copy_value (prop_name);\n    *vm_stack_top_p = stack_top_p;\n\n    return ECMA_VALUE_EMPTY;\n  }\n\n  ecma_object_t *parent_p = ecma_get_object_from_value (parent);\n  ecma_string_t *prop_name_p = ecma_op_to_property_key (prop_name);\n\n  if (prop_name_p == NULL)\n  {\n    ecma_deref_object (parent_p);\n    return ECMA_VALUE_ERROR;\n  }\n\n  ecma_value_t result = ecma_op_object_get_with_receiver (parent_p, prop_name_p, frame_ctx_p->this_binding);\n  ecma_deref_ecma_string (prop_name_p);\n  ecma_deref_object (parent_p);\n\n  if (ECMA_IS_VALUE_ERROR (result))\n  {\n    return result;\n  }\n\n  if (opcode == CBC_EXT_SUPER_PROP_LITERAL_REFERENCE || opcode == CBC_EXT_SUPER_PROP_REFERENCE)\n  {\n    *stack_top_p++ = ecma_copy_value (frame_ctx_p->this_binding);\n    *stack_top_p++ = ECMA_VALUE_UNDEFINED;\n  }\n\n  *stack_top_p++ = result;\n  *vm_stack_top_p = stack_top_p;\n\n  return ECMA_VALUE_EMPTY;\n}",
  "abstract_func_before": "ecma_value_t\nopfunc_form_super_reference (ecma_value_t **VAR_0, /* COMMENT_0 */\n                             vm_frame_ctx_t *VAR_1, /* COMMENT_1 */\n                             ecma_value_t VAR_2, /* COMMENT_2 */\n                             uint8_t VAR_3) /* COMMENT_3 */\n{\n  if (CBC_FUNCTION_GET_TYPE (VAR_1->shared_p->bytecode_header_p->status_flags) == VAR_4)\n  {\n    ecma_environment_record_t *VAR_5 = ecma_op_get_environment_record (VAR_1->lex_env_p);\n\n    if (!ecma_op_this_binding_is_initialized (VAR_5))\n    {\n      return ecma_raise_reference_error (VAR_6);\n    }\n  }\n\n  ecma_value_t VAR_7 = ecma_op_resolve_super_base (VAR_1->lex_env_p);\n\n  if (ECMA_IS_VALUE_ERROR (VAR_7))\n  {\n    return ecma_raise_type_error (VAR_8);\n  }\n\n  if (!ecma_op_require_object_coercible (VAR_7))\n  {\n    return VAR_9;\n  }\n\n  ecma_value_t *VAR_10 = *VAR_0;\n\n  if (VAR_3 >= VAR_11)\n  {\n    JERRY_ASSERT (VAR_3 == VAR_11\n                  || VAR_3 == VAR_12);\n    *VAR_10++ = VAR_7;\n    *VAR_10++ = ecma_copy_value (VAR_2);\n    *VAR_0 = VAR_10;\n\n    return VAR_13;\n  }\n\n  ecma_object_t *VAR_14 = ecma_get_object_from_value (VAR_7);\n  ecma_string_t *VAR_15 = ecma_op_to_property_key (VAR_2);\n\n  if (VAR_15 == NULL)\n  {\n    ecma_deref_object (VAR_14);\n    return VAR_9;\n  }\n\n  ecma_value_t VAR_16 = ecma_op_object_get_with_receiver (VAR_14, VAR_15, VAR_1->this_binding);\n  ecma_deref_ecma_string (VAR_15);\n  ecma_deref_object (VAR_14);\n\n  if (ECMA_IS_VALUE_ERROR (VAR_16))\n  {\n    return VAR_16;\n  }\n\n  if (VAR_3 == VAR_17 || VAR_3 == VAR_18)\n  {\n    *VAR_10++ = ecma_copy_value (VAR_1->this_binding);\n    *VAR_10++ = VAR_19;\n  }\n\n  *VAR_10++ = VAR_16;\n  *VAR_0 = VAR_10;\n\n  return VAR_13;\n}",
  "func_graph_path_before": "jerryscript-project/jerryscript/c6aab480c1e2d968871028aec53c85ac5566b34a/opcodes.c/vul/before/0.json",
  "func": "ecma_value_t\nopfunc_form_super_reference (ecma_value_t **vm_stack_top_p, /**< current vm stack top */\n                             vm_frame_ctx_t *frame_ctx_p, /**< frame context */\n                             ecma_value_t prop_name, /**< property name to resolve */\n                             uint8_t opcode) /**< current cbc opcode */\n{\n  ecma_environment_record_t *environment_record_p = ecma_op_get_environment_record (frame_ctx_p->lex_env_p);\n\n  if (environment_record_p && !ecma_op_this_binding_is_initialized (environment_record_p))\n  {\n    return ecma_raise_reference_error (ECMA_ERR_CALL_SUPER_CONSTRUCTOR_DERIVED_CLASS_BEFORE_THIS);\n  }\n\n  ecma_value_t parent = ecma_op_resolve_super_base (frame_ctx_p->lex_env_p);\n\n  if (ECMA_IS_VALUE_ERROR (parent))\n  {\n    return ecma_raise_type_error (ECMA_ERR_INVOKE_NULLABLE_SUPER_METHOD);\n  }\n\n  if (!ecma_op_require_object_coercible (parent))\n  {\n    return ECMA_VALUE_ERROR;\n  }\n\n  ecma_value_t *stack_top_p = *vm_stack_top_p;\n\n  if (opcode >= CBC_EXT_SUPER_PROP_ASSIGNMENT_REFERENCE)\n  {\n    JERRY_ASSERT (opcode == CBC_EXT_SUPER_PROP_ASSIGNMENT_REFERENCE\n                  || opcode == CBC_EXT_SUPER_PROP_LITERAL_ASSIGNMENT_REFERENCE);\n    *stack_top_p++ = parent;\n    *stack_top_p++ = ecma_copy_value (prop_name);\n    *vm_stack_top_p = stack_top_p;\n\n    return ECMA_VALUE_EMPTY;\n  }\n\n  ecma_object_t *parent_p = ecma_get_object_from_value (parent);\n  ecma_string_t *prop_name_p = ecma_op_to_property_key (prop_name);\n\n  if (prop_name_p == NULL)\n  {\n    ecma_deref_object (parent_p);\n    return ECMA_VALUE_ERROR;\n  }\n\n  ecma_value_t result = ecma_op_object_get_with_receiver (parent_p, prop_name_p, frame_ctx_p->this_binding);\n  ecma_deref_ecma_string (prop_name_p);\n  ecma_deref_object (parent_p);\n\n  if (ECMA_IS_VALUE_ERROR (result))\n  {\n    return result;\n  }\n\n  if (opcode == CBC_EXT_SUPER_PROP_LITERAL_REFERENCE || opcode == CBC_EXT_SUPER_PROP_REFERENCE)\n  {\n    *stack_top_p++ = ecma_copy_value (frame_ctx_p->this_binding);\n    *stack_top_p++ = ECMA_VALUE_UNDEFINED;\n  }\n\n  *stack_top_p++ = result;\n  *vm_stack_top_p = stack_top_p;\n\n  return ECMA_VALUE_EMPTY;\n}",
  "abstract_func": "ecma_value_t\nopfunc_form_super_reference (ecma_value_t **VAR_0, /* COMMENT_0 */\n                             vm_frame_ctx_t *VAR_1, /* COMMENT_1 */\n                             ecma_value_t VAR_2, /* COMMENT_2 */\n                             uint8_t VAR_3) /* COMMENT_3 */\n{\n  ecma_environment_record_t *VAR_4 = ecma_op_get_environment_record (VAR_1->lex_env_p);\n\n  if (VAR_4 && !ecma_op_this_binding_is_initialized (VAR_4))\n  {\n    return ecma_raise_reference_error (VAR_5);\n  }\n\n  ecma_value_t VAR_6 = ecma_op_resolve_super_base (VAR_1->lex_env_p);\n\n  if (ECMA_IS_VALUE_ERROR (VAR_6))\n  {\n    return ecma_raise_type_error (VAR_7);\n  }\n\n  if (!ecma_op_require_object_coercible (VAR_6))\n  {\n    return VAR_8;\n  }\n\n  ecma_value_t *VAR_9 = *VAR_0;\n\n  if (VAR_3 >= VAR_10)\n  {\n    JERRY_ASSERT (VAR_3 == VAR_10\n                  || VAR_3 == VAR_11);\n    *VAR_9++ = VAR_6;\n    *VAR_9++ = ecma_copy_value (VAR_2);\n    *VAR_0 = VAR_9;\n\n    return VAR_12;\n  }\n\n  ecma_object_t *VAR_13 = ecma_get_object_from_value (VAR_6);\n  ecma_string_t *VAR_14 = ecma_op_to_property_key (VAR_2);\n\n  if (VAR_14 == NULL)\n  {\n    ecma_deref_object (VAR_13);\n    return VAR_8;\n  }\n\n  ecma_value_t VAR_15 = ecma_op_object_get_with_receiver (VAR_13, VAR_14, VAR_1->this_binding);\n  ecma_deref_ecma_string (VAR_14);\n  ecma_deref_object (VAR_13);\n\n  if (ECMA_IS_VALUE_ERROR (VAR_15))\n  {\n    return VAR_15;\n  }\n\n  if (VAR_3 == VAR_16 || VAR_3 == VAR_17)\n  {\n    *VAR_9++ = ecma_copy_value (VAR_1->this_binding);\n    *VAR_9++ = VAR_18;\n  }\n\n  *VAR_9++ = VAR_15;\n  *VAR_0 = VAR_9;\n\n  return VAR_12;\n}",
  "func_graph_path": "jerryscript-project/jerryscript/c6aab480c1e2d968871028aec53c85ac5566b34a/opcodes.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -4,14 +4,11 @@\n                              ecma_value_t prop_name, /**< property name to resolve */\n                              uint8_t opcode) /**< current cbc opcode */\n {\n-  if (CBC_FUNCTION_GET_TYPE (frame_ctx_p->shared_p->bytecode_header_p->status_flags) == CBC_FUNCTION_CONSTRUCTOR)\n+  ecma_environment_record_t *environment_record_p = ecma_op_get_environment_record (frame_ctx_p->lex_env_p);\n+\n+  if (environment_record_p && !ecma_op_this_binding_is_initialized (environment_record_p))\n   {\n-    ecma_environment_record_t *environment_record_p = ecma_op_get_environment_record (frame_ctx_p->lex_env_p);\n-\n-    if (!ecma_op_this_binding_is_initialized (environment_record_p))\n-    {\n-      return ecma_raise_reference_error (ECMA_ERR_CALL_SUPER_CONSTRUCTOR_DERIVED_CLASS_BEFORE_THIS);\n-    }\n+    return ecma_raise_reference_error (ECMA_ERR_CALL_SUPER_CONSTRUCTOR_DERIVED_CLASS_BEFORE_THIS);\n   }\n \n   ecma_value_t parent = ecma_op_resolve_super_base (frame_ctx_p->lex_env_p);",
  "diff_line_info": {
    "deleted_lines": [
      "  if (CBC_FUNCTION_GET_TYPE (frame_ctx_p->shared_p->bytecode_header_p->status_flags) == CBC_FUNCTION_CONSTRUCTOR)",
      "    ecma_environment_record_t *environment_record_p = ecma_op_get_environment_record (frame_ctx_p->lex_env_p);",
      "",
      "    if (!ecma_op_this_binding_is_initialized (environment_record_p))",
      "    {",
      "      return ecma_raise_reference_error (ECMA_ERR_CALL_SUPER_CONSTRUCTOR_DERIVED_CLASS_BEFORE_THIS);",
      "    }"
    ],
    "added_lines": [
      "  ecma_environment_record_t *environment_record_p = ecma_op_get_environment_record (frame_ctx_p->lex_env_p);",
      "",
      "  if (environment_record_p && !ecma_op_this_binding_is_initialized (environment_record_p))",
      "    return ecma_raise_reference_error (ECMA_ERR_CALL_SUPER_CONSTRUCTOR_DERIVED_CLASS_BEFORE_THIS);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/jerryscript-project/jerryscript/pull/4878",
  "description": {
    "pr_info": {
      "title": "Fix arrow function this binding resolving if environment record is present",
      "number": 4878
    },
    "comment": [
      "This patch fixes #4872 and fixes #4876.\r\n\r\nJerryScript-DCO-1.0-Signed-off-by: Robert Fancsik robert.fancsik@h-lab.eu"
    ]
  },
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Defect Remediation & Feature Upgrades; **Confidence:** 0.9"
}