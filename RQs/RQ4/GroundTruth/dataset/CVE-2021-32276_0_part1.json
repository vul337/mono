{
  "cve_id": "CVE-2021-32276",
  "cwe_ids": [
    "CWE-476"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "knik0/faad2",
  "commit_msg": "Check for inconsistent number of channels.\n\nThe frontend does not support audio output when the number of channels\nchanges between frames. Check if the number of decoded channels matches the\nnumber of audio output channels.\n\nIt is possible that this condition should be detected in the decoder instead\nof the frontend.\n\nFixes crash from afl-fuzz.",
  "commit_hash": "4ed30d3d232b6a7a150cc06aed14eb47e4eda14e",
  "git_url": "https://github.com/knik0/faad2/commit/4ed30d3d232b6a7a150cc06aed14eb47e4eda14e",
  "file_path": "frontend/main.c",
  "func_name": "decodeAACfile",
  "func_before": "static int decodeAACfile(char *aacfile, char *sndfile, char *adts_fn, int to_stdout,\n                  int def_srate, int object_type, int outputFormat, int fileType,\n                  int downMatrix, int infoOnly, int adts_out, int old_format,\n                  float *song_length)\n{\n    int tagsize;\n    unsigned long samplerate;\n    unsigned char channels;\n    void *sample_buffer;\n\n    audio_file *aufile = NULL;\n\n    FILE *adtsFile = NULL;\n    unsigned char *adtsData;\n    int adtsDataSize;\n\n    NeAACDecHandle hDecoder;\n    NeAACDecFrameInfo frameInfo;\n    NeAACDecConfigurationPtr config;\n\n    char percents[MAX_PERCENTS];\n    int percent, old_percent = -1;\n    int bread, fileread;\n    int header_type = 0;\n    int bitrate = 0;\n    float length = 0;\n\n    int first_time = 1;\n    int retval;\n    int streaminput = 0;\n\n    aac_buffer b;\n\n    memset(&b, 0, sizeof(aac_buffer));\n\n    if (adts_out)\n    {\n        adtsFile = faad_fopen(adts_fn, \"wb\");\n        if (adtsFile == NULL)\n        {\n            faad_fprintf(stderr, \"Error opening file: %s\\n\", adts_fn);\n            return 1;\n        }\n    }\n\n    if (0 == strcmp(aacfile, \"-\"))\n    {\n        b.infile = stdin;\n#ifdef _WIN32\n        _setmode(_fileno(stdin), O_BINARY);\n#endif\n\n    }\n    else\n    {\n        b.infile = faad_fopen(aacfile, \"rb\");\n        if (b.infile == NULL)\n        {\n            /* unable to open file */\n            faad_fprintf(stderr, \"Error opening file: %s\\n\", aacfile);\n            return 1;\n        }\n    }\n\n    retval = fseek(b.infile, 0, SEEK_END);\n#ifdef _WIN32\n    if (0 == strcmp(aacfile, \"-\")) {\n        retval = -1;\n    }\n#endif\n    if (retval )\n    {\n        faad_fprintf(stderr, \"Input not seekable %s\\n\", aacfile);\n        fileread = -1;\n        streaminput = 1;\n    } else {\n        fileread = ftell(b.infile);\n        fseek(b.infile, 0, SEEK_SET);\n    };\n\n    if (!(b.buffer = (unsigned char*)malloc(FAAD_MIN_STREAMSIZE*MAX_CHANNELS)))\n    {\n        faad_fprintf(stderr, \"Memory allocation error\\n\");\n        return 0;\n    }\n    memset(b.buffer, 0, FAAD_MIN_STREAMSIZE*MAX_CHANNELS);\n\n    bread = fread(b.buffer, 1, FAAD_MIN_STREAMSIZE*MAX_CHANNELS, b.infile);\n    b.bytes_into_buffer = bread;\n    b.bytes_consumed = 0;\n    b.file_offset = 0;\n\n    if (bread != FAAD_MIN_STREAMSIZE*MAX_CHANNELS)\n        b.at_eof = 1;\n\n    tagsize = 0;\n    if (!memcmp(b.buffer, \"ID3\", 3))\n    {\n        /* high bit is not used */\n        tagsize = (b.buffer[6] << 21) | (b.buffer[7] << 14) |\n            (b.buffer[8] <<  7) | (b.buffer[9] <<  0);\n\n        tagsize += 10;\n        advance_buffer(&b, tagsize);\n        fill_buffer(&b);\n    }\n\n    hDecoder = NeAACDecOpen();\n\n    /* Set the default object type and samplerate */\n    /* This is useful for RAW AAC files */\n    config = NeAACDecGetCurrentConfiguration(hDecoder);\n    if (def_srate)\n        config->defSampleRate = def_srate;\n    config->defObjectType = object_type;\n    config->outputFormat = outputFormat;\n    config->downMatrix = downMatrix;\n    config->useOldADTSFormat = old_format;\n    //config->dontUpSampleImplicitSBR = 1;\n    NeAACDecSetConfiguration(hDecoder, config);\n\n    /* get AAC infos for printing */\n    header_type = 0;\n    if (streaminput == 1)\n        lookforheader(&b);\n\n    if ((b.buffer[0] == 0xFF) && ((b.buffer[1] & 0xF6) == 0xF0))\n    {\n        if (streaminput == 1)\n        {\n            int /*frames,*/ frame_length;\n            int samplerate;\n            float frames_per_sec, bytes_per_frame;\n            channels = 2;\n            samplerate = adts_sample_rates[(b.buffer[2]&0x3c)>>2];\n            frame_length = ((((unsigned int)b.buffer[3] & 0x3)) << 11)\n                | (((unsigned int)b.buffer[4]) << 3) | (b.buffer[5] >> 5);\n            frames_per_sec = (float)samplerate/1024.0f;\n            bytes_per_frame = (float)frame_length/(float)(1000);\n            bitrate = (int)(8. * bytes_per_frame * frames_per_sec + 0.5);\n            length = 1;\n            faad_fprintf(stderr, \"Streamed input format  samplerate %d channels %d.\\n\", samplerate, channels);\n        } else {\n            adts_parse(&b, &bitrate, &length);\n            fseek(b.infile, tagsize, SEEK_SET);\n\n            bread = fread(b.buffer, 1, FAAD_MIN_STREAMSIZE*MAX_CHANNELS, b.infile);\n            if (bread != FAAD_MIN_STREAMSIZE*MAX_CHANNELS)\n                b.at_eof = 1;\n            else\n                b.at_eof = 0;\n            b.bytes_into_buffer = bread;\n            b.bytes_consumed = 0;\n            b.file_offset = tagsize;\n        }\n\n        header_type = 1;\n    }\n    else if (memcmp(b.buffer, \"ADIF\", 4) == 0)\n    {\n        int skip_size = (b.buffer[4] & 0x80) ? 9 : 0;\n        bitrate = ((unsigned int)(b.buffer[4 + skip_size] & 0x0F)<<19) |\n            ((unsigned int)b.buffer[5 + skip_size]<<11) |\n            ((unsigned int)b.buffer[6 + skip_size]<<3) |\n            ((unsigned int)b.buffer[7 + skip_size] & 0xE0);\n\n        length = (float)fileread;\n        if (length != 0)\n        {\n            length = ((float)length*8.f)/((float)bitrate) + 0.5f;\n        }\n\n        bitrate = (int)((float)bitrate/1000.0f + 0.5f);\n\n        header_type = 2;\n    }\n\n    *song_length = length;\n\n    fill_buffer(&b);\n    if ((bread = NeAACDecInit(hDecoder, b.buffer,\n        b.bytes_into_buffer, &samplerate, &channels)) < 0)\n    {\n        /* If some error initializing occured, skip the file */\n        faad_fprintf(stderr, \"Error initializing decoder library.\\n\");\n        if (b.buffer)\n            free(b.buffer);\n        NeAACDecClose(hDecoder);\n        if (b.infile != stdin)\n            fclose(b.infile);\n        return 1;\n    }\n    advance_buffer(&b, bread);\n    fill_buffer(&b);\n\n    /* print AAC file info */\n    faad_fprintf(stderr, \"%s file info:\\n\", aacfile);\n    switch (header_type)\n    {\n    case 0:\n        faad_fprintf(stderr, \"RAW\\n\\n\");\n        break;\n    case 1:\n        faad_fprintf(stderr, \"ADTS, %.3f sec, %d kbps, %d Hz\\n\\n\",\n            length, bitrate, samplerate);\n        break;\n    case 2:\n        faad_fprintf(stderr, \"ADIF, %.3f sec, %d kbps, %d Hz\\n\\n\",\n            length, bitrate, samplerate);\n        break;\n    }\n\n    if (infoOnly)\n    {\n        NeAACDecClose(hDecoder);\n        if (b.infile != stdin)\n            fclose(b.infile);\n        if (b.buffer)\n            free(b.buffer);\n        return 0;\n    }\n\n    do\n    {\n        sample_buffer = NeAACDecDecode(hDecoder, &frameInfo,\n            b.buffer, b.bytes_into_buffer);\n\n        if (adts_out == 1)\n        {\n            int skip = (old_format) ? 8 : 7;\n            adtsData = MakeAdtsHeader(&adtsDataSize, &frameInfo, old_format);\n\n            /* write the adts header */\n            fwrite(adtsData, 1, adtsDataSize, adtsFile);\n\n            /* write the frame data */\n            if (frameInfo.header_type == ADTS)\n                fwrite(b.buffer + skip, 1, frameInfo.bytesconsumed - skip, adtsFile);\n            else\n                fwrite(b.buffer, 1, frameInfo.bytesconsumed, adtsFile);\n        }\n\n        /* update buffer indices */\n        advance_buffer(&b, frameInfo.bytesconsumed);\n\n        if (frameInfo.error > 0)\n        {\n            faad_fprintf(stderr, \"Error: %s\\n\",\n                NeAACDecGetErrorMessage(frameInfo.error));\n        }\n\n        /* open the sound file now that the number of channels are known */\n        if (first_time && !frameInfo.error)\n        {\n            /* print some channel info */\n            print_channel_info(&frameInfo);\n\n            if (!adts_out)\n            {\n                /* open output file */\n                if (!to_stdout)\n                {\n                    aufile = open_audio_file(sndfile, frameInfo.samplerate, frameInfo.channels,\n                        outputFormat, fileType, aacChannelConfig2wavexChannelMask(&frameInfo));\n                } else {\n                    aufile = open_audio_file(\"-\", frameInfo.samplerate, frameInfo.channels,\n                        outputFormat, fileType, aacChannelConfig2wavexChannelMask(&frameInfo));\n                }\n                if (aufile == NULL)\n                {\n                    if (b.buffer)\n                        free(b.buffer);\n                    NeAACDecClose(hDecoder);\n                    if (b.infile != stdin)\n                        fclose(b.infile);\n                    return 0;\n                }\n            } else {\n                faad_fprintf(stderr, \"Writing output MPEG-4 AAC ADTS file.\\n\\n\");\n            }\n            first_time = 0;\n        }\n\n        percent = min((int)(b.file_offset*100)/fileread, 100);\n        if (percent > old_percent)\n        {\n            old_percent = percent;\n            snprintf(percents, MAX_PERCENTS, \"%d%% decoding %s.\", percent, aacfile);\n            faad_fprintf(stderr, \"%s\\r\", percents);\n#ifdef _WIN32\n            SetConsoleTitle(percents);\n#endif\n        }\n\n        if ((frameInfo.error == 0) && (frameInfo.samples > 0) && (!adts_out))\n        {\n            if (write_audio_file(aufile, sample_buffer, frameInfo.samples, 0) == 0)\n                break;\n        }\n\n        /* fill buffer */\n        fill_buffer(&b);\n\n        if (b.bytes_into_buffer == 0)\n            sample_buffer = NULL; /* to make sure it stops now */\n\n    } while (sample_buffer != NULL);\n\n    NeAACDecClose(hDecoder);\n\n    if (adts_out == 1)\n    {\n        fclose(adtsFile);\n    }\n\n    if (b.infile != stdin)\n        fclose(b.infile);\n\n    if (!first_time && !adts_out)\n        close_audio_file(aufile);\n\n    if (b.buffer)\n        free(b.buffer);\n\n    return frameInfo.error;\n}",
  "abstract_func_before": "static int decodeAACfile(char *VAR_0, char *VAR_1, char *VAR_2, int VAR_3,\n                  int VAR_4, int VAR_5, int VAR_6, int VAR_7,\n                  int VAR_8, int VAR_9, int VAR_10, int VAR_11,\n                  float *VAR_12)\n{\n    int VAR_13;\n    unsigned long VAR_14;\n    unsigned char VAR_15;\n    void *VAR_16;\n\n    audio_file *VAR_17 = NULL;\n\n    FILE *VAR_18 = NULL;\n    unsigned char *VAR_19;\n    int VAR_20;\n\n    NeAACDecHandle VAR_21;\n    NeAACDecFrameInfo VAR_22;\n    NeAACDecConfigurationPtr VAR_23;\n\n    char VAR_24[VAR_25];\n    int VAR_26, VAR_27 = -1;\n    int VAR_28, VAR_29;\n    int VAR_30 = 0;\n    int VAR_31 = 0;\n    float VAR_32 = 0;\n\n    int VAR_33 = 1;\n    int VAR_34;\n    int VAR_35 = 0;\n\n    aac_buffer VAR_36;\n\n    memset(&VAR_36, 0, sizeof(aac_buffer));\n\n    if (VAR_10)\n    {\n        VAR_18 = faad_fopen(VAR_2, \"wb\");\n        if (VAR_18 == NULL)\n        {\n            faad_fprintf(VAR_37, \"Error opening file: %s\\n\", VAR_2);\n            return 1;\n        }\n    }\n\n    if (0 == strcmp(VAR_0, \"-\"))\n    {\n        VAR_36.infile = VAR_38;\n#ifdef VAR_39\n        _setmode(_fileno(VAR_38), VAR_40);\n#endif\n\n    }\n    else\n    {\n        VAR_36.infile = faad_fopen(VAR_0, \"rb\");\n        if (VAR_36.infile == NULL)\n        {\n            /* COMMENT_0 */\n            faad_fprintf(VAR_37, \"Error opening file: %s\\n\", VAR_0);\n            return 1;\n        }\n    }\n\n    VAR_34 = fseek(VAR_36.infile, 0, VAR_41);\n#ifdef VAR_39\n    if (0 == strcmp(VAR_0, \"-\")) {\n        VAR_34 = -1;\n    }\n#endif\n    if (VAR_34 )\n    {\n        faad_fprintf(VAR_37, \"Input not seekable %s\\n\", VAR_0);\n        VAR_29 = -1;\n        VAR_35 = 1;\n    } else {\n        VAR_29 = ftell(VAR_36.infile);\n        fseek(VAR_36.infile, 0, VAR_42);\n    };\n\n    if (!(VAR_36.buffer = (unsigned char*)malloc(VAR_43*VAR_44)))\n    {\n        faad_fprintf(VAR_37, \"Memory allocation error\\n\");\n        return 0;\n    }\n    memset(VAR_36.buffer, 0, VAR_43*VAR_44);\n\n    VAR_28 = fread(VAR_36.buffer, 1, VAR_43*VAR_44, VAR_36.infile);\n    VAR_36.bytes_into_buffer = VAR_28;\n    VAR_36.bytes_consumed = 0;\n    VAR_36.file_offset = 0;\n\n    if (VAR_28 != VAR_43*VAR_44)\n        VAR_36.at_eof = 1;\n\n    VAR_13 = 0;\n    if (!memcmp(VAR_36.buffer, \"ID3\", 3))\n    {\n        /* COMMENT_1 */\n        VAR_13 = (VAR_36.buffer[6] << 21) | (VAR_36.buffer[7] << 14) |\n            (VAR_36.buffer[8] <<  7) | (VAR_36.buffer[9] <<  0);\n\n        VAR_13 += 10;\n        advance_buffer(&VAR_36, VAR_13);\n        fill_buffer(&VAR_36);\n    }\n\n    VAR_21 = NeAACDecOpen();\n\n    /* COMMENT_2 */\n    /* COMMENT_3 */\n    VAR_23 = NeAACDecGetCurrentConfiguration(VAR_21);\n    if (VAR_4)\n        VAR_23->defSampleRate = VAR_4;\n    VAR_23->defObjectType = VAR_5;\n    VAR_23->outputFormat = VAR_6;\n    VAR_23->downMatrix = VAR_8;\n    VAR_23->useOldADTSFormat = VAR_11;\n    /* COMMENT_4 */\n    NeAACDecSetConfiguration(VAR_21, VAR_23);\n\n    /* COMMENT_5 */\n    VAR_30 = 0;\n    if (VAR_35 == 1)\n        lookforheader(&VAR_36);\n\n    if ((VAR_36.buffer[0] == 0xFF) && ((VAR_36.buffer[1] & 0xF6) == 0xF0))\n    {\n        if (VAR_35 == 1)\n        {\n            int /* COMMENT_6 */ VAR_45;\n            int VAR_14;\n            float VAR_46, VAR_47;\n            VAR_15 = 2;\n            VAR_14 = VAR_48[(VAR_36.buffer[2]&0x3c)>>2];\n            VAR_45 = ((((unsigned int)VAR_36.buffer[3] & 0x3)) << 11)\n                | (((unsigned int)VAR_36.buffer[4]) << 3) | (VAR_36.buffer[5] >> 5);\n            VAR_46 = (float)VAR_14/1024.0f;\n            VAR_47 = (float)VAR_45/(float)(1000);\n            VAR_31 = (int)(8. * VAR_47 * VAR_46 + 0.5);\n            VAR_32 = 1;\n            faad_fprintf(VAR_37, \"Streamed input format  samplerate %d channels %d.\\n\", VAR_14, VAR_15);\n        } else {\n            adts_parse(&VAR_36, &VAR_31, &VAR_32);\n            fseek(VAR_36.infile, VAR_13, VAR_42);\n\n            VAR_28 = fread(VAR_36.buffer, 1, VAR_43*VAR_44, VAR_36.infile);\n            if (VAR_28 != VAR_43*VAR_44)\n                VAR_36.at_eof = 1;\n            else\n                VAR_36.at_eof = 0;\n            VAR_36.bytes_into_buffer = VAR_28;\n            VAR_36.bytes_consumed = 0;\n            VAR_36.file_offset = VAR_13;\n        }\n\n        VAR_30 = 1;\n    }\n    else if (memcmp(VAR_36.buffer, \"ADIF\", 4) == 0)\n    {\n        int VAR_49 = (VAR_36.buffer[4] & 0x80) ? 9 : 0;\n        VAR_31 = ((unsigned int)(VAR_36.buffer[4 + VAR_49] & 0x0F)<<19) |\n            ((unsigned int)VAR_36.buffer[5 + VAR_49]<<11) |\n            ((unsigned int)VAR_36.buffer[6 + VAR_49]<<3) |\n            ((unsigned int)VAR_36.buffer[7 + VAR_49] & 0xE0);\n\n        VAR_32 = (float)VAR_29;\n        if (VAR_32 != 0)\n        {\n            VAR_32 = ((float)VAR_32*8.f)/((float)VAR_31) + 0.5f;\n        }\n\n        VAR_31 = (int)((float)VAR_31/1000.0f + 0.5f);\n\n        VAR_30 = 2;\n    }\n\n    *VAR_12 = VAR_32;\n\n    fill_buffer(&VAR_36);\n    if ((VAR_28 = NeAACDecInit(VAR_21, VAR_36.buffer,\n        VAR_36.bytes_into_buffer, &VAR_14, &VAR_15)) < 0)\n    {\n        /* COMMENT_7 */\n        faad_fprintf(VAR_37, \"Error initializing decoder library.\\n\");\n        if (VAR_36.buffer)\n            free(VAR_36.buffer);\n        NeAACDecClose(VAR_21);\n        if (VAR_36.infile != VAR_38)\n            fclose(VAR_36.infile);\n        return 1;\n    }\n    advance_buffer(&VAR_36, VAR_28);\n    fill_buffer(&VAR_36);\n\n    /* COMMENT_8 */\n    faad_fprintf(VAR_37, \"%s file info:\\n\", VAR_0);\n    switch (VAR_30)\n    {\n    case 0:\n        faad_fprintf(VAR_37, \"RAW\\n\\n\");\n        break;\n    case 1:\n        faad_fprintf(VAR_37, \"ADTS, %.3f sec, %d kbps, %d Hz\\n\\n\",\n            VAR_32, VAR_31, VAR_14);\n        break;\n    case 2:\n        faad_fprintf(VAR_37, \"ADIF, %.3f sec, %d kbps, %d Hz\\n\\n\",\n            VAR_32, VAR_31, VAR_14);\n        break;\n    }\n\n    if (VAR_9)\n    {\n        NeAACDecClose(VAR_21);\n        if (VAR_36.infile != VAR_38)\n            fclose(VAR_36.infile);\n        if (VAR_36.buffer)\n            free(VAR_36.buffer);\n        return 0;\n    }\n\n    do\n    {\n        VAR_16 = NeAACDecDecode(VAR_21, &VAR_22,\n            VAR_36.buffer, VAR_36.bytes_into_buffer);\n\n        if (VAR_10 == 1)\n        {\n            int VAR_50 = (VAR_11) ? 8 : 7;\n            VAR_19 = MakeAdtsHeader(&VAR_20, &VAR_22, VAR_11);\n\n            /* COMMENT_9 */\n            fwrite(VAR_19, 1, VAR_20, VAR_18);\n\n            /* COMMENT_10 */\n            if (VAR_22.header_type == VAR_51)\n                fwrite(VAR_36.buffer + VAR_50, 1, VAR_22.bytesconsumed - VAR_50, VAR_18);\n            else\n                fwrite(VAR_36.buffer, 1, VAR_22.bytesconsumed, VAR_18);\n        }\n\n        /* COMMENT_11 */\n        advance_buffer(&VAR_36, VAR_22.bytesconsumed);\n\n        if (VAR_22.error > 0)\n        {\n            faad_fprintf(VAR_37, \"Error: %s\\n\",\n                NeAACDecGetErrorMessage(VAR_22.error));\n        }\n\n        /* COMMENT_12 */\n        if (VAR_33 && !VAR_22.error)\n        {\n            /* COMMENT_13 */\n            print_channel_info(&VAR_22);\n\n            if (!VAR_10)\n            {\n                /* COMMENT_14 */\n                if (!VAR_3)\n                {\n                    VAR_17 = open_audio_file(VAR_1, VAR_22.samplerate, VAR_22.channels,\n                        VAR_6, VAR_7, aacChannelConfig2wavexChannelMask(&VAR_22));\n                } else {\n                    VAR_17 = open_audio_file(\"-\", VAR_22.samplerate, VAR_22.channels,\n                        VAR_6, VAR_7, aacChannelConfig2wavexChannelMask(&VAR_22));\n                }\n                if (VAR_17 == NULL)\n                {\n                    if (VAR_36.buffer)\n                        free(VAR_36.buffer);\n                    NeAACDecClose(VAR_21);\n                    if (VAR_36.infile != VAR_38)\n                        fclose(VAR_36.infile);\n                    return 0;\n                }\n            } else {\n                faad_fprintf(VAR_37, \"Writing output MPEG-4 AAC ADTS file.\\n\\n\");\n            }\n            VAR_33 = 0;\n        }\n\n        VAR_26 = min((int)(VAR_36.file_offset*100)/VAR_29, 100);\n        if (VAR_26 > VAR_27)\n        {\n            VAR_27 = VAR_26;\n            snprintf(VAR_24, VAR_25, \"%d%% decoding %s.\", VAR_26, VAR_0);\n            faad_fprintf(VAR_37, \"%s\\r\", VAR_24);\n#ifdef VAR_39\n            SetConsoleTitle(VAR_24);\n#endif\n        }\n\n        if ((VAR_22.error == 0) && (VAR_22.samples > 0) && (!VAR_10))\n        {\n            if (write_audio_file(VAR_17, VAR_16, VAR_22.samples, 0) == 0)\n                break;\n        }\n\n        /* COMMENT_15 */\n        fill_buffer(&VAR_36);\n\n        if (VAR_36.bytes_into_buffer == 0)\n            VAR_16 = NULL; /* COMMENT_16 */\n\n    } while (VAR_16 != NULL);\n\n    NeAACDecClose(VAR_21);\n\n    if (VAR_10 == 1)\n    {\n        fclose(VAR_18);\n    }\n\n    if (VAR_36.infile != VAR_38)\n        fclose(VAR_36.infile);\n\n    if (!VAR_33 && !VAR_10)\n        close_audio_file(VAR_17);\n\n    if (VAR_36.buffer)\n        free(VAR_36.buffer);\n\n    return VAR_22.error;\n}",
  "func_graph_path_before": "knik0/faad2/4ed30d3d232b6a7a150cc06aed14eb47e4eda14e/main.c/vul/before/0.json",
  "func": "static int decodeAACfile(char *aacfile, char *sndfile, char *adts_fn, int to_stdout,\n                  int def_srate, int object_type, int outputFormat, int fileType,\n                  int downMatrix, int infoOnly, int adts_out, int old_format,\n                  float *song_length)\n{\n    int tagsize;\n    unsigned long samplerate;\n    unsigned char channels;\n    void *sample_buffer;\n\n    audio_file *aufile = NULL;\n\n    FILE *adtsFile = NULL;\n    unsigned char *adtsData;\n    int adtsDataSize;\n\n    NeAACDecHandle hDecoder;\n    NeAACDecFrameInfo frameInfo;\n    NeAACDecConfigurationPtr config;\n\n    char percents[MAX_PERCENTS];\n    int percent, old_percent = -1;\n    int bread, fileread;\n    int header_type = 0;\n    int bitrate = 0;\n    float length = 0;\n\n    int first_time = 1;\n    int retval;\n    int streaminput = 0;\n\n    aac_buffer b;\n\n    memset(&b, 0, sizeof(aac_buffer));\n\n    if (adts_out)\n    {\n        adtsFile = faad_fopen(adts_fn, \"wb\");\n        if (adtsFile == NULL)\n        {\n            faad_fprintf(stderr, \"Error opening file: %s\\n\", adts_fn);\n            return 1;\n        }\n    }\n\n    if (0 == strcmp(aacfile, \"-\"))\n    {\n        b.infile = stdin;\n#ifdef _WIN32\n        _setmode(_fileno(stdin), O_BINARY);\n#endif\n\n    }\n    else\n    {\n        b.infile = faad_fopen(aacfile, \"rb\");\n        if (b.infile == NULL)\n        {\n            /* unable to open file */\n            faad_fprintf(stderr, \"Error opening file: %s\\n\", aacfile);\n            return 1;\n        }\n    }\n\n    retval = fseek(b.infile, 0, SEEK_END);\n#ifdef _WIN32\n    if (0 == strcmp(aacfile, \"-\")) {\n        retval = -1;\n    }\n#endif\n    if (retval )\n    {\n        faad_fprintf(stderr, \"Input not seekable %s\\n\", aacfile);\n        fileread = -1;\n        streaminput = 1;\n    } else {\n        fileread = ftell(b.infile);\n        fseek(b.infile, 0, SEEK_SET);\n    };\n\n    if (!(b.buffer = (unsigned char*)malloc(FAAD_MIN_STREAMSIZE*MAX_CHANNELS)))\n    {\n        faad_fprintf(stderr, \"Memory allocation error\\n\");\n        return 0;\n    }\n    memset(b.buffer, 0, FAAD_MIN_STREAMSIZE*MAX_CHANNELS);\n\n    bread = fread(b.buffer, 1, FAAD_MIN_STREAMSIZE*MAX_CHANNELS, b.infile);\n    b.bytes_into_buffer = bread;\n    b.bytes_consumed = 0;\n    b.file_offset = 0;\n\n    if (bread != FAAD_MIN_STREAMSIZE*MAX_CHANNELS)\n        b.at_eof = 1;\n\n    tagsize = 0;\n    if (!memcmp(b.buffer, \"ID3\", 3))\n    {\n        /* high bit is not used */\n        tagsize = (b.buffer[6] << 21) | (b.buffer[7] << 14) |\n            (b.buffer[8] <<  7) | (b.buffer[9] <<  0);\n\n        tagsize += 10;\n        advance_buffer(&b, tagsize);\n        fill_buffer(&b);\n    }\n\n    hDecoder = NeAACDecOpen();\n\n    /* Set the default object type and samplerate */\n    /* This is useful for RAW AAC files */\n    config = NeAACDecGetCurrentConfiguration(hDecoder);\n    if (def_srate)\n        config->defSampleRate = def_srate;\n    config->defObjectType = object_type;\n    config->outputFormat = outputFormat;\n    config->downMatrix = downMatrix;\n    config->useOldADTSFormat = old_format;\n    //config->dontUpSampleImplicitSBR = 1;\n    NeAACDecSetConfiguration(hDecoder, config);\n\n    /* get AAC infos for printing */\n    header_type = 0;\n    if (streaminput == 1)\n        lookforheader(&b);\n\n    if ((b.buffer[0] == 0xFF) && ((b.buffer[1] & 0xF6) == 0xF0))\n    {\n        if (streaminput == 1)\n        {\n            int /*frames,*/ frame_length;\n            int samplerate;\n            float frames_per_sec, bytes_per_frame;\n            channels = 2;\n            samplerate = adts_sample_rates[(b.buffer[2]&0x3c)>>2];\n            frame_length = ((((unsigned int)b.buffer[3] & 0x3)) << 11)\n                | (((unsigned int)b.buffer[4]) << 3) | (b.buffer[5] >> 5);\n            frames_per_sec = (float)samplerate/1024.0f;\n            bytes_per_frame = (float)frame_length/(float)(1000);\n            bitrate = (int)(8. * bytes_per_frame * frames_per_sec + 0.5);\n            length = 1;\n            faad_fprintf(stderr, \"Streamed input format  samplerate %d channels %d.\\n\", samplerate, channels);\n        } else {\n            adts_parse(&b, &bitrate, &length);\n            fseek(b.infile, tagsize, SEEK_SET);\n\n            bread = fread(b.buffer, 1, FAAD_MIN_STREAMSIZE*MAX_CHANNELS, b.infile);\n            if (bread != FAAD_MIN_STREAMSIZE*MAX_CHANNELS)\n                b.at_eof = 1;\n            else\n                b.at_eof = 0;\n            b.bytes_into_buffer = bread;\n            b.bytes_consumed = 0;\n            b.file_offset = tagsize;\n        }\n\n        header_type = 1;\n    }\n    else if (memcmp(b.buffer, \"ADIF\", 4) == 0)\n    {\n        int skip_size = (b.buffer[4] & 0x80) ? 9 : 0;\n        bitrate = ((unsigned int)(b.buffer[4 + skip_size] & 0x0F)<<19) |\n            ((unsigned int)b.buffer[5 + skip_size]<<11) |\n            ((unsigned int)b.buffer[6 + skip_size]<<3) |\n            ((unsigned int)b.buffer[7 + skip_size] & 0xE0);\n\n        length = (float)fileread;\n        if (length != 0)\n        {\n            length = ((float)length*8.f)/((float)bitrate) + 0.5f;\n        }\n\n        bitrate = (int)((float)bitrate/1000.0f + 0.5f);\n\n        header_type = 2;\n    }\n\n    *song_length = length;\n\n    fill_buffer(&b);\n    if ((bread = NeAACDecInit(hDecoder, b.buffer,\n        b.bytes_into_buffer, &samplerate, &channels)) < 0)\n    {\n        /* If some error initializing occured, skip the file */\n        faad_fprintf(stderr, \"Error initializing decoder library.\\n\");\n        if (b.buffer)\n            free(b.buffer);\n        NeAACDecClose(hDecoder);\n        if (b.infile != stdin)\n            fclose(b.infile);\n        return 1;\n    }\n    advance_buffer(&b, bread);\n    fill_buffer(&b);\n\n    /* print AAC file info */\n    faad_fprintf(stderr, \"%s file info:\\n\", aacfile);\n    switch (header_type)\n    {\n    case 0:\n        faad_fprintf(stderr, \"RAW\\n\\n\");\n        break;\n    case 1:\n        faad_fprintf(stderr, \"ADTS, %.3f sec, %d kbps, %d Hz\\n\\n\",\n            length, bitrate, samplerate);\n        break;\n    case 2:\n        faad_fprintf(stderr, \"ADIF, %.3f sec, %d kbps, %d Hz\\n\\n\",\n            length, bitrate, samplerate);\n        break;\n    }\n\n    if (infoOnly)\n    {\n        NeAACDecClose(hDecoder);\n        if (b.infile != stdin)\n            fclose(b.infile);\n        if (b.buffer)\n            free(b.buffer);\n        return 0;\n    }\n\n    do\n    {\n        sample_buffer = NeAACDecDecode(hDecoder, &frameInfo,\n            b.buffer, b.bytes_into_buffer);\n\n        if (adts_out == 1)\n        {\n            int skip = (old_format) ? 8 : 7;\n            adtsData = MakeAdtsHeader(&adtsDataSize, &frameInfo, old_format);\n\n            /* write the adts header */\n            fwrite(adtsData, 1, adtsDataSize, adtsFile);\n\n            /* write the frame data */\n            if (frameInfo.header_type == ADTS)\n                fwrite(b.buffer + skip, 1, frameInfo.bytesconsumed - skip, adtsFile);\n            else\n                fwrite(b.buffer, 1, frameInfo.bytesconsumed, adtsFile);\n        }\n\n        /* update buffer indices */\n        advance_buffer(&b, frameInfo.bytesconsumed);\n\n        /* check if the inconsistent number of channels */\n        if (aufile != NULL && frameInfo.channels != aufile->channels)\n            frameInfo.error = 12;\n\n        if (frameInfo.error > 0)\n        {\n            faad_fprintf(stderr, \"Error: %s\\n\",\n                NeAACDecGetErrorMessage(frameInfo.error));\n        }\n\n        /* open the sound file now that the number of channels are known */\n        if (first_time && !frameInfo.error)\n        {\n            /* print some channel info */\n            print_channel_info(&frameInfo);\n\n            if (!adts_out)\n            {\n                /* open output file */\n                if (!to_stdout)\n                {\n                    aufile = open_audio_file(sndfile, frameInfo.samplerate, frameInfo.channels,\n                        outputFormat, fileType, aacChannelConfig2wavexChannelMask(&frameInfo));\n                } else {\n                    aufile = open_audio_file(\"-\", frameInfo.samplerate, frameInfo.channels,\n                        outputFormat, fileType, aacChannelConfig2wavexChannelMask(&frameInfo));\n                }\n                if (aufile == NULL)\n                {\n                    if (b.buffer)\n                        free(b.buffer);\n                    NeAACDecClose(hDecoder);\n                    if (b.infile != stdin)\n                        fclose(b.infile);\n                    return 0;\n                }\n            } else {\n                faad_fprintf(stderr, \"Writing output MPEG-4 AAC ADTS file.\\n\\n\");\n            }\n            first_time = 0;\n        }\n\n        percent = min((int)(b.file_offset*100)/fileread, 100);\n        if (percent > old_percent)\n        {\n            old_percent = percent;\n            snprintf(percents, MAX_PERCENTS, \"%d%% decoding %s.\", percent, aacfile);\n            faad_fprintf(stderr, \"%s\\r\", percents);\n#ifdef _WIN32\n            SetConsoleTitle(percents);\n#endif\n        }\n\n        if ((frameInfo.error == 0) && (frameInfo.samples > 0) && (!adts_out))\n        {\n            if (write_audio_file(aufile, sample_buffer, frameInfo.samples, 0) == 0)\n                break;\n        }\n\n        /* fill buffer */\n        fill_buffer(&b);\n\n        if (b.bytes_into_buffer == 0)\n            sample_buffer = NULL; /* to make sure it stops now */\n\n    } while (sample_buffer != NULL);\n\n    NeAACDecClose(hDecoder);\n\n    if (adts_out == 1)\n    {\n        fclose(adtsFile);\n    }\n\n    if (b.infile != stdin)\n        fclose(b.infile);\n\n    if (!first_time && !adts_out)\n        close_audio_file(aufile);\n\n    if (b.buffer)\n        free(b.buffer);\n\n    return frameInfo.error;\n}",
  "abstract_func": "static int decodeAACfile(char *VAR_0, char *VAR_1, char *VAR_2, int VAR_3,\n                  int VAR_4, int VAR_5, int VAR_6, int VAR_7,\n                  int VAR_8, int VAR_9, int VAR_10, int VAR_11,\n                  float *VAR_12)\n{\n    int VAR_13;\n    unsigned long VAR_14;\n    unsigned char VAR_15;\n    void *VAR_16;\n\n    audio_file *VAR_17 = NULL;\n\n    FILE *VAR_18 = NULL;\n    unsigned char *VAR_19;\n    int VAR_20;\n\n    NeAACDecHandle VAR_21;\n    NeAACDecFrameInfo VAR_22;\n    NeAACDecConfigurationPtr VAR_23;\n\n    char VAR_24[VAR_25];\n    int VAR_26, VAR_27 = -1;\n    int VAR_28, VAR_29;\n    int VAR_30 = 0;\n    int VAR_31 = 0;\n    float VAR_32 = 0;\n\n    int VAR_33 = 1;\n    int VAR_34;\n    int VAR_35 = 0;\n\n    aac_buffer VAR_36;\n\n    memset(&VAR_36, 0, sizeof(aac_buffer));\n\n    if (VAR_10)\n    {\n        VAR_18 = faad_fopen(VAR_2, \"wb\");\n        if (VAR_18 == NULL)\n        {\n            faad_fprintf(VAR_37, \"Error opening file: %s\\n\", VAR_2);\n            return 1;\n        }\n    }\n\n    if (0 == strcmp(VAR_0, \"-\"))\n    {\n        VAR_36.infile = VAR_38;\n#ifdef VAR_39\n        _setmode(_fileno(VAR_38), VAR_40);\n#endif\n\n    }\n    else\n    {\n        VAR_36.infile = faad_fopen(VAR_0, \"rb\");\n        if (VAR_36.infile == NULL)\n        {\n            /* COMMENT_0 */\n            faad_fprintf(VAR_37, \"Error opening file: %s\\n\", VAR_0);\n            return 1;\n        }\n    }\n\n    VAR_34 = fseek(VAR_36.infile, 0, VAR_41);\n#ifdef VAR_39\n    if (0 == strcmp(VAR_0, \"-\")) {\n        VAR_34 = -1;\n    }\n#endif\n    if (VAR_34 )\n    {\n        faad_fprintf(VAR_37, \"Input not seekable %s\\n\", VAR_0);\n        VAR_29 = -1;\n        VAR_35 = 1;\n    } else {\n        VAR_29 = ftell(VAR_36.infile);\n        fseek(VAR_36.infile, 0, VAR_42);\n    };\n\n    if (!(VAR_36.buffer = (unsigned char*)malloc(VAR_43*VAR_44)))\n    {\n        faad_fprintf(VAR_37, \"Memory allocation error\\n\");\n        return 0;\n    }\n    memset(VAR_36.buffer, 0, VAR_43*VAR_44);\n\n    VAR_28 = fread(VAR_36.buffer, 1, VAR_43*VAR_44, VAR_36.infile);\n    VAR_36.bytes_into_buffer = VAR_28;\n    VAR_36.bytes_consumed = 0;\n    VAR_36.file_offset = 0;\n\n    if (VAR_28 != VAR_43*VAR_44)\n        VAR_36.at_eof = 1;\n\n    VAR_13 = 0;\n    if (!memcmp(VAR_36.buffer, \"ID3\", 3))\n    {\n        /* COMMENT_1 */\n        VAR_13 = (VAR_36.buffer[6] << 21) | (VAR_36.buffer[7] << 14) |\n            (VAR_36.buffer[8] <<  7) | (VAR_36.buffer[9] <<  0);\n\n        VAR_13 += 10;\n        advance_buffer(&VAR_36, VAR_13);\n        fill_buffer(&VAR_36);\n    }\n\n    VAR_21 = NeAACDecOpen();\n\n    /* COMMENT_2 */\n    /* COMMENT_3 */\n    VAR_23 = NeAACDecGetCurrentConfiguration(VAR_21);\n    if (VAR_4)\n        VAR_23->defSampleRate = VAR_4;\n    VAR_23->defObjectType = VAR_5;\n    VAR_23->outputFormat = VAR_6;\n    VAR_23->downMatrix = VAR_8;\n    VAR_23->useOldADTSFormat = VAR_11;\n    /* COMMENT_4 */\n    NeAACDecSetConfiguration(VAR_21, VAR_23);\n\n    /* COMMENT_5 */\n    VAR_30 = 0;\n    if (VAR_35 == 1)\n        lookforheader(&VAR_36);\n\n    if ((VAR_36.buffer[0] == 0xFF) && ((VAR_36.buffer[1] & 0xF6) == 0xF0))\n    {\n        if (VAR_35 == 1)\n        {\n            int /* COMMENT_6 */ VAR_45;\n            int VAR_14;\n            float VAR_46, VAR_47;\n            VAR_15 = 2;\n            VAR_14 = VAR_48[(VAR_36.buffer[2]&0x3c)>>2];\n            VAR_45 = ((((unsigned int)VAR_36.buffer[3] & 0x3)) << 11)\n                | (((unsigned int)VAR_36.buffer[4]) << 3) | (VAR_36.buffer[5] >> 5);\n            VAR_46 = (float)VAR_14/1024.0f;\n            VAR_47 = (float)VAR_45/(float)(1000);\n            VAR_31 = (int)(8. * VAR_47 * VAR_46 + 0.5);\n            VAR_32 = 1;\n            faad_fprintf(VAR_37, \"Streamed input format  samplerate %d channels %d.\\n\", VAR_14, VAR_15);\n        } else {\n            adts_parse(&VAR_36, &VAR_31, &VAR_32);\n            fseek(VAR_36.infile, VAR_13, VAR_42);\n\n            VAR_28 = fread(VAR_36.buffer, 1, VAR_43*VAR_44, VAR_36.infile);\n            if (VAR_28 != VAR_43*VAR_44)\n                VAR_36.at_eof = 1;\n            else\n                VAR_36.at_eof = 0;\n            VAR_36.bytes_into_buffer = VAR_28;\n            VAR_36.bytes_consumed = 0;\n            VAR_36.file_offset = VAR_13;\n        }\n\n        VAR_30 = 1;\n    }\n    else if (memcmp(VAR_36.buffer, \"ADIF\", 4) == 0)\n    {\n        int VAR_49 = (VAR_36.buffer[4] & 0x80) ? 9 : 0;\n        VAR_31 = ((unsigned int)(VAR_36.buffer[4 + VAR_49] & 0x0F)<<19) |\n            ((unsigned int)VAR_36.buffer[5 + VAR_49]<<11) |\n            ((unsigned int)VAR_36.buffer[6 + VAR_49]<<3) |\n            ((unsigned int)VAR_36.buffer[7 + VAR_49] & 0xE0);\n\n        VAR_32 = (float)VAR_29;\n        if (VAR_32 != 0)\n        {\n            VAR_32 = ((float)VAR_32*8.f)/((float)VAR_31) + 0.5f;\n        }\n\n        VAR_31 = (int)((float)VAR_31/1000.0f + 0.5f);\n\n        VAR_30 = 2;\n    }\n\n    *VAR_12 = VAR_32;\n\n    fill_buffer(&VAR_36);\n    if ((VAR_28 = NeAACDecInit(VAR_21, VAR_36.buffer,\n        VAR_36.bytes_into_buffer, &VAR_14, &VAR_15)) < 0)\n    {\n        /* COMMENT_7 */\n        faad_fprintf(VAR_37, \"Error initializing decoder library.\\n\");\n        if (VAR_36.buffer)\n            free(VAR_36.buffer);\n        NeAACDecClose(VAR_21);\n        if (VAR_36.infile != VAR_38)\n            fclose(VAR_36.infile);\n        return 1;\n    }\n    advance_buffer(&VAR_36, VAR_28);\n    fill_buffer(&VAR_36);\n\n    /* COMMENT_8 */\n    faad_fprintf(VAR_37, \"%s file info:\\n\", VAR_0);\n    switch (VAR_30)\n    {\n    case 0:\n        faad_fprintf(VAR_37, \"RAW\\n\\n\");\n        break;\n    case 1:\n        faad_fprintf(VAR_37, \"ADTS, %.3f sec, %d kbps, %d Hz\\n\\n\",\n            VAR_32, VAR_31, VAR_14);\n        break;\n    case 2:\n        faad_fprintf(VAR_37, \"ADIF, %.3f sec, %d kbps, %d Hz\\n\\n\",\n            VAR_32, VAR_31, VAR_14);\n        break;\n    }\n\n    if (VAR_9)\n    {\n        NeAACDecClose(VAR_21);\n        if (VAR_36.infile != VAR_38)\n            fclose(VAR_36.infile);\n        if (VAR_36.buffer)\n            free(VAR_36.buffer);\n        return 0;\n    }\n\n    do\n    {\n        VAR_16 = NeAACDecDecode(VAR_21, &VAR_22,\n            VAR_36.buffer, VAR_36.bytes_into_buffer);\n\n        if (VAR_10 == 1)\n        {\n            int VAR_50 = (VAR_11) ? 8 : 7;\n            VAR_19 = MakeAdtsHeader(&VAR_20, &VAR_22, VAR_11);\n\n            /* COMMENT_9 */\n            fwrite(VAR_19, 1, VAR_20, VAR_18);\n\n            /* COMMENT_10 */\n            if (VAR_22.header_type == VAR_51)\n                fwrite(VAR_36.buffer + VAR_50, 1, VAR_22.bytesconsumed - VAR_50, VAR_18);\n            else\n                fwrite(VAR_36.buffer, 1, VAR_22.bytesconsumed, VAR_18);\n        }\n\n        /* COMMENT_11 */\n        advance_buffer(&VAR_36, VAR_22.bytesconsumed);\n\n        /* COMMENT_12 */\n        if (VAR_17 != NULL && VAR_22.channels != VAR_17->channels)\n            VAR_22.error = 12;\n\n        if (VAR_22.error > 0)\n        {\n            faad_fprintf(VAR_37, \"Error: %s\\n\",\n                NeAACDecGetErrorMessage(VAR_22.error));\n        }\n\n        /* COMMENT_13 */\n        if (VAR_33 && !VAR_22.error)\n        {\n            /* COMMENT_14 */\n            print_channel_info(&VAR_22);\n\n            if (!VAR_10)\n            {\n                /* COMMENT_15 */\n                if (!VAR_3)\n                {\n                    VAR_17 = open_audio_file(VAR_1, VAR_22.samplerate, VAR_22.channels,\n                        VAR_6, VAR_7, aacChannelConfig2wavexChannelMask(&VAR_22));\n                } else {\n                    VAR_17 = open_audio_file(\"-\", VAR_22.samplerate, VAR_22.channels,\n                        VAR_6, VAR_7, aacChannelConfig2wavexChannelMask(&VAR_22));\n                }\n                if (VAR_17 == NULL)\n                {\n                    if (VAR_36.buffer)\n                        free(VAR_36.buffer);\n                    NeAACDecClose(VAR_21);\n                    if (VAR_36.infile != VAR_38)\n                        fclose(VAR_36.infile);\n                    return 0;\n                }\n            } else {\n                faad_fprintf(VAR_37, \"Writing output MPEG-4 AAC ADTS file.\\n\\n\");\n            }\n            VAR_33 = 0;\n        }\n\n        VAR_26 = min((int)(VAR_36.file_offset*100)/VAR_29, 100);\n        if (VAR_26 > VAR_27)\n        {\n            VAR_27 = VAR_26;\n            snprintf(VAR_24, VAR_25, \"%d%% decoding %s.\", VAR_26, VAR_0);\n            faad_fprintf(VAR_37, \"%s\\r\", VAR_24);\n#ifdef VAR_39\n            SetConsoleTitle(VAR_24);\n#endif\n        }\n\n        if ((VAR_22.error == 0) && (VAR_22.samples > 0) && (!VAR_10))\n        {\n            if (write_audio_file(VAR_17, VAR_16, VAR_22.samples, 0) == 0)\n                break;\n        }\n\n        /* COMMENT_16 */\n        fill_buffer(&VAR_36);\n\n        if (VAR_36.bytes_into_buffer == 0)\n            VAR_16 = NULL; /* COMMENT_17 */\n\n    } while (VAR_16 != NULL);\n\n    NeAACDecClose(VAR_21);\n\n    if (VAR_10 == 1)\n    {\n        fclose(VAR_18);\n    }\n\n    if (VAR_36.infile != VAR_38)\n        fclose(VAR_36.infile);\n\n    if (!VAR_33 && !VAR_10)\n        close_audio_file(VAR_17);\n\n    if (VAR_36.buffer)\n        free(VAR_36.buffer);\n\n    return VAR_22.error;\n}",
  "func_graph_path": "knik0/faad2/4ed30d3d232b6a7a150cc06aed14eb47e4eda14e/main.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -242,6 +242,10 @@\n \n         /* update buffer indices */\n         advance_buffer(&b, frameInfo.bytesconsumed);\n+\n+        /* check if the inconsistent number of channels */\n+        if (aufile != NULL && frameInfo.channels != aufile->channels)\n+            frameInfo.error = 12;\n \n         if (frameInfo.error > 0)\n         {",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "",
      "        /* check if the inconsistent number of channels */",
      "        if (aufile != NULL && frameInfo.channels != aufile->channels)",
      "            frameInfo.error = 12;"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/knik0/faad2/pull/66",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/knik0/faad2/pull/66: 403 Client Error: Forbidden for url: https://api.github.com/repos/knik0/faad2/pulls/66",
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.93,
  "Bug Filter Response": "**Final Classification:** Defect Remediation & Feature Upgrades; **Confidence:** 0.93"
}