{
  "cve_id": "CVE-2017-7545",
  "cwe_ids": [
    "CWE-611"
  ],
  "cvss_vector": "AV:N/AC:L/Au:S/C:P/I:N/A:N",
  "cvss_is_v3": false,
  "repo_name": "kiegroup/jbpm-designer",
  "commit_msg": "JBPM-6415 - Remove jPDL migration plugin and its use from jbpm-designer (#658) (#673)",
  "commit_hash": "a143f3b92a6a5a527d929d68c02a0c5d914ab81d",
  "git_url": "https://github.com/kiegroup/jbpm-designer/commit/a143f3b92a6a5a527d929d68c02a0c5d914ab81d",
  "file_path": "jbpm-designer-backend/src/main/java/org/jbpm/designer/web/server/TransformerServlet.java",
  "func_name": "doPost",
  "func_before": "@Override\n    protected void doPost(HttpServletRequest req, HttpServletResponse resp)\n            throws ServletException, IOException {\n        req.setCharacterEncoding(\"UTF-8\");\n        String formattedSvgEncoded = req.getParameter(\"fsvg\");\n        String uuid = Utils.getUUID(req);\n        String profileName = Utils.getDefaultProfileName(req.getParameter(\"profile\"));\n        String transformto = req.getParameter(\"transformto\");\n        String jpdl = req.getParameter(\"jpdl\");\n        String gpd = req.getParameter(\"gpd\");\n        String bpmn2in = req.getParameter(\"bpmn2\");\n        String jsonin = req.getParameter(\"json\");\n        String preprocessingData = req.getParameter(\"pp\");\n        String respaction = req.getParameter(\"respaction\");\n        String pp = req.getParameter(\"pp\");\n        String processid = req.getParameter(\"processid\");\n        String sourceEnc = req.getParameter(\"enc\");\n        String convertServiceTasks = req.getParameter(\"convertservicetasks\");\n        String htmlSourceEnc = req.getParameter(\"htmlenc\");\n\n        String formattedSvg = ( formattedSvgEncoded == null ? \"\" : new String(Base64.decodeBase64(formattedSvgEncoded), \"UTF-8\") );\n\n        String htmlSource = ( htmlSourceEnc == null ? \"\" : new String(Base64.decodeBase64(htmlSourceEnc), \"UTF-8\") );\n\n        if(sourceEnc != null && sourceEnc.equals(\"true\")) {\n            bpmn2in = new String(Base64.decodeBase64(bpmn2in), \"UTF-8\");\n        }\n\n        if (profile == null) {\n            profile = _profileService.findProfile(req, profileName);\n        }\n\n        DroolsFactoryImpl.init();\n        BpsimFactoryImpl.init();\n\n        Repository repository = profile.getRepository();\n\n        if (transformto != null && transformto.equals(TO_PDF)) {\n            if(respaction != null && respaction.equals(RESPACTION_SHOWURL)) {\n\n                try {\n                    ByteArrayOutputStream pdfBout = new ByteArrayOutputStream();\n                    Document pdfDoc = new Document(PageSize.A4);\n                    PdfWriter pdfWriter = PdfWriter.getInstance(pdfDoc, pdfBout);\n                    pdfDoc.open();\n                    pdfDoc.addCreationDate();\n\n                    PNGTranscoder t = new PNGTranscoder();\n                    t.addTranscodingHint(ImageTranscoder.KEY_MEDIA, \"screen\");\n\n                    float widthHint = getFloatParam(req, SVG_WIDTH_PARAM, DEFAULT_PDF_WIDTH);\n                    float heightHint = getFloatParam(req, SVG_HEIGHT_PARAM, DEFAULT_PDF_HEIGHT);\n                    String objStyle = \"style=\\\"width:\" + widthHint + \"px;height:\" + heightHint + \"px;\\\"\";\n                    t.addTranscodingHint(SVGAbstractTranscoder.KEY_WIDTH, widthHint);\n                    t.addTranscodingHint(SVGAbstractTranscoder.KEY_HEIGHT, heightHint);\n\n\n                    ByteArrayOutputStream imageBout = new ByteArrayOutputStream();\n                    TranscoderInput input = new TranscoderInput(new StringReader(\n                            formattedSvg));\n                    TranscoderOutput output = new TranscoderOutput(imageBout);\n                    t.transcode(input, output);\n\n                    Image processImage = Image.getInstance(imageBout.toByteArray());\n                    scalePDFImage(pdfDoc, processImage);\n                    pdfDoc.add(processImage);\n\n                    pdfDoc.close();\n\n                    resp.setCharacterEncoding(\"UTF-8\");\n                    resp.setContentType(\"text/plain\");\n\n                    resp.getWriter().write(\"<object type=\\\"application/pdf\\\" \" + objStyle + \" data=\\\"data:application/pdf;base64,\" + Base64.encodeBase64String(pdfBout.toByteArray()) + \"\\\"></object>\");\n                } catch(Exception e) {\n                    resp.sendError(500, e.getMessage());\n                }\n            } else {\n                storeInRepository(uuid, formattedSvg, transformto, processid, repository);\n\n                try {\n                    resp.setCharacterEncoding(\"UTF-8\");\n                    resp.setContentType(\"application/pdf\");\n                    if (processid != null) {\n                        resp.setHeader(\"Content-Disposition\",\n                                \"attachment; filename=\\\"\" + processid + \".pdf\\\"\");\n                    } else {\n                        resp.setHeader(\"Content-Disposition\",\n                                \"attachment; filename=\\\"\" + uuid + \".pdf\\\"\");\n                    }\n\n                    ByteArrayOutputStream bout = new ByteArrayOutputStream();\n                    Document pdfDoc = new Document(PageSize.A4);\n                    PdfWriter pdfWriter = PdfWriter.getInstance(pdfDoc, resp.getOutputStream());\n                    pdfDoc.open();\n                    pdfDoc.addCreationDate();\n\n                    PNGTranscoder t = new PNGTranscoder();\n                    t.addTranscodingHint(ImageTranscoder.KEY_MEDIA, \"screen\");\n                    TranscoderInput input = new TranscoderInput(new StringReader(\n                            formattedSvg));\n                    TranscoderOutput output = new TranscoderOutput(bout);\n                    t.transcode(input, output);\n\n                    Image processImage = Image.getInstance(bout.toByteArray());\n                    scalePDFImage(pdfDoc, processImage);\n                    pdfDoc.add(processImage);\n\n                    pdfDoc.close();\n                } catch(Exception e) {\n                    resp.sendError(500, e.getMessage());\n                }\n            }\n        } else if (transformto != null && transformto.equals(TO_PNG)) {\n            try {\n                if(respaction != null && respaction.equals(RESPACTION_SHOWURL)) {\n                    ByteArrayOutputStream bout = new ByteArrayOutputStream();\n                    PNGTranscoder t = new PNGTranscoder();\n                    t.addTranscodingHint(ImageTranscoder.KEY_MEDIA, \"screen\");\n                    TranscoderInput input = new TranscoderInput(new StringReader(formattedSvg));\n                    TranscoderOutput output = new TranscoderOutput(bout);\n                    t.transcode(input, output);\n                    resp.setCharacterEncoding(\"UTF-8\");\n                    resp.setContentType(\"text/plain\");\n                    if(req.getParameter(SVG_WIDTH_PARAM) != null && req.getParameter(SVG_HEIGHT_PARAM) != null) {\n                        int widthHint = (int) getFloatParam(req, SVG_WIDTH_PARAM, DEFAULT_PDF_WIDTH);\n                        int heightHint = (int) getFloatParam(req, SVG_HEIGHT_PARAM, DEFAULT_PDF_HEIGHT);\n                        resp.getWriter().write(\"<img width=\\\"\" + widthHint + \"\\\" height=\\\"\" + heightHint + \"\\\" src=\\\"data:image/png;base64,\" + Base64.encodeBase64String(bout.toByteArray()) + \"\\\">\");\n                    } else {\n                        resp.getWriter().write(\"<img src=\\\"data:image/png;base64,\" + Base64.encodeBase64String(bout.toByteArray()) + \"\\\">\");\n                    }\n                } else {\n                    storeInRepository(uuid, formattedSvg, transformto, processid, repository);\n                    resp.setContentType(\"image/png\");\n                    if (processid != null) {\n                        resp.setHeader(\"Content-Disposition\", \"attachment; filename=\\\"\" + processid + \".png\\\"\");\n                    } else {\n                        resp.setHeader(\"Content-Disposition\", \"attachment; filename=\\\"\" + uuid + \".png\\\"\");\n                    }\n\n                    PNGTranscoder t = new PNGTranscoder();\n                    t.addTranscodingHint(ImageTranscoder.KEY_MEDIA, \"screen\");\n                    TranscoderInput input = new TranscoderInput(new StringReader(\n                            formattedSvg));\n                    TranscoderOutput output = new TranscoderOutput(\n                            resp.getOutputStream());\n                    t.transcode(input, output);\n                }\n            } catch (TranscoderException e) {\n                resp.sendError(500, e.getMessage());\n            }\n        } else if (transformto != null && transformto.equals(TO_SVG)) {\n            storeInRepository(uuid, formattedSvg, transformto, processid, repository);\n        } else if (transformto != null && transformto.equals(JPDL_TO_BPMN2)) {\n            try {\n                String bpmn2 = JbpmMigration.transform(jpdl);\n                Definitions def = ((JbpmProfileImpl) profile).getDefinitions(bpmn2);\n                // add bpmndi info to Definitions with help of gpd\n                addBpmnDiInfo(def, gpd);\n                // hack for now\n                revisitSequenceFlows(def, bpmn2);\n                // another hack if id == name\n                revisitNodeNames(def);\n\n                // get the xml from Definitions\n                ResourceSet rSet = new ResourceSetImpl();\n                rSet.getResourceFactoryRegistry().getExtensionToFactoryMap().put(\"bpmn2\", new JBPMBpmn2ResourceFactoryImpl());\n                JBPMBpmn2ResourceImpl bpmn2resource = (JBPMBpmn2ResourceImpl) rSet.createResource(URI.createURI(\"virtual.bpmn2\"));\n                rSet.getResources().add(bpmn2resource);\n                bpmn2resource.getContents().add(def);\n                ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n                bpmn2resource.save(outputStream, new HashMap<Object, Object>());\n                String fullXmlModel =  outputStream.toString();\n                // convert to json and write response\n                String json = profile.createUnmarshaller().parseModel(fullXmlModel, profile, pp);\n                resp.setCharacterEncoding(\"UTF-8\");\n                resp.setContentType(\"application/json\");\n                resp.getWriter().print(json);\n            } catch(Exception e) {\n                _logger.error(e.getMessage());\n                resp.setContentType(\"application/json\");\n                resp.getWriter().print(\"{}\");\n            }\n        }  else if (transformto != null && transformto.equals(BPMN2_TO_JSON)) {\n            try {\n                if(convertServiceTasks != null && convertServiceTasks.equals(\"true\")) {\n                    bpmn2in = bpmn2in.replaceAll(\"drools:taskName=\\\".*?\\\"\", \"drools:taskName=\\\"ReadOnlyService\\\"\");\n                    bpmn2in = bpmn2in.replaceAll(\"tns:taskName=\\\".*?\\\"\", \"tns:taskName=\\\"ReadOnlyService\\\"\");\n                }\n\n                Definitions def = ((JbpmProfileImpl) profile).getDefinitions(bpmn2in);\n                def.setTargetNamespace(\"http://www.omg.org/bpmn20\");\n\n                if(convertServiceTasks != null && convertServiceTasks.equals(\"true\")) {\n                    // fix the data input associations for converted tasks\n                    List<RootElement> rootElements =  def.getRootElements();\n                    for(RootElement root : rootElements) {\n                        if(root instanceof Process) {\n                            updateTaskDataInputs((Process) root, def);\n                        }\n                    }\n                }\n\n                // get the xml from Definitions\n                ResourceSet rSet = new ResourceSetImpl();\n                rSet.getResourceFactoryRegistry().getExtensionToFactoryMap().put(\"bpmn2\", new JBPMBpmn2ResourceFactoryImpl());\n                JBPMBpmn2ResourceImpl bpmn2resource = (JBPMBpmn2ResourceImpl) rSet.createResource(URI.createURI(\"virtual.bpmn2\"));\n                bpmn2resource.getDefaultLoadOptions().put(JBPMBpmn2ResourceImpl.OPTION_ENCODING, \"UTF-8\");\n                bpmn2resource.getDefaultLoadOptions().put(JBPMBpmn2ResourceImpl.OPTION_DEFER_IDREF_RESOLUTION, true);\n                bpmn2resource.getDefaultLoadOptions().put( JBPMBpmn2ResourceImpl.OPTION_DISABLE_NOTIFY, true );\n                bpmn2resource.getDefaultLoadOptions().put(JBPMBpmn2ResourceImpl.OPTION_PROCESS_DANGLING_HREF, JBPMBpmn2ResourceImpl.OPTION_PROCESS_DANGLING_HREF_RECORD);\n                bpmn2resource.setEncoding(\"UTF-8\");\n                rSet.getResources().add(bpmn2resource);\n                bpmn2resource.getContents().add(def);\n                ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n                bpmn2resource.save(outputStream, new HashMap<Object, Object>());\n                String revisedXmlModel =  outputStream.toString();\n                String json = profile.createUnmarshaller().parseModel(revisedXmlModel, profile, pp);\n                resp.setCharacterEncoding(\"UTF-8\");\n                resp.setContentType(\"application/json\");\n                resp.getWriter().print(json);\n            } catch(Exception e) {\n                e.printStackTrace();\n                _logger.error(e.getMessage());\n                resp.setContentType(\"application/json\");\n                resp.getWriter().print(\"{}\");\n            }\n        } else if (transformto != null && transformto.equals(JSON_TO_BPMN2)) {\n            try {\n                DroolsFactoryImpl.init();\n                BpsimFactoryImpl.init();\n                if(preprocessingData == null) {\n                    preprocessingData = \"\";\n                }\n                String processXML = profile.createMarshaller().parseModel(jsonin, preprocessingData);\n                resp.setContentType(\"application/xml\");\n                resp.getWriter().print(processXML);\n            } catch(Exception e) {\n                e.printStackTrace();\n                _logger.error(e.getMessage());\n                resp.setContentType(\"application/xml\");\n                resp.getWriter().print(\"\");\n            }\n\n        } else if (transformto != null && transformto.equals(HTML_TO_PDF)) {\n            try {\n                resp.setContentType(\"application/pdf\");\n                if (processid != null) {\n                    resp.setHeader(\"Content-Disposition\",\n                            \"attachment; filename=\\\"\" + processid + \".pdf\\\"\");\n                } else {\n                    resp.setHeader(\"Content-Disposition\",\n                            \"attachment; filename=\\\"\" + uuid + \".pdf\\\"\");\n                }\n\n                Document pdfDoc = new Document(PageSize.A4);\n                PdfWriter pdfWriter = PdfWriter.getInstance(pdfDoc, resp.getOutputStream());\n                pdfDoc.open();\n                pdfDoc.addCreator(\"jBPM Designer\");\n                pdfDoc.addSubject(\"Business Process Documentation\");\n                pdfDoc.addCreationDate();\n                pdfDoc.addTitle(\"Process Documentation\");\n\n                HTMLWorker htmlWorker = new HTMLWorker(pdfDoc);\n                htmlWorker.parse(new StringReader(htmlSource));\n                pdfDoc.close();\n            } catch(DocumentException e) {\n                resp.sendError(500, e.getMessage());\n            }\n        }\n    }",
  "abstract_func_before": "@Override\n    protected void doPost(HttpServletRequest VAR_0, HttpServletResponse VAR_1)\n            throws ServletException, IOException {\n        VAR_0.setCharacterEncoding(\"UTF-8\");\n        String VAR_2 = VAR_0.getParameter(\"fsvg\");\n        String VAR_3 = VAR_4.getUUID(VAR_0);\n        String VAR_5 = VAR_4.getDefaultProfileName(VAR_0.getParameter(\"profile\"));\n        String VAR_6 = VAR_0.getParameter(\"transformto\");\n        String VAR_7 = VAR_0.getParameter(\"jpdl\");\n        String VAR_8 = VAR_0.getParameter(\"gpd\");\n        String VAR_9 = VAR_0.getParameter(\"bpmn2\");\n        String VAR_10 = VAR_0.getParameter(\"json\");\n        String VAR_11 = VAR_0.getParameter(\"pp\");\n        String VAR_12 = VAR_0.getParameter(\"respaction\");\n        String VAR_13 = VAR_0.getParameter(\"pp\");\n        String VAR_14 = VAR_0.getParameter(\"processid\");\n        String VAR_15 = VAR_0.getParameter(\"enc\");\n        String VAR_16 = VAR_0.getParameter(\"convertservicetasks\");\n        String VAR_17 = VAR_0.getParameter(\"htmlenc\");\n\n        String VAR_18 = ( VAR_2 == null ? \"\" : new String(VAR_19.decodeBase64(VAR_2), \"UTF-8\") );\n\n        String VAR_20 = ( VAR_17 == null ? \"\" : new String(VAR_19.decodeBase64(VAR_17), \"UTF-8\") );\n\n        if(VAR_15 != null && VAR_15.equals(\"true\")) {\n            VAR_9 = new String(VAR_19.decodeBase64(VAR_9), \"UTF-8\");\n        }\n\n        if (VAR_21 == null) {\n            VAR_21 = VAR_22.findProfile(VAR_0, VAR_5);\n        }\n\n        VAR_23.init();\n        VAR_24.init();\n\n        Repository VAR_25 = VAR_21.getRepository();\n\n        if (VAR_6 != null && VAR_6.equals(VAR_26)) {\n            if(VAR_12 != null && VAR_12.equals(VAR_27)) {\n\n                try {\n                    ByteArrayOutputStream VAR_28 = new ByteArrayOutputStream();\n                    Document VAR_29 = new Document(VAR_30.A4);\n                    PdfWriter VAR_31 = VAR_32.getInstance(VAR_29, VAR_28);\n                    VAR_29.open();\n                    VAR_29.addCreationDate();\n\n                    PNGTranscoder VAR_33 = new PNGTranscoder();\n                    VAR_33.addTranscodingHint(VAR_34.KEY_MEDIA, \"screen\");\n\n                    float VAR_35 = getFloatParam(VAR_0, VAR_36, VAR_37);\n                    float VAR_38 = getFloatParam(VAR_0, VAR_39, VAR_40);\n                    String VAR_41 = \"style=\\\"width:\" + VAR_35 + \"px;height:\" + VAR_38 + \"px;\\\"\";\n                    VAR_33.addTranscodingHint(VAR_42.KEY_WIDTH, VAR_35);\n                    VAR_33.addTranscodingHint(VAR_42.KEY_HEIGHT, VAR_38);\n\n\n                    ByteArrayOutputStream VAR_43 = new ByteArrayOutputStream();\n                    TranscoderInput VAR_44 = new TranscoderInput(new StringReader(\n                            VAR_18));\n                    TranscoderOutput VAR_45 = new TranscoderOutput(VAR_43);\n                    VAR_33.transcode(VAR_44, VAR_45);\n\n                    Image VAR_46 = VAR_47.getInstance(VAR_43.toByteArray());\n                    scalePDFImage(VAR_29, VAR_46);\n                    VAR_29.add(VAR_46);\n\n                    VAR_29.close();\n\n                    VAR_1.setCharacterEncoding(\"UTF-8\");\n                    VAR_1.setContentType(\"text/plain\");\n\n                    VAR_1.getWriter().write(\"<object type=\\\"application/pdf\\\" \" + VAR_41 + \" data=\\\"data:application/pdf;base64,\" + VAR_19.encodeBase64String(VAR_28.toByteArray()) + \"\\\"></object>\");\n                } catch(Exception VAR_48) {\n                    VAR_1.sendError(500, VAR_48.getMessage());\n                }\n            } else {\n                storeInRepository(VAR_3, VAR_18, VAR_6, VAR_14, VAR_25);\n\n                try {\n                    VAR_1.setCharacterEncoding(\"UTF-8\");\n                    VAR_1.setContentType(\"application/pdf\");\n                    if (VAR_14 != null) {\n                        VAR_1.setHeader(\"Content-Disposition\",\n                                \"attachment; filename=\\\"\" + VAR_14 + \".pdf\\\"\");\n                    } else {\n                        VAR_1.setHeader(\"Content-Disposition\",\n                                \"attachment; filename=\\\"\" + VAR_3 + \".pdf\\\"\");\n                    }\n\n                    ByteArrayOutputStream VAR_49 = new ByteArrayOutputStream();\n                    Document VAR_29 = new Document(VAR_30.A4);\n                    PdfWriter VAR_31 = VAR_32.getInstance(VAR_29, VAR_1.getOutputStream());\n                    VAR_29.open();\n                    VAR_29.addCreationDate();\n\n                    PNGTranscoder VAR_33 = new PNGTranscoder();\n                    VAR_33.addTranscodingHint(VAR_34.KEY_MEDIA, \"screen\");\n                    TranscoderInput VAR_44 = new TranscoderInput(new StringReader(\n                            VAR_18));\n                    TranscoderOutput VAR_45 = new TranscoderOutput(VAR_49);\n                    VAR_33.transcode(VAR_44, VAR_45);\n\n                    Image VAR_46 = VAR_47.getInstance(VAR_49.toByteArray());\n                    scalePDFImage(VAR_29, VAR_46);\n                    VAR_29.add(VAR_46);\n\n                    VAR_29.close();\n                } catch(Exception VAR_48) {\n                    VAR_1.sendError(500, VAR_48.getMessage());\n                }\n            }\n        } else if (VAR_6 != null && VAR_6.equals(VAR_50)) {\n            try {\n                if(VAR_12 != null && VAR_12.equals(VAR_27)) {\n                    ByteArrayOutputStream VAR_49 = new ByteArrayOutputStream();\n                    PNGTranscoder VAR_33 = new PNGTranscoder();\n                    VAR_33.addTranscodingHint(VAR_34.KEY_MEDIA, \"screen\");\n                    TranscoderInput VAR_44 = new TranscoderInput(new StringReader(VAR_18));\n                    TranscoderOutput VAR_45 = new TranscoderOutput(VAR_49);\n                    VAR_33.transcode(VAR_44, VAR_45);\n                    VAR_1.setCharacterEncoding(\"UTF-8\");\n                    VAR_1.setContentType(\"text/plain\");\n                    if(VAR_0.getParameter(VAR_36) != null && VAR_0.getParameter(VAR_39) != null) {\n                        int VAR_35 = (int) getFloatParam(VAR_0, VAR_36, VAR_37);\n                        int VAR_38 = (int) getFloatParam(VAR_0, VAR_39, VAR_40);\n                        VAR_1.getWriter().write(\"<img width=\\\"\" + VAR_35 + \"\\\" height=\\\"\" + VAR_38 + \"\\\" src=\\\"data:image/png;base64,\" + VAR_19.encodeBase64String(VAR_49.toByteArray()) + \"\\\">\");\n                    } else {\n                        VAR_1.getWriter().write(\"<img src=\\\"data:image/png;base64,\" + VAR_19.encodeBase64String(VAR_49.toByteArray()) + \"\\\">\");\n                    }\n                } else {\n                    storeInRepository(VAR_3, VAR_18, VAR_6, VAR_14, VAR_25);\n                    VAR_1.setContentType(\"image/png\");\n                    if (VAR_14 != null) {\n                        VAR_1.setHeader(\"Content-Disposition\", \"attachment; filename=\\\"\" + VAR_14 + \".png\\\"\");\n                    } else {\n                        VAR_1.setHeader(\"Content-Disposition\", \"attachment; filename=\\\"\" + VAR_3 + \".png\\\"\");\n                    }\n\n                    PNGTranscoder VAR_33 = new PNGTranscoder();\n                    VAR_33.addTranscodingHint(VAR_34.KEY_MEDIA, \"screen\");\n                    TranscoderInput VAR_44 = new TranscoderInput(new StringReader(\n                            VAR_18));\n                    TranscoderOutput VAR_45 = new TranscoderOutput(\n                            VAR_1.getOutputStream());\n                    VAR_33.transcode(VAR_44, VAR_45);\n                }\n            } catch (TranscoderException VAR_48) {\n                VAR_1.sendError(500, VAR_48.getMessage());\n            }\n        } else if (VAR_6 != null && VAR_6.equals(VAR_51)) {\n            storeInRepository(VAR_3, VAR_18, VAR_6, VAR_14, VAR_25);\n        } else if (VAR_6 != null && VAR_6.equals(VAR_52)) {\n            try {\n                String VAR_53 = VAR_54.transform(VAR_7);\n                Definitions VAR_55 = ((JbpmProfileImpl) VAR_21).getDefinitions(VAR_53);\n                /* COMMENT_0 */\n                addBpmnDiInfo(VAR_55, VAR_8);\n                /* COMMENT_1 */\n                revisitSequenceFlows(VAR_55, VAR_53);\n                /* COMMENT_2 */\n                revisitNodeNames(VAR_55);\n\n                /* COMMENT_3 */\n                ResourceSet VAR_56 = new ResourceSetImpl();\n                VAR_56.getResourceFactoryRegistry().getExtensionToFactoryMap().put(\"bpmn2\", new JBPMBpmn2ResourceFactoryImpl());\n                JBPMBpmn2ResourceImpl VAR_57 = (JBPMBpmn2ResourceImpl) VAR_56.createResource(VAR_58.createURI(\"virtual.bpmn2\"));\n                VAR_56.getResources().add(VAR_57);\n                VAR_57.getContents().add(VAR_55);\n                ByteArrayOutputStream VAR_59 = new ByteArrayOutputStream();\n                VAR_57.save(VAR_59, new HashMap<Object, Object>());\n                String VAR_60 =  VAR_59.toString();\n                /* COMMENT_4 */\n                String VAR_61 = VAR_21.createUnmarshaller().parseModel(VAR_60, VAR_21, VAR_13);\n                VAR_1.setCharacterEncoding(\"UTF-8\");\n                VAR_1.setContentType(\"application/json\");\n                VAR_1.getWriter().print(VAR_61);\n            } catch(Exception VAR_48) {\n                VAR_62.error(VAR_48.getMessage());\n                VAR_1.setContentType(\"application/json\");\n                VAR_1.getWriter().print(\"{}\");\n            }\n        }  else if (VAR_6 != null && VAR_6.equals(VAR_63)) {\n            try {\n                if(VAR_16 != null && VAR_16.equals(\"true\")) {\n                    VAR_9 = VAR_9.replaceAll(\"drools:taskName=\\\".*?\\\"\", \"drools:taskName=\\\"ReadOnlyService\\\"\");\n                    VAR_9 = VAR_9.replaceAll(\"tns:taskName=\\\".*?\\\"\", \"tns:taskName=\\\"ReadOnlyService\\\"\");\n                }\n\n                Definitions VAR_55 = ((JbpmProfileImpl) VAR_21).getDefinitions(VAR_9);\n                VAR_55.setTargetNamespace(\"http://www.omg.org/bpmn20\");\n\n                if(VAR_16 != null && VAR_16.equals(\"true\")) {\n                    /* COMMENT_5 */\n                    List<RootElement> VAR_64 =  VAR_55.getRootElements();\n                    for(RootElement VAR_65 : VAR_64) {\n                        if(VAR_65 instanceof Process) {\n                            updateTaskDataInputs((Process) VAR_65, VAR_55);\n                        }\n                    }\n                }\n\n                /* COMMENT_3 */\n                ResourceSet VAR_56 = new ResourceSetImpl();\n                VAR_56.getResourceFactoryRegistry().getExtensionToFactoryMap().put(\"bpmn2\", new JBPMBpmn2ResourceFactoryImpl());\n                JBPMBpmn2ResourceImpl VAR_57 = (JBPMBpmn2ResourceImpl) VAR_56.createResource(VAR_58.createURI(\"virtual.bpmn2\"));\n                VAR_57.getDefaultLoadOptions().put(VAR_66.OPTION_ENCODING, \"UTF-8\");\n                VAR_57.getDefaultLoadOptions().put(VAR_66.OPTION_DEFER_IDREF_RESOLUTION, true);\n                VAR_57.getDefaultLoadOptions().put( VAR_66.OPTION_DISABLE_NOTIFY, true );\n                VAR_57.getDefaultLoadOptions().put(VAR_66.OPTION_PROCESS_DANGLING_HREF, VAR_66.OPTION_PROCESS_DANGLING_HREF_RECORD);\n                VAR_57.setEncoding(\"UTF-8\");\n                VAR_56.getResources().add(VAR_57);\n                VAR_57.getContents().add(VAR_55);\n                ByteArrayOutputStream VAR_59 = new ByteArrayOutputStream();\n                VAR_57.save(VAR_59, new HashMap<Object, Object>());\n                String VAR_67 =  VAR_59.toString();\n                String VAR_61 = VAR_21.createUnmarshaller().parseModel(VAR_67, VAR_21, VAR_13);\n                VAR_1.setCharacterEncoding(\"UTF-8\");\n                VAR_1.setContentType(\"application/json\");\n                VAR_1.getWriter().print(VAR_61);\n            } catch(Exception VAR_48) {\n                VAR_48.printStackTrace();\n                VAR_62.error(VAR_48.getMessage());\n                VAR_1.setContentType(\"application/json\");\n                VAR_1.getWriter().print(\"{}\");\n            }\n        } else if (VAR_6 != null && VAR_6.equals(VAR_68)) {\n            try {\n                VAR_23.init();\n                VAR_24.init();\n                if(VAR_11 == null) {\n                    VAR_11 = \"\";\n                }\n                String VAR_69 = VAR_21.createMarshaller().parseModel(VAR_10, VAR_11);\n                VAR_1.setContentType(\"application/xml\");\n                VAR_1.getWriter().print(VAR_69);\n            } catch(Exception VAR_48) {\n                VAR_48.printStackTrace();\n                VAR_62.error(VAR_48.getMessage());\n                VAR_1.setContentType(\"application/xml\");\n                VAR_1.getWriter().print(\"\");\n            }\n\n        } else if (VAR_6 != null && VAR_6.equals(VAR_70)) {\n            try {\n                VAR_1.setContentType(\"application/pdf\");\n                if (VAR_14 != null) {\n                    VAR_1.setHeader(\"Content-Disposition\",\n                            \"attachment; filename=\\\"\" + VAR_14 + \".pdf\\\"\");\n                } else {\n                    VAR_1.setHeader(\"Content-Disposition\",\n                            \"attachment; filename=\\\"\" + VAR_3 + \".pdf\\\"\");\n                }\n\n                Document VAR_29 = new Document(VAR_30.A4);\n                PdfWriter VAR_31 = VAR_32.getInstance(VAR_29, VAR_1.getOutputStream());\n                VAR_29.open();\n                VAR_29.addCreator(\"jBPM Designer\");\n                VAR_29.addSubject(\"Business Process Documentation\");\n                VAR_29.addCreationDate();\n                VAR_29.addTitle(\"Process Documentation\");\n\n                HTMLWorker VAR_71 = new HTMLWorker(VAR_29);\n                VAR_71.parse(new StringReader(VAR_20));\n                VAR_29.close();\n            } catch(DocumentException VAR_48) {\n                VAR_1.sendError(500, VAR_48.getMessage());\n            }\n        }\n    }",
  "func_graph_path_before": "kiegroup/jbpm-designer/a143f3b92a6a5a527d929d68c02a0c5d914ab81d/TransformerServlet.java/vul/before/0.json",
  "func": "@Override\n    protected void doPost(HttpServletRequest req, HttpServletResponse resp)\n            throws ServletException, IOException {\n        req.setCharacterEncoding(\"UTF-8\");\n        String formattedSvgEncoded = req.getParameter(\"fsvg\");\n        String uuid = Utils.getUUID(req);\n        String profileName = Utils.getDefaultProfileName(req.getParameter(\"profile\"));\n        String transformto = req.getParameter(\"transformto\");\n        String jpdl = req.getParameter(\"jpdl\");\n        String gpd = req.getParameter(\"gpd\");\n        String bpmn2in = req.getParameter(\"bpmn2\");\n        String jsonin = req.getParameter(\"json\");\n        String preprocessingData = req.getParameter(\"pp\");\n        String respaction = req.getParameter(\"respaction\");\n        String pp = req.getParameter(\"pp\");\n        String processid = req.getParameter(\"processid\");\n        String sourceEnc = req.getParameter(\"enc\");\n        String convertServiceTasks = req.getParameter(\"convertservicetasks\");\n        String htmlSourceEnc = req.getParameter(\"htmlenc\");\n\n        String formattedSvg = ( formattedSvgEncoded == null ? \"\" : new String(Base64.decodeBase64(formattedSvgEncoded), \"UTF-8\") );\n\n        String htmlSource = ( htmlSourceEnc == null ? \"\" : new String(Base64.decodeBase64(htmlSourceEnc), \"UTF-8\") );\n\n        if(sourceEnc != null && sourceEnc.equals(\"true\")) {\n            bpmn2in = new String(Base64.decodeBase64(bpmn2in), \"UTF-8\");\n        }\n\n        if (profile == null) {\n            profile = _profileService.findProfile(req, profileName);\n        }\n\n        DroolsFactoryImpl.init();\n        BpsimFactoryImpl.init();\n\n        Repository repository = profile.getRepository();\n\n        if (transformto != null && transformto.equals(TO_PDF)) {\n            if(respaction != null && respaction.equals(RESPACTION_SHOWURL)) {\n\n                try {\n                    ByteArrayOutputStream pdfBout = new ByteArrayOutputStream();\n                    Document pdfDoc = new Document(PageSize.A4);\n                    PdfWriter pdfWriter = PdfWriter.getInstance(pdfDoc, pdfBout);\n                    pdfDoc.open();\n                    pdfDoc.addCreationDate();\n\n                    PNGTranscoder t = new PNGTranscoder();\n                    t.addTranscodingHint(ImageTranscoder.KEY_MEDIA, \"screen\");\n\n                    float widthHint = getFloatParam(req, SVG_WIDTH_PARAM, DEFAULT_PDF_WIDTH);\n                    float heightHint = getFloatParam(req, SVG_HEIGHT_PARAM, DEFAULT_PDF_HEIGHT);\n                    String objStyle = \"style=\\\"width:\" + widthHint + \"px;height:\" + heightHint + \"px;\\\"\";\n                    t.addTranscodingHint(SVGAbstractTranscoder.KEY_WIDTH, widthHint);\n                    t.addTranscodingHint(SVGAbstractTranscoder.KEY_HEIGHT, heightHint);\n\n\n                    ByteArrayOutputStream imageBout = new ByteArrayOutputStream();\n                    TranscoderInput input = new TranscoderInput(new StringReader(\n                            formattedSvg));\n                    TranscoderOutput output = new TranscoderOutput(imageBout);\n                    t.transcode(input, output);\n\n                    Image processImage = Image.getInstance(imageBout.toByteArray());\n                    scalePDFImage(pdfDoc, processImage);\n                    pdfDoc.add(processImage);\n\n                    pdfDoc.close();\n\n                    resp.setCharacterEncoding(\"UTF-8\");\n                    resp.setContentType(\"text/plain\");\n\n                    resp.getWriter().write(\"<object type=\\\"application/pdf\\\" \" + objStyle + \" data=\\\"data:application/pdf;base64,\" + Base64.encodeBase64String(pdfBout.toByteArray()) + \"\\\"></object>\");\n                } catch(Exception e) {\n                    resp.sendError(500, e.getMessage());\n                }\n            } else {\n                storeInRepository(uuid, formattedSvg, transformto, processid, repository);\n\n                try {\n                    resp.setCharacterEncoding(\"UTF-8\");\n                    resp.setContentType(\"application/pdf\");\n                    if (processid != null) {\n                        resp.setHeader(\"Content-Disposition\",\n                                \"attachment; filename=\\\"\" + processid + \".pdf\\\"\");\n                    } else {\n                        resp.setHeader(\"Content-Disposition\",\n                                \"attachment; filename=\\\"\" + uuid + \".pdf\\\"\");\n                    }\n\n                    ByteArrayOutputStream bout = new ByteArrayOutputStream();\n                    Document pdfDoc = new Document(PageSize.A4);\n                    PdfWriter pdfWriter = PdfWriter.getInstance(pdfDoc, resp.getOutputStream());\n                    pdfDoc.open();\n                    pdfDoc.addCreationDate();\n\n                    PNGTranscoder t = new PNGTranscoder();\n                    t.addTranscodingHint(ImageTranscoder.KEY_MEDIA, \"screen\");\n                    TranscoderInput input = new TranscoderInput(new StringReader(\n                            formattedSvg));\n                    TranscoderOutput output = new TranscoderOutput(bout);\n                    t.transcode(input, output);\n\n                    Image processImage = Image.getInstance(bout.toByteArray());\n                    scalePDFImage(pdfDoc, processImage);\n                    pdfDoc.add(processImage);\n\n                    pdfDoc.close();\n                } catch(Exception e) {\n                    resp.sendError(500, e.getMessage());\n                }\n            }\n        } else if (transformto != null && transformto.equals(TO_PNG)) {\n            try {\n                if(respaction != null && respaction.equals(RESPACTION_SHOWURL)) {\n                    ByteArrayOutputStream bout = new ByteArrayOutputStream();\n                    PNGTranscoder t = new PNGTranscoder();\n                    t.addTranscodingHint(ImageTranscoder.KEY_MEDIA, \"screen\");\n                    TranscoderInput input = new TranscoderInput(new StringReader(formattedSvg));\n                    TranscoderOutput output = new TranscoderOutput(bout);\n                    t.transcode(input, output);\n                    resp.setCharacterEncoding(\"UTF-8\");\n                    resp.setContentType(\"text/plain\");\n                    if(req.getParameter(SVG_WIDTH_PARAM) != null && req.getParameter(SVG_HEIGHT_PARAM) != null) {\n                        int widthHint = (int) getFloatParam(req, SVG_WIDTH_PARAM, DEFAULT_PDF_WIDTH);\n                        int heightHint = (int) getFloatParam(req, SVG_HEIGHT_PARAM, DEFAULT_PDF_HEIGHT);\n                        resp.getWriter().write(\"<img width=\\\"\" + widthHint + \"\\\" height=\\\"\" + heightHint + \"\\\" src=\\\"data:image/png;base64,\" + Base64.encodeBase64String(bout.toByteArray()) + \"\\\">\");\n                    } else {\n                        resp.getWriter().write(\"<img src=\\\"data:image/png;base64,\" + Base64.encodeBase64String(bout.toByteArray()) + \"\\\">\");\n                    }\n                } else {\n                    storeInRepository(uuid, formattedSvg, transformto, processid, repository);\n                    resp.setContentType(\"image/png\");\n                    if (processid != null) {\n                        resp.setHeader(\"Content-Disposition\", \"attachment; filename=\\\"\" + processid + \".png\\\"\");\n                    } else {\n                        resp.setHeader(\"Content-Disposition\", \"attachment; filename=\\\"\" + uuid + \".png\\\"\");\n                    }\n\n                    PNGTranscoder t = new PNGTranscoder();\n                    t.addTranscodingHint(ImageTranscoder.KEY_MEDIA, \"screen\");\n                    TranscoderInput input = new TranscoderInput(new StringReader(\n                            formattedSvg));\n                    TranscoderOutput output = new TranscoderOutput(\n                            resp.getOutputStream());\n                    t.transcode(input, output);\n                }\n            } catch (TranscoderException e) {\n                resp.sendError(500, e.getMessage());\n            }\n        } else if (transformto != null && transformto.equals(TO_SVG)) {\n            storeInRepository(uuid, formattedSvg, transformto, processid, repository);\n\n        } else if (transformto != null && transformto.equals(BPMN2_TO_JSON)) {\n            try {\n                if(convertServiceTasks != null && convertServiceTasks.equals(\"true\")) {\n                    bpmn2in = bpmn2in.replaceAll(\"drools:taskName=\\\".*?\\\"\", \"drools:taskName=\\\"ReadOnlyService\\\"\");\n                    bpmn2in = bpmn2in.replaceAll(\"tns:taskName=\\\".*?\\\"\", \"tns:taskName=\\\"ReadOnlyService\\\"\");\n                }\n\n                Definitions def = ((JbpmProfileImpl) profile).getDefinitions(bpmn2in);\n                def.setTargetNamespace(\"http://www.omg.org/bpmn20\");\n\n                if(convertServiceTasks != null && convertServiceTasks.equals(\"true\")) {\n                    // fix the data input associations for converted tasks\n                    List<RootElement> rootElements =  def.getRootElements();\n                    for(RootElement root : rootElements) {\n                        if(root instanceof Process) {\n                            updateTaskDataInputs((Process) root, def);\n                        }\n                    }\n                }\n\n                // get the xml from Definitions\n                ResourceSet rSet = new ResourceSetImpl();\n                rSet.getResourceFactoryRegistry().getExtensionToFactoryMap().put(\"bpmn2\", new JBPMBpmn2ResourceFactoryImpl());\n                JBPMBpmn2ResourceImpl bpmn2resource = (JBPMBpmn2ResourceImpl) rSet.createResource(URI.createURI(\"virtual.bpmn2\"));\n                bpmn2resource.getDefaultLoadOptions().put(JBPMBpmn2ResourceImpl.OPTION_ENCODING, \"UTF-8\");\n                bpmn2resource.getDefaultLoadOptions().put(JBPMBpmn2ResourceImpl.OPTION_DEFER_IDREF_RESOLUTION, true);\n                bpmn2resource.getDefaultLoadOptions().put( JBPMBpmn2ResourceImpl.OPTION_DISABLE_NOTIFY, true );\n                bpmn2resource.getDefaultLoadOptions().put(JBPMBpmn2ResourceImpl.OPTION_PROCESS_DANGLING_HREF, JBPMBpmn2ResourceImpl.OPTION_PROCESS_DANGLING_HREF_RECORD);\n                bpmn2resource.setEncoding(\"UTF-8\");\n                rSet.getResources().add(bpmn2resource);\n                bpmn2resource.getContents().add(def);\n                ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n                bpmn2resource.save(outputStream, new HashMap<Object, Object>());\n                String revisedXmlModel =  outputStream.toString();\n                String json = profile.createUnmarshaller().parseModel(revisedXmlModel, profile, pp);\n                resp.setCharacterEncoding(\"UTF-8\");\n                resp.setContentType(\"application/json\");\n                resp.getWriter().print(json);\n            } catch(Exception e) {\n                e.printStackTrace();\n                _logger.error(e.getMessage());\n                resp.setContentType(\"application/json\");\n                resp.getWriter().print(\"{}\");\n            }\n        } else if (transformto != null && transformto.equals(JSON_TO_BPMN2)) {\n            try {\n                DroolsFactoryImpl.init();\n                BpsimFactoryImpl.init();\n                if(preprocessingData == null) {\n                    preprocessingData = \"\";\n                }\n                String processXML = profile.createMarshaller().parseModel(jsonin, preprocessingData);\n                resp.setContentType(\"application/xml\");\n                resp.getWriter().print(processXML);\n            } catch(Exception e) {\n                e.printStackTrace();\n                _logger.error(e.getMessage());\n                resp.setContentType(\"application/xml\");\n                resp.getWriter().print(\"\");\n            }\n\n        } else if (transformto != null && transformto.equals(HTML_TO_PDF)) {\n            try {\n                resp.setContentType(\"application/pdf\");\n                if (processid != null) {\n                    resp.setHeader(\"Content-Disposition\",\n                            \"attachment; filename=\\\"\" + processid + \".pdf\\\"\");\n                } else {\n                    resp.setHeader(\"Content-Disposition\",\n                            \"attachment; filename=\\\"\" + uuid + \".pdf\\\"\");\n                }\n\n                Document pdfDoc = new Document(PageSize.A4);\n                PdfWriter pdfWriter = PdfWriter.getInstance(pdfDoc, resp.getOutputStream());\n                pdfDoc.open();\n                pdfDoc.addCreator(\"jBPM Designer\");\n                pdfDoc.addSubject(\"Business Process Documentation\");\n                pdfDoc.addCreationDate();\n                pdfDoc.addTitle(\"Process Documentation\");\n\n                HTMLWorker htmlWorker = new HTMLWorker(pdfDoc);\n                htmlWorker.parse(new StringReader(htmlSource));\n                pdfDoc.close();\n            } catch(DocumentException e) {\n                resp.sendError(500, e.getMessage());\n            }\n        }\n    }",
  "abstract_func": "@Override\n    protected void doPost(HttpServletRequest VAR_0, HttpServletResponse VAR_1)\n            throws ServletException, IOException {\n        VAR_0.setCharacterEncoding(\"UTF-8\");\n        String VAR_2 = VAR_0.getParameter(\"fsvg\");\n        String VAR_3 = VAR_4.getUUID(VAR_0);\n        String VAR_5 = VAR_4.getDefaultProfileName(VAR_0.getParameter(\"profile\"));\n        String VAR_6 = VAR_0.getParameter(\"transformto\");\n        String VAR_7 = VAR_0.getParameter(\"jpdl\");\n        String VAR_8 = VAR_0.getParameter(\"gpd\");\n        String VAR_9 = VAR_0.getParameter(\"bpmn2\");\n        String VAR_10 = VAR_0.getParameter(\"json\");\n        String VAR_11 = VAR_0.getParameter(\"pp\");\n        String VAR_12 = VAR_0.getParameter(\"respaction\");\n        String VAR_13 = VAR_0.getParameter(\"pp\");\n        String VAR_14 = VAR_0.getParameter(\"processid\");\n        String VAR_15 = VAR_0.getParameter(\"enc\");\n        String VAR_16 = VAR_0.getParameter(\"convertservicetasks\");\n        String VAR_17 = VAR_0.getParameter(\"htmlenc\");\n\n        String VAR_18 = ( VAR_2 == null ? \"\" : new String(VAR_19.decodeBase64(VAR_2), \"UTF-8\") );\n\n        String VAR_20 = ( VAR_17 == null ? \"\" : new String(VAR_19.decodeBase64(VAR_17), \"UTF-8\") );\n\n        if(VAR_15 != null && VAR_15.equals(\"true\")) {\n            VAR_9 = new String(VAR_19.decodeBase64(VAR_9), \"UTF-8\");\n        }\n\n        if (VAR_21 == null) {\n            VAR_21 = VAR_22.findProfile(VAR_0, VAR_5);\n        }\n\n        VAR_23.init();\n        VAR_24.init();\n\n        Repository VAR_25 = VAR_21.getRepository();\n\n        if (VAR_6 != null && VAR_6.equals(VAR_26)) {\n            if(VAR_12 != null && VAR_12.equals(VAR_27)) {\n\n                try {\n                    ByteArrayOutputStream VAR_28 = new ByteArrayOutputStream();\n                    Document VAR_29 = new Document(VAR_30.A4);\n                    PdfWriter VAR_31 = VAR_32.getInstance(VAR_29, VAR_28);\n                    VAR_29.open();\n                    VAR_29.addCreationDate();\n\n                    PNGTranscoder VAR_33 = new PNGTranscoder();\n                    VAR_33.addTranscodingHint(VAR_34.KEY_MEDIA, \"screen\");\n\n                    float VAR_35 = getFloatParam(VAR_0, VAR_36, VAR_37);\n                    float VAR_38 = getFloatParam(VAR_0, VAR_39, VAR_40);\n                    String VAR_41 = \"style=\\\"width:\" + VAR_35 + \"px;height:\" + VAR_38 + \"px;\\\"\";\n                    VAR_33.addTranscodingHint(VAR_42.KEY_WIDTH, VAR_35);\n                    VAR_33.addTranscodingHint(VAR_42.KEY_HEIGHT, VAR_38);\n\n\n                    ByteArrayOutputStream VAR_43 = new ByteArrayOutputStream();\n                    TranscoderInput VAR_44 = new TranscoderInput(new StringReader(\n                            VAR_18));\n                    TranscoderOutput VAR_45 = new TranscoderOutput(VAR_43);\n                    VAR_33.transcode(VAR_44, VAR_45);\n\n                    Image VAR_46 = VAR_47.getInstance(VAR_43.toByteArray());\n                    scalePDFImage(VAR_29, VAR_46);\n                    VAR_29.add(VAR_46);\n\n                    VAR_29.close();\n\n                    VAR_1.setCharacterEncoding(\"UTF-8\");\n                    VAR_1.setContentType(\"text/plain\");\n\n                    VAR_1.getWriter().write(\"<object type=\\\"application/pdf\\\" \" + VAR_41 + \" data=\\\"data:application/pdf;base64,\" + VAR_19.encodeBase64String(VAR_28.toByteArray()) + \"\\\"></object>\");\n                } catch(Exception VAR_48) {\n                    VAR_1.sendError(500, VAR_48.getMessage());\n                }\n            } else {\n                storeInRepository(VAR_3, VAR_18, VAR_6, VAR_14, VAR_25);\n\n                try {\n                    VAR_1.setCharacterEncoding(\"UTF-8\");\n                    VAR_1.setContentType(\"application/pdf\");\n                    if (VAR_14 != null) {\n                        VAR_1.setHeader(\"Content-Disposition\",\n                                \"attachment; filename=\\\"\" + VAR_14 + \".pdf\\\"\");\n                    } else {\n                        VAR_1.setHeader(\"Content-Disposition\",\n                                \"attachment; filename=\\\"\" + VAR_3 + \".pdf\\\"\");\n                    }\n\n                    ByteArrayOutputStream VAR_49 = new ByteArrayOutputStream();\n                    Document VAR_29 = new Document(VAR_30.A4);\n                    PdfWriter VAR_31 = VAR_32.getInstance(VAR_29, VAR_1.getOutputStream());\n                    VAR_29.open();\n                    VAR_29.addCreationDate();\n\n                    PNGTranscoder VAR_33 = new PNGTranscoder();\n                    VAR_33.addTranscodingHint(VAR_34.KEY_MEDIA, \"screen\");\n                    TranscoderInput VAR_44 = new TranscoderInput(new StringReader(\n                            VAR_18));\n                    TranscoderOutput VAR_45 = new TranscoderOutput(VAR_49);\n                    VAR_33.transcode(VAR_44, VAR_45);\n\n                    Image VAR_46 = VAR_47.getInstance(VAR_49.toByteArray());\n                    scalePDFImage(VAR_29, VAR_46);\n                    VAR_29.add(VAR_46);\n\n                    VAR_29.close();\n                } catch(Exception VAR_48) {\n                    VAR_1.sendError(500, VAR_48.getMessage());\n                }\n            }\n        } else if (VAR_6 != null && VAR_6.equals(VAR_50)) {\n            try {\n                if(VAR_12 != null && VAR_12.equals(VAR_27)) {\n                    ByteArrayOutputStream VAR_49 = new ByteArrayOutputStream();\n                    PNGTranscoder VAR_33 = new PNGTranscoder();\n                    VAR_33.addTranscodingHint(VAR_34.KEY_MEDIA, \"screen\");\n                    TranscoderInput VAR_44 = new TranscoderInput(new StringReader(VAR_18));\n                    TranscoderOutput VAR_45 = new TranscoderOutput(VAR_49);\n                    VAR_33.transcode(VAR_44, VAR_45);\n                    VAR_1.setCharacterEncoding(\"UTF-8\");\n                    VAR_1.setContentType(\"text/plain\");\n                    if(VAR_0.getParameter(VAR_36) != null && VAR_0.getParameter(VAR_39) != null) {\n                        int VAR_35 = (int) getFloatParam(VAR_0, VAR_36, VAR_37);\n                        int VAR_38 = (int) getFloatParam(VAR_0, VAR_39, VAR_40);\n                        VAR_1.getWriter().write(\"<img width=\\\"\" + VAR_35 + \"\\\" height=\\\"\" + VAR_38 + \"\\\" src=\\\"data:image/png;base64,\" + VAR_19.encodeBase64String(VAR_49.toByteArray()) + \"\\\">\");\n                    } else {\n                        VAR_1.getWriter().write(\"<img src=\\\"data:image/png;base64,\" + VAR_19.encodeBase64String(VAR_49.toByteArray()) + \"\\\">\");\n                    }\n                } else {\n                    storeInRepository(VAR_3, VAR_18, VAR_6, VAR_14, VAR_25);\n                    VAR_1.setContentType(\"image/png\");\n                    if (VAR_14 != null) {\n                        VAR_1.setHeader(\"Content-Disposition\", \"attachment; filename=\\\"\" + VAR_14 + \".png\\\"\");\n                    } else {\n                        VAR_1.setHeader(\"Content-Disposition\", \"attachment; filename=\\\"\" + VAR_3 + \".png\\\"\");\n                    }\n\n                    PNGTranscoder VAR_33 = new PNGTranscoder();\n                    VAR_33.addTranscodingHint(VAR_34.KEY_MEDIA, \"screen\");\n                    TranscoderInput VAR_44 = new TranscoderInput(new StringReader(\n                            VAR_18));\n                    TranscoderOutput VAR_45 = new TranscoderOutput(\n                            VAR_1.getOutputStream());\n                    VAR_33.transcode(VAR_44, VAR_45);\n                }\n            } catch (TranscoderException VAR_48) {\n                VAR_1.sendError(500, VAR_48.getMessage());\n            }\n        } else if (VAR_6 != null && VAR_6.equals(VAR_51)) {\n            storeInRepository(VAR_3, VAR_18, VAR_6, VAR_14, VAR_25);\n\n        } else if (VAR_6 != null && VAR_6.equals(VAR_52)) {\n            try {\n                if(VAR_16 != null && VAR_16.equals(\"true\")) {\n                    VAR_9 = VAR_9.replaceAll(\"drools:taskName=\\\".*?\\\"\", \"drools:taskName=\\\"ReadOnlyService\\\"\");\n                    VAR_9 = VAR_9.replaceAll(\"tns:taskName=\\\".*?\\\"\", \"tns:taskName=\\\"ReadOnlyService\\\"\");\n                }\n\n                Definitions VAR_53 = ((JbpmProfileImpl) VAR_21).getDefinitions(VAR_9);\n                VAR_53.setTargetNamespace(\"http://www.omg.org/bpmn20\");\n\n                if(VAR_16 != null && VAR_16.equals(\"true\")) {\n                    /* COMMENT_0 */\n                    List<RootElement> VAR_54 =  VAR_53.getRootElements();\n                    for(RootElement VAR_55 : VAR_54) {\n                        if(VAR_55 instanceof Process) {\n                            updateTaskDataInputs((Process) VAR_55, VAR_53);\n                        }\n                    }\n                }\n\n                /* COMMENT_1 */\n                ResourceSet VAR_56 = new ResourceSetImpl();\n                VAR_56.getResourceFactoryRegistry().getExtensionToFactoryMap().put(\"bpmn2\", new JBPMBpmn2ResourceFactoryImpl());\n                JBPMBpmn2ResourceImpl VAR_57 = (JBPMBpmn2ResourceImpl) VAR_56.createResource(VAR_58.createURI(\"virtual.bpmn2\"));\n                VAR_57.getDefaultLoadOptions().put(VAR_59.OPTION_ENCODING, \"UTF-8\");\n                VAR_57.getDefaultLoadOptions().put(VAR_59.OPTION_DEFER_IDREF_RESOLUTION, true);\n                VAR_57.getDefaultLoadOptions().put( VAR_59.OPTION_DISABLE_NOTIFY, true );\n                VAR_57.getDefaultLoadOptions().put(VAR_59.OPTION_PROCESS_DANGLING_HREF, VAR_59.OPTION_PROCESS_DANGLING_HREF_RECORD);\n                VAR_57.setEncoding(\"UTF-8\");\n                VAR_56.getResources().add(VAR_57);\n                VAR_57.getContents().add(VAR_53);\n                ByteArrayOutputStream VAR_60 = new ByteArrayOutputStream();\n                VAR_57.save(VAR_60, new HashMap<Object, Object>());\n                String VAR_61 =  VAR_60.toString();\n                String VAR_62 = VAR_21.createUnmarshaller().parseModel(VAR_61, VAR_21, VAR_13);\n                VAR_1.setCharacterEncoding(\"UTF-8\");\n                VAR_1.setContentType(\"application/json\");\n                VAR_1.getWriter().print(VAR_62);\n            } catch(Exception VAR_48) {\n                VAR_48.printStackTrace();\n                VAR_63.error(VAR_48.getMessage());\n                VAR_1.setContentType(\"application/json\");\n                VAR_1.getWriter().print(\"{}\");\n            }\n        } else if (VAR_6 != null && VAR_6.equals(VAR_64)) {\n            try {\n                VAR_23.init();\n                VAR_24.init();\n                if(VAR_11 == null) {\n                    VAR_11 = \"\";\n                }\n                String VAR_65 = VAR_21.createMarshaller().parseModel(VAR_10, VAR_11);\n                VAR_1.setContentType(\"application/xml\");\n                VAR_1.getWriter().print(VAR_65);\n            } catch(Exception VAR_48) {\n                VAR_48.printStackTrace();\n                VAR_63.error(VAR_48.getMessage());\n                VAR_1.setContentType(\"application/xml\");\n                VAR_1.getWriter().print(\"\");\n            }\n\n        } else if (VAR_6 != null && VAR_6.equals(VAR_66)) {\n            try {\n                VAR_1.setContentType(\"application/pdf\");\n                if (VAR_14 != null) {\n                    VAR_1.setHeader(\"Content-Disposition\",\n                            \"attachment; filename=\\\"\" + VAR_14 + \".pdf\\\"\");\n                } else {\n                    VAR_1.setHeader(\"Content-Disposition\",\n                            \"attachment; filename=\\\"\" + VAR_3 + \".pdf\\\"\");\n                }\n\n                Document VAR_29 = new Document(VAR_30.A4);\n                PdfWriter VAR_31 = VAR_32.getInstance(VAR_29, VAR_1.getOutputStream());\n                VAR_29.open();\n                VAR_29.addCreator(\"jBPM Designer\");\n                VAR_29.addSubject(\"Business Process Documentation\");\n                VAR_29.addCreationDate();\n                VAR_29.addTitle(\"Process Documentation\");\n\n                HTMLWorker VAR_67 = new HTMLWorker(VAR_29);\n                VAR_67.parse(new StringReader(VAR_20));\n                VAR_29.close();\n            } catch(DocumentException VAR_48) {\n                VAR_1.sendError(500, VAR_48.getMessage());\n            }\n        }\n    }",
  "func_graph_path": "kiegroup/jbpm-designer/a143f3b92a6a5a527d929d68c02a0c5d914ab81d/TransformerServlet.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -150,37 +150,8 @@\n             }\n         } else if (transformto != null && transformto.equals(TO_SVG)) {\n             storeInRepository(uuid, formattedSvg, transformto, processid, repository);\n-        } else if (transformto != null && transformto.equals(JPDL_TO_BPMN2)) {\n-            try {\n-                String bpmn2 = JbpmMigration.transform(jpdl);\n-                Definitions def = ((JbpmProfileImpl) profile).getDefinitions(bpmn2);\n-                // add bpmndi info to Definitions with help of gpd\n-                addBpmnDiInfo(def, gpd);\n-                // hack for now\n-                revisitSequenceFlows(def, bpmn2);\n-                // another hack if id == name\n-                revisitNodeNames(def);\n-\n-                // get the xml from Definitions\n-                ResourceSet rSet = new ResourceSetImpl();\n-                rSet.getResourceFactoryRegistry().getExtensionToFactoryMap().put(\"bpmn2\", new JBPMBpmn2ResourceFactoryImpl());\n-                JBPMBpmn2ResourceImpl bpmn2resource = (JBPMBpmn2ResourceImpl) rSet.createResource(URI.createURI(\"virtual.bpmn2\"));\n-                rSet.getResources().add(bpmn2resource);\n-                bpmn2resource.getContents().add(def);\n-                ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n-                bpmn2resource.save(outputStream, new HashMap<Object, Object>());\n-                String fullXmlModel =  outputStream.toString();\n-                // convert to json and write response\n-                String json = profile.createUnmarshaller().parseModel(fullXmlModel, profile, pp);\n-                resp.setCharacterEncoding(\"UTF-8\");\n-                resp.setContentType(\"application/json\");\n-                resp.getWriter().print(json);\n-            } catch(Exception e) {\n-                _logger.error(e.getMessage());\n-                resp.setContentType(\"application/json\");\n-                resp.getWriter().print(\"{}\");\n-            }\n-        }  else if (transformto != null && transformto.equals(BPMN2_TO_JSON)) {\n+\n+        } else if (transformto != null && transformto.equals(BPMN2_TO_JSON)) {\n             try {\n                 if(convertServiceTasks != null && convertServiceTasks.equals(\"true\")) {\n                     bpmn2in = bpmn2in.replaceAll(\"drools:taskName=\\\".*?\\\"\", \"drools:taskName=\\\"ReadOnlyService\\\"\");",
  "diff_line_info": {
    "deleted_lines": [
      "        } else if (transformto != null && transformto.equals(JPDL_TO_BPMN2)) {",
      "            try {",
      "                String bpmn2 = JbpmMigration.transform(jpdl);",
      "                Definitions def = ((JbpmProfileImpl) profile).getDefinitions(bpmn2);",
      "                // add bpmndi info to Definitions with help of gpd",
      "                addBpmnDiInfo(def, gpd);",
      "                // hack for now",
      "                revisitSequenceFlows(def, bpmn2);",
      "                // another hack if id == name",
      "                revisitNodeNames(def);",
      "",
      "                // get the xml from Definitions",
      "                ResourceSet rSet = new ResourceSetImpl();",
      "                rSet.getResourceFactoryRegistry().getExtensionToFactoryMap().put(\"bpmn2\", new JBPMBpmn2ResourceFactoryImpl());",
      "                JBPMBpmn2ResourceImpl bpmn2resource = (JBPMBpmn2ResourceImpl) rSet.createResource(URI.createURI(\"virtual.bpmn2\"));",
      "                rSet.getResources().add(bpmn2resource);",
      "                bpmn2resource.getContents().add(def);",
      "                ByteArrayOutputStream outputStream = new ByteArrayOutputStream();",
      "                bpmn2resource.save(outputStream, new HashMap<Object, Object>());",
      "                String fullXmlModel =  outputStream.toString();",
      "                // convert to json and write response",
      "                String json = profile.createUnmarshaller().parseModel(fullXmlModel, profile, pp);",
      "                resp.setCharacterEncoding(\"UTF-8\");",
      "                resp.setContentType(\"application/json\");",
      "                resp.getWriter().print(json);",
      "            } catch(Exception e) {",
      "                _logger.error(e.getMessage());",
      "                resp.setContentType(\"application/json\");",
      "                resp.getWriter().print(\"{}\");",
      "            }",
      "        }  else if (transformto != null && transformto.equals(BPMN2_TO_JSON)) {"
    ],
    "added_lines": [
      "",
      "        } else if (transformto != null && transformto.equals(BPMN2_TO_JSON)) {"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/kiegroup/jbpm-designer/pull/673",
  "description": {
    "pr_info": {
      "title": "[6.5.x] JBPM-6415 - Remove jPDL migration plugin and its use from jbpm-design…",
      "number": 673
    },
    "comment": [
      "…er (#658)\r\n\r\n@tsurdilo could you please review? This is just a cherry-pick of the same changes you did on master.",
      "@psiroky looks good to me. thanks."
    ]
  },
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Defect Remediation & Feature Upgrades  \n**Confidence:** 0.9"
}