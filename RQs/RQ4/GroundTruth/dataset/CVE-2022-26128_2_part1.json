{
  "cve_id": "CVE-2022-26128",
  "cwe_ids": [
    "CWE-119",
    "CWE-1284"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "FRRouting/frr",
  "commit_msg": "babeld: fix #10502 #10503 by repairing the checks on length\n\nThis patch repairs the checking conditions on length in four functions:\nbabel_packet_examin, parse_hello_subtlv, parse_ihu_subtlv, and parse_update_subtlv\n\nSigned-off-by: qingkaishi <qingkaishi@gmail.com>",
  "commit_hash": "c3793352a8d76d2eee1edc38a9a16c1c8a6573f4",
  "git_url": "https://github.com/FRRouting/frr/commit/c3793352a8d76d2eee1edc38a9a16c1c8a6573f4",
  "file_path": "babeld/message.c",
  "func_name": "babel_packet_examin",
  "func_before": "static int\nbabel_packet_examin(const unsigned char *packet, int packetlen)\n{\n    unsigned i = 0, bodylen;\n    const unsigned char *message;\n    unsigned char type, len;\n\n    if(packetlen < 4 || packet[0] != 42 || packet[1] != 2)\n        return 1;\n    DO_NTOHS(bodylen, packet + 2);\n    while (i < bodylen){\n        message = packet + 4 + i;\n        type = message[0];\n        if(type == MESSAGE_PAD1) {\n            i++;\n            continue;\n        }\n        if(i + 1 > bodylen) {\n            debugf(BABEL_DEBUG_COMMON,\"Received truncated message.\");\n            return 1;\n        }\n        len = message[1];\n        if(i + len > bodylen) {\n            debugf(BABEL_DEBUG_COMMON,\"Received truncated message.\");\n            return 1;\n        }\n        /* not Pad1 */\n        if(type <= MESSAGE_MAX && tlv_min_length[type] && len < tlv_min_length[type]) {\n            debugf(BABEL_DEBUG_COMMON,\"Undersized %u TLV\", type);\n            return 1;\n        }\n        i += len + 2;\n    }\n    return 0;\n}",
  "abstract_func_before": "static int\nbabel_packet_examin(const unsigned char *VAR_0, int VAR_1)\n{\n    unsigned VAR_2 = 0, VAR_3;\n    const unsigned char *VAR_4;\n    unsigned char VAR_5, VAR_6;\n\n    if(VAR_1 < 4 || VAR_0[0] != 42 || VAR_0[1] != 2)\n        return 1;\n    DO_NTOHS(VAR_3, VAR_0 + 2);\n    while (VAR_2 < VAR_3){\n        VAR_4 = VAR_0 + 4 + VAR_2;\n        VAR_5 = VAR_4[0];\n        if(VAR_5 == VAR_7) {\n            VAR_2++;\n            continue;\n        }\n        if(VAR_2 + 1 > VAR_3) {\n            debugf(VAR_8,\"Received truncated message.\");\n            return 1;\n        }\n        VAR_6 = VAR_4[1];\n        if(VAR_2 + VAR_6 > VAR_3) {\n            debugf(VAR_8,\"Received truncated message.\");\n            return 1;\n        }\n        /* COMMENT_0 */\n        if(VAR_5 <= VAR_9 && VAR_10[VAR_5] && VAR_6 < VAR_10[VAR_5]) {\n            debugf(VAR_8,\"Undersized %u TLV\", VAR_5);\n            return 1;\n        }\n        VAR_2 += VAR_6 + 2;\n    }\n    return 0;\n}",
  "func_graph_path_before": "FRRouting/frr/c3793352a8d76d2eee1edc38a9a16c1c8a6573f4/message.c/vul/before/3.json",
  "func": "static int\nbabel_packet_examin(const unsigned char *packet, int packetlen)\n{\n    unsigned i = 0, bodylen;\n    const unsigned char *message;\n    unsigned char type, len;\n\n    if(packetlen < 4 || packet[0] != 42 || packet[1] != 2)\n        return 1;\n    DO_NTOHS(bodylen, packet + 2);\n    while (i < bodylen){\n        message = packet + 4 + i;\n        type = message[0];\n        if(type == MESSAGE_PAD1) {\n            i++;\n            continue;\n        }\n        if(i + 2 > bodylen) {\n            debugf(BABEL_DEBUG_COMMON,\"Received truncated message.\");\n            return 1;\n        }\n        len = message[1];\n        if(i + len + 2 > bodylen) {\n            debugf(BABEL_DEBUG_COMMON,\"Received truncated message.\");\n            return 1;\n        }\n        /* not Pad1 */\n        if(type <= MESSAGE_MAX && tlv_min_length[type] && len < tlv_min_length[type]) {\n            debugf(BABEL_DEBUG_COMMON,\"Undersized %u TLV\", type);\n            return 1;\n        }\n        i += len + 2;\n    }\n    return 0;\n}",
  "abstract_func": "static int\nbabel_packet_examin(const unsigned char *VAR_0, int VAR_1)\n{\n    unsigned VAR_2 = 0, VAR_3;\n    const unsigned char *VAR_4;\n    unsigned char VAR_5, VAR_6;\n\n    if(VAR_1 < 4 || VAR_0[0] != 42 || VAR_0[1] != 2)\n        return 1;\n    DO_NTOHS(VAR_3, VAR_0 + 2);\n    while (VAR_2 < VAR_3){\n        VAR_4 = VAR_0 + 4 + VAR_2;\n        VAR_5 = VAR_4[0];\n        if(VAR_5 == VAR_7) {\n            VAR_2++;\n            continue;\n        }\n        if(VAR_2 + 2 > VAR_3) {\n            debugf(VAR_8,\"Received truncated message.\");\n            return 1;\n        }\n        VAR_6 = VAR_4[1];\n        if(VAR_2 + VAR_6 + 2 > VAR_3) {\n            debugf(VAR_8,\"Received truncated message.\");\n            return 1;\n        }\n        /* COMMENT_0 */\n        if(VAR_5 <= VAR_9 && VAR_10[VAR_5] && VAR_6 < VAR_10[VAR_5]) {\n            debugf(VAR_8,\"Undersized %u TLV\", VAR_5);\n            return 1;\n        }\n        VAR_2 += VAR_6 + 2;\n    }\n    return 0;\n}",
  "func_graph_path": "FRRouting/frr/c3793352a8d76d2eee1edc38a9a16c1c8a6573f4/message.c/vul/after/3.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -15,12 +15,12 @@\n             i++;\n             continue;\n         }\n-        if(i + 1 > bodylen) {\n+        if(i + 2 > bodylen) {\n             debugf(BABEL_DEBUG_COMMON,\"Received truncated message.\");\n             return 1;\n         }\n         len = message[1];\n-        if(i + len > bodylen) {\n+        if(i + len + 2 > bodylen) {\n             debugf(BABEL_DEBUG_COMMON,\"Received truncated message.\");\n             return 1;\n         }",
  "diff_line_info": {
    "deleted_lines": [
      "        if(i + 1 > bodylen) {",
      "        if(i + len > bodylen) {"
    ],
    "added_lines": [
      "        if(i + 2 > bodylen) {",
      "        if(i + len + 2 > bodylen) {"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/FRRouting/frr/pull/10504",
  "description": {
    "pr_info": {
      "title": "babeld: fix the checks for truncated packets",
      "number": 10504
    },
    "comment": [
      "This patch repairs the checking conditions on length in four functions:\r\nbabel_packet_examin, parse_hello_subtlv, parse_ihu_subtlv, and parse_update_subtlv\r\nThis patch fixes #10502 and fixes #10503\r\n\r\nSigned-off-by: qingkaishi <qingkaishi@gmail.com>",
      "<details><summary>Continuous Integration Result: SUCCESSFUL</summary>\n\n#  Continuous Integration Result: SUCCESSFUL\n\nCongratulations, this patch passed basic tests\n\nTested-by: NetDEF / OpenSourceRouting.org CI System\n\nCI System Testrun URL: https://ci1.netdef.org/browse/FRR-PULLREQ2-3236/\n\nThis is a comment from an automated CI system.\nFor questions and feedback in regards to this CI system, please feel free to email\nMartin Winter - mwinter (at) opensourcerouting.org.\n\n\n</details>",
      "# Continuous Integration Result: SUCCESSFUL\n\nCongratulations, this patch passed basic tests\n\nTested-by: NetDEF / OpenSourceRouting.org CI System\n\nCI System Testrun URL: https://ci1.netdef.org/browse/FRR-PULLREQ2-3237/\n\nThis is a comment from an automated CI system.\nFor questions and feedback in regards to this CI system, please feel free to email\nMartin Winter - mwinter (at) opensourcerouting.org.\n\n\n",
      "@Mergifyio backport dev/8.2",
      "> backport dev/8.2\n\n#### ðŸŸ  Waiting for conditions to match\n\n<details>\n\n- [ ] `merged` [:pushpin: backport requirement]\n\n\n</details>\n\n\n<!--\nDO NOT EDIT\n-*- Mergify Payload -*-\n{\"command\": \"backport dev/8.2\", \"conclusion\": null}\n-*- Mergify Payload End -*-\n-->\n",
      "> backport dev/8.2\n\n#### âœ… Backports have been created\n\n<details>\n\n* [#10528 babeld: fix the checks for truncated packets (backport #10504)](https://github.com/FRRouting/frr/pull/10528) has been created for branch `dev/8.2`\n\n</details>\n\n\n<!--\nDO NOT EDIT\n-*- Mergify Payload -*-\n{\"command\": \"backport dev/8.2\", \"conclusion\": \"success\"}\n-*- Mergify Payload End -*-\n-->\n"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.8,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 0.8\n\n**Step-by-Step Explanation:**\n\n1. **Analysis of Input:**\n   - The commit message indicates fixes for issues #10502 and #10503 related to incorrect length checks in specific functions.\n   - The code diff shows changes to conditions involving buffer lengths, which are critical for preventing buffer overflow issues.\n\n2. **Consistency Check:**\n   - The code modifications directly address the issues mentioned in the commit message without discrepancies.\n\n3. **Purpose Evaluation:**\n   - The changes are aimed at correcting buffer length checks, which are essential for preventing overflows.\n\n4. **Security Vulnerability Assessment:**\n   - Although not explicitly stated, the fixes likely address buffer overflow vulnerabilities, a common security issue.\n\n5. **Non-Security Classification:**\n   - Not applicable; the context leans towards security.\n\n6. **Confidence Scoring:**\n   - The changes strongly suggest a security fix, but the lack of explicit security terms lowers confidence slightly.\n\n**Final Output:**  \n**Final Classification:** Security Vulnerability Fix; **Confidence:** 0.8"
}