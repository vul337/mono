{
  "cve_id": "CVE-2022-21700",
  "cwe_ids": [
    "CWE-400"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "micronaut-projects/micronaut-core",
  "commit_msg": "Use ConversionContext constants where possible instead of class (#2356)\n\nChanges\r\n-------\r\n * Added ArgumentConversionContext constants in ConversionContext\r\n * Replaced Argument.of and use of argument classes with\r\nConversionContext constants where possible\r\n * Added getFirst method in ConvertibleMultiValues that accepts\r\nArgumentConversionContent parameter\r\n\r\nPartially addresses issue #2355",
  "commit_hash": "b8ec32c311689667c69ae7d9f9c3b3a8abc96fe3",
  "git_url": "https://github.com/micronaut-projects/micronaut-core/commit/b8ec32c311689667c69ae7d9f9c3b3a8abc96fe3",
  "file_path": "core/src/main/java/io/micronaut/core/type/DefaultArgument.java",
  "func_name": "initializeTypeParameters",
  "func_before": "private Map<String, Argument<?>> initializeTypeParameters(Argument[] genericTypes) {\n        Map<String, Argument<?>> typeParameters;\n        if (genericTypes != null && genericTypes.length > 0) {\n            typeParameters = new LinkedHashMap<>(genericTypes.length);\n            for (Argument genericType : genericTypes) {\n                typeParameters.put(genericType.getName(), genericType);\n            }\n        } else {\n            typeParameters = Collections.emptyMap();\n        }\n        return typeParameters;\n    }",
  "abstract_func_before": "private Map<String, Argument<?>> initializeTypeParameters(Argument[] VAR_0) {\n        Map<String, Argument<?>> VAR_1;\n        if (VAR_0 != null && VAR_0.length > 0) {\n            VAR_1 = new LinkedHashMap<>(VAR_0.length);\n            for (Argument VAR_2 : VAR_0) {\n                VAR_1.put(VAR_2.getName(), VAR_2);\n            }\n        } else {\n            VAR_1 = VAR_3.emptyMap();\n        }\n        return VAR_1;\n    }",
  "func_graph_path_before": "micronaut-projects/micronaut-core/b8ec32c311689667c69ae7d9f9c3b3a8abc96fe3/DefaultArgument.java/vul/before/0.json",
  "func": "private static Map<String, Argument<?>> initializeTypeParameters(Argument[] genericTypes) {\n        Map<String, Argument<?>> typeParameters;\n        if (genericTypes != null && genericTypes.length > 0) {\n            typeParameters = new LinkedHashMap<>(genericTypes.length);\n            for (Argument genericType : genericTypes) {\n                typeParameters.put(genericType.getName(), genericType);\n            }\n        } else {\n            typeParameters = Collections.emptyMap();\n        }\n        return typeParameters;\n    }",
  "abstract_func": "private static Map<String, Argument<?>> initializeTypeParameters(Argument[] VAR_0) {\n        Map<String, Argument<?>> VAR_1;\n        if (VAR_0 != null && VAR_0.length > 0) {\n            VAR_1 = new LinkedHashMap<>(VAR_0.length);\n            for (Argument VAR_2 : VAR_0) {\n                VAR_1.put(VAR_2.getName(), VAR_2);\n            }\n        } else {\n            VAR_1 = VAR_3.emptyMap();\n        }\n        return VAR_1;\n    }",
  "func_graph_path": "micronaut-projects/micronaut-core/b8ec32c311689667c69ae7d9f9c3b3a8abc96fe3/DefaultArgument.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,4 +1,4 @@\n-private Map<String, Argument<?>> initializeTypeParameters(Argument[] genericTypes) {\n+private static Map<String, Argument<?>> initializeTypeParameters(Argument[] genericTypes) {\n         Map<String, Argument<?>> typeParameters;\n         if (genericTypes != null && genericTypes.length > 0) {\n             typeParameters = new LinkedHashMap<>(genericTypes.length);",
  "diff_line_info": {
    "deleted_lines": [
      "private Map<String, Argument<?>> initializeTypeParameters(Argument[] genericTypes) {"
    ],
    "added_lines": [
      "private static Map<String, Argument<?>> initializeTypeParameters(Argument[] genericTypes) {"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/micronaut-projects/micronaut-core/pull/2356",
  "description": {
    "pr_info": {
      "title": "Use Argument constants where possible instead of class",
      "number": 2356
    },
    "comment": [
      "Changes\r\n-------\r\n * Added ArgumentConversionContext constants in ConversionContext\r\n * Replaced Argument.of and use of argument classes with\r\nConversionContext constants where possible\r\n * Added getFirst method in ConvertibleMultiValues that accepts\r\nArgumentConversionContent parameter\r\n\r\nPartially addresses issue #2355",
      "Nice progress"
    ]
  },
  "Bug Filter": "Supporting & Non-Core Improvements",
  "Bug Filter Confidence": 0.7,
  "Bug Filter Response": "**Final Classification:** Supporting & Non-Core Improvements  \n**Confidence:** 0.7"
}