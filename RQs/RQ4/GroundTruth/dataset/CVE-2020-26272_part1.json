{
  "cve_id": "CVE-2020-26272",
  "cwe_ids": [
    "CWE-668"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:P/A:N",
  "cvss_is_v3": false,
  "repo_name": "electron",
  "commit_msg": "fix: restrict sendToFrame to same-process frames by default (#26875)",
  "commit_hash": "07a1c2a3e5845901f7e2eda9506695be58edc73c",
  "git_url": "https://github.com/electron/electron/commit/07a1c2a3e5845901f7e2eda9506695be58edc73c",
  "file_path": "shell/browser/api/electron_api_web_contents.cc",
  "func_name": "WebContents::SendIPCMessageToFrame",
  "func_before": "bool WebContents::SendIPCMessageToFrame(bool internal,\n                                        int32_t frame_id,\n                                        const std::string& channel,\n                                        v8::Local<v8::Value> args) {\n  v8::Isolate* isolate = JavascriptEnvironment::GetIsolate();\n  blink::CloneableMessage message;\n  if (!gin::ConvertFromV8(isolate, args, &message)) {\n    isolate->ThrowException(v8::Exception::Error(\n        gin::StringToV8(isolate, \"Failed to serialize arguments\")));\n    return false;\n  }\n  auto frames = web_contents()->GetAllFrames();\n  auto iter = std::find_if(frames.begin(), frames.end(), [frame_id](auto* f) {\n    return f->GetRoutingID() == frame_id;\n  });\n  if (iter == frames.end())\n    return false;\n  if (!(*iter)->IsRenderFrameLive())\n    return false;\n\n  mojo::AssociatedRemote<mojom::ElectronRenderer> electron_renderer;\n  (*iter)->GetRemoteAssociatedInterfaces()->GetInterface(&electron_renderer);\n  electron_renderer->Message(internal, channel, std::move(message),\n                             0 /* sender_id */);\n  return true;\n}",
  "abstract_func_before": "bool WebContents::SendIPCMessageToFrame(bool VAR_0,\n                                        int32_t VAR_1,\n                                        const std::string& VAR_2,\n                                        v8::Local<v8::Value> VAR_3) {\n  v8::Isolate* VAR_4 = JavascriptEnvironment::GetIsolate();\n  blink::CloneableMessage VAR_5;\n  if (!gin::ConvertFromV8(VAR_4, VAR_3, &VAR_5)) {\n    VAR_4->ThrowException(v8::Exception::Error(\n        gin::StringToV8(VAR_4, \"Failed to serialize arguments\")));\n    return false;\n  }\n  auto VAR_6 = web_contents()->GetAllFrames();\n  auto VAR_7 = std::find_if(VAR_6.begin(), VAR_6.end(), [VAR_1](auto* VAR_8) {\n    return VAR_8->GetRoutingID() == VAR_1;\n  });\n  if (VAR_7 == VAR_6.end())\n    return false;\n  if (!(*VAR_7)->IsRenderFrameLive())\n    return false;\n\n  mojo::AssociatedRemote<mojom::ElectronRenderer> VAR_9;\n  (*VAR_7)->GetRemoteAssociatedInterfaces()->GetInterface(&VAR_9);\n  VAR_9->Message(VAR_0, VAR_2, std::move(VAR_5),\n                             0 /* COMMENT_0 */);\n  return true;\n}",
  "func_graph_path_before": "electron/07a1c2a3e5845901f7e2eda9506695be58edc73c/electron_api_web_contents.cc/vul/before/0.json",
  "func": "bool WebContents::SendIPCMessageToFrame(bool internal,\n                                        v8::Local<v8::Value> frame,\n                                        const std::string& channel,\n                                        v8::Local<v8::Value> args) {\n  v8::Isolate* isolate = JavascriptEnvironment::GetIsolate();\n  blink::CloneableMessage message;\n  if (!gin::ConvertFromV8(isolate, args, &message)) {\n    isolate->ThrowException(v8::Exception::Error(\n        gin::StringToV8(isolate, \"Failed to serialize arguments\")));\n    return false;\n  }\n  int32_t frame_id;\n  int32_t process_id;\n  if (gin::ConvertFromV8(isolate, frame, &frame_id)) {\n    process_id = web_contents()->GetMainFrame()->GetProcess()->GetID();\n  } else {\n    std::vector<int32_t> id_pair;\n    if (gin::ConvertFromV8(isolate, frame, &id_pair) && id_pair.size() == 2) {\n      process_id = id_pair[0];\n      frame_id = id_pair[1];\n    } else {\n      isolate->ThrowException(v8::Exception::Error(gin::StringToV8(\n          isolate,\n          \"frameId must be a number or a pair of [processId, frameId]\")));\n      return false;\n    }\n  }\n\n  auto* rfh = content::RenderFrameHost::FromID(process_id, frame_id);\n  if (!rfh || !rfh->IsRenderFrameLive() ||\n      content::WebContents::FromRenderFrameHost(rfh) != web_contents())\n    return false;\n\n  mojo::AssociatedRemote<mojom::ElectronRenderer> electron_renderer;\n  rfh->GetRemoteAssociatedInterfaces()->GetInterface(&electron_renderer);\n  electron_renderer->Message(internal, channel, std::move(message),\n                             0 /* sender_id */);\n  return true;\n}",
  "abstract_func": "bool WebContents::SendIPCMessageToFrame(bool VAR_0,\n                                        v8::Local<v8::Value> VAR_1,\n                                        const std::string& VAR_2,\n                                        v8::Local<v8::Value> VAR_3) {\n  v8::Isolate* VAR_4 = JavascriptEnvironment::GetIsolate();\n  blink::CloneableMessage VAR_5;\n  if (!gin::ConvertFromV8(VAR_4, VAR_3, &VAR_5)) {\n    VAR_4->ThrowException(v8::Exception::Error(\n        gin::StringToV8(VAR_4, \"Failed to serialize arguments\")));\n    return false;\n  }\n  int32_t VAR_6;\n  int32_t VAR_7;\n  if (gin::ConvertFromV8(VAR_4, VAR_1, &VAR_6)) {\n    VAR_7 = web_contents()->GetMainFrame()->GetProcess()->GetID();\n  } else {\n    std::vector<int32_t> VAR_8;\n    if (gin::ConvertFromV8(VAR_4, VAR_1, &VAR_8) && VAR_8.size() == 2) {\n      VAR_7 = VAR_8[0];\n      VAR_6 = VAR_8[1];\n    } else {\n      VAR_4->ThrowException(v8::Exception::Error(gin::StringToV8(\n          VAR_4,\n          \"frameId must be a number or a pair of [processId, frameId]\")));\n      return false;\n    }\n  }\n\n  auto* VAR_9 = content::RenderFrameHost::FromID(VAR_7, VAR_6);\n  if (!VAR_9 || !VAR_9->IsRenderFrameLive() ||\n      content::WebContents::FromRenderFrameHost(VAR_9) != web_contents())\n    return false;\n\n  mojo::AssociatedRemote<mojom::ElectronRenderer> VAR_10;\n  VAR_9->GetRemoteAssociatedInterfaces()->GetInterface(&VAR_10);\n  VAR_10->Message(VAR_0, VAR_2, std::move(VAR_5),\n                             0 /* COMMENT_0 */);\n  return true;\n}",
  "func_graph_path": "electron/07a1c2a3e5845901f7e2eda9506695be58edc73c/electron_api_web_contents.cc/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,5 +1,5 @@\n bool WebContents::SendIPCMessageToFrame(bool internal,\n-                                        int32_t frame_id,\n+                                        v8::Local<v8::Value> frame,\n                                         const std::string& channel,\n                                         v8::Local<v8::Value> args) {\n   v8::Isolate* isolate = JavascriptEnvironment::GetIsolate();\n@@ -9,17 +9,30 @@\n         gin::StringToV8(isolate, \"Failed to serialize arguments\")));\n     return false;\n   }\n-  auto frames = web_contents()->GetAllFrames();\n-  auto iter = std::find_if(frames.begin(), frames.end(), [frame_id](auto* f) {\n-    return f->GetRoutingID() == frame_id;\n-  });\n-  if (iter == frames.end())\n-    return false;\n-  if (!(*iter)->IsRenderFrameLive())\n+  int32_t frame_id;\n+  int32_t process_id;\n+  if (gin::ConvertFromV8(isolate, frame, &frame_id)) {\n+    process_id = web_contents()->GetMainFrame()->GetProcess()->GetID();\n+  } else {\n+    std::vector<int32_t> id_pair;\n+    if (gin::ConvertFromV8(isolate, frame, &id_pair) && id_pair.size() == 2) {\n+      process_id = id_pair[0];\n+      frame_id = id_pair[1];\n+    } else {\n+      isolate->ThrowException(v8::Exception::Error(gin::StringToV8(\n+          isolate,\n+          \"frameId must be a number or a pair of [processId, frameId]\")));\n+      return false;\n+    }\n+  }\n+\n+  auto* rfh = content::RenderFrameHost::FromID(process_id, frame_id);\n+  if (!rfh || !rfh->IsRenderFrameLive() ||\n+      content::WebContents::FromRenderFrameHost(rfh) != web_contents())\n     return false;\n \n   mojo::AssociatedRemote<mojom::ElectronRenderer> electron_renderer;\n-  (*iter)->GetRemoteAssociatedInterfaces()->GetInterface(&electron_renderer);\n+  rfh->GetRemoteAssociatedInterfaces()->GetInterface(&electron_renderer);\n   electron_renderer->Message(internal, channel, std::move(message),\n                              0 /* sender_id */);\n   return true;",
  "diff_line_info": {
    "deleted_lines": [
      "                                        int32_t frame_id,",
      "  auto frames = web_contents()->GetAllFrames();",
      "  auto iter = std::find_if(frames.begin(), frames.end(), [frame_id](auto* f) {",
      "    return f->GetRoutingID() == frame_id;",
      "  });",
      "  if (iter == frames.end())",
      "    return false;",
      "  if (!(*iter)->IsRenderFrameLive())",
      "  (*iter)->GetRemoteAssociatedInterfaces()->GetInterface(&electron_renderer);"
    ],
    "added_lines": [
      "                                        v8::Local<v8::Value> frame,",
      "  int32_t frame_id;",
      "  int32_t process_id;",
      "  if (gin::ConvertFromV8(isolate, frame, &frame_id)) {",
      "    process_id = web_contents()->GetMainFrame()->GetProcess()->GetID();",
      "  } else {",
      "    std::vector<int32_t> id_pair;",
      "    if (gin::ConvertFromV8(isolate, frame, &id_pair) && id_pair.size() == 2) {",
      "      process_id = id_pair[0];",
      "      frame_id = id_pair[1];",
      "    } else {",
      "      isolate->ThrowException(v8::Exception::Error(gin::StringToV8(",
      "          isolate,",
      "          \"frameId must be a number or a pair of [processId, frameId]\")));",
      "      return false;",
      "    }",
      "  }",
      "",
      "  auto* rfh = content::RenderFrameHost::FromID(process_id, frame_id);",
      "  if (!rfh || !rfh->IsRenderFrameLive() ||",
      "      content::WebContents::FromRenderFrameHost(rfh) != web_contents())",
      "  rfh->GetRemoteAssociatedInterfaces()->GetInterface(&electron_renderer);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/electron/electron/pull/26875",
  "description": {
    "pr_info": {
      "title": "fix: restrict sendToFrame to same-process frames by default",
      "number": 26875
    },
    "comment": [
      "#### Description of Change\nFixes an issue where `event.reply` would sometimes not deliver a reply when\nOOPIFs were present on a page.\n\nThis also changes `webContents.sendToFrame` to only send to same-process frames\nby default. Out-of-process frames can be specified by passing a pair of numbers\n`[processId, frameId]`.\n\n#### Checklist\n<!-- Remove items that do not apply. For completed items, change [ ] to [x]. -->\n\n- [x] PR description included and stakeholders cc'd\n- [x] `npm test` passes\n- [ ] tests are [changed or added](https://github.com/electron/electron/blob/master/docs/development/testing.md)\n- [x] relevant documentation is changed or added\n- [x] [PR release notes](https://github.com/electron/clerk/blob/master/README.md) describe the change in a way relevant to app developers, and are [capitalized, punctuated, and past tense](https://github.com/electron/clerk/blob/master/README.md#examples).\n\n#### Release Notes\n\nNotes: Fixed an issue where `event.reply` could sometimes not deliver a reply to an IPC message when cross-site iframes were present.\n",
      "CI failures are flakes.",
      "**Release Notes Persisted**\n\n> Fixed an issue where `event.reply` could sometimes not deliver a reply to an IPC message when cross-site iframes were present.",
      "I was unable to backport this PR to \"10-x-y\" cleanly;\n   you will need to perform this backport manually.",
      "I was unable to backport this PR to \"11-x-y\" cleanly;\n   you will need to perform this backport manually.",
      "I was unable to backport this PR to \"9-x-y\" cleanly;\n   you will need to perform this backport manually.",
      "I was unable to backport this PR to \"12-x-y\" cleanly;\n   you will need to perform this backport manually.",
      "@nornagon has manually backported this PR to \"12-x-y\", please check out #26925",
      "@nornagon has manually backported this PR to \"11-x-y\", please check out #26926",
      "@nornagon has manually backported this PR to \"10-x-y\", please check out #26927",
      "@nornagon has manually backported this PR to \"9-x-y\", please check out #26928",
      "@nornagon has manually backported this PR to \"master\", please check out #27072"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.95"
}