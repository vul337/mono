{
  "cve_id": "CVE-2023-41053",
  "cwe_ids": [
    "CWE-269"
  ],
  "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:N",
  "cvss_is_v3": true,
  "repo_name": "redis",
  "commit_msg": "Fix sort_ro get-keys function return wrong key number (#12522)\n\nBeforeï¼š\n```\n127.0.0.1:6379> command getkeys sort_ro key\n(empty array)\n127.0.0.1:6379>\n```\nAfter:\n```\n127.0.0.1:6379> command getkeys sort_ro key\n1) \"key\"\n127.0.0.1:6379>\n```\n\n(cherry picked from commit b59f53efb31b36d0a307809f5d33bf66d66a4447)",
  "commit_hash": "9e505e6cd842338424e05883521ca1fb7d0f47f6",
  "git_url": "https://github.com/redis/redis/commit/9e505e6cd842338424e05883521ca1fb7d0f47f6",
  "file_path": "src/db.c",
  "func_name": "sortROGetKeys",
  "func_before": "int sortROGetKeys(struct redisCommand *cmd, robj **argv, int argc, getKeysResult *result) {\n    keyReference *keys;\n    UNUSED(cmd);\n    UNUSED(argv);\n    UNUSED(argc);\n\n    keys = getKeysPrepareResult(result, 1);\n    keys[0].pos = 1; /* <sort-key> is always present. */\n    keys[0].flags = CMD_KEY_RO | CMD_KEY_ACCESS;\n    return 1;\n}",
  "abstract_func_before": "int sortROGetKeys(struct redisCommand *VAR_0, robj **VAR_1, int VAR_2, getKeysResult *VAR_3) {\n    keyReference *VAR_4;\n    UNUSED(VAR_0);\n    UNUSED(VAR_1);\n    UNUSED(VAR_2);\n\n    VAR_4 = getKeysPrepareResult(VAR_3, 1);\n    VAR_4[0].pos = 1; /* COMMENT_0 */\n    VAR_4[0].flags = VAR_5 | VAR_6;\n    return 1;\n}",
  "func_graph_path_before": "redis/9e505e6cd842338424e05883521ca1fb7d0f47f6/db.c/vul/before/0.json",
  "func": "int sortROGetKeys(struct redisCommand *cmd, robj **argv, int argc, getKeysResult *result) {\n    keyReference *keys;\n    UNUSED(cmd);\n    UNUSED(argv);\n    UNUSED(argc);\n\n    keys = getKeysPrepareResult(result, 1);\n    keys[0].pos = 1; /* <sort-key> is always present. */\n    keys[0].flags = CMD_KEY_RO | CMD_KEY_ACCESS;\n    result->numkeys = 1;\n    return result->numkeys;\n}",
  "abstract_func": "int sortROGetKeys(struct redisCommand *VAR_0, robj **VAR_1, int VAR_2, getKeysResult *VAR_3) {\n    keyReference *VAR_4;\n    UNUSED(VAR_0);\n    UNUSED(VAR_1);\n    UNUSED(VAR_2);\n\n    VAR_4 = getKeysPrepareResult(VAR_3, 1);\n    VAR_4[0].pos = 1; /* COMMENT_0 */\n    VAR_4[0].flags = VAR_5 | VAR_6;\n    VAR_3->numkeys = 1;\n    return VAR_3->numkeys;\n}",
  "func_graph_path": "redis/9e505e6cd842338424e05883521ca1fb7d0f47f6/db.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -7,5 +7,6 @@\n     keys = getKeysPrepareResult(result, 1);\n     keys[0].pos = 1; /* <sort-key> is always present. */\n     keys[0].flags = CMD_KEY_RO | CMD_KEY_ACCESS;\n-    return 1;\n+    result->numkeys = 1;\n+    return result->numkeys;\n }",
  "diff_line_info": {
    "deleted_lines": [
      "    return 1;"
    ],
    "added_lines": [
      "    result->numkeys = 1;",
      "    return result->numkeys;"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/redis/redis/pull/12553",
  "description": {
    "pr_info": {
      "title": "Redis 7.2.1",
      "number": 12553
    },
    "comment": [
      "Upgrade urgency SECURITY: See security fixes below.\r\n\r\nSecurity Fixes\r\n==============\r\n\r\n* (CVE-2023-41053) Redis does not correctly identify keys accessed by SORT_RO and,\r\n  as a result, may grant users executing this command access to keys that are not\r\n  explicitly authorized by the ACL configuration.\r\n\r\n\r\nBug Fixes\r\n=========\r\n\r\n* Fix crashes when joining a node to an existing 7.0 Redis Cluster (#12538)\r\n* Correct request_policy and response_policy command tips on for some admin /\r\n  configuration commands (#12545, #12530)"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.9"
}