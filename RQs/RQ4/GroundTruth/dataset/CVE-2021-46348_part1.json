{
  "cve_id": "CVE-2021-46348",
  "cwe_ids": [
    "CWE-617"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "jerryscript-project/jerryscript",
  "commit_msg": "Ban setting 'Object.prototype.__proto__' as Proxy to prevent circular referencing\nin prototype chain.\n\nThis patch fixes #4941\n\nJerryScript-DCO-1.0-Signed-off-by: Martin Negyokru negyokru@inf.u-szeged.hu",
  "commit_hash": "d9b37a22698a15ca3ae7b369822805fd7556538e",
  "git_url": "https://github.com/jerryscript-project/jerryscript/commit/d9b37a22698a15ca3ae7b369822805fd7556538e",
  "file_path": "jerry-core/ecma/operations/ecma-objects.c",
  "func_name": "ecma_op_ordinary_object_set_prototype_of",
  "func_before": "extern inline ecma_value_t JERRY_ATTR_ALWAYS_INLINE\necma_op_ordinary_object_set_prototype_of (ecma_object_t *obj_p, /**< base object */\n                                          ecma_value_t proto) /**< prototype object */\n{\n  JERRY_ASSERT (!ecma_is_lexical_environment (obj_p));\n  JERRY_ASSERT (!ECMA_OBJECT_IS_PROXY (obj_p));\n\n  /* 1. */\n  JERRY_ASSERT (ecma_is_value_object (proto) || ecma_is_value_null (proto));\n\n  /* 3. */\n  ecma_object_t *current_proto_p = ECMA_GET_POINTER (ecma_object_t, ecma_op_ordinary_object_get_prototype_of (obj_p));\n  ecma_object_t *new_proto_p = ecma_is_value_null (proto) ? NULL : ecma_get_object_from_value (proto);\n\n  /* 4. */\n  if (new_proto_p == current_proto_p)\n  {\n    return ECMA_VALUE_TRUE;\n  }\n\n  /* 2 - 5. */\n  if (!ecma_op_ordinary_object_is_extensible (obj_p))\n  {\n    return ECMA_VALUE_FALSE;\n  }\n\n  /**\n   * When the prototype of a fast array changes, it is required to convert the\n   * array to a \"normal\" array. This ensures that all [[Get]]/[[Set]]/etc.\n   * calls works as expected.\n   */\n  if (ecma_op_object_is_fast_array (obj_p))\n  {\n    ecma_fast_array_convert_to_normal (obj_p);\n  }\n\n  /* 6. */\n  ecma_object_t *iter_p = new_proto_p;\n\n  /* 7 - 8. */\n  while (true)\n  {\n    /* 8.a */\n    if (iter_p == NULL)\n    {\n      break;\n    }\n\n    /* 8.b */\n    if (obj_p == iter_p)\n    {\n      return ECMA_VALUE_FALSE;\n    }\n\n    /* 8.c.i */\n#if JERRY_BUILTIN_PROXY\n    if (ECMA_OBJECT_IS_PROXY (iter_p))\n    {\n      break;\n    }\n#endif /* JERRY_BUILTIN_PROXY */\n\n    /* 8.c.ii */\n    iter_p = ECMA_GET_POINTER (ecma_object_t, ecma_op_ordinary_object_get_prototype_of (iter_p));\n  }\n\n  /* 9. */\n  ECMA_SET_POINTER (obj_p->u2.prototype_cp, new_proto_p);\n\n  /* 10. */\n  return ECMA_VALUE_TRUE;\n}",
  "abstract_func_before": "extern inline ecma_value_t VAR_0\necma_op_ordinary_object_set_prototype_of (ecma_object_t *VAR_1, /* COMMENT_0 */\n                                          ecma_value_t VAR_2) /* COMMENT_1 */\n{\n  JERRY_ASSERT (!ecma_is_lexical_environment (VAR_1));\n  JERRY_ASSERT (!ECMA_OBJECT_IS_PROXY (VAR_1));\n\n  /* COMMENT_2 */\n  JERRY_ASSERT (ecma_is_value_object (VAR_2) || ecma_is_value_null (VAR_2));\n\n  /* COMMENT_3 */\n  ecma_object_t *VAR_3 = ECMA_GET_POINTER (ecma_object_t, ecma_op_ordinary_object_get_prototype_of (VAR_1));\n  ecma_object_t *VAR_4 = ecma_is_value_null (VAR_2) ? NULL : ecma_get_object_from_value (VAR_2);\n\n  /* COMMENT_4 */\n  if (VAR_4 == VAR_3)\n  {\n    return VAR_5;\n  }\n\n  /* COMMENT_5 */\n  if (!ecma_op_ordinary_object_is_extensible (VAR_1))\n  {\n    return VAR_6;\n  }\n\n  /* COMMENT_6 */\n                                                                              \n                                                                          \n                             \n     \n  if (ecma_op_object_is_fast_array (VAR_1))\n  {\n    ecma_fast_array_convert_to_normal (VAR_1);\n  }\n\n  /* COMMENT_11 */\n  ecma_object_t *VAR_7 = VAR_4;\n\n  /* COMMENT_12 */\n  while (true)\n  {\n    /* COMMENT_13 */\n    if (VAR_7 == NULL)\n    {\n      break;\n    }\n\n    /* COMMENT_14 */\n    if (VAR_1 == VAR_7)\n    {\n      return VAR_6;\n    }\n\n    /* COMMENT_15 */\n#if VAR_8\n    if (ECMA_OBJECT_IS_PROXY (VAR_7))\n    {\n      break;\n    }\n#endif /* COMMENT_16 */\n\n    /* COMMENT_17 */\n    VAR_7 = ECMA_GET_POINTER (ecma_object_t, ecma_op_ordinary_object_get_prototype_of (VAR_7));\n  }\n\n  /* COMMENT_18 */\n  ECMA_SET_POINTER (VAR_1->u2.prototype_cp, VAR_4);\n\n  /* COMMENT_19 */\n  return VAR_5;\n}",
  "func_graph_path_before": null,
  "func": "extern inline ecma_value_t JERRY_ATTR_ALWAYS_INLINE\necma_op_ordinary_object_set_prototype_of (ecma_object_t *obj_p, /**< base object */\n                                          ecma_value_t proto) /**< prototype object */\n{\n  JERRY_ASSERT (!ecma_is_lexical_environment (obj_p));\n  JERRY_ASSERT (!ECMA_OBJECT_IS_PROXY (obj_p));\n\n  /* 1. */\n  JERRY_ASSERT (ecma_is_value_object (proto) || ecma_is_value_null (proto));\n\n  /* 3. */\n  ecma_object_t *current_proto_p = ECMA_GET_POINTER (ecma_object_t, ecma_op_ordinary_object_get_prototype_of (obj_p));\n  ecma_object_t *new_proto_p = ecma_is_value_null (proto) ? NULL : ecma_get_object_from_value (proto);\n\n  /* 4. */\n  if (new_proto_p == current_proto_p)\n  {\n    return ECMA_VALUE_TRUE;\n  }\n\n  /* 2 - 5. */\n  if (!ecma_op_ordinary_object_is_extensible (obj_p))\n  {\n    return ECMA_VALUE_FALSE;\n  }\n\n  /**\n   * When the prototype of a fast array changes, it is required to convert the\n   * array to a \"normal\" array. This ensures that all [[Get]]/[[Set]]/etc.\n   * calls works as expected.\n   */\n  if (ecma_op_object_is_fast_array (obj_p))\n  {\n    ecma_fast_array_convert_to_normal (obj_p);\n  }\n\n  /* 6. */\n  ecma_object_t *iter_p = new_proto_p;\n\n  /* 7 - 8. */\n  while (true)\n  {\n    /* 8.a */\n    if (iter_p == NULL)\n    {\n      break;\n    }\n\n    /* 8.b */\n    if (obj_p == iter_p)\n    {\n      return ECMA_VALUE_FALSE;\n    }\n\n    /* 8.c.i */\n#if JERRY_BUILTIN_PROXY\n    if (ECMA_OBJECT_IS_PROXY (iter_p))\n    {\n      /**\n       * Prevent setting 'Object.prototype.__proto__'\n       * to avoid circular referencing in the prototype chain.\n       */\n      if (obj_p == ecma_builtin_get (ECMA_BUILTIN_ID_OBJECT_PROTOTYPE))\n      {\n        return ECMA_VALUE_FALSE;\n      }\n\n      break;\n    }\n#endif /* JERRY_BUILTIN_PROXY */\n\n    /* 8.c.ii */\n    iter_p = ECMA_GET_POINTER (ecma_object_t, ecma_op_ordinary_object_get_prototype_of (iter_p));\n  }\n\n  /* 9. */\n  ECMA_SET_POINTER (obj_p->u2.prototype_cp, new_proto_p);\n\n  /* 10. */\n  return ECMA_VALUE_TRUE;\n}",
  "abstract_func": "extern inline ecma_value_t VAR_0\necma_op_ordinary_object_set_prototype_of (ecma_object_t *VAR_1, /* COMMENT_0 */\n                                          ecma_value_t VAR_2) /* COMMENT_1 */\n{\n  JERRY_ASSERT (!ecma_is_lexical_environment (VAR_1));\n  JERRY_ASSERT (!ECMA_OBJECT_IS_PROXY (VAR_1));\n\n  /* COMMENT_2 */\n  JERRY_ASSERT (ecma_is_value_object (VAR_2) || ecma_is_value_null (VAR_2));\n\n  /* COMMENT_3 */\n  ecma_object_t *VAR_3 = ECMA_GET_POINTER (ecma_object_t, ecma_op_ordinary_object_get_prototype_of (VAR_1));\n  ecma_object_t *VAR_4 = ecma_is_value_null (VAR_2) ? NULL : ecma_get_object_from_value (VAR_2);\n\n  /* COMMENT_4 */\n  if (VAR_4 == VAR_3)\n  {\n    return VAR_5;\n  }\n\n  /* COMMENT_5 */\n  if (!ecma_op_ordinary_object_is_extensible (VAR_1))\n  {\n    return VAR_6;\n  }\n\n  /* COMMENT_6 */\n                                                                              \n                                                                          \n                             \n     \n  if (ecma_op_object_is_fast_array (VAR_1))\n  {\n    ecma_fast_array_convert_to_normal (VAR_1);\n  }\n\n  /* COMMENT_11 */\n  ecma_object_t *VAR_7 = VAR_4;\n\n  /* COMMENT_12 */\n  while (true)\n  {\n    /* COMMENT_13 */\n    if (VAR_7 == NULL)\n    {\n      break;\n    }\n\n    /* COMMENT_14 */\n    if (VAR_1 == VAR_7)\n    {\n      return VAR_6;\n    }\n\n    /* COMMENT_15 */\n#if VAR_8\n    if (ECMA_OBJECT_IS_PROXY (VAR_7))\n    {\n      /* COMMENT_16 */\n                                                     \n                                                              \n         \n      if (VAR_1 == ecma_builtin_get (VAR_9))\n      {\n        return VAR_6;\n      }\n\n      break;\n    }\n#endif /* COMMENT_20 */\n\n    /* COMMENT_21 */\n    VAR_7 = ECMA_GET_POINTER (ecma_object_t, ecma_op_ordinary_object_get_prototype_of (VAR_7));\n  }\n\n  /* COMMENT_22 */\n  ECMA_SET_POINTER (VAR_1->u2.prototype_cp, VAR_4);\n\n  /* COMMENT_23 */\n  return VAR_5;\n}",
  "func_graph_path": null,
  "diff_func": "--- func_before\n+++ func_after\n@@ -56,6 +56,15 @@\n #if JERRY_BUILTIN_PROXY\n     if (ECMA_OBJECT_IS_PROXY (iter_p))\n     {\n+      /**\n+       * Prevent setting 'Object.prototype.__proto__'\n+       * to avoid circular referencing in the prototype chain.\n+       */\n+      if (obj_p == ecma_builtin_get (ECMA_BUILTIN_ID_OBJECT_PROTOTYPE))\n+      {\n+        return ECMA_VALUE_FALSE;\n+      }\n+\n       break;\n     }\n #endif /* JERRY_BUILTIN_PROXY */",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "      /**",
      "       * Prevent setting 'Object.prototype.__proto__'",
      "       * to avoid circular referencing in the prototype chain.",
      "       */",
      "      if (obj_p == ecma_builtin_get (ECMA_BUILTIN_ID_OBJECT_PROTOTYPE))",
      "      {",
      "        return ECMA_VALUE_FALSE;",
      "      }",
      ""
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/jerryscript-project/jerryscript/pull/4961",
  "description": {
    "pr_info": {
      "title": "Ban setting 'Object.prototype.__proto__' as Proxy to prevent circular…",
      "number": 4961
    },
    "comment": [
      "… referencing\r\n\r\nin prototype chain.\r\n\r\nThis patch fixes #4941\r\n\r\nJerryScript-DCO-1.0-Signed-off-by: Martin Negyokru negyokru@inf.u-szeged.hu\r\n"
    ]
  },
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "The patch modifies the way prototype chains handle proxies to prevent circular references, addressing a potential bug. While not explicitly a security fix, it resolves an issue that could lead to memory leaks or application instability. \n\n**Final Classification:** Defect Remediation & Feature Upgrades  \n**Confidence:** 0.9"
}