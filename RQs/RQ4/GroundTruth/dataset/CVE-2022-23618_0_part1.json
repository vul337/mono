{
  "cve_id": "CVE-2022-23618",
  "cwe_ids": [
    "CWE-601"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:P/I:P/A:N",
  "cvss_is_v3": false,
  "repo_name": "xwiki/xwiki-platform",
  "commit_msg": "XWIKI-10309: Check URL domains based on a whitelist (#1592)\n\nIntroduce a new property for listing the trusted domains and API to\r\ncheck an URL against that list and the aliases used in subwikis.\r\n\r\n  * Add new property url.trustedDomains in xwiki.properties\r\n  * Add new API in URLConfiguration to retrieve this configuration value\r\n  * Create a new URLSecurityManager responsible to check if an URL can\r\n    be trusted based on this property and on the subwikis configurations\r\n  * Introduce a new listener to invalidate the cache of\r\n    URLSecurityManager whenever a XWikiServerClass xobject is\r\nadded/updated/deleted\r\n  * Move URL API implementations to URL default module\r\n  * Add a new property url.enableTrustedDomains as a global switch off the\r\n    checks on domains to avoid breaking behaviours on existing instances\r\n  * Add a constant property in URLSecurityManager to be set in\r\n    ExecutionContext to allow temporary switch off the check for\r\nextensions\r\n  * Use both those switches in DefaultURLSecurityManager to prevent\r\n    performing the check when needed",
  "commit_hash": "5251c02080466bf9fb55288f04a37671108f8096",
  "git_url": "https://github.com/xwiki/xwiki-platform/commit/5251c02080466bf9fb55288f04a37671108f8096",
  "file_path": "xwiki-platform-core/xwiki-platform-oldcore/src/main/java/com/xpn/xwiki/web/XWikiServletResponse.java",
  "func_name": "sendRedirect",
  "func_before": "@Override\n    public void sendRedirect(String redirect) throws IOException\n    {\n        if (StringUtils.isBlank(redirect)) {\n            // Nowhere to go to\n            return;\n        }\n        if (StringUtils.containsAny(redirect, '\\r', '\\n')) {\n            LOGGER.warn(\"Possible HTTP Response Splitting attack, attempting to redirect to [{}]\", redirect);\n            return;\n        }\n        this.response.sendRedirect(redirect);\n    }",
  "abstract_func_before": "@Override\n    public void sendRedirect(String VAR_0) throws IOException\n    {\n        if (VAR_1.isBlank(VAR_0)) {\n            /* COMMENT_0 */\n            return;\n        }\n        if (VAR_1.containsAny(VAR_0, '\\r', '\\n')) {\n            VAR_2.warn(\"Possible HTTP Response Splitting attack, attempting to redirect to [{}]\", VAR_0);\n            return;\n        }\n        this.response.sendRedirect(VAR_0);\n    }",
  "func_graph_path_before": "xwiki/xwiki-platform/5251c02080466bf9fb55288f04a37671108f8096/XWikiServletResponse.java/vul/before/0.json",
  "func": "@Override\n    public void sendRedirect(String redirect) throws IOException\n    {\n        if (StringUtils.isBlank(redirect)) {\n            // Nowhere to go to\n            return;\n        }\n        if (StringUtils.containsAny(redirect, '\\r', '\\n')) {\n            LOGGER.warn(\"Possible HTTP Response Splitting attack, attempting to redirect to [{}]\", redirect);\n            return;\n        }\n\n        // check for trusted domains, only if the given location is an absolute URL.\n        if (ABSOLUTE_URL_PATTERN.matcher(redirect).matches()) {\n            if (!getURLSecurityManager().isDomainTrusted(new URL(redirect))) {\n                LOGGER.warn(\n                    \"Possible phishing attack, attempting to redirect to [{}], this request has been blocked. \"\n                        + \"If the request was legitimate, add the domain related to this request in the list \"\n                        + \"of trusted domains in the configuration.\", redirect);\n                return;\n            }\n        }\n        this.response.sendRedirect(redirect);\n    }",
  "abstract_func": "@Override\n    public void sendRedirect(String VAR_0) throws IOException\n    {\n        if (VAR_1.isBlank(VAR_0)) {\n            /* COMMENT_0 */\n            return;\n        }\n        if (VAR_1.containsAny(VAR_0, '\\r', '\\n')) {\n            VAR_2.warn(\"Possible HTTP Response Splitting attack, attempting to redirect to [{}]\", VAR_0);\n            return;\n        }\n\n        /* COMMENT_1 */\n        if (VAR_3.matcher(VAR_0).matches()) {\n            if (!getURLSecurityManager().isDomainTrusted(new URL(VAR_0))) {\n                VAR_2.warn(\n                    \"Possible phishing attack, attempting to redirect to [{}], this request has been blocked. \"\n                        + \"If the request was legitimate, add the domain related to this request in the list \"\n                        + \"of trusted domains in the configuration.\", VAR_0);\n                return;\n            }\n        }\n        this.response.sendRedirect(VAR_0);\n    }",
  "func_graph_path": "xwiki/xwiki-platform/5251c02080466bf9fb55288f04a37671108f8096/XWikiServletResponse.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -9,5 +9,16 @@\n             LOGGER.warn(\"Possible HTTP Response Splitting attack, attempting to redirect to [{}]\", redirect);\n             return;\n         }\n+\n+        // check for trusted domains, only if the given location is an absolute URL.\n+        if (ABSOLUTE_URL_PATTERN.matcher(redirect).matches()) {\n+            if (!getURLSecurityManager().isDomainTrusted(new URL(redirect))) {\n+                LOGGER.warn(\n+                    \"Possible phishing attack, attempting to redirect to [{}], this request has been blocked. \"\n+                        + \"If the request was legitimate, add the domain related to this request in the list \"\n+                        + \"of trusted domains in the configuration.\", redirect);\n+                return;\n+            }\n+        }\n         this.response.sendRedirect(redirect);\n     }",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "",
      "        // check for trusted domains, only if the given location is an absolute URL.",
      "        if (ABSOLUTE_URL_PATTERN.matcher(redirect).matches()) {",
      "            if (!getURLSecurityManager().isDomainTrusted(new URL(redirect))) {",
      "                LOGGER.warn(",
      "                    \"Possible phishing attack, attempting to redirect to [{}], this request has been blocked. \"",
      "                        + \"If the request was legitimate, add the domain related to this request in the list \"",
      "                        + \"of trusted domains in the configuration.\", redirect);",
      "                return;",
      "            }",
      "        }"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/xwiki/xwiki-platform/pull/1592",
  "description": {
    "pr_info": {
      "title": "XWIKI-10309: Check URL domains based on a whitelist",
      "number": 1592
    },
    "comment": [
      "Introduce a new property for listing the trusted domains and API to\r\ncheck an URL against that list and the aliases used in subwikis.\r\n\r\n  * Add new property url.trustedDomains in xwiki.properties\r\n  * Add new API in URLConfiguration to retrieve this configuration value\r\n  * Create a new URLSecurityManager responsible to check if an URL can\r\n    be trusted based on this property and on the subwikis configurations\r\n  * Introduce a new listener to invalidate the cache of\r\n    URLSecurityManager whenever a XWikiServerClass xobject is\r\nadded/updated/deleted\r\n  * Introduce a new xwiki-platform-url-default module to avoid cyclic\r\n    dependencies\r\n  * Use the new URLSecurityManager API in XWikiServletResponse to\r\n    perform a check before doing a redirection. Took inspiration on\r\n@sdumitriu commit for it.",
      "General comment: you introduced a default impl but kept the impl in the url api module. That feels a bit weird to me....",
      "> General comment: you introduced a default impl but kept the impl in the url api module. That feels a bit weird to me....\r\n\r\nI didn't want to pollute the PR with lots of file move, especially since I wasn't sure we all agree on the locations. If we do agree I'll move the impl in the right module. "
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 1.0"
}