{
  "cve_id": "CVE-2023-25558",
  "cwe_ids": [
    "CWE-502"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
  "cvss_is_v3": true,
  "repo_name": "datahub-project/datahub",
  "commit_msg": "fix(pac4j-oidc): add verifier parameter (#6835)\n\n* fix(pac4j-oidc): add verifier parameter",
  "commit_hash": "2a182f484677d056730d6b4e9f0143e67368359f",
  "git_url": "https://github.com/datahub-project/datahub/commit/2a182f484677d056730d6b4e9f0143e67368359f",
  "file_path": "datahub-frontend/app/auth/sso/oidc/custom/CustomOidcAuthenticator.java",
  "func_name": "validate",
  "func_before": "@Override\n  public void validate(final OidcCredentials credentials, final WebContext context) {\n    final AuthorizationCode code = credentials.getCode();\n    // if we have a code\n    if (code != null) {\n      try {\n        final String computedCallbackUrl = client.computeFinalCallbackUrl(context);\n        // Token request\n        final TokenRequest request = createTokenRequest(new AuthorizationCodeGrant(code, new URI(computedCallbackUrl)));\n        HTTPRequest tokenHttpRequest = request.toHTTPRequest();\n        tokenHttpRequest.setConnectTimeout(configuration.getConnectTimeout());\n        tokenHttpRequest.setReadTimeout(configuration.getReadTimeout());\n\n        final HTTPResponse httpResponse = tokenHttpRequest.send();\n        logger.debug(\"Token response: status={}, content={}\", httpResponse.getStatusCode(),\n            httpResponse.getContent());\n\n        final TokenResponse response = OIDCTokenResponseParser.parse(httpResponse);\n        if (response instanceof TokenErrorResponse) {\n          throw new TechnicalException(\"Bad token response, error=\" + ((TokenErrorResponse) response).getErrorObject());\n        }\n        logger.debug(\"Token response successful\");\n        final OIDCTokenResponse tokenSuccessResponse = (OIDCTokenResponse) response;\n\n        // save tokens in credentials\n        final OIDCTokens oidcTokens = tokenSuccessResponse.getOIDCTokens();\n        credentials.setAccessToken(oidcTokens.getAccessToken());\n        credentials.setRefreshToken(oidcTokens.getRefreshToken());\n        credentials.setIdToken(oidcTokens.getIDToken());\n\n      } catch (final URISyntaxException | IOException | ParseException e) {\n        throw new TechnicalException(e);\n      }\n    }\n  }",
  "abstract_func_before": "@Override\n  public void validate(final OidcCredentials VAR_0, final WebContext VAR_1) {\n    final AuthorizationCode VAR_2 = VAR_0.getCode();\n    /* COMMENT_0 */\n    if (VAR_2 != null) {\n      try {\n        final String VAR_3 = VAR_4.computeFinalCallbackUrl(VAR_1);\n        /* COMMENT_1 */\n        final TokenRequest VAR_5 = createTokenRequest(new AuthorizationCodeGrant(VAR_2, new URI(VAR_3)));\n        HTTPRequest VAR_6 = VAR_5.toHTTPRequest();\n        VAR_6.setConnectTimeout(VAR_7.getConnectTimeout());\n        VAR_6.setReadTimeout(VAR_7.getReadTimeout());\n\n        final HTTPResponse VAR_8 = VAR_6.send();\n        VAR_9.debug(\"Token response: status={}, content={}\", VAR_8.getStatusCode(),\n            VAR_8.getContent());\n\n        final TokenResponse VAR_10 = VAR_11.parse(VAR_8);\n        if (VAR_10 instanceof TokenErrorResponse) {\n          throw new TechnicalException(\"Bad token response, error=\" + ((TokenErrorResponse) VAR_10).getErrorObject());\n        }\n        VAR_9.debug(\"Token response successful\");\n        final OIDCTokenResponse VAR_12 = (OIDCTokenResponse) VAR_10;\n\n        /* COMMENT_2 */\n        final OIDCTokens VAR_13 = VAR_12.getOIDCTokens();\n        VAR_0.setAccessToken(VAR_13.getAccessToken());\n        VAR_0.setRefreshToken(VAR_13.getRefreshToken());\n        VAR_0.setIdToken(VAR_13.getIDToken());\n\n      } catch (final URISyntaxException | IOException | ParseException VAR_14) {\n        throw new TechnicalException(VAR_14);\n      }\n    }\n  }",
  "func_graph_path_before": "datahub-project/datahub/2a182f484677d056730d6b4e9f0143e67368359f/CustomOidcAuthenticator.java/vul/before/0.json",
  "func": "@Override\n  public void validate(final OidcCredentials credentials, final WebContext context) {\n    final AuthorizationCode code = credentials.getCode();\n    // if we have a code\n    if (code != null) {\n      try {\n        final String computedCallbackUrl = client.computeFinalCallbackUrl(context);\n        CodeVerifier verifier = (CodeVerifier) configuration.getValueRetriever()\n                .retrieve(client.getCodeVerifierSessionAttributeName(), client, context).orElse(null);\n        // Token request\n        final TokenRequest request = createTokenRequest(new AuthorizationCodeGrant(code, new URI(computedCallbackUrl), verifier));\n        HTTPRequest tokenHttpRequest = request.toHTTPRequest();\n        tokenHttpRequest.setConnectTimeout(configuration.getConnectTimeout());\n        tokenHttpRequest.setReadTimeout(configuration.getReadTimeout());\n\n        final HTTPResponse httpResponse = tokenHttpRequest.send();\n        logger.debug(\"Token response: status={}, content={}\", httpResponse.getStatusCode(),\n            httpResponse.getContent());\n\n        final TokenResponse response = OIDCTokenResponseParser.parse(httpResponse);\n        if (response instanceof TokenErrorResponse) {\n          throw new TechnicalException(\"Bad token response, error=\" + ((TokenErrorResponse) response).getErrorObject());\n        }\n        logger.debug(\"Token response successful\");\n        final OIDCTokenResponse tokenSuccessResponse = (OIDCTokenResponse) response;\n\n        // save tokens in credentials\n        final OIDCTokens oidcTokens = tokenSuccessResponse.getOIDCTokens();\n        credentials.setAccessToken(oidcTokens.getAccessToken());\n        credentials.setRefreshToken(oidcTokens.getRefreshToken());\n        credentials.setIdToken(oidcTokens.getIDToken());\n\n      } catch (final URISyntaxException | IOException | ParseException e) {\n        throw new TechnicalException(e);\n      }\n    }\n  }",
  "abstract_func": "@Override\n  public void validate(final OidcCredentials VAR_0, final WebContext VAR_1) {\n    final AuthorizationCode VAR_2 = VAR_0.getCode();\n    /* COMMENT_0 */\n    if (VAR_2 != null) {\n      try {\n        final String VAR_3 = VAR_4.computeFinalCallbackUrl(VAR_1);\n        CodeVerifier VAR_5 = (CodeVerifier) VAR_6.getValueRetriever()\n                .retrieve(VAR_4.getCodeVerifierSessionAttributeName(), VAR_4, VAR_1).orElse(null);\n        /* COMMENT_1 */\n        final TokenRequest VAR_7 = createTokenRequest(new AuthorizationCodeGrant(VAR_2, new URI(VAR_3), VAR_5));\n        HTTPRequest VAR_8 = VAR_7.toHTTPRequest();\n        VAR_8.setConnectTimeout(VAR_6.getConnectTimeout());\n        VAR_8.setReadTimeout(VAR_6.getReadTimeout());\n\n        final HTTPResponse VAR_9 = VAR_8.send();\n        VAR_10.debug(\"Token response: status={}, content={}\", VAR_9.getStatusCode(),\n            VAR_9.getContent());\n\n        final TokenResponse VAR_11 = VAR_12.parse(VAR_9);\n        if (VAR_11 instanceof TokenErrorResponse) {\n          throw new TechnicalException(\"Bad token response, error=\" + ((TokenErrorResponse) VAR_11).getErrorObject());\n        }\n        VAR_10.debug(\"Token response successful\");\n        final OIDCTokenResponse VAR_13 = (OIDCTokenResponse) VAR_11;\n\n        /* COMMENT_2 */\n        final OIDCTokens VAR_14 = VAR_13.getOIDCTokens();\n        VAR_0.setAccessToken(VAR_14.getAccessToken());\n        VAR_0.setRefreshToken(VAR_14.getRefreshToken());\n        VAR_0.setIdToken(VAR_14.getIDToken());\n\n      } catch (final URISyntaxException | IOException | ParseException VAR_15) {\n        throw new TechnicalException(VAR_15);\n      }\n    }\n  }",
  "func_graph_path": "datahub-project/datahub/2a182f484677d056730d6b4e9f0143e67368359f/CustomOidcAuthenticator.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -5,8 +5,10 @@\n     if (code != null) {\n       try {\n         final String computedCallbackUrl = client.computeFinalCallbackUrl(context);\n+        CodeVerifier verifier = (CodeVerifier) configuration.getValueRetriever()\n+                .retrieve(client.getCodeVerifierSessionAttributeName(), client, context).orElse(null);\n         // Token request\n-        final TokenRequest request = createTokenRequest(new AuthorizationCodeGrant(code, new URI(computedCallbackUrl)));\n+        final TokenRequest request = createTokenRequest(new AuthorizationCodeGrant(code, new URI(computedCallbackUrl), verifier));\n         HTTPRequest tokenHttpRequest = request.toHTTPRequest();\n         tokenHttpRequest.setConnectTimeout(configuration.getConnectTimeout());\n         tokenHttpRequest.setReadTimeout(configuration.getReadTimeout());",
  "diff_line_info": {
    "deleted_lines": [
      "        final TokenRequest request = createTokenRequest(new AuthorizationCodeGrant(code, new URI(computedCallbackUrl)));"
    ],
    "added_lines": [
      "        CodeVerifier verifier = (CodeVerifier) configuration.getValueRetriever()",
      "                .retrieve(client.getCodeVerifierSessionAttributeName(), client, context).orElse(null);",
      "        final TokenRequest request = createTokenRequest(new AuthorizationCodeGrant(code, new URI(computedCallbackUrl), verifier));"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/datahub-project/datahub/pull/6835",
  "description": {
    "pr_info": {
      "title": "fix(pac4j-oidc): add verifier parameter",
      "number": 6835
    },
    "comment": [
      "## Checklist\r\n\r\n- [ ] The PR conforms to DataHub's [Contributing Guideline](https://github.com/datahub-project/datahub/blob/master/docs/CONTRIBUTING.md) (particularly [Commit Message Format](https://github.com/datahub-project/datahub/blob/master/docs/CONTRIBUTING.md#commit-message-format))\r\n- [ ] Links to related issues (if applicable)\r\n- [ ] Tests for the changes have been added/updated (if applicable)\r\n- [ ] Docs related to the changes have been added/updated (if applicable). If a new feature has been added a Usage Guide has been added for the same.\r\n- [ ] For any breaking change/potential downtime/deprecation/big changes an entry has been made in [Updating DataHub](https://github.com/datahub-project/datahub/blob/master/docs/how/updating-datahub.md)\r\n"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 0.95"
}