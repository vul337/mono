{
  "cve_id": "CVE-2021-41168",
  "cwe_ids": [
    "CWE-407"
  ],
  "cvss_vector": "AV:N/AC:L/Au:S/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "reddit/snudown",
  "commit_msg": "Hash-collision denial-of-service vulnerabilities (#87)\n\n* Add case insensitive SipHash implementation\n* Replace ref hash function with SipHash\n* Add label to link_ref struct.\n* Update find_link_ref to compare link labels as well as hashes\n* Update add_link_ref to disallow duplicate entries.\n* cast to char from uint8_t for strncasecmp\n* update README markdown, remove TODO\n* add py2 wheel generation\n* fix: add logic for older glibc not having getrandom, impacting staging\n\nCo-authored-by: Nicolaas <nweidema@usc.edu>",
  "commit_hash": "1ac2c130b210539ee1e5d67a7bac93f9d8007c0e",
  "git_url": "https://github.com/reddit/snudown/commit/1ac2c130b210539ee1e5d67a7bac93f9d8007c0e",
  "file_path": "src/markdown.c",
  "func_name": "sd_markdown_new",
  "func_before": "struct sd_markdown *\nsd_markdown_new(\n\tunsigned int extensions,\n\tsize_t max_nesting,\n\tsize_t max_table_cols,\n\tconst struct sd_callbacks *callbacks,\n\tvoid *opaque)\n{\n\tstruct sd_markdown *md = NULL;\n\n\tassert(max_nesting > 0 && max_table_cols > 0 && callbacks);\n\n\tmd = malloc(sizeof(struct sd_markdown));\n\tif (!md)\n\t\treturn NULL;\n\n\tmemcpy(&md->cb, callbacks, sizeof(struct sd_callbacks));\n\n\tstack_init(&md->work_bufs[BUFFER_BLOCK], 4);\n\tstack_init(&md->work_bufs[BUFFER_SPAN], 8);\n\n\tmemset(md->active_char, 0x0, 256);\n\n\tif (md->cb.emphasis || md->cb.double_emphasis || md->cb.triple_emphasis) {\n\t\tmd->active_char['*'] = MD_CHAR_EMPHASIS;\n\t\tmd->active_char['_'] = MD_CHAR_EMPHASIS;\n\t\tmd->active_char['>'] = MD_CHAR_EMPHASIS;\n\t\tif (extensions & MKDEXT_STRIKETHROUGH)\n\t\t\tmd->active_char['~'] = MD_CHAR_EMPHASIS;\n\t}\n\n\tif (md->cb.codespan)\n\t\tmd->active_char['`'] = MD_CHAR_CODESPAN;\n\n\tif (md->cb.linebreak)\n\t\tmd->active_char['\\n'] = MD_CHAR_LINEBREAK;\n\n\tif (md->cb.image || md->cb.link)\n\t\tmd->active_char['['] = MD_CHAR_LINK;\n\n\tmd->active_char['<'] = MD_CHAR_LANGLE;\n\tmd->active_char['\\\\'] = MD_CHAR_ESCAPE;\n\tmd->active_char['&'] = MD_CHAR_ENTITITY;\n\n\tif (extensions & MKDEXT_AUTOLINK) {\n\t\tif (!(extensions & MKDEXT_NO_EMAIL_AUTOLINK))\n\t\t\tmd->active_char['@'] = MD_CHAR_AUTOLINK_EMAIL;\n\t\tmd->active_char[':'] = MD_CHAR_AUTOLINK_URL;\n\t\tmd->active_char['w'] = MD_CHAR_AUTOLINK_WWW;\n\t\tmd->active_char['/'] = MD_CHAR_AUTOLINK_SUBREDDIT_OR_USERNAME;\n\t}\n\n\tif (extensions & MKDEXT_SUPERSCRIPT)\n\t\tmd->active_char['^'] = MD_CHAR_SUPERSCRIPT;\n\n\t/* Extension data */\n\tmd->ext_flags = extensions;\n\tmd->opaque = opaque;\n\tmd->max_nesting = max_nesting;\n\tmd->max_table_cols = max_table_cols;\n\tmd->in_link_body = 0;\n\n\treturn md;\n}",
  "abstract_func_before": "struct sd_markdown *\nsd_markdown_new(\n\tunsigned int VAR_0,\n\tsize_t VAR_1,\n\tsize_t VAR_2,\n\tconst struct sd_callbacks *VAR_3,\n\tvoid *VAR_4)\n{\n\tstruct sd_markdown *VAR_5 = NULL;\n\n\tassert(VAR_1 > 0 && VAR_2 > 0 && VAR_3);\n\n\tVAR_5 = malloc(sizeof(struct sd_markdown));\n\tif (!VAR_5)\n\t\treturn NULL;\n\n\tmemcpy(&VAR_5->cb, VAR_3, sizeof(struct sd_callbacks));\n\n\tstack_init(&VAR_5->work_bufs[VAR_6], 4);\n\tstack_init(&VAR_5->work_bufs[VAR_7], 8);\n\n\tmemset(VAR_5->active_char, 0x0, 256);\n\n\tif (VAR_5->cb.emphasis || VAR_5->cb.double_emphasis || VAR_5->cb.triple_emphasis) {\n\t\tVAR_5->active_char['*'] = VAR_8;\n\t\tVAR_5->active_char['_'] = VAR_8;\n\t\tVAR_5->active_char['>'] = VAR_8;\n\t\tif (VAR_0 & VAR_9)\n\t\t\tVAR_5->active_char['~'] = VAR_8;\n\t}\n\n\tif (VAR_5->cb.codespan)\n\t\tVAR_5->active_char['`'] = VAR_10;\n\n\tif (VAR_5->cb.linebreak)\n\t\tVAR_5->active_char['\\n'] = VAR_11;\n\n\tif (VAR_5->cb.image || VAR_5->cb.link)\n\t\tVAR_5->active_char['['] = VAR_12;\n\n\tVAR_5->active_char['<'] = VAR_13;\n\tVAR_5->active_char['\\\\'] = VAR_14;\n\tVAR_5->active_char['&'] = VAR_15;\n\n\tif (VAR_0 & VAR_16) {\n\t\tif (!(VAR_0 & VAR_17))\n\t\t\tVAR_5->active_char['@'] = VAR_18;\n\t\tVAR_5->active_char[':'] = VAR_19;\n\t\tVAR_5->active_char['w'] = VAR_20;\n\t\tVAR_5->active_char['/'] = VAR_21;\n\t}\n\n\tif (VAR_0 & VAR_22)\n\t\tVAR_5->active_char['^'] = VAR_23;\n\n\t/* COMMENT_0 */\n\tVAR_5->ext_flags = VAR_0;\n\tVAR_5->opaque = VAR_4;\n\tVAR_5->max_nesting = VAR_1;\n\tVAR_5->max_table_cols = VAR_2;\n\tVAR_5->in_link_body = 0;\n\n\treturn VAR_5;\n}",
  "func_graph_path_before": "reddit/snudown/1ac2c130b210539ee1e5d67a7bac93f9d8007c0e/markdown.c/vul/before/1.json",
  "func": "struct sd_markdown *\nsd_markdown_new(\n\tunsigned int extensions,\n\tsize_t max_nesting,\n\tsize_t max_table_cols,\n\tconst struct sd_callbacks *callbacks,\n\tvoid *opaque)\n{\n\tstruct sd_markdown *md = NULL;\n\n\tassert(max_nesting > 0 && max_table_cols > 0 && callbacks);\n\n\tmd = malloc(sizeof(struct sd_markdown));\n\tif (!md)\n\t\treturn NULL;\n\n\tif (!sip_hash_key_init) {\n\t\tif (getrandom(sip_hash_key, SIP_HASH_KEY_LEN, 0) < SIP_HASH_KEY_LEN)\n\t\t\treturn NULL;\n\t\tsip_hash_key_init = 1;\n\t}\n\n\tmemcpy(&md->cb, callbacks, sizeof(struct sd_callbacks));\n\n\tstack_init(&md->work_bufs[BUFFER_BLOCK], 4);\n\tstack_init(&md->work_bufs[BUFFER_SPAN], 8);\n\n\tmemset(md->active_char, 0x0, 256);\n\n\tif (md->cb.emphasis || md->cb.double_emphasis || md->cb.triple_emphasis) {\n\t\tmd->active_char['*'] = MD_CHAR_EMPHASIS;\n\t\tmd->active_char['_'] = MD_CHAR_EMPHASIS;\n\t\tmd->active_char['>'] = MD_CHAR_EMPHASIS;\n\t\tif (extensions & MKDEXT_STRIKETHROUGH)\n\t\t\tmd->active_char['~'] = MD_CHAR_EMPHASIS;\n\t}\n\n\tif (md->cb.codespan)\n\t\tmd->active_char['`'] = MD_CHAR_CODESPAN;\n\n\tif (md->cb.linebreak)\n\t\tmd->active_char['\\n'] = MD_CHAR_LINEBREAK;\n\n\tif (md->cb.image || md->cb.link)\n\t\tmd->active_char['['] = MD_CHAR_LINK;\n\n\tmd->active_char['<'] = MD_CHAR_LANGLE;\n\tmd->active_char['\\\\'] = MD_CHAR_ESCAPE;\n\tmd->active_char['&'] = MD_CHAR_ENTITITY;\n\n\tif (extensions & MKDEXT_AUTOLINK) {\n\t\tif (!(extensions & MKDEXT_NO_EMAIL_AUTOLINK))\n\t\t\tmd->active_char['@'] = MD_CHAR_AUTOLINK_EMAIL;\n\t\tmd->active_char[':'] = MD_CHAR_AUTOLINK_URL;\n\t\tmd->active_char['w'] = MD_CHAR_AUTOLINK_WWW;\n\t\tmd->active_char['/'] = MD_CHAR_AUTOLINK_SUBREDDIT_OR_USERNAME;\n\t}\n\n\tif (extensions & MKDEXT_SUPERSCRIPT)\n\t\tmd->active_char['^'] = MD_CHAR_SUPERSCRIPT;\n\n\t/* Extension data */\n\tmd->ext_flags = extensions;\n\tmd->opaque = opaque;\n\tmd->max_nesting = max_nesting;\n\tmd->max_table_cols = max_table_cols;\n\tmd->in_link_body = 0;\n\n\treturn md;\n}",
  "abstract_func": "struct sd_markdown *\nsd_markdown_new(\n\tunsigned int VAR_0,\n\tsize_t VAR_1,\n\tsize_t VAR_2,\n\tconst struct sd_callbacks *VAR_3,\n\tvoid *VAR_4)\n{\n\tstruct sd_markdown *VAR_5 = NULL;\n\n\tassert(VAR_1 > 0 && VAR_2 > 0 && VAR_3);\n\n\tVAR_5 = malloc(sizeof(struct sd_markdown));\n\tif (!VAR_5)\n\t\treturn NULL;\n\n\tif (!VAR_6) {\n\t\tif (getrandom(VAR_7, VAR_8, 0) < VAR_8)\n\t\t\treturn NULL;\n\t\tVAR_6 = 1;\n\t}\n\n\tmemcpy(&VAR_5->cb, VAR_3, sizeof(struct sd_callbacks));\n\n\tstack_init(&VAR_5->work_bufs[VAR_9], 4);\n\tstack_init(&VAR_5->work_bufs[VAR_10], 8);\n\n\tmemset(VAR_5->active_char, 0x0, 256);\n\n\tif (VAR_5->cb.emphasis || VAR_5->cb.double_emphasis || VAR_5->cb.triple_emphasis) {\n\t\tVAR_5->active_char['*'] = VAR_11;\n\t\tVAR_5->active_char['_'] = VAR_11;\n\t\tVAR_5->active_char['>'] = VAR_11;\n\t\tif (VAR_0 & VAR_12)\n\t\t\tVAR_5->active_char['~'] = VAR_11;\n\t}\n\n\tif (VAR_5->cb.codespan)\n\t\tVAR_5->active_char['`'] = VAR_13;\n\n\tif (VAR_5->cb.linebreak)\n\t\tVAR_5->active_char['\\n'] = VAR_14;\n\n\tif (VAR_5->cb.image || VAR_5->cb.link)\n\t\tVAR_5->active_char['['] = VAR_15;\n\n\tVAR_5->active_char['<'] = VAR_16;\n\tVAR_5->active_char['\\\\'] = VAR_17;\n\tVAR_5->active_char['&'] = VAR_18;\n\n\tif (VAR_0 & VAR_19) {\n\t\tif (!(VAR_0 & VAR_20))\n\t\t\tVAR_5->active_char['@'] = VAR_21;\n\t\tVAR_5->active_char[':'] = VAR_22;\n\t\tVAR_5->active_char['w'] = VAR_23;\n\t\tVAR_5->active_char['/'] = VAR_24;\n\t}\n\n\tif (VAR_0 & VAR_25)\n\t\tVAR_5->active_char['^'] = VAR_26;\n\n\t/* COMMENT_0 */\n\tVAR_5->ext_flags = VAR_0;\n\tVAR_5->opaque = VAR_4;\n\tVAR_5->max_nesting = VAR_1;\n\tVAR_5->max_table_cols = VAR_2;\n\tVAR_5->in_link_body = 0;\n\n\treturn VAR_5;\n}",
  "func_graph_path": "reddit/snudown/1ac2c130b210539ee1e5d67a7bac93f9d8007c0e/markdown.c/vul/after/1.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -13,6 +13,12 @@\n \tmd = malloc(sizeof(struct sd_markdown));\n \tif (!md)\n \t\treturn NULL;\n+\n+\tif (!sip_hash_key_init) {\n+\t\tif (getrandom(sip_hash_key, SIP_HASH_KEY_LEN, 0) < SIP_HASH_KEY_LEN)\n+\t\t\treturn NULL;\n+\t\tsip_hash_key_init = 1;\n+\t}\n \n \tmemcpy(&md->cb, callbacks, sizeof(struct sd_callbacks));\n ",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "",
      "\tif (!sip_hash_key_init) {",
      "\t\tif (getrandom(sip_hash_key, SIP_HASH_KEY_LEN, 0) < SIP_HASH_KEY_LEN)",
      "\t\t\treturn NULL;",
      "\t\tsip_hash_key_init = 1;",
      "\t}"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/reddit/snudown/pull/88",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/reddit/snudown/pull/88: 403 Client Error: Forbidden for url: https://api.github.com/repos/reddit/snudown/pulls/88",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 0.95"
}