{
  "cve_id": "CVE-2023-49068",
  "cwe_ids": [
    "CWE-200"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
  "cvss_is_v3": true,
  "repo_name": "apache/dolphinscheduler",
  "commit_msg": "fix security issue",
  "commit_hash": "359b1a7e5bb72790d2583971dc2d44a8481e3a10",
  "git_url": "https://github.com/apache/dolphinscheduler/commit/359b1a7e5bb72790d2583971dc2d44a8481e3a10",
  "file_path": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/security/impl/AbstractAuthenticator.java",
  "func_name": "authenticate",
  "func_before": "@Override\n    public Result<Map<String, String>> authenticate(String userId, String password, String extra) {\n        Result<Map<String, String>> result = new Result<>();\n        User user = login(userId, password, extra);\n        if (user == null) {\n            if (Objects.equals(securityConfig.getType(), AuthenticationType.CASDOOR_SSO.name())) {\n                log.error(\"State or code entered incorrectly.\");\n                result.setCode(Status.STATE_CODE_ERROR.getCode());\n                result.setMsg(Status.STATE_CODE_ERROR.getMsg());\n            } else {\n                log.error(\"Username or password entered incorrectly.\");\n                result.setCode(Status.USER_NAME_PASSWD_ERROR.getCode());\n                result.setMsg(Status.USER_NAME_PASSWD_ERROR.getMsg());\n            }\n            return result;\n        }\n\n        // check user state\n        if (user.getState() == Flag.NO.ordinal()) {\n            log.error(\"The current user is deactivated, userName:{}.\", user.getUserName());\n            result.setCode(Status.USER_DISABLED.getCode());\n            result.setMsg(Status.USER_DISABLED.getMsg());\n            return result;\n        }\n\n        // create session\n        String sessionId = sessionService.createSession(user, extra);\n        if (sessionId == null) {\n            log.error(\"Failed to create session, userName:{}.\", user.getUserName());\n            result.setCode(Status.LOGIN_SESSION_FAILED.getCode());\n            result.setMsg(Status.LOGIN_SESSION_FAILED.getMsg());\n            return result;\n        }\n\n        log.info(\"Session is created and sessionId is :{}.\", sessionId);\n\n        Map<String, String> data = new HashMap<>();\n        data.put(Constants.SESSION_ID, sessionId);\n        data.put(Constants.SECURITY_CONFIG_TYPE, securityConfig.getType());\n\n        result.setData(data);\n        result.setCode(Status.SUCCESS.getCode());\n        result.setMsg(Status.LOGIN_SUCCESS.getMsg());\n        return result;\n    }",
  "abstract_func_before": "@Override\n    public Result<Map<String, String>> authenticate(String VAR_0, String VAR_1, String VAR_2) {\n        Result<Map<String, String>> VAR_3 = new Result<>();\n        User VAR_4 = login(VAR_0, VAR_1, VAR_2);\n        if (VAR_4 == null) {\n            if (VAR_5.equals(VAR_6.getType(), VAR_7.CASDOOR_SSO.name())) {\n                VAR_8.error(\"State or code entered incorrectly.\");\n                VAR_3.setCode(VAR_9.STATE_CODE_ERROR.getCode());\n                VAR_3.setMsg(VAR_9.STATE_CODE_ERROR.getMsg());\n            } else {\n                VAR_8.error(\"Username or password entered incorrectly.\");\n                VAR_3.setCode(VAR_9.USER_NAME_PASSWD_ERROR.getCode());\n                VAR_3.setMsg(VAR_9.USER_NAME_PASSWD_ERROR.getMsg());\n            }\n            return VAR_3;\n        }\n\n        /* COMMENT_0 */\n        if (VAR_4.getState() == VAR_10.NO.ordinal()) {\n            VAR_8.error(\"The current user is deactivated, userName:{}.\", VAR_4.getUserName());\n            VAR_3.setCode(VAR_9.USER_DISABLED.getCode());\n            VAR_3.setMsg(VAR_9.USER_DISABLED.getMsg());\n            return VAR_3;\n        }\n\n        /* COMMENT_1 */\n        String VAR_11 = VAR_12.createSession(VAR_4, VAR_2);\n        if (VAR_11 == null) {\n            VAR_8.error(\"Failed to create session, userName:{}.\", VAR_4.getUserName());\n            VAR_3.setCode(VAR_9.LOGIN_SESSION_FAILED.getCode());\n            VAR_3.setMsg(VAR_9.LOGIN_SESSION_FAILED.getMsg());\n            return VAR_3;\n        }\n\n        VAR_8.info(\"Session is created and sessionId is :{}.\", VAR_11);\n\n        Map<String, String> VAR_13 = new HashMap<>();\n        VAR_13.put(VAR_14.SESSION_ID, VAR_11);\n        VAR_13.put(VAR_14.SECURITY_CONFIG_TYPE, VAR_6.getType());\n\n        VAR_3.setData(VAR_13);\n        VAR_3.setCode(VAR_9.SUCCESS.getCode());\n        VAR_3.setMsg(VAR_9.LOGIN_SUCCESS.getMsg());\n        return VAR_3;\n    }",
  "func_graph_path_before": "apache/dolphinscheduler/359b1a7e5bb72790d2583971dc2d44a8481e3a10/AbstractAuthenticator.java/vul/before/0.json",
  "func": "@Override\n    public Result<Map<String, String>> authenticate(String userId, String password, String extra) {\n        Result<Map<String, String>> result = new Result<>();\n        User user = login(userId, password, extra);\n        if (user == null) {\n            if (Objects.equals(securityConfig.getType(), AuthenticationType.CASDOOR_SSO.name())) {\n                log.error(\"State or code entered incorrectly.\");\n                result.setCode(Status.STATE_CODE_ERROR.getCode());\n                result.setMsg(Status.STATE_CODE_ERROR.getMsg());\n            } else {\n                log.error(\"Username or password entered incorrectly.\");\n                result.setCode(Status.USER_NAME_PASSWD_ERROR.getCode());\n                result.setMsg(Status.USER_NAME_PASSWD_ERROR.getMsg());\n            }\n            return result;\n        }\n\n        // check user state\n        if (user.getState() == Flag.NO.ordinal()) {\n            log.error(\"The current user is deactivated, userName:{}.\", user.getUserName());\n            result.setCode(Status.USER_DISABLED.getCode());\n            result.setMsg(Status.USER_DISABLED.getMsg());\n            return result;\n        }\n\n        // create session\n        String sessionId = sessionService.createSession(user, extra);\n        if (sessionId == null) {\n            log.error(\"Failed to create session, userName:{}.\", user.getUserName());\n            result.setCode(Status.LOGIN_SESSION_FAILED.getCode());\n            result.setMsg(Status.LOGIN_SESSION_FAILED.getMsg());\n            return result;\n        }\n\n        log.info(\"Session is created, userName:{}.\", user.getUserName());\n\n        Map<String, String> data = new HashMap<>();\n        data.put(Constants.SESSION_ID, sessionId);\n        data.put(Constants.SECURITY_CONFIG_TYPE, securityConfig.getType());\n\n        result.setData(data);\n        result.setCode(Status.SUCCESS.getCode());\n        result.setMsg(Status.LOGIN_SUCCESS.getMsg());\n        return result;\n    }",
  "abstract_func": "@Override\n    public Result<Map<String, String>> authenticate(String VAR_0, String VAR_1, String VAR_2) {\n        Result<Map<String, String>> VAR_3 = new Result<>();\n        User VAR_4 = login(VAR_0, VAR_1, VAR_2);\n        if (VAR_4 == null) {\n            if (VAR_5.equals(VAR_6.getType(), VAR_7.CASDOOR_SSO.name())) {\n                VAR_8.error(\"State or code entered incorrectly.\");\n                VAR_3.setCode(VAR_9.STATE_CODE_ERROR.getCode());\n                VAR_3.setMsg(VAR_9.STATE_CODE_ERROR.getMsg());\n            } else {\n                VAR_8.error(\"Username or password entered incorrectly.\");\n                VAR_3.setCode(VAR_9.USER_NAME_PASSWD_ERROR.getCode());\n                VAR_3.setMsg(VAR_9.USER_NAME_PASSWD_ERROR.getMsg());\n            }\n            return VAR_3;\n        }\n\n        /* COMMENT_0 */\n        if (VAR_4.getState() == VAR_10.NO.ordinal()) {\n            VAR_8.error(\"The current user is deactivated, userName:{}.\", VAR_4.getUserName());\n            VAR_3.setCode(VAR_9.USER_DISABLED.getCode());\n            VAR_3.setMsg(VAR_9.USER_DISABLED.getMsg());\n            return VAR_3;\n        }\n\n        /* COMMENT_1 */\n        String VAR_11 = VAR_12.createSession(VAR_4, VAR_2);\n        if (VAR_11 == null) {\n            VAR_8.error(\"Failed to create session, userName:{}.\", VAR_4.getUserName());\n            VAR_3.setCode(VAR_9.LOGIN_SESSION_FAILED.getCode());\n            VAR_3.setMsg(VAR_9.LOGIN_SESSION_FAILED.getMsg());\n            return VAR_3;\n        }\n\n        VAR_8.info(\"Session is created, userName:{}.\", VAR_4.getUserName());\n\n        Map<String, String> VAR_13 = new HashMap<>();\n        VAR_13.put(VAR_14.SESSION_ID, VAR_11);\n        VAR_13.put(VAR_14.SECURITY_CONFIG_TYPE, VAR_6.getType());\n\n        VAR_3.setData(VAR_13);\n        VAR_3.setCode(VAR_9.SUCCESS.getCode());\n        VAR_3.setMsg(VAR_9.LOGIN_SUCCESS.getMsg());\n        return VAR_3;\n    }",
  "func_graph_path": "apache/dolphinscheduler/359b1a7e5bb72790d2583971dc2d44a8481e3a10/AbstractAuthenticator.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -32,7 +32,7 @@\n             return result;\n         }\n \n-        log.info(\"Session is created and sessionId is :{}.\", sessionId);\n+        log.info(\"Session is created, userName:{}.\", user.getUserName());\n \n         Map<String, String> data = new HashMap<>();\n         data.put(Constants.SESSION_ID, sessionId);",
  "diff_line_info": {
    "deleted_lines": [
      "        log.info(\"Session is created and sessionId is :{}.\", sessionId);"
    ],
    "added_lines": [
      "        log.info(\"Session is created, userName:{}.\", user.getUserName());"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/apache/dolphinscheduler/pull/15192",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/apache/dolphinscheduler/pull/15192: 403 Client Error: Forbidden for url: https://api.github.com/repos/apache/dolphinscheduler/pulls/15192",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.8,
  "Bug Filter Response": "The commit message indicates a security fix, which is supported by the code change that replaces logging a sensitive sessionId with a username, mitigating potential exposure.\n\n**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.8"
}