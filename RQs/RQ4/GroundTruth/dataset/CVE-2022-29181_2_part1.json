{
  "cve_id": "CVE-2022-29181",
  "cwe_ids": [
    "CWE-241"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "sparklemotion/nokogiri",
  "commit_msg": "fix: {HTML4,XML}::SAX::{Parser,ParserContext} check arg types\n\nPreviously, arguments of the wrong type might cause segfault on CRuby.",
  "commit_hash": "db05ba9a1bd4b90aa6c76742cf6102a7c7297267",
  "git_url": "https://github.com/sparklemotion/nokogiri/commit/db05ba9a1bd4b90aa6c76742cf6102a7c7297267",
  "file_path": "ext/nokogiri/xml_sax_parser_context.c",
  "func_name": "noko_init_xml_sax_parser_context",
  "func_before": "void\nnoko_init_xml_sax_parser_context()\n{\n  cNokogiriXmlSaxParserContext = rb_define_class_under(mNokogiriXmlSax, \"ParserContext\", rb_cObject);\n\n  rb_undef_alloc_func(cNokogiriXmlSaxParserContext);\n\n  rb_define_singleton_method(cNokogiriXmlSaxParserContext, \"io\", parse_io, 2);\n  rb_define_singleton_method(cNokogiriXmlSaxParserContext, \"memory\", parse_memory, 1);\n  rb_define_singleton_method(cNokogiriXmlSaxParserContext, \"file\", parse_file, 1);\n\n  rb_define_method(cNokogiriXmlSaxParserContext, \"parse_with\", parse_with, 1);\n  rb_define_method(cNokogiriXmlSaxParserContext, \"replace_entities=\", set_replace_entities, 1);\n  rb_define_method(cNokogiriXmlSaxParserContext, \"replace_entities\", get_replace_entities, 0);\n  rb_define_method(cNokogiriXmlSaxParserContext, \"recovery=\", set_recovery, 1);\n  rb_define_method(cNokogiriXmlSaxParserContext, \"recovery\", get_recovery, 0);\n  rb_define_method(cNokogiriXmlSaxParserContext, \"line\", line, 0);\n  rb_define_method(cNokogiriXmlSaxParserContext, \"column\", column, 0);\n}",
  "abstract_func_before": "void\nnoko_init_xml_sax_parser_context()\n{\n  VAR_0 = rb_define_class_under(VAR_1, \"ParserContext\", VAR_2);\n\n  rb_undef_alloc_func(VAR_0);\n\n  rb_define_singleton_method(VAR_0, \"io\", VAR_3, 2);\n  rb_define_singleton_method(VAR_0, \"memory\", VAR_4, 1);\n  rb_define_singleton_method(VAR_0, \"file\", VAR_5, 1);\n\n  rb_define_method(VAR_0, \"parse_with\", VAR_6, 1);\n  rb_define_method(VAR_0, \"replace_entities=\", VAR_7, 1);\n  rb_define_method(VAR_0, \"replace_entities\", VAR_8, 0);\n  rb_define_method(VAR_0, \"recovery=\", VAR_9, 1);\n  rb_define_method(VAR_0, \"recovery\", VAR_10, 0);\n  rb_define_method(VAR_0, \"line\", VAR_11, 0);\n  rb_define_method(VAR_0, \"column\", VAR_12, 0);\n}",
  "func_graph_path_before": "sparklemotion/nokogiri/db05ba9a1bd4b90aa6c76742cf6102a7c7297267/xml_sax_parser_context.c/vul/before/2.json",
  "func": "void\nnoko_init_xml_sax_parser_context()\n{\n  cNokogiriXmlSaxParserContext = rb_define_class_under(mNokogiriXmlSax, \"ParserContext\", rb_cObject);\n\n  rb_undef_alloc_func(cNokogiriXmlSaxParserContext);\n\n  rb_define_singleton_method(cNokogiriXmlSaxParserContext, \"io\", parse_io, 2);\n  rb_define_singleton_method(cNokogiriXmlSaxParserContext, \"memory\", parse_memory, 1);\n  rb_define_singleton_method(cNokogiriXmlSaxParserContext, \"file\", parse_file, 1);\n\n  rb_define_method(cNokogiriXmlSaxParserContext, \"parse_with\", parse_with, 1);\n  rb_define_method(cNokogiriXmlSaxParserContext, \"replace_entities=\", set_replace_entities, 1);\n  rb_define_method(cNokogiriXmlSaxParserContext, \"replace_entities\", get_replace_entities, 0);\n  rb_define_method(cNokogiriXmlSaxParserContext, \"recovery=\", set_recovery, 1);\n  rb_define_method(cNokogiriXmlSaxParserContext, \"recovery\", get_recovery, 0);\n  rb_define_method(cNokogiriXmlSaxParserContext, \"line\", line, 0);\n  rb_define_method(cNokogiriXmlSaxParserContext, \"column\", column, 0);\n\n  id_read = rb_intern(\"read\");\n}",
  "abstract_func": "void\nnoko_init_xml_sax_parser_context()\n{\n  VAR_0 = rb_define_class_under(VAR_1, \"ParserContext\", VAR_2);\n\n  rb_undef_alloc_func(VAR_0);\n\n  rb_define_singleton_method(VAR_0, \"io\", VAR_3, 2);\n  rb_define_singleton_method(VAR_0, \"memory\", VAR_4, 1);\n  rb_define_singleton_method(VAR_0, \"file\", VAR_5, 1);\n\n  rb_define_method(VAR_0, \"parse_with\", VAR_6, 1);\n  rb_define_method(VAR_0, \"replace_entities=\", VAR_7, 1);\n  rb_define_method(VAR_0, \"replace_entities\", VAR_8, 0);\n  rb_define_method(VAR_0, \"recovery=\", VAR_9, 1);\n  rb_define_method(VAR_0, \"recovery\", VAR_10, 0);\n  rb_define_method(VAR_0, \"line\", VAR_11, 0);\n  rb_define_method(VAR_0, \"column\", VAR_12, 0);\n\n  VAR_13 = rb_intern(\"read\");\n}",
  "func_graph_path": "sparklemotion/nokogiri/db05ba9a1bd4b90aa6c76742cf6102a7c7297267/xml_sax_parser_context.c/vul/after/2.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -16,4 +16,6 @@\n   rb_define_method(cNokogiriXmlSaxParserContext, \"recovery\", get_recovery, 0);\n   rb_define_method(cNokogiriXmlSaxParserContext, \"line\", line, 0);\n   rb_define_method(cNokogiriXmlSaxParserContext, \"column\", column, 0);\n+\n+  id_read = rb_intern(\"read\");\n }",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "",
      "  id_read = rb_intern(\"read\");"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/sparklemotion/nokogiri/pull/2529",
  "description": {
    "pr_info": {
      "title": "SAX::Parser constructors check types",
      "number": 2529
    },
    "comment": [
      "**What problem is this PR intended to solve?**\r\n\r\nHTML4::SAX::Parser, HTML4::SAX::ParserContext, XML::SAX::Parser, and XML::SAX::ParserContext now properly check the types of the arguments to their various constructor methods.\r\n\r\nPreviously, passing arguments of unexpected types might cause a segfault or other less-obvious exceptions.\r\n\r\n**Have you included adequate test coverage?**\r\n\r\nYes! Added test coverage for these cases.\r\n\r\n\r\n**Does this change affect the behavior of either the C or the Java implementations?**\r\n\r\nBoth the C and Java implementations have been updated to behave identically in this circumstance."
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.9\n\n**Step-by-Step Explanation:**\n\n1. **Input Analysis:**\n   - The commit message indicates a fix related to argument type checking in specific parser classes (HTML4::SAX::Parser, etc.), preventing segfaults.\n   - The vulnerability description confirms this, stating that incorrect argument types could cause segfaults or exceptions.\n   - The code diff shows adding type checking in the parser initialization.\n\n2. **Consistency Check:**\n   - The commit message aligns with the code changes; both discuss adding argument type checks.\n\n3. **Purpose Evaluation:**\n   - The changes modify core logic by adding type validation, preventing crashes.\n\n4. **Security Assessment:**\n   - The fix addresses a type-related bug that could lead to segfaults, a security concern as it could be exploited.\n\n5. **Confidence:**\n   - High confidence (0.9) due to clear alignment between the problem description and code fix, even without a CVE citation."
}