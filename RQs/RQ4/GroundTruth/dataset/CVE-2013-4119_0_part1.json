{
  "cve_id": "CVE-2013-4119",
  "cwe_ids": [
    "CWE-476"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "FreeRDP",
  "commit_msg": "nla: invalidate sec handle after creation\n\nIf sec pointer isn't invalidated after creation it is not possible\nto check if the upper and lower pointers are valid.\n\nThis fixes a segfault in the server part if the client disconnects before\nthe authentication was finished.",
  "commit_hash": "0773bb9303d24473fe1185d85a424dfe159aff53",
  "git_url": "https://github.com/FreeRDP/FreeRDP/commit/0773bb9303d24473fe1185d85a424dfe159aff53",
  "file_path": "libfreerdp/core/nla.c",
  "func_name": "credssp_new",
  "func_before": "rdpCredssp* credssp_new(freerdp* instance, rdpTransport* transport, rdpSettings* settings)\n{\n\trdpCredssp* credssp;\n\n\tcredssp = (rdpCredssp*) malloc(sizeof(rdpCredssp));\n\tZeroMemory(credssp, sizeof(rdpCredssp));\n\n\tif (credssp != NULL)\n\t{\n\t\tHKEY hKey;\n\t\tLONG status;\n\t\tDWORD dwType;\n\t\tDWORD dwSize;\n\n\t\tcredssp->instance = instance;\n\t\tcredssp->settings = settings;\n\t\tcredssp->server = settings->ServerMode;\n\t\tcredssp->transport = transport;\n\t\tcredssp->send_seq_num = 0;\n\t\tcredssp->recv_seq_num = 0;\n\t\tZeroMemory(&credssp->negoToken, sizeof(SecBuffer));\n\t\tZeroMemory(&credssp->pubKeyAuth, sizeof(SecBuffer));\n\t\tZeroMemory(&credssp->authInfo, sizeof(SecBuffer));\n\n\t\tif (credssp->server)\n\t\t{\n\t\t\tstatus = RegOpenKeyEx(HKEY_LOCAL_MACHINE, _T(\"Software\\\\FreeRDP\\\\Server\"),\n\t\t\t\t\t0, KEY_READ | KEY_WOW64_64KEY, &hKey);\n\n\t\t\tif (status == ERROR_SUCCESS)\n\t\t\t{\n\t\t\t\tstatus = RegQueryValueEx(hKey, _T(\"SspiModule\"), NULL, &dwType, NULL, &dwSize);\n\n\t\t\t\tif (status == ERROR_SUCCESS)\n\t\t\t\t{\n\t\t\t\t\tcredssp->SspiModule = (LPTSTR) malloc(dwSize + sizeof(TCHAR));\n\n\t\t\t\t\tstatus = RegQueryValueEx(hKey, _T(\"SspiModule\"), NULL, &dwType,\n\t\t\t\t\t\t\t(BYTE*) credssp->SspiModule, &dwSize);\n\n\t\t\t\t\tif (status == ERROR_SUCCESS)\n\t\t\t\t\t{\n\t\t\t\t\t\t_tprintf(_T(\"Using SSPI Module: %s\\n\"), credssp->SspiModule);\n\t\t\t\t\t\tRegCloseKey(hKey);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn credssp;\n}",
  "abstract_func_before": "rdpCredssp* credssp_new(freerdp* VAR_0, rdpTransport* VAR_1, rdpSettings* VAR_2)\n{\n\trdpCredssp* VAR_3;\n\n\tVAR_3 = (rdpCredssp*) malloc(sizeof(rdpCredssp));\n\tZeroMemory(VAR_3, sizeof(rdpCredssp));\n\n\tif (VAR_3 != NULL)\n\t{\n\t\tHKEY VAR_4;\n\t\tLONG VAR_5;\n\t\tDWORD VAR_6;\n\t\tDWORD VAR_7;\n\n\t\tVAR_3->instance = VAR_0;\n\t\tVAR_3->settings = VAR_2;\n\t\tVAR_3->server = VAR_2->ServerMode;\n\t\tVAR_3->transport = VAR_1;\n\t\tVAR_3->send_seq_num = 0;\n\t\tVAR_3->recv_seq_num = 0;\n\t\tZeroMemory(&VAR_3->negoToken, sizeof(VAR_8));\n\t\tZeroMemory(&VAR_3->pubKeyAuth, sizeof(VAR_8));\n\t\tZeroMemory(&VAR_3->authInfo, sizeof(VAR_8));\n\n\t\tif (VAR_3->server)\n\t\t{\n\t\t\tVAR_5 = RegOpenKeyEx(VAR_9, _T(\"Software\\\\FreeRDP\\\\Server\"),\n\t\t\t\t\t0, VAR_10 | VAR_11, &VAR_4);\n\n\t\t\tif (VAR_5 == VAR_12)\n\t\t\t{\n\t\t\t\tVAR_5 = RegQueryValueEx(VAR_4, _T(\"SspiModule\"), NULL, &VAR_6, NULL, &VAR_7);\n\n\t\t\t\tif (VAR_5 == VAR_12)\n\t\t\t\t{\n\t\t\t\t\tVAR_3->SspiModule = (LPTSTR) malloc(VAR_7 + sizeof(VAR_13));\n\n\t\t\t\t\tVAR_5 = RegQueryValueEx(VAR_4, _T(\"SspiModule\"), NULL, &VAR_6,\n\t\t\t\t\t\t\t(BYTE*) VAR_3->SspiModule, &VAR_7);\n\n\t\t\t\t\tif (VAR_5 == VAR_12)\n\t\t\t\t\t{\n\t\t\t\t\t\t_tprintf(_T(\"Using SSPI Module: %s\\n\"), VAR_3->SspiModule);\n\t\t\t\t\t\tRegCloseKey(VAR_4);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn VAR_3;\n}",
  "func_graph_path_before": "FreeRDP/0773bb9303d24473fe1185d85a424dfe159aff53/nla.c/vul/before/0.json",
  "func": "rdpCredssp* credssp_new(freerdp* instance, rdpTransport* transport, rdpSettings* settings)\n{\n\trdpCredssp* credssp;\n\n\tcredssp = (rdpCredssp*) malloc(sizeof(rdpCredssp));\n\tZeroMemory(credssp, sizeof(rdpCredssp));\n\n\tif (credssp != NULL)\n\t{\n\t\tHKEY hKey;\n\t\tLONG status;\n\t\tDWORD dwType;\n\t\tDWORD dwSize;\n\n\t\tcredssp->instance = instance;\n\t\tcredssp->settings = settings;\n\t\tcredssp->server = settings->ServerMode;\n\t\tcredssp->transport = transport;\n\t\tcredssp->send_seq_num = 0;\n\t\tcredssp->recv_seq_num = 0;\n\t\tZeroMemory(&credssp->negoToken, sizeof(SecBuffer));\n\t\tZeroMemory(&credssp->pubKeyAuth, sizeof(SecBuffer));\n\t\tZeroMemory(&credssp->authInfo, sizeof(SecBuffer));\n\t\tSecInvalidateHandle(&credssp->context);\n\n\t\tif (credssp->server)\n\t\t{\n\t\t\tstatus = RegOpenKeyEx(HKEY_LOCAL_MACHINE, _T(\"Software\\\\FreeRDP\\\\Server\"),\n\t\t\t\t\t0, KEY_READ | KEY_WOW64_64KEY, &hKey);\n\n\t\t\tif (status == ERROR_SUCCESS)\n\t\t\t{\n\t\t\t\tstatus = RegQueryValueEx(hKey, _T(\"SspiModule\"), NULL, &dwType, NULL, &dwSize);\n\n\t\t\t\tif (status == ERROR_SUCCESS)\n\t\t\t\t{\n\t\t\t\t\tcredssp->SspiModule = (LPTSTR) malloc(dwSize + sizeof(TCHAR));\n\n\t\t\t\t\tstatus = RegQueryValueEx(hKey, _T(\"SspiModule\"), NULL, &dwType,\n\t\t\t\t\t\t\t(BYTE*) credssp->SspiModule, &dwSize);\n\n\t\t\t\t\tif (status == ERROR_SUCCESS)\n\t\t\t\t\t{\n\t\t\t\t\t\t_tprintf(_T(\"Using SSPI Module: %s\\n\"), credssp->SspiModule);\n\t\t\t\t\t\tRegCloseKey(hKey);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn credssp;\n}",
  "abstract_func": "rdpCredssp* credssp_new(freerdp* VAR_0, rdpTransport* VAR_1, rdpSettings* VAR_2)\n{\n\trdpCredssp* VAR_3;\n\n\tVAR_3 = (rdpCredssp*) malloc(sizeof(rdpCredssp));\n\tZeroMemory(VAR_3, sizeof(rdpCredssp));\n\n\tif (VAR_3 != NULL)\n\t{\n\t\tHKEY VAR_4;\n\t\tLONG VAR_5;\n\t\tDWORD VAR_6;\n\t\tDWORD VAR_7;\n\n\t\tVAR_3->instance = VAR_0;\n\t\tVAR_3->settings = VAR_2;\n\t\tVAR_3->server = VAR_2->ServerMode;\n\t\tVAR_3->transport = VAR_1;\n\t\tVAR_3->send_seq_num = 0;\n\t\tVAR_3->recv_seq_num = 0;\n\t\tZeroMemory(&VAR_3->negoToken, sizeof(VAR_8));\n\t\tZeroMemory(&VAR_3->pubKeyAuth, sizeof(VAR_8));\n\t\tZeroMemory(&VAR_3->authInfo, sizeof(VAR_8));\n\t\tSecInvalidateHandle(&VAR_3->context);\n\n\t\tif (VAR_3->server)\n\t\t{\n\t\t\tVAR_5 = RegOpenKeyEx(VAR_9, _T(\"Software\\\\FreeRDP\\\\Server\"),\n\t\t\t\t\t0, VAR_10 | VAR_11, &VAR_4);\n\n\t\t\tif (VAR_5 == VAR_12)\n\t\t\t{\n\t\t\t\tVAR_5 = RegQueryValueEx(VAR_4, _T(\"SspiModule\"), NULL, &VAR_6, NULL, &VAR_7);\n\n\t\t\t\tif (VAR_5 == VAR_12)\n\t\t\t\t{\n\t\t\t\t\tVAR_3->SspiModule = (LPTSTR) malloc(VAR_7 + sizeof(VAR_13));\n\n\t\t\t\t\tVAR_5 = RegQueryValueEx(VAR_4, _T(\"SspiModule\"), NULL, &VAR_6,\n\t\t\t\t\t\t\t(BYTE*) VAR_3->SspiModule, &VAR_7);\n\n\t\t\t\t\tif (VAR_5 == VAR_12)\n\t\t\t\t\t{\n\t\t\t\t\t\t_tprintf(_T(\"Using SSPI Module: %s\\n\"), VAR_3->SspiModule);\n\t\t\t\t\t\tRegCloseKey(VAR_4);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn VAR_3;\n}",
  "func_graph_path": "FreeRDP/0773bb9303d24473fe1185d85a424dfe159aff53/nla.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -21,6 +21,7 @@\n \t\tZeroMemory(&credssp->negoToken, sizeof(SecBuffer));\n \t\tZeroMemory(&credssp->pubKeyAuth, sizeof(SecBuffer));\n \t\tZeroMemory(&credssp->authInfo, sizeof(SecBuffer));\n+\t\tSecInvalidateHandle(&credssp->context);\n \n \t\tif (credssp->server)\n \t\t{",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "\t\tSecInvalidateHandle(&credssp->context);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/FreeRDP/FreeRDP/pull/1330",
  "description": {
    "pr_info": {
      "title": "Misc fixes",
      "number": 1330
    },
    "comment": [
      "- updated certificate mismatch messages properly fixes #1043\n- fixed a server side segfault if client disconnects before authentication was finished\n",
      "Test PASSed.\nRefer to this link for build results: https://ci.freerdp.com/job/Github%20pull%20request%20tester/140/\n"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 1.0"
}