{
  "cve_id": "CVE-2023-49299",
  "cwe_ids": [
    "CWE-20"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
  "cvss_is_v3": true,
  "repo_name": "apache/dolphinscheduler",
  "commit_msg": "fix switch condition",
  "commit_hash": "d1ef54f6a851e64525f1078887520394e553b6e8",
  "git_url": "https://github.com/apache/dolphinscheduler/commit/d1ef54f6a851e64525f1078887520394e553b6e8",
  "file_path": "dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/runner/task/switchtask/SwitchLogicTask.java",
  "func_name": "calculateConditionResult",
  "func_before": "private DependResult calculateConditionResult() {\n        DependResult conditionResult = DependResult.SUCCESS;\n\n        List<SwitchResultVo> switchResultVos = taskParameters.getDependTaskList();\n\n        SwitchResultVo switchResultVo = new SwitchResultVo();\n        switchResultVo.setNextNode(taskParameters.getNextNode());\n        switchResultVos.add(switchResultVo);\n        // todo: refactor these calculate code\n        int finalConditionLocation = switchResultVos.size() - 1;\n        int i = 0;\n        for (SwitchResultVo info : switchResultVos) {\n            log.info(\"Begin to execute {} condition: {} \", (i + 1), info.getCondition());\n            if (StringUtils.isEmpty(info.getCondition())) {\n                finalConditionLocation = i;\n                break;\n            }\n            String content = setTaskParams(info.getCondition().replaceAll(\"'\", \"\\\"\"), rgex);\n            log.info(\"Format condition sentence::{} successfully\", content);\n            Boolean result;\n            try {\n                result = SwitchTaskUtils.evaluate(content);\n                log.info(\"Execute condition sentence: {} successfully: {}\", content, result);\n            } catch (Exception e) {\n                log.info(\"Execute condition sentence: {} failed\", content, e);\n                conditionResult = DependResult.FAILED;\n                break;\n            }\n            if (result) {\n                finalConditionLocation = i;\n                break;\n            }\n            i++;\n        }\n        taskParameters.setDependTaskList(switchResultVos);\n        taskParameters.setResultConditionLocation(finalConditionLocation);\n        taskInstance.setSwitchDependency(taskParameters);\n\n        if (!isValidSwitchResult(switchResultVos.get(finalConditionLocation))) {\n            conditionResult = DependResult.FAILED;\n            log.error(\"The switch task depend result is invalid, result:{}, switch branch:{}\", conditionResult,\n                    finalConditionLocation);\n        }\n\n        log.info(\"The switch task depend result:{}, switch branch:{}\", conditionResult, finalConditionLocation);\n        return conditionResult;\n    }",
  "abstract_func_before": "private DependResult calculateConditionResult() {\n        DependResult VAR_0 = VAR_1.SUCCESS;\n\n        List<SwitchResultVo> VAR_2 = VAR_3.getDependTaskList();\n\n        SwitchResultVo VAR_4 = new SwitchResultVo();\n        VAR_4.setNextNode(VAR_3.getNextNode());\n        VAR_2.add(VAR_4);\n        /* COMMENT_0 */\n        int VAR_5 = VAR_2.size() - 1;\n        int VAR_6 = 0;\n        for (SwitchResultVo VAR_7 : VAR_2) {\n            VAR_8.info(\"Begin to execute {} condition: {} \", (VAR_6 + 1), VAR_7.getCondition());\n            if (VAR_9.isEmpty(VAR_7.getCondition())) {\n                VAR_5 = VAR_6;\n                break;\n            }\n            String VAR_10 = setTaskParams(VAR_7.getCondition().replaceAll(\"'\", \"\\\"\"), VAR_11);\n            VAR_8.info(\"Format condition sentence::{} successfully\", VAR_10);\n            Boolean VAR_12;\n            try {\n                VAR_12 = VAR_13.evaluate(VAR_10);\n                VAR_8.info(\"Execute condition sentence: {} successfully: {}\", VAR_10, VAR_12);\n            } catch (Exception VAR_14) {\n                VAR_8.info(\"Execute condition sentence: {} failed\", VAR_10, VAR_14);\n                VAR_0 = VAR_1.FAILED;\n                break;\n            }\n            if (VAR_12) {\n                VAR_5 = VAR_6;\n                break;\n            }\n            VAR_6++;\n        }\n        VAR_3.setDependTaskList(VAR_2);\n        VAR_3.setResultConditionLocation(VAR_5);\n        VAR_15.setSwitchDependency(VAR_3);\n\n        if (!isValidSwitchResult(VAR_2.get(VAR_5))) {\n            VAR_0 = VAR_1.FAILED;\n            VAR_8.error(\"The switch task depend result is invalid, result:{}, switch branch:{}\", VAR_0,\n                    VAR_5);\n        }\n\n        VAR_8.info(\"The switch task depend result:{}, switch branch:{}\", VAR_0, VAR_5);\n        return VAR_0;\n    }",
  "func_graph_path_before": "apache/dolphinscheduler/d1ef54f6a851e64525f1078887520394e553b6e8/SwitchLogicTask.java/vul/before/0.json",
  "func": "private DependResult calculateConditionResult() {\n        DependResult conditionResult = DependResult.SUCCESS;\n\n        List<SwitchResultVo> switchResultVos = taskParameters.getDependTaskList();\n\n        SwitchResultVo switchResultVo = new SwitchResultVo();\n        switchResultVo.setNextNode(taskParameters.getNextNode());\n        switchResultVos.add(switchResultVo);\n        // todo: refactor these calculate code\n        int finalConditionLocation = switchResultVos.size() - 1;\n        int i = 0;\n\n        Map<String, Property> globalParams = JSONUtils\n                .toList(processInstance.getGlobalParams(), Property.class)\n                .stream()\n                .collect(Collectors.toMap(Property::getProp, Property -> Property));\n        Map<String, Property> varParams = JSONUtils\n                .toList(taskInstance.getVarPool(), Property.class)\n                .stream()\n                .collect(Collectors.toMap(Property::getProp, Property -> Property));\n\n        for (SwitchResultVo info : switchResultVos) {\n            log.info(\"Begin to execute {} condition: {} \", (i + 1), info.getCondition());\n            if (StringUtils.isEmpty(info.getCondition())) {\n                finalConditionLocation = i;\n                break;\n            }\n            String content =\n                    SwitchTaskUtils.generateContentWithTaskParams(info.getCondition(), globalParams, varParams);\n            log.info(\"Format condition sentence::{} successfully\", content);\n            Boolean result;\n            try {\n                result = SwitchTaskUtils.evaluate(content);\n                log.info(\"Execute condition sentence: {} successfully: {}\", content, result);\n            } catch (Exception e) {\n                log.info(\"Execute condition sentence: {} failed\", content, e);\n                conditionResult = DependResult.FAILED;\n                break;\n            }\n            if (result) {\n                finalConditionLocation = i;\n                break;\n            }\n            i++;\n        }\n        taskParameters.setDependTaskList(switchResultVos);\n        taskParameters.setResultConditionLocation(finalConditionLocation);\n        taskInstance.setSwitchDependency(taskParameters);\n\n        if (!isValidSwitchResult(switchResultVos.get(finalConditionLocation))) {\n            conditionResult = DependResult.FAILED;\n            log.error(\"The switch task depend result is invalid, result:{}, switch branch:{}\", conditionResult,\n                    finalConditionLocation);\n        }\n\n        log.info(\"The switch task depend result:{}, switch branch:{}\", conditionResult, finalConditionLocation);\n        return conditionResult;\n    }",
  "abstract_func": "private DependResult calculateConditionResult() {\n        DependResult VAR_0 = VAR_1.SUCCESS;\n\n        List<SwitchResultVo> VAR_2 = VAR_3.getDependTaskList();\n\n        SwitchResultVo VAR_4 = new SwitchResultVo();\n        VAR_4.setNextNode(VAR_3.getNextNode());\n        VAR_2.add(VAR_4);\n        /* COMMENT_0 */\n        int VAR_5 = VAR_2.size() - 1;\n        int VAR_6 = 0;\n\n        Map<String, Property> VAR_7 = VAR_8\n                .toList(VAR_9.getGlobalParams(), Property.class)\n                .stream()\n                .collect(VAR_10.toMap(VAR_11::VAR_12, VAR_11 -> VAR_11));\n        Map<String, Property> VAR_13 = VAR_8\n                .toList(VAR_14.getVarPool(), Property.class)\n                .stream()\n                .collect(VAR_10.toMap(VAR_11::VAR_12, VAR_11 -> VAR_11));\n\n        for (SwitchResultVo VAR_15 : VAR_2) {\n            VAR_16.info(\"Begin to execute {} condition: {} \", (VAR_6 + 1), VAR_15.getCondition());\n            if (VAR_17.isEmpty(VAR_15.getCondition())) {\n                VAR_5 = VAR_6;\n                break;\n            }\n            String VAR_18 =\n                    VAR_19.generateContentWithTaskParams(VAR_15.getCondition(), VAR_7, VAR_13);\n            VAR_16.info(\"Format condition sentence::{} successfully\", VAR_18);\n            Boolean VAR_20;\n            try {\n                VAR_20 = VAR_19.evaluate(VAR_18);\n                VAR_16.info(\"Execute condition sentence: {} successfully: {}\", VAR_18, VAR_20);\n            } catch (Exception VAR_21) {\n                VAR_16.info(\"Execute condition sentence: {} failed\", VAR_18, VAR_21);\n                VAR_0 = VAR_1.FAILED;\n                break;\n            }\n            if (VAR_20) {\n                VAR_5 = VAR_6;\n                break;\n            }\n            VAR_6++;\n        }\n        VAR_3.setDependTaskList(VAR_2);\n        VAR_3.setResultConditionLocation(VAR_5);\n        VAR_14.setSwitchDependency(VAR_3);\n\n        if (!isValidSwitchResult(VAR_2.get(VAR_5))) {\n            VAR_0 = VAR_1.FAILED;\n            VAR_16.error(\"The switch task depend result is invalid, result:{}, switch branch:{}\", VAR_0,\n                    VAR_5);\n        }\n\n        VAR_16.info(\"The switch task depend result:{}, switch branch:{}\", VAR_0, VAR_5);\n        return VAR_0;\n    }",
  "func_graph_path": "apache/dolphinscheduler/d1ef54f6a851e64525f1078887520394e553b6e8/SwitchLogicTask.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -9,13 +9,24 @@\n         // todo: refactor these calculate code\n         int finalConditionLocation = switchResultVos.size() - 1;\n         int i = 0;\n+\n+        Map<String, Property> globalParams = JSONUtils\n+                .toList(processInstance.getGlobalParams(), Property.class)\n+                .stream()\n+                .collect(Collectors.toMap(Property::getProp, Property -> Property));\n+        Map<String, Property> varParams = JSONUtils\n+                .toList(taskInstance.getVarPool(), Property.class)\n+                .stream()\n+                .collect(Collectors.toMap(Property::getProp, Property -> Property));\n+\n         for (SwitchResultVo info : switchResultVos) {\n             log.info(\"Begin to execute {} condition: {} \", (i + 1), info.getCondition());\n             if (StringUtils.isEmpty(info.getCondition())) {\n                 finalConditionLocation = i;\n                 break;\n             }\n-            String content = setTaskParams(info.getCondition().replaceAll(\"'\", \"\\\"\"), rgex);\n+            String content =\n+                    SwitchTaskUtils.generateContentWithTaskParams(info.getCondition(), globalParams, varParams);\n             log.info(\"Format condition sentence::{} successfully\", content);\n             Boolean result;\n             try {",
  "diff_line_info": {
    "deleted_lines": [
      "            String content = setTaskParams(info.getCondition().replaceAll(\"'\", \"\\\"\"), rgex);"
    ],
    "added_lines": [
      "",
      "        Map<String, Property> globalParams = JSONUtils",
      "                .toList(processInstance.getGlobalParams(), Property.class)",
      "                .stream()",
      "                .collect(Collectors.toMap(Property::getProp, Property -> Property));",
      "        Map<String, Property> varParams = JSONUtils",
      "                .toList(taskInstance.getVarPool(), Property.class)",
      "                .stream()",
      "                .collect(Collectors.toMap(Property::getProp, Property -> Property));",
      "",
      "            String content =",
      "                    SwitchTaskUtils.generateContentWithTaskParams(info.getCondition(), globalParams, varParams);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/apache/dolphinscheduler/pull/15228",
  "description": {
    "pr_info": {
      "title": "[Bug] fix switch condition",
      "number": 15228
    },
    "comment": [
      "## Purpose of the pull request\r\n\r\nadd switch args check to avoid illegal condition.\r\n\r\n## Brief change log\r\n\r\n- `SwitchLogicTask`\r\n\r\n## Verify this pull request\r\n\r\n- *Added UT `SwitchTaskUtilsTest`*",
      "## [Codecov](https://app.codecov.io/gh/apache/dolphinscheduler/pull/15228?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache) Report\nAttention: `18 lines` in your changes are missing coverage. Please review.\n> Comparison is base [(`12f8138`)](https://app.codecov.io/gh/apache/dolphinscheduler/commit/12f8138167f8481f66d52775b510457f532b56e4?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache) 37.99% compared to head [(`2c8088f`)](https://app.codecov.io/gh/apache/dolphinscheduler/pull/15228?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache) 38.02%.\n\n> :exclamation: Current head 2c8088f differs from pull request most recent head f8a412f. Consider uploading reports for the commit f8a412f to get more accurate results\n\n| [Files](https://app.codecov.io/gh/apache/dolphinscheduler/pull/15228?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache) | Patch % | Lines |\n|---|---|---|\n| [...master/runner/task/switchtask/SwitchLogicTask.java](https://app.codecov.io/gh/apache/dolphinscheduler/pull/15228?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache#diff-ZG9scGhpbnNjaGVkdWxlci1tYXN0ZXIvc3JjL21haW4vamF2YS9vcmcvYXBhY2hlL2RvbHBoaW5zY2hlZHVsZXIvc2VydmVyL21hc3Rlci9ydW5uZXIvdGFzay9zd2l0Y2h0YXNrL1N3aXRjaExvZ2ljVGFzay5qYXZh) | 0.00% | [10 Missing :warning: ](https://app.codecov.io/gh/apache/dolphinscheduler/pull/15228?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache) |\n| [...scheduler/server/master/utils/SwitchTaskUtils.java](https://app.codecov.io/gh/apache/dolphinscheduler/pull/15228?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache#diff-ZG9scGhpbnNjaGVkdWxlci1tYXN0ZXIvc3JjL21haW4vamF2YS9vcmcvYXBhY2hlL2RvbHBoaW5zY2hlZHVsZXIvc2VydmVyL21hc3Rlci91dGlscy9Td2l0Y2hUYXNrVXRpbHMuamF2YQ==) | 69.23% | [3 Missing and 5 partials :warning: ](https://app.codecov.io/gh/apache/dolphinscheduler/pull/15228?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache) |\n\n<details><summary>Additional details and impacted files</summary>\n\n\n```diff\n@@             Coverage Diff              @@\n##                dev   #15228      +/-   ##\n============================================\n+ Coverage     37.99%   38.02%   +0.03%     \n- Complexity     4640     4645       +5     \n============================================\n  Files          1279     1279              \n  Lines         44490    44500      +10     \n  Branches       4794     4797       +3     \n============================================\n+ Hits          16902    16923      +21     \n+ Misses        25733    25717      -16     \n- Partials       1855     1860       +5     \n```\n\n\n\n</details>\n\n[:umbrella: View full report in Codecov by Sentry](https://app.codecov.io/gh/apache/dolphinscheduler/pull/15228?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache).   \n:loudspeaker: Have feedback on the report? [Share it here](https://about.codecov.io/codecov-pr-comment-feedback/?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=apache).\n",
      "Kudos, SonarCloud Quality Gate passed!&nbsp; &nbsp; [![Quality Gate passed](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/passed-16px.png 'Quality Gate passed')](https://sonarcloud.io/dashboard?id=apache-dolphinscheduler&pullRequest=15228)\n\n[![Bug](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/bug-16px.png 'Bug')](https://sonarcloud.io/project/issues?id=apache-dolphinscheduler&pullRequest=15228&resolved=false&types=BUG) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=apache-dolphinscheduler&pullRequest=15228&resolved=false&types=BUG) [0 Bugs](https://sonarcloud.io/project/issues?id=apache-dolphinscheduler&pullRequest=15228&resolved=false&types=BUG)  \n[![Vulnerability](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/vulnerability-16px.png 'Vulnerability')](https://sonarcloud.io/project/issues?id=apache-dolphinscheduler&pullRequest=15228&resolved=false&types=VULNERABILITY) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=apache-dolphinscheduler&pullRequest=15228&resolved=false&types=VULNERABILITY) [0 Vulnerabilities](https://sonarcloud.io/project/issues?id=apache-dolphinscheduler&pullRequest=15228&resolved=false&types=VULNERABILITY)  \n[![Security Hotspot](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/security_hotspot-16px.png 'Security Hotspot')](https://sonarcloud.io/project/security_hotspots?id=apache-dolphinscheduler&pullRequest=15228&resolved=false&types=SECURITY_HOTSPOT) [![E](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/E-16px.png 'E')](https://sonarcloud.io/project/security_hotspots?id=apache-dolphinscheduler&pullRequest=15228&resolved=false&types=SECURITY_HOTSPOT) [1 Security Hotspot](https://sonarcloud.io/project/security_hotspots?id=apache-dolphinscheduler&pullRequest=15228&resolved=false&types=SECURITY_HOTSPOT)  \n[![Code Smell](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/common/code_smell-16px.png 'Code Smell')](https://sonarcloud.io/project/issues?id=apache-dolphinscheduler&pullRequest=15228&resolved=false&types=CODE_SMELL) [![A](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/RatingBadge/A-16px.png 'A')](https://sonarcloud.io/project/issues?id=apache-dolphinscheduler&pullRequest=15228&resolved=false&types=CODE_SMELL) [5 Code Smells](https://sonarcloud.io/project/issues?id=apache-dolphinscheduler&pullRequest=15228&resolved=false&types=CODE_SMELL)\n\n[![63.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/CoverageChart/60-16px.png '63.0%')](https://sonarcloud.io/component_measures?id=apache-dolphinscheduler&pullRequest=15228&metric=new_coverage&view=list) [63.0% Coverage](https://sonarcloud.io/component_measures?id=apache-dolphinscheduler&pullRequest=15228&metric=new_coverage&view=list)  \n[![0.0%](https://sonarsource.github.io/sonarcloud-github-static-resources/v2/checks/Duplications/3-16px.png '0.0%')](https://sonarcloud.io/component_measures?id=apache-dolphinscheduler&pullRequest=15228&metric=new_duplicated_lines_density&view=list) [0.0% Duplication](https://sonarcloud.io/component_measures?id=apache-dolphinscheduler&pullRequest=15228&metric=new_duplicated_lines_density&view=list)\n\n"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.9"
}