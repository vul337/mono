{
  "cve_id": "CVE-2023-4255",
  "cwe_ids": [
    "CWE-787",
    "CWE-125"
  ],
  "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H",
  "cvss_is_v3": true,
  "repo_name": "tats/w3m",
  "commit_msg": "Fix OOB access due to multiple backspaces\n\nCommit 419ca82d57 (Fix m17n backspace handling causes out-of-bounds\nwrite in checkType) introduced an incomplete fix.\n\nIn function checkType we store the length of the previous multi-char\ncharacter in a buffer plens_buffer with pointer plens pointing to the\ncurrent position inside the buffer. When encountering a backspace plens\nis set to the previous position without a bounds check. This will lead\nto plens being out of bounds if we get more backspaces than we have\nprocessed multi-char characters before.\n\nIf we are at the beginning of the buffer do not decrement and set plen\n(the current length) to 0.\n\nThis also fixes GH Issue #270 [BUG] Out of bound read in Strnew_size ,\nStr.c:61\n\nIf the above explanation does sound weird it's because I didn't fully\ngrok that function. :-)",
  "commit_hash": "edc602651c506aeeb60544b55534dd1722a340d3",
  "git_url": "https://github.com/tats/w3m/commit/edc602651c506aeeb60544b55534dd1722a340d3",
  "file_path": "etc.c",
  "func_name": "checkType",
  "func_before": "Str\ncheckType(Str s, Lineprop **oprop, Linecolor **ocolor)\n{\n    Lineprop mode;\n    Lineprop effect = PE_NORMAL;\n    Lineprop *prop;\n    static Lineprop *prop_buffer = NULL;\n    static int prop_size = 0;\n    char *str = s->ptr, *endp = &s->ptr[s->length], *bs = NULL;\n#ifdef USE_ANSI_COLOR\n    Lineprop ceffect = PE_NORMAL;\n    Linecolor cmode = 0;\n    int check_color = FALSE;\n    Linecolor *color = NULL;\n    static Linecolor *color_buffer = NULL;\n    static int color_size = 0;\n    char *es = NULL;\n#endif\n    int do_copy = FALSE;\n#ifdef USE_M17N\n    int i;\n    int plen = 0, clen;\n    int *plens = NULL;\n    static int *plens_buffer = NULL;\n    static int plens_size = 0;\n#endif\n\n    if (prop_size < s->length) {\n\tprop_size = (s->length > LINELEN) ? s->length : LINELEN;\n\tprop_buffer = New_Reuse(Lineprop, prop_buffer, prop_size);\n    }\n    prop = prop_buffer;\n#ifdef USE_M17N\n    if (plens_size < s->length) {\n\tplens_size = (s->length > LINELEN) ? s->length : LINELEN;\n\tplens_buffer = New_Reuse(int, plens_buffer, plens_size);\n    }\n    plens = plens_buffer;\n#endif\n\n    if (ShowEffect) {\n\tbs = memchr(str, '\\b', s->length);\n#ifdef USE_ANSI_COLOR\n\tif (ocolor) {\n\t    es = memchr(str, ESC_CODE, s->length);\n\t    if (es) {\n\t\tif (color_size < s->length) {\n\t\t    color_size = (s->length > LINELEN) ? s->length : LINELEN;\n\t\t    color_buffer = New_Reuse(Linecolor, color_buffer,\n\t\t\t\t\t     color_size);\n\t\t}\n\t\tcolor = color_buffer;\n\t    }\n\t}\n#endif\n\tif ((bs != NULL)\n#ifdef USE_ANSI_COLOR\n\t    || (es != NULL)\n#endif\n\t    ) {\n\t    char *sp = str, *ep;\n\t    s = Strnew_size(s->length);\n\t    do_copy = TRUE;\n\t    ep = endp;\n\t    if (bs && ep > bs - 2)\n\t\tep = bs - 2;\n#ifdef USE_ANSI_COLOR\n\t    if (es && ep > es - 2)\n\t\tep = es - 2;\n#endif\n\t    for (; str < ep && IS_ASCII(*str); str++) {\n\t\t*(prop++) = PE_NORMAL | (IS_CNTRL(*str) ? PC_CTRL : PC_ASCII);\n#ifdef USE_ANSI_COLOR\n\t\tif (color)\n\t\t    *(color++) = 0;\n#endif\n#ifdef USE_M17N\n\t\t*(plens++) = plen = 1;\n#endif\n\t    }\n\t    Strcat_charp_n(s, sp, (int)(str - sp));\n\t}\n    }\n    if (!do_copy) {\n\tfor (; str < endp && IS_ASCII(*str); str++) {\n\t    *(prop++) = PE_NORMAL | (IS_CNTRL(*str) ? PC_CTRL : PC_ASCII);\n#ifdef USE_ANSI_COLOR\n\t    if (color)\n\t\t*(color++) = 0;\n#endif\n#ifdef USE_M17N\n\t    *(plens++) = plen = 1;\n#endif\n\t}\n    }\n\n    while (str < endp) {\n\tif (prop - prop_buffer >= prop_size)\n\t    break;\n\tif (bs != NULL) {\n#ifdef USE_M17N\n\t    if (str == bs - 2 && !strncmp(str, \"__\\b\\b\", 4)) {\n\t\tstr += 4;\n\t\teffect = PE_UNDER;\n\t\tif (str < endp)\n\t\t    bs = memchr(str, '\\b', endp - str);\n\t\tcontinue;\n\t    }\n\t    else\n#endif\n\t    if (str == bs - 1 && *str == '_') {\n\t\tstr += 2;\n\t\teffect = PE_UNDER;\n\t\tif (str < endp)\n\t\t    bs = memchr(str, '\\b', endp - str);\n\t\tcontinue;\n\t    }\n\t    else if (str == bs) {\n\t\tif (*(str + 1) == '_') {\n\t\t    if (s->length) {\n\t\t\tstr += 2;\n#ifdef USE_M17N\n\t\t\tfor (i = 1; i <= plen; i++)\n\t\t\t    *(prop - i) |= PE_UNDER;\n#else\n\t\t\t*(prop - 1) |= PE_UNDER;\n#endif\n\t\t    }\n\t\t    else {\n\t\t\tstr++;\n\t\t    }\n\t\t}\n#ifdef USE_M17N\n\t\telse if (!strncmp(str + 1, \"\\b__\", 3)) {\n\t\t    if (s->length) {\n\t\t\tstr += (plen == 1) ? 3 : 4;\n\t\t\tfor (i = 1; i <= plen; i++)\n\t\t\t    *(prop - i) |= PE_UNDER;\n\t\t    }\n\t\t    else {\n\t\t\tstr += 2;\n\t\t    }\n\t\t}\n\t\telse if (*(str + 1) == '\\b') {\n\t\t    if (s->length) {\n\t\t\tclen = get_mclen(str + 2);\n\t\t\tif (plen == clen &&\n\t\t\t    !strncmp(str - plen, str + 2, plen)) {\n\t\t\t    for (i = 1; i <= plen; i++)\n\t\t\t\t*(prop - i) |= PE_BOLD;\n\t\t\t    str += 2 + clen;\n\t\t\t}\n\t\t\telse {\n\t\t\t    Strshrink(s, plen);\n\t\t\t    prop -= plen;\n#ifdef USE_ANSI_COLOR\n\t\t\t    if (color)\n\t\t\t\tcolor -= plen;\n#endif\n\t\t\t    plen = *(--plens);\n\t\t\t    str += 2;\n\t\t\t}\n\t\t    }\n\t\t    else {\n\t\t\tstr += 2;\n\t\t    }\n\t\t}\n#endif\n\t\telse {\n\t\t    if (s->length) {\n#ifdef USE_M17N\n\t\t\tclen = get_mclen(str + 1);\n\t\t\tif (plen == clen &&\n\t\t\t    !strncmp(str - plen, str + 1, plen)) {\n\t\t\t    for (i = 1; i <= plen; i++)\n\t\t\t\t*(prop - i) |= PE_BOLD;\n\t\t\t    str += 1 + clen;\n\t\t\t}\n\t\t\telse {\n\t\t\t    Strshrink(s, plen);\n\t\t\t    prop -= plen;\n#ifdef USE_ANSI_COLOR\n\t\t\t    if (color)\n\t\t\t\tcolor -= plen;\n#endif\n\t\t\t    plen = *(--plens);\n\t\t\t    str++;\n\t\t\t}\n#else\n\t\t\tif (*(str - 1) == *(str + 1)) {\n\t\t\t    *(prop - 1) |= PE_BOLD;\n\t\t\t    str += 2;\n\t\t\t}\n\t\t\telse {\n\t\t\t    Strshrink(s, 1);\n\t\t\t    prop--;\n#ifdef USE_ANSI_COLOR\n\t\t\t    if (color)\n\t\t\t\tcolor--;\n#endif\n\t\t\t    str++;\n\t\t\t}\n#endif\n\t\t    }\n\t\t    else {\n\t\t\tstr++;\n\t\t    }\n\t\t}\n\t\tif (str < endp)\n\t\t    bs = memchr(str, '\\b', endp - str);\n\t\tcontinue;\n\t    }\n#ifdef USE_ANSI_COLOR\n\t    else if (str > bs)\n\t\tbs = memchr(str, '\\b', endp - str);\n#endif\n\t}\n#ifdef USE_ANSI_COLOR\n\tif (es != NULL) {\n\t    if (str == es) {\n\t\tint ok = parse_ansi_color(&str, &ceffect, &cmode);\n\t\tif (str < endp)\n\t\t    es = memchr(str, ESC_CODE, endp - str);\n\t\tif (ok) {\n\t\t    if (cmode)\n\t\t\tcheck_color = TRUE;\n\t\t    continue;\n\t\t}\n\t    }\n\t    else if (str > es)\n\t\tes = memchr(str, ESC_CODE, endp - str);\n\t}\n#endif\n\n\tmode = get_mctype(str) | effect;\n#ifdef USE_ANSI_COLOR\n\tif (color) {\n\t    *(color++) = cmode;\n\t    mode |= ceffect;\n\t}\n#endif\n\t*(prop++) = mode;\n#ifdef USE_M17N\n\tplen = get_mclen(str);\n\tif (str + plen > endp)\n\t    plen = endp - str;\n\t*(plens++) = plen;\n\tif (plen > 1) {\n\t    mode = (mode & ~PC_WCHAR1) | PC_WCHAR2;\n\t    for (i = 1; i < plen; i++) {\n\t\t*(prop++) = mode;\n#ifdef USE_ANSI_COLOR\n\t\tif (color)\n\t\t    *(color++) = cmode;\n#endif\n\t    }\n\t    if (do_copy)\n\t\tStrcat_charp_n(s, (char *)str, plen);\n\t    str += plen;\n\t}\n\telse\n#endif\n\t{\n\t    if (do_copy)\n\t\tStrcat_char(s, (char)*str);\n\t    str++;\n\t}\n\teffect = PE_NORMAL;\n    }\n    *oprop = prop_buffer;\n#ifdef USE_ANSI_COLOR\n    if (ocolor)\n\t*ocolor = check_color ? color_buffer : NULL;\n#endif\n    return s;\n}",
  "abstract_func_before": "Str\ncheckType(Str VAR_0, Lineprop **VAR_1, Linecolor **VAR_2)\n{\n    Lineprop VAR_3;\n    Lineprop VAR_4 = VAR_5;\n    Lineprop *VAR_6;\n    static Lineprop *VAR_7 = NULL;\n    static int VAR_8 = 0;\n    char *VAR_9 = VAR_0->ptr, *VAR_10 = &VAR_0->ptr[VAR_0->length], *VAR_11 = NULL;\n#ifdef VAR_12\n    Lineprop VAR_13 = VAR_5;\n    Linecolor VAR_14 = 0;\n    int VAR_15 = FALSE;\n    Linecolor *VAR_16 = NULL;\n    static Linecolor *VAR_17 = NULL;\n    static int VAR_18 = 0;\n    char *VAR_19 = NULL;\n#endif\n    int VAR_20 = FALSE;\n#ifdef VAR_21\n    int VAR_22;\n    int VAR_23 = 0, VAR_24;\n    int *VAR_25 = NULL;\n    static int *VAR_26 = NULL;\n    static int VAR_27 = 0;\n#endif\n\n    if (VAR_8 < VAR_0->length) {\n\tVAR_8 = (VAR_0->length > VAR_28) ? VAR_0->length : VAR_28;\n\tVAR_7 = New_Reuse(Lineprop, VAR_7, VAR_8);\n    }\n    VAR_6 = VAR_7;\n#ifdef VAR_21\n    if (VAR_27 < VAR_0->length) {\n\tVAR_27 = (VAR_0->length > VAR_28) ? VAR_0->length : VAR_28;\n\tVAR_26 = New_Reuse(int, VAR_26, VAR_27);\n    }\n    VAR_25 = VAR_26;\n#endif\n\n    if (VAR_29) {\n\tVAR_11 = memchr(VAR_9, '\\b', VAR_0->length);\n#ifdef VAR_12\n\tif (VAR_2) {\n\t    VAR_19 = memchr(VAR_9, VAR_30, VAR_0->length);\n\t    if (VAR_19) {\n\t\tif (VAR_18 < VAR_0->length) {\n\t\t    VAR_18 = (VAR_0->length > VAR_28) ? VAR_0->length : VAR_28;\n\t\t    VAR_17 = New_Reuse(Linecolor, VAR_17,\n\t\t\t\t\t     VAR_18);\n\t\t}\n\t\tVAR_16 = VAR_17;\n\t    }\n\t}\n#endif\n\tif ((VAR_11 != NULL)\n#ifdef VAR_12\n\t    || (VAR_19 != NULL)\n#endif\n\t    ) {\n\t    char *VAR_31 = VAR_9, *VAR_32;\n\t    VAR_0 = Strnew_size(VAR_0->length);\n\t    VAR_20 = TRUE;\n\t    VAR_32 = VAR_10;\n\t    if (VAR_11 && VAR_32 > VAR_11 - 2)\n\t\tVAR_32 = VAR_11 - 2;\n#ifdef VAR_12\n\t    if (VAR_19 && VAR_32 > VAR_19 - 2)\n\t\tVAR_32 = VAR_19 - 2;\n#endif\n\t    for (; VAR_9 < VAR_32 && IS_ASCII(*VAR_9); VAR_9++) {\n\t\t*(VAR_6++) = VAR_5 | (IS_CNTRL(*VAR_9) ? VAR_33 : VAR_34);\n#ifdef VAR_12\n\t\tif (VAR_16)\n\t\t    *(VAR_16++) = 0;\n#endif\n#ifdef VAR_21\n\t\t*(VAR_25++) = VAR_23 = 1;\n#endif\n\t    }\n\t    Strcat_charp_n(VAR_0, VAR_31, (int)(VAR_9 - VAR_31));\n\t}\n    }\n    if (!VAR_20) {\n\tfor (; VAR_9 < VAR_10 && IS_ASCII(*VAR_9); VAR_9++) {\n\t    *(VAR_6++) = VAR_5 | (IS_CNTRL(*VAR_9) ? VAR_33 : VAR_34);\n#ifdef VAR_12\n\t    if (VAR_16)\n\t\t*(VAR_16++) = 0;\n#endif\n#ifdef VAR_21\n\t    *(VAR_25++) = VAR_23 = 1;\n#endif\n\t}\n    }\n\n    while (VAR_9 < VAR_10) {\n\tif (VAR_6 - VAR_7 >= VAR_8)\n\t    break;\n\tif (VAR_11 != NULL) {\n#ifdef VAR_21\n\t    if (VAR_9 == VAR_11 - 2 && !strncmp(VAR_9, \"__\\b\\b\", 4)) {\n\t\tVAR_9 += 4;\n\t\tVAR_4 = VAR_35;\n\t\tif (VAR_9 < VAR_10)\n\t\t    VAR_11 = memchr(VAR_9, '\\b', VAR_10 - VAR_9);\n\t\tcontinue;\n\t    }\n\t    else\n#endif\n\t    if (VAR_9 == VAR_11 - 1 && *VAR_9 == '_') {\n\t\tVAR_9 += 2;\n\t\tVAR_4 = VAR_35;\n\t\tif (VAR_9 < VAR_10)\n\t\t    VAR_11 = memchr(VAR_9, '\\b', VAR_10 - VAR_9);\n\t\tcontinue;\n\t    }\n\t    else if (VAR_9 == VAR_11) {\n\t\tif (*(VAR_9 + 1) == '_') {\n\t\t    if (VAR_0->length) {\n\t\t\tVAR_9 += 2;\n#ifdef VAR_21\n\t\t\tfor (VAR_22 = 1; VAR_22 <= VAR_23; VAR_22++)\n\t\t\t    *(VAR_6 - VAR_22) |= VAR_35;\n#else\n\t\t\t*(VAR_6 - 1) |= VAR_35;\n#endif\n\t\t    }\n\t\t    else {\n\t\t\tVAR_9++;\n\t\t    }\n\t\t}\n#ifdef VAR_21\n\t\telse if (!strncmp(VAR_9 + 1, \"\\b__\", 3)) {\n\t\t    if (VAR_0->length) {\n\t\t\tVAR_9 += (VAR_23 == 1) ? 3 : 4;\n\t\t\tfor (VAR_22 = 1; VAR_22 <= VAR_23; VAR_22++)\n\t\t\t    *(VAR_6 - VAR_22) |= VAR_35;\n\t\t    }\n\t\t    else {\n\t\t\tVAR_9 += 2;\n\t\t    }\n\t\t}\n\t\telse if (*(str + 1) == '\\b') {\n\t\t    if (VAR_0->length) {\n\t\t\tVAR_24 = get_mclen(str + 2);\n\t\t\tif (VAR_23 == VAR_24 &&\n\t\t\t    !strncmp(str - VAR_23, str + 2, VAR_23)) {\n\t\t\t    for (VAR_22 = 1; VAR_22 <= VAR_23; VAR_22++)\n\t\t\t\t*(VAR_6 - VAR_22) |= VAR_36;\n\t\t\t    str += 2 + VAR_24;\n\t\t\t}\n\t\t\telse {\n\t\t\t    Strshrink(VAR_0, VAR_23);\n\t\t\t    VAR_6 -= VAR_23;\n#ifdef VAR_12\n\t\t\t    if (VAR_16)\n\t\t\t\tVAR_16 -= VAR_23;\n#endif\n\t\t\t    VAR_23 = *(--VAR_25);\n\t\t\t    str += 2;\n\t\t\t}\n\t\t    }\n\t\t    else {\n\t\t\tstr += 2;\n\t\t    }\n\t\t}\n#endif\n\t\telse {\n\t\t    if (VAR_0->length) {\n#ifdef VAR_21\n\t\t\tVAR_24 = get_mclen(str + 1);\n\t\t\tif (VAR_23 == VAR_24 &&\n\t\t\t    !strncmp(str - VAR_23, str + 1, VAR_23)) {\n\t\t\t    for (VAR_22 = 1; VAR_22 <= VAR_23; VAR_22++)\n\t\t\t\t*(VAR_6 - VAR_22) |= VAR_36;\n\t\t\t    str += 1 + VAR_24;\n\t\t\t}\n\t\t\telse {\n\t\t\t    Strshrink(VAR_0, VAR_23);\n\t\t\t    VAR_6 -= VAR_23;\n#ifdef VAR_12\n\t\t\t    if (VAR_16)\n\t\t\t\tVAR_16 -= VAR_23;\n#endif\n\t\t\t    VAR_23 = *(--VAR_25);\n\t\t\t    str++;\n\t\t\t}\n#else\n\t\t\tif (*(str - 1) == *(str + 1)) {\n\t\t\t    *(VAR_6 - 1) |= VAR_36;\n\t\t\t    str += 2;\n\t\t\t}\n\t\t\telse {\n\t\t\t    Strshrink(VAR_0, 1);\n\t\t\t    VAR_6--;\n#ifdef VAR_12\n\t\t\t    if (VAR_16)\n\t\t\t\tVAR_16--;\n#endif\n\t\t\t    str++;\n\t\t\t}\n#endif\n\t\t    }\n\t\t    else {\n\t\t\tstr++;\n\t\t    }\n\t\t}\n\t\tif (str < VAR_10)\n\t\t    VAR_11 = memchr(str, '\\b', VAR_10 - str);\n\t\tcontinue;\n\t    }\n#ifdef VAR_12\n\t    else if (str > VAR_11)\n\t\tVAR_11 = memchr(str, '\\b', VAR_10 - str);\n#endif\n\t}\n#ifdef VAR_12\n\tif (VAR_19 != NULL) {\n\t    if (str == VAR_19) {\n\t\tint VAR_37 = parse_ansi_color(&str, &VAR_13, &VAR_14);\n\t\tif (str < VAR_10)\n\t\t    VAR_19 = memchr(str, VAR_30, VAR_10 - str);\n\t\tif (VAR_37) {\n\t\t    if (VAR_14)\n\t\t\tVAR_15 = TRUE;\n\t\t    continue;\n\t\t}\n\t    }\n\t    else if (str > VAR_19)\n\t\tVAR_19 = memchr(str, VAR_30, VAR_10 - str);\n\t}\n#endif\n\n\tVAR_3 = get_mctype(str) | VAR_4;\n#ifdef VAR_12\n\tif (VAR_16) {\n\t    *(VAR_16++) = VAR_14;\n\t    VAR_3 |= VAR_13;\n\t}\n#endif\n\t*(VAR_6++) = VAR_3;\n#ifdef VAR_21\n\tVAR_23 = get_mclen(str);\n\tif (str + VAR_23 > VAR_10)\n\t    VAR_23 = VAR_10 - str;\n\t*(VAR_25++) = VAR_23;\n\tif (VAR_23 > 1) {\n\t    VAR_3 = (VAR_3 & ~VAR_38) | VAR_39;\n\t    for (VAR_22 = 1; VAR_22 < VAR_23; VAR_22++) {\n\t\t*(VAR_6++) = VAR_3;\n#ifdef VAR_12\n\t\tif (VAR_16)\n\t\t    *(VAR_16++) = VAR_14;\n#endif\n\t    }\n\t    if (VAR_20)\n\t\tStrcat_charp_n(VAR_0, (char *)str, VAR_23);\n\t    str += VAR_23;\n\t}\n\telse\n#endif\n\t{\n\t    if (VAR_20)\n\t\tStrcat_char(VAR_0, (char)*str);\n\t    str++;\n\t}\n\tVAR_4 = VAR_5;\n    }\n    *VAR_1 = VAR_7;\n#ifdef VAR_12\n    if (VAR_2)\n\t*VAR_2 = VAR_15 ? VAR_17 : NULL;\n#endif\n    return VAR_0;\n}",
  "func_graph_path_before": "tats/w3m/edc602651c506aeeb60544b55534dd1722a340d3/etc.c/vul/before/0.json",
  "func": "Str\ncheckType(Str s, Lineprop **oprop, Linecolor **ocolor)\n{\n    Lineprop mode;\n    Lineprop effect = PE_NORMAL;\n    Lineprop *prop;\n    static Lineprop *prop_buffer = NULL;\n    static int prop_size = 0;\n    char *str = s->ptr, *endp = &s->ptr[s->length], *bs = NULL;\n#ifdef USE_ANSI_COLOR\n    Lineprop ceffect = PE_NORMAL;\n    Linecolor cmode = 0;\n    int check_color = FALSE;\n    Linecolor *color = NULL;\n    static Linecolor *color_buffer = NULL;\n    static int color_size = 0;\n    char *es = NULL;\n#endif\n    int do_copy = FALSE;\n#ifdef USE_M17N\n    int i;\n    int plen = 0, clen;\n    int *plens = NULL;\n    static int *plens_buffer = NULL;\n    static int plens_size = 0;\n#endif\n\n    if (prop_size < s->length) {\n\tprop_size = (s->length > LINELEN) ? s->length : LINELEN;\n\tprop_buffer = New_Reuse(Lineprop, prop_buffer, prop_size);\n    }\n    prop = prop_buffer;\n#ifdef USE_M17N\n    if (plens_size < s->length) {\n\tplens_size = (s->length > LINELEN) ? s->length : LINELEN;\n\tplens_buffer = New_Reuse(int, plens_buffer, plens_size);\n    }\n    plens = plens_buffer;\n#endif\n\n    if (ShowEffect) {\n\tbs = memchr(str, '\\b', s->length);\n#ifdef USE_ANSI_COLOR\n\tif (ocolor) {\n\t    es = memchr(str, ESC_CODE, s->length);\n\t    if (es) {\n\t\tif (color_size < s->length) {\n\t\t    color_size = (s->length > LINELEN) ? s->length : LINELEN;\n\t\t    color_buffer = New_Reuse(Linecolor, color_buffer,\n\t\t\t\t\t     color_size);\n\t\t}\n\t\tcolor = color_buffer;\n\t    }\n\t}\n#endif\n\tif ((bs != NULL)\n#ifdef USE_ANSI_COLOR\n\t    || (es != NULL)\n#endif\n\t    ) {\n\t    char *sp = str, *ep;\n\t    s = Strnew_size(s->length);\n\t    do_copy = TRUE;\n\t    ep = endp;\n\t    if (bs && ep > bs - 2)\n\t\tep = bs - 2;\n#ifdef USE_ANSI_COLOR\n\t    if (es && ep > es - 2)\n\t\tep = es - 2;\n#endif\n\t    for (; str < ep && IS_ASCII(*str); str++) {\n\t\t*(prop++) = PE_NORMAL | (IS_CNTRL(*str) ? PC_CTRL : PC_ASCII);\n#ifdef USE_ANSI_COLOR\n\t\tif (color)\n\t\t    *(color++) = 0;\n#endif\n#ifdef USE_M17N\n\t\t*(plens++) = plen = 1;\n#endif\n\t    }\n\t    Strcat_charp_n(s, sp, (int)(str - sp));\n\t}\n    }\n    if (!do_copy) {\n\tfor (; str < endp && IS_ASCII(*str); str++) {\n\t    *(prop++) = PE_NORMAL | (IS_CNTRL(*str) ? PC_CTRL : PC_ASCII);\n#ifdef USE_ANSI_COLOR\n\t    if (color)\n\t\t*(color++) = 0;\n#endif\n#ifdef USE_M17N\n\t    *(plens++) = plen = 1;\n#endif\n\t}\n    }\n\n    while (str < endp) {\n\tif (prop - prop_buffer >= prop_size)\n\t    break;\n\tif (bs != NULL) {\n#ifdef USE_M17N\n\t    if (str == bs - 2 && !strncmp(str, \"__\\b\\b\", 4)) {\n\t\tstr += 4;\n\t\teffect = PE_UNDER;\n\t\tif (str < endp)\n\t\t    bs = memchr(str, '\\b', endp - str);\n\t\tcontinue;\n\t    }\n\t    else\n#endif\n\t    if (str == bs - 1 && *str == '_') {\n\t\tstr += 2;\n\t\teffect = PE_UNDER;\n\t\tif (str < endp)\n\t\t    bs = memchr(str, '\\b', endp - str);\n\t\tcontinue;\n\t    }\n\t    else if (str == bs) {\n\t\tif (*(str + 1) == '_') {\n\t\t    if (s->length) {\n\t\t\tstr += 2;\n#ifdef USE_M17N\n\t\t\tfor (i = 1; i <= plen; i++)\n\t\t\t    *(prop - i) |= PE_UNDER;\n#else\n\t\t\t*(prop - 1) |= PE_UNDER;\n#endif\n\t\t    }\n\t\t    else {\n\t\t\tstr++;\n\t\t    }\n\t\t}\n#ifdef USE_M17N\n\t\telse if (!strncmp(str + 1, \"\\b__\", 3)) {\n\t\t    if (s->length) {\n\t\t\tstr += (plen == 1) ? 3 : 4;\n\t\t\tfor (i = 1; i <= plen; i++)\n\t\t\t    *(prop - i) |= PE_UNDER;\n\t\t    }\n\t\t    else {\n\t\t\tstr += 2;\n\t\t    }\n\t\t}\n\t\telse if (*(str + 1) == '\\b') {\n\t\t    if (s->length) {\n\t\t\tclen = get_mclen(str + 2);\n\t\t\tif (plen == clen &&\n\t\t\t    !strncmp(str - plen, str + 2, plen)) {\n\t\t\t    for (i = 1; i <= plen; i++)\n\t\t\t\t*(prop - i) |= PE_BOLD;\n\t\t\t    str += 2 + clen;\n\t\t\t}\n\t\t\telse {\n\t\t\t    Strshrink(s, plen);\n\t\t\t    prop -= plen;\n#ifdef USE_ANSI_COLOR\n\t\t\t    if (color)\n\t\t\t\tcolor -= plen;\n#endif\n\t\t\t    if (plens == plens_buffer)\n\t\t\t\tplen = 0;\n\t\t\t    else\n\t\t\t\tplen = *(--plens);\n\t\t\t    str += 2;\n\t\t\t}\n\t\t    }\n\t\t    else {\n\t\t\tstr += 2;\n\t\t    }\n\t\t}\n#endif\n\t\telse {\n\t\t    if (s->length) {\n#ifdef USE_M17N\n\t\t\tclen = get_mclen(str + 1);\n\t\t\tif (plen == clen &&\n\t\t\t    !strncmp(str - plen, str + 1, plen)) {\n\t\t\t    for (i = 1; i <= plen; i++)\n\t\t\t\t*(prop - i) |= PE_BOLD;\n\t\t\t    str += 1 + clen;\n\t\t\t}\n\t\t\telse {\n\t\t\t    Strshrink(s, plen);\n\t\t\t    prop -= plen;\n#ifdef USE_ANSI_COLOR\n\t\t\t    if (color)\n\t\t\t\tcolor -= plen;\n#endif\n\t\t\t    if (plens == plens_buffer)\n\t\t\t\tplen = 0;\n\t\t\t    else\n\t\t\t\tplen = *(--plens);\n\t\t\t    str++;\n\t\t\t}\n#else\n\t\t\tif (*(str - 1) == *(str + 1)) {\n\t\t\t    *(prop - 1) |= PE_BOLD;\n\t\t\t    str += 2;\n\t\t\t}\n\t\t\telse {\n\t\t\t    Strshrink(s, 1);\n\t\t\t    prop--;\n#ifdef USE_ANSI_COLOR\n\t\t\t    if (color)\n\t\t\t\tcolor--;\n#endif\n\t\t\t    str++;\n\t\t\t}\n#endif\n\t\t    }\n\t\t    else {\n\t\t\tstr++;\n\t\t    }\n\t\t}\n\t\tif (str < endp)\n\t\t    bs = memchr(str, '\\b', endp - str);\n\t\tcontinue;\n\t    }\n#ifdef USE_ANSI_COLOR\n\t    else if (str > bs)\n\t\tbs = memchr(str, '\\b', endp - str);\n#endif\n\t}\n#ifdef USE_ANSI_COLOR\n\tif (es != NULL) {\n\t    if (str == es) {\n\t\tint ok = parse_ansi_color(&str, &ceffect, &cmode);\n\t\tif (str < endp)\n\t\t    es = memchr(str, ESC_CODE, endp - str);\n\t\tif (ok) {\n\t\t    if (cmode)\n\t\t\tcheck_color = TRUE;\n\t\t    continue;\n\t\t}\n\t    }\n\t    else if (str > es)\n\t\tes = memchr(str, ESC_CODE, endp - str);\n\t}\n#endif\n\n\tmode = get_mctype(str) | effect;\n#ifdef USE_ANSI_COLOR\n\tif (color) {\n\t    *(color++) = cmode;\n\t    mode |= ceffect;\n\t}\n#endif\n\t*(prop++) = mode;\n#ifdef USE_M17N\n\tplen = get_mclen(str);\n\tif (str + plen > endp)\n\t    plen = endp - str;\n\t*(plens++) = plen;\n\tif (plen > 1) {\n\t    mode = (mode & ~PC_WCHAR1) | PC_WCHAR2;\n\t    for (i = 1; i < plen; i++) {\n\t\t*(prop++) = mode;\n#ifdef USE_ANSI_COLOR\n\t\tif (color)\n\t\t    *(color++) = cmode;\n#endif\n\t    }\n\t    if (do_copy)\n\t\tStrcat_charp_n(s, (char *)str, plen);\n\t    str += plen;\n\t}\n\telse\n#endif\n\t{\n\t    if (do_copy)\n\t\tStrcat_char(s, (char)*str);\n\t    str++;\n\t}\n\teffect = PE_NORMAL;\n    }\n    *oprop = prop_buffer;\n#ifdef USE_ANSI_COLOR\n    if (ocolor)\n\t*ocolor = check_color ? color_buffer : NULL;\n#endif\n    return s;\n}",
  "abstract_func": "Str\ncheckType(Str VAR_0, Lineprop **VAR_1, Linecolor **VAR_2)\n{\n    Lineprop VAR_3;\n    Lineprop VAR_4 = VAR_5;\n    Lineprop *VAR_6;\n    static Lineprop *VAR_7 = NULL;\n    static int VAR_8 = 0;\n    char *VAR_9 = VAR_0->ptr, *VAR_10 = &VAR_0->ptr[VAR_0->length], *VAR_11 = NULL;\n#ifdef VAR_12\n    Lineprop VAR_13 = VAR_5;\n    Linecolor VAR_14 = 0;\n    int VAR_15 = FALSE;\n    Linecolor *VAR_16 = NULL;\n    static Linecolor *VAR_17 = NULL;\n    static int VAR_18 = 0;\n    char *VAR_19 = NULL;\n#endif\n    int VAR_20 = FALSE;\n#ifdef VAR_21\n    int VAR_22;\n    int VAR_23 = 0, VAR_24;\n    int *VAR_25 = NULL;\n    static int *VAR_26 = NULL;\n    static int VAR_27 = 0;\n#endif\n\n    if (VAR_8 < VAR_0->length) {\n\tVAR_8 = (VAR_0->length > VAR_28) ? VAR_0->length : VAR_28;\n\tVAR_7 = New_Reuse(Lineprop, VAR_7, VAR_8);\n    }\n    VAR_6 = VAR_7;\n#ifdef VAR_21\n    if (VAR_27 < VAR_0->length) {\n\tVAR_27 = (VAR_0->length > VAR_28) ? VAR_0->length : VAR_28;\n\tVAR_26 = New_Reuse(int, VAR_26, VAR_27);\n    }\n    VAR_25 = VAR_26;\n#endif\n\n    if (VAR_29) {\n\tVAR_11 = memchr(VAR_9, '\\b', VAR_0->length);\n#ifdef VAR_12\n\tif (VAR_2) {\n\t    VAR_19 = memchr(VAR_9, VAR_30, VAR_0->length);\n\t    if (VAR_19) {\n\t\tif (VAR_18 < VAR_0->length) {\n\t\t    VAR_18 = (VAR_0->length > VAR_28) ? VAR_0->length : VAR_28;\n\t\t    VAR_17 = New_Reuse(Linecolor, VAR_17,\n\t\t\t\t\t     VAR_18);\n\t\t}\n\t\tVAR_16 = VAR_17;\n\t    }\n\t}\n#endif\n\tif ((VAR_11 != NULL)\n#ifdef VAR_12\n\t    || (VAR_19 != NULL)\n#endif\n\t    ) {\n\t    char *VAR_31 = VAR_9, *VAR_32;\n\t    VAR_0 = Strnew_size(VAR_0->length);\n\t    VAR_20 = TRUE;\n\t    VAR_32 = VAR_10;\n\t    if (VAR_11 && VAR_32 > VAR_11 - 2)\n\t\tVAR_32 = VAR_11 - 2;\n#ifdef VAR_12\n\t    if (VAR_19 && VAR_32 > VAR_19 - 2)\n\t\tVAR_32 = VAR_19 - 2;\n#endif\n\t    for (; VAR_9 < VAR_32 && IS_ASCII(*VAR_9); VAR_9++) {\n\t\t*(VAR_6++) = VAR_5 | (IS_CNTRL(*VAR_9) ? VAR_33 : VAR_34);\n#ifdef VAR_12\n\t\tif (VAR_16)\n\t\t    *(VAR_16++) = 0;\n#endif\n#ifdef VAR_21\n\t\t*(VAR_25++) = VAR_23 = 1;\n#endif\n\t    }\n\t    Strcat_charp_n(VAR_0, VAR_31, (int)(VAR_9 - VAR_31));\n\t}\n    }\n    if (!VAR_20) {\n\tfor (; VAR_9 < VAR_10 && IS_ASCII(*VAR_9); VAR_9++) {\n\t    *(VAR_6++) = VAR_5 | (IS_CNTRL(*VAR_9) ? VAR_33 : VAR_34);\n#ifdef VAR_12\n\t    if (VAR_16)\n\t\t*(VAR_16++) = 0;\n#endif\n#ifdef VAR_21\n\t    *(VAR_25++) = VAR_23 = 1;\n#endif\n\t}\n    }\n\n    while (VAR_9 < VAR_10) {\n\tif (VAR_6 - VAR_7 >= VAR_8)\n\t    break;\n\tif (VAR_11 != NULL) {\n#ifdef VAR_21\n\t    if (VAR_9 == VAR_11 - 2 && !strncmp(VAR_9, \"__\\b\\b\", 4)) {\n\t\tVAR_9 += 4;\n\t\tVAR_4 = VAR_35;\n\t\tif (VAR_9 < VAR_10)\n\t\t    VAR_11 = memchr(VAR_9, '\\b', VAR_10 - VAR_9);\n\t\tcontinue;\n\t    }\n\t    else\n#endif\n\t    if (VAR_9 == VAR_11 - 1 && *VAR_9 == '_') {\n\t\tVAR_9 += 2;\n\t\tVAR_4 = VAR_35;\n\t\tif (VAR_9 < VAR_10)\n\t\t    VAR_11 = memchr(VAR_9, '\\b', VAR_10 - VAR_9);\n\t\tcontinue;\n\t    }\n\t    else if (VAR_9 == VAR_11) {\n\t\tif (*(VAR_9 + 1) == '_') {\n\t\t    if (VAR_0->length) {\n\t\t\tVAR_9 += 2;\n#ifdef VAR_21\n\t\t\tfor (VAR_22 = 1; VAR_22 <= VAR_23; VAR_22++)\n\t\t\t    *(VAR_6 - VAR_22) |= VAR_35;\n#else\n\t\t\t*(VAR_6 - 1) |= VAR_35;\n#endif\n\t\t    }\n\t\t    else {\n\t\t\tVAR_9++;\n\t\t    }\n\t\t}\n#ifdef VAR_21\n\t\telse if (!strncmp(VAR_9 + 1, \"\\b__\", 3)) {\n\t\t    if (VAR_0->length) {\n\t\t\tVAR_9 += (VAR_23 == 1) ? 3 : 4;\n\t\t\tfor (VAR_22 = 1; VAR_22 <= VAR_23; VAR_22++)\n\t\t\t    *(VAR_6 - VAR_22) |= VAR_35;\n\t\t    }\n\t\t    else {\n\t\t\tVAR_9 += 2;\n\t\t    }\n\t\t}\n\t\telse if (*(str + 1) == '\\b') {\n\t\t    if (VAR_0->length) {\n\t\t\tVAR_24 = get_mclen(str + 2);\n\t\t\tif (VAR_23 == VAR_24 &&\n\t\t\t    !strncmp(str - VAR_23, str + 2, VAR_23)) {\n\t\t\t    for (VAR_22 = 1; VAR_22 <= VAR_23; VAR_22++)\n\t\t\t\t*(VAR_6 - VAR_22) |= VAR_36;\n\t\t\t    str += 2 + VAR_24;\n\t\t\t}\n\t\t\telse {\n\t\t\t    Strshrink(VAR_0, VAR_23);\n\t\t\t    VAR_6 -= VAR_23;\n#ifdef VAR_12\n\t\t\t    if (VAR_16)\n\t\t\t\tVAR_16 -= VAR_23;\n#endif\n\t\t\t    if (VAR_25 == VAR_26)\n\t\t\t\tVAR_23 = 0;\n\t\t\t    else\n\t\t\t\tVAR_23 = *(--VAR_25);\n\t\t\t    str += 2;\n\t\t\t}\n\t\t    }\n\t\t    else {\n\t\t\tstr += 2;\n\t\t    }\n\t\t}\n#endif\n\t\telse {\n\t\t    if (VAR_0->length) {\n#ifdef VAR_21\n\t\t\tVAR_24 = get_mclen(str + 1);\n\t\t\tif (VAR_23 == VAR_24 &&\n\t\t\t    !strncmp(str - VAR_23, str + 1, VAR_23)) {\n\t\t\t    for (VAR_22 = 1; VAR_22 <= VAR_23; VAR_22++)\n\t\t\t\t*(VAR_6 - VAR_22) |= VAR_36;\n\t\t\t    str += 1 + VAR_24;\n\t\t\t}\n\t\t\telse {\n\t\t\t    Strshrink(VAR_0, VAR_23);\n\t\t\t    VAR_6 -= VAR_23;\n#ifdef VAR_12\n\t\t\t    if (VAR_16)\n\t\t\t\tVAR_16 -= VAR_23;\n#endif\n\t\t\t    if (VAR_25 == VAR_26)\n\t\t\t\tVAR_23 = 0;\n\t\t\t    else\n\t\t\t\tVAR_23 = *(--VAR_25);\n\t\t\t    str++;\n\t\t\t}\n#else\n\t\t\tif (*(str - 1) == *(str + 1)) {\n\t\t\t    *(VAR_6 - 1) |= VAR_36;\n\t\t\t    str += 2;\n\t\t\t}\n\t\t\telse {\n\t\t\t    Strshrink(VAR_0, 1);\n\t\t\t    VAR_6--;\n#ifdef VAR_12\n\t\t\t    if (VAR_16)\n\t\t\t\tVAR_16--;\n#endif\n\t\t\t    str++;\n\t\t\t}\n#endif\n\t\t    }\n\t\t    else {\n\t\t\tstr++;\n\t\t    }\n\t\t}\n\t\tif (str < VAR_10)\n\t\t    VAR_11 = memchr(str, '\\b', VAR_10 - str);\n\t\tcontinue;\n\t    }\n#ifdef VAR_12\n\t    else if (str > VAR_11)\n\t\tVAR_11 = memchr(str, '\\b', VAR_10 - str);\n#endif\n\t}\n#ifdef VAR_12\n\tif (VAR_19 != NULL) {\n\t    if (str == VAR_19) {\n\t\tint VAR_37 = parse_ansi_color(&str, &VAR_13, &VAR_14);\n\t\tif (str < VAR_10)\n\t\t    VAR_19 = memchr(str, VAR_30, VAR_10 - str);\n\t\tif (VAR_37) {\n\t\t    if (VAR_14)\n\t\t\tVAR_15 = TRUE;\n\t\t    continue;\n\t\t}\n\t    }\n\t    else if (str > VAR_19)\n\t\tVAR_19 = memchr(str, VAR_30, VAR_10 - str);\n\t}\n#endif\n\n\tVAR_3 = get_mctype(str) | VAR_4;\n#ifdef VAR_12\n\tif (VAR_16) {\n\t    *(VAR_16++) = VAR_14;\n\t    VAR_3 |= VAR_13;\n\t}\n#endif\n\t*(VAR_6++) = VAR_3;\n#ifdef VAR_21\n\tVAR_23 = get_mclen(str);\n\tif (str + VAR_23 > VAR_10)\n\t    VAR_23 = VAR_10 - str;\n\t*(VAR_25++) = VAR_23;\n\tif (VAR_23 > 1) {\n\t    VAR_3 = (VAR_3 & ~VAR_38) | VAR_39;\n\t    for (VAR_22 = 1; VAR_22 < VAR_23; VAR_22++) {\n\t\t*(VAR_6++) = VAR_3;\n#ifdef VAR_12\n\t\tif (VAR_16)\n\t\t    *(VAR_16++) = VAR_14;\n#endif\n\t    }\n\t    if (VAR_20)\n\t\tStrcat_charp_n(VAR_0, (char *)str, VAR_23);\n\t    str += VAR_23;\n\t}\n\telse\n#endif\n\t{\n\t    if (VAR_20)\n\t\tStrcat_char(VAR_0, (char)*str);\n\t    str++;\n\t}\n\tVAR_4 = VAR_5;\n    }\n    *VAR_1 = VAR_7;\n#ifdef VAR_12\n    if (VAR_2)\n\t*VAR_2 = VAR_15 ? VAR_17 : NULL;\n#endif\n    return VAR_0;\n}",
  "func_graph_path": "tats/w3m/edc602651c506aeeb60544b55534dd1722a340d3/etc.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -157,7 +157,10 @@\n \t\t\t    if (color)\n \t\t\t\tcolor -= plen;\n #endif\n-\t\t\t    plen = *(--plens);\n+\t\t\t    if (plens == plens_buffer)\n+\t\t\t\tplen = 0;\n+\t\t\t    else\n+\t\t\t\tplen = *(--plens);\n \t\t\t    str += 2;\n \t\t\t}\n \t\t    }\n@@ -183,7 +186,10 @@\n \t\t\t    if (color)\n \t\t\t\tcolor -= plen;\n #endif\n-\t\t\t    plen = *(--plens);\n+\t\t\t    if (plens == plens_buffer)\n+\t\t\t\tplen = 0;\n+\t\t\t    else\n+\t\t\t\tplen = *(--plens);\n \t\t\t    str++;\n \t\t\t}\n #else",
  "diff_line_info": {
    "deleted_lines": [
      "\t\t\t    plen = *(--plens);",
      "\t\t\t    plen = *(--plens);"
    ],
    "added_lines": [
      "\t\t\t    if (plens == plens_buffer)",
      "\t\t\t\tplen = 0;",
      "\t\t\t    else",
      "\t\t\t\tplen = *(--plens);",
      "\t\t\t    if (plens == plens_buffer)",
      "\t\t\t\tplen = 0;",
      "\t\t\t    else",
      "\t\t\t\tplen = *(--plens);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/tats/w3m/pull/273",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/tats/w3m/pull/273: 403 Client Error: Forbidden for url: https://api.github.com/repos/tats/w3m/pulls/273",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "The commit addresses an out-of-bounds access vulnerability by fixing how the buffer pointer is managed during backspace handling. The code changes add necessary bounds checks, preventing potential security exploits.\n\n**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 1.0"
}