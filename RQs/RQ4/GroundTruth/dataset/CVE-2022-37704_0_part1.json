{
  "cve_id": "CVE-2022-37704",
  "cwe_ids": [
    "CWE-77"
  ],
  "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H",
  "cvss_is_v3": true,
  "repo_name": "zmanda/amanda",
  "commit_msg": "CVE-2022-37704 - privilege escaltion form amandabackup user to root -fix",
  "commit_hash": "e890d08e16ea0621966a7ae35cce53ccb44a472e",
  "git_url": "https://github.com/zmanda/amanda/commit/e890d08e16ea0621966a7ae35cce53ccb44a472e",
  "file_path": "client-src/rundump.c",
  "func_name": "main",
  "func_before": "int\nmain(\n    int\t\targc,\n    char **\targv)\n{\n#ifndef ERRMSG\n    char *dump_program;\n    int i;\n    char *e;\n    char *cmdline;\n    GPtrArray *array = g_ptr_array_new();\n    gchar **strings;\n    char  **env;\n#endif /* ERRMSG */\n\n    glib_init();\n\n    if (argc > 1 && argv[1] && g_str_equal(argv[1], \"--version\")) {\n\tprintf(\"rundump-%s\\n\", VERSION);\n\treturn (0);\n    }\n\n    /*\n     * Configure program for internationalization:\n     *   1) Only set the message locale for now.\n     *   2) Set textdomain for all amanda related programs to \"amanda\"\n     *      We don't want to be forced to support dozens of message catalogs.\n     */  \n    setlocale(LC_MESSAGES, \"C\");\n    textdomain(\"amanda\"); \n\n    safe_fd(-1, 0);\n    safe_cd();\n\n    set_pname(\"rundump\");\n\n    /* Don't die when child closes pipe */\n    signal(SIGPIPE, SIG_IGN);\n\n    dbopen(DBG_SUBDIR_CLIENT);\n    config_init(CONFIG_INIT_CLIENT|CONFIG_INIT_GLOBAL, NULL);\n\n    if (argc < 3) {\n\terror(_(\"Need at least 3 arguments\\n\"));\n\t/*NOTREACHED*/\n    }\n\n    dbprintf(_(\"version %s\\n\"), VERSION);\n\n#ifdef ERRMSG\t\t\t\t\t\t\t/* { */\n\n    g_fprintf(stderr, ERRMSG);\n    dbprintf(\"%s: %s\", argv[0], ERRMSG);\n    dbclose();\n    return 1;\n\n#else\t\t\t\t\t\t\t\t/* } { */\n\n#ifdef WANT_SETUID_CLIENT\n    check_running_as(RUNNING_AS_CLIENT_LOGIN | RUNNING_AS_UID_ONLY);\n    if (!become_root()) {\n\terror(_(\"error [%s could not become root (is the setuid bit set?)]\\n\"), get_pname());\n\t/*NOTREACHED*/\n    }\n#else\n    check_running_as(RUNNING_AS_CLIENT_LOGIN);\n#endif\n\n    /* skip argv[0] */\n    argc--;\n    argv++;\n\n    dbprintf(_(\"config: %s\\n\"), argv[0]);\n    if (!g_str_equal(argv[0], \"NOCONFIG\"))\n\tdbrename(argv[0], DBG_SUBDIR_CLIENT);\n    argc--;\n    argv++;\n\n#ifdef XFSDUMP\n\n    if (g_str_equal(argv[0], \"xfsdump\"))\n        dump_program = XFSDUMP;\n    else /* strcmp(argv[0], \"xfsdump\") != 0 */\n\n#endif\n\n#ifdef VXDUMP\n\n    if (g_str_equal(argv[0], \"vxdump\"))\n        dump_program = VXDUMP;\n    else /* strcmp(argv[0], \"vxdump\") != 0 */\n\n#endif\n\n#ifdef VDUMP\n\n    if (g_str_equal(argv[0], \"vdump\"))\n\tdump_program = VDUMP;\n    else /* strcmp(argv[0], \"vdump\") != 0 */\n\n#endif\n\n#if defined(DUMP)\n        dump_program = DUMP;\n#else\n# if defined(XFSDUMP)\n        dump_program = XFSDUMP;\n# else\n#  if defined(VXDUMP)\n\tdump_program = VXDUMP;\n#  else\n        dump_program = \"dump\";\n#  endif\n# endif\n#endif\n\n\n    /*\n     * Build the array\n     */\n\n    g_ptr_array_add(array, g_strdup(dump_program));\n\n    for (i = 1; argv[i]; i++)\n        g_ptr_array_add(array, quote_string(argv[i]));\n\n    g_ptr_array_add(array, NULL);\n    strings = (gchar **)g_ptr_array_free(array, FALSE);\n\n    cmdline = g_strjoinv(\" \", strings);\n    g_strfreev(strings);\n\n    dbprintf(_(\"running: %s\\n\"), cmdline);\n    amfree(cmdline);\n\n    env = safe_env();\n    execve(dump_program, argv, env);\n    free_env(env);\n\n    e = strerror(errno);\n    dbprintf(_(\"failed (%s)\\n\"), e);\n    dbclose();\n\n    g_fprintf(stderr, _(\"rundump: could not exec %s: %s\\n\"), dump_program, e);\n    return 1;\n#endif\t\t\t\t\t\t\t\t/* } */\n}",
  "abstract_func_before": "int\nmain(\n    int\t\tVAR_0,\n    char **\tVAR_1)\n{\n#ifndef VAR_2\n    char *VAR_3;\n    int VAR_4;\n    char *VAR_5;\n    char *VAR_6;\n    GPtrArray *VAR_7 = g_ptr_array_new();\n    gchar **VAR_8;\n    char  **VAR_9;\n#endif /* COMMENT_0 */\n\n    glib_init();\n\n    if (VAR_0 > 1 && VAR_1[1] && g_str_equal(VAR_1[1], \"--version\")) {\n\tprintf(\"rundump-%s\\n\", VAR_10);\n\treturn (0);\n    }\n\n    /* COMMENT_1 */\n                                                  \n                                                \n                                                                      \n                                                                             \n         \n    setlocale(VAR_11, \"C\");\n    textdomain(\"amanda\"); \n\n    safe_fd(-1, 0);\n    safe_cd();\n\n    set_pname(\"rundump\");\n\n    /* COMMENT_7 */\n    signal(VAR_12, VAR_13);\n\n    dbopen(VAR_14);\n    config_init(VAR_15|VAR_16, NULL);\n\n    if (VAR_0 < 3) {\n\terror(_(\"Need at least 3 arguments\\n\"));\n\t/* COMMENT_8 */\n    }\n\n    dbprintf(_(\"version %s\\n\"), VAR_10);\n\n#ifdef VAR_2\t\t\t\t\t\t\t/* COMMENT_9 */\n\n    g_fprintf(VAR_17, VAR_2);\n    dbprintf(\"%s: %s\", VAR_1[0], VAR_2);\n    dbclose();\n    return 1;\n\n#else\t\t\t\t\t\t\t\t/* COMMENT_10 */\n\n#ifdef VAR_18\n    check_running_as(VAR_19 | VAR_20);\n    if (!become_root()) {\n\terror(_(\"error [%s could not become root (is the setuid bit set?)]\\n\"), get_pname());\n\t/* COMMENT_8 */\n    }\n#else\n    check_running_as(VAR_19);\n#endif\n\n    /* COMMENT_11 */\n    VAR_0--;\n    VAR_1++;\n\n    dbprintf(_(\"config: %s\\n\"), VAR_1[0]);\n    if (!g_str_equal(VAR_1[0], \"NOCONFIG\"))\n\tdbrename(VAR_1[0], VAR_14);\n    VAR_0--;\n    VAR_1++;\n\n#ifdef VAR_21\n\n    if (g_str_equal(VAR_1[0], \"xfsdump\"))\n        VAR_3 = VAR_21;\n    else /* COMMENT_12 */\n\n#endif\n\n#ifdef VAR_22\n\n    if (g_str_equal(VAR_1[0], \"vxdump\"))\n        VAR_3 = VAR_22;\n    else /* COMMENT_13 */\n\n#endif\n\n#ifdef VAR_23\n\n    if (g_str_equal(VAR_1[0], \"vdump\"))\n\tVAR_3 = VAR_23;\n    else /* COMMENT_14 */\n\n#endif\n\n#if defined(VAR_24)\n        VAR_3 = VAR_24;\n#else\n# if defined(VAR_21)\n        VAR_3 = VAR_21;\n# else\n#  if defined(VAR_22)\n\tVAR_3 = VAR_22;\n#  else\n        VAR_3 = \"dump\";\n#  endif\n# endif\n#endif\n\n\n    /* COMMENT_15 */\n                      \n       \n\n    g_ptr_array_add(VAR_7, g_strdup(VAR_3));\n\n    for (VAR_4 = 1; VAR_1[VAR_4]; VAR_4++)\n        g_ptr_array_add(VAR_7, quote_string(VAR_1[VAR_4]));\n\n    g_ptr_array_add(VAR_7, NULL);\n    VAR_8 = (gchar **)g_ptr_array_free(VAR_7, FALSE);\n\n    VAR_6 = g_strjoinv(\" \", VAR_8);\n    g_strfreev(VAR_8);\n\n    dbprintf(_(\"running: %s\\n\"), VAR_6);\n    amfree(VAR_6);\n\n    VAR_9 = safe_env();\n    execve(VAR_3, VAR_1, VAR_9);\n    free_env(VAR_9);\n\n    VAR_5 = strerror(VAR_25);\n    dbprintf(_(\"failed (%s)\\n\"), VAR_5);\n    dbclose();\n\n    g_fprintf(VAR_17, _(\"rundump: could not exec %s: %s\\n\"), VAR_3, VAR_5);\n    return 1;\n#endif\t\t\t\t\t\t\t\t/* COMMENT_18 */\n}",
  "func_graph_path_before": "zmanda/amanda/e890d08e16ea0621966a7ae35cce53ccb44a472e/rundump.c/vul/before/0.json",
  "func": "int\nmain(\n    int\t\targc,\n    char **\targv)\n{\n#ifndef ERRMSG\n    char *dump_program;\n    int i;\n    char *e;\n    char *cmdline;\n    GPtrArray *array = g_ptr_array_new();\n    gchar **strings;\n    char  **env;\n#endif /* ERRMSG */\n\n    glib_init();\n\n    if (argc > 1 && argv[1] && g_str_equal(argv[1], \"--version\")) {\n\tprintf(\"rundump-%s\\n\", VERSION);\n\treturn (0);\n    }\n\n    /*\n     * Configure program for internationalization:\n     *   1) Only set the message locale for now.\n     *   2) Set textdomain for all amanda related programs to \"amanda\"\n     *      We don't want to be forced to support dozens of message catalogs.\n     */  \n    setlocale(LC_MESSAGES, \"C\");\n    textdomain(\"amanda\"); \n\n    safe_fd(-1, 0);\n    safe_cd();\n\n    set_pname(\"rundump\");\n\n    /* Don't die when child closes pipe */\n    signal(SIGPIPE, SIG_IGN);\n\n    dbopen(DBG_SUBDIR_CLIENT);\n    config_init(CONFIG_INIT_CLIENT|CONFIG_INIT_GLOBAL, NULL);\n\n    if (argc < 3) {\n\terror(_(\"Need at least 3 arguments\\n\"));\n\t/*NOTREACHED*/\n    }\n\n    dbprintf(_(\"version %s\\n\"), VERSION);\n\n#ifdef ERRMSG\t\t\t\t\t\t\t/* { */\n\n    g_fprintf(stderr, ERRMSG);\n    dbprintf(\"%s: %s\", argv[0], ERRMSG);\n    dbclose();\n    return 1;\n\n#else\t\t\t\t\t\t\t\t/* } { */\n\n#ifdef WANT_SETUID_CLIENT\n    check_running_as(RUNNING_AS_CLIENT_LOGIN | RUNNING_AS_UID_ONLY);\n    if (!become_root()) {\n\terror(_(\"error [%s could not become root (is the setuid bit set?)]\\n\"), get_pname());\n\t/*NOTREACHED*/\n    }\n#else\n    check_running_as(RUNNING_AS_CLIENT_LOGIN);\n#endif\n\n    /* skip argv[0] */\n    argc--;\n    argv++;\n\n    dbprintf(_(\"config: %s\\n\"), argv[0]);\n    if (!g_str_equal(argv[0], \"NOCONFIG\"))\n\tdbrename(argv[0], DBG_SUBDIR_CLIENT);\n    argc--;\n    argv++;\n\n#ifdef XFSDUMP\n\n    if (g_str_equal(argv[0], \"xfsdump\"))\n        dump_program = XFSDUMP;\n    else /* strcmp(argv[0], \"xfsdump\") != 0 */\n\n#endif\n\n#ifdef VXDUMP\n\n    if (g_str_equal(argv[0], \"vxdump\"))\n        dump_program = VXDUMP;\n    else /* strcmp(argv[0], \"vxdump\") != 0 */\n\n#endif\n\n#ifdef VDUMP\n\n    if (g_str_equal(argv[0], \"vdump\"))\n\tdump_program = VDUMP;\n    else /* strcmp(argv[0], \"vdump\") != 0 */\n\n#endif\n\n#if defined(DUMP)\n        dump_program = DUMP;\n        validate_dump_option(argc, argv);\n#else\n# if defined(XFSDUMP)\n        dump_program = XFSDUMP;\n        validate_xfsdump_options(argc, argv);\n# else\n#  if defined(VXDUMP)\n\tdump_program = VXDUMP;\n#  else\n        dump_program = \"dump\";\n        validate_dump_option(argc, argv);\n#  endif\n# endif\n#endif\n\n\n    /*\n     * Build the array\n     */\n\n    g_ptr_array_add(array, g_strdup(dump_program));\n\n    for (i = 1; argv[i]; i++)\n        g_ptr_array_add(array, quote_string(argv[i]));\n\n    g_ptr_array_add(array, NULL);\n    strings = (gchar **)g_ptr_array_free(array, FALSE);\n\n    cmdline = g_strjoinv(\" \", strings);\n    g_strfreev(strings);\n\n    dbprintf(_(\"running: %s\\n\"), cmdline);\n    amfree(cmdline);\n\n    env = safe_env();\n    execve(dump_program, argv, env);\n    free_env(env);\n\n    e = strerror(errno);\n    dbprintf(_(\"failed (%s)\\n\"), e);\n    dbclose();\n\n    g_fprintf(stderr, _(\"rundump: could not exec %s: %s\\n\"), dump_program, e);\n    return 1;\n#endif\t\t\t\t\t\t\t\t/* } */\n}",
  "abstract_func": "int\nmain(\n    int\t\tVAR_0,\n    char **\tVAR_1)\n{\n#ifndef VAR_2\n    char *VAR_3;\n    int VAR_4;\n    char *VAR_5;\n    char *VAR_6;\n    GPtrArray *VAR_7 = g_ptr_array_new();\n    gchar **VAR_8;\n    char  **VAR_9;\n#endif /* COMMENT_0 */\n\n    glib_init();\n\n    if (VAR_0 > 1 && VAR_1[1] && g_str_equal(VAR_1[1], \"--version\")) {\n\tprintf(\"rundump-%s\\n\", VAR_10);\n\treturn (0);\n    }\n\n    /* COMMENT_1 */\n                                                  \n                                                \n                                                                      \n                                                                             \n         \n    setlocale(VAR_11, \"C\");\n    textdomain(\"amanda\"); \n\n    safe_fd(-1, 0);\n    safe_cd();\n\n    set_pname(\"rundump\");\n\n    /* COMMENT_7 */\n    signal(VAR_12, VAR_13);\n\n    dbopen(VAR_14);\n    config_init(VAR_15|VAR_16, NULL);\n\n    if (VAR_0 < 3) {\n\terror(_(\"Need at least 3 arguments\\n\"));\n\t/* COMMENT_8 */\n    }\n\n    dbprintf(_(\"version %s\\n\"), VAR_10);\n\n#ifdef VAR_2\t\t\t\t\t\t\t/* COMMENT_9 */\n\n    g_fprintf(VAR_17, VAR_2);\n    dbprintf(\"%s: %s\", VAR_1[0], VAR_2);\n    dbclose();\n    return 1;\n\n#else\t\t\t\t\t\t\t\t/* COMMENT_10 */\n\n#ifdef VAR_18\n    check_running_as(VAR_19 | VAR_20);\n    if (!become_root()) {\n\terror(_(\"error [%s could not become root (is the setuid bit set?)]\\n\"), get_pname());\n\t/* COMMENT_8 */\n    }\n#else\n    check_running_as(VAR_19);\n#endif\n\n    /* COMMENT_11 */\n    VAR_0--;\n    VAR_1++;\n\n    dbprintf(_(\"config: %s\\n\"), VAR_1[0]);\n    if (!g_str_equal(VAR_1[0], \"NOCONFIG\"))\n\tdbrename(VAR_1[0], VAR_14);\n    VAR_0--;\n    VAR_1++;\n\n#ifdef VAR_21\n\n    if (g_str_equal(VAR_1[0], \"xfsdump\"))\n        VAR_3 = VAR_21;\n    else /* COMMENT_12 */\n\n#endif\n\n#ifdef VAR_22\n\n    if (g_str_equal(VAR_1[0], \"vxdump\"))\n        VAR_3 = VAR_22;\n    else /* COMMENT_13 */\n\n#endif\n\n#ifdef VAR_23\n\n    if (g_str_equal(VAR_1[0], \"vdump\"))\n\tVAR_3 = VAR_23;\n    else /* COMMENT_14 */\n\n#endif\n\n#if defined(VAR_24)\n        VAR_3 = VAR_24;\n        validate_dump_option(VAR_0, VAR_1);\n#else\n# if defined(VAR_21)\n        VAR_3 = VAR_21;\n        validate_xfsdump_options(VAR_0, VAR_1);\n# else\n#  if defined(VAR_22)\n\tVAR_3 = VAR_22;\n#  else\n        VAR_3 = \"dump\";\n        validate_dump_option(VAR_0, VAR_1);\n#  endif\n# endif\n#endif\n\n\n    /* COMMENT_15 */\n                      \n       \n\n    g_ptr_array_add(VAR_7, g_strdup(VAR_3));\n\n    for (VAR_4 = 1; VAR_1[VAR_4]; VAR_4++)\n        g_ptr_array_add(VAR_7, quote_string(VAR_1[VAR_4]));\n\n    g_ptr_array_add(VAR_7, NULL);\n    VAR_8 = (gchar **)g_ptr_array_free(VAR_7, FALSE);\n\n    VAR_6 = g_strjoinv(\" \", VAR_8);\n    g_strfreev(VAR_8);\n\n    dbprintf(_(\"running: %s\\n\"), VAR_6);\n    amfree(VAR_6);\n\n    VAR_9 = safe_env();\n    execve(VAR_3, VAR_1, VAR_9);\n    free_env(VAR_9);\n\n    VAR_5 = strerror(VAR_25);\n    dbprintf(_(\"failed (%s)\\n\"), VAR_5);\n    dbclose();\n\n    g_fprintf(VAR_17, _(\"rundump: could not exec %s: %s\\n\"), VAR_3, VAR_5);\n    return 1;\n#endif\t\t\t\t\t\t\t\t/* COMMENT_18 */\n}",
  "func_graph_path": "zmanda/amanda/e890d08e16ea0621966a7ae35cce53ccb44a472e/rundump.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -102,14 +102,17 @@\n \n #if defined(DUMP)\n         dump_program = DUMP;\n+        validate_dump_option(argc, argv);\n #else\n # if defined(XFSDUMP)\n         dump_program = XFSDUMP;\n+        validate_xfsdump_options(argc, argv);\n # else\n #  if defined(VXDUMP)\n \tdump_program = VXDUMP;\n #  else\n         dump_program = \"dump\";\n+        validate_dump_option(argc, argv);\n #  endif\n # endif\n #endif",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "        validate_dump_option(argc, argv);",
      "        validate_xfsdump_options(argc, argv);",
      "        validate_dump_option(argc, argv);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/zmanda/amanda/pull/197",
  "description": "Failed to get PR details: HTTP Request Error for PR https://github.com/zmanda/amanda/pull/197: 403 Client Error: Forbidden for url: https://api.github.com/repos/zmanda/amanda/pulls/197",
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix;  \n**Confidence:** 1.0"
}