{
  "cve_id": "CVE-2015-3151",
  "cwe_ids": [
    "CWE-22"
  ],
  "cvss_vector": "AV:L/AC:L/Au:N/C:C/I:C/A:C",
  "cvss_is_v3": false,
  "repo_name": "abrt/libreport",
  "commit_msg": "dd: harden functions against directory traversal issues\n\nTest correctness of all accessed dump dir files in all dd* functions.\nBefore this commit, the callers were allowed to pass strings like\n\"../../etc/shadow\" in the filename argument of all dd* functions.\n\nRelated: #1214457\n\nSigned-off-by: Jakub Filak <jfilak@redhat.com>",
  "commit_hash": "239c4f7d1f47265526b39ad70106767d00805277",
  "git_url": "https://github.com/abrt/libreport/commit/239c4f7d1f47265526b39ad70106767d00805277",
  "file_path": "src/lib/dump_dir.c",
  "func_name": "dd_exist",
  "func_before": "int dd_exist(const struct dump_dir *dd, const char *path)\n{\n    char *full_path = concat_path_file(dd->dd_dirname, path);\n    int ret = exist_file_dir(full_path);\n    free(full_path);\n    return ret;\n}",
  "abstract_func_before": "int dd_exist(const struct dump_dir *VAR_0, const char *VAR_1)\n{\n    char *VAR_2 = concat_path_file(VAR_0->dd_dirname, VAR_1);\n    int VAR_3 = exist_file_dir(VAR_2);\n    free(VAR_2);\n    return VAR_3;\n}",
  "func_graph_path_before": "abrt/libreport/239c4f7d1f47265526b39ad70106767d00805277/dump_dir.c/vul/before/2.json",
  "func": "int dd_exist(const struct dump_dir *dd, const char *path)\n{\n    if (!str_is_correct_filename(path))\n        error_msg_and_die(\"Cannot test existence. '%s' is not a valid file name\", path);\n\n    char *full_path = concat_path_file(dd->dd_dirname, path);\n    int ret = exist_file_dir(full_path);\n    free(full_path);\n    return ret;\n}",
  "abstract_func": "int dd_exist(const struct dump_dir *VAR_0, const char *VAR_1)\n{\n    if (!str_is_correct_filename(VAR_1))\n        error_msg_and_die(\"Cannot test existence. '%s' is not a valid file name\", VAR_1);\n\n    char *VAR_2 = concat_path_file(VAR_0->dd_dirname, VAR_1);\n    int VAR_3 = exist_file_dir(VAR_2);\n    free(VAR_2);\n    return VAR_3;\n}",
  "func_graph_path": "abrt/libreport/239c4f7d1f47265526b39ad70106767d00805277/dump_dir.c/vul/after/2.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,5 +1,8 @@\n int dd_exist(const struct dump_dir *dd, const char *path)\n {\n+    if (!str_is_correct_filename(path))\n+        error_msg_and_die(\"Cannot test existence. '%s' is not a valid file name\", path);\n+\n     char *full_path = concat_path_file(dd->dd_dirname, path);\n     int ret = exist_file_dir(full_path);\n     free(full_path);",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "    if (!str_is_correct_filename(path))",
      "        error_msg_and_die(\"Cannot test existence. '%s' is not a valid file name\", path);",
      ""
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/abrt/libreport/pull/343",
  "description": {
    "pr_info": {
      "title": "RHEL7: copy file chown",
      "number": 343
    },
    "comment": [
      "Needed to avoid race-conditions between copy & chown.\n\nRelated: #1211835\n\nSigned-off-by: Jakub Filak jfilak@redhat.com\n",
      "Went through the code and it seems to mitigate time of check / time of use race conditions and improve malicious path handling. Ack.\n"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix  \n**Confidence:** 0.95"
}