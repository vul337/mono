{
  "cve_id": "CVE-2017-11462",
  "cwe_ids": [
    "CWE-415"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "krb5",
  "commit_msg": "Preserve GSS context on init/accept failure\n\nAfter gss_init_sec_context() or gss_accept_sec_context() has created a\ncontext, don't delete the mechglue context on failures from subsequent\ncalls, even if the mechanism deletes the mech-specific context (which\nis allowed by RFC 2744 but not preferred).  Check for union contexts\nwith no mechanism context in each GSS function which accepts a\ngss_ctx_id_t.\n\nCVE-2017-11462:\n\nRFC 2744 permits a GSS-API implementation to delete an existing\nsecurity context on a second or subsequent call to\ngss_init_sec_context() or gss_accept_sec_context() if the call results\nin an error.  This API behavior has been found to be dangerous,\nleading to the possibility of memory errors in some callers.  For\nsafety, GSS-API implementations should instead preserve existing\nsecurity contexts on error until the caller deletes them.\n\nAll versions of MIT krb5 prior to this change may delete acceptor\ncontexts on error.  Versions 1.13.4 through 1.13.7, 1.14.1 through\n1.14.5, and 1.15 through 1.15.1 may also delete initiator contexts on\nerror.\n\nticket: 8598 (new)\ntarget_version: 1.15-next\ntarget_version: 1.14-next\ntags: pullup",
  "commit_hash": "56f7b1bc95a2a3eeb420e069e7655fb181ade5cf",
  "git_url": "https://github.com/krb5/krb5/commit/56f7b1bc95a2a3eeb420e069e7655fb181ade5cf",
  "file_path": "src/lib/gssapi/mechglue/g_wrap_iov.c",
  "func_name": "gss_get_mic_iov",
  "func_before": "OM_uint32 KRB5_CALLCONV\ngss_get_mic_iov(OM_uint32 *minor_status, gss_ctx_id_t context_handle,\n\t\tgss_qop_t qop_req, gss_iov_buffer_desc *iov, int iov_count)\n{\n    OM_uint32 status;\n    gss_union_ctx_id_t ctx;\n    gss_mechanism mech;\n\n    status = val_wrap_iov_args(minor_status, context_handle, 0, qop_req, NULL,\n\t\t\t       iov, iov_count);\n    if (status != GSS_S_COMPLETE)\n\treturn status;\n\n    /* Select the approprate underlying mechanism routine and call it. */\n    ctx = (gss_union_ctx_id_t)context_handle;\n    mech = gssint_get_mechanism(ctx->mech_type);\n    if (mech == NULL)\n\treturn GSS_S_BAD_MECH;\n    if (mech->gss_get_mic_iov == NULL)\n\treturn GSS_S_UNAVAILABLE;\n    status = mech->gss_get_mic_iov(minor_status, ctx->internal_ctx_id, qop_req,\n\t\t\t\t   iov, iov_count);\n    if (status != GSS_S_COMPLETE)\n\tmap_error(minor_status, mech);\n    return status;\n}",
  "abstract_func_before": "OM_uint32 VAR_0\ngss_get_mic_iov(OM_uint32 *VAR_1, gss_ctx_id_t VAR_2,\n\t\tgss_qop_t VAR_3, gss_iov_buffer_desc *VAR_4, int VAR_5)\n{\n    OM_uint32 VAR_6;\n    gss_union_ctx_id_t VAR_7;\n    gss_mechanism VAR_8;\n\n    VAR_6 = val_wrap_iov_args(VAR_1, VAR_2, 0, VAR_3, NULL,\n\t\t\t       VAR_4, VAR_5);\n    if (VAR_6 != VAR_9)\n\treturn VAR_6;\n\n    /* COMMENT_0 */\n    VAR_7 = (gss_union_ctx_id_t)VAR_2;\n    VAR_8 = gssint_get_mechanism(VAR_7->mech_type);\n    if (VAR_8 == NULL)\n\treturn VAR_10;\n    if (VAR_8->gss_get_mic_iov == NULL)\n\treturn VAR_11;\n    VAR_6 = VAR_8->gss_get_mic_iov(VAR_1, VAR_7->internal_ctx_id, VAR_3,\n\t\t\t\t   VAR_4, VAR_5);\n    if (VAR_6 != VAR_9)\n\tmap_error(VAR_1, VAR_8);\n    return VAR_6;\n}",
  "func_graph_path_before": null,
  "func": "OM_uint32 KRB5_CALLCONV\ngss_get_mic_iov(OM_uint32 *minor_status, gss_ctx_id_t context_handle,\n\t\tgss_qop_t qop_req, gss_iov_buffer_desc *iov, int iov_count)\n{\n    OM_uint32 status;\n    gss_union_ctx_id_t ctx;\n    gss_mechanism mech;\n\n    status = val_wrap_iov_args(minor_status, context_handle, 0, qop_req, NULL,\n\t\t\t       iov, iov_count);\n    if (status != GSS_S_COMPLETE)\n\treturn status;\n\n    /* Select the approprate underlying mechanism routine and call it. */\n    ctx = (gss_union_ctx_id_t)context_handle;\n    if (ctx->internal_ctx_id == GSS_C_NO_CONTEXT)\n\treturn GSS_S_NO_CONTEXT;\n    mech = gssint_get_mechanism(ctx->mech_type);\n    if (mech == NULL)\n\treturn GSS_S_BAD_MECH;\n    if (mech->gss_get_mic_iov == NULL)\n\treturn GSS_S_UNAVAILABLE;\n    status = mech->gss_get_mic_iov(minor_status, ctx->internal_ctx_id, qop_req,\n\t\t\t\t   iov, iov_count);\n    if (status != GSS_S_COMPLETE)\n\tmap_error(minor_status, mech);\n    return status;\n}",
  "abstract_func": "OM_uint32 VAR_0\ngss_get_mic_iov(OM_uint32 *VAR_1, gss_ctx_id_t VAR_2,\n\t\tgss_qop_t VAR_3, gss_iov_buffer_desc *VAR_4, int VAR_5)\n{\n    OM_uint32 VAR_6;\n    gss_union_ctx_id_t VAR_7;\n    gss_mechanism VAR_8;\n\n    VAR_6 = val_wrap_iov_args(VAR_1, VAR_2, 0, VAR_3, NULL,\n\t\t\t       VAR_4, VAR_5);\n    if (VAR_6 != VAR_9)\n\treturn VAR_6;\n\n    /* COMMENT_0 */\n    VAR_7 = (gss_union_ctx_id_t)VAR_2;\n    if (VAR_7->internal_ctx_id == VAR_10)\n\treturn VAR_11;\n    VAR_8 = gssint_get_mechanism(VAR_7->mech_type);\n    if (VAR_8 == NULL)\n\treturn VAR_12;\n    if (VAR_8->gss_get_mic_iov == NULL)\n\treturn VAR_13;\n    VAR_6 = VAR_8->gss_get_mic_iov(VAR_1, VAR_7->internal_ctx_id, VAR_3,\n\t\t\t\t   VAR_4, VAR_5);\n    if (VAR_6 != VAR_9)\n\tmap_error(VAR_1, VAR_8);\n    return VAR_6;\n}",
  "func_graph_path": null,
  "diff_func": "--- func_before\n+++ func_after\n@@ -13,6 +13,8 @@\n \n     /* Select the approprate underlying mechanism routine and call it. */\n     ctx = (gss_union_ctx_id_t)context_handle;\n+    if (ctx->internal_ctx_id == GSS_C_NO_CONTEXT)\n+\treturn GSS_S_NO_CONTEXT;\n     mech = gssint_get_mechanism(ctx->mech_type);\n     if (mech == NULL)\n \treturn GSS_S_BAD_MECH;",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "    if (ctx->internal_ctx_id == GSS_C_NO_CONTEXT)",
      "\treturn GSS_S_NO_CONTEXT;"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/krb5/krb5/pull/677",
  "description": {
    "pr_info": {
      "title": "Preserve GSS context on init/accept failure",
      "number": 677
    },
    "comment": [
      "[@frozencemetery: please run interposer tests against this PR]\r\n\r\nAfter gss_init_sec_context() or gss_accept_sec_context() has created a\r\ncontext, don't delete the mechglue context on failures from subsequent\r\ncalls, even if the mechanism deletes the mech-specific context (which\r\nis allowed by RFC 2744 but not preferred).  Check for union contexts\r\nwith no mechanism context in each GSS function which accepts a\r\ngss_ctx_id_t.\r\n",
      "Interposer tests and gssproxy tests passing.  Will try to review in a bit."
    ]
  },
  "Bug Filter": "Security Vulnerability Fix",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "**Final Classification:** Security Vulnerability Fix; **Confidence:** 0.95"
}