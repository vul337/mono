{
  "cve_id": "CVE-2022-2414",
  "cwe_ids": [
    "CWE-611"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
  "cvss_is_v3": true,
  "repo_name": "dogtagpki/pki",
  "commit_msg": "Disable access to external entities when parsing XML\n\nThis reduces the vulnerability of XML parsers to XXE (XML external\nentity) injection.\n\nThe best way to prevent XXE is to stop using XML altogether, which we do\nplan to do. Until that happens I consider it worthwhile to tighten the\nsecurity here though.",
  "commit_hash": "16deffdf7548e305507982e246eb9fd1eac414fd",
  "git_url": "https://github.com/dogtagpki/pki/commit/16deffdf7548e305507982e246eb9fd1eac414fd",
  "file_path": "base/server/src/main/java/com/netscape/cmscore/apps/ServerXml.java",
  "func_name": "load",
  "func_before": "public static ServerXml load(String filename) throws Exception {\n\n        logger.info(\"ServerXml: Parsing \" + filename);\n\n        ServerXml serverXml = new ServerXml();\n\n        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n        DocumentBuilder builder = factory.newDocumentBuilder();\n        Document document = builder.parse(filename);\n\n        XPathFactory xpathFactory = XPathFactory.newInstance();\n        XPath xpath = xpathFactory.newXPath();\n\n        NodeList connectors = (NodeList) xpath.evaluate(\n                \"/Server/Service[@name='Catalina']/Connector\",\n                document,\n                XPathConstants.NODESET);\n\n        int length = connectors.getLength();\n        for (int i = 0; i < length; i++) {\n            Element connector = (Element) connectors.item(i);\n\n            String protocol = connector.getAttribute(\"protocol\");\n            if (protocol.startsWith(\"AJP/\")) {\n                continue;\n            }\n\n            // HTTP/1.1 connector\n\n            String scheme = connector.getAttribute(\"scheme\");\n            String port = connector.getAttribute(\"port\");\n\n            if (scheme != null && scheme.equals(\"https\")) {\n                logger.info(\"ServerXml: Secure port: \" + port);\n                serverXml.setSecurePort(port);\n\n            } else {\n                logger.info(\"ServerXml: Unsecure port: \" + port);\n                serverXml.setUnsecurePort(port);\n            }\n        }\n\n        return serverXml;\n    }",
  "abstract_func_before": "public static ServerXml load(String VAR_0) throws Exception {\n\n        VAR_1.info(\"ServerXml: Parsing \" + VAR_0);\n\n        ServerXml VAR_2 = new ServerXml();\n\n        DocumentBuilderFactory VAR_3 = VAR_4.newInstance();\n        DocumentBuilder VAR_5 = VAR_3.newDocumentBuilder();\n        Document VAR_6 = VAR_5.parse(VAR_0);\n\n        XPathFactory VAR_7 = VAR_8.newInstance();\n        XPath VAR_9 = VAR_7.newXPath();\n\n        NodeList VAR_10 = (NodeList) VAR_9.evaluate(\n                \"/Server/Service[@name='Catalina']/Connector\",\n                VAR_6,\n                VAR_11.NODESET);\n\n        int VAR_12 = VAR_10.getLength();\n        for (int VAR_13 = 0; VAR_13 < VAR_12; VAR_13++) {\n            Element VAR_14 = (Element) VAR_10.item(VAR_13);\n\n            String VAR_15 = VAR_14.getAttribute(\"protocol\");\n            if (VAR_15.startsWith(\"AJP/\")) {\n                continue;\n            }\n\n            /* COMMENT_0 */\n\n            String VAR_16 = VAR_14.getAttribute(\"scheme\");\n            String VAR_17 = VAR_14.getAttribute(\"port\");\n\n            if (VAR_16 != null && VAR_16.equals(\"https\")) {\n                VAR_1.info(\"ServerXml: Secure port: \" + VAR_17);\n                VAR_2.setSecurePort(VAR_17);\n\n            } else {\n                VAR_1.info(\"ServerXml: Unsecure port: \" + VAR_17);\n                VAR_2.setUnsecurePort(VAR_17);\n            }\n        }\n\n        return VAR_2;\n    }",
  "func_graph_path_before": "dogtagpki/pki/16deffdf7548e305507982e246eb9fd1eac414fd/ServerXml.java/vul/before/0.json",
  "func": "public static ServerXml load(String filename) throws Exception {\n\n        logger.info(\"ServerXml: Parsing \" + filename);\n\n        ServerXml serverXml = new ServerXml();\n\n        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n        factory.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n        DocumentBuilder builder = factory.newDocumentBuilder();\n        Document document = builder.parse(filename);\n\n        XPathFactory xpathFactory = XPathFactory.newInstance();\n        XPath xpath = xpathFactory.newXPath();\n\n        NodeList connectors = (NodeList) xpath.evaluate(\n                \"/Server/Service[@name='Catalina']/Connector\",\n                document,\n                XPathConstants.NODESET);\n\n        int length = connectors.getLength();\n        for (int i = 0; i < length; i++) {\n            Element connector = (Element) connectors.item(i);\n\n            String protocol = connector.getAttribute(\"protocol\");\n            if (protocol.startsWith(\"AJP/\")) {\n                continue;\n            }\n\n            // HTTP/1.1 connector\n\n            String scheme = connector.getAttribute(\"scheme\");\n            String port = connector.getAttribute(\"port\");\n\n            if (scheme != null && scheme.equals(\"https\")) {\n                logger.info(\"ServerXml: Secure port: \" + port);\n                serverXml.setSecurePort(port);\n\n            } else {\n                logger.info(\"ServerXml: Unsecure port: \" + port);\n                serverXml.setUnsecurePort(port);\n            }\n        }\n\n        return serverXml;\n    }",
  "abstract_func": "public static ServerXml load(String VAR_0) throws Exception {\n\n        VAR_1.info(\"ServerXml: Parsing \" + VAR_0);\n\n        ServerXml VAR_2 = new ServerXml();\n\n        DocumentBuilderFactory VAR_3 = VAR_4.newInstance();\n        VAR_3.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n        DocumentBuilder VAR_5 = VAR_3.newDocumentBuilder();\n        Document VAR_6 = VAR_5.parse(VAR_0);\n\n        XPathFactory VAR_7 = VAR_8.newInstance();\n        XPath VAR_9 = VAR_7.newXPath();\n\n        NodeList VAR_10 = (NodeList) VAR_9.evaluate(\n                \"/Server/Service[@name='Catalina']/Connector\",\n                VAR_6,\n                VAR_11.NODESET);\n\n        int VAR_12 = VAR_10.getLength();\n        for (int VAR_13 = 0; VAR_13 < VAR_12; VAR_13++) {\n            Element VAR_14 = (Element) VAR_10.item(VAR_13);\n\n            String VAR_15 = VAR_14.getAttribute(\"protocol\");\n            if (VAR_15.startsWith(\"AJP/\")) {\n                continue;\n            }\n\n            /* COMMENT_0 */\n\n            String VAR_16 = VAR_14.getAttribute(\"scheme\");\n            String VAR_17 = VAR_14.getAttribute(\"port\");\n\n            if (VAR_16 != null && VAR_16.equals(\"https\")) {\n                VAR_1.info(\"ServerXml: Secure port: \" + VAR_17);\n                VAR_2.setSecurePort(VAR_17);\n\n            } else {\n                VAR_1.info(\"ServerXml: Unsecure port: \" + VAR_17);\n                VAR_2.setUnsecurePort(VAR_17);\n            }\n        }\n\n        return VAR_2;\n    }",
  "func_graph_path": "dogtagpki/pki/16deffdf7548e305507982e246eb9fd1eac414fd/ServerXml.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -5,6 +5,7 @@\n         ServerXml serverXml = new ServerXml();\n \n         DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n+        factory.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n         DocumentBuilder builder = factory.newDocumentBuilder();\n         Document document = builder.parse(filename);\n ",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "        factory.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/dogtagpki/pki/pull/4021",
  "description": {
    "pr_info": {
      "title": "Disable access to external entities when parsing XML",
      "number": 4021
    },
    "comment": [
      "This reduces the vulnerability of XML parsers to XXE (XML external\r\nentity) injection.\r\n\r\nThe best way to prevent XXE is to stop using XML altogether, which we do\r\nplan to do. Until that happens I consider it worthwhile to tighten the\r\nsecurity here though.",
      "I considered making a class similar to `JSONSerializer` but it felt like too much work for deprecated code, that is actively marked for removal. Therefore I just added in the necessary updates per-instantiation.",
      "It's a shame that Sonar doesn't work on PRs (yet) because then we could have checked that I caught them all.",
      "Thanks @edewata !"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix  \nConfidence Score: 0.95",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "\n\n**Final Output:**\nAnalysis: The patch modifies XML parsing to prevent XXE vulnerabilities by disabling external entity access. The code change sets a feature to disallow doctype declarations, a known fix for XXE. This addresses a security issue where the previous code allowed such attacks.\n\nFinal Classification: Security Vulnerability Fix  \nConfidence Score: 0.95"
}