{
  "cve_id": "CVE-2018-6359",
  "cwe_ids": [
    "CWE-416"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "libming",
  "commit_msg": "Use OpCode instead of directly accessing actions\n\nInstead of directly accessing the actions array without checks\nfor the value of n (which may lead to heap buffer overflow etc,\nsee #83 or #105), use the dedicated OpCode function.",
  "commit_hash": "9c53bf8e165c3a74e20f4c93b4ab6c05fe67f187",
  "git_url": "https://github.com/libming/libming/commit/9c53bf8e165c3a74e20f4c93b4ab6c05fe67f187",
  "file_path": "util/decompile.c",
  "func_name": "isLogicalOp2",
  "func_before": "static int \nisLogicalOp2(int n, SWF_ACTION *actions,int maxn)\n{\n\tswitch(actions[n].SWF_ACTIONRECORD.ActionCode)\n\t{\n\tcase SWFACTION_LOGICALNOT:\n\tcase SWFACTION_PUSHDUP:\n\tcase SWFACTION_IF:\n\t\treturn 1;\n\tdefault:\n\t\treturn 0;\n\t}\n}",
  "abstract_func_before": "static int \nisLogicalOp2(int VAR_0, SWF_ACTION *VAR_1,int VAR_2)\n{\n\tswitch(VAR_1[VAR_0].SWF_ACTIONRECORD.ActionCode)\n\t{\n\tcase VAR_3:\n\tcase VAR_4:\n\tcase VAR_5:\n\t\treturn 1;\n\tdefault:\n\t\treturn 0;\n\t}\n}",
  "func_graph_path_before": "libming/9c53bf8e165c3a74e20f4c93b4ab6c05fe67f187/decompile.c/vul/before/3.json",
  "func": "static int \nisLogicalOp2(int n, SWF_ACTION *actions,int maxn)\n{\n\tswitch(OpCode(actions, n, maxn))\n\t{\n\tcase SWFACTION_LOGICALNOT:\n\tcase SWFACTION_PUSHDUP:\n\tcase SWFACTION_IF:\n\t\treturn 1;\n\tdefault:\n\t\treturn 0;\n\t}\n}",
  "abstract_func": "static int \nisLogicalOp2(int VAR_0, SWF_ACTION *VAR_1,int VAR_2)\n{\n\tswitch(OpCode(VAR_1, VAR_0, VAR_2))\n\t{\n\tcase VAR_3:\n\tcase VAR_4:\n\tcase VAR_5:\n\t\treturn 1;\n\tdefault:\n\t\treturn 0;\n\t}\n}",
  "func_graph_path": "libming/9c53bf8e165c3a74e20f4c93b4ab6c05fe67f187/decompile.c/vul/after/3.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,7 +1,7 @@\n static int \n isLogicalOp2(int n, SWF_ACTION *actions,int maxn)\n {\n-\tswitch(actions[n].SWF_ACTIONRECORD.ActionCode)\n+\tswitch(OpCode(actions, n, maxn))\n \t{\n \tcase SWFACTION_LOGICALNOT:\n \tcase SWFACTION_PUSHDUP:",
  "diff_line_info": {
    "deleted_lines": [
      "\tswitch(actions[n].SWF_ACTIONRECORD.ActionCode)"
    ],
    "added_lines": [
      "\tswitch(OpCode(actions, n, maxn))"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/libming/libming/pull/108",
  "description": {
    "pr_info": {
      "title": "Use OpCode instead of directly accessing actions",
      "number": 108
    },
    "comment": [
      "Instead of directly accessing the actions array without checks for the value of n (which may lead to heap buffer overflow etc, see #83 or #105), use the dedicated OpCode function.\r\n\r\nThis PR fixes #105 (CVE-2018-6359).",
      "Confirmed, and merged. Thanks.\n"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix  \nConfidence Score: 1.0",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "\n\n**Final Output:**\n\nAnalysis:\n1. **Patch Analysis**: The commit replaces direct array access with a function call to prevent buffer overflow. The code change uses OpCode, which likely includes bounds checks.\n2. **Security Vulnerability Assessment**: The fix addresses a buffer overflow vulnerability (CVE-2018-6359), which can lead to arbitrary code execution. This impacts system security.\n3. **Classification**: The patch is a Security Vulnerability Fix as it resolves an exploit leading to system compromise.\n\nFinal Classification: Security Vulnerability Fix  \nConfidence Score: 1.0"
}