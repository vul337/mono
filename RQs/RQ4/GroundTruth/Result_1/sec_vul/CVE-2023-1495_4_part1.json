{
  "cve_id": "CVE-2023-1495",
  "cwe_ids": [
    "CWE-89"
  ],
  "cvss_vector": "AV:N/AC:L/Au:S/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "getrebuild/rebuild",
  "commit_msg": "H5 sync2 (#595)\n\n* style: 目录样式gh\r\n\r\n* style: J_new\r\n\r\n* feat: advListFilterTabs\r\n\r\n* feat: nav-copyto\r\n\r\n* enh: 助记码全拼\r\n\r\n* enh: 地图搜索选点\r\n\r\n* enh: topnav\r\n\r\n* list pn\r\n\r\n* .form-line.v33\r\n\r\n* open TAG\r\n\r\n* KVS addShutdownHook\r\n\r\n* fix: #594\r\n\r\n---------\r\n\r\nCo-authored-by: devezhao <zhaofang123@gmail.com>",
  "commit_hash": "c9474f84e5f376dd2ade2078e3039961a9425da7",
  "git_url": "https://github.com/getrebuild/rebuild/commit/c9474f84e5f376dd2ade2078e3039961a9425da7",
  "file_path": "src/main/java/com/rebuild/web/general/ReferenceSearchController.java",
  "func_name": "searchClassification",
  "func_before": "@GetMapping(\"classification\")\n    public JSON searchClassification(@EntityParam Entity entity, HttpServletRequest request) {\n        final ID user = getRequestUser(request);\n        final String field = getParameterNotNull(request, \"field\");\n\n        Field fieldMeta = entity.getField(field);\n        ID useClassification = ClassificationManager.instance.getUseClassification(fieldMeta, false);\n        if (useClassification == null) return JSONUtils.EMPTY_ARRAY;\n\n        String q = getParameter(request, \"q\");\n\n        // 为空则加载最近使用的\n        if (StringUtils.isBlank(q)) {\n            String type = \"d\" + useClassification + \":\" + ClassificationManager.instance.getOpenLevel(fieldMeta);\n            ID[] used = RecentlyUsedHelper.gets(user, \"ClassificationData\", type);\n\n            if (used.length == 0) {\n                return JSONUtils.EMPTY_ARRAY;\n            } else {\n                return RecentlyUsedSearchController.formatSelect2(used, null);\n            }\n        }\n\n        q = StringEscapeUtils.escapeSql(q);\n\n        int openLevel = ClassificationManager.instance.getOpenLevel(fieldMeta);\n        String sqlWhere = String.format(\n                \"dataId = '%s' and level = %d and (fullName like '%%%s%%' or quickCode like '%%%s%%') order by fullName\",\n                useClassification.toLiteral(), openLevel, q, q);\n\n        List<Object> result = resultSearch(\n                sqlWhere, MetadataHelper.getEntity(EntityHelper.ClassificationData), 10);\n        return (JSON) JSON.toJSON(result);\n    }",
  "abstract_func_before": "@GetMapping(\"classification\")\n    public JSON searchClassification(@EntityParam Entity VAR_0, HttpServletRequest VAR_1) {\n        final ID VAR_2 = getRequestUser(VAR_1);\n        final String VAR_3 = getParameterNotNull(VAR_1, \"field\");\n\n        Field VAR_4 = VAR_0.getField(VAR_3);\n        ID VAR_5 = VAR_6.instance.getUseClassification(VAR_4, false);\n        if (VAR_5 == null) return VAR_7.EMPTY_ARRAY;\n\n        String VAR_8 = getParameter(VAR_1, \"q\");\n\n        /* COMMENT_0 */\n        if (VAR_9.isBlank(VAR_8)) {\n            String VAR_10 = \"d\" + VAR_5 + \":\" + VAR_6.instance.getOpenLevel(VAR_4);\n            ID[] VAR_11 = VAR_12.gets(VAR_2, \"ClassificationData\", VAR_10);\n\n            if (VAR_11.length == 0) {\n                return VAR_7.EMPTY_ARRAY;\n            } else {\n                return VAR_13.formatSelect2(VAR_11, null);\n            }\n        }\n\n        VAR_8 = VAR_14.escapeSql(VAR_8);\n\n        int VAR_15 = VAR_6.instance.getOpenLevel(VAR_4);\n        String VAR_16 = VAR_17.format(\n                \"dataId = '%s' and level = %d and (fullName like '%%%s%%' or quickCode like '%%%s%%') order by fullName\",\n                VAR_5.toLiteral(), VAR_15, VAR_8, VAR_8);\n\n        List<Object> VAR_18 = resultSearch(\n                VAR_16, VAR_19.getEntity(VAR_20.ClassificationData), 10);\n        return (JSON) VAR_21.toJSON(VAR_18);\n    }",
  "func_graph_path_before": "getrebuild/rebuild/c9474f84e5f376dd2ade2078e3039961a9425da7/ReferenceSearchController.java/vul/before/0.json",
  "func": "@GetMapping(\"classification\")\n    public JSON searchClassification(@EntityParam Entity entity, HttpServletRequest request) {\n        final ID user = getRequestUser(request);\n        final String field = getParameterNotNull(request, \"field\");\n\n        Field fieldMeta = entity.getField(field);\n        ID useClassification = ClassificationManager.instance.getUseClassification(fieldMeta, false);\n        if (useClassification == null) return JSONUtils.EMPTY_ARRAY;\n\n        String q = getParameter(request, \"q\");\n\n        // 为空则加载最近使用的\n        if (StringUtils.isBlank(q)) {\n            String type = \"d\" + useClassification + \":\" + ClassificationManager.instance.getOpenLevel(fieldMeta);\n            ID[] used = RecentlyUsedHelper.gets(user, \"ClassificationData\", type);\n\n            if (used.length == 0) {\n                return JSONUtils.EMPTY_ARRAY;\n            } else {\n                return RecentlyUsedSearchController.formatSelect2(used, null);\n            }\n        }\n\n        q = CommonsUtils.escapeSql(q);\n\n        int openLevel = ClassificationManager.instance.getOpenLevel(fieldMeta);\n        String sqlWhere = String.format(\n                \"dataId = '%s' and level = %d and (fullName like '%%%s%%' or quickCode like '%%%s%%') order by fullName\",\n                useClassification.toLiteral(), openLevel, q, q);\n\n        List<Object> result = resultSearch(\n                sqlWhere, MetadataHelper.getEntity(EntityHelper.ClassificationData), 10);\n        return (JSON) JSON.toJSON(result);\n    }",
  "abstract_func": "@GetMapping(\"classification\")\n    public JSON searchClassification(@EntityParam Entity VAR_0, HttpServletRequest VAR_1) {\n        final ID VAR_2 = getRequestUser(VAR_1);\n        final String VAR_3 = getParameterNotNull(VAR_1, \"field\");\n\n        Field VAR_4 = VAR_0.getField(VAR_3);\n        ID VAR_5 = VAR_6.instance.getUseClassification(VAR_4, false);\n        if (VAR_5 == null) return VAR_7.EMPTY_ARRAY;\n\n        String VAR_8 = getParameter(VAR_1, \"q\");\n\n        /* COMMENT_0 */\n        if (VAR_9.isBlank(VAR_8)) {\n            String VAR_10 = \"d\" + VAR_5 + \":\" + VAR_6.instance.getOpenLevel(VAR_4);\n            ID[] VAR_11 = VAR_12.gets(VAR_2, \"ClassificationData\", VAR_10);\n\n            if (VAR_11.length == 0) {\n                return VAR_7.EMPTY_ARRAY;\n            } else {\n                return VAR_13.formatSelect2(VAR_11, null);\n            }\n        }\n\n        VAR_8 = VAR_14.escapeSql(VAR_8);\n\n        int VAR_15 = VAR_6.instance.getOpenLevel(VAR_4);\n        String VAR_16 = VAR_17.format(\n                \"dataId = '%s' and level = %d and (fullName like '%%%s%%' or quickCode like '%%%s%%') order by fullName\",\n                VAR_5.toLiteral(), VAR_15, VAR_8, VAR_8);\n\n        List<Object> VAR_18 = resultSearch(\n                VAR_16, VAR_19.getEntity(VAR_20.ClassificationData), 10);\n        return (JSON) VAR_21.toJSON(VAR_18);\n    }",
  "func_graph_path": "getrebuild/rebuild/c9474f84e5f376dd2ade2078e3039961a9425da7/ReferenceSearchController.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -21,7 +21,7 @@\n             }\n         }\n \n-        q = StringEscapeUtils.escapeSql(q);\n+        q = CommonsUtils.escapeSql(q);\n \n         int openLevel = ClassificationManager.instance.getOpenLevel(fieldMeta);\n         String sqlWhere = String.format(",
  "diff_line_info": {
    "deleted_lines": [
      "        q = StringEscapeUtils.escapeSql(q);"
    ],
    "added_lines": [
      "        q = CommonsUtils.escapeSql(q);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/getrebuild/rebuild/pull/595",
  "description": {
    "pr_info": {
      "title": "H5 sync2",
      "number": 595
    },
    "comment": [
      "Most styles:\r\n1. Nav copy\r\n2. Arrow for form line \r\n3. Quick-code full-pinyin\r\n4. Open Tag of field\r\n5. feat: `advListFilterTabs` (boss-key)\r\n6. Map search\r\n7. feat: Can input page-no on list\r\n8. CVE fix"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix  \nConfidence Score: 0.9",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "\n\n**Final Output:**\n\nAnalysis: The patch modifies the SQL escaping method, indicating a potential security fix. The commit message references a CVE fix, confirming the security context.\n\nFinal Classification: Security Vulnerability Fix  \nConfidence Score: 0.9"
}