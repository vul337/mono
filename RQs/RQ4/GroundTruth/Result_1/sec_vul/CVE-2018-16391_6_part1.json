{
  "cve_id": "CVE-2018-16391",
  "cwe_ids": [
    "CWE-415",
    "CWE-119"
  ],
  "cvss_vector": "AV:L/AC:L/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "OpenSC",
  "commit_msg": "fixed out of bounds writes\n\nThanks to Eric Sesterhenn from X41 D-SEC GmbH\nfor reporting the problems.",
  "commit_hash": "360e95d45ac4123255a4c796db96337f332160ad",
  "git_url": "https://github.com/OpenSC/OpenSC/commit/360e95d45ac4123255a4c796db96337f332160ad",
  "file_path": "src/tools/cryptoflex-tool.c",
  "func_name": "read_public_key",
  "func_before": "static int read_public_key(RSA *rsa)\n{\n\tint r;\n\tsc_path_t path;\n\tsc_file_t *file;\n\tu8 buf[2048], *p = buf;\n\tsize_t bufsize, keysize;\n\n\tr = select_app_df();\n\tif (r)\n\t\treturn 1;\n\tsc_format_path(\"I1012\", &path);\n\tr = sc_select_file(card, &path, &file);\n\tif (r) {\n\t\tfprintf(stderr, \"Unable to select public key file: %s\\n\", sc_strerror(r));\n\t\treturn 2;\n\t}\n\tbufsize = file->size;\n\tsc_file_free(file);\n\tr = sc_read_binary(card, 0, buf, bufsize, 0);\n\tif (r < 0) {\n\t\tfprintf(stderr, \"Unable to read public key file: %s\\n\", sc_strerror(r));\n\t\treturn 2;\n\t}\n\tbufsize = r;\n\tdo {\n\t\tif (bufsize < 4)\n\t\t\treturn 3;\n\t\tkeysize = (p[0] << 8) | p[1];\n\t\tif (keysize == 0)\n\t\t\tbreak;\n\t\tif (keysize < 3)\n\t\t\treturn 3;\n\t\tif (p[2] == opt_key_num)\n\t\t\tbreak;\n\t\tp += keysize;\n\t\tbufsize -= keysize;\n\t} while (1);\n\tif (keysize == 0) {\n\t\tprintf(\"Key number %d not found.\\n\", opt_key_num);\n\t\treturn 2;\n\t}\n\treturn parse_public_key(p, keysize, rsa);\n}",
  "abstract_func_before": "static int read_public_key(RSA *VAR_0)\n{\n\tint VAR_1;\n\tsc_path_t VAR_2;\n\tsc_file_t *VAR_3;\n\tu8 VAR_4[2048], *VAR_5 = VAR_4;\n\tsize_t VAR_6, VAR_7;\n\n\tVAR_1 = select_app_df();\n\tif (VAR_1)\n\t\treturn 1;\n\tsc_format_path(\"I1012\", &VAR_2);\n\tVAR_1 = sc_select_file(VAR_8, &VAR_2, &VAR_3);\n\tif (VAR_1) {\n\t\tfprintf(VAR_9, \"Unable to select public key file: %s\\n\", sc_strerror(VAR_1));\n\t\treturn 2;\n\t}\n\tVAR_6 = VAR_3->size;\n\tsc_file_free(VAR_3);\n\tVAR_1 = sc_read_binary(VAR_8, 0, VAR_4, VAR_6, 0);\n\tif (VAR_1 < 0) {\n\t\tfprintf(VAR_9, \"Unable to read public key file: %s\\n\", sc_strerror(VAR_1));\n\t\treturn 2;\n\t}\n\tVAR_6 = VAR_1;\n\tdo {\n\t\tif (VAR_6 < 4)\n\t\t\treturn 3;\n\t\tVAR_7 = (VAR_5[0] << 8) | VAR_5[1];\n\t\tif (VAR_7 == 0)\n\t\t\tbreak;\n\t\tif (VAR_7 < 3)\n\t\t\treturn 3;\n\t\tif (VAR_5[2] == VAR_10)\n\t\t\tbreak;\n\t\tVAR_5 += VAR_7;\n\t\tVAR_6 -= VAR_7;\n\t} while (1);\n\tif (VAR_7 == 0) {\n\t\tprintf(\"Key number %d not found.\\n\", VAR_10);\n\t\treturn 2;\n\t}\n\treturn parse_public_key(VAR_5, VAR_7, VAR_0);\n}",
  "func_graph_path_before": "OpenSC/360e95d45ac4123255a4c796db96337f332160ad/cryptoflex-tool.c/vul/before/1.json",
  "func": "static int read_public_key(RSA *rsa)\n{\n\tint r;\n\tsc_path_t path;\n\tsc_file_t *file;\n\tu8 buf[2048], *p = buf;\n\tsize_t bufsize, keysize;\n\n\tr = select_app_df();\n\tif (r)\n\t\treturn 1;\n\tsc_format_path(\"I1012\", &path);\n\tr = sc_select_file(card, &path, &file);\n\tif (r) {\n\t\tfprintf(stderr, \"Unable to select public key file: %s\\n\", sc_strerror(r));\n\t\treturn 2;\n\t}\n\tbufsize = MIN(file->size, sizeof buf);\n\tsc_file_free(file);\n\tr = sc_read_binary(card, 0, buf, bufsize, 0);\n\tif (r < 0) {\n\t\tfprintf(stderr, \"Unable to read public key file: %s\\n\", sc_strerror(r));\n\t\treturn 2;\n\t}\n\tbufsize = r;\n\tdo {\n\t\tif (bufsize < 4)\n\t\t\treturn 3;\n\t\tkeysize = (p[0] << 8) | p[1];\n\t\tif (keysize == 0)\n\t\t\tbreak;\n\t\tif (keysize < 3)\n\t\t\treturn 3;\n\t\tif (p[2] == opt_key_num)\n\t\t\tbreak;\n\t\tp += keysize;\n\t\tbufsize -= keysize;\n\t} while (1);\n\tif (keysize == 0) {\n\t\tprintf(\"Key number %d not found.\\n\", opt_key_num);\n\t\treturn 2;\n\t}\n\treturn parse_public_key(p, keysize, rsa);\n}",
  "abstract_func": "static int read_public_key(RSA *VAR_0)\n{\n\tint VAR_1;\n\tsc_path_t VAR_2;\n\tsc_file_t *VAR_3;\n\tu8 VAR_4[2048], *VAR_5 = VAR_4;\n\tsize_t VAR_6, VAR_7;\n\n\tVAR_1 = select_app_df();\n\tif (VAR_1)\n\t\treturn 1;\n\tsc_format_path(\"I1012\", &VAR_2);\n\tVAR_1 = sc_select_file(VAR_8, &VAR_2, &VAR_3);\n\tif (VAR_1) {\n\t\tfprintf(VAR_9, \"Unable to select public key file: %s\\n\", sc_strerror(VAR_1));\n\t\treturn 2;\n\t}\n\tVAR_6 = MIN(VAR_3->size, sizeof VAR_4);\n\tsc_file_free(VAR_3);\n\tVAR_1 = sc_read_binary(VAR_8, 0, VAR_4, VAR_6, 0);\n\tif (VAR_1 < 0) {\n\t\tfprintf(VAR_9, \"Unable to read public key file: %s\\n\", sc_strerror(VAR_1));\n\t\treturn 2;\n\t}\n\tVAR_6 = VAR_1;\n\tdo {\n\t\tif (VAR_6 < 4)\n\t\t\treturn 3;\n\t\tVAR_7 = (VAR_5[0] << 8) | VAR_5[1];\n\t\tif (VAR_7 == 0)\n\t\t\tbreak;\n\t\tif (VAR_7 < 3)\n\t\t\treturn 3;\n\t\tif (VAR_5[2] == VAR_10)\n\t\t\tbreak;\n\t\tVAR_5 += VAR_7;\n\t\tVAR_6 -= VAR_7;\n\t} while (1);\n\tif (VAR_7 == 0) {\n\t\tprintf(\"Key number %d not found.\\n\", VAR_10);\n\t\treturn 2;\n\t}\n\treturn parse_public_key(VAR_5, VAR_7, VAR_0);\n}",
  "func_graph_path": "OpenSC/360e95d45ac4123255a4c796db96337f332160ad/cryptoflex-tool.c/vul/after/1.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -15,7 +15,7 @@\n \t\tfprintf(stderr, \"Unable to select public key file: %s\\n\", sc_strerror(r));\n \t\treturn 2;\n \t}\n-\tbufsize = file->size;\n+\tbufsize = MIN(file->size, sizeof buf);\n \tsc_file_free(file);\n \tr = sc_read_binary(card, 0, buf, bufsize, 0);\n \tif (r < 0) {",
  "diff_line_info": {
    "deleted_lines": [
      "\tbufsize = file->size;"
    ],
    "added_lines": [
      "\tbufsize = MIN(file->size, sizeof buf);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/OpenSC/OpenSC/pull/1447",
  "description": {
    "pr_info": {
      "title": "Security issues identified by fuzzing",
      "number": 1447
    },
    "comment": [
      "This PR merges changes addressing issues identified by fuzzing OpenSC driver by Eric Sesterhenn. The separate commits are authored mostly by @frankmorgner, @dengert, Eric and me.\r\n\r\nFor more information, see the blog post:\r\n\r\nhttps://www.x41-dsec.de/lab/blog/smartcards/\r\n\r\nThe changes were tested to ensure they still work for the cards we have, but testing with more cards would be always appreciated.\r\n\r\n##### Checklist\r\n<!-- Remove items that do not apply. For completed items, change [ ] to [x]. -->\r\n- [X] PKCS#11 module is tested\r\n- [ ] Windows minidriver is tested\r\n- [ ] macOS tokend is tested\r\n"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix  \nConfidence Score: 1.0",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "\n\n**Final Output:**\nAnalysis: The commit fixes an out-of-bounds write issue by limiting the buffer size, which prevents potential security vulnerabilities. The context from fuzzing further supports this as a security fix.\n\nFinal Classification: Security Vulnerability Fix  \nConfidence Score: 1.0"
}