{
  "cve_id": "CVE-2022-29021",
  "cwe_ids": [
    "CWE-120"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "openrazer",
  "commit_msg": "Fix oob memcpy in matrix_custom_frame methods\n\nAdjust row_length if it exeeds the arguments array",
  "commit_hash": "7e8a04feb378a679f1bcdcae079a5100cc45663b",
  "git_url": "https://github.com/openrazer/openrazer/commit/7e8a04feb378a679f1bcdcae079a5100cc45663b",
  "file_path": "driver/razerchromacommon.c",
  "func_name": "razer_chroma_misc_one_row_set_custom_frame",
  "func_before": "struct razer_report razer_chroma_misc_one_row_set_custom_frame(unsigned char start_col, unsigned char stop_col, unsigned char *rgb_data) // TODO recheck custom frame hex\n{\n    struct razer_report report = get_razer_report(0x03, 0x0C, 0x32);\n    size_t row_length = (size_t) (((stop_col + 1) - start_col) * 3);\n\n    report.arguments[0] = start_col;\n    report.arguments[1] = stop_col;\n\n    memcpy(&report.arguments[2], rgb_data, row_length);\n\n    return report;\n}",
  "abstract_func_before": "struct razer_report razer_chroma_misc_one_row_set_custom_frame(unsigned char VAR_0, unsigned char VAR_1, unsigned char *VAR_2) /* COMMENT_0 */\n{\n    struct razer_report VAR_3 = get_razer_report(0x03, 0x0C, 0x32);\n    size_t VAR_4 = (size_t) (((VAR_1 + 1) - VAR_0) * 3);\n\n    VAR_3.arguments[0] = VAR_0;\n    VAR_3.arguments[1] = VAR_1;\n\n    memcpy(&VAR_3.arguments[2], VAR_2, VAR_4);\n\n    return VAR_3;\n}",
  "func_graph_path_before": "openrazer/7e8a04feb378a679f1bcdcae079a5100cc45663b/razerchromacommon.c/vul/before/1.json",
  "func": "struct razer_report razer_chroma_misc_one_row_set_custom_frame(unsigned char start_col, unsigned char stop_col, unsigned char *rgb_data) // TODO recheck custom frame hex\n{\n    const size_t start_arg_offset = 2;\n    struct razer_report report = get_razer_report(0x03, 0x0C, 0x32);\n    size_t row_length = (size_t) (((stop_col + 1) - start_col) * 3);\n\n    if (row_length > sizeof(report.arguments) - start_arg_offset) {\n        printk(KERN_ALERT \"razerchroma: RGB data too long\\n\");\n        row_length = sizeof(report.arguments) - start_arg_offset;\n    }\n\n    report.arguments[0] = start_col;\n    report.arguments[1] = stop_col;\n\n    memcpy(&report.arguments[2], rgb_data, row_length);\n\n    return report;\n}",
  "abstract_func": "struct razer_report razer_chroma_misc_one_row_set_custom_frame(unsigned char VAR_0, unsigned char VAR_1, unsigned char *VAR_2) /* COMMENT_0 */\n{\n    const size_t VAR_3 = 2;\n    struct razer_report VAR_4 = get_razer_report(0x03, 0x0C, 0x32);\n    size_t VAR_5 = (size_t) (((VAR_1 + 1) - VAR_0) * 3);\n\n    if (VAR_5 > sizeof(VAR_4.arguments) - VAR_3) {\n        printk(KERN_ALERT \"razerchroma: RGB data too long\\n\");\n        VAR_5 = sizeof(VAR_4.arguments) - VAR_3;\n    }\n\n    VAR_4.arguments[0] = VAR_0;\n    VAR_4.arguments[1] = VAR_1;\n\n    memcpy(&VAR_4.arguments[2], VAR_2, VAR_5);\n\n    return VAR_4;\n}",
  "func_graph_path": "openrazer/7e8a04feb378a679f1bcdcae079a5100cc45663b/razerchromacommon.c/vul/after/1.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,7 +1,13 @@\n struct razer_report razer_chroma_misc_one_row_set_custom_frame(unsigned char start_col, unsigned char stop_col, unsigned char *rgb_data) // TODO recheck custom frame hex\n {\n+    const size_t start_arg_offset = 2;\n     struct razer_report report = get_razer_report(0x03, 0x0C, 0x32);\n     size_t row_length = (size_t) (((stop_col + 1) - start_col) * 3);\n+\n+    if (row_length > sizeof(report.arguments) - start_arg_offset) {\n+        printk(KERN_ALERT \"razerchroma: RGB data too long\\n\");\n+        row_length = sizeof(report.arguments) - start_arg_offset;\n+    }\n \n     report.arguments[0] = start_col;\n     report.arguments[1] = stop_col;",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "    const size_t start_arg_offset = 2;",
      "",
      "    if (row_length > sizeof(report.arguments) - start_arg_offset) {",
      "        printk(KERN_ALERT \"razerchroma: RGB data too long\\n\");",
      "        row_length = sizeof(report.arguments) - start_arg_offset;",
      "    }"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/openrazer/openrazer/pull/1790",
  "description": {
    "pr_info": {
      "title": "Fix oob memcpy matrix custom frame",
      "number": 1790
    },
    "comment": [
      "This PR fixes the OOB memcpy in the matrix_custom_frame for all 3 drivers (kbd, mouse, accessory)."
    ]
  },
  "Bug Filter": "Security Vulnerability Fix  \nConfidence Score: 1.0",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "\n\n**Final Output:**\n\nAnalysis: The patch addresses an out-of-bounds (OOB) memcpy issue in the matrix_custom_frame methods, which is a security vulnerability. The code adds a check to ensure row_length does not exceed the buffer size, preventing potential buffer overflow. This fix is critical for security as it mitigates unauthorized memory access.\n\nFinal Classification: Security Vulnerability Fix  \nConfidence Score: 1.0"
}