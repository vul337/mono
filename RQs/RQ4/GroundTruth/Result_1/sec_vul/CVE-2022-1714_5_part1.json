{
  "cve_id": "CVE-2022-1714",
  "cwe_ids": [
    "CWE-125"
  ],
  "cvss_vector": "AV:L/AC:L/Au:N/C:P/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "radareorg/radare2",
  "commit_msg": "Fix 4 byte oobread in msp430 disassembler ##crash\n\n* Only crashes with asan builds\n* Add missing =SN register\n* Reported by cnitlrt via huntrdev\n* BountyID: 1c22055b-b015-47a8-a57b-4982978751d0",
  "commit_hash": "3ecdbf8e21186a9c5a4d3cfa3b1e9fd27045340e",
  "git_url": "https://github.com/radareorg/radare2/commit/3ecdbf8e21186a9c5a4d3cfa3b1e9fd27045340e",
  "file_path": "libr/bin/format/elf/elf.c",
  "func_name": "read_phdr",
  "func_before": "static bool read_phdr(ELFOBJ *bin, bool linux_kernel_hack) {\n\tbool phdr_found = false;\n\tint i;\n#if R_BIN_ELF64\n\tconst bool is_elf64 = true;\n#else\n\tconst bool is_elf64 = false;\n#endif\n\tut64 phnum = Elf_(r_bin_elf_get_phnum) (bin);\n\tfor (i = 0; i < phnum; i++) {\n\t\tut8 phdr[sizeof (Elf_(Phdr))] = {0};\n\t\tint j = 0;\n\t\tconst size_t rsize = bin->ehdr.e_phoff + i * sizeof (Elf_(Phdr));\n\t\tint len = r_buf_read_at (bin->b, rsize, phdr, sizeof (Elf_(Phdr)));\n\t\tif (len < 1) {\n\t\t\tR_LOG_ERROR (\"read (phdr)\");\n\t\t\tR_FREE (bin->phdr);\n\t\t\treturn false;\n\t\t}\n\t\tbin->phdr[i].p_type = READ32 (phdr, j);\n\t\tif (bin->phdr[i].p_type == PT_PHDR) {\n\t\t\tphdr_found = true;\n\t\t}\n\n\t\tif (is_elf64) {\n\t\t\tbin->phdr[i].p_flags = READ32 (phdr, j);\n\t\t}\n\t\tbin->phdr[i].p_offset = R_BIN_ELF_READWORD (phdr, j);\n\t\tbin->phdr[i].p_vaddr = R_BIN_ELF_READWORD (phdr, j);\n\t\tbin->phdr[i].p_paddr = R_BIN_ELF_READWORD (phdr, j);\n\t\tbin->phdr[i].p_filesz = R_BIN_ELF_READWORD (phdr, j);\n\t\tbin->phdr[i].p_memsz = R_BIN_ELF_READWORD (phdr, j);\n\t\tif (!is_elf64) {\n\t\t\tbin->phdr[i].p_flags = READ32 (phdr, j);\n\t\t//\tbin->phdr[i].p_flags |= 1; tiny.elf needs this somehow :? LOAD0 is always +x for linux?\n\t\t}\n\t\tbin->phdr[i].p_align = R_BIN_ELF_READWORD (phdr, j);\n\t}\n\t/* Here is the where all the fun starts.\n\t * Linux kernel since 2005 calculates phdr offset wrongly\n\t * adding it to the load address (va of the LOAD0).\n\t * See `fs/binfmt_elf.c` file this line:\n\t *    NEW_AUX_ENT(AT_PHDR, load_addr + exec->e_phoff);\n\t * So after the first read, we fix the address and read it again\n\t */\n\tif (linux_kernel_hack && phdr_found) {\n\t\tut64 load_addr = Elf_(r_bin_elf_get_baddr) (bin);\n\t\tbin->ehdr.e_phoff = Elf_(r_bin_elf_v2p) (bin, load_addr + bin->ehdr.e_phoff);\n\t\treturn read_phdr (bin, false);\n\t}\n\n\treturn true;\n}",
  "abstract_func_before": "static bool read_phdr(ELFOBJ *VAR_0, bool VAR_1) {\n\tbool VAR_2 = false;\n\tint VAR_3;\n#if VAR_4\n\tconst bool VAR_5 = true;\n#else\n\tconst bool VAR_5 = false;\n#endif\n\tut64 VAR_6 = Elf_(VAR_7) (VAR_0);\n\tfor (VAR_3 = 0; VAR_3 < VAR_6; VAR_3++) {\n\t\tut8 VAR_8[sizeof (Elf_(VAR_9))] = {0};\n\t\tint VAR_10 = 0;\n\t\tconst size_t VAR_11 = VAR_0->ehdr.e_phoff + VAR_3 * sizeof (Elf_(VAR_9));\n\t\tint VAR_12 = r_buf_read_at (VAR_0->b, VAR_11, VAR_8, sizeof (Elf_(VAR_9)));\n\t\tif (VAR_12 < 1) {\n\t\t\tR_LOG_ERROR (\"read (phdr)\");\n\t\t\tR_FREE (VAR_0->phdr);\n\t\t\treturn false;\n\t\t}\n\t\tVAR_0->phdr[VAR_3].p_type = READ32 (VAR_8, VAR_10);\n\t\tif (VAR_0->phdr[VAR_3].p_type == VAR_13) {\n\t\t\tVAR_2 = true;\n\t\t}\n\n\t\tif (VAR_5) {\n\t\t\tVAR_0->phdr[VAR_3].p_flags = READ32 (VAR_8, VAR_10);\n\t\t}\n\t\tVAR_0->phdr[VAR_3].p_offset = R_BIN_ELF_READWORD (VAR_8, VAR_10);\n\t\tVAR_0->phdr[VAR_3].p_vaddr = R_BIN_ELF_READWORD (VAR_8, VAR_10);\n\t\tVAR_0->phdr[VAR_3].p_paddr = R_BIN_ELF_READWORD (VAR_8, VAR_10);\n\t\tVAR_0->phdr[VAR_3].p_filesz = R_BIN_ELF_READWORD (VAR_8, VAR_10);\n\t\tVAR_0->phdr[VAR_3].p_memsz = R_BIN_ELF_READWORD (VAR_8, VAR_10);\n\t\tif (!VAR_5) {\n\t\t\tVAR_0->phdr[VAR_3].p_flags = READ32 (VAR_8, VAR_10);\n\t\t/* COMMENT_0 */\n\t\t}\n\t\tVAR_0->phdr[VAR_3].p_align = R_BIN_ELF_READWORD (VAR_8, VAR_10);\n\t}\n\t/* COMMENT_1 */\n                                                          \n                                                    \n                                         \n                                                       \n                                                                 \n    \n\tif (VAR_1 && VAR_2) {\n\t\tut64 VAR_14 = Elf_(VAR_15) (VAR_0);\n\t\tVAR_0->ehdr.e_phoff = Elf_(VAR_16) (VAR_0, VAR_14 + VAR_0->ehdr.e_phoff);\n\t\treturn read_phdr (VAR_0, false);\n\t}\n\n\treturn true;\n}",
  "func_graph_path_before": "radareorg/radare2/3ecdbf8e21186a9c5a4d3cfa3b1e9fd27045340e/elf.c/vul/before/4.json",
  "func": "static bool read_phdr(ELFOBJ *bin, bool linux_kernel_hack) {\n\tbool phdr_found = false;\n\tint i;\n#if R_BIN_ELF64\n\tconst bool is_elf64 = true;\n#else\n\tconst bool is_elf64 = false;\n#endif\n\tut64 phnum = Elf_(r_bin_elf_get_phnum) (bin);\n\tfor (i = 0; i < phnum; i++) {\n\t\tut8 phdr[sizeof (Elf_(Phdr))] = {0};\n\t\tint j = 0;\n\t\tconst size_t rsize = bin->ehdr.e_phoff + i * sizeof (Elf_(Phdr));\n\t\tint len = r_buf_read_at (bin->b, rsize, phdr, sizeof (Elf_(Phdr)));\n\t\tif (len < 1) {\n\t\t\tR_LOG_DEBUG (\"read (phdr)\");\n\t\t\tR_FREE (bin->phdr);\n\t\t\treturn false;\n\t\t}\n\t\tbin->phdr[i].p_type = READ32 (phdr, j);\n\t\tif (bin->phdr[i].p_type == PT_PHDR) {\n\t\t\tphdr_found = true;\n\t\t}\n\n\t\tif (is_elf64) {\n\t\t\tbin->phdr[i].p_flags = READ32 (phdr, j);\n\t\t}\n\t\tbin->phdr[i].p_offset = R_BIN_ELF_READWORD (phdr, j);\n\t\tbin->phdr[i].p_vaddr = R_BIN_ELF_READWORD (phdr, j);\n\t\tbin->phdr[i].p_paddr = R_BIN_ELF_READWORD (phdr, j);\n\t\tbin->phdr[i].p_filesz = R_BIN_ELF_READWORD (phdr, j);\n\t\tbin->phdr[i].p_memsz = R_BIN_ELF_READWORD (phdr, j);\n\t\tif (!is_elf64) {\n\t\t\tbin->phdr[i].p_flags = READ32 (phdr, j);\n\t\t//\tbin->phdr[i].p_flags |= 1; tiny.elf needs this somehow :? LOAD0 is always +x for linux?\n\t\t}\n\t\tbin->phdr[i].p_align = R_BIN_ELF_READWORD (phdr, j);\n\t}\n\t/* Here is the where all the fun starts.\n\t * Linux kernel since 2005 calculates phdr offset wrongly\n\t * adding it to the load address (va of the LOAD0).\n\t * See `fs/binfmt_elf.c` file this line:\n\t *    NEW_AUX_ENT(AT_PHDR, load_addr + exec->e_phoff);\n\t * So after the first read, we fix the address and read it again\n\t */\n\tif (linux_kernel_hack && phdr_found) {\n\t\tut64 load_addr = Elf_(r_bin_elf_get_baddr) (bin);\n\t\tbin->ehdr.e_phoff = Elf_(r_bin_elf_v2p) (bin, load_addr + bin->ehdr.e_phoff);\n\t\treturn read_phdr (bin, false);\n\t}\n\n\treturn true;\n}",
  "abstract_func": "static bool read_phdr(ELFOBJ *VAR_0, bool VAR_1) {\n\tbool VAR_2 = false;\n\tint VAR_3;\n#if VAR_4\n\tconst bool VAR_5 = true;\n#else\n\tconst bool VAR_5 = false;\n#endif\n\tut64 VAR_6 = Elf_(VAR_7) (VAR_0);\n\tfor (VAR_3 = 0; VAR_3 < VAR_6; VAR_3++) {\n\t\tut8 VAR_8[sizeof (Elf_(VAR_9))] = {0};\n\t\tint VAR_10 = 0;\n\t\tconst size_t VAR_11 = VAR_0->ehdr.e_phoff + VAR_3 * sizeof (Elf_(VAR_9));\n\t\tint VAR_12 = r_buf_read_at (VAR_0->b, VAR_11, VAR_8, sizeof (Elf_(VAR_9)));\n\t\tif (VAR_12 < 1) {\n\t\t\tR_LOG_DEBUG (\"read (phdr)\");\n\t\t\tR_FREE (VAR_0->phdr);\n\t\t\treturn false;\n\t\t}\n\t\tVAR_0->phdr[VAR_3].p_type = READ32 (VAR_8, VAR_10);\n\t\tif (VAR_0->phdr[VAR_3].p_type == VAR_13) {\n\t\t\tVAR_2 = true;\n\t\t}\n\n\t\tif (VAR_5) {\n\t\t\tVAR_0->phdr[VAR_3].p_flags = READ32 (VAR_8, VAR_10);\n\t\t}\n\t\tVAR_0->phdr[VAR_3].p_offset = R_BIN_ELF_READWORD (VAR_8, VAR_10);\n\t\tVAR_0->phdr[VAR_3].p_vaddr = R_BIN_ELF_READWORD (VAR_8, VAR_10);\n\t\tVAR_0->phdr[VAR_3].p_paddr = R_BIN_ELF_READWORD (VAR_8, VAR_10);\n\t\tVAR_0->phdr[VAR_3].p_filesz = R_BIN_ELF_READWORD (VAR_8, VAR_10);\n\t\tVAR_0->phdr[VAR_3].p_memsz = R_BIN_ELF_READWORD (VAR_8, VAR_10);\n\t\tif (!VAR_5) {\n\t\t\tVAR_0->phdr[VAR_3].p_flags = READ32 (VAR_8, VAR_10);\n\t\t/* COMMENT_0 */\n\t\t}\n\t\tVAR_0->phdr[VAR_3].p_align = R_BIN_ELF_READWORD (VAR_8, VAR_10);\n\t}\n\t/* COMMENT_1 */\n                                                          \n                                                    \n                                         \n                                                       \n                                                                 \n    \n\tif (VAR_1 && VAR_2) {\n\t\tut64 VAR_14 = Elf_(VAR_15) (VAR_0);\n\t\tVAR_0->ehdr.e_phoff = Elf_(VAR_16) (VAR_0, VAR_14 + VAR_0->ehdr.e_phoff);\n\t\treturn read_phdr (VAR_0, false);\n\t}\n\n\treturn true;\n}",
  "func_graph_path": "radareorg/radare2/3ecdbf8e21186a9c5a4d3cfa3b1e9fd27045340e/elf.c/vul/after/4.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -13,7 +13,7 @@\n \t\tconst size_t rsize = bin->ehdr.e_phoff + i * sizeof (Elf_(Phdr));\n \t\tint len = r_buf_read_at (bin->b, rsize, phdr, sizeof (Elf_(Phdr)));\n \t\tif (len < 1) {\n-\t\t\tR_LOG_ERROR (\"read (phdr)\");\n+\t\t\tR_LOG_DEBUG (\"read (phdr)\");\n \t\t\tR_FREE (bin->phdr);\n \t\t\treturn false;\n \t\t}",
  "diff_line_info": {
    "deleted_lines": [
      "\t\t\tR_LOG_ERROR (\"read (phdr)\");"
    ],
    "added_lines": [
      "\t\t\tR_LOG_DEBUG (\"read (phdr)\");"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/radareorg/radare2/pull/20097",
  "description": {
    "pr_info": {
      "title": "Fix 4 byte oobread in msp430 disassembler ##crash",
      "number": 20097
    },
    "comment": [
      "* Only crashes with asan builds\r\n* Add missing =SN register\r\n* Reported by cnitlrt via huntrdev\r\n* BountyID: 1c22055b-b015-47a8-a57b-4982978751d0\r\n\r\n<!--\r\nRead https://github.com/radareorg/radare2/blob/master/DEVELOPERS.md\r\n* PR title must be capitalized, concise and use ##tags\r\n* If the PR is fixing a ticket use 'Fix #1234 - ..' in the commit message\r\n* Follow the coding style, add tests and documentation if necessary\r\n-->\r\n\r\n- [ ] Mark this if you consider it ready to merge\r\n- [ ] I've added tests (optional)\r\n- [ ] I wrote some lines in the [book](https://github.com/radareorg/radare2book) (optional)\r\n\r\n**Description**\r\n\r\n<!-- explain your changes if necessary -->\r\n"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix  \nConfidence Score: 0.95",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "\n\n**Final Output:**\n\nAnalysis: The patch addresses an out-of-bounds read vulnerability in the msp430 disassembler, which could cause crashes and potential security issues. The code change modifies logging and adds a missing register to prevent the buffer overflow.\n\nFinal Classification: Security Vulnerability Fix  \nConfidence Score: 0.95"
}