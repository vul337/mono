{
  "cve_id": "CVE-2022-40761",
  "cwe_ids": [
    "CWE-1284"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
  "cvss_is_v3": true,
  "repo_name": "Samsung/mTower",
  "commit_msg": "Fixed CVE-2022-40761\n\nSigned-off-by: Taras Drozdovskyi <t.drozdovsky@samsung.com>",
  "commit_hash": "c5f30c70e48786e1aef8c815f35e406a6c4fb3ae",
  "git_url": "https://github.com/Samsung/mTower/commit/c5f30c70e48786e1aef8c815f35e406a6c4fb3ae",
  "file_path": "tee/kernel/user_ta.c",
  "func_name": "tee_ta_init_user_ta_session",
  "func_before": "TEE_Result tee_ta_init_user_ta_session(const TEE_UUID *uuid,\n\t\t\tstruct tee_ta_session *s)\n{\n//\tconst struct user_ta_store_ops *store;\n\tTEE_Result res;\n\n  struct user_ta_ctx *utc = NULL;\n  struct user_ta_head *ta_head;\n//  struct user_ta_store_handle *ta_handle = NULL;\n\n//  res = ta_store->open(uuid, &ta_handle);\n//  if (res != TEE_SUCCESS)\n//    return res;\n\n  DMSG(\"Lookup user TA %pUl\", (void *)uuid);\n\n  ta_head = (struct user_ta_head *)&__start_user_ta_head_section;\n  while (true) {\n    if (ta_head >= &__stop_user_ta_head_section)\n      return TEE_ERROR_ITEM_NOT_FOUND;\n\n//    uuid_print(&ta_head->uuid);\n//    uuid_print(uuid);\n\n    if (memcmp(&ta_head->uuid, uuid, sizeof(TEE_UUID)) == 0)\n      break;\n    ta_head++;\n  }\n\n  /* Load a new TA and create a session */\n  DMSG(\"Open %s\", ta_head->name);\n\n  /* Register context */\n  utc = calloc(1, sizeof(struct user_ta_ctx));\n  if (!utc) {\n    res = TEE_ERROR_OUT_OF_MEMORY;\n    goto error_return;\n  }\n\n  TAILQ_INIT(&utc->open_sessions);\n  TAILQ_INIT(&utc->cryp_states);\n  TAILQ_INIT(&utc->objects);\n  //TAILQ_INIT(&utc->storage_enums);\n  s->ctx = &utc->ctx;\n\n  utc->ctx.flags = ta_head->flags;\n  utc->ctx.uuid = ta_head->uuid;\n  utc->user_ta = ta_head;\n//  utc->entry_func = ta_head->entry.ptr64;\n  utc->ctx.ops = &user_ta_ops;\n\n  TAILQ_INSERT_TAIL(&tee_ctxes, &utc->ctx, link);\n\n  DMSG(\"Context was successfully inserted!\");\n\n  return TEE_SUCCESS;\n\n//  DMSG(\"%s : %pUl\", stc->pseudo_ta->name, (void *)&ctx->uuid);\n\n//\tSLIST_FOREACH(store, &uta_store_list, link) {\n//\t\tDMSG(\"Lookup user TA %pUl (%s)\", (void *)uuid,\n//\t\t     store->description);\n//\t\tres = ta_load(uuid, store, &s->ctx);\n//\t\tif (res == TEE_ERROR_ITEM_NOT_FOUND)\n//\t\t\tcontinue;\n//\t\tif (res == TEE_SUCCESS)\n//\t\t\ts->ctx->ops = &user_ta_ops;\n//\t\telse\n//\t\t\tDMSG(\"res=0x%x\", res);\n//\t\treturn res;\n//\t}\nerror_return:\n\treturn res;\n}",
  "abstract_func_before": "TEE_Result tee_ta_init_user_ta_session(const TEE_UUID *VAR_0,\n\t\t\tstruct tee_ta_session *VAR_1)\n{\n/* COMMENT_0 */\n\tTEE_Result VAR_2;\n\n  struct user_ta_ctx *VAR_3 = NULL;\n  struct user_ta_head *VAR_4;\n/* COMMENT_1 */\n\n/* COMMENT_2 */\n/* COMMENT_3 */\n/* COMMENT_4 */\n\n  DMSG(\"Lookup user TA %pUl\", (void *)VAR_0);\n\n  VAR_4 = (struct user_ta_head *)&VAR_5;\n  while (true) {\n    if (VAR_4 >= &VAR_6)\n      return VAR_7;\n\n/* COMMENT_5 */\n/* COMMENT_6 */\n\n    if (memcmp(&VAR_4->uuid, VAR_0, sizeof(TEE_UUID)) == 0)\n      break;\n    VAR_4++;\n  }\n\n  /* COMMENT_7 */\n  DMSG(\"Open %s\", VAR_4->name);\n\n  /* COMMENT_8 */\n  VAR_3 = calloc(1, sizeof(struct user_ta_ctx));\n  if (!VAR_3) {\n    VAR_2 = VAR_8;\n    goto error_return;\n  }\n\n  TAILQ_INIT(&VAR_3->open_sessions);\n  TAILQ_INIT(&VAR_3->cryp_states);\n  TAILQ_INIT(&VAR_3->objects);\n  /* COMMENT_9 */\n  VAR_1->ctx = &VAR_3->ctx;\n\n  VAR_3->ctx.flags = VAR_4->flags;\n  VAR_3->ctx.uuid = VAR_4->uuid;\n  VAR_3->user_ta = VAR_4;\n/* COMMENT_10 */\n  VAR_3->ctx.ops = &VAR_9;\n\n  TAILQ_INSERT_TAIL(&VAR_10, &VAR_3->ctx, VAR_11);\n\n  DMSG(\"Context was successfully inserted!\");\n\n  return VAR_12;\n\n/* COMMENT_11 */\n\n/* COMMENT_12 */\n/* COMMENT_13 */\n/* COMMENT_14 */\n/* COMMENT_15 */\n/* COMMENT_16 */\n/* COMMENT_17 */\n/* COMMENT_18 */\n/* COMMENT_19 */\n/* COMMENT_20 */\n/* COMMENT_21 */\n/* COMMENT_22 */\n/* COMMENT_23 */\nerror_return:\n\treturn VAR_2;\n}",
  "func_graph_path_before": "Samsung/mTower/c5f30c70e48786e1aef8c815f35e406a6c4fb3ae/user_ta.c/vul/before/0.json",
  "func": "TEE_Result tee_ta_init_user_ta_session(const TEE_UUID *uuid,\n\t\t\tstruct tee_ta_session *s)\n{\n//\tconst struct user_ta_store_ops *store;\n\tTEE_Result res;\n\n  struct user_ta_ctx *utc = NULL;\n  struct user_ta_head *ta_head;\n//  struct user_ta_store_handle *ta_handle = NULL;\n\n//  res = ta_store->open(uuid, &ta_handle);\n//  if (res != TEE_SUCCESS)\n//    return res;\n\n  DMSG(\"Lookup user TA %pUl\", (void *)uuid);\n\n  ta_head = (struct user_ta_head *)&__start_user_ta_head_section;\n  while (true) {\n    if (ta_head >= &__stop_user_ta_head_section)\n      return TEE_ERROR_ITEM_NOT_FOUND;\n\n//    uuid_print(&ta_head->uuid);\n//    uuid_print(uuid);\n\n    if (memcmp(&ta_head->uuid, uuid, sizeof(TEE_UUID)) == 0)\n      break;\n    ta_head++;\n  }\n\n  /* Load a new TA and create a session */\n  DMSG(\"Open %s\", ta_head->name);\n\n  /* Register context */\n  // utc = calloc(1, sizeof(struct user_ta_ctx));\n  utc = TEE_Malloc(sizeof(struct user_ta_ctx), TEE_MALLOC_FILL_ZERO);\n  if (!utc) {\n    res = TEE_ERROR_OUT_OF_MEMORY;\n    goto error_return;\n  }\n\n  TAILQ_INIT(&utc->open_sessions);\n  TAILQ_INIT(&utc->cryp_states);\n  TAILQ_INIT(&utc->objects);\n  //TAILQ_INIT(&utc->storage_enums);\n  s->ctx = &utc->ctx;\n\n  utc->ctx.flags = ta_head->flags;\n  utc->ctx.uuid = ta_head->uuid;\n  utc->user_ta = ta_head;\n//  utc->entry_func = ta_head->entry.ptr64;\n  utc->ctx.ops = &user_ta_ops;\n\n  TAILQ_INSERT_TAIL(&tee_ctxes, &utc->ctx, link);\n\n  DMSG(\"Context was successfully inserted!\");\n\n  return TEE_SUCCESS;\n\n//  DMSG(\"%s : %pUl\", stc->pseudo_ta->name, (void *)&ctx->uuid);\n\n//\tSLIST_FOREACH(store, &uta_store_list, link) {\n//\t\tDMSG(\"Lookup user TA %pUl (%s)\", (void *)uuid,\n//\t\t     store->description);\n//\t\tres = ta_load(uuid, store, &s->ctx);\n//\t\tif (res == TEE_ERROR_ITEM_NOT_FOUND)\n//\t\t\tcontinue;\n//\t\tif (res == TEE_SUCCESS)\n//\t\t\ts->ctx->ops = &user_ta_ops;\n//\t\telse\n//\t\t\tDMSG(\"res=0x%x\", res);\n//\t\treturn res;\n//\t}\nerror_return:\n\treturn res;\n}",
  "abstract_func": "TEE_Result tee_ta_init_user_ta_session(const TEE_UUID *VAR_0,\n\t\t\tstruct tee_ta_session *VAR_1)\n{\n/* COMMENT_0 */\n\tTEE_Result VAR_2;\n\n  struct user_ta_ctx *VAR_3 = NULL;\n  struct user_ta_head *VAR_4;\n/* COMMENT_1 */\n\n/* COMMENT_2 */\n/* COMMENT_3 */\n/* COMMENT_4 */\n\n  DMSG(\"Lookup user TA %pUl\", (void *)VAR_0);\n\n  VAR_4 = (struct user_ta_head *)&VAR_5;\n  while (true) {\n    if (VAR_4 >= &VAR_6)\n      return VAR_7;\n\n/* COMMENT_5 */\n/* COMMENT_6 */\n\n    if (memcmp(&VAR_4->uuid, VAR_0, sizeof(TEE_UUID)) == 0)\n      break;\n    VAR_4++;\n  }\n\n  /* COMMENT_7 */\n  DMSG(\"Open %s\", VAR_4->name);\n\n  /* COMMENT_8 */\n  /* COMMENT_9 */\n  VAR_3 = TEE_Malloc(sizeof(struct user_ta_ctx), VAR_8);\n  if (!VAR_3) {\n    VAR_2 = VAR_9;\n    goto error_return;\n  }\n\n  TAILQ_INIT(&VAR_3->open_sessions);\n  TAILQ_INIT(&VAR_3->cryp_states);\n  TAILQ_INIT(&VAR_3->objects);\n  /* COMMENT_10 */\n  VAR_1->ctx = &VAR_3->ctx;\n\n  VAR_3->ctx.flags = VAR_4->flags;\n  VAR_3->ctx.uuid = VAR_4->uuid;\n  VAR_3->user_ta = VAR_4;\n/* COMMENT_11 */\n  VAR_3->ctx.ops = &VAR_10;\n\n  TAILQ_INSERT_TAIL(&VAR_11, &VAR_3->ctx, VAR_12);\n\n  DMSG(\"Context was successfully inserted!\");\n\n  return VAR_13;\n\n/* COMMENT_12 */\n\n/* COMMENT_13 */\n/* COMMENT_14 */\n/* COMMENT_15 */\n/* COMMENT_16 */\n/* COMMENT_17 */\n/* COMMENT_18 */\n/* COMMENT_19 */\n/* COMMENT_20 */\n/* COMMENT_21 */\n/* COMMENT_22 */\n/* COMMENT_23 */\n/* COMMENT_24 */\nerror_return:\n\treturn VAR_2;\n}",
  "func_graph_path": "Samsung/mTower/c5f30c70e48786e1aef8c815f35e406a6c4fb3ae/user_ta.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -31,7 +31,8 @@\n   DMSG(\"Open %s\", ta_head->name);\n \n   /* Register context */\n-  utc = calloc(1, sizeof(struct user_ta_ctx));\n+  // utc = calloc(1, sizeof(struct user_ta_ctx));\n+  utc = TEE_Malloc(sizeof(struct user_ta_ctx), TEE_MALLOC_FILL_ZERO);\n   if (!utc) {\n     res = TEE_ERROR_OUT_OF_MEMORY;\n     goto error_return;",
  "diff_line_info": {
    "deleted_lines": [
      "  utc = calloc(1, sizeof(struct user_ta_ctx));"
    ],
    "added_lines": [
      "  // utc = calloc(1, sizeof(struct user_ta_ctx));",
      "  utc = TEE_Malloc(sizeof(struct user_ta_ctx), TEE_MALLOC_FILL_ZERO);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/Samsung/mTower/pull/88",
  "description": {
    "pr_info": {
      "title": "Fixed CVE-2022-40761",
      "number": 88
    },
    "comment": [
      "Signed-off-by: Taras Drozdovskyi <t.drozdovsky@samsung.com>\r\n\r\n\r\nFixes #83\r\n\r\n## Type of change\r\n\r\n- [x] Bug fix (non-breaking change which fixes an issue)\r\n\r\n# Checklist:\r\n\r\n- [x] My code follows the style guidelines of this project\r\n- [x] I have performed a self-review of my own code\r\n- [x] I have commented my code, particularly in hard-to-understand areas\r\n- [ ] I have made corresponding changes to the documentation\r\n- [x] My changes generate no new warnings\r\n- [ ] I have added tests that prove my fix is effective or that my feature works\r\n- [x] New and existing unit tests pass locally with my changes\r\n- [ ] Any dependent changes have been merged and published in downstream modules"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix  \nConfidence Score: 1.0",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "\n\n**Final Output:**\n\nAnalysis: The patch addresses a CVE, indicating a security issue. The code change replaces calloc with TEE_Malloc, enhancing memory security in a TEE context, which is critical for preventing vulnerabilities like information leakage or buffer overflow.\n\nFinal Classification: Security Vulnerability Fix  \nConfidence Score: 1.0"
}