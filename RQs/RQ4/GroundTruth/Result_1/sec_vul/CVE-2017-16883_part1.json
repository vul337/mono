{
  "cve_id": "CVE-2017-16883",
  "cwe_ids": [
    "CWE-476"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "libming",
  "commit_msg": "Fix NULL pointer deref in outputSWF_TEXT_RECORD\n\nfip and fip_current are static pointers to a linked list containing\nfonts information. This list and the two pointers are initialized and\nfilled by saveFontInfo() (called by the outputSWF_DEFINEFONTxxxx()\nfunctions when defining new fonts).\n\nIn the case where no font is defined, saveFontInfo() is never called\nand the two list pointers are NULL.\n\nThis situation may trigger a NULL pointer dereference in\noutputSWF_TEXT_RECORD. In this patch, we check for !fip_current\nbefore dereferencing it. In the == NULL case, we print a warning and\ncontinue.\n\nThis commit addresses CVE-2017-16883 (fixes #77).",
  "commit_hash": "f3a66c6479d1191734b5ab57d5d7e0bd7525b1a7",
  "git_url": "https://github.com/libming/libming/commit/f3a66c6479d1191734b5ab57d5d7e0bd7525b1a7",
  "file_path": "util/outputscript.c",
  "func_name": "outputSWF_TEXT_RECORD",
  "func_before": "static void\noutputSWF_TEXT_RECORD (SWF_TEXTRECORD *trec, int level,char *tname,char *buffer,int bsize,int id)\n{\n  int i=0;\n  struct FONTINFO *fi=fip;\n  if ( trec->TextRecordType == 0 )\n    return;\n  if (trec->StyleFlagHasFont)\n  {\n   printf(\"%s(\" VAR \"f%d);\\n\", methodcall (tname, \"setFont\"), trec->FontID);\n   printf(\"%s(%d);\\n\",methodcall(tname,\"setHeight\"),trec->TextHeight);\n  }\n  if( trec->StyleFlagHasColor )\n  {\n   if (level==2)\n    printf (\"%s(0x%02x, 0x%02x, 0x%02x, 0x%02x);\\n\",methodcall (tname, \"setColor\"),\n      trec->TextColor.red,trec->TextColor.green,trec->TextColor.blue, trec->TextColor.alpha);\n   else\n    printf (\"%s(0x%02x, 0x%02x, 0x%02x);\\n\",methodcall (tname, \"setColor\"),\n      trec->TextColor.red,trec->TextColor.green,trec->TextColor.blue);\n  }\n  if( trec->StyleFlagHasYOffset || trec->StyleFlagHasXOffset ) \n  {\n    printf (\"%s(%d, %d);\\n\", methodcall (tname, \"moveTo\"),trec->XOffset,trec->YOffset);\n  }\n  if (trec->FontID) \n  {\n    id=trec->FontID;\n  }\n  if (!trec->StyleFlagHasFont)\t\t\t\t/* always check flag before use data */\n  {\n   fi = fip_current;\t\t\t\t\t/* so cont w current font */\n   id = fi->fontcodeID;\t\t\t\t\t/* trigger next if */\n  }\n  while (fi)\n  {\n   if (fi->fontcodeID==id)\n   {\n    fip_current=fi;\t\t\t\t\t/* set current font */\n    for(i=0;i<trec->GlyphCount && i<bsize-1 ;i++)\t/* byte n-1 will be terminator '\\0' */\n    {\n     int off=(&(trec->GlyphEntries[i]))->GlyphIndex[0];\n     if (off<fi->fontcodearrsize)\n      buffer[i]=fi->fontcodeptr[off];\n     else\n      buffer[i]='?';\t\t/* fallback to dummy A */\n     /* printf ( COMMSTART \"GlyphIndex[0] = %d  char = %d \" COMMEND\"\\n\",off,fi->fontcodeptr[off] ); */\n    } \n    buffer[i]='\\0'; \n    return;\n   }\n   else\n    fi=fi->next;\n  }\n  buffer[0]='X';\t\t/* fallback to dummy B */\n  buffer[1]='\\0'; \n}",
  "abstract_func_before": "static void\noutputSWF_TEXT_RECORD (SWF_TEXTRECORD *VAR_0, int VAR_1,char *VAR_2,char *VAR_3,int VAR_4,int VAR_5)\n{\n  int VAR_6=0;\n  struct FONTINFO *VAR_7=VAR_8;\n  if ( VAR_0->TextRecordType == 0 )\n    return;\n  if (VAR_0->StyleFlagHasFont)\n  {\n   printf(\"%s(\" VAR_9 \"f%d);\\n\", methodcall (VAR_2, \"setFont\"), VAR_0->FontID);\n   printf(\"%s(%d);\\n\",methodcall(VAR_2,\"setHeight\"),VAR_0->TextHeight);\n  }\n  if( VAR_0->StyleFlagHasColor )\n  {\n   if (VAR_1==2)\n    printf (\"%s(0x%02x, 0x%02x, 0x%02x, 0x%02x);\\n\",methodcall (VAR_2, \"setColor\"),\n      VAR_0->TextColor.red,VAR_0->TextColor.green,VAR_0->TextColor.blue, VAR_0->TextColor.alpha);\n   else\n    printf (\"%s(0x%02x, 0x%02x, 0x%02x);\\n\",methodcall (VAR_2, \"setColor\"),\n      VAR_0->TextColor.red,VAR_0->TextColor.green,VAR_0->TextColor.blue);\n  }\n  if( VAR_0->StyleFlagHasYOffset || VAR_0->StyleFlagHasXOffset ) \n  {\n    printf (\"%s(%d, %d);\\n\", methodcall (VAR_2, \"moveTo\"),VAR_0->XOffset,VAR_0->YOffset);\n  }\n  if (VAR_0->FontID) \n  {\n    VAR_5=VAR_0->FontID;\n  }\n  if (!VAR_0->StyleFlagHasFont)\t\t\t\t/* COMMENT_0 */\n  {\n   VAR_7 = VAR_10;\t\t\t\t\t/* COMMENT_1 */\n   VAR_5 = VAR_7->fontcodeID;\t\t\t\t\t/* COMMENT_2 */\n  }\n  while (VAR_7)\n  {\n   if (VAR_7->fontcodeID==VAR_5)\n   {\n    VAR_10=VAR_7;\t\t\t\t\t/* COMMENT_3 */\n    for(VAR_6=0;VAR_6<VAR_0->GlyphCount && VAR_6<VAR_4-1 ;VAR_6++)\t/* COMMENT_4 */\n    {\n     int VAR_11=(&(VAR_0->GlyphEntries[VAR_6]))->GlyphIndex[0];\n     if (VAR_11<VAR_7->fontcodearrsize)\n      VAR_3[VAR_6]=VAR_7->fontcodeptr[VAR_11];\n     else\n      VAR_3[VAR_6]='?';\t\t/* COMMENT_5 */\n     /* COMMENT_6 */\n    } \n    VAR_3[VAR_6]='\\0'; \n    return;\n   }\n   else\n    VAR_7=VAR_7->next;\n  }\n  VAR_3[0]='X';\t\t/* COMMENT_7 */\n  VAR_3[1]='\\0'; \n}",
  "func_graph_path_before": "libming/f3a66c6479d1191734b5ab57d5d7e0bd7525b1a7/outputscript.c/vul/before/0.json",
  "func": "static void\noutputSWF_TEXT_RECORD (SWF_TEXTRECORD *trec, int level,char *tname,char *buffer,int bsize,int id)\n{\n  int i=0;\n  struct FONTINFO *fi=fip;\n  if ( trec->TextRecordType == 0 )\n    return;\n  if (trec->StyleFlagHasFont)\n  {\n   printf(\"%s(\" VAR \"f%d);\\n\", methodcall (tname, \"setFont\"), trec->FontID);\n   printf(\"%s(%d);\\n\",methodcall(tname,\"setHeight\"),trec->TextHeight);\n  }\n  if( trec->StyleFlagHasColor )\n  {\n   if (level==2)\n    printf (\"%s(0x%02x, 0x%02x, 0x%02x, 0x%02x);\\n\",methodcall (tname, \"setColor\"),\n      trec->TextColor.red,trec->TextColor.green,trec->TextColor.blue, trec->TextColor.alpha);\n   else\n    printf (\"%s(0x%02x, 0x%02x, 0x%02x);\\n\",methodcall (tname, \"setColor\"),\n      trec->TextColor.red,trec->TextColor.green,trec->TextColor.blue);\n  }\n  if( trec->StyleFlagHasYOffset || trec->StyleFlagHasXOffset ) \n  {\n    printf (\"%s(%d, %d);\\n\", methodcall (tname, \"moveTo\"),trec->XOffset,trec->YOffset);\n  }\n  if (trec->FontID) \n  {\n    id=trec->FontID;\n  }\n  if (!trec->StyleFlagHasFont)\t\t\t\t/* always check flag before use data */\n  {\n   fi = fip_current;\t\t\t\t\t/* so cont w current font */\n\n   if (!fi)\n      SWF_warn(\"outputSWF_TEXT_RECORD: can't process text record: fonts information list is NULL\\n\");\n   else\n      id = fi->fontcodeID;\t\t\t\t\t/* trigger next if */\n  }\n  while (fi)\n  {\n   if (fi->fontcodeID==id)\n   {\n    fip_current=fi;\t\t\t\t\t/* set current font */\n    for(i=0;i<trec->GlyphCount && i<bsize-1 ;i++)\t/* byte n-1 will be terminator '\\0' */\n    {\n     int off=(&(trec->GlyphEntries[i]))->GlyphIndex[0];\n     if (off<fi->fontcodearrsize)\n      buffer[i]=fi->fontcodeptr[off];\n     else\n      buffer[i]='?';\t\t/* fallback to dummy A */\n     /* printf ( COMMSTART \"GlyphIndex[0] = %d  char = %d \" COMMEND\"\\n\",off,fi->fontcodeptr[off] ); */\n    } \n    buffer[i]='\\0'; \n    return;\n   }\n   else\n    fi=fi->next;\n  }\n  buffer[0]='X';\t\t/* fallback to dummy B */\n  buffer[1]='\\0'; \n}",
  "abstract_func": "static void\noutputSWF_TEXT_RECORD (SWF_TEXTRECORD *VAR_0, int VAR_1,char *VAR_2,char *VAR_3,int VAR_4,int VAR_5)\n{\n  int VAR_6=0;\n  struct FONTINFO *VAR_7=VAR_8;\n  if ( VAR_0->TextRecordType == 0 )\n    return;\n  if (VAR_0->StyleFlagHasFont)\n  {\n   printf(\"%s(\" VAR_9 \"f%d);\\n\", methodcall (VAR_2, \"setFont\"), VAR_0->FontID);\n   printf(\"%s(%d);\\n\",methodcall(VAR_2,\"setHeight\"),VAR_0->TextHeight);\n  }\n  if( VAR_0->StyleFlagHasColor )\n  {\n   if (VAR_1==2)\n    printf (\"%s(0x%02x, 0x%02x, 0x%02x, 0x%02x);\\n\",methodcall (VAR_2, \"setColor\"),\n      VAR_0->TextColor.red,VAR_0->TextColor.green,VAR_0->TextColor.blue, VAR_0->TextColor.alpha);\n   else\n    printf (\"%s(0x%02x, 0x%02x, 0x%02x);\\n\",methodcall (VAR_2, \"setColor\"),\n      VAR_0->TextColor.red,VAR_0->TextColor.green,VAR_0->TextColor.blue);\n  }\n  if( VAR_0->StyleFlagHasYOffset || VAR_0->StyleFlagHasXOffset ) \n  {\n    printf (\"%s(%d, %d);\\n\", methodcall (VAR_2, \"moveTo\"),VAR_0->XOffset,VAR_0->YOffset);\n  }\n  if (VAR_0->FontID) \n  {\n    VAR_5=VAR_0->FontID;\n  }\n  if (!VAR_0->StyleFlagHasFont)\t\t\t\t/* COMMENT_0 */\n  {\n   VAR_7 = VAR_10;\t\t\t\t\t/* COMMENT_1 */\n\n   if (!VAR_7)\n      SWF_warn(\"outputSWF_TEXT_RECORD: can't process text record: fonts information list is NULL\\n\");\n   else\n      VAR_5 = VAR_7->fontcodeID;\t\t\t\t\t/* COMMENT_2 */\n  }\n  while (VAR_7)\n  {\n   if (VAR_7->fontcodeID==VAR_5)\n   {\n    VAR_10=VAR_7;\t\t\t\t\t/* COMMENT_3 */\n    for(VAR_6=0;VAR_6<VAR_0->GlyphCount && VAR_6<VAR_4-1 ;VAR_6++)\t/* COMMENT_4 */\n    {\n     int VAR_11=(&(VAR_0->GlyphEntries[VAR_6]))->GlyphIndex[0];\n     if (VAR_11<VAR_7->fontcodearrsize)\n      VAR_3[VAR_6]=VAR_7->fontcodeptr[VAR_11];\n     else\n      VAR_3[VAR_6]='?';\t\t/* COMMENT_5 */\n     /* COMMENT_6 */\n    } \n    VAR_3[VAR_6]='\\0'; \n    return;\n   }\n   else\n    VAR_7=VAR_7->next;\n  }\n  VAR_3[0]='X';\t\t/* COMMENT_7 */\n  VAR_3[1]='\\0'; \n}",
  "func_graph_path": "libming/f3a66c6479d1191734b5ab57d5d7e0bd7525b1a7/outputscript.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -30,7 +30,11 @@\n   if (!trec->StyleFlagHasFont)\t\t\t\t/* always check flag before use data */\n   {\n    fi = fip_current;\t\t\t\t\t/* so cont w current font */\n-   id = fi->fontcodeID;\t\t\t\t\t/* trigger next if */\n+\n+   if (!fi)\n+      SWF_warn(\"outputSWF_TEXT_RECORD: can't process text record: fonts information list is NULL\\n\");\n+   else\n+      id = fi->fontcodeID;\t\t\t\t\t/* trigger next if */\n   }\n   while (fi)\n   {",
  "diff_line_info": {
    "deleted_lines": [
      "   id = fi->fontcodeID;\t\t\t\t\t/* trigger next if */"
    ],
    "added_lines": [
      "",
      "   if (!fi)",
      "      SWF_warn(\"outputSWF_TEXT_RECORD: can't process text record: fonts information list is NULL\\n\");",
      "   else",
      "      id = fi->fontcodeID;\t\t\t\t\t/* trigger next if */"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/libming/libming/pull/94",
  "description": {
    "pr_info": {
      "title": "Fix NULL pointer dereference in outputSWF_TEXT_RECORD (CVE-2017-16883)",
      "number": 94
    },
    "comment": [
      "Check for `!fip_current` before dereferencing it in `id = fi->fontcodeID`.\r\n\r\nIn the == NULL case, print a warning and continue.\r\n\r\nThis PR addresses CVE-2017-16883 (#77).\r\n\r\nThe reproducer still triggers some memory leaks due to abrupt end with error message `Not parsing action da length 0`. These memory leaks are a different issue, already reported in #65: the library is [exiting abruptly](https://github.com/libming/libming/blob/master/util/parser.c#L1280) without freeing malloc-ed resources.",
      "Can you please add a NEWS entry too ?\n",
      "Oh, right, forgot it. Done.",
      "thank you"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix\n\nConfidence Score: 1.0",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "\n\n**Final Output:**\n\nAnalysis: The patch addresses a NULL pointer dereference in the outputSWF_TEXT_RECORD function, which could lead to a crash. The code adds a check for a NULL pointer and handles it by printing a warning, preventing the dereference. This resolves CVE-2017-16883, a security vulnerability.\n\nFinal Classification: Security Vulnerability Fix\n\nConfidence Score: 1.0"
}