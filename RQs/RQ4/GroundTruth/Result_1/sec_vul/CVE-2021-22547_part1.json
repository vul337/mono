{
  "cve_id": "CVE-2021-22547",
  "cwe_ids": [
    "CWE-120"
  ],
  "cvss_vector": "AV:L/AC:L/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "GoogleCloudPlatform/iot-device-sdk-embedded-c",
  "commit_msg": "calloc limits",
  "commit_hash": "46cccccb7bf94d935890a177f6160ede91780ef3",
  "git_url": "https://github.com/GoogleCloudPlatform/iot-device-sdk-embedded-c/commit/46cccccb7bf94d935890a177f6160ede91780ef3",
  "file_path": "src/libiotc/memory/iotc_allocator.c",
  "func_name": "__iotc_calloc",
  "func_before": "void* __iotc_calloc(size_t num, size_t byte_count) {\n  const size_t size_to_allocate = num * byte_count;\n  void* ret = iotc_bsp_mem_alloc(size_to_allocate);\n\n  /* It's unspecified if memset works with NULL pointer. */\n  if (NULL != ret) {\n    memset(ret, 0, size_to_allocate);\n  }\n\n  return ret;\n}",
  "abstract_func_before": "void* __iotc_calloc(size_t VAR_0, size_t VAR_1) {\n  const size_t VAR_2 = VAR_0 * VAR_1;\n  void* VAR_3 = iotc_bsp_mem_alloc(VAR_2);\n\n  /* COMMENT_0 */\n  if (NULL != VAR_3) {\n    memset(VAR_3, 0, VAR_2);\n  }\n\n  return VAR_3;\n}",
  "func_graph_path_before": "GoogleCloudPlatform/iot-device-sdk-embedded-c/46cccccb7bf94d935890a177f6160ede91780ef3/iotc_allocator.c/vul/before/0.json",
  "func": "void* __iotc_calloc(size_t num, size_t byte_count) {\n  const size_t size_to_allocate = num * byte_count;\n\n  /* Prevent overflow. */\n  if (size_to_allocate == 0 || num  > SIZE_MAX / byte_count) {\n    return NULL;\n  }\n\n  void* ret = iotc_bsp_mem_alloc(size_to_allocate);\n\n  /* It's unspecified if memset works with NULL pointer. */\n  if (NULL != ret) {\n    memset(ret, 0, size_to_allocate);\n  }\n  return ret;\n}",
  "abstract_func": "void* __iotc_calloc(size_t VAR_0, size_t VAR_1) {\n  const size_t VAR_2 = VAR_0 * VAR_1;\n\n  /* COMMENT_0 */\n  if (VAR_2 == 0 || VAR_0  > VAR_3 / VAR_1) {\n    return NULL;\n  }\n\n  void* VAR_4 = iotc_bsp_mem_alloc(VAR_2);\n\n  /* COMMENT_1 */\n  if (NULL != VAR_4) {\n    memset(VAR_4, 0, VAR_2);\n  }\n  return VAR_4;\n}",
  "func_graph_path": "GoogleCloudPlatform/iot-device-sdk-embedded-c/46cccccb7bf94d935890a177f6160ede91780ef3/iotc_allocator.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,11 +1,16 @@\n void* __iotc_calloc(size_t num, size_t byte_count) {\n   const size_t size_to_allocate = num * byte_count;\n+\n+  /* Prevent overflow. */\n+  if (size_to_allocate == 0 || num  > SIZE_MAX / byte_count) {\n+    return NULL;\n+  }\n+\n   void* ret = iotc_bsp_mem_alloc(size_to_allocate);\n \n   /* It's unspecified if memset works with NULL pointer. */\n   if (NULL != ret) {\n     memset(ret, 0, size_to_allocate);\n   }\n-\n   return ret;\n }",
  "diff_line_info": {
    "deleted_lines": [
      ""
    ],
    "added_lines": [
      "",
      "  /* Prevent overflow. */",
      "  if (size_to_allocate == 0 || num  > SIZE_MAX / byte_count) {",
      "    return NULL;",
      "  }",
      ""
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/GoogleCloudPlatform/iot-device-sdk-embedded-c/pull/119",
  "description": {
    "pr_info": {
      "title": "calloc limits",
      "number": 119
    },
    "comment": [
      "Adds overflow protection to `__iotc_calloc` calls, as well as unit tests for the function."
    ]
  },
  "Bug Filter": "** Security Vulnerability Fix  \n**Confidence Score:** 1.0",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "\n\nThe patch addresses a potential integer overflow in the `__iotc_calloc` function, which could lead to security vulnerabilities. The added checks prevent overflow, ensuring secure memory allocation.\n\n**Final Classification:** Security Vulnerability Fix  \n**Confidence Score:** 1.0"
}