{
  "cve_id": "CVE-2019-17402",
  "cwe_ids": [
    "CWE-120"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "Exiv2/exiv2",
  "commit_msg": "crwimage: Check offset and size against total size\n\nCorrupted or specially crafted CRW images might exceed the overall\nbuffersize.\n\nFixes #1019",
  "commit_hash": "683451567284005cd24e1ccb0a76ca401000968b",
  "git_url": "https://github.com/Exiv2/exiv2/commit/683451567284005cd24e1ccb0a76ca401000968b",
  "file_path": "src/crwimage_int.cpp",
  "func_name": "CiffDirectory::doRead",
  "func_before": "void CiffDirectory::doRead(const byte* pData,\n                               uint32_t    size,\n                               uint32_t    start,\n                               ByteOrder   byteOrder)\n    {\n        CiffComponent::doRead(pData, size, start, byteOrder);\n#ifdef EXIV2_DEBUG_MESSAGES\n        std::cout << \"Reading directory 0x\" << std::hex << tag() << \"\\n\";\n#endif\n        readDirectory(pData + offset(), this->size(), byteOrder);\n#ifdef EXIV2_DEBUG_MESSAGES\n        std::cout << \"<---- 0x\" << std::hex << tag() << \"\\n\";\n#endif\n    }",
  "abstract_func_before": "void CiffDirectory::doRead(const byte* VAR_0,\n                               uint32_t    VAR_1,\n                               uint32_t    VAR_2,\n                               ByteOrder   VAR_3)\n    {\n        CiffComponent::doRead(VAR_0, VAR_1, VAR_2, VAR_3);\n#ifdef VAR_4\n        std::cout << \"Reading directory 0x\" << std::hex << tag() << \"\\n\";\n#endif\n        readDirectory(VAR_0 + offset(), this->size(), VAR_3);\n#ifdef VAR_4\n        std::cout << \"<---- 0x\" << std::hex << tag() << \"\\n\";\n#endif\n    }",
  "func_graph_path_before": "Exiv2/exiv2/683451567284005cd24e1ccb0a76ca401000968b/crwimage_int.cpp/vul/before/0.json",
  "func": "void CiffDirectory::doRead(const byte* pData,\n                               uint32_t    size,\n                               uint32_t    start,\n                               ByteOrder   byteOrder)\n    {\n        CiffComponent::doRead(pData, size, start, byteOrder);\n#ifdef EXIV2_DEBUG_MESSAGES\n        std::cout << \"Reading directory 0x\" << std::hex << tag() << \"\\n\";\n#endif\n        if (this->offset() + this->size() > size)\n            throw Error(kerOffsetOutOfRange);\n\n        readDirectory(pData + offset(), this->size(), byteOrder);\n#ifdef EXIV2_DEBUG_MESSAGES\n        std::cout << \"<---- 0x\" << std::hex << tag() << \"\\n\";\n#endif\n    }",
  "abstract_func": "void CiffDirectory::doRead(const byte* VAR_0,\n                               uint32_t    VAR_1,\n                               uint32_t    VAR_2,\n                               ByteOrder   VAR_3)\n    {\n        CiffComponent::doRead(VAR_0, VAR_1, VAR_2, VAR_3);\n#ifdef VAR_4\n        std::cout << \"Reading directory 0x\" << std::hex << tag() << \"\\n\";\n#endif\n        if (this->offset() + this->size() > VAR_1)\n            throw Error(VAR_5);\n\n        readDirectory(VAR_0 + offset(), this->size(), VAR_3);\n#ifdef VAR_4\n        std::cout << \"<---- 0x\" << std::hex << tag() << \"\\n\";\n#endif\n    }",
  "func_graph_path": "Exiv2/exiv2/683451567284005cd24e1ccb0a76ca401000968b/crwimage_int.cpp/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -7,6 +7,9 @@\n #ifdef EXIV2_DEBUG_MESSAGES\n         std::cout << \"Reading directory 0x\" << std::hex << tag() << \"\\n\";\n #endif\n+        if (this->offset() + this->size() > size)\n+            throw Error(kerOffsetOutOfRange);\n+\n         readDirectory(pData + offset(), this->size(), byteOrder);\n #ifdef EXIV2_DEBUG_MESSAGES\n         std::cout << \"<---- 0x\" << std::hex << tag() << \"\\n\";",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "        if (this->offset() + this->size() > size)",
      "            throw Error(kerOffsetOutOfRange);",
      ""
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/Exiv2/exiv2/pull/1020",
  "description": {
    "pr_info": {
      "title": "crwimage: Check offset and size against total size",
      "number": 1020
    },
    "comment": [
      "Corrupted or specially crafted CRW images might exceed the overall\r\nbuffersize.\r\n\r\nFixes #1019",
      "Thank you for the quick fix! I'll add a test for this ASAP and will take a look in further detail.",
      "Not super-happy about the location. looks odd to me, but I am not sure that the base read() should decide this, and the readDirectory() cannot decide it.",
      "Thanks for the fix! \r\n\r\nAlthough it might not look as the best place where to place the new lines, I would not worry too much about it right now. None of use know that class in depth to judge where it should go. If somebody ever tries to study & improve that class, we could take the opportunity to better organise the code.\r\n\r\nI'll wait for the regression test promised by @D4N  before approving. \r\n\r\n",
      "By the way, I could reproduce the issue in both `master` and `0.27-maintance`. ",
      "> Not super-happy about the location. looks odd to me, but I am not sure that the base read() should decide this, and the readDirectory() cannot decide it.\r\n\r\nYes, the location doesn't feel right to me either to be honest.\r\n\r\nI am currently suspecting that the bug is in `CiffComponent::doRead`:\r\n``` C++\r\n    void CiffComponent::doRead(const byte* pData,\r\n                               uint32_t    size,\r\n                               uint32_t    start,\r\n                               ByteOrder   byteOrder)\r\n    {\r\n        if (size < 10) throw Error(kerNotACrwImage);\r\n        tag_ = getUShort(pData + start, byteOrder);\r\n\r\n        DataLocId dl = dataLocation();\r\n        assert(dl == directoryData || dl == valueData);\r\n\r\n        if (dl == valueData) {\r\n            size_   = getULong(pData + start + 2, byteOrder);\r\n            offset_ = getULong(pData + start + 6, byteOrder);\r\n        }\r\n        if ( size_ > size || offset_ > size ) throw Error(kerOffsetOutOfRange); // #889\r\n        if (dl == directoryData) {\r\n            // snip\r\n        }\r\n        pData_ = pData + offset_;\r\n#ifdef EXIV2_DEBUG_MESSAGES\r\n        // snip\r\n#endif\r\n\r\n    } // CiffComponent::doRead\r\n```\r\n\r\nThe malformed file hits the `dl == valueData` branch and extracts the following values:\r\n```\r\nsize_ = 5608\r\noffset_ = 6978\r\n```\r\nbut the actual size of the buffer `pData` is given in `size` (10052) which is less then `size_ + offset_`. Unfortunately, the check in the line after the if doesn't find this case…\r\n\r\nSo from my current (very tired) point of view, it would be the easiest to just set `size_ = size - offset();` below the line where `pData_` is set. But when we start doing that, then we might as well remove the throw in the line with the comment `// #889`… I'll try to take another look at this tomorrow.",
      "I pondered a bit on this and I think that check can be moved inside read(). It is trying to gather its own size and can well know if it exceeds the overall size.\r\n\r\nThe other question is whether it should try to continue to parse the CRW (by setting size_ to size - offset). But that might cause an endless loop if you choose an offset that is big enough to point you back to the start of  the initial structure, then you parse down again, hit the faulty offset etc.\r\n\r\nI'd opt for abort here, tbh.\r\n\r\nand yes, you were tired, 5608 + 6978 is 12586 which is well over 10052 ;)",
      "# [Codecov](https://codecov.io/gh/Exiv2/exiv2/pull/1020?src=pr&el=h1) Report\n> Merging [#1020](https://codecov.io/gh/Exiv2/exiv2/pull/1020?src=pr&el=desc) into [master](https://codecov.io/gh/Exiv2/exiv2/commit/401e658d609e5ffd95294ed264f7c18c2605b752?src=pr&el=desc) will **increase** coverage by `0.05%`.\n> The diff coverage is `100%`.\n\n[![Impacted file tree graph](https://codecov.io/gh/Exiv2/exiv2/pull/1020/graphs/tree.svg?width=650&token=O9G7Iswx26&height=150&src=pr)](https://codecov.io/gh/Exiv2/exiv2/pull/1020?src=pr&el=tree)\n\n```diff\n@@            Coverage Diff             @@\n##           master    #1020      +/-   ##\n==========================================\n+ Coverage   71.18%   71.24%   +0.05%     \n==========================================\n  Files         148      148              \n  Lines       19418    19457      +39     \n==========================================\n+ Hits        13823    13862      +39     \n  Misses       5595     5595\n```\n\n\n| [Impacted Files](https://codecov.io/gh/Exiv2/exiv2/pull/1020?src=pr&el=tree) | Coverage Δ | |\n|---|---|---|\n| [src/crwimage\\_int.cpp](https://codecov.io/gh/Exiv2/exiv2/pull/1020/diff?src=pr&el=tree#diff-c3JjL2Nyd2ltYWdlX2ludC5jcHA=) | `38.99% <100%> (+0.23%)` | :arrow_up: |\n| [src/exiv2.cpp](https://codecov.io/gh/Exiv2/exiv2/pull/1020/diff?src=pr&el=tree#diff-c3JjL2V4aXYyLmNwcA==) | `100% <0%> (ø)` | :arrow_up: |\n| [samples/write2-test.cpp](https://codecov.io/gh/Exiv2/exiv2/pull/1020/diff?src=pr&el=tree#diff-c2FtcGxlcy93cml0ZTItdGVzdC5jcHA=) | `98.25% <0%> (+0.02%)` | :arrow_up: |\n| [samples/geotag.cpp](https://codecov.io/gh/Exiv2/exiv2/pull/1020/diff?src=pr&el=tree#diff-c2FtcGxlcy9nZW90YWcuY3Bw) | `80.98% <0%> (+0.09%)` | :arrow_up: |\n| [samples/write-test.cpp](https://codecov.io/gh/Exiv2/exiv2/pull/1020/diff?src=pr&el=tree#diff-c2FtcGxlcy93cml0ZS10ZXN0LmNwcA==) | `93.39% <0%> (+0.12%)` | :arrow_up: |\n| [samples/exiv2json.cpp](https://codecov.io/gh/Exiv2/exiv2/pull/1020/diff?src=pr&el=tree#diff-c2FtcGxlcy9leGl2Mmpzb24uY3Bw) | `79.61% <0%> (+0.13%)` | :arrow_up: |\n| [samples/exifdata-test.cpp](https://codecov.io/gh/Exiv2/exiv2/pull/1020/diff?src=pr&el=tree#diff-c2FtcGxlcy9leGlmZGF0YS10ZXN0LmNwcA==) | `94.18% <0%> (+0.13%)` | :arrow_up: |\n| [samples/xmpsample.cpp](https://codecov.io/gh/Exiv2/exiv2/pull/1020/diff?src=pr&el=tree#diff-c2FtcGxlcy94bXBzYW1wbGUuY3Bw) | `93.54% <0%> (+0.14%)` | :arrow_up: |\n| [samples/iptcprint.cpp](https://codecov.io/gh/Exiv2/exiv2/pull/1020/diff?src=pr&el=tree#diff-c2FtcGxlcy9pcHRjcHJpbnQuY3Bw) | `96.29% <0%> (+0.29%)` | :arrow_up: |\n| [samples/tiff-test.cpp](https://codecov.io/gh/Exiv2/exiv2/pull/1020/diff?src=pr&el=tree#diff-c2FtcGxlcy90aWZmLXRlc3QuY3Bw) | `91.37% <0%> (+0.3%)` | :arrow_up: |\n| ... and [10 more](https://codecov.io/gh/Exiv2/exiv2/pull/1020/diff?src=pr&el=tree-more) | |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/Exiv2/exiv2/pull/1020?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/Exiv2/exiv2/pull/1020?src=pr&el=footer). Last update [401e658...73b874f](https://codecov.io/gh/Exiv2/exiv2/pull/1020?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix\n\nConfidence Score: 1.0",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "\n\n**Final Output:**\n\nAnalysis: The patch addresses a buffer overflow issue by adding a check to prevent corrupted or crafted CRW images from exceeding buffer size, thus mitigating a security vulnerability.\n\nFinal Classification: Security Vulnerability Fix\n\nConfidence Score: 1.0"
}