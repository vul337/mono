{
  "cve_id": "CVE-2016-15026",
  "cwe_ids": [
    "CWE-611"
  ],
  "cvss_vector": "AV:L/AC:L/Au:S/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "3breadt/dd-plist",
  "commit_msg": "1) Take steps to guard against external XXE attacks (except, note that <!DOCTYPE> cannot be disabled in XML plists).\n2) Resolve the actual PLIST DTD from inside the JAR file itself, and prevent resolution of other external XML resources.\n3) Make XMLPlistParser.getDocBuilder public",
  "commit_hash": "8c954e8d9f6f6863729e50105a8abf3f87fff74c",
  "git_url": "https://github.com/3breadt/dd-plist/commit/8c954e8d9f6f6863729e50105a8abf3f87fff74c",
  "file_path": "src/main/java/com/dd/plist/XMLPropertyListParser.java",
  "func_name": "getDocBuilder",
  "func_before": "private static synchronized DocumentBuilder getDocBuilder() throws ParserConfigurationException {\n        if (docBuilderFactory == null)\n            initDocBuilderFactory();\n        DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();\n        docBuilder.setEntityResolver(new EntityResolver() {\n            public InputSource resolveEntity(String publicId, String systemId) {\n                if (\"-//Apple Computer//DTD PLIST 1.0//EN\".equals(publicId) || // older publicId\n                        \"-//Apple//DTD PLIST 1.0//EN\".equals(publicId)) { // newer publicId\n                    // return a dummy, zero length DTD so we don't have to fetch\n                    // it from the network.\n                    return new InputSource(new ByteArrayInputStream(new byte[0]));\n                }\n                return null;\n            }\n        });\n        return docBuilder;\n    }",
  "abstract_func_before": "private static synchronized DocumentBuilder getDocBuilder() throws ParserConfigurationException {\n        if (VAR_0 == null)\n            initDocBuilderFactory();\n        DocumentBuilder VAR_1 = VAR_0.newDocumentBuilder();\n        VAR_1.setEntityResolver(new EntityResolver() {\n            public InputSource resolveEntity(String VAR_2, String VAR_3) {\n                if (\"-//Apple Computer//DTD PLIST 1.0//EN\".equals(VAR_2) || /* COMMENT_0 */\n                        \"-//Apple//DTD PLIST 1.0//EN\".equals(VAR_2)) { /* COMMENT_1 */\n                    /* COMMENT_2 */\n                    /* COMMENT_3 */\n                    return new InputSource(new ByteArrayInputStream(new byte[0]));\n                }\n                return null;\n            }\n        });\n        return VAR_1;\n    }",
  "func_graph_path_before": "3breadt/dd-plist/8c954e8d9f6f6863729e50105a8abf3f87fff74c/XMLPropertyListParser.java/vul/before/1.json",
  "func": "public static synchronized DocumentBuilder getDocBuilder() throws ParserConfigurationException {\n        DocumentBuilder builder = FACTORY.newDocumentBuilder();\n        builder.setEntityResolver(new PlistDTDResolver());\n        return builder;\n    }",
  "abstract_func": "public static synchronized DocumentBuilder getDocBuilder() throws ParserConfigurationException {\n        DocumentBuilder VAR_0 = VAR_1.newDocumentBuilder();\n        VAR_0.setEntityResolver(new PlistDTDResolver());\n        return VAR_0;\n    }",
  "func_graph_path": "3breadt/dd-plist/8c954e8d9f6f6863729e50105a8abf3f87fff74c/XMLPropertyListParser.java/vul/after/1.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,17 +1,5 @@\n-private static synchronized DocumentBuilder getDocBuilder() throws ParserConfigurationException {\n-        if (docBuilderFactory == null)\n-            initDocBuilderFactory();\n-        DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();\n-        docBuilder.setEntityResolver(new EntityResolver() {\n-            public InputSource resolveEntity(String publicId, String systemId) {\n-                if (\"-//Apple Computer//DTD PLIST 1.0//EN\".equals(publicId) || // older publicId\n-                        \"-//Apple//DTD PLIST 1.0//EN\".equals(publicId)) { // newer publicId\n-                    // return a dummy, zero length DTD so we don't have to fetch\n-                    // it from the network.\n-                    return new InputSource(new ByteArrayInputStream(new byte[0]));\n-                }\n-                return null;\n-            }\n-        });\n-        return docBuilder;\n+public static synchronized DocumentBuilder getDocBuilder() throws ParserConfigurationException {\n+        DocumentBuilder builder = FACTORY.newDocumentBuilder();\n+        builder.setEntityResolver(new PlistDTDResolver());\n+        return builder;\n     }",
  "diff_line_info": {
    "deleted_lines": [
      "private static synchronized DocumentBuilder getDocBuilder() throws ParserConfigurationException {",
      "        if (docBuilderFactory == null)",
      "            initDocBuilderFactory();",
      "        DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();",
      "        docBuilder.setEntityResolver(new EntityResolver() {",
      "            public InputSource resolveEntity(String publicId, String systemId) {",
      "                if (\"-//Apple Computer//DTD PLIST 1.0//EN\".equals(publicId) || // older publicId",
      "                        \"-//Apple//DTD PLIST 1.0//EN\".equals(publicId)) { // newer publicId",
      "                    // return a dummy, zero length DTD so we don't have to fetch",
      "                    // it from the network.",
      "                    return new InputSource(new ByteArrayInputStream(new byte[0]));",
      "                }",
      "                return null;",
      "            }",
      "        });",
      "        return docBuilder;"
    ],
    "added_lines": [
      "public static synchronized DocumentBuilder getDocBuilder() throws ParserConfigurationException {",
      "        DocumentBuilder builder = FACTORY.newDocumentBuilder();",
      "        builder.setEntityResolver(new PlistDTDResolver());",
      "        return builder;"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/3breadt/dd-plist/pull/26",
  "description": {
    "pr_info": {
      "title": "Protect XML parsing against XXE attacks and load DTD from JAR",
      "number": 26
    },
    "comment": [
      "1) Take steps to guard against XXE attacks (note that <!DOCTYPE> cannot be disabled in XML plists). See: https://www.owasp.org/index.php/XML_External_Entity_(XXE)_Prevention_Cheat_Sheet#Java\n2) Resolve the actual PLIST DTD from inside the JAR file itself, and prevent resolution of other external XML resources.\n3) Make XMLPlistParser.getDocBuilder public.\n",
      "First of all, I greatly appreciate your effort to make this library more secure.\n\n_Regarding 1)_\n\nThe code, especially setting the features, needs to be tested under Android because it uses a different DocumentBuilder implementation than the Oracle JRE. And so far this library has remained Android compatible. Have you done this?\n\n_Regarding 2)_\n\nI would not redistribute the DTD which originates from http://www.apple.com/DTDs/PropertyList-1.0.dtd and thus may be copyrighted by Apple Inc.\nThat is why the current DocumentBuilder uses an EntityResolver which returns an empty input stream.\n\nAs DTD validation is anyway disabled I see no reason to change that behavior. Or does this in any way compromise the fix against XXE attacks?\n",
      "Fair enough, I haven't tested whether these properties work on Android.  I could wrap each in a try/catch block in case they're not supported.  And I understand your copyright concern, I guess it's not strictly necessary to have there anyway unless one wants to validate the XML document.  I'll update this PR.\n",
      "Sounds good, thanks!\n"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix\n\nConfidence Score: 0.95",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "\n\n**Final Output:**\n\nAnalysis: The patch addresses XXE attacks by preventing external DTD resolution and making the method public. The changes mitigate a security vulnerability by blocking unauthorized access through XML parsing.\n\nFinal Classification: Security Vulnerability Fix\n\nConfidence Score: 0.95"
}