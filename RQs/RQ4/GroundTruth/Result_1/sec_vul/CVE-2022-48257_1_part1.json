{
  "cve_id": "CVE-2022-48257",
  "cwe_ids": [
    "CWE-Other",
    "CWE-732"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
  "cvss_is_v3": true,
  "repo_name": "MisterTea/EternalTerminal",
  "commit_msg": "Unify logfile names and create with more secure open options and perms.\n\nFixes #555 (Tribute to Colin McRae)",
  "commit_hash": "4a8b02d5f1afb38b00c77ab1321d5f56720f4e30",
  "git_url": "https://github.com/MisterTea/EternalTerminal/commit/4a8b02d5f1afb38b00c77ab1321d5f56720f4e30",
  "file_path": "src/terminal/TerminalServerMain.cpp",
  "func_name": "main",
  "func_before": "int main(int argc, char **argv) {\n  // Setup easylogging configurations\n  el::Configurations defaultConf = LogHandler::setupLogHandler(&argc, &argv);\n  LogHandler::setupStdoutLogger();\n\n  et::HandleTerminate();\n\n  // Override easylogging handler for sigint\n  ::signal(SIGINT, et::InterruptSignalHandler);\n\n  cxxopts::Options options(\"etserver\",\n                           \"Remote shell for the busy and impatient\");\n  try {\n    // Parse command line arguments\n    options.allow_unrecognised_options();\n\n    options.add_options()             //\n        (\"h,help\", \"Print help\")      //\n        (\"version\", \"Print version\")  //\n        (\"port\", \"Port to listen on\",\n         cxxopts::value<int>()->default_value(\"0\"))  //\n        (\"bindip\", \"IP to listen on\",\n         cxxopts::value<string>()->default_value(\"\"))  //\n        (\"daemon\", \"Daemonize the server\")             //\n        (\"cfgfile\", \"Location of the config file\",\n         cxxopts::value<std::string>()->default_value(\"\"))  //\n        (\"logtostdout\", \"log to stdout\")                    //\n        (\"pidfile\", \"Location of the pid file\",\n         cxxopts::value<std::string>()->default_value(\n             \"/var/run/etserver.pid\"))  //\n        (\"v,verbose\", \"Enable verbose logging\",\n         cxxopts::value<int>()->default_value(\"0\"), \"LEVEL\")  //\n        (\"serverfifo\",\n         \"If set, listens on the matching fifo name\",       //\n         cxxopts::value<std::string>()->default_value(\"\"))  //\n        (\"telemetry\",\n         \"Allow et to anonymously send errors to guide future improvements\",\n         cxxopts::value<bool>())  //\n        ;\n\n    auto result = options.parse(argc, argv);\n\n    if (result.count(\"help\")) {\n      CLOG(INFO, \"stdout\") << options.help({}) << endl;\n      exit(0);\n    }\n    if (result.count(\"version\")) {\n      CLOG(INFO, \"stdout\") << \"et version \" << ET_VERSION << endl;\n      exit(0);\n    }\n\n    el::Loggers::setVerboseLevel(result[\"verbose\"].as<int>());\n\n    if (result.count(\"daemon\")) {\n      if (DaemonCreator::create(true, result[\"pidfile\"].as<string>()) == -1) {\n        STFATAL << \"Error creating daemon: \" << strerror(GetErrno());\n      }\n    }\n\n    if (result.count(\"logtostdout\")) {\n      defaultConf.setGlobally(el::ConfigurationType::ToStandardOutput, \"true\");\n    } else {\n      defaultConf.setGlobally(el::ConfigurationType::ToStandardOutput, \"false\");\n      // Redirect std streams to a file\n      LogHandler::stderrToFile(GetTempDirectory() + \"etserver\");\n    }\n\n    ServerFifoPath serverFifo;\n\n    // default max log file size is 20MB for etserver\n    string maxlogsize = \"20971520\";\n\n    int port = 0;\n    string bindIp = \"\";\n    bool telemetry = false;\n    if (result.count(\"cfgfile\")) {\n      // Load the config file\n      CSimpleIniA ini(true, false, false);\n      string cfgfilename = result[\"cfgfile\"].as<string>();\n      SI_Error rc = ini.LoadFile(cfgfilename.c_str());\n      if (rc == 0) {\n        if (!result.count(\"port\")) {\n          const char *portString = ini.GetValue(\"Networking\", \"port\", NULL);\n          if (portString) {\n            port = stoi(portString);\n          }\n        }\n\n        if (!result.count(\"bindip\")) {\n          const char *bindIpPtr = ini.GetValue(\"Networking\", \"bind_ip\", NULL);\n          if (bindIpPtr) {\n            bindIp = string(bindIpPtr);\n          }\n        }\n\n        telemetry = ini.GetBoolValue(\"Debug\", \"telemetry\", false);\n        // read verbose level (prioritize command line option over cfgfile)\n        const char *vlevel = ini.GetValue(\"Debug\", \"verbose\", NULL);\n        if (result.count(\"verbose\")) {\n          el::Loggers::setVerboseLevel(result[\"verbose\"].as<int>());\n        } else if (vlevel) {\n          el::Loggers::setVerboseLevel(atoi(vlevel));\n        }\n\n        const char *fifoName = ini.GetValue(\"Debug\", \"serverfifo\", NULL);\n        if (fifoName) {\n          const string fifoNameStr(fifoName);\n          if (!fifoNameStr.empty()) {\n            serverFifo.setPathOverride(fifoNameStr);\n          }\n        }\n\n        // read silent setting\n        const char *silent = ini.GetValue(\"Debug\", \"silent\", NULL);\n        if (silent && atoi(silent) != 0) {\n          defaultConf.setGlobally(el::ConfigurationType::Enabled, \"false\");\n        }\n        // read log file size limit\n        const char *logsize = ini.GetValue(\"Debug\", \"logsize\", NULL);\n        if (logsize && atoi(logsize) != 0) {\n          // make sure maxlogsize is a string of int value\n          maxlogsize = string(logsize);\n        }\n\n      } else {\n        STFATAL << \"Invalid config file: \" << cfgfilename;\n      }\n    }\n\n    if (result.count(\"serverfifo\") &&\n        !result[\"serverfifo\"].as<string>().empty()) {\n      serverFifo.setPathOverride(result[\"serverfifo\"].as<string>());\n    }\n\n    if (result.count(\"port\")) {\n      port = result[\"port\"].as<int>();\n    }\n\n    if (result.count(\"bindip\")) {\n      bindIp = result[\"bindip\"].as<string>();\n    }\n\n    if (result.count(\"telemetry\")) {\n      telemetry = result[\"telemetry\"].as<bool>();\n    }\n\n    GOOGLE_PROTOBUF_VERIFY_VERSION;\n    srand(1);\n\n    if (port == 0) {\n      port = 2022;\n    }\n\n    // Set log file for etserver process here.\n    LogHandler::setupLogFile(&defaultConf,\n                             GetTempDirectory() + \"etserver-%datetime.log\",\n                             maxlogsize);\n    // Reconfigure default logger to apply settings above\n    el::Loggers::reconfigureLogger(\"default\", defaultConf);\n    // set thread name\n    el::Helpers::setThreadName(\"etserver-main\");\n    // Install log rotation callback\n    el::Helpers::installPreRollOutCallback(LogHandler::rolloutHandler);\n\n    TelemetryService::create(\n        telemetry, GetTempDirectory() + \"/.sentry-native-etserver\", \"Server\");\n\n    serverFifo.createDirectoriesIfRequired();\n\n    std::shared_ptr<SocketHandler> tcpSocketHandler(new TcpSocketHandler());\n    std::shared_ptr<PipeSocketHandler> pipeSocketHandler(\n        new PipeSocketHandler());\n\n    LOG(INFO) << \"In child, about to start server.\";\n\n    SocketEndpoint serverEndpoint;\n    serverEndpoint.set_port(port);\n    if (bindIp.length()) {\n      serverEndpoint.set_name(bindIp);\n    }\n    SocketEndpoint routerFifo;\n    routerFifo.set_name(serverFifo.getPathForCreation());\n    TerminalServer terminalServer(tcpSocketHandler, serverEndpoint,\n                                  pipeSocketHandler, routerFifo);\n    terminalServer.run();\n\n  } catch (cxxopts::OptionException &oe) {\n    CLOG(INFO, \"stdout\") << \"Exception: \" << oe.what() << \"\\n\" << endl;\n    CLOG(INFO, \"stdout\") << options.help({}) << endl;\n    exit(1);\n  }\n\n  // Uninstall log rotation callback\n  el::Helpers::uninstallPreRollOutCallback();\n}",
  "abstract_func_before": "int main(int VAR_0, char **VAR_1) {\n  /* COMMENT_0 */\n  el::Configurations VAR_2 = LogHandler::setupLogHandler(&VAR_0, &VAR_1);\n  LogHandler::setupStdoutLogger();\n\n  et::HandleTerminate();\n\n  /* COMMENT_1 */\n  ::signal(VAR_3, et::InterruptSignalHandler);\n\n  cxxopts::Options VAR_4(\"etserver\",\n                           \"Remote shell for the busy and impatient\");\n  try {\n    /* COMMENT_2 */\n    VAR_4.allow_unrecognised_options();\n\n    VAR_4.add_options()             /* COMMENT_3 */\n        (\"h,help\", \"Print help\")      /* COMMENT_3 */\n        (\"version\", \"Print version\")  /* COMMENT_3 */\n        (\"port\", \"Port to listen on\",\n         cxxopts::VAR_5<int>()->default_value(\"0\"))  /* COMMENT_3 */\n        (\"bindip\", \"IP to listen on\",\n         cxxopts::VAR_5<string>()->default_value(\"\"))  /* COMMENT_3 */\n        (\"daemon\", \"Daemonize the server\")             /* COMMENT_3 */\n        (\"cfgfile\", \"Location of the config file\",\n         cxxopts::VAR_5<std::string>()->default_value(\"\"))  /* COMMENT_3 */\n        (\"logtostdout\", \"log to stdout\")                    /* COMMENT_3 */\n        (\"pidfile\", \"Location of the pid file\",\n         cxxopts::VAR_5<std::string>()->default_value(\n             \"/var/run/etserver.pid\"))  /* COMMENT_3 */\n        (\"v,verbose\", \"Enable verbose logging\",\n         cxxopts::VAR_5<int>()->default_value(\"0\"), \"LEVEL\")  /* COMMENT_3 */\n        (\"serverfifo\",\n         \"If set, listens on the matching fifo name\",       /* COMMENT_3 */\n         cxxopts::VAR_5<std::string>()->default_value(\"\"))  /* COMMENT_3 */\n        (\"telemetry\",\n         \"Allow et to anonymously send errors to guide future improvements\",\n         cxxopts::VAR_5<bool>())  /* COMMENT_3 */\n        ;\n\n    auto VAR_6 = VAR_4.parse(VAR_0, VAR_1);\n\n    if (VAR_6.count(\"help\")) {\n      CLOG(VAR_7, \"stdout\") << VAR_4.help({}) << VAR_8;\n      exit(0);\n    }\n    if (VAR_6.count(\"version\")) {\n      CLOG(VAR_7, \"stdout\") << \"et version \" << VAR_9 << VAR_8;\n      exit(0);\n    }\n\n    el::Loggers::setVerboseLevel(VAR_6[\"verbose\"].as<int>());\n\n    if (VAR_6.count(\"daemon\")) {\n      if (DaemonCreator::create(true, VAR_6[\"pidfile\"].as<string>()) == -1) {\n        VAR_10 << \"Error creating daemon: \" << strerror(GetErrno());\n      }\n    }\n\n    if (VAR_6.count(\"logtostdout\")) {\n      VAR_2.setGlobally(el::ConfigurationType::ToStandardOutput, \"true\");\n    } else {\n      VAR_2.setGlobally(el::ConfigurationType::ToStandardOutput, \"false\");\n      /* COMMENT_4 */\n      LogHandler::stderrToFile(GetTempDirectory() + \"etserver\");\n    }\n\n    ServerFifoPath VAR_11;\n\n    /* COMMENT_5 */\n    string VAR_12 = \"20971520\";\n\n    int VAR_13 = 0;\n    string VAR_14 = \"\";\n    bool VAR_15 = false;\n    if (VAR_6.count(\"cfgfile\")) {\n      /* COMMENT_6 */\n      CSimpleIniA VAR_16(true, false, false);\n      string VAR_17 = VAR_6[\"cfgfile\"].as<string>();\n      SI_Error VAR_18 = VAR_16.LoadFile(VAR_17.c_str());\n      if (VAR_18 == 0) {\n        if (!VAR_6.count(\"port\")) {\n          const char *VAR_19 = VAR_16.GetValue(\"Networking\", \"port\", NULL);\n          if (VAR_19) {\n            VAR_13 = stoi(VAR_19);\n          }\n        }\n\n        if (!VAR_6.count(\"bindip\")) {\n          const char *VAR_20 = VAR_16.GetValue(\"Networking\", \"bind_ip\", NULL);\n          if (VAR_20) {\n            VAR_14 = string(VAR_20);\n          }\n        }\n\n        VAR_15 = VAR_16.GetBoolValue(\"Debug\", \"telemetry\", false);\n        /* COMMENT_7 */\n        const char *VAR_21 = VAR_16.GetValue(\"Debug\", \"verbose\", NULL);\n        if (VAR_6.count(\"verbose\")) {\n          el::Loggers::setVerboseLevel(VAR_6[\"verbose\"].as<int>());\n        } else if (VAR_21) {\n          el::Loggers::setVerboseLevel(atoi(VAR_21));\n        }\n\n        const char *VAR_22 = VAR_16.GetValue(\"Debug\", \"serverfifo\", NULL);\n        if (VAR_22) {\n          const string fifoNameStr(fifoName);\n          if (!VAR_23.empty()) {\n            VAR_11.setPathOverride(VAR_23);\n          }\n        }\n\n        /* COMMENT_8 */\n        const char *VAR_24 = VAR_16.GetValue(\"Debug\", \"silent\", NULL);\n        if (VAR_24 && atoi(VAR_24) != 0) {\n          VAR_2.setGlobally(el::ConfigurationType::Enabled, \"false\");\n        }\n        /* COMMENT_9 */\n        const char *VAR_25 = VAR_16.GetValue(\"Debug\", \"logsize\", NULL);\n        if (VAR_25 && atoi(VAR_25) != 0) {\n          /* COMMENT_10 */\n          VAR_12 = string(VAR_25);\n        }\n\n      } else {\n        VAR_10 << \"Invalid config file: \" << VAR_17;\n      }\n    }\n\n    if (VAR_6.count(\"serverfifo\") &&\n        !VAR_6[\"serverfifo\"].as<string>().empty()) {\n      VAR_11.setPathOverride(VAR_6[\"serverfifo\"].as<string>());\n    }\n\n    if (VAR_6.count(\"port\")) {\n      VAR_13 = VAR_6[\"port\"].as<int>();\n    }\n\n    if (VAR_6.count(\"bindip\")) {\n      VAR_14 = VAR_6[\"bindip\"].as<string>();\n    }\n\n    if (VAR_6.count(\"telemetry\")) {\n      VAR_15 = VAR_6[\"telemetry\"].as<bool>();\n    }\n\n    VAR_26;\n    srand(1);\n\n    if (VAR_13 == 0) {\n      VAR_13 = 2022;\n    }\n\n    /* COMMENT_11 */\n    LogHandler::setupLogFile(&VAR_2,\n                             GetTempDirectory() + \"etserver-%datetime.log\",\n                             VAR_12);\n    /* COMMENT_12 */\n    el::Loggers::reconfigureLogger(\"default\", VAR_2);\n    /* COMMENT_13 */\n    el::Helpers::setThreadName(\"etserver-main\");\n    /* COMMENT_14 */\n    el::Helpers::installPreRollOutCallback(LogHandler::rolloutHandler);\n\n    TelemetryService::create(\n        VAR_15, GetTempDirectory() + \"/.sentry-native-etserver\", \"Server\");\n\n    VAR_11.createDirectoriesIfRequired();\n\n    std::shared_ptr<SocketHandler> VAR_27(new TcpSocketHandler());\n    std::shared_ptr<PipeSocketHandler> VAR_28(\n        new PipeSocketHandler());\n\n    LOG(VAR_7) << \"In child, about to start server.\";\n\n    SocketEndpoint VAR_29;\n    VAR_29.set_port(VAR_13);\n    if (VAR_14.length()) {\n      VAR_29.set_name(VAR_14);\n    }\n    SocketEndpoint VAR_30;\n    VAR_30.set_name(VAR_11.getPathForCreation());\n    TerminalServer terminalServer(tcpSocketHandler, serverEndpoint,\n                                  pipeSocketHandler, routerFifo);\n    VAR_31.run();\n\n  } catch (cxxopts::OptionException &VAR_32) {\n    CLOG(VAR_7, \"stdout\") << \"Exception: \" << VAR_32.what() << \"\\n\" << VAR_8;\n    CLOG(VAR_7, \"stdout\") << VAR_4.help({}) << VAR_8;\n    exit(1);\n  }\n\n  /* COMMENT_15 */\n  el::Helpers::uninstallPreRollOutCallback();\n}",
  "func_graph_path_before": "MisterTea/EternalTerminal/4a8b02d5f1afb38b00c77ab1321d5f56720f4e30/TerminalServerMain.cpp/vul/before/0.json",
  "func": "int main(int argc, char **argv) {\n  // Setup easylogging configurations\n  el::Configurations defaultConf = LogHandler::setupLogHandler(&argc, &argv);\n  LogHandler::setupStdoutLogger();\n\n  et::HandleTerminate();\n\n  // Override easylogging handler for sigint\n  ::signal(SIGINT, et::InterruptSignalHandler);\n\n  cxxopts::Options options(\"etserver\",\n                           \"Remote shell for the busy and impatient\");\n  try {\n    // Parse command line arguments\n    options.allow_unrecognised_options();\n\n    options.add_options()             //\n        (\"h,help\", \"Print help\")      //\n        (\"version\", \"Print version\")  //\n        (\"port\", \"Port to listen on\",\n         cxxopts::value<int>()->default_value(\"0\"))  //\n        (\"bindip\", \"IP to listen on\",\n         cxxopts::value<string>()->default_value(\"\"))  //\n        (\"daemon\", \"Daemonize the server\")             //\n        (\"cfgfile\", \"Location of the config file\",\n         cxxopts::value<std::string>()->default_value(\"\"))  //\n        (\"logtostdout\", \"log to stdout\")                    //\n        (\"pidfile\", \"Location of the pid file\",\n         cxxopts::value<std::string>()->default_value(\n             \"/var/run/etserver.pid\"))  //\n        (\"v,verbose\", \"Enable verbose logging\",\n         cxxopts::value<int>()->default_value(\"0\"), \"LEVEL\")  //\n        (\"serverfifo\",\n         \"If set, listens on the matching fifo name\",       //\n         cxxopts::value<std::string>()->default_value(\"\"))  //\n        (\"telemetry\",\n         \"Allow et to anonymously send errors to guide future improvements\",\n         cxxopts::value<bool>())  //\n        ;\n\n    auto result = options.parse(argc, argv);\n\n    if (result.count(\"help\")) {\n      CLOG(INFO, \"stdout\") << options.help({}) << endl;\n      exit(0);\n    }\n    if (result.count(\"version\")) {\n      CLOG(INFO, \"stdout\") << \"et version \" << ET_VERSION << endl;\n      exit(0);\n    }\n\n    el::Loggers::setVerboseLevel(result[\"verbose\"].as<int>());\n\n    if (result.count(\"daemon\")) {\n      if (DaemonCreator::create(true, result[\"pidfile\"].as<string>()) == -1) {\n        STFATAL << \"Error creating daemon: \" << strerror(GetErrno());\n      }\n    }\n\n    ServerFifoPath serverFifo;\n\n    // default max log file size is 20MB for etserver\n    string maxlogsize = \"20971520\";\n\n    int port = 0;\n    string bindIp = \"\";\n    bool telemetry = false;\n    if (result.count(\"cfgfile\")) {\n      // Load the config file\n      CSimpleIniA ini(true, false, false);\n      string cfgfilename = result[\"cfgfile\"].as<string>();\n      SI_Error rc = ini.LoadFile(cfgfilename.c_str());\n      if (rc == 0) {\n        if (!result.count(\"port\")) {\n          const char *portString = ini.GetValue(\"Networking\", \"port\", NULL);\n          if (portString) {\n            port = stoi(portString);\n          }\n        }\n\n        if (!result.count(\"bindip\")) {\n          const char *bindIpPtr = ini.GetValue(\"Networking\", \"bind_ip\", NULL);\n          if (bindIpPtr) {\n            bindIp = string(bindIpPtr);\n          }\n        }\n\n        telemetry = ini.GetBoolValue(\"Debug\", \"telemetry\", false);\n        // read verbose level (prioritize command line option over cfgfile)\n        const char *vlevel = ini.GetValue(\"Debug\", \"verbose\", NULL);\n        if (result.count(\"verbose\")) {\n          el::Loggers::setVerboseLevel(result[\"verbose\"].as<int>());\n        } else if (vlevel) {\n          el::Loggers::setVerboseLevel(atoi(vlevel));\n        }\n\n        const char *fifoName = ini.GetValue(\"Debug\", \"serverfifo\", NULL);\n        if (fifoName) {\n          const string fifoNameStr(fifoName);\n          if (!fifoNameStr.empty()) {\n            serverFifo.setPathOverride(fifoNameStr);\n          }\n        }\n\n        // read silent setting\n        const char *silent = ini.GetValue(\"Debug\", \"silent\", NULL);\n        if (silent && atoi(silent) != 0) {\n          defaultConf.setGlobally(el::ConfigurationType::Enabled, \"false\");\n        }\n        // read log file size limit\n        const char *logsize = ini.GetValue(\"Debug\", \"logsize\", NULL);\n        if (logsize && atoi(logsize) != 0) {\n          // make sure maxlogsize is a string of int value\n          maxlogsize = string(logsize);\n        }\n\n      } else {\n        STFATAL << \"Invalid config file: \" << cfgfilename;\n      }\n    }\n\n    if (result.count(\"serverfifo\") &&\n        !result[\"serverfifo\"].as<string>().empty()) {\n      serverFifo.setPathOverride(result[\"serverfifo\"].as<string>());\n    }\n\n    if (result.count(\"port\")) {\n      port = result[\"port\"].as<int>();\n    }\n\n    if (result.count(\"bindip\")) {\n      bindIp = result[\"bindip\"].as<string>();\n    }\n\n    if (result.count(\"telemetry\")) {\n      telemetry = result[\"telemetry\"].as<bool>();\n    }\n\n    GOOGLE_PROTOBUF_VERIFY_VERSION;\n    srand(1);\n\n    if (port == 0) {\n      port = 2022;\n    }\n\n    // Set log file for etserver process here.\n    LogHandler::setupLogFiles(&defaultConf, GetTempDirectory(), \"etserver\",\n                              result.count(\"logtostdout\"),\n                              !result.count(\"logtostdout\"),\n                              true /* appendPid */, maxlogsize);\n    // Reconfigure default logger to apply settings above\n    el::Loggers::reconfigureLogger(\"default\", defaultConf);\n    // set thread name\n    el::Helpers::setThreadName(\"etserver-main\");\n    // Install log rotation callback\n    el::Helpers::installPreRollOutCallback(LogHandler::rolloutHandler);\n\n    TelemetryService::create(\n        telemetry, GetTempDirectory() + \"/.sentry-native-etserver\", \"Server\");\n\n    serverFifo.createDirectoriesIfRequired();\n\n    std::shared_ptr<SocketHandler> tcpSocketHandler(new TcpSocketHandler());\n    std::shared_ptr<PipeSocketHandler> pipeSocketHandler(\n        new PipeSocketHandler());\n\n    LOG(INFO) << \"In child, about to start server.\";\n\n    SocketEndpoint serverEndpoint;\n    serverEndpoint.set_port(port);\n    if (bindIp.length()) {\n      serverEndpoint.set_name(bindIp);\n    }\n    SocketEndpoint routerFifo;\n    routerFifo.set_name(serverFifo.getPathForCreation());\n    TerminalServer terminalServer(tcpSocketHandler, serverEndpoint,\n                                  pipeSocketHandler, routerFifo);\n    terminalServer.run();\n\n  } catch (cxxopts::OptionException &oe) {\n    CLOG(INFO, \"stdout\") << \"Exception: \" << oe.what() << \"\\n\" << endl;\n    CLOG(INFO, \"stdout\") << options.help({}) << endl;\n    exit(1);\n  }\n\n  // Uninstall log rotation callback\n  el::Helpers::uninstallPreRollOutCallback();\n}",
  "abstract_func": "int main(int VAR_0, char **VAR_1) {\n  /* COMMENT_0 */\n  el::Configurations VAR_2 = LogHandler::setupLogHandler(&VAR_0, &VAR_1);\n  LogHandler::setupStdoutLogger();\n\n  et::HandleTerminate();\n\n  /* COMMENT_1 */\n  ::signal(VAR_3, et::InterruptSignalHandler);\n\n  cxxopts::Options VAR_4(\"etserver\",\n                           \"Remote shell for the busy and impatient\");\n  try {\n    /* COMMENT_2 */\n    VAR_4.allow_unrecognised_options();\n\n    VAR_4.add_options()             /* COMMENT_3 */\n        (\"h,help\", \"Print help\")      /* COMMENT_3 */\n        (\"version\", \"Print version\")  /* COMMENT_3 */\n        (\"port\", \"Port to listen on\",\n         cxxopts::VAR_5<int>()->default_value(\"0\"))  /* COMMENT_3 */\n        (\"bindip\", \"IP to listen on\",\n         cxxopts::VAR_5<string>()->default_value(\"\"))  /* COMMENT_3 */\n        (\"daemon\", \"Daemonize the server\")             /* COMMENT_3 */\n        (\"cfgfile\", \"Location of the config file\",\n         cxxopts::VAR_5<std::string>()->default_value(\"\"))  /* COMMENT_3 */\n        (\"logtostdout\", \"log to stdout\")                    /* COMMENT_3 */\n        (\"pidfile\", \"Location of the pid file\",\n         cxxopts::VAR_5<std::string>()->default_value(\n             \"/var/run/etserver.pid\"))  /* COMMENT_3 */\n        (\"v,verbose\", \"Enable verbose logging\",\n         cxxopts::VAR_5<int>()->default_value(\"0\"), \"LEVEL\")  /* COMMENT_3 */\n        (\"serverfifo\",\n         \"If set, listens on the matching fifo name\",       /* COMMENT_3 */\n         cxxopts::VAR_5<std::string>()->default_value(\"\"))  /* COMMENT_3 */\n        (\"telemetry\",\n         \"Allow et to anonymously send errors to guide future improvements\",\n         cxxopts::VAR_5<bool>())  /* COMMENT_3 */\n        ;\n\n    auto VAR_6 = VAR_4.parse(VAR_0, VAR_1);\n\n    if (VAR_6.count(\"help\")) {\n      CLOG(VAR_7, \"stdout\") << VAR_4.help({}) << VAR_8;\n      exit(0);\n    }\n    if (VAR_6.count(\"version\")) {\n      CLOG(VAR_7, \"stdout\") << \"et version \" << VAR_9 << VAR_8;\n      exit(0);\n    }\n\n    el::Loggers::setVerboseLevel(VAR_6[\"verbose\"].as<int>());\n\n    if (VAR_6.count(\"daemon\")) {\n      if (DaemonCreator::create(true, VAR_6[\"pidfile\"].as<string>()) == -1) {\n        VAR_10 << \"Error creating daemon: \" << strerror(GetErrno());\n      }\n    }\n\n    ServerFifoPath VAR_11;\n\n    /* COMMENT_4 */\n    string VAR_12 = \"20971520\";\n\n    int VAR_13 = 0;\n    string VAR_14 = \"\";\n    bool VAR_15 = false;\n    if (VAR_6.count(\"cfgfile\")) {\n      /* COMMENT_5 */\n      CSimpleIniA VAR_16(true, false, false);\n      string VAR_17 = VAR_6[\"cfgfile\"].as<string>();\n      SI_Error VAR_18 = VAR_16.LoadFile(VAR_17.c_str());\n      if (VAR_18 == 0) {\n        if (!VAR_6.count(\"port\")) {\n          const char *VAR_19 = VAR_16.GetValue(\"Networking\", \"port\", NULL);\n          if (VAR_19) {\n            VAR_13 = stoi(VAR_19);\n          }\n        }\n\n        if (!VAR_6.count(\"bindip\")) {\n          const char *VAR_20 = VAR_16.GetValue(\"Networking\", \"bind_ip\", NULL);\n          if (VAR_20) {\n            VAR_14 = string(VAR_20);\n          }\n        }\n\n        VAR_15 = VAR_16.GetBoolValue(\"Debug\", \"telemetry\", false);\n        /* COMMENT_6 */\n        const char *VAR_21 = VAR_16.GetValue(\"Debug\", \"verbose\", NULL);\n        if (VAR_6.count(\"verbose\")) {\n          el::Loggers::setVerboseLevel(VAR_6[\"verbose\"].as<int>());\n        } else if (VAR_21) {\n          el::Loggers::setVerboseLevel(atoi(VAR_21));\n        }\n\n        const char *VAR_22 = VAR_16.GetValue(\"Debug\", \"serverfifo\", NULL);\n        if (VAR_22) {\n          const string fifoNameStr(fifoName);\n          if (!VAR_23.empty()) {\n            VAR_11.setPathOverride(VAR_23);\n          }\n        }\n\n        /* COMMENT_7 */\n        const char *VAR_24 = VAR_16.GetValue(\"Debug\", \"silent\", NULL);\n        if (VAR_24 && atoi(VAR_24) != 0) {\n          VAR_2.setGlobally(el::ConfigurationType::Enabled, \"false\");\n        }\n        /* COMMENT_8 */\n        const char *VAR_25 = VAR_16.GetValue(\"Debug\", \"logsize\", NULL);\n        if (VAR_25 && atoi(VAR_25) != 0) {\n          /* COMMENT_9 */\n          VAR_12 = string(VAR_25);\n        }\n\n      } else {\n        VAR_10 << \"Invalid config file: \" << VAR_17;\n      }\n    }\n\n    if (VAR_6.count(\"serverfifo\") &&\n        !VAR_6[\"serverfifo\"].as<string>().empty()) {\n      VAR_11.setPathOverride(VAR_6[\"serverfifo\"].as<string>());\n    }\n\n    if (VAR_6.count(\"port\")) {\n      VAR_13 = VAR_6[\"port\"].as<int>();\n    }\n\n    if (VAR_6.count(\"bindip\")) {\n      VAR_14 = VAR_6[\"bindip\"].as<string>();\n    }\n\n    if (VAR_6.count(\"telemetry\")) {\n      VAR_15 = VAR_6[\"telemetry\"].as<bool>();\n    }\n\n    VAR_26;\n    srand(1);\n\n    if (VAR_13 == 0) {\n      VAR_13 = 2022;\n    }\n\n    /* COMMENT_10 */\n    LogHandler::setupLogFiles(&VAR_2, GetTempDirectory(), \"etserver\",\n                              VAR_6.count(\"logtostdout\"),\n                              !VAR_6.count(\"logtostdout\"),\n                              true /* COMMENT_11 */, VAR_12);\n    /* COMMENT_12 */\n    el::Loggers::reconfigureLogger(\"default\", VAR_2);\n    /* COMMENT_13 */\n    el::Helpers::setThreadName(\"etserver-main\");\n    /* COMMENT_14 */\n    el::Helpers::installPreRollOutCallback(LogHandler::rolloutHandler);\n\n    TelemetryService::create(\n        VAR_15, GetTempDirectory() + \"/.sentry-native-etserver\", \"Server\");\n\n    VAR_11.createDirectoriesIfRequired();\n\n    std::shared_ptr<SocketHandler> VAR_27(new TcpSocketHandler());\n    std::shared_ptr<PipeSocketHandler> VAR_28(\n        new PipeSocketHandler());\n\n    LOG(VAR_7) << \"In child, about to start server.\";\n\n    SocketEndpoint VAR_29;\n    VAR_29.set_port(VAR_13);\n    if (VAR_14.length()) {\n      VAR_29.set_name(VAR_14);\n    }\n    SocketEndpoint VAR_30;\n    VAR_30.set_name(VAR_11.getPathForCreation());\n    TerminalServer terminalServer(tcpSocketHandler, serverEndpoint,\n                                  pipeSocketHandler, routerFifo);\n    VAR_31.run();\n\n  } catch (cxxopts::OptionException &VAR_32) {\n    CLOG(VAR_7, \"stdout\") << \"Exception: \" << VAR_32.what() << \"\\n\" << VAR_8;\n    CLOG(VAR_7, \"stdout\") << VAR_4.help({}) << VAR_8;\n    exit(1);\n  }\n\n  /* COMMENT_15 */\n  el::Helpers::uninstallPreRollOutCallback();\n}",
  "func_graph_path": "MisterTea/EternalTerminal/4a8b02d5f1afb38b00c77ab1321d5f56720f4e30/TerminalServerMain.cpp/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -55,14 +55,6 @@\n       if (DaemonCreator::create(true, result[\"pidfile\"].as<string>()) == -1) {\n         STFATAL << \"Error creating daemon: \" << strerror(GetErrno());\n       }\n-    }\n-\n-    if (result.count(\"logtostdout\")) {\n-      defaultConf.setGlobally(el::ConfigurationType::ToStandardOutput, \"true\");\n-    } else {\n-      defaultConf.setGlobally(el::ConfigurationType::ToStandardOutput, \"false\");\n-      // Redirect std streams to a file\n-      LogHandler::stderrToFile(GetTempDirectory() + \"etserver\");\n     }\n \n     ServerFifoPath serverFifo;\n@@ -152,9 +144,10 @@\n     }\n \n     // Set log file for etserver process here.\n-    LogHandler::setupLogFile(&defaultConf,\n-                             GetTempDirectory() + \"etserver-%datetime.log\",\n-                             maxlogsize);\n+    LogHandler::setupLogFiles(&defaultConf, GetTempDirectory(), \"etserver\",\n+                              result.count(\"logtostdout\"),\n+                              !result.count(\"logtostdout\"),\n+                              true /* appendPid */, maxlogsize);\n     // Reconfigure default logger to apply settings above\n     el::Loggers::reconfigureLogger(\"default\", defaultConf);\n     // set thread name",
  "diff_line_info": {
    "deleted_lines": [
      "    }",
      "",
      "    if (result.count(\"logtostdout\")) {",
      "      defaultConf.setGlobally(el::ConfigurationType::ToStandardOutput, \"true\");",
      "    } else {",
      "      defaultConf.setGlobally(el::ConfigurationType::ToStandardOutput, \"false\");",
      "      // Redirect std streams to a file",
      "      LogHandler::stderrToFile(GetTempDirectory() + \"etserver\");",
      "    LogHandler::setupLogFile(&defaultConf,",
      "                             GetTempDirectory() + \"etserver-%datetime.log\",",
      "                             maxlogsize);"
    ],
    "added_lines": [
      "    LogHandler::setupLogFiles(&defaultConf, GetTempDirectory(), \"etserver\",",
      "                              result.count(\"logtostdout\"),",
      "                              !result.count(\"logtostdout\"),",
      "                              true /* appendPid */, maxlogsize);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/MisterTea/EternalTerminal/pull/556",
  "description": {
    "pr_info": {
      "title": "Logfile open mode and permission plus location configurability.",
      "number": 556
    },
    "comment": [
      "This addresses #555\r\n\r\nTesting:\r\n```\r\n❯ ./et --help                                                                                                                                                                                                       11:50:47  12.20.22\r\nRemote shell for the busy and impatient\r\nUsage:\r\n  et [OPTION...] [user@]host[:port]\r\n\r\n  Note that 'host' can be a hostname or ipv4 address with or without a port\r\n  or an ipv6 address. If the ipv6 address is abbreviated with :: then it must\r\n  be specfied without a port (use -p,--port).\r\n\r\n  -h, --help                 Print help\r\n      --version              Print version\r\n  -u, --username             Username\r\n      --host arg             Remote host name\r\n  -p, --port arg             Remote machine etserver port (default: 2022)\r\n  -c, --command arg          Run command on connect\r\n      --terminal-path arg    Path to etterminal on server side. Use if\r\n                             etterminal is not on the system path.\r\n  -t, --tunnel arg           Tunnel: Array of source:destination ports or\r\n                             srcStart-srcEnd:dstStart-dstEnd (inclusive) port\r\n                             ranges (e.g. 10080:80,10443:443,\r\n                             10090-10092:8000-8002)\r\n  -r, --reversetunnel arg    Reverse Tunnel: Array of source:destination\r\n                             ports or srcStart-srcEnd:dstStart-dstEnd (inclusive)\r\n                             port ranges\r\n      --jumphost arg         jumphost between localhost and destination\r\n      --jport arg            Jumphost machine port (default: 2022)\r\n  -x, --kill-other-sessions  kill all old sessions belonging to the user\r\n      --macserver            Set when connecting to an macOS server.  Sets\r\n                             --terminal-path=/usr/local/bin/etterminal\r\n  -v, --verbose arg          Enable verbose logging (default: 0)\r\n  -k, --keepalive arg        Client keepalive duration in seconds\r\n  -l, --logdir arg           Base directory for log files. (default: /tmp/)\r\n...\r\n```\r\n\r\n```\r\n ✔  ⚙  jwshort  ~/git/EternalTerminal/build   logfile_location_perms \r\n ❯ ls -la /tmp/etclient*                                                                                                                                                                                             11:48:40  12.20.22\r\nzsh: no matches found: /tmp/etclient*\r\n ↵ 1  ⚙  jwshort  ~/git/EternalTerminal/build   logfile_location_perms \r\n ❯ ./et dev:8080                                                                                                                                                                                                     11:48:51  12.20.22\r\nCould not reach the ET server: dev:8080\r\n\r\n ↵ 1  ⚙  jwshort  ~/git/EternalTerminal/build   logfile_location_perms \r\n ❯ ls -la /tmp/etclient*                                                                                                                                                                                             11:49:13  12.20.22\r\n-rw------- 1 jwshort users 4416 Dec 20 11:49 /tmp/etclient-2022-12-20_11-49-09.log\r\n-rw------- 1 jwshort users   52 Dec 20 11:49 /tmp/etclient-stderr-2022-12-20_11-49-09.log\r\n```\r\n\r\n```\r\n ✔  ⚙  jwshort  ~/git/EternalTerminal/build   logfile_location_perms \r\n ❯ ls -la ~/etclient-*                                                                                                                                                                                               11:49:16  12.20.22\r\nzsh: no matches found: /home/jwshort/etclient-*\r\n ↵ 1  ⚙  jwshort  ~/git/EternalTerminal/build   logfile_location_perms \r\n ❯ ./et dev:8080 --logdir ~/                                                                                                                                                                                         11:50:21  12.20.22\r\nCould not reach the ET server: dev:8080\r\n\r\n ↵ 1  ⚙  jwshort  ~/git/EternalTerminal/build   logfile_location_perms \r\n ❯ ls -la ~/etclient-*                                                                                                                                                                                               11:50:44  12.20.22\r\n-rw------- 1 jwshort users 4416 Dec 20 11:50 /home/jwshort/etclient-2022-12-20_11-50-41.log\r\n-rw------- 1 jwshort users   52 Dec 20 11:50 /home/jwshort/etclient-stderr-2022-12-20_11-50-41.log\r\n```\r\n\r\n```\r\n ✔  ⚙  jwshort@  ~/git/EternalTerminal/build   logfile_location_perms \r\n ❯ ls -la /tmp/etserver-*                                                                                                                                                                                            11:53:45  12.20.22\r\nzsh: no matches found: /tmp/etserver-*\r\n ↵ 1  ⚙  jwshort  ~/git/EternalTerminal/build   logfile_location_perms \r\n ❯ cat et.cfg                                                                                                                                                                                                        11:53:46  12.20.22\r\n; et.cfg : Config file for Eternal Terminal\r\n;\r\n\r\n[Networking]\r\nport = 2022\r\n# bind_ip = 0.0.0.0\r\n\r\n[Debug]\r\nverbose = 0\r\nsilent = 0\r\nlogsize = 20971520\r\ntelemetry = 1\r\n ✔  ⚙  jwshort ~/git/EternalTerminal/build   logfile_location_perms \r\n ❯ ./etserver --cfgfile=et.cfg                                                                                                                                                                                       11:53:54  12.20.22\r\n^C\r\nGot interrupt (perhaps ctrl+c?): 2.  Exiting.\r\n\r\n ↵ 2  ⚙  jwshort  ~/git/EternalTerminal/build   logfile_location_perms \r\n ❯ ls -la /tmp/etserver-*                                                                                                                                                                                            11:54:25  12.20.22\r\n-rw------- 1 jwshort users 393 Dec 20 11:54 /tmp/etserver-2022-12-20_11-54-20.log\r\n-rw------- 1 jwshort users  73 Dec 20 11:54 /tmp/etserver-stderr-2022-12-20_11-54-20.log\r\n ✔  ⚙  jwshort  ~/git/EternalTerminal/build   logfile_location_perms \r\n ❯ vim et.cfg                                                                                                                                                                                                        11:54:27  12.20.22\r\n ✔  ⚙  jwshort  ~/git/EternalTerminal/build   logfile_location_perms \r\n ❯ cat et.cfg                                                                                                                                                                                                        11:54:42  12.20.22\r\n; et.cfg : Config file for Eternal Terminal\r\n;\r\n\r\n[Networking]\r\nport = 2022\r\n# bind_ip = 0.0.0.0\r\n\r\n[Debug]\r\nverbose = 0\r\nsilent = 0\r\nlogsize = 20971520\r\nlogdirectory = /home/jwshort\r\ntelemetry = 1\r\n ✔  ⚙  jwshort  ~/git/EternalTerminal/build   logfile_location_perms \r\n ❯ ./etserver --cfgfile=et.cfg                                                                                                                                                                                       11:54:44  12.20.22\r\n^C\r\nGot interrupt (perhaps ctrl+c?): 2.  Exiting.\r\n\r\n ↵ 2  ⚙  jwshort  ~/git/EternalTerminal/build   logfile_location_perms \r\n ❯ ls -la ~/etserver-*                                                                                                                                                                                               11:54:55  12.20.22\r\n-rw------- 1 jwshort users 393 Dec 20 11:54 /home/jwshort/etserver-2022-12-20_11-54-48.log\r\n-rw------- 1 jwshort users  73 Dec 20 11:54 /home/jwshort/etserver-stderr-2022-12-20_11-54-48.log\r\n```\r\n\r\n",
      "# [Codecov](https://codecov.io/gh/MisterTea/EternalTerminal/pull/556?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=Jason+Gauci) Report\nBase: **73.02**% // Head: **72.97**% // Decreases project coverage by **`-0.05%`** :warning:\n> Coverage data is based on head [(`04e64d4`)](https://codecov.io/gh/MisterTea/EternalTerminal/pull/556?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=Jason+Gauci) compared to base [(`7289e04`)](https://codecov.io/gh/MisterTea/EternalTerminal/commit/7289e04475a8418d376cbc7ecbcc580e23c42bb7?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=Jason+Gauci).\n> Patch coverage: 76.31% of modified lines in pull request are covered.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n```diff\n@@            Coverage Diff             @@\n##           master     #556      +/-   ##\n==========================================\n- Coverage   73.02%   72.97%   -0.06%     \n==========================================\n  Files          50       50              \n  Lines        3029     3049      +20     \n==========================================\n+ Hits         2212     2225      +13     \n- Misses        817      824       +7     \n```\n\n\n| [Impacted Files](https://codecov.io/gh/MisterTea/EternalTerminal/pull/556?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=Jason+Gauci) | Coverage Δ | |\n|---|---|---|\n| [src/base/LogHandler.cpp](https://codecov.io/gh/MisterTea/EternalTerminal/pull/556?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=Jason+Gauci#diff-c3JjL2Jhc2UvTG9nSGFuZGxlci5jcHA=) | `81.35% <74.28%> (+18.19%)` | :arrow_up: |\n| [test/Main.cpp](https://codecov.io/gh/MisterTea/EternalTerminal/pull/556?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=Jason+Gauci#diff-dGVzdC9NYWluLmNwcA==) | `100.00% <100.00%> (ø)` | |\n| [src/base/ServerConnection.cpp](https://codecov.io/gh/MisterTea/EternalTerminal/pull/556?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=Jason+Gauci#diff-c3JjL2Jhc2UvU2VydmVyQ29ubmVjdGlvbi5jcHA=) | `70.75% <0.00%> (-6.61%)` | :arrow_down: |\n| [src/terminal/UserTerminalHandler.cpp](https://codecov.io/gh/MisterTea/EternalTerminal/pull/556?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=Jason+Gauci#diff-c3JjL3Rlcm1pbmFsL1VzZXJUZXJtaW5hbEhhbmRsZXIuY3Bw) | `70.00% <0.00%> (-1.27%)` | :arrow_down: |\n| [src/base/Connection.cpp](https://codecov.io/gh/MisterTea/EternalTerminal/pull/556?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=Jason+Gauci#diff-c3JjL2Jhc2UvQ29ubmVjdGlvbi5jcHA=) | `87.82% <0.00%> (-0.87%)` | :arrow_down: |\n\nHelp us with your feedback. Take ten seconds to tell us [how you rate us](https://about.codecov.io/nps?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=Jason+Gauci). Have a feature suggestion? [Share it here.](https://app.codecov.io/gh/feedback/?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=Jason+Gauci)\n\n</details>\n\n[:umbrella: View full report at Codecov](https://codecov.io/gh/MisterTea/EternalTerminal/pull/556?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=Jason+Gauci).   \n:loudspeaker: Do you have feedback about the report comment? [Let us know in this issue](https://about.codecov.io/codecov-pr-comment-feedback/?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=Jason+Gauci).\n",
      "Hi, I saw there were two CVEs assigned to this: CVE-2022-48257 and CVE-2022-48258.\r\n\r\nIs there a reason why this is not merged yet? Thanks!"
    ]
  },
  "Bug Filter": "** Security Vulnerability Fix  \n**Confidence Score:** 0.95",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "\n\nThe patch modifies how log files are created and managed, enhancing security by using more secure options and permissions. The changes address a known issue (#555) and are linked to CVEs, indicating security vulnerabilities were fixed.\n\n**Final Classification:** Security Vulnerability Fix  \n**Confidence Score:** 0.95"
}