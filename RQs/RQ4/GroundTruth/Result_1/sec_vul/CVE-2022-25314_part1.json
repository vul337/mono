{
  "cve_id": "CVE-2022-25314",
  "cwe_ids": [
    "CWE-190"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "libexpat",
  "commit_msg": "Prevent integer overflow in copyString\n\nThe copyString function is only used for encoding string supplied by\nthe library user.",
  "commit_hash": "efcb347440ade24b9f1054671e6bd05e60b4cafd",
  "git_url": "https://github.com/libexpat/libexpat/commit/efcb347440ade24b9f1054671e6bd05e60b4cafd",
  "file_path": "expat/lib/xmlparse.c",
  "func_name": "copyString",
  "func_before": "static XML_Char *\ncopyString(const XML_Char *s, const XML_Memory_Handling_Suite *memsuite) {\n  int charsRequired = 0;\n  XML_Char *result;\n\n  /* First determine how long the string is */\n  while (s[charsRequired] != 0) {\n    charsRequired++;\n  }\n  /* Include the terminator */\n  charsRequired++;\n\n  /* Now allocate space for the copy */\n  result = memsuite->malloc_fcn(charsRequired * sizeof(XML_Char));\n  if (result == NULL)\n    return NULL;\n  /* Copy the original into place */\n  memcpy(result, s, charsRequired * sizeof(XML_Char));\n  return result;\n}",
  "abstract_func_before": "static XML_Char *\ncopyString(const XML_Char *VAR_0, const XML_Memory_Handling_Suite *VAR_1) {\n  int VAR_2 = 0;\n  XML_Char *VAR_3;\n\n  /* COMMENT_0 */\n  while (VAR_0[VAR_2] != 0) {\n    VAR_2++;\n  }\n  /* COMMENT_1 */\n  VAR_2++;\n\n  /* COMMENT_2 */\n  VAR_3 = VAR_1->malloc_fcn(VAR_2 * sizeof(XML_Char));\n  if (VAR_3 == NULL)\n    return NULL;\n  /* COMMENT_3 */\n  memcpy(VAR_3, VAR_0, VAR_2 * sizeof(XML_Char));\n  return VAR_3;\n}",
  "func_graph_path_before": "libexpat/efcb347440ade24b9f1054671e6bd05e60b4cafd/xmlparse.c/vul/before/0.json",
  "func": "static XML_Char *\ncopyString(const XML_Char *s, const XML_Memory_Handling_Suite *memsuite) {\n  size_t charsRequired = 0;\n  XML_Char *result;\n\n  /* First determine how long the string is */\n  while (s[charsRequired] != 0) {\n    charsRequired++;\n  }\n  /* Include the terminator */\n  charsRequired++;\n\n  /* Now allocate space for the copy */\n  result = memsuite->malloc_fcn(charsRequired * sizeof(XML_Char));\n  if (result == NULL)\n    return NULL;\n  /* Copy the original into place */\n  memcpy(result, s, charsRequired * sizeof(XML_Char));\n  return result;\n}",
  "abstract_func": "static XML_Char *\ncopyString(const XML_Char *VAR_0, const XML_Memory_Handling_Suite *VAR_1) {\n  size_t VAR_2 = 0;\n  XML_Char *VAR_3;\n\n  /* COMMENT_0 */\n  while (VAR_0[VAR_2] != 0) {\n    VAR_2++;\n  }\n  /* COMMENT_1 */\n  VAR_2++;\n\n  /* COMMENT_2 */\n  VAR_3 = VAR_1->malloc_fcn(VAR_2 * sizeof(XML_Char));\n  if (VAR_3 == NULL)\n    return NULL;\n  /* COMMENT_3 */\n  memcpy(VAR_3, VAR_0, VAR_2 * sizeof(XML_Char));\n  return VAR_3;\n}",
  "func_graph_path": "libexpat/efcb347440ade24b9f1054671e6bd05e60b4cafd/xmlparse.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,6 +1,6 @@\n static XML_Char *\n copyString(const XML_Char *s, const XML_Memory_Handling_Suite *memsuite) {\n-  int charsRequired = 0;\n+  size_t charsRequired = 0;\n   XML_Char *result;\n \n   /* First determine how long the string is */",
  "diff_line_info": {
    "deleted_lines": [
      "  int charsRequired = 0;"
    ],
    "added_lines": [
      "  size_t charsRequired = 0;"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/libexpat/libexpat/pull/560",
  "description": {
    "pr_info": {
      "title": "[CVE-2022-25314] lib: Prevent integer overflow in copyString",
      "number": 560
    },
    "comment": [
      "The copyString function is only used for encoding string supplied by\r\nthe library user.",
      "This appears to be [CVE-2022-25314](https://www.cve.org/CVERecord?id=CVE-2022-25314)"
    ]
  },
  "Bug Filter": "** Security Vulnerability Fix  \n**Confidence Score:** 1.0",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "\n\nThe patch addresses an integer overflow in the `copyString` function, which is a known security issue (CVE-2022-25314). The fix changes the variable type to prevent overflow, mitigating a potential buffer overflow exploit. \n\n**Final Classification:** Security Vulnerability Fix  \n**Confidence Score:** 1.0"
}