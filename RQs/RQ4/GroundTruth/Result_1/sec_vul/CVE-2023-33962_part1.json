{
  "cve_id": "CVE-2023-33962",
  "cwe_ids": [
    "CWE-79"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
  "cvss_is_v3": true,
  "repo_name": "jstachio",
  "commit_msg": "Fix #157 add more aggressive html5 escaping",
  "commit_hash": "7b2f78377d1284df14c580be762a25af5f8dcd66",
  "git_url": "https://github.com/jstachio/jstachio/commit/7b2f78377d1284df14c580be762a25af5f8dcd66",
  "file_path": "api/jstachio/src/main/java/io/jstach/jstachio/escapers/HtmlEscaper.java",
  "func_name": "append",
  "func_before": "@Override\n\tpublic <A extends Output<E>, E extends Exception> void append(A a, char c) throws E {\n\t\tswitch (c) {\n\t\t\tcase '&' -> {\n\t\t\t\ta.append(AMP);\n\t\t\t}\n\t\t\tcase '<' -> {\n\t\t\t\ta.append(LT);\n\t\t\t}\n\t\t\tcase '>' -> {\n\t\t\t\ta.append(GT);\n\t\t\t}\n\t\t\tcase '\"' -> {\n\t\t\t\ta.append(QUOT);\n\t\t\t}\n\t\t\tdefault -> {\n\t\t\t\ta.append(c);\n\t\t\t}\n\t\t}\n\t}",
  "abstract_func_before": "@Override\n\tpublic <A extends Output<E>, E extends Exception> void append(A VAR_0, char VAR_1) throws E {\n\t\tswitch (VAR_1) {\n\t\t\tcase '&' -> {\n\t\t\t\tVAR_0.append(VAR_2);\n\t\t\t}\n\t\t\tcase '<' -> {\n\t\t\t\tVAR_0.append(VAR_3);\n\t\t\t}\n\t\t\tcase '>' -> {\n\t\t\t\tVAR_0.append(VAR_4);\n\t\t\t}\n\t\t\tcase '\"' -> {\n\t\t\t\tVAR_0.append(VAR_5);\n\t\t\t}\n\t\t\tdefault -> {\n\t\t\t\tVAR_0.append(VAR_1);\n\t\t\t}\n\t\t}\n\t}",
  "func_graph_path_before": "jstachio/7b2f78377d1284df14c580be762a25af5f8dcd66/HtmlEscaper.java/vul/before/0.json",
  "func": "@Override\n\tpublic <A extends Output<E>, E extends Exception> void append(A a, char c) throws E {\n\t\tswitch (c) {\n\t\t\tcase '\"' -> {\n\t\t\t\ta.append(QUOT);\n\t\t\t}\n\t\t\tcase '&' -> {\n\t\t\t\ta.append(AMP);\n\t\t\t}\n\t\t\tcase '\\'' -> {\n\t\t\t\ta.append(APOS);\n\t\t\t}\n\t\t\tcase '<' -> {\n\t\t\t\ta.append(LT);\n\t\t\t}\n\t\t\tcase '=' -> {\n\t\t\t\ta.append(EQUAL);\n\t\t\t}\n\t\t\tcase '>' -> {\n\t\t\t\ta.append(GT);\n\t\t\t}\n\t\t\tcase '`' -> {\n\t\t\t\ta.append(BACK_TICK);\n\t\t\t}\n\t\t\tdefault -> {\n\t\t\t\ta.append(c);\n\t\t\t}\n\t\t}\n\t}",
  "abstract_func": "@Override\n\tpublic <A extends Output<E>, E extends Exception> void append(A VAR_0, char VAR_1) throws E {\n\t\tswitch (VAR_1) {\n\t\t\tcase '\"' -> {\n\t\t\t\tVAR_0.append(VAR_2);\n\t\t\t}\n\t\t\tcase '&' -> {\n\t\t\t\tVAR_0.append(VAR_3);\n\t\t\t}\n\t\t\tcase '\\'' -> {\n\t\t\t\tVAR_0.append(VAR_4);\n\t\t\t}\n\t\t\tcase '<' -> {\n\t\t\t\tVAR_0.append(VAR_5);\n\t\t\t}\n\t\t\tcase '=' -> {\n\t\t\t\tVAR_0.append(VAR_6);\n\t\t\t}\n\t\t\tcase '>' -> {\n\t\t\t\tVAR_0.append(VAR_7);\n\t\t\t}\n\t\t\tcase '`' -> {\n\t\t\t\tVAR_0.append(VAR_8);\n\t\t\t}\n\t\t\tdefault -> {\n\t\t\t\tVAR_0.append(VAR_1);\n\t\t\t}\n\t\t}\n\t}",
  "func_graph_path": "jstachio/7b2f78377d1284df14c580be762a25af5f8dcd66/HtmlEscaper.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,17 +1,26 @@\n @Override\n \tpublic <A extends Output<E>, E extends Exception> void append(A a, char c) throws E {\n \t\tswitch (c) {\n+\t\t\tcase '\"' -> {\n+\t\t\t\ta.append(QUOT);\n+\t\t\t}\n \t\t\tcase '&' -> {\n \t\t\t\ta.append(AMP);\n+\t\t\t}\n+\t\t\tcase '\\'' -> {\n+\t\t\t\ta.append(APOS);\n \t\t\t}\n \t\t\tcase '<' -> {\n \t\t\t\ta.append(LT);\n \t\t\t}\n+\t\t\tcase '=' -> {\n+\t\t\t\ta.append(EQUAL);\n+\t\t\t}\n \t\t\tcase '>' -> {\n \t\t\t\ta.append(GT);\n \t\t\t}\n-\t\t\tcase '\"' -> {\n-\t\t\t\ta.append(QUOT);\n+\t\t\tcase '`' -> {\n+\t\t\t\ta.append(BACK_TICK);\n \t\t\t}\n \t\t\tdefault -> {\n \t\t\t\ta.append(c);",
  "diff_line_info": {
    "deleted_lines": [
      "\t\t\tcase '\"' -> {",
      "\t\t\t\ta.append(QUOT);"
    ],
    "added_lines": [
      "\t\t\tcase '\"' -> {",
      "\t\t\t\ta.append(QUOT);",
      "\t\t\t}",
      "\t\t\t}",
      "\t\t\tcase '\\'' -> {",
      "\t\t\t\ta.append(APOS);",
      "\t\t\tcase '=' -> {",
      "\t\t\t\ta.append(EQUAL);",
      "\t\t\t}",
      "\t\t\tcase '`' -> {",
      "\t\t\t\ta.append(BACK_TICK);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/jstachio/jstachio/pull/158",
  "description": {
    "pr_info": {
      "title": "Fix #157 add more aggressive html5 escaping",
      "number": 158
    },
    "comment": [
      "The original Mustache spec and various implementations only escaped\r\n\r\n* `\"`\r\n* `&`\r\n* `<`\r\n* `>`\r\n\r\nJStachio kept with that minimum HTML version agnostic escaping expecting users to use different escaping on attributes through a lambda. \r\n\r\nUnfortunately that is unrealistic and dangerous and I should have added the additional following characters in:\r\n\r\n* `\\``\r\n* `'`\r\n* `=`\r\n\r\nI don't think the above problem deserves a CVE as it was documented that it only did the original 4 and while these additional characters prevent some level of script injection of attributes there are probably other exploits that can be done on HTML attributes (particularly the on attributes) with script tags.\r\n\r\nAttribute escaping (and examination of scripts in those attributes) will at some point be provided as a feature through a lambda to prevent those kinds of exploits but for now it is best to only use trusted or sanitized content for HTML attributes."
    ]
  },
  "Bug Filter": "Security Vulnerability Fix  \nConfidence Score: 1.0",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "\n\n**Final Output:**\n\nAnalysis:\n- The patch modifies an HTML escaping function to include additional characters (`'`, `=`, `` ` ``), enhancing protection against XSS attacks by preventing script injection in HTML attributes.\n- The commit message and comments explicitly address security concerns, indicating a vulnerability fix.\n- The changes directly mitigate a security risk, fitting the criteria for a Security Vulnerability Fix.\n\nFinal Classification: Security Vulnerability Fix  \nConfidence Score: 1.0"
}