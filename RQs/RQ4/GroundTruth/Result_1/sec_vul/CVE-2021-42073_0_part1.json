{
  "cve_id": "CVE-2021-42073",
  "cwe_ids": [
    "CWE-384"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:P/I:P/A:N",
  "cvss_is_v3": false,
  "repo_name": "debauchee/barrier",
  "commit_msg": "Implement client identity verification\n\nThis commit fixes two security vulnerabilities: CVE-2021-42072 and\nCVE-2021-42073.\n\nThe issues have been reported by Matthias Gerstner <mgerstner@suse.de>.",
  "commit_hash": "229abab99f39f11624e5651f819e7f1f8eddedcc",
  "git_url": "https://github.com/debauchee/barrier/commit/229abab99f39f11624e5651f819e7f1f8eddedcc",
  "file_path": "src/gui/src/MainWindow.cpp",
  "func_name": "MainWindow::serverArgs",
  "func_before": "bool MainWindow::serverArgs(QStringList& args, QString& app)\n{\n    app = appPath(appConfig().barriersName());\n\n    if (!QFile::exists(app))\n    {\n        QMessageBox::warning(this, tr(\"Barrier server not found\"),\n                             tr(\"The executable for the barrier server does not exist.\"));\n        return false;\n    }\n\n#if defined(Q_OS_WIN)\n    // wrap in quotes so a malicious user can't start \\Program.exe as admin.\n    app = QString(\"\\\"%1\\\"\").arg(app);\n#endif\n\n    if (appConfig().logToFile())\n    {\n        appConfig().persistLogDir();\n\n        args << \"--log\" << appConfig().logFilenameCmd();\n    }\n\n    QString configFilename = this->configFilename();\n#if defined(Q_OS_WIN)\n    // wrap in quotes in case username contains spaces.\n    configFilename = QString(\"\\\"%1\\\"\").arg(configFilename);\n#endif\n    args << \"-c\" << configFilename << \"--address\" << address();\n\n    return true;\n}",
  "abstract_func_before": "bool MainWindow::serverArgs(QStringList& VAR_0, QString& VAR_1)\n{\n    VAR_1 = appPath(appConfig().barriersName());\n\n    if (!QFile::exists(VAR_1))\n    {\n        QMessageBox::warning(this, tr(\"Barrier server not found\"),\n                             tr(\"The executable for the barrier server does not exist.\"));\n        return false;\n    }\n\n#if defined(VAR_2)\n    /* COMMENT_0 */\n    VAR_1 = QString(\"\\\"%1\\\"\").arg(VAR_1);\n#endif\n\n    if (appConfig().logToFile())\n    {\n        appConfig().persistLogDir();\n\n        VAR_0 << \"--log\" << appConfig().logFilenameCmd();\n    }\n\n    QString VAR_3 = this->configFilename();\n#if defined(VAR_2)\n    /* COMMENT_1 */\n    VAR_3 = QString(\"\\\"%1\\\"\").arg(VAR_3);\n#endif\n    VAR_0 << \"-c\" << VAR_3 << \"--address\" << address();\n\n    return true;\n}",
  "func_graph_path_before": "debauchee/barrier/229abab99f39f11624e5651f819e7f1f8eddedcc/MainWindow.cpp/vul/before/0.json",
  "func": "bool MainWindow::serverArgs(QStringList& args, QString& app)\n{\n    app = appPath(appConfig().barriersName());\n\n    if (!QFile::exists(app))\n    {\n        QMessageBox::warning(this, tr(\"Barrier server not found\"),\n                             tr(\"The executable for the barrier server does not exist.\"));\n        return false;\n    }\n\n#if defined(Q_OS_WIN)\n    // wrap in quotes so a malicious user can't start \\Program.exe as admin.\n    app = QString(\"\\\"%1\\\"\").arg(app);\n#endif\n\n    if (appConfig().logToFile())\n    {\n        appConfig().persistLogDir();\n\n        args << \"--log\" << appConfig().logFilenameCmd();\n    }\n\n    if (!appConfig().getRequireClientCertificate()) {\n        args << \"--disable-client-cert-checking\";\n    }\n\n    QString configFilename = this->configFilename();\n#if defined(Q_OS_WIN)\n    // wrap in quotes in case username contains spaces.\n    configFilename = QString(\"\\\"%1\\\"\").arg(configFilename);\n#endif\n    args << \"-c\" << configFilename << \"--address\" << address();\n\n    return true;\n}",
  "abstract_func": "bool MainWindow::serverArgs(QStringList& VAR_0, QString& VAR_1)\n{\n    VAR_1 = appPath(appConfig().barriersName());\n\n    if (!QFile::exists(VAR_1))\n    {\n        QMessageBox::warning(this, tr(\"Barrier server not found\"),\n                             tr(\"The executable for the barrier server does not exist.\"));\n        return false;\n    }\n\n#if defined(VAR_2)\n    /* COMMENT_0 */\n    VAR_1 = QString(\"\\\"%1\\\"\").arg(VAR_1);\n#endif\n\n    if (appConfig().logToFile())\n    {\n        appConfig().persistLogDir();\n\n        VAR_0 << \"--log\" << appConfig().logFilenameCmd();\n    }\n\n    if (!appConfig().getRequireClientCertificate()) {\n        VAR_0 << \"--disable-client-cert-checking\";\n    }\n\n    QString VAR_3 = this->configFilename();\n#if defined(VAR_2)\n    /* COMMENT_1 */\n    VAR_3 = QString(\"\\\"%1\\\"\").arg(VAR_3);\n#endif\n    VAR_0 << \"-c\" << VAR_3 << \"--address\" << address();\n\n    return true;\n}",
  "func_graph_path": "debauchee/barrier/229abab99f39f11624e5651f819e7f1f8eddedcc/MainWindow.cpp/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -21,6 +21,10 @@\n         args << \"--log\" << appConfig().logFilenameCmd();\n     }\n \n+    if (!appConfig().getRequireClientCertificate()) {\n+        args << \"--disable-client-cert-checking\";\n+    }\n+\n     QString configFilename = this->configFilename();\n #if defined(Q_OS_WIN)\n     // wrap in quotes in case username contains spaces.",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "    if (!appConfig().getRequireClientCertificate()) {",
      "        args << \"--disable-client-cert-checking\";",
      "    }",
      ""
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/debauchee/barrier/pull/1346",
  "description": {
    "pr_info": {
      "title": "Implement client identity verification [SECURITY VULNERABILITIES CVE-2021-42072, CVE-2021-42073]",
      "number": 1346
    },
    "comment": [
      "This PR implements client identity verification. Essentially server gets the same process of accepting and rejecting clients like the clients can accept or reject the server. This is important because even though the client can't move the mouse on the server, it can still receive input and potentially set the clipboard.\r\n\r\nThis PR fixes the following security vulnerabilities:\r\n\r\n - CVE-2021-42072 server does not verify client identity (certificate fingerprint)\r\n - CVE-2021-42073 By guessing/listening in on valid client names server clipboard content can be manipulated.\r\n\r\nThe issues have been reported by Matthias Gerstner <mgerstner@suse.de> @mgerstner. Matthias also provided insights into how best to fix the issues, precise reproduction steps and any used tools and made the maintainer's life as pleasant as possible. Thank you!"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix\n\nConfidence Score: 0.95",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "\n\n**Final Output:**\n\nAnalysis: The commit message clearly states that the patch fixes two security vulnerabilities (CVE-2021-42072 and CVE-2021-42073). The code changes introduce a check for client certificate requirements, which directly addresses the issues of unauthorized access and data manipulation. This indicates a security vulnerability fix.\n\nFinal Classification: Security Vulnerability Fix\n\nConfidence Score: 0.95"
}