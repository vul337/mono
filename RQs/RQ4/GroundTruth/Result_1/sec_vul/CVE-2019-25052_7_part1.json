{
  "cve_id": "CVE-2019-25052",
  "cwe_ids": [
    "CWE-327"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "OP-TEE/optee_os",
  "commit_msg": "cryp: prevent direct calls to update and final functions\n\nWith inconsistent or malformed data it has been possible to call\n\"update\" and \"final\" crypto functions directly. Using a fuzzer tool [1]\nwe have seen that this results in asserts, i.e., a crash that\npotentially could leak sensitive information.\n\nBy setting the state (initialized) in the crypto context (i.e., the\ntee_cryp_state) at the end of all syscall_*_init functions and then add\na check of the state at the beginning of all update and final functions,\n  we prevent direct entrance to the \"update\" and \"final\" functions.\n\n[1] https://github.com/MartijnB/optee_fuzzer\n\nFixes: OP-TEE-2019-0021\n\nSigned-off-by: Joakim Bech <joakim.bech@linaro.org>\nReported-by: Martijn Bogaard <bogaard@riscure.com>\nAcked-by: Jerome Forissier <jerome.forissier@linaro.org>\nReviewed-by: Jens Wiklander <jens.wiklander@linaro.org>",
  "commit_hash": "34a08bec755670ea0490cb53bbc68058cafc69b6",
  "git_url": "https://github.com/OP-TEE/optee_os/commit/34a08bec755670ea0490cb53bbc68058cafc69b6",
  "file_path": "core/tee/tee_svc_cryp.c",
  "func_name": "syscall_authenc_init",
  "func_before": "TEE_Result syscall_authenc_init(unsigned long state, const void *nonce,\n\t\t\tsize_t nonce_len, size_t tag_len,\n\t\t\tsize_t aad_len, size_t payload_len)\n{\n\tTEE_Result res;\n\tstruct tee_cryp_state *cs;\n\tstruct tee_ta_session *sess;\n\tstruct tee_obj *o;\n\tstruct tee_cryp_obj_secret *key;\n\n\tres = tee_ta_get_current_session(&sess);\n\tif (res != TEE_SUCCESS)\n\t\treturn res;\n\n\tres = tee_mmu_check_access_rights(to_user_ta_ctx(sess->ctx),\n\t\t\t\t\t  TEE_MEMORY_ACCESS_READ |\n\t\t\t\t\t  TEE_MEMORY_ACCESS_ANY_OWNER,\n\t\t\t\t\t  (uaddr_t)nonce, nonce_len);\n\tif (res != TEE_SUCCESS)\n\t\treturn res;\n\n\tres = tee_svc_cryp_get_state(sess, tee_svc_uref_to_vaddr(state), &cs);\n\tif (res != TEE_SUCCESS)\n\t\treturn res;\n\n\tres = tee_obj_get(to_user_ta_ctx(sess->ctx), cs->key1, &o);\n\tif (res != TEE_SUCCESS)\n\t\treturn res;\n\tif ((o->info.handleFlags & TEE_HANDLE_FLAG_INITIALIZED) == 0)\n\t\treturn TEE_ERROR_BAD_PARAMETERS;\n\n\tkey = o->attr;\n\tres = crypto_authenc_init(cs->ctx, cs->algo, cs->mode,\n\t\t\t\t  (uint8_t *)(key + 1), key->key_size,\n\t\t\t\t  nonce, nonce_len, tag_len, aad_len,\n\t\t\t\t  payload_len);\n\tif (res != TEE_SUCCESS)\n\t\treturn res;\n\n\tcs->ctx_finalize = (tee_cryp_ctx_finalize_func_t)crypto_authenc_final;\n\treturn TEE_SUCCESS;\n}",
  "abstract_func_before": "TEE_Result syscall_authenc_init(unsigned long VAR_0, const void *VAR_1,\n\t\t\tsize_t VAR_2, size_t VAR_3,\n\t\t\tsize_t VAR_4, size_t VAR_5)\n{\n\tTEE_Result VAR_6;\n\tstruct tee_cryp_state *VAR_7;\n\tstruct tee_ta_session *VAR_8;\n\tstruct tee_obj *VAR_9;\n\tstruct tee_cryp_obj_secret *VAR_10;\n\n\tVAR_6 = tee_ta_get_current_session(&VAR_8);\n\tif (VAR_6 != VAR_11)\n\t\treturn VAR_6;\n\n\tVAR_6 = tee_mmu_check_access_rights(to_user_ta_ctx(VAR_8->ctx),\n\t\t\t\t\t  VAR_12 |\n\t\t\t\t\t  VAR_13,\n\t\t\t\t\t  (uaddr_t)VAR_1, VAR_2);\n\tif (VAR_6 != VAR_11)\n\t\treturn VAR_6;\n\n\tVAR_6 = tee_svc_cryp_get_state(VAR_8, tee_svc_uref_to_vaddr(VAR_0), &VAR_7);\n\tif (VAR_6 != VAR_11)\n\t\treturn VAR_6;\n\n\tVAR_6 = tee_obj_get(to_user_ta_ctx(VAR_8->ctx), VAR_7->key1, &VAR_9);\n\tif (VAR_6 != VAR_11)\n\t\treturn VAR_6;\n\tif ((VAR_9->info.handleFlags & VAR_14) == 0)\n\t\treturn VAR_15;\n\n\tVAR_10 = VAR_9->attr;\n\tVAR_6 = crypto_authenc_init(VAR_7->ctx, VAR_7->algo, VAR_7->mode,\n\t\t\t\t  (uint8_t *)(VAR_10 + 1), VAR_10->key_size,\n\t\t\t\t  VAR_1, VAR_2, VAR_3, VAR_4,\n\t\t\t\t  VAR_5);\n\tif (VAR_6 != VAR_11)\n\t\treturn VAR_6;\n\n\tVAR_7->ctx_finalize = (tee_cryp_ctx_finalize_func_t)VAR_16;\n\treturn VAR_11;\n}",
  "func_graph_path_before": "OP-TEE/optee_os/34a08bec755670ea0490cb53bbc68058cafc69b6/tee_svc_cryp.c/vul/before/8.json",
  "func": "TEE_Result syscall_authenc_init(unsigned long state, const void *nonce,\n\t\t\tsize_t nonce_len, size_t tag_len,\n\t\t\tsize_t aad_len, size_t payload_len)\n{\n\tTEE_Result res;\n\tstruct tee_cryp_state *cs;\n\tstruct tee_ta_session *sess;\n\tstruct tee_obj *o;\n\tstruct tee_cryp_obj_secret *key;\n\n\tres = tee_ta_get_current_session(&sess);\n\tif (res != TEE_SUCCESS)\n\t\treturn res;\n\n\tres = tee_mmu_check_access_rights(to_user_ta_ctx(sess->ctx),\n\t\t\t\t\t  TEE_MEMORY_ACCESS_READ |\n\t\t\t\t\t  TEE_MEMORY_ACCESS_ANY_OWNER,\n\t\t\t\t\t  (uaddr_t)nonce, nonce_len);\n\tif (res != TEE_SUCCESS)\n\t\treturn res;\n\n\tres = tee_svc_cryp_get_state(sess, tee_svc_uref_to_vaddr(state), &cs);\n\tif (res != TEE_SUCCESS)\n\t\treturn res;\n\n\tres = tee_obj_get(to_user_ta_ctx(sess->ctx), cs->key1, &o);\n\tif (res != TEE_SUCCESS)\n\t\treturn res;\n\tif ((o->info.handleFlags & TEE_HANDLE_FLAG_INITIALIZED) == 0)\n\t\treturn TEE_ERROR_BAD_PARAMETERS;\n\n\tkey = o->attr;\n\tres = crypto_authenc_init(cs->ctx, cs->algo, cs->mode,\n\t\t\t\t  (uint8_t *)(key + 1), key->key_size,\n\t\t\t\t  nonce, nonce_len, tag_len, aad_len,\n\t\t\t\t  payload_len);\n\tif (res != TEE_SUCCESS)\n\t\treturn res;\n\n\tcs->ctx_finalize = (tee_cryp_ctx_finalize_func_t)crypto_authenc_final;\n\tcs->state = CRYP_STATE_INITIALIZED;\n\n\treturn TEE_SUCCESS;\n}",
  "abstract_func": "TEE_Result syscall_authenc_init(unsigned long VAR_0, const void *VAR_1,\n\t\t\tsize_t VAR_2, size_t VAR_3,\n\t\t\tsize_t VAR_4, size_t VAR_5)\n{\n\tTEE_Result VAR_6;\n\tstruct tee_cryp_state *VAR_7;\n\tstruct tee_ta_session *VAR_8;\n\tstruct tee_obj *VAR_9;\n\tstruct tee_cryp_obj_secret *VAR_10;\n\n\tVAR_6 = tee_ta_get_current_session(&VAR_8);\n\tif (VAR_6 != VAR_11)\n\t\treturn VAR_6;\n\n\tVAR_6 = tee_mmu_check_access_rights(to_user_ta_ctx(VAR_8->ctx),\n\t\t\t\t\t  VAR_12 |\n\t\t\t\t\t  VAR_13,\n\t\t\t\t\t  (uaddr_t)VAR_1, VAR_2);\n\tif (VAR_6 != VAR_11)\n\t\treturn VAR_6;\n\n\tVAR_6 = tee_svc_cryp_get_state(VAR_8, tee_svc_uref_to_vaddr(VAR_0), &VAR_7);\n\tif (VAR_6 != VAR_11)\n\t\treturn VAR_6;\n\n\tVAR_6 = tee_obj_get(to_user_ta_ctx(VAR_8->ctx), VAR_7->key1, &VAR_9);\n\tif (VAR_6 != VAR_11)\n\t\treturn VAR_6;\n\tif ((VAR_9->info.handleFlags & VAR_14) == 0)\n\t\treturn VAR_15;\n\n\tVAR_10 = VAR_9->attr;\n\tVAR_6 = crypto_authenc_init(VAR_7->ctx, VAR_7->algo, VAR_7->mode,\n\t\t\t\t  (uint8_t *)(VAR_10 + 1), VAR_10->key_size,\n\t\t\t\t  VAR_1, VAR_2, VAR_3, VAR_4,\n\t\t\t\t  VAR_5);\n\tif (VAR_6 != VAR_11)\n\t\treturn VAR_6;\n\n\tVAR_7->ctx_finalize = (tee_cryp_ctx_finalize_func_t)VAR_16;\n\tVAR_7->state = VAR_17;\n\n\treturn VAR_11;\n}",
  "func_graph_path": "OP-TEE/optee_os/34a08bec755670ea0490cb53bbc68058cafc69b6/tee_svc_cryp.c/vul/after/8.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -38,5 +38,7 @@\n \t\treturn res;\n \n \tcs->ctx_finalize = (tee_cryp_ctx_finalize_func_t)crypto_authenc_final;\n+\tcs->state = CRYP_STATE_INITIALIZED;\n+\n \treturn TEE_SUCCESS;\n }",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "\tcs->state = CRYP_STATE_INITIALIZED;",
      ""
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/OP-TEE/optee_os/pull/3316",
  "description": {
    "pr_info": {
      "title": "Riscure fuzzer vuln",
      "number": 3316
    },
    "comment": [
      "Fixes for potential security issues found by Riscure's fuzzer tool.\r\n\r\nI've tested this in QEMU v7, no regressions seen.\r\n```bash\r\n24105 subtests of which 0 failed\r\n96 test cases of which 0 failed\r\n0 test cases were skipped\r\nTEE test application done!\r\n```",
      "Squashed, rebased and tag(s) applied (should be) ready for merge! Thanks!"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix  \nConfidence Score: 1.0",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "\n\n**Final Output:**\n\nAnalysis: Step 1: The patch modifies the initialization of crypto functions to prevent direct calls to update and final functions, which could cause crashes and information leakage. Step 2: The code change introduces state checks, addressing a security flaw identified by a fuzzer. Step 3: Not applicable as the patch fits the security category. Step 4: High confidence due to clear security intent and code changes.\n\nFinal Classification: Security Vulnerability Fix  \nConfidence Score: 1.0"
}