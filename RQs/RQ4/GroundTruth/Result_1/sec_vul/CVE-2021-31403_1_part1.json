{
  "cve_id": "CVE-2021-31403",
  "cwe_ids": [
    "CWE-203"
  ],
  "cvss_vector": "AV:L/AC:M/Au:N/C:P/I:N/A:N",
  "cvss_is_v3": false,
  "repo_name": "vaadin/framework",
  "commit_msg": "fix: use time-constant comparison for CSRF tokens\n\nThis hardens the framework against a theoretical timing attack based on\r\ncomparing how quickly a request with an invalid CSRF token is rejected.",
  "commit_hash": "4f2ffdd4da343316bd8ac615b26f64f66cac89a3",
  "git_url": "https://github.com/vaadin/framework/commit/4f2ffdd4da343316bd8ac615b26f64f66cac89a3",
  "file_path": "server/src/main/java/com/vaadin/server/VaadinService.java",
  "func_name": "isCsrfTokenValid",
  "func_before": "public static boolean isCsrfTokenValid(VaadinSession session,\n            String requestToken) {\n\n        if (session.getService().getDeploymentConfiguration()\n                .isXsrfProtectionEnabled()) {\n            String sessionToken = session.getCsrfToken();\n\n            if (sessionToken == null || !sessionToken.equals(requestToken)) {\n                return false;\n            }\n        }\n        return true;\n    }",
  "abstract_func_before": "public static boolean isCsrfTokenValid(VaadinSession VAR_0,\n            String VAR_1) {\n\n        if (VAR_0.getService().getDeploymentConfiguration()\n                .isXsrfProtectionEnabled()) {\n            String VAR_2 = VAR_0.getCsrfToken();\n\n            if (VAR_2 == null || !VAR_2.equals(VAR_1)) {\n                return false;\n            }\n        }\n        return true;\n    }",
  "func_graph_path_before": "vaadin/framework/4f2ffdd4da343316bd8ac615b26f64f66cac89a3/VaadinService.java/vul/before/0.json",
  "func": "public static boolean isCsrfTokenValid(VaadinSession session,\n            String requestToken) {\n\n        if (session.getService().getDeploymentConfiguration()\n                .isXsrfProtectionEnabled()) {\n            String sessionToken = session.getCsrfToken();\n\n            if (sessionToken == null || !MessageDigest.isEqual(\n                    sessionToken.getBytes(StandardCharsets.UTF_8),\n                    requestToken.getBytes(StandardCharsets.UTF_8))) {\n                return false;\n            }\n        }\n        return true;\n    }",
  "abstract_func": "public static boolean isCsrfTokenValid(VaadinSession VAR_0,\n            String VAR_1) {\n\n        if (VAR_0.getService().getDeploymentConfiguration()\n                .isXsrfProtectionEnabled()) {\n            String VAR_2 = VAR_0.getCsrfToken();\n\n            if (VAR_2 == null || !VAR_3.isEqual(\n                    VAR_2.getBytes(VAR_4.UTF_8),\n                    VAR_1.getBytes(VAR_4.UTF_8))) {\n                return false;\n            }\n        }\n        return true;\n    }",
  "func_graph_path": "vaadin/framework/4f2ffdd4da343316bd8ac615b26f64f66cac89a3/VaadinService.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -5,7 +5,9 @@\n                 .isXsrfProtectionEnabled()) {\n             String sessionToken = session.getCsrfToken();\n \n-            if (sessionToken == null || !sessionToken.equals(requestToken)) {\n+            if (sessionToken == null || !MessageDigest.isEqual(\n+                    sessionToken.getBytes(StandardCharsets.UTF_8),\n+                    requestToken.getBytes(StandardCharsets.UTF_8))) {\n                 return false;\n             }\n         }",
  "diff_line_info": {
    "deleted_lines": [
      "            if (sessionToken == null || !sessionToken.equals(requestToken)) {"
    ],
    "added_lines": [
      "            if (sessionToken == null || !MessageDigest.isEqual(",
      "                    sessionToken.getBytes(StandardCharsets.UTF_8),",
      "                    requestToken.getBytes(StandardCharsets.UTF_8))) {"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/vaadin/framework/pull/12190",
  "description": {
    "pr_info": {
      "title": "fix: use time-constant comparison for CSRF tokens",
      "number": 12190
    },
    "comment": [
      "This hardens the framework against a theoretical timing attack based on\r\ncomparing how quickly a request with an invalid CSRF token is rejected.\r\n\r\nBackporting of https://github.com/vaadin/framework/pull/12188\n\n<!-- Reviewable:start -->\n---\nThis change isâ€‚[<img src=\"https://reviewable.io/review_button.svg\" height=\"34\" align=\"absmiddle\" alt=\"Reviewable\"/>](https://reviewable.io/reviews/vaadin/framework/12190)\n<!-- Reviewable:end -->\n"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix\n\nConfidence Score: 1.0",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "\n\n**Final Output:**\n\nAnalysis: The patch modifies the CSRF token comparison to use a time-constant method, addressing a potential timing attack vulnerability. This change enhances security by preventing attackers from inferring token information through timing measurements.\n\nFinal Classification: Security Vulnerability Fix\n\nConfidence Score: 1.0"
}