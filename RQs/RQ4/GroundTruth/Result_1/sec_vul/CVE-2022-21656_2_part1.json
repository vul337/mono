{
  "cve_id": "CVE-2022-21656",
  "cwe_ids": [
    "CWE-843"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:P/I:P/A:N",
  "cvss_is_v3": false,
  "repo_name": "envoyproxy/envoy",
  "commit_msg": "Specify type for matching Subject Alternative Name. (#18628)\n\n\r\nSigned-off-by: Pradeep Rao <pcrao@google.com>",
  "commit_hash": "bb95af848c939cfe5b5ee33c5b1770558077e64e",
  "git_url": "https://github.com/envoyproxy/envoy/commit/bb95af848c939cfe5b5ee33c5b1770558077e64e",
  "file_path": "source/extensions/transport_sockets/tls/cert_validator/default_validator.cc",
  "func_name": "DefaultCertValidator::matchSubjectAltName",
  "func_before": "bool DefaultCertValidator::matchSubjectAltName(\n    X509* cert,\n    const std::vector<Matchers::StringMatcherImpl<envoy::type::matcher::v3::StringMatcher>>&\n        subject_alt_name_matchers) {\n  bssl::UniquePtr<GENERAL_NAMES> san_names(\n      static_cast<GENERAL_NAMES*>(X509_get_ext_d2i(cert, NID_subject_alt_name, nullptr, nullptr)));\n  if (san_names == nullptr) {\n    return false;\n  }\n  for (const GENERAL_NAME* general_name : san_names.get()) {\n    const std::string san = Utility::generalNameAsString(general_name);\n    for (auto& config_san_matcher : subject_alt_name_matchers) {\n      // For DNS SAN, if the StringMatcher type is exact, we have to follow DNS matching semantics.\n      if (general_name->type == GEN_DNS &&\n                  config_san_matcher.matcher().match_pattern_case() ==\n                      envoy::type::matcher::v3::StringMatcher::MatchPatternCase::kExact\n              ? Utility::dnsNameMatch(config_san_matcher.matcher().exact(), absl::string_view(san))\n              : config_san_matcher.match(san)) {\n        return true;\n      }\n    }\n  }\n  return false;\n}",
  "abstract_func_before": "bool DefaultCertValidator::matchSubjectAltName(\n    X509* VAR_0,\n    const std::vector<Matchers::StringMatcherImpl<envoy::type::matcher::v3::StringMatcher>>&\n        VAR_1) {\n  bssl::UniquePtr<GENERAL_NAMES> san_names(\n      static_cast<GENERAL_NAMES*>(X509_get_ext_d2i(cert, NID_subject_alt_name, nullptr, nullptr)));\n  if (VAR_2 == nullptr) {\n    return false;\n  }\n  for (const GENERAL_NAME* VAR_3 : VAR_2.get()) {\n    const std::string VAR_4 = Utility::generalNameAsString(VAR_3);\n    for (auto& VAR_5 : VAR_1) {\n      /* COMMENT_0 */\n      if (VAR_3->type == VAR_6 &&\n                  VAR_5.matcher().match_pattern_case() ==\n                      envoy::type::matcher::v3::StringMatcher::MatchPatternCase::kExact\n              ? Utility::dnsNameMatch(VAR_5.matcher().exact(), absl::string_view(VAR_4))\n              : VAR_5.match(VAR_4)) {\n        return true;\n      }\n    }\n  }\n  return false;\n}",
  "func_graph_path_before": "envoyproxy/envoy/bb95af848c939cfe5b5ee33c5b1770558077e64e/default_validator.cc/vul/before/0.json",
  "func": "bool DefaultCertValidator::matchSubjectAltName(\n    X509* cert, const std::vector<SanMatcherPtr>& subject_alt_name_matchers) {\n  bssl::UniquePtr<GENERAL_NAMES> san_names(\n      static_cast<GENERAL_NAMES*>(X509_get_ext_d2i(cert, NID_subject_alt_name, nullptr, nullptr)));\n  if (san_names == nullptr) {\n    return false;\n  }\n  for (const auto& config_san_matcher : subject_alt_name_matchers) {\n    for (const GENERAL_NAME* general_name : san_names.get()) {\n      if (config_san_matcher->match(general_name)) {\n        return true;\n      }\n    }\n  }\n  return false;\n}",
  "abstract_func": "bool DefaultCertValidator::matchSubjectAltName(\n    X509* VAR_0, const std::vector<SanMatcherPtr>& VAR_1) {\n  bssl::UniquePtr<GENERAL_NAMES> san_names(\n      static_cast<GENERAL_NAMES*>(X509_get_ext_d2i(cert, NID_subject_alt_name, nullptr, nullptr)));\n  if (VAR_2 == nullptr) {\n    return false;\n  }\n  for (const auto& VAR_3 : VAR_1) {\n    for (const GENERAL_NAME* VAR_4 : VAR_2.get()) {\n      if (VAR_3->match(VAR_4)) {\n        return true;\n      }\n    }\n  }\n  return false;\n}",
  "func_graph_path": "envoyproxy/envoy/bb95af848c939cfe5b5ee33c5b1770558077e64e/default_validator.cc/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,21 +1,13 @@\n bool DefaultCertValidator::matchSubjectAltName(\n-    X509* cert,\n-    const std::vector<Matchers::StringMatcherImpl<envoy::type::matcher::v3::StringMatcher>>&\n-        subject_alt_name_matchers) {\n+    X509* cert, const std::vector<SanMatcherPtr>& subject_alt_name_matchers) {\n   bssl::UniquePtr<GENERAL_NAMES> san_names(\n       static_cast<GENERAL_NAMES*>(X509_get_ext_d2i(cert, NID_subject_alt_name, nullptr, nullptr)));\n   if (san_names == nullptr) {\n     return false;\n   }\n-  for (const GENERAL_NAME* general_name : san_names.get()) {\n-    const std::string san = Utility::generalNameAsString(general_name);\n-    for (auto& config_san_matcher : subject_alt_name_matchers) {\n-      // For DNS SAN, if the StringMatcher type is exact, we have to follow DNS matching semantics.\n-      if (general_name->type == GEN_DNS &&\n-                  config_san_matcher.matcher().match_pattern_case() ==\n-                      envoy::type::matcher::v3::StringMatcher::MatchPatternCase::kExact\n-              ? Utility::dnsNameMatch(config_san_matcher.matcher().exact(), absl::string_view(san))\n-              : config_san_matcher.match(san)) {\n+  for (const auto& config_san_matcher : subject_alt_name_matchers) {\n+    for (const GENERAL_NAME* general_name : san_names.get()) {\n+      if (config_san_matcher->match(general_name)) {\n         return true;\n       }\n     }",
  "diff_line_info": {
    "deleted_lines": [
      "    X509* cert,",
      "    const std::vector<Matchers::StringMatcherImpl<envoy::type::matcher::v3::StringMatcher>>&",
      "        subject_alt_name_matchers) {",
      "  for (const GENERAL_NAME* general_name : san_names.get()) {",
      "    const std::string san = Utility::generalNameAsString(general_name);",
      "    for (auto& config_san_matcher : subject_alt_name_matchers) {",
      "      // For DNS SAN, if the StringMatcher type is exact, we have to follow DNS matching semantics.",
      "      if (general_name->type == GEN_DNS &&",
      "                  config_san_matcher.matcher().match_pattern_case() ==",
      "                      envoy::type::matcher::v3::StringMatcher::MatchPatternCase::kExact",
      "              ? Utility::dnsNameMatch(config_san_matcher.matcher().exact(), absl::string_view(san))",
      "              : config_san_matcher.match(san)) {"
    ],
    "added_lines": [
      "    X509* cert, const std::vector<SanMatcherPtr>& subject_alt_name_matchers) {",
      "  for (const auto& config_san_matcher : subject_alt_name_matchers) {",
      "    for (const GENERAL_NAME* general_name : san_names.get()) {",
      "      if (config_san_matcher->match(general_name)) {"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/envoyproxy/envoy/pull/18628",
  "description": {
    "pr_info": {
      "title": "Specify type for matching Subject Alternative Name.",
      "number": 18628
    },
    "comment": [
      "Fixes #18259 \r\n\r\nSigned-off-by: Pradeep Rao <pcrao@google.com>\r\n\r\nCommit Message:\r\nAdditional Description:\r\nRisk Level: Low\r\nTesting: Added test\r\nDocs Changes: \r\nRelease Notes:\r\nPlatform Specific Features:\r\n\r\n",
      "CC @envoyproxy/api-shepherds: Your approval is needed for changes made to `api/envoy/`.\nenvoyproxy/api-shepherds assignee is @adisuissa\nCC @envoyproxy/api-watchers: FYI only for changes made to `api/envoy/`.\n\n\n<details>\n\t<summary>:cat:</summary>\n\nCaused by: https://github.com/envoyproxy/envoy/pull/18628 was opened by pradeepcrao.\n\nsee: [more](https://github.com/envoyproxy/envoy/pull/18628), [trace](https://prod.repokitteh.app/traces/ui/envoyproxy/envoy/43f59d30-2d01-11ec-9ba6-f409c4fc1d41).\n</details>",
      "With regards to having enum + StringMatcher, the enums would need to be one of the pound defines here: https://boringssl.googlesource.com/boringssl/+/refs/heads/master/include/openssl/x509v3.h#174 or an identifier type from here https://datatracker.ietf.org/doc/html/rfc6125#section-1.8\r\n\r\nThe issue is that a Stringmatcher would not make sense for every enum value, just the ones we support today. \r\n\r\nMy initial implementation was exactly that : enum + Stringmatcher instead of a typed config. I changed it when the above was pointed out to me.\r\n\r\nDoes that sound reasonable?",
      "> With regards to having enum + StringMatcher, the enums would need to be one of the pound defines here: https://boringssl.googlesource.com/boringssl/+/refs/heads/master/include/openssl/x509v3.h#174 or an identifier type from here https://datatracker.ietf.org/doc/html/rfc6125#section-1.8\r\n> \r\n> The issue is that a Stringmatcher would not make sense for every enum value, just the ones we support today.\r\n> \r\n> My initial implementation was exactly that : enum + Stringmatcher instead of a typed config. I changed it when the above was pointed out to me.\r\n> \r\n> Does that sound reasonable?\r\n\r\nI guess that if most use just a string matcher, then an enum + StringMatcher should be used to simplify the code, and a TypedExtension can be used to define the Other or some alternative that we don't support out of the box.\r\nSpecifically I suggest to have a generic string matcher message:\r\n```\r\nmessage StringSanMatcher {\r\n  MatcherTypeEnum type = 1;\r\n  type.matcher.v3.StringMatcher matcher = 2;\r\n}\r\n```\r\nand the wrapper message message will use either the string matcher or the TypedExtension:\r\n```\r\nmessage SubjectAltNameMatcher {\r\n  oneof {\r\n    StringSanMatcher string_matcher = 1;\r\n    core.v3.TypedExtensionConfig typed_config = 2;\r\n  }\r\n}\r\n```\r\n\r\nNote that this holds as long as we don't expect additional fields to the derived types (e.g., if `UriSanMatcher` will probably have an additional field later, then the current design may be better).\r\n",
      "CC @envoyproxy/api-shepherds: Your approval is needed for changes made to `(api/envoy/|docs/root/api-docs/)`.\nenvoyproxy/api-shepherds assignee is @adisuissa\nCC @envoyproxy/api-watchers: FYI only for changes made to `(api/envoy/|docs/root/api-docs/)`.\n\n\n<details>\n\t<summary>:cat:</summary>\n\nCaused by: https://github.com/envoyproxy/envoy/pull/18628 was synchronize by pradeepcrao.\n\nsee: [more](https://github.com/envoyproxy/envoy/pull/18628), [trace](https://prod.repokitteh.app/traces/ui/envoyproxy/envoy/0f3a1410-3718-11ec-8595-8e0fcd532110).\n</details>",
      "Hi @ggreenway, did you have any more comments about the PR? Are the changes satisfactory?\r\n\r\nI'm investigating the test that's failing in CI. On the face of it, it seems unrelated to this PR, as I have another PR for stats that has the same failure.",
      "/retest",
      "Retrying Azure Pipelines:\nRetried failed jobs in: [envoy-presubmit](https://dev.azure.com/cncf/4684fb3d-0389-4e0b-8251-221942316e06/_build/results?buildId=94394&view=results)\n\n\n<details>\n\t<summary>:cat:</summary>\n\nCaused by: a https://github.com/envoyproxy/envoy/pull/18628#issuecomment-967507609 was created by @pradeepcrao.\n\nsee: [more](https://github.com/envoyproxy/envoy/pull/18628#issuecomment-967507609), [trace](https://prod.repokitteh.app/traces/ui/envoyproxy/envoy/3e4962f0-43f8-11ec-9dea-a99363924994).\n</details>",
      "/retest",
      "Retrying Azure Pipelines:\nRetried failed jobs in: [envoy-presubmit](https://dev.azure.com/cncf/4684fb3d-0389-4e0b-8251-221942316e06/_build/results?buildId=94394&view=results)\n\n\n<details>\n\t<summary>:cat:</summary>\n\nCaused by: a https://github.com/envoyproxy/envoy/pull/18628#issuecomment-969174118 was created by @adisuissa.\n\nsee: [more](https://github.com/envoyproxy/envoy/pull/18628#issuecomment-969174118), [trace](https://prod.repokitteh.app/traces/ui/envoyproxy/envoy/33998ae0-463e-11ec-8f3e-725bde3b3c41).\n</details>",
      "The CI failure is due to a flaky test (see #19005). Will restart CI once Ryan's temporary fix #19007 is merged.",
      "/retest",
      "Retrying Azure Pipelines:\nCheck [envoy-presubmit](https://dev.azure.com/cncf/4684fb3d-0389-4e0b-8251-221942316e06/_build/results?buildId=94658&view=results) didn't fail.\n\n\n\n<details>\n\t<summary>:cat:</summary>\n\nCaused by: a https://github.com/envoyproxy/envoy/pull/18628#issuecomment-971612189 was created by @pradeepcrao.\n\nsee: [more](https://github.com/envoyproxy/envoy/pull/18628#issuecomment-971612189), [trace](https://prod.repokitteh.app/traces/ui/envoyproxy/envoy/32f15b50-47af-11ec-9c7f-1f1794953fc7).\n</details>",
      "/retest",
      "Retrying Azure Pipelines:\nRetried failed jobs in: [envoy-presubmit](https://dev.azure.com/cncf/4684fb3d-0389-4e0b-8251-221942316e06/_build/results?buildId=94835&view=results)\n\n\n<details>\n\t<summary>:cat:</summary>\n\nCaused by: a https://github.com/envoyproxy/envoy/pull/18628#issuecomment-974107254 was created by @pradeepcrao.\n\nsee: [more](https://github.com/envoyproxy/envoy/pull/18628#issuecomment-974107254), [trace](https://prod.repokitteh.app/traces/ui/envoyproxy/envoy/d0eb1820-4942-11ec-970c-ec4654e01002).\n</details>",
      "Hi @ggreenway, does this look good now? Do you have any pending concerns?"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix\n\nConfidence Score: 0.9",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "\n\n**Final Output:**\n\nAnalysis: The patch modifies the `matchSubjectAltName` function to use a typed configuration for matching Subject Alternative Names, enhancing validation accuracy and preventing potential security issues.\n\nFinal Classification: Security Vulnerability Fix\n\nConfidence Score: 0.9"
}