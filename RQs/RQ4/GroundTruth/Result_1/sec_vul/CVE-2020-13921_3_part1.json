{
  "cve_id": "CVE-2020-13921",
  "cwe_ids": [
    "CWE-89"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "apache/skywalking",
  "commit_msg": "fix fuzzy query sql injection",
  "commit_hash": "ddb6d9a5019a9c1fe31c364485a4e4b5066fefc3",
  "git_url": "https://github.com/apache/skywalking/commit/ddb6d9a5019a9c1fe31c364485a4e4b5066fefc3",
  "file_path": "oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2AlarmQueryDAO.java",
  "func_name": "getAlarm",
  "func_before": "@Override\n    public Alarms getAlarm(Integer scopeId, String keyword, int limit, int from, long startTB,\n        long endTB) throws IOException {\n        StringBuilder sql = new StringBuilder();\n        List<Object> parameters = new ArrayList<>(10);\n        sql.append(\"from \").append(AlarmRecord.INDEX_NAME).append(\" where \");\n        sql.append(\" 1=1 \");\n        if (Objects.nonNull(scopeId)) {\n            sql.append(\" and \").append(AlarmRecord.SCOPE).append(\" = ?\");\n            parameters.add(scopeId.intValue());\n        }\n        if (startTB != 0 && endTB != 0) {\n            sql.append(\" and \").append(AlarmRecord.TIME_BUCKET).append(\" >= ?\");\n            parameters.add(startTB);\n            sql.append(\" and \").append(AlarmRecord.TIME_BUCKET).append(\" <= ?\");\n            parameters.add(endTB);\n        }\n\n        if (!Strings.isNullOrEmpty(keyword)) {\n            sql.append(\" and \").append(AlarmRecord.ALARM_MESSAGE).append(\" like '%\").append(keyword).append(\"%' \");\n        }\n        sql.append(\" order by \").append(AlarmRecord.START_TIME).append(\" desc \");\n\n        Alarms alarms = new Alarms();\n        try (Connection connection = client.getConnection()) {\n\n            try (ResultSet resultSet = client.executeQuery(connection, \"select count(1) total from (select 1 \" + sql.toString() + \" )\", parameters\n                .toArray(new Object[0]))) {\n                while (resultSet.next()) {\n                    alarms.setTotal(resultSet.getInt(\"total\"));\n                }\n            }\n\n            this.buildLimit(sql, from, limit);\n\n            try (ResultSet resultSet = client.executeQuery(connection, \"select * \" + sql.toString(), parameters.toArray(new Object[0]))) {\n                while (resultSet.next()) {\n                    AlarmMessage message = new AlarmMessage();\n                    message.setId(resultSet.getString(AlarmRecord.ID0));\n                    message.setMessage(resultSet.getString(AlarmRecord.ALARM_MESSAGE));\n                    message.setStartTime(resultSet.getLong(AlarmRecord.START_TIME));\n                    message.setScope(Scope.Finder.valueOf(resultSet.getInt(AlarmRecord.SCOPE)));\n                    message.setScopeId(resultSet.getInt(AlarmRecord.SCOPE));\n\n                    alarms.getMsgs().add(message);\n                }\n            }\n        } catch (SQLException e) {\n            throw new IOException(e);\n        }\n\n        return alarms;\n    }",
  "abstract_func_before": "@Override\n    public Alarms getAlarm(Integer VAR_0, String VAR_1, int VAR_2, int VAR_3, long VAR_4,\n        long VAR_5) throws IOException {\n        StringBuilder VAR_6 = new StringBuilder();\n        List<Object> VAR_7 = new ArrayList<>(10);\n        VAR_6.append(\"from \").append(VAR_8.INDEX_NAME).append(\" where \");\n        VAR_6.append(\" 1=1 \");\n        if (VAR_9.nonNull(VAR_0)) {\n            VAR_6.append(\" and \").append(VAR_8.SCOPE).append(\" = ?\");\n            VAR_7.add(VAR_0.intValue());\n        }\n        if (VAR_4 != 0 && VAR_5 != 0) {\n            VAR_6.append(\" and \").append(VAR_8.TIME_BUCKET).append(\" >= ?\");\n            VAR_7.add(VAR_4);\n            VAR_6.append(\" and \").append(VAR_8.TIME_BUCKET).append(\" <= ?\");\n            VAR_7.add(VAR_5);\n        }\n\n        if (!VAR_10.isNullOrEmpty(VAR_1)) {\n            VAR_6.append(\" and \").append(VAR_8.ALARM_MESSAGE).append(\" like '%\").append(VAR_1).append(\"%' \");\n        }\n        VAR_6.append(\" order by \").append(VAR_8.START_TIME).append(\" desc \");\n\n        Alarms VAR_11 = new Alarms();\n        try (Connection VAR_12 = VAR_13.getConnection()) {\n\n            try (ResultSet VAR_14 = VAR_13.executeQuery(VAR_12, \"select count(1) total from (select 1 \" + VAR_6.toString() + \" )\", VAR_7\n                .toArray(new Object[0]))) {\n                while (VAR_14.next()) {\n                    VAR_11.setTotal(VAR_14.getInt(\"total\"));\n                }\n            }\n\n            this.buildLimit(VAR_6, VAR_3, VAR_2);\n\n            try (ResultSet VAR_14 = VAR_13.executeQuery(VAR_12, \"select * \" + VAR_6.toString(), VAR_7.toArray(new Object[0]))) {\n                while (VAR_14.next()) {\n                    AlarmMessage VAR_15 = new AlarmMessage();\n                    VAR_15.setId(VAR_14.getString(VAR_8.ID0));\n                    VAR_15.setMessage(VAR_14.getString(VAR_8.ALARM_MESSAGE));\n                    VAR_15.setStartTime(VAR_14.getLong(VAR_8.START_TIME));\n                    VAR_15.setScope(VAR_16.Finder.valueOf(VAR_14.getInt(VAR_8.SCOPE)));\n                    VAR_15.setScopeId(VAR_14.getInt(VAR_8.SCOPE));\n\n                    VAR_11.getMsgs().add(VAR_15);\n                }\n            }\n        } catch (SQLException VAR_17) {\n            throw new IOException(VAR_17);\n        }\n\n        return VAR_11;\n    }",
  "func_graph_path_before": "apache/skywalking/ddb6d9a5019a9c1fe31c364485a4e4b5066fefc3/H2AlarmQueryDAO.java/vul/before/0.json",
  "func": "@Override\n    public Alarms getAlarm(Integer scopeId, String keyword, int limit, int from, long startTB,\n        long endTB) throws IOException {\n        StringBuilder sql = new StringBuilder();\n        List<Object> parameters = new ArrayList<>(10);\n        sql.append(\"from \").append(AlarmRecord.INDEX_NAME).append(\" where \");\n        sql.append(\" 1=1 \");\n        if (Objects.nonNull(scopeId)) {\n            sql.append(\" and \").append(AlarmRecord.SCOPE).append(\" = ?\");\n            parameters.add(scopeId.intValue());\n        }\n        if (startTB != 0 && endTB != 0) {\n            sql.append(\" and \").append(AlarmRecord.TIME_BUCKET).append(\" >= ?\");\n            parameters.add(startTB);\n            sql.append(\" and \").append(AlarmRecord.TIME_BUCKET).append(\" <= ?\");\n            parameters.add(endTB);\n        }\n\n        if (!Strings.isNullOrEmpty(keyword)) {\n            sql.append(\" and \").append(AlarmRecord.ALARM_MESSAGE).append(\" like concat('%',?,'%') \");\n            parameters.add(keyword);\n        }\n        sql.append(\" order by \").append(AlarmRecord.START_TIME).append(\" desc \");\n\n        Alarms alarms = new Alarms();\n        try (Connection connection = client.getConnection()) {\n\n            try (ResultSet resultSet = client.executeQuery(connection, \"select count(1) total from (select 1 \" + sql.toString() + \" )\", parameters\n                .toArray(new Object[0]))) {\n                while (resultSet.next()) {\n                    alarms.setTotal(resultSet.getInt(\"total\"));\n                }\n            }\n\n            this.buildLimit(sql, from, limit);\n\n            try (ResultSet resultSet = client.executeQuery(connection, \"select * \" + sql.toString(), parameters.toArray(new Object[0]))) {\n                while (resultSet.next()) {\n                    AlarmMessage message = new AlarmMessage();\n                    message.setId(resultSet.getString(AlarmRecord.ID0));\n                    message.setMessage(resultSet.getString(AlarmRecord.ALARM_MESSAGE));\n                    message.setStartTime(resultSet.getLong(AlarmRecord.START_TIME));\n                    message.setScope(Scope.Finder.valueOf(resultSet.getInt(AlarmRecord.SCOPE)));\n                    message.setScopeId(resultSet.getInt(AlarmRecord.SCOPE));\n\n                    alarms.getMsgs().add(message);\n                }\n            }\n        } catch (SQLException e) {\n            throw new IOException(e);\n        }\n\n        return alarms;\n    }",
  "abstract_func": "@Override\n    public Alarms getAlarm(Integer VAR_0, String VAR_1, int VAR_2, int VAR_3, long VAR_4,\n        long VAR_5) throws IOException {\n        StringBuilder VAR_6 = new StringBuilder();\n        List<Object> VAR_7 = new ArrayList<>(10);\n        VAR_6.append(\"from \").append(VAR_8.INDEX_NAME).append(\" where \");\n        VAR_6.append(\" 1=1 \");\n        if (VAR_9.nonNull(VAR_0)) {\n            VAR_6.append(\" and \").append(VAR_8.SCOPE).append(\" = ?\");\n            VAR_7.add(VAR_0.intValue());\n        }\n        if (VAR_4 != 0 && VAR_5 != 0) {\n            VAR_6.append(\" and \").append(VAR_8.TIME_BUCKET).append(\" >= ?\");\n            VAR_7.add(VAR_4);\n            VAR_6.append(\" and \").append(VAR_8.TIME_BUCKET).append(\" <= ?\");\n            VAR_7.add(VAR_5);\n        }\n\n        if (!VAR_10.isNullOrEmpty(VAR_1)) {\n            VAR_6.append(\" and \").append(VAR_8.ALARM_MESSAGE).append(\" like concat('%',?,'%') \");\n            VAR_7.add(VAR_1);\n        }\n        VAR_6.append(\" order by \").append(VAR_8.START_TIME).append(\" desc \");\n\n        Alarms VAR_11 = new Alarms();\n        try (Connection VAR_12 = VAR_13.getConnection()) {\n\n            try (ResultSet VAR_14 = VAR_13.executeQuery(VAR_12, \"select count(1) total from (select 1 \" + VAR_6.toString() + \" )\", VAR_7\n                .toArray(new Object[0]))) {\n                while (VAR_14.next()) {\n                    VAR_11.setTotal(VAR_14.getInt(\"total\"));\n                }\n            }\n\n            this.buildLimit(VAR_6, VAR_3, VAR_2);\n\n            try (ResultSet VAR_14 = VAR_13.executeQuery(VAR_12, \"select * \" + VAR_6.toString(), VAR_7.toArray(new Object[0]))) {\n                while (VAR_14.next()) {\n                    AlarmMessage VAR_15 = new AlarmMessage();\n                    VAR_15.setId(VAR_14.getString(VAR_8.ID0));\n                    VAR_15.setMessage(VAR_14.getString(VAR_8.ALARM_MESSAGE));\n                    VAR_15.setStartTime(VAR_14.getLong(VAR_8.START_TIME));\n                    VAR_15.setScope(VAR_16.Finder.valueOf(VAR_14.getInt(VAR_8.SCOPE)));\n                    VAR_15.setScopeId(VAR_14.getInt(VAR_8.SCOPE));\n\n                    VAR_11.getMsgs().add(VAR_15);\n                }\n            }\n        } catch (SQLException VAR_17) {\n            throw new IOException(VAR_17);\n        }\n\n        return VAR_11;\n    }",
  "func_graph_path": "apache/skywalking/ddb6d9a5019a9c1fe31c364485a4e4b5066fefc3/H2AlarmQueryDAO.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -17,7 +17,8 @@\n         }\n \n         if (!Strings.isNullOrEmpty(keyword)) {\n-            sql.append(\" and \").append(AlarmRecord.ALARM_MESSAGE).append(\" like '%\").append(keyword).append(\"%' \");\n+            sql.append(\" and \").append(AlarmRecord.ALARM_MESSAGE).append(\" like concat('%',?,'%') \");\n+            parameters.add(keyword);\n         }\n         sql.append(\" order by \").append(AlarmRecord.START_TIME).append(\" desc \");\n ",
  "diff_line_info": {
    "deleted_lines": [
      "            sql.append(\" and \").append(AlarmRecord.ALARM_MESSAGE).append(\" like '%\").append(keyword).append(\"%' \");"
    ],
    "added_lines": [
      "            sql.append(\" and \").append(AlarmRecord.ALARM_MESSAGE).append(\" like concat('%',?,'%') \");",
      "            parameters.add(keyword);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/apache/skywalking/pull/4970",
  "description": {
    "pr_info": {
      "title": "fix fuzzy query sql injection",
      "number": 4970
    },
    "comment": [
      "Please answer these questions before submitting pull request\r\n\r\n- Why submit this pull request?\r\n- [x] Bug fix\r\n- [ ] New feature provided\r\n- [ ] Improve performance\r\n\r\n- Related issues\r\n[#4955](https://github.com/apache/skywalking/issues/4955)",
      "# [Codecov](https://codecov.io/gh/apache/skywalking/pull/4970?src=pr&el=h1) Report\n> Merging [#4970](https://codecov.io/gh/apache/skywalking/pull/4970?src=pr&el=desc) into [master](https://codecov.io/gh/apache/skywalking/commit/cc9ea271a720e8def161a583595f75da9bda77a5&el=desc) will **increase** coverage by `0.00%`.\n> The diff coverage is `0.00%`.\n\n[![Impacted file tree graph](https://codecov.io/gh/apache/skywalking/pull/4970/graphs/tree.svg?width=650&height=150&src=pr&token=qrILxY5yA8)](https://codecov.io/gh/apache/skywalking/pull/4970?src=pr&el=tree)\n\n```diff\n@@            Coverage Diff            @@\n##             master    #4970   +/-   ##\n=========================================\n  Coverage     53.60%   53.61%           \n- Complexity     2940     2942    +2     \n=========================================\n  Files          1392     1392           \n  Lines         30168    30173    +5     \n  Branches       3366     3366           \n=========================================\n+ Hits          16172    16177    +5     \n  Misses        13211    13211           \n  Partials        785      785           \n```\n\n\n| [Impacted Files](https://codecov.io/gh/apache/skywalking/pull/4970?src=pr&el=tree) | Coverage Δ | Complexity Δ | |\n|---|---|---|---|\n| [...er/storage/plugin/jdbc/h2/dao/H2AlarmQueryDAO.java](https://codecov.io/gh/apache/skywalking/pull/4970/diff?src=pr&el=tree#diff-b2FwLXNlcnZlci9zZXJ2ZXItc3RvcmFnZS1wbHVnaW4vc3RvcmFnZS1qZGJjLWhpa2FyaWNwLXBsdWdpbi9zcmMvbWFpbi9qYXZhL29yZy9hcGFjaGUvc2t5d2Fsa2luZy9vYXAvc2VydmVyL3N0b3JhZ2UvcGx1Z2luL2pkYmMvaDIvZGFvL0gyQWxhcm1RdWVyeURBTy5qYXZh) | `6.66% <0.00%> (-0.16%)` | `1.00 <0.00> (ø)` | |\n| [...storage/plugin/jdbc/h2/dao/H2MetadataQueryDAO.java](https://codecov.io/gh/apache/skywalking/pull/4970/diff?src=pr&el=tree#diff-b2FwLXNlcnZlci9zZXJ2ZXItc3RvcmFnZS1wbHVnaW4vc3RvcmFnZS1qZGJjLWhpa2FyaWNwLXBsdWdpbi9zcmMvbWFpbi9qYXZhL29yZy9hcGFjaGUvc2t5d2Fsa2luZy9vYXAvc2VydmVyL3N0b3JhZ2UvcGx1Z2luL2pkYmMvaDIvZGFvL0gyTWV0YWRhdGFRdWVyeURBTy5qYXZh) | `50.00% <0.00%> (-0.69%)` | `12.00 <0.00> (ø)` | |\n| [...er/storage/plugin/jdbc/h2/dao/H2TraceQueryDAO.java](https://codecov.io/gh/apache/skywalking/pull/4970/diff?src=pr&el=tree#diff-b2FwLXNlcnZlci9zZXJ2ZXItc3RvcmFnZS1wbHVnaW4vc3RvcmFnZS1qZGJjLWhpa2FyaWNwLXBsdWdpbi9zcmMvbWFpbi9qYXZhL29yZy9hcGFjaGUvc2t5d2Fsa2luZy9vYXAvc2VydmVyL3N0b3JhZ2UvcGx1Z2luL2pkYmMvaDIvZGFvL0gyVHJhY2VRdWVyeURBTy5qYXZh) | `38.77% <0.00%> (-0.40%)` | `6.00 <0.00> (ø)` | |\n| [.../storage/plugin/jdbc/mysql/MySQLAlarmQueryDAO.java](https://codecov.io/gh/apache/skywalking/pull/4970/diff?src=pr&el=tree#diff-b2FwLXNlcnZlci9zZXJ2ZXItc3RvcmFnZS1wbHVnaW4vc3RvcmFnZS1qZGJjLWhpa2FyaWNwLXBsdWdpbi9zcmMvbWFpbi9qYXZhL29yZy9hcGFjaGUvc2t5d2Fsa2luZy9vYXAvc2VydmVyL3N0b3JhZ2UvcGx1Z2luL2pkYmMvbXlzcWwvTXlTUUxBbGFybVF1ZXJ5REFPLmphdmE=) | `6.81% <0.00%> (-0.16%)` | `1.00 <0.00> (ø)` | |\n| [...r/storage/plugin/influxdb/query/MetadataQuery.java](https://codecov.io/gh/apache/skywalking/pull/4970/diff?src=pr&el=tree#diff-b2FwLXNlcnZlci9zZXJ2ZXItc3RvcmFnZS1wbHVnaW4vc3RvcmFnZS1pbmZsdXhkYi1wbHVnaW4vc3JjL21haW4vamF2YS9vcmcvYXBhY2hlL3NreXdhbGtpbmcvb2FwL3NlcnZlci9zdG9yYWdlL3BsdWdpbi9pbmZsdXhkYi9xdWVyeS9NZXRhZGF0YVF1ZXJ5LmphdmE=) | `60.00% <0.00%> (+0.76%)` | `12.00% <0.00%> (+1.00%)` | |\n| [...er/storage/plugin/influxdb/query/MetricsQuery.java](https://codecov.io/gh/apache/skywalking/pull/4970/diff?src=pr&el=tree#diff-b2FwLXNlcnZlci9zZXJ2ZXItc3RvcmFnZS1wbHVnaW4vc3RvcmFnZS1pbmZsdXhkYi1wbHVnaW4vc3JjL21haW4vamF2YS9vcmcvYXBhY2hlL3NreXdhbGtpbmcvb2FwL3NlcnZlci9zdG9yYWdlL3BsdWdpbi9pbmZsdXhkYi9xdWVyeS9NZXRyaWNzUXVlcnkuamF2YQ==) | `51.66% <0.00%> (+0.83%)` | `11.00% <0.00%> (+1.00%)` | |\n| [...g/oap/server/telemetry/prometheus/BaseMetrics.java](https://codecov.io/gh/apache/skywalking/pull/4970/diff?src=pr&el=tree#diff-b2FwLXNlcnZlci9zZXJ2ZXItdGVsZW1ldHJ5L3RlbGVtZXRyeS1wcm9tZXRoZXVzL3NyYy9tYWluL2phdmEvb3JnL2FwYWNoZS9za3l3YWxraW5nL29hcC9zZXJ2ZXIvdGVsZW1ldHJ5L3Byb21ldGhldXMvQmFzZU1ldHJpY3MuamF2YQ==) | `87.09% <0.00%> (+3.22%)` | `9.00% <0.00%> (+1.00%)` | |\n| [...core/analysis/manual/instance/InstanceTraffic.java](https://codecov.io/gh/apache/skywalking/pull/4970/diff?src=pr&el=tree#diff-b2FwLXNlcnZlci9zZXJ2ZXItY29yZS9zcmMvbWFpbi9qYXZhL29yZy9hcGFjaGUvc2t5d2Fsa2luZy9vYXAvc2VydmVyL2NvcmUvYW5hbHlzaXMvbWFudWFsL2luc3RhbmNlL0luc3RhbmNlVHJhZmZpYy5qYXZh) | `60.00% <0.00%> (+4.00%)` | `7.00% <0.00%> (ø%)` | |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/apache/skywalking/pull/4970?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/apache/skywalking/pull/4970?src=pr&el=footer). Last update [cc9ea27...2acc6bd](https://codecov.io/gh/apache/skywalking/pull/4970?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n",
      "Look like e2e don't passed.",
      "> Look like e2e don't passed.\r\n\r\nConnection to the maven repo is reset, although I've retried several times, should not be related to the changes",
      "@JaredTan95 As these two fuzzy query not included in the e2e, please check locally."
    ]
  },
  "Bug Filter": "Security Vulnerability Fix\n\nConfidence Score: 1.0",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "\n\n**Final Output:**\n\nAnalysis: The patch addresses an SQL injection vulnerability by replacing unsafe string concatenation with a parameterized query, preventing potential unauthorized access and data breaches.\n\nFinal Classification: Security Vulnerability Fix\n\nConfidence Score: 1.0"
}