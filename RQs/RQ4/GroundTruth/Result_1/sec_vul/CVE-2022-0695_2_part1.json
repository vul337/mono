{
  "cve_id": "CVE-2022-0695",
  "cwe_ids": [
    "CWE-400"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "radareorg/radare2",
  "commit_msg": "Fix DoS in PE/QNX/DYLDCACHE/PSX parsers ##crash\n\n* Reported by lazymio\n* Reproducer: AAA4AAAAAB4=",
  "commit_hash": "634b886e84a5c568d243e744becc6b3223e089cf",
  "git_url": "https://github.com/radareorg/radare2/commit/634b886e84a5c568d243e744becc6b3223e089cf",
  "file_path": "libr/bin/format/pe/pe.c",
  "func_name": "Pe_r_bin_pe_parse_var",
  "func_before": "static Var* Pe_r_bin_pe_parse_var(RBinPEObj* pe, PE_DWord* curAddr) {\n\tVar* var = calloc (1, sizeof (*var));\n\tif (!var) {\n\t\tpe_printf (\"Warning: calloc (Var)\\n\");\n\t\treturn NULL;\n\t}\n\tif ((var->wLength = r_buf_read_le16_at (pe->b, *curAddr)) == UT16_MAX) {\n\t\tpe_printf (\"Warning: read (Var wLength)\\n\");\n\t\tfree_Var (var);\n\t\treturn NULL;\n\t}\n\t*curAddr += sizeof (var->wLength);\n\tif ((var->wValueLength = r_buf_read_le16_at (pe->b, *curAddr)) == UT16_MAX) {\n\t\tpe_printf (\"Warning: read (Var wValueLength)\\n\");\n\t\tfree_Var (var);\n\t\treturn NULL;\n\t}\n\t*curAddr += sizeof (var->wValueLength);\n\tif ((var->wType = r_buf_read_le16_at (pe->b, *curAddr)) == UT16_MAX) {\n\t\tpe_printf (\"Warning: read (Var wType)\\n\");\n\t\tfree_Var (var);\n\t\treturn NULL;\n\t}\n\t*curAddr += sizeof (var->wType);\n\tif (var->wType != 0 && var->wType != 1) {\n\t\tpe_printf (\"Warning: check (Var wType)\\n\");\n\t\tfree_Var (var);\n\t\treturn NULL;\n\t}\n\n\tvar->szKey = (ut16*) malloc (UT16_ALIGN (TRANSLATION_UTF_16_LEN));  //L\"Translation\"\n\tif (!var->szKey) {\n\t\tpe_printf (\"Warning: malloc (Var szKey)\\n\");\n\t\tfree_Var (var);\n\t\treturn NULL;\n\t}\n\tif (r_buf_read_at (pe->b, *curAddr, (ut8*) var->szKey, TRANSLATION_UTF_16_LEN) < 1) {\n\t\tpe_printf (\"Warning: read (Var szKey)\\n\");\n\t\tfree_Var (var);\n\t\treturn NULL;\n\t}\n\t*curAddr += TRANSLATION_UTF_16_LEN;\n\tif (memcmp (var->szKey, TRANSLATION_UTF_16, TRANSLATION_UTF_16_LEN)) {\n\t\tpe_printf (\"Warning: check (Var szKey)\\n\");\n\t\tfree_Var (var);\n\t\treturn NULL;\n\t}\n\talign32 (*curAddr);\n\tvar->numOfValues = var->wValueLength / 4;\n\tif (!var->numOfValues) {\n\t\tpe_printf (\"Warning: check (Var numOfValues)\\n\");\n\t\tfree_Var (var);\n\t\treturn NULL;\n\t}\n\tvar->Value = (ut32*) malloc (var->wValueLength);\n\tif (!var->Value) {\n\t\tpe_printf (\"Warning: malloc (Var Value)\\n\");\n\t\tfree_Var (var);\n\t\treturn NULL;\n\t}\n\tif (r_buf_read_at (pe->b, *curAddr, (ut8*) var->Value, var->wValueLength) != var->wValueLength) {\n\t\tpe_printf (\"Warning: read (Var Value)\\n\");\n\t\tfree_Var (var);\n\t\treturn NULL;\n\t}\n\t*curAddr += var->wValueLength;\n\treturn var;\n}",
  "abstract_func_before": "static Var* Pe_r_bin_pe_parse_var(RBinPEObj* VAR_0, PE_DWord* VAR_1) {\n\tVar* VAR_2 = calloc (1, sizeof (*VAR_2));\n\tif (!VAR_2) {\n\t\tpe_printf (\"Warning: calloc (Var)\\n\");\n\t\treturn NULL;\n\t}\n\tif ((VAR_2->wLength = r_buf_read_le16_at (VAR_0->b, *VAR_1)) == VAR_3) {\n\t\tpe_printf (\"Warning: read (Var wLength)\\n\");\n\t\tfree_Var (VAR_2);\n\t\treturn NULL;\n\t}\n\t*VAR_1 += sizeof (VAR_2->wLength);\n\tif ((VAR_2->wValueLength = r_buf_read_le16_at (VAR_0->b, *VAR_1)) == VAR_3) {\n\t\tpe_printf (\"Warning: read (Var wValueLength)\\n\");\n\t\tfree_Var (VAR_2);\n\t\treturn NULL;\n\t}\n\t*VAR_1 += sizeof (VAR_2->wValueLength);\n\tif ((VAR_2->wType = r_buf_read_le16_at (VAR_0->b, *VAR_1)) == VAR_3) {\n\t\tpe_printf (\"Warning: read (Var wType)\\n\");\n\t\tfree_Var (VAR_2);\n\t\treturn NULL;\n\t}\n\t*VAR_1 += sizeof (VAR_2->wType);\n\tif (VAR_2->wType != 0 && VAR_2->wType != 1) {\n\t\tpe_printf (\"Warning: check (Var wType)\\n\");\n\t\tfree_Var (VAR_2);\n\t\treturn NULL;\n\t}\n\n\tVAR_2->szKey = (ut16*) malloc (UT16_ALIGN (VAR_4));  /* COMMENT_0 */\n\tif (!VAR_2->szKey) {\n\t\tpe_printf (\"Warning: malloc (Var szKey)\\n\");\n\t\tfree_Var (VAR_2);\n\t\treturn NULL;\n\t}\n\tif (r_buf_read_at (VAR_0->b, *VAR_1, (ut8*) VAR_2->szKey, VAR_4) < 1) {\n\t\tpe_printf (\"Warning: read (Var szKey)\\n\");\n\t\tfree_Var (VAR_2);\n\t\treturn NULL;\n\t}\n\t*VAR_1 += VAR_4;\n\tif (memcmp (VAR_2->szKey, VAR_5, VAR_4)) {\n\t\tpe_printf (\"Warning: check (Var szKey)\\n\");\n\t\tfree_Var (VAR_2);\n\t\treturn NULL;\n\t}\n\talign32 (*VAR_1);\n\tVAR_2->numOfValues = VAR_2->wValueLength / 4;\n\tif (!VAR_2->numOfValues) {\n\t\tpe_printf (\"Warning: check (Var numOfValues)\\n\");\n\t\tfree_Var (VAR_2);\n\t\treturn NULL;\n\t}\n\tVAR_2->Value = (ut32*) malloc (VAR_2->wValueLength);\n\tif (!VAR_2->Value) {\n\t\tpe_printf (\"Warning: malloc (Var Value)\\n\");\n\t\tfree_Var (VAR_2);\n\t\treturn NULL;\n\t}\n\tif (r_buf_read_at (VAR_0->b, *VAR_1, (ut8*) VAR_2->Value, VAR_2->wValueLength) != VAR_2->wValueLength) {\n\t\tpe_printf (\"Warning: read (Var Value)\\n\");\n\t\tfree_Var (VAR_2);\n\t\treturn NULL;\n\t}\n\t*VAR_1 += VAR_2->wValueLength;\n\treturn VAR_2;\n}",
  "func_graph_path_before": "radareorg/radare2/634b886e84a5c568d243e744becc6b3223e089cf/pe.c/vul/before/2.json",
  "func": "static Var* Pe_r_bin_pe_parse_var(RBinPEObj* pe, PE_DWord* curAddr) {\n\tVar* var = calloc (1, sizeof (*var));\n\tif (!var) {\n\t\tpe_printf (\"Warning: calloc (Var)\\n\");\n\t\treturn NULL;\n\t}\n\tif ((var->wLength = r_buf_read_le16_at (pe->b, *curAddr)) == UT16_MAX) {\n\t\tpe_printf (\"Warning: read (Var wLength)\\n\");\n\t\tfree_Var (var);\n\t\treturn NULL;\n\t}\n\t*curAddr += sizeof (var->wLength);\n\tif ((var->wValueLength = r_buf_read_le16_at (pe->b, *curAddr)) == UT16_MAX) {\n\t\tpe_printf (\"Warning: read (Var wValueLength)\\n\");\n\t\tfree_Var (var);\n\t\treturn NULL;\n\t}\n\t*curAddr += sizeof (var->wValueLength);\n\tif ((var->wType = r_buf_read_le16_at (pe->b, *curAddr)) == UT16_MAX) {\n\t\tpe_printf (\"Warning: read (Var wType)\\n\");\n\t\tfree_Var (var);\n\t\treturn NULL;\n\t}\n\t*curAddr += sizeof (var->wType);\n\tif (var->wType != 0 && var->wType != 1) {\n\t\tpe_printf (\"Warning: check (Var wType)\\n\");\n\t\tfree_Var (var);\n\t\treturn NULL;\n\t}\n\n\tvar->szKey = (ut16*) malloc (UT16_ALIGN (TRANSLATION_UTF_16_LEN));  //L\"Translation\"\n\tif (!var->szKey) {\n\t\tpe_printf (\"Warning: malloc (Var szKey)\\n\");\n\t\tfree_Var (var);\n\t\treturn NULL;\n\t}\n\tif (r_buf_read_at (pe->b, *curAddr, (ut8*) var->szKey, TRANSLATION_UTF_16_LEN) != TRANSLATION_UTF_16_LEN) {\n\t\tpe_printf (\"Warning: read (Var szKey)\\n\");\n\t\tfree_Var (var);\n\t\treturn NULL;\n\t}\n\t*curAddr += TRANSLATION_UTF_16_LEN;\n\tif (memcmp (var->szKey, TRANSLATION_UTF_16, TRANSLATION_UTF_16_LEN)) {\n\t\tpe_printf (\"Warning: check (Var szKey)\\n\");\n\t\tfree_Var (var);\n\t\treturn NULL;\n\t}\n\talign32 (*curAddr);\n\tvar->numOfValues = var->wValueLength / 4;\n\tif (!var->numOfValues) {\n\t\tpe_printf (\"Warning: check (Var numOfValues)\\n\");\n\t\tfree_Var (var);\n\t\treturn NULL;\n\t}\n\tvar->Value = (ut32*) malloc (var->wValueLength);\n\tif (!var->Value) {\n\t\tpe_printf (\"Warning: malloc (Var Value)\\n\");\n\t\tfree_Var (var);\n\t\treturn NULL;\n\t}\n\tif (r_buf_read_at (pe->b, *curAddr, (ut8*) var->Value, var->wValueLength) != var->wValueLength) {\n\t\tpe_printf (\"Warning: read (Var Value)\\n\");\n\t\tfree_Var (var);\n\t\treturn NULL;\n\t}\n\t*curAddr += var->wValueLength;\n\treturn var;\n}",
  "abstract_func": "static Var* Pe_r_bin_pe_parse_var(RBinPEObj* VAR_0, PE_DWord* VAR_1) {\n\tVar* VAR_2 = calloc (1, sizeof (*VAR_2));\n\tif (!VAR_2) {\n\t\tpe_printf (\"Warning: calloc (Var)\\n\");\n\t\treturn NULL;\n\t}\n\tif ((VAR_2->wLength = r_buf_read_le16_at (VAR_0->b, *VAR_1)) == VAR_3) {\n\t\tpe_printf (\"Warning: read (Var wLength)\\n\");\n\t\tfree_Var (VAR_2);\n\t\treturn NULL;\n\t}\n\t*VAR_1 += sizeof (VAR_2->wLength);\n\tif ((VAR_2->wValueLength = r_buf_read_le16_at (VAR_0->b, *VAR_1)) == VAR_3) {\n\t\tpe_printf (\"Warning: read (Var wValueLength)\\n\");\n\t\tfree_Var (VAR_2);\n\t\treturn NULL;\n\t}\n\t*VAR_1 += sizeof (VAR_2->wValueLength);\n\tif ((VAR_2->wType = r_buf_read_le16_at (VAR_0->b, *VAR_1)) == VAR_3) {\n\t\tpe_printf (\"Warning: read (Var wType)\\n\");\n\t\tfree_Var (VAR_2);\n\t\treturn NULL;\n\t}\n\t*VAR_1 += sizeof (VAR_2->wType);\n\tif (VAR_2->wType != 0 && VAR_2->wType != 1) {\n\t\tpe_printf (\"Warning: check (Var wType)\\n\");\n\t\tfree_Var (VAR_2);\n\t\treturn NULL;\n\t}\n\n\tVAR_2->szKey = (ut16*) malloc (UT16_ALIGN (VAR_4));  /* COMMENT_0 */\n\tif (!VAR_2->szKey) {\n\t\tpe_printf (\"Warning: malloc (Var szKey)\\n\");\n\t\tfree_Var (VAR_2);\n\t\treturn NULL;\n\t}\n\tif (r_buf_read_at (VAR_0->b, *VAR_1, (ut8*) VAR_2->szKey, VAR_4) != VAR_4) {\n\t\tpe_printf (\"Warning: read (Var szKey)\\n\");\n\t\tfree_Var (VAR_2);\n\t\treturn NULL;\n\t}\n\t*VAR_1 += VAR_4;\n\tif (memcmp (VAR_2->szKey, VAR_5, VAR_4)) {\n\t\tpe_printf (\"Warning: check (Var szKey)\\n\");\n\t\tfree_Var (VAR_2);\n\t\treturn NULL;\n\t}\n\talign32 (*VAR_1);\n\tVAR_2->numOfValues = VAR_2->wValueLength / 4;\n\tif (!VAR_2->numOfValues) {\n\t\tpe_printf (\"Warning: check (Var numOfValues)\\n\");\n\t\tfree_Var (VAR_2);\n\t\treturn NULL;\n\t}\n\tVAR_2->Value = (ut32*) malloc (VAR_2->wValueLength);\n\tif (!VAR_2->Value) {\n\t\tpe_printf (\"Warning: malloc (Var Value)\\n\");\n\t\tfree_Var (VAR_2);\n\t\treturn NULL;\n\t}\n\tif (r_buf_read_at (VAR_0->b, *VAR_1, (ut8*) VAR_2->Value, VAR_2->wValueLength) != VAR_2->wValueLength) {\n\t\tpe_printf (\"Warning: read (Var Value)\\n\");\n\t\tfree_Var (VAR_2);\n\t\treturn NULL;\n\t}\n\t*VAR_1 += VAR_2->wValueLength;\n\treturn VAR_2;\n}",
  "func_graph_path": "radareorg/radare2/634b886e84a5c568d243e744becc6b3223e089cf/pe.c/vul/after/2.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -34,7 +34,7 @@\n \t\tfree_Var (var);\n \t\treturn NULL;\n \t}\n-\tif (r_buf_read_at (pe->b, *curAddr, (ut8*) var->szKey, TRANSLATION_UTF_16_LEN) < 1) {\n+\tif (r_buf_read_at (pe->b, *curAddr, (ut8*) var->szKey, TRANSLATION_UTF_16_LEN) != TRANSLATION_UTF_16_LEN) {\n \t\tpe_printf (\"Warning: read (Var szKey)\\n\");\n \t\tfree_Var (var);\n \t\treturn NULL;",
  "diff_line_info": {
    "deleted_lines": [
      "\tif (r_buf_read_at (pe->b, *curAddr, (ut8*) var->szKey, TRANSLATION_UTF_16_LEN) < 1) {"
    ],
    "added_lines": [
      "\tif (r_buf_read_at (pe->b, *curAddr, (ut8*) var->szKey, TRANSLATION_UTF_16_LEN) != TRANSLATION_UTF_16_LEN) {"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/radareorg/radare2/pull/19747",
  "description": {
    "pr_info": {
      "title": "Fix DoS in PE/QNX/DYLDCACHE/PSX parsers ##crash",
      "number": 19747
    },
    "comment": [
      "* Reported by lazymio\r\n* Reproducer: AAA4AAAAAB4=\r\n\r\n<!--\r\nRead https://github.com/radareorg/radare2/blob/master/DEVELOPERS.md\r\n* PR title must be capitalized, concise and use ##tags\r\n* If the PR is fixing a ticket use 'Fix #1234 - ..' in the commit message\r\n* Follow the coding style, add tests and documentation if necessary\r\n-->\r\n\r\n- [ ] Mark this if you consider it ready to merge\r\n- [ ] I've added tests (optional)\r\n- [ ] I wrote some lines in the [book](https://github.com/radareorg/radare2book) (optional)\r\n\r\n**Description**\r\n\r\n<!-- explain your changes if necessary -->\r\n"
    ]
  },
  "Bug Filter": "** Security Vulnerability Fix  \n**Confidence Score:** 0.95",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "\n\nThe patch addresses a Denial of Service vulnerability by ensuring the correct number of bytes are read, preventing crashes due to insufficient data.\n\n**Final Classification:** Security Vulnerability Fix  \n**Confidence Score:** 0.95"
}