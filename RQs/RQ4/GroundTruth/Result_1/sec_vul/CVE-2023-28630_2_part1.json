{
  "cve_id": "CVE-2023-28630",
  "cwe_ids": [
    "CWE-532"
  ],
  "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:H/UI:N/S:U/C:H/I:N/A:N",
  "cvss_is_v3": true,
  "repo_name": "gocd",
  "commit_msg": "Improve error messages on failure to launch backup process\n\nztexec can include env vars in the error message which we don't want in this case.",
  "commit_hash": "6545481e7b36817dd6033bf614585a8db242070d",
  "git_url": "https://github.com/gocd/gocd/commit/6545481e7b36817dd6033bf614585a8db242070d",
  "file_path": "db-support/db-support-postgresql/src/main/java/com/thoughtworks/go/server/database/pg/PostgresqlBackupProcessor.java",
  "func_name": "createProcessExecutor",
  "func_before": "ProcessExecutor createProcessExecutor(File targetDir, DbProperties dbProperties) {\n        Properties connectionProperties = dbProperties.connectionProperties();\n        Properties pgProperties = Driver.parseURL(dbProperties.url(), connectionProperties);\n\n        ArrayList<String> argv = new ArrayList<>();\n        LinkedHashMap<String, String> env = new LinkedHashMap<>();\n        if (isNotBlank(dbProperties.password())) {\n            env.put(\"PGPASSWORD\", dbProperties.password());\n        }\n\n        // override with any user specified environment\n        env.putAll(dbProperties.extraBackupEnv());\n\n        String dbName = pgProperties.getProperty(\"PGDBNAME\");\n        argv.add(\"pg_dump\");\n        argv.add(\"--host=\" + pgProperties.getProperty(\"PGHOST\"));\n        argv.add(\"--port=\" + pgProperties.getProperty(\"PGPORT\"));\n        argv.add(\"--dbname=\" + dbName);\n        if (isNotBlank(dbProperties.user())) {\n            argv.add(\"--username=\" + dbProperties.user());\n        }\n        argv.add(\"--no-password\");\n        // append any user specified args for pg_dump\n        if (isNotBlank(dbProperties.extraBackupCommandArgs())) {\n            Collections.addAll(argv, Commandline.translateCommandline(dbProperties.extraBackupCommandArgs()));\n        }\n        argv.add(\"--file=\" + new File(targetDir, \"db.\" + dbName));\n        ProcessExecutor processExecutor = new ProcessExecutor();\n        processExecutor.redirectOutputAlsoTo(Slf4jStream.of(getClass()).asDebug());\n        processExecutor.redirectErrorAlsoTo(Slf4jStream.of(getClass()).asDebug());\n        processExecutor.environment(env);\n        processExecutor.command(argv);\n        return processExecutor;\n    }",
  "abstract_func_before": "ProcessExecutor createProcessExecutor(File VAR_0, DbProperties VAR_1) {\n        Properties VAR_2 = VAR_1.connectionProperties();\n        Properties VAR_3 = VAR_4.parseURL(VAR_1.url(), VAR_2);\n\n        ArrayList<String> VAR_5 = new ArrayList<>();\n        LinkedHashMap<String, String> VAR_6 = new LinkedHashMap<>();\n        if (isNotBlank(VAR_1.password())) {\n            VAR_6.put(\"PGPASSWORD\", VAR_1.password());\n        }\n\n        /* COMMENT_0 */\n        VAR_6.putAll(VAR_1.extraBackupEnv());\n\n        String VAR_7 = VAR_3.getProperty(\"PGDBNAME\");\n        VAR_5.add(\"pg_dump\");\n        VAR_5.add(\"--host=\" + VAR_3.getProperty(\"PGHOST\"));\n        VAR_5.add(\"--port=\" + VAR_3.getProperty(\"PGPORT\"));\n        VAR_5.add(\"--dbname=\" + VAR_7);\n        if (isNotBlank(VAR_1.user())) {\n            VAR_5.add(\"--username=\" + VAR_1.user());\n        }\n        VAR_5.add(\"--no-password\");\n        /* COMMENT_1 */\n        if (isNotBlank(VAR_1.extraBackupCommandArgs())) {\n            VAR_8.addAll(VAR_5, VAR_9.translateCommandline(VAR_1.extraBackupCommandArgs()));\n        }\n        VAR_5.add(\"--file=\" + new File(VAR_0, \"db.\" + VAR_7));\n        ProcessExecutor VAR_10 = new ProcessExecutor();\n        VAR_10.redirectOutputAlsoTo(VAR_11.of(getClass()).asDebug());\n        VAR_10.redirectErrorAlsoTo(VAR_11.of(getClass()).asDebug());\n        VAR_10.environment(VAR_6);\n        VAR_10.command(VAR_5);\n        return VAR_10;\n    }",
  "func_graph_path_before": "gocd/6545481e7b36817dd6033bf614585a8db242070d/PostgresqlBackupProcessor.java/vul/before/1.json",
  "func": "ProcessExecutor createProcessExecutor(File targetDir, DbProperties dbProperties) {\n        Properties connectionProperties = dbProperties.connectionProperties();\n        Properties pgProperties = Driver.parseURL(dbProperties.url(), connectionProperties);\n\n        Map<String, String> env = new LinkedHashMap<>();\n        if (isNotBlank(dbProperties.password())) {\n            env.put(\"PGPASSWORD\", dbProperties.password());\n        }\n\n        // override with any user specified environment\n        env.putAll(dbProperties.extraBackupEnv());\n\n        List<String> argv = new ArrayList<>();\n        argv.add(COMMAND);\n\n        String dbName = pgProperties.getProperty(\"PGDBNAME\");\n        argv.add(\"--host=\" + pgProperties.getProperty(\"PGHOST\"));\n        argv.add(\"--port=\" + pgProperties.getProperty(\"PGPORT\"));\n        argv.add(\"--dbname=\" + dbName);\n        if (isNotBlank(dbProperties.user())) {\n            argv.add(\"--username=\" + dbProperties.user());\n        }\n        argv.add(\"--no-password\");\n        // append any user specified args for pg_dump\n        if (isNotBlank(dbProperties.extraBackupCommandArgs())) {\n            Collections.addAll(argv, Commandline.translateCommandline(dbProperties.extraBackupCommandArgs()));\n        }\n        argv.add(\"--file=\" + new File(targetDir, \"db.\" + dbName));\n        ProcessExecutor processExecutor = new ProcessExecutor();\n        processExecutor.redirectOutputAlsoTo(Slf4jStream.of(getClass()).asDebug());\n        processExecutor.redirectErrorAlsoTo(Slf4jStream.of(getClass()).asDebug());\n        processExecutor.environment(env);\n        processExecutor.command(argv);\n        return processExecutor;\n    }",
  "abstract_func": "ProcessExecutor createProcessExecutor(File VAR_0, DbProperties VAR_1) {\n        Properties VAR_2 = VAR_1.connectionProperties();\n        Properties VAR_3 = VAR_4.parseURL(VAR_1.url(), VAR_2);\n\n        Map<String, String> VAR_5 = new LinkedHashMap<>();\n        if (isNotBlank(VAR_1.password())) {\n            VAR_5.put(\"PGPASSWORD\", VAR_1.password());\n        }\n\n        /* COMMENT_0 */\n        VAR_5.putAll(VAR_1.extraBackupEnv());\n\n        List<String> VAR_6 = new ArrayList<>();\n        VAR_6.add(VAR_7);\n\n        String VAR_8 = VAR_3.getProperty(\"PGDBNAME\");\n        VAR_6.add(\"--host=\" + VAR_3.getProperty(\"PGHOST\"));\n        VAR_6.add(\"--port=\" + VAR_3.getProperty(\"PGPORT\"));\n        VAR_6.add(\"--dbname=\" + VAR_8);\n        if (isNotBlank(VAR_1.user())) {\n            VAR_6.add(\"--username=\" + VAR_1.user());\n        }\n        VAR_6.add(\"--no-password\");\n        /* COMMENT_1 */\n        if (isNotBlank(VAR_1.extraBackupCommandArgs())) {\n            VAR_9.addAll(VAR_6, VAR_10.translateCommandline(VAR_1.extraBackupCommandArgs()));\n        }\n        VAR_6.add(\"--file=\" + new File(VAR_0, \"db.\" + VAR_8));\n        ProcessExecutor VAR_11 = new ProcessExecutor();\n        VAR_11.redirectOutputAlsoTo(VAR_12.of(getClass()).asDebug());\n        VAR_11.redirectErrorAlsoTo(VAR_12.of(getClass()).asDebug());\n        VAR_11.environment(VAR_5);\n        VAR_11.command(VAR_6);\n        return VAR_11;\n    }",
  "func_graph_path": "gocd/6545481e7b36817dd6033bf614585a8db242070d/PostgresqlBackupProcessor.java/vul/after/1.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -2,8 +2,7 @@\n         Properties connectionProperties = dbProperties.connectionProperties();\n         Properties pgProperties = Driver.parseURL(dbProperties.url(), connectionProperties);\n \n-        ArrayList<String> argv = new ArrayList<>();\n-        LinkedHashMap<String, String> env = new LinkedHashMap<>();\n+        Map<String, String> env = new LinkedHashMap<>();\n         if (isNotBlank(dbProperties.password())) {\n             env.put(\"PGPASSWORD\", dbProperties.password());\n         }\n@@ -11,8 +10,10 @@\n         // override with any user specified environment\n         env.putAll(dbProperties.extraBackupEnv());\n \n+        List<String> argv = new ArrayList<>();\n+        argv.add(COMMAND);\n+\n         String dbName = pgProperties.getProperty(\"PGDBNAME\");\n-        argv.add(\"pg_dump\");\n         argv.add(\"--host=\" + pgProperties.getProperty(\"PGHOST\"));\n         argv.add(\"--port=\" + pgProperties.getProperty(\"PGPORT\"));\n         argv.add(\"--dbname=\" + dbName);",
  "diff_line_info": {
    "deleted_lines": [
      "        ArrayList<String> argv = new ArrayList<>();",
      "        LinkedHashMap<String, String> env = new LinkedHashMap<>();",
      "        argv.add(\"pg_dump\");"
    ],
    "added_lines": [
      "        Map<String, String> env = new LinkedHashMap<>();",
      "        List<String> argv = new ArrayList<>();",
      "        argv.add(COMMAND);",
      ""
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/gocd/gocd/pull/11047",
  "description": {
    "pr_info": {
      "title": "Improve error messages on failure to launch DB backup process",
      "number": 11047
    },
    "comment": [
      "ztexec can include env vars in the error message of the thrown exception which we don't want."
    ]
  },
  "Bug Filter": "** Security Vulnerability Fix  \n**Confidence Score:** 0.85",
  "Bug Filter Confidence": 0.85,
  "Bug Filter Response": "\n\nThe patch addresses a security concern by preventing sensitive environment variables from being exposed in error messages, thus mitigating an information disclosure vulnerability.\n\n**Final Classification:** Security Vulnerability Fix  \n**Confidence Score:** 0.85"
}