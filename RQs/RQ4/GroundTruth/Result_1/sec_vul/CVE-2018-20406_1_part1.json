{
  "cve_id": "CVE-2018-20406",
  "cwe_ids": [
    "CWE-190"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "python/cpython",
  "commit_msg": "closes bpo-34656: Avoid relying on signed overflow in _pickle memos. (GH-9261)",
  "commit_hash": "a4ae828ee416a66d8c7bf5ee71d653c2cc6a26dd",
  "git_url": "https://github.com/python/cpython/commit/a4ae828ee416a66d8c7bf5ee71d653c2cc6a26dd",
  "file_path": "Modules/_pickle.c",
  "func_name": "_pickle_UnpicklerMemoProxy_copy_impl",
  "func_before": "static PyObject *\n_pickle_UnpicklerMemoProxy_copy_impl(UnpicklerMemoProxyObject *self)\n/*[clinic end generated code: output=e12af7e9bc1e4c77 input=97769247ce032c1d]*/\n{\n    Py_ssize_t i;\n    PyObject *new_memo = PyDict_New();\n    if (new_memo == NULL)\n        return NULL;\n\n    for (i = 0; i < self->unpickler->memo_size; i++) {\n        int status;\n        PyObject *key, *value;\n\n        value = self->unpickler->memo[i];\n        if (value == NULL)\n            continue;\n\n        key = PyLong_FromSsize_t(i);\n        if (key == NULL)\n            goto error;\n        status = PyDict_SetItem(new_memo, key, value);\n        Py_DECREF(key);\n        if (status < 0)\n            goto error;\n    }\n    return new_memo;\n\nerror:\n    Py_DECREF(new_memo);\n    return NULL;\n}",
  "abstract_func_before": "static PyObject *\n_pickle_UnpicklerMemoProxy_copy_impl(UnpicklerMemoProxyObject *VAR_0)\n/* COMMENT_0 */\n{\n    Py_ssize_t VAR_1;\n    PyObject *VAR_2 = PyDict_New();\n    if (VAR_2 == NULL)\n        return NULL;\n\n    for (VAR_1 = 0; VAR_1 < VAR_0->unpickler->memo_size; VAR_1++) {\n        int VAR_3;\n        PyObject *VAR_4, *VAR_5;\n\n        VAR_5 = VAR_0->unpickler->memo[VAR_1];\n        if (VAR_5 == NULL)\n            continue;\n\n        VAR_4 = PyLong_FromSsize_t(VAR_1);\n        if (VAR_4 == NULL)\n            goto error;\n        VAR_3 = PyDict_SetItem(VAR_2, VAR_4, VAR_5);\n        Py_DECREF(VAR_4);\n        if (VAR_3 < 0)\n            goto error;\n    }\n    return VAR_2;\n\nerror:\n    Py_DECREF(VAR_2);\n    return NULL;\n}",
  "func_graph_path_before": "python/cpython/a4ae828ee416a66d8c7bf5ee71d653c2cc6a26dd/_pickle.c/vul/before/2.json",
  "func": "static PyObject *\n_pickle_UnpicklerMemoProxy_copy_impl(UnpicklerMemoProxyObject *self)\n/*[clinic end generated code: output=e12af7e9bc1e4c77 input=97769247ce032c1d]*/\n{\n    size_t i;\n    PyObject *new_memo = PyDict_New();\n    if (new_memo == NULL)\n        return NULL;\n\n    for (i = 0; i < self->unpickler->memo_size; i++) {\n        int status;\n        PyObject *key, *value;\n\n        value = self->unpickler->memo[i];\n        if (value == NULL)\n            continue;\n\n        key = PyLong_FromSsize_t(i);\n        if (key == NULL)\n            goto error;\n        status = PyDict_SetItem(new_memo, key, value);\n        Py_DECREF(key);\n        if (status < 0)\n            goto error;\n    }\n    return new_memo;\n\nerror:\n    Py_DECREF(new_memo);\n    return NULL;\n}",
  "abstract_func": "static PyObject *\n_pickle_UnpicklerMemoProxy_copy_impl(UnpicklerMemoProxyObject *VAR_0)\n/* COMMENT_0 */\n{\n    size_t VAR_1;\n    PyObject *VAR_2 = PyDict_New();\n    if (VAR_2 == NULL)\n        return NULL;\n\n    for (VAR_1 = 0; VAR_1 < VAR_0->unpickler->memo_size; VAR_1++) {\n        int VAR_3;\n        PyObject *VAR_4, *VAR_5;\n\n        VAR_5 = VAR_0->unpickler->memo[VAR_1];\n        if (VAR_5 == NULL)\n            continue;\n\n        VAR_4 = PyLong_FromSsize_t(VAR_1);\n        if (VAR_4 == NULL)\n            goto error;\n        VAR_3 = PyDict_SetItem(VAR_2, VAR_4, VAR_5);\n        Py_DECREF(VAR_4);\n        if (VAR_3 < 0)\n            goto error;\n    }\n    return VAR_2;\n\nerror:\n    Py_DECREF(VAR_2);\n    return NULL;\n}",
  "func_graph_path": "python/cpython/a4ae828ee416a66d8c7bf5ee71d653c2cc6a26dd/_pickle.c/vul/after/2.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -2,7 +2,7 @@\n _pickle_UnpicklerMemoProxy_copy_impl(UnpicklerMemoProxyObject *self)\n /*[clinic end generated code: output=e12af7e9bc1e4c77 input=97769247ce032c1d]*/\n {\n-    Py_ssize_t i;\n+    size_t i;\n     PyObject *new_memo = PyDict_New();\n     if (new_memo == NULL)\n         return NULL;",
  "diff_line_info": {
    "deleted_lines": [
      "    Py_ssize_t i;"
    ],
    "added_lines": [
      "    size_t i;"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/python/cpython/pull/9261",
  "description": {
    "pr_info": {
      "title": "bpo-34656: Avoid relying on signed overflow in _pickle memos.",
      "number": 9261
    },
    "comment": [
      "<!--\r\nThanks for your contribution!\r\nPlease read this comment in its entirety. It's quite important.\r\n\r\n# Pull Request title\r\n\r\nIt should be in the following format:\r\n\r\n```\r\nbpo-NNNN: Summary of the changes made\r\n```\r\n\r\nWhere: bpo-NNNN refers to the issue number in the https://bugs.python.org.\r\n\r\nMost PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue.\r\n\r\n# Backport Pull Request title\r\n\r\nIf this is a backport PR (PR made against branches other than `master`),\r\nplease ensure that the PR title is in the following format:\r\n\r\n```\r\n[X.Y] <title from the original PR> (GH-NNNN)\r\n```\r\n\r\nWhere: [X.Y] is the branch name, e.g. [3.6].\r\n\r\nGH-NNNN refers to the PR number from `master`.\r\n\r\n-->\r\n\n\n<!-- issue-number: [bpo-1621](https://www.bugs.python.org/issue1621) -->\nhttps://bugs.python.org/issue1621\n<!-- /issue-number -->\n",
      "Thanks @benjaminp for the PR üåÆüéâ.. I'm working now to backport this PR to: 3.6, 3.7.\nüêçüçí‚õèü§ñ ",
      "[GH-9465](https://github.com/python/cpython/pull/9465) is a backport of this pull request to the [3.7 branch](https://github.com/python/cpython/tree/3.7).",
      "[GH-9466](https://github.com/python/cpython/pull/9466) is a backport of this pull request to the [3.6 branch](https://github.com/python/cpython/tree/3.6)."
    ]
  },
  "Bug Filter": "Security Vulnerability Fix\n\nConfidence Score: 0.95",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "\n\n**Final Output:**\n\nAnalysis: The patch addresses a security vulnerability by preventing signed integer overflow in the _pickle module, which could have led to memory corruption or code execution.\n\nFinal Classification: Security Vulnerability Fix\n\nConfidence Score: 0.95"
}