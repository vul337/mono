{
  "cve_id": "CVE-2020-13921",
  "cwe_ids": [
    "CWE-89"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "apache/skywalking",
  "commit_msg": "fix fuzzy query sql injection",
  "commit_hash": "ddb6d9a5019a9c1fe31c364485a4e4b5066fefc3",
  "git_url": "https://github.com/apache/skywalking/commit/ddb6d9a5019a9c1fe31c364485a4e4b5066fefc3",
  "file_path": "oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2TraceQueryDAO.java",
  "func_name": "queryBasicTraces",
  "func_before": "@Override\n    public TraceBrief queryBasicTraces(long startSecondTB,\n                                       long endSecondTB,\n                                       long minDuration,\n                                       long maxDuration,\n                                       String endpointName,\n                                       String serviceId,\n                                       String serviceInstanceId,\n                                       String endpointId,\n                                       String traceId,\n                                       int limit,\n                                       int from,\n                                       TraceState traceState,\n                                       QueryOrder queryOrder) throws IOException {\n        StringBuilder sql = new StringBuilder();\n        List<Object> parameters = new ArrayList<>(10);\n\n        sql.append(\"from \").append(SegmentRecord.INDEX_NAME).append(\" where \");\n        sql.append(\" 1=1 \");\n        if (startSecondTB != 0 && endSecondTB != 0) {\n            sql.append(\" and \").append(SegmentRecord.TIME_BUCKET).append(\" >= ?\");\n            parameters.add(startSecondTB);\n            sql.append(\" and \").append(SegmentRecord.TIME_BUCKET).append(\" <= ?\");\n            parameters.add(endSecondTB);\n        }\n        if (minDuration != 0 || maxDuration != 0) {\n            if (minDuration != 0) {\n                sql.append(\" and \").append(SegmentRecord.LATENCY).append(\" >= ?\");\n                parameters.add(minDuration);\n            }\n            if (maxDuration != 0) {\n                sql.append(\" and \").append(SegmentRecord.LATENCY).append(\" <= ?\");\n                parameters.add(maxDuration);\n            }\n        }\n        if (!Strings.isNullOrEmpty(endpointName)) {\n            sql.append(\" and \").append(SegmentRecord.ENDPOINT_NAME).append(\" like '%\" + endpointName + \"%'\");\n        }\n        if (StringUtil.isNotEmpty(serviceId)) {\n            sql.append(\" and \").append(SegmentRecord.SERVICE_ID).append(\" = ?\");\n            parameters.add(serviceId);\n        }\n        if (StringUtil.isNotEmpty(serviceInstanceId)) {\n            sql.append(\" and \").append(SegmentRecord.SERVICE_INSTANCE_ID).append(\" = ?\");\n            parameters.add(serviceInstanceId);\n        }\n        if (!Strings.isNullOrEmpty(endpointId)) {\n            sql.append(\" and \").append(SegmentRecord.ENDPOINT_ID).append(\" = ?\");\n            parameters.add(endpointId);\n        }\n        if (!Strings.isNullOrEmpty(traceId)) {\n            sql.append(\" and \").append(SegmentRecord.TRACE_ID).append(\" = ?\");\n            parameters.add(traceId);\n        }\n        switch (traceState) {\n            case ERROR:\n                sql.append(\" and \").append(SegmentRecord.IS_ERROR).append(\" = \").append(BooleanUtils.TRUE);\n                break;\n            case SUCCESS:\n                sql.append(\" and \").append(SegmentRecord.IS_ERROR).append(\" = \").append(BooleanUtils.FALSE);\n                break;\n        }\n        switch (queryOrder) {\n            case BY_START_TIME:\n                sql.append(\" order by \").append(SegmentRecord.START_TIME).append(\" \").append(SortOrder.DESC);\n                break;\n            case BY_DURATION:\n                sql.append(\" order by \").append(SegmentRecord.LATENCY).append(\" \").append(SortOrder.DESC);\n                break;\n        }\n\n        TraceBrief traceBrief = new TraceBrief();\n        try (Connection connection = h2Client.getConnection()) {\n\n            try (ResultSet resultSet = h2Client.executeQuery(connection, buildCountStatement(sql.toString()), parameters\n                .toArray(new Object[0]))) {\n                while (resultSet.next()) {\n                    traceBrief.setTotal(resultSet.getInt(\"total\"));\n                }\n            }\n\n            buildLimit(sql, from, limit);\n\n            try (ResultSet resultSet = h2Client.executeQuery(\n                connection, \"select * \" + sql.toString(), parameters.toArray(new Object[0]))) {\n                while (resultSet.next()) {\n                    BasicTrace basicTrace = new BasicTrace();\n\n                    basicTrace.setSegmentId(resultSet.getString(SegmentRecord.SEGMENT_ID));\n                    basicTrace.setStart(resultSet.getString(SegmentRecord.START_TIME));\n                    basicTrace.getEndpointNames().add(resultSet.getString(SegmentRecord.ENDPOINT_NAME));\n                    basicTrace.setDuration(resultSet.getInt(SegmentRecord.LATENCY));\n                    basicTrace.setError(BooleanUtils.valueToBoolean(resultSet.getInt(SegmentRecord.IS_ERROR)));\n                    String traceIds = resultSet.getString(SegmentRecord.TRACE_ID);\n                    basicTrace.getTraceIds().add(traceIds);\n                    traceBrief.getTraces().add(basicTrace);\n                }\n            }\n        } catch (SQLException e) {\n            throw new IOException(e);\n        }\n\n        return traceBrief;\n    }",
  "abstract_func_before": "@Override\n    public TraceBrief queryBasicTraces(long VAR_0,\n                                       long VAR_1,\n                                       long VAR_2,\n                                       long VAR_3,\n                                       String VAR_4,\n                                       String VAR_5,\n                                       String VAR_6,\n                                       String VAR_7,\n                                       String VAR_8,\n                                       int VAR_9,\n                                       int VAR_10,\n                                       TraceState VAR_11,\n                                       QueryOrder VAR_12) throws IOException {\n        StringBuilder VAR_13 = new StringBuilder();\n        List<Object> VAR_14 = new ArrayList<>(10);\n\n        VAR_13.append(\"from \").append(VAR_15.INDEX_NAME).append(\" where \");\n        VAR_13.append(\" 1=1 \");\n        if (VAR_0 != 0 && VAR_1 != 0) {\n            VAR_13.append(\" and \").append(VAR_15.TIME_BUCKET).append(\" >= ?\");\n            VAR_14.add(VAR_0);\n            VAR_13.append(\" and \").append(VAR_15.TIME_BUCKET).append(\" <= ?\");\n            VAR_14.add(VAR_1);\n        }\n        if (VAR_2 != 0 || VAR_3 != 0) {\n            if (VAR_2 != 0) {\n                VAR_13.append(\" and \").append(VAR_15.LATENCY).append(\" >= ?\");\n                VAR_14.add(VAR_2);\n            }\n            if (VAR_3 != 0) {\n                VAR_13.append(\" and \").append(VAR_15.LATENCY).append(\" <= ?\");\n                VAR_14.add(VAR_3);\n            }\n        }\n        if (!VAR_16.isNullOrEmpty(VAR_4)) {\n            VAR_13.append(\" and \").append(VAR_15.ENDPOINT_NAME).append(\" like '%\" + VAR_4 + \"%'\");\n        }\n        if (VAR_17.isNotEmpty(VAR_5)) {\n            VAR_13.append(\" and \").append(VAR_15.SERVICE_ID).append(\" = ?\");\n            VAR_14.add(VAR_5);\n        }\n        if (VAR_17.isNotEmpty(VAR_6)) {\n            VAR_13.append(\" and \").append(VAR_15.SERVICE_INSTANCE_ID).append(\" = ?\");\n            VAR_14.add(VAR_6);\n        }\n        if (!VAR_16.isNullOrEmpty(VAR_7)) {\n            VAR_13.append(\" and \").append(VAR_15.ENDPOINT_ID).append(\" = ?\");\n            VAR_14.add(VAR_7);\n        }\n        if (!VAR_16.isNullOrEmpty(VAR_8)) {\n            VAR_13.append(\" and \").append(VAR_15.TRACE_ID).append(\" = ?\");\n            VAR_14.add(VAR_8);\n        }\n        switch (VAR_11) {\n            case VAR_18:\n                VAR_13.append(\" and \").append(VAR_15.IS_ERROR).append(\" = \").append(VAR_19.TRUE);\n                break;\n            case VAR_20:\n                VAR_13.append(\" and \").append(VAR_15.IS_ERROR).append(\" = \").append(VAR_19.FALSE);\n                break;\n        }\n        switch (VAR_12) {\n            case VAR_21:\n                VAR_13.append(\" order by \").append(VAR_15.START_TIME).append(\" \").append(VAR_22.DESC);\n                break;\n            case VAR_23:\n                VAR_13.append(\" order by \").append(VAR_15.LATENCY).append(\" \").append(VAR_22.DESC);\n                break;\n        }\n\n        TraceBrief VAR_24 = new TraceBrief();\n        try (Connection VAR_25 = VAR_26.getConnection()) {\n\n            try (ResultSet VAR_27 = VAR_26.executeQuery(VAR_25, buildCountStatement(VAR_13.toString()), VAR_14\n                .toArray(new Object[0]))) {\n                while (VAR_27.next()) {\n                    VAR_24.setTotal(VAR_27.getInt(\"total\"));\n                }\n            }\n\n            buildLimit(VAR_13, VAR_10, VAR_9);\n\n            try (ResultSet VAR_27 = VAR_26.executeQuery(\n                VAR_25, \"select * \" + VAR_13.toString(), VAR_14.toArray(new Object[0]))) {\n                while (VAR_27.next()) {\n                    BasicTrace VAR_28 = new BasicTrace();\n\n                    VAR_28.setSegmentId(VAR_27.getString(VAR_15.SEGMENT_ID));\n                    VAR_28.setStart(VAR_27.getString(VAR_15.START_TIME));\n                    VAR_28.getEndpointNames().add(VAR_27.getString(VAR_15.ENDPOINT_NAME));\n                    VAR_28.setDuration(VAR_27.getInt(VAR_15.LATENCY));\n                    VAR_28.setError(VAR_19.valueToBoolean(VAR_27.getInt(VAR_15.IS_ERROR)));\n                    String VAR_29 = VAR_27.getString(VAR_15.TRACE_ID);\n                    VAR_28.getTraceIds().add(VAR_29);\n                    VAR_24.getTraces().add(VAR_28);\n                }\n            }\n        } catch (SQLException VAR_30) {\n            throw new IOException(VAR_30);\n        }\n\n        return VAR_24;\n    }",
  "func_graph_path_before": "apache/skywalking/ddb6d9a5019a9c1fe31c364485a4e4b5066fefc3/H2TraceQueryDAO.java/vul/before/0.json",
  "func": "@Override\n    public TraceBrief queryBasicTraces(long startSecondTB,\n                                       long endSecondTB,\n                                       long minDuration,\n                                       long maxDuration,\n                                       String endpointName,\n                                       String serviceId,\n                                       String serviceInstanceId,\n                                       String endpointId,\n                                       String traceId,\n                                       int limit,\n                                       int from,\n                                       TraceState traceState,\n                                       QueryOrder queryOrder) throws IOException {\n        StringBuilder sql = new StringBuilder();\n        List<Object> parameters = new ArrayList<>(10);\n\n        sql.append(\"from \").append(SegmentRecord.INDEX_NAME).append(\" where \");\n        sql.append(\" 1=1 \");\n        if (startSecondTB != 0 && endSecondTB != 0) {\n            sql.append(\" and \").append(SegmentRecord.TIME_BUCKET).append(\" >= ?\");\n            parameters.add(startSecondTB);\n            sql.append(\" and \").append(SegmentRecord.TIME_BUCKET).append(\" <= ?\");\n            parameters.add(endSecondTB);\n        }\n        if (minDuration != 0 || maxDuration != 0) {\n            if (minDuration != 0) {\n                sql.append(\" and \").append(SegmentRecord.LATENCY).append(\" >= ?\");\n                parameters.add(minDuration);\n            }\n            if (maxDuration != 0) {\n                sql.append(\" and \").append(SegmentRecord.LATENCY).append(\" <= ?\");\n                parameters.add(maxDuration);\n            }\n        }\n        if (!Strings.isNullOrEmpty(endpointName)) {\n            sql.append(\" and \").append(SegmentRecord.ENDPOINT_NAME).append(\" like concat('%',?,'%')\");\n            parameters.add(endpointName);\n        }\n        if (StringUtil.isNotEmpty(serviceId)) {\n            sql.append(\" and \").append(SegmentRecord.SERVICE_ID).append(\" = ?\");\n            parameters.add(serviceId);\n        }\n        if (StringUtil.isNotEmpty(serviceInstanceId)) {\n            sql.append(\" and \").append(SegmentRecord.SERVICE_INSTANCE_ID).append(\" = ?\");\n            parameters.add(serviceInstanceId);\n        }\n        if (!Strings.isNullOrEmpty(endpointId)) {\n            sql.append(\" and \").append(SegmentRecord.ENDPOINT_ID).append(\" = ?\");\n            parameters.add(endpointId);\n        }\n        if (!Strings.isNullOrEmpty(traceId)) {\n            sql.append(\" and \").append(SegmentRecord.TRACE_ID).append(\" = ?\");\n            parameters.add(traceId);\n        }\n        switch (traceState) {\n            case ERROR:\n                sql.append(\" and \").append(SegmentRecord.IS_ERROR).append(\" = \").append(BooleanUtils.TRUE);\n                break;\n            case SUCCESS:\n                sql.append(\" and \").append(SegmentRecord.IS_ERROR).append(\" = \").append(BooleanUtils.FALSE);\n                break;\n        }\n        switch (queryOrder) {\n            case BY_START_TIME:\n                sql.append(\" order by \").append(SegmentRecord.START_TIME).append(\" \").append(SortOrder.DESC);\n                break;\n            case BY_DURATION:\n                sql.append(\" order by \").append(SegmentRecord.LATENCY).append(\" \").append(SortOrder.DESC);\n                break;\n        }\n\n        TraceBrief traceBrief = new TraceBrief();\n        try (Connection connection = h2Client.getConnection()) {\n\n            try (ResultSet resultSet = h2Client.executeQuery(connection, buildCountStatement(sql.toString()), parameters\n                .toArray(new Object[0]))) {\n                while (resultSet.next()) {\n                    traceBrief.setTotal(resultSet.getInt(\"total\"));\n                }\n            }\n\n            buildLimit(sql, from, limit);\n\n            try (ResultSet resultSet = h2Client.executeQuery(\n                connection, \"select * \" + sql.toString(), parameters.toArray(new Object[0]))) {\n                while (resultSet.next()) {\n                    BasicTrace basicTrace = new BasicTrace();\n\n                    basicTrace.setSegmentId(resultSet.getString(SegmentRecord.SEGMENT_ID));\n                    basicTrace.setStart(resultSet.getString(SegmentRecord.START_TIME));\n                    basicTrace.getEndpointNames().add(resultSet.getString(SegmentRecord.ENDPOINT_NAME));\n                    basicTrace.setDuration(resultSet.getInt(SegmentRecord.LATENCY));\n                    basicTrace.setError(BooleanUtils.valueToBoolean(resultSet.getInt(SegmentRecord.IS_ERROR)));\n                    String traceIds = resultSet.getString(SegmentRecord.TRACE_ID);\n                    basicTrace.getTraceIds().add(traceIds);\n                    traceBrief.getTraces().add(basicTrace);\n                }\n            }\n        } catch (SQLException e) {\n            throw new IOException(e);\n        }\n\n        return traceBrief;\n    }",
  "abstract_func": "@Override\n    public TraceBrief queryBasicTraces(long VAR_0,\n                                       long VAR_1,\n                                       long VAR_2,\n                                       long VAR_3,\n                                       String VAR_4,\n                                       String VAR_5,\n                                       String VAR_6,\n                                       String VAR_7,\n                                       String VAR_8,\n                                       int VAR_9,\n                                       int VAR_10,\n                                       TraceState VAR_11,\n                                       QueryOrder VAR_12) throws IOException {\n        StringBuilder VAR_13 = new StringBuilder();\n        List<Object> VAR_14 = new ArrayList<>(10);\n\n        VAR_13.append(\"from \").append(VAR_15.INDEX_NAME).append(\" where \");\n        VAR_13.append(\" 1=1 \");\n        if (VAR_0 != 0 && VAR_1 != 0) {\n            VAR_13.append(\" and \").append(VAR_15.TIME_BUCKET).append(\" >= ?\");\n            VAR_14.add(VAR_0);\n            VAR_13.append(\" and \").append(VAR_15.TIME_BUCKET).append(\" <= ?\");\n            VAR_14.add(VAR_1);\n        }\n        if (VAR_2 != 0 || VAR_3 != 0) {\n            if (VAR_2 != 0) {\n                VAR_13.append(\" and \").append(VAR_15.LATENCY).append(\" >= ?\");\n                VAR_14.add(VAR_2);\n            }\n            if (VAR_3 != 0) {\n                VAR_13.append(\" and \").append(VAR_15.LATENCY).append(\" <= ?\");\n                VAR_14.add(VAR_3);\n            }\n        }\n        if (!VAR_16.isNullOrEmpty(VAR_4)) {\n            VAR_13.append(\" and \").append(VAR_15.ENDPOINT_NAME).append(\" like concat('%',?,'%')\");\n            VAR_14.add(VAR_4);\n        }\n        if (VAR_17.isNotEmpty(VAR_5)) {\n            VAR_13.append(\" and \").append(VAR_15.SERVICE_ID).append(\" = ?\");\n            VAR_14.add(VAR_5);\n        }\n        if (VAR_17.isNotEmpty(VAR_6)) {\n            VAR_13.append(\" and \").append(VAR_15.SERVICE_INSTANCE_ID).append(\" = ?\");\n            VAR_14.add(VAR_6);\n        }\n        if (!VAR_16.isNullOrEmpty(VAR_7)) {\n            VAR_13.append(\" and \").append(VAR_15.ENDPOINT_ID).append(\" = ?\");\n            VAR_14.add(VAR_7);\n        }\n        if (!VAR_16.isNullOrEmpty(VAR_8)) {\n            VAR_13.append(\" and \").append(VAR_15.TRACE_ID).append(\" = ?\");\n            VAR_14.add(VAR_8);\n        }\n        switch (VAR_11) {\n            case VAR_18:\n                VAR_13.append(\" and \").append(VAR_15.IS_ERROR).append(\" = \").append(VAR_19.TRUE);\n                break;\n            case VAR_20:\n                VAR_13.append(\" and \").append(VAR_15.IS_ERROR).append(\" = \").append(VAR_19.FALSE);\n                break;\n        }\n        switch (VAR_12) {\n            case VAR_21:\n                VAR_13.append(\" order by \").append(VAR_15.START_TIME).append(\" \").append(VAR_22.DESC);\n                break;\n            case VAR_23:\n                VAR_13.append(\" order by \").append(VAR_15.LATENCY).append(\" \").append(VAR_22.DESC);\n                break;\n        }\n\n        TraceBrief VAR_24 = new TraceBrief();\n        try (Connection VAR_25 = VAR_26.getConnection()) {\n\n            try (ResultSet VAR_27 = VAR_26.executeQuery(VAR_25, buildCountStatement(VAR_13.toString()), VAR_14\n                .toArray(new Object[0]))) {\n                while (VAR_27.next()) {\n                    VAR_24.setTotal(VAR_27.getInt(\"total\"));\n                }\n            }\n\n            buildLimit(VAR_13, VAR_10, VAR_9);\n\n            try (ResultSet VAR_27 = VAR_26.executeQuery(\n                VAR_25, \"select * \" + VAR_13.toString(), VAR_14.toArray(new Object[0]))) {\n                while (VAR_27.next()) {\n                    BasicTrace VAR_28 = new BasicTrace();\n\n                    VAR_28.setSegmentId(VAR_27.getString(VAR_15.SEGMENT_ID));\n                    VAR_28.setStart(VAR_27.getString(VAR_15.START_TIME));\n                    VAR_28.getEndpointNames().add(VAR_27.getString(VAR_15.ENDPOINT_NAME));\n                    VAR_28.setDuration(VAR_27.getInt(VAR_15.LATENCY));\n                    VAR_28.setError(VAR_19.valueToBoolean(VAR_27.getInt(VAR_15.IS_ERROR)));\n                    String VAR_29 = VAR_27.getString(VAR_15.TRACE_ID);\n                    VAR_28.getTraceIds().add(VAR_29);\n                    VAR_24.getTraces().add(VAR_28);\n                }\n            }\n        } catch (SQLException VAR_30) {\n            throw new IOException(VAR_30);\n        }\n\n        return VAR_24;\n    }",
  "func_graph_path": "apache/skywalking/ddb6d9a5019a9c1fe31c364485a4e4b5066fefc3/H2TraceQueryDAO.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -34,7 +34,8 @@\n             }\n         }\n         if (!Strings.isNullOrEmpty(endpointName)) {\n-            sql.append(\" and \").append(SegmentRecord.ENDPOINT_NAME).append(\" like '%\" + endpointName + \"%'\");\n+            sql.append(\" and \").append(SegmentRecord.ENDPOINT_NAME).append(\" like concat('%',?,'%')\");\n+            parameters.add(endpointName);\n         }\n         if (StringUtil.isNotEmpty(serviceId)) {\n             sql.append(\" and \").append(SegmentRecord.SERVICE_ID).append(\" = ?\");",
  "diff_line_info": {
    "deleted_lines": [
      "            sql.append(\" and \").append(SegmentRecord.ENDPOINT_NAME).append(\" like '%\" + endpointName + \"%'\");"
    ],
    "added_lines": [
      "            sql.append(\" and \").append(SegmentRecord.ENDPOINT_NAME).append(\" like concat('%',?,'%')\");",
      "            parameters.add(endpointName);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/apache/skywalking/pull/4970",
  "description": {
    "pr_info": {
      "title": "fix fuzzy query sql injection",
      "number": 4970
    },
    "comment": [
      "Please answer these questions before submitting pull request\r\n\r\n- Why submit this pull request?\r\n- [x] Bug fix\r\n- [ ] New feature provided\r\n- [ ] Improve performance\r\n\r\n- Related issues\r\n[#4955](https://github.com/apache/skywalking/issues/4955)",
      "# [Codecov](https://codecov.io/gh/apache/skywalking/pull/4970?src=pr&el=h1) Report\n> Merging [#4970](https://codecov.io/gh/apache/skywalking/pull/4970?src=pr&el=desc) into [master](https://codecov.io/gh/apache/skywalking/commit/cc9ea271a720e8def161a583595f75da9bda77a5&el=desc) will **increase** coverage by `0.00%`.\n> The diff coverage is `0.00%`.\n\n[![Impacted file tree graph](https://codecov.io/gh/apache/skywalking/pull/4970/graphs/tree.svg?width=650&height=150&src=pr&token=qrILxY5yA8)](https://codecov.io/gh/apache/skywalking/pull/4970?src=pr&el=tree)\n\n```diff\n@@            Coverage Diff            @@\n##             master    #4970   +/-   ##\n=========================================\n  Coverage     53.60%   53.61%           \n- Complexity     2940     2942    +2     \n=========================================\n  Files          1392     1392           \n  Lines         30168    30173    +5     \n  Branches       3366     3366           \n=========================================\n+ Hits          16172    16177    +5     \n  Misses        13211    13211           \n  Partials        785      785           \n```\n\n\n| [Impacted Files](https://codecov.io/gh/apache/skywalking/pull/4970?src=pr&el=tree) | Coverage Δ | Complexity Δ | |\n|---|---|---|---|\n| [...er/storage/plugin/jdbc/h2/dao/H2AlarmQueryDAO.java](https://codecov.io/gh/apache/skywalking/pull/4970/diff?src=pr&el=tree#diff-b2FwLXNlcnZlci9zZXJ2ZXItc3RvcmFnZS1wbHVnaW4vc3RvcmFnZS1qZGJjLWhpa2FyaWNwLXBsdWdpbi9zcmMvbWFpbi9qYXZhL29yZy9hcGFjaGUvc2t5d2Fsa2luZy9vYXAvc2VydmVyL3N0b3JhZ2UvcGx1Z2luL2pkYmMvaDIvZGFvL0gyQWxhcm1RdWVyeURBTy5qYXZh) | `6.66% <0.00%> (-0.16%)` | `1.00 <0.00> (ø)` | |\n| [...storage/plugin/jdbc/h2/dao/H2MetadataQueryDAO.java](https://codecov.io/gh/apache/skywalking/pull/4970/diff?src=pr&el=tree#diff-b2FwLXNlcnZlci9zZXJ2ZXItc3RvcmFnZS1wbHVnaW4vc3RvcmFnZS1qZGJjLWhpa2FyaWNwLXBsdWdpbi9zcmMvbWFpbi9qYXZhL29yZy9hcGFjaGUvc2t5d2Fsa2luZy9vYXAvc2VydmVyL3N0b3JhZ2UvcGx1Z2luL2pkYmMvaDIvZGFvL0gyTWV0YWRhdGFRdWVyeURBTy5qYXZh) | `50.00% <0.00%> (-0.69%)` | `12.00 <0.00> (ø)` | |\n| [...er/storage/plugin/jdbc/h2/dao/H2TraceQueryDAO.java](https://codecov.io/gh/apache/skywalking/pull/4970/diff?src=pr&el=tree#diff-b2FwLXNlcnZlci9zZXJ2ZXItc3RvcmFnZS1wbHVnaW4vc3RvcmFnZS1qZGJjLWhpa2FyaWNwLXBsdWdpbi9zcmMvbWFpbi9qYXZhL29yZy9hcGFjaGUvc2t5d2Fsa2luZy9vYXAvc2VydmVyL3N0b3JhZ2UvcGx1Z2luL2pkYmMvaDIvZGFvL0gyVHJhY2VRdWVyeURBTy5qYXZh) | `38.77% <0.00%> (-0.40%)` | `6.00 <0.00> (ø)` | |\n| [.../storage/plugin/jdbc/mysql/MySQLAlarmQueryDAO.java](https://codecov.io/gh/apache/skywalking/pull/4970/diff?src=pr&el=tree#diff-b2FwLXNlcnZlci9zZXJ2ZXItc3RvcmFnZS1wbHVnaW4vc3RvcmFnZS1qZGJjLWhpa2FyaWNwLXBsdWdpbi9zcmMvbWFpbi9qYXZhL29yZy9hcGFjaGUvc2t5d2Fsa2luZy9vYXAvc2VydmVyL3N0b3JhZ2UvcGx1Z2luL2pkYmMvbXlzcWwvTXlTUUxBbGFybVF1ZXJ5REFPLmphdmE=) | `6.81% <0.00%> (-0.16%)` | `1.00 <0.00> (ø)` | |\n| [...r/storage/plugin/influxdb/query/MetadataQuery.java](https://codecov.io/gh/apache/skywalking/pull/4970/diff?src=pr&el=tree#diff-b2FwLXNlcnZlci9zZXJ2ZXItc3RvcmFnZS1wbHVnaW4vc3RvcmFnZS1pbmZsdXhkYi1wbHVnaW4vc3JjL21haW4vamF2YS9vcmcvYXBhY2hlL3NreXdhbGtpbmcvb2FwL3NlcnZlci9zdG9yYWdlL3BsdWdpbi9pbmZsdXhkYi9xdWVyeS9NZXRhZGF0YVF1ZXJ5LmphdmE=) | `60.00% <0.00%> (+0.76%)` | `12.00% <0.00%> (+1.00%)` | |\n| [...er/storage/plugin/influxdb/query/MetricsQuery.java](https://codecov.io/gh/apache/skywalking/pull/4970/diff?src=pr&el=tree#diff-b2FwLXNlcnZlci9zZXJ2ZXItc3RvcmFnZS1wbHVnaW4vc3RvcmFnZS1pbmZsdXhkYi1wbHVnaW4vc3JjL21haW4vamF2YS9vcmcvYXBhY2hlL3NreXdhbGtpbmcvb2FwL3NlcnZlci9zdG9yYWdlL3BsdWdpbi9pbmZsdXhkYi9xdWVyeS9NZXRyaWNzUXVlcnkuamF2YQ==) | `51.66% <0.00%> (+0.83%)` | `11.00% <0.00%> (+1.00%)` | |\n| [...g/oap/server/telemetry/prometheus/BaseMetrics.java](https://codecov.io/gh/apache/skywalking/pull/4970/diff?src=pr&el=tree#diff-b2FwLXNlcnZlci9zZXJ2ZXItdGVsZW1ldHJ5L3RlbGVtZXRyeS1wcm9tZXRoZXVzL3NyYy9tYWluL2phdmEvb3JnL2FwYWNoZS9za3l3YWxraW5nL29hcC9zZXJ2ZXIvdGVsZW1ldHJ5L3Byb21ldGhldXMvQmFzZU1ldHJpY3MuamF2YQ==) | `87.09% <0.00%> (+3.22%)` | `9.00% <0.00%> (+1.00%)` | |\n| [...core/analysis/manual/instance/InstanceTraffic.java](https://codecov.io/gh/apache/skywalking/pull/4970/diff?src=pr&el=tree#diff-b2FwLXNlcnZlci9zZXJ2ZXItY29yZS9zcmMvbWFpbi9qYXZhL29yZy9hcGFjaGUvc2t5d2Fsa2luZy9vYXAvc2VydmVyL2NvcmUvYW5hbHlzaXMvbWFudWFsL2luc3RhbmNlL0luc3RhbmNlVHJhZmZpYy5qYXZh) | `60.00% <0.00%> (+4.00%)` | `7.00% <0.00%> (ø%)` | |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/apache/skywalking/pull/4970?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/apache/skywalking/pull/4970?src=pr&el=footer). Last update [cc9ea27...2acc6bd](https://codecov.io/gh/apache/skywalking/pull/4970?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n",
      "Look like e2e don't passed.",
      "> Look like e2e don't passed.\r\n\r\nConnection to the maven repo is reset, although I've retried several times, should not be related to the changes",
      "@JaredTan95 As these two fuzzy query not included in the e2e, please check locally."
    ]
  },
  "Bug Filter": "Security Vulnerability Fix  \nConfidence Score: 1.0",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "\n\n**Final Output:**\n\nAnalysis: The patch addresses a SQL injection vulnerability by replacing unsafe string concatenation with parameterized queries, which prevents attackers from injecting malicious SQL code.\n\nFinal Classification: Security Vulnerability Fix  \nConfidence Score: 1.0"
}