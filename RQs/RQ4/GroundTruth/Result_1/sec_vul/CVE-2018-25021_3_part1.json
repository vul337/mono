{
  "cve_id": "CVE-2018-25021",
  "cwe_ids": [
    "CWE-404"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "TokTok/c-toxcore",
  "commit_msg": "Fix memleak in tcp server by wiping priority queues on deletion",
  "commit_hash": "5beb00c93d3adb5c23149535624d27c67bc146ea",
  "git_url": "https://github.com/TokTok/c-toxcore/commit/5beb00c93d3adb5c23149535624d27c67bc146ea",
  "file_path": "toxcore/TCP_server.c",
  "func_name": "del_accepted",
  "func_before": "static int del_accepted(TCP_Server *tcp_server, int index)\n{\n    if ((uint32_t)index >= tcp_server->size_accepted_connections) {\n        return -1;\n    }\n\n    if (tcp_server->accepted_connection_array[index].status == TCP_STATUS_NO_STATUS) {\n        return -1;\n    }\n\n    if (!bs_list_remove(&tcp_server->accepted_key_list, tcp_server->accepted_connection_array[index].public_key, index)) {\n        return -1;\n    }\n\n    crypto_memzero(&tcp_server->accepted_connection_array[index], sizeof(TCP_Secure_Connection));\n    --tcp_server->num_accepted_connections;\n\n    if (tcp_server->num_accepted_connections == 0) {\n        realloc_connection(tcp_server, 0);\n    }\n\n    return 0;\n}",
  "abstract_func_before": "static int del_accepted(TCP_Server *VAR_0, int VAR_1)\n{\n    if ((uint32_t)VAR_1 >= VAR_0->size_accepted_connections) {\n        return -1;\n    }\n\n    if (VAR_0->accepted_connection_array[VAR_1].status == VAR_2) {\n        return -1;\n    }\n\n    if (!bs_list_remove(&VAR_0->accepted_key_list, VAR_0->accepted_connection_array[VAR_1].public_key, VAR_1)) {\n        return -1;\n    }\n\n    crypto_memzero(&VAR_0->accepted_connection_array[VAR_1], sizeof(VAR_3));\n    --VAR_0->num_accepted_connections;\n\n    if (VAR_0->num_accepted_connections == 0) {\n        realloc_connection(VAR_0, 0);\n    }\n\n    return 0;\n}",
  "func_graph_path_before": "TokTok/c-toxcore/5beb00c93d3adb5c23149535624d27c67bc146ea/TCP_server.c/vul/before/3.json",
  "func": "static int del_accepted(TCP_Server *tcp_server, int index)\n{\n    if ((uint32_t)index >= tcp_server->size_accepted_connections) {\n        return -1;\n    }\n\n    if (tcp_server->accepted_connection_array[index].status == TCP_STATUS_NO_STATUS) {\n        return -1;\n    }\n\n    if (!bs_list_remove(&tcp_server->accepted_key_list, tcp_server->accepted_connection_array[index].public_key, index)) {\n        return -1;\n    }\n\n    wipe_secure_connection(&tcp_server->accepted_connection_array[index]);\n    --tcp_server->num_accepted_connections;\n\n    if (tcp_server->num_accepted_connections == 0) {\n        free_accepted_connection_array(tcp_server);\n    }\n\n    return 0;\n}",
  "abstract_func": "static int del_accepted(TCP_Server *VAR_0, int VAR_1)\n{\n    if ((uint32_t)VAR_1 >= VAR_0->size_accepted_connections) {\n        return -1;\n    }\n\n    if (VAR_0->accepted_connection_array[VAR_1].status == VAR_2) {\n        return -1;\n    }\n\n    if (!bs_list_remove(&VAR_0->accepted_key_list, VAR_0->accepted_connection_array[VAR_1].public_key, VAR_1)) {\n        return -1;\n    }\n\n    wipe_secure_connection(&VAR_0->accepted_connection_array[VAR_1]);\n    --VAR_0->num_accepted_connections;\n\n    if (VAR_0->num_accepted_connections == 0) {\n        free_accepted_connection_array(VAR_0);\n    }\n\n    return 0;\n}",
  "func_graph_path": "TokTok/c-toxcore/5beb00c93d3adb5c23149535624d27c67bc146ea/TCP_server.c/vul/after/3.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -12,11 +12,11 @@\n         return -1;\n     }\n \n-    crypto_memzero(&tcp_server->accepted_connection_array[index], sizeof(TCP_Secure_Connection));\n+    wipe_secure_connection(&tcp_server->accepted_connection_array[index]);\n     --tcp_server->num_accepted_connections;\n \n     if (tcp_server->num_accepted_connections == 0) {\n-        realloc_connection(tcp_server, 0);\n+        free_accepted_connection_array(tcp_server);\n     }\n \n     return 0;",
  "diff_line_info": {
    "deleted_lines": [
      "    crypto_memzero(&tcp_server->accepted_connection_array[index], sizeof(TCP_Secure_Connection));",
      "        realloc_connection(tcp_server, 0);"
    ],
    "added_lines": [
      "    wipe_secure_connection(&tcp_server->accepted_connection_array[index]);",
      "        free_accepted_connection_array(tcp_server);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/TokTok/c-toxcore/pull/1216",
  "description": {
    "pr_info": {
      "title": "Fix memory leak in tcp server by wiping priority queues on deletion.",
      "number": 1216
    },
    "comment": [
      "\n\n<!-- Reviewable:start -->\nThis change is [<img src=\"https://reviewable.io/review_button.svg\" height=\"34\" align=\"absmiddle\" alt=\"Reviewable\"/>](https://reviewable.io/reviews/toktok/c-toxcore/1216)\n<!-- Reviewable:end -->\n",
      "It turns out that this closes #1214, as this was the memleak exploited there.\r\n@kpp found the flaw first, and chose to communicate it to us non-verbally in this way.\r\n@kpp and I just tested that this patch does nullify that attack.",
      "https://github.com/tox-rs/tox is your best friend =) The second 0day this year.",
      "This doesn't actually fix all the potential memleaks yet. e.g. in kill_TCP_server the TCP_Secure_Connections aren't wiped, so there could be unfreed priority queues. Similarly in realloc_connection. I'm also worried about the potential for double frees. This is going to take some care... is there anyone who's actually familiar with TCP_server.c and wouldn't mind helping out?",
      "@zugz what do you mean by \"non-verbally\"? How exactly did he communicate? Was it by taking down 3/4 of bootstrap nodes? Because if so, then that's a rather malicious way of communicating and tox-rs ain't no friend.",
      "* Saturday, 2018-09-29 at 12:36 -0700 - nurupo <notifications@github.com>:\n\n>@zugz what do you mean by \"non-verbally\"? How exactly did he \n>communicate? Was it by taking down 3/4 of bootstrap nodes?\n\nThat is what I meant.\n",
      "# [Codecov](https://codecov.io/gh/TokTok/c-toxcore/pull/1216?src=pr&el=h1) Report\n> Merging [#1216](https://codecov.io/gh/TokTok/c-toxcore/pull/1216?src=pr&el=desc) into [master](https://codecov.io/gh/TokTok/c-toxcore/commit/b2b96b1aa19ef2eb2816303e606a3f23550538dc?src=pr&el=desc) will **decrease** coverage by `0.1%`.\n> The diff coverage is `85%`.\n\n[![Impacted file tree graph](https://codecov.io/gh/TokTok/c-toxcore/pull/1216/graphs/tree.svg?width=650&token=BRfCKo02De&height=150&src=pr)](https://codecov.io/gh/TokTok/c-toxcore/pull/1216?src=pr&el=tree)\n\n```diff\n@@           Coverage Diff            @@\n##           master   #1216     +/-   ##\n========================================\n- Coverage    82.8%   82.7%   -0.2%     \n========================================\n  Files          82      82             \n  Lines       14634   14647     +13     \n========================================\n- Hits        12125   12120      -5     \n- Misses       2509    2527     +18\n```\n\n\n| [Impacted Files](https://codecov.io/gh/TokTok/c-toxcore/pull/1216?src=pr&el=tree) | Coverage Δ | |\n|---|---|---|\n| [toxcore/TCP\\_client.c](https://codecov.io/gh/TokTok/c-toxcore/pull/1216/diff?src=pr&el=tree#diff-dG94Y29yZS9UQ1BfY2xpZW50LmM=) | `64.6% <100%> (+0.3%)` | :arrow_up: |\n| [toxcore/TCP\\_server.c](https://codecov.io/gh/TokTok/c-toxcore/pull/1216/diff?src=pr&el=tree#diff-dG94Y29yZS9UQ1Bfc2VydmVyLmM=) | `75.9% <84.6%> (+0.9%)` | :arrow_up: |\n| [auto\\_tests/toxav\\_many\\_test.c](https://codecov.io/gh/TokTok/c-toxcore/pull/1216/diff?src=pr&el=tree#diff-YXV0b190ZXN0cy90b3hhdl9tYW55X3Rlc3QuYw==) | `92.5% <0%> (-4.1%)` | :arrow_down: |\n| [toxcore/net\\_crypto.c](https://codecov.io/gh/TokTok/c-toxcore/pull/1216/diff?src=pr&el=tree#diff-dG94Y29yZS9uZXRfY3J5cHRvLmM=) | `93.5% <0%> (-1.4%)` | :arrow_down: |\n| [toxav/msi.c](https://codecov.io/gh/TokTok/c-toxcore/pull/1216/diff?src=pr&el=tree#diff-dG94YXYvbXNpLmM=) | `63.6% <0%> (-1.2%)` | :arrow_down: |\n| [toxav/toxav.c](https://codecov.io/gh/TokTok/c-toxcore/pull/1216/diff?src=pr&el=tree#diff-dG94YXYvdG94YXYuYw==) | `67.1% <0%> (-1%)` | :arrow_down: |\n| [toxcore/Messenger.c](https://codecov.io/gh/TokTok/c-toxcore/pull/1216/diff?src=pr&el=tree#diff-dG94Y29yZS9NZXNzZW5nZXIuYw==) | `86.6% <0%> (+0.1%)` | :arrow_up: |\n| [toxcore/friend\\_connection.c](https://codecov.io/gh/TokTok/c-toxcore/pull/1216/diff?src=pr&el=tree#diff-dG94Y29yZS9mcmllbmRfY29ubmVjdGlvbi5j) | `94.5% <0%> (+0.8%)` | :arrow_up: |\n| [auto\\_tests/toxav\\_basic\\_test.c](https://codecov.io/gh/TokTok/c-toxcore/pull/1216/diff?src=pr&el=tree#diff-YXV0b190ZXN0cy90b3hhdl9iYXNpY190ZXN0LmM=) | `83.5% <0%> (+1.9%)` | :arrow_up: |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/TokTok/c-toxcore/pull/1216?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/TokTok/c-toxcore/pull/1216?src=pr&el=footer). Last update [b2b96b1...5beb00c](https://codecov.io/gh/TokTok/c-toxcore/pull/1216?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n",
      "OK, this is ready for (re)review now, and I believe it now fully seals this source of memleaks rather than just dealing with the case exploited in #1214. There wasn't nearly as much further work as I was fearing in my previous comment.\r\n\r\nA word on my methodology here: I haven't actually grokked the entirety of TCP_server.c; rather, I searched for \"TCP_Secure_Connection\" and followed up on each hit. I don't see that I could be missing anything. Also, with these latest changes asan now passes on #1215 - and asan's previous failure there was what directly led me to finding the memleak, which incidentally I think we can read as a win for our testing regime!\r\n\r\nAnyway, please review carefully.",
      "This is how I fixed it: https://github.com/irungentoo/toxcore/commit/bf69b54f64003d160d759068f4816b2d9b2e1e21"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix  \nConfidence Score: 1.0",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "\n\nThe patch addresses a memory leak in the TCP server, which was exploited to cause a denial of service. The changes ensure proper memory management, preventing resource exhaustion.\n\n**Final Output:**\nAnalysis: The patch fixes a memory leak in the TCP server, which was exploited to cause a denial of service. The code changes ensure that memory is properly freed, preventing resource exhaustion. The commit message and comments confirm that this was a security issue that had been exploited.\n\nFinal Classification: Security Vulnerability Fix  \nConfidence Score: 1.0"
}