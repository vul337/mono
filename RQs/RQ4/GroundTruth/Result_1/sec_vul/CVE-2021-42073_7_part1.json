{
  "cve_id": "CVE-2021-42073",
  "cwe_ids": [
    "CWE-384"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:P/I:P/A:N",
  "cvss_is_v3": false,
  "repo_name": "debauchee/barrier",
  "commit_msg": "Implement client identity verification\n\nThis commit fixes two security vulnerabilities: CVE-2021-42072 and\nCVE-2021-42073.\n\nThe issues have been reported by Matthias Gerstner <mgerstner@suse.de>.",
  "commit_hash": "229abab99f39f11624e5651f819e7f1f8eddedcc",
  "git_url": "https://github.com/debauchee/barrier/commit/229abab99f39f11624e5651f819e7f1f8eddedcc",
  "file_path": "src/lib/barrier/ServerApp.cpp",
  "func_name": "ServerApp::openClientListener",
  "func_before": "ClientListener*\nServerApp::openClientListener(const NetworkAddress& address)\n{\n    auto security_level = ConnectionSecurityLevel::PLAINTEXT;\n    if (args().m_enableCrypto) {\n        security_level = ConnectionSecurityLevel::ENCRYPTED;\n    }\n\n    ClientListener* listen = new ClientListener(\n        address,\n        new TCPSocketFactory(m_events, getSocketMultiplexer()),\n        m_events, security_level);\n\n    m_events->adoptHandler(\n        m_events->forClientListener().connected(), listen,\n        new TMethodEventJob<ServerApp>(\n            this, &ServerApp::handleClientConnected, listen));\n\n    return listen;\n}",
  "abstract_func_before": "ClientListener*\nServerApp::openClientListener(const NetworkAddress& VAR_0)\n{\n    auto VAR_1 = ConnectionSecurityLevel::PLAINTEXT;\n    if (args().m_enableCrypto) {\n        VAR_1 = ConnectionSecurityLevel::ENCRYPTED;\n    }\n\n    ClientListener* VAR_2 = new ClientListener(\n        VAR_0,\n        new TCPSocketFactory(VAR_3, getSocketMultiplexer()),\n        VAR_3, VAR_1);\n\n    VAR_3->adoptHandler(\n        VAR_3->forClientListener().connected(), VAR_2,\n        new TMethodEventJob<ServerApp>(\n            this, &ServerApp::handleClientConnected, VAR_2));\n\n    return VAR_2;\n}",
  "func_graph_path_before": "debauchee/barrier/229abab99f39f11624e5651f819e7f1f8eddedcc/ServerApp.cpp/vul/before/1.json",
  "func": "ClientListener*\nServerApp::openClientListener(const NetworkAddress& address)\n{\n    auto security_level = ConnectionSecurityLevel::PLAINTEXT;\n    if (args().m_enableCrypto) {\n        security_level = ConnectionSecurityLevel::ENCRYPTED;\n        if (args().check_client_certificates) {\n            security_level = ConnectionSecurityLevel::ENCRYPTED_AUTHENTICATED;\n        }\n    }\n\n    ClientListener* listen = new ClientListener(\n        address,\n        new TCPSocketFactory(m_events, getSocketMultiplexer()),\n        m_events, security_level);\n\n    m_events->adoptHandler(\n        m_events->forClientListener().connected(), listen,\n        new TMethodEventJob<ServerApp>(\n            this, &ServerApp::handleClientConnected, listen));\n\n    return listen;\n}",
  "abstract_func": "ClientListener*\nServerApp::openClientListener(const NetworkAddress& VAR_0)\n{\n    auto VAR_1 = ConnectionSecurityLevel::PLAINTEXT;\n    if (args().m_enableCrypto) {\n        VAR_1 = ConnectionSecurityLevel::ENCRYPTED;\n        if (args().check_client_certificates) {\n            VAR_1 = ConnectionSecurityLevel::ENCRYPTED_AUTHENTICATED;\n        }\n    }\n\n    ClientListener* VAR_2 = new ClientListener(\n        VAR_0,\n        new TCPSocketFactory(VAR_3, getSocketMultiplexer()),\n        VAR_3, VAR_1);\n\n    VAR_3->adoptHandler(\n        VAR_3->forClientListener().connected(), VAR_2,\n        new TMethodEventJob<ServerApp>(\n            this, &ServerApp::handleClientConnected, VAR_2));\n\n    return VAR_2;\n}",
  "func_graph_path": "debauchee/barrier/229abab99f39f11624e5651f819e7f1f8eddedcc/ServerApp.cpp/vul/after/1.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -4,6 +4,9 @@\n     auto security_level = ConnectionSecurityLevel::PLAINTEXT;\n     if (args().m_enableCrypto) {\n         security_level = ConnectionSecurityLevel::ENCRYPTED;\n+        if (args().check_client_certificates) {\n+            security_level = ConnectionSecurityLevel::ENCRYPTED_AUTHENTICATED;\n+        }\n     }\n \n     ClientListener* listen = new ClientListener(",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "        if (args().check_client_certificates) {",
      "            security_level = ConnectionSecurityLevel::ENCRYPTED_AUTHENTICATED;",
      "        }"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/debauchee/barrier/pull/1346",
  "description": {
    "pr_info": {
      "title": "Implement client identity verification [SECURITY VULNERABILITIES CVE-2021-42072, CVE-2021-42073]",
      "number": 1346
    },
    "comment": [
      "This PR implements client identity verification. Essentially server gets the same process of accepting and rejecting clients like the clients can accept or reject the server. This is important because even though the client can't move the mouse on the server, it can still receive input and potentially set the clipboard.\r\n\r\nThis PR fixes the following security vulnerabilities:\r\n\r\n - CVE-2021-42072 server does not verify client identity (certificate fingerprint)\r\n - CVE-2021-42073 By guessing/listening in on valid client names server clipboard content can be manipulated.\r\n\r\nThe issues have been reported by Matthias Gerstner <mgerstner@suse.de> @mgerstner. Matthias also provided insights into how best to fix the issues, precise reproduction steps and any used tools and made the maintainer's life as pleasant as possible. Thank you!"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix  \nConfidence Score: 0.95",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "\n\n**Final Output:**\n\nAnalysis: The commit message and code changes indicate that the patch addresses two security vulnerabilities (CVE-2021-42072 and CVE-2021-42073) by implementing client identity verification. The code diff introduces checks for client certificates, enhancing security by preventing unauthorized access and data manipulation.\n\nFinal Classification: Security Vulnerability Fix  \nConfidence Score: 0.95"
}