{
  "cve_id": "CVE-2021-3660",
  "cwe_ids": [
    "CWE-1021"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:N/I:P/A:N",
  "cvss_is_v3": false,
  "repo_name": "cockpit-project/cockpit",
  "commit_msg": "common: Restrict frame embedding to same origin\n\nDeclare `X-Frame-Options: sameorigin` [1] so that cockpit frames can\nonly be embedded into pages coming from the same origin. This is similar\nto setting CORP in commit 2b38b8de92f9a (which applies to `<script>`,\n`<img>`, etc.).\n\nThe main use case for embedding is to run cockpit-ws behind a reverse\nproxy, while also serving other pages. Cross-origin embedding is\ndiscouraged these days to prevent \"clickjacking\".\n\nCross-origin embedding already did not work in most cases: Frames would\nalways just show the login page.  However, this looks confusing and is\nunclean. With X-Frame-Options, the browser instead shows an explanatory\nerror page.\n\nMention the same origin requirement in the embedding documentation.\n\nFixes #16122\nhttps://bugzilla.redhat.com/show_bug.cgi?id=1980688\nCVE-2021-3660\n\n[1] https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
  "commit_hash": "8d9bc10d8128aae03dfde62fd00075fe492ead10",
  "git_url": "https://github.com/cockpit-project/cockpit/commit/8d9bc10d8128aae03dfde62fd00075fe492ead10",
  "file_path": "src/common/cockpitwebresponse.c",
  "func_name": "append_header",
  "func_before": "static guint\nappend_header (GString *string,\n               const gchar *name,\n               const gchar *value)\n{\n  if (value)\n    {\n      g_return_val_if_fail (cockpit_web_response_is_simple_token (name), 0);\n      g_return_val_if_fail (cockpit_web_response_is_header_value (value), 0);\n      g_string_append_printf (string, \"%s: %s\\r\\n\", name, value);\n    }\n  if (g_ascii_strcasecmp (\"Content-Type\", name) == 0)\n    return HEADER_CONTENT_TYPE;\n  if (g_ascii_strcasecmp (\"Cache-Control\", name) == 0)\n    return HEADER_CACHE_CONTROL;\n  if (g_ascii_strcasecmp (\"Vary\", name) == 0)\n    return HEADER_VARY;\n  if (g_ascii_strcasecmp (\"Content-Encoding\", name) == 0)\n    return HEADER_CONTENT_ENCODING;\n  if (g_ascii_strcasecmp (\"X-DNS-Prefetch-Control\", name) == 0)\n    return HEADER_DNS_PREFETCH_CONTROL;\n  if (g_ascii_strcasecmp (\"Referrer-Policy\", name) == 0)\n    return HEADER_REFERRER_POLICY;\n  if (g_ascii_strcasecmp (\"X-Content-Type-Options\", name) == 0)\n    return HEADER_CONTENT_TYPE_OPTIONS;\n  if (g_ascii_strcasecmp (\"Cross-Origin-Resource-Policy\", name) == 0)\n    return HEADER_CROSS_ORIGIN_RESOURCE_POLICY;\n  if (g_ascii_strcasecmp (\"Content-Length\", name) == 0 ||\n      g_ascii_strcasecmp (\"Transfer-Encoding\", name) == 0 ||\n      g_ascii_strcasecmp (\"Connection\", name) == 0)\n    {\n      g_critical (\"Don't set %s header manually. This is a programmer error.\", name);\n    }\n  return 0;\n}",
  "abstract_func_before": "static guint\nappend_header (GString *VAR_0,\n               const gchar *VAR_1,\n               const gchar *VAR_2)\n{\n  if (VAR_2)\n    {\n      g_return_val_if_fail (cockpit_web_response_is_simple_token (VAR_1), 0);\n      g_return_val_if_fail (cockpit_web_response_is_header_value (VAR_2), 0);\n      g_string_append_printf (VAR_0, \"%s: %s\\r\\n\", VAR_1, VAR_2);\n    }\n  if (g_ascii_strcasecmp (\"Content-Type\", VAR_1) == 0)\n    return VAR_3;\n  if (g_ascii_strcasecmp (\"Cache-Control\", VAR_1) == 0)\n    return VAR_4;\n  if (g_ascii_strcasecmp (\"Vary\", VAR_1) == 0)\n    return VAR_5;\n  if (g_ascii_strcasecmp (\"Content-Encoding\", VAR_1) == 0)\n    return VAR_6;\n  if (g_ascii_strcasecmp (\"X-DNS-Prefetch-Control\", VAR_1) == 0)\n    return VAR_7;\n  if (g_ascii_strcasecmp (\"Referrer-Policy\", VAR_1) == 0)\n    return VAR_8;\n  if (g_ascii_strcasecmp (\"X-Content-Type-Options\", VAR_1) == 0)\n    return VAR_9;\n  if (g_ascii_strcasecmp (\"Cross-Origin-Resource-Policy\", VAR_1) == 0)\n    return VAR_10;\n  if (g_ascii_strcasecmp (\"Content-Length\", VAR_1) == 0 ||\n      g_ascii_strcasecmp (\"Transfer-Encoding\", VAR_1) == 0 ||\n      g_ascii_strcasecmp (\"Connection\", VAR_1) == 0)\n    {\n      g_critical (\"Don't set %s header manually. This is a programmer error.\", VAR_1);\n    }\n  return 0;\n}",
  "func_graph_path_before": "cockpit-project/cockpit/8d9bc10d8128aae03dfde62fd00075fe492ead10/cockpitwebresponse.c/vul/before/0.json",
  "func": "static guint\nappend_header (GString *string,\n               const gchar *name,\n               const gchar *value)\n{\n  if (value)\n    {\n      g_return_val_if_fail (cockpit_web_response_is_simple_token (name), 0);\n      g_return_val_if_fail (cockpit_web_response_is_header_value (value), 0);\n      g_string_append_printf (string, \"%s: %s\\r\\n\", name, value);\n    }\n  if (g_ascii_strcasecmp (\"Content-Type\", name) == 0)\n    return HEADER_CONTENT_TYPE;\n  if (g_ascii_strcasecmp (\"Cache-Control\", name) == 0)\n    return HEADER_CACHE_CONTROL;\n  if (g_ascii_strcasecmp (\"Vary\", name) == 0)\n    return HEADER_VARY;\n  if (g_ascii_strcasecmp (\"Content-Encoding\", name) == 0)\n    return HEADER_CONTENT_ENCODING;\n  if (g_ascii_strcasecmp (\"X-DNS-Prefetch-Control\", name) == 0)\n    return HEADER_DNS_PREFETCH_CONTROL;\n  if (g_ascii_strcasecmp (\"Referrer-Policy\", name) == 0)\n    return HEADER_REFERRER_POLICY;\n  if (g_ascii_strcasecmp (\"X-Content-Type-Options\", name) == 0)\n    return HEADER_CONTENT_TYPE_OPTIONS;\n  if (g_ascii_strcasecmp (\"Cross-Origin-Resource-Policy\", name) == 0)\n    return HEADER_CROSS_ORIGIN_RESOURCE_POLICY;\n  if (g_ascii_strcasecmp (\"X-Frame-Options\", name) == 0)\n    return HEADER_X_FRAME_OPTIONS;\n  if (g_ascii_strcasecmp (\"Content-Length\", name) == 0 ||\n      g_ascii_strcasecmp (\"Transfer-Encoding\", name) == 0 ||\n      g_ascii_strcasecmp (\"Connection\", name) == 0)\n    {\n      g_critical (\"Don't set %s header manually. This is a programmer error.\", name);\n    }\n  return 0;\n}",
  "abstract_func": "static guint\nappend_header (GString *VAR_0,\n               const gchar *VAR_1,\n               const gchar *VAR_2)\n{\n  if (VAR_2)\n    {\n      g_return_val_if_fail (cockpit_web_response_is_simple_token (VAR_1), 0);\n      g_return_val_if_fail (cockpit_web_response_is_header_value (VAR_2), 0);\n      g_string_append_printf (VAR_0, \"%s: %s\\r\\n\", VAR_1, VAR_2);\n    }\n  if (g_ascii_strcasecmp (\"Content-Type\", VAR_1) == 0)\n    return VAR_3;\n  if (g_ascii_strcasecmp (\"Cache-Control\", VAR_1) == 0)\n    return VAR_4;\n  if (g_ascii_strcasecmp (\"Vary\", VAR_1) == 0)\n    return VAR_5;\n  if (g_ascii_strcasecmp (\"Content-Encoding\", VAR_1) == 0)\n    return VAR_6;\n  if (g_ascii_strcasecmp (\"X-DNS-Prefetch-Control\", VAR_1) == 0)\n    return VAR_7;\n  if (g_ascii_strcasecmp (\"Referrer-Policy\", VAR_1) == 0)\n    return VAR_8;\n  if (g_ascii_strcasecmp (\"X-Content-Type-Options\", VAR_1) == 0)\n    return VAR_9;\n  if (g_ascii_strcasecmp (\"Cross-Origin-Resource-Policy\", VAR_1) == 0)\n    return VAR_10;\n  if (g_ascii_strcasecmp (\"X-Frame-Options\", VAR_1) == 0)\n    return VAR_11;\n  if (g_ascii_strcasecmp (\"Content-Length\", VAR_1) == 0 ||\n      g_ascii_strcasecmp (\"Transfer-Encoding\", VAR_1) == 0 ||\n      g_ascii_strcasecmp (\"Connection\", VAR_1) == 0)\n    {\n      g_critical (\"Don't set %s header manually. This is a programmer error.\", VAR_1);\n    }\n  return 0;\n}",
  "func_graph_path": "cockpit-project/cockpit/8d9bc10d8128aae03dfde62fd00075fe492ead10/cockpitwebresponse.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -25,6 +25,8 @@\n     return HEADER_CONTENT_TYPE_OPTIONS;\n   if (g_ascii_strcasecmp (\"Cross-Origin-Resource-Policy\", name) == 0)\n     return HEADER_CROSS_ORIGIN_RESOURCE_POLICY;\n+  if (g_ascii_strcasecmp (\"X-Frame-Options\", name) == 0)\n+    return HEADER_X_FRAME_OPTIONS;\n   if (g_ascii_strcasecmp (\"Content-Length\", name) == 0 ||\n       g_ascii_strcasecmp (\"Transfer-Encoding\", name) == 0 ||\n       g_ascii_strcasecmp (\"Connection\", name) == 0)",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "  if (g_ascii_strcasecmp (\"X-Frame-Options\", name) == 0)",
      "    return HEADER_X_FRAME_OPTIONS;"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/cockpit-project/cockpit/pull/16342",
  "description": {
    "pr_info": {
      "title": "common: Restrict frame embedding to same origin",
      "number": 16342
    },
    "comment": [
      "Declare `X-Frame-Options: sameorigin` [1] so that cockpit frames can\r\nonly be embedded into pages coming from the same origin. This is similar\r\nto setting CORP in commit 2b38b8d (which applies to `<script>`,\r\n`<img>`, etc.).\r\n\r\nThe main use case for embedding is to run cockpit-ws behind a reverse\r\nproxy, while also serving other pages. Cross-origin embedding is\r\ndiscouraged these days to prevent \"clickjacking\".\r\n\r\nCross-origin embedding already did not work in practice, due to our\r\ncookie restrictions: Frames would always just show the login page.\r\nHowever, this looks confusing and is unclean. With X-Frame-Options, the\r\nbrowser instead shows an explanatory error page.\r\n\r\nMention the same origin requirement in the embedding documentation.\r\n\r\nFixes #16122\r\nhttps://bugzilla.redhat.com/show_bug.cgi?id=1980688\r\nCVE-2021-3660\r\n\r\n[1] https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options\r\n\r\n-----\r\n\r\n - [x] Get working reproducer from [security bz reporter](https://bugzilla.redhat.com/show_bug.cgi?id=1980688)  that this was not actually exploitable with cross-origins from different IPs/host names\r\n - [x] Update [documentation](https://cockpit-project.org/guide/latest/embedding.html) that embedding only works for same-origin  frames\r\n - [x] Set `X-Frame-Options: sameorigin` as a third line of defence\r\n - [x] builds on top of #16346\r\n - [x] fix `test-httpstream` to be robust against header hash ordering: PR #16348\r\n\r\n## Webserver: Restrict frame embedding to same origin\r\n\r\nCockpit's web server now sets the [X-Frame-Options header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options) to explicitly disallow frame embedding within a different origin. Thanks to cookie policy restrictions, this was already prevented in most cases, as embedded frames would always show the login page. With this new option, the browser directly forbids cross-origin embedding and shows an explanatory error page instead. (CVE-2021-3660)\r\n\r\n![254-webserver-restrict-frame-embedding-to-same-origin](https://user-images.githubusercontent.com/10246/135225537-eaede1fa-6139-408c-9157-f79d317c36c9.png)",
      "Darn, when writing the `STATIC_HEADERS_CHUNKED` hack I already had a hunch that assuming glib hash ordering would backfire -- and [it did](https://logs.cockpit-project.org/logs/pull-16342-20210914-072625-784e2518-rhel-8-5/log.html).\r\n\r\nI filed PR #16346 to land the test/example fixes, and will rework test-httpstream to be more robust against header changes.",
      "I tried very hard again today to actually exploit this, but still did not get very far. I now left the description sufficiently vague, and I think this is ready to land despite not having fully confirmed the original scenario. See https://bugzilla.redhat.com/show_bug.cgi?id=1980688#c19 for details.\r\n\r\n@mvollmer, want to have a look?",
      "Updated title and comment for release notes"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix  \nConfidence Score: 1.0",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "\n\nThe patch addresses a security vulnerability by implementing a header to prevent clickjacking attacks. It clearly falls under the category of a Security Vulnerability Fix with high confidence.\n\n**Final Output:**\n\nAnalysis: The patch introduces the X-Frame-Options header to prevent cross-origin frame embedding, mitigating clickjacking risks. This directly addresses a security vulnerability, as indicated by the associated CVE and commit details.\n\nFinal Classification: Security Vulnerability Fix  \nConfidence Score: 1.0"
}