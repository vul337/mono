{
  "cve_id": "CVE-2023-0302",
  "cwe_ids": [
    "CWE-74"
  ],
  "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H",
  "cvss_is_v3": true,
  "repo_name": "radareorg/radare2",
  "commit_msg": "Fix ANSI Escape Sequence Injection vulns via DWARF ##vuln\n\n* Reported by @solid-snail via huntrdev\r\n* BountyID: 583133af-7ae6-4a21-beef-a4b0182cf82e\r\n* Reproducer: dwarf_test_func_patched",
  "commit_hash": "961f0e723903011d4f54c2396e44efa91fcc74ce",
  "git_url": "https://github.com/radareorg/radare2/commit/961f0e723903011d4f54c2396e44efa91fcc74ce",
  "file_path": "libr/cons/hud.c",
  "func_name": "r_cons_hud_line_string",
  "func_before": "R_API char *r_cons_hud_line_string(const char *s) {\n\tif (!r_cons_is_interactive ()) {\n\t\tR_LOG_ERROR (\"Hud mode requires scr.interactive=true\");\n\t\treturn NULL;\n\t}\n\tchar *os, *track, *ret, *o = strdup (s);\n\tif (!o) {\n\t\treturn NULL;\n\t}\n\tr_str_replace_ch (o, '\\r', 0, true);\n\tr_str_replace_ch (o, '\\t', 0, true);\n\tRList *fl = r_list_new ();\n\tint i;\n\tif (!fl) {\n\t\tfree (o);\n\t\treturn NULL;\n\t}\n\tfl->free = free;\n\tfor (os = o, i = 0; o[i]; i++) {\n\t\tif (o[i] == '\\n') {\n\t\t\to[i] = 0;\n\t\t\tif (*os && *os != '#') {\n\t\t\t\ttrack = strdup (os);\n\t\t\t\tif (!r_list_append (fl, track)) {\n\t\t\t\t\tfree (track);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tos = o + i + 1;\n\t\t}\n\t}\n\tret = r_cons_hud_line (fl, NULL);\n\tfree (o);\n\tr_list_free (fl);\n\treturn ret;\n}",
  "abstract_func_before": "R_API char *r_cons_hud_line_string(const char *VAR_0) {\n\tif (!r_cons_is_interactive ()) {\n\t\tR_LOG_ERROR (\"Hud mode requires scr.interactive=true\");\n\t\treturn NULL;\n\t}\n\tchar *VAR_1, *VAR_2, *VAR_3, *VAR_4 = strdup (VAR_0);\n\tif (!VAR_4) {\n\t\treturn NULL;\n\t}\n\tr_str_replace_ch (VAR_4, '\\r', 0, true);\n\tr_str_replace_ch (VAR_4, '\\t', 0, true);\n\tRList *VAR_5 = r_list_new ();\n\tint VAR_6;\n\tif (!VAR_5) {\n\t\tfree (VAR_4);\n\t\treturn NULL;\n\t}\n\tVAR_5->free = VAR_7;\n\tfor (VAR_1 = VAR_4, VAR_6 = 0; VAR_4[VAR_6]; VAR_6++) {\n\t\tif (VAR_4[VAR_6] == '\\n') {\n\t\t\tVAR_4[VAR_6] = 0;\n\t\t\tif (*VAR_1 && *VAR_1 != '#') {\n\t\t\t\tVAR_2 = strdup (VAR_1);\n\t\t\t\tif (!r_list_append (VAR_5, VAR_2)) {\n\t\t\t\t\tVAR_7 (VAR_2);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tVAR_1 = VAR_4 + VAR_6 + 1;\n\t\t}\n\t}\n\tVAR_3 = r_cons_hud_line (VAR_5, NULL);\n\tVAR_7 (VAR_4);\n\tr_list_free (VAR_5);\n\treturn VAR_3;\n}",
  "func_graph_path_before": null,
  "func": "R_API char *r_cons_hud_line_string(const char *s) {\n\tif (!r_cons_is_interactive ()) {\n\t\tR_LOG_ERROR (\"Hud mode requires scr.interactive=true\");\n\t\treturn NULL;\n\t}\n\tchar *os, *track, *ret, *o = strdup (s);\n\tif (!o) {\n\t\treturn NULL;\n\t}\n\tr_str_replace_ch (o, '\\r', 0, true);\n\tr_str_replace_ch (o, '\\t', 0, true);\n\tr_str_ansi_strip (o);\n\tRList *fl = r_list_new ();\n\tint i;\n\tif (!fl) {\n\t\tfree (o);\n\t\treturn NULL;\n\t}\n\tfl->free = free;\n\tfor (os = o, i = 0; o[i]; i++) {\n\t\tif (o[i] == '\\n') {\n\t\t\to[i] = 0;\n\t\t\tif (*os && *os != '#') {\n\t\t\t\ttrack = strdup (os);\n\t\t\t\tif (!r_list_append (fl, track)) {\n\t\t\t\t\tfree (track);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tos = o + i + 1;\n\t\t}\n\t}\n\tret = r_cons_hud_line (fl, NULL);\n\tfree (o);\n\tr_list_free (fl);\n\treturn ret;\n}",
  "abstract_func": "R_API char *r_cons_hud_line_string(const char *VAR_0) {\n\tif (!r_cons_is_interactive ()) {\n\t\tR_LOG_ERROR (\"Hud mode requires scr.interactive=true\");\n\t\treturn NULL;\n\t}\n\tchar *VAR_1, *VAR_2, *VAR_3, *VAR_4 = strdup (VAR_0);\n\tif (!VAR_4) {\n\t\treturn NULL;\n\t}\n\tr_str_replace_ch (VAR_4, '\\r', 0, true);\n\tr_str_replace_ch (VAR_4, '\\t', 0, true);\n\tr_str_ansi_strip (VAR_4);\n\tRList *VAR_5 = r_list_new ();\n\tint VAR_6;\n\tif (!VAR_5) {\n\t\tfree (VAR_4);\n\t\treturn NULL;\n\t}\n\tVAR_5->free = VAR_7;\n\tfor (VAR_1 = VAR_4, VAR_6 = 0; VAR_4[VAR_6]; VAR_6++) {\n\t\tif (VAR_4[VAR_6] == '\\n') {\n\t\t\tVAR_4[VAR_6] = 0;\n\t\t\tif (*VAR_1 && *VAR_1 != '#') {\n\t\t\t\tVAR_2 = strdup (VAR_1);\n\t\t\t\tif (!r_list_append (VAR_5, VAR_2)) {\n\t\t\t\t\tVAR_7 (VAR_2);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tVAR_1 = VAR_4 + VAR_6 + 1;\n\t\t}\n\t}\n\tVAR_3 = r_cons_hud_line (VAR_5, NULL);\n\tVAR_7 (VAR_4);\n\tr_list_free (VAR_5);\n\treturn VAR_3;\n}",
  "func_graph_path": null,
  "diff_func": "--- func_before\n+++ func_after\n@@ -9,6 +9,7 @@\n \t}\n \tr_str_replace_ch (o, '\\r', 0, true);\n \tr_str_replace_ch (o, '\\t', 0, true);\n+\tr_str_ansi_strip (o);\n \tRList *fl = r_list_new ();\n \tint i;\n \tif (!fl) {",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "\tr_str_ansi_strip (o);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/radareorg/radare2/pull/21231",
  "description": {
    "pr_info": {
      "title": "Colorz",
      "number": 21231
    },
    "comment": [
      "<!--\r\nRead https://github.com/radareorg/radare2/blob/master/DEVELOPERS.md\r\n* PR title must be capitalized, concise and use ##tags\r\n* If the PR is fixing a ticket use 'Fix #1234 - ..' in the commit message\r\n* Follow the coding style, add tests and documentation if necessary\r\n-->\r\n\r\n- [ ] Mark this if you consider it ready to merge\r\n- [ ] I've added tests (optional)\r\n- [ ] I wrote some lines in the [book](https://github.com/radareorg/radare2book) (optional)\r\n\r\n**Description**\r\n\r\n<!-- explain your changes if necessary -->\r\n"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix  \nConfidence Score: 0.95",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "\n\n**Final Output:**\n\nAnalysis: The commit message and code diff indicate a fix for a security vulnerability related to ANSI escape sequence injection. The added function `tr_str_ansi_strip` removes such sequences, preventing potential attacks. This addresses a security issue, fitting the criteria for a Security Vulnerability Fix.\n\nFinal Classification: Security Vulnerability Fix  \nConfidence Score: 0.95"
}