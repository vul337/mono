{
  "cve_id": "CVE-2014-7203",
  "cwe_ids": [
    "CWE-Other"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:N/I:P/A:N",
  "cvss_is_v3": false,
  "repo_name": "zeromq/libzmq",
  "commit_msg": "Problem: curve messages can be replayed\n\nSolution: ensure message short nonces are strictly increasing and validate them",
  "commit_hash": "0900a489213d74feb86fc0b343308fe7884a2a3c",
  "git_url": "https://github.com/zeromq/libzmq/commit/0900a489213d74feb86fc0b343308fe7884a2a3c",
  "file_path": "src/curve_client.cpp",
  "func_name": "zmq::curve_client_t::curve_client_t",
  "func_before": "zmq::curve_client_t::curve_client_t (const options_t &options_) :\n    mechanism_t (options_),\n    state (send_hello),\n    sync()\n{\n    memcpy (public_key, options_.curve_public_key, crypto_box_PUBLICKEYBYTES);\n    memcpy (secret_key, options_.curve_secret_key, crypto_box_SECRETKEYBYTES);\n    memcpy (server_key, options_.curve_server_key, crypto_box_PUBLICKEYBYTES);\n    scoped_lock_t lock (sync);\n#if defined(HAVE_TWEETNACL)\n    // allow opening of /dev/urandom\n    unsigned char tmpbytes[4];\n    randombytes(tmpbytes, 4);\n#else\n    // todo check return code\n    sodium_init();\n#endif\n\n    //  Generate short-term key pair\n    const int rc = crypto_box_keypair (cn_public, cn_secret);\n    zmq_assert (rc == 0);\n}",
  "abstract_func_before": "zmq::curve_client_t::curve_client_t (const options_t &VAR_0) :\n    mechanism_t (VAR_0),\n    state (VAR_1),\n    sync()\n{\n    memcpy (VAR_2, VAR_0.curve_public_key, VAR_3);\n    memcpy (VAR_4, VAR_0.curve_secret_key, VAR_5);\n    memcpy (VAR_6, VAR_0.curve_server_key, VAR_3);\n    scoped_lock_t lock (sync);\n#if defined(VAR_7)\n    /* COMMENT_0 */\n    unsigned char VAR_8[4];\n    randombytes(VAR_8, 4);\n#else\n    /* COMMENT_1 */\n    sodium_init();\n#endif\n\n    /* COMMENT_2 */\n    const int VAR_9 = crypto_box_keypair (VAR_10, VAR_11);\n    zmq_assert (VAR_9 == 0);\n}",
  "func_graph_path_before": "zeromq/libzmq/0900a489213d74feb86fc0b343308fe7884a2a3c/curve_client.cpp/vul/before/5.json",
  "func": "zmq::curve_client_t::curve_client_t (const options_t &options_) :\n    mechanism_t (options_),\n    state (send_hello),\n    cn_nonce(1),\n    cn_peer_nonce(1),\n    sync()\n{\n    memcpy (public_key, options_.curve_public_key, crypto_box_PUBLICKEYBYTES);\n    memcpy (secret_key, options_.curve_secret_key, crypto_box_SECRETKEYBYTES);\n    memcpy (server_key, options_.curve_server_key, crypto_box_PUBLICKEYBYTES);\n    scoped_lock_t lock (sync);\n#if defined(HAVE_TWEETNACL)\n    // allow opening of /dev/urandom\n    unsigned char tmpbytes[4];\n    randombytes(tmpbytes, 4);\n#else\n    // todo check return code\n    sodium_init();\n#endif\n\n    //  Generate short-term key pair\n    const int rc = crypto_box_keypair (cn_public, cn_secret);\n    zmq_assert (rc == 0);\n}",
  "abstract_func": "zmq::curve_client_t::curve_client_t (const options_t &VAR_0) :\n    mechanism_t (VAR_0),\n    state (VAR_1),\n    cn_nonce(1),\n    cn_peer_nonce(1),\n    sync()\n{\n    memcpy (VAR_2, VAR_0.curve_public_key, VAR_3);\n    memcpy (VAR_4, VAR_0.curve_secret_key, VAR_5);\n    memcpy (VAR_6, VAR_0.curve_server_key, VAR_3);\n    scoped_lock_t lock (sync);\n#if defined(VAR_7)\n    /* COMMENT_0 */\n    unsigned char VAR_8[4];\n    randombytes(VAR_8, 4);\n#else\n    /* COMMENT_1 */\n    sodium_init();\n#endif\n\n    /* COMMENT_2 */\n    const int VAR_9 = crypto_box_keypair (VAR_10, VAR_11);\n    zmq_assert (VAR_9 == 0);\n}",
  "func_graph_path": "zeromq/libzmq/0900a489213d74feb86fc0b343308fe7884a2a3c/curve_client.cpp/vul/after/5.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,6 +1,8 @@\n zmq::curve_client_t::curve_client_t (const options_t &options_) :\n     mechanism_t (options_),\n     state (send_hello),\n+    cn_nonce(1),\n+    cn_peer_nonce(1),\n     sync()\n {\n     memcpy (public_key, options_.curve_public_key, crypto_box_PUBLICKEYBYTES);",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "    cn_nonce(1),",
      "    cn_peer_nonce(1),"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/zeromq/libzmq/pull/1189",
  "description": {
    "pr_info": {
      "title": "Problem: curve messages can be replayed",
      "number": 1189
    },
    "comment": [
      "Solution: ensure message short nonces are strictly increasing and validate them\n",
      "Fixes #1191.\n"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix\nConfidence Score: 0.95",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "\n\nThe patch addresses a security issue by preventing replay attacks through nonce management. The code changes are directly aimed at enhancing security by ensuring nonces are strictly increasing, thus mitigating replay vulnerabilities.\n\n**Final Output:**\nAnalysis: The patch fixes a security vulnerability by preventing replay attacks through nonce management.\nFinal Classification: Security Vulnerability Fix\nConfidence Score: 0.95"
}