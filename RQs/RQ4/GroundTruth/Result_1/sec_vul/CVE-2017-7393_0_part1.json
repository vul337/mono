{
  "cve_id": "CVE-2017-7393",
  "cwe_ids": [
    "CWE-415"
  ],
  "cvss_vector": "AV:N/AC:L/Au:S/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "TigerVNC/tigervnc",
  "commit_msg": "Prevent double free by crafted fences.\n\nIf client sent fence with some data, followed by fence with no data (length 0), the original fence data were freed, but the pointer kept pointing at them. Sending one more fence would attempt to free them again.",
  "commit_hash": "f3afa24da144409a3c3a0e35913112583d987671",
  "git_url": "https://github.com/TigerVNC/tigervnc/commit/f3afa24da144409a3c3a0e35913112583d987671",
  "file_path": "common/rfb/SMsgWriter.cxx",
  "func_name": "SMsgWriter::writeFence",
  "func_before": "void SMsgWriter::writeFence(rdr::U32 flags, unsigned len, const char data[])\n{\n  if (!cp->supportsFence)\n    throw Exception(\"Client does not support fences\");\n  if (len > 64)\n    throw Exception(\"Too large fence payload\");\n  if ((flags & ~fenceFlagsSupported) != 0)\n    throw Exception(\"Unknown fence flags\");\n\n  startMsg(msgTypeServerFence);\n  os->pad(3);\n\n  os->writeU32(flags);\n\n  os->writeU8(len);\n  os->writeBytes(data, len);\n\n  endMsg();\n}",
  "abstract_func_before": "void SMsgWriter::writeFence(rdr::U32 VAR_0, unsigned VAR_1, const char VAR_2[])\n{\n  if (!VAR_3->supportsFence)\n    throw Exception(\"Client does not support fences\");\n  if (VAR_1 > 64)\n    throw Exception(\"Too large fence payload\");\n  if ((VAR_0 & ~VAR_4) != 0)\n    throw Exception(\"Unknown fence flags\");\n\n  startMsg(VAR_5);\n  VAR_6->pad(3);\n\n  VAR_6->writeU32(VAR_0);\n\n  VAR_6->writeU8(VAR_1);\n  VAR_6->writeBytes(VAR_2, VAR_1);\n\n  endMsg();\n}",
  "func_graph_path_before": "TigerVNC/tigervnc/f3afa24da144409a3c3a0e35913112583d987671/SMsgWriter.cxx/vul/before/0.json",
  "func": "void SMsgWriter::writeFence(rdr::U32 flags, unsigned len, const char data[])\n{\n  if (!cp->supportsFence)\n    throw Exception(\"Client does not support fences\");\n  if (len > 64)\n    throw Exception(\"Too large fence payload\");\n  if ((flags & ~fenceFlagsSupported) != 0)\n    throw Exception(\"Unknown fence flags\");\n\n  startMsg(msgTypeServerFence);\n  os->pad(3);\n\n  os->writeU32(flags);\n\n  os->writeU8(len);\n\n  if (len > 0)\n    os->writeBytes(data, len);\n\n  endMsg();\n}",
  "abstract_func": "void SMsgWriter::writeFence(rdr::U32 VAR_0, unsigned VAR_1, const char VAR_2[])\n{\n  if (!VAR_3->supportsFence)\n    throw Exception(\"Client does not support fences\");\n  if (VAR_1 > 64)\n    throw Exception(\"Too large fence payload\");\n  if ((VAR_0 & ~VAR_4) != 0)\n    throw Exception(\"Unknown fence flags\");\n\n  startMsg(VAR_5);\n  VAR_6->pad(3);\n\n  VAR_6->writeU32(VAR_0);\n\n  VAR_6->writeU8(VAR_1);\n\n  if (VAR_1 > 0)\n    VAR_6->writeBytes(VAR_2, VAR_1);\n\n  endMsg();\n}",
  "func_graph_path": "TigerVNC/tigervnc/f3afa24da144409a3c3a0e35913112583d987671/SMsgWriter.cxx/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -13,7 +13,9 @@\n   os->writeU32(flags);\n \n   os->writeU8(len);\n-  os->writeBytes(data, len);\n+\n+  if (len > 0)\n+    os->writeBytes(data, len);\n \n   endMsg();\n }",
  "diff_line_info": {
    "deleted_lines": [
      "  os->writeBytes(data, len);"
    ],
    "added_lines": [
      "",
      "  if (len > 0)",
      "    os->writeBytes(data, len);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/TigerVNC/tigervnc/pull/438",
  "description": {
    "pr_info": {
      "title": "Prevent double free by crafted fences.",
      "number": 438
    },
    "comment": [
      "If client sent fence with some data, followed by fence with no data (length 0), the original fence data were freed, but the pointer kept pointing at them. Sending one more fence would attempt to free them again.\r\n\r\nfixes #437 ",
      "This has been assigned CVE-2017-7393"
    ]
  },
  "Bug Filter": "** Security Vulnerability Fix  \n**Confidence Score:** 1.0",
  "Bug Filter Confidence": 1.0,
  "Bug Filter Response": "\n\nThe patch addresses a double free vulnerability by adding a conditional check to prevent writing data when the length is zero, thus fixing a security issue that could lead to memory corruption or DoS.\n\n**Final Classification:** Security Vulnerability Fix  \n**Confidence Score:** 1.0"
}