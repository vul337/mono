{
  "cve_id": "CVE-2021-38388",
  "cwe_ids": [
    "CWE-862"
  ],
  "cvss_vector": "AV:N/AC:L/Au:S/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "line/centraldogma",
  "commit_msg": "Address the comment by @ikhoon",
  "commit_hash": "e83b558ef9eaa44f71b7d9236bdec9f68c85b8bd",
  "git_url": "https://github.com/line/centraldogma/commit/e83b558ef9eaa44f71b7d9236bdec9f68c85b8bd",
  "file_path": "server/src/main/java/com/linecorp/centraldogma/server/internal/api/ContentServiceV1.java",
  "func_name": "checkMirrorLocalRepo",
  "func_before": "private void checkMirrorLocalRepo(Repository repository, Iterable<Change<?>> changes) {\n        // TODO(minwoox): Provide an internal API for mirroring setup with a better UI(?) and check this there.\n        if (Project.REPO_META.equals(repository.name())) {\n            final Optional<String> notAllowedLocalRepo =\n                    Streams.stream(changes)\n                           .filter(change -> DefaultMetaRepository.PATH_MIRRORS.equals(change.path()))\n                           .filter(change -> change.content() != null)\n                           .map(change -> {\n                               final Object content = change.content();\n                               if (content != null && content instanceof JsonNode) {\n                                   final JsonNode node = (JsonNode) content;\n                                   if (!node.isArray()) {\n                                       return null;\n                                   }\n                                   for (JsonNode jsonNode : node) {\n                                       final JsonNode localRepoNode = jsonNode.get(MIRROR_LOCAL_REPO);\n                                       if (localRepoNode != null) {\n                                           final String localRepo = localRepoNode.textValue();\n                                           if (Project.isReservedRepoName(localRepo)) {\n                                               return localRepo;\n                                           }\n                                       }\n                                   }\n                               }\n                               return null;\n                           }).filter(Objects::nonNull).findFirst();\n            if (notAllowedLocalRepo.isPresent()) {\n                throw new IllegalArgumentException(\"invalid \" + MIRROR_LOCAL_REPO + \": \" +\n                                                   notAllowedLocalRepo.get());\n            }\n        }\n    }",
  "abstract_func_before": "private void checkMirrorLocalRepo(Repository VAR_0, Iterable<Change<?>> VAR_1) {\n        /* COMMENT_0 */\n        if (VAR_2.REPO_META.equals(VAR_0.name())) {\n            final Optional<String> VAR_3 =\n                    VAR_4.stream(VAR_1)\n                           .filter(VAR_5 -> VAR_6.PATH_MIRRORS.equals(VAR_5.path()))\n                           .filter(VAR_5 -> VAR_5.content() != null)\n                           .map(VAR_5 -> {\n                               final Object VAR_7 = VAR_5.content();\n                               if (VAR_7 != null && VAR_7 instanceof JsonNode) {\n                                   final JsonNode VAR_8 = (JsonNode) VAR_7;\n                                   if (!VAR_8.isArray()) {\n                                       return null;\n                                   }\n                                   for (JsonNode VAR_9 : VAR_8) {\n                                       final JsonNode VAR_10 = VAR_9.get(VAR_11);\n                                       if (VAR_10 != null) {\n                                           final String VAR_12 = VAR_10.textValue();\n                                           if (VAR_2.isReservedRepoName(VAR_12)) {\n                                               return VAR_12;\n                                           }\n                                       }\n                                   }\n                               }\n                               return null;\n                           }).filter(VAR_13::VAR_14).findFirst();\n            if (VAR_3.isPresent()) {\n                throw new IllegalArgumentException(\"invalid \" + VAR_11 + \": \" +\n                                                   VAR_3.get());\n            }\n        }\n    }",
  "func_graph_path_before": "line/centraldogma/e83b558ef9eaa44f71b7d9236bdec9f68c85b8bd/ContentServiceV1.java/vul/before/0.json",
  "func": "public static void checkMirrorLocalRepo(String repoName, Iterable<Change<?>> changes) {\n        // TODO(minwoox): Provide an internal API for mirroring setup with a better UI(?) and check this there.\n        if (Project.REPO_META.equals(repoName)) {\n            final Optional<String> notAllowedLocalRepo =\n                    Streams.stream(changes)\n                           .filter(change -> DefaultMetaRepository.PATH_MIRRORS.equals(change.path()))\n                           .filter(change -> change.content() != null)\n                           .map(change -> {\n                               final Object content = change.content();\n                               if (content instanceof JsonNode) {\n                                   final JsonNode node = (JsonNode) content;\n                                   if (!node.isArray()) {\n                                       return null;\n                                   }\n                                   for (JsonNode jsonNode : node) {\n                                       final JsonNode localRepoNode = jsonNode.get(MIRROR_LOCAL_REPO);\n                                       if (localRepoNode != null) {\n                                           final String localRepo = localRepoNode.textValue();\n                                           if (Project.isReservedRepoName(localRepo)) {\n                                               return localRepo;\n                                           }\n                                       }\n                                   }\n                               }\n                               return null;\n                           }).filter(Objects::nonNull).findFirst();\n            if (notAllowedLocalRepo.isPresent()) {\n                throw new IllegalArgumentException(\"invalid \" + MIRROR_LOCAL_REPO + \": \" +\n                                                   notAllowedLocalRepo.get());\n            }\n        }\n    }",
  "abstract_func": "public static void checkMirrorLocalRepo(String VAR_0, Iterable<Change<?>> VAR_1) {\n        /* COMMENT_0 */\n        if (VAR_2.REPO_META.equals(VAR_0)) {\n            final Optional<String> VAR_3 =\n                    VAR_4.stream(VAR_1)\n                           .filter(VAR_5 -> VAR_6.PATH_MIRRORS.equals(VAR_5.path()))\n                           .filter(VAR_5 -> VAR_5.content() != null)\n                           .map(VAR_5 -> {\n                               final Object VAR_7 = VAR_5.content();\n                               if (VAR_7 instanceof JsonNode) {\n                                   final JsonNode VAR_8 = (JsonNode) VAR_7;\n                                   if (!VAR_8.isArray()) {\n                                       return null;\n                                   }\n                                   for (JsonNode VAR_9 : VAR_8) {\n                                       final JsonNode VAR_10 = VAR_9.get(VAR_11);\n                                       if (VAR_10 != null) {\n                                           final String VAR_12 = VAR_10.textValue();\n                                           if (VAR_2.isReservedRepoName(VAR_12)) {\n                                               return VAR_12;\n                                           }\n                                       }\n                                   }\n                               }\n                               return null;\n                           }).filter(VAR_13::VAR_14).findFirst();\n            if (VAR_3.isPresent()) {\n                throw new IllegalArgumentException(\"invalid \" + VAR_11 + \": \" +\n                                                   VAR_3.get());\n            }\n        }\n    }",
  "func_graph_path": "line/centraldogma/e83b558ef9eaa44f71b7d9236bdec9f68c85b8bd/ContentServiceV1.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,13 +1,13 @@\n-private void checkMirrorLocalRepo(Repository repository, Iterable<Change<?>> changes) {\n+public static void checkMirrorLocalRepo(String repoName, Iterable<Change<?>> changes) {\n         // TODO(minwoox): Provide an internal API for mirroring setup with a better UI(?) and check this there.\n-        if (Project.REPO_META.equals(repository.name())) {\n+        if (Project.REPO_META.equals(repoName)) {\n             final Optional<String> notAllowedLocalRepo =\n                     Streams.stream(changes)\n                            .filter(change -> DefaultMetaRepository.PATH_MIRRORS.equals(change.path()))\n                            .filter(change -> change.content() != null)\n                            .map(change -> {\n                                final Object content = change.content();\n-                               if (content != null && content instanceof JsonNode) {\n+                               if (content instanceof JsonNode) {\n                                    final JsonNode node = (JsonNode) content;\n                                    if (!node.isArray()) {\n                                        return null;",
  "diff_line_info": {
    "deleted_lines": [
      "private void checkMirrorLocalRepo(Repository repository, Iterable<Change<?>> changes) {",
      "        if (Project.REPO_META.equals(repository.name())) {",
      "                               if (content != null && content instanceof JsonNode) {"
    ],
    "added_lines": [
      "public static void checkMirrorLocalRepo(String repoName, Iterable<Change<?>> changes) {",
      "        if (Project.REPO_META.equals(repoName)) {",
      "                               if (content instanceof JsonNode) {"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/line/centraldogma/pull/621",
  "description": {
    "pr_info": {
      "title": "Prohibit mirroring to internal repositories",
      "number": 621
    },
    "comment": [
      "Motivation:\r\nWe should prohibit mirroring to internal repositories which can cause a security incident.\r\n\r\nModification:\r\n- Raise an exception if the `localRepo` of mirroring setting is one of `meta` and `dogma` which are internal repositories.\r\n\r\nResult:\r\n- You cannot set up mirroring to internal repositories anymore.",
      "# [Codecov](https://codecov.io/gh/line/centraldogma/pull/621?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=line) Report\n> Merging [#621](https://codecov.io/gh/line/centraldogma/pull/621?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=line) (e83b558) into [master](https://codecov.io/gh/line/centraldogma/commit/ed507c70c9e25cfaff4bee25050aca06b12b4843?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=line) (ed507c7) will **increase** coverage by `0.12%`.\n> The diff coverage is `75.75%`.\n\n[![Impacted file tree graph](https://codecov.io/gh/line/centraldogma/pull/621/graphs/tree.svg?width=650&height=150&src=pr&token=5LAOnnwLyE&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=line)](https://codecov.io/gh/line/centraldogma/pull/621?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=line)\n\n```diff\n@@             Coverage Diff              @@\n##             master     #621      +/-   ##\n============================================\n+ Coverage     69.79%   69.91%   +0.12%     \n- Complexity     3262     3276      +14     \n============================================\n  Files           331      331              \n  Lines         12988    13020      +32     \n  Branches       1396     1402       +6     \n============================================\n+ Hits           9065     9103      +38     \n+ Misses         3062     3056       -6     \n  Partials        861      861              \n```\n\n\n| [Impacted Files](https://codecov.io/gh/line/centraldogma/pull/621?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=line) | Coverage Δ | |\n|---|---|---|\n| [...rnal/storage/repository/DefaultMetaRepository.java](https://codecov.io/gh/line/centraldogma/pull/621/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=line#diff-c2VydmVyL3NyYy9tYWluL2phdmEvY29tL2xpbmVjb3JwL2NlbnRyYWxkb2dtYS9zZXJ2ZXIvaW50ZXJuYWwvc3RvcmFnZS9yZXBvc2l0b3J5L0RlZmF1bHRNZXRhUmVwb3NpdG9yeS5qYXZh) | `86.77% <ø> (ø)` | |\n| [...erver/internal/thrift/CentralDogmaServiceImpl.java](https://codecov.io/gh/line/centraldogma/pull/621/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=line#diff-c2VydmVyL3NyYy9tYWluL2phdmEvY29tL2xpbmVjb3JwL2NlbnRyYWxkb2dtYS9zZXJ2ZXIvaW50ZXJuYWwvdGhyaWZ0L0NlbnRyYWxEb2dtYVNlcnZpY2VJbXBsLmphdmE=) | `74.65% <62.50%> (-0.59%)` | :arrow_down: |\n| [...raldogma/server/internal/api/ContentServiceV1.java](https://codecov.io/gh/line/centraldogma/pull/621/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=line#diff-c2VydmVyL3NyYy9tYWluL2phdmEvY29tL2xpbmVjb3JwL2NlbnRyYWxkb2dtYS9zZXJ2ZXIvaW50ZXJuYWwvYXBpL0NvbnRlbnRTZXJ2aWNlVjEuamF2YQ==) | `84.49% <80.00%> (-1.09%)` | :arrow_down: |\n| [...ient/armeria/legacy/LegacyCentralDogmaBuilder.java](https://codecov.io/gh/line/centraldogma/pull/621/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=line#diff-Y2xpZW50L2phdmEtYXJtZXJpYS1sZWdhY3kvc3JjL21haW4vamF2YS9jb20vbGluZWNvcnAvY2VudHJhbGRvZ21hL2NsaWVudC9hcm1lcmlhL2xlZ2FjeS9MZWdhY3lDZW50cmFsRG9nbWFCdWlsZGVyLmphdmE=) | `81.48% <0.00%> (-3.71%)` | :arrow_down: |\n| [...al/storage/repository/cache/CachingRepository.java](https://codecov.io/gh/line/centraldogma/pull/621/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=line#diff-c2VydmVyL3NyYy9tYWluL2phdmEvY29tL2xpbmVjb3JwL2NlbnRyYWxkb2dtYS9zZXJ2ZXIvaW50ZXJuYWwvc3RvcmFnZS9yZXBvc2l0b3J5L2NhY2hlL0NhY2hpbmdSZXBvc2l0b3J5LmphdmE=) | `89.31% <0.00%> (+0.76%)` | :arrow_up: |\n| [...internal/storage/DirectoryBasedStorageManager.java](https://codecov.io/gh/line/centraldogma/pull/621/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=line#diff-c2VydmVyL3NyYy9tYWluL2phdmEvY29tL2xpbmVjb3JwL2NlbnRyYWxkb2dtYS9zZXJ2ZXIvaW50ZXJuYWwvc3RvcmFnZS9EaXJlY3RvcnlCYXNlZFN0b3JhZ2VNYW5hZ2VyLmphdmE=) | `65.06% <0.00%> (+0.87%)` | :arrow_up: |\n| [.../centraldogma/internal/client/AbstractWatcher.java](https://codecov.io/gh/line/centraldogma/pull/621/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=line#diff-Y2xpZW50L2phdmEvc3JjL21haW4vamF2YS9jb20vbGluZWNvcnAvY2VudHJhbGRvZ21hL2ludGVybmFsL2NsaWVudC9BYnN0cmFjdFdhdGNoZXIuamF2YQ==) | `80.68% <0.00%> (+2.75%)` | :arrow_up: |\n| [...a/server/internal/api/HttpApiExceptionHandler.java](https://codecov.io/gh/line/centraldogma/pull/621/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=line#diff-c2VydmVyL3NyYy9tYWluL2phdmEvY29tL2xpbmVjb3JwL2NlbnRyYWxkb2dtYS9zZXJ2ZXIvaW50ZXJuYWwvYXBpL0h0dHBBcGlFeGNlcHRpb25IYW5kbGVyLmphdmE=) | `84.00% <0.00%> (+4.00%)` | :arrow_up: |\n| [...ogma/client/armeria/CentralDogmaEndpointGroup.java](https://codecov.io/gh/line/centraldogma/pull/621/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=line#diff-Y2xpZW50L2phdmEtYXJtZXJpYS9zcmMvbWFpbi9qYXZhL2NvbS9saW5lY29ycC9jZW50cmFsZG9nbWEvY2xpZW50L2FybWVyaWEvQ2VudHJhbERvZ21hRW5kcG9pbnRHcm91cC5qYXZh) | `65.38% <0.00%> (+7.69%)` | :arrow_up: |\n| [...aldogma/client/armeria/CompositeEndpointGroup.java](https://codecov.io/gh/line/centraldogma/pull/621/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=line#diff-Y2xpZW50L2phdmEtYXJtZXJpYS9zcmMvbWFpbi9qYXZhL2NvbS9saW5lY29ycC9jZW50cmFsZG9nbWEvY2xpZW50L2FybWVyaWEvQ29tcG9zaXRlRW5kcG9pbnRHcm91cC5qYXZh) | `100.00% <0.00%> (+18.75%)` | :arrow_up: |\n| ... and [1 more](https://codecov.io/gh/line/centraldogma/pull/621/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=line) | |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/line/centraldogma/pull/621?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=line).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=line)\n> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/line/centraldogma/pull/621?src=pr&el=footer&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=line). Last update [ed507c7...e83b558](https://codecov.io/gh/line/centraldogma/pull/621?src=pr&el=lastupdated&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=line). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=line).\n",
      "Thanks for reviewing. 😉 "
    ]
  },
  "Bug Filter": "** Security Vulnerability Fix  \n**Confidence Score:** 0.95",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "\n\nThe patch addresses a security concern by preventing mirroring to internal repositories, which could lead to security incidents. The code changes enforce this by checking for specific repo names and raising exceptions. This clearly falls under a security fix.\n\n**Final Classification:** Security Vulnerability Fix  \n**Confidence Score:** 0.95"
}