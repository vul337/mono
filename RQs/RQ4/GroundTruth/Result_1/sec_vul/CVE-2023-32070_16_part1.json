{
  "cve_id": "CVE-2023-32070",
  "cwe_ids": [
    "CWE-79"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
  "cvss_is_v3": true,
  "repo_name": "xwiki/xwiki-rendering",
  "commit_msg": "XRENDERING-663: Restrict allowed attributes in HTML rendering\n\n* Change HTML renderers to only print allowed attributes and elements.\n* Add prefix to forbidden attributes to preserve them in XWiki syntax.\n* Adapt tests to expect that invalid attributes get a prefix.",
  "commit_hash": "c40e2f5f9482ec6c3e71dbf1fff5ba8a5e44cdc1",
  "git_url": "https://github.com/xwiki/xwiki-rendering/commit/c40e2f5f9482ec6c3e71dbf1fff5ba8a5e44cdc1",
  "file_path": "xwiki-rendering-syntaxes/xwiki-rendering-syntax-xhtml/src/main/java/org/xwiki/rendering/internal/parser/xhtml/wikimodel/XHTMLXWikiGeneratorListener.java",
  "func_name": "cleanParametersFromMetadata",
  "func_before": "private static WikiParameters cleanParametersFromMetadata(WikiParameters parameters)\n    {\n        WikiParameters wikiParameters = new WikiParameters();\n\n        for (WikiParameter parameter : parameters) {\n            boolean acceptParameter = !(parameter.getKey().startsWith(METADATA_ATTRIBUTE_PREFIX)\n                || (\n                    parameter.getKey().equals(CLASS_ATTRIBUTE) && parameter.getValue().equals(METADATA_CONTAINER_CLASS)\n            ));\n            if (acceptParameter) {\n                wikiParameters = wikiParameters.addParameter(parameter.getKey(), parameter.getValue());\n            }\n        }\n\n        return wikiParameters;\n    }",
  "abstract_func_before": "private static WikiParameters cleanParametersFromMetadata(WikiParameters VAR_0)\n    {\n        WikiParameters VAR_1 = new WikiParameters();\n\n        for (WikiParameter VAR_2 : VAR_0) {\n            boolean VAR_3 = !(VAR_2.getKey().startsWith(VAR_4)\n                || (\n                    VAR_2.getKey().equals(VAR_5) && VAR_2.getValue().equals(VAR_6)\n            ));\n            if (VAR_3) {\n                VAR_1 = VAR_1.addParameter(VAR_2.getKey(), VAR_2.getValue());\n            }\n        }\n\n        return VAR_1;\n    }",
  "func_graph_path_before": "xwiki/xwiki-rendering/c40e2f5f9482ec6c3e71dbf1fff5ba8a5e44cdc1/XHTMLXWikiGeneratorListener.java/vul/before/0.json",
  "func": "private static WikiParameters cleanParametersFromMetadata(WikiParameters parameters)\n    {\n        WikiParameters wikiParameters = new WikiParameters();\n\n        for (WikiParameter parameter : parameters) {\n            boolean acceptParameter = !(parameter.getKey().startsWith(METADATA_ATTRIBUTE_PREFIX)\n                || (\n                parameter.getKey().equals(CLASS_ATTRIBUTE) && parameter.getValue().equals(METADATA_CONTAINER_CLASS)\n            ));\n            if (acceptParameter) {\n                wikiParameters = wikiParameters.addParameter(parameter.getKey(), parameter.getValue());\n            }\n        }\n\n        return wikiParameters;\n    }",
  "abstract_func": "private static WikiParameters cleanParametersFromMetadata(WikiParameters VAR_0)\n    {\n        WikiParameters VAR_1 = new WikiParameters();\n\n        for (WikiParameter VAR_2 : VAR_0) {\n            boolean VAR_3 = !(VAR_2.getKey().startsWith(VAR_4)\n                || (\n                VAR_2.getKey().equals(VAR_5) && VAR_2.getValue().equals(VAR_6)\n            ));\n            if (VAR_3) {\n                VAR_1 = VAR_1.addParameter(VAR_2.getKey(), VAR_2.getValue());\n            }\n        }\n\n        return VAR_1;\n    }",
  "func_graph_path": "xwiki/xwiki-rendering/c40e2f5f9482ec6c3e71dbf1fff5ba8a5e44cdc1/XHTMLXWikiGeneratorListener.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -5,7 +5,7 @@\n         for (WikiParameter parameter : parameters) {\n             boolean acceptParameter = !(parameter.getKey().startsWith(METADATA_ATTRIBUTE_PREFIX)\n                 || (\n-                    parameter.getKey().equals(CLASS_ATTRIBUTE) && parameter.getValue().equals(METADATA_CONTAINER_CLASS)\n+                parameter.getKey().equals(CLASS_ATTRIBUTE) && parameter.getValue().equals(METADATA_CONTAINER_CLASS)\n             ));\n             if (acceptParameter) {\n                 wikiParameters = wikiParameters.addParameter(parameter.getKey(), parameter.getValue());",
  "diff_line_info": {
    "deleted_lines": [
      "                    parameter.getKey().equals(CLASS_ATTRIBUTE) && parameter.getValue().equals(METADATA_CONTAINER_CLASS)"
    ],
    "added_lines": [
      "                parameter.getKey().equals(CLASS_ATTRIBUTE) && parameter.getValue().equals(METADATA_CONTAINER_CLASS)"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/xwiki/xwiki-rendering/pull/212",
  "description": {
    "pr_info": {
      "title": "XRENDERING-663: Restrict allowed attributes in HTML rendering",
      "number": 212
    },
    "comment": [
      "* Change HTML renderers to only print allowed attributes\r\n* Adapt tests to not use invalid attributes\r\n\r\nThis depends on xwiki/xwiki-commons#170.\r\n\r\nJira issue: https://jira.xwiki.org/browse/XRENDERING-663",
      "I'm afraid that totally forbidding some HTML elements even in context where it's not a threat will cause quite a few retro compatibility problems.\r\n\r\nA pity renderers don't support input properties like filters to at least have a way to enable/disable the sanitizer depending on the context. I guess we could use the RenderingContext for that (temporarily disable the sanitizer or set a custom sanitizer in the RenderingContext for the renderer to use). Or make the DefaultHTMLElementSanitizer look at the ExecutionContext for a custom sanitizer hint (the good thing with that solution is that you can set it even in an extension which depends on a version of XWiki where the sanitizer classes don't exist yet since it's just a String key and a String value).",
      "I've added a feature to preserve disallowed attributes as attributes with prefix `data-xwiki-translated-attribute-` such that attributes like `latex-template` that are used by the [LaTeX Syntax](https://extensions.xwiki.org/xwiki/bin/view/Extension/LaTeX/Syntax%201.0/#HSpecificCustomTemplates) aren't removed when using the WYSIWYG editor and rebased this PR on top of #217 as otherwise the prefixed attributes aren't preserved."
    ]
  },
  "Bug Filter": "** Security Vulnerability Fix  \n**Confidence Score:** 0.95",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "\n\nThe patch modifies HTML rendering to restrict attributes, preventing potential security risks like XSS attacks by sanitizing input. \n\n**Final Classification:** Security Vulnerability Fix  \n**Confidence Score:** 0.95"
}