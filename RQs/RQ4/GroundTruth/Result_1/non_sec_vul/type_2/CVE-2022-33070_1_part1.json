{
  "cve_id": "CVE-2022-33070",
  "cwe_ids": [
    "CWE-Other"
  ],
  "cvss_vector": "AV:N/AC:M/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "protobuf-c",
  "commit_msg": "Only shift unsigned values to avoid implementation-specific behavior.\nThis converts the arithmetic shifts to logical shifts.\nIt is based in part on a stackoverflow answer by John Schultz,\nhttps://stackoverflow.com/questions/4533076/google-protocol-buffers-zigzag-encoding",
  "commit_hash": "6e389ce2c34355d36009a8fb1666bed29fa2d4f4",
  "git_url": "https://github.com/protobuf-c/protobuf-c/commit/6e389ce2c34355d36009a8fb1666bed29fa2d4f4",
  "file_path": "protobuf-c/protobuf-c.c",
  "func_name": "int32_pack",
  "func_before": "static inline size_t\nint32_pack(int32_t value, uint8_t *out)\n{\n\tif (value < 0) {\n\t\tout[0] = value | 0x80;\n\t\tout[1] = (value >> 7) | 0x80;\n\t\tout[2] = (value >> 14) | 0x80;\n\t\tout[3] = (value >> 21) | 0x80;\n\t\tout[4] = (value >> 28) | 0x80;\n\t\tout[5] = out[6] = out[7] = out[8] = 0xff;\n\t\tout[9] = 0x01;\n\t\treturn 10;\n\t} else {\n\t\treturn uint32_pack(value, out);\n\t}\n}",
  "abstract_func_before": "static inline size_t\nint32_pack(int32_t VAR_0, uint8_t *VAR_1)\n{\n\tif (VAR_0 < 0) {\n\t\tVAR_1[0] = VAR_0 | 0x80;\n\t\tVAR_1[1] = (VAR_0 >> 7) | 0x80;\n\t\tVAR_1[2] = (VAR_0 >> 14) | 0x80;\n\t\tVAR_1[3] = (VAR_0 >> 21) | 0x80;\n\t\tVAR_1[4] = (VAR_0 >> 28) | 0x80;\n\t\tVAR_1[5] = VAR_1[6] = VAR_1[7] = VAR_1[8] = 0xff;\n\t\tVAR_1[9] = 0x01;\n\t\treturn 10;\n\t} else {\n\t\treturn uint32_pack(VAR_0, VAR_1);\n\t}\n}",
  "func_graph_path_before": "protobuf-c/6e389ce2c34355d36009a8fb1666bed29fa2d4f4/protobuf-c.c/vul/before/2.json",
  "func": "static inline size_t\nint32_pack(uint32_t value, uint8_t *out)\n{\n\tif ((int32_t)value < 0) {\n\t\tout[0] = value | 0x80;\n\t\tout[1] = (value >> 7) | 0x80;\n\t\tout[2] = (value >> 14) | 0x80;\n\t\tout[3] = (value >> 21) | 0x80;\n\t\tout[4] = (value >> 28) | 0xf0;\n\t\tout[5] = out[6] = out[7] = out[8] = 0xff;\n\t\tout[9] = 0x01;\n\t\treturn 10;\n\t} else {\n\t\treturn uint32_pack(value, out);\n\t}\n}",
  "abstract_func": "static inline size_t\nint32_pack(uint32_t VAR_0, uint8_t *VAR_1)\n{\n\tif ((int32_t)VAR_0 < 0) {\n\t\tVAR_1[0] = VAR_0 | 0x80;\n\t\tVAR_1[1] = (VAR_0 >> 7) | 0x80;\n\t\tVAR_1[2] = (VAR_0 >> 14) | 0x80;\n\t\tVAR_1[3] = (VAR_0 >> 21) | 0x80;\n\t\tVAR_1[4] = (VAR_0 >> 28) | 0xf0;\n\t\tVAR_1[5] = VAR_1[6] = VAR_1[7] = VAR_1[8] = 0xff;\n\t\tVAR_1[9] = 0x01;\n\t\treturn 10;\n\t} else {\n\t\treturn uint32_pack(VAR_0, VAR_1);\n\t}\n}",
  "func_graph_path": "protobuf-c/6e389ce2c34355d36009a8fb1666bed29fa2d4f4/protobuf-c.c/vul/after/2.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,12 +1,12 @@\n static inline size_t\n-int32_pack(int32_t value, uint8_t *out)\n+int32_pack(uint32_t value, uint8_t *out)\n {\n-\tif (value < 0) {\n+\tif ((int32_t)value < 0) {\n \t\tout[0] = value | 0x80;\n \t\tout[1] = (value >> 7) | 0x80;\n \t\tout[2] = (value >> 14) | 0x80;\n \t\tout[3] = (value >> 21) | 0x80;\n-\t\tout[4] = (value >> 28) | 0x80;\n+\t\tout[4] = (value >> 28) | 0xf0;\n \t\tout[5] = out[6] = out[7] = out[8] = 0xff;\n \t\tout[9] = 0x01;\n \t\treturn 10;",
  "diff_line_info": {
    "deleted_lines": [
      "int32_pack(int32_t value, uint8_t *out)",
      "\tif (value < 0) {",
      "\t\tout[4] = (value >> 28) | 0x80;"
    ],
    "added_lines": [
      "int32_pack(uint32_t value, uint8_t *out)",
      "\tif ((int32_t)value < 0) {",
      "\t\tout[4] = (value >> 28) | 0xf0;"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/protobuf-c/protobuf-c/pull/508",
  "description": {
    "pr_info": {
      "title": "Only shift unsigned values to avoid implementation-specific behavior.",
      "number": 508
    },
    "comment": [
      "This converts the arithmetic shifts to logical shifts and fixes issue #506.\r\nIt is based in part on a stackoverflow answer by John Schultz,\r\nhttps://stackoverflow.com/questions/4533076/google-protocol-buffers-zigzag-encoding"
    ]
  },
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "\n\nThe patch addresses a bug in handling shifts for signed integers, converting them to unsigned to ensure correct logical shifts. This change improves code portability and correctness but doesn't directly resolve a security vulnerability.\n\n**Final Classification:** Defect Remediation & Feature Upgrades  \n**Confidence Score:** 0.95"
}