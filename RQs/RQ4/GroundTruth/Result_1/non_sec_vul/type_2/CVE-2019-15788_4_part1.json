{
  "cve_id": "CVE-2019-15788",
  "cwe_ids": [
    "CWE-190"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "NVIDIA-Genomics-Research/GenomeWorks",
  "commit_msg": "[cudapoa] replace size_t with int64_t",
  "commit_hash": "8524f2c0c690ff594a9ebc6d729351b07a1fc5f0",
  "git_url": "https://github.com/NVIDIA-Genomics-Research/GenomeWorks/commit/8524f2c0c690ff594a9ebc6d729351b07a1fc5f0",
  "file_path": "cudapoa/src/allocate_block.cpp",
  "func_name": "BatchBlock::get_graph_details",
  "func_before": "void BatchBlock::get_graph_details(GraphDetails** graph_details_d_p)\n{\n    GraphDetails* graph_details_d{};\n\n    // on host\n    graph_details_d = reinterpret_cast<GraphDetails*>(&block_data_h_[offset_h_]);\n    offset_h_ += sizeof(GraphDetails);\n\n    // on device\n    graph_details_d->nodes = &block_data_d_[offset_d_];\n    offset_d_ += cudautils::align<size_t, 8>(sizeof(uint8_t) * max_nodes_per_window_ * max_poas_);\n    graph_details_d->node_alignments = reinterpret_cast<uint16_t*>(&block_data_d_[offset_d_]);\n    offset_d_ += cudautils::align<size_t, 8>(sizeof(uint16_t) * max_nodes_per_window_ * CUDAPOA_MAX_NODE_ALIGNMENTS * max_poas_);\n    graph_details_d->node_alignment_count = reinterpret_cast<uint16_t*>(&block_data_d_[offset_d_]);\n    offset_d_ += cudautils::align<size_t, 8>(sizeof(uint16_t) * max_nodes_per_window_ * max_poas_);\n    graph_details_d->incoming_edges = reinterpret_cast<uint16_t*>(&block_data_d_[offset_d_]);\n    offset_d_ += cudautils::align<size_t, 8>(sizeof(uint16_t) * max_nodes_per_window_ * CUDAPOA_MAX_NODE_EDGES * max_poas_);\n    graph_details_d->incoming_edge_count = reinterpret_cast<uint16_t*>(&block_data_d_[offset_d_]);\n    offset_d_ += cudautils::align<size_t, 8>(sizeof(uint16_t) * max_nodes_per_window_ * max_poas_);\n    graph_details_d->outgoing_edges = reinterpret_cast<uint16_t*>(&block_data_d_[offset_d_]);\n    offset_d_ += cudautils::align<size_t, 8>(sizeof(uint16_t) * max_nodes_per_window_ * CUDAPOA_MAX_NODE_EDGES * max_poas_);\n    graph_details_d->outgoing_edge_count = reinterpret_cast<uint16_t*>(&block_data_d_[offset_d_]);\n    offset_d_ += cudautils::align<size_t, 8>(sizeof(uint16_t) * max_nodes_per_window_ * max_poas_);\n    graph_details_d->incoming_edge_weights = reinterpret_cast<uint16_t*>(&block_data_d_[offset_d_]);\n    offset_d_ += cudautils::align<size_t, 8>(sizeof(uint16_t) * max_nodes_per_window_ * CUDAPOA_MAX_NODE_EDGES * max_poas_);\n    graph_details_d->outgoing_edge_weights = reinterpret_cast<uint16_t*>(&block_data_d_[offset_d_]);\n    offset_d_ += cudautils::align<size_t, 8>(sizeof(uint16_t) * max_nodes_per_window_ * CUDAPOA_MAX_NODE_EDGES * max_poas_);\n    graph_details_d->sorted_poa = reinterpret_cast<uint16_t*>(&block_data_d_[offset_d_]);\n    offset_d_ += cudautils::align<size_t, 8>(sizeof(uint16_t) * max_nodes_per_window_ * max_poas_);\n    graph_details_d->sorted_poa_node_map = reinterpret_cast<uint16_t*>(&block_data_d_[offset_d_]);\n    offset_d_ += cudautils::align<size_t, 8>(sizeof(uint16_t) * max_nodes_per_window_ * max_poas_);\n    graph_details_d->sorted_poa_local_edge_count = reinterpret_cast<uint16_t*>(&block_data_d_[offset_d_]);\n    offset_d_ += cudautils::align<size_t, 8>(sizeof(uint16_t) * max_nodes_per_window_ * max_poas_);\n    if (output_mask_ & OutputType::consensus)\n    {\n        graph_details_d->consensus_scores = reinterpret_cast<int32_t*>(&block_data_d_[offset_d_]);\n        offset_d_ += cudautils::align<size_t, 8>(sizeof(int32_t) * max_nodes_per_window_ * max_poas_);\n        graph_details_d->consensus_predecessors = reinterpret_cast<int16_t*>(&block_data_d_[offset_d_]);\n        offset_d_ += cudautils::align<size_t, 8>(sizeof(int16_t) * max_nodes_per_window_ * max_poas_);\n    }\n\n    graph_details_d->node_marks = reinterpret_cast<uint8_t*>(&block_data_d_[offset_d_]);\n    offset_d_ += cudautils::align<size_t, 8>(sizeof(int8_t) * max_nodes_per_window_ * max_poas_);\n    graph_details_d->check_aligned_nodes = reinterpret_cast<bool*>(&block_data_d_[offset_d_]);\n    offset_d_ += cudautils::align<size_t, 8>(sizeof(bool) * max_nodes_per_window_ * max_poas_);\n    graph_details_d->nodes_to_visit = reinterpret_cast<uint16_t*>(&block_data_d_[offset_d_]);\n    offset_d_ += cudautils::align<size_t, 8>(sizeof(uint16_t) * max_nodes_per_window_ * max_poas_);\n    graph_details_d->node_coverage_counts = reinterpret_cast<uint16_t*>(&block_data_d_[offset_d_]);\n    offset_d_ += cudautils::align<size_t, 8>(sizeof(uint16_t) * max_nodes_per_window_ * max_poas_);\n    if (output_mask_ & OutputType::msa)\n    {\n        graph_details_d->outgoing_edges_coverage = reinterpret_cast<uint16_t*>(&block_data_d_[offset_d_]);\n        offset_d_ += cudautils::align<size_t, 8>(sizeof(uint16_t) * max_nodes_per_window_ * CUDAPOA_MAX_NODE_EDGES * max_sequences_per_poa_ * max_poas_);\n        graph_details_d->outgoing_edges_coverage_count = reinterpret_cast<uint16_t*>(&block_data_d_[offset_d_]);\n        offset_d_ += cudautils::align<size_t, 8>(sizeof(uint16_t) * max_nodes_per_window_ * CUDAPOA_MAX_NODE_EDGES * max_poas_);\n        graph_details_d->node_id_to_msa_pos = reinterpret_cast<int16_t*>(&block_data_d_[offset_d_]);\n        offset_d_ += cudautils::align<size_t, 8>(sizeof(uint16_t) * max_nodes_per_window_ * max_poas_);\n    }\n\n    *graph_details_d_p = graph_details_d;\n}",
  "abstract_func_before": "void BatchBlock::get_graph_details(GraphDetails** VAR_0)\n{\n    GraphDetails* VAR_1{};\n\n    /* COMMENT_0 */\n    VAR_1 = VAR_2<GraphDetails*>(&VAR_3[VAR_4]);\n    VAR_4 += sizeof(GraphDetails);\n\n    /* COMMENT_1 */\n    VAR_1->nodes = &VAR_5[VAR_6];\n    VAR_6 += cudautils::VAR_7<size_t, 8>(sizeof(uint8_t) * VAR_8 * VAR_9);\n    VAR_1->node_alignments = VAR_2<uint16_t*>(&VAR_5[VAR_6]);\n    VAR_6 += cudautils::VAR_7<size_t, 8>(sizeof(uint16_t) * VAR_8 * VAR_10 * VAR_9);\n    VAR_1->node_alignment_count = VAR_2<uint16_t*>(&VAR_5[VAR_6]);\n    VAR_6 += cudautils::VAR_7<size_t, 8>(sizeof(uint16_t) * VAR_8 * VAR_9);\n    VAR_1->incoming_edges = VAR_2<uint16_t*>(&VAR_5[VAR_6]);\n    VAR_6 += cudautils::VAR_7<size_t, 8>(sizeof(uint16_t) * VAR_8 * VAR_11 * VAR_9);\n    VAR_1->incoming_edge_count = VAR_2<uint16_t*>(&VAR_5[VAR_6]);\n    VAR_6 += cudautils::VAR_7<size_t, 8>(sizeof(uint16_t) * VAR_8 * VAR_9);\n    VAR_1->outgoing_edges = VAR_2<uint16_t*>(&VAR_5[VAR_6]);\n    VAR_6 += cudautils::VAR_7<size_t, 8>(sizeof(uint16_t) * VAR_8 * VAR_11 * VAR_9);\n    VAR_1->outgoing_edge_count = VAR_2<uint16_t*>(&VAR_5[VAR_6]);\n    VAR_6 += cudautils::VAR_7<size_t, 8>(sizeof(uint16_t) * VAR_8 * VAR_9);\n    VAR_1->incoming_edge_weights = VAR_2<uint16_t*>(&VAR_5[VAR_6]);\n    VAR_6 += cudautils::VAR_7<size_t, 8>(sizeof(uint16_t) * VAR_8 * VAR_11 * VAR_9);\n    VAR_1->outgoing_edge_weights = VAR_2<uint16_t*>(&VAR_5[VAR_6]);\n    VAR_6 += cudautils::VAR_7<size_t, 8>(sizeof(uint16_t) * VAR_8 * VAR_11 * VAR_9);\n    VAR_1->sorted_poa = VAR_2<uint16_t*>(&VAR_5[VAR_6]);\n    VAR_6 += cudautils::VAR_7<size_t, 8>(sizeof(uint16_t) * VAR_8 * VAR_9);\n    VAR_1->sorted_poa_node_map = VAR_2<uint16_t*>(&VAR_5[VAR_6]);\n    VAR_6 += cudautils::VAR_7<size_t, 8>(sizeof(uint16_t) * VAR_8 * VAR_9);\n    VAR_1->sorted_poa_local_edge_count = VAR_2<uint16_t*>(&VAR_5[VAR_6]);\n    VAR_6 += cudautils::VAR_7<size_t, 8>(sizeof(uint16_t) * VAR_8 * VAR_9);\n    if (VAR_12 & OutputType::consensus)\n    {\n        VAR_1->consensus_scores = VAR_2<int32_t*>(&VAR_5[VAR_6]);\n        VAR_6 += cudautils::VAR_7<size_t, 8>(sizeof(int32_t) * VAR_8 * VAR_9);\n        VAR_1->consensus_predecessors = VAR_2<int16_t*>(&VAR_5[VAR_6]);\n        VAR_6 += cudautils::VAR_7<size_t, 8>(sizeof(int16_t) * VAR_8 * VAR_9);\n    }\n\n    VAR_1->node_marks = VAR_2<uint8_t*>(&VAR_5[VAR_6]);\n    VAR_6 += cudautils::VAR_7<size_t, 8>(sizeof(int8_t) * VAR_8 * VAR_9);\n    VAR_1->check_aligned_nodes = VAR_2<bool*>(&VAR_5[VAR_6]);\n    VAR_6 += cudautils::VAR_7<size_t, 8>(sizeof(bool) * VAR_8 * VAR_9);\n    VAR_1->nodes_to_visit = VAR_2<uint16_t*>(&VAR_5[VAR_6]);\n    VAR_6 += cudautils::VAR_7<size_t, 8>(sizeof(uint16_t) * VAR_8 * VAR_9);\n    VAR_1->node_coverage_counts = VAR_2<uint16_t*>(&VAR_5[VAR_6]);\n    VAR_6 += cudautils::VAR_7<size_t, 8>(sizeof(uint16_t) * VAR_8 * VAR_9);\n    if (VAR_12 & OutputType::msa)\n    {\n        VAR_1->outgoing_edges_coverage = VAR_2<uint16_t*>(&VAR_5[VAR_6]);\n        VAR_6 += cudautils::VAR_7<size_t, 8>(sizeof(uint16_t) * VAR_8 * VAR_11 * VAR_13 * VAR_9);\n        VAR_1->outgoing_edges_coverage_count = VAR_2<uint16_t*>(&VAR_5[VAR_6]);\n        VAR_6 += cudautils::VAR_7<size_t, 8>(sizeof(uint16_t) * VAR_8 * VAR_11 * VAR_9);\n        VAR_1->node_id_to_msa_pos = VAR_2<int16_t*>(&VAR_5[VAR_6]);\n        VAR_6 += cudautils::VAR_7<size_t, 8>(sizeof(uint16_t) * VAR_8 * VAR_9);\n    }\n\n    *VAR_0 = VAR_1;\n}",
  "func_graph_path_before": "NVIDIA-Genomics-Research/GenomeWorks/8524f2c0c690ff594a9ebc6d729351b07a1fc5f0/allocate_block.cpp/vul/before/4.json",
  "func": "void BatchBlock::get_graph_details(GraphDetails** graph_details_d_p)\n{\n    GraphDetails* graph_details_d{};\n\n    // on host\n    graph_details_d = reinterpret_cast<GraphDetails*>(&block_data_h_[offset_h_]);\n    offset_h_ += sizeof(GraphDetails);\n\n    // on device\n    graph_details_d->nodes = &block_data_d_[offset_d_];\n    offset_d_ += cudautils::align<int64_t, 8>(sizeof(uint8_t) * max_nodes_per_window_ * max_poas_);\n    graph_details_d->node_alignments = reinterpret_cast<uint16_t*>(&block_data_d_[offset_d_]);\n    offset_d_ += cudautils::align<int64_t, 8>(sizeof(uint16_t) * max_nodes_per_window_ * CUDAPOA_MAX_NODE_ALIGNMENTS * max_poas_);\n    graph_details_d->node_alignment_count = reinterpret_cast<uint16_t*>(&block_data_d_[offset_d_]);\n    offset_d_ += cudautils::align<int64_t, 8>(sizeof(uint16_t) * max_nodes_per_window_ * max_poas_);\n    graph_details_d->incoming_edges = reinterpret_cast<uint16_t*>(&block_data_d_[offset_d_]);\n    offset_d_ += cudautils::align<int64_t, 8>(sizeof(uint16_t) * max_nodes_per_window_ * CUDAPOA_MAX_NODE_EDGES * max_poas_);\n    graph_details_d->incoming_edge_count = reinterpret_cast<uint16_t*>(&block_data_d_[offset_d_]);\n    offset_d_ += cudautils::align<int64_t, 8>(sizeof(uint16_t) * max_nodes_per_window_ * max_poas_);\n    graph_details_d->outgoing_edges = reinterpret_cast<uint16_t*>(&block_data_d_[offset_d_]);\n    offset_d_ += cudautils::align<int64_t, 8>(sizeof(uint16_t) * max_nodes_per_window_ * CUDAPOA_MAX_NODE_EDGES * max_poas_);\n    graph_details_d->outgoing_edge_count = reinterpret_cast<uint16_t*>(&block_data_d_[offset_d_]);\n    offset_d_ += cudautils::align<int64_t, 8>(sizeof(uint16_t) * max_nodes_per_window_ * max_poas_);\n    graph_details_d->incoming_edge_weights = reinterpret_cast<uint16_t*>(&block_data_d_[offset_d_]);\n    offset_d_ += cudautils::align<int64_t, 8>(sizeof(uint16_t) * max_nodes_per_window_ * CUDAPOA_MAX_NODE_EDGES * max_poas_);\n    graph_details_d->outgoing_edge_weights = reinterpret_cast<uint16_t*>(&block_data_d_[offset_d_]);\n    offset_d_ += cudautils::align<int64_t, 8>(sizeof(uint16_t) * max_nodes_per_window_ * CUDAPOA_MAX_NODE_EDGES * max_poas_);\n    graph_details_d->sorted_poa = reinterpret_cast<uint16_t*>(&block_data_d_[offset_d_]);\n    offset_d_ += cudautils::align<int64_t, 8>(sizeof(uint16_t) * max_nodes_per_window_ * max_poas_);\n    graph_details_d->sorted_poa_node_map = reinterpret_cast<uint16_t*>(&block_data_d_[offset_d_]);\n    offset_d_ += cudautils::align<int64_t, 8>(sizeof(uint16_t) * max_nodes_per_window_ * max_poas_);\n    graph_details_d->sorted_poa_local_edge_count = reinterpret_cast<uint16_t*>(&block_data_d_[offset_d_]);\n    offset_d_ += cudautils::align<int64_t, 8>(sizeof(uint16_t) * max_nodes_per_window_ * max_poas_);\n    if (output_mask_ & OutputType::consensus)\n    {\n        graph_details_d->consensus_scores = reinterpret_cast<int32_t*>(&block_data_d_[offset_d_]);\n        offset_d_ += cudautils::align<int64_t, 8>(sizeof(int32_t) * max_nodes_per_window_ * max_poas_);\n        graph_details_d->consensus_predecessors = reinterpret_cast<int16_t*>(&block_data_d_[offset_d_]);\n        offset_d_ += cudautils::align<int64_t, 8>(sizeof(int16_t) * max_nodes_per_window_ * max_poas_);\n    }\n\n    graph_details_d->node_marks = reinterpret_cast<uint8_t*>(&block_data_d_[offset_d_]);\n    offset_d_ += cudautils::align<int64_t, 8>(sizeof(int8_t) * max_nodes_per_window_ * max_poas_);\n    graph_details_d->check_aligned_nodes = reinterpret_cast<bool*>(&block_data_d_[offset_d_]);\n    offset_d_ += cudautils::align<int64_t, 8>(sizeof(bool) * max_nodes_per_window_ * max_poas_);\n    graph_details_d->nodes_to_visit = reinterpret_cast<uint16_t*>(&block_data_d_[offset_d_]);\n    offset_d_ += cudautils::align<int64_t, 8>(sizeof(uint16_t) * max_nodes_per_window_ * max_poas_);\n    graph_details_d->node_coverage_counts = reinterpret_cast<uint16_t*>(&block_data_d_[offset_d_]);\n    offset_d_ += cudautils::align<int64_t, 8>(sizeof(uint16_t) * max_nodes_per_window_ * max_poas_);\n    if (output_mask_ & OutputType::msa)\n    {\n        graph_details_d->outgoing_edges_coverage = reinterpret_cast<uint16_t*>(&block_data_d_[offset_d_]);\n        offset_d_ += cudautils::align<int64_t, 8>(sizeof(uint16_t) * max_nodes_per_window_ * CUDAPOA_MAX_NODE_EDGES * max_sequences_per_poa_ * max_poas_);\n        graph_details_d->outgoing_edges_coverage_count = reinterpret_cast<uint16_t*>(&block_data_d_[offset_d_]);\n        offset_d_ += cudautils::align<int64_t, 8>(sizeof(uint16_t) * max_nodes_per_window_ * CUDAPOA_MAX_NODE_EDGES * max_poas_);\n        graph_details_d->node_id_to_msa_pos = reinterpret_cast<int16_t*>(&block_data_d_[offset_d_]);\n        offset_d_ += cudautils::align<int64_t, 8>(sizeof(uint16_t) * max_nodes_per_window_ * max_poas_);\n    }\n\n    *graph_details_d_p = graph_details_d;\n}",
  "abstract_func": "void BatchBlock::get_graph_details(GraphDetails** VAR_0)\n{\n    GraphDetails* VAR_1{};\n\n    /* COMMENT_0 */\n    VAR_1 = VAR_2<GraphDetails*>(&VAR_3[VAR_4]);\n    VAR_4 += sizeof(GraphDetails);\n\n    /* COMMENT_1 */\n    VAR_1->nodes = &VAR_5[VAR_6];\n    VAR_6 += cudautils::VAR_7<int64_t, 8>(sizeof(uint8_t) * VAR_8 * VAR_9);\n    VAR_1->node_alignments = VAR_2<uint16_t*>(&VAR_5[VAR_6]);\n    VAR_6 += cudautils::VAR_7<int64_t, 8>(sizeof(uint16_t) * VAR_8 * VAR_10 * VAR_9);\n    VAR_1->node_alignment_count = VAR_2<uint16_t*>(&VAR_5[VAR_6]);\n    VAR_6 += cudautils::VAR_7<int64_t, 8>(sizeof(uint16_t) * VAR_8 * VAR_9);\n    VAR_1->incoming_edges = VAR_2<uint16_t*>(&VAR_5[VAR_6]);\n    VAR_6 += cudautils::VAR_7<int64_t, 8>(sizeof(uint16_t) * VAR_8 * VAR_11 * VAR_9);\n    VAR_1->incoming_edge_count = VAR_2<uint16_t*>(&VAR_5[VAR_6]);\n    VAR_6 += cudautils::VAR_7<int64_t, 8>(sizeof(uint16_t) * VAR_8 * VAR_9);\n    VAR_1->outgoing_edges = VAR_2<uint16_t*>(&VAR_5[VAR_6]);\n    VAR_6 += cudautils::VAR_7<int64_t, 8>(sizeof(uint16_t) * VAR_8 * VAR_11 * VAR_9);\n    VAR_1->outgoing_edge_count = VAR_2<uint16_t*>(&VAR_5[VAR_6]);\n    VAR_6 += cudautils::VAR_7<int64_t, 8>(sizeof(uint16_t) * VAR_8 * VAR_9);\n    VAR_1->incoming_edge_weights = VAR_2<uint16_t*>(&VAR_5[VAR_6]);\n    VAR_6 += cudautils::VAR_7<int64_t, 8>(sizeof(uint16_t) * VAR_8 * VAR_11 * VAR_9);\n    VAR_1->outgoing_edge_weights = VAR_2<uint16_t*>(&VAR_5[VAR_6]);\n    VAR_6 += cudautils::VAR_7<int64_t, 8>(sizeof(uint16_t) * VAR_8 * VAR_11 * VAR_9);\n    VAR_1->sorted_poa = VAR_2<uint16_t*>(&VAR_5[VAR_6]);\n    VAR_6 += cudautils::VAR_7<int64_t, 8>(sizeof(uint16_t) * VAR_8 * VAR_9);\n    VAR_1->sorted_poa_node_map = VAR_2<uint16_t*>(&VAR_5[VAR_6]);\n    VAR_6 += cudautils::VAR_7<int64_t, 8>(sizeof(uint16_t) * VAR_8 * VAR_9);\n    VAR_1->sorted_poa_local_edge_count = VAR_2<uint16_t*>(&VAR_5[VAR_6]);\n    VAR_6 += cudautils::VAR_7<int64_t, 8>(sizeof(uint16_t) * VAR_8 * VAR_9);\n    if (VAR_12 & OutputType::consensus)\n    {\n        VAR_1->consensus_scores = VAR_2<int32_t*>(&VAR_5[VAR_6]);\n        VAR_6 += cudautils::VAR_7<int64_t, 8>(sizeof(int32_t) * VAR_8 * VAR_9);\n        VAR_1->consensus_predecessors = VAR_2<int16_t*>(&VAR_5[VAR_6]);\n        VAR_6 += cudautils::VAR_7<int64_t, 8>(sizeof(int16_t) * VAR_8 * VAR_9);\n    }\n\n    VAR_1->node_marks = VAR_2<uint8_t*>(&VAR_5[VAR_6]);\n    VAR_6 += cudautils::VAR_7<int64_t, 8>(sizeof(int8_t) * VAR_8 * VAR_9);\n    VAR_1->check_aligned_nodes = VAR_2<bool*>(&VAR_5[VAR_6]);\n    VAR_6 += cudautils::VAR_7<int64_t, 8>(sizeof(bool) * VAR_8 * VAR_9);\n    VAR_1->nodes_to_visit = VAR_2<uint16_t*>(&VAR_5[VAR_6]);\n    VAR_6 += cudautils::VAR_7<int64_t, 8>(sizeof(uint16_t) * VAR_8 * VAR_9);\n    VAR_1->node_coverage_counts = VAR_2<uint16_t*>(&VAR_5[VAR_6]);\n    VAR_6 += cudautils::VAR_7<int64_t, 8>(sizeof(uint16_t) * VAR_8 * VAR_9);\n    if (VAR_12 & OutputType::msa)\n    {\n        VAR_1->outgoing_edges_coverage = VAR_2<uint16_t*>(&VAR_5[VAR_6]);\n        VAR_6 += cudautils::VAR_7<int64_t, 8>(sizeof(uint16_t) * VAR_8 * VAR_11 * VAR_13 * VAR_9);\n        VAR_1->outgoing_edges_coverage_count = VAR_2<uint16_t*>(&VAR_5[VAR_6]);\n        VAR_6 += cudautils::VAR_7<int64_t, 8>(sizeof(uint16_t) * VAR_8 * VAR_11 * VAR_9);\n        VAR_1->node_id_to_msa_pos = VAR_2<int16_t*>(&VAR_5[VAR_6]);\n        VAR_6 += cudautils::VAR_7<int64_t, 8>(sizeof(uint16_t) * VAR_8 * VAR_9);\n    }\n\n    *VAR_0 = VAR_1;\n}",
  "func_graph_path": "NVIDIA-Genomics-Research/GenomeWorks/8524f2c0c690ff594a9ebc6d729351b07a1fc5f0/allocate_block.cpp/vul/after/4.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -8,53 +8,53 @@\n \n     // on device\n     graph_details_d->nodes = &block_data_d_[offset_d_];\n-    offset_d_ += cudautils::align<size_t, 8>(sizeof(uint8_t) * max_nodes_per_window_ * max_poas_);\n+    offset_d_ += cudautils::align<int64_t, 8>(sizeof(uint8_t) * max_nodes_per_window_ * max_poas_);\n     graph_details_d->node_alignments = reinterpret_cast<uint16_t*>(&block_data_d_[offset_d_]);\n-    offset_d_ += cudautils::align<size_t, 8>(sizeof(uint16_t) * max_nodes_per_window_ * CUDAPOA_MAX_NODE_ALIGNMENTS * max_poas_);\n+    offset_d_ += cudautils::align<int64_t, 8>(sizeof(uint16_t) * max_nodes_per_window_ * CUDAPOA_MAX_NODE_ALIGNMENTS * max_poas_);\n     graph_details_d->node_alignment_count = reinterpret_cast<uint16_t*>(&block_data_d_[offset_d_]);\n-    offset_d_ += cudautils::align<size_t, 8>(sizeof(uint16_t) * max_nodes_per_window_ * max_poas_);\n+    offset_d_ += cudautils::align<int64_t, 8>(sizeof(uint16_t) * max_nodes_per_window_ * max_poas_);\n     graph_details_d->incoming_edges = reinterpret_cast<uint16_t*>(&block_data_d_[offset_d_]);\n-    offset_d_ += cudautils::align<size_t, 8>(sizeof(uint16_t) * max_nodes_per_window_ * CUDAPOA_MAX_NODE_EDGES * max_poas_);\n+    offset_d_ += cudautils::align<int64_t, 8>(sizeof(uint16_t) * max_nodes_per_window_ * CUDAPOA_MAX_NODE_EDGES * max_poas_);\n     graph_details_d->incoming_edge_count = reinterpret_cast<uint16_t*>(&block_data_d_[offset_d_]);\n-    offset_d_ += cudautils::align<size_t, 8>(sizeof(uint16_t) * max_nodes_per_window_ * max_poas_);\n+    offset_d_ += cudautils::align<int64_t, 8>(sizeof(uint16_t) * max_nodes_per_window_ * max_poas_);\n     graph_details_d->outgoing_edges = reinterpret_cast<uint16_t*>(&block_data_d_[offset_d_]);\n-    offset_d_ += cudautils::align<size_t, 8>(sizeof(uint16_t) * max_nodes_per_window_ * CUDAPOA_MAX_NODE_EDGES * max_poas_);\n+    offset_d_ += cudautils::align<int64_t, 8>(sizeof(uint16_t) * max_nodes_per_window_ * CUDAPOA_MAX_NODE_EDGES * max_poas_);\n     graph_details_d->outgoing_edge_count = reinterpret_cast<uint16_t*>(&block_data_d_[offset_d_]);\n-    offset_d_ += cudautils::align<size_t, 8>(sizeof(uint16_t) * max_nodes_per_window_ * max_poas_);\n+    offset_d_ += cudautils::align<int64_t, 8>(sizeof(uint16_t) * max_nodes_per_window_ * max_poas_);\n     graph_details_d->incoming_edge_weights = reinterpret_cast<uint16_t*>(&block_data_d_[offset_d_]);\n-    offset_d_ += cudautils::align<size_t, 8>(sizeof(uint16_t) * max_nodes_per_window_ * CUDAPOA_MAX_NODE_EDGES * max_poas_);\n+    offset_d_ += cudautils::align<int64_t, 8>(sizeof(uint16_t) * max_nodes_per_window_ * CUDAPOA_MAX_NODE_EDGES * max_poas_);\n     graph_details_d->outgoing_edge_weights = reinterpret_cast<uint16_t*>(&block_data_d_[offset_d_]);\n-    offset_d_ += cudautils::align<size_t, 8>(sizeof(uint16_t) * max_nodes_per_window_ * CUDAPOA_MAX_NODE_EDGES * max_poas_);\n+    offset_d_ += cudautils::align<int64_t, 8>(sizeof(uint16_t) * max_nodes_per_window_ * CUDAPOA_MAX_NODE_EDGES * max_poas_);\n     graph_details_d->sorted_poa = reinterpret_cast<uint16_t*>(&block_data_d_[offset_d_]);\n-    offset_d_ += cudautils::align<size_t, 8>(sizeof(uint16_t) * max_nodes_per_window_ * max_poas_);\n+    offset_d_ += cudautils::align<int64_t, 8>(sizeof(uint16_t) * max_nodes_per_window_ * max_poas_);\n     graph_details_d->sorted_poa_node_map = reinterpret_cast<uint16_t*>(&block_data_d_[offset_d_]);\n-    offset_d_ += cudautils::align<size_t, 8>(sizeof(uint16_t) * max_nodes_per_window_ * max_poas_);\n+    offset_d_ += cudautils::align<int64_t, 8>(sizeof(uint16_t) * max_nodes_per_window_ * max_poas_);\n     graph_details_d->sorted_poa_local_edge_count = reinterpret_cast<uint16_t*>(&block_data_d_[offset_d_]);\n-    offset_d_ += cudautils::align<size_t, 8>(sizeof(uint16_t) * max_nodes_per_window_ * max_poas_);\n+    offset_d_ += cudautils::align<int64_t, 8>(sizeof(uint16_t) * max_nodes_per_window_ * max_poas_);\n     if (output_mask_ & OutputType::consensus)\n     {\n         graph_details_d->consensus_scores = reinterpret_cast<int32_t*>(&block_data_d_[offset_d_]);\n-        offset_d_ += cudautils::align<size_t, 8>(sizeof(int32_t) * max_nodes_per_window_ * max_poas_);\n+        offset_d_ += cudautils::align<int64_t, 8>(sizeof(int32_t) * max_nodes_per_window_ * max_poas_);\n         graph_details_d->consensus_predecessors = reinterpret_cast<int16_t*>(&block_data_d_[offset_d_]);\n-        offset_d_ += cudautils::align<size_t, 8>(sizeof(int16_t) * max_nodes_per_window_ * max_poas_);\n+        offset_d_ += cudautils::align<int64_t, 8>(sizeof(int16_t) * max_nodes_per_window_ * max_poas_);\n     }\n \n     graph_details_d->node_marks = reinterpret_cast<uint8_t*>(&block_data_d_[offset_d_]);\n-    offset_d_ += cudautils::align<size_t, 8>(sizeof(int8_t) * max_nodes_per_window_ * max_poas_);\n+    offset_d_ += cudautils::align<int64_t, 8>(sizeof(int8_t) * max_nodes_per_window_ * max_poas_);\n     graph_details_d->check_aligned_nodes = reinterpret_cast<bool*>(&block_data_d_[offset_d_]);\n-    offset_d_ += cudautils::align<size_t, 8>(sizeof(bool) * max_nodes_per_window_ * max_poas_);\n+    offset_d_ += cudautils::align<int64_t, 8>(sizeof(bool) * max_nodes_per_window_ * max_poas_);\n     graph_details_d->nodes_to_visit = reinterpret_cast<uint16_t*>(&block_data_d_[offset_d_]);\n-    offset_d_ += cudautils::align<size_t, 8>(sizeof(uint16_t) * max_nodes_per_window_ * max_poas_);\n+    offset_d_ += cudautils::align<int64_t, 8>(sizeof(uint16_t) * max_nodes_per_window_ * max_poas_);\n     graph_details_d->node_coverage_counts = reinterpret_cast<uint16_t*>(&block_data_d_[offset_d_]);\n-    offset_d_ += cudautils::align<size_t, 8>(sizeof(uint16_t) * max_nodes_per_window_ * max_poas_);\n+    offset_d_ += cudautils::align<int64_t, 8>(sizeof(uint16_t) * max_nodes_per_window_ * max_poas_);\n     if (output_mask_ & OutputType::msa)\n     {\n         graph_details_d->outgoing_edges_coverage = reinterpret_cast<uint16_t*>(&block_data_d_[offset_d_]);\n-        offset_d_ += cudautils::align<size_t, 8>(sizeof(uint16_t) * max_nodes_per_window_ * CUDAPOA_MAX_NODE_EDGES * max_sequences_per_poa_ * max_poas_);\n+        offset_d_ += cudautils::align<int64_t, 8>(sizeof(uint16_t) * max_nodes_per_window_ * CUDAPOA_MAX_NODE_EDGES * max_sequences_per_poa_ * max_poas_);\n         graph_details_d->outgoing_edges_coverage_count = reinterpret_cast<uint16_t*>(&block_data_d_[offset_d_]);\n-        offset_d_ += cudautils::align<size_t, 8>(sizeof(uint16_t) * max_nodes_per_window_ * CUDAPOA_MAX_NODE_EDGES * max_poas_);\n+        offset_d_ += cudautils::align<int64_t, 8>(sizeof(uint16_t) * max_nodes_per_window_ * CUDAPOA_MAX_NODE_EDGES * max_poas_);\n         graph_details_d->node_id_to_msa_pos = reinterpret_cast<int16_t*>(&block_data_d_[offset_d_]);\n-        offset_d_ += cudautils::align<size_t, 8>(sizeof(uint16_t) * max_nodes_per_window_ * max_poas_);\n+        offset_d_ += cudautils::align<int64_t, 8>(sizeof(uint16_t) * max_nodes_per_window_ * max_poas_);\n     }\n \n     *graph_details_d_p = graph_details_d;",
  "diff_line_info": {
    "deleted_lines": [
      "    offset_d_ += cudautils::align<size_t, 8>(sizeof(uint8_t) * max_nodes_per_window_ * max_poas_);",
      "    offset_d_ += cudautils::align<size_t, 8>(sizeof(uint16_t) * max_nodes_per_window_ * CUDAPOA_MAX_NODE_ALIGNMENTS * max_poas_);",
      "    offset_d_ += cudautils::align<size_t, 8>(sizeof(uint16_t) * max_nodes_per_window_ * max_poas_);",
      "    offset_d_ += cudautils::align<size_t, 8>(sizeof(uint16_t) * max_nodes_per_window_ * CUDAPOA_MAX_NODE_EDGES * max_poas_);",
      "    offset_d_ += cudautils::align<size_t, 8>(sizeof(uint16_t) * max_nodes_per_window_ * max_poas_);",
      "    offset_d_ += cudautils::align<size_t, 8>(sizeof(uint16_t) * max_nodes_per_window_ * CUDAPOA_MAX_NODE_EDGES * max_poas_);",
      "    offset_d_ += cudautils::align<size_t, 8>(sizeof(uint16_t) * max_nodes_per_window_ * max_poas_);",
      "    offset_d_ += cudautils::align<size_t, 8>(sizeof(uint16_t) * max_nodes_per_window_ * CUDAPOA_MAX_NODE_EDGES * max_poas_);",
      "    offset_d_ += cudautils::align<size_t, 8>(sizeof(uint16_t) * max_nodes_per_window_ * CUDAPOA_MAX_NODE_EDGES * max_poas_);",
      "    offset_d_ += cudautils::align<size_t, 8>(sizeof(uint16_t) * max_nodes_per_window_ * max_poas_);",
      "    offset_d_ += cudautils::align<size_t, 8>(sizeof(uint16_t) * max_nodes_per_window_ * max_poas_);",
      "    offset_d_ += cudautils::align<size_t, 8>(sizeof(uint16_t) * max_nodes_per_window_ * max_poas_);",
      "        offset_d_ += cudautils::align<size_t, 8>(sizeof(int32_t) * max_nodes_per_window_ * max_poas_);",
      "        offset_d_ += cudautils::align<size_t, 8>(sizeof(int16_t) * max_nodes_per_window_ * max_poas_);",
      "    offset_d_ += cudautils::align<size_t, 8>(sizeof(int8_t) * max_nodes_per_window_ * max_poas_);",
      "    offset_d_ += cudautils::align<size_t, 8>(sizeof(bool) * max_nodes_per_window_ * max_poas_);",
      "    offset_d_ += cudautils::align<size_t, 8>(sizeof(uint16_t) * max_nodes_per_window_ * max_poas_);",
      "    offset_d_ += cudautils::align<size_t, 8>(sizeof(uint16_t) * max_nodes_per_window_ * max_poas_);",
      "        offset_d_ += cudautils::align<size_t, 8>(sizeof(uint16_t) * max_nodes_per_window_ * CUDAPOA_MAX_NODE_EDGES * max_sequences_per_poa_ * max_poas_);",
      "        offset_d_ += cudautils::align<size_t, 8>(sizeof(uint16_t) * max_nodes_per_window_ * CUDAPOA_MAX_NODE_EDGES * max_poas_);",
      "        offset_d_ += cudautils::align<size_t, 8>(sizeof(uint16_t) * max_nodes_per_window_ * max_poas_);"
    ],
    "added_lines": [
      "    offset_d_ += cudautils::align<int64_t, 8>(sizeof(uint8_t) * max_nodes_per_window_ * max_poas_);",
      "    offset_d_ += cudautils::align<int64_t, 8>(sizeof(uint16_t) * max_nodes_per_window_ * CUDAPOA_MAX_NODE_ALIGNMENTS * max_poas_);",
      "    offset_d_ += cudautils::align<int64_t, 8>(sizeof(uint16_t) * max_nodes_per_window_ * max_poas_);",
      "    offset_d_ += cudautils::align<int64_t, 8>(sizeof(uint16_t) * max_nodes_per_window_ * CUDAPOA_MAX_NODE_EDGES * max_poas_);",
      "    offset_d_ += cudautils::align<int64_t, 8>(sizeof(uint16_t) * max_nodes_per_window_ * max_poas_);",
      "    offset_d_ += cudautils::align<int64_t, 8>(sizeof(uint16_t) * max_nodes_per_window_ * CUDAPOA_MAX_NODE_EDGES * max_poas_);",
      "    offset_d_ += cudautils::align<int64_t, 8>(sizeof(uint16_t) * max_nodes_per_window_ * max_poas_);",
      "    offset_d_ += cudautils::align<int64_t, 8>(sizeof(uint16_t) * max_nodes_per_window_ * CUDAPOA_MAX_NODE_EDGES * max_poas_);",
      "    offset_d_ += cudautils::align<int64_t, 8>(sizeof(uint16_t) * max_nodes_per_window_ * CUDAPOA_MAX_NODE_EDGES * max_poas_);",
      "    offset_d_ += cudautils::align<int64_t, 8>(sizeof(uint16_t) * max_nodes_per_window_ * max_poas_);",
      "    offset_d_ += cudautils::align<int64_t, 8>(sizeof(uint16_t) * max_nodes_per_window_ * max_poas_);",
      "    offset_d_ += cudautils::align<int64_t, 8>(sizeof(uint16_t) * max_nodes_per_window_ * max_poas_);",
      "        offset_d_ += cudautils::align<int64_t, 8>(sizeof(int32_t) * max_nodes_per_window_ * max_poas_);",
      "        offset_d_ += cudautils::align<int64_t, 8>(sizeof(int16_t) * max_nodes_per_window_ * max_poas_);",
      "    offset_d_ += cudautils::align<int64_t, 8>(sizeof(int8_t) * max_nodes_per_window_ * max_poas_);",
      "    offset_d_ += cudautils::align<int64_t, 8>(sizeof(bool) * max_nodes_per_window_ * max_poas_);",
      "    offset_d_ += cudautils::align<int64_t, 8>(sizeof(uint16_t) * max_nodes_per_window_ * max_poas_);",
      "    offset_d_ += cudautils::align<int64_t, 8>(sizeof(uint16_t) * max_nodes_per_window_ * max_poas_);",
      "        offset_d_ += cudautils::align<int64_t, 8>(sizeof(uint16_t) * max_nodes_per_window_ * CUDAPOA_MAX_NODE_EDGES * max_sequences_per_poa_ * max_poas_);",
      "        offset_d_ += cudautils::align<int64_t, 8>(sizeof(uint16_t) * max_nodes_per_window_ * CUDAPOA_MAX_NODE_EDGES * max_poas_);",
      "        offset_d_ += cudautils::align<int64_t, 8>(sizeof(uint16_t) * max_nodes_per_window_ * max_poas_);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/NVIDIA-Genomics-Research/GenomeWorks/pull/70",
  "description": {
    "pr_info": {
      "title": "[cudapoa] fix integer overflow",
      "number": 70
    },
    "comment": [
      "1. Re-enable disabled cudapoa python test\r\n2. Fix integer overflow issue in cudapoa memory management"
    ]
  },
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.7,
  "Bug Filter Response": "\n\n**Final Output:**\n\nAnalysis:\nThe patch modifies the data type used in memory alignment calculations from size_t to int64_t to address an integer overflow issue. The PR comment indicates it's a bug fix related to memory management, but there's no explicit mention of it being a security issue.\n\nFinal Classification: Defect Remediation & Feature Upgrades\n\nConfidence Score: 0.7"
}