{
  "cve_id": "CVE-2023-50572",
  "cwe_ids": [
    "CWE-787"
  ],
  "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H",
  "cvss_is_v3": true,
  "repo_name": "jline/jline3",
  "commit_msg": "GroovyEngine.execute cause an OOM exception, fixes #909",
  "commit_hash": "f3c60a3e6255e8e0c20d5043a4fe248446f292bb",
  "git_url": "https://github.com/jline/jline3/commit/f3c60a3e6255e8e0c20d5043a4fe248446f292bb",
  "file_path": "console/src/main/java/org/jline/console/impl/DefaultPrinter.java",
  "func_name": "highlightAndPrint",
  "func_before": "@SuppressWarnings(\"unchecked\")\n    private void highlightAndPrint(Map<String, Object> options, Object obj) {\n        int width = (int) options.get(Printer.WIDTH);\n        totLines = 0;\n        String message = null;\n        RuntimeException runtimeException = null;\n        if (obj == null) {\n            // do nothing\n        } else if (obj instanceof Map) {\n            highlightMap(options, keysToString((Map<Object, Object>) obj), width);\n        } else if (collectionObject(obj)) {\n            List<Object> collection = objectToList(obj);\n            if (collection.size() > (int) options.get(Printer.MAXROWS)) {\n                message = \"Truncated output: \" + options.get(Printer.MAXROWS) + \"/\" + collection.size();\n                collection =\n                        collection.subList(collection.size() - (int) options.get(Printer.MAXROWS), collection.size());\n            }\n            if (!collection.isEmpty()) {\n                if (collection.size() == 1 && !options.containsKey(Printer.ONE_ROW_TABLE)) {\n                    Object elem = collection.iterator().next();\n                    if (elem instanceof Map) {\n                        highlightMap(options, keysToString((Map<Object, Object>) elem), width);\n                    } else if (canConvert(elem) && !options.containsKey(Printer.TO_STRING)) {\n                        highlightMap(options, objectToMap(options, elem), width);\n                    } else if (elem instanceof String && options.get(Printer.STYLE) != null) {\n                        highlightAndPrint(width, (SyntaxHighlighter) options.get(Printer.STYLE), (String) elem, true);\n                    } else {\n                        highlightValue(options, null, objectToString(options, obj))\n                                .println(terminal());\n                    }\n                } else {\n                    String columnSep = \"\";\n                    TableRows tableRows = null;\n                    boolean rownum = options.containsKey(Printer.ROWNUM);\n                    try {\n                        columnSep = (String) options.getOrDefault(Printer.BORDER, \"\");\n                        tableRows = optionRowHighlight(options.getOrDefault(Printer.ROW_HIGHLIGHT, null));\n                    } catch (Exception e) {\n                        runtimeException = new BadOptionValueException(\n                                \"Option \" + Printer.BORDER + \" or \" + Printer.ROW_HIGHLIGHT + \" has a bad value!\");\n                        runtimeException.addSuppressed(e);\n                    }\n                    try {\n                        Object elem = collection.iterator().next();\n                        boolean convert = canConvert(elem);\n                        if ((elem instanceof Map || convert) && !options.containsKey(Printer.TO_STRING)) {\n                            List<Map<String, Object>> convertedCollection = new ArrayList<>();\n                            Set<String> keys = new HashSet<>();\n                            for (Object o : collection) {\n                                Map<String, Object> m =\n                                        convert ? objectToMap(options, o) : keysToString((Map<Object, Object>) o);\n                                convertedCollection.add(m);\n                                keys.addAll(m.keySet());\n                            }\n                            List<String> _header;\n                            List<String> columnsIn = optionList(Printer.COLUMNS_IN, options);\n                            List<String> columnsOut = !options.containsKey(\"all\")\n                                    ? optionList(Printer.COLUMNS_OUT, options)\n                                    : new ArrayList<>();\n                            if (options.containsKey(Printer.COLUMNS)) {\n                                _header = (List<String>) options.get(Printer.COLUMNS);\n                            } else {\n                                _header = columnsIn;\n                                _header.addAll(keys.stream()\n                                        .filter(k -> !columnsIn.contains(k) && !hasMatch(columnsOut, k))\n                                        .collect(Collectors.toList()));\n                            }\n                            List<String> header = new ArrayList<>();\n                            List<Integer> columns = new ArrayList<>();\n                            int headerWidth = 0;\n                            List<String> refKeys = new ArrayList<>();\n                            for (String v : _header) {\n                                String value = v.split(\"\\\\.\")[0];\n                                if (!keys.contains(value) && !keys.contains(v)) {\n                                    continue;\n                                }\n                                boolean addKey = false;\n                                for (Map<String, Object> m : convertedCollection) {\n                                    Object val = mapValue(options, v, m);\n                                    if (val != null) {\n                                        addKey = simpleObject(val)\n                                                || options.containsKey(Printer.COLUMNS)\n                                                || options.containsKey(Printer.STRUCT_ON_TABLE);\n                                        break;\n                                    }\n                                }\n                                if (!addKey) {\n                                    continue;\n                                }\n                                refKeys.add(value);\n                                header.add(v);\n                                String cn = columnName(v, options.containsKey(Printer.SHORT_NAMES));\n                                columns.add(cn.length() + 1);\n                                headerWidth += cn.length() + 1;\n                                if (headerWidth > width) {\n                                    break;\n                                }\n                            }\n                            if (header.size() == 0) {\n                                throw new Exception(\"No columns for table!\");\n                            }\n                            double mapSimilarity = ((BigDecimal)\n                                            options.getOrDefault(Printer.MAP_SIMILARITY, new BigDecimal(\"0.8\")))\n                                    .doubleValue();\n                            int matchLimit = (int) Math.ceil(header.size() * mapSimilarity);\n                            for (Map<String, Object> m : convertedCollection) {\n                                if (!similarSets(refKeys, m.keySet(), matchLimit)) {\n                                    throw new Exception(\"Not homogenous list!\");\n                                }\n                                for (int i = 0; i < header.size(); i++) {\n                                    int cw = highlightMapValue(options, header.get(i), m)\n                                            .columnLength();\n                                    if (cw > columns.get(i) - 1) {\n                                        columns.set(i, cw + 1);\n                                    }\n                                }\n                            }\n                            toTabStops(columns, collection.size(), rownum, columnSep);\n                            AttributedStringBuilder asb = new AttributedStringBuilder().tabs(columns);\n                            asb.style(prntStyle.resolve(\".th\"));\n                            int firstColumn = 0;\n                            if (rownum) {\n                                asb.append(addPadding(\"\", columns.get(0) - columnSep.length() - 1));\n                                asb.append(columnSep);\n                                asb.append(\"\\t\");\n                                firstColumn = 1;\n                            }\n                            boolean first = true;\n                            for (String s : header) {\n                                if (!first) {\n                                    asb.append(columnSep);\n                                }\n                                asb.append(columnName(s, options.containsKey(Printer.SHORT_NAMES)));\n                                asb.append(\"\\t\");\n                                first = false;\n                            }\n                            asb.columnSubSequence(0, width).println(terminal());\n                            int row = 0;\n                            for (Map<String, Object> m : convertedCollection) {\n                                AttributedStringBuilder asb2 = new AttributedStringBuilder().tabs(columns);\n                                if (doRowHighlight(row, tableRows)) {\n                                    asb2.style(prntStyle.resolve(\".rs\"));\n                                }\n                                if (rownum) {\n                                    asb2.styled(\n                                            prntStyle.resolve(\".rn\"),\n                                            addPadding(Integer.toString(row), columns.get(0) - columnSep.length() - 1));\n                                    asb2.append(columnSep);\n                                    asb2.append(\"\\t\");\n                                }\n                                row++;\n                                for (int i = 0; i < header.size(); i++) {\n                                    if (i > 0) {\n                                        asb2.append(columnSep);\n                                    }\n                                    AttributedString v = highlightMapValue(options, header.get(i), m);\n                                    if (isNumber(v.toString())) {\n                                        v = addPadding(v, cellWidth(firstColumn + i, columns, rownum, columnSep) - 1);\n                                    }\n                                    asb2.append(v);\n                                    asb2.append(\"\\t\");\n                                }\n                                asb2.columnSubSequence(0, width).println(terminal());\n                            }\n                        } else if (collectionObject(elem) && !options.containsKey(Printer.TO_STRING)) {\n                            List<Integer> columns = new ArrayList<>();\n                            for (Object o : collection) {\n                                List<Object> inner = objectToList(o);\n                                for (int i = 0; i < inner.size(); i++) {\n                                    int len1 = objectToString(options, inner.get(i))\n                                                    .length()\n                                            + 1;\n                                    if (columns.size() <= i) {\n                                        columns.add(len1);\n                                    } else if (len1 > columns.get(i)) {\n                                        columns.set(i, len1);\n                                    }\n                                }\n                            }\n                            toTabStops(columns, collection.size(), rownum, columnSep);\n                            int row = 0;\n                            int firstColumn = rownum ? 1 : 0;\n                            for (Object o : collection) {\n                                AttributedStringBuilder asb = new AttributedStringBuilder().tabs(columns);\n                                if (doRowHighlight(row, tableRows)) {\n                                    asb.style(prntStyle.resolve(\".rs\"));\n                                }\n                                if (rownum) {\n                                    asb.styled(\n                                            prntStyle.resolve(\".rn\"),\n                                            addPadding(Integer.toString(row), columns.get(0) - columnSep.length() - 1));\n                                    asb.append(columnSep);\n                                    asb.append(\"\\t\");\n                                }\n                                row++;\n                                List<Object> inner = objectToList(o);\n                                for (int i = 0; i < inner.size(); i++) {\n                                    if (i > 0) {\n                                        asb.append(columnSep);\n                                    }\n                                    AttributedString v = highlightValue(options, null, inner.get(i));\n                                    if (isNumber(v.toString())) {\n                                        v = addPadding(v, cellWidth(firstColumn + i, columns, rownum, columnSep) - 1);\n                                    }\n                                    asb.append(v);\n                                    asb.append(\"\\t\");\n                                }\n                                asb.columnSubSequence(0, width).println(terminal());\n                            }\n                        } else {\n                            highlightList(options, collection, width);\n                        }\n                    } catch (Exception e) {\n                        Log.debug(\"Stack: \", e);\n                        highlightList(options, collection, width);\n                    }\n                }\n            } else {\n                highlightValue(options, null, objectToString(options, obj)).println(terminal());\n            }\n        } else if (canConvert(obj) && !options.containsKey(Printer.TO_STRING)) {\n            highlightMap(options, objectToMap(options, obj), width);\n        } else {\n            highlightValue(options, null, objectToString(options, obj)).println(terminal());\n        }\n        if (message != null) {\n            AttributedStringBuilder asb = new AttributedStringBuilder();\n            asb.styled(prntStyle.resolve(\".em\"), message);\n            asb.println(terminal());\n        }\n        if (runtimeException != null) {\n            throw runtimeException;\n        }\n    }",
  "abstract_func_before": "@SuppressWarnings(\"unchecked\")\n    private void highlightAndPrint(Map<String, Object> VAR_0, Object VAR_1) {\n        int VAR_2 = (int) VAR_0.get(VAR_3.WIDTH);\n        VAR_4 = 0;\n        String VAR_5 = null;\n        RuntimeException VAR_6 = null;\n        if (VAR_1 == null) {\n            /* COMMENT_0 */\n        } else if (VAR_1 instanceof Map) {\n            highlightMap(VAR_0, keysToString((Map<Object, Object>) VAR_1), VAR_2);\n        } else if (collectionObject(VAR_1)) {\n            List<Object> VAR_7 = objectToList(VAR_1);\n            if (VAR_7.size() > (int) VAR_0.get(VAR_3.MAXROWS)) {\n                VAR_5 = \"Truncated output: \" + VAR_0.get(VAR_3.MAXROWS) + \"/\" + VAR_7.size();\n                VAR_7 =\n                        VAR_7.subList(VAR_7.size() - (int) VAR_0.get(VAR_3.MAXROWS), VAR_7.size());\n            }\n            if (!VAR_7.isEmpty()) {\n                if (VAR_7.size() == 1 && !VAR_0.containsKey(VAR_3.ONE_ROW_TABLE)) {\n                    Object VAR_8 = VAR_7.iterator().next();\n                    if (VAR_8 instanceof Map) {\n                        highlightMap(VAR_0, keysToString((Map<Object, Object>) VAR_8), VAR_2);\n                    } else if (canConvert(VAR_8) && !VAR_0.containsKey(VAR_3.TO_STRING)) {\n                        highlightMap(VAR_0, objectToMap(VAR_0, VAR_8), VAR_2);\n                    } else if (VAR_8 instanceof String && VAR_0.get(VAR_3.STYLE) != null) {\n                        highlightAndPrint(VAR_2, (SyntaxHighlighter) VAR_0.get(VAR_3.STYLE), (String) VAR_8, true);\n                    } else {\n                        highlightValue(VAR_0, null, objectToString(VAR_0, VAR_1))\n                                .println(terminal());\n                    }\n                } else {\n                    String VAR_9 = \"\";\n                    TableRows VAR_10 = null;\n                    boolean VAR_11 = VAR_0.containsKey(VAR_3.ROWNUM);\n                    try {\n                        VAR_9 = (String) VAR_0.getOrDefault(VAR_3.BORDER, \"\");\n                        VAR_10 = optionRowHighlight(VAR_0.getOrDefault(VAR_3.ROW_HIGHLIGHT, null));\n                    } catch (Exception VAR_12) {\n                        VAR_6 = new BadOptionValueException(\n                                \"Option \" + VAR_3.BORDER + \" or \" + VAR_3.ROW_HIGHLIGHT + \" has a bad value!\");\n                        VAR_6.addSuppressed(VAR_12);\n                    }\n                    try {\n                        Object VAR_8 = VAR_7.iterator().next();\n                        boolean VAR_13 = canConvert(VAR_8);\n                        if ((VAR_8 instanceof Map || VAR_13) && !VAR_0.containsKey(VAR_3.TO_STRING)) {\n                            List<Map<String, Object>> VAR_14 = new ArrayList<>();\n                            Set<String> VAR_15 = new HashSet<>();\n                            for (Object VAR_16 : VAR_7) {\n                                Map<String, Object> VAR_17 =\n                                        VAR_13 ? objectToMap(VAR_0, VAR_16) : keysToString((Map<Object, Object>) VAR_16);\n                                VAR_14.add(VAR_17);\n                                VAR_15.addAll(VAR_17.keySet());\n                            }\n                            List<String> VAR_18;\n                            List<String> VAR_19 = optionList(VAR_3.COLUMNS_IN, VAR_0);\n                            List<String> VAR_20 = !VAR_0.containsKey(\"all\")\n                                    ? optionList(VAR_3.COLUMNS_OUT, VAR_0)\n                                    : new ArrayList<>();\n                            if (VAR_0.containsKey(VAR_3.COLUMNS)) {\n                                VAR_18 = (List<String>) VAR_0.get(VAR_3.COLUMNS);\n                            } else {\n                                VAR_18 = VAR_19;\n                                VAR_18.addAll(VAR_15.stream()\n                                        .filter(VAR_21 -> !VAR_19.contains(VAR_21) && !hasMatch(VAR_20, VAR_21))\n                                        .collect(VAR_22.toList()));\n                            }\n                            List<String> VAR_23 = new ArrayList<>();\n                            List<Integer> VAR_24 = new ArrayList<>();\n                            int VAR_25 = 0;\n                            List<String> VAR_26 = new ArrayList<>();\n                            for (String VAR_27 : VAR_18) {\n                                String VAR_28 = VAR_27.split(\"\\\\.\")[0];\n                                if (!VAR_15.contains(VAR_28) && !VAR_15.contains(VAR_27)) {\n                                    continue;\n                                }\n                                boolean VAR_29 = false;\n                                for (Map<String, Object> VAR_17 : VAR_14) {\n                                    Object VAR_30 = mapValue(VAR_0, VAR_27, VAR_17);\n                                    if (VAR_30 != null) {\n                                        VAR_29 = simpleObject(VAR_30)\n                                                || VAR_0.containsKey(VAR_3.COLUMNS)\n                                                || VAR_0.containsKey(VAR_3.STRUCT_ON_TABLE);\n                                        break;\n                                    }\n                                }\n                                if (!VAR_29) {\n                                    continue;\n                                }\n                                VAR_26.add(VAR_28);\n                                VAR_23.add(VAR_27);\n                                String VAR_31 = columnName(VAR_27, VAR_0.containsKey(VAR_3.SHORT_NAMES));\n                                VAR_24.add(VAR_31.length() + 1);\n                                VAR_25 += VAR_31.length() + 1;\n                                if (VAR_25 > VAR_2) {\n                                    break;\n                                }\n                            }\n                            if (VAR_23.size() == 0) {\n                                throw new Exception(\"No columns for table!\");\n                            }\n                            double VAR_32 = ((BigDecimal)\n                                            VAR_0.getOrDefault(VAR_3.MAP_SIMILARITY, new BigDecimal(\"0.8\")))\n                                    .doubleValue();\n                            int VAR_33 = (int) VAR_34.ceil(VAR_23.size() * VAR_32);\n                            for (Map<String, Object> VAR_17 : VAR_14) {\n                                if (!similarSets(VAR_26, VAR_17.keySet(), VAR_33)) {\n                                    throw new Exception(\"Not homogenous list!\");\n                                }\n                                for (int VAR_35 = 0; VAR_35 < VAR_23.size(); VAR_35++) {\n                                    int VAR_36 = highlightMapValue(VAR_0, VAR_23.get(VAR_35), VAR_17)\n                                            .columnLength();\n                                    if (VAR_36 > VAR_24.get(VAR_35) - 1) {\n                                        VAR_24.set(VAR_35, VAR_36 + 1);\n                                    }\n                                }\n                            }\n                            toTabStops(VAR_24, VAR_7.size(), VAR_11, VAR_9);\n                            AttributedStringBuilder VAR_37 = new AttributedStringBuilder().tabs(VAR_24);\n                            VAR_37.style(VAR_38.resolve(\".th\"));\n                            int VAR_39 = 0;\n                            if (VAR_11) {\n                                VAR_37.append(addPadding(\"\", VAR_24.get(0) - VAR_9.length() - 1));\n                                VAR_37.append(VAR_9);\n                                VAR_37.append(\"\\t\");\n                                VAR_39 = 1;\n                            }\n                            boolean VAR_40 = true;\n                            for (String VAR_41 : VAR_23) {\n                                if (!VAR_40) {\n                                    VAR_37.append(VAR_9);\n                                }\n                                VAR_37.append(columnName(VAR_41, VAR_0.containsKey(VAR_3.SHORT_NAMES)));\n                                VAR_37.append(\"\\t\");\n                                VAR_40 = false;\n                            }\n                            VAR_37.columnSubSequence(0, VAR_2).println(terminal());\n                            int VAR_42 = 0;\n                            for (Map<String, Object> VAR_17 : VAR_14) {\n                                AttributedStringBuilder VAR_43 = new AttributedStringBuilder().tabs(VAR_24);\n                                if (doRowHighlight(VAR_42, VAR_10)) {\n                                    VAR_43.style(VAR_38.resolve(\".rs\"));\n                                }\n                                if (VAR_11) {\n                                    VAR_43.styled(\n                                            VAR_38.resolve(\".rn\"),\n                                            addPadding(VAR_44.toString(VAR_42), VAR_24.get(0) - VAR_9.length() - 1));\n                                    VAR_43.append(VAR_9);\n                                    VAR_43.append(\"\\t\");\n                                }\n                                VAR_42++;\n                                for (int VAR_35 = 0; VAR_35 < VAR_23.size(); VAR_35++) {\n                                    if (VAR_35 > 0) {\n                                        VAR_43.append(VAR_9);\n                                    }\n                                    AttributedString VAR_27 = highlightMapValue(VAR_0, VAR_23.get(VAR_35), VAR_17);\n                                    if (isNumber(VAR_27.toString())) {\n                                        VAR_27 = addPadding(VAR_27, cellWidth(VAR_39 + VAR_35, VAR_24, VAR_11, VAR_9) - 1);\n                                    }\n                                    VAR_43.append(VAR_27);\n                                    VAR_43.append(\"\\t\");\n                                }\n                                VAR_43.columnSubSequence(0, VAR_2).println(terminal());\n                            }\n                        } else if (collectionObject(VAR_8) && !VAR_0.containsKey(VAR_3.TO_STRING)) {\n                            List<Integer> VAR_24 = new ArrayList<>();\n                            for (Object VAR_16 : VAR_7) {\n                                List<Object> VAR_45 = objectToList(VAR_16);\n                                for (int VAR_35 = 0; VAR_35 < VAR_45.size(); VAR_35++) {\n                                    int VAR_46 = objectToString(VAR_0, VAR_45.get(VAR_35))\n                                                    .length()\n                                            + 1;\n                                    if (VAR_24.size() <= VAR_35) {\n                                        VAR_24.add(VAR_46);\n                                    } else if (VAR_46 > VAR_24.get(VAR_35)) {\n                                        VAR_24.set(VAR_35, VAR_46);\n                                    }\n                                }\n                            }\n                            toTabStops(VAR_24, VAR_7.size(), VAR_11, VAR_9);\n                            int VAR_42 = 0;\n                            int VAR_39 = VAR_11 ? 1 : 0;\n                            for (Object VAR_16 : VAR_7) {\n                                AttributedStringBuilder VAR_37 = new AttributedStringBuilder().tabs(VAR_24);\n                                if (doRowHighlight(VAR_42, VAR_10)) {\n                                    VAR_37.style(VAR_38.resolve(\".rs\"));\n                                }\n                                if (VAR_11) {\n                                    VAR_37.styled(\n                                            VAR_38.resolve(\".rn\"),\n                                            addPadding(VAR_44.toString(VAR_42), VAR_24.get(0) - VAR_9.length() - 1));\n                                    VAR_37.append(VAR_9);\n                                    VAR_37.append(\"\\t\");\n                                }\n                                VAR_42++;\n                                List<Object> VAR_45 = objectToList(VAR_16);\n                                for (int VAR_35 = 0; VAR_35 < VAR_45.size(); VAR_35++) {\n                                    if (VAR_35 > 0) {\n                                        VAR_37.append(VAR_9);\n                                    }\n                                    AttributedString VAR_27 = highlightValue(VAR_0, null, VAR_45.get(VAR_35));\n                                    if (isNumber(VAR_27.toString())) {\n                                        VAR_27 = addPadding(VAR_27, cellWidth(VAR_39 + VAR_35, VAR_24, VAR_11, VAR_9) - 1);\n                                    }\n                                    VAR_37.append(VAR_27);\n                                    VAR_37.append(\"\\t\");\n                                }\n                                VAR_37.columnSubSequence(0, VAR_2).println(terminal());\n                            }\n                        } else {\n                            highlightList(VAR_0, VAR_7, VAR_2);\n                        }\n                    } catch (Exception VAR_12) {\n                        VAR_47.debug(\"Stack: \", VAR_12);\n                        highlightList(VAR_0, VAR_7, VAR_2);\n                    }\n                }\n            } else {\n                highlightValue(VAR_0, null, objectToString(VAR_0, VAR_1)).println(terminal());\n            }\n        } else if (canConvert(VAR_1) && !VAR_0.containsKey(VAR_3.TO_STRING)) {\n            highlightMap(VAR_0, objectToMap(VAR_0, VAR_1), VAR_2);\n        } else {\n            highlightValue(VAR_0, null, objectToString(VAR_0, VAR_1)).println(terminal());\n        }\n        if (VAR_5 != null) {\n            AttributedStringBuilder VAR_37 = new AttributedStringBuilder();\n            VAR_37.styled(VAR_38.resolve(\".em\"), VAR_5);\n            VAR_37.println(terminal());\n        }\n        if (VAR_6 != null) {\n            throw VAR_6;\n        }\n    }",
  "func_graph_path_before": "jline/jline3/f3c60a3e6255e8e0c20d5043a4fe248446f292bb/DefaultPrinter.java/vul/before/1.json",
  "func": "@SuppressWarnings(\"unchecked\")\n    private void highlightAndPrint(Map<String, Object> options, Object obj) {\n        int width = (int) options.get(Printer.WIDTH);\n        int maxrows = (int) options.get(Printer.MAXROWS);\n        totLines = 0;\n        String message = null;\n        RuntimeException runtimeException = null;\n        if (obj == null) {\n            // do nothing\n        } else if (obj instanceof Map) {\n            highlightMap(options, keysToString((Map<Object, Object>) obj), width);\n        } else if (collectionObject(obj)) {\n            List<Object> collection = objectToList(obj);\n            if (collection.size() > maxrows) {\n                message = \"Truncated output: \" + maxrows + \"/\" + collection.size();\n                collection = collection.subList(collection.size() - maxrows, collection.size());\n            }\n            if (!collection.isEmpty()) {\n                if (collection.size() == 1 && !options.containsKey(Printer.ONE_ROW_TABLE)) {\n                    Object elem = collection.iterator().next();\n                    if (elem instanceof Map) {\n                        highlightMap(options, keysToString((Map<Object, Object>) elem), width);\n                    } else if (canConvert(elem) && !options.containsKey(Printer.TO_STRING)) {\n                        highlightMap(options, objectToMap(options, elem), width);\n                    } else if (elem instanceof String && options.get(Printer.STYLE) != null) {\n                        highlightAndPrint(\n                                width, (SyntaxHighlighter) options.get(Printer.STYLE), (String) elem, true, maxrows);\n                    } else {\n                        highlightValue(options, null, objectToString(options, obj))\n                                .println(terminal());\n                    }\n                } else {\n                    String columnSep = \"\";\n                    TableRows tableRows = null;\n                    boolean rownum = options.containsKey(Printer.ROWNUM);\n                    try {\n                        columnSep = (String) options.getOrDefault(Printer.BORDER, \"\");\n                        tableRows = optionRowHighlight(options.getOrDefault(Printer.ROW_HIGHLIGHT, null));\n                    } catch (Exception e) {\n                        runtimeException = new BadOptionValueException(\n                                \"Option \" + Printer.BORDER + \" or \" + Printer.ROW_HIGHLIGHT + \" has a bad value!\");\n                        runtimeException.addSuppressed(e);\n                    }\n                    try {\n                        Object elem = collection.iterator().next();\n                        boolean convert = canConvert(elem);\n                        if ((elem instanceof Map || convert) && !options.containsKey(Printer.TO_STRING)) {\n                            List<Map<String, Object>> convertedCollection = new ArrayList<>();\n                            Set<String> keys = new HashSet<>();\n                            for (Object o : collection) {\n                                Map<String, Object> m =\n                                        convert ? objectToMap(options, o) : keysToString((Map<Object, Object>) o);\n                                convertedCollection.add(m);\n                                keys.addAll(m.keySet());\n                            }\n                            List<String> _header;\n                            List<String> columnsIn = optionList(Printer.COLUMNS_IN, options);\n                            List<String> columnsOut = !options.containsKey(\"all\")\n                                    ? optionList(Printer.COLUMNS_OUT, options)\n                                    : new ArrayList<>();\n                            if (options.containsKey(Printer.COLUMNS)) {\n                                _header = (List<String>) options.get(Printer.COLUMNS);\n                            } else {\n                                _header = columnsIn;\n                                _header.addAll(keys.stream()\n                                        .filter(k -> !columnsIn.contains(k) && !hasMatch(columnsOut, k))\n                                        .collect(Collectors.toList()));\n                            }\n                            List<String> header = new ArrayList<>();\n                            List<Integer> columns = new ArrayList<>();\n                            int headerWidth = 0;\n                            List<String> refKeys = new ArrayList<>();\n                            for (String v : _header) {\n                                String value = v.split(\"\\\\.\")[0];\n                                if (!keys.contains(value) && !keys.contains(v)) {\n                                    continue;\n                                }\n                                boolean addKey = false;\n                                for (Map<String, Object> m : convertedCollection) {\n                                    Object val = mapValue(options, v, m);\n                                    if (val != null) {\n                                        addKey = simpleObject(val)\n                                                || options.containsKey(Printer.COLUMNS)\n                                                || options.containsKey(Printer.STRUCT_ON_TABLE);\n                                        break;\n                                    }\n                                }\n                                if (!addKey) {\n                                    continue;\n                                }\n                                refKeys.add(value);\n                                header.add(v);\n                                String cn = columnName(v, options.containsKey(Printer.SHORT_NAMES));\n                                columns.add(cn.length() + 1);\n                                headerWidth += cn.length() + 1;\n                                if (headerWidth > width) {\n                                    break;\n                                }\n                            }\n                            if (header.size() == 0) {\n                                throw new Exception(\"No columns for table!\");\n                            }\n                            double mapSimilarity = ((BigDecimal)\n                                            options.getOrDefault(Printer.MAP_SIMILARITY, new BigDecimal(\"0.8\")))\n                                    .doubleValue();\n                            int matchLimit = (int) Math.ceil(header.size() * mapSimilarity);\n                            for (Map<String, Object> m : convertedCollection) {\n                                if (!similarSets(refKeys, m.keySet(), matchLimit)) {\n                                    throw new Exception(\"Not homogenous list!\");\n                                }\n                                for (int i = 0; i < header.size(); i++) {\n                                    int cw = highlightMapValue(options, header.get(i), m)\n                                            .columnLength();\n                                    if (cw > columns.get(i) - 1) {\n                                        columns.set(i, cw + 1);\n                                    }\n                                }\n                            }\n                            toTabStops(columns, collection.size(), rownum, columnSep);\n                            AttributedStringBuilder asb = new AttributedStringBuilder().tabs(columns);\n                            asb.style(prntStyle.resolve(\".th\"));\n                            int firstColumn = 0;\n                            if (rownum) {\n                                asb.append(addPadding(\"\", columns.get(0) - columnSep.length() - 1));\n                                asb.append(columnSep);\n                                asb.append(\"\\t\");\n                                firstColumn = 1;\n                            }\n                            boolean first = true;\n                            for (String s : header) {\n                                if (!first) {\n                                    asb.append(columnSep);\n                                }\n                                asb.append(columnName(s, options.containsKey(Printer.SHORT_NAMES)));\n                                asb.append(\"\\t\");\n                                first = false;\n                            }\n                            asb.columnSubSequence(0, width).println(terminal());\n                            int row = 0;\n                            for (Map<String, Object> m : convertedCollection) {\n                                AttributedStringBuilder asb2 = new AttributedStringBuilder().tabs(columns);\n                                if (doRowHighlight(row, tableRows)) {\n                                    asb2.style(prntStyle.resolve(\".rs\"));\n                                }\n                                if (rownum) {\n                                    asb2.styled(\n                                            prntStyle.resolve(\".rn\"),\n                                            addPadding(Integer.toString(row), columns.get(0) - columnSep.length() - 1));\n                                    asb2.append(columnSep);\n                                    asb2.append(\"\\t\");\n                                }\n                                row++;\n                                for (int i = 0; i < header.size(); i++) {\n                                    if (i > 0) {\n                                        asb2.append(columnSep);\n                                    }\n                                    AttributedString v = highlightMapValue(options, header.get(i), m);\n                                    if (isNumber(v.toString())) {\n                                        v = addPadding(v, cellWidth(firstColumn + i, columns, rownum, columnSep) - 1);\n                                    }\n                                    asb2.append(v);\n                                    asb2.append(\"\\t\");\n                                }\n                                asb2.columnSubSequence(0, width).println(terminal());\n                            }\n                        } else if (collectionObject(elem) && !options.containsKey(Printer.TO_STRING)) {\n                            List<Integer> columns = new ArrayList<>();\n                            for (Object o : collection) {\n                                List<Object> inner = objectToList(o);\n                                for (int i = 0; i < inner.size(); i++) {\n                                    int len1 = objectToString(options, inner.get(i))\n                                                    .length()\n                                            + 1;\n                                    if (columns.size() <= i) {\n                                        columns.add(len1);\n                                    } else if (len1 > columns.get(i)) {\n                                        columns.set(i, len1);\n                                    }\n                                }\n                            }\n                            toTabStops(columns, collection.size(), rownum, columnSep);\n                            int row = 0;\n                            int firstColumn = rownum ? 1 : 0;\n                            for (Object o : collection) {\n                                AttributedStringBuilder asb = new AttributedStringBuilder().tabs(columns);\n                                if (doRowHighlight(row, tableRows)) {\n                                    asb.style(prntStyle.resolve(\".rs\"));\n                                }\n                                if (rownum) {\n                                    asb.styled(\n                                            prntStyle.resolve(\".rn\"),\n                                            addPadding(Integer.toString(row), columns.get(0) - columnSep.length() - 1));\n                                    asb.append(columnSep);\n                                    asb.append(\"\\t\");\n                                }\n                                row++;\n                                List<Object> inner = objectToList(o);\n                                for (int i = 0; i < inner.size(); i++) {\n                                    if (i > 0) {\n                                        asb.append(columnSep);\n                                    }\n                                    AttributedString v = highlightValue(options, null, inner.get(i));\n                                    if (isNumber(v.toString())) {\n                                        v = addPadding(v, cellWidth(firstColumn + i, columns, rownum, columnSep) - 1);\n                                    }\n                                    asb.append(v);\n                                    asb.append(\"\\t\");\n                                }\n                                asb.columnSubSequence(0, width).println(terminal());\n                            }\n                        } else {\n                            highlightList(options, collection, width);\n                        }\n                    } catch (Exception e) {\n                        Log.debug(\"Stack: \", e);\n                        highlightList(options, collection, width);\n                    }\n                }\n            } else {\n                highlightValue(options, null, objectToString(options, obj)).println(terminal());\n            }\n        } else if (canConvert(obj) && !options.containsKey(Printer.TO_STRING)) {\n            highlightMap(options, objectToMap(options, obj), width);\n        } else {\n            highlightValue(options, null, objectToString(options, obj)).println(terminal());\n        }\n        if (message != null) {\n            AttributedStringBuilder asb = new AttributedStringBuilder();\n            asb.styled(prntStyle.resolve(\".em\"), message);\n            asb.println(terminal());\n        }\n        if (runtimeException != null) {\n            throw runtimeException;\n        }\n    }",
  "abstract_func": "@SuppressWarnings(\"unchecked\")\n    private void highlightAndPrint(Map<String, Object> VAR_0, Object VAR_1) {\n        int VAR_2 = (int) VAR_0.get(VAR_3.WIDTH);\n        int VAR_4 = (int) VAR_0.get(VAR_3.MAXROWS);\n        VAR_5 = 0;\n        String VAR_6 = null;\n        RuntimeException VAR_7 = null;\n        if (VAR_1 == null) {\n            /* COMMENT_0 */\n        } else if (VAR_1 instanceof Map) {\n            highlightMap(VAR_0, keysToString((Map<Object, Object>) VAR_1), VAR_2);\n        } else if (collectionObject(VAR_1)) {\n            List<Object> VAR_8 = objectToList(VAR_1);\n            if (VAR_8.size() > VAR_4) {\n                VAR_6 = \"Truncated output: \" + VAR_4 + \"/\" + VAR_8.size();\n                VAR_8 = VAR_8.subList(VAR_8.size() - VAR_4, VAR_8.size());\n            }\n            if (!VAR_8.isEmpty()) {\n                if (VAR_8.size() == 1 && !VAR_0.containsKey(VAR_3.ONE_ROW_TABLE)) {\n                    Object VAR_9 = VAR_8.iterator().next();\n                    if (VAR_9 instanceof Map) {\n                        highlightMap(VAR_0, keysToString((Map<Object, Object>) VAR_9), VAR_2);\n                    } else if (canConvert(VAR_9) && !VAR_0.containsKey(VAR_3.TO_STRING)) {\n                        highlightMap(VAR_0, objectToMap(VAR_0, VAR_9), VAR_2);\n                    } else if (VAR_9 instanceof String && VAR_0.get(VAR_3.STYLE) != null) {\n                        highlightAndPrint(\n                                VAR_2, (SyntaxHighlighter) VAR_0.get(VAR_3.STYLE), (String) VAR_9, true, VAR_4);\n                    } else {\n                        highlightValue(VAR_0, null, objectToString(VAR_0, VAR_1))\n                                .println(terminal());\n                    }\n                } else {\n                    String VAR_10 = \"\";\n                    TableRows VAR_11 = null;\n                    boolean VAR_12 = VAR_0.containsKey(VAR_3.ROWNUM);\n                    try {\n                        VAR_10 = (String) VAR_0.getOrDefault(VAR_3.BORDER, \"\");\n                        VAR_11 = optionRowHighlight(VAR_0.getOrDefault(VAR_3.ROW_HIGHLIGHT, null));\n                    } catch (Exception VAR_13) {\n                        VAR_7 = new BadOptionValueException(\n                                \"Option \" + VAR_3.BORDER + \" or \" + VAR_3.ROW_HIGHLIGHT + \" has a bad value!\");\n                        VAR_7.addSuppressed(VAR_13);\n                    }\n                    try {\n                        Object VAR_9 = VAR_8.iterator().next();\n                        boolean VAR_14 = canConvert(VAR_9);\n                        if ((VAR_9 instanceof Map || VAR_14) && !VAR_0.containsKey(VAR_3.TO_STRING)) {\n                            List<Map<String, Object>> VAR_15 = new ArrayList<>();\n                            Set<String> VAR_16 = new HashSet<>();\n                            for (Object VAR_17 : VAR_8) {\n                                Map<String, Object> VAR_18 =\n                                        VAR_14 ? objectToMap(VAR_0, VAR_17) : keysToString((Map<Object, Object>) VAR_17);\n                                VAR_15.add(VAR_18);\n                                VAR_16.addAll(VAR_18.keySet());\n                            }\n                            List<String> VAR_19;\n                            List<String> VAR_20 = optionList(VAR_3.COLUMNS_IN, VAR_0);\n                            List<String> VAR_21 = !VAR_0.containsKey(\"all\")\n                                    ? optionList(VAR_3.COLUMNS_OUT, VAR_0)\n                                    : new ArrayList<>();\n                            if (VAR_0.containsKey(VAR_3.COLUMNS)) {\n                                VAR_19 = (List<String>) VAR_0.get(VAR_3.COLUMNS);\n                            } else {\n                                VAR_19 = VAR_20;\n                                VAR_19.addAll(VAR_16.stream()\n                                        .filter(VAR_22 -> !VAR_20.contains(VAR_22) && !hasMatch(VAR_21, VAR_22))\n                                        .collect(VAR_23.toList()));\n                            }\n                            List<String> VAR_24 = new ArrayList<>();\n                            List<Integer> VAR_25 = new ArrayList<>();\n                            int VAR_26 = 0;\n                            List<String> VAR_27 = new ArrayList<>();\n                            for (String VAR_28 : VAR_19) {\n                                String VAR_29 = VAR_28.split(\"\\\\.\")[0];\n                                if (!VAR_16.contains(VAR_29) && !VAR_16.contains(VAR_28)) {\n                                    continue;\n                                }\n                                boolean VAR_30 = false;\n                                for (Map<String, Object> VAR_18 : VAR_15) {\n                                    Object VAR_31 = mapValue(VAR_0, VAR_28, VAR_18);\n                                    if (VAR_31 != null) {\n                                        VAR_30 = simpleObject(VAR_31)\n                                                || VAR_0.containsKey(VAR_3.COLUMNS)\n                                                || VAR_0.containsKey(VAR_3.STRUCT_ON_TABLE);\n                                        break;\n                                    }\n                                }\n                                if (!VAR_30) {\n                                    continue;\n                                }\n                                VAR_27.add(VAR_29);\n                                VAR_24.add(VAR_28);\n                                String VAR_32 = columnName(VAR_28, VAR_0.containsKey(VAR_3.SHORT_NAMES));\n                                VAR_25.add(VAR_32.length() + 1);\n                                VAR_26 += VAR_32.length() + 1;\n                                if (VAR_26 > VAR_2) {\n                                    break;\n                                }\n                            }\n                            if (VAR_24.size() == 0) {\n                                throw new Exception(\"No columns for table!\");\n                            }\n                            double VAR_33 = ((BigDecimal)\n                                            VAR_0.getOrDefault(VAR_3.MAP_SIMILARITY, new BigDecimal(\"0.8\")))\n                                    .doubleValue();\n                            int VAR_34 = (int) VAR_35.ceil(VAR_24.size() * VAR_33);\n                            for (Map<String, Object> VAR_18 : VAR_15) {\n                                if (!similarSets(VAR_27, VAR_18.keySet(), VAR_34)) {\n                                    throw new Exception(\"Not homogenous list!\");\n                                }\n                                for (int VAR_36 = 0; VAR_36 < VAR_24.size(); VAR_36++) {\n                                    int VAR_37 = highlightMapValue(VAR_0, VAR_24.get(VAR_36), VAR_18)\n                                            .columnLength();\n                                    if (VAR_37 > VAR_25.get(VAR_36) - 1) {\n                                        VAR_25.set(VAR_36, VAR_37 + 1);\n                                    }\n                                }\n                            }\n                            toTabStops(VAR_25, VAR_8.size(), VAR_12, VAR_10);\n                            AttributedStringBuilder VAR_38 = new AttributedStringBuilder().tabs(VAR_25);\n                            VAR_38.style(VAR_39.resolve(\".th\"));\n                            int VAR_40 = 0;\n                            if (VAR_12) {\n                                VAR_38.append(addPadding(\"\", VAR_25.get(0) - VAR_10.length() - 1));\n                                VAR_38.append(VAR_10);\n                                VAR_38.append(\"\\t\");\n                                VAR_40 = 1;\n                            }\n                            boolean VAR_41 = true;\n                            for (String VAR_42 : VAR_24) {\n                                if (!VAR_41) {\n                                    VAR_38.append(VAR_10);\n                                }\n                                VAR_38.append(columnName(VAR_42, VAR_0.containsKey(VAR_3.SHORT_NAMES)));\n                                VAR_38.append(\"\\t\");\n                                VAR_41 = false;\n                            }\n                            VAR_38.columnSubSequence(0, VAR_2).println(terminal());\n                            int VAR_43 = 0;\n                            for (Map<String, Object> VAR_18 : VAR_15) {\n                                AttributedStringBuilder VAR_44 = new AttributedStringBuilder().tabs(VAR_25);\n                                if (doRowHighlight(VAR_43, VAR_11)) {\n                                    VAR_44.style(VAR_39.resolve(\".rs\"));\n                                }\n                                if (VAR_12) {\n                                    VAR_44.styled(\n                                            VAR_39.resolve(\".rn\"),\n                                            addPadding(VAR_45.toString(VAR_43), VAR_25.get(0) - VAR_10.length() - 1));\n                                    VAR_44.append(VAR_10);\n                                    VAR_44.append(\"\\t\");\n                                }\n                                VAR_43++;\n                                for (int VAR_36 = 0; VAR_36 < VAR_24.size(); VAR_36++) {\n                                    if (VAR_36 > 0) {\n                                        VAR_44.append(VAR_10);\n                                    }\n                                    AttributedString VAR_28 = highlightMapValue(VAR_0, VAR_24.get(VAR_36), VAR_18);\n                                    if (isNumber(VAR_28.toString())) {\n                                        VAR_28 = addPadding(VAR_28, cellWidth(VAR_40 + VAR_36, VAR_25, VAR_12, VAR_10) - 1);\n                                    }\n                                    VAR_44.append(VAR_28);\n                                    VAR_44.append(\"\\t\");\n                                }\n                                VAR_44.columnSubSequence(0, VAR_2).println(terminal());\n                            }\n                        } else if (collectionObject(VAR_9) && !VAR_0.containsKey(VAR_3.TO_STRING)) {\n                            List<Integer> VAR_25 = new ArrayList<>();\n                            for (Object VAR_17 : VAR_8) {\n                                List<Object> VAR_46 = objectToList(VAR_17);\n                                for (int VAR_36 = 0; VAR_36 < VAR_46.size(); VAR_36++) {\n                                    int VAR_47 = objectToString(VAR_0, VAR_46.get(VAR_36))\n                                                    .length()\n                                            + 1;\n                                    if (VAR_25.size() <= VAR_36) {\n                                        VAR_25.add(VAR_47);\n                                    } else if (VAR_47 > VAR_25.get(VAR_36)) {\n                                        VAR_25.set(VAR_36, VAR_47);\n                                    }\n                                }\n                            }\n                            toTabStops(VAR_25, VAR_8.size(), VAR_12, VAR_10);\n                            int VAR_43 = 0;\n                            int VAR_40 = VAR_12 ? 1 : 0;\n                            for (Object VAR_17 : VAR_8) {\n                                AttributedStringBuilder VAR_38 = new AttributedStringBuilder().tabs(VAR_25);\n                                if (doRowHighlight(VAR_43, VAR_11)) {\n                                    VAR_38.style(VAR_39.resolve(\".rs\"));\n                                }\n                                if (VAR_12) {\n                                    VAR_38.styled(\n                                            VAR_39.resolve(\".rn\"),\n                                            addPadding(VAR_45.toString(VAR_43), VAR_25.get(0) - VAR_10.length() - 1));\n                                    VAR_38.append(VAR_10);\n                                    VAR_38.append(\"\\t\");\n                                }\n                                VAR_43++;\n                                List<Object> VAR_46 = objectToList(VAR_17);\n                                for (int VAR_36 = 0; VAR_36 < VAR_46.size(); VAR_36++) {\n                                    if (VAR_36 > 0) {\n                                        VAR_38.append(VAR_10);\n                                    }\n                                    AttributedString VAR_28 = highlightValue(VAR_0, null, VAR_46.get(VAR_36));\n                                    if (isNumber(VAR_28.toString())) {\n                                        VAR_28 = addPadding(VAR_28, cellWidth(VAR_40 + VAR_36, VAR_25, VAR_12, VAR_10) - 1);\n                                    }\n                                    VAR_38.append(VAR_28);\n                                    VAR_38.append(\"\\t\");\n                                }\n                                VAR_38.columnSubSequence(0, VAR_2).println(terminal());\n                            }\n                        } else {\n                            highlightList(VAR_0, VAR_8, VAR_2);\n                        }\n                    } catch (Exception VAR_13) {\n                        VAR_48.debug(\"Stack: \", VAR_13);\n                        highlightList(VAR_0, VAR_8, VAR_2);\n                    }\n                }\n            } else {\n                highlightValue(VAR_0, null, objectToString(VAR_0, VAR_1)).println(terminal());\n            }\n        } else if (canConvert(VAR_1) && !VAR_0.containsKey(VAR_3.TO_STRING)) {\n            highlightMap(VAR_0, objectToMap(VAR_0, VAR_1), VAR_2);\n        } else {\n            highlightValue(VAR_0, null, objectToString(VAR_0, VAR_1)).println(terminal());\n        }\n        if (VAR_6 != null) {\n            AttributedStringBuilder VAR_38 = new AttributedStringBuilder();\n            VAR_38.styled(VAR_39.resolve(\".em\"), VAR_6);\n            VAR_38.println(terminal());\n        }\n        if (VAR_7 != null) {\n            throw VAR_7;\n        }\n    }",
  "func_graph_path": "jline/jline3/f3c60a3e6255e8e0c20d5043a4fe248446f292bb/DefaultPrinter.java/vul/after/1.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,6 +1,7 @@\n @SuppressWarnings(\"unchecked\")\n     private void highlightAndPrint(Map<String, Object> options, Object obj) {\n         int width = (int) options.get(Printer.WIDTH);\n+        int maxrows = (int) options.get(Printer.MAXROWS);\n         totLines = 0;\n         String message = null;\n         RuntimeException runtimeException = null;\n@@ -10,10 +11,9 @@\n             highlightMap(options, keysToString((Map<Object, Object>) obj), width);\n         } else if (collectionObject(obj)) {\n             List<Object> collection = objectToList(obj);\n-            if (collection.size() > (int) options.get(Printer.MAXROWS)) {\n-                message = \"Truncated output: \" + options.get(Printer.MAXROWS) + \"/\" + collection.size();\n-                collection =\n-                        collection.subList(collection.size() - (int) options.get(Printer.MAXROWS), collection.size());\n+            if (collection.size() > maxrows) {\n+                message = \"Truncated output: \" + maxrows + \"/\" + collection.size();\n+                collection = collection.subList(collection.size() - maxrows, collection.size());\n             }\n             if (!collection.isEmpty()) {\n                 if (collection.size() == 1 && !options.containsKey(Printer.ONE_ROW_TABLE)) {\n@@ -23,7 +23,8 @@\n                     } else if (canConvert(elem) && !options.containsKey(Printer.TO_STRING)) {\n                         highlightMap(options, objectToMap(options, elem), width);\n                     } else if (elem instanceof String && options.get(Printer.STYLE) != null) {\n-                        highlightAndPrint(width, (SyntaxHighlighter) options.get(Printer.STYLE), (String) elem, true);\n+                        highlightAndPrint(\n+                                width, (SyntaxHighlighter) options.get(Printer.STYLE), (String) elem, true, maxrows);\n                     } else {\n                         highlightValue(options, null, objectToString(options, obj))\n                                 .println(terminal());",
  "diff_line_info": {
    "deleted_lines": [
      "            if (collection.size() > (int) options.get(Printer.MAXROWS)) {",
      "                message = \"Truncated output: \" + options.get(Printer.MAXROWS) + \"/\" + collection.size();",
      "                collection =",
      "                        collection.subList(collection.size() - (int) options.get(Printer.MAXROWS), collection.size());",
      "                        highlightAndPrint(width, (SyntaxHighlighter) options.get(Printer.STYLE), (String) elem, true);"
    ],
    "added_lines": [
      "        int maxrows = (int) options.get(Printer.MAXROWS);",
      "            if (collection.size() > maxrows) {",
      "                message = \"Truncated output: \" + maxrows + \"/\" + collection.size();",
      "                collection = collection.subList(collection.size() - maxrows, collection.size());",
      "                        highlightAndPrint(",
      "                                width, (SyntaxHighlighter) options.get(Printer.STYLE), (String) elem, true, maxrows);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/jline/jline3/pull/917",
  "description": {
    "pr_info": {
      "title": "Curses update",
      "number": 917
    },
    "comment": [
      "Merged master int curses, sorted out some conflicts, but does not compile"
    ]
  },
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "\n\n**Final Output:**\n\nAnalysis: The patch addresses an Out Of Memory (OOM) exception caused by excessive memory usage when processing large collections. It optimizes the handling of MAXROWS by storing it in a variable to reduce method calls, improving performance and preventing crashes. The issue is a stability concern, not a security vulnerability.\n\nFinal Classification: Defect Remediation & Feature Upgrades\n\nConfidence Score: 0.9"
}