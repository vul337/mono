{
  "cve_id": "CVE-2022-44262",
  "cwe_ids": [
    "CWE-Other"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
  "cvss_is_v3": true,
  "repo_name": "ff4j",
  "commit_msg": "fix: Validate FlippingStrategy in various parsers (#624)",
  "commit_hash": "991df72725f78adbc413d9b0fbb676201f1882e0",
  "git_url": "https://github.com/ff4j/ff4j/commit/991df72725f78adbc413d9b0fbb676201f1882e0",
  "file_path": "ff4j-core/src/main/java/org/ff4j/utils/MappingUtil.java",
  "func_name": "instanceFlippingStrategy",
  "func_before": "@SuppressWarnings(\"unchecked\")\n\tpublic static FlippingStrategy instanceFlippingStrategy(String uid, String className,  Map<String, String> initparams) {\n        try {\n            Class<FlippingStrategy> clazz = (Class<FlippingStrategy>) (classLoader == null ? Class.forName(className) : classLoader.loadClass(className));\n            FlippingStrategy flipStrategy = clazz.newInstance();\n            flipStrategy.init(uid, initparams);\n            return flipStrategy;\n        } catch (Exception ie) {\n            throw new FeatureAccessException(\"Cannot instantiate Strategy, no default constructor available\", ie);\n        } \n    }",
  "abstract_func_before": "@SuppressWarnings(\"unchecked\")\n\tpublic static FlippingStrategy instanceFlippingStrategy(String VAR_0, String VAR_1,  Map<String, String> VAR_2) {\n        try {\n            Class<FlippingStrategy> VAR_3 = (Class<FlippingStrategy>) (VAR_4 == null ? VAR_5.forName(VAR_1) : VAR_4.loadClass(VAR_1));\n            FlippingStrategy VAR_6 = VAR_3.newInstance();\n            VAR_6.init(VAR_0, VAR_2);\n            return VAR_6;\n        } catch (Exception VAR_7) {\n            throw new FeatureAccessException(\"Cannot instantiate Strategy, no default constructor available\", VAR_7);\n        } \n    }",
  "func_graph_path_before": "ff4j/991df72725f78adbc413d9b0fbb676201f1882e0/MappingUtil.java/vul/before/0.json",
  "func": "@SuppressWarnings(\"unchecked\")\n\tpublic static FlippingStrategy instanceFlippingStrategy(String uid, String className,  Map<String, String> initparams) {\n        try {\n            Class<FlippingStrategy> clazz = (Class<FlippingStrategy>) (classLoader == null ? Class.forName(className) : classLoader.loadClass(className));\n            if (!FlippingStrategy.class.isAssignableFrom(clazz)) {\n                throw new IllegalArgumentException(\"Invalid type \" + className );\n            }\n            FlippingStrategy flipStrategy = clazz.newInstance();\n            flipStrategy.init(uid, initparams);\n            return flipStrategy;\n        } catch (Exception ie) {\n            throw new FeatureAccessException(\"Cannot instantiate Strategy, no default constructor available\", ie);\n        } \n    }",
  "abstract_func": "@SuppressWarnings(\"unchecked\")\n\tpublic static FlippingStrategy instanceFlippingStrategy(String VAR_0, String VAR_1,  Map<String, String> VAR_2) {\n        try {\n            Class<FlippingStrategy> VAR_3 = (Class<FlippingStrategy>) (VAR_4 == null ? VAR_5.forName(VAR_1) : VAR_4.loadClass(VAR_1));\n            if (!FlippingStrategy.class.isAssignableFrom(VAR_3)) {\n                throw new IllegalArgumentException(\"Invalid type \" + VAR_1 );\n            }\n            FlippingStrategy VAR_6 = VAR_3.newInstance();\n            VAR_6.init(VAR_0, VAR_2);\n            return VAR_6;\n        } catch (Exception VAR_7) {\n            throw new FeatureAccessException(\"Cannot instantiate Strategy, no default constructor available\", VAR_7);\n        } \n    }",
  "func_graph_path": "ff4j/991df72725f78adbc413d9b0fbb676201f1882e0/MappingUtil.java/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -2,6 +2,9 @@\n \tpublic static FlippingStrategy instanceFlippingStrategy(String uid, String className,  Map<String, String> initparams) {\n         try {\n             Class<FlippingStrategy> clazz = (Class<FlippingStrategy>) (classLoader == null ? Class.forName(className) : classLoader.loadClass(className));\n+            if (!FlippingStrategy.class.isAssignableFrom(clazz)) {\n+                throw new IllegalArgumentException(\"Invalid type \" + className );\n+            }\n             FlippingStrategy flipStrategy = clazz.newInstance();\n             flipStrategy.init(uid, initparams);\n             return flipStrategy;",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "            if (!FlippingStrategy.class.isAssignableFrom(clazz)) {",
      "                throw new IllegalArgumentException(\"Invalid type \" + className );",
      "            }"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/ff4j/ff4j/pull/625",
  "description": {
    "pr_info": {
      "title": "fix: CVE-2022-44262 (#624)",
      "number": 625
    },
    "comment": [
      "Fixes #624 \r\n\r\nThis asserts that the Property being constructed extends `org.ff4j.property.Property`\r\n\r\n```\r\nConstructor<?> constr = Class.forName(optionalType).getConstructor(String.class, String.class);\r\nap = (Property<?>) constr.newInstance(name, strValue);\r\n```\r\n\r\nThis seems to be what is happening in the above code:\r\n\r\n1.`Class.forName(optionalType)` retrieves the target class\r\n2. `.getConstructor(String.class, String.class)` finds a constructor on the target class that accepts two String parameters\r\n3. `constr.newInstance(name, strValue)` constructs the instance (where the side effect happens)\r\n4. `(Property<?>)` type casts the new instance of the class. This throws an IllegalArgumentException, but the instance has been created already.",
      "the RCE is present in different points of the FF4j project.\r\nAll inputs must be validated with the proper \"isAssignableFrom\" method before executing \"newInstance\" of Class.forName(\"someinputstring\")\r\nThis applies to both property and strategy parsing/creating.\r\n\r\nExamples: \r\nff4j-core:\r\norg.ff4j.utils.MappingUtil line 183\r\norg.ff4j.conf.XmlParser line 387\r\n\r\nff4j-config-yaml:\r\norg.ff4j.parser.yaml.YamlParser line 175\r\n\r\n"
    ]
  },
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.9,
  "Bug Filter Response": "\n\n**Final Output:**\n\nAnalysis: The patch adds validation to ensure that the class being loaded is a valid FlippingStrategy. This prevents the instantiation of invalid classes, enhancing robustness but not directly addressing a security vulnerability.\n\nFinal Classification: Defect Remediation & Feature Upgrades\n\nConfidence Score: 0.9"
}