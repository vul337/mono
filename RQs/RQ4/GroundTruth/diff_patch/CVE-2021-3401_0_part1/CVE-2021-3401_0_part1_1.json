{
  "cve_id": "CVE-2021-3401",
  "cwe_ids": [
    "CWE-88"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:P/I:P/A:P",
  "cvss_is_v3": false,
  "repo_name": "bitcoin",
  "commit_msg": "Give QApplication dummy arguments\n\nQApplication takes the command line arguments and parses them itself\nfor some built in command line arguments that it has. We don't want\nany of those built in arguments, so instead give it dummy arguments.",
  "commit_hash": "a2714a5c69f0b0506689af04c3e785f71ee0915d",
  "git_url": "https://github.com/bitcoin/bitcoin/commit/a2714a5c69f0b0506689af04c3e785f71ee0915d",
  "file_path": "src/qt/bitcoin.cpp",
  "func_name": "BitcoinApplication::BitcoinApplication",
  "func_before": "BitcoinApplication::BitcoinApplication(interfaces::Node& node, int &argc, char **argv):\n    QApplication(argc, argv),\n    coreThread(nullptr),\n    m_node(node),\n    optionsModel(nullptr),\n    clientModel(nullptr),\n    window(nullptr),\n    pollShutdownTimer(nullptr),\n    returnValue(0),\n    platformStyle(nullptr)\n{\n    setQuitOnLastWindowClosed(false);\n}",
  "abstract_func_before": "BitcoinApplication::BitcoinApplication(interfaces::Node& VAR_0, int &VAR_1, char **VAR_2):\n    QApplication(VAR_1, VAR_2),\n    coreThread(nullptr),\n    m_node(VAR_0),\n    optionsModel(nullptr),\n    clientModel(nullptr),\n    window(nullptr),\n    pollShutdownTimer(nullptr),\n    returnValue(0),\n    platformStyle(nullptr)\n{\n    setQuitOnLastWindowClosed(false);\n}",
  "func_graph_path_before": "bitcoin/a2714a5c69f0b0506689af04c3e785f71ee0915d/bitcoin.cpp/vul/before/1.json",
  "func": "BitcoinApplication::BitcoinApplication(interfaces::Node& node):\n    QApplication(qt_argc, const_cast<char **>(&qt_argv)),\n    coreThread(nullptr),\n    m_node(node),\n    optionsModel(nullptr),\n    clientModel(nullptr),\n    window(nullptr),\n    pollShutdownTimer(nullptr),\n    returnValue(0),\n    platformStyle(nullptr)\n{\n    setQuitOnLastWindowClosed(false);\n}",
  "abstract_func": "BitcoinApplication::BitcoinApplication(interfaces::Node& VAR_0):\n    QApplication(VAR_1, VAR_2<char **>(&VAR_3)),\n    coreThread(nullptr),\n    m_node(VAR_0),\n    optionsModel(nullptr),\n    clientModel(nullptr),\n    window(nullptr),\n    pollShutdownTimer(nullptr),\n    returnValue(0),\n    platformStyle(nullptr)\n{\n    setQuitOnLastWindowClosed(false);\n}",
  "func_graph_path": "bitcoin/a2714a5c69f0b0506689af04c3e785f71ee0915d/bitcoin.cpp/vul/after/1.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,5 +1,5 @@\n-BitcoinApplication::BitcoinApplication(interfaces::Node& node, int &argc, char **argv):\n-    QApplication(argc, argv),\n+BitcoinApplication::BitcoinApplication(interfaces::Node& node):\n+    QApplication(qt_argc, const_cast<char **>(&qt_argv)),\n     coreThread(nullptr),\n     m_node(node),\n     optionsModel(nullptr),",
  "diff_line_info": {
    "deleted_lines": [
      "BitcoinApplication::BitcoinApplication(interfaces::Node& node, int &argc, char **argv):",
      "    QApplication(argc, argv),"
    ],
    "added_lines": [
      "BitcoinApplication::BitcoinApplication(interfaces::Node& node):",
      "    QApplication(qt_argc, const_cast<char **>(&qt_argv)),"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/bitcoin/bitcoin/pull/16578",
  "description": {
    "pr_info": {
      "title": "Do not pass in command line arguments to QApplication",
      "number": 16578
    },
    "comment": [
      "QApplication takes the command line arguments and parses them itself for some [built in command line arguments](https://doc.qt.io/qt-5/qapplication.html#QApplication) that it has. We don't want any of those built in arguments, so instead give it dummy arguments.\r\n\r\nTo test, you can use the `-reverse` option. Without this patch, everything will appear right-to-left; things that were on the left side will be on the right and everything is right aligned.\r\n\r\nAfter this patch, `-reverse` will now give a startup error since we do not support this argument.",
      "> We don't want any of those built in arguments\r\n\r\nCare to explain why?",
      "> Care to explain why?\r\n\r\nThey can do unexpected things and cause issues. Qt can also just add more arguments that do other stuff. We have a larger attack surface by allowing this.",
      "For reference see\r\n - https://doc.qt.io/qt-5/qapplication.html#QApplication:\r\n - https://doc.qt.io/qt-5/qguiapplication.html#QGuiApplication\r\n - https://doc.qt.io/qt-5/qcoreapplication.html#QCoreApplication",
      "@theuni might want to comment here, as he was asking about if the changes in #16386 would [`remove the ability to add qt-specific runtime args to bitcoin-qt ?`](https://github.com/bitcoin/bitcoin/pull/16386#discussion_r306606456).",
      "Concept ACK",
      "@hebasto that's why the variables are `static`, it holds just as true for static variables within a function scope",
      "Concept ACK",
      "Concept ACK: smaller attack surface is better.",
      "Concept ACK.\r\nCodewise, I agree with @laanwj that casting const away and passing it to QApplication seems unfortunate.",
      "How about this\r\n```diff\r\ndiff --git a/src/qt/bitcoin.cpp b/src/qt/bitcoin.cpp\r\nindex 5ce4f3c19..f38235b15 100644\r\n--- a/src/qt/bitcoin.cpp\r\n+++ b/src/qt/bitcoin.cpp\r\n@@ -169,11 +169,8 @@ void BitcoinCore::shutdown()\r\n     }\r\n }\r\n\r\n-static int qt_argc = 1;\r\n-static const char* qt_argv = \"bitcoin-qt\";\r\n-\r\n BitcoinApplication::BitcoinApplication(interfaces::Node& node):\r\n-    QApplication(qt_argc, const_cast<char **>(&qt_argv)),\r\n+    QApplication(argc, const_cast<char **>(&argv)),\r\n     coreThread(nullptr),\r\n     m_node(node),\r\n     optionsModel(nullptr),\r\ndiff --git a/src/qt/bitcoin.h b/src/qt/bitcoin.h\r\nindex 3869193a3..d8b7f3b36 100644\r\n--- a/src/qt/bitcoin.h\r\n+++ b/src/qt/bitcoin.h\r\n@@ -55,6 +55,10 @@ private:\r\n class BitcoinApplication: public QApplication\r\n {\r\n     Q_OBJECT\r\n+\r\n+    // Some wild comment here...\r\n+    int argc{1};\r\n+    const char* argv{\"bitcoin-qt\"};\r\n public:\r\n     explicit BitcoinApplication(interfaces::Node& node);\r\n     ~BitcoinApplication();\r\n```",
      "> How about this\r\n\r\nResults in a segfault.\r\n\r\n***\r\n\r\nFWIW, making the `argv` const and then casting it is how `QCoreApplication` [does it internally](https://code.qt.io/cgit/qt/qtbase.git/tree/src/corelib/kernel/qcoreapplication.cpp#n464) when you say `argc` is 0. The only reason that I did not choose to just do `QApplication(0, 0)` is because it results in the warning `QSettings::value: Empty key passed` being printed a couple of times (at least for me using KDE, this might actually just be a KDE thing).",
      "@achow101 ~~But why add the const at all if you're going to cast it away?~~\r\n\r\nEdit: oh, because of the string constant. I get it, the *string* is read-only, which is fine, Qt is not going to change the contents of arguments, but the *array* needs to be writable as it might remove arguments.\r\n",
      "ACK a2714a5c69f0b0506689af04c3e785f71ee0915d",
      "Technically, there is a [solution](https://github.com/bitcoin/bitcoin/pull/16578#discussion_r312712522) without `const`.",
      "> Technically, there is a [solution](https://github.com/bitcoin/bitcoin/pull/16578#discussion_r312712522) without `const`.\r\n\r\nI'm going to leave it as is. I feel that doing the same thing that Qt does internally is safe and there's no reason that we should not follow suit.",
      "> FWIW, making the `argv` const and then casting it is how `QCoreApplication` [does it internally](https://code.qt.io/cgit/qt/qtbase.git/tree/src/corelib/kernel/qcoreapplication.cpp#n464) when you say `argc` is 0.\r\n\r\nIndeed.\r\n\r\nACK a2714a5c69f0b0506689af04c3e785f71ee0915d",
      "Added for backport in #16617.",
      "Some of these options are useful...",
      "Examples of options users should be free to use/play with: \r\n\r\n* -style= style, sets the application GUI style. Possible values are motif, windows, and platinum. If you compiled Qt with additional styles or have additional styles as plugins these will be available to the -style command line option.\r\n* -style style, is the same as listed above.\r\n* -stylesheet= stylesheet, sets the application styleSheet. The value must be a path to a file that contains the Style Sheet.\r\n* -reverse, sets the application's layout direction to Qt::RightToLeft\r\n* -graphicssystem, sets the backend to be used for on-screen widgets and QPixmaps. Available options are raster and opengl.\r\n* -display display, sets the X display (default is $DISPLAY).\r\n* -geometry geometry, sets the client geometry of the first window that is shown.\r\n* -fn or -font font, defines the application font. The font should be specified using an X logical font description. Note that this option is ignored when Qt is built with fontconfig support enabled.\r\n* -bg or -background color, sets the default background color and an application palette (light and dark shades are calculated).\r\n* -fg or -foreground color, sets the default foreground color.\r\n* -btn or -button color, sets the default button color.\r\n* -visual TrueColor, forces the application to use a TrueColor visual on an 8-bit display.\r\n* -ncols count, limits the number of colors allocated in the color cube on an 8-bit display, if the application is using the QApplication::ManyColor color specification. If count is 216 then a 6x6x6 color cube is used (i.e. 6 levels of red, 6 of green, and 6 of blue); for other values, a cube approximately proportional to a 2x3x1 cube is used.\r\n* -cmap, causes the application to install a private color map on an 8-bit display.\r\n* -im, sets the input method server (equivalent to setting the XMODIFIERS environment variable)\r\n* -inputstyle, defines how the input is inserted into the given widget, e.g., onTheSpot makes the input appear directly in the widget, while overTheSpot makes the input appear in a box floating over the widget and is not inserted until the editing is done.\r\n\r\nSome of these (eg, -display) are standard options for GUI applications that we don't independently implement. Future versions of Qt may add more useful options.",
      "This change broke the ability to run GUI tests while seeing actions onscreen:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/2324aa1dc409e9496b7083aaef5fcb20849f33c0/src/qt/test/wallettests.cpp#L126-L128\r\n\r\nWithout being able to set the platform, it's not really possible to write new interactive tests or debug existing ones. I could try to figure out a workaround, maybe using different styles of argument passing for the test program and main program, or maybe implementing some new mechanism for choosing the qt backend other than the standard one...\r\n\r\nBut honestly I don't find this PR to be very well motivated to begin with, and I wonder if there would be practical downsides to just reverting it. I don't want to step on anybody's toes, but I don't understand where the motivation for this change originally came from and if there are security concerns other than the non-specific \"larger attack surface\" one cited in comments.\r\n\r\nI'd like to know if it'd be ok to submit a PR reverting this change, or if another approach would be suggested.",
      "What about `QT_QPA_PLATFORM` or one of the other [environment variables](https://github.com/pyqt/python-qt5/wiki/Qt-Environment-Variable-Reference)?\r\n\r\n> the non-specific \"larger attack surface\" one cited in comments\r\n\r\nWe don't want to be too specific about this yet.",
      "I made an issue about the `test_bitcoin-qt -platform cocoa`: #17013. I see @ryanofsky already spotted it. A `QT_QPA_PLATFORM` environment variable works for me.",
      "This also breaks the URI handler on macOS, but _only_ when opening from the command line, not when opening from a browser. See #17025.",
      "Disclosure of the vulnerability this PR fixes: https://achow101.com/2021/02/0.18-uri-vuln\r\n\r\nA possible followup now that this is public would be to explicitly allow safe Qt arguments instead of flatly disabling all of them.",
      "@achow101 Very nice find and thanks for sharing! Has this one been assigned a CVE yet?",
      "> Has this one been assigned a CVE yet?\r\n\r\n[CVE-2021-3401](https://cve.mitre.org/cgi-bin/cvename.cgi?name=2021-3401)"
    ]
  },
  "Bug Filter": "Security Vulnerability Fix\n\nConfidence Score: 0.95",
  "Bug Filter Confidence": 0.95,
  "Bug Filter Response": "\n\n**Final Output:**\n\nAnalysis: The patch modifies the BitcoinApplication constructor to use dummy command-line arguments, preventing the use of potentially harmful built-in Qt arguments. This addresses a security vulnerability where such arguments could be exploited, as indicated by the associated CVE-2021-3401.\n\nFinal Classification: Security Vulnerability Fix\n\nConfidence Score: 0.95"
}