{
  "cve_id": "CVE-2021-36144",
  "cwe_ids": [
    "CWE-416"
  ],
  "cvss_vector": "AV:N/AC:L/Au:N/C:N/I:N/A:P",
  "cvss_is_v3": false,
  "repo_name": "projectacrn/acrn-hypervisor",
  "commit_msg": "dm: Reset virtio device before release\n\nWith virtio polling mode enabled, a timer is running in the virtio\nbackend service. And the timer will also be triggered if its frondend\ndriver didn't do the device reset in shutdown. A freed virtio device\nwill be accessed in the polling timer handler.\n\nDo the virtio reset() callback specifically to clear the polling timer\nbefore the free.\n\nTracked-On: #6147\nSigned-off-by: Shuo A Liu <shuo.a.liu@intel.com>\nSigned-off-by: Yonghua Huang <yonghua.huang@intel.com>",
  "commit_hash": "dd88504804e186029f845a166dc5c31695e2cca2",
  "git_url": "https://github.com/projectacrn/acrn-hypervisor/commit/dd88504804e186029f845a166dc5c31695e2cca2",
  "file_path": "devicemodel/hw/pci/virtio/virtio_block.c",
  "func_name": "virtio_blk_deinit",
  "func_before": "static void\nvirtio_blk_deinit(struct vmctx *ctx, struct pci_vdev *dev, char *opts)\n{\n\tstruct blockif_ctxt *bctxt;\n\tstruct virtio_blk *blk;\n\n\tif (dev->arg) {\n\t\tDPRINTF((\"virtio_blk: deinit\\n\"));\n\t\tblk = (struct virtio_blk *) dev->arg;\n\t\t/* De-init virtio-blk device only on valid bctxt*/\n\t\tif (!blk->dummy_bctxt) {\n\t\t\tbctxt = blk->bc;\n\t\t\tif (blockif_flush_all(bctxt))\n\t\t\t\tWPRINTF((\"vrito_blk: Failed to flush before close\\n\"));\n\t\t\tblockif_close(bctxt);\n\t\t}\n\t\tfree(blk);\n\t}\n}",
  "abstract_func_before": "static void\nvirtio_blk_deinit(struct vmctx *VAR_0, struct pci_vdev *VAR_1, char *VAR_2)\n{\n\tstruct blockif_ctxt *VAR_3;\n\tstruct virtio_blk *VAR_4;\n\n\tif (VAR_1->arg) {\n\t\tDPRINTF((\"virtio_blk: deinit\\n\"));\n\t\tVAR_4 = (struct virtio_blk *) VAR_1->arg;\n\t\t/* COMMENT_0 */\n\t\tif (!VAR_4->dummy_bctxt) {\n\t\t\tVAR_3 = VAR_4->bc;\n\t\t\tif (blockif_flush_all(VAR_3))\n\t\t\t\tWPRINTF((\"vrito_blk: Failed to flush before close\\n\"));\n\t\t\tblockif_close(VAR_3);\n\t\t}\n\t\tfree(VAR_4);\n\t}\n}",
  "func_graph_path_before": "projectacrn/acrn-hypervisor/dd88504804e186029f845a166dc5c31695e2cca2/virtio_block.c/vul/before/0.json",
  "func": "static void\nvirtio_blk_deinit(struct vmctx *ctx, struct pci_vdev *dev, char *opts)\n{\n\tstruct blockif_ctxt *bctxt;\n\tstruct virtio_blk *blk;\n\n\tif (dev->arg) {\n\t\tDPRINTF((\"virtio_blk: deinit\\n\"));\n\t\tblk = (struct virtio_blk *) dev->arg;\n\t\t/* De-init virtio-blk device only on valid bctxt*/\n\t\tif (!blk->dummy_bctxt) {\n\t\t\tbctxt = blk->bc;\n\t\t\tif (blockif_flush_all(bctxt))\n\t\t\t\tWPRINTF((\"vrito_blk: Failed to flush before close\\n\"));\n\t\t\tblockif_close(bctxt);\n\t\t}\n\t\tvirtio_reset_dev(&blk->base);\n\t\tfree(blk);\n\t}\n}",
  "abstract_func": "static void\nvirtio_blk_deinit(struct vmctx *VAR_0, struct pci_vdev *VAR_1, char *VAR_2)\n{\n\tstruct blockif_ctxt *VAR_3;\n\tstruct virtio_blk *VAR_4;\n\n\tif (VAR_1->arg) {\n\t\tDPRINTF((\"virtio_blk: deinit\\n\"));\n\t\tVAR_4 = (struct virtio_blk *) VAR_1->arg;\n\t\t/* COMMENT_0 */\n\t\tif (!VAR_4->dummy_bctxt) {\n\t\t\tVAR_3 = VAR_4->bc;\n\t\t\tif (blockif_flush_all(VAR_3))\n\t\t\t\tWPRINTF((\"vrito_blk: Failed to flush before close\\n\"));\n\t\t\tblockif_close(VAR_3);\n\t\t}\n\t\tvirtio_reset_dev(&VAR_4->base);\n\t\tfree(VAR_4);\n\t}\n}",
  "func_graph_path": "projectacrn/acrn-hypervisor/dd88504804e186029f845a166dc5c31695e2cca2/virtio_block.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -14,6 +14,7 @@\n \t\t\t\tWPRINTF((\"vrito_blk: Failed to flush before close\\n\"));\n \t\t\tblockif_close(bctxt);\n \t\t}\n+\t\tvirtio_reset_dev(&blk->base);\n \t\tfree(blk);\n \t}\n }",
  "diff_line_info": {
    "deleted_lines": [],
    "added_lines": [
      "\t\tvirtio_reset_dev(&blk->base);"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/projectacrn/acrn-hypervisor/pull/6268",
  "description": {
    "pr_info": {
      "title": "dm: Reset virtio device before release",
      "number": 6268
    },
    "comment": [
      "With virtio polling mode enabled, a timer is running in the virtio\r\nbackend service. And the timer will also be triggered if its frondend\r\ndriver didn't do the device reset in shutdown. A freed virtio device\r\nwill be accessed in the polling timer handler.\r\n\r\nDo the virtio reset() callback specifically to clear the polling timer\r\nbefore the free.\r\n\r\nTracked-On: #6147\r\nSigned-off-by: Shuo A Liu <shuo.a.liu@intel.com>\r\nSigned-off-by: Yonghua Huang <yonghua.huang@intel.com>",
      "@shuox  @ywan170  this PR to back backport from release_2.5 branch, please review.",
      "No new violations to the coding guideline detected.<br>No New Name Conflict<br>No New Function Declaration/Definition Mismatch"
    ]
  },
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.8,
  "Bug Filter Response": "\n\nThe patch addresses a use-after-free issue in the virtio driver by resetting the device before freeing it. This prevents a crash due to accessing invalid memory but doesn't explicitly address a security vulnerability. \n\n**Final Classification:** Defect Remediation & Feature Upgrades  \n**Confidence Score:** 0.8"
}