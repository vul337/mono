{
  "cve_id": "CVE-2023-51713",
  "cwe_ids": [
    "CWE-125"
  ],
  "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
  "cvss_is_v3": true,
  "repo_name": "proftpd",
  "commit_msg": "Issue #1683: Avoid an edge case when handling unexpectedly formatted input text from client, caused by quote/backslash semantics, by skipping those semantics.",
  "commit_hash": "1376d8ccc0966d1ce9a1c76b32c6a9ca61bbe67f",
  "git_url": "https://github.com/proftpd/proftpd/commit/1376d8ccc0966d1ce9a1c76b32c6a9ca61bbe67f",
  "file_path": "src/str.c",
  "func_name": "pr_str_get_word",
  "func_before": "char *pr_str_get_word(char **cp, int flags) {\n  char *res, *dst;\n  char quote_mode = 0;\n\n  if (cp == NULL ||\n     !*cp ||\n     !**cp) {\n    errno = EINVAL;\n    return NULL;\n  }\n\n  if (!(flags & PR_STR_FL_PRESERVE_WHITESPACE)) {\n    while (**cp && PR_ISSPACE(**cp)) {\n      pr_signals_handle();\n      (*cp)++;\n    }\n  }\n\n  if (!**cp) {\n    return NULL;\n  }\n\n  res = dst = *cp;\n\n  if (!(flags & PR_STR_FL_PRESERVE_COMMENTS)) {\n    /* Stop processing at start of an inline comment. */\n    if (**cp == '#') {\n      return NULL;\n    }\n  }\n\n  if (**cp == '\\\"') {\n    quote_mode++;\n    (*cp)++;\n  }\n\n  while (**cp && (quote_mode ? (**cp != '\\\"') : !PR_ISSPACE(**cp))) {\n    pr_signals_handle();\n\n    if (**cp == '\\\\' && quote_mode) {\n\n      /* Escaped char */\n      if (*((*cp)+1)) {\n        *dst = *(++(*cp));\n      }\n    }\n\n    *dst++ = **cp;\n    ++(*cp);\n  }\n\n  if (**cp) {\n    (*cp)++;\n  }\n\n  *dst = '\\0';\n  return res;\n}",
  "abstract_func_before": "char *pr_str_get_word(char **VAR_0, int VAR_1) {\n  char *VAR_2, *VAR_3;\n  char VAR_4 = 0;\n\n  if (VAR_0 == NULL ||\n     !*VAR_0 ||\n     !**VAR_0) {\n    VAR_5 = VAR_6;\n    return NULL;\n  }\n\n  if (!(VAR_1 & VAR_7)) {\n    while (**VAR_0 && PR_ISSPACE(**VAR_0)) {\n      pr_signals_handle();\n      (*VAR_0)++;\n    }\n  }\n\n  if (!**VAR_0) {\n    return NULL;\n  }\n\n  VAR_2 = VAR_3 = *VAR_0;\n\n  if (!(VAR_1 & VAR_8)) {\n    /* COMMENT_0 */\n    if (**VAR_0 == '#') {\n      return NULL;\n    }\n  }\n\n  if (**VAR_0 == '\\\"') {\n    VAR_4++;\n    (*VAR_0)++;\n  }\n\n  while (**VAR_0 && (VAR_4 ? (**VAR_0 != '\\\"') : !PR_ISSPACE(**VAR_0))) {\n    pr_signals_handle();\n\n    if (**VAR_0 == '\\\\' && VAR_4) {\n\n      /* COMMENT_1 */\n      if (*((*VAR_0)+1)) {\n        *VAR_3 = *(++(*VAR_0));\n      }\n    }\n\n    *VAR_3++ = **VAR_0;\n    ++(*VAR_0);\n  }\n\n  if (**VAR_0) {\n    (*VAR_0)++;\n  }\n\n  *VAR_3 = '\\0';\n  return VAR_2;\n}",
  "func_graph_path_before": "proftpd/1376d8ccc0966d1ce9a1c76b32c6a9ca61bbe67f/str.c/vul/before/0.json",
  "func": "char *pr_str_get_word(char **cp, int flags) {\n  char *res, *dst;\n  int quote_mode = FALSE;\n\n  if (cp == NULL ||\n     !*cp ||\n     !**cp) {\n    errno = EINVAL;\n    return NULL;\n  }\n\n  if (!(flags & PR_STR_FL_PRESERVE_WHITESPACE)) {\n    while (**cp && PR_ISSPACE(**cp)) {\n      pr_signals_handle();\n      (*cp)++;\n    }\n  }\n\n  if (!**cp) {\n    return NULL;\n  }\n\n  res = dst = *cp;\n\n  if (!(flags & PR_STR_FL_PRESERVE_COMMENTS)) {\n    /* Stop processing at start of an inline comment. */\n    if (**cp == '#') {\n      return NULL;\n    }\n  }\n\n  if (!(flags & PR_STR_FL_IGNORE_QUOTES)) {\n    if (**cp == '\\\"') {\n      quote_mode = TRUE;\n      (*cp)++;\n    }\n  }\n\n  while (**cp && (quote_mode ? (**cp != '\\\"') : !PR_ISSPACE(**cp))) {\n    pr_signals_handle();\n\n    if (**cp == '\\\\' &&\n        quote_mode == TRUE) {\n      /* Escaped char */\n      if (*((*cp)+1)) {\n        *dst++ = *(++(*cp));\n        (*cp)++;\n        continue;\n      }\n    }\n\n    *dst++ = **cp;\n    (*cp)++;\n  }\n\n  if (**cp) {\n    (*cp)++;\n  }\n\n  *dst = '\\0';\n  return res;\n}",
  "abstract_func": "char *pr_str_get_word(char **VAR_0, int VAR_1) {\n  char *VAR_2, *VAR_3;\n  int VAR_4 = FALSE;\n\n  if (VAR_0 == NULL ||\n     !*VAR_0 ||\n     !**VAR_0) {\n    VAR_5 = VAR_6;\n    return NULL;\n  }\n\n  if (!(VAR_1 & VAR_7)) {\n    while (**VAR_0 && PR_ISSPACE(**VAR_0)) {\n      pr_signals_handle();\n      (*VAR_0)++;\n    }\n  }\n\n  if (!**VAR_0) {\n    return NULL;\n  }\n\n  VAR_2 = VAR_3 = *VAR_0;\n\n  if (!(VAR_1 & VAR_8)) {\n    /* COMMENT_0 */\n    if (**VAR_0 == '#') {\n      return NULL;\n    }\n  }\n\n  if (!(VAR_1 & VAR_9)) {\n    if (**VAR_0 == '\\\"') {\n      VAR_4 = TRUE;\n      (*VAR_0)++;\n    }\n  }\n\n  while (**VAR_0 && (VAR_4 ? (**VAR_0 != '\\\"') : !PR_ISSPACE(**VAR_0))) {\n    pr_signals_handle();\n\n    if (**VAR_0 == '\\\\' &&\n        VAR_4 == TRUE) {\n      /* COMMENT_1 */\n      if (*((*VAR_0)+1)) {\n        *VAR_3++ = *(++(*VAR_0));\n        (*VAR_0)++;\n        continue;\n      }\n    }\n\n    *VAR_3++ = **VAR_0;\n    (*VAR_0)++;\n  }\n\n  if (**VAR_0) {\n    (*VAR_0)++;\n  }\n\n  *VAR_3 = '\\0';\n  return VAR_2;\n}",
  "func_graph_path": "proftpd/1376d8ccc0966d1ce9a1c76b32c6a9ca61bbe67f/str.c/vul/after/0.json",
  "diff_func": "--- func_before\n+++ func_after\n@@ -1,6 +1,6 @@\n char *pr_str_get_word(char **cp, int flags) {\n   char *res, *dst;\n-  char quote_mode = 0;\n+  int quote_mode = FALSE;\n \n   if (cp == NULL ||\n      !*cp ||\n@@ -29,24 +29,28 @@\n     }\n   }\n \n-  if (**cp == '\\\"') {\n-    quote_mode++;\n-    (*cp)++;\n+  if (!(flags & PR_STR_FL_IGNORE_QUOTES)) {\n+    if (**cp == '\\\"') {\n+      quote_mode = TRUE;\n+      (*cp)++;\n+    }\n   }\n \n   while (**cp && (quote_mode ? (**cp != '\\\"') : !PR_ISSPACE(**cp))) {\n     pr_signals_handle();\n \n-    if (**cp == '\\\\' && quote_mode) {\n-\n+    if (**cp == '\\\\' &&\n+        quote_mode == TRUE) {\n       /* Escaped char */\n       if (*((*cp)+1)) {\n-        *dst = *(++(*cp));\n+        *dst++ = *(++(*cp));\n+        (*cp)++;\n+        continue;\n       }\n     }\n \n     *dst++ = **cp;\n-    ++(*cp);\n+    (*cp)++;\n   }\n \n   if (**cp) {",
  "diff_line_info": {
    "deleted_lines": [
      "  char quote_mode = 0;",
      "  if (**cp == '\\\"') {",
      "    quote_mode++;",
      "    (*cp)++;",
      "    if (**cp == '\\\\' && quote_mode) {",
      "",
      "        *dst = *(++(*cp));",
      "    ++(*cp);"
    ],
    "added_lines": [
      "  int quote_mode = FALSE;",
      "  if (!(flags & PR_STR_FL_IGNORE_QUOTES)) {",
      "    if (**cp == '\\\"') {",
      "      quote_mode = TRUE;",
      "      (*cp)++;",
      "    }",
      "    if (**cp == '\\\\' &&",
      "        quote_mode == TRUE) {",
      "        *dst++ = *(++(*cp));",
      "        (*cp)++;",
      "        continue;",
      "    (*cp)++;"
    ]
  },
  "is_vul": true,
  "pr_url": "https://github.com/proftpd/proftpd/pull/1696",
  "description": {
    "pr_info": {
      "title": "Issue #1683: Avoid an edge case when handling unexpectedly formatted …",
      "number": 1696
    },
    "comment": [
      "…input text from client, caused by quote/backslash semantics, by skipping those semantics."
    ]
  },
  "Bug Filter": "Defect Remediation & Feature Upgrades",
  "Bug Filter Confidence": 0.8,
  "Bug Filter Response": "\n\n**Final Output:**\nAnalysis: The patch modifies input handling to prevent edge cases caused by quotes and backslashes. It adds a flag to ignore quotes and adjusts quote_mode handling. While it addresses input parsing issues, there's no evidence of a security exploit being fixed.\n\nFinal Classification: Defect Remediation & Feature Upgrades\n\nConfidence Score: 0.8"
}